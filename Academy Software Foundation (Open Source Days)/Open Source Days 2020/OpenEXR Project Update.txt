Title: OpenEXR Project Update
Publication date: 2020-08-24
Playlist: Open Source Days 2020
Description: 
	OpenEXR Project Update
Speakers: Joseph Goldstone, Kimball Thurston, Christina Tempelaar-Lietz, Nick Porcino, Larry Gritz, Rod Bogart, Peter Hillman, Cary Phillips, Owen Thompson, Sarah Martin

For more information about the Academy Software Foundation go to: https://www.aswf.io/

The OpenEXR Open Source Day Session will review the latest developments and discuss the upcoming 3.0 release of OpenEXR. We will also introduce Imath as an independent project/library.

In recent developments, the 2.5.3 release of OpenEXR includes many small bug/security and build/install fixes and a read performance optimization. It includes all the recent improvements that are production-ready. We've also updated the technical documentation and the openexr.com website.

Looking forward, the 3.0 release will deliver a major reorganization and cleanup of the project, which should make building and installing OpenEXR simpler and more reliable. It will include a major rewrite of the core library that promises to significantly improve read/write performance by reducing buffer copies and improving thread-safety. It will also include a C-language version of the low-level IO.

The new Imath release features some significant improvements and modernizations to the code: modern C++, improved CUDA-compatibility, online documentation.

We would like to solicit feedback and suggestions on all these developments from the developer community.

We would also like to discuss with the motion picture community what role, if any, the reference implementation of OpenEXR should play in encouraging consistent use of attributes in the ACES Container spec (SMPTE ST 2065-4).
Captions: 
	                              let's dive in and start we have a lot to                               cover                               um we'd like to start off with a review                               of what's gone on with openexr in the                               last year                               we want to kick off a discussion around                               standard optional attributes in the asus                               basis container spec but most of the                               presentation is going to be about                                opening xr                                    and the soon to be independent                                imath library                                starting off with some introductions i'm                                carrie phillips from industrial light                                magic                                the technical steering committee is                                uh christina templar elites from uh epic                                games                                joseph goldstone from ari kimball                                thurston from wetta                                larry grits from image works nick pacino                                from                                pixar peter hillman from wetta and rob                                bogart from epic                                i just want to add that um we're not                                a sort of dedicated corporate                                team this is all kind of a of a side                                project for for all of us                                um we all have day jobs that that are                                our primary responsibility so                                we contribute to the um maintenance of                                open exr                                just kind of in in spare time here and                                there                                just because we enjoy it it's a valuable                                thing to do                                you can contact us through the openexr                                dev                                mail alias at the academy software                                foundation                                that that mail group is archived for                                you know as a as a knowledge base on the                                aswf                                um site you can reach us at our slack                                channel                                or another good way to reach us is                                through                                um filing an issue on the github repo                                we meet every other thursday                                for the the steering committee meeting                                so feel free to join us                                we're going to assume that openexr                                doesn't need a lot of technical                                introduction                                but i did want to start off by just                                restating the the project mission                                the goal of the openexr project is to                                keep the exr                                format reliable and modern and to                                maintain its place as the preferred                                image format for entertainment content                                creation                                the the principles that guide us in                                in maintaining the library are                                robustness reliability security                                compatibility performance simplicity                                adoption                                this is a decidedly conservative                                philosophy this is not                                a library that should see a whole lot of                                of                                churn or new features and that's                                certainly borne out over the last year                                we've put out                                eight releases in the last since the the                                birds of a feather at siggraph                                last year that's as many releases as                                open exr                                saw in the previous nine years                                there's not a lot of new features here                                most of this                                is um bug fixes um                                fixes to the build system improvements                                in the                                installation process and                                patches for potential security                                vulnerabilities                                something we did um a couple months ago                                was to integrate                                open exr with uh google's oss                                fuzz service it's a cloud-based                                automated fuzzing service                                so for the last couple months the google                                servers have been                                bombarding open exr with a stream of                                garbage input data searching for                                failures that could be potentially                                leveraged as security                                vulnerabilities we found about                                           found and fixed about                                                that i think you could really argue are                                 exploitable vulnerabilities but                                 this is still a valuable thing to do for                                 the library in the community to verify                                 the resilience of the image format                                 to uh potential attack                                 another thing we've been doing is giving                                 a facelift to                                 the the um openaxr.com website                                 and technical documentation sarah martin                                 from ilm                                 has been um has been looking into this                                 and i'm gonna pass it off to sarah to uh                                 to step us through what she's done                                 hi everybody my name is sarah martin and                                 i am a technical                                 assistant uh technical assistant here at                                 ilm                                 so earlier this year as kerry said he                                 asked me to take a look into updating                                 the current open exr website                                 which you can see here the design is a                                 little outdated and the html was a bit                                 hard to maintain                                 so i've been working on giving it a                                 modern facelift                                 the site is still a work in progress so                                 i'm presenting today to show the work                                 that has been done                                 and to give the community a chance to                                 offer any feedback                                 so first i'm going to give a short                                 breakdown of what work has been done                                 the biggest change is the style of the                                 new site                                 which was based on a mock-up the design                                 that i presented to the openexr steering                                 committee                                 this design has given the site a more                                 modern look and feel                                 um the content and the wording of the                                 site itself has been updated by                                 carrie and i cleaned up the html and                                 added new                                 style sheets to drive the look of each                                 page                                 this makes the content a lot easier to                                 maintain                                 previously the documentations                                 for the original techno technical                                 documentations were authored in                                 open open and brawl of latex                                 and we're only available in pdf form so                                 i migrated those docs from their                                 original sources                                 into a github wiki page where it is now                                 available                                 online um so                                 i took uh the original files and i                                 formatted them to fit                                 uh with markdown and did some                                 formatting to just make it look nice and                                 clean                                 all right um and so i'm currently                                 working on adding a gallery to browse                                 the images from the open exr                                 images repo this is a set of test uh                                 images that illustrates various features                                 of the open exr file format                                 and hopefully this will this update will                                 make                                 the images much more easily easily                                 accessible to the community                                 to be used for tests as i mentioned the                                 site is still a work in progress and i'm                                 aiming to have it                                 be completely live in the next few weeks                                 for now                                 it is available at a link that i will                                 put into the chat                                 um and we would absolutely love your                                 suggestions and or comments so                                 please feel free to email me at s martin                                 s-m-a-r-t-i-n iln.com                                 or file an issue at our repo it's been a                                 really great experience updating this                                 site and please look forward to seeing                                 it live                                 in a couple of weeks thank you so much                                 uh back to here so                                 sarah mentioned the open exr images repo                                 um this is a                                 a repo of example images that that                                 demonstrate all the different features                                 of the library                                 that are useful in                                 um validating testing the library um it                                 hasn't been updated in some time                                 arco rossia has volunteered to                                 take a new um set of images                                 and and integrate them with the um the                                 repo so                                 that should be coming soon                                 uh next i'll pass it off to joseph                                 goldstone from ari to talk about the                                 aces image container attributes                                 joseph did that take                                 am i here okay                                 okay good so um yeah my name is joseph                                 goldstone i'm an image science engineer                                 at re working for both munich and                                 burbank                                 i was an ilm employee at the time that                                 we designed openexr                                 i was also one of the people who helped                                 start the asus project                                 back in                                            it's been a long time uh there was a                                 certain point                                 when asus was becoming real where we                                 realized that we wanted                                 um to have openexr basically be our                                 standard format                                 but for various reasons standardizing                                 the full open exr                                 just wasn't possible so we chose a                                 subset                                 of openexr and                                 in this timeline and by the way the url                                 at the bottom                                 you can see this there so don't bother                                 scribbling this enormous diagram down                                 um it's for your review anytime you want                                 um anyway the solid black line is the                                 main open exr timeline                                 um somewhere around                                      there was the drafting group to come up                                 with this empty standard for this subset                                 that split off here and                                 just about the time that we finished and                                 a little bit after                                 deep images and open exr                                          released                                 maintenance on um on openexr                                 kind of went into this super long                                 drought and so                                 [Music]                                 we defined uh optional attributes                                 with standardized uh meaning                                 standardized names                                 as part of the simply standardization                                 work                                 but that was never actually rolled back                                 into the reference implementation                                 and so what this tiny talk about what                                 this tiny talk is about                                 is doing just that so we are getting                                 ready                                 to migrate the attributes that we                                 defined with their semantics and their                                 types                                 in the sympt                                        was officially called asus container                                 file layout is the name of the standard                                 into the open xr reference reference                                 implementation                                 and so let me go to the next slide                                 so this is terrifyingly long it's                                 actually                                    attributes and again                                 that url at the bottom will let you                                 peruse these at your leisure                                 um but these are the ones that we                                 defined                                 back in the day and i would roughly                                 categorize these into two different                                 groups                                 there are what i would call forensic um                                 it's                                 documentation so um                                 if you see something funky while you're                                 doing a comp that turns out to be                                 like fixed pattern noise or something                                 and you want to check all the other                                 shots                                 that were done on that camera well                                 there's a standard camera serial number                                 attribute                                 which assuming that you've been doing                                 your book keeping right will help you                                 very readily identify what other                                 material you might want to screen                                 but it's it's sort of a backwards                                 looking attribute                                 it's documentation if you need it                                 there's another type                                 um which is probably best exemplified                                 by lens metadata dynamic metadata that                                 can change from frame to frame                                 um and there's three different                                 meta datums metadata that are                                 defined for that in the container spec                                 but again they're not yet in the                                 reference implementation                                 um one of them actually i think focus                                 distance is but focal length is not                                 and aperture is also in the standard so                                 it's kind of weird to have two but not                                 three um in any case um                                 this adds focal length to the trio uh                                 there's a bunch of other stuff in here                                 what we're interested in and why i                                 implore you to go                                 here and then at your leisure look at                                 this and                                 and this is basically a pointer to a                                 thread                                 reply to the thread and tell us oh yes i                                 independently                                 uh implemented a an attribute called                                 image rotation                                 and um its units are radians and                                 uh it's counterclockwise or whatever                                 we'd love to hear from you                                 [Music]                                 we can't change the spec but when we                                 put the release notes out for the                                 reference implementation                                 we can certainly make people aware                                 because you don't want to be into                                 in a situation where you've                                 independently developed one of these                                 attributes                                 you're exchanging it with some other                                 facility and then                                 once the reference reference                                 implementation is out there in a couple                                 years you start getting                                 plates that have the same attributes but                                 different semantics                                 so help us give you a heads up                                 now um again this went out                                 as a standard seven years ago simply                                 standards                                 the life cycle is kind of like this it                                 takes an agonizingly long                                 amount of um bureaucracy and committee                                 work to produce one                                 a year after that there's the so-called                                 one-year review                                 which is is course corrections                                 um any of those are made and then it                                 goes into a five-year review period and                                 once that five years is up then again                                 any course corrections that might need                                 to be made there's the opportunity                                 well the asus container spec is up for                                 its five-year review this year                                 so my experience answering                                 customer agitated questions um                                 and talking to the community a lot here                                 are the ones that                                 we are intending to propose for the                                 year revision and um assuming that                                 they're accepted that we would also put                                 into the reference implementation                                 so the um                                 [Music]                                 existing implementation it's in the                                 reference implementation the aperture                                 attribute                                 is kind of terribly defined in that it                                 says something like                                 aperture means t stop unless you don't                                 know t-stop in which case feel free to                                 use f-stop instead                                 this is bad because you have no idea                                 when you get it which one it                                 is so um we'll be proposing                                 deprecation of this an introduction of                                 two separate                                 optional attributes so that when you get                                 it                                 you know what it means um two other ones                                 that                                 um we should have seen this coming focal                                 plane image size                                 um                                                                and orientation need to know what the                                 actual size on the imager was                                 and that wasn't part of the original                                 spec so that's in there                                 um people have gotten so sophisticated                                 in the interim in                                 terms of their measurement of lens                                 distortion                                 that they measure at different lens                                 element temperatures and there are                                 sensors inside the lenses that will tell                                 you what it is so you can                                 know which distortion map to use so                                 we'll standardize provision for carrying                                 that as well                                 again lens firmware version the lenses                                 have gotten so complicated that                                 they're essentially little computers                                 that go onto the front of your camera                                 and um when there's a firmware change                                 their behavior can change                                 so it's important to know forensically                                 which one was on there                                 color temperature intent not so much                                 an asus linear thing but it's often good                                 to know                                 um just what the camera was set to um                                 more for edge cases lastly frame lines                                 uh                                 and this is an area that's getting a                                 little attention in the asc groups right                                 now                                 um both for marking action areas and for                                 setting up a cropping rectangle for                                 dailies                                 or screeners or whatever                                 this is to help you automate those                                 workflows and get them to be more                                 consistent                                 so again this url at the bottom                                 if you'll go there if you'll take a look                                 at these attributes                                 if there's anything there that um                                 if you don't recognize anything there uh                                 i                                 don't quite want to say great but that                                 means that you don't have anything                                 conflicting which is good                                 um if you do see something there though                                 please comment on the thread                                 um so that we can just have a heads up                                 and if you feel like there's something                                 that's critical for your work                                 that's not either in the ones in the                                 asus spec that will soon be in the                                 reference implementation or these new                                 ones                                 please put that on the common thread as                                 well so that's it for me                                 and i'll try and relinquish this                                 um how do i do that oh stop remote                                 control                                 okay you should have it back thanks                                 so moving on to imath and open exr                                  so there's really three parts to what                                 we're uh                                 what we're contemplating here the first                                 is a reorganization                                 of the the openexr                                 repo a cleaving off of                                 the imaf and half libraries                                 into a separate repo to be managed and                                 released independently                                 and then a light kind of modernization                                 of the imaf                                 code so we pitched this as a                                 google summer of code project and found                                 owen thompson at um rochester institute                                 of technology                                 who has been working with us over the                                 summer to                                 uh to to roll this out so                                 um owen is gonna step us through what                                 he's done                                 i'll give you just a little bit of a                                 preview                                 one of the things that newcomers to open                                 the openexr                                 library have always been puzzled by is                                 the name ilm imf                                 we've decided to rename that to simply                                 open exr                                 um we're not moving we're not renaming                                 any header files so any code that links                                 against                                 um compiles against openexr will                                 continue to compile                                 fine without changes um the only change                                 will be in the dependency the                                 the link line and then uh how um                                 the external imath library is is linked                                 the um um and that's going to be done                                 through the                                 cmake external project                                 mechanism ix and island thread                                 are staying a part of of the openexr                                 repo there'll be no more ilm base no                                 more pi                                 ilm base because all of that code has                                 moved into the imath repo                                 we're retiring the viewers code because                                 it was                                 hopelessly out of date we're also                                 retiring the auto                                 tools build infrastructure in favor of                                 of cmake so with that                                 i'll oh one other thing we're taking                                 the opportunity to um convert to                                 a more inclusive uh naming convention                                 for our branches we're gonna                                 have two branches in the repo one is                                 release which will point to the latest                                 stable release                                 and dev which will point to the the tip                                 of most recent development where                                 pull requests are merged and there'll be                                 no more master branch                                 uh and with that i'll pass it over to                                 owen                                 thank you carrie um so                                 with the separation of imap um we took                                 that as an opportunity to                                 make a few organizational changes with                                 the project structure                                 if you look over here on the right um                                 you can see                                 there's a new structure the most                                 important aspect of which is                                 the this directory labeled python which                                 holds                                 all of the python bindings um                                 for imath and the                                 reasoning behind putting it in there is                                 multiple reasons first of all a lot of                                 issues people were having with                                 building open exr um stemmed from                                 imath and particularly the python                                 bindings                                 and boost python and a lot of the people                                 that were having                                 issues with that weren't even interested                                 in having the                                 python buildings built at all so they're                                 put in their own subdirectory and                                 are by default not compiled                                 when you install imath and open exr                                 consequentially so you have to                                 specifically                                 specify you want the python bindings                                 because a                                 um as i said before is tripping a lot of                                 people up and also it takes up majority                                 of the compilation time anyway so                                 we'd rather not have any redundancy in                                 that                                 vein                                 um so there was another avenue                                 that we sought to improve imath in and                                 that was with modernization                                 and these two macros kind of uh                                 show a large portion of the changes um                                 here                                 in the top half of the screen you can                                 see that we have a macro called                                 imathconst expert                                   which basically is defined to be                                 constant expert                                 if you are using c plus plus version                                    or greater                                 and the reason we have this is so that                                 we can have                                 um as many possible uh                                 functions as defined as const expert                                 in imap while still maintaining                                 compatibility with                                 older versions of c plus plus                                        there's a great deal of change                                 difference between the what you can                                 define as context for between                                            so                                 this macro was important                                 we also have a another macro called                                 imath host device which                                 is defined based on whether or not                                 you're compiling for the cuda kernel                                 and with the current                                 setup you can compile any imap function                                 on the cuda kernel                                 and run it on the cpu or the gpu                                 and if you are not compiling for cuda                                 nothing changes at all for you                                 so nothing to worry about                                 and this is just a example of what that                                 would look like in code                                 in this case for a vic                                    um we also took this                                 to as an opportunity to get rid of some                                 redundancy in imath                                 specifically iex which was an exception                                 library                                 um here you can see that if you try to                                 get the length                                 of a vector here um or i'm sorry if you                                 try to normalize a vector that has a                                 length of zero                                 it gives you a domain error now it used                                 to just give you an error called                                 i think it was vector norm something                                 it this seems like a more pragmatic                                 use and it also eliminates unneeded                                 code with iex                                 and this is another change that is                                 being proposed um if you look at the                                 union                                 uh part at the top of this                                 template class you can see that there                                 is a struct with uh                                 uh um                                 variables x and y are of object                                 t and then um you're able to index into                                 them using                                 the uh                                 bracket operators down here um with this                                 implementation you are able to                                 auto vectorize um with                                 compilers more easily as opposed to                                 the current implementation which only                                 has                                 the first half of the union it doesn't                                 have a vector                                 so indexing with the brackets is                                 um not as clean                                 so this is a proposed change and if                                 people have any issues with it                                 or just want to discuss it we welcome                                 any input                                 and we also have developed a claim                                 format                                 standard for imath it has been um                                 run and is included in the repo and you                                 can run it yourself                                 on any code that you hope to submit um                                 but that is not going to be reflected in                                 the                                 uh repo history because it's been added                                 to the get blame ignore                                 um so because like if you run clean                                 format on all the code it's going to                                 look like somebody                                 changes almost everything in the library                                 when it's not really the case so                                 yeah and i think that's it for me                                 yep                                 so turn it over to kimball thurston                                 who's gonna talk about                                 changes for open xr                                  sure um                                 so i uh                                 kerry's talked a little bit about                                 reformatting the um                                 uh the webs the website the web the                                 the repository layout and owen's been                                 working away in imap which is awesome                                 um we've had a number of requests we've                                 had for uh                                 last couple of weeks came up at the last                                 ball for siggraph last year was to                                 do some things like allow uh things like                                 b float                                                         um and so we've been and um we've been                                 looking                                 a little bit at that but also um with                                 all the renewed thing in the attributes                                 we've also been                                 talking about um either um                                 changing the layout slightly of the                                 files we're gonna if we're gonna                                 if we're to add a data type then we                                 should go ahead and make some other                                 changes and so we've been looking at                                 maybe relaying out the attributes at the                                 beginning of the file                                 so that we can do some faster loading of                                 that and i'll get more into that in a                                 moment                                 or maybe um making a whole new part type                                 that is just a chunk of metadata and                                 some of this stuff we're still                                 we're still talking through um uh but                                 uh we'll we'll get more into that um a                                 little bit later                                 the um                                 the the the part metadata type would                                 would um                                 it would just be sort of like a pseudo                                 image where the the metadata is actually                                 the in the data chunks                                 uh carry i seem to oh no there it goes                                 um                                 and so but one of the things that i                                 really wanted to talk about                                 um that uh i've been looking at off and                                 on for the last year                                 is um is the uh                                 is the performance of open xr and so um                                 uh this hits us a lot                                 in when we use exr images for texturing                                 but it also i think                                 has um impact when people are just                                 trying to stream images off a disc                                 in a play or any sorts of things and the                                 the way that the threading was written                                 um in island imf has sort of                                 an inherent overhead to it that                                 didn't quite know how to overcome                                 without sort of visiting large chunks                                 of the code base um and so                                 to do that what um started doing                                 is uh written a thing calling the the                                 core library                                 and i've chosen to do this in in raw c                                 code                                 which will um uh                                 be sort of a fulfillment of another                                 request that we've had                                 um and uh which is to have sort of a                                 more minimal                                 um library that makes it easier for it                                 for some people to do                                 to use um but uh                                 the the idea is that we rebuild open xr                                 on top of this                                 um and have sort of some more uh threat                                 oriented apis                                 um and so what does this really                                 what does this entail and what is this                                 um                                 what what does this this mean um i                                 thought it would show a couple of charts                                 and sort of talk through some of the                                 things that have been that i've been                                 focusing on                                 the first one is just literally opening                                 up a file um                                 you know when you have a cpus plus class                                 it's got a standard map that has all                                 your attributes in it                                 you end up doing lots of news and freeze                                 and these sorts of things                                 and so um the next couple of charts that                                 i'll show you they're all                                 um basically doing the same test which                                 is                                 reading um i think                                     exr images uh off of disc                                 that are um zip s compressed so that's                                 the                                                   per chunk um compression um                                 and so this this first one is just                                 literally the time                                 it takes if you when you say open right                                 so basically                                 when you construct the the um the the                                 input file                                 uh class and it parses the header um and                                 so the red the red                                 chunk is how long it takes existing plus                                 class and the the blue line is is the                                 the new                                 thing um and so you can see that this                                 lower overhead and                                 largely this is around new and delete                                 and creating maps versus just having um                                 a structure um                                 and so that's maybe not so interesting                                 one of the things that starts getting                                 more interesting                                 is this is the same thing but when you                                 actually close the files so you                                 i'm not talking about reading data but                                 just saying you know effectively close                                 right and one of the things you begin                                 noticing is again it's basically                                 constant speed                                 but in in the existing open xl library                                 there's actually a growing                                 time to close as the number of number of                                 threads                                 increases and this is because internally                                 it's having to create a bunch                                 of internal structures so that it can                                 keep threads happy                                 and there's a different way of building                                 building the                                 data structures to to not have to do                                 that                                 and um this final chart um                                 is uh is is the ratio it's                                 it's i couldn't figure out a good way of                                 drawing this but this is the ratio                                 between the old library and this new                                 core layer                                 in terms of of doing actual image read                                 and what i'm doing is i'm reading the                                 image off disk and reformatting it into                                 rgba                                 interleaved and so the majority of the                                 time is of course spent                                 um in an unzip um but one of the things                                 you'll immediately see                                 is that my machine that i was testing on                                 only has eight threads and hyper                                 threading                                 helps a little bit but isn't the                                 greatest thing ever                                 uh but that there's uh that we're                                 getting some serious                                 wins um in terms of reducing the                                 overhead                                 um of of having multiple threads                                 hammering away at the same file                                 um and so uh that that seems like a good                                 thing                                 um                                 and and so                                 darn it sorry                                 wait go back um                                 i uh the the thing that we're still                                 working on is finishing uh right support                                 for this um and then starting to replace                                 the underlying c plus bits and so we                                 aren't envisioning any sort of change                                 for the existing c                                 plus api so everyone should sort of                                 transparently get this                                 um we will be adding some uh additional                                 api                                 as we move forward to expose                                 um some of this sort of low level access                                 to this one example of that is in                                 in when you're reading a a tiled file                                 rather than having to say set frame                                 buffer and then read                                 as separate calls which of course                                 introduces a                                 thread unsafe uh point we'll make a                                 we'll add a call that basically just                                 says                                 you know read and unpack um a tile all                                 at once                                 um and and so we'll be adding some api                                 but the existing api shouldn't change                                 and so um with that                                 um i'll thank owen once again for for                                 spending the summer with us                                 it's been great having him be involved                                 and uh i think we're going to start                                 doing some                                 questions right carrie yeah i'll just uh                                 add my thanks to owen and say to                                 everybody                                 that uh owen's looking for a job if                                 you're hiring let him know                                 this is it's been a great project and a                                 great experience um                                 working with him um which is a                                 testament to him and to the google                                 summer code project                                 so um uh thanks again                                 um one final thing that i wanted to                                 mention um                                 openexr is migrating to a new                                 contributor license agreement this um                                 there were some companies balked at the                                 terms of the                                 um the existing agreement and                                 the software foundation                                 governing board legal committee worked                                 out                                 a new set of terms which we've                                 we're in the process of adopting for the                                 the library which means that all                                 contributors need to resign                                 the new cla um it's not                                 from layman's point of view                                 significantly different but um                                 um but anyway if you're uh in a position                                 to submit a                                 a pull request to the library you're                                 going to need to have signed the cla                                 first                                 and again                                 our contact information and with that                                 we can go over questions                                 so uh we have one question that's open                                 right now from dimitro korolov                                 it's he asks will python binding be                                 included in                                 opening xr                                                            and                                 like in the current uh like currently                                 and the third                                 part binding and he gave a link                                 referring to um                                 i have to look what the link is                                 referring to carrie do you want to                                 answer that                                 are you shh                                 yeah kimball you want to describe the                                 mechanism through which                                 um um open exr will build                                 imaf oh well um                                 you know okay i mean imath will be                                 building through a                                 uh an external project thing um however                                 the                                 the thing to note um and                                 is that um the the python bindings that                                 have been in the opening cyberpuzzler                                 were only for uh imath                                 uh previously and we never actually had                                 python                                 bindings for opening xr they were always                                 an external project                                 um and so i think as we move forward                                 one of the things that we will uh                                 we will look at doing is converting the                                 existing imath bindings to use pi bind                                                                    and then potentially add at open exr                                 versions of that to read the opening sr                                 files directly                                 and that may involve talking to the                                 folks that maintain the                                 pi open exr bindings and and getting                                 them to contribute or                                 i don't think we've we've gotten that                                 far yet but                                 hopefully that hopefully that answers                                 that question                                 and then we have another um answered                                 question shall i go ahead and read that                                 so that it's on the                                 recording sure um                                 that is uh eric reineke asked                                 what are the expected uses of display                                 window versus two frame line attributes                                 and                                 joseph do you want to read your answer                                 since uh or                                 it's inordinately long um but                                 um let's see i mean i think                                 that the proposed frame line thing is in                                 a way more general                                 um the asc is is                                 starting this project and it's                                 not going to be a simple attribute it'll                                 probably be like                                 json serialized something like that it's                                 intended                                 to be applicable not just to open the xr                                 but to a variety of other                                 file formats as well which is why we                                 carry it as a serialized stream                                 and you could carry in theory you know n                                 different                                 frame lines within there for                                 people have discussed having different                                 crops for screeners versus                                 for dailies other applications as well                                 so                                 i think it's more general than that than                                 the                                 display window versus data window                                 dichotomy                                 yeah i think further joseph is that they                                 don't guarantee that they even make a                                 rectangle                                 whereas the display window is a                                 rectangle the frame lines could cross                                 each other                                 for example and the continuation of that                                 cross could be present                                 not in what's being discussed this week                                 okay but so far                                 yeah but but um this could happen                                 yeah i mean i would encourage anybody                                 who really cares about this you can                                 email me i it's jay goldstone at                                 erie.com                                 and i could put you in touch with jesse                                 carosi who is                                 kind of writing heard on the whole asc                                 advanced metadata stuff and                                 if you're not getting enough slack                                 action then definitely this is for you                                 and that appears to wrap it up for our                                 questions                                 so the imaf repo is available now                                 for um for preview at uh                                 github.com academy software foundation                                  slash imath                                  um take a look um it's pre-release                                  there's a number of other things we need                                  to finish off before we                                  um we make an official release in the                                  next                                  week or so the changes that we                                  highlighted in                                  the the organization of the imac of the                                  open xr repo                                  are going to go live so as of a couple                                  within the next week or so the master                                  branch will go away                                  and the layout of the                                  um the the dev branch will change                                  significantly and will                                  start to roll out the changes that                                  kimball has has been working on                                  has been describing and go through                                  a lot of pre-release you know discussion                                  and evaluation and testing so                                  um take a look give us any feedback                                  we're                                  um we're more than open to uh to taking                                  any suggestions about                                  you know what you'd like to see what                                  you'd like to not see                                  um so um please let us know                                  but i think we will mail out                                  instructions when we just because we're                                  going to have to                                  force push a couple of things to the git                                  repo um to                                  to do that rename we will send out                                  instructions um so that you can                                  sort of have an easy path to upgrading                                  if you have a local                                  local clone of the repo i                                  i'd like to add a note about the imath                                  which is just that                                  um part of the original point of that                                  body of work in particular of cleaning                                  it off                                  is to make it easier for other projects                                  to be able to use                                  the straightforward vector and matrix                                  and other math odds and ends part of                                  imap without like i think in the past                                  many projects who maybe wanted to do                                  that felt like having to pull in                                  all of openexr even if they weren't                                  interested in reading and writing images                                  through that interface was                                  a bit of a high bar and a bigger                                  dependency to have to swallow                                  and so because our intent is to make                                  this                                  you know painless and attractive for                                  people to use                                  these vector classes instead of making                                  you know                                  yet another equivalent set for every                                  other library                                  we were especially keen to hear feedback                                  from the other library maintainers about                                  whether we've done everything that you                                  need                                  in order to do that or if there's still                                  time to fix                                  anything is what i'm trying to say                                  i think another positive aspect of that                                  larry is that now imaf                                  can continue on and do things that it                                  might not have originally been thought                                  of because                                  it was part of exr but now it can have                                  its own future that could be bigger and                                  better than that i think that's kind of                                  an exciting                                  opportunity because when we first wrote                                  it one of the things that was                                  interesting about                                  uptake on openexr is how much feedback                                  we got                                  about how nifty it was that there's this                                  imath library in there                                  and people were excited about that you                                  know all those years ago                                  and but then it sort of stagnated and it                                  stayed what it was so it's nice that we                                  could now                                  continue and have other sort of                                     library or whatever                                  kind of convenient functions that might                                  go in there that i think will be nifty                                  for the future                                  but i think one of the main nifty things                                  about imath                                  is the fact that it's simple it's simple                                  it's lightweight                                  it doesn't do there's a lot of things                                  that it doesn't do                                  but our philosophy is if you want a                                  whole lot more                                  use eigen or use something else the                                  value of this library is that it's                                  primarily just a lightweight                                  representation                                  so i think when we first you know over                                  the last couple years we've been                                  talking about this project um we've                                  raised several                                  possibilities for big changes or                                  you know scope creep or whatever and i                                  i think we want to do whatever we can to                                  keep that in check to a certain degree                                  i think we we are willing to entertain                                  breaking backwards compatibility                                  um if the situation calls for it if                                  there's a really good                                  there's a logic behind it but again this                                  is not a library that we're expecting to                                  see                                  grow tremendously                                  well if there's no other questions we'll                                  call it a wrap thanks for                                  thanks for attending
YouTube URL: https://www.youtube.com/watch?v=ktAJch1u5BE


