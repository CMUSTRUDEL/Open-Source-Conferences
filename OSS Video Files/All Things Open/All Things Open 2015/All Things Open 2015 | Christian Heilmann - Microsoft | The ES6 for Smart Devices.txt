Title: All Things Open 2015 | Christian Heilmann - Microsoft | The ES6 for Smart Devices
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:07,160 --> 00:00:12,210
hello thanks for showing up in such

00:00:10,170 --> 00:00:15,929
great numbers that made showering all

00:00:12,210 --> 00:00:18,300
worthwhile this morning I'm obviously

00:00:15,929 --> 00:00:19,980
not from here I'm from London England so

00:00:18,300 --> 00:00:22,350
I'm confused by this yellow thing

00:00:19,980 --> 00:00:24,600
outside that you have in the sky that is

00:00:22,350 --> 00:00:26,160
also bad for redheads so I'm just like

00:00:24,600 --> 00:00:28,740
I'm staying in here and be with you so

00:00:26,160 --> 00:00:30,480
I'm safe and sound this is not be

00:00:28,740 --> 00:00:32,189
confused by a toilet this is me actually

00:00:30,480 --> 00:00:34,890
at the harry potter studios and that's

00:00:32,189 --> 00:00:36,149
the pensive of Dumbledore you know when

00:00:34,890 --> 00:00:37,590
he wants to forget something and then

00:00:36,149 --> 00:00:38,910
remember it again the thing that comes

00:00:37,590 --> 00:00:40,230
from there and i thought it was pretty

00:00:38,910 --> 00:00:41,579
cool to take a picture there and also

00:00:40,230 --> 00:00:42,899
what's on the plane didn't have any

00:00:41,579 --> 00:00:44,489
access to the internet so i just

00:00:42,899 --> 00:00:48,690
randomly put pictures in their head of

00:00:44,489 --> 00:00:50,070
my hard drive because I coach people on

00:00:48,690 --> 00:00:51,600
public speaking I do a lot of public

00:00:50,070 --> 00:00:53,160
speaking and your slide tech should

00:00:51,600 --> 00:00:54,660
always be your wallpaper not your

00:00:53,160 --> 00:00:56,039
presentation there's nothing worse than

00:00:54,660 --> 00:00:57,539
people read out there bullet points to

00:00:56,039 --> 00:00:59,609
you which is kind of ironic cuz i have a

00:00:57,539 --> 00:01:01,949
few bullet points to read out but you

00:00:59,609 --> 00:01:04,080
will see that later i want to talk about

00:01:01,949 --> 00:01:05,700
javascript and I've been doing

00:01:04,080 --> 00:01:08,729
JavaScript for a long long time I wrote

00:01:05,700 --> 00:01:10,770
the first Ajax book in 2006 because my

00:01:08,729 --> 00:01:12,210
publisher said HX is awesome and let's

00:01:10,770 --> 00:01:14,340
put that in there as well so explain

00:01:12,210 --> 00:01:17,159
what a variable is and cover HX in the

00:01:14,340 --> 00:01:18,869
same book no pressure so it was very

00:01:17,159 --> 00:01:20,670
interesting i read the book so many

00:01:18,869 --> 00:01:22,380
times while writing it at the end of it

00:01:20,670 --> 00:01:23,790
I just couldn't I wanted to rewrite it

00:01:22,380 --> 00:01:25,890
and that's the problem with JavaScript

00:01:23,790 --> 00:01:28,200
it's moving so fast we want to do things

00:01:25,890 --> 00:01:29,820
all the time newley and it can be quite

00:01:28,200 --> 00:01:32,070
a frustrating right now to try to keep

00:01:29,820 --> 00:01:33,600
up when i open my RSS reader in the

00:01:32,070 --> 00:01:36,479
morning yes some of the old people that

00:01:33,600 --> 00:01:38,070
uses RSS readers I find like six tiles

00:01:36,479 --> 00:01:40,530
new things in JavaScript and I feel like

00:01:38,070 --> 00:01:42,659
oh my god I'm falling behind and I'm old

00:01:40,530 --> 00:01:45,630
and I will die in a ditch and it will

00:01:42,659 --> 00:01:47,820
not be nice anymore and a lot of people

00:01:45,630 --> 00:01:50,040
feel that we innovate and we frustrate

00:01:47,820 --> 00:01:51,500
us ourselves at the same time and that's

00:01:50,040 --> 00:01:55,130
not the idea of technology

00:01:51,500 --> 00:01:57,410
not the idea of community so javascript

00:01:55,130 --> 00:01:59,930
is a lot of things it's an incredible

00:01:57,410 --> 00:02:01,520
versatile language it's like you know

00:01:59,930 --> 00:02:05,290
there's no type safety you know a

00:02:01,520 --> 00:02:08,509
variable can be a number of integer a

00:02:05,290 --> 00:02:09,800
string a cat a dog elephant whatever you

00:02:08,509 --> 00:02:11,870
want to make it and you can turn them

00:02:09,800 --> 00:02:13,490
from elephant into a duck into a number

00:02:11,870 --> 00:02:16,190
as well which confuses a lot of

00:02:13,490 --> 00:02:17,900
developers it's available when widen

00:02:16,190 --> 00:02:19,490
across many platforms that's the really

00:02:17,900 --> 00:02:22,010
cool thing as well it's basically a

00:02:19,490 --> 00:02:25,100
thing you can rely to be available to a

00:02:22,010 --> 00:02:27,500
degree and I'm beeping here so sorry

00:02:25,100 --> 00:02:29,150
about that it's tools that independent

00:02:27,500 --> 00:02:30,500
it's what I loved about JavaScript the

00:02:29,150 --> 00:02:33,320
first thing when i started i started

00:02:30,500 --> 00:02:35,870
with like edit calm on it on it on a

00:02:33,320 --> 00:02:37,820
windows 311 machine and like and then

00:02:35,870 --> 00:02:39,110
later on like text edit and that's all i

00:02:37,820 --> 00:02:41,360
needed it wasn't like oh download

00:02:39,110 --> 00:02:42,470
borland c++ builder for twenty thousand

00:02:41,360 --> 00:02:45,410
dollars and then you can start becoming

00:02:42,470 --> 00:02:46,940
a programmer and you're like what so you

00:02:45,410 --> 00:02:48,440
can build it with any tool set and it's

00:02:46,940 --> 00:02:50,239
quite funny how every month we say like

00:02:48,440 --> 00:02:51,770
you have to have this editor or you're

00:02:50,239 --> 00:02:54,350
not professional and you're not perfect

00:02:51,770 --> 00:02:56,120
yeah I used every editor on this planet

00:02:54,350 --> 00:02:57,739
after a while I'm now using sublime text

00:02:56,120 --> 00:02:59,540
I'm thinking about using Visual Studio

00:02:57,739 --> 00:03:02,360
code just to test it out and want more

00:02:59,540 --> 00:03:04,160
and yeah use VI whenever I am on a

00:03:02,360 --> 00:03:06,049
server and it's quite fund and you can

00:03:04,160 --> 00:03:08,450
jump between those two and it's very

00:03:06,049 --> 00:03:09,769
forgiving and inviting it's not a

00:03:08,450 --> 00:03:10,940
language that tells you like Oh

00:03:09,769 --> 00:03:12,830
everything is wrong that you're doing

00:03:10,940 --> 00:03:14,900
it's like you can make terrible terrible

00:03:12,830 --> 00:03:16,760
things in it but you can also write very

00:03:14,900 --> 00:03:20,420
beautiful college it's a bit like PHP in

00:03:16,760 --> 00:03:22,100
that way you could use JavaScript for

00:03:20,420 --> 00:03:24,110
browsers on the web that's the biggest

00:03:22,100 --> 00:03:25,610
use case that's one was made for but we

00:03:24,110 --> 00:03:27,410
shifted around a lot we put it on the

00:03:25,610 --> 00:03:29,690
server now with no Jas and there was

00:03:27,410 --> 00:03:32,720
lifescript the 997 as well by Netscape

00:03:29,690 --> 00:03:34,640
that was not fun you can use in

00:03:32,720 --> 00:03:36,590
applications many people don't know that

00:03:34,640 --> 00:03:38,780
for example you could script illustrator

00:03:36,590 --> 00:03:40,850
in JavaScript and I've written a lot of

00:03:38,780 --> 00:03:42,590
groups for people and for designers in

00:03:40,850 --> 00:03:45,079
my company to use javascript inside

00:03:42,590 --> 00:03:48,230
illustrator you can access services you

00:03:45,079 --> 00:03:50,420
can have like you can have like Jason

00:03:48,230 --> 00:03:52,400
objects from data services for example

00:03:50,420 --> 00:03:54,079
you have jason has a data format as well

00:03:52,400 --> 00:03:56,420
and you have it on hardware like the

00:03:54,079 --> 00:03:58,130
tehsil and all kind of like little IOT

00:03:56,420 --> 00:04:00,080
devices running JavaScript now as well

00:03:58,130 --> 00:04:00,710
and you can put it on your dog or your

00:04:00,080 --> 00:04:03,140
cat

00:04:00,710 --> 00:04:05,630
but you want to do I mean like the every

00:04:03,140 --> 00:04:07,640
Jays confit of like oh I'm an old copter

00:04:05,630 --> 00:04:09,230
and I've got a fridge and people put it

00:04:07,640 --> 00:04:10,640
on everything inspect the new linux

00:04:09,230 --> 00:04:11,900
kernel that you put on everything it's

00:04:10,640 --> 00:04:16,070
amazing there's actually a little code

00:04:11,900 --> 00:04:18,739
in JavaScript as well because we can and

00:04:16,070 --> 00:04:20,810
this flexibility of JavaScript makes all

00:04:18,739 --> 00:04:23,420
of that possible it's a very versatile

00:04:20,810 --> 00:04:26,060
language that changes itself to the

00:04:23,420 --> 00:04:27,590
environment so best coding practices in

00:04:26,060 --> 00:04:29,330
a node.js server is probably not the

00:04:27,590 --> 00:04:31,730
best coding practice on the front end

00:04:29,330 --> 00:04:33,350
but people keep telling us this is one

00:04:31,730 --> 00:04:36,500
thing and we all have to be like modules

00:04:33,350 --> 00:04:37,910
and fast driven and whatever javascript

00:04:36,500 --> 00:04:39,230
is in super-high d-mont you can find

00:04:37,910 --> 00:04:42,550
that out when into Google Trends you

00:04:39,230 --> 00:04:42,550
look for undefined is not a function

00:04:44,290 --> 00:04:49,160
then you realize that in 2014 a lot of

00:04:47,630 --> 00:04:50,840
people went from Java and other length

00:04:49,160 --> 00:04:52,670
which is into JavaScript and basically

00:04:50,840 --> 00:04:55,370
like oh god what am I doing here this is

00:04:52,670 --> 00:04:56,990
so weird we're going full speed and

00:04:55,370 --> 00:04:59,270
innovation does componentized web

00:04:56,990 --> 00:05:01,610
extensible management manifesto WebGL

00:04:59,270 --> 00:05:03,500
web assembly post CSS progressive apps

00:05:01,610 --> 00:05:05,740
as really cool stuff read all of that up

00:05:03,500 --> 00:05:07,730
there will be a test later and

00:05:05,740 --> 00:05:09,830
JavaScript technically doesn't exist

00:05:07,730 --> 00:05:11,960
it's a language that has been done in 10

00:05:09,830 --> 00:05:14,620
days in caffeine and probably other

00:05:11,960 --> 00:05:18,200
substances in fueled rage by this person

00:05:14,620 --> 00:05:21,040
Brendan Eich and this is when I stole

00:05:18,200 --> 00:05:24,670
his name tag at the last conference

00:05:21,040 --> 00:05:26,020
and he from ten days he built a language

00:05:24,670 --> 00:05:27,970
from scratch because he had to it was

00:05:26,020 --> 00:05:31,090
this completely random random random

00:05:27,970 --> 00:05:32,110
time frame and he basically built this

00:05:31,090 --> 00:05:33,730
thing and we think it's like a

00:05:32,110 --> 00:05:36,160
scientific think I see it more as like a

00:05:33,730 --> 00:05:38,230
you know a Frankenstein thing like

00:05:36,160 --> 00:05:40,390
thunder and claps and like and like

00:05:38,230 --> 00:05:41,770
electricity fizzing I think that's what

00:05:40,390 --> 00:05:43,810
how it happened because there's a lot of

00:05:41,770 --> 00:05:45,430
weird things in that language but i like

00:05:43,810 --> 00:05:49,330
that i mean i'm in german living in

00:05:45,430 --> 00:05:50,860
england i like weird languages so the

00:05:49,330 --> 00:05:53,440
problem is that he called in JavaScript

00:05:50,860 --> 00:05:55,690
because Java she might don't think but

00:05:53,440 --> 00:05:57,400
that back then Java was cool and he

00:05:55,690 --> 00:06:00,120
thought it was a good thing to sell that

00:05:57,400 --> 00:06:02,890
language by calling a javascript but the

00:06:00,120 --> 00:06:06,090
thing is that Java to JavaScript is the

00:06:02,890 --> 00:06:06,090
same and like hamster hamster

00:06:06,720 --> 00:06:10,770
it can be done but it's not a good idea

00:06:08,820 --> 00:06:13,140
and it's not necessarily the most

00:06:10,770 --> 00:06:15,150
beautiful thing to think of or car to

00:06:13,140 --> 00:06:16,680
carpet but it's always fascinating when

00:06:15,150 --> 00:06:19,140
you get dropped descriptions like yeah

00:06:16,680 --> 00:06:21,300
we need a Java Script developer who has

00:06:19,140 --> 00:06:22,860
like 60 years or struts experience new

00:06:21,300 --> 00:06:24,870
like you want to drop a developer you

00:06:22,860 --> 00:06:26,790
really do my favorite is when you get

00:06:24,870 --> 00:06:28,560
job descriptions he like half a year old

00:06:26,790 --> 00:06:32,310
technology seven years experience in

00:06:28,560 --> 00:06:34,290
that one place you like one so it's been

00:06:32,310 --> 00:06:36,480
a bumpy ride javascript does not exist

00:06:34,290 --> 00:06:38,580
de standard it's called egmore script

00:06:36,480 --> 00:06:40,890
and the TC 93 for some reason it's

00:06:38,580 --> 00:06:44,670
called that is the standards body of

00:06:40,890 --> 00:06:46,410
this and in 1997 a tech mascarpone and

00:06:44,670 --> 00:06:48,390
that was basically the first iteration

00:06:46,410 --> 00:06:50,880
of it that me and equus script to acma

00:06:48,390 --> 00:06:53,430
script 3 then we got confused and ex-

00:06:50,880 --> 00:06:55,650
group for got abandoned which be 2005

00:06:53,430 --> 00:06:57,240
and 2006 then everybody argued what the

00:06:55,650 --> 00:06:59,070
lab by the language should be going and

00:06:57,240 --> 00:07:01,770
then we had es harmony because we found

00:06:59,070 --> 00:07:04,169
harmony again in between in between

00:07:01,770 --> 00:07:06,600
adobe created all kind of script inside

00:07:04,169 --> 00:07:08,250
flash like ActionScript microsoft had

00:07:06,600 --> 00:07:09,360
our own language scripts everybody came

00:07:08,250 --> 00:07:11,640
up with their own language screams and

00:07:09,360 --> 00:07:14,220
now we have egg Musquin 5 and 2009 and

00:07:11,640 --> 00:07:17,060
that lasted for a long long time and now

00:07:14,220 --> 00:07:21,030
in 2015 we finally have egmore script 66

00:07:17,060 --> 00:07:22,979
now egmore script sticks is a five years

00:07:21,030 --> 00:07:25,169
since de prescrip five verification and

00:07:22,979 --> 00:07:27,510
there's some significant changes in the

00:07:25,169 --> 00:07:29,729
last 15 years for the first time we put

00:07:27,510 --> 00:07:31,320
these changes into the language people

00:07:29,729 --> 00:07:33,060
always wanted to turn javascript into

00:07:31,320 --> 00:07:35,190
their favorite language like first was

00:07:33,060 --> 00:07:36,750
java then it was Ruby and it was python

00:07:35,190 --> 00:07:38,240
that it was has scaled and was lower

00:07:36,750 --> 00:07:41,729
than it was ever people use nowadays

00:07:38,240 --> 00:07:43,560
julia as a new cool thing as well and we

00:07:41,729 --> 00:07:44,669
never said that or the standards body

00:07:43,560 --> 00:07:46,140
never said like well as a different

00:07:44,669 --> 00:07:47,760
language we don't want to have these

00:07:46,140 --> 00:07:49,590
things but now we put a few things in

00:07:47,760 --> 00:07:51,210
there because our environment change

00:07:49,590 --> 00:07:53,610
javascript is not only used in a browser

00:07:51,210 --> 00:07:56,580
anymore and with IOT coming our way and

00:07:53,610 --> 00:07:58,320
like low-end devices we have to have a

00:07:56,580 --> 00:08:00,240
language that is more strict than

00:07:58,320 --> 00:08:01,830
actually gives us a type safety that

00:08:00,240 --> 00:08:04,140
uses up less memory because a

00:08:01,830 --> 00:08:06,060
flexibility of a language means also is

00:08:04,140 --> 00:08:07,830
hard on the machine and it's hard on the

00:08:06,060 --> 00:08:09,840
RAM because it actually tries to guess a

00:08:07,830 --> 00:08:10,660
lot of stuff for you and I never liked

00:08:09,840 --> 00:08:13,210
much

00:08:10,660 --> 00:08:16,060
language is getting stuff for me that

00:08:13,210 --> 00:08:18,940
said it's backwards compatible so es6

00:08:16,060 --> 00:08:20,920
browsers will also run is 5 code and

00:08:18,940 --> 00:08:23,620
there's no problem with that like you

00:08:20,920 --> 00:08:25,510
can write your JavaScript like the mm /

00:08:23,620 --> 00:08:27,270
score rollover functions will still work

00:08:25,510 --> 00:08:30,970
but you should not use them any longer

00:08:27,270 --> 00:08:33,099
it's ratified in jun 2015 and there's

00:08:30,970 --> 00:08:35,530
basically now I standard for that but

00:08:33,099 --> 00:08:40,090
let's not go overboard with this first

00:08:35,530 --> 00:08:42,849
of all because if you remember and XHTML

00:08:40,090 --> 00:08:46,600
was considered a bad idea because it was

00:08:42,849 --> 00:08:49,330
one and the idea of XHTML was that we

00:08:46,600 --> 00:08:51,490
put XML on the web and we make the web

00:08:49,330 --> 00:08:53,650
incredibly strict so any single error

00:08:51,490 --> 00:08:55,540
that you're doing your HTML or the ad

00:08:53,650 --> 00:08:57,400
provider that you used or your content

00:08:55,540 --> 00:08:59,350
management system or what you see is

00:08:57,400 --> 00:09:01,060
what you get edited and you used would

00:08:59,350 --> 00:09:03,160
end up in this yellow screen of death

00:09:01,060 --> 00:09:04,720
and telling you like sorry this is

00:09:03,160 --> 00:09:06,580
broken you cannot get to this website

00:09:04,720 --> 00:09:09,760
much like a PHP script having an error

00:09:06,580 --> 00:09:12,040
will not render the page I kind of like

00:09:09,760 --> 00:09:13,870
it because it means like we know when

00:09:12,040 --> 00:09:15,910
something is very very broken but on the

00:09:13,870 --> 00:09:17,590
other hand our end users can get

00:09:15,910 --> 00:09:18,970
punished for our mistakes and that

00:09:17,590 --> 00:09:21,880
should not be the case because the web

00:09:18,970 --> 00:09:24,400
is there for people not for us so that's

00:09:21,880 --> 00:09:26,710
why html5 we said like okay let's make a

00:09:24,400 --> 00:09:28,540
parser that is much more forgiving so

00:09:26,710 --> 00:09:30,490
when you don't close a P tag it closes

00:09:28,540 --> 00:09:32,200
the P tag for you if you nest things

00:09:30,490 --> 00:09:33,700
wrongly it puts the thing outside the

00:09:32,200 --> 00:09:35,500
other thing if you don't encode

00:09:33,700 --> 00:09:37,180
something it tries to guess what it is

00:09:35,500 --> 00:09:39,430
and it gives you funny glyphs and stuff

00:09:37,180 --> 00:09:43,480
like that but it's it means the end

00:09:39,430 --> 00:09:46,030
users will always have a working website

00:09:43,480 --> 00:09:48,430
you always have something that is usable

00:09:46,030 --> 00:09:51,040
to them not necessarily beautiful but

00:09:48,430 --> 00:09:53,050
usable because HTML and CSS are both

00:09:51,040 --> 00:09:54,790
build with fault tolerance in build in

00:09:53,050 --> 00:09:57,100
them so when and ate better browser

00:09:54,790 --> 00:09:58,930
encounters an HTML element it doesn't

00:09:57,100 --> 00:10:01,120
know it just me okay whatever I just

00:09:58,930 --> 00:10:03,640
show you the content of it when a CSS

00:10:01,120 --> 00:10:05,560
parser CCSS declaration it doesn't know

00:10:03,640 --> 00:10:07,870
it in and go into the next line that's

00:10:05,560 --> 00:10:09,460
fine if a JavaScript has an error in it

00:10:07,870 --> 00:10:11,020
says oh my god the house is on fire and

00:10:09,460 --> 00:10:12,320
i'm going to die in there i'm not doing

00:10:11,020 --> 00:10:14,450
anything anymore and

00:10:12,320 --> 00:10:16,880
the rest of the of the computation of

00:10:14,450 --> 00:10:19,280
that JavaScript so it's kind of weird

00:10:16,880 --> 00:10:21,680
that by that we overuse javascript

00:10:19,280 --> 00:10:25,730
continuously right now this is NASA top

00:10:21,680 --> 00:10:28,160
golf right now and it gives you the idea

00:10:25,730 --> 00:10:30,080
of the expanse of space by showing you

00:10:28,160 --> 00:10:31,670
this black screen for about 12 seconds

00:10:30,080 --> 00:10:33,440
before it actually shows you the first

00:10:31,670 --> 00:10:34,940
page and then it shows you some spinners

00:10:33,440 --> 00:10:37,460
because you didn't wait long enough and

00:10:34,940 --> 00:10:38,990
then it shows you the page and it's

00:10:37,460 --> 00:10:42,320
finally finished at fourteen point eight

00:10:38,990 --> 00:10:45,770
seconds the reason why that is is that

00:10:42,320 --> 00:10:47,800
it has three megabyte of of blocking

00:10:45,770 --> 00:10:50,870
scripting before the first page repairs

00:10:47,800 --> 00:10:52,790
so they put ember and jQuery into one

00:10:50,870 --> 00:10:54,530
javascript file and didn't minimize it

00:10:52,790 --> 00:10:56,180
and didn't put a defer on it and just

00:10:54,530 --> 00:10:58,280
put it in the header of the page and

00:10:56,180 --> 00:11:00,680
before that's loaded the browser doesn't

00:10:58,280 --> 00:11:03,530
do anything else and this is kind of

00:11:00,680 --> 00:11:05,990
breaking the web like XHTML has done as

00:11:03,530 --> 00:11:07,850
well because one single javascript error

00:11:05,990 --> 00:11:10,550
if you rely on complete rendering of

00:11:07,850 --> 00:11:12,200
your page and all you get is this which

00:11:10,550 --> 00:11:16,230
is kind of pretty but also very much

00:11:12,200 --> 00:11:18,670
showing like hey user I hate you

00:11:16,230 --> 00:11:20,500
because I don't want spinners on the web

00:11:18,670 --> 00:11:22,060
i won content on the web I want images

00:11:20,500 --> 00:11:24,280
on the web of the video on the web one

00:11:22,060 --> 00:11:25,780
3d or one back we are on the web i want

00:11:24,280 --> 00:11:27,610
cool on the web but I don't want

00:11:25,780 --> 00:11:29,680
spinners and I don't want to think break

00:11:27,610 --> 00:11:32,320
when there's one single error but we do

00:11:29,680 --> 00:11:34,330
that in JavaScript all the time it's

00:11:32,320 --> 00:11:35,830
because partly because of JavaScript

00:11:34,330 --> 00:11:38,470
learning process that we had over the

00:11:35,830 --> 00:11:39,970
years it's always been interesting the

00:11:38,470 --> 00:11:42,910
first thing we did is use use view

00:11:39,970 --> 00:11:44,440
source to see what others are doing then

00:11:42,910 --> 00:11:45,850
we copy and paste the bits that look

00:11:44,440 --> 00:11:48,130
like they're responsible to do some

00:11:45,850 --> 00:11:50,380
things then we change some numbers

00:11:48,130 --> 00:11:55,150
around and then we run into errors and

00:11:50,380 --> 00:11:56,620
then be plain Internet Explorer that was

00:11:55,150 --> 00:11:58,540
back in the days of course but nowadays

00:11:56,620 --> 00:12:01,210
we're much more professional nowadays

00:11:58,540 --> 00:12:03,550
the process is we search for a solution

00:12:01,210 --> 00:12:04,930
on stack overflow we copy and paste the

00:12:03,550 --> 00:12:07,300
bids that look like they're responsible

00:12:04,930 --> 00:12:09,400
for some things we changed some numbers

00:12:07,300 --> 00:12:10,900
around we run into errors we blame

00:12:09,400 --> 00:12:14,260
JavaScript for being a terrible not a

00:12:10,900 --> 00:12:15,930
real language and for good measure we

00:12:14,260 --> 00:12:19,710
blame it in exploring

00:12:15,930 --> 00:12:24,240
I called up the full stack overflow

00:12:19,710 --> 00:12:25,800
Tavella where we just don't know what

00:12:24,240 --> 00:12:27,810
we're doing but we just copy and paste

00:12:25,800 --> 00:12:29,370
it in there and put more and more in and

00:12:27,810 --> 00:12:33,270
the more it is probably better you know

00:12:29,370 --> 00:12:35,100
like not another framework yay if you

00:12:33,270 --> 00:12:37,110
think javis can think of escalators

00:12:35,100 --> 00:12:38,910
Mitch Hedberg meters are joke like an

00:12:37,110 --> 00:12:40,140
escalator can never break which is kind

00:12:38,910 --> 00:12:42,630
of a run across the escalator here's

00:12:40,140 --> 00:12:44,070
block right now but the idea of an

00:12:42,630 --> 00:12:46,770
escalator is that when he breaks it

00:12:44,070 --> 00:12:48,240
becomes a set of stairs the idea of a

00:12:46,770 --> 00:12:50,880
lift or an elevator as you call it when

00:12:48,240 --> 00:12:53,160
that one breaks it's a room with people

00:12:50,880 --> 00:12:55,410
that you don't want to be in so an

00:12:53,160 --> 00:12:57,300
escalator will always be a possible

00:12:55,410 --> 00:12:58,560
thing to go to the other floor so should

00:12:57,300 --> 00:13:00,300
for the opportunity of JavaScript

00:12:58,560 --> 00:13:01,830
solutions you should build on something

00:13:00,300 --> 00:13:04,200
that works and make it prettier and

00:13:01,830 --> 00:13:05,940
better with JavaScript and that way you

00:13:04,200 --> 00:13:08,100
have full control over your over the

00:13:05,940 --> 00:13:09,930
experience of the user and users will

00:13:08,100 --> 00:13:11,399
never get something broken we always

00:13:09,930 --> 00:13:12,510
want to use JavaScript for everything

00:13:11,399 --> 00:13:14,910
because we want to control the user

00:13:12,510 --> 00:13:15,779
wrong this is not going to happen on the

00:13:14,910 --> 00:13:17,610
web and I'm going to give a keynote

00:13:15,779 --> 00:13:21,330
about that later I almost got the wrong

00:13:17,610 --> 00:13:22,950
slide deck here embracing es6 promotes

00:13:21,330 --> 00:13:24,810
java's can form a hack to a language to

00:13:22,950 --> 00:13:26,880
build large products with because we

00:13:24,810 --> 00:13:29,520
have a more strict to language now and

00:13:26,880 --> 00:13:30,959
we have more a pattern approach to

00:13:29,520 --> 00:13:33,089
development rather than just writing

00:13:30,959 --> 00:13:34,920
random things in there so javascript is

00:13:33,089 --> 00:13:36,930
not the duct tape of the web any longer

00:13:34,920 --> 00:13:38,750
because we love that for using years and

00:13:36,930 --> 00:13:41,370
we put too much duct tape on the web

00:13:38,750 --> 00:13:43,820
asics comes with so much goodness it has

00:13:41,370 --> 00:13:46,140
to be fattening if you think about it

00:13:43,820 --> 00:13:48,000
most of these things have different

00:13:46,140 --> 00:13:49,740
audiences so you got the same tactic

00:13:48,000 --> 00:13:51,720
sugar so for example arrow functions

00:13:49,740 --> 00:13:53,730
which means you don't have to use

00:13:51,720 --> 00:13:55,529
anonymous functions anymore you even

00:13:53,730 --> 00:13:57,570
have to lift use a thumb to name anymore

00:13:55,529 --> 00:13:58,980
if you just want to do few braces things

00:13:57,570 --> 00:14:00,300
and then error function in between and

00:13:58,980 --> 00:14:02,829
make it completely unreadable but yay

00:14:00,300 --> 00:14:04,910
less characters

00:14:02,829 --> 00:14:07,220
the best thing about the arrow functions

00:14:04,910 --> 00:14:09,140
that it solves this problem because that

00:14:07,220 --> 00:14:10,550
this scope always becomes the dis of the

00:14:09,140 --> 00:14:13,820
parent not of this of the function

00:14:10,550 --> 00:14:15,350
itself so that means that C++ developers

00:14:13,820 --> 00:14:16,610
and JavaScript Java developers don't

00:14:15,350 --> 00:14:19,519
hate you any longer which is a good

00:14:16,610 --> 00:14:21,110
thing we've got template strings which

00:14:19,519 --> 00:14:23,089
is now template fragments I think you

00:14:21,110 --> 00:14:25,579
have to change that that is really cool

00:14:23,089 --> 00:14:28,430
that's like PHP strings so you have like

00:14:25,579 --> 00:14:30,170
you can put a dollar and curly braces in

00:14:28,430 --> 00:14:32,149
there and every expression inside that

00:14:30,170 --> 00:14:35,029
string becomes gets replaced with the

00:14:32,149 --> 00:14:36,649
JavaScript that runs in dead string it's

00:14:35,029 --> 00:14:39,050
a back kick instead of a normal quote

00:14:36,649 --> 00:14:40,519
and it also has a if you put a word in

00:14:39,050 --> 00:14:42,470
front of it that becomes a function it

00:14:40,519 --> 00:14:44,630
gets called that parses that string

00:14:42,470 --> 00:14:46,459
before before it gets printed out so

00:14:44,630 --> 00:14:48,860
it's basically client side templating

00:14:46,459 --> 00:14:50,990
directly in the language right now also

00:14:48,860 --> 00:14:52,790
a great great way to get some XSS errors

00:14:50,990 --> 00:14:54,440
into your page if you don't actually get

00:14:52,790 --> 00:14:56,510
make sure that the JavaScript that comes

00:14:54,440 --> 00:14:58,160
in gets properly sanitized but we

00:14:56,510 --> 00:15:02,180
haven't done yet judge yet sadly enough

00:14:58,160 --> 00:15:03,589
populated heavily no rest spread and

00:15:02,180 --> 00:15:06,100
default is pretty cool as well we got

00:15:03,589 --> 00:15:08,750
default parameters now so you can say

00:15:06,100 --> 00:15:10,730
function a equals 1 being equal to 2 and

00:15:08,750 --> 00:15:13,370
so on and so forth so you don't have to

00:15:10,730 --> 00:15:17,240
do the a if a is undefined then do this

00:15:13,370 --> 00:15:21,529
double double braces kind of preset kind

00:15:17,240 --> 00:15:22,699
of thing it's not fun but it also shows

00:15:21,529 --> 00:15:24,380
that when you're when you write your

00:15:22,699 --> 00:15:26,959
code it shows what you expect which is

00:15:24,380 --> 00:15:29,089
pretty cool the spread of default is a

00:15:26,959 --> 00:15:32,779
rest and spread means you know you have

00:15:29,089 --> 00:15:34,339
a not a defined amount of parameters in

00:15:32,779 --> 00:15:35,959
the function but you can send an array

00:15:34,339 --> 00:15:37,610
in and you don't have to use the

00:15:35,959 --> 00:15:39,260
arguments array anymore to read that one

00:15:37,610 --> 00:15:42,019
out and then find the thing that you

00:15:39,260 --> 00:15:44,329
wanted to have it looks really nice and

00:15:42,019 --> 00:15:46,370
it actually makes for for very scalable

00:15:44,329 --> 00:15:48,740
functionality but I find it rather hard

00:15:46,370 --> 00:15:50,720
to read by now I but probably have to

00:15:48,740 --> 00:15:53,029
get used to it but I find it like every

00:15:50,720 --> 00:15:54,589
time I hire JavaScript developers the

00:15:53,029 --> 00:15:56,480
more parameters you had you function the

00:15:54,589 --> 00:15:58,550
less likely I would hire you because

00:15:56,480 --> 00:16:00,079
it's like it then the order is important

00:15:58,550 --> 00:16:01,820
and then you really don't know what's

00:16:00,079 --> 00:16:03,529
going on I'd rather have to have a JSON

00:16:01,820 --> 00:16:05,000
object with a name parameter and then I

00:16:03,529 --> 00:16:07,399
know what you want from me and what you

00:16:05,000 --> 00:16:09,560
put into that function so it's kind of

00:16:07,399 --> 00:16:11,520
it's kind of been shorting a lot of the

00:16:09,560 --> 00:16:12,930
shortening that we do right now

00:16:11,520 --> 00:16:14,220
it's like oh it's much more easier to

00:16:12,930 --> 00:16:15,720
read right now yeah if you know it but

00:16:14,220 --> 00:16:17,580
if you're an old fart like me and you

00:16:15,720 --> 00:16:19,440
come from the old JavaScript and kind of

00:16:17,580 --> 00:16:21,060
million times especially amount of times

00:16:19,440 --> 00:16:23,220
I try to debug JavaScript with arrow

00:16:21,060 --> 00:16:24,840
functions in it as PHP is quite amazing

00:16:23,220 --> 00:16:27,060
but you can use the little sooner or

00:16:24,840 --> 00:16:29,460
later i guess for scalable applications

00:16:27,060 --> 00:16:32,850
we've got let's constant block scope

00:16:29,460 --> 00:16:34,560
binding so with that the variable will

00:16:32,850 --> 00:16:37,260
be to that block rather than to the

00:16:34,560 --> 00:16:38,970
parent and you can you can with const

00:16:37,260 --> 00:16:40,650
you can never override them so they get

00:16:38,970 --> 00:16:42,510
memory allocated to them but they could

00:16:40,650 --> 00:16:44,460
never overwritten anymore which means it

00:16:42,510 --> 00:16:45,960
uses much less ram than that javascript

00:16:44,460 --> 00:16:47,790
does when you could reallocate the car

00:16:45,960 --> 00:16:49,470
at a constant all the time it's funny

00:16:47,790 --> 00:16:53,430
how people say like use a constant then

00:16:49,470 --> 00:16:54,630
like why can't I reset it you like it's

00:16:53,430 --> 00:16:56,730
a bit ly can see it says when people

00:16:54,630 --> 00:16:58,970
like why can't i use to ID sydney in the

00:16:56,730 --> 00:17:01,290
page you're like what does I teeny

00:16:58,970 --> 00:17:03,300
identifier how do you identify two

00:17:01,290 --> 00:17:07,110
things at the same name oh wait yeah

00:17:03,300 --> 00:17:08,400
that's okay promises is absolutely

00:17:07,110 --> 00:17:10,470
amazing of course it's the new thing

00:17:08,400 --> 00:17:12,150
that every single API that comes out now

00:17:10,470 --> 00:17:15,030
is promises rather than a callback hell

00:17:12,150 --> 00:17:16,770
and like function event handling classes

00:17:15,030 --> 00:17:19,530
is what everybody wanted and now we have

00:17:16,770 --> 00:17:21,120
it in JavaScript typed arrays is

00:17:19,530 --> 00:17:23,400
something that fell out of WebGL

00:17:21,120 --> 00:17:25,050
strangely enough so you have like a race

00:17:23,400 --> 00:17:26,970
that are much much faster because they

00:17:25,050 --> 00:17:30,350
get run they run on the video hardware

00:17:26,970 --> 00:17:33,690
and they also have been been pre

00:17:30,350 --> 00:17:35,280
pre-selected so you the array doesn't

00:17:33,690 --> 00:17:36,810
get iterated every single time you go

00:17:35,280 --> 00:17:38,400
through it that is also part of the

00:17:36,810 --> 00:17:40,370
JavaScript engine gravely enough for the

00:17:38,400 --> 00:17:42,120
chakra engine we have we did a lot of

00:17:40,370 --> 00:17:44,280
optimization for four loops because

00:17:42,120 --> 00:17:45,690
people write terrible follows no you

00:17:44,280 --> 00:17:47,760
don't need to read the length of the

00:17:45,690 --> 00:17:49,080
array on every iteration but every copy

00:17:47,760 --> 00:17:51,900
and paste example on Stack Overflow

00:17:49,080 --> 00:17:53,730
shows it as good thing and for library

00:17:51,900 --> 00:17:55,830
builders we got maps set and week map

00:17:53,730 --> 00:17:57,750
which is like not you don't use a race

00:17:55,830 --> 00:17:59,760
but you have proper mapping and it's

00:17:57,750 --> 00:18:01,710
much easier to use that one proto

00:17:59,760 --> 00:18:03,990
proxies simple subclass for buildings

00:18:01,710 --> 00:18:06,210
and so on and so forth the support is

00:18:03,990 --> 00:18:08,160
kind of encouraging this is a great

00:18:06,210 --> 00:18:10,770
website to go to Kang X get up the

00:18:08,160 --> 00:18:12,390
target of i/o compare table you six and

00:18:10,770 --> 00:18:14,580
that one shows all the different

00:18:12,390 --> 00:18:17,760
environments that run is six and how

00:18:14,580 --> 00:18:19,920
much does support is now support is

00:18:17,760 --> 00:18:20,830
always a thing like when you go to html5

00:18:19,920 --> 00:18:22,299
test

00:18:20,830 --> 00:18:25,870
like which is the best pro that it has

00:18:22,299 --> 00:18:27,789
the most html5 support ninety percent of

00:18:25,870 --> 00:18:29,649
those things you will never use what you

00:18:27,789 --> 00:18:31,179
really want to have is like a good solid

00:18:29,649 --> 00:18:33,159
support for the things that are neat

00:18:31,179 --> 00:18:35,500
that are necessary the maximum browser

00:18:33,159 --> 00:18:37,480
is always the one that wins html5 tests

00:18:35,500 --> 00:18:39,340
come because it uses every rendering

00:18:37,480 --> 00:18:41,320
engine of the planet inside that browser

00:18:39,340 --> 00:18:43,090
but you never know which one is in use

00:18:41,320 --> 00:18:44,769
right now so for debugging is actually

00:18:43,090 --> 00:18:46,210
more or less like a choose your own

00:18:44,769 --> 00:18:49,090
adventure game rather than finding out

00:18:46,210 --> 00:18:50,440
what the browser is doing so let's look

00:18:49,090 --> 00:18:53,679
at some numbers because people have

00:18:50,440 --> 00:18:56,440
numbers microsoft edge 13 is eighty

00:18:53,679 --> 00:18:58,899
percent support of es6 features Firefox

00:18:56,440 --> 00:19:01,000
and 71 percent chrome and opera is

00:18:58,899 --> 00:19:03,639
sixty-three percent Safari is fifty-four

00:19:01,000 --> 00:19:06,070
percent and on and mobile we got android

00:19:03,639 --> 00:19:07,389
twenty-nine percent and iOS 9 fifty-four

00:19:06,070 --> 00:19:10,090
percent and that makes me very very

00:19:07,389 --> 00:19:11,799
happy because at every conference I go

00:19:10,090 --> 00:19:16,870
right now people complain about Safari

00:19:11,799 --> 00:19:19,330
falling behind which is yes and and with

00:19:16,870 --> 00:19:20,769
es6 it's the first time that iOS has

00:19:19,330 --> 00:19:23,289
like okay we're on board as well we knew

00:19:20,769 --> 00:19:24,880
we need year six for our own platform we

00:19:23,289 --> 00:19:27,309
now made the automated scripts for

00:19:24,880 --> 00:19:29,679
example in El Capitan JavaScript as well

00:19:27,309 --> 00:19:31,120
we need this functionality whereas in

00:19:29,679 --> 00:19:32,620
CSS there's always the argumentation

00:19:31,120 --> 00:19:34,809
like we get our own stuff why don't you

00:19:32,620 --> 00:19:36,789
use ours because its patented yeah okay

00:19:34,809 --> 00:19:41,019
but we have our own stuff i will use

00:19:36,789 --> 00:19:43,149
ours anyways the problem for non

00:19:41,019 --> 00:19:45,279
supporting browsers is six features or

00:19:43,149 --> 00:19:47,049
syntax errors if you put a fat arrow and

00:19:45,279 --> 00:19:48,940
you run it in internet explorer 8 it

00:19:47,049 --> 00:19:50,799
says like and I don't want to do this

00:19:48,940 --> 00:19:54,600
this is weird this is something I don't

00:19:50,799 --> 00:19:57,460
know so the several way out of this one

00:19:54,600 --> 00:20:01,240
of them is transpiring to he is sick es5

00:19:57,460 --> 00:20:03,970
Mabel vamo Tesla Rio is a it's a

00:20:01,240 --> 00:20:07,240
transpiler so you give it code and you

00:20:03,970 --> 00:20:09,610
converts it to e is 5 and it runs on the

00:20:07,240 --> 00:20:11,620
server it runs on the client it runs in

00:20:09,610 --> 00:20:14,289
like build scripts you can use it what

00:20:11,620 --> 00:20:15,639
if or whatever it converts to your

00:20:14,289 --> 00:20:17,710
sticks into older version on the server

00:20:15,639 --> 00:20:18,970
or the clients so you can get ease 3 as

00:20:17,710 --> 00:20:21,159
well if you want to support like Mets

00:20:18,970 --> 00:20:24,490
get four or something like that why I

00:20:21,159 --> 00:20:26,289
don't know but you might want to it's in

00:20:24,490 --> 00:20:28,150
use by Facebook and many others and

00:20:26,289 --> 00:20:30,700
Facebook just hired a guy who wrote babe

00:20:28,150 --> 00:20:32,770
yes and I hope he is happy and they feed

00:20:30,700 --> 00:20:34,390
him and they keep him keeping doing lots

00:20:32,770 --> 00:20:35,620
of open source stuff but they're

00:20:34,390 --> 00:20:38,020
actually good at that so I'm quite sure

00:20:35,620 --> 00:20:39,550
they will and it's also used in editors

00:20:38,020 --> 00:20:41,860
and tool change so in editors it's

00:20:39,550 --> 00:20:43,450
really sweet that you can write here six

00:20:41,860 --> 00:20:47,290
and get all the beautiful thing of

00:20:43,450 --> 00:20:48,820
pattern development and two shorter

00:20:47,290 --> 00:20:50,260
syntax but you know that your code will

00:20:48,820 --> 00:20:52,450
run because it under the hood gets

00:20:50,260 --> 00:20:54,370
converted into something else so you can

00:20:52,450 --> 00:20:56,050
see in the rebel that is a life on the

00:20:54,370 --> 00:20:58,000
vapor chase website and you can write

00:20:56,050 --> 00:20:59,170
your code on the left-hand side and on

00:20:58,000 --> 00:21:00,550
the right hand side it turns it into

00:20:59,170 --> 00:21:02,590
JavaScript and you should have written

00:21:00,550 --> 00:21:05,380
but you don't want to because it's super

00:21:02,590 --> 00:21:06,880
complex at times the problems we're

00:21:05,380 --> 00:21:08,680
transpiring is that you have an extra

00:21:06,880 --> 00:21:09,760
step between writing code and running in

00:21:08,680 --> 00:21:11,620
the browser what I loved about

00:21:09,760 --> 00:21:13,870
javascript is but basically wrote it

00:21:11,620 --> 00:21:16,120
changed it reloaded the browser hey it's

00:21:13,870 --> 00:21:17,830
done now I need to go through my front

00:21:16,120 --> 00:21:19,270
transpiler script and see something

00:21:17,830 --> 00:21:21,100
happening in my terminal and I'm okay

00:21:19,270 --> 00:21:22,990
with that but somebody who's just

00:21:21,100 --> 00:21:24,670
starting is web developers probably will

00:21:22,990 --> 00:21:27,070
be confused but it and it's just an

00:21:24,670 --> 00:21:28,690
extra step to say people like you want

00:21:27,070 --> 00:21:30,250
to write JavaScript well you've got to

00:21:28,690 --> 00:21:31,780
have a macbook pro and you got to

00:21:30,250 --> 00:21:33,520
install Ruby and you gotta do go to

00:21:31,780 --> 00:21:36,760
terminal and do this and it just feels

00:21:33,520 --> 00:21:38,200
kind of odd we don't run or debug the

00:21:36,760 --> 00:21:40,090
code me right that's the other problem

00:21:38,200 --> 00:21:42,190
as well what's happening in the browser

00:21:40,090 --> 00:21:44,710
in the end is not the code that we free

00:21:42,190 --> 00:21:46,510
so that is terrible if you think about

00:21:44,710 --> 00:21:48,430
it because performance in the browser is

00:21:46,510 --> 00:21:50,380
our most important thing and we don't

00:21:48,430 --> 00:21:52,180
even own the code that's going out in

00:21:50,380 --> 00:21:53,620
the browser so if there's performance

00:21:52,180 --> 00:21:55,990
issues with it we don't know what's

00:21:53,620 --> 00:21:57,460
going on we hope that the transpiler

00:21:55,990 --> 00:21:59,380
creates efficient code what we don't

00:21:57,460 --> 00:22:01,090
know there might be things that in one

00:21:59,380 --> 00:22:03,010
browser is inefficient than in a browser

00:22:01,090 --> 00:22:04,750
browser is more efficient and if you

00:22:03,010 --> 00:22:06,520
written it by hand you would know this

00:22:04,750 --> 00:22:08,080
but if the transporter just creates this

00:22:06,520 --> 00:22:10,240
massive amount of code you have a

00:22:08,080 --> 00:22:11,800
problem and we create a lot of code

00:22:10,240 --> 00:22:14,590
that's the same with every pre

00:22:11,800 --> 00:22:16,570
compilation like SAS lesson CSS as well

00:22:14,590 --> 00:22:18,640
amount of people like oh good 15 lines

00:22:16,570 --> 00:22:20,890
of Trade and it's like okay now it's

00:22:18,640 --> 00:22:22,930
like a page of 6 megabyte because we

00:22:20,890 --> 00:22:25,270
never saw that we never saw the final

00:22:22,930 --> 00:22:27,250
product we saw the code that we wrote to

00:22:25,270 --> 00:22:29,560
create it and browsers that support

00:22:27,250 --> 00:22:31,059
istics will never get any and that's the

00:22:29,560 --> 00:22:33,549
real problem that's the

00:22:31,059 --> 00:22:35,379
that I'm talking about we put a lot of

00:22:33,549 --> 00:22:37,629
effort into the browser's to me to make

00:22:35,379 --> 00:22:39,039
understand es6 and as everybody needs to

00:22:37,629 --> 00:22:40,570
transpire it because they want to

00:22:39,039 --> 00:22:42,249
support holy browsers that should not

00:22:40,570 --> 00:22:46,779
exist any longer like internet explorer

00:22:42,249 --> 00:22:48,610
we I work for Microsoft we write this

00:22:46,779 --> 00:22:50,830
code that gets generated and then

00:22:48,610 --> 00:22:53,320
supports these old browsers and I'm not

00:22:50,830 --> 00:22:54,970
kidding in the next 4 8 and 9 is retired

00:22:53,320 --> 00:22:57,460
it should be on the field playing with

00:22:54,970 --> 00:22:59,529
other browsers and just going going

00:22:57,460 --> 00:23:03,720
fishing or something don't write code

00:22:59,529 --> 00:23:03,720
for it don't pester it anymore it's dead

00:23:04,200 --> 00:23:07,960
then we got feature testing of course

00:23:06,639 --> 00:23:10,330
feature testing is an awesome thing

00:23:07,960 --> 00:23:12,009
because you just test if something works

00:23:10,330 --> 00:23:13,990
and then you give the browser the thing

00:23:12,009 --> 00:23:16,649
it does and that's how i wrote my job is

00:23:13,990 --> 00:23:19,539
good for my whole life like if navigator

00:23:16,649 --> 00:23:21,249
ambient light then I can use the ambient

00:23:19,539 --> 00:23:23,320
light in my application it's like

00:23:21,249 --> 00:23:24,549
jumping into a river after testing that

00:23:23,320 --> 00:23:26,590
there's no sharks in there is deep

00:23:24,549 --> 00:23:28,809
enough it's probably a good idea you can

00:23:26,590 --> 00:23:29,769
do without it but it's it's probably a

00:23:28,809 --> 00:23:32,320
better idea to put an if statement

00:23:29,769 --> 00:23:35,799
around things does feature tests I oh by

00:23:32,320 --> 00:23:37,539
Kyle Simpson and it's it's just a

00:23:35,799 --> 00:23:39,580
JavaScript library you can put in and

00:23:37,539 --> 00:23:41,529
then you get a whole object saying what

00:23:39,580 --> 00:23:43,509
the browser can do right now and it

00:23:41,529 --> 00:23:45,070
caches it for like a week in local

00:23:43,509 --> 00:23:47,230
storage as well so it doesn't run leave

00:23:45,070 --> 00:23:48,940
the the JavaScript call every single

00:23:47,230 --> 00:23:50,830
time to test every single time it's

00:23:48,940 --> 00:23:52,539
pretty sweet it's also a good way to

00:23:50,830 --> 00:23:54,549
take that language take that library

00:23:52,539 --> 00:23:56,110
apart and do your own tests for only two

00:23:54,549 --> 00:23:57,789
things with es6 that you want to use

00:23:56,110 --> 00:24:01,149
like how do you test if arrow functions

00:23:57,789 --> 00:24:02,769
are supported or not the problem is

00:24:01,149 --> 00:24:04,720
feature testing is that it's an extra

00:24:02,769 --> 00:24:06,730
step that might be costly on top before

00:24:04,720 --> 00:24:08,619
your application runs but if you think

00:24:06,730 --> 00:24:10,059
about applications then it's just a part

00:24:08,619 --> 00:24:12,279
of your bootstrapping process and it

00:24:10,059 --> 00:24:13,779
shouldn't be that costly at all we can

00:24:12,279 --> 00:24:15,460
only do it client site that's the real

00:24:13,779 --> 00:24:16,779
problem because server side we don't

00:24:15,460 --> 00:24:18,610
know what browser is going to be used

00:24:16,779 --> 00:24:23,649
because it's only our server or phantom

00:24:18,610 --> 00:24:25,869
jas or other other headless browsers

00:24:23,649 --> 00:24:27,789
that might come we can get false

00:24:25,869 --> 00:24:29,649
positives experimental features might be

00:24:27,789 --> 00:24:31,340
implemented in a rudimentary fashion so

00:24:29,649 --> 00:24:33,080
it says the Opera was really good at

00:24:31,340 --> 00:24:35,150
I'm like yeah we got that API but we

00:24:33,080 --> 00:24:36,770
don't have any of the methods so here it

00:24:35,150 --> 00:24:38,210
great so again I test for the main

00:24:36,770 --> 00:24:39,590
object and that was not good enough I

00:24:38,210 --> 00:24:41,690
had to look through all the messages as

00:24:39,590 --> 00:24:43,130
well and we have to keep our future

00:24:41,690 --> 00:24:45,050
tests up-to-date and extend them as

00:24:43,130 --> 00:24:48,140
needed support for one feature does not

00:24:45,050 --> 00:24:50,510
mean support for another to a degree I

00:24:48,140 --> 00:24:52,130
find this a bit of a harsh thing I love

00:24:50,510 --> 00:24:53,990
key cutting the mustard object that

00:24:52,130 --> 00:24:56,090
people do with BBC in England what I do

00:24:53,990 --> 00:24:58,430
like navigator well they test for three

00:24:56,090 --> 00:25:00,980
things that modern browsers do and then

00:24:58,430 --> 00:25:03,440
put the modern code only in that browser

00:25:00,980 --> 00:25:05,570
modernist doesn't exist but we keep

00:25:03,440 --> 00:25:07,070
throwing it around but at times you have

00:25:05,570 --> 00:25:08,360
to be pragmatic and said okay I don't

00:25:07,070 --> 00:25:10,040
want to test for every single thing that

00:25:08,360 --> 00:25:12,160
I'm testing against yeah writing an

00:25:10,040 --> 00:25:15,200
article about you so I'm gonna stop now

00:25:12,160 --> 00:25:16,850
you can use an abstraction a frame of a

00:25:15,200 --> 00:25:19,070
library that has similar features there

00:25:16,850 --> 00:25:20,630
were a lot of them typescript is it's by

00:25:19,070 --> 00:25:22,940
Microsoft and it's used in angular 2

00:25:20,630 --> 00:25:24,620
right now there was coffee script that's

00:25:22,940 --> 00:25:26,840
not getting much love anymore right now

00:25:24,620 --> 00:25:29,750
there's there's all kind of like there

00:25:26,840 --> 00:25:31,670
was same script sound script whatever

00:25:29,750 --> 00:25:33,470
use the Force script people will come up

00:25:31,670 --> 00:25:34,970
with a new one every week and all of

00:25:33,470 --> 00:25:36,980
these things are JavaScript that

00:25:34,970 --> 00:25:38,660
transpired into javascript in JavaScript

00:25:36,980 --> 00:25:41,210
that was my shower and my old flat for

00:25:38,660 --> 00:25:43,160
like six years that's how lazy i am but

00:25:41,210 --> 00:25:45,230
abstractions are pretty amazing because

00:25:43,160 --> 00:25:47,480
they they allow us to do things now that

00:25:45,230 --> 00:25:48,470
in the future will be in the browser of

00:25:47,480 --> 00:25:50,390
course there's problems with

00:25:48,470 --> 00:25:51,920
abstractions they make us dependent on

00:25:50,390 --> 00:25:53,960
that abstraction the amount of people

00:25:51,920 --> 00:25:56,330
that are my job interviews with me and I

00:25:53,960 --> 00:25:57,890
try to hire them to work on Firefox is

00:25:56,330 --> 00:26:00,020
JavaScript developers may only you Jake

00:25:57,890 --> 00:26:03,950
Murray did you think the browser was

00:26:00,020 --> 00:26:06,980
Whitney jquery know why you here you

00:26:03,950 --> 00:26:08,810
know it's a we become dependent on that

00:26:06,980 --> 00:26:10,160
and we know more of the syntax of new

00:26:08,810 --> 00:26:12,320
things rather than the language itself

00:26:10,160 --> 00:26:13,730
we can't control possible version

00:26:12,320 --> 00:26:15,980
clashes in the abstraction layer like

00:26:13,730 --> 00:26:18,010
angular 1 angular 2 problem right now

00:26:15,980 --> 00:26:20,240
but people will have to deal with it

00:26:18,010 --> 00:26:22,760
maintainence need to know d abstractions

00:26:20,240 --> 00:26:24,980
instead of the standard of es6 so if you

00:26:22,760 --> 00:26:26,960
rely on abstraction big hiring becomes

00:26:24,980 --> 00:26:28,550
harder because you have to either train

00:26:26,960 --> 00:26:30,440
people up on that abstraction or you

00:26:28,550 --> 00:26:31,910
have to only hired a juicer abstraction

00:26:30,440 --> 00:26:35,080
which makes them more expensive people

00:26:31,910 --> 00:26:38,420
because they already are in the know

00:26:35,080 --> 00:26:40,490
that's the year 6 conundrum not all we

00:26:38,420 --> 00:26:42,260
can't use it save it in the wild because

00:26:40,490 --> 00:26:43,850
the browser support is not good

00:26:42,260 --> 00:26:45,680
across all browsers and you're getting

00:26:43,850 --> 00:26:47,360
better and it's getting I probably will

00:26:45,680 --> 00:26:49,430
take that out soon because it's really

00:26:47,360 --> 00:26:51,680
fast Lee approaching the way where we

00:26:49,430 --> 00:26:53,360
can use it across browsers we can use

00:26:51,680 --> 00:26:55,520
typescript or transpile it we can

00:26:53,360 --> 00:26:57,590
feature test for it but we can complex

00:26:55,520 --> 00:27:00,110
very quickly browsers that support will

00:26:57,590 --> 00:27:02,900
not get any six that way and that's the

00:27:00,110 --> 00:27:05,480
problem like we cannot test in our

00:27:02,900 --> 00:27:07,490
engines how well our as6 performs in a

00:27:05,480 --> 00:27:10,040
while that people don't give us es6 we

00:27:07,490 --> 00:27:11,720
can use it internally for our extensions

00:27:10,040 --> 00:27:13,550
and like developer tools they're all

00:27:11,720 --> 00:27:15,230
written es6 by now because it doesn't

00:27:13,550 --> 00:27:16,970
make sense to go to go in an older

00:27:15,230 --> 00:27:19,490
browser when you when you define the

00:27:16,970 --> 00:27:21,650
environment the performance is bad right

00:27:19,490 --> 00:27:23,660
now but that's a normal thing because

00:27:21,650 --> 00:27:25,820
you made the complex much much more

00:27:23,660 --> 00:27:27,440
complex than it was before so we did a

00:27:25,820 --> 00:27:30,050
lot of new things in the language so the

00:27:27,440 --> 00:27:31,940
performance is bad so for making it

00:27:30,050 --> 00:27:34,100
better we need you to use it in the

00:27:31,940 --> 00:27:35,840
browser as you want to support older

00:27:34,100 --> 00:27:37,520
browsers and browser or browsers don't

00:27:35,840 --> 00:27:39,560
support you cannot use it see what's

00:27:37,520 --> 00:27:41,780
going with that conundrum yeah so we

00:27:39,560 --> 00:27:44,420
really need people to run year six but

00:27:41,780 --> 00:27:47,720
we don't know how yet there's a great

00:27:44,420 --> 00:27:50,960
es6 performance test as well which is kb

00:27:47,720 --> 00:27:53,030
decker guitar bio 6-speed this is very

00:27:50,960 --> 00:27:54,650
interesting because the things we're es6

00:27:53,030 --> 00:27:57,950
is faster than anything else is the

00:27:54,650 --> 00:28:00,320
things that only es6 has everything else

00:27:57,950 --> 00:28:02,360
is slower at the moment which is kind of

00:28:00,320 --> 00:28:03,800
depressing but as i said it's not it's

00:28:02,360 --> 00:28:06,020
not surprising seeing that the

00:28:03,800 --> 00:28:09,320
technology is much more complex name was

00:28:06,020 --> 00:28:11,630
before so you can help us make this

00:28:09,320 --> 00:28:13,730
better and that's why i'm calling out to

00:28:11,630 --> 00:28:15,530
you personally but in general that

00:28:13,730 --> 00:28:18,680
people should get up to speed on this

00:28:15,530 --> 00:28:20,180
there's no shortage of es6 bubble right

00:28:18,680 --> 00:28:21,770
now a lot of people when when i talked

00:28:20,180 --> 00:28:23,000
earlier when i came to the ruling over

00:28:21,770 --> 00:28:24,680
gaudiya sticks it's going to show all

00:28:23,000 --> 00:28:26,780
the syntax and all the cool things how

00:28:24,680 --> 00:28:27,980
much salt of the code is right now every

00:28:26,780 --> 00:28:29,870
week there's a new thing where people

00:28:27,980 --> 00:28:33,020
show you how he is six will solve all of

00:28:29,870 --> 00:28:34,700
your problems it will but i'm getting

00:28:33,020 --> 00:28:35,870
tired of just hearing the technicality

00:28:34,700 --> 00:28:38,810
of it what i really want to see is what

00:28:35,870 --> 00:28:40,790
what benefit your applications have from

00:28:38,810 --> 00:28:43,180
it and how you can do it so if you have

00:28:40,790 --> 00:28:46,010
an environment and you can control

00:28:43,180 --> 00:28:47,510
please do it so be active if you use

00:28:46,010 --> 00:28:49,880
JavaScript environment you control

00:28:47,510 --> 00:28:51,399
please use es6 and feedback experience

00:28:49,880 --> 00:28:53,529
to the browser creators and the

00:28:51,399 --> 00:28:55,539
it's bodies because we need you to use

00:28:53,529 --> 00:28:57,299
it there's no there's no sense in the

00:28:55,539 --> 00:28:59,589
standard that people don't use and

00:28:57,299 --> 00:29:00,849
looking through a w3c web site there's

00:28:59,589 --> 00:29:03,669
lots of them that people that were used

00:29:00,849 --> 00:29:05,979
and that are quite actually I spent in

00:29:03,669 --> 00:29:07,809
two months writing xsl-fo to generate

00:29:05,979 --> 00:29:09,789
PDF one time in my life and then I

00:29:07,809 --> 00:29:13,119
created a latex script and didn't tell

00:29:09,789 --> 00:29:15,219
anybody instead help you six by looking

00:29:13,119 --> 00:29:17,259
at the unit tests there the unit tests

00:29:15,219 --> 00:29:20,229
are available on github about viagra

00:29:17,259 --> 00:29:22,359
script consortium and they are the ones

00:29:20,229 --> 00:29:24,759
that the browser's used to test against

00:29:22,359 --> 00:29:28,029
so if you find a bug in those unit tests

00:29:24,759 --> 00:29:29,409
or if you find a thing that is yes it

00:29:28,029 --> 00:29:31,509
tests it but the performance would be

00:29:29,409 --> 00:29:33,489
awful take a look at those unit tests

00:29:31,509 --> 00:29:35,499
and then you can help the eu6 adaptation

00:29:33,489 --> 00:29:36,669
the slides are on SlideShare as well so

00:29:35,499 --> 00:29:38,080
if you want to have two links and it's

00:29:36,669 --> 00:29:41,289
going to be a blog post as well no

00:29:38,080 --> 00:29:42,549
meaningful blurry pictures you can learn

00:29:41,289 --> 00:29:44,710
and fix issues with a great website

00:29:42,549 --> 00:29:48,729
called used six skaters on or whatever a

00:29:44,710 --> 00:29:50,739
kata is it's a daily test where you can

00:29:48,729 --> 00:29:52,659
see one feature of your six to play with

00:29:50,739 --> 00:29:54,369
and that's pretty awesome because it's

00:29:52,659 --> 00:29:56,169
just it makes a playful thing around and

00:29:54,369 --> 00:29:59,049
seeing the big pacification and nobody

00:29:56,169 --> 00:30:00,789
wants to read you can see the baby j

00:29:59,049 --> 00:30:02,830
stocks and try it out of the browser so

00:30:00,789 --> 00:30:04,690
if you if you go to Babel Jess you have

00:30:02,830 --> 00:30:07,210
the documentation directly in the page

00:30:04,690 --> 00:30:10,179
here and you got the online rebel thing

00:30:07,210 --> 00:30:12,849
where you can type your age your ear six

00:30:10,179 --> 00:30:14,769
and it turns it into es5 so you can see

00:30:12,849 --> 00:30:17,320
your code running immediately in the

00:30:14,769 --> 00:30:18,999
browser there's also mdn of course is

00:30:17,320 --> 00:30:21,460
always the best resource for everything

00:30:18,999 --> 00:30:22,749
they got a massive es6 repository in

00:30:21,460 --> 00:30:27,580
there as well they were the first ones

00:30:22,749 --> 00:30:30,429
to publish that one and Nico's Bevacqua

00:30:27,580 --> 00:30:33,249
a an Argentinian developer really really

00:30:30,429 --> 00:30:35,289
nice as well it is 350 bullet points he

00:30:33,249 --> 00:30:37,239
wrote like every day he wrote an EU 6

00:30:35,289 --> 00:30:39,099
posts in the last month or so and now

00:30:37,239 --> 00:30:40,629
you can put them all together into 350

00:30:39,099 --> 00:30:42,339
bullet points when you learn all the

00:30:40,629 --> 00:30:44,979
syntax you know what everything means

00:30:42,339 --> 00:30:47,070
you get a quick introduction of what you

00:30:44,979 --> 00:30:50,169
use what for and so on and so forth

00:30:47,070 --> 00:30:53,019
there's a great book by Alex rajma Axl

00:30:50,169 --> 00:30:54,969
Rose Maya exploring is six which is free

00:30:53,019 --> 00:30:56,379
to it online or it's like twenty dollars

00:30:54,969 --> 00:30:58,629
or thirty dollars to buy the digital

00:30:56,379 --> 00:31:01,089
copy I'm one of the reviewers at the

00:30:58,629 --> 00:31:01,950
moment so it's on lean pub so heavy data

00:31:01,089 --> 00:31:03,960
and you build

00:31:01,950 --> 00:31:05,519
download it again and it's a beautiful

00:31:03,960 --> 00:31:07,830
book because it's not one of those like

00:31:05,519 --> 00:31:10,409
oh and here's the future it just shows

00:31:07,830 --> 00:31:12,120
you how he is six came to be and shows

00:31:10,409 --> 00:31:14,580
the discussions around different things

00:31:12,120 --> 00:31:16,620
as well so a lot of times we couldn't

00:31:14,580 --> 00:31:18,960
for example implement parts of es6

00:31:16,620 --> 00:31:21,450
because it clashed with what people used

00:31:18,960 --> 00:31:24,269
on the web there was for example array

00:31:21,450 --> 00:31:25,559
contains was a functionality in es6 but

00:31:24,269 --> 00:31:27,480
we couldn't call it array contains

00:31:25,559 --> 00:31:29,700
because mootools in an eight year old

00:31:27,480 --> 00:31:31,559
version had an array contains in it and

00:31:29,700 --> 00:31:33,659
putting it in the browser would have

00:31:31,559 --> 00:31:35,880
broken all the websites based on new

00:31:33,659 --> 00:31:37,440
tools which we wouldn't think of many

00:31:35,880 --> 00:31:39,120
but actually they were all of them we

00:31:37,440 --> 00:31:40,710
sent the bank roller out to index the

00:31:39,120 --> 00:31:45,659
web big as a search engine you could

00:31:40,710 --> 00:31:47,039
google for that yeah that index like 14

00:31:45,659 --> 00:31:48,779
trillion pages or something like that

00:31:47,039 --> 00:31:50,399
and we found many many pages still

00:31:48,779 --> 00:31:52,260
relying on that boutons think so we went

00:31:50,399 --> 00:31:54,480
back to the ACMA script body and renamed

00:31:52,260 --> 00:31:56,730
it through array has or something like

00:31:54,480 --> 00:31:58,529
that instead of contains and it's quite

00:31:56,730 --> 00:32:01,500
funny that like how broken old

00:31:58,529 --> 00:32:02,940
functionality makes us not put a new

00:32:01,500 --> 00:32:05,159
standard in the browser because we would

00:32:02,940 --> 00:32:06,809
clash with one surprise out there so

00:32:05,159 --> 00:32:08,850
javascript in general in a bumpy ride

00:32:06,809 --> 00:32:10,019
and as many prejudices towards it like a

00:32:08,850 --> 00:32:11,549
lot of people like oh it's just a toy

00:32:10,019 --> 00:32:13,799
language I never want to understand it

00:32:11,549 --> 00:32:15,120
and I want to do it but I just I think

00:32:13,799 --> 00:32:16,679
it's just time to open your mind and

00:32:15,120 --> 00:32:18,720
learn how far it has come and what it

00:32:16,679 --> 00:32:20,429
can do for you because it's it's been

00:32:18,720 --> 00:32:22,710
good to me we go to other people and

00:32:20,429 --> 00:32:23,970
it's good to have when you see you right

00:32:22,710 --> 00:32:26,490
now because everybody's looking for it

00:32:23,970 --> 00:32:28,019
Andy is six means you have will use it

00:32:26,490 --> 00:32:29,580
professionally rather than just do we

00:32:28,019 --> 00:32:31,860
copy and paste job that we did in the

00:32:29,580 --> 00:32:33,809
last 15 years now we have a language

00:32:31,860 --> 00:32:35,279
that can be taken serious and is used

00:32:33,809 --> 00:32:37,559
for serious things so please write

00:32:35,279 --> 00:32:39,440
serious code rather than error written

00:32:37,559 --> 00:32:41,880
code that we did in the last 15 years

00:32:39,440 --> 00:32:43,620
that's all I have so here's a headshot

00:32:41,880 --> 00:32:45,870
getting his belly rubbed and I hope

00:32:43,620 --> 00:32:48,710
nothing else have a date that made it

00:32:45,870 --> 00:32:48,710

YouTube URL: https://www.youtube.com/watch?v=0G4MNHA_TlM


