Title: All Things Open 2015 | Seth Vargo - HashiCorp | Vagrant 101: Development Environments
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2014 All Things Open 2015, October 19th and 20th, Raleigh NC. All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:06,440 --> 00:00:12,360
thank you thank you if you're just

00:00:10,019 --> 00:00:15,960
walking in before we get started look to

00:00:12,360 --> 00:00:17,160
the person your left say hello just like

00:00:15,960 --> 00:00:19,770
that which is the person you're right at

00:00:17,160 --> 00:00:21,900
say hello cool and then if there's empty

00:00:19,770 --> 00:00:23,430
seats between you move together so that

00:00:21,900 --> 00:00:26,460
the people standing in the back and grab

00:00:23,430 --> 00:00:28,949
a seat that would be great see you made

00:00:26,460 --> 00:00:33,540
new friends this was actually to talk

00:00:28,949 --> 00:00:36,570
about making friends cool so welcome to

00:00:33,540 --> 00:00:38,309
vagrant 101 or like i like to say

00:00:36,570 --> 00:00:40,620
virtual development environments for

00:00:38,309 --> 00:00:42,030
developers just so i can get a sense of

00:00:40,620 --> 00:00:43,320
kind of where everybody fits on the

00:00:42,030 --> 00:00:45,710
spectrum how many people in here we

00:00:43,320 --> 00:00:47,399
consider themselves front-end engineers

00:00:45,710 --> 00:00:50,489
cool how many people would consider

00:00:47,399 --> 00:00:52,579
themselves back-end engineers how many

00:00:50,489 --> 00:00:55,980
people more in like the operation space

00:00:52,579 --> 00:00:58,289
devops operation space cool and how many

00:00:55,980 --> 00:00:59,520
people consider themselves nowhere on

00:00:58,289 --> 00:01:02,160
that spectrum and they don't really know

00:00:59,520 --> 00:01:04,250
why they're in this talk at all okay

00:01:02,160 --> 00:01:06,119
that's cool I'll answer your questions

00:01:04,250 --> 00:01:07,920
hopefully I can prove to you that

00:01:06,119 --> 00:01:09,720
vagrant is actually useful across that

00:01:07,920 --> 00:01:12,240
entire stack so whether you're doing

00:01:09,720 --> 00:01:14,130
front-end CSS with your ember angular

00:01:12,240 --> 00:01:15,930
apps or whether you're building complex

00:01:14,130 --> 00:01:19,830
infrastructure with you know chef puppet

00:01:15,930 --> 00:01:21,509
ansible I mean red hat or salt bigger'n

00:01:19,830 --> 00:01:24,810
is useful to you but some people got

00:01:21,509 --> 00:01:26,250
that joke so my name is Ted Margot I'm a

00:01:24,810 --> 00:01:27,930
software engineer at evangelistic Hoshi

00:01:26,250 --> 00:01:30,689
Corp how many people have ever heard of

00:01:27,930 --> 00:01:32,549
Hoshi court before cool so we're the

00:01:30,689 --> 00:01:34,110
company that's behind vagrant as well as

00:01:32,549 --> 00:01:37,470
a number of other open source projects

00:01:34,110 --> 00:01:40,049
that you might have heard of so we make

00:01:37,470 --> 00:01:44,610
console terraform Packer well surf

00:01:40,049 --> 00:01:46,110
vagrant nomads and most recently auto so

00:01:44,610 --> 00:01:47,700
it kind of very briefly just to give you

00:01:46,110 --> 00:01:49,200
an overview all of these projects on

00:01:47,700 --> 00:01:51,659
here open source with the exception of

00:01:49,200 --> 00:01:54,210
Atlas so console is a service discovery

00:01:51,659 --> 00:01:56,310
framework it's a runtime tool includes

00:01:54,210 --> 00:01:57,810
health checks basically what you get

00:01:56,310 --> 00:02:00,180
into large-scale infrastructure it helps

00:01:57,810 --> 00:02:02,310
you discover services as well as monitor

00:02:00,180 --> 00:02:03,080
their health terraform is a tool for

00:02:02,310 --> 00:02:04,910
provisioning

00:02:03,080 --> 00:02:06,380
structure works with any major cloud

00:02:04,910 --> 00:02:08,360
provider as well as some bare metal

00:02:06,380 --> 00:02:10,100
providers to just provision

00:02:08,360 --> 00:02:11,960
infrastructure as code so you describe

00:02:10,100 --> 00:02:14,570
your infrastructure in a text file you

00:02:11,960 --> 00:02:16,580
get infrastructure out faults as a tool

00:02:14,570 --> 00:02:18,470
for managing secrets surface a low level

00:02:16,580 --> 00:02:21,740
protocol that implements raft and gossip

00:02:18,470 --> 00:02:24,050
so does a console built on top of surf

00:02:21,740 --> 00:02:26,570
and so as nomads does service discovery

00:02:24,050 --> 00:02:28,310
at a very high level vigor which we'll

00:02:26,570 --> 00:02:30,800
talk about today Packer which is a tool

00:02:28,310 --> 00:02:32,930
for building automating machine images

00:02:30,800 --> 00:02:34,700
so things like Amazon am eyes google

00:02:32,930 --> 00:02:37,250
compute images digitalocean droplets as

00:02:34,700 --> 00:02:39,440
well as bigger boxes and it's a tool

00:02:37,250 --> 00:02:41,480
that automates the entire process then

00:02:39,440 --> 00:02:42,950
we have our two as newest products no

00:02:41,480 --> 00:02:44,660
Matt and Otto no matt is a container

00:02:42,950 --> 00:02:46,970
scheduler I'm similar to something like

00:02:44,660 --> 00:02:49,010
Bosh or Cooper netezza for Mario those

00:02:46,970 --> 00:02:51,050
and then Otto is actually closed the

00:02:49,010 --> 00:02:52,430
successor to vagrant when we announced

00:02:51,050 --> 00:02:53,780
it and I'll talk a little bit about Otto

00:02:52,430 --> 00:02:56,780
and how it plays into the bigger

00:02:53,780 --> 00:02:58,250
ecosystem in this talk today and then we

00:02:56,780 --> 00:02:59,720
have our commercial product Atlas which

00:02:58,250 --> 00:03:01,580
is kind of the unification of all of

00:02:59,720 --> 00:03:03,140
these tools so it takes you from

00:03:01,580 --> 00:03:05,630
development into production through the

00:03:03,140 --> 00:03:07,959
runtime phases as well as monitor and it

00:03:05,630 --> 00:03:10,730
unifies all of these open source tools

00:03:07,959 --> 00:03:12,140
so I want to talk about vagrant this is

00:03:10,730 --> 00:03:13,640
obviously a talk about vagrant you all

00:03:12,140 --> 00:03:15,560
came to talk about vagrant but I wanted

00:03:13,640 --> 00:03:17,600
to give you kind of a bigger picture of

00:03:15,560 --> 00:03:19,550
where hatchet court falls among the

00:03:17,600 --> 00:03:23,030
spectrum of runtime and development

00:03:19,550 --> 00:03:24,530
tools so let's talk about history I

00:03:23,030 --> 00:03:26,239
think it's really helpful to understand

00:03:24,530 --> 00:03:27,890
where we are how we got here I think

00:03:26,239 --> 00:03:29,650
that helps an understanding why figure

00:03:27,890 --> 00:03:33,290
was developed and where it's going and

00:03:29,650 --> 00:03:35,000
how it might be useful to you so biggrin

00:03:33,290 --> 00:03:37,459
started about six years ago so the first

00:03:35,000 --> 00:03:38,840
commit was six years ago by Mitchell so

00:03:37,459 --> 00:03:41,000
Mitchell is the primary author of

00:03:38,840 --> 00:03:43,190
vagrant variant is one of the most

00:03:41,000 --> 00:03:45,290
popular open source projects it's

00:03:43,190 --> 00:03:46,670
written in Ruby but a common

00:03:45,290 --> 00:03:48,470
misconception is that you can only use

00:03:46,670 --> 00:03:50,209
it to develop Ruby environments that's

00:03:48,470 --> 00:03:54,170
not true you can use it to develop any

00:03:50,209 --> 00:03:57,650
application or low-level system there

00:03:54,170 --> 00:04:01,310
are over 7,000 almost 8,000 get commits

00:03:57,650 --> 00:04:04,459
to bigger so it's very very much a

00:04:01,310 --> 00:04:06,980
a very popular open source project and

00:04:04,459 --> 00:04:09,080
if you look at the actual committers to

00:04:06,980 --> 00:04:10,610
vagrant you can see that Mitchell and

00:04:09,080 --> 00:04:14,540
myself are kind of at the top there and

00:04:10,610 --> 00:04:17,299
then vagrant actually has 665 unique

00:04:14,540 --> 00:04:19,070
committers so it's a very popular open

00:04:17,299 --> 00:04:22,430
source project it's one of the oldest

00:04:19,070 --> 00:04:24,860
projects on github and we have everybody

00:04:22,430 --> 00:04:26,389
from designers who don't really know the

00:04:24,860 --> 00:04:27,860
level systems code who write a quick

00:04:26,389 --> 00:04:29,510
change all the way down to people who

00:04:27,860 --> 00:04:31,490
are implementing things like the chef

00:04:29,510 --> 00:04:33,710
provider or the ansible provider who are

00:04:31,490 --> 00:04:36,110
really digging deep into vagrants

00:04:33,710 --> 00:04:38,090
architecture so it's really cool to see

00:04:36,110 --> 00:04:40,460
an open source project with you know

00:04:38,090 --> 00:04:46,250
over 650 unique contributors and you

00:04:40,460 --> 00:04:48,169
know 8,000 commits I just updated these

00:04:46,250 --> 00:04:50,840
yesterday but I think the numbers have

00:04:48,169 --> 00:04:53,810
gone up again so vagrant has over 10,000

00:04:50,840 --> 00:04:54,919
stars and over 2,000 Forks on github for

00:04:53,810 --> 00:04:57,110
those of you that are familiar that's

00:04:54,919 --> 00:05:01,400
kind of a rough measure of popularity of

00:04:57,110 --> 00:05:04,700
a project so this is continuously one of

00:05:01,400 --> 00:05:07,640
the top projects on github furthermore

00:05:04,700 --> 00:05:09,200
some people like to invest invest trust

00:05:07,640 --> 00:05:12,020
in something based off of who else uses

00:05:09,200 --> 00:05:14,840
it vagrant is used by a number of large

00:05:12,020 --> 00:05:16,430
companies financial firms some companies

00:05:14,840 --> 00:05:18,500
that are sponsors here today or may have

00:05:16,430 --> 00:05:21,010
attendees here today people like

00:05:18,500 --> 00:05:24,470
livingsocial O'Reilly Nokia Mozilla

00:05:21,010 --> 00:05:25,910
discuss etc so these companies are using

00:05:24,470 --> 00:05:27,200
vagrant not only for like their

00:05:25,910 --> 00:05:28,729
development environments but they might

00:05:27,200 --> 00:05:29,900
be using it for infrastructure testing

00:05:28,729 --> 00:05:32,330
they would be using it to test their

00:05:29,900 --> 00:05:35,780
chef cookbooks et cetera in fact at this

00:05:32,330 --> 00:05:39,139
exact same time my former boss is giving

00:05:35,780 --> 00:05:42,470
a talk in a room over there about using

00:05:39,139 --> 00:05:44,990
Test Kitchen to do test-driven

00:05:42,470 --> 00:05:46,880
development with your chef code and test

00:05:44,990 --> 00:05:49,100
kitchen actually uses vagrant under the

00:05:46,880 --> 00:05:50,539
hood to do all of that test it so it's

00:05:49,100 --> 00:05:51,780
kind of ironic that there's actually two

00:05:50,539 --> 00:05:53,850
bigger talks going on at the

00:05:51,780 --> 00:05:55,410
same time one is just masked because

00:05:53,850 --> 00:05:57,750
it's scheff specific and this is really

00:05:55,410 --> 00:05:59,460
just a broader vagrant are so vagrant

00:05:57,750 --> 00:06:01,200
has a variety of uses and it's used in a

00:05:59,460 --> 00:06:03,950
bunch of different markets whether it's

00:06:01,200 --> 00:06:06,750
front of development or operations etc

00:06:03,950 --> 00:06:09,120
so let's talk about the benefits of

00:06:06,750 --> 00:06:10,800
vigor why like I told you the history I

00:06:09,120 --> 00:06:14,940
told you what this thing is like why

00:06:10,800 --> 00:06:16,590
might it be useful to you so when you

00:06:14,940 --> 00:06:18,750
talk about the requirements for getting

00:06:16,590 --> 00:06:21,480
our project setup let's talk about front

00:06:18,750 --> 00:06:23,790
end for example if I primarily focus on

00:06:21,480 --> 00:06:27,060
things like CSS and JavaScript and

00:06:23,790 --> 00:06:28,230
design I'm probably not as experienced

00:06:27,060 --> 00:06:29,850
with things like setting up a ruby

00:06:28,230 --> 00:06:32,310
development or setting up a PHP

00:06:29,850 --> 00:06:34,020
development setting up a web server I'm

00:06:32,310 --> 00:06:36,270
probably not familiar with like low

00:06:34,020 --> 00:06:37,770
level systems like compiling something

00:06:36,270 --> 00:06:41,460
from source that my application might

00:06:37,770 --> 00:06:43,110
need and if I'm a front-end developer

00:06:41,460 --> 00:06:45,150
who's writing more you know like rails

00:06:43,110 --> 00:06:47,100
code PHP code but I'm not on the back

00:06:45,150 --> 00:06:48,120
end side of things I don't really know

00:06:47,100 --> 00:06:50,389
how to integrate with things like

00:06:48,120 --> 00:06:52,650
microservices or if I do I'm not

00:06:50,389 --> 00:06:54,120
ingrained in the way that those micro

00:06:52,650 --> 00:06:55,620
services operate that's not really my

00:06:54,120 --> 00:06:58,140
forte I don't know how to set everything

00:06:55,620 --> 00:06:59,640
up and if I'm gonna back inside of

00:06:58,140 --> 00:07:01,500
things I don't really want to be

00:06:59,640 --> 00:07:03,630
concerned with bringing up all of these

00:07:01,500 --> 00:07:05,610
CSS assets and having my JavaScript

00:07:03,630 --> 00:07:07,680
pre-compiled at runtime because it's not

00:07:05,610 --> 00:07:09,150
concerned to my job what I really want

00:07:07,680 --> 00:07:11,250
is I want to optimize the database for

00:07:09,150 --> 00:07:12,450
faster queries but in order to do that I

00:07:11,250 --> 00:07:14,210
need to brittle bring the entire

00:07:12,450 --> 00:07:16,919
application and all of its dependencies

00:07:14,210 --> 00:07:19,020
and if I'm on the operation side of

00:07:16,919 --> 00:07:21,510
things I'm actually building the servers

00:07:19,020 --> 00:07:23,520
that run these applications I don't care

00:07:21,510 --> 00:07:24,960
at all about the application I just need

00:07:23,520 --> 00:07:26,640
to be able to get it to run so that I

00:07:24,960 --> 00:07:29,250
can better tune and perform and

00:07:26,640 --> 00:07:30,900
configure the systems at scale the

00:07:29,250 --> 00:07:34,590
problem is that each of those domains

00:07:30,900 --> 00:07:36,360
front-end back-end and operations all

00:07:34,590 --> 00:07:37,710
very very different and domain-specific

00:07:36,360 --> 00:07:39,270
knowledge they have different

00:07:37,710 --> 00:07:41,100
requirements but their end result is

00:07:39,270 --> 00:07:44,789
always the same they just want to do

00:07:41,100 --> 00:07:46,650
their job the problem is that the

00:07:44,789 --> 00:07:48,870
problem that vagrant solves is that it

00:07:46,650 --> 00:07:50,760
actually reduces those requirements and

00:07:48,870 --> 00:07:52,410
lets the operators right the operator

00:07:50,760 --> 00:07:54,060
specific code that's back and engineers

00:07:52,410 --> 00:07:55,009
right the backend specific code and the

00:07:54,060 --> 00:07:56,990
front-end engineers right

00:07:55,009 --> 00:07:58,789
frontend specific code and it all comes

00:07:56,990 --> 00:08:01,400
together in one file which is the bigger

00:07:58,789 --> 00:08:03,020
file which greatly reduces the amount of

00:08:01,400 --> 00:08:05,930
time it takes to bootstrap a new

00:08:03,020 --> 00:08:08,539
application so the requirements were

00:08:05,930 --> 00:08:10,520
bigger actually relatively small you

00:08:08,539 --> 00:08:13,520
need a computer need access to the

00:08:10,520 --> 00:08:15,740
Internet briefly and then an optional

00:08:13,520 --> 00:08:17,779
drinking beverage it's just that simple

00:08:15,740 --> 00:08:19,580
in fact the internet connection is

00:08:17,779 --> 00:08:21,770
optional after the initial setup as well

00:08:19,580 --> 00:08:26,509
you can use vagrant entirely offline

00:08:21,770 --> 00:08:29,599
without an internet connection at all so

00:08:26,509 --> 00:08:32,110
the idea here is that vagrant creates an

00:08:29,599 --> 00:08:34,190
incredibly low barrier to entry

00:08:32,110 --> 00:08:36,260
operators define the way the system

00:08:34,190 --> 00:08:37,880
looks back in engineers to find the

00:08:36,260 --> 00:08:39,500
micro services that make up the database

00:08:37,880 --> 00:08:41,329
and you know the various other

00:08:39,500 --> 00:08:43,399
components the application used to

00:08:41,329 --> 00:08:45,290
configure and a front-end developer just

00:08:43,399 --> 00:08:47,360
runs vagrant up and they get that entire

00:08:45,290 --> 00:08:48,769
infrastructure without having to run 50

00:08:47,360 --> 00:08:50,480
million commands that are copy and

00:08:48,769 --> 00:08:53,510
pasted from some company wiki that was

00:08:50,480 --> 00:08:57,889
probably outdated how many people have a

00:08:53,510 --> 00:09:01,790
wiki that's outdated yeah that is

00:08:57,889 --> 00:09:04,250
probably outdated exactly so vagrant is

00:09:01,790 --> 00:09:06,829
actually codifying that knowledge and

00:09:04,250 --> 00:09:08,839
executable code so the vaguer file which

00:09:06,829 --> 00:09:10,399
we'll see later encapsulate all of that

00:09:08,839 --> 00:09:11,720
knowledge and you can check that file

00:09:10,399 --> 00:09:13,610
into source control the same way you

00:09:11,720 --> 00:09:15,350
would check in application code you can

00:09:13,610 --> 00:09:17,420
leverage things like get a poor request

00:09:15,350 --> 00:09:19,310
which allow you to review changes to the

00:09:17,420 --> 00:09:21,199
vagrant file whether you're at any level

00:09:19,310 --> 00:09:24,260
on the stack and provide insightful

00:09:21,199 --> 00:09:27,139
feedback so in a way its infrastructure

00:09:24,260 --> 00:09:28,730
as code on a much smaller scale it's

00:09:27,139 --> 00:09:33,350
effectively development environments as

00:09:28,730 --> 00:09:35,560
code so let's talk about parity when I

00:09:33,350 --> 00:09:38,029
talk about parity in production parity

00:09:35,560 --> 00:09:40,490
one of the biggest problems that we've

00:09:38,029 --> 00:09:42,260
seen with you know customers and

00:09:40,490 --> 00:09:43,819
organizations is that the way my

00:09:42,260 --> 00:09:46,220
development environment looks on my my

00:09:43,819 --> 00:09:49,100
mac or my pc isn't the same as

00:09:46,220 --> 00:09:51,519
production and this causes a lot of

00:09:49,100 --> 00:09:54,620
problems it increases the probability

00:09:51,519 --> 00:09:57,319
that a system level bug enters

00:09:54,620 --> 00:09:59,449
production because if I'm developing

00:09:57,319 --> 00:10:01,670
locally and i'm on a mac and i use a mac

00:09:59,449 --> 00:10:03,649
specific command or i reference a mac

00:10:01,670 --> 00:10:04,220
specific file path and we deploy that to

00:10:03,649 --> 00:10:06,530
production

00:10:04,220 --> 00:10:08,840
a production is running a bun to that

00:10:06,530 --> 00:10:10,550
file may not exist but all of our tests

00:10:08,840 --> 00:10:12,350
will pass and everything will look great

00:10:10,550 --> 00:10:14,030
locally and all of our other developers

00:10:12,350 --> 00:10:15,890
who are also on back we'll run it

00:10:14,030 --> 00:10:18,050
locally and it will work but as soon as

00:10:15,890 --> 00:10:20,960
it hit production it'll break the

00:10:18,050 --> 00:10:23,420
problem is that the cost of fixing that

00:10:20,960 --> 00:10:24,920
bug as it enters development to

00:10:23,420 --> 00:10:28,220
production through each stage in the

00:10:24,920 --> 00:10:29,660
process is exponentially more complex to

00:10:28,220 --> 00:10:31,730
fix a bug in production really takes

00:10:29,660 --> 00:10:34,160
like or in development takes five to ten

00:10:31,730 --> 00:10:35,960
seconds you just fix the code but fixing

00:10:34,160 --> 00:10:37,940
a bug in production requires a redeploy

00:10:35,960 --> 00:10:39,860
it takes away engineering time to

00:10:37,940 --> 00:10:41,630
diagnose the issue takes away operations

00:10:39,860 --> 00:10:44,390
time as they try to repair the issue and

00:10:41,630 --> 00:10:45,920
it causes downtime for the customers so

00:10:44,390 --> 00:10:47,390
the idea is that by creating a

00:10:45,920 --> 00:10:49,250
development environment that is as close

00:10:47,390 --> 00:10:51,680
to a production like environment as

00:10:49,250 --> 00:10:57,770
possible you can eliminate these types

00:10:51,680 --> 00:10:58,910
of outages or partial outages so in we

00:10:57,770 --> 00:11:00,920
have different operating systems

00:10:58,910 --> 00:11:02,540
different versions of packages different

00:11:00,920 --> 00:11:03,950
versions of operating systems different

00:11:02,540 --> 00:11:05,900
versions of the languages that we're

00:11:03,950 --> 00:11:09,380
running so in production you may have

00:11:05,900 --> 00:11:12,230
like a bun to 1404 running you know Ruby

00:11:09,380 --> 00:11:14,720
2.1 but on your local laptop you may

00:11:12,230 --> 00:11:18,350
have Ruby 2.2 installed and you're

00:11:14,720 --> 00:11:20,540
running on Mac OS X figure bridges that

00:11:18,350 --> 00:11:24,890
gap by allowing you to virtualize and

00:11:20,540 --> 00:11:27,140
run a linux ubuntu 1404 with Ruby 2.1

00:11:24,890 --> 00:11:29,300
directly on your Mac but it doesn't

00:11:27,140 --> 00:11:31,130
sacrifice the things that you're used to

00:11:29,300 --> 00:11:32,510
so you can still use your same text

00:11:31,130 --> 00:11:34,940
editor you can still use your same

00:11:32,510 --> 00:11:36,650
browser you can still use you know your

00:11:34,940 --> 00:11:38,720
designer tools whether it's you know

00:11:36,650 --> 00:11:40,130
photoshop or pixelmator the tools that

00:11:38,720 --> 00:11:42,680
you're used to using the same workflow

00:11:40,130 --> 00:11:45,440
that you're used to using you can do

00:11:42,680 --> 00:11:47,410
that and vagrant actually masks all of

00:11:45,440 --> 00:11:49,690
the I don't

00:11:47,410 --> 00:11:51,459
ugliness but all of the difficulties

00:11:49,690 --> 00:11:53,050
that come with doing that so that it

00:11:51,459 --> 00:11:55,209
feels like you're working on your local

00:11:53,050 --> 00:11:57,759
machine but you're actually increasing

00:11:55,209 --> 00:11:59,769
parity with production the whole time so

00:11:57,759 --> 00:12:02,769
how many people have ever say I don't

00:11:59,769 --> 00:12:05,829
know it works on my machine it's kind of

00:12:02,769 --> 00:12:07,569
like the token phrase and I would argue

00:12:05,829 --> 00:12:09,519
that one of the primary motivations of

00:12:07,569 --> 00:12:12,399
vagrant was to get people to stop saying

00:12:09,519 --> 00:12:14,560
that it's a huge problem in the industry

00:12:12,399 --> 00:12:16,300
and it whether it's like a front-end

00:12:14,560 --> 00:12:18,730
specific bug like you know the version

00:12:16,300 --> 00:12:20,889
of chrome that i'm using renders this CS

00:12:18,730 --> 00:12:22,810
element just differently so it works for

00:12:20,889 --> 00:12:24,610
me and it doesn't affect anybody else or

00:12:22,810 --> 00:12:26,259
whether it's down at the system level or

00:12:24,610 --> 00:12:28,060
like the difference in a package version

00:12:26,259 --> 00:12:31,209
is actually causing something to panic

00:12:28,060 --> 00:12:33,790
or crash vagrant is trying to remove

00:12:31,209 --> 00:12:36,040
that worked on my machine by giving you

00:12:33,790 --> 00:12:40,240
as close to a production machine as

00:12:36,040 --> 00:12:43,180
possible when we put these two things

00:12:40,240 --> 00:12:44,980
together what we have is an incredibly

00:12:43,180 --> 00:12:47,050
small failure gap there is definitely

00:12:44,980 --> 00:12:49,810
still a failure dad and you'll notice

00:12:47,050 --> 00:12:51,459
I've never said exact Perry I keep

00:12:49,810 --> 00:12:53,589
saying as close to parody as production

00:12:51,459 --> 00:12:55,810
as possible because this is the reason

00:12:53,589 --> 00:12:56,920
we have staging environments at the end

00:12:55,810 --> 00:12:58,720
of the day you're never going to be able

00:12:56,920 --> 00:13:00,069
to get an exact replica of production

00:12:58,720 --> 00:13:01,990
unless you're going to run your entire

00:13:00,069 --> 00:13:03,639
development environment and a cloud

00:13:01,990 --> 00:13:05,139
provider or bare metal and you're going

00:13:03,639 --> 00:13:07,300
to run the exact same everything that's

00:13:05,139 --> 00:13:08,740
in production the problem is your laptop

00:13:07,300 --> 00:13:10,480
might not even be able to handle that

00:13:08,740 --> 00:13:12,069
load if you have a large application you

00:13:10,480 --> 00:13:13,720
might not be able to run all the micro

00:13:12,069 --> 00:13:16,480
services require you might have to talk

00:13:13,720 --> 00:13:17,769
to some static staging server so

00:13:16,480 --> 00:13:19,870
bigger'n is trying to get you as close

00:13:17,769 --> 00:13:21,880
to production as possible but ultimately

00:13:19,870 --> 00:13:23,500
that's never going to be truly

00:13:21,880 --> 00:13:25,209
production parity there are things that

00:13:23,500 --> 00:13:27,310
we simply can't control like network

00:13:25,209 --> 00:13:28,899
ackles and firewalls and things at the

00:13:27,310 --> 00:13:30,939
data center hardware level that will be

00:13:28,899 --> 00:13:33,069
different but the idea is that by

00:13:30,939 --> 00:13:34,990
getting an incredibly small failure gap

00:13:33,069 --> 00:13:35,520
the probability for a bug enter in

00:13:34,990 --> 00:13:40,740
production

00:13:35,520 --> 00:13:42,690
is actually much much smaller the most

00:13:40,740 --> 00:13:46,470
important part of a vagrant and kind of

00:13:42,690 --> 00:13:48,120
the the driving motivation was that

00:13:46,470 --> 00:13:50,250
anybody could pick up vagrant and use it

00:13:48,120 --> 00:13:53,640
so you download vagrant from vagrant

00:13:50,250 --> 00:13:55,320
opcom it has a nice click interactive

00:13:53,640 --> 00:13:56,550
GUI and you can also head lessly install

00:13:55,320 --> 00:13:59,970
it if you want to automate that process

00:13:56,550 --> 00:14:02,100
and then you just run a finger up so any

00:13:59,970 --> 00:14:03,600
project regardless of what version who

00:14:02,100 --> 00:14:05,940
vagrant it was made with or what type of

00:14:03,600 --> 00:14:08,310
vagrant file it has since the existence

00:14:05,940 --> 00:14:09,780
of vagrant you can clone that project

00:14:08,310 --> 00:14:12,150
from github or download it and you run

00:14:09,780 --> 00:14:14,070
figger up the command is always the same

00:14:12,150 --> 00:14:15,540
it doesn't matter whether it's a PHP

00:14:14,070 --> 00:14:17,970
application or Ruby application and

00:14:15,540 --> 00:14:20,760
nodejs application it's always exactly

00:14:17,970 --> 00:14:22,860
the same and the idea here is that in

00:14:20,760 --> 00:14:25,140
your organization you can create and

00:14:22,860 --> 00:14:26,370
adopt those same practices so it doesn't

00:14:25,140 --> 00:14:28,440
matter whether you're on the front and

00:14:26,370 --> 00:14:30,660
team or the backend team the process for

00:14:28,440 --> 00:14:33,360
always getting an environment up and

00:14:30,660 --> 00:14:35,430
running as bigger huh and we see this is

00:14:33,360 --> 00:14:37,140
especially useful for new employees the

00:14:35,430 --> 00:14:39,330
onboarding process is usually very

00:14:37,140 --> 00:14:41,670
painful I remember the first two jobs

00:14:39,330 --> 00:14:43,020
that I joined I got a link to a github

00:14:41,670 --> 00:14:44,700
gist that had a whole bunch of things

00:14:43,020 --> 00:14:47,040
that I had to copy and paste into a

00:14:44,700 --> 00:14:49,320
terminal and then my machine was set up

00:14:47,040 --> 00:14:50,880
and I had to clone like 50 github repos

00:14:49,320 --> 00:14:53,520
and I had to install a whole bunch of

00:14:50,880 --> 00:14:55,350
packages on my mac and my early career I

00:14:53,520 --> 00:14:57,570
was a ruby developer so I had to install

00:14:55,350 --> 00:14:59,310
like 50 different versions of Ruby just

00:14:57,570 --> 00:15:00,750
because this application used this patch

00:14:59,310 --> 00:15:03,300
level in this application used another

00:15:00,750 --> 00:15:04,890
patch level then I had to install all of

00:15:03,300 --> 00:15:07,290
these extra packages just to get my

00:15:04,890 --> 00:15:08,970
local system setup and I remember my

00:15:07,290 --> 00:15:11,790
very first job out of college it took an

00:15:08,970 --> 00:15:14,370
entire week to get my laptop setup 5

00:15:11,790 --> 00:15:18,840
full business days where I was being

00:15:14,370 --> 00:15:20,310
paid to not work with vedran you capture

00:15:18,840 --> 00:15:22,920
all of this in the bigger file its

00:15:20,310 --> 00:15:24,270
codified in the bigger file so now when

00:15:22,920 --> 00:15:26,220
I walk into a company and all of our

00:15:24,270 --> 00:15:28,170
projects at hachey quarter like this you

00:15:26,220 --> 00:15:30,060
just a figure up and you have the

00:15:28,170 --> 00:15:31,590
development environment ready in however

00:15:30,060 --> 00:15:34,710
faster internet connection is to

00:15:31,590 --> 00:15:37,310
download the box 20 minutes still

00:15:34,710 --> 00:15:39,100
significantly less than something like

00:15:37,310 --> 00:15:41,590
five days

00:15:39,100 --> 00:15:43,180
so it drastically improves the

00:15:41,590 --> 00:15:44,650
onboarding experience and it makes an

00:15:43,180 --> 00:15:46,330
incredibly simple development

00:15:44,650 --> 00:15:48,640
environment it makes an incredibly

00:15:46,330 --> 00:15:50,050
simple getting started experience if you

00:15:48,640 --> 00:15:51,610
imagine you have something like an open

00:15:50,050 --> 00:15:53,590
source project and you want people to be

00:15:51,610 --> 00:15:55,260
able to contribute the Baker provides a

00:15:53,590 --> 00:15:57,850
great entry point for that contribution

00:15:55,260 --> 00:15:59,740
I've seen darker used for this recently

00:15:57,850 --> 00:16:02,350
as well people would a docker file and

00:15:59,740 --> 00:16:03,760
they're open source repository the

00:16:02,350 --> 00:16:05,710
problem with docker is that you have to

00:16:03,760 --> 00:16:09,040
be able to be able to run on a system

00:16:05,710 --> 00:16:10,300
that can run docker which isn't hard you

00:16:09,040 --> 00:16:12,760
can do something like boot to doctor as

00:16:10,300 --> 00:16:14,620
well but with vagrant you can run on any

00:16:12,760 --> 00:16:15,970
operating system it uses virtual box

00:16:14,620 --> 00:16:17,710
under the hood which runs on a variety

00:16:15,970 --> 00:16:19,420
of operating systems and it's also open

00:16:17,710 --> 00:16:21,280
source and if you want something a

00:16:19,420 --> 00:16:22,720
little more powerful you can use the

00:16:21,280 --> 00:16:24,430
VMware integration which is a paid

00:16:22,720 --> 00:16:26,890
plug-in that will give you kind of a

00:16:24,430 --> 00:16:31,060
little bit more power performance out of

00:16:26,890 --> 00:16:32,890
the tool vagrant has this concept of

00:16:31,060 --> 00:16:35,400
boxes i've said this i think it's kind

00:16:32,890 --> 00:16:39,100
of worth explaining a box is actually a

00:16:35,400 --> 00:16:41,290
prepackaged virtual virtual instance and

00:16:39,100 --> 00:16:43,690
so it includes everything that you make

00:16:41,290 --> 00:16:45,220
when you build the box so if you vagrant

00:16:43,690 --> 00:16:46,630
up and then you run some commands

00:16:45,220 --> 00:16:48,940
install some packages and then you

00:16:46,630 --> 00:16:51,040
vagrant package you can then ship that

00:16:48,940 --> 00:16:52,960
deployable box and you can iterate on it

00:16:51,040 --> 00:16:58,480
the same way you would as code it's kind

00:16:52,960 --> 00:17:01,090
of like an artifact in a way one of the

00:16:58,480 --> 00:17:02,680
things that was not great about vagrant

00:17:01,090 --> 00:17:05,580
in the early days and that we've

00:17:02,680 --> 00:17:07,510
dedicated weeks and weeks and weeks of

00:17:05,580 --> 00:17:10,360
effort and research into is

00:17:07,510 --> 00:17:13,300
documentation in recent versions there

00:17:10,360 --> 00:17:17,740
is not a single API or commanded vagrant

00:17:13,300 --> 00:17:19,750
that is not documented on vagrant com in

00:17:17,740 --> 00:17:21,460
addition to that we document a number of

00:17:19,750 --> 00:17:22,720
reasons of life why might you use vigor

00:17:21,460 --> 00:17:25,330
and when wouldn't you want to use

00:17:22,720 --> 00:17:26,800
vagrant as well as API level

00:17:25,330 --> 00:17:28,270
documentation the vagrant file

00:17:26,800 --> 00:17:30,730
documentation and the command

00:17:28,270 --> 00:17:32,590
documentation as well vagrant has a very

00:17:30,730 --> 00:17:34,540
rich CLI it has a plug-in architecture

00:17:32,590 --> 00:17:37,750
which I'll talk about in a moment which

00:17:34,540 --> 00:17:39,840
allows you to extend vagrant but the

00:17:37,750 --> 00:17:42,550
documentation is super super important

00:17:39,840 --> 00:17:43,370
we had a rough time with early vigor

00:17:42,550 --> 00:17:45,530
adoption be

00:17:43,370 --> 00:17:46,940
the lack of documentation so we spent a

00:17:45,530 --> 00:17:50,930
lot of time and effort in making this

00:17:46,940 --> 00:17:52,460
documentation a lot better so I just

00:17:50,930 --> 00:17:55,130
mentioned plugins so vagrant has a

00:17:52,460 --> 00:17:58,610
plug-in based architecture and the way

00:17:55,130 --> 00:18:00,140
vagrant works is at any phase in the Box

00:17:58,610 --> 00:18:02,120
process whether that's the download

00:18:00,140 --> 00:18:04,370
process to the provisioning process with

00:18:02,120 --> 00:18:06,710
something like chef puppet ansible or so

00:18:04,370 --> 00:18:09,170
all the way through to the runtime

00:18:06,710 --> 00:18:11,660
process you can hook into any phase of

00:18:09,170 --> 00:18:13,760
that plugin process so what that means

00:18:11,660 --> 00:18:16,250
is if your company uses an internal

00:18:13,760 --> 00:18:18,500
cloud provider that doesn't have an

00:18:16,250 --> 00:18:20,059
open-source plugin for example you could

00:18:18,500 --> 00:18:22,250
write a plug-in to integrate with that

00:18:20,059 --> 00:18:23,960
cloud provider you can write plugins to

00:18:22,250 --> 00:18:25,610
download secrets from your internal

00:18:23,960 --> 00:18:27,170
company stores that they can be injected

00:18:25,610 --> 00:18:28,820
at Build time so that your developers

00:18:27,170 --> 00:18:30,679
don't have to keep secrets on their

00:18:28,820 --> 00:18:34,580
laptops or copy and paste from something

00:18:30,679 --> 00:18:36,200
like LastPass you can build plugins that

00:18:34,580 --> 00:18:38,150
do things like reporting and

00:18:36,200 --> 00:18:40,280
notifications and all of these plugins

00:18:38,150 --> 00:18:42,080
are an addition to being well documented

00:18:40,280 --> 00:18:44,630
they're all written in Ruby and there's

00:18:42,080 --> 00:18:46,940
a huge community around them so you can

00:18:44,630 --> 00:18:49,520
go and look at the plugins and find what

00:18:46,940 --> 00:18:50,780
might work best for you in a way plugins

00:18:49,520 --> 00:18:52,940
kind of work like middleware if you're

00:18:50,780 --> 00:18:54,380
familiar with that concept you can push

00:18:52,940 --> 00:18:56,240
anywhere in the vagrant stack this

00:18:54,380 --> 00:19:02,240
middle wire and change vagrants behavior

00:18:56,240 --> 00:19:03,500
to suit your needs vigor is I kind of

00:19:02,240 --> 00:19:06,020
hinted that this already completely

00:19:03,500 --> 00:19:07,400
platform agnostic and it doesn't matter

00:19:06,020 --> 00:19:10,640
whether you're running on you know

00:19:07,400 --> 00:19:13,280
something like OS X Windows or Mac or

00:19:10,640 --> 00:19:15,380
sorry OS X Windows Linux Ubuntu read

00:19:13,280 --> 00:19:18,740
half it even supports arm if you're into

00:19:15,380 --> 00:19:21,470
that its platform agnostic in two ways

00:19:18,740 --> 00:19:23,900
figured itself the software will run on

00:19:21,470 --> 00:19:27,920
pretty much any modern operating system

00:19:23,900 --> 00:19:29,750
no it won't run on Raspberry Pi sorry I

00:19:27,920 --> 00:19:32,390
mean Phaedra will run on Raspberry Pi

00:19:29,750 --> 00:19:35,210
but VirtualBox the underlying tool will

00:19:32,390 --> 00:19:37,130
not but its platform agnostic in the

00:19:35,210 --> 00:19:39,740
sense that it can run any operating

00:19:37,130 --> 00:19:42,380
system as well so it doesn't matter

00:19:39,740 --> 00:19:44,420
whether you're on a Mac if you need a

00:19:42,380 --> 00:19:46,190
windows machine you can make that happen

00:19:44,420 --> 00:19:47,960
and you can make that happen

00:19:46,190 --> 00:19:50,540
programmatically without clicking

00:19:47,960 --> 00:19:51,860
buttons in a UI or without accepting

00:19:50,540 --> 00:19:53,900
license agreement

00:19:51,860 --> 00:19:55,429
and all of these things you can just get

00:19:53,900 --> 00:19:56,770
windows up and running and one of the

00:19:55,429 --> 00:20:00,049
things that i'm going to show you later

00:19:56,770 --> 00:20:03,970
in a demo that hopefully the demo gods

00:20:00,049 --> 00:20:06,049
let me give is testing internet explorer

00:20:03,970 --> 00:20:08,030
which is an incredibly painful

00:20:06,049 --> 00:20:09,980
experience for anybody who has ever done

00:20:08,030 --> 00:20:12,950
front-end development am i right who

00:20:09,980 --> 00:20:17,890
likes to test an Internet Explorer one

00:20:12,950 --> 00:20:21,110
person and he's lying I'm just kidding

00:20:17,890 --> 00:20:22,610
so I'm going to show you a great way

00:20:21,110 --> 00:20:24,620
that you could use vagrant and the

00:20:22,610 --> 00:20:28,030
public vagrant box is so that you could

00:20:24,620 --> 00:20:31,190
test in something like Internet Explorer

00:20:28,030 --> 00:20:32,780
so with that I'm actually just going to

00:20:31,190 --> 00:20:34,580
stop talking i'm going to start showing

00:20:32,780 --> 00:20:37,370
you things because I think demos are

00:20:34,580 --> 00:20:38,809
super powerful all of the code that i

00:20:37,370 --> 00:20:40,730
published in the demo will be at that

00:20:38,809 --> 00:20:43,640
URL and i'll tweet that out at the end

00:20:40,730 --> 00:20:44,929
so you can actually clone this repo and

00:20:43,640 --> 00:20:46,400
you can run it locally it'll include

00:20:44,929 --> 00:20:49,669
instructions for downloading and

00:20:46,400 --> 00:20:51,679
installing vagrant as well so that's the

00:20:49,669 --> 00:20:54,669
why and the how and the history now

00:20:51,679 --> 00:20:54,669
let's talk about the what

00:21:04,310 --> 00:21:06,940
cool

00:21:07,389 --> 00:21:11,889
so what I have here is a kind of a

00:21:09,700 --> 00:21:13,719
two-part demo the first part I've

00:21:11,889 --> 00:21:16,389
created this rails application called

00:21:13,719 --> 00:21:19,209
panda viewer it's incredibly important

00:21:16,389 --> 00:21:22,029
it is an application for viewing pandas

00:21:19,209 --> 00:21:24,459
on the internet because kittens are

00:21:22,029 --> 00:21:27,489
obviously currently just a fad and

00:21:24,459 --> 00:21:29,289
pandas are here to stay so cat pictures

00:21:27,489 --> 00:21:33,070
are going to go away and I'm starting

00:21:29,289 --> 00:21:36,219
the fat of pandas I want to take a look

00:21:33,070 --> 00:21:38,139
at this so you can see it's a standard

00:21:36,219 --> 00:21:40,719
rails application if you're not familiar

00:21:38,139 --> 00:21:43,349
with rails like there's this gem file

00:21:40,719 --> 00:21:45,789
thing which tells me a whole bunch of

00:21:43,349 --> 00:21:49,389
kind of like Ruby packages to install

00:21:45,789 --> 00:21:51,219
the problem is i need ruby and on OSX i

00:21:49,389 --> 00:21:52,479
have a system ruby but on something like

00:21:51,219 --> 00:21:54,940
Windows I don't really have a system

00:21:52,479 --> 00:21:56,469
Ruby but even so any good ruby developer

00:21:54,940 --> 00:21:58,959
will tell you to not use that system

00:21:56,469 --> 00:22:01,539
Ruby you have to use something like rvm

00:21:58,959 --> 00:22:04,239
or rbm for true be to install your

00:22:01,539 --> 00:22:07,779
Ruby's then you have a ruby manager it's

00:22:04,239 --> 00:22:09,429
it's unnecessarily complex in addition

00:22:07,779 --> 00:22:10,599
to that if I have multiple Ruby projects

00:22:09,429 --> 00:22:12,219
going I have to have multiple versions

00:22:10,599 --> 00:22:14,979
of Ruby because they're not all running

00:22:12,219 --> 00:22:17,259
the same burden in addition to that if I

00:22:14,979 --> 00:22:19,539
screw up at any point in this process I

00:22:17,259 --> 00:22:21,309
kind of hosed my local system so if i

00:22:19,539 --> 00:22:22,690
accidentally install the wrong ruby or

00:22:21,309 --> 00:22:25,119
if i accidentally deleted the wrong

00:22:22,690 --> 00:22:27,339
thing i could affect my other projects I

00:22:25,119 --> 00:22:28,329
couldn't leave them in a bad state so

00:22:27,339 --> 00:22:29,769
instead what we're going to do is we're

00:22:28,329 --> 00:22:31,149
going to use vagrant for this and this

00:22:29,769 --> 00:22:34,599
is the bigger file for this application

00:22:31,149 --> 00:22:36,690
and it works pretty simple so the very

00:22:34,599 --> 00:22:39,579
first thing here is I've defined the box

00:22:36,690 --> 00:22:42,700
like I said before the box file is just

00:22:39,579 --> 00:22:44,799
the representation of it's kind of like

00:22:42,700 --> 00:22:47,979
the base artifact you can think of it in

00:22:44,799 --> 00:22:49,809
a way as like an iso the next thing here

00:22:47,979 --> 00:22:51,849
is solely for the purposes of this demo

00:22:49,809 --> 00:22:53,440
which is I've disabled box checked

00:22:51,849 --> 00:22:54,789
updates because I wasn't sure on the

00:22:53,440 --> 00:22:57,450
Wi-Fi was going to hold up and I don't

00:22:54,789 --> 00:23:00,190
want to make unnecessary HTTP requests

00:22:57,450 --> 00:23:02,169
next we have to tell vagrant that we

00:23:00,190 --> 00:23:04,059
want to forward a port so by default

00:23:02,169 --> 00:23:05,889
vagrant is completely isolated it runs

00:23:04,059 --> 00:23:07,959
everything in an isolated environment

00:23:05,889 --> 00:23:09,879
what we really want is we want vagrant

00:23:07,959 --> 00:23:12,309
to forward our application port to our

00:23:09,879 --> 00:23:12,809
local machine this way we can run and

00:23:12,309 --> 00:23:16,499
use our

00:23:12,809 --> 00:23:18,509
browser we're going to we're giving this

00:23:16,499 --> 00:23:20,789
box a private network so this box is

00:23:18,509 --> 00:23:22,769
going to exist kind of within its own

00:23:20,789 --> 00:23:24,120
little subnet on my laptop and this will

00:23:22,769 --> 00:23:28,679
be important for the second part of this

00:23:24,120 --> 00:23:30,450
demo here i'm using vmware you could use

00:23:28,679 --> 00:23:31,799
virtualbox the problem is i was having

00:23:30,450 --> 00:23:33,600
trouble with virtualbox networking

00:23:31,799 --> 00:23:36,929
during this demo so i switched to vmware

00:23:33,600 --> 00:23:38,070
if I figure it out published why but I

00:23:36,929 --> 00:23:39,720
didn't have a chance to figure out why

00:23:38,070 --> 00:23:42,779
virtual boxes networking wasn't happy

00:23:39,720 --> 00:23:45,149
and then everything after this is just a

00:23:42,779 --> 00:23:46,980
whole bunch of really scary bosch and i

00:23:45,149 --> 00:23:48,240
did this for two reasons 1i could

00:23:46,980 --> 00:23:49,950
simplify this with something like

00:23:48,240 --> 00:23:55,049
shaffer puppet or ansible or salt but i

00:23:49,950 --> 00:23:57,119
didn't want to because it works and in

00:23:55,049 --> 00:23:59,340
my plane emphasizing this is sometimes

00:23:57,119 --> 00:24:01,409
you just want something that works i

00:23:59,340 --> 00:24:02,940
could very easily refactor this into

00:24:01,409 --> 00:24:04,679
something that's more human readable but

00:24:02,940 --> 00:24:06,570
the fact is that a year from now i could

00:24:04,679 --> 00:24:09,389
run this same bigger file and get the

00:24:06,570 --> 00:24:13,669
same result and that's important is to

00:24:09,389 --> 00:24:16,529
be able to repeat these environments so

00:24:13,669 --> 00:24:18,929
basically i'm installing postgres and

00:24:16,529 --> 00:24:21,240
node downloading ruby creating a

00:24:18,929 --> 00:24:24,509
postgres user and then i'm starting our

00:24:21,240 --> 00:24:26,070
rail server and then I also kind of have

00:24:24,509 --> 00:24:27,990
this little bootstrap in here that

00:24:26,070 --> 00:24:30,509
basically starts the application and

00:24:27,990 --> 00:24:34,080
gives it some seed data on the initial

00:24:30,509 --> 00:24:38,190
bootstrap so what I'm going to do is I'm

00:24:34,080 --> 00:24:39,990
going to up this machine and I kind of

00:24:38,190 --> 00:24:41,490
cheated I brought this up before hand

00:24:39,990 --> 00:24:42,869
again because I wasn't sure how the

00:24:41,490 --> 00:24:45,389
internet would hold out and we have to

00:24:42,869 --> 00:24:49,440
download packages so what this is

00:24:45,389 --> 00:24:52,169
actually going to do is turn the life I

00:24:49,440 --> 00:24:54,749
off what this is actually going to do is

00:24:52,169 --> 00:24:57,230
bring up a machine the kind of art

00:24:54,749 --> 00:24:57,230
exists

00:25:02,110 --> 00:25:06,280
so all of this exists on my local laptop

00:25:04,540 --> 00:25:07,600
even though it has a private you know a

00:25:06,280 --> 00:25:10,690
private IP address it's actually

00:25:07,600 --> 00:25:12,190
restricted to my local laptop so if I

00:25:10,690 --> 00:25:15,309
was connected to the Wi-Fi you wouldn't

00:25:12,190 --> 00:25:16,540
be able to access this machine although

00:25:15,309 --> 00:25:19,230
there are ways to make that possible

00:25:16,540 --> 00:25:21,309
I'll show that in part three of the demo

00:25:19,230 --> 00:25:24,640
so what this is actually doing is

00:25:21,309 --> 00:25:27,070
vagrant is making API level calls to vm

00:25:24,640 --> 00:25:29,260
ware or virtual box at this point saying

00:25:27,070 --> 00:25:31,540
hey give me a virtual machine configure

00:25:29,260 --> 00:25:33,400
it to look like this open up these ports

00:25:31,540 --> 00:25:34,990
so that the user can access it and then

00:25:33,400 --> 00:25:38,410
forward those ports to my host machine

00:25:34,990 --> 00:25:39,640
so that I can have access to them so you

00:25:38,410 --> 00:25:41,110
can see that it says this machine was

00:25:39,640 --> 00:25:42,520
already provisioned like I said I did

00:25:41,110 --> 00:25:47,380
that in advanced kind of for the

00:25:42,520 --> 00:25:49,450
purposes of this demo and now we have is

00:25:47,380 --> 00:25:55,600
we actually have hopefully a rails

00:25:49,450 --> 00:26:01,120
application running on port 3000 so this

00:25:55,600 --> 00:26:04,150
is panda viewer there's pictures of

00:26:01,120 --> 00:26:06,520
pandas they're cute that's a sad panda

00:26:04,150 --> 00:26:09,940
there's a Mitchell Canada jack panda and

00:26:06,520 --> 00:26:12,580
armaan panda so it's a it's obviously a

00:26:09,940 --> 00:26:13,960
super basic website this is a free theme

00:26:12,580 --> 00:26:17,710
that I download it from somewhere I'm

00:26:13,960 --> 00:26:19,030
not a designer but ok this was cool but

00:26:17,710 --> 00:26:21,490
I really want to see what it looks like

00:26:19,030 --> 00:26:23,620
Internet Explorer before I do that I

00:26:21,490 --> 00:26:26,679
want to explain that I didn't touch my

00:26:23,620 --> 00:26:28,480
local laptop at all so I could

00:26:26,679 --> 00:26:30,100
completely destroy this machine and

00:26:28,480 --> 00:26:32,230
reprovision it and my laptop is in the

00:26:30,100 --> 00:26:34,240
same exact state I haven't installed any

00:26:32,230 --> 00:26:36,760
packages I haven't configured anything I

00:26:34,240 --> 00:26:38,919
haven't changed anything at my my local

00:26:36,760 --> 00:26:40,690
laptop level and this is really really

00:26:38,919 --> 00:26:42,610
important because it means that if I

00:26:40,690 --> 00:26:44,830
screw up I can just destroy and start

00:26:42,610 --> 00:26:48,790
over so let's see what this looks like

00:26:44,830 --> 00:26:50,140
if I want to test internet explorer so

00:26:48,790 --> 00:26:53,559
let's go ahead and bring this windows

00:26:50,140 --> 00:26:59,980
instance up and while it's bringing up

00:26:53,559 --> 00:27:02,610
I'll show you what that windows bigger

00:26:59,980 --> 00:27:04,900
files like

00:27:02,610 --> 00:27:07,660
and as you can see this one

00:27:04,900 --> 00:27:09,640
significantly more minimal this is

00:27:07,660 --> 00:27:12,130
pretty much the most minimal vagra file

00:27:09,640 --> 00:27:14,830
you can get and this time instead of

00:27:12,130 --> 00:27:16,809
defining a box like precise 64 which is

00:27:14,830 --> 00:27:20,110
in a bun to base box I'm defining the

00:27:16,809 --> 00:27:21,370
boxes windows 8.1 and then I'm setting

00:27:20,110 --> 00:27:23,679
up you know I'm giving it a little bit

00:27:21,370 --> 00:27:25,299
more ram and cpu than you would

00:27:23,679 --> 00:27:26,590
typically give because windows doesn't

00:27:25,299 --> 00:27:28,390
like when you give it less than four

00:27:26,590 --> 00:27:29,380
gigs of ram and then the one thing

00:27:28,390 --> 00:27:31,750
that's different here is actually

00:27:29,380 --> 00:27:33,760
booting this in GUI mode so you'll

00:27:31,750 --> 00:27:36,610
notice whenever the price i-64 box came

00:27:33,760 --> 00:27:38,230
out I didn't see anything like i used

00:27:36,610 --> 00:27:40,660
the local terminal I didn't actually

00:27:38,230 --> 00:27:44,650
change anything I didn't see you know

00:27:40,660 --> 00:27:47,559
and a bun to instance pop-up um but

00:27:44,650 --> 00:27:48,850
you'll notice that here this is the

00:27:47,559 --> 00:27:50,919
machine that was actually just brought

00:27:48,850 --> 00:27:52,750
up and this was done all by vagrant all

00:27:50,919 --> 00:27:55,270
autonomously and it has a default user

00:27:52,750 --> 00:27:58,000
it has a default login and it kinda has

00:27:55,270 --> 00:27:59,260
the same default setup for you so this

00:27:58,000 --> 00:28:01,240
is a Windows instance that's running on

00:27:59,260 --> 00:28:06,010
my local machine and I have access to

00:28:01,240 --> 00:28:09,210
Internet Explorer guess if this is

00:28:06,010 --> 00:28:13,770
Windows 10 it would be Spartan and

00:28:09,210 --> 00:28:19,120
because i use the private networking i

00:28:13,770 --> 00:28:22,570
can actually access my other virtual

00:28:19,120 --> 00:28:24,520
machine from this one so i have two

00:28:22,570 --> 00:28:26,049
distinct virtual machines one that is

00:28:24,520 --> 00:28:29,230
running my application and one that is

00:28:26,049 --> 00:28:32,220
running windows and i can test the cross

00:28:29,230 --> 00:28:34,750
browser testing in internet explorer and

00:28:32,220 --> 00:28:40,929
you can see that it looks it looks

00:28:34,750 --> 00:28:45,160
pretty okay now what i want to show is

00:28:40,929 --> 00:28:48,520
that any change that i make to the

00:28:45,160 --> 00:28:50,440
application so any change that i make to

00:28:48,520 --> 00:28:52,030
the application is actually on my local

00:28:50,440 --> 00:28:53,830
machine i'm running sublime text on my

00:28:52,030 --> 00:28:55,690
local machine i can use my local

00:28:53,830 --> 00:28:57,850
terminal but it's going to actually

00:28:55,690 --> 00:29:01,320
reflect on both of those systems so

00:28:57,850 --> 00:29:01,320
let's go ahead and change something

00:29:01,470 --> 00:29:05,590
we're just going to create this is where

00:29:04,540 --> 00:29:07,799
I really show you that I'm not a

00:29:05,590 --> 00:29:07,799
designer

00:29:19,020 --> 00:29:24,450
so I've saved that file and now when I

00:29:21,780 --> 00:29:25,980
go to Chrome and refresh hopefully yeah

00:29:24,450 --> 00:29:29,000
you can see there's this big old hello

00:29:25,980 --> 00:29:34,080
up here so really really stylistic and

00:29:29,000 --> 00:29:36,060
when I go to you can see that it wasn't

00:29:34,080 --> 00:29:39,290
here before and now when i refresh the

00:29:36,060 --> 00:29:43,020
page you can see that it's also

00:29:39,290 --> 00:29:45,300
reflected as well in internet explorer

00:29:43,020 --> 00:29:46,920
so what this would allow you to do is

00:29:45,300 --> 00:29:49,320
you imagine you have your 10 monitor

00:29:46,920 --> 00:29:51,060
setup and your ideal development

00:29:49,320 --> 00:29:53,190
environment and you have you know

00:29:51,060 --> 00:29:55,590
windows 8 here when just seven here

00:29:53,190 --> 00:29:57,030
Windows 10 here maybe you're running OSX

00:29:55,590 --> 00:29:58,470
and maybe you're running Linux and you

00:29:57,030 --> 00:30:00,180
can test all these different versions of

00:29:58,470 --> 00:30:03,000
like chrome and firefox and internet

00:30:00,180 --> 00:30:04,680
explorer and Spartan but you're still in

00:30:03,000 --> 00:30:06,450
a central editor and then all you have

00:30:04,680 --> 00:30:08,190
to do is refresh and all of those

00:30:06,450 --> 00:30:11,850
changes are automatically synced across

00:30:08,190 --> 00:30:14,610
all those devices so the last thing i

00:30:11,850 --> 00:30:16,860
want to show you and this one may not

00:30:14,610 --> 00:30:20,400
work because it depends on the the Wi-Fi

00:30:16,860 --> 00:30:22,980
here we have this built in future not

00:30:20,400 --> 00:30:26,100
vagrant share what a vagrant sure allows

00:30:22,980 --> 00:30:28,200
you to do is take that extra step right

00:30:26,100 --> 00:30:29,760
so everything here is for me locally but

00:30:28,200 --> 00:30:31,380
let's say I'm the front-end developer

00:30:29,760 --> 00:30:33,630
and I really really want to show sales

00:30:31,380 --> 00:30:35,550
what I've been working on I could like

00:30:33,630 --> 00:30:37,740
call him up and I could say hey come

00:30:35,550 --> 00:30:39,930
stand over top of me while i type things

00:30:37,740 --> 00:30:42,780
under the computer or I could use vigor

00:30:39,930 --> 00:30:44,250
chair and send them a URL and if their

00:30:42,780 --> 00:30:46,350
remote if you're in a remote and

00:30:44,250 --> 00:30:49,230
distributed team for example they have

00:30:46,350 --> 00:30:51,180
the ability to just quickly download or

00:30:49,230 --> 00:30:52,650
quickly put that URL in the browser and

00:30:51,180 --> 00:30:55,770
it'll actually forward the request

00:30:52,650 --> 00:30:57,480
directly to your laptop and I'm not sure

00:30:55,770 --> 00:31:00,470
if this is going to work so we're going

00:30:57,480 --> 00:31:00,470
to find out this okay

00:31:25,929 --> 00:31:33,159
okay so if the Wi-Fi will hold out you

00:31:30,700 --> 00:31:37,210
should be able to go to hunger ground

00:31:33,159 --> 00:31:40,059
6147 big Rancher calm and hit my local

00:31:37,210 --> 00:31:43,200
laptop assuming there's no crazy weird

00:31:40,059 --> 00:31:43,200
firewall stuff going on

00:31:51,820 --> 00:31:55,800
anybody anybody successful

00:31:56,350 --> 00:32:02,890
hey Laura called your laptop out please

00:31:58,740 --> 00:32:05,799
look at that he's on panda viewer and

00:32:02,890 --> 00:32:07,330
all of this happened like from my local

00:32:05,799 --> 00:32:08,679
machine I never had to push anything to

00:32:07,330 --> 00:32:11,049
production I never had to set up a

00:32:08,679 --> 00:32:13,120
staging environment so if i have a quick

00:32:11,049 --> 00:32:15,070
CSS change as a front end dev or a quick

00:32:13,120 --> 00:32:16,840
javascript change and i want to show my

00:32:15,070 --> 00:32:19,630
manager i want to show my colleague was

00:32:16,840 --> 00:32:21,789
distributed somewhere in the UK all i

00:32:19,630 --> 00:32:23,710
have to do is vagrant chair dump a URL

00:32:21,789 --> 00:32:27,070
on our hip chatter / channel and they

00:32:23,710 --> 00:32:29,320
can instantly view it and then i can i

00:32:27,070 --> 00:32:31,510
can prevent you all from accessing it

00:32:29,320 --> 00:32:32,950
again so I killed the share anybody else

00:32:31,510 --> 00:32:42,039
is trying to access that chair is going

00:32:32,950 --> 00:32:44,289
to get you know a 404 what's that it's

00:32:42,039 --> 00:32:48,789
not it's just a tiny little panda viewer

00:32:44,289 --> 00:32:51,130
application cool so that's all I have

00:32:48,789 --> 00:32:52,390
for demos and I wanted to provide an

00:32:51,130 --> 00:32:54,130
opportunity for people to ask questions

00:32:52,390 --> 00:32:57,159
so I left a little bit of time for

00:32:54,130 --> 00:32:59,590
questions at the end but that's kind of

00:32:57,159 --> 00:33:00,940
vigor in a nutshell it's a really huge

00:32:59,590 --> 00:33:02,590
tool and we've only scratched the

00:33:00,940 --> 00:33:04,600
surface we haven't talked at all about

00:33:02,590 --> 00:33:06,789
things like provisioning or operations

00:33:04,600 --> 00:33:08,890
side of things obviously the front end

00:33:06,789 --> 00:33:10,510
track but I hope that you can see kind

00:33:08,890 --> 00:33:12,370
of the power and flexibility it where

00:33:10,510 --> 00:33:18,659
something like a vagrant would be super

00:33:12,370 --> 00:33:22,539
useful in your organization I saw the

00:33:18,659 --> 00:33:28,000
talk about auto quickly yeah sure yeah

00:33:22,539 --> 00:33:29,950
and how that fits and yeah sure so the

00:33:28,000 --> 00:33:31,600
question is can I talk about audio and

00:33:29,950 --> 00:33:32,770
how auto fits in this so for those of

00:33:31,600 --> 00:33:35,380
you that aren't familiar with auto I

00:33:32,770 --> 00:33:38,110
describe it in the beginning auto is the

00:33:35,380 --> 00:33:40,780
successor to a vagrant so what auto is

00:33:38,110 --> 00:33:42,100
is actually a toll that wraps vagrant

00:33:40,780 --> 00:33:44,770
and then provides an additional

00:33:42,100 --> 00:33:46,299
abstraction on top of it so with auto if

00:33:44,770 --> 00:33:49,630
we take a look at this vagrant file for

00:33:46,299 --> 00:33:51,280
example with auto all of this how to

00:33:49,630 --> 00:33:54,370
install Ruby how to configure postgres

00:33:51,280 --> 00:33:56,260
is actually codified in auto so you as

00:33:54,370 --> 00:33:59,350
an engineer don't worry about any of

00:33:56,260 --> 00:34:01,150
that you just tell Otto give me a

00:33:59,350 --> 00:34:02,830
development environment and auto is

00:34:01,150 --> 00:34:04,269
actually smart enough to detect

00:34:02,830 --> 00:34:05,980
the application you're running so it

00:34:04,269 --> 00:34:08,379
looks and if it sees things like a gem

00:34:05,980 --> 00:34:09,730
file or a rack up file it's like oh

00:34:08,379 --> 00:34:11,919
you're working in Ruby I'm going to give

00:34:09,730 --> 00:34:13,510
you a ruby environment and it makes a

00:34:11,919 --> 00:34:16,179
lot of assumptions and takes away a

00:34:13,510 --> 00:34:18,490
little bit of that customization so it's

00:34:16,179 --> 00:34:20,409
possible in auto to do things like

00:34:18,490 --> 00:34:22,629
private networking and set specific IP

00:34:20,409 --> 00:34:24,310
addresses it's possible to do things

00:34:22,629 --> 00:34:26,470
like configure the amount of RAM and the

00:34:24,310 --> 00:34:28,300
number of CPUs that you want but out of

00:34:26,470 --> 00:34:29,980
the box the idea with auto is that you

00:34:28,300 --> 00:34:31,869
let autumn make those decisions for you

00:34:29,980 --> 00:34:33,280
it looks at your application it looks to

00:34:31,869 --> 00:34:35,710
your applications complexity and it

00:34:33,280 --> 00:34:38,740
makes decisions based off of what it

00:34:35,710 --> 00:34:40,300
thinks it needs under the hood after

00:34:38,740 --> 00:34:42,429
auto makes those decisions what it

00:34:40,300 --> 00:34:43,990
actually does is it dynamically

00:34:42,429 --> 00:34:46,000
generates a vagrant file and runs

00:34:43,990 --> 00:34:48,040
vagrant up for you so what autos

00:34:46,000 --> 00:34:49,750
actually doing is it's driving vagrant

00:34:48,040 --> 00:34:50,919
under the hood but it's making

00:34:49,750 --> 00:34:52,929
intelligent decisions about your

00:34:50,919 --> 00:34:54,460
application for you so if you're an

00:34:52,929 --> 00:34:56,530
organization that doesn't have as many

00:34:54,460 --> 00:34:58,330
concerns about the amount of CPU you

00:34:56,530 --> 00:35:00,640
give your resources for example auto

00:34:58,330 --> 00:35:02,020
might be a better fit under the hood

00:35:00,640 --> 00:35:04,540
it's actually still going to drive

00:35:02,020 --> 00:35:06,339
vagrant because we've learned a lot

00:35:04,540 --> 00:35:09,240
about bigger and bigger has this really

00:35:06,339 --> 00:35:11,740
really really deep power and integration

00:35:09,240 --> 00:35:13,750
but autos like it's kind of like a layer

00:35:11,740 --> 00:35:16,270
above that it's an abstraction on top of

00:35:13,750 --> 00:35:18,310
all of it and then auto that's only the

00:35:16,270 --> 00:35:19,630
development piece of Otto Otto has two

00:35:18,310 --> 00:35:20,859
more components there's the

00:35:19,630 --> 00:35:23,500
infrastructure provisioning in the

00:35:20,859 --> 00:35:25,390
deployment piece so Otto will actually

00:35:23,500 --> 00:35:27,280
set up remote infrastructure for you too

00:35:25,390 --> 00:35:29,020
and that uses one of our other open

00:35:27,280 --> 00:35:31,330
source tools terraform under the hood so

00:35:29,020 --> 00:35:32,890
it'll set up your entire you know

00:35:31,330 --> 00:35:35,470
staging or production environment with

00:35:32,890 --> 00:35:37,390
auto in front and then auto deploy

00:35:35,470 --> 00:35:39,400
actually takes your local application

00:35:37,390 --> 00:35:41,349
and deploys it to production and it uses

00:35:39,400 --> 00:35:44,109
the kind of the best practices at the

00:35:41,349 --> 00:35:46,599
time in order to do that so Otto is kind

00:35:44,109 --> 00:35:49,270
of the what I just the way I describe it

00:35:46,599 --> 00:35:50,560
is Otto's easy mode it's the leg out of

00:35:49,270 --> 00:35:52,599
the box works out of the box but it

00:35:50,560 --> 00:35:55,510
makes a lot of assumptions whereas

00:35:52,599 --> 00:35:57,730
things like vigor and terraform I and

00:35:55,510 --> 00:35:59,680
Packer for example they're kind of like

00:35:57,730 --> 00:36:01,150
the more advanced mode right it's like

00:35:59,680 --> 00:36:02,440
when you go into the Chrome settings and

00:36:01,150 --> 00:36:04,119
you see like ok here's these five

00:36:02,440 --> 00:36:05,950
checkboxes for things I usually care

00:36:04,119 --> 00:36:07,660
about but whenever I want to control

00:36:05,950 --> 00:36:08,059
things like cookie cash exploration I

00:36:07,660 --> 00:36:10,219
have to

00:36:08,059 --> 00:36:11,839
advanced mode and that's the same thing

00:36:10,219 --> 00:36:13,699
with the way our tools work is Otto is

00:36:11,839 --> 00:36:15,469
kind of the easy rapper it makes a lot

00:36:13,699 --> 00:36:17,239
of really really good decisions for you

00:36:15,469 --> 00:36:19,309
so you don't have to think about it but

00:36:17,239 --> 00:36:20,930
as a power user sometimes you want to

00:36:19,309 --> 00:36:22,819
kind of dive under the hood and you want

00:36:20,930 --> 00:36:24,979
to tweak the knobs that Otto might not

00:36:22,819 --> 00:36:27,199
expose and that's where things like

00:36:24,979 --> 00:36:28,759
vagrant and packer and terraform are

00:36:27,199 --> 00:36:32,420
useful it's actually giving you all of

00:36:28,759 --> 00:36:34,819
the knobs 22 so I kind of answer your

00:36:32,420 --> 00:36:37,189
question so it's not you wouldn't use

00:36:34,819 --> 00:36:39,650
auto instead of vagrant auto actually

00:36:37,189 --> 00:36:41,930
uses vagrant under the hood we just mask

00:36:39,650 --> 00:36:43,609
all of that to create an even more

00:36:41,930 --> 00:36:48,939
powerful development experience than

00:36:43,609 --> 00:36:48,939
something like vagrant yeah orange

00:36:54,360 --> 00:36:58,420
yeah so the question is when Otto

00:36:56,860 --> 00:37:00,730
generates the vagrant file and excuse

00:36:58,420 --> 00:37:02,800
vagrant can you see and inspect and edit

00:37:00,730 --> 00:37:05,170
that vagrant file you can see it you can

00:37:02,800 --> 00:37:07,180
inspect it you could like copy it but

00:37:05,170 --> 00:37:08,650
you so I don't have this notion of

00:37:07,180 --> 00:37:10,030
customizations so there are like

00:37:08,650 --> 00:37:14,080
high-level customizations that you can

00:37:10,030 --> 00:37:16,600
have but you can't like give auto a

00:37:14,080 --> 00:37:18,010
vagrant file at this point but it's

00:37:16,600 --> 00:37:22,860
something that's been requested it is

00:37:18,010 --> 00:37:22,860
technically possible way in the back

00:37:34,230 --> 00:37:38,650
cool so the question is around licensing

00:37:36,970 --> 00:37:43,020
when it comes to proprietary operating

00:37:38,650 --> 00:37:46,030
systems like windows and even OS X so

00:37:43,020 --> 00:37:47,770
you as the user accept those license

00:37:46,030 --> 00:37:50,200
agreements whenever you run in

00:37:47,770 --> 00:37:53,830
virtualbox or VMware as well so it's the

00:37:50,200 --> 00:37:55,570
same license agreements as well the

00:37:53,830 --> 00:37:57,910
windows 8.1 box that i've downloaded

00:37:55,570 --> 00:37:59,950
actually is published by a company that

00:37:57,910 --> 00:38:02,680
has a partnership with Microsoft and it

00:37:59,950 --> 00:38:04,390
has a 30-day trial on it so it's it's

00:38:02,680 --> 00:38:07,480
like the trial version of windows so it

00:38:04,390 --> 00:38:10,390
falls it falls under that license for

00:38:07,480 --> 00:38:11,830
things like OS X there's the thing you

00:38:10,390 --> 00:38:14,020
have to watch a little bit more of OS X

00:38:11,830 --> 00:38:16,690
as the EULA for you OS X requires the

00:38:14,020 --> 00:38:18,190
run on Apple hardware so if you're on a

00:38:16,690 --> 00:38:19,300
Windows machine and you use vagrant to

00:38:18,190 --> 00:38:21,160
bring up a Mac you're technically

00:38:19,300 --> 00:38:22,510
violating apples and user license

00:38:21,160 --> 00:38:24,820
agreement but you're not actually

00:38:22,510 --> 00:38:27,580
violating the license of the operating

00:38:24,820 --> 00:38:32,890
system so those are things that we the

00:38:27,580 --> 00:38:35,440
user has to determine when when you know

00:38:32,890 --> 00:38:37,090
kind of doing this type of stuff it's

00:38:35,440 --> 00:38:42,270
true of like any virtualization software

00:38:37,090 --> 00:38:42,270
that you might use yeah

00:39:02,710 --> 00:39:06,820
sure so the question is around what if

00:39:05,140 --> 00:39:09,310
people do with persistent data like in a

00:39:06,820 --> 00:39:13,000
database I think it really varies with

00:39:09,310 --> 00:39:14,530
your size so at one of the companies I

00:39:13,000 --> 00:39:17,290
work for we actually had a read-only

00:39:14,530 --> 00:39:18,940
staging database that was an exact

00:39:17,290 --> 00:39:21,070
mirror of production but it was read

00:39:18,940 --> 00:39:22,839
only so it was super useful you could

00:39:21,070 --> 00:39:24,730
actually just point your development

00:39:22,839 --> 00:39:27,130
yeah mall or whatever your database

00:39:24,730 --> 00:39:29,710
configuration file at you know staging

00:39:27,130 --> 00:39:31,119
database company calm and you could

00:39:29,710 --> 00:39:33,400
interact with it that was really good

00:39:31,119 --> 00:39:36,099
for things like testing really complex

00:39:33,400 --> 00:39:37,930
data sets what we usually find for

00:39:36,099 --> 00:39:39,570
development environments is that the

00:39:37,930 --> 00:39:41,410
applications themselves should actually

00:39:39,570 --> 00:39:43,480
applications are responsible for two

00:39:41,410 --> 00:39:46,630
things they're responsible for exposing

00:39:43,480 --> 00:39:48,640
a health check endpoint that tells other

00:39:46,630 --> 00:39:49,930
applications whether they're healthy so

00:39:48,640 --> 00:39:52,000
if you're used to something like Cooper

00:39:49,930 --> 00:39:54,400
Nettie's or like mazes there's like this

00:39:52,000 --> 00:39:55,780
health CN point and the second thing is

00:39:54,400 --> 00:39:58,270
they're responsible for populating their

00:39:55,780 --> 00:40:00,820
own data so in the case of panda viewer

00:39:58,270 --> 00:40:03,220
for example there's actually like the

00:40:00,820 --> 00:40:04,930
seeds file which populates test data and

00:40:03,220 --> 00:40:07,330
when you want to work with production

00:40:04,930 --> 00:40:09,220
level data you either deploy the station

00:40:07,330 --> 00:40:11,200
or you get permission to download a

00:40:09,220 --> 00:40:12,790
subset of production data on your local

00:40:11,200 --> 00:40:15,339
machine and import that using like

00:40:12,790 --> 00:40:17,140
sequel or something but in general you

00:40:15,339 --> 00:40:18,760
don't want all the production data on

00:40:17,140 --> 00:40:20,349
your local laptop it's a pretty big

00:40:18,760 --> 00:40:22,570
security concern and for a large

00:40:20,349 --> 00:40:29,760
organization with terabytes of data it's

00:40:22,570 --> 00:40:29,760
not going to fit other questions yeah

00:40:33,990 --> 00:40:37,170
Cole so the question is is there any

00:40:35,730 --> 00:40:38,580
guidance on the website about using

00:40:37,170 --> 00:40:42,660
vagrant to do front end testing with

00:40:38,580 --> 00:40:46,290
selenium no there's nothing specific to

00:40:42,660 --> 00:40:47,700
like selenium or front end testing we

00:40:46,290 --> 00:40:51,600
try to stay away from like how to use

00:40:47,700 --> 00:40:53,250
vigor with a particular product but in

00:40:51,600 --> 00:40:55,260
general what you would do is you would

00:40:53,250 --> 00:40:56,730
use vagrant to spin up the instance and

00:40:55,260 --> 00:40:58,619
then depending on whether you want to

00:40:56,730 --> 00:41:00,300
run selenium in the bigger box or you

00:40:58,619 --> 00:41:02,070
want to run selenium against the bigger

00:41:00,300 --> 00:41:04,770
box you just set up the selenium driver

00:41:02,070 --> 00:41:07,110
2.2 out of IP address or localhost and

00:41:04,770 --> 00:41:15,260
it would run either inside the box or

00:41:07,110 --> 00:41:15,260
against the box other questions

00:41:19,520 --> 00:41:21,580
you

00:41:29,720 --> 00:41:33,020
say that again

00:41:47,720 --> 00:41:52,220
oh okay I see what you're saying yeah so

00:41:50,090 --> 00:41:54,230
the question is like how do the files in

00:41:52,220 --> 00:41:59,330
my local machine get on to the bigger

00:41:54,230 --> 00:42:00,800
box basically yeah so there's a number

00:41:59,330 --> 00:42:02,869
of different ways that happens the way

00:42:00,800 --> 00:42:04,520
that it's actually specific to the

00:42:02,869 --> 00:42:08,420
provider whether using VirtualBox or

00:42:04,520 --> 00:42:11,359
VMware you can only like I think from

00:42:08,420 --> 00:42:14,420
VirtualBox the default is like a mount

00:42:11,359 --> 00:42:16,070
and it mounts a shared folder you can do

00:42:14,420 --> 00:42:21,380
things like NFS there's our sink shared

00:42:16,070 --> 00:42:22,970
folders there's something that's window

00:42:21,380 --> 00:42:24,440
specific that I can't remember but

00:42:22,970 --> 00:42:27,109
that's all configurable the provider

00:42:24,440 --> 00:42:29,810
level so when by default vagrant mounts

00:42:27,109 --> 00:42:33,020
whatever directory the bigger file is it

00:42:29,810 --> 00:42:35,750
mounts that at / vagrant so if I

00:42:33,020 --> 00:42:38,330
actually go into this machine which you

00:42:35,750 --> 00:42:40,160
can run bigger and ssh and it'll or if

00:42:38,330 --> 00:42:43,400
it's a windows box when a venir one RM

00:42:40,160 --> 00:42:46,599
and it will connect to this machine I

00:42:43,400 --> 00:42:46,599
have to turn off Wi-Fi

00:42:51,900 --> 00:42:55,810
it'll mount whatever whatever the

00:42:54,250 --> 00:42:58,480
directory of the vagrant file is in

00:42:55,810 --> 00:43:04,630
it'll melt that directory as / vagrant

00:42:58,480 --> 00:43:09,820
on the instance itself it's actually

00:43:04,630 --> 00:43:11,830
just default so you can set additional

00:43:09,820 --> 00:43:13,240
shares and you can tell it to not mount

00:43:11,830 --> 00:43:15,250
that share but kind of out-of-the-box

00:43:13,240 --> 00:43:17,710
experience is you want this thing to

00:43:15,250 --> 00:43:19,630
exist as / trigger it's um there's these

00:43:17,710 --> 00:43:21,370
establish best practices another one is

00:43:19,630 --> 00:43:23,530
that the username and password is always

00:43:21,370 --> 00:43:26,290
a big ring so sometimes we sacrifice

00:43:23,530 --> 00:43:29,080
security for ease of development but you

00:43:26,290 --> 00:43:35,260
can see here like on the box that's my

00:43:29,080 --> 00:43:38,260
last name gee so this is my the same as

00:43:35,260 --> 00:43:39,460
my local machine and any changes I make

00:43:38,260 --> 00:43:41,680
in that directory on my local machine

00:43:39,460 --> 00:43:44,290
it's a shared folder so it's the same as

00:43:41,680 --> 00:43:47,050
it's on the head studs and anything I do

00:43:44,290 --> 00:43:53,770
in here is reflected back so if I create

00:43:47,050 --> 00:43:57,070
a file bar and then I go back into not

00:43:53,770 --> 00:44:03,150
my text messages and I go back into my

00:43:57,070 --> 00:44:03,150
editor maybe

00:44:14,560 --> 00:44:21,390
now you can see that like bar was

00:44:16,690 --> 00:44:21,390
created so it's just done nothing

00:44:28,480 --> 00:44:33,250
yeah I mean we've seen bigger used in a

00:44:30,670 --> 00:44:38,530
number of different environments Ruby

00:44:33,250 --> 00:44:40,150
PHP Java C C++ it all depends on your

00:44:38,530 --> 00:44:43,390
requirements like the setup might be

00:44:40,150 --> 00:44:45,730
different some people mount like an NFS

00:44:43,390 --> 00:44:48,070
share or like a remote file server as

00:44:45,730 --> 00:44:50,320
part of the development process so that

00:44:48,070 --> 00:44:54,760
they can download files as if it was on

00:44:50,320 --> 00:44:56,290
the same remote machine it's incredibly

00:44:54,760 --> 00:45:04,150
extensible we've kind of only touched

00:44:56,290 --> 00:45:05,140
the surface and just talk here today all

00:45:04,150 --> 00:45:07,030
right well it doesn't look like we have

00:45:05,140 --> 00:45:09,210
time for any other questions please feel

00:45:07,030 --> 00:45:09,210

YouTube URL: https://www.youtube.com/watch?v=M19V1TzR0cc


