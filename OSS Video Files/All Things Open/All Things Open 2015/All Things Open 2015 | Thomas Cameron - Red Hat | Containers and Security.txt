Title: All Things Open 2015 | Thomas Cameron - Red Hat | Containers and Security
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2014 All Things Open 2015, October 19th and 20th, Raleigh NC. All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:03,259 --> 00:00:10,440
as my way of introduction Who am I and

00:00:07,529 --> 00:00:11,580
why should you care well as as mentioned

00:00:10,440 --> 00:00:14,070
earlier men and I tea since about

00:00:11,580 --> 00:00:16,289
nineteen ninety-three I'm a quasi

00:00:14,070 --> 00:00:18,449
graybeard I haven't gotten there yet but

00:00:16,289 --> 00:00:20,789
but i've been here since about 93 i

00:00:18,449 --> 00:00:23,670
actually started out life as a police

00:00:20,789 --> 00:00:25,350
officer so i have it actually a fairly

00:00:23,670 --> 00:00:27,029
strong background in security and

00:00:25,350 --> 00:00:27,990
forensics and things like that so

00:00:27,029 --> 00:00:29,670
security is something that's actually

00:00:27,990 --> 00:00:31,529
been an interesting thing to me for a

00:00:29,670 --> 00:00:33,420
long time my educational backgrounds

00:00:31,529 --> 00:00:36,120
actually in law enforcement I've been

00:00:33,420 --> 00:00:37,710
with red hat since 2005 and I am a red

00:00:36,120 --> 00:00:39,270
hat certified architect and a red hat

00:00:37,710 --> 00:00:41,790
certified security specialist in the

00:00:39,270 --> 00:00:43,770
whole passel of other certifications in

00:00:41,790 --> 00:00:46,379
the past I started out in a Microsoft

00:00:43,770 --> 00:00:48,210
shop so i got my mcse and i was also a

00:00:46,379 --> 00:00:50,280
microsoft certified trainer and even

00:00:48,210 --> 00:00:52,320
further back than that i was a novell

00:00:50,280 --> 00:00:53,910
certified network engineer and I had to

00:00:52,320 --> 00:00:57,780
see some heads in here going to him he's

00:00:53,910 --> 00:00:59,430
old so I have spent a lot of time

00:00:57,780 --> 00:01:01,050
throughout my career of focusing on

00:00:59,430 --> 00:01:02,359
security so again it's just something

00:01:01,050 --> 00:01:05,339
that I'm very very interested in I

00:01:02,359 --> 00:01:07,400
provided security consulting and

00:01:05,339 --> 00:01:09,360
services for companies including

00:01:07,400 --> 00:01:11,100
multinational banks as mentioned earlier

00:01:09,360 --> 00:01:13,710
ecommerce which is obviously a really

00:01:11,100 --> 00:01:16,710
high value target now I will certainly

00:01:13,710 --> 00:01:18,600
say I don't know everything the longer

00:01:16,710 --> 00:01:20,820
I'm in the industry the more I realize

00:01:18,600 --> 00:01:22,650
I've got a lot to learn but I do have

00:01:20,820 --> 00:01:26,220
some pretty interesting scars so

00:01:22,650 --> 00:01:28,140
hopefully I'll have good answers for you

00:01:26,220 --> 00:01:30,270
at the end of the day really I'm just a

00:01:28,140 --> 00:01:33,960
big ol nerd and that's fine I'm happy

00:01:30,270 --> 00:01:35,369
being so so let's talk about containers

00:01:33,960 --> 00:01:37,110
let's talk about what I know about which

00:01:35,369 --> 00:01:39,000
is red hat in containers we have

00:01:37,110 --> 00:01:43,079
actually been working with containers

00:01:39,000 --> 00:01:46,799
since before 2010 we acquired a company

00:01:43,079 --> 00:01:49,350
in 2010 called makara as a component of

00:01:46,799 --> 00:01:52,049
our platform as a service strategy we

00:01:49,350 --> 00:01:54,090
rebranded the makara technologies as

00:01:52,049 --> 00:01:58,170
open shift and open shift is our paz

00:01:54,090 --> 00:01:59,670
offering we used the term cartridges

00:01:58,170 --> 00:02:04,350
back in the day to talk about what is

00:01:59,670 --> 00:02:06,500
today called containers and our

00:02:04,350 --> 00:02:09,869
cartridges back in you know the early

00:02:06,500 --> 00:02:12,209
2010's were based on security enhanced

00:02:09,869 --> 00:02:13,560
linux linux control groups colonel

00:02:12,209 --> 00:02:16,830
namespaces so

00:02:13,560 --> 00:02:20,489
actually had the right idea hey we had

00:02:16,830 --> 00:02:23,970
the right idea but as happened in

00:02:20,489 --> 00:02:25,800
open-source docker really came to gather

00:02:23,970 --> 00:02:28,650
a lot of the market share for containers

00:02:25,800 --> 00:02:31,050
we recognize that the community had

00:02:28,650 --> 00:02:33,380
spoken and so we shifted directions in

00:02:31,050 --> 00:02:35,610
2013 and started contributing to docker

00:02:33,380 --> 00:02:37,230
and now we are one of the top

00:02:35,610 --> 00:02:39,120
contributors to the upstream docker

00:02:37,230 --> 00:02:40,620
project last time I checked and I

00:02:39,120 --> 00:02:41,819
haven't checked in several weeks but

00:02:40,620 --> 00:02:45,440
last time I checked we were the number

00:02:41,819 --> 00:02:48,660
two contributor behind only docker so

00:02:45,440 --> 00:02:51,239
the industry adoption of docker has been

00:02:48,660 --> 00:02:53,130
phenomenal it's really impressive docker

00:02:51,239 --> 00:02:56,519
has been through multiple successful

00:02:53,130 --> 00:03:00,209
rounds of VC funding Apsaras cisco EMC

00:02:56,519 --> 00:03:02,340
fujitsu goldman sachs HP huawei IBM and

00:03:00,209 --> 00:03:04,470
tell etc etc etc that are including red

00:03:02,340 --> 00:03:06,569
hat and vmware are all on board with

00:03:04,470 --> 00:03:08,459
containers standardization with docker

00:03:06,569 --> 00:03:10,170
which is a really important component

00:03:08,459 --> 00:03:12,239
there needs to be interoperability and

00:03:10,170 --> 00:03:16,290
there needs to be standardization heck

00:03:12,239 --> 00:03:23,370
even Microsoft has gotten on board with

00:03:16,290 --> 00:03:24,930
docker so what are containers we do a

00:03:23,370 --> 00:03:27,410
real brief overview and then we'll jump

00:03:24,930 --> 00:03:29,130
into kind of the meat of the topic so

00:03:27,410 --> 00:03:30,989
containerisation specifically around

00:03:29,130 --> 00:03:32,670
docker is a technology that allows

00:03:30,989 --> 00:03:35,040
applications whether their web

00:03:32,670 --> 00:03:38,549
applications or applications services

00:03:35,040 --> 00:03:43,440
databases whatever to be run abstracted

00:03:38,549 --> 00:03:44,910
from and with some isolation from the

00:03:43,440 --> 00:03:46,230
underlying operating system and I'll

00:03:44,910 --> 00:03:47,489
talk about why that's important to

00:03:46,230 --> 00:03:49,889
understand that it's not a hundred

00:03:47,489 --> 00:03:51,840
percent isolated from the underlying

00:03:49,889 --> 00:03:53,819
operating system the doctor service can

00:03:51,840 --> 00:03:55,799
launch containers regardless of the

00:03:53,819 --> 00:03:58,109
underlying distro which is really cool

00:03:55,799 --> 00:04:00,120
and containers can enable application

00:03:58,109 --> 00:04:01,440
density and this is a really important

00:04:00,120 --> 00:04:04,769
drawn something that a lot of folks

00:04:01,440 --> 00:04:06,630
don't think about because you don't have

00:04:04,769 --> 00:04:09,230
the associated overhead with a whole new

00:04:06,630 --> 00:04:11,579
VM every time you have a new application

00:04:09,230 --> 00:04:14,910
you can get some pretty impressive

00:04:11,579 --> 00:04:17,250
levels of density for application

00:04:14,910 --> 00:04:19,680
services on docker servers are on

00:04:17,250 --> 00:04:21,599
containerized servers also Linux control

00:04:19,680 --> 00:04:23,970
groups really allow for maximum

00:04:21,599 --> 00:04:25,740
utilization a lot of folks think about

00:04:23,970 --> 00:04:27,420
Linux control groups in terms of

00:04:25,740 --> 00:04:30,150
restricting services

00:04:27,420 --> 00:04:32,160
but the reverse is true as well linux

00:04:30,150 --> 00:04:34,500
linux containerization specifically

00:04:32,160 --> 00:04:38,700
around control groups also allow you to

00:04:34,500 --> 00:04:40,290
fully deploy your hardware so that you

00:04:38,700 --> 00:04:41,910
know for sure that if you're going to do

00:04:40,290 --> 00:04:43,680
control groups and you're going to give

00:04:41,910 --> 00:04:45,510
ten percent of resources to the machines

00:04:43,680 --> 00:04:46,650
if you put 10 machines on there you're

00:04:45,510 --> 00:04:49,380
going to be able to do a hundred percent

00:04:46,650 --> 00:04:50,580
of utilization on the system and the

00:04:49,380 --> 00:04:52,110
cool thing about it is the same

00:04:50,580 --> 00:04:53,640
container can run on different versions

00:04:52,110 --> 00:04:55,560
of linux ubuntu you containers can run

00:04:53,640 --> 00:04:58,050
on Fedora CentOS containers can run on

00:04:55,560 --> 00:05:01,380
rel human sacrifice dogs and cats living

00:04:58,050 --> 00:05:05,580
together mass hysteria no sorry wrong

00:05:01,380 --> 00:05:07,680
movie so maybe not but at the end of the

00:05:05,580 --> 00:05:10,440
day the cool thing about containers is

00:05:07,680 --> 00:05:12,530
it's really easy for application

00:05:10,440 --> 00:05:16,230
developers to build and deploy

00:05:12,530 --> 00:05:17,790
applications almost anywhere now

00:05:16,230 --> 00:05:20,880
containers have got a lot of hype

00:05:17,790 --> 00:05:24,420
containers are cool containerization as

00:05:20,880 --> 00:05:27,690
a technology is pretty awesome but let's

00:05:24,420 --> 00:05:30,420
be real clear containers are not a

00:05:27,690 --> 00:05:32,760
panacea they are not the cure for all

00:05:30,420 --> 00:05:34,590
that ails you there's a lot of snake oil

00:05:32,760 --> 00:05:36,560
salesmen out there saying oh just put it

00:05:34,590 --> 00:05:42,090
in a container and it's gonna be awesome

00:05:36,560 --> 00:05:45,360
maybe containers are not fit for every

00:05:42,090 --> 00:05:47,010
application again I hear folks talking

00:05:45,360 --> 00:05:48,810
about well when we get you know Oracle

00:05:47,010 --> 00:05:51,810
to put their database in a container and

00:05:48,810 --> 00:05:54,930
I'm like oh gosh not this year at least

00:05:51,810 --> 00:05:58,460
please so I don't see that happening yet

00:05:54,930 --> 00:06:00,660
it will happen eventually I hope but

00:05:58,460 --> 00:06:04,980
containerization is not for every

00:06:00,660 --> 00:06:06,030
application and I hear this so often

00:06:04,980 --> 00:06:07,350
well we're going to put it in

00:06:06,030 --> 00:06:14,190
containerization because it's a better

00:06:07,350 --> 00:06:16,800
virtualization not really I run docker

00:06:14,190 --> 00:06:19,650
containers on my laptop and just on bare

00:06:16,800 --> 00:06:21,270
metal so I would say that that you know

00:06:19,650 --> 00:06:21,960
you need to make sure that that as

00:06:21,270 --> 00:06:24,450
you're talking to folks about

00:06:21,960 --> 00:06:26,370
containerization not necessarily

00:06:24,450 --> 00:06:27,810
virtualization we certainly do recommend

00:06:26,370 --> 00:06:30,480
that you use virtualization for the

00:06:27,810 --> 00:06:34,830
hosts but it's not actually

00:06:30,480 --> 00:06:37,050
virtualization so let's dive into the

00:06:34,830 --> 00:06:39,030
meat of things then and again guys we've

00:06:37,050 --> 00:06:40,680
really only got about 40 minutes so I

00:06:39,030 --> 00:06:41,100
hope that nobody walked in here thinking

00:06:40,680 --> 00:06:42,390
that

00:06:41,100 --> 00:06:44,610
40 minutes you're going to walk away a

00:06:42,390 --> 00:06:46,800
security expert I'm going to be talking

00:06:44,610 --> 00:06:49,410
at a very high level try to give you a

00:06:46,800 --> 00:06:51,030
couple of examples and really kind of

00:06:49,410 --> 00:06:52,700
clarify some things that frankly when I

00:06:51,030 --> 00:06:54,870
first started playing with

00:06:52,700 --> 00:06:56,700
containerization I wasn't real clear on

00:06:54,870 --> 00:06:57,990
and I realized that if I wasn't real

00:06:56,700 --> 00:06:59,790
clear on it probably other folks weren't

00:06:57,990 --> 00:07:03,060
so hopefully this will help kind of

00:06:59,790 --> 00:07:06,470
polish off the rough edges so container

00:07:03,060 --> 00:07:10,350
security is made up of a number of

00:07:06,470 --> 00:07:12,060
components the one of the most important

00:07:10,350 --> 00:07:14,850
ones but one of the ones that I think is

00:07:12,060 --> 00:07:17,460
a little bit esoteric is container

00:07:14,850 --> 00:07:20,070
namespaces or I'm sorry linux kernel

00:07:17,460 --> 00:07:22,590
namespaces and i'll talk more about each

00:07:20,070 --> 00:07:25,200
one of these topics as time goes by so

00:07:22,590 --> 00:07:29,280
linux kernel namespaces a core component

00:07:25,200 --> 00:07:30,990
of containers linux control groups and

00:07:29,280 --> 00:07:33,210
you'll hear these referred to as see

00:07:30,990 --> 00:07:36,150
groups are also a really important part

00:07:33,210 --> 00:07:38,040
for resource management control by the

00:07:36,150 --> 00:07:39,150
way you are certainly welcome to take

00:07:38,040 --> 00:07:40,740
pictures but you're going to get the

00:07:39,150 --> 00:07:43,680
slide deck at the end i'll post it i

00:07:40,740 --> 00:07:48,030
just was working on it a couple of hours

00:07:43,680 --> 00:07:50,670
ago so wasn't finished yet so linux

00:07:48,030 --> 00:07:53,370
control groups the docker Damon itself

00:07:50,670 --> 00:07:55,050
is an important component of security

00:07:53,370 --> 00:07:58,790
and I'll talk about some best practices

00:07:55,050 --> 00:08:02,820
around docker in a little while linux

00:07:58,790 --> 00:08:05,640
capabilities lib lib cap in the linux

00:08:02,820 --> 00:08:07,950
space the ability to do fine grained

00:08:05,640 --> 00:08:10,200
control of what services and what

00:08:07,950 --> 00:08:13,380
capabilities either users or the root

00:08:10,200 --> 00:08:18,390
user has and linux security mechanisms

00:08:13,380 --> 00:08:20,370
like a parmer or selinux now I'm an

00:08:18,390 --> 00:08:22,770
selinux guy so I will be talking about

00:08:20,370 --> 00:08:24,300
selinux but if you use another security

00:08:22,770 --> 00:08:26,880
mechanism another mandatory access

00:08:24,300 --> 00:08:28,260
control system the concepts will be

00:08:26,880 --> 00:08:32,370
similar enough that you should be just

00:08:28,260 --> 00:08:34,440
fine so let's dive a little bit deeper

00:08:32,370 --> 00:08:36,990
into what is involved with Colonel

00:08:34,440 --> 00:08:38,250
namespaces how many folks I'm just

00:08:36,990 --> 00:08:39,479
curious because when i first started

00:08:38,250 --> 00:08:41,430
messing around with this stuff i had

00:08:39,479 --> 00:08:43,080
always heard of colonel namespaces but i

00:08:41,430 --> 00:08:44,850
hadn't really seen concrete examples of

00:08:43,080 --> 00:08:46,320
it how many folks are not really

00:08:44,850 --> 00:08:48,210
familiar with what Colonel namespace is

00:08:46,320 --> 00:08:50,220
in is other than the fact that we know

00:08:48,210 --> 00:08:51,420
that it's part of what okay good I'm not

00:08:50,220 --> 00:08:53,040
alone because when i first started

00:08:51,420 --> 00:08:54,370
studying the stuff I was like yes it has

00:08:53,040 --> 00:08:57,100
namespaces

00:08:54,370 --> 00:08:59,680
and they're blue or something I don't

00:08:57,100 --> 00:09:02,380
know so let's talk about what Colonel

00:08:59,680 --> 00:09:05,170
namespaces our name spaces are just

00:09:02,380 --> 00:09:08,050
Colonel capabilities to make a global

00:09:05,170 --> 00:09:11,529
resource appear to be unique and

00:09:08,050 --> 00:09:14,529
isolated the namespace is that the Linux

00:09:11,529 --> 00:09:16,089
kernel can manage include Mount name

00:09:14,529 --> 00:09:19,270
spaces so the ability to mount and

00:09:16,089 --> 00:09:21,700
unmount file systems pit namespaces so

00:09:19,270 --> 00:09:25,750
process IDs and all of the child process

00:09:21,700 --> 00:09:28,839
IDs UTS namespaces around system naming

00:09:25,750 --> 00:09:31,260
specifically around you name I PC or

00:09:28,839 --> 00:09:35,290
inter process communication namespaces

00:09:31,260 --> 00:09:37,870
network namespaces and finally user name

00:09:35,290 --> 00:09:42,120
spaces and let's talk a little bit about

00:09:37,870 --> 00:09:45,430
each one of these namespaces so mount

00:09:42,120 --> 00:09:47,140
namespaces just allow a container or

00:09:45,430 --> 00:09:49,300
actually any process but for the purpose

00:09:47,140 --> 00:09:51,970
of this presentation a container to

00:09:49,300 --> 00:09:55,510
think that a directory which is actually

00:09:51,970 --> 00:09:57,700
mounted from the host OS is exclusively

00:09:55,510 --> 00:09:58,990
available to the container and I'll show

00:09:57,700 --> 00:10:02,020
you an example of that just a few

00:09:58,990 --> 00:10:06,010
minutes so if you start a container of

00:10:02,020 --> 00:10:08,560
you docker run I T dash V and then a

00:10:06,010 --> 00:10:12,339
host file system in other words a

00:10:08,560 --> 00:10:14,140
directory that exists now and where you

00:10:12,339 --> 00:10:16,450
want it to be mounted inside of the

00:10:14,140 --> 00:10:17,950
container when the container spins up

00:10:16,450 --> 00:10:19,870
it's going to look in that directory and

00:10:17,950 --> 00:10:22,900
go this is mine it's completely mine I

00:10:19,870 --> 00:10:24,640
have exclusive access to it in reality

00:10:22,900 --> 00:10:26,830
you're using part of the file system

00:10:24,640 --> 00:10:28,570
from the host operating system there's

00:10:26,830 --> 00:10:31,240
some significant challenges to make that

00:10:28,570 --> 00:10:33,400
happen in a secure way right because

00:10:31,240 --> 00:10:35,110
you've got user stuff going on out in

00:10:33,400 --> 00:10:36,640
the container and you're you know kind

00:10:35,110 --> 00:10:38,470
of granting permission to the file

00:10:36,640 --> 00:10:39,910
system on the host so you have to be

00:10:38,470 --> 00:10:41,560
really careful about it now the

00:10:39,910 --> 00:10:43,630
container sees the directory on its own

00:10:41,560 --> 00:10:45,820
mount namespace not knowing that it's

00:10:43,630 --> 00:10:47,500
actually on the host so multiple

00:10:45,820 --> 00:10:50,110
containers could for instance use the

00:10:47,500 --> 00:10:52,060
hosts VAR dub dub dub HTML directory for

00:10:50,110 --> 00:10:53,980
instance and that way you don't have to

00:10:52,060 --> 00:10:55,270
copy the contents of the web directory

00:10:53,980 --> 00:10:56,920
all over the place that's just one

00:10:55,270 --> 00:10:59,770
example there about a zillion of them

00:10:56,920 --> 00:11:01,029
out there and so and I apologize guys

00:10:59,770 --> 00:11:03,490
this is an eye chart I thought I was

00:11:01,029 --> 00:11:05,680
going to have a much larger screen but

00:11:03,490 --> 00:11:08,259
what I've done here is I put an example

00:11:05,680 --> 00:11:11,189
of what that looks like so what I did

00:11:08,259 --> 00:11:13,540
as I catted the VAR dub dub dub HTML

00:11:11,189 --> 00:11:15,549
index.html file and you can see that

00:11:13,540 --> 00:11:17,649
I've just got a simple little HTML file

00:11:15,549 --> 00:11:22,470
that says this is my silly webpage and

00:11:17,649 --> 00:11:25,449
then I did docker run IT so we want it

00:11:22,470 --> 00:11:28,329
not to have a terminal we wanted to be

00:11:25,449 --> 00:11:31,749
interactive and then I did the dash V

00:11:28,329 --> 00:11:34,569
VAR dub dub dub HTML you can do that

00:11:31,749 --> 00:11:36,279
either by path or by host name and path

00:11:34,569 --> 00:11:39,399
since it was local to the host I just

00:11:36,279 --> 00:11:41,939
did the path and so then i said mount

00:11:39,399 --> 00:11:45,220
VAR dub dub dub HTML from the host as

00:11:41,939 --> 00:11:47,799
VAR dub dub dub HTML on the container

00:11:45,220 --> 00:11:51,519
and run the container called fedora and

00:11:47,799 --> 00:11:54,009
issue the command bash so all of that

00:11:51,519 --> 00:11:56,919
stuff runs and you can see that my

00:11:54,009 --> 00:11:58,569
prompt changes there's my root @ t 5 40

00:11:56,919 --> 00:12:00,910
that's my laptop all of a sudden it

00:11:58,569 --> 00:12:04,389
changes over to just a bash prompt with

00:12:00,910 --> 00:12:06,569
no bash RC or anything like that but if

00:12:04,389 --> 00:12:09,789
I cap the VAR dub dub dub HTML

00:12:06,569 --> 00:12:11,410
index.html file it's the same file and I

00:12:09,789 --> 00:12:14,279
could have run md5 sum or something like

00:12:11,410 --> 00:12:16,959
that but that is an example of mount

00:12:14,279 --> 00:12:19,299
namespaces the container has no idea

00:12:16,959 --> 00:12:23,319
that that actually owns to the host or

00:12:19,299 --> 00:12:24,879
is owned by the host OS so can you all

00:12:23,319 --> 00:12:26,109
see how that would be really handy that

00:12:24,879 --> 00:12:27,639
way you're not having to copy stuff into

00:12:26,109 --> 00:12:28,779
containers and you know synchronized

00:12:27,639 --> 00:12:31,480
content and stuff like that is pretty

00:12:28,779 --> 00:12:32,649
cool technology and again there are some

00:12:31,480 --> 00:12:35,470
security considerations that we'll talk

00:12:32,649 --> 00:12:37,869
about in a little while now pin

00:12:35,470 --> 00:12:40,089
namespaces let the container think that

00:12:37,869 --> 00:12:42,069
it's a new instance of the operating

00:12:40,089 --> 00:12:44,230
system so when you start a container on

00:12:42,069 --> 00:12:46,660
a host it's going to get a new process

00:12:44,230 --> 00:12:48,519
ID and pin namespaces enable the

00:12:46,660 --> 00:12:51,789
container to see the pins inside of the

00:12:48,519 --> 00:12:54,159
container as unique as if it were a

00:12:51,789 --> 00:12:56,619
unique instance the operating system so

00:12:54,159 --> 00:12:59,289
in the following example what I do is I

00:12:56,619 --> 00:13:01,720
fire up a fedora container again and

00:12:59,289 --> 00:13:03,339
then I run the command PS ax I want to

00:13:01,720 --> 00:13:06,129
see all the processes that are running

00:13:03,339 --> 00:13:09,399
in that container the Linux container

00:13:06,129 --> 00:13:11,409
sees slash bin slash bash as process ID

00:13:09,399 --> 00:13:12,669
1 now we all know that silly it's

00:13:11,409 --> 00:13:15,069
usually gonna be an it or it's going to

00:13:12,669 --> 00:13:17,109
assistant d or something like that but

00:13:15,069 --> 00:13:19,899
the container only sees its own pit

00:13:17,109 --> 00:13:21,560
namespace so the bash process exists

00:13:19,899 --> 00:13:23,750
within the container is pit 1

00:13:21,560 --> 00:13:27,830
but on the host you'll see that it's

00:13:23,750 --> 00:13:31,790
actually pidd 18 557 so again I do

00:13:27,830 --> 00:13:33,860
docker run IT to be interactive and give

00:13:31,790 --> 00:13:38,120
me terminal terminal control I do a PSA

00:13:33,860 --> 00:13:40,279
X and you see that bash is Pit one which

00:13:38,120 --> 00:13:42,770
is silly but to the container it's like

00:13:40,279 --> 00:13:45,110
I am my own OS I have everything that I

00:13:42,770 --> 00:13:47,180
need I'm fine I'm self-contained but

00:13:45,110 --> 00:13:50,180
then when I go over to another terminal

00:13:47,180 --> 00:13:51,620
on my host machine and I do a PS way

00:13:50,180 --> 00:13:55,880
down here at the bottom I've got that

00:13:51,620 --> 00:13:59,930
docker run command and it spit 18 557 so

00:13:55,880 --> 00:14:03,200
that is kid namespaces again we're just

00:13:59,930 --> 00:14:05,029
abstracting from a process ID and

00:14:03,200 --> 00:14:07,220
everything below it and we're isolating

00:14:05,029 --> 00:14:12,890
it so that the process using that

00:14:07,220 --> 00:14:14,330
namespace thinks it's all me okay when

00:14:12,890 --> 00:14:15,920
you start a container assuming you've

00:14:14,330 --> 00:14:18,380
added your user to the docker group you

00:14:15,920 --> 00:14:20,420
start it as your user account right I

00:14:18,380 --> 00:14:23,930
ran that I did it as root but you can

00:14:20,420 --> 00:14:25,339
also do it as an individual user in the

00:14:23,930 --> 00:14:27,980
following example i'm going to start the

00:14:25,339 --> 00:14:29,870
container is the user t cameron and once

00:14:27,980 --> 00:14:33,350
the container is started my user inside

00:14:29,870 --> 00:14:35,450
the container is route now I didn't su

00:14:33,350 --> 00:14:37,280
to root or anything like that this is

00:14:35,450 --> 00:14:38,480
just an example of user name spaces and

00:14:37,280 --> 00:14:39,680
let me show you what that looks like and

00:14:38,480 --> 00:14:42,680
again i'm sorry this is kind of an eye

00:14:39,680 --> 00:14:46,100
chart but so I run the ID command and

00:14:42,680 --> 00:14:49,220
you can see that I'm uid 1000 I run

00:14:46,100 --> 00:14:51,560
docker run I t fedora and then I run the

00:14:49,220 --> 00:14:54,110
bash command so I spit up a new docker

00:14:51,560 --> 00:14:56,900
container and you notice that I get the

00:14:54,110 --> 00:14:59,540
the pound sign or the hash for my prompt

00:14:56,900 --> 00:15:01,220
I'm root and when I run ID again and I

00:14:59,540 --> 00:15:05,630
haven't su door anything but when i run

00:15:01,220 --> 00:15:08,570
ID it says your uid 0 you are route so

00:15:05,630 --> 00:15:10,339
you're the king of your domain inside of

00:15:08,570 --> 00:15:13,790
the container and that's just an example

00:15:10,339 --> 00:15:16,070
of user name spaces the colonel with

00:15:13,790 --> 00:15:17,750
with namespace is going I'm gonna I'm

00:15:16,070 --> 00:15:19,520
gonna lie basically to everything

00:15:17,750 --> 00:15:21,290
underneath this parent process ID

00:15:19,520 --> 00:15:25,790
everything underneath yeah yeah your

00:15:21,290 --> 00:15:27,140
route you're good now network namespaces

00:15:25,790 --> 00:15:29,060
allow a container to have its own IP

00:15:27,140 --> 00:15:31,910
address independent of that of the host

00:15:29,060 --> 00:15:33,589
these addresses are not available from

00:15:31,910 --> 00:15:34,830
outside of the host these are it's a

00:15:33,589 --> 00:15:37,590
virtual network

00:15:34,830 --> 00:15:38,790
using IP masquerading it's kind of

00:15:37,590 --> 00:15:40,620
similar to what we do with other

00:15:38,790 --> 00:15:42,780
virtualization technologies like libvirt

00:15:40,620 --> 00:15:44,040
and things like that it's private

00:15:42,780 --> 00:15:46,380
networking similar to that of

00:15:44,040 --> 00:15:49,050
virtualization the docker service sets

00:15:46,380 --> 00:15:50,370
up an IP tables masquerading rule so

00:15:49,050 --> 00:15:51,900
that the container can get out to the

00:15:50,370 --> 00:15:53,640
rest of the internet but these IP

00:15:51,900 --> 00:15:55,470
addresses are not exposed to the rest of

00:15:53,640 --> 00:15:57,210
the Internet in the following query I

00:15:55,470 --> 00:16:01,080
find that my fedora instance has the

00:15:57,210 --> 00:16:03,480
address 120 are 172 dot 1707 even though

00:16:01,080 --> 00:16:04,650
the host doesn't have that address it

00:16:03,480 --> 00:16:07,590
doesn't have that address range or

00:16:04,650 --> 00:16:10,530
anything so what I do is I fire at my

00:16:07,590 --> 00:16:12,840
container and then I use docker inspect

00:16:10,530 --> 00:16:14,910
so I do docker inspect and I give it a

00:16:12,840 --> 00:16:18,300
format that i shamelessly stole off of

00:16:14,910 --> 00:16:21,300
the docker documentation and it comes

00:16:18,300 --> 00:16:24,330
back and it says 172 17 but if I do IP

00:16:21,300 --> 00:16:25,890
show on the host there's not even an IP

00:16:24,330 --> 00:16:27,750
address associated with it this is in my

00:16:25,890 --> 00:16:30,600
hotel room with no Ethernet plugged in

00:16:27,750 --> 00:16:33,270
just but it will again it will

00:16:30,600 --> 00:16:35,370
virtualize and abstract networking using

00:16:33,270 --> 00:16:37,320
networking namespaces and the docker

00:16:35,370 --> 00:16:40,830
container as far as its concerned has a

00:16:37,320 --> 00:16:42,900
an IP stack and that's its address if

00:16:40,830 --> 00:16:44,340
the route command were installed and

00:16:42,900 --> 00:16:46,140
it's not because the fedora container is

00:16:44,340 --> 00:16:47,670
like super tiny and stripped down I

00:16:46,140 --> 00:16:48,960
could have done route dash in and I

00:16:47,670 --> 00:16:50,520
would have seen that it set up my IP

00:16:48,960 --> 00:16:51,630
address and it set up my default route

00:16:50,520 --> 00:16:55,680
so that I can get out through that

00:16:51,630 --> 00:16:58,410
masqueraded firewall rule now a little

00:16:55,680 --> 00:16:59,640
bit less commonly used in LA or it's

00:16:58,410 --> 00:17:02,160
used all the time but we don't really

00:16:59,640 --> 00:17:05,160
deal with it as sis admins and and app

00:17:02,160 --> 00:17:07,680
developers IPC namespaces same thing but

00:17:05,160 --> 00:17:09,810
with inter-process communications my

00:17:07,680 --> 00:17:12,120
container in this example I fired up

00:17:09,810 --> 00:17:13,620
that fedora container and I ran I pcs

00:17:12,120 --> 00:17:15,750
and there's no inter-process

00:17:13,620 --> 00:17:19,620
communications that are that are being

00:17:15,750 --> 00:17:21,839
managed so when I do I pcs my table is

00:17:19,620 --> 00:17:24,870
empty I don't have anything but then I'd

00:17:21,839 --> 00:17:26,339
pop over to my host and I do I pcs since

00:17:24,870 --> 00:17:27,959
I'm because there's all kinds of

00:17:26,339 --> 00:17:28,710
applications and i've got x going and

00:17:27,959 --> 00:17:31,020
there's all kinds of inter-process

00:17:28,710 --> 00:17:32,610
communications going so again name

00:17:31,020 --> 00:17:34,800
spacing is just abstracting and

00:17:32,610 --> 00:17:36,780
isolating and pretty much lying to the

00:17:34,800 --> 00:17:41,070
to the child saying yeah yeah you're on

00:17:36,780 --> 00:17:42,540
your own you're good UTS namespace lets

00:17:41,070 --> 00:17:45,570
the container think that it's a separate

00:17:42,540 --> 00:17:48,360
OS with its own hostname and domain name

00:17:45,570 --> 00:17:50,549
so when I fire up my

00:17:48,360 --> 00:17:54,840
my host i do hostname and you can see

00:17:50,549 --> 00:17:58,770
that it's t 540 dot TC redhead calm then

00:17:54,840 --> 00:18:00,510
i fire up a guest and you'll see that

00:17:58,770 --> 00:18:02,220
the host name is actually randomly

00:18:00,510 --> 00:18:04,980
generated which makes sense right the

00:18:02,220 --> 00:18:06,990
whole point behind containerization is

00:18:04,980 --> 00:18:08,010
there they're cattle they're not pets so

00:18:06,990 --> 00:18:10,350
it's going to randomly generate a

00:18:08,010 --> 00:18:12,179
hostname bring it up and it's got its

00:18:10,350 --> 00:18:14,370
own unique name and it's getting that by

00:18:12,179 --> 00:18:15,750
using essentially the you name the same

00:18:14,370 --> 00:18:21,059
system calls that you would use for you

00:18:15,750 --> 00:18:23,570
name so so any questions on namespaces

00:18:21,059 --> 00:18:28,200
did that clarify anything for anyone

00:18:23,570 --> 00:18:29,850
awesome my worker is done alright so

00:18:28,200 --> 00:18:31,440
let's see if we can learn a little bit

00:18:29,850 --> 00:18:33,630
more about control groups control groups

00:18:31,440 --> 00:18:34,950
are really cool you know what is a

00:18:33,630 --> 00:18:37,380
control group if you look at the

00:18:34,950 --> 00:18:39,330
documentation at kernel.org it talks

00:18:37,380 --> 00:18:40,770
about control groups just provide a

00:18:39,330 --> 00:18:42,809
mechanism for aggregating and

00:18:40,770 --> 00:18:44,640
partitioning a set of tasks and all of

00:18:42,809 --> 00:18:46,230
their children all their future children

00:18:44,640 --> 00:18:49,169
and two hierarchical groups with

00:18:46,230 --> 00:18:50,940
specialized behavior basically all that

00:18:49,169 --> 00:18:53,700
that control groups allows you to do is

00:18:50,940 --> 00:18:55,890
take a family of processes like a parent

00:18:53,700 --> 00:18:58,230
ID and all the child ids put them into a

00:18:55,890 --> 00:19:01,620
control group and you can jail them you

00:18:58,230 --> 00:19:03,120
can assign values to how much Network I

00:19:01,620 --> 00:19:06,480
oh they're going to use disk i/o they're

00:19:03,120 --> 00:19:09,240
going to use cpu memory etc etc etc so

00:19:06,480 --> 00:19:11,280
the cool thing is in the case of

00:19:09,240 --> 00:19:12,809
containers the resources that are in a

00:19:11,280 --> 00:19:15,750
control group are those resources that

00:19:12,809 --> 00:19:18,210
are associated with that container so

00:19:15,750 --> 00:19:20,490
that ensures that even if a container is

00:19:18,210 --> 00:19:22,460
compromised for instance or even a badly

00:19:20,490 --> 00:19:24,600
behaved application spins out of control

00:19:22,460 --> 00:19:25,770
there's going to be a cap on the

00:19:24,600 --> 00:19:28,559
resources that have been made available

00:19:25,770 --> 00:19:31,500
to that container if you configure that

00:19:28,559 --> 00:19:33,419
cap be aware you need to configure that

00:19:31,500 --> 00:19:35,520
cap but if you've configured it then

00:19:33,419 --> 00:19:36,990
even if a container completely loses its

00:19:35,520 --> 00:19:38,220
mind the rest of the system's like yeah

00:19:36,990 --> 00:19:42,929
that thing's running at ten percent

00:19:38,220 --> 00:19:46,730
we're good life's okay so now when I run

00:19:42,929 --> 00:19:50,460
the command system control status docker

00:19:46,730 --> 00:19:52,710
now this is on rel and similar systems I

00:19:50,460 --> 00:19:55,169
get the control group and the control

00:19:52,710 --> 00:19:57,210
group slice information so the way that

00:19:55,169 --> 00:19:59,760
that works is I run system control

00:19:57,210 --> 00:20:00,930
status docker and you see that I've got

00:19:59,760 --> 00:20:04,800
come on

00:20:00,930 --> 00:20:07,050
a dead battery system slice docker

00:20:04,800 --> 00:20:12,090
service so this is actually pulling

00:20:07,050 --> 00:20:14,640
information from the / sis / FS /c group

00:20:12,090 --> 00:20:16,050
directory structure so that's a pseudo

00:20:14,640 --> 00:20:18,660
file system that gets mounted when you

00:20:16,050 --> 00:20:20,910
bring up control groups and you can

00:20:18,660 --> 00:20:22,650
actually manage our navigator that

00:20:20,910 --> 00:20:24,900
directory structure so you can go to sis

00:20:22,650 --> 00:20:26,610
FSC group it's a pseudo directory

00:20:24,900 --> 00:20:28,230
because it gets created in memory and

00:20:26,610 --> 00:20:31,080
you can see what resources are allocated

00:20:28,230 --> 00:20:32,430
your containers now I was trying to come

00:20:31,080 --> 00:20:33,780
up with a really cool example of what a

00:20:32,430 --> 00:20:34,980
SI group would look like and I'm poking

00:20:33,780 --> 00:20:36,660
around in there and finally I was like

00:20:34,980 --> 00:20:38,910
God Lord there's about a zillion things

00:20:36,660 --> 00:20:41,370
in here so i did a find on that

00:20:38,910 --> 00:20:43,830
directory and piped it to wcl to find

00:20:41,370 --> 00:20:46,380
out how many there's 8,500 and something

00:20:43,830 --> 00:20:49,500
entries in the control group directory

00:20:46,380 --> 00:20:53,160
so let me be very clear control groups

00:20:49,500 --> 00:20:56,160
are awesome and insanely granular I will

00:20:53,160 --> 00:20:59,190
also note that by default when I spin up

00:20:56,160 --> 00:21:01,650
a container on my laptop if I don't set

00:20:59,190 --> 00:21:03,000
any control group settings it just

00:21:01,650 --> 00:21:05,070
defaults to you can have whatever you

00:21:03,000 --> 00:21:06,750
want so there's some excellent

00:21:05,070 --> 00:21:08,280
documentation about control groups again

00:21:06,750 --> 00:21:09,870
for time purposes I can't really get

00:21:08,280 --> 00:21:12,060
into like how to set them up because it

00:21:09,870 --> 00:21:15,450
takes it's a good hour to two hours to

00:21:12,060 --> 00:21:18,960
talk about but I strongly recommend that

00:21:15,450 --> 00:21:20,820
as a security function although not as

00:21:18,960 --> 00:21:22,260
much security as a resource management

00:21:20,820 --> 00:21:24,210
function there's some excellent

00:21:22,260 --> 00:21:26,450
documentation at the kernel project and

00:21:24,210 --> 00:21:30,690
also at Red Hat access at redhead calm

00:21:26,450 --> 00:21:32,070
for tuning see groups and if you use we

00:21:30,690 --> 00:21:33,330
have a commercial product open shift

00:21:32,070 --> 00:21:35,490
that's our platform as a service

00:21:33,330 --> 00:21:38,250
offering it actually manages all your C

00:21:35,490 --> 00:21:40,500
group parameters for you so you don't

00:21:38,250 --> 00:21:44,280
you don't have the risk of running your

00:21:40,500 --> 00:21:47,370
system out of resources so the next

00:21:44,280 --> 00:21:51,360
component in docker security is actually

00:21:47,370 --> 00:21:52,770
the dr. Damon the dr. Damon user bin

00:21:51,360 --> 00:21:54,780
docker is responsible for managing

00:21:52,770 --> 00:21:56,880
control groups orchestrating namespaces

00:21:54,780 --> 00:22:00,840
and so on for the docker images so that

00:21:56,880 --> 00:22:02,990
they can be run and secured because of

00:22:00,840 --> 00:22:05,160
the need to be able to do things like

00:22:02,990 --> 00:22:07,620
Colonel control groups and things like

00:22:05,160 --> 00:22:10,560
that the docker process runs is root be

00:22:07,620 --> 00:22:12,780
aware of that you know we all know that

00:22:10,560 --> 00:22:14,260
running processes is root we try to

00:22:12,780 --> 00:22:16,810
avoid it wherever we can

00:22:14,260 --> 00:22:19,060
today this is the case the upstream

00:22:16,810 --> 00:22:20,620
docker project is working on being able

00:22:19,060 --> 00:22:22,030
to drop privileges or run as an

00:22:20,620 --> 00:22:26,200
unprivileged user we're not there yet

00:22:22,030 --> 00:22:28,840
but stay tuned so there are some

00:22:26,200 --> 00:22:30,790
considerations for running docker if

00:22:28,840 --> 00:22:32,320
you're going to have a multi-tenant

00:22:30,790 --> 00:22:35,200
environment which kind of is the whole

00:22:32,320 --> 00:22:37,840
point of having containers make sure you

00:22:35,200 --> 00:22:40,450
vet and trust the people that you are

00:22:37,840 --> 00:22:42,130
going to allow to run docker I know that

00:22:40,450 --> 00:22:45,190
sounds kind of like well of course duh

00:22:42,130 --> 00:22:46,420
but you know there's it's pretty easy to

00:22:45,190 --> 00:22:47,380
go oh yeah I've got a big development

00:22:46,420 --> 00:22:48,730
environment i'm just going to start

00:22:47,380 --> 00:22:50,770
handing out you know the root password

00:22:48,730 --> 00:22:53,110
or whatever to all my developers don't

00:22:50,770 --> 00:22:55,390
like put some put some management around

00:22:53,110 --> 00:22:59,470
that make sure you delegate the ability

00:22:55,390 --> 00:23:01,120
to trusted users and remember that when

00:22:59,470 --> 00:23:02,620
somebody runs the docker command with

00:23:01,120 --> 00:23:06,180
the dash V argument they can mount your

00:23:02,620 --> 00:23:08,590
hosts file system under their container

00:23:06,180 --> 00:23:11,890
just remember that don't do anything

00:23:08,590 --> 00:23:14,770
silly if you're using the included the

00:23:11,890 --> 00:23:16,780
exposed rest api for managing docker do

00:23:14,770 --> 00:23:18,610
code analysis make sure that the way

00:23:16,780 --> 00:23:19,390
that you're calling the API is secure

00:23:18,610 --> 00:23:21,520
make sure that you're doing

00:23:19,390 --> 00:23:23,560
authentication and authorization things

00:23:21,520 --> 00:23:25,660
like that just sanitized your code make

00:23:23,560 --> 00:23:28,270
sure that it's working well if you're

00:23:25,660 --> 00:23:31,660
going to expose the REST API over HTTP

00:23:28,270 --> 00:23:32,770
please use SSL that's again kind of

00:23:31,660 --> 00:23:34,150
common sense but we don't want to be

00:23:32,770 --> 00:23:35,680
sending stuff and clear text over the

00:23:34,150 --> 00:23:40,660
wire especially when it comes to systems

00:23:35,680 --> 00:23:42,280
management calls call me crazy all right

00:23:40,660 --> 00:23:43,900
so let's talk about linux kernel

00:23:42,280 --> 00:23:46,050
capability is this one's this is a

00:23:43,900 --> 00:23:49,870
really cool set of technologies as well

00:23:46,050 --> 00:23:52,090
so historically the root user was

00:23:49,870 --> 00:23:54,190
omnipotent if I have root on the system

00:23:52,090 --> 00:23:55,840
I can do anything I can mount and

00:23:54,190 --> 00:23:57,340
unmount and start and stop networking

00:23:55,840 --> 00:24:00,270
services i can add users and delete

00:23:57,340 --> 00:24:03,340
users I can do whatever I want right

00:24:00,270 --> 00:24:06,790
with Linux capabilities you can actually

00:24:03,340 --> 00:24:10,450
take capabilities away from user

00:24:06,790 --> 00:24:13,720
accounts or you can grant capabilities

00:24:10,450 --> 00:24:16,060
to non root user accounts so you could

00:24:13,720 --> 00:24:18,520
actually assign the ability net bind

00:24:16,060 --> 00:24:20,020
service to a user account to a regular

00:24:18,520 --> 00:24:22,750
user account and they could start up a

00:24:20,020 --> 00:24:25,000
service and bind to a restricted port so

00:24:22,750 --> 00:24:27,270
a port under 1024 so there's some pretty

00:24:25,000 --> 00:24:30,890
cool stuff that goes on there in

00:24:27,270 --> 00:24:33,060
case of docker containers we remove

00:24:30,890 --> 00:24:35,070
capabilities because the reality is

00:24:33,060 --> 00:24:37,170
within a container you don't need to

00:24:35,070 --> 00:24:38,910
modify your networking stack you don't

00:24:37,170 --> 00:24:41,070
need to do a lot of things there's a lot

00:24:38,910 --> 00:24:45,150
of stuff you don't need to run SSH don't

00:24:41,070 --> 00:24:46,410
run as a sage in your container you'd be

00:24:45,150 --> 00:24:48,210
amazed how many times I'm like yeah I

00:24:46,410 --> 00:24:49,890
hear people oh yeah I'm running a full

00:24:48,210 --> 00:24:53,310
OS with everything and I'm meses Aging

00:24:49,890 --> 00:24:55,830
in and but anything that's later cron

00:24:53,310 --> 00:24:57,570
services file system mounts and unmount

00:24:55,830 --> 00:25:00,840
all that stuff is not really needed and

00:24:57,570 --> 00:25:02,910
so by default docker disallows a lot of

00:25:00,840 --> 00:25:06,750
the root capabilities for that root user

00:25:02,910 --> 00:25:08,100
inside of the container so you not don't

00:25:06,750 --> 00:25:09,780
have the ability to modify logging

00:25:08,100 --> 00:25:11,970
change networking modify kernel memory

00:25:09,780 --> 00:25:14,430
and the catch-all capsis admin the

00:25:11,970 --> 00:25:18,000
capacities our capabilities for system

00:25:14,430 --> 00:25:21,420
administration and there is actually

00:25:18,000 --> 00:25:23,610
that's the source code for the go file I

00:25:21,420 --> 00:25:26,130
think it is that talks about all of the

00:25:23,610 --> 00:25:28,680
capabilities which are masked for the

00:25:26,130 --> 00:25:30,150
container so there's actually a lot of

00:25:28,680 --> 00:25:34,890
integrated security kind of already

00:25:30,150 --> 00:25:37,110
there so I want to talk about security

00:25:34,890 --> 00:25:38,580
enhanced Linux if you are using some

00:25:37,110 --> 00:25:40,350
other distro that uses another

00:25:38,580 --> 00:25:42,030
technology for mandatory access control

00:25:40,350 --> 00:25:43,920
I'm just going to recommend that you go

00:25:42,030 --> 00:25:46,380
read that documentation I know selinux

00:25:43,920 --> 00:25:48,390
so I'm going to talk about selinux if

00:25:46,380 --> 00:25:52,890
you don't know very much about selinux

00:25:48,390 --> 00:25:54,810
go to youtube and watch the selinux for

00:25:52,890 --> 00:25:55,920
mere mortals video that I did at Red Hat

00:25:54,810 --> 00:25:57,900
summit I've gotten a lot of good

00:25:55,920 --> 00:26:00,900
feedback on it it's got about 70,000

00:25:57,900 --> 00:26:03,510
views so far so selinux is a mandatory

00:26:00,900 --> 00:26:06,270
access control system everything from

00:26:03,510 --> 00:26:09,900
processes to files to network interfaces

00:26:06,270 --> 00:26:11,670
and so on have labels we assign labels

00:26:09,900 --> 00:26:13,980
to all of these resources and there's a

00:26:11,670 --> 00:26:16,410
policy which is administratively set and

00:26:13,980 --> 00:26:18,300
fixed and that policy will determine how

00:26:16,410 --> 00:26:21,000
processes can interact with files each

00:26:18,300 --> 00:26:22,260
other network ports and the like SI

00:26:21,000 --> 00:26:24,090
linux is primarily concerned with

00:26:22,260 --> 00:26:26,130
labeling and type enforcement so if i

00:26:24,090 --> 00:26:29,460
have a mythical service called the foo

00:26:26,130 --> 00:26:34,290
service the binary on disk might have

00:26:29,460 --> 00:26:36,900
the foo exacty type or label the startup

00:26:34,290 --> 00:26:39,270
scripts might have food config t type or

00:26:36,900 --> 00:26:40,890
label the log files might be foo

00:26:39,270 --> 00:26:42,810
underscore log underscore

00:26:40,890 --> 00:26:45,510
and the data might have foo underscore

00:26:42,810 --> 00:26:48,360
data underscore T and when the foo

00:26:45,510 --> 00:26:51,210
processes running in memory selinux will

00:26:48,360 --> 00:26:53,640
assign it a label foo underscore T so

00:26:51,210 --> 00:26:56,000
type enforcement and labeling the

00:26:53,640 --> 00:26:58,800
labeling part of it is just hopefully

00:26:56,000 --> 00:27:00,720
smart names for the processes and mount

00:26:58,800 --> 00:27:02,190
points and things like that type

00:27:00,720 --> 00:27:04,350
enforcement which is the other part of

00:27:02,190 --> 00:27:06,480
this equation is the rule set that says

00:27:04,350 --> 00:27:09,720
that when a process for instance running

00:27:06,480 --> 00:27:11,220
is food type wants to access a file on

00:27:09,720 --> 00:27:13,680
the file system with the label foo

00:27:11,220 --> 00:27:15,330
config type or food data type that

00:27:13,680 --> 00:27:16,950
access is allowed that kind of makes

00:27:15,330 --> 00:27:18,690
sense right you want the executable to

00:27:16,950 --> 00:27:21,600
access its config files at its bar and

00:27:18,690 --> 00:27:23,850
its data when the process with the label

00:27:21,600 --> 00:27:26,370
food type tries to write to a log file

00:27:23,850 --> 00:27:27,960
with foo log type label well that makes

00:27:26,370 --> 00:27:30,120
sense as well there's a policy that says

00:27:27,960 --> 00:27:32,490
yes you can write to those log files but

00:27:30,120 --> 00:27:36,150
any other access unless explicitly

00:27:32,490 --> 00:27:38,310
allowed by the policy is denied so

00:27:36,150 --> 00:27:40,650
selinux is all about labeling and type

00:27:38,310 --> 00:27:42,960
enforcement if the food process running

00:27:40,650 --> 00:27:44,490
in the foo underscore t context tries to

00:27:42,960 --> 00:27:47,760
access for instance the directory slash

00:27:44,490 --> 00:27:49,740
home slash t Cameron the label that has

00:27:47,760 --> 00:27:51,060
the label user home der type user

00:27:49,740 --> 00:27:54,180
underscore home underscored or

00:27:51,060 --> 00:27:58,080
underscore type even if that home

00:27:54,180 --> 00:27:59,940
directory is to mod 777 selinux will

00:27:58,080 --> 00:28:02,340
stop that access this is a mandatory

00:27:59,940 --> 00:28:05,370
access control system so least

00:28:02,340 --> 00:28:06,660
restrictive combination wins and selinux

00:28:05,370 --> 00:28:09,270
labels are stored as extended attributes

00:28:06,660 --> 00:28:11,700
on the file system if it's a file system

00:28:09,270 --> 00:28:13,760
object or they're stored in memory and

00:28:11,700 --> 00:28:16,320
it gets red when the system boots up

00:28:13,760 --> 00:28:19,280
labels are stored in the format the

00:28:16,320 --> 00:28:23,370
selinux user selinux roll selinux type

00:28:19,280 --> 00:28:26,310
the mls level and the mcs multi-level

00:28:23,370 --> 00:28:28,110
security and multi category security so

00:28:26,310 --> 00:28:29,460
for that mythical food service the full

00:28:28,110 --> 00:28:33,930
syntax for the label of the running

00:28:29,460 --> 00:28:37,550
process would be user you object are foo

00:28:33,930 --> 00:28:39,690
underscore t type and then my

00:28:37,550 --> 00:28:42,330
multi-level security level which is set

00:28:39,690 --> 00:28:45,900
to 0 and my multi category security

00:28:42,330 --> 00:28:48,630
which is set to 0 as well now the

00:28:45,900 --> 00:28:51,000
default selinux policy is called the

00:28:48,630 --> 00:28:53,370
targeted policy we don't care about the

00:28:51,000 --> 00:28:54,710
selinux user are the role in targeted

00:28:53,370 --> 00:28:56,720
those are only you

00:28:54,710 --> 00:28:58,190
in like top secret environments

00:28:56,720 --> 00:29:01,940
government organizations with scary

00:28:58,190 --> 00:29:03,380
three-letter acronyms but we do care

00:29:01,940 --> 00:29:06,289
about the type because its type

00:29:03,380 --> 00:29:08,450
enforcement and the MCS level MCS light

00:29:06,289 --> 00:29:11,059
labels are really just extra identifies

00:29:08,450 --> 00:29:12,679
right so in SC Linux containers we can

00:29:11,059 --> 00:29:14,960
be very granular about which processes

00:29:12,679 --> 00:29:17,990
can access which other processes these

00:29:14,960 --> 00:29:20,990
are different labels so I've got you

00:29:17,990 --> 00:29:24,529
know user you object our food type s0c0

00:29:20,990 --> 00:29:26,690
and s0c one even though everything about

00:29:24,529 --> 00:29:28,429
those is in the same context because the

00:29:26,690 --> 00:29:30,679
MCS labels are different it's in a

00:29:28,429 --> 00:29:32,240
different context type enforcement says

00:29:30,679 --> 00:29:33,890
that a process with the first label is

00:29:32,240 --> 00:29:35,600
different from the second so policy

00:29:33,890 --> 00:29:37,970
would prevent them from interacting and

00:29:35,600 --> 00:29:40,100
there's no policy allah if there's no

00:29:37,970 --> 00:29:41,600
policy allowing a process running with

00:29:40,100 --> 00:29:43,970
those labels to access the file system

00:29:41,600 --> 00:29:45,500
unless it is labeled with foo config

00:29:43,970 --> 00:29:47,600
type or food content type or another

00:29:45,500 --> 00:29:49,730
predefined label neither of those

00:29:47,600 --> 00:29:53,120
processes would be able to access at sea

00:29:49,730 --> 00:29:55,460
shadow on a standalone system this is a

00:29:53,120 --> 00:29:57,200
note running docker all of the

00:29:55,460 --> 00:29:59,720
containers run in the same context by

00:29:57,200 --> 00:30:01,880
default in our paths offering we

00:29:59,720 --> 00:30:03,830
actually randomized and automate making

00:30:01,880 --> 00:30:05,539
all of those contexts and so you'll see

00:30:03,830 --> 00:30:09,740
what you would you see right there you

00:30:05,539 --> 00:30:11,539
got you know c0 c1 c2 c3 and c4 c5 so

00:30:09,740 --> 00:30:13,190
even if someone were to gain access to

00:30:11,539 --> 00:30:14,690
one of your docker containers if you

00:30:13,190 --> 00:30:17,390
think if they were to break in because

00:30:14,690 --> 00:30:18,980
selinux is in in there if they try to

00:30:17,390 --> 00:30:21,919
use that to access something else on

00:30:18,980 --> 00:30:23,059
your host it wouldn't work and i'm going

00:30:21,919 --> 00:30:24,649
to show you an example that i'm just

00:30:23,059 --> 00:30:28,610
going to pop over to here we're almost

00:30:24,649 --> 00:30:31,220
done guys I know so what I did was I'm

00:30:28,610 --> 00:30:33,169
emulating somebody having taken

00:30:31,220 --> 00:30:35,899
advantage of a security vulnerability or

00:30:33,169 --> 00:30:38,860
broken into and taken over a container

00:30:35,899 --> 00:30:41,840
so you see that I'm logged in as root

00:30:38,860 --> 00:30:45,440
and if I do an ID dash Z you see that

00:30:41,840 --> 00:30:47,570
I'm running and unconfined my type is

00:30:45,440 --> 00:30:50,210
unconfined by default users are n

00:30:47,570 --> 00:30:53,330
confined what I do is I change my

00:30:50,210 --> 00:30:54,830
selinux context temporarily by running

00:30:53,330 --> 00:30:56,809
the run con command and I'm going to

00:30:54,830 --> 00:30:59,360
take on the exact same context as an

00:30:56,809 --> 00:31:03,620
open shift container so I do uncontained

00:30:59,360 --> 00:31:07,190
you system roll open shift type and I

00:31:03,620 --> 00:31:07,970
set my MCS label is C 0 comma C 1 and

00:31:07,190 --> 00:31:10,160
then I run

00:31:07,970 --> 00:31:11,840
bin bash notice that the first thing

00:31:10,160 --> 00:31:13,790
that happens when I run bin bash is I

00:31:11,840 --> 00:31:16,010
can't even access my bash our C file i

00:31:13,790 --> 00:31:18,380
get an error message and even though i

00:31:16,010 --> 00:31:20,810
am logged in as root i didn't su i just

00:31:18,380 --> 00:31:24,200
changed my selinux context if i try to

00:31:20,810 --> 00:31:26,540
cat etsy shadow and if i try to touch a

00:31:24,200 --> 00:31:29,690
test file on the file system if i try to

00:31:26,540 --> 00:31:31,400
create a file and no access if I try to

00:31:29,690 --> 00:31:34,160
look in the home directories if I do an

00:31:31,400 --> 00:31:36,800
LS of slash home slash t Cameron not

00:31:34,160 --> 00:31:38,900
allowed and and if I go well fine I'm

00:31:36,800 --> 00:31:43,160
route I'm just going to turn selinux off

00:31:38,900 --> 00:31:45,860
I do set in 40 and not allowed so

00:31:43,160 --> 00:31:47,570
selinux is awesome for locking down

00:31:45,860 --> 00:31:48,920
systems and it's fantastic and

00:31:47,570 --> 00:31:50,810
multi-tenant environments like this

00:31:48,920 --> 00:31:52,820
because you put very hard jails between

00:31:50,810 --> 00:31:54,920
them so very quickly tips and tricks and

00:31:52,820 --> 00:31:56,540
then we're done containers are at the

00:31:54,920 --> 00:31:58,760
end of the day just processes running on

00:31:56,540 --> 00:32:02,540
the host don't lose sight of that and

00:31:58,760 --> 00:32:05,120
use common sense do have a process in

00:32:02,540 --> 00:32:08,090
place to upgrade and update your

00:32:05,120 --> 00:32:09,890
containers I have talked to numerous

00:32:08,090 --> 00:32:12,080
folks you're like yeah I had my

00:32:09,890 --> 00:32:13,550
application guy make a container and he

00:32:12,080 --> 00:32:18,260
put it out into production what are you

00:32:13,550 --> 00:32:21,710
doing for updating update your

00:32:18,260 --> 00:32:23,150
containers something crazy some really

00:32:21,710 --> 00:32:25,130
high percentage was like seventy eighty

00:32:23,150 --> 00:32:30,890
percent of the containers on docker hub

00:32:25,130 --> 00:32:34,160
were we're vulnerable to the bash was at

00:32:30,890 --> 00:32:35,990
the bash bug or no shell shocked it was

00:32:34,160 --> 00:32:39,110
shell-shocked yeah and that's not a dig

00:32:35,990 --> 00:32:41,660
on docker our OS was vulnerable it

00:32:39,110 --> 00:32:44,240
happens so you have to keep your

00:32:41,660 --> 00:32:45,110
containers up-to-date run services in

00:32:44,240 --> 00:32:47,390
the containers with the lowest

00:32:45,110 --> 00:32:49,940
privileged process of possible drop root

00:32:47,390 --> 00:32:52,160
privileges as soon as you can mount file

00:32:49,940 --> 00:32:54,560
systems on the host and read only mode

00:32:52,160 --> 00:32:57,230
simple stuff sanitize your connections

00:32:54,560 --> 00:32:58,730
from the host to the container treat

00:32:57,230 --> 00:33:01,220
root inside the container just like you

00:32:58,730 --> 00:33:03,560
would root on the host and watch your

00:33:01,220 --> 00:33:06,650
logs really pay attention to your logs

00:33:03,560 --> 00:33:07,850
don't just download any old container

00:33:06,650 --> 00:33:10,850
you find on the net throw it into

00:33:07,850 --> 00:33:13,700
production use a trusted repository or

00:33:10,850 --> 00:33:15,680
hub don't run SSH inside of your

00:33:13,700 --> 00:33:17,750
container if you're running application

00:33:15,680 --> 00:33:21,680
services at that level you are doing it

00:33:17,750 --> 00:33:23,720
wrong don't run with root privileges

00:33:21,680 --> 00:33:29,750
privileges wherever you can don't

00:33:23,720 --> 00:33:31,670
disable selinux and don't roll your own

00:33:29,750 --> 00:33:33,020
containers once and then never maintain

00:33:31,670 --> 00:33:34,370
them whether it's internally developed

00:33:33,020 --> 00:33:37,310
or using it from a third-party

00:33:34,370 --> 00:33:39,410
repository keep up with your containers

00:33:37,310 --> 00:33:41,390
and please don't run production on some

00:33:39,410 --> 00:33:43,040
unsupported platform yes i'm using Bill

00:33:41,390 --> 00:33:46,190
and Ted's Excellent distribution and i

00:33:43,040 --> 00:33:48,380
found this container out it you know Joe

00:33:46,190 --> 00:33:50,110
blows website don't run production like

00:33:48,380 --> 00:33:53,570
that you're going to have a bad day

00:33:50,110 --> 00:33:55,970
eventually so conclusion that's one

00:33:53,570 --> 00:33:58,130
hour's worth of work in 40 minutes 46

00:33:55,970 --> 00:34:00,020
minutes containers are incredibly cool

00:33:58,130 --> 00:34:02,240
it looks to be the wave of the future

00:34:00,020 --> 00:34:03,590
they make application deployment really

00:34:02,240 --> 00:34:05,570
really easy and they leverage some

00:34:03,590 --> 00:34:08,390
incredible capabilities in the linux

00:34:05,570 --> 00:34:10,970
kernel by design they are relatively

00:34:08,390 --> 00:34:12,830
secure but there are some gotchas as

00:34:10,970 --> 00:34:15,500
with every other piece of software out

00:34:12,830 --> 00:34:18,350
there docker does require some care and

00:34:15,500 --> 00:34:20,270
feeding with maintenance container oh

00:34:18,350 --> 00:34:22,250
wow the last line got to chopped off

00:34:20,270 --> 00:34:26,720
containers can be very effective and

00:34:22,250 --> 00:34:28,070
very secure we are way over and I

00:34:26,720 --> 00:34:30,200
apologize for that but I'll definitely

00:34:28,070 --> 00:34:33,880
open it up for any questions and thank

00:34:30,200 --> 00:34:33,880

YouTube URL: https://www.youtube.com/watch?v=TXMQ09r3t4I


