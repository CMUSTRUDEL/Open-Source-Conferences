Title: All Things Open 2015 | William Hoang - Couchbase Inc. | No Bars No Problem!
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,190 --> 00:00:09,809
we'll talk about cash based mobile over

00:00:07,620 --> 00:00:12,090
here at all all things open yesterday

00:00:09,809 --> 00:00:14,160
there was another couchbase talk that

00:00:12,090 --> 00:00:15,900
was more in a no sequel and server-side

00:00:14,160 --> 00:00:19,020
don't know if anyone attended that did

00:00:15,900 --> 00:00:22,140
anyone attend dad just curious one just

00:00:19,020 --> 00:00:24,720
one right perfect so there's not really

00:00:22,140 --> 00:00:27,570
a huge overlap just because the topics

00:00:24,720 --> 00:00:29,189
are different my name is William I am a

00:00:27,570 --> 00:00:32,219
mobile engineer mobile developer

00:00:29,189 --> 00:00:33,570
advocate at couchbase companies based in

00:00:32,219 --> 00:00:35,550
Mountain View I'm nationally based in

00:00:33,570 --> 00:00:37,860
New York my background is I'm the

00:00:35,550 --> 00:00:40,649
electrical engineer did some time in

00:00:37,860 --> 00:00:44,489
McGill University in Canada worked at

00:00:40,649 --> 00:00:46,260
blackberry worked at Microsoft for what

00:00:44,489 --> 00:00:48,539
blackberry only makes one product so

00:00:46,260 --> 00:00:53,070
mobile and Microsoft i was on the

00:00:48,539 --> 00:00:56,550
Windows Phone team for their sdk up to 7

00:00:53,070 --> 00:00:59,309
dot one recently i was at twitter as an

00:00:56,550 --> 00:01:01,379
android sdk engineer and now i'm at

00:00:59,309 --> 00:01:03,320
couchbase so also doing mobile so

00:01:01,379 --> 00:01:05,489
throughout my career it's been mobile

00:01:03,320 --> 00:01:08,760
one time about what bills sequel is

00:01:05,489 --> 00:01:11,280
really quickly for mobile developers

00:01:08,760 --> 00:01:14,159
this is a newer topics or just curious

00:01:11,280 --> 00:01:17,729
show of hands what's anything anyone new

00:01:14,159 --> 00:01:19,530
to know sequel or this is fairly new to

00:01:17,729 --> 00:01:22,350
me even so I started on manga a couple

00:01:19,530 --> 00:01:24,180
years ago and since then never really

00:01:22,350 --> 00:01:26,210
looked back I want to talk about this

00:01:24,180 --> 00:01:27,840
and why it's important for mobile

00:01:26,210 --> 00:01:30,030
basically if you look at the current

00:01:27,840 --> 00:01:32,400
state right now there's a lot of

00:01:30,030 --> 00:01:34,799
interconnected devices you got three

00:01:32,400 --> 00:01:38,150
billion people around the world that's

00:01:34,799 --> 00:01:41,400
hyper-connected they're going through

00:01:38,150 --> 00:01:43,829
mobile devices as their data generation

00:01:41,400 --> 00:01:45,509
from that point and if you look at the

00:01:43,829 --> 00:01:48,720
trend there's a lot of unstructured data

00:01:45,509 --> 00:01:52,259
that's essentially being captured and

00:01:48,720 --> 00:01:54,000
that's essentially growing uncontained

00:01:52,259 --> 00:01:56,009
we so if you think about semi-structured

00:01:54,000 --> 00:01:58,350
data unstructured data one explicit

00:01:56,009 --> 00:02:00,119
intent or check in let's say you do that

00:01:58,350 --> 00:02:03,210
on facebook gets you like 10 data points

00:02:00,119 --> 00:02:05,159
and what's really driving that if you

00:02:03,210 --> 00:02:07,979
look at it the adoption those sequels

00:02:05,159 --> 00:02:11,550
really driven by three major major

00:02:07,979 --> 00:02:13,590
trends in the industry lots of data IOT

00:02:11,550 --> 00:02:15,540
Internet of Things and cloud computing

00:02:13,590 --> 00:02:18,750
so these three things if you look at it

00:02:15,540 --> 00:02:22,440
it's really disrupting the traditional

00:02:18,750 --> 00:02:23,930
data storage stories are DBMS of for

00:02:22,440 --> 00:02:27,569
those who are familiar of backends

00:02:23,930 --> 00:02:29,819
storage and what's the new requirement

00:02:27,569 --> 00:02:31,920
for the current state is you need

00:02:29,819 --> 00:02:34,470
responsive apps responsive user

00:02:31,920 --> 00:02:37,140
experiences you need applications that's

00:02:34,470 --> 00:02:41,340
scale they need to be agile to develop

00:02:37,140 --> 00:02:43,290
and change mobile first your users are

00:02:41,340 --> 00:02:45,060
not just one demographic when one

00:02:43,290 --> 00:02:46,650
geographic they're all distributed

00:02:45,060 --> 00:02:50,400
around the world so your application

00:02:46,650 --> 00:02:52,260
needs a function 24-7 all the time and

00:02:50,400 --> 00:02:55,860
they need to support those concurrent

00:02:52,260 --> 00:02:58,560
use cases and easy to manage right your

00:02:55,860 --> 00:03:01,920
data men your system in do you have to

00:02:58,560 --> 00:03:04,290
basically adjust accordingly to where

00:03:01,920 --> 00:03:06,690
the user demands to the features and all

00:03:04,290 --> 00:03:10,200
that so easy and manage your easy to

00:03:06,690 --> 00:03:11,730
iterate doesn't really fall through when

00:03:10,200 --> 00:03:13,890
you look at something like this so if

00:03:11,730 --> 00:03:17,310
you're familiar with you know UML

00:03:13,890 --> 00:03:20,040
diagram or creating users and their

00:03:17,310 --> 00:03:21,630
properties this is a trivial case where

00:03:20,040 --> 00:03:25,049
you've actually take a pivot point and

00:03:21,630 --> 00:03:27,930
traverse this and hopefully slowly you

00:03:25,049 --> 00:03:30,420
get something out of it but what what

00:03:27,930 --> 00:03:33,510
those sequel is is essentially trying to

00:03:30,420 --> 00:03:35,310
try to flatten that down altogether so

00:03:33,510 --> 00:03:37,319
what you're talking about if you look at

00:03:35,310 --> 00:03:39,060
the previous slide referencing that

00:03:37,319 --> 00:03:41,190
taking two of those tables and

00:03:39,060 --> 00:03:43,859
equivalent it to just a flat JSON file

00:03:41,190 --> 00:03:47,250
just keys and values so you're

00:03:43,859 --> 00:03:51,090
abstracting your sequel statements your

00:03:47,250 --> 00:03:53,370
joins in that regard down to what your

00:03:51,090 --> 00:03:58,410
use cases and how you can abstract that

00:03:53,370 --> 00:04:02,579
in a data modeling scheme so I can

00:03:58,410 --> 00:04:04,739
reference that more in detail in in the

00:04:02,579 --> 00:04:06,959
future slides that's coming up but

00:04:04,739 --> 00:04:08,790
essentially where if you look at what

00:04:06,959 --> 00:04:10,980
was before traditionally how to look at

00:04:08,790 --> 00:04:12,750
what those pivot points are essentially

00:04:10,980 --> 00:04:15,389
is now just flattening it down and just

00:04:12,750 --> 00:04:16,650
pulling out the values that you need and

00:04:15,389 --> 00:04:18,269
you can have nested values all together

00:04:16,650 --> 00:04:20,280
so if you look at it from that

00:04:18,269 --> 00:04:23,250
perspective a document database can

00:04:20,280 --> 00:04:25,380
store basically an entire object in a

00:04:23,250 --> 00:04:27,120
single JSON document so from mobiles

00:04:25,380 --> 00:04:29,280
perspective for I lt's perspect

00:04:27,120 --> 00:04:33,210
for unstructured data perspective all

00:04:29,280 --> 00:04:35,400
dad is super fast super quick who is

00:04:33,210 --> 00:04:37,919
couchbase pretty much a leader in

00:04:35,400 --> 00:04:40,080
performance and scalability from a

00:04:37,919 --> 00:04:43,080
mobile developer standpoint when I came

00:04:40,080 --> 00:04:45,210
enjoying couchbase it was definitely new

00:04:43,080 --> 00:04:47,100
database is not something mobile

00:04:45,210 --> 00:04:50,160
engineers and developers think always on

00:04:47,100 --> 00:04:52,410
their heads but essentially a crucial

00:04:50,160 --> 00:04:56,400
piece I want to talk about how that came

00:04:52,410 --> 00:04:59,699
about at a glance couchbase is 4x growth

00:04:56,400 --> 00:05:02,820
in 2013 it's one of the leading growth

00:04:59,699 --> 00:05:04,770
companies in a no sequel space we're

00:05:02,820 --> 00:05:06,660
focused on enterprise as well as

00:05:04,770 --> 00:05:09,050
grassroot developers so myself I'm a

00:05:06,660 --> 00:05:12,360
mobile engineer developer so I focus on

00:05:09,050 --> 00:05:15,090
the adoption for grass troop developers

00:05:12,360 --> 00:05:18,570
as well as bring the awareness and use

00:05:15,090 --> 00:05:22,530
cases across all the different developer

00:05:18,570 --> 00:05:26,270
personas so it's definitely in the wild

00:05:22,530 --> 00:05:29,490
it's GA across companies like Disney

00:05:26,270 --> 00:05:33,630
ebay paypal viber viber switch from

00:05:29,490 --> 00:05:35,780
Mungo 22 couchbase it's really cool it's

00:05:33,630 --> 00:05:38,880
based on the Apache to license models so

00:05:35,780 --> 00:05:43,940
essentially our sole revenue stream is

00:05:38,880 --> 00:05:47,490
support the outside the infancy of

00:05:43,940 --> 00:05:49,979
couchbase so it came from CouchDB socal

00:05:47,490 --> 00:05:52,280
CTB was forked from there's now since

00:05:49,979 --> 00:05:55,139
two separate open source projects

00:05:52,280 --> 00:05:59,550
Cloudant is another solution that got

00:05:55,139 --> 00:06:01,800
fort from CouchDB IBM that's an IBM

00:05:59,550 --> 00:06:03,900
solution and there's a bunch of others

00:06:01,800 --> 00:06:06,599
I'm not going to go into detail with of

00:06:03,900 --> 00:06:08,610
what no sequel is there's four major

00:06:06,599 --> 00:06:11,699
ones column days value-based

00:06:08,610 --> 00:06:13,410
document-based graph base for us cash

00:06:11,699 --> 00:06:15,930
basis of document orientated database

00:06:13,410 --> 00:06:17,490
and there's probably there's a couple

00:06:15,930 --> 00:06:19,830
more is for those are the four major

00:06:17,490 --> 00:06:21,990
ones there's more than just four but

00:06:19,830 --> 00:06:25,050
couchbase mobile it's essentially an

00:06:21,990 --> 00:06:27,930
embedded JSON database that's living on

00:06:25,050 --> 00:06:30,570
your device desktop mobile devices but

00:06:27,930 --> 00:06:32,010
even before dad what's what's the use

00:06:30,570 --> 00:06:33,389
case for business problem I want to

00:06:32,010 --> 00:06:36,750
describe what this is because there's a

00:06:33,389 --> 00:06:39,300
lot of great tech out there but there's

00:06:36,750 --> 00:06:40,710
always a need to solve a problem so the

00:06:39,300 --> 00:06:43,110
technology that we want to

00:06:40,710 --> 00:06:45,480
deuce needs to solve a current use case

00:06:43,110 --> 00:06:47,810
and current problem I want to explore it

00:06:45,480 --> 00:06:50,520
out a bit so if you look at today's

00:06:47,810 --> 00:06:53,040
application traditionally you probably

00:06:50,520 --> 00:06:55,350
work with a product designer so on that

00:06:53,040 --> 00:06:57,660
wire frames and you're designing for the

00:06:55,350 --> 00:06:59,550
best use case right you probably go into

00:06:57,660 --> 00:07:01,020
the room you probably do your due

00:06:59,550 --> 00:07:03,210
diligence looking at all the

00:07:01,020 --> 00:07:05,310
applications across the industry and in

00:07:03,210 --> 00:07:07,770
your vertical looking at what those cool

00:07:05,310 --> 00:07:09,840
user experiences are and you just wire

00:07:07,770 --> 00:07:11,520
frame it first probably or you list out

00:07:09,840 --> 00:07:14,000
a bunch of features and try to squeeze

00:07:11,520 --> 00:07:17,010
it all into one frame or a couple frames

00:07:14,000 --> 00:07:19,710
so basically what I'm trying to say here

00:07:17,010 --> 00:07:22,440
is that those are perfect if you have a

00:07:19,710 --> 00:07:24,750
network connection essentially we are

00:07:22,440 --> 00:07:27,440
all relying on content without any

00:07:24,750 --> 00:07:32,490
Content the mobile application simply is

00:07:27,440 --> 00:07:34,380
at bose just a shell but that content is

00:07:32,490 --> 00:07:38,490
heavily reliant on network network

00:07:34,380 --> 00:07:41,210
connectivity if you ever go to York City

00:07:38,490 --> 00:07:45,150
or baseball stadiums football stadiums

00:07:41,210 --> 00:07:47,160
era airplanes for example you probably

00:07:45,150 --> 00:07:48,750
experienced something like this network

00:07:47,160 --> 00:07:51,450
congestion could be one reason another

00:07:48,750 --> 00:07:53,130
reason could just be simply your server

00:07:51,450 --> 00:07:55,110
might be down right the content that

00:07:53,130 --> 00:07:58,260
you're trying to fetch for can't be

00:07:55,110 --> 00:08:00,690
retrieved essentially from a mobile app

00:07:58,260 --> 00:08:05,640
perspective developers side we're always

00:08:00,690 --> 00:08:07,980
focused on creating you know how to how

00:08:05,640 --> 00:08:10,530
does cash or resources what's the best

00:08:07,980 --> 00:08:13,350
way to kind of put in that UI view is

00:08:10,530 --> 00:08:14,940
etc but content wise we're all really

00:08:13,350 --> 00:08:18,930
just doing a get request we're doing

00:08:14,940 --> 00:08:21,810
HTTP GET request or postgres back up to

00:08:18,930 --> 00:08:23,520
a server and at most you might

00:08:21,810 --> 00:08:24,750
experience some latency like this but

00:08:23,520 --> 00:08:27,360
the worst experience would be something

00:08:24,750 --> 00:08:29,190
like this right please try again the app

00:08:27,360 --> 00:08:31,950
doesn't work and it's really frustrating

00:08:29,190 --> 00:08:33,870
just because the users are not in

00:08:31,950 --> 00:08:35,430
control for something of this sort right

00:08:33,870 --> 00:08:38,610
all they can do is sit there and wait

00:08:35,430 --> 00:08:40,950
you can't you can't basically store

00:08:38,610 --> 00:08:44,730
anything that the user has done let's

00:08:40,950 --> 00:08:47,100
say that say they wrote a comment in the

00:08:44,730 --> 00:08:48,600
comment box if they took a picture they

00:08:47,100 --> 00:08:50,640
can't even cash that or store that

00:08:48,600 --> 00:08:52,980
essentially they're relying on this

00:08:50,640 --> 00:08:53,400
experience of having that internet

00:08:52,980 --> 00:08:57,060
connect

00:08:53,400 --> 00:08:59,310
so the unfortunately the unfortunate

00:08:57,060 --> 00:09:01,860
part and reality of things is that users

00:08:59,310 --> 00:09:03,930
are not typically engineers or have the

00:09:01,860 --> 00:09:05,970
patience what they do is to go to the

00:09:03,930 --> 00:09:08,760
App Store and it completely rip you

00:09:05,970 --> 00:09:11,090
apart they give you a bad rating they

00:09:08,760 --> 00:09:13,350
talk about how the applications are

00:09:11,090 --> 00:09:14,700
unfortunately not functioning when it

00:09:13,350 --> 00:09:17,640
actually does work but it's actually

00:09:14,700 --> 00:09:19,050
dependent on a network connection but

00:09:17,640 --> 00:09:20,820
essentially from experience that this

00:09:19,050 --> 00:09:24,270
happens you might as well take it down

00:09:20,820 --> 00:09:26,640
and rebranded all together it just hurts

00:09:24,270 --> 00:09:29,610
discoverability but if you look at a

00:09:26,640 --> 00:09:32,220
graph of what this problem is those

00:09:29,610 --> 00:09:37,320
three major areas of contribution why

00:09:32,220 --> 00:09:39,000
something of this sort is why people

00:09:37,320 --> 00:09:40,080
complain about your application if you

00:09:39,000 --> 00:09:43,260
look at it from the App Store's

00:09:40,080 --> 00:09:45,960
perspective is related to app freezing

00:09:43,260 --> 00:09:47,940
at crashing and slow responsiveness so

00:09:45,960 --> 00:09:50,850
all these things are something as a

00:09:47,940 --> 00:09:52,710
designer app designer engineer you can

00:09:50,850 --> 00:09:54,540
kind of a tribute for these are all

00:09:52,710 --> 00:09:57,180
common things thats related to the app

00:09:54,540 --> 00:10:00,210
basically not dealing with a connection

00:09:57,180 --> 00:10:02,940
or not having a connection if you look

00:10:00,210 --> 00:10:05,370
at problem of the space is actually very

00:10:02,940 --> 00:10:07,350
simple it's the data location that's

00:10:05,370 --> 00:10:09,000
where the problem is right the location

00:10:07,350 --> 00:10:11,670
somewhere else in a third-party server

00:10:09,000 --> 00:10:13,560
you have no control of it you don't

00:10:11,670 --> 00:10:15,510
probably don't even have a local copy of

00:10:13,560 --> 00:10:18,060
it and you're just needing to do that

00:10:15,510 --> 00:10:19,890
fetch for it it's unfortunate because

00:10:18,060 --> 00:10:22,350
let's say the person sitting next to you

00:10:19,890 --> 00:10:24,840
even has that particular file you can't

00:10:22,350 --> 00:10:27,120
even just you know us be transferred

00:10:24,840 --> 00:10:28,830
back in the days or just poke the person

00:10:27,120 --> 00:10:31,380
transfer you have to go up the wire and

00:10:28,830 --> 00:10:32,640
back down again so the location is a

00:10:31,380 --> 00:10:34,200
problem but the solution is really a

00:10:32,640 --> 00:10:36,300
hybrid solution the solution is really

00:10:34,200 --> 00:10:38,760
where you think about why can't you do

00:10:36,300 --> 00:10:40,920
all your crud operations your create to

00:10:38,760 --> 00:10:43,230
retrieve your update to deletes do that

00:10:40,920 --> 00:10:45,570
all locally on your device and then when

00:10:43,230 --> 00:10:48,450
you have a connection or when you do

00:10:45,570 --> 00:10:50,340
want to sync not always immediately sink

00:10:48,450 --> 00:10:53,550
that up accordingly so it's really a

00:10:50,340 --> 00:10:55,500
hybrid solution where do everything

00:10:53,550 --> 00:10:59,190
local because that's the fastest rights

00:10:55,500 --> 00:11:02,280
and fastest reads and accordingly when

00:10:59,190 --> 00:11:05,220
you have that opportunity go up the wire

00:11:02,280 --> 00:11:07,190
sync it up accordingly and what that

00:11:05,220 --> 00:11:10,100
really translates to is no

00:11:07,190 --> 00:11:12,350
hang weight indicator but from a user's

00:11:10,100 --> 00:11:14,810
perspective what they feel is hey your

00:11:12,350 --> 00:11:16,190
apps works really fast right I've seen

00:11:14,810 --> 00:11:18,560
people on an airplane that you've

00:11:16,190 --> 00:11:22,430
actually opened Instagram and tried to

00:11:18,560 --> 00:11:24,530
click on things right there their

00:11:22,430 --> 00:11:26,330
mindset is not based on network

00:11:24,530 --> 00:11:29,210
connection there's like oh I have a bar

00:11:26,330 --> 00:11:31,700
a bar means I'm connected it's not like

00:11:29,210 --> 00:11:34,490
that your apps supposedly work really

00:11:31,700 --> 00:11:38,360
really fast let's say a 2035 megabyte

00:11:34,490 --> 00:11:40,940
let's say HD picture if you they press

00:11:38,360 --> 00:11:42,650
send everything goes through well from

00:11:40,940 --> 00:11:43,880
their perspective it's a tradition it's

00:11:42,650 --> 00:11:46,160
actually just written to a local

00:11:43,880 --> 00:11:49,490
database it's fast from a user's

00:11:46,160 --> 00:11:50,900
perspective less code I think that's a

00:11:49,490 --> 00:11:53,240
technical engineering debt that's

00:11:50,900 --> 00:11:56,540
everyone appreciates essentially all

00:11:53,240 --> 00:11:58,400
that replication code is offset to a

00:11:56,540 --> 00:12:00,140
library called couchbase light and

00:11:58,400 --> 00:12:01,970
people love your abs your ratings would

00:12:00,140 --> 00:12:04,990
definitely be better than two star

00:12:01,970 --> 00:12:08,570
rating so this is some of the high-level

00:12:04,990 --> 00:12:11,330
issues I think we immediately resolve

00:12:08,570 --> 00:12:13,220
the the problem with not having

00:12:11,330 --> 00:12:14,990
connection a problem with not having

00:12:13,220 --> 00:12:17,150
connection and not having connection

00:12:14,990 --> 00:12:19,310
means not having an experience people

00:12:17,150 --> 00:12:21,500
always talk about offline is an

00:12:19,310 --> 00:12:24,080
afterthought because you talk about well

00:12:21,500 --> 00:12:26,330
you have a certain time to develop an

00:12:24,080 --> 00:12:28,970
application develop the features for it

00:12:26,330 --> 00:12:30,890
develop the experience for it offline is

00:12:28,970 --> 00:12:32,060
not really part of that conversation but

00:12:30,890 --> 00:12:34,460
the way I see it is actually very

00:12:32,060 --> 00:12:36,440
different the way I see it is offline is

00:12:34,460 --> 00:12:38,600
a feature it's a feature that enables

00:12:36,440 --> 00:12:40,930
everything else to happen because let's

00:12:38,600 --> 00:12:43,910
say you talk about oh I want a map

00:12:40,930 --> 00:12:46,400
feature inside my app well if you don't

00:12:43,910 --> 00:12:48,650
have offline support then technically

00:12:46,400 --> 00:12:50,600
GPS is always on but your pictures your

00:12:48,650 --> 00:12:52,250
map it doesn't render because you're

00:12:50,600 --> 00:12:55,339
fetching it trying to get that picture

00:12:52,250 --> 00:12:57,680
well off line is that feature that

00:12:55,339 --> 00:13:00,530
enables everything else to happen so the

00:12:57,680 --> 00:13:02,240
way I all honestly look at it from a

00:13:00,530 --> 00:13:04,070
global perspective is if you just have

00:13:02,240 --> 00:13:07,130
that piece everything else just comes

00:13:04,070 --> 00:13:08,960
much more easier what does cash waves

00:13:07,130 --> 00:13:11,620
mobile understanding problem how do we

00:13:08,960 --> 00:13:14,780
attempt to solve it this is the solution

00:13:11,620 --> 00:13:17,089
it comes with two parts couchbase mobile

00:13:14,780 --> 00:13:18,560
is actually three parts if you think

00:13:17,089 --> 00:13:20,070
about it there's a server piece that

00:13:18,560 --> 00:13:22,470
lives in a cloud

00:13:20,070 --> 00:13:25,230
that's not somewhat related to mobile

00:13:22,470 --> 00:13:28,050
the mobile focus that's something where

00:13:25,230 --> 00:13:29,820
once the the local stuff is done you

00:13:28,050 --> 00:13:31,610
basically push it up to a couchbase

00:13:29,820 --> 00:13:33,990
server which was yesterday's talk

00:13:31,610 --> 00:13:35,610
casually its mobile like I mentioned you

00:13:33,990 --> 00:13:37,770
have to cash based like part which is

00:13:35,610 --> 00:13:40,440
simply a library framework that lives

00:13:37,770 --> 00:13:43,350
inside of your project the sink gateway

00:13:40,440 --> 00:13:47,760
piece is what sits between your client

00:13:43,350 --> 00:13:50,070
your mobile device and between that and

00:13:47,760 --> 00:13:52,020
the cache based server you have the data

00:13:50,070 --> 00:13:55,530
piece data orchestration piece constant

00:13:52,020 --> 00:13:57,900
gateway these two make up the focus for

00:13:55,530 --> 00:14:01,230
4 from mobile developers and mobile

00:13:57,900 --> 00:14:02,550
engineers it runs them process talk

00:14:01,230 --> 00:14:05,370
about some of the features really

00:14:02,550 --> 00:14:07,350
quickly run some process we're talking

00:14:05,370 --> 00:14:11,670
about those sequel mobile database so

00:14:07,350 --> 00:14:14,010
it's just a JSON JSON flat file about

00:14:11,670 --> 00:14:16,380
five hundred kilobytes for iOS it's

00:14:14,010 --> 00:14:19,740
about six hundred kilobytes for for

00:14:16,380 --> 00:14:21,660
Android and talking about some of the

00:14:19,740 --> 00:14:24,570
features before I go on to a small demo

00:14:21,660 --> 00:14:25,950
it's a document documented orientated

00:14:24,570 --> 00:14:29,790
database so that's why I mentioned that

00:14:25,950 --> 00:14:32,250
earlier on about mill sequel it provides

00:14:29,790 --> 00:14:34,680
you with MapReduce for querying and

00:14:32,250 --> 00:14:36,360
provides you with event notification out

00:14:34,680 --> 00:14:39,750
right so essentially you're writing

00:14:36,360 --> 00:14:41,880
ui/ux code here and one of coolest parts

00:14:39,750 --> 00:14:45,090
when the feature i think is the crown

00:14:41,880 --> 00:14:46,770
jewel of it all is sink or engineering

00:14:45,090 --> 00:14:49,110
terms its master master replication

00:14:46,770 --> 00:14:51,720
there's no concept of primary secondary

00:14:49,110 --> 00:14:53,970
or slave or master you eventually have

00:14:51,720 --> 00:14:57,620
consistency across all your client

00:14:53,970 --> 00:15:00,360
devices so I'll show down also in a demo

00:14:57,620 --> 00:15:02,330
the document-oriented database part

00:15:00,360 --> 00:15:06,030
we're talking about keys and values that

00:15:02,330 --> 00:15:08,640
incorporates versioning so for us and

00:15:06,030 --> 00:15:11,940
anytime you do a crud operation we keep

00:15:08,640 --> 00:15:14,370
a revision history of that it's scheme

00:15:11,940 --> 00:15:18,210
allah so hence we talked about JSON and

00:15:14,370 --> 00:15:20,160
and keys and values and because of that

00:15:18,210 --> 00:15:22,380
you can code fast right if things change

00:15:20,160 --> 00:15:24,600
a particular property changes on a

00:15:22,380 --> 00:15:26,760
particular user introduce something take

00:15:24,600 --> 00:15:29,550
something else it's really easy so for

00:15:26,760 --> 00:15:31,260
example like over here I don't have to

00:15:29,550 --> 00:15:32,640
think oh which table doesn't belong with

00:15:31,260 --> 00:15:33,430
oh if it belongs to that table

00:15:32,640 --> 00:15:36,700
thereafter

00:15:33,430 --> 00:15:39,310
pivot and that join essentially yeah if

00:15:36,700 --> 00:15:41,170
I have a particular room now in this

00:15:39,310 --> 00:15:44,200
it's wrong it's actually it's actually

00:15:41,170 --> 00:15:46,149
three l6a right I just go in and change

00:15:44,200 --> 00:15:48,580
that i can introduce another property i

00:15:46,149 --> 00:15:50,680
can have nested property i living I'm

00:15:48,580 --> 00:15:52,600
living in New York previously living in

00:15:50,680 --> 00:15:54,790
Montreal but I actually lived in Seattle

00:15:52,600 --> 00:15:58,420
too so just go in there and put another

00:15:54,790 --> 00:16:00,070
location so you can have nested nested

00:15:58,420 --> 00:16:02,110
values as well and this is this entire

00:16:00,070 --> 00:16:04,480
thing is your object right so I can

00:16:02,110 --> 00:16:07,750
basically query for type if type is

00:16:04,480 --> 00:16:10,360
session underscore 01 I can retrieve my

00:16:07,750 --> 00:16:13,180
entire object they're all that session

00:16:10,360 --> 00:16:15,220
property if it's not trying to find out

00:16:13,180 --> 00:16:17,760
what did what am I looking for would

00:16:15,220 --> 00:16:20,170
just pass on instead of doing all the

00:16:17,760 --> 00:16:22,959
operations like the sequel operation so

00:16:20,170 --> 00:16:25,029
it's really fast how do we do our

00:16:22,959 --> 00:16:27,310
queries we can talk about this in detail

00:16:25,029 --> 00:16:28,480
but basically you're basically excuse me

00:16:27,310 --> 00:16:33,010
basically you're building your index

00:16:28,480 --> 00:16:34,810
using a MapReduce and from then if your

00:16:33,010 --> 00:16:37,390
index or change accordingly you can

00:16:34,810 --> 00:16:39,459
rebuild it again but results are

00:16:37,390 --> 00:16:41,920
basically persisted for fast query now

00:16:39,459 --> 00:16:43,690
once you build it it's really fast free

00:16:41,920 --> 00:16:46,600
to retrieve anything you're looking for

00:16:43,690 --> 00:16:48,520
and it's also cool because you don't

00:16:46,600 --> 00:16:51,330
have to go to another application it's

00:16:48,520 --> 00:16:54,100
only setting breakpoints in your IDE

00:16:51,330 --> 00:16:56,709
change notifications this is really neat

00:16:54,100 --> 00:16:58,900
you can basically listen observe for

00:16:56,709 --> 00:17:01,209
changes in multiple areas in your

00:16:58,900 --> 00:17:03,250
database level in a query level you can

00:17:01,209 --> 00:17:06,339
do it even down it down to your document

00:17:03,250 --> 00:17:08,589
level and it cuts down a lot of code

00:17:06,339 --> 00:17:10,230
cuts down a lot of cruft code because

00:17:08,589 --> 00:17:12,839
essentially what you're doing is you're

00:17:10,230 --> 00:17:15,040
listening for these callbacks and

00:17:12,839 --> 00:17:16,990
essentially if something changes

00:17:15,040 --> 00:17:19,630
accordingly you can render it on your UI

00:17:16,990 --> 00:17:22,030
thread and you don't have to always be

00:17:19,630 --> 00:17:23,679
pulling of course you can there is none

00:17:22,030 --> 00:17:26,490
option but this is something where you

00:17:23,679 --> 00:17:29,020
can also save a lot of resource and

00:17:26,490 --> 00:17:30,550
think the crown jewel of it all when we

00:17:29,020 --> 00:17:33,610
talk about sync we talk about master

00:17:30,550 --> 00:17:35,650
master replication this also deals with

00:17:33,610 --> 00:17:38,380
conflict so you can also do continuous

00:17:35,650 --> 00:17:40,570
sinking or ad hoc sync ad hoc sync means

00:17:38,380 --> 00:17:44,050
you can attach this to a particular

00:17:40,570 --> 00:17:46,030
intent so let's say on app exit you can

00:17:44,050 --> 00:17:47,210
push all your data that's local to your

00:17:46,030 --> 00:17:50,840
device to the cloud

00:17:47,210 --> 00:17:52,850
on apps start you can do a poll of it or

00:17:50,840 --> 00:17:56,299
for example if there's a change

00:17:52,850 --> 00:17:58,640
accordingly you can particular pick an

00:17:56,299 --> 00:18:00,409
instance of it or time to do all that

00:17:58,640 --> 00:18:02,320
sinking or you can do it like like a

00:18:00,409 --> 00:18:08,270
chat application that's continuously

00:18:02,320 --> 00:18:10,549
listening and open where is this

00:18:08,270 --> 00:18:14,179
available um they even works on

00:18:10,549 --> 00:18:15,919
blackberry so got cocoapods if your iOS

00:18:14,179 --> 00:18:19,100
developer maven central if you're doing

00:18:15,919 --> 00:18:21,049
Android do get if you're doing dotnet we

00:18:19,100 --> 00:18:25,220
support for dotnet runtime that's mono

00:18:21,049 --> 00:18:30,350
xamarin microsoft net i can't remember

00:18:25,220 --> 00:18:32,630
the next one I'll remember pop in and of

00:18:30,350 --> 00:18:34,190
course we're at all things open so if

00:18:32,630 --> 00:18:36,830
you really want to build from source the

00:18:34,190 --> 00:18:38,390
complete stack is on github we actually

00:18:36,830 --> 00:18:41,840
have community pull request that comes

00:18:38,390 --> 00:18:46,789
in and we review that as well oh the

00:18:41,840 --> 00:18:49,070
fourth one is its unity so yeah it's

00:18:46,789 --> 00:18:52,850
it's across the stack there's also this

00:18:49,070 --> 00:18:54,260
particular feature pal should he be so

00:18:52,850 --> 00:18:56,840
if you're not familiar it's an open

00:18:54,260 --> 00:19:00,470
source JavaScript database it's inspired

00:18:56,840 --> 00:19:03,169
by pouchy CouchDB let's design basically

00:19:00,470 --> 00:19:05,299
run within the browser they basically

00:19:03,169 --> 00:19:08,270
fort the sink gateway piece that does

00:19:05,299 --> 00:19:11,990
the sinking so essentially couchdb is

00:19:08,270 --> 00:19:15,260
our somewhat of a javascript solution

00:19:11,990 --> 00:19:20,990
that would sync up according to a couch

00:19:15,260 --> 00:19:23,450
base platform on the couch base server

00:19:20,990 --> 00:19:24,919
side there's pretty much a lot of

00:19:23,450 --> 00:19:28,520
different flavors you can think of or

00:19:24,919 --> 00:19:30,919
choose from so this is outside mobile of

00:19:28,520 --> 00:19:32,210
course I put some mobile in there you

00:19:30,919 --> 00:19:33,380
have different frameworks all the

00:19:32,210 --> 00:19:36,590
different language supports on the

00:19:33,380 --> 00:19:39,860
server side different platforms and

00:19:36,590 --> 00:19:41,809
infrastructures big base on that you can

00:19:39,860 --> 00:19:43,730
basically run a lot of the cool

00:19:41,809 --> 00:19:46,039
analytics right you probably seen some

00:19:43,730 --> 00:19:48,110
of the talks here so even though mobile

00:19:46,039 --> 00:19:50,090
you front end to ended with a mobile

00:19:48,110 --> 00:19:53,360
solution it does offline database is on

00:19:50,090 --> 00:19:55,230
the back end it's no it's no it's no

00:19:53,360 --> 00:19:57,570
joke also it's a it's

00:19:55,230 --> 00:19:59,940
technology that's been proven and used

00:19:57,570 --> 00:20:02,970
by industry leaders like Apple ebay

00:19:59,940 --> 00:20:05,220
paypal that's basically supporting all

00:20:02,970 --> 00:20:07,080
the concurrent users in a no sequel

00:20:05,220 --> 00:20:09,570
setting I want to talk about sync

00:20:07,080 --> 00:20:10,980
gateway as well here what is think

00:20:09,570 --> 00:20:13,250
gateway is the piece that does your

00:20:10,980 --> 00:20:15,929
authentication or authorization

00:20:13,250 --> 00:20:18,660
basically determines who gets what data

00:20:15,929 --> 00:20:20,280
when do they get it it's essentially a

00:20:18,660 --> 00:20:21,870
JavaScript function you right at the

00:20:20,280 --> 00:20:24,090
heart of sync gateway it's really just a

00:20:21,870 --> 00:20:25,950
JavaScript function in the end what this

00:20:24,090 --> 00:20:28,500
looks like in the entire stack let's

00:20:25,950 --> 00:20:30,929
bring it into into into some closure

00:20:28,500 --> 00:20:33,000
here you got your left hand side there

00:20:30,929 --> 00:20:34,950
which is your project your application

00:20:33,000 --> 00:20:38,370
that has calculates light you bring that

00:20:34,950 --> 00:20:41,790
into your xcode or IDE it's a framework

00:20:38,370 --> 00:20:43,380
you reference and then you have on the

00:20:41,790 --> 00:20:45,270
right hand side you have calculate

00:20:43,380 --> 00:20:47,309
server so in the demo I'm going to show

00:20:45,270 --> 00:20:49,679
the cash my servers just local to my

00:20:47,309 --> 00:20:51,860
device its local hosted but we don't do

00:20:49,679 --> 00:20:54,450
the host thing so you can put it on any

00:20:51,860 --> 00:20:56,070
host that you like so i have one

00:20:54,450 --> 00:20:58,140
personally on digital ocean i have

00:20:56,070 --> 00:20:59,669
another on AWS but essentially the

00:20:58,140 --> 00:21:02,900
middle piece i was talking about does

00:20:59,669 --> 00:21:07,620
the sinking accordingly you basically

00:21:02,900 --> 00:21:10,380
right in your IDE you basically point a

00:21:07,620 --> 00:21:12,690
particular object that you want to sync

00:21:10,380 --> 00:21:14,250
to to endpoint a URL endpoint that's on

00:21:12,690 --> 00:21:16,200
your server side and it would do all

00:21:14,250 --> 00:21:17,700
that thinking for you so that's all

00:21:16,200 --> 00:21:20,340
taken care of this is the this is the

00:21:17,700 --> 00:21:22,290
couch based mobile stack the focus of

00:21:20,340 --> 00:21:26,790
course is calculates light and st.

00:21:22,290 --> 00:21:28,620
gateway how you do some of the reeds we

00:21:26,790 --> 00:21:30,600
have a feature called channels so

00:21:28,620 --> 00:21:32,910
essentially you would basically group

00:21:30,600 --> 00:21:36,419
users or group categories and give

00:21:32,910 --> 00:21:38,880
access to those particular categories

00:21:36,419 --> 00:21:40,260
think of it like a freeway when Lane is

00:21:38,880 --> 00:21:42,120
for something the other lanes for

00:21:40,260 --> 00:21:44,520
something else so just how you can do

00:21:42,120 --> 00:21:47,669
some of the data orchestration pieces as

00:21:44,520 --> 00:21:50,490
well something I won't be showing today

00:21:47,669 --> 00:21:53,370
but it's a feature within the calculates

00:21:50,490 --> 00:21:55,020
light library framework is that we

00:21:53,370 --> 00:21:56,700
support peer-to-peer so we're

00:21:55,020 --> 00:21:58,290
traditionally familiar with having the

00:21:56,700 --> 00:22:01,260
architecture on the left hand side there

00:21:58,290 --> 00:22:01,760
where you have essentially a parent and

00:22:01,260 --> 00:22:04,640
you have

00:22:01,760 --> 00:22:06,740
or child and he has to go up up the

00:22:04,640 --> 00:22:08,650
chain up to the parent node and down the

00:22:06,740 --> 00:22:11,630
wire again Pierre Pierre essentially

00:22:08,650 --> 00:22:14,360
with cash-based light there is a simple

00:22:11,630 --> 00:22:16,250
HTTP server embedded in the framework so

00:22:14,360 --> 00:22:17,930
essentially you can leverage the same

00:22:16,250 --> 00:22:20,780
network and you can transfer data

00:22:17,930 --> 00:22:22,430
accordingly without distracting out the

00:22:20,780 --> 00:22:24,680
server all together of course if you

00:22:22,430 --> 00:22:26,330
wanted then after a transfer for example

00:22:24,680 --> 00:22:28,190
you're an airplane you want to do a

00:22:26,330 --> 00:22:29,690
transfer per person next to that's

00:22:28,190 --> 00:22:31,550
something like peer-to-peer that you can

00:22:29,690 --> 00:22:33,560
leverage and then we're off the plane

00:22:31,550 --> 00:22:39,530
both of you or one of you can sync up to

00:22:33,560 --> 00:22:41,210
so the source of truth so to say so what

00:22:39,530 --> 00:22:43,310
that means peer-to-peer we can basically

00:22:41,210 --> 00:22:45,800
create some really cool mesh networks

00:22:43,310 --> 00:22:47,270
mmm so we're familiar if the star

00:22:45,800 --> 00:22:51,140
network when one node goes down

00:22:47,270 --> 00:22:53,450
typically you have failure to ring

00:22:51,140 --> 00:22:56,000
network of course it's bit better but

00:22:53,450 --> 00:22:57,830
the same time there is that opportunity

00:22:56,000 --> 00:22:59,930
for failure or no experience and

00:22:57,830 --> 00:23:01,520
peer-to-peer is dealing with fully

00:22:59,930 --> 00:23:03,740
connected network so if you think of it

00:23:01,520 --> 00:23:06,560
like in a baseball stadium if somebody

00:23:03,740 --> 00:23:07,850
next to you it has the content that

00:23:06,560 --> 00:23:10,070
you're looking for as well you don't

00:23:07,850 --> 00:23:11,480
have to go up the wire to do I get or

00:23:10,070 --> 00:23:12,890
the server doesn't need to be

00:23:11,480 --> 00:23:14,840
broadcasting push this down there

00:23:12,890 --> 00:23:16,610
somebody next to you has it they can

00:23:14,840 --> 00:23:18,560
basically populate everyone around you

00:23:16,610 --> 00:23:21,470
so this is what a mesh network and

00:23:18,560 --> 00:23:24,110
peer-to-peer opportunity enables with

00:23:21,470 --> 00:23:29,810
the trends of mobile and IOT and that

00:23:24,110 --> 00:23:31,670
experience cash-based mobile there's a

00:23:29,810 --> 00:23:34,070
lot of apps that's out there is using a

00:23:31,670 --> 00:23:35,720
red nail I can't I can go on with more

00:23:34,070 --> 00:23:40,610
than just this page but want to maybe

00:23:35,720 --> 00:23:44,960
show you what ryanair did with cash

00:23:40,610 --> 00:23:47,260
based mobile on top against this this is

00:23:44,960 --> 00:23:51,580
a local video so should it be should

00:23:47,260 --> 00:23:51,580
load fast

00:23:58,070 --> 00:24:08,120
I see the spinner on my screen all right

00:24:05,960 --> 00:24:10,160
so talk against this I hope everyone can

00:24:08,120 --> 00:24:12,140
see so on the left-hand side you have

00:24:10,160 --> 00:24:15,650
ryanair which is a travel application

00:24:12,140 --> 00:24:18,170
that pretty much didn't have any local

00:24:15,650 --> 00:24:20,330
database involved on the right hand side

00:24:18,170 --> 00:24:23,690
they've retrofitted with couchbase light

00:24:20,330 --> 00:24:25,550
so in I think two months time to three

00:24:23,690 --> 00:24:29,060
months time frame they basically made a

00:24:25,550 --> 00:24:30,980
app update and you can see how the

00:24:29,060 --> 00:24:35,480
bottom line there is this transition

00:24:30,980 --> 00:24:38,330
piece on how based on time series where

00:24:35,480 --> 00:24:42,200
they are in their application process or

00:24:38,330 --> 00:24:43,610
progress so ryanair basically half

00:24:42,200 --> 00:24:46,490
couchbase light here this is not even

00:24:43,610 --> 00:24:49,550
going up the wire to sink and you can

00:24:46,490 --> 00:24:51,830
see how slow the left-hand side is and

00:24:49,550 --> 00:24:54,290
how quick on the right-hand side with

00:24:51,830 --> 00:24:56,720
basic like image already cached and

00:24:54,290 --> 00:24:59,270
already data points persisted locally

00:24:56,720 --> 00:25:01,400
they can just pull that up accordingly

00:24:59,270 --> 00:25:03,380
versus on the left-hand side they're

00:25:01,400 --> 00:25:05,750
basically going up the wire to basically

00:25:03,380 --> 00:25:08,300
get all the data information like for

00:25:05,750 --> 00:25:11,300
example you see the plane status right

00:25:08,300 --> 00:25:13,640
like the price is the location and at

00:25:11,300 --> 00:25:15,860
the same time on a right hand side the

00:25:13,640 --> 00:25:18,650
same time they're already entering I

00:25:15,860 --> 00:25:21,250
think trying to order the plane ticket

00:25:18,650 --> 00:25:23,960
trying to put in user information so

00:25:21,250 --> 00:25:25,970
what's really neat is also you can see

00:25:23,960 --> 00:25:28,550
immediate user feedback I think in their

00:25:25,970 --> 00:25:31,130
app store people were taught so saying

00:25:28,550 --> 00:25:34,700
well you're AB really improved like it's

00:25:31,130 --> 00:25:36,560
it's not like that before and this is

00:25:34,700 --> 00:25:39,320
actually very simple for them they just

00:25:36,560 --> 00:25:42,200
retrofit it with the local database and

00:25:39,320 --> 00:25:44,240
you can see the poor experience they

00:25:42,200 --> 00:25:46,160
have before and if let's say your app

00:25:44,240 --> 00:25:48,350
crashes or they exit the application

00:25:46,160 --> 00:25:49,880
none of that data point is persistent

00:25:48,350 --> 00:25:52,100
they have to start over again versus on

00:25:49,880 --> 00:25:54,080
the right hand side let's say what you

00:25:52,100 --> 00:25:56,420
search for your seat selection the

00:25:54,080 --> 00:25:58,190
images off those seats are all locally

00:25:56,420 --> 00:26:00,740
persisted so you just have to read it

00:25:58,190 --> 00:26:02,390
off here to your device for them that's

00:26:00,740 --> 00:26:04,340
what they do of course as an app

00:26:02,390 --> 00:26:08,039
developer you decide what you want to

00:26:04,340 --> 00:26:11,970
store or or save locally

00:26:08,039 --> 00:26:15,239
so that's ryanair couch weights mobile

00:26:11,970 --> 00:26:16,950
and no sequel really what's the what's

00:26:15,239 --> 00:26:18,539
the big picture what's the opportunity

00:26:16,950 --> 00:26:20,850
is essentially if you look at where no

00:26:18,539 --> 00:26:23,759
sequel is for not even just couchbase

00:26:20,850 --> 00:26:27,779
but across the industry this is being

00:26:23,759 --> 00:26:29,700
adopted only because it is the trend it

00:26:27,779 --> 00:26:32,580
is basically going to provide value in

00:26:29,700 --> 00:26:35,129
terms of speed in terms of user

00:26:32,580 --> 00:26:36,929
experience and of course Bobo is a huge

00:26:35,129 --> 00:26:40,499
driver of that because contents being

00:26:36,929 --> 00:26:42,720
generated from mobile right so in

00:26:40,499 --> 00:26:45,299
summary why open source you get more

00:26:42,720 --> 00:26:48,749
choices more flexibility developing it

00:26:45,299 --> 00:26:50,970
faster it's great when I see the

00:26:48,749 --> 00:26:54,419
community contributing back to the

00:26:50,970 --> 00:26:57,419
project with PRP pull requests and also

00:26:54,419 --> 00:26:58,830
helping us with bug fixes why no sequel

00:26:57,419 --> 00:27:01,379
like I mentioned it's definitely

00:26:58,830 --> 00:27:03,269
flexible in your data model sense if you

00:27:01,379 --> 00:27:05,460
think about structure data and structure

00:27:03,269 --> 00:27:07,049
data scaling out that architecture

00:27:05,460 --> 00:27:08,849
especially from a mobile setting when

00:27:07,049 --> 00:27:10,559
things change so fast and those features

00:27:08,849 --> 00:27:12,869
are always rolling you just have that

00:27:10,559 --> 00:27:15,960
opportunity to go in and change and

00:27:12,869 --> 00:27:17,580
modify that accordingly why couchbase

00:27:15,960 --> 00:27:20,849
well performance availability

00:27:17,580 --> 00:27:24,179
scalability ease of use these are some

00:27:20,849 --> 00:27:26,609
of the things that we really believe on

00:27:24,179 --> 00:27:29,669
and actually reiterate on heavily momo

00:27:26,609 --> 00:27:31,139
end server so those are some of the

00:27:29,669 --> 00:27:34,409
reasons in summary some of the next

00:27:31,139 --> 00:27:37,289
steps here you definitely take down some

00:27:34,409 --> 00:27:39,960
information so documentation i recommend

00:27:37,289 --> 00:27:41,779
looking the mini hack is something i

00:27:39,960 --> 00:27:45,119
contribute it's ashley a github project

00:27:41,779 --> 00:27:48,059
you get basically in 30 minutes to 45

00:27:45,119 --> 00:27:50,070
minutes really good deep dive on how to

00:27:48,059 --> 00:27:53,849
integrate all of this stuff on your own

00:27:50,070 --> 00:27:55,979
so it's kind of like a tutorial and the

00:27:53,849 --> 00:27:58,739
developer forums there's another piece

00:27:55,979 --> 00:28:00,720
that i live heavily on i'm going to put

00:27:58,739 --> 00:28:02,879
all this stuff in a tweet afterwards

00:28:00,720 --> 00:28:05,460
including the slides so i'll do that

00:28:02,879 --> 00:28:08,429
from my my twitter if you want to follow

00:28:05,460 --> 00:28:12,059
I can definitely post that probably end

00:28:08,429 --> 00:28:15,389
of day and yeah open for questions and

00:28:12,059 --> 00:28:17,129
it would show quick demo as well so yeah

00:28:15,389 --> 00:28:19,080
my name is well if you want to take that

00:28:17,129 --> 00:28:20,450
down I don't know how much time I have I

00:28:19,080 --> 00:28:22,820
think I have a bit of time to

00:28:20,450 --> 00:28:24,500
show a quick demo so what happened

00:28:22,820 --> 00:28:28,780
what's happening here is that I got a

00:28:24,500 --> 00:28:32,720
couchbase server spinned up locally and

00:28:28,780 --> 00:28:37,910
I have an Android application to Android

00:28:32,720 --> 00:28:42,380
applications and what I'm trying to show

00:28:37,910 --> 00:28:45,110
here is some sink and don't forget all

00:28:42,380 --> 00:28:52,690
this is dependent on how good Wi-Fi is

00:28:45,110 --> 00:28:52,690
right this one's not coming up

00:28:57,850 --> 00:29:00,990
let's try one more time

00:29:01,680 --> 00:29:05,310
since I can't press

00:29:10,440 --> 00:29:13,250
ok

00:29:14,790 --> 00:29:22,370
this emulator is crapping up at my try

00:29:18,990 --> 00:29:22,370
spinning up another one

00:29:29,140 --> 00:29:34,080
so this is the left-hand one is a stock

00:29:31,510 --> 00:29:38,490
emulator this one I'm using jinni motion

00:29:34,080 --> 00:29:41,140
which is a paid emulator a lot faster

00:29:38,490 --> 00:29:43,660
alright cool so let's see if this is

00:29:41,140 --> 00:29:46,030
working if i untie ghal this this is

00:29:43,660 --> 00:29:47,890
locally persisted you see it's sink on

00:29:46,030 --> 00:29:50,410
the other side all that sinking code is

00:29:47,890 --> 00:29:53,560
done by couchbase mobile across the

00:29:50,410 --> 00:29:56,050
stack if i delete unwanted elite all

00:29:53,560 --> 00:29:59,980
things open them i'm still here if i

00:29:56,050 --> 00:30:02,650
delete this one this have you have that

00:29:59,980 --> 00:30:05,320
eventual consistency piece so another

00:30:02,650 --> 00:30:07,090
thing is neat is what about conflicts

00:30:05,320 --> 00:30:09,760
right so that's one is the one the key

00:30:07,090 --> 00:30:12,750
feature couchbase mobile supports so on

00:30:09,760 --> 00:30:15,430
airplane i go on airplane mode no data

00:30:12,750 --> 00:30:21,580
and I go in and I go and change this

00:30:15,430 --> 00:30:23,890
update this to all things open 2015 we

00:30:21,580 --> 00:30:26,590
don't forget this one's offline right so

00:30:23,890 --> 00:30:30,130
this one's just locally persisted for

00:30:26,590 --> 00:30:34,690
example you kill this off open it again

00:30:30,130 --> 00:30:36,430
you see it just reads so it's local to

00:30:34,690 --> 00:30:38,740
this device but it's not synced because

00:30:36,430 --> 00:30:53,160
you're still in the airplane but this

00:30:38,740 --> 00:30:53,160
person is connected so so as I do 14

00:30:53,380 --> 00:30:58,730
so this particular image or instance is

00:30:56,090 --> 00:31:03,350
local persisted and it's synced up to

00:30:58,730 --> 00:31:07,160
the cloud to be 20 2014 or 14 but lapins

00:31:03,350 --> 00:31:08,690
when I step off the airplane right so

00:31:07,160 --> 00:31:12,080
this is this is where conflict will

00:31:08,690 --> 00:31:14,120
occur because they were both having all

00:31:12,080 --> 00:31:18,710
things open referencing that particular

00:31:14,120 --> 00:31:20,930
node and now you have 2015 referencing

00:31:18,710 --> 00:31:25,790
that node and then you have all things

00:31:20,930 --> 00:31:30,020
open 2014 so this one I have it on and I

00:31:25,790 --> 00:31:33,350
also have the replication on ad hoc so

00:31:30,020 --> 00:31:35,330
let me try to force this you see

00:31:33,350 --> 00:31:39,170
something popped up something popped up

00:31:35,330 --> 00:31:41,000
here it's not 2015 it's 14 essentially a

00:31:39,170 --> 00:31:43,610
lot of the solutions out there is based

00:31:41,000 --> 00:31:45,380
on the premise of last right wins for us

00:31:43,610 --> 00:31:47,150
we actually keep the entire revision

00:31:45,380 --> 00:31:49,160
tree so if there is a conflict there's a

00:31:47,150 --> 00:31:50,960
basically a boolean call that you can

00:31:49,160 --> 00:31:53,990
reference that returns true or false and

00:31:50,960 --> 00:31:55,760
a conflict here occurs so it's true and

00:31:53,990 --> 00:31:58,340
you can do something with it over time

00:31:55,760 --> 00:32:01,340
just doing a render but because the tree

00:31:58,340 --> 00:32:04,010
is intact I can click resolve conflict i

00:32:01,340 --> 00:32:05,960
can see hey if there's all things open

00:32:04,010 --> 00:32:08,840
2014 there's actually all things open

00:32:05,960 --> 00:32:11,180
2015 we pick a default winner in this

00:32:08,840 --> 00:32:12,830
case but you as an app developer you can

00:32:11,180 --> 00:32:14,810
decide well I want to merge actually

00:32:12,830 --> 00:32:17,060
both of them together or I want to just

00:32:14,810 --> 00:32:19,490
pick the winner have the user pick the

00:32:17,060 --> 00:32:22,730
winner so if I take all things 2015 you

00:32:19,490 --> 00:32:26,060
can see the conflict disappears and this

00:32:22,730 --> 00:32:30,530
is the latest and greatest so that's

00:32:26,060 --> 00:32:32,300
calculates mobile in a nutshell and got

00:32:30,530 --> 00:32:37,610
some time I think for some questions so

00:32:32,300 --> 00:32:39,529
let me pop this up again that's my talk

00:32:37,610 --> 00:32:45,289
thank you

00:32:39,529 --> 00:32:45,289
any questions hey

00:32:46,090 --> 00:32:51,710
what do you the question is what do you

00:32:48,830 --> 00:32:54,710
run on the server side you run couchbase

00:32:51,710 --> 00:32:58,460
server and there's different flavors of

00:32:54,710 --> 00:33:01,160
it no depending on what your platform or

00:32:58,460 --> 00:33:04,760
language preferences so you can put that

00:33:01,160 --> 00:33:06,800
any on any box you like to put it on on

00:33:04,760 --> 00:33:08,750
Amazon there's actually a micro instance

00:33:06,800 --> 00:33:10,850
you can press a couple of buttons it's

00:33:08,750 --> 00:33:13,580
basically the image you can spend that

00:33:10,850 --> 00:33:16,910
up and from that image it gives your URL

00:33:13,580 --> 00:33:19,310
and you point your mobile application to

00:33:16,910 --> 00:33:21,860
that URL and then your function you

00:33:19,310 --> 00:33:23,330
decide let's say I press a button now I

00:33:21,860 --> 00:33:26,000
want to sync you basically if you

00:33:23,330 --> 00:33:28,580
reference that URL endpoint to sync it

00:33:26,000 --> 00:33:30,110
up to whatever box that you're putting

00:33:28,580 --> 00:33:33,560
it on but you're running a couchbase

00:33:30,110 --> 00:33:36,770
server a lot of people have probably a

00:33:33,560 --> 00:33:39,080
sequel server or oracle database a lot

00:33:36,770 --> 00:33:41,020
how you would do that is your front

00:33:39,080 --> 00:33:43,640
loaded with the couch based server piece

00:33:41,020 --> 00:33:46,010
this stack can't be broken in that

00:33:43,640 --> 00:33:48,200
regard so you still get that sink piece

00:33:46,010 --> 00:33:51,080
using the cash for a server the sink

00:33:48,200 --> 00:33:54,290
gateway and what's in your embedded

00:33:51,080 --> 00:33:56,630
device but your maybe your source of

00:33:54,290 --> 00:33:58,850
truth is in your our dbms server and

00:33:56,630 --> 00:34:00,920
that would be simply like a cache and

00:33:58,850 --> 00:34:04,040
then you basically right mappers to it

00:34:00,920 --> 00:34:06,230
and then pull and push from using rest

00:34:04,040 --> 00:34:11,870
api so accordingly so that's the kind of

00:34:06,230 --> 00:34:15,980
the stack of architecture questions

00:34:11,870 --> 00:34:18,380
comments feedback love tweets well I'm

00:34:15,980 --> 00:34:22,600
going to be around so yeah happy answer

00:34:18,380 --> 00:34:22,600

YouTube URL: https://www.youtube.com/watch?v=fXAVMi4uvTY


