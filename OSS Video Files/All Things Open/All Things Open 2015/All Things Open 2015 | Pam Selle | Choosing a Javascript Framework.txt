Title: All Things Open 2015 | Pam Selle | Choosing a Javascript Framework
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,190 --> 00:00:08,849
all right it seems to be settling a

00:00:07,470 --> 00:00:11,940
little bit so i'll go ahead and get

00:00:08,849 --> 00:00:13,349
started I said welcome to the the last

00:00:11,940 --> 00:00:15,059
session of the day I hope you all have

00:00:13,349 --> 00:00:17,580
had a had a great time at the conference

00:00:15,059 --> 00:00:19,890
you're probably trying to get through

00:00:17,580 --> 00:00:21,600
the end of the day but but hopefully

00:00:19,890 --> 00:00:23,970
this will be pretty I'm a pretty

00:00:21,600 --> 00:00:27,570
energetic speaker so hopefully that

00:00:23,970 --> 00:00:30,210
helps a little bit and we can we can go

00:00:27,570 --> 00:00:32,759
on this journey together and learn a bit

00:00:30,210 --> 00:00:35,040
about JavaScript frameworks so I'm Pam

00:00:32,759 --> 00:00:37,050
celli you can find me on the internet at

00:00:35,040 --> 00:00:39,870
Pam asur the web before might also

00:00:37,050 --> 00:00:41,879
dinosaur theme related and I podcast

00:00:39,870 --> 00:00:44,399
with Turing and complete on touring cool

00:00:41,879 --> 00:00:46,410
as the website for that so I'm getting

00:00:44,399 --> 00:00:48,750
this tack because we we wrote this book

00:00:46,410 --> 00:00:50,850
on choosing a JavaScript fame work I

00:00:48,750 --> 00:00:53,879
rode it with three fantastic co-authors

00:00:50,850 --> 00:00:56,039
and so what we did is we go through each

00:00:53,879 --> 00:00:58,199
of the major frameworks and do the pros

00:00:56,039 --> 00:01:00,120
and cons and so the co-authors have more

00:00:58,199 --> 00:01:01,520
that deep knowledge in each of them so

00:01:00,120 --> 00:01:04,650
it's really great to work with them and

00:01:01,520 --> 00:01:06,750
so this talk is kind of a like trying to

00:01:04,650 --> 00:01:08,970
fit all of that kind of into 40 minutes

00:01:06,750 --> 00:01:11,189
so we'll see how that goes so the

00:01:08,970 --> 00:01:13,470
spoiler is that choosing a JavaScript

00:01:11,189 --> 00:01:15,030
framework I will not tell you which one

00:01:13,470 --> 00:01:17,490
is the best JavaScript framework that is

00:01:15,030 --> 00:01:21,119
not what this talk does life is not that

00:01:17,490 --> 00:01:22,890
easy what I will do is that the plan is

00:01:21,119 --> 00:01:25,290
to walk you through each of the major

00:01:22,890 --> 00:01:27,330
frameworks and I hope that you can make

00:01:25,290 --> 00:01:29,100
an informed choice for a project if

00:01:27,330 --> 00:01:30,900
you're just trying to learn what's out

00:01:29,100 --> 00:01:33,630
there that's a great reason to come to

00:01:30,900 --> 00:01:35,340
this talk or if you're just general

00:01:33,630 --> 00:01:38,250
knowledge you're just looking into this

00:01:35,340 --> 00:01:39,090
and since seeing what's going on so

00:01:38,250 --> 00:01:40,470
we're going to talk about what a

00:01:39,090 --> 00:01:42,000
JavaScript framework is we'll go through

00:01:40,470 --> 00:01:43,590
each of the I would say the major

00:01:42,000 --> 00:01:45,390
framework so there's kind of the three

00:01:43,590 --> 00:01:47,460
most ubiquitous JavaScript frameworks

00:01:45,390 --> 00:01:49,920
being backbone angular and ember and

00:01:47,460 --> 00:01:52,409
then there's these two rising stars kind

00:01:49,920 --> 00:01:55,530
of coming up on the scene in the past

00:01:52,409 --> 00:01:57,750
probably two years polymer and reacts

00:01:55,530 --> 00:01:59,729
and then just a brief divergence into

00:01:57,750 --> 00:02:01,590
framework evaluation techniques if you

00:01:59,729 --> 00:02:04,950
have any interest in something from a

00:02:01,590 --> 00:02:06,540
more pedagogical perspective so what is

00:02:04,950 --> 00:02:09,989
a framework what I mean when I say

00:02:06,540 --> 00:02:11,819
framework so not that long ago kind of a

00:02:09,989 --> 00:02:14,210
long time ago in a browser of recent

00:02:11,819 --> 00:02:15,990
past people made web

00:02:14,210 --> 00:02:17,270
actually yeah that's really timely

00:02:15,990 --> 00:02:19,230
because the trailer came out yesterday

00:02:17,270 --> 00:02:23,010
you should see the trailer for the new

00:02:19,230 --> 00:02:23,970
movie anyway Oh people made web apps so

00:02:23,010 --> 00:02:27,000
that's not the different from now

00:02:23,970 --> 00:02:28,650
however there wasn't one way that

00:02:27,000 --> 00:02:32,060
actually hasn't changed user but what

00:02:28,650 --> 00:02:36,240
I'm trying to get at is that around

00:02:32,060 --> 00:02:37,350
2008-2009 or well 2009-2010 really there

00:02:36,240 --> 00:02:39,420
was a what you would call a zeitgeist

00:02:37,350 --> 00:02:40,980
those aight guys is like a spirit of the

00:02:39,420 --> 00:02:42,870
time so there were lots of people went

00:02:40,980 --> 00:02:45,480
you that happens when a lot of people at

00:02:42,870 --> 00:02:46,860
the same time all have the same idea it

00:02:45,480 --> 00:02:48,720
doesn't mean that they aren't special it

00:02:46,860 --> 00:02:52,050
means that there's a spirit of the times

00:02:48,720 --> 00:02:53,130
that a lot of people the browser's there

00:02:52,050 --> 00:02:55,260
was kind of a you know that great

00:02:53,130 --> 00:02:57,320
convergence of standards like actually

00:02:55,260 --> 00:02:59,640
having web standards they're cool and

00:02:57,320 --> 00:03:01,440
say like okay well now browsers can

00:02:59,640 --> 00:03:04,230
handle Oh client-side rich environment

00:03:01,440 --> 00:03:07,200
and we keep writing the same darn thing

00:03:04,230 --> 00:03:09,060
over and over again and so framework

00:03:07,200 --> 00:03:11,010
subversion people say ha we shall solve

00:03:09,060 --> 00:03:12,360
this problem with the one you know we've

00:03:11,010 --> 00:03:14,550
figured out frameworks and we're going

00:03:12,360 --> 00:03:16,350
to have a strength standard of framework

00:03:14,550 --> 00:03:18,600
so this is kind of XKCD that comes out

00:03:16,350 --> 00:03:21,570
any time you mentioned standards that

00:03:18,600 --> 00:03:23,100
you know once you have when someone adds

00:03:21,570 --> 00:03:25,830
another standards we just have n plus 1

00:03:23,100 --> 00:03:27,330
standards i but i still even then people

00:03:25,830 --> 00:03:29,100
say you know Pam like aren't you tired

00:03:27,330 --> 00:03:30,480
of JavaScript frameworks onder just too

00:03:29,100 --> 00:03:33,060
many of them and we should just you know

00:03:30,480 --> 00:03:34,290
go back to stone tablets no I think

00:03:33,060 --> 00:03:37,460
JavaScript frameworks are a very good

00:03:34,290 --> 00:03:39,330
thing so the thing about frameworks is

00:03:37,460 --> 00:03:40,740
that you shouldn't have to write a

00:03:39,330 --> 00:03:42,480
router so the reason the JavaScript

00:03:40,740 --> 00:03:44,340
frameworks came into being in the first

00:03:42,480 --> 00:03:46,410
place is that people were doing the same

00:03:44,340 --> 00:03:48,870
thing over and over again and that's

00:03:46,410 --> 00:03:50,490
generally not a good idea at least

00:03:48,870 --> 00:03:52,830
especially if you're in computing you

00:03:50,490 --> 00:03:55,050
it's just loop the way we do things is

00:03:52,830 --> 00:03:57,900
once we do that we should automate it or

00:03:55,050 --> 00:04:00,360
find a common solution and in fact

00:03:57,900 --> 00:04:02,190
there's a figure that says that if of an

00:04:00,360 --> 00:04:04,620
application about eighty-five percent of

00:04:02,190 --> 00:04:06,300
it it's pretty common with any other

00:04:04,620 --> 00:04:09,030
application of kind of a similar type

00:04:06,300 --> 00:04:11,070
and fifteen percent of it is where

00:04:09,030 --> 00:04:12,600
you're adding your business value so

00:04:11,070 --> 00:04:13,980
what you want to ask when you're kind of

00:04:12,600 --> 00:04:15,840
evaluating frameworks listen keep in the

00:04:13,980 --> 00:04:17,400
back of your mind that when you're

00:04:15,840 --> 00:04:18,720
buying frameworks and seeing what they

00:04:17,400 --> 00:04:20,700
would they give you do you think about

00:04:18,720 --> 00:04:22,740
where you want to spend your time and if

00:04:20,700 --> 00:04:24,540
your time if you want to invent the best

00:04:22,740 --> 00:04:26,730
new way to write a router in a

00:04:24,540 --> 00:04:27,580
client-side JavaScript application power

00:04:26,730 --> 00:04:28,900
to you

00:04:27,580 --> 00:04:30,069
that's awesome and I'm really glad that

00:04:28,900 --> 00:04:31,539
you're doing that because there's still

00:04:30,069 --> 00:04:33,490
definitely space for innovation in that

00:04:31,539 --> 00:04:35,770
space if that's not where you're doing

00:04:33,490 --> 00:04:37,599
however framework open towards

00:04:35,770 --> 00:04:39,009
frameworks where you're sharing the

00:04:37,599 --> 00:04:41,319
responsibility for with the whole

00:04:39,009 --> 00:04:43,990
community of people can be a great

00:04:41,319 --> 00:04:45,969
solution so talking about the major

00:04:43,990 --> 00:04:48,310
frameworks we'll talk about backbone

00:04:45,969 --> 00:04:49,689
angular ember go through an overview

00:04:48,310 --> 00:04:53,199
strengths and weaknesses in a little bit

00:04:49,689 --> 00:04:55,210
of code so backbone backbones origin

00:04:53,199 --> 00:04:58,060
story is from document cloud kind of a

00:04:55,210 --> 00:04:59,469
rails background and so I find this

00:04:58,060 --> 00:05:00,879
really interesting and looking at

00:04:59,469 --> 00:05:03,849
projects and seeing what they were

00:05:00,879 --> 00:05:05,919
inspired by is also really interesting

00:05:03,849 --> 00:05:07,389
in programming languages you know or

00:05:05,919 --> 00:05:09,099
even musicians like you're familiar with

00:05:07,389 --> 00:05:13,360
that looking at the influencers that

00:05:09,099 --> 00:05:14,949
influence the outcome so rails and so

00:05:13,360 --> 00:05:17,289
backbone is considered the core of an

00:05:14,949 --> 00:05:19,569
application and I would categorize it as

00:05:17,289 --> 00:05:21,819
an unappealing ated framework and so

00:05:19,569 --> 00:05:24,279
what do I mean when I say opinionated or

00:05:21,819 --> 00:05:26,199
an opinionated I'd say that opinion aid

00:05:24,279 --> 00:05:27,909
means that there's an obvious or a best

00:05:26,199 --> 00:05:30,759
practices driven way to solve the

00:05:27,909 --> 00:05:32,529
problem so this can be simplified is

00:05:30,759 --> 00:05:34,870
that you know given a problem there's

00:05:32,529 --> 00:05:38,979
probably a right way to solve it if its

00:05:34,870 --> 00:05:40,659
opinionated unaf pinion ated more of a

00:05:38,979 --> 00:05:43,960
choose your own adventure type situation

00:05:40,659 --> 00:05:45,610
more flexible the the hint about this

00:05:43,960 --> 00:05:47,080
especially for backbone is that such as

00:05:45,610 --> 00:05:49,210
if you're incorporating other libraries

00:05:47,080 --> 00:05:51,190
into your project if it's unah pinion

00:05:49,210 --> 00:05:53,199
ated makes it a little bit easier to do

00:05:51,190 --> 00:05:56,199
that you get too opinionated things in

00:05:53,199 --> 00:05:59,500
one space oftentimes they will not have

00:05:56,199 --> 00:06:00,610
a good time so that's why you might want

00:05:59,500 --> 00:06:02,620
to know if something is pinging it or

00:06:00,610 --> 00:06:04,180
not what you get from it when you use

00:06:02,620 --> 00:06:06,849
backbone you get some core MVC

00:06:04,180 --> 00:06:08,229
components and I use MVC when I refer to

00:06:06,849 --> 00:06:09,969
clients applications and it's pretty

00:06:08,229 --> 00:06:11,319
common because it gives people who have

00:06:09,969 --> 00:06:13,479
more of a server-side background and

00:06:11,319 --> 00:06:15,159
mapping technically though they're

00:06:13,479 --> 00:06:16,870
generally are not going to be they you

00:06:15,159 --> 00:06:18,460
might have models and views you might

00:06:16,870 --> 00:06:20,169
have things that do the behavior of

00:06:18,460 --> 00:06:21,460
controllers but they aren't necessarily

00:06:20,169 --> 00:06:23,770
going to be called controller so keep

00:06:21,460 --> 00:06:25,479
that in mind and especially and

00:06:23,770 --> 00:06:26,710
especially for javascript it makes sense

00:06:25,479 --> 00:06:30,879
to get a nudge in an event-driven

00:06:26,710 --> 00:06:32,469
application design as a generally my

00:06:30,879 --> 00:06:35,069
opinion a pretty nice way to organize

00:06:32,469 --> 00:06:37,330
your JavaScript applications

00:06:35,069 --> 00:06:40,360
dependencies underscore which is like a

00:06:37,330 --> 00:06:42,430
utility belt for JavaScript so

00:06:40,360 --> 00:06:44,680
pretty light dependencies jquery things

00:06:42,430 --> 00:06:46,150
you might have used anyway i would say

00:06:44,680 --> 00:06:48,250
the strengths that backbone are that

00:06:46,150 --> 00:06:50,020
it's unah pinion ated it integrates well

00:06:48,250 --> 00:06:51,750
with many libraries and back ends and i

00:06:50,020 --> 00:06:54,099
really like the event system so and

00:06:51,750 --> 00:06:55,870
especially i've even worked on projects

00:06:54,099 --> 00:06:58,030
where we took because you know it's all

00:06:55,870 --> 00:07:00,310
open source so we took the event system

00:06:58,030 --> 00:07:02,830
and use that in an application itself

00:07:00,310 --> 00:07:04,090
just because you know we weren't trying

00:07:02,830 --> 00:07:05,289
to write an application to write in an

00:07:04,090 --> 00:07:06,759
event system and they have a pretty good

00:07:05,289 --> 00:07:09,669
one over in backbone so we use their

00:07:06,759 --> 00:07:11,439
event system so the weaknesses would be

00:07:09,669 --> 00:07:14,349
also is like strength but also

00:07:11,439 --> 00:07:16,180
weaknesses that is unappealing so if you

00:07:14,349 --> 00:07:18,069
want if you are in a situation where you

00:07:16,180 --> 00:07:19,689
want lots of structure backbones not

00:07:18,069 --> 00:07:22,360
going to give that to you it's not it

00:07:19,689 --> 00:07:24,490
doesn't not very didactic and you get

00:07:22,360 --> 00:07:26,529
into the that be your problem situation

00:07:24,490 --> 00:07:29,469
that if you say back what is the

00:07:26,529 --> 00:07:31,419
backbone way to do this there might not

00:07:29,469 --> 00:07:33,400
be like there will be whatever way you

00:07:31,419 --> 00:07:35,409
choose will be the way to do it which is

00:07:33,400 --> 00:07:36,669
exciting but also depending on your

00:07:35,409 --> 00:07:39,939
approach or what you're looking for

00:07:36,669 --> 00:07:41,080
could be a weakness and so the

00:07:39,939 --> 00:07:43,689
components that you get when you look

00:07:41,080 --> 00:07:46,360
back phone so you get these models views

00:07:43,689 --> 00:07:47,650
collections and routing and so in the

00:07:46,360 --> 00:07:49,690
walkthrough will go through a basic

00:07:47,650 --> 00:07:51,639
model and view set up and see what what

00:07:49,690 --> 00:07:55,120
backbone code actually it looks like so

00:07:51,639 --> 00:07:57,069
this is a backbone model so you use the

00:07:55,120 --> 00:07:58,539
extend keyword so there's backbone model

00:07:57,069 --> 00:08:00,449
cities are like the super classes and

00:07:58,539 --> 00:08:03,219
then you use extend to extend them and

00:08:00,449 --> 00:08:05,469
the nice thing nice thing trade-off in

00:08:03,219 --> 00:08:07,900
backbone is that this is still it's just

00:08:05,469 --> 00:08:10,479
a JavaScript object it's not that

00:08:07,900 --> 00:08:13,449
different from writing your own object

00:08:10,479 --> 00:08:16,210
constructor but it's nice that back room

00:08:13,449 --> 00:08:17,589
gives you a common syntax for for these

00:08:16,210 --> 00:08:19,719
things especially between different

00:08:17,589 --> 00:08:21,729
backbone apps so is that that benefit of

00:08:19,719 --> 00:08:23,259
learning frameworks is that if you work

00:08:21,729 --> 00:08:24,759
on one backbone app there's kind of a

00:08:23,259 --> 00:08:26,770
domain-specific language that you can

00:08:24,759 --> 00:08:28,779
share with another application and all

00:08:26,770 --> 00:08:30,939
the code from this presentation is from

00:08:28,779 --> 00:08:33,490
the book and final examples are on

00:08:30,939 --> 00:08:37,000
github with the exception of ember and

00:08:33,490 --> 00:08:38,529
the emerging frameworks so oh em BRR

00:08:37,000 --> 00:08:41,079
greco's embers been updated to ember 2

00:08:38,529 --> 00:08:43,630
plus so that's important to say it's not

00:08:41,079 --> 00:08:45,459
just for an it reason so and then this

00:08:43,630 --> 00:08:47,410
would be a view so we've got that super

00:08:45,459 --> 00:08:50,380
class again and we use the send key word

00:08:47,410 --> 00:08:52,690
so familiar interface and we define a

00:08:50,380 --> 00:08:53,410
tag name which as you might guess will

00:08:52,690 --> 00:08:55,540
be your

00:08:53,410 --> 00:08:57,399
HTML tag name this is nice because it's

00:08:55,540 --> 00:08:58,779
you know it's codified and object where

00:08:57,399 --> 00:09:01,899
it's very easy to change if you need to

00:08:58,779 --> 00:09:04,569
change it class names similar reasons

00:09:01,899 --> 00:09:07,509
and then the render function and so the

00:09:04,569 --> 00:09:10,389
render function is you know the the

00:09:07,509 --> 00:09:12,430
reign reign supreme of the backbone view

00:09:10,389 --> 00:09:15,490
it is just a function you can do

00:09:12,430 --> 00:09:16,720
whatever you want in it this is one of

00:09:15,490 --> 00:09:18,279
those anti-patterns that sometimes

00:09:16,720 --> 00:09:20,019
happens in backbone applications dizzle

00:09:18,279 --> 00:09:22,120
people will even do data processing and

00:09:20,019 --> 00:09:24,939
the render not a good price is due to

00:09:22,120 --> 00:09:26,470
add a processing but backbone will let

00:09:24,939 --> 00:09:28,899
you do it because it's fun opinionated

00:09:26,470 --> 00:09:30,910
so it's not going to put a lot of

00:09:28,899 --> 00:09:33,279
restrictions on what you can do which

00:09:30,910 --> 00:09:35,769
means if you want the flexibility then

00:09:33,279 --> 00:09:40,389
you get it so that's a you know is the

00:09:35,769 --> 00:09:42,519
trade-off that you have so yes yeah and

00:09:40,389 --> 00:09:44,439
then you return this at the end of the

00:09:42,519 --> 00:09:46,750
render function so that's the down here

00:09:44,439 --> 00:09:48,970
it notes a little low but you return

00:09:46,750 --> 00:09:51,220
this and so that power in backbone views

00:09:48,970 --> 00:09:53,079
is nice because a positive pattern and

00:09:51,220 --> 00:09:55,029
Backman views is chaining so you can

00:09:53,079 --> 00:09:57,910
render and then since you returned this

00:09:55,029 --> 00:09:59,470
you get to chain which is nice so here's

00:09:57,910 --> 00:10:02,410
an example of using a view of the model

00:09:59,470 --> 00:10:04,870
so we create a new property location

00:10:02,410 --> 00:10:07,029
middle of the street noise level usually

00:10:04,870 --> 00:10:09,310
quite loud we attach the model to the

00:10:07,029 --> 00:10:12,160
view render the view and attach the

00:10:09,310 --> 00:10:15,009
property view to the document body so

00:10:12,160 --> 00:10:16,360
what it feels pretty understandable to

00:10:15,009 --> 00:10:18,339
me and it's something I do really like

00:10:16,360 --> 00:10:19,779
about backbone and so this would be for

00:10:18,339 --> 00:10:21,880
example this would be if this were a

00:10:19,779 --> 00:10:24,160
template that we could render this is

00:10:21,880 --> 00:10:25,689
the markup it would render for us so the

00:10:24,160 --> 00:10:27,279
other components collections are groups

00:10:25,689 --> 00:10:28,899
of models that might sound like a

00:10:27,279 --> 00:10:31,630
familiar mapping if you learn some rails

00:10:28,899 --> 00:10:33,250
and a router which is read and write the

00:10:31,630 --> 00:10:34,500
URL without reloading the page I think

00:10:33,250 --> 00:10:36,759
we take this for granted now in

00:10:34,500 --> 00:10:38,170
client-side JavaScript frameworks but

00:10:36,759 --> 00:10:41,250
that thing was really annoying the right

00:10:38,170 --> 00:10:43,509
before you had other options for it so

00:10:41,250 --> 00:10:46,300
so it's really nice to have that taken

00:10:43,509 --> 00:10:47,649
care of for you you also get the event

00:10:46,300 --> 00:10:49,779
system which I mentioned a little bit

00:10:47,649 --> 00:10:52,120
earlier and so views triggered updates

00:10:49,779 --> 00:10:54,790
to the model and vice versa and so

00:10:52,120 --> 00:10:57,519
you've got the the event hub is taken

00:10:54,790 --> 00:10:59,470
care of which is very nice so some

00:10:57,519 --> 00:11:01,000
resources for learning backbone so i

00:10:59,470 --> 00:11:03,009
recommend the backbone tutorials that

00:11:01,000 --> 00:11:04,630
seems you to remember and adios money's

00:11:03,009 --> 00:11:06,320
backbone fundamentals are really good i

00:11:04,630 --> 00:11:08,900
also recommend reading the

00:11:06,320 --> 00:11:11,330
source and I don't often recommend

00:11:08,900 --> 00:11:14,300
reading annotated reading source code

00:11:11,330 --> 00:11:15,980
although like you know power to you but

00:11:14,300 --> 00:11:17,660
especially the backbone it is antes

00:11:15,980 --> 00:11:19,670
source code is really good it really

00:11:17,660 --> 00:11:21,050
especially if you're using something you

00:11:19,670 --> 00:11:23,810
want to know how it works which is a

00:11:21,050 --> 00:11:25,640
very valid question you can go look and

00:11:23,810 --> 00:11:29,000
it's really well documented it's really

00:11:25,640 --> 00:11:31,760
clear and you I think it's not may be

00:11:29,000 --> 00:11:35,450
easy but it's simply written so that you

00:11:31,760 --> 00:11:37,070
can work toward understanding it so now

00:11:35,450 --> 00:11:38,750
i'll talk about angular so angular is

00:11:37,070 --> 00:11:41,090
still the fastest growing javascript

00:11:38,750 --> 00:11:42,350
framework so even though react is it

00:11:41,090 --> 00:11:45,680
sounds like there's a lot of hype around

00:11:42,350 --> 00:11:47,690
it angular is still higher and adoption

00:11:45,680 --> 00:11:48,890
and it's you know if you measure

00:11:47,690 --> 00:11:52,670
anything by get out of this still more

00:11:48,890 --> 00:11:54,080
popular on github and I would say I see

00:11:52,670 --> 00:11:57,440
more angular and production but that

00:11:54,080 --> 00:11:59,390
might be that's more anecdotal and if I

00:11:57,440 --> 00:12:01,100
were to summarize angular in two things

00:11:59,390 --> 00:12:02,660
it would be that you write behavior in

00:12:01,100 --> 00:12:04,460
your markup and that is known as

00:12:02,660 --> 00:12:06,230
directives so sometimes the language in

00:12:04,460 --> 00:12:08,300
angular one of the downsides is it feels

00:12:06,230 --> 00:12:11,270
very theoretical it doesn't have to be

00:12:08,300 --> 00:12:14,420
directives are not weird they're just

00:12:11,270 --> 00:12:17,390
unfortunately named and then that

00:12:14,420 --> 00:12:19,430
angular benefited a lot from being

00:12:17,390 --> 00:12:22,010
backed by Google so they've benefited a

00:12:19,430 --> 00:12:23,630
lot from that natural of this is a

00:12:22,010 --> 00:12:25,100
google project and so people are going

00:12:23,630 --> 00:12:26,810
to care about it and be really excited

00:12:25,100 --> 00:12:30,080
about it angular benefited a lot from

00:12:26,810 --> 00:12:32,390
that so when you get anger you get

00:12:30,080 --> 00:12:35,050
strongly to find building components you

00:12:32,390 --> 00:12:37,040
get to a data binding so that's in

00:12:35,050 --> 00:12:39,230
backbone you kind of have to do that

00:12:37,040 --> 00:12:40,880
yourself in angular that comes in the

00:12:39,230 --> 00:12:42,500
box it does two-way data-binding the

00:12:40,880 --> 00:12:45,260
type in one field and changes things

00:12:42,500 --> 00:12:47,660
another field demo you get dependency

00:12:45,260 --> 00:12:49,760
injection which is kind of like required

00:12:47,660 --> 00:12:51,290
j/s if you've used that so dependency

00:12:49,760 --> 00:12:53,210
injection is the declaring your

00:12:51,290 --> 00:12:55,550
dependencies before you use them makes

00:12:53,210 --> 00:12:57,470
things a lot nicer for testing and

00:12:55,550 --> 00:12:59,060
speaking of testing there's some great

00:12:57,470 --> 00:13:00,650
auxiliary tools available for the

00:12:59,060 --> 00:13:02,270
angular world but also I encourage you

00:13:00,650 --> 00:13:04,460
to use them for not just angular world

00:13:02,270 --> 00:13:07,640
but they came out of here karma for unit

00:13:04,460 --> 00:13:11,960
testing protractor for end-to-end really

00:13:07,640 --> 00:13:13,730
good tools dependencies quote none but

00:13:11,960 --> 00:13:15,050
they you know they load their own

00:13:13,730 --> 00:13:16,970
smaller jQuery so if you're looking in

00:13:15,050 --> 00:13:19,500
the dependencies for the library it will

00:13:16,970 --> 00:13:21,830
load its own smaller jQuery if you

00:13:19,500 --> 00:13:24,930
have one if you have one they'll load

00:13:21,830 --> 00:13:27,690
2.1 if it's if you have one that's 2.1

00:13:24,930 --> 00:13:31,800
and up then they will use that and not

00:13:27,690 --> 00:13:33,900
load their own so so a strength of

00:13:31,800 --> 00:13:35,790
angular so it's a shorter low context

00:13:33,900 --> 00:13:37,800
setup it's really easy to get started in

00:13:35,790 --> 00:13:39,660
angular which is a very positive thing

00:13:37,800 --> 00:13:41,250
especially in the world of intimidating

00:13:39,660 --> 00:13:43,230
JavaScript frameworks it's a long

00:13:41,250 --> 00:13:45,450
feature list so you get a lot for not a

00:13:43,230 --> 00:13:47,880
very heavy library module friendly

00:13:45,450 --> 00:13:50,010
that's both for writing your own modules

00:13:47,880 --> 00:13:51,960
and for using other people's modules so

00:13:50,010 --> 00:13:54,920
that's pretty cool and of course people

00:13:51,960 --> 00:13:58,530
are happy with a major industry backing

00:13:54,920 --> 00:14:00,290
having a you know a heavy weight like

00:13:58,530 --> 00:14:02,940
Google behind it is seen as a positive

00:14:00,290 --> 00:14:04,950
the weakness is the the first point that

00:14:02,940 --> 00:14:06,750
recent rise to prominence means less

00:14:04,950 --> 00:14:09,360
time this will by nature of the beast

00:14:06,750 --> 00:14:12,390
this is less true over time it just it

00:14:09,360 --> 00:14:13,710
just is so there's a longer that bullet

00:14:12,390 --> 00:14:16,050
stays there the longer things during

00:14:13,710 --> 00:14:18,090
production and there is also a high

00:14:16,050 --> 00:14:20,400
lock-in to writing behavior in your

00:14:18,090 --> 00:14:24,240
markup so that that's also a thing that

00:14:20,400 --> 00:14:25,800
angular has a a paradigm shift so what

00:14:24,240 --> 00:14:28,020
you're when you write directives you're

00:14:25,800 --> 00:14:30,510
writing behavior in your markup and it

00:14:28,020 --> 00:14:32,220
doesn't make it easy to do angular in

00:14:30,510 --> 00:14:35,220
one place and not and use something

00:14:32,220 --> 00:14:37,380
other than angular in another place they

00:14:35,220 --> 00:14:39,960
also skeptics for the future roadmap or

00:14:37,380 --> 00:14:41,430
Google backing there's angular 2 is

00:14:39,960 --> 00:14:43,860
coming out people are somewhat nervous

00:14:41,430 --> 00:14:46,230
about it i'll briefly mention it and and

00:14:43,860 --> 00:14:48,210
then of course you know the downside of

00:14:46,230 --> 00:14:50,370
major industry backing is that it's only

00:14:48,210 --> 00:14:52,560
major industry back so long as it makes

00:14:50,370 --> 00:14:53,910
sense for them to back it and there's

00:14:52,560 --> 00:14:55,710
even a whole Pinterest board that you

00:14:53,910 --> 00:14:57,000
can see about Google abandonware if you

00:14:55,710 --> 00:15:00,750
want to check that out this pretty

00:14:57,000 --> 00:15:01,740
depressing but some people are worried

00:15:00,750 --> 00:15:03,600
about that and I think that's that's

00:15:01,740 --> 00:15:05,850
fair so there's generally fear abandoned

00:15:03,600 --> 00:15:07,320
where which is you know it's a worry in

00:15:05,850 --> 00:15:09,270
JavaScript framework so band and we're

00:15:07,320 --> 00:15:11,490
being you know I've used this software

00:15:09,270 --> 00:15:13,290
and now like now everyone's you know

00:15:11,490 --> 00:15:18,000
drop support for it and told me to go

00:15:13,290 --> 00:15:20,130
away 1.3 in fact dropped I the version

00:15:18,000 --> 00:15:21,839
of angular dropped ie8 support which

00:15:20,130 --> 00:15:23,220
left some people who had chosen angular

00:15:21,839 --> 00:15:24,980
specifically because it still had I

00:15:23,220 --> 00:15:28,500
eight support in a bad position because

00:15:24,980 --> 00:15:30,300
they can't drop it because I II for a

00:15:28,500 --> 00:15:31,470
lot of people is not an option to drop

00:15:30,300 --> 00:15:32,240
especially if you're working with

00:15:31,470 --> 00:15:35,240
international

00:15:32,240 --> 00:15:37,430
if you ship internationally you can't

00:15:35,240 --> 00:15:39,950
necessarily drop by eight so there so

00:15:37,430 --> 00:15:41,240
there's worries about abandon we're all

00:15:39,950 --> 00:15:42,560
right now we're gonna talk about the the

00:15:41,240 --> 00:15:44,810
key components of English so the things

00:15:42,560 --> 00:15:48,980
that you get you get modules directives

00:15:44,810 --> 00:15:51,170
services and controllers so a module so

00:15:48,980 --> 00:15:53,360
every angular app has a you know at

00:15:51,170 --> 00:15:56,000
least one module because app itself is a

00:15:53,360 --> 00:15:59,120
module so this is if we create an app

00:15:56,000 --> 00:16:01,820
and angular module the name and then

00:15:59,120 --> 00:16:04,970
this is this empty brackets which is an

00:16:01,820 --> 00:16:06,320
empty array is our dependencies so right

00:16:04,970 --> 00:16:08,690
now this just as it doesn't have any

00:16:06,320 --> 00:16:11,120
dependencies and then we declare the app

00:16:08,690 --> 00:16:12,649
with ng-app and that that actually is if

00:16:11,120 --> 00:16:14,450
you've loading your on the page like

00:16:12,649 --> 00:16:16,490
this is declaring an angular app so it

00:16:14,450 --> 00:16:18,260
is really quick to get started and i

00:16:16,490 --> 00:16:20,029
also think angular is really interesting

00:16:18,260 --> 00:16:21,500
for especially prototyping because

00:16:20,029 --> 00:16:24,440
you're writing your behavior directly

00:16:21,500 --> 00:16:25,850
into your document so if you're coding

00:16:24,440 --> 00:16:28,010
if you're touching the document a lot

00:16:25,850 --> 00:16:29,810
and moving things around and moving the

00:16:28,010 --> 00:16:33,830
behavior and it could be really nice for

00:16:29,810 --> 00:16:35,540
prototyping so directed so this is the

00:16:33,830 --> 00:16:37,579
if you if you think angular think about

00:16:35,540 --> 00:16:39,950
directives so this is the example the

00:16:37,579 --> 00:16:42,079
fun example of making your own element

00:16:39,950 --> 00:16:44,060
which is going to appear in other

00:16:42,079 --> 00:16:46,040
frameworks as well so this we create a

00:16:44,060 --> 00:16:47,930
directive unicorn and restrict e to make

00:16:46,040 --> 00:16:50,020
it an element and so that's the down

00:16:47,930 --> 00:16:52,880
there at the bottom of a unicorn element

00:16:50,020 --> 00:16:54,350
you know this you know you might say to

00:16:52,880 --> 00:16:57,860
yourself I don't see the super useful in

00:16:54,350 --> 00:17:01,700
production you might be right but the

00:16:57,860 --> 00:17:03,649
there's also there if you see extra

00:17:01,700 --> 00:17:04,910
behavior in the mark-up it's all it's

00:17:03,649 --> 00:17:06,770
all directives so that's that's really

00:17:04,910 --> 00:17:08,449
what a directive is is putting that

00:17:06,770 --> 00:17:11,050
behavior in the markets ong in it is a

00:17:08,449 --> 00:17:14,569
directive ng-repeat is a directive and

00:17:11,050 --> 00:17:17,390
so you might suspect that what ng and it

00:17:14,569 --> 00:17:22,819
does is it's loading data into angular

00:17:17,390 --> 00:17:23,990
and then ng-repeat is is a loop so we're

00:17:22,819 --> 00:17:26,150
saying okay we're going to make table

00:17:23,990 --> 00:17:28,700
rows and for properties and properties

00:17:26,150 --> 00:17:29,900
do that so you get a lot of built-in

00:17:28,700 --> 00:17:31,490
directives there's quite a lot of them

00:17:29,900 --> 00:17:34,400
in angular so that's what you'll you'll

00:17:31,490 --> 00:17:36,260
end up using a lot of you know before

00:17:34,400 --> 00:17:38,150
you end up writing your own and then

00:17:36,260 --> 00:17:40,220
those curly braces braces there that's

00:17:38,150 --> 00:17:43,640
data binding so that's binding to the

00:17:40,220 --> 00:17:46,650
property and properties

00:17:43,640 --> 00:17:49,410
so services are another component of

00:17:46,650 --> 00:17:51,270
angular and what the benefits of

00:17:49,410 --> 00:17:52,710
services that it was very helpful for

00:17:51,270 --> 00:17:55,140
them I just realized this is probably

00:17:52,710 --> 00:17:57,240
small for you all but Singleton's to

00:17:55,140 --> 00:17:59,430
inject into any angular component so

00:17:57,240 --> 00:18:01,680
again with the the high-level language

00:17:59,430 --> 00:18:05,070
maybe not being as necessary but let's

00:18:01,680 --> 00:18:06,660
review singleton is so in javascript is

00:18:05,070 --> 00:18:08,580
really easy to accidentally create the

00:18:06,660 --> 00:18:09,960
same object over and over again and when

00:18:08,580 --> 00:18:11,940
you're doing that you're burning memory

00:18:09,960 --> 00:18:13,680
and wasting space and it's generally a

00:18:11,940 --> 00:18:15,600
bad idea and people you're also probably

00:18:13,680 --> 00:18:18,090
pop causing a memory leak somehow and

00:18:15,600 --> 00:18:19,860
generally a bad time services protect

00:18:18,090 --> 00:18:21,210
you from such things so it is a

00:18:19,860 --> 00:18:23,040
singleton so that when you create the

00:18:21,210 --> 00:18:26,730
service there shall be one what there

00:18:23,040 --> 00:18:29,340
should be only one the Highlander and so

00:18:26,730 --> 00:18:31,800
you can rely on there will be only one

00:18:29,340 --> 00:18:34,410
service additionally it's lazily

00:18:31,800 --> 00:18:36,360
instantiated meaning that you can create

00:18:34,410 --> 00:18:38,610
you can write out the service but until

00:18:36,360 --> 00:18:41,610
you use it it is not instantiated so

00:18:38,610 --> 00:18:43,620
it's lazy so that's good for performance

00:18:41,610 --> 00:18:45,870
reasons makes it quick to get started

00:18:43,620 --> 00:18:48,330
and you know can help with your

00:18:45,870 --> 00:18:50,130
performance of your application and even

00:18:48,330 --> 00:18:52,260
within this is this service this example

00:18:50,130 --> 00:18:54,720
of service is a factory it gets

00:18:52,260 --> 00:18:57,540
properties and actually the HTTP itself

00:18:54,720 --> 00:18:59,460
that is a service itself so using HTTP

00:18:57,540 --> 00:19:01,080
service to get data this is getting a

00:18:59,460 --> 00:19:04,110
static file but you can imagine it

00:19:01,080 --> 00:19:09,210
making an API call it wouldn't be that

00:19:04,110 --> 00:19:10,350
different and then returning the data so

00:19:09,210 --> 00:19:12,600
once you once you have a service you

00:19:10,350 --> 00:19:15,780
could use a controller to augment scope

00:19:12,600 --> 00:19:18,480
so scope is is the world and angular so

00:19:15,780 --> 00:19:20,970
it's what the view gets to consume so

00:19:18,480 --> 00:19:22,590
you can this is where an anti-pattern

00:19:20,970 --> 00:19:25,860
can come in as you can do whatever you

00:19:22,590 --> 00:19:28,380
want with scope but hopefully you use it

00:19:25,860 --> 00:19:29,940
in smart ways so in controllers we by

00:19:28,380 --> 00:19:33,720
and large these so this is writing the

00:19:29,940 --> 00:19:37,200
controller so properties controller we

00:19:33,720 --> 00:19:39,570
you know we have using scope properties

00:19:37,200 --> 00:19:41,700
that service and so we get those

00:19:39,570 --> 00:19:44,610
properties and then attach those

00:19:41,700 --> 00:19:45,750
properties to the scope so and the the

00:19:44,610 --> 00:19:47,340
nice thing about the services that they

00:19:45,750 --> 00:19:49,470
were pretty smart that they they return

00:19:47,340 --> 00:19:52,560
to promise and then we use that promise

00:19:49,470 --> 00:19:53,260
to resolve into attaching to our scope

00:19:52,560 --> 00:19:55,060
and

00:19:53,260 --> 00:19:58,960
and it all glues together pretty well

00:19:55,060 --> 00:20:00,700
and so if you're so that's writing the

00:19:58,960 --> 00:20:02,800
controller using the controller is using

00:20:00,700 --> 00:20:04,510
a directive to attach that controller

00:20:02,800 --> 00:20:06,310
and so this is modified from our

00:20:04,510 --> 00:20:08,890
previous example where we had ng in it

00:20:06,310 --> 00:20:11,010
so instead of ng in it we're attaching

00:20:08,890 --> 00:20:13,540
that data in through the controller

00:20:11,010 --> 00:20:16,810
augmenting the scope and binding our

00:20:13,540 --> 00:20:18,160
business logic to the view so other

00:20:16,810 --> 00:20:20,680
things you get an angular you get quite

00:20:18,160 --> 00:20:22,720
a bit you get a lot of filters a lot of

00:20:20,680 --> 00:20:24,850
simply useful things like currency

00:20:22,720 --> 00:20:27,970
filters internationalisation filter well

00:20:24,850 --> 00:20:30,450
as on their time things like that

00:20:27,970 --> 00:20:33,220
animations there's a nice animations

00:20:30,450 --> 00:20:35,860
ability in angular internationalization

00:20:33,220 --> 00:20:38,170
and localization accessibility tooling

00:20:35,860 --> 00:20:39,670
with ng area and then I already are big

00:20:38,170 --> 00:20:41,410
fan of the testing tools karma and

00:20:39,670 --> 00:20:43,870
protractor so definitely check them out

00:20:41,410 --> 00:20:46,450
or regardless so the big caveat though

00:20:43,870 --> 00:20:48,760
with angular is angular 2 is coming and

00:20:46,450 --> 00:20:50,470
angular 2 is scaring a lot of people

00:20:48,760 --> 00:20:52,540
because it is a complete rewrite with no

00:20:50,470 --> 00:20:55,030
backwards compatibility which is like

00:20:52,540 --> 00:20:58,240
not what you want to hear it sounds like

00:20:55,030 --> 00:21:00,460
really bad news it's not that bad is not

00:20:58,240 --> 00:21:02,290
really bad news it is it is just

00:21:00,460 --> 00:21:04,600
something to be aware of there is

00:21:02,290 --> 00:21:08,140
generally an expectation angular 2 moves

00:21:04,600 --> 00:21:10,240
to typescript which is a trans pile to

00:21:08,140 --> 00:21:12,460
JavaScript language that is really so

00:21:10,240 --> 00:21:13,990
es6 yes 2015 the next version of

00:21:12,460 --> 00:21:17,340
JavaScript essentially with type

00:21:13,990 --> 00:21:20,320
annotations it's really I liked I script

00:21:17,340 --> 00:21:21,790
but it's something to consider I if

00:21:20,320 --> 00:21:24,580
you're interested more in the angular 2

00:21:21,790 --> 00:21:26,650
aspect there's an NG comp video from

00:21:24,580 --> 00:21:29,410
this year called angular 1 Mesa angular

00:21:26,650 --> 00:21:31,960
2 that I've heard recommended and then

00:21:29,410 --> 00:21:34,780
additionally the version of angular 1.4

00:21:31,960 --> 00:21:38,680
has a new router in it which will make

00:21:34,780 --> 00:21:40,750
it make it able for you to you get me to

00:21:38,680 --> 00:21:42,280
update incrementally to two point oh so

00:21:40,750 --> 00:21:44,890
that's really important so that you

00:21:42,280 --> 00:21:46,030
don't have to the big dreaded like oh no

00:21:44,890 --> 00:21:49,210
now we're going to have to like throw

00:21:46,030 --> 00:21:51,340
all of our one star code in the bin and

00:21:49,210 --> 00:21:53,530
completely rewrite know you'll be able

00:21:51,340 --> 00:21:55,420
to update incrementally because you know

00:21:53,530 --> 00:21:56,830
with one and once you upgrade in 1.4

00:21:55,420 --> 00:21:58,990
that's the upgrade you want to make and

00:21:56,830 --> 00:22:02,230
then you can upgrade intrumental e to

00:21:58,990 --> 00:22:03,700
two point O wants us out so the docs

00:22:02,230 --> 00:22:06,520
from angular are actually really good

00:22:03,700 --> 00:22:08,860
the guide API tutorial I

00:22:06,520 --> 00:22:11,950
because you know it can be easy to get

00:22:08,860 --> 00:22:14,170
intimidated by the you know trans

00:22:11,950 --> 00:22:17,890
cluding your directives and your you

00:22:14,170 --> 00:22:20,380
know singleton services language but it

00:22:17,890 --> 00:22:22,090
really is you know don't be afraid to

00:22:20,380 --> 00:22:24,820
Google of stuff it really it I don't

00:22:22,090 --> 00:22:28,090
know why they they need a good you know

00:22:24,820 --> 00:22:30,700
educator just to go at it and fix it up

00:22:28,090 --> 00:22:34,330
but the docs themselves are really good

00:22:30,700 --> 00:22:36,850
and additionally I the docs egghead is

00:22:34,330 --> 00:22:38,620
is quite a popular service that's really

00:22:36,850 --> 00:22:40,660
good and not just for angular so a guy

00:22:38,620 --> 00:22:44,680
got started with angular so Wes wise in

00:22:40,660 --> 00:22:46,510
here but they is short videos that have

00:22:44,680 --> 00:22:48,430
good good information about JavaScript

00:22:46,510 --> 00:22:50,350
frameworks and angular air is a live

00:22:48,430 --> 00:22:51,370
video pockets that's a free free one so

00:22:50,350 --> 00:22:53,650
if you're interested in hearing what

00:22:51,370 --> 00:22:55,240
people are doing of late what people are

00:22:53,650 --> 00:22:58,660
talking about in the angular community I

00:22:55,240 --> 00:23:00,670
recommend that all right so ember so I

00:22:58,660 --> 00:23:02,410
would say call ember the most complete

00:23:00,670 --> 00:23:05,110
JavaScript framework it really it's

00:23:02,410 --> 00:23:07,660
highly opinionated there there is a

00:23:05,110 --> 00:23:09,070
white right way to do things it's built

00:23:07,660 --> 00:23:11,290
completely on modular open source

00:23:09,070 --> 00:23:12,550
components which should be you know

00:23:11,290 --> 00:23:15,070
probably of interest to this conference

00:23:12,550 --> 00:23:18,580
and it's community superpowers so the

00:23:15,070 --> 00:23:20,530
Ember community so if you know if Google

00:23:18,580 --> 00:23:22,500
if angular is powered by google than

00:23:20,530 --> 00:23:25,120
Emperor's powered by its community is

00:23:22,500 --> 00:23:27,280
completely powered by great community

00:23:25,120 --> 00:23:28,270
things so when you get from it the

00:23:27,280 --> 00:23:30,790
feature list is going to look pretty

00:23:28,270 --> 00:23:32,740
similar to to angular these you get

00:23:30,790 --> 00:23:34,540
stronger they find MVC components data

00:23:32,740 --> 00:23:36,850
binding ember components which are

00:23:34,540 --> 00:23:39,910
comparable to directives great routing

00:23:36,850 --> 00:23:42,370
support depending see injection you also

00:23:39,910 --> 00:23:45,820
the entry path for ember now is using

00:23:42,370 --> 00:23:48,130
the CLI tool which so it does some code

00:23:45,820 --> 00:23:50,140
generation for you which trade-offs on

00:23:48,130 --> 00:23:52,180
that there will be opinions and

00:23:50,140 --> 00:23:54,460
debugging tools you download ember

00:23:52,180 --> 00:23:56,170
inspector because it is pretty tricky

00:23:54,460 --> 00:23:59,080
when you're working the single page web

00:23:56,170 --> 00:24:01,630
apps to be able to have a good debugging

00:23:59,080 --> 00:24:03,460
tool to be able to dive in in your

00:24:01,630 --> 00:24:06,040
browser and it's back the model and all

00:24:03,460 --> 00:24:08,200
that kind of good tooling so now the

00:24:06,040 --> 00:24:10,960
ember CLI is the standard way to start

00:24:08,200 --> 00:24:13,720
at an ember app you the dependencies are

00:24:10,960 --> 00:24:16,030
known and mpm because you you install

00:24:13,720 --> 00:24:17,710
this tool and then run it so I would say

00:24:16,030 --> 00:24:19,090
the strings for ember are the community

00:24:17,710 --> 00:24:20,590
that's really the number one

00:24:19,090 --> 00:24:23,860
amber community is pretty eventful

00:24:20,590 --> 00:24:27,550
addict in a very in a very good way and

00:24:23,860 --> 00:24:29,200
that is convention driven so that once

00:24:27,550 --> 00:24:31,090
you know the right way to do things like

00:24:29,200 --> 00:24:32,770
it should just kind of make sense and if

00:24:31,090 --> 00:24:35,050
you write it according to how you used

00:24:32,770 --> 00:24:37,000
to writing it then it should work that's

00:24:35,050 --> 00:24:38,500
the ideal world and there's

00:24:37,000 --> 00:24:40,480
commonalities with every other ember app

00:24:38,500 --> 00:24:42,130
because there's kind of this standard of

00:24:40,480 --> 00:24:44,980
practice and their standard way to do

00:24:42,130 --> 00:24:46,690
things and the code generation tools and

00:24:44,980 --> 00:24:48,310
templates because you know once you get

00:24:46,690 --> 00:24:50,140
started it's done a lot of work for you

00:24:48,310 --> 00:24:52,570
so sometimes there's too much

00:24:50,140 --> 00:24:54,220
information there's some you know their

00:24:52,570 --> 00:24:55,690
guides are really good but sometimes

00:24:54,220 --> 00:24:58,300
they're very long and there's a lot of

00:24:55,690 --> 00:24:59,710
them so it can be easy to get lost in

00:24:58,300 --> 00:25:01,390
the documentation or knowing what

00:24:59,710 --> 00:25:04,510
documentation applies to what you are

00:25:01,390 --> 00:25:06,070
doing and the fact that there is a right

00:25:04,510 --> 00:25:07,780
way to do things the trade off of that

00:25:06,070 --> 00:25:09,880
is that it's difficult to get up to

00:25:07,780 --> 00:25:12,880
speed quickly because you there's like

00:25:09,880 --> 00:25:14,530
learning curve of doing it some way and

00:25:12,880 --> 00:25:17,290
then figuring out the right way to do it

00:25:14,530 --> 00:25:18,880
and so that can be a challenge it's also

00:25:17,290 --> 00:25:20,350
not as pervasive as the other two major

00:25:18,880 --> 00:25:23,020
frameworks but I don't really think that

00:25:20,350 --> 00:25:25,690
that's people are interested in that but

00:25:23,020 --> 00:25:27,250
it's not that much of a weakness I think

00:25:25,690 --> 00:25:30,550
the Ember will at this point you know be

00:25:27,250 --> 00:25:32,230
around for a while so key components so

00:25:30,550 --> 00:25:35,200
things you you get with ember you get

00:25:32,230 --> 00:25:38,350
templating by handlebars which also it

00:25:35,200 --> 00:25:39,760
looks like those curly braces models

00:25:38,350 --> 00:25:42,190
routes components controllers

00:25:39,760 --> 00:25:44,350
controllers are actually going to kind

00:25:42,190 --> 00:25:45,760
of phase out because for at least

00:25:44,350 --> 00:25:47,260
according to the docs that says at the

00:25:45,760 --> 00:25:49,300
moment components cannot be routed to

00:25:47,260 --> 00:25:50,590
but when it changes they're going to

00:25:49,300 --> 00:25:53,740
recommend that you replace all

00:25:50,590 --> 00:25:55,660
controllers with components so that's

00:25:53,740 --> 00:25:58,780
the kind of standard way now that ember

00:25:55,660 --> 00:26:00,280
to has come out so when the walkthrough

00:25:58,780 --> 00:26:02,920
will go through some of those components

00:26:00,280 --> 00:26:05,260
just the getting started routes models

00:26:02,920 --> 00:26:06,790
and components so as I said the Ember

00:26:05,260 --> 00:26:10,150
the entry point to ember is now the

00:26:06,790 --> 00:26:12,370
ember CLI tool and so this is true for

00:26:10,150 --> 00:26:14,980
number two and up so that's what this

00:26:12,370 --> 00:26:17,110
this app is doing so we install ember

00:26:14,980 --> 00:26:19,780
CLI globally using our handy NPM install

00:26:17,110 --> 00:26:23,950
you get that ember command and then a

00:26:19,780 --> 00:26:26,500
lot of keywords so amber new this looks

00:26:23,950 --> 00:26:28,570
very rarely to me so amber new new app

00:26:26,500 --> 00:26:30,580
change the new app and then you you

00:26:28,570 --> 00:26:31,860
already have a server command to run

00:26:30,580 --> 00:26:35,070
Amber server

00:26:31,860 --> 00:26:37,350
and that command does all this so it

00:26:35,070 --> 00:26:40,049
this is it gives you a whole set of

00:26:37,350 --> 00:26:42,660
files and directories of where things

00:26:40,049 --> 00:26:44,460
are supposed to go and the fact that it

00:26:42,660 --> 00:26:46,110
you know it gets all these dependencies

00:26:44,460 --> 00:26:48,420
they even starts we get I really like

00:26:46,110 --> 00:26:53,370
that because it's just like you have get

00:26:48,420 --> 00:26:55,140
set up deal with it so that so it's

00:26:53,370 --> 00:26:57,270
there's a standard of practice in the

00:26:55,140 --> 00:26:59,250
community that they really want to try

00:26:57,270 --> 00:27:01,470
and get you into good habits right away

00:26:59,250 --> 00:27:04,679
so it's ready to go you can run a server

00:27:01,470 --> 00:27:06,630
and with just doing doing this with just

00:27:04,679 --> 00:27:09,990
a little bit of static asset updating

00:27:06,630 --> 00:27:12,480
it's not a big deal so generating a

00:27:09,990 --> 00:27:15,750
route so all these examples pretty much

00:27:12,480 --> 00:27:17,250
will use the ember CLI tool because

00:27:15,750 --> 00:27:19,169
that's that's kind of the way to do

00:27:17,250 --> 00:27:21,390
amber things now and you'll notice that

00:27:19,169 --> 00:27:24,000
this is an es6 intact so that's this is

00:27:21,390 --> 00:27:28,799
a especially from ember to up that is

00:27:24,000 --> 00:27:30,840
defaults to es6 syntax and so it's nice

00:27:28,799 --> 00:27:33,620
because it so this it kind of starts

00:27:30,840 --> 00:27:37,410
this way so then we added this model

00:27:33,620 --> 00:27:41,130
section so rats are a first class

00:27:37,410 --> 00:27:42,990
citizen in amber and so even in our

00:27:41,130 --> 00:27:45,900
route if we define a model right here

00:27:42,990 --> 00:27:47,790
and it's a JSON file amber is smart

00:27:45,900 --> 00:27:49,799
enough to say okay you gave me a

00:27:47,790 --> 00:27:52,110
well-formed JSON file with an array of

00:27:49,799 --> 00:27:54,510
objects I'm going to assume you want me

00:27:52,110 --> 00:27:56,160
to make a model out of those and embers

00:27:54,510 --> 00:27:58,679
in fact right that's exactly what I

00:27:56,160 --> 00:28:01,860
wanted it to do so so there's there's

00:27:58,679 --> 00:28:04,440
some magic that happens opinions on that

00:28:01,860 --> 00:28:06,720
but but that's how it works so and if

00:28:04,440 --> 00:28:08,820
you want if you want or need to generate

00:28:06,720 --> 00:28:10,559
a model to be more explicit about how

00:28:08,820 --> 00:28:13,410
your modeling your data it's ember

00:28:10,559 --> 00:28:16,470
generate model the name the attributes

00:28:13,410 --> 00:28:19,679
and their types and Saudis right here

00:28:16,470 --> 00:28:22,919
stands for data store and so it's as

00:28:19,679 --> 00:28:25,620
easy as that and so and even then it's

00:28:22,919 --> 00:28:27,299
pretty easy to see that you know I think

00:28:25,620 --> 00:28:30,510
it would be pretty tedious to put all of

00:28:27,299 --> 00:28:33,570
your things over here but it is just a

00:28:30,510 --> 00:28:35,520
JavaScript object and so you know what

00:28:33,570 --> 00:28:39,090
to do you can look up the valid types

00:28:35,520 --> 00:28:41,640
and and craft it yourself all right on

00:28:39,090 --> 00:28:44,050
to ember components of ember components

00:28:41,640 --> 00:28:46,630
closely or at least attempt to close

00:28:44,050 --> 00:28:48,190
map against web components and they

00:28:46,630 --> 00:28:49,930
contain a template representing

00:28:48,190 --> 00:28:52,630
presentation and markup and behavior

00:28:49,930 --> 00:28:54,970
which is JavaScript so we're going to

00:28:52,630 --> 00:28:57,520
take a short detour in which will resume

00:28:54,970 --> 00:28:58,810
in a moment but on this detour we're

00:28:57,520 --> 00:29:00,250
guitar about web components that what

00:28:58,810 --> 00:29:02,680
web components are is that they are

00:29:00,250 --> 00:29:05,290
comprised to multiple standards that are

00:29:02,680 --> 00:29:07,090
not yet implemented across browsers so

00:29:05,290 --> 00:29:09,550
those are the four standards we'll come

00:29:07,090 --> 00:29:11,470
back to it web components org is the the

00:29:09,550 --> 00:29:13,210
place for the info but we're going to

00:29:11,470 --> 00:29:14,620
resume the detour in a minute so it's

00:29:13,210 --> 00:29:17,170
all right I just need to put it there so

00:29:14,620 --> 00:29:19,780
we can do this so this is defining a

00:29:17,170 --> 00:29:21,700
component so ember generate component

00:29:19,780 --> 00:29:24,510
and then the name of the component they

00:29:21,700 --> 00:29:26,800
do have to have a dash so that you are

00:29:24,510 --> 00:29:28,990
guaranteed to never come flecked with a

00:29:26,800 --> 00:29:31,930
future HTML element so that if you you

00:29:28,990 --> 00:29:34,600
know imagine if it's existed or you know

00:29:31,930 --> 00:29:36,520
if you named it slider or something like

00:29:34,600 --> 00:29:38,380
that without a dash there could directly

00:29:36,520 --> 00:29:39,700
be like a slider element that could come

00:29:38,380 --> 00:29:42,370
out in the HTML spec so it's supposed to

00:29:39,700 --> 00:29:45,460
prevent conflicts and that dash dash pod

00:29:42,370 --> 00:29:46,900
command that's an extra argument that

00:29:45,460 --> 00:29:49,180
you can put on there to put them in the

00:29:46,900 --> 00:29:51,070
same folder if you don't do that and

00:29:49,180 --> 00:29:53,950
which I like that because it maps more

00:29:51,070 --> 00:29:56,440
closely to how web components work and

00:29:53,950 --> 00:30:00,910
if you don't do that is not bad like

00:29:56,440 --> 00:30:02,890
it's just the behavior will be in that

00:30:00,910 --> 00:30:05,050
components folder and then the template

00:30:02,890 --> 00:30:06,250
would be in the templates folder so it's

00:30:05,050 --> 00:30:07,990
just different I like to keep these

00:30:06,250 --> 00:30:10,120
things together and then in order to use

00:30:07,990 --> 00:30:12,990
it it looks like the data binding but

00:30:10,120 --> 00:30:15,190
it's actually doing the Ember component

00:30:12,990 --> 00:30:17,020
so if some resources for that the

00:30:15,190 --> 00:30:19,420
Emperor guides are really fantastic if

00:30:17,020 --> 00:30:20,950
you know sometimes overwhelming if

00:30:19,420 --> 00:30:23,170
you're interested in seeing you know

00:30:20,950 --> 00:30:25,270
more real-time news ember watch is

00:30:23,170 --> 00:30:26,680
really good it has a lot of there's even

00:30:25,270 --> 00:30:28,630
you know sections on it that are just

00:30:26,680 --> 00:30:30,610
for tutorials so you can just go to the

00:30:28,630 --> 00:30:33,640
tutorial section and see some tutorials

00:30:30,610 --> 00:30:36,460
and then ember CLI 101 book especially

00:30:33,640 --> 00:30:38,800
because ember CLI is now the entry point

00:30:36,460 --> 00:30:41,020
to ember and getting starting number it

00:30:38,800 --> 00:30:44,110
would behoove you to if you want to do

00:30:41,020 --> 00:30:45,190
ember to get good at ember CLI system

00:30:44,110 --> 00:30:47,770
rising stories we're going to talk about

00:30:45,190 --> 00:30:49,360
polymer first so that we can resume our

00:30:47,770 --> 00:30:50,950
detour back into web components so

00:30:49,360 --> 00:30:53,950
polymer is a

00:30:50,950 --> 00:30:57,159
e is a framework tool that allows you to

00:30:53,950 --> 00:31:00,309
use web components you can also see ex

00:30:57,159 --> 00:31:02,380
tags from Mozilla similar project so

00:31:00,309 --> 00:31:04,210
resuming that detour these are those for

00:31:02,380 --> 00:31:06,580
specs again more more easy to read

00:31:04,210 --> 00:31:08,500
hopefully you got custom elements HTML

00:31:06,580 --> 00:31:10,389
imports templates and shadow DOM and

00:31:08,500 --> 00:31:12,519
these specs are all in working draft

00:31:10,389 --> 00:31:14,350
which means that none of them were

00:31:12,519 --> 00:31:16,210
finalized their some of them are

00:31:14,350 --> 00:31:18,399
implemented in browsers but generally

00:31:16,210 --> 00:31:20,380
they're implemented probably because the

00:31:18,399 --> 00:31:22,659
browser wants to push for other browsers

00:31:20,380 --> 00:31:24,659
to adopt it so they're still very much

00:31:22,659 --> 00:31:27,639
in flux and they're still changing and

00:31:24,659 --> 00:31:29,639
so in order to use them you use the web

00:31:27,639 --> 00:31:32,710
components j/s polyfills that's what

00:31:29,639 --> 00:31:34,000
polymer is built on top of and the

00:31:32,710 --> 00:31:35,409
difference between polymer and web

00:31:34,000 --> 00:31:38,590
components because they are not the same

00:31:35,409 --> 00:31:41,919
thing it's more like jquery is to the

00:31:38,590 --> 00:31:44,620
dom is to polymer is to web components

00:31:41,919 --> 00:31:46,120
is that polymer is more like a nice

00:31:44,620 --> 00:31:47,649
interface for getting at this web

00:31:46,120 --> 00:31:49,690
component stuff to make it a little bit

00:31:47,649 --> 00:31:52,120
easier for you to mess with you can

00:31:49,690 --> 00:31:54,039
totally do it without it if you want but

00:31:52,120 --> 00:31:55,929
it's it's you know people are liking

00:31:54,039 --> 00:31:59,320
polymer and so there's there's more

00:31:55,929 --> 00:32:00,519
tools getting built around it as for you

00:31:59,320 --> 00:32:02,320
know the question with any emerging

00:32:00,519 --> 00:32:04,990
standards so do we have the standard yet

00:32:02,320 --> 00:32:07,809
this chart looks pretty good however

00:32:04,990 --> 00:32:10,630
I'll point out that this is flag not

00:32:07,809 --> 00:32:13,029
stable which means that your users would

00:32:10,630 --> 00:32:17,230
have to be the kind of users to open up

00:32:13,029 --> 00:32:20,470
their settings and enable the flag which

00:32:17,230 --> 00:32:22,679
is yeah I wouldn't put that as green but

00:32:20,470 --> 00:32:25,269
in general so this is there's not wide

00:32:22,679 --> 00:32:29,649
wide implementation of web component

00:32:25,269 --> 00:32:32,260
standards as yet so looking at a simple

00:32:29,649 --> 00:32:33,880
polymer component so at the beginning of

00:32:32,260 --> 00:32:36,220
a polymer component so this is we're

00:32:33,880 --> 00:32:37,720
putting all that like remembers like my

00:32:36,220 --> 00:32:40,149
camera components like drug does like us

00:32:37,720 --> 00:32:43,120
all we're putting putting markup and

00:32:40,149 --> 00:32:46,539
behavior all together so we've got our

00:32:43,120 --> 00:32:48,010
link rel to import polymer Oh jumped

00:32:46,539 --> 00:32:50,830
ahead and then we've got a template and

00:32:48,010 --> 00:32:53,620
then we can define style for that

00:32:50,830 --> 00:32:56,350
template and any HTML content to be

00:32:53,620 --> 00:32:59,710
enclosed into that into that element

00:32:56,350 --> 00:33:01,730
then we instantiate it with polymer that

00:32:59,710 --> 00:33:03,860
polymer is my component

00:33:01,730 --> 00:33:06,260
and that name is is passed all the way

00:33:03,860 --> 00:33:09,080
through so we've got my component is my

00:33:06,260 --> 00:33:11,210
component and then using it like we like

00:33:09,080 --> 00:33:13,820
we just invented our own HTML tag and

00:33:11,210 --> 00:33:16,310
the way I conceptualize or especially

00:33:13,820 --> 00:33:18,020
like to explain web components is you

00:33:16,310 --> 00:33:20,810
think of the Select tag the Select tag

00:33:18,020 --> 00:33:22,880
is a tag that has a known general

00:33:20,810 --> 00:33:24,290
presentation it's got you know you click

00:33:22,880 --> 00:33:25,940
on it and then it drops down so it has a

00:33:24,290 --> 00:33:28,370
known behavior and it also has a known

00:33:25,940 --> 00:33:31,910
API you know how to get the value out of

00:33:28,370 --> 00:33:33,470
a select tag and so web components allow

00:33:31,910 --> 00:33:34,940
you to write things like that where you

00:33:33,470 --> 00:33:36,620
can control the presentation you can

00:33:34,940 --> 00:33:39,260
control the behavior you can control the

00:33:36,620 --> 00:33:43,010
API so how you get gotta in and out of

00:33:39,260 --> 00:33:44,210
it some resources for polymer apologies

00:33:43,010 --> 00:33:46,970
for that being at the bottom but there's

00:33:44,210 --> 00:33:49,850
a bitly link at the bottom that has even

00:33:46,970 --> 00:33:52,220
more and they're actually from my buddy

00:33:49,850 --> 00:33:53,690
JB who's on the polymer podcast I asked

00:33:52,220 --> 00:33:56,810
him for some resources and he sent me

00:33:53,690 --> 00:33:59,030
like a lot so there's there's a link to

00:33:56,810 --> 00:34:00,920
adjust their there's docs there's web

00:33:59,030 --> 00:34:02,780
component sleekly there's a slack so

00:34:00,920 --> 00:34:06,200
there's a lot of people talking about

00:34:02,780 --> 00:34:08,030
this so and there's places to go if

00:34:06,200 --> 00:34:09,980
you're interested all right talking

00:34:08,030 --> 00:34:12,290
about react so react considers

00:34:09,980 --> 00:34:14,000
themselves the the V and MVC so they're

00:34:12,290 --> 00:34:15,680
only the view layer they're leveraging

00:34:14,000 --> 00:34:18,410
the shadow Dom if which if you remember

00:34:15,680 --> 00:34:22,370
is one of those proposed proposed

00:34:18,410 --> 00:34:23,930
specifications and but honestly the the

00:34:22,370 --> 00:34:25,040
big deal that react and people get

00:34:23,930 --> 00:34:27,260
really sigh about it is that it's really

00:34:25,040 --> 00:34:29,750
performant is that touching the DOM is

00:34:27,260 --> 00:34:32,780
expensive and the way react works is by

00:34:29,750 --> 00:34:34,010
using a shadow Dom essentially the how

00:34:32,780 --> 00:34:36,860
it kind of works is I think of it like

00:34:34,010 --> 00:34:39,170
get discs so instead of touching the DOM

00:34:36,860 --> 00:34:40,730
and mutating a lot of things you do diff

00:34:39,170 --> 00:34:42,170
to figure out what you what you need to

00:34:40,730 --> 00:34:43,880
touch and then only touch that part

00:34:42,170 --> 00:34:45,740
because if you reduce the number of

00:34:43,880 --> 00:34:47,890
times a touch you you touch the Dom then

00:34:45,740 --> 00:34:52,790
you go faster that is that's how it goes

00:34:47,890 --> 00:34:54,440
and so even though shadow Dom isn't in

00:34:52,790 --> 00:34:56,060
browsers react is still super

00:34:54,440 --> 00:34:59,180
performance even poly filling for the

00:34:56,060 --> 00:35:00,920
behavior so here's a simple example of a

00:34:59,180 --> 00:35:02,750
react component lovingly taking from the

00:35:00,920 --> 00:35:04,790
react to torial and so you'll notice

00:35:02,750 --> 00:35:08,390
that to react create class and then we

00:35:04,790 --> 00:35:11,210
use reacts at Dom render down here to to

00:35:08,390 --> 00:35:13,040
attach the the comment box and you might

00:35:11,210 --> 00:35:14,990
especially notice this is the thing that

00:35:13,040 --> 00:35:15,270
people notice about react is what what

00:35:14,990 --> 00:35:17,040
is

00:35:15,270 --> 00:35:18,960
happening that you got HTML and my

00:35:17,040 --> 00:35:22,170
JavaScript what's going on so it's not

00:35:18,960 --> 00:35:25,440
HTML it's XML so what that is is

00:35:22,170 --> 00:35:27,300
actually jsx which is XML in your

00:35:25,440 --> 00:35:29,310
JavaScript it's one of the reasons that

00:35:27,300 --> 00:35:31,470
people had a hard time when react first

00:35:29,310 --> 00:35:33,360
came out people were badmouthing react

00:35:31,470 --> 00:35:34,860
like crazy because they said what are

00:35:33,360 --> 00:35:36,960
you doing we've worked like all our

00:35:34,860 --> 00:35:39,270
lives to make this not happen and then

00:35:36,960 --> 00:35:41,190
you went and did it on purpose in fact

00:35:39,270 --> 00:35:42,240
people are really enjoying it and it's

00:35:41,190 --> 00:35:43,680
going really well and if you're

00:35:42,240 --> 00:35:45,450
interested in react i encourage you to

00:35:43,680 --> 00:35:49,200
just drink the kool-aid and just go with

00:35:45,450 --> 00:35:51,120
j sx and you'll have a better time so so

00:35:49,200 --> 00:35:53,070
also i can't mention react without

00:35:51,120 --> 00:35:54,240
mentioning the flux architecture pattern

00:35:53,070 --> 00:35:55,710
so if you've heard reacting you've heard

00:35:54,240 --> 00:35:58,230
flux and you're like what the heck is

00:35:55,710 --> 00:36:00,630
flux it's an architecture pattern it is

00:35:58,230 --> 00:36:02,310
not a framework it's not a library it's

00:36:00,630 --> 00:36:04,440
an architecture pattern and it's a way

00:36:02,310 --> 00:36:06,990
of working with react so there are

00:36:04,440 --> 00:36:09,420
implementations of flux but there is not

00:36:06,990 --> 00:36:11,340
one true flux I mean there is like a

00:36:09,420 --> 00:36:12,600
flux but like a Facebook made an

00:36:11,340 --> 00:36:15,840
implementation of flux but it's not the

00:36:12,600 --> 00:36:17,220
one true way so you can use other

00:36:15,840 --> 00:36:20,100
people's implementations there's a lot

00:36:17,220 --> 00:36:23,130
of them competing right now I my

00:36:20,100 --> 00:36:24,900
personal pet favorite is redux also they

00:36:23,130 --> 00:36:26,640
all have really like similar names in a

00:36:24,900 --> 00:36:31,380
really annoying way there's redux and

00:36:26,640 --> 00:36:32,820
reflux and it's really annoying so but

00:36:31,380 --> 00:36:34,890
anyways a redux would be the one I

00:36:32,820 --> 00:36:36,570
recommend because is is built upon the

00:36:34,890 --> 00:36:38,250
flux pattern and then takes it a little

00:36:36,570 --> 00:36:41,220
bit farther into a reactive programming

00:36:38,250 --> 00:36:43,350
direction which I really like so so

00:36:41,220 --> 00:36:45,690
there's that it can totally change in

00:36:43,350 --> 00:36:48,630
three months as you know or a week as

00:36:45,690 --> 00:36:51,900
was JavaScript so react I would also

00:36:48,630 --> 00:36:53,880
mention home because that's one of the

00:36:51,900 --> 00:36:55,260
reasons that that react got really

00:36:53,880 --> 00:36:57,840
popular as well is because of all these

00:36:55,260 --> 00:37:00,210
great demos with ohm which is react with

00:36:57,840 --> 00:37:01,830
chat with closure script so if you if

00:37:00,210 --> 00:37:03,870
you have any interest in Lisp languages

00:37:01,830 --> 00:37:05,640
or closure script and are also

00:37:03,870 --> 00:37:08,520
interested in react definitely look at

00:37:05,640 --> 00:37:12,030
home it will you will likely be a super

00:37:08,520 --> 00:37:13,470
fan so some resources so the react Jas

00:37:12,030 --> 00:37:15,690
newsletter if you're into newsletter the

00:37:13,470 --> 00:37:17,670
podcast of course there's the the react

00:37:15,690 --> 00:37:20,790
occupation and the Facebook blog

00:37:17,670 --> 00:37:24,210
supporting it there was a slack instance

00:37:20,790 --> 00:37:26,280
our reactive flux but they are looking

00:37:24,210 --> 00:37:28,320
for a new host if you know anyone who

00:37:26,280 --> 00:37:28,770
wants to host 8,000 people on the

00:37:28,320 --> 00:37:31,890
internet

00:37:28,770 --> 00:37:33,300
talk about react but slack said they

00:37:31,890 --> 00:37:35,160
could not support their community any

00:37:33,300 --> 00:37:38,100
longer they can't support infinitely

00:37:35,160 --> 00:37:39,240
large free communities so but there's

00:37:38,100 --> 00:37:42,000
definitely lots of resources out there

00:37:39,240 --> 00:37:44,130
and lots of lots of interesting stuff

00:37:42,000 --> 00:37:46,350
hopping around react all right

00:37:44,130 --> 00:37:47,820
evaluating framework so so we've gone

00:37:46,350 --> 00:37:49,890
through to the frameworks now we're

00:37:47,820 --> 00:37:51,600
going to talk a little bit about how you

00:37:49,890 --> 00:37:54,150
might evaluate them and so I would be

00:37:51,600 --> 00:37:55,740
remiss if i did a choosing a JavaScript

00:37:54,150 --> 00:38:00,750
framework talk and did not mention to do

00:37:55,740 --> 00:38:04,160
nbc.com which is what you might guess it

00:38:00,750 --> 00:38:07,110
is to do list implemented in many

00:38:04,160 --> 00:38:08,640
frameworks Maddy framers and people are

00:38:07,110 --> 00:38:11,370
really good about updating these two

00:38:08,640 --> 00:38:12,900
which is pretty pretty but a to-do list

00:38:11,370 --> 00:38:14,460
being the example of what's you know

00:38:12,900 --> 00:38:16,890
what's a vaguely simple thing that we

00:38:14,460 --> 00:38:18,390
can make so we can maybe benchmark these

00:38:16,890 --> 00:38:21,630
things against each other benchmarking

00:38:18,390 --> 00:38:24,030
frameworks is a contentious issue but I

00:38:21,630 --> 00:38:26,730
think to do NBC is still a useful tool

00:38:24,030 --> 00:38:28,230
for being able to look at examples of

00:38:26,730 --> 00:38:31,560
how someone would build a project with a

00:38:28,230 --> 00:38:34,260
particular tool and as for the more

00:38:31,560 --> 00:38:36,450
pedagogical side of rate of evaluation I

00:38:34,260 --> 00:38:38,850
came up with this the spreadsheet for

00:38:36,450 --> 00:38:40,560
ranking for for sorting frameworks in

00:38:38,850 --> 00:38:44,040
according to Business technical and team

00:38:40,560 --> 00:38:47,070
criteria and so I gave a presentation on

00:38:44,040 --> 00:38:51,150
on this I guess almost three years ago

00:38:47,070 --> 00:38:53,400
now and what the Wharton School did with

00:38:51,150 --> 00:38:56,160
that is that then they they came up with

00:38:53,400 --> 00:38:58,500
a much better an amazing process called

00:38:56,160 --> 00:39:00,360
the Wharton software development

00:38:58,500 --> 00:39:02,820
technology assessment process dev tap

00:39:00,360 --> 00:39:04,110
for short which so if you're in a large

00:39:02,820 --> 00:39:06,150
organization and you're interested in

00:39:04,110 --> 00:39:08,100
more of a formal process of how can we

00:39:06,150 --> 00:39:09,540
you know how do you weigh a framework

00:39:08,100 --> 00:39:12,180
against another framework it's a very

00:39:09,540 --> 00:39:15,330
difficult question and if you want to do

00:39:12,180 --> 00:39:17,160
it in a more formal like practiced way

00:39:15,330 --> 00:39:19,110
the Wharton depth at solution is a

00:39:17,160 --> 00:39:21,540
really interesting one all right and so

00:39:19,110 --> 00:39:24,000
then that's what I have for you all you

00:39:21,540 --> 00:39:25,740
can find me on internet Pam asur the web

00:39:24,000 --> 00:39:29,150
before and turning and complete is the

00:39:25,740 --> 00:39:29,150

YouTube URL: https://www.youtube.com/watch?v=oSpQtTmeFKU


