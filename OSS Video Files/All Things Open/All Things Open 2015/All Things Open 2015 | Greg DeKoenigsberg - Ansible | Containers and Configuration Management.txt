Title: All Things Open 2015 | Greg DeKoenigsberg - Ansible | Containers and Configuration Management
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2014 All Things Open 2015, October 19th and 20th, Raleigh NC. All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,310 --> 00:00:11,340
thank you everybody okay i'm going to

00:00:09,840 --> 00:00:14,940
talk into this cuz i dont a strain my

00:00:11,340 --> 00:00:19,800
voice i just got back from a meetup tour

00:00:14,940 --> 00:00:21,210
of europe like yesterday so and my

00:00:19,800 --> 00:00:27,000
company got bought by red hat while I

00:00:21,210 --> 00:00:28,949
was in Europe so so I'm not sure how

00:00:27,000 --> 00:00:32,480
awesome this deck is going to be I think

00:00:28,949 --> 00:00:34,890
it's okay feel free to ask questions

00:00:32,480 --> 00:00:39,059
because I'm really just sort of you know

00:00:34,890 --> 00:00:41,820
talking about what users of ansible tell

00:00:39,059 --> 00:00:44,340
us about how ansible is being used in

00:00:41,820 --> 00:00:47,399
the container world and this this little

00:00:44,340 --> 00:00:49,079
deck is sort of my best effort at

00:00:47,399 --> 00:00:54,230
putting together those rationales and

00:00:49,079 --> 00:00:55,770
sort of explaining a theory of how

00:00:54,230 --> 00:00:57,780
configuration management and

00:00:55,770 --> 00:01:02,100
orchestration tools are going to look in

00:00:57,780 --> 00:01:03,719
a new container based world so a little

00:01:02,100 --> 00:01:07,200
about about me my name is Greg de

00:01:03,719 --> 00:01:09,830
Konigsberg I'm the I got I'm gonna have

00:01:07,200 --> 00:01:12,180
to figure out how to say this I am

00:01:09,830 --> 00:01:15,299
technically still I think the VP of

00:01:12,180 --> 00:01:18,840
community at ansible a wholly-owned Red

00:01:15,299 --> 00:01:20,400
Hat subsidiary so I think that's the

00:01:18,840 --> 00:01:23,549
right verbiage for now next week will

00:01:20,400 --> 00:01:25,619
probably change been doing this stuff

00:01:23,549 --> 00:01:27,509
for a while I've been with an school for

00:01:25,619 --> 00:01:29,280
a couple of years i was with cloud

00:01:27,509 --> 00:01:32,040
provider eucalyptus before that and

00:01:29,280 --> 00:01:35,369
before that i spent about 10 years at

00:01:32,040 --> 00:01:39,689
Red Hat so back to the future hello to

00:01:35,369 --> 00:01:43,290
all my old friends so hands up how many

00:01:39,689 --> 00:01:46,380
people are actual ansible users here ok

00:01:43,290 --> 00:01:48,149
that's a good chunk and good enough that

00:01:46,380 --> 00:01:51,570
I don't feel bad about glossing over

00:01:48,149 --> 00:01:53,220
some of the ansible basics so if some of

00:01:51,570 --> 00:01:55,439
you don't know anything about ansible

00:01:53,220 --> 00:01:59,260
I'll touch on it briefly but if you have

00:01:55,439 --> 00:02:04,900
any questions you can find me after and

00:01:59,260 --> 00:02:07,630
and i can give you the basic pitch so

00:02:04,900 --> 00:02:11,080
why go to a lot of DevOps conferences

00:02:07,630 --> 00:02:12,760
and the first thing that people ask at a

00:02:11,080 --> 00:02:15,610
DevOps conferences well what do you

00:02:12,760 --> 00:02:19,720
think DevOps means and that's a really

00:02:15,610 --> 00:02:22,090
tiresome question I sort of have some

00:02:19,720 --> 00:02:24,790
notion in my head of what dev means and

00:02:22,090 --> 00:02:26,890
what ops means and sort of DevOps is

00:02:24,790 --> 00:02:28,270
like maybe you guys can work together

00:02:26,890 --> 00:02:29,710
and not be mad at each other all the

00:02:28,270 --> 00:02:32,050
time and stuff that's sort of what

00:02:29,710 --> 00:02:34,450
DevOps feels like to me and for me it's

00:02:32,050 --> 00:02:36,340
a simple definition the devs are the

00:02:34,450 --> 00:02:37,990
folks who get it running and the ops are

00:02:36,340 --> 00:02:41,680
the folks who keep it running right as

00:02:37,990 --> 00:02:48,700
sort of the simplest definition I can

00:02:41,680 --> 00:02:51,100
come up with uh so the dev world has it

00:02:48,700 --> 00:02:54,670
seems like been recently conquered by

00:02:51,100 --> 00:02:56,950
docker lots of dev folks are just in

00:02:54,670 --> 00:02:58,600
love with it because it makes their

00:02:56,950 --> 00:03:02,620
lives easier and we'll talk a little bit

00:02:58,600 --> 00:03:05,680
about why that is and ops folks are

00:03:02,620 --> 00:03:07,570
starting to love ansible for the same

00:03:05,680 --> 00:03:09,430
fundamental reasons the same reasons

00:03:07,570 --> 00:03:13,540
that everybody loves a tool because it

00:03:09,430 --> 00:03:17,860
makes their life easier so and these are

00:03:13,540 --> 00:03:19,420
two sort of viewpoints that come at

00:03:17,860 --> 00:03:23,160
problems from different directions and

00:03:19,420 --> 00:03:23,160
we'll talk a little bit about about that

00:03:23,340 --> 00:03:30,910
so why are Deb's in love with doc or

00:03:26,950 --> 00:03:33,360
three basic reasons immutability that

00:03:30,910 --> 00:03:36,489
means that you can build an item and

00:03:33,360 --> 00:03:39,489
deploy that item somewhere and know that

00:03:36,489 --> 00:03:41,260
that item is not going to change and for

00:03:39,489 --> 00:03:44,320
people who have been spending many years

00:03:41,260 --> 00:03:48,040
figuring out things like rpm dependency

00:03:44,320 --> 00:03:50,890
management and random configuration

00:03:48,040 --> 00:03:52,810
changes when your server checks in and

00:03:50,890 --> 00:03:54,370
some file has changed somewhere and

00:03:52,810 --> 00:03:57,280
suddenly all of your applications are

00:03:54,370 --> 00:04:00,700
broken immutability seems like a really

00:03:57,280 --> 00:04:02,830
good idea for a lot of people and the

00:04:00,700 --> 00:04:06,459
promise of immutability it's not always

00:04:02,830 --> 00:04:08,769
the you know the reality but the promise

00:04:06,459 --> 00:04:10,450
of immutability is very compelling and

00:04:08,769 --> 00:04:11,680
it's one of the reasons that the

00:04:10,450 --> 00:04:15,519
developers are moving

00:04:11,680 --> 00:04:18,729
only towards docker immutability also

00:04:15,519 --> 00:04:20,620
implies portability if you have your

00:04:18,729 --> 00:04:22,780
environment setup properly because

00:04:20,620 --> 00:04:25,060
there's nothing in the container that's

00:04:22,780 --> 00:04:27,400
going to change and all of the

00:04:25,060 --> 00:04:29,919
configuration is managed outside of the

00:04:27,400 --> 00:04:31,690
container what that implies is that the

00:04:29,919 --> 00:04:35,080
thing you have that you are moving

00:04:31,690 --> 00:04:37,810
around is portable and will work ideally

00:04:35,080 --> 00:04:39,759
just as well on your laptop as it would

00:04:37,810 --> 00:04:42,009
in your CI environment as it would in

00:04:39,759 --> 00:04:43,780
production assuming that you have all of

00:04:42,009 --> 00:04:45,759
the infrastructure around and correct

00:04:43,780 --> 00:04:50,410
and that's another theme will be coming

00:04:45,759 --> 00:04:53,919
back to and then scalability you know

00:04:50,410 --> 00:04:58,000
the whole sort of background of

00:04:53,919 --> 00:05:00,820
containers is that every the container

00:04:58,000 --> 00:05:03,370
is using the same OS space over and over

00:05:00,820 --> 00:05:07,090
and over again and so any new container

00:05:03,370 --> 00:05:09,849
is really just the Delta of what's new

00:05:07,090 --> 00:05:11,830
for that container to run and so what

00:05:09,849 --> 00:05:13,960
that means is that a container can be

00:05:11,830 --> 00:05:15,970
represented in a very small amount of

00:05:13,960 --> 00:05:17,949
bits the difference between the

00:05:15,970 --> 00:05:20,889
underlying OS and what's unique to the

00:05:17,949 --> 00:05:22,630
container and so you can fit a lot more

00:05:20,889 --> 00:05:26,500
running containers into an environment

00:05:22,630 --> 00:05:28,479
than you can for VMS so that gives you

00:05:26,500 --> 00:05:32,530
sort of hyper scalability in a way that

00:05:28,479 --> 00:05:34,990
VMS don't VMs are the entire OS and the

00:05:32,530 --> 00:05:36,820
entire OS is copied however many times

00:05:34,990 --> 00:05:39,520
on to that system until there's no more

00:05:36,820 --> 00:05:41,139
memory with docker or other containers

00:05:39,520 --> 00:05:45,639
you can have lots and lots and lots more

00:05:41,139 --> 00:05:47,650
instances so sort of in short that is

00:05:45,639 --> 00:05:50,349
why containers in general are

00:05:47,650 --> 00:05:52,960
interesting and why docker in particular

00:05:50,349 --> 00:05:55,630
is interesting containers have been

00:05:52,960 --> 00:05:57,729
around for a while to be clear it was

00:05:55,630 --> 00:06:01,720
always possible to do this kind of stuff

00:05:57,729 --> 00:06:04,720
but docker and this will be a theme

00:06:01,720 --> 00:06:07,509
today docker made all of that stuff

00:06:04,720 --> 00:06:10,599
easier that's why docker is successful

00:06:07,509 --> 00:06:13,210
right now right how many people here

00:06:10,599 --> 00:06:15,970
have used change routes rights routes

00:06:13,210 --> 00:06:19,419
okay how many people have used freebsd

00:06:15,970 --> 00:06:23,800
jails while some twisted people how many

00:06:19,419 --> 00:06:25,300
solera zones right so we all know we all

00:06:23,800 --> 00:06:27,190
know that docker is not

00:06:25,300 --> 00:06:29,650
magical we have been using these things

00:06:27,190 --> 00:06:32,470
we you know we've used lxc for various

00:06:29,650 --> 00:06:34,870
reasons you know we we sort of know what

00:06:32,470 --> 00:06:37,479
the background is but it was only a

00:06:34,870 --> 00:06:39,940
small subset of people in IT who had

00:06:37,479 --> 00:06:42,099
enough knowledge at the right time to be

00:06:39,940 --> 00:06:44,110
able to take those technologies figure

00:06:42,099 --> 00:06:46,840
out how they worked and put them to best

00:06:44,110 --> 00:06:49,360
use okay the interesting thing about

00:06:46,840 --> 00:06:52,330
docker is not that docker in and of

00:06:49,360 --> 00:06:55,090
itself is all that special it just makes

00:06:52,330 --> 00:06:57,699
all of it easier it makes it easier to

00:06:55,090 --> 00:06:59,860
create a container image it makes it

00:06:57,699 --> 00:07:02,139
easy to run that container in an

00:06:59,860 --> 00:07:05,169
environment it makes it easy to scale

00:07:02,139 --> 00:07:07,449
all that stuff and it's just a little

00:07:05,169 --> 00:07:09,159
bit of tooling in the right places that

00:07:07,449 --> 00:07:11,020
takes this thing that people have been

00:07:09,159 --> 00:07:13,990
using for a long time and suddenly makes

00:07:11,020 --> 00:07:16,479
it appear to be revolutionary right that

00:07:13,990 --> 00:07:19,150
makes sense so it's very interesting

00:07:16,479 --> 00:07:23,069
that ansible is largely the same way

00:07:19,150 --> 00:07:25,419
just from a different direction okay so

00:07:23,069 --> 00:07:27,900
here's the quick pitch on ansible for

00:07:25,419 --> 00:07:32,169
people who don't know much about ansible

00:07:27,900 --> 00:07:46,270
ansible is basically a tool that can run

00:07:32,169 --> 00:07:50,889
SSH on a bunch of boxes sorry maybe

00:07:46,270 --> 00:07:53,229
it'll stay put this time okay so ansible

00:07:50,889 --> 00:07:55,419
is basically distributed SSH with

00:07:53,229 --> 00:07:59,529
modules and I dentists that's what

00:07:55,419 --> 00:08:01,840
ansible is okay it is used as a

00:07:59,529 --> 00:08:04,210
configuration management tool and also

00:08:01,840 --> 00:08:05,949
as an orchestration tool there are many

00:08:04,210 --> 00:08:09,449
other configuration management tools

00:08:05,949 --> 00:08:12,310
there are other orchestration tools

00:08:09,449 --> 00:08:15,789
ansible makes it all easier does it all

00:08:12,310 --> 00:08:19,150
at once because it runs on SSH there's

00:08:15,789 --> 00:08:21,520
no bootstrapping necessary any machine

00:08:19,150 --> 00:08:24,460
that has ssh on it can be managed by

00:08:21,520 --> 00:08:28,210
ansible okay so that means pretty much

00:08:24,460 --> 00:08:31,509
any OS from the past 20 years that's a

00:08:28,210 --> 00:08:33,729
UNIX or Linux based lots of other things

00:08:31,509 --> 00:08:35,289
like network switches people can if you

00:08:33,729 --> 00:08:37,209
were here for the previous session for

00:08:35,289 --> 00:08:38,200
the cumulus session you know that people

00:08:37,209 --> 00:08:40,330
are using ants

00:08:38,200 --> 00:08:43,780
to manage cumulus and other networking

00:08:40,330 --> 00:08:46,690
hardware so it's a it's a broad tool

00:08:43,780 --> 00:08:48,730
that doesn't require bootstrapping no

00:08:46,690 --> 00:08:50,890
central server is required in

00:08:48,730 --> 00:08:54,130
traditional configuration management the

00:08:50,890 --> 00:08:56,440
way it works is you put an agent on your

00:08:54,130 --> 00:08:58,390
system and that system has to check into

00:08:56,440 --> 00:09:01,600
a central server to figure out what its

00:08:58,390 --> 00:09:03,250
configuration is hi I'm a web server my

00:09:01,600 --> 00:09:05,500
definition of my you know my

00:09:03,250 --> 00:09:07,570
configuration is defined on this central

00:09:05,500 --> 00:09:09,940
server and I'll keep asking that server

00:09:07,570 --> 00:09:12,370
over and over again if I changed or if

00:09:09,940 --> 00:09:14,470
I'm the same and it can be very magical

00:09:12,370 --> 00:09:16,150
you can just make a central change and

00:09:14,470 --> 00:09:18,220
then all of your machines will check in

00:09:16,150 --> 00:09:19,570
and have the right configuration but

00:09:18,220 --> 00:09:22,060
that means that you have to have a

00:09:19,570 --> 00:09:23,680
server properly configured in the center

00:09:22,060 --> 00:09:25,750
of all of it and you have to have that

00:09:23,680 --> 00:09:27,700
server even to get started because

00:09:25,750 --> 00:09:30,490
ansible doesn't require an agent and

00:09:27,700 --> 00:09:32,200
doesn't require a central server it's

00:09:30,490 --> 00:09:35,470
just much easier for people to get

00:09:32,200 --> 00:09:37,570
started with because it says this age

00:09:35,470 --> 00:09:39,730
based its push not pull so there's no

00:09:37,570 --> 00:09:41,290
agents that are checking in if you want

00:09:39,730 --> 00:09:43,210
to make changes to a bunch of systems

00:09:41,290 --> 00:09:45,130
you actually have to run those changes

00:09:43,210 --> 00:09:47,410
from somewhere here I want to manage

00:09:45,130 --> 00:09:49,990
these 50 web servers I want to update

00:09:47,410 --> 00:09:53,170
the software that's on them run ansible

00:09:49,990 --> 00:09:55,690
playbook update my web servers and do

00:09:53,170 --> 00:09:57,460
all that kind of stuff dot yamo and then

00:09:55,690 --> 00:10:00,490
it magically goes and talks to the 50

00:09:57,460 --> 00:10:02,710
servers and does the right thing because

00:10:00,490 --> 00:10:04,600
it's written in yamo the playbooks in

00:10:02,710 --> 00:10:07,840
ants polar yambol they're easy to read

00:10:04,600 --> 00:10:09,100
they're easy to maintain you know I

00:10:07,840 --> 00:10:10,870
could go over a bunch of ansible

00:10:09,100 --> 00:10:12,550
examples but again that's not why I'm

00:10:10,870 --> 00:10:15,570
here if you want to ask more about that

00:10:12,550 --> 00:10:18,280
we can talk more about that later and

00:10:15,570 --> 00:10:20,140
again configuration management and

00:10:18,280 --> 00:10:23,080
orchestration these are tools that have

00:10:20,140 --> 00:10:25,750
been out there for years but ansible is

00:10:23,080 --> 00:10:27,900
the tool that is getting a very fast

00:10:25,750 --> 00:10:31,600
mass adoption because it's the easiest

00:10:27,900 --> 00:10:33,340
it doesn't take a lot of understanding

00:10:31,600 --> 00:10:36,070
you can be up and running with your

00:10:33,340 --> 00:10:38,500
first ansible playbook in an hour and it

00:10:36,070 --> 00:10:40,570
ended and it lowers the bar in the same

00:10:38,500 --> 00:10:44,170
way that docker lowered the bar firkin

00:10:40,570 --> 00:10:45,610
for containers in the dev world ansible

00:10:44,170 --> 00:10:47,290
lowers the bar for configuration

00:10:45,610 --> 00:10:50,410
management and orchestration in the ops

00:10:47,290 --> 00:10:51,340
world okay so that's why ansible is

00:10:50,410 --> 00:10:53,380
interesting

00:10:51,340 --> 00:10:58,780
and that's why red hat was interested in

00:10:53,380 --> 00:11:02,110
ansible so the common enemy of devs and

00:10:58,780 --> 00:11:06,040
ops is complexity I you know you can

00:11:02,110 --> 00:11:07,720
simplify the containerization and make

00:11:06,040 --> 00:11:09,550
that as easy as possible you can

00:11:07,720 --> 00:11:11,200
simplify the configuration management

00:11:09,550 --> 00:11:13,420
orchestration make that as simple as

00:11:11,200 --> 00:11:16,360
possible but in the end you're still

00:11:13,420 --> 00:11:18,520
going to be managing complexity if you

00:11:16,360 --> 00:11:21,430
need these tools and you expect to get

00:11:18,520 --> 00:11:24,280
the most out of them it's because you

00:11:21,430 --> 00:11:26,080
are planning to do things at scale right

00:11:24,280 --> 00:11:28,210
if you're not managing a bunch of

00:11:26,080 --> 00:11:29,530
systems you don't necessarily even need

00:11:28,210 --> 00:11:31,330
containers and you don't need

00:11:29,530 --> 00:11:32,980
configuration management because you can

00:11:31,330 --> 00:11:35,410
manage it all by hand and manage a few

00:11:32,980 --> 00:11:38,170
changes here and there but when you want

00:11:35,410 --> 00:11:41,590
to get to hyperscale you must use these

00:11:38,170 --> 00:11:43,870
kinds of tools and the only way to to to

00:11:41,590 --> 00:11:46,540
get to that sort of hyperscale future is

00:11:43,870 --> 00:11:48,340
to make sure you're using tools that are

00:11:46,540 --> 00:11:50,470
the right tool for the job and that

00:11:48,340 --> 00:11:58,300
people in your organization understand

00:11:50,470 --> 00:12:00,490
how to use okay so I'm making the

00:11:58,300 --> 00:12:02,680
assumption here that you know people who

00:12:00,490 --> 00:12:04,720
are in this talk sort of understand why

00:12:02,680 --> 00:12:06,550
containers are a big deal and are

00:12:04,720 --> 00:12:08,170
starting that process of moving a bunch

00:12:06,550 --> 00:12:10,920
of stuff to containers so let's start

00:12:08,170 --> 00:12:13,720
with that as sort of the baseline

00:12:10,920 --> 00:12:17,710
there's two thurs so I look at this as a

00:12:13,720 --> 00:12:19,660
continuum right people use containers

00:12:17,710 --> 00:12:21,430
for all kinds of reasons they might be

00:12:19,660 --> 00:12:23,920
good reasons they might be bad reasons

00:12:21,430 --> 00:12:25,540
they use containers so there's an old PT

00:12:23,920 --> 00:12:28,000
Barnum expression nothing draws a crowd

00:12:25,540 --> 00:12:29,710
like a crowd right and the crowd has

00:12:28,000 --> 00:12:31,090
moved towards containers so everyone's

00:12:29,710 --> 00:12:32,440
like Oh containers are amazing i'm going

00:12:31,090 --> 00:12:33,670
to use containers what are you going to

00:12:32,440 --> 00:12:37,270
use them for I'm not sure but something

00:12:33,670 --> 00:12:38,950
and it's going to be great ok and so

00:12:37,270 --> 00:12:41,740
there's various different use cases and

00:12:38,950 --> 00:12:45,970
I and I think that they all fall along

00:12:41,740 --> 00:12:48,700
this rough spectrum on the one side is

00:12:45,970 --> 00:12:52,600
the container as mini virtual machine

00:12:48,700 --> 00:12:54,940
okay they they've used virtual machines

00:12:52,600 --> 00:12:56,640
they may just have actually figured out

00:12:54,940 --> 00:12:58,990
how to use virtual machines and

00:12:56,640 --> 00:13:01,390
containers look and awful lot like

00:12:58,990 --> 00:13:03,270
virtual machines to someone who doesn't

00:13:01,390 --> 00:13:07,350
really understand the differences

00:13:03,270 --> 00:13:09,420
so these people will take this mini vm

00:13:07,350 --> 00:13:11,310
they will treat it exactly like a server

00:13:09,420 --> 00:13:14,430
which means that they will put an SS

00:13:11,310 --> 00:13:16,980
agent an ssh server on it and they will

00:13:14,430 --> 00:13:18,870
SSH into this container which you know

00:13:16,980 --> 00:13:20,490
the container purists will say no no

00:13:18,870 --> 00:13:22,350
that's completely wrong but it's still

00:13:20,490 --> 00:13:23,790
allowable so people do it because it

00:13:22,350 --> 00:13:26,790
makes it easier for them to treat it

00:13:23,790 --> 00:13:29,220
like a server they don't care so much

00:13:26,790 --> 00:13:30,720
about the immutability aspect because

00:13:29,220 --> 00:13:32,700
they don't necessarily understand why

00:13:30,720 --> 00:13:34,560
that's important they just know that it

00:13:32,700 --> 00:13:37,860
saves them a bunch of space as opposed

00:13:34,560 --> 00:13:40,230
to a traditional vm so they'll make this

00:13:37,860 --> 00:13:42,270
server image and then when they need to

00:13:40,230 --> 00:13:45,300
change the server image they won't

00:13:42,270 --> 00:13:46,770
actually go create a new image and and

00:13:45,300 --> 00:13:48,720
put everything in it and then move it

00:13:46,770 --> 00:13:50,130
over they'll just SSH right into the

00:13:48,720 --> 00:13:51,420
container and treat it like it's a vm

00:13:50,130 --> 00:13:53,750
and they'll make changes in place and

00:13:51,420 --> 00:13:56,430
the run configuration tools on it

00:13:53,750 --> 00:13:59,430
they'll configure it where it is instead

00:13:56,430 --> 00:14:01,970
of doing a proper configuration by

00:13:59,430 --> 00:14:06,420
building that stuff into the images and

00:14:01,970 --> 00:14:08,430
that's ok right that's ok because it

00:14:06,420 --> 00:14:10,980
takes a while to understand how

00:14:08,430 --> 00:14:12,960
containers work and if people want to

00:14:10,980 --> 00:14:14,940
start by treating them like many VMS

00:14:12,960 --> 00:14:17,160
that's fine it's the simplest way in

00:14:14,940 --> 00:14:19,110
people can understand sort of what

00:14:17,160 --> 00:14:20,880
they're doing they can start to learn

00:14:19,110 --> 00:14:22,320
about some of the issues of containers

00:14:20,880 --> 00:14:24,510
we'll wait about what where does the

00:14:22,320 --> 00:14:26,220
logging go on these things and well how

00:14:24,510 --> 00:14:27,780
do i do shared storage because when I

00:14:26,220 --> 00:14:29,370
store things in this container and then

00:14:27,780 --> 00:14:32,880
this container goes away my data goes

00:14:29,370 --> 00:14:36,510
away but it gives them a starting point

00:14:32,880 --> 00:14:38,640
but it is monolithic right it's taking a

00:14:36,510 --> 00:14:40,050
lot of the ideas around containers and

00:14:38,640 --> 00:14:43,350
just ignoring them and treating it as a

00:14:40,050 --> 00:14:46,530
monolithic thing ok and there are

00:14:43,350 --> 00:14:49,830
various sort of ways that people can

00:14:46,530 --> 00:14:52,880
move towards the fully distributed

00:14:49,830 --> 00:14:56,010
notion of a container as a micro service

00:14:52,880 --> 00:14:59,370
so how many people know what I say when

00:14:56,010 --> 00:15:01,430
I say microservice ok so a good chunk

00:14:59,370 --> 00:15:05,880
how many are running fully-formed

00:15:01,430 --> 00:15:09,840
microservices in production so a handful

00:15:05,880 --> 00:15:11,490
but not that many yet ok and the reason

00:15:09,840 --> 00:15:13,080
that not that many are running this

00:15:11,490 --> 00:15:15,250
stuff in production is because

00:15:13,080 --> 00:15:17,980
completely changing the way

00:15:15,250 --> 00:15:20,860
do engineering to accommodate a true

00:15:17,980 --> 00:15:23,110
micro service architecture is not easy

00:15:20,860 --> 00:15:26,170
there's a lot of stuff that you have to

00:15:23,110 --> 00:15:29,050
learn and figure out first of all every

00:15:26,170 --> 00:15:31,480
container ideally contains one service

00:15:29,050 --> 00:15:34,120
that does one thing well that is the

00:15:31,480 --> 00:15:35,560
goal of microservices right which means

00:15:34,120 --> 00:15:38,590
that if you have this gigantic

00:15:35,560 --> 00:15:40,240
monolithic application stack you have to

00:15:38,590 --> 00:15:42,190
figure out how to break all these things

00:15:40,240 --> 00:15:45,070
and put them listening on little ports

00:15:42,190 --> 00:15:49,360
and make sure that they've got a you

00:15:45,070 --> 00:15:52,000
know an API that's talking JSON and all

00:15:49,360 --> 00:15:53,320
the rest II kind of stuff you need to

00:15:52,000 --> 00:15:56,260
make sure that you've got port

00:15:53,320 --> 00:15:58,870
management figured out and at scale it's

00:15:56,260 --> 00:16:00,760
not that easy a thing a lot of people

00:15:58,870 --> 00:16:03,610
are happy running containers on their

00:16:00,760 --> 00:16:05,650
laptop because it's real easy to set up

00:16:03,610 --> 00:16:07,420
containers on your laptop but when it

00:16:05,650 --> 00:16:08,860
comes to moving into a production

00:16:07,420 --> 00:16:11,200
environment where you have to manage a

00:16:08,860 --> 00:16:13,360
lot of containers it's not that clear

00:16:11,200 --> 00:16:15,520
how to proceed in a lot of cases and you

00:16:13,360 --> 00:16:17,830
have to get a lot of domain knowledge to

00:16:15,520 --> 00:16:19,360
figure out how it works right yes you

00:16:17,830 --> 00:16:22,150
get immutability you get all those

00:16:19,360 --> 00:16:24,640
things ideally you're using something

00:16:22,150 --> 00:16:27,820
like EDD to give yourself a zeroconf

00:16:24,640 --> 00:16:30,460
environment where a you know in a

00:16:27,820 --> 00:16:33,430
configuration is inherited from the SCD

00:16:30,460 --> 00:16:35,080
server but you have to figure out how to

00:16:33,430 --> 00:16:38,530
set all that stuff up and it's a steep

00:16:35,080 --> 00:16:41,860
learning curve and you then have all of

00:16:38,530 --> 00:16:45,070
the characteristics of a fully

00:16:41,860 --> 00:16:49,390
distributed system right so monolithic

00:16:45,070 --> 00:16:51,970
versus distributed so when you're

00:16:49,390 --> 00:16:53,830
dealing with complexity there is equal

00:16:51,970 --> 00:16:55,630
amounts of complexity in a monolithic

00:16:53,830 --> 00:16:57,610
system as there are in a distributed

00:16:55,630 --> 00:17:04,150
system it's just that those complexities

00:16:57,610 --> 00:17:07,120
live in different places okay in a

00:17:04,150 --> 00:17:09,040
monolithic stack all of the complexity

00:17:07,120 --> 00:17:10,449
is in each one of these systems that

00:17:09,040 --> 00:17:12,730
you're managing and it's why

00:17:10,449 --> 00:17:14,920
configuration management became popular

00:17:12,730 --> 00:17:17,140
because I've got this gigantic stack

00:17:14,920 --> 00:17:20,800
it's full of software there's a database

00:17:17,140 --> 00:17:22,569
there's a web server there's a proxy

00:17:20,800 --> 00:17:24,550
server maybe someone threw in a no

00:17:22,569 --> 00:17:26,470
sequel server and there's sort of all

00:17:24,550 --> 00:17:28,530
living on the same box or maybe they're

00:17:26,470 --> 00:17:30,180
spread out to two or three boxes

00:17:28,530 --> 00:17:32,220
and the relationships between them are

00:17:30,180 --> 00:17:34,590
very clear right this is the web server

00:17:32,220 --> 00:17:36,420
it lives here this is the database

00:17:34,590 --> 00:17:38,640
server it lives here and the web server

00:17:36,420 --> 00:17:41,280
talks to the database server on this

00:17:38,640 --> 00:17:43,470
port those are all configuration options

00:17:41,280 --> 00:17:45,690
and those configure configuration

00:17:43,470 --> 00:17:49,080
options can be managed by configuration

00:17:45,690 --> 00:17:50,610
management tools right so complexity in

00:17:49,080 --> 00:17:53,190
the days where configuration management

00:17:50,610 --> 00:17:56,490
was central was managed by configuration

00:17:53,190 --> 00:17:59,130
management tools okay but in the

00:17:56,490 --> 00:18:01,230
distributed world the notion is that all

00:17:59,130 --> 00:18:04,050
of the configuration is already baked

00:18:01,230 --> 00:18:06,000
into the image the image and the end of

00:18:04,050 --> 00:18:08,520
the service that starts from that image

00:18:06,000 --> 00:18:11,970
it does what it does it does one thing

00:18:08,520 --> 00:18:14,400
really well it doesn't care what's port

00:18:11,970 --> 00:18:16,800
it's listening on it just goes to etsy d

00:18:14,400 --> 00:18:18,990
or some common configuration and learns

00:18:16,800 --> 00:18:22,620
everything about itself through service

00:18:18,990 --> 00:18:26,070
discovery you know it basically says hi

00:18:22,620 --> 00:18:28,350
I'm a new image and I run this service

00:18:26,070 --> 00:18:29,940
tell me all about this service what

00:18:28,350 --> 00:18:31,890
ports do I talk to what network

00:18:29,940 --> 00:18:34,200
boundaries do I need to cross where do I

00:18:31,890 --> 00:18:36,060
store things where do i log things okay

00:18:34,200 --> 00:18:38,850
I know that stuff great I know how to

00:18:36,060 --> 00:18:42,180
process all that very clear boundaries

00:18:38,850 --> 00:18:44,730
very clear inputs and outputs and when

00:18:42,180 --> 00:18:46,680
the system works well it works well but

00:18:44,730 --> 00:18:49,770
the problem is that you've moved the

00:18:46,680 --> 00:18:52,770
complexity the complexity is no longer a

00:18:49,770 --> 00:18:55,170
property of the thing the complexity is

00:18:52,770 --> 00:18:58,470
now a property of the relationship

00:18:55,170 --> 00:19:01,260
between all of your things and the more

00:18:58,470 --> 00:19:03,690
things you have as you scale the more

00:19:01,260 --> 00:19:05,190
complexity you have as you scale it's

00:19:03,690 --> 00:19:07,860
just that it's a different kind of

00:19:05,190 --> 00:19:10,830
complexity and people who are trying to

00:19:07,860 --> 00:19:12,630
get to that end points are now starting

00:19:10,830 --> 00:19:15,120
to realize that there is a lot of

00:19:12,630 --> 00:19:16,860
complexity that they had sort of thought

00:19:15,120 --> 00:19:23,790
they got away from no we just move to

00:19:16,860 --> 00:19:25,230
somewhere else so I'll talk a little bit

00:19:23,790 --> 00:19:26,850
about how ansible is used in these

00:19:25,230 --> 00:19:28,350
different environments and then I'm

00:19:26,850 --> 00:19:29,970
basically just going to sort of throw up

00:19:28,350 --> 00:19:32,940
my hands and say okay I'm done and we're

00:19:29,970 --> 00:19:36,230
going to have a QA and maybe we'll all

00:19:32,940 --> 00:19:38,850
leave for beers early I don't know so

00:19:36,230 --> 00:19:41,130
how is ansible use in the container is

00:19:38,850 --> 00:19:41,990
VM well it's very straightforward you're

00:19:41,130 --> 00:19:45,620
not really

00:19:41,990 --> 00:19:47,360
reading the container as a new thing

00:19:45,620 --> 00:19:49,070
you're just treating it as a vm and so

00:19:47,360 --> 00:19:52,100
the ansible management tools all work

00:19:49,070 --> 00:19:53,300
exactly the same way if you want to you

00:19:52,100 --> 00:19:55,059
know you've got your traditional

00:19:53,300 --> 00:19:58,040
client-server application structure

00:19:55,059 --> 00:20:00,110
you've got your deb stage prod lifecycle

00:19:58,040 --> 00:20:01,670
right everybody who's done software

00:20:00,110 --> 00:20:03,860
development from the old school knows

00:20:01,670 --> 00:20:05,990
that you know before there was this

00:20:03,860 --> 00:20:07,700
thing called continuous integration you

00:20:05,990 --> 00:20:09,290
had different environments and the

00:20:07,700 --> 00:20:10,940
biggest pain in your ass was keeping

00:20:09,290 --> 00:20:14,059
those environments anywhere near close

00:20:10,940 --> 00:20:16,250
to in sync so that when you installed

00:20:14,059 --> 00:20:18,200
something on dev and you installed

00:20:16,250 --> 00:20:19,910
something on prod you just prayed that

00:20:18,200 --> 00:20:21,470
they looked anything alike by the time

00:20:19,910 --> 00:20:23,240
that got from one end to the other right

00:20:21,470 --> 00:20:25,610
that's the value of al you've configured

00:20:23,240 --> 00:20:28,100
age management tools because suddenly

00:20:25,610 --> 00:20:32,030
you could have configuration as code and

00:20:28,100 --> 00:20:33,950
you could say you know i'm going to

00:20:32,030 --> 00:20:35,179
deploy all of these applications and

00:20:33,950 --> 00:20:37,370
there's going to be this handful of

00:20:35,179 --> 00:20:39,980
variables that are tracked centrally in

00:20:37,370 --> 00:20:42,530
version control right I've got we've

00:20:39,980 --> 00:20:46,850
gotta git repo the entire team uses it

00:20:42,530 --> 00:20:49,970
these are the IP addresses for staging

00:20:46,850 --> 00:20:52,429
and for the environments and for

00:20:49,970 --> 00:20:55,100
production and when you want to download

00:20:52,429 --> 00:20:56,540
something to run on your machine you

00:20:55,100 --> 00:20:58,940
just changed the appropriate variables

00:20:56,540 --> 00:21:01,220
and make sure that that's right and so

00:20:58,940 --> 00:21:03,410
instead of hard-coding things you know

00:21:01,220 --> 00:21:05,450
and we've all run into that thing where

00:21:03,410 --> 00:21:06,950
we hard-coded a variable and then forgot

00:21:05,450 --> 00:21:08,840
it was hard-coded and something went

00:21:06,950 --> 00:21:10,790
down it spent six hours looking for it

00:21:08,840 --> 00:21:12,080
that's what traditional configuration

00:21:10,790 --> 00:21:14,330
management helps you to get away from

00:21:12,080 --> 00:21:16,250
and that's what ansible does in these

00:21:14,330 --> 00:21:18,170
minimal cases of containers where people

00:21:16,250 --> 00:21:20,420
are still doing that because what's

00:21:18,170 --> 00:21:23,570
happening a lot is that people are using

00:21:20,420 --> 00:21:24,679
docker for their laptops because hey I'm

00:21:23,570 --> 00:21:26,450
going to learn docker and I'm going to

00:21:24,679 --> 00:21:27,620
set this up cool they don't have an

00:21:26,450 --> 00:21:29,179
integration environment that does

00:21:27,620 --> 00:21:30,770
stalker and they certainly don't have a

00:21:29,179 --> 00:21:34,130
production environment that uses docker

00:21:30,770 --> 00:21:36,350
so what you need then is some mechanism

00:21:34,130 --> 00:21:38,300
to deploy the same code into those

00:21:36,350 --> 00:21:40,850
various places using the standard

00:21:38,300 --> 00:21:43,460
configuration methodology in ansible is

00:21:40,850 --> 00:21:45,890
a great and simple tool for that and if

00:21:43,460 --> 00:21:47,780
you google using ansible with docker

00:21:45,890 --> 00:21:49,370
that's a lot of that's a lot of what

00:21:47,780 --> 00:21:51,950
you're going to see people say well the

00:21:49,370 --> 00:21:55,250
first thing you do is put an ssh daemon

00:21:51,950 --> 00:21:55,789
on your container okay but that's not

00:21:55,250 --> 00:22:03,679
how it's

00:21:55,789 --> 00:22:05,899
supposed to be but okay so there's a lot

00:22:03,679 --> 00:22:09,830
of sort of thud in the configuration

00:22:05,899 --> 00:22:11,029
management space that Oh configuration

00:22:09,830 --> 00:22:14,720
management is going to go away when

00:22:11,029 --> 00:22:16,220
docker is is is ready to go and and you

00:22:14,720 --> 00:22:17,690
know the reason is because these things

00:22:16,220 --> 00:22:18,739
are doing zero confi you don't need to

00:22:17,690 --> 00:22:22,399
you don't need to manage anything

00:22:18,739 --> 00:22:24,979
anymore well that's true in a way but

00:22:22,399 --> 00:22:27,889
also completely wrong in a way right the

00:22:24,979 --> 00:22:31,580
way that it's true is that you're moving

00:22:27,889 --> 00:22:34,340
what you're configuring so if you have a

00:22:31,580 --> 00:22:36,529
bunch of containers in your farm a bunch

00:22:34,340 --> 00:22:38,269
of micro services and you've done the

00:22:36,529 --> 00:22:40,580
perfect and we're all the way at the

00:22:38,269 --> 00:22:45,979
other end of the continuum now right

00:22:40,580 --> 00:22:50,029
we're assuming perfect a container micro

00:22:45,979 --> 00:22:52,700
service-based nirvana okay so you've got

00:22:50,029 --> 00:22:54,769
all of your container OS is out there

00:22:52,700 --> 00:22:55,849
using something like or OS to make

00:22:54,769 --> 00:22:58,190
sure that you've got the minimum

00:22:55,849 --> 00:23:02,960
possible surface area for the container

00:22:58,190 --> 00:23:06,169
that you're running you've got a true

00:23:02,960 --> 00:23:08,570
zero coffin of the service discovery

00:23:06,169 --> 00:23:11,479
tools like a CD or consular zookeeper

00:23:08,570 --> 00:23:12,919
and you're doing full fleet management

00:23:11,479 --> 00:23:15,169
so when you're spinning up new

00:23:12,919 --> 00:23:16,519
containers you're doing it with one of

00:23:15,169 --> 00:23:20,539
the new hotness things like uber

00:23:16,519 --> 00:23:22,190
Nettie's our fleet and and not only that

00:23:20,539 --> 00:23:23,539
but you're not worrying about Deb test

00:23:22,190 --> 00:23:25,099
prod in the same way because you're

00:23:23,539 --> 00:23:26,570
doing continuous integration and

00:23:25,099 --> 00:23:28,849
continuous delivery with something like

00:23:26,570 --> 00:23:31,190
Jenkins where any time you make a check

00:23:28,849 --> 00:23:34,460
into the code it goes automatically to

00:23:31,190 --> 00:23:37,369
some environment that is configured the

00:23:34,460 --> 00:23:39,429
same way using containers and Etsy d as

00:23:37,369 --> 00:23:42,019
your production environment is and

00:23:39,429 --> 00:23:44,330
managing all of that is simply a matter

00:23:42,019 --> 00:23:47,029
of managing the configuration variables

00:23:44,330 --> 00:23:48,289
that are a net CD right and they're a

00:23:47,029 --> 00:23:50,239
different set of variables in the

00:23:48,289 --> 00:23:52,909
different environments that's supposed

00:23:50,239 --> 00:23:54,499
to be nirvana and you would think that

00:23:52,909 --> 00:23:57,019
you wouldn't need any ansible for any of

00:23:54,499 --> 00:23:59,179
this but as it turns out you need even

00:23:57,019 --> 00:24:00,769
more ansible for this because now you're

00:23:59,179 --> 00:24:04,639
managing things on a bunch of different

00:24:00,769 --> 00:24:06,470
hosts that have to underlie things right

00:24:04,639 --> 00:24:07,970
because it's still Turtles all the way

00:24:06,470 --> 00:24:09,500
down you still have to have an OS that

00:24:07,970 --> 00:24:11,330
does something somewhere right

00:24:09,500 --> 00:24:15,890
no matter how magical the containers are

00:24:11,330 --> 00:24:18,080
they run on things and everything that

00:24:15,890 --> 00:24:20,180
isn't docker has to be managed by

00:24:18,080 --> 00:24:22,280
something so i think it's interesting

00:24:20,180 --> 00:24:24,800
that a lot of people in the sort of

00:24:22,280 --> 00:24:27,140
broader docker community are starting to

00:24:24,800 --> 00:24:28,850
turn to ansible as the tool that they

00:24:27,140 --> 00:24:33,380
use to manage the infrastructure around

00:24:28,850 --> 00:24:37,610
all this stuff so I think I neglected to

00:24:33,380 --> 00:24:39,320
actually turn on my wireless so I was

00:24:37,610 --> 00:24:41,120
going to link to one of these but I'll

00:24:39,320 --> 00:24:44,380
just make this slide deck available and

00:24:41,120 --> 00:24:47,180
you can go take a look in the meantime

00:24:44,380 --> 00:24:49,850
so all of these services that I just

00:24:47,180 --> 00:24:53,540
talked about all of them have prominence

00:24:49,850 --> 00:24:56,090
and well-used ansible roles to set up

00:24:53,540 --> 00:24:58,540
the supporting infrastructure right so

00:24:56,090 --> 00:25:02,630
and some interesting names here right

00:24:58,540 --> 00:25:04,820
jive the folks at jive software are the

00:25:02,630 --> 00:25:07,100
ones who wrote the the role that's

00:25:04,820 --> 00:25:12,140
predominantly used for setting up

00:25:07,100 --> 00:25:16,640
console using ansible the fleet stuff is

00:25:12,140 --> 00:25:18,560
being written by VMware I Paris happens

00:25:16,640 --> 00:25:20,330
to be guy working at Red Hat so there's

00:25:18,560 --> 00:25:22,040
a lot of interesting kuber Nettie's

00:25:20,330 --> 00:25:27,290
configuration stuff going on using a

00:25:22,040 --> 00:25:29,210
spool and and all of the users I talked

00:25:27,290 --> 00:25:33,260
to all of the time who are using ansible

00:25:29,210 --> 00:25:34,400
for building out the infrastructure that

00:25:33,260 --> 00:25:37,640
they're going to be running their

00:25:34,400 --> 00:25:40,400
container infrastructure in and again

00:25:37,640 --> 00:25:42,560
why is this because what we're coming

00:25:40,400 --> 00:25:45,200
back to is the notion that you can't

00:25:42,560 --> 00:25:47,060
just get rid of complexity you can

00:25:45,200 --> 00:25:50,480
simply move it to where it makes more

00:25:47,060 --> 00:25:52,730
sense if possible right developers don't

00:25:50,480 --> 00:25:54,530
want to know about infrastructure they

00:25:52,730 --> 00:25:57,470
want to write their application and make

00:25:54,530 --> 00:26:01,760
sure that application works right and

00:25:57,470 --> 00:26:04,100
ops folks don't want to know about the

00:26:01,760 --> 00:26:06,410
the application what they want to know

00:26:04,100 --> 00:26:08,990
is the basic amount of information that

00:26:06,410 --> 00:26:10,910
they want to know about the development

00:26:08,990 --> 00:26:15,200
environment and then the operations

00:26:10,910 --> 00:26:19,010
stuff they want to handle okay so Deb's

00:26:15,200 --> 00:26:21,080
are winning on the darker side I'm sorry

00:26:19,010 --> 00:26:23,320
Dockers winning on the Dead side ansible

00:26:21,080 --> 00:26:25,060
is doing very well in the off side

00:26:23,320 --> 00:26:27,430
increasingly we're seeing these two

00:26:25,060 --> 00:26:30,340
tools used together in such a way that

00:26:27,430 --> 00:26:33,070
everybody can can work together and the

00:26:30,340 --> 00:26:35,770
separation takes place in the right

00:26:33,070 --> 00:26:37,270
place and dev folks are responsible for

00:26:35,770 --> 00:26:39,820
doing what they do and they use

00:26:37,270 --> 00:26:41,470
primarily doctor to it and ops folks are

00:26:39,820 --> 00:26:43,720
responsible for doing what they do and

00:26:41,470 --> 00:26:49,420
they're primarily using ansible to do it

00:26:43,720 --> 00:26:51,790
so that's it that's the high level yes

00:26:49,420 --> 00:26:53,410
clap I'm so great thank you so much

00:26:51,790 --> 00:26:58,540
thank you thank you thank you I'd like

00:26:53,410 --> 00:27:00,970
to thank the academy and so I'm happy to

00:26:58,540 --> 00:27:02,410
take questions or I'm happy to get out

00:27:00,970 --> 00:27:16,480
we have a question so we can't get out

00:27:02,410 --> 00:27:18,130
yet yes so the question is I'm new to

00:27:16,480 --> 00:27:19,450
ansible how do you if you're not doing

00:27:18,130 --> 00:27:20,800
this from a central configuration

00:27:19,450 --> 00:27:23,050
management tool which does things all at

00:27:20,800 --> 00:27:24,250
the same time how do you make sure that

00:27:23,050 --> 00:27:27,130
you're keeping things in sync with

00:27:24,250 --> 00:27:31,360
ansible and my answer would be chron

00:27:27,130 --> 00:27:34,420
works so ansible is designed to be a

00:27:31,360 --> 00:27:36,730
Linux tool that works in the tradition

00:27:34,420 --> 00:27:39,490
of UNIX tools you don't need necessarily

00:27:36,730 --> 00:27:41,620
a fancy scheduling mechanism you just

00:27:39,490 --> 00:27:42,790
need to decide which machines do I want

00:27:41,620 --> 00:27:44,800
to make sure are updated at the same

00:27:42,790 --> 00:27:46,570
time okay i'm going to use ansible to

00:27:44,800 --> 00:27:48,790
update them at the same time the

00:27:46,570 --> 00:27:51,340
fundamental primitives of ansible are

00:27:48,790 --> 00:27:54,540
the playbook which is what you do and

00:27:51,340 --> 00:27:57,220
the inventory which is where you do it

00:27:54,540 --> 00:27:58,930
so you can have all kinds of different

00:27:57,220 --> 00:28:02,500
inventories and you specify different

00:27:58,930 --> 00:28:04,810
sets of machines to push different play

00:28:02,500 --> 00:28:07,690
books to write so the syntax is

00:28:04,810 --> 00:28:09,580
basically simplifies simplified ansible

00:28:07,690 --> 00:28:12,640
playbook run this play book on this

00:28:09,580 --> 00:28:16,300
inventory go okay and the way that

00:28:12,640 --> 00:28:18,880
ansible works it runs so ansible lays

00:28:16,300 --> 00:28:20,770
out a series of tasks in yamo which is

00:28:18,880 --> 00:28:23,530
very human readable and so it might be

00:28:20,770 --> 00:28:27,790
task one update the the web server

00:28:23,530 --> 00:28:30,900
packages task to touch the database over

00:28:27,790 --> 00:28:33,910
here task three restart the web server

00:28:30,900 --> 00:28:35,500
task for do a ping to the web server

00:28:33,910 --> 00:28:35,830
with an assert statement to make sure

00:28:35,500 --> 00:28:38,559
that it's

00:28:35,830 --> 00:28:40,870
actually up and then we're done and the

00:28:38,559 --> 00:28:44,019
way answa works by default is it does

00:28:40,870 --> 00:28:45,700
all of those steps in parallel on all of

00:28:44,019 --> 00:28:47,860
the machines at the same time until

00:28:45,700 --> 00:28:50,470
they've all reached the same state right

00:28:47,860 --> 00:28:52,929
so you would say update all the packages

00:28:50,470 --> 00:28:54,370
on the web servers okay we're done we're

00:28:52,929 --> 00:28:56,110
waiting on server number 10 because it's

00:28:54,370 --> 00:28:58,539
got a really slow connection okay it's

00:28:56,110 --> 00:29:00,250
done step to do the same thing okay

00:28:58,539 --> 00:29:01,720
that's done step 3 now we're waiting on

00:29:00,250 --> 00:29:03,789
server1 because something is weird we're

00:29:01,720 --> 00:29:06,549
going to do it okay now it's done right

00:29:03,789 --> 00:29:10,929
so that's basically outwards answer your

00:29:06,549 --> 00:29:12,490
question if you add 10 more and so this

00:29:10,929 --> 00:29:14,669
is where I definites comes in which is

00:29:12,490 --> 00:29:19,510
sort of classic configuration management

00:29:14,669 --> 00:29:22,480
and ident operation is one where f of X

00:29:19,510 --> 00:29:23,679
equals f of f of X right so if you do it

00:29:22,480 --> 00:29:25,539
one time or you do it a bunch of times

00:29:23,679 --> 00:29:28,090
the result will always be the same and

00:29:25,539 --> 00:29:29,649
the nice thing about a you know all of

00:29:28,090 --> 00:29:31,600
the configuration management tools and

00:29:29,649 --> 00:29:33,460
Ansel is the same is that you can run

00:29:31,600 --> 00:29:35,740
the same operation over and over on a

00:29:33,460 --> 00:29:38,049
hundred systems and if you're only

00:29:35,740 --> 00:29:39,580
changing the ten systems at the end the

00:29:38,049 --> 00:29:41,049
first nine you will very quickly give

00:29:39,580 --> 00:29:44,080
you a no op nothing needs to be done

00:29:41,049 --> 00:29:45,730
this is still good we're done and so if

00:29:44,080 --> 00:29:48,010
you want to manage a large fleet you

00:29:45,730 --> 00:29:49,600
basically just keep running ansible and

00:29:48,010 --> 00:29:57,279
it will only update the systems that it

00:29:49,600 --> 00:29:58,899
needs to update are we done you can't

00:29:57,279 --> 00:30:00,340
ask me questions I'm not actually trying

00:29:58,899 --> 00:30:02,320
to hustle you out of here but I don't

00:30:00,340 --> 00:30:03,730
want you to feel obliged either because

00:30:02,320 --> 00:30:08,529
I'll be around you know if you want to

00:30:03,730 --> 00:30:11,159
talk later no we're good all right

00:30:08,529 --> 00:30:11,159

YouTube URL: https://www.youtube.com/watch?v=hHsytHvdbTA


