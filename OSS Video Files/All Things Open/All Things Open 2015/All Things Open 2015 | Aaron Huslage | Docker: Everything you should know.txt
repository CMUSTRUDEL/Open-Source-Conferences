Title: All Things Open 2015 | Aaron Huslage | Docker: Everything you should know
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2015, October 19-20 in Raleigh, NC. All Things Open 2015, October 19th and 20th, Raleigh NC. All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,670 --> 00:00:10,620
hi I'm Erin hustla CH I've been doing

00:00:07,470 --> 00:00:13,080
system administration since forever and

00:00:10,620 --> 00:00:14,639
I'm currently a solution engineer at

00:00:13,080 --> 00:00:18,150
docker which means I go talk to folks

00:00:14,639 --> 00:00:19,949
and and tell them to buy stuff so buy

00:00:18,150 --> 00:00:22,220
stuff okay now i'm done with that part

00:00:19,949 --> 00:00:26,160
of my job and I could do other things so

00:00:22,220 --> 00:00:29,429
who here has done stuff with docker

00:00:26,160 --> 00:00:32,189
right now like has played with it and is

00:00:29,429 --> 00:00:34,820
anybody using a new production well

00:00:32,189 --> 00:00:36,930
you're all fired just leave you're done

00:00:34,820 --> 00:00:39,890
so we'll talk a little bit about why

00:00:36,930 --> 00:00:42,420
docker exists what we're doing with it

00:00:39,890 --> 00:00:44,670
what it is and how to get started and

00:00:42,420 --> 00:00:46,379
then hopefully I'm going to try to rush

00:00:44,670 --> 00:00:47,910
through this a little bit because I want

00:00:46,379 --> 00:00:49,950
you to be able to ask questions if you

00:00:47,910 --> 00:00:55,879
have any I mean does anybody have

00:00:49,950 --> 00:00:58,920
questions already oh good so why docker

00:00:55,879 --> 00:01:00,570
so right now we're in this world where

00:00:58,920 --> 00:01:03,890
everybody wants to do everything faster

00:01:00,570 --> 00:01:07,409
which is always right this isn't new

00:01:03,890 --> 00:01:08,939
there are large environments out there

00:01:07,409 --> 00:01:11,250
you know I was at a customer the other

00:01:08,939 --> 00:01:14,460
day that had six thousand applications

00:01:11,250 --> 00:01:19,350
which is a little absurd that they have

00:01:14,460 --> 00:01:20,909
to deal with and run every day the these

00:01:19,350 --> 00:01:23,689
environments are growing they're not

00:01:20,909 --> 00:01:25,909
shrinking and even with a

00:01:23,689 --> 00:01:28,020
rationalization and stuff like that

00:01:25,909 --> 00:01:32,130
projects that are out there people still

00:01:28,020 --> 00:01:34,020
make new stuff and so we've entered a

00:01:32,130 --> 00:01:37,770
new world we're scaling is really really

00:01:34,020 --> 00:01:40,380
important and and iterating very quickly

00:01:37,770 --> 00:01:43,380
is very important so before you went

00:01:40,380 --> 00:01:45,630
through this whole like waterfall thing

00:01:43,380 --> 00:01:49,110
where you had specifications and you had

00:01:45,630 --> 00:01:52,500
implementation and you know the the

00:01:49,110 --> 00:01:55,170
whole cycle is very prescriptive it was

00:01:52,500 --> 00:01:58,649
very slow on purpose like that worked at

00:01:55,170 --> 00:02:01,020
the time you have a big big monolithic

00:01:58,649 --> 00:02:03,119
application like SI p you have to like

00:02:01,020 --> 00:02:06,270
do things a certain way or the thing

00:02:03,119 --> 00:02:09,509
doesn't work at the end of it even SI b

00:02:06,270 --> 00:02:13,290
is changing now by the way but these

00:02:09,509 --> 00:02:15,390
large things have been kind of

00:02:13,290 --> 00:02:18,659
blown up over the last few years with

00:02:15,390 --> 00:02:21,239
new technologies for you know front end

00:02:18,659 --> 00:02:23,849
dev you know like nodejs and new

00:02:21,239 --> 00:02:28,049
JavaScript frameworks and backend stuff

00:02:23,849 --> 00:02:32,370
like big data change big data no sequel

00:02:28,049 --> 00:02:35,909
databases the cloud the cloud it's not

00:02:32,370 --> 00:02:37,739
raining so I don't know but we talked

00:02:35,909 --> 00:02:39,629
about Minimum Viable Product we just

00:02:37,739 --> 00:02:42,120
want to get something out there see what

00:02:39,629 --> 00:02:44,790
works and then iterate over top of that

00:02:42,120 --> 00:02:47,040
over and over again and that goes for

00:02:44,790 --> 00:02:49,859
Internet companies and it now goes for

00:02:47,040 --> 00:02:52,139
enterprises like fidelity right we want

00:02:49,859 --> 00:02:55,620
to make sure that applications can just

00:02:52,139 --> 00:02:58,590
go and that teens are very quick and

00:02:55,620 --> 00:02:59,430
that you're never finished right we

00:02:58,590 --> 00:03:00,959
don't want to make sure you're never

00:02:59,430 --> 00:03:03,329
finished but that's just the way it

00:03:00,959 --> 00:03:05,909
works right like people you know you're

00:03:03,329 --> 00:03:08,129
finished today but you're not finished

00:03:05,909 --> 00:03:12,239
right there's always more to do but this

00:03:08,129 --> 00:03:15,209
also makes things pretty hard right so

00:03:12,239 --> 00:03:16,950
before we had a lot of you know big

00:03:15,209 --> 00:03:19,079
environments you had one language at

00:03:16,950 --> 00:03:21,810
Java right for the most part in the

00:03:19,079 --> 00:03:24,510
enterprise and then you had one

00:03:21,810 --> 00:03:28,260
framework you know one database one

00:03:24,510 --> 00:03:30,180
server or one set of servers and you

00:03:28,260 --> 00:03:32,250
know maybe a dev environment if you're

00:03:30,180 --> 00:03:34,949
lucky and getting a dev environment took

00:03:32,250 --> 00:03:37,349
you three weeks and cost forty thousand

00:03:34,949 --> 00:03:39,690
dollars and never worked at the end

00:03:37,349 --> 00:03:42,299
until you iterated over that 30 times

00:03:39,690 --> 00:03:45,780
with some IT guy who is really sad and

00:03:42,299 --> 00:03:49,379
then today we have a lot of environments

00:03:45,780 --> 00:03:54,000
we have a lot of languages developers of

00:03:49,379 --> 00:03:56,370
this generation want to just write code

00:03:54,000 --> 00:03:58,819
they don't want to think about corporate

00:03:56,370 --> 00:04:01,949
standards they don't want to think about

00:03:58,819 --> 00:04:03,840
junk that they don't feel is is sort of

00:04:01,949 --> 00:04:05,579
in their remit right they want to write

00:04:03,840 --> 00:04:08,310
code to do a certain thing at a certain

00:04:05,579 --> 00:04:11,479
time and make sure that thing runs right

00:04:08,310 --> 00:04:14,549
so there's so many tools out there

00:04:11,479 --> 00:04:16,139
picking one is impossible at an

00:04:14,549 --> 00:04:19,400
organizational level for the most part

00:04:16,139 --> 00:04:21,750
so you have to allow for this sort of

00:04:19,400 --> 00:04:23,760
iteration and change to go on all the

00:04:21,750 --> 00:04:26,820
time and then everybody has their own

00:04:23,760 --> 00:04:29,250
environment I can run you know all of

00:04:26,820 --> 00:04:33,000
you know my application on this laptop

00:04:29,250 --> 00:04:34,980
right now if i want to write and so we

00:04:33,000 --> 00:04:36,650
want to allow for that to occur but

00:04:34,980 --> 00:04:38,850
we're also seeing new trends like

00:04:36,650 --> 00:04:41,340
continuous integration which isn't new

00:04:38,850 --> 00:04:44,250
but is it has evolved into something

00:04:41,340 --> 00:04:47,940
that is really important to to DevOps

00:04:44,250 --> 00:04:52,080
and be able to spin up in femoral

00:04:47,940 --> 00:04:53,580
environments you know and and and this

00:04:52,080 --> 00:04:56,160
changes the way you do deployment to

00:04:53,580 --> 00:04:57,870
write so you have new versions once in a

00:04:56,160 --> 00:05:00,030
while and the old thing it took you

00:04:57,870 --> 00:05:01,380
forever to upgrade something because you

00:05:00,030 --> 00:05:03,300
had to make sure everything was lined

00:05:01,380 --> 00:05:05,580
oven and that was a whole other project

00:05:03,300 --> 00:05:07,980
in itself and scaling you just bought

00:05:05,580 --> 00:05:09,870
bigger iron right you didn't you didn't

00:05:07,980 --> 00:05:11,370
spread it out as much over a bunch of

00:05:09,870 --> 00:05:14,280
different servers you just bought a

00:05:11,370 --> 00:05:15,930
bigger box right and so that cost a lot

00:05:14,280 --> 00:05:20,070
of money it takes a lot of planning it

00:05:15,930 --> 00:05:23,370
becomes complicated today we want to

00:05:20,070 --> 00:05:25,530
just deploy something infrastructure is

00:05:23,370 --> 00:05:29,250
less relevant today than it ever has

00:05:25,530 --> 00:05:30,990
been from a application perspective I

00:05:29,250 --> 00:05:32,400
know that's going to take a lot of

00:05:30,990 --> 00:05:34,170
people up who love their hardware but

00:05:32,400 --> 00:05:37,500
that's the truth right we want to be

00:05:34,170 --> 00:05:41,790
able to bring up an environment and run

00:05:37,500 --> 00:05:44,040
it anywhere very quickly and that means

00:05:41,790 --> 00:05:47,850
we need some new tools and that's where

00:05:44,040 --> 00:05:50,520
docker comes in right so docker is a way

00:05:47,850 --> 00:05:53,370
to execute containers it's a way to

00:05:50,520 --> 00:05:54,960
build them the images it's a way to

00:05:53,370 --> 00:05:57,750
distribute images amongst an

00:05:54,960 --> 00:06:00,210
organization or the world and it has a

00:05:57,750 --> 00:06:02,580
humongous ecosystem built up around it

00:06:00,210 --> 00:06:05,160
right so there there's a tool for the

00:06:02,580 --> 00:06:09,480
job if docker doesn't make it then

00:06:05,160 --> 00:06:11,280
somebody else does so it's kind of like

00:06:09,480 --> 00:06:14,670
a hypervisor for container that's right

00:06:11,280 --> 00:06:17,430
but a container is not a virtual machine

00:06:14,670 --> 00:06:19,830
we don't docker doesn't virtualize

00:06:17,430 --> 00:06:21,750
anything right we just put it in a box

00:06:19,830 --> 00:06:23,880
we just take your code and we stick in

00:06:21,750 --> 00:06:25,890
this box and you can ship that box

00:06:23,880 --> 00:06:28,590
wherever you want and as long as you're

00:06:25,890 --> 00:06:31,020
running Linux and soon windows and soon

00:06:28,590 --> 00:06:33,240
multiple platforms as well you'll be

00:06:31,020 --> 00:06:36,450
able to run that container no matter

00:06:33,240 --> 00:06:37,890
where it is right so you could think of

00:06:36,450 --> 00:06:38,639
it as lightweight virtual machine but

00:06:37,890 --> 00:06:43,650
don't

00:06:38,639 --> 00:06:45,389
it's wrong and so I'm just going to run

00:06:43,650 --> 00:06:55,409
a container right here so if i do docker

00:06:45,389 --> 00:06:59,129
run what oh i did download this earlier

00:06:55,409 --> 00:07:01,680
I don't know what happened it's not too

00:06:59,129 --> 00:07:04,590
big so we'll be fine so this is going to

00:07:01,680 --> 00:07:07,080
so this is my mac it's happy doing its

00:07:04,590 --> 00:07:08,580
thing mackay thing but it's also got a

00:07:07,080 --> 00:07:11,460
virtual machine on it that has linux

00:07:08,580 --> 00:07:13,650
it's running a specific special linux

00:07:11,460 --> 00:07:16,289
distribution the doctor makes called

00:07:13,650 --> 00:07:18,509
boot to dr. which is very thin small in

00:07:16,289 --> 00:07:20,939
it and it lets me run docker containers

00:07:18,509 --> 00:07:23,310
on my Mac this also works on windows too

00:07:20,939 --> 00:07:27,180
so you don't have to be like Linux e to

00:07:23,310 --> 00:07:30,319
do this you can just run it and so now

00:07:27,180 --> 00:07:33,389
I'm so now I've run linux right so if I

00:07:30,319 --> 00:07:36,659
looked at oh wait I'm not a virtual

00:07:33,389 --> 00:07:41,819
machine right this Colonel can you see

00:07:36,659 --> 00:07:43,680
this it's too small ok so this Colonel

00:07:41,819 --> 00:07:45,659
is is actually the colonel that's

00:07:43,680 --> 00:07:48,089
running in the virtual machine on the vm

00:07:45,659 --> 00:07:50,849
it's not a new kernel I didn't vote an

00:07:48,089 --> 00:07:54,349
operating system right if I look at here

00:07:50,849 --> 00:07:57,270
i see i have bash right in my in my

00:07:54,349 --> 00:08:01,520
process space so what we've done is

00:07:57,270 --> 00:08:01,520
we've taken yeah

00:08:05,220 --> 00:08:12,940
so sorry about that thank you for

00:08:09,130 --> 00:08:15,070
letting me know so if you look here this

00:08:12,940 --> 00:08:19,050
has its own process space right it looks

00:08:15,070 --> 00:08:19,050
like a virtual machine right it also has

00:08:19,860 --> 00:08:27,430
its own network right so I'm running a

00:08:23,470 --> 00:08:32,620
network in here that has a IP address of

00:08:27,430 --> 00:08:35,229
172 1703 right this is just a private

00:08:32,620 --> 00:08:38,050
network on the Linux house right like I

00:08:35,229 --> 00:08:40,570
can see what I've mounted right but I've

00:08:38,050 --> 00:08:43,060
mounted a bunch of stuff that doesn't

00:08:40,570 --> 00:08:45,520
matter and then slash is is its own

00:08:43,060 --> 00:08:47,220
thing right so I have my own mount point

00:08:45,520 --> 00:08:49,960
so I have my own network i have my own

00:08:47,220 --> 00:08:51,610
everything but i'm not a virtual machine

00:08:49,960 --> 00:08:53,680
because i'm sharing the same kernel as i

00:08:51,610 --> 00:08:58,030
am with the rest of the world on that

00:08:53,680 --> 00:08:59,830
host right so it's kind of similar to

00:08:58,030 --> 00:09:04,440
virtualization but it's not anything

00:08:59,830 --> 00:09:07,690
like virtualization to confuse you more

00:09:04,440 --> 00:09:13,530
so like I said it looks it feels like a

00:09:07,690 --> 00:09:16,740
vm you run standard UNIX processes just

00:09:13,530 --> 00:09:19,510
isolated from everything else so we use

00:09:16,740 --> 00:09:22,780
namespaces see groups or control groups

00:09:19,510 --> 00:09:26,920
and copy-on-write file systems to do

00:09:22,780 --> 00:09:29,440
this so starting a container is very

00:09:26,920 --> 00:09:33,580
quick you saw me download an image

00:09:29,440 --> 00:09:35,920
called ubuntu which is Ubuntu 1404 it's

00:09:33,580 --> 00:09:39,400
it's not really a bun to its enough to

00:09:35,920 --> 00:09:41,950
make it 12 look make the image look like

00:09:39,400 --> 00:09:50,290
a bun 22 you know I can go in and air i

00:09:41,950 --> 00:09:52,090
can run apt-get update right and it'll

00:09:50,290 --> 00:09:54,670
go and run just like it would on a

00:09:52,090 --> 00:09:56,880
regular alone to box right my host

00:09:54,670 --> 00:10:02,440
operating system is not a bunt too it's

00:09:56,880 --> 00:10:04,300
something else right but so what we do

00:10:02,440 --> 00:10:06,820
with docker is we launched unix

00:10:04,300 --> 00:10:08,470
processes inside of a box that's all we

00:10:06,820 --> 00:10:10,320
do you're not booting an operating

00:10:08,470 --> 00:10:13,150
system you're not doing anything special

00:10:10,320 --> 00:10:15,400
from the processes perspective the

00:10:13,150 --> 00:10:16,970
process runs inside of an environment

00:10:15,400 --> 00:10:19,459
that it knows and

00:10:16,970 --> 00:10:20,959
right so we're going to in this case you

00:10:19,459 --> 00:10:23,589
could do it with rel you could do it

00:10:20,959 --> 00:10:27,949
with you know mom's linux or whatever

00:10:23,589 --> 00:10:31,790
and then we also provide an easy way to

00:10:27,949 --> 00:10:33,709
build this right so you know putting

00:10:31,790 --> 00:10:35,750
this all together is sort of weird right

00:10:33,709 --> 00:10:37,160
you you could do it manually you could

00:10:35,750 --> 00:10:39,889
sort of take a snapshot of your

00:10:37,160 --> 00:10:41,750
filesystem and then kind of move it

00:10:39,889 --> 00:10:44,839
around but then we provide you an

00:10:41,750 --> 00:10:46,910
abstraction called a docker file this is

00:10:44,839 --> 00:10:48,290
a an insanely complicated one it's

00:10:46,910 --> 00:10:53,389
actually not that complicated but

00:10:48,290 --> 00:10:57,199
basically we this is to build a Jenkins

00:10:53,389 --> 00:10:58,790
server right so it's a it's a server I'm

00:10:57,199 --> 00:11:01,579
running in the cloud right now I can

00:10:58,790 --> 00:11:03,170
spin up a thousand instances of Jenkins

00:11:01,579 --> 00:11:06,680
which is a continuous integration system

00:11:03,170 --> 00:11:08,899
in about five seconds without a problem

00:11:06,680 --> 00:11:12,230
and all it is really is a list of

00:11:08,899 --> 00:11:14,720
commands it's almost a shell script and

00:11:12,230 --> 00:11:17,050
it just says install this stuff inside

00:11:14,720 --> 00:11:21,040
the container and then at the end of it

00:11:17,050 --> 00:11:25,399
I can't bring this higher because the I

00:11:21,040 --> 00:11:28,939
is coming in that I run right so I'm

00:11:25,399 --> 00:11:33,230
just running Jenkins inside of this

00:11:28,939 --> 00:11:35,180
container right and and so that that

00:11:33,230 --> 00:11:37,100
that sort of defines it and then I can

00:11:35,180 --> 00:11:38,809
go build it if I want I'm not going to

00:11:37,100 --> 00:11:40,639
do it here but but I'll show you in a

00:11:38,809 --> 00:11:44,120
second how to build something else so

00:11:40,639 --> 00:11:46,370
the dockerfile is just a recipe it's

00:11:44,120 --> 00:11:49,309
simple like I said it's simple to learn

00:11:46,370 --> 00:11:52,639
it's very fast because everything is

00:11:49,309 --> 00:11:54,980
cached once you build it once and if you

00:11:52,639 --> 00:11:58,100
build it again on that same machine if

00:11:54,980 --> 00:12:00,350
if it if nothing changed between those

00:11:58,100 --> 00:12:02,750
it it's not going to rebuild them

00:12:00,350 --> 00:12:04,639
because why and it's going to make sure

00:12:02,750 --> 00:12:09,019
that you know everything builds as

00:12:04,639 --> 00:12:12,290
quickly as possible and so it lets you

00:12:09,019 --> 00:12:14,839
have your cake and eat it too unlike a

00:12:12,290 --> 00:12:16,459
lot of things where you're you're sort

00:12:14,839 --> 00:12:20,449
of always rebuilding or you're always

00:12:16,459 --> 00:12:22,129
trying to catch up right and trying to

00:12:20,449 --> 00:12:24,199
poo poo chefs all tangible or whatever

00:12:22,129 --> 00:12:26,899
it's it's a different way of looking at

00:12:24,199 --> 00:12:30,920
the world and what they have right so

00:12:26,899 --> 00:12:33,589
let's look at this so and if you notice

00:12:30,920 --> 00:12:35,899
like each of these things is a these run

00:12:33,589 --> 00:12:38,079
add whatever these are just commands at

00:12:35,899 --> 00:12:40,970
the top that tell dr. what to do and

00:12:38,079 --> 00:12:44,029
each one of those results in a layer so

00:12:40,970 --> 00:12:47,269
we snapshot the filesystem at each one

00:12:44,029 --> 00:12:49,940
of these points and then mount them all

00:12:47,269 --> 00:12:52,880
together as a unit a union file system

00:12:49,940 --> 00:12:56,930
so the changes it's called copy-on-write

00:12:52,880 --> 00:13:00,079
so I have a base image in this case it's

00:12:56,930 --> 00:13:02,690
a bum too and that's always static each

00:13:00,079 --> 00:13:04,820
layer is immutable so once it's built

00:13:02,690 --> 00:13:07,699
that's built you can build the new layer

00:13:04,820 --> 00:13:10,370
right if you change if you change it but

00:13:07,699 --> 00:13:11,990
you can't change you're not actually

00:13:10,370 --> 00:13:16,149
changing the layer you're just replacing

00:13:11,990 --> 00:13:19,190
it so it's just a straight tree of

00:13:16,149 --> 00:13:21,139
images that are mounted from the top

00:13:19,190 --> 00:13:24,079
down so that you see a consistent image

00:13:21,139 --> 00:13:27,139
of your file system and so I have a

00:13:24,079 --> 00:13:30,860
little i'm still in the thing i have a

00:13:27,139 --> 00:13:34,880
little application here that's just a

00:13:30,860 --> 00:13:38,720
little web server written ago because

00:13:34,880 --> 00:13:43,550
and the language is totally irrelevant

00:13:38,720 --> 00:13:45,680
docker it doesn't care but it allows

00:13:43,550 --> 00:13:47,899
it's just a little web server that shows

00:13:45,680 --> 00:13:49,459
a picture of the docker logo and then

00:13:47,899 --> 00:13:53,959
connects to a database and updates a

00:13:49,459 --> 00:14:01,070
timestamp it's done on purpose and then

00:13:53,959 --> 00:14:04,779
there's a docker file for it right and I

00:14:01,070 --> 00:14:04,779
mean let me do that again

00:14:06,710 --> 00:14:13,040
and that's it there's two lines in it

00:14:09,070 --> 00:14:16,280
because we have some tricks in here so

00:14:13,040 --> 00:14:18,260
that called on build that says when you

00:14:16,280 --> 00:14:20,210
build a container from me go run these

00:14:18,260 --> 00:14:22,010
commands right and that's all this is

00:14:20,210 --> 00:14:23,960
doing so this is compiling a go

00:14:22,010 --> 00:14:26,330
application when I build a container

00:14:23,960 --> 00:14:30,170
from it and then I'm just saying exposed

00:14:26,330 --> 00:14:34,150
port 8080 so that I can run the thing so

00:14:30,170 --> 00:14:34,150
if i run docker build

00:14:42,190 --> 00:14:49,190
so that went and downloaded a little

00:14:44,690 --> 00:14:52,220
postgres connector and compiled the go

00:14:49,190 --> 00:14:54,769
code and then and now i have a container

00:14:52,220 --> 00:15:03,279
image called what did I call it blah so

00:14:54,769 --> 00:15:06,490
docker images laws in here somewhere I

00:15:03,279 --> 00:15:06,490
could grab

00:15:09,410 --> 00:15:14,569
there it is so this is the culmination

00:15:12,649 --> 00:15:17,060
of all those different layers of stuff

00:15:14,569 --> 00:15:19,750
and it creates this image called blah

00:15:17,060 --> 00:15:22,730
and then I can run that image on its own

00:15:19,750 --> 00:15:25,939
does that make sense it's a very simple

00:15:22,730 --> 00:15:28,540
way of taking something and having a

00:15:25,939 --> 00:15:31,550
consistent development environment this

00:15:28,540 --> 00:15:35,750
image is the same here as it is on a

00:15:31,550 --> 00:15:38,060
server in Timbuktu and that's important

00:15:35,750 --> 00:15:39,740
because you don't want your development

00:15:38,060 --> 00:15:41,060
environment to be different from your

00:15:39,740 --> 00:15:43,639
production environment if you can help

00:15:41,060 --> 00:15:45,769
it right in terms of what's running now

00:15:43,639 --> 00:15:48,259
you may have scaling differences and

00:15:45,769 --> 00:15:51,709
stuff like that but in the end you're

00:15:48,259 --> 00:15:56,990
wanting to run the same code that you

00:15:51,709 --> 00:15:58,639
have here out there somewhere and so the

00:15:56,990 --> 00:16:00,740
dockerfile that the way that we do

00:15:58,639 --> 00:16:03,050
builds is and the way that images are

00:16:00,740 --> 00:16:06,529
immutable makes that possible the

00:16:03,050 --> 00:16:08,060
entirety of all of these dependencies

00:16:06,529 --> 00:16:09,620
all the language library is all that

00:16:08,060 --> 00:16:11,750
stuff is contained inside of this thing

00:16:09,620 --> 00:16:17,600
and that thing's not going to change and

00:16:11,750 --> 00:16:19,100
that thing can be shipped quickly so the

00:16:17,600 --> 00:16:21,470
problem another problem we tried to

00:16:19,100 --> 00:16:24,279
solve is that virtual machine images are

00:16:21,470 --> 00:16:26,870
giant right because you have this entire

00:16:24,279 --> 00:16:30,860
operating system with hardware drivers

00:16:26,870 --> 00:16:33,680
and a bunch other crap that you don't

00:16:30,860 --> 00:16:35,720
want you don't need it's different it's

00:16:33,680 --> 00:16:37,220
irrelevant really to the application the

00:16:35,720 --> 00:16:39,470
application can care less for the most

00:16:37,220 --> 00:16:40,730
part they just need a place to like even

00:16:39,470 --> 00:16:42,139
if it needs a device driver on the

00:16:40,730 --> 00:16:43,730
system it just needs to place the point

00:16:42,139 --> 00:16:46,730
right it doesn't need doesn't really

00:16:43,730 --> 00:16:48,620
care from a hardware perspective wrote

00:16:46,730 --> 00:16:50,000
it all right so since we're not

00:16:48,620 --> 00:16:53,360
virtualizing anything we don't need

00:16:50,000 --> 00:16:55,009
hardware stuff we handle logs in a

00:16:53,360 --> 00:16:57,019
separate way so you don't need syslog

00:16:55,009 --> 00:16:58,430
you don't even need in it right you

00:16:57,019 --> 00:17:01,220
don't even need a process controller

00:16:58,430 --> 00:17:03,339
inside the thing if all you're running

00:17:01,220 --> 00:17:07,939
is a single process it doesn't matter

00:17:03,339 --> 00:17:11,720
and so like I said one layer is one

00:17:07,939 --> 00:17:13,850
build step so each of those little lines

00:17:11,720 --> 00:17:18,100
in the dockerfile is just a layer in the

00:17:13,850 --> 00:17:20,089
file system and then okay but how do you

00:17:18,100 --> 00:17:23,390
get that thing you move it

00:17:20,089 --> 00:17:26,120
right historically you would take a vmdk

00:17:23,390 --> 00:17:28,789
or a disk image of some sort and you

00:17:26,120 --> 00:17:32,510
tore it up with some configuration

00:17:28,789 --> 00:17:34,700
metadata and you SCP that or sink it off

00:17:32,510 --> 00:17:36,559
to some server somewhere and it takes

00:17:34,700 --> 00:17:38,330
you four hours or whatever because you

00:17:36,559 --> 00:17:40,640
were at home on your crappy time warner

00:17:38,330 --> 00:17:43,669
cable link and and you know it was awful

00:17:40,640 --> 00:17:46,820
right so um need another way to do that

00:17:43,669 --> 00:17:48,830
right so we took a cue from get and oh

00:17:46,820 --> 00:17:53,179
yeah and you have to remember them magic

00:17:48,830 --> 00:17:56,059
right so the magic options we all love

00:17:53,179 --> 00:17:59,020
those as system in search of crap how do

00:17:56,059 --> 00:18:03,919
I do that I don't know google it okay um

00:17:59,020 --> 00:18:06,950
mostly so the solution is we have a

00:18:03,919 --> 00:18:10,460
registry just like you would have with a

00:18:06,950 --> 00:18:13,190
git repository you have a place to throw

00:18:10,460 --> 00:18:15,770
stuff right so we have an open API in

00:18:13,190 --> 00:18:17,690
fact everything with docker doctors open

00:18:15,770 --> 00:18:21,289
source so you could all obviously read

00:18:17,690 --> 00:18:23,630
the code but easier is we have api's for

00:18:21,289 --> 00:18:25,850
everything in fact our own client our

00:18:23,630 --> 00:18:31,010
own tools use the same api's that we

00:18:25,850 --> 00:18:33,649
publish over HTTP so everything is is

00:18:31,010 --> 00:18:35,149
just open and easy to deal with so you

00:18:33,649 --> 00:18:39,169
can write your own clients to it you can

00:18:35,149 --> 00:18:40,700
right here on servers for it and and we

00:18:39,169 --> 00:18:43,130
have a public service called docker hub

00:18:40,700 --> 00:18:46,130
which is where you can push and pull

00:18:43,130 --> 00:18:47,929
images to the world so that a bun to

00:18:46,130 --> 00:18:54,020
image that you saw me download earlier

00:18:47,929 --> 00:18:56,000
came from docker hub and and then we

00:18:54,020 --> 00:18:58,070
also have an on-premise registry called

00:18:56,000 --> 00:19:01,460
docker trusted registry that you can run

00:18:58,070 --> 00:19:03,340
locally or in your own private world

00:19:01,460 --> 00:19:10,100
that isn't shared with everybody else

00:19:03,340 --> 00:19:11,960
and so so I'm gonna actually I'm going

00:19:10,100 --> 00:19:15,770
to skip this part and I'll show you the

00:19:11,960 --> 00:19:17,480
rest in a minute but we have over 100

00:19:15,770 --> 00:19:20,659
official images so just about every

00:19:17,480 --> 00:19:26,270
linux distribution is is up on docker

00:19:20,659 --> 00:19:28,630
hub lots of databases web server stuff

00:19:26,270 --> 00:19:28,630
like yep

00:19:32,830 --> 00:19:37,550
so the question was where does the data

00:19:35,750 --> 00:19:39,440
go in a database because container

00:19:37,550 --> 00:19:42,640
images are immutable when you run a

00:19:39,440 --> 00:19:46,940
container we create a read/write layer

00:19:42,640 --> 00:19:50,390
that so that things can still write but

00:19:46,940 --> 00:19:53,990
you can also map in a file system from

00:19:50,390 --> 00:19:55,640
the host as well to store data um which

00:19:53,990 --> 00:19:57,020
is sort of the recommended way to do it

00:19:55,640 --> 00:20:00,050
because then you know where it is and

00:19:57,020 --> 00:20:02,720
you can manage that you know just about

00:20:00,050 --> 00:20:04,970
any programming languages up there in

00:20:02,720 --> 00:20:06,560
some official capacity that there are

00:20:04,970 --> 00:20:09,230
official images are vetted and

00:20:06,560 --> 00:20:12,740
maintained by the people that write the

00:20:09,230 --> 00:20:15,860
software so they upload these to get

00:20:12,740 --> 00:20:17,810
repository tell us how to you know and

00:20:15,860 --> 00:20:20,060
then they're basically just ready to go

00:20:17,810 --> 00:20:23,600
images and then we import them and sign

00:20:20,060 --> 00:20:26,810
them and and so you know that they're

00:20:23,600 --> 00:20:28,910
the real deal and then you know there's

00:20:26,810 --> 00:20:31,190
a countless number of contributed images

00:20:28,910 --> 00:20:32,750
so people have some new tool they want

00:20:31,190 --> 00:20:34,130
to try they'll build a docker image and

00:20:32,750 --> 00:20:37,160
throw it up there and you can go and

00:20:34,130 --> 00:20:41,990
search for it and download it fairly

00:20:37,160 --> 00:20:45,560
easily about a hundred thousand github

00:20:41,990 --> 00:20:47,750
repos have a docker file in them we have

00:20:45,560 --> 00:20:50,030
nice little metrics inside that we watch

00:20:47,750 --> 00:20:53,540
this stuff because we're evil in big

00:20:50,030 --> 00:20:56,720
brother or something no um we want to

00:20:53,540 --> 00:20:58,520
know what people are doing right there

00:20:56,720 --> 00:21:03,620
are over a thousand contributors to the

00:20:58,520 --> 00:21:05,780
docker code on github there's hundreds

00:21:03,620 --> 00:21:07,730
and almost probably thousands of

00:21:05,780 --> 00:21:12,320
projects integrating with docker from

00:21:07,730 --> 00:21:14,900
from from startup stuff all the way up

00:21:12,320 --> 00:21:17,980
to giant corporations like IBM and

00:21:14,900 --> 00:21:20,660
Oracle and CSC and stuff like that and

00:21:17,980 --> 00:21:23,570
then we have to earn tools as well that

00:21:20,660 --> 00:21:26,720
come with you know what we call the

00:21:23,570 --> 00:21:29,870
docker toolbox so we have docker machine

00:21:26,720 --> 00:21:32,210
which lets you start a host and it talks

00:21:29,870 --> 00:21:33,590
to about 20 different cloud providers so

00:21:32,210 --> 00:21:35,390
you just pass in your keys and it

00:21:33,590 --> 00:21:37,520
creates a vm out there that has docker

00:21:35,390 --> 00:21:40,190
already installed in it complete with

00:21:37,520 --> 00:21:41,350
TLS keys and all of that so that it's

00:21:40,190 --> 00:21:43,179
all secure

00:21:41,350 --> 00:21:45,850
you're not going to like broadcast the

00:21:43,179 --> 00:21:47,799
world that hey you know and actually

00:21:45,850 --> 00:21:48,970
there are scripts out there script

00:21:47,799 --> 00:21:52,890
kiddies out there because I had a

00:21:48,970 --> 00:21:57,130
machine that I had open with docker

00:21:52,890 --> 00:21:58,690
unencrypted and it got owned very

00:21:57,130 --> 00:22:00,160
quickly it was interesting I was sort of

00:21:58,690 --> 00:22:01,419
an experiment I was curious to see if

00:22:00,160 --> 00:22:03,250
there were any script kiddies out there

00:22:01,419 --> 00:22:04,929
doing stuff so they'll run a docker

00:22:03,250 --> 00:22:07,270
machine that goes and does Bitcoin or

00:22:04,929 --> 00:22:10,539
whatever whatever that these people want

00:22:07,270 --> 00:22:12,549
to do then like five minutes later

00:22:10,539 --> 00:22:15,010
amazon emails me hey your machines been

00:22:12,549 --> 00:22:19,900
hacked him so you know I felt good you

00:22:15,010 --> 00:22:25,419
know it was cool um I mean stalker has

00:22:19,900 --> 00:22:28,630
arrived oh if you're worth hacking it's

00:22:25,419 --> 00:22:30,190
good we have docker composed which I'll

00:22:28,630 --> 00:22:32,919
show you in a second it lets you manage

00:22:30,190 --> 00:22:35,230
these applications applications are very

00:22:32,919 --> 00:22:37,030
rarely just one container right you have

00:22:35,230 --> 00:22:38,200
you have a service to do X and you have

00:22:37,030 --> 00:22:39,850
a service to do y and you have a

00:22:38,200 --> 00:22:41,049
database and you have other things and

00:22:39,850 --> 00:22:42,880
you need to make sure they all talk to

00:22:41,049 --> 00:22:45,460
each other and that's what compose does

00:22:42,880 --> 00:22:47,470
and then we have swarm which clusters

00:22:45,460 --> 00:22:49,990
hosts together in a really insanely

00:22:47,470 --> 00:22:51,760
stupidly easy way and we've actually

00:22:49,990 --> 00:22:54,100
been doing some really awesome scale

00:22:51,760 --> 00:22:58,480
tests I can't tell you about yet they'll

00:22:54,100 --> 00:22:59,710
be blog posts but the scale numbers that

00:22:58,480 --> 00:23:04,030
we're getting in da course worm are

00:22:59,710 --> 00:23:06,610
really good too so all very cool little

00:23:04,030 --> 00:23:08,289
tools and let's talk a little bit about

00:23:06,610 --> 00:23:10,539
docker compose which will also show you

00:23:08,289 --> 00:23:14,409
more of the docker the push and pull

00:23:10,539 --> 00:23:17,110
tadakha registries so we're going to put

00:23:14,409 --> 00:23:18,640
together a little app from multiple

00:23:17,110 --> 00:23:21,940
containers this demo apps that I showed

00:23:18,640 --> 00:23:24,159
you we're going to show you how in this

00:23:21,940 --> 00:23:26,980
one file will define how to build the

00:23:24,159 --> 00:23:28,630
image how to run it what the port

00:23:26,980 --> 00:23:33,270
mappings are and how to link the

00:23:28,630 --> 00:23:33,270
containers together right so

00:23:41,360 --> 00:23:49,220
so this is a docker composed file and

00:23:44,240 --> 00:23:50,750
yes we so it's a simple yamel file so if

00:23:49,220 --> 00:23:53,960
you know ansible or something like that

00:23:50,750 --> 00:23:55,250
you know this stuff very simple if you

00:23:53,960 --> 00:23:57,260
don't know ansible you should probably

00:23:55,250 --> 00:24:01,760
go learn that too because it's freaking

00:23:57,260 --> 00:24:04,280
awesome anyway I'm so we have two

00:24:01,760 --> 00:24:07,670
containers in this app we have app which

00:24:04,280 --> 00:24:10,130
I descriptive I'm not interesting and

00:24:07,670 --> 00:24:12,049
then database which is down below and

00:24:10,130 --> 00:24:15,080
I'll show you that in a second so this

00:24:12,049 --> 00:24:17,419
says go into the demo PQ directory and

00:24:15,080 --> 00:24:19,970
build this image that's all it has to do

00:24:17,419 --> 00:24:21,380
and then entry point is just what

00:24:19,970 --> 00:24:24,980
command am I going to run so i'm going

00:24:21,380 --> 00:24:27,890
to run bash with the and i'm going to

00:24:24,980 --> 00:24:30,790
sleep for 5 seconds because postgres

00:24:27,890 --> 00:24:32,929
takes a few seconds to start up

00:24:30,790 --> 00:24:34,309
otherwise we would just run the app and

00:24:32,929 --> 00:24:36,770
it would fail because it wouldn't know

00:24:34,309 --> 00:24:38,780
how to connect to postgres and we've

00:24:36,770 --> 00:24:40,309
written our out very poorly so it doesnt

00:24:38,780 --> 00:24:42,020
sit there and wait you know because that

00:24:40,309 --> 00:24:44,780
would be sane and so we're not saying

00:24:42,020 --> 00:24:46,400
and so we just make this work this way

00:24:44,780 --> 00:24:47,750
so and then there's some environment

00:24:46,400 --> 00:24:50,240
variables that you can pass into the

00:24:47,750 --> 00:24:52,910
container as well so you know we can

00:24:50,240 --> 00:24:56,330
this is a simplistic way of doing

00:24:52,910 --> 00:24:58,040
configuration management external to a

00:24:56,330 --> 00:24:59,450
container so when you start the

00:24:58,040 --> 00:25:01,190
container it goes and reads these

00:24:59,450 --> 00:25:03,260
environment variables the application is

00:25:01,190 --> 00:25:07,730
going to read these environments and

00:25:03,260 --> 00:25:09,169
then know what to do and then it's going

00:25:07,730 --> 00:25:11,090
to link to this database container

00:25:09,169 --> 00:25:12,350
that's all you have to do to say I'm

00:25:11,090 --> 00:25:15,140
going to go talk to that database in

00:25:12,350 --> 00:25:17,720
there within an you know compose file

00:25:15,140 --> 00:25:19,610
and I'm going to expose port 8080 and

00:25:17,720 --> 00:25:22,520
then I'm going to map that to port 8080

00:25:19,610 --> 00:25:24,650
on my host as well so the way that ports

00:25:22,520 --> 00:25:27,320
work is everything is matted in a

00:25:24,650 --> 00:25:31,120
default docker environment so the host

00:25:27,320 --> 00:25:33,500
has an IP has a bridge that has an IP

00:25:31,120 --> 00:25:35,330
everybody connects to all the containers

00:25:33,500 --> 00:25:38,750
connect to that bridge and then have

00:25:35,330 --> 00:25:40,880
outbound not to get to a the outside

00:25:38,750 --> 00:25:43,760
world but also inbound port address

00:25:40,880 --> 00:25:45,770
translation to get to them directly and

00:25:43,760 --> 00:25:47,419
so dr. manages all that very

00:25:45,770 --> 00:25:50,559
transparently it's very easy just do

00:25:47,419 --> 00:25:53,120
dash p and tell it what port you want

00:25:50,559 --> 00:25:53,980
but we're doing it explicitly here

00:25:53,120 --> 00:25:57,669
because we want to

00:25:53,980 --> 00:25:58,960
that I can like run it and no and I

00:25:57,669 --> 00:26:03,220
don't have to like jump through hoops to

00:25:58,960 --> 00:26:04,960
get to it and then the next container is

00:26:03,220 --> 00:26:08,200
the DB image which you saw referenced up

00:26:04,960 --> 00:26:10,360
here and that just is postgres and it's

00:26:08,200 --> 00:26:11,860
just the latest image that's on docker

00:26:10,360 --> 00:26:13,540
hub right I don't really care what

00:26:11,860 --> 00:26:15,520
version it is I'm not all i'm doing is

00:26:13,540 --> 00:26:18,040
an insert i don't really give a damn

00:26:15,520 --> 00:26:19,540
about any of it right but i'm gonna i'm

00:26:18,040 --> 00:26:21,040
going to set my username and password so

00:26:19,540 --> 00:26:24,490
that i can actually connect to it and

00:26:21,040 --> 00:26:27,970
then it's going to expose pork 5432

00:26:24,490 --> 00:26:29,980
which is the normal postcards port the

00:26:27,970 --> 00:26:32,200
nice thing about this is there is no

00:26:29,980 --> 00:26:34,000
public port mapping for this database at

00:26:32,200 --> 00:26:37,510
all I can't connect to this database

00:26:34,000 --> 00:26:40,600
remotely I have to get I have to connect

00:26:37,510 --> 00:26:42,840
in I have to like having a shared

00:26:40,600 --> 00:26:46,000
network with it somehow to connect to it

00:26:42,840 --> 00:26:50,470
so there's a little extra security hey

00:26:46,000 --> 00:26:53,950
feature there as well so if I want to do

00:26:50,470 --> 00:26:56,770
this I can do docker compose build and

00:26:53,950 --> 00:26:58,030
that will rebuild an image which it

00:26:56,770 --> 00:26:59,890
didn't actually have to rebuild so it

00:26:58,030 --> 00:27:06,120
took like no time because I just built

00:26:59,890 --> 00:27:06,120
it and then I could do docker compose up

00:27:06,960 --> 00:27:13,090
and then the nice thing about docker

00:27:11,080 --> 00:27:17,230
composed this it also spits the logs out

00:27:13,090 --> 00:27:19,360
to you so if you see here it started the

00:27:17,230 --> 00:27:20,740
database and then it and it started the

00:27:19,360 --> 00:27:22,299
application you probably can't see at

00:27:20,740 --> 00:27:25,530
the bottom but it's our the application

00:27:22,299 --> 00:27:30,100
to and then I can go and I can hit it on

00:27:25,530 --> 00:27:36,280
on my thing and if I reload it it writes

00:27:30,100 --> 00:27:37,380
a new a new timestamp to my database

00:27:36,280 --> 00:27:40,920
right

00:27:37,380 --> 00:27:44,100
and then if I could do ctrl C and it'll

00:27:40,920 --> 00:27:45,990
stop it and if I run it again it's going

00:27:44,100 --> 00:27:48,390
to restart the database in the same

00:27:45,990 --> 00:27:50,880
place because it didn't it just stopped

00:27:48,390 --> 00:27:52,920
the container it didn't delete it so I

00:27:50,880 --> 00:27:55,410
have all that data still there to wait

00:27:52,920 --> 00:28:02,250
five seconds then the app will start

00:27:55,410 --> 00:28:04,260
again but this this makes it one second

00:28:02,250 --> 00:28:06,300
and I'll get to you this is the nice

00:28:04,260 --> 00:28:07,650
thing about dr. composes that you can

00:28:06,300 --> 00:28:10,350
define the application and that

00:28:07,650 --> 00:28:11,760
application can run anywhere right so if

00:28:10,350 --> 00:28:13,260
i have an arbitrarily complex

00:28:11,760 --> 00:28:16,530
application with five different

00:28:13,260 --> 00:28:19,890
containers or whatever i can run it all

00:28:16,530 --> 00:28:24,960
locally make sure it works and then ship

00:28:19,890 --> 00:28:26,520
that code somewhere else so if I reload

00:28:24,960 --> 00:28:30,900
it here see the database is still there

00:28:26,520 --> 00:28:35,790
and I'm just adding to it it's not that

00:28:30,900 --> 00:28:38,430
interesting so that's how dr. composed

00:28:35,790 --> 00:28:41,580
works it's very flexible very easy to

00:28:38,430 --> 00:28:44,550
use a developer can use it assisted men

00:28:41,580 --> 00:28:45,870
can use it anybody use it and and you

00:28:44,550 --> 00:28:47,580
can have you know multiple docker

00:28:45,870 --> 00:28:53,130
compose files if you want to do

00:28:47,580 --> 00:28:55,970
different things so how do you get

00:28:53,130 --> 00:29:00,030
started with it so like I said earlier

00:28:55,970 --> 00:29:05,640
we have a thing called docker toolbox it

00:29:00,030 --> 00:29:10,220
contains VirtualBox it contains docker

00:29:05,640 --> 00:29:13,860
compose docker machine docker swarm and

00:29:10,220 --> 00:29:15,860
the docker command as well as something

00:29:13,860 --> 00:29:20,850
called kite matic which is a nice gooey

00:29:15,860 --> 00:29:22,170
and it works on just about you could

00:29:20,850 --> 00:29:24,230
download it for windows and mac today

00:29:22,170 --> 00:29:26,550
there'll be a linux version too soon

00:29:24,230 --> 00:29:28,980
although for linux it's pretty easy to

00:29:26,550 --> 00:29:31,800
install there's a shell script that you

00:29:28,980 --> 00:29:33,750
can download it get darker calm and if

00:29:31,800 --> 00:29:36,480
you're brave or stupid or whatever you

00:29:33,750 --> 00:29:38,640
can do you could just curl it down and

00:29:36,480 --> 00:29:40,419
install it with a shell I don't know

00:29:38,640 --> 00:29:45,039
whatever I'm pretty happy with doing

00:29:40,419 --> 00:29:48,330
I I also know that the people that run

00:29:45,039 --> 00:29:48,330
our servers I'm not that worried about

00:29:48,450 --> 00:29:57,309
but installing docker is trivial and and

00:29:51,850 --> 00:29:59,590
very quick and then there are docks the

00:29:57,309 --> 00:30:01,929
lower they're also really bad docks that

00:29:59,590 --> 00:30:04,059
are out there on the world about how to

00:30:01,929 --> 00:30:09,149
do doc are the wrong way don't read them

00:30:04,059 --> 00:30:12,850
just stop and then redox calm and then

00:30:09,149 --> 00:30:15,070
you know we've got and then we've also

00:30:12,850 --> 00:30:17,279
got training Joker calm which shows you

00:30:15,070 --> 00:30:22,179
the right way to do things as well like

00:30:17,279 --> 00:30:23,980
I said dr. docker containers are not

00:30:22,179 --> 00:30:25,480
virtual machines if you run them like

00:30:23,980 --> 00:30:29,200
virtual machines you're in for a world

00:30:25,480 --> 00:30:33,759
of hurt stop it and like watch this

00:30:29,200 --> 00:30:38,019
video and it's 31 our videos are great

00:30:33,759 --> 00:30:39,340
super cool and then if you have an app

00:30:38,019 --> 00:30:40,840
and you want to start working on this

00:30:39,340 --> 00:30:44,859
stuff after you've learned how to do it

00:30:40,840 --> 00:30:48,039
the right way go write a docker file for

00:30:44,859 --> 00:30:51,220
it and write a docker compose file for

00:30:48,039 --> 00:30:54,159
it and play with it and use it in

00:30:51,220 --> 00:30:56,590
development right that the nice thing

00:30:54,159 --> 00:30:58,809
about docker is you're using the same

00:30:56,590 --> 00:31:00,909
thing in in your laptop for in your

00:30:58,809 --> 00:31:04,570
desktop or whatever as you are in

00:31:00,909 --> 00:31:07,600
production we solve a problem of it

00:31:04,570 --> 00:31:09,820
worked on my laptop that just goes away

00:31:07,600 --> 00:31:11,470
because it did work on your laptop which

00:31:09,820 --> 00:31:14,830
means it's going to work anywhere right

00:31:11,470 --> 00:31:20,529
so yeah whatever use it you know and

00:31:14,830 --> 00:31:22,929
then set up see I and CD right so it's

00:31:20,529 --> 00:31:25,239
pretty easy you can do it and then once

00:31:22,929 --> 00:31:27,730
you grow into something where you need

00:31:25,239 --> 00:31:29,379
scale and you need stuff the more

00:31:27,730 --> 00:31:31,210
automation around it you know dr.

00:31:29,379 --> 00:31:33,279
goombas is a great automation tool you

00:31:31,210 --> 00:31:34,899
can actually use things like ansible or

00:31:33,279 --> 00:31:36,639
whatever to start containers as well

00:31:34,899 --> 00:31:39,190
right but once you get into something

00:31:36,639 --> 00:31:41,590
where you get you need some scale run

00:31:39,190 --> 00:31:44,619
docker swarm and connect a bunch of

00:31:41,590 --> 00:31:47,289
different machines right we see how much

00:31:44,619 --> 00:31:49,899
time i get 0 good at that time so i

00:31:47,289 --> 00:31:52,190
wanted to show you the next step in this

00:31:49,899 --> 00:31:59,130
demo

00:31:52,190 --> 00:32:07,110
so if I if I make a change to this end I

00:31:59,130 --> 00:32:14,580
to this template right I'm just going to

00:32:07,110 --> 00:32:18,050
make a trivial change and then i can i

00:32:14,580 --> 00:32:18,050
can run it here whoops

00:32:25,059 --> 00:32:28,600
so I'm rebuilding the container and then

00:32:27,429 --> 00:32:32,230
I'm going to run it here just to make

00:32:28,600 --> 00:32:35,529
sure I'm happy with it and you notice

00:32:32,230 --> 00:32:36,970
that ducker composes smart too so it

00:32:35,529 --> 00:32:38,860
didn't it knows I didn't change the

00:32:36,970 --> 00:32:40,720
database at all so it's going to just

00:32:38,860 --> 00:32:43,600
keep the old container and then it's

00:32:40,720 --> 00:32:48,460
going to create a new container for the

00:32:43,600 --> 00:32:54,429
nude image that I just built and so see

00:32:48,460 --> 00:32:56,559
here I think I have to David how I did

00:32:54,429 --> 00:32:58,720
you be able to see it so there we go so

00:32:56,559 --> 00:33:03,460
at the bottom it says hi ato if you

00:32:58,720 --> 00:33:06,759
can't see it trust me because there's

00:33:03,460 --> 00:33:08,830
not much I can do it um so if I'm happy

00:33:06,759 --> 00:33:14,559
with that I can do a git commit all

00:33:08,830 --> 00:33:16,360
right this is a get repo and I could

00:33:14,559 --> 00:33:21,100
push it to I'm going to push it to

00:33:16,360 --> 00:33:24,190
github right now because github awesome

00:33:21,100 --> 00:33:30,220
I think they sponsored this thing too so

00:33:24,190 --> 00:33:32,830
um which I didn't even know so i have

00:33:30,220 --> 00:33:36,129
this so as soon as that get reported

00:33:32,830 --> 00:33:38,950
yeah there you go as soon as that get

00:33:36,129 --> 00:33:40,659
thing it hit a web hook on Jenkins right

00:33:38,950 --> 00:33:44,259
here and it built is building a

00:33:40,659 --> 00:33:46,659
container so it it's taking that code

00:33:44,259 --> 00:33:50,320
that i just made building this container

00:33:46,659 --> 00:33:53,200
right and so i can look at the log if

00:33:50,320 --> 00:33:54,730
you like so and then it's going to run a

00:33:53,200 --> 00:33:59,740
test against it right so i have another

00:33:54,730 --> 00:34:01,720
docker compose file in there we'll jump

00:33:59,740 --> 00:34:04,149
Tehran but have another doctor compose

00:34:01,720 --> 00:34:05,919
file the called test that starts it up

00:34:04,149 --> 00:34:08,770
so that I can run a test against it and

00:34:05,919 --> 00:34:12,550
all the test is is a curl basically I'm

00:34:08,770 --> 00:34:15,730
not doing anything special and then then

00:34:12,550 --> 00:34:17,770
I made it too big um and then and then

00:34:15,730 --> 00:34:21,280
it now it's going to deploy it to four

00:34:17,770 --> 00:34:22,690
different servers on amazon that doesn't

00:34:21,280 --> 00:34:24,460
matter where it is this is all running

00:34:22,690 --> 00:34:25,810
an amazon every single thing you're

00:34:24,460 --> 00:34:27,730
watching here is running inside a

00:34:25,810 --> 00:34:30,760
container so Jenkins is in a container

00:34:27,730 --> 00:34:34,869
the database all that stuff so it's

00:34:30,760 --> 00:34:36,020
deploying this now to to those four

00:34:34,869 --> 00:34:40,820
servers

00:34:36,020 --> 00:34:42,800
and it's doing it 10 times so I'm I did

00:34:40,820 --> 00:34:45,230
it we did it with a shell script so it's

00:34:42,800 --> 00:34:47,830
easy to deal with but so 10 times its

00:34:45,230 --> 00:34:50,270
running 10 instance of this there's a

00:34:47,830 --> 00:34:54,040
wonderful little program called

00:34:50,270 --> 00:34:57,740
interlock which starts ingenix and

00:34:54,040 --> 00:35:00,470
reloads and rewrites its configuration

00:34:57,740 --> 00:35:02,840
file based on events from the cluster so

00:35:00,470 --> 00:35:04,730
I pass in a little environment variable

00:35:02,840 --> 00:35:07,700
that says here's here's my hostname that

00:35:04,730 --> 00:35:09,650
I'm going to listen on and ingenix

00:35:07,700 --> 00:35:12,560
already has the load balancer configured

00:35:09,650 --> 00:35:19,580
so I don't have to do anything and now i

00:35:12,560 --> 00:35:22,130
have i have that that i also have high

00:35:19,580 --> 00:35:25,070
ETO and I didn't touch a thing I just

00:35:22,130 --> 00:35:29,300
ran it I just committed code right so

00:35:25,070 --> 00:35:31,340
and then the thing that gets promoted is

00:35:29,300 --> 00:35:34,730
not the code anymore it's not a tarball

00:35:31,340 --> 00:35:36,380
it's not a data bag which is the worst

00:35:34,730 --> 00:35:39,490
thing I've ever heard any way by the way

00:35:36,380 --> 00:35:42,260
it sounds really discussing but um the

00:35:39,490 --> 00:35:49,100
no offense to chevys it's just a

00:35:42,260 --> 00:35:52,280
terrible word but um the it's a docker

00:35:49,100 --> 00:35:56,630
image that's it so what this did was

00:35:52,280 --> 00:36:00,080
with one git commit it built a container

00:35:56,630 --> 00:36:03,020
tested when it was happy with that it

00:36:00,080 --> 00:36:07,220
pushed the container image to dr. trusty

00:36:03,020 --> 00:36:10,490
registry on amazon which is firewalled

00:36:07,220 --> 00:36:14,800
off it's laying that accessible outside

00:36:10,490 --> 00:36:17,960
of our little VPC and then deployed it

00:36:14,800 --> 00:36:20,570
to a load balanced environment with zero

00:36:17,960 --> 00:36:22,700
downtime right it just did it and now

00:36:20,570 --> 00:36:24,800
and now I have this in my dev

00:36:22,700 --> 00:36:28,090
environment this is on like I said four

00:36:24,800 --> 00:36:28,090
machines but

00:36:31,280 --> 00:36:35,790
but I also have you know a test

00:36:33,839 --> 00:36:38,330
environment right and I can promote that

00:36:35,790 --> 00:36:41,849
by just running the same job again and

00:36:38,330 --> 00:36:47,490
changing one parameter so if I go back

00:36:41,849 --> 00:36:49,890
here and I run this and I pick and I tag

00:36:47,490 --> 00:36:53,970
everything with the get Shaw so I know

00:36:49,890 --> 00:36:55,740
where it came from right you know we

00:36:53,970 --> 00:36:58,440
have a we have a way to deploy this too

00:36:55,740 --> 00:37:01,980
soft layer to ec2 it's all using docker

00:36:58,440 --> 00:37:04,410
so it doesn't matter you know these are

00:37:01,980 --> 00:37:06,359
arbitrary things right so I have a club

00:37:04,410 --> 00:37:09,690
the cluster actually has machines and

00:37:06,359 --> 00:37:11,520
soft layer and easy to i just am using

00:37:09,690 --> 00:37:15,960
ec2 because it's all local and it's

00:37:11,520 --> 00:37:19,560
faster and this is the little JSON blob

00:37:15,960 --> 00:37:21,570
that configures my web server to talk on

00:37:19,560 --> 00:37:25,470
that so if i wanted to play that to test

00:37:21,570 --> 00:37:27,720
i can say test and build and now it's

00:37:25,470 --> 00:37:31,730
going to deploy that to test and in a

00:37:27,720 --> 00:37:31,730
second you'll see that it shows up there

00:37:32,930 --> 00:37:40,920
so and it's promoted that image as well

00:37:37,830 --> 00:37:43,920
so that's the next thing right you can

00:37:40,920 --> 00:37:46,280
do more less simplistic workloads with

00:37:43,920 --> 00:37:50,369
this but it all works very simple very

00:37:46,280 --> 00:37:52,800
in a very straightforward way and that

00:37:50,369 --> 00:37:54,510
code like i said is the same you know it

00:37:52,800 --> 00:37:56,970
didn't change the container it didn't

00:37:54,510 --> 00:37:58,920
rebuild the container it just added a

00:37:56,970 --> 00:38:04,619
tag to the end of the name and deployed

00:37:58,920 --> 00:38:09,570
it and so I can there it is there is

00:38:04,619 --> 00:38:11,490
right there so we have a very simple

00:38:09,570 --> 00:38:15,630
workflow that's enabled by something

00:38:11,490 --> 00:38:19,290
like docker well by docker and and tools

00:38:15,630 --> 00:38:21,240
that we ship so swan compose machine

00:38:19,290 --> 00:38:23,490
create dr. machine actually created the

00:38:21,240 --> 00:38:27,089
machines that this is running on and ran

00:38:23,490 --> 00:38:29,910
and then we ran Jenkins and postgres in

00:38:27,089 --> 00:38:31,680
whatever as well our Jenkins container

00:38:29,910 --> 00:38:35,279
has all the jobs already baked into it

00:38:31,680 --> 00:38:38,239
it's very nice so questions

00:38:35,279 --> 00:38:38,239
yes

00:38:44,630 --> 00:38:47,320
right

00:38:57,540 --> 00:39:04,660
so

00:38:59,350 --> 00:39:06,460
looks like crap so so we did an explicit

00:39:04,660 --> 00:39:08,620
mapping here right if you don't do an

00:39:06,460 --> 00:39:10,840
explicit mapping if you just say run a

00:39:08,620 --> 00:39:14,170
container that has port 8080 inside of

00:39:10,840 --> 00:39:16,420
it but map it to some random port on the

00:39:14,170 --> 00:39:19,240
outside then you can run as many

00:39:16,420 --> 00:39:22,000
containers with port 8080 as you want as

00:39:19,240 --> 00:39:25,450
long as you know as much resources that

00:39:22,000 --> 00:39:27,340
you have right so i can run 20 instances

00:39:25,450 --> 00:39:29,830
of engine acts that are running on port

00:39:27,340 --> 00:39:31,540
8080 and it doesn't matter because

00:39:29,830 --> 00:39:35,200
they're all mapped on the host two

00:39:31,540 --> 00:39:37,300
unique ports right so in in this example

00:39:35,200 --> 00:39:41,400
we're actually using that feature right

00:39:37,300 --> 00:39:41,400
so find the right place with

00:39:46,840 --> 00:39:52,420
so right here is where we run the docker

00:39:50,170 --> 00:39:55,570
thing this is all garbage to most people

00:39:52,420 --> 00:39:56,980
but the most important thing with regard

00:39:55,570 --> 00:39:59,050
to this question about running multiple

00:39:56,980 --> 00:40:01,810
things with multiple port is this dash

00:39:59,050 --> 00:40:04,390
capital P which just says map all the

00:40:01,810 --> 00:40:05,770
ports that have exposed in there you

00:40:04,390 --> 00:40:09,070
know the dockerfile has this exposed

00:40:05,770 --> 00:40:13,810
thing map all those ports into random

00:40:09,070 --> 00:40:16,390
ports on the host right and so I don't

00:40:13,810 --> 00:40:21,040
in this instance when we run this

00:40:16,390 --> 00:40:22,660
command which is rather long we're not

00:40:21,040 --> 00:40:26,380
actually specifying what port it listens

00:40:22,660 --> 00:40:28,570
on because we don't care the interlock

00:40:26,380 --> 00:40:30,370
container which is the load balancer is

00:40:28,570 --> 00:40:31,480
all that cares about what port those

00:40:30,370 --> 00:40:35,470
things are running on and it's

00:40:31,480 --> 00:40:38,470
configuring itself right so we're

00:40:35,470 --> 00:40:41,980
actually removing wads of configuration

00:40:38,470 --> 00:40:43,810
at the same time and when you don't give

00:40:41,980 --> 00:40:45,720
a damn about a lot of things it's so

00:40:43,810 --> 00:40:48,370
much life is so good you know it's like

00:40:45,720 --> 00:40:49,930
what I don't care or whatever and and

00:40:48,370 --> 00:40:51,640
the nice thing is like these are all

00:40:49,930 --> 00:40:53,980
completely isolated from one another the

00:40:51,640 --> 00:40:55,810
test doesn't know about the dev doesn't

00:40:53,980 --> 00:40:58,540
know about the prod I can run all these

00:40:55,810 --> 00:41:00,580
on the same machines right I don't have

00:40:58,540 --> 00:41:03,490
to think about that it's just a pool of

00:41:00,580 --> 00:41:06,520
stuff stuff to put my bits in right I

00:41:03,490 --> 00:41:09,790
don't give a damn about any of it so

00:41:06,520 --> 00:41:11,440
it's important to note that you know a

00:41:09,790 --> 00:41:13,480
lot of people think this is like Oh Wild

00:41:11,440 --> 00:41:18,670
West anybody can run anything and yes

00:41:13,480 --> 00:41:20,590
they can that's the whole point it's not

00:41:18,670 --> 00:41:24,100
going to affect your infrastructure one

00:41:20,590 --> 00:41:25,210
iota and it doesn't affect security and

00:41:24,100 --> 00:41:26,980
I've got a whole other talk about

00:41:25,210 --> 00:41:28,720
security what they're putting in their

00:41:26,980 --> 00:41:31,810
container only affects what's inside

00:41:28,720 --> 00:41:34,570
their container and you know on the

00:41:31,810 --> 00:41:36,550
unlikely event of a breakout from see

00:41:34,570 --> 00:41:39,070
groups and namespaces and the kernel

00:41:36,550 --> 00:41:40,450
which there have been like three since

00:41:39,070 --> 00:41:43,870
stalker started and they've all been

00:41:40,450 --> 00:41:46,900
mitigated within about a day you know

00:41:43,870 --> 00:41:48,820
you're not gonna run the risk of

00:41:46,900 --> 00:41:50,800
anything in your environment like

00:41:48,820 --> 00:41:52,450
getting screwed up right you're not

00:41:50,800 --> 00:41:55,060
running a whole operating system inside

00:41:52,450 --> 00:41:58,090
that container you're running a unix

00:41:55,060 --> 00:41:59,920
process inside that container so

00:41:58,090 --> 00:42:02,590
you have a ton of flexibility and you

00:41:59,920 --> 00:42:03,940
have a lot more abstraction away from

00:42:02,590 --> 00:42:05,740
everything right you're abstracted from

00:42:03,940 --> 00:42:07,390
the operating system your objective from

00:42:05,740 --> 00:42:09,460
the hardware in the case of Amazon

00:42:07,390 --> 00:42:13,780
because you're running in a virtual

00:42:09,460 --> 00:42:21,220
machine right etc etc so somebody over

00:42:13,780 --> 00:42:23,530
here had a question yeah in the cloud

00:42:21,220 --> 00:42:27,130
i'm running for virtual machine for

00:42:23,530 --> 00:42:29,800
machines that are running some more so

00:42:27,130 --> 00:42:31,450
each no runs swarm there's actually five

00:42:29,800 --> 00:42:34,350
machines because one is running like tin

00:42:31,450 --> 00:42:34,350
cans and other stuff

00:42:38,880 --> 00:42:46,710
so so the way swarm works is it's a very

00:42:41,970 --> 00:42:51,990
simple agent that is basically a proxy

00:42:46,710 --> 00:42:53,759
to help sexo it it just says I'm going

00:42:51,990 --> 00:42:55,470
to go register to a key value store

00:42:53,759 --> 00:42:59,910
somewhere it doesn't care where it is

00:42:55,470 --> 00:43:02,640
and it just says what port number doctor

00:42:59,910 --> 00:43:04,289
is running on on what IP so when you

00:43:02,640 --> 00:43:06,809
join the cluster that's all it does and

00:43:04,289 --> 00:43:08,910
then it does a help check every I forget

00:43:06,809 --> 00:43:10,650
how many seconds I think two seconds or

00:43:08,910 --> 00:43:14,579
something to make sure that it's still

00:43:10,650 --> 00:43:18,960
supposed to be there and so and it runs

00:43:14,579 --> 00:43:21,539
any container right so it's it's really

00:43:18,960 --> 00:43:23,430
it's literally a docker run swarm join

00:43:21,539 --> 00:43:26,670
and here's my where my key value stores

00:43:23,430 --> 00:43:28,319
and that's it so starting a cluster is

00:43:26,670 --> 00:43:29,789
you know and you can use docker

00:43:28,319 --> 00:43:33,150
machining to do it too with there's a

00:43:29,789 --> 00:43:36,480
dash dash warm thing and you can start a

00:43:33,150 --> 00:43:38,460
swarm cluster in about five seconds or

00:43:36,480 --> 00:43:42,890
however long it takes for Amazon or

00:43:38,460 --> 00:43:42,890
whoever to start machines yeah

00:43:53,339 --> 00:43:58,469
right so and this is so his question is

00:43:56,640 --> 00:44:02,099
about resource management basically can

00:43:58,469 --> 00:44:05,759
I do things to it on the fly currently

00:44:02,099 --> 00:44:07,229
you you can do things on the fly but not

00:44:05,759 --> 00:44:11,779
through doctor you'd have to go and edit

00:44:07,229 --> 00:44:16,499
the resource mappings inside the

00:44:11,779 --> 00:44:17,940
definition in real time on the proc file

00:44:16,499 --> 00:44:21,180
system right you can go and change these

00:44:17,940 --> 00:44:23,789
things that is an often requested

00:44:21,180 --> 00:44:27,930
feature but it's not there yet go write

00:44:23,789 --> 00:44:33,380
it and will merge it that thanks for

00:44:27,930 --> 00:44:33,380
volunteering yeah

00:44:39,869 --> 00:44:41,930
Oh

00:44:47,770 --> 00:44:52,870
so you can run docker exec which will

00:44:50,650 --> 00:44:57,460
run a process inside of an existing

00:44:52,870 --> 00:45:02,320
container so you could run like cat

00:44:57,460 --> 00:45:03,850
blah-de-blah or whatever but from a so

00:45:02,320 --> 00:45:05,140
the question is how do i change what's

00:45:03,850 --> 00:45:07,540
running in a container for like a

00:45:05,140 --> 00:45:09,670
development environment so but i

00:45:07,540 --> 00:45:12,040
normally say for like a dynamic language

00:45:09,670 --> 00:45:15,850
like a note jsf or something like that

00:45:12,040 --> 00:45:20,080
you mount in from the host you mount in

00:45:15,850 --> 00:45:22,510
the code you can in theory go in and

00:45:20,080 --> 00:45:23,560
hack things around but really if you

00:45:22,510 --> 00:45:25,780
want to change what's in the container

00:45:23,560 --> 00:45:29,740
fix the dockerfile and rebuild a

00:45:25,780 --> 00:45:31,450
container and then that's it's an

00:45:29,740 --> 00:45:33,310
interesting thing because when you're

00:45:31,450 --> 00:45:36,130
when you're building and clinging with

00:45:33,310 --> 00:45:39,220
containers you don't ever upgrade a

00:45:36,130 --> 00:45:41,590
container you just throw it away it's

00:45:39,220 --> 00:45:43,630
totally ephemeral it's totally a useless

00:45:41,590 --> 00:45:45,160
piece of garbage right you build a new

00:45:43,630 --> 00:45:48,000
one and you run the new thing and you

00:45:45,160 --> 00:45:51,910
throw the open away they're not pets

00:45:48,000 --> 00:45:53,950
they're not pets they're not pets you

00:45:51,910 --> 00:45:56,260
don't run ansible inside a container you

00:45:53,950 --> 00:46:00,370
don't run SSH inside a container you

00:45:56,260 --> 00:46:03,160
don't run you you want them to be just

00:46:00,370 --> 00:46:06,010
ephemeral environment is ephemeral and

00:46:03,160 --> 00:46:08,950
stateless is possible right so state

00:46:06,010 --> 00:46:12,190
needs to be outside the container at a

00:46:08,950 --> 00:46:14,050
database or in a key value store or you

00:46:12,190 --> 00:46:17,680
know on your mom's laptop or whatever

00:46:14,050 --> 00:46:20,980
and then and then everything else just

00:46:17,680 --> 00:46:24,490
you don't care about it right there's so

00:46:20,980 --> 00:46:27,700
much freedom involved in not giving a

00:46:24,490 --> 00:46:29,020
damn I don't care about my virtual

00:46:27,700 --> 00:46:30,460
machines I don't care about any of that

00:46:29,020 --> 00:46:33,250
stuff if it goes away it goes the way I

00:46:30,460 --> 00:46:36,730
expect it to go away right your

00:46:33,250 --> 00:46:39,100
expectation level changes and just so I

00:46:36,730 --> 00:46:41,980
used to work for Microsoft at live

00:46:39,100 --> 00:46:43,390
search right we had 500,000 machines

00:46:41,980 --> 00:46:45,910
when i worked there i don't know

00:46:43,390 --> 00:46:47,589
now but there were five admins which

00:46:45,910 --> 00:46:49,720
meant we could give a damn if a machine

00:46:47,589 --> 00:46:52,480
disappeared I could give a damn if ten

00:46:49,720 --> 00:46:57,519
thousand machines disappeared right I I

00:46:52,480 --> 00:46:59,260
wouldn't like to know but it's it's it's

00:46:57,519 --> 00:47:01,240
more like oh crap is that going to

00:46:59,260 --> 00:47:03,640
happen over here too right it's not I

00:47:01,240 --> 00:47:05,680
need to get these back up now because I

00:47:03,640 --> 00:47:09,010
didn't care right i would never log into

00:47:05,680 --> 00:47:11,740
a machine that's stupid right so so this

00:47:09,010 --> 00:47:13,839
is my mentality but i think dr. enables

00:47:11,740 --> 00:47:16,059
that mentality in a lot of places where

00:47:13,839 --> 00:47:19,000
you didn't have it before right these

00:47:16,059 --> 00:47:20,859
are not pets don't love your machine

00:47:19,000 --> 00:47:28,480
it's going to go away and it's going to

00:47:20,859 --> 00:47:37,299
die a terrible horrible fiery death so

00:47:28,480 --> 00:47:38,890
go play with docker what so I just

00:47:37,299 --> 00:47:42,220
started a bunch of containers and then I

00:47:38,890 --> 00:47:44,950
stopped the old ones so it's sort of a

00:47:42,220 --> 00:47:47,260
this isn't any formal way this is very

00:47:44,950 --> 00:47:50,349
very naive way of deploying things right

00:47:47,260 --> 00:47:52,059
but on purpose right so if I if I really

00:47:50,349 --> 00:47:55,390
cared i would have a lock somewhere that

00:47:52,059 --> 00:47:58,210
said hey go you know replace one at a

00:47:55,390 --> 00:47:59,940
time that kind of thing or have like a

00:47:58,210 --> 00:48:03,130
red green or whatever the hell look

00:47:59,940 --> 00:48:08,380
purple purple puse whatever i don't care

00:48:03,130 --> 00:48:09,849
what yeah the load balancer so when a

00:48:08,380 --> 00:48:13,269
container dies it just throws it out

00:48:09,849 --> 00:48:17,920
right because it's reading from the Swan

00:48:13,269 --> 00:48:20,920
clusters event stream if if a container

00:48:17,920 --> 00:48:23,980
disappears it's gone and it removes it

00:48:20,920 --> 00:48:26,680
from the configuration right so it may

00:48:23,980 --> 00:48:28,210
fail a health check before that if the

00:48:26,680 --> 00:48:31,000
timing you know if the timing is right

00:48:28,210 --> 00:48:32,349
there's a little bit of a race but it's

00:48:31,000 --> 00:48:34,859
an irrelevant race because we're going

00:48:32,349 --> 00:48:37,240
to get to get rid of it anyway so the

00:48:34,859 --> 00:48:39,450
Isle of load balancers I think they're

00:48:37,240 --> 00:48:41,619
the best thing since sliced bread and

00:48:39,450 --> 00:48:42,910
when they're running in containers and

00:48:41,619 --> 00:48:44,859
they break I don't care because I could

00:48:42,910 --> 00:48:47,190
throw them away alright start a new one

00:48:44,859 --> 00:48:52,320
and it just generates its configuration

00:48:47,190 --> 00:48:55,320
alright so yeah

00:48:52,320 --> 00:48:55,320
yep

00:48:57,850 --> 00:49:04,190
do I consider docker compose production

00:49:00,590 --> 00:49:07,400
ready I have customers that are very

00:49:04,190 --> 00:49:11,359
large that are running darker compose

00:49:07,400 --> 00:49:19,270
stuff in production sure I mean it works

00:49:11,359 --> 00:49:19,270
for them I don't know about our site but

00:49:19,420 --> 00:49:26,450
yeah I think production-ready is such a

00:49:24,650 --> 00:49:28,580
subjective thing you have to figure it

00:49:26,450 --> 00:49:31,540
out like is it working is it working

00:49:28,580 --> 00:49:43,100
consistently great go do it ah whatever

00:49:31,540 --> 00:49:46,100
yeah so dr. toolbox right now and the

00:49:43,100 --> 00:49:47,630
docker command the docker client so dr.

00:49:46,100 --> 00:49:49,700
is a client-server architecture right

00:49:47,630 --> 00:49:54,470
but the client is basically the server

00:49:49,700 --> 00:49:59,680
etc docker the docker client works fine

00:49:54,470 --> 00:50:04,400
on windows right now on Windows 2016

00:49:59,680 --> 00:50:07,460
Microsoft has changed their kernel with

00:50:04,400 --> 00:50:09,260
us we have people with with them and

00:50:07,460 --> 00:50:12,290
they have people with us they are

00:50:09,260 --> 00:50:13,600
actually the large second largest or

00:50:12,290 --> 00:50:16,270
largest depending on the week

00:50:13,600 --> 00:50:20,300
contributor to doctor at the moment

00:50:16,270 --> 00:50:22,430
they're the first group of people within

00:50:20,300 --> 00:50:25,150
Microsoft to do any significant

00:50:22,430 --> 00:50:28,640
development an open source project so

00:50:25,150 --> 00:50:36,109
new Microsoft guys this is impressive so

00:50:28,640 --> 00:50:37,870
there this is annoying go away whatever

00:50:36,109 --> 00:50:41,630
um

00:50:37,870 --> 00:50:44,360
so with Windows 2016 you'll be able to

00:50:41,630 --> 00:50:46,160
run docker containers on Windows you'll

00:50:44,360 --> 00:50:48,260
be running Windows containers on Windows

00:50:46,160 --> 00:50:50,900
but so you can container eyes windows

00:50:48,260 --> 00:50:53,050
obligations server-side applications

00:50:50,900 --> 00:50:56,330
using something called windows nano

00:50:53,050 --> 00:51:00,110
which is a very small version of Windows

00:50:56,330 --> 00:51:01,730
that's meant to run containers and

00:51:00,110 --> 00:51:04,010
there's a there's actually a tech

00:51:01,730 --> 00:51:07,810
preview out right now that is public so

00:51:04,010 --> 00:51:07,810
anybody can go grab it and play with it

00:51:09,190 --> 00:51:14,740
anything else yes

00:51:19,130 --> 00:51:21,190
you

00:51:24,480 --> 00:51:29,470
so the the way that puppet is chef an

00:51:27,730 --> 00:51:34,960
ansible and configuration management

00:51:29,470 --> 00:51:37,420
works with respect to docker it's not

00:51:34,960 --> 00:51:39,030
that they're bad right it's that you

00:51:37,420 --> 00:51:41,559
don't need them inside of the container

00:51:39,030 --> 00:51:43,539
right so something still has to take

00:51:41,559 --> 00:51:45,280
care of the host as much as they're not

00:51:43,539 --> 00:51:48,849
pets like we actually do want them to

00:51:45,280 --> 00:51:50,890
run for more than five minutes so you

00:51:48,849 --> 00:51:53,380
know that that's where the boundary

00:51:50,890 --> 00:51:54,309
stops like so ansible has a lot of

00:51:53,380 --> 00:51:56,859
really cool features around

00:51:54,309 --> 00:51:59,650
orchestrating containers their plug-in

00:51:56,859 --> 00:52:01,780
system is really good and very mature on

00:51:59,650 --> 00:52:05,400
the darker side the others are coming as

00:52:01,780 --> 00:52:09,430
well so everybody's working on it but

00:52:05,400 --> 00:52:12,190
the boundary is typically what runs on

00:52:09,430 --> 00:52:14,200
the host is what we're ansible lives and

00:52:12,190 --> 00:52:16,799
then what runs in the container is baked

00:52:14,200 --> 00:52:20,740
into the container already so you're not

00:52:16,799 --> 00:52:24,099
like you're not you're not like crossing

00:52:20,740 --> 00:52:27,390
the streams so to speak does that make

00:52:24,099 --> 00:52:27,390
sense all right

00:52:31,390 --> 00:52:36,960
yeah yeah I guess so thank you everybody

00:52:34,299 --> 00:52:36,960

YouTube URL: https://www.youtube.com/watch?v=ymzPw1xfPBA


