Title: All Things Open 2015 | Pam Seele - Thewebivore.com | Choosing a Front End Framework
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2014 All Things Open 2015, October 19th and 20th, Raleigh NC. All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:08,150 --> 00:00:11,880
if you if you are here for choosing a

00:00:10,769 --> 00:00:14,280
front-end framework on the schedule

00:00:11,880 --> 00:00:15,839
you're in the right place i shorted to

00:00:14,280 --> 00:00:17,730
choosing a JavaScript framework we're

00:00:15,839 --> 00:00:20,160
talking about client-side JavaScript

00:00:17,730 --> 00:00:22,170
frameworks to be the most specific if

00:00:20,160 --> 00:00:24,630
you want to find me on the Internet my

00:00:22,170 --> 00:00:26,490
handle is Pam essaouira goes with my

00:00:24,630 --> 00:00:29,070
dinosaur themed website that web amor

00:00:26,490 --> 00:00:31,890
and I also podcast with touring and

00:00:29,070 --> 00:00:33,840
complete and we have a cool URL Turing

00:00:31,890 --> 00:00:34,920
cool and if you get the joke about

00:00:33,840 --> 00:00:38,309
touring and complete you'll probably

00:00:34,920 --> 00:00:40,260
like the podcast so r is I'm giving this

00:00:38,309 --> 00:00:42,000
talk as we wrote this book so I wrote

00:00:40,260 --> 00:00:44,550
this book with three fantastic

00:00:42,000 --> 00:00:47,610
co-authors who really did more of a deep

00:00:44,550 --> 00:00:50,010
dive into the three ubiquitous

00:00:47,610 --> 00:00:52,649
frameworks for client-side JavaScript

00:00:50,010 --> 00:00:54,539
and so what we do in that is we go

00:00:52,649 --> 00:00:56,610
through each of the frameworks pros and

00:00:54,539 --> 00:00:58,680
cons lots of examples and so I'm gonna

00:00:56,610 --> 00:01:00,899
that's what the plan is for the talk

00:00:58,680 --> 00:01:01,920
today and so the spoiler is I'm not

00:01:00,899 --> 00:01:04,229
going to tell you what to do

00:01:01,920 --> 00:01:07,260
unfortunately nothing is that easy but

00:01:04,229 --> 00:01:08,610
what we will do however is hopefully go

00:01:07,260 --> 00:01:11,070
through each of the major frameworks

00:01:08,610 --> 00:01:12,689
with some a little bit more content in

00:01:11,070 --> 00:01:14,970
some of the more emerging frameworks

00:01:12,689 --> 00:01:17,220
which polymer and reactor becoming more

00:01:14,970 --> 00:01:18,750
serious contenders nowadays so we're

00:01:17,220 --> 00:01:22,350
somehow i'm going to do all of this in

00:01:18,750 --> 00:01:24,390
40 ish minutes and i hope that you can

00:01:22,350 --> 00:01:26,430
make a more informed choice for project

00:01:24,390 --> 00:01:28,200
for learning for whatever reason you're

00:01:26,430 --> 00:01:29,939
here if you're a developer who's curious

00:01:28,200 --> 00:01:32,640
about spy inside frameworks if you're a

00:01:29,939 --> 00:01:33,930
manager who has curves of developers

00:01:32,640 --> 00:01:35,970
trying to change your framework every

00:01:33,930 --> 00:01:38,250
week maybe this will give you a little

00:01:35,970 --> 00:01:40,320
bit more information about the major

00:01:38,250 --> 00:01:41,869
frameworks that are out there so i'll

00:01:40,320 --> 00:01:43,979
talk about what i mean when i say

00:01:41,869 --> 00:01:45,119
javascript framework why we use them

00:01:43,979 --> 00:01:48,180
talk about through each of the major

00:01:45,119 --> 00:01:50,790
frameworks with some background proton

00:01:48,180 --> 00:01:53,070
example code and we'll go through

00:01:50,790 --> 00:01:54,600
polymers react as well and some

00:01:53,070 --> 00:01:55,829
framework evaluation techniques if

00:01:54,600 --> 00:01:56,400
you're interested in some of the little

00:01:55,829 --> 00:01:59,670
more

00:01:56,400 --> 00:02:01,620
cool perspective that I enjoy so what do

00:01:59,670 --> 00:02:04,260
we say when we talk about framework so a

00:02:01,620 --> 00:02:08,130
framework a long time ago in a browser

00:02:04,260 --> 00:02:09,660
not that long ago people made web app so

00:02:08,130 --> 00:02:13,290
that's not that different than now

00:02:09,660 --> 00:02:16,050
however there wasn't one way also still

00:02:13,290 --> 00:02:17,310
true but the result is that there was

00:02:16,050 --> 00:02:20,250
kind of this what you would call a

00:02:17,310 --> 00:02:22,290
zeitgeist so a spirit of the times so if

00:02:20,250 --> 00:02:23,970
you look at the value fine the you know

00:02:22,290 --> 00:02:26,850
the way we progress through computing

00:02:23,970 --> 00:02:29,370
really interesting and so these

00:02:26,850 --> 00:02:31,500
frameworks backbone ember angular they

00:02:29,370 --> 00:02:33,270
emerged all around the same time and

00:02:31,500 --> 00:02:35,220
it's because you talk to different

00:02:33,270 --> 00:02:37,590
developers it's that they were doing the

00:02:35,220 --> 00:02:39,810
same thing over and over again and that

00:02:37,590 --> 00:02:41,070
is a you say well why are we to keep

00:02:39,810 --> 00:02:43,260
doing the same thing over and over again

00:02:41,070 --> 00:02:45,600
we should standardize it and so you

00:02:43,260 --> 00:02:47,640
might be familiar with this comic as the

00:02:45,600 --> 00:02:49,740
that you know ah we shall standardize it

00:02:47,640 --> 00:02:51,480
and then you get and more standard

00:02:49,740 --> 00:02:52,980
that's kind of the the world we're in

00:02:51,480 --> 00:02:54,270
today with JavaScript frameworks it

00:02:52,980 --> 00:02:55,890
feels like there's new JavaScript

00:02:54,270 --> 00:02:58,170
frameworks all the time feels like it's

00:02:55,890 --> 00:02:59,730
hard to keep up but I still say that

00:02:58,170 --> 00:03:02,370
JavaScript frameworks are very good

00:02:59,730 --> 00:03:05,310
thing because you shouldn't have to

00:03:02,370 --> 00:03:08,010
write a router so I use that as my

00:03:05,310 --> 00:03:10,560
shorthand for this kind of this figure

00:03:08,010 --> 00:03:12,840
that eighty-five percent of what you're

00:03:10,560 --> 00:03:13,920
doing in your computing zach is pretty

00:03:12,840 --> 00:03:15,510
common and it's going to be pretty

00:03:13,920 --> 00:03:18,180
common with every other application

00:03:15,510 --> 00:03:19,920
that's similar to yours but fifteen

00:03:18,180 --> 00:03:22,410
percent of it is where you're adding

00:03:19,920 --> 00:03:24,780
value so that's kind of what you want to

00:03:22,410 --> 00:03:26,760
think about is in your business or your

00:03:24,780 --> 00:03:28,560
product where are you adding value more

00:03:26,760 --> 00:03:29,880
do you want to spend your time probably

00:03:28,560 --> 00:03:32,400
about like probably writing your

00:03:29,880 --> 00:03:34,320
business logic for how you're you know

00:03:32,400 --> 00:03:36,300
producing value for your customers or

00:03:34,320 --> 00:03:38,430
what have you so think about where you

00:03:36,300 --> 00:03:40,080
want to spend your time and that is why

00:03:38,430 --> 00:03:43,019
frameworks are so popular is because

00:03:40,080 --> 00:03:45,510
they you adopt a community powered

00:03:43,019 --> 00:03:47,010
solutions to solve that problem for you

00:03:45,510 --> 00:03:49,620
especially in the open source world

00:03:47,010 --> 00:03:53,220
you're adopting a solution that is is

00:03:49,620 --> 00:03:55,260
community super-powered so you can if

00:03:53,220 --> 00:03:56,090
you write your own framework you have

00:03:55,260 --> 00:03:57,980
your tea

00:03:56,090 --> 00:04:00,560
if you use an open source framework you

00:03:57,980 --> 00:04:03,530
have that whole community to talk to to

00:04:00,560 --> 00:04:05,810
debug resources all that great thing you

00:04:03,530 --> 00:04:08,690
get from using other people's code trade

00:04:05,810 --> 00:04:10,819
off but that's one is some major

00:04:08,690 --> 00:04:12,140
frameworks will go through back bending

00:04:10,819 --> 00:04:15,049
your Emperor really strengths and

00:04:12,140 --> 00:04:17,209
weaknesses a little code backbone the

00:04:15,049 --> 00:04:18,650
backbone comes from the document cloud

00:04:17,209 --> 00:04:19,760
and a rails background I find that

00:04:18,650 --> 00:04:21,560
interesting and especially if you're

00:04:19,760 --> 00:04:23,330
familiar with radel's you'll look at

00:04:21,560 --> 00:04:25,370
these and these things will start you'll

00:04:23,330 --> 00:04:27,290
see that a little familiar of some more

00:04:25,370 --> 00:04:28,850
patterns as the backbone could be

00:04:27,290 --> 00:04:31,160
considered the core of an application

00:04:28,850 --> 00:04:33,470
and I would call it an opinionated what

00:04:31,160 --> 00:04:35,840
do I mean when I say opinionated so

00:04:33,470 --> 00:04:38,960
opinionated would mean I know I'm going

00:04:35,840 --> 00:04:40,490
really fast but so opinionated would

00:04:38,960 --> 00:04:42,500
mean that there's an obvious or best

00:04:40,490 --> 00:04:44,540
practices driven solution to the problem

00:04:42,500 --> 00:04:46,430
so difference between a painting and

00:04:44,540 --> 00:04:48,530
under Kincaid so if an opinionated would

00:04:46,430 --> 00:04:51,590
mean that more of a choose your own

00:04:48,530 --> 00:04:53,060
adventure type situation so if you're in

00:04:51,590 --> 00:04:55,039
a situation where you want some

00:04:53,060 --> 00:04:57,440
structure but you don't want it to be

00:04:55,039 --> 00:05:00,440
really didactic you want more of an

00:04:57,440 --> 00:05:02,180
unaffiliated situation and if you if you

00:05:00,440 --> 00:05:03,710
still want to abstract something to what

00:05:02,180 --> 00:05:04,729
if you don't have striped anything away

00:05:03,710 --> 00:05:06,680
then you should be writing your own

00:05:04,729 --> 00:05:10,430
thing assuming you want to abstract some

00:05:06,680 --> 00:05:12,349
of it with unobtainium solution when you

00:05:10,430 --> 00:05:15,500
get in backbone you get Korra bc

00:05:12,349 --> 00:05:17,539
components i use NBC embassies used to

00:05:15,500 --> 00:05:19,729
describe client-side frameworks they are

00:05:17,539 --> 00:05:21,530
really MVC but will for the purposes of

00:05:19,729 --> 00:05:23,419
drawing parallels to what we might do on

00:05:21,530 --> 00:05:25,430
a server side that's why we end up

00:05:23,419 --> 00:05:27,169
staying in DC and you get a nudge in an

00:05:25,430 --> 00:05:28,940
event-driven application design if

00:05:27,169 --> 00:05:30,470
you're doing background right if there

00:05:28,940 --> 00:05:33,889
is a right way to do it it's more

00:05:30,470 --> 00:05:35,539
event-driven dependencies you've got

00:05:33,889 --> 00:05:38,120
underscore which is like utility belt

00:05:35,539 --> 00:05:40,130
for javascript very useful you probably

00:05:38,120 --> 00:05:41,810
want to have it anyway jquery which are

00:05:40,130 --> 00:05:44,180
probably butter with or an alternative i

00:05:41,810 --> 00:05:46,360
would say it strengthens that is onion

00:05:44,180 --> 00:05:48,129
aidan and because an opinionated

00:05:46,360 --> 00:05:50,319
that you can integrate well with many

00:05:48,129 --> 00:05:52,419
other libraries and backends if you get

00:05:50,319 --> 00:05:54,909
to opinion aid and things talking to

00:05:52,419 --> 00:05:58,689
each other they are going to clash and

00:05:54,909 --> 00:05:59,949
that's going to happen and so backbone

00:05:58,689 --> 00:06:01,629
has that strength than that it can

00:05:59,949 --> 00:06:03,729
integrate well with other backends and

00:06:01,629 --> 00:06:06,069
provide you a limited structure you can

00:06:03,729 --> 00:06:09,069
even use backbone with react and things

00:06:06,069 --> 00:06:11,229
like that and the event system i really

00:06:09,069 --> 00:06:13,870
love their event system weaknesses are

00:06:11,229 --> 00:06:16,090
the anything it is and you get to leave

00:06:13,870 --> 00:06:18,310
me your problem situation so if you say

00:06:16,090 --> 00:06:20,349
how what is the backbone way to do this

00:06:18,310 --> 00:06:22,960
what is the backbone way to solve this

00:06:20,349 --> 00:06:25,840
problem and they're probably there isn't

00:06:22,960 --> 00:06:27,699
one happy path solution that can be a

00:06:25,840 --> 00:06:30,789
positive thing for some people with a

00:06:27,699 --> 00:06:32,740
negative thing so what you get when you

00:06:30,789 --> 00:06:34,689
have backbone you get models views

00:06:32,740 --> 00:06:36,610
collections routing and we're going to

00:06:34,689 --> 00:06:38,529
go through a basic model and use it up

00:06:36,610 --> 00:06:41,319
so you'll actually to see some simple

00:06:38,529 --> 00:06:43,330
backbone codes so the examples in this

00:06:41,319 --> 00:06:44,740
presentation outside of emerging

00:06:43,330 --> 00:06:47,259
frameworks and some of them for soft

00:06:44,740 --> 00:06:50,229
because it's been updated for 20 part 2

00:06:47,259 --> 00:06:52,659
up so this is from from the book and so

00:06:50,229 --> 00:06:54,039
the theories of those properties like in

00:06:52,659 --> 00:06:56,409
a realtor out and so that's kind of

00:06:54,039 --> 00:06:59,139
compete behind this so if we create a

00:06:56,409 --> 00:07:01,900
poverty we get this this backbone models

00:06:59,139 --> 00:07:03,610
to laser pointer background model that

00:07:01,900 --> 00:07:07,690
extends so there's a nice extend syntax

00:07:03,610 --> 00:07:09,339
and these are really the happy unhappy

00:07:07,690 --> 00:07:11,500
thing about background models is they're

00:07:09,339 --> 00:07:13,750
really giving you that object instructor

00:07:11,500 --> 00:07:16,089
syntax and javascript stuff it's really

00:07:13,750 --> 00:07:18,460
not that hard to do it yourself but the

00:07:16,089 --> 00:07:20,409
it gives you a common interface so that

00:07:18,460 --> 00:07:22,029
you are like other backbone apps then

00:07:20,409 --> 00:07:25,240
you just do it in the same way and

00:07:22,029 --> 00:07:27,669
there's benefits of that and so if we

00:07:25,240 --> 00:07:29,110
want to create a view we use a similar

00:07:27,669 --> 00:07:31,000
extent so next we've got that super

00:07:29,110 --> 00:07:33,460
class that backs on me like we have

00:07:31,000 --> 00:07:35,439
backbone model and we extend and we give

00:07:33,460 --> 00:07:37,930
it some properties we give it a tag name

00:07:35,439 --> 00:07:39,920
effing HTML tag name class name to

00:07:37,930 --> 00:07:43,100
attach that makes it simple

00:07:39,920 --> 00:07:45,050
these things later if necessary and the

00:07:43,100 --> 00:07:46,970
render function for rendering the view

00:07:45,050 --> 00:07:49,160
and backbone the render function is just

00:07:46,970 --> 00:07:50,900
a function so like this is like what the

00:07:49,160 --> 00:07:52,490
objects you can arbitrarily add things

00:07:50,900 --> 00:07:55,490
to the objects with the render function

00:07:52,490 --> 00:07:56,930
you can do whatever you want and so this

00:07:55,490 --> 00:07:58,310
is one of those anti-patterns you

00:07:56,930 --> 00:07:59,720
sometimes see and backbone it doesn't

00:07:58,310 --> 00:08:02,500
have a lot of structure around

00:07:59,720 --> 00:08:05,090
preventing you from doing silly things

00:08:02,500 --> 00:08:06,650
but that means if you if you know what

00:08:05,090 --> 00:08:09,200
you want to do then it's not going to

00:08:06,650 --> 00:08:12,440
get in your way and then you return this

00:08:09,200 --> 00:08:13,670
in order to there's a good pattern and

00:08:12,440 --> 00:08:14,720
back what views where you get Cheney

00:08:13,670 --> 00:08:17,180
which is really nice so you always

00:08:14,720 --> 00:08:20,030
return this is a pattern in the render

00:08:17,180 --> 00:08:23,000
function so if we're using a view of the

00:08:20,030 --> 00:08:24,410
model let's say we create a property we

00:08:23,000 --> 00:08:27,320
create a property view and attached some

00:08:24,410 --> 00:08:28,790
model to it so down there model my house

00:08:27,320 --> 00:08:30,230
and then render the view and then

00:08:28,790 --> 00:08:33,320
attached to the used to document body

00:08:30,230 --> 00:08:35,390
and then it would look something like

00:08:33,320 --> 00:08:38,990
this if we had a head template and

00:08:35,390 --> 00:08:40,880
rendering the properties into it so you

00:08:38,990 --> 00:08:44,150
also get collections so the collections

00:08:40,880 --> 00:08:46,130
are groups of models so he might sound

00:08:44,150 --> 00:08:50,030
familiar from Braille syntax said then

00:08:46,130 --> 00:08:51,230
you you're correct router which is read

00:08:50,030 --> 00:08:52,670
and write that you are without reloading

00:08:51,230 --> 00:08:54,650
the page which was one of the most

00:08:52,670 --> 00:08:55,910
annoying things to write in JavaScript

00:08:54,650 --> 00:08:57,800
applications yourself so it's really

00:08:55,910 --> 00:09:00,230
nice to use use a community-supported

00:08:57,800 --> 00:09:05,120
router her that is is well known and

00:09:00,230 --> 00:09:06,500
ease it easy to understand event the use

00:09:05,120 --> 00:09:08,900
trick or updates the model vice versa

00:09:06,500 --> 00:09:10,430
nice event system core component back

00:09:08,900 --> 00:09:12,110
button if you want to learn more about

00:09:10,430 --> 00:09:14,750
backbone I would suggest the backbone

00:09:12,110 --> 00:09:16,190
tutorials conveniently named is Monty's

00:09:14,750 --> 00:09:18,800
backbone fundamentals is also really

00:09:16,190 --> 00:09:20,870
good and also in terms of backbone being

00:09:18,800 --> 00:09:23,210
kind of the police opinionated of the

00:09:20,870 --> 00:09:25,280
frameworks I really is like green and

00:09:23,210 --> 00:09:26,660
recommend reading the annotated source

00:09:25,280 --> 00:09:28,400
if you're interested in this it also

00:09:26,660 --> 00:09:30,380
it's really if you're curious how

00:09:28,400 --> 00:09:32,270
something works there annotated source

00:09:30,380 --> 00:09:34,430
actually helps you understand how the

00:09:32,270 --> 00:09:36,290
thing is working which is so helpful and

00:09:34,430 --> 00:09:37,940
especially if you can when you have

00:09:36,290 --> 00:09:39,430
concerns about using other people's code

00:09:37,940 --> 00:09:40,899
having antes

00:09:39,430 --> 00:09:43,930
that's really well-written really well

00:09:40,899 --> 00:09:46,029
documented it's a really big benefit all

00:09:43,930 --> 00:09:47,740
right on with angular so angular is

00:09:46,029 --> 00:09:48,880
still the fastest growing JavaScript

00:09:47,740 --> 00:09:50,920
framework so there's a lot of hype

00:09:48,880 --> 00:09:52,690
around react by angular still more

00:09:50,920 --> 00:09:54,220
popular in the wild is higher an

00:09:52,690 --> 00:09:56,260
adoption and is still it's still more

00:09:54,220 --> 00:10:00,880
popular on github if that's a measure of

00:09:56,260 --> 00:10:02,500
anything and the you described it in two

00:10:00,880 --> 00:10:04,390
basic bullets in movie that you write

00:10:02,500 --> 00:10:06,520
behavior in your markup known as

00:10:04,390 --> 00:10:09,490
directives so some of the angular

00:10:06,520 --> 00:10:11,410
angular terminology gets very fancy that

00:10:09,490 --> 00:10:13,300
doesn't have to be but it is so they're

00:10:11,410 --> 00:10:15,760
called directives and it has google

00:10:13,300 --> 00:10:17,560
backing so when angular started gaining

00:10:15,760 --> 00:10:21,130
in popularity it benefited a lot from

00:10:17,560 --> 00:10:23,740
the google hype machine of sorts so you

00:10:21,130 --> 00:10:25,089
know there's the keynote earlier today

00:10:23,740 --> 00:10:26,440
that was talking about people

00:10:25,089 --> 00:10:27,940
infrastructure for everyone else and

00:10:26,440 --> 00:10:29,890
there's just kind of a shorthand for oh

00:10:27,940 --> 00:10:32,380
well it was happening at Google that

00:10:29,890 --> 00:10:33,850
maybe we should look at it and so the

00:10:32,380 --> 00:10:36,040
angular framework has benefited from

00:10:33,850 --> 00:10:37,600
that so you get strongly to find

00:10:36,040 --> 00:10:40,649
building components those directives

00:10:37,600 --> 00:10:42,880
which are pretty much a big the big deal

00:10:40,649 --> 00:10:44,800
controllers and services you get two-way

00:10:42,880 --> 00:10:46,990
data-binding so this is different from

00:10:44,800 --> 00:10:49,450
from that phone so to me data binding to

00:10:46,990 --> 00:10:50,920
that the brilliant demo that you might

00:10:49,450 --> 00:10:52,540
have seen of where you type in one box

00:10:50,920 --> 00:10:55,050
and then automatically bound to another

00:10:52,540 --> 00:10:57,160
source of data and it just works

00:10:55,050 --> 00:10:58,959
dependency injection which is really

00:10:57,160 --> 00:11:01,420
great for testing assisting i'm going to

00:10:58,959 --> 00:11:04,120
use i know exactly what i'm using in

00:11:01,420 --> 00:11:05,800
each part of the application because we

00:11:04,120 --> 00:11:07,570
in javascript we also tend to have a

00:11:05,800 --> 00:11:10,420
skin problem where they can bleed

00:11:07,570 --> 00:11:12,160
everywhere and it can cause really nasty

00:11:10,420 --> 00:11:13,529
problems there's also some great

00:11:12,160 --> 00:11:15,820
auxiliary tools and these are not just

00:11:13,529 --> 00:11:17,260
angular base but they did come from the

00:11:15,820 --> 00:11:20,110
angular world and somebody I mentioned

00:11:17,260 --> 00:11:22,930
here karma being a unit testing tool and

00:11:20,110 --> 00:11:25,290
protractor being a more of an end-to-end

00:11:22,930 --> 00:11:27,339
testing tool which are really great for

00:11:25,290 --> 00:11:29,560
karma for java communications and

00:11:27,339 --> 00:11:31,540
general protractor for single page web

00:11:29,560 --> 00:11:32,250
apps in general fantastic pentacene

00:11:31,540 --> 00:11:35,920
tools

00:11:32,250 --> 00:11:38,740
the fantasy is none but it does lotus

00:11:35,920 --> 00:11:40,840
lotus and smaller jquery and if you have

00:11:38,740 --> 00:11:45,000
your own copy it will use that if it's

00:11:40,840 --> 00:11:47,110
two to one oh sorry Thea strengths of

00:11:45,000 --> 00:11:48,850
Emmanuel are they have a shorter low

00:11:47,110 --> 00:11:51,640
contact that it's actually really quick

00:11:48,850 --> 00:11:53,560
to get started in angular from a opening

00:11:51,640 --> 00:11:55,990
a text file and adding some things it

00:11:53,560 --> 00:11:57,460
has a long feature list so you it's a

00:11:55,990 --> 00:12:00,190
pretty tiny framework in terms of

00:11:57,460 --> 00:12:02,650
science but you get a lot when you load

00:12:00,190 --> 00:12:04,330
it in so the module friendly meaning for

00:12:02,650 --> 00:12:06,490
writing your own modules but also for

00:12:04,330 --> 00:12:09,100
using other people's modules which is a

00:12:06,490 --> 00:12:11,590
very very good and popular thing for

00:12:09,100 --> 00:12:13,300
sharing packages and being able to share

00:12:11,590 --> 00:12:14,530
the code that you write among the mobile

00:12:13,300 --> 00:12:17,700
applications or with other developers

00:12:14,530 --> 00:12:22,630
and of course the major industry backing

00:12:17,700 --> 00:12:24,190
so yeah a weaknesses so the recent rise

00:12:22,630 --> 00:12:26,140
to promise and of course this will be

00:12:24,190 --> 00:12:29,440
less true over time by the definition of

00:12:26,140 --> 00:12:32,110
it is less time in production so this is

00:12:29,440 --> 00:12:33,820
you know the criticism of client-side

00:12:32,110 --> 00:12:36,790
frameworks is how how do you scale it

00:12:33,820 --> 00:12:38,740
how do you understand how what works but

00:12:36,790 --> 00:12:41,470
it's by the nature of the beast this

00:12:38,740 --> 00:12:42,910
will be less true at the time this you

00:12:41,470 --> 00:12:44,860
have high lock in with writing behavior

00:12:42,910 --> 00:12:47,350
and markup so it's going to be difficult

00:12:44,860 --> 00:12:49,750
once you because it's a very big

00:12:47,350 --> 00:12:52,060
paradigm change so once you've started

00:12:49,750 --> 00:12:53,410
writing behavior in your markup it's not

00:12:52,060 --> 00:12:54,880
going to be that easy to move to

00:12:53,410 --> 00:12:57,370
something else that has no idea what

00:12:54,880 --> 00:12:59,380
you're doing so that's the nature of

00:12:57,370 --> 00:13:00,760
having a big paradigm shift there's also

00:12:59,380 --> 00:13:02,950
some skeptics of the future roadmap

00:13:00,760 --> 00:13:05,410
Google backing their what there was a

00:13:02,950 --> 00:13:06,790
talk just in here about angular 2 and so

00:13:05,410 --> 00:13:08,140
there's a lot of nervousness around that

00:13:06,790 --> 00:13:11,020
there's also nervousness about

00:13:08,140 --> 00:13:14,560
abandonware and especially with with 1.3

00:13:11,020 --> 00:13:17,170
of the that version dropped ie8 support

00:13:14,560 --> 00:13:19,090
which for some people who had this

00:13:17,170 --> 00:13:20,920
happens as the boy knew they'd had

00:13:19,090 --> 00:13:21,940
adopted angular specifically because it

00:13:20,920 --> 00:13:23,650
was one of the only client side

00:13:21,940 --> 00:13:25,120
frameworks that had ie8 support and they

00:13:23,650 --> 00:13:28,390
have to support international

00:13:25,120 --> 00:13:29,710
servers who are using ie and now they're

00:13:28,390 --> 00:13:30,910
worried that they have abandoned where

00:13:29,710 --> 00:13:32,260
so how are they going to support this

00:13:30,910 --> 00:13:34,570
framework themselves is there going to

00:13:32,260 --> 00:13:37,120
be a community standard to practice

00:13:34,570 --> 00:13:39,730
around it or are they just going to

00:13:37,120 --> 00:13:41,230
enter the wild land of forking projects

00:13:39,730 --> 00:13:43,180
is that what's going to happen to them

00:13:41,230 --> 00:13:45,400
so there's concerns about abandonware

00:13:43,180 --> 00:13:48,970
from from that version and for the

00:13:45,400 --> 00:13:50,410
future so those key components you get

00:13:48,970 --> 00:13:52,630
you get modules directive services

00:13:50,410 --> 00:13:54,310
controllers and so will go through kind

00:13:52,630 --> 00:13:56,800
of what each one of them looks like so

00:13:54,310 --> 00:13:58,480
in module looks like this so this is the

00:13:56,800 --> 00:14:00,360
simplest module every angular app has at

00:13:58,480 --> 00:14:03,279
least one or more module definition

00:14:00,360 --> 00:14:06,040
because your your app itself is a is a

00:14:03,279 --> 00:14:08,110
module and so this is how easy it is to

00:14:06,040 --> 00:14:10,060
define an angular app it's fasting up

00:14:08,110 --> 00:14:11,230
and running and so it makes it does make

00:14:10,060 --> 00:14:12,910
angular really good for interactive

00:14:11,230 --> 00:14:17,620
prototyping because you get to write

00:14:12,910 --> 00:14:19,150
your your code right into your HTML so

00:14:17,620 --> 00:14:22,690
for prototyping that can be really

00:14:19,150 --> 00:14:25,570
appealing and those square brackets the

00:14:22,690 --> 00:14:28,060
array that is your dependency injection

00:14:25,570 --> 00:14:29,170
so here this is the empty already it

00:14:28,060 --> 00:14:31,300
doesn't have any dependence things yet

00:14:29,170 --> 00:14:33,490
but you can consider a dependency

00:14:31,300 --> 00:14:35,709
injection kind of like where you would

00:14:33,490 --> 00:14:37,450
use your fire jazz or you know think the

00:14:35,709 --> 00:14:40,660
crumb and jas where you declare what you

00:14:37,450 --> 00:14:42,490
need before you're going to use it so

00:14:40,660 --> 00:14:43,930
this is a simple directive this is my

00:14:42,490 --> 00:14:46,540
favorite directive example because it

00:14:43,930 --> 00:14:48,130
creates the unicorn directive and this

00:14:46,540 --> 00:14:51,370
restrict is were you saying it's an

00:14:48,130 --> 00:14:53,709
element and spoilers we're going to talk

00:14:51,370 --> 00:14:55,300
about web components to later so this is

00:14:53,709 --> 00:14:59,580
a lot like this so direct is kind of

00:14:55,300 --> 00:15:02,620
fancy word for a web component and so

00:14:59,580 --> 00:15:04,959
this all this does is very simple it

00:15:02,620 --> 00:15:06,670
makes the unicorn the HTML for that

00:15:04,959 --> 00:15:11,100
element and then you can use it a

00:15:06,670 --> 00:15:11,100
unicorn closing bracket uniform

00:15:11,870 --> 00:15:16,760
so less common like more common than

00:15:14,540 --> 00:15:19,160
creating a unicorn directive it's more

00:15:16,760 --> 00:15:20,630
commonly you'll modify the behavior the

00:15:19,160 --> 00:15:22,400
Dom using a lot of there's a lot of

00:15:20,630 --> 00:15:24,020
built-in practice so if you see

00:15:22,400 --> 00:15:26,150
something in the mark-up chances are

00:15:24,020 --> 00:15:27,830
good that is a directive so ng in it is

00:15:26,150 --> 00:15:29,870
a directive so this is saying I'm going

00:15:27,830 --> 00:15:32,060
to initialize with some data ng-repeat

00:15:29,870 --> 00:15:33,440
is the directive and when you see these

00:15:32,060 --> 00:15:37,190
curly braces this is how you're doing

00:15:33,440 --> 00:15:39,800
data binding in angular so services are

00:15:37,190 --> 00:15:41,390
are useful in an angular and they're

00:15:39,800 --> 00:15:43,150
they're a big deal for for what they do

00:15:41,390 --> 00:15:46,490
especially for the JavaScript ecosystem

00:15:43,150 --> 00:15:49,160
you get a singleton to inject into any

00:15:46,490 --> 00:15:50,690
angular component and so again with the

00:15:49,160 --> 00:15:52,700
high-level language often used in

00:15:50,690 --> 00:15:54,200
angular so singleton just means that

00:15:52,700 --> 00:15:55,820
especially in JavaScript it's really

00:15:54,200 --> 00:15:57,830
easy to accidentally create the same

00:15:55,820 --> 00:15:59,600
thing over and over again which is

00:15:57,830 --> 00:16:02,000
really unfortunate because you're just

00:15:59,600 --> 00:16:05,300
burning memory and you're wasting space

00:16:02,000 --> 00:16:06,740
so a singleton it says one and once I

00:16:05,300 --> 00:16:08,570
have created it I'm done than I have

00:16:06,740 --> 00:16:11,089
created that's great and it's also

00:16:08,570 --> 00:16:12,890
lazily instantiate which means that when

00:16:11,089 --> 00:16:15,680
you use these you don't use it until you

00:16:12,890 --> 00:16:17,570
use it and so it's lazy so it's just

00:16:15,680 --> 00:16:18,920
there you've written the code for it but

00:16:17,570 --> 00:16:20,540
it's not going to be instantiated to you

00:16:18,920 --> 00:16:25,940
use it which has some benefits in low

00:16:20,540 --> 00:16:27,980
time and that kind of thing and yeah and

00:16:25,940 --> 00:16:30,170
so you use your services to house

00:16:27,980 --> 00:16:32,810
business logic and to do the kind of

00:16:30,170 --> 00:16:34,910
separation concern so this is this

00:16:32,810 --> 00:16:36,200
services rather than writing data into

00:16:34,910 --> 00:16:39,310
engene it we're going to create a

00:16:36,200 --> 00:16:43,330
service to load our data for us and

00:16:39,310 --> 00:16:43,330
return the data to us

00:16:44,070 --> 00:16:49,010
the controllers augment scope so scope

00:16:46,530 --> 00:16:53,310
is like this super object in angular and

00:16:49,010 --> 00:16:55,920
so you can you can do not great things

00:16:53,310 --> 00:16:58,380
just go there's not a lot of my friend

00:16:55,920 --> 00:17:00,180
call that book guns like when you shoot

00:16:58,380 --> 00:17:01,590
yourself in a foot there's not much

00:17:00,180 --> 00:17:03,840
prevention of foot guns in terms of

00:17:01,590 --> 00:17:05,280
adding things to scope but ideally

00:17:03,840 --> 00:17:08,190
you're doing it in the in the controller

00:17:05,280 --> 00:17:10,770
so you're on my team scope and you

00:17:08,190 --> 00:17:12,420
attach attach data to the scope and

00:17:10,770 --> 00:17:14,940
scope means that you can pop it to the

00:17:12,420 --> 00:17:16,290
view so that cisco so in this we say

00:17:14,940 --> 00:17:17,490
okay we're going to do scoped our

00:17:16,290 --> 00:17:20,610
properties equals properties those

00:17:17,490 --> 00:17:22,620
realtor properties and said now we can

00:17:20,610 --> 00:17:25,560
use in the view so if we using the view

00:17:22,620 --> 00:17:27,810
that looks like this they are met scope

00:17:25,560 --> 00:17:29,640
and bindings of you so ng-controller is

00:17:27,810 --> 00:17:31,410
that property controlling out and then

00:17:29,640 --> 00:17:34,830
we're use other directives to do that ng

00:17:31,410 --> 00:17:37,920
r EP we do the data binding and even the

00:17:34,830 --> 00:17:43,110
ng h RF in order for this to the result

00:17:37,920 --> 00:17:46,410
of a proper URL so controllers pass the

00:17:43,110 --> 00:17:48,060
data into the scope review so other

00:17:46,410 --> 00:17:49,710
components very useful in angular you

00:17:48,060 --> 00:17:51,690
got filters there's a lot of useful

00:17:49,710 --> 00:17:56,010
filters in there for just simple things

00:17:51,690 --> 00:17:57,510
like currency you know hi things that

00:17:56,010 --> 00:17:58,950
make your life a bit easier so being

00:17:57,510 --> 00:18:00,510
able to pass down a different filter in

00:17:58,950 --> 00:18:02,640
a useful way and of course you're going

00:18:00,510 --> 00:18:04,080
to define your own filters animations

00:18:02,640 --> 00:18:06,140
there's some nice animations that come

00:18:04,080 --> 00:18:09,090
ship with angular internationalisation

00:18:06,140 --> 00:18:11,190
localization accessibility with ng area

00:18:09,090 --> 00:18:12,810
and i already mentioned the testing tool

00:18:11,190 --> 00:18:16,080
so really you get it you get quite a lot

00:18:12,810 --> 00:18:19,560
when you adopt angular the big caveat is

00:18:16,080 --> 00:18:21,150
angular 2 which as you're probably

00:18:19,560 --> 00:18:22,440
overqualified if you attended the last

00:18:21,150 --> 00:18:25,200
talks but maybe you'll enjoy the other

00:18:22,440 --> 00:18:28,050
frameworks but it's a complete rewrite

00:18:25,200 --> 00:18:29,820
with no backwards compatibility so when

00:18:28,050 --> 00:18:31,650
you hear about angular that sounds so

00:18:29,820 --> 00:18:32,440
great right oh and then angular 2 is

00:18:31,650 --> 00:18:35,350
going to

00:18:32,440 --> 00:18:38,200
the party and it's a fairly true there's

00:18:35,350 --> 00:18:42,190
an NG comp video that people recommend

00:18:38,200 --> 00:18:44,260
called angular 1 meets angular 2 and so

00:18:42,190 --> 00:18:46,060
that can help it kind of is discussing

00:18:44,260 --> 00:18:49,180
the how you can have a happy path if

00:18:46,060 --> 00:18:52,000
you're on one and moving the two and

00:18:49,180 --> 00:18:53,920
also angular version 1.4 has a new

00:18:52,000 --> 00:18:56,740
router which will allow you to update

00:18:53,920 --> 00:18:58,210
your code incrementally to 2 dot F and

00:18:56,740 --> 00:18:59,590
of course the one of the other reasons I

00:18:58,210 --> 00:19:02,230
feel more very intimidated by angular 2

00:18:59,590 --> 00:19:04,600
is that it it's kind of dictating that

00:19:02,230 --> 00:19:07,570
you will use typescript or the ESX

00:19:04,600 --> 00:19:09,940
syntax which is more people are adopting

00:19:07,570 --> 00:19:12,090
it but it when you use angular 2 it's

00:19:09,940 --> 00:19:14,710
going to be expected that you will do it

00:19:12,090 --> 00:19:16,360
so resources that you know dachshund

00:19:14,710 --> 00:19:19,030
cells are really good so to the guy the

00:19:16,360 --> 00:19:21,490
API and the tutorial it's really well

00:19:19,030 --> 00:19:23,740
documented the language can be a little

00:19:21,490 --> 00:19:26,500
bit you feel like you have to have a PhD

00:19:23,740 --> 00:19:29,200
your science sometimes that can be a

00:19:26,500 --> 00:19:31,510
downside but in general if there's a lot

00:19:29,200 --> 00:19:34,600
of documentation and other resources

00:19:31,510 --> 00:19:35,620
outside of that our egghead I oh if you

00:19:34,600 --> 00:19:37,060
have not checked with that and you're

00:19:35,620 --> 00:19:38,890
interested in JavaScript frameworks in

00:19:37,060 --> 00:19:40,810
general fantastic resources not just

00:19:38,890 --> 00:19:42,880
angular but kind of where they started

00:19:40,810 --> 00:19:45,040
and it's a subscription service that

00:19:42,880 --> 00:19:48,000
people really like although angular

00:19:45,040 --> 00:19:52,120
error is a free live video podcast

00:19:48,000 --> 00:19:54,040
that's pretty good all right ember so

00:19:52,120 --> 00:19:55,840
amber is the most complete JavaScript

00:19:54,040 --> 00:19:58,000
framework so i want to say complete I

00:19:55,840 --> 00:20:00,820
mean it's it I would say it's highly

00:19:58,000 --> 00:20:02,380
opinionated and it's built completely

00:20:00,820 --> 00:20:03,420
I'm mod your open source components so

00:20:02,380 --> 00:20:04,700
good news for

00:20:03,420 --> 00:20:06,780
this crowd and it's community

00:20:04,700 --> 00:20:08,160
super-powered others also if you are

00:20:06,780 --> 00:20:10,620
intrigued by Emperor after this there's

00:20:08,160 --> 00:20:13,950
a talk tomorrow at the same time slot I

00:20:10,620 --> 00:20:16,050
number so what you get you get very

00:20:13,950 --> 00:20:18,930
strongly to find components you get data

00:20:16,050 --> 00:20:20,610
binding so you can ever components which

00:20:18,930 --> 00:20:21,900
are like directives which are like web

00:20:20,610 --> 00:20:24,570
components will do a short teaser on

00:20:21,900 --> 00:20:26,100
that and you give great routing supports

00:20:24,570 --> 00:20:28,200
the Emperor is really good and

00:20:26,100 --> 00:20:29,790
dependency injection so it seems like

00:20:28,200 --> 00:20:32,310
the featureless kind of maps really well

00:20:29,790 --> 00:20:34,740
to angular but it takes a very pretty

00:20:32,310 --> 00:20:38,460
different approach I would say so the

00:20:34,740 --> 00:20:40,950
entry pass to to ember now is ember CLI

00:20:38,460 --> 00:20:42,600
so the command line interface and you

00:20:40,950 --> 00:20:44,520
also get debugging tools and burn

00:20:42,600 --> 00:20:46,830
factors should you choose to use it it's

00:20:44,520 --> 00:20:48,810
a very useful tool so depends these

00:20:46,830 --> 00:20:51,030
since ember CLI is now the entry point

00:20:48,810 --> 00:20:52,770
for getting started with ember the kind

00:20:51,030 --> 00:20:55,290
of if you look the documentation they

00:20:52,770 --> 00:20:56,970
kind of swept away other things just

00:20:55,290 --> 00:20:59,880
that just use the CLI and it will do a

00:20:56,970 --> 00:21:01,890
lot of work for you and so find the

00:20:59,880 --> 00:21:04,590
nature that your dependencies are now

00:21:01,890 --> 00:21:06,330
just note at mpm and that's because

00:21:04,590 --> 00:21:08,940
you're going to use that to install the

00:21:06,330 --> 00:21:10,830
CLI so the strengths is that as

00:21:08,940 --> 00:21:13,050
community it's really community / powers

00:21:10,830 --> 00:21:16,710
they printed a lot of content people are

00:21:13,050 --> 00:21:18,690
really active I don't foresee any kind

00:21:16,710 --> 00:21:20,430
of of anywhere a number and its

00:21:18,690 --> 00:21:22,500
convention driven so there is kind of a

00:21:20,430 --> 00:21:24,120
right way to do things and there's

00:21:22,500 --> 00:21:26,850
commonalities with every other ember app

00:21:24,120 --> 00:21:28,080
so if you if you start running a number

00:21:26,850 --> 00:21:29,850
and you talk to other people who write

00:21:28,080 --> 00:21:30,930
number there should be some sort of

00:21:29,850 --> 00:21:33,150
common language that you're talking

00:21:30,930 --> 00:21:36,690
about and you also get generation and

00:21:33,150 --> 00:21:38,070
tools and templates with the CLI tool so

00:21:36,690 --> 00:21:40,350
sometimes there's too much information

00:21:38,070 --> 00:21:43,260
this is a very great problem to have if

00:21:40,350 --> 00:21:45,450
you look at the Ember documentation

00:21:43,260 --> 00:21:48,480
there is a lot of it there's a lot of

00:21:45,450 --> 00:21:50,070
guys and a lot of word and the fact that

00:21:48,480 --> 00:21:54,000
there that there's also been some

00:21:50,070 --> 00:21:56,050
changes moving from the one version to

00:21:54,000 --> 00:21:58,090
version they can sometimes be

00:21:56,050 --> 00:22:00,160
confusing to figure out there there

00:21:58,090 --> 00:22:02,290
there quite similar and it's a pretty

00:22:00,160 --> 00:22:03,910
happy path but it can be a little hard

00:22:02,290 --> 00:22:07,210
to figure out if something is the one

00:22:03,910 --> 00:22:08,440
way or the two way and also because

00:22:07,210 --> 00:22:12,190
there's a right way to do things that

00:22:08,440 --> 00:22:13,990
made a higher learning curve so trying

00:22:12,190 --> 00:22:15,790
to figure out if you can figure out one

00:22:13,990 --> 00:22:17,440
way to do things then you spend you know

00:22:15,790 --> 00:22:19,390
three times as long trying to figure out

00:22:17,440 --> 00:22:20,710
if it was the right way to do it and so

00:22:19,390 --> 00:22:22,480
this can be this is going to be

00:22:20,710 --> 00:22:23,920
intimidating with beginners and it's

00:22:22,480 --> 00:22:25,300
also not as pervasive as the other two

00:22:23,920 --> 00:22:27,190
major frameworks to see me concerned

00:22:25,300 --> 00:22:28,930
honestly I don't think it's etiquette

00:22:27,190 --> 00:22:31,090
the deal people are often trying to say

00:22:28,930 --> 00:22:33,430
like so what's the one true framework

00:22:31,090 --> 00:22:35,590
and the answer is there's not one ever

00:22:33,430 --> 00:22:38,890
is great call all of them are great

00:22:35,590 --> 00:22:40,750
they're really largely adopted and you

00:22:38,890 --> 00:22:43,600
know if you like it you'll have a good

00:22:40,750 --> 00:22:45,880
time so the key components we got

00:22:43,600 --> 00:22:48,370
templating by handlebars open source

00:22:45,880 --> 00:22:50,770
projects models routes components and

00:22:48,370 --> 00:22:52,960
controllers so controllers are still for

00:22:50,770 --> 00:22:54,460
a number but they will eventually be

00:22:52,960 --> 00:22:57,430
phased out in favor of components

00:22:54,460 --> 00:22:58,840
because anything you can do in a

00:22:57,430 --> 00:23:00,820
controller you can probably figure out

00:22:58,840 --> 00:23:02,440
how to do in the component and the only

00:23:00,820 --> 00:23:05,800
reason is right now you can't route to a

00:23:02,440 --> 00:23:07,180
component directly and so the what they

00:23:05,800 --> 00:23:09,430
say and the documentation is that when

00:23:07,180 --> 00:23:12,120
that changes it will be recommended to

00:23:09,430 --> 00:23:14,890
replace all controllers with components

00:23:12,120 --> 00:23:18,040
so we'll get started look at routes

00:23:14,890 --> 00:23:20,560
models and components so as I said the

00:23:18,040 --> 00:23:24,820
entry path now is straight up ember CLI

00:23:20,560 --> 00:23:27,360
so you install globally ember CLI then

00:23:24,820 --> 00:23:31,840
you get the Ember command-line tool and

00:23:27,360 --> 00:23:34,030
all these keywords and so new new app

00:23:31,840 --> 00:23:36,970
this is going to probably remind you of

00:23:34,030 --> 00:23:38,710
rails it reminds me a lot of rail and so

00:23:36,970 --> 00:23:40,830
you change directory into the app and

00:23:38,710 --> 00:23:42,929
then you you can run a server right away

00:23:40,830 --> 00:23:44,789
so what Jack Manley tools does this is

00:23:42,929 --> 00:23:46,080
actually like it sets of your project so

00:23:44,789 --> 00:23:47,429
this is when we say highly opinionated

00:23:46,080 --> 00:23:49,320
and that there's a right way to do

00:23:47,429 --> 00:23:50,460
things it's highly opinionated and

00:23:49,320 --> 00:23:52,049
there's a right way to do things so it

00:23:50,460 --> 00:23:54,510
gives you a folder structure and a

00:23:52,049 --> 00:23:56,399
recommended way of doing things and if

00:23:54,510 --> 00:23:59,070
you do think if you put things in the

00:23:56,399 --> 00:24:01,649
right folder lots of you know magic can

00:23:59,070 --> 00:24:03,960
happen that it just works and it knows

00:24:01,649 --> 00:24:06,419
what to do so if you like that kind of

00:24:03,960 --> 00:24:09,570
environment then em burn the place for

00:24:06,419 --> 00:24:11,909
you to go so once you have that it flows

00:24:09,570 --> 00:24:14,429
all your dependencies evenly get which I

00:24:11,909 --> 00:24:16,889
really like so it's kind of nudging

00:24:14,429 --> 00:24:19,470
people into positive development

00:24:16,889 --> 00:24:21,929
practices and it's ready to go and you

00:24:19,470 --> 00:24:25,289
can run the server right away and it it

00:24:21,929 --> 00:24:26,940
runs and it just works and so with that

00:24:25,289 --> 00:24:28,860
you can live with just like a few static

00:24:26,940 --> 00:24:30,450
assets if you then you have the server

00:24:28,860 --> 00:24:33,570
but you have a whoops you about what up

00:24:30,450 --> 00:24:35,340
and so using so pretty much all these

00:24:33,570 --> 00:24:37,470
things are going to use ember CLI to

00:24:35,340 --> 00:24:43,049
generate so routes our first classes in

00:24:37,470 --> 00:24:45,389
a number and so the so in this we can

00:24:43,049 --> 00:24:46,889
actually with this model example if we

00:24:45,389 --> 00:24:49,230
actually didn't have to create a

00:24:46,889 --> 00:24:51,210
separate model for this ember is smart

00:24:49,230 --> 00:24:53,309
enough to say okay you loaded some

00:24:51,210 --> 00:24:54,750
well-formed JSON I'm going to assume

00:24:53,309 --> 00:24:56,700
that you want me to turn each of those

00:24:54,750 --> 00:24:59,730
into an object that has properties of

00:24:56,700 --> 00:25:02,220
that JSON like it is javascript is JSON

00:24:59,730 --> 00:25:05,490
is it knows what to do with it you also

00:25:02,220 --> 00:25:07,950
notice that this is is the es6 syntax

00:25:05,490 --> 00:25:09,779
but it's not that big a deal a number

00:25:07,950 --> 00:25:11,549
especially because you get those

00:25:09,779 --> 00:25:13,260
cogeneration tools so once you're

00:25:11,549 --> 00:25:14,909
dropped into that context and things are

00:25:13,260 --> 00:25:16,620
already wired for you it's pretty easy

00:25:14,909 --> 00:25:23,149
to adopt that syntax if you aren't

00:25:16,620 --> 00:25:23,149
familiar with it so yeah

00:25:24,039 --> 00:25:29,659
so if you want to define model you can

00:25:27,830 --> 00:25:33,409
ever generate model so you'll see this

00:25:29,659 --> 00:25:35,299
lisa m / generate and then whatever core

00:25:33,409 --> 00:25:36,620
component of ember you it's hard to use

00:25:35,299 --> 00:25:38,169
a work of product so much also web

00:25:36,620 --> 00:25:41,510
components so we gotta find a new word

00:25:38,169 --> 00:25:43,760
but so this the name of it and then the

00:25:41,510 --> 00:25:46,640
attributes and the types of what they

00:25:43,760 --> 00:25:50,090
should be and so when this des is DF f

00:25:46,640 --> 00:25:52,100
dash dork and so we import yet and then

00:25:50,090 --> 00:25:54,860
we create a model that assigns those

00:25:52,100 --> 00:25:57,260
properties to those data values it's it

00:25:54,860 --> 00:25:59,000
does a generation for you but then it's

00:25:57,260 --> 00:26:02,169
still really easy to understand when you

00:25:59,000 --> 00:26:05,240
look at it which is a really good thing

00:26:02,169 --> 00:26:07,100
so web components so the Emperor

00:26:05,240 --> 00:26:08,870
components are like web components and

00:26:07,100 --> 00:26:11,240
that means that they contain a template

00:26:08,870 --> 00:26:13,070
for presentation and markup and behavior

00:26:11,240 --> 00:26:14,690
by a JavaScript so we're going to take a

00:26:13,070 --> 00:26:18,260
short detour which we will then come

00:26:14,690 --> 00:26:19,549
back to a very short minute and the web

00:26:18,260 --> 00:26:21,080
components what they are so are

00:26:19,549 --> 00:26:24,350
comprised of multiple standards that are

00:26:21,080 --> 00:26:26,840
not yet implemented across browsers so

00:26:24,350 --> 00:26:29,929
there's these these four four standards

00:26:26,840 --> 00:26:31,880
at webicon org has some more information

00:26:29,929 --> 00:26:34,490
on it but again will resume the detour

00:26:31,880 --> 00:26:37,000
in a minute so if we want to create a

00:26:34,490 --> 00:26:40,280
component we use that ember generate

00:26:37,000 --> 00:26:42,890
thing in ember and we give the name of

00:26:40,280 --> 00:26:45,409
it so they have to have dashes is the

00:26:42,890 --> 00:26:47,570
law so that you won't ever you know

00:26:45,409 --> 00:26:50,120
interact with another future HTML

00:26:47,570 --> 00:26:53,210
element if HTML is ever going to create

00:26:50,120 --> 00:26:56,299
a you know y component element and then

00:26:53,210 --> 00:26:58,760
i use the dash dash pod that argument

00:26:56,299 --> 00:27:01,909
puts your pusher component stuff

00:26:58,760 --> 00:27:03,950
together which i prefer so then it goes

00:27:01,909 --> 00:27:05,450
into components / my component and they

00:27:03,950 --> 00:27:08,480
see these are in the same directory

00:27:05,450 --> 00:27:10,940
which is maps more to how you do web

00:27:08,480 --> 00:27:12,890
components as well if you don't use the

00:27:10,940 --> 00:27:14,659
pod it's fine as I mean it still works

00:27:12,890 --> 00:27:16,429
it will just put the behavior and

00:27:14,659 --> 00:27:18,080
components and the template will be in

00:27:16,429 --> 00:27:19,740
the templates folder it's also

00:27:18,080 --> 00:27:24,090
understandable but I like to put like

00:27:19,740 --> 00:27:26,220
things together so if I were to give you

00:27:24,090 --> 00:27:28,380
some ember resources the guy in there

00:27:26,220 --> 00:27:31,140
there's lots of them but they are very

00:27:28,380 --> 00:27:33,179
good and ember watches kind of more of

00:27:31,140 --> 00:27:36,150
an aggregator site if you're looking for

00:27:33,179 --> 00:27:38,220
tutorials you're looking for news an

00:27:36,150 --> 00:27:41,100
ember watch is going to be a place for

00:27:38,220 --> 00:27:43,140
you to hang out and I'd also recommend a

00:27:41,100 --> 00:27:44,610
flow especially I asked a friend and

00:27:43,140 --> 00:27:47,040
what he would recommend he recommended

00:27:44,610 --> 00:27:49,440
the ember CLI 101 especially now that

00:27:47,040 --> 00:27:51,750
ember CLI is the entry point to making

00:27:49,440 --> 00:27:53,550
number apps it baku's you to understand

00:27:51,750 --> 00:27:55,530
this tool really well and so the ember

00:27:53,550 --> 00:27:58,500
CLI book gives you that kind of

00:27:55,530 --> 00:28:00,570
information alright so rising stars

00:27:58,500 --> 00:28:02,910
romentic about polymer first so that we

00:28:00,570 --> 00:28:05,010
can talk about web components and so you

00:28:02,910 --> 00:28:07,440
might also want to see x tags from

00:28:05,010 --> 00:28:08,610
mozilla how many of you have heard of

00:28:07,440 --> 00:28:11,790
polymer and i'm starting to do a

00:28:08,610 --> 00:28:14,040
handbrake thing Oh excellent okay so so

00:28:11,790 --> 00:28:16,679
yeah so if you've heard a polymer you

00:28:14,040 --> 00:28:18,750
might not have heard x tags which is the

00:28:16,679 --> 00:28:21,090
is the web component project from

00:28:18,750 --> 00:28:23,970
Mozilla but they are definitely related

00:28:21,090 --> 00:28:25,920
but we'll talk about polymer here the

00:28:23,970 --> 00:28:28,170
detour is now resumed though these specs

00:28:25,920 --> 00:28:31,080
are in working draft so we've got custom

00:28:28,170 --> 00:28:33,000
elements HTML import template and shadow

00:28:31,080 --> 00:28:35,720
Dom so those are the four steps so you

00:28:33,000 --> 00:28:39,210
consider to make up web components and

00:28:35,720 --> 00:28:41,960
the standard way of using them is to use

00:28:39,210 --> 00:28:44,429
the web components j/s polyfill which is

00:28:41,960 --> 00:28:46,110
nice at this there's now a kind of a

00:28:44,429 --> 00:28:47,820
standard polyfill that most of these

00:28:46,110 --> 00:28:49,890
projects are using so they're using web

00:28:47,820 --> 00:28:52,429
components jas as their polyfill under

00:28:49,890 --> 00:28:54,960
the hood and the difference the

00:28:52,429 --> 00:28:56,760
commonality between polymer and next tag

00:28:54,960 --> 00:28:57,840
and so if you want it if you're saying

00:28:56,760 --> 00:28:59,910
okay well what's the penance is a

00:28:57,840 --> 00:29:03,120
standard so then what is polymer it's a

00:28:59,910 --> 00:29:06,660
question and so polymer is kind of two

00:29:03,120 --> 00:29:08,850
web components as jQuery is the Dom it's

00:29:06,660 --> 00:29:12,059
more of an abstraction interface it

00:29:08,850 --> 00:29:14,760
makes it easier to use theoretically and

00:29:12,059 --> 00:29:17,010
so it makes it easier for you to get

00:29:14,760 --> 00:29:18,700
started so the question is what I new

00:29:17,010 --> 00:29:20,740
emergent Webster an RV component

00:29:18,700 --> 00:29:23,110
yet there is a lot of green on here

00:29:20,740 --> 00:29:28,930
however you'll note that this is a flag

00:29:23,110 --> 00:29:33,100
this is a flag this is empty so so

00:29:28,930 --> 00:29:34,720
support is not it's not common and you

00:29:33,100 --> 00:29:36,910
there is a poly so of course that you

00:29:34,720 --> 00:29:39,100
can otherwise this excuse we won't be

00:29:36,910 --> 00:29:41,950
able to use at all but there is not

00:29:39,100 --> 00:29:43,900
ubiquitous support so if we're defining

00:29:41,950 --> 00:29:46,480
a polymer component first we have to

00:29:43,900 --> 00:29:48,370
import polymer at the dependency let's

00:29:46,480 --> 00:29:50,620
say this is my component HTML and so

00:29:48,370 --> 00:29:53,770
we're going to put that mark up and that

00:29:50,620 --> 00:29:55,870
behavior together so we can create our

00:29:53,770 --> 00:29:58,570
template and in the template we include

00:29:55,870 --> 00:30:01,630
our styles for rendering our component

00:29:58,570 --> 00:30:04,660
and within that scope and the and the

00:30:01,630 --> 00:30:07,960
mark-up that you want to use and then we

00:30:04,660 --> 00:30:10,510
use the script tag inside that element

00:30:07,960 --> 00:30:12,280
and use the polymer and we say is my

00:30:10,510 --> 00:30:14,320
component to the helots that what

00:30:12,280 --> 00:30:16,900
polymer elements of polymer will then

00:30:14,320 --> 00:30:19,540
creates the component for us and this is

00:30:16,900 --> 00:30:22,270
where we'd add extra behavior such as an

00:30:19,540 --> 00:30:24,160
interface and application interface in

00:30:22,270 --> 00:30:25,420
order to for example so if you think web

00:30:24,160 --> 00:30:27,820
components if you could sounds like a

00:30:25,420 --> 00:30:29,530
lot of you have heard of them I think of

00:30:27,820 --> 00:30:32,380
it like the Select tag like the Select

00:30:29,530 --> 00:30:35,950
tag is a in HTML element that has a

00:30:32,380 --> 00:30:37,870
really known and solid API it has a

00:30:35,950 --> 00:30:39,970
interfit like it has a presentation

00:30:37,870 --> 00:30:42,040
there is a way that a the Select tag the

00:30:39,970 --> 00:30:44,410
drop-down how it looks and how you get

00:30:42,040 --> 00:30:46,390
data out of it via JavaScript so that's

00:30:44,410 --> 00:30:48,580
what you can do in polymer and web

00:30:46,390 --> 00:30:51,790
components is that you can define that

00:30:48,580 --> 00:30:53,590
interface on you can define presentation

00:30:51,790 --> 00:30:55,270
you can define how you get data in out

00:30:53,590 --> 00:30:59,950
of it and you can define all that in

00:30:55,270 --> 00:31:02,170
your own element and so this is just

00:30:59,950 --> 00:31:03,820
showing that so we pass that name equals

00:31:02,170 --> 00:31:06,670
my component all the way through to is

00:31:03,820 --> 00:31:08,860
my component and then we can use that my

00:31:06,670 --> 00:31:10,580
component by component which looks

00:31:08,860 --> 00:31:13,789
similar to directive

00:31:10,580 --> 00:31:15,110
22 ember components so if you you bet on

00:31:13,789 --> 00:31:17,090
one thing you might want to consider

00:31:15,110 --> 00:31:20,659
betting on that something happening with

00:31:17,090 --> 00:31:23,390
web components so resources the polymer

00:31:20,659 --> 00:31:26,289
docs are good there's also an email list

00:31:23,390 --> 00:31:28,970
of your internet of the polymer slack so

00:31:26,289 --> 00:31:30,710
the track instance and the polymer

00:31:28,970 --> 00:31:32,690
podcast and then there's also more links

00:31:30,710 --> 00:31:35,059
and these slides will all go online so I

00:31:32,690 --> 00:31:36,080
know you all are also at the bottom

00:31:35,059 --> 00:31:38,570
that's gonna be hard to keep on the back

00:31:36,080 --> 00:31:41,659
to see but those links are actually from

00:31:38,570 --> 00:31:43,220
my my friend Jamie who's on the the

00:31:41,659 --> 00:31:44,990
polymer podcast so I asked him for

00:31:43,220 --> 00:31:46,970
resources than he threw a lot of me so

00:31:44,990 --> 00:31:51,230
there's there's more in there if you're

00:31:46,970 --> 00:31:54,590
interested so reacts there reacts covers

00:31:51,230 --> 00:31:56,799
only the view layer so they pitch

00:31:54,590 --> 00:32:00,289
themselves as where the V and MVC and

00:31:56,799 --> 00:32:02,450
the the wave react works is it uses

00:32:00,289 --> 00:32:04,399
actually one of those web component

00:32:02,450 --> 00:32:07,250
specifications and so uses the shadow

00:32:04,399 --> 00:32:09,830
Dom may uses a polyfill for it and it

00:32:07,250 --> 00:32:12,440
super performance which is kind of how

00:32:09,830 --> 00:32:15,080
it's been popular as it it makes a view

00:32:12,440 --> 00:32:17,389
rendering really bad and the way it does

00:32:15,080 --> 00:32:18,889
that is that you can consider it I think

00:32:17,389 --> 00:32:20,929
of it like get discs for browser

00:32:18,889 --> 00:32:25,070
rendering that instead of mutating the

00:32:20,929 --> 00:32:28,850
Dom which is expensive we what react

00:32:25,070 --> 00:32:30,380
does is diff and see what has changed

00:32:28,850 --> 00:32:32,929
and then only touch the things that have

00:32:30,380 --> 00:32:34,340
changed so if you can reduce the number

00:32:32,929 --> 00:32:39,169
of times you touch the Dom you get

00:32:34,340 --> 00:32:41,360
better performances the idea of react so

00:32:39,169 --> 00:32:44,149
this react component example is lovingly

00:32:41,360 --> 00:32:46,190
taken from the react to torial so this

00:32:44,149 --> 00:32:48,260
is the bear comments box you get react

00:32:46,190 --> 00:32:50,389
create class there's a render function

00:32:48,260 --> 00:32:52,870
summer like I looks like a backbone view

00:32:50,389 --> 00:32:55,519
right so we've got a render function and

00:32:52,870 --> 00:32:59,779
then we render some stuff and then we

00:32:55,519 --> 00:33:01,850
react on rendered that element you might

00:32:59,779 --> 00:33:05,029
have noticed that oh my goodness there's

00:33:01,850 --> 00:33:08,120
an HTML and my JavaScript yes so that is

00:33:05,029 --> 00:33:12,260
called jsf so it's not HTML is its xml

00:33:08,120 --> 00:33:13,560
in in your anger react and when react

00:33:12,260 --> 00:33:15,360
came out this is one of

00:33:13,560 --> 00:33:17,940
parts of react that people were really

00:33:15,360 --> 00:33:20,580
really resistant to and they said why

00:33:17,940 --> 00:33:22,830
you know which it's kind of funny

00:33:20,580 --> 00:33:25,980
because we let JavaScript come into our

00:33:22,830 --> 00:33:26,910
Dom with with angular but then we went

00:33:25,980 --> 00:33:30,630
the other way there's a lot of

00:33:26,910 --> 00:33:31,860
resistance but so people were like what

00:33:30,630 --> 00:33:34,320
are you doing we've done all our lives

00:33:31,860 --> 00:33:36,390
to prevent this from happening but now

00:33:34,320 --> 00:33:38,040
people like it and so if you are

00:33:36,390 --> 00:33:41,760
interested in react I highly suggest

00:33:38,040 --> 00:33:44,910
going with it and going and just going

00:33:41,760 --> 00:33:48,510
with that path and seeing how jsx works

00:33:44,910 --> 00:33:51,330
out for you so you now can't mention

00:33:48,510 --> 00:33:53,250
react without mentioning flux so fluxes

00:33:51,330 --> 00:33:55,620
and architecture patters it is not a

00:33:53,250 --> 00:33:57,900
framework it is an architecture powder

00:33:55,620 --> 00:33:59,990
there are implementations of this

00:33:57,900 --> 00:34:02,280
architecture pattern that you can use

00:33:59,990 --> 00:34:04,140
unfortunately you have the tragedy of

00:34:02,280 --> 00:34:06,120
you know the dilemma the paradox of

00:34:04,140 --> 00:34:09,480
choice the level of paradox so many

00:34:06,120 --> 00:34:11,910
choices of flux implementations so if

00:34:09,480 --> 00:34:14,250
you are using react because it you know

00:34:11,910 --> 00:34:16,980
it's the view layer and so in terms of a

00:34:14,250 --> 00:34:18,480
framework it's not giving you that much

00:34:16,980 --> 00:34:21,090
around how you're going to structure

00:34:18,480 --> 00:34:22,830
your application so it you're you're

00:34:21,090 --> 00:34:24,090
rendering views but that's just running

00:34:22,830 --> 00:34:25,140
your views what are you doing with all

00:34:24,090 --> 00:34:27,120
your data what are you doing with

00:34:25,140 --> 00:34:29,700
everything else flux is a suggested

00:34:27,120 --> 00:34:31,280
architecture for that you can look out

00:34:29,700 --> 00:34:34,170
that some of the most popular one are

00:34:31,280 --> 00:34:35,640
redux which builds upon flux and also

00:34:34,170 --> 00:34:37,410
take some inspiration from the Elm

00:34:35,640 --> 00:34:40,410
language which is really really

00:34:37,410 --> 00:34:43,110
interesting and pretty cool and reflux

00:34:40,410 --> 00:34:46,790
is also another one and it's also hard

00:34:43,110 --> 00:34:48,930
because they all sound alike and but

00:34:46,790 --> 00:34:53,760
it's pretty interesting to look into I

00:34:48,930 --> 00:34:55,890
definitely recommended time would be to

00:34:53,760 --> 00:34:57,660
write your own plus implementation so

00:34:55,890 --> 00:34:59,100
you understand it and then forget about

00:34:57,660 --> 00:35:01,260
that and use someone else's that's

00:34:59,100 --> 00:35:04,200
compute community supported in an ideal

00:35:01,260 --> 00:35:07,230
world of unlimited time but so it is and

00:35:04,200 --> 00:35:08,520
then Oh Miz is reactive closure script

00:35:07,230 --> 00:35:10,800
and this is also one of the tools that

00:35:08,520 --> 00:35:12,580
helped popularize react actually wish

00:35:10,800 --> 00:35:14,110
these demos of

00:35:12,580 --> 00:35:16,450
really interesting things you could do

00:35:14,110 --> 00:35:19,420
with a really limited limited amount of

00:35:16,450 --> 00:35:22,210
code so when when closure scripture with

00:35:19,420 --> 00:35:25,180
language that you can write a little bit

00:35:22,210 --> 00:35:30,070
of code to get a lot of a lot of

00:35:25,180 --> 00:35:31,510
behavior so some some resources there's

00:35:30,070 --> 00:35:33,760
a newsletter if you're into newsletters

00:35:31,510 --> 00:35:36,250
there's podcasts of course there so we

00:35:33,760 --> 00:35:39,100
have documentation as well there there

00:35:36,250 --> 00:35:41,770
was a black instance but is now closed

00:35:39,100 --> 00:35:44,320
because they had over 8,000 members and

00:35:41,770 --> 00:35:47,650
flac said no we actually can't support

00:35:44,320 --> 00:35:48,850
unlimited free groups so I understand

00:35:47,650 --> 00:35:51,730
that that was cool but they're looking

00:35:48,850 --> 00:35:55,720
for a new home for the chat room in case

00:35:51,730 --> 00:35:57,190
you can help but there's lots of

00:35:55,720 --> 00:36:01,620
resources and a lot of excitement around

00:35:57,190 --> 00:36:04,120
vs all right so evaluating frameworks so

00:36:01,620 --> 00:36:05,800
if I were to give and choosing a

00:36:04,120 --> 00:36:08,470
front-end framework chocolate did not

00:36:05,800 --> 00:36:12,130
mention to do I bc i should be fired but

00:36:08,470 --> 00:36:15,130
to do NBC com is a website that gives

00:36:12,130 --> 00:36:18,280
you examples of so simple application

00:36:15,130 --> 00:36:20,590
written in many frameworks so you can

00:36:18,280 --> 00:36:22,330
say how would i right so it to do a you

00:36:20,590 --> 00:36:28,960
know checklist app how would I write

00:36:22,330 --> 00:36:30,490
that in angular react dojo uh there's a

00:36:28,960 --> 00:36:31,930
few on there and the website will look

00:36:30,490 --> 00:36:34,540
different now because it's practically

00:36:31,930 --> 00:36:37,930
updating so it's pretty interesting to

00:36:34,540 --> 00:36:39,940
see an end of a very simple application

00:36:37,930 --> 00:36:43,000
so you can look under the hood and see

00:36:39,940 --> 00:36:45,940
how it goes you're interested in some of

00:36:43,000 --> 00:36:47,680
the pedagogy there's a spreadsheet for

00:36:45,940 --> 00:36:49,710
ranking that that I designed a couple

00:36:47,680 --> 00:36:52,330
years ago I gave a talk on choosing a

00:36:49,710 --> 00:36:55,720
framework in general so not just

00:36:52,330 --> 00:36:57,580
JavaScript frameworks and I worked on a

00:36:55,720 --> 00:36:59,320
way to rank frameworks according to

00:36:57,580 --> 00:37:02,140
business technical and team criteria and

00:36:59,320 --> 00:37:04,450
then after that the people at the

00:37:02,140 --> 00:37:07,030
Wharton School took that and created a

00:37:04,450 --> 00:37:09,000
much better awesome you're looking for a

00:37:07,030 --> 00:37:10,800
more formal and vetted solution

00:37:09,000 --> 00:37:13,380
I'm you know I'm an organization that

00:37:10,800 --> 00:37:15,720
wants to better our technology in a you

00:37:13,380 --> 00:37:17,940
know in a systematic way they created

00:37:15,720 --> 00:37:19,770
this death tab which is pretty neat and

00:37:17,940 --> 00:37:21,390
gives you a way to do that so that you

00:37:19,770 --> 00:37:24,450
can look at technology and weighed

00:37:21,390 --> 00:37:27,210
against these scales and see how how it

00:37:24,450 --> 00:37:29,490
will help you so endep top is the is the

00:37:27,210 --> 00:37:33,180
wharton software development technology

00:37:29,490 --> 00:37:34,890
assessment process alright so I don't

00:37:33,180 --> 00:37:36,570
know how I got through all these but

00:37:34,890 --> 00:37:37,680
it's because I talked to the DA so we

00:37:36,570 --> 00:37:39,600
actually probably do us a time for

00:37:37,680 --> 00:37:42,150
questions but I mean it's also kayden

00:37:39,600 --> 00:37:44,510
early because it's lunch so so thank you

00:37:42,150 --> 00:37:44,510

YouTube URL: https://www.youtube.com/watch?v=QjTztHlypAI


