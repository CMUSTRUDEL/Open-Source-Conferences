Title: All Things Open 2015 | Brendan Lee - 52 Inc. | Open Source for the IOS Developer
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,430 --> 00:00:08,700
we work for 52 Inc in Columbia South

00:00:06,870 --> 00:00:11,219
Carolina we're a team of about a dozen

00:00:08,700 --> 00:00:13,740
people that do mobile app website server

00:00:11,219 --> 00:00:16,379
and back-end development for a variety

00:00:13,740 --> 00:00:18,029
of clients so today I'm going to take

00:00:16,379 --> 00:00:20,609
you through some open source topics and

00:00:18,029 --> 00:00:22,619
iOS development where to start with

00:00:20,609 --> 00:00:24,510
managing dependencies with cocoa pods

00:00:22,619 --> 00:00:26,279
and carthage we're an explore some great

00:00:24,510 --> 00:00:28,050
open source components you can put into

00:00:26,279 --> 00:00:30,269
your projects we're also going to

00:00:28,050 --> 00:00:32,850
explore the switch problem which

00:00:30,269 --> 00:00:35,790
although i'm kind of a swift hater not

00:00:32,850 --> 00:00:37,020
on the specific point next thing we're

00:00:35,790 --> 00:00:39,450
going to look at some plugins with

00:00:37,020 --> 00:00:40,980
alcatraz and some plugins that i really

00:00:39,450 --> 00:00:42,840
like that make my development workflow a

00:00:40,980 --> 00:00:44,460
whole lot better and then we're going to

00:00:42,840 --> 00:00:47,039
look a brief introduction to Fastlane

00:00:44,460 --> 00:00:48,300
build tools take a looks and some great

00:00:47,039 --> 00:00:49,860
things you can add your continuous

00:00:48,300 --> 00:00:51,239
integration environment and the last

00:00:49,860 --> 00:00:55,020
we're going to go through some UI design

00:00:51,239 --> 00:00:57,059
with Dan by open source materials and

00:00:55,020 --> 00:00:58,890
components so the first thing we're to

00:00:57,059 --> 00:01:01,530
start off with is managing dependencies

00:00:58,890 --> 00:01:04,379
with cocoa pods how many of you here are

00:01:01,530 --> 00:01:05,970
familiar with cocoa cocoa pods okay so

00:01:04,379 --> 00:01:09,990
some weird a few of you cool so this is

00:01:05,970 --> 00:01:11,520
probably going to be a repeat course for

00:01:09,990 --> 00:01:13,590
you guys but I imagine most of you

00:01:11,520 --> 00:01:17,009
probably haven't used carthage anyone

00:01:13,590 --> 00:01:18,420
here use carthage no cool okay so I'm to

00:01:17,009 --> 00:01:21,030
run through cocoa pods for everyone who

00:01:18,420 --> 00:01:22,920
isn't familiar with it yet so what is

00:01:21,030 --> 00:01:24,869
cocoa pods first off it's a dependency

00:01:22,920 --> 00:01:28,890
manager it'll download install update

00:01:24,869 --> 00:01:30,150
and archive third-party components you

00:01:28,890 --> 00:01:32,009
use in your application and the great

00:01:30,150 --> 00:01:33,689
thing is this is a dependency manager if

00:01:32,009 --> 00:01:34,860
your components have dependencies it'll

00:01:33,689 --> 00:01:37,229
go out and get all this for you like

00:01:34,860 --> 00:01:38,670
most other ones it'll also integrate

00:01:37,229 --> 00:01:40,530
components into your build process so

00:01:38,670 --> 00:01:42,299
with one line it'll configure your Xcode

00:01:40,530 --> 00:01:45,000
project and tie all of these things in

00:01:42,299 --> 00:01:47,399
for you and it'll track licenses which

00:01:45,000 --> 00:01:49,140
is a really undervalued feature i think

00:01:47,399 --> 00:01:50,820
it'll collect all of your open-source

00:01:49,140 --> 00:01:53,729
licenses into one file for you to

00:01:50,820 --> 00:01:55,860
distribute with your executable so what

00:01:53,729 --> 00:01:57,960
is this this is probably a little hard

00:01:55,860 --> 00:02:00,030
to read on the small the screen this is

00:01:57,960 --> 00:02:02,729
a pod file it's where you can define

00:02:00,030 --> 00:02:05,490
your open-source dependencies and I can

00:02:02,729 --> 00:02:07,740
would zoom it in if I could but over

00:02:05,490 --> 00:02:10,470
here you have a pod and you name it and

00:02:07,740 --> 00:02:11,610
cocoa pods is centralized so I can just

00:02:10,470 --> 00:02:12,500
give it the name of the open source

00:02:11,610 --> 00:02:14,150
component I want

00:02:12,500 --> 00:02:16,150
optionally with the version number and

00:02:14,150 --> 00:02:21,140
it will go out find out where it lives

00:02:16,150 --> 00:02:22,640
github svn mercurial really anywhere

00:02:21,140 --> 00:02:24,050
including local file directories and

00:02:22,640 --> 00:02:27,320
pull it into your build process along

00:02:24,050 --> 00:02:29,660
with its dependencies so the contents of

00:02:27,320 --> 00:02:31,820
a pod file you can specify your

00:02:29,660 --> 00:02:33,260
development platform and OS version if

00:02:31,820 --> 00:02:34,970
you would like it to compile using

00:02:33,260 --> 00:02:37,310
frameworks instead of just a static

00:02:34,970 --> 00:02:39,020
library you can do so it is required for

00:02:37,310 --> 00:02:42,110
swift and then you include all of your

00:02:39,020 --> 00:02:43,520
pods and version numbers so the cool

00:02:42,110 --> 00:02:44,750
things you can do extra that I really

00:02:43,520 --> 00:02:46,550
haven't done in this file is you can

00:02:44,750 --> 00:02:47,840
specify the very specific versions of

00:02:46,550 --> 00:02:50,030
your dependencies so if they do a

00:02:47,840 --> 00:02:52,520
breaking change it doesn't break your

00:02:50,030 --> 00:02:55,700
app you can choose a specific repo and

00:02:52,520 --> 00:02:57,440
version dependency which is nice because

00:02:55,700 --> 00:02:59,420
I have Forks of pods that I maintain

00:02:57,440 --> 00:03:01,100
myself that have different features or

00:02:59,420 --> 00:03:03,020
different things that customize and so I

00:03:01,100 --> 00:03:05,510
can still use their pod configuration

00:03:03,020 --> 00:03:06,650
but pointed at my fork of it and it'll

00:03:05,510 --> 00:03:09,680
load it in with all the dependencies

00:03:06,650 --> 00:03:11,180
just like the person who created it you

00:03:09,680 --> 00:03:12,500
can put in pre-install and post install

00:03:11,180 --> 00:03:15,280
scripts or if you'd like to copy files

00:03:12,500 --> 00:03:18,260
or you'd like to modify the automated

00:03:15,280 --> 00:03:19,970
pods project configuration for example

00:03:18,260 --> 00:03:21,410
whatever Xcode 7 came out you had to

00:03:19,970 --> 00:03:23,930
have it disabled bit code on all of your

00:03:21,410 --> 00:03:25,790
targets until all of your frameworks

00:03:23,930 --> 00:03:28,070
were able to support iOS minds bit code

00:03:25,790 --> 00:03:29,930
that's less of a problem now a few weeks

00:03:28,070 --> 00:03:33,140
later but it was great to have that

00:03:29,930 --> 00:03:34,400
ability in your pod file you can also

00:03:33,140 --> 00:03:35,989
specify a local directory if you're

00:03:34,400 --> 00:03:37,340
developing a pod or you just have local

00:03:35,989 --> 00:03:38,540
get repositories you don't want to put

00:03:37,340 --> 00:03:42,019
out public or you don't want to pay for

00:03:38,540 --> 00:03:43,459
a private hosting account and so you can

00:03:42,019 --> 00:03:44,540
do that locally there's a whole lot more

00:03:43,459 --> 00:03:46,400
you can do in your pod file but those

00:03:44,540 --> 00:03:46,970
are really kind of the big ones so I'm

00:03:46,400 --> 00:03:51,410
gonna take you through installing

00:03:46,970 --> 00:03:52,790
cocoapods it's super easy and so it's a

00:03:51,410 --> 00:03:55,100
gem it's a ruby gem so you can just

00:03:52,790 --> 00:03:56,630
install it with gem install it's going

00:03:55,100 --> 00:03:57,739
to go through and now I have cocoa pods

00:03:56,630 --> 00:03:59,570
now this actually takes a lot longer

00:03:57,739 --> 00:04:00,799
real life I have sped up most of the

00:03:59,570 --> 00:04:02,000
little terminal scripts you're going to

00:04:00,799 --> 00:04:04,340
see this actually takes several minutes

00:04:02,000 --> 00:04:06,049
the very first time you do it and then

00:04:04,340 --> 00:04:07,400
after that we're going to take a look at

00:04:06,049 --> 00:04:09,769
a base Xcode project that I've got

00:04:07,400 --> 00:04:12,470
created so I just made one on my desktop

00:04:09,769 --> 00:04:14,329
just called my app and you'll see that

00:04:12,470 --> 00:04:16,160
whenever I list the content it's got a

00:04:14,329 --> 00:04:19,190
folder and an Xcode project a pretty

00:04:16,160 --> 00:04:21,380
basic setup so we're going to create a

00:04:19,190 --> 00:04:24,140
pawn file template and so will run pas

00:04:21,380 --> 00:04:26,120
to knit and pod in it is going to create

00:04:24,140 --> 00:04:27,800
a default template pod file that we

00:04:26,120 --> 00:04:29,270
just saw it's not going to have any

00:04:27,800 --> 00:04:30,979
dependencies yet but it's going to have

00:04:29,270 --> 00:04:33,500
some options and so we can take a look

00:04:30,979 --> 00:04:38,060
at what's inside the pre-configured pod

00:04:33,500 --> 00:04:40,310
file and so right here we have our app

00:04:38,060 --> 00:04:42,470
we have commented out a platform and a

00:04:40,310 --> 00:04:44,090
frameworks option and typically you

00:04:42,470 --> 00:04:46,370
uncomment one or both of those depending

00:04:44,090 --> 00:04:48,139
upon when to what you're doing so I've

00:04:46,370 --> 00:04:49,699
taken the liberty of adding dependencies

00:04:48,139 --> 00:04:52,190
to my pod file which you guys don't see

00:04:49,699 --> 00:04:53,780
because this is a cool video so right

00:04:52,190 --> 00:04:55,160
here I've added some you can see it a

00:04:53,780 --> 00:04:56,900
little bit bigger here and so I've added

00:04:55,160 --> 00:04:59,600
a couple of pods some of them have

00:04:56,900 --> 00:05:01,010
version numbers or specific major

00:04:59,600 --> 00:05:02,510
versions I would like it to keep and

00:05:01,010 --> 00:05:04,729
keep getting bug fixes with a little

00:05:02,510 --> 00:05:07,460
till day arrow and so this is a lot of

00:05:04,729 --> 00:05:09,440
pods these can be pre compiled binaries

00:05:07,460 --> 00:05:10,880
like a lot of Google's they can be

00:05:09,440 --> 00:05:12,919
source code at downloads and builds on

00:05:10,880 --> 00:05:15,010
your machine there can be a lot of

00:05:12,919 --> 00:05:18,460
variety you can even build resource pods

00:05:15,010 --> 00:05:21,110
so now we're going to run pod install

00:05:18,460 --> 00:05:22,789
pod install actually goes out looks up

00:05:21,110 --> 00:05:24,530
your dependencies fetches them clones

00:05:22,789 --> 00:05:25,910
them to your computer builds them puts

00:05:24,530 --> 00:05:27,350
them in dynamic frameworks and that

00:05:25,910 --> 00:05:29,780
generates an Xcode workspace that

00:05:27,350 --> 00:05:31,280
includes your project a pause project

00:05:29,780 --> 00:05:34,400
and links all of them together into a

00:05:31,280 --> 00:05:36,320
framework for you and so this is

00:05:34,400 --> 00:05:37,910
downloading a lot of them again I'm

00:05:36,320 --> 00:05:39,169
going to get through this one because

00:05:37,910 --> 00:05:42,410
this actually takes a few minutes if you

00:05:39,169 --> 00:05:43,700
have big ones and so now it's completed

00:05:42,410 --> 00:05:46,729
so we're going to look and see what

00:05:43,700 --> 00:05:48,349
exactly it just did to my folder so you

00:05:46,729 --> 00:05:50,479
still see I have my app on my xcode

00:05:48,349 --> 00:05:53,210
project but I have a workspace file a

00:05:50,479 --> 00:05:55,099
pod file upon file lock which maintains

00:05:53,210 --> 00:05:56,810
specific pod versions that way if I

00:05:55,099 --> 00:05:58,699
check that into a repository and I want

00:05:56,810 --> 00:06:00,260
to clone it three years from now I'm not

00:05:58,699 --> 00:06:01,880
subject to whatever the current version

00:06:00,260 --> 00:06:03,949
of a library is it's actually locked the

00:06:01,880 --> 00:06:05,750
version for that specific file and

00:06:03,949 --> 00:06:07,220
you'll see my xcode project is still

00:06:05,750 --> 00:06:09,380
there but you can actually can't use it

00:06:07,220 --> 00:06:11,030
anymore you have to use the new Xcode

00:06:09,380 --> 00:06:13,250
workspace it generated with all the pod

00:06:11,030 --> 00:06:15,830
configurations this is actually a pretty

00:06:13,250 --> 00:06:17,060
big point of contention for cocoa pods

00:06:15,830 --> 00:06:18,199
and this is the reason why I was a

00:06:17,060 --> 00:06:21,440
couple of years late on the bandwagon

00:06:18,199 --> 00:06:23,389
because it makes me uncomfortable to let

00:06:21,440 --> 00:06:24,949
automated tools dramatically screw with

00:06:23,389 --> 00:06:26,360
your build environment without telling

00:06:24,949 --> 00:06:27,800
you what all it's doing and letting

00:06:26,360 --> 00:06:29,120
third-party authors define what they

00:06:27,800 --> 00:06:31,729
want to do to your build project and

00:06:29,120 --> 00:06:34,669
then on top of that not giving you an

00:06:31,729 --> 00:06:35,930
automated way to undo it and so that's

00:06:34,669 --> 00:06:37,190
one of the reasons that Carthage was

00:06:35,930 --> 00:06:37,560
created that we'll talk about here in a

00:06:37,190 --> 00:06:40,500
minute

00:06:37,560 --> 00:06:41,160
and so once we get into Xcode I'm taking

00:06:40,500 --> 00:06:42,810
through some of the things that's

00:06:41,160 --> 00:06:44,370
changed because it is quite extensive

00:06:42,810 --> 00:06:45,990
you can see we have a workspace so we

00:06:44,370 --> 00:06:47,910
still have my app but we have this new

00:06:45,990 --> 00:06:51,150
pods project it contains our pod file

00:06:47,910 --> 00:06:53,520
and over in our pods project you can see

00:06:51,150 --> 00:06:57,060
it's generated a dynamic framework for

00:06:53,520 --> 00:06:58,440
all of these and so a couple of them are

00:06:57,060 --> 00:07:00,480
dependencies that it will highlight here

00:06:58,440 --> 00:07:01,860
in a second but all of these are now

00:07:00,480 --> 00:07:04,139
being compiled individual ease

00:07:01,860 --> 00:07:07,260
frameworks linked against my project and

00:07:04,139 --> 00:07:08,400
I can use them and like that one right

00:07:07,260 --> 00:07:10,229
there that is highlight it was a

00:07:08,400 --> 00:07:12,150
dependency of the one below it it's not

00:07:10,229 --> 00:07:14,130
one I explicitly included myself and so

00:07:12,150 --> 00:07:15,450
there is a risk with dependencies you're

00:07:14,130 --> 00:07:16,680
not aware of you need to make sure you

00:07:15,450 --> 00:07:18,750
track your licenses because I've had

00:07:16,680 --> 00:07:21,030
some before they were this awesome MIT

00:07:18,750 --> 00:07:23,220
library they incorporated three GPL

00:07:21,030 --> 00:07:24,270
components so there is a little bit of

00:07:23,220 --> 00:07:26,940
risk into letting people define

00:07:24,270 --> 00:07:29,580
dependencies but be careful down here it

00:07:26,940 --> 00:07:32,100
has linked in the pods framework that

00:07:29,580 --> 00:07:34,080
the project compiles it also makes

00:07:32,100 --> 00:07:36,210
changes to your build settings and so

00:07:34,080 --> 00:07:37,620
over here it actually has a build script

00:07:36,210 --> 00:07:39,360
at a build configuration that pods

00:07:37,620 --> 00:07:41,280
created automatically without asking me

00:07:39,360 --> 00:07:43,620
and it will overwrite anything you have

00:07:41,280 --> 00:07:45,210
here so it's something that's be very

00:07:43,620 --> 00:07:47,310
careful of if you just type the word

00:07:45,210 --> 00:07:49,350
pods and your build settings you'll see

00:07:47,310 --> 00:07:50,820
it's modified a ton of things that

00:07:49,350 --> 00:07:53,190
third-party authors have put into your

00:07:50,820 --> 00:07:55,110
project this is good because it lets

00:07:53,190 --> 00:07:56,430
your pods work it's bad because it

00:07:55,110 --> 00:07:59,160
doesn't tell you what they all are where

00:07:56,430 --> 00:08:01,350
they came from you also see it adds and

00:07:59,160 --> 00:08:03,300
build phases so it can slow down your

00:08:01,350 --> 00:08:05,160
build depending on your machine if you

00:08:03,300 --> 00:08:07,229
run it on a fast enough computer it's

00:08:05,160 --> 00:08:09,000
probably negligible but if you have a

00:08:07,229 --> 00:08:11,039
lot of frameworks as it can result in

00:08:09,000 --> 00:08:12,419
some slower compile times which is

00:08:11,039 --> 00:08:16,080
another thing that carthage aims to

00:08:12,419 --> 00:08:19,650
solve so what are some criticisms of

00:08:16,080 --> 00:08:22,110
cocoa pods well the main things is is

00:08:19,650 --> 00:08:24,750
very very invasive as you just saw it

00:08:22,110 --> 00:08:26,910
modifies a lot of things it doesn't tell

00:08:24,750 --> 00:08:29,010
you how you can't undo it automatically

00:08:26,910 --> 00:08:30,810
and so you're really kind of at the will

00:08:29,010 --> 00:08:33,150
of the authors of the components that

00:08:30,810 --> 00:08:35,580
you've used once integrated it's

00:08:33,150 --> 00:08:37,800
entirely manual to remove it it's very

00:08:35,580 --> 00:08:40,169
complex and breaks between X conversions

00:08:37,800 --> 00:08:42,589
modifying Xcode projects and not being

00:08:40,169 --> 00:08:45,690
Xcode is a very kind of tedious process

00:08:42,589 --> 00:08:47,580
and so what's happened is it use

00:08:45,690 --> 00:08:49,600
settings that didn't work in Xcode 7

00:08:47,580 --> 00:08:51,519
with the new iOS 9 stuff and so you

00:08:49,600 --> 00:08:53,139
to run beta versions of a ton of things

00:08:51,519 --> 00:08:55,899
to get it to even compile your app

00:08:53,139 --> 00:08:58,839
running for iOS 9 until they've managed

00:08:55,899 --> 00:09:00,639
to fix everything and it enforces a

00:08:58,839 --> 00:09:02,709
specific project structure not everyone

00:09:00,639 --> 00:09:04,029
likes using Xcode workspaces not

00:09:02,709 --> 00:09:05,680
everyone's comfortable with the

00:09:04,029 --> 00:09:07,449
organization and the file layout that it

00:09:05,680 --> 00:09:08,709
uses and there's a lot of debate whether

00:09:07,449 --> 00:09:11,050
or not you even want to check in

00:09:08,709 --> 00:09:12,190
dependencies and diversion control and

00:09:11,050 --> 00:09:13,810
so these are kind of some points of

00:09:12,190 --> 00:09:16,120
contention that over the few years that

00:09:13,810 --> 00:09:17,380
cocoapods has been around have been

00:09:16,120 --> 00:09:19,269
tried to be addressed by other

00:09:17,380 --> 00:09:21,490
developers and the most successful of

00:09:19,269 --> 00:09:23,110
which was carthage the whole point of

00:09:21,490 --> 00:09:25,240
Carthage was that it doesn't touch your

00:09:23,110 --> 00:09:26,529
Xcode project in any way it is one

00:09:25,240 --> 00:09:27,779
hundred percent up to you to integrate

00:09:26,529 --> 00:09:29,980
the frameworks at the end of the process

00:09:27,779 --> 00:09:32,170
it doesn't enforce using workspaces

00:09:29,980 --> 00:09:33,639
since it doesn't touch your project it's

00:09:32,170 --> 00:09:35,440
up to you to integrate the frameworks

00:09:33,639 --> 00:09:36,940
like I said it's decentralized so it

00:09:35,440 --> 00:09:39,430
doesn't have a central look up you just

00:09:36,940 --> 00:09:41,170
pointed out a github repository it does

00:09:39,430 --> 00:09:43,509
only work with github and get right now

00:09:41,170 --> 00:09:45,519
so it's not as flexible as cocoa pods in

00:09:43,509 --> 00:09:47,769
that respect and it uses dynamic

00:09:45,519 --> 00:09:49,269
frameworks unlike cocoa pods which will

00:09:47,769 --> 00:09:51,670
eventually compile itself in a static

00:09:49,269 --> 00:09:54,430
framework so it is iOS 8 plus only which

00:09:51,670 --> 00:09:56,860
is fine because I osa it's already you

00:09:54,430 --> 00:09:59,470
know a year old now so so what is this

00:09:56,860 --> 00:10:01,180
well like our pod file we have a cart

00:09:59,470 --> 00:10:03,759
file and it has a lot of the same things

00:10:01,180 --> 00:10:05,199
although it's much much simpler we have

00:10:03,759 --> 00:10:07,060
the source of the component we only

00:10:05,199 --> 00:10:09,579
support github and get we have a version

00:10:07,060 --> 00:10:11,170
number of the component and it can

00:10:09,579 --> 00:10:12,880
support making sure you maintain the

00:10:11,170 --> 00:10:16,060
exact same version or it can look for a

00:10:12,880 --> 00:10:18,279
specific major minor it's allowed as

00:10:16,060 --> 00:10:19,899
with things that break and another Swift

00:10:18,279 --> 00:10:22,329
thing there is a command-line installer

00:10:19,899 --> 00:10:25,180
for Carthage like cocoa pods it doesn't

00:10:22,329 --> 00:10:27,040
work on OS 10 11 because Swift 1.2

00:10:25,180 --> 00:10:29,079
doesn't work on OS 10 11 with your

00:10:27,040 --> 00:10:30,850
modern install of Xcode but you can grab

00:10:29,079 --> 00:10:33,009
the package installer and it takes about

00:10:30,850 --> 00:10:34,449
five seconds this is named it sped up it

00:10:33,009 --> 00:10:37,329
takes five seconds to install Carthage

00:10:34,449 --> 00:10:39,069
and then you're going to go so back at

00:10:37,329 --> 00:10:41,139
our Xcode project I have emptied it out

00:10:39,069 --> 00:10:43,509
and reset it so it's just cleaned Xcode

00:10:41,139 --> 00:10:47,649
project again so we're going to add some

00:10:43,509 --> 00:10:49,740
things to our cart file and once we've

00:10:47,649 --> 00:10:53,019
added it we can take a look and see what

00:10:49,740 --> 00:10:54,370
exactly is in it so there's a lot less

00:10:53,019 --> 00:10:56,350
things that support Carthage as you saw

00:10:54,370 --> 00:10:57,610
from the giant list that I had in the

00:10:56,350 --> 00:11:01,209
pod file these are the ones that

00:10:57,610 --> 00:11:03,130
actually worked in carthage so we've got

00:11:01,209 --> 00:11:04,900
that so next

00:11:03,130 --> 00:11:08,770
install Carthage and download some out

00:11:04,900 --> 00:11:10,480
dependencies so just like we had pod

00:11:08,770 --> 00:11:13,240
install car that has an equivalent

00:11:10,480 --> 00:11:16,330
command unlike cocoapods this will

00:11:13,240 --> 00:11:18,700
actually check out clone compile and

00:11:16,330 --> 00:11:21,250
build frameworks in this step so you

00:11:18,700 --> 00:11:22,870
only do that once unlike cocoa pods that

00:11:21,250 --> 00:11:25,060
does it whenever xcode feels like it

00:11:22,870 --> 00:11:26,680
wants a fresh build of things so this

00:11:25,060 --> 00:11:28,210
actually takes several minutes I have

00:11:26,680 --> 00:11:29,860
sped this up substantially and chopped

00:11:28,210 --> 00:11:32,890
off a couple of parts of it this took

00:11:29,860 --> 00:11:36,790
about five minutes on a 2014 imac with

00:11:32,890 --> 00:11:37,960
an i7 in it so it's pretty slow but you

00:11:36,790 --> 00:11:40,960
only have to do it once so it's really

00:11:37,960 --> 00:11:42,220
fast at build time so let's see what

00:11:40,960 --> 00:11:44,380
carthage did now i pulled it up in

00:11:42,220 --> 00:11:47,800
finder which again probably a little bit

00:11:44,380 --> 00:11:49,180
hard to read in the back to see what it

00:11:47,800 --> 00:11:52,240
did it's much easier to look at and

00:11:49,180 --> 00:11:54,850
finder than terminal for this so we have

00:11:52,240 --> 00:11:56,170
a carthage resolved file which is it

00:11:54,850 --> 00:11:58,720
went out and found the current versions

00:11:56,170 --> 00:12:00,250
if you didn't specify of what exactly it

00:11:58,720 --> 00:12:01,780
found that way you have a lock file just

00:12:00,250 --> 00:12:03,460
like cocoapods so you check that into

00:12:01,780 --> 00:12:05,290
your repo and if you ever have to do

00:12:03,460 --> 00:12:06,850
this again six months down the road for

00:12:05,290 --> 00:12:08,560
this version you have the exact ones

00:12:06,850 --> 00:12:11,260
that you built you built and not an

00:12:08,560 --> 00:12:14,290
unknown current version number we also

00:12:11,260 --> 00:12:15,400
have the build where we have got all of

00:12:14,290 --> 00:12:18,220
our frameworks that are already compiled

00:12:15,400 --> 00:12:19,630
for us and so the great thing is they're

00:12:18,220 --> 00:12:22,000
already compiled I can drag them into

00:12:19,630 --> 00:12:23,740
any kind of build process and means it's

00:12:22,000 --> 00:12:25,450
not slower to compile it doesn't need

00:12:23,740 --> 00:12:27,880
extra project settings it doesn't need

00:12:25,450 --> 00:12:32,170
really anything I can integrate them as

00:12:27,880 --> 00:12:34,000
I see fit and it very fast so here's all

00:12:32,170 --> 00:12:36,250
it is to really integrate carthage

00:12:34,000 --> 00:12:39,160
frameworks i go into my carthage build

00:12:36,250 --> 00:12:42,520
folder i'm going to select all the

00:12:39,160 --> 00:12:43,990
frameworks so I think there's six here I

00:12:42,520 --> 00:12:46,330
don't remember the exact number two

00:12:43,990 --> 00:12:48,880
maybe seven then I'm going to go over to

00:12:46,330 --> 00:12:50,770
Xcode I'm going to go to my project and

00:12:48,880 --> 00:12:53,200
then I'm going to go down here to where

00:12:50,770 --> 00:12:55,180
your framework dependencies are drag

00:12:53,200 --> 00:12:58,030
them in there and then you can run it

00:12:55,180 --> 00:12:59,950
and they're all there so super easy to

00:12:58,030 --> 00:13:01,420
add but you do have to manually now this

00:12:59,950 --> 00:13:03,550
app right now will actually crash if I

00:13:01,420 --> 00:13:05,110
were to actually run it because unlike

00:13:03,550 --> 00:13:06,910
cocoapods you have to be very very

00:13:05,110 --> 00:13:08,650
careful that you've also linked against

00:13:06,910 --> 00:13:11,140
system frameworks that your frameworks

00:13:08,650 --> 00:13:12,120
use for example this isn't linked

00:13:11,140 --> 00:13:15,930
against

00:13:12,120 --> 00:13:17,550
at the moment uikit foundation security

00:13:15,930 --> 00:13:19,620
and a whole handful of other ones that

00:13:17,550 --> 00:13:22,650
this thing uses so you have to be very

00:13:19,620 --> 00:13:24,150
careful in a less automated process so

00:13:22,650 --> 00:13:25,860
the next thing is let's explore some

00:13:24,150 --> 00:13:28,080
cocoa pods so we've seen two great ways

00:13:25,860 --> 00:13:29,130
to add some things to your project I'm

00:13:28,080 --> 00:13:30,900
going to be focusing on things with

00:13:29,130 --> 00:13:33,810
cocoa pods because it's a lot more

00:13:30,900 --> 00:13:35,250
dominant than Carthage however many of

00:13:33,810 --> 00:13:37,200
these actually most of these do work

00:13:35,250 --> 00:13:38,880
with Carthage as well so the ones I'm

00:13:37,200 --> 00:13:42,270
going to be going through our swifty

00:13:38,880 --> 00:13:43,860
JSON keychain access Alamo fire with

00:13:42,270 --> 00:13:47,070
kind of afnetworking if you're doing

00:13:43,860 --> 00:13:48,750
objective c jl routes object mapper and

00:13:47,070 --> 00:13:49,980
just a few useful categories that I

00:13:48,750 --> 00:13:53,520
think ads and things that should have

00:13:49,980 --> 00:13:56,550
been in foundation in the first place so

00:13:53,520 --> 00:13:59,250
first thing is swifty JSON and again

00:13:56,550 --> 00:14:02,130
this is probably a little hard to see so

00:13:59,250 --> 00:14:04,380
if you are familiar with Swift it's very

00:14:02,130 --> 00:14:05,730
specific about its typing it doesn't

00:14:04,380 --> 00:14:07,350
like optionals going places they're not

00:14:05,730 --> 00:14:09,720
supposed to be it doesn't like unknown

00:14:07,350 --> 00:14:12,600
types it doesn't like any kind of not

00:14:09,720 --> 00:14:15,180
knowing as a result it's really verbose

00:14:12,600 --> 00:14:17,550
to let's say traverse a JSON structure

00:14:15,180 --> 00:14:19,380
and pull out something and then convince

00:14:17,550 --> 00:14:21,420
Swift to accept it as a string and if it

00:14:19,380 --> 00:14:23,820
fails you're just kind of out at any

00:14:21,420 --> 00:14:25,980
step of this process so what swifty JSON

00:14:23,820 --> 00:14:27,990
does is it provides a syntax very

00:14:25,980 --> 00:14:29,610
similar to NS dictionaries literal

00:14:27,990 --> 00:14:31,320
syntax where you can just kind of

00:14:29,610 --> 00:14:33,000
bracket address with a name and so you

00:14:31,320 --> 00:14:34,589
can just go down keys and then tell it

00:14:33,000 --> 00:14:35,880
what type you want and it'll coerce it

00:14:34,589 --> 00:14:37,529
to the right type if possible and

00:14:35,880 --> 00:14:39,630
provide it to you so that Swift accepts

00:14:37,529 --> 00:14:41,910
it if it doesn't it provides nil so it

00:14:39,630 --> 00:14:45,120
isn't optional but it's a lot shorter

00:14:41,910 --> 00:14:47,459
syntax it's two lines versus five or six

00:14:45,120 --> 00:14:49,529
lines it still uses in s JSON

00:14:47,459 --> 00:14:51,320
serialization internally so you still

00:14:49,529 --> 00:14:54,690
get the great JSON parsing that

00:14:51,320 --> 00:14:57,420
foundation provides the next one is

00:14:54,690 --> 00:15:01,200
keychain access I'm not sure if anyone

00:14:57,420 --> 00:15:03,600
has tried to do keychain by hand anyone

00:15:01,200 --> 00:15:05,250
anyone all right so you're probably

00:15:03,600 --> 00:15:08,310
familiar with the unpleasant experience

00:15:05,250 --> 00:15:09,600
that is key chain so I didn't put it up

00:15:08,310 --> 00:15:11,520
here i put a one-line little comment

00:15:09,600 --> 00:15:13,620
it's way too long and verbose and full

00:15:11,520 --> 00:15:16,650
of objective-c to see bridging and even

00:15:13,620 --> 00:15:18,300
worse and Swift to even write up here

00:15:16,650 --> 00:15:20,400
it's way too long and so the cool thing

00:15:18,300 --> 00:15:23,220
is this library and there's several like

00:15:20,400 --> 00:15:25,589
it makes it to where keychain works like

00:15:23,220 --> 00:15:25,830
a dictionary you just put whatever your

00:15:25,589 --> 00:15:28,830
key

00:15:25,830 --> 00:15:30,330
is and a literal and then you can just

00:15:28,830 --> 00:15:32,250
assign values to it and read values to

00:15:30,330 --> 00:15:35,130
it it makes keeping your app secure so

00:15:32,250 --> 00:15:36,660
easy that there is 0 reason not to have

00:15:35,130 --> 00:15:39,300
everything you do in your app pretty

00:15:36,660 --> 00:15:40,740
well encrypted at this point and it has

00:15:39,300 --> 00:15:42,330
a lot of other things it also supports

00:15:40,740 --> 00:15:44,910
touch ID so it gives you a very easy

00:15:42,330 --> 00:15:46,920
interface to touch ID versus the more

00:15:44,910 --> 00:15:50,310
verbose one that the sea-based keychain

00:15:46,920 --> 00:15:53,910
API provides you next up we have Alamo

00:15:50,310 --> 00:15:55,520
fire if you've done much iOS development

00:15:53,910 --> 00:15:57,720
you've probably encountered afnetworking

00:15:55,520 --> 00:16:01,290
Alamo fire is the successor to

00:15:57,720 --> 00:16:02,370
afnetworking written and Swift depending

00:16:01,290 --> 00:16:04,740
on the project I usually use

00:16:02,370 --> 00:16:06,390
afnetworking or Alamo fire if I'm going

00:16:04,740 --> 00:16:09,030
to bring in a third party networking

00:16:06,390 --> 00:16:10,740
library a lot of times I don't I stick

00:16:09,030 --> 00:16:13,260
with nsurl session unless I just need a

00:16:10,740 --> 00:16:14,580
special special behavior but it does

00:16:13,260 --> 00:16:16,140
shorten a lot of things because without

00:16:14,580 --> 00:16:17,430
Colin will fire you have all this

00:16:16,140 --> 00:16:19,110
because all the error checking is mostly

00:16:17,430 --> 00:16:20,460
up to you and with Allen will fire you

00:16:19,110 --> 00:16:23,190
can have it just validate things for you

00:16:20,460 --> 00:16:24,750
in a couple of lines really great the

00:16:23,190 --> 00:16:26,070
biggest benefits that I find to it

00:16:24,750 --> 00:16:29,070
because I don't really necessarily mind

00:16:26,070 --> 00:16:31,410
the velocity of without it is that

00:16:29,070 --> 00:16:35,340
rather than doing delegate callbacks for

00:16:31,410 --> 00:16:37,650
progress and uploads it provides to use

00:16:35,340 --> 00:16:39,540
block and who doesn't love blocks so it

00:16:37,650 --> 00:16:42,180
provides a lot of convenience methods

00:16:39,540 --> 00:16:43,650
that nsurl session doesn't it's easier

00:16:42,180 --> 00:16:45,330
to do certificate pinning so you keep

00:16:43,650 --> 00:16:47,640
your app secure so you can't have men on

00:16:45,330 --> 00:16:49,320
the middle attacks is easily and then it

00:16:47,640 --> 00:16:50,940
can automatically encode get post

00:16:49,320 --> 00:16:54,120
parameters which if you've ever had to

00:16:50,940 --> 00:16:56,990
use nsurlconnection or in s URL session

00:16:54,120 --> 00:16:59,880
with forum parameters on post requests

00:16:56,990 --> 00:17:02,430
if you've never written a manual HTTP

00:16:59,880 --> 00:17:03,690
body creator i'd say try it some time

00:17:02,430 --> 00:17:06,870
and then be thankful for networking

00:17:03,690 --> 00:17:08,430
libraries because it's not fun and those

00:17:06,870 --> 00:17:11,910
are some great utilities that alamo fire

00:17:08,430 --> 00:17:14,130
kind of provides to you for free the

00:17:11,910 --> 00:17:16,980
next two are some of my favorites Jael

00:17:14,130 --> 00:17:18,570
routes so now in iOS 9 we have universal

00:17:16,980 --> 00:17:20,670
linking to where you don't have to use

00:17:18,570 --> 00:17:22,380
these crazy URL schemes anymore to open

00:17:20,670 --> 00:17:25,020
your app you can actually just pick up

00:17:22,380 --> 00:17:27,060
links to your website for example if you

00:17:25,020 --> 00:17:28,410
were go to facebook.com slash a profile

00:17:27,060 --> 00:17:30,510
the facebook app could actually pick

00:17:28,410 --> 00:17:33,770
that up see the profile read the URL

00:17:30,510 --> 00:17:37,050
loaded up for you it's awesome however

00:17:33,770 --> 00:17:39,919
it's been a little difficult in the past

00:17:37,050 --> 00:17:42,179
to parse URI strings

00:17:39,919 --> 00:17:44,239
because obviously you have to deal with

00:17:42,179 --> 00:17:46,169
URI compliance you have to deal with

00:17:44,239 --> 00:17:48,720
validating whether or not you fit use

00:17:46,169 --> 00:17:50,549
cases dealing with templating when you

00:17:48,720 --> 00:17:52,919
shouldn't shouldn't accept your eyes

00:17:50,549 --> 00:17:55,320
jail routes makes this easy by allowing

00:17:52,919 --> 00:17:57,739
me to define a block with a supported

00:17:55,320 --> 00:18:01,019
URI and over here you can specify

00:17:57,739 --> 00:18:02,700
variables so like I've taken three of

00:18:01,019 --> 00:18:04,889
these URL routes and called one of them

00:18:02,700 --> 00:18:06,840
object one action in one primary key and

00:18:04,889 --> 00:18:08,759
it will auto let you pull these out of a

00:18:06,840 --> 00:18:11,669
dictionary so it parses the URL sees if

00:18:08,759 --> 00:18:13,970
it matches really nice and so if I have

00:18:11,669 --> 00:18:16,679
a URL down here like for a marketplace I

00:18:13,970 --> 00:18:18,299
can see if it matches each of these pull

00:18:16,679 --> 00:18:20,759
all of these out in two variables and

00:18:18,299 --> 00:18:23,009
then take them to that spot in my app

00:18:20,759 --> 00:18:24,809
it's really convenient for users because

00:18:23,009 --> 00:18:25,919
no more of this like press button to

00:18:24,809 --> 00:18:27,210
open something no more of getting

00:18:25,919 --> 00:18:28,649
bounced to apps you didn't attend

00:18:27,210 --> 00:18:32,309
because everyone declares the Twitter

00:18:28,649 --> 00:18:34,529
URL scheme and this also works great for

00:18:32,309 --> 00:18:36,419
push notifications if you include just

00:18:34,529 --> 00:18:38,669
the URL the web URL that your server

00:18:36,419 --> 00:18:40,080
generates in your push notification you

00:18:38,669 --> 00:18:42,720
can pass this through your routing

00:18:40,080 --> 00:18:44,100
library and then go right to where you

00:18:42,720 --> 00:18:45,659
want it in your app and there are a lot

00:18:44,100 --> 00:18:47,369
of apps that use the lazy notification

00:18:45,659 --> 00:18:49,409
way and I've been guilty in the past of

00:18:47,369 --> 00:18:50,489
doing it as well there's really no

00:18:49,409 --> 00:18:52,350
excuse anymore we have some great

00:18:50,489 --> 00:18:55,619
routing libraries finally an iOS and we

00:18:52,350 --> 00:18:58,169
have a full support for universal links

00:18:55,619 --> 00:18:59,580
and with things like this we can make

00:18:58,169 --> 00:19:01,649
app experience is really great when it

00:18:59,580 --> 00:19:04,739
comes to linking directly into deep

00:19:01,649 --> 00:19:06,840
deeper parts of your app so my absolute

00:19:04,739 --> 00:19:08,249
favorite one is object mapper and most

00:19:06,840 --> 00:19:10,289
of the ones i've mentioned work in

00:19:08,249 --> 00:19:11,789
objective-c your Swift i'm not sure this

00:19:10,289 --> 00:19:15,480
one works in objective-c because it

00:19:11,789 --> 00:19:17,399
creates custom operators but it's really

00:19:15,480 --> 00:19:20,759
cool so over here on the Left we have

00:19:17,399 --> 00:19:22,440
your typical deserialization file into

00:19:20,759 --> 00:19:23,940
an object model for example if you're

00:19:22,440 --> 00:19:26,789
pulling down JSON from a server you

00:19:23,940 --> 00:19:28,559
deserialize it into a data model like a

00:19:26,789 --> 00:19:31,409
lot of people this one was auto

00:19:28,559 --> 00:19:33,149
generated by I believe that one was JSON

00:19:31,409 --> 00:19:35,220
accelerator some people use objectify

00:19:33,149 --> 00:19:36,690
and if you have a massive API you can

00:19:35,220 --> 00:19:39,239
run into dozens and dozens of these

00:19:36,690 --> 00:19:40,950
things this entire file which I'll show

00:19:39,239 --> 00:19:46,139
you in a second is actually way longer

00:19:40,950 --> 00:19:47,850
than this with all the safety checks and

00:19:46,139 --> 00:19:49,769
everything to do this by hand which is

00:19:47,850 --> 00:19:51,990
faster than some key value methods you

00:19:49,769 --> 00:19:52,710
can use with frameworks can be minimized

00:19:51,990 --> 00:19:55,559
into the

00:19:52,710 --> 00:19:57,450
it's very very short includes all the

00:19:55,559 --> 00:19:59,520
safety checking and even better than

00:19:57,450 --> 00:20:02,190
that this one over here doesn't parse

00:19:59,520 --> 00:20:04,169
dates and it doesn't parse URLs and turn

00:20:02,190 --> 00:20:06,510
them into NS URLs in the states over

00:20:04,169 --> 00:20:08,250
here I add one little parameter to this

00:20:06,510 --> 00:20:09,929
and it'll convert it to an NS date from

00:20:08,250 --> 00:20:12,059
an epoch timestamp that will convert it

00:20:09,929 --> 00:20:13,649
to an nsurl if it's a valid URL and

00:20:12,059 --> 00:20:15,299
there are all kinds of other goodies it

00:20:13,649 --> 00:20:16,559
can parse all the way down a chain it

00:20:15,299 --> 00:20:20,220
can do a raise of your custom data

00:20:16,559 --> 00:20:21,390
models and it can do structs it can do

00:20:20,220 --> 00:20:23,159
just about anything you throw at it and

00:20:21,390 --> 00:20:24,419
it's very very actively maintained so

00:20:23,159 --> 00:20:27,029
there's all kinds of new features being

00:20:24,419 --> 00:20:29,399
added but again when you compare it to

00:20:27,029 --> 00:20:31,320
the actual way to do this with all the

00:20:29,399 --> 00:20:35,870
safety checks for encoding these objects

00:20:31,320 --> 00:20:35,870
and decoding them it's much much shorter

00:20:35,990 --> 00:20:39,539
so a couple of quick categories that

00:20:38,100 --> 00:20:42,029
really add some things I think should

00:20:39,539 --> 00:20:44,700
have been in foundation to begin with in

00:20:42,029 --> 00:20:47,610
as timer blocks super tiny I think it's

00:20:44,700 --> 00:20:49,440
like a 12 line category it adds block

00:20:47,610 --> 00:20:51,510
support to NS timer so you don't have to

00:20:49,440 --> 00:20:53,940
make in s time or call a method you just

00:20:51,510 --> 00:20:55,860
in US timer scheduled timer with block

00:20:53,940 --> 00:21:00,330
put your code in the block until it if

00:20:55,860 --> 00:21:04,020
it should repeat easy the next one is UI

00:21:00,330 --> 00:21:06,000
image resize magic because we get a lot

00:21:04,020 --> 00:21:07,860
of image asset resources sometimes

00:21:06,000 --> 00:21:09,270
hundreds in a project you can't always

00:21:07,860 --> 00:21:11,309
get the perfect size for the perfect

00:21:09,270 --> 00:21:13,169
device and so you end up resizing them

00:21:11,309 --> 00:21:14,820
or scaling them or doing weird things to

00:21:13,169 --> 00:21:17,130
them especially if you have to crop them

00:21:14,820 --> 00:21:19,880
what this does is it provides a very

00:21:17,130 --> 00:21:22,260
very easy one line way to resize images

00:21:19,880 --> 00:21:24,210
it's no faster than if you were to do it

00:21:22,260 --> 00:21:26,580
yourself but it's a lot less verbose and

00:21:24,210 --> 00:21:28,649
it supports respecting aspect ratio it

00:21:26,580 --> 00:21:30,809
supports distorting on transforms is

00:21:28,649 --> 00:21:33,600
support scaling to a max width or matts

00:21:30,809 --> 00:21:35,309
max hi all with one line versus I would

00:21:33,600 --> 00:21:37,169
have to do math myself which I didn't

00:21:35,309 --> 00:21:38,429
hear as well as deal with all the

00:21:37,169 --> 00:21:40,350
graphics context and pulling it out

00:21:38,429 --> 00:21:41,549
whereas down here I have one line to

00:21:40,350 --> 00:21:45,110
pull my image and it the size i'm

00:21:41,549 --> 00:21:47,309
wanting to use it at it doesn't respect

00:21:45,110 --> 00:21:49,559
screen DPI so you do have to deal with

00:21:47,309 --> 00:21:52,529
that part yourself but it's still really

00:21:49,559 --> 00:21:54,840
nice as a little convenience method so

00:21:52,529 --> 00:21:58,350
next one is in us date extensions for

00:21:54,840 --> 00:22:00,090
iOS 7 this is originally based off of in

00:21:58,350 --> 00:22:01,799
estate extensions provided by Erika

00:22:00,090 --> 00:22:03,809
student as part of her Iowa 6 cookbook

00:22:01,799 --> 00:22:04,960
but to go with some iOS 7 compatibility

00:22:03,809 --> 00:22:07,779
someone has done

00:22:04,960 --> 00:22:09,279
variant of it that I like to use it adds

00:22:07,779 --> 00:22:11,200
a bunch of convenience things like is

00:22:09,279 --> 00:22:13,000
this date today is this date this week

00:22:11,200 --> 00:22:16,000
is this date the same week is that week

00:22:13,000 --> 00:22:19,270
is it you know XYZ it just answers date

00:22:16,000 --> 00:22:20,470
questions and so anything you want to do

00:22:19,270 --> 00:22:21,940
with dates you could of course do it

00:22:20,470 --> 00:22:23,740
yourself pull it out into calendar

00:22:21,940 --> 00:22:25,570
components compare numbers compare years

00:22:23,740 --> 00:22:29,110
compared all sorts of things to see if

00:22:25,570 --> 00:22:30,730
it's correct or you can just say is the

00:22:29,110 --> 00:22:33,730
same week as the state and it will

00:22:30,730 --> 00:22:36,190
answer for you so the next thing is to

00:22:33,730 --> 00:22:38,919
talk about the problem Swift and this

00:22:36,190 --> 00:22:42,490
isn't necessarily a criticism of

00:22:38,919 --> 00:22:43,990
language it's more of we've there's been

00:22:42,490 --> 00:22:45,820
a trend going on in the open source

00:22:43,990 --> 00:22:48,070
world of everyone jumping on the Swift

00:22:45,820 --> 00:22:50,740
bandwagon which is fine a lot of people

00:22:48,070 --> 00:22:52,929
like Swift is perfectly fine however if

00:22:50,740 --> 00:22:54,880
you've noticed following swift swift

00:22:52,929 --> 00:22:58,750
code written in April doesn't compile

00:22:54,880 --> 00:23:02,649
today in all and so it's led to kind of

00:22:58,750 --> 00:23:04,690
a kind of a graveyard of code graveyard

00:23:02,649 --> 00:23:07,539
of tutorials of sample code of open

00:23:04,690 --> 00:23:10,929
source libraries of developer tools of

00:23:07,539 --> 00:23:13,029
plugins of a lot of things and so people

00:23:10,929 --> 00:23:14,590
are running in issues like I mentioned

00:23:13,029 --> 00:23:16,600
with installing Carthage where they

00:23:14,590 --> 00:23:18,190
wrote it and Swift 1.2 and then they try

00:23:16,600 --> 00:23:21,010
to clone it and compile it an installed

00:23:18,190 --> 00:23:23,380
on your system and it fails or i'm using

00:23:21,010 --> 00:23:25,809
15 open-source libraries one of them was

00:23:23,380 --> 00:23:28,120
written as Swift 12 and now i can't work

00:23:25,809 --> 00:23:30,760
on xcode 7 or iOS 9 until that one

00:23:28,120 --> 00:23:33,220
developer fixes it or i have to fix it

00:23:30,760 --> 00:23:35,590
myself so depending on how complex of a

00:23:33,220 --> 00:23:36,820
library like for example if Alamo fire

00:23:35,590 --> 00:23:38,860
had decided they weren't going to

00:23:36,820 --> 00:23:41,169
upgrade to Xcode seven until it came out

00:23:38,860 --> 00:23:42,460
this fall my entire app would be held

00:23:41,169 --> 00:23:43,720
hostage by the developer that was

00:23:42,460 --> 00:23:46,270
maintaining it because they didn't want

00:23:43,720 --> 00:23:49,510
to upgrade it Swift too and I can't

00:23:46,270 --> 00:23:52,270
compile Swift 1.2 with Xcode 7 and so

00:23:49,510 --> 00:23:54,580
there's becoming a very real problem of

00:23:52,270 --> 00:23:56,380
people are incorporating libraries left

00:23:54,580 --> 00:23:58,929
and right often was swift and not

00:23:56,380 --> 00:24:00,549
realizing you need to one make sure you

00:23:58,929 --> 00:24:02,559
trust the maintainer to maintain it for

00:24:00,549 --> 00:24:05,140
you make sure you understand it well

00:24:02,559 --> 00:24:07,419
enough to have to fix it yourself and

00:24:05,140 --> 00:24:09,520
three that there is a very real chance

00:24:07,419 --> 00:24:11,559
the persons not going to update it until

00:24:09,520 --> 00:24:13,389
two days before iOS 9 comes out and your

00:24:11,559 --> 00:24:16,419
app is going to fall apart and there's

00:24:13,389 --> 00:24:18,400
nothing you can do about it and so this

00:24:16,419 --> 00:24:20,440
is more of just a word of warning

00:24:18,400 --> 00:24:22,090
that if you're going to include open

00:24:20,440 --> 00:24:23,710
source components that has a language

00:24:22,090 --> 00:24:26,140
but they kind of constantly changing

00:24:23,710 --> 00:24:28,900
syntax a lot of open source code a lot

00:24:26,140 --> 00:24:31,210
of things that won't compile you need to

00:24:28,900 --> 00:24:34,090
be very very very careful using Swift

00:24:31,210 --> 00:24:36,790
components at this point in time because

00:24:34,090 --> 00:24:38,950
you can't compile older code in newer

00:24:36,790 --> 00:24:42,040
versions of Xcode there's not even a

00:24:38,950 --> 00:24:45,570
compatibility mode for it so just a word

00:24:42,040 --> 00:24:47,380
of warning the next one is Xcode plugins

00:24:45,570 --> 00:24:49,870
developing an Xcode is a great

00:24:47,380 --> 00:24:51,190
experience unless you've had Xcode crash

00:24:49,870 --> 00:24:54,100
on you which I'm assuming everyone who's

00:24:51,190 --> 00:24:56,020
open Xcode is head xcode crash on you a

00:24:54,100 --> 00:24:57,970
lot of crashes can be attributed to

00:24:56,020 --> 00:25:00,370
plugins and it warns you about them now

00:24:57,970 --> 00:25:02,980
but my opinion a lot of them kind of

00:25:00,370 --> 00:25:05,380
outweigh some of the risks they add so

00:25:02,980 --> 00:25:07,900
Alcatraz is an open source package

00:25:05,380 --> 00:25:09,730
management system for xcode and so it'll

00:25:07,900 --> 00:25:11,320
download and install code bundles into

00:25:09,730 --> 00:25:13,180
Xcode that you can use to make your

00:25:11,320 --> 00:25:16,090
development experience better so

00:25:13,180 --> 00:25:19,150
installing Alcatraz is super easy you go

00:25:16,090 --> 00:25:20,410
to github you copy the command line

00:25:19,150 --> 00:25:21,850
script you have no idea where it came

00:25:20,410 --> 00:25:23,200
from and what's on the other end you

00:25:21,850 --> 00:25:25,360
paste it in terminal and what's the

00:25:23,200 --> 00:25:27,100
worst that could happen so it's going to

00:25:25,360 --> 00:25:28,300
install Alcatraz in this case which is

00:25:27,100 --> 00:25:31,180
super quick that was actually a real

00:25:28,300 --> 00:25:35,140
time and then once it's done you can

00:25:31,180 --> 00:25:36,250
open it and there are tons of these I

00:25:35,140 --> 00:25:37,390
don't know about hundreds but it sure

00:25:36,250 --> 00:25:38,590
feels like hundreds when you scroll

00:25:37,390 --> 00:25:41,020
through them of things people have

00:25:38,590 --> 00:25:42,100
written to enhance Xcode and so I'm

00:25:41,020 --> 00:25:44,830
going to take you through a few of the

00:25:42,100 --> 00:25:47,590
ones that I really like that save me a

00:25:44,830 --> 00:25:50,500
lot of time the first one is vivi

00:25:47,590 --> 00:25:52,090
documenter this is a method it's got a

00:25:50,500 --> 00:25:54,490
lot of parameters you want to document

00:25:52,090 --> 00:25:56,170
this so that you have documentation your

00:25:54,490 --> 00:25:58,960
auto suggestion or if you run apple dock

00:25:56,170 --> 00:26:01,360
or a number of other documentation tools

00:25:58,960 --> 00:26:03,700
you have h pretty HTML documentation and

00:26:01,360 --> 00:26:06,490
code so what this does is I click on it

00:26:03,700 --> 00:26:09,250
I type 3 forward slashes and suddenly at

00:26:06,490 --> 00:26:10,840
Auto expands with tab completion for all

00:26:09,250 --> 00:26:13,330
the places you need to actually add into

00:26:10,840 --> 00:26:15,310
your comment again it's not something

00:26:13,330 --> 00:26:18,490
you couldn't do on your own but sure

00:26:15,310 --> 00:26:20,050
makes life easier and then the next one

00:26:18,490 --> 00:26:22,270
is that you're going to use cocoa pause

00:26:20,050 --> 00:26:24,190
there is an Xcode plugin for it and so

00:26:22,270 --> 00:26:26,170
it adds something up into your product

00:26:24,190 --> 00:26:28,300
menu go to product cocoa pause and you

00:26:26,170 --> 00:26:31,120
can install pods update them do whatever

00:26:28,300 --> 00:26:33,540
you want to do and it'll run for you

00:26:31,120 --> 00:26:36,670
the third and last one is a white box

00:26:33,540 --> 00:26:39,010
not really so people like Dan and other

00:26:36,670 --> 00:26:40,780
image oriented people like to give me a

00:26:39,010 --> 00:26:42,250
lot of image assets and so I have

00:26:40,780 --> 00:26:44,559
projects that have hundreds of image

00:26:42,250 --> 00:26:46,840
assets in them and if you've noticed

00:26:44,559 --> 00:26:49,030
Xcode doesn't auto complete image names

00:26:46,840 --> 00:26:51,640
their strings you have to go and look

00:26:49,030 --> 00:26:53,620
them up in your asset catalog so what

00:26:51,640 --> 00:26:55,420
this does is it indexes your asset

00:26:53,620 --> 00:26:57,670
catalog and adds them to X codes

00:26:55,420 --> 00:27:00,520
autocomplete which is the greatest thing

00:26:57,670 --> 00:27:01,870
ever so I can see here I can pick the

00:27:00,520 --> 00:27:03,940
one I want and I've got it and even see

00:27:01,870 --> 00:27:05,710
a preview and whenever you have hundreds

00:27:03,940 --> 00:27:07,630
of assets in all kinds of selection

00:27:05,710 --> 00:27:09,910
states or animations it's really great

00:27:07,630 --> 00:27:12,670
to find the right one without going to

00:27:09,910 --> 00:27:14,710
look it up and so this is the point

00:27:12,670 --> 00:27:17,020
which I'm going to touch briefly on fast

00:27:14,710 --> 00:27:19,480
lane fast lane is really really large

00:27:17,020 --> 00:27:21,429
and complicated but I'm going to touch

00:27:19,480 --> 00:27:23,440
on a couple of them of the aspects I'd

00:27:21,429 --> 00:27:25,420
like to kinda just make sure people are

00:27:23,440 --> 00:27:27,190
aware of fast lane is an automated

00:27:25,420 --> 00:27:29,230
deployment tool I can control build

00:27:27,190 --> 00:27:32,140
pipelines it can control distribution it

00:27:29,230 --> 00:27:33,640
can control provisioning it can even

00:27:32,140 --> 00:27:36,460
control itunes connect and test flight

00:27:33,640 --> 00:27:38,350
it's a really really neat set of tools

00:27:36,460 --> 00:27:41,410
and I've got three highlighted here that

00:27:38,350 --> 00:27:44,890
I'm going to touch on that are great but

00:27:41,410 --> 00:27:46,900
all of them are worth checking out so

00:27:44,890 --> 00:27:48,610
the first one is sigh so those of you

00:27:46,900 --> 00:27:51,460
who are iOS developers I assume you have

00:27:48,610 --> 00:27:52,900
worked with the wonderful experience of

00:27:51,460 --> 00:27:54,730
doing certificates and provisioning and

00:27:52,900 --> 00:27:56,050
if you've ever done more than one

00:27:54,730 --> 00:27:58,690
developer account on your computer like

00:27:56,050 --> 00:28:00,160
I think I have 12 or 13 Xcode just likes

00:27:58,690 --> 00:28:01,870
to break things it just determines

00:28:00,160 --> 00:28:03,400
periodically I don't like what's going

00:28:01,870 --> 00:28:05,860
on and then just wipes out things

00:28:03,400 --> 00:28:10,390
without asking you the whole point of

00:28:05,860 --> 00:28:12,460
sai is to fix that I can just type sigh

00:28:10,390 --> 00:28:14,200
and it will go into egg will log into

00:28:12,460 --> 00:28:15,820
apples developer center fix all of my

00:28:14,200 --> 00:28:17,920
certificates fix all of my provisioning

00:28:15,820 --> 00:28:19,300
profiles and get everything back to the

00:28:17,920 --> 00:28:22,210
way it should be and then delete all of

00:28:19,300 --> 00:28:23,710
xcode mess off my computer I can also

00:28:22,210 --> 00:28:25,510
delete expired profiles expire

00:28:23,710 --> 00:28:27,760
certificates a lot of things like that

00:28:25,510 --> 00:28:29,050
and the developer named it after kind of

00:28:27,760 --> 00:28:31,030
the feeling you get whenever you wake up

00:28:29,050 --> 00:28:34,270
and realize Xcode has just screwed over

00:28:31,030 --> 00:28:36,940
my entire development code signing setup

00:28:34,270 --> 00:28:38,890
and so you can just type sigh log into

00:28:36,940 --> 00:28:43,330
to iTunes and it will take care of it

00:28:38,890 --> 00:28:44,260
for you the next one is spaceship the

00:28:43,330 --> 00:28:46,450
the

00:28:44,260 --> 00:28:48,010
author of fast lane originally wrote it

00:28:46,450 --> 00:28:50,470
to scrape iTunes Connect and they

00:28:48,010 --> 00:28:53,500
developer centers to do what it does and

00:28:50,470 --> 00:28:56,260
he rewrote spaceship to be to power all

00:28:53,500 --> 00:28:58,090
these tools by reverse engineering the

00:28:56,260 --> 00:29:00,370
AP is that iTunes connected the

00:28:58,090 --> 00:29:01,810
developer center Xcode itself uses to

00:29:00,370 --> 00:29:04,240
manage these things you can make API

00:29:01,810 --> 00:29:06,460
calls and not scrape web pages he

00:29:04,240 --> 00:29:09,070
released it not just as a component of

00:29:06,460 --> 00:29:11,470
his tools but as a component itself so

00:29:09,070 --> 00:29:13,690
that you can write scripts and Ruby to

00:29:11,470 --> 00:29:15,310
manage iTunes so if I had for some

00:29:13,690 --> 00:29:16,570
reason I wanted to create 50 apps I

00:29:15,310 --> 00:29:18,820
could write a quick script that will

00:29:16,570 --> 00:29:20,800
generate 50 entries fill them out with

00:29:18,820 --> 00:29:23,200
screenshots in all of the data pull down

00:29:20,800 --> 00:29:24,970
provisioning profiles code sign things

00:29:23,200 --> 00:29:27,400
that I have on my computer and then push

00:29:24,970 --> 00:29:29,650
it all up into test flight and I can all

00:29:27,400 --> 00:29:32,020
run within a minute so it's just an

00:29:29,650 --> 00:29:34,450
exposed ruby library for all of apples

00:29:32,020 --> 00:29:36,190
developer api's and all their developer

00:29:34,450 --> 00:29:40,150
centers and it powers the rest of these

00:29:36,190 --> 00:29:41,890
tools the third one is pilot this is for

00:29:40,150 --> 00:29:42,910
managing test flyer from terminal I'm

00:29:41,890 --> 00:29:44,410
not sure how many of you have seen the

00:29:42,910 --> 00:29:46,120
new itunes connect you I that rolled out

00:29:44,410 --> 00:29:49,840
a couple of weeks ago that made test

00:29:46,120 --> 00:29:50,920
flight somehow worse but tests like can

00:29:49,840 --> 00:29:52,660
do some great things it can do

00:29:50,920 --> 00:29:56,290
distribution of up to a thousand people

00:29:52,660 --> 00:29:58,690
you can have I think it's 10 or 15

00:29:56,290 --> 00:30:00,280
internal users and then it can also do

00:29:58,690 --> 00:30:03,390
a/b testing and a whole handful of

00:30:00,280 --> 00:30:05,320
things but you have to do it through

00:30:03,390 --> 00:30:07,960
through iTunes Connect in your web

00:30:05,320 --> 00:30:10,390
browser which means that if you want to

00:30:07,960 --> 00:30:11,740
do automated delivery for example we

00:30:10,390 --> 00:30:13,900
have one set up where we do continuous

00:30:11,740 --> 00:30:15,700
integration when it passed test it auto

00:30:13,900 --> 00:30:18,550
uploads into iTunes Connect and sends it

00:30:15,700 --> 00:30:21,520
out to beta testers who are on the list

00:30:18,550 --> 00:30:23,140
to receive fast builds and you can't do

00:30:21,520 --> 00:30:25,240
that with iTunes Connect because it's

00:30:23,140 --> 00:30:27,400
not meant to be automated so what pilot

00:30:25,240 --> 00:30:28,690
ads is a build step I can put in my

00:30:27,400 --> 00:30:30,670
continuous integration or build

00:30:28,690 --> 00:30:32,110
deployment pipeline that will auto push

00:30:30,670 --> 00:30:35,410
the stuff to test flight and auto send

00:30:32,110 --> 00:30:36,880
it out to my testers for me I'm going to

00:30:35,410 --> 00:30:39,220
turn it over to Dan now to discuss a

00:30:36,880 --> 00:30:42,690
little bit of open source UI as the last

00:30:39,220 --> 00:30:42,690
part of our presentation today

00:30:56,480 --> 00:31:03,300
okay yeah I'm going to run through just

00:30:59,130 --> 00:31:05,970
a few open source resources that can

00:31:03,300 --> 00:31:08,430
really enhance your user experience in

00:31:05,970 --> 00:31:12,570
UI so the first one we have is jazz

00:31:08,430 --> 00:31:15,540
hands it's a key frame based animation

00:31:12,570 --> 00:31:19,020
frame works so and it's controlled by

00:31:15,540 --> 00:31:22,740
gesture so one example is the ifttt app

00:31:19,020 --> 00:31:24,090
here and it does progressive percentage

00:31:22,740 --> 00:31:26,010
based animation so I'm going to kind of

00:31:24,090 --> 00:31:28,650
run through here you can see as you

00:31:26,010 --> 00:31:30,830
scroll through the app and kind of you

00:31:28,650 --> 00:31:33,960
can go back and forth with your gesture

00:31:30,830 --> 00:31:37,830
it kind of is dictated by the percentage

00:31:33,960 --> 00:31:41,160
that you scroll through so it's a really

00:31:37,830 --> 00:31:43,370
great for onboarding animations opening

00:31:41,160 --> 00:31:47,370
animations that can really set you apart

00:31:43,370 --> 00:31:50,210
the next resource is fun awesome used by

00:31:47,370 --> 00:31:54,720
a lot of web developers originally and

00:31:50,210 --> 00:31:56,580
it's probably 600 icons and they're a

00:31:54,720 --> 00:31:59,430
little bit more diverse than maybe a

00:31:56,580 --> 00:32:02,390
native iOS set of icons that you can use

00:31:59,430 --> 00:32:05,700
so really great again to set you apart

00:32:02,390 --> 00:32:09,090
and this allows you to use it with Swift

00:32:05,700 --> 00:32:13,260
and in a lot of your iOS apps so great

00:32:09,090 --> 00:32:15,680
library and icons that I'm fond of again

00:32:13,260 --> 00:32:19,370
icons are really important on my side of

00:32:15,680 --> 00:32:22,890
what I do and being able to communicate

00:32:19,370 --> 00:32:24,480
actions and things to users this is

00:32:22,890 --> 00:32:26,940
another one is the material design icon

00:32:24,480 --> 00:32:28,980
pack that came out with Google's

00:32:26,940 --> 00:32:31,710
material design guidelines about a year

00:32:28,980 --> 00:32:35,270
ago and they're probably a little bit

00:32:31,710 --> 00:32:37,860
more simple than the fun awesome pack

00:32:35,270 --> 00:32:41,430
and probably same thing about six

00:32:37,860 --> 00:32:43,230
hundred or a few more icons the only

00:32:41,430 --> 00:32:45,330
thing that I would kind of warned about

00:32:43,230 --> 00:32:47,400
these is if you're going to use these

00:32:45,330 --> 00:32:50,880
and kind of go this route it's best not

00:32:47,400 --> 00:32:52,230
to mix them with native iOS icons and be

00:32:50,880 --> 00:32:53,500
consistent and really choosing that

00:32:52,230 --> 00:32:55,590
route and you

00:32:53,500 --> 00:32:59,560
using them fully throughout your apps

00:32:55,590 --> 00:33:01,750
but again really great icon pack the

00:32:59,560 --> 00:33:05,140
next I'm going to talk about is Facebook

00:33:01,750 --> 00:33:07,990
pop so Facebook pop is very similar to

00:33:05,140 --> 00:33:09,730
jazz hands and I have an example

00:33:07,990 --> 00:33:12,070
something we did for a client that

00:33:09,730 --> 00:33:15,370
utilize Facebook pop as well as some

00:33:12,070 --> 00:33:16,540
core animation it differs and I think

00:33:15,370 --> 00:33:18,100
Brendan can talk on this a little bit

00:33:16,540 --> 00:33:20,620
more from that aspect but differs from

00:33:18,100 --> 00:33:22,600
jazz hands and the fact that like I said

00:33:20,620 --> 00:33:25,150
jazz hands does a lot more percentage

00:33:22,600 --> 00:33:26,970
based and progressive animation that you

00:33:25,150 --> 00:33:30,580
can kind of tween back and forth through

00:33:26,970 --> 00:33:32,050
but this allows you as soon as you swipe

00:33:30,580 --> 00:33:35,560
on for example here on to this next

00:33:32,050 --> 00:33:38,350
screen this animation runs also allows

00:33:35,560 --> 00:33:39,970
some like physics based things to run

00:33:38,350 --> 00:33:43,720
through and I don't know if you want to

00:33:39,970 --> 00:33:50,440
talk on a few more of points to grab the

00:33:43,720 --> 00:33:51,970
play ok yeah so jazz hands does

00:33:50,440 --> 00:33:53,560
progressive based animation it gives you

00:33:51,970 --> 00:33:55,180
essentially a percentage and helps tween

00:33:53,560 --> 00:33:56,590
the animation between two states and

00:33:55,180 --> 00:33:58,750
accordance with a percentage complete

00:33:56,590 --> 00:34:00,400
between the two states this is more of

00:33:58,750 --> 00:34:04,120
one shot animations it was written to

00:34:00,400 --> 00:34:05,770
power Facebook's paper app and so it

00:34:04,120 --> 00:34:09,129
allows us to do better physics

00:34:05,770 --> 00:34:10,510
animations a lot of responsiveness a lot

00:34:09,129 --> 00:34:15,370
of a lot more springiness than what the

00:34:10,510 --> 00:34:19,200
iOS native libraries do and so I think

00:34:15,370 --> 00:34:19,200
Dan was going to touch on

00:34:27,940 --> 00:34:33,560
the first point probably be make sure

00:34:31,010 --> 00:34:37,369
you're consistent with your decisions

00:34:33,560 --> 00:34:41,510
and your UI like I mentioned with that

00:34:37,369 --> 00:34:43,609
material design icon pack you know make

00:34:41,510 --> 00:34:45,290
sure you utilize those fully and try not

00:34:43,609 --> 00:34:47,450
to mix too many also there's so many

00:34:45,290 --> 00:34:49,190
different components and resources out

00:34:47,450 --> 00:34:52,339
there that are extremely flashy and

00:34:49,190 --> 00:34:54,829
trendy and trying to kind of slam a lot

00:34:52,339 --> 00:34:57,470
of those all into one app I'll be

00:34:54,829 --> 00:35:00,020
attempting may not be the best results

00:34:57,470 --> 00:35:05,270
so kind of choose the best ones that are

00:35:00,020 --> 00:35:07,820
fitting and then the second point was to

00:35:05,270 --> 00:35:10,150
be maintainable and manageable again

00:35:07,820 --> 00:35:13,099
Brennan touched on the the Swift problem

00:35:10,150 --> 00:35:16,160
from a user experience standpoint a lot

00:35:13,099 --> 00:35:19,010
of that can cause crashes and major bugs

00:35:16,160 --> 00:35:20,089
and issues in your app and if you're

00:35:19,010 --> 00:35:23,420
releasing that out and it's the first

00:35:20,089 --> 00:35:26,000
experience that the user has with your

00:35:23,420 --> 00:35:28,790
app even if it's fantastic that crashes

00:35:26,000 --> 00:35:32,119
or has it has a major issue from that it

00:35:28,790 --> 00:35:34,720
takes a huge amount of efforts to get

00:35:32,119 --> 00:35:36,920
that user back and using your product so

00:35:34,720 --> 00:35:39,140
make sure you choose carefully on some

00:35:36,920 --> 00:35:42,200
of those yeah and kind of on that topic

00:35:39,140 --> 00:35:43,730
is that a lot of libraries will look for

00:35:42,200 --> 00:35:45,560
active maintenance because if it is a

00:35:43,730 --> 00:35:48,650
really cool UI component you based your

00:35:45,560 --> 00:35:50,240
app around like a lot of people is that

00:35:48,650 --> 00:35:51,950
if it's not being actively maintained

00:35:50,240 --> 00:35:54,050
and then iOS 9 comes out and you have no

00:35:51,950 --> 00:35:56,180
idea how the cool fancy thing works and

00:35:54,050 --> 00:35:58,430
then it breaks or suddenly your users

00:35:56,180 --> 00:35:59,900
start crashing on it just because it

00:35:58,430 --> 00:36:01,400
looks cool what at work seventy percent

00:35:59,900 --> 00:36:03,740
of the time doesn't necessarily make it

00:36:01,400 --> 00:36:04,849
worth keeping and it's something that

00:36:03,740 --> 00:36:06,410
comes down just kind of developer

00:36:04,849 --> 00:36:07,849
responsibility is make sure you either

00:36:06,410 --> 00:36:10,700
know how to maintain it or make sure

00:36:07,849 --> 00:36:12,170
it's actively maintained for anything

00:36:10,700 --> 00:36:15,740
because you do want it to enhance your

00:36:12,170 --> 00:36:17,390
app not just be in your app and so

00:36:15,740 --> 00:36:18,950
that's what we've got prepare for you

00:36:17,390 --> 00:36:23,770
and we were taking any questions if

00:36:18,950 --> 00:36:39,200
anyone had any yeah

00:36:23,770 --> 00:36:41,720
mm-hmm yep so right now Swift doesn't

00:36:39,200 --> 00:36:43,910
have binary interface compatibility so

00:36:41,720 --> 00:36:46,010
you can't actually put Swift 12 code in

00:36:43,910 --> 00:36:47,480
a project with Swift to code yeah so

00:36:46,010 --> 00:36:49,940
Carthage doesn't doesn't solve that yet

00:36:47,480 --> 00:36:52,220
either but just hypothetically if we

00:36:49,940 --> 00:36:53,540
assumed that it did work you also come

00:36:52,220 --> 00:36:54,650
with a problem that right now because it

00:36:53,540 --> 00:36:57,230
doesn't have binary interface

00:36:54,650 --> 00:36:58,610
compatibility Swift libraries are not

00:36:57,230 --> 00:37:00,320
bundled on the device they're actually

00:36:58,610 --> 00:37:02,330
compiled into your apps putting Swift in

00:37:00,320 --> 00:37:04,820
your app adds 20 to 30 megabytes to your

00:37:02,330 --> 00:37:06,350
download size now imagine if we did that

00:37:04,820 --> 00:37:07,490
for two separate versions of Swift

00:37:06,350 --> 00:37:09,230
because they weren't compatible we've

00:37:07,490 --> 00:37:11,210
now added like 70 megabytes to our

00:37:09,230 --> 00:37:12,350
download size so I don't know that

00:37:11,210 --> 00:37:14,750
hypothetically it would be a good case

00:37:12,350 --> 00:37:17,860
but it currently it's not possible maybe

00:37:14,750 --> 00:37:23,740
someone will make it possible the future

00:37:17,860 --> 00:37:23,740
anyone else have any questions hi yeah

00:37:26,009 --> 00:37:31,829
no it can it's written in Swift that you

00:37:28,329 --> 00:37:31,829
can use it with Objective C or Swift

00:37:34,829 --> 00:37:40,239
fantastic I didn't know that cool I

00:37:38,319 --> 00:37:41,859
think material design icons just drag

00:37:40,239 --> 00:37:44,739
them into your Jurassic catalogues as

00:37:41,859 --> 00:37:46,509
well so I i would say kind of what

00:37:44,739 --> 00:37:48,759
Dantas Don I would say be careful using

00:37:46,509 --> 00:37:51,729
them because they're not in neither of

00:37:48,759 --> 00:37:53,769
them are in character with iOS iOS uses

00:37:51,729 --> 00:37:56,169
a lot more simple geometric pictographic

00:37:53,769 --> 00:37:57,669
things neither of those really do and so

00:37:56,169 --> 00:37:59,919
as long as your apps whole personality

00:37:57,669 --> 00:38:03,359
is not using any of that that's totally

00:37:59,919 --> 00:38:06,369
fine you just don't want to mix match so

00:38:03,359 --> 00:38:10,329
anyone else or is everyone ready for

00:38:06,369 --> 00:38:13,119
lunch all right well cool again I'm

00:38:10,329 --> 00:38:15,639
Brendan lay this is dan Marino and I

00:38:13,119 --> 00:38:17,829
guess we are done right that is it

00:38:15,639 --> 00:38:19,889
perfect 40 minutes look at that look at

00:38:17,829 --> 00:38:19,889

YouTube URL: https://www.youtube.com/watch?v=BqrO2UySP6Q


