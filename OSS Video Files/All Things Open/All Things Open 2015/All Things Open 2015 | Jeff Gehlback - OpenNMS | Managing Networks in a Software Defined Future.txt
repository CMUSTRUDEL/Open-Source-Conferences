Title: All Things Open 2015 | Jeff Gehlback - OpenNMS | Managing Networks in a Software Defined Future
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2014 All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,069 --> 00:00:11,610
it's so who's this guy standing in front

00:00:08,160 --> 00:00:13,139
of you I've been doing management of

00:00:11,610 --> 00:00:15,929
large IP networks since about nineteen

00:00:13,139 --> 00:00:18,600
ninety-eight ninety-nine started my

00:00:15,929 --> 00:00:21,150
first real large-scale gig was at NASA

00:00:18,600 --> 00:00:23,670
the nasa international sciences network

00:00:21,150 --> 00:00:25,949
i used to work also for a vendor called

00:00:23,670 --> 00:00:29,550
concord which made a product called a

00:00:25,949 --> 00:00:30,810
health anybody ever used that all right

00:00:29,550 --> 00:00:34,530
i know one person who was just in here

00:00:30,810 --> 00:00:37,140
yeah there's Billy work for bellsouth

00:00:34,530 --> 00:00:39,390
after that they they tried to mold my

00:00:37,140 --> 00:00:40,950
cranium into the shape of a bell it took

00:00:39,390 --> 00:00:43,320
me a few years to recover from that and

00:00:40,950 --> 00:00:45,329
now I work for the open and a mess group

00:00:43,320 --> 00:00:47,579
so I get to do the things that I love I

00:00:45,329 --> 00:00:49,350
get to play with managing networks and

00:00:47,579 --> 00:00:51,690
systems at scale and I get to hack on

00:00:49,350 --> 00:00:53,370
free software so basically what I'm

00:00:51,690 --> 00:00:55,230
telling is I'm working my dream job

00:00:53,370 --> 00:00:59,489
right now how many people here are

00:00:55,230 --> 00:01:01,079
already familiar with opennms okay

00:00:59,489 --> 00:01:05,970
that's probably about average I think

00:01:01,079 --> 00:01:09,540
we've got four so I want to open a

00:01:05,970 --> 00:01:10,950
little bit with with well first of all a

00:01:09,540 --> 00:01:13,770
few other questions how many people in

00:01:10,950 --> 00:01:16,350
here know about software-defined

00:01:13,770 --> 00:01:19,770
networks already like would consider

00:01:16,350 --> 00:01:21,840
yourself fluent in the terminology yeah

00:01:19,770 --> 00:01:25,140
how many have actually hacked on sdn

00:01:21,840 --> 00:01:28,350
stuff or set up an SDN installation of

00:01:25,140 --> 00:01:29,790
some kind okay so most of my experience

00:01:28,350 --> 00:01:31,829
with this for those of you who have

00:01:29,790 --> 00:01:34,860
actually done this stuff is pretty much

00:01:31,829 --> 00:01:40,650
lab and theoretical so take it easy on

00:01:34,860 --> 00:01:44,009
me how many have used SNMP before did

00:01:40,650 --> 00:01:47,009
you use it to send mail okay good you

00:01:44,009 --> 00:01:48,090
passed the test awesome so let's talk a

00:01:47,009 --> 00:01:49,619
little bit about what used to be in the

00:01:48,090 --> 00:01:53,549
old school networks so for some of you

00:01:49,619 --> 00:01:55,920
this will be massive overview we should

00:01:53,549 --> 00:01:57,630
have switches in old-school networks

00:01:55,920 --> 00:01:59,549
right we kind of still have these around

00:01:57,630 --> 00:02:02,579
before that we called them hubs they

00:01:59,549 --> 00:02:04,619
were just electrical repeaters switches

00:02:02,579 --> 00:02:06,479
are a little smarter than that they are

00:02:04,619 --> 00:02:09,209
good at switching layer 2 frames and

00:02:06,479 --> 00:02:10,729
running stp spanning tree protocol and

00:02:09,209 --> 00:02:12,290
that's pretty much what a

00:02:10,729 --> 00:02:15,170
which does right it's pretty

00:02:12,290 --> 00:02:18,080
compartmentalized thing you'll often

00:02:15,170 --> 00:02:22,400
have these things with a lot of physical

00:02:18,080 --> 00:02:23,690
ports 24 48 more and sometimes there

00:02:22,400 --> 00:02:26,480
modular sometimes they're fixed

00:02:23,690 --> 00:02:29,660
configuration they tend to have by

00:02:26,480 --> 00:02:32,150
high-throughput data plane and their

00:02:29,660 --> 00:02:34,819
configurations stored locally typically

00:02:32,150 --> 00:02:37,610
so any of you have configured a cisco

00:02:34,819 --> 00:02:39,170
switch you know you ssh n you blow in

00:02:37,610 --> 00:02:43,280
your configuration and it lives right

00:02:39,170 --> 00:02:46,730
there on the switch and that's the way

00:02:43,280 --> 00:02:49,250
it is and it's pretty terrible then

00:02:46,730 --> 00:02:51,920
we've got routers as we go up the the

00:02:49,250 --> 00:02:53,450
OSI stack we get to layer 3 and we make

00:02:51,920 --> 00:02:56,599
routers which are good at forwarding

00:02:53,450 --> 00:02:58,849
later three packets typically IP I've

00:02:56,599 --> 00:03:01,310
seen IPX and Apple talk and other

00:02:58,849 --> 00:03:03,170
unmentionable things in my earlier days

00:03:01,310 --> 00:03:05,900
of managing networks but we're just

00:03:03,170 --> 00:03:07,430
going to talk about IP they're also good

00:03:05,900 --> 00:03:13,879
at running routing protocols some of

00:03:07,430 --> 00:03:16,130
them ospf bgp is is eigrp that just make

00:03:13,879 --> 00:03:20,180
them smarter at deciding which interface

00:03:16,130 --> 00:03:21,530
a given IP packet should go out compared

00:03:20,180 --> 00:03:24,500
to switches your router's didn't have

00:03:21,530 --> 00:03:26,989
fewer physical ports they're often

00:03:24,500 --> 00:03:29,359
modular like the switches they're pretty

00:03:26,989 --> 00:03:31,959
rarely fixed configuration that have a

00:03:29,359 --> 00:03:35,359
medium to high throughput data plane and

00:03:31,959 --> 00:03:37,819
their control plane which is what

00:03:35,359 --> 00:03:40,549
controls their behavior is run from a

00:03:37,819 --> 00:03:42,349
locally stored configuration so you ssh

00:03:40,549 --> 00:03:44,630
in and you blow in your configuration or

00:03:42,349 --> 00:03:46,310
you do it through some terrible web UI

00:03:44,630 --> 00:03:48,950
but the config lives right there on the

00:03:46,310 --> 00:03:53,870
box you should be starting to get angry

00:03:48,950 --> 00:03:55,910
are you getting angry yet okay good and

00:03:53,870 --> 00:03:58,760
then we're going to go up a few levels

00:03:55,910 --> 00:04:00,169
here and talk about firewalls basically

00:03:58,760 --> 00:04:02,419
they're still just doing forwarding on

00:04:00,169 --> 00:04:07,069
layer 3 packets subject to some kind of

00:04:02,419 --> 00:04:09,139
rule set often that that will set goes

00:04:07,069 --> 00:04:11,359
all seven layers they're also really

00:04:09,139 --> 00:04:12,829
good for if you need somebody to point

00:04:11,359 --> 00:04:14,840
the finger at when stuff breaks in your

00:04:12,829 --> 00:04:17,060
IT firewalls are terrible everybody

00:04:14,840 --> 00:04:19,190
hates them and having worked as a

00:04:17,060 --> 00:04:23,570
firewall engineer for a couple years

00:04:19,190 --> 00:04:25,550
yeah it's fun much like routers you tend

00:04:23,570 --> 00:04:28,190
to have relatively few physical ports on

00:04:25,550 --> 00:04:30,290
a firewall sometimes they're modular

00:04:28,190 --> 00:04:31,970
sometimes they're fixed config low to

00:04:30,290 --> 00:04:34,490
medium throughput data plane compared to

00:04:31,970 --> 00:04:36,410
routers because these tend to sit in

00:04:34,490 --> 00:04:40,010
front of a small number of typically

00:04:36,410 --> 00:04:41,300
server kind of hosts right even if

00:04:40,010 --> 00:04:44,650
you're using something like checkpoint

00:04:41,300 --> 00:04:47,360
that's got a pretty good system for

00:04:44,650 --> 00:04:49,040
managing your your firewall

00:04:47,360 --> 00:04:50,900
configurations and pushing them as

00:04:49,040 --> 00:04:53,690
revisions they're still ultimately

00:04:50,900 --> 00:05:00,170
living right out there on the device and

00:04:53,690 --> 00:05:02,720
this is a travesty so to try to wrangle

00:05:00,170 --> 00:05:04,970
some of this complexity in our old

00:05:02,720 --> 00:05:07,280
school networks we've built things we

00:05:04,970 --> 00:05:09,200
built configuration management how many

00:05:07,280 --> 00:05:12,290
people here are using some sort of

00:05:09,200 --> 00:05:13,790
configuration management system how many

00:05:12,290 --> 00:05:17,690
of you are using a spreadsheet for your

00:05:13,790 --> 00:05:21,350
configuration management yep more people

00:05:17,690 --> 00:05:23,540
do then we'll admit it so yeah the idea

00:05:21,350 --> 00:05:25,040
behind some by most of your

00:05:23,540 --> 00:05:26,540
configuration management platforms is to

00:05:25,040 --> 00:05:28,490
make sure that the right configurations

00:05:26,540 --> 00:05:31,419
are running on the right devices

00:05:28,490 --> 00:05:33,620
hopefully with the right revisions

00:05:31,419 --> 00:05:36,260
configuration management another part of

00:05:33,620 --> 00:05:39,230
its job is to account for the hardware

00:05:36,260 --> 00:05:41,450
and software elements in your network

00:05:39,230 --> 00:05:44,270
they're also configuration management

00:05:41,450 --> 00:05:48,110
platforms really great at eating up your

00:05:44,270 --> 00:05:50,360
time and your money now we break this

00:05:48,110 --> 00:05:51,919
down a little bit making the right

00:05:50,360 --> 00:05:54,110
configs run on the right devices and

00:05:51,919 --> 00:05:55,610
accounting for the elements in your

00:05:54,110 --> 00:05:57,590
network are really two separate problems

00:05:55,610 --> 00:05:59,750
and each one of those is pretty hard so

00:05:57,590 --> 00:06:02,120
I give configuration management vendors

00:05:59,750 --> 00:06:04,790
a bit of a break they're doing really

00:06:02,120 --> 00:06:07,070
two pretty hard jobs and some of them do

00:06:04,790 --> 00:06:09,050
it pretty well but even the ones that do

00:06:07,070 --> 00:06:12,410
it pretty well typically the config

00:06:09,050 --> 00:06:14,750
management platform doesn't croc what

00:06:12,410 --> 00:06:16,730
the configs mean right it doesn't have

00:06:14,750 --> 00:06:20,300
any contextual awareness of what it

00:06:16,730 --> 00:06:22,250
means if ospf is turned on in a big

00:06:20,300 --> 00:06:24,080
single area 0 and all your network it

00:06:22,250 --> 00:06:26,120
doesn't it doesn't

00:06:24,080 --> 00:06:27,889
that means it just knows that that's

00:06:26,120 --> 00:06:32,180
your configuration that's running on all

00:06:27,889 --> 00:06:34,280
your network also the the accounting for

00:06:32,180 --> 00:06:35,599
all the nodes in your network how do you

00:06:34,280 --> 00:06:37,340
know that they're all in your

00:06:35,599 --> 00:06:39,560
configuration management system you run

00:06:37,340 --> 00:06:40,879
some kind of discovery thing right but

00:06:39,560 --> 00:06:44,120
how do you know that that cut everything

00:06:40,879 --> 00:06:47,870
so really hard really difficult problems

00:06:44,120 --> 00:06:52,340
to solve vendors both proprietary and

00:06:47,870 --> 00:06:53,599
open source are doing it pretty well so

00:06:52,340 --> 00:06:58,310
let's pile some more software on the

00:06:53,599 --> 00:07:01,069
problem now we're going to have network

00:06:58,310 --> 00:07:02,659
management systems all right so I assume

00:07:01,069 --> 00:07:04,789
most of you probably have done network

00:07:02,659 --> 00:07:07,150
management whether you know it or not

00:07:04,789 --> 00:07:11,289
the kids call it monitoring I'm told

00:07:07,150 --> 00:07:13,009
instead of network management yeah so

00:07:11,289 --> 00:07:14,569
there are a couple of different ways to

00:07:13,009 --> 00:07:17,389
break down the functionality in the

00:07:14,569 --> 00:07:20,509
network management platform probably the

00:07:17,389 --> 00:07:24,020
most well-known is the OSI f caps model

00:07:20,509 --> 00:07:26,029
who's heard of this before ok so f gaps

00:07:24,020 --> 00:07:29,120
is fault configuration accounting

00:07:26,029 --> 00:07:31,099
performance and security management the

00:07:29,120 --> 00:07:32,389
platform that I work on and the ones

00:07:31,099 --> 00:07:34,219
that I've worked on in the past that

00:07:32,389 --> 00:07:36,229
were real things and not just somebody's

00:07:34,219 --> 00:07:39,069
toy project pretty much adhere to this

00:07:36,229 --> 00:07:41,690
model open and a mess is no exception

00:07:39,069 --> 00:07:43,669
our focus is primarily on fault and

00:07:41,690 --> 00:07:45,379
performance as i said before

00:07:43,669 --> 00:07:47,680
configuration is a really hard problem

00:07:45,379 --> 00:07:49,699
that a lot of other people do well

00:07:47,680 --> 00:07:52,279
accounting we just haven't gone there

00:07:49,699 --> 00:07:55,789
yet and security we tend to do through

00:07:52,279 --> 00:07:58,759
integrations with other things so that's

00:07:55,789 --> 00:08:00,879
our fault fault performance we've also

00:07:58,759 --> 00:08:03,710
been around since nineteen ninety nine

00:08:00,879 --> 00:08:05,210
which is probably older than some of the

00:08:03,710 --> 00:08:08,300
people walking around with conference

00:08:05,210 --> 00:08:10,430
today which is kind of terrifying when

00:08:08,300 --> 00:08:12,710
you get right down to it but that means

00:08:10,430 --> 00:08:15,349
we've also seen a lot of stuff alright

00:08:12,710 --> 00:08:17,389
we've we've seen the demise predicted of

00:08:15,349 --> 00:08:23,289
various things and some of them actually

00:08:17,389 --> 00:08:25,819
went away some of them didn't go away so

00:08:23,289 --> 00:08:27,349
the way we implement the eff gaps model

00:08:25,819 --> 00:08:29,330
in opennms we really kind of break

00:08:27,349 --> 00:08:30,770
everything down into four parts we used

00:08:29,330 --> 00:08:32,569
to say there are two halves to open an

00:08:30,770 --> 00:08:33,890
MS and then there were three and now

00:08:32,569 --> 00:08:36,409
there's four halves and we just say

00:08:33,890 --> 00:08:37,670
there's four parts so the first is

00:08:36,409 --> 00:08:40,660
probably the most important

00:08:37,670 --> 00:08:43,010
part of how we break down f caps is

00:08:40,660 --> 00:08:44,300
provisioning now if you're in the telco

00:08:43,010 --> 00:08:46,460
world provisioning means a particular

00:08:44,300 --> 00:08:47,840
thing to you that's not what we're

00:08:46,460 --> 00:08:50,180
talking about we're talking about the

00:08:47,840 --> 00:08:52,490
process of getting nodes interfaces and

00:08:50,180 --> 00:08:54,860
services under management getting them

00:08:52,490 --> 00:08:58,300
into the inventory of your network

00:08:54,860 --> 00:09:01,070
management system opennms in this case

00:08:58,300 --> 00:09:03,800
the second piece is what we call service

00:09:01,070 --> 00:09:08,300
assurance that's basically not knock is

00:09:03,800 --> 00:09:11,180
anybody there we can do things like ping

00:09:08,300 --> 00:09:13,220
an IP address and see if we get an echo

00:09:11,180 --> 00:09:16,040
reply from it we can do much more

00:09:13,220 --> 00:09:18,830
complicated things than that to fault

00:09:16,040 --> 00:09:20,140
management how can we become aware that

00:09:18,830 --> 00:09:22,400
a network element has a problem

00:09:20,140 --> 00:09:25,490
sometimes without reaching out and

00:09:22,400 --> 00:09:27,770
polling it for its availability so

00:09:25,490 --> 00:09:29,810
that's that's fault management and then

00:09:27,770 --> 00:09:32,600
performance management which is probably

00:09:29,810 --> 00:09:36,110
the most visible and sexiest of all

00:09:32,600 --> 00:09:39,110
these is going out and quantifying data

00:09:36,110 --> 00:09:42,110
via some performance management protocol

00:09:39,110 --> 00:09:44,930
ie perhaps snmpd perhaps something

00:09:42,110 --> 00:09:47,900
different to find out things like how

00:09:44,930 --> 00:09:49,310
busy is your CPU how much data is

00:09:47,900 --> 00:09:51,620
flowing through your network interfaces

00:09:49,310 --> 00:09:53,890
how full is that file system how many

00:09:51,620 --> 00:09:58,090
people are currently logged in all right

00:09:53,890 --> 00:09:58,090
that's our performance management fees

00:09:58,360 --> 00:10:07,100
we do a lot with SNMP so a little bit

00:10:05,420 --> 00:10:10,610
about what SNMP does for those of you

00:10:07,100 --> 00:10:11,900
have who haven't used it before SNMP

00:10:10,610 --> 00:10:16,460
stands for the simple network management

00:10:11,900 --> 00:10:19,040
protocol and yes the simple might be

00:10:16,460 --> 00:10:21,860
construed as a cool joke on users by

00:10:19,040 --> 00:10:24,920
developers who knows why SNMP is called

00:10:21,860 --> 00:10:27,020
simple alright in the original spec

00:10:24,920 --> 00:10:33,980
there were only five protocol operations

00:10:27,020 --> 00:10:35,750
get get next get reply set and trap it's

00:10:33,980 --> 00:10:37,970
grown over the years since then but

00:10:35,750 --> 00:10:42,050
that's really the core of what the SNMP

00:10:37,970 --> 00:10:43,980
is for so you you can actually break all

00:10:42,050 --> 00:10:46,770
of that down into really two things

00:10:43,980 --> 00:10:49,950
is a management platform of some kind

00:10:46,770 --> 00:10:52,500
for instance opennms reaches out via

00:10:49,950 --> 00:10:53,820
SNMP and asked to node hey how many

00:10:52,500 --> 00:10:56,820
bytes have been through that interface

00:10:53,820 --> 00:10:58,410
how awful is that file system and the

00:10:56,820 --> 00:11:00,360
node if we're lucky and we got

00:10:58,410 --> 00:11:02,220
everything configured right replies and

00:11:00,360 --> 00:11:04,410
says here's the number for that piece of

00:11:02,220 --> 00:11:07,170
data that you asked me for the other

00:11:04,410 --> 00:11:10,890
mode of operation for SNMP is managed

00:11:07,170 --> 00:11:13,020
node to manager unsolicited messages so

00:11:10,890 --> 00:11:15,060
that's what we call an SNMP when go a

00:11:13,020 --> 00:11:18,630
trap technically they're called

00:11:15,060 --> 00:11:24,690
notifications in snmpv2 and later but

00:11:18,630 --> 00:11:26,370
trapping in the SNMP world the devices

00:11:24,690 --> 00:11:28,530
that are moving the data is really where

00:11:26,370 --> 00:11:30,210
all the action is right so that's that's

00:11:28,530 --> 00:11:33,420
where you want to focus your performance

00:11:30,210 --> 00:11:35,700
management and your other things too for

00:11:33,420 --> 00:11:39,000
that matter there's there's not a lot of

00:11:35,700 --> 00:11:40,440
excitement apart from the devices that

00:11:39,000 --> 00:11:43,800
are actually moving the data around on

00:11:40,440 --> 00:11:45,420
your network so we talked to the SNMP

00:11:43,800 --> 00:11:48,510
agent directly on the managed node

00:11:45,420 --> 00:11:50,100
that's how it's always been there are a

00:11:48,510 --> 00:11:51,510
few cases where we need to proxy

00:11:50,100 --> 00:11:53,880
something through another system but

00:11:51,510 --> 00:11:57,270
most of the time we talk SNMP directly

00:11:53,880 --> 00:11:59,670
to the notes that we're managing and we

00:11:57,270 --> 00:12:01,350
can gather all kinds of stuff all right

00:11:59,670 --> 00:12:05,040
we can get interface traffic we can get

00:12:01,350 --> 00:12:07,620
stats statistics about BGP connections

00:12:05,040 --> 00:12:09,420
pairings we can get environmental

00:12:07,620 --> 00:12:12,630
statistics how humid is it in your data

00:12:09,420 --> 00:12:15,360
center how hot is it get chassis

00:12:12,630 --> 00:12:16,980
intrusion kind of things the great thing

00:12:15,360 --> 00:12:19,020
about SNMP is that it's massively

00:12:16,980 --> 00:12:21,150
extensible has this concept of a

00:12:19,020 --> 00:12:24,390
management information base it's a

00:12:21,150 --> 00:12:26,310
self-describing thing that lets you

00:12:24,390 --> 00:12:28,080
build in things that nobody ever thought

00:12:26,310 --> 00:12:30,380
of before it's pretty cool it's pretty

00:12:28,080 --> 00:12:30,380
powerful

00:12:31,920 --> 00:12:37,269
so to summarize a little bit about how

00:12:34,660 --> 00:12:38,950
old school networks are and were you've

00:12:37,269 --> 00:12:40,510
got a bunch of nodes running around

00:12:38,950 --> 00:12:42,450
doing their own thing their

00:12:40,510 --> 00:12:44,529
configurations are stored locally and

00:12:42,450 --> 00:12:46,149
those are driving the control plane

00:12:44,529 --> 00:12:48,850
which is what makes the decisions about

00:12:46,149 --> 00:12:53,019
things like switching frames forwarding

00:12:48,850 --> 00:12:54,670
packets you've got to be skilled to

00:12:53,019 --> 00:12:56,290
build a network in this way but there's

00:12:54,670 --> 00:12:58,839
also an element of luck right any

00:12:56,290 --> 00:13:00,100
network engineers here yeah so there's

00:12:58,839 --> 00:13:01,959
definitely an element of luck in

00:13:00,100 --> 00:13:03,130
building networks this way you got to

00:13:01,959 --> 00:13:04,870
wait for your routing protocols to

00:13:03,130 --> 00:13:08,589
converge your configuration management

00:13:04,870 --> 00:13:10,450
platform doesn't know how it's going to

00:13:08,589 --> 00:13:16,000
work sometimes it's a lot of trial and

00:13:10,450 --> 00:13:17,829
error and just good old grit to have

00:13:16,000 --> 00:13:20,320
done this stuff before to make it work

00:13:17,829 --> 00:13:22,870
properly all this boils down to it's

00:13:20,320 --> 00:13:25,060
impossible to simulate accurately how

00:13:22,870 --> 00:13:27,370
the network's going to perform you can

00:13:25,060 --> 00:13:29,680
try simulation stuff they're expensive

00:13:27,370 --> 00:13:32,079
good technologies to simulate traffic

00:13:29,680 --> 00:13:33,940
but at the end of the day you can't

00:13:32,079 --> 00:13:36,930
write unit tests for it and that sucks

00:13:33,940 --> 00:13:41,770
hackers did not design this world right

00:13:36,930 --> 00:13:45,610
yeah okay so here's what the new world

00:13:41,770 --> 00:13:48,550
is going to look like I promise trust me

00:13:45,610 --> 00:13:50,350
if you take away just one fact about

00:13:48,550 --> 00:13:52,810
software-defined networks from this talk

00:13:50,350 --> 00:13:54,640
it is this software-defined networking

00:13:52,810 --> 00:13:57,250
is all about the separation of the

00:13:54,640 --> 00:14:01,240
control plane from the data plane and

00:13:57,250 --> 00:14:04,180
also programmability pretty simple that

00:14:01,240 --> 00:14:08,270
makes sense to everybody this news to

00:14:04,180 --> 00:14:10,640
anybody cool all right

00:14:08,270 --> 00:14:13,850
so in the world of SDN we kind of

00:14:10,640 --> 00:14:17,560
squashed some concepts down everything

00:14:13,850 --> 00:14:19,370
is now called a switch so whether the

00:14:17,560 --> 00:14:21,170
whether the devices that are

00:14:19,370 --> 00:14:23,840
implementing the data plane are moving

00:14:21,170 --> 00:14:25,940
frames by switching them moving packets

00:14:23,840 --> 00:14:28,610
by routing them making decisions about

00:14:25,940 --> 00:14:33,290
TCP connections based on a fire wallisch

00:14:28,610 --> 00:14:34,340
set of rules they're called switches and

00:14:33,290 --> 00:14:39,740
they're getting their marching orders

00:14:34,340 --> 00:14:41,600
from a controller this means that the

00:14:39,740 --> 00:14:44,660
configurations are no longer pushed out

00:14:41,600 --> 00:14:47,420
to the device edge yay we're a little

00:14:44,660 --> 00:14:50,170
bit more centrally controlled and

00:14:47,420 --> 00:14:52,220
deterministic switches and an SDN

00:14:50,170 --> 00:14:54,170
environment tend to be a little bit more

00:14:52,220 --> 00:14:56,630
generic hardware-wise you're still going

00:14:54,170 --> 00:14:58,250
to have your a6 to make their they're

00:14:56,630 --> 00:15:00,290
switching performance super mega fast

00:14:58,250 --> 00:15:03,440
they're still vendors out there building

00:15:00,290 --> 00:15:05,390
these things right cisco and juniper and

00:15:03,440 --> 00:15:07,760
their ilk are not in any real danger

00:15:05,390 --> 00:15:10,970
from this world as long as they're good

00:15:07,760 --> 00:15:13,070
at building hardware to to move data

00:15:10,970 --> 00:15:15,710
around great but it's going to be more

00:15:13,070 --> 00:15:19,610
generic than it was sometimes the

00:15:15,710 --> 00:15:21,200
switches are even virtual why not and

00:15:19,610 --> 00:15:23,480
like I said even if it's doing something

00:15:21,200 --> 00:15:26,500
at layer 3 through 7 we still call it a

00:15:23,480 --> 00:15:28,880
switch we just stomp on this terminology

00:15:26,500 --> 00:15:30,890
everything's now switch so what's

00:15:28,880 --> 00:15:35,630
driving the switches a thing called a

00:15:30,890 --> 00:15:37,330
controller control plane data plane now

00:15:35,630 --> 00:15:39,260
we're talking about the control plane

00:15:37,330 --> 00:15:41,360
the job of the controller is

00:15:39,260 --> 00:15:42,830
surprisingly to control the behavior of

00:15:41,360 --> 00:15:45,290
the switches which are implementing the

00:15:42,830 --> 00:15:47,180
data plane it does this according to

00:15:45,290 --> 00:15:49,930
centrally managed rules which makes your

00:15:47,180 --> 00:15:52,580
job of configuring your network easier

00:15:49,930 --> 00:15:54,230
it does this across all the nodes that

00:15:52,580 --> 00:15:56,150
have registered to the controller which

00:15:54,230 --> 00:15:58,700
makes the job of keeping track of what's

00:15:56,150 --> 00:16:01,940
in your network a lot easier pretty cool

00:15:58,700 --> 00:16:03,380
and once you've got a controller

00:16:01,940 --> 00:16:05,690
populated with a bunch of switches

00:16:03,380 --> 00:16:07,420
registered to it it exposes all that

00:16:05,690 --> 00:16:10,040
inventory and all those configurations

00:16:07,420 --> 00:16:13,940
via theoretically a set of open api's

00:16:10,040 --> 00:16:15,650
which is pretty great you can also have

00:16:13,940 --> 00:16:17,300
scripting hooks to make your network

00:16:15,650 --> 00:16:17,970
programmable they tend to be done in

00:16:17,300 --> 00:16:20,680
Python

00:16:17,970 --> 00:16:23,410
so if you like Python that's great if

00:16:20,680 --> 00:16:24,790
you don't like Python sorry I'm not

00:16:23,410 --> 00:16:27,690
crazy about it either some of its

00:16:24,790 --> 00:16:29,620
elements but it's a pretty good language

00:16:27,690 --> 00:16:30,790
at the end of the day the controller

00:16:29,620 --> 00:16:32,760
though is just a general purpose

00:16:30,790 --> 00:16:35,430
computer right it's not really a

00:16:32,760 --> 00:16:38,440
specialized piece of hardware it doesn't

00:16:35,430 --> 00:16:40,990
doesn't have that much to differentiate

00:16:38,440 --> 00:16:44,320
it from the server that's running Apache

00:16:40,990 --> 00:16:47,519
over in the corner it might have a

00:16:44,320 --> 00:16:50,170
vendor's logo tattooed on it might not

00:16:47,519 --> 00:16:53,160
it might even be virtual to just like

00:16:50,170 --> 00:16:57,339
some of your switches might be virtual

00:16:53,160 --> 00:16:59,500
so to summarize a little bit about what

00:16:57,339 --> 00:17:01,029
the future is going to be like we're

00:16:59,500 --> 00:17:03,600
going to have relatively dumb switches

00:17:01,029 --> 00:17:05,890
reporting to relatively smart controller

00:17:03,600 --> 00:17:08,679
we're going to be able to get central

00:17:05,890 --> 00:17:12,160
access to the inventory of switches and

00:17:08,679 --> 00:17:15,970
the configurations that are implementing

00:17:12,160 --> 00:17:17,410
their behavior in the data plane we're

00:17:15,970 --> 00:17:19,780
going to be able to do some really cool

00:17:17,410 --> 00:17:22,780
wacky agile stuff through network

00:17:19,780 --> 00:17:25,959
programmability assuming the vendors who

00:17:22,780 --> 00:17:30,820
keep the sector somewhat under their

00:17:25,959 --> 00:17:32,620
thumb for now allow it and now there's a

00:17:30,820 --> 00:17:35,200
lot less luck involved right it's going

00:17:32,620 --> 00:17:36,820
to be primarily a game of skill to

00:17:35,200 --> 00:17:38,980
program your networks to work the way

00:17:36,820 --> 00:17:40,510
you want them you might even be able to

00:17:38,980 --> 00:17:44,200
write unit tests for your network guys

00:17:40,510 --> 00:17:48,220
how cool is that any unit testers people

00:17:44,200 --> 00:17:50,200
like a green bar no unit test people all

00:17:48,220 --> 00:17:52,480
come on come talk to me if you don't

00:17:50,200 --> 00:17:55,110
already have unit testing religion it's

00:17:52,480 --> 00:17:57,030
pretty cool stuff

00:17:55,110 --> 00:17:59,160
end of the day this is how hackers would

00:17:57,030 --> 00:18:02,220
build a network right it's it's much

00:17:59,160 --> 00:18:06,059
more deterministic way to live and to

00:18:02,220 --> 00:18:07,650
move your traffic around so I decided I

00:18:06,059 --> 00:18:09,960
would do a little case study right I've

00:18:07,650 --> 00:18:12,179
got to do something concrete I can talk

00:18:09,960 --> 00:18:17,299
about concepts all day long that's great

00:18:12,179 --> 00:18:19,530
but it doesn't help very much so I did a

00:18:17,299 --> 00:18:22,620
bit of a little tiny proof-of-concept

00:18:19,530 --> 00:18:24,780
thing decided I would play around with a

00:18:22,620 --> 00:18:27,000
controller in a few switches this is

00:18:24,780 --> 00:18:31,260
really generic stuff the controller that

00:18:27,000 --> 00:18:34,200
I chose for this was project flood light

00:18:31,260 --> 00:18:35,549
which is an Apache License thing comes

00:18:34,200 --> 00:18:39,929
from a company called big switch

00:18:35,549 --> 00:18:41,640
networks they're building an open flow

00:18:39,929 --> 00:18:45,179
controller it supports open flow 10

00:18:41,640 --> 00:18:46,980
through 14 and yeah you can find a

00:18:45,179 --> 00:18:49,440
project floodlight org you can download

00:18:46,980 --> 00:18:52,950
it it's a Java project so sorry if you

00:18:49,440 --> 00:18:55,410
hate Java but built with maven it's a

00:18:52,950 --> 00:18:57,809
pretty simple thing to download and get

00:18:55,410 --> 00:19:00,720
running I had it up and running within

00:18:57,809 --> 00:19:03,410
about 30 minutes of finding it and it

00:19:00,720 --> 00:19:06,559
just kind of works for my switches I

00:19:03,410 --> 00:19:09,900
spun up actually just a bunch of ec2

00:19:06,559 --> 00:19:12,380
instances running fedora 21 this was a

00:19:09,900 --> 00:19:14,549
while back before 422 came out and

00:19:12,380 --> 00:19:16,590
installed all the open V switch tooling

00:19:14,549 --> 00:19:18,780
on those guys so these are just linux

00:19:16,590 --> 00:19:20,700
boxes right remember we said your

00:19:18,780 --> 00:19:25,290
switches are pretty much generic

00:19:20,700 --> 00:19:27,960
hardware open V switch is also Apache

00:19:25,290 --> 00:19:29,070
licensed it implements openflow 13 so we

00:19:27,960 --> 00:19:30,600
know that it's compatible with that

00:19:29,070 --> 00:19:34,110
range that's covered by project

00:19:30,600 --> 00:19:36,120
floodlight the maintainer ship of open

00:19:34,110 --> 00:19:39,570
vs which is distributed which is pretty

00:19:36,120 --> 00:19:41,520
cool kind of like Linux itself there are

00:19:39,570 --> 00:19:44,070
kernel space implementations of open V

00:19:41,520 --> 00:19:46,169
switch in both linux and freebsd and

00:19:44,070 --> 00:19:47,790
there's a user space implementation in

00:19:46,169 --> 00:19:49,799
net bsd so that's not going to be quite

00:19:47,790 --> 00:19:52,110
as performant but since it's not VSD you

00:19:49,799 --> 00:19:53,970
can run it on your toaster right so

00:19:52,110 --> 00:19:55,799
whatever you want to run it on net be a

00:19:53,970 --> 00:19:59,090
steal run there that project does it

00:19:55,799 --> 00:19:59,090
open V switch org

00:19:59,210 --> 00:20:03,960
okay so those are the elements of the

00:20:02,070 --> 00:20:06,600
little case study that I put together so

00:20:03,960 --> 00:20:08,880
let's break down this case study into

00:20:06,600 --> 00:20:12,780
the four core concerns of how open mms

00:20:08,880 --> 00:20:15,270
implements f caps first is provisioning

00:20:12,780 --> 00:20:17,820
and i really had two options to look

00:20:15,270 --> 00:20:19,200
into for how to do provisioning when i

00:20:17,820 --> 00:20:22,950
integrate with the project floodlight

00:20:19,200 --> 00:20:25,140
one is have the controller push its

00:20:22,950 --> 00:20:28,650
inventory into our REST API for

00:20:25,140 --> 00:20:32,510
provisioning that leans on the SDN

00:20:28,650 --> 00:20:36,179
controllers internal programming books

00:20:32,510 --> 00:20:38,460
option to have opennms go out talk to

00:20:36,179 --> 00:20:39,780
the controller and pull inventory from

00:20:38,460 --> 00:20:41,460
the controller's red state the eyes

00:20:39,780 --> 00:20:42,960
either way we're doing the rest api

00:20:41,460 --> 00:20:46,260
thing right it's just which way are we

00:20:42,960 --> 00:20:50,039
doing it and who's driving the

00:20:46,260 --> 00:20:52,250
synchronization so let's dig in a little

00:20:50,039 --> 00:20:55,830
bit to what push mode was going to mean

00:20:52,250 --> 00:20:57,450
sorry this is code you're probably all

00:20:55,830 --> 00:20:58,919
pretty comfortable looking at code you

00:20:57,450 --> 00:21:01,260
don't really have to understand this too

00:20:58,919 --> 00:21:03,720
much but project floodlight does feature

00:21:01,260 --> 00:21:05,429
a pluggable notification manager so

00:21:03,720 --> 00:21:06,919
anytime you add a switch anytime a

00:21:05,429 --> 00:21:09,330
switch registers to the controller

00:21:06,919 --> 00:21:11,700
there's an interface you can implement

00:21:09,330 --> 00:21:14,669
that says here's what to do when you get

00:21:11,700 --> 00:21:19,110
a new switch attached to you the default

00:21:14,669 --> 00:21:21,450
implementation basically just squawks to

00:21:19,110 --> 00:21:23,130
syslog it's pretty dumb it's not

00:21:21,450 --> 00:21:25,440
terribly useful but since it's an

00:21:23,130 --> 00:21:27,840
interface in Java you can override it in

00:21:25,440 --> 00:21:29,909
your own code and since what light is

00:21:27,840 --> 00:21:33,809
Apache License you can do whatever you

00:21:29,909 --> 00:21:35,880
want with it in that way so in theory we

00:21:33,809 --> 00:21:38,010
could just write a new notification

00:21:35,880 --> 00:21:40,350
manager for flood light that instead of

00:21:38,010 --> 00:21:43,049
squawking to syslog only also does a

00:21:40,350 --> 00:21:44,970
post to open and a messes requisition

00:21:43,049 --> 00:21:48,030
rest endpoint or whatever other

00:21:44,970 --> 00:21:50,220
management system or we could just watch

00:21:48,030 --> 00:21:51,780
the logs right just scrape the logs for

00:21:50,220 --> 00:21:53,630
messages that say hey I new switch work

00:21:51,780 --> 00:21:56,520
registered to me here's his IP address

00:21:53,630 --> 00:21:57,450
here's his MAC address here's all the

00:21:56,520 --> 00:22:02,340
other stuff that you need to know about

00:21:57,450 --> 00:22:03,990
it dirty but probably effective on the

00:22:02,340 --> 00:22:05,400
whole the push model from the controller

00:22:03,990 --> 00:22:06,750
to open an MS didn't seem like the

00:22:05,400 --> 00:22:10,110
cleanest approach to me but it's

00:22:06,750 --> 00:22:10,919
probably pretty effective and if anybody

00:22:10,110 --> 00:22:12,840
has hacked

00:22:10,919 --> 00:22:15,450
floodlight or another SDN controller

00:22:12,840 --> 00:22:19,220
platform and wants to come tell me how

00:22:15,450 --> 00:22:21,840
wrong I am about this please feel free

00:22:19,220 --> 00:22:23,489
so the other option for provisioning

00:22:21,840 --> 00:22:25,440
integration was pull mode wherein

00:22:23,489 --> 00:22:29,580
opennms goes out talks to floodlights

00:22:25,440 --> 00:22:32,389
rest api's find out what's in there this

00:22:29,580 --> 00:22:35,330
actually was a little bit easier to

00:22:32,389 --> 00:22:38,669
conceptualize for me because the

00:22:35,330 --> 00:22:41,609
endpoint core controller switches in

00:22:38,669 --> 00:22:43,799
their REST API gives me hey look at that

00:22:41,609 --> 00:22:46,980
a list of switches that are registered

00:22:43,799 --> 00:22:50,309
to the controller so we have here look

00:22:46,980 --> 00:22:51,749
at this I'm going to dig out my laser

00:22:50,309 --> 00:22:53,850
pointer that was in my conference bag

00:22:51,749 --> 00:22:55,649
and actually use it look at that it's

00:22:53,850 --> 00:22:56,999
even bright enough so yeah we've got an

00:22:55,649 --> 00:23:00,509
inet address which is just the IP

00:22:56,999 --> 00:23:02,489
address this slashes leftovers from the

00:23:00,509 --> 00:23:05,399
way Java renders IP address objects

00:23:02,489 --> 00:23:07,799
connected sense this is a millisecond

00:23:05,399 --> 00:23:11,820
since January first nineteen seventy

00:23:07,799 --> 00:23:13,710
thing switch DP ID this is a data path

00:23:11,820 --> 00:23:15,509
ID near as I can tell it's just a mac

00:23:13,710 --> 00:23:17,100
address more or less so this would be

00:23:15,509 --> 00:23:19,169
like the manageability MAC address of

00:23:17,100 --> 00:23:21,720
the switch so that makes a pretty good

00:23:19,169 --> 00:23:23,850
unique identifier for a switch in a

00:23:21,720 --> 00:23:26,330
controller and then here's our other

00:23:23,850 --> 00:23:30,210
switch we got wash and so it gets that

00:23:26,330 --> 00:23:32,759
anybody any Browncoats no come on geez

00:23:30,210 --> 00:23:36,749
alright so yeah so ease at a different

00:23:32,759 --> 00:23:40,200
IP address has been connected looks like

00:23:36,749 --> 00:23:41,850
not quite as long as wash and has a

00:23:40,200 --> 00:23:44,929
different data path identifier so we can

00:23:41,850 --> 00:23:44,929
tell these two switches apart

00:23:45,760 --> 00:23:50,620
so we need to know more information than

00:23:47,830 --> 00:23:53,430
just that right we'd like to know who

00:23:50,620 --> 00:23:55,720
made this switch what version of

00:23:53,430 --> 00:23:58,090
whatever software it's running is it

00:23:55,720 --> 00:24:03,250
running so we know from looking at this

00:23:58,090 --> 00:24:06,250
other core / switch / plug in the data

00:24:03,250 --> 00:24:09,700
path identifier and ask for it is JSON

00:24:06,250 --> 00:24:12,310
format and we get what version of open V

00:24:09,700 --> 00:24:14,140
switch is running on it I don't know who

00:24:12,310 --> 00:24:16,810
knew Sarah Inc is does anybody know that

00:24:14,140 --> 00:24:18,660
that is I'm guessing that's like who

00:24:16,810 --> 00:24:20,770
started the open V switch project

00:24:18,660 --> 00:24:22,780
couldn't find much information on them

00:24:20,770 --> 00:24:24,730
hardware description is open V switch

00:24:22,780 --> 00:24:28,990
pretty generic stuff right here's the

00:24:24,730 --> 00:24:30,610
the get hash of open V switch that we're

00:24:28,990 --> 00:24:33,850
running on there no serial number no

00:24:30,610 --> 00:24:36,610
data path description I would love to

00:24:33,850 --> 00:24:39,190
have some real like I don't know rishta

00:24:36,610 --> 00:24:41,770
switches or nexuses that can talk to an

00:24:39,190 --> 00:24:43,300
open flow controller and see what kind

00:24:41,770 --> 00:24:46,000
of stuff I get out of those but I don't

00:24:43,300 --> 00:24:47,110
have any of those in my lab if anybody's

00:24:46,000 --> 00:24:51,420
got some of those and has ever tried

00:24:47,110 --> 00:24:51,420
this love to hear what your results were

00:24:53,850 --> 00:24:58,140
we can dig dig even farther down than

00:24:56,640 --> 00:25:00,750
just the details about the switch itself

00:24:58,140 --> 00:25:02,910
as a node if you go into course which

00:25:00,750 --> 00:25:06,390
data point I'm sorry data path

00:25:02,910 --> 00:25:09,630
identifier / port desk you're going to

00:25:06,390 --> 00:25:12,030
get a JSON document out of flood light

00:25:09,630 --> 00:25:14,400
that says okay here's what's running and

00:25:12,030 --> 00:25:17,130
here are the ports it's this is just a

00:25:14,400 --> 00:25:19,650
JSON array describing all the network

00:25:17,130 --> 00:25:21,360
ports on the switch so here's everything

00:25:19,650 --> 00:25:23,730
we need to know port number one has this

00:25:21,360 --> 00:25:27,570
Hardware address here's its name eath

00:25:23,730 --> 00:25:30,600
one config and state are equivalent to

00:25:27,570 --> 00:25:33,870
the SNMP concepts of if admin status and

00:25:30,600 --> 00:25:36,390
a bopper status current speed and max

00:25:33,870 --> 00:25:39,299
speed this is like if speed or if high

00:25:36,390 --> 00:25:41,130
speed and this is the difference between

00:25:39,299 --> 00:25:43,590
current and maximum speed is not really

00:25:41,130 --> 00:25:46,679
expressed in a standard way in SNMP so

00:25:43,590 --> 00:25:48,510
this is cool new knowledge and then

00:25:46,679 --> 00:25:50,669
there's some other stuff so yeah you

00:25:48,510 --> 00:25:55,380
repeat this end times where m is how

00:25:50,669 --> 00:25:58,260
many interfaces this which has so given

00:25:55,380 --> 00:25:59,580
all this information any opennms users

00:25:58,260 --> 00:26:01,559
in here might recognize this document

00:25:59,580 --> 00:26:04,350
this is what we call a model import or

00:26:01,559 --> 00:26:06,270
requisition we can build this XML

00:26:04,350 --> 00:26:09,090
document that tells opennms hey you've

00:26:06,270 --> 00:26:12,360
got a node called wash his foreign ID is

00:26:09,090 --> 00:26:13,200
and we'll plug in his data path ID that

00:26:12,360 --> 00:26:16,470
we got out of the flood light

00:26:13,200 --> 00:26:18,990
controllers endpoint here's his IP

00:26:16,470 --> 00:26:20,549
address for management here's his status

00:26:18,990 --> 00:26:22,980
and we're going to go ahead and say that

00:26:20,549 --> 00:26:26,039
he is an SNMP primary interface I'll get

00:26:22,980 --> 00:26:27,890
to why in a minute here and here Zoe

00:26:26,039 --> 00:26:30,929
she's got a different foreign ID

00:26:27,890 --> 00:26:33,360
different IP address for management that

00:26:30,929 --> 00:26:35,190
IP address is also primary for SNMP

00:26:33,360 --> 00:26:36,809
manageability does everybody see how

00:26:35,190 --> 00:26:38,760
this maps back to the data that we got

00:26:36,809 --> 00:26:43,020
out of the flood light controller makes

00:26:38,760 --> 00:26:45,510
sense cool so once we import all this

00:26:43,020 --> 00:26:47,309
data into opennms we've now got two

00:26:45,510 --> 00:26:51,030
nodes in open and a mess and the cool

00:26:47,309 --> 00:26:52,169
thing is not to dig too much in and toot

00:26:51,030 --> 00:26:54,570
our own horn about how cool our

00:26:52,169 --> 00:26:57,580
provisioning subsystem is but if one of

00:26:54,570 --> 00:26:59,560
these switches goes away later from the

00:26:57,580 --> 00:27:01,420
open flow controllers inventory the next

00:26:59,560 --> 00:27:03,430
time you synchronize open an MS to this

00:27:01,420 --> 00:27:05,350
data source the nodes going to disappear

00:27:03,430 --> 00:27:06,040
from our inventory to which means you

00:27:05,350 --> 00:27:07,450
don't have to worry about

00:27:06,040 --> 00:27:09,520
decommissioning your switch in two

00:27:07,450 --> 00:27:11,200
different places if it goes away from

00:27:09,520 --> 00:27:14,950
the controller it goes away from your

00:27:11,200 --> 00:27:17,580
management system to okay so that's

00:27:14,950 --> 00:27:17,580

YouTube URL: https://www.youtube.com/watch?v=q-YQbIXoEaM


