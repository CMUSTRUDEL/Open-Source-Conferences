Title: All Things Open 2015 | Michael Hausenblas - Mesosphere Inc. | Container Orchestration
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,130 --> 00:00:10,769
so my name is Michael house unless I'm a

00:00:06,569 --> 00:00:14,580
developer advocate atmosphere and yeah

00:00:10,769 --> 00:00:16,680
when I got that invitation and the

00:00:14,580 --> 00:00:19,710
opportunity to speak today about the

00:00:16,680 --> 00:00:22,080
container orchestration I thought let's

00:00:19,710 --> 00:00:24,930
do something different like like usually

00:00:22,080 --> 00:00:27,630
I have this story from A to Z and this

00:00:24,930 --> 00:00:30,449
one is really a bunch of questions that

00:00:27,630 --> 00:00:31,980
I constantly get and it's kind of like

00:00:30,449 --> 00:00:34,590
here's the question and here's the

00:00:31,980 --> 00:00:36,239
answer and because I'm a really lazy

00:00:34,590 --> 00:00:38,879
person I only have so many questions

00:00:36,239 --> 00:00:42,360
prepared and I'm counting on you that

00:00:38,879 --> 00:00:43,950
for the less like last 20-30 minutes you

00:00:42,360 --> 00:00:45,750
helped me out of it you come with your

00:00:43,950 --> 00:00:48,329
own questions and hopefully I have the

00:00:45,750 --> 00:00:52,500
answer is that right so this is my first

00:00:48,329 --> 00:00:54,870
and last slide any questions just

00:00:52,500 --> 00:00:57,449
kidding quick show of hands who of you

00:00:54,870 --> 00:01:04,229
is familiar on some level with

00:00:57,449 --> 00:01:07,290
containers darker Wow cool VMs don't be

00:01:04,229 --> 00:01:10,860
shy okay you shall be forgiven so

00:01:07,290 --> 00:01:18,030
containers are like virtual machines

00:01:10,860 --> 00:01:22,259
right who agrees you sure so I would

00:01:18,030 --> 00:01:26,729
argue no and this stack or do not stack

00:01:22,259 --> 00:01:28,710
whoever did that great job I would argue

00:01:26,729 --> 00:01:32,119
no they are not like p.m. they are

00:01:28,710 --> 00:01:37,400
totally not like VMs because they are

00:01:32,119 --> 00:01:40,590
really very light white come and go

00:01:37,400 --> 00:01:42,810
packages for application level

00:01:40,590 --> 00:01:46,110
dependency management so rather than

00:01:42,810 --> 00:01:48,840
providing a full isolated environment

00:01:46,110 --> 00:01:50,189
with a full stack come on in coming in

00:01:48,840 --> 00:01:52,590
there are still plenty of places there

00:01:50,189 --> 00:01:54,780
like at least 15 i see a year on that

00:01:52,590 --> 00:01:59,549
right side or left side from where you

00:01:54,780 --> 00:02:03,290
are so it's really don't approach

00:01:59,549 --> 00:02:05,670
containers with your virtual machine

00:02:03,290 --> 00:02:09,080
experience and with your virtual machine

00:02:05,670 --> 00:02:12,390
head on no matter if it's red or not

00:02:09,080 --> 00:02:13,910
really try to think of it like who

00:02:12,390 --> 00:02:16,340
viewed as Python

00:02:13,910 --> 00:02:18,140
right so you know virtual end right

00:02:16,340 --> 00:02:20,690
that's a great thing and it's kind of

00:02:18,140 --> 00:02:22,550
like virtual end for any other language

00:02:20,690 --> 00:02:26,470
who does not have this wonderful

00:02:22,550 --> 00:02:29,690
environment as I said very light white

00:02:26,470 --> 00:02:31,430
the average run time and I've linked it

00:02:29,690 --> 00:02:34,340
from here going to upload that deck

00:02:31,430 --> 00:02:38,360
after the talk on to a speaker deck and

00:02:34,340 --> 00:02:39,970
share it I think New Relic found that

00:02:38,360 --> 00:02:43,730
it's in a couple of minutes so

00:02:39,970 --> 00:02:45,560
containers literally come and go much

00:02:43,730 --> 00:02:48,230
faster than I can deliver this talk to

00:02:45,560 --> 00:02:50,030
you and last but not least it is pats vs

00:02:48,230 --> 00:02:54,440
kettle who if you have heard about pets

00:02:50,030 --> 00:02:57,290
vs cal of course you have so these are

00:02:54,440 --> 00:02:58,910
the well-known pads and really doesn't

00:02:57,290 --> 00:03:02,330
make a difference if you're talking

00:02:58,910 --> 00:03:04,580
about hardware or a virtual machine you

00:03:02,330 --> 00:03:06,050
really do care about your little babies

00:03:04,580 --> 00:03:07,610
there and if they get sick you you're

00:03:06,050 --> 00:03:09,920
trying to nurse them back into health

00:03:07,610 --> 00:03:12,350
and they're they're gorgeous and they're

00:03:09,920 --> 00:03:17,030
nice and they have names and whatnot but

00:03:12,350 --> 00:03:19,060
we're really talking about cat right no

00:03:17,030 --> 00:03:21,980
matter if you're vegetarian or not

00:03:19,060 --> 00:03:24,800
someone I saw someone giving a talk that

00:03:21,980 --> 00:03:27,560
you know I'm a vegetarian so it's there

00:03:24,800 --> 00:03:29,660
was something else like not pets versus

00:03:27,560 --> 00:03:31,970
kettle but I can't remember what but

00:03:29,660 --> 00:03:33,560
someone said like that's not Craig it's

00:03:31,970 --> 00:03:36,860
like totally missing the point the point

00:03:33,560 --> 00:03:40,190
being you don't give a about this

00:03:36,860 --> 00:03:42,560
single instance if it's pat kettle or I

00:03:40,190 --> 00:03:46,880
don't know what it is the fact that you

00:03:42,560 --> 00:03:49,489
do not give whatever about the single

00:03:46,880 --> 00:03:51,140
instance so if one of these containers

00:03:49,489 --> 00:03:53,930
dies so what you're going to launch

00:03:51,140 --> 00:04:00,230
another one very fast and hopefully

00:03:53,930 --> 00:04:04,320
automatically our containers secure

00:04:00,230 --> 00:04:06,450
so when I we've got three kids and what

00:04:04,320 --> 00:04:08,430
they learned already in kindergarten you

00:04:06,450 --> 00:04:10,170
know with knives and and pairs of

00:04:08,430 --> 00:04:11,760
scissors or whatever you know there's

00:04:10,170 --> 00:04:13,710
particular way how you're supposed to

00:04:11,760 --> 00:04:16,320
handle them right and if you run around

00:04:13,710 --> 00:04:18,630
with a nice like that then well I'm

00:04:16,320 --> 00:04:21,420
sorry if you hurt yourself because you

00:04:18,630 --> 00:04:24,960
shouldn't you should not handle a knife

00:04:21,420 --> 00:04:27,900
like that and you should not you know

00:04:24,960 --> 00:04:30,360
handle containers in a certain way so

00:04:27,900 --> 00:04:33,419
obviously containers Linux containers

00:04:30,360 --> 00:04:35,610
are sharing all the same kernel so if

00:04:33,419 --> 00:04:39,660
you can break out of that container well

00:04:35,610 --> 00:04:41,900
and if you're happy to be rude then you

00:04:39,660 --> 00:04:47,390
know god help you or whoever you believe

00:04:41,900 --> 00:04:50,850
the force namespaces we're almost there

00:04:47,390 --> 00:04:54,150
namespaces are assuming Linux namespaces

00:04:50,850 --> 00:04:56,880
like process networking and so on might

00:04:54,150 --> 00:04:59,820
be familiar with that almost there

00:04:56,880 --> 00:05:02,730
because one part the username space is

00:04:59,820 --> 00:05:05,130
not entirely done yet so I think they

00:05:02,730 --> 00:05:11,880
are in the process darker to at least

00:05:05,130 --> 00:05:14,280
map the route you id0 but so this is one

00:05:11,880 --> 00:05:15,950
one topic where you could argue that

00:05:14,280 --> 00:05:18,780
it's not entirely safe but you know

00:05:15,950 --> 00:05:21,030
getting there and there are things you

00:05:18,780 --> 00:05:23,669
can do you can actively for example lock

00:05:21,030 --> 00:05:25,350
down the networking ICC for into

00:05:23,669 --> 00:05:27,360
container communication so you can

00:05:25,350 --> 00:05:29,490
disallow the containers on a certain

00:05:27,360 --> 00:05:31,440
host to talk with each other and

00:05:29,490 --> 00:05:34,320
obviously the same is true for storage

00:05:31,440 --> 00:05:36,330
so things like please please please do

00:05:34,320 --> 00:05:38,180
not bake your credentials in the images

00:05:36,330 --> 00:05:41,280
and then upload them on the docker hub

00:05:38,180 --> 00:05:43,470
you could rather you know if you if you

00:05:41,280 --> 00:05:45,180
must then you could pass these

00:05:43,470 --> 00:05:47,880
credentials like I don't know your

00:05:45,180 --> 00:05:50,580
Twitter tokens or whatever through

00:05:47,880 --> 00:05:53,340
environment variables you can even

00:05:50,580 --> 00:05:56,460
better put it on a shared volume have a

00:05:53,340 --> 00:05:58,560
data volume container there or if you

00:05:56,460 --> 00:06:01,710
really Pro and you want to brag about

00:05:58,560 --> 00:06:03,960
how secure containers are then you might

00:06:01,710 --> 00:06:06,230
want to use one of these key value idly

00:06:03,960 --> 00:06:09,320
in memory stores such as

00:06:06,230 --> 00:06:12,800
squares key with Pesci Corp has volt or

00:06:09,320 --> 00:06:15,590
crypt and they will make sure that your

00:06:12,800 --> 00:06:17,600
credentials are only in memory and are

00:06:15,590 --> 00:06:20,450
only there for the time being where

00:06:17,600 --> 00:06:25,400
they're needed and not you know end up

00:06:20,450 --> 00:06:28,130
on github or work now the next one is

00:06:25,400 --> 00:06:30,290
kind of like you know that's that's kind

00:06:28,130 --> 00:06:33,020
of the essence of that talk right should

00:06:30,290 --> 00:06:35,570
I really be using a container

00:06:33,020 --> 00:06:37,220
orchestration tool and maybe it was not

00:06:35,570 --> 00:06:39,610
yet clear what an orchestration tool

00:06:37,220 --> 00:06:42,170
does but we get to that question and

00:06:39,610 --> 00:06:45,200
here my good old friend William data

00:06:42,170 --> 00:06:47,000
center Shakespeare I think it is no

00:06:45,200 --> 00:06:50,510
question that you should automate things

00:06:47,000 --> 00:06:54,260
right you should not be the one who gets

00:06:50,510 --> 00:06:58,720
a wake-up call at 3m you go in there and

00:06:54,260 --> 00:07:03,350
ssh into that box and we launched a tap

00:06:58,720 --> 00:07:05,390
so absolutely yes you should use these

00:07:03,350 --> 00:07:09,040
orchestration tools I'm going to talk

00:07:05,390 --> 00:07:11,570
about some of them in greater detail

00:07:09,040 --> 00:07:14,810
besides these these annoying wake-up

00:07:11,570 --> 00:07:18,740
calls there is this elasticity so you

00:07:14,810 --> 00:07:20,630
can easily scale out you can based on

00:07:18,740 --> 00:07:23,420
the traffic based on business needs and

00:07:20,630 --> 00:07:26,450
preferences you can just add more

00:07:23,420 --> 00:07:32,350
resources there without any any manual

00:07:26,450 --> 00:07:35,450
intervention next one I quite often get

00:07:32,350 --> 00:07:40,070
how do I launch let's say a 100,000

00:07:35,450 --> 00:07:43,490
containers right so your Google or

00:07:40,070 --> 00:07:45,980
Facebook or Twitter or what well turns

00:07:43,490 --> 00:07:50,000
out that small is beautiful and I've

00:07:45,980 --> 00:07:53,540
linked a very nice talk of a guy from

00:07:50,000 --> 00:07:57,290
Goethe fraga in in Germany a small shop

00:07:53,540 --> 00:07:59,960
or mid-sized shop and continued the

00:07:57,290 --> 00:08:02,480
point at meses con two weeks ago that

00:07:59,960 --> 00:08:04,670
you know you do not necessarily have to

00:08:02,480 --> 00:08:06,650
have hundreds or thousands of nodes

00:08:04,670 --> 00:08:08,570
under management in order to benefit

00:08:06,650 --> 00:08:11,660
from these orchestration tools they

00:08:08,570 --> 00:08:14,420
literally have six nodes and it usually

00:08:11,660 --> 00:08:15,950
paid pays off for them it turns out to

00:08:14,420 --> 00:08:16,780
use in their case messes but it's not

00:08:15,950 --> 00:08:19,840
cool fine

00:08:16,780 --> 00:08:23,889
message the second link I've here is

00:08:19,840 --> 00:08:25,900
containers at scale is hard which which

00:08:23,889 --> 00:08:30,130
is an article I recently wrote on the

00:08:25,900 --> 00:08:31,840
platform which describes or or discusses

00:08:30,130 --> 00:08:33,849
the challenges that you have if you want

00:08:31,840 --> 00:08:35,710
to really scale if you one day find

00:08:33,849 --> 00:08:38,560
yourself being Google or Twitter or

00:08:35,710 --> 00:08:42,789
Facebook and want to have or I need to

00:08:38,560 --> 00:08:45,880
to manage thousands or more notes so

00:08:42,789 --> 00:08:48,610
what exactly should I use or you I'm

00:08:45,880 --> 00:08:52,240
obviously always using mesos as you can

00:08:48,610 --> 00:08:55,330
imagine so for a handful of notes let's

00:08:52,240 --> 00:08:57,820
say five or ten or whatever pick

00:08:55,330 --> 00:09:00,070
whatever you like Hachey corp like two

00:08:57,820 --> 00:09:01,810
weeks ago announced nomads and if you're

00:09:00,070 --> 00:09:04,060
using vagrant and other things you know

00:09:01,810 --> 00:09:05,770
these guys know how to you know package

00:09:04,060 --> 00:09:07,570
things nicely and make it very easy for

00:09:05,770 --> 00:09:10,420
people to use their is communities a

00:09:07,570 --> 00:09:12,580
one-year-old community project open

00:09:10,420 --> 00:09:14,890
source project led and initiated by

00:09:12,580 --> 00:09:17,500
google where they essentially port there

00:09:14,890 --> 00:09:19,360
10 on years of experience of running

00:09:17,500 --> 00:09:21,730
containers that scale into this

00:09:19,360 --> 00:09:24,880
open-source project some people say it's

00:09:21,730 --> 00:09:27,160
bit cumbersome to to set up and maintain

00:09:24,880 --> 00:09:28,810
if that is your worried come to me we

00:09:27,160 --> 00:09:31,630
have a product there that does that for

00:09:28,810 --> 00:09:35,170
you you can use docker swarm it's a bit

00:09:31,630 --> 00:09:37,450
you it's a bit like you know not totally

00:09:35,170 --> 00:09:39,190
baked yet but you can use it for a

00:09:37,450 --> 00:09:41,620
handful of notes and you can obviously

00:09:39,190 --> 00:09:45,570
use the Petry message if you happen to

00:09:41,620 --> 00:09:49,990
have a bit more like 100 200 or whatever

00:09:45,570 --> 00:09:51,910
the the selection pool you know is a bit

00:09:49,990 --> 00:09:55,360
smaller community still works nicely

00:09:51,910 --> 00:09:57,070
mess is still and north of that pretty

00:09:55,360 --> 00:10:00,730
much currently the only open source

00:09:57,070 --> 00:10:02,950
solution you have is Apache message and

00:10:00,730 --> 00:10:06,490
i'm happy to everyone anyone who wants

00:10:02,950 --> 00:10:09,339
to challenge me on that to a engage so I

00:10:06,490 --> 00:10:12,760
I or you already use chef puppet and

00:10:09,339 --> 00:10:14,770
civil sorry redhead folks thank whatever

00:10:12,760 --> 00:10:17,820
do I really need a container

00:10:14,770 --> 00:10:17,820
orchestration system

00:10:19,139 --> 00:10:26,369
yeah yes so the thing is it's really

00:10:22,980 --> 00:10:29,309
horses for courses obviously when we set

00:10:26,369 --> 00:10:31,230
up a cluster and in whatever I mean like

00:10:29,309 --> 00:10:33,779
mesosphere no matter if it's the

00:10:31,230 --> 00:10:36,899
community edition or on pram we

00:10:33,779 --> 00:10:40,230
obviously need to provision the hosts

00:10:36,899 --> 00:10:42,899
the note the committee edition for

00:10:40,230 --> 00:10:44,669
example we use Korres and we obviously

00:10:42,899 --> 00:10:46,619
have you know there are things like

00:10:44,669 --> 00:10:50,269
ansible are perfectly valid you don't

00:10:46,619 --> 00:10:53,129
need to implement any very complex and

00:10:50,269 --> 00:10:55,079
complicated logic there it's kind of

00:10:53,129 --> 00:10:58,439
fire and forget you need to set set up

00:10:55,079 --> 00:11:00,929
your operating system in our case the

00:10:58,439 --> 00:11:03,239
message agent and that's pretty much it

00:11:00,929 --> 00:11:05,939
you don't need anything else because all

00:11:03,239 --> 00:11:08,249
the rest the resource abstraction the

00:11:05,939 --> 00:11:10,559
scheduling decisions and so on are taken

00:11:08,249 --> 00:11:14,519
care of by the container orchestration

00:11:10,559 --> 00:11:17,209
system so really if you're talking about

00:11:14,519 --> 00:11:19,649
the application level be you know

00:11:17,209 --> 00:11:23,160
microservices or whatever you're talking

00:11:19,649 --> 00:11:25,199
there then this will be taken care of

00:11:23,160 --> 00:11:29,489
and that lets me leads me to the next

00:11:25,199 --> 00:11:33,540
one by this orchestration framework or

00:11:29,489 --> 00:11:40,529
two so container orchestration that's

00:11:33,540 --> 00:11:43,829
microservices right well sounds got a

00:11:40,529 --> 00:11:48,179
comment on that but there is a kernel of

00:11:43,829 --> 00:11:50,339
truth there it's it's somehow to some

00:11:48,179 --> 00:11:54,569
extend it is an orthogonal issue so I've

00:11:50,339 --> 00:11:56,999
seen certainly a few successful ones

00:11:54,569 --> 00:11:58,529
that didn't use any you know darker

00:11:56,999 --> 00:12:01,259
containerized environments at all

00:11:58,529 --> 00:12:03,499
typically especially if you have green

00:12:01,259 --> 00:12:05,669
grass you know like you have a clean

00:12:03,499 --> 00:12:09,239
plate and then you start from from

00:12:05,669 --> 00:12:11,160
scratch then people typically opt for

00:12:09,239 --> 00:12:12,929
for containerized workloads and by that

00:12:11,160 --> 00:12:15,269
I mean they essentially say okay we're

00:12:12,929 --> 00:12:17,309
going to build our dark images here we

00:12:15,269 --> 00:12:20,609
have a CI CD pipeline here and we're

00:12:17,309 --> 00:12:22,589
going to deploy that into prod but more

00:12:20,609 --> 00:12:26,249
often than not the the more basic

00:12:22,589 --> 00:12:29,740
question that i tend to ask prospects or

00:12:26,249 --> 00:12:33,250
customers is are you actually using gate

00:12:29,740 --> 00:12:35,380
for mercurial if you must are you do you

00:12:33,250 --> 00:12:37,680
have the CRCT pipeline something like

00:12:35,380 --> 00:12:40,380
Jenkins or bamboo or whatever you want

00:12:37,680 --> 00:12:43,720
and actually how do you deploy your

00:12:40,380 --> 00:12:45,370
images and again if it's a containerized

00:12:43,720 --> 00:12:48,850
workload than your docker images and

00:12:45,370 --> 00:12:51,460
that's linked here to a talk a Facebook

00:12:48,850 --> 00:12:53,820
guy gave a darker Khan around their

00:12:51,460 --> 00:12:56,050
infrastructure Tupperware which is

00:12:53,820 --> 00:12:58,090
although they don't reveal too many

00:12:56,050 --> 00:13:01,960
low-level details quite interesting

00:12:58,090 --> 00:13:04,690
because it spends the entire cycle from

00:13:01,960 --> 00:13:07,900
the developer's point of view so

00:13:04,690 --> 00:13:10,150
summarizing and that one you do not need

00:13:07,900 --> 00:13:13,180
to use containers but if you use

00:13:10,150 --> 00:13:15,040
containers for microservice implementing

00:13:13,180 --> 00:13:16,540
microservices architecture then guess

00:13:15,040 --> 00:13:22,660
what you will need a container

00:13:16,540 --> 00:13:24,670
orchestration system the next one this

00:13:22,660 --> 00:13:27,700
is this comes out of this you know

00:13:24,670 --> 00:13:30,370
on-premises versus cloud by hybrid or

00:13:27,700 --> 00:13:34,390
whatever and it is very often only in

00:13:30,370 --> 00:13:36,280
our minds it's it's not so much what is

00:13:34,390 --> 00:13:41,740
possible but what we think is possible

00:13:36,280 --> 00:13:44,740
and that is really there are just

00:13:41,740 --> 00:13:48,670
different things that are important so

00:13:44,740 --> 00:13:51,610
for example if if you figure out oh I

00:13:48,670 --> 00:13:53,980
need totally no scaling out I need three

00:13:51,610 --> 00:13:58,150
more nodes in order to accommodate the

00:13:53,980 --> 00:13:59,860
the traffic or or whatever throughput so

00:13:58,150 --> 00:14:01,420
obviously on-premises that means

00:13:59,860 --> 00:14:04,600
something different then you know you

00:14:01,420 --> 00:14:09,280
click something on AWS and up comes the

00:14:04,600 --> 00:14:11,500
new new instance there but at the end of

00:14:09,280 --> 00:14:14,050
the day what you should think I believe

00:14:11,500 --> 00:14:17,890
at least for the you know next couple of

00:14:14,050 --> 00:14:21,370
years is you might start off with a pure

00:14:17,890 --> 00:14:23,800
on-premises solution you might for you

00:14:21,370 --> 00:14:27,400
know bursting out for special seasons or

00:14:23,800 --> 00:14:30,520
a special day whatever intercloud or

00:14:27,400 --> 00:14:32,800
even if you're in one cloud for for

00:14:30,520 --> 00:14:35,080
various reasons you might want to follow

00:14:32,800 --> 00:14:37,060
this hybrid cloud pattern as I said

00:14:35,080 --> 00:14:38,740
either on-premises into the cloud or

00:14:37,060 --> 00:14:43,779
between different cloud

00:14:38,740 --> 00:14:47,970
vendors so everything has its

00:14:43,779 --> 00:14:50,620
limitations and you know one very valid

00:14:47,970 --> 00:14:53,010
argument or question there is there must

00:14:50,620 --> 00:14:55,720
be some downsides to that right you you

00:14:53,010 --> 00:14:57,339
it can't be a silver bullet and I'm not

00:14:55,720 --> 00:15:00,399
trying to you know sell you on that it

00:14:57,339 --> 00:15:04,149
is a silver bullet so the collection

00:15:00,399 --> 00:15:08,140
kitty should symbolize that I would

00:15:04,149 --> 00:15:10,300
argue that mainly it is a social

00:15:08,140 --> 00:15:13,390
challenge rather than a technology

00:15:10,300 --> 00:15:15,100
challenged I personally I don't give a

00:15:13,390 --> 00:15:17,709
rat's ass if you're using messes or

00:15:15,100 --> 00:15:19,690
nomads well I would prefer you to use

00:15:17,709 --> 00:15:22,360
messes like it can give you a lot of

00:15:19,690 --> 00:15:25,180
reasons why but I don't care as long as

00:15:22,360 --> 00:15:29,320
you use as you don't deploy and manage

00:15:25,180 --> 00:15:31,209
your containers by hand but there you

00:15:29,320 --> 00:15:33,100
know it might be your boss it might be

00:15:31,209 --> 00:15:35,709
your colleagues you know the guy who's

00:15:33,100 --> 00:15:37,330
ready 30 years around and and says you

00:15:35,709 --> 00:15:40,270
know this is really a stupid idea you

00:15:37,330 --> 00:15:42,640
cannot do that get them a copy of the

00:15:40,270 --> 00:15:45,730
Phoenix project a wonderful book it will

00:15:42,640 --> 00:15:47,230
motivate everything from this DevOps

00:15:45,730 --> 00:15:48,579
movement with whatever you want to call

00:15:47,230 --> 00:15:51,579
it and there are a couple of other

00:15:48,579 --> 00:15:53,260
really really good books and as i said

00:15:51,579 --> 00:15:55,720
i'm going to share that you won't be

00:15:53,260 --> 00:15:59,529
able to read that most of them are Riley

00:15:55,720 --> 00:16:01,990
the one on the right right hand side

00:15:59,529 --> 00:16:04,660
from your point of view is Manning

00:16:01,990 --> 00:16:06,940
written by colleague of mine but all of

00:16:04,660 --> 00:16:10,770
them essentially get you off the ground

00:16:06,940 --> 00:16:14,110
be darker be mesos beach communities

00:16:10,770 --> 00:16:16,630
Norma this is too too young haven't seen

00:16:14,110 --> 00:16:17,920
a bogan locker swarm yet it's partially

00:16:16,630 --> 00:16:21,040
captured by by the document production

00:16:17,920 --> 00:16:26,350
book we've put together a community side

00:16:21,040 --> 00:16:28,209
which is called p24 e-i-e-i-o p24 East

00:16:26,350 --> 00:16:30,220
End's for programmable infrastructure

00:16:28,209 --> 00:16:34,390
because this is such a long word we've

00:16:30,220 --> 00:16:37,000
shorten it down to pee 2040 this is

00:16:34,390 --> 00:16:40,060
based on github so pull requests are

00:16:37,000 --> 00:16:42,370
more than welcome and as this seems to

00:16:40,060 --> 00:16:44,350
be a common pattern I expect a pull

00:16:42,370 --> 00:16:45,770
request for each and every one of you by

00:16:44,350 --> 00:16:48,480
end of day thank you very much

00:16:45,770 --> 00:16:51,420
and now it's really your turn and please

00:16:48,480 --> 00:16:53,160
please please think about that we really

00:16:51,420 --> 00:16:54,900
need to start worrying about what kind

00:16:53,160 --> 00:16:57,750
of world we're going to leave for Keith

00:16:54,900 --> 00:17:01,040
Richards over to you what questions have

00:16:57,750 --> 00:17:01,040
you got one day

00:17:08,120 --> 00:17:12,870
alright so I repeat the question the

00:17:10,769 --> 00:17:14,610
question was if I got that right when

00:17:12,870 --> 00:17:16,500
you're doing local development on your

00:17:14,610 --> 00:17:19,350
laptop what kind of environment would I

00:17:16,500 --> 00:17:21,659
use excellent question I didn't pay you

00:17:19,350 --> 00:17:23,579
to ask that question it would have been

00:17:21,659 --> 00:17:27,240
actually the next one that I was too

00:17:23,579 --> 00:17:31,070
lazy to put there so thank you again it

00:17:27,240 --> 00:17:35,070
depends it depends most of them

00:17:31,070 --> 00:17:39,840
including yeah all of them so no matter

00:17:35,070 --> 00:17:41,880
in a diez meses and and and swarm have

00:17:39,840 --> 00:17:44,760
typically based on vagrants a vagrant

00:17:41,880 --> 00:17:46,740
box and depending on on your needs so if

00:17:44,760 --> 00:17:48,980
you want to do simple stuff than one

00:17:46,740 --> 00:17:51,840
variant box one virtual machine would do

00:17:48,980 --> 00:17:54,510
sometimes you want to do you know things

00:17:51,840 --> 00:17:56,070
like Strickler brain or whatever where

00:17:54,510 --> 00:17:58,289
you actually need to ramp up like three

00:17:56,070 --> 00:18:01,409
or four where three probably my competed

00:17:58,289 --> 00:18:03,750
the next if you can ramp up on a 16 gig

00:18:01,409 --> 00:18:06,389
machine like that background box is to

00:18:03,750 --> 00:18:08,130
simulate a extra cluster but yeah that

00:18:06,389 --> 00:18:10,799
the general answer would be you will

00:18:08,130 --> 00:18:13,919
find each of these orchestration or

00:18:10,799 --> 00:18:16,980
scheduler frameworks a vagrant box that

00:18:13,919 --> 00:18:20,490
allows you to do that the other option

00:18:16,980 --> 00:18:23,279
that we also sometimes do or very often

00:18:20,490 --> 00:18:26,730
do we have an internal tool called CCM

00:18:23,279 --> 00:18:29,309
the cloud container no cloud whatever

00:18:26,730 --> 00:18:32,880
manager it's essentially just clicking

00:18:29,309 --> 00:18:35,750
on a button and a gram sabha cluster so

00:18:32,880 --> 00:18:40,559
for certain things if you think about

00:18:35,750 --> 00:18:44,570
latency if you think about how how

00:18:40,559 --> 00:18:47,279
things work in a like 5 10 15 note

00:18:44,570 --> 00:18:49,559
environment you would still have the the

00:18:47,279 --> 00:18:53,610
interface like for example hakuna TCB

00:18:49,559 --> 00:18:55,380
cube control meses or the dcs it would

00:18:53,610 --> 00:18:57,120
be a quant line interface as well or

00:18:55,380 --> 00:18:59,340
rest interface of whatever you have you

00:18:57,120 --> 00:19:01,710
would still have that part of the

00:18:59,340 --> 00:19:03,299
interaction on your local machine but

00:19:01,710 --> 00:19:04,409
the rest would be in the cloud and as I

00:19:03,299 --> 00:19:06,450
said for certain things you would

00:19:04,409 --> 00:19:08,789
probably need that but most of the time

00:19:06,450 --> 00:19:13,100
you get by using these vagrant boxes

00:19:08,789 --> 00:19:13,100
that okay yes please

00:19:26,029 --> 00:19:30,749
so the question if I got it right was

00:19:28,440 --> 00:19:33,289
how do i scale up a micro services

00:19:30,749 --> 00:19:33,289
architecture

00:19:39,040 --> 00:19:45,580
oh alright alright so before I answer

00:19:42,760 --> 00:19:49,480
that I stepping back like just to

00:19:45,580 --> 00:19:52,150
clarify the the the terms here that

00:19:49,480 --> 00:19:54,070
we're using when I talk about the

00:19:52,150 --> 00:19:56,350
service I talk about something that

00:19:54,070 --> 00:19:58,330
typically has one function one function

00:19:56,350 --> 00:20:00,910
only a bit like you know grab or

00:19:58,330 --> 00:20:03,850
something on your local box so it has an

00:20:00,910 --> 00:20:05,380
interface obviously and it does one

00:20:03,850 --> 00:20:07,540
thing and hopefully one thing really

00:20:05,380 --> 00:20:09,280
good when I talk about an application

00:20:07,540 --> 00:20:12,310
it's something that typically has you

00:20:09,280 --> 00:20:14,650
know a UI typically poles or engages a

00:20:12,310 --> 00:20:17,230
couple of services and it's something

00:20:14,650 --> 00:20:20,230
end user facing some someone interacting

00:20:17,230 --> 00:20:22,180
with that so if when agreement regarding

00:20:20,230 --> 00:20:25,630
that then the main question is really

00:20:22,180 --> 00:20:28,240
how do you define the service layout and

00:20:25,630 --> 00:20:31,090
one thing I didn't talk about lot here

00:20:28,240 --> 00:20:33,940
but there will soon be a book around

00:20:31,090 --> 00:20:37,750
that topic is service discovery which is

00:20:33,940 --> 00:20:40,330
a topic that it's it's kind of like two

00:20:37,750 --> 00:20:42,910
sides of the same coin if you are

00:20:40,330 --> 00:20:45,700
starting to use these container

00:20:42,910 --> 00:20:48,280
orchestration tools it's essentially you

00:20:45,700 --> 00:20:51,340
are not in control anymore where these

00:20:48,280 --> 00:20:53,620
containers left and the only entity in

00:20:51,340 --> 00:20:55,870
this system that knows about that is the

00:20:53,620 --> 00:20:57,400
scheduler that decides oh I've got

00:20:55,870 --> 00:20:59,950
enough resources on that box I'm going

00:20:57,400 --> 00:21:01,660
to put that container day so the service

00:20:59,950 --> 00:21:03,660
discovery what service discovery in this

00:21:01,660 --> 00:21:05,770
container set up really means is

00:21:03,660 --> 00:21:07,180
something that interacts with the

00:21:05,770 --> 00:21:09,550
scheduler acquiring the scatterer

00:21:07,180 --> 00:21:11,560
whatever saying like you know what is

00:21:09,550 --> 00:21:13,600
your current state of the world where

00:21:11,560 --> 00:21:16,300
all your containers running on what IP

00:21:13,600 --> 00:21:18,600
and port are they available there are a

00:21:16,300 --> 00:21:21,490
couple of these service discovery

00:21:18,600 --> 00:21:23,320
components and depending on you know for

00:21:21,490 --> 00:21:24,970
example if you're already using Sookie

00:21:23,320 --> 00:21:29,620
bird and you can use to keeper for that

00:21:24,970 --> 00:21:33,970
their console there is Eureka from from

00:21:29,620 --> 00:21:36,700
netflix smarts leg from airbnb there is

00:21:33,970 --> 00:21:39,730
a couple of GS based solution sky dns

00:21:36,700 --> 00:21:42,460
message dns we've works and so on and so

00:21:39,730 --> 00:21:45,420
forth a couple of like almost too many

00:21:42,460 --> 00:21:48,700
options but this is the critical element

00:21:45,420 --> 00:21:51,430
that you will need to think about before

00:21:48,700 --> 00:21:53,650
you you know start that

00:21:51,430 --> 00:21:57,250
you know planning what kind of service

00:21:53,650 --> 00:22:01,420
discovery will be the basis so there are

00:21:57,250 --> 00:22:03,670
things like IP assignment do you use

00:22:01,420 --> 00:22:07,540
static port assignment or dynamic port

00:22:03,670 --> 00:22:09,010
assignment where is kind of baked into

00:22:07,540 --> 00:22:12,370
the client or do you have it as a

00:22:09,010 --> 00:22:14,740
sidekick processor a lot of decisions

00:22:12,370 --> 00:22:17,560
and then you probably will revise them

00:22:14,740 --> 00:22:19,750
and change them over time that you you

00:22:17,560 --> 00:22:21,670
need to you know be at least be aware of

00:22:19,750 --> 00:22:24,040
the options so service discovery being

00:22:21,670 --> 00:22:26,650
probably one of the most fundamental

00:22:24,040 --> 00:22:29,050
parts because it has an implication into

00:22:26,650 --> 00:22:33,070
all these these different services the

00:22:29,050 --> 00:22:36,580
rest is pretty much dependent on the

00:22:33,070 --> 00:22:38,320
tool you're using for example both nomad

00:22:36,580 --> 00:22:41,860
and marathon which is a framework on top

00:22:38,320 --> 00:22:45,610
of mesos that allows you to run any

00:22:41,860 --> 00:22:47,650
kinds of long running tasks have the

00:22:45,610 --> 00:22:50,080
concept of applications and groups so

00:22:47,650 --> 00:22:52,810
you can group applications and scale

00:22:50,080 --> 00:22:54,310
them up and down communities uses a

00:22:52,810 --> 00:22:56,260
slightly different approach it's called

00:22:54,310 --> 00:22:58,450
labels so you're labeling different

00:22:56,260 --> 00:23:01,300
objects be that service or whatever and

00:22:58,450 --> 00:23:04,180
then you essentially query through these

00:23:01,300 --> 00:23:05,940
labels it's a kind of flat way of

00:23:04,180 --> 00:23:08,200
organizing things but it's much more

00:23:05,940 --> 00:23:10,840
flexible in these applications and

00:23:08,200 --> 00:23:14,350
groups and that's pretty much everything

00:23:10,840 --> 00:23:16,870
so if you decided on your service

00:23:14,350 --> 00:23:20,050
discovery and whatever the respective

00:23:16,870 --> 00:23:23,050
orchestration tool you know imposes or

00:23:20,050 --> 00:23:28,710
or you know allows you to do that's

00:23:23,050 --> 00:23:34,720
pretty much all you need yeah sorry

00:23:28,710 --> 00:23:39,490
if I have ever used clarified note all

00:23:34,720 --> 00:23:41,350
right any more questions so i will be

00:23:39,490 --> 00:23:48,630
around today also tomorrow if you want

00:23:41,350 --> 00:23:48,630

YouTube URL: https://www.youtube.com/watch?v=lwbeOBDG2cc


