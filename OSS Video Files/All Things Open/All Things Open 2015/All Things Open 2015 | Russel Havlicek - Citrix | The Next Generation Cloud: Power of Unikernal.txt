Title: All Things Open 2015 | Russel Havlicek - Citrix | The Next Generation Cloud: Power of Unikernal
Publication date: 2015-11-19
Playlist: All Things Open 2015
Description: 
	All Things Open 2014 All Things Open 2015, October 19th and 20th, Raleigh NC. All Things Open 2015, October 19th and 20th, Raleigh NC.
Captions: 
	00:00:04,970 --> 00:00:09,900
we got a minute or two until we start

00:00:07,649 --> 00:00:13,280
but just show of hands how many people

00:00:09,900 --> 00:00:15,330
consider themselves local to the area

00:00:13,280 --> 00:00:18,240
okay that's good that's an interesting

00:00:15,330 --> 00:00:21,800
crowd right there how many people

00:00:18,240 --> 00:00:26,119
consider yourselves open-source people

00:00:21,800 --> 00:00:29,580
okay there's a mix that's interesting

00:00:26,119 --> 00:00:34,489
how many people this is your first open

00:00:29,580 --> 00:00:38,100
source conference excellent excellent

00:00:34,489 --> 00:00:40,710
terrific my first time to this

00:00:38,100 --> 00:00:43,190
particular conference but I go all

00:00:40,710 --> 00:00:46,410
around the country and beyond sometimes

00:00:43,190 --> 00:00:48,270
speaking at various events and this

00:00:46,410 --> 00:00:52,289
one's quite exciting the way it's been

00:00:48,270 --> 00:00:55,280
growing in this area so you're onto

00:00:52,289 --> 00:00:55,280
something really good here I think

00:00:58,430 --> 00:01:04,489
helps to have red hat across the street

00:01:00,530 --> 00:01:09,170
you know once upon a time in the dark

00:01:04,489 --> 00:01:11,450
ages as in the late 1990s there was a

00:01:09,170 --> 00:01:13,430
thing called Linux expo I don't mean

00:01:11,450 --> 00:01:16,400
Linux world conference next by me Linux

00:01:13,430 --> 00:01:19,910
expo which used to be in this area and

00:01:16,400 --> 00:01:21,369
red hat was a significant had a

00:01:19,910 --> 00:01:27,619
significant involvement in that as well

00:01:21,369 --> 00:01:29,180
but that was soon overwhelmed with some

00:01:27,619 --> 00:01:31,369
of these other larger conferences that

00:01:29,180 --> 00:01:33,500
came along and it disappeared but I

00:01:31,369 --> 00:01:36,380
think it's kind of really nice to have

00:01:33,500 --> 00:01:39,380
this sitting in this area once again

00:01:36,380 --> 00:01:42,350
this is a very neat sort of conference

00:01:39,380 --> 00:01:48,860
and lots of good speakers i'm seeing a

00:01:42,350 --> 00:01:51,920
really nice line up here i know i'm from

00:01:48,860 --> 00:01:53,390
maryland so for me this is actually one

00:01:51,920 --> 00:01:59,420
of the shortest trips i make during the

00:01:53,390 --> 00:02:02,869
course of the year because i'll i'll do

00:01:59,420 --> 00:02:05,869
a dozen 15 different conferences a year

00:02:02,869 --> 00:02:08,179
and most of the time it involves getting

00:02:05,869 --> 00:02:11,660
on a plane to the west coast which is

00:02:08,179 --> 00:02:13,880
such an exciting proposition but you

00:02:11,660 --> 00:02:16,640
know it's really nice to have things on

00:02:13,880 --> 00:02:18,640
this coast that bring a lot of value and

00:02:16,640 --> 00:02:21,470
so I hope you're going to find that

00:02:18,640 --> 00:02:25,540
there's a lot of reason for you to find

00:02:21,470 --> 00:02:28,160
that from what I'm seeing I think we are

00:02:25,540 --> 00:02:31,940
pretty much at the starting point so I'm

00:02:28,160 --> 00:02:37,459
not going to waste much more time thank

00:02:31,940 --> 00:02:38,750
you for for coming today this is the

00:02:37,459 --> 00:02:41,290
cloud room we're going to talk about the

00:02:38,750 --> 00:02:43,370
next generation cloud and in particular

00:02:41,290 --> 00:02:45,170
something called yoona curls how many

00:02:43,370 --> 00:02:48,200
people have heard the term yoona kernels

00:02:45,170 --> 00:02:49,370
before how many people if I asked you to

00:02:48,200 --> 00:02:54,320
define you think you could give a

00:02:49,370 --> 00:02:57,620
definition okay that's about right you

00:02:54,320 --> 00:03:01,549
know it's an area that is very new and

00:02:57,620 --> 00:03:04,220
it's very exciting and like I said I

00:03:01,549 --> 00:03:04,790
give a lot of talks a lot of places that

00:03:04,220 --> 00:03:08,329
I've done

00:03:04,790 --> 00:03:10,430
so for many years and this for me is one

00:03:08,329 --> 00:03:14,299
of the most exciting topics I have dealt

00:03:10,430 --> 00:03:16,909
with in quite a long time so it's well

00:03:14,299 --> 00:03:20,810
worth your attention I will not read to

00:03:16,909 --> 00:03:23,810
you the obligatory Who am I screen short

00:03:20,810 --> 00:03:24,950
form is I'm old I'm fat I have a big

00:03:23,810 --> 00:03:27,409
mouth and I've been doing this for a

00:03:24,950 --> 00:03:29,569
long time and you can fill in the blanks

00:03:27,409 --> 00:03:32,000
by the way these slides are available up

00:03:29,569 --> 00:03:36,439
on Zen project org I'm Zen project

00:03:32,000 --> 00:03:38,959
evangelist and a very slightly earlier

00:03:36,439 --> 00:03:40,819
version is out there right now so if you

00:03:38,959 --> 00:03:42,170
see links or information you say oh I

00:03:40,819 --> 00:03:44,329
want to capture that don't bother

00:03:42,170 --> 00:03:46,310
scribbling it down just go to the

00:03:44,329 --> 00:03:51,739
website the presentation section you'll

00:03:46,310 --> 00:03:53,540
find stuff there so why am I'm up here

00:03:51,739 --> 00:03:55,159
you know I'm the Zen project evangelist

00:03:53,540 --> 00:03:57,409
why am i up here talking about something

00:03:55,159 --> 00:04:01,730
called yoona kernels it's not

00:03:57,409 --> 00:04:05,000
particularly a Zen thing but this is the

00:04:01,730 --> 00:04:06,620
forefront I believe of a lot of very

00:04:05,000 --> 00:04:09,769
interesting things that are coming about

00:04:06,620 --> 00:04:11,180
in the cloud Zen project is involved

00:04:09,769 --> 00:04:14,769
with this we want to bring this along

00:04:11,180 --> 00:04:14,769
because we see this is the future and

00:04:15,099 --> 00:04:20,120
there are people have been out there

00:04:16,849 --> 00:04:21,680
talking about unicorns somewhat but they

00:04:20,120 --> 00:04:25,039
tend to talk about their own particular

00:04:21,680 --> 00:04:27,500
work and if this is one of those forests

00:04:25,039 --> 00:04:30,860
and trees situation it's easy to ignore

00:04:27,500 --> 00:04:32,120
a few trees that don't interest you but

00:04:30,860 --> 00:04:33,590
someone's got to talk about the forest

00:04:32,120 --> 00:04:35,510
and once you realize that there is a

00:04:33,590 --> 00:04:37,430
forest growing here you can't ignore it

00:04:35,510 --> 00:04:39,770
anymore and you won't want to ignore it

00:04:37,430 --> 00:04:42,080
i don't believe even if i do trip over

00:04:39,770 --> 00:04:44,300
the wire but this is going to bring

00:04:42,080 --> 00:04:46,699
about some very interesting changes i

00:04:44,300 --> 00:04:48,729
think in the cloud and so we're going to

00:04:46,699 --> 00:04:51,020
discuss that in the next few minutes and

00:04:48,729 --> 00:04:52,610
one of the things that this brings about

00:04:51,020 --> 00:04:54,800
if you were here from our King Cole

00:04:52,610 --> 00:04:57,229
session earlier this morning he

00:04:54,800 --> 00:04:58,940
mentioned about micro services that come

00:04:57,229 --> 00:05:01,060
and go and i think they vary one the

00:04:58,940 --> 00:05:03,680
keynotes there were some of that too

00:05:01,060 --> 00:05:06,380
this enables the whole notion of a

00:05:03,680 --> 00:05:07,820
transient micro service as well as what

00:05:06,380 --> 00:05:09,590
we see in the docker world but this is

00:05:07,820 --> 00:05:12,440
this is really fascinating I think it

00:05:09,590 --> 00:05:14,719
will change the cloud pictures we're

00:05:12,440 --> 00:05:17,930
going forward so let's just spend a few

00:05:14,719 --> 00:05:19,250
minutes first talking about the forest

00:05:17,930 --> 00:05:20,889
why are we talking about unicorns you

00:05:19,250 --> 00:05:25,190
know what's what's the big picture here

00:05:20,889 --> 00:05:28,370
the cloud that we know has been focused

00:05:25,190 --> 00:05:31,520
on orchestration and I say that I was

00:05:28,370 --> 00:05:35,479
part of a cloud start up back in the

00:05:31,520 --> 00:05:37,550
aughts I haven't really heard of a good

00:05:35,479 --> 00:05:40,430
designation of the decade between 2000

00:05:37,550 --> 00:05:43,610
and 2010 so Ott's whatever but back then

00:05:40,430 --> 00:05:45,620
I was with a with a startup that we were

00:05:43,610 --> 00:05:47,270
so young inside the terms of cloud that

00:05:45,620 --> 00:05:48,979
we didn't know the term cloud the term

00:05:47,270 --> 00:05:51,289
cloud had not really been coined and

00:05:48,979 --> 00:05:52,669
applied so we just call ourselves agile

00:05:51,289 --> 00:05:56,150
infrastructure because we do know is

00:05:52,669 --> 00:05:58,160
what else to call it but everything that

00:05:56,150 --> 00:06:01,610
we've dealt with in the cloud until

00:05:58,160 --> 00:06:04,220
recently has been orchestration how to

00:06:01,610 --> 00:06:06,800
get things to come and go and do cloudy

00:06:04,220 --> 00:06:09,050
things and that's well and good that's

00:06:06,800 --> 00:06:11,539
the place where you got to start but the

00:06:09,050 --> 00:06:14,870
workloads that go into the cloud right

00:06:11,539 --> 00:06:16,639
now if you have a cloud in wherever you

00:06:14,870 --> 00:06:19,099
are chances are what you have in that

00:06:16,639 --> 00:06:21,410
cloud looks a heck of a lot like the

00:06:19,099 --> 00:06:24,020
stuff that used to run on bare metal or

00:06:21,410 --> 00:06:26,780
in standard virtualization prior to the

00:06:24,020 --> 00:06:29,599
clown the workloads haven't changed they

00:06:26,780 --> 00:06:34,060
function which is great but they're not

00:06:29,599 --> 00:06:36,169
really very efficient and efficiency is

00:06:34,060 --> 00:06:39,740
one of those issues that we're going to

00:06:36,169 --> 00:06:41,960
see more and more at sea ten years ago I

00:06:39,740 --> 00:06:43,880
was working with a fellow who was

00:06:41,960 --> 00:06:46,909
putting together data center in southern

00:06:43,880 --> 00:06:49,669
Virginia he designed it he implemented

00:06:46,909 --> 00:06:51,620
it when i was there he had maybe half

00:06:49,669 --> 00:06:54,889
the lights on in the place he was moving

00:06:51,620 --> 00:06:56,630
racks in and i was talking with him and

00:06:54,889 --> 00:06:59,389
he said you know this data center is

00:06:56,630 --> 00:07:00,620
full what do you mean it's full you

00:06:59,389 --> 00:07:02,120
don't even have power and i have the

00:07:00,620 --> 00:07:03,169
data center he said no no you don't

00:07:02,120 --> 00:07:04,490
understand i know everything that's

00:07:03,169 --> 00:07:05,960
going in this data center know every

00:07:04,490 --> 00:07:08,120
rack every machine that's going in this

00:07:05,960 --> 00:07:10,520
data center and by the time i bring it

00:07:08,120 --> 00:07:14,479
all and wire it all up turn it all on

00:07:10,520 --> 00:07:17,900
this this place will be full so well why

00:07:14,479 --> 00:07:21,740
would you build a data center that day

00:07:17,900 --> 00:07:24,380
one has no spare capacity so because i

00:07:21,740 --> 00:07:26,479
went to the power company and i said how

00:07:24,380 --> 00:07:28,080
much power can you give me they said

00:07:26,479 --> 00:07:31,409
that much

00:07:28,080 --> 00:07:33,720
nothing more so I built the data center

00:07:31,409 --> 00:07:36,150
to handle that much power because I

00:07:33,720 --> 00:07:40,050
can't expand beyond that now I'm going

00:07:36,150 --> 00:07:42,599
to use every watt that they give me well

00:07:40,050 --> 00:07:44,370
you know in the the era that we are in

00:07:42,599 --> 00:07:46,919
now where we're collecting more and more

00:07:44,370 --> 00:07:51,030
data more and more information and that

00:07:46,919 --> 00:07:52,919
seems to grow every year we're running

00:07:51,030 --> 00:07:54,750
out of capacity we need bigger and

00:07:52,919 --> 00:07:57,780
bigger data centers this is getting to

00:07:54,750 --> 00:08:00,539
be a real problem so efficiency suddenly

00:07:57,780 --> 00:08:02,370
becomes a real issue I mean if I could

00:08:00,539 --> 00:08:03,870
have gone to that man and said you know

00:08:02,370 --> 00:08:07,259
I know some technique we can get you

00:08:03,870 --> 00:08:09,990
back just twenty percent of your

00:08:07,259 --> 00:08:11,669
capacity right now he would have jumped

00:08:09,990 --> 00:08:16,169
so high we would have had to scrape him

00:08:11,669 --> 00:08:18,270
off the roof because he was out and

00:08:16,169 --> 00:08:20,940
we're going to see this more and more so

00:08:18,270 --> 00:08:23,039
efficiency for these workloads becomes

00:08:20,940 --> 00:08:29,039
exceptionally important as we go forward

00:08:23,039 --> 00:08:30,449
in this industry so what should these

00:08:29,039 --> 00:08:32,459
workloads look like well they should be

00:08:30,449 --> 00:08:34,409
easy to deploy and manage we think

00:08:32,459 --> 00:08:36,000
that's a good idea they should have a

00:08:34,409 --> 00:08:37,979
small footprint we should get rid of

00:08:36,000 --> 00:08:40,500
unnecessary duplication that seems good

00:08:37,979 --> 00:08:42,329
should have a fast startup should have

00:08:40,500 --> 00:08:44,039
that enable this notion of the transient

00:08:42,329 --> 00:08:45,420
microservice the thing that comes and

00:08:44,039 --> 00:08:48,240
goes we'll talk about that a little bit

00:08:45,420 --> 00:08:50,459
we want heavier levels of security than

00:08:48,240 --> 00:08:54,570
we got now that's for sure in the cloud

00:08:50,459 --> 00:08:57,600
and we really think that you know the

00:08:54,570 --> 00:09:00,510
standard the old-school hosting approach

00:08:57,600 --> 00:09:02,490
you were lucky who get maybe ten VMs on

00:09:00,510 --> 00:09:03,930
on a single host that actually was a

00:09:02,490 --> 00:09:06,300
real good thing about three or four

00:09:03,930 --> 00:09:09,510
years ago we think that we could should

00:09:06,300 --> 00:09:13,949
be able to get to thousands on a single

00:09:09,510 --> 00:09:15,990
piece of iron that would be efficient so

00:09:13,949 --> 00:09:17,610
what steps have been taken to get there

00:09:15,990 --> 00:09:19,560
well you know part of the excitement

00:09:17,610 --> 00:09:21,750
about docker and some of the surrounding

00:09:19,560 --> 00:09:23,760
container technology is because it

00:09:21,750 --> 00:09:25,949
really does make some inroads in this in

00:09:23,760 --> 00:09:27,510
this area and it's really interesting it

00:09:25,949 --> 00:09:29,940
does make the deployment situation

00:09:27,510 --> 00:09:31,890
easier it does give you that smaller

00:09:29,940 --> 00:09:34,470
footprint which is really nice less

00:09:31,890 --> 00:09:37,140
memory less disk these are good fast

00:09:34,470 --> 00:09:39,449
startup times also real good higher

00:09:37,140 --> 00:09:40,430
number of VMs for host looks like we're

00:09:39,449 --> 00:09:42,920
making some really

00:09:40,430 --> 00:09:44,990
gains in that area unfortunately there's

00:09:42,920 --> 00:09:48,950
also some downsides that were well aware

00:09:44,990 --> 00:09:52,160
of you know when you're using that that

00:09:48,950 --> 00:09:53,870
host Colonel container type method you

00:09:52,160 --> 00:09:54,920
have to have compatibility the Colonel's

00:09:53,870 --> 00:09:57,470
you know you're not going to be able to

00:09:54,920 --> 00:09:59,240
run your windows work load on your linux

00:09:57,470 --> 00:10:01,790
host it's not going to work that well

00:09:59,240 --> 00:10:03,980
inside that situation there are

00:10:01,790 --> 00:10:06,170
potential limits the scalability I mean

00:10:03,980 --> 00:10:08,240
anytime that you're leveraging an

00:10:06,170 --> 00:10:11,089
existing operating system that is built

00:10:08,240 --> 00:10:13,310
for a data center to suddenly host

00:10:11,089 --> 00:10:18,020
hundreds or maybe even thousands of

00:10:13,310 --> 00:10:20,029
machines it may take it but will it do

00:10:18,020 --> 00:10:22,430
it really well is it designed for that

00:10:20,029 --> 00:10:24,560
is it optimized for that what's going to

00:10:22,430 --> 00:10:26,470
be the performance situation and then

00:10:24,560 --> 00:10:29,480
the whole thing about security of course

00:10:26,470 --> 00:10:32,420
you know you don't you can't turn off

00:10:29,480 --> 00:10:33,800
the papers you know the IT press you

00:10:32,420 --> 00:10:35,510
can't turn around without seeing

00:10:33,800 --> 00:10:37,279
something else getting violated

00:10:35,510 --> 00:10:40,310
something else getting stolen out of the

00:10:37,279 --> 00:10:43,160
cloud it's a big issue and it's not

00:10:40,310 --> 00:10:46,250
enough just to try to bring security on

00:10:43,160 --> 00:10:48,230
a parody with what we have now because

00:10:46,250 --> 00:10:51,170
quite honestly what we have now isn't

00:10:48,230 --> 00:10:54,320
good enough we need to step it up a

00:10:51,170 --> 00:10:58,160
notch we need to get to be more secure

00:10:54,320 --> 00:10:59,950
than we've ever been before so we need

00:10:58,160 --> 00:11:02,450
to take some steps in that area now

00:10:59,950 --> 00:11:06,830
along comes the idea of the eunuch

00:11:02,450 --> 00:11:08,720
kernel and like some of the container

00:11:06,830 --> 00:11:11,209
type stuff it's very small it's very

00:11:08,720 --> 00:11:13,279
efficient very quick boot time that's

00:11:11,209 --> 00:11:15,380
all really nice but one of the very

00:11:13,279 --> 00:11:17,570
interesting things is it does increase

00:11:15,380 --> 00:11:20,930
security we'll talk about that in just a

00:11:17,570 --> 00:11:23,180
second it's a green as in energy

00:11:20,930 --> 00:11:25,310
technology that can save the green

00:11:23,180 --> 00:11:27,709
coming out of the box I mean I don't

00:11:25,310 --> 00:11:30,680
know if anyone's had the opportunity or

00:11:27,709 --> 00:11:33,640
the position of actually trying to

00:11:30,680 --> 00:11:36,170
promote a green technology where you are

00:11:33,640 --> 00:11:38,870
but if you have to go to someone and say

00:11:36,170 --> 00:11:41,630
we need to invest in this so that eight

00:11:38,870 --> 00:11:44,450
or 12 or 15 months down the road we will

00:11:41,630 --> 00:11:47,630
get a return that can be a really hard

00:11:44,450 --> 00:11:49,459
sale but if you can say we can do this

00:11:47,630 --> 00:11:52,550
now and we'll start getting payback

00:11:49,459 --> 00:11:53,170
immediately that's a whole lot easier to

00:11:52,550 --> 00:11:55,570
introduce

00:11:53,170 --> 00:11:57,339
in terms of a green story there are many

00:11:55,570 --> 00:11:58,839
unicorns which already exists we'll look

00:11:57,339 --> 00:12:02,170
at some of these very briefly in the

00:11:58,839 --> 00:12:03,880
next few minutes and Zen project has a

00:12:02,170 --> 00:12:06,459
couple different unit curls in its

00:12:03,880 --> 00:12:10,540
incubator but by no means is that the

00:12:06,459 --> 00:12:13,930
entire story is not even close so what

00:12:10,540 --> 00:12:15,760
is a unit colonel and I I borrow these

00:12:13,930 --> 00:12:19,300
slides from the Mirage OS people which

00:12:15,760 --> 00:12:21,220
are part of the Zen incubator their

00:12:19,300 --> 00:12:23,620
definition unit girls are specialized

00:12:21,220 --> 00:12:25,990
virtual machine images compiled from the

00:12:23,620 --> 00:12:28,480
modular stack of application code system

00:12:25,990 --> 00:12:29,649
libraries and configuration well you

00:12:28,480 --> 00:12:32,529
know that sounds like just about any

00:12:29,649 --> 00:12:37,089
bien except the difference is that this

00:12:32,529 --> 00:12:42,610
is a singular executable it's not a

00:12:37,089 --> 00:12:43,959
stack it's an object it's one thing so

00:12:42,610 --> 00:12:45,279
let's take a look at some pictures so we

00:12:43,959 --> 00:12:47,910
understand this a little bit better this

00:12:45,279 --> 00:12:51,519
is a fairly standard sort of picture of

00:12:47,910 --> 00:12:53,649
you know Colonel in development and we

00:12:51,519 --> 00:12:55,240
see on the left-hand side there the sort

00:12:53,649 --> 00:12:57,750
of things that we normally expect to see

00:12:55,240 --> 00:13:00,040
in any software development situation

00:12:57,750 --> 00:13:01,959
configuration files application binary

00:13:00,040 --> 00:13:04,829
language runtime all the way down into

00:13:01,959 --> 00:13:09,430
the network stack and so forth well

00:13:04,829 --> 00:13:11,290
during compilation during testing the

00:13:09,430 --> 00:13:13,540
configuration application and language

00:13:11,290 --> 00:13:17,740
runtime all get compiled together into a

00:13:13,540 --> 00:13:20,649
ball which becomes the unit kernel which

00:13:17,740 --> 00:13:23,980
sits on top of a unix and or linux like

00:13:20,649 --> 00:13:25,540
operating system and run well that's

00:13:23,980 --> 00:13:28,360
pretty standard stuff there's really

00:13:25,540 --> 00:13:30,760
nothing interesting about that per se

00:13:28,360 --> 00:13:34,240
but then when you get into test changes

00:13:30,760 --> 00:13:36,430
a little bit suddenly everything on that

00:13:34,240 --> 00:13:40,240
left-hand side gets compiled into that

00:13:36,430 --> 00:13:43,029
ball and it once again wrist rests on

00:13:40,240 --> 00:13:45,550
top of a unix and or linux like

00:13:43,029 --> 00:13:48,329
operating system that's a little bit

00:13:45,550 --> 00:13:50,620
different but when you get to production

00:13:48,329 --> 00:13:52,630
that's where it gets very interesting

00:13:50,620 --> 00:13:55,300
suddenly that entire bowl that entire

00:13:52,630 --> 00:14:00,279
stack from application down to operating

00:13:55,300 --> 00:14:03,160
system code it is produced into one ball

00:14:00,279 --> 00:14:06,370
which sits directly on a hypervisor

00:14:03,160 --> 00:14:10,420
which sits directly on

00:14:06,370 --> 00:14:14,269
what's missing operating system

00:14:10,420 --> 00:14:19,160
utilities all of those things that we

00:14:14,269 --> 00:14:23,779
normally expect inside a vm package none

00:14:19,160 --> 00:14:28,820
of its there so the eunuch rental

00:14:23,779 --> 00:14:32,930
concept is have just enough to do the

00:14:28,820 --> 00:14:35,420
job it's application centric you don't

00:14:32,930 --> 00:14:36,920
need multiple users if you're running a

00:14:35,420 --> 00:14:38,209
web server you don't need something

00:14:36,920 --> 00:14:40,459
that's going to have all sorts of

00:14:38,209 --> 00:14:43,310
different users coming in doing things

00:14:40,459 --> 00:14:48,350
you just want the web server application

00:14:43,310 --> 00:14:50,329
to run you only want one VM per user so

00:14:48,350 --> 00:14:53,300
you can scale out with as many pms as

00:14:50,329 --> 00:14:55,010
you need as you need them there's no

00:14:53,300 --> 00:14:58,100
need for a general-purpose operating

00:14:55,010 --> 00:15:03,380
system or utilities like I said why have

00:14:58,100 --> 00:15:04,970
all that stuff there is in fact no need

00:15:03,380 --> 00:15:08,800
for a full set of operating system

00:15:04,970 --> 00:15:10,700
functions if you're running a web server

00:15:08,800 --> 00:15:12,230
why do you need all sorts of

00:15:10,700 --> 00:15:13,399
authentication and everything else that

00:15:12,230 --> 00:15:15,500
you might need some things you might

00:15:13,399 --> 00:15:17,089
need in a database on a web server you

00:15:15,500 --> 00:15:18,770
don't need that if you're running a

00:15:17,089 --> 00:15:21,170
database likewise you need things that

00:15:18,770 --> 00:15:24,290
make that database run you don't need a

00:15:21,170 --> 00:15:27,920
whole bunch of other things give it just

00:15:24,290 --> 00:15:30,500
enough to get the job done so the result

00:15:27,920 --> 00:15:33,790
is lean and mean minimal waste and

00:15:30,500 --> 00:15:36,680
incredibly tiny size what does that mean

00:15:33,790 --> 00:15:39,380
well we'll get there in one second but

00:15:36,680 --> 00:15:40,850
this concept is similar to programming

00:15:39,380 --> 00:15:43,910
in the embedded space anyone who ever

00:15:40,850 --> 00:15:46,750
have embedded experience okay we got

00:15:43,910 --> 00:15:49,910
some embedded programmers here it is

00:15:46,750 --> 00:15:52,970
excusing taking taking something that we

00:15:49,910 --> 00:15:55,459
know very well how to do which is to

00:15:52,970 --> 00:16:00,800
take a full application and put it into

00:15:55,459 --> 00:16:02,570
a machine you know a device but instead

00:16:00,800 --> 00:16:07,279
we're going to apply that concept into

00:16:02,570 --> 00:16:10,040
the data center so it does have you know

00:16:07,279 --> 00:16:11,630
limited debugging capabilities because

00:16:10,040 --> 00:16:13,279
you don't have a whole operating system

00:16:11,630 --> 00:16:15,470
stack there once you get in production

00:16:13,279 --> 00:16:17,750
and some people say oh you know how can

00:16:15,470 --> 00:16:18,259
we deal with this well frankly most of

00:16:17,750 --> 00:16:20,809
the production

00:16:18,259 --> 00:16:24,319
situations I've been involved with if it

00:16:20,809 --> 00:16:26,600
breaks the last thing that the owner of

00:16:24,319 --> 00:16:28,309
that system wants is for you to debug

00:16:26,600 --> 00:16:30,470
the production system they want you to

00:16:28,309 --> 00:16:32,809
take the logs and information and go

00:16:30,470 --> 00:16:35,929
reproduce it on your test system and

00:16:32,809 --> 00:16:37,970
bring this one back to life so in

00:16:35,929 --> 00:16:40,029
essence we've got the same restriction

00:16:37,970 --> 00:16:42,649
neck it just looks a little different

00:16:40,029 --> 00:16:44,419
they don't allow us most of the time to

00:16:42,649 --> 00:16:46,609
debug the production system you just

00:16:44,419 --> 00:16:49,879
have to tool it well enough so that you

00:16:46,609 --> 00:16:54,859
have enough data so that you can solve

00:16:49,879 --> 00:16:56,989
your problem on your testing system but

00:16:54,859 --> 00:16:58,579
this is the trade-off to get ultralight

00:16:56,989 --> 00:16:59,689
images and what is an ultralight image

00:16:58,579 --> 00:17:03,739
will take a look at some of these these

00:16:59,689 --> 00:17:05,839
are actual working unit colonel systems

00:17:03,739 --> 00:17:09,409
that various people have made the Mirage

00:17:05,839 --> 00:17:13,159
OS y una colonel they have a working dns

00:17:09,409 --> 00:17:18,679
server which compiles through 449

00:17:13,159 --> 00:17:20,720
kilobytes kilobytes those of us with a

00:17:18,679 --> 00:17:22,069
little gray in the temples may have to

00:17:20,720 --> 00:17:24,199
turn to some of the younger people in

00:17:22,069 --> 00:17:27,740
the audience and to tell them what a

00:17:24,199 --> 00:17:31,070
kilobyte is most of us haven't spoken

00:17:27,740 --> 00:17:32,779
that word in 15 or 20 years we're

00:17:31,070 --> 00:17:36,679
talking about gigabytes and petabytes

00:17:32,779 --> 00:17:38,870
and terabytes kilobytes that's what

00:17:36,679 --> 00:17:43,460
we're talking about a fully functional

00:17:38,870 --> 00:17:45,230
web server 674 kilobytes OpenFlow

00:17:43,460 --> 00:17:47,870
learning sweat switch less than four

00:17:45,230 --> 00:17:50,950
hundred kilobytes tiny tiny things

00:17:47,870 --> 00:17:53,960
laying another unit colonel system

00:17:50,950 --> 00:17:55,340
typical boot time is less than 100

00:17:53,960 --> 00:17:58,399
milliseconds for just about anything

00:17:55,340 --> 00:18:01,730
that comes out a link they have a

00:17:58,399 --> 00:18:03,200
website or laying on Zen org which eats

00:18:01,730 --> 00:18:05,000
their own dog food it's unit

00:18:03,200 --> 00:18:07,879
kernel-based and there's a little button

00:18:05,000 --> 00:18:10,070
up there that you can push that says how

00:18:07,879 --> 00:18:12,409
much memory am I using and when I pushed

00:18:10,070 --> 00:18:15,440
it for this slide it's at 8.7 megabytes

00:18:12,409 --> 00:18:18,289
for the full running image when you

00:18:15,440 --> 00:18:21,200
start thinking about a nine megabyte vm

00:18:18,289 --> 00:18:24,889
you begin to realize that the notion of

00:18:21,200 --> 00:18:28,730
thousands of BMS on a single host may

00:18:24,889 --> 00:18:30,440
not be crazy you use you make things

00:18:28,730 --> 00:18:32,570
small that can be small

00:18:30,440 --> 00:18:35,149
we'll keep the big stuff for the big

00:18:32,570 --> 00:18:37,759
stuff suddenly your data center has a

00:18:35,149 --> 00:18:41,809
lot more power to offer for those big

00:18:37,759 --> 00:18:44,090
jobs that need all that big iron click

00:18:41,809 --> 00:18:47,960
OS another unit colonel system that's

00:18:44,090 --> 00:18:50,360
from NEC Europe they do networking

00:18:47,960 --> 00:18:53,299
devices they have network devices that

00:18:50,360 --> 00:18:55,940
do over 5 million packets per second

00:18:53,299 --> 00:18:58,279
based on unik earnest and a typical

00:18:55,940 --> 00:19:01,340
network device is around six mega bytes

00:18:58,279 --> 00:19:08,269
in memory with a 30 millisecond woof

00:19:01,340 --> 00:19:14,240
time small fast it changes the picture

00:19:08,269 --> 00:19:16,190
and what about security many of you

00:19:14,240 --> 00:19:20,809
these unicorns not all of them but many

00:19:16,190 --> 00:19:22,340
of them use typesafe languages you know

00:19:20,809 --> 00:19:24,470
there are those wonderful popular

00:19:22,340 --> 00:19:27,980
languages you know like Haskell and o

00:19:24,470 --> 00:19:30,500
camel and etc the ones that most of us

00:19:27,980 --> 00:19:32,929
don't like to play with but some of us

00:19:30,500 --> 00:19:35,210
do anyone have to work with software

00:19:32,929 --> 00:19:37,100
certification any want to have to get

00:19:35,210 --> 00:19:39,200
yes anytime I answer to ask that

00:19:37,100 --> 00:19:41,750
question the hand whatever hand goes up

00:19:39,200 --> 00:19:43,909
goes up slowly it's probably because

00:19:41,750 --> 00:19:46,549
there's some sort of pain involved

00:19:43,909 --> 00:19:48,379
inside the time well if you want to

00:19:46,549 --> 00:19:51,590
learn more about that particular topic

00:19:48,379 --> 00:19:54,110
at the Zen project developer summit two

00:19:51,590 --> 00:19:56,450
years ago we had a presentation from

00:19:54,110 --> 00:19:59,149
some people who deal with software

00:19:56,450 --> 00:20:01,009
certification the pain involved it's the

00:19:59,149 --> 00:20:04,039
sort of things you know for like fly by

00:20:01,009 --> 00:20:06,769
wire and so forth life and death systems

00:20:04,039 --> 00:20:08,509
medical systems things that must run and

00:20:06,769 --> 00:20:11,419
they literally go through and they have

00:20:08,509 --> 00:20:15,620
to test every single bit of that code

00:20:11,419 --> 00:20:17,299
and know where it's all going well you

00:20:15,620 --> 00:20:19,759
can find that video out on our

00:20:17,299 --> 00:20:20,929
presentation system at Zen project org

00:20:19,759 --> 00:20:23,059
if you're interested in that it's

00:20:20,929 --> 00:20:24,889
actually quite fascinating and it makes

00:20:23,059 --> 00:20:26,960
you really happy that you're not doing

00:20:24,889 --> 00:20:27,980
certification right now but one of the

00:20:26,960 --> 00:20:29,840
things that they brought up at they said

00:20:27,980 --> 00:20:31,750
if you had to do a certified linux tack

00:20:29,840 --> 00:20:34,190
number one you couldn't afford it and

00:20:31,750 --> 00:20:36,019
number two by the time you finally got

00:20:34,190 --> 00:20:39,409
done with it it would be so old it would

00:20:36,019 --> 00:20:43,070
be useless because they must be small

00:20:39,409 --> 00:20:44,060
and ideally type safe and so forth to

00:20:43,070 --> 00:20:47,270
make sure it

00:20:44,060 --> 00:20:49,010
is it's going to be there and do what

00:20:47,270 --> 00:20:52,040
it's supposed to do it's expensive

00:20:49,010 --> 00:20:54,800
arduous task but y una kernels are of a

00:20:52,040 --> 00:20:59,110
size and type that this now becomes an

00:20:54,800 --> 00:21:03,020
option for those very important tasks

00:20:59,110 --> 00:21:04,970
also for security image footprints the

00:21:03,020 --> 00:21:08,510
image footprint is going to be unique to

00:21:04,970 --> 00:21:13,070
that unit our unit compile you can't

00:21:08,510 --> 00:21:14,690
rely on the openssl library being out

00:21:13,070 --> 00:21:17,270
there so we're going to find that that

00:21:14,690 --> 00:21:19,760
let use that latest hack that came out

00:21:17,270 --> 00:21:21,830
we're going to try to get in who says

00:21:19,760 --> 00:21:23,440
it's going to be there if it's not

00:21:21,830 --> 00:21:26,150
needed it's not going to be there

00:21:23,440 --> 00:21:29,900
where's it going to reside wherever the

00:21:26,150 --> 00:21:31,820
compiler put it what utilities are going

00:21:29,900 --> 00:21:34,190
to be there once you exploit something

00:21:31,820 --> 00:21:37,970
you actually managed to break it answer

00:21:34,190 --> 00:21:39,950
zero so if you're going to break into a

00:21:37,970 --> 00:21:42,790
your kernel system if you're smart

00:21:39,950 --> 00:21:45,260
enough to figure out how to make it stop

00:21:42,790 --> 00:21:47,330
you're going to have to be at least ten

00:21:45,260 --> 00:21:49,220
times smarter to figure out how to make

00:21:47,330 --> 00:21:51,770
it go and do something else that you

00:21:49,220 --> 00:21:55,310
want it to do because you're not going

00:21:51,770 --> 00:22:00,160
to have anything to work with it's hard

00:21:55,310 --> 00:22:07,130
not to say it's impossible but it's hard

00:22:00,160 --> 00:22:08,720
script kiddies need not apply so that

00:22:07,130 --> 00:22:09,980
was that's the forest perspective that's

00:22:08,720 --> 00:22:11,600
sort of the big picture what we're

00:22:09,980 --> 00:22:13,100
dealing with let's look talking about

00:22:11,600 --> 00:22:15,290
some of the trees here for just a myth

00:22:13,100 --> 00:22:18,550
some of the individual unit kernels that

00:22:15,290 --> 00:22:21,470
are out there let me check my time ok

00:22:18,550 --> 00:22:23,900
here's a few of them feel the more

00:22:21,470 --> 00:22:27,590
popular one Mirage OS from zen project

00:22:23,900 --> 00:22:32,270
incubator Hal vm from galois Ling from

00:22:27,590 --> 00:22:33,710
Erlang on Zen click os os be rump run

00:22:32,270 --> 00:22:35,240
and there's a bunch of others let's just

00:22:33,710 --> 00:22:38,150
take a look very quickly at some of

00:22:35,240 --> 00:22:40,850
these now my Raja West like i said is in

00:22:38,150 --> 00:22:42,800
the Zen project incubator system its

00:22:40,850 --> 00:22:45,680
language support azo camel how many o

00:22:42,800 --> 00:22:49,700
camel programmers that's one more than I

00:22:45,680 --> 00:22:53,090
expected thank you sir hypervisor

00:22:49,700 --> 00:22:55,100
supported Zen project they had a 2.0

00:22:53,090 --> 00:22:56,480
release last year there

00:22:55,100 --> 00:22:59,510
we're expecting another release from

00:22:56,480 --> 00:23:01,580
them very very soon now it's suitable

00:22:59,510 --> 00:23:04,010
for general purpose of devices these

00:23:01,580 --> 00:23:07,130
things can actually be run on ec2 if you

00:23:04,010 --> 00:23:10,190
care to and they have a website for

00:23:07,130 --> 00:23:13,309
their information next up is Hal vm from

00:23:10,190 --> 00:23:16,610
galois the language is hostile how many

00:23:13,309 --> 00:23:18,230
haskell programmers as many as we had o

00:23:16,610 --> 00:23:22,700
camel programmers thank you very much

00:23:18,230 --> 00:23:24,440
sir now you'd be in to see to why if we

00:23:22,700 --> 00:23:26,390
talked about the trees only it's easy to

00:23:24,440 --> 00:23:28,280
ignore these things Oh haspel I don't

00:23:26,390 --> 00:23:30,740
want to go ahead Oh Oh camel I don't

00:23:28,280 --> 00:23:33,080
care about Oh camera but these are just

00:23:30,740 --> 00:23:35,510
a couple of trees gets more interesting

00:23:33,080 --> 00:23:38,630
over time hypervisor support once again

00:23:35,510 --> 00:23:40,220
is Zen originally it was two prototype

00:23:38,630 --> 00:23:42,740
operating system components but they

00:23:40,220 --> 00:23:44,000
started creating network devices out of

00:23:42,740 --> 00:23:46,000
the stuff and they've done some really

00:23:44,000 --> 00:23:48,860
remarkable things there from gawa and

00:23:46,000 --> 00:23:51,710
they've got a webpage lane from the

00:23:48,860 --> 00:23:55,309
Erlang on Zen people language supported

00:23:51,710 --> 00:23:57,650
Erlang any Erlang programmers one less

00:23:55,309 --> 00:24:02,380
than 0 camo ok that's about what I

00:23:57,650 --> 00:24:04,700
expected once again Zen project support

00:24:02,380 --> 00:24:09,070
they have a use case out on their

00:24:04,700 --> 00:24:13,039
website called the zero footprint cloud

00:24:09,070 --> 00:24:14,840
interesting concept this is a picture

00:24:13,039 --> 00:24:16,970
from the scrape from their website and

00:24:14,840 --> 00:24:18,289
as I told you this is this is what

00:24:16,970 --> 00:24:19,850
happens when you click the button in the

00:24:18,289 --> 00:24:21,620
upper right unless they've moved it this

00:24:19,850 --> 00:24:24,799
shows you at the actual memory and stuff

00:24:21,620 --> 00:24:27,320
that's being consumed by their unit

00:24:24,799 --> 00:24:29,630
kernel-based web server at the moment

00:24:27,320 --> 00:24:33,049
that you access it really interesting

00:24:29,630 --> 00:24:35,600
some of the very small numbers there but

00:24:33,049 --> 00:24:39,169
this surd their zero footprint cloud

00:24:35,600 --> 00:24:41,750
demo and its online you click their

00:24:39,169 --> 00:24:45,440
button and you get back this screen and

00:24:41,750 --> 00:24:48,200
it says it takes 300 seconds to launch a

00:24:45,440 --> 00:24:51,110
Linux instance on Amazon ec2 it takes 50

00:24:48,200 --> 00:24:52,820
seconds to power on an android-based

00:24:51,110 --> 00:24:56,260
phone and have it come up to the lock

00:24:52,820 --> 00:25:00,559
screen takes four tenths of a second

00:24:56,260 --> 00:25:03,340
between the time that it received the

00:25:00,559 --> 00:25:06,860
request when you push the button it

00:25:03,340 --> 00:25:08,210
generated the unit colonel vm which

00:25:06,860 --> 00:25:11,030
generated this screen

00:25:08,210 --> 00:25:14,330
sent it back and it was already gone by

00:25:11,030 --> 00:25:18,560
the time you started reading it's the

00:25:14,330 --> 00:25:22,850
notion that one second before it's

00:25:18,560 --> 00:25:26,300
necessary it's not there it appears when

00:25:22,850 --> 00:25:28,130
the request appears it does work and it

00:25:26,300 --> 00:25:30,290
disappears as soon as the request is

00:25:28,130 --> 00:25:33,620
fulfilled think about the standard

00:25:30,290 --> 00:25:38,120
Christmas problem in retail it's

00:25:33,620 --> 00:25:40,970
December 15th at midnight big-box store

00:25:38,120 --> 00:25:44,680
is going to be offering 90 inch color

00:25:40,970 --> 00:25:47,330
flat-screen televisions for $19.95

00:25:44,680 --> 00:25:51,560
you're going to have about 10 million

00:25:47,330 --> 00:25:54,170
people sitting there like this one

00:25:51,560 --> 00:25:57,970
second before midnight trying to hit the

00:25:54,170 --> 00:26:01,850
button to get the deal to get that TV

00:25:57,970 --> 00:26:06,560
how many virtual machines you need one

00:26:01,850 --> 00:26:09,590
second before midnight none because no

00:26:06,560 --> 00:26:11,870
one's pushing the button yet at midnight

00:26:09,590 --> 00:26:15,710
all hell breaks loose you need millions

00:26:11,870 --> 00:26:20,380
of them but once the requests are

00:26:15,710 --> 00:26:22,730
fulfilled and those that have succeeded

00:26:20,380 --> 00:26:25,640
get theirs in their cart and those which

00:26:22,730 --> 00:26:31,100
have failed go off and cry in the root

00:26:25,640 --> 00:26:37,520
beer how many VMS should be there when

00:26:31,100 --> 00:26:39,410
it's done zero that's the concept have

00:26:37,520 --> 00:26:42,110
it there when it's needed release it

00:26:39,410 --> 00:26:45,650
when it's not I mean how many data

00:26:42,110 --> 00:26:50,570
centers have you seen that will have to

00:26:45,650 --> 00:26:54,800
over appropriate machines for a tax that

00:26:50,570 --> 00:26:57,560
occurs once a month once quarter once a

00:26:54,800 --> 00:26:59,210
year you got to have all that firepower

00:26:57,560 --> 00:27:00,320
and most of the time it's sitting me all

00:26:59,210 --> 00:27:03,850
those things are sitting there like this

00:27:00,320 --> 00:27:03,850
with their finger and airier going dude

00:27:04,120 --> 00:27:12,320
waiting for nothing to occur waiting for

00:27:07,280 --> 00:27:14,000
the month end this concept says go and

00:27:12,320 --> 00:27:16,580
use all that firepower for anything else

00:27:14,000 --> 00:27:19,700
during the rest of the year just make

00:27:16,580 --> 00:27:20,840
sure you have enough for that few

00:27:19,700 --> 00:27:22,870
seconds

00:27:20,840 --> 00:27:25,130
when they're needed in this case for

00:27:22,870 --> 00:27:28,429
whatever your time frame is a day or two

00:27:25,130 --> 00:27:31,159
but we can free all that up we don't

00:27:28,429 --> 00:27:33,650
need to fill the data center with a lot

00:27:31,159 --> 00:27:38,090
of nothing we can make best use of

00:27:33,650 --> 00:27:41,299
what's there another unit colonel system

00:27:38,090 --> 00:27:44,330
click OS from NEC europe language

00:27:41,299 --> 00:27:46,880
support C C++ Python how many people are

00:27:44,330 --> 00:27:48,860
C C++ or and or Python programmers

00:27:46,880 --> 00:27:52,100
there's a few more hands that have

00:27:48,860 --> 00:27:54,289
suddenly gone up in the room hypervisor

00:27:52,100 --> 00:27:55,700
supports then project you see a tendency

00:27:54,289 --> 00:27:59,029
there on the hypervisor support we'll

00:27:55,700 --> 00:28:03,140
talk about that they released version 02

00:27:59,029 --> 00:28:05,149
in 2014 there's big focuses network

00:28:03,140 --> 00:28:09,649
function virtualization a really nice

00:28:05,149 --> 00:28:12,740
new area and here's one of their graphs

00:28:09,649 --> 00:28:15,440
from off of their off of their web page

00:28:12,740 --> 00:28:19,190
and you can see in terms of packet

00:28:15,440 --> 00:28:21,140
served based on size of packet etc that

00:28:19,190 --> 00:28:23,990
some of those numbers are going up to

00:28:21,140 --> 00:28:27,610
about five and a half million packets

00:28:23,990 --> 00:28:31,399
per second on these little unicorn based

00:28:27,610 --> 00:28:38,929
devices this is the sort of thing that's

00:28:31,399 --> 00:28:40,840
going on o sv o sv was a product of

00:28:38,929 --> 00:28:43,220
claudius systems which is now called

00:28:40,840 --> 00:28:46,779
Scylla or skill oh I don't know how they

00:28:43,220 --> 00:28:50,059
pronounce it DB they've kind of moved on

00:28:46,779 --> 00:28:52,429
but o sv is open source which means it

00:28:50,059 --> 00:28:55,070
survives if you don't think that's

00:28:52,429 --> 00:28:56,450
significant let me throw out a couple

00:28:55,070 --> 00:29:00,620
things how many people know what

00:28:56,450 --> 00:29:04,640
Nautilus is the file browser it's in its

00:29:00,620 --> 00:29:06,169
I most I guess of the Linux

00:29:04,640 --> 00:29:07,429
distributions I've dealt with recently

00:29:06,169 --> 00:29:08,929
still have it out there one way or

00:29:07,429 --> 00:29:12,260
another some it's the default others

00:29:08,929 --> 00:29:14,240
it's an option it's a very common sort

00:29:12,260 --> 00:29:20,029
of piece of software now how many people

00:29:14,240 --> 00:29:24,320
know the name ezel ezel was the company

00:29:20,029 --> 00:29:27,730
back in the.com / bomb era that produced

00:29:24,320 --> 00:29:30,230
Nautilus ezel was an interesting company

00:29:27,730 --> 00:29:33,710
as far as I could tell its business plan

00:29:30,230 --> 00:29:34,790
was to write cool software throw big-ass

00:29:33,710 --> 00:29:38,150
parties

00:29:34,790 --> 00:29:39,470
and go out in a ball of flame if that's

00:29:38,150 --> 00:29:40,940
what their business plan was they

00:29:39,470 --> 00:29:42,350
succeeded at all three points because

00:29:40,940 --> 00:29:45,320
that's all I ever saw from him and they

00:29:42,350 --> 00:29:49,160
they burned out when wenn.com turned to

00:29:45,320 --> 00:29:54,290
dot bomb ezel was done stick a fork in

00:29:49,160 --> 00:29:57,500
it but ezel produced Nautilus and here

00:29:54,290 --> 00:30:00,620
it is 14 15 years whatever it's been

00:29:57,500 --> 00:30:02,570
since easels demise and many of the

00:30:00,620 --> 00:30:06,500
people in this room are using Nautilus

00:30:02,570 --> 00:30:08,120
probably on a daily basis likewise just

00:30:06,500 --> 00:30:10,130
because cloudiest system this is now

00:30:08,120 --> 00:30:12,080
developing a different focus doesn't

00:30:10,130 --> 00:30:16,760
mean that osv is not going to survive

00:30:12,080 --> 00:30:19,430
and thrive language support even more

00:30:16,760 --> 00:30:23,060
interesting C C++ Java Python JavaScript

00:30:19,430 --> 00:30:28,340
no Jas Ruby interesting to anyone in

00:30:23,060 --> 00:30:30,740
this room I think so they have a very

00:30:28,340 --> 00:30:33,740
wide hypervisor sport Zen is of course

00:30:30,740 --> 00:30:35,870
but also KBM VMware they are different

00:30:33,740 --> 00:30:37,820
from the standard unit kernels really

00:30:35,870 --> 00:30:39,590
weird use their term standard unit

00:30:37,820 --> 00:30:42,050
colonel this stuff is so new there's no

00:30:39,590 --> 00:30:44,480
such thing as standard yet but they're a

00:30:42,050 --> 00:30:46,400
little bit different take their a little

00:30:44,480 --> 00:30:48,680
on the fat side which means that you're

00:30:46,400 --> 00:30:51,970
talking about megabytes not kilobytes oh

00:30:48,680 --> 00:30:55,670
boy burn down the house over that one

00:30:51,970 --> 00:30:59,270
but they implement a full JVM stack

00:30:55,670 --> 00:31:02,150
their concept was let's take an existing

00:30:59,270 --> 00:31:05,570
jar file and just drop it in and let it

00:31:02,150 --> 00:31:07,690
work as a unit colonel just enough for

00:31:05,570 --> 00:31:11,110
that to occur it has a few extra things

00:31:07,690 --> 00:31:16,010
because it can handle just about any jar

00:31:11,110 --> 00:31:18,710
it can't fork but it can do threads not

00:31:16,010 --> 00:31:22,100
multi-process single process but

00:31:18,710 --> 00:31:24,110
multi-threaded and it was optimized for

00:31:22,100 --> 00:31:26,000
network function virtualization as well

00:31:24,110 --> 00:31:29,270
so a little different take a little

00:31:26,000 --> 00:31:34,160
different concept still very impressive

00:31:29,270 --> 00:31:36,080
results and now run run run run has

00:31:34,160 --> 00:31:37,760
gotten really really interesting i've

00:31:36,080 --> 00:31:41,860
been doing this talk i did for the first

00:31:37,760 --> 00:31:44,570
edition of this talk about one year ago

00:31:41,860 --> 00:31:45,890
when i did this talk back then it was

00:31:44,570 --> 00:31:47,800
half the number of slides because

00:31:45,890 --> 00:31:49,900
there's been so much I've gone on there

00:31:47,800 --> 00:31:51,400
rumph run wasn't even in the deck now

00:31:49,900 --> 00:31:54,880
rump run is one of the most exciting

00:31:51,400 --> 00:31:57,540
things here we'll talk a little bit

00:31:54,880 --> 00:32:00,010
about the details but rump run is

00:31:57,540 --> 00:32:06,460
targeted at just about anything that's

00:32:00,010 --> 00:32:07,930
POSIX or POSIX ee+ like that's most of

00:32:06,460 --> 00:32:12,220
the stuff in your data center if you're

00:32:07,930 --> 00:32:14,590
running a linux and or unix system very

00:32:12,220 --> 00:32:19,780
interesting stuff that has the potential

00:32:14,590 --> 00:32:21,490
to open a huge number of doors but we

00:32:19,780 --> 00:32:24,070
know from you know the tree and forest

00:32:21,490 --> 00:32:25,630
analogy that if this really is a forest

00:32:24,070 --> 00:32:26,890
and not just a group of trees there's

00:32:25,630 --> 00:32:28,570
got to be an ecosystem that's growing

00:32:26,890 --> 00:32:30,250
with it right got to facilitate there's

00:32:28,570 --> 00:32:33,070
got to be things that are making these

00:32:30,250 --> 00:32:35,110
things grow more than just having a few

00:32:33,070 --> 00:32:36,880
incidents there's a bunch of stuff we're

00:32:35,110 --> 00:32:40,270
just going to touch really quickly on a

00:32:36,880 --> 00:32:41,560
few of these things jitsu mini us some

00:32:40,270 --> 00:32:44,770
of the stuff in the rump colonel world

00:32:41,560 --> 00:32:48,010
itself Jitsu just-in-time summoning of

00:32:44,770 --> 00:32:50,050
you know kernels solving a problem that

00:32:48,010 --> 00:32:52,630
wasn't there before it is a fully

00:32:50,050 --> 00:32:57,910
functional dns server that also spawns

00:32:52,630 --> 00:33:00,460
the vm requested by the dns service so

00:32:57,910 --> 00:33:05,080
it's the notion that the packet comes in

00:33:00,460 --> 00:33:06,670
says I need this IP address or any need

00:33:05,080 --> 00:33:08,620
to find out where this thing is says

00:33:06,670 --> 00:33:11,200
sure here's the IP address oh by the way

00:33:08,620 --> 00:33:13,090
I just birthed it for you so for all

00:33:11,200 --> 00:33:16,060
these things that want these VMS to

00:33:13,090 --> 00:33:19,680
appear and disappear jitsu is a great

00:33:16,060 --> 00:33:22,840
facilitator it will give birth on demand

00:33:19,680 --> 00:33:27,970
comes out of the mirage OS people and be

00:33:22,840 --> 00:33:30,690
used with any of them many oz comes out

00:33:27,970 --> 00:33:34,180
of the Zen project many oz is

00:33:30,690 --> 00:33:35,500
distributed inside the source kit we

00:33:34,180 --> 00:33:37,510
originally had it for driver

00:33:35,500 --> 00:33:39,160
disaggregation which i won't go into the

00:33:37,510 --> 00:33:41,110
details up here but just this notion

00:33:39,160 --> 00:33:43,660
that you can slip things off into these

00:33:41,110 --> 00:33:46,120
small little VMS but others have used

00:33:43,660 --> 00:33:48,550
many oz as the basis for hacking because

00:33:46,120 --> 00:33:52,480
it's all open source everything we do is

00:33:48,550 --> 00:33:54,310
open source and so click OS and rump run

00:33:52,480 --> 00:33:57,870
and some of the others actually started

00:33:54,310 --> 00:33:59,910
with many oz as a place to begin

00:33:57,870 --> 00:34:02,370
so it's out there as part of the

00:33:59,910 --> 00:34:03,690
ecosystem and then the rump kernels rump

00:34:02,370 --> 00:34:04,830
curls were really interesting because

00:34:03,690 --> 00:34:06,300
they didn't actually come out of the

00:34:04,830 --> 00:34:08,820
Linux where they came out of the net bsd

00:34:06,300 --> 00:34:11,820
world net bsd has this very modular

00:34:08,820 --> 00:34:15,840
concept built into it because they want

00:34:11,820 --> 00:34:18,389
to be anywhere anytime anything well

00:34:15,840 --> 00:34:21,300
someone decided we could combine these

00:34:18,389 --> 00:34:23,460
anywhere sort of pieces together in our

00:34:21,300 --> 00:34:28,139
compilation and build eunuch URLs out of

00:34:23,460 --> 00:34:29,639
it so it's not a net bsd specific thing

00:34:28,139 --> 00:34:32,429
but it just happens to be facilitated by

00:34:29,639 --> 00:34:34,200
net VST because of the concept and it

00:34:32,429 --> 00:34:36,090
not only supports a Zen project but it

00:34:34,200 --> 00:34:37,379
can also work on certain bare metal

00:34:36,090 --> 00:34:39,750
systems if you have the exact right

00:34:37,379 --> 00:34:41,940
hardware and you can even run it in user

00:34:39,750 --> 00:34:44,010
space if you have to there's a picture

00:34:41,940 --> 00:34:46,050
from the rump colonel people that you

00:34:44,010 --> 00:34:47,700
know spare these fairly standard sort of

00:34:46,050 --> 00:34:49,350
stack that we're used to looking at when

00:34:47,700 --> 00:34:51,690
we look at architectural diagrams etc

00:34:49,350 --> 00:34:53,909
till you start noticing that the stuff

00:34:51,690 --> 00:34:55,320
the wavy lines on the left and you

00:34:53,909 --> 00:34:57,510
realize that a single threads running

00:34:55,320 --> 00:35:01,740
top to bottom there is no multiplicity

00:34:57,510 --> 00:35:07,770
of things here it's one unified body all

00:35:01,740 --> 00:35:09,660
in one compiled effort when i first

00:35:07,770 --> 00:35:11,640
started giving this talk i would

00:35:09,660 --> 00:35:12,570
normally are right about now say well

00:35:11,640 --> 00:35:14,820
you know there's some things you're not

00:35:12,570 --> 00:35:17,490
going to find in unicorns database is

00:35:14,820 --> 00:35:21,540
probably being one well I'm proud to

00:35:17,490 --> 00:35:25,110
admit I was dead wrong the rump run

00:35:21,540 --> 00:35:27,780
people have had a field day in the last

00:35:25,110 --> 00:35:31,050
few months and everyone know what the

00:35:27,780 --> 00:35:40,230
lamp stack is yeah well they invented

00:35:31,050 --> 00:35:45,060
the ramp stack they took rump run mysql

00:35:40,230 --> 00:35:48,930
PHP and engine X for the for the web

00:35:45,060 --> 00:35:51,900
services and without doing any change to

00:35:48,930 --> 00:35:56,190
the code of any of those projects built

00:35:51,900 --> 00:36:00,060
them as unicorns so suddenly you have my

00:35:56,190 --> 00:36:03,900
sequel running as a unit colonel your

00:36:00,060 --> 00:36:08,490
PHP running as a eunuch Earl all these

00:36:03,900 --> 00:36:10,130
things down to these minimal sizes the

00:36:08,490 --> 00:36:11,990
only work that they had to do

00:36:10,130 --> 00:36:14,450
was not on the source code but it was on

00:36:11,990 --> 00:36:16,579
the compile code because this is

00:36:14,450 --> 00:36:18,980
essentially a cross compile as when it

00:36:16,579 --> 00:36:21,950
comes down to you're compiling into it

00:36:18,980 --> 00:36:26,119
into a environment that's not the same

00:36:21,950 --> 00:36:28,160
as the development environment so the

00:36:26,119 --> 00:36:29,930
guy that that worked on this said you

00:36:28,160 --> 00:36:31,009
know that took a little time for engine

00:36:29,930 --> 00:36:32,799
X particularly because some things

00:36:31,009 --> 00:36:36,440
weren't documented very well for them

00:36:32,799 --> 00:36:41,809
what we got there but no coach rate

00:36:36,440 --> 00:36:44,450
changes this is a very interesting turn

00:36:41,809 --> 00:36:46,009
of events suddenly a lot of the things

00:36:44,450 --> 00:36:50,539
that are currently running in your data

00:36:46,009 --> 00:36:53,930
center right now our potential targets

00:36:50,539 --> 00:36:59,000
for unicorns potential targets for these

00:36:53,930 --> 00:37:01,250
small secure machines here's more

00:36:59,000 --> 00:37:05,569
information about that antique ante and

00:37:01,250 --> 00:37:07,099
Martin lucena did did so much here like

00:37:05,569 --> 00:37:08,900
I said they're on the slides around the

00:37:07,099 --> 00:37:14,990
website then project out of work you can

00:37:08,900 --> 00:37:18,109
see all of this that first note there

00:37:14,990 --> 00:37:19,490
about contains the work of many bsd

00:37:18,109 --> 00:37:22,930
contributors all the way back to the

00:37:19,490 --> 00:37:25,700
1980s one of the beauties of open source

00:37:22,930 --> 00:37:28,190
is that that which is created doesn't

00:37:25,700 --> 00:37:31,460
need to be lost as long as it's useful

00:37:28,190 --> 00:37:34,450
it can be reused remodeled this is one

00:37:31,460 --> 00:37:36,619
of those cases where the bsd

00:37:34,450 --> 00:37:38,799
contributors in the 80s thought they

00:37:36,619 --> 00:37:41,960
were working on an operating system and

00:37:38,799 --> 00:37:44,029
they did but they also ended up working

00:37:41,960 --> 00:37:47,180
on a unit colonel system and they didn't

00:37:44,029 --> 00:37:50,299
even know it it's one of the beauties of

00:37:47,180 --> 00:37:53,450
open source Zen project itself is an

00:37:50,299 --> 00:37:55,490
ecosystem enabler you know we talked

00:37:53,450 --> 00:37:57,950
about the possibility of thousands of

00:37:55,490 --> 00:38:01,190
these things on a single host well you

00:37:57,950 --> 00:38:02,960
know world in the hypervisor space five

00:38:01,190 --> 00:38:07,009
years ago you're lucky if you got ten

00:38:02,960 --> 00:38:10,700
you know so hypervisors weren't designed

00:38:07,009 --> 00:38:12,559
to run thousands of posts but we in the

00:38:10,700 --> 00:38:15,410
Zen project have realized what's coming

00:38:12,559 --> 00:38:17,839
along so where we've actually put a

00:38:15,410 --> 00:38:19,430
quite a bit of effort and continue to to

00:38:17,839 --> 00:38:21,980
facilitate this vision of this

00:38:19,430 --> 00:38:23,310
next-generation data center that could

00:38:21,980 --> 00:38:26,760
have thousands

00:38:23,310 --> 00:38:29,660
on a single host so we redefine a

00:38:26,760 --> 00:38:32,490
structure which we call event channels

00:38:29,660 --> 00:38:35,400
which took a limitation off we are now

00:38:32,490 --> 00:38:37,470
up to sort of straight line growth up to

00:38:35,400 --> 00:38:40,470
around 600 was the last number I got

00:38:37,470 --> 00:38:41,910
from our from our team maybe higher now

00:38:40,470 --> 00:38:44,160
but that was the last one I heard and

00:38:41,910 --> 00:38:46,200
they still have the target of going two

00:38:44,160 --> 00:38:48,540
to three thousand that's where that's

00:38:46,200 --> 00:38:51,930
where we want to be before we rest on

00:38:48,540 --> 00:38:54,510
this effort for any length of time the

00:38:51,930 --> 00:38:56,070
other piece of this that's interesting

00:38:54,510 --> 00:38:58,440
and part of the reason why so many of

00:38:56,070 --> 00:39:01,260
these unicorn all systems support Zen or

00:38:58,440 --> 00:39:03,630
supports then first is that Zen as a

00:39:01,260 --> 00:39:07,340
type one bare-metal hypervisor just

00:39:03,630 --> 00:39:09,120
straight on the metal also has a notion

00:39:07,340 --> 00:39:12,480
optionally of what's called

00:39:09,120 --> 00:39:14,310
paravirtualization we all know hardware

00:39:12,480 --> 00:39:17,490
virtualization we have that in Zen too

00:39:14,310 --> 00:39:19,110
if you want it where the virtual machine

00:39:17,490 --> 00:39:22,230
thinks it's sitting on a piece of

00:39:19,110 --> 00:39:24,420
hardware so it packs up all the data and

00:39:22,230 --> 00:39:26,370
information so it it thinks it's got a

00:39:24,420 --> 00:39:28,200
network card it packs up the data into

00:39:26,370 --> 00:39:31,140
that packet so it goes to that network

00:39:28,200 --> 00:39:33,480
card and it goes out well in a vm to

00:39:31,140 --> 00:39:36,060
situation it's packing up into a network

00:39:33,480 --> 00:39:38,430
card that doesn't really exist or may

00:39:36,060 --> 00:39:40,080
not really exist so the hypervisor has

00:39:38,430 --> 00:39:42,000
to sort of unpack it pull the data out

00:39:40,080 --> 00:39:45,240
and then do something useful with it and

00:39:42,000 --> 00:39:48,930
then pass the data back well that's not

00:39:45,240 --> 00:39:52,200
really efficient think about it but if

00:39:48,930 --> 00:39:57,840
the vm itself is smart enough to be able

00:39:52,200 --> 00:39:59,760
to realize that it is virtualized we

00:39:57,840 --> 00:40:01,950
have a thing called paravirtualization

00:39:59,760 --> 00:40:06,210
which basically says we'll just open a

00:40:01,950 --> 00:40:08,850
tomb a socket whatever we'll just say

00:40:06,210 --> 00:40:10,190
here throw the data down the socket when

00:40:08,850 --> 00:40:12,990
we get a response will give it to you

00:40:10,190 --> 00:40:15,510
much more efficient much quicker much

00:40:12,990 --> 00:40:16,920
easier to code keep keep in mind you

00:40:15,510 --> 00:40:19,860
know we want something small for unit

00:40:16,920 --> 00:40:22,980
girls why bother with in full any 2000

00:40:19,860 --> 00:40:26,220
emulator when all you want to say here's

00:40:22,980 --> 00:40:30,180
the network stuff give me a response ok

00:40:26,220 --> 00:40:32,430
so then makes it easy now is there more

00:40:30,180 --> 00:40:35,010
out there absolutely a couple of the

00:40:32,430 --> 00:40:36,330
more interesting ones Arrakis based on

00:40:35,010 --> 00:40:37,800
the barrel fish operate

00:40:36,330 --> 00:40:40,380
anyone know what the barrel fish

00:40:37,800 --> 00:40:41,670
operating system is I've asked this

00:40:40,380 --> 00:40:43,530
question more times than I can count

00:40:41,670 --> 00:40:46,080
I've yet to get a hand I'd like to find

00:40:43,530 --> 00:40:50,580
out but whatever but it's out there and

00:40:46,080 --> 00:40:52,050
Clive using the go language now I know

00:40:50,580 --> 00:40:55,140
some people who start drooling when I

00:40:52,050 --> 00:40:57,240
start talking about go but you know once

00:40:55,140 --> 00:41:00,810
again it's coming in all different ways

00:40:57,240 --> 00:41:03,870
and sizes are Yuna kernels of panacea no

00:41:00,810 --> 00:41:05,730
no no no they're not the end all be all

00:41:03,870 --> 00:41:10,080
that everything's got to be you in a

00:41:05,730 --> 00:41:12,990
curl no but they do facilitate the need

00:41:10,080 --> 00:41:15,000
for us to make things small and fast if

00:41:12,990 --> 00:41:17,280
something can be small and fast let's

00:41:15,000 --> 00:41:19,260
make it small and fast if it can be made

00:41:17,280 --> 00:41:22,290
small fast and secure even better which

00:41:19,260 --> 00:41:24,690
is where we want to be but let's take

00:41:22,290 --> 00:41:28,770
those tasks which fill our data center

00:41:24,690 --> 00:41:31,980
and use up so much resource and let them

00:41:28,770 --> 00:41:36,380
have just enough to work then if you've

00:41:31,980 --> 00:41:39,750
got the big ol honkin number-crunching

00:41:36,380 --> 00:41:41,790
world-shaking app that's got to take up

00:41:39,750 --> 00:41:45,690
all this room find give it the rest of

00:41:41,790 --> 00:41:47,520
the stuff let it do something useful but

00:41:45,690 --> 00:41:52,920
let's limit these things that can be

00:41:47,520 --> 00:41:54,420
limited as best we can what does it mean

00:41:52,920 --> 00:41:57,840
for architecture this whole notion of

00:41:54,420 --> 00:41:59,130
transient microservices you know this

00:41:57,840 --> 00:42:01,560
notion that's something that's there

00:41:59,130 --> 00:42:03,330
when you need it and disappears in most

00:42:01,560 --> 00:42:05,040
cloud orchestration systems right now

00:42:03,330 --> 00:42:07,380
you need something to say I need it

00:42:05,040 --> 00:42:09,150
start it let me test to see if you're

00:42:07,380 --> 00:42:11,070
out there then let me ask to see if

00:42:09,150 --> 00:42:14,520
you're well then I'll tell you when to

00:42:11,070 --> 00:42:17,340
shut down well we still we're going to

00:42:14,520 --> 00:42:20,040
have tasks like that but if you have

00:42:17,340 --> 00:42:21,680
things that need to come and go you

00:42:20,040 --> 00:42:23,610
think about the Internet of Things

00:42:21,680 --> 00:42:25,140
business that we talked about this

00:42:23,610 --> 00:42:27,840
morning we heard talked about bring

00:42:25,140 --> 00:42:30,750
keynotes if every time you hit a button

00:42:27,840 --> 00:42:32,430
turn a switch something's got to spring

00:42:30,750 --> 00:42:33,990
to life you want all those things

00:42:32,430 --> 00:42:37,380
sitting around waiting for something to

00:42:33,990 --> 00:42:39,990
do those are perfect for the unit

00:42:37,380 --> 00:42:42,120
Colonel world let them give birth as

00:42:39,990 --> 00:42:44,910
needed do their thing and get out of the

00:42:42,120 --> 00:42:46,110
way because if you're really talking

00:42:44,910 --> 00:42:47,610
about inning of things you can be

00:42:46,110 --> 00:42:48,140
talking about millions or billions or

00:42:47,610 --> 00:42:50,240
maybe even

00:42:48,140 --> 00:42:54,860
trillions of these things depending on

00:42:50,240 --> 00:42:58,160
what your application is so this changes

00:42:54,860 --> 00:43:01,100
the world of cloud and the cloud

00:42:58,160 --> 00:43:02,330
facilitators cloud orchestrators are

00:43:01,100 --> 00:43:05,810
going out to figure out what to do with

00:43:02,330 --> 00:43:09,290
this to my knowledge you know OpenStack

00:43:05,810 --> 00:43:11,390
and the rest have no particular strategy

00:43:09,290 --> 00:43:12,380
when it comes to these things yet but

00:43:11,390 --> 00:43:14,750
that's another thing that's going to

00:43:12,380 --> 00:43:16,730
have to come we know we need to get

00:43:14,750 --> 00:43:20,920
there yoona kernels are going to help

00:43:16,730 --> 00:43:25,340
make that happen this is one area where

00:43:20,920 --> 00:43:26,990
open source is leading the way still

00:43:25,340 --> 00:43:28,790
some old fun floating around out there

00:43:26,990 --> 00:43:31,340
I've been in this industry for 20 years

00:43:28,790 --> 00:43:35,660
working with open sores sayo open source

00:43:31,340 --> 00:43:38,900
you know that just copies no no no this

00:43:35,660 --> 00:43:41,660
is one area where open source is opening

00:43:38,900 --> 00:43:45,020
new doors the closed source isn't

00:43:41,660 --> 00:43:48,740
getting close to yet this is open source

00:43:45,020 --> 00:43:50,780
taking the forefront and as i like to

00:43:48,740 --> 00:43:52,790
say friends don't let friends go closed

00:43:50,780 --> 00:43:57,590
source in the cloud it's just not worth

00:43:52,790 --> 00:44:00,670
it it's just not worth it Zen project is

00:43:57,590 --> 00:44:04,940
playing its role you know in the cloud

00:44:00,670 --> 00:44:08,180
hypervisors our plumbing well that's

00:44:04,940 --> 00:44:09,650
fine in a house because the needs of

00:44:08,180 --> 00:44:13,910
plumbing haven't changed a great deal

00:44:09,650 --> 00:44:17,030
now from 50 years ago but in the cloud

00:44:13,910 --> 00:44:19,610
cloud is changing that plumbing has got

00:44:17,030 --> 00:44:21,260
to change too we're keeping up with it

00:44:19,610 --> 00:44:23,450
and we're in fact getting ahead of it

00:44:21,260 --> 00:44:27,410
we're facilitating that next generation

00:44:23,450 --> 00:44:32,660
your hypervisor isn't maybe it's time to

00:44:27,410 --> 00:44:33,980
think about your own future if you want

00:44:32,660 --> 00:44:35,900
to know more of what's happening we've

00:44:33,980 --> 00:44:38,560
got a newsletter that comes out roughly

00:44:35,900 --> 00:44:41,450
once a month takes four minutes to read

00:44:38,560 --> 00:44:47,390
we will not spam you you can sign up

00:44:41,450 --> 00:44:51,980
online it's easy and I think I have hit

00:44:47,390 --> 00:44:54,080
the wall on the time yes I will gladly

00:44:51,980 --> 00:44:55,730
talk with anyone inside the hallway I

00:44:54,080 --> 00:44:57,560
got to let the next speaker come set up

00:44:55,730 --> 00:45:01,330
but I thank you very much for your time

00:44:57,560 --> 00:45:01,330

YouTube URL: https://www.youtube.com/watch?v=PlJ07AAq_yY


