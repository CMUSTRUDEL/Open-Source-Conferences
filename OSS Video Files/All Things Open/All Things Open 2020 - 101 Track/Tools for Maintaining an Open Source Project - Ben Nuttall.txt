Title: Tools for Maintaining an Open Source Project - Ben Nuttall
Publication date: 2020-12-16
Playlist: All Things Open 2020 - 101 Track
Description: 
	Presented by: Ben Nuttall, BBC News Labs
Presented at All Things Open 2020 - 101 Track

Abstract: Tools for maintaining an open source project: standing on the shoulders of giants

There is a wealth of amazing tools freely available to open source software developers to use to maintain their projects. Practically every problem we face or are likely to face in software development has been lived through and solved many times over. Patterns emerge for dealing with development practises and we build our software using the tools made by the previous generation of developers.

We're very fortunate to operate in an amazing open source ecosystem where we've learned we're stronger when we build on each other's foundations. We're constantly laying new foundations for ourselves and we share our ways of working with the world. We now have a very sophisticated set of tools for developing, managing, testing and documenting our new projects without reinventing the wheel.

But we don't discover all the tools at once - we pick them up as we go along, as we find uses for them and we hear about them. I'm going to share a range of great tools I use to maintain some popular open source projects, and explain how the difference they've made.

The talk covers:

- Software packaging and distribution
- Licensing
- Virtual environments
- Software testing
- Continuous integration
- Git & GitHub
- Contributor community
- Project management tools
- Documentation tools

The talk covers examples in Python but the concepts can generally be used in any programming language.
Captions: 
	00:00:05,040 --> 00:00:07,120
so i'm going to be

00:00:05,759 --> 00:00:08,960
i'm going to be talking about tools for

00:00:07,120 --> 00:00:09,760
maintaining an open source project so my

00:00:08,960 --> 00:00:12,160
name is ben

00:00:09,760 --> 00:00:13,519
um i'm a software engineer for the bbc

00:00:12,160 --> 00:00:17,359
uh here in the uk

00:00:13,519 --> 00:00:18,240
um i work in a team called bbc news labs

00:00:17,359 --> 00:00:20,800
we

00:00:18,240 --> 00:00:22,080
create prototypes um and kind of find

00:00:20,800 --> 00:00:24,480
new ways to

00:00:22,080 --> 00:00:26,400
deliver journalism and help journalists

00:00:24,480 --> 00:00:28,720
do their work in bbc news

00:00:26,400 --> 00:00:30,080
um i spent the last six years before

00:00:28,720 --> 00:00:31,519
before this year

00:00:30,080 --> 00:00:34,239
uh working at the raspberry pi

00:00:31,519 --> 00:00:37,520
foundation so i've spoken at ato before

00:00:34,239 --> 00:00:39,120
um representing raspberry pi um

00:00:37,520 --> 00:00:40,480
but i'm i'm just gonna be talking about

00:00:39,120 --> 00:00:41,280
kind of open source in general at the

00:00:40,480 --> 00:00:45,120
moment so

00:00:41,280 --> 00:00:46,399
uh in this talk so i i've created a few

00:00:45,120 --> 00:00:50,000
kind of popular open source

00:00:46,399 --> 00:00:51,760
uh libraries and projects so um gpio0

00:00:50,000 --> 00:00:52,719
and pi wheels are two raspberry pi

00:00:51,760 --> 00:00:53,760
focused um

00:00:52,719 --> 00:00:55,520
projects that i've worked on i'm going

00:00:53,760 --> 00:00:57,120
to be mentioning those as some in some

00:00:55,520 --> 00:00:59,440
of the examples in the in the

00:00:57,120 --> 00:01:01,120
and they're in the talk i also write for

00:00:59,440 --> 00:01:02,239
opensource.com which i think you'll have

00:01:01,120 --> 00:01:03,039
you'll have heard a lot about in the

00:01:02,239 --> 00:01:05,199
context of this

00:01:03,039 --> 00:01:06,960
conference uh as they're they're quite

00:01:05,199 --> 00:01:10,080
quite involved in the conference

00:01:06,960 --> 00:01:11,040
um and i'll i'll um mention them again

00:01:10,080 --> 00:01:12,799
at the end

00:01:11,040 --> 00:01:14,640
and you can find me on twitter and ben

00:01:12,799 --> 00:01:17,439
underscore not all and that's my

00:01:14,640 --> 00:01:17,439
link to my github

00:01:17,920 --> 00:01:21,040
uh so i just wanted to point out um the

00:01:20,000 --> 00:01:23,759
t-shirt i'm wearing

00:01:21,040 --> 00:01:24,240
uh it's it's a kind of cool one i bought

00:01:23,759 --> 00:01:26,320
recently

00:01:24,240 --> 00:01:28,720
that fits in well with all that's going

00:01:26,320 --> 00:01:30,240
on so stay stay at home wear a mask

00:01:28,720 --> 00:01:31,840
i thought that was quite cool so yeah

00:01:30,240 --> 00:01:35,040
that's all

00:01:31,840 --> 00:01:36,400
so uh what this talk covers um so i'm

00:01:35,040 --> 00:01:38,320
gonna be talking about um how to

00:01:36,400 --> 00:01:40,079
organize your code base um indeed in

00:01:38,320 --> 00:01:41,840
different ways um

00:01:40,079 --> 00:01:43,119
sharing code and distributing your

00:01:41,840 --> 00:01:46,399
software

00:01:43,119 --> 00:01:48,079
using git and github testing and

00:01:46,399 --> 00:01:49,680
automated testing

00:01:48,079 --> 00:01:51,200
documentation writing and hosting

00:01:49,680 --> 00:01:52,960
documentation

00:01:51,200 --> 00:01:54,720
and licensing your software so those are

00:01:52,960 --> 00:01:55,600
the kind of the key strands of this but

00:01:54,720 --> 00:01:58,479
i'll i'll

00:01:55,600 --> 00:01:59,200
recover this at the end uh so what this

00:01:58,479 --> 00:02:01,520
talk is not

00:01:59,200 --> 00:02:02,640
um this is not a thorough follow-along

00:02:01,520 --> 00:02:04,560
tutorial of

00:02:02,640 --> 00:02:06,000
how to use each of the you know i don't

00:02:04,560 --> 00:02:08,160
know how many tools i mentioned in this

00:02:06,000 --> 00:02:10,720
talk but um there's quite a lot

00:02:08,160 --> 00:02:12,319
and uh i'm not going to be able to tutor

00:02:10,720 --> 00:02:12,959
you all the way through uh every single

00:02:12,319 --> 00:02:14,800
one

00:02:12,959 --> 00:02:16,160
uh i would point you at um other

00:02:14,800 --> 00:02:18,480
resources to go and learn about

00:02:16,160 --> 00:02:20,080
any individual that you that you want to

00:02:18,480 --> 00:02:21,360
learn more about but um

00:02:20,080 --> 00:02:23,280
i'm gonna be mentioning a lot and just

00:02:21,360 --> 00:02:23,920
showing you little little snippets of uh

00:02:23,280 --> 00:02:26,560
how i

00:02:23,920 --> 00:02:27,200
have found these tools useful um i'm

00:02:26,560 --> 00:02:28,560
also not

00:02:27,200 --> 00:02:30,720
kind of selling any of these tools or

00:02:28,560 --> 00:02:31,840
pitching them or telling the these are

00:02:30,720 --> 00:02:33,680
the right tools to use

00:02:31,840 --> 00:02:35,680
this is just some that i have found i've

00:02:33,680 --> 00:02:38,640
used in the past and found useful myself

00:02:35,680 --> 00:02:40,239
so i'm sharing my own experiences and

00:02:38,640 --> 00:02:41,920
i'm also not telling you that you

00:02:40,239 --> 00:02:44,319
need to know all of these tools inside

00:02:41,920 --> 00:02:45,920
out in order to be considered a proper

00:02:44,319 --> 00:02:48,080
programmer

00:02:45,920 --> 00:02:49,519
absolutely not there's i'm learning i

00:02:48,080 --> 00:02:50,800
learned about a lot of these tools

00:02:49,519 --> 00:02:52,959
you know more recently than you would

00:02:50,800 --> 00:02:54,800
think um and

00:02:52,959 --> 00:02:56,400
i'm learning new stuff all the time so i

00:02:54,800 --> 00:02:58,720
just like to share what i've found

00:02:56,400 --> 00:03:01,280
useful with other people

00:02:58,720 --> 00:03:02,720
and also this is not a dis at the tools

00:03:01,280 --> 00:03:04,159
that i don't mention in this talk for

00:03:02,720 --> 00:03:04,720
every tool that i mentioned there's you

00:03:04,159 --> 00:03:07,519
know

00:03:04,720 --> 00:03:08,879
several alternatives um and i'm as again

00:03:07,519 --> 00:03:10,400
i'm not trying to direct you in one

00:03:08,879 --> 00:03:12,159
particular way just

00:03:10,400 --> 00:03:13,840
these are the ones that i that i've used

00:03:12,159 --> 00:03:16,840
and i wanted to talk about

00:03:13,840 --> 00:03:18,000
anything i don't mention is not in

00:03:16,840 --> 00:03:20,959
disrespect

00:03:18,000 --> 00:03:22,560
uh so how um has brian said uh how to

00:03:20,959 --> 00:03:24,720
engage with the talk so

00:03:22,560 --> 00:03:25,760
um feel free to add comments into the

00:03:24,720 --> 00:03:29,280
chat at any time

00:03:25,760 --> 00:03:30,879
um actually now this is the point where

00:03:29,280 --> 00:03:31,200
i realize i can't actually see the chat

00:03:30,879 --> 00:03:34,799
now

00:03:31,200 --> 00:03:36,319
uh let's see if i can get it up um i'll

00:03:34,799 --> 00:03:38,080
if i can't get it up then i will show

00:03:36,319 --> 00:03:39,519
you and then i'll i'll have to refer to

00:03:38,080 --> 00:03:40,640
it at the end i was hoping to be able to

00:03:39,519 --> 00:03:42,959
follow along

00:03:40,640 --> 00:03:44,000
uh no i've got it again great okay so

00:03:42,959 --> 00:03:47,519
yeah feel free to

00:03:44,000 --> 00:03:49,519
um post stuff in the chat um

00:03:47,519 --> 00:03:50,879
and if if i spot a question while i'm

00:03:49,519 --> 00:03:51,120
while i'm giving a talk that i can kind

00:03:50,879 --> 00:03:53,040
of

00:03:51,120 --> 00:03:54,640
uh refer to then i'll perhaps be able to

00:03:53,040 --> 00:03:55,920
address it if it's if it's something

00:03:54,640 --> 00:03:57,120
more detailed it's going to send me off

00:03:55,920 --> 00:03:58,560
in a different direction

00:03:57,120 --> 00:04:00,640
i'm going to have to avoid it and maybe

00:03:58,560 --> 00:04:02,159
come back to it at the end so

00:04:00,640 --> 00:04:03,599
you know you can ask some questions at

00:04:02,159 --> 00:04:05,519
the end as well and of course you can

00:04:03,599 --> 00:04:08,720
always reach out to me on twitter and

00:04:05,519 --> 00:04:09,120
um and ask ask questions or or anything

00:04:08,720 --> 00:04:12,840
else

00:04:09,120 --> 00:04:16,880
later on okay

00:04:12,840 --> 00:04:18,400
so uh so just to cover

00:04:16,880 --> 00:04:19,680
a lot of the kind of experiences that

00:04:18,400 --> 00:04:20,959
i'm talking about the stuff that i've

00:04:19,680 --> 00:04:21,759
learned over the last few years have

00:04:20,959 --> 00:04:23,440
been

00:04:21,759 --> 00:04:25,360
through these two these two projects

00:04:23,440 --> 00:04:26,720
that i mentioned so gpr0 is a it's a

00:04:25,360 --> 00:04:28,720
python library

00:04:26,720 --> 00:04:30,240
it provides a simple api to physical

00:04:28,720 --> 00:04:32,400
computing that's doing stuff with

00:04:30,240 --> 00:04:34,400
electronics with a raspberry pi

00:04:32,400 --> 00:04:35,440
um it eases the learning curve for

00:04:34,400 --> 00:04:37,600
younger people and

00:04:35,440 --> 00:04:39,919
other beginners and educators and it's a

00:04:37,600 --> 00:04:42,560
nice pythonic api

00:04:39,919 --> 00:04:43,280
with advanced tooling to give uh

00:04:42,560 --> 00:04:45,040
experienced

00:04:43,280 --> 00:04:46,400
programmers something something more uh

00:04:45,040 --> 00:04:48,800
more interesting to do so

00:04:46,400 --> 00:04:50,560
um there's kind of lots to that and a

00:04:48,800 --> 00:04:52,400
lot of the tools i'm using i kind of

00:04:50,560 --> 00:04:53,680
used for the first time in in a project

00:04:52,400 --> 00:04:56,560
like this so

00:04:53,680 --> 00:04:57,120
just to give you some reference um and

00:04:56,560 --> 00:04:58,880
pie was

00:04:57,120 --> 00:05:00,880
the other one to this uh the long story

00:04:58,880 --> 00:05:02,960
this is that it's um

00:05:00,880 --> 00:05:04,479
it automates building raspberry pi

00:05:02,960 --> 00:05:07,840
compatible python packages

00:05:04,479 --> 00:05:10,000
um so that raspberry pi users can get

00:05:07,840 --> 00:05:11,759
access to python libraries much much

00:05:10,000 --> 00:05:14,080
quicker than they would otherwise

00:05:11,759 --> 00:05:16,800
and we kind of automate the compilation

00:05:14,080 --> 00:05:16,800
process for that

00:05:16,960 --> 00:05:20,400
so first of all distributing software so

00:05:19,759 --> 00:05:22,560
this can mean

00:05:20,400 --> 00:05:24,240
lots of different things um it can

00:05:22,560 --> 00:05:26,720
literally just be

00:05:24,240 --> 00:05:28,560
making accent giving access to giving

00:05:26,720 --> 00:05:30,000
people access to files that they need to

00:05:28,560 --> 00:05:31,840
be able to run your code

00:05:30,000 --> 00:05:33,759
um so sharing the actual code that

00:05:31,840 --> 00:05:35,759
you're writing with other people

00:05:33,759 --> 00:05:38,000
and that could be simple as simple as

00:05:35,759 --> 00:05:40,000
hosting on a personal website or

00:05:38,000 --> 00:05:41,680
or on on another site that people can

00:05:40,000 --> 00:05:43,360
download that code from and

00:05:41,680 --> 00:05:45,280
use it for themselves and maybe even

00:05:43,360 --> 00:05:46,880
modify them for themselves

00:05:45,280 --> 00:05:48,639
but in a more sophisticated way when we

00:05:46,880 --> 00:05:49,759
talk about just software distribution

00:05:48,639 --> 00:05:52,160
we're talking about

00:05:49,759 --> 00:05:54,160
things like well am i able to act to

00:05:52,160 --> 00:05:55,120
install it or dnf install it you'll

00:05:54,160 --> 00:05:58,160
install it on

00:05:55,120 --> 00:05:59,280
a linux using a linux package manager or

00:05:58,160 --> 00:06:02,479
language specific

00:05:59,280 --> 00:06:04,080
package managers such as pip npm so pip

00:06:02,479 --> 00:06:07,440
for python npm for

00:06:04,080 --> 00:06:08,720
javascript node and gem for ruby

00:06:07,440 --> 00:06:10,560
um and then there's things like the

00:06:08,720 --> 00:06:12,880
linux portable um

00:06:10,560 --> 00:06:15,120
distribution systems like slap snap and

00:06:12,880 --> 00:06:16,400
flat pack and app image

00:06:15,120 --> 00:06:18,240
and then on mac there's things like

00:06:16,400 --> 00:06:20,560
homebrew and

00:06:18,240 --> 00:06:22,319
of course as i mentioned just something

00:06:20,560 --> 00:06:24,560
being present online

00:06:22,319 --> 00:06:26,400
um on a personal website or on github or

00:06:24,560 --> 00:06:28,639
gitlab or sourceforge

00:06:26,400 --> 00:06:30,479
um being able to download it from the

00:06:28,639 --> 00:06:31,520
internet and get access to that software

00:06:30,479 --> 00:06:33,440
that's a kind of a

00:06:31,520 --> 00:06:34,960
a kind of method of distributing

00:06:33,440 --> 00:06:38,319
software but in a

00:06:34,960 --> 00:06:38,960
sort of less sophisticated way so why

00:06:38,319 --> 00:06:40,560
would we

00:06:38,960 --> 00:06:42,400
why do we distribute software in the way

00:06:40,560 --> 00:06:44,800
ways that we do um so

00:06:42,400 --> 00:06:46,400
there's ease of access so being able to

00:06:44,800 --> 00:06:48,080
access that software easily and

00:06:46,400 --> 00:06:49,520
know that you know you can just look it

00:06:48,080 --> 00:06:50,319
up if you've heard of a project look it

00:06:49,520 --> 00:06:51,840
up by name

00:06:50,319 --> 00:06:54,319
you should be able to find a way to

00:06:51,840 --> 00:06:55,919
install it and the expectations that a

00:06:54,319 --> 00:06:57,120
user might have so if you're making a

00:06:55,919 --> 00:06:58,240
python library

00:06:57,120 --> 00:07:01,759
there's an a you know there's an

00:06:58,240 --> 00:07:03,280
expectation in the python community that

00:07:01,759 --> 00:07:05,280
you should be able to pip install that

00:07:03,280 --> 00:07:08,000
library and if it's something

00:07:05,280 --> 00:07:08,960
specific to a linux distribution you

00:07:08,000 --> 00:07:10,720
would expect that

00:07:08,960 --> 00:07:12,160
you know if it was a high enough

00:07:10,720 --> 00:07:14,240
standard that it would be um

00:07:12,160 --> 00:07:16,720
in the app repositories or the or the

00:07:14,240 --> 00:07:19,680
repositories of your distribution

00:07:16,720 --> 00:07:20,800
um and being in you know specifically in

00:07:19,680 --> 00:07:24,560
in

00:07:20,800 --> 00:07:27,280
linux distribution uh repositories

00:07:24,560 --> 00:07:29,280
uh that kind of gives you uh a sort of

00:07:27,280 --> 00:07:30,800
certificate of authenticity almost that

00:07:29,280 --> 00:07:33,599
it's that you can trust that that has

00:07:30,800 --> 00:07:36,400
been had a lot of eye eyeballs on it

00:07:33,599 --> 00:07:38,240
and has been approved by the the

00:07:36,400 --> 00:07:39,520
maintainers of that repository

00:07:38,240 --> 00:07:41,199
and so there's a certain amount of trust

00:07:39,520 --> 00:07:43,360
that what you're getting is is

00:07:41,199 --> 00:07:44,720
legitimate and it's not spyware and it's

00:07:43,360 --> 00:07:45,919
not um

00:07:44,720 --> 00:07:47,360
you know it's not going to corrupt your

00:07:45,919 --> 00:07:48,240
system it's not a virus that kind of

00:07:47,360 --> 00:07:51,759
thing

00:07:48,240 --> 00:07:52,720
um and as opposed to just being able to

00:07:51,759 --> 00:07:56,080
download it from

00:07:52,720 --> 00:07:59,039
some dodgy looking website um

00:07:56,080 --> 00:08:00,720
and also stability so if if you have a

00:07:59,039 --> 00:08:01,440
system where you release your software

00:08:00,720 --> 00:08:04,879
to a

00:08:01,440 --> 00:08:05,280
repository um the idea that you're able

00:08:04,879 --> 00:08:07,440
to

00:08:05,280 --> 00:08:08,319
push out releases security updates new

00:08:07,440 --> 00:08:10,400
features

00:08:08,319 --> 00:08:12,080
uh but also especially with things like

00:08:10,400 --> 00:08:15,599
the linux distributions

00:08:12,080 --> 00:08:18,240
that every every time there's a new um

00:08:15,599 --> 00:08:19,280
a new version of the linux distribution

00:08:18,240 --> 00:08:20,720
that

00:08:19,280 --> 00:08:22,080
there's a certain stability that you

00:08:20,720 --> 00:08:23,599
know that that version will stick with

00:08:22,080 --> 00:08:25,120
that distribution and

00:08:23,599 --> 00:08:26,720
won't be you won't be kind of getting

00:08:25,120 --> 00:08:28,000
the bleeding edge changes so

00:08:26,720 --> 00:08:29,680
different different levels of different

00:08:28,000 --> 00:08:31,199
ways of approaching things but there's

00:08:29,680 --> 00:08:32,640
lots of different reasons why you want

00:08:31,199 --> 00:08:35,279
the things you want to consider when

00:08:32,640 --> 00:08:37,760
you're distributing software

00:08:35,279 --> 00:08:39,279
um so using a git repository this is a

00:08:37,760 --> 00:08:40,880
really good start if you um

00:08:39,279 --> 00:08:43,039
a lot of times you start code you just

00:08:40,880 --> 00:08:44,240
start writing um the code on your on

00:08:43,039 --> 00:08:45,760
your own computer

00:08:44,240 --> 00:08:47,440
and then what you would do is you would

00:08:45,760 --> 00:08:48,320
create a repository on something like

00:08:47,440 --> 00:08:50,399
github

00:08:48,320 --> 00:08:52,240
and you would push it to github and then

00:08:50,399 --> 00:08:54,160
it's kind of shared

00:08:52,240 --> 00:08:56,240
with with the world and it's even if

00:08:54,160 --> 00:08:57,519
nobody's nobody knows about it yet it's

00:08:56,240 --> 00:09:00,160
just there

00:08:57,519 --> 00:09:00,560
um another way you can do it is that you

00:09:00,160 --> 00:09:02,800
could

00:09:00,560 --> 00:09:04,000
uh create your repository on github

00:09:02,800 --> 00:09:05,680
clone the

00:09:04,000 --> 00:09:07,440
empty repository onto your machine and

00:09:05,680 --> 00:09:08,160
then start working on your code straight

00:09:07,440 --> 00:09:11,200
away and

00:09:08,160 --> 00:09:13,279
pushing the changes back to github

00:09:11,200 --> 00:09:14,399
that also means that you can that other

00:09:13,279 --> 00:09:16,000
users can

00:09:14,399 --> 00:09:18,080
contribute either with you or

00:09:16,000 --> 00:09:20,320
unknowingly contribute to it

00:09:18,080 --> 00:09:22,000
aside from what you're doing and push

00:09:20,320 --> 00:09:23,519
their changes to it to github in in

00:09:22,000 --> 00:09:25,760
a way that you could choose to accept

00:09:23,519 --> 00:09:27,680
the changes

00:09:25,760 --> 00:09:29,920
so something like this you would um go

00:09:27,680 --> 00:09:33,519
to github and create a repository

00:09:29,920 --> 00:09:34,800
um clone the uh get the the the

00:09:33,519 --> 00:09:36,800
details you need to be able to clone

00:09:34,800 --> 00:09:39,120
that to your machine and and how you

00:09:36,800 --> 00:09:41,040
would push your changes back

00:09:39,120 --> 00:09:42,160
and so it'd be something like this uh

00:09:41,040 --> 00:09:45,200
you create create a

00:09:42,160 --> 00:09:46,560
directory um initialize a new git

00:09:45,200 --> 00:09:50,399
repository or

00:09:46,560 --> 00:09:52,399
clone it from github and connect your

00:09:50,399 --> 00:09:53,519
your local version of your files and

00:09:52,399 --> 00:09:57,200
your code

00:09:53,519 --> 00:09:57,200
to the github origin

00:09:58,399 --> 00:10:01,760
and so yeah as i say when we're talking

00:10:00,240 --> 00:10:03,120
about distributing software

00:10:01,760 --> 00:10:05,120
if you've just written a handful of

00:10:03,120 --> 00:10:06,320
python files and it's just a case of

00:10:05,120 --> 00:10:07,519
well if you've got these files on your

00:10:06,320 --> 00:10:10,160
computer and you run

00:10:07,519 --> 00:10:11,920
this file then you've got the features

00:10:10,160 --> 00:10:14,399
that i've that i've created

00:10:11,920 --> 00:10:16,079
so in a way all you need to be able to

00:10:14,399 --> 00:10:17,680
do is distribute those files and let

00:10:16,079 --> 00:10:19,680
other people have access to them

00:10:17,680 --> 00:10:21,279
or even you know obviously to to be able

00:10:19,680 --> 00:10:22,880
to open them and

00:10:21,279 --> 00:10:25,279
modify them change them for their own

00:10:22,880 --> 00:10:29,120
purposes and potentially share the

00:10:25,279 --> 00:10:30,720
the changes back um and so one easy way

00:10:29,120 --> 00:10:32,240
of doing that is to put it on github and

00:10:30,720 --> 00:10:33,519
it's just then it's just out there it's

00:10:32,240 --> 00:10:36,000
a bit like uh

00:10:33,519 --> 00:10:37,360
sharing a folder in in in a really in in

00:10:36,000 --> 00:10:41,040
layman's terms in

00:10:37,360 --> 00:10:43,600
the most basic level and so

00:10:41,040 --> 00:10:45,120
uh with um with github the way it works

00:10:43,600 --> 00:10:46,079
is you can create a repository under

00:10:45,120 --> 00:10:48,000
your own name so

00:10:46,079 --> 00:10:50,480
if you're this is my username ben not

00:10:48,000 --> 00:10:53,760
all and i've created some projects which

00:10:50,480 --> 00:10:56,959
kind of belong to me in in in in their

00:10:53,760 --> 00:10:58,399
personal repository belong to my my user

00:10:56,959 --> 00:11:00,480
uh what you can also do is create

00:10:58,399 --> 00:11:02,480
organizations so that doesn't have to be

00:11:00,480 --> 00:11:04,399
a company it doesn't have to be

00:11:02,480 --> 00:11:06,800
anything anything in particular just you

00:11:04,399 --> 00:11:08,640
could just decide to um so in this case

00:11:06,800 --> 00:11:10,399
the pi wheels project has

00:11:08,640 --> 00:11:12,240
a pi wheels repository which is the main

00:11:10,399 --> 00:11:13,440
source code for the project itself but

00:11:12,240 --> 00:11:15,200
it also has other

00:11:13,440 --> 00:11:17,200
projects that are related to this this

00:11:15,200 --> 00:11:18,560
project so what i did was to

00:11:17,200 --> 00:11:20,399
bundle them all together and provide

00:11:18,560 --> 00:11:21,839
them in one place was to create the pi

00:11:20,399 --> 00:11:23,839
wheels organization

00:11:21,839 --> 00:11:24,959
and then publish different repositories

00:11:23,839 --> 00:11:26,640
within them

00:11:24,959 --> 00:11:29,279
and so it's quite common to see this

00:11:26,640 --> 00:11:32,240
thing where you've got um

00:11:29,279 --> 00:11:33,680
a uh the main project is has the same

00:11:32,240 --> 00:11:36,839
name of the organization

00:11:33,680 --> 00:11:38,640
um and you'll see so it'll be

00:11:36,839 --> 00:11:40,160
github.complywheels

00:11:38,640 --> 00:11:42,800
and then you've got lots of other

00:11:40,160 --> 00:11:45,200
repositories as well

00:11:42,800 --> 00:11:45,839
um but if it's just personal that's fine

00:11:45,200 --> 00:11:47,360
you can just

00:11:45,839 --> 00:11:49,440
uh publish it there and you can also

00:11:47,360 --> 00:11:51,360
move them later if you want to create an

00:11:49,440 --> 00:11:54,160
organization at a later date

00:11:51,360 --> 00:11:54,880
you can you can move them and change

00:11:54,160 --> 00:11:57,440
them

00:11:54,880 --> 00:11:58,959
and things like that so you can add

00:11:57,440 --> 00:11:59,600
collaborators to your project so

00:11:58,959 --> 00:12:01,120
individual

00:11:59,600 --> 00:12:02,720
collaborators or if you're part of an

00:12:01,120 --> 00:12:04,399
organization you can add them

00:12:02,720 --> 00:12:06,880
add people to the organization so they

00:12:04,399 --> 00:12:08,480
have access to the repositories

00:12:06,880 --> 00:12:10,480
um and there's lots of different ways

00:12:08,480 --> 00:12:12,639
that you can manage that

00:12:10,480 --> 00:12:13,680
um so github also gives you branches so

00:12:12,639 --> 00:12:16,399
this is part of the get

00:12:13,680 --> 00:12:18,000
um the git protocol that you have um

00:12:16,399 --> 00:12:20,959
multiple branches there'll be a

00:12:18,000 --> 00:12:22,560
kind of a main branch and you've got

00:12:20,959 --> 00:12:24,160
lots of your sort of feature branches

00:12:22,560 --> 00:12:24,720
that people can be working on the way

00:12:24,160 --> 00:12:26,240
that

00:12:24,720 --> 00:12:28,000
what that means is people can be working

00:12:26,240 --> 00:12:29,519
on different different features at the

00:12:28,000 --> 00:12:30,800
same time or you could even create

00:12:29,519 --> 00:12:32,959
different features and

00:12:30,800 --> 00:12:34,800
start from what what was what was in the

00:12:32,959 --> 00:12:36,959
main branch to begin with and

00:12:34,800 --> 00:12:40,240
and you can merge the changes back in

00:12:36,959 --> 00:12:40,240
when when each of them are ready

00:12:43,040 --> 00:12:49,920
github also allows you to publish your

00:12:46,480 --> 00:12:52,160
releases so you can mark a particular

00:12:49,920 --> 00:12:53,279
a particular commit uh so once you've

00:12:52,160 --> 00:12:54,639
done a particular amount of work you

00:12:53,279 --> 00:12:57,680
might say well this is constant

00:12:54,639 --> 00:12:59,600
you know this concern um constitutes uh

00:12:57,680 --> 00:13:01,839
sort of this version number so this is

00:12:59,600 --> 00:13:04,639
version 1.0 1.1

00:13:01,839 --> 00:13:05,279
uh and you publish it at that point and

00:13:04,639 --> 00:13:07,279
then

00:13:05,279 --> 00:13:08,560
that's one of the ways you can manage um

00:13:07,279 --> 00:13:10,160
your releases um

00:13:08,560 --> 00:13:11,600
and you might if you're tied in with

00:13:10,160 --> 00:13:12,560
other systems you might be able to share

00:13:11,600 --> 00:13:15,680
those same

00:13:12,560 --> 00:13:20,959
um releases with something like the pi

00:13:15,680 --> 00:13:24,079
pi or pip the python package manager

00:13:20,959 --> 00:13:26,320
um and so github also provides issues

00:13:24,079 --> 00:13:27,920
uh so the first thing you think of when

00:13:26,320 --> 00:13:30,079
you when you talk about issues is

00:13:27,920 --> 00:13:31,600
other people your users are filing bugs

00:13:30,079 --> 00:13:33,920
against your code

00:13:31,600 --> 00:13:35,040
um so that's that's one way um the

00:13:33,920 --> 00:13:37,519
issues can be used and

00:13:35,040 --> 00:13:38,800
obviously um that's that's a good that's

00:13:37,519 --> 00:13:41,680
a good thing as well

00:13:38,800 --> 00:13:43,040
but also that uh you can kind of you can

00:13:41,680 --> 00:13:44,560
create your own issues on your own

00:13:43,040 --> 00:13:46,720
repository not just bugs

00:13:44,560 --> 00:13:48,000
not just things that don't work but you

00:13:46,720 --> 00:13:51,279
know things like i tend to

00:13:48,000 --> 00:13:53,440
i tend to use uh lists of features that

00:13:51,279 --> 00:13:54,320
i want to see in my project and use or

00:13:53,440 --> 00:13:56,639
even just

00:13:54,320 --> 00:13:58,720
an issue per feature that i want to see

00:13:56,639 --> 00:14:00,800
and then i'm able to do the work

00:13:58,720 --> 00:14:02,480
push the uh push the changes up and then

00:14:00,800 --> 00:14:04,399
close the issue to say that this

00:14:02,480 --> 00:14:05,680
feature that i wanted to see is now

00:14:04,399 --> 00:14:07,360
complete

00:14:05,680 --> 00:14:10,240
so that could be a good way of managing

00:14:07,360 --> 00:14:10,240
your project as well

00:14:10,560 --> 00:14:14,240
uh so you can see this is what um a

00:14:13,120 --> 00:14:16,160
bunch of different

00:14:14,240 --> 00:14:17,839
github issues looks like in your in your

00:14:16,160 --> 00:14:18,480
project you can use labels to organize

00:14:17,839 --> 00:14:20,560
them and

00:14:18,480 --> 00:14:22,480
things like that and every issue and

00:14:20,560 --> 00:14:23,279
every um every pull request which we'll

00:14:22,480 --> 00:14:25,040
talk about next

00:14:23,279 --> 00:14:26,800
is a conversation as well so it's not

00:14:25,040 --> 00:14:28,639
just the code it's not just the changes

00:14:26,800 --> 00:14:30,480
it's the conversations you and your

00:14:28,639 --> 00:14:31,440
collaborators and your maintainers and

00:14:30,480 --> 00:14:33,839
your users are

00:14:31,440 --> 00:14:35,199
having around this this issue and they

00:14:33,839 --> 00:14:37,519
can be a really good way of

00:14:35,199 --> 00:14:39,360
um driving the the collaboration and

00:14:37,519 --> 00:14:41,120
making the decisions

00:14:39,360 --> 00:14:42,560
uh so i would recommend looking at um

00:14:41,120 --> 00:14:44,959
github issue templates

00:14:42,560 --> 00:14:46,320
uh so especially if you're if you're

00:14:44,959 --> 00:14:49,360
expecting issues from

00:14:46,320 --> 00:14:50,720
from your users you need to know

00:14:49,360 --> 00:14:53,040
a certain amount of information to be

00:14:50,720 --> 00:14:55,440
able to deal with people's issue

00:14:53,040 --> 00:14:57,120
issues and requests so you might be able

00:14:55,440 --> 00:14:59,040
to lay out a template to say

00:14:57,120 --> 00:15:00,320
this is the information we need from you

00:14:59,040 --> 00:15:01,760
to be able to

00:15:00,320 --> 00:15:04,320
look into your problem or your

00:15:01,760 --> 00:15:04,720
suggestion so you can define what that

00:15:04,320 --> 00:15:07,040
is

00:15:04,720 --> 00:15:08,959
and add that template and then when

00:15:07,040 --> 00:15:10,720
somebody goes to create an issue

00:15:08,959 --> 00:15:12,320
they're not just saying my thing doesn't

00:15:10,720 --> 00:15:14,320
work and hit send

00:15:12,320 --> 00:15:16,160
they have to actually fill out you know

00:15:14,320 --> 00:15:17,839
a basic template to say

00:15:16,160 --> 00:15:19,519
this is the version i'm using this is

00:15:17,839 --> 00:15:21,199
the thing and this is you know these are

00:15:19,519 --> 00:15:24,399
all the whatever it is that

00:15:21,199 --> 00:15:24,399
are related to your project

00:15:25,040 --> 00:15:28,079
and so it looks something you could have

00:15:26,320 --> 00:15:31,360
something like this this is one of my uh

00:15:28,079 --> 00:15:31,360
one of my issue templates

00:15:32,480 --> 00:15:35,519
uh so uh pull requests are a way that

00:15:35,040 --> 00:15:39,279
github

00:15:35,519 --> 00:15:42,720
uses to manage somebody who has

00:15:39,279 --> 00:15:43,920
um created a branch a branch of your

00:15:42,720 --> 00:15:45,360
code

00:15:43,920 --> 00:15:47,040
made some changes to it and they're

00:15:45,360 --> 00:15:49,519
pushing them back to you and asking you

00:15:47,040 --> 00:15:52,240
if you want to merge their changes in

00:15:49,519 --> 00:15:54,079
and so this can be a way for either

00:15:52,240 --> 00:15:56,880
again for either for external users

00:15:54,079 --> 00:15:58,720
or for yourself uh yourselves and your

00:15:56,880 --> 00:16:00,639
on your main your own maintainers

00:15:58,720 --> 00:16:02,000
to be able to manage changes so that you

00:16:00,639 --> 00:16:02,959
can have more eyes on things so that

00:16:02,000 --> 00:16:06,000
people aren't just

00:16:02,959 --> 00:16:07,279
pushing stuff into your code uh and so

00:16:06,000 --> 00:16:08,639
then you've got essentially a

00:16:07,279 --> 00:16:10,480
choice whether you want to accept this

00:16:08,639 --> 00:16:11,839
or not and again you can have a

00:16:10,480 --> 00:16:14,720
conversation around this

00:16:11,839 --> 00:16:16,480
and ask the the person who opened the

00:16:14,720 --> 00:16:19,839
poll request to

00:16:16,480 --> 00:16:22,720
provide more provide more detail

00:16:19,839 --> 00:16:24,079
or to make some changes or anything that

00:16:22,720 --> 00:16:27,040
you want to suggest and you can have a

00:16:24,079 --> 00:16:27,040
conversation around that

00:16:29,040 --> 00:16:32,160
um so project boards are a really good

00:16:30,720 --> 00:16:33,600
way of managing issues

00:16:32,160 --> 00:16:35,440
and pull requests as well so you can

00:16:33,600 --> 00:16:37,680
actually you can create a board

00:16:35,440 --> 00:16:39,279
uh import all your issues and or use

00:16:37,680 --> 00:16:40,560
this to organize them so if you've got

00:16:39,279 --> 00:16:42,160
like lots of issues that you want to

00:16:40,560 --> 00:16:42,880
deal with you can organize them in this

00:16:42,160 --> 00:16:46,160
way and

00:16:42,880 --> 00:16:47,680
be able to see what um

00:16:46,160 --> 00:16:51,759
what's going on in the project and where

00:16:47,680 --> 00:16:54,880
things are what's blocking things

00:16:51,759 --> 00:16:56,320
so uh licensing um so this is a kind of

00:16:54,880 --> 00:16:58,480
thing that a lot of people skip over but

00:16:56,320 --> 00:17:00,399
it's it is really important so um

00:16:58,480 --> 00:17:02,000
just just to highlight again i'm not

00:17:00,399 --> 00:17:03,360
trying to i'm not going to specify a

00:17:02,000 --> 00:17:04,160
particular license i think you should

00:17:03,360 --> 00:17:05,280
use but uh

00:17:04,160 --> 00:17:06,720
i just want to stress that it is

00:17:05,280 --> 00:17:07,600
important to choose a license for your

00:17:06,720 --> 00:17:09,360
project

00:17:07,600 --> 00:17:11,839
and that it's important that you specify

00:17:09,360 --> 00:17:15,039
which license your your project uses

00:17:11,839 --> 00:17:16,880
um the way

00:17:15,039 --> 00:17:18,799
um that i would sort of the main point i

00:17:16,880 --> 00:17:22,079
want to make about this is that

00:17:18,799 --> 00:17:23,679
it's very easy to sort of um say

00:17:22,079 --> 00:17:25,280
well you know i'm not really i'm not

00:17:23,679 --> 00:17:26,959
really interested in the you know

00:17:25,280 --> 00:17:27,600
intricate details of which license we

00:17:26,959 --> 00:17:29,840
should use

00:17:27,600 --> 00:17:30,640
um you know it's kind of a boring thing

00:17:29,840 --> 00:17:32,640
to to work

00:17:30,640 --> 00:17:34,000
to worry about it's just open source

00:17:32,640 --> 00:17:35,280
people can do what they want with it

00:17:34,000 --> 00:17:37,200
but if you if you actually look at the

00:17:35,280 --> 00:17:38,720
licenses and think well what would

00:17:37,200 --> 00:17:40,480
actually annoy you if somebody

00:17:38,720 --> 00:17:41,679
is it's possible for somebody to do

00:17:40,480 --> 00:17:43,039
something with your code that you're not

00:17:41,679 --> 00:17:45,679
happy with

00:17:43,039 --> 00:17:46,799
and so think about uh things that have

00:17:45,679 --> 00:17:47,039
happened to other people so if you've

00:17:46,799 --> 00:17:48,320
got

00:17:47,039 --> 00:17:50,080
if you've got a project and it gets

00:17:48,320 --> 00:17:52,799
acquired by some big company

00:17:50,080 --> 00:17:54,160
or not quite if it gets forked by by

00:17:52,799 --> 00:17:55,760
some other company and they start

00:17:54,160 --> 00:17:57,039
producing things with it and

00:17:55,760 --> 00:17:59,120
maybe they change the name of the

00:17:57,039 --> 00:18:01,120
project and sort of rebrand it and

00:17:59,120 --> 00:18:02,640
do all those things a lot of the open

00:18:01,120 --> 00:18:04,400
source licenses would allow that

00:18:02,640 --> 00:18:06,320
so if you're if you'd be happy for that

00:18:04,400 --> 00:18:08,160
to happen then

00:18:06,320 --> 00:18:09,679
you know choose an appropriate license

00:18:08,160 --> 00:18:10,480
if not then there are there are other

00:18:09,679 --> 00:18:12,160
options

00:18:10,480 --> 00:18:14,000
that's what just one one kind of use

00:18:12,160 --> 00:18:15,760
case but uh there's lots of

00:18:14,000 --> 00:18:17,520
lots of things that you can that you

00:18:15,760 --> 00:18:20,880
need to consider

00:18:17,520 --> 00:18:21,280
um before it's too late so um it's also

00:18:20,880 --> 00:18:22,960
it's

00:18:21,280 --> 00:18:24,640
important to say that it's important to

00:18:22,960 --> 00:18:26,240
include the the license with the source

00:18:24,640 --> 00:18:28,320
code and any distributions that you make

00:18:26,240 --> 00:18:30,480
so if you make releases

00:18:28,320 --> 00:18:32,240
and your code is going to end up

00:18:30,480 --> 00:18:34,160
scattered across the globe

00:18:32,240 --> 00:18:35,760
running on other people's machines you

00:18:34,160 --> 00:18:37,360
actually have to have to include the

00:18:35,760 --> 00:18:38,480
license with the code as it gets moved

00:18:37,360 --> 00:18:40,160
around otherwise

00:18:38,480 --> 00:18:42,000
you've just got some code that is

00:18:40,160 --> 00:18:44,080
unlicensed as far as the

00:18:42,000 --> 00:18:45,360
user is concerned but the best place to

00:18:44,080 --> 00:18:47,600
learn about um

00:18:45,360 --> 00:18:50,400
uh licenses and which ones you should

00:18:47,600 --> 00:18:53,200
use is a website chooserlicense.com

00:18:50,400 --> 00:18:54,799
uh which tells you all about you know

00:18:53,200 --> 00:18:56,000
the differences between and gives you

00:18:54,799 --> 00:18:59,360
kind of an easy way to

00:18:56,000 --> 00:19:02,799
to navigate that so

00:18:59,360 --> 00:19:04,960
um this is a kind of a talk i

00:19:02,799 --> 00:19:06,240
i've given previously but in in just in

00:19:04,960 --> 00:19:08,160
the context of python

00:19:06,240 --> 00:19:09,919
so um a lot of the examples that i'm

00:19:08,160 --> 00:19:11,360
that i'm kind of using a python related

00:19:09,919 --> 00:19:13,120
and then

00:19:11,360 --> 00:19:14,799
but they're going to be you know sort of

00:19:13,120 --> 00:19:17,919
transferable so

00:19:14,799 --> 00:19:19,760
if you um if you start with a um if you

00:19:17,919 --> 00:19:22,480
start creating a python

00:19:19,760 --> 00:19:23,760
uh package that you that you want to um

00:19:22,480 --> 00:19:25,520
you want to produce as

00:19:23,760 --> 00:19:27,679
an install of a python package you

00:19:25,520 --> 00:19:30,400
generally start with a symbol a simple

00:19:27,679 --> 00:19:32,480
a single python file and your code lives

00:19:30,400 --> 00:19:36,000
in that file

00:19:32,480 --> 00:19:38,480
um but what you want to do to be able to

00:19:36,000 --> 00:19:40,000
make it you know become a python and

00:19:38,480 --> 00:19:42,720
installable python package

00:19:40,000 --> 00:19:44,720
is just a little bit of um organization

00:19:42,720 --> 00:19:47,039
so you move your project

00:19:44,720 --> 00:19:48,720
code into a project folder within the

00:19:47,039 --> 00:19:51,200
repository

00:19:48,720 --> 00:19:52,640
um and you would create a setup.py now

00:19:51,200 --> 00:19:54,320
obviously there's lots of different ways

00:19:52,640 --> 00:19:56,880
of doing this for different languages

00:19:54,320 --> 00:19:58,320
but um just to give you an idea of the

00:19:56,880 --> 00:20:02,320
kinds of things that you need to

00:19:58,320 --> 00:20:04,720
to find out about um so i've got my

00:20:02,320 --> 00:20:05,520
here you can see there's an init.py and

00:20:04,720 --> 00:20:09,440
the project

00:20:05,520 --> 00:20:12,480
code there's a readme and a setup.py

00:20:09,440 --> 00:20:14,080
so the setup.py would just contain in

00:20:12,480 --> 00:20:16,240
you know in the case of python this

00:20:14,080 --> 00:20:17,679
would just contain

00:20:16,240 --> 00:20:19,200
things like details about the name of

00:20:17,679 --> 00:20:20,960
the project the version of the package

00:20:19,200 --> 00:20:23,280
that you're at the author

00:20:20,960 --> 00:20:24,720
some description which license you use

00:20:23,280 --> 00:20:27,200
and that kind of thing

00:20:24,720 --> 00:20:28,880
but this is just um just the basics to

00:20:27,200 --> 00:20:31,679
get started there's lots more that you

00:20:28,880 --> 00:20:31,679
you need to look at

00:20:31,919 --> 00:20:35,360
and basically you know that's that's a

00:20:34,240 --> 00:20:38,640
that's

00:20:35,360 --> 00:20:40,159
um quite short but the the basis of that

00:20:38,640 --> 00:20:42,480
is what you need to be able to publish

00:20:40,159 --> 00:20:44,480
your python module on the python package

00:20:42,480 --> 00:20:45,280
repository so depending on your language

00:20:44,480 --> 00:20:47,360
or

00:20:45,280 --> 00:20:48,320
um or you know the kind of thing you

00:20:47,360 --> 00:20:49,840
want to be doing

00:20:48,320 --> 00:20:51,280
there'll be different kinds of steps but

00:20:49,840 --> 00:20:51,679
that's just an overview of what you need

00:20:51,280 --> 00:20:54,080
to do

00:20:51,679 --> 00:20:55,280
to be able to publish a python module

00:20:54,080 --> 00:20:56,640
and there's lots of tutorials for

00:20:55,280 --> 00:20:58,400
reading about that

00:20:56,640 --> 00:21:00,159
and the same similar sort of process

00:20:58,400 --> 00:21:03,840
would go down for for npm

00:21:00,159 --> 00:21:03,840
uh or gems or something like that

00:21:04,480 --> 00:21:08,320
um so again in python and there's

00:21:06,640 --> 00:21:09,360
something called virtual environments so

00:21:08,320 --> 00:21:11,120
this is a way

00:21:09,360 --> 00:21:13,440
for you to create an environment that's

00:21:11,120 --> 00:21:17,280
isolated from your system

00:21:13,440 --> 00:21:18,720
uh and it's um so it doesn't have

00:21:17,280 --> 00:21:20,320
connection to all of your system

00:21:18,720 --> 00:21:22,240
packages and things so it's kind of a

00:21:20,320 --> 00:21:23,600
an isolated environment that that

00:21:22,240 --> 00:21:25,760
replicates sort of if

00:21:23,600 --> 00:21:27,520
if a new user had installed this you're

00:21:25,760 --> 00:21:29,440
in an environment like

00:21:27,520 --> 00:21:30,559
how how you can assume that they would

00:21:29,440 --> 00:21:33,280
be in

00:21:30,559 --> 00:21:34,000
um so you kind of build your project

00:21:33,280 --> 00:21:35,120
inside this

00:21:34,000 --> 00:21:36,720
environment and you do all your

00:21:35,120 --> 00:21:37,520
development with just this environment

00:21:36,720 --> 00:21:39,919
so you're not

00:21:37,520 --> 00:21:41,440
accidentally having you know had

00:21:39,919 --> 00:21:42,799
dependencies on things that only you

00:21:41,440 --> 00:21:44,320
have on your machine that

00:21:42,799 --> 00:21:46,640
other users of other operating systems

00:21:44,320 --> 00:21:47,840
might not have and again with

00:21:46,640 --> 00:21:50,799
other languages there'll be different

00:21:47,840 --> 00:21:50,799
ways of dealing with this

00:21:51,280 --> 00:21:58,080
um so make files are not particularly um

00:21:54,960 --> 00:22:00,080
sort of sort of

00:21:58,080 --> 00:22:01,120
um they're very popular but they're not

00:22:00,080 --> 00:22:02,720
very well they're not very

00:22:01,120 --> 00:22:04,640
they're not talked about very much um

00:22:02,720 --> 00:22:05,360
and i kind of been um using them a lot

00:22:04,640 --> 00:22:07,520
more recently

00:22:05,360 --> 00:22:08,640
and find that they're a really good way

00:22:07,520 --> 00:22:10,400
of um

00:22:08,640 --> 00:22:12,400
of managing things like this in your in

00:22:10,400 --> 00:22:14,320
your project so just having a simple

00:22:12,400 --> 00:22:16,000
make file so this is this is entire an

00:22:14,320 --> 00:22:17,120
entire make file that does that has two

00:22:16,000 --> 00:22:20,559
commands

00:22:17,120 --> 00:22:22,640
um so providing this means that i can

00:22:20,559 --> 00:22:24,799
define what make install does so the

00:22:22,640 --> 00:22:28,640
command make install

00:22:24,799 --> 00:22:31,840
will do pip install dot and make develop

00:22:28,640 --> 00:22:35,039
will do pip install e minus e dot

00:22:31,840 --> 00:22:36,799
and then you have this kind of

00:22:35,039 --> 00:22:38,240
these kind of lines that describe what

00:22:36,799 --> 00:22:39,440
those things do so if somebody just

00:22:38,240 --> 00:22:42,159
types make in your

00:22:39,440 --> 00:22:43,280
in your project it will echo out these

00:22:42,159 --> 00:22:44,720
two lines

00:22:43,280 --> 00:22:46,799
and tell them how to interact with your

00:22:44,720 --> 00:22:47,919
project so the real really good way of

00:22:46,799 --> 00:22:49,840
just providing

00:22:47,919 --> 00:22:51,120
so if your installation changes at some

00:22:49,840 --> 00:22:53,120
point

00:22:51,120 --> 00:22:54,559
you change it in here but the command

00:22:53,120 --> 00:22:56,960
make install still

00:22:54,559 --> 00:22:58,400
still takes effect so it's a really good

00:22:56,960 --> 00:23:01,520
way of just

00:22:58,400 --> 00:23:03,760
providing simple documentation and um

00:23:01,520 --> 00:23:05,679
and commands for for other people using

00:23:03,760 --> 00:23:07,280
your project

00:23:05,679 --> 00:23:08,799
and i'll come back to this later when we

00:23:07,280 --> 00:23:10,000
start adding tests and things like that

00:23:08,799 --> 00:23:12,880
but it's just a you know

00:23:10,000 --> 00:23:13,919
for a really simple thing to begin with

00:23:12,880 --> 00:23:16,000
having having these

00:23:13,919 --> 00:23:17,440
um universal commands that will just

00:23:16,000 --> 00:23:19,679
work for everybody

00:23:17,440 --> 00:23:21,760
um in a really simple way and not have

00:23:19,679 --> 00:23:24,080
to copy around several lines

00:23:21,760 --> 00:23:25,120
of code at a time to to set up your

00:23:24,080 --> 00:23:28,799
environment

00:23:25,120 --> 00:23:30,960
things like that um can be really useful

00:23:28,799 --> 00:23:32,720
and as i say as things change this

00:23:30,960 --> 00:23:34,159
doesn't um the contents of this change

00:23:32,720 --> 00:23:34,480
but the commands don't necessarily have

00:23:34,159 --> 00:23:37,760
to

00:23:34,480 --> 00:23:41,039
and you can always add new commands

00:23:37,760 --> 00:23:42,640
so testing so um so

00:23:41,039 --> 00:23:44,559
the idea of software testing is to write

00:23:42,640 --> 00:23:46,480
tests to validate what your code is

00:23:44,559 --> 00:23:48,720
supposed to do

00:23:46,480 --> 00:23:50,480
um and it's not just a one-shot thing so

00:23:48,720 --> 00:23:51,919
while i'm implementing a feature

00:23:50,480 --> 00:23:53,520
i write tests for it and then i throw

00:23:51,919 --> 00:23:55,840
them away you

00:23:53,520 --> 00:23:57,919
add to this kind of testing repository

00:23:55,840 --> 00:23:58,240
of all the tests of all the things that

00:23:57,919 --> 00:24:00,240
all

00:23:58,240 --> 00:24:02,840
the bits of your program and your and

00:24:00,240 --> 00:24:04,320
your library or whatever are supposed to

00:24:02,840 --> 00:24:07,120
do um

00:24:04,320 --> 00:24:08,080
so you keep those tests around and then

00:24:07,120 --> 00:24:09,520
it means that if

00:24:08,080 --> 00:24:10,960
you're working on feature one day and

00:24:09,520 --> 00:24:12,400
somebody else in the future is working

00:24:10,960 --> 00:24:15,039
on a completely different feature

00:24:12,400 --> 00:24:16,880
but they change a bit of code that makes

00:24:15,039 --> 00:24:18,799
your feature

00:24:16,880 --> 00:24:20,240
some edge case of your old feature

00:24:18,799 --> 00:24:22,640
stopped working

00:24:20,240 --> 00:24:23,679
um they might have inadvertently

00:24:22,640 --> 00:24:26,080
introduced a bug

00:24:23,679 --> 00:24:28,320
but when they run the tests the test

00:24:26,080 --> 00:24:31,200
that you wrote could be a long time ago

00:24:28,320 --> 00:24:32,480
might all of a sudden stop start failing

00:24:31,200 --> 00:24:33,919
and it means that they would

00:24:32,480 --> 00:24:35,520
realize that oh i've got to go and

00:24:33,919 --> 00:24:37,039
address these edge cases for this for

00:24:35,520 --> 00:24:38,240
this whole feature that we that we have

00:24:37,039 --> 00:24:39,360
because i don't want to start breaking

00:24:38,240 --> 00:24:41,200
old features

00:24:39,360 --> 00:24:44,400
so i in an ideal world that you know you

00:24:41,200 --> 00:24:46,080
would never be able to um

00:24:44,400 --> 00:24:48,240
release code that had bugs in it because

00:24:46,080 --> 00:24:50,080
you've tested because you've tested all

00:24:48,240 --> 00:24:50,880
the old features now that's obviously

00:24:50,080 --> 00:24:52,799
impossible because

00:24:50,880 --> 00:24:54,960
you can't write perfect software but

00:24:52,799 --> 00:24:56,000
having a thorough test suite can be can

00:24:54,960 --> 00:24:59,520
be really helpful in

00:24:56,000 --> 00:25:00,000
um in preventing uh bugs and things like

00:24:59,520 --> 00:25:03,919
that coming

00:25:00,000 --> 00:25:04,799
up so um an another approach i'm not

00:25:03,919 --> 00:25:07,279
going to

00:25:04,799 --> 00:25:08,159
uh sort of bang the drum too loudly but

00:25:07,279 --> 00:25:09,679
um

00:25:08,159 --> 00:25:11,440
for maximum effect write your test

00:25:09,679 --> 00:25:12,640
before you write the code so it's very

00:25:11,440 --> 00:25:14,240
easy to just sort of

00:25:12,640 --> 00:25:16,240
type away and build you know write your

00:25:14,240 --> 00:25:19,120
new feature and

00:25:16,240 --> 00:25:19,760
then add some tests but a lot of people

00:25:19,120 --> 00:25:21,440
like to

00:25:19,760 --> 00:25:23,200
to use this test driven approach where

00:25:21,440 --> 00:25:24,960
they write the tests first

00:25:23,200 --> 00:25:26,159
see them fail and then they write the

00:25:24,960 --> 00:25:26,799
code that makes them pass and they have

00:25:26,159 --> 00:25:28,799
this kind of

00:25:26,799 --> 00:25:30,720
cycle that they that they work through

00:25:28,799 --> 00:25:33,440
and that can be a really effective way

00:25:30,720 --> 00:25:35,440
um but uh it's not always not always the

00:25:33,440 --> 00:25:37,679
way people work so that's fine

00:25:35,440 --> 00:25:39,120
um so testing locally is really

00:25:37,679 --> 00:25:40,960
important so actually running a test on

00:25:39,120 --> 00:25:42,400
your machine and verifying before you've

00:25:40,960 --> 00:25:43,919
even pushed the code or shared the code

00:25:42,400 --> 00:25:47,200
or opened up a request

00:25:43,919 --> 00:25:49,039
or certainly done any releases um

00:25:47,200 --> 00:25:50,960
you've actually verified for yourself

00:25:49,039 --> 00:25:52,960
that the tests are passing

00:25:50,960 --> 00:25:54,880
so any new tests that you've written for

00:25:52,960 --> 00:25:56,720
your new feature

00:25:54,880 --> 00:25:59,440
and that you haven't uh broken anything

00:25:56,720 --> 00:26:01,120
that somebody wrote in the past

00:25:59,440 --> 00:26:02,480
um and again it can be really easy to

00:26:01,120 --> 00:26:03,600
get started with this as i'll show in

00:26:02,480 --> 00:26:06,720
the next few slides but

00:26:03,600 --> 00:26:07,600
um then you can move to automating your

00:26:06,720 --> 00:26:09,200
tests so

00:26:07,600 --> 00:26:11,919
when you push to github they get run

00:26:09,200 --> 00:26:13,279
automatically by some service

00:26:11,919 --> 00:26:14,720
which can be really useful as well

00:26:13,279 --> 00:26:16,159
especially when you get pull requests

00:26:14,720 --> 00:26:17,440
from other people if the tests are

00:26:16,159 --> 00:26:21,039
automatically run

00:26:17,440 --> 00:26:23,760
you know that's really helpful uh so

00:26:21,039 --> 00:26:24,880
be pragmatic so don't test every single

00:26:23,760 --> 00:26:26,400
possibility

00:26:24,880 --> 00:26:28,240
of everything that could ever happen

00:26:26,400 --> 00:26:29,200
every type of input that can go through

00:26:28,240 --> 00:26:32,000
your system

00:26:29,200 --> 00:26:33,120
if you wrote a function that um you know

00:26:32,000 --> 00:26:34,559
multiplied numbers

00:26:33,120 --> 00:26:36,720
you couldn't be you wouldn't be expected

00:26:34,559 --> 00:26:38,480
to wrote to write tests for

00:26:36,720 --> 00:26:40,000
every single combination of all the

00:26:38,480 --> 00:26:42,080
numbers otherwise there wouldn't be any

00:26:40,000 --> 00:26:45,120
point to writing software to

00:26:42,080 --> 00:26:46,880
to automate that um so use edge find the

00:26:45,120 --> 00:26:48,240
edge cases where is it likely to break

00:26:46,880 --> 00:26:51,120
what's slightly different

00:26:48,240 --> 00:26:53,120
different uh use cases um and test those

00:26:51,120 --> 00:26:54,799
especially

00:26:53,120 --> 00:26:56,240
uh so really it's really important to be

00:26:54,799 --> 00:26:59,120
probatic then

00:26:56,240 --> 00:26:59,840
so basic testing in python um there's a

00:26:59,120 --> 00:27:03,520
a

00:26:59,840 --> 00:27:05,360
built-in um um

00:27:03,520 --> 00:27:08,000
a search keyword in python that allows

00:27:05,360 --> 00:27:09,520
you to run basic assertions to say

00:27:08,000 --> 00:27:11,600
this should equal this and don't

00:27:09,520 --> 00:27:13,679
continue if it does so you can just

00:27:11,600 --> 00:27:15,279
have an another test a test file away

00:27:13,679 --> 00:27:16,640
from your project

00:27:15,279 --> 00:27:18,559
and that just lists all of these

00:27:16,640 --> 00:27:21,760
assertions that

00:27:18,559 --> 00:27:25,840
like i said test this particular case

00:27:21,760 --> 00:27:27,360
um and and that's a really easy way to

00:27:25,840 --> 00:27:29,279
get started you don't have to learn

00:27:27,360 --> 00:27:30,399
testing frameworks and things you can

00:27:29,279 --> 00:27:31,760
you can

00:27:30,399 --> 00:27:33,679
you know you can get away with quite

00:27:31,760 --> 00:27:36,399
simple tests

00:27:33,679 --> 00:27:38,080
to begin with um so with whether there's

00:27:36,399 --> 00:27:39,520
a library called pi test that helps you

00:27:38,080 --> 00:27:41,200
kind of wrap around your tests and give

00:27:39,520 --> 00:27:42,559
you some nice output so the only

00:27:41,200 --> 00:27:45,279
difference between basic

00:27:42,559 --> 00:27:46,000
basic testing using assert and using pi

00:27:45,279 --> 00:27:47,600
test is

00:27:46,000 --> 00:27:49,039
to wrap them in these functions called

00:27:47,600 --> 00:27:51,039
test underscore

00:27:49,039 --> 00:27:52,320
um and then put your assertions in there

00:27:51,039 --> 00:27:54,240
and then they're broken down you get

00:27:52,320 --> 00:27:55,919
some really nice output

00:27:54,240 --> 00:27:57,840
and the way you generally uh certainly

00:27:55,919 --> 00:27:59,919
in python but this is quite common

00:27:57,840 --> 00:28:02,320
in most most languages is you would have

00:27:59,919 --> 00:28:04,720
your project's project source in here

00:28:02,320 --> 00:28:05,360
uh in this in this directory and you

00:28:04,720 --> 00:28:07,840
would have a

00:28:05,360 --> 00:28:08,480
test directory sort of adjacent to that

00:28:07,840 --> 00:28:10,399
along

00:28:08,480 --> 00:28:13,440
within your repo so that other people

00:28:10,399 --> 00:28:13,440
can see the tests as well

00:28:13,600 --> 00:28:17,440
and so you know when you you know with

00:28:15,520 --> 00:28:18,320
that example i just gave is just a

00:28:17,440 --> 00:28:20,559
simple test

00:28:18,320 --> 00:28:21,919
um this is the the this is pi test

00:28:20,559 --> 00:28:22,720
running it so you can see there that

00:28:21,919 --> 00:28:25,200
it's

00:28:22,720 --> 00:28:26,799
run this test and it's passed and that's

00:28:25,200 --> 00:28:28,880
the output that you get and if you get

00:28:26,799 --> 00:28:30,399
any failures you'll see stuff in red

00:28:28,880 --> 00:28:33,200
and it will tell you which ones failed

00:28:30,399 --> 00:28:35,520
and why they failed

00:28:33,200 --> 00:28:37,440
uh you can also do more advanced things

00:28:35,520 --> 00:28:38,799
like raising assertions and check that

00:28:37,440 --> 00:28:39,279
assertions have been raised under

00:28:38,799 --> 00:28:41,840
certain

00:28:39,279 --> 00:28:42,640
circumstances and lots lots and more

00:28:41,840 --> 00:28:44,880
detail that you

00:28:42,640 --> 00:28:46,720
can go into with that so tox is a again

00:28:44,880 --> 00:28:48,640
a python specific thing but this will

00:28:46,720 --> 00:28:50,480
enable to you to run your tests on

00:28:48,640 --> 00:28:52,080
multiple python versions

00:28:50,480 --> 00:28:54,240
and again there'll be other things for

00:28:52,080 --> 00:28:55,840
different languages

00:28:54,240 --> 00:28:58,000
uh there's um in python there's

00:28:55,840 --> 00:28:58,960
something called coverage.py but the

00:28:58,000 --> 00:29:02,080
idea of

00:28:58,960 --> 00:29:05,200
test coverage um analysis is is common

00:29:02,080 --> 00:29:07,279
amongst all languages um so the idea of

00:29:05,200 --> 00:29:09,120
running your tests and then seeing well

00:29:07,279 --> 00:29:10,159
which lines how much of my code was

00:29:09,120 --> 00:29:11,600
actually tested

00:29:10,159 --> 00:29:13,840
when it you know when it ran through and

00:29:11,600 --> 00:29:14,320
it will log well this line actually

00:29:13,840 --> 00:29:16,399
never

00:29:14,320 --> 00:29:18,720
never got hit by any of the tests this

00:29:16,399 --> 00:29:19,520
this part here is not currently tested

00:29:18,720 --> 00:29:21,360
and you can get

00:29:19,520 --> 00:29:22,960
you can get a percentage and you see a

00:29:21,360 --> 00:29:25,200
breakdown of which um

00:29:22,960 --> 00:29:26,799
which tests which parts of your code are

00:29:25,200 --> 00:29:28,960
not being touched by the tests

00:29:26,799 --> 00:29:31,120
which helps your if the effect you

00:29:28,960 --> 00:29:33,360
realize the effectiveness of your tests

00:29:31,120 --> 00:29:35,039
so you might get something like this um

00:29:33,360 --> 00:29:36,720
showing you which lines so

00:29:35,039 --> 00:29:38,640
there's generally speaking in this case

00:29:36,720 --> 00:29:41,200
there's lots of test coverage but

00:29:38,640 --> 00:29:43,360
you can see well this bit needs quite a

00:29:41,200 --> 00:29:47,120
lot of attention or this bit does

00:29:43,360 --> 00:29:49,919
and actually focus your efforts on there

00:29:47,120 --> 00:29:51,840
so pushing um pushing your tests and

00:29:49,919 --> 00:29:53,840
have the tests run automatically the

00:29:51,840 --> 00:29:55,279
there's a project called travis which is

00:29:53,840 --> 00:29:57,279
really good i've used this

00:29:55,279 --> 00:29:59,279
for for a few years more recently i've

00:29:57,279 --> 00:29:59,919
moved over to to using github actions

00:29:59,279 --> 00:30:03,039
because it's

00:29:59,919 --> 00:30:05,919
nice and integrated with github so

00:30:03,039 --> 00:30:07,760
you can go to github actions and um it

00:30:05,919 --> 00:30:09,039
will suggest things but based on the

00:30:07,760 --> 00:30:11,679
programming language you're using

00:30:09,039 --> 00:30:13,200
using but what i've generally done is

00:30:11,679 --> 00:30:15,279
started with this workflow the python

00:30:13,200 --> 00:30:18,159
package

00:30:15,279 --> 00:30:19,919
workflow and sort of just modified it to

00:30:18,159 --> 00:30:22,399
actually just run make test

00:30:19,919 --> 00:30:24,399
because my my test my mate file has the

00:30:22,399 --> 00:30:27,279
testing uh commands in there

00:30:24,399 --> 00:30:28,159
and um and that's all i need to do

00:30:27,279 --> 00:30:30,240
really so

00:30:28,159 --> 00:30:31,360
instead of using specific pip commands

00:30:30,240 --> 00:30:32,320
or whatever i'm i'm just saying

00:30:31,360 --> 00:30:36,080
whatever's in my

00:30:32,320 --> 00:30:38,159
my make test command and when you get a

00:30:36,080 --> 00:30:39,120
um when you've got an action setup that

00:30:38,159 --> 00:30:41,840
runs all these

00:30:39,120 --> 00:30:42,399
all these checks um that can run linting

00:30:41,840 --> 00:30:43,919
it can run

00:30:42,399 --> 00:30:45,520
your test suite it can run coverage

00:30:43,919 --> 00:30:46,080
analysis you can do all sorts of things

00:30:45,520 --> 00:30:48,880
like that

00:30:46,080 --> 00:30:50,000
whatever you um you choose whenever you

00:30:48,880 --> 00:30:51,919
get a pull request

00:30:50,000 --> 00:30:53,520
it will run all the checks or wherever

00:30:51,919 --> 00:30:55,440
you push it will run all the checks

00:30:53,520 --> 00:30:56,799
and show you you know you want to see

00:30:55,440 --> 00:30:58,240
these all green ticks

00:30:56,799 --> 00:31:00,240
for all the different environments you

00:30:58,240 --> 00:31:01,840
want to run in

00:31:00,240 --> 00:31:04,240
and if somebody's written a written some

00:31:01,840 --> 00:31:05,600
code which will break your tests

00:31:04,240 --> 00:31:07,120
then you see that in the pull request

00:31:05,600 --> 00:31:08,480
straight away which is really really

00:31:07,120 --> 00:31:11,200
important

00:31:08,480 --> 00:31:12,880
and so like i said uh you know my next

00:31:11,200 --> 00:31:13,440
thing to add to the makefile here would

00:31:12,880 --> 00:31:15,200
be um

00:31:13,440 --> 00:31:16,960
the mate test and then i've just

00:31:15,200 --> 00:31:18,559
described what the commands are that i

00:31:16,960 --> 00:31:20,000
need to be able to run my tests in this

00:31:18,559 --> 00:31:21,200
case it's some

00:31:20,000 --> 00:31:23,039
couple of commands to do with the

00:31:21,200 --> 00:31:23,760
coverage analysis and running pi test

00:31:23,039 --> 00:31:25,440
and where they are

00:31:23,760 --> 00:31:27,120
and all that kind of thing i don't want

00:31:25,440 --> 00:31:29,360
to have to remember this command

00:31:27,120 --> 00:31:30,799
and type it every single time just make

00:31:29,360 --> 00:31:31,679
tests every single time even if that

00:31:30,799 --> 00:31:34,960
changes

00:31:31,679 --> 00:31:36,000
that can be really useful so um on to

00:31:34,960 --> 00:31:37,919
documentation

00:31:36,000 --> 00:31:40,840
so there's a there's a really good blog

00:31:37,919 --> 00:31:42,320
post that you can read on this this url

00:31:40,840 --> 00:31:44,480
documentation.divio.com

00:31:42,320 --> 00:31:45,919
um a friend of mine sort of does this

00:31:44,480 --> 00:31:47,679
this really good conference talk on

00:31:45,919 --> 00:31:48,000
documentation so i wanted to start with

00:31:47,679 --> 00:31:51,519
that

00:31:48,000 --> 00:31:53,360
so uh there the idea is that there are

00:31:51,519 --> 00:31:54,720
four types of documentation and people

00:31:53,360 --> 00:31:56,880
generally mix them up

00:31:54,720 --> 00:31:58,559
so there's there's things like tutorials

00:31:56,880 --> 00:32:01,600
which are

00:31:58,559 --> 00:32:03,519
learning oriented in there about

00:32:01,600 --> 00:32:06,159
taking you through step by step and you

00:32:03,519 --> 00:32:08,240
typing commands when you're told to and

00:32:06,159 --> 00:32:09,360
following along and that kind of thing

00:32:08,240 --> 00:32:11,679
and there's kind of how-to

00:32:09,360 --> 00:32:12,640
guides which are problem oriented so

00:32:11,679 --> 00:32:15,760
there's things like

00:32:12,640 --> 00:32:17,360
um how do i get x to do y

00:32:15,760 --> 00:32:18,720
and it's uh it's not going to start from

00:32:17,360 --> 00:32:19,600
the beginning it's going to assume that

00:32:18,720 --> 00:32:20,880
you've got

00:32:19,600 --> 00:32:22,480
a certain amount of knowledge and you've

00:32:20,880 --> 00:32:22,960
used these things before and it will

00:32:22,480 --> 00:32:25,919
teach you

00:32:22,960 --> 00:32:26,960
how to solve a particular problem um so

00:32:25,919 --> 00:32:28,640
there's

00:32:26,960 --> 00:32:30,720
you know nailed into a specific type of

00:32:28,640 --> 00:32:33,279
context and then you've got

00:32:30,720 --> 00:32:34,399
um explanation so it might be blog posts

00:32:33,279 --> 00:32:36,559
and kind of like you know

00:32:34,399 --> 00:32:38,320
explaining why things are the way they

00:32:36,559 --> 00:32:39,679
are how you how you generally take

00:32:38,320 --> 00:32:41,039
different approaches

00:32:39,679 --> 00:32:44,080
and then there's things like reference

00:32:41,039 --> 00:32:45,760
so your api documentation that says well

00:32:44,080 --> 00:32:47,360
this class has this method and this

00:32:45,760 --> 00:32:48,880
method and this method and this is the

00:32:47,360 --> 00:32:50,720
these are the parameters that they take

00:32:48,880 --> 00:32:52,080
these are the types that they take

00:32:50,720 --> 00:32:53,760
and they're kind of four diff completely

00:32:52,080 --> 00:32:54,880
different types of thing they're all

00:32:53,760 --> 00:32:56,080
useful

00:32:54,880 --> 00:32:58,480
and you can have them all within the

00:32:56,080 --> 00:33:00,559
same place but not necessarily

00:32:58,480 --> 00:33:01,919
in the same body of text so if you've

00:33:00,559 --> 00:33:03,519
got a page that says this is the

00:33:01,919 --> 00:33:05,760
documentation for this

00:33:03,519 --> 00:33:07,200
it should just be one of these of these

00:33:05,760 --> 00:33:11,679
four things

00:33:07,200 --> 00:33:13,200
um and so i'll just run through a few

00:33:11,679 --> 00:33:15,200
a few ways of of sharing your

00:33:13,200 --> 00:33:17,519
documentation so github provides

00:33:15,200 --> 00:33:18,320
a really simple way and it renders any

00:33:17,519 --> 00:33:20,080
markdown

00:33:18,320 --> 00:33:22,240
so a markdown file looks something like

00:33:20,080 --> 00:33:24,080
this you just write um

00:33:22,240 --> 00:33:25,279
this syntax this means header one this

00:33:24,080 --> 00:33:26,880
means header two

00:33:25,279 --> 00:33:28,399
some text goes here and these are some

00:33:26,880 --> 00:33:30,640
bullet um bullet

00:33:28,399 --> 00:33:32,480
uh bulleted list items with uh with a

00:33:30,640 --> 00:33:35,679
link to a website

00:33:32,480 --> 00:33:37,279
um and you can publish it as part of

00:33:35,679 --> 00:33:40,080
your repository and it will just render

00:33:37,279 --> 00:33:41,760
in html it's a really nice way of

00:33:40,080 --> 00:33:44,880
just providing simple instructions and

00:33:41,760 --> 00:33:46,320
documentation that way

00:33:44,880 --> 00:33:48,559
and there's also a project called mk

00:33:46,320 --> 00:33:50,080
docs which is markdown based

00:33:48,559 --> 00:33:52,320
documentation builder

00:33:50,080 --> 00:33:54,559
it exports you a whole website of static

00:33:52,320 --> 00:33:56,880
html that you can then deploy

00:33:54,559 --> 00:33:58,640
so you just write some markdown tell it

00:33:56,880 --> 00:34:01,279
to um

00:33:58,640 --> 00:34:01,679
bundle that into html and then deploy it

00:34:01,279 --> 00:34:02,880
um

00:34:01,679 --> 00:34:04,480
and you can host that anywhere so you

00:34:02,880 --> 00:34:06,720
can host on github pages or you can

00:34:04,480 --> 00:34:08,079
self-host it and it's a really good

00:34:06,720 --> 00:34:10,079
starter i've used that for some small

00:34:08,079 --> 00:34:11,599
projects but for bigger projects

00:34:10,079 --> 00:34:13,200
especially things like python libraries

00:34:11,599 --> 00:34:15,040
i've tended to use um

00:34:13,200 --> 00:34:17,200
restructured text which is a bit more

00:34:15,040 --> 00:34:18,879
sort of verbose and

00:34:17,200 --> 00:34:20,960
has a bit more of a learning curve to it

00:34:18,879 --> 00:34:21,839
but um similar sort of thing you've got

00:34:20,960 --> 00:34:25,119
this kind of different

00:34:21,839 --> 00:34:28,480
approach to headers um but

00:34:25,119 --> 00:34:31,040
essentially lists and um reference

00:34:28,480 --> 00:34:32,399
links and references are kind of similar

00:34:31,040 --> 00:34:33,599
but it's a lot more powerful because you

00:34:32,399 --> 00:34:35,440
can tie in with other

00:34:33,599 --> 00:34:37,280
you can link to different pages within

00:34:35,440 --> 00:34:40,480
the site in a in a quite

00:34:37,280 --> 00:34:44,480
quite neat way and um you can also

00:34:40,480 --> 00:34:46,159
um you can also have it extract the

00:34:44,480 --> 00:34:46,960
documentation from your docs strings so

00:34:46,159 --> 00:34:48,480
if you've written

00:34:46,960 --> 00:34:50,960
and this will be for multiple languages

00:34:48,480 --> 00:34:52,800
but in python if you write a doc string

00:34:50,960 --> 00:34:55,440
for a for a class or for a method or

00:34:52,800 --> 00:34:57,040
for a function it will extract that and

00:34:55,440 --> 00:34:59,760
generate your web page with

00:34:57,040 --> 00:35:01,040
all of your api documentation and you

00:34:59,760 --> 00:35:03,280
can kind of

00:35:01,040 --> 00:35:05,440
mix mix stuff together so you could

00:35:03,280 --> 00:35:06,960
write paragraphs of text

00:35:05,440 --> 00:35:08,720
and then say well actually i've got an

00:35:06,960 --> 00:35:10,880
intro here and then i want to have

00:35:08,720 --> 00:35:12,240
the class documentation for this class

00:35:10,880 --> 00:35:12,960
and these are the things that i want you

00:35:12,240 --> 00:35:15,119
to show

00:35:12,960 --> 00:35:16,640
so show the these methods and these

00:35:15,119 --> 00:35:18,720
properties

00:35:16,640 --> 00:35:20,079
um and the ones that i've admitted i

00:35:18,720 --> 00:35:22,480
don't want to show

00:35:20,079 --> 00:35:24,000
um and you have a lot of control and

00:35:22,480 --> 00:35:26,000
it's it's a really good way of writing

00:35:24,000 --> 00:35:27,359
good for a documentation

00:35:26,000 --> 00:35:28,960
and so you might have seen this on

00:35:27,359 --> 00:35:30,560
things like the python documentation

00:35:28,960 --> 00:35:31,520
that the python language documentation

00:35:30,560 --> 00:35:33,920
itself is

00:35:31,520 --> 00:35:34,720
is written in restricted text and is

00:35:33,920 --> 00:35:38,400
deployed

00:35:34,720 --> 00:35:38,400
using this this project called sphinx

00:35:38,800 --> 00:35:41,839
and then there's something called read

00:35:39,839 --> 00:35:43,440
the docs which allows you to which is a

00:35:41,839 --> 00:35:46,560
way of hosting your docs as well

00:35:43,440 --> 00:35:48,240
so using um sphinx that allows you to

00:35:46,560 --> 00:35:49,839
it sort of automatically tags the

00:35:48,240 --> 00:35:50,640
versions according to your when your

00:35:49,839 --> 00:35:53,280
releases were

00:35:50,640 --> 00:35:55,119
and and then you have access to your

00:35:53,280 --> 00:35:55,680
documentation at particular version

00:35:55,119 --> 00:35:57,920
points

00:35:55,680 --> 00:35:59,200
so i want the version 1.0 docs or the

00:35:57,920 --> 00:36:02,560
1.1 docs or the

00:35:59,200 --> 00:36:04,079
1.2 or just the latest um

00:36:02,560 --> 00:36:06,160
and if you have branches and you've got

00:36:04,079 --> 00:36:06,720
something uh in progress you can check

00:36:06,160 --> 00:36:10,240
it out

00:36:06,720 --> 00:36:12,320
and see it live as well um

00:36:10,240 --> 00:36:13,920
and you know you can automate this so

00:36:12,320 --> 00:36:16,480
when you do a release to github and it's

00:36:13,920 --> 00:36:18,240
tagged as this is a new version release

00:36:16,480 --> 00:36:19,839
it will go and build when build the new

00:36:18,240 --> 00:36:22,720
version of your docs and publish that as

00:36:19,839 --> 00:36:26,079
a new branch as well

00:36:22,720 --> 00:36:28,000
um and finally the um there's a project

00:36:26,079 --> 00:36:31,599
called graphviz which allows you to

00:36:28,000 --> 00:36:33,040
generate graphs and diagrams um from

00:36:31,599 --> 00:36:35,599
uh you know that might supplement your

00:36:33,040 --> 00:36:38,160
documentation which i use quite a lot so

00:36:35,599 --> 00:36:39,440
with it's again it's a little obtuse a

00:36:38,160 --> 00:36:40,000
little one of those things you've got to

00:36:39,440 --> 00:36:43,040
learn but

00:36:40,000 --> 00:36:45,599
um basically this is describing how this

00:36:43,040 --> 00:36:48,000
diagram looks it's just essentially

00:36:45,599 --> 00:36:49,599
the word button pointing to the word led

00:36:48,000 --> 00:36:53,040
but describing

00:36:49,599 --> 00:36:54,800
using these these types of graph

00:36:53,040 --> 00:36:56,560
elements and things like that and can be

00:36:54,800 --> 00:36:59,440
really useful i've used it for

00:36:56,560 --> 00:37:01,119
um um automatically generating things

00:36:59,440 --> 00:37:03,040
like class diagrams and stuff like that

00:37:01,119 --> 00:37:03,839
within the gpr0 library which is really

00:37:03,040 --> 00:37:08,400
useful

00:37:03,839 --> 00:37:09,119
um and you can have the um the source

00:37:08,400 --> 00:37:11,440
code of

00:37:09,119 --> 00:37:13,200
you know of what's what you can see here

00:37:11,440 --> 00:37:13,920
within your repository so that it's just

00:37:13,200 --> 00:37:17,440
part of

00:37:13,920 --> 00:37:19,599
alongside your code um so i'm just just

00:37:17,440 --> 00:37:21,920
wrapping up now so um

00:37:19,599 --> 00:37:22,880
just to go over what the talk covered so

00:37:21,920 --> 00:37:24,800
i talked about

00:37:22,880 --> 00:37:26,320
organizing your code base so the module

00:37:24,800 --> 00:37:28,800
structure things like the python things

00:37:26,320 --> 00:37:30,560
like setup.py and your make files

00:37:28,800 --> 00:37:32,160
sharing code and distributing software

00:37:30,560 --> 00:37:34,000
so using things like like

00:37:32,160 --> 00:37:36,000
pushing to github and publishing on

00:37:34,000 --> 00:37:40,320
pipeline and so people when you install

00:37:36,000 --> 00:37:42,560
with pip using git and github um

00:37:40,320 --> 00:37:44,240
you know repositories users organization

00:37:42,560 --> 00:37:45,920
collaborators issues pull requests

00:37:44,240 --> 00:37:48,960
project boards and so on

00:37:45,920 --> 00:37:48,960
automated testing

00:37:49,440 --> 00:37:55,599
documentation and uh licensing software

00:37:53,599 --> 00:37:58,040
um so i write about the tools that i

00:37:55,599 --> 00:38:01,040
come across on on a blog called uh

00:37:58,040 --> 00:38:02,400
tooling.benetal.com so i kind of it was

00:38:01,040 --> 00:38:05,520
supposed to be weekly but it's

00:38:02,400 --> 00:38:06,880
drifted a little uh and i also write for

00:38:05,520 --> 00:38:08,400
opensource.com and

00:38:06,880 --> 00:38:10,079
there's people within the conference you

00:38:08,400 --> 00:38:12,880
can talk to about about writing for them

00:38:10,079 --> 00:38:19,839
if you want to contribute as well but um

00:38:12,880 --> 00:38:19,839

YouTube URL: https://www.youtube.com/watch?v=hCcP4NBexFU


