Title: Building Raspberry PI Supercomputers - Federico Lucifredi
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Hardware IoT Track
Description: 
	Presented by: Federico Lucifredi, Red Hat
Presented at All Things Open 2020 - Hardware/IoT Track

Abstract: Federico discusses what is required to integrate clusters of ARM SBCs, with a focus on Raspberry PI units due to their popularity; the software integration necessary to make them practical, what is necessary to easily configure nodes, and issue commands for system operation; and concludes with how to execute numerical workloads using the MPI interface.

This is a live tutorial with a live cluster, and is meant to be an introduction for those new to Linux clustering.
Captions: 
	00:00:05,120 --> 00:00:08,240
all right

00:00:05,839 --> 00:00:10,160
so the talk is about two things one is

00:00:08,240 --> 00:00:13,200
the basics of clustering

00:00:10,160 --> 00:00:16,320
and how to build a proper cluster

00:00:13,200 --> 00:00:17,520
in terms of setting it up comfortably

00:00:16,320 --> 00:00:20,080
for linux or

00:00:17,520 --> 00:00:20,800
generally a unix system and the other

00:00:20,080 --> 00:00:22,400
part is

00:00:20,800 --> 00:00:25,119
it's meant to be an introduction to

00:00:22,400 --> 00:00:27,920
supercomputing and this was designed as

00:00:25,119 --> 00:00:30,880
an intro talk for

00:00:27,920 --> 00:00:31,599
for students for example or for people

00:00:30,880 --> 00:00:34,880
that build

00:00:31,599 --> 00:00:38,480
clusters for for operational

00:00:34,880 --> 00:00:38,480
or demo purposes

00:00:41,360 --> 00:00:46,640
so um hi

00:00:44,559 --> 00:00:49,200
uh quick introduction i am product

00:00:46,640 --> 00:00:51,760
management director at red hat

00:00:49,200 --> 00:00:53,199
i work primarily on chef storage at the

00:00:51,760 --> 00:00:55,520
moment

00:00:53,199 --> 00:00:56,480
uh previously i was ubuntu server pm at

00:00:55,520 --> 00:00:58,640
canonical

00:00:56,480 --> 00:01:00,320
and if you roll back the decade i was

00:00:58,640 --> 00:01:03,440
the dreaded systems management

00:01:00,320 --> 00:01:05,760
tsar at susa shameless plug

00:01:03,440 --> 00:01:07,920
i have a book out on aws system

00:01:05,760 --> 00:01:09,439
administration by o'reilly which is why

00:01:07,920 --> 00:01:12,479
the picture there

00:01:09,439 --> 00:01:15,119
is so full of clouds and

00:01:12,479 --> 00:01:18,080
um you can see here a list of things

00:01:15,119 --> 00:01:21,520
that i've worked on but

00:01:18,080 --> 00:01:22,400
that's enough of the of the marketing

00:01:21,520 --> 00:01:25,360
rules that you all

00:01:22,400 --> 00:01:26,479
ought to introduce yourself it's enough

00:01:25,360 --> 00:01:29,520
about them

00:01:26,479 --> 00:01:31,680
so um then there is the legal slide

00:01:29,520 --> 00:01:33,759
there is no liability if you follow our

00:01:31,680 --> 00:01:36,079
instructions and stop your toe or bring

00:01:33,759 --> 00:01:38,000
about the end of the universe

00:01:36,079 --> 00:01:40,000
or break your device which is far more

00:01:38,000 --> 00:01:42,880
likely

00:01:40,000 --> 00:01:45,280
this year mischief is a lot less likely

00:01:42,880 --> 00:01:47,280
than usual

00:01:45,280 --> 00:01:49,439
but some smart alec will doubtlessly

00:01:47,280 --> 00:01:51,439
succeed in destroying some hardware

00:01:49,439 --> 00:01:54,320
i know i have i have already smoked the

00:01:51,439 --> 00:01:56,479
pi4 hdmi port

00:01:54,320 --> 00:01:58,960
when a loose cable touch the power

00:01:56,479 --> 00:02:01,040
supply so

00:01:58,960 --> 00:02:03,600
the hardware that you break is out of

00:02:01,040 --> 00:02:03,600
your budget

00:02:03,840 --> 00:02:07,360
we're going to break out of the slides

00:02:06,719 --> 00:02:12,560
for

00:02:07,360 --> 00:02:12,560
one second and look at

00:02:13,040 --> 00:02:20,239
pictures of how the cluster

00:02:16,160 --> 00:02:24,480
was built so first

00:02:20,239 --> 00:02:28,080
how by four cluster

00:02:24,480 --> 00:02:30,560
is built i'm sorry pi three clusters

00:02:28,080 --> 00:02:36,000
um can you still see the share probably

00:02:30,560 --> 00:02:40,720
not because i had focused it on

00:02:36,000 --> 00:02:40,720
the window i need to share the desktop

00:02:44,879 --> 00:02:51,040
there we go got it you should see

00:02:47,920 --> 00:02:52,560
okay perfect so um

00:02:51,040 --> 00:02:54,560
these clusters were meant to be very

00:02:52,560 --> 00:02:58,080
mobile and so

00:02:54,560 --> 00:02:59,200
um i um built these uh carrying cases

00:02:58,080 --> 00:03:01,360
for them so that

00:02:59,200 --> 00:03:02,800
they could travel an airplane without

00:03:01,360 --> 00:03:05,840
being destroyed

00:03:02,800 --> 00:03:07,519
and i like dune references which i guess

00:03:05,840 --> 00:03:08,560
are more topical now with the movie

00:03:07,519 --> 00:03:14,000
coming out

00:03:08,560 --> 00:03:14,000
so the the logo is what you see there

00:03:14,480 --> 00:03:18,319
this is a pi 3 cluster so the hardware

00:03:16,720 --> 00:03:21,200
that went into it

00:03:18,319 --> 00:03:22,080
three raspberry pi 3s a kit from a

00:03:21,200 --> 00:03:25,200
vendor called

00:03:22,080 --> 00:03:28,560
cycle cluster that makes

00:03:25,200 --> 00:03:30,000
kits for building clusters out of

00:03:28,560 --> 00:03:33,040
various

00:03:30,000 --> 00:03:36,400
system-on-chip boards and

00:03:33,040 --> 00:03:40,000
here's how the assembly looks like hex

00:03:36,400 --> 00:03:43,040
standoffs connecting the plexiglass case

00:03:40,000 --> 00:03:44,879
and and then the boards there is a

00:03:43,040 --> 00:03:48,080
custom power distribution board

00:03:44,879 --> 00:03:48,080
in this case it's

00:03:48,400 --> 00:03:52,799
standard usb and all that it does is it

00:03:51,680 --> 00:03:55,760
takes

00:03:52,799 --> 00:03:56,959
power from the wall and distributed

00:03:55,760 --> 00:04:01,760
distributes it to

00:03:56,959 --> 00:04:04,080
all the usb ports and the case is um

00:04:01,760 --> 00:04:05,840
a nice design it's it's well made and

00:04:04,080 --> 00:04:07,519
nothing um

00:04:05,840 --> 00:04:09,040
nothing to complain about you have to

00:04:07,519 --> 00:04:09,680
put a little bit of care that you don't

00:04:09,040 --> 00:04:12,640
scratch it

00:04:09,680 --> 00:04:14,400
with dust setting on it when when you

00:04:12,640 --> 00:04:16,239
clean it but otherwise it's it's pretty

00:04:14,400 --> 00:04:18,560
much maintenance free

00:04:16,239 --> 00:04:20,720
and this is how the board stack looks

00:04:18,560 --> 00:04:23,199
like once you have

00:04:20,720 --> 00:04:25,199
the three node cluster integrated now

00:04:23,199 --> 00:04:27,600
the cable management is essential to

00:04:25,199 --> 00:04:29,600
these small clusters because

00:04:27,600 --> 00:04:30,880
the number of connections with the

00:04:29,600 --> 00:04:33,680
cables

00:04:30,880 --> 00:04:34,160
grows way faster than than the number of

00:04:33,680 --> 00:04:37,199
boards

00:04:34,160 --> 00:04:39,840
so to keep things neat

00:04:37,199 --> 00:04:40,479
the power distribution board is is

00:04:39,840 --> 00:04:43,600
essential

00:04:40,479 --> 00:04:45,440
so here are the cables they're

00:04:43,600 --> 00:04:47,600
they're properly sized for length as you

00:04:45,440 --> 00:04:49,680
can see here before they're plugged in

00:04:47,600 --> 00:04:51,199
and on the right hand side panel you can

00:04:49,680 --> 00:04:54,800
see the side where

00:04:51,199 --> 00:04:59,680
there is the hdmi plug that brings out

00:04:54,800 --> 00:05:02,240
hdmi from the primary node or node 0

00:04:59,680 --> 00:05:04,240
and then there is a the power connector

00:05:02,240 --> 00:05:06,880
that goes to the

00:05:04,240 --> 00:05:06,880
the wall plug

00:05:09,360 --> 00:05:12,800
and here you can see the the power

00:05:11,520 --> 00:05:15,919
distribution uh

00:05:12,800 --> 00:05:16,400
essentially three usb uh cables that go

00:05:15,919 --> 00:05:18,800
to

00:05:16,400 --> 00:05:19,440
each of the pies and the additional

00:05:18,800 --> 00:05:22,880
cable

00:05:19,440 --> 00:05:26,240
um that you can see in

00:05:22,880 --> 00:05:27,600
in uh red and black and that one is

00:05:26,240 --> 00:05:32,720
connecting to the outside

00:05:27,600 --> 00:05:32,720
port here's from the other side

00:05:33,360 --> 00:05:38,639
and you can see that there is a port to

00:05:35,600 --> 00:05:41,680
um to insert or remove the sd cards

00:05:38,639 --> 00:05:44,000
it's a little bit difficult in in node

00:05:41,680 --> 00:05:45,919
two the bottom one the third one

00:05:44,000 --> 00:05:47,600
unless you have extremely small fingers

00:05:45,919 --> 00:05:51,120
you will have to use pliers

00:05:47,600 --> 00:05:54,000
but but other than that it's quite

00:05:51,120 --> 00:05:54,000
it's quite all right

00:05:54,240 --> 00:05:58,319
here is the side view nothing to note

00:05:56,080 --> 00:06:01,600
here these are the gpio connectors

00:05:58,319 --> 00:06:06,240
so we actually upgrade

00:06:01,600 --> 00:06:06,240
this type of cluster by adding

00:06:06,560 --> 00:06:10,800
an led array which is made by a

00:06:09,440 --> 00:06:15,039
different company called

00:06:10,800 --> 00:06:18,319
pymoroni out of the uk and

00:06:15,039 --> 00:06:22,240
it's basically a line of rgb

00:06:18,319 --> 00:06:24,160
leds that allows you to visualize

00:06:22,240 --> 00:06:25,360
externally the state of an individual

00:06:24,160 --> 00:06:27,600
board and

00:06:25,360 --> 00:06:30,720
obviously it also allows you to make the

00:06:27,600 --> 00:06:32,479
cluster look very very cool

00:06:30,720 --> 00:06:35,440
here is how it looks like when it starts

00:06:32,479 --> 00:06:38,720
up with the

00:06:35,440 --> 00:06:42,240
with the pico clusters original

00:06:38,720 --> 00:06:45,680
system images and

00:06:42,240 --> 00:06:46,720
here we can see the raspberry pi status

00:06:45,680 --> 00:06:49,759
lights as things

00:06:46,720 --> 00:06:52,639
are starting up now i added

00:06:49,759 --> 00:06:54,800
my touch to it which is that i wanted uh

00:06:52,639 --> 00:06:57,919
the network connectivity to be

00:06:54,800 --> 00:06:58,720
self-contained so i found the netgear

00:06:57,919 --> 00:07:01,039
switch that

00:06:58,720 --> 00:07:02,800
was just about the right size for the

00:07:01,039 --> 00:07:05,199
size of the

00:07:02,800 --> 00:07:06,160
for the side of the cluster and attached

00:07:05,199 --> 00:07:08,400
it there

00:07:06,160 --> 00:07:10,560
and then i went on ebay and found a

00:07:08,400 --> 00:07:12,639
right angle connector

00:07:10,560 --> 00:07:13,919
so that we could pull out the power and

00:07:12,639 --> 00:07:17,120
you can see it here

00:07:13,919 --> 00:07:20,400
underneath the cluster without

00:07:17,120 --> 00:07:23,599
without it hitting the the table

00:07:20,400 --> 00:07:26,720
or it can just run under the

00:07:23,599 --> 00:07:28,319
cluster we're using sd cards here um for

00:07:26,720 --> 00:07:28,880
a production cluster maybe you would use

00:07:28,319 --> 00:07:32,720
usb

00:07:28,880 --> 00:07:37,199
sticks but

00:07:32,720 --> 00:07:37,199
5 is usually done over

00:07:38,000 --> 00:07:47,919
over sd cards so that's what we did

00:07:44,800 --> 00:07:48,800
here you can see how the uh the pymoroni

00:07:47,919 --> 00:07:51,759
um

00:07:48,800 --> 00:07:53,919
led array is is attached we need a right

00:07:51,759 --> 00:07:58,080
angle connector to the gpio

00:07:53,919 --> 00:08:00,400
to bring out the the connection itself

00:07:58,080 --> 00:08:00,400
and

00:08:02,000 --> 00:08:05,199
and move the array at the right angle as

00:08:04,479 --> 00:08:06,720
opposed to

00:08:05,199 --> 00:08:08,639
sticking out vertically where it

00:08:06,720 --> 00:08:11,599
wouldn't be very visible

00:08:08,639 --> 00:08:13,440
and so we have three bars of leds to

00:08:11,599 --> 00:08:15,599
visualize the status of

00:08:13,440 --> 00:08:17,520
of each node in the cluster and this is

00:08:15,599 --> 00:08:21,680
kind of how it looks like when you

00:08:17,520 --> 00:08:23,199
are actually using the leds

00:08:21,680 --> 00:08:24,720
this is the right angle connector for

00:08:23,199 --> 00:08:29,599
power to the

00:08:24,720 --> 00:08:33,599
um to the switch that i was mentioning

00:08:29,599 --> 00:08:36,800
and um yeah that's essentially it

00:08:33,599 --> 00:08:41,360
for the pi 3.

00:08:36,800 --> 00:08:41,360
let's take a quick look to the pi 4 for

00:08:52,839 --> 00:08:55,839
differences

00:08:59,040 --> 00:09:02,560
interesting why is it starting at the

00:09:00,800 --> 00:09:04,880
wrong place

00:09:02,560 --> 00:09:04,880
okay

00:09:06,160 --> 00:09:09,839
there we go so that's how it looks like

00:09:08,080 --> 00:09:11,920
when it arrives

00:09:09,839 --> 00:09:13,519
this is the full kit and there is a

00:09:11,920 --> 00:09:17,120
difference with the

00:09:13,519 --> 00:09:19,120
pi 4 cluster design which is um

00:09:17,120 --> 00:09:20,560
same principle of standoffs is applied

00:09:19,120 --> 00:09:22,800
to build a stack and there is a power

00:09:20,560 --> 00:09:23,200
distribution board power distribution

00:09:22,800 --> 00:09:27,920
board

00:09:23,200 --> 00:09:30,800
is using usb

00:09:27,920 --> 00:09:32,320
c as you can see because of the of the

00:09:30,800 --> 00:09:35,519
pi's requirements

00:09:32,320 --> 00:09:37,040
pi4 requirement for it but you can also

00:09:35,519 --> 00:09:39,279
see that the box the case

00:09:37,040 --> 00:09:40,240
of the cluster is significantly larger

00:09:39,279 --> 00:09:43,279
and that's because

00:09:40,240 --> 00:09:45,040
uh the four and design out of pico

00:09:43,279 --> 00:09:48,320
cluster is fully self-contained

00:09:45,040 --> 00:09:50,000
it includes the switch and

00:09:48,320 --> 00:09:52,000
as a result it requires a little bit

00:09:50,000 --> 00:09:53,519
more power it also includes a power

00:09:52,000 --> 00:09:56,560
supply internally

00:09:53,519 --> 00:09:58,399
so that there is just a standard um pc

00:09:56,560 --> 00:10:01,200
power connector going into the box

00:09:58,399 --> 00:10:02,079
and that's that's it there is the

00:10:01,200 --> 00:10:04,800
ethernet

00:10:02,079 --> 00:10:07,920
cable going in but nothing else so the

00:10:04,800 --> 00:10:13,279
box itself is a little bit larger

00:10:07,920 --> 00:10:13,279
but um but everything fits within it

00:10:14,079 --> 00:10:19,839
here is the new uh format of the power

00:10:16,160 --> 00:10:19,839
distribution for usbc

00:10:30,839 --> 00:10:33,839
and

00:10:42,000 --> 00:10:47,839
i think we lost your audio for druka

00:10:51,519 --> 00:10:54,880
can you hear us hopefully you can hear

00:10:53,519 --> 00:10:56,959
me again now yes

00:10:54,880 --> 00:10:58,800
you're back yeah i was dialed in on the

00:10:56,959 --> 00:11:00,959
phone and the phone decided to run out

00:10:58,800 --> 00:11:04,720
of power

00:11:00,959 --> 00:11:05,760
so um hopefully i noticed it about the

00:11:04,720 --> 00:11:08,880
same time so

00:11:05,760 --> 00:11:10,160
this is the power distribution board on

00:11:08,880 --> 00:11:13,360
the right you can see

00:11:10,160 --> 00:11:16,160
the the power supply

00:11:13,360 --> 00:11:17,120
the um the small power sources are not

00:11:16,160 --> 00:11:20,399
enough to generate

00:11:17,120 --> 00:11:22,800
um enough watts uh for uh

00:11:20,399 --> 00:11:25,120
for the setup so there is a there is a

00:11:22,800 --> 00:11:28,800
different design of power supply

00:11:25,120 --> 00:11:32,079
and um the open connector format

00:11:28,800 --> 00:11:34,160
is also useful because we have to

00:11:32,079 --> 00:11:35,360
feed power not just to the power

00:11:34,160 --> 00:11:39,200
distribution board but

00:11:35,360 --> 00:11:39,200
also to um

00:11:41,680 --> 00:11:48,560
to the network

00:11:46,320 --> 00:11:48,560
so

00:11:50,639 --> 00:11:54,320
here we can see the wiring detail there

00:11:52,560 --> 00:11:55,440
is a switch to power on and off the

00:11:54,320 --> 00:11:57,360
whole stack

00:11:55,440 --> 00:11:59,200
the switch is not software aware so if

00:11:57,360 --> 00:12:02,720
you use it

00:11:59,200 --> 00:12:05,279
without thinking you will damage the

00:12:02,720 --> 00:12:06,720
the sd card's contents but it's

00:12:05,279 --> 00:12:08,560
convenient as a way to

00:12:06,720 --> 00:12:11,839
not have to pull power independently

00:12:08,560 --> 00:12:11,839
from each node

00:12:14,800 --> 00:12:18,079
and here is another set of pymar only

00:12:17,519 --> 00:12:20,560
blinked

00:12:18,079 --> 00:12:22,959
the led arrays so we are going to expand

00:12:20,560 --> 00:12:24,560
this cluster just exactly the same way

00:12:22,959 --> 00:12:26,000
on the right here you can see that we

00:12:24,560 --> 00:12:29,279
added uh power

00:12:26,000 --> 00:12:32,320
for the switch so this should be

00:12:29,279 --> 00:12:35,200
uh pretty much the full um

00:12:32,320 --> 00:12:36,160
cable the full wiring and here you can

00:12:35,200 --> 00:12:39,360
see the

00:12:36,160 --> 00:12:39,920
the led arrays put in place there is one

00:12:39,360 --> 00:12:41,760
defect

00:12:39,920 --> 00:12:44,560
in the design of this cluster which is

00:12:41,760 --> 00:12:45,600
that um unfortunately as you can see on

00:12:44,560 --> 00:12:48,959
the left

00:12:45,600 --> 00:12:49,519
the network switch is in the way of the

00:12:48,959 --> 00:12:53,120
side

00:12:49,519 --> 00:12:56,000
where the gpio connectors are so um

00:12:53,120 --> 00:12:57,440
you don't have a full unobstructed view

00:12:56,000 --> 00:13:00,560
of

00:12:57,440 --> 00:13:02,320
of the led arrays which is a shame

00:13:00,560 --> 00:13:03,920
they're so bright that you can kind of

00:13:02,320 --> 00:13:07,360
see them anyway but

00:13:03,920 --> 00:13:09,120
stylistically it's not perfect so

00:13:07,360 --> 00:13:10,560
i haven't checked since i built this i

00:13:09,120 --> 00:13:13,760
think it would be nice if

00:13:10,560 --> 00:13:16,959
picocluster revisited the layout

00:13:13,760 --> 00:13:21,440
maybe put the switch on the other side

00:13:16,959 --> 00:13:24,639
or rearrange things a little bit so that

00:13:21,440 --> 00:13:27,839
um so that this is unobstructed it works

00:13:24,639 --> 00:13:31,040
it works nicely um anyway but uh

00:13:27,839 --> 00:13:34,480
we are perfectionists after all there is

00:13:31,040 --> 00:13:38,000
one more one more change

00:13:34,480 --> 00:13:40,240
that i made um and it is

00:13:38,000 --> 00:13:41,279
replacing this fan this is a standard

00:13:40,240 --> 00:13:44,720
data center fan

00:13:41,279 --> 00:13:45,680
and um it's um louder than you would

00:13:44,720 --> 00:13:48,320
want on your desk

00:13:45,680 --> 00:13:49,440
it's pretty quiet as far as data center

00:13:48,320 --> 00:13:51,440
fans go but

00:13:49,440 --> 00:13:52,639
it's louder than what you want around

00:13:51,440 --> 00:13:54,079
and

00:13:52,639 --> 00:13:56,000
in fact the cluster is running right

00:13:54,079 --> 00:13:57,680
next to me and you cannot hear it

00:13:56,000 --> 00:13:59,440
but with the original fan because it

00:13:57,680 --> 00:14:02,639
resonates inside the box

00:13:59,440 --> 00:14:05,120
it can be somewhat annoying in in quiet

00:14:02,639 --> 00:14:06,560
environments

00:14:05,120 --> 00:14:08,160
and it's certainly annoying when you're

00:14:06,560 --> 00:14:08,959
on the phone because people can pick up

00:14:08,160 --> 00:14:12,160
the hum

00:14:08,959 --> 00:14:15,360
so uh what we did is um replaced

00:14:12,160 --> 00:14:17,600
the fan with one from an

00:14:15,360 --> 00:14:20,240
austrian vendor that makes gaming gear

00:14:17,600 --> 00:14:24,399
i'm forgetting their name right now

00:14:20,240 --> 00:14:25,040
and um the this fan is much better

00:14:24,399 --> 00:14:28,240
bearings

00:14:25,040 --> 00:14:30,000
it's inherently silent and then it has

00:14:28,240 --> 00:14:33,440
an option where you can run it at

00:14:30,000 --> 00:14:37,040
2300 rpms instead of the standard

00:14:33,440 --> 00:14:39,839
3000 rpms and running slower

00:14:37,040 --> 00:14:41,279
obviously reduces the turbulence caused

00:14:39,839 --> 00:14:44,240
by

00:14:41,279 --> 00:14:45,920
the noise caused by turbulence here you

00:14:44,240 --> 00:14:49,120
can see the the network wiring

00:14:45,920 --> 00:14:51,199
which is uh much more compact than

00:14:49,120 --> 00:14:53,920
any other design so it saves space that

00:14:51,199 --> 00:14:54,320
way and in fact this cluster fits in the

00:14:53,920 --> 00:14:57,519
same

00:14:54,320 --> 00:15:00,079
carry box that the other cluster that

00:14:57,519 --> 00:15:01,040
it just uses more of the of the inner

00:15:00,079 --> 00:15:02,720
internal volume

00:15:01,040 --> 00:15:04,560
instead of having additional parts

00:15:02,720 --> 00:15:08,800
outside of it so

00:15:04,560 --> 00:15:08,800
it's uh it's just as portable

00:15:09,680 --> 00:15:13,279
and here we're looking at it from all

00:15:11,279 --> 00:15:14,959
sides but i think we covered pretty much

00:15:13,279 --> 00:15:18,959
everything that's going on

00:15:14,959 --> 00:15:20,240
uh top view here you can see the power

00:15:18,959 --> 00:15:22,399
switch on the left and

00:15:20,240 --> 00:15:23,760
there is an hdmi connector this also

00:15:22,399 --> 00:15:26,800
goes to node zero

00:15:23,760 --> 00:15:28,160
you could bring out pretty much any hdmi

00:15:26,800 --> 00:15:30,959
port that you want but

00:15:28,160 --> 00:15:32,320
typically you bring out the primer and

00:15:30,959 --> 00:15:35,839
here is um

00:15:32,320 --> 00:15:40,560
how the the blink and lights

00:15:35,839 --> 00:15:43,839
look like once you turn things on

00:15:40,560 --> 00:15:44,320
status lights for the pi and here you

00:15:43,839 --> 00:15:48,800
can see

00:15:44,320 --> 00:15:50,720
it fits in the same box design

00:15:48,800 --> 00:15:52,639
and here two clusters side by side

00:15:50,720 --> 00:15:56,160
exactly same size

00:15:52,639 --> 00:15:59,279
okay so um

00:15:56,160 --> 00:16:01,600
that's for the hardware setup i

00:15:59,279 --> 00:16:03,040
assume that everybody here is familiar

00:16:01,600 --> 00:16:04,720
with um

00:16:03,040 --> 00:16:07,199
with the raspberry pi hardware so i'm

00:16:04,720 --> 00:16:10,320
going to skip over that

00:16:07,199 --> 00:16:13,519
and we're going to jump into how

00:16:10,320 --> 00:16:16,480
to um configure the cluster

00:16:13,519 --> 00:16:18,560
and let me do a quick time check here

00:16:16,480 --> 00:16:23,040
all right

00:16:18,560 --> 00:16:25,680
so uh the first thing that we want to do

00:16:23,040 --> 00:16:27,680
um to have a viable setup for uh good

00:16:25,680 --> 00:16:30,959
clustering is that we want to have

00:16:27,680 --> 00:16:33,440
a proper user uh setup so we want to

00:16:30,959 --> 00:16:33,440
have a

00:16:33,759 --> 00:16:38,800
person um so you um as the

00:16:37,120 --> 00:16:41,360
default user and then you want to have a

00:16:38,800 --> 00:16:44,000
backup login user

00:16:41,360 --> 00:16:45,199
typically root in case uh you locked you

00:16:44,000 --> 00:16:48,839
get locked out

00:16:45,199 --> 00:16:50,480
which when you have many nodes it's not

00:16:48,839 --> 00:16:52,480
um

00:16:50,480 --> 00:16:53,600
not necessarily that strange there are

00:16:52,480 --> 00:16:56,079
many opportunities to

00:16:53,600 --> 00:16:56,079
screw up

00:16:57,440 --> 00:17:01,440
the other in other setups sometimes

00:17:00,399 --> 00:17:05,679
people have a third

00:17:01,440 --> 00:17:07,839
operator user you can do that

00:17:05,679 --> 00:17:10,000
this is just your personal cluster the

00:17:07,839 --> 00:17:13,839
operator is the root user anyway

00:17:10,000 --> 00:17:16,079
so it's overkill because we are starting

00:17:13,839 --> 00:17:19,360
in this setup with the

00:17:16,079 --> 00:17:22,319
pico cluster images um

00:17:19,360 --> 00:17:23,919
we are renaming the existing users uh to

00:17:22,319 --> 00:17:26,240
convert them to

00:17:23,919 --> 00:17:27,600
in this case me um we are want we want

00:17:26,240 --> 00:17:30,640
to be neat so we want

00:17:27,600 --> 00:17:32,160
things to be set up correctly so the

00:17:30,640 --> 00:17:35,039
user here is me

00:17:32,160 --> 00:17:36,080
in other cases it would be you root

00:17:35,039 --> 00:17:38,960
doesn't need

00:17:36,080 --> 00:17:38,960
any change

00:17:39,520 --> 00:17:41,760
for

00:17:45,520 --> 00:17:50,960
uh you have to update the password um

00:17:48,559 --> 00:17:51,760
to whatever you want it to be um and

00:17:50,960 --> 00:17:54,720
then

00:17:51,760 --> 00:17:57,039
uh you have to uh remove the you have to

00:17:54,720 --> 00:17:59,840
purge the x authority file

00:17:57,039 --> 00:18:00,559
because um this change of users has

00:17:59,840 --> 00:18:02,799
rendered it

00:18:00,559 --> 00:18:03,919
invalid so you won't have you won't have

00:18:02,799 --> 00:18:07,280
x

00:18:03,919 --> 00:18:07,280
working unless you do that

00:18:09,919 --> 00:18:13,679
in these slides when you see the pound

00:18:12,240 --> 00:18:16,160
sign

00:18:13,679 --> 00:18:17,039
it means that it's the prompt of a root

00:18:16,160 --> 00:18:19,919
user

00:18:17,039 --> 00:18:21,679
um when you see a pound sign in the at

00:18:19,919 --> 00:18:22,160
the beginning of the line and a dollar

00:18:21,679 --> 00:18:24,960
sign

00:18:22,160 --> 00:18:25,919
implies a an unprivileged user so that

00:18:24,960 --> 00:18:28,240
way you can

00:18:25,919 --> 00:18:32,240
you can see at a glance whether the the

00:18:28,240 --> 00:18:32,240
command requires root permission or not

00:18:32,400 --> 00:18:39,360
now let's see um if we can um

00:18:36,080 --> 00:18:41,679
connect to our cluster i um brought up

00:18:39,360 --> 00:18:45,120
the cluster very quickly

00:18:41,679 --> 00:18:47,120
while i was setting up but then i didn't

00:18:45,120 --> 00:18:50,320
verify it

00:18:47,120 --> 00:18:56,000
so hopefully we are in

00:18:50,320 --> 00:18:58,160
yes so um

00:18:56,000 --> 00:19:00,960
uh is this font large enough can you

00:18:58,160 --> 00:19:04,080
kinda read what's going on

00:19:00,960 --> 00:19:07,280
i think so thank you okay

00:19:04,080 --> 00:19:07,280
and um

00:19:07,520 --> 00:19:11,440
i suppose i could try to kill

00:19:09,280 --> 00:19:13,600
transparency if i remembered how to do

00:19:11,440 --> 00:19:13,600
it

00:19:15,280 --> 00:19:18,080
well we'll leave it that way it looks

00:19:16,720 --> 00:19:19,120
like you need to start in the terminal

00:19:18,080 --> 00:19:22,240
to do that

00:19:19,120 --> 00:19:27,120
so we are on on the first node and

00:19:22,240 --> 00:19:27,120
um we can kinda see um

00:19:31,600 --> 00:19:39,840
let me move the overlay from zoom it's

00:19:33,760 --> 00:19:39,840
getting in the way

00:19:44,080 --> 00:19:47,440
okay that will work better

00:19:48,799 --> 00:19:57,440
all right so um

00:19:52,640 --> 00:19:57,440
so uh we're talking about user setup so

00:20:00,559 --> 00:20:04,240
so basic system administration here i

00:20:02,720 --> 00:20:07,679
guess um

00:20:04,240 --> 00:20:10,320
you can see that there is a root user

00:20:07,679 --> 00:20:12,000
the federico user we were discussing

00:20:10,320 --> 00:20:14,080
nothing too strange the rest is pretty

00:20:12,000 --> 00:20:16,000
much default stuff

00:20:14,080 --> 00:20:17,200
obviously we need ssh to be configured

00:20:16,000 --> 00:20:19,120
correctly but that's

00:20:17,200 --> 00:20:21,200
part of the standard images we didn't

00:20:19,120 --> 00:20:23,919
need to do anything

00:20:21,200 --> 00:20:23,919
special there

00:20:24,880 --> 00:20:28,320
and you can see who's logged in in the

00:20:26,720 --> 00:20:30,960
cluster

00:20:28,320 --> 00:20:33,200
there is another way to see this this

00:20:30,960 --> 00:20:33,200
way

00:20:33,280 --> 00:20:38,559
um oh um i guess

00:20:39,360 --> 00:20:43,760
that is a little bit more complicated so

00:20:42,000 --> 00:20:45,919
um

00:20:43,760 --> 00:20:47,520
yeah that's basic system administration

00:20:45,919 --> 00:20:52,159
we're not gonna go into that

00:20:47,520 --> 00:20:54,480
further but what we want to go into

00:20:52,159 --> 00:20:54,480
is

00:20:58,720 --> 00:21:02,480
because of the simple structure of the

00:21:00,400 --> 00:21:06,080
cluster there is no an

00:21:02,480 --> 00:21:08,880
nis no ldap and the like um

00:21:06,080 --> 00:21:09,840
nfs access is remarkably straightforward

00:21:08,880 --> 00:21:12,480
but to do this

00:21:09,840 --> 00:21:14,480
we are setting up each user to be the

00:21:12,480 --> 00:21:16,799
same on each node so

00:21:14,480 --> 00:21:17,600
root obviously has a fixed user id no

00:21:16,799 --> 00:21:20,480
problem there but

00:21:17,600 --> 00:21:23,919
also your personal user should have the

00:21:20,480 --> 00:21:23,919
same uid on all nodes

00:21:24,320 --> 00:21:29,919
once you have this consistently there

00:21:26,799 --> 00:21:31,679
shouldn't be any surprise with nfs even

00:21:29,919 --> 00:21:33,039
even though you're not

00:21:31,679 --> 00:21:34,799
doing anything in terms of user

00:21:33,039 --> 00:21:36,400
management

00:21:34,799 --> 00:21:38,480
this is particularly important if

00:21:36,400 --> 00:21:39,840
multiple users have access to the same

00:21:38,480 --> 00:21:44,320
cluster because

00:21:39,840 --> 00:21:46,799
if they have if they share the uid

00:21:44,320 --> 00:21:49,120
across nodes that could be confusing to

00:21:46,799 --> 00:21:51,280
the system

00:21:49,120 --> 00:21:53,919
if it's just your cluster maybe it's not

00:21:51,280 --> 00:21:53,919
as important

00:21:54,159 --> 00:21:58,000
and i think i mentioned on some clusters

00:21:56,640 --> 00:22:01,520
i had the second and privileged

00:21:58,000 --> 00:22:05,280
user pi as the administrator um

00:22:01,520 --> 00:22:08,880
to do or or you can call it ops

00:22:05,280 --> 00:22:11,280
to separate operations and production um

00:22:08,880 --> 00:22:12,799
but not on this one i didn't seem

00:22:11,280 --> 00:22:16,240
necessary

00:22:12,799 --> 00:22:18,559
so um one

00:22:16,240 --> 00:22:20,080
more thing that you can see in terms of

00:22:18,559 --> 00:22:23,120
system administrator tricks

00:22:20,080 --> 00:22:26,159
is that you can look at when

00:22:23,120 --> 00:22:28,000
um user is logged in so

00:22:26,159 --> 00:22:29,600
as this was being set up there was a

00:22:28,000 --> 00:22:31,600
user pi

00:22:29,600 --> 00:22:33,200
and uh and you can see that it was it

00:22:31,600 --> 00:22:36,000
was logging in there

00:22:33,200 --> 00:22:38,559
and uh it was involved in some crashes

00:22:36,000 --> 00:22:42,400
interesting i don't remember

00:22:38,559 --> 00:22:46,000
how but uh i guess it's been a while

00:22:42,400 --> 00:22:50,799
and um okay

00:22:46,000 --> 00:22:52,320
let's uh go back to next subject

00:22:50,799 --> 00:22:54,960
so the next thing that we're going to

00:22:52,320 --> 00:22:55,600
set up is that the images by default

00:22:54,960 --> 00:22:58,559
come

00:22:55,600 --> 00:22:59,280
running uh the interactive mode but

00:22:58,559 --> 00:23:01,200
we're going to

00:22:59,280 --> 00:23:03,600
run numerical code we don't need to

00:23:01,200 --> 00:23:06,159
waste cpu cycles running x

00:23:03,600 --> 00:23:07,280
on all nodes we're going to leave node 0

00:23:06,159 --> 00:23:11,360
the primary

00:23:07,280 --> 00:23:12,480
as as running x because it may be

00:23:11,360 --> 00:23:15,760
convenient

00:23:12,480 --> 00:23:18,000
but all other nodes we're going to

00:23:15,760 --> 00:23:19,919
use this incantation the system the

00:23:18,000 --> 00:23:22,880
incantation to switch to

00:23:19,919 --> 00:23:24,570
init level 3 we're just doing it in

00:23:22,880 --> 00:23:25,919
systemd speak

00:23:24,570 --> 00:23:29,200
[Music]

00:23:25,919 --> 00:23:32,320
we are leaving the

00:23:29,200 --> 00:23:33,679
graphical packages installed just in

00:23:32,320 --> 00:23:35,039
case we need them

00:23:33,679 --> 00:23:37,200
you never know maybe you're going to

00:23:35,039 --> 00:23:40,080
distribute a workload across the nodes

00:23:37,200 --> 00:23:41,600
that has a visualization component even

00:23:40,080 --> 00:23:43,760
even though you cannot look at all of

00:23:41,600 --> 00:23:46,240
them at once

00:23:43,760 --> 00:23:46,960
you could also set up x forwarding from

00:23:46,240 --> 00:23:48,960
the

00:23:46,960 --> 00:23:51,520
headless nodes into the primary if that

00:23:48,960 --> 00:23:52,960
was if that was a concern but

00:23:51,520 --> 00:23:54,799
that's a topic for another day i don't

00:23:52,960 --> 00:23:57,200
think it's um

00:23:54,799 --> 00:23:59,600
exceedingly likely it's not worth

00:23:57,200 --> 00:24:02,080
spending time on here

00:23:59,600 --> 00:24:03,520
so looking at the network static

00:24:02,080 --> 00:24:06,400
ethernet addressing grant renders the

00:24:03,520 --> 00:24:07,840
cluster fully mobile

00:24:06,400 --> 00:24:10,159
as remote connections are made

00:24:07,840 --> 00:24:11,679
independent of local addressing

00:24:10,159 --> 00:24:13,679
this is critical to cluster

00:24:11,679 --> 00:24:18,320
infrastructure

00:24:13,679 --> 00:24:20,559
with fixed addressing making

00:24:18,320 --> 00:24:22,880
scripting scripting automation and

00:24:20,559 --> 00:24:26,080
application coding very simple

00:24:22,880 --> 00:24:29,360
the pico cluster comes with unconfigured

00:24:26,080 --> 00:24:29,360
wi-fi dhcp

00:24:30,400 --> 00:24:37,200
to prevent interference with the static

00:24:33,360 --> 00:24:40,799
addressing used locally in the cluster

00:24:37,200 --> 00:24:43,360
this is a waste of a perfectly useful

00:24:40,799 --> 00:24:44,640
network interface we have wi-fi then why

00:24:43,360 --> 00:24:48,400
not use it

00:24:44,640 --> 00:24:52,080
so we did one better and re-enabled

00:24:48,400 --> 00:24:54,559
dhcp on wi-fi

00:24:52,080 --> 00:24:56,799
for installing upgrades and bringing in

00:24:54,559 --> 00:24:59,200
software

00:24:56,799 --> 00:25:01,120
and so you have two networks the wired

00:24:59,200 --> 00:25:04,720
one which is used for computing

00:25:01,120 --> 00:25:07,200
and has known addressing and known

00:25:04,720 --> 00:25:07,919
host names that are fixed and remain the

00:25:07,200 --> 00:25:11,919
same

00:25:07,919 --> 00:25:13,520
no matter no matter

00:25:11,919 --> 00:25:14,960
whether you move the cluster you have to

00:25:13,520 --> 00:25:15,520
remember that clusters usually are

00:25:14,960 --> 00:25:17,919
fairly

00:25:15,520 --> 00:25:19,360
unmovable objects they are not like

00:25:17,919 --> 00:25:22,400
laptops

00:25:19,360 --> 00:25:22,799
so they are hard coded in all manner of

00:25:22,400 --> 00:25:24,320
ways

00:25:22,799 --> 00:25:26,400
these small clusters are interesting

00:25:24,320 --> 00:25:28,080
because you can take them to an event

00:25:26,400 --> 00:25:29,919
you can take them to a lab

00:25:28,080 --> 00:25:31,279
they can change network and they

00:25:29,919 --> 00:25:33,279
continue to work

00:25:31,279 --> 00:25:35,520
and the reason why this is possible is

00:25:33,279 --> 00:25:39,279
that we have the fixed ip network

00:25:35,520 --> 00:25:41,919
and a separate um

00:25:39,279 --> 00:25:43,520
dynamic network and we're using the the

00:25:41,919 --> 00:25:46,720
wireless interfaces

00:25:43,520 --> 00:25:47,200
because it's convenient and uh this way

00:25:46,720 --> 00:25:48,640
we don't

00:25:47,200 --> 00:25:51,440
need to plug in anything we don't need

00:25:48,640 --> 00:25:54,480
to do overlays or

00:25:51,440 --> 00:25:56,159
sharing interfaces with multiple ips

00:25:54,480 --> 00:25:58,400
it's really really trivial

00:25:56,159 --> 00:26:01,279
the only trick that you have to be aware

00:25:58,400 --> 00:26:04,159
of here is that

00:26:01,279 --> 00:26:04,720
because we don't know what routing will

00:26:04,159 --> 00:26:07,679
look like

00:26:04,720 --> 00:26:09,360
at your mobile location the http tells

00:26:07,679 --> 00:26:10,320
us but we don't want to code against the

00:26:09,360 --> 00:26:13,679
hcp we just

00:26:10,320 --> 00:26:16,720
want it to go automatically in place

00:26:13,679 --> 00:26:17,200
what we do is that we bring up the wlan

00:26:16,720 --> 00:26:20,480
00:26:17,200 --> 00:26:23,679
first and by doing that

00:26:20,480 --> 00:26:26,960
in that order when we connect to

00:26:23,679 --> 00:26:28,159
wi-fi first the default route goes

00:26:26,960 --> 00:26:30,960
through wi-fi

00:26:28,159 --> 00:26:32,400
and then we bring up the static

00:26:30,960 --> 00:26:34,880
interfaces second

00:26:32,400 --> 00:26:36,320
and then they get local routing for

00:26:34,880 --> 00:26:38,799
those subnets

00:26:36,320 --> 00:26:39,440
but the default route is still going to

00:26:38,799 --> 00:26:42,480
our

00:26:39,440 --> 00:26:44,960
unknown um ip address in

00:26:42,480 --> 00:26:46,159
uh in the wi-fi it's not really unknown

00:26:44,960 --> 00:26:48,320
obviously the hcp

00:26:46,159 --> 00:26:49,279
knows it but we don't need to script for

00:26:48,320 --> 00:26:50,400
it or we don't need to change

00:26:49,279 --> 00:26:54,320
configuration files

00:26:50,400 --> 00:26:57,360
manually just lands in place on its own

00:26:54,320 --> 00:26:57,679
um and the relevant commands here would

00:26:57,360 --> 00:27:01,120
be

00:26:57,679 --> 00:27:02,960
um if config or the family of commands

00:27:01,120 --> 00:27:05,200
connected to that and route

00:27:02,960 --> 00:27:07,840
we're not gonna go there just to save a

00:27:05,200 --> 00:27:07,840
little bit of time

00:27:10,640 --> 00:27:14,640
this is how you configure the passwords

00:27:13,120 --> 00:27:16,720
um

00:27:14,640 --> 00:27:18,799
setting up the right passwords in the

00:27:16,720 --> 00:27:20,480
wpa supplicant configuration takes care

00:27:18,799 --> 00:27:22,720
of remote connectivity

00:27:20,480 --> 00:27:25,679
and right at startup so you don't need

00:27:22,720 --> 00:27:28,000
to do anything once this is configured

00:27:25,679 --> 00:27:29,200
now you can apt install new software as

00:27:28,000 --> 00:27:31,200
needed

00:27:29,200 --> 00:27:32,320
and you're also ready to visit red hat

00:27:31,200 --> 00:27:34,399
too i think

00:27:32,320 --> 00:27:35,440
looking at this configuration file

00:27:34,399 --> 00:27:38,480
actually that's

00:27:35,440 --> 00:27:41,520
our old wi-fi password so don't get

00:27:38,480 --> 00:27:41,520
too many clever ideas

00:27:41,919 --> 00:27:44,640
so um

00:27:45,970 --> 00:27:51,039
[Applause]

00:27:47,200 --> 00:27:52,960
access control we um use ssh

00:27:51,039 --> 00:27:54,399
keys to enable rapid secure access

00:27:52,960 --> 00:27:57,120
between nodes

00:27:54,399 --> 00:27:58,080
uh so that um we don't need to type in

00:27:57,120 --> 00:28:00,080
passwords and that's

00:27:58,080 --> 00:28:01,360
important for when you're distributing

00:28:00,080 --> 00:28:04,640
processing workloads

00:28:01,360 --> 00:28:07,520
the uh the threads of your

00:28:04,640 --> 00:28:08,399
um parallel program don't know how to do

00:28:07,520 --> 00:28:11,360
that

00:28:08,399 --> 00:28:12,960
so you give yourself pseudo uh

00:28:11,360 --> 00:28:16,640
permissions

00:28:12,960 --> 00:28:20,159
and you um distribute these keys

00:28:16,640 --> 00:28:23,279
so first the keys um

00:28:20,159 --> 00:28:27,200
and up top is how you generate them

00:28:23,279 --> 00:28:29,840
and then um you can copy them manually

00:28:27,200 --> 00:28:31,679
across the cluster to each node now the

00:28:29,840 --> 00:28:33,919
cluster itself comes with the convenient

00:28:31,679 --> 00:28:34,399
script called genkey sh which is part of

00:28:33,919 --> 00:28:36,960
the

00:28:34,399 --> 00:28:40,240
suite of commands that that picocluster

00:28:36,960 --> 00:28:40,240
provides with their images

00:28:40,880 --> 00:28:46,480
and it distributes the keys for you

00:28:43,919 --> 00:28:50,000
another trick that's useful uh you could

00:28:46,480 --> 00:28:51,600
consider the pro tip ssh import id lets

00:28:50,000 --> 00:28:54,159
you give access to github

00:28:51,600 --> 00:28:55,919
and launchpad users by username so

00:28:54,159 --> 00:28:58,080
instead of exchanging lots of emails

00:28:55,919 --> 00:28:59,679
saying give me the key

00:28:58,080 --> 00:29:01,279
that you want access to so i give you

00:28:59,679 --> 00:29:01,760
access to my cluster and go back and

00:29:01,279 --> 00:29:04,640
forth

00:29:01,760 --> 00:29:05,760
a few times you just ask them what their

00:29:04,640 --> 00:29:09,279
github user id

00:29:05,760 --> 00:29:10,000
is and you just import it by username

00:29:09,279 --> 00:29:11,600
from

00:29:10,000 --> 00:29:14,240
you just import the public key from

00:29:11,600 --> 00:29:15,840
github and you're done

00:29:14,240 --> 00:29:17,440
it's a very convenient way to give

00:29:15,840 --> 00:29:20,960
people other people access

00:29:17,440 --> 00:29:22,720
without wasting time so the commands

00:29:20,960 --> 00:29:26,080
that picocluster added

00:29:22,720 --> 00:29:29,200
to the to the raspbian

00:29:26,080 --> 00:29:31,440
images are these um

00:29:29,200 --> 00:29:33,200
and uh they're scripts providing some

00:29:31,440 --> 00:29:36,720
basic cluster management

00:29:33,200 --> 00:29:39,919
as part of the images um the first one

00:29:36,720 --> 00:29:40,399
um is rebooting all nodes the second one

00:29:39,919 --> 00:29:43,600
is

00:29:40,399 --> 00:29:46,320
stopping all nodes safely so that the

00:29:43,600 --> 00:29:46,720
the sd cards don't get corrupted and

00:29:46,320 --> 00:29:50,320
test

00:29:46,720 --> 00:29:53,360
all nodes checks for connectivity

00:29:50,320 --> 00:29:55,200
resize rpi is used to resize the images

00:29:53,360 --> 00:29:57,600
to the size of your sd card

00:29:55,200 --> 00:29:59,120
the first time you run you run the

00:29:57,600 --> 00:30:01,919
system

00:29:59,120 --> 00:30:02,559
um i like to clean up by removing the sh

00:30:01,919 --> 00:30:04,960
suffix

00:30:02,559 --> 00:30:06,960
and obviously i need to fix user names

00:30:04,960 --> 00:30:10,399
because i like the username to be me

00:30:06,960 --> 00:30:12,559
not a pike cluster and then we put them

00:30:10,399 --> 00:30:16,399
in the bin directory

00:30:12,559 --> 00:30:19,039
in the user's home this is a

00:30:16,399 --> 00:30:20,480
this is raspbian and every debian

00:30:19,039 --> 00:30:22,559
derivative

00:30:20,480 --> 00:30:24,399
tends to assume uh tends to check if

00:30:22,559 --> 00:30:26,960
there is a bin folder in your

00:30:24,399 --> 00:30:28,240
um directory yet login so you don't need

00:30:26,960 --> 00:30:30,000
to add it to the path

00:30:28,240 --> 00:30:31,840
you just need to create the uh the

00:30:30,000 --> 00:30:32,880
folder and with the right permissions

00:30:31,840 --> 00:30:34,880
and um

00:30:32,880 --> 00:30:36,399
at the next boot it will be part of the

00:30:34,880 --> 00:30:38,960
path

00:30:36,399 --> 00:30:41,600
on its own federico you have five

00:30:38,960 --> 00:30:41,600
minutes left

00:30:43,440 --> 00:30:47,760
so ansible is another option to automate

00:30:48,840 --> 00:30:53,840
operations

00:30:50,000 --> 00:30:56,799
so um for um

00:30:53,840 --> 00:30:59,200
for one-time tasks uh paralysis h is

00:30:56,799 --> 00:31:03,360
really the way to go

00:30:59,200 --> 00:31:05,279
um here are a few examples

00:31:03,360 --> 00:31:08,000
it's called parallel ssh on debian

00:31:05,279 --> 00:31:08,480
derivatives pssh and fedora derivatives

00:31:08,000 --> 00:31:10,559
i

00:31:08,480 --> 00:31:13,039
don't know the history behind that

00:31:10,559 --> 00:31:13,039
difference

00:31:14,720 --> 00:31:18,399
the thing here is that in general this

00:31:17,440 --> 00:31:21,279
command

00:31:18,399 --> 00:31:21,760
harvests the uh result of running the

00:31:21,279 --> 00:31:25,200
code

00:31:21,760 --> 00:31:27,679
so um

00:31:25,200 --> 00:31:29,840
whether um the command succeeded or not

00:31:27,679 --> 00:31:31,200
is what gets returned to you in okay and

00:31:29,840 --> 00:31:34,159
fail

00:31:31,200 --> 00:31:34,159
you can have the

00:31:34,960 --> 00:31:41,279
inline option to show you

00:31:38,240 --> 00:31:42,799
the the output if that's what you want

00:31:41,279 --> 00:31:44,559
to see

00:31:42,799 --> 00:31:46,480
and then you can see the output of each

00:31:44,559 --> 00:31:49,120
node collected

00:31:46,480 --> 00:31:51,039
now the the first command and here is an

00:31:49,120 --> 00:31:53,440
example of looking at the host names on

00:31:51,039 --> 00:31:55,519
each node of the cluster

00:31:53,440 --> 00:31:57,600
that will just succeed say okay okay

00:31:55,519 --> 00:32:00,159
okay the second version will actually

00:31:57,600 --> 00:32:03,039
show you the contents of the file

00:32:00,159 --> 00:32:05,679
now the third one is a one ping only

00:32:03,039 --> 00:32:09,120
test of connectivity

00:32:05,679 --> 00:32:11,120
nodes is the is the files that contains

00:32:09,120 --> 00:32:13,039
the host names of all nodes in the

00:32:11,120 --> 00:32:16,399
cluster and c1

00:32:13,039 --> 00:32:19,500
basically one count one ping

00:32:16,399 --> 00:32:20,640
um to back to the

00:32:19,500 --> 00:32:22,480
[Music]

00:32:20,640 --> 00:32:24,320
back to the primary node so it's a

00:32:22,480 --> 00:32:25,519
connectivity check back to the primary

00:32:24,320 --> 00:32:27,919
node

00:32:25,519 --> 00:32:30,000
the fourth one is doing the same but

00:32:27,919 --> 00:32:32,000
it's using a dns

00:32:30,000 --> 00:32:34,480
so it's checking that the cluster has

00:32:32,000 --> 00:32:36,640
healthy dns resolution

00:32:34,480 --> 00:32:38,799
and uh the last one is a cute example

00:32:36,640 --> 00:32:39,679
that checks the temperature of the nodes

00:32:38,799 --> 00:32:41,200
and

00:32:39,679 --> 00:32:43,120
i came up with this while i was

00:32:41,200 --> 00:32:45,760
replacing the fan i wanted to see

00:32:43,120 --> 00:32:48,399
if the cluster was overheating as a

00:32:45,760 --> 00:32:52,399
result of the change

00:32:48,399 --> 00:32:52,399
one more setup a bit is that

00:32:54,080 --> 00:32:57,840
we want to have reliable timestamps

00:32:58,080 --> 00:33:02,320
when you don't have time um on you don't

00:33:01,120 --> 00:33:05,360
have a clock

00:33:02,320 --> 00:33:07,279
like the raspberry pi does in terms of

00:33:05,360 --> 00:33:09,120
keeping time when it's switched off and

00:33:07,279 --> 00:33:11,360
disconnected

00:33:09,120 --> 00:33:12,159
interesting bugs happen primarily

00:33:11,360 --> 00:33:15,360
because

00:33:12,159 --> 00:33:17,840
tls uh fails you cannot have

00:33:15,360 --> 00:33:19,519
secure connectivity without without um

00:33:17,840 --> 00:33:23,039
properly marshalled time source

00:33:19,519 --> 00:33:25,120
so uh we need to set the time source and

00:33:23,039 --> 00:33:26,240
here is essentially how you do it if you

00:33:25,120 --> 00:33:28,610
fail to do this you

00:33:26,240 --> 00:33:29,679
run into pretty horrible

00:33:28,610 --> 00:33:31,200
[Music]

00:33:29,679 --> 00:33:33,200
bugs when you're setting up things the

00:33:31,200 --> 00:33:34,960
canonical example here is

00:33:33,200 --> 00:33:36,640
try setting up a kubernetes cluster or

00:33:34,960 --> 00:33:38,320
anything that has proper authentication

00:33:36,640 --> 00:33:41,279
between nodes

00:33:38,320 --> 00:33:43,360
historically they don't surface the

00:33:41,279 --> 00:33:44,320
errors that are coming from the tls

00:33:43,360 --> 00:33:46,000
library

00:33:44,320 --> 00:33:49,039
you just see things failing in very

00:33:46,000 --> 00:33:52,159
mysterious ways and

00:33:49,039 --> 00:33:54,240
it's not fun to resolve

00:33:52,159 --> 00:33:56,559
so we avoid that we get it right from

00:33:54,240 --> 00:33:58,799
the beginning

00:33:56,559 --> 00:33:59,760
finally we need a shared folder so that

00:33:58,799 --> 00:34:02,640
the code and

00:33:59,760 --> 00:34:04,480
of your of your program can be run from

00:34:02,640 --> 00:34:07,200
all nodes in

00:34:04,480 --> 00:34:08,399
equally and so you compile on the

00:34:07,200 --> 00:34:10,720
primary node

00:34:08,399 --> 00:34:11,599
you put your code in the shared folder

00:34:10,720 --> 00:34:14,159
and then

00:34:11,599 --> 00:34:14,879
every node in the cluster can access and

00:34:14,159 --> 00:34:17,599
um

00:34:14,879 --> 00:34:19,359
and execute the same code and here is

00:34:17,599 --> 00:34:21,679
how you set up

00:34:19,359 --> 00:34:24,560
an nfs share it's fairly

00:34:21,679 --> 00:34:27,119
self-explicative so we're just gonna

00:34:24,560 --> 00:34:28,399
jump on to how you mount it and here

00:34:27,119 --> 00:34:29,200
there is a little bit of a word of

00:34:28,399 --> 00:34:31,599
caution

00:34:29,200 --> 00:34:32,560
to mount it you have to edit fstab which

00:34:31,599 --> 00:34:38,240
is probably

00:34:32,560 --> 00:34:38,240
um the riskiest step here in terms of um

00:34:39,679 --> 00:34:43,119
while making your system unbootable

00:34:42,000 --> 00:34:46,159
because if you

00:34:43,119 --> 00:34:48,480
fat finger something into fstab the root

00:34:46,159 --> 00:34:50,399
file system will not be mounted and

00:34:48,480 --> 00:34:52,000
the system will not come up and

00:34:50,399 --> 00:34:54,079
obviously it will happen

00:34:52,000 --> 00:34:55,440
right before you're giving a demo as it

00:34:54,079 --> 00:34:58,480
happened to me um

00:34:55,440 --> 00:34:59,440
once in february so it can make your

00:34:58,480 --> 00:35:01,119
last half an hour

00:34:59,440 --> 00:35:02,480
pretty interesting while you try to fix

00:35:01,119 --> 00:35:05,920
this in a heart

00:35:02,480 --> 00:35:07,280
hey frederico we are at time

00:35:05,920 --> 00:35:09,200
i'll give you another minute or two to

00:35:07,280 --> 00:35:11,680
wrap up

00:35:09,200 --> 00:35:12,560
so uh unfortunately we don't have enough

00:35:11,680 --> 00:35:16,079
time to look

00:35:12,560 --> 00:35:17,440
at um at the computer part of this

00:35:16,079 --> 00:35:21,599
this is the last part of the hardware

00:35:17,440 --> 00:35:21,599
this is how you call the software bit

00:35:21,920 --> 00:35:30,240
of the of the led bars so

00:35:27,040 --> 00:35:32,880
this shows you the a command that's

00:35:30,240 --> 00:35:36,400
called larson and it's showing the

00:35:32,880 --> 00:35:38,720
um it's showing a

00:35:36,400 --> 00:35:40,079
larson scanner this is uh in reference

00:35:38,720 --> 00:35:43,760
to glenn larson

00:35:40,079 --> 00:35:44,880
he was the um glenn a larson he was the

00:35:43,760 --> 00:35:47,440
producer of

00:35:44,880 --> 00:35:48,400
uh a team and a few other shows in the

00:35:47,440 --> 00:35:50,320
80s

00:35:48,400 --> 00:35:51,920
notably battlestar galactica and

00:35:50,320 --> 00:35:54,640
supercar these

00:35:51,920 --> 00:35:55,520
had a scanning led light so um that's

00:35:54,640 --> 00:35:59,119
what the

00:35:55,520 --> 00:36:00,160
the test script for uh for the led array

00:35:59,119 --> 00:36:02,160
does

00:36:00,160 --> 00:36:04,000
the clear all script is something that i

00:36:02,160 --> 00:36:05,839
added um because

00:36:04,000 --> 00:36:07,280
sometimes you get an inconsistent state

00:36:05,839 --> 00:36:08,880
left in the leds and

00:36:07,280 --> 00:36:11,200
it's very annoying it's blinking in your

00:36:08,880 --> 00:36:12,079
face so that's uh to wipe the state of

00:36:11,200 --> 00:36:15,040
the

00:36:12,079 --> 00:36:17,119
bars and just reset it to zero and then

00:36:15,040 --> 00:36:18,800
there is the actual use for these things

00:36:17,119 --> 00:36:20,400
once you have tested them which is for

00:36:18,800 --> 00:36:23,520
example showing how loaded

00:36:20,400 --> 00:36:25,440
the cpu of the different nodes is and

00:36:23,520 --> 00:36:27,119
and you can test it uh for example with

00:36:25,440 --> 00:36:30,160
the stress

00:36:27,119 --> 00:36:32,240
test code now um

00:36:30,160 --> 00:36:33,359
it would be the next part of the talk

00:36:32,240 --> 00:36:35,440
which is the

00:36:33,359 --> 00:36:37,040
how super computers work but we're

00:36:35,440 --> 00:36:40,960
running out of time so

00:36:37,040 --> 00:36:42,880
um i'm going to refer you to um

00:36:40,960 --> 00:36:44,480
the recording of this and that we've

00:36:42,880 --> 00:36:48,480
made at

00:36:44,480 --> 00:36:52,839
devconfus last month it's up on youtube

00:36:48,480 --> 00:36:54,720
and and you can find all of it basically

00:36:52,839 --> 00:36:57,160
there

00:36:54,720 --> 00:36:59,200
thank you so much federico we really

00:36:57,160 --> 00:37:00,960
appreciate you and red hat for

00:36:59,200 --> 00:37:02,400
participating today

00:37:00,960 --> 00:37:04,800
all right everyone we have about 15

00:37:02,400 --> 00:37:06,640
minutes until the next presentation

00:37:04,800 --> 00:37:08,320
we encourage you guys to go visit the

00:37:06,640 --> 00:37:10,240
virtual exhibit booth

00:37:08,320 --> 00:37:12,560
and go and see some of ato's amazing

00:37:10,240 --> 00:37:13,839
sponsors federico thank you again

00:37:12,560 --> 00:37:15,680
um if you have a few minutes there are

00:37:13,839 --> 00:37:17,599
some questions in the chat window if you

00:37:15,680 --> 00:37:19,599
felt like responding back to them

00:37:17,599 --> 00:37:21,440
the audience was really really engaged

00:37:19,599 --> 00:37:22,960
with your presentation

00:37:21,440 --> 00:37:24,640
thanks everyone for coming we'll see you

00:37:22,960 --> 00:37:26,960
in 15.

00:37:24,640 --> 00:37:27,760
let me see where do i find the chat

00:37:26,960 --> 00:37:31,119
window

00:37:27,760 --> 00:37:31,119
yes i have it here

00:37:33,119 --> 00:37:37,839
okay so

00:37:44,880 --> 00:37:49,359
i'm scanning them now

00:37:46,300 --> 00:37:49,359
[Music]

00:37:49,599 --> 00:37:52,960
where did i get the case the case is uh

00:37:52,240 --> 00:37:56,320
from uh

00:37:52,960 --> 00:37:58,880
pico cluster it's a company out of utah

00:37:56,320 --> 00:38:01,440
and uh you can find them very easily

00:37:58,880 --> 00:38:01,440
with google

00:38:02,320 --> 00:38:07,119
can you power with power over ethernet

00:38:05,040 --> 00:38:09,440
um

00:38:07,119 --> 00:38:12,400
especially for the pi 3 that should be

00:38:09,440 --> 00:38:15,680
um that should be very possible

00:38:12,400 --> 00:38:16,079
for the pi 4 i i haven't seen an adapter

00:38:15,680 --> 00:38:19,280
but

00:38:16,079 --> 00:38:22,560
historically there have been po or e

00:38:19,280 --> 00:38:25,200
adapters for uh for

00:38:22,560 --> 00:38:29,040
uh raspberry pi so it should be possible

00:38:25,200 --> 00:38:29,040
i haven't seen it done with pi4 yet

00:38:30,400 --> 00:38:37,599
any active cooling the pi 4 can get

00:38:34,400 --> 00:38:40,240
rather warm um yes

00:38:37,599 --> 00:38:41,359
and there is a fan out of the uh four

00:38:40,240 --> 00:38:43,520
cluster and that's

00:38:41,359 --> 00:38:45,839
um that's the part that we were trying

00:38:43,520 --> 00:38:49,390
to silence it basically exhausts the the

00:38:45,839 --> 00:38:51,200
hot air out of the box

00:38:49,390 --> 00:38:54,079
[Music]

00:38:51,200 --> 00:38:57,280
i still can't remember the name of the

00:38:54,079 --> 00:38:57,280
company that makes this

00:38:59,599 --> 00:39:03,520
oh it's called noctua uh it's an

00:39:02,079 --> 00:39:06,720
austrian company

00:39:03,520 --> 00:39:09,839
and uh um the fan that we

00:39:06,720 --> 00:39:11,599
have is white instead of black but uh

00:39:09,839 --> 00:39:14,000
really the the part that's cool is that

00:39:11,599 --> 00:39:16,720
it's a lot a lot

00:39:14,000 --> 00:39:16,720
less noisy

00:39:23,839 --> 00:39:31,920
va of the power supply

00:39:28,560 --> 00:39:35,040
yes the power supply produces a lot more

00:39:31,920 --> 00:39:35,280
um watts that is needed for this cluster

00:39:35,040 --> 00:39:39,040
i

00:39:35,280 --> 00:39:40,320
agree um i think it's the smallest of

00:39:39,040 --> 00:39:43,920
the power supplies that

00:39:40,320 --> 00:39:47,200
one could procure in this format

00:39:43,920 --> 00:39:48,240
and it has a nice nice screw holes on

00:39:47,200 --> 00:39:51,520
the bottom which

00:39:48,240 --> 00:39:52,000
make very easy to attach it to the side

00:39:51,520 --> 00:39:55,040
wall

00:39:52,000 --> 00:39:58,240
i think those were probably two factors

00:39:55,040 --> 00:39:59,119
um this is a fairly standard format for

00:39:58,240 --> 00:40:01,760
um

00:39:59,119 --> 00:40:03,440
for uh do-it-yourself power supplies

00:40:01,760 --> 00:40:04,240
this is the smallest one i've seen but

00:40:03,440 --> 00:40:05,920
it's still

00:40:04,240 --> 00:40:08,480
it's still fairly large and it will

00:40:05,920 --> 00:40:11,599
still put out a lot more power than

00:40:08,480 --> 00:40:14,960
then um

00:40:11,599 --> 00:40:16,640
uh then the smaller uh power supplies

00:40:14,960 --> 00:40:17,440
that we have seen used with pi 3

00:40:16,640 --> 00:40:19,119
clusters

00:40:17,440 --> 00:40:20,640
hey frederico can i ask you to take your

00:40:19,119 --> 00:40:21,359
slides down we need to get the next

00:40:20,640 --> 00:40:25,839
speaker

00:40:21,359 --> 00:40:25,839
lined up and ready yeah sure of course

00:40:30,160 --> 00:40:33,119
then um

00:40:35,119 --> 00:40:39,040
will thanks for hopping on if you want

00:40:37,200 --> 00:40:43,440
to go ahead and test your

00:40:39,040 --> 00:40:43,440
slides if you have them that would be

00:40:50,839 --> 00:40:54,640
great

00:40:52,480 --> 00:40:55,920
uh there are questions about slides

00:40:54,640 --> 00:40:59,119
those will be posted on

00:40:55,920 --> 00:41:03,359
on my website at some point so no uh

00:40:59,119 --> 00:41:03,359
no particular difficulty there

00:41:04,720 --> 00:41:08,640
and there was another question that was

00:41:06,240 --> 00:41:10,720
around vlans um

00:41:08,640 --> 00:41:11,920
that is possible it just complicates

00:41:10,720 --> 00:41:14,480
things uh

00:41:11,920 --> 00:41:15,359
additionally when you have two network

00:41:14,480 --> 00:41:18,839
interfaces

00:41:15,359 --> 00:41:21,680
to to do things to begin with but

00:41:18,839 --> 00:41:24,880
um for example if one

00:41:21,680 --> 00:41:28,800
we're designing a cluster using

00:41:24,880 --> 00:41:30,480
um using pi zeros which only have one

00:41:28,800 --> 00:41:34,319
network interface

00:41:30,480 --> 00:41:36,560
vlans or or multiple ip addresses per uh

00:41:34,319 --> 00:41:39,119
for a network port will definitely be

00:41:36,560 --> 00:41:39,119
the way to go

00:41:39,760 --> 00:41:43,839
and i think that was the last question

00:41:44,640 --> 00:41:48,000
oh someone observed that noctua is brown

00:41:47,040 --> 00:41:50,880
that's right it's a very

00:41:48,000 --> 00:41:53,359
light brown it's uh like ivory to be

00:41:50,880 --> 00:41:53,359
precise

00:41:53,520 --> 00:41:59,119
the the details are in dark brown but uh

00:41:56,160 --> 00:42:03,839
the fan itself is ever

00:41:59,119 --> 00:42:03,839
the case of the fan and i guess that's

00:42:06,599 --> 00:42:09,599

YouTube URL: https://www.youtube.com/watch?v=u4oqRHn-Hzw


