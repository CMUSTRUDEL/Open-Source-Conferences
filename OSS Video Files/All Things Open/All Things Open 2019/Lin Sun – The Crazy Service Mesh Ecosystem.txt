Title: Lin Sun – The Crazy Service Mesh Ecosystem
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	Ever wondering how the crazy service mesh ecosystem explodes in the past few years?   Why suddenly everyone is jumping onto the service mesh bandwagon?  What are the differences between these key players such as Netflix OSS, Istio, Linked and Ramp etc.   This talk will provide an overview of why service mesh, the crazy service mesh ecosystem, where we are, and live demos and comparison of what is out there.

This talk will focus on the following:

What are the key players in this space?
What is Istio and the takeaway of the latest Istio 1.x release?
What is Linkerd 2.0 and key takeaway of Linkerd 2.x?
Wait…What about AppMesh?
Captions: 
	00:00:02,670 --> 00:00:09,750
[Music]

00:00:06,649 --> 00:00:12,540
yeah okay so um this talk is really

00:00:09,750 --> 00:00:15,269
about the crazy service machine

00:00:12,540 --> 00:00:18,600
ecosystem out there I was just talking

00:00:15,269 --> 00:00:20,490
to him the gentlemen do it was like two

00:00:18,600 --> 00:00:23,699
years ago there was only one or two

00:00:20,490 --> 00:00:27,990
project but now it's like 10 projects

00:00:23,699 --> 00:00:29,750
out there so before we talk about each

00:00:27,990 --> 00:00:33,090
of the service man she our

00:00:29,750 --> 00:00:36,239
implementation I like to start to talk

00:00:33,090 --> 00:00:38,670
about a why service much why are we

00:00:36,239 --> 00:00:41,700
interested in service manager why there

00:00:38,670 --> 00:00:46,160
are so many projects out there providing

00:00:41,700 --> 00:00:50,059
service match solution to you as a user

00:00:46,160 --> 00:00:54,780
can you guys see my slides in the back

00:00:50,059 --> 00:00:58,680
ok ok good um so this code might sound

00:00:54,780 --> 00:01:01,680
familiar to you so it's a basically

00:00:58,680 --> 00:01:04,619
actually be client tries to call a

00:01:01,680 --> 00:01:08,280
service to get some secret sauce recipe

00:01:04,619 --> 00:01:11,510
and it needs to handle network arrow and

00:01:08,280 --> 00:01:14,490
says please fix the network error for me

00:01:11,510 --> 00:01:17,460
how many of you were in my session this

00:01:14,490 --> 00:01:19,020
morning so I can get a ok a few of you

00:01:17,460 --> 00:01:23,670
so I'll try to run this a little bit

00:01:19,020 --> 00:01:27,180
quickly um many of you aren't there so

00:01:23,670 --> 00:01:28,799
on now you may want to have no balance

00:01:27,180 --> 00:01:31,650
because you want to talk to you a

00:01:28,799 --> 00:01:34,829
specific end point so you would add

00:01:31,650 --> 00:01:38,670
typical code to look up the service in a

00:01:34,829 --> 00:01:40,500
specific way to either wrong rubbing or

00:01:38,670 --> 00:01:43,020
maybe you have some so physically the

00:01:40,500 --> 00:01:45,960
algorithm for low balancer to look up

00:01:43,020 --> 00:01:49,710
their secret sauce our service to get

00:01:45,960 --> 00:01:51,780
the recipe now you probably want to

00:01:49,710 --> 00:01:53,759
think about you know I can't trust the

00:01:51,780 --> 00:01:57,090
code just do it one time I'm going to

00:01:53,759 --> 00:01:59,430
try it at least three times and then if

00:01:57,090 --> 00:02:01,829
it actually fails that the second time

00:01:59,430 --> 00:02:03,780
I'm gonna put a little bit sleep in

00:02:01,829 --> 00:02:06,869
there because I want to have a little

00:02:03,780 --> 00:02:11,009
bit of actual time to try it and also

00:02:06,869 --> 00:02:13,200
you don't necessarily trust all your

00:02:11,009 --> 00:02:13,950
services to communicate to each other

00:02:13,200 --> 00:02:16,770
when you

00:02:13,950 --> 00:02:18,650
talk to the secrets or services you

00:02:16,770 --> 00:02:21,390
actually have to have certain

00:02:18,650 --> 00:02:24,030
authorization with certain keys to talk

00:02:21,390 --> 00:02:26,790
to their services so this is the code

00:02:24,030 --> 00:02:29,810
that com seeing allows you to build the

00:02:26,790 --> 00:02:33,090
secret you actually set it as the header

00:02:29,810 --> 00:02:36,650
when you talk to the target service

00:02:33,090 --> 00:02:39,720
which is secret sauce in this case and

00:02:36,650 --> 00:02:40,980
logging is also our people's favorite

00:02:39,720 --> 00:02:42,870
because you need that you're

00:02:40,980 --> 00:02:49,830
troubleshooting problems so you will

00:02:42,870 --> 00:02:52,470
need to log success and failure this is

00:02:49,830 --> 00:02:54,450
the stats provided by Kuban at ease the

00:02:52,470 --> 00:02:57,989
really basic stats as you can see you

00:02:54,450 --> 00:03:00,959
can't really see much other than CPU and

00:02:57,989 --> 00:03:03,239
memory other than the positi are active

00:03:00,959 --> 00:03:05,940
healthy that's pretty much it

00:03:03,239 --> 00:03:08,540
so now I want to imagine you have many

00:03:05,940 --> 00:03:11,069
services and some of your services

00:03:08,540 --> 00:03:13,260
probably would look like this room

00:03:11,069 --> 00:03:15,690
because it has the retries we talked

00:03:13,260 --> 00:03:18,440
about it has the service secure

00:03:15,690 --> 00:03:20,760
communication try to handle secrets

00:03:18,440 --> 00:03:23,640
authorization we talked about it it has

00:03:20,760 --> 00:03:26,160
the networking error trying to reach how

00:03:23,640 --> 00:03:29,160
to handle networking aro it has to login

00:03:26,160 --> 00:03:32,100
we talked about earlier so your services

00:03:29,160 --> 00:03:34,890
may not be able to focus on the core

00:03:32,100 --> 00:03:37,440
essential piece and function of your

00:03:34,890 --> 00:03:39,239
services and also if you have think

00:03:37,440 --> 00:03:42,060
about it might have multiple languages

00:03:39,239 --> 00:03:44,220
and when you have multiple languages you

00:03:42,060 --> 00:03:47,640
have to write all that what I just

00:03:44,220 --> 00:03:50,900
showed you differently for each of the

00:03:47,640 --> 00:03:53,790
languages so we got developers in key

00:03:50,900 --> 00:03:56,400
really each service owner needs to build

00:03:53,790 --> 00:03:59,340
all these functionalities that's not

00:03:56,400 --> 00:04:02,130
even related to my services and then the

00:03:59,340 --> 00:04:05,040
operation team who supervise many of

00:04:02,130 --> 00:04:08,579
these services would be thinking about

00:04:05,040 --> 00:04:11,519
can we really trust each of the service

00:04:08,579 --> 00:04:15,410
owner to build all these functionalities

00:04:11,519 --> 00:04:17,700
that's plot plotting functionalities

00:04:15,410 --> 00:04:19,799
consistently can we trust them to do

00:04:17,700 --> 00:04:22,470
logging can we trust them to do secure

00:04:19,799 --> 00:04:26,900
communication can we trust them to do

00:04:22,470 --> 00:04:29,670
circuit braking retry consistently

00:04:26,900 --> 00:04:33,240
so that comes down to you the problem

00:04:29,670 --> 00:04:37,710
domain are we just explains comes down

00:04:33,240 --> 00:04:41,100
to what exactly is service mesh so to me

00:04:37,710 --> 00:04:45,120
service much really provides you is a

00:04:41,100 --> 00:04:48,840
storage box that can sit next side of

00:04:45,120 --> 00:04:51,810
your services to extract the long

00:04:48,840 --> 00:04:55,020
essential piece of your services and put

00:04:51,810 --> 00:04:58,500
that into the storage beam so that gives

00:04:55,020 --> 00:05:01,260
you for your services to focus on the

00:04:58,500 --> 00:05:04,160
critical pieces of your services and

00:05:01,260 --> 00:05:08,550
then you have the long essential pieces

00:05:04,160 --> 00:05:10,980
to delegate that to the cycle proxy in

00:05:08,550 --> 00:05:14,040
this case which is the storage box and

00:05:10,980 --> 00:05:17,460
then you actually have a consistent

00:05:14,040 --> 00:05:20,490
storage box to handle for all your

00:05:17,460 --> 00:05:24,660
services regardless what languages your

00:05:20,490 --> 00:05:26,970
service are retaining so to summarize

00:05:24,660 --> 00:05:29,580
the service mesh is really in language

00:05:26,970 --> 00:05:32,490
neutral our regardless what languages

00:05:29,580 --> 00:05:36,210
your service are retaining it provides a

00:05:32,490 --> 00:05:40,190
dummy initialization of that storage box

00:05:36,210 --> 00:05:43,470
which is like a proxy and by doing that

00:05:40,190 --> 00:05:46,260
instantly you immediately get these

00:05:43,470 --> 00:05:48,840
abilities and the resort of visibility

00:05:46,260 --> 00:05:51,560
plus there is not only you Gary's

00:05:48,840 --> 00:05:54,090
abilities you actually also get retries

00:05:51,560 --> 00:05:57,479
automatically I believe we do two times

00:05:54,090 --> 00:06:01,520
three tries by default optionally the

00:05:57,479 --> 00:06:05,010
service much provider also exposes API

00:06:01,520 --> 00:06:08,850
allowed the users like developers or

00:06:05,010 --> 00:06:11,580
operators to program the attachment so

00:06:08,850 --> 00:06:14,430
that it can be smart so it can allow

00:06:11,580 --> 00:06:16,850
them to do a/b testing to do canary

00:06:14,430 --> 00:06:19,010
testy to be able to do secure

00:06:16,850 --> 00:06:23,190
communication to be able to do

00:06:19,010 --> 00:06:25,470
authorization so that's all through the

00:06:23,190 --> 00:06:29,280
programming part are using typically

00:06:25,470 --> 00:06:31,530
using a llamó configuration so before

00:06:29,280 --> 00:06:37,229
service maj you would see a programmer

00:06:31,530 --> 00:06:39,470
or user to visit your services through

00:06:37,229 --> 00:06:42,950
an ingress typically and

00:06:39,470 --> 00:06:46,400
goes to the service a and service B with

00:06:42,950 --> 00:06:48,920
service manager when the psycho proxy is

00:06:46,400 --> 00:06:51,980
added the service is not going to go

00:06:48,920 --> 00:06:53,870
directly to service a it's going to go

00:06:51,980 --> 00:06:55,700
through the sidecar proxy because that

00:06:53,870 --> 00:06:58,790
proxy is going to capture all the

00:06:55,700 --> 00:07:01,220
inbound traffic and then forward that

00:06:58,790 --> 00:07:03,500
you the service a and then when the

00:07:01,220 --> 00:07:06,350
service a wants to call another services

00:07:03,500 --> 00:07:10,730
it would also go through the sidecar

00:07:06,350 --> 00:07:12,560
proxy of a and then goes to B depends on

00:07:10,730 --> 00:07:16,250
whether service a is it will allow to

00:07:12,560 --> 00:07:19,700
talk to service B and sue the

00:07:16,250 --> 00:07:22,310
programming portion of program in the

00:07:19,700 --> 00:07:24,890
mash you could also enable Mutual TRS

00:07:22,310 --> 00:07:27,140
you could do intelligent things like we

00:07:24,890 --> 00:07:31,180
talked about a be testing circle

00:07:27,140 --> 00:07:35,210
breaking so all that's possible for you

00:07:31,180 --> 00:07:37,250
so in summarize service mush really

00:07:35,210 --> 00:07:39,740
provides language neutral standard

00:07:37,250 --> 00:07:43,490
attachment to your application container

00:07:39,740 --> 00:07:47,840
it provides user interface to allow you

00:07:43,490 --> 00:07:51,050
to configure C's for dissect how proxy

00:07:47,840 --> 00:07:54,080
and most importantly without you needing

00:07:51,050 --> 00:07:56,690
to redeploy your services so you can

00:07:54,080 --> 00:07:59,480
keep your service intact but just apply

00:07:56,690 --> 00:08:01,940
the policies on top of it it also

00:07:59,480 --> 00:08:04,160
enables clear separation from the

00:08:01,940 --> 00:08:06,890
application developer who focused on

00:08:04,160 --> 00:08:10,340
their application and then the operation

00:08:06,890 --> 00:08:15,350
team focus on how do they program e the

00:08:10,340 --> 00:08:17,690
policies for the cycle proxy one thing I

00:08:15,350 --> 00:08:21,470
would like to everyone really is take a

00:08:17,690 --> 00:08:24,230
pause to think about do you really need

00:08:21,470 --> 00:08:26,960
service match because we actually find

00:08:24,230 --> 00:08:28,280
out not everybody needs a service match

00:08:26,960 --> 00:08:31,910
service messages are actually

00:08:28,280 --> 00:08:34,250
complicated because of the psycho proxy

00:08:31,910 --> 00:08:36,169
because of the control plane so you have

00:08:34,250 --> 00:08:38,330
to look at it do you really need micro

00:08:36,169 --> 00:08:42,020
service architecture do you really need

00:08:38,330 --> 00:08:44,030
to have your services to be delivered by

00:08:42,020 --> 00:08:46,010
different team by different schedule

00:08:44,030 --> 00:08:49,100
that's when you really want to look at

00:08:46,010 --> 00:08:51,770
service mesh to help you to solve those

00:08:49,100 --> 00:08:52,270
problems so let's talk about navigating

00:08:51,770 --> 00:08:54,940
the

00:08:52,270 --> 00:08:56,830
smash the ecosystem out there to me

00:08:54,940 --> 00:08:58,750
there are a couple of key aspect you

00:08:56,830 --> 00:09:01,060
really want to look into when you look

00:08:58,750 --> 00:09:03,220
at the ServiceMaster ecosystem out there

00:09:01,060 --> 00:09:06,760
so you want to check if it's an open

00:09:03,220 --> 00:09:09,190
source project is it govern governed by

00:09:06,760 --> 00:09:11,320
your diverse contribute contributor base

00:09:09,190 --> 00:09:12,370
that's really important for the healthy

00:09:11,320 --> 00:09:16,330
of the project

00:09:12,370 --> 00:09:18,490
does it use a proprietary proxy or for

00:09:16,330 --> 00:09:21,430
their citecar their attachment we talked

00:09:18,490 --> 00:09:24,070
about it's a project part of a

00:09:21,430 --> 00:09:26,500
foundation does it also contain all the

00:09:24,070 --> 00:09:29,020
features you need and also does it

00:09:26,500 --> 00:09:30,880
really integrate very well with your

00:09:29,020 --> 00:09:33,340
existing environments because you have

00:09:30,880 --> 00:09:35,560
to look at your legacy system to find

00:09:33,340 --> 00:09:38,170
out whether it's a match they are

00:09:35,560 --> 00:09:40,660
whether it's supported so a couple of

00:09:38,170 --> 00:09:44,290
key players here how many of you heard

00:09:40,660 --> 00:09:47,350
of armboy okay Wow lots of you very good

00:09:44,290 --> 00:09:51,910
so it's still I think we did a pool we

00:09:47,350 --> 00:09:53,460
did a poor lengthy council connect how

00:09:51,910 --> 00:09:56,050
many of you heard of a council

00:09:53,460 --> 00:09:56,700
okay comes a lot of with you that's

00:09:56,050 --> 00:10:03,550
great

00:09:56,700 --> 00:10:05,080
AWS app mesh top of you socom kumar and

00:10:03,550 --> 00:10:09,300
you've you heard of this project that

00:10:05,080 --> 00:10:13,930
was just Orleans last month Aspen mash a

00:10:09,300 --> 00:10:17,980
cup of you service machine debase feel

00:10:13,930 --> 00:10:20,500
you're very good so envoy was created

00:10:17,980 --> 00:10:22,570
and lived its graduated CNC you have

00:10:20,500 --> 00:10:24,940
project you guys probably see this curve

00:10:22,570 --> 00:10:27,850
I think it was published like two weeks

00:10:24,940 --> 00:10:30,700
or three weeks ago by CN CF to show the

00:10:27,850 --> 00:10:32,680
tremendous growth of envoy what's really

00:10:30,700 --> 00:10:35,140
interesting of our boy I think it's a

00:10:32,680 --> 00:10:38,290
battle-tested and lift in production

00:10:35,140 --> 00:10:43,060
environment it's tested on over 100

00:10:38,290 --> 00:10:46,060
services spending 10,000 VMs a

00:10:43,060 --> 00:10:47,880
processing human and Paseka requests per

00:10:46,060 --> 00:10:51,310
second so it's really large-scale

00:10:47,880 --> 00:10:54,490
deployment and it's what the NC really

00:10:51,310 --> 00:10:57,820
interesting envoy is it provides out of

00:10:54,490 --> 00:11:00,310
process architecture so it enables us to

00:10:57,820 --> 00:11:03,370
take on voice as a building block for

00:11:00,310 --> 00:11:05,560
service match because of the out of the

00:11:03,370 --> 00:11:06,100
process architecture so we could

00:11:05,560 --> 00:11:09,310
potential

00:11:06,100 --> 00:11:11,470
use envoy as a cycle proxy and all the

00:11:09,310 --> 00:11:13,870
way also suppose sophisticated advanced

00:11:11,470 --> 00:11:14,529
load balancer different capabilities you

00:11:13,870 --> 00:11:16,630
name it

00:11:14,529 --> 00:11:19,269
envoy probably have it for though

00:11:16,630 --> 00:11:22,269
balancing and the other thing really

00:11:19,269 --> 00:11:25,480
cool with some ways it provides API to

00:11:22,269 --> 00:11:27,910
do configuration management so if you

00:11:25,480 --> 00:11:30,220
are our service mesh provider it's

00:11:27,910 --> 00:11:34,300
important that we could actually looking

00:11:30,220 --> 00:11:36,550
at the API to program armboy it was a

00:11:34,300 --> 00:11:38,829
really interesting of our way I think

00:11:36,550 --> 00:11:40,870
it's a part of why the project is so

00:11:38,829 --> 00:11:43,660
successful is you look at the

00:11:40,870 --> 00:11:47,620
contribution diagram of our way it's

00:11:43,660 --> 00:11:50,290
just super super healthy and Google is

00:11:47,620 --> 00:11:53,380
the top contributor I think lyft is now

00:11:50,290 --> 00:11:55,420
number two rather than the IBM I think

00:11:53,380 --> 00:11:57,880
it's number six or seven but so it's

00:11:55,420 --> 00:12:00,040
really really diverse that's what you

00:11:57,880 --> 00:12:04,750
want to see with the House open source

00:12:00,040 --> 00:12:09,160
project sto is a project con thats being

00:12:04,750 --> 00:12:12,519
two years old and it uses envoy as like

00:12:09,160 --> 00:12:15,720
a proxy it's also open source service

00:12:12,519 --> 00:12:19,139
match it's made of three hundred

00:12:15,720 --> 00:12:22,899
companies and four hundred contributors

00:12:19,139 --> 00:12:25,689
very very rich features that israel is

00:12:22,899 --> 00:12:27,959
known for probably in the most advanced

00:12:25,689 --> 00:12:30,730
service mesh project out there

00:12:27,959 --> 00:12:33,519
the other thing really interesting is K

00:12:30,730 --> 00:12:36,100
native which is Cuban a debased platform

00:12:33,519 --> 00:12:40,750
to deploy and manage modem service

00:12:36,100 --> 00:12:43,990
runtimes T native is also build on Sto

00:12:40,750 --> 00:12:46,839
at least today if you're looking at the

00:12:43,990 --> 00:12:51,130
issues contribution diagram I would say

00:12:46,839 --> 00:12:54,069
it's not as nice as armboy so Google is

00:12:51,130 --> 00:12:57,250
the top contributor to SEO and everybody

00:12:54,069 --> 00:13:00,550
else combines with IBM being the second

00:12:57,250 --> 00:13:03,220
contributor it's probably about a little

00:13:00,550 --> 00:13:06,040
over half of what Google contributes so

00:13:03,220 --> 00:13:10,439
it's still very diverse it's just not as

00:13:06,040 --> 00:13:12,970
diverse as armboy link D is CN CF

00:13:10,439 --> 00:13:15,309
incubating projects it's also open

00:13:12,970 --> 00:13:18,279
source project once they link the team

00:13:15,309 --> 00:13:21,790
does really interesting is they use

00:13:18,279 --> 00:13:24,730
homegrown sidecar that's written in rust

00:13:21,790 --> 00:13:28,240
they actually rewrite all day of cycle

00:13:24,730 --> 00:13:29,980
are just recently the old about a year

00:13:28,240 --> 00:13:33,459
ago as part of a link d2o

00:13:29,980 --> 00:13:35,949
and they handle they they are also

00:13:33,459 --> 00:13:38,860
relative future reach this for mutually

00:13:35,949 --> 00:13:41,199
ours they have the basic observability

00:13:38,860 --> 00:13:43,930
traffic shifting not as feature-rich as

00:13:41,199 --> 00:13:47,350
SEO but our basic functions are definite

00:13:43,930 --> 00:13:49,839
there and the team really focus on cuban

00:13:47,350 --> 00:13:50,740
at ease make it really work well for

00:13:49,839 --> 00:13:54,449
cuban at ease

00:13:50,740 --> 00:13:58,180
so ninky has been really known for

00:13:54,449 --> 00:14:02,430
people to get started to use lengthy

00:13:58,180 --> 00:14:04,600
really easily and their request zero

00:14:02,430 --> 00:14:07,089
configuration for some of the mesh

00:14:04,600 --> 00:14:10,930
functions such as Mitchard hear us so

00:14:07,089 --> 00:14:13,389
it's it's a great project out there one

00:14:10,930 --> 00:14:14,889
thing about lengthy is it's not using

00:14:13,389 --> 00:14:17,589
arm boy because they're using their

00:14:14,889 --> 00:14:21,100
homegrown proxy the other thing is their

00:14:17,589 --> 00:14:23,769
contribution is not as diverse as it

00:14:21,100 --> 00:14:27,069
still or you aren't boy for sure so it's

00:14:23,769 --> 00:14:29,019
primarily by this company who founded a

00:14:27,069 --> 00:14:31,809
lengthy called our buoyant

00:14:29,019 --> 00:14:34,240
a lengthy also has a really nice

00:14:31,809 --> 00:14:36,069
dashboard as you can see so the

00:14:34,240 --> 00:14:39,339
dashboard has different functions that

00:14:36,069 --> 00:14:42,100
you can actually see our graphics for

00:14:39,339 --> 00:14:45,309
your workload you can also do our tab

00:14:42,100 --> 00:14:47,649
shows the stream of requests across the

00:14:45,309 --> 00:14:50,259
single pod you can also display

00:14:47,649 --> 00:14:52,569
information about live traffic through

00:14:50,259 --> 00:14:57,600
the top commands so it's a nice

00:14:52,569 --> 00:15:00,850
dashboard they provide council connect

00:14:57,600 --> 00:15:03,579
was developed by Hasek hope it's open

00:15:00,850 --> 00:15:05,589
source projects it really extends the

00:15:03,579 --> 00:15:08,199
existing council offering so if you're

00:15:05,589 --> 00:15:09,699
already a home console user i think it's

00:15:08,199 --> 00:15:13,300
no brainer you want to look at this

00:15:09,699 --> 00:15:16,209
project it uses envoy as a psych our it

00:15:13,300 --> 00:15:19,389
provides integration with route to help

00:15:16,209 --> 00:15:21,759
you manage that our certificates used to

00:15:19,389 --> 00:15:24,699
communicate our secure communication of

00:15:21,759 --> 00:15:26,980
the services it also supports on the key

00:15:24,699 --> 00:15:30,420
features of service match such as mutual

00:15:26,980 --> 00:15:36,030
here as traffic management ask

00:15:30,420 --> 00:15:38,490
seven and observe abilities a AWS at

00:15:36,030 --> 00:15:41,310
mocchi I would say this is really a

00:15:38,490 --> 00:15:45,050
pretty much cloud services hosted by a

00:15:41,310 --> 00:15:48,450
SS it's not really open source per se

00:15:45,050 --> 00:15:50,850
they the most important thing about it I

00:15:48,450 --> 00:15:54,710
think it's support all the compute

00:15:50,850 --> 00:15:59,790
services in AWI so it supports the AWS

00:15:54,710 --> 00:16:02,700
ECS are far gauge ek as an ec2 so if you

00:15:59,790 --> 00:16:04,620
are already a AWS customer this is

00:16:02,700 --> 00:16:08,070
what's looking at it it has similar

00:16:04,620 --> 00:16:11,790
control plan as it still but you're

00:16:08,070 --> 00:16:13,950
pretty much locked in with AWS this is a

00:16:11,790 --> 00:16:16,530
new project I just mentioned Kumar that

00:16:13,950 --> 00:16:18,510
was launched a month ago it's a

00:16:16,530 --> 00:16:21,570
universal control open source control

00:16:18,510 --> 00:16:25,260
plane it also uses envoy as the cycle

00:16:21,570 --> 00:16:30,630
proxy what Conda is really interesting

00:16:25,260 --> 00:16:32,730
is is they actually have the support

00:16:30,630 --> 00:16:34,770
multi-tenancy and they also have

00:16:32,730 --> 00:16:36,930
simplify control plan they have one

00:16:34,770 --> 00:16:39,540
single component for control plane so

00:16:36,930 --> 00:16:42,300
really really interesting as the mesh is

00:16:39,540 --> 00:16:45,570
a supported distribution of the sto

00:16:42,300 --> 00:16:48,840
project this is when you see Amanda who

00:16:45,570 --> 00:16:51,030
is rally around the open-source project

00:16:48,840 --> 00:16:54,360
like sto they are trying to yourself

00:16:51,030 --> 00:16:57,720
support of sto they have a UI and

00:16:54,360 --> 00:17:00,000
dashboard to help you user to manager

00:16:57,720 --> 00:17:02,670
looking at the history of resources that

00:17:00,000 --> 00:17:04,829
identify problems so really useful so

00:17:02,670 --> 00:17:07,140
very interesting sto this is something

00:17:04,829 --> 00:17:10,050
definitely it was checking out here our

00:17:07,140 --> 00:17:14,160
service magic interface is relative knew

00:17:10,050 --> 00:17:16,800
it was a long chat cube con Europe 2019

00:17:14,160 --> 00:17:18,690
it's primarily funded by Microsoft with

00:17:16,800 --> 00:17:20,880
a couple of partners out there it's

00:17:18,690 --> 00:17:24,150
really attempt to find a common ground

00:17:20,880 --> 00:17:27,120
for service match I'm CUBAN at ease so

00:17:24,150 --> 00:17:29,640
if you're familiar with kubernetes then

00:17:27,120 --> 00:17:32,760
you can think about SMI like the

00:17:29,640 --> 00:17:35,130
container wrong time interface so

00:17:32,760 --> 00:17:37,140
container wrong time interface is an

00:17:35,130 --> 00:17:40,230
abstraction for container wrong time for

00:17:37,140 --> 00:17:42,750
cuban at ease there stalker and

00:17:40,230 --> 00:17:44,049
container D so what Microsoft is trying

00:17:42,750 --> 00:17:46,419
to do is

00:17:44,049 --> 00:17:49,179
to have their common ground of service

00:17:46,419 --> 00:17:52,749
mesh interface sorry about that

00:17:49,179 --> 00:17:56,710
in looking at the surface mesh interface

00:17:52,749 --> 00:17:58,570
at the service mention our projects at

00:17:56,710 --> 00:17:59,889
since they have landscape I actually

00:17:58,570 --> 00:18:02,320
learned something new

00:17:59,889 --> 00:18:04,840
I recently to you so this in this new

00:18:02,320 --> 00:18:07,960
project called gray matter there's also

00:18:04,840 --> 00:18:10,119
mashed projects there's on also Netflix

00:18:07,960 --> 00:18:12,639
OSS to which I already know I think

00:18:10,119 --> 00:18:16,119
that's a pre verging of service mesh its

00:18:12,639 --> 00:18:18,820
most so much focusing on using single

00:18:16,119 --> 00:18:23,169
programming languages but not so much

00:18:18,820 --> 00:18:25,179
having that like a proxy work across all

00:18:23,169 --> 00:18:27,460
the languages regardless what your

00:18:25,179 --> 00:18:31,059
service is there's a super glue there's

00:18:27,460 --> 00:18:33,909
also ran our ramp project I would say I

00:18:31,059 --> 00:18:36,309
think personally I think gray a master

00:18:33,909 --> 00:18:39,100
and also match

00:18:36,309 --> 00:18:40,659
they are literally to be evaluated some

00:18:39,100 --> 00:18:42,730
of the documentation and not they're

00:18:40,659 --> 00:18:44,529
they don't have like good demos out

00:18:42,730 --> 00:18:47,259
there super glue I think it's an

00:18:44,529 --> 00:18:49,440
interesting play out there it's an open

00:18:47,259 --> 00:18:52,210
source project really opinionated

00:18:49,440 --> 00:18:55,629
abstraction layer that simplifies

00:18:52,210 --> 00:18:57,759
installation management and operation of

00:18:55,629 --> 00:18:59,859
your service magic super glue actually

00:18:57,759 --> 00:19:02,409
exists before service dimension

00:18:59,859 --> 00:19:07,539
interface exists so I think it really

00:19:02,409 --> 00:19:09,190
helps shape us SMI when I think it's a

00:19:07,539 --> 00:19:12,700
little bit too early it's a startup that

00:19:09,190 --> 00:19:15,190
was founded around cube con Europe I

00:19:12,700 --> 00:19:18,609
find most of their documentation are not

00:19:15,190 --> 00:19:21,159
super accurate at least I think the

00:19:18,609 --> 00:19:22,899
teams you're working hard on that so I

00:19:21,159 --> 00:19:26,590
think I'm not going to have time for

00:19:22,899 --> 00:19:30,639
demo so I do want to mention quick thing

00:19:26,590 --> 00:19:33,879
about this book that's coming up so also

00:19:30,639 --> 00:19:36,249
by me and Mike my friend Dan Berg so

00:19:33,879 --> 00:19:39,190
it's going to be preview around cube

00:19:36,249 --> 00:19:41,679
count us in November this year and we

00:19:39,190 --> 00:19:43,509
expect the final book out towards the

00:19:41,679 --> 00:19:45,850
end of the year so this is something if

00:19:43,509 --> 00:19:49,330
you're interesting service man if you're

00:19:45,850 --> 00:19:52,600
interesting is do I recommend you to

00:19:49,330 --> 00:19:55,130
check it out when it's available I will

00:19:52,600 --> 00:19:56,750
be here and also outside

00:19:55,130 --> 00:19:59,570
to answer any questions you guys have

00:19:56,750 --> 00:20:03,050
thank you so much

00:19:59,570 --> 00:20:08,509
[Applause]

00:20:03,050 --> 00:20:08,509

YouTube URL: https://www.youtube.com/watch?v=wTxv1eeVo3E


