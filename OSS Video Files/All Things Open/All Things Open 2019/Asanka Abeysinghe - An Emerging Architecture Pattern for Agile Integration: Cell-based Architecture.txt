Title: Asanka Abeysinghe - An Emerging Architecture Pattern for Agile Integration: Cell-based Architecture
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	The number of microservices running in enterprises increases daily. As a result, service composition, governance, security, and observability are becoming a challenge to implement and incorporate. A “cell-based” architecture is an approach that can be applied to current or desired development and technologies to address these issues. This technology-neutral approach helps cloud-native dev teams become more efficient, act in a more self-organized manner, and speed overall release times.

In this talk, Asanka will introduce the “cell-based” reference architecture, which is API-centric, cloud-native and microservices friendly. He will explain the role of APIs in the cell-based approach, as well as examine how real applications are built as cells. Asanka will explore the metrics and approaches that can be used to measure the effectiveness of the architecture and explore how organizations can implement the cell approach.
Captions: 
	00:00:00,230 --> 00:00:08,519
[Music]

00:00:10,070 --> 00:00:16,260
hi good afternoon hope you are having a

00:00:13,950 --> 00:00:18,029
good time I think it's a second day

00:00:16,260 --> 00:00:20,670
probably technically third day of the

00:00:18,029 --> 00:00:23,760
conference so might be it'll be tired

00:00:20,670 --> 00:00:27,480
and then overloaded with information so

00:00:23,760 --> 00:00:30,630
I'll try to keep it simple so I'm Misaka

00:00:27,480 --> 00:00:34,469
Basinger deputy CTO and the vp of

00:00:30,630 --> 00:00:36,510
architecture w so - so my talk today is

00:00:34,469 --> 00:00:39,120
not about W so - but I'll give a quick

00:00:36,510 --> 00:00:42,600
brief about the organization that I work

00:00:39,120 --> 00:00:45,530
so we are a technology company and we

00:00:42,600 --> 00:00:48,149
provide a full stack of products that's

00:00:45,530 --> 00:00:51,930
ranging from API management into

00:00:48,149 --> 00:00:54,719
integration into the identity and all

00:00:51,930 --> 00:00:57,210
products released as open source

00:00:54,719 --> 00:00:59,940
offering license and a party to go to

00:00:57,210 --> 00:01:03,329
and if you go to wcco.com you can find

00:00:59,940 --> 00:01:07,260
more information so what I'm going to do

00:01:03,329 --> 00:01:10,229
today is to share some of the concepts

00:01:07,260 --> 00:01:13,710
about a project that I was working for a

00:01:10,229 --> 00:01:15,810
year or so so it's more of an

00:01:13,710 --> 00:01:19,530
architecture concept as well as it's

00:01:15,810 --> 00:01:21,360
related to DevOps as well so it connects

00:01:19,530 --> 00:01:25,680
basically the architect developer and

00:01:21,360 --> 00:01:28,710
the DevOps so I'll go in detail during

00:01:25,680 --> 00:01:30,270
my session so before jump into this

00:01:28,710 --> 00:01:33,990
session I'll give a quick introduction

00:01:30,270 --> 00:01:35,850
about myself so I'm born in Sri Lanka I

00:01:33,990 --> 00:01:38,579
don't know how many of you know about

00:01:35,850 --> 00:01:39,030
Sri Lanka it's a small island in Indian

00:01:38,579 --> 00:01:42,150
Ocean

00:01:39,030 --> 00:01:46,979
and I studied in Ireland and now living

00:01:42,150 --> 00:01:51,299
in San Francisco so I play basketball so

00:01:46,979 --> 00:01:54,149
these are my heroes and still I live

00:01:51,299 --> 00:01:56,960
next to the Levi Stadium so I follow NFL

00:01:54,149 --> 00:01:59,810
and my favorite team is 49ers and

00:01:56,960 --> 00:02:02,310
whatever happened with Linkin Park still

00:01:59,810 --> 00:02:06,930
70% of my audio library filled with

00:02:02,310 --> 00:02:09,509
Linkin Park songs and this is my family

00:02:06,930 --> 00:02:12,000
and this is the new addition to my

00:02:09,509 --> 00:02:13,290
family so that's my personal profile and

00:02:12,000 --> 00:02:14,670
then my

00:02:13,290 --> 00:02:17,280
professional profile started as a

00:02:14,670 --> 00:02:20,909
programmer and then became an architect

00:02:17,280 --> 00:02:23,159
and now working in the CTOs office but

00:02:20,909 --> 00:02:26,040
the common thing I contributed to

00:02:23,159 --> 00:02:27,569
open-source a lot as well as mainly

00:02:26,040 --> 00:02:29,760
worked on projects related to

00:02:27,569 --> 00:02:32,849
distributed computing and middleware so

00:02:29,760 --> 00:02:37,260
that's my professional profile so during

00:02:32,849 --> 00:02:40,109
this 35 to 40 minute minutes what I'm

00:02:37,260 --> 00:02:42,870
trying to do tell about this new

00:02:40,109 --> 00:02:45,450
architecture pattern and then why we

00:02:42,870 --> 00:02:47,909
created an architecture pattern as well

00:02:45,450 --> 00:02:50,189
as what it is and how we created it so

00:02:47,909 --> 00:02:54,659
basically walk you through that story

00:02:50,189 --> 00:02:57,060
and then share this information so how

00:02:54,659 --> 00:02:59,549
many architects in this room like not

00:02:57,060 --> 00:03:02,730
the title as an architect but the role

00:02:59,549 --> 00:03:04,980
you play as an architect okay so I get

00:03:02,730 --> 00:03:07,409
invited to a lot of architecture

00:03:04,980 --> 00:03:10,109
conferences to do this talk so people

00:03:07,409 --> 00:03:12,389
architects come to the room by looking

00:03:10,109 --> 00:03:14,489
at the title but I see this kind of

00:03:12,389 --> 00:03:16,980
feeling like whether this guy is smoking

00:03:14,489 --> 00:03:18,750
because everybody believed the current

00:03:16,980 --> 00:03:21,239
architecture patterns like microservices

00:03:18,750 --> 00:03:23,310
architecture cloud native architectures

00:03:21,239 --> 00:03:25,979
will establish and then can we solve all

00:03:23,310 --> 00:03:28,109
the problems so people question why you

00:03:25,979 --> 00:03:31,349
guys came up with this new architecture

00:03:28,109 --> 00:03:34,139
pattern but actually I'm was not smoking

00:03:31,349 --> 00:03:37,099
we had a really good set of reasons why

00:03:34,139 --> 00:03:39,750
we came up with this pattern surface

00:03:37,099 --> 00:03:41,909
motivation we had we identified there's

00:03:39,750 --> 00:03:44,310
a mismatch in between the existing

00:03:41,909 --> 00:03:47,970
architecture patterns as well as what

00:03:44,310 --> 00:03:51,269
architects are exactly looking at so

00:03:47,970 --> 00:03:53,489
that mismatch was the motivation that we

00:03:51,269 --> 00:03:57,989
had initially to come up with this

00:03:53,489 --> 00:03:59,669
concept and then we realize most of the

00:03:57,989 --> 00:04:02,699
architecture patterns exist our

00:03:59,669 --> 00:04:04,949
centralized and layered so the problem

00:04:02,699 --> 00:04:07,439
with the layered and centralized nature

00:04:04,949 --> 00:04:09,900
when you have different layers layers

00:04:07,439 --> 00:04:12,689
create gates not only at the technical

00:04:09,900 --> 00:04:14,759
level even at the team level there will

00:04:12,689 --> 00:04:16,560
be gates created then when you talk to

00:04:14,759 --> 00:04:18,630
another team and then try to get

00:04:16,560 --> 00:04:20,609
something done you have to wait so as

00:04:18,630 --> 00:04:21,989
example if you are a middle of a

00:04:20,609 --> 00:04:26,219
developer when you talk to the database

00:04:21,989 --> 00:04:27,180
team to get a space done in a data

00:04:26,219 --> 00:04:28,710
storage you have

00:04:27,180 --> 00:04:30,570
to it and then if you talk to the

00:04:28,710 --> 00:04:33,000
network level people and then get

00:04:30,570 --> 00:04:35,100
something done or a kind of punch a hole

00:04:33,000 --> 00:04:38,130
in the firewall so you need to wait so

00:04:35,100 --> 00:04:41,340
all these layers creating gates and then

00:04:38,130 --> 00:04:43,530
that slow down the productivity of each

00:04:41,340 --> 00:04:46,139
and every development team so this is

00:04:43,530 --> 00:04:49,620
one reason that we identify as a

00:04:46,139 --> 00:04:51,930
mismatch in the industry then the second

00:04:49,620 --> 00:04:54,120
thing I call it as like power point

00:04:51,930 --> 00:04:55,860
architects like when you talk to most of

00:04:54,120 --> 00:05:00,060
the architect they show nice diagrams

00:04:55,860 --> 00:05:01,949
very clean aligned very clear but if you

00:05:00,060 --> 00:05:04,080
look at the reality it's totally

00:05:01,949 --> 00:05:07,320
different it looks like this because we

00:05:04,080 --> 00:05:09,870
purchase number of databases number of

00:05:07,320 --> 00:05:12,449
application systems and we are still

00:05:09,870 --> 00:05:15,150
using it so it's not it doesn't look

00:05:12,449 --> 00:05:17,280
like the previous diagram that I showed

00:05:15,150 --> 00:05:19,919
so this is the reality that we are

00:05:17,280 --> 00:05:22,620
facing so that was another reason that

00:05:19,919 --> 00:05:25,740
we identified most of the enterprise

00:05:22,620 --> 00:05:28,050
require this balance of the green field

00:05:25,740 --> 00:05:33,270
and the brown field anybody in the room

00:05:28,050 --> 00:05:37,050
like completely in the green field ok

00:05:33,270 --> 00:05:39,599
whew ok but in most case I think we have

00:05:37,050 --> 00:05:41,669
to deal with the brown field and the

00:05:39,599 --> 00:05:44,699
green field and if you look at most of

00:05:41,669 --> 00:05:47,250
the enterprises bulk of the data and the

00:05:44,699 --> 00:05:50,130
systems are in the brown field site and

00:05:47,250 --> 00:05:53,360
new projects are getting started in the

00:05:50,130 --> 00:05:56,729
the the green field in so the the the

00:05:53,360 --> 00:05:58,280
motivation we had behind this most of

00:05:56,729 --> 00:06:00,900
the architecture patterns either

00:05:58,280 --> 00:06:03,539
addressing green field or brown field

00:06:00,900 --> 00:06:06,030
and it's really difficult to find

00:06:03,539 --> 00:06:07,590
something that can address both so we

00:06:06,030 --> 00:06:09,870
thought of whatever we are going to

00:06:07,590 --> 00:06:14,070
introduce should address both spectrums

00:06:09,870 --> 00:06:16,740
and then provide flexibility to use

00:06:14,070 --> 00:06:18,720
legacy systems as well as the green

00:06:16,740 --> 00:06:20,870
field systems like micro services and

00:06:18,720 --> 00:06:24,840
cloud native applications and so forth

00:06:20,870 --> 00:06:27,330
then the next thing we identified most

00:06:24,840 --> 00:06:29,759
of the reference architectures are not

00:06:27,330 --> 00:06:31,680
reference architectures those are

00:06:29,759 --> 00:06:34,320
reference implementations why I claim

00:06:31,680 --> 00:06:37,440
that because those architecture patterns

00:06:34,320 --> 00:06:40,620
define based on a specific technology

00:06:37,440 --> 00:06:42,150
not only a specific technologies

00:06:40,620 --> 00:06:45,210
most of the architecture patterns are

00:06:42,150 --> 00:06:47,880
based on a specific vendor like how you

00:06:45,210 --> 00:06:50,550
can press find a solution or how you can

00:06:47,880 --> 00:06:53,040
build a solution by using window X

00:06:50,550 --> 00:06:55,949
product in or something like that so

00:06:53,040 --> 00:06:58,770
those are very vendor and technology

00:06:55,949 --> 00:07:01,800
centric so we thought of it strong that

00:06:58,770 --> 00:07:04,169
the the reference architecture should be

00:07:01,800 --> 00:07:07,350
a technology neutral as well as window

00:07:04,169 --> 00:07:09,449
neutral based on your expectation so

00:07:07,350 --> 00:07:10,770
based on your desired technologies of

00:07:09,449 --> 00:07:12,900
the things that you are planning to use

00:07:10,770 --> 00:07:15,479
in future you should be able to plug

00:07:12,900 --> 00:07:17,370
those into that particular architecture

00:07:15,479 --> 00:07:20,280
pattern so that was another motivation

00:07:17,370 --> 00:07:23,460
we had during this exercise then the

00:07:20,280 --> 00:07:25,229
second next motivation we had the under

00:07:23,460 --> 00:07:27,030
utilization of the technologies because

00:07:25,229 --> 00:07:29,310
I talked a lot of architects and then

00:07:27,030 --> 00:07:32,490
when I have this discussion they say

00:07:29,310 --> 00:07:34,650
okay I have a Kafka broker running but I

00:07:32,490 --> 00:07:36,900
can't use it because the architecture

00:07:34,650 --> 00:07:38,970
isn't supportive and some people say ok

00:07:36,900 --> 00:07:41,010
I am running a communities cluster but

00:07:38,970 --> 00:07:43,020
most of my applications I can't employ

00:07:41,010 --> 00:07:45,060
there because the architecture doesn't

00:07:43,020 --> 00:07:46,650
support so it's like like you are

00:07:45,060 --> 00:07:48,660
keeping your best players on the bench

00:07:46,650 --> 00:07:50,430
when you are losing the game that these

00:07:48,660 --> 00:07:52,710
architects couldn't utilize the

00:07:50,430 --> 00:07:56,130
technology based on the the patterns

00:07:52,710 --> 00:07:59,280
that they were using then then we found

00:07:56,130 --> 00:08:02,669
another reason that there's a mismatch

00:07:59,280 --> 00:08:04,710
or there's a disconnect in between the

00:08:02,669 --> 00:08:06,720
architecture development and the

00:08:04,710 --> 00:08:08,789
deployment architect will architect

00:08:06,720 --> 00:08:11,070
something and a developer will go and

00:08:08,789 --> 00:08:13,680
develop something different and the

00:08:11,070 --> 00:08:15,780
deployment engineer or the DevOps person

00:08:13,680 --> 00:08:17,000
will go and deploy something completely

00:08:15,780 --> 00:08:19,979
different because they don't have

00:08:17,000 --> 00:08:22,169
something common that they can take from

00:08:19,979 --> 00:08:24,870
the architecture into development into

00:08:22,169 --> 00:08:26,820
deployment so we thought of we need some

00:08:24,870 --> 00:08:29,430
connectivity in between these three and

00:08:26,820 --> 00:08:30,990
then if you look at the new concepts

00:08:29,430 --> 00:08:34,560
like a full stack developer who's

00:08:30,990 --> 00:08:36,990
playing most of the the kind of

00:08:34,560 --> 00:08:38,760
combination of these three roles need

00:08:36,990 --> 00:08:42,120
something to connect and take it from

00:08:38,760 --> 00:08:44,580
the end-to-end application lifecycle as

00:08:42,120 --> 00:08:48,209
well so that was another reason are we

00:08:44,580 --> 00:08:50,250
identified then the another thing

00:08:48,209 --> 00:08:52,709
created with the micro services now you

00:08:50,250 --> 00:08:54,360
have a lot of moving components so you

00:08:52,709 --> 00:08:56,940
need some kind of dependence

00:08:54,360 --> 00:08:58,860
management and then not a heavyweight

00:08:56,940 --> 00:09:01,320
governance but you need some lightweight

00:08:58,860 --> 00:09:03,329
governance to explain this I think this

00:09:01,320 --> 00:09:06,959
diagram most of you are familiar with

00:09:03,329 --> 00:09:10,440
this how uber the the micro-services

00:09:06,959 --> 00:09:12,959
looks like so when you are building 10

00:09:10,440 --> 00:09:15,300
to the 100 micro services you might be

00:09:12,959 --> 00:09:17,850
ok but we need to grow up more than that

00:09:15,300 --> 00:09:19,740
it's really hard to manage so once I

00:09:17,850 --> 00:09:21,959
since you have this a lot of moving

00:09:19,740 --> 00:09:24,600
components now you need to have some

00:09:21,959 --> 00:09:26,880
kind of dependency management so how we

00:09:24,600 --> 00:09:31,649
can architectural II address that was

00:09:26,880 --> 00:09:34,560
another motivation that we had so those

00:09:31,649 --> 00:09:36,420
were the the real reasons behind this

00:09:34,560 --> 00:09:37,920
exercise but before jump into the

00:09:36,420 --> 00:09:39,630
architecture let's look at like what

00:09:37,920 --> 00:09:43,200
kind of architecture patterns we use

00:09:39,630 --> 00:09:45,120
during last two decades so the the first

00:09:43,200 --> 00:09:47,910
we started with the monolith like all

00:09:45,120 --> 00:09:50,760
the user interfaces business logic and

00:09:47,910 --> 00:09:53,730
data were together and then we moved to

00:09:50,760 --> 00:09:55,500
the 2t architecture the with the data

00:09:53,730 --> 00:09:58,380
improvement of the data technologies

00:09:55,500 --> 00:10:00,329
data got differ from the the user

00:09:58,380 --> 00:10:02,370
interface and the business logic and I

00:10:00,329 --> 00:10:04,470
think the most interesting IRRI was the

00:10:02,370 --> 00:10:07,470
3t architecture when I started my career

00:10:04,470 --> 00:10:09,600
in that time that we divided the user

00:10:07,470 --> 00:10:12,060
interface business logic and the data

00:10:09,600 --> 00:10:14,100
and there were a bunch of sub patterns

00:10:12,060 --> 00:10:18,240
came with that the most popular pattern

00:10:14,100 --> 00:10:21,360
is MVC and then M ec2 that the really

00:10:18,240 --> 00:10:23,640
middle way I came into the this equation

00:10:21,360 --> 00:10:26,010
and then started doing messaging in

00:10:23,640 --> 00:10:28,380
between the user interface and the

00:10:26,010 --> 00:10:30,839
business logic and the service oriented

00:10:28,380 --> 00:10:32,880
architecture came that wrapped all the

00:10:30,839 --> 00:10:36,089
business logic around services and the

00:10:32,880 --> 00:10:38,510
api's and then we are moving into a more

00:10:36,089 --> 00:10:40,350
segmented architecture that's with the

00:10:38,510 --> 00:10:42,209
microcircuitry so what I want to

00:10:40,350 --> 00:10:45,060
highlight is the layered architecture

00:10:42,209 --> 00:10:47,370
move towards more segmented architecture

00:10:45,060 --> 00:10:52,170
with these patterns that we used during

00:10:47,370 --> 00:10:54,720
last two decades so this is one the

00:10:52,170 --> 00:10:58,140
layered architecture diagram actually I

00:10:54,720 --> 00:10:59,370
came up with in 2012 so if you are

00:10:58,140 --> 00:11:02,370
familiar with the layered architecture

00:10:59,370 --> 00:11:05,339
usually it says a one-dimensional thing

00:11:02,370 --> 00:11:07,860
but we did a little bit different by

00:11:05,339 --> 00:11:10,860
bringing another dimension with the

00:11:07,860 --> 00:11:13,890
quality of services and the the

00:11:10,860 --> 00:11:16,380
application lifecycle stages so this is

00:11:13,890 --> 00:11:18,209
a very useful diagram that we used to

00:11:16,380 --> 00:11:21,630
have very productive discussions with

00:11:18,209 --> 00:11:25,709
lot of customers or the users as well as

00:11:21,630 --> 00:11:27,209
still some of the users are still use in

00:11:25,709 --> 00:11:29,310
this architecture and then building

00:11:27,209 --> 00:11:31,290
application I'm not telling it's

00:11:29,310 --> 00:11:33,089
completely we can ignore this most of

00:11:31,290 --> 00:11:35,760
the some of the enterprises can still

00:11:33,089 --> 00:11:38,370
benefit out of this but as I said this

00:11:35,760 --> 00:11:43,310
was a very useful diagram and we did lot

00:11:38,370 --> 00:11:43,310
of systems built on top of that but in

00:11:43,370 --> 00:11:50,579
2014 I think around no actually 2013

00:11:46,640 --> 00:11:53,550
December we had this issue with one of a

00:11:50,579 --> 00:11:56,850
larger customer who's based in Seattle

00:11:53,550 --> 00:11:59,880
so they were working on full agile mode

00:11:56,850 --> 00:12:02,490
the entire process and the teams were

00:11:59,880 --> 00:12:04,620
operated in a very agile fashion a buddy

00:12:02,490 --> 00:12:08,760
system went into production after three

00:12:04,620 --> 00:12:11,370
years with around 100 API 60 message

00:12:08,760 --> 00:12:13,470
flows in number of databases connected

00:12:11,370 --> 00:12:15,060
and then they wanted multi-tenancy from

00:12:13,470 --> 00:12:17,610
day one and they went into production

00:12:15,060 --> 00:12:20,600
with three active tenants with the first

00:12:17,610 --> 00:12:22,920
release so but then again after the

00:12:20,600 --> 00:12:24,720
project went into production after three

00:12:22,920 --> 00:12:27,000
years the business rejected the project

00:12:24,720 --> 00:12:29,220
because as usual the business

00:12:27,000 --> 00:12:33,079
requirements and the technique the

00:12:29,220 --> 00:12:35,640
implemented project was not matching the

00:12:33,079 --> 00:12:37,620
expectations so we were wondering now

00:12:35,640 --> 00:12:40,649
they were following agile principles

00:12:37,620 --> 00:12:41,370
operate as a true agile team so what

00:12:40,649 --> 00:12:44,550
went wrong

00:12:41,370 --> 00:12:47,880
so when we analyzed in deep we

00:12:44,550 --> 00:12:50,040
identified even they operated as a agile

00:12:47,880 --> 00:12:52,500
team and then follow the agile

00:12:50,040 --> 00:12:55,170
principles architecture was not agile

00:12:52,500 --> 00:12:56,760
enough for them to be truly agile so

00:12:55,170 --> 00:12:59,220
they were kind of following this

00:12:56,760 --> 00:13:01,380
waterfall agile kind of a concept so

00:12:59,220 --> 00:13:03,390
that was the main reason for this

00:13:01,380 --> 00:13:06,420
failure so this was eye-opener for us

00:13:03,390 --> 00:13:09,060
then we thought ok it's not only the way

00:13:06,420 --> 00:13:11,070
teams should work the architecture

00:13:09,060 --> 00:13:14,040
should change and then we had to come up

00:13:11,070 --> 00:13:16,069
with something that can make these teams

00:13:14,040 --> 00:13:19,470
productive so that was the first

00:13:16,069 --> 00:13:21,820
initiative or the eye-opener for us the

00:13:19,470 --> 00:13:23,740
same time coincidentally

00:13:21,820 --> 00:13:26,200
the microservices came into the beach

00:13:23,740 --> 00:13:29,590
Chester around 2012 so they have a lot

00:13:26,200 --> 00:13:32,290
of theory behind microservices came but

00:13:29,590 --> 00:13:33,940
we were carefully looking at who's using

00:13:32,290 --> 00:13:36,580
it and how people are building

00:13:33,940 --> 00:13:39,430
successful systems and interestingly we

00:13:36,580 --> 00:13:42,220
identified the people who were early

00:13:39,430 --> 00:13:45,190
adopters of these this technology like

00:13:42,220 --> 00:13:47,920
Netflix who were so and so forth they

00:13:45,190 --> 00:13:50,290
they wrote a lot of micro services but

00:13:47,920 --> 00:13:53,530
started creating a layer on top of that

00:13:50,290 --> 00:13:55,930
so Netflix call it as a PS and then uber

00:13:53,530 --> 00:13:58,480
call it as HD a tray same concept in a

00:13:55,930 --> 00:14:00,550
different name and eBay call it as API

00:13:58,480 --> 00:14:02,740
facade even garden I introduced this

00:14:00,550 --> 00:14:05,080
concept called mini service on top of

00:14:02,740 --> 00:14:07,000
the micro service so it became a common

00:14:05,080 --> 00:14:10,630
pattern and then we walked to the

00:14:07,000 --> 00:14:12,820
customers who's using micro services at

00:14:10,630 --> 00:14:15,190
that time and we identified an

00:14:12,820 --> 00:14:18,550
architecture like this so you have the

00:14:15,190 --> 00:14:21,040
layers and then you have micro services

00:14:18,550 --> 00:14:23,290
written but what happened micro services

00:14:21,040 --> 00:14:26,320
became another layer of that same

00:14:23,290 --> 00:14:29,440
layered architecture because they have

00:14:26,320 --> 00:14:31,510
to use other components like the API APS

00:14:29,440 --> 00:14:34,090
that they already using analytics

00:14:31,510 --> 00:14:36,760
security governance and the data that

00:14:34,090 --> 00:14:38,800
already flow in the inside the

00:14:36,760 --> 00:14:41,830
enterprise and then other tools around

00:14:38,800 --> 00:14:44,050
that so this was the the architecture

00:14:41,830 --> 00:14:46,780
that most of these customers were using

00:14:44,050 --> 00:14:49,410
so we call it as a more segmented

00:14:46,780 --> 00:14:52,170
architecture because what happened with

00:14:49,410 --> 00:14:56,260
the the traditional layered architecture

00:14:52,170 --> 00:14:58,000
the technically the components or the

00:14:56,260 --> 00:15:01,470
runtimes were deployed in different

00:14:58,000 --> 00:15:04,690
layers but with the micro services

00:15:01,470 --> 00:15:08,620
approach people asked permission from

00:15:04,690 --> 00:15:11,970
that central the infrastructure team to

00:15:08,620 --> 00:15:14,470
have access to portions of different

00:15:11,970 --> 00:15:17,230
portions of each and every layer for

00:15:14,470 --> 00:15:19,810
them to deploy the staff manage and run

00:15:17,230 --> 00:15:23,200
so they use different kind of technology

00:15:19,810 --> 00:15:25,390
some got like specific spaces as well as

00:15:23,200 --> 00:15:27,220
some got like a concept like

00:15:25,390 --> 00:15:30,100
multi-tenancy used and then they got a

00:15:27,220 --> 00:15:32,740
tenant inside this particular layer so

00:15:30,100 --> 00:15:35,350
it it move a little bit better than the

00:15:32,740 --> 00:15:37,210
traditional layered architecture we

00:15:35,350 --> 00:15:38,560
started calling as a segmented

00:15:37,210 --> 00:15:40,930
architectures these are this was one

00:15:38,560 --> 00:15:43,480
approach and some of the people they use

00:15:40,930 --> 00:15:46,300
a little different approach than the

00:15:43,480 --> 00:15:48,310
entire platform duplicated and then

00:15:46,300 --> 00:15:51,640
deployed for each and every business

00:15:48,310 --> 00:15:54,490
unit so some of the things like CI CD

00:15:51,640 --> 00:15:56,800
processors and then the uses stores and

00:15:54,490 --> 00:15:59,230
so forth were centralized but each and

00:15:56,800 --> 00:16:02,830
every business unit got their own

00:15:59,230 --> 00:16:04,750
deployment and started deploying the

00:16:02,830 --> 00:16:07,390
stuff and managing running inside that

00:16:04,750 --> 00:16:09,430
their particular space but still it was

00:16:07,390 --> 00:16:12,420
a layered architecture inside each and

00:16:09,430 --> 00:16:16,840
every segment we had in this particular

00:16:12,420 --> 00:16:19,930
a pattern so we hit kind of fan didn't

00:16:16,840 --> 00:16:22,450
now it's moving with micro services it's

00:16:19,930 --> 00:16:24,970
getting segmented but still the layered

00:16:22,450 --> 00:16:27,460
architecture is working on so we thought

00:16:24,970 --> 00:16:29,560
ok this is not going to work and then we

00:16:27,460 --> 00:16:31,540
need to start something fresh and then

00:16:29,560 --> 00:16:38,020
look different so we started this

00:16:31,540 --> 00:16:41,650
project in 2018 February so I'll tell a

00:16:38,020 --> 00:16:46,140
little bit about how we came with this

00:16:41,650 --> 00:16:49,150
concept so the anybody knows this guy

00:16:46,140 --> 00:16:51,580
Phil Jackson ok so the moral of the

00:16:49,150 --> 00:16:54,100
story basically a coach can build a

00:16:51,580 --> 00:16:56,700
better players as well as they can win

00:16:54,100 --> 00:17:00,910
championships I think P Jackson won 13

00:16:56,700 --> 00:17:03,310
championships if I'm wrong so what I did

00:17:00,910 --> 00:17:06,100
first got a coach so this is my coach is

00:17:03,310 --> 00:17:08,500
my boss our CTO Paul Fremantle's so I

00:17:06,100 --> 00:17:11,110
started brainstorming with him how we

00:17:08,500 --> 00:17:12,790
can build a new concept and then find

00:17:11,110 --> 00:17:15,370
answers to the problems that we have

00:17:12,790 --> 00:17:17,439
identified earlier so what we did as

00:17:15,370 --> 00:17:19,150
usually yes we did a lot of research and

00:17:17,439 --> 00:17:21,070
then read a lot a lot of papers

00:17:19,150 --> 00:17:23,140
specially published by different

00:17:21,070 --> 00:17:25,990
universities and then we read different

00:17:23,140 --> 00:17:27,780
books and Paul is based in London I am

00:17:25,990 --> 00:17:29,620
based in San Francisco we did like

00:17:27,780 --> 00:17:32,290
back-and-forth trips did a lot of

00:17:29,620 --> 00:17:35,260
whiteboard sessions but most importantly

00:17:32,290 --> 00:17:38,200
the exercise we did we talked to 500

00:17:35,260 --> 00:17:40,210
plus customers ws2 is having and then we

00:17:38,200 --> 00:17:43,150
asked them what are the real issues that

00:17:40,210 --> 00:17:45,820
you are facing and then I try to

00:17:43,150 --> 00:17:48,280
identify what's really happening in the

00:17:45,820 --> 00:17:49,070
industry and to have a more pragmatic

00:17:48,280 --> 00:17:52,160
approach so though

00:17:49,070 --> 00:17:54,830
sadi exercises we did then after that we

00:17:52,160 --> 00:17:57,020
narrow down our research into few areas

00:17:54,830 --> 00:17:59,150
the first thing is the quantum computing

00:17:57,020 --> 00:18:01,910
we identified there are really good

00:17:59,150 --> 00:18:03,920
concepts behind quantum computing that

00:18:01,910 --> 00:18:06,770
we can use for a architecture pattern

00:18:03,920 --> 00:18:09,620
then we identified communities got some

00:18:06,770 --> 00:18:12,050
really good concepts especially when you

00:18:09,620 --> 00:18:16,160
go for a distributed architecture then

00:18:12,050 --> 00:18:18,310
for some reason we started reading about

00:18:16,160 --> 00:18:21,550
biology as well as system biology

00:18:18,310 --> 00:18:24,260
because we identified there are some

00:18:21,550 --> 00:18:26,030
concepts behind a system biology and

00:18:24,260 --> 00:18:28,520
biology that we can reuse in our

00:18:26,030 --> 00:18:30,950
architecture pattern so those were the

00:18:28,520 --> 00:18:35,570
areas that we kind of narrow down our

00:18:30,950 --> 00:18:38,380
research then another exercise we did we

00:18:35,570 --> 00:18:41,480
try to looked at what's the business

00:18:38,380 --> 00:18:43,610
expectation and the technical

00:18:41,480 --> 00:18:46,540
expectation of services and micro

00:18:43,610 --> 00:18:49,850
services again to look at what's the

00:18:46,540 --> 00:18:52,250
pragmatic side of the services and micro

00:18:49,850 --> 00:18:55,070
services that we are writing so if you

00:18:52,250 --> 00:18:57,350
look at a service from the technical

00:18:55,070 --> 00:18:59,920
definition it's just a set of code that

00:18:57,350 --> 00:19:02,780
you annotate or use the language

00:18:59,920 --> 00:19:05,420
capabilities and make it network network

00:19:02,780 --> 00:19:08,540
accessible by using a specific protocol

00:19:05,420 --> 00:19:10,460
and I mean a transport and a message

00:19:08,540 --> 00:19:12,950
type so if you look at the business

00:19:10,460 --> 00:19:15,220
logic it's not a big difference that you

00:19:12,950 --> 00:19:19,240
just annotate annotate it and make a

00:19:15,220 --> 00:19:22,640
service but if you look at the business

00:19:19,240 --> 00:19:24,650
definition or the business expectation

00:19:22,640 --> 00:19:26,960
from a service it has to provide a

00:19:24,650 --> 00:19:29,120
solution for the for a business problem

00:19:26,960 --> 00:19:31,430
so what happened in the service-oriented

00:19:29,120 --> 00:19:34,060
architecture era that people started

00:19:31,430 --> 00:19:37,420
writing different services and they

00:19:34,060 --> 00:19:40,070
started writing composite services or

00:19:37,420 --> 00:19:42,530
put a gateway on top of that as an

00:19:40,070 --> 00:19:45,050
example it can be API gateway or a ESB

00:19:42,530 --> 00:19:47,120
kind of thing and then they kind of

00:19:45,050 --> 00:19:49,640
connect these different technical

00:19:47,120 --> 00:19:52,220
services and started exposing a

00:19:49,640 --> 00:19:54,290
meaningful API out of that particular

00:19:52,220 --> 00:19:57,260
gateway or the composite service to

00:19:54,290 --> 00:20:00,020
address that requirement of providing a

00:19:57,260 --> 00:20:01,880
solution for a business problem so then

00:20:00,020 --> 00:20:02,900
the the if you look at the micro

00:20:01,880 --> 00:20:04,940
services

00:20:02,900 --> 00:20:07,250
that's not much different when you write

00:20:04,940 --> 00:20:10,460
some set of code and then you annotate

00:20:07,250 --> 00:20:13,370
it and make it network Li and network

00:20:10,460 --> 00:20:15,260
accessible interface so the the

00:20:13,370 --> 00:20:17,720
difference is basically you divide that

00:20:15,260 --> 00:20:19,880
a monolid service into different parts

00:20:17,720 --> 00:20:21,620
based on the scope a lot of people think

00:20:19,880 --> 00:20:23,780
it's size but it's not the size of the

00:20:21,620 --> 00:20:27,200
scope based on the scope you divide it

00:20:23,780 --> 00:20:29,570
but you provide a same kind of a code in

00:20:27,200 --> 00:20:31,880
the micro services world as well so if

00:20:29,570 --> 00:20:35,210
you look at the business definition

00:20:31,880 --> 00:20:37,850
again the business doesn't care whether

00:20:35,210 --> 00:20:40,220
you write a micro service Omega service

00:20:37,850 --> 00:20:43,190
or what kind of a service what the

00:20:40,220 --> 00:20:45,710
business cast is it it's expecting some

00:20:43,190 --> 00:20:47,420
kind of business capability so as a

00:20:45,710 --> 00:20:49,940
result what happened in the micro

00:20:47,420 --> 00:20:52,520
services world again you started writing

00:20:49,940 --> 00:20:56,240
small services or micro services and

00:20:52,520 --> 00:20:58,700
then putting the composite services so

00:20:56,240 --> 00:21:00,620
that's where the Netflix API comes into

00:20:58,700 --> 00:21:02,570
the picture and then the gartner the

00:21:00,620 --> 00:21:04,820
mini services come into the picture that

00:21:02,570 --> 00:21:07,070
you connect different technical services

00:21:04,820 --> 00:21:10,250
and provide business capabilities so

00:21:07,070 --> 00:21:13,070
that's what we identify what's really

00:21:10,250 --> 00:21:16,580
happening in the industry so that was

00:21:13,070 --> 00:21:18,980
the basic concept of this architecture

00:21:16,580 --> 00:21:21,320
pattern now you have set of micro

00:21:18,980 --> 00:21:23,540
services and then you have a composite

00:21:21,320 --> 00:21:25,820
service or a gateway on top of it and

00:21:23,540 --> 00:21:29,690
exposing these capabilities so what we

00:21:25,820 --> 00:21:33,290
did we group this set of micro services

00:21:29,690 --> 00:21:35,900
into a concept called sell so that was

00:21:33,290 --> 00:21:38,570
the beginning and then that's a building

00:21:35,900 --> 00:21:42,410
block of this a particular architecture

00:21:38,570 --> 00:21:45,560
pattern so let's begin deep into the the

00:21:42,410 --> 00:21:47,780
concept and so why we named it as sale

00:21:45,560 --> 00:21:50,930
because we thought sale is the

00:21:47,780 --> 00:21:54,410
foundation for everything human beings

00:21:50,930 --> 00:21:56,450
and then other living stuff so we

00:21:54,410 --> 00:21:58,930
thought that's a really good concept and

00:21:56,450 --> 00:22:02,150
even if you look at and if you are a

00:21:58,930 --> 00:22:03,730
person who's thorough in biology in a

00:22:02,150 --> 00:22:06,470
cell there's something called a membrane

00:22:03,730 --> 00:22:08,480
similar to the Gateway that I explained

00:22:06,470 --> 00:22:10,970
earlier that will control the

00:22:08,480 --> 00:22:13,490
connectivity and then it contains

00:22:10,970 --> 00:22:15,590
different components inside that

00:22:13,490 --> 00:22:16,340
particular sales and sales get connected

00:22:15,590 --> 00:22:19,039
to each other

00:22:16,340 --> 00:22:21,200
and then provide some capability so we

00:22:19,039 --> 00:22:23,029
thought of it's a really good concept

00:22:21,200 --> 00:22:27,580
that we can map into an technical

00:22:23,029 --> 00:22:32,000
architecture so the if you go into the

00:22:27,580 --> 00:22:33,710
concept the atomic unit in this

00:22:32,000 --> 00:22:37,039
architecture pattern we call it as a

00:22:33,710 --> 00:22:39,409
component the component can be anything

00:22:37,039 --> 00:22:41,870
like any runtime that you run in your

00:22:39,409 --> 00:22:45,320
data center or in a cloud infrastructure

00:22:41,870 --> 00:22:48,020
so it can be a service it can be a micro

00:22:45,320 --> 00:22:50,840
service it can be a gateway it can be a

00:22:48,020 --> 00:22:53,750
database message broker identity server

00:22:50,840 --> 00:22:56,990
whatever that you run in your your

00:22:53,750 --> 00:23:02,779
infrastructure we call it as a component

00:22:56,990 --> 00:23:06,230
so set of components a set of components

00:23:02,779 --> 00:23:08,539
we call it as a cell and then cell

00:23:06,230 --> 00:23:10,880
contains a cell gateway so it's

00:23:08,539 --> 00:23:14,120
basically the architecture building

00:23:10,880 --> 00:23:16,870
block of this particular a concept so I

00:23:14,120 --> 00:23:19,870
will begin deep into each and every

00:23:16,870 --> 00:23:23,390
components as well as the concept behind

00:23:19,870 --> 00:23:27,169
the boundary so and so forth in the next

00:23:23,390 --> 00:23:30,260
few slides so the the the the one thing

00:23:27,169 --> 00:23:32,750
that we identify what's the relationship

00:23:30,260 --> 00:23:35,539
between a component and a cell in most

00:23:32,750 --> 00:23:37,640
cases it's one-to-many one cell contains

00:23:35,539 --> 00:23:39,590
many components but there can be

00:23:37,640 --> 00:23:42,440
situations you will have only one

00:23:39,590 --> 00:23:45,200
component as example a database or a

00:23:42,440 --> 00:23:48,169
message broker that kind of a shareable

00:23:45,200 --> 00:23:51,740
component human identity server can go

00:23:48,169 --> 00:23:54,620
into one-to-one ratio but I'd say more

00:23:51,740 --> 00:23:57,640
than eighty percent will be one-to-many

00:23:54,620 --> 00:24:01,460
category that we will get as the ratio

00:23:57,640 --> 00:24:03,440
then how the cells will get connected

00:24:01,460 --> 00:24:05,059
because now you have components inside

00:24:03,440 --> 00:24:07,309
the cell that you need to connect and

00:24:05,059 --> 00:24:08,929
then you have a gateway on top of the

00:24:07,309 --> 00:24:12,380
cell that you need to connect with each

00:24:08,929 --> 00:24:15,649
and every cell so we use these common

00:24:12,380 --> 00:24:17,299
concepts I think these are like a very

00:24:15,649 --> 00:24:20,120
popular concept these days especially

00:24:17,299 --> 00:24:21,710
with the service mesh concept but if you

00:24:20,120 --> 00:24:24,260
are not familiar then I will use this

00:24:21,710 --> 00:24:26,870
analogy of rail track and trains to

00:24:24,260 --> 00:24:29,330
explain it so in this concept you get a

00:24:26,870 --> 00:24:30,080
control plane that is basically the

00:24:29,330 --> 00:24:32,870
signaling

00:24:30,080 --> 00:24:35,630
the network in this analogy the straight

00:24:32,870 --> 00:24:38,510
track is the control plane and then the

00:24:35,630 --> 00:24:41,600
data plane is the actual the channel

00:24:38,510 --> 00:24:44,450
that sent the messages back and forth in

00:24:41,600 --> 00:24:46,940
this case the Train is the data plane

00:24:44,450 --> 00:24:48,950
and somewhere you will get a control

00:24:46,940 --> 00:24:51,260
center that control the Train and the

00:24:48,950 --> 00:24:53,540
player tracks so that is basically the

00:24:51,260 --> 00:24:55,610
management plane so we use these three

00:24:53,540 --> 00:24:57,860
concepts while building the

00:24:55,610 --> 00:25:00,230
communication in-between inter-cell

00:24:57,860 --> 00:25:02,930
communication as well as intra cell

00:25:00,230 --> 00:25:05,030
communication so if you look at in this

00:25:02,930 --> 00:25:07,250
concept so if you are familiar with

00:25:05,030 --> 00:25:10,490
service mesh it's the easy to understand

00:25:07,250 --> 00:25:13,640
but this is a kind of service mesh plus

00:25:10,490 --> 00:25:16,160
plus because you get a control plane and

00:25:13,640 --> 00:25:18,350
a data plane inside the cell and then

00:25:16,160 --> 00:25:21,290
you get a control plane data plane and a

00:25:18,350 --> 00:25:26,360
management plane as in outside the cells

00:25:21,290 --> 00:25:28,730
as well so we call this the inside cell

00:25:26,360 --> 00:25:32,270
planes as the local mesh and then

00:25:28,730 --> 00:25:34,700
outside we call it as a global mesh so

00:25:32,270 --> 00:25:37,910
those are the two components that we get

00:25:34,700 --> 00:25:44,050
in it helps to do the communication

00:25:37,910 --> 00:25:47,540
between components and cells then the

00:25:44,050 --> 00:25:50,660
one rule is all the ingress calls to a

00:25:47,540 --> 00:25:53,210
cell should come through the gateway so

00:25:50,660 --> 00:25:55,250
that's a fundamental rule but if you are

00:25:53,210 --> 00:25:57,320
doing an egress call you can use the

00:25:55,250 --> 00:25:59,540
patterns like side cried after an

00:25:57,320 --> 00:26:02,030
ambassador each and every components

00:25:59,540 --> 00:26:06,470
will do outbound call but it will go and

00:26:02,030 --> 00:26:08,810
hit one gateway in another cell so the

00:26:06,470 --> 00:26:11,480
communication will always happen through

00:26:08,810 --> 00:26:14,390
some kind of a gateway in top of one of

00:26:11,480 --> 00:26:16,220
these cells so that's how the the cell

00:26:14,390 --> 00:26:18,350
communication happened the ingress and

00:26:16,220 --> 00:26:22,730
egress communication happen in the

00:26:18,350 --> 00:26:24,740
architecture then it's becoming API it

00:26:22,730 --> 00:26:28,370
has become API centric architecture

00:26:24,740 --> 00:26:30,470
because the the the component to

00:26:28,370 --> 00:26:33,250
component communication happens to some

00:26:30,470 --> 00:26:35,570
kind of an API and then the

00:26:33,250 --> 00:26:38,450
functionality you expose from the cell

00:26:35,570 --> 00:26:42,200
gateway expose it as a API but it's not

00:26:38,450 --> 00:26:43,850
only restful api that we think there are

00:26:42,200 --> 00:26:46,549
two types of aps like

00:26:43,850 --> 00:26:50,210
Poulet PS that stressful expose using

00:26:46,549 --> 00:26:53,539
HTTP OG RPC and then the push ApS can be

00:26:50,210 --> 00:26:56,990
venting or streaming using different

00:26:53,539 --> 00:26:59,500
kind of protocols so one of these type

00:26:56,990 --> 00:27:02,120
of ApS can be used to expose

00:26:59,500 --> 00:27:06,049
capabilities from a component Oh from a

00:27:02,120 --> 00:27:08,330
cell gateway so technically it is a more

00:27:06,049 --> 00:27:11,140
ap eccentric architecture that you can

00:27:08,330 --> 00:27:15,020
communicate in between cells as well as

00:27:11,140 --> 00:27:18,590
components then the Gateway pattern is

00:27:15,020 --> 00:27:20,539
key here because it helps to enforce

00:27:18,590 --> 00:27:23,030
policies because as I explained earlier

00:27:20,539 --> 00:27:24,770
even you do a grace call from a

00:27:23,030 --> 00:27:28,130
component it will go and hit another

00:27:24,770 --> 00:27:31,610
cell gateway so you can put policies at

00:27:28,130 --> 00:27:33,770
the gateway level and as a result you

00:27:31,610 --> 00:27:36,140
get observability automatically because

00:27:33,770 --> 00:27:38,030
you can enable observability at the cell

00:27:36,140 --> 00:27:39,490
Gateway level and then start capturing

00:27:38,030 --> 00:27:41,659
information and feed into a

00:27:39,490 --> 00:27:44,210
observability layer so those are the

00:27:41,659 --> 00:27:47,090
advantages that you are getting by using

00:27:44,210 --> 00:27:50,049
this gateway pattern then the security

00:27:47,090 --> 00:27:54,140
of a cell the two faults first thing

00:27:50,049 --> 00:27:56,900
some cells can be a self managed like

00:27:54,140 --> 00:27:59,630
all the security aachen scan issued by

00:27:56,900 --> 00:28:02,960
particular cell within the STS inside

00:27:59,630 --> 00:28:05,120
the cell but in most cases the STS

00:28:02,960 --> 00:28:07,669
inside the cell that remains in the

00:28:05,120 --> 00:28:10,370
control plane of the cell will go to the

00:28:07,669 --> 00:28:13,130
global control plane and there will be a

00:28:10,370 --> 00:28:15,440
IDP at the global control plane and get

00:28:13,130 --> 00:28:17,590
the additional information required to

00:28:15,440 --> 00:28:20,360
make a authorization authentication

00:28:17,590 --> 00:28:22,940
decision within the cell and to optimize

00:28:20,360 --> 00:28:24,710
the performance you can cache most of

00:28:22,940 --> 00:28:27,530
the decisions within the cells so that

00:28:24,710 --> 00:28:30,590
is how this security works in the cells

00:28:27,530 --> 00:28:32,900
I think this is a the area that we have

00:28:30,590 --> 00:28:35,150
to get in detail so I am working with

00:28:32,900 --> 00:28:37,760
one of the security architects to

00:28:35,150 --> 00:28:40,820
publish another paper on sale security

00:28:37,760 --> 00:28:45,710
and it will be available soon so that's

00:28:40,820 --> 00:28:47,600
where the security goes then the

00:28:45,710 --> 00:28:49,190
developer experience of pasol because

00:28:47,600 --> 00:28:51,380
that's the key like it can come as

00:28:49,190 --> 00:28:53,570
architecture pattern but developers they

00:28:51,380 --> 00:28:56,000
have to be productive in this pattern so

00:28:53,570 --> 00:28:57,320
we identify different kind of scenarios

00:28:56,000 --> 00:28:59,300
first thing develop

00:28:57,320 --> 00:29:02,090
but might start a brand new cell and

00:28:59,300 --> 00:29:04,280
start adding components to that but in

00:29:02,090 --> 00:29:07,400
most cases if you have set of micro

00:29:04,280 --> 00:29:09,470
services you will pick those services

00:29:07,400 --> 00:29:12,680
group them and then put it into a cell

00:29:09,470 --> 00:29:14,720
and if you are not using a container

00:29:12,680 --> 00:29:18,020
based system you might have to update

00:29:14,720 --> 00:29:20,600
the cells but in a container based

00:29:18,020 --> 00:29:21,980
environment what we tell those are kind

00:29:20,600 --> 00:29:24,530
of immutable cells that you always

00:29:21,980 --> 00:29:26,660
deploy a new one and then remove the

00:29:24,530 --> 00:29:28,790
existing cell and there will be

00:29:26,660 --> 00:29:30,470
situations that you need to create a new

00:29:28,790 --> 00:29:32,630
version of the cell because if the

00:29:30,470 --> 00:29:35,330
existing cell is used by some consumers

00:29:32,630 --> 00:29:39,350
you need to deploy anyone so all these

00:29:35,330 --> 00:29:42,260
patterns can be supported then the

00:29:39,350 --> 00:29:44,570
developer will not feel any difference

00:29:42,260 --> 00:29:46,760
even they add off to the cell base

00:29:44,570 --> 00:29:48,920
architecture whatever you do they will

00:29:46,760 --> 00:29:51,770
go through the usual developer flow you

00:29:48,920 --> 00:29:54,230
could you test you commit and I think

00:29:51,770 --> 00:29:56,720
that's the fun of programming that you

00:29:54,230 --> 00:29:59,360
will go through that cycle and once you

00:29:56,720 --> 00:30:02,930
check in something that is ready to

00:29:59,360 --> 00:30:05,870
deploy CI CD will kick in and it will

00:30:02,930 --> 00:30:07,610
deploy a component into the cell if you

00:30:05,870 --> 00:30:09,500
are deploying a component into the cell

00:30:07,610 --> 00:30:11,690
then you will call the control plane

00:30:09,500 --> 00:30:13,550
inside the cell and signal if you are

00:30:11,690 --> 00:30:16,460
deploying a new cell then you will tell

00:30:13,550 --> 00:30:19,550
the global control plane and then deploy

00:30:16,460 --> 00:30:22,070
it into the environment so if the

00:30:19,550 --> 00:30:24,140
organization C sed process is not mature

00:30:22,070 --> 00:30:26,570
enough then it can be a human who will

00:30:24,140 --> 00:30:29,480
do that role kind of a release engineer

00:30:26,570 --> 00:30:32,660
who will run some kind of a script and

00:30:29,480 --> 00:30:34,400
then deploy it into the environment so

00:30:32,660 --> 00:30:37,010
what I want to highlight the developer

00:30:34,400 --> 00:30:39,620
life will remain same he or she will not

00:30:37,010 --> 00:30:41,240
feel any difference that they will go

00:30:39,620 --> 00:30:45,590
through the same development lifecycle

00:30:41,240 --> 00:30:47,960
and then start deploying it then the

00:30:45,590 --> 00:30:50,500
life cycle of a cell now I briefly

00:30:47,960 --> 00:30:54,230
explained you can deploy a new version

00:30:50,500 --> 00:30:57,410
so the cell will contains its own

00:30:54,230 --> 00:30:59,930
version and each and every component in

00:30:57,410 --> 00:31:03,860
inside the cell which contains its own

00:30:59,930 --> 00:31:06,530
version as well so the depend on the

00:31:03,860 --> 00:31:09,320
maturity of the cell you will run sales

00:31:06,530 --> 00:31:10,850
in different environments and you will

00:31:09,320 --> 00:31:13,220
run different version

00:31:10,850 --> 00:31:16,340
of the components as well it's totally

00:31:13,220 --> 00:31:18,860
depend on where does this cell remain in

00:31:16,340 --> 00:31:22,600
the application lifecycle of that

00:31:18,860 --> 00:31:26,810
particular system so that will help to

00:31:22,600 --> 00:31:28,940
the deploy like Bluegreen deployments

00:31:26,810 --> 00:31:31,670
rainbow deployments as well as canary

00:31:28,940 --> 00:31:34,160
deployments because you have the cell

00:31:31,670 --> 00:31:38,300
version as well as component version in

00:31:34,160 --> 00:31:41,780
this pattern then that creates that we

00:31:38,300 --> 00:31:44,420
call as a structured agility because the

00:31:41,780 --> 00:31:47,630
components got it own version you can be

00:31:44,420 --> 00:31:49,700
iterative within the component and then

00:31:47,630 --> 00:31:51,740
since the cell got its own version you

00:31:49,700 --> 00:31:55,450
can be iterative at the cell level and

00:31:51,740 --> 00:31:58,220
then you will get the agility at the

00:31:55,450 --> 00:32:00,620
global or the enterprise level as well

00:31:58,220 --> 00:32:03,740
so three levels of agility you get

00:32:00,620 --> 00:32:05,420
because of this a versioning concept

00:32:03,740 --> 00:32:09,010
that we have incorporated into the

00:32:05,420 --> 00:32:12,950
architecture so now it's about

00:32:09,010 --> 00:32:15,770
components cells but individual cell or

00:32:12,950 --> 00:32:18,620
component doesn't help to build a system

00:32:15,770 --> 00:32:21,290
so how the enterprise architecture

00:32:18,620 --> 00:32:23,030
concepts will apply to this will be

00:32:21,290 --> 00:32:26,030
discussed in during the next few slides

00:32:23,030 --> 00:32:29,150
so this is what we in mission or the

00:32:26,030 --> 00:32:32,720
systems that we have built looks like a

00:32:29,150 --> 00:32:35,630
bunch of cells running internally and a

00:32:32,720 --> 00:32:38,450
bunch of cells connected externally so

00:32:35,630 --> 00:32:42,260
how the internal and external separation

00:32:38,450 --> 00:32:45,590
happens so we call based on the

00:32:42,260 --> 00:32:48,110
ownership of the data we call whether

00:32:45,590 --> 00:32:50,450
it's an internal cell or a external cell

00:32:48,110 --> 00:32:52,040
so if you own the data then it's an

00:32:50,450 --> 00:32:54,770
internal cell and if you don't own that

00:32:52,040 --> 00:32:57,410
particular data set then it's a external

00:32:54,770 --> 00:32:59,870
cell so that is how we categorize this

00:32:57,410 --> 00:33:02,360
stuff and then if you see there are the

00:32:59,870 --> 00:33:05,480
induce application cells at the top and

00:33:02,360 --> 00:33:09,740
then some external cells so we identify

00:33:05,480 --> 00:33:11,390
a bunch of categories of cells so the

00:33:09,740 --> 00:33:14,840
first category we will call it as a

00:33:11,390 --> 00:33:17,300
logic cell the micro service services

00:33:14,840 --> 00:33:20,180
and gateways those kind of things that

00:33:17,300 --> 00:33:23,120
apply some logic will go into the logic

00:33:20,180 --> 00:33:24,770
cells and all the composite services

00:33:23,120 --> 00:33:28,280
will go into the integration

00:33:24,770 --> 00:33:31,250
sails and then you have a lot of legacy

00:33:28,280 --> 00:33:33,680
applications then those will categorize

00:33:31,250 --> 00:33:35,750
into legacy shares basically you wrap

00:33:33,680 --> 00:33:38,030
the legacy services from a service or a

00:33:35,750 --> 00:33:41,780
gateway and then expose them as API and

00:33:38,030 --> 00:33:44,330
then make it a legacy sell then you have

00:33:41,780 --> 00:33:46,760
connected with SAS applications and with

00:33:44,330 --> 00:33:47,720
your partner applications that is out of

00:33:46,760 --> 00:33:50,240
your control

00:33:47,720 --> 00:33:52,850
so you call them as external sales and

00:33:50,240 --> 00:33:55,370
then data sales and identity sales are

00:33:52,850 --> 00:33:58,760
there the channel sales are the end-user

00:33:55,370 --> 00:34:01,670
applications that inducible access so it

00:33:58,760 --> 00:34:04,940
can be a web app IOT application or a

00:34:01,670 --> 00:34:07,990
mobile app so those Adi cell types we

00:34:04,940 --> 00:34:10,399
identified based on the current

00:34:07,990 --> 00:34:14,360
implementations that we have done but it

00:34:10,399 --> 00:34:17,240
can evolve in the future as well then I

00:34:14,360 --> 00:34:19,600
put a reference implementation so this

00:34:17,240 --> 00:34:21,980
is basically example that you have a

00:34:19,600 --> 00:34:24,620
employee cell that connect with the

00:34:21,980 --> 00:34:27,080
database and then with some external

00:34:24,620 --> 00:34:29,360
systems then you have an old cell that

00:34:27,080 --> 00:34:31,640
connect with or the management system

00:34:29,360 --> 00:34:34,640
and then you have a customer cell that

00:34:31,640 --> 00:34:39,860
can increase the CRM system so and so

00:34:34,640 --> 00:34:42,530
forth so it's kind of depend on how your

00:34:39,860 --> 00:34:44,540
organization structured and depend on

00:34:42,530 --> 00:34:47,179
what kind of functionality that you are

00:34:44,540 --> 00:34:50,300
providing to your outside world you have

00:34:47,179 --> 00:34:52,190
to define the sale boundaries and we

00:34:50,300 --> 00:34:54,679
have defined some set of rules how you

00:34:52,190 --> 00:34:58,630
can identify or define the sale boundary

00:34:54,679 --> 00:35:02,720
and again we are working on a paper that

00:34:58,630 --> 00:35:04,250
that will kind of guide you to define

00:35:02,720 --> 00:35:06,230
the sale boundaries based on the

00:35:04,250 --> 00:35:09,680
functionalities and parameters that you

00:35:06,230 --> 00:35:13,430
are passing into that particular logic

00:35:09,680 --> 00:35:15,140
but domain-driven design is one concept

00:35:13,430 --> 00:35:17,480
that you can use but then again domain

00:35:15,140 --> 00:35:19,490
driven design doesn't apply completely

00:35:17,480 --> 00:35:22,580
here because it's done based on object

00:35:19,490 --> 00:35:25,190
orientation that's kind of little too

00:35:22,580 --> 00:35:27,980
low-level to have this kind of a concept

00:35:25,190 --> 00:35:32,090
but it might be a good start if you are

00:35:27,980 --> 00:35:35,090
planning to design yourself so the now

00:35:32,090 --> 00:35:37,610
this architecture doesn't have any

00:35:35,090 --> 00:35:38,640
implementation details so what we need

00:35:37,610 --> 00:35:41,940
to be mapped into

00:35:38,640 --> 00:35:43,830
set of implementation so I use some W so

00:35:41,940 --> 00:35:46,650
two components in this architecture as

00:35:43,830 --> 00:35:49,100
well as things like spring boot engine X

00:35:46,650 --> 00:35:51,960
now and then this new language we

00:35:49,100 --> 00:35:55,170
introduced called ballerina go in detail

00:35:51,960 --> 00:35:58,470
in the different slide and then it can

00:35:55,170 --> 00:36:00,590
be on kubernetes so amazon vmware so

00:35:58,470 --> 00:36:03,660
what i want to highlight is it's not

00:36:00,590 --> 00:36:06,750
specific for any technology based on

00:36:03,660 --> 00:36:09,450
different based on your technology

00:36:06,750 --> 00:36:11,730
choice you can map those technologies

00:36:09,450 --> 00:36:14,520
into this architecture implement it so

00:36:11,730 --> 00:36:16,890
this is one implementation and if you

00:36:14,520 --> 00:36:20,340
look at the channel cells they are using

00:36:16,890 --> 00:36:24,000
different technologies to implement the

00:36:20,340 --> 00:36:26,610
end-user experience so it's more kind of

00:36:24,000 --> 00:36:30,270
a human centric architecture why I claim

00:36:26,610 --> 00:36:33,210
that now in agile principles in suppose

00:36:30,270 --> 00:36:36,150
you have these agile teams now you have

00:36:33,210 --> 00:36:40,410
a building block for this team to use a

00:36:36,150 --> 00:36:45,150
cell so basically the rule here a cell

00:36:40,410 --> 00:36:47,400
can a team can own multiple cells but a

00:36:45,150 --> 00:36:50,190
cell cannot be owned by multiple teams

00:36:47,400 --> 00:36:53,700
it's not a sharable thing one team

00:36:50,190 --> 00:36:56,340
design they build a test they run and

00:36:53,700 --> 00:36:59,010
they manage a cell or multiple cells and

00:36:56,340 --> 00:37:01,620
expose the functionality through an API

00:36:59,010 --> 00:37:03,840
to different teams so that's where it's

00:37:01,620 --> 00:37:06,000
more kind of a very human centric

00:37:03,840 --> 00:37:09,450
approach that we have used here that

00:37:06,000 --> 00:37:11,370
gives a more agility to this agile team

00:37:09,450 --> 00:37:17,930
to use these architecture concepts in

00:37:11,370 --> 00:37:20,220
their the development so now the as I

00:37:17,930 --> 00:37:22,350
explained earlier the business will not

00:37:20,220 --> 00:37:24,270
care right whether you use a layered

00:37:22,350 --> 00:37:26,100
architecture micro-services architecture

00:37:24,270 --> 00:37:28,740
or a cell based architecture so we

00:37:26,100 --> 00:37:30,870
identify few things like once you you

00:37:28,740 --> 00:37:32,940
start using this particular architecture

00:37:30,870 --> 00:37:36,060
pattern how you can show the business

00:37:32,940 --> 00:37:38,820
there's an impact so few kpi's first

00:37:36,060 --> 00:37:41,160
thing is the layered architecture looks

00:37:38,820 --> 00:37:43,440
like that because your wait time will be

00:37:41,160 --> 00:37:45,750
higher than your productivity time so

00:37:43,440 --> 00:37:48,060
what the main change happens with this

00:37:45,750 --> 00:37:50,580
architecture pattern you will minimize

00:37:48,060 --> 00:37:52,230
the wait time because you are using

00:37:50,580 --> 00:37:54,210
sales inside this but

00:37:52,230 --> 00:37:57,180
guillotine so you can show the flow

00:37:54,210 --> 00:37:59,940
efficiency that will improve a lot by

00:37:57,180 --> 00:38:03,270
minimizing the wait time that is one the

00:37:59,940 --> 00:38:06,090
KPI the second thing is MTTR or the mean

00:38:03,270 --> 00:38:08,190
time to repair that since that sales are

00:38:06,090 --> 00:38:10,470
completely independent from each other

00:38:08,190 --> 00:38:12,600
you can quickly fix a bug and then

00:38:10,470 --> 00:38:15,990
release a new version rather than you

00:38:12,600 --> 00:38:18,510
wait to release the entire new version

00:38:15,990 --> 00:38:21,300
of the system so you can show some

00:38:18,510 --> 00:38:23,760
improvement in the MTTR as well so those

00:38:21,300 --> 00:38:25,410
are two really good KPS that you can

00:38:23,760 --> 00:38:28,859
show the business okay

00:38:25,410 --> 00:38:31,619
we have improved and we are mu an agile

00:38:28,859 --> 00:38:34,740
team before compared with the

00:38:31,619 --> 00:38:36,600
architecture that you used before by

00:38:34,740 --> 00:38:41,280
using the cell based architecture so

00:38:36,600 --> 00:38:43,010
those are two KPIs that you can use then

00:38:41,280 --> 00:38:45,540
in summary like it's self-contained

00:38:43,010 --> 00:38:49,460
architecture block and then you can

00:38:45,540 --> 00:38:52,290
deploy it as a unit and then you can

00:38:49,460 --> 00:38:55,560
scale it independently you can scale the

00:38:52,290 --> 00:38:58,680
things that the the component level and

00:38:55,560 --> 00:39:01,980
then you can scale it as cells so and so

00:38:58,680 --> 00:39:04,020
forth so and it has a data control and a

00:39:01,980 --> 00:39:08,570
management plane so that is kind of a

00:39:04,020 --> 00:39:10,590
summary of a cell then the we did some

00:39:08,570 --> 00:39:12,510
projects around the cell based

00:39:10,590 --> 00:39:14,840
architecture because we didn't stick to

00:39:12,510 --> 00:39:17,790
the concept because you need some

00:39:14,840 --> 00:39:21,150
frameworks and tools to build this

00:39:17,790 --> 00:39:25,109
architecture first thing we did okay we

00:39:21,150 --> 00:39:27,930
publish this suspect in github and then

00:39:25,109 --> 00:39:30,480
we identified it's really hard to just

00:39:27,930 --> 00:39:33,390
implement the reference architecture you

00:39:30,480 --> 00:39:35,100
need the methodology so we are the

00:39:33,390 --> 00:39:37,440
methodology around the cell based

00:39:35,100 --> 00:39:39,690
architecture how you can apply it to the

00:39:37,440 --> 00:39:41,760
organization so it follow the same

00:39:39,690 --> 00:39:44,609
principles like people process and

00:39:41,760 --> 00:39:46,830
technology but we extend it a little bit

00:39:44,609 --> 00:39:49,109
that we identify culture and the

00:39:46,830 --> 00:39:50,940
architecture is the foundation and then

00:39:49,109 --> 00:39:52,590
once we improve people process and

00:39:50,940 --> 00:39:55,350
technology you get a better digital

00:39:52,590 --> 00:39:59,369
alignment that is what we explain in

00:39:55,350 --> 00:40:02,220
this methodology then we introduce this

00:39:59,369 --> 00:40:04,440
new project called salary salary is

00:40:02,220 --> 00:40:06,360
basically a reference implementation of

00:40:04,440 --> 00:40:09,000
cell based architecture

00:40:06,360 --> 00:40:11,040
targeting communities in future we are

00:40:09,000 --> 00:40:13,080
planning to target other infrastructures

00:40:11,040 --> 00:40:15,360
but this project is mainly targeting

00:40:13,080 --> 00:40:17,640
communities basically it has three

00:40:15,360 --> 00:40:20,430
layers you have a management layer that

00:40:17,640 --> 00:40:22,860
you can monitor trace and secure this

00:40:20,430 --> 00:40:24,900
stuff and then you have a runtime layer

00:40:22,860 --> 00:40:28,260
that is kind that contains it

00:40:24,900 --> 00:40:31,980
communities sto and salary run time and

00:40:28,260 --> 00:40:34,080
then you have the developer the atom

00:40:31,980 --> 00:40:36,660
layer that you define all these cell

00:40:34,080 --> 00:40:40,020
descriptions and push it to the runtime

00:40:36,660 --> 00:40:43,860
so if you go to salary dot are you you

00:40:40,020 --> 00:40:46,220
can download this project then some

00:40:43,860 --> 00:40:48,060
example code so it's basically

00:40:46,220 --> 00:40:51,060
infrastructure as the code that you

00:40:48,060 --> 00:40:53,160
write yourself definitions and then you

00:40:51,060 --> 00:40:56,550
get the visual visualization of the

00:40:53,160 --> 00:40:59,190
cells of what are the components running

00:40:56,550 --> 00:41:01,800
and then you can get the dependencies as

00:40:59,190 --> 00:41:04,380
so and so forth as well so that will

00:41:01,800 --> 00:41:07,350
give you a graphical parity of what you

00:41:04,380 --> 00:41:10,170
are deploying into the infrastructure so

00:41:07,350 --> 00:41:13,740
we are using a couple of communities

00:41:10,170 --> 00:41:17,490
concept this is a CR D cell Lisa CR D

00:41:13,740 --> 00:41:17,940
and then component is support so and so

00:41:17,490 --> 00:41:21,390
forth

00:41:17,940 --> 00:41:23,660
so we wrote a custom CRD to represent a

00:41:21,390 --> 00:41:27,540
cell and then we are deploying it to

00:41:23,660 --> 00:41:30,240
communities so then we release the point

00:41:27,540 --> 00:41:34,320
four zero version recently that contains

00:41:30,240 --> 00:41:37,500
a lot of new features and this is how it

00:41:34,320 --> 00:41:42,590
is using communities concepts internally

00:41:37,500 --> 00:41:46,650
and utilizing it as I said CRD sadi a

00:41:42,590 --> 00:41:49,070
representation of the sales and we have

00:41:46,650 --> 00:41:51,210
the global control plane and then

00:41:49,070 --> 00:41:55,680
control plane and management planes

00:41:51,210 --> 00:41:57,390
inside each and every cell as well then

00:41:55,680 --> 00:41:59,250
another project we did around this

00:41:57,390 --> 00:42:01,200
called Ballerina a new programming

00:41:59,250 --> 00:42:02,910
language so the usage of ballerina in

00:42:01,200 --> 00:42:04,800
the cell architecture basically you can

00:42:02,910 --> 00:42:07,170
write components micro services

00:42:04,800 --> 00:42:09,960
integration micro services and gateways

00:42:07,170 --> 00:42:14,130
used in ballerina and the beauty of it

00:42:09,960 --> 00:42:16,530
so we were working in the middle way our

00:42:14,130 --> 00:42:17,910
sector from 2005

00:42:16,530 --> 00:42:19,740
especially when the service oriented

00:42:17,910 --> 00:42:21,960
architecture started so

00:42:19,740 --> 00:42:25,260
we believe the middle eyes shading a way

00:42:21,960 --> 00:42:29,369
to code and infrastructure so address

00:42:25,260 --> 00:42:30,720
the code side of this story ballerina

00:42:29,369 --> 00:42:32,970
come into the picture basically the

00:42:30,720 --> 00:42:36,660
middle eyes embedded in the language so

00:42:32,970 --> 00:42:38,760
you can write services and integration

00:42:36,660 --> 00:42:41,520
scenarios quickly using the language and

00:42:38,760 --> 00:42:43,890
beauty of the language you have the code

00:42:41,520 --> 00:42:46,470
and the graphical parity once you write

00:42:43,890 --> 00:42:48,600
a service or an integration micro

00:42:46,470 --> 00:42:51,240
service you can get a sequence diagram

00:42:48,600 --> 00:42:53,490
generated and then you can change the

00:42:51,240 --> 00:42:55,800
sequence diagram and change the code as

00:42:53,490 --> 00:42:57,480
well so that is the beauty of the

00:42:55,800 --> 00:42:59,690
language because if you are an

00:42:57,480 --> 00:43:02,310
integration engineer it's really hard to

00:42:59,690 --> 00:43:04,980
represent the integration flow dataflow

00:43:02,310 --> 00:43:07,400
is what we use for a long time but data

00:43:04,980 --> 00:43:10,050
flows are not that great to represent a

00:43:07,400 --> 00:43:12,930
messaging flow and then you can use

00:43:10,050 --> 00:43:15,240
Ballerina as infrastructure as a code as

00:43:12,930 --> 00:43:17,700
well because in infrastructure as a code

00:43:15,240 --> 00:43:20,280
level what we do is a lot of integration

00:43:17,700 --> 00:43:21,360
so the ballerina language is optimized

00:43:20,280 --> 00:43:23,730
for integration

00:43:21,360 --> 00:43:26,070
it's another use case that you can use

00:43:23,730 --> 00:43:29,250
if you are interested then you can go to

00:43:26,070 --> 00:43:33,600
ballerina dot IO that's the website to

00:43:29,250 --> 00:43:36,000
download this stuff so what I want to

00:43:33,600 --> 00:43:38,420
tell you kind of annotation to consume

00:43:36,000 --> 00:43:40,200
and contribute so those two

00:43:38,420 --> 00:43:41,430
specifications the reference

00:43:40,200 --> 00:43:43,890
architecture and the reference

00:43:41,430 --> 00:43:46,830
methodology we released under Creative

00:43:43,890 --> 00:43:49,800
Commons and these two projects are

00:43:46,830 --> 00:43:52,530
released under Apache so the

00:43:49,800 --> 00:43:54,630
specifications we want to make it kind

00:43:52,530 --> 00:43:57,270
of a community projects that we release

00:43:54,630 --> 00:43:59,609
it in github and as Creative Commons so

00:43:57,270 --> 00:44:01,830
if you need if you think there are any

00:43:59,609 --> 00:44:05,880
modifications or any new suggestions you

00:44:01,830 --> 00:44:07,619
can send a PR we are welcome PR and if

00:44:05,880 --> 00:44:10,410
you like the concept yes you can give a

00:44:07,619 --> 00:44:12,750
get star as well and other two projects

00:44:10,410 --> 00:44:15,090
here you can do contribution as well as

00:44:12,750 --> 00:44:18,720
you can consume them because Apache 200

00:44:15,090 --> 00:44:21,960
is a very business friendly license that

00:44:18,720 --> 00:44:24,570
you get then Nitin usually people and

00:44:21,960 --> 00:44:27,390
their talk with the external code so I

00:44:24,570 --> 00:44:30,210
picked one of the tweets that I did some

00:44:27,390 --> 00:44:31,500
time back because anyway end of the day

00:44:30,210 --> 00:44:33,150
what we are doing is a digital

00:44:31,500 --> 00:44:35,789
transformation to the organize

00:44:33,150 --> 00:44:38,000
so I believe the digital transformation

00:44:35,789 --> 00:44:41,369
is basically internally and externally

00:44:38,000 --> 00:44:43,650
improve in the the use experience to do

00:44:41,369 --> 00:44:46,559
that you need a very human centric

00:44:43,650 --> 00:44:48,119
approach as I explained earlier cell

00:44:46,559 --> 00:44:49,740
based architecture is a very human

00:44:48,119 --> 00:44:52,190
centric architecture that we are

00:44:49,740 --> 00:44:53,880
addressing a lot of technical problems

00:44:52,190 --> 00:44:55,529
infrastructure level problems

00:44:53,880 --> 00:44:58,319
architecture level problems but more

00:44:55,529 --> 00:45:01,170
than anything these human problems that

00:44:58,319 --> 00:45:06,390
we have in teams and how an agile team

00:45:01,170 --> 00:45:09,900
can be productive so that's all I have

00:45:06,390 --> 00:45:11,849
and these are my contact details and if

00:45:09,900 --> 00:45:15,180
you are interested on implementing this

00:45:11,849 --> 00:45:17,099
architecture we are happy to help I'm

00:45:15,180 --> 00:45:19,980
providing some consultancy around this

00:45:17,099 --> 00:45:24,569
as well so if you are interested please

00:45:19,980 --> 00:45:26,190
contact me we are happy to help and as I

00:45:24,569 --> 00:45:28,140
explained earlier if you have any

00:45:26,190 --> 00:45:32,480
suggestions send a PR and then if you

00:45:28,140 --> 00:45:38,099
like the spec send us a get star as well

00:45:32,480 --> 00:45:40,710
um yeah so I think it's helpful if you

00:45:38,099 --> 00:45:42,480
have any question I do be on time if you

00:45:40,710 --> 00:45:44,760
have any question I can take you when I

00:45:42,480 --> 00:45:46,950
am around if you need to talk to me I

00:45:44,760 --> 00:45:50,820
feel free I took on my talk to me

00:45:46,950 --> 00:45:52,110
[Applause]

00:45:50,820 --> 00:45:57,879
you

00:45:52,110 --> 00:45:57,879

YouTube URL: https://www.youtube.com/watch?v=CTFagA9Tp-4


