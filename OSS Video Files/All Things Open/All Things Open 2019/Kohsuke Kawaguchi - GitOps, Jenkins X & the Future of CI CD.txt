Title: Kohsuke Kawaguchi - GitOps, Jenkins X & the Future of CI CD
Publication date: 2019-11-05
Playlist: All Things Open 2019
Description: 
	WHAT YOU’LL LEARN:
Understand why traditional DevOps is not suitable in a Kubernetes and cloud-native world

Explore GitOps principles and discover how they facilitate high-velocity app development

Learn how to use GitOps in practice to focus on your app development while using Kubernetes and open source cloud-native tools Jenkins X, Helm, Skaffold, and Draft

DESCRIPTION:
CI/CD process has been something your DevOps engineer purpose-built for your team. But with Kubernetes & cloud-native, that’s becoming “legacy.” The rising level of platform abstraction allows all the good practices that the industry has developed over time to be integrated, hidden, and simplified behind just one practice called “GitOps.” That simplified world is what Jenkins X enables.

We will discuss GitOps, Jenkins X, and how that combination drastically simplifies cloud-native web app development. You’ll understand why traditional DevOps is not suitable in a Kubernetes and cloud-native world, explore GitOps principles and discover how they facilitate high-velocity app development.

And finally, Kohsuke will make a fool of himself by talking about the future — now that Jenkins X simplifies the CD process, where is the next frontier?
Captions: 
	00:00:00,000 --> 00:00:13,940
you can get going it's a bad time so

00:00:11,759 --> 00:00:16,199
thank you very much for being here

00:00:13,940 --> 00:00:19,380
so today I wanted to talk a little bit

00:00:16,199 --> 00:00:21,420
about detox in the Genki sex and then

00:00:19,380 --> 00:00:25,369
I'm going to make a fool of myself by

00:00:21,420 --> 00:00:25,369
talking about the future or CIC DISA

00:00:26,029 --> 00:00:32,669
anyhow so I know you guys all you know

00:00:30,840 --> 00:00:35,219
practice software development and them

00:00:32,669 --> 00:00:37,170
you know that's part of the Travis team

00:00:35,219 --> 00:00:39,120
what I see everywhere is that the

00:00:37,170 --> 00:00:41,850
organization's Enterprise is everywhere

00:00:39,120 --> 00:00:44,489
trying to get better at software Avery I

00:00:41,850 --> 00:00:46,379
did it's sort of like a one-person said

00:00:44,489 --> 00:00:48,210
it very well like a grass is brown

00:00:46,379 --> 00:00:52,320
everywhere like everyone is suffering

00:00:48,210 --> 00:00:54,030
high PD software and then what's kind of

00:00:52,320 --> 00:00:57,710
even more depressing actually on that

00:00:54,030 --> 00:01:00,870
note so there's this very influential

00:00:57,710 --> 00:01:04,860
reports that's done by Dora the Bob's

00:01:00,870 --> 00:01:06,240
Research Institute I think but maybe it

00:01:04,860 --> 00:01:08,760
doesn't stand for something else anyhow

00:01:06,240 --> 00:01:10,530
so this team has a very vigorous like

00:01:08,760 --> 00:01:12,510
scientific study on how the

00:01:10,530 --> 00:01:14,520
organization's the software development

00:01:12,510 --> 00:01:17,100
and like what makes them work and what

00:01:14,520 --> 00:01:19,920
what what breaks them when in one of the

00:01:17,100 --> 00:01:22,080
note that they discover is that big

00:01:19,920 --> 00:01:24,390
companies who are good at those seems to

00:01:22,080 --> 00:01:26,759
be getting better and then a company who

00:01:24,390 --> 00:01:29,040
sucked up in isn't getting anything any

00:01:26,759 --> 00:01:31,380
better at all so that's kind of a even

00:01:29,040 --> 00:01:33,659
more depressing note but perhaps that

00:01:31,380 --> 00:01:35,670
adds more urgency to those of us who are

00:01:33,659 --> 00:01:40,470
trying to you know to get ahead of the

00:01:35,670 --> 00:01:43,229
game so you know well well sir I've been

00:01:40,470 --> 00:01:46,049
preaching this CI CD for I guess at this

00:01:43,229 --> 00:01:49,710
point 15 years now I think the one of

00:01:46,049 --> 00:01:51,689
the things that kind of difficult to

00:01:49,710 --> 00:01:53,759
wrap their heads around for people

00:01:51,689 --> 00:01:55,680
struggling this is on one hand we want

00:01:53,759 --> 00:01:58,979
to improve the stupid meaning you want

00:01:55,680 --> 00:02:00,630
to have new features deliver faster at

00:01:58,979 --> 00:02:03,360
the same time we also want to maintain

00:02:00,630 --> 00:02:06,090
the stability meaning like we offer this

00:02:03,360 --> 00:02:08,819
high quality software I mean what when

00:02:06,090 --> 00:02:10,950
we talk about people I mean we talk

00:02:08,819 --> 00:02:12,790
about the CI n CV the people who are

00:02:10,950 --> 00:02:14,349
really behind the curve

00:02:12,790 --> 00:02:17,379
these people generally see those two

00:02:14,349 --> 00:02:19,359
things as a conflicting factor and then

00:02:17,379 --> 00:02:20,680
therefore when we tell them that looks

00:02:19,359 --> 00:02:23,049
like you know the beliefs that we've

00:02:20,680 --> 00:02:23,890
been doing every month now we have to do

00:02:23,049 --> 00:02:25,750
it every day

00:02:23,890 --> 00:02:27,939
then they meant a picture well like I

00:02:25,750 --> 00:02:29,439
can't that's just impossible I get the

00:02:27,939 --> 00:02:31,329
test if he's just thinking about the

00:02:29,439 --> 00:02:34,269
tester via running it's gonna take like

00:02:31,329 --> 00:02:37,420
three days so there's no 18 I can figure

00:02:34,269 --> 00:02:39,639
that every day so what people I think

00:02:37,420 --> 00:02:41,769
failed to realize is that those T

00:02:39,639 --> 00:02:44,950
factors are not actually mutually

00:02:41,769 --> 00:02:49,450
exclusive but they are actually one like

00:02:44,950 --> 00:02:51,700
the one and the same thing almost so

00:02:49,450 --> 00:02:53,049
anyhow because I think everyone is

00:02:51,700 --> 00:02:56,620
trying to get better at the software

00:02:53,049 --> 00:02:58,930
development the the industry is strength

00:02:56,620 --> 00:03:01,389
you can level like a raise the sea level

00:02:58,930 --> 00:03:03,159
right so unless you be hiding and the

00:03:01,389 --> 00:03:04,269
rocks I mean suddenly discoveries

00:03:03,159 --> 00:03:06,400
although the people are talking about

00:03:04,269 --> 00:03:08,200
the given it is you know there's a lot

00:03:06,400 --> 00:03:10,599
to be like what they like about it here

00:03:08,200 --> 00:03:12,549
of example the fact that it's a de facto

00:03:10,599 --> 00:03:14,260
possibility that you're across all of

00:03:12,549 --> 00:03:16,689
the different cloud platform so it

00:03:14,260 --> 00:03:18,250
prevents a vendor walking and in

00:03:16,689 --> 00:03:19,720
obviously there's also two useful

00:03:18,250 --> 00:03:21,849
functionalities like a cluster

00:03:19,720 --> 00:03:24,879
scheduling service discovery load

00:03:21,849 --> 00:03:26,440
balancing etcetera etcetera and then

00:03:24,879 --> 00:03:28,750
perhaps something that's really close to

00:03:26,440 --> 00:03:31,000
my heart is you know kubernetes itself

00:03:28,750 --> 00:03:34,150
is the extensible platform so being a

00:03:31,000 --> 00:03:37,169
being a dinky sky we really passionate

00:03:34,150 --> 00:03:39,909
about accessibility it's great that the

00:03:37,169 --> 00:03:41,829
anyone in the ecosystem can add these

00:03:39,909 --> 00:03:44,739
four pieces on top of the key vanities

00:03:41,829 --> 00:03:46,659
and make it a bigger collectively create

00:03:44,739 --> 00:03:50,500
a bigger useful platform like you can

00:03:46,659 --> 00:03:52,690
see in K native I think it's a wow this

00:03:50,500 --> 00:03:54,489
is no no wonder it's kenny start

00:03:52,690 --> 00:03:57,370
attraction but anyhow the reason I

00:03:54,489 --> 00:04:00,549
brought up a given it is not because I'm

00:03:57,370 --> 00:04:03,010
a Q&A this fanboy but I'm trying to I

00:04:00,549 --> 00:04:05,500
guess I'm but because in the face of

00:04:03,010 --> 00:04:07,720
these like a raising level of

00:04:05,500 --> 00:04:09,519
abstractions and the middleware and and

00:04:07,720 --> 00:04:11,709
the lower level platforms that make soft

00:04:09,519 --> 00:04:14,590
a developer productive what I see

00:04:11,709 --> 00:04:16,359
everywhere are happening is people by

00:04:14,590 --> 00:04:17,979
which I mean that release engineers and

00:04:16,359 --> 00:04:20,950
I can develop our productivity people

00:04:17,979 --> 00:04:23,409
are trying to rebuild their own new

00:04:20,950 --> 00:04:26,050
DevOps law by leveraging these

00:04:23,409 --> 00:04:28,120
technologies I said you know

00:04:26,050 --> 00:04:30,129
if you have the 200 is the mix okay now

00:04:28,120 --> 00:04:31,780
you have had to build the containers and

00:04:30,129 --> 00:04:33,310
you have to package those and you have

00:04:31,780 --> 00:04:35,409
to figure out how to deploy them and

00:04:33,310 --> 00:04:38,379
there's this notion of environments that

00:04:35,409 --> 00:04:40,930
we are used to doing so like how do them

00:04:38,379 --> 00:04:42,940
up in this new order given it is some of

00:04:40,930 --> 00:04:45,430
these like higher-level concepts that

00:04:42,940 --> 00:04:49,030
will be being familiar is nice if you

00:04:45,430 --> 00:04:51,099
can team up then the build so Allah I

00:04:49,030 --> 00:04:54,129
see a lot of people trying to basically

00:04:51,099 --> 00:04:55,900
stick together the see icd process built

00:04:54,129 --> 00:04:58,539
around this new reality that's happening

00:04:55,900 --> 00:05:01,000
in a technology but it's kind of a

00:04:58,539 --> 00:05:02,889
problem at the same time and then this I

00:05:01,000 --> 00:05:04,659
think is something that the season Genki

00:05:02,889 --> 00:05:07,539
Caesar understand all the time as soon

00:05:04,659 --> 00:05:10,060
as you beauties your own way of doing

00:05:07,539 --> 00:05:11,860
see ICD the moment you build it it

00:05:10,060 --> 00:05:14,819
becomes a legacy like you know it's

00:05:11,860 --> 00:05:19,060
really hard to get your hands away from

00:05:14,819 --> 00:05:20,710
stuff that you handcrafted and then you

00:05:19,060 --> 00:05:22,150
know it's building it is high enough if

00:05:20,710 --> 00:05:24,270
you think about the maintenance work

00:05:22,150 --> 00:05:27,550
that has to happen after war the

00:05:24,270 --> 00:05:30,069
education and keeping up-to-date all of

00:05:27,550 --> 00:05:31,599
that adds up to a lot of work so in some

00:05:30,069 --> 00:05:34,150
sense what I like to challenge is like

00:05:31,599 --> 00:05:37,210
you don't want to be there you want to

00:05:34,150 --> 00:05:39,759
be thinking twice before you invest

00:05:37,210 --> 00:05:42,639
yourself in this stitching together your

00:05:39,759 --> 00:05:44,590
custom CIC deep DevOps process right so

00:05:42,639 --> 00:05:45,759
is that the worst thing that is that the

00:05:44,590 --> 00:05:48,279
important things you should be thinking

00:05:45,759 --> 00:05:49,449
about the spending time on so if that's

00:05:48,279 --> 00:05:51,969
not the important thing

00:05:49,449 --> 00:05:54,069
well what is the important thing right

00:05:51,969 --> 00:05:56,889
so and then if you ask me I think that

00:05:54,069 --> 00:05:59,919
is the like the right user experience

00:05:56,889 --> 00:06:02,949
for the DevOps process or the developer

00:05:59,919 --> 00:06:06,400
experience for the divorce process so

00:06:02,949 --> 00:06:08,409
that if you think about that I think the

00:06:06,400 --> 00:06:11,949
industry has pretty clearly consolidated

00:06:08,409 --> 00:06:13,750
around the notion of deep tops right so

00:06:11,949 --> 00:06:16,509
the deeper part what is it the general

00:06:13,750 --> 00:06:19,360
idea is you want to capture the state of

00:06:16,509 --> 00:06:21,340
the system as a so like a text file or

00:06:19,360 --> 00:06:23,560
something like that in the guilty policy

00:06:21,340 --> 00:06:25,930
and then you apply the same version

00:06:23,560 --> 00:06:28,240
control practices on top of it right so

00:06:25,930 --> 00:06:31,000
you make changes by creating a quit it a

00:06:28,240 --> 00:06:33,039
review those by the code reviews you can

00:06:31,000 --> 00:06:36,039
use multiple varieties and so on and so

00:06:33,039 --> 00:06:38,289
forth so bringing the same in a tool kit

00:06:36,039 --> 00:06:39,849
and a workflow that your team used to

00:06:38,289 --> 00:06:41,559
the marriage again

00:06:39,849 --> 00:06:43,449
state of the application in the system

00:06:41,559 --> 00:06:44,909
not just a particular source code of the

00:06:43,449 --> 00:06:48,789
application of the configuration files

00:06:44,909 --> 00:06:50,199
so I you know why do people the why did

00:06:48,789 --> 00:06:53,469
people care about that right I think

00:06:50,199 --> 00:06:55,959
it's worth recapping so I think the one

00:06:53,469 --> 00:06:57,789
of the really useful thing especially in

00:06:55,959 --> 00:07:00,719
the context of enterprise is that the

00:06:57,789 --> 00:07:03,009
Gipper brings the transparency without

00:07:00,719 --> 00:07:05,349
sacrificing the old it ability and

00:07:03,009 --> 00:07:09,669
access control so what I mean by that is

00:07:05,349 --> 00:07:13,209
you know the one like even the origin

00:07:09,669 --> 00:07:15,069
people who don't have access to let's

00:07:13,209 --> 00:07:17,019
say commit new changes they can still

00:07:15,069 --> 00:07:20,649
see all the changes had to be made in

00:07:17,019 --> 00:07:22,479
the past or in places where you know

00:07:20,649 --> 00:07:24,580
they say for the segregation that it is

00:07:22,479 --> 00:07:27,249
one team gets to make a change and the

00:07:24,580 --> 00:07:29,919
other team gets to approve those you

00:07:27,249 --> 00:07:32,979
don't have to hide the things from

00:07:29,919 --> 00:07:34,539
people who don't have access and then so

00:07:32,979 --> 00:07:36,999
you can see the interface and who did

00:07:34,539 --> 00:07:40,839
what when for what reasons it's entirely

00:07:36,999 --> 00:07:42,639
visible and then as well as people used

00:07:40,839 --> 00:07:44,439
to use things like you know the

00:07:42,639 --> 00:07:46,749
established netiquette we follow

00:07:44,439 --> 00:07:50,199
deployments you can only place that is

00:07:46,749 --> 00:07:52,899
more familiar in the deep deep have code

00:07:50,199 --> 00:07:55,659
review flow and so on so forth so that I

00:07:52,899 --> 00:08:00,369
think I've seen some in some places it's

00:07:55,659 --> 00:08:03,099
used to achieve a the estimate the audit

00:08:00,369 --> 00:08:05,529
requirements by auditors around these

00:08:03,099 --> 00:08:07,389
notions and so that I look a mother I

00:08:05,529 --> 00:08:11,289
see it as a modern way of meeting me

00:08:07,389 --> 00:08:14,050
like a compliance without being without

00:08:11,289 --> 00:08:16,869
getting slowed down until I get off see

00:08:14,050 --> 00:08:18,789
still agnostic so I mean the in the this

00:08:16,869 --> 00:08:20,499
is really subtly not any concept right

00:08:18,789 --> 00:08:23,050
people using back in the days or chef

00:08:20,499 --> 00:08:25,059
and puppet and all analogy the telephone

00:08:23,050 --> 00:08:27,129
and Confirmation and all these different

00:08:25,059 --> 00:08:29,439
technology that's like a converted

00:08:27,129 --> 00:08:30,909
converging space can be used in

00:08:29,439 --> 00:08:34,800
conjunction with the key tops of the

00:08:30,909 --> 00:08:37,149
practice so that makes us certainly very

00:08:34,800 --> 00:08:40,300
widely applicable in many different

00:08:37,149 --> 00:08:42,300
domains and then Sweetback it promotes

00:08:40,300 --> 00:08:44,829
higher level of abstraction than we use

00:08:42,300 --> 00:08:47,050
because this text file can be no

00:08:44,829 --> 00:08:50,470
manipulated and like a transformed and

00:08:47,050 --> 00:08:52,600
analyzed and so forth so often in early

00:08:50,470 --> 00:08:53,769
like if you look at the infrastructure

00:08:52,600 --> 00:08:55,809
as a diffusion at all

00:08:53,769 --> 00:08:59,189
it's really painful but it allows you to

00:08:55,809 --> 00:09:01,600
raise the bar of the abstractions and

00:08:59,189 --> 00:09:03,160
perhaps another benefit to be the fact

00:09:01,600 --> 00:09:06,699
that we can review and test these

00:09:03,160 --> 00:09:09,220
changes before you Morse them and so

00:09:06,699 --> 00:09:12,100
that's the very cold way we practice

00:09:09,220 --> 00:09:13,989
find really useful and then it's because

00:09:12,100 --> 00:09:15,730
it's in the guilty party the certain

00:09:13,989 --> 00:09:17,410
operations like rolling back and

00:09:15,730 --> 00:09:20,290
detecting changes and all that stuff

00:09:17,410 --> 00:09:21,759
gets really simple and easy so anyhow

00:09:20,290 --> 00:09:24,309
these are all like just to feel the

00:09:21,759 --> 00:09:29,410
reason why you know the industry is

00:09:24,309 --> 00:09:31,839
consolidating around the detox but so

00:09:29,410 --> 00:09:33,819
but like I mentioned if you try to build

00:09:31,839 --> 00:09:34,629
the CIC process around you melodies I

00:09:33,819 --> 00:09:38,499
using it

00:09:34,629 --> 00:09:40,239
McGee tops it gets its records a

00:09:38,499 --> 00:09:42,069
technologist it's fun to work on these

00:09:40,239 --> 00:09:43,929
things but it's a little bit like

00:09:42,069 --> 00:09:45,339
opening a bonnet of the car and and

00:09:43,929 --> 00:09:47,679
tried to start tinkering with the

00:09:45,339 --> 00:09:49,209
engines right ill deploy the cuban it is

00:09:47,679 --> 00:09:50,079
for example well not only you have to

00:09:49,209 --> 00:09:52,389
install them buddy actually

00:09:50,079 --> 00:09:54,339
operationalize them that's a beast of

00:09:52,389 --> 00:09:57,100
its own and you have to survey the

00:09:54,339 --> 00:09:59,019
ecosystem of the two vanities and try to

00:09:57,100 --> 00:10:01,899
hit yet what kind of tools and services

00:09:59,019 --> 00:10:04,240
and like a technologies you need to mesh

00:10:01,899 --> 00:10:07,119
like I've stitched together to build a

00:10:04,240 --> 00:10:08,740
functioning liver platform well you have

00:10:07,119 --> 00:10:10,959
to move the application to containers if

00:10:08,740 --> 00:10:12,339
you haven't done so already and how they

00:10:10,959 --> 00:10:14,230
deploy a figure out how to deploy

00:10:12,339 --> 00:10:16,299
containers to given it is going to be

00:10:14,230 --> 00:10:18,249
the pod file you're gonna be hell you're

00:10:16,299 --> 00:10:21,670
going to be you know also the different

00:10:18,249 --> 00:10:23,559
options and then like a lot only stitch

00:10:21,670 --> 00:10:25,299
up these like a lot of the pcs but you

00:10:23,559 --> 00:10:26,980
have to figure out the Daivari practice

00:10:25,299 --> 00:10:28,569
know that you have to learn the detox

00:10:26,980 --> 00:10:31,389
you have to figure out how to deal with

00:10:28,569 --> 00:10:33,369
secrets and even after you did all that

00:10:31,389 --> 00:10:35,230
it's still wondering like whether you

00:10:33,369 --> 00:10:36,669
did it all right you clearly put

00:10:35,230 --> 00:10:39,220
together something that seems to work

00:10:36,669 --> 00:10:42,819
for you but no you don't know everything

00:10:39,220 --> 00:10:45,040
and then so you wonder well did I know

00:10:42,819 --> 00:10:47,679
is this am i doing it right or am I

00:10:45,040 --> 00:10:49,119
missing out like am I did I did I miss

00:10:47,679 --> 00:10:52,119
some important things that's happening

00:10:49,119 --> 00:10:54,730
in the ecosystem so it's a well it's fun

00:10:52,119 --> 00:10:56,470
to do or if you're doing this for hobby

00:10:54,730 --> 00:10:58,329
but if you think about what you're

00:10:56,470 --> 00:11:00,549
trying to optimally the imagistic

00:10:58,329 --> 00:11:02,169
develop application productively it's

00:11:00,549 --> 00:11:04,569
like you know just trying to drive a car

00:11:02,169 --> 00:11:06,850
so at a point that they would open up

00:11:04,569 --> 00:11:07,960
your bonnet and if you do its engine so

00:11:06,850 --> 00:11:12,310
when I

00:11:07,960 --> 00:11:14,890
what I think makes more sense is instead

00:11:12,310 --> 00:11:17,170
of like a doing all that work you can

00:11:14,890 --> 00:11:19,420
just drive a car by picking up something

00:11:17,170 --> 00:11:22,180
acting effects and that's really what we

00:11:19,420 --> 00:11:23,950
build to thinking sex for right the idea

00:11:22,180 --> 00:11:25,570
is like you know we want to figure out

00:11:23,950 --> 00:11:27,700
collectively in the community of in

00:11:25,570 --> 00:11:30,970
source community the best practices of

00:11:27,700 --> 00:11:33,160
heidi heidi continuously healthy

00:11:30,970 --> 00:11:35,589
continuously deliver car native

00:11:33,160 --> 00:11:38,200
applications to the communities and in a

00:11:35,589 --> 00:11:40,510
historical a jenkins is moral for Gaston

00:11:38,200 --> 00:11:43,570
running build and test and stuff like

00:11:40,510 --> 00:11:45,190
that but in Janki six when I talk about

00:11:43,570 --> 00:11:46,990
the continuous delivery I mean the whole

00:11:45,190 --> 00:11:49,839
thing from coda be all the way to the

00:11:46,990 --> 00:11:51,910
left the more advanced new operations

00:11:49,839 --> 00:11:54,399
like promoting one version of the app

00:11:51,910 --> 00:11:56,050
from one environment to another or

00:11:54,399 --> 00:11:57,730
dealing is like a change locks or

00:11:56,050 --> 00:12:00,010
collaborations or the co or the other

00:11:57,730 --> 00:12:04,000
team dynamics that surrounds the

00:12:00,010 --> 00:12:05,589
software and then the Indian context you

00:12:04,000 --> 00:12:07,060
want to integrate best of the breed

00:12:05,589 --> 00:12:09,220
software that's happening in this

00:12:07,060 --> 00:12:11,410
rapidly changing ecosystem that is given

00:12:09,220 --> 00:12:13,000
at ease because we have people who live

00:12:11,410 --> 00:12:15,160
and breathe this ecosystems to

00:12:13,000 --> 00:12:17,860
understand what's going on and they spot

00:12:15,160 --> 00:12:22,209
useful technologies and then segregate

00:12:17,860 --> 00:12:24,580
that from things that are very okay and

00:12:22,209 --> 00:12:27,310
so then we want to hide those you know

00:12:24,580 --> 00:12:29,890
those complexity of dealing with lots of

00:12:27,310 --> 00:12:32,410
different technology by abstracting them

00:12:29,890 --> 00:12:34,510
away behind a convenient command-line

00:12:32,410 --> 00:12:36,760
interface that talks about high-level

00:12:34,510 --> 00:12:38,620
operations that the developers actually

00:12:36,760 --> 00:12:41,080
understand and behind the same we map

00:12:38,620 --> 00:12:42,910
toasty whatever API calls the humanities

00:12:41,080 --> 00:12:44,620
or other systems so that your people

00:12:42,910 --> 00:12:47,709
don't have to know about the exact size

00:12:44,620 --> 00:12:49,990
and by necessity in order to do these

00:12:47,709 --> 00:12:52,300
things we kind of have to be opinionated

00:12:49,990 --> 00:12:54,940
about how to do things right like this

00:12:52,300 --> 00:12:57,160
is the the entire notion is and a built

00:12:54,940 --> 00:12:58,450
around the idea that we configured we

00:12:57,160 --> 00:13:00,329
the community can figure out the best

00:12:58,450 --> 00:13:03,220
feted like a continuously they were

00:13:00,329 --> 00:13:05,529
application so that you don't have to in

00:13:03,220 --> 00:13:07,020
a while like with the stuff that we put

00:13:05,529 --> 00:13:10,660
together isn't particularly

00:13:07,020 --> 00:13:12,670
revolutionary or like eyebrow-raising

00:13:10,660 --> 00:13:14,940
nonetheless become is sort of solution

00:13:12,670 --> 00:13:17,589
that we think is the best for you guys

00:13:14,940 --> 00:13:19,089
and in doing so i think we can push

00:13:17,589 --> 00:13:21,740
given it is back to where it's supposed

00:13:19,089 --> 00:13:23,840
to be which is a like a lower level

00:13:21,740 --> 00:13:25,460
structure pcs that help you be

00:13:23,840 --> 00:13:28,010
productive just like we don't think

00:13:25,460 --> 00:13:29,600
about Unicode or in a JSON when you're

00:13:28,010 --> 00:13:31,490
building application it's just kind of

00:13:29,600 --> 00:13:34,400
another building one of the lower-level

00:13:31,490 --> 00:13:37,220
building block the given it is I think

00:13:34,400 --> 00:13:39,590
should be is in the similar space and

00:13:37,220 --> 00:13:41,690
then that this idea you know being

00:13:39,590 --> 00:13:43,370
opinionated this kind of new to design

00:13:41,690 --> 00:13:46,040
kiss project if you've been using gently

00:13:43,370 --> 00:13:48,350
so long enough it's kind of Lee in fact

00:13:46,040 --> 00:13:50,090
it's the opposite so historically in the

00:13:48,350 --> 00:13:53,120
dinkus project I think of it as like a

00:13:50,090 --> 00:13:55,040
building like a road network right you

00:13:53,120 --> 00:13:57,260
know in this software development domain

00:13:55,040 --> 00:13:59,090
is incredibly diverse and everyone is

00:13:57,260 --> 00:14:01,280
working on different kind of software at

00:13:59,090 --> 00:14:03,050
the different you know the part of these

00:14:01,280 --> 00:14:06,560
softer development like a dev of journey

00:14:03,050 --> 00:14:08,810
so we let you like a pic wherever this

00:14:06,560 --> 00:14:10,580
nation you want to go and often people

00:14:08,810 --> 00:14:12,380
don't know right like they start driving

00:14:10,580 --> 00:14:15,980
and they kind of figure out where they

00:14:12,380 --> 00:14:17,480
want to go and it so every turn you're

00:14:15,980 --> 00:14:20,120
in the driver seat you can take whatever

00:14:17,480 --> 00:14:21,860
turns you want like we have the 1600

00:14:20,120 --> 00:14:24,530
source of liens that help you be

00:14:21,860 --> 00:14:26,990
whatever you want to go and then it's up

00:14:24,530 --> 00:14:29,060
to you to drive those now drinking sex

00:14:26,990 --> 00:14:31,220
is having a different kind of ideas like

00:14:29,060 --> 00:14:34,970
it's like a building a high-speed rail I

00:14:31,220 --> 00:14:37,610
think of it this way so you know there's

00:14:34,970 --> 00:14:39,710
like a major metropolis that so many

00:14:37,610 --> 00:14:42,080
people wants to go which is you know the

00:14:39,710 --> 00:14:43,580
cognitive web application given it is so

00:14:42,080 --> 00:14:45,260
if that's the destination you wanna go

00:14:43,580 --> 00:14:47,540
it can just show up at the train station

00:14:45,260 --> 00:14:49,430
and one of those video train did coming

00:14:47,540 --> 00:14:52,520
onto the platform and it just need to be

00:14:49,430 --> 00:14:53,960
on the train and then we'll take you to

00:14:52,520 --> 00:14:55,880
the destination you don't need to know

00:14:53,960 --> 00:14:58,310
where it is you just need to sit back

00:14:55,880 --> 00:15:00,320
and relax and enjoy the ride and it will

00:14:58,310 --> 00:15:02,360
take to you there in no time without

00:15:00,320 --> 00:15:04,820
really you know letting Lee do any work

00:15:02,360 --> 00:15:07,280
so that's the idea it's quite

00:15:04,820 --> 00:15:09,070
complimentary not sense I think if it

00:15:07,280 --> 00:15:13,370
makes the zinc is like sorta interesting

00:15:09,070 --> 00:15:16,100
now I talked about being opinionated so

00:15:13,370 --> 00:15:19,670
the development pro-development flow

00:15:16,100 --> 00:15:22,460
that we preach is is kind of like a

00:15:19,670 --> 00:15:24,290
heart of what thinking success but at

00:15:22,460 --> 00:15:27,530
the same time like as you can see

00:15:24,290 --> 00:15:29,300
there's nothing particularly outrageous

00:15:27,530 --> 00:15:31,790
about it right this is something we

00:15:29,300 --> 00:15:34,040
being or doing for the past so many

00:15:31,790 --> 00:15:35,120
years meaning we have the multiple

00:15:34,040 --> 00:15:37,610
environments that

00:15:35,120 --> 00:15:38,720
for different applications like a

00:15:37,610 --> 00:15:42,520
different progression of the

00:15:38,720 --> 00:15:46,850
applications and then in between those

00:15:42,520 --> 00:15:48,140
different environment we have different

00:15:46,850 --> 00:15:51,589
environments are tracked on different

00:15:48,140 --> 00:15:53,930
branches and then you mores you promote

00:15:51,589 --> 00:15:55,670
the binary from any bits from one

00:15:53,930 --> 00:15:58,490
environment another by merging the

00:15:55,670 --> 00:16:03,529
branches so that we detox part in the

00:15:58,490 --> 00:16:05,839
addition now as you create you create

00:16:03,529 --> 00:16:07,870
the pull request you get this previa

00:16:05,839 --> 00:16:10,010
environment meaning the change that

00:16:07,870 --> 00:16:12,020
somebody's being from some of these

00:16:10,010 --> 00:16:15,080
proposing gets its own copy of the

00:16:12,020 --> 00:16:16,670
writing application and in Jenkins X and

00:16:15,080 --> 00:16:19,850
stitched together the entire work show

00:16:16,670 --> 00:16:23,029
so that you don't have to think about

00:16:19,850 --> 00:16:24,710
those all of all details right a little

00:16:23,029 --> 00:16:26,660
bit more on the best practices that we

00:16:24,710 --> 00:16:29,810
preach is one like we think you should

00:16:26,660 --> 00:16:32,810
be using cried more for better

00:16:29,810 --> 00:16:34,640
developing software and so that it can

00:16:32,810 --> 00:16:36,890
keep your laptop or that what it needs

00:16:34,640 --> 00:16:39,740
to be so example has this concept of

00:16:36,890 --> 00:16:41,779
that depth pod where you can create your

00:16:39,740 --> 00:16:44,270
own development environment like on the

00:16:41,779 --> 00:16:45,860
card and then keep that in sync with the

00:16:44,270 --> 00:16:48,350
laptop so that we don't actually run

00:16:45,860 --> 00:16:50,270
your entire applications on your laptop

00:16:48,350 --> 00:16:54,770
which certainly makes it a whole lot

00:16:50,270 --> 00:16:56,570
more easier for your laptop and we also

00:16:54,770 --> 00:16:58,610
preach for example a key master run

00:16:56,570 --> 00:17:00,350
should be always be visible and so

00:16:58,610 --> 00:17:01,850
everything every change the lives in the

00:17:00,350 --> 00:17:05,809
master branch is imported to get the new

00:17:01,850 --> 00:17:08,360
versions and so forth of all and then we

00:17:05,809 --> 00:17:11,329
encourage you to deploy often any small

00:17:08,360 --> 00:17:12,860
increments and finally like we you know

00:17:11,329 --> 00:17:14,270
we think it's a good idea to inform

00:17:12,860 --> 00:17:16,010
other people are running what changes

00:17:14,270 --> 00:17:19,429
are in balance so you know none of these

00:17:16,010 --> 00:17:21,110
things again it's particularly new like

00:17:19,429 --> 00:17:23,059
individually the other practices that

00:17:21,110 --> 00:17:25,069
makes has been making sense forever

00:17:23,059 --> 00:17:27,500
lately the innovation is the fact that

00:17:25,069 --> 00:17:29,660
these practices have all been combined

00:17:27,500 --> 00:17:32,780
into one and behind the functional

00:17:29,660 --> 00:17:34,340
applications so you know that's what I

00:17:32,780 --> 00:17:36,590
was going to say these best practices

00:17:34,340 --> 00:17:38,870
that integrate in your way is boring and

00:17:36,590 --> 00:17:40,220
in my dictionary that's a good thing so

00:17:38,870 --> 00:17:43,400
you don't have to kind of convince

00:17:40,220 --> 00:17:45,640
people but about adopting some

00:17:43,400 --> 00:17:47,810
outrageous ideas or anything like that

00:17:45,640 --> 00:17:48,430
and then behind the scenes like I said

00:17:47,810 --> 00:17:51,010
it's

00:17:48,430 --> 00:17:53,020
a number of these components you know

00:17:51,010 --> 00:17:54,940
like a sample it's got the application

00:17:53,020 --> 00:17:57,070
called mono monocular or which helps you

00:17:54,940 --> 00:17:59,020
see what are the applications in your

00:17:57,070 --> 00:18:03,340
one hour micro services in ecosystem

00:17:59,020 --> 00:18:05,170
it's got the helm it's got the I got I

00:18:03,340 --> 00:18:07,330
forgot the name of it but the one that

00:18:05,170 --> 00:18:11,020
received a replication and drive the

00:18:07,330 --> 00:18:19,900
Jenkins and other CD services and so on

00:18:11,020 --> 00:18:20,400
and so forth so this can sorry about

00:18:19,900 --> 00:18:23,850
that

00:18:20,400 --> 00:18:26,650
yes and then it supports the multiple

00:18:23,850 --> 00:18:29,800
different classes wherever you're using

00:18:26,650 --> 00:18:32,620
it and that's the important part of

00:18:29,800 --> 00:18:34,450
humanity story so you gotta cover it so

00:18:32,620 --> 00:18:36,160
what I talked about is little bit

00:18:34,450 --> 00:18:38,080
abstract unless this notion the best

00:18:36,160 --> 00:18:40,360
practices and being productive and not

00:18:38,080 --> 00:18:42,460
tinkering with the engines and so on so

00:18:40,360 --> 00:18:46,420
forth so perhaps the best way to get

00:18:42,460 --> 00:18:50,080
this idea across I think is to let you

00:18:46,420 --> 00:18:51,550
see the exactly like what how you can

00:18:50,080 --> 00:18:53,710
use it and what happens behind the

00:18:51,550 --> 00:18:57,040
scenes so imagine if you have a laptop

00:18:53,710 --> 00:18:59,200
like this one it doesn't really have any

00:18:57,040 --> 00:19:01,420
like it's like a brand new laughter that

00:18:59,200 --> 00:19:03,130
doesn't really have anything in it in

00:19:01,420 --> 00:19:04,870
order to get going with thinking sex

00:19:03,130 --> 00:19:07,150
like first thing you're gonna do is a

00:19:04,870 --> 00:19:09,160
currently through commands right like he

00:19:07,150 --> 00:19:12,220
is a home breeding store Jenkins eggs

00:19:09,160 --> 00:19:15,280
come online and then it is the JX create

00:19:12,220 --> 00:19:17,470
cluster so when it does it goes through

00:19:15,280 --> 00:19:19,240
a bit of interactive a dialogue to help

00:19:17,470 --> 00:19:21,810
you decide where you want to create a

00:19:19,240 --> 00:19:24,970
new cluster and so on so forth

00:19:21,810 --> 00:19:27,130
but that's it that when you do that so

00:19:24,970 --> 00:19:28,450
what happens behind the scene is that

00:19:27,130 --> 00:19:33,190
you just deployed all the necessary

00:19:28,450 --> 00:19:35,080
tools on the card properly configured so

00:19:33,190 --> 00:19:37,210
the Queen most things I kinda Jenkins

00:19:35,080 --> 00:19:40,990
that has the you know the elastic field

00:19:37,210 --> 00:19:42,820
agents the computers or the artifact

00:19:40,990 --> 00:19:45,490
repository so that we can speed up the

00:19:42,820 --> 00:19:46,870
bills or the molecule I already talked

00:19:45,490 --> 00:19:50,860
Emma so these are the building blocks

00:19:46,870 --> 00:19:53,560
that individually like combine together

00:19:50,860 --> 00:19:55,330
to do the work and then finally you also

00:19:53,560 --> 00:19:58,690
get staging and production environments

00:19:55,330 --> 00:20:00,340
already set up where the only few jobs

00:19:58,690 --> 00:20:01,590
is going to run on these these

00:20:00,340 --> 00:20:04,230
environments right

00:20:01,590 --> 00:20:05,880
so none of these set up I mean these are

00:20:04,230 --> 00:20:08,370
the set after previously had to be done

00:20:05,880 --> 00:20:10,830
manually it's not particularly hard it's

00:20:08,370 --> 00:20:13,670
tedious it's all taken care of you for

00:20:10,830 --> 00:20:15,990
you just by answering a few questions

00:20:13,670 --> 00:20:18,240
now so that was the initial installation

00:20:15,990 --> 00:20:21,330
setup so let's bring your application on

00:20:18,240 --> 00:20:23,130
board to thinking six a forest you do

00:20:21,330 --> 00:20:24,600
buy you have two ways of doing it like

00:20:23,130 --> 00:20:26,790
if you don't have anything you can

00:20:24,600 --> 00:20:29,640
create the new project and in there by

00:20:26,790 --> 00:20:32,310
running Jack's create so that the third

00:20:29,640 --> 00:20:34,200
talking spring what that's doing is it's

00:20:32,310 --> 00:20:36,210
specifying a template to create a new

00:20:34,200 --> 00:20:39,030
application also in this case it's like

00:20:36,210 --> 00:20:40,650
a jam our spring application so it gives

00:20:39,030 --> 00:20:43,110
you like initial skeleton source code

00:20:40,650 --> 00:20:45,720
and whatever a doctor file and Jenkins

00:20:43,110 --> 00:20:48,660
file and some other you know CI CD set

00:20:45,720 --> 00:20:50,610
up that necessary and all they are ready

00:20:48,660 --> 00:20:52,650
to go so it's much easier than like a

00:20:50,610 --> 00:20:54,990
starting from you know starting from

00:20:52,650 --> 00:20:56,550
empathy from scratch by yourself and I

00:20:54,990 --> 00:20:59,730
already feel alternatively if you

00:20:56,550 --> 00:21:02,130
already have a a project then you can go

00:20:59,730 --> 00:21:04,140
to its directory and Anita njx import

00:21:02,130 --> 00:21:05,790
and then it basically sucks in door

00:21:04,140 --> 00:21:08,520
sauce garden and then produce the

00:21:05,790 --> 00:21:10,380
necessary like as you know dr. files and

00:21:08,520 --> 00:21:13,610
incus files and other surrounding stuff

00:21:10,380 --> 00:21:16,590
so that it's ready for the in context so

00:21:13,610 --> 00:21:18,210
and again like when you run this command

00:21:16,590 --> 00:21:20,670
it's so basically it's just one command

00:21:18,210 --> 00:21:22,500
either way it is you get the source code

00:21:20,670 --> 00:21:24,270
or you already have it and then you get

00:21:22,500 --> 00:21:26,520
the wiring for the building deploy in

00:21:24,270 --> 00:21:30,030
the CCD so that increased after

00:21:26,520 --> 00:21:32,250
dimension and then it like it even ask

00:21:30,030 --> 00:21:34,680
city for example create the github

00:21:32,250 --> 00:21:36,630
repositories and if you want to create a

00:21:34,680 --> 00:21:38,760
little repository and then it can create

00:21:36,630 --> 00:21:40,560
those and import those and it sets up

00:21:38,760 --> 00:21:42,240
all the other configuration like fix

00:21:40,560 --> 00:21:44,010
heading at the web book so that every

00:21:42,240 --> 00:21:46,650
time you push happened to the depository

00:21:44,010 --> 00:21:49,590
and then a Csilla process happens in

00:21:46,650 --> 00:21:52,470
this kinky sex if it necessary it's sort

00:21:49,590 --> 00:21:54,180
of a Jenkins job all of those stuff and

00:21:52,470 --> 00:21:56,880
then as a side effect of that it creates

00:21:54,180 --> 00:21:59,400
and it builds a master branch it creates

00:21:56,880 --> 00:22:02,160
a initially DS and then it runs all that

00:21:59,400 --> 00:22:04,560
lands out in staging and so all of that

00:22:02,160 --> 00:22:07,170
set up again it's not particularly hard

00:22:04,560 --> 00:22:09,000
it's just tedious now it's all automated

00:22:07,170 --> 00:22:11,160
for you just by running that one

00:22:09,000 --> 00:22:12,840
commands so that's what I mean by being

00:22:11,160 --> 00:22:15,049
productive like you don't have to do

00:22:12,840 --> 00:22:17,400
this boring tedious work

00:22:15,049 --> 00:22:19,710
so now that we brought the application

00:22:17,400 --> 00:22:21,210
on board let's work on the change and

00:22:19,710 --> 00:22:24,000
this is a part that you defeat the most

00:22:21,210 --> 00:22:26,100
often right and then this really like

00:22:24,000 --> 00:22:28,169
nothing really changes you know you work

00:22:26,100 --> 00:22:30,419
on the change locally maybe by using

00:22:28,169 --> 00:22:32,400
your favorite IDE and you create a git

00:22:30,419 --> 00:22:34,980
commit and push so then the Creator

00:22:32,400 --> 00:22:38,070
hip hop request and then you have your

00:22:34,980 --> 00:22:39,809
change review and and the Mars is via to

00:22:38,070 --> 00:22:42,470
the master branch right that's what

00:22:39,809 --> 00:22:45,990
you've been doing for years now but

00:22:42,470 --> 00:22:47,309
drinking sex ads to you is all the

00:22:45,990 --> 00:22:50,400
surrounding automation that's

00:22:47,309 --> 00:22:52,290
surrounding it around it so for one I

00:22:50,400 --> 00:22:54,780
get pure gas get to automatically be

00:22:52,290 --> 00:22:57,150
open you know get built and tested are

00:22:54,780 --> 00:22:59,429
without you doing anything and it was

00:22:57,150 --> 00:23:00,929
not filled and tested it gets deployed

00:22:59,429 --> 00:23:03,030
into what we call the preview

00:23:00,929 --> 00:23:05,910
environment so that's a you know run

00:23:03,030 --> 00:23:09,090
running copy of application specifically

00:23:05,910 --> 00:23:11,429
feel you're running PR so what that

00:23:09,090 --> 00:23:13,500
allows you to do is when they are trying

00:23:11,429 --> 00:23:15,120
to review the code change you don't have

00:23:13,500 --> 00:23:16,470
to just look at the source code you can

00:23:15,120 --> 00:23:18,600
actually interact with running

00:23:16,470 --> 00:23:21,059
applications so if the designer if you

00:23:18,600 --> 00:23:22,620
made a CSS changes the designer wants to

00:23:21,059 --> 00:23:24,900
see hides in track Heights actually

00:23:22,620 --> 00:23:26,970
happening they can do that without you

00:23:24,900 --> 00:23:30,059
know realized like I'm locally checking

00:23:26,970 --> 00:23:32,460
up in the building those and then many

00:23:30,059 --> 00:23:34,380
more do you change in a new master

00:23:32,460 --> 00:23:36,720
branch that no one that gets received

00:23:34,380 --> 00:23:39,270
the change also get automatic a butan

00:23:36,720 --> 00:23:41,400
tested and I like turned into new duties

00:23:39,270 --> 00:23:42,960
because we preach this idea that the

00:23:41,400 --> 00:23:44,370
master run should be always release of

00:23:42,960 --> 00:23:45,990
all there should be a bars on number two

00:23:44,370 --> 00:23:48,480
everything that's running on the Dilys a

00:23:45,990 --> 00:23:50,730
master branch and it creates a change

00:23:48,480 --> 00:23:52,620
log that captures what has changed in

00:23:50,730 --> 00:23:55,940
this new Dilys I mean in that gets

00:23:52,620 --> 00:24:00,299
deployed to the staging environment so

00:23:55,940 --> 00:24:01,799
and lastly I like if so the staging so

00:24:00,299 --> 00:24:04,290
in this case the promotion to the

00:24:01,799 --> 00:24:06,419
staging environment is automatic which

00:24:04,290 --> 00:24:08,010
can be configured however they say like

00:24:06,419 --> 00:24:10,980
you trying to promote the beats the

00:24:08,010 --> 00:24:12,419
productions then you go to the directory

00:24:10,980 --> 00:24:14,370
of the applications and iran with

00:24:12,419 --> 00:24:17,760
districts promote one so what it

00:24:14,370 --> 00:24:21,030
specifies is you know that's Randy it's

00:24:17,760 --> 00:24:22,710
Randy point 0.03 version of this

00:24:21,030 --> 00:24:25,559
application in the production

00:24:22,710 --> 00:24:27,160
environment and what happens is when you

00:24:25,559 --> 00:24:31,060
run the command

00:24:27,160 --> 00:24:33,430
it creates well it up it creates a pull

00:24:31,060 --> 00:24:34,900
request on the state people story that

00:24:33,430 --> 00:24:36,100
captured what more than of other

00:24:34,900 --> 00:24:37,870
applications are running in the

00:24:36,100 --> 00:24:39,940
production's I remember its Agee top so

00:24:37,870 --> 00:24:41,740
you know any round is to explore what it

00:24:39,940 --> 00:24:44,350
doesn't directly talk to the communities

00:24:41,740 --> 00:24:47,140
API to the effect not getting the

00:24:44,350 --> 00:24:50,110
materialized to change it simply updates

00:24:47,140 --> 00:24:52,120
the state files and interacted sub that

00:24:50,110 --> 00:24:53,740
becomes a pull request today so then

00:24:52,120 --> 00:24:56,050
people who have permissions like say

00:24:53,740 --> 00:24:57,310
operations team he needs to approve the

00:24:56,050 --> 00:24:59,800
all the environment for amenity

00:24:57,310 --> 00:25:01,420
production they'd go to get Pavan when

00:24:59,800 --> 00:25:03,190
they press the Mars then the

00:25:01,420 --> 00:25:04,780
corresponding automation kicks in and

00:25:03,190 --> 00:25:07,180
then that's the one that talks to the

00:25:04,780 --> 00:25:09,370
given it is an update the actual the

00:25:07,180 --> 00:25:11,590
version of that running applications and

00:25:09,370 --> 00:25:16,630
then eventually that materializes in the

00:25:11,590 --> 00:25:18,340
production so so that's the you know so

00:25:16,630 --> 00:25:21,160
this is what it means to be doing get

00:25:18,340 --> 00:25:23,440
high I mean doing the gig tops but it's

00:25:21,160 --> 00:25:25,330
kind of hidden behind well it's sort of

00:25:23,440 --> 00:25:27,190
like a lot of that a lot of the gory

00:25:25,330 --> 00:25:28,900
details of making etops

00:25:27,190 --> 00:25:31,690
work is kind of taking care of ID

00:25:28,900 --> 00:25:34,390
thinking sex so that's the kind of the

00:25:31,690 --> 00:25:36,130
the flow of the ebbs and flows of the

00:25:34,390 --> 00:25:38,470
zinc insect and hopefully I was able to

00:25:36,130 --> 00:25:41,050
give you the idea of how it sort of

00:25:38,470 --> 00:25:43,960
helps you be productive by removing the

00:25:41,050 --> 00:25:48,280
the more important helping you focus on

00:25:43,960 --> 00:25:51,910
higher level abstractions alright so

00:25:48,280 --> 00:25:54,160
that was about the drinking sex let's

00:25:51,910 --> 00:25:56,710
like a step back and like I look at the

00:25:54,160 --> 00:25:58,750
bigger picture of where the like what we

00:25:56,710 --> 00:26:01,330
think is the ICD is going so first like

00:25:58,750 --> 00:26:04,780
a smaller things out of the way you know

00:26:01,330 --> 00:26:07,290
the one of the things you know the IRC

00:26:04,780 --> 00:26:10,090
need to see the height or copier but

00:26:07,290 --> 00:26:11,620
there's like at the demand for the

00:26:10,090 --> 00:26:14,530
automation is getting bigger in the ER

00:26:11,620 --> 00:26:16,180
in the Jenkins the weight so as such

00:26:14,530 --> 00:26:18,430
like it's changing the way people run

00:26:16,180 --> 00:26:20,290
Jenkins right Jenkins X is also pushing

00:26:18,430 --> 00:26:22,030
it in this directory so one therefore

00:26:20,290 --> 00:26:24,970
that's going on you think is east righty

00:26:22,030 --> 00:26:27,150
like Iran itself try to run zinc itself

00:26:24,970 --> 00:26:29,740
as more like a function of a Saudi style

00:26:27,150 --> 00:26:31,900
so the idea is like you know the instead

00:26:29,740 --> 00:26:34,480
of Jenkins being a like a perpetually

00:26:31,900 --> 00:26:37,210
running server process it's turn it into

00:26:34,480 --> 00:26:39,970
what much like a short a living thing

00:26:37,210 --> 00:26:40,780
right because it comes up only for the

00:26:39,970 --> 00:26:42,850
duration

00:26:40,780 --> 00:26:44,740
build and it coordinates and execute

00:26:42,850 --> 00:26:47,710
spam build and it disappears into the

00:26:44,740 --> 00:26:49,990
ether and then leaving the record behind

00:26:47,710 --> 00:26:53,200
for the system like in a dehydrator or

00:26:49,990 --> 00:26:55,570
ever - for the users team practice so

00:26:53,200 --> 00:26:57,660
it's clear benefits that it brings is

00:26:55,570 --> 00:27:01,210
pretty clear like a better scalability

00:26:57,660 --> 00:27:02,530
because well all the better isolation

00:27:01,210 --> 00:27:05,290
because every build is in the different

00:27:02,530 --> 00:27:07,810
containers and so thank insects already

00:27:05,290 --> 00:27:09,400
use the same keys in this manner but

00:27:07,810 --> 00:27:10,960
this one mode of operation right now I

00:27:09,400 --> 00:27:14,080
kind of consider various like a

00:27:10,960 --> 00:27:16,060
restrictions in order to make it work so

00:27:14,080 --> 00:27:18,040
hopefully they're the effort going on as

00:27:16,060 --> 00:27:19,900
I stand in the community to try to push

00:27:18,040 --> 00:27:21,730
this forward so hopefully it gets better

00:27:19,900 --> 00:27:24,100
and better and be more applicable to

00:27:21,730 --> 00:27:28,410
personally what you're using Thank You

00:27:24,100 --> 00:27:31,270
s'more so I think the other thing that's

00:27:28,410 --> 00:27:34,300
very much the videos I think the bigger

00:27:31,270 --> 00:27:36,160
thing that's going on in my mind is in

00:27:34,300 --> 00:27:38,020
order to achieve the higher velocity

00:27:36,160 --> 00:27:40,450
like a hip hop's is gonna be important

00:27:38,020 --> 00:27:43,240
as a key developer experience but that's

00:27:40,450 --> 00:27:45,070
not that's not enough and then I think

00:27:43,240 --> 00:27:47,200
that kind of key change that's happening

00:27:45,070 --> 00:27:50,170
in the industry that I see is this more

00:27:47,200 --> 00:27:54,190
holistic approach to the quality and

00:27:50,170 --> 00:27:56,620
another key enabler to me like a satisfy

00:27:54,190 --> 00:27:58,600
the throughput and stability at the same

00:27:56,620 --> 00:27:59,380
time in the conflict that I talked about

00:27:58,600 --> 00:28:02,560
earlier

00:27:59,380 --> 00:28:04,630
so it needs to be that energy when it

00:28:02,560 --> 00:28:07,810
comes to actually let me step back in

00:28:04,630 --> 00:28:11,350
this way so maybe what's taking time

00:28:07,810 --> 00:28:14,620
coding up the changes is once you type

00:28:11,350 --> 00:28:16,120
up the change the time the reason it

00:28:14,620 --> 00:28:17,980
takes so much time for the change the

00:28:16,120 --> 00:28:19,840
propagated production is not so much

00:28:17,980 --> 00:28:22,660
because the automation takes time it's

00:28:19,840 --> 00:28:24,790
because it takes time for people to

00:28:22,660 --> 00:28:26,500
build up confidence the change right I

00:28:24,790 --> 00:28:28,240
mean that's why you run the code review

00:28:26,500 --> 00:28:31,150
that's why you run the test it's all of

00:28:28,240 --> 00:28:33,460
those is to have to build up the

00:28:31,150 --> 00:28:35,200
confidence that this change is going to

00:28:33,460 --> 00:28:37,330
actually hold the water in production as

00:28:35,200 --> 00:28:40,180
opposed to like a blow up and then a

00:28:37,330 --> 00:28:42,190
heartier creativity of the business and

00:28:40,180 --> 00:28:44,560
it needs to be that the code I mean the

00:28:42,190 --> 00:28:47,350
test is the only thing that stands

00:28:44,560 --> 00:28:49,750
between those broken code and then

00:28:47,350 --> 00:28:51,460
defying the production but what's

00:28:49,750 --> 00:28:54,970
happening I think lately

00:28:51,460 --> 00:28:56,830
is like if the only rely on pests then

00:28:54,970 --> 00:28:58,929
you can't need to go beyond certain

00:28:56,830 --> 00:29:00,789
speed because you have to be like you're

00:28:58,929 --> 00:29:02,409
like a fundamentally lying on the number

00:29:00,789 --> 00:29:05,230
of tests and cover it is which is never

00:29:02,409 --> 00:29:07,990
great enough so well I think people are

00:29:05,230 --> 00:29:09,760
doing is to accept the fact that the

00:29:07,990 --> 00:29:12,399
some of the problem is going to sleep

00:29:09,760 --> 00:29:14,980
into production and then think about

00:29:12,399 --> 00:29:17,710
other ways to contain the damage or

00:29:14,980 --> 00:29:20,529
reduce the impact or some other things

00:29:17,710 --> 00:29:22,779
so that the collectively the impacted in

00:29:20,529 --> 00:29:24,970
diesel is small even if something some

00:29:22,779 --> 00:29:27,700
bad stuff happened in productions and I

00:29:24,970 --> 00:29:30,070
think this is a key key mental shift in

00:29:27,700 --> 00:29:32,230
order to do the congestive rain I expect

00:29:30,070 --> 00:29:34,990
this trend to continue it's gonna be

00:29:32,230 --> 00:29:36,730
like a high the fire safety box in

00:29:34,990 --> 00:29:38,740
building right obviously like it's

00:29:36,730 --> 00:29:41,080
better not to create that because any

00:29:38,740 --> 00:29:43,299
failure but the building like this you

00:29:41,080 --> 00:29:44,710
know they have a sprinkler so that if

00:29:43,299 --> 00:29:46,720
the higher breaks out they try to

00:29:44,710 --> 00:29:48,309
contain those the you know exit is

00:29:46,720 --> 00:29:50,559
clearly more so that the people can

00:29:48,309 --> 00:29:52,299
evacuate so all of these things change

00:29:50,559 --> 00:29:54,970
the fact that it accept the fact that

00:29:52,299 --> 00:29:57,370
the fire sometimes happens the same

00:29:54,970 --> 00:29:59,830
thing is to technology so let's take the

00:29:57,370 --> 00:30:01,630
feature flags I I'm sure you by now

00:29:59,830 --> 00:30:03,610
you've heard about it if you think about

00:30:01,630 --> 00:30:05,860
it all it is what this is fundamentally

00:30:03,610 --> 00:30:09,549
trying to do is it lets you deploy a

00:30:05,860 --> 00:30:12,190
code that's not up to the standard of

00:30:09,549 --> 00:30:13,750
like whatever the team is it to be so

00:30:12,190 --> 00:30:15,970
that we can instantly devote them you

00:30:13,750 --> 00:30:18,220
can contain this into smaller colors a

00:30:15,970 --> 00:30:20,500
circuit breaker that's I think the

00:30:18,220 --> 00:30:22,870
technology like most associated with the

00:30:20,500 --> 00:30:25,360
Netflix started popularizing this

00:30:22,870 --> 00:30:27,520
concept you know Wendy we only have a

00:30:25,360 --> 00:30:29,710
like a interweb of service season like

00:30:27,520 --> 00:30:31,690
one of them dies in a weird way like you

00:30:29,710 --> 00:30:34,179
can create this domino effect that's

00:30:31,690 --> 00:30:36,100
causing a backup the other services if

00:30:34,179 --> 00:30:38,140
they circulate allows it to kill the

00:30:36,100 --> 00:30:40,000
service cleanly again this is another

00:30:38,140 --> 00:30:42,520
example of like I accept the fact that

00:30:40,000 --> 00:30:44,529
some services is going to die but even

00:30:42,520 --> 00:30:47,500
when the one thing guys are collectively

00:30:44,529 --> 00:30:49,570
like the system keeps operating at

00:30:47,500 --> 00:30:53,049
certainly this level and that's

00:30:49,570 --> 00:30:54,730
acceptable the calorie Department I

00:30:53,049 --> 00:30:56,830
guess another way of saying okay I'm

00:30:54,730 --> 00:30:59,529
deploying a new bits and this my breaker

00:30:56,830 --> 00:31:01,600
and it is might fall this I blow up so

00:30:59,529 --> 00:31:05,260
like let's try to do this incrementally

00:31:01,600 --> 00:31:08,220
and I kinda smaller like a but it's

00:31:05,260 --> 00:31:17,080
and so forth or the better of a beatific

00:31:08,220 --> 00:31:18,669
I talk like well so when it has a better

00:31:17,080 --> 00:31:21,130
of the ability I've been a big fan of

00:31:18,669 --> 00:31:23,230
the data dog and I mean I saw I saw them

00:31:21,130 --> 00:31:24,760
up there but anyhow they been doing in

00:31:23,230 --> 00:31:27,700
they've been in the business for like

00:31:24,760 --> 00:31:29,500
ten years old son at this point and I I

00:31:27,700 --> 00:31:31,179
was walking around the show floor in the

00:31:29,500 --> 00:31:32,980
killed cone and I noticed that the whole

00:31:31,179 --> 00:31:34,809
new generation of the mornings

00:31:32,980 --> 00:31:36,640
businesses according up so I was

00:31:34,809 --> 00:31:38,290
wondering wow there are still more a

00:31:36,640 --> 00:31:40,600
service monitoring company like what are

00:31:38,290 --> 00:31:42,970
they updated and what I learned is like

00:31:40,600 --> 00:31:46,059
am I was talking to one of those effects

00:31:42,970 --> 00:31:48,250
signal effects and I notice that they

00:31:46,059 --> 00:31:49,809
didn't leave NTP IPO and I asked him

00:31:48,250 --> 00:31:52,000
like a lots of key differentiator you

00:31:49,809 --> 00:31:54,280
guys have and they said oh we can cut

00:31:52,000 --> 00:31:55,600
that in the monitoring the time it takes

00:31:54,280 --> 00:31:58,210
to detect the problem from like a

00:31:55,600 --> 00:32:00,280
minutes to seconds and I was kind of

00:31:58,210 --> 00:32:03,400
shocked that that was enough to drive

00:32:00,280 --> 00:32:05,620
IPO but T like I did this like a speaks

00:32:03,400 --> 00:32:08,410
about a sophisticated state of

00:32:05,620 --> 00:32:11,740
monitoring now right another fault like

00:32:08,410 --> 00:32:14,200
if it's taken for you to a thirty

00:32:11,740 --> 00:32:16,390
minutes to detect the changes to detect

00:32:14,200 --> 00:32:18,549
the program to contain the damage they

00:32:16,390 --> 00:32:20,620
say roll back then shrink in the end of

00:32:18,549 --> 00:32:22,150
one minute detection to five seconds

00:32:20,620 --> 00:32:24,549
it's not gonna do you any good

00:32:22,150 --> 00:32:26,620
okay so like the fact that there are so

00:32:24,549 --> 00:32:28,630
many customers were one minute going

00:32:26,620 --> 00:32:30,970
down to five second is significant body

00:32:28,630 --> 00:32:33,460
they've automated substantially this is

00:32:30,970 --> 00:32:35,820
a error recovery process and that's the

00:32:33,460 --> 00:32:37,809
kind of thing again that can you know be

00:32:35,820 --> 00:32:39,730
that's not the kind of practice that

00:32:37,809 --> 00:32:42,160
access the fact that their happened

00:32:39,730 --> 00:32:44,169
the introduction and then like you know

00:32:42,160 --> 00:32:46,660
you tried to contain the damage right so

00:32:44,169 --> 00:32:48,820
combined like if you think I think I see

00:32:46,660 --> 00:32:52,360
them all now the part of the broader QA

00:32:48,820 --> 00:32:55,059
afford they try to like a keep the

00:32:52,360 --> 00:32:58,660
system functioning while in the presence

00:32:55,059 --> 00:33:01,000
of problems and then they on this front

00:32:58,660 --> 00:33:03,540
the last one that I wanted to mention is

00:33:01,000 --> 00:33:06,040
this lever is in a production traffic

00:33:03,540 --> 00:33:07,720
and I think that's because ultimately

00:33:06,040 --> 00:33:09,490
there is nothing like production like a

00:33:07,720 --> 00:33:11,650
we know that no amount of testing is

00:33:09,490 --> 00:33:13,659
going to stand in D in I mean they

00:33:11,650 --> 00:33:15,970
proved it software in this in the face

00:33:13,659 --> 00:33:17,730
of the production traffic so what I

00:33:15,970 --> 00:33:19,510
noticed that some people are doing is

00:33:17,730 --> 00:33:21,790
where I was talking to

00:33:19,510 --> 00:33:23,830
the Israeli company who is the

00:33:21,790 --> 00:33:25,540
discontent recommendation system so they

00:33:23,830 --> 00:33:28,390
said every month like they have a

00:33:25,540 --> 00:33:32,580
billions of like at the traffic kids so

00:33:28,390 --> 00:33:35,460
nowadays when they test a new change and

00:33:32,580 --> 00:33:38,470
they allow developers to deploy any

00:33:35,460 --> 00:33:40,420
requests into production and they get

00:33:38,470 --> 00:33:43,330
like a point zero one percent of the

00:33:40,420 --> 00:33:46,240
production traffic ratted to it and then

00:33:43,330 --> 00:33:48,700
it they ran for like a TOC hours of that

00:33:46,240 --> 00:33:51,190
like an experiment of it and they

00:33:48,700 --> 00:33:52,960
monitor the same KPI like a creek C rate

00:33:51,190 --> 00:33:54,700
or error rate or stuff like that

00:33:52,960 --> 00:33:57,760
by using the production monitoring

00:33:54,700 --> 00:33:59,860
system so that the end of the C hours

00:33:57,760 --> 00:34:02,350
because I got you know the point zero

00:33:59,860 --> 00:34:04,450
one percent of the video in traffic it's

00:34:02,350 --> 00:34:06,640
just significant echo traffic they get a

00:34:04,450 --> 00:34:09,700
pretty good sense of like high high

00:34:06,640 --> 00:34:13,570
stable or like high this new change

00:34:09,700 --> 00:34:14,980
being proposed it's functioning so and

00:34:13,570 --> 00:34:16,630
then they can use that information to

00:34:14,980 --> 00:34:19,179
decide whether they more the change or

00:34:16,630 --> 00:34:20,800
not so this is like ultimate accurate to

00:34:19,179 --> 00:34:22,389
the test right like a forget testing

00:34:20,800 --> 00:34:23,740
basically they're saying like but I mean

00:34:22,389 --> 00:34:26,620
so like they don't like the test that

00:34:23,740 --> 00:34:29,590
this they're not putting I mean they're

00:34:26,620 --> 00:34:31,090
saying even if the program for I don't

00:34:29,590 --> 00:34:33,760
really care if the program is buggy or

00:34:31,090 --> 00:34:35,620
not like so long as it meets the KPI

00:34:33,760 --> 00:34:38,440
like Anna so long as it's bringing money

00:34:35,620 --> 00:34:41,950
to to the business they're okay to ship

00:34:38,440 --> 00:34:43,840
it basically so I'm imagine the kind of

00:34:41,950 --> 00:34:46,540
confidence it can be a lot of exercise

00:34:43,840 --> 00:34:48,399
like that and that's really amazing so I

00:34:46,540 --> 00:34:50,919
expect more of these things to continue

00:34:48,399 --> 00:34:53,020
and this is the kind of thing that the

00:34:50,919 --> 00:34:55,899
people who achieved the hotend level or

00:34:53,020 --> 00:34:58,450
continuously we can take on next so this

00:34:55,899 --> 00:35:01,360
year I think is a frontier of the

00:34:58,450 --> 00:35:03,370
software development so speaking about

00:35:01,360 --> 00:35:04,440
frontier of the software movement or the

00:35:03,370 --> 00:35:08,020
DevOps

00:35:04,440 --> 00:35:10,150
once you get into this mindset of more

00:35:08,020 --> 00:35:12,310
automations not producing more data and

00:35:10,150 --> 00:35:14,320
using that data to drive decisions more

00:35:12,310 --> 00:35:18,040
effectively like this production traffic

00:35:14,320 --> 00:35:19,990
testing but I did notice this that some

00:35:18,040 --> 00:35:22,090
people started to apply machine learning

00:35:19,990 --> 00:35:24,580
the software development process itself

00:35:22,090 --> 00:35:26,350
right it's in something shouldn't be

00:35:24,580 --> 00:35:29,470
surprised because you know we've been

00:35:26,350 --> 00:35:31,030
seeing we being used to see we at this

00:35:29,470 --> 00:35:32,680
point we used to see in the news where

00:35:31,030 --> 00:35:35,170
the eyes

00:35:32,680 --> 00:35:36,550
listen Alan and suddenly the software

00:35:35,170 --> 00:35:39,220
development adjourned that was no

00:35:36,550 --> 00:35:41,950
exception so this one kind of caught my

00:35:39,220 --> 00:35:43,630
eyes recently which is imagine you're

00:35:41,950 --> 00:35:45,849
like a DevOps team a big company like

00:35:43,630 --> 00:35:48,790
they have like a C or 4,000 engineers

00:35:45,849 --> 00:35:52,329
working on a single code base which is a

00:35:48,790 --> 00:35:54,010
pretty massive the code base so they

00:35:52,329 --> 00:35:57,099
have everything in the like a model

00:35:54,010 --> 00:36:00,520
upholstery it's the well modularized is

00:35:57,099 --> 00:36:02,020
a big web of dependencies so there are

00:36:00,520 --> 00:36:05,710
many there are well organized well it

00:36:02,020 --> 00:36:09,309
just so be it takes a lot of time to run

00:36:05,710 --> 00:36:12,670
the tests to qualify ok the inbound

00:36:09,309 --> 00:36:14,500
changes so the project that they're

00:36:12,670 --> 00:36:16,660
trying to take on this type of theme was

00:36:14,500 --> 00:36:19,990
that how can they cut the cost and time

00:36:16,660 --> 00:36:22,750
of the software every process by running

00:36:19,990 --> 00:36:25,750
these tests more efficiently so what

00:36:22,750 --> 00:36:29,200
they did actually where they started is

00:36:25,750 --> 00:36:31,240
the first like a dependency analysis to

00:36:29,200 --> 00:36:33,099
figure out what missed what exactly

00:36:31,240 --> 00:36:35,559
needs to be done right so imagine this

00:36:33,099 --> 00:36:38,170
like a diamonds are files and these are

00:36:35,559 --> 00:36:40,540
squares for modules and read I mean the

00:36:38,170 --> 00:36:43,270
circles are pests

00:36:40,540 --> 00:36:45,819
so if you have a statistically static

00:36:43,270 --> 00:36:47,859
information between dependencies and you

00:36:45,819 --> 00:36:51,160
could say well if this file had changed

00:36:47,859 --> 00:36:53,440
and then the only test done is these

00:36:51,160 --> 00:36:55,690
guys need to be rebuilt and the bad guy

00:36:53,440 --> 00:36:57,700
and then these four test needs to be

00:36:55,690 --> 00:36:58,990
derived but you probably don't need I

00:36:57,700 --> 00:37:00,369
mean you don't need to review those or

00:36:58,990 --> 00:37:02,049
even those testico there's no

00:37:00,369 --> 00:37:04,359
dependencies I mean there's you can

00:37:02,049 --> 00:37:08,559
statistically it is statically in far

00:37:04,359 --> 00:37:10,599
that they are not needed so you can

00:37:08,559 --> 00:37:13,180
imagine I kept a larger scale like this

00:37:10,599 --> 00:37:14,980
would be pretty effective and then they

00:37:13,180 --> 00:37:16,240
you know but this is not a great partner

00:37:14,980 --> 00:37:19,569
because they have already done it before

00:37:16,240 --> 00:37:21,880
they take on this product and what what

00:37:19,569 --> 00:37:24,280
I mean the part that's amazing is like

00:37:21,880 --> 00:37:25,780
the other part of this second like on

00:37:24,280 --> 00:37:28,180
step projects what they did is they

00:37:25,780 --> 00:37:33,099
trained the machine learning model to

00:37:28,180 --> 00:37:35,349
try to predict what tests should run so

00:37:33,099 --> 00:37:38,020
this system that they have like because

00:37:35,349 --> 00:37:40,240
they got so many developers ten to the

00:37:38,020 --> 00:37:42,790
power of five so that's like a hundred

00:37:40,240 --> 00:37:44,810
thousand other hundred thousand changes

00:37:42,790 --> 00:37:47,900
goes through the system every month

00:37:44,810 --> 00:37:50,090
so they use 1% of that data to train the

00:37:47,900 --> 00:37:52,160
model to say you know anywhere we turned

00:37:50,090 --> 00:37:54,740
that that be when you change this file

00:37:52,160 --> 00:37:56,750
let's say that pest is most more useful

00:37:54,740 --> 00:37:58,340
and these changes in faster and really

00:37:56,750 --> 00:38:00,350
often cutting the program let's say

00:37:58,340 --> 00:38:03,230
right so the machine learning mother was

00:38:00,350 --> 00:38:05,570
able to learn those things and then like

00:38:03,230 --> 00:38:08,840
a more intelligently proposed a subset

00:38:05,570 --> 00:38:11,060
of tests around so the they reported in

00:38:08,840 --> 00:38:14,360
fact they said I can know the only every

00:38:11,060 --> 00:38:16,310
time something changes only one part of

00:38:14,360 --> 00:38:18,410
the test are selected compared to the

00:38:16,310 --> 00:38:22,610
baseline which is a stop static

00:38:18,410 --> 00:38:23,780
inference and then still as effective so

00:38:22,610 --> 00:38:25,370
meaning the other thing you need to

00:38:23,780 --> 00:38:27,740
think about when you did this number of

00:38:25,370 --> 00:38:31,130
tests that iran is well you might have

00:38:27,740 --> 00:38:32,810
incorrectly only some pests that are

00:38:31,130 --> 00:38:35,240
actually valuable right that should have

00:38:32,810 --> 00:38:36,950
caught the regressions and the relation

00:38:35,240 --> 00:38:39,080
ended up hitting the production so that

00:38:36,950 --> 00:38:41,600
would be bad so they tracked the number

00:38:39,080 --> 00:38:43,940
and then I was only 0.1% so basically

00:38:41,600 --> 00:38:45,830
it's negligible and especially if you

00:38:43,940 --> 00:38:47,900
combine with the fact that in Iraq if

00:38:45,830 --> 00:38:50,120
you mentally picture all the problems

00:38:47,900 --> 00:38:52,880
that regression that the introducing in

00:38:50,120 --> 00:38:55,100
the system by given change probably like

00:38:52,880 --> 00:38:57,500
the stuff that pesky cat is maybe like

00:38:55,100 --> 00:39:00,140
here's something like that right so the

00:38:57,500 --> 00:39:02,840
appointment personally just just on top

00:39:00,140 --> 00:39:04,850
of that so it's basically like a noise

00:39:02,840 --> 00:39:06,590
at this point and then there by doing

00:39:04,850 --> 00:39:08,840
this arrival to cut the cost of either

00:39:06,590 --> 00:39:13,850
waste execution by half so that's a

00:39:08,840 --> 00:39:15,800
singe cut money saving as well and so I

00:39:13,850 --> 00:39:18,560
mean this is what makes this amazing is

00:39:15,800 --> 00:39:20,810
most of us almost a team that I go see

00:39:18,560 --> 00:39:22,880
isn't even doing this kind of like a

00:39:20,810 --> 00:39:24,680
static analysis to speed after test it's

00:39:22,880 --> 00:39:26,750
just every every time some changes

00:39:24,680 --> 00:39:27,980
happen they run the whole thing and then

00:39:26,750 --> 00:39:28,880
I mean Jenkins further there's something

00:39:27,980 --> 00:39:33,110
you run the whole thing every time

00:39:28,880 --> 00:39:35,030
somebody submits a PR so I mean so this

00:39:33,110 --> 00:39:36,920
this big company has been doing this

00:39:35,030 --> 00:39:39,680
kind of static analysis long time ago

00:39:36,920 --> 00:39:41,240
but then like they took all these more

00:39:39,680 --> 00:39:43,160
machine learning based approach they

00:39:41,240 --> 00:39:45,560
were able to drive a significant

00:39:43,160 --> 00:39:47,540
improvement to the efficiency and cost

00:39:45,560 --> 00:39:49,430
so that's the kind of thing I think the

00:39:47,540 --> 00:39:51,230
data is unlocking in the software

00:39:49,430 --> 00:39:54,290
developing process but I think will

00:39:51,230 --> 00:39:57,410
receive will see Morag here's the

00:39:54,290 --> 00:40:00,290
another example where another company

00:39:57,410 --> 00:40:02,090
a bigger sorry team and our big

00:40:00,290 --> 00:40:04,490
application that consisted like hundreds

00:40:02,090 --> 00:40:07,010
of micro-services that's coming into

00:40:04,490 --> 00:40:09,500
production and one day sorry team needs

00:40:07,010 --> 00:40:10,850
to look after all of those and this

00:40:09,500 --> 00:40:13,190
place already achieved a very

00:40:10,850 --> 00:40:15,650
significant a continuous delivery so

00:40:13,190 --> 00:40:18,920
hundreds of these micro services that on

00:40:15,650 --> 00:40:21,290
average deploying one once every day so

00:40:18,920 --> 00:40:23,540
that are pretty high weekend opponent I

00:40:21,290 --> 00:40:26,450
hope that's not third faster than many

00:40:23,540 --> 00:40:28,910
of you but at that kind of scale like we

00:40:26,450 --> 00:40:30,650
can imagine like SRT SRE team is

00:40:28,910 --> 00:40:32,720
basically completely overwhelmed right

00:40:30,650 --> 00:40:35,150
they're landing like there are 400

00:40:32,720 --> 00:40:37,600
changes or so production department

00:40:35,150 --> 00:40:40,970
happening every day and so every like a

00:40:37,600 --> 00:40:42,980
production fire needs to be analyzed and

00:40:40,970 --> 00:40:46,370
it's good quite painful so what there

00:40:42,980 --> 00:40:48,590
are 20 days can we estimate the risk or

00:40:46,370 --> 00:40:51,050
by invalid deployment because either

00:40:48,590 --> 00:40:53,510
it's going to help them you know they

00:40:51,050 --> 00:40:55,700
prepare accordingly and also simplify

00:40:53,510 --> 00:40:58,160
the initial troubleshooting sessions so

00:40:55,700 --> 00:41:00,260
and I guess what they also deploy

00:40:58,160 --> 00:41:02,420
demoscene early to this problem so you

00:41:00,260 --> 00:41:04,100
know they had one year worth of the

00:41:02,420 --> 00:41:06,140
poland history that has like a forty

00:41:04,100 --> 00:41:09,230
thousand deployment record of which

00:41:06,140 --> 00:41:11,300
about 100 of the Department of failure

00:41:09,230 --> 00:41:13,940
and they tried to train the model by

00:41:11,300 --> 00:41:16,700
looking at attributes like what what

00:41:13,940 --> 00:41:18,800
what are these kind of changes what what

00:41:16,700 --> 00:41:22,250
in the invention distantly correlate is

00:41:18,800 --> 00:41:24,200
the problematic deployment so and then

00:41:22,250 --> 00:41:26,090
if I understand their impact quickly

00:41:24,200 --> 00:41:27,850
it's 3d staggering like they are able to

00:41:26,090 --> 00:41:31,370
is a trained model they'll be able to

00:41:27,850 --> 00:41:33,560
predict many percent 99 percent of the

00:41:31,370 --> 00:41:35,900
production allottees is just a five

00:41:33,560 --> 00:41:38,420
percent false alarm ratio so this is

00:41:35,900 --> 00:41:40,610
almost like a perfect prediction and

00:41:38,420 --> 00:41:42,590
then I think maybe another thing worth

00:41:40,610 --> 00:41:44,300
pointing out is like you know how many

00:41:42,590 --> 00:41:45,710
of you have like forty thousand

00:41:44,300 --> 00:41:47,420
affirming record that we can analyze

00:41:45,710 --> 00:41:49,700
data right it's probably not many

00:41:47,420 --> 00:41:51,890
companies so this is I guess another

00:41:49,700 --> 00:41:52,640
example company already pretty efficient

00:41:51,890 --> 00:41:55,400
at what they do

00:41:52,640 --> 00:42:00,350
being able to like I did like a leapfrog

00:41:55,400 --> 00:42:03,830
forward by using those theta and you

00:42:00,350 --> 00:42:05,570
know they based on these models and

00:42:03,830 --> 00:42:08,120
algorithms they were able to learn for

00:42:05,570 --> 00:42:09,740
example and at the most that before they

00:42:08,120 --> 00:42:10,970
deployed a machine learning they passed

00:42:09,740 --> 00:42:14,630
they

00:42:10,970 --> 00:42:17,150
hello parsley I inform this r18 about

00:42:14,630 --> 00:42:19,460
discovery in by the foreman and they

00:42:17,150 --> 00:42:21,080
know they are based on it's like a

00:42:19,460 --> 00:42:23,060
distance they confirm that the more

00:42:21,080 --> 00:42:25,160
parts are useless in estimating they're

00:42:23,060 --> 00:42:27,980
all like a nerdy the disks prediction

00:42:25,160 --> 00:42:30,410
which is not surprised and then the

00:42:27,980 --> 00:42:34,450
other thing they have found is like when

00:42:30,410 --> 00:42:37,310
when when the process is stream like a

00:42:34,450 --> 00:42:39,710
short-circuited meaning if if the change

00:42:37,310 --> 00:42:41,210
from the pointer change created it

00:42:39,710 --> 00:42:43,010
performance is really short

00:42:41,210 --> 00:42:44,930
then not a risky sign in other words

00:42:43,010 --> 00:42:47,030
like if somebody saying we're going to

00:42:44,930 --> 00:42:49,430
stop in the stage and it's alright this

00:42:47,030 --> 00:42:51,290
is gonna be trivial so check check check

00:42:49,430 --> 00:42:53,210
it's all good that's proceed in

00:42:51,290 --> 00:42:55,640
production those tend to be a risk even

00:42:53,210 --> 00:42:58,310
that is what they find it is also again

00:42:55,640 --> 00:43:00,620
in some sense it's not a surprise and

00:42:58,310 --> 00:43:02,720
finally like they also discover that in

00:43:00,620 --> 00:43:04,370
a long maintain code is more risky so

00:43:02,720 --> 00:43:05,900
you know then that's also something we

00:43:04,370 --> 00:43:07,880
knew instinctively right like if the

00:43:05,900 --> 00:43:10,220
cold has been around for a long time it

00:43:07,880 --> 00:43:12,530
gets scarier to change and so those

00:43:10,220 --> 00:43:14,300
things will blow up or often but what's

00:43:12,530 --> 00:43:16,430
actually more valuable see what's to

00:43:14,300 --> 00:43:18,050
devalue is not about this learning like

00:43:16,430 --> 00:43:20,300
none of these I mean all of these things

00:43:18,050 --> 00:43:23,030
I kind of already knew but what's

00:43:20,300 --> 00:43:25,910
amazing is now it's not like it's

00:43:23,030 --> 00:43:28,520
quantified so I mean I'm making this

00:43:25,910 --> 00:43:30,230
making up this number red and when you

00:43:28,520 --> 00:43:31,730
say when they say long maintained code

00:43:30,230 --> 00:43:33,560
is more risky they could actually

00:43:31,730 --> 00:43:36,890
quantify this by saying example like

00:43:33,560 --> 00:43:39,560
every year of the project life could add

00:43:36,890 --> 00:43:42,680
like a 15% increment to the black risk

00:43:39,560 --> 00:43:45,380
factor and that's not that kind of

00:43:42,680 --> 00:43:48,920
number is really like it can do wonders

00:43:45,380 --> 00:43:50,690
to mobilize visa fees to do the right

00:43:48,920 --> 00:43:52,370
thing because you know when was the last

00:43:50,690 --> 00:43:54,140
time you said oh we need to rewrite this

00:43:52,370 --> 00:43:56,120
application because like it's way too

00:43:54,140 --> 00:43:57,500
error-prone and the your management says

00:43:56,120 --> 00:43:59,570
yeah that's a good idea let's do it

00:43:57,500 --> 00:44:00,980
never happens right but if you'll

00:43:59,570 --> 00:44:02,480
actually put the number like hey this

00:44:00,980 --> 00:44:04,250
application because they haven't been

00:44:02,480 --> 00:44:06,050
written it it's costing the business one

00:44:04,250 --> 00:44:07,280
meter in a year that's a totally

00:44:06,050 --> 00:44:10,010
different conversation that's a language

00:44:07,280 --> 00:44:12,440
that everyone need understand so it in

00:44:10,010 --> 00:44:14,870
some sense when you try to DVD more they

00:44:12,440 --> 00:44:17,180
rely on more data and analyze them it

00:44:14,870 --> 00:44:19,130
can sort of you can you can sort of stop

00:44:17,180 --> 00:44:21,590
arguing about certain things and becomes

00:44:19,130 --> 00:44:23,090
more automatic and obvious and analyze

00:44:21,590 --> 00:44:24,700
the organization to fund the other

00:44:23,090 --> 00:44:27,670
resources analogy

00:44:24,700 --> 00:44:31,240
to the right thing and so those things I

00:44:27,670 --> 00:44:33,730
can combine it's gonna make a pretty

00:44:31,240 --> 00:44:36,400
highly efficient organ a high efficient

00:44:33,730 --> 00:44:38,650
organizations and then that's something

00:44:36,400 --> 00:44:40,869
like kind of and at that point that he

00:44:38,650 --> 00:44:43,119
decided thinking wait a minute hey

00:44:40,869 --> 00:44:45,160
because I used to think you know and I'm

00:44:43,119 --> 00:44:47,619
sure many developers like you know

00:44:45,160 --> 00:44:51,549
saying hey is that the smaller number of

00:44:47,619 --> 00:44:54,670
like a super developers like or the

00:44:51,549 --> 00:44:56,950
elite developers can do wonders in ways

00:44:54,670 --> 00:44:58,750
that army of Engineers in a large

00:44:56,950 --> 00:45:01,089
company can ever do right that's the

00:44:58,750 --> 00:45:03,940
whole idea behind like a start-up for

00:45:01,089 --> 00:45:05,530
example but now it seems to me that

00:45:03,940 --> 00:45:06,910
perhaps the world is heading into a

00:45:05,530 --> 00:45:10,180
little different direction all of these

00:45:06,910 --> 00:45:11,740
samples that I mentioned is around like

00:45:10,180 --> 00:45:15,430
a large-scale software development

00:45:11,740 --> 00:45:17,049
getting substantially better by using by

00:45:15,430 --> 00:45:19,839
using the fact that they're already

00:45:17,049 --> 00:45:21,250
large-scale and then I mean none of

00:45:19,839 --> 00:45:22,480
these I mean most of the software

00:45:21,250 --> 00:45:24,520
development team out there cannot

00:45:22,480 --> 00:45:27,520
justify this kind of like a fun machine

00:45:24,520 --> 00:45:29,829
learning science project to deploy yet

00:45:27,520 --> 00:45:32,530
when they did like they brought seem

00:45:29,829 --> 00:45:34,030
camp improvements so I used the picture

00:45:32,530 --> 00:45:36,640
I used to have is like a David and

00:45:34,030 --> 00:45:38,260
Goliath and then David buss the nimble

00:45:36,640 --> 00:45:41,740
and the more efficient guys and Goliath

00:45:38,260 --> 00:45:43,750
of slow-moving organizations now now the

00:45:41,740 --> 00:45:45,910
picture I have is some of the Goliath is

00:45:43,750 --> 00:45:48,910
actually faster than David and since the

00:45:45,910 --> 00:45:51,640
guy was tappable so maybe that you know

00:45:48,910 --> 00:45:53,680
that's kind of a bleak I don't know how

00:45:51,640 --> 00:45:55,119
do you think about that I mean I'm

00:45:53,680 --> 00:45:59,079
fundamentally a fan of the smaller

00:45:55,119 --> 00:46:00,819
company and so forth but the perhaps the

00:45:59,079 --> 00:46:03,490
software development is becoming more

00:46:00,819 --> 00:46:06,180
like you know normal manufacturing where

00:46:03,490 --> 00:46:09,160
scale drives the same account economy

00:46:06,180 --> 00:46:12,339
but anyhow so I'm running out of the

00:46:09,160 --> 00:46:14,710
time so just to wrap up that I mean this

00:46:12,339 --> 00:46:17,200
presentation and everyone is trying to

00:46:14,710 --> 00:46:18,880
become a step at at software theory and

00:46:17,200 --> 00:46:21,099
then so therefore they are trying to

00:46:18,880 --> 00:46:22,839
leverage all these new innovations in

00:46:21,099 --> 00:46:24,520
the technology like given it is if

00:46:22,839 --> 00:46:26,829
you're thinking about doing that then I

00:46:24,520 --> 00:46:28,390
think the better thing to think about is

00:46:26,829 --> 00:46:30,760
the developer experience that should be

00:46:28,390 --> 00:46:33,790
a give out and then let to like kinky

00:46:30,760 --> 00:46:35,230
sex drive those product video game for

00:46:33,790 --> 00:46:36,240
you instead of your sticking things

00:46:35,230 --> 00:46:38,670
together

00:46:36,240 --> 00:46:40,950
and I see ICD I think is still evolving

00:46:38,670 --> 00:46:43,440
like there's a broader trend going on

00:46:40,950 --> 00:46:44,970
example more built around data and I

00:46:43,440 --> 00:46:47,609
think it's kind of paint exciting future

00:46:44,970 --> 00:46:51,380
fast so how is that thank you very much

00:46:47,609 --> 00:46:51,380
and it can be a customer happy

00:46:53,950 --> 00:47:00,370

YouTube URL: https://www.youtube.com/watch?v=j2rR3KEvGDU


