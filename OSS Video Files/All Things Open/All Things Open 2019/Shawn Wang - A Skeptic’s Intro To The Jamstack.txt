Title: Shawn Wang - A Skeptic’s Intro To The Jamstack
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	The JAMStack stands for JavaScript, APIs, and Markup, and at first glance it seems a truism – of course everyone uses that, right? What kind of stack is that? At its core, however, it describes a new architecture for web apps and sites that is at the confluence of multiple trends in serverless, JavaScript frameworks, static site generators, and Git-centric workflows.

Over the past 20 years, the stack of web apps has slowly shifted from fully server-side driven (LAMP) to a “full stack” straddling front-end and back-end (MEAN). Thanks to furious innovation in JavaScript and serverless technologies in the last 5 years, the stack has shifted even further forward to empower front-end developers to be responsible for fully dynamic web app experiences on par with mobile apps. JavaScript frameworks like React have arisen to make writing compenentized web apps much easier. Their ability to statically render and rehydrate have allowed a new generation of static site generators like Gatsby and Vuepress to offer dynamic and fast experiences previously not possible for static sites. On the backend, the proliferation of the third party API economy and the launch of AWS Lambdas and other serverless functionality make it ever easier to build without a monolithic server. This allows a clear decoupling between front-end and back-end, and a fundamental re-examining of the application delivery architectures as a direct result. By leaning on serverless functions and static-building, we can use a Git-centric workflow to eliminate a lot of the complexity inherent in today’s architectures, with direct implications for reliability, security, performance, and simplified caching. Finally, we can unlock new possibilities with the new JAMstack architecture, like deploy previews and atomic deploys.
Captions: 
	00:00:00,360 --> 00:00:07,540
[Music]

00:00:08,760 --> 00:00:13,500
my name is Sean I go by six on the

00:00:10,440 --> 00:00:15,120
Internet's I am very I guess I'm known

00:00:13,500 --> 00:00:16,560
for learning in public I think that's a

00:00:15,120 --> 00:00:18,779
that's a motto of mine that I keep

00:00:16,560 --> 00:00:21,480
sharing and I started out as a jam stack

00:00:18,779 --> 00:00:23,430
skeptic and that's and this is a little

00:00:21,480 --> 00:00:25,470
bit of my journey as sort of discovering

00:00:23,430 --> 00:00:28,500
why people care why is this such a big

00:00:25,470 --> 00:00:29,550
deal and I'm just sharing my reasons for

00:00:28,500 --> 00:00:31,859
it here

00:00:29,550 --> 00:00:33,360
I'm also a moderator of the Arts - we

00:00:31,859 --> 00:00:35,100
actually a subreddit if you work in

00:00:33,360 --> 00:00:37,980
react if you are interested in reacts

00:00:35,100 --> 00:00:40,739
there's 140 thousand of us discussing

00:00:37,980 --> 00:00:42,450
react so you're welcome to join us and I

00:00:40,739 --> 00:00:45,600
guess most of most relevant for this

00:00:42,450 --> 00:00:47,460
talk I also work at metla Phi which is a

00:00:45,600 --> 00:00:49,170
very strong proponent of the jab stack

00:00:47,460 --> 00:00:51,149
in fact it's all in on this Jam stack

00:00:49,170 --> 00:00:52,860
idea so we'll talk about what that means

00:00:51,149 --> 00:00:54,840
so Jam sack what does it what does it

00:00:52,860 --> 00:00:57,059
stand for it's actually an acronym it

00:00:54,840 --> 00:00:59,399
stands for JavaScript API is and markup

00:00:57,059 --> 00:01:01,379
and we'll sort of break this down but

00:00:59,399 --> 00:01:04,170
it's the whole idea that you should ship

00:01:01,379 --> 00:01:06,510
your at your app your site as static

00:01:04,170 --> 00:01:08,400
assets you pre build all the stuff that

00:01:06,510 --> 00:01:10,290
you want to do and then you ship it out

00:01:08,400 --> 00:01:12,689
to the CDN and it serves it to your

00:01:10,290 --> 00:01:14,610
users for anything dynamic you hit api's

00:01:12,689 --> 00:01:18,600
and that's it there's no running server

00:01:14,610 --> 00:01:20,009
to run maintain scale pay for so the

00:01:18,600 --> 00:01:22,530
more discerning of you would be

00:01:20,009 --> 00:01:23,880
skeptical like I was like it shouldn't

00:01:22,530 --> 00:01:25,290
this just be another word for static

00:01:23,880 --> 00:01:28,740
sites like like that's been with us

00:01:25,290 --> 00:01:30,060
since the dawn of time and there is some

00:01:28,740 --> 00:01:31,560
truth to that but then there's also some

00:01:30,060 --> 00:01:33,390
differences and I think I'm gonna I'm

00:01:31,560 --> 00:01:35,990
just gonna explore those differences and

00:01:33,390 --> 00:01:39,329
hopefully you'll join me in this journey

00:01:35,990 --> 00:01:41,400
and in fact Chris coiour actually picked

00:01:39,329 --> 00:01:43,140
up on this he actually said like you

00:01:41,400 --> 00:01:44,970
know javascript is not a priority here

00:01:43,140 --> 00:01:46,590
if you guys want a priority here Marcus

00:01:44,970 --> 00:01:48,270
not a priority here what really matters

00:01:46,590 --> 00:01:50,070
is static hosting and he called it the

00:01:48,270 --> 00:01:52,049
Sham stack which is a sort of quick

00:01:50,070 --> 00:01:54,810
Beatty title for this and we'll talk

00:01:52,049 --> 00:01:56,520
about why this is true and and and in so

00:01:54,810 --> 00:01:58,649
many ways and and if you're a developer

00:01:56,520 --> 00:02:00,149
you're already like up to here with all

00:01:58,649 --> 00:02:02,700
these sects right there's just so many

00:02:00,149 --> 00:02:05,219
stacks that we do that we're used to

00:02:02,700 --> 00:02:07,649
encountering and all of them say that

00:02:05,219 --> 00:02:09,750
they're the best I think the thing that

00:02:07,649 --> 00:02:11,910
sets gem stack apart from all this is

00:02:09,750 --> 00:02:13,530
that it removes complexity instead of

00:02:11,910 --> 00:02:15,630
adds complexity

00:02:13,530 --> 00:02:18,240
and I'll try to back that assertion up

00:02:15,630 --> 00:02:21,480
so in the beginning as you all know like

00:02:18,240 --> 00:02:24,420
the the original worldwide web page from

00:02:21,480 --> 00:02:26,940
from CERN was just a simple static file

00:02:24,420 --> 00:02:30,150
and we generated weeds we served it from

00:02:26,940 --> 00:02:32,850
an actual server as time goes goes on we

00:02:30,150 --> 00:02:34,800
immediately want to serve it to browsers

00:02:32,850 --> 00:02:36,600
and that browser section will

00:02:34,800 --> 00:02:38,850
proliferate but we this is the the the

00:02:36,600 --> 00:02:41,250
rough model right like you you author in

00:02:38,850 --> 00:02:44,310
something like an editor you I'll put an

00:02:41,250 --> 00:02:46,260
HTML file and it serve it to the to the

00:02:44,310 --> 00:02:48,780
browser's where it starts to get complex

00:02:46,260 --> 00:02:50,870
is when you not start to need dynamic

00:02:48,780 --> 00:02:53,970
behavior and at the time we didn't have

00:02:50,870 --> 00:02:55,950
the very complex JavaScript that we have

00:02:53,970 --> 00:02:58,739
today so the only way to solve this was

00:02:55,950 --> 00:03:01,080
to add programs behind the server to

00:02:58,739 --> 00:03:03,030
actually introduce that dynamic behavior

00:03:01,080 --> 00:03:04,650
once you need a program you need the

00:03:03,030 --> 00:03:07,230
program needs to remember stuff so you

00:03:04,650 --> 00:03:09,480
also need to add a database and as this

00:03:07,230 --> 00:03:12,750
machine scale as the number of users

00:03:09,480 --> 00:03:16,440
grew grows this starts to have scaling

00:03:12,750 --> 00:03:17,820
issues but all in all like the there are

00:03:16,440 --> 00:03:20,070
many different approaches to this the

00:03:17,820 --> 00:03:22,260
most successful one was the open source

00:03:20,070 --> 00:03:23,880
stack which is why we're all here and

00:03:22,260 --> 00:03:26,820
and that's Kim came to be known as the

00:03:23,880 --> 00:03:28,140
lab stack and this was this is sort of

00:03:26,820 --> 00:03:30,989
the this is still the dominant paradigm

00:03:28,140 --> 00:03:32,610
of serving websites today that you

00:03:30,989 --> 00:03:34,350
author something that's a running

00:03:32,610 --> 00:03:36,510
program you run that server you manage

00:03:34,350 --> 00:03:39,299
that server on request the server

00:03:36,510 --> 00:03:41,970
generates HTML serves it to the browser

00:03:39,299 --> 00:03:43,260
the browser requests the next page from

00:03:41,970 --> 00:03:45,510
the server again and even so on and so

00:03:43,260 --> 00:03:48,209
forth that's that's the cycle of the

00:03:45,510 --> 00:03:50,340
server site generated pages and there's

00:03:48,209 --> 00:03:53,430
some problems with this so first of all

00:03:50,340 --> 00:03:54,959
is a problem with scale right it's fine

00:03:53,430 --> 00:03:57,630
if like you have you know you and your

00:03:54,959 --> 00:03:59,070
mom like visiting your personal blog but

00:03:57,630 --> 00:04:01,230
as you scale to like a million people

00:03:59,070 --> 00:04:02,670
then you start to need caching layers he

00:04:01,230 --> 00:04:04,950
starts to need balancing layers in

00:04:02,670 --> 00:04:07,650
between different instances and this

00:04:04,950 --> 00:04:09,600
adds extra complexity and cost that you

00:04:07,650 --> 00:04:13,820
have to pay for in terms of either dev

00:04:09,600 --> 00:04:16,380
time or your personal wallet and so

00:04:13,820 --> 00:04:18,060
there's one optimization that is pretty

00:04:16,380 --> 00:04:20,489
that's pretty neat that we start to put

00:04:18,060 --> 00:04:22,919
CD ends in front of our our servers and

00:04:20,489 --> 00:04:25,169
that you know is a nice static layer

00:04:22,919 --> 00:04:26,580
that buffers that and so the argument is

00:04:25,169 --> 00:04:27,120
like why not just put everything on the

00:04:26,580 --> 00:04:28,710
sea

00:04:27,120 --> 00:04:31,889
and that's what we're gonna explore

00:04:28,710 --> 00:04:33,750
later on but traditional stacks we add

00:04:31,889 --> 00:04:35,669
static layers we add infrastructure in

00:04:33,750 --> 00:04:37,830
order to improve performance we have no

00:04:35,669 --> 00:04:39,750
other solution because we're we're just

00:04:37,830 --> 00:04:41,910
predicated on this one assumption of a

00:04:39,750 --> 00:04:43,230
running server so the only way to

00:04:41,910 --> 00:04:45,450
improve that performance of the running

00:04:43,230 --> 00:04:48,990
server is to just add ways to scale it

00:04:45,450 --> 00:04:49,889
and to not do work by being by

00:04:48,990 --> 00:04:52,050
essentially cheating

00:04:49,889 --> 00:04:53,880
well cheat what still cheat will cheat

00:04:52,050 --> 00:04:55,380
in different ways and there's a number

00:04:53,880 --> 00:04:57,919
of problems with all to do with sort of

00:04:55,380 --> 00:05:01,110
infrastructure ensuring availability

00:04:57,919 --> 00:05:04,470
migration auto scaling all of this stuff

00:05:01,110 --> 00:05:08,160
comes with managing like a site at scale

00:05:04,470 --> 00:05:09,450
and this is all if your area someone

00:05:08,160 --> 00:05:10,979
trying to build an app if you're trying

00:05:09,450 --> 00:05:13,260
to if you're someone trying to service

00:05:10,979 --> 00:05:15,090
site to users this is not something you

00:05:13,260 --> 00:05:18,120
set out to do it's just something that

00:05:15,090 --> 00:05:20,160
you run into as you try to be you know

00:05:18,120 --> 00:05:21,180
try to try to serve your users and

00:05:20,160 --> 00:05:22,979
that's what we can't kind of call

00:05:21,180 --> 00:05:24,450
accidental complexities so like it's not

00:05:22,979 --> 00:05:25,500
what really what we signed up for is the

00:05:24,450 --> 00:05:26,550
stuff that we have to deal with in order

00:05:25,500 --> 00:05:30,389
to get where we work where we're trying

00:05:26,550 --> 00:05:32,310
to go and so I kind of boil all that

00:05:30,389 --> 00:05:33,419
sort of a number of different problems

00:05:32,310 --> 00:05:35,220
down to just three that's more

00:05:33,419 --> 00:05:37,830
manageable and easy to remember so it's

00:05:35,220 --> 00:05:41,430
security reliability complexity and

00:05:37,830 --> 00:05:43,140
alongside of that it's cost there is

00:05:41,430 --> 00:05:44,970
also to talk about the mean stack and

00:05:43,140 --> 00:05:47,850
this is sort of JavaScript eating the

00:05:44,970 --> 00:05:50,190
world we had the rise of front-end

00:05:47,850 --> 00:05:51,720
frameworks rising up over there over on

00:05:50,190 --> 00:05:53,280
the front end and then we looked at the

00:05:51,720 --> 00:05:55,200
front the back end and we were like okay

00:05:53,280 --> 00:05:56,669
let's make those JavaScript too but we

00:05:55,200 --> 00:05:58,770
didn't really solve anything we just

00:05:56,669 --> 00:06:00,960
rewrote everything and now like you know

00:05:58,770 --> 00:06:03,270
you know the main benefit is if I know

00:06:00,960 --> 00:06:06,030
one language I can I can now be full

00:06:03,270 --> 00:06:08,550
stack across all of them and that's the

00:06:06,030 --> 00:06:10,139
promise of the full size JavaScript and

00:06:08,550 --> 00:06:14,000
it was in the term was coined by Val

00:06:10,139 --> 00:06:16,770
Karpov Karpov actually six years ago now

00:06:14,000 --> 00:06:19,080
so not too not too old but not that

00:06:16,770 --> 00:06:22,169
recent but and and now we call it the

00:06:19,080 --> 00:06:25,139
mean stack the the primary addition to

00:06:22,169 --> 00:06:27,300
this stack is a sort of optimization

00:06:25,139 --> 00:06:29,789
around client-side rendering and routing

00:06:27,300 --> 00:06:32,130
so the idea is being that you deliver a

00:06:29,789 --> 00:06:35,729
fat bundle of JavaScript and then the

00:06:32,130 --> 00:06:39,030
only traffic in individual data pieces

00:06:35,729 --> 00:06:41,069
instead of full HTML chunks when you

00:06:39,030 --> 00:06:42,539
navigate to the subsequent page

00:06:41,069 --> 00:06:45,780
and so that's obviously a nicer

00:06:42,539 --> 00:06:48,449
experience for your users the problems

00:06:45,780 --> 00:06:50,639
with that we've basically tooken taken

00:06:48,449 --> 00:06:52,710
all the lamp stack problems rewritten

00:06:50,639 --> 00:06:55,110
them in JavaScript and then add an extra

00:06:52,710 --> 00:06:57,449
thing of performance and that's where

00:06:55,110 --> 00:06:59,460
front-end JavaScript bundles kept going

00:06:57,449 --> 00:07:01,650
bigger and bigger and bigger if you take

00:06:59,460 --> 00:07:03,360
a real-world sort of budget to this

00:07:01,650 --> 00:07:05,610
someone's done the math X Russell from

00:07:03,360 --> 00:07:08,190
Google has done the math and it works

00:07:05,610 --> 00:07:09,659
out to around about 130 170 kilobytes of

00:07:08,190 --> 00:07:12,180
critical path resources on your first

00:07:09,659 --> 00:07:16,259
load and if you take that math and you

00:07:12,180 --> 00:07:19,069
sort of you sort of map it out that we

00:07:16,259 --> 00:07:21,599
actually crossed that roundabout in 2011

00:07:19,069 --> 00:07:24,090
and the growth of JavaScript on the web

00:07:21,599 --> 00:07:27,599
has continued to grow since then pretty

00:07:24,090 --> 00:07:29,699
much unchecked so we you know and and

00:07:27,599 --> 00:07:31,620
and the primary sort of culprit of this

00:07:29,699 --> 00:07:33,870
is single page apps like this is the

00:07:31,620 --> 00:07:36,360
default output of create react app where

00:07:33,870 --> 00:07:39,000
the the first thing you see on loading a

00:07:36,360 --> 00:07:40,860
page is a blank page because all you do

00:07:39,000 --> 00:07:43,069
is serve an empty div and then you use

00:07:40,860 --> 00:07:45,599
JavaScript to fill it now all this other

00:07:43,069 --> 00:07:46,770
all this other content and then

00:07:45,599 --> 00:07:48,509
something shows up on the screen so it

00:07:46,770 --> 00:07:50,819
takes a especially on low power devices

00:07:48,509 --> 00:07:54,060
it takes a long time for something to be

00:07:50,819 --> 00:07:56,759
interactive and to be painting on the

00:07:54,060 --> 00:07:58,349
screen so that's the model of

00:07:56,759 --> 00:08:00,300
client-side rendering and obviously

00:07:58,349 --> 00:08:01,590
we're not super happy with that and but

00:08:00,300 --> 00:08:04,050
that's what we are stuck with today on

00:08:01,590 --> 00:08:05,909
the mean stack we have managing the

00:08:04,050 --> 00:08:08,210
server stuff and we also managing the

00:08:05,909 --> 00:08:11,159
JavaScript stuff is there a better way

00:08:08,210 --> 00:08:12,629
probably one of the reasons it's slow is

00:08:11,159 --> 00:08:15,000
because all this sequence of stuff that

00:08:12,629 --> 00:08:16,590
has to happen before our user can

00:08:15,000 --> 00:08:18,449
actually see our site like we have to

00:08:16,590 --> 00:08:20,550
request the HTML then we have to request

00:08:18,449 --> 00:08:22,080
all the resources that HTML links to and

00:08:20,550 --> 00:08:23,940
then we decompress and compile and

00:08:22,080 --> 00:08:25,710
render and then we actually make our

00:08:23,940 --> 00:08:27,629
site interactive so one of the

00:08:25,710 --> 00:08:30,389
performance optimizations was actually

00:08:27,629 --> 00:08:33,449
flip this and try to do all that work

00:08:30,389 --> 00:08:36,260
upfront of rendering the HTML in before

00:08:33,449 --> 00:08:38,339
in lining styles and SVG's and then the

00:08:36,260 --> 00:08:40,649
client especially a mobile phone can

00:08:38,339 --> 00:08:42,060
just show that site and then you load

00:08:40,649 --> 00:08:44,790
all the subsequent resources like

00:08:42,060 --> 00:08:47,130
javascript CSS and images so that's what

00:08:44,790 --> 00:08:49,110
we call server-side rendering it's a lot

00:08:47,130 --> 00:08:51,510
faster especially for the overall time

00:08:49,110 --> 00:08:53,579
to interactive and that's the that's the

00:08:51,510 --> 00:08:54,630
sort of current paradigm in terms of

00:08:53,579 --> 00:08:58,620
state of the art in turns

00:08:54,630 --> 00:09:01,260
of how service server side apps and

00:08:58,620 --> 00:09:02,820
sites are rendered still you're stuck

00:09:01,260 --> 00:09:04,170
with this paradigm of either you do

00:09:02,820 --> 00:09:06,420
client-side rendering or you do

00:09:04,170 --> 00:09:08,820
server-side rendering they're fairly

00:09:06,420 --> 00:09:10,890
large architectural decisions and

00:09:08,820 --> 00:09:12,660
they're very binary in terms of the the

00:09:10,890 --> 00:09:14,130
way that you approach them so and

00:09:12,660 --> 00:09:17,460
they're trade-offs may not be acceptable

00:09:14,130 --> 00:09:19,530
to some people so works for how to do

00:09:17,460 --> 00:09:20,940
this without servers like that's the

00:09:19,530 --> 00:09:24,270
whole point we want to do away with the

00:09:20,940 --> 00:09:27,060
complexity of managing servers I'm gonna

00:09:24,270 --> 00:09:29,670
take that and freeze it and I'm gonna

00:09:27,060 --> 00:09:31,110
talk about the environment around web

00:09:29,670 --> 00:09:32,670
dev that also happened that's also

00:09:31,110 --> 00:09:33,930
happening around this this last sort of

00:09:32,670 --> 00:09:36,180
20 year period that we were exploring

00:09:33,930 --> 00:09:38,670
what else has happened in this twenty

00:09:36,180 --> 00:09:40,790
year period get became a thing I don't

00:09:38,670 --> 00:09:43,020
know I mean I can't imagine a time when

00:09:40,790 --> 00:09:44,430
you know I get it so central to our

00:09:43,020 --> 00:09:46,410
floor right now

00:09:44,430 --> 00:09:48,110
that it's that it's that's that's that's

00:09:46,410 --> 00:09:50,310
something that doesn't have to be sold

00:09:48,110 --> 00:09:52,590
we actually uh Nell if I actually call

00:09:50,310 --> 00:09:54,450
this get based workflow where we now

00:09:52,590 --> 00:09:55,800
expect continuous deployment whenever we

00:09:54,450 --> 00:09:58,050
check something in to get and it's valid

00:09:55,800 --> 00:10:00,420
code we want it to be deployed so we can

00:09:58,050 --> 00:10:02,100
do continuous deployment we also have

00:10:00,420 --> 00:10:04,020
some standards that are now industry

00:10:02,100 --> 00:10:05,790
standards like every commit having an

00:10:04,020 --> 00:10:07,620
immutable deploy so you have a reference

00:10:05,790 --> 00:10:09,690
to it you can always check you can you

00:10:07,620 --> 00:10:11,910
can check it if it's a peak if you can

00:10:09,690 --> 00:10:14,760
make a PR you can check a deploy before

00:10:11,910 --> 00:10:16,620
you merge it in to production so you

00:10:14,760 --> 00:10:20,550
have all this autom automated tooling

00:10:16,620 --> 00:10:22,470
around how you deploy second trend the

00:10:20,550 --> 00:10:23,910
API economy also sprung up so these are

00:10:22,470 --> 00:10:25,920
companies that are certain they're

00:10:23,910 --> 00:10:27,720
serving developers they don't serve

00:10:25,920 --> 00:10:29,280
end-users so this all of this is

00:10:27,720 --> 00:10:30,930
functionality that you used to have to

00:10:29,280 --> 00:10:33,030
write yourself like you used to have to

00:10:30,930 --> 00:10:35,130
write image optimization and file

00:10:33,030 --> 00:10:36,930
serving code now you just use cloud Neri

00:10:35,130 --> 00:10:39,840
same for Twilio and basically every

00:10:36,930 --> 00:10:41,610
sponsor out there this is the IP api

00:10:39,840 --> 00:10:42,900
economy which means that a lot of this

00:10:41,610 --> 00:10:44,910
functionality that you used to have to

00:10:42,900 --> 00:10:46,950
hand code that everyone else did as well

00:10:44,910 --> 00:10:49,580
you no longer have to do so you focus on

00:10:46,950 --> 00:10:51,780
the thing that makes your app your site

00:10:49,580 --> 00:10:55,140
special right all of this is just

00:10:51,780 --> 00:10:57,750
commoditize a third trend will talk

00:10:55,140 --> 00:10:59,550
about the jam stack landscape that's the

00:10:57,750 --> 00:11:01,380
that's the API economy plus all these

00:10:59,550 --> 00:11:03,540
other services that have been brought up

00:11:01,380 --> 00:11:04,920
so these these are - this here's the

00:11:03,540 --> 00:11:06,810
chart here's a Java stack landscape

00:11:04,920 --> 00:11:08,230
chart from one of the investors the

00:11:06,810 --> 00:11:10,720
venture capitalists interested

00:11:08,230 --> 00:11:12,370
investing in this landscape and there is

00:11:10,720 --> 00:11:15,910
another one just to show you even more

00:11:12,370 --> 00:11:17,380
logos to confuse you but but I just want

00:11:15,910 --> 00:11:19,630
to give the idea of the idea of the

00:11:17,380 --> 00:11:20,860
breadth of a number of players and the

00:11:19,630 --> 00:11:22,150
breadth of them in this in this

00:11:20,860 --> 00:11:23,950
ecosystem

00:11:22,150 --> 00:11:25,690
I actually just published this morning

00:11:23,950 --> 00:11:27,160
at Jeff's tech for indie hackers so if

00:11:25,690 --> 00:11:28,900
you're if you're a bootstrapper you

00:11:27,160 --> 00:11:30,130
don't want to go after venture capital

00:11:28,900 --> 00:11:32,410
and you want to make money serving the

00:11:30,130 --> 00:11:33,520
job stack developers that's a good guide

00:11:32,410 --> 00:11:35,950
as well if you want to check that out

00:11:33,520 --> 00:11:39,670
I'm pretty passionate about about indie

00:11:35,950 --> 00:11:42,460
hackers third trend service Amazon

00:11:39,670 --> 00:11:45,640
launches this in 2014 closely copied by

00:11:42,460 --> 00:11:47,080
Google and Azure but broadly like it's

00:11:45,640 --> 00:11:49,150
not a long longer a question that you

00:11:47,080 --> 00:11:51,400
can run production workloads on on

00:11:49,150 --> 00:11:52,660
server list right like there's you know

00:11:51,400 --> 00:11:54,250
all these all these financial companies

00:11:52,660 --> 00:11:56,440
running trillions of dollars trillions

00:11:54,250 --> 00:11:58,720
of requests a day on server lists so

00:11:56,440 --> 00:12:00,250
that enables a lot more things that can

00:11:58,720 --> 00:12:01,660
be done without a running server without

00:12:00,250 --> 00:12:03,880
managing your own server you can just

00:12:01,660 --> 00:12:07,120
put a lot of arbitrary logic on

00:12:03,880 --> 00:12:08,410
serverless fourth thing build tools we

00:12:07,120 --> 00:12:10,960
have all this wonderful build tools

00:12:08,410 --> 00:12:11,860
covered by then in the earlier talk I'm

00:12:10,960 --> 00:12:13,510
not going to go through all that because

00:12:11,860 --> 00:12:15,400
we don't have time but these are these

00:12:13,510 --> 00:12:17,410
are just like increasingly professional

00:12:15,400 --> 00:12:20,080
ways of building and delivering

00:12:17,410 --> 00:12:22,240
JavaScript applications fifth fifth

00:12:20,080 --> 00:12:23,920
trend and last final trend is static

00:12:22,240 --> 00:12:25,780
site generators is there's a resurgence

00:12:23,920 --> 00:12:28,660
in static site generators that we've

00:12:25,780 --> 00:12:31,690
been tracking in since 2015 it's not

00:12:28,660 --> 00:12:34,330
just typical static site generators like

00:12:31,690 --> 00:12:37,480
Hugo and Jekyll but also newer versions

00:12:34,330 --> 00:12:39,250
of newer sort of JavaScript enabled

00:12:37,480 --> 00:12:40,810
I'd say versions of static site

00:12:39,250 --> 00:12:42,640
generators like next years and Gatsby

00:12:40,810 --> 00:12:44,260
and so there's this whole new generation

00:12:42,640 --> 00:12:45,430
and what they what they do that's

00:12:44,260 --> 00:12:47,500
different from the previous generation

00:12:45,430 --> 00:12:49,810
is static site generators is that they

00:12:47,500 --> 00:12:51,370
render out all the HTML beforehand but

00:12:49,810 --> 00:12:52,570
they also ship a bundle a javascript

00:12:51,370 --> 00:12:56,170
under that makes it interactive and

00:12:52,570 --> 00:12:57,820
makes it into a client side app and sort

00:12:56,170 --> 00:13:00,370
of hydrates your whole app after you

00:12:57,820 --> 00:13:03,100
sort of send it to your users and and so

00:13:00,370 --> 00:13:05,290
that introduces a more performance and

00:13:03,100 --> 00:13:07,390
simpler third dimension which is which

00:13:05,290 --> 00:13:08,860
we call static rendering and that does

00:13:07,390 --> 00:13:10,990
the least amount of work because you're

00:13:08,860 --> 00:13:13,030
basically cheating by moving network to

00:13:10,990 --> 00:13:15,550
a build step instead of doing it on

00:13:13,030 --> 00:13:17,650
request does that make sense for your

00:13:15,550 --> 00:13:19,090
application only you can decide but it

00:13:17,650 --> 00:13:22,070
does make sense for a lot a lot of

00:13:19,090 --> 00:13:23,660
people so so now you have this whole

00:13:22,070 --> 00:13:26,690
spectrum because of the flexibility of

00:13:23,660 --> 00:13:28,790
JavaScript to do to vendors shall render

00:13:26,690 --> 00:13:30,680
individual components to do as much to

00:13:28,790 --> 00:13:32,360
pick and choose as much dynamicism as

00:13:30,680 --> 00:13:34,430
you want I highly recommend checking out

00:13:32,360 --> 00:13:36,500
this article rendering on the web from

00:13:34,430 --> 00:13:38,090
the Google dev rel team to really

00:13:36,500 --> 00:13:39,290
explore this as you as you sort of think

00:13:38,090 --> 00:13:42,020
about your architecture for your client

00:13:39,290 --> 00:13:44,390
side and server side apps so what is the

00:13:42,020 --> 00:13:46,910
summation of all these trends all this

00:13:44,390 --> 00:13:48,860
increasing sort of movement in

00:13:46,910 --> 00:13:51,350
JavaScript what is the summation of that

00:13:48,860 --> 00:13:53,390
and that's where I come through the Java

00:13:51,350 --> 00:13:55,370
stack so I think you know I I was really

00:13:53,390 --> 00:13:57,740
I wasn't really sold until I understood

00:13:55,370 --> 00:13:59,840
all that this is the combination of all

00:13:57,740 --> 00:14:02,180
the trends that are going on in a web

00:13:59,840 --> 00:14:03,530
dev space so if we really look at the

00:14:02,180 --> 00:14:05,510
the current definition of a Java stack

00:14:03,530 --> 00:14:06,920
it's it's the modern architecture for

00:14:05,510 --> 00:14:08,900
creating fast and secure sites and

00:14:06,920 --> 00:14:10,670
dynamic apps with JavaScript API is and

00:14:08,900 --> 00:14:12,170
pre-rendered markup served with our web

00:14:10,670 --> 00:14:14,840
servers so that's the core thing that

00:14:12,170 --> 00:14:17,240
you're serving from it's capable of

00:14:14,840 --> 00:14:18,800
being being served from CDN that's the

00:14:17,240 --> 00:14:20,960
inside that Chris Collier had that

00:14:18,800 --> 00:14:22,850
everything can be CDN hosted and the

00:14:20,960 --> 00:14:24,860
other key thing that we I should point

00:14:22,850 --> 00:14:26,810
out is that it's it's an it's an or and

00:14:24,860 --> 00:14:28,280
not an end so so you don't have to use

00:14:26,810 --> 00:14:29,720
JavaScript if you don't need it but it's

00:14:28,280 --> 00:14:31,310
there if you want it and it's there for

00:14:29,720 --> 00:14:33,410
you to progressively upgrade your

00:14:31,310 --> 00:14:36,800
functionality as you as you proceed in

00:14:33,410 --> 00:14:38,600
your development of your site job so

00:14:36,800 --> 00:14:40,340
Jeff's death means capable of being

00:14:38,600 --> 00:14:44,050
served directly from a CDN and that's a

00:14:40,340 --> 00:14:46,090
fantastic implication for cost security

00:14:44,050 --> 00:14:49,250
reliability all that all that good stuff

00:14:46,090 --> 00:14:51,890
what are this the the scope of static

00:14:49,250 --> 00:14:53,600
site generators so this stuff at the top

00:14:51,890 --> 00:14:55,550
I've sort of listed as sort of first

00:14:53,600 --> 00:14:57,890
generation static site generators and a

00:14:55,550 --> 00:14:59,420
second are more tied with JavaScript

00:14:57,890 --> 00:15:01,340
frameworks it's up to you to choose

00:14:59,420 --> 00:15:03,950
based on your needs and your the the

00:15:01,340 --> 00:15:06,380
preferences of your team we don't really

00:15:03,950 --> 00:15:08,750
have we don't really sort of impose

00:15:06,380 --> 00:15:09,650
which which one you should choose but

00:15:08,750 --> 00:15:11,510
obviously you can do more with

00:15:09,650 --> 00:15:13,400
JavaScript if if if you choose and

00:15:11,510 --> 00:15:15,980
that's what I that's what I do

00:15:13,400 --> 00:15:17,480
what are Jeff cycles so Jessica's not

00:15:15,980 --> 00:15:19,340
nullify specific even though I worked

00:15:17,480 --> 00:15:21,250
there I do like to promote other ways of

00:15:19,340 --> 00:15:24,470
you doing it obviously the first

00:15:21,250 --> 00:15:27,200
progenitor of this is github pages 20

00:15:24,470 --> 00:15:29,180
rcent warner is also a big jam stack fan

00:15:27,200 --> 00:15:30,710
but you can host it in an s3 bucket you

00:15:29,180 --> 00:15:33,590
can host it on a Raspberry Pi you can

00:15:30,710 --> 00:15:34,700
host it on-site AWS Ornella fie it

00:15:33,590 --> 00:15:35,750
doesn't really matter and that's the

00:15:34,700 --> 00:15:37,699
whole portability

00:15:35,750 --> 00:15:39,529
of it because you're only just serving

00:15:37,699 --> 00:15:41,389
static files and therefore you're not

00:15:39,529 --> 00:15:43,129
building any of these assumptions which

00:15:41,389 --> 00:15:44,750
might go away so it's a more robust

00:15:43,129 --> 00:15:47,810
assumption because it's a it's a tale as

00:15:44,750 --> 00:15:50,959
old as web development who uses Jam

00:15:47,810 --> 00:15:52,370
stack open source frameworks venture

00:15:50,959 --> 00:15:54,019
capitalist venture capitalist like

00:15:52,370 --> 00:15:57,110
Sequoia especially a magazine is like a

00:15:54,019 --> 00:15:59,120
giant giant magazine and they're all

00:15:57,110 --> 00:16:01,279
using Jeff stack including Citrix TriNet

00:15:59,120 --> 00:16:03,709
and PayPal which are all Jack stack

00:16:01,279 --> 00:16:05,300
users I like to I like to actually talk

00:16:03,709 --> 00:16:08,240
about net lafha as well Matloff eyes app

00:16:05,300 --> 00:16:09,500
is also served on that laughs I and a

00:16:08,240 --> 00:16:10,610
lot of people are surprised by that

00:16:09,500 --> 00:16:13,279
they're like you can do that all this

00:16:10,610 --> 00:16:15,379
like authenticated dynamic API driven

00:16:13,279 --> 00:16:18,500
stuff and I'm like yeah and it's it's

00:16:15,379 --> 00:16:20,689
absolutely fast and easy to maintain I

00:16:18,500 --> 00:16:22,250
also like to bring up PayPal as an

00:16:20,689 --> 00:16:24,019
example PayPal dot me is on the jam

00:16:22,250 --> 00:16:25,490
stack and they are not know if I

00:16:24,019 --> 00:16:27,050
customers in fact they actually had

00:16:25,490 --> 00:16:29,149
financial sort of certification

00:16:27,050 --> 00:16:30,980
requirements so they had to build their

00:16:29,149 --> 00:16:32,689
own Jeff stack infrastructure so I like

00:16:30,980 --> 00:16:34,610
I like to bring this up because it shows

00:16:32,689 --> 00:16:36,050
that is independent value apart from

00:16:34,610 --> 00:16:37,069
buying into someone else's

00:16:36,050 --> 00:16:38,959
infrastructure you can build it for

00:16:37,069 --> 00:16:40,459
yourself if it makes sense for you so

00:16:38,959 --> 00:16:42,259
definitely check out this talk if you're

00:16:40,459 --> 00:16:46,009
interested in building it in your

00:16:42,259 --> 00:16:47,329
enterprise I think less like you know I

00:16:46,009 --> 00:16:48,620
don't want to emphasize this too much

00:16:47,329 --> 00:16:50,000
but I think the developer experience is

00:16:48,620 --> 00:16:52,490
also worth talking about

00:16:50,000 --> 00:16:55,250
in the fact that the the way that you

00:16:52,490 --> 00:16:56,930
develop locally you just check it's it's

00:16:55,250 --> 00:16:58,189
mirrored in the way that you deploy and

00:16:56,930 --> 00:16:59,990
the only thing connecting them is the

00:16:58,189 --> 00:17:02,360
way that you check it you check your

00:16:59,990 --> 00:17:04,579
code in to get so the the way that you

00:17:02,360 --> 00:17:06,470
deploy and build is is the same way that

00:17:04,579 --> 00:17:08,480
you do they develop locally and I think

00:17:06,470 --> 00:17:11,659
that's a very nice rip debuggable

00:17:08,480 --> 00:17:13,280
developer experience and I have a lot to

00:17:11,659 --> 00:17:15,589
to say about that but I don't have time

00:17:13,280 --> 00:17:17,839
this is the only metal file specific

00:17:15,589 --> 00:17:20,539
slide in the entire talk so now if I is

00:17:17,839 --> 00:17:22,669
based notify lives and dies on serving

00:17:20,539 --> 00:17:24,679
the Java stack developer and it's it's

00:17:22,669 --> 00:17:27,559
the the whole company's based predicated

00:17:24,679 --> 00:17:30,080
on if we assume that you that you do

00:17:27,559 --> 00:17:31,700
static site generator generating what

00:17:30,080 --> 00:17:33,140
can we provide you so we provide you

00:17:31,700 --> 00:17:35,330
things like instant roll backs the

00:17:33,140 --> 00:17:36,860
previews branch functions one of the

00:17:35,330 --> 00:17:39,200
things I like to talk about is analytics

00:17:36,860 --> 00:17:41,570
as well because everything is served

00:17:39,200 --> 00:17:43,250
from a CDN we actually provide an

00:17:41,570 --> 00:17:45,049
server-side analytics that cannot be

00:17:43,250 --> 00:17:46,370
blocked by a client-side sort of ad

00:17:45,049 --> 00:17:48,649
blockers because literally if you're

00:17:46,370 --> 00:17:49,580
requesting the file we have the logs on

00:17:48,649 --> 00:17:51,200
that on your

00:17:49,580 --> 00:17:53,000
I mean we can serve you we can show you

00:17:51,200 --> 00:17:54,530
that data analytics as well so that's

00:17:53,000 --> 00:17:57,160
that's been a very successful launch for

00:17:54,530 --> 00:17:59,900
this year yeah so let's do a quick recap

00:17:57,160 --> 00:18:01,640
when and where do we come from in terms

00:17:59,900 --> 00:18:06,410
of all of this like the open web is

00:18:01,640 --> 00:18:08,300
under threat the usage of mobile over

00:18:06,410 --> 00:18:10,430
desktop has has been taken over I think

00:18:08,300 --> 00:18:13,630
in the past two three years and of

00:18:10,430 --> 00:18:16,130
mobile most of it is just native app and

00:18:13,630 --> 00:18:17,690
so so we really need to innovate in

00:18:16,130 --> 00:18:20,900
terms of the way that we deliver our

00:18:17,690 --> 00:18:22,760
websites in web apps and it's probably

00:18:20,900 --> 00:18:25,370
something like a gem stack something

00:18:22,760 --> 00:18:26,810
like a progressive web app and and and

00:18:25,370 --> 00:18:30,020
this will this would be the way that we

00:18:26,810 --> 00:18:32,180
try to fight for the open web and so my

00:18:30,020 --> 00:18:34,550
answer to the opening question about how

00:18:32,180 --> 00:18:36,140
do we deliver our sites is that we

00:18:34,550 --> 00:18:39,410
should deliver it the same way that we

00:18:36,140 --> 00:18:41,660
deliver mobile apps we should build from

00:18:39,410 --> 00:18:43,130
source code into the static assets and

00:18:41,660 --> 00:18:45,620
we should serve the static assets from a

00:18:43,130 --> 00:18:47,570
CDN and that's the that's for me like I

00:18:45,620 --> 00:18:49,820
that that was that was the point at

00:18:47,570 --> 00:18:52,190
which I converted from Jeff Zack skeptic

00:18:49,820 --> 00:18:55,310
into a believer so that's my entire talk

00:18:52,190 --> 00:18:56,990
if you want to get the slides ask any

00:18:55,310 --> 00:18:59,240
questions I'm gonna stay behind after

00:18:56,990 --> 00:19:02,820
but thank you so much for your time

00:18:59,240 --> 00:19:08,240
[Applause]

00:19:02,820 --> 00:19:08,240

YouTube URL: https://www.youtube.com/watch?v=aiIQ2FlXXjE


