Title: Gleb Bahmutov - Achievement Unlocked: Drive development, increase velocity, and write blissful...
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	Gleb Bahmutov, VP of Engineering at Cypress.io, will demonstrate how writing high value automated tests enables teams to achieve these goals. He will show you how teams use tools like Cypress to help them write fast, easy, and reliable tests that boost quality, developer productivity, and team velocity.

Additionally, Gleb will detail how testing successfully integrates into the release pipeline. He’ll cover how high-value tests map directly to business requirements, and demonstrate how day-to-day development can be driven by tests. He’ll also cover CI integration, keeping build times fast with parallelization, and cover best practices for utilizing Github Status Checks and PR review. Finally, he’ll also showcase how the value of tests can be expanded with code coverage and visual regression.
Captions: 
	00:00:00,650 --> 00:00:03,750
[Music]

00:00:04,879 --> 00:00:10,650
welcome everyone welcome to achievement

00:00:08,670 --> 00:00:15,120
unlocked dry development increased

00:00:10,650 --> 00:00:16,619
velocity with morale but thank you to

00:00:15,120 --> 00:00:18,690
organize this for this last-minute

00:00:16,619 --> 00:00:21,300
substitution I'm really happy to be here

00:00:18,690 --> 00:00:24,029
at all things open you will see why I'm

00:00:21,300 --> 00:00:26,070
Gleb akhmetov I run engineering at

00:00:24,029 --> 00:00:27,180
Cyprus at i/o I've been doing it for two

00:00:26,070 --> 00:00:29,910
and a half years and I've been using

00:00:27,180 --> 00:00:33,570
Cyprus for a year before before we do

00:00:29,910 --> 00:00:37,170
this I have to do this announcement that

00:00:33,570 --> 00:00:38,910
our planet is an immediate danger it's

00:00:37,170 --> 00:00:40,950
completely out of balance right now if

00:00:38,910 --> 00:00:43,670
you watch what's happening in Alaska in

00:00:40,950 --> 00:00:45,899
Arctic Circle in Europe with heat waves

00:00:43,670 --> 00:00:48,600
assuring that the system is blinking red

00:00:45,899 --> 00:00:51,570
it's coming apart at the seams and if we

00:00:48,600 --> 00:00:53,149
don't do anything immediately pretty

00:00:51,570 --> 00:00:56,489
much billions of people will die

00:00:53,149 --> 00:00:59,280
so we have to act quickly and we have to

00:00:56,489 --> 00:01:03,629
act today I'm changing my behavior so

00:00:59,280 --> 00:01:06,600
one child no flying trying to scale down

00:01:03,629 --> 00:01:10,049
no driving electrical bicycle electrical

00:01:06,600 --> 00:01:12,869
power so on most important but we have

00:01:10,049 --> 00:01:14,880
to tell others but this is the danger so

00:01:12,869 --> 00:01:17,460
I'm telling you because I can influence

00:01:14,880 --> 00:01:20,100
my family my co-workers and my audience

00:01:17,460 --> 00:01:23,250
and you should do the same you have to

00:01:20,100 --> 00:01:24,570
vote like it matters because in a couple

00:01:23,250 --> 00:01:25,590
of years if you don't vote it's not

00:01:24,570 --> 00:01:28,799
going to matter anymore

00:01:25,590 --> 00:01:30,960
so I'm part of citizens climate Lobby

00:01:28,799 --> 00:01:32,909
we're trying to put carbon pricing in

00:01:30,960 --> 00:01:34,619
the United States I assume that some

00:01:32,909 --> 00:01:37,409
majority of people here are American

00:01:34,619 --> 00:01:40,560
citizen you should do the same and get

00:01:37,409 --> 00:01:43,229
your representative to support this as a

00:01:40,560 --> 00:01:45,000
personal pledge I pledge that if your

00:01:43,229 --> 00:01:48,329
company is working on a green solution

00:01:45,000 --> 00:01:51,090
or climate change solution even if your

00:01:48,329 --> 00:01:52,079
commercial entity I volunteer to help in

00:01:51,090 --> 00:01:55,409
any way I can

00:01:52,079 --> 00:01:56,810
mostly end-to-end testing examples

00:01:55,409 --> 00:02:00,119
phablet earth

00:01:56,810 --> 00:02:02,070
ok so what was emotional because this

00:02:00,119 --> 00:02:04,790
directly affects my life the life of

00:02:02,070 --> 00:02:08,399
future generation the life of my child

00:02:04,790 --> 00:02:10,080
ok now smooth transition to Cyprus a

00:02:08,399 --> 00:02:11,730
urine testing and testing everything

00:02:10,080 --> 00:02:12,870
that runs on the web we're a small

00:02:11,730 --> 00:02:15,150
company around

00:02:12,870 --> 00:02:17,310
people right now we've been growing so

00:02:15,150 --> 00:02:20,190
used to be four or five people when I

00:02:17,310 --> 00:02:21,599
joined but now we expanded we have

00:02:20,190 --> 00:02:25,250
pretty much all remote we're based in

00:02:21,599 --> 00:02:28,260
Atlanta but I'm the only one in Boston a

00:02:25,250 --> 00:02:29,909
Cypress test looks like this you visit

00:02:28,260 --> 00:02:32,959
our website could be localhost could be

00:02:29,909 --> 00:02:36,000
remote and then you type into boxes and

00:02:32,959 --> 00:02:38,430
when you check how many items with to do

00:02:36,000 --> 00:02:41,459
list shows this is a typical end-to-end

00:02:38,430 --> 00:02:44,970
Cypress test and then you say Cypress

00:02:41,459 --> 00:02:46,739
open and this is a GU if it opens and

00:02:44,970 --> 00:02:48,840
runs either a single test file and you

00:02:46,739 --> 00:02:50,989
can see the website under test and all

00:02:48,840 --> 00:02:53,340
the tasks kind of controlling things

00:02:50,989 --> 00:02:55,560
where is the file watch so if you change

00:02:53,340 --> 00:02:57,109
something but s3 runs automatically so

00:02:55,560 --> 00:02:59,519
you can work quickly

00:02:57,109 --> 00:03:01,170
you also see dump snapshots are shown

00:02:59,519 --> 00:03:03,150
right now where if you hover over

00:03:01,170 --> 00:03:08,129
command you see how application look at

00:03:03,150 --> 00:03:11,970
that particular moment on CI you run

00:03:08,129 --> 00:03:14,700
Cypress run and then you run each speck

00:03:11,970 --> 00:03:17,519
at a time there is no more file watching

00:03:14,700 --> 00:03:18,989
cuz you just running all the tests but

00:03:17,519 --> 00:03:21,690
it's no more dump snapshots because you

00:03:18,989 --> 00:03:24,000
don't need them but what you do get is

00:03:21,690 --> 00:03:26,069
every time where is the test failure you

00:03:24,000 --> 00:03:28,470
get a screenshot of your application

00:03:26,069 --> 00:03:30,780
Edward incident automatically even

00:03:28,470 --> 00:03:33,510
better you get automatic video of a

00:03:30,780 --> 00:03:35,970
whole test run on every platform every

00:03:33,510 --> 00:03:40,470
operating system nothing to install you

00:03:35,970 --> 00:03:42,569
get it right out of a box so we were

00:03:40,470 --> 00:03:44,160
trying to sell this we're trying to

00:03:42,569 --> 00:03:46,079
approach companies and say hey if you

00:03:44,160 --> 00:03:49,470
pay as money we'll give you this cool

00:03:46,079 --> 00:03:52,139
testing tool and that didn't work so in

00:03:49,470 --> 00:03:54,959
May of 2017 we announced what we're

00:03:52,139 --> 00:03:57,180
going up and source all the things which

00:03:54,959 --> 00:03:58,739
explains why I'm so excited to be at

00:03:57,180 --> 00:04:00,510
this conference because it's literally

00:03:58,739 --> 00:04:03,150
the name of a conference just you know

00:04:00,510 --> 00:04:05,609
different order so we announced it in

00:04:03,150 --> 00:04:07,260
May and we actually mailed by a repo

00:04:05,609 --> 00:04:10,500
after preparing it after simplifying

00:04:07,260 --> 00:04:12,299
everything we made it open exactly two

00:04:10,500 --> 00:04:14,190
years ago and this is what happened

00:04:12,299 --> 00:04:15,900
afterwards before that very cool was

00:04:14,190 --> 00:04:18,750
there but it only was the issue tracker

00:04:15,900 --> 00:04:20,909
for people who had problems but after we

00:04:18,750 --> 00:04:23,820
actually put code and open source anyone

00:04:20,909 --> 00:04:26,590
could just within skyrocketed and I'm

00:04:23,820 --> 00:04:28,570
really happy to be part of this journey

00:04:26,590 --> 00:04:31,180
this is a typical reaction from our

00:04:28,570 --> 00:04:33,880
users I just felt in love with Cyprus AO

00:04:31,180 --> 00:04:36,910
so we have hundreds of tweets like that

00:04:33,880 --> 00:04:38,500
people use words like love and Cyprus

00:04:36,910 --> 00:04:42,130
and testing in the same sentence and

00:04:38,500 --> 00:04:44,200
what doesn't happen so we still have

00:04:42,130 --> 00:04:47,950
this as a goal we still have as a goal

00:04:44,200 --> 00:04:53,350
build the best end-to-end test run in a

00:04:47,950 --> 00:04:55,210
world we also have the goal to teach

00:04:53,350 --> 00:04:58,060
developers how to use it how to write

00:04:55,210 --> 00:05:00,970
good end-to-end tests and then we have

00:04:58,060 --> 00:05:04,060
as a goal to teach developers how to run

00:05:00,970 --> 00:05:05,350
their tests on CI don't let someone else

00:05:04,060 --> 00:05:08,020
write your test you as a developer

00:05:05,350 --> 00:05:10,210
should be able to write the software the

00:05:08,020 --> 00:05:14,080
test and run the test and be responsible

00:05:10,210 --> 00:05:15,460
for the tests in this presentation also

00:05:14,080 --> 00:05:18,250
a little bit of my thinking about

00:05:15,460 --> 00:05:19,930
testing and then I'll explain how a

00:05:18,250 --> 00:05:20,590
company actually works by giving things

00:05:19,930 --> 00:05:24,250
away

00:05:20,590 --> 00:05:25,360
we keep you know and then I'll show a

00:05:24,250 --> 00:05:25,950
preview of what we're working on right

00:05:25,360 --> 00:05:29,560
now

00:05:25,950 --> 00:05:31,180
so I'm Gleb Bachmann tough I have

00:05:29,560 --> 00:05:33,880
hundreds of open-source projects mostly

00:05:31,180 --> 00:05:37,900
in JavaScript I have a blog personal

00:05:33,880 --> 00:05:42,610
side Twitter all there and these slides

00:05:37,900 --> 00:05:45,190
are on Cypress slides that come so why

00:05:42,610 --> 00:05:47,890
do I write tests after programming for

00:05:45,190 --> 00:05:50,740
close to 30 years I figure out one thing

00:05:47,890 --> 00:05:52,450
was myself my code never works it

00:05:50,740 --> 00:05:54,640
doesn't work on the first try doesn't

00:05:52,450 --> 00:05:56,919
work on the second try and use it

00:05:54,640 --> 00:05:58,570
doesn't work on the tenth try so I doubt

00:05:56,919 --> 00:06:00,990
myself every time I write a piece of

00:05:58,570 --> 00:06:04,060
code I know it's not going to run so

00:06:00,990 --> 00:06:06,160
just allow me to actually release the

00:06:04,060 --> 00:06:08,020
doubt people told me all you should

00:06:06,160 --> 00:06:10,270
write but specific type of test event we

00:06:08,020 --> 00:06:11,830
talk about testing pyramid and today I'm

00:06:10,270 --> 00:06:16,200
here telling you like don't talk about

00:06:11,830 --> 00:06:19,180
testing pyramid like but solves nothing

00:06:16,200 --> 00:06:21,340
instead if I have a piece of code I want

00:06:19,180 --> 00:06:23,590
to write a test if I have an API I want

00:06:21,340 --> 00:06:25,900
to write a test if I have a web

00:06:23,590 --> 00:06:29,580
application I want to write a test so

00:06:25,900 --> 00:06:31,300
you have to realize there is only a test

00:06:29,580 --> 00:06:33,850
for a thing

00:06:31,300 --> 00:06:37,810
I doubt works it doesn't matter what you

00:06:33,850 --> 00:06:39,330
call it so if a thing is a function you

00:06:37,810 --> 00:06:41,669
write function test

00:06:39,330 --> 00:06:45,360
we call those can attest ninjas but who

00:06:41,669 --> 00:06:46,889
cares if a thing is a component while

00:06:45,360 --> 00:06:49,379
you write a test for that component

00:06:46,889 --> 00:06:51,120
worried for example mount it and then

00:06:49,379 --> 00:06:56,099
you interact and then you get something

00:06:51,120 --> 00:06:58,169
like this where you can see it if a

00:06:56,099 --> 00:07:00,360
thing is an API while you write an API

00:06:58,169 --> 00:07:02,729
test where you just call API get

00:07:00,360 --> 00:07:06,060
something back and you inspect the

00:07:02,729 --> 00:07:08,849
response maybe where is the GUI attached

00:07:06,060 --> 00:07:10,889
to a test if a thing is the web

00:07:08,849 --> 00:07:13,889
application like in this case you write

00:07:10,889 --> 00:07:17,490
a test and then the test runs and you

00:07:13,889 --> 00:07:19,710
can see what happened if a thing is web

00:07:17,490 --> 00:07:21,990
application style not functionality but

00:07:19,710 --> 00:07:26,009
the style the colors or fonts you write

00:07:21,990 --> 00:07:27,389
a test where you take snapshots and very

00:07:26,009 --> 00:07:29,849
usually services or libraries but

00:07:27,389 --> 00:07:31,740
compare previous snapshots visually to

00:07:29,849 --> 00:07:34,139
the new snapshots in this case if

00:07:31,740 --> 00:07:36,990
someone goes and changes some SVG field

00:07:34,139 --> 00:07:40,800
color with pieces no longer yellow but

00:07:36,990 --> 00:07:46,020
green right well your test has revealed

00:07:40,800 --> 00:07:49,080
it if a thing is an electron app you

00:07:46,020 --> 00:07:51,870
write a test so recently we released an

00:07:49,080 --> 00:07:53,880
alpha alpha beta preview alpha version

00:07:51,870 --> 00:07:56,099
of support for testing electron

00:07:53,880 --> 00:07:58,020
applications where you just say electron

00:07:56,099 --> 00:08:01,050
visit instead of site visit you say

00:07:58,020 --> 00:08:03,569
electron visit and you give us the final

00:08:01,050 --> 00:08:05,520
name of your code which creates by

00:08:03,569 --> 00:08:06,389
electron window and then we actually

00:08:05,520 --> 00:08:09,029
call it for you

00:08:06,389 --> 00:08:12,810
and so Cypress can run your electron app

00:08:09,029 --> 00:08:15,779
and be testing it if a thing is

00:08:12,810 --> 00:08:18,120
accessibility you write a test in this

00:08:15,779 --> 00:08:19,710
case you inject ax which is really part

00:08:18,120 --> 00:08:22,469
of accessibility library it's just

00:08:19,710 --> 00:08:26,219
JavaScript and when you say check the

00:08:22,469 --> 00:08:28,110
color contrast so you can write lots of

00:08:26,219 --> 00:08:30,479
lots of lots of types of tests

00:08:28,110 --> 00:08:32,490
and we've been trying to create Cypress

00:08:30,479 --> 00:08:34,919
as a platform way it's just JavaScript

00:08:32,490 --> 00:08:38,390
and you can write additional plugins for

00:08:34,919 --> 00:08:41,669
doing those different types of tests and

00:08:38,390 --> 00:08:43,800
people have been writing them on our

00:08:41,669 --> 00:08:46,230
page of plugins we have more than 75

00:08:43,800 --> 00:08:48,930
some of them you know we've written but

00:08:46,230 --> 00:08:50,459
majority are outside contributors right

00:08:48,930 --> 00:08:52,440
something specific to framework

00:08:50,459 --> 00:08:54,660
something specific to visual testing

00:08:52,440 --> 00:08:58,440
something specific for reporters and

00:08:54,660 --> 00:09:01,350
preprocessors so here's an example

00:08:58,440 --> 00:09:03,720
that's very realistic anything kind of

00:09:01,350 --> 00:09:06,810
brings a point why we are doing this

00:09:03,720 --> 00:09:08,610
plugins model people always ask us well

00:09:06,810 --> 00:09:10,500
what should I be testing in my

00:09:08,610 --> 00:09:12,509
application because you can design test

00:09:10,500 --> 00:09:17,759
in many many more ways so we've written

00:09:12,509 --> 00:09:19,230
as an answer code coverage plugin so

00:09:17,759 --> 00:09:21,290
imagine you have application in this

00:09:19,230 --> 00:09:23,250
case you have to do app write because

00:09:21,290 --> 00:09:26,009
you're not allowed to show any other

00:09:23,250 --> 00:09:27,959
apps so what kind of features does it

00:09:26,009 --> 00:09:29,550
have right so you can come up with like

00:09:27,959 --> 00:09:31,379
a list of features and you have like a

00:09:29,550 --> 00:09:33,120
Microsoft Word document that says well

00:09:31,379 --> 00:09:36,449
feature a user should be able to add

00:09:33,120 --> 00:09:38,879
items feature be user can complete items

00:09:36,449 --> 00:09:40,800
and feature see user can delete to-do

00:09:38,879 --> 00:09:43,170
items so you come up with at least with

00:09:40,800 --> 00:09:46,050
your product owner manually or in your

00:09:43,170 --> 00:09:47,850
tracking software and then you start

00:09:46,050 --> 00:09:51,060
writing tests and you keep track of what

00:09:47,850 --> 00:09:51,720
you have tested manually so you say ok I

00:09:51,060 --> 00:09:54,079
have a test

00:09:51,720 --> 00:09:56,970
it's called ads to do so for feature a I

00:09:54,079 --> 00:10:00,300
have a test called complete status for

00:09:56,970 --> 00:10:03,449
feature B I don't have any tests but has

00:10:00,300 --> 00:10:06,149
delete to do in its name so it's missing

00:10:03,449 --> 00:10:08,850
so I'll add it so you manually complete

00:10:06,149 --> 00:10:11,009
the picture and I think this manual

00:10:08,850 --> 00:10:12,389
writing and matching and writing

00:10:11,009 --> 00:10:15,089
matching is good when you is just

00:10:12,389 --> 00:10:17,009
starting but after a while it becomes

00:10:15,089 --> 00:10:18,899
really hard to keep in sync but your

00:10:17,009 --> 00:10:20,759
tests and your features where you have

00:10:18,899 --> 00:10:23,699
new features appearing all features

00:10:20,759 --> 00:10:25,439
changing or being deprecated I think

00:10:23,699 --> 00:10:27,120
it's really hard it's hard because the

00:10:25,439 --> 00:10:30,329
first test is usually the easiest one to

00:10:27,120 --> 00:10:31,769
keep track manually to multi-step arrive

00:10:30,329 --> 00:10:33,329
it's fine

00:10:31,769 --> 00:10:35,430
but after a while you have hundreds of

00:10:33,329 --> 00:10:38,790
tests and you get completely swamped

00:10:35,430 --> 00:10:40,829
with wilt information and you no longer

00:10:38,790 --> 00:10:41,600
know if your application been tested or

00:10:40,829 --> 00:10:45,059
not

00:10:41,600 --> 00:10:47,910
so instead of manual way you can use

00:10:45,059 --> 00:10:49,920
code coverage to keep track of your code

00:10:47,910 --> 00:10:51,449
you've been testing but it's kind of

00:10:49,920 --> 00:10:52,800
different so imagine you implementing

00:10:51,449 --> 00:10:55,079
feature a and starting from scratch

00:10:52,800 --> 00:10:58,829
which is a bad situation so you've

00:10:55,079 --> 00:11:01,529
written some source code nice implement

00:10:58,829 --> 00:11:03,930
feature B you probably add more code

00:11:01,529 --> 00:11:05,630
your factor existing code but both the

00:11:03,930 --> 00:11:08,449
features are implemented in your

00:11:05,630 --> 00:11:10,910
first code when you add feature C and

00:11:08,449 --> 00:11:13,399
again you add code your factor but

00:11:10,910 --> 00:11:15,319
what's happening is that somehow those

00:11:13,399 --> 00:11:17,750
features are implemented and expressed

00:11:15,319 --> 00:11:20,899
in your source code so if you write

00:11:17,750 --> 00:11:23,029
tests and you can somehow find out which

00:11:20,899 --> 00:11:24,889
lines of your source code both test

00:11:23,029 --> 00:11:27,680
exercise when we around let's say those

00:11:24,889 --> 00:11:30,319
green lines when you can say well those

00:11:27,680 --> 00:11:32,389
red lines are not covered by my tests

00:11:30,319 --> 00:11:34,220
and then you have to be a little bit of

00:11:32,389 --> 00:11:36,529
a shoulder Holmes and say well which

00:11:34,220 --> 00:11:38,630
feature is implemented in those red

00:11:36,529 --> 00:11:41,149
lines you can have to guess by looking

00:11:38,630 --> 00:11:43,310
it but when you can say well it probably

00:11:41,149 --> 00:11:45,850
believes to do it so you add one more

00:11:43,310 --> 00:11:48,589
test run code coverage tool again and

00:11:45,850 --> 00:11:50,149
after it has complete you see everything

00:11:48,589 --> 00:11:52,329
is green so you know that you covered

00:11:50,149 --> 00:11:54,740
all the tests so the code coverage

00:11:52,329 --> 00:11:56,779
doesn't directly tell you which features

00:11:54,740 --> 00:11:59,420
you have implemented but indirectly

00:11:56,779 --> 00:12:01,209
because those features are implementing

00:11:59,420 --> 00:12:03,980
your code and emails of a code coverage

00:12:01,209 --> 00:12:07,850
and it doesn't mean but if you achieve

00:12:03,980 --> 00:12:11,120
100% code coverage but you achieved 0%

00:12:07,850 --> 00:12:13,670
box but first reason is because of its

00:12:11,120 --> 00:12:15,220
indirection your code might be

00:12:13,670 --> 00:12:18,290
implementing with features incorrectly

00:12:15,220 --> 00:12:19,970
so even if it covers a higher percentage

00:12:18,290 --> 00:12:22,430
it's not with features without

00:12:19,970 --> 00:12:24,079
functioning correctly and the second

00:12:22,430 --> 00:12:26,569
thing is that your test might be very

00:12:24,079 --> 00:12:30,800
unrealistic for example you only use one

00:12:26,569 --> 00:12:33,079
type of email or you use you know normal

00:12:30,800 --> 00:12:34,519
kind of typical names and then you find

00:12:33,079 --> 00:12:37,160
out that someone with very short class

00:12:34,519 --> 00:12:39,279
name cannot actually use your system so

00:12:37,160 --> 00:12:44,240
we're two sources of errors but even

00:12:39,279 --> 00:12:45,860
100% code coverage doesn't catch so in

00:12:44,240 --> 00:12:47,810
our implementation of code coverage

00:12:45,860 --> 00:12:50,269
plug-in we still leave it up to you to

00:12:47,810 --> 00:12:52,970
instrument your code but then Cypress

00:12:50,269 --> 00:12:56,839
runs the test and then Cypress reports

00:12:52,970 --> 00:12:59,079
results so we found out after trying

00:12:56,839 --> 00:13:01,579
this out that end-to-end tests are

00:12:59,079 --> 00:13:06,170
extremely effective at covering a lot of

00:13:01,579 --> 00:13:08,209
application code so where's Nicole from

00:13:06,170 --> 00:13:10,370
circle she is not here so she talked

00:13:08,209 --> 00:13:12,560
about how they actually increased the

00:13:10,370 --> 00:13:14,300
code coverage through unit tests from 0

00:13:12,560 --> 00:13:16,579
to 80 percent during her talk and as

00:13:14,300 --> 00:13:18,780
like that's nice so here's an example of

00:13:16,579 --> 00:13:22,680
a test a single test that visit

00:13:18,780 --> 00:13:24,390
the app finds the input box types free

00:13:22,680 --> 00:13:28,350
to deuce and then confirms but we

00:13:24,390 --> 00:13:30,690
reproduce in the list so how much code

00:13:28,350 --> 00:13:35,130
do you think this test single test

00:13:30,690 --> 00:13:38,550
covers let's say the table do you thing

00:13:35,130 --> 00:13:44,580
less than 50% of more than 50% more than

00:13:38,550 --> 00:13:46,950
50% more than 60 or less than 60 more

00:13:44,580 --> 00:13:49,260
right and I'll give you just the right

00:13:46,950 --> 00:13:51,990
number because we're very close so 72

00:13:49,260 --> 00:13:54,390
percent right a single test because it

00:13:51,990 --> 00:13:57,930
actually runs the whole thing it has to

00:13:54,390 --> 00:13:59,730
render everything right it has to do a

00:13:57,930 --> 00:14:03,510
couple of actions because we actually

00:13:59,730 --> 00:14:05,220
did enter free to do it and so what do

00:14:03,510 --> 00:14:09,930
we do after that so we actually drill

00:14:05,220 --> 00:14:13,560
down and we go and figure out what we

00:14:09,930 --> 00:14:16,560
haven't tested so people when we say I'm

00:14:13,560 --> 00:14:19,350
aiming for 100% code coverage or 90

00:14:16,560 --> 00:14:21,030
percent or 75 80 whatever number they

00:14:19,350 --> 00:14:22,920
take what code coverage number and they

00:14:21,030 --> 00:14:25,530
think bets the destination that's for

00:14:22,920 --> 00:14:29,940
goal and what I'm about to show you is

00:14:25,530 --> 00:14:32,250
what's not the right solution or right

00:14:29,940 --> 00:14:32,880
question the code coverage is not the

00:14:32,250 --> 00:14:35,220
destination

00:14:32,880 --> 00:14:37,950
it's a guide to get to higher quality

00:14:35,220 --> 00:14:39,720
coverage not itself a destination so

00:14:37,950 --> 00:14:42,840
here's an example so this particular

00:14:39,720 --> 00:14:46,230
test but entered pretty deuce if I drill

00:14:42,840 --> 00:14:46,920
down into the file that's like with list

00:14:46,230 --> 00:14:49,920
coverage

00:14:46,920 --> 00:14:52,050
it's a Redux store and it has a big

00:14:49,920 --> 00:14:53,940
switch statement it literally has every

00:14:52,050 --> 00:14:56,760
action my app can do like add to do

00:14:53,940 --> 00:14:58,950
complete to do and so on so I can see

00:14:56,760 --> 00:15:02,580
every line and how many times it was hit

00:14:58,950 --> 00:15:04,740
during my test so I can see that adding

00:15:02,580 --> 00:15:06,840
to deuce was actually hit three times

00:15:04,740 --> 00:15:09,540
because we did add three items into a

00:15:06,840 --> 00:15:12,000
list and then I look at the yellow

00:15:09,540 --> 00:15:14,130
statements and the red lines so the

00:15:12,000 --> 00:15:16,740
yellow our branch is not-taken

00:15:14,130 --> 00:15:19,530
in the if statement for switch statement

00:15:16,740 --> 00:15:22,410
and the red lines are lines but never

00:15:19,530 --> 00:15:23,910
were exercised during my test so where

00:15:22,410 --> 00:15:26,130
should I actually write tests well to

00:15:23,910 --> 00:15:28,380
hit both lines it becomes almost like a

00:15:26,130 --> 00:15:30,630
game to come up with tests for those

00:15:28,380 --> 00:15:32,170
features so I know I have to write asked

00:15:30,630 --> 00:15:33,940
for deleting to those

00:15:32,170 --> 00:15:37,300
anything to do is completing to do this

00:15:33,940 --> 00:15:39,160
and so on so you see how coverage just

00:15:37,300 --> 00:15:42,190
tell me this is what you're missing take

00:15:39,160 --> 00:15:43,529
this path it's not Val tomate number of

00:15:42,190 --> 00:15:46,209
it matters

00:15:43,529 --> 00:15:50,290
so you write more end-to-end tests and

00:15:46,209 --> 00:15:53,410
they all pass and we get ninety nine

00:15:50,290 --> 00:15:54,880
point twenty six percent so Oh point

00:15:53,410 --> 00:15:57,220
twenty six percent is kind of

00:15:54,880 --> 00:15:59,500
interesting number right because ninety

00:15:57,220 --> 00:16:03,040
nine point two six is not hundred so

00:15:59,500 --> 00:16:05,709
we're we're losing this this little

00:16:03,040 --> 00:16:07,690
little rectangle right in this one

00:16:05,709 --> 00:16:10,570
particular file for selectors we missed

00:16:07,690 --> 00:16:13,480
it if we go down and look at this file

00:16:10,570 --> 00:16:16,600
we see but varies again a selector

00:16:13,480 --> 00:16:18,790
statement but says what to render every

00:16:16,600 --> 00:16:19,480
time the user clicks on one voice

00:16:18,790 --> 00:16:22,450
filters

00:16:19,480 --> 00:16:25,500
all to do items active to the items or

00:16:22,450 --> 00:16:28,800
completely to the items but our selector

00:16:25,500 --> 00:16:33,430
inside our file has a default statement

00:16:28,800 --> 00:16:35,620
right and this statement says hey just

00:16:33,430 --> 00:16:37,899
throw an error if you ever reach it now

00:16:35,620 --> 00:16:40,420
can you write an end-to-end test to to

00:16:37,899 --> 00:16:42,820
actually reach what line we can't write

00:16:40,420 --> 00:16:44,320
because in a well-designed application

00:16:42,820 --> 00:16:47,199
but actually implement correctly

00:16:44,320 --> 00:16:49,060
that is impossible we should never hit

00:16:47,199 --> 00:16:51,579
that line but it's a good code it's

00:16:49,060 --> 00:16:52,690
robust code so if somehow we use that

00:16:51,579 --> 00:16:55,360
component somewhere else

00:16:52,690 --> 00:16:57,160
it might be possible to hit that line so

00:16:55,360 --> 00:16:59,170
instead if you want to reach that

00:16:57,160 --> 00:17:02,829
particular line we have to write a unit

00:16:59,170 --> 00:17:05,230
test right but that's what doesn't go

00:17:02,829 --> 00:17:07,929
through UI so we just write a unit test

00:17:05,230 --> 00:17:10,689
we directly import that component and we

00:17:07,929 --> 00:17:13,630
write expect if we call it with invalid

00:17:10,689 --> 00:17:17,410
selector to throw an error so we run

00:17:13,630 --> 00:17:19,150
just with a test in that case there's no

00:17:17,410 --> 00:17:21,100
UI so there's no application but Cypress

00:17:19,150 --> 00:17:24,819
laws it just runs the unit test receive

00:17:21,100 --> 00:17:26,079
as various code coverage and then if we

00:17:24,819 --> 00:17:28,809
look at code coverage for that

00:17:26,079 --> 00:17:31,870
particular file we can see what we cover

00:17:28,809 --> 00:17:34,330
just one line in with if if it's switch

00:17:31,870 --> 00:17:36,100
statement because we'll really targeted

00:17:34,330 --> 00:17:38,650
our test to just hit word line and

00:17:36,100 --> 00:17:41,890
confirm the behavior but it does throw

00:17:38,650 --> 00:17:44,140
an error now if you run all the tests

00:17:41,890 --> 00:17:45,580
together the Cypress code coverage

00:17:44,140 --> 00:17:47,530
plug-in takes the end-to-end

00:17:45,580 --> 00:17:49,690
code coverage and a union task called

00:17:47,530 --> 00:17:52,240
coverage and combines them together and

00:17:49,690 --> 00:17:53,250
that's how we generate 100% code

00:17:52,240 --> 00:17:58,570
coverage

00:17:53,250 --> 00:17:59,950
nice job called college plugin the

00:17:58,570 --> 00:18:01,750
interesting thing about this we

00:17:59,950 --> 00:18:05,350
specifically didn't want to put it in

00:18:01,750 --> 00:18:09,070
the core of a test run itself because

00:18:05,350 --> 00:18:11,230
but core is complex and large and

00:18:09,070 --> 00:18:14,980
sometimes the release process takes

00:18:11,230 --> 00:18:19,150
longer than you or even our team would

00:18:14,980 --> 00:18:21,100
like so by putting it in a plug-in but

00:18:19,150 --> 00:18:23,710
separate where we can iterate and

00:18:21,100 --> 00:18:26,290
release very very quickly we allow for

00:18:23,710 --> 00:18:28,450
faster future delivery and we're trying

00:18:26,290 --> 00:18:30,610
to keep the core as small and if we

00:18:28,450 --> 00:18:33,670
really need to maybe expose one more

00:18:30,610 --> 00:18:37,210
scene what plugin can use the same with

00:18:33,670 --> 00:18:39,940
electron testing plugin we're exposing a

00:18:37,210 --> 00:18:44,200
few scenes and then doing the most of a

00:18:39,940 --> 00:18:46,000
warp in a plugin so endo in test

00:18:44,200 --> 00:18:48,760
extremely effective at covering the

00:18:46,000 --> 00:18:50,980
application code not just application

00:18:48,760 --> 00:18:52,360
very good at exercising your

00:18:50,980 --> 00:18:53,650
configuration all the environment

00:18:52,360 --> 00:18:55,390
variables you know the things that

00:18:53,650 --> 00:18:58,570
should never break but I usually broken

00:18:55,390 --> 00:19:01,330
after a couple of deploys we exercise

00:18:58,570 --> 00:19:04,900
entire stack if you allow your back-end

00:19:01,330 --> 00:19:06,910
Ajax requests to go through your

00:19:04,900 --> 00:19:09,160
end-to-end tests are behaving exactly

00:19:06,910 --> 00:19:10,840
like a real user would and so they would

00:19:09,160 --> 00:19:13,410
go for entire stack to make sure all

00:19:10,840 --> 00:19:16,450
parts of the system are working and so

00:19:13,410 --> 00:19:18,550
to me the pyramids even though I don't

00:19:16,450 --> 00:19:20,890
like the pyramid at all but it should be

00:19:18,550 --> 00:19:22,900
upside down it should be a pizza slice

00:19:20,890 --> 00:19:25,210
I think the end-to-end test where you

00:19:22,900 --> 00:19:29,920
behave and test like a real user is

00:19:25,210 --> 00:19:31,900
extremely important to be real users I'm

00:19:29,920 --> 00:19:33,670
not saying don't write unit tests but

00:19:31,900 --> 00:19:37,360
unit is are still extremely important to

00:19:33,670 --> 00:19:42,550
me as a developer but who's paying the

00:19:37,360 --> 00:19:44,200
bills the end users are other people

00:19:42,550 --> 00:19:47,230
have noticed lists so where is now a

00:19:44,200 --> 00:19:49,990
trend kind exemplified by this sweet vs.

00:19:47,230 --> 00:19:51,850
and popular opinion well let's change it

00:19:49,990 --> 00:19:55,630
you should write end-to-end an

00:19:51,850 --> 00:19:57,460
integration test first always only when

00:19:55,630 --> 00:19:59,320
enter an integration test fails should

00:19:57,460 --> 00:20:01,450
you even think about writing you

00:19:59,320 --> 00:20:03,880
and that was the approach right but I

00:20:01,450 --> 00:20:05,380
showed in our code coverage we started

00:20:03,880 --> 00:20:07,300
with end to end because we're so

00:20:05,380 --> 00:20:10,750
effective and wherever we could not

00:20:07,300 --> 00:20:12,700
reach for a user interface then we only

00:20:10,750 --> 00:20:18,010
have written unit tests to reach those

00:20:12,700 --> 00:20:20,380
code paths we're trying to be fought

00:20:18,010 --> 00:20:22,570
leaders in be so but guide to how to

00:20:20,380 --> 00:20:25,360
design your tests are all in our Doc's

00:20:22,570 --> 00:20:27,280
our API Doc's and our examples where we

00:20:25,360 --> 00:20:29,410
show how we're thinking about tests and

00:20:27,280 --> 00:20:34,570
how we design the tests and how we think

00:20:29,410 --> 00:20:36,760
about testable web applications okay but

00:20:34,570 --> 00:20:38,830
talk about everyone just loves to have

00:20:36,760 --> 00:20:43,150
in programming community let's talk

00:20:38,830 --> 00:20:46,120
about money a couple of months ago where

00:20:43,150 --> 00:20:49,150
was a talk at just continued about a

00:20:46,120 --> 00:20:52,000
company which will not be named actually

00:20:49,150 --> 00:20:54,340
it is named here okay

00:20:52,000 --> 00:20:56,500
NPM register right it's the integral

00:20:54,340 --> 00:21:00,100
part of JavaScript world and yet it's

00:20:56,500 --> 00:21:03,280
vc-backed it's actually backed by the

00:21:00,100 --> 00:21:05,740
same virtual venture capitalist well

00:21:03,280 --> 00:21:10,000
Cyprus is backed so how can we guarantee

00:21:05,740 --> 00:21:12,370
that our funding model is not gonna

00:21:10,000 --> 00:21:14,910
affect with decisions and affect the

00:21:12,370 --> 00:21:17,170
community so how the Cyprus make money

00:21:14,910 --> 00:21:19,450
first of all we don't make money by

00:21:17,170 --> 00:21:21,160
limiting the features or selling license

00:21:19,450 --> 00:21:23,530
to the test Runner everything that I've

00:21:21,160 --> 00:21:25,330
shown to you all the plugins the test

00:21:23,530 --> 00:21:27,760
run itself is completely open-source and

00:21:25,330 --> 00:21:30,580
will remain so right so we're just

00:21:27,760 --> 00:21:33,220
giving it away instead we decided well

00:21:30,580 --> 00:21:36,790
we're gonna sell additional services and

00:21:33,220 --> 00:21:39,430
those services will make sense for large

00:21:36,790 --> 00:21:42,100
companies not to individual small

00:21:39,430 --> 00:21:44,440
projects or individual users and those

00:21:42,100 --> 00:21:46,030
services completely complimentary so

00:21:44,440 --> 00:21:48,550
everything that you will see it later

00:21:46,030 --> 00:21:50,740
you can implement yourself it's just

00:21:48,550 --> 00:21:51,100
cheaper to pay someone for for doing

00:21:50,740 --> 00:21:54,940
this

00:21:51,100 --> 00:21:57,010
so but the paid features that we do I

00:21:54,940 --> 00:21:58,900
like recording the test artifacts

00:21:57,010 --> 00:22:02,380
you know those screenshots and videos

00:21:58,900 --> 00:22:06,100
what I said Cyprus saves by default well

00:22:02,380 --> 00:22:08,170
it saves it but how do you look at that

00:22:06,100 --> 00:22:10,390
how do you look at this in a convenient

00:22:08,170 --> 00:22:12,440
manner so we do that how do you run lots

00:22:10,390 --> 00:22:14,600
of tests quickly

00:22:12,440 --> 00:22:16,870
once you know you grow to a certain size

00:22:14,600 --> 00:22:21,020
of test how do you work as a team

00:22:16,870 --> 00:22:23,560
through github conveniently so we

00:22:21,020 --> 00:22:26,600
noticed that for example modern CIS

00:22:23,560 --> 00:22:29,540
value.i is great if you want to look at

00:22:26,600 --> 00:22:33,050
console logs get it that's why cancel

00:22:29,540 --> 00:22:35,210
logs so we decided the first thing we

00:22:33,050 --> 00:22:38,300
want to do is just store your artifacts

00:22:35,210 --> 00:22:40,340
they get uploaded automatically once you

00:22:38,300 --> 00:22:42,170
say Cypress run there's - record and

00:22:40,340 --> 00:22:43,760
you're talking you know your little

00:22:42,170 --> 00:22:46,400
private token is just environment

00:22:43,760 --> 00:22:48,440
variable so then doesn't matter which I

00:22:46,400 --> 00:22:50,660
use everything gets uploaded

00:22:48,440 --> 00:22:52,310
automatically to our dashboard where you

00:22:50,660 --> 00:22:55,130
have a private web application we can

00:22:52,310 --> 00:22:57,260
see the results and you see results kind

00:22:55,130 --> 00:22:59,480
of like this where each test file is

00:22:57,260 --> 00:23:02,330
shown with new durations number of tests

00:22:59,480 --> 00:23:05,540
and underline you can see console.log

00:23:02,330 --> 00:23:07,910
screenshots and video we're actually

00:23:05,540 --> 00:23:09,950
working on the design of a page to allow

00:23:07,910 --> 00:23:12,160
you to do you know common things once

00:23:09,950 --> 00:23:15,620
you have a lot of tests like filtering

00:23:12,160 --> 00:23:17,720
or how to inspect even the final tests

00:23:15,620 --> 00:23:19,430
quickly and conveniently how do you show

00:23:17,720 --> 00:23:21,470
all the information about that

00:23:19,430 --> 00:23:23,810
particular commit that particular

00:23:21,470 --> 00:23:24,500
failure and everything that happened

00:23:23,810 --> 00:23:27,290
during the test

00:23:24,500 --> 00:23:28,970
so we're thinking even of showing

00:23:27,290 --> 00:23:31,070
additional information here's how long

00:23:28,970 --> 00:23:32,660
but that's banned in different steps and

00:23:31,070 --> 00:23:34,190
here's where you know the source code

00:23:32,660 --> 00:23:37,640
for that particular failure so you

00:23:34,190 --> 00:23:41,480
understand what failed on CI very very

00:23:37,640 --> 00:23:44,000
quickly and once you have lots of and

00:23:41,480 --> 00:23:46,220
run tests even if each test is fast when

00:23:44,000 --> 00:23:48,410
you take a lot of em they probably will

00:23:46,220 --> 00:23:50,060
run slower for me but tolerance is

00:23:48,410 --> 00:23:52,370
probably like three minutes

00:23:50,060 --> 00:23:54,260
anything after three minutes I kind of

00:23:52,370 --> 00:23:56,240
lose track so if you're tired you know

00:23:54,260 --> 00:23:57,260
end-to-end test phase takes longer than

00:23:56,240 --> 00:23:59,060
three minutes I think you should

00:23:57,260 --> 00:24:01,640
paralyze and so we implement

00:23:59,060 --> 00:24:05,150
fertilization it becomes part of our SAS

00:24:01,640 --> 00:24:08,780
offering is it crucial to you as

00:24:05,150 --> 00:24:10,670
individual user no but is it crucial to

00:24:08,780 --> 00:24:14,810
enterprise that has lots of developers

00:24:10,670 --> 00:24:16,640
yes so the beauty of it is but you just

00:24:14,810 --> 00:24:18,230
have to add a single CLI flag and we

00:24:16,640 --> 00:24:23,760
figure out everything automatically

00:24:18,230 --> 00:24:27,090
whole load balancing and so even our own

00:24:23,760 --> 00:24:30,300
tests for with this web software used to

00:24:27,090 --> 00:24:32,370
take let's say almost 23 minutes and

00:24:30,300 --> 00:24:33,960
when they take less than four and we

00:24:32,370 --> 00:24:36,390
actually did test runs on different

00:24:33,960 --> 00:24:38,910
number of CI machines but we spin and so

00:24:36,390 --> 00:24:43,310
if we spin ten machines it's one tenth

00:24:38,910 --> 00:24:46,320
of a total duration which is pretty good

00:24:43,310 --> 00:24:48,120
you know github blog sponsored lunch and

00:24:46,320 --> 00:24:50,280
github became such an integral part of

00:24:48,120 --> 00:24:51,840
everyone's workflow right where you open

00:24:50,280 --> 00:24:54,770
pull requests where you merge it you

00:24:51,840 --> 00:24:57,270
review on github so we decided to make

00:24:54,770 --> 00:24:59,940
developing software and testing software

00:24:57,270 --> 00:25:02,370
easy as a team through github so we

00:24:59,940 --> 00:25:05,520
introduced github integration we just

00:25:02,370 --> 00:25:08,340
installed Cypress github app and you say

00:25:05,520 --> 00:25:10,350
hey I want to install it on my Cypress

00:25:08,340 --> 00:25:11,910
project you give it permissions and it's

00:25:10,350 --> 00:25:13,650
only read permissions to the meta

00:25:11,910 --> 00:25:17,250
information not to the source code

00:25:13,650 --> 00:25:20,220
itself you pick the project but you want

00:25:17,250 --> 00:25:23,160
to connect and then you say hey do I

00:25:20,220 --> 00:25:26,250
want like a single check you know per

00:25:23,160 --> 00:25:29,130
around order one separate status checks

00:25:26,250 --> 00:25:31,290
for each spec file it's up to you

00:25:29,130 --> 00:25:33,930
hoverboards you want to do be so by

00:25:31,290 --> 00:25:35,610
group you will just have extra check so

00:25:33,930 --> 00:25:37,470
you can quickly see like which this

00:25:35,610 --> 00:25:40,740
group of end-to-end tests has failed or

00:25:37,470 --> 00:25:42,840
you can have a single status check for

00:25:40,740 --> 00:25:45,420
each test file in that case you'll have

00:25:42,840 --> 00:25:47,340
get lots of most status checks but also

00:25:45,420 --> 00:25:50,490
if something fails you immediately know

00:25:47,340 --> 00:25:55,020
which particular end-to-end spec file is

00:25:50,490 --> 00:25:57,600
failing my favorite feature here is that

00:25:55,020 --> 00:26:00,570
that github integration even comments on

00:25:57,600 --> 00:26:02,010
pork wes if if there is a failure it

00:26:00,570 --> 00:26:03,960
will come in and say hey something

00:26:02,010 --> 00:26:06,120
failed it will give you the name of a

00:26:03,960 --> 00:26:08,250
failing test you know the link to the

00:26:06,120 --> 00:26:11,580
dashboard project and even a little

00:26:08,250 --> 00:26:14,840
thumbnail of a screen shot at failure so

00:26:11,580 --> 00:26:18,420
you can quickly kind of see if you can

00:26:14,840 --> 00:26:19,950
triage the issue quickly and if nothing

00:26:18,420 --> 00:26:21,930
fails when it's good right you just have

00:26:19,950 --> 00:26:23,700
base information and you're safe and you

00:26:21,930 --> 00:26:27,840
can merge with poor request nothing is

00:26:23,700 --> 00:26:30,450
failing one thing I want to discuss the

00:26:27,840 --> 00:26:33,210
real quickly is Cypress and open source

00:26:30,450 --> 00:26:35,160
community we built Cypress on all open

00:26:33,210 --> 00:26:36,970
source tools and I'm not even talking

00:26:35,160 --> 00:26:38,640
about like JavaScript and typescript and

00:26:36,970 --> 00:26:42,010
scold I'm talking about like mocha

00:26:38,640 --> 00:26:45,580
jQuery seen on child all those tools are

00:26:42,010 --> 00:26:47,289
part of Cypress core so when you do NPM

00:26:45,580 --> 00:26:48,760
install Cypress like my t-shirt says in

00:26:47,289 --> 00:26:54,940
the back you actually install those

00:26:48,760 --> 00:26:58,120
tools included in our tool so a couple

00:26:54,940 --> 00:26:59,320
of weeks ago I was as always and as some

00:26:58,120 --> 00:27:02,409
people in this room I was browsing

00:26:59,320 --> 00:27:05,250
Twitter and I so didn't service tweet

00:27:02,409 --> 00:27:08,289
from a Christian of funny and he was

00:27:05,250 --> 00:27:10,240
announcing a release of a new light of a

00:27:08,289 --> 00:27:14,340
new version of his library for state

00:27:10,240 --> 00:27:18,250
management called cerebral GS and the

00:27:14,340 --> 00:27:21,210
library is it's nice but what I notice

00:27:18,250 --> 00:27:24,309
here is like wow look at this - duze app

00:27:21,210 --> 00:27:26,230
look at - dudes like nice red color high

00:27:24,309 --> 00:27:28,450
contrast look at what was like footer

00:27:26,230 --> 00:27:31,539
like I can actually read it in a

00:27:28,450 --> 00:27:33,580
screenshot of a tweet and and usually if

00:27:31,539 --> 00:27:35,500
if she might to do you know screen shots

00:27:33,580 --> 00:27:37,539
right there hearted to read even on a

00:27:35,500 --> 00:27:40,059
good projector sometimes the projector

00:27:37,539 --> 00:27:41,470
is so bad like I feel bad for people in

00:27:40,059 --> 00:27:44,830
the room because they cannot see

00:27:41,470 --> 00:27:46,690
anything so a little as well and I see

00:27:44,830 --> 00:27:48,700
what this is a link to code sandbox and

00:27:46,690 --> 00:27:50,320
I apologize from people who are

00:27:48,700 --> 00:27:53,230
competing with code sandbox for showing

00:27:50,320 --> 00:27:55,570
this but I open the project and I looked

00:27:53,230 --> 00:28:00,039
and as oh they're using to do MVC apps

00:27:55,570 --> 00:28:03,250
yourself version 2 3 0 hmm and just to

00:28:00,039 --> 00:28:04,960
be sure I cloned the sandbox and I

00:28:03,250 --> 00:28:10,200
changed it to 2 point 2 so this is how 2

00:28:04,960 --> 00:28:13,419
point 2 looks you see nice ooh nice ooh

00:28:10,200 --> 00:28:17,169
and so I was looking to be something

00:28:13,419 --> 00:28:18,940
like oh yeah I remember I did this I

00:28:17,169 --> 00:28:22,480
actually submitted a pull request long

00:28:18,940 --> 00:28:26,440
time ago to do MVC app CSS package

00:28:22,480 --> 00:28:28,900
fixing the contrast now if you look at

00:28:26,440 --> 00:28:31,600
the budget message I'm saying but here's

00:28:28,900 --> 00:28:33,309
a change here's a screenshot screenshot

00:28:31,600 --> 00:28:36,730
actually doesn't show very very well but

00:28:33,309 --> 00:28:39,669
it's very and and here's a link to the

00:28:36,730 --> 00:28:43,690
test where I tested this change using

00:28:39,669 --> 00:28:47,190
Cypress and Cypress axe plugin by Andrew

00:28:43,690 --> 00:28:49,200
Vance Lars my former coworker

00:28:47,190 --> 00:28:51,090
so it's nice I use Cypress to fix

00:28:49,200 --> 00:28:53,100
something but I'm using to demo Cypress

00:28:51,090 --> 00:28:55,980
and this is how a typical test for

00:28:53,100 --> 00:28:58,740
contrast looks this is more complicated

00:28:55,980 --> 00:29:00,750
thing where you visit a page inject X

00:28:58,740 --> 00:29:02,190
library when you actually change the

00:29:00,750 --> 00:29:05,700
page till you have something meaningful

00:29:02,190 --> 00:29:07,440
to test you add a couple to do is you

00:29:05,700 --> 00:29:09,360
check with birth to two deuce and when

00:29:07,440 --> 00:29:12,420
you actually you know check the contrast

00:29:09,360 --> 00:29:16,860
and what rule throw an error if any

00:29:12,420 --> 00:29:19,050
countries were is not accessible so I

00:29:16,860 --> 00:29:21,000
did that and then I was like thinking

00:29:19,050 --> 00:29:23,370
what was lucky actually to do we see

00:29:21,000 --> 00:29:25,560
itself but people who show to doing this

00:29:23,370 --> 00:29:27,540
implementation in different languages

00:29:25,560 --> 00:29:31,620
and using different frameworks and

00:29:27,540 --> 00:29:37,860
libraries they use Cypress now so that's

00:29:31,620 --> 00:29:40,710
nice even Christian al funny right when

00:29:37,860 --> 00:29:43,410
he talks about his libraries like Siri

00:29:40,710 --> 00:29:46,350
blur and Overmind he says use Cypress

00:29:43,410 --> 00:29:49,410
genius and I'm showing these slides

00:29:46,350 --> 00:29:53,580
using slides calm and you know what they

00:29:49,410 --> 00:29:55,350
use Cypress to test this stuff and I

00:29:53,580 --> 00:30:00,000
just want to say that we open sourced it

00:29:55,350 --> 00:30:03,720
two years ago and in two years Cyprus

00:30:00,000 --> 00:30:06,240
became one of the most popular end to

00:30:03,720 --> 00:30:10,830
end test runners in the whole community

00:30:06,240 --> 00:30:12,900
and to be there from you know the time

00:30:10,830 --> 00:30:14,850
when we were just four people never

00:30:12,900 --> 00:30:16,710
knowing if we're gonna survive next like

00:30:14,850 --> 00:30:19,230
six months because you know we were

00:30:16,710 --> 00:30:22,710
living like paycheck to paycheck raising

00:30:19,230 --> 00:30:25,380
money growing as a team seeing so many

00:30:22,710 --> 00:30:28,050
contributors to both test run and

00:30:25,380 --> 00:30:34,860
documentation and recipes and examples I

00:30:28,050 --> 00:30:36,170
just want to say thank you okay thank

00:30:34,860 --> 00:30:38,500
you

00:30:36,170 --> 00:30:40,700
is saying thank you costs us nothing

00:30:38,500 --> 00:30:42,350
this is before how we want to say thank

00:30:40,700 --> 00:30:44,810
you right so we introduced the open

00:30:42,350 --> 00:30:46,910
open-source plan specifically for open

00:30:44,810 --> 00:30:50,030
source revenues raised organizations and

00:30:46,910 --> 00:30:51,920
projects so you can just apply and we'll

00:30:50,030 --> 00:30:54,800
give you all the features from our

00:30:51,920 --> 00:31:01,810
dashboard for free and I think it's

00:30:54,800 --> 00:31:04,430
pretty nice thank you

00:31:01,810 --> 00:31:04,970
we want every project to bloom like this

00:31:04,430 --> 00:31:08,270
flower

00:31:04,970 --> 00:31:11,480
so 62 organizations I just saw it today

00:31:08,270 --> 00:31:15,290
two more were approved and so it's nice

00:31:11,480 --> 00:31:17,600
I think it's getting adopted like octa

00:31:15,290 --> 00:31:22,580
get the rest API is using with spectrum

00:31:17,600 --> 00:31:25,190
and ours okay what are we working on as

00:31:22,580 --> 00:31:26,930
a company so we have two parts of a

00:31:25,190 --> 00:31:29,390
company right we have the dashboard but

00:31:26,930 --> 00:31:32,360
actually pays the bills and the

00:31:29,390 --> 00:31:34,970
testrunner our back contribution to the

00:31:32,360 --> 00:31:37,130
open source community what we have right

00:31:34,970 --> 00:31:39,620
now six full-time employees working on

00:31:37,130 --> 00:31:42,650
that plus all the outside contributors

00:31:39,620 --> 00:31:44,420
so on a dashboard if you're a company

00:31:42,650 --> 00:31:46,010
and you've been testing for a while you

00:31:44,420 --> 00:31:48,230
want to know how the test progress how

00:31:46,010 --> 00:31:50,600
they change over time so we're working

00:31:48,230 --> 00:31:52,490
on analytics and I know I know it's kind

00:31:50,600 --> 00:31:54,860
of boring right

00:31:52,490 --> 00:31:57,020
but seeing progression in your company

00:31:54,860 --> 00:32:01,940
over time and which test fail and how

00:31:57,020 --> 00:32:03,770
the timing changes and the benefits of

00:32:01,940 --> 00:32:06,170
realization versus you know the new

00:32:03,770 --> 00:32:07,340
software I think it's important and that

00:32:06,170 --> 00:32:09,530
allows you to make an intelligent

00:32:07,340 --> 00:32:13,820
decision in regards to your testing

00:32:09,530 --> 00:32:15,680
years even attribution right who's

00:32:13,820 --> 00:32:17,780
writing tests which tests are failing

00:32:15,680 --> 00:32:20,080
which branches are failing more often

00:32:17,780 --> 00:32:22,490
than others which test environments a

00:32:20,080 --> 00:32:23,780
flaky allows you to actually invest time

00:32:22,490 --> 00:32:29,060
and maybe upgrade your staging

00:32:23,780 --> 00:32:32,000
environment so when a flaky much more

00:32:29,060 --> 00:32:35,150
realistic users were you know tagging

00:32:32,000 --> 00:32:38,480
tests right where you want to say this

00:32:35,150 --> 00:32:40,790
run is from my nightly build or this run

00:32:38,480 --> 00:32:43,940
is for more from my European build of my

00:32:40,790 --> 00:32:45,530
website so you can add tags and this is

00:32:43,940 --> 00:32:48,140
work in progress but this has gonna look

00:32:45,530 --> 00:32:50,650
and then quickly filter your views and

00:32:48,140 --> 00:32:54,860
find which

00:32:50,650 --> 00:32:56,300
the tanks would matter to you you don't

00:32:54,860 --> 00:32:58,630
have to take picture of it the slides

00:32:56,300 --> 00:33:00,470
are all already there so very

00:32:58,630 --> 00:33:02,960
interesting thing is but we decided

00:33:00,470 --> 00:33:06,470
revin asked I know working on this in in

00:33:02,960 --> 00:33:09,680
a darkness right we're just gonna put it

00:33:06,470 --> 00:33:12,080
on a product board and people can see

00:33:09,680 --> 00:33:14,630
how the features are you know looking

00:33:12,080 --> 00:33:17,420
right now can come in and so on so every

00:33:14,630 --> 00:33:19,610
user input that we see from slack from

00:33:17,420 --> 00:33:21,800
email from Twitter from personal

00:33:19,610 --> 00:33:24,920
discussions right we kind of throw into

00:33:21,800 --> 00:33:27,650
a product board so it becomes actionable

00:33:24,920 --> 00:33:29,270
and it's remembered and we can make

00:33:27,650 --> 00:33:33,500
informed decision and it's not a

00:33:29,270 --> 00:33:35,270
decision by our personal preferences in

00:33:33,500 --> 00:33:37,370
a vacuum

00:33:35,270 --> 00:33:42,620
of course product board user side person

00:33:37,370 --> 00:33:47,270
loves it so for test runner for test run

00:33:42,620 --> 00:33:49,790
the most important thing is this right

00:33:47,270 --> 00:33:51,680
now when you run Cypress it comes

00:33:49,790 --> 00:33:53,810
it's the elfin app so it comes built

00:33:51,680 --> 00:33:57,860
with built in bundled version of

00:33:53,810 --> 00:34:00,050
electron which is kind of old chrome and

00:33:57,860 --> 00:34:02,260
we worked on upgrading it but also

00:34:00,050 --> 00:34:05,470
Cypress can find avec chrome based

00:34:02,260 --> 00:34:08,540
browsers on your system so if you have

00:34:05,470 --> 00:34:10,370
chrome Chrome Canary it will find it and

00:34:08,540 --> 00:34:12,409
you'll be able to let's say I want to

00:34:10,370 --> 00:34:15,800
run my test in Chrome which is great

00:34:12,409 --> 00:34:18,260
because now you have modern browser and

00:34:15,800 --> 00:34:21,050
we've been saying visa functional tests

00:34:18,260 --> 00:34:23,710
as long as your test pass consistently

00:34:21,050 --> 00:34:26,419
in Chrome what else can you want right

00:34:23,710 --> 00:34:29,690
but for some reason people did not

00:34:26,419 --> 00:34:31,310
accept that as an answer right and then

00:34:29,690 --> 00:34:33,590
we said the same thing again and again

00:34:31,310 --> 00:34:36,409
and still some people were arguing no I

00:34:33,590 --> 00:34:41,419
want my test to pass in other browsers

00:34:36,409 --> 00:34:43,070
like Firefox Safari in a brave and at

00:34:41,419 --> 00:34:47,210
some point we just give up like okay

00:34:43,070 --> 00:34:49,429
we'll do it so we really textured like

00:34:47,210 --> 00:34:51,879
our commands communicate with a browser

00:34:49,429 --> 00:34:54,620
how we control the browser so we can add

00:34:51,879 --> 00:34:58,060
support for multiple browsers in a

00:34:54,620 --> 00:35:00,440
consistent and easily maintainable way

00:34:58,060 --> 00:35:03,500
so what you see right now is up-to-date

00:35:00,440 --> 00:35:06,710
status of a pull request but

00:35:03,500 --> 00:35:08,480
firefox support because firefox was like

00:35:06,710 --> 00:35:10,790
most popular thing but developers were

00:35:08,480 --> 00:35:12,770
asking for so right now out of 3,000

00:35:10,790 --> 00:35:16,550
tests that we run in the actual browser

00:35:12,770 --> 00:35:20,030
only 15 are failing so I think it's

00:35:16,550 --> 00:35:22,460
pretty pretty close and once we release

00:35:20,030 --> 00:35:31,700
Firefox the next one but people are

00:35:22,460 --> 00:35:33,830
asking is IE 11 yeah so I think but but

00:35:31,700 --> 00:35:35,540
they really say 11 like I submitted my

00:35:33,830 --> 00:35:40,820
resignation I give them to our notice

00:35:35,540 --> 00:35:43,880
I'm like no no no so why people asking

00:35:40,820 --> 00:35:45,440
for a 11 right it's not us the focus is

00:35:43,880 --> 00:35:47,240
not on developer just like with tests

00:35:45,440 --> 00:35:48,980
but focus is on the customer if a

00:35:47,240 --> 00:35:51,160
customer is willing to pay and who is

00:35:48,980 --> 00:35:53,780
willing to pay large corporations and

00:35:51,160 --> 00:35:56,869
what do large corporations want to

00:35:53,780 --> 00:35:59,990
support for no particular reason ie 11

00:35:56,869 --> 00:36:02,930
right at least a 11 and not like ie 9 or

00:35:59,990 --> 00:36:06,740
7 right that would be total disaster

00:36:02,930 --> 00:36:10,070
by the way support for new ie edge from

00:36:06,740 --> 00:36:13,849
one that uses chrome engine was done by

00:36:10,070 --> 00:36:16,460
a user right we haven't merged like the

00:36:13,849 --> 00:36:18,140
little thing but need to be changed but

00:36:16,460 --> 00:36:21,200
it's completely use of space solution

00:36:18,140 --> 00:36:23,089
which is just mind-blowing right how

00:36:21,200 --> 00:36:26,960
easy it is

00:36:23,089 --> 00:36:30,020
after you 11 we're thinking about mobile

00:36:26,960 --> 00:36:32,000
safari because majority of differences

00:36:30,020 --> 00:36:34,640
is not even between desktop browsers but

00:36:32,000 --> 00:36:38,839
I evergreen it's between desktop and

00:36:34,640 --> 00:36:42,260
actual mobile safari on the personal

00:36:38,839 --> 00:36:45,410
note our personal DanceSport we are

00:36:42,260 --> 00:36:49,070
testing it using Cyprus and in two years

00:36:45,410 --> 00:36:52,310
we found probably three instances where

00:36:49,070 --> 00:36:57,830
our tests did not catch a cross browser

00:36:52,310 --> 00:37:01,339
bug and one bug was in Firefox

00:36:57,830 --> 00:37:04,910
another one is Safari and referred one

00:37:01,339 --> 00:37:07,430
was chrome itself we did not run but

00:37:04,910 --> 00:37:09,560
particular test in chrome itself it only

00:37:07,430 --> 00:37:12,770
ran on an electron and was some weird

00:37:09,560 --> 00:37:15,020
issue with video not playing so on our

00:37:12,770 --> 00:37:17,360
personal note I think when we released

00:37:15,020 --> 00:37:19,220
Firefox will you run your thousand tests

00:37:17,360 --> 00:37:22,520
Chrome and when the same thousand tests

00:37:19,220 --> 00:37:25,250
in Firefox I don't think it's a good

00:37:22,520 --> 00:37:27,350
strategy I think you're gonna just waste

00:37:25,250 --> 00:37:30,380
time running both sets of tests in both

00:37:27,350 --> 00:37:32,450
browsers but the thing may be some

00:37:30,380 --> 00:37:36,560
targeted test but kind of exercise a lot

00:37:32,450 --> 00:37:39,140
of code paths would be nice to run in

00:37:36,560 --> 00:37:41,800
Firefox and how do you know which tests

00:37:39,140 --> 00:37:48,110
actually exercise a lot of code paths

00:37:41,800 --> 00:37:51,830
probably through code coverage second

00:37:48,110 --> 00:37:53,780
thing so when a test fails Cyprus will

00:37:51,830 --> 00:37:56,270
show you an error you see the website

00:37:53,780 --> 00:37:57,890
iframe on the right and you see vacum

00:37:56,270 --> 00:38:01,790
and log with all the commands from the

00:37:57,890 --> 00:38:03,830
test on the left so you can see that in

00:38:01,790 --> 00:38:05,960
this case visited beside type type and

00:38:03,830 --> 00:38:09,230
then for some reason expected to have

00:38:05,960 --> 00:38:12,350
two items but got four so where is an

00:38:09,230 --> 00:38:16,370
error the error is readable but not the

00:38:12,350 --> 00:38:18,770
best one for example you don't know like

00:38:16,370 --> 00:38:21,520
what's the source of error right look

00:38:18,770 --> 00:38:24,380
what's particular thing but failed and

00:38:21,520 --> 00:38:26,480
also the error itself especially if you

00:38:24,380 --> 00:38:29,060
have large objects and you say this

00:38:26,480 --> 00:38:31,250
array should be equal to this or this

00:38:29,060 --> 00:38:34,460
object should be equal to that like we

00:38:31,250 --> 00:38:36,560
didn't have very good gifts what you can

00:38:34,460 --> 00:38:38,300
do when you interact it mode you can

00:38:36,560 --> 00:38:40,730
open your dev tools and when you click

00:38:38,300 --> 00:38:43,430
on an error you also get more

00:38:40,730 --> 00:38:45,380
information in dev tools but in the

00:38:43,430 --> 00:38:49,430
screenshot you don't see that and it's

00:38:45,380 --> 00:38:52,430
extra step so we all started thinking

00:38:49,430 --> 00:38:55,700
about this with just me saying hey every

00:38:52,430 --> 00:38:57,350
error where a command like type fails in

00:38:55,700 --> 00:39:00,200
the error message can we please add a

00:38:57,350 --> 00:39:01,880
link like to go to the type Docs like

00:39:00,200 --> 00:39:03,500
our documentation side just open a

00:39:01,880 --> 00:39:05,660
browser just just do bad so what our

00:39:03,500 --> 00:39:08,330
users can quickly look up how to use

00:39:05,660 --> 00:39:11,870
type so that's how we started what we

00:39:08,330 --> 00:39:14,000
ended up was a lot of things so for

00:39:11,870 --> 00:39:15,650
example if I if your application is

00:39:14,000 --> 00:39:17,510
throwing an error or not not our test

00:39:15,650 --> 00:39:20,690
but your application frozen error will

00:39:17,510 --> 00:39:25,640
show you the source of error right that

00:39:20,690 --> 00:39:27,470
includes source map if it's an error in

00:39:25,640 --> 00:39:29,120
our source we completely reward how

00:39:27,470 --> 00:39:31,060
we're doing the deef so it gives some

00:39:29,120 --> 00:39:33,400
more intelligent and can show you like

00:39:31,060 --> 00:39:35,440
in kind of like get gifs targeted

00:39:33,400 --> 00:39:40,380
information and if you click it will

00:39:35,440 --> 00:39:42,760
expand and in Cypress commands itself

00:39:40,380 --> 00:39:44,350
it's easy when the command fails but

00:39:42,760 --> 00:39:46,960
sometimes the command can have another

00:39:44,350 --> 00:39:49,240
command maybe your front end test calls

00:39:46,960 --> 00:39:51,880
the back end task to do something to

00:39:49,240 --> 00:39:54,520
check so in that case you have multiple

00:39:51,880 --> 00:39:58,930
places where the error occurs so we want

00:39:54,520 --> 00:40:00,250
to show everything and the thing but we

00:39:58,930 --> 00:40:02,320
are very excited and I'm really excited

00:40:00,250 --> 00:40:04,690
but the error explanation will be much

00:40:02,320 --> 00:40:06,910
much better and it will have every error

00:40:04,690 --> 00:40:08,230
will have a dark link where you can just

00:40:06,910 --> 00:40:10,480
click and immediately go to the

00:40:08,230 --> 00:40:12,460
documentation page and not just for

00:40:10,480 --> 00:40:15,910
commands but for specific errors as well

00:40:12,460 --> 00:40:17,650
where you will understand and also we

00:40:15,910 --> 00:40:20,350
really really spend too much way too

00:40:17,650 --> 00:40:22,630
much time on source maps and for only

00:40:20,350 --> 00:40:24,430
one reason so we're showing you the

00:40:22,630 --> 00:40:27,190
fragment of source where the error

00:40:24,430 --> 00:40:29,650
happens we really work hard so when you

00:40:27,190 --> 00:40:32,350
click on that it opens your text editor

00:40:29,650 --> 00:40:35,410
specifically at that location like this

00:40:32,350 --> 00:40:37,210
took so much time but I think this will

00:40:35,410 --> 00:40:39,370
be will be a killer feature where a

00:40:37,210 --> 00:40:42,060
failure leads directly to the source

00:40:39,370 --> 00:40:47,170
place in a write text editor

00:40:42,060 --> 00:40:48,370
except for beam will never okay and the

00:40:47,170 --> 00:40:50,980
final thing that I want to show with you

00:40:48,370 --> 00:40:54,550
working one which is very close to being

00:40:50,980 --> 00:40:56,650
released no matter what you do when you

00:40:54,550 --> 00:41:00,160
test the complete system it's a complete

00:40:56,650 --> 00:41:02,650
system that's very very complex think

00:41:00,160 --> 00:41:05,650
about internet you're trying to control

00:41:02,650 --> 00:41:08,830
a browser a browser was unbelievably

00:41:05,650 --> 00:41:11,200
complex piece of code which tries to use

00:41:08,830 --> 00:41:13,810
the Internet but over 30 years devolve

00:41:11,200 --> 00:41:16,720
into this morass of servers frameless

00:41:13,810 --> 00:41:19,180
were unbelievable amount of complexity

00:41:16,720 --> 00:41:22,870
where certain parts can fail at any

00:41:19,180 --> 00:41:23,830
moment which hit your back end but back

00:41:22,870 --> 00:41:26,350
end is complex

00:41:23,830 --> 00:41:29,380
so despite your best design of your

00:41:26,350 --> 00:41:32,110
software and your test some tests can

00:41:29,380 --> 00:41:33,730
still fake like that's a fact

00:41:32,110 --> 00:41:36,250
so what do we do do we stop a whole

00:41:33,730 --> 00:41:38,260
build and say well you had hundred spec

00:41:36,250 --> 00:41:41,050
files each one with ten tests so you had

00:41:38,260 --> 00:41:43,360
thousands of tests stop the build

00:41:41,050 --> 00:41:45,180
because this particular test checking

00:41:43,360 --> 00:41:48,700
the color of a button

00:41:45,180 --> 00:41:51,099
failed but when you run again it just

00:41:48,700 --> 00:41:54,369
passes again because that was just some

00:41:51,099 --> 00:41:56,730
transit fluke in CSS load no so we

00:41:54,369 --> 00:41:59,410
decided to do test retry the right way

00:41:56,730 --> 00:42:02,740
where you can set a configure option say

00:41:59,410 --> 00:42:05,829
hey if a test fails retry bet tests up

00:42:02,740 --> 00:42:07,809
to let's say three times and of course

00:42:05,829 --> 00:42:10,119
this requires a lot of changes under the

00:42:07,809 --> 00:42:11,890
hood how we keep track of test and how

00:42:10,119 --> 00:42:15,220
we show them so in this case it shows

00:42:11,890 --> 00:42:18,039
that this particular test on the first

00:42:15,220 --> 00:42:20,380
try out of three failed but it passed on

00:42:18,039 --> 00:42:21,910
a second and when you click on a failure

00:42:20,380 --> 00:42:25,859
it will open up and so you can actually

00:42:21,910 --> 00:42:28,359
see where it failed in the first try and

00:42:25,859 --> 00:42:30,369
completely optional feature but I think

00:42:28,359 --> 00:42:32,380
it will make a lot of difference to

00:42:30,369 --> 00:42:38,109
large organizations but run a lot of

00:42:32,380 --> 00:42:41,170
tests so I showed our dashboards what

00:42:38,109 --> 00:42:44,230
our test run is working on it's all work

00:42:41,170 --> 00:42:46,390
in progress but if I can leave with one

00:42:44,230 --> 00:42:48,490
thought at the end you should give

00:42:46,390 --> 00:42:51,190
Cypress a try so if you're not using

00:42:48,490 --> 00:42:54,609
Cypress right now just try it out give

00:42:51,190 --> 00:42:57,490
it an hour even or no blockers then the

00:42:54,609 --> 00:42:59,859
thing will be successful later usually

00:42:57,490 --> 00:43:02,079
an open source project but has well to

00:42:59,859 --> 00:43:05,650
be honest no precise number but it's

00:43:02,079 --> 00:43:08,170
well above 1,000 open issues if you go

00:43:05,650 --> 00:43:10,960
to our github I would run away Alex

00:43:08,170 --> 00:43:13,690
saying this project is bad but I think

00:43:10,960 --> 00:43:16,480
the number of open issues for Cypress is

00:43:13,690 --> 00:43:18,430
not with degree how broken it is but

00:43:16,480 --> 00:43:20,890
just the complexity of a task at hand

00:43:18,430 --> 00:43:23,789
we literally have issues open for every

00:43:20,890 --> 00:43:28,779
permutation of operating system CPU

00:43:23,789 --> 00:43:31,569
architecture Network stack back-end

00:43:28,779 --> 00:43:34,930
stack front and framework whole library

00:43:31,569 --> 00:43:37,329
and just like big acts of unknown other

00:43:34,930 --> 00:43:40,029
factors where we just say so basically

00:43:37,329 --> 00:43:43,569
people are trying to use it in many many

00:43:40,029 --> 00:43:46,660
ways and finding the issues in the

00:43:43,569 --> 00:43:49,630
browser behavior library behavior

00:43:46,660 --> 00:43:49,809
unspecified HTML specs and so on and so

00:43:49,630 --> 00:43:54,369
on

00:43:49,809 --> 00:43:56,680
so don't be scared give Cypress a try if

00:43:54,369 --> 00:43:58,900
you're using or working on open source

00:43:56,680 --> 00:44:01,240
project and you need research

00:43:58,900 --> 00:44:03,460
for running end-to-end tests we are

00:44:01,240 --> 00:44:06,820
there for you you know we'll give you a

00:44:03,460 --> 00:44:08,530
free plan and finally like a future is

00:44:06,820 --> 00:44:10,240
bright I think what browsers are moving

00:44:08,530 --> 00:44:13,140
in the right direction despite what we

00:44:10,240 --> 00:44:17,020
think about them I think the future of

00:44:13,140 --> 00:44:19,390
web application programming is super

00:44:17,020 --> 00:44:21,910
bright no matter what you do or what

00:44:19,390 --> 00:44:23,980
language you prefer I think the tools

00:44:21,910 --> 00:44:26,350
are getting better and we hope to

00:44:23,980 --> 00:44:28,450
contribute to the testing tools being

00:44:26,350 --> 00:44:32,650
better so thank you very much

00:44:28,450 --> 00:44:34,720
tweet at us if you use mobile app for

00:44:32,650 --> 00:44:37,120
the conference if you go to the session

00:44:34,720 --> 00:44:39,090
if you scroll all the way down there is

00:44:37,120 --> 00:44:43,060
a link you can give anonymous feedback

00:44:39,090 --> 00:44:44,680
to me right or if you you know when your

00:44:43,060 --> 00:44:46,870
name attached just talk to me or tweet

00:44:44,680 --> 00:44:47,900
at me or send email thank you very much

00:44:46,870 --> 00:44:51,370
thank you

00:44:47,900 --> 00:44:55,889
[Applause]

00:44:51,370 --> 00:44:55,889

YouTube URL: https://www.youtube.com/watch?v=2gP1-TNDzK4


