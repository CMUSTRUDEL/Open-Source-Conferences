Title: Dr. Venkat Subramaniam -  Automated Testing JavaScript
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	JavaScript is one of the most powerful and yet perilous languages. It is arguably the most ubiquitous language, the king of the client side programming the web. The dynamic nature of the language offers many benefits, but the weak typing and lack of tooling can make changes unpredictable, that is, if weâ€™re not careful. Automated testing can greatly alleviate the pains and lead to more fruitful development. In this presentation we will take look at the tools, but also the approach to automate the tests for JavaScript code. We will start with simple cases at first, but quickly dive into dealing with dependencies, and measuring code coverage.
Captions: 
	00:00:01,280 --> 00:00:10,289
[Music]

00:00:12,419 --> 00:00:17,680
good morning welcome to the presentation

00:00:15,339 --> 00:00:19,750
on automated testing JavaScript my name

00:00:17,680 --> 00:00:21,789
is Venkat Subramanyam I'm gonna talk a

00:00:19,750 --> 00:00:24,310
little bit about why we should really

00:00:21,789 --> 00:00:26,860
focus on automated testing a little bit

00:00:24,310 --> 00:00:28,810
about the benefits we derive out of it

00:00:26,860 --> 00:00:31,720
and then we'll dive in and look at

00:00:28,810 --> 00:00:33,550
automated testing of JavaScript this is

00:00:31,720 --> 00:00:36,309
a concept that I'm absolutely passionate

00:00:33,550 --> 00:00:38,110
about well a lot of times I work with a

00:00:36,309 --> 00:00:40,510
lot of different companies I consult and

00:00:38,110 --> 00:00:43,059
train and mentor and when I go to

00:00:40,510 --> 00:00:45,190
organizations they often talk about you

00:00:43,059 --> 00:00:47,680
know how they are agile and one of the

00:00:45,190 --> 00:00:49,629
first things I tell them is I'm so glad

00:00:47,680 --> 00:00:51,609
we can get get that out of the way now

00:00:49,629 --> 00:00:53,829
let's talk about what you actually do so

00:00:51,609 --> 00:00:56,350
I really like to focus on what I'd like

00:00:53,829 --> 00:00:58,840
to call as sustainable agile development

00:00:56,350 --> 00:01:01,480
so if adult development is all about

00:00:58,840 --> 00:01:03,789
being able to respond to change how can

00:01:01,480 --> 00:01:06,429
we really respond to change over time

00:01:03,789 --> 00:01:07,660
well there are several things we do in

00:01:06,429 --> 00:01:10,330
our development but one of them is

00:01:07,660 --> 00:01:12,310
adaptive planning but more important it

00:01:10,330 --> 00:01:14,289
is really to me agile development is

00:01:12,310 --> 00:01:17,050
feedback driven development

00:01:14,289 --> 00:01:19,330
so if feedback is extremely important we

00:01:17,050 --> 00:01:21,880
get feedback in two different ways one

00:01:19,330 --> 00:01:23,860
is the feedback from our customers that

00:01:21,880 --> 00:01:26,020
the code is actually relevant and does

00:01:23,860 --> 00:01:28,479
what they really want it to do the other

00:01:26,020 --> 00:01:31,330
feedback is that the code actually works

00:01:28,479 --> 00:01:34,149
and continues to work now as programmers

00:01:31,330 --> 00:01:36,280
we often are faced with continuous

00:01:34,149 --> 00:01:38,470
change of software what software is a

00:01:36,280 --> 00:01:39,880
nonlinear system you could change

00:01:38,470 --> 00:01:42,759
something over here and something

00:01:39,880 --> 00:01:44,830
completely at a different place falls

00:01:42,759 --> 00:01:46,750
apart and then we spend our time trying

00:01:44,830 --> 00:01:48,819
to figure out in debug and the most

00:01:46,750 --> 00:01:50,410
embarrassing thing for us not only in

00:01:48,819 --> 00:01:53,319
terms of reputation but also

00:01:50,410 --> 00:01:55,539
economically is when we make change the

00:01:53,319 --> 00:01:57,550
software but things don't really get

00:01:55,539 --> 00:01:59,709
back to shape and work and we end up

00:01:57,550 --> 00:02:02,619
fixing bugs over and over it can become

00:01:59,709 --> 00:02:04,690
really really hard I once tweeted that

00:02:02,619 --> 00:02:07,629
programming is the best job on earth

00:02:04,690 --> 00:02:10,030
because my definition of a programmer is

00:02:07,629 --> 00:02:12,400
somebody who gets paid once to do the

00:02:10,030 --> 00:02:14,560
work and gets paid repeatedly to do it

00:02:12,400 --> 00:02:16,420
again and again and again so we never

00:02:14,560 --> 00:02:18,280
want to let the management know about

00:02:16,420 --> 00:02:19,989
this right because we have the best job

00:02:18,280 --> 00:02:22,030
because we can get paid for doing the

00:02:19,989 --> 00:02:23,109
same thing multiple times but I think we

00:02:22,030 --> 00:02:25,500
should really have the professional

00:02:23,109 --> 00:02:27,780
responsibility to fix that and

00:02:25,500 --> 00:02:29,570
feedback loop now when it comes to

00:02:27,780 --> 00:02:32,580
software in the agile development

00:02:29,570 --> 00:02:34,350
environment we constantly change and

00:02:32,580 --> 00:02:36,600
evolve to change and respond to change

00:02:34,350 --> 00:02:39,840
but one of the things we often are faced

00:02:36,600 --> 00:02:41,820
with is you know as a programmer you sit

00:02:39,840 --> 00:02:43,440
there and make change to the code you

00:02:41,820 --> 00:02:45,000
change code because you want to maybe

00:02:43,440 --> 00:02:47,850
fix a bug you want to make an

00:02:45,000 --> 00:02:50,940
enhancement add a new feature whatever

00:02:47,850 --> 00:02:53,220
that may be and when you're done you say

00:02:50,940 --> 00:02:55,350
I finished that word and then they ask

00:02:53,220 --> 00:02:57,930
us this most dreadful question nobody

00:02:55,350 --> 00:02:59,070
likes to get as dissing did they ask us

00:02:57,930 --> 00:03:01,709
does it work

00:02:59,070 --> 00:03:04,110
and often time programmers have this

00:03:01,709 --> 00:03:07,020
beautiful sentiment they represent they

00:03:04,110 --> 00:03:09,540
call it I hope and I love this phrase I

00:03:07,020 --> 00:03:12,209
hope because we hear this constantly in

00:03:09,540 --> 00:03:14,340
fact it's so popular there's a technical

00:03:12,209 --> 00:03:17,280
name for word that approach of

00:03:14,340 --> 00:03:19,620
developing software is called jdd which

00:03:17,280 --> 00:03:22,140
stands for Jesus driven development and

00:03:19,620 --> 00:03:24,510
and we do this a lot in our development

00:03:22,140 --> 00:03:26,340
and don't get me wrong I do put faith in

00:03:24,510 --> 00:03:27,930
the Lord but I think the Lord has better

00:03:26,340 --> 00:03:29,910
things to do than worry about the

00:03:27,930 --> 00:03:33,900
stinking code I'm writing I would rather

00:03:29,910 --> 00:03:35,970
do TDD rather than doing jdd and again I

00:03:33,900 --> 00:03:38,010
want emphasis what TDD is because in

00:03:35,970 --> 00:03:40,650
some organizations that stands for

00:03:38,010 --> 00:03:42,660
thread driven development no I want to

00:03:40,650 --> 00:03:44,820
talk about test-driven development over

00:03:42,660 --> 00:03:47,070
here so how do we really approach our

00:03:44,820 --> 00:03:49,350
testing to get that feedback loop so we

00:03:47,070 --> 00:03:52,250
know the code is actually working and I

00:03:49,350 --> 00:03:55,140
want to start by quickly saying I loved

00:03:52,250 --> 00:03:57,239
manual testing and I won't just put that

00:03:55,140 --> 00:03:59,040
out and say I do really love manual

00:03:57,239 --> 00:04:00,480
testing I know you're looking at me with

00:03:59,040 --> 00:04:01,140
the suspicious eyes and like are you

00:04:00,480 --> 00:04:03,450
crazy

00:04:01,140 --> 00:04:06,060
well I want to emphasize that because I

00:04:03,450 --> 00:04:06,540
wanted to find what testing really means

00:04:06,060 --> 00:04:10,620
to me

00:04:06,540 --> 00:04:13,500
so testing is a is an act of gaining

00:04:10,620 --> 00:04:15,450
really insight into the application

00:04:13,500 --> 00:04:17,760
that's what testing really is for me

00:04:15,450 --> 00:04:20,130
it's an act of gaining insight hey

00:04:17,760 --> 00:04:22,140
should we really eliminate this workflow

00:04:20,130 --> 00:04:23,729
that we are doing at this point

00:04:22,140 --> 00:04:26,190
maybe we should really do we structure

00:04:23,729 --> 00:04:28,380
our application maybe these forms are

00:04:26,190 --> 00:04:30,720
really not laid out properly hey is the

00:04:28,380 --> 00:04:33,180
performance really GERD are there things

00:04:30,720 --> 00:04:35,430
we can eliminate from the application

00:04:33,180 --> 00:04:38,190
that the user is not burdened with to me

00:04:35,430 --> 00:04:41,130
those are testing but on the other hand

00:04:38,190 --> 00:04:44,460
what do we do most of the time when we

00:04:41,130 --> 00:04:48,030
write code we want to know that a simple

00:04:44,460 --> 00:04:50,910
fact it worked it worked yesterday and

00:04:48,030 --> 00:04:54,690
then we asked the question you know

00:04:50,910 --> 00:04:56,610
yesterday does it still work this is one

00:04:54,690 --> 00:04:59,400
of the things we really want to know is

00:04:56,610 --> 00:04:59,940
that it worked yesterday does it still

00:04:59,400 --> 00:05:02,400
work

00:04:59,940 --> 00:05:05,520
that's not testing to me I want to say

00:05:02,400 --> 00:05:07,590
that is called a verification and I want

00:05:05,520 --> 00:05:10,850
to emphasize that when it comes to

00:05:07,590 --> 00:05:14,280
verification we should never verify

00:05:10,850 --> 00:05:17,280
manually so automate I would say you

00:05:14,280 --> 00:05:19,650
were verifications so in other words we

00:05:17,280 --> 00:05:21,540
want to be able to get a very rapid

00:05:19,650 --> 00:05:24,810
feedback that the code we wrote

00:05:21,540 --> 00:05:27,810
yesterday still works today and and

00:05:24,810 --> 00:05:30,720
manually verifying software is the most

00:05:27,810 --> 00:05:33,930
insane practice in our industry and I

00:05:30,720 --> 00:05:36,990
would even argue asking a human being to

00:05:33,930 --> 00:05:39,420
verify if the code still works is an

00:05:36,990 --> 00:05:42,480
insult on humanity and we should never

00:05:39,420 --> 00:05:44,940
tolerate that so the point really is we

00:05:42,480 --> 00:05:46,440
should write the test once and automate

00:05:44,940 --> 00:05:48,990
it so we can get a continuous feedback

00:05:46,440 --> 00:05:51,840
loop and and that is extremely important

00:05:48,990 --> 00:05:53,790
and and once we get into our culture we

00:05:51,840 --> 00:05:56,280
can do that really really well in our

00:05:53,790 --> 00:05:59,190
applications but unfortunately though

00:05:56,280 --> 00:06:01,590
the problem is that when it comes to

00:05:59,190 --> 00:06:03,870
automated verification how do we really

00:06:01,590 --> 00:06:06,300
do this well part of the reason is that

00:06:03,870 --> 00:06:10,520
we want to get really good at it and in

00:06:06,300 --> 00:06:14,190
my experience I've seen three kinds of

00:06:10,520 --> 00:06:16,020
organizations out there that are really

00:06:14,190 --> 00:06:18,150
attempting to work in this particular

00:06:16,020 --> 00:06:20,340
area the first one I've noticed

00:06:18,150 --> 00:06:24,419
unfortunately is the industry-wide

00:06:20,340 --> 00:06:27,690
standard is no automation at all so the

00:06:24,419 --> 00:06:30,240
these organizations do still manual

00:06:27,690 --> 00:06:32,100
verification they verify the software

00:06:30,240 --> 00:06:34,560
they write the code and then they put a

00:06:32,100 --> 00:06:36,440
group of people to really click on the

00:06:34,560 --> 00:06:39,180
buttons and see if things really work

00:06:36,440 --> 00:06:40,800
unfortunately this doesn't scale because

00:06:39,180 --> 00:06:43,110
the software as the software becomes

00:06:40,800 --> 00:06:44,820
bigger and bigger when you make a change

00:06:43,110 --> 00:06:47,100
to a piece of code you cannot just

00:06:44,820 --> 00:06:48,960
isolate and test that alone you need to

00:06:47,100 --> 00:06:51,030
make sure that the entire application is

00:06:48,960 --> 00:06:52,070
still working and there's no way you can

00:06:51,030 --> 00:06:53,900
keep up with the pace

00:06:52,070 --> 00:06:56,300
and these organizations are losing

00:06:53,900 --> 00:06:58,280
big-time but they're just in denial in

00:06:56,300 --> 00:07:00,350
terms of you know how they can approach

00:06:58,280 --> 00:07:03,230
it but to me one of the biggest concerns

00:07:00,350 --> 00:07:05,480
I have is not just the fact that these

00:07:03,230 --> 00:07:07,820
organizations don't spend enough effort

00:07:05,480 --> 00:07:09,410
automating there is a generation of

00:07:07,820 --> 00:07:12,230
programmers that work in these

00:07:09,410 --> 00:07:14,600
organizations who totally lack the skill

00:07:12,230 --> 00:07:16,220
to automate even when that is becoming

00:07:14,600 --> 00:07:17,930
essential to what they do

00:07:16,220 --> 00:07:19,940
so imagine working in one of these

00:07:17,930 --> 00:07:21,620
organizations and then going into

00:07:19,940 --> 00:07:23,660
another company where automation is

00:07:21,620 --> 00:07:25,970
being done you start at a very

00:07:23,660 --> 00:07:27,890
significant disadvantage because you

00:07:25,970 --> 00:07:29,090
simply don't have the skill to really do

00:07:27,890 --> 00:07:31,520
it and that's one of the biggest

00:07:29,090 --> 00:07:33,980
concerns I have is I want to be able to

00:07:31,520 --> 00:07:35,930
automate and deliver better product and

00:07:33,980 --> 00:07:37,880
results so that skill is important as

00:07:35,930 --> 00:07:40,970
much as the results we produce as well

00:07:37,880 --> 00:07:43,610
the second group of organizations is yes

00:07:40,970 --> 00:07:45,590
to automation but well these

00:07:43,610 --> 00:07:48,470
organizations have realized that

00:07:45,590 --> 00:07:50,390
automation is extremely important but

00:07:48,470 --> 00:07:53,030
they are still struggling to figure out

00:07:50,390 --> 00:07:55,460
how to actually do it and one of the

00:07:53,030 --> 00:07:57,560
things they do is to go hire people with

00:07:55,460 --> 00:08:00,470
a really beautiful title for example an

00:07:57,560 --> 00:08:02,870
automation engineer well the automation

00:08:00,470 --> 00:08:05,030
engineer gets hired shows up to work one

00:08:02,870 --> 00:08:07,520
morning and says hey folks I'm the new

00:08:05,030 --> 00:08:09,320
hire on the automation engineer I'm here

00:08:07,520 --> 00:08:11,180
to work with you all the programmers

00:08:09,320 --> 00:08:13,010
were busy fixing bugs look at the new

00:08:11,180 --> 00:08:16,280
hire and say hey welcome to her company

00:08:13,010 --> 00:08:17,990
now don't bother us go away and so the

00:08:16,280 --> 00:08:20,090
poor automation is the new year walks

00:08:17,990 --> 00:08:22,970
around and figures out what he or she

00:08:20,090 --> 00:08:25,760
can do and as time goes on a few weeks

00:08:22,970 --> 00:08:27,560
goes by the boss is you know runs into

00:08:25,760 --> 00:08:29,540
the automation engineer on the on the in

00:08:27,560 --> 00:08:32,180
the lobby and says hey you've been here

00:08:29,540 --> 00:08:33,650
for a few weeks now Friday at 2 p.m. I

00:08:32,180 --> 00:08:35,510
want to talk about what you have done so

00:08:33,650 --> 00:08:36,979
far and the automation engineer is like

00:08:35,510 --> 00:08:38,690
oh my goodness what do I do

00:08:36,979 --> 00:08:39,950
the programmers don't want to talk to me

00:08:38,690 --> 00:08:42,590
they don't want to help me to automate

00:08:39,950 --> 00:08:43,190
but I got automate this application what

00:08:42,590 --> 00:08:45,440
can I do

00:08:43,190 --> 00:08:48,500
and this automation engineer discovers

00:08:45,440 --> 00:08:51,410
this beautiful thing called selenium now

00:08:48,500 --> 00:08:55,310
this is amazing because selenium

00:08:51,410 --> 00:08:58,160
actually is in my observation leads to

00:08:55,310 --> 00:09:00,710
one thing called a pathway to hell

00:08:58,160 --> 00:09:03,110
automation and this is basically one of

00:09:00,710 --> 00:09:06,080
the problems is because every single

00:09:03,110 --> 00:09:08,899
organization I've come across has landed

00:09:06,080 --> 00:09:10,940
the strap and they don't have a ability

00:09:08,899 --> 00:09:12,800
to maintain the test in the long run and

00:09:10,940 --> 00:09:15,110
it becomes really really hard to keep up

00:09:12,800 --> 00:09:17,029
with and I'm of a firm belief that

00:09:15,110 --> 00:09:19,279
automation should be done at the right

00:09:17,029 --> 00:09:23,000
level to the right measure so that's

00:09:19,279 --> 00:09:26,060
exactly where I want to be yes but at

00:09:23,000 --> 00:09:29,420
the right level and I'm gonna say to the

00:09:26,060 --> 00:09:30,980
right measure so in other words how do

00:09:29,420 --> 00:09:33,680
you really get to the right level and

00:09:30,980 --> 00:09:35,630
the right measure for automation well

00:09:33,680 --> 00:09:38,029
you know we live in a field where we'll

00:09:35,630 --> 00:09:40,430
do weird things but give beautiful name

00:09:38,029 --> 00:09:42,860
for what we do this kind of approach

00:09:40,430 --> 00:09:45,380
where most of the automation is done at

00:09:42,860 --> 00:09:48,829
the UI level is often called as ice

00:09:45,380 --> 00:09:51,820
cream cone pattern and and this ice

00:09:48,829 --> 00:09:54,140
cream cone pattern actually is a

00:09:51,820 --> 00:09:56,930
anti-pattern rather than being a pattern

00:09:54,140 --> 00:09:59,120
and this becomes really hard to maintain

00:09:56,930 --> 00:10:01,130
the automation in the long run but what

00:09:59,120 --> 00:10:03,620
we really want to achieve is what is

00:10:01,130 --> 00:10:05,690
called a test pyramid and the test

00:10:03,620 --> 00:10:07,970
pyramid gives us an ability for us to

00:10:05,690 --> 00:10:09,950
write the automation at the right level

00:10:07,970 --> 00:10:13,130
to the right measure and so in other

00:10:09,950 --> 00:10:15,770
words how do we really do automation my

00:10:13,130 --> 00:10:18,980
argument is don't write most of your

00:10:15,770 --> 00:10:21,860
automation at the UI level but peel off

00:10:18,980 --> 00:10:25,100
the UI just a little bit and then do the

00:10:21,860 --> 00:10:26,300
automation one layer below that and when

00:10:25,100 --> 00:10:28,940
you're developing the front-end

00:10:26,300 --> 00:10:30,980
application sure you want to be able to

00:10:28,940 --> 00:10:33,380
run your automation on the JavaScript

00:10:30,980 --> 00:10:35,720
but you want to be able to run that not

00:10:33,380 --> 00:10:38,270
through the HTML layer but one right

00:10:35,720 --> 00:10:39,320
below but of course you may ask well why

00:10:38,270 --> 00:10:40,940
are we running the code at the

00:10:39,320 --> 00:10:42,709
JavaScript layer I'll give you an

00:10:40,940 --> 00:10:45,440
example of this I was working on an

00:10:42,709 --> 00:10:48,020
application where I need to pull it as

00:10:45,440 --> 00:10:50,420
an example let's say employees that work

00:10:48,020 --> 00:10:52,370
in an organization but the problem is

00:10:50,420 --> 00:10:55,279
that I need to be able to sort these

00:10:52,370 --> 00:10:57,230
employees based on their names and if

00:10:55,279 --> 00:10:59,839
the names are similar based on other

00:10:57,230 --> 00:11:01,339
criteria now how do I know my code is

00:10:59,839 --> 00:11:04,130
not only displaying the employees

00:11:01,339 --> 00:11:06,350
properly but in the sorted order as well

00:11:04,130 --> 00:11:09,320
and I sat down to write this test at the

00:11:06,350 --> 00:11:12,160
UI level and I realized how verbose and

00:11:09,320 --> 00:11:15,110
tiring this was and I realized quickly

00:11:12,160 --> 00:11:17,029
why am I even bothering doing this at

00:11:15,110 --> 00:11:18,920
the UI level after all if I'm going to

00:11:17,029 --> 00:11:19,699
be putting that code in the HTML that's

00:11:18,920 --> 00:11:21,559
probably a sign

00:11:19,699 --> 00:11:22,910
really bad design in the first place and

00:11:21,559 --> 00:11:25,009
that is one of the things I want to

00:11:22,910 --> 00:11:27,439
emphasize quite a bit I often listen

00:11:25,009 --> 00:11:30,859
keenly to what programmers say when you

00:11:27,439 --> 00:11:34,279
hear a programmer say this Court is hard

00:11:30,859 --> 00:11:36,319
to test now what they really mean is not

00:11:34,279 --> 00:11:39,709
that this code is hard to test what they

00:11:36,319 --> 00:11:42,709
really mean as the design of this code

00:11:39,709 --> 00:11:45,079
sucks that's what they really mean so so

00:11:42,709 --> 00:11:47,179
normally when people are complaining

00:11:45,079 --> 00:11:49,129
about testability they're really

00:11:47,179 --> 00:11:51,949
complaining about the poor design in the

00:11:49,129 --> 00:11:53,269
code in effect so and I realized that I

00:11:51,949 --> 00:11:55,939
was really you know barking at the wrong

00:11:53,269 --> 00:11:57,949
tree at this point so what I did was I

00:11:55,939 --> 00:12:00,259
wrote a test at the JavaScript layer

00:11:57,949 --> 00:12:02,959
where the sorting was actually happening

00:12:00,259 --> 00:12:05,660
and that was much faster much easier a

00:12:02,959 --> 00:12:07,459
really quick feedback loop as well and I

00:12:05,660 --> 00:12:09,980
don't have to waste my time writing the

00:12:07,459 --> 00:12:12,169
code at the HTML level I can write the

00:12:09,980 --> 00:12:13,639
test in the JavaScript level now I'm not

00:12:12,169 --> 00:12:16,999
going to tell you that we should never

00:12:13,639 --> 00:12:19,669
do any testing at the UI level what I'm

00:12:16,999 --> 00:12:21,980
saying is that most of what we do should

00:12:19,669 --> 00:12:25,249
be a layers below in other words I'm

00:12:21,980 --> 00:12:29,749
gonna say integration testing to use a

00:12:25,249 --> 00:12:33,079
metaphor is like a salt in a meal now we

00:12:29,749 --> 00:12:37,910
all can agree you know we can't have a

00:12:33,079 --> 00:12:42,019
meal without salt but we can't and we

00:12:37,910 --> 00:12:45,049
shouldn't really make a meal well you

00:12:42,019 --> 00:12:47,179
know off salt as well so this is exactly

00:12:45,049 --> 00:12:49,279
my point about integration testing

00:12:47,179 --> 00:12:52,339
integration testing is like a salt and a

00:12:49,279 --> 00:12:55,189
meal you want enough of it but not all

00:12:52,339 --> 00:12:57,410
of it so I would definitely want to have

00:12:55,189 --> 00:12:59,299
integration testing just to tell me

00:12:57,410 --> 00:13:01,639
there's life here that there's a

00:12:59,299 --> 00:13:03,859
connectivity between my HTML and the

00:13:01,639 --> 00:13:06,139
JavaScript below the buttons are wired

00:13:03,859 --> 00:13:08,059
properly and I'm done with the testing

00:13:06,139 --> 00:13:10,789
of that layer and I would drive my tests

00:13:08,059 --> 00:13:12,949
in layers below after that quite a bit

00:13:10,789 --> 00:13:14,749
well enough talking about these stuff

00:13:12,949 --> 00:13:16,970
let's take a look at how we could do

00:13:14,749 --> 00:13:18,980
some of this I'm gonna use absolutely

00:13:16,970 --> 00:13:20,329
trivial examples over here and the

00:13:18,980 --> 00:13:22,339
reason is that I don't want to get

00:13:20,329 --> 00:13:24,350
dragged into a problem but I want to

00:13:22,339 --> 00:13:26,329
focus on the tools and the solution and

00:13:24,350 --> 00:13:28,009
the approach I would take if you're

00:13:26,329 --> 00:13:29,839
interested in this there are so many

00:13:28,009 --> 00:13:31,489
different tools out there I don't want

00:13:29,839 --> 00:13:33,140
to emphasize the tools I'm going to use

00:13:31,489 --> 00:13:35,180
here are really not

00:13:33,140 --> 00:13:37,790
the recommendations in any stretch of

00:13:35,180 --> 00:13:40,640
imagination but just examples use

00:13:37,790 --> 00:13:43,070
whatever tool you want to do or you want

00:13:40,640 --> 00:13:44,990
to use almost every single tool out

00:13:43,070 --> 00:13:47,300
there is good enough to solve your

00:13:44,990 --> 00:13:48,829
problems the most important thing is of

00:13:47,300 --> 00:13:51,260
course to have the discipline and the

00:13:48,829 --> 00:13:53,240
commitment to really do this and once we

00:13:51,260 --> 00:13:55,040
have the driving force of discipline and

00:13:53,240 --> 00:13:57,170
commitment we can figure out how to use

00:13:55,040 --> 00:13:59,240
any of these tools so let's get started

00:13:57,170 --> 00:14:01,250
with a little example and see how we can

00:13:59,240 --> 00:14:03,470
use it and then of course what I'm going

00:14:01,250 --> 00:14:06,589
to show you here works pretty much with

00:14:03,470 --> 00:14:08,930
back in JavaScript and also front-end

00:14:06,589 --> 00:14:11,209
JavaScript as well I typically give this

00:14:08,930 --> 00:14:13,490
talk over 90 minutes I spend half the

00:14:11,209 --> 00:14:15,320
time on a back in JavaScript and then I

00:14:13,490 --> 00:14:17,120
switch over to front-end but given the

00:14:15,320 --> 00:14:19,430
time limitations we have here I'll just

00:14:17,120 --> 00:14:20,810
focus on the front-end alone and show

00:14:19,430 --> 00:14:23,570
you some examples of how we can actually

00:14:20,810 --> 00:14:25,459
do this so let's start with a little

00:14:23,570 --> 00:14:28,610
quick example of setting up a project

00:14:25,459 --> 00:14:30,470
that we can use to begin with so here I

00:14:28,610 --> 00:14:32,360
have an empty directory I have nothing

00:14:30,470 --> 00:14:34,730
really here I'm gonna just go ahead and

00:14:32,360 --> 00:14:36,890
create a directory here let's call it a

00:14:34,730 --> 00:14:39,589
sample for lack of better words and I'm

00:14:36,890 --> 00:14:40,730
gonna simply do an NPM init on this just

00:14:39,589 --> 00:14:42,380
to go ahead and get started I'm just

00:14:40,730 --> 00:14:44,329
gonna take all the defaults right there

00:14:42,380 --> 00:14:47,149
so all that it created was a package

00:14:44,329 --> 00:14:49,339
JSON file as you can see so now that we

00:14:47,149 --> 00:14:51,050
have a package JSON file let's get

00:14:49,339 --> 00:14:53,420
started with that as a starting point

00:14:51,050 --> 00:14:57,290
let me just open up this package JSON

00:14:53,420 --> 00:14:59,480
file in the sample directory so so what

00:14:57,290 --> 00:15:01,550
do we notice in this particular file

00:14:59,480 --> 00:15:04,459
well it doesn't have a whole lot right

00:15:01,550 --> 00:15:08,029
now as you can see in here that is just

00:15:04,459 --> 00:15:10,040
a regular plain package.json nothing

00:15:08,029 --> 00:15:12,290
really exciting but I'm gonna install a

00:15:10,040 --> 00:15:14,420
certain tools we need before we get

00:15:12,290 --> 00:15:17,570
going and I'm gonna do an NPM install

00:15:14,420 --> 00:15:19,940
I'm a huge fan of mocha and chai I've

00:15:17,570 --> 00:15:21,980
also used Jasmine like I mentioned it

00:15:19,940 --> 00:15:23,870
doesn't matter what tools you choose to

00:15:21,980 --> 00:15:25,610
use use whatever tools you want to use

00:15:23,870 --> 00:15:28,399
so I'm going to start with mocha and

00:15:25,610 --> 00:15:30,260
chai and a bunch of other dependencies

00:15:28,399 --> 00:15:32,959
we'll talk about what those things are

00:15:30,260 --> 00:15:35,120
when we walk through them and not all at

00:15:32,959 --> 00:15:37,880
the same time so what I want to do here

00:15:35,120 --> 00:15:39,769
is simply do a npm install of all those

00:15:37,880 --> 00:15:42,020
things and and then we will move on

00:15:39,769 --> 00:15:43,670
really quickly after that so now that

00:15:42,020 --> 00:15:45,290
I'm installing those things what are we

00:15:43,670 --> 00:15:47,000
going to do I want to start writing

00:15:45,290 --> 00:15:49,130
automated tests

00:15:47,000 --> 00:15:52,220
I'm a huge fan of really a fast feedback

00:15:49,130 --> 00:15:54,890
loops and I often start writing tests on

00:15:52,220 --> 00:15:57,650
a new project by writing what's called a

00:15:54,890 --> 00:15:59,540
canary test a canary test is the

00:15:57,650 --> 00:16:02,540
stupidest test you can actually write a

00:15:59,540 --> 00:16:04,730
canary test simply asserts that true is

00:16:02,540 --> 00:16:07,340
true now you may wonder why bother

00:16:04,730 --> 00:16:09,620
writing such a stupid test a case in

00:16:07,340 --> 00:16:11,660
point I was at a client site where I

00:16:09,620 --> 00:16:14,180
knew nothing about their project but my

00:16:11,660 --> 00:16:16,220
job was to help them to get better at

00:16:14,180 --> 00:16:18,020
automated testing so I sit down next to

00:16:16,220 --> 00:16:20,180
this programmer who says hey we know

00:16:18,020 --> 00:16:21,860
you're coming we're already and I said

00:16:20,180 --> 00:16:22,490
well let's write a canary test he said

00:16:21,860 --> 00:16:24,800
what is that

00:16:22,490 --> 00:16:27,500
I said assert true was true he said well

00:16:24,800 --> 00:16:29,090
that's stupid I said absolutely true oh

00:16:27,500 --> 00:16:30,740
so I shouldn't take a whole lot of time

00:16:29,090 --> 00:16:32,720
to do stupid things isn't it let's get

00:16:30,740 --> 00:16:35,120
that working I'm not kidding it took us

00:16:32,720 --> 00:16:37,040
40 minutes to get the Kennedy test to

00:16:35,120 --> 00:16:38,810
pass because the tools were not set up

00:16:37,040 --> 00:16:40,670
properly and Wyman was not configured

00:16:38,810 --> 00:16:42,650
properly and what do I know as an

00:16:40,670 --> 00:16:44,990
external person about their proxy

00:16:42,650 --> 00:16:46,310
settings so it took us a while and when

00:16:44,990 --> 00:16:49,160
somebody comes over to say what are you

00:16:46,310 --> 00:16:50,780
doing let me help you if they look at 40

00:16:49,160 --> 00:16:52,730
lines of code you've written they're

00:16:50,780 --> 00:16:55,520
gonna argue about that code but when you

00:16:52,730 --> 00:16:57,740
show them a stupid assert true is true

00:16:55,520 --> 00:17:00,020
they're gonna say that stupid like yeah

00:16:57,740 --> 00:17:02,450
let's get that working so I can give you

00:17:00,020 --> 00:17:03,680
focus on the tools also when you come to

00:17:02,450 --> 00:17:05,839
a project if things are not working

00:17:03,680 --> 00:17:07,910
because you upgraded something well you

00:17:05,839 --> 00:17:10,010
can quickly see if the canary test is

00:17:07,910 --> 00:17:11,990
passing if that doesn't pass why bother

00:17:10,010 --> 00:17:14,569
looking at anything else so a canary

00:17:11,990 --> 00:17:16,699
test is very useful to get that really

00:17:14,569 --> 00:17:18,650
quick feedback loop and this goes for

00:17:16,699 --> 00:17:21,140
the concept of canary in a coal mine

00:17:18,650 --> 00:17:23,089
where the miners take this bird canary

00:17:21,140 --> 00:17:24,890
to the mine this is really good for the

00:17:23,089 --> 00:17:26,810
miners but not so much for the canary

00:17:24,890 --> 00:17:28,130
but to get a quick feedback that

00:17:26,810 --> 00:17:30,860
something is wrong and they can escape

00:17:28,130 --> 00:17:33,200
out well all I did was install mocha and

00:17:30,860 --> 00:17:36,140
chai right now but I also installed

00:17:33,200 --> 00:17:39,440
karma and karma is a tool that is useful

00:17:36,140 --> 00:17:41,510
to run your tests within a browser and

00:17:39,440 --> 00:17:43,340
so we can make use of it so what am I

00:17:41,510 --> 00:17:44,780
going to do at this point well I've got

00:17:43,340 --> 00:17:46,820
to do a couple of different setup the

00:17:44,780 --> 00:17:49,130
first thing I'm going to do is to go to

00:17:46,820 --> 00:17:51,230
the node modules directory right here in

00:17:49,130 --> 00:17:52,880
fact I'll do this from here so I'll go

00:17:51,230 --> 00:17:55,370
to the node modules directory go to

00:17:52,880 --> 00:17:58,220
Carmen and I'm gonna run in this case

00:17:55,370 --> 00:18:00,650
the karma tool with the in it so I can

00:17:58,220 --> 00:18:02,750
just initialize this really quickly it

00:18:00,650 --> 00:18:04,820
asking do you want to use jasmine or

00:18:02,750 --> 00:18:06,620
what do you want to use pick up the tool

00:18:04,820 --> 00:18:09,050
you are interested in using I'm just

00:18:06,620 --> 00:18:11,180
gonna use more cover now it says we want

00:18:09,050 --> 00:18:12,950
to set up a require.js I said no it's

00:18:11,180 --> 00:18:15,020
just we want to use Chrome you can say

00:18:12,950 --> 00:18:17,870
absolutely if you want to use Chrome you

00:18:15,020 --> 00:18:19,940
can also tab and use other versions of

00:18:17,870 --> 00:18:22,310
the browser so you can have your code

00:18:19,940 --> 00:18:25,460
tested across browsers as well so pick

00:18:22,310 --> 00:18:27,740
what a word that you like to choose and

00:18:25,460 --> 00:18:29,750
of heck no so but anyway so choose

00:18:27,740 --> 00:18:31,610
whatever that you like to use but you

00:18:29,750 --> 00:18:33,110
can you know decide on the particular

00:18:31,610 --> 00:18:35,090
browser that makes sense you can even

00:18:33,110 --> 00:18:36,740
run multiple browsers if you're really

00:18:35,090 --> 00:18:38,060
interested and at this point I'm just

00:18:36,740 --> 00:18:40,540
gonna hit the return and take the

00:18:38,060 --> 00:18:43,700
defaults and that brings us to karma

00:18:40,540 --> 00:18:46,160
kanji as let's take a quick look at it

00:18:43,700 --> 00:18:48,590
I'm gonna configure a few things in here

00:18:46,160 --> 00:18:51,440
I'm gonna bring in in addition to mocha

00:18:48,590 --> 00:18:54,650
I'm gonna bring in chai as well because

00:18:51,440 --> 00:18:56,600
mocha is the testing tool chai gives us

00:18:54,650 --> 00:18:58,790
the assertion library that we can

00:18:56,600 --> 00:19:00,470
actually use so I'm gonna bring both of

00:18:58,790 --> 00:19:02,480
those in here we'll come back and add a

00:19:00,470 --> 00:19:04,610
few more things later on what are the

00:19:02,480 --> 00:19:06,440
files where the files I want to use I'm

00:19:04,610 --> 00:19:09,140
gonna say the first thing I want to use

00:19:06,440 --> 00:19:11,360
here is test and within that test I want

00:19:09,140 --> 00:19:14,120
to go to all the subdirectories and open

00:19:11,360 --> 00:19:16,280
up all the JavaScript files and I'm

00:19:14,120 --> 00:19:18,140
gonna also use a source directory and

00:19:16,280 --> 00:19:20,690
bring in all the JavaScript files as

00:19:18,140 --> 00:19:22,760
well so I provide the path to where my

00:19:20,690 --> 00:19:25,190
files are located or they will be

00:19:22,760 --> 00:19:26,750
located and that's all I have so far and

00:19:25,190 --> 00:19:28,970
I'm gonna come back and look at a few

00:19:26,750 --> 00:19:31,430
more things but really quickly an auto

00:19:28,970 --> 00:19:33,050
watch is really useful to keep running

00:19:31,430 --> 00:19:35,120
the tests as you are working with the

00:19:33,050 --> 00:19:37,430
code so you don't have to keep running

00:19:35,120 --> 00:19:39,920
the tool over and over in the browsers

00:19:37,430 --> 00:19:42,350
area you can see Chrome but it can put

00:19:39,920 --> 00:19:44,420
other browsers here as well as as much

00:19:42,350 --> 00:19:46,190
as you would like to see those tests run

00:19:44,420 --> 00:19:47,180
across so we'll come back to this file

00:19:46,190 --> 00:19:49,340
later when we need it

00:19:47,180 --> 00:19:51,410
so we installed a bunch of stuff so what

00:19:49,340 --> 00:19:53,840
do I want to do next well the next thing

00:19:51,410 --> 00:19:56,900
I'm going to do is for the test I'm

00:19:53,840 --> 00:19:59,420
gonna start karma right here and I'm

00:19:56,900 --> 00:20:01,880
gonna run essentially karma and I'm

00:19:59,420 --> 00:20:04,070
gonna say start and the reporters I want

00:20:01,880 --> 00:20:06,080
to use is the dots reporter that puts a

00:20:04,070 --> 00:20:07,820
little dot as the test is running for

00:20:06,080 --> 00:20:09,830
impatient people like me I know that

00:20:07,820 --> 00:20:10,970
things are still running and and one of

00:20:09,830 --> 00:20:13,250
the things that really made me angry

00:20:10,970 --> 00:20:14,029
working with karma in the beginning was

00:20:13,250 --> 00:20:15,889
it would run

00:20:14,029 --> 00:20:18,440
test and then you make a code change at

00:20:15,889 --> 00:20:20,239
once test again after that and that was

00:20:18,440 --> 00:20:22,789
annoying for me because if you want to

00:20:20,239 --> 00:20:25,309
look at a failure I was not sure which

00:20:22,789 --> 00:20:26,960
run the failure was part of and I spent

00:20:25,309 --> 00:20:29,479
a few minutes looking for a little

00:20:26,960 --> 00:20:32,359
plugin and I was so happy to find clear

00:20:29,479 --> 00:20:33,979
screen so every time you save a file it

00:20:32,359 --> 00:20:36,349
clears the screen and then runs your

00:20:33,979 --> 00:20:38,659
tests so you only see the latest output

00:20:36,349 --> 00:20:40,700
on your screen so that's a lot easier to

00:20:38,659 --> 00:20:42,259
just keep your focus on and look at only

00:20:40,700 --> 00:20:44,570
things you need to really look at all

00:20:42,259 --> 00:20:47,570
right so with that said let's get to the

00:20:44,570 --> 00:20:49,549
first test which is the canary test to

00:20:47,570 --> 00:20:51,499
get the feedback loop going so what are

00:20:49,549 --> 00:20:53,599
we going to do here notice that in this

00:20:51,499 --> 00:20:56,749
case we have the package.json we created

00:20:53,599 --> 00:20:58,940
we got the karmic on j/s let's create a

00:20:56,749 --> 00:21:01,339
directory called source and a directory

00:20:58,940 --> 00:21:03,979
called test as well within the test

00:21:01,339 --> 00:21:06,919
directory I'm gonna simply create sample

00:21:03,979 --> 00:21:08,629
test rjs that just a test file we're

00:21:06,919 --> 00:21:10,999
gonna start with so what am I going to

00:21:08,629 --> 00:21:12,859
do in this test first of all well in

00:21:10,999 --> 00:21:15,049
this test what I'm gonna do is to start

00:21:12,859 --> 00:21:19,190
with their describe and and this is

00:21:15,049 --> 00:21:21,830
going to be describing the test I want

00:21:19,190 --> 00:21:23,809
to start creating so the describe I'll

00:21:21,830 --> 00:21:25,549
call this a sample test to begin with

00:21:23,809 --> 00:21:28,909
and I'm gonna create a test called a

00:21:25,549 --> 00:21:33,049
canary sure the sink or whatever you

00:21:28,909 --> 00:21:36,169
want to you know say so so basically you

00:21:33,049 --> 00:21:39,109
can write a canary test expect well this

00:21:36,169 --> 00:21:41,149
is going to be using the toy API you can

00:21:39,109 --> 00:21:43,399
use expect you can use assert you can

00:21:41,149 --> 00:21:45,799
use should whatever that makes you happy

00:21:43,399 --> 00:21:47,719
I have no personal preference at all for

00:21:45,799 --> 00:21:50,389
the world to use they can use whatever

00:21:47,719 --> 00:21:53,509
they like to use so expect true to be

00:21:50,389 --> 00:21:55,099
true that's my stupid canary test to

00:21:53,509 --> 00:21:58,099
begin with and I want to know that's

00:21:55,099 --> 00:21:59,960
working before I do anything else so

00:21:58,099 --> 00:22:02,570
what am I gonna do right now so I'm

00:21:59,960 --> 00:22:04,489
gonna run NPM test right there and I

00:22:02,570 --> 00:22:07,190
want to get the feedback you can see it

00:22:04,489 --> 00:22:09,409
opens the browser runs your tests within

00:22:07,190 --> 00:22:11,719
the browser so the JavaScript has a home

00:22:09,409 --> 00:22:13,519
to execute if you're running on the node

00:22:11,719 --> 00:22:15,349
and the server obviously don't need

00:22:13,519 --> 00:22:17,119
karma you can write the code and run it

00:22:15,349 --> 00:22:18,649
on node but in this case I want to know

00:22:17,119 --> 00:22:20,719
it's working properly across the

00:22:18,649 --> 00:22:22,220
browsers I'm using typically I would

00:22:20,719 --> 00:22:24,710
just close that away get it out of my

00:22:22,220 --> 00:22:27,350
site and you can see that it's a success

00:22:24,710 --> 00:22:29,510
right there that tells us that that one

00:22:27,350 --> 00:22:32,210
studied ran you can see that little dot

00:22:29,510 --> 00:22:34,039
in there that executed and it passed but

00:22:32,210 --> 00:22:36,770
of course one of the key things is when

00:22:34,039 --> 00:22:39,559
you do TDD never to take a passing test

00:22:36,770 --> 00:22:40,220
as a glorified signal that everything is

00:22:39,559 --> 00:22:42,140
cool

00:22:40,220 --> 00:22:44,090
I remember this embarrassing moment

00:22:42,140 --> 00:22:45,440
working with a developer we were writing

00:22:44,090 --> 00:22:47,780
tests and writing code writing test

00:22:45,440 --> 00:22:50,539
writing code about the fifth the test I

00:22:47,780 --> 00:22:52,370
was writing it immediately passed as

00:22:50,539 --> 00:22:53,809
soon as they wrote it and I passed and

00:22:52,370 --> 00:22:56,150
looked at my fellow developer and said

00:22:53,809 --> 00:22:58,429
hey I don't know about you but I'm never

00:22:56,150 --> 00:22:59,240
that good do you think this is so

00:22:58,429 --> 00:23:00,770
awesome

00:22:59,240 --> 00:23:04,190
that every test I'm writing is actually

00:23:00,770 --> 00:23:06,650
passing and and my parents ed know I'm

00:23:04,190 --> 00:23:09,080
not that good either so we both really

00:23:06,650 --> 00:23:11,179
broke the code in front of us and the

00:23:09,080 --> 00:23:12,799
test was still passing that was a sign

00:23:11,179 --> 00:23:14,690
that it was not actually running over

00:23:12,799 --> 00:23:17,179
tests so you want to make sure the test

00:23:14,690 --> 00:23:19,340
is actually running before you enjoy the

00:23:17,179 --> 00:23:21,049
feedback loop is working so I'm gonna

00:23:19,340 --> 00:23:23,450
change it to a false right there hit the

00:23:21,049 --> 00:23:25,909
save that's all I did and you can see

00:23:23,450 --> 00:23:28,159
the red color output that tells us the

00:23:25,909 --> 00:23:29,990
test did not work properly and then it's

00:23:28,159 --> 00:23:31,610
of course giving you an error right

00:23:29,990 --> 00:23:33,770
there and then I'm gonna change it back

00:23:31,610 --> 00:23:35,570
to a true and save it and you can see

00:23:33,770 --> 00:23:37,580
that actually passed so that gives you a

00:23:35,570 --> 00:23:39,650
feedback that the the canary test is

00:23:37,580 --> 00:23:41,840
running the tool is set up properly the

00:23:39,650 --> 00:23:44,120
environment is set up properly a real

00:23:41,840 --> 00:23:45,919
quick Dee tool before we go further not

00:23:44,120 --> 00:23:48,110
only I'm a big fan of writing automated

00:23:45,919 --> 00:23:50,299
tests I truly believe in getting

00:23:48,110 --> 00:23:52,400
continuous feedback loop as well so

00:23:50,299 --> 00:23:55,490
right about this time I often tell my

00:23:52,400 --> 00:23:58,640
clients if you have one test passing

00:23:55,490 --> 00:24:01,070
like a canary test for example this is a

00:23:58,640 --> 00:24:04,460
great time to stop writing more tests

00:24:01,070 --> 00:24:06,440
and immediately throw this code into

00:24:04,460 --> 00:24:08,179
continuous integration so set up your

00:24:06,440 --> 00:24:10,460
condition figuration server whatever

00:24:08,179 --> 00:24:13,460
that could be Jenkins or other tools you

00:24:10,460 --> 00:24:15,710
use and typically in my Jenkins I'm not

00:24:13,460 --> 00:24:17,990
a big fan of wasting or spending a lot

00:24:15,710 --> 00:24:20,090
of time and configurations so typically

00:24:17,990 --> 00:24:22,130
my Jenkins would fire off a batch file

00:24:20,090 --> 00:24:25,580
and the batch file will do npm install

00:24:22,130 --> 00:24:27,110
and npm test with the coverage on it so

00:24:25,580 --> 00:24:29,150
this is a time I would normally setup

00:24:27,110 --> 00:24:30,700
the contestant aggression so every

00:24:29,150 --> 00:24:33,049
single line of code I check in

00:24:30,700 --> 00:24:35,330
immediately gives me a feedback that the

00:24:33,049 --> 00:24:38,030
code is actually working not only that

00:24:35,330 --> 00:24:39,140
you know sometimes people ask me when do

00:24:38,030 --> 00:24:40,220
you normally do this

00:24:39,140 --> 00:24:42,290
what if you're working on a small

00:24:40,220 --> 00:24:44,630
project and I'll tell you an example of

00:24:42,290 --> 00:24:47,180
a small project I'm the only developer

00:24:44,630 --> 00:24:49,880
on a project and I wrote this code about

00:24:47,180 --> 00:24:51,890
six or seven years ago but it gave me

00:24:49,880 --> 00:24:53,960
sleepless nights because my code is

00:24:51,890 --> 00:24:55,760
talking to a credit card processing

00:24:53,960 --> 00:24:57,500
server and what if the credit card

00:24:55,760 --> 00:24:59,900
processing server is broke what if they

00:24:57,500 --> 00:25:01,730
change the API on me and they don't tell

00:24:59,900 --> 00:25:02,780
me or I don't take note of it this

00:25:01,730 --> 00:25:05,000
freaks me out

00:25:02,780 --> 00:25:09,860
I'm not kidding what I have on my server

00:25:05,000 --> 00:25:11,780
is that every 15 minutes the process

00:25:09,860 --> 00:25:14,060
wakes of the sea I built wakes up and

00:25:11,780 --> 00:25:17,420
runs through all my tests both my

00:25:14,060 --> 00:25:20,090
integration tests and my automated unit

00:25:17,420 --> 00:25:22,340
tests and and so it hits the credit card

00:25:20,090 --> 00:25:24,410
engine and make sure that the API is

00:25:22,340 --> 00:25:26,180
still working properly and I'm able to

00:25:24,410 --> 00:25:28,670
go through transactions and the failures

00:25:26,180 --> 00:25:30,380
and the success are working properly and

00:25:28,670 --> 00:25:33,080
in the six or seven years it's been

00:25:30,380 --> 00:25:35,900
running in the CI every 15 minutes it

00:25:33,080 --> 00:25:37,700
runs and if it were to fail it would

00:25:35,900 --> 00:25:39,710
send immediately a text to my phone

00:25:37,700 --> 00:25:42,080
saying that something is wrong about

00:25:39,710 --> 00:25:44,450
three or four months ago after being

00:25:42,080 --> 00:25:45,860
quiet for so many years I was in a

00:25:44,450 --> 00:25:48,170
conference in giving a talk and I just

00:25:45,860 --> 00:25:50,210
ping me saying you were your build is

00:25:48,170 --> 00:25:51,800
broken I kind of freaked out and then we

00:25:50,210 --> 00:25:52,610
left my talk I couldn't focus on the

00:25:51,800 --> 00:25:54,650
talk anymore

00:25:52,610 --> 00:25:56,240
because I'm like what happened well then

00:25:54,650 --> 00:25:58,100
after the talk and rush over take a look

00:25:56,240 --> 00:26:00,770
at it and then and realized that there

00:25:58,100 --> 00:26:03,020
actually changed one of the test data on

00:26:00,770 --> 00:26:04,850
their test server and that was causing

00:26:03,020 --> 00:26:06,290
the failure and then matter of hours

00:26:04,850 --> 00:26:08,330
they put it back and everything worked

00:26:06,290 --> 00:26:10,520
this gave me feedback on two things one

00:26:08,330 --> 00:26:11,660
what I said it actually works and then

00:26:10,520 --> 00:26:13,580
of course I can have a more peaceful

00:26:11,660 --> 00:26:15,470
sleep in the night knowing the code

00:26:13,580 --> 00:26:17,300
actually works and I truly believe in

00:26:15,470 --> 00:26:19,070
that kind of feedback loop to know that

00:26:17,300 --> 00:26:20,180
things are actually working well now

00:26:19,070 --> 00:26:22,400
let's take another trivial little

00:26:20,180 --> 00:26:25,010
example to write over here I'm going to

00:26:22,400 --> 00:26:27,170
just take a silly example of dividing a

00:26:25,010 --> 00:26:31,010
number so I'm going to say divide let's

00:26:27,170 --> 00:26:33,410
say a six by two you know should give

00:26:31,010 --> 00:26:36,050
three and and again how do I write a

00:26:33,410 --> 00:26:38,360
test for this I'm gonna say expect in

00:26:36,050 --> 00:26:41,060
this case divided and I'm gonna say six

00:26:38,360 --> 00:26:43,790
over two and then of course I want this

00:26:41,060 --> 00:26:46,040
to be equal to oh let's say a value of

00:26:43,790 --> 00:26:48,290
three that's the response I want from

00:26:46,040 --> 00:26:50,300
this particular request and you can see

00:26:48,290 --> 00:26:51,770
that test actually failed obviously

00:26:50,300 --> 00:26:52,610
because I don't have the divided

00:26:51,770 --> 00:26:54,830
function give

00:26:52,610 --> 00:26:57,380
to me so what am I going to do I'm gonna

00:26:54,830 --> 00:27:00,110
edit the source directory and a sample

00:26:57,380 --> 00:27:02,420
dot J s and in this case of course I'm

00:27:00,110 --> 00:27:04,130
gonna say function let's call it Divide

00:27:02,420 --> 00:27:06,530
and let's go ahead and say this is

00:27:04,130 --> 00:27:08,330
operand 1 operand 2 and all I'm going to

00:27:06,530 --> 00:27:10,280
do is simply return the value of 3 to

00:27:08,330 --> 00:27:12,590
make the test to pass and you can see

00:27:10,280 --> 00:27:13,940
that actually worked a tenant of TDD you

00:27:12,590 --> 00:27:16,250
liked your way through before writing

00:27:13,940 --> 00:27:18,020
any useful code then the next thing I'm

00:27:16,250 --> 00:27:20,900
gonna do is to say divide

00:27:18,020 --> 00:27:22,970
oh let's say in this case 8 with a 4

00:27:20,900 --> 00:27:24,919
well in this case of course you want the

00:27:22,970 --> 00:27:27,590
result to be a 2 and I can make sure

00:27:24,919 --> 00:27:30,110
that part is working as well just to see

00:27:27,590 --> 00:27:31,730
if that code is being exercised a couple

00:27:30,110 --> 00:27:33,320
of different times and then of course

00:27:31,730 --> 00:27:35,480
when I execute the code you can see the

00:27:33,320 --> 00:27:38,210
test is failing going back to the code I

00:27:35,480 --> 00:27:39,559
can say this is OP 1 over op 2 and of

00:27:38,210 --> 00:27:42,110
course the test should bounce back to

00:27:39,559 --> 00:27:43,910
passing it did one other thing I want to

00:27:42,110 --> 00:27:47,059
quickly mention before we go any further

00:27:43,910 --> 00:27:48,559
so there are four types of tests that I

00:27:47,059 --> 00:27:51,049
typically like to write when I do

00:27:48,559 --> 00:27:54,140
automated testing the first type of test

00:27:51,049 --> 00:27:56,480
is called a positive test a positive

00:27:54,140 --> 00:27:58,580
test simply tells me the code did what

00:27:56,480 --> 00:28:00,500
it's supposed to do and a positive test

00:27:58,580 --> 00:28:03,140
is a quick feedback that the code is

00:28:00,500 --> 00:28:03,770
working as intended as change happens in

00:28:03,140 --> 00:28:05,780
the future

00:28:03,770 --> 00:28:08,870
well the second type of tests are called

00:28:05,780 --> 00:28:10,429
negative tests this is to verify the

00:28:08,870 --> 00:28:12,799
code is dealing with the invariants

00:28:10,429 --> 00:28:15,650
properly as an example I once had a

00:28:12,799 --> 00:28:17,660
market with the bank and I refinance the

00:28:15,650 --> 00:28:19,820
mortgage so it was moved to another Bank

00:28:17,660 --> 00:28:21,860
and two months later we figured out

00:28:19,820 --> 00:28:24,260
money was missing from my account and

00:28:21,860 --> 00:28:26,390
then eventually we traced it back to the

00:28:24,260 --> 00:28:29,179
bank was putting money into a closed

00:28:26,390 --> 00:28:31,070
mortgage account well clearly somebody

00:28:29,179 --> 00:28:32,690
did not write a test for the invariant

00:28:31,070 --> 00:28:34,700
that he cannot put money into a closed

00:28:32,690 --> 00:28:37,010
account so that's an example of how you

00:28:34,700 --> 00:28:39,559
can see these things happen in banks and

00:28:37,010 --> 00:28:41,059
Airlines and other places where things

00:28:39,559 --> 00:28:42,830
are broken in fact I'm dealing with one

00:28:41,059 --> 00:28:44,450
problem this morning with the airline

00:28:42,830 --> 00:28:46,340
because something is broken in my

00:28:44,450 --> 00:28:48,200
account because of two transactions I

00:28:46,340 --> 00:28:50,330
did last night and of course you know

00:28:48,200 --> 00:28:52,370
clearly somebody did not do the testing

00:28:50,330 --> 00:28:54,230
properly that costing a lot of time and

00:28:52,370 --> 00:28:56,600
money as well for everybody involved

00:28:54,230 --> 00:28:58,790
customers versus the developers of the

00:28:56,600 --> 00:29:01,400
organization as well the third thing I

00:28:58,790 --> 00:29:04,220
really like to see is called exception

00:29:01,400 --> 00:29:06,090
test exception tests are to really tell

00:29:04,220 --> 00:29:08,520
us that the code is through

00:29:06,090 --> 00:29:10,440
the quite kinds of exceptions that it's

00:29:08,520 --> 00:29:12,690
supposed to throw and you want to make

00:29:10,440 --> 00:29:13,950
sure that as code is evolved it is

00:29:12,690 --> 00:29:15,419
throwing the right kinds of exceptions

00:29:13,950 --> 00:29:18,659
and the last thing I want to emphasize

00:29:15,419 --> 00:29:21,870
is called a performance test and I often

00:29:18,659 --> 00:29:24,630
tell if performance is really important

00:29:21,870 --> 00:29:26,340
don't talk about it write a test for it

00:29:24,630 --> 00:29:28,590
and the reason I emphasize writing a

00:29:26,340 --> 00:29:31,380
test for performance is you want to make

00:29:28,590 --> 00:29:33,539
sure that as the code evolves your code

00:29:31,380 --> 00:29:35,490
does not you know go into a situation

00:29:33,539 --> 00:29:37,020
where it's no longer meeting the

00:29:35,490 --> 00:29:39,330
performance that regression has happened

00:29:37,020 --> 00:29:41,159
a case in point a client of mine said

00:29:39,330 --> 00:29:43,020
performance is extremely important and

00:29:41,159 --> 00:29:44,970
they did a lot of work to improve

00:29:43,020 --> 00:29:47,399
performance but forgot to write a test

00:29:44,970 --> 00:29:49,289
for it about a year later they were

00:29:47,399 --> 00:29:50,880
dealing with the same problem again and

00:29:49,289 --> 00:29:53,760
they found out this problem was

00:29:50,880 --> 00:29:56,580
regression nearly seven months earlier

00:29:53,760 --> 00:29:58,080
and you had all this time to fix it but

00:29:56,580 --> 00:30:00,120
there was no feedback loop to tell you

00:29:58,080 --> 00:30:02,309
that there was a problem so I always say

00:30:00,120 --> 00:30:04,350
if performance is really important write

00:30:02,309 --> 00:30:06,270
a performance test and then into the

00:30:04,350 --> 00:30:07,620
performance and then I have a feedback

00:30:06,270 --> 00:30:09,510
that it's actually working moving

00:30:07,620 --> 00:30:11,549
forward well here of course I want to

00:30:09,510 --> 00:30:15,960
write an exception test so I'm gonna say

00:30:11,549 --> 00:30:18,750
divide divide a by zero let's say a

00:30:15,960 --> 00:30:21,299
throws exception so what do I want to

00:30:18,750 --> 00:30:23,309
say here I want to say expect in this

00:30:21,299 --> 00:30:26,429
case and I'm just gonna copy this code

00:30:23,309 --> 00:30:28,230
for a second over here so xpect but what

00:30:26,429 --> 00:30:30,510
do I want to expect from this code I

00:30:28,230 --> 00:30:33,210
want to divide let's say eight with the

00:30:30,510 --> 00:30:35,460
zero but if I divide this what do I want

00:30:33,210 --> 00:30:37,830
this code to do well I want this to blow

00:30:35,460 --> 00:30:39,779
up on my face and tell me there's an

00:30:37,830 --> 00:30:42,600
exception but there is a problem though

00:30:39,779 --> 00:30:44,909
if you notice over in this code you know

00:30:42,600 --> 00:30:47,429
as a programmer using JavaScript that

00:30:44,909 --> 00:30:50,190
this divide will be called first and the

00:30:47,429 --> 00:30:52,409
result of divide is sent to expect well

00:30:50,190 --> 00:30:55,049
that's too late because of divide blows

00:30:52,409 --> 00:30:56,970
up there's no expect to be called so

00:30:55,049 --> 00:30:59,610
what do we do well use a level of

00:30:56,970 --> 00:31:03,390
indirection and say don't call divided

00:30:59,610 --> 00:31:06,750
now call divided after you call expect

00:31:03,390 --> 00:31:09,750
so expect us call first and expect we'll

00:31:06,750 --> 00:31:12,029
call divided now not you directly so you

00:31:09,750 --> 00:31:14,610
are putting a little arrow function to

00:31:12,029 --> 00:31:17,850
say don't call divided right now in this

00:31:14,610 --> 00:31:19,740
test first call expect and within the

00:31:17,850 --> 00:31:22,800
expect call the divide well

00:31:19,740 --> 00:31:25,050
do at the point and you can say to throw

00:31:22,800 --> 00:31:27,960
and I want to error that it's throwing

00:31:25,050 --> 00:31:29,970
at that point so this tells us that when

00:31:27,960 --> 00:31:31,860
you call divide it better throw an

00:31:29,970 --> 00:31:33,960
exception and that's a way for you to

00:31:31,860 --> 00:31:36,000
write an exception test clearly in this

00:31:33,960 --> 00:31:37,710
case when you run this little code it's

00:31:36,000 --> 00:31:39,750
going to tell you whether it is throwing

00:31:37,710 --> 00:31:41,580
the exception as you expect or it

00:31:39,750 --> 00:31:43,980
doesn't and it's going to blow up the

00:31:41,580 --> 00:31:46,679
test itself so the failure of the test

00:31:43,980 --> 00:31:49,260
is the failure of the code to throw the

00:31:46,679 --> 00:31:52,530
exception and the success of the test is

00:31:49,260 --> 00:31:54,210
the exception in the code itself clearly

00:31:52,530 --> 00:31:56,220
you can see the tests actually failed

00:31:54,210 --> 00:31:58,260
and the reason is because the code is

00:31:56,220 --> 00:32:00,210
returning an infinity rather than

00:31:58,260 --> 00:32:01,650
throwing an exception well clearly you

00:32:00,210 --> 00:32:03,990
can find different ways to solve this

00:32:01,650 --> 00:32:07,110
problem but for now I'm gonna simply say

00:32:03,990 --> 00:32:10,200
is equal to and I'm gonna say zero then

00:32:07,110 --> 00:32:13,440
I'll simply say throw new error and then

00:32:10,200 --> 00:32:15,030
will simply say divide let's say by zero

00:32:13,440 --> 00:32:17,070
and I can blow up at that particular

00:32:15,030 --> 00:32:19,650
point to say that's what the exception

00:32:17,070 --> 00:32:22,050
is and the test is passing now while we

00:32:19,650 --> 00:32:24,090
are at it one of the things I often say

00:32:22,050 --> 00:32:26,160
is while we can get this kind of

00:32:24,090 --> 00:32:28,650
feedback I'm also a big fan of keeping

00:32:26,160 --> 00:32:30,420
an eye on code coverage now a lot of

00:32:28,650 --> 00:32:32,730
people don't like code coverage but I

00:32:30,420 --> 00:32:35,010
love it the reason is every time

00:32:32,730 --> 00:32:37,710
somebody points me to code coverage we

00:32:35,010 --> 00:32:39,690
focus on the design concern rather than

00:32:37,710 --> 00:32:41,640
the coverage at that point so this has

00:32:39,690 --> 00:32:42,840
been a rewarding experience for me so

00:32:41,640 --> 00:32:44,640
when a programmer comes to me and says

00:32:42,840 --> 00:32:45,360
hey this code has a poor coverage what

00:32:44,640 --> 00:32:47,190
do I do

00:32:45,360 --> 00:32:49,260
we're not talking about coverage anymore

00:32:47,190 --> 00:32:51,030
we discover a design problem in that

00:32:49,260 --> 00:32:53,190
code and we fix it and the coverage

00:32:51,030 --> 00:32:55,080
automatically becomes better but just to

00:32:53,190 --> 00:32:57,540
illustrate the point suppose I'm

00:32:55,080 --> 00:33:00,300
sneaking around and putting up one is

00:32:57,540 --> 00:33:02,250
equal to thousand i'm gonna simply go

00:33:00,300 --> 00:33:02,910
ahead and put a little code here let's

00:33:02,250 --> 00:33:05,910
say oops

00:33:02,910 --> 00:33:07,590
so if i sneak in coding we all do you

00:33:05,910 --> 00:33:10,350
can see the code you know passed the

00:33:07,590 --> 00:33:12,059
test but i'm very curious what do i know

00:33:10,350 --> 00:33:13,800
about it well i'm gonna go ahead and

00:33:12,059 --> 00:33:16,080
quickly you know look at something here

00:33:13,800 --> 00:33:19,020
let's go ahead and edit the karmic on

00:33:16,080 --> 00:33:21,929
star JS file really quickly let's go to

00:33:19,020 --> 00:33:24,630
the preprocessor over here and in the

00:33:21,929 --> 00:33:27,929
preprocessor section what I want to do

00:33:24,630 --> 00:33:30,390
here is to say look in the source

00:33:27,929 --> 00:33:33,040
directory the subdirectories and all the

00:33:30,390 --> 00:33:35,350
JavaScript files and then it

00:33:33,040 --> 00:33:37,120
do a coverage on that and then I'm going

00:33:35,350 --> 00:33:39,310
to go to the reporters that you see

00:33:37,120 --> 00:33:41,830
below and I'm gonna ask for a coverage

00:33:39,310 --> 00:33:44,320
on that as well so I just introduced a

00:33:41,830 --> 00:33:46,060
coverage for all the files in the source

00:33:44,320 --> 00:33:48,430
directory and then I asked for a

00:33:46,060 --> 00:33:50,590
coverage reporter as well to be brought

00:33:48,430 --> 00:33:53,590
in at this point in the car Matt can't

00:33:50,590 --> 00:33:55,720
dodge a J's file I gotta do two more

00:33:53,590 --> 00:33:58,000
changes before we go further I'm gonna

00:33:55,720 --> 00:34:01,150
do NPM install and there's gonna be

00:33:58,000 --> 00:34:03,640
karma akarma coverage and and I'm gonna

00:34:01,150 --> 00:34:06,310
then ask you to save dev as well on that

00:34:03,640 --> 00:34:09,220
one while that's doing it let's go back

00:34:06,310 --> 00:34:10,750
to our package JSON file and in the

00:34:09,220 --> 00:34:13,240
package JSON file

00:34:10,750 --> 00:34:16,090
I'm gonna do one more thing which is to

00:34:13,240 --> 00:34:17,470
bring in the coverage as well so we can

00:34:16,090 --> 00:34:19,990
actually look at the coverage report

00:34:17,470 --> 00:34:22,510
when this is running so so let's go

00:34:19,990 --> 00:34:24,700
ahead and karma coverage it helps to

00:34:22,510 --> 00:34:26,980
really spell it properly so let's go

00:34:24,700 --> 00:34:29,140
ahead and try that coverage so go ahead

00:34:26,980 --> 00:34:31,210
and install that and then of course when

00:34:29,140 --> 00:34:33,400
it's done we will simply run the

00:34:31,210 --> 00:34:34,960
coverage and see how it works how do I

00:34:33,400 --> 00:34:38,500
run the coverage oh nothing really

00:34:34,960 --> 00:34:40,030
different the NPM test or if you don't

00:34:38,500 --> 00:34:42,910
want to do that because I want to run in

00:34:40,030 --> 00:34:44,980
a manual mode versus automated mode and

00:34:42,910 --> 00:34:47,050
I want really coverage to be done on my

00:34:44,980 --> 00:34:49,330
automation server without running it

00:34:47,050 --> 00:34:51,610
repeatedly so typically I would set up a

00:34:49,330 --> 00:34:53,650
test for running locally and a coverage

00:34:51,610 --> 00:34:55,120
for running on the CI machine and on the

00:34:53,650 --> 00:34:57,070
CI machine I would run the coverage

00:34:55,120 --> 00:34:58,120
rather than running the test locally I

00:34:57,070 --> 00:35:00,070
would run the test rather than running

00:34:58,120 --> 00:35:02,110
coverage or back and forth we can do

00:35:00,070 --> 00:35:04,180
that so so let's go back and run that

00:35:02,110 --> 00:35:05,950
test and see what it tells us it fires

00:35:04,180 --> 00:35:08,290
up the browser again and then of course

00:35:05,950 --> 00:35:10,540
it's a success while it's showing that

00:35:08,290 --> 00:35:12,640
look at the coverage directory right now

00:35:10,540 --> 00:35:15,190
based on the browser that you are using

00:35:12,640 --> 00:35:17,380
it gives us the index dot HTML file

00:35:15,190 --> 00:35:20,170
let's go ahead and open that file really

00:35:17,380 --> 00:35:21,880
quickly here to see what it tells us and

00:35:20,170 --> 00:35:22,480
then you can see that in this particular

00:35:21,880 --> 00:35:24,820
file

00:35:22,480 --> 00:35:27,400
it contains the coverage report for that

00:35:24,820 --> 00:35:29,620
little file B Road and of course busted

00:35:27,400 --> 00:35:31,780
that little code I wrote with no test at

00:35:29,620 --> 00:35:33,220
all shows up in red so this can be

00:35:31,780 --> 00:35:35,800
really a nice way to get the feedback

00:35:33,220 --> 00:35:37,960
loop that the code is being tested and

00:35:35,800 --> 00:35:40,450
we can know that the developers are

00:35:37,960 --> 00:35:43,300
doing automated testing in that regard I

00:35:40,450 --> 00:35:46,370
use a very simple rule for my developers

00:35:43,300 --> 00:35:49,370
I tell them you got three choices to

00:35:46,370 --> 00:35:51,950
really get good a unit testing one do it

00:35:49,370 --> 00:35:54,320
right so just go ahead and do it and and

00:35:51,950 --> 00:35:57,350
don't give excuses do it well if you

00:35:54,320 --> 00:35:59,750
cannot do it step number two ask for

00:35:57,350 --> 00:36:01,250
help and and come by and say hey you

00:35:59,750 --> 00:36:03,650
know what I'm writing this test my

00:36:01,250 --> 00:36:06,020
coverage is really poor help me if you

00:36:03,650 --> 00:36:06,950
don't do step one and two there's a

00:36:06,020 --> 00:36:10,580
third option

00:36:06,950 --> 00:36:13,190
be yelled at so this is basically a very

00:36:10,580 --> 00:36:15,290
simple rule I follow if you don't do it

00:36:13,190 --> 00:36:17,210
ask for help if you don't do it and

00:36:15,290 --> 00:36:19,970
don't ask for help be read to be yelled

00:36:17,210 --> 00:36:21,980
at and so essentially you want really

00:36:19,970 --> 00:36:24,380
people to work on solving problems

00:36:21,980 --> 00:36:26,570
together not hide away and give excuses

00:36:24,380 --> 00:36:28,100
and you know I may not be the smartest

00:36:26,570 --> 00:36:30,080
person in the team I don't know how to

00:36:28,100 --> 00:36:32,090
do it maybe you don't know how to do it

00:36:30,080 --> 00:36:34,130
but we both can collectively figure out

00:36:32,090 --> 00:36:36,410
or find a third person to help us and

00:36:34,130 --> 00:36:37,910
that's extremely important the last

00:36:36,410 --> 00:36:40,190
thing I want to mention really quickly

00:36:37,910 --> 00:36:42,110
here is we saw how to write tests and

00:36:40,190 --> 00:36:44,690
how to get feedback loops we saw how to

00:36:42,110 --> 00:36:46,730
do all of this so we covered up to this

00:36:44,690 --> 00:36:48,260
point already but there's one thing we

00:36:46,730 --> 00:36:51,410
have to still deal with in our lives

00:36:48,260 --> 00:36:54,650
which is dependencies and dependencies

00:36:51,410 --> 00:36:57,080
often are really gnarly one of the

00:36:54,650 --> 00:37:00,350
biggest problems generally in automated

00:36:57,080 --> 00:37:01,970
testing is testing is very easy when the

00:37:00,350 --> 00:37:04,220
code you're testing is very predictable

00:37:01,970 --> 00:37:07,460
in other words if a code is idempotent

00:37:04,220 --> 00:37:09,620
it's easy to write tests on it when was

00:37:07,460 --> 00:37:12,710
the last time a dependency was

00:37:09,620 --> 00:37:14,420
idempotent almost never dependencies

00:37:12,710 --> 00:37:16,850
give us different responses every time

00:37:14,420 --> 00:37:19,460
we call it so when a dependency is not

00:37:16,850 --> 00:37:21,530
idempotent testing the code that works

00:37:19,460 --> 00:37:24,920
with the dependency becomes incredibly

00:37:21,530 --> 00:37:27,380
difficult so what do we do all this idea

00:37:24,920 --> 00:37:30,020
about mocking and stubbing you simply

00:37:27,380 --> 00:37:33,380
take unpredictable dependency and

00:37:30,020 --> 00:37:35,630
replace it with an idempotent mark so we

00:37:33,380 --> 00:37:37,850
can really get a fast feedback loop on

00:37:35,630 --> 00:37:39,890
the code we are writing so how do we

00:37:37,850 --> 00:37:41,390
write it automated test for that well

00:37:39,890 --> 00:37:43,370
the short answer is one of the best

00:37:41,390 --> 00:37:46,010
tools I've ever seen in the market and

00:37:43,370 --> 00:37:48,680
that is called sinan and sinnin is just

00:37:46,010 --> 00:37:50,960
amazing in my opinion cenang is

00:37:48,680 --> 00:37:52,730
wonderful in terms of how it can give us

00:37:50,960 --> 00:37:54,350
a really good fast feedback loop I want

00:37:52,730 --> 00:37:55,070
to quickly show you an example of using

00:37:54,350 --> 00:37:56,720
sign on

00:37:55,070 --> 00:37:58,340
I've already installed sign on right

00:37:56,720 --> 00:37:59,859
here as you can see it's in my

00:37:58,340 --> 00:38:01,599
dependency so what

00:37:59,859 --> 00:38:04,690
going to do the first thing I'm gonna do

00:38:01,599 --> 00:38:07,450
is to create a source whether dart je s

00:38:04,690 --> 00:38:10,749
so my record rjs contains a function

00:38:07,450 --> 00:38:12,549
called temperature and given a city it

00:38:10,749 --> 00:38:14,470
is going to return the temperature for

00:38:12,549 --> 00:38:18,910
that city so I'm going to say throw new

00:38:14,470 --> 00:38:21,099
error not implemented yet obviously I

00:38:18,910 --> 00:38:22,660
don't want to implement that now because

00:38:21,099 --> 00:38:24,039
implementing that now it's not going to

00:38:22,660 --> 00:38:25,720
help because the temperature is

00:38:24,039 --> 00:38:27,910
different every time you query for it

00:38:25,720 --> 00:38:30,220
but I want to know what to do based on

00:38:27,910 --> 00:38:31,779
the temperature in a city I want work

00:38:30,220 --> 00:38:33,700
with the temperature what am I going to

00:38:31,779 --> 00:38:35,920
do so to answer that question the first

00:38:33,700 --> 00:38:39,519
thing I'm going to do here is to go to

00:38:35,920 --> 00:38:42,099
my test in my test I'm gonna say sandbox

00:38:39,519 --> 00:38:45,009
is equal is a variable and I'm gonna

00:38:42,099 --> 00:38:48,509
create a before each and in the before

00:38:45,009 --> 00:38:51,369
each function I'm gonna create a little

00:38:48,509 --> 00:38:53,920
sandbox in this case so function what do

00:38:51,369 --> 00:38:57,759
I want to do here sandbox is equal to

00:38:53,920 --> 00:39:00,099
sin on dart create sandbox so I'm asking

00:38:57,759 --> 00:39:02,680
it to create a sandbox you never want to

00:39:00,099 --> 00:39:05,529
talk to sin on directly because it's an

00:39:02,680 --> 00:39:07,720
extremely powerful tool if you're Delson

00:39:05,529 --> 00:39:09,640
on hey you see that function over there

00:39:07,720 --> 00:39:11,950
and so none will say no worries I

00:39:09,640 --> 00:39:14,170
destroyed it create a mock for you and

00:39:11,950 --> 00:39:15,400
then you're like Kingston on now that

00:39:14,170 --> 00:39:17,680
you're done with it I'm done with the

00:39:15,400 --> 00:39:19,779
test put it back together it says what

00:39:17,680 --> 00:39:21,849
do you mean so it doesn't know to put

00:39:19,779 --> 00:39:24,249
things back together so never usin on

00:39:21,849 --> 00:39:27,279
directly put it in a sandbox so what can

00:39:24,249 --> 00:39:29,440
you do in the after each function you

00:39:27,279 --> 00:39:32,079
can simply now say here's the function

00:39:29,440 --> 00:39:34,089
and I can say in this case sandbox to

00:39:32,079 --> 00:39:35,710
restore and there's gonna blow air your

00:39:34,089 --> 00:39:37,809
changes and restore for the next test

00:39:35,710 --> 00:39:40,450
you want that test to be isolated and

00:39:37,809 --> 00:39:42,519
independent of each other so now that we

00:39:40,450 --> 00:39:44,799
created a sonon what are we going to do

00:39:42,519 --> 00:39:46,569
next over here well the next thing of

00:39:44,799 --> 00:39:48,789
course is oh it's giving us an error

00:39:46,569 --> 00:39:51,720
let's take a look at what it is so after

00:39:48,789 --> 00:39:53,859
each is giving us a little problem here

00:39:51,720 --> 00:39:55,869
sandbox let's make sure that we got this

00:39:53,859 --> 00:39:57,460
correct here so I've got a sandbox setup

00:39:55,869 --> 00:39:59,349
right here at the sandbox and I'm gonna

00:39:57,460 --> 00:40:02,559
restore the sandbox and this is going to

00:39:59,349 --> 00:40:03,970
be create a sandbox so let's make sure

00:40:02,559 --> 00:40:06,400
that I got this right let's take a look

00:40:03,970 --> 00:40:08,730
at the error itself what does it say it

00:40:06,400 --> 00:40:12,549
says that it cannot read property

00:40:08,730 --> 00:40:13,990
restore of undefined well did I make a

00:40:12,549 --> 00:40:16,690
mistake anybody sees the missed

00:40:13,990 --> 00:40:18,670
so before each is being run here in the

00:40:16,690 --> 00:40:20,560
test and this is going to tell us that

00:40:18,670 --> 00:40:22,240
sandbox is going to be soon on dart

00:40:20,560 --> 00:40:24,520
create sandbox so that should have

00:40:22,240 --> 00:40:25,870
created the variable up here and then

00:40:24,520 --> 00:40:26,320
I'm asking you to destroy it right here

00:40:25,870 --> 00:40:28,060
anyway

00:40:26,320 --> 00:40:29,980
I'll come back to that a little later so

00:40:28,060 --> 00:40:32,440
what do I want to do next now that we

00:40:29,980 --> 00:40:34,030
have a sandbox being created my next

00:40:32,440 --> 00:40:37,270
step of course is to add there's an

00:40:34,030 --> 00:40:38,890
error in the before each as well so

00:40:37,270 --> 00:40:41,860
let's see what that's complaining about

00:40:38,890 --> 00:40:42,490
maybe it's oh yes haha okay let's do

00:40:41,860 --> 00:40:46,300
something else

00:40:42,490 --> 00:40:49,510
edit a karmic config yes good so what do

00:40:46,300 --> 00:40:52,060
I do here I want to bring in a sin onto

00:40:49,510 --> 00:40:53,920
the party right so we didn't invite sin

00:40:52,060 --> 00:40:55,270
on so it was very unhappy with us so

00:40:53,920 --> 00:40:57,190
right there we brought in sin on as a

00:40:55,270 --> 00:40:59,410
plugin let's go ahead and fire this up

00:40:57,190 --> 00:41:02,020
again this time but I'll bring in the

00:40:59,410 --> 00:41:03,940
after each again let's run that and see

00:41:02,020 --> 00:41:06,190
that it's actually firing up the browser

00:41:03,940 --> 00:41:08,020
again running the test it's happy great

00:41:06,190 --> 00:41:10,780
now what's the next thing I want to do I

00:41:08,020 --> 00:41:14,740
want to give a recommendation on you

00:41:10,780 --> 00:41:18,790
know what you know where let's say where

00:41:14,740 --> 00:41:21,490
t-shirt let's say for in a warm weather

00:41:18,790 --> 00:41:23,620
so for a warm weather I want to wear a

00:41:21,490 --> 00:41:26,470
t-shirt how do I do this so I'm gonna

00:41:23,620 --> 00:41:29,980
say expect and I'm gonna say wear and

00:41:26,470 --> 00:41:32,940
then for a visit to Tampa let's say next

00:41:29,980 --> 00:41:36,370
week and what do I wear for that to be

00:41:32,940 --> 00:41:38,650
equal to I want to wear a t-shirt now

00:41:36,370 --> 00:41:40,600
the question is how do I know what I

00:41:38,650 --> 00:41:42,040
should wear to Tampa next week oh the

00:41:40,600 --> 00:41:43,540
weather is gonna be really warm over

00:41:42,040 --> 00:41:45,880
there you should you should take our

00:41:43,540 --> 00:41:47,980
t-shirt but but how do I know well the

00:41:45,880 --> 00:41:51,460
answer to that is I'm gonna go here to a

00:41:47,980 --> 00:41:53,650
function called wear and I'm gonna say a

00:41:51,460 --> 00:41:55,270
city over here but what am I going to do

00:41:53,650 --> 00:41:57,850
within this code I'm gonna find the

00:41:55,270 --> 00:42:00,160
temperature in Tampa and decide what to

00:41:57,850 --> 00:42:01,600
wear based on it oh dear I can't tell

00:42:00,160 --> 00:42:03,700
what this code is gonna do because the

00:42:01,600 --> 00:42:05,620
weather keeps fluctuating I can't make a

00:42:03,700 --> 00:42:07,570
recommendation all the time so what am I

00:42:05,620 --> 00:42:10,630
going to do I'm gonna go to the sandbox

00:42:07,570 --> 00:42:13,330
and say sandbox stub on the window

00:42:10,630 --> 00:42:15,940
object go ahead and stop the temperature

00:42:13,330 --> 00:42:18,040
objects or temperature and and what am I

00:42:15,940 --> 00:42:20,800
expecting when it's called the width

00:42:18,040 --> 00:42:23,680
arguments so wit args and what's the

00:42:20,800 --> 00:42:26,050
argument I'm expecting a Tampa obviously

00:42:23,680 --> 00:42:27,250
then what should I do it should return

00:42:26,050 --> 00:42:30,340
to you

00:42:27,250 --> 00:42:32,109
a value of let's say 80 degrees so

00:42:30,340 --> 00:42:34,570
that's a beautiful temperature in Tampa

00:42:32,109 --> 00:42:36,550
and it returns 80 degrees now of course

00:42:34,570 --> 00:42:38,710
when I you know save this code the test

00:42:36,550 --> 00:42:41,830
is failing but if I go back over here

00:42:38,710 --> 00:42:44,310
and say if let's say for a constant

00:42:41,830 --> 00:42:47,020
temperature let's say temp is equal to

00:42:44,310 --> 00:42:48,490
temperature of the city and then I'm

00:42:47,020 --> 00:42:52,720
going to say if the temperature is

00:42:48,490 --> 00:42:55,599
greater than oh let's say 75 then return

00:42:52,720 --> 00:42:57,970
a t-shirt as the one that I want to wear

00:42:55,599 --> 00:42:59,950
so I can go ahead and save that and see

00:42:57,970 --> 00:43:02,290
what it wants to return at this point so

00:42:59,950 --> 00:43:04,420
constant temperature equal to a temp

00:43:02,290 --> 00:43:06,280
temp is equal to temperature and then of

00:43:04,420 --> 00:43:07,750
course that can come from the city I'm

00:43:06,280 --> 00:43:09,730
gonna just restart this really quickly

00:43:07,750 --> 00:43:12,040
and then of course at this point I'm

00:43:09,730 --> 00:43:13,930
gonna say when that is executed if the

00:43:12,040 --> 00:43:16,990
temperature that you are getting is

00:43:13,930 --> 00:43:19,180
greater than 75 then return our t-shirt

00:43:16,990 --> 00:43:21,280
as a response back to me and then over

00:43:19,180 --> 00:43:22,780
here I can say expect you know wear

00:43:21,280 --> 00:43:25,810
which is the function that I'm gonna

00:43:22,780 --> 00:43:28,180
write over here past the city Tampa over

00:43:25,810 --> 00:43:30,670
here and then of course it better be

00:43:28,180 --> 00:43:32,290
equal to a t-shirt as a returned value

00:43:30,670 --> 00:43:34,630
let's take a look at what the error

00:43:32,290 --> 00:43:36,940
message says over here it says returns

00:43:34,630 --> 00:43:38,740
is not defined aha so this is going to

00:43:36,940 --> 00:43:40,390
be a dot that's missing so let's go

00:43:38,740 --> 00:43:42,220
ahead and put the dart in there and you

00:43:40,390 --> 00:43:43,660
can see the test is passing so you can

00:43:42,220 --> 00:43:46,960
see how or just to illustrate the point

00:43:43,660 --> 00:43:49,089
if I remove this stub right here you can

00:43:46,960 --> 00:43:52,330
see the test is failing with the not

00:43:49,089 --> 00:43:54,490
implemented yet exception obviously the

00:43:52,330 --> 00:43:56,380
function is not implemented but this is

00:43:54,490 --> 00:43:58,690
hijacking that particular function and

00:43:56,380 --> 00:44:01,089
reworking it and just to illustrate the

00:43:58,690 --> 00:44:04,089
point with one more test you know where

00:44:01,089 --> 00:44:08,710
maybe a sweater you know let's say

00:44:04,089 --> 00:44:10,599
sweater and let's say for a cooler

00:44:08,710 --> 00:44:12,460
weather and what can I say

00:44:10,599 --> 00:44:15,040
let's go and change the city over here

00:44:12,460 --> 00:44:17,109
and we'll say you know give a different

00:44:15,040 --> 00:44:19,390
name let's say this is going to be a 50

00:44:17,109 --> 00:44:21,220
degrees okay we better really wear a

00:44:19,390 --> 00:44:24,099
sweater so I can go ahead and say this

00:44:21,220 --> 00:44:26,140
is going to be a sweater weather so that

00:44:24,099 --> 00:44:28,450
test is failing as you can see I can

00:44:26,140 --> 00:44:31,599
come in here and say if the temperature

00:44:28,450 --> 00:44:35,470
is greater than or equal to 50 maybe I

00:44:31,599 --> 00:44:37,359
can say return a sweater which is what I

00:44:35,470 --> 00:44:40,690
want to return from here and that gives

00:44:37,359 --> 00:44:44,319
you an idea so I used to non-primitive

00:44:40,690 --> 00:44:46,060
where my dependencies on my servers so I

00:44:44,319 --> 00:44:48,310
don't have to have my server running I

00:44:46,060 --> 00:44:50,319
can get my full feedback on my client

00:44:48,310 --> 00:44:52,260
side without even bringing to the server

00:44:50,319 --> 00:44:54,490
and without having to run the HTML

00:44:52,260 --> 00:44:56,410
through that so I get a fairly good

00:44:54,490 --> 00:44:57,700
feedback loop along with this so

00:44:56,410 --> 00:44:59,079
hopefully that gives you an idea about

00:44:57,700 --> 00:45:00,940
what we can do with these kinds of

00:44:59,079 --> 00:45:03,520
automated testing if you're interested

00:45:00,940 --> 00:45:05,260
further check out my website there's a

00:45:03,520 --> 00:45:07,510
downloads link if you don't find stuff

00:45:05,260 --> 00:45:09,430
you're looking for drop me an email I'll

00:45:07,510 --> 00:45:12,540
be more than happy to hear from you hope

00:45:09,430 --> 00:45:12,540
that was useful thank you

00:45:15,330 --> 00:45:24,340

YouTube URL: https://www.youtube.com/watch?v=JqSoatUePdU


