Title: Sasha Rosenbaum - CI CD for Machine Learning
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	As we venture into new fields, we sometimes forget to apply the lessons learned in the past. As machine learning (ML) becomes more accessible to developers without a data science degree, and ML models multiply, we begin to see a glaring deficiency.

Many of the ML frameworks support easily building and tweaking ML models, but do not offer source control. To make matters worse, ML models often require prolonged trial and error, and even small changes in parameters can produce large changes in model accuracy. As developers test new models, it becomes difficult to roll back to previous versions, create a reliable CI/CD pipeline into the production environment and monitor the application after it is deployed.

In this talk, I will discuss the potential ways you could begin with the end in mind and build a reliable process for del
Captions: 
	00:00:00,070 --> 00:00:07,309
[Music]

00:00:11,389 --> 00:00:20,150
okay so this is a video of an ml

00:00:16,740 --> 00:00:22,710
simulation learning to walk and also

00:00:20,150 --> 00:00:27,840
sort of a metaphor for me trying to

00:00:22,710 --> 00:00:29,849
deploy ml to production but um so I'm

00:00:27,840 --> 00:00:32,610
going to introduce myself this is a talk

00:00:29,849 --> 00:00:35,420
on CI CD for machine learning which we

00:00:32,610 --> 00:00:37,890
also call ml ops if you like that um

00:00:35,420 --> 00:00:41,760
name you can stick with it if you don't

00:00:37,890 --> 00:00:44,400
you don't have to I am Sasha Rosenbaum I

00:00:41,760 --> 00:00:48,180
worked for Microsoft I'm a program

00:00:44,400 --> 00:00:49,740
manager on the azure DevOps team I used

00:00:48,180 --> 00:00:53,040
to be a developer for about eight years

00:00:49,740 --> 00:00:55,920
and then I started to point things into

00:00:53,040 --> 00:00:58,890
production and I liked it so much that I

00:00:55,920 --> 00:01:01,739
switched to that um now that I

00:00:58,890 --> 00:01:05,659
introduced myself tell me a little bit

00:01:01,739 --> 00:01:07,530
about you so who here is a developer

00:01:05,659 --> 00:01:11,610
okay most of you

00:01:07,530 --> 00:01:14,790
cool um anybody ops DevOps SRU something

00:01:11,610 --> 00:01:18,750
ok half of you - ok interesting the

00:01:14,790 --> 00:01:21,420
titles merge anybody a data scientist ok

00:01:18,750 --> 00:01:23,850
I got a few so I want to talk to you

00:01:21,420 --> 00:01:25,830
after this talk and you tell me this

00:01:23,850 --> 00:01:28,770
makes sense and if you like it and if it

00:01:25,830 --> 00:01:32,340
needs to be you know better in any way I

00:01:28,770 --> 00:01:35,310
don't come from and data scientist

00:01:32,340 --> 00:01:37,680
background so this is mostly about me

00:01:35,310 --> 00:01:40,260
talking to Microsoft internal people and

00:01:37,680 --> 00:01:45,530
to our customers trying to help people

00:01:40,260 --> 00:01:48,390
get from ml waddles into production so

00:01:45,530 --> 00:01:50,369
I'm gonna start with some definitions

00:01:48,390 --> 00:01:55,280
because I like to level set

00:01:50,369 --> 00:01:59,130
so what's ml ups and why should you care

00:01:55,280 --> 00:02:01,770
so ml machine learning let's just define

00:01:59,130 --> 00:02:04,229
that for the beginning is the science of

00:02:01,770 --> 00:02:07,020
getting computers to act without being

00:02:04,229 --> 00:02:09,629
explicitly programmed right so that

00:02:07,020 --> 00:02:12,510
simulation we saw in a beginning that

00:02:09,629 --> 00:02:14,909
simulation is learning to walk while you

00:02:12,510 --> 00:02:16,890
know attempting to do that so there's no

00:02:14,909 --> 00:02:19,319
programmer that's writing and explicit

00:02:16,890 --> 00:02:22,409
if-else statements if I hit it with a

00:02:19,319 --> 00:02:22,890
box from this angle you recover by doing

00:02:22,409 --> 00:02:25,290
next one

00:02:22,890 --> 00:02:28,410
see but it's actually just learning from

00:02:25,290 --> 00:02:30,720
the data um this is something that a lot

00:02:28,410 --> 00:02:33,530
of people don't grasp like if you look

00:02:30,720 --> 00:02:35,970
at the congressional hearings about like

00:02:33,530 --> 00:02:38,520
Facebook algorithms and stuff like that

00:02:35,970 --> 00:02:40,170
a lot of people so don't fully

00:02:38,520 --> 00:02:41,910
appreciate the fact that there's no

00:02:40,170 --> 00:02:43,890
explicit programming that goes into ml

00:02:41,910 --> 00:02:46,380
and that's the main difference but

00:02:43,890 --> 00:02:48,090
whether we call it AI like artificial

00:02:46,380 --> 00:02:50,250
intelligence whether we call it machine

00:02:48,090 --> 00:02:52,830
learning deep learning this is all about

00:02:50,250 --> 00:02:56,310
computers learning from data rather than

00:02:52,830 --> 00:02:58,709
being explicitly programmed so this

00:02:56,310 --> 00:03:01,730
thing has been on the rise so that's why

00:02:58,709 --> 00:03:04,860
you know a lot of people are starting to

00:03:01,730 --> 00:03:07,200
venture into this I don't have a

00:03:04,860 --> 00:03:10,230
Forrester report that I can share but I

00:03:07,200 --> 00:03:14,910
was just looking at some google search

00:03:10,230 --> 00:03:17,550
tags so basically the ML is overtaking

00:03:14,910 --> 00:03:19,260
DevOps and also if you look at

00:03:17,550 --> 00:03:21,000
programming languages python is

00:03:19,260 --> 00:03:23,850
overtaking pretty much everything else

00:03:21,000 --> 00:03:26,970
lately and python is the language most

00:03:23,850 --> 00:03:29,010
used for machine learning so we can kind

00:03:26,970 --> 00:03:31,049
of gather from this data there's a lot

00:03:29,010 --> 00:03:33,870
of machine learning that's happening um

00:03:31,049 --> 00:03:36,299
and that is actually also true if I talk

00:03:33,870 --> 00:03:38,070
to customers everybody's trying to get

00:03:36,299 --> 00:03:42,570
into this space small companies big

00:03:38,070 --> 00:03:45,329
companies everybody in the world so this

00:03:42,570 --> 00:03:48,320
is all well and nice but if you're not a

00:03:45,329 --> 00:03:51,150
data scientist right if you are a

00:03:48,320 --> 00:03:55,650
developer or DevOps like how is this

00:03:51,150 --> 00:03:58,590
relevant to you well so this is why this

00:03:55,650 --> 00:04:00,480
is a tweet from somebody that says okay

00:03:58,590 --> 00:04:02,459
the story of enterprise machine learning

00:04:00,480 --> 00:04:04,860
it took me three weeks to develop the

00:04:02,459 --> 00:04:07,170
model and it's been xi last months and

00:04:04,860 --> 00:04:11,130
it's still not deployed right because

00:04:07,170 --> 00:04:13,260
this is complicated but and people who

00:04:11,130 --> 00:04:15,919
are in data science mostly one of data

00:04:13,260 --> 00:04:19,260
science right this is a whole job

00:04:15,919 --> 00:04:21,810
there's a lot that goes into it and they

00:04:19,260 --> 00:04:23,789
probably don't really want to work also

00:04:21,810 --> 00:04:27,090
on deploying their self into production

00:04:23,789 --> 00:04:28,740
so somebody has to do it uh but for that

00:04:27,090 --> 00:04:32,280
we all need to kind of understand each

00:04:28,740 --> 00:04:35,280
other right I'm so just you know to talk

00:04:32,280 --> 00:04:36,430
about data science so Mori this is a you

00:04:35,280 --> 00:04:39,190
know

00:04:36,430 --> 00:04:42,040
algorithm for deep learning some of this

00:04:39,190 --> 00:04:43,449
stuff gets really complex you know this

00:04:42,040 --> 00:04:45,190
is bad propagation I took a couple

00:04:43,449 --> 00:04:47,350
classes on email just to get some

00:04:45,190 --> 00:04:51,460
context there was a lot of heavy math

00:04:47,350 --> 00:04:53,800
and scary things um and you know it's

00:04:51,460 --> 00:04:56,229
just like if I'm a data scientist I

00:04:53,800 --> 00:04:56,949
probably want to work out how to make

00:04:56,229 --> 00:04:58,900
this better

00:04:56,949 --> 00:05:02,020
um and make my model make better

00:04:58,900 --> 00:05:04,060
predictions rather than deploy it um and

00:05:02,020 --> 00:05:06,460
a typical a data science work

00:05:04,060 --> 00:05:08,680
environment looks like this so most

00:05:06,460 --> 00:05:12,760
people work in Jupiter notebooks right

00:05:08,680 --> 00:05:15,490
and again if I talk to clients and

00:05:12,760 --> 00:05:18,850
Microsoft people like most of them are

00:05:15,490 --> 00:05:21,310
at the stage where they have to check

00:05:18,850 --> 00:05:22,810
their Jupiter notebooks or Python

00:05:21,310 --> 00:05:25,690
scripts or Scala scripts or whatever it

00:05:22,810 --> 00:05:27,580
is in to get so this is cool like they

00:05:25,690 --> 00:05:31,000
learn the benefits of source control

00:05:27,580 --> 00:05:33,479
this is awesome but we still need to

00:05:31,000 --> 00:05:37,500
make a lot of steps before we get into

00:05:33,479 --> 00:05:40,690
actual clients consuming our software so

00:05:37,500 --> 00:05:44,320
let's talk about the differences between

00:05:40,690 --> 00:05:47,080
the programming and ml in terms of

00:05:44,320 --> 00:05:49,780
process so in regular programming we we

00:05:47,080 --> 00:05:52,930
create an algorithm and we give a data

00:05:49,780 --> 00:05:56,740
and it produces answers right so again

00:05:52,930 --> 00:06:00,659
writing explicit algorithms in machine

00:05:56,740 --> 00:06:04,840
learning kind of switches so we give the

00:06:00,659 --> 00:06:06,729
model we give it answers and data right

00:06:04,840 --> 00:06:09,190
so we give it labeled data which means

00:06:06,729 --> 00:06:12,280
we have to have data sets and we feed it

00:06:09,190 --> 00:06:14,470
into this black box of training but and

00:06:12,280 --> 00:06:18,550
it produces the algorithm which is also

00:06:14,470 --> 00:06:21,550
called a model and then once we deploy

00:06:18,550 --> 00:06:24,039
that model we can feed it new data and

00:06:21,550 --> 00:06:26,979
it can produce predictions right so this

00:06:24,039 --> 00:06:29,320
is mostly what it is all about people

00:06:26,979 --> 00:06:30,849
trying to predict the future to predict

00:06:29,320 --> 00:06:34,690
the future they need to learn from the

00:06:30,849 --> 00:06:36,550
past made I'm so let's say that we've

00:06:34,690 --> 00:06:39,940
developed this model and this is all

00:06:36,550 --> 00:06:42,550
well and great um we climbed that

00:06:39,940 --> 00:06:44,979
Everest we we gathered something we

00:06:42,550 --> 00:06:46,870
created something from whatever process

00:06:44,979 --> 00:06:50,380
it was that can predict the future

00:06:46,870 --> 00:06:54,070
really well now how do we get

00:06:50,380 --> 00:06:55,750
into production so we just said that

00:06:54,070 --> 00:06:57,310
like some of these things sorry

00:06:55,750 --> 00:07:01,420
so in these things are ridiculously

00:06:57,310 --> 00:07:03,550
complex um and so that's why when people

00:07:01,420 --> 00:07:06,940
talk about Mulsim model is kind of an

00:07:03,550 --> 00:07:09,760
abstract Ward so it can do know what

00:07:06,940 --> 00:07:12,910
many things um so what really is the

00:07:09,760 --> 00:07:15,430
model well if I talk to people out there

00:07:12,910 --> 00:07:17,260
most of them are actually not doing like

00:07:15,430 --> 00:07:19,660
these super complicated things that

00:07:17,260 --> 00:07:21,790
involve deep learning and that like do

00:07:19,660 --> 00:07:24,790
stuff they do stuff that you could in

00:07:21,790 --> 00:07:26,590
theory do with Excel right um most of

00:07:24,790 --> 00:07:28,030
you if you had a technical degree of

00:07:26,590 --> 00:07:30,820
some sort you learned about linear

00:07:28,030 --> 00:07:33,010
regression baser you gather data and

00:07:30,820 --> 00:07:36,700
then you try to draw a line essentially

00:07:33,010 --> 00:07:41,140
through it and get get the formula that

00:07:36,700 --> 00:07:45,190
will be like y equals a plus BX um and

00:07:41,140 --> 00:07:47,320
then when you get the input and you ax

00:07:45,190 --> 00:07:50,020
into this formula you'll get a new Y

00:07:47,320 --> 00:07:53,070
right so this one is a housing prices in

00:07:50,020 --> 00:07:56,230
a certain region as a function of year

00:07:53,070 --> 00:07:57,700
so honestly most people out there who

00:07:56,230 --> 00:07:59,110
are deploying the male models this is

00:07:57,700 --> 00:08:02,290
what they're deploying this is kind of

00:07:59,110 --> 00:08:04,150
like what we're talking about again not

00:08:02,290 --> 00:08:06,430
true for everybody but it's true for a

00:08:04,150 --> 00:08:08,770
lot of people so essentially we're

00:08:06,430 --> 00:08:11,830
saying that ml Watteau is a definition

00:08:08,770 --> 00:08:14,590
of a mathematical formula with numbers

00:08:11,830 --> 00:08:17,800
with a number of parameters that are

00:08:14,590 --> 00:08:20,980
learned from data so this is good news

00:08:17,800 --> 00:08:23,560
because once I see that okay I I know

00:08:20,980 --> 00:08:26,860
what I need to do I need to create like

00:08:23,560 --> 00:08:29,320
an API endpoint right that will consume

00:08:26,860 --> 00:08:31,600
inputs not necessarily single one maybe

00:08:29,320 --> 00:08:33,400
it's five if it's an image which is a

00:08:31,600 --> 00:08:36,880
whole lot of input if if you consider

00:08:33,400 --> 00:08:38,919
that or maybe it's again a single X and

00:08:36,880 --> 00:08:41,830
it will output something maybe it's a

00:08:38,919 --> 00:08:44,650
prediction of like what an image

00:08:41,830 --> 00:08:46,870
actually is maybe its number maybe it's

00:08:44,650 --> 00:08:53,200
a set of numbers but essentially this is

00:08:46,870 --> 00:08:56,740
what it is and then excuse me so this is

00:08:53,200 --> 00:08:58,270
great right um if I know what my model

00:08:56,740 --> 00:09:02,160
is and I know that all I need to do is

00:08:58,270 --> 00:09:05,910
great sort of a service with an API

00:09:02,160 --> 00:09:08,130
nice question someone asked me like last

00:09:05,910 --> 00:09:10,500
week was like do models really change

00:09:08,130 --> 00:09:12,630
that often like do we really need to

00:09:10,500 --> 00:09:14,940
automate this process like maybe we just

00:09:12,630 --> 00:09:17,399
like you know data scientists go you do

00:09:14,940 --> 00:09:19,949
this little room and they you know work

00:09:17,399 --> 00:09:22,860
on stuff for two months and then like

00:09:19,949 --> 00:09:25,519
maybe we deploy like and and then it's

00:09:22,860 --> 00:09:30,060
stale for another year and that's fine

00:09:25,519 --> 00:09:32,430
that's essentially not true like this is

00:09:30,060 --> 00:09:34,980
really far from true so if you think

00:09:32,430 --> 00:09:39,139
like the best example is for the models

00:09:34,980 --> 00:09:42,899
that you run across every day yeah our

00:09:39,139 --> 00:09:45,149
recommendation models so yeah this one

00:09:42,899 --> 00:09:46,680
says Facebook's list of suggested

00:09:45,149 --> 00:09:48,360
friends is quite literally list if

00:09:46,680 --> 00:09:50,459
people have been avoiding my entire life

00:09:48,360 --> 00:09:52,970
I've also seen a version of this which

00:09:50,459 --> 00:09:56,970
says my ex-girlfriend slash boyfriends

00:09:52,970 --> 00:09:59,399
but but the thing is it used to be that

00:09:56,970 --> 00:10:01,079
way but it's not that way anymore right

00:09:59,399 --> 00:10:02,100
the suggested friends has actually

00:10:01,079 --> 00:10:06,000
improved a lot

00:10:02,100 --> 00:10:08,730
so does Yelp suggestions for restaurants

00:10:06,000 --> 00:10:11,550
they need to go to so does uber match me

00:10:08,730 --> 00:10:15,630
with drivers but all these things are

00:10:11,550 --> 00:10:17,759
actually ML predictions right I'm in all

00:10:15,630 --> 00:10:20,550
these companies actually deploy models

00:10:17,759 --> 00:10:23,880
every single day so if you look at the

00:10:20,550 --> 00:10:28,709
big companies out there such as us so

00:10:23,880 --> 00:10:31,920
Microsoft or um Facebook or on Google

00:10:28,709 --> 00:10:35,100
goober which are the particular ones on

00:10:31,920 --> 00:10:38,009
this slide but um these companies to

00:10:35,100 --> 00:10:40,290
them models are actually their

00:10:38,009 --> 00:10:43,620
livelihood and they actually deploy them

00:10:40,290 --> 00:10:45,990
multiple times a day potentially so they

00:10:43,620 --> 00:10:48,449
have these whole systems built around

00:10:45,990 --> 00:10:51,720
this the problem is that those systems

00:10:48,449 --> 00:10:53,819
are custom-made right so most of this is

00:10:51,720 --> 00:10:56,009
not something that is a tooling that

00:10:53,819 --> 00:10:58,980
exists out there it's showing that we

00:10:56,009 --> 00:11:00,839
built for ourselves I'm actually in

00:10:58,980 --> 00:11:03,029
terms of Microsoft we're slowly just

00:11:00,839 --> 00:11:04,980
starting the process of kind of bringing

00:11:03,029 --> 00:11:07,740
it all together and being like hey we

00:11:04,980 --> 00:11:10,079
build a service you automate ml stuff

00:11:07,740 --> 00:11:12,510
and we you know have a mail stuff that's

00:11:10,079 --> 00:11:15,449
being pushed out for Outlook for being

00:11:12,510 --> 00:11:15,990
for all these things every day this can

00:11:15,449 --> 00:11:18,270
bring you all

00:11:15,990 --> 00:11:20,940
together right because one of the things

00:11:18,270 --> 00:11:23,490
that we did on the Asha Delta team for

00:11:20,940 --> 00:11:26,360
instance was that we said we come

00:11:23,490 --> 00:11:29,250
mandated people to use our own tools and

00:11:26,360 --> 00:11:31,740
because it allows us to learn from our

00:11:29,250 --> 00:11:34,470
own mistakes but we're slowly trying to

00:11:31,740 --> 00:11:36,570
do this for ml as well because again

00:11:34,470 --> 00:11:38,550
there's nothing like the person next

00:11:36,570 --> 00:11:41,790
door calling me and tell me hey your

00:11:38,550 --> 00:11:43,200
software has a bug I know I call one

00:11:41,790 --> 00:11:45,029
person in this room with your stuff

00:11:43,200 --> 00:11:50,550
through here it has a bug like two weeks

00:11:45,029 --> 00:11:52,560
ago so anyway so basically the problem

00:11:50,550 --> 00:11:55,200
for most people is that they don't work

00:11:52,560 --> 00:11:57,089
for Microsoft or Google right and they

00:11:55,200 --> 00:11:59,670
actually are trying to do this work

00:11:57,089 --> 00:12:03,839
without having lots of money and lots of

00:11:59,670 --> 00:12:05,880
Engineers to put our projects so

00:12:03,839 --> 00:12:09,000
basically we want to learn to iterate

00:12:05,880 --> 00:12:11,760
and for that like we want to bring the

00:12:09,000 --> 00:12:14,100
data scientists and the DevOps or

00:12:11,760 --> 00:12:17,370
whatever it's called today personally

00:12:14,100 --> 00:12:20,190
together right so the truth is that

00:12:17,370 --> 00:12:22,860
these people have shared concerns not

00:12:20,190 --> 00:12:25,800
all the concerns are shared but some of

00:12:22,860 --> 00:12:28,560
them are and both of them care about

00:12:25,800 --> 00:12:30,420
iterating quickly both of them care at

00:12:28,560 --> 00:12:32,760
least to some extent about reliability

00:12:30,420 --> 00:12:35,130
both of them definitely care about

00:12:32,760 --> 00:12:37,800
repeatability so what happens if I

00:12:35,130 --> 00:12:40,290
actually built a model and it was doing

00:12:37,800 --> 00:12:42,480
pretty well but then something happens

00:12:40,290 --> 00:12:44,700
and I pushed a new one to production and

00:12:42,480 --> 00:12:46,709
soon worse and now all my predictions

00:12:44,700 --> 00:12:48,029
are crap and then I don't know matching

00:12:46,709 --> 00:12:50,970
people with the wrong drivers or

00:12:48,029 --> 00:12:52,920
whatever it is so I want to be able to

00:12:50,970 --> 00:12:55,079
go back to the last known good version

00:12:52,920 --> 00:12:57,860
and then redeploy that right that would

00:12:55,079 --> 00:13:00,660
save me a lot of grief so repeatability

00:12:57,860 --> 00:13:05,040
reusability being able to label this

00:13:00,660 --> 00:13:06,720
stuff is really important so the machine

00:13:05,040 --> 00:13:08,370
learning lifecycle approximately looks

00:13:06,720 --> 00:13:10,500
like this and it's funny because like

00:13:08,370 --> 00:13:12,149
the the boxes some of these boxes are

00:13:10,500 --> 00:13:14,010
much bigger than others so the train

00:13:12,149 --> 00:13:15,870
model is actually a huge box because

00:13:14,010 --> 00:13:18,029
there's a lot of stuff that goes into it

00:13:15,870 --> 00:13:20,430
but then you need to kind of package it

00:13:18,029 --> 00:13:22,770
validated it actually works deploy it

00:13:20,430 --> 00:13:25,110
and then monitor because models also

00:13:22,770 --> 00:13:27,810
drift because the data changes or

00:13:25,110 --> 00:13:29,340
because like your input actually changes

00:13:27,810 --> 00:13:31,950
your application changes and you

00:13:29,340 --> 00:13:34,890
to change the behavior so you actually

00:13:31,950 --> 00:13:37,200
can't like even if your model is perfect

00:13:34,890 --> 00:13:41,190
today and it's super accurate you can't

00:13:37,200 --> 00:13:43,620
rely on that be knackered forever so

00:13:41,190 --> 00:13:47,279
what we can do is we can build Serta if

00:13:43,620 --> 00:13:49,710
we don't work for a huge company we do

00:13:47,279 --> 00:13:53,040
we can build this sort of homegrown

00:13:49,710 --> 00:13:56,339
system for automating this so I'm gonna

00:13:53,040 --> 00:13:58,260
try not to fall off this stage so

00:13:56,339 --> 00:14:00,810
basically in this demo I'm gonna be

00:13:58,260 --> 00:14:01,980
using these tools but you can take you

00:14:00,810 --> 00:14:04,230
know obviously you need some type of

00:14:01,980 --> 00:14:06,000
source control because I don't think I

00:14:04,230 --> 00:14:08,730
need to sell anybody on the benefits of

00:14:06,000 --> 00:14:10,620
source control and then you need some

00:14:08,730 --> 00:14:13,140
sort of automation tool right so I'm

00:14:10,620 --> 00:14:16,050
shocker I'm using Azure DevOps because

00:14:13,140 --> 00:14:19,410
they work for its team but you could do

00:14:16,050 --> 00:14:21,330
this with Jenkins or go or circle CI or

00:14:19,410 --> 00:14:23,190
whatever else is out there pretty much

00:14:21,330 --> 00:14:25,880
everybody has some type of automation

00:14:23,190 --> 00:14:29,339
tool and then the centerpiece is the

00:14:25,880 --> 00:14:32,730
training and packaging the model and

00:14:29,339 --> 00:14:34,980
deploying it and I'm using both cue flow

00:14:32,730 --> 00:14:39,300
and Asher about both of these tools are

00:14:34,980 --> 00:14:41,370
kind of new and they are capable of

00:14:39,300 --> 00:14:43,950
doing similar things I could use just

00:14:41,370 --> 00:14:47,250
one of them I'm using both for different

00:14:43,950 --> 00:14:49,620
pieces you could also get away with not

00:14:47,250 --> 00:14:54,560
using either of those tools your life

00:14:49,620 --> 00:14:58,680
would just be a lot harder if you did so

00:14:54,560 --> 00:15:01,110
one more flow diagram um so if we talk

00:14:58,680 --> 00:15:03,480
about the code this would be the

00:15:01,110 --> 00:15:05,730
developer checks in code right so in

00:15:03,480 --> 00:15:08,370
terms of the data scientists we now talk

00:15:05,730 --> 00:15:11,250
about code data set and environment

00:15:08,370 --> 00:15:13,140
version II so there's more pieces that

00:15:11,250 --> 00:15:14,850
are going into this actually right

00:15:13,140 --> 00:15:16,709
because my code actually matters right I

00:15:14,850 --> 00:15:20,430
wrote some type of algorithm that is

00:15:16,709 --> 00:15:22,080
doing something but I also the data set

00:15:20,430 --> 00:15:24,690
really really matters because if the

00:15:22,080 --> 00:15:26,970
data set changes my model might change

00:15:24,690 --> 00:15:28,529
significantly so I need to be able to

00:15:26,970 --> 00:15:31,200
version that as well and say that

00:15:28,529 --> 00:15:33,390
somewhere one of the biggest problems

00:15:31,200 --> 00:15:36,480
with this actually is like the storage

00:15:33,390 --> 00:15:39,839
for data sets and also being able to

00:15:36,480 --> 00:15:41,160
access data because like I gave us a

00:15:39,839 --> 00:15:42,870
couple weeks ago and people were asking

00:15:41,160 --> 00:15:45,000
me about like well why don't

00:15:42,870 --> 00:15:46,950
you talk about I don't know as

00:15:45,000 --> 00:15:49,170
monitoring solutions and display data

00:15:46,950 --> 00:15:51,660
from them and think okay I would have to

00:15:49,170 --> 00:15:55,170
go for a year to actually be able to

00:15:51,660 --> 00:15:56,910
have non PII data that I could use you

00:15:55,170 --> 00:15:59,010
know that wasn't customer information

00:15:56,910 --> 00:16:01,200
that I could train my model on so this

00:15:59,010 --> 00:16:03,930
is part of the complication of the whole

00:16:01,200 --> 00:16:07,140
thing and then the metadata for the

00:16:03,930 --> 00:16:09,450
environment also matters then I go into

00:16:07,140 --> 00:16:11,520
building the app so I can go into

00:16:09,450 --> 00:16:13,350
training the model and I'm gonna go

00:16:11,520 --> 00:16:16,529
through this a little bit in more detail

00:16:13,350 --> 00:16:18,540
during the demo um but again not a data

00:16:16,529 --> 00:16:22,320
scientist so it's kind of a little bit

00:16:18,540 --> 00:16:24,930
of magic to me um and then basically I

00:16:22,320 --> 00:16:27,089
we can talk about different things so

00:16:24,930 --> 00:16:29,010
both of the tools that we discussed can

00:16:27,089 --> 00:16:30,750
do things like fanning out hyper

00:16:29,010 --> 00:16:32,490
parameters which was really really cool

00:16:30,750 --> 00:16:35,400
if you're a data scientist because that

00:16:32,490 --> 00:16:37,560
means that I can try different things to

00:16:35,400 --> 00:16:40,529
train different models at the same time

00:16:37,560 --> 00:16:41,910
and then see which one's the best so

00:16:40,529 --> 00:16:43,890
that's really cool if I don't have to

00:16:41,910 --> 00:16:47,580
sort of do that sequentially because it

00:16:43,890 --> 00:16:51,120
does take a long time and I test my

00:16:47,580 --> 00:16:54,150
applications then I release them now I

00:16:51,120 --> 00:16:56,850
think I don't know if there's anybody

00:16:54,150 --> 00:16:58,830
out there who would actually rely on a

00:16:56,850 --> 00:17:00,330
native process I actually don't know a

00:16:58,830 --> 00:17:02,520
lot of people who rely on automated

00:17:00,330 --> 00:17:04,829
process to deployment software would

00:17:02,520 --> 00:17:06,510
like zero human intervention um I

00:17:04,829 --> 00:17:08,610
definitely don't think we're mature

00:17:06,510 --> 00:17:11,730
enough to do this for ml but even if you

00:17:08,610 --> 00:17:13,709
do have to manually validate it and have

00:17:11,730 --> 00:17:15,780
an actual human go through and say hey

00:17:13,709 --> 00:17:17,880
you know my accuracy is better and this

00:17:15,780 --> 00:17:20,220
will look sane and whatever before you

00:17:17,880 --> 00:17:22,020
deployed as long as this is the check

00:17:20,220 --> 00:17:24,030
that you can sort of click a button and

00:17:22,020 --> 00:17:26,339
push it into production your life is a

00:17:24,030 --> 00:17:28,850
lot better um and then again you need to

00:17:26,339 --> 00:17:34,250
be able to monitor this whole thing and

00:17:28,850 --> 00:17:37,140
potentially go to model retraining so

00:17:34,250 --> 00:17:39,090
there was a talk on cue flow here I

00:17:37,140 --> 00:17:43,650
don't know if anybody had attended that

00:17:39,090 --> 00:17:46,140
a couple folks okay um I'm not gonna

00:17:43,650 --> 00:17:49,740
dive super into cue flow cue flow is a

00:17:46,140 --> 00:17:52,320
open source project that is deployed on

00:17:49,740 --> 00:17:56,460
top of kubernetes that can be used for

00:17:52,320 --> 00:18:00,000
ml for automation alpha male model like

00:17:56,460 --> 00:18:03,750
cycle with just great news if you like

00:18:00,000 --> 00:18:06,990
kubernetes and not-so-great news if you

00:18:03,750 --> 00:18:08,910
don't know what kubernetes is i wouldn't

00:18:06,990 --> 00:18:12,680
ask a data scientist to go and deploy

00:18:08,910 --> 00:18:15,390
cube flow because it's painful and it

00:18:12,680 --> 00:18:17,730
it's not so complicated but it's

00:18:15,390 --> 00:18:20,280
definitely probably not something they

00:18:17,730 --> 00:18:22,350
want to worry about but what it does

00:18:20,280 --> 00:18:24,390
allow allow you to do so it's built on

00:18:22,350 --> 00:18:26,430
containers so every piece in here would

00:18:24,390 --> 00:18:29,610
be a container um so you basically

00:18:26,430 --> 00:18:31,380
containerize different steps and your ml

00:18:29,610 --> 00:18:34,770
workflow and you can use it as a

00:18:31,380 --> 00:18:37,260
template so if I created this cube flow

00:18:34,770 --> 00:18:39,360
pipeline now pipelines is a word that's

00:18:37,260 --> 00:18:41,610
used by everybody and it means slightly

00:18:39,360 --> 00:18:46,620
different things to different people but

00:18:41,610 --> 00:18:49,050
this is a ml pipeline so basically if I

00:18:46,620 --> 00:18:50,250
created this workflow I can then share

00:18:49,050 --> 00:18:52,410
it with other people who have similar

00:18:50,250 --> 00:18:54,270
problems and they can start from this

00:18:52,410 --> 00:18:56,040
instead of starting from scratch in

00:18:54,270 --> 00:19:01,830
terms of what their workflow looks like

00:18:56,040 --> 00:19:05,940
um and then as R ml is a service that

00:19:01,830 --> 00:19:10,500
can basically train test deploy manage

00:19:05,940 --> 00:19:13,110
ml models it again if I did I could do

00:19:10,500 --> 00:19:14,850
this demo using only cube flow or using

00:19:13,110 --> 00:19:17,490
only as your ml in terms of the training

00:19:14,850 --> 00:19:20,070
and they're slightly different they're

00:19:17,490 --> 00:19:22,920
slightly better and different things to

00:19:20,070 --> 00:19:24,960
to the extent that I can see ashram ml

00:19:22,920 --> 00:19:28,050
appears to be more mature but it is also

00:19:24,960 --> 00:19:29,150
not open source so kind of choose your

00:19:28,050 --> 00:19:32,310
poison

00:19:29,150 --> 00:19:36,890
but as r ml is a hosted service that

00:19:32,310 --> 00:19:45,510
allows you to automate similar things

00:19:36,890 --> 00:19:48,830
okay I'm gonna go into the demo and pray

00:19:45,510 --> 00:19:48,830
to demo gods that it works

00:19:50,220 --> 00:19:59,730
so this starts but basically I have a

00:19:56,210 --> 00:20:01,379
repository so everything that I'm

00:19:59,730 --> 00:20:05,279
showing today is in the github

00:20:01,379 --> 00:20:06,929
repository in it's got a readme that you

00:20:05,279 --> 00:20:08,789
could try to follow and basically

00:20:06,929 --> 00:20:13,799
automate all of the steps and deploy the

00:20:08,789 --> 00:20:18,480
exact same thing so you could try it

00:20:13,799 --> 00:20:21,210
yourself what's in the repo is both the

00:20:18,480 --> 00:20:24,840
code for this stuff and all of the

00:20:21,210 --> 00:20:27,990
pipeline's so this first one is a

00:20:24,840 --> 00:20:29,700
pipeline for cube flow so I'm just gonna

00:20:27,990 --> 00:20:33,360
check in a small change to like the

00:20:29,700 --> 00:20:36,019
readme so we can kick it off and see it

00:20:33,360 --> 00:20:36,019
actually run

00:20:56,570 --> 00:21:01,850
okay so this is the repo it's gonna mean

00:21:00,320 --> 00:21:04,820
their source slide in the end of the

00:21:01,850 --> 00:21:07,850
talk but it's a good hub calm divine ups

00:21:04,820 --> 00:21:13,100
which is my alias and then cube flow -

00:21:07,850 --> 00:21:16,490
and - mo ops and this readme is about

00:21:13,100 --> 00:21:17,780
you know two hours long just serene so

00:21:16,490 --> 00:21:21,770
you can guess how long it takes to

00:21:17,780 --> 00:21:24,230
deploy but basically kind of highlights

00:21:21,770 --> 00:21:26,120
the entire process so I'm running on

00:21:24,230 --> 00:21:28,580
Azure again the Shocker I work for

00:21:26,120 --> 00:21:31,340
Microsoft fresh help seems so random and

00:21:28,580 --> 00:21:33,290
Azure but you could if you had a

00:21:31,340 --> 00:21:36,500
kubernetes cluster elsewhere you can

00:21:33,290 --> 00:21:38,480
absolutely around cube flow there I'm so

00:21:36,500 --> 00:21:40,820
there's no limitation on that you could

00:21:38,480 --> 00:21:43,160
also run out Rhodopes it's a sad service

00:21:40,820 --> 00:21:44,720
and it's got a free tier if you're a

00:21:43,160 --> 00:21:46,880
small organization or an open source

00:21:44,720 --> 00:21:49,850
project so you can always run out your

00:21:46,880 --> 00:21:50,240
dollops basically try it for you of

00:21:49,850 --> 00:21:54,500
charge

00:21:50,240 --> 00:21:56,720
um the thing that is not free is as your

00:21:54,500 --> 00:21:59,360
ml but it does automate some pieces of

00:21:56,720 --> 00:22:00,770
this workflow which would be hard to do

00:21:59,360 --> 00:22:03,830
if you had to build them from scratch

00:22:00,770 --> 00:22:06,380
but again you can't um so basically I'm

00:22:03,830 --> 00:22:09,710
running a cranks cluster on which cube

00:22:06,380 --> 00:22:11,690
flow is deployed on I have a docker

00:22:09,710 --> 00:22:13,430
container registry to which I'm

00:22:11,690 --> 00:22:15,560
deploying the containers that are

00:22:13,430 --> 00:22:20,480
generated by the pipeline for the cube

00:22:15,560 --> 00:22:22,220
flow steps I'm so and then I have an

00:22:20,480 --> 00:22:28,420
azure pipeline so I'm going to switch to

00:22:22,220 --> 00:22:28,420
this the I pipeline let's see if it kick

00:22:32,010 --> 00:22:40,340
or not okay I'm gonna show you around

00:22:37,410 --> 00:22:42,450
that already rent so this is great

00:22:40,340 --> 00:22:47,640
actually you let me do something

00:22:42,450 --> 00:22:53,480
slightly different that's going to edit

00:22:47,640 --> 00:22:53,480
us oh yeah that's great

00:22:57,410 --> 00:23:01,789
not good because I don't know that I can

00:23:00,049 --> 00:23:10,850
remember my password right here on stage

00:23:01,789 --> 00:23:15,020
so this is good the demo gods do not

00:23:10,850 --> 00:23:18,230
like me right so basically what this

00:23:15,020 --> 00:23:22,850
does actually yeah let me show you here

00:23:18,230 --> 00:23:25,460
what this does is it's a Yama pipeline

00:23:22,850 --> 00:23:27,650
that runs on actual pipelines and it

00:23:25,460 --> 00:23:29,650
Creed's three containers so the docking

00:23:27,650 --> 00:23:33,070
files for this and this is super dark

00:23:29,650 --> 00:23:33,070
can you guys see this

00:23:40,720 --> 00:23:43,910
[Music]

00:23:51,920 --> 00:24:00,830
okay is that better okay cool

00:23:57,410 --> 00:24:02,840
so it's an ad vi1 pipeline it runs on a

00:24:00,830 --> 00:24:06,740
host of the bun to Adrienne's I'm and

00:24:02,840 --> 00:24:09,050
this is just creating a docker container

00:24:06,740 --> 00:24:11,540
and pushing it into your container

00:24:09,050 --> 00:24:14,530
registry the docker container is created

00:24:11,540 --> 00:24:17,930
based on the files that is that are in

00:24:14,530 --> 00:24:20,750
this Reaper so there's a pre process

00:24:17,930 --> 00:24:22,760
register and pre brothers train and

00:24:20,750 --> 00:24:26,300
register right so it's three different

00:24:22,760 --> 00:24:28,910
containers basically the pre process for

00:24:26,300 --> 00:24:31,820
instance will pick up the data set

00:24:28,910 --> 00:24:35,000
download it to the local attached valium

00:24:31,820 --> 00:24:38,090
and make sure that it's all there then

00:24:35,000 --> 00:24:40,670
train is going to go through and

00:24:38,090 --> 00:24:43,490
basically you run this process of

00:24:40,670 --> 00:24:46,760
training the model on the data set I'm

00:24:43,490 --> 00:24:53,330
and then register will go and register

00:24:46,760 --> 00:24:58,340
in the model with the azure ml so I can

00:24:53,330 --> 00:24:59,030
go into my cube flow so this is my

00:24:58,340 --> 00:25:01,250
pipeline's

00:24:59,030 --> 00:25:03,620
pipeline and this is not super

00:25:01,250 --> 00:25:05,420
complicated like again this could be

00:25:03,620 --> 00:25:11,390
more complicated in terms of what it

00:25:05,420 --> 00:25:14,420
actually runs but this particular one

00:25:11,390 --> 00:25:17,210
goes through three stages that we talked

00:25:14,420 --> 00:25:19,340
about so again this is a container that

00:25:17,210 --> 00:25:21,890
it picks up from the azure container

00:25:19,340 --> 00:25:23,960
registry and it does pre processing in

00:25:21,890 --> 00:25:27,770
this case it says okay I already have

00:25:23,960 --> 00:25:29,600
the data so I can skip that step then it

00:25:27,770 --> 00:25:32,930
goes through the training so basically

00:25:29,600 --> 00:25:34,340
picks up on the images and with the

00:25:32,930 --> 00:25:35,360
labels right and then it goes through

00:25:34,340 --> 00:25:37,040
five epochs

00:25:35,360 --> 00:25:38,960
this is configurable so I can kick it

00:25:37,040 --> 00:25:42,350
off of a different hyper parameters um

00:25:38,960 --> 00:25:45,290
and then it goes into register so it

00:25:42,350 --> 00:25:47,300
goes and registers the model in again I

00:25:45,290 --> 00:25:49,460
could try to serve it in other ways but

00:25:47,300 --> 00:25:51,230
I am serving this from a dream elf so

00:25:49,460 --> 00:25:56,360
I'm going and registering the model

00:25:51,230 --> 00:25:58,460
without UML workspace now you can see

00:25:56,360 --> 00:26:02,810
that I have a bunch of different models

00:25:58,460 --> 00:26:05,540
in here um and the model actually comes

00:26:02,810 --> 00:26:08,990
with metadata so I can see both

00:26:05,540 --> 00:26:11,929
what I used to train the model and I can

00:26:08,990 --> 00:26:14,360
also see a whole bunch of like different

00:26:11,929 --> 00:26:15,620
things about the model in the model

00:26:14,360 --> 00:26:18,140
version and stuff like that

00:26:15,620 --> 00:26:20,990
so I could actually there's a handy

00:26:18,140 --> 00:26:23,570
button here which I could use to

00:26:20,990 --> 00:26:27,440
redeploy this so if I wanted to go back

00:26:23,570 --> 00:26:30,830
to a model that is a different version I

00:26:27,440 --> 00:26:33,530
could do that now the benefits of this

00:26:30,830 --> 00:26:36,890
is I have a repository for my models and

00:26:33,530 --> 00:26:38,900
this both this and Kuebler supports all

00:26:36,890 --> 00:26:40,790
types of different model files so it

00:26:38,900 --> 00:26:43,370
allows you to instead of worrying about

00:26:40,790 --> 00:26:45,410
how to convert your model into an API

00:26:43,370 --> 00:26:47,350
endpoint you can just use the service

00:26:45,410 --> 00:26:55,490
registers the model with it and

00:26:47,350 --> 00:26:58,400
basically use that as a service okay and

00:26:55,490 --> 00:27:03,830
then once that's complete and I have run

00:26:58,400 --> 00:27:06,110
my pipeline so basically what happened I

00:27:03,830 --> 00:27:08,510
know that I've confused everybody

00:27:06,110 --> 00:27:12,559
sufficiently so basically what happened

00:27:08,510 --> 00:27:14,720
was I checked in some code it ran a KCI

00:27:12,559 --> 00:27:17,840
pipeline which registered a bunch of

00:27:14,720 --> 00:27:20,120
containers then it kicked off aq flow

00:27:17,840 --> 00:27:22,400
pipeline that took up the containers and

00:27:20,120 --> 00:27:25,760
ran this through the steps of the cube

00:27:22,400 --> 00:27:27,350
flow okay and then once the Q flow was

00:27:25,760 --> 00:27:29,750
done it registered the model without

00:27:27,350 --> 00:27:31,700
your mouth now this is where this one

00:27:29,750 --> 00:27:38,540
picks up so this is another Astra

00:27:31,700 --> 00:27:41,900
dilip's pipeline okay so it starts with

00:27:38,540 --> 00:27:44,510
two artifacts and one of them is a one

00:27:41,900 --> 00:27:46,370
I'm using to trigger so it's the AML

00:27:44,510 --> 00:27:50,150
model that was registered for the ML

00:27:46,370 --> 00:27:52,760
workspace and the other is a github cue

00:27:50,150 --> 00:27:54,470
flow so it looks directly at the

00:27:52,760 --> 00:27:58,400
repository and picks up some metadata

00:27:54,470 --> 00:28:01,880
files then runs it profiles the model so

00:27:58,400 --> 00:28:04,669
this step for profiling basically define

00:28:01,880 --> 00:28:06,919
it identifies which CPU and memory I

00:28:04,669 --> 00:28:09,530
actually want to have to run the model

00:28:06,919 --> 00:28:14,090
in production so tries to identify how

00:28:09,530 --> 00:28:16,700
much power I need I could also just take

00:28:14,090 --> 00:28:18,770
a bed and skip that step then this

00:28:16,700 --> 00:28:23,360
particular one

00:28:18,770 --> 00:28:25,820
is deploying the model into naci so I

00:28:23,360 --> 00:28:29,930
have a container instances I'm so

00:28:25,820 --> 00:28:32,420
basically this took a the model that I

00:28:29,930 --> 00:28:36,590
had it's great that nobody can see

00:28:32,420 --> 00:28:38,390
anything so I took a model that I had

00:28:36,590 --> 00:28:41,120
and deployed it into our container

00:28:38,390 --> 00:28:43,580
instances and that is part of our ml

00:28:41,120 --> 00:28:47,320
again I could do this without the first

00:28:43,580 --> 00:28:47,320
party service if I tried really hard

00:28:48,640 --> 00:28:57,920
then I'm going into testing the model so

00:28:52,070 --> 00:29:00,410
I go and throw a couple of things so

00:28:57,920 --> 00:29:05,690
let's actually go into code here because

00:29:00,410 --> 00:29:08,690
it's using the script so this script

00:29:05,690 --> 00:29:11,990
actually throws a couple of files on it

00:29:08,690 --> 00:29:14,090
I'm so visited tacos and burritos model

00:29:11,990 --> 00:29:16,240
for no other reason that this was a

00:29:14,090 --> 00:29:18,770
simple model that was easy to access

00:29:16,240 --> 00:29:23,450
basically I throw a taco in a burrito

00:29:18,770 --> 00:29:25,460
edit and it tries to identify um if its

00:29:23,450 --> 00:29:30,520
attack or a burrito so we can go into

00:29:25,460 --> 00:29:30,520
logs for this thing and see

00:29:38,510 --> 00:29:43,520
okay so basically this through a couple

00:29:41,000 --> 00:29:46,160
of images at it and it said okay this is

00:29:43,520 --> 00:29:49,730
a burrito image and I'm about really

00:29:46,160 --> 00:29:51,799
unsure that it is um and it took me I

00:29:49,730 --> 00:29:55,070
don't know less than a second to

00:29:51,799 --> 00:29:58,070
identify that right so once I tested my

00:29:55,070 --> 00:29:59,929
modal I also have another step that

00:29:58,070 --> 00:30:02,330
deploys that into an aks cluster

00:29:59,929 --> 00:30:06,290
quote-unquote production um and I have a

00:30:02,330 --> 00:30:11,840
gated check on that is asking me if I

00:30:06,290 --> 00:30:14,030
actually want to go and do that so which

00:30:11,840 --> 00:30:24,440
would work if this actually kicked off a

00:30:14,030 --> 00:30:27,380
thing so questions on this yeah yes so I

00:30:24,440 --> 00:30:28,910
have a data set that I'm downloading it

00:30:27,380 --> 00:30:32,540
again it's a clean data set

00:30:28,910 --> 00:30:34,340
um Google now has a ton of sample data

00:30:32,540 --> 00:30:36,140
sets for different things but you might

00:30:34,340 --> 00:30:38,210
need in your own data data sets for

00:30:36,140 --> 00:30:40,280
certain problems basically you need a

00:30:38,210 --> 00:30:42,470
human who will sit down and identify

00:30:40,280 --> 00:30:44,390
which images or tackles in which or

00:30:42,470 --> 00:30:47,059
burritos or whatever it is your training

00:30:44,390 --> 00:30:50,000
your model on and label that data and

00:30:47,059 --> 00:30:52,610
then you need something to tell the

00:30:50,000 --> 00:30:55,820
training model training out there and

00:30:52,610 --> 00:30:57,559
which which one is which right so once

00:30:55,820 --> 00:30:59,990
it goes through the training process it

00:30:57,559 --> 00:31:02,540
will start being able to identify if

00:30:59,990 --> 00:31:08,169
it's a tag or a burrito or whatever cats

00:31:02,540 --> 00:31:08,169
dogs stop yeah

00:31:14,230 --> 00:31:20,749
do I have the data scientists working in

00:31:16,850 --> 00:31:22,700
Cuba so in in theory yes you would

00:31:20,749 --> 00:31:25,009
so basically like I said you don't want

00:31:22,700 --> 00:31:26,990
to have the data scientist deploy cube

00:31:25,009 --> 00:31:28,429
flow because it essentially disappointed

00:31:26,990 --> 00:31:30,980
kubernetes cluster and configuring a

00:31:28,429 --> 00:31:33,080
bunch of stuff um but in terms of

00:31:30,980 --> 00:31:34,669
building the actual workflow yeah you

00:31:33,080 --> 00:31:37,460
want the data scientists to build the

00:31:34,669 --> 00:31:39,889
workflow and like I said in Azure ml you

00:31:37,460 --> 00:31:41,929
could also build similar workflows also

00:31:39,889 --> 00:31:44,809
if you are talking about these things

00:31:41,929 --> 00:31:46,549
some you sometimes have sample workflows

00:31:44,809 --> 00:31:48,740
out there especially for coop flow which

00:31:46,549 --> 00:31:50,809
is an open source product a project so

00:31:48,740 --> 00:31:54,919
there's a lot of simple workflows out

00:31:50,809 --> 00:31:56,299
there but how you actually so in terms

00:31:54,919 --> 00:31:57,740
of the complicated stuff this one's

00:31:56,299 --> 00:32:00,289
pretty simple and straightforward right

00:31:57,740 --> 00:32:03,169
but in terms allocated stuff this is

00:32:00,289 --> 00:32:04,669
magic to me so I you know someone needs

00:32:03,169 --> 00:32:08,200
to figure out which pieces need to

00:32:04,669 --> 00:32:19,159
happen in the ml workflow in particular

00:32:08,200 --> 00:32:23,090
yeah yeah so this one's the terms are

00:32:19,159 --> 00:32:29,320
for modal and it's being registered with

00:32:23,090 --> 00:32:29,320
Azure ml so

00:32:33,140 --> 00:32:37,460
we can see it out here but basically

00:32:35,570 --> 00:32:39,500
there's different types of models you

00:32:37,460 --> 00:32:41,540
could because you could use like tens or

00:32:39,500 --> 00:32:43,220
for pie tours or psych it and all these

00:32:41,540 --> 00:32:46,370
different things and some of them

00:32:43,220 --> 00:32:47,809
generate different file types so in in

00:32:46,370 --> 00:32:50,000
terms of both of these souls they're

00:32:47,809 --> 00:32:51,980
familiar with the common file types and

00:32:50,000 --> 00:32:54,110
they will be able to kind of process

00:32:51,980 --> 00:32:56,179
that and identify what to do with it

00:32:54,110 --> 00:32:58,130
but if you were gonna do it yourself

00:32:56,179 --> 00:33:00,980
there's also open source tools that you

00:32:58,130 --> 00:33:04,960
could convert on a model file into

00:33:00,980 --> 00:33:04,960
something I could answer an HTP call

00:33:05,559 --> 00:33:08,559
yeah

00:33:16,660 --> 00:33:21,370
if I wasn't using a dremel what would I

00:33:18,730 --> 00:33:23,260
use as a model repository so you could

00:33:21,370 --> 00:33:24,790
in theory you something like already

00:33:23,260 --> 00:33:26,860
factory or something like that and just

00:33:24,790 --> 00:33:30,630
you know something that can keep files

00:33:26,860 --> 00:33:33,520
regardless of their extension right and

00:33:30,630 --> 00:33:35,110
the problem is you have to be able to

00:33:33,520 --> 00:33:37,210
version it and you have to be able to

00:33:35,110 --> 00:33:39,880
attach some of the metadata files for

00:33:37,210 --> 00:33:42,130
that to be valid so again you could

00:33:39,880 --> 00:33:47,160
absolutely implement storage that will

00:33:42,130 --> 00:33:47,160
solve this problem but more work for you

00:34:02,850 --> 00:34:08,470
yeah so what's the interaction between

00:34:05,290 --> 00:34:10,120
Azure dilip's and cue flow so cue flow

00:34:08,470 --> 00:34:12,310
is actually not a Google product is it's

00:34:10,120 --> 00:34:15,450
a open source product but it does come

00:34:12,310 --> 00:34:17,889
you know it did start with Google so we

00:34:15,450 --> 00:34:20,409
do as remote

00:34:17,889 --> 00:34:23,679
behind the scenes actually does run on

00:34:20,409 --> 00:34:26,290
kubernetes and it is a sort of similar

00:34:23,679 --> 00:34:29,470
thing but it isn't exactly like you flow

00:34:26,290 --> 00:34:30,010
um like I said I could so for this

00:34:29,470 --> 00:34:31,780
pipeline

00:34:30,010 --> 00:34:34,169
if we're talking about the model

00:34:31,780 --> 00:34:38,139
training so I'm doing this in here I

00:34:34,169 --> 00:34:42,639
could also do the the workflow in Azure

00:34:38,139 --> 00:34:45,220
ml um and right now what I'm doing with

00:34:42,639 --> 00:34:48,370
CI CD pipelines is basically just

00:34:45,220 --> 00:34:51,429
triggering all the steps right so all of

00:34:48,370 --> 00:34:53,560
it as relic says it calls a command

00:34:51,429 --> 00:34:57,040
which I can show you that is triggering

00:34:53,560 --> 00:34:58,990
cube flow right to start this pipeline

00:34:57,040 --> 00:35:01,990
with certain parameters and then it

00:34:58,990 --> 00:35:04,120
actually consumes again it consumes the

00:35:01,990 --> 00:35:05,920
model from my email but this is

00:35:04,120 --> 00:35:08,440
basically wiring those together sir oh

00:35:05,920 --> 00:35:10,960
one second I'm basically if you did

00:35:08,440 --> 00:35:12,880
Jenkins and you ran the same command

00:35:10,960 --> 00:35:14,860
that would work just the same right so

00:35:12,880 --> 00:35:20,520
all these tools are kind of like you can

00:35:14,860 --> 00:35:20,520
mix and match between them yeah

00:35:30,069 --> 00:35:35,809
right so it does not and

00:35:32,599 --> 00:35:37,160
basically either Mel is working on

00:35:35,809 --> 00:35:39,130
something that would allow you to

00:35:37,160 --> 00:35:42,229
actually identify model drift

00:35:39,130 --> 00:35:43,939
automatically but right now what I would

00:35:42,229 --> 00:35:45,920
have to do is basically have some type

00:35:43,939 --> 00:35:48,739
of environment in which I test how

00:35:45,920 --> 00:35:50,539
accurate my model is which means for me

00:35:48,739 --> 00:35:53,359
to identify drift I would have to get

00:35:50,539 --> 00:35:56,150
new data with new labels and be able to

00:35:53,359 --> 00:35:59,809
constantly feed it back into it um and

00:35:56,150 --> 00:36:01,069
then have to and again accuracy this is

00:35:59,809 --> 00:36:02,930
another thing that gets kind of

00:36:01,069 --> 00:36:04,579
complicated accuracy is not always a

00:36:02,930 --> 00:36:06,259
single number rate sometimes you have

00:36:04,579 --> 00:36:08,959
multiple things that you need to look at

00:36:06,259 --> 00:36:11,900
which is why I'm saying parts of it

00:36:08,959 --> 00:36:16,549
probably need to be looked at by a human

00:36:11,900 --> 00:36:18,589
before you deploy anything but this

00:36:16,549 --> 00:36:21,109
thing this whole thing like if you if

00:36:18,589 --> 00:36:23,989
you go into this and you deploy this um

00:36:21,109 --> 00:36:26,660
it took us what a couple minutes right

00:36:23,989 --> 00:36:28,130
to get it actually didn't work so you

00:36:26,660 --> 00:36:29,509
don't have to believe me that it takes a

00:36:28,130 --> 00:36:31,279
couple of minutes but anyway let's say

00:36:29,509 --> 00:36:34,249
it takes about 20 minutes because model

00:36:31,279 --> 00:36:36,890
training actually takes a while to do

00:36:34,249 --> 00:36:38,959
and compare that to you trying to do

00:36:36,890 --> 00:36:41,779
this all manually it would be very very

00:36:38,959 --> 00:36:44,059
painful um and again the other thing

00:36:41,779 --> 00:36:45,739
that is kind of hard for demos is that

00:36:44,059 --> 00:36:47,809
some of these models actually do train

00:36:45,739 --> 00:36:49,699
couple hours to try to take couple hours

00:36:47,809 --> 00:36:52,189
to train so it's hard to demo something

00:36:49,699 --> 00:36:55,670
that takes that long I wanted to do one

00:36:52,189 --> 00:36:58,099
with a code search cuz github recently

00:36:55,670 --> 00:37:01,489
in carburation with Microsoft released a

00:36:58,099 --> 00:37:03,469
code search and now it like natural

00:37:01,489 --> 00:37:04,880
language code search which is really

00:37:03,469 --> 00:37:07,670
cool and they have the models and stuff

00:37:04,880 --> 00:37:13,880
but it takes a ton of computer and

00:37:07,670 --> 00:37:19,459
friends like ours so not a good demo yes

00:37:13,880 --> 00:37:21,739
I can check this one is not really big

00:37:19,459 --> 00:37:23,059
but in some cases it's it is really big

00:37:21,739 --> 00:37:25,160
because like if you want to have a

00:37:23,059 --> 00:37:30,910
certain level of accuracy you definitely

00:37:25,160 --> 00:37:30,910
want to have enough label data yeah

00:37:45,100 --> 00:37:51,140
yeah so do any products offer version

00:37:49,070 --> 00:37:53,390
control for datasets so as you know

00:37:51,140 --> 00:37:55,760
actually does kupo I don't believe it

00:37:53,390 --> 00:37:58,160
does correct me if I'm wrong if anybody

00:37:55,760 --> 00:38:00,200
knows but in terms of q4 I'm just

00:37:58,160 --> 00:38:02,660
downloading the data set to the attach

00:38:00,200 --> 00:38:04,880
volume so if I had a new data set I

00:38:02,660 --> 00:38:08,090
would have to have a process around

00:38:04,880 --> 00:38:10,100
version II an ashram l is actually about

00:38:08,090 --> 00:38:12,470
either release or about to release a

00:38:10,100 --> 00:38:20,480
feature that allows you to pin the data

00:38:12,470 --> 00:38:29,930
set to a version okay so I just have a

00:38:20,480 --> 00:38:32,540
couple more slides maybe so punchline an

00:38:29,930 --> 00:38:35,119
EC ICD pipeline's better than no flight

00:38:32,540 --> 00:38:36,800
line I seriously believe that even if

00:38:35,119 --> 00:38:39,200
you know you have some bits and pieces

00:38:36,800 --> 00:38:40,670
that are still not worked out and like I

00:38:39,200 --> 00:38:42,410
said this one for instance doesn't have

00:38:40,670 --> 00:38:44,030
them all a retraining but you can see

00:38:42,410 --> 00:38:46,609
how you could add that if you're just

00:38:44,030 --> 00:38:49,130
continuing to automate and iterate over

00:38:46,609 --> 00:38:51,770
this and it definitely definitely

00:38:49,130 --> 00:38:53,570
supervised your life compared to just

00:38:51,770 --> 00:38:58,400
doing one offs for every single time you

00:38:53,570 --> 00:39:02,630
deploy this and DevOps because change is

00:38:58,400 --> 00:39:05,060
the only constant in life I do want to

00:39:02,630 --> 00:39:08,350
finish on a little bit of a different

00:39:05,060 --> 00:39:12,740
note so a lot of people out there are

00:39:08,350 --> 00:39:15,230
training on you know models and not

00:39:12,740 --> 00:39:17,300
necessarily sort of understanding the

00:39:15,230 --> 00:39:20,210
impacts of this one things that I

00:39:17,300 --> 00:39:23,180
learned while I was getting into this ml

00:39:20,210 --> 00:39:25,850
stuff is bias is not property of humans

00:39:23,180 --> 00:39:32,119
it's a property of information so

00:39:25,850 --> 00:39:34,490
whenever I try to create your ristic sin

00:39:32,119 --> 00:39:38,119
for mation say okay the rule is if I see

00:39:34,490 --> 00:39:39,710
X it means Y bias is created right

00:39:38,119 --> 00:39:42,080
because I'm taking a shortcut

00:39:39,710 --> 00:39:44,990
aggregating data and then I have to

00:39:42,080 --> 00:39:46,340
create them most logical response so a

00:39:44,990 --> 00:39:47,840
lot of this stuff

00:39:46,340 --> 00:39:51,830
that's being released right now is

00:39:47,840 --> 00:39:54,500
already creating for humans because this

00:39:51,830 --> 00:39:56,990
stuff runs in places you wouldn't expect

00:39:54,500 --> 00:39:58,580
this stuff runs for police in terms of

00:39:56,990 --> 00:40:01,790
identifying which neighborhoods are

00:39:58,580 --> 00:40:04,160
likely to you know have crimes on this

00:40:01,790 --> 00:40:07,520
runs for judges for being able to

00:40:04,160 --> 00:40:09,770
identify you know if a person is likely

00:40:07,520 --> 00:40:12,350
to commit another crime or not before

00:40:09,770 --> 00:40:15,500
they you know produce a verdict

00:40:12,350 --> 00:40:18,500
this runs for one of the examples of

00:40:15,500 --> 00:40:22,400
bias there was an ad that someone run

00:40:18,500 --> 00:40:25,630
ran on Facebook and it was for CEO level

00:40:22,400 --> 00:40:29,270
positions and it basically identified

00:40:25,630 --> 00:40:32,300
only men as appropriate for people to

00:40:29,270 --> 00:40:34,730
display the ad to because most of the

00:40:32,300 --> 00:40:37,010
data in the label dataset was that men

00:40:34,730 --> 00:40:39,920
held their CEO positions so we're kind

00:40:37,010 --> 00:40:42,050
of perpetuating that bias right and that

00:40:39,920 --> 00:40:44,090
also so the algorithms for the police

00:40:42,050 --> 00:40:46,880
that I mentioned there was a couple big

00:40:44,090 --> 00:40:49,400
scandals when those were racially biased

00:40:46,880 --> 00:40:51,590
and they were identifying people of

00:40:49,400 --> 00:40:53,630
color or certain zip codes this be more

00:40:51,590 --> 00:40:56,840
likely to be kind of infested and stuff

00:40:53,630 --> 00:40:59,360
like that this stuff may be deciding on

00:40:56,840 --> 00:41:01,580
your next mortgage or stuff like over

00:40:59,360 --> 00:41:04,430
your credit score or things like that

00:41:01,580 --> 00:41:07,670
um so whenever in your company is

00:41:04,430 --> 00:41:10,640
building an ml model just make sure to

00:41:07,670 --> 00:41:13,130
catch up on how this cat could be

00:41:10,640 --> 00:41:16,870
harmful to humans and how this could be

00:41:13,130 --> 00:41:22,640
you know biased against certain

00:41:16,870 --> 00:41:24,120
populations so bill di responsibly and

00:41:22,640 --> 00:41:29,640
thank you

00:41:24,120 --> 00:41:36,880
[Applause]

00:41:29,640 --> 00:41:36,880

YouTube URL: https://www.youtube.com/watch?v=3ZFp25sNtW0


