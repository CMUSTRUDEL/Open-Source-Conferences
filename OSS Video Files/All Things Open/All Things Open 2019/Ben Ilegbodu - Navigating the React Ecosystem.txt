Title: Ben Ilegbodu - Navigating the React Ecosystem
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	React just exploded in popularity. But it’s only a UI library, not a full-fledged framework like Angular, Ember or [insert latest JS framework]. We need to create our own “framework” by picking from the plethora of libraries in the React solar system. But which ones should we choose? Or better yet, which ones do we actually need? Do we need a Flux implementation? What about handling ES6+, bundling and routing? How does it all come together?!1?!

Let’s walk through the tools and helper libraries that surround React. You’ll get the most out of the session with familiarity with React and its concepts, but you don’t need to be an expert. By the end of the session, you’ll have a solid understanding of the ecosystem, know which libraries you should prioritize learning first, and confidently build your own React-based stack.
Captions: 
	00:00:01,530 --> 00:00:12,179
[Music]

00:00:07,970 --> 00:00:20,250
all right hello everyone I am ready to

00:00:12,179 --> 00:00:23,460
get started so if you're new to react

00:00:20,250 --> 00:00:27,029
you might hear that on top of learning

00:00:23,460 --> 00:00:30,210
react right you have to learn Redux you

00:00:27,029 --> 00:00:32,550
have to learn a CSS and j/s solution you

00:00:30,210 --> 00:00:35,340
might have to do server-side rendering

00:00:32,550 --> 00:00:38,219
etc etc etc and you have to learn all

00:00:35,340 --> 00:00:40,010
these things at the same time and if

00:00:38,219 --> 00:00:43,860
you're new it can be quite overwhelming

00:00:40,010 --> 00:00:45,780
because react in itself is different

00:00:43,860 --> 00:00:47,070
development pattern and having to learn

00:00:45,780 --> 00:00:51,270
all these other things at the same time

00:00:47,070 --> 00:00:54,300
can just be can be too much right and UI

00:00:51,270 --> 00:00:58,140
react is just a UI library so you have

00:00:54,300 --> 00:01:01,500
to pick library for fetching data for

00:00:58,140 --> 00:01:03,510
managing state etc etc in order to

00:01:01,500 --> 00:01:07,110
create kind of a full framework that you

00:01:03,510 --> 00:01:09,450
can use but if you how can you pick the

00:01:07,110 --> 00:01:12,270
right thing if you don't you've never

00:01:09,450 --> 00:01:13,950
used it before right so what I want to

00:01:12,270 --> 00:01:16,350
do in this talk is I want to go through

00:01:13,950 --> 00:01:20,040
the different libraries in the react

00:01:16,350 --> 00:01:22,110
ecosystem and first I want to provide my

00:01:20,040 --> 00:01:24,509
opinion on the different categories in

00:01:22,110 --> 00:01:26,880
the system and which I believe you

00:01:24,509 --> 00:01:30,060
should prioritize first in terms of

00:01:26,880 --> 00:01:31,799
learning and then secondly I also want

00:01:30,060 --> 00:01:33,720
to give my opinions on within each

00:01:31,799 --> 00:01:39,119
category which one I think is kind of

00:01:33,720 --> 00:01:40,409
the best option to choose and why so can

00:01:39,119 --> 00:01:42,240
I get a show of hands how many people

00:01:40,409 --> 00:01:42,689
are actually developing and react right

00:01:42,240 --> 00:01:45,450
now

00:01:42,689 --> 00:01:47,369
show of hands okay so about half the

00:01:45,450 --> 00:01:48,990
room or so that's perfect

00:01:47,369 --> 00:01:50,759
for those of you who have been

00:01:48,990 --> 00:01:52,860
developing and react for a while now

00:01:50,759 --> 00:01:56,430
hopefully there'll be a thing or two

00:01:52,860 --> 00:01:58,950
that you'll learn that's a new but if

00:01:56,430 --> 00:02:00,990
not hopefully you'll at least learn for

00:01:58,950 --> 00:02:03,899
me a kind of way to explain your

00:02:00,990 --> 00:02:06,149
rationale for why you chose one library

00:02:03,899 --> 00:02:08,940
over another besides you know I just

00:02:06,149 --> 00:02:13,379
like it better alright so let's just

00:02:08,940 --> 00:02:13,870
jump in but before I want to talk a

00:02:13,379 --> 00:02:17,140
little bit

00:02:13,870 --> 00:02:20,200
about react okay so for those of you

00:02:17,140 --> 00:02:22,659
starting out my suggestion is that you

00:02:20,200 --> 00:02:25,629
learn react and you learn react really

00:02:22,659 --> 00:02:28,360
really well okay and that might sound

00:02:25,629 --> 00:02:31,480
obvious but it's important to focus on

00:02:28,360 --> 00:02:34,269
react and just react first like you have

00:02:31,480 --> 00:02:36,280
to learn how to maintain state properly

00:02:34,269 --> 00:02:38,470
and leverage the virtual Dom or the

00:02:36,280 --> 00:02:40,690
reconciler so that you're not rerender

00:02:38,470 --> 00:02:43,120
in too many times and if you're coming

00:02:40,690 --> 00:02:47,650
from the kind of traditional MVC model

00:02:43,120 --> 00:02:49,720
this like one-way cyclical data flow can

00:02:47,650 --> 00:02:52,720
seem unintuitive at first or

00:02:49,720 --> 00:02:55,599
counterintuitive but then after you get

00:02:52,720 --> 00:02:57,040
through the basics of react there's also

00:02:55,599 --> 00:03:00,010
new features that have been coming out

00:02:57,040 --> 00:03:02,530
the last 18 months or so because react

00:03:00,010 --> 00:03:05,530
continues to evolve so if you're doing

00:03:02,530 --> 00:03:07,090
react 2 years ago and you're now getting

00:03:05,530 --> 00:03:09,519
back into it it's going to be very

00:03:07,090 --> 00:03:12,430
different so there are advanced

00:03:09,519 --> 00:03:15,430
component patterns like presentational

00:03:12,430 --> 00:03:17,709
components versus container components

00:03:15,430 --> 00:03:20,049
you also want to share logic with

00:03:17,709 --> 00:03:22,150
higher-order components or render props

00:03:20,049 --> 00:03:23,440
or now hooks that have just been

00:03:22,150 --> 00:03:26,590
released

00:03:23,440 --> 00:03:28,239
so there are implement error boundaries

00:03:26,590 --> 00:03:31,510
that you can implement in order to catch

00:03:28,239 --> 00:03:34,450
errors that came out in version 16 last

00:03:31,510 --> 00:03:36,579
year and there are fragments and there

00:03:34,450 --> 00:03:38,470
can the context API which were in

00:03:36,579 --> 00:03:40,840
sixteen point two and sixteen point

00:03:38,470 --> 00:03:43,000
three we can now monitor and optimize

00:03:40,840 --> 00:03:45,609
performance which came out in sixteen

00:03:43,000 --> 00:03:48,069
point five there's this new suspense

00:03:45,609 --> 00:03:50,470
system now in a react that allows for

00:03:48,069 --> 00:03:53,650
auto code splitting and that came out in

00:03:50,470 --> 00:03:55,750
sixteen point six and then there are

00:03:53,650 --> 00:03:58,299
hooks that landed in sixteen point eight

00:03:55,750 --> 00:04:00,459
earlier this year which kind of changed

00:03:58,299 --> 00:04:03,940
the way that we do react component

00:04:00,459 --> 00:04:07,090
development so here's the simplest

00:04:03,940 --> 00:04:10,449
example of interactivity and react and

00:04:07,090 --> 00:04:14,169
first I'm going to show using legacy

00:04:10,449 --> 00:04:16,030
classes okay so here we have this little

00:04:14,169 --> 00:04:20,250
counter up here and I just click the

00:04:16,030 --> 00:04:22,719
button right there and it goes up okay I

00:04:20,250 --> 00:04:24,889
have a little line here that says hold

00:04:22,719 --> 00:04:27,919
for oohs and ahhs but

00:04:24,889 --> 00:04:30,650
I guess that didn't happen okay anyway

00:04:27,919 --> 00:04:32,900
so the first thing we do is we

00:04:30,650 --> 00:04:34,879
initialize the state to zero okay

00:04:32,900 --> 00:04:39,129
because the counter started out at zero

00:04:34,879 --> 00:04:41,840
and then next we render out the UI

00:04:39,129 --> 00:04:44,479
specifically the input tag with that

00:04:41,840 --> 00:04:47,419
value from state okay and since the

00:04:44,479 --> 00:04:50,389
initial value was 0 the input field will

00:04:47,419 --> 00:04:53,750
also be 0 when we start off and then

00:04:50,389 --> 00:04:55,250
next we click the button and as a result

00:04:53,750 --> 00:04:57,379
of clicking the button we call the

00:04:55,250 --> 00:05:00,289
handle click method that's in the class

00:04:57,379 --> 00:05:03,500
there and inside of the handle click

00:05:00,289 --> 00:05:06,080
method we call set state which updates

00:05:03,500 --> 00:05:09,199
the state to be the previous value plus

00:05:06,080 --> 00:05:12,250
1 and as a result of calling set state

00:05:09,199 --> 00:05:15,710
what react does is it calls render again

00:05:12,250 --> 00:05:17,750
but now with the new value of state so

00:05:15,710 --> 00:05:21,289
we put this new value back in the input

00:05:17,750 --> 00:05:23,629
field it went from 0 now it's 1 and now

00:05:21,289 --> 00:05:26,659
we have 1 when we click the button and

00:05:23,629 --> 00:05:29,360
although it may seem like calling render

00:05:26,659 --> 00:05:31,759
again will destroy the previous UI and

00:05:29,360 --> 00:05:34,400
display this new UI that's that's

00:05:31,759 --> 00:05:36,650
actually not what happens because of the

00:05:34,400 --> 00:05:38,960
virtual DOM and the optimization that it

00:05:36,650 --> 00:05:41,330
provides so it only updates the actual

00:05:38,960 --> 00:05:43,339
things that's changed so the div doesn't

00:05:41,330 --> 00:05:45,139
update the button doesn't update even

00:05:43,339 --> 00:05:48,979
the input stays the same it just updates

00:05:45,139 --> 00:05:51,529
the value for us and now with hooks

00:05:48,979 --> 00:05:53,389
compared to classes it's a way to do it

00:05:51,529 --> 00:05:56,569
with function components as opposed to

00:05:53,389 --> 00:05:58,759
class components so now with hooks

00:05:56,569 --> 00:06:03,469
there's no real reason to use classes

00:05:58,759 --> 00:06:05,180
anymore with your components but hooks

00:06:03,469 --> 00:06:07,750
are backwards compatible in the sense

00:06:05,180 --> 00:06:12,529
that you can still use classes so

00:06:07,750 --> 00:06:14,509
jumping in we import use state from

00:06:12,529 --> 00:06:16,969
react which is the way that we'll be

00:06:14,509 --> 00:06:19,339
able to manage our state and then

00:06:16,969 --> 00:06:21,740
secondarily we initialize the state

00:06:19,339 --> 00:06:23,419
calling the use state hook and we

00:06:21,740 --> 00:06:26,150
initialize it to 0 that's what we pass

00:06:23,419 --> 00:06:29,210
to you state we get back from you state

00:06:26,150 --> 00:06:33,469
two values in a kind of tuple a two

00:06:29,210 --> 00:06:35,870
element array and that's the value and

00:06:33,469 --> 00:06:38,330
then an update our function which i've

00:06:35,870 --> 00:06:41,180
called set Val

00:06:38,330 --> 00:06:46,580
next we render out the same UI again so

00:06:41,180 --> 00:06:48,949
the input field is value and it'll be

00:06:46,580 --> 00:06:51,710
zero to start off with click the same

00:06:48,949 --> 00:06:54,080
button but instead of calling a method

00:06:51,710 --> 00:06:56,479
called handle click we just call this

00:06:54,080 --> 00:06:58,550
closure called handle click which is

00:06:56,479 --> 00:07:02,090
defined inside of the function itself

00:06:58,550 --> 00:07:05,300
and now we call set Val with the

00:07:02,090 --> 00:07:07,699
previous value plus one and what this

00:07:05,300 --> 00:07:11,210
does is it renders out re-renders the

00:07:07,699 --> 00:07:13,729
function again the whole function but

00:07:11,210 --> 00:07:15,469
with the magic of hooks when you call

00:07:13,729 --> 00:07:17,930
you state again it actually remembers

00:07:15,469 --> 00:07:20,060
their previous value of the state so

00:07:17,930 --> 00:07:22,009
it's not really a create state it's a

00:07:20,060 --> 00:07:24,770
use state and it knows that the value

00:07:22,009 --> 00:07:30,199
was 1 and now that's what we start

00:07:24,770 --> 00:07:32,389
that's the value of Val again and we put

00:07:30,199 --> 00:07:36,289
that back into the input fields there

00:07:32,389 --> 00:07:38,090
and now the value is 1 so that's why

00:07:36,289 --> 00:07:41,569
it's called you state not create state

00:07:38,090 --> 00:07:44,810
and we render it again and the cycle

00:07:41,569 --> 00:07:47,090
continues on and on and on so that was a

00:07:44,810 --> 00:07:48,919
quick little overview of react obviously

00:07:47,090 --> 00:07:52,849
if you haven't used react before it

00:07:48,919 --> 00:07:54,919
wouldn't teach you react but justin has

00:07:52,849 --> 00:07:57,440
given an intro later this afternoon and

00:07:54,919 --> 00:07:59,449
the UI UX design track if you want to

00:07:57,440 --> 00:08:01,880
learn more about react I suggest you

00:07:59,449 --> 00:08:03,650
check out his talk or if you already

00:08:01,880 --> 00:08:05,990
know about react a little bit and you

00:08:03,650 --> 00:08:08,090
want to go a little deeper Anthony is

00:08:05,990 --> 00:08:10,039
going to talk about the virtual Dom and

00:08:08,090 --> 00:08:13,129
kind of how the efficient rendering

00:08:10,039 --> 00:08:15,110
mechanism works so you can check that

00:08:13,129 --> 00:08:18,080
out it's also at the same time as

00:08:15,110 --> 00:08:22,430
Justin's talk but it's down in the front

00:08:18,080 --> 00:08:24,529
end track ok so before we continue can I

00:08:22,430 --> 00:08:27,050
get everybody to stand up please can I

00:08:24,529 --> 00:08:29,330
get everybody to stand up so I realize

00:08:27,050 --> 00:08:31,250
it's after lunch and I already heard

00:08:29,330 --> 00:08:33,380
like somebody yawn at the beginning of

00:08:31,250 --> 00:08:36,199
this talk so what we're gonna do is

00:08:33,380 --> 00:08:38,360
we're gonna do 10 squats it's just like

00:08:36,199 --> 00:08:40,279
this to get the blood flowing to make

00:08:38,360 --> 00:08:42,349
sure that we're awake doing it the whole

00:08:40,279 --> 00:08:44,240
talk alright so let's do it all together

00:08:42,349 --> 00:08:47,899
let's count out loud you can count with

00:08:44,240 --> 00:08:49,899
me alright here we go ready 1 yep we're

00:08:47,899 --> 00:08:56,930
really doing it 2

00:08:49,899 --> 00:09:02,899
three four good job five keep going six

00:08:56,930 --> 00:09:04,100
we're almost there seven eight nine and

00:09:02,899 --> 00:09:07,790
ten

00:09:04,100 --> 00:09:11,720
way to go great job everyone yes

00:09:07,790 --> 00:09:12,620
that was so exciting whoo now we can

00:09:11,720 --> 00:09:17,029
really feel it

00:09:12,620 --> 00:09:19,430
okay all right so I just introduce

00:09:17,029 --> 00:09:19,970
myself formally my name is Ben a LED

00:09:19,430 --> 00:09:22,399
Madhu

00:09:19,970 --> 00:09:25,519
I'm a Christian a husband and a father

00:09:22,399 --> 00:09:27,680
this here is my family that's my wife

00:09:25,519 --> 00:09:28,360
for Sita we've been married for nine

00:09:27,680 --> 00:09:31,670
years

00:09:28,360 --> 00:09:34,640
on the right is my our oldest daughter

00:09:31,670 --> 00:09:37,279
Simone she's five and a half and the

00:09:34,640 --> 00:09:41,149
middle is our daughter Avery she's three

00:09:37,279 --> 00:09:43,730
and on the left is our son Asher he

00:09:41,149 --> 00:09:46,100
turned nine months as of yesterday and

00:09:43,730 --> 00:09:49,790
we are still trying to teach him to

00:09:46,100 --> 00:09:50,959
smile and photos but he will get there

00:09:49,790 --> 00:09:53,510
okay

00:09:50,959 --> 00:09:56,420
we live in the San Francisco Bay Area in

00:09:53,510 --> 00:09:58,880
this small town called Pittsburgh it

00:09:56,420 --> 00:10:01,850
doesn't have an HSN so just Pittsburgh

00:09:58,880 --> 00:10:05,779
with the G I'm also a Google developer

00:10:01,850 --> 00:10:11,149
expert and Microsoft MVP both in web

00:10:05,779 --> 00:10:13,130
technologies so in exactly two weeks I'm

00:10:11,149 --> 00:10:15,560
going to be starting a new role at a

00:10:13,130 --> 00:10:18,410
company called stitch fix as their

00:10:15,560 --> 00:10:20,899
front-end architect which I am super

00:10:18,410 --> 00:10:23,180
excited about stitch fix is a fashion

00:10:20,899 --> 00:10:26,029
retailer combines technology and data

00:10:23,180 --> 00:10:29,060
science with an actual human stylist

00:10:26,029 --> 00:10:33,230
together to deliver a personalized

00:10:29,060 --> 00:10:35,510
shopping experience however technically

00:10:33,230 --> 00:10:38,000
I am still employed by and vibe right at

00:10:35,510 --> 00:10:40,550
the moment okay so it's a little bit

00:10:38,000 --> 00:10:42,290
awkward situation I've already let them

00:10:40,550 --> 00:10:45,940
know so there's not a secret that I'm

00:10:42,290 --> 00:10:49,490
spoiling on stage that would be wrong

00:10:45,940 --> 00:10:51,890
but yes so I'm a principal front-end

00:10:49,490 --> 00:10:54,050
engineer at Eventbrite we're based in

00:10:51,890 --> 00:10:55,459
San Francisco hopefully you've heard of

00:10:54,050 --> 00:10:58,250
Eventbrite because you bought your

00:10:55,459 --> 00:11:00,920
tickets through Eventbrite but we're

00:10:58,250 --> 00:11:03,510
online ticketing and events platform and

00:11:00,920 --> 00:11:06,630
we've been using reacts since 2000

00:11:03,510 --> 00:11:08,910
sixteen when we migrated from backbone

00:11:06,630 --> 00:11:09,480
over to react and we've never looked

00:11:08,910 --> 00:11:12,199
back

00:11:09,480 --> 00:11:14,970
so the genesis of this talk came from

00:11:12,199 --> 00:11:18,649
building a react framework with a

00:11:14,970 --> 00:11:21,029
different tooling then and continuing on

00:11:18,649 --> 00:11:24,180
okay so enough about me let's talk about

00:11:21,029 --> 00:11:26,370
this react ecosystem I'm gonna be

00:11:24,180 --> 00:11:28,589
covering a whole lot of stuff I won't be

00:11:26,370 --> 00:11:30,300
able to teach individual libraries I

00:11:28,589 --> 00:11:33,050
just want to kind of expose you to

00:11:30,300 --> 00:11:36,149
what's out there so that you can

00:11:33,050 --> 00:11:39,209
investigate later and like I said I'll

00:11:36,149 --> 00:11:42,209
give my own preferences so I tweeted out

00:11:39,209 --> 00:11:44,670
a link to the slides already so if you

00:11:42,209 --> 00:11:46,889
go to my Twitter account been in VP you

00:11:44,670 --> 00:11:49,470
can find the slides there you can follow

00:11:46,889 --> 00:11:51,149
along if you so choose because there's

00:11:49,470 --> 00:11:54,779
going to be tons and tons of resources

00:11:51,149 --> 00:11:56,399
as we go through okay so let's talk

00:11:54,779 --> 00:11:59,360
about tooling first that's the first

00:11:56,399 --> 00:12:01,500
category that you have to deal with when

00:11:59,360 --> 00:12:03,959
trying to build your own react

00:12:01,500 --> 00:12:06,269
application and there was a lot of kind

00:12:03,959 --> 00:12:08,430
of that's the biggest complaint around

00:12:06,269 --> 00:12:11,760
react in the beginning was the tooling

00:12:08,430 --> 00:12:14,279
and having to get stuff set up because

00:12:11,760 --> 00:12:17,399
there's a lot of choice in this area so

00:12:14,279 --> 00:12:20,610
I'll start easy though with the react

00:12:17,399 --> 00:12:22,769
developer developer tools so they are

00:12:20,610 --> 00:12:25,709
super handy for debugging your react

00:12:22,769 --> 00:12:28,589
components you can just browse the react

00:12:25,709 --> 00:12:32,880
component tree and you can see what your

00:12:28,589 --> 00:12:35,399
props are what the state is you're able

00:12:32,880 --> 00:12:38,370
to do performance debugging as well as

00:12:35,399 --> 00:12:41,730
of react 16.5 and it's available for

00:12:38,370 --> 00:12:45,120
Chrome Firefox as well as chromium based

00:12:41,730 --> 00:12:49,769
edge not the stuff before but chromium

00:12:45,120 --> 00:12:52,470
based edge so check that out also the

00:12:49,769 --> 00:12:55,470
next thing is bundlers so you're gonna

00:12:52,470 --> 00:12:57,720
have to kind of decide which bundling

00:12:55,470 --> 00:12:59,910
system you're going to use and there's a

00:12:57,720 --> 00:13:03,440
lot of players in this space there's a

00:12:59,910 --> 00:13:05,519
web pack which is the predominant one

00:13:03,440 --> 00:13:08,760
but you have to use a lot of

00:13:05,519 --> 00:13:11,069
configurators and loaders to make it do

00:13:08,760 --> 00:13:14,250
exactly what you want it to do like web

00:13:11,069 --> 00:13:16,529
pack has its own ecosystem itself with

00:13:14,250 --> 00:13:17,280
all its loaders and then there's roll

00:13:16,529 --> 00:13:19,650
roll up

00:13:17,280 --> 00:13:23,000
which works specifically with Atmos

00:13:19,650 --> 00:13:26,070
script modules so import/export type

00:13:23,000 --> 00:13:29,670
modules and it introduced this concept

00:13:26,070 --> 00:13:31,770
of tree-shaking right where in a file

00:13:29,670 --> 00:13:33,720
all of the functions that are exported

00:13:31,770 --> 00:13:36,660
in there only the ones that actually you

00:13:33,720 --> 00:13:40,560
use will get generated or get included

00:13:36,660 --> 00:13:42,840
and a bundle but it transfire transpile

00:13:40,560 --> 00:13:45,510
individual files generally it doesn't

00:13:42,840 --> 00:13:47,610
create one big bundle together so it's

00:13:45,510 --> 00:13:51,510
best used when you're creating a library

00:13:47,610 --> 00:13:54,330
and you want to export it for other

00:13:51,510 --> 00:13:57,300
peoples to consume then there's parcel

00:13:54,330 --> 00:14:01,110
it's fairly new it boasts the blazing

00:13:57,300 --> 00:14:03,120
build times it's zero config so that it

00:14:01,110 --> 00:14:05,300
has lots of functionality out the box as

00:14:03,120 --> 00:14:08,250
opposed to web pack which is nice

00:14:05,300 --> 00:14:11,190
there's pre pack which is another tool

00:14:08,250 --> 00:14:13,800
as well that also boasts fast speeds it

00:14:11,190 --> 00:14:16,080
comes from Facebook and it tries to do

00:14:13,800 --> 00:14:18,330
tries to pre-compile computations that

00:14:16,080 --> 00:14:21,720
other not otherwise would happen at run

00:14:18,330 --> 00:14:23,760
time the website still says it's an

00:14:21,720 --> 00:14:26,339
early development it's been saying it's

00:14:23,760 --> 00:14:28,589
an early development for the last 18

00:14:26,339 --> 00:14:31,020
months or something so I don't know what

00:14:28,589 --> 00:14:32,460
Facebook is actually developing maybe

00:14:31,020 --> 00:14:35,040
they're just using it in-house or

00:14:32,460 --> 00:14:37,890
whatever but that's the case with that

00:14:35,040 --> 00:14:40,470
and then there's a Pico web which is

00:14:37,890 --> 00:14:42,780
relatively new and what it does is it

00:14:40,470 --> 00:14:45,120
does all of the bundling in the browser

00:14:42,780 --> 00:14:48,420
so nothing happens compile-time it all

00:14:45,120 --> 00:14:50,790
follows dependencies in the browser that

00:14:48,420 --> 00:14:53,940
way and it also only works with Ekman

00:14:50,790 --> 00:14:55,950
script modules so I'll say go with web

00:14:53,940 --> 00:14:57,660
pack it hash tree shaking and has a

00:14:55,950 --> 00:15:01,200
whole ecosystem around it lots of

00:14:57,660 --> 00:15:03,540
documentation but I do kind of want to

00:15:01,200 --> 00:15:04,700
try out Pico web and see what that's

00:15:03,540 --> 00:15:07,440
about

00:15:04,700 --> 00:15:09,570
so if you do also want to learn about

00:15:07,440 --> 00:15:12,990
Pico web Drew is having a talk later

00:15:09,570 --> 00:15:15,360
today as well to go into how it works

00:15:12,990 --> 00:15:19,730
and how ACMA Script modules work at a

00:15:15,360 --> 00:15:22,620
hole okay so then there's task runners

00:15:19,730 --> 00:15:24,870
to run build files and command-line

00:15:22,620 --> 00:15:28,770
shell scripts we have grunts we have

00:15:24,870 --> 00:15:29,810
gulp as well which were different ways

00:15:28,770 --> 00:15:32,240
of trying to

00:15:29,810 --> 00:15:34,430
manage all of these scripts and they got

00:15:32,240 --> 00:15:37,580
really huge and became unmanageable and

00:15:34,430 --> 00:15:39,020
then once your web pack and all of its

00:15:37,580 --> 00:15:40,490
loaders were taken care of a lot of the

00:15:39,020 --> 00:15:43,400
stuff that you would normally have to

00:15:40,490 --> 00:15:46,160
use grunt or gulp for so NPM scripts

00:15:43,400 --> 00:15:47,570
became like the default for how to run

00:15:46,160 --> 00:15:50,480
these scripts it really just needed a

00:15:47,570 --> 00:15:53,510
runner and let web pack do the rest or

00:15:50,480 --> 00:15:55,700
your bundler do the rest so if you have

00:15:53,510 --> 00:15:56,750
simple scripts you can use npm scripts

00:15:55,700 --> 00:16:00,260
but if you have something more

00:15:56,750 --> 00:16:02,270
complicated use gulp it uses streams and

00:16:00,260 --> 00:16:05,589
it's more of a functional approach that

00:16:02,270 --> 00:16:08,660
way then there's static analyzers

00:16:05,589 --> 00:16:10,880
alright and this help you find bugs in

00:16:08,660 --> 00:16:13,640
your code before it actually is shipped

00:16:10,880 --> 00:16:17,810
out so yes lint is their original one

00:16:13,640 --> 00:16:20,450
and it was geared towards kind of making

00:16:17,810 --> 00:16:22,190
the codes seem the same across all of

00:16:20,450 --> 00:16:24,800
the developers but now can actually

00:16:22,190 --> 00:16:28,339
catch common errors in your JSX and

00:16:24,800 --> 00:16:31,730
things like that flow and typescript are

00:16:28,339 --> 00:16:33,680
both type checkers so flow exclusively

00:16:31,730 --> 00:16:37,070
does type checking well whereas

00:16:33,680 --> 00:16:40,190
typescript is a type checker and it's a

00:16:37,070 --> 00:16:42,410
superset of JavaScript so typescript

00:16:40,190 --> 00:16:43,910
introduced classes and to introduce

00:16:42,410 --> 00:16:47,470
classes before they're a part of the

00:16:43,910 --> 00:16:51,110
echo script standard and to es2015 and

00:16:47,470 --> 00:16:52,730
it has interfaces and it has n ohms and

00:16:51,110 --> 00:16:55,880
other things which javascript does it

00:16:52,730 --> 00:16:58,250
yet so last year seemed to be like the

00:16:55,880 --> 00:17:00,740
year of typescript everybody was talking

00:16:58,250 --> 00:17:02,960
about subscript everybody was excited

00:17:00,740 --> 00:17:05,929
about typescript and it continued on

00:17:02,960 --> 00:17:07,910
into 2019 as well and typescript is

00:17:05,929 --> 00:17:09,949
getting better and better at handling

00:17:07,910 --> 00:17:11,810
all of the dynamic stuff that we do in

00:17:09,949 --> 00:17:15,410
JavaScript so it's getting easier and

00:17:11,810 --> 00:17:17,870
easier to type things there so and the

00:17:15,410 --> 00:17:20,000
integration with typescript into Visual

00:17:17,870 --> 00:17:23,569
Studio code if use that as your editors

00:17:20,000 --> 00:17:25,429
is awesome so I wouldn't suggest using

00:17:23,569 --> 00:17:27,380
typescript from the beginning if you've

00:17:25,429 --> 00:17:29,780
never used it before but it's definitely

00:17:27,380 --> 00:17:32,630
something that will help you develop in

00:17:29,780 --> 00:17:34,010
your code and catch errors so that's

00:17:32,630 --> 00:17:35,630
everything that you need to do in order

00:17:34,010 --> 00:17:38,630
to get your tooling up to dates in order

00:17:35,630 --> 00:17:41,330
to run a react app even before you write

00:17:38,630 --> 00:17:43,230
any code and that's obviously a lot of

00:17:41,330 --> 00:17:45,120
holes that's a lot of stuff that

00:17:43,230 --> 00:17:49,159
developers don't really want to have to

00:17:45,120 --> 00:17:53,159
do in the beginning so all of that got

00:17:49,159 --> 00:17:54,809
put together by the Facebook team into

00:17:53,159 --> 00:17:57,480
something called create react app which

00:17:54,809 --> 00:17:59,970
just gets your app started with zero

00:17:57,480 --> 00:18:02,250
configuration so you can do a lot of

00:17:59,970 --> 00:18:04,830
configuration with it and it can you can

00:18:02,250 --> 00:18:06,539
still bootstrap it with custom things

00:18:04,830 --> 00:18:08,610
but for the most part you can just run

00:18:06,539 --> 00:18:10,500
it right out of the box and it creates

00:18:08,610 --> 00:18:14,639
an optimized bundle for you for

00:18:10,500 --> 00:18:16,440
production and it has a lot of updated

00:18:14,639 --> 00:18:18,419
infrastructure all you have to do is

00:18:16,440 --> 00:18:22,139
just bump one little package and you'll

00:18:18,419 --> 00:18:23,549
get new stuff that they release there so

00:18:22,139 --> 00:18:25,320
I have a whole bunch of other resources

00:18:23,549 --> 00:18:27,659
that you can check out if you get the

00:18:25,320 --> 00:18:31,169
slides and you can follow those links as

00:18:27,659 --> 00:18:34,230
well ok so now we know how to build an

00:18:31,169 --> 00:18:36,450
app we can write some react code we have

00:18:34,230 --> 00:18:38,669
to make it look good because visuals are

00:18:36,450 --> 00:18:40,769
as equally as important as the

00:18:38,669 --> 00:18:43,440
interaction alright and I could think of

00:18:40,769 --> 00:18:49,399
at least five different ways that we can

00:18:43,440 --> 00:18:54,720
handle styling and react the first one

00:18:49,399 --> 00:18:56,909
is global CSS now you would use global

00:18:54,720 --> 00:18:59,190
CSS if you're migrating to react from

00:18:56,909 --> 00:19:01,649
something else where you already had a

00:18:59,190 --> 00:19:03,360
system that was building the CSS

00:19:01,649 --> 00:19:05,220
somewhere else it was already handling

00:19:03,360 --> 00:19:07,049
that so if you're using something like

00:19:05,220 --> 00:19:09,779
bootstrap or using something like

00:19:07,049 --> 00:19:12,179
foundation it would fall under this as

00:19:09,779 --> 00:19:14,850
well so in the code you would just

00:19:12,179 --> 00:19:17,370
reference the CSS classes that have

00:19:14,850 --> 00:19:19,830
already been defined in your in your

00:19:17,370 --> 00:19:22,230
markup there so the P tag for instance

00:19:19,830 --> 00:19:25,769
has card underscore underscore or

00:19:22,230 --> 00:19:30,090
message as a CSS class and then you

00:19:25,769 --> 00:19:32,159
would write your CSS in this global CSS

00:19:30,090 --> 00:19:34,440
separately that gets bundled separately

00:19:32,159 --> 00:19:39,690
by something else and you would likely

00:19:34,440 --> 00:19:43,380
try to use Bhimsen syntax or oo CS CSS

00:19:39,690 --> 00:19:45,539
in order to prevent namespace collisions

00:19:43,380 --> 00:19:49,350
there because all the classes are going

00:19:45,539 --> 00:19:53,879
to be all together and then similar to

00:19:49,350 --> 00:19:56,760
global CSS is a component CSS so it's

00:19:53,879 --> 00:19:59,100
very similar to global CSS and how

00:19:56,760 --> 00:20:01,260
it's ends up being generated but how you

00:19:59,100 --> 00:20:03,420
imported is that you imported in the

00:20:01,260 --> 00:20:05,070
component itself now you don't do

00:20:03,420 --> 00:20:07,350
anything with the import you're just

00:20:05,070 --> 00:20:10,080
importing it but as a result that means

00:20:07,350 --> 00:20:12,420
the CSS will only be concluded if the

00:20:10,080 --> 00:20:14,640
component gets included in the app so

00:20:12,420 --> 00:20:17,430
you have that little optimization going

00:20:14,640 --> 00:20:19,710
on and in order for this to work your

00:20:17,430 --> 00:20:23,790
bundler like web pack is going to have

00:20:19,710 --> 00:20:26,150
to be able to handle importing CSS or

00:20:23,790 --> 00:20:29,850
sass or whatever CSS system you're using

00:20:26,150 --> 00:20:33,240
so if you create react app or if you use

00:20:29,850 --> 00:20:35,760
webpack there are definitely loaders to

00:20:33,240 --> 00:20:37,980
be able to handle handle that so

00:20:35,760 --> 00:20:39,600
similarly your your code looks the exact

00:20:37,980 --> 00:20:43,290
same in terms of how you're including

00:20:39,600 --> 00:20:45,810
the CSS and then in your component CSS

00:20:43,290 --> 00:20:48,350
the separate file you would still need

00:20:45,810 --> 00:20:51,510
to use some sort of syntax to prevent

00:20:48,350 --> 00:20:54,000
naming collisions like BEM for instance

00:20:51,510 --> 00:20:57,240
because eventually all the CSS is going

00:20:54,000 --> 00:20:59,460
to be put together in one bundle but

00:20:57,240 --> 00:21:02,250
hopefully if you had written global CSS

00:20:59,460 --> 00:21:06,270
you was still already modularized so

00:21:02,250 --> 00:21:11,250
moving to component CSS shouldn't be too

00:21:06,270 --> 00:21:16,880
difficult okay and then the third option

00:21:11,250 --> 00:21:19,380
is CSS modules which are pretty cool so

00:21:16,880 --> 00:21:23,280
there's a lot to like about CSS modules

00:21:19,380 --> 00:21:26,610
actually CSS CSS modules are very

00:21:23,280 --> 00:21:29,340
similar to components CSS except that

00:21:26,610 --> 00:21:33,090
you actually import an object when you

00:21:29,340 --> 00:21:35,870
import the CSS module and that object

00:21:33,090 --> 00:21:41,550
return is a kind of a lookup object of

00:21:35,870 --> 00:21:46,680
class names to generated classes here so

00:21:41,550 --> 00:21:50,340
now instead of the P tag having a class

00:21:46,680 --> 00:21:53,730
name of card underscore underscore

00:21:50,340 --> 00:21:56,460
message it's now this object CSS dot

00:21:53,730 --> 00:22:00,750
message and then what you end up writing

00:21:56,460 --> 00:22:02,490
and the CSS is very vanilla CSS you no

00:22:00,750 --> 00:22:04,770
longer have to worry about name spacing

00:22:02,490 --> 00:22:08,400
you can just write like very simple

00:22:04,770 --> 00:22:10,060
classes like root or title or image like

00:22:08,400 --> 00:22:13,630
imagine just writing simple CS

00:22:10,060 --> 00:22:15,790
that's classes like that that's a

00:22:13,630 --> 00:22:17,410
typical I guess in normal CSS because

00:22:15,790 --> 00:22:20,650
you don't have to worry about collisions

00:22:17,410 --> 00:22:23,320
with CSS modules because it handles the

00:22:20,650 --> 00:22:26,470
collision provision prevention for you

00:22:23,320 --> 00:22:29,950
it will end up generating CSS that looks

00:22:26,470 --> 00:22:32,800
like this with the namespace there and

00:22:29,950 --> 00:22:35,230
the hashes at the end of the CSS class

00:22:32,800 --> 00:22:37,750
name and these are the class names that

00:22:35,230 --> 00:22:39,940
were actually in that lookup that was

00:22:37,750 --> 00:22:43,180
passed to the CSS object when you

00:22:39,940 --> 00:22:44,770
imported it inside of react so similarly

00:22:43,180 --> 00:22:48,460
you'll need a bundle err to be able to

00:22:44,770 --> 00:22:49,960
handle this as well but most of them can

00:22:48,460 --> 00:22:54,310
do that most of the modern ones can do

00:22:49,960 --> 00:22:58,300
that now so so far we've had global CSS

00:22:54,310 --> 00:23:01,780
right we've had a component CSS and CSS

00:22:58,300 --> 00:23:06,520
modules and they all leveraged CSS which

00:23:01,780 --> 00:23:09,520
is cascading style sheets to cascade the

00:23:06,520 --> 00:23:12,880
folks who choose inline styles as the

00:23:09,520 --> 00:23:15,010
option are in the screw CSS cam okay

00:23:12,880 --> 00:23:17,710
they're tired of dealing with

00:23:15,010 --> 00:23:20,050
specificity Wars with like unexpected

00:23:17,710 --> 00:23:22,660
cascade all that stuff they probably

00:23:20,050 --> 00:23:24,010
have bang important all throughout the

00:23:22,660 --> 00:23:27,790
CSS because they don't know why this

00:23:24,010 --> 00:23:29,800
style is not being applied and plus if

00:23:27,790 --> 00:23:33,760
you have lots of dynamic styles that

00:23:29,800 --> 00:23:36,310
depend on the values of props CSS can be

00:23:33,760 --> 00:23:38,650
challenging right and there was a big

00:23:36,310 --> 00:23:40,540
push for inline Styles actually when

00:23:38,650 --> 00:23:43,750
react native came out a few years ago

00:23:40,540 --> 00:23:46,450
because it didn't support CSS all it had

00:23:43,750 --> 00:23:49,150
was inline Styles and there was this

00:23:46,450 --> 00:23:52,780
desire back then to share components

00:23:49,150 --> 00:23:55,330
between react native and react so only

00:23:52,780 --> 00:23:57,280
inline Styles could be used it turned

00:23:55,330 --> 00:24:00,010
out that that desire didn't really work

00:23:57,280 --> 00:24:05,100
out too well but there was still a huge

00:24:00,010 --> 00:24:07,870
push for inline Styles so now the Styles

00:24:05,100 --> 00:24:10,810
object that's being imported is just a

00:24:07,870 --> 00:24:11,640
JavaScript object that looks something

00:24:10,810 --> 00:24:14,470
like this

00:24:11,640 --> 00:24:19,630
that's exported and instead of using

00:24:14,470 --> 00:24:23,100
kabab case like justify - content uses

00:24:19,630 --> 00:24:26,190
camel case justified content in order to

00:24:23,100 --> 00:24:29,720
just name the properties there because

00:24:26,190 --> 00:24:33,029
it relies on the JavaScript CSS Dom API

00:24:29,720 --> 00:24:36,539
the problem though with inline styles

00:24:33,029 --> 00:24:39,600
and react is that it only supports with

00:24:36,539 --> 00:24:42,090
inline styles support so that means no

00:24:39,600 --> 00:24:45,870
media queries that means no pseudo

00:24:42,090 --> 00:24:49,139
selectors no keyframe animations like

00:24:45,870 --> 00:24:51,450
all of those the CSS spec tests continue

00:24:49,139 --> 00:24:53,460
to evolve and has lots of cool things

00:24:51,450 --> 00:24:59,429
that we can do but those are not

00:24:53,460 --> 00:25:02,580
available in inline Styles yeah so new

00:24:59,429 --> 00:25:06,210
libraries popped up to try to solve this

00:25:02,580 --> 00:25:09,000
problem in clever ways and most take

00:25:06,210 --> 00:25:13,169
what's defined like as an inline styles

00:25:09,000 --> 00:25:15,029
but map it to unique CSS classes so you

00:25:13,169 --> 00:25:18,539
kind of get the best of both worlds you

00:25:15,029 --> 00:25:21,830
get JavaScript scoped styling but the

00:25:18,539 --> 00:25:24,120
full expression of CSS which is nice so

00:25:21,830 --> 00:25:26,039
there are a couple of players in this in

00:25:24,120 --> 00:25:30,139
this space the most popular being

00:25:26,039 --> 00:25:32,940
emotion JSS styled components Radium

00:25:30,139 --> 00:25:35,580
emotion is the new yet newest and is

00:25:32,940 --> 00:25:37,889
super popular so I would suggest trying

00:25:35,580 --> 00:25:39,600
that one out it's taken lots of

00:25:37,889 --> 00:25:42,179
learnings from the previous ones that

00:25:39,600 --> 00:25:44,909
have come but really if you're starting

00:25:42,179 --> 00:25:47,279
out I would suggest using components CSS

00:25:44,909 --> 00:25:51,570
where you just import the CSS file and

00:25:47,279 --> 00:25:53,159
write it separately because CSS and j/s

00:25:51,570 --> 00:25:56,850
is a whole new API that you have to

00:25:53,159 --> 00:25:58,740
learn and CSS should be familiar but as

00:25:56,850 --> 00:26:01,950
you start bumping into the problems with

00:25:58,740 --> 00:26:04,289
CSS that I was describing then you may

00:26:01,950 --> 00:26:06,840
want to try out a CSS and J's solution

00:26:04,289 --> 00:26:08,460
like emotion and then once you get

00:26:06,840 --> 00:26:11,759
comfortable with that you can just use a

00:26:08,460 --> 00:26:15,139
motion all the time so a quick example

00:26:11,759 --> 00:26:17,850
of how it looks you can create custom

00:26:15,139 --> 00:26:20,610
components custom styled components with

00:26:17,850 --> 00:26:24,509
emotion so here in order to create the

00:26:20,610 --> 00:26:26,250
title component it's a styled h2 that

00:26:24,509 --> 00:26:29,700
has a font weight or you for your

00:26:26,250 --> 00:26:32,610
message a styled P and then now the

00:26:29,700 --> 00:26:34,769
render of the card component looks very

00:26:32,610 --> 00:26:36,169
very semantic we have a title tag we

00:26:34,769 --> 00:26:39,320
have an image tag we have a

00:26:36,169 --> 00:26:42,710
message tag so that's pretty cool

00:26:39,320 --> 00:26:46,039
there and in the end what gets generated

00:26:42,710 --> 00:26:50,330
out is the same markup same classes it

00:26:46,039 --> 00:26:51,739
has Auto generated class names to make

00:26:50,330 --> 00:26:53,840
sure there are no collisions so it

00:26:51,739 --> 00:26:56,330
actually generates CSS in the end it

00:26:53,840 --> 00:27:00,470
just does a CSS you don't have to do the

00:26:56,330 --> 00:27:02,029
CSS okay so have a bunch of styling

00:27:00,470 --> 00:27:06,889
resources there for you to take a look

00:27:02,029 --> 00:27:09,350
at as well so let's move along let's

00:27:06,889 --> 00:27:13,190
move along to libraries that are needed

00:27:09,350 --> 00:27:15,859
for single page apps and there are like

00:27:13,190 --> 00:27:21,499
two main subcategories for single page

00:27:15,859 --> 00:27:23,779
apps first is data fetching so your

00:27:21,499 --> 00:27:27,080
favorite like batteries included J's

00:27:23,779 --> 00:27:30,649
framework like angular for instance has

00:27:27,080 --> 00:27:33,529
some mechanism for making Ajax requests

00:27:30,649 --> 00:27:36,649
but react doesn't come with one because

00:27:33,529 --> 00:27:39,169
it's just the UI library right so the

00:27:36,649 --> 00:27:42,769
second you want to make a data request

00:27:39,169 --> 00:27:45,649
on a REST API you need to figure out how

00:27:42,769 --> 00:27:49,279
to do it so you could reach for jQuery

00:27:45,649 --> 00:27:51,649
right and called dollar-sign Ajax but

00:27:49,279 --> 00:27:53,269
then once you have date jQuery with you

00:27:51,649 --> 00:27:55,850
you might start using it in ways that

00:27:53,269 --> 00:28:00,080
will be that will conflict with react

00:27:55,850 --> 00:28:02,779
and jQuery is really big so the two main

00:28:00,080 --> 00:28:06,320
options are to use the native fetch API

00:28:02,779 --> 00:28:10,909
that's in the browser or the Axios

00:28:06,320 --> 00:28:14,509
library or Axios or Axio s-- or however

00:28:10,909 --> 00:28:15,830
it's pronounced so the fetch API like I

00:28:14,509 --> 00:28:20,330
said is native to the browser

00:28:15,830 --> 00:28:22,369
it's promise based and you need to

00:28:20,330 --> 00:28:24,889
polyfill it for the browsers that don't

00:28:22,369 --> 00:28:27,320
support it like I 11 if you're still

00:28:24,889 --> 00:28:29,869
supporting are you 11 on the other hand

00:28:27,320 --> 00:28:32,720
you have Axios which actually existed

00:28:29,869 --> 00:28:35,809
before the native fetch API it's also

00:28:32,720 --> 00:28:40,269
promise based and it works in I 11

00:28:35,809 --> 00:28:44,539
because it's a library and it includes

00:28:40,269 --> 00:28:45,950
aliases like get or post or delete so

00:28:44,539 --> 00:28:49,580
you don't have to just make a normal

00:28:45,950 --> 00:28:50,090
fetch request and pass the method but it

00:28:49,580 --> 00:28:52,460
also

00:28:50,090 --> 00:28:55,070
supports cancelling requests as well

00:28:52,460 --> 00:28:58,100
which don't yet exist in the fetch API

00:28:55,070 --> 00:29:00,980
because they don't exist in the promise

00:28:58,100 --> 00:29:03,290
spec yet so I've actually never used

00:29:00,980 --> 00:29:06,590
actually us to be honest I've always

00:29:03,290 --> 00:29:10,520
used the fetch API and have been fine

00:29:06,590 --> 00:29:18,430
with that so a quick example of how the

00:29:10,520 --> 00:29:22,070
fetch API works so in using hooks here

00:29:18,430 --> 00:29:24,950
it's window dot fetch and like I said

00:29:22,070 --> 00:29:27,950
you can polyfill it to work there's also

00:29:24,950 --> 00:29:31,760
a node implementation called node fetch

00:29:27,950 --> 00:29:34,250
and there is a library called isomorphic

00:29:31,760 --> 00:29:37,100
fetch which is a combination of browser

00:29:34,250 --> 00:29:39,110
fetch as well as node fetch together to

00:29:37,100 --> 00:29:41,660
run it in both environments which we'll

00:29:39,110 --> 00:29:43,280
talk about a little bit later so here

00:29:41,660 --> 00:29:46,040
it's just using use effect they use

00:29:43,280 --> 00:29:48,200
effect hook which replaces component did

00:29:46,040 --> 00:29:50,270
mount and component did update and

00:29:48,200 --> 00:29:53,870
that's where we can make our fetch call

00:29:50,270 --> 00:29:57,740
to get the data set the state and then

00:29:53,870 --> 00:30:00,020
do some rendering at the bottom so here

00:29:57,740 --> 00:30:02,750
are some links for you that you could

00:30:00,020 --> 00:30:05,420
check out later and then there's also

00:30:02,750 --> 00:30:06,830
routing so there's making requests and

00:30:05,420 --> 00:30:09,770
then there's routing because you want to

00:30:06,830 --> 00:30:12,470
keep your UI and sync with your URL and

00:30:09,770 --> 00:30:15,650
there are two main libraries here react

00:30:12,470 --> 00:30:19,040
router and reach router react router is

00:30:15,650 --> 00:30:21,440
the oldest one and reach rot routers

00:30:19,040 --> 00:30:25,040
kind of a rethink of how to do routing

00:30:21,440 --> 00:30:27,760
oh it was intended to be accessible by

00:30:25,040 --> 00:30:30,530
default so for instance if you

00:30:27,760 --> 00:30:33,170
transition the page it will provide

00:30:30,530 --> 00:30:35,900
focus to the area of the app that

00:30:33,170 --> 00:30:38,180
changed with the when the URL changed so

00:30:35,900 --> 00:30:41,900
the tab focus is right there which is

00:30:38,180 --> 00:30:43,550
nice and it has you can do relative

00:30:41,900 --> 00:30:47,300
links instead of absolute links like

00:30:43,550 --> 00:30:47,900
react router not found components stuff

00:30:47,300 --> 00:30:51,290
like that

00:30:47,900 --> 00:30:54,170
so it's pretty nice but it turns out

00:30:51,290 --> 00:30:56,240
that the two of them are going to come

00:30:54,170 --> 00:30:58,520
together in the future in the near

00:30:56,240 --> 00:31:02,150
future actually so there are built by

00:30:58,520 --> 00:31:03,710
the same two group of people so they're

00:31:02,150 --> 00:31:06,200
going to merge together

00:31:03,710 --> 00:31:08,510
it's gonna merge together as react

00:31:06,200 --> 00:31:11,600
router so it'll be react router version

00:31:08,510 --> 00:31:14,450
6 or 7 or whatever the case may be but

00:31:11,600 --> 00:31:17,900
it will have an API similar to reach

00:31:14,450 --> 00:31:20,750
router so their suggestion is if you

00:31:17,900 --> 00:31:23,950
have few routes and you're looking to

00:31:20,750 --> 00:31:26,930
pick one right now go with reach router

00:31:23,950 --> 00:31:29,060
because it'll be a similar API and you

00:31:26,930 --> 00:31:30,530
won't have too many routes that you'll

00:31:29,060 --> 00:31:33,350
have to change and you could do it all

00:31:30,530 --> 00:31:35,180
in one commit but if you have lots of

00:31:33,350 --> 00:31:38,930
routes that you're gonna have go ahead

00:31:35,180 --> 00:31:41,990
and go with react router because you'll

00:31:38,930 --> 00:31:44,600
be able to progressively change or

00:31:41,990 --> 00:31:48,500
migrate to the new API because the API

00:31:44,600 --> 00:31:51,590
will be backwards compatible so a quick

00:31:48,500 --> 00:31:54,740
look at reach router here it's familiar

00:31:51,590 --> 00:31:57,230
JSX syntax so you have a router

00:31:54,740 --> 00:32:00,020
component that wraps your whole app and

00:31:57,230 --> 00:32:02,990
then you basically put whatever page

00:32:00,020 --> 00:32:07,010
level or screen components that you have

00:32:02,990 --> 00:32:10,730
the difference is that you provide a

00:32:07,010 --> 00:32:13,520
path prop to the component and the path

00:32:10,730 --> 00:32:15,440
prop is what decides which route gets

00:32:13,520 --> 00:32:19,760
picked so you don't have to have this

00:32:15,440 --> 00:32:22,180
kind of separate router routes thing you

00:32:19,760 --> 00:32:24,470
just bake it all into your component

00:32:22,180 --> 00:32:27,440
hierarchy which is which is pretty nice

00:32:24,470 --> 00:32:32,300
there and then you can link using a

00:32:27,440 --> 00:32:36,980
relative path and stuff like that ok so

00:32:32,300 --> 00:32:39,140
then the fourth area is forms let's be

00:32:36,980 --> 00:32:42,140
real no one no one likes building forms

00:32:39,140 --> 00:32:43,790
right but everything is basically a form

00:32:42,140 --> 00:32:46,400
when you big break it down you're taking

00:32:43,790 --> 00:32:50,030
some user input that you need to take in

00:32:46,400 --> 00:32:50,870
and it's not that forms are themselves

00:32:50,030 --> 00:32:54,620
are hard

00:32:50,870 --> 00:32:57,320
it's that forms with validation is hard

00:32:54,620 --> 00:33:00,530
because the validation requirements are

00:32:57,320 --> 00:33:02,960
always different like sometimes you need

00:33:00,530 --> 00:33:05,540
form level validation errors at the top

00:33:02,960 --> 00:33:08,510
or you need form elements errors that

00:33:05,540 --> 00:33:10,820
are in line with each one sometimes you

00:33:08,510 --> 00:33:12,890
have synchronous validation like a red X

00:33:10,820 --> 00:33:14,660
but then other times you have async

00:33:12,890 --> 00:33:17,720
validation because you have to look up

00:33:14,660 --> 00:33:19,220
if that email has been used before

00:33:17,720 --> 00:33:21,830
sometimes you have validation that

00:33:19,220 --> 00:33:23,899
depends on one field or validation that

00:33:21,830 --> 00:33:26,090
depends on multiple fields you have

00:33:23,899 --> 00:33:29,720
errors that just show up immediately

00:33:26,090 --> 00:33:31,190
like that email is in use error or you

00:33:29,720 --> 00:33:33,740
have errors that should wait until they

00:33:31,190 --> 00:33:35,210
submit the the button it's like so many

00:33:33,740 --> 00:33:38,570
different requirements that you have to

00:33:35,210 --> 00:33:42,110
build into a form and there are a number

00:33:38,570 --> 00:33:46,370
of libraries that are handling this

00:33:42,110 --> 00:33:48,860
the first one is redux form so redux

00:33:46,370 --> 00:33:51,320
form was the original one but the

00:33:48,860 --> 00:33:53,360
problem with it is that you needed redux

00:33:51,320 --> 00:33:56,149
and we haven't actually talked about

00:33:53,360 --> 00:33:57,679
redux now so in order to use redux form

00:33:56,149 --> 00:34:01,429
you now have to pull in this whole new

00:33:57,679 --> 00:34:04,220
library which was unfortunate and the

00:34:01,429 --> 00:34:06,740
library itself was really big too

00:34:04,220 --> 00:34:08,450
because it depended on redux had all

00:34:06,740 --> 00:34:11,899
this functionality that was just baked

00:34:08,450 --> 00:34:14,800
into this big library so Eric the

00:34:11,899 --> 00:34:18,109
designer the developer of redux form

00:34:14,800 --> 00:34:21,950
decided to do a redo and he called it

00:34:18,109 --> 00:34:25,159
react final form because it's the final

00:34:21,950 --> 00:34:29,869
implementation ever of forms and react

00:34:25,159 --> 00:34:33,349
okay ever there's never gonna be a one

00:34:29,869 --> 00:34:35,540
after it so it has no dependencies

00:34:33,349 --> 00:34:38,720
doesn't depend on redux and it has a

00:34:35,540 --> 00:34:41,270
very small footprint and in fact there's

00:34:38,720 --> 00:34:44,179
actually a base library called final

00:34:41,270 --> 00:34:46,429
form which is framework framework

00:34:44,179 --> 00:34:48,980
agnostic so if we're using view or

00:34:46,429 --> 00:34:51,889
angular or any of those it can work

00:34:48,980 --> 00:34:54,319
there as well so it has a whole plugin

00:34:51,889 --> 00:34:58,819
architecture that's how it can then work

00:34:54,319 --> 00:35:01,750
with react and since he had built Redux

00:34:58,819 --> 00:35:04,670
form he had all of these test cases for

00:35:01,750 --> 00:35:07,790
final form so it's been a very heavily

00:35:04,670 --> 00:35:10,640
battle-tested it's about a year or so

00:35:07,790 --> 00:35:15,050
old maybe a little bit more so the

00:35:10,640 --> 00:35:17,869
problem was at the same time Jared the

00:35:15,050 --> 00:35:19,520
creator of formic noticed the same

00:35:17,869 --> 00:35:22,960
problem with Redux form and that

00:35:19,520 --> 00:35:26,270
depended on Redux so at the same time as

00:35:22,960 --> 00:35:28,819
Eric was building react final form Jared

00:35:26,270 --> 00:35:30,310
was a building formic and they basically

00:35:28,819 --> 00:35:32,860
solved the same exact problem

00:35:30,310 --> 00:35:34,660
and the implementations are basically

00:35:32,860 --> 00:35:36,460
more or less the same as well if you

00:35:34,660 --> 00:35:39,550
compare them side to side so there's

00:35:36,460 --> 00:35:41,290
pretty much feature parity so really

00:35:39,550 --> 00:35:43,720
it's just a matter of preference when it

00:35:41,290 --> 00:35:46,600
comes to this one if you've used redux

00:35:43,720 --> 00:35:49,030
form before the API for react final form

00:35:46,600 --> 00:35:52,150
will be very familiar so go ahead and

00:35:49,030 --> 00:35:58,420
use that otherwise you can try out

00:35:52,150 --> 00:36:01,690
formic as well so let's move on to

00:35:58,420 --> 00:36:04,840
testing everybody's favorite favorite

00:36:01,690 --> 00:36:07,060
topic right because we got hate to write

00:36:04,840 --> 00:36:09,150
tests but we love when there's tests

00:36:07,060 --> 00:36:10,960
there when we're factoring something

00:36:09,150 --> 00:36:14,230
especially when we don't know how it

00:36:10,960 --> 00:36:17,710
works right so there are a couple of

00:36:14,230 --> 00:36:21,010
testing utilities that exist the first

00:36:17,710 --> 00:36:24,160
one Cypress is predominantly for

00:36:21,010 --> 00:36:28,150
end-to-end tests so browser tests happy

00:36:24,160 --> 00:36:33,160
path flows it runs in the browser but

00:36:28,150 --> 00:36:35,470
it's not slow or sucky like selenium and

00:36:33,160 --> 00:36:39,400
webdriver okay I couldn't think of a

00:36:35,470 --> 00:36:42,850
better word and but it could also be

00:36:39,400 --> 00:36:45,700
used for as a development platform or to

00:36:42,850 --> 00:36:48,190
do TDD because you know how when you're

00:36:45,700 --> 00:36:49,780
implementing something especially if

00:36:48,190 --> 00:36:51,550
it's like a deep user experience you

00:36:49,780 --> 00:36:53,320
have to click this click this open this

00:36:51,550 --> 00:36:56,320
and then now let's see how it works

00:36:53,320 --> 00:36:58,120
well you can write a cypress test to do

00:36:56,320 --> 00:37:00,040
all that clicking for you so that each

00:36:58,120 --> 00:37:01,480
time you make a change it'll do those

00:37:00,040 --> 00:37:03,130
clicking and then put you in that spot

00:37:01,480 --> 00:37:05,950
and then you can see where your you're

00:37:03,130 --> 00:37:09,640
at so it's a nice work flow as well as

00:37:05,950 --> 00:37:12,070
actually creating tests for you as well

00:37:09,640 --> 00:37:15,100
enzyme unfortunately they don't have a

00:37:12,070 --> 00:37:17,560
logo it's the most common though it's

00:37:15,100 --> 00:37:21,610
existed basically since react existed

00:37:17,560 --> 00:37:25,660
it's created by Airbnb it has a jquery

00:37:21,610 --> 00:37:29,080
like interface for inspecting your

00:37:25,660 --> 00:37:31,990
components and interacting with them so

00:37:29,080 --> 00:37:34,990
we use it at Eventbrite it provides tons

00:37:31,990 --> 00:37:39,070
and tons of utility methods for looking

00:37:34,990 --> 00:37:41,980
at the components without running in a

00:37:39,070 --> 00:37:44,020
browser which is super cool but some of

00:37:41,980 --> 00:37:45,820
those a lot of those utility methods

00:37:44,020 --> 00:37:47,950
they shouldn't be using when running

00:37:45,820 --> 00:37:50,440
unit tests because they ultimately end

00:37:47,950 --> 00:37:55,660
up testing the implementation details

00:37:50,440 --> 00:37:58,540
and it's too easy to write bad tests so

00:37:55,660 --> 00:38:01,480
Kent C Dodds saw that problem and

00:37:58,540 --> 00:38:06,670
decided to create react testing library

00:38:01,480 --> 00:38:09,220
as a narrow narrower more narrow way to

00:38:06,670 --> 00:38:12,130
write unit tests and it's gaining and

00:38:09,220 --> 00:38:13,630
popularity I haven't used it yet but

00:38:12,130 --> 00:38:16,330
it's definitely something that I played

00:38:13,630 --> 00:38:19,750
around with it's seen a little bit I've

00:38:16,330 --> 00:38:22,960
used it in an app and I want to try out

00:38:19,750 --> 00:38:26,500
so it encourages you to write tests kind

00:38:22,960 --> 00:38:28,480
of like your users use your product so

00:38:26,500 --> 00:38:31,750
it's kind of like integration tests in

00:38:28,480 --> 00:38:36,400
that sense but it can be used to run

00:38:31,750 --> 00:38:39,990
unit tests or even end to end tests so

00:38:36,400 --> 00:38:44,230
let's take a quick look at how it works

00:38:39,990 --> 00:38:47,170
so here is just plus the react testing

00:38:44,230 --> 00:38:48,940
library so indicate this case we have a

00:38:47,170 --> 00:38:51,910
button component maybe it's in your

00:38:48,940 --> 00:38:54,970
design system like mo was talking about

00:38:51,910 --> 00:38:57,400
earlier today but buttons have lots of

00:38:54,970 --> 00:38:59,500
configurability so here we just want to

00:38:57,400 --> 00:39:03,190
test that when you click on this button

00:38:59,500 --> 00:39:04,810
it toggles a class that makes it active

00:39:03,190 --> 00:39:08,260
puts it in an active State

00:39:04,810 --> 00:39:11,730
so here we use get test get by test ID

00:39:08,260 --> 00:39:14,470
which comes from react testing library

00:39:11,730 --> 00:39:18,850
when you render out the components and

00:39:14,470 --> 00:39:22,960
then you can find the actual tag because

00:39:18,850 --> 00:39:27,040
it has the test ID and the markup and

00:39:22,960 --> 00:39:29,380
then we just click it like in the the

00:39:27,040 --> 00:39:31,900
unit test no Browser needed which is

00:39:29,380 --> 00:39:34,690
like still like mind-blowing to me that

00:39:31,900 --> 00:39:37,600
we can still do this and run fast tests

00:39:34,690 --> 00:39:39,790
because we don't need a browser but to

00:39:37,600 --> 00:39:42,220
make sure when your unit testing react

00:39:39,790 --> 00:39:45,010
components you only want to test the

00:39:42,220 --> 00:39:48,580
logic that your component is doing via

00:39:45,010 --> 00:39:51,100
its public API so you should never test

00:39:48,580 --> 00:39:53,290
what the value in State is or private

00:39:51,100 --> 00:39:56,860
methods or anything like that you want

00:39:53,290 --> 00:39:57,700
to test what's rendered and then what if

00:39:56,860 --> 00:39:59,740
you pass it any

00:39:57,700 --> 00:40:01,930
callback functions to it how they're

00:39:59,740 --> 00:40:05,080
called and when they're called and how

00:40:01,930 --> 00:40:08,980
many times they're called all right so

00:40:05,080 --> 00:40:13,480
gleb the VP of engineering at Cypress is

00:40:08,980 --> 00:40:15,580
given a talk later today right here in

00:40:13,480 --> 00:40:17,680
this room about Cypress and how it can

00:40:15,580 --> 00:40:20,140
work so if you're interested in testing

00:40:17,680 --> 00:40:22,840
well I mean no one's really interested

00:40:20,140 --> 00:40:25,450
in testing but if you're interested in

00:40:22,840 --> 00:40:28,780
knowing how to do testing better I would

00:40:25,450 --> 00:40:33,240
say go to his talk today and I've got

00:40:28,780 --> 00:40:39,910
lots of resources up there as well okay

00:40:33,240 --> 00:40:43,050
so at this point we have all we need to

00:40:39,910 --> 00:40:45,700
create a production level quality app

00:40:43,050 --> 00:40:48,370
because we talked a little bit about

00:40:45,700 --> 00:40:50,800
react we talked about the tooling

00:40:48,370 --> 00:40:53,500
basically create react app which helps

00:40:50,800 --> 00:40:56,590
build production level builds we talked

00:40:53,500 --> 00:40:59,920
about styling solutions single page apps

00:40:56,590 --> 00:41:02,590
stuff like fetch and routing talked

00:40:59,920 --> 00:41:06,160
about forms and how to validate forms

00:41:02,590 --> 00:41:07,720
and then testing as well but I have a

00:41:06,160 --> 00:41:12,460
little bit more that I want to cover

00:41:07,720 --> 00:41:16,360
because we're moving now into the needs

00:41:12,460 --> 00:41:19,090
of like larger scale applications okay

00:41:16,360 --> 00:41:21,280
so maybe your app might not need it

00:41:19,090 --> 00:41:23,380
right now but if it grows it gets bigger

00:41:21,280 --> 00:41:28,770
you have more people on your team that

00:41:23,380 --> 00:41:32,200
might be necessary okay so now

00:41:28,770 --> 00:41:35,520
everybody's favorite topic right so up

00:41:32,200 --> 00:41:38,020
until this point we've been implicitly

00:41:35,520 --> 00:41:41,290
storing all the data the application

00:41:38,020 --> 00:41:43,780
data in react components and maybe

00:41:41,290 --> 00:41:46,000
possibly using the context API to pass

00:41:43,780 --> 00:41:49,450
things down so we didn't use have prop

00:41:46,000 --> 00:41:52,510
jelling problems but but once the data

00:41:49,450 --> 00:41:54,370
becomes too complex or you have too many

00:41:52,510 --> 00:41:58,120
components that want to update the data

00:41:54,370 --> 00:42:02,140
and listen to the data and and modify

00:41:58,120 --> 00:42:04,630
the data then and only then maybe should

00:42:02,140 --> 00:42:09,370
you use a data data management library

00:42:04,630 --> 00:42:11,050
and look we're talking about Redux at

00:42:09,370 --> 00:42:12,790
step 6

00:42:11,050 --> 00:42:16,480
so it's not reactant redux and you got

00:42:12,790 --> 00:42:19,480
to do it together but now at this part

00:42:16,480 --> 00:42:22,240
so we're talking about Redux so most

00:42:19,480 --> 00:42:25,120
people use Redux to be honest and

00:42:22,240 --> 00:42:27,370
there's been a huge backlash on Redux I

00:42:25,120 --> 00:42:30,490
know the maintainer z' feel that as well

00:42:27,370 --> 00:42:32,620
but I think it's I think it's mainly

00:42:30,490 --> 00:42:34,660
because people are using redux before

00:42:32,620 --> 00:42:37,090
they really need it and they're using

00:42:34,660 --> 00:42:39,840
Redux without knowing how it really

00:42:37,090 --> 00:42:42,280
works or the purpose is trying to serve

00:42:39,840 --> 00:42:44,260
so if you had a library like a Redux

00:42:42,280 --> 00:42:45,370
forum that made you use Redux and all of

00:42:44,260 --> 00:42:49,780
a sudden you're adding it when you

00:42:45,370 --> 00:42:52,570
didn't really need it so redux basically

00:42:49,780 --> 00:42:56,850
uses the concept of reducers to update

00:42:52,570 --> 00:42:59,170
your state and you generate new state by

00:42:56,850 --> 00:43:01,240
making a copy of your state and then

00:42:59,170 --> 00:43:04,330
mutating in that state and returning

00:43:01,240 --> 00:43:08,890
that back so amid ability is key with

00:43:04,330 --> 00:43:12,280
Redux and it helps you kind of separate

00:43:08,890 --> 00:43:15,760
the update of your data from the thing

00:43:12,280 --> 00:43:18,160
that changes the data which is kind of

00:43:15,760 --> 00:43:20,770
helpful so mob X on the other hand

00:43:18,160 --> 00:43:24,730
instead of it being immutable in a sense

00:43:20,770 --> 00:43:27,760
it uses observables that subscribe to

00:43:24,730 --> 00:43:30,520
mutations of this state so you get to

00:43:27,760 --> 00:43:32,980
change the state with normal methods

00:43:30,520 --> 00:43:35,350
like if you do array dot push then it

00:43:32,980 --> 00:43:38,920
will listen to that happening and then

00:43:35,350 --> 00:43:40,900
it will update the state that way but

00:43:38,920 --> 00:43:44,020
really it's quite possible that we won't

00:43:40,900 --> 00:43:48,330
need redux or mob X like with the

00:43:44,020 --> 00:43:51,370
combination of react context plus hooks

00:43:48,330 --> 00:43:55,810
and the use reducer we won't even need

00:43:51,370 --> 00:43:58,360
to use those two so kind of weary reach

00:43:55,810 --> 00:44:01,360
for Redux when we want to easily get our

00:43:58,360 --> 00:44:05,050
data to multiple components well the

00:44:01,360 --> 00:44:08,770
react context API can do that or we want

00:44:05,050 --> 00:44:11,230
to abstract manipulating our data so

00:44:08,770 --> 00:44:13,540
that it can be easily testable with

00:44:11,230 --> 00:44:18,880
reducers well they use a reducer hook

00:44:13,540 --> 00:44:21,220
does that so we may not even need those

00:44:18,880 --> 00:44:22,540
redux or anything like that moving

00:44:21,220 --> 00:44:26,500
forward

00:44:22,540 --> 00:44:31,480
but just a quick look at Redux here is

00:44:26,500 --> 00:44:34,380
an example of a to Do's State so I have

00:44:31,480 --> 00:44:37,540
this action I want to add a to-do item

00:44:34,380 --> 00:44:42,280
instead of pushing onto it I make a copy

00:44:37,540 --> 00:44:47,140
of it using the spread operator and then

00:44:42,280 --> 00:44:50,440
I add the new item that way but making

00:44:47,140 --> 00:44:54,450
copies of objects especially if they're

00:44:50,440 --> 00:44:57,850
big have a lot of data or you have small

00:44:54,450 --> 00:45:02,050
memory constraints at scale can be a

00:44:57,850 --> 00:45:04,950
problem so immutability libraries popped

00:45:02,050 --> 00:45:07,750
up to try to solve this problem so

00:45:04,950 --> 00:45:10,090
immutable j/s was the big player in this

00:45:07,750 --> 00:45:13,060
space it's yet another library from

00:45:10,090 --> 00:45:15,730
Facebook I've only used it a little bit

00:45:13,060 --> 00:45:18,490
because the API was was pretty

00:45:15,730 --> 00:45:21,910
cumbersome it creates entirely new

00:45:18,490 --> 00:45:25,630
objects like collections dictionaries

00:45:21,910 --> 00:45:27,850
instead of arrays or objects and I find

00:45:25,630 --> 00:45:30,250
myself constantly switching back and

00:45:27,850 --> 00:45:33,850
forth between immutable objects and

00:45:30,250 --> 00:45:35,950
native JavaScript objects because in

00:45:33,850 --> 00:45:38,200
reacts I don't care about immutable

00:45:35,950 --> 00:45:40,060
objects like my react is written such

00:45:38,200 --> 00:45:43,000
that I'm never mutating the data anyway

00:45:40,060 --> 00:45:45,520
so I just want an array a native array

00:45:43,000 --> 00:45:49,630
or native object I really don't want

00:45:45,520 --> 00:45:51,610
immutable in my react components so

00:45:49,630 --> 00:45:56,380
seamless immutable tried to solve that

00:45:51,610 --> 00:45:57,820
problem it has it still has special data

00:45:56,380 --> 00:45:59,890
structures but they're backwards

00:45:57,820 --> 00:46:01,900
compatible so they work just like arrays

00:45:59,890 --> 00:46:04,030
or objects they just give additional

00:46:01,900 --> 00:46:08,320
functionality and prevent you from

00:46:04,030 --> 00:46:13,540
actually mutating the objects but then

00:46:08,320 --> 00:46:16,960
Emer a relatively newer library took a

00:46:13,540 --> 00:46:19,770
completely different approach so they

00:46:16,960 --> 00:46:23,590
don't use new separate objects at all

00:46:19,770 --> 00:46:26,140
instead what you have is that it

00:46:23,590 --> 00:46:29,770
provides this helper function called

00:46:26,140 --> 00:46:32,110
produce and you give produced the object

00:46:29,770 --> 00:46:35,020
that you want to mutate so here we're

00:46:32,110 --> 00:46:36,040
passing state as the first parameter to

00:46:35,020 --> 00:46:38,290
produce

00:46:36,040 --> 00:46:40,540
and then a function that performs the

00:46:38,290 --> 00:46:43,090
mutation that you want here's the

00:46:40,540 --> 00:46:45,610
anonymous function so that function

00:46:43,090 --> 00:46:49,180
takes a parameter or takes an argument

00:46:45,610 --> 00:46:51,010
called a draft and on that draft object

00:46:49,180 --> 00:46:54,820
you can do your normal mutations like

00:46:51,010 --> 00:46:58,000
push or delete or whatever you want to

00:46:54,820 --> 00:47:01,840
do in order to solve your data

00:46:58,000 --> 00:47:05,020
transformation problem and then what

00:47:01,840 --> 00:47:07,360
produce returns is the new value of your

00:47:05,020 --> 00:47:10,080
state because it batches up all those

00:47:07,360 --> 00:47:12,630
manipulations and to something that is

00:47:10,080 --> 00:47:14,920
optimized and then returns back to array

00:47:12,630 --> 00:47:18,070
so you can actually do some fanciness

00:47:14,920 --> 00:47:21,160
with currying with produce and you can

00:47:18,070 --> 00:47:22,750
actually make it your reducer but you

00:47:21,160 --> 00:47:27,880
can check out the docs to figure out how

00:47:22,750 --> 00:47:33,160
all that stuff works okay so let me wrap

00:47:27,880 --> 00:47:35,560
up real quick so server rendering is

00:47:33,160 --> 00:47:40,840
important if you have SEO concerns or

00:47:35,560 --> 00:47:43,420
performance concerns here and you can

00:47:40,840 --> 00:47:46,630
server-side render with next j/s or a

00:47:43,420 --> 00:47:49,390
Gatsby for instance so next yes being a

00:47:46,630 --> 00:47:53,080
full framework Gatsby being a static

00:47:49,390 --> 00:47:56,500
site generator and you can actually use

00:47:53,080 --> 00:47:58,450
node and roll your own together but if

00:47:56,500 --> 00:48:00,490
your back end is not node then you can

00:47:58,450 --> 00:48:03,490
have there's more work that you have to

00:48:00,490 --> 00:48:05,320
do and this video that I have here of a

00:48:03,490 --> 00:48:08,830
talk that I gave two years ago kinds of

00:48:05,320 --> 00:48:11,860
explains it all ok and in the last

00:48:08,830 --> 00:48:14,560
section is API optimization and having

00:48:11,860 --> 00:48:16,390
to deal with rest problems and making

00:48:14,560 --> 00:48:19,510
lots of calls

00:48:16,390 --> 00:48:21,010
there's graph QL and Falkor which are

00:48:19,510 --> 00:48:25,110
two different competing ones from

00:48:21,010 --> 00:48:29,710
Netflix and Facebook and graph QL has

00:48:25,110 --> 00:48:33,250
two implementations relay Apollo if you

00:48:29,710 --> 00:48:37,390
find yourself with data request problems

00:48:33,250 --> 00:48:43,030
you can try out Apollo to solve that as

00:48:37,390 --> 00:48:46,420
well okay so that was a lot running out

00:48:43,030 --> 00:48:48,610
of time I know for a fact that you

00:48:46,420 --> 00:48:49,420
didn't pay attention to everything like

00:48:48,610 --> 00:48:51,460
that's just

00:48:49,420 --> 00:48:53,470
reality you probably were on slack or

00:48:51,460 --> 00:48:56,500
text or anything or you fell asleep

00:48:53,470 --> 00:49:00,280
because I made you do squats but here's

00:48:56,500 --> 00:49:02,230
a quick TL DR okay so for a react

00:49:00,280 --> 00:49:04,930
obviously you have react tooling use

00:49:02,230 --> 00:49:07,270
create react app for styling you can use

00:49:04,930 --> 00:49:12,180
emotion but maybe try out components ESS

00:49:07,270 --> 00:49:16,030
first for routing go for reach router

00:49:12,180 --> 00:49:17,410
react final form performs testing use

00:49:16,030 --> 00:49:20,890
react testing library because it's

00:49:17,410 --> 00:49:25,480
pretty nice app data management try

00:49:20,890 --> 00:49:29,020
using the context API and hooks instead

00:49:25,480 --> 00:49:31,630
of reaching for redux or mob X and for

00:49:29,020 --> 00:49:33,400
server-side rendering use next Jas

00:49:31,630 --> 00:49:38,550
because it's a nice server-side library

00:49:33,400 --> 00:49:41,530
and then last Apollo for data things

00:49:38,550 --> 00:49:43,600
okay so that was it I flooded you with

00:49:41,530 --> 00:49:45,310
lots of information like I said the

00:49:43,600 --> 00:49:47,440
slides are online so you can check them

00:49:45,310 --> 00:49:48,970
out you can visit my website or Twitter

00:49:47,440 --> 00:49:51,130
or things like that

00:49:48,970 --> 00:49:52,660
I really appreciate you all coming to

00:49:51,130 --> 00:49:56,160
the talk there were 20 other ones you

00:49:52,660 --> 00:49:56,160
could go to so thanks

00:49:56,370 --> 00:50:06,219

YouTube URL: https://www.youtube.com/watch?v=36pyoPW0-iU


