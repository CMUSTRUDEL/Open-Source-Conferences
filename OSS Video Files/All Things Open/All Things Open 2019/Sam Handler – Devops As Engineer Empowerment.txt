Title: Sam Handler – Devops As Engineer Empowerment
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	We’ll start with a familiar situation: the “DevOps team” has finally finished migrating a “legacy” deployment pipeline to a buzzworthy new containerized application delivery platform. Backs are slapped, champagne poured. Then, a few weeks later, an engineer deploys while the DevOps team is at lunch. The site crashes — the app can’t boot without a new environment variable. Alerts fire. The engineer remembers something about using a CLI for environment variables. But wait, what’s a kubeconfig? Fifteen minutes pass. The DevOps lead runs into the room panting, a slice of pizza still in hand. The engineer spots him and tells him what the application needs. The lead unlocks his computer and runs a command to get the site back up. Phew.

This outage is just one example of how DevOps initiatives can actually end up disempowering engineers, while DevOps ought to be doing the opposite. Fortunately, if you center your DevOps practice around engineer empowerment, you can avoid sticky situations and calmly enjoy your pizza. You’ll reap lots of rewards besides uptime! Here’s what to do:

Educate engineers about the infrastructure their application runs on and the mechanics of a deployment.
Give engineers appropriate privileges. Architect your systems such that they have access to what they need without endangering the health of the platform.
Make engineers responsible for the health of the platform, and give them the tools necessary to meet this responsibility.
Provide all engineers with an understandable view into the health and performance of the platform.
Supply tools and training for engineers to measure performance characteristics from their code.
Equip the team with production-like playground environments.
Captions: 
	00:00:06,170 --> 00:00:15,389
so my name is Sam handler I run a small

00:00:12,420 --> 00:00:17,640
DevOps consultancy when you have a small

00:00:15,389 --> 00:00:20,400
consultancy you can call it a boutique

00:00:17,640 --> 00:00:23,910
consultancy so it is a boutique DevOps

00:00:20,400 --> 00:00:27,480
consultancy I'm on Twitter at plant fan

00:00:23,910 --> 00:00:29,550
Sam people usually ask me what my

00:00:27,480 --> 00:00:32,579
favorite plant is and it's a ponderosa

00:00:29,550 --> 00:00:38,250
which is how I named the consultancy so

00:00:32,579 --> 00:00:42,000
here we are I want to start by telling a

00:00:38,250 --> 00:00:43,649
familiar story and do this thing that

00:00:42,000 --> 00:00:45,539
you're not supposed to do which is read

00:00:43,649 --> 00:00:49,289
from a sheet of paper during your

00:00:45,539 --> 00:00:51,360
presentation so after getting an

00:00:49,289 --> 00:00:53,100
ultimatum from the VP of Engineering to

00:00:51,360 --> 00:00:55,320
finish this container thing by the end

00:00:53,100 --> 00:00:57,030
of the quarter the DevOps team went

00:00:55,320 --> 00:00:59,129
heads down for a couple of months and

00:00:57,030 --> 00:01:00,989
finally deployed a legacy app onto the

00:00:59,129 --> 00:01:03,480
new platform kubernetes perhaps you've

00:01:00,989 --> 00:01:05,670
heard of it backs are slap champagne is

00:01:03,480 --> 00:01:07,770
poured the team finally has the deploy

00:01:05,670 --> 00:01:09,299
button that they've dreamed up after

00:01:07,770 --> 00:01:12,060
years of weekly releases they're now

00:01:09,299 --> 00:01:14,369
releasing multiple times a day mindful

00:01:12,060 --> 00:01:15,869
of meeting this finished the container

00:01:14,369 --> 00:01:18,119
thing deadline set by the VP of

00:01:15,869 --> 00:01:19,500
engineering two quarters ago the DevOps

00:01:18,119 --> 00:01:21,439
team uses its learnings to start

00:01:19,500 --> 00:01:24,030
kubernetes izing another application

00:01:21,439 --> 00:01:25,619
then a few weeks later an engineer

00:01:24,030 --> 00:01:28,200
deploys the first app while the entire

00:01:25,619 --> 00:01:30,090
DevOps team is out at lunch the site

00:01:28,200 --> 00:01:32,970
worked fine locally but wait for it

00:01:30,090 --> 00:01:34,950
crashed in production the app boots but

00:01:32,970 --> 00:01:37,290
500s on every request doing a missing

00:01:34,950 --> 00:01:38,520
environment variable the dev ops team

00:01:37,290 --> 00:01:40,290
didn't have the time to build out a

00:01:38,520 --> 00:01:41,909
fully functioning QA environment or

00:01:40,290 --> 00:01:44,340
developers would surely have caught the

00:01:41,909 --> 00:01:45,899
error the on-call DevOps engineers phone

00:01:44,340 --> 00:01:47,670
starts blowing up in the alerts Channel

00:01:45,899 --> 00:01:49,320
and slack goes nuts the application

00:01:47,670 --> 00:01:51,119
engineer that deployed tries rolling

00:01:49,320 --> 00:01:52,770
back but the deployment pipeline always

00:01:51,119 --> 00:01:54,710
grabs the latest version of the app from

00:01:52,770 --> 00:01:56,880
the repository so that's not an option

00:01:54,710 --> 00:01:58,530
they revert the pull request and wait

00:01:56,880 --> 00:02:00,689
for a docker image to bake the rolled

00:01:58,530 --> 00:02:03,000
back version so that they can deploy it

00:02:00,689 --> 00:02:05,060
an engineer remembered something about

00:02:03,000 --> 00:02:08,280
using a CLI for environment variables

00:02:05,060 --> 00:02:10,020
but wait what scoop control again on

00:02:08,280 --> 00:02:12,330
slack a DevOps engineer still at lunch

00:02:10,020 --> 00:02:13,330
suggests a command for the engineer to

00:02:12,330 --> 00:02:15,310
run to roll

00:02:13,330 --> 00:02:17,470
things back the application engineer

00:02:15,310 --> 00:02:18,790
runs it but gets a 403 he doesn't have

00:02:17,470 --> 00:02:21,220
permission to make this change

00:02:18,790 --> 00:02:24,460
five minutes pass you ever notice that

00:02:21,220 --> 00:02:26,350
docker builds take a while and as the

00:02:24,460 --> 00:02:28,090
docker build finally finishes the DevOps

00:02:26,350 --> 00:02:30,370
lead runs into the room panting the

00:02:28,090 --> 00:02:32,080
crust of the pizza slice in hand the

00:02:30,370 --> 00:02:34,090
engineer spots him and tells him the

00:02:32,080 --> 00:02:36,340
environment variable to set the lead

00:02:34,090 --> 00:02:39,520
unlocks his computer and runs a command

00:02:36,340 --> 00:02:44,040
to get the site back up the docker build

00:02:39,520 --> 00:02:46,810
has finished by this point and seen so

00:02:44,040 --> 00:02:49,420
how do we avoid this situation these

00:02:46,810 --> 00:02:52,480
dogs have gotten into the trash that's a

00:02:49,420 --> 00:02:54,640
sticky situation I don't want to clarify

00:02:52,480 --> 00:02:57,220
that I'm like not I'm not above this

00:02:54,640 --> 00:02:59,320
kind of thing this is an amalgamation of

00:02:57,220 --> 00:03:02,800
several different catastrophes that I

00:02:59,320 --> 00:03:07,270
have participated in or caused directly

00:03:02,800 --> 00:03:08,650
or indirectly over time I have come to

00:03:07,270 --> 00:03:10,209
believe that the core problem in this

00:03:08,650 --> 00:03:12,580
type of situation is that the

00:03:10,209 --> 00:03:16,200
application engineers were not fully

00:03:12,580 --> 00:03:18,370
empowered looking at the story

00:03:16,200 --> 00:03:21,340
reflecting on it there is no rollback

00:03:18,370 --> 00:03:22,900
mechanism the DevOps team got the alerts

00:03:21,340 --> 00:03:25,420
rather than the application engineers

00:03:22,900 --> 00:03:27,040
the engineers were not properly educated

00:03:25,420 --> 00:03:29,500
on the new deployment strategy and

00:03:27,040 --> 00:03:32,440
because the DevOps team was heads down

00:03:29,500 --> 00:03:33,970
on like kubernetes sizing other

00:03:32,440 --> 00:03:37,480
applications they didn't really have

00:03:33,970 --> 00:03:40,030
time to build that QA environment but

00:03:37,480 --> 00:03:42,519
overall the application engineers didn't

00:03:40,030 --> 00:03:46,660
have the power to take responsibility

00:03:42,519 --> 00:03:49,810
for the issue so I would like to suggest

00:03:46,660 --> 00:03:51,580
that the solution to this problem or a

00:03:49,810 --> 00:03:54,489
philosophy that could have helped

00:03:51,580 --> 00:03:57,430
prevent it would be that the DevOps team

00:03:54,489 --> 00:04:00,400
should try to share responsibility by

00:03:57,430 --> 00:04:02,380
empowering developers shared

00:04:00,400 --> 00:04:04,930
responsibility can look like a lot of

00:04:02,380 --> 00:04:06,670
things but in some I would say that

00:04:04,930 --> 00:04:08,739
means that all engineers are responsible

00:04:06,670 --> 00:04:12,840
for the availability stability and

00:04:08,739 --> 00:04:15,690
performance of the application and that

00:04:12,840 --> 00:04:18,609
requires a lot of different things

00:04:15,690 --> 00:04:20,769
giving developers tools access and

00:04:18,609 --> 00:04:22,390
education necessary to maintain and

00:04:20,769 --> 00:04:25,840
change the application and platform

00:04:22,390 --> 00:04:27,220
safely and I don't want to say like hey

00:04:25,840 --> 00:04:29,230
like if this is your new

00:04:27,220 --> 00:04:32,560
philosophy it's gonna be super easy in

00:04:29,230 --> 00:04:34,360
fact this is quite a lot of work sharing

00:04:32,560 --> 00:04:36,010
responsibilities is like an attitude a

00:04:34,360 --> 00:04:38,140
philosophy that you can put on a slide

00:04:36,010 --> 00:04:40,450
and give a presentation about but it's

00:04:38,140 --> 00:04:42,670
also something that requires DevOps

00:04:40,450 --> 00:04:47,710
tooling and a lot of work to make that

00:04:42,670 --> 00:04:51,520
tooling usable and responsible so how do

00:04:47,710 --> 00:04:54,610
you do that I would suggest that you get

00:04:51,520 --> 00:04:55,780
out of the superhero business the person

00:04:54,610 --> 00:04:57,130
that raised their hand that was like

00:04:55,780 --> 00:04:58,660
yeah I'm the one that stuck doing all

00:04:57,130 --> 00:05:01,600
the DevOps stuff because I'm the one

00:04:58,660 --> 00:05:04,900
that has the keys that person is

00:05:01,600 --> 00:05:07,150
probably in the superhero business but

00:05:04,900 --> 00:05:10,480
I've broken it down into four different

00:05:07,150 --> 00:05:13,030
points which would be being the only

00:05:10,480 --> 00:05:15,130
team or person with proper visibility

00:05:13,030 --> 00:05:17,670
into system health being the only person

00:05:15,130 --> 00:05:20,890
or team that knows how to fix

00:05:17,670 --> 00:05:23,110
catastrophic ly broken systems being the

00:05:20,890 --> 00:05:25,810
only one that is responsible for fixing

00:05:23,110 --> 00:05:28,030
catastrophic ly broken systems or being

00:05:25,810 --> 00:05:32,200
the one that the only one that has

00:05:28,030 --> 00:05:34,330
permission to do those things and DevOps

00:05:32,200 --> 00:05:38,500
the DevOps team can't really be the only

00:05:34,330 --> 00:05:40,240
fixer it's just not gonna work you end

00:05:38,500 --> 00:05:42,060
up losing a lot of sleep and burning out

00:05:40,240 --> 00:05:44,650
and going to another job with a more

00:05:42,060 --> 00:05:47,680
reasonable on-call schedule that kind of

00:05:44,650 --> 00:05:51,100
thing so if you take one thing from this

00:05:47,680 --> 00:05:54,040
talk I would say you should just ask

00:05:51,100 --> 00:05:55,930
yourself how do I get out of the

00:05:54,040 --> 00:05:57,220
superhero business or if you're not on

00:05:55,930 --> 00:05:58,810
the DevOps team and you're a front-end

00:05:57,220 --> 00:06:02,230
engineer or you're a back-end engineer

00:05:58,810 --> 00:06:03,940
and you're like why like you know why

00:06:02,230 --> 00:06:05,950
don't I have the tools that I need to

00:06:03,940 --> 00:06:09,250
make changes to the platform how do I

00:06:05,950 --> 00:06:10,450
get into the superhero business so I'll

00:06:09,250 --> 00:06:12,940
spend the rest of this talk providing a

00:06:10,450 --> 00:06:16,870
few suggestions and this is the first

00:06:12,940 --> 00:06:19,390
one educate developers for the DevOps

00:06:16,870 --> 00:06:22,450
engineers in the room you'll know that

00:06:19,390 --> 00:06:25,000
as you know superheroes your superpower

00:06:22,450 --> 00:06:28,690
is knowing where nginx logs to in a

00:06:25,000 --> 00:06:32,620
container so answer should be standard

00:06:28,690 --> 00:06:35,440
out but sometimes it's not so it's not

00:06:32,620 --> 00:06:37,840
super complicated to train engineers to

00:06:35,440 --> 00:06:40,300
know about this DevOps tooling and about

00:06:37,840 --> 00:06:43,539
networking and so on and so forth

00:06:40,300 --> 00:06:45,160
I would suggest a few application a few

00:06:43,539 --> 00:06:48,580
areas that you can educate your

00:06:45,160 --> 00:06:50,740
application engineers on what does your

00:06:48,580 --> 00:06:52,810
application run on so are you running on

00:06:50,740 --> 00:06:55,539
kubernetes are you running on ec2

00:06:52,810 --> 00:06:57,729
instances are you running on Azure like

00:06:55,539 --> 00:06:59,860
all of that stuff can be very helpful to

00:06:57,729 --> 00:07:02,380
an engineer who maybe has only been

00:06:59,860 --> 00:07:03,789
working for a year or two and hasn't

00:07:02,380 --> 00:07:07,479
deployed their own application before

00:07:03,789 --> 00:07:09,669
that can be really really important how

00:07:07,479 --> 00:07:12,099
do users actually reach your application

00:07:09,669 --> 00:07:14,789
so there's this mystical like you know

00:07:12,099 --> 00:07:16,990
how does the internet work components of

00:07:14,789 --> 00:07:19,090
DevOps work where you're like all right

00:07:16,990 --> 00:07:21,759
well you have like an ssl certificate

00:07:19,090 --> 00:07:23,199
and we also have like a CDN that's like

00:07:21,759 --> 00:07:25,720
caching some stuff and then there's

00:07:23,199 --> 00:07:27,190
something called a reverse proxy so

00:07:25,720 --> 00:07:29,380
taking the time to walk engineers

00:07:27,190 --> 00:07:31,479
through that can be extremely empowering

00:07:29,380 --> 00:07:33,430
because then if they see an nginx error

00:07:31,479 --> 00:07:39,280
page they're not completely freaking out

00:07:33,430 --> 00:07:40,930
which is well probably a good thing you

00:07:39,280 --> 00:07:43,120
want to teach them what does it mean to

00:07:40,930 --> 00:07:44,620
deploy does that mean that you're

00:07:43,120 --> 00:07:46,870
spinning up new servers and load

00:07:44,620 --> 00:07:48,490
balancing traffic against to the new to

00:07:46,870 --> 00:07:50,650
the new servers does it mean that you're

00:07:48,490 --> 00:07:52,780
watching a new kubernetes service and

00:07:50,650 --> 00:07:55,930
are you doing a new kubernetes

00:07:52,780 --> 00:07:59,139
deployment and you also want to know you

00:07:55,930 --> 00:08:00,639
want to teach how developers can know

00:07:59,139 --> 00:08:01,659
how an application is doing at any

00:08:00,639 --> 00:08:06,490
particular point in time

00:08:01,659 --> 00:08:08,669
what is your monitoring setup so there's

00:08:06,490 --> 00:08:10,960
a variety of ways to educate developers

00:08:08,669 --> 00:08:13,659
getting a white board and talking and

00:08:10,960 --> 00:08:17,830
letting them ask questions is a big one

00:08:13,659 --> 00:08:19,479
and doing pair programming and rotation

00:08:17,830 --> 00:08:21,400
programs where the first stop for any

00:08:19,479 --> 00:08:23,169
engineer is the dev ops team for three

00:08:21,400 --> 00:08:26,169
months after they join your engineering

00:08:23,169 --> 00:08:27,909
organization that's pretty good too

00:08:26,169 --> 00:08:30,219
so once developers have some semblance

00:08:27,909 --> 00:08:33,010
of Education the next thing you want to

00:08:30,219 --> 00:08:35,469
do in my estimation would be to give the

00:08:33,010 --> 00:08:37,839
developer a playground so this isn't

00:08:35,469 --> 00:08:40,000
just staging because staging is often

00:08:37,839 --> 00:08:41,589
part of the path to production it's an

00:08:40,000 --> 00:08:44,140
isolated environment that can run your

00:08:41,589 --> 00:08:45,970
entire application or platform that has

00:08:44,140 --> 00:08:47,740
the same control plane as the production

00:08:45,970 --> 00:08:49,300
environment so if you deploy using build

00:08:47,740 --> 00:08:51,310
Kight you should be able to deploy your

00:08:49,300 --> 00:08:53,380
playground using built kite the

00:08:51,310 --> 00:08:55,510
difference is that the engineer can

00:08:53,380 --> 00:08:58,510
bearment in this playground and mess up

00:08:55,510 --> 00:08:59,950
DNS without you know taking down your

00:08:58,510 --> 00:09:01,780
entire application and costing the

00:08:59,950 --> 00:09:02,800
company you know hundreds of thousands

00:09:01,780 --> 00:09:04,420
of dollars

00:09:02,800 --> 00:09:09,310
assuming you work at like a company

00:09:04,420 --> 00:09:12,550
that's making money so I think this is

00:09:09,310 --> 00:09:15,120
pretty important to do because DevOps

00:09:12,550 --> 00:09:18,790
tooling as previously alluded to is like

00:09:15,120 --> 00:09:21,090
the blast radius is very large for me

00:09:18,790 --> 00:09:23,740
even as an experienced DevOps engineer

00:09:21,090 --> 00:09:25,330
sometimes changing DNS from one thing to

00:09:23,740 --> 00:09:27,400
another thing can be a bit scary because

00:09:25,330 --> 00:09:29,740
you might bring down the whole site so

00:09:27,400 --> 00:09:31,630
having a safe place to experiment that

00:09:29,740 --> 00:09:36,250
resembles the production environment is

00:09:31,630 --> 00:09:37,750
actually really really powerful so when

00:09:36,250 --> 00:09:40,900
you're testing out infrastructure and

00:09:37,750 --> 00:09:42,760
software changes you also probably want

00:09:40,900 --> 00:09:46,780
to have visibility into what's going on

00:09:42,760 --> 00:09:49,030
and you probably do already so all you

00:09:46,780 --> 00:09:50,290
need to do as a next step is to make

00:09:49,030 --> 00:09:52,960
monitoring and instrumentation

00:09:50,290 --> 00:09:55,000
accessible over on that side of the

00:09:52,960 --> 00:09:56,920
screen is like an imaginary graph on a

00:09:55,000 --> 00:10:03,100
dashboard that all these law dogs are

00:09:56,920 --> 00:10:05,590
looking at and my point the central

00:10:03,100 --> 00:10:07,720
point here is that engineers need to

00:10:05,590 --> 00:10:10,360
have visibility if they're going to be

00:10:07,720 --> 00:10:12,820
responsible for an application if you

00:10:10,360 --> 00:10:16,540
wanna if you want to like say hey you

00:10:12,820 --> 00:10:18,910
know your code made our site go much

00:10:16,540 --> 00:10:20,860
slower and that woke me up last night

00:10:18,910 --> 00:10:25,210
you need to expose those metrics to

00:10:20,860 --> 00:10:27,070
developers and also make that monitoring

00:10:25,210 --> 00:10:30,000
part of the culture of your engineering

00:10:27,070 --> 00:10:32,740
organization again not super complicated

00:10:30,000 --> 00:10:35,770
you sort of clean the croft out of your

00:10:32,740 --> 00:10:37,360
data dog or whatever platform you're

00:10:35,770 --> 00:10:38,740
using and you have very brief training

00:10:37,360 --> 00:10:40,780
sessions where you're like hey this is

00:10:38,740 --> 00:10:42,280
this is a cpu graph and you see where

00:10:40,780 --> 00:10:45,130
that that line goes up that means

00:10:42,280 --> 00:10:47,320
something bad happened and just do like

00:10:45,130 --> 00:10:49,540
very very rudimentary training and it'll

00:10:47,320 --> 00:10:52,390
go a long way towards having developers

00:10:49,540 --> 00:10:57,960
feel like hey like I know I know how to

00:10:52,390 --> 00:11:00,160
get information about what's going on so

00:10:57,960 --> 00:11:04,600
now we'll talk about something a little

00:11:00,160 --> 00:11:06,400
bit scarier which is ACLs or access

00:11:04,600 --> 00:11:07,180
control I don't know what the it lists

00:11:06,400 --> 00:11:12,010
whatever

00:11:07,180 --> 00:11:14,140
who's allowed to access what as DevOps

00:11:12,010 --> 00:11:18,580
engineers or just as software engineers

00:11:14,140 --> 00:11:21,810
we can work in areas that are that have

00:11:18,580 --> 00:11:24,580
sensitive data and we can work on

00:11:21,810 --> 00:11:26,860
applications where if it goes down

00:11:24,580 --> 00:11:32,140
that's a real problem for real people in

00:11:26,860 --> 00:11:34,510
the world and the like computing and

00:11:32,140 --> 00:11:36,910
networking setups that we manage in you

00:11:34,510 --> 00:11:40,510
know 2019 can be really really complex

00:11:36,910 --> 00:11:44,530
so I don't want to say that that's not

00:11:40,510 --> 00:11:48,010
true but there is also the reality that

00:11:44,530 --> 00:11:50,530
the DevOps teams is made up of real

00:11:48,010 --> 00:11:53,170
people that are tasked with gaining

00:11:50,530 --> 00:11:55,510
access to sensitive things and I would

00:11:53,170 --> 00:11:57,010
divide those things into two categories

00:11:55,510 --> 00:11:58,570
one of them would be like sensitive data

00:11:57,010 --> 00:12:01,210
so if you have credit card information

00:11:58,570 --> 00:12:02,860
and health information private messages

00:12:01,210 --> 00:12:05,050
sent between two people on an

00:12:02,860 --> 00:12:06,670
application that would be sensitive data

00:12:05,050 --> 00:12:09,820
and then there's also this broad

00:12:06,670 --> 00:12:11,410
category of you know systems that the

00:12:09,820 --> 00:12:13,600
team does not want anyone to mess with

00:12:11,410 --> 00:12:15,280
which would be like a net CD cluster or

00:12:13,600 --> 00:12:17,290
something like that or you know maybe

00:12:15,280 --> 00:12:22,290
maybe your kubernetes namespace that the

00:12:17,290 --> 00:12:25,660
application is deployed in and I think

00:12:22,290 --> 00:12:27,280
those two categories of things are are

00:12:25,660 --> 00:12:30,190
reasons that you might want to limit

00:12:27,280 --> 00:12:32,260
access and it's important as a DevOps

00:12:30,190 --> 00:12:34,290
team as an engineering organization to

00:12:32,260 --> 00:12:37,000
be really honest with yourself about

00:12:34,290 --> 00:12:39,250
which of these categories you are

00:12:37,000 --> 00:12:41,560
prioritizing when you're limited when

00:12:39,250 --> 00:12:44,110
you're limiting access do you not want

00:12:41,560 --> 00:12:45,700
your rank and file application engineers

00:12:44,110 --> 00:12:48,550
to have access to your main kubernetes

00:12:45,700 --> 00:12:50,590
namespace because you're you're

00:12:48,550 --> 00:12:52,660
concerned that there might be a data

00:12:50,590 --> 00:12:54,880
breach or are you more concerned that

00:12:52,660 --> 00:12:56,560
hey they're going to make some sort of

00:12:54,880 --> 00:12:58,360
change with a command-line tool that

00:12:56,560 --> 00:13:00,540
they don't fully understand and we're

00:12:58,360 --> 00:13:03,370
gonna have problems as a result of that

00:13:00,540 --> 00:13:04,990
and it's sort of up to each individual

00:13:03,370 --> 00:13:06,670
engineering organization to find out

00:13:04,990 --> 00:13:08,350
what that balance is there are different

00:13:06,670 --> 00:13:09,940
regulatory requirements there's

00:13:08,350 --> 00:13:11,940
different engineering philosophies

00:13:09,940 --> 00:13:14,560
there's different DevOps philosophies

00:13:11,940 --> 00:13:20,130
but it's up to you and your organization

00:13:14,560 --> 00:13:24,329
to figure out where that is for you yeah

00:13:20,130 --> 00:13:27,300
so last slide with a dog on it I think

00:13:24,329 --> 00:13:28,290
is this one with a dog that's reporting

00:13:27,300 --> 00:13:31,009
for duty

00:13:28,290 --> 00:13:33,149
and I think it's very important that

00:13:31,009 --> 00:13:36,630
everyone in the engineering organization

00:13:33,149 --> 00:13:38,990
is on call maybe not immediately after

00:13:36,630 --> 00:13:42,600
being hired but pretty soon thereafter

00:13:38,990 --> 00:13:45,540
and the reason for this is that if the

00:13:42,600 --> 00:13:47,970
engineering organization is sharing

00:13:45,540 --> 00:13:52,259
responsibilities further for the

00:13:47,970 --> 00:13:54,750
applications stability then they have to

00:13:52,259 --> 00:13:56,519
be accountable for that by having the

00:13:54,750 --> 00:13:58,889
ability to be woken up in the middle of

00:13:56,519 --> 00:14:01,050
the night and the details of this are

00:13:58,889 --> 00:14:03,180
going to be highly specific to your

00:14:01,050 --> 00:14:05,970
organization but the important thing is

00:14:03,180 --> 00:14:08,370
just figure out some way to get alerts

00:14:05,970 --> 00:14:11,610
to application engineers doesn't matter

00:14:08,370 --> 00:14:14,180
if it's just daytime rotations or maybe

00:14:11,610 --> 00:14:17,370
they're on call once every three months

00:14:14,180 --> 00:14:20,279
but get them alerts somehow because at

00:14:17,370 --> 00:14:22,079
least for me I thought that sort of

00:14:20,279 --> 00:14:24,480
DevOps was this scary world and site

00:14:22,079 --> 00:14:26,790
reliability was a scary world and then I

00:14:24,480 --> 00:14:28,740
went on call and I was like oh I got an

00:14:26,790 --> 00:14:31,560
alert I looked at the graph I didn't

00:14:28,740 --> 00:14:32,430
understand it is collided to a someone

00:14:31,560 --> 00:14:36,959
that actually knew what they were doing

00:14:32,430 --> 00:14:40,019
and no big deal and it doesn't really

00:14:36,959 --> 00:14:41,430
mean that the rank-and-file engineers

00:14:40,019 --> 00:14:44,370
are stuck dealing with every production

00:14:41,430 --> 00:14:46,319
incident because you have escalation

00:14:44,370 --> 00:14:49,459
policies but it does mean that they're

00:14:46,319 --> 00:14:51,990
on the hook for answering the first page

00:14:49,459 --> 00:14:54,269
much like other stuff that I have

00:14:51,990 --> 00:14:56,279
described here this ends up being a good

00:14:54,269 --> 00:14:58,079
amount of work you're going to need to

00:14:56,279 --> 00:15:00,480
create alcohol preparation guy it's run

00:14:58,079 --> 00:15:02,189
books for common alcohol issues it's a

00:15:00,480 --> 00:15:04,829
real change to your site reliability

00:15:02,189 --> 00:15:07,860
organizations general like outlook on

00:15:04,829 --> 00:15:10,050
the world and you'll probably get paged

00:15:07,860 --> 00:15:12,209
quite a lot if you decide to do this but

00:15:10,050 --> 00:15:16,649
I think it is a really really good way

00:15:12,209 --> 00:15:21,600
to make everyone care about reliability

00:15:16,649 --> 00:15:24,300
so I think that is it that's my Twitter

00:15:21,600 --> 00:15:26,579
handle I do run a DevOps consultancy so

00:15:24,300 --> 00:15:28,260
if you need some DevOps work send me an

00:15:26,579 --> 00:15:29,880
email at that email address and thanks

00:15:28,260 --> 00:15:34,179
for coming

00:15:29,880 --> 00:15:34,179
[Applause]

00:15:35,210 --> 00:15:39,599

YouTube URL: https://www.youtube.com/watch?v=s40NKak2Lj8


