Title: Rosemary Wang - Everything as Code with Terraform
Publication date: 2019-11-04
Playlist: All Things Open 2019
Description: 
	Terraform is an Infrastructure as Code tool for declaratively building and maintaining complex infrastructures on one or more cloud providers/services. But Terraform also supports over 80 non-infrastructure providers! In this demo-driven talk, will dive into the internals of Terraform and see how it works. We will show how Terraform can be used for non-infrastructure use cases by showing examples. Weâ€™ll also take a look at on how you can extend Terraform to manage anything with an API.
Captions: 
	00:00:01,180 --> 00:00:03,690
[Music]

00:00:03,490 --> 00:00:07,910
[Applause]

00:00:03,690 --> 00:00:07,910
[Music]

00:00:08,840 --> 00:00:13,799
so my name is rosemary Wong I'm a

00:00:12,240 --> 00:00:16,080
developer advocate for hashey court

00:00:13,799 --> 00:00:18,000
today in this room we're talking about

00:00:16,080 --> 00:00:19,619
everything is code with terraform and

00:00:18,000 --> 00:00:21,660
this is the DevOps press all right two

00:00:19,619 --> 00:00:23,609
years ago my first conference I ever

00:00:21,660 --> 00:00:25,769
spoke out was all things open this is me

00:00:23,609 --> 00:00:27,750
two years younger two more confused and

00:00:25,769 --> 00:00:30,119
like actually way more nervous right and

00:00:27,750 --> 00:00:33,809
at the time I was not brave enough to do

00:00:30,119 --> 00:00:37,260
a live demo I was terrified conference

00:00:33,809 --> 00:00:38,820
internet etc it's scary but what I ended

00:00:37,260 --> 00:00:40,770
up doing was writing a bunch of sample

00:00:38,820 --> 00:00:43,110
code that was an addendum to my talk and

00:00:40,770 --> 00:00:45,059
a lot of people were like I get your

00:00:43,110 --> 00:00:47,789
code but can you just walk us through it

00:00:45,059 --> 00:00:49,739
so I created a three part blog series to

00:00:47,789 --> 00:00:51,149
walk through this code so what is

00:00:49,739 --> 00:00:53,730
infrastructure is code I'm not gonna go

00:00:51,149 --> 00:00:55,079
too deeply into this I it's an

00:00:53,730 --> 00:00:56,789
intermediate talk so we're gonna

00:00:55,079 --> 00:00:57,960
actually go a little bit into the

00:00:56,789 --> 00:01:00,270
infrastructure piece I'll show you a

00:00:57,960 --> 00:01:01,890
little bit we're gonna tear form the

00:01:00,270 --> 00:01:04,650
data center but then let's talk about

00:01:01,890 --> 00:01:07,320
extending tear form and terraform is

00:01:04,650 --> 00:01:08,610
open source not to say there are there

00:01:07,320 --> 00:01:10,439
aren't other tools out there but tear

00:01:08,610 --> 00:01:12,030
form is very popular and a lot of people

00:01:10,439 --> 00:01:14,189
extend it and then we'll go into

00:01:12,030 --> 00:01:16,350
everything is code as I mentioned before

00:01:14,189 --> 00:01:18,630
I know that sometimes it's hard to see

00:01:16,350 --> 00:01:21,330
demos from back through so if you go to

00:01:18,630 --> 00:01:25,290
this shortened URL you will get access

00:01:21,330 --> 00:01:26,880
to a live and BS code live share it's a

00:01:25,290 --> 00:01:28,860
read-only collaboration session but you

00:01:26,880 --> 00:01:30,840
should be able to see what I'm typing

00:01:28,860 --> 00:01:32,490
and running off my screen and you'll be

00:01:30,840 --> 00:01:34,049
able to see it with the font and the

00:01:32,490 --> 00:01:36,600
color scheme that you need for your

00:01:34,049 --> 00:01:39,659
machine so infrastructure is called code

00:01:36,600 --> 00:01:41,880
goals so the idea behind infrastructures

00:01:39,659 --> 00:01:44,250
code very briefly is to unify the view

00:01:41,880 --> 00:01:45,630
of resources support the modern data

00:01:44,250 --> 00:01:47,610
center so this stretch was from

00:01:45,630 --> 00:01:49,920
infrastructures of service all the way

00:01:47,610 --> 00:01:52,259
to software as a service you expose a

00:01:49,920 --> 00:01:55,259
way for individuals and teams safely and

00:01:52,259 --> 00:01:56,490
predictably to make changes and this is

00:01:55,259 --> 00:01:58,560
actually really important right

00:01:56,490 --> 00:02:00,570
infrastructure is code is less about

00:01:58,560 --> 00:02:03,270
tooling and everything about how do you

00:02:00,570 --> 00:02:04,950
scale collaboration because that's

00:02:03,270 --> 00:02:07,829
actually more challenging than building

00:02:04,950 --> 00:02:09,629
a tool in some regards so infrastructure

00:02:07,829 --> 00:02:11,610
is code provides this workflow that's

00:02:09,629 --> 00:02:13,800
technology agnostic if I want to create

00:02:11,610 --> 00:02:15,600
something in my target infrastructure

00:02:13,800 --> 00:02:17,550
I don't really need to be thinking about

00:02:15,600 --> 00:02:20,640
the underlying technology I want to make

00:02:17,550 --> 00:02:22,830
composites of the resources I need and I

00:02:20,640 --> 00:02:24,270
can manage anything with an API now

00:02:22,830 --> 00:02:25,530
that's it there's a big star to that

00:02:24,270 --> 00:02:28,830
right not everything has a good API

00:02:25,530 --> 00:02:30,390
we'll talk about that and the problem

00:02:28,830 --> 00:02:32,100
that I kind of encountered in

00:02:30,390 --> 00:02:34,290
infrastructures code when I first

00:02:32,100 --> 00:02:35,940
started eight years ago was I don't know

00:02:34,290 --> 00:02:37,710
how to code a lot of you infrastructure

00:02:35,940 --> 00:02:39,660
engineers networking engineers even told

00:02:37,710 --> 00:02:41,340
me we're like I don't know how to code I

00:02:39,660 --> 00:02:43,410
don't really have time I'm trying to

00:02:41,340 --> 00:02:46,140
learn on my own but I don't know how to

00:02:43,410 --> 00:02:48,570
apply it back but I do want to automate

00:02:46,140 --> 00:02:50,190
how I configure my infrastructure which

00:02:48,570 --> 00:02:52,410
is you know pretty cool they wanted to

00:02:50,190 --> 00:02:54,630
try it right but then I talked to a

00:02:52,410 --> 00:02:56,790
bunch of developers I took some really

00:02:54,630 --> 00:02:57,840
amazing developers who they were like we

00:02:56,790 --> 00:02:59,400
don't want to turn touch the

00:02:57,840 --> 00:03:00,870
infrastructure we don't want to touch

00:02:59,400 --> 00:03:03,300
networking we don't understand IP

00:03:00,870 --> 00:03:04,980
address saying writing code for

00:03:03,300 --> 00:03:07,380
infrastructure is really difficult I

00:03:04,980 --> 00:03:09,270
can't fathom that right mostly because

00:03:07,380 --> 00:03:11,250
it's not testable I can't conform

00:03:09,270 --> 00:03:13,410
software development practices to

00:03:11,250 --> 00:03:15,840
infrastructure so with these

00:03:13,410 --> 00:03:19,500
difficulties and ideas terms domain

00:03:15,840 --> 00:03:21,750
terms and code terraform was born so to

00:03:19,500 --> 00:03:23,610
speak so Sara form is based on hash

00:03:21,750 --> 00:03:26,010
equipped configuration language it's an

00:03:23,610 --> 00:03:28,560
intent oriented language that's the way

00:03:26,010 --> 00:03:30,750
I describe it personally but the idea is

00:03:28,560 --> 00:03:32,610
that you don't have to say you know I

00:03:30,750 --> 00:03:34,590
need to learn to code to do it the idea

00:03:32,610 --> 00:03:38,160
is that you have the intent and there's

00:03:34,590 --> 00:03:41,310
enough specification that aligns with

00:03:38,160 --> 00:03:42,810
the providers data model for you to

00:03:41,310 --> 00:03:44,370
actually decide the configuration you

00:03:42,810 --> 00:03:45,900
need so if you're someone who's a

00:03:44,370 --> 00:03:48,090
developer who's not familiar with

00:03:45,900 --> 00:03:50,160
infrastructure you can say okay this

00:03:48,090 --> 00:03:51,510
boot disk is Debian this is a Debian

00:03:50,160 --> 00:03:52,830
image if you're an engineer

00:03:51,510 --> 00:03:53,040
infrastructure engineer you're like oh

00:03:52,830 --> 00:03:55,050
yeah

00:03:53,040 --> 00:03:57,600
it's you know I can just say here's a

00:03:55,050 --> 00:04:00,090
specification now a common question I

00:03:57,600 --> 00:04:03,690
get is like is this going to be the same

00:04:00,090 --> 00:04:06,120
thing across Google AWS and Azure no

00:04:03,690 --> 00:04:07,770
it's not and the data model is not

00:04:06,120 --> 00:04:09,450
common across cloud providers it's not

00:04:07,770 --> 00:04:11,640
like network yang model right where

00:04:09,450 --> 00:04:13,080
switches become switches VLANs VLAN

00:04:11,640 --> 00:04:16,160
common language there's no such thing

00:04:13,080 --> 00:04:19,260
and it's going to be wrapped around the

00:04:16,160 --> 00:04:21,209
cloud providers API we'll go into that a

00:04:19,260 --> 00:04:23,700
little bit later but the idea is that

00:04:21,209 --> 00:04:26,790
here you can declare a Google compute

00:04:23,700 --> 00:04:27,540
resource and you get the specification

00:04:26,790 --> 00:04:31,590
you need

00:04:27,540 --> 00:04:34,150
and it has some really interesting

00:04:31,590 --> 00:04:35,590
consequences the way that terraform is

00:04:34,150 --> 00:04:37,570
constructed it means that it's

00:04:35,590 --> 00:04:39,340
extensible right so you can extend it to

00:04:37,570 --> 00:04:42,430
different API so you can wrap it around

00:04:39,340 --> 00:04:45,910
any API you desire and it's idempotence

00:04:42,430 --> 00:04:48,070
so you make changes and if they don't

00:04:45,910 --> 00:04:50,710
change it doesn't do anything but if you

00:04:48,070 --> 00:04:52,780
make changes what it will do is it will

00:04:50,710 --> 00:04:54,639
create resources that needs to be

00:04:52,780 --> 00:04:56,380
created if they're new it will destroy

00:04:54,639 --> 00:04:58,930
resources if you want to take them away

00:04:56,380 --> 00:05:01,090
the resources can be updated in place

00:04:58,930 --> 00:05:04,030
and the resources can be destroyed and

00:05:01,090 --> 00:05:06,550
recreated so these are all kind of

00:05:04,030 --> 00:05:08,440
actions within terraform but here's

00:05:06,550 --> 00:05:11,530
something interesting to note all of

00:05:08,440 --> 00:05:14,680
these actions are specified by the logic

00:05:11,530 --> 00:05:16,570
in the provider ecosystem so the Google

00:05:14,680 --> 00:05:18,460
provider makes the decision whether or

00:05:16,570 --> 00:05:20,380
not the resource is destroyed and

00:05:18,460 --> 00:05:23,200
recreated it makes the decision whether

00:05:20,380 --> 00:05:25,180
or not it can be updated in place this

00:05:23,200 --> 00:05:27,490
decisioning is built in the provider

00:05:25,180 --> 00:05:28,919
ecosystem so there's a whole list of

00:05:27,490 --> 00:05:31,240
providers here sorry about the

00:05:28,919 --> 00:05:33,040
resolution but there's a whole list of

00:05:31,240 --> 00:05:35,380
providers I think they're about like 200

00:05:33,040 --> 00:05:37,900
or 86 of them now and then the 200 more

00:05:35,380 --> 00:05:39,490
in the community so people can just

00:05:37,900 --> 00:05:41,380
write that right and companies will

00:05:39,490 --> 00:05:43,390
write them individual contributors will

00:05:41,380 --> 00:05:45,700
write them and we post them on the tear

00:05:43,390 --> 00:05:48,520
form page so if you go to terraform io

00:05:45,700 --> 00:05:50,530
Doc's slash providers you will find a

00:05:48,520 --> 00:05:53,380
list of them for the infrastructure of

00:05:50,530 --> 00:05:56,979
your choice all right so how do these

00:05:53,380 --> 00:05:59,890
providers work all right get ready I'm

00:05:56,979 --> 00:06:03,789
gonna talk a little bit about code it's

00:05:59,890 --> 00:06:05,740
not that bad I promise ok so terraform

00:06:03,789 --> 00:06:08,200
when you download it comes as a binary

00:06:05,740 --> 00:06:12,430
that binary is what is referred to

00:06:08,200 --> 00:06:14,440
terraform core terraform core does a

00:06:12,430 --> 00:06:16,180
couple of things it does all those

00:06:14,440 --> 00:06:18,700
mappings for the configuration language

00:06:16,180 --> 00:06:21,010
it does state management so if you say I

00:06:18,700 --> 00:06:23,950
created this infrastructure up there

00:06:21,010 --> 00:06:26,550
wherever it is it will manage that state

00:06:23,950 --> 00:06:28,510
for you it will resource graph

00:06:26,550 --> 00:06:30,250
dependencies so if you have graphic if

00:06:28,510 --> 00:06:31,390
you know graph theory terraform works on

00:06:30,250 --> 00:06:34,270
graph theory so all the graph theory

00:06:31,390 --> 00:06:36,400
logic is in the terraform core it plans

00:06:34,270 --> 00:06:38,710
the execution and it controls the

00:06:36,400 --> 00:06:40,830
plug-in RBC communication now here's the

00:06:38,710 --> 00:06:44,039
trick though terraform core

00:06:40,830 --> 00:06:45,300
is actually not hilariously not that

00:06:44,039 --> 00:06:47,370
interesting I mean it is really

00:06:45,300 --> 00:06:49,259
interesting right it does the mappings

00:06:47,370 --> 00:06:50,789
but what's really fascinating about core

00:06:49,259 --> 00:06:52,280
is the way it communicates with

00:06:50,789 --> 00:06:55,580
everything else because here's the thing

00:06:52,280 --> 00:06:59,159
terraform core for those who know G RPC

00:06:55,580 --> 00:07:03,900
terraform core is the client it is a gr

00:06:59,159 --> 00:07:07,470
PC client and it refers to the plugins

00:07:03,900 --> 00:07:11,250
or providers like AWS kubernetes or even

00:07:07,470 --> 00:07:14,639
one password so the plugins are G RPC

00:07:11,250 --> 00:07:17,759
servers that's the trick and the GRP

00:07:14,639 --> 00:07:20,430
servers these plugins or these providers

00:07:17,759 --> 00:07:22,979
they execute calls for you against the

00:07:20,430 --> 00:07:25,830
target API they define the resources the

00:07:22,979 --> 00:07:27,979
schemas the contracts they authenticate

00:07:25,830 --> 00:07:30,629
against the target API of your choice

00:07:27,979 --> 00:07:33,240
now where do these plugins come from

00:07:30,629 --> 00:07:36,479
well they're independently compiled

00:07:33,240 --> 00:07:39,509
binaries these binaries are downloaded

00:07:36,479 --> 00:07:41,580
when you run terraform in it so those

00:07:39,509 --> 00:07:43,770
who have run terraform right you might

00:07:41,580 --> 00:07:46,590
get the core binary that is actually

00:07:43,770 --> 00:07:48,360
just as own packaging but the sort of

00:07:46,590 --> 00:07:50,789
like everything else the logic the good

00:07:48,360 --> 00:07:53,310
stuff the value comes from the plugins

00:07:50,789 --> 00:07:55,860
providers G RPC server whatever you want

00:07:53,310 --> 00:07:58,380
to call it so when you run terraform in

00:07:55,860 --> 00:08:01,199
it it downloads the set of binaries for

00:07:58,380 --> 00:08:03,569
you and they are actually G RPC servers

00:08:01,199 --> 00:08:06,270
and there's a contract with the G RPC

00:08:03,569 --> 00:08:07,800
client which is terraform core so this

00:08:06,270 --> 00:08:11,490
is actually facilitated by something

00:08:07,800 --> 00:08:12,870
called the plug-in SDK so let's build a

00:08:11,490 --> 00:08:16,219
provider let's actually see what this

00:08:12,870 --> 00:08:20,069
looks like all right so I'm gonna go to

00:08:16,219 --> 00:08:23,969
my machine now and I see some people

00:08:20,069 --> 00:08:27,870
think goodness okay so here I am right

00:08:23,969 --> 00:08:29,490
now except except except oh it's always

00:08:27,870 --> 00:08:32,849
accept anonymous okay we're just gonna

00:08:29,490 --> 00:08:35,729
do that I'm sorry security alright so

00:08:32,849 --> 00:08:37,620
what I'm gonna do is I'm going to

00:08:35,729 --> 00:08:40,740
actually show you how I wrote a provider

00:08:37,620 --> 00:08:44,940
against a sample a very very very simple

00:08:40,740 --> 00:08:49,140
sample API I have an expense API so when

00:08:44,940 --> 00:08:50,940
I run against it I actually have API

00:08:49,140 --> 00:08:52,860
expense I'm sorry it's a dotnet but it

00:08:50,940 --> 00:08:56,339
was the only like sample one I had

00:08:52,860 --> 00:08:57,660
uh so what it will do is actually give

00:08:56,339 --> 00:09:00,990
me a list of expenses there are

00:08:57,660 --> 00:09:05,700
currently none and so what I want to do

00:09:00,990 --> 00:09:10,769
is actually create a kind of terraform

00:09:05,700 --> 00:09:13,079
resource called expense item expense

00:09:10,769 --> 00:09:15,180
item lunch because this will be lunch

00:09:13,079 --> 00:09:16,320
today at all things that have been and

00:09:15,180 --> 00:09:17,459
it'll be cost me ten dollars eighty

00:09:16,320 --> 00:09:18,839
cents I don't remember how much it

00:09:17,459 --> 00:09:21,029
Beasley's chicken costs but you know

00:09:18,839 --> 00:09:22,649
something like that all right so the

00:09:21,029 --> 00:09:24,990
idea is I want this resource this is

00:09:22,649 --> 00:09:27,120
what I want as a user when I use tariff

00:09:24,990 --> 00:09:30,870
or and so how do i implement this well

00:09:27,120 --> 00:09:33,450
you know because I came from a very

00:09:30,870 --> 00:09:36,300
interesting background

00:09:33,450 --> 00:09:39,839
I learned to TDD so what I'm going to do

00:09:36,300 --> 00:09:42,480
is I'm going to actually run a set of

00:09:39,839 --> 00:09:45,050
acceptance tests that I previously wrote

00:09:42,480 --> 00:09:47,760
and these acceptance tests are actually

00:09:45,050 --> 00:09:50,730
working on a test harness that's

00:09:47,760 --> 00:09:52,410
built-in to terraform plug-in SDK so I

00:09:50,730 --> 00:09:57,600
have to write the tests which I'll show

00:09:52,410 --> 00:09:59,190
here but the good news is that it's

00:09:57,600 --> 00:10:01,290
already kind of most of these functions

00:09:59,190 --> 00:10:03,510
are implemented for me so if you can see

00:10:01,290 --> 00:10:05,850
here there are a lot of these functions

00:10:03,510 --> 00:10:07,829
that are implementing but I'm actually

00:10:05,850 --> 00:10:09,870
using some interfaces already done for

00:10:07,829 --> 00:10:12,240
me and what this will do is it will

00:10:09,870 --> 00:10:15,000
create it will delete it will update so

00:10:12,240 --> 00:10:20,730
we'll run all these checks so when I

00:10:15,000 --> 00:10:23,339
actually run this let's see what happens

00:10:20,730 --> 00:10:26,220
because I TDD I wrote my tests

00:10:23,339 --> 00:10:28,140
beforehand Oh failing tests right these

00:10:26,220 --> 00:10:30,449
are ready so first of all it tells me

00:10:28,140 --> 00:10:31,829
like oh yeah this should be deleted okay

00:10:30,449 --> 00:10:33,930
that's funny it didn't delete anything

00:10:31,829 --> 00:10:36,360
but on top of that it also told me that

00:10:33,930 --> 00:10:38,190
my test resource expense update didn't

00:10:36,360 --> 00:10:41,100
work so like it supposed to update at

00:10:38,190 --> 00:10:42,720
200 and it didn't update so why does

00:10:41,100 --> 00:10:45,420
this happen or like what did I not

00:10:42,720 --> 00:10:47,430
implement well let's actually go to the

00:10:45,420 --> 00:10:49,589
body of code right it's always called

00:10:47,430 --> 00:10:52,320
resource underscore your resource so you

00:10:49,589 --> 00:10:54,420
decide you name what you want but this

00:10:52,320 --> 00:10:56,240
is usually what you would name it and as

00:10:54,420 --> 00:10:58,769
you can see I've already implemented a

00:10:56,240 --> 00:11:01,050
create so that's when I do a terraform

00:10:58,769 --> 00:11:02,490
apply it does that create right and the

00:11:01,050 --> 00:11:05,010
fun part is that it's pretty much just

00:11:02,490 --> 00:11:06,130
crud or create read update delete

00:11:05,010 --> 00:11:08,230
commands

00:11:06,130 --> 00:11:10,209
so as long as your API does create read

00:11:08,230 --> 00:11:12,399
update delete you pretty much can wrap

00:11:10,209 --> 00:11:14,560
around it right so if I look at my

00:11:12,399 --> 00:11:16,870
create all I did was say okay I'm gonna

00:11:14,560 --> 00:11:19,779
call my expense client and create the

00:11:16,870 --> 00:11:21,220
expense with the expense details seems

00:11:19,779 --> 00:11:24,430
pretty simple let's see if I can

00:11:21,220 --> 00:11:26,800
implement an update so we'll do this

00:11:24,430 --> 00:11:27,399
really really quickly and by that I mean

00:11:26,800 --> 00:11:30,220
copy paste

00:11:27,399 --> 00:11:31,750
I'm really sorry everybody we know

00:11:30,220 --> 00:11:33,850
that's not proper development practice

00:11:31,750 --> 00:11:34,899
but I'm gonna do it anyway so what I'm

00:11:33,850 --> 00:11:36,699
gonna do is I'm going to take that

00:11:34,899 --> 00:11:38,649
create because my update pretty much

00:11:36,699 --> 00:11:40,420
works the same way it's expecting an

00:11:38,649 --> 00:11:42,459
expense object that I have to pass

00:11:40,420 --> 00:11:45,610
through the only difference is that my

00:11:42,459 --> 00:11:48,220
update also requires an ID because it's

00:11:45,610 --> 00:11:51,040
updating an existing one and what you'll

00:11:48,220 --> 00:11:53,019
see here is this D resource data here so

00:11:51,040 --> 00:11:55,660
this is actually the schema resource

00:11:53,019 --> 00:11:57,699
data that you would declare in the

00:11:55,660 --> 00:12:00,670
terraform resource so remember I showed

00:11:57,699 --> 00:12:03,880
that lovely terraform file that said

00:12:00,670 --> 00:12:06,790
like tottenham trip ID all things open

00:12:03,880 --> 00:12:08,709
cost 1080 so all of the schema is being

00:12:06,790 --> 00:12:11,079
implemented up here I made you actually

00:12:08,709 --> 00:12:13,389
just close that down yeah so all this is

00:12:11,079 --> 00:12:15,160
being implemented up here so it's just

00:12:13,389 --> 00:12:17,800
reading the schema there are various

00:12:15,160 --> 00:12:19,120
types you can do and these are all sort

00:12:17,800 --> 00:12:23,290
of interfaces that you would leverage

00:12:19,120 --> 00:12:27,000
from the plug-in SDK so here I am I'm

00:12:23,290 --> 00:12:30,490
going to create my ID I have a lovely a

00:12:27,000 --> 00:12:32,500
function called update expense it just

00:12:30,490 --> 00:12:34,779
returns back the error I don't need to

00:12:32,500 --> 00:12:36,639
set the ID to nil because it's already

00:12:34,779 --> 00:12:38,860
been set and I also don't need to set

00:12:36,639 --> 00:12:41,050
the ID there so the idea is all I'm

00:12:38,860 --> 00:12:43,449
doing is saying hey update my expense

00:12:41,050 --> 00:12:45,970
and that's pretty much it what Reed will

00:12:43,449 --> 00:12:48,279
do is this resource expense read just

00:12:45,970 --> 00:12:51,790
issues a get request and just checks the

00:12:48,279 --> 00:12:53,350
expense so that's it so let's see if I

00:12:51,790 --> 00:12:55,120
did this correctly because in all

00:12:53,350 --> 00:12:57,149
likelihood probably not but we're going

00:12:55,120 --> 00:13:03,220
to do it anyway right because TDD

00:12:57,149 --> 00:13:05,949
alright ok so let's do that and I'm

00:13:03,220 --> 00:13:08,439
going to make test ACC yeah for every

00:13:05,949 --> 00:13:11,259
terraform plug-in you download off of

00:13:08,439 --> 00:13:12,970
our web page in terraform off the

00:13:11,259 --> 00:13:15,220
community web page and terraform we

00:13:12,970 --> 00:13:16,899
actually make everybody write acceptance

00:13:15,220 --> 00:13:18,730
tests so that way we don't break

00:13:16,899 --> 00:13:19,810
functionality so these acceptance tests

00:13:18,730 --> 00:13:22,570
are more like integrate

00:13:19,810 --> 00:13:24,340
in tests you do need some kind of like

00:13:22,570 --> 00:13:26,050
dummy test account so that you can

00:13:24,340 --> 00:13:27,790
actually run and make sure the resources

00:13:26,050 --> 00:13:29,320
are being created correctly so for

00:13:27,790 --> 00:13:32,950
example this is actually creating an

00:13:29,320 --> 00:13:35,650
expense actual expense locally for me so

00:13:32,950 --> 00:13:38,050
notice that now it's passed right so it

00:13:35,650 --> 00:13:40,720
did update from 100 to 200 that's what I

00:13:38,050 --> 00:13:43,570
expected it to do and delete works very

00:13:40,720 --> 00:13:48,460
similarly basically I would look for my

00:13:43,570 --> 00:13:50,740
specific delete client function and just

00:13:48,460 --> 00:13:54,310
do client dot delete expense with the ID

00:13:50,740 --> 00:13:57,610
and then clear the ID and that clears it

00:13:54,310 --> 00:13:59,800
from State so really like as long as you

00:13:57,610 --> 00:14:01,930
have a great API and it has a goal end

00:13:59,800 --> 00:14:05,050
client in front of the goal laying API

00:14:01,930 --> 00:14:06,910
you're pretty much good to go so if you

00:14:05,050 --> 00:14:08,529
actually want to implement one yourself

00:14:06,910 --> 00:14:10,270
for example you just need the client

00:14:08,529 --> 00:14:12,700
which I've written here for my API

00:14:10,270 --> 00:14:15,580
expense as you can see it's calling the

00:14:12,700 --> 00:14:18,910
API and then you can actually just use

00:14:15,580 --> 00:14:20,589
that in your provider and there are a

00:14:18,910 --> 00:14:22,839
couple of other files you'll need like a

00:14:20,589 --> 00:14:25,270
provider not go this actually declares

00:14:22,839 --> 00:14:28,660
the resource name so when I said expense

00:14:25,270 --> 00:14:31,480
item that is actually going to be in the

00:14:28,660 --> 00:14:33,430
provider gotgot so I'm not going to run

00:14:31,480 --> 00:14:36,310
this it does work what you'll have to do

00:14:33,430 --> 00:14:37,630
is compile the plug-in so if I do make

00:14:36,310 --> 00:14:40,480
plug-in which isn't going to work

00:14:37,630 --> 00:14:42,010
because it's actually got delete not

00:14:40,480 --> 00:14:43,660
implemented but if I make the plug-in

00:14:42,010 --> 00:14:47,770
the idea is that I can do terraform

00:14:43,660 --> 00:14:49,240
apply and plan and destroy and it will

00:14:47,770 --> 00:14:51,040
do all of these functions for me so it

00:14:49,240 --> 00:14:53,470
executes the update in place it'll

00:14:51,040 --> 00:14:56,050
execute create or recreate destroy

00:14:53,470 --> 00:14:58,990
depending on how I clarify it so that's

00:14:56,050 --> 00:15:02,320
a quick thing on how you actually do a

00:14:58,990 --> 00:15:05,920
provider cool I know that's fast sorry

00:15:02,320 --> 00:15:07,120
ok so we built a provider like I said

00:15:05,920 --> 00:15:09,190
you can take a picture of this github

00:15:07,120 --> 00:15:11,770
repository it has all these demos in it

00:15:09,190 --> 00:15:13,240
so you can actually reference it and

00:15:11,770 --> 00:15:14,470
there are also independent repositories

00:15:13,240 --> 00:15:16,450
there are some sub modules in there

00:15:14,470 --> 00:15:19,209
because it's easier to kill it kind of

00:15:16,450 --> 00:15:20,920
condense it alright so if you want to

00:15:19,209 --> 00:15:23,650
build your own provider a lot of people

00:15:20,920 --> 00:15:25,480
do and there's some couple useful

00:15:23,650 --> 00:15:26,920
resources there is a writing custom

00:15:25,480 --> 00:15:28,780
providers which is the official

00:15:26,920 --> 00:15:30,339
documentation there's the plug-in SDK

00:15:28,780 --> 00:15:32,800
github which is now officially separated

00:15:30,339 --> 00:15:33,820
from core previously it was bundled with

00:15:32,800 --> 00:15:35,890
core probably

00:15:33,820 --> 00:15:39,640
a great decision so we've moved it out

00:15:35,890 --> 00:15:40,600
of corn its own plugin SDK and Eddie I

00:15:39,640 --> 00:15:42,160
have to give him a shout out from

00:15:40,600 --> 00:15:44,920
digitalocean actually did a great talk

00:15:42,160 --> 00:15:47,230
about the testing and and the terraform

00:15:44,920 --> 00:15:47,800
provider for digitalocean which is

00:15:47,230 --> 00:15:49,810
pretty cool

00:15:47,800 --> 00:15:51,190
and it's super useful if you're curious

00:15:49,810 --> 00:15:53,170
about the testing harness and the

00:15:51,190 --> 00:15:55,900
acceptance tests and always you can

00:15:53,170 --> 00:15:57,460
check out the AWS or GCP providers those

00:15:55,900 --> 00:15:58,840
are written by a whole set of developers

00:15:57,460 --> 00:16:00,370
who think about the patterns and

00:15:58,840 --> 00:16:02,500
different ways that they can implement a

00:16:00,370 --> 00:16:07,330
provider so they would have some good

00:16:02,500 --> 00:16:08,920
examples as well alright so back to what

00:16:07,330 --> 00:16:10,420
I was originally saying right this

00:16:08,920 --> 00:16:12,250
original story so I started

00:16:10,420 --> 00:16:15,280
infrastructure plugging in switches etc

00:16:12,250 --> 00:16:18,280
I started to do a lot of stuff blogging

00:16:15,280 --> 00:16:20,140
etc I wanted to make a blog as code and

00:16:18,280 --> 00:16:22,150
so then I said to myself all right like

00:16:20,140 --> 00:16:23,410
let's actually do this I learned like a

00:16:22,150 --> 00:16:26,290
little bit of the ins and outs of

00:16:23,410 --> 00:16:30,490
extending terraform with a provider or a

00:16:26,290 --> 00:16:32,890
plugin but like what happens now now I

00:16:30,490 --> 00:16:35,800
need to make my bloggers code right and

00:16:32,890 --> 00:16:38,260
so lo and behold this is not by any

00:16:35,800 --> 00:16:40,000
means a level the best provider or most

00:16:38,260 --> 00:16:42,070
stable provider is the terraform

00:16:40,000 --> 00:16:43,870
provider for medium I did write it it

00:16:42,070 --> 00:16:45,700
looks something like this ok so it

00:16:43,870 --> 00:16:47,530
starts with like medium image images

00:16:45,700 --> 00:16:49,270
have to be uploaded separately so I had

00:16:47,530 --> 00:16:52,150
to upload that I had to implement a

00:16:49,270 --> 00:16:56,200
resource for the medium image and the

00:16:52,150 --> 00:17:01,270
post i had to also write myself and fun

00:16:56,200 --> 00:17:05,020
fact the medium provider is only a write

00:17:01,270 --> 00:17:06,640
and a read provider there is no update

00:17:05,020 --> 00:17:09,550
or delete functionality because the

00:17:06,640 --> 00:17:11,560
medium client and the medium api does

00:17:09,550 --> 00:17:13,510
not allow you to delete or update in

00:17:11,560 --> 00:17:15,400
place so i have truly immutable blocks

00:17:13,510 --> 00:17:18,970
basically it creates like this whole set

00:17:15,400 --> 00:17:21,520
of draft blogs every single time there's

00:17:18,970 --> 00:17:24,010
one downside to that right i found out

00:17:21,520 --> 00:17:27,579
that the medium the medium api wasn't

00:17:24,010 --> 00:17:29,890
exactly opened every single command for

00:17:27,579 --> 00:17:33,340
me personally i tried to get access and

00:17:29,890 --> 00:17:36,040
it doesn't and so what happens when you

00:17:33,340 --> 00:17:40,080
actually have an api that doesn't

00:17:36,040 --> 00:17:43,450
conform to create read update delete

00:17:40,080 --> 00:17:46,150
well most a number of api is under the

00:17:43,450 --> 00:17:46,830
everything as code kind of calendar bin

00:17:46,150 --> 00:17:49,590
kind of

00:17:46,830 --> 00:17:50,790
is a non-ideal upstream API sometimes

00:17:49,590 --> 00:17:52,890
you may only be able to create a

00:17:50,790 --> 00:17:54,480
read-only provider so it only reads it

00:17:52,890 --> 00:17:56,190
in there's something a terraform called

00:17:54,480 --> 00:17:58,110
data sources so you would have to build

00:17:56,190 --> 00:18:00,690
some structure to just read things in

00:17:58,110 --> 00:18:02,880
into a data source you could also write

00:18:00,690 --> 00:18:04,260
your own client and teammate of mine

00:18:02,880 --> 00:18:06,480
Mishra who's originally gonna give this

00:18:04,260 --> 00:18:10,380
talk he actually had to write a wrapper

00:18:06,480 --> 00:18:12,060
around some PHP to actually use an API

00:18:10,380 --> 00:18:13,650
it was a very complicated convoluted

00:18:12,060 --> 00:18:15,150
situation but he had to write his own

00:18:13,650 --> 00:18:18,210
goal and client there wrapped around PHP

00:18:15,150 --> 00:18:21,000
and so then that's also an issue it's

00:18:18,210 --> 00:18:23,100
also an option and testing is really

00:18:21,000 --> 00:18:24,690
important actually in this space you

00:18:23,100 --> 00:18:27,030
have to express functionality in the

00:18:24,690 --> 00:18:28,680
form of acceptance tests it's not just

00:18:27,030 --> 00:18:30,270
because then it won't be accepted as a

00:18:28,680 --> 00:18:32,010
provider but it also tells you if things

00:18:30,270 --> 00:18:35,130
break especially when you create read

00:18:32,010 --> 00:18:36,720
update delete and also examine if your

00:18:35,130 --> 00:18:38,400
face changes with contract tests I'll

00:18:36,720 --> 00:18:41,790
show you something that happened with

00:18:38,400 --> 00:18:45,360
the medium provider so I actually have

00:18:41,790 --> 00:18:46,890
this as a sub-module in here too but if

00:18:45,360 --> 00:18:52,970
you actually look at the medium provider

00:18:46,890 --> 00:18:56,250
on my github you'll notice that there is

00:18:52,970 --> 00:18:58,590
a lovely set of things called read

00:18:56,250 --> 00:19:00,210
medium and I had to implement a client

00:18:58,590 --> 00:19:03,210
just for reading from the public

00:19:00,210 --> 00:19:04,950
endpoint because fun fact the medium API

00:19:03,210 --> 00:19:06,420
does not actually allow you to read I

00:19:04,950 --> 00:19:09,480
have to read it from a public endpoint

00:19:06,420 --> 00:19:11,310
and then scrape it as JSON so the best

00:19:09,480 --> 00:19:14,250
way to explain this is to say I have to

00:19:11,310 --> 00:19:17,790
go to medium comm and format JSON and

00:19:14,250 --> 00:19:19,680
unfortunately this schema here they made

00:19:17,790 --> 00:19:23,340
some changes to it so the result was

00:19:19,680 --> 00:19:24,900
that it broke my provider yesterday so I

00:19:23,340 --> 00:19:27,360
wish I had the contract test to tell me

00:19:24,900 --> 00:19:29,070
that they changed the schema so

00:19:27,360 --> 00:19:30,630
something to implement in the future if

00:19:29,070 --> 00:19:32,820
you decide to do your own but as you can

00:19:30,630 --> 00:19:35,310
see here very similar structure to what

00:19:32,820 --> 00:19:38,040
I had in my own provider I basically

00:19:35,310 --> 00:19:39,750
said resource image resource Post both

00:19:38,040 --> 00:19:41,580
of them actually run through acceptance

00:19:39,750 --> 00:19:44,670
tests to determine how I'm going to

00:19:41,580 --> 00:19:48,810
create it there's post there's an image

00:19:44,670 --> 00:19:51,390
so everything here and actually when I

00:19:48,810 --> 00:19:57,600
go through this terraform provider

00:19:51,390 --> 00:19:58,620
medium what you'll see is therefore in

00:19:57,600 --> 00:20:00,360
it

00:19:58,620 --> 00:20:03,450
I built my plugin so the

00:20:00,360 --> 00:20:05,780
plug-in is a local binary I moved it

00:20:03,450 --> 00:20:10,980
into this folder so that I could use it

00:20:05,780 --> 00:20:12,179
but when I do a terraform plan well it's

00:20:10,980 --> 00:20:13,830
gonna tell me hey you didn't

00:20:12,179 --> 00:20:15,360
authenticate you need a medium access

00:20:13,830 --> 00:20:16,830
token right so there are these things

00:20:15,360 --> 00:20:19,650
that you can actually put in error

00:20:16,830 --> 00:20:21,900
handling etc that you should put in to

00:20:19,650 --> 00:20:24,600
make sure things are good right all

00:20:21,900 --> 00:20:26,280
right so that repository is up there I'm

00:20:24,600 --> 00:20:29,220
coming up on time but I have one last

00:20:26,280 --> 00:20:30,390
thing that I wanted to share if you ever

00:20:29,220 --> 00:20:32,010
have questions on this feel free to

00:20:30,390 --> 00:20:34,890
message me my contact will be at the end

00:20:32,010 --> 00:20:35,400
of this alright so first of all you know

00:20:34,890 --> 00:20:37,740
this is great

00:20:35,400 --> 00:20:40,169
I made log as code for myself basically

00:20:37,740 --> 00:20:41,340
now I write things in markdown when I'm

00:20:40,169 --> 00:20:43,799
on the plane and then when I get off the

00:20:41,340 --> 00:20:46,290
plane I do a git push you know and I can

00:20:43,799 --> 00:20:48,299
say like Oh terraform plan apply in my

00:20:46,290 --> 00:20:51,600
pipeline and then it publishes it to

00:20:48,299 --> 00:20:52,950
medium now the thing is that a lot of

00:20:51,600 --> 00:20:54,840
people kind of want it to make better

00:20:52,950 --> 00:20:56,520
workflows for themselves right they said

00:20:54,840 --> 00:20:58,650
I want to do alerts as code that's where

00:20:56,520 --> 00:20:59,190
data dog or fauna page or duty also have

00:20:58,650 --> 00:21:01,320
that right

00:20:59,190 --> 00:21:03,809
you can configure alerts code you can't

00:21:01,320 --> 00:21:07,049
reduce codes you know set Fargo as a toy

00:21:03,809 --> 00:21:08,640
example wrote a Google Calendar Google

00:21:07,049 --> 00:21:10,049
Calendar so you could say reform plan

00:21:08,640 --> 00:21:12,120
and apply your Google Calendar if you

00:21:10,049 --> 00:21:15,090
want to configure G suite there's also

00:21:12,120 --> 00:21:17,340
one written by a community member to

00:21:15,090 --> 00:21:19,590
duyst was also a toy example two twigs

00:21:17,340 --> 00:21:21,809
ample time and the meetup provider is

00:21:19,590 --> 00:21:24,419
something that Mishra my teammate wrote

00:21:21,809 --> 00:21:27,630
that's the one with the PHP situation

00:21:24,419 --> 00:21:29,730
that's - coming soon but the idea was to

00:21:27,630 --> 00:21:31,740
help better orchestrate and we have a

00:21:29,730 --> 00:21:33,270
lot of user communities so and we get

00:21:31,740 --> 00:21:34,950
tired of having to manually create them

00:21:33,270 --> 00:21:37,799
every time so that's why I terraform

00:21:34,950 --> 00:21:40,559
planet is code there's also Domino's

00:21:37,799 --> 00:21:43,410
Pizza one written as a semi joke from a

00:21:40,559 --> 00:21:45,690
Google cloud provider terraform provider

00:21:43,410 --> 00:21:47,820
developer but it does work so you could

00:21:45,690 --> 00:21:49,380
get pizzas code and another teammate of

00:21:47,820 --> 00:21:51,480
mine Xander wrote Pokemon so you can

00:21:49,380 --> 00:21:53,940
catch em all as code however the Pokemon

00:21:51,480 --> 00:21:55,350
is read-only so I warn you you can't

00:21:53,940 --> 00:21:57,270
actually catch them all's code you can

00:21:55,350 --> 00:21:58,710
only read the names of the Pokemon so

00:21:57,270 --> 00:22:01,350
people can get really crazy with this

00:21:58,710 --> 00:22:02,820
right but let's just think about

00:22:01,350 --> 00:22:04,290
something that's more practical and

00:22:02,820 --> 00:22:06,330
something that to me personally was more

00:22:04,290 --> 00:22:08,220
important so when I started publishing

00:22:06,330 --> 00:22:09,929
these blogs two years ago I didn't think

00:22:08,220 --> 00:22:11,970
they'd get that much traction I didn't

00:22:09,929 --> 00:22:13,450
think people care really but then I

00:22:11,970 --> 00:22:15,789
started getting a lot of comments from

00:22:13,450 --> 00:22:18,130
the world to me saying I like your blog

00:22:15,789 --> 00:22:21,279
it really helped me do something but I

00:22:18,130 --> 00:22:23,320
don't speak much English and can you

00:22:21,279 --> 00:22:25,450
offer some kind of translation is there

00:22:23,320 --> 00:22:26,980
something available and it's a hard

00:22:25,450 --> 00:22:28,480
question to answer right because it's

00:22:26,980 --> 00:22:29,889
like do I take time to make a

00:22:28,480 --> 00:22:32,440
translation and their answer is well I

00:22:29,889 --> 00:22:34,090
would love to but time I don't have time

00:22:32,440 --> 00:22:36,399
and I don't want to just give it to

00:22:34,090 --> 00:22:37,870
someone and find a native speaker to

00:22:36,399 --> 00:22:42,460
figure out how they can translate it for

00:22:37,870 --> 00:22:44,799
me from scratch so can I do better what

00:22:42,460 --> 00:22:46,779
if I use the Google Translate a Google

00:22:44,799 --> 00:22:50,830
cloud Translate API what if I could do

00:22:46,779 --> 00:22:54,639
that and so when I looked into this I

00:22:50,830 --> 00:22:56,289
said well what if what I could do was

00:22:54,639 --> 00:22:59,200
write my own provider for Google

00:22:56,289 --> 00:23:01,840
Translate which by the way was actually

00:22:59,200 --> 00:23:04,450
pretty easy they have an API that just

00:23:01,840 --> 00:23:07,870
fires the job so really all I did was

00:23:04,450 --> 00:23:10,269
implement a resource text and all it

00:23:07,870 --> 00:23:12,850
does is fire the job off to Google Cloud

00:23:10,269 --> 00:23:14,289
there's no create update or delete like

00:23:12,850 --> 00:23:16,899
I've pointed out before because it's

00:23:14,289 --> 00:23:18,490
just job so it creates it every time but

00:23:16,899 --> 00:23:21,340
yeah there's no tracking the job ID

00:23:18,490 --> 00:23:22,990
anyway there's a long story but what if

00:23:21,340 --> 00:23:24,730
I could actually take my medium provider

00:23:22,990 --> 00:23:28,929
and the Google Translate provider I

00:23:24,730 --> 00:23:30,190
wrote and chain them together and what I

00:23:28,929 --> 00:23:33,940
would actually do is really actually

00:23:30,190 --> 00:23:38,049
blog his code right where I could

00:23:33,940 --> 00:23:40,450
specify in my terraform a post that I

00:23:38,049 --> 00:23:44,260
read from markdown publish it to medium

00:23:40,450 --> 00:23:46,779
in English translate it to Spanish from

00:23:44,260 --> 00:23:49,899
my English markdown file publish it in

00:23:46,779 --> 00:23:52,510
Spanish and for the Chinese translation

00:23:49,899 --> 00:23:54,730
a lot of the Chinese readers they said

00:23:52,510 --> 00:23:56,769
we don't really access medium we'd like

00:23:54,730 --> 00:23:59,710
it to be on a different platform because

00:23:56,769 --> 00:24:00,760
of access what if I could just publish

00:23:59,710 --> 00:24:02,409
that elsewhere I haven't actually

00:24:00,760 --> 00:24:05,830
determined where elsewhere but right now

00:24:02,409 --> 00:24:08,649
it's a markdown file in Chinese so what

00:24:05,830 --> 00:24:13,090
if I could do all of this and the answer

00:24:08,649 --> 00:24:16,690
is as you can guess yes now do I know if

00:24:13,090 --> 00:24:18,730
it's completely correct I'm not actually

00:24:16,690 --> 00:24:22,450
terribly sure so that's why I'm going to

00:24:18,730 --> 00:24:24,519
still have a lot of this vetted by some

00:24:22,450 --> 00:24:27,220
friends I know who speak the languages

00:24:24,519 --> 00:24:29,110
more fluently than I do

00:24:27,220 --> 00:24:33,330
but as you can see created five

00:24:29,110 --> 00:24:35,710
resources I have my mark down in Chinese

00:24:33,330 --> 00:24:41,050
so I can give this to a Chinese reader

00:24:35,710 --> 00:24:45,840
and I also have if I go to medium I also

00:24:41,050 --> 00:24:48,940
have my drafts here for review in

00:24:45,840 --> 00:24:50,590
Spanish so I can have a Spanish friend

00:24:48,940 --> 00:24:54,160
of mine review it make sure that things

00:24:50,590 --> 00:24:55,690
are being translated correctly and so

00:24:54,160 --> 00:24:58,060
the point of all of this right wasn't

00:24:55,690 --> 00:25:00,820
that I wanted to necessarily personally

00:24:58,060 --> 00:25:04,450
make my mark down to publish to blog

00:25:00,820 --> 00:25:06,010
easier that wasn't all the case and if

00:25:04,450 --> 00:25:07,990
you're curious there's a blogs code demo

00:25:06,010 --> 00:25:09,640
for the translation it's also in the

00:25:07,990 --> 00:25:12,400
same repository kept it all in one place

00:25:09,640 --> 00:25:14,440
for everybody but it's actually doing

00:25:12,400 --> 00:25:15,820
better through code right so the whole

00:25:14,440 --> 00:25:17,680
point of DevOps and the whole point of

00:25:15,820 --> 00:25:19,240
why we're all in here it's not about

00:25:17,680 --> 00:25:20,860
tools it's not about terraform as much

00:25:19,240 --> 00:25:22,750
as I talked about terraform today and

00:25:20,860 --> 00:25:24,610
it's about doing better through code

00:25:22,750 --> 00:25:26,800
right it's about saying that I can do

00:25:24,610 --> 00:25:28,360
better I can do my work better but I can

00:25:26,800 --> 00:25:31,420
also empower someone else to do better

00:25:28,360 --> 00:25:33,760
through my code and leveraging it so

00:25:31,420 --> 00:25:35,380
with that in mind I challenge you to go

00:25:33,760 --> 00:25:38,050
out write your own provider to do better

00:25:35,380 --> 00:25:40,890
right and maybe someone else might find

00:25:38,050 --> 00:25:43,820
that useful too Thanks

00:25:40,890 --> 00:25:46,140
[Applause]

00:25:43,820 --> 00:25:46,330
[Music]

00:25:46,140 --> 00:25:49,340
[Applause]

00:25:46,330 --> 00:25:51,400
[Music]

00:25:49,340 --> 00:25:51,400

YouTube URL: https://www.youtube.com/watch?v=-4jWcw9tOVw


