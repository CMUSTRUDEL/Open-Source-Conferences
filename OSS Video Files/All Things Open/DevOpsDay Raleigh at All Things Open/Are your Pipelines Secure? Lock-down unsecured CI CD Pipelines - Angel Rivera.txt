Title: Are your Pipelines Secure? Lock-down unsecured CI CD Pipelines - Angel Rivera
Publication date: 2020-12-03
Playlist: DevOpsDay Raleigh at All Things Open
Description: 
	Presented by: Angel Rivera, CircleCI
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: Most CI/CD pipelines used by DevOps teams utilize integrations with services such as APIs, databases and other critical systems to complete their workflows. These integrations usually required the use of extremely sensitive secrets such as passwords, tokens or certificates and must be securely protected at all times. Unauthorized access of these pipeline secrets open these systems to threats from bad actors and illegal access of data.

In this talk Angel will discuss common pain points in properly securing applications, CI/CD pipelines and protecting sensitive access gates to integration targets. Attendees will learn strategies to secure their applications, sensitive data and pipeline integration points. Attendees will leave with a better understanding of how to implement security layers that can improve their pipeline security posture.
Captions: 
	00:00:06,319 --> 00:00:11,200
well thank you katie

00:00:08,400 --> 00:00:13,360
and i want to say hello and thank you to

00:00:11,200 --> 00:00:16,640
everybody for uh

00:00:13,360 --> 00:00:19,520
joining uh this talk uh

00:00:16,640 --> 00:00:20,560
i'm super excited to give it today uh

00:00:19,520 --> 00:00:23,359
i've been actually

00:00:20,560 --> 00:00:23,760
um giving tons of talks this past month

00:00:23,359 --> 00:00:25,279
and

00:00:23,760 --> 00:00:28,880
uh this is one by far one of my

00:00:25,279 --> 00:00:31,599
favorites so uh yeah let's get started

00:00:28,880 --> 00:00:33,200
and by the way uh if anyone i guess has

00:00:31,599 --> 00:00:36,559
questions or whatever

00:00:33,200 --> 00:00:38,480
i figure uh we could talk about them

00:00:36,559 --> 00:00:41,680
after

00:00:38,480 --> 00:00:43,680
so real quick here's an agenda into what

00:00:41,680 --> 00:00:45,680
i'm going to speak about today

00:00:43,680 --> 00:00:47,760
i'm just going to cover a little bit

00:00:45,680 --> 00:00:50,079
about software development life cycles

00:00:47,760 --> 00:00:53,120
and how they relate to ci cd

00:00:50,079 --> 00:00:56,559
i'm going to talk about devops and how

00:00:53,120 --> 00:00:58,320
they integrate into pipelines and just

00:00:56,559 --> 00:00:59,920
talk about securing those pipelines

00:00:58,320 --> 00:01:02,160
right some of the things

00:00:59,920 --> 00:01:04,159
that folks are having trouble with uh

00:01:02,160 --> 00:01:04,640
regarding security and pipelines and

00:01:04,159 --> 00:01:07,680
then

00:01:04,640 --> 00:01:09,520
just recapping it all so

00:01:07,680 --> 00:01:11,360
my name is angel rivera i'm a developer

00:01:09,520 --> 00:01:13,920
advocate for circle ci

00:01:11,360 --> 00:01:14,960
and in my role at circleci i'm basically

00:01:13,920 --> 00:01:16,880
out engaging

00:01:14,960 --> 00:01:18,799
the developer community uh the

00:01:16,880 --> 00:01:22,080
technology compu community in general

00:01:18,799 --> 00:01:24,960
actually and uh in these conversations

00:01:22,080 --> 00:01:27,200
that i have with folks i'm always

00:01:24,960 --> 00:01:28,159
really super surprised and excited to

00:01:27,200 --> 00:01:31,040
learn how people

00:01:28,159 --> 00:01:31,439
are using technology in their day-to-day

00:01:31,040 --> 00:01:33,920
uh

00:01:31,439 --> 00:01:35,520
also learning you know what what

00:01:33,920 --> 00:01:38,560
actually ails them as well right

00:01:35,520 --> 00:01:41,439
when using these technologies so

00:01:38,560 --> 00:01:43,040
uh in these conversations it's it

00:01:41,439 --> 00:01:46,000
becomes apparently clear you know

00:01:43,040 --> 00:01:47,439
uh there's there's some lacking in uh

00:01:46,000 --> 00:01:49,200
security which is kind of the

00:01:47,439 --> 00:01:52,240
inspiration for this talk

00:01:49,200 --> 00:01:53,600
uh and specifically security within ci

00:01:52,240 --> 00:01:56,719
cd pipelines

00:01:53,600 --> 00:01:58,000
and cicd tooling so there's my twitter

00:01:56,719 --> 00:02:01,119
handle at the bottom

00:01:58,000 --> 00:02:05,040
so if anyone wants to reach out to me uh

00:02:01,119 --> 00:02:07,520
online after the event feel free to

00:02:05,040 --> 00:02:09,759
you know reach out via twitter the the

00:02:07,520 --> 00:02:12,000
best medium to get me on these days

00:02:09,759 --> 00:02:13,360
uh so yeah if you need to reach out to

00:02:12,000 --> 00:02:15,520
me or want to reach out discuss

00:02:13,360 --> 00:02:16,879
pretty much anything uh hit me up at

00:02:15,520 --> 00:02:20,480
punk data

00:02:16,879 --> 00:02:22,000
on twitter so let's start with uh

00:02:20,480 --> 00:02:23,520
the history of software development i

00:02:22,000 --> 00:02:26,640
like to kind of start

00:02:23,520 --> 00:02:29,120
in the past and then talk about how uh

00:02:26,640 --> 00:02:29,760
things are impacted today and how you

00:02:29,120 --> 00:02:31,360
know

00:02:29,760 --> 00:02:32,800
the his the history of things and then

00:02:31,360 --> 00:02:34,239
talk about how things are actually

00:02:32,800 --> 00:02:37,680
occurring today

00:02:34,239 --> 00:02:39,120
so um when i started developing software

00:02:37,680 --> 00:02:41,040
back in the day

00:02:39,120 --> 00:02:42,720
our software development practices are

00:02:41,040 --> 00:02:46,160
basically of

00:02:42,720 --> 00:02:47,040
a method called waterfall uh i'm not

00:02:46,160 --> 00:02:50,400
sure if there's

00:02:47,040 --> 00:02:52,400
people on uh or attending that that

00:02:50,400 --> 00:02:54,959
actually understand what waterfall is so

00:02:52,400 --> 00:02:57,920
i'm going to cover that a little bit

00:02:54,959 --> 00:02:59,519
but basically um in the waterfall

00:02:57,920 --> 00:03:02,560
software development

00:02:59,519 --> 00:03:04,640
life cycle or or strategy

00:03:02,560 --> 00:03:05,760
you're basically given a bunch of work

00:03:04,640 --> 00:03:07,920
right so

00:03:05,760 --> 00:03:09,040
um these are obviously requirements for

00:03:07,920 --> 00:03:11,920
software

00:03:09,040 --> 00:03:12,560
and the way it used to work was you know

00:03:11,920 --> 00:03:15,519
you get

00:03:12,560 --> 00:03:15,920
a project and they they basically give

00:03:15,519 --> 00:03:18,400
you

00:03:15,920 --> 00:03:20,959
all of the requirements all at once

00:03:18,400 --> 00:03:22,800
which wasn't really a problem but the

00:03:20,959 --> 00:03:25,040
the problem actually became prevalent

00:03:22,800 --> 00:03:26,879
later on in the process when you were

00:03:25,040 --> 00:03:29,440
developing your software

00:03:26,879 --> 00:03:31,280
uh and um you know you were given

00:03:29,440 --> 00:03:33,200
basically all of the work up front

00:03:31,280 --> 00:03:34,640
even if you broke it down into smaller

00:03:33,200 --> 00:03:36,400
components it still was

00:03:34,640 --> 00:03:37,680
um the way that we developed software

00:03:36,400 --> 00:03:39,519
was uh

00:03:37,680 --> 00:03:41,120
the methodology was that you would

00:03:39,519 --> 00:03:43,680
develop a you know a little bit of

00:03:41,120 --> 00:03:45,200
of your task or your software your the

00:03:43,680 --> 00:03:46,879
stuff you're responsible for

00:03:45,200 --> 00:03:48,879
but there was always a dependency on

00:03:46,879 --> 00:03:51,120
something being completed before

00:03:48,879 --> 00:03:52,159
you were able to complete your specific

00:03:51,120 --> 00:03:55,040
project

00:03:52,159 --> 00:03:55,439
so as you can imagine that would end up

00:03:55,040 --> 00:03:58,080
with

00:03:55,439 --> 00:03:59,519
causing a lot of blockage right in how

00:03:58,080 --> 00:04:01,760
we develop software

00:03:59,519 --> 00:04:03,599
so again right if you look at this

00:04:01,760 --> 00:04:04,879
diagram of the waterfall kind of

00:04:03,599 --> 00:04:06,799
development process

00:04:04,879 --> 00:04:08,720
at the top right they give you the the

00:04:06,799 --> 00:04:09,360
requirements analysis is completed then

00:04:08,720 --> 00:04:12,000
they

00:04:09,360 --> 00:04:13,680
kind of create a high level design and

00:04:12,000 --> 00:04:14,480
then they kind of break that apart and

00:04:13,680 --> 00:04:17,359
give you

00:04:14,480 --> 00:04:18,720
basically a whole chunk of work to do

00:04:17,359 --> 00:04:21,519
all at once

00:04:18,720 --> 00:04:22,079
and again right so if i'm working on a

00:04:21,519 --> 00:04:23,840
project

00:04:22,079 --> 00:04:25,360
or a piece of a project and my

00:04:23,840 --> 00:04:26,479
co-workers or my peers are working on

00:04:25,360 --> 00:04:28,560
another

00:04:26,479 --> 00:04:29,919
a couple other pieces of the project

00:04:28,560 --> 00:04:30,800
there's going to be dependencies there

00:04:29,919 --> 00:04:32,880
in the waterfall

00:04:30,800 --> 00:04:34,800
development life cycle where you know i

00:04:32,880 --> 00:04:36,479
have to do i have to wait

00:04:34,800 --> 00:04:38,320
even if i finish it two weeks early i

00:04:36,479 --> 00:04:40,479
still have to wait for my other team

00:04:38,320 --> 00:04:42,240
mates to finish their piece of this this

00:04:40,479 --> 00:04:44,320
project right and

00:04:42,240 --> 00:04:46,800
obviously right that that leaves that

00:04:44,320 --> 00:04:49,280
leads to blocking uh situations and that

00:04:46,800 --> 00:04:51,199
extends right the the life cycle of that

00:04:49,280 --> 00:04:52,800
that software in that project

00:04:51,199 --> 00:04:54,560
and back in the day right used to take

00:04:52,800 --> 00:04:55,120
quite a bit of time to get things done

00:04:54,560 --> 00:04:57,280
be

00:04:55,120 --> 00:04:58,800
mainly because of these situations where

00:04:57,280 --> 00:04:59,759
we're developing in this waterfall

00:04:58,800 --> 00:05:03,360
development

00:04:59,759 --> 00:05:04,960
uh manner and um yeah so just keep an

00:05:03,360 --> 00:05:06,479
eye on this diagram right you can see

00:05:04,960 --> 00:05:07,520
where everything's kind of blocking and

00:05:06,479 --> 00:05:10,560
sequential

00:05:07,520 --> 00:05:12,800
and uh right uh it's just as you can see

00:05:10,560 --> 00:05:14,720
it just slows things down

00:05:12,800 --> 00:05:16,400
now we're developers right we're

00:05:14,720 --> 00:05:18,960
technology people

00:05:16,400 --> 00:05:20,320
we realize that this is inefficient and

00:05:18,960 --> 00:05:23,600
unoptimized

00:05:20,320 --> 00:05:27,520
uh so right around 2000 right

00:05:23,600 --> 00:05:29,680
1999 2000s this um manifesto

00:05:27,520 --> 00:05:31,759
came about which is the agile manifesto

00:05:29,680 --> 00:05:33,919
so this is where a bunch of really smart

00:05:31,759 --> 00:05:36,160
people got together and decided that

00:05:33,919 --> 00:05:37,120
yeah we can develop software in a better

00:05:36,160 --> 00:05:39,360
manner right and

00:05:37,120 --> 00:05:41,440
it kind of got coined the term this new

00:05:39,360 --> 00:05:44,560
kind of development software

00:05:41,440 --> 00:05:48,000
uh process was coined as agile

00:05:44,560 --> 00:05:49,520
and all they really did was look at

00:05:48,000 --> 00:05:52,479
waterfall and the way that we were

00:05:49,520 --> 00:05:55,440
developing software previously and

00:05:52,479 --> 00:05:56,160
decided to figure out that well okay so

00:05:55,440 --> 00:05:58,639
now we

00:05:56,160 --> 00:05:59,919
we were building things right in in mass

00:05:58,639 --> 00:06:02,319
and in volume

00:05:59,919 --> 00:06:03,520
uh they decided to take those tasks that

00:06:02,319 --> 00:06:05,280
were being kind of

00:06:03,520 --> 00:06:06,800
that were blocking everything and they

00:06:05,280 --> 00:06:09,120
broke it apart right

00:06:06,800 --> 00:06:11,199
so now when you take those tasks that

00:06:09,120 --> 00:06:13,360
you had and you were able to

00:06:11,199 --> 00:06:14,639
break things apart into smaller chunks

00:06:13,360 --> 00:06:16,639
then people can actually

00:06:14,639 --> 00:06:18,160
you know accomplish a couple things

00:06:16,639 --> 00:06:20,960
which is

00:06:18,160 --> 00:06:22,160
understanding the scope of the task that

00:06:20,960 --> 00:06:25,360
they were assigned

00:06:22,160 --> 00:06:27,759
as well as being able to develop uh

00:06:25,360 --> 00:06:28,479
you know those the the requirements for

00:06:27,759 --> 00:06:30,960
the for that

00:06:28,479 --> 00:06:32,479
for that task uh rather quickly and then

00:06:30,960 --> 00:06:32,960
they were able to go back and get

00:06:32,479 --> 00:06:36,000
another

00:06:32,960 --> 00:06:37,759
piece of of work right or another task

00:06:36,000 --> 00:06:39,919
that's on the list in the sprint

00:06:37,759 --> 00:06:40,880
so if you look at the center of this

00:06:39,919 --> 00:06:42,560
diagram

00:06:40,880 --> 00:06:43,680
you can see there's a scrub master

00:06:42,560 --> 00:06:44,960
product owner right and then a

00:06:43,680 --> 00:06:46,880
development team

00:06:44,960 --> 00:06:48,000
and basically all of these people are

00:06:46,880 --> 00:06:51,360
participants in this

00:06:48,000 --> 00:06:52,639
agile software development cycle and

00:06:51,360 --> 00:06:54,560
there's a lot of movement here right

00:06:52,639 --> 00:06:55,919
unlike the other the previous diagram i

00:06:54,560 --> 00:06:56,160
showed you for waterfall there's a lot

00:06:55,919 --> 00:06:58,880
of

00:06:56,160 --> 00:07:00,800
arrows and circles right and the idea

00:06:58,880 --> 00:07:02,319
there again was to just speed things up

00:07:00,800 --> 00:07:02,880
right break things apart make them

00:07:02,319 --> 00:07:06,080
smaller

00:07:02,880 --> 00:07:08,720
smaller more manageable and uh be able

00:07:06,080 --> 00:07:10,000
to accomplish these things much faster

00:07:08,720 --> 00:07:12,160
and then you can come back right and

00:07:10,000 --> 00:07:14,880
finish one thing come back and and

00:07:12,160 --> 00:07:16,400
and work on another task right to help

00:07:14,880 --> 00:07:17,840
help with the cause

00:07:16,400 --> 00:07:19,440
but as you can see again right there's a

00:07:17,840 --> 00:07:22,400
lot of movement there's a lot of

00:07:19,440 --> 00:07:23,039
of things happening at the same time

00:07:22,400 --> 00:07:24,800
which

00:07:23,039 --> 00:07:26,240
again is very different from the

00:07:24,800 --> 00:07:30,160
waterfall

00:07:26,240 --> 00:07:33,440
development process so

00:07:30,160 --> 00:07:36,080
once we've created this agile system

00:07:33,440 --> 00:07:37,919
right uh which created again a lot of

00:07:36,080 --> 00:07:40,080
speed make things more efficient

00:07:37,919 --> 00:07:41,840
as far as managing projects and tasks

00:07:40,080 --> 00:07:43,680
within software development

00:07:41,840 --> 00:07:45,360
we're smart enough to understand those

00:07:43,680 --> 00:07:46,400
patterns right identify those patterns

00:07:45,360 --> 00:07:49,440
and that's where kind of

00:07:46,400 --> 00:07:50,800
continuous delivery and ci cd was kind

00:07:49,440 --> 00:07:53,360
of born out of

00:07:50,800 --> 00:07:54,639
um you know once the agile patterns were

00:07:53,360 --> 00:07:56,560
established

00:07:54,639 --> 00:07:58,319
we could also then create these

00:07:56,560 --> 00:08:00,240
practices and principles around those

00:07:58,319 --> 00:08:02,879
patterns in agile

00:08:00,240 --> 00:08:04,720
that help us kind of again get that get

00:08:02,879 --> 00:08:07,360
that movement going right continuous

00:08:04,720 --> 00:08:09,919
integration continuous delivery

00:08:07,360 --> 00:08:12,000
making sure that your code is being

00:08:09,919 --> 00:08:14,800
implemented as quickly as possible into

00:08:12,000 --> 00:08:15,440
the the code base and that your peers

00:08:14,800 --> 00:08:17,280
are actually

00:08:15,440 --> 00:08:19,199
being able to you know take a look at

00:08:17,280 --> 00:08:21,120
that work you've done

00:08:19,199 --> 00:08:22,479
and collaborate on it and then of course

00:08:21,120 --> 00:08:24,960
the delivery piece

00:08:22,479 --> 00:08:26,400
uh or the deployment piece was is where

00:08:24,960 --> 00:08:29,840
you know you're actually releasing the

00:08:26,400 --> 00:08:31,919
that work you've done right so

00:08:29,840 --> 00:08:33,360
this is i'm sure most of you have seen

00:08:31,919 --> 00:08:36,399
this diagram before

00:08:33,360 --> 00:08:37,360
uh they i call it like the cicd devops

00:08:36,399 --> 00:08:39,760
infinity loop

00:08:37,360 --> 00:08:40,479
and it just basically defines the

00:08:39,760 --> 00:08:42,560
different

00:08:40,479 --> 00:08:44,080
general phases of software development

00:08:42,560 --> 00:08:46,880
and and then also

00:08:44,080 --> 00:08:48,959
on the op side it also defines like the

00:08:46,880 --> 00:08:49,839
release processes right and and they're

00:08:48,959 --> 00:08:53,360
just generic

00:08:49,839 --> 00:08:54,720
kind of um identifiers for for how this

00:08:53,360 --> 00:08:57,120
process goes

00:08:54,720 --> 00:08:59,120
uh but it's a really nice graphic to

00:08:57,120 --> 00:09:01,760
kind of show again the movement of where

00:08:59,120 --> 00:09:03,279
things start and how they end and if you

00:09:01,760 --> 00:09:05,360
can see here right they don't really

00:09:03,279 --> 00:09:06,320
end they just start over again because

00:09:05,360 --> 00:09:08,480
software's

00:09:06,320 --> 00:09:10,480
kind of always iterating right and

00:09:08,480 --> 00:09:12,480
changing and being released

00:09:10,480 --> 00:09:15,040
so this is a great kind of visual for

00:09:12,480 --> 00:09:18,240
for ci cd and devops

00:09:15,040 --> 00:09:21,360
but cicd in general is

00:09:18,240 --> 00:09:23,440
a practice and a principle right so um

00:09:21,360 --> 00:09:25,040
and here are some of the principles for

00:09:23,440 --> 00:09:26,000
ci so we're talking about continuous

00:09:25,040 --> 00:09:27,680
integration

00:09:26,000 --> 00:09:29,760
at this point and they generally apply

00:09:27,680 --> 00:09:30,560
to developers right in the development

00:09:29,760 --> 00:09:32,880
sense

00:09:30,560 --> 00:09:35,040
uh so right one of the benefits is uh

00:09:32,880 --> 00:09:37,360
you're writing and committing code often

00:09:35,040 --> 00:09:38,240
right taking that uh instead of waiting

00:09:37,360 --> 00:09:40,640
for some other

00:09:38,240 --> 00:09:43,279
folks to finish their project developers

00:09:40,640 --> 00:09:44,880
can individually contribute at a pace

00:09:43,279 --> 00:09:48,480
that's kind of suited to their

00:09:44,880 --> 00:09:50,080
their work kind of work uh cadence

00:09:48,480 --> 00:09:52,320
also you're committing to a shared code

00:09:50,080 --> 00:09:54,240
repository so that means anybody can

00:09:52,320 --> 00:09:55,839
who pulls those changes down into their

00:09:54,240 --> 00:09:57,519
branch can actually see

00:09:55,839 --> 00:09:59,040
what's happening within your code and

00:09:57,519 --> 00:09:59,519
what you're working on so that there are

00:09:59,040 --> 00:10:01,040
no

00:09:59,519 --> 00:10:02,399
you know kind of gotchas when

00:10:01,040 --> 00:10:03,600
everything's kind of merged together

00:10:02,399 --> 00:10:05,040
right this is a great way for

00:10:03,600 --> 00:10:07,839
collaboration

00:10:05,040 --> 00:10:09,760
uh then you're testing code right so on

00:10:07,839 --> 00:10:12,720
every commit for the most part

00:10:09,760 --> 00:10:15,200
uh and this is my the most favorite part

00:10:12,720 --> 00:10:16,959
of the benefit from from cicd for me at

00:10:15,200 --> 00:10:18,000
least is the fast feedback loops right

00:10:16,959 --> 00:10:19,440
so knowing when things

00:10:18,000 --> 00:10:21,279
are broken knowing when you have

00:10:19,440 --> 00:10:23,279
problems before you actually

00:10:21,279 --> 00:10:24,959
commit them to any code base that's

00:10:23,279 --> 00:10:28,160
always awesome right

00:10:24,959 --> 00:10:29,360
um so let's talk about continuous

00:10:28,160 --> 00:10:31,360
deployment

00:10:29,360 --> 00:10:32,720
and again that on the on the infinity

00:10:31,360 --> 00:10:34,160
loop side right that's more of the

00:10:32,720 --> 00:10:36,079
operational kind of

00:10:34,160 --> 00:10:37,279
principles and basically right what

00:10:36,079 --> 00:10:39,839
we're trying to achieve here

00:10:37,279 --> 00:10:40,959
is creating the latest release of your

00:10:39,839 --> 00:10:42,959
code right into

00:10:40,959 --> 00:10:45,279
into artifacts right we're generating

00:10:42,959 --> 00:10:46,880
artifacts uh then we're deploying those

00:10:45,279 --> 00:10:47,920
to whatever target environments or

00:10:46,880 --> 00:10:50,800
resources

00:10:47,920 --> 00:10:51,440
uh that you know we're we're pushing our

00:10:50,800 --> 00:10:53,440
code to

00:10:51,440 --> 00:10:54,640
and that people are using uh our

00:10:53,440 --> 00:10:56,800
services on

00:10:54,640 --> 00:10:58,480
uh we're also validating right that our

00:10:56,800 --> 00:10:59,680
apps and services are functioning

00:10:58,480 --> 00:11:00,800
meaning once they're deployed

00:10:59,680 --> 00:11:02,959
everything's kind of

00:11:00,800 --> 00:11:04,320
checked to make sure to ensure that you

00:11:02,959 --> 00:11:07,200
know we're getting the uh

00:11:04,320 --> 00:11:08,399
the application uh that we're the

00:11:07,200 --> 00:11:10,000
performance from the application that

00:11:08,399 --> 00:11:12,240
we're expecting and also

00:11:10,000 --> 00:11:13,440
uh all the data and stuff that comes out

00:11:12,240 --> 00:11:14,320
of that application making sure

00:11:13,440 --> 00:11:16,959
everything's kind of tip

00:11:14,320 --> 00:11:18,480
top for for the operations operation of

00:11:16,959 --> 00:11:20,160
that of that software

00:11:18,480 --> 00:11:22,720
and finally we want to monitor and

00:11:20,160 --> 00:11:24,240
verify that again the application is

00:11:22,720 --> 00:11:27,360
performing as well as

00:11:24,240 --> 00:11:28,160
or as as expected and if there's any

00:11:27,360 --> 00:11:29,680
issues right

00:11:28,160 --> 00:11:31,600
if we can establish some sort of

00:11:29,680 --> 00:11:33,360
recovery system

00:11:31,600 --> 00:11:35,200
uh so that the software kind of self

00:11:33,360 --> 00:11:36,959
heals

00:11:35,200 --> 00:11:38,720
so those are the practices and

00:11:36,959 --> 00:11:39,920
principles of ci cd

00:11:38,720 --> 00:11:42,240
meaning that you know these are the

00:11:39,920 --> 00:11:44,399
things that are kind of

00:11:42,240 --> 00:11:45,680
the the principles that are shared by

00:11:44,399 --> 00:11:47,920
every team member

00:11:45,680 --> 00:11:50,000
right and the organization uh but in

00:11:47,920 --> 00:11:50,560
order to make those cicd practices and

00:11:50,000 --> 00:11:52,480
principle

00:11:50,560 --> 00:11:53,760
principles of reality you have to

00:11:52,480 --> 00:11:56,639
implement automation

00:11:53,760 --> 00:11:58,480
right and that's where kind of a ci cd

00:11:56,639 --> 00:12:01,279
pipeline comes into play

00:11:58,480 --> 00:12:02,560
or our city tooling uh platform like

00:12:01,279 --> 00:12:04,320
circle ci

00:12:02,560 --> 00:12:06,480
comes into play right we we enable

00:12:04,320 --> 00:12:08,480
people to actually make that

00:12:06,480 --> 00:12:11,040
those practices and principles a reality

00:12:08,480 --> 00:12:11,360
using automation uh and basically you

00:12:11,040 --> 00:12:13,839
know

00:12:11,360 --> 00:12:15,680
when you establish a ci cd pipeline it's

00:12:13,839 --> 00:12:17,680
it's no different than any kind of like

00:12:15,680 --> 00:12:19,760
segmented pipeline you have maybe in

00:12:17,680 --> 00:12:23,839
like a plumbing situation right

00:12:19,760 --> 00:12:25,760
there's phases of a of a plumbing uh

00:12:23,839 --> 00:12:27,920
system that you know it goes through

00:12:25,760 --> 00:12:31,680
some of the summer elbow joints some are

00:12:27,920 --> 00:12:34,399
some are uh angle joints for uh

00:12:31,680 --> 00:12:34,720
you know to to get around corners uh but

00:12:34,399 --> 00:12:37,519
it's

00:12:34,720 --> 00:12:39,040
it's essentially a pipeline right uh and

00:12:37,519 --> 00:12:41,600
if you think about it that way

00:12:39,040 --> 00:12:43,600
uh it's just segmented pieces of work so

00:12:41,600 --> 00:12:45,920
that your processes are kind of again

00:12:43,600 --> 00:12:47,440
if you think about that agile uh space i

00:12:45,920 --> 00:12:49,600
was talking about right we're chunking

00:12:47,440 --> 00:12:50,240
up the work into smaller scalable or

00:12:49,600 --> 00:12:53,440
scaled

00:12:50,240 --> 00:12:55,200
or scoped out the chunks right that we

00:12:53,440 --> 00:12:56,959
can actually operate on and understand a

00:12:55,200 --> 00:12:59,680
little easier

00:12:56,959 --> 00:13:00,320
so here's an example of a ci cd pipeline

00:12:59,680 --> 00:13:02,480
taken

00:13:00,320 --> 00:13:04,240
right out of one of my circle ci

00:13:02,480 --> 00:13:06,160
dashboards

00:13:04,240 --> 00:13:08,240
if you can look to the to the left you

00:13:06,160 --> 00:13:11,600
can see what's happening here right um

00:13:08,240 --> 00:13:12,880
i'm developing or i'm uh my pipeline i

00:13:11,600 --> 00:13:13,760
changed some code my pipeline's

00:13:12,880 --> 00:13:15,200
triggered

00:13:13,760 --> 00:13:17,440
and what's happening is at the bottom

00:13:15,200 --> 00:13:19,200
i'm running tests i'm building docker

00:13:17,440 --> 00:13:21,440
images for that application and then i'm

00:13:19,200 --> 00:13:23,040
also creating a gk cluster which is a

00:13:21,440 --> 00:13:25,279
kubernetes cluster

00:13:23,040 --> 00:13:26,160
that i intend to deploy this application

00:13:25,279 --> 00:13:28,560
to

00:13:26,160 --> 00:13:29,360
now the on the left you see that i'm

00:13:28,560 --> 00:13:31,120
running

00:13:29,360 --> 00:13:33,440
three things at the same time those are

00:13:31,120 --> 00:13:35,600
running concurrently or in parallel

00:13:33,440 --> 00:13:37,279
and again um you know we're trying to

00:13:35,600 --> 00:13:39,120
chunk the work up into smaller

00:13:37,279 --> 00:13:40,560
bite-sized manageable pieces and that's

00:13:39,120 --> 00:13:41,760
how you do that within the pipeline

00:13:40,560 --> 00:13:43,920
right you define

00:13:41,760 --> 00:13:45,519
the things that you want to do and then

00:13:43,920 --> 00:13:48,160
you can actually create what we call

00:13:45,519 --> 00:13:49,680
jobs around those and as you can see

00:13:48,160 --> 00:13:50,480
right and then i'm deploying this

00:13:49,680 --> 00:13:52,160
application

00:13:50,480 --> 00:13:54,560
so all those little lines that you see

00:13:52,160 --> 00:13:57,600
there are what we call dependencies

00:13:54,560 --> 00:13:58,959
so that kind of leans back over to what

00:13:57,600 --> 00:14:01,440
i was talking about about waterfall

00:13:58,959 --> 00:14:03,279
deployments or development i should say

00:14:01,440 --> 00:14:05,360
remember we have dependencies so things

00:14:03,279 --> 00:14:07,760
can't progress until one thing is

00:14:05,360 --> 00:14:08,720
is complete in this case the only thing

00:14:07,760 --> 00:14:10,480
that's really

00:14:08,720 --> 00:14:12,240
dependent on this or should be dependent

00:14:10,480 --> 00:14:12,959
on is that that kubernetes cluster is

00:14:12,240 --> 00:14:14,560
created

00:14:12,959 --> 00:14:17,040
so that we can deploy our application

00:14:14,560 --> 00:14:19,600
now if i had some

00:14:17,040 --> 00:14:20,399
like requirement that my tests need to

00:14:19,600 --> 00:14:23,040
actually run

00:14:20,399 --> 00:14:24,399
which i do here then if any of those

00:14:23,040 --> 00:14:26,000
three fail

00:14:24,399 --> 00:14:27,519
the deployment of the application will

00:14:26,000 --> 00:14:29,120
not occur

00:14:27,519 --> 00:14:31,279
so again this is just a quick kind of

00:14:29,120 --> 00:14:32,639
visual to show you what a ci cd pipeline

00:14:31,279 --> 00:14:35,440
means in the sense that

00:14:32,639 --> 00:14:35,440
i was speaking of

00:14:35,680 --> 00:14:38,959
so let's talk about uh right when we're

00:14:38,000 --> 00:14:42,240
integrating

00:14:38,959 --> 00:14:43,920
pipelines into or we're integrating

00:14:42,240 --> 00:14:46,079
our pipelines into our workflows into

00:14:43,920 --> 00:14:48,399
our ci cd platforms

00:14:46,079 --> 00:14:49,279
uh these integrations basically have

00:14:48,399 --> 00:14:51,120
different types

00:14:49,279 --> 00:14:52,959
and the reason we have different types

00:14:51,120 --> 00:14:55,519
is because we're connecting

00:14:52,959 --> 00:14:57,519
into different systems right so just

00:14:55,519 --> 00:14:58,880
because we're running a ci cd pipeline

00:14:57,519 --> 00:15:00,560
like i said like you saw earlier i was

00:14:58,880 --> 00:15:02,959
creating a gke cluster

00:15:00,560 --> 00:15:04,240
i have to integrate my pipeline into

00:15:02,959 --> 00:15:06,560
like gcp

00:15:04,240 --> 00:15:07,760
right or google cloud platform in order

00:15:06,560 --> 00:15:11,120
for me to do that

00:15:07,760 --> 00:15:12,639
i need credentials secrets right and

00:15:11,120 --> 00:15:14,560
these integration types that i'm talking

00:15:12,639 --> 00:15:15,360
about can come in a bunch of different

00:15:14,560 --> 00:15:17,040
flavors right

00:15:15,360 --> 00:15:19,279
one the one i just described is more

00:15:17,040 --> 00:15:20,480
like i'm jumping into a cloud provider

00:15:19,279 --> 00:15:22,240
right and connecting into there and

00:15:20,480 --> 00:15:25,600
creating things

00:15:22,240 --> 00:15:27,440
uh with this other kind of type we have

00:15:25,600 --> 00:15:29,360
a list here right vulnerability scanning

00:15:27,440 --> 00:15:32,560
tools we can integrate things like

00:15:29,360 --> 00:15:34,240
sneak into uh our pipelines to ensure

00:15:32,560 --> 00:15:35,279
that you know we're doing some static

00:15:34,240 --> 00:15:37,040
analysis

00:15:35,279 --> 00:15:38,800
or we're scanning containers before they

00:15:37,040 --> 00:15:41,120
get deployed we're also

00:15:38,800 --> 00:15:42,880
you know able to integrate with apis

00:15:41,120 --> 00:15:44,240
right if we want to just grab some data

00:15:42,880 --> 00:15:47,199
from a service

00:15:44,240 --> 00:15:47,440
uh obviously uh database access and you

00:15:47,199 --> 00:15:51,839
know

00:15:47,440 --> 00:15:51,839
infrastructure as code tooling as well

00:15:52,320 --> 00:15:57,680
so since we're integrating all of these

00:15:56,000 --> 00:15:59,920
things into our pipelines right all

00:15:57,680 --> 00:16:00,880
these other services databases apis

00:15:59,920 --> 00:16:05,600
whatever

00:16:00,880 --> 00:16:09,040
um you know we're we're kind of now

00:16:05,600 --> 00:16:09,759
having to be cognizant of the fact that

00:16:09,040 --> 00:16:11,680
we're

00:16:09,759 --> 00:16:12,959
we're actually you know we have to

00:16:11,680 --> 00:16:14,639
protect credentials we're using

00:16:12,959 --> 00:16:17,040
credentials we're utilizing them within

00:16:14,639 --> 00:16:20,160
our pipeline so we need to protect that

00:16:17,040 --> 00:16:22,720
and there's always been this security

00:16:20,160 --> 00:16:23,680
element to devops but i don't think it

00:16:22,720 --> 00:16:27,759
was highly

00:16:23,680 --> 00:16:30,000
um uh i would say highly respected

00:16:27,759 --> 00:16:32,320
uh it was it was kind of ignored right

00:16:30,000 --> 00:16:33,040
and in the past few years we're seeing

00:16:32,320 --> 00:16:35,440
this now

00:16:33,040 --> 00:16:36,079
kind of term called devsecops which is

00:16:35,440 --> 00:16:39,360
basically

00:16:36,079 --> 00:16:42,800
where you know teams are performing uh

00:16:39,360 --> 00:16:45,440
dev uh devops kind of operations or or

00:16:42,800 --> 00:16:47,600
or they're establishing devops cultures

00:16:45,440 --> 00:16:48,399
but now there's an emphasis on security

00:16:47,600 --> 00:16:50,399
right so

00:16:48,399 --> 00:16:51,600
that's where devsecops kind of comes in

00:16:50,399 --> 00:16:54,160
and obviously the

00:16:51,600 --> 00:16:55,920
the sec part of devsecops stands for

00:16:54,160 --> 00:16:59,519
security

00:16:55,920 --> 00:17:00,880
now if you've heard this term shift left

00:16:59,519 --> 00:17:03,279
and you don't understand it i can

00:17:00,880 --> 00:17:05,679
explain it for you a little bit

00:17:03,279 --> 00:17:06,400
if you remember my diagram where i had

00:17:05,679 --> 00:17:08,480
uh

00:17:06,400 --> 00:17:09,919
the the pipeline showing all the way to

00:17:08,480 --> 00:17:11,679
the left you saw a bunch of things

00:17:09,919 --> 00:17:14,480
happening right i was running unit tests

00:17:11,679 --> 00:17:18,079
i was building docker images i was

00:17:14,480 --> 00:17:21,360
also creating a gke cluster

00:17:18,079 --> 00:17:22,240
in that same uh column of things

00:17:21,360 --> 00:17:24,160
happening

00:17:22,240 --> 00:17:26,559
i could have created a job right that's

00:17:24,160 --> 00:17:28,559
actually doing a security scan

00:17:26,559 --> 00:17:30,160
on my code or a vulnerability scan on my

00:17:28,559 --> 00:17:32,320
code and that's what they mean by

00:17:30,160 --> 00:17:34,559
shifting left before uh this

00:17:32,320 --> 00:17:36,640
this terminology or of shift leftwards

00:17:34,559 --> 00:17:38,960
concept of shift left

00:17:36,640 --> 00:17:40,640
things were kind of just like right uh

00:17:38,960 --> 00:17:42,080
our pipelines used to look like the one

00:17:40,640 --> 00:17:43,760
i just showed you where everything was

00:17:42,080 --> 00:17:46,320
happening up front and it was all

00:17:43,760 --> 00:17:47,440
mainly developer centric right so

00:17:46,320 --> 00:17:50,400
developers were

00:17:47,440 --> 00:17:52,000
or they were just performing jobs that

00:17:50,400 --> 00:17:54,080
kind of developers knew about

00:17:52,000 --> 00:17:55,840
but with the new tooling that we have

00:17:54,080 --> 00:17:58,320
today developers are

00:17:55,840 --> 00:18:00,640
actually empowered to do more about

00:17:58,320 --> 00:18:03,120
security right so now we can actually

00:18:00,640 --> 00:18:05,039
uh do using these tools we can actually

00:18:03,120 --> 00:18:06,480
do security scans on our own without

00:18:05,039 --> 00:18:08,320
having to kind of get it

00:18:06,480 --> 00:18:10,400
getting it blessed by a security team

00:18:08,320 --> 00:18:11,360
right which is literally what happened

00:18:10,400 --> 00:18:13,039
later on down

00:18:11,360 --> 00:18:14,559
on the right side of your pipeline right

00:18:13,039 --> 00:18:15,360
so the further down your pipeline you

00:18:14,559 --> 00:18:17,360
went

00:18:15,360 --> 00:18:19,679
uh there probably was a step where you

00:18:17,360 --> 00:18:21,520
know you had a security team going in

00:18:19,679 --> 00:18:23,039
checking out or running some scans on

00:18:21,520 --> 00:18:24,960
this release before it got

00:18:23,039 --> 00:18:26,480
got pushed out to whatever target

00:18:24,960 --> 00:18:29,120
environment so

00:18:26,480 --> 00:18:30,080
again security regarding shifting left

00:18:29,120 --> 00:18:32,240
it just means that

00:18:30,080 --> 00:18:33,840
those security practices that were being

00:18:32,240 --> 00:18:35,679
or operations and processes are

00:18:33,840 --> 00:18:36,960
reconducted further down your pipeline

00:18:35,679 --> 00:18:38,880
are now being done

00:18:36,960 --> 00:18:40,240
generally by like in the development

00:18:38,880 --> 00:18:42,880
phase right so

00:18:40,240 --> 00:18:44,480
one of the examples is if you use open

00:18:42,880 --> 00:18:45,919
source software let's say you're using

00:18:44,480 --> 00:18:48,559
node.js

00:18:45,919 --> 00:18:49,679
um you can now have uh scanning tools

00:18:48,559 --> 00:18:51,440
right at the end

00:18:49,679 --> 00:18:53,600
at the at the beginning of your pipeline

00:18:51,440 --> 00:18:54,880
scanning that code to ensure that you

00:18:53,600 --> 00:18:56,640
don't have any vulnerabilities that

00:18:54,880 --> 00:18:57,760
you're not packaging up vulnerabilities

00:18:56,640 --> 00:19:00,160
and if you do

00:18:57,760 --> 00:19:02,559
you can stop that build the developer

00:19:00,160 --> 00:19:05,919
can update his dependencies right

00:19:02,559 --> 00:19:08,320
and make sure that that that those uh

00:19:05,919 --> 00:19:10,080
security flags are are solved or

00:19:08,320 --> 00:19:13,919
resolved before pushing any

00:19:10,080 --> 00:19:16,960
bad code or you know uh vulnerable code

00:19:13,919 --> 00:19:18,640
into the the public or the shared shared

00:19:16,960 --> 00:19:20,640
repositories

00:19:18,640 --> 00:19:22,880
so i hope i hope i gave you a good

00:19:20,640 --> 00:19:26,880
definition of shift left if not

00:19:22,880 --> 00:19:30,480
we can definitely talk about it after

00:19:26,880 --> 00:19:31,840
so like i said earlier you know when you

00:19:30,480 --> 00:19:34,000
have your pipelines you can do these

00:19:31,840 --> 00:19:35,520
vulnerability scans you can ensure that

00:19:34,000 --> 00:19:38,480
you're not pushing

00:19:35,520 --> 00:19:39,760
buggy or vulnerable code right into a

00:19:38,480 --> 00:19:40,960
shared repository

00:19:39,760 --> 00:19:43,280
and then pushing that out to your

00:19:40,960 --> 00:19:45,200
customers

00:19:43,280 --> 00:19:47,039
one of the ways you can do that is by

00:19:45,200 --> 00:19:49,679
doing what we call static analysis or

00:19:47,039 --> 00:19:51,919
application scanning right you can just

00:19:49,679 --> 00:19:53,280
have a job like i showed in my in my

00:19:51,919 --> 00:19:55,200
diagram there

00:19:53,280 --> 00:19:56,400
that that can conduct all of these

00:19:55,200 --> 00:19:58,160
things

00:19:56,400 --> 00:19:59,760
sometimes you would have multiple jobs

00:19:58,160 --> 00:20:01,600
scanning for different things

00:19:59,760 --> 00:20:03,039
um you can do things like container

00:20:01,600 --> 00:20:05,440
scanning of your pipelines

00:20:03,039 --> 00:20:06,400
and i highly encourage you to do all of

00:20:05,440 --> 00:20:09,840
these things if you

00:20:06,400 --> 00:20:11,679
if you have the capabilities uh there

00:20:09,840 --> 00:20:13,120
are a lot of free open source tools out

00:20:11,679 --> 00:20:16,159
there that kind of help

00:20:13,120 --> 00:20:17,919
with at least initially getting you know

00:20:16,159 --> 00:20:19,360
some reading on on what's going on with

00:20:17,919 --> 00:20:21,520
the software um

00:20:19,360 --> 00:20:23,360
i know obviously there's some paid as

00:20:21,520 --> 00:20:24,480
well but for the most part there's

00:20:23,360 --> 00:20:26,240
plenty of

00:20:24,480 --> 00:20:27,840
tools out there that can help with the

00:20:26,240 --> 00:20:30,240
scans and ensuring that

00:20:27,840 --> 00:20:31,679
you're as protected as you you can be

00:20:30,240 --> 00:20:32,960
right it's better than running nothing

00:20:31,679 --> 00:20:34,640
in most cases

00:20:32,960 --> 00:20:36,720
uh actually in all cases it's better

00:20:34,640 --> 00:20:37,600
than running nothing uh but definitely

00:20:36,720 --> 00:20:39,760
you know look at

00:20:37,600 --> 00:20:41,600
uh especially if you're if you're

00:20:39,760 --> 00:20:43,120
pushing containers into or

00:20:41,600 --> 00:20:45,120
if you're developing docker images with

00:20:43,120 --> 00:20:46,480
your application or you're yeah pushing

00:20:45,120 --> 00:20:48,880
applications into those

00:20:46,480 --> 00:20:50,480
those uh those kind of uh artifacts

00:20:48,880 --> 00:20:52,640
which are docker images

00:20:50,480 --> 00:20:55,520
definitely look into container scanning

00:20:52,640 --> 00:20:58,400
uh within your pipelines

00:20:55,520 --> 00:21:00,320
uh yeah right so now that we have this

00:20:58,400 --> 00:21:02,400
integration right into other

00:21:00,320 --> 00:21:03,360
services other tooling and now we have

00:21:02,400 --> 00:21:07,120
security

00:21:03,360 --> 00:21:09,760
kind of running within our pipelines

00:21:07,120 --> 00:21:10,960
we need to also address things like the

00:21:09,760 --> 00:21:14,320
integration

00:21:10,960 --> 00:21:17,760
access right so like i mentioned earlier

00:21:14,320 --> 00:21:18,480
we have the capability for connecting

00:21:17,760 --> 00:21:21,280
into other

00:21:18,480 --> 00:21:22,559
under other services one of the biggest

00:21:21,280 --> 00:21:25,600
things that i find

00:21:22,559 --> 00:21:28,960
um issues with within ci cd pipelines

00:21:25,600 --> 00:21:31,679
is uh basically folks don't understand

00:21:28,960 --> 00:21:33,280
that you know or or they understand but

00:21:31,679 --> 00:21:34,080
they don't really pay attention to the

00:21:33,280 --> 00:21:36,400
fact that

00:21:34,080 --> 00:21:38,159
you have these credentials and you you

00:21:36,400 --> 00:21:39,919
know you have to protect them

00:21:38,159 --> 00:21:41,919
and these credentials can impact

00:21:39,919 --> 00:21:42,640
services like oauth right they can

00:21:41,919 --> 00:21:44,880
represent

00:21:42,640 --> 00:21:46,640
access t's for like i don't know let's

00:21:44,880 --> 00:21:49,120
talk about aws

00:21:46,640 --> 00:21:50,320
or or you know whatever service you're

00:21:49,120 --> 00:21:53,120
trying to connect to

00:21:50,320 --> 00:21:54,960
they also cover like api tokens and your

00:21:53,120 --> 00:21:56,559
basic username and password right i've

00:21:54,960 --> 00:21:58,080
seen so many people just

00:21:56,559 --> 00:22:00,320
write this stuff out into their

00:21:58,080 --> 00:22:01,120
configuration files for their pipelines

00:22:00,320 --> 00:22:02,799
and it's so

00:22:01,120 --> 00:22:04,159
you know just in clear text it's very

00:22:02,799 --> 00:22:07,520
unprotected

00:22:04,159 --> 00:22:08,240
so these are just some of the things

00:22:07,520 --> 00:22:11,600
right that

00:22:08,240 --> 00:22:14,400
kind of come up when people are

00:22:11,600 --> 00:22:15,360
leveraging ci cd pipelines to make you

00:22:14,400 --> 00:22:17,520
know their uh

00:22:15,360 --> 00:22:20,240
their practices and principles come to

00:22:17,520 --> 00:22:21,760
life now

00:22:20,240 --> 00:22:23,520
i'm going to talk about securing these

00:22:21,760 --> 00:22:25,120
pipelines a little bit and what i want

00:22:23,520 --> 00:22:26,000
to do is address one of the main

00:22:25,120 --> 00:22:28,159
problems that i see

00:22:26,000 --> 00:22:29,360
all the time within within these

00:22:28,159 --> 00:22:31,360
pipelines

00:22:29,360 --> 00:22:32,960
so secrets which are the things i just

00:22:31,360 --> 00:22:34,960
talked about credentials

00:22:32,960 --> 00:22:36,240
passwords api tokens whatever you want

00:22:34,960 --> 00:22:38,320
to call them i'm just going to

00:22:36,240 --> 00:22:41,039
call them secrets moving forward with

00:22:38,320 --> 00:22:43,360
this with this presentation

00:22:41,039 --> 00:22:44,320
so again right secrets provide access to

00:22:43,360 --> 00:22:47,440
databases

00:22:44,320 --> 00:22:49,039
apis uh whatever it is that you're

00:22:47,440 --> 00:22:50,240
trying to connect to systems that you're

00:22:49,039 --> 00:22:53,360
trying to connect to

00:22:50,240 --> 00:22:55,280
uh they are sensitive information that

00:22:53,360 --> 00:22:56,559
could be sensitive information as well

00:22:55,280 --> 00:22:59,120
but you definitely want to have them

00:22:56,559 --> 00:23:01,600
protected and that's the point

00:22:59,120 --> 00:23:02,320
and again like i thought uh said earlier

00:23:01,600 --> 00:23:06,400
right

00:23:02,320 --> 00:23:08,480
people have uh unprotected secrets all

00:23:06,400 --> 00:23:10,400
the time within their pipelines

00:23:08,480 --> 00:23:12,480
and of course right if you have that

00:23:10,400 --> 00:23:13,440
situation you're basically exposing

00:23:12,480 --> 00:23:17,840
yourself

00:23:13,440 --> 00:23:20,240
uh to uh you know unwanted attacks

00:23:17,840 --> 00:23:22,000
uh the biggest problem that i see though

00:23:20,240 --> 00:23:25,360
within pipelines

00:23:22,000 --> 00:23:27,600
aside from i don't see as much anymore

00:23:25,360 --> 00:23:28,799
the the clear text stuff that i'm

00:23:27,600 --> 00:23:32,000
talking about but

00:23:28,799 --> 00:23:35,039
what i do see is weak and stale secrets

00:23:32,000 --> 00:23:36,640
so these are things that um the weak

00:23:35,039 --> 00:23:37,679
obviously right these are just things

00:23:36,640 --> 00:23:39,520
like like it says they're in the

00:23:37,679 --> 00:23:39,919
background passwords right people just

00:23:39,520 --> 00:23:43,200
use

00:23:39,919 --> 00:23:44,880
a very simple uh

00:23:43,200 --> 00:23:46,159
password that they can remember right

00:23:44,880 --> 00:23:46,880
and that's one of the reasons why they

00:23:46,159 --> 00:23:49,120
do it

00:23:46,880 --> 00:23:51,520
uh but i can tell you that that's no

00:23:49,120 --> 00:23:53,120
longer very safe right

00:23:51,520 --> 00:23:55,039
there's so many tools out there to do

00:23:53,120 --> 00:23:56,880
brute force attacks and and get into

00:23:55,039 --> 00:23:58,880
your systems really easily

00:23:56,880 --> 00:24:01,360
uh the other piece to it the other part

00:23:58,880 --> 00:24:04,320
that i see all the time is

00:24:01,360 --> 00:24:05,520
passwords or or secrets are stale and

00:24:04,320 --> 00:24:06,880
what i mean by that is you know they

00:24:05,520 --> 00:24:08,559
don't change you know uh

00:24:06,880 --> 00:24:10,640
in some organizations you have to change

00:24:08,559 --> 00:24:13,200
your your secrets

00:24:10,640 --> 00:24:14,080
every what i don't know 30 days 60 days

00:24:13,200 --> 00:24:15,919
depending on

00:24:14,080 --> 00:24:17,200
on where you work i've worked in federal

00:24:15,919 --> 00:24:20,000
organizations where

00:24:17,200 --> 00:24:21,039
it was every like 30 days which i

00:24:20,000 --> 00:24:23,520
thought was

00:24:21,039 --> 00:24:24,559
kind of ridiculous because you know

00:24:23,520 --> 00:24:27,600
things happen

00:24:24,559 --> 00:24:32,080
uh and i i i was expecting shorter

00:24:27,600 --> 00:24:33,679
uh you know password expiry policies but

00:24:32,080 --> 00:24:36,240
that's okay right so

00:24:33,679 --> 00:24:37,760
whatever it is um you still should be

00:24:36,240 --> 00:24:38,559
changing or refreshing these these

00:24:37,760 --> 00:24:41,200
secrets

00:24:38,559 --> 00:24:42,320
uh very random or frequently i should

00:24:41,200 --> 00:24:44,720
say

00:24:42,320 --> 00:24:46,000
uh the other thing i talked about

00:24:44,720 --> 00:24:48,960
obviously right was inadequate

00:24:46,000 --> 00:24:50,320
mechanisms what i mean by that is um and

00:24:48,960 --> 00:24:54,559
this goes back to the clear text

00:24:50,320 --> 00:24:56,240
piece uh when you're running these

00:24:54,559 --> 00:24:58,159
these pipelines right you have jobs in

00:24:56,240 --> 00:24:58,960
your pipelines some of them again have

00:24:58,159 --> 00:25:02,000
to connect

00:24:58,960 --> 00:25:03,840
to some other system and the issue is

00:25:02,000 --> 00:25:06,640
that you know

00:25:03,840 --> 00:25:08,559
the cicd tooling will have very good

00:25:06,640 --> 00:25:08,880
protections right it'll it'll enable you

00:25:08,559 --> 00:25:12,559
to

00:25:08,880 --> 00:25:14,240
establish your your secrets in what we

00:25:12,559 --> 00:25:17,120
call environment variables or

00:25:14,240 --> 00:25:18,720
some other mechanism that at rest on the

00:25:17,120 --> 00:25:20,559
platform they're encrypted

00:25:18,720 --> 00:25:22,320
in flight they're encrypted but once it

00:25:20,559 --> 00:25:24,240
hits that run time where you're running

00:25:22,320 --> 00:25:26,240
your actual code for your build which is

00:25:24,240 --> 00:25:29,840
like what we call an executor

00:25:26,240 --> 00:25:32,799
then there are mecha there are uh

00:25:29,840 --> 00:25:33,600
security kind of flaws in some of those

00:25:32,799 --> 00:25:35,440
systems

00:25:33,600 --> 00:25:36,640
and one of them is obviously the clear

00:25:35,440 --> 00:25:38,080
text right so you have all these

00:25:36,640 --> 00:25:40,480
credentials they're safely

00:25:38,080 --> 00:25:42,159
stored they're safely uh transported

00:25:40,480 --> 00:25:43,200
into the run time and then boom once it

00:25:42,159 --> 00:25:46,240
hits the runtime

00:25:43,200 --> 00:25:47,120
it has to be decrypted right so so the

00:25:46,240 --> 00:25:50,559
services can

00:25:47,120 --> 00:25:54,240
can use those those uh those secrets

00:25:50,559 --> 00:25:56,000
uh the issue is that uh if someone right

00:25:54,240 --> 00:25:59,520
for the time frame that that that

00:25:56,000 --> 00:26:02,000
that uh run time is is uh alive

00:25:59,520 --> 00:26:03,440
uh you you now have an exposure right or

00:26:02,000 --> 00:26:06,480
potential exposure

00:26:03,440 --> 00:26:08,559
so as long as those those secrets are

00:26:06,480 --> 00:26:10,960
in clear text sitting on on that runtime

00:26:08,559 --> 00:26:12,480
if someone gains act a bad actor gains

00:26:10,960 --> 00:26:14,159
access to that um you know you

00:26:12,480 --> 00:26:15,520
potentially now have exposed yourself

00:26:14,159 --> 00:26:17,360
and your organization

00:26:15,520 --> 00:26:19,760
which is not a good thing right

00:26:17,360 --> 00:26:22,720
depending on on the level of credentials

00:26:19,760 --> 00:26:23,360
uh it's not a good thing so what i

00:26:22,720 --> 00:26:25,760
propose

00:26:23,360 --> 00:26:26,559
right for folks who are having that

00:26:25,760 --> 00:26:28,720
issue with

00:26:26,559 --> 00:26:30,640
securing their their their pipelines or

00:26:28,720 --> 00:26:33,440
the secrets within their pipelines

00:26:30,640 --> 00:26:35,919
is implementing a a system what that's

00:26:33,440 --> 00:26:38,640
called the secrets management system

00:26:35,919 --> 00:26:39,200
and if you're not familiar with what

00:26:38,640 --> 00:26:41,600
that is

00:26:39,200 --> 00:26:43,679
um basically it's a set of tooling or

00:26:41,600 --> 00:26:45,919
platforms that um

00:26:43,679 --> 00:26:48,000
you know live outside of of the actual

00:26:45,919 --> 00:26:51,039
uh city tooling

00:26:48,000 --> 00:26:54,480
and this is a system that's

00:26:51,039 --> 00:26:57,120
designed to basically secure all of your

00:26:54,480 --> 00:26:57,760
information and then also dole them out

00:26:57,120 --> 00:26:59,840
right to

00:26:57,760 --> 00:27:00,799
the appropriate services calling on them

00:26:59,840 --> 00:27:03,760
so

00:27:00,799 --> 00:27:05,440
let's say for instance you have uh you

00:27:03,760 --> 00:27:08,480
know aws keys

00:27:05,440 --> 00:27:11,039
and you cr you have a uh

00:27:08,480 --> 00:27:12,880
uh secrets management system running you

00:27:11,039 --> 00:27:15,840
could actually you know

00:27:12,880 --> 00:27:16,720
set up the system where the services um

00:27:15,840 --> 00:27:20,080
can dole out

00:27:16,720 --> 00:27:22,240
uh random randomly generated secrets

00:27:20,080 --> 00:27:24,320
to access the system that you're you're

00:27:22,240 --> 00:27:26,640
going for right or you're targeting

00:27:24,320 --> 00:27:28,080
so uh with this guys with the uh should

00:27:26,640 --> 00:27:31,039
say the uh

00:27:28,080 --> 00:27:32,799
the uh secrets management system um

00:27:31,039 --> 00:27:33,679
you're able to protect the secrets and

00:27:32,799 --> 00:27:36,320
then also

00:27:33,679 --> 00:27:37,279
authenticate identities of folks right

00:27:36,320 --> 00:27:39,600
so it's again it's

00:27:37,279 --> 00:27:40,399
it's a it's a it's a nice protective

00:27:39,600 --> 00:27:42,240
layer

00:27:40,399 --> 00:27:44,080
for all that sensitive information that

00:27:42,240 --> 00:27:45,919
you need to integrate within your

00:27:44,080 --> 00:27:49,440
pipelines right

00:27:45,919 --> 00:27:52,399
i personally have been using uh

00:27:49,440 --> 00:27:54,159
the uh the hashicorp vault uh secret

00:27:52,399 --> 00:27:56,159
system or management system

00:27:54,159 --> 00:27:58,399
uh it's an open source project which i

00:27:56,159 --> 00:28:00,320
like and it's also very easy to kind of

00:27:58,399 --> 00:28:02,080
get up and running quickly

00:28:00,320 --> 00:28:04,080
but there's plenty of other right

00:28:02,080 --> 00:28:06,399
secrets management systems out there

00:28:04,080 --> 00:28:07,600
uh the major cloud providers they all

00:28:06,399 --> 00:28:09,360
have their own kind of

00:28:07,600 --> 00:28:11,520
secret management system as well so if

00:28:09,360 --> 00:28:14,559
you're like if you want to stick with

00:28:11,520 --> 00:28:16,399
one particular uh you know service then

00:28:14,559 --> 00:28:19,440
you could actually do that

00:28:16,399 --> 00:28:20,159
but again i i prefer the hashicorp vault

00:28:19,440 --> 00:28:22,320
system

00:28:20,159 --> 00:28:23,840
because again i can control it a little

00:28:22,320 --> 00:28:24,960
bit better and it's outside of kind of

00:28:23,840 --> 00:28:28,080
that vendor

00:28:24,960 --> 00:28:29,200
vendor lock-in as well but yeah you can

00:28:28,080 --> 00:28:31,360
use pretty much any

00:28:29,200 --> 00:28:32,240
any secrets management system that's out

00:28:31,360 --> 00:28:34,320
there

00:28:32,240 --> 00:28:35,440
um but you know again if you're

00:28:34,320 --> 00:28:37,120
leveraging that um

00:28:35,440 --> 00:28:38,880
it helps with creating randomly

00:28:37,120 --> 00:28:40,960
generated passwords right

00:28:38,880 --> 00:28:41,919
which is helps with that staleness

00:28:40,960 --> 00:28:43,520
expiry

00:28:41,919 --> 00:28:45,120
password expiry problem that i was

00:28:43,520 --> 00:28:48,159
talking about earlier

00:28:45,120 --> 00:28:50,320
uh it also can rotate those

00:28:48,159 --> 00:28:52,080
stale passwords as well right so not

00:28:50,320 --> 00:28:53,679
only will you generate a really strong

00:28:52,080 --> 00:28:56,720
password that no one

00:28:53,679 --> 00:28:57,039
can remember uh you can also rotate it

00:28:56,720 --> 00:28:59,600
and

00:28:57,039 --> 00:29:00,480
in a schedule right on a schedule so

00:28:59,600 --> 00:29:02,720
it's it's

00:29:00,480 --> 00:29:04,559
it's up to you and your your security

00:29:02,720 --> 00:29:06,240
teams and your policies on how you

00:29:04,559 --> 00:29:08,080
rotate or when you rotate

00:29:06,240 --> 00:29:11,600
but it just has that capability for you

00:29:08,080 --> 00:29:13,360
to do that right which is really awesome

00:29:11,600 --> 00:29:14,720
it also can help you with you know if

00:29:13,360 --> 00:29:17,200
you have requirements for

00:29:14,720 --> 00:29:18,720
like seeing who exactly is on a system

00:29:17,200 --> 00:29:19,520
which is actually pretty common these

00:29:18,720 --> 00:29:21,360
days

00:29:19,520 --> 00:29:23,039
um so like it gives you the ability to

00:29:21,360 --> 00:29:23,679
have granular access controls and

00:29:23,039 --> 00:29:26,960
understand

00:29:23,679 --> 00:29:28,799
you know assign roles and privileges

00:29:26,960 --> 00:29:30,240
accordingly right so you can do things

00:29:28,799 --> 00:29:32,480
like uh you know release

00:29:30,240 --> 00:29:35,120
privilege roles uh so that you're not

00:29:32,480 --> 00:29:37,679
giving away the farm all in one shot

00:29:35,120 --> 00:29:38,640
and yeah it's it's a really good system

00:29:37,679 --> 00:29:41,679
for helping you

00:29:38,640 --> 00:29:41,919
right keep your access controls in place

00:29:41,679 --> 00:29:45,360
and

00:29:41,919 --> 00:29:48,399
and not compromised uh so

00:29:45,360 --> 00:29:50,720
yeah so that's basically it uh as far as

00:29:48,399 --> 00:29:52,840
um the talk goes so i'll just do a quick

00:29:50,720 --> 00:29:55,919
recap on on what i just

00:29:52,840 --> 00:29:57,120
discussed right continuous integration

00:29:55,919 --> 00:30:00,000
principles

00:29:57,120 --> 00:30:01,440
write and commit code often uh commit to

00:30:00,000 --> 00:30:03,039
a shared repository

00:30:01,440 --> 00:30:04,559
and then right you have the fast

00:30:03,039 --> 00:30:06,399
feedback loop so that you know what's

00:30:04,559 --> 00:30:08,000
broken as soon as possible and you can

00:30:06,399 --> 00:30:10,159
you can fix that and move on to the next

00:30:08,000 --> 00:30:11,600
task in your list

00:30:10,159 --> 00:30:14,080
with the continuous deployment

00:30:11,600 --> 00:30:15,039
principles go ahead and you know it

00:30:14,080 --> 00:30:17,520
helps you

00:30:15,039 --> 00:30:18,640
create these artifacts in a really quick

00:30:17,520 --> 00:30:21,200
manner

00:30:18,640 --> 00:30:21,919
helps you validate your services and

00:30:21,200 --> 00:30:24,000
make sure it

00:30:21,919 --> 00:30:26,559
ensures that they're functioning and

00:30:24,000 --> 00:30:28,399
also helps you monitor and verify

00:30:26,559 --> 00:30:30,320
uh the state of those applications after

00:30:28,399 --> 00:30:32,559
you deploy them right so

00:30:30,320 --> 00:30:34,840
and also right you can you can look into

00:30:32,559 --> 00:30:36,000
uh recovery or self-healing type

00:30:34,840 --> 00:30:37,919
operations

00:30:36,000 --> 00:30:40,159
so that if the application does have any

00:30:37,919 --> 00:30:44,000
issues it can shut itself down

00:30:40,159 --> 00:30:47,200
and restart or respawn a new uh service

00:30:44,000 --> 00:30:49,279
you know uh in in addition to or or to

00:30:47,200 --> 00:30:51,120
replace the the stuff that's broken or

00:30:49,279 --> 00:30:53,760
has failed

00:30:51,120 --> 00:30:54,240
uh with devsecops right we're talking

00:30:53,760 --> 00:30:56,000
about

00:30:54,240 --> 00:30:57,919
shifting left right on the security

00:30:56,000 --> 00:31:00,159
front uh like i said all that means is

00:30:57,919 --> 00:31:01,600
that um you're moving those security

00:31:00,159 --> 00:31:03,760
type processes

00:31:01,600 --> 00:31:04,880
to to the forefront or the front line of

00:31:03,760 --> 00:31:07,600
your of your

00:31:04,880 --> 00:31:08,960
ci cd pipeline uh so that you know the

00:31:07,600 --> 00:31:10,480
developers are more involved your

00:31:08,960 --> 00:31:12,000
operation teams are more involved and

00:31:10,480 --> 00:31:14,799
what's happening with security

00:31:12,000 --> 00:31:15,600
and then it kind of um can again you

00:31:14,799 --> 00:31:17,600
know

00:31:15,600 --> 00:31:18,640
take some weight off of your security

00:31:17,600 --> 00:31:20,399
teams

00:31:18,640 --> 00:31:22,399
down the road down or down the pipeline

00:31:20,399 --> 00:31:22,799
i should say it just kind of helps

00:31:22,399 --> 00:31:24,799
things

00:31:22,799 --> 00:31:26,320
move things along instead of you know

00:31:24,799 --> 00:31:28,080
waiting and being dependent on someone

00:31:26,320 --> 00:31:30,080
else to check things

00:31:28,080 --> 00:31:31,919
definitely implement application or

00:31:30,080 --> 00:31:32,640
static scanning within your pipelines as

00:31:31,919 --> 00:31:37,120
well as

00:31:32,640 --> 00:31:39,919
container scanning within your pipelines

00:31:37,120 --> 00:31:41,760
and then you know securing these

00:31:39,919 --> 00:31:43,679
pipelines make sure that you

00:31:41,760 --> 00:31:45,600
implement or look into implementing some

00:31:43,679 --> 00:31:47,200
sort of secrets management policies or

00:31:45,600 --> 00:31:49,039
tooling

00:31:47,200 --> 00:31:50,880
integrating those secrets is really

00:31:49,039 --> 00:31:52,720
important because again you're trying to

00:31:50,880 --> 00:31:55,679
protect that information

00:31:52,720 --> 00:31:56,880
um as as as well as protected as

00:31:55,679 --> 00:31:58,320
possible right

00:31:56,880 --> 00:32:00,399
it's really important that you do that i

00:31:58,320 --> 00:32:02,159
can't stress that enough uh and then

00:32:00,399 --> 00:32:03,440
obviously right generating strong random

00:32:02,159 --> 00:32:06,399
passwords as well as

00:32:03,440 --> 00:32:08,559
rotating uh those secrets out at a

00:32:06,399 --> 00:32:11,440
timely manner or in a manner that

00:32:08,559 --> 00:32:14,720
is kind of i guess required by your your

00:32:11,440 --> 00:32:17,760
policies at your organization

00:32:14,720 --> 00:32:19,679
and that's the end of my talk so um

00:32:17,760 --> 00:32:21,120
if you is there any questions and

00:32:19,679 --> 00:32:22,880
answers or

00:32:21,120 --> 00:32:24,399
we can do that and if you need to get in

00:32:22,880 --> 00:32:29,840
touch with me just hit me up at punk

00:32:24,399 --> 00:32:29,840
data thank you everybody

00:32:30,559 --> 00:32:32,640

YouTube URL: https://www.youtube.com/watch?v=vODow2LO8Ms


