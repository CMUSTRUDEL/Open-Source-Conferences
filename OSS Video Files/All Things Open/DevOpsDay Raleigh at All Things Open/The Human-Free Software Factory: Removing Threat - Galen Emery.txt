Title: The Human-Free Software Factory: Removing Threat - Galen Emery
Publication date: 2020-12-03
Playlist: DevOpsDay Raleigh at All Things Open
Description: 
	Presented by: Galen Emery, Chef Software
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: Humans suck at being robots! So why do we force people to perform repetitive tasks? We can and should leverage (software) robots to perform repetitive actions. This allows us to free up our humans for valuable system design, architecture and troubleshooting. The simple answer is we get our humans to write code that automates the right things and hand it over to our robots to build, test and deploy the code.

In this session, Galen will talk through the design principles which allow humans to determine which are the right things to automate in the software delivery process, from Continuous Integration and Delivery pipeline design to securing production systems to prevent remote login, and everything in between. The result is an integrated system that provides visibility into the current state, with the ability to prove exactly how and when it was put into that state and guarantee that it will not change unexpectedly. Resulting in a system where the only human interaction is with the source code, and the robots handle the rest!
Captions: 
	00:00:05,120 --> 00:00:07,440
uh my name is galen emery and i'm here

00:00:06,640 --> 00:00:09,040
to talk about

00:00:07,440 --> 00:00:11,120
the human free software factory or the

00:00:09,040 --> 00:00:14,160
human free pipeline

00:00:11,120 --> 00:00:16,000
as i'd like to talk about it

00:00:14,160 --> 00:00:19,920
the basic idea is let's remove the

00:00:16,000 --> 00:00:19,920
humans from production viva lab robots

00:00:20,480 --> 00:00:24,800
before i get started uh i do not have 45

00:00:23,119 --> 00:00:26,560
minutes of content here so if you have

00:00:24,800 --> 00:00:28,560
questions please put them into the q

00:00:26,560 --> 00:00:30,080
a structure so that i can have some time

00:00:28,560 --> 00:00:31,840
to answer them i would love to have a

00:00:30,080 --> 00:00:33,440
discussion with people uh as we get

00:00:31,840 --> 00:00:36,559
towards the end of this

00:00:33,440 --> 00:00:38,480
presentation all right so

00:00:36,559 --> 00:00:40,079
uh who am i why am i talking about this

00:00:38,480 --> 00:00:40,879
i worked at chef software for six six

00:00:40,079 --> 00:00:43,280
and a half years

00:00:40,879 --> 00:00:44,399
uh now i am based in san diego i used to

00:00:43,280 --> 00:00:47,120
travel a lot before

00:00:44,399 --> 00:00:47,520
2020 i have not been on an airplane

00:00:47,120 --> 00:00:49,920
since

00:00:47,520 --> 00:00:51,760
march which is by far the longest time

00:00:49,920 --> 00:00:53,039
i've not gone on an airplane in my

00:00:51,760 --> 00:00:54,800
professional career

00:00:53,039 --> 00:00:56,559
uh i am the lead compliance and security

00:00:54,800 --> 00:00:58,079
architect so i focus on the compliance

00:00:56,559 --> 00:00:59,600
and security products for chef

00:00:58,079 --> 00:01:01,600
but also specifically around compliance

00:00:59,600 --> 00:01:02,640
and security problem space around devops

00:01:01,600 --> 00:01:04,080
and devsecops

00:01:02,640 --> 00:01:05,920
i've been both a pre-sales and

00:01:04,080 --> 00:01:08,400
post-sales customer architect

00:01:05,920 --> 00:01:10,320
um at chef in my time here and then

00:01:08,400 --> 00:01:12,400
obviously i'm not currently a global

00:01:10,320 --> 00:01:14,720
traveler i am at home at san diego

00:01:12,400 --> 00:01:16,159
uh it's a very weird feeling but uh

00:01:14,720 --> 00:01:17,040
gonna get i'll probably get used to it

00:01:16,159 --> 00:01:19,119
just about the time

00:01:17,040 --> 00:01:20,560
that covid ends and i'm asked to get

00:01:19,119 --> 00:01:22,000
back on airplanes all the time so it's

00:01:20,560 --> 00:01:23,759
gonna be a real fun transition going

00:01:22,000 --> 00:01:25,200
back

00:01:23,759 --> 00:01:26,640
so what are we talking about today today

00:01:25,200 --> 00:01:27,600
we're talking about a couple things but

00:01:26,640 --> 00:01:30,079
basically

00:01:27,600 --> 00:01:31,119
why do humans suck at routine tasks what

00:01:30,079 --> 00:01:32,560
are humans good at

00:01:31,119 --> 00:01:34,560
what's better at routine tasks than a

00:01:32,560 --> 00:01:35,920
human what can our automation actually

00:01:34,560 --> 00:01:36,640
prove from a security compliance

00:01:35,920 --> 00:01:38,720
standpoint

00:01:36,640 --> 00:01:39,759
and again uh please encourage you to

00:01:38,720 --> 00:01:41,280
give me some q a

00:01:39,759 --> 00:01:42,960
questions so that i have something to

00:01:41,280 --> 00:01:44,560
talk about so we don't just have dead

00:01:42,960 --> 00:01:47,040
space at the end of this

00:01:44,560 --> 00:01:49,119
topic if it's not clear yet i don't have

00:01:47,040 --> 00:01:51,040
45 minutes of content people so please

00:01:49,119 --> 00:01:52,399
ask me questions i will happily answer

00:01:51,040 --> 00:01:54,320
them and we can have a great discussion

00:01:52,399 --> 00:01:56,159
near the end of this

00:01:54,320 --> 00:01:58,000
all right so let's talk about what this

00:01:56,159 --> 00:02:00,399
is what my definition is and why

00:01:58,000 --> 00:02:01,520
we're talking about um this idea and

00:02:00,399 --> 00:02:03,360
this may be

00:02:01,520 --> 00:02:04,719
kind of old hat to some folks some folks

00:02:03,360 --> 00:02:05,360
may say like yeah this makes a whole lot

00:02:04,719 --> 00:02:06,640
of sense

00:02:05,360 --> 00:02:08,560
i know people are like well there's no

00:02:06,640 --> 00:02:09,360
way i could ever do this but the basic

00:02:08,560 --> 00:02:11,599
structure is that

00:02:09,360 --> 00:02:13,360
we want to set up a rule and structure

00:02:11,599 --> 00:02:15,760
such that humans do not perform

00:02:13,360 --> 00:02:17,120
any manual actions past committing to

00:02:15,760 --> 00:02:18,400
source code management

00:02:17,120 --> 00:02:19,360
that's the structure of what we want to

00:02:18,400 --> 00:02:20,720
say when we're talking about the human

00:02:19,360 --> 00:02:22,959
free pipeline is to say

00:02:20,720 --> 00:02:24,160
humans have zero interaction directly

00:02:22,959 --> 00:02:26,640
with production systems

00:02:24,160 --> 00:02:30,080
they only interact with the code that

00:02:26,640 --> 00:02:30,080
builds those production systems

00:02:31,599 --> 00:02:35,440
and why is this an important thing let's

00:02:33,519 --> 00:02:38,239
start with the the stuff that

00:02:35,440 --> 00:02:40,000
humans suck at we are really really bad

00:02:38,239 --> 00:02:40,800
at repetitive tasks particularly skilled

00:02:40,000 --> 00:02:42,879
workers

00:02:40,800 --> 00:02:44,800
um we dislike them i certainly hated

00:02:42,879 --> 00:02:46,640
them when i had to do data entry jobs

00:02:44,800 --> 00:02:49,040
in college and then directly out of it

00:02:46,640 --> 00:02:50,640
um we get bored we get burnt out

00:02:49,040 --> 00:02:52,319
manual repetition has a potential for

00:02:50,640 --> 00:02:53,440
mistake right so you know

00:02:52,319 --> 00:02:55,440
putting the same thing in a hundred

00:02:53,440 --> 00:02:56,640
times you make a mistake once

00:02:55,440 --> 00:02:57,920
uh if you don't catch it then then

00:02:56,640 --> 00:02:58,560
you're gonna go figure out some other

00:02:57,920 --> 00:03:00,480
time

00:02:58,560 --> 00:03:02,000
um and even muscle memory tests have

00:03:00,480 --> 00:03:04,640
errors occasionally right like

00:03:02,000 --> 00:03:05,760
uh you know anything from you know

00:03:04,640 --> 00:03:07,360
getting dressed in the morning getting

00:03:05,760 --> 00:03:10,239
the you know wrong pant leg

00:03:07,360 --> 00:03:10,640
on right or two two legs and one pant

00:03:10,239 --> 00:03:12,000
like

00:03:10,640 --> 00:03:13,519
like any of those things we can we can

00:03:12,000 --> 00:03:14,159
run into these problems so we definitely

00:03:13,519 --> 00:03:17,120
want to

00:03:14,159 --> 00:03:17,680
uh to get away from routine tasks and

00:03:17,120 --> 00:03:19,200
like

00:03:17,680 --> 00:03:20,800
why is this actually bad like routine

00:03:19,200 --> 00:03:21,280
tasks fine like we can go fix it you

00:03:20,800 --> 00:03:23,680
know

00:03:21,280 --> 00:03:24,959
it's it's really not a big deal kayla

00:03:23,680 --> 00:03:26,159
it's the way it's always been done right

00:03:24,959 --> 00:03:28,239
operations has always gone into

00:03:26,159 --> 00:03:30,840
production to make changes to systems

00:03:28,239 --> 00:03:33,040
well if you dislike the work you're less

00:03:30,840 --> 00:03:34,080
engaged also if you have a manual change

00:03:33,040 --> 00:03:35,840
you have manual fixes

00:03:34,080 --> 00:03:37,280
if you have manual fixes you end up in

00:03:35,840 --> 00:03:38,319
firefighting style operations what i

00:03:37,280 --> 00:03:40,560
mean by that is that

00:03:38,319 --> 00:03:42,159
your game your day is whack-a-mole you

00:03:40,560 --> 00:03:43,760
know go find the next step one

00:03:42,159 --> 00:03:45,200
go resolve it get back to it you never

00:03:43,760 --> 00:03:46,080
get into that project work or you get

00:03:45,200 --> 00:03:48,319
very little project

00:03:46,080 --> 00:03:50,159
work out of your time if you have less

00:03:48,319 --> 00:03:51,599
engagement and and a lot of firefighting

00:03:50,159 --> 00:03:52,319
you get a lot of dislike and a lot of

00:03:51,599 --> 00:03:54,080
burnout

00:03:52,319 --> 00:03:56,159
um i've been there i've been in on-call

00:03:54,080 --> 00:03:58,319
situations with 24 hours on call

00:03:56,159 --> 00:03:59,599
right we've all like all of that sucks

00:03:58,319 --> 00:04:01,280
and adds up

00:03:59,599 --> 00:04:02,959
if you dislike your job more you're less

00:04:01,280 --> 00:04:04,799
engaged and then the cycle continues

00:04:02,959 --> 00:04:08,640
right so you literally have

00:04:04,799 --> 00:04:10,560
a a self-defeating cycle that exists

00:04:08,640 --> 00:04:12,799
in traditional style operations

00:04:10,560 --> 00:04:14,720
firefighting manual operations where

00:04:12,799 --> 00:04:16,320
we're always in production by ourselves

00:04:14,720 --> 00:04:19,040
doing things live

00:04:16,320 --> 00:04:19,680
we're never really getting to this

00:04:19,040 --> 00:04:21,199
design

00:04:19,680 --> 00:04:23,759
desired state view that we're really

00:04:21,199 --> 00:04:25,919
trying to get to in devops

00:04:23,759 --> 00:04:27,360
and it's not just that we have a staff

00:04:25,919 --> 00:04:30,240
burnout problem by

00:04:27,360 --> 00:04:31,360
operations and and production systems

00:04:30,240 --> 00:04:33,680
the

00:04:31,360 --> 00:04:35,120
is all of the stuff we build in in

00:04:33,680 --> 00:04:36,560
devops all these things

00:04:35,120 --> 00:04:37,600
they have a business purpose there's a

00:04:36,560 --> 00:04:38,960
reason that we build these things

00:04:37,600 --> 00:04:41,600
there's a reason that the companies

00:04:38,960 --> 00:04:42,560
employ us to do our jobs and so we want

00:04:41,600 --> 00:04:44,080
to make sure that

00:04:42,560 --> 00:04:45,600
the things we're doing provide positive

00:04:44,080 --> 00:04:47,520
business value to the

00:04:45,600 --> 00:04:48,960
company and we're not seen as this cost

00:04:47,520 --> 00:04:49,680
center that has to be minimized and

00:04:48,960 --> 00:04:51,440
reduced

00:04:49,680 --> 00:04:52,880
and eliminated as much as possible so we

00:04:51,440 --> 00:04:54,240
really want to focus on

00:04:52,880 --> 00:04:57,199
how do we make a positive business

00:04:54,240 --> 00:04:59,600
impact by by artwork

00:04:57,199 --> 00:05:01,120
and so i'm guided a lot by this quote

00:04:59,600 --> 00:05:02,080
from a manager of mine at a previous

00:05:01,120 --> 00:05:04,240
company

00:05:02,080 --> 00:05:05,280
looked at me one day said galen you

00:05:04,240 --> 00:05:07,600
aren't lazy

00:05:05,280 --> 00:05:08,720
you just hate inefficiency and my

00:05:07,600 --> 00:05:11,039
current manager would probably tell you

00:05:08,720 --> 00:05:12,160
that i am lazy but you know it's it's

00:05:11,039 --> 00:05:14,880
that's a different story

00:05:12,160 --> 00:05:16,240
but the point being is that what's what

00:05:14,880 --> 00:05:17,199
are the ways we can build an efficient

00:05:16,240 --> 00:05:20,000
system how do we

00:05:17,199 --> 00:05:21,680
get better at managing this structure

00:05:20,000 --> 00:05:23,360
managing this problem space

00:05:21,680 --> 00:05:25,440
and so what are we actually good at as

00:05:23,360 --> 00:05:26,720
humans well we're really good at design

00:05:25,440 --> 00:05:28,639
really good at the new architectures

00:05:26,720 --> 00:05:29,360
we're looking at solutions to complex

00:05:28,639 --> 00:05:31,039
problems

00:05:29,360 --> 00:05:32,800
we're looking really good at

00:05:31,039 --> 00:05:33,440
understanding the context of systems

00:05:32,800 --> 00:05:35,199
right

00:05:33,440 --> 00:05:36,960
why does this thing exist what is its

00:05:35,199 --> 00:05:39,280
purpose what are we trying to do with it

00:05:36,960 --> 00:05:40,960
can we make it better do we need to

00:05:39,280 --> 00:05:42,400
optimize this function or do we not does

00:05:40,960 --> 00:05:44,800
it is it not important right that's a

00:05:42,400 --> 00:05:46,639
really good human tax

00:05:44,800 --> 00:05:48,000
complexity understanding the complexity

00:05:46,639 --> 00:05:49,360
of the system understanding

00:05:48,000 --> 00:05:51,039
where we can reduce or eliminate

00:05:49,360 --> 00:05:52,000
complexity or where we just have to

00:05:51,039 --> 00:05:53,840
manage it because it's

00:05:52,000 --> 00:05:55,600
irreducible in the structure of our of

00:05:53,840 --> 00:05:56,880
our environment and then collaboration

00:05:55,600 --> 00:05:58,240
understanding those shared purposes and

00:05:56,880 --> 00:05:59,280
goals and working towards the business

00:05:58,240 --> 00:06:00,880
outcomes right

00:05:59,280 --> 00:06:02,400
these are the things that we as humans

00:06:00,880 --> 00:06:04,560
are fundamentally really good at

00:06:02,400 --> 00:06:06,639
of designing the problems to the uh

00:06:04,560 --> 00:06:08,080
designing the solutions to the problems

00:06:06,639 --> 00:06:09,680
understanding the context of why the

00:06:08,080 --> 00:06:11,440
problem is important understanding the

00:06:09,680 --> 00:06:12,560
complexity of it and then collaborating

00:06:11,440 --> 00:06:14,000
with everybody in the company to make

00:06:12,560 --> 00:06:16,080
sure that we have an effective

00:06:14,000 --> 00:06:17,520
uh holistic solution right this is one

00:06:16,080 --> 00:06:18,960
of the key things of devops is about

00:06:17,520 --> 00:06:20,960
bringing developers and operations

00:06:18,960 --> 00:06:23,440
together and then devsecops is you know

00:06:20,960 --> 00:06:25,199
security and we can do qa and you know

00:06:23,440 --> 00:06:26,720
we can continue to expand the bus but

00:06:25,199 --> 00:06:28,240
the point being is that we're all here

00:06:26,720 --> 00:06:29,759
together to make the business effective

00:06:28,240 --> 00:06:31,759
to make ourselves effective

00:06:29,759 --> 00:06:32,880
and that's really where the humans are

00:06:31,759 --> 00:06:35,680
are really effective

00:06:32,880 --> 00:06:39,520
not in manually setting up dns servers

00:06:35,680 --> 00:06:41,440
100 times on 100 different servers

00:06:39,520 --> 00:06:43,199
so if humans aren't good at repetitive

00:06:41,440 --> 00:06:44,880
tasks but they are really good at

00:06:43,199 --> 00:06:46,319
writing and solving complex problems

00:06:44,880 --> 00:06:48,000
what's the better way

00:06:46,319 --> 00:06:49,840
well obviously we're in a devops track

00:06:48,000 --> 00:06:51,120
so automation right devops is the

00:06:49,840 --> 00:06:53,120
is the purpose of this is what we're

00:06:51,120 --> 00:06:54,400
talking about today and so

00:06:53,120 --> 00:06:56,080
what are the ways in which we've solved

00:06:54,400 --> 00:06:57,440
this historically right well if we go

00:06:56,080 --> 00:06:58,319
through the layers of configuration

00:06:57,440 --> 00:07:01,440
management

00:06:58,319 --> 00:07:03,680
we have a pretty straightforward uh

00:07:01,440 --> 00:07:04,800
scripting uh is is the first one right

00:07:03,680 --> 00:07:06,479
you know okay i

00:07:04,800 --> 00:07:08,319
i wrote the thing in bash or did random

00:07:06,479 --> 00:07:09,520
commands in bash or powershell now i'm

00:07:08,319 --> 00:07:10,240
gonna write a script that just does it

00:07:09,520 --> 00:07:12,000
for me

00:07:10,240 --> 00:07:13,440
goes in order maybe i put some logic in

00:07:12,000 --> 00:07:15,680
there put some ifs

00:07:13,440 --> 00:07:16,880
i can let it run maybe some inputs right

00:07:15,680 --> 00:07:17,840
i can do all that kind of stuff on these

00:07:16,880 --> 00:07:19,199
scripts but

00:07:17,840 --> 00:07:21,280
if you're just writing scripts you have

00:07:19,199 --> 00:07:22,880
to manage them somehow you have to move

00:07:21,280 --> 00:07:23,360
them from system to system when you need

00:07:22,880 --> 00:07:24,880
them

00:07:23,360 --> 00:07:26,479
so you need some sort of configuration

00:07:24,880 --> 00:07:27,919
management tool that can orchestrate all

00:07:26,479 --> 00:07:29,280
of that right this is where tools like

00:07:27,919 --> 00:07:31,120
terraform and chef

00:07:29,280 --> 00:07:32,880
and also ansible and puppet come into

00:07:31,120 --> 00:07:34,240
play right really

00:07:32,880 --> 00:07:36,240
making sure we have a holistic

00:07:34,240 --> 00:07:38,000
understanding of okay this is the tasks

00:07:36,240 --> 00:07:39,360
that have to happen for the system and

00:07:38,000 --> 00:07:41,440
some of these are better at desired

00:07:39,360 --> 00:07:43,039
state and defining that as code

00:07:41,440 --> 00:07:44,479
and some of them are not but the point

00:07:43,039 --> 00:07:46,080
being is that this is a you know

00:07:44,479 --> 00:07:47,520
continual process and then as we start

00:07:46,080 --> 00:07:48,720
getting things into okay let's get into

00:07:47,520 --> 00:07:50,080
the source code

00:07:48,720 --> 00:07:51,759
then we still run into the problem of

00:07:50,080 --> 00:07:53,280
what happens when somebody goes into

00:07:51,759 --> 00:07:54,560
production and makes a change

00:07:53,280 --> 00:07:56,800
how do we make sure we get that back

00:07:54,560 --> 00:07:58,960
into source code right all these things

00:07:56,800 --> 00:08:01,360
continue to tie in and continue to work

00:07:58,960 --> 00:08:01,360
together

00:08:02,479 --> 00:08:09,199
so one of the things we can get to

00:08:05,520 --> 00:08:10,080
is this idea of code and system

00:08:09,199 --> 00:08:11,840
integrity

00:08:10,080 --> 00:08:13,440
when we're thinking about audits and

00:08:11,840 --> 00:08:14,960
security and compliance in particular

00:08:13,440 --> 00:08:16,400
there's a there's a question that often

00:08:14,960 --> 00:08:18,240
shows up from our auditors of

00:08:16,400 --> 00:08:19,759
well how do you know the system is

00:08:18,240 --> 00:08:20,800
configured the way you say it's

00:08:19,759 --> 00:08:23,280
configured

00:08:20,800 --> 00:08:25,199
right how can you prove that information

00:08:23,280 --> 00:08:26,400
to me as an auditor or as a security or

00:08:25,199 --> 00:08:29,120
compliance

00:08:26,400 --> 00:08:31,520
officer or professional and so there's

00:08:29,120 --> 00:08:34,080
two things here that are really critical

00:08:31,520 --> 00:08:35,519
there's integrity checks guess what it's

00:08:34,080 --> 00:08:36,560
code we have checksums we have the

00:08:35,519 --> 00:08:38,080
ability to validate

00:08:36,560 --> 00:08:39,919
the integrity of the code we ran on the

00:08:38,080 --> 00:08:41,360
system is the same code that's in our

00:08:39,919 --> 00:08:42,800
source code repository it's the same

00:08:41,360 --> 00:08:44,720
code that ran through qa

00:08:42,800 --> 00:08:45,839
we can validate those code that code in

00:08:44,720 --> 00:08:47,760
those packages

00:08:45,839 --> 00:08:49,360
really easily really simply we can use

00:08:47,760 --> 00:08:51,200
that to validate and say hey

00:08:49,360 --> 00:08:52,880
the thing that ran in production i can

00:08:51,200 --> 00:08:54,399
prove to you it's exact same thing i ran

00:08:52,880 --> 00:08:55,839
in development which means the results

00:08:54,399 --> 00:08:57,200
are going to be the exact same

00:08:55,839 --> 00:08:58,720
and then we add that with a chain of

00:08:57,200 --> 00:09:00,640
custody so we take that code that

00:08:58,720 --> 00:09:02,000
secured a code that says hey

00:09:00,640 --> 00:09:04,399
i know what this thing is i know what's

00:09:02,000 --> 00:09:06,080
inside of it and we secure the pipeline

00:09:04,399 --> 00:09:08,399
we say we now say hey look

00:09:06,080 --> 00:09:09,920
the only way that this code got to the

00:09:08,399 --> 00:09:10,959
system or these changes got to the

00:09:09,920 --> 00:09:12,720
system in question

00:09:10,959 --> 00:09:14,480
is through this pipeline and i can prove

00:09:12,720 --> 00:09:16,880
to you the integrity of the pipeline

00:09:14,480 --> 00:09:18,800
because i'm going to remove human access

00:09:16,880 --> 00:09:19,760
from production

00:09:18,800 --> 00:09:20,480
and this is what we're talking about

00:09:19,760 --> 00:09:22,720
here we're talking the human free

00:09:20,480 --> 00:09:25,839
pipeline we're saying literally

00:09:22,720 --> 00:09:28,480
take away ssh and 1rm take away rdp

00:09:25,839 --> 00:09:29,040
take away the ability for individuals to

00:09:28,480 --> 00:09:31,440
make

00:09:29,040 --> 00:09:32,800
production changes and what this allows

00:09:31,440 --> 00:09:34,720
us to do is to say

00:09:32,800 --> 00:09:36,399
i know the only way that system got

00:09:34,720 --> 00:09:38,480
built was the code

00:09:36,399 --> 00:09:40,480
the code only got deployed through the

00:09:38,480 --> 00:09:42,000
pipeline and i can prove to you that no

00:09:40,480 --> 00:09:43,600
human has ever locked into that box

00:09:42,000 --> 00:09:46,080
in order to tamper with it in in the

00:09:43,600 --> 00:09:46,080
first place

00:09:48,800 --> 00:09:51,519
this is a great time by the way for

00:09:50,080 --> 00:09:52,880
folks if you have questions to start

00:09:51,519 --> 00:09:55,440
putting into the q a

00:09:52,880 --> 00:09:56,959
uh because i guarantee you that i am

00:09:55,440 --> 00:10:00,399
going to run out of uh

00:09:56,959 --> 00:10:02,880
content well before i run out of time

00:10:00,399 --> 00:10:04,640
all right so is the human free pipeline

00:10:02,880 --> 00:10:06,560
the thing i can buy is it a is a

00:10:04,640 --> 00:10:08,320
is an idea is it a thing like what what

00:10:06,560 --> 00:10:09,440
is this actual thing how is this how

00:10:08,320 --> 00:10:11,040
does this actually work

00:10:09,440 --> 00:10:13,040
well it really is just a set of design

00:10:11,040 --> 00:10:14,800
principles it's just to say a couple

00:10:13,040 --> 00:10:17,519
simple rules about the environment

00:10:14,800 --> 00:10:18,880
that we're going to operate in the first

00:10:17,519 --> 00:10:19,920
is that human interaction should be with

00:10:18,880 --> 00:10:22,800
source code

00:10:19,920 --> 00:10:23,760
only what this means is that if you need

00:10:22,800 --> 00:10:25,200
to make a change in production you're

00:10:23,760 --> 00:10:27,519
not logging into a system of production

00:10:25,200 --> 00:10:28,959
you are literally just going to the code

00:10:27,519 --> 00:10:31,440
making a change letting the pipeline do

00:10:28,959 --> 00:10:32,800
the rest you need to secure the cdi and

00:10:31,440 --> 00:10:34,399
cd pipeline you need to make sure that

00:10:32,800 --> 00:10:37,279
you have the appropriate guards

00:10:34,399 --> 00:10:39,519
in place to validate that uh you know

00:10:37,279 --> 00:10:41,360
only authorized users can commit code

00:10:39,519 --> 00:10:43,040
um and that has been peer reviewed and

00:10:41,360 --> 00:10:44,800
checked by appropriate professionals as

00:10:43,040 --> 00:10:48,560
we go through the process and that is

00:10:44,800 --> 00:10:50,560
past security and functional tests

00:10:48,560 --> 00:10:52,000
and then we need to make sure we don't

00:10:50,560 --> 00:10:52,640
have any human access to production so

00:10:52,000 --> 00:10:54,560
there's no

00:10:52,640 --> 00:10:55,839
way around the pipeline for anybody to

00:10:54,560 --> 00:10:57,360
make a change in production without

00:10:55,839 --> 00:10:58,240
going through the necessary controls and

00:10:57,360 --> 00:11:00,079
procedures

00:10:58,240 --> 00:11:01,600
and the result is our only interaction

00:11:00,079 --> 00:11:03,360
available with the source code right the

00:11:01,600 --> 00:11:05,120
only way that we can talk to the system

00:11:03,360 --> 00:11:06,800
is with source code it's kind of a black

00:11:05,120 --> 00:11:07,519
box that happens between source code and

00:11:06,800 --> 00:11:11,600
production

00:11:07,519 --> 00:11:11,600
and then the systems are updated in prod

00:11:11,760 --> 00:11:14,959
and so what i'm talking about it from a

00:11:13,519 --> 00:11:16,240
kind of design perspective this is

00:11:14,959 --> 00:11:17,360
really what we're talking about from

00:11:16,240 --> 00:11:19,760
from a visual

00:11:17,360 --> 00:11:21,360
uh component developers and operations

00:11:19,760 --> 00:11:25,120
folks devops right any of us

00:11:21,360 --> 00:11:26,560
really we operate off of uh code commit

00:11:25,120 --> 00:11:28,160
from a security perspective we can put

00:11:26,560 --> 00:11:29,120
in two-person rule at the very front we

00:11:28,160 --> 00:11:31,279
can say hey look

00:11:29,120 --> 00:11:33,600
if galen committed code madeleine has to

00:11:31,279 --> 00:11:34,399
approve it galen cannot approve his own

00:11:33,600 --> 00:11:36,720
code changes

00:11:34,399 --> 00:11:38,079
right real simple rules to put in place

00:11:36,720 --> 00:11:40,079
really hard to enforce when you're

00:11:38,079 --> 00:11:41,519
talking about production ssh access

00:11:40,079 --> 00:11:44,000
because it's really hard to validate

00:11:41,519 --> 00:11:46,640
without buying a bunch of very expensive

00:11:44,000 --> 00:11:47,519
uh man in the middle and ssh you know uh

00:11:46,640 --> 00:11:49,680
bastion host

00:11:47,519 --> 00:11:51,440
gear and forcing people to sit over the

00:11:49,680 --> 00:11:53,279
shoulder to really validate that hey

00:11:51,440 --> 00:11:55,519
galen only did the things that he said

00:11:53,279 --> 00:11:56,720
he was gonna do or we told him to do

00:11:55,519 --> 00:11:58,240
unless you do a bunch of log things

00:11:56,720 --> 00:11:59,519
after the fact but then you're after the

00:11:58,240 --> 00:12:00,399
fact and you're catching things after

00:11:59,519 --> 00:12:02,240
they've happened

00:12:00,399 --> 00:12:04,320
this allows us to catch a catch anything

00:12:02,240 --> 00:12:06,959
we want well before

00:12:04,320 --> 00:12:08,000
uh code commit well sorry at code commit

00:12:06,959 --> 00:12:09,360
or before

00:12:08,000 --> 00:12:11,440
uh well before it actually even gets

00:12:09,360 --> 00:12:12,560
deployed to a system so source code

00:12:11,440 --> 00:12:13,760
takes the code

00:12:12,560 --> 00:12:15,600
triggers a build of whatever we're

00:12:13,760 --> 00:12:16,560
talking about here our automation takes

00:12:15,600 --> 00:12:20,480
over does some

00:12:16,560 --> 00:12:22,160
uh quick fast cheap testing unit syntax

00:12:20,480 --> 00:12:23,600
create a build create an artifact again

00:12:22,160 --> 00:12:24,160
i talked about that checksum being a key

00:12:23,600 --> 00:12:26,399
component

00:12:24,160 --> 00:12:28,000
the artifact that we build or manage in

00:12:26,399 --> 00:12:29,440
our code here is really important to

00:12:28,000 --> 00:12:31,200
validating the integrity

00:12:29,440 --> 00:12:32,560
as we go through it and then we can

00:12:31,200 --> 00:12:34,880
deploy to an environment we can deploy

00:12:32,560 --> 00:12:36,639
directly to our testing environment

00:12:34,880 --> 00:12:38,480
we can deploy into staging we can deploy

00:12:36,639 --> 00:12:41,040
into qa and you can have

00:12:38,480 --> 00:12:41,839
two to or zero to 25 environments here

00:12:41,040 --> 00:12:44,160
right

00:12:41,839 --> 00:12:46,160
your environment your rules for what it

00:12:44,160 --> 00:12:49,839
looks like to get to the next stage

00:12:46,160 --> 00:12:51,680
is all inside of your your structure

00:12:49,839 --> 00:12:53,279
one of the things i see a lot as people

00:12:51,680 --> 00:12:54,399
try to go down this path is they take

00:12:53,279 --> 00:12:57,120
their existing

00:12:54,399 --> 00:12:58,800
big heavy change review boards right and

00:12:57,120 --> 00:12:59,839
they change approvals at the cabs and

00:12:58,800 --> 00:13:01,680
say okay

00:12:59,839 --> 00:13:03,680
well we're gonna create a pipeline and

00:13:01,680 --> 00:13:07,600
we're gonna put everything inside of it

00:13:03,680 --> 00:13:08,880
and we'll go and you spend six months

00:13:07,600 --> 00:13:09,519
building this structure building all the

00:13:08,880 --> 00:13:11,279
things

00:13:09,519 --> 00:13:13,040
implementing it with the current review

00:13:11,279 --> 00:13:14,160
process and you find that your pipeline

00:13:13,040 --> 00:13:15,680
is no faster

00:13:14,160 --> 00:13:17,440
that's because your review process isn't

00:13:15,680 --> 00:13:18,399
any faster right

00:13:17,440 --> 00:13:20,000
one of the things that's really

00:13:18,399 --> 00:13:21,120
important as we think about and go

00:13:20,000 --> 00:13:23,200
through these designs

00:13:21,120 --> 00:13:24,240
is what are the things we need to

00:13:23,200 --> 00:13:26,480
actually attest

00:13:24,240 --> 00:13:28,079
as we go through the security channels

00:13:26,480 --> 00:13:31,680
or go through the change channels

00:13:28,079 --> 00:13:34,880
about these things again i have

00:13:31,680 --> 00:13:36,399
code commit i have uh build

00:13:34,880 --> 00:13:38,959
and i have testing throughout the

00:13:36,399 --> 00:13:40,079
pipeline i need to automate as much of

00:13:38,959 --> 00:13:42,880
the testing as possible

00:13:40,079 --> 00:13:44,079
all the things around like do we have uh

00:13:42,880 --> 00:13:46,560
vulnerabilities in the code

00:13:44,079 --> 00:13:48,880
uh scans are we using outdated libraries

00:13:46,560 --> 00:13:51,199
right all that kind of stuff needs to be

00:13:48,880 --> 00:13:52,160
there automatic not having people

00:13:51,199 --> 00:13:54,079
involved

00:13:52,160 --> 00:13:56,560
and then a human approval is really just

00:13:54,079 --> 00:13:57,600
to say did the automation do its job

00:13:56,560 --> 00:13:59,360
correctly yes or no

00:13:57,600 --> 00:14:00,880
right or if especially if we're going to

00:13:59,360 --> 00:14:02,480
production in a sensitive environment

00:14:00,880 --> 00:14:05,040
are we in the appropriate window

00:14:02,480 --> 00:14:07,360
to run a production change right that's

00:14:05,040 --> 00:14:09,120
the kind of question we want to ask here

00:14:07,360 --> 00:14:11,519
and as we build them we really actually

00:14:09,120 --> 00:14:13,360
want to say for the first

00:14:11,519 --> 00:14:15,839
first while we're building this we're

00:14:13,360 --> 00:14:17,680
really going to put very very little

00:14:15,839 --> 00:14:18,160
roadblocks or gates in this process at

00:14:17,680 --> 00:14:20,240
all

00:14:18,160 --> 00:14:22,399
really we want the two-person rule at

00:14:20,240 --> 00:14:23,440
the front and maybe a human approval at

00:14:22,399 --> 00:14:25,519
production and that's

00:14:23,440 --> 00:14:27,519
it that's all we care about because if

00:14:25,519 --> 00:14:29,279
we're replacing things like ssh and rdp

00:14:27,519 --> 00:14:30,079
that are fast and easy and efficient and

00:14:29,279 --> 00:14:31,920
people are

00:14:30,079 --> 00:14:33,360
really used to quickly getting to a

00:14:31,920 --> 00:14:34,639
system getting the results that they

00:14:33,360 --> 00:14:36,720
want

00:14:34,639 --> 00:14:38,639
out of it and iterating we need to make

00:14:36,720 --> 00:14:40,320
the process replacing it with

00:14:38,639 --> 00:14:41,760
exactly the same or similar to that as

00:14:40,320 --> 00:14:43,040
possible so that people will build the

00:14:41,760 --> 00:14:44,560
muscle memory going

00:14:43,040 --> 00:14:46,160
yep i know that the way to make the

00:14:44,560 --> 00:14:47,839
change to change the code

00:14:46,160 --> 00:14:50,320
the code will then change the system for

00:14:47,839 --> 00:14:52,639
me and as we go faster and get better

00:14:50,320 --> 00:14:54,399
we can then add in more and more uh

00:14:52,639 --> 00:14:59,839
pieces into it we don't want to boil the

00:14:54,399 --> 00:14:59,839
ocean as we start off from this process

00:15:03,040 --> 00:15:07,120
so here's a slightly different view of

00:15:05,040 --> 00:15:08,800
what this can look like

00:15:07,120 --> 00:15:10,720
uh and what the key idea here is that

00:15:08,800 --> 00:15:12,320
there's typically three major

00:15:10,720 --> 00:15:14,160
pieces of our environment that we're

00:15:12,320 --> 00:15:15,120
working with uh from an operational and

00:15:14,160 --> 00:15:17,120
security level

00:15:15,120 --> 00:15:19,360
there's the application stack there is

00:15:17,120 --> 00:15:20,560
our security and audit and kind of um

00:15:19,360 --> 00:15:21,920
you know what does the system look like

00:15:20,560 --> 00:15:22,560
from a security compliance perspective

00:15:21,920 --> 00:15:24,079
policy

00:15:22,560 --> 00:15:25,920
then there's the operations you know how

00:15:24,079 --> 00:15:27,040
did we build it uh what do we need to

00:15:25,920 --> 00:15:28,720
manage from it um

00:15:27,040 --> 00:15:30,480
if you're in you know kubernetes and

00:15:28,720 --> 00:15:31,680
container lane maybe this is offloaded a

00:15:30,480 --> 00:15:32,720
lot of this stuff has been offloaded to

00:15:31,680 --> 00:15:33,680
your cloud provider

00:15:32,720 --> 00:15:35,360
right but there's some sort of

00:15:33,680 --> 00:15:36,320
management we have to do of of that

00:15:35,360 --> 00:15:38,639
structure

00:15:36,320 --> 00:15:40,320
if you're talking uh chef this is where

00:15:38,639 --> 00:15:41,360
core chef infra comes into place the

00:15:40,320 --> 00:15:43,279
remediation side

00:15:41,360 --> 00:15:44,320
security comes out of our uh compliance

00:15:43,279 --> 00:15:45,440
and inspect product and then

00:15:44,320 --> 00:15:46,959
applications are

00:15:45,440 --> 00:15:48,480
the habitat product but the basic

00:15:46,959 --> 00:15:49,600
structure is that each object we're

00:15:48,480 --> 00:15:51,440
working with regardless of what

00:15:49,600 --> 00:15:54,320
structure we're talking about here

00:15:51,440 --> 00:15:54,959
if it's a if it's a container if it's a

00:15:54,320 --> 00:15:56,959
rpm

00:15:54,959 --> 00:15:58,240
if it's a package if it's honestly even

00:15:56,959 --> 00:16:00,320
just a script file

00:15:58,240 --> 00:16:01,920
right we create an artifact that is that

00:16:00,320 --> 00:16:03,600
thing that code

00:16:01,920 --> 00:16:05,680
locked at a moment in time everything

00:16:03,600 --> 00:16:07,360
that it needs to run

00:16:05,680 --> 00:16:08,560
that's the thing we build that goes to

00:16:07,360 --> 00:16:10,160
the pipeline and gets deployed to a

00:16:08,560 --> 00:16:12,800
trusted artifact store

00:16:10,160 --> 00:16:13,920
the ideal way to run this in production

00:16:12,800 --> 00:16:15,920
is the fleet

00:16:13,920 --> 00:16:18,160
pulls from the artifact store so what we

00:16:15,920 --> 00:16:21,279
have is we have a one-way flow

00:16:18,160 --> 00:16:22,959
from development to this artifact store

00:16:21,279 --> 00:16:25,040
and then we make a decision

00:16:22,959 --> 00:16:26,399
when the fleet is going to go grab the

00:16:25,040 --> 00:16:27,440
updated version from the artifact

00:16:26,399 --> 00:16:29,040
repository

00:16:27,440 --> 00:16:30,639
this means that the artifact repository

00:16:29,040 --> 00:16:31,920
is the source of truth for what

00:16:30,639 --> 00:16:33,440
production looks like

00:16:31,920 --> 00:16:35,120
not necessarily the fleet because the

00:16:33,440 --> 00:16:35,759
fleet is just grabbing from the source

00:16:35,120 --> 00:16:36,959
of truth

00:16:35,759 --> 00:16:38,160
and then we can make sure we update that

00:16:36,959 --> 00:16:39,040
source of truth only through the

00:16:38,160 --> 00:16:41,360
pipeline

00:16:39,040 --> 00:16:42,880
only with artifacts and then again

00:16:41,360 --> 00:16:43,440
locking the humans out of the process in

00:16:42,880 --> 00:16:45,120
the middle

00:16:43,440 --> 00:16:47,519
allows us to really attest that from a

00:16:45,120 --> 00:16:50,160
security compliance perspective

00:16:47,519 --> 00:16:52,959
this thing is in fact built the way

00:16:50,160 --> 00:16:52,959
we've said it's built

00:16:55,360 --> 00:16:58,959
so why does all this matter why why are

00:16:57,759 --> 00:17:00,639
we spending so much time thinking about

00:16:58,959 --> 00:17:02,959
security and compliance as part of this

00:17:00,639 --> 00:17:05,439
process galen keeps talking about audits

00:17:02,959 --> 00:17:07,039
what's like i'm just in operations or

00:17:05,439 --> 00:17:09,520
i'm development i don't i don't know why

00:17:07,039 --> 00:17:10,480
i care about this well we spent a lot of

00:17:09,520 --> 00:17:12,240
time working with security and

00:17:10,480 --> 00:17:12,640
compliance teams uh particularly trying

00:17:12,240 --> 00:17:15,199
to help

00:17:12,640 --> 00:17:16,079
uh organizations adopt devops and what

00:17:15,199 --> 00:17:18,640
we really find

00:17:16,079 --> 00:17:20,319
is that if security compliance isn't on

00:17:18,640 --> 00:17:22,079
board and doesn't understand

00:17:20,319 --> 00:17:23,679
the new way in which we're going to make

00:17:22,079 --> 00:17:24,640
changes production the new speed at

00:17:23,679 --> 00:17:26,559
which we're going to operate

00:17:24,640 --> 00:17:28,160
they end up being a really huge blocker

00:17:26,559 --> 00:17:30,559
to our adopt

00:17:28,160 --> 00:17:32,320
adoption efforts and one of the things

00:17:30,559 --> 00:17:34,480
we found as we started diving into

00:17:32,320 --> 00:17:35,760
what happens inside of an audit is that

00:17:34,480 --> 00:17:39,600
the state of the system

00:17:35,760 --> 00:17:41,760
the actual just what is the current

00:17:39,600 --> 00:17:43,440
configuration of the thing in production

00:17:41,760 --> 00:17:46,080
does it meet the rules yes or no

00:17:43,440 --> 00:17:47,520
is really just one part of it how

00:17:46,080 --> 00:17:49,360
changes happen in the system is super

00:17:47,520 --> 00:17:50,480
critical and a lot of time is spent on

00:17:49,360 --> 00:17:52,960
every audit

00:17:50,480 --> 00:17:54,559
documenting how did we get to where we

00:17:52,960 --> 00:17:57,760
are how do we know

00:17:54,559 --> 00:17:59,919
that nothing else got into the process

00:17:57,760 --> 00:18:01,520
in the middle of it that we didn't know

00:17:59,919 --> 00:18:02,960
about right and so this is really where

00:18:01,520 --> 00:18:05,440
the secure ci cd

00:18:02,960 --> 00:18:06,320
comes into play to say look i can prove

00:18:05,440 --> 00:18:07,840
to you

00:18:06,320 --> 00:18:09,120
exactly which code is in production and

00:18:07,840 --> 00:18:09,760
i can prove to you that the code never

00:18:09,120 --> 00:18:13,360
left my

00:18:09,760 --> 00:18:15,039
my custody through this entire process

00:18:13,360 --> 00:18:16,640
and so this allows us to attest to the

00:18:15,039 --> 00:18:17,840
integrity of the artifacts which allows

00:18:16,640 --> 00:18:18,720
us to attest to the integrity of the

00:18:17,840 --> 00:18:22,720
system

00:18:18,720 --> 00:18:27,280
and uh really by its nature gives us

00:18:22,720 --> 00:18:29,679
the structure of of how do we

00:18:27,280 --> 00:18:31,039
gives us the structure of how we made

00:18:29,679 --> 00:18:32,320
those changes as well

00:18:31,039 --> 00:18:33,440
so that's it's not quite

00:18:32,320 --> 00:18:34,799
self-documenting we should we should

00:18:33,440 --> 00:18:35,440
make sure to add some documentation to

00:18:34,799 --> 00:18:36,640
these audits

00:18:35,440 --> 00:18:38,480
but really making sure that we

00:18:36,640 --> 00:18:40,799
understand saying hey

00:18:38,480 --> 00:18:43,200
i don't have to go through like it's you

00:18:40,799 --> 00:18:44,640
know joe over in you know operations

00:18:43,200 --> 00:18:46,559
goes and actually runs the deploy it's

00:18:44,640 --> 00:18:47,840
no the deploy happens this way

00:18:46,559 --> 00:18:49,520
these are the people who can authorize

00:18:47,840 --> 00:18:50,720
it this is the validation that the

00:18:49,520 --> 00:18:52,960
people who are in the

00:18:50,720 --> 00:18:54,559
document list of who can authorize it

00:18:52,960 --> 00:18:56,080
are actually in the approved list on in

00:18:54,559 --> 00:18:58,240
the repository as well

00:18:56,080 --> 00:18:59,760
so again uh and the artifact is again

00:18:58,240 --> 00:19:00,400
the trusted artifact store is the source

00:18:59,760 --> 00:19:02,160
of truth

00:19:00,400 --> 00:19:04,080
and this allows us for rebuild to

00:19:02,160 --> 00:19:06,960
production at any point in time

00:19:04,080 --> 00:19:08,640
so by taking the things we're already

00:19:06,960 --> 00:19:10,559
doing from a devops perspective of the

00:19:08,640 --> 00:19:11,679
pipeline building up uh you know

00:19:10,559 --> 00:19:14,400
continuous integration continuous

00:19:11,679 --> 00:19:15,840
delivery pipelines by adding in a couple

00:19:14,400 --> 00:19:17,600
components of how we think about and

00:19:15,840 --> 00:19:19,280
structure it we've

00:19:17,600 --> 00:19:21,360
gained some serious security and

00:19:19,280 --> 00:19:23,600
compliance benefits

00:19:21,360 --> 00:19:24,799
almost kind of as an afterthought but

00:19:23,600 --> 00:19:26,160
these are the things we need to talk

00:19:24,799 --> 00:19:27,039
about when we go to security compliance

00:19:26,160 --> 00:19:29,360
and say hey

00:19:27,039 --> 00:19:30,960
we're gonna go do ci or cd we're gonna

00:19:29,360 --> 00:19:32,880
go faster we're gonna be shipping

00:19:30,960 --> 00:19:34,320
potentially multiple times a day or at

00:19:32,880 --> 00:19:35,760
least once or twice a week

00:19:34,320 --> 00:19:37,280
right any of these structures that

00:19:35,760 --> 00:19:38,160
change the paradigm of how we think

00:19:37,280 --> 00:19:40,000
about

00:19:38,160 --> 00:19:41,440
our production deployments really needs

00:19:40,000 --> 00:19:44,000
security compliance buy-in and this is

00:19:41,440 --> 00:19:44,000
how we get it

00:19:44,960 --> 00:19:51,840
so an example i don't have this up today

00:19:49,280 --> 00:19:52,400
for many reasons most notably of which

00:19:51,840 --> 00:19:55,520
uh

00:19:52,400 --> 00:19:57,039
my azure account is currently borked um

00:19:55,520 --> 00:19:59,039
but this is the basic structure of what

00:19:57,039 --> 00:19:59,360
this looks like and i in my next slide i

00:19:59,039 --> 00:20:01,919
will

00:19:59,360 --> 00:20:02,640
in fact have a link to the repository

00:20:01,919 --> 00:20:06,240
where it does

00:20:02,640 --> 00:20:08,480
uh it does work mostly um so uh

00:20:06,240 --> 00:20:09,360
please uh some grains of salt if you go

00:20:08,480 --> 00:20:10,400
and take a look at this but this is

00:20:09,360 --> 00:20:12,640
using azure git

00:20:10,400 --> 00:20:14,240
with azure pipelines uh when i make a

00:20:12,640 --> 00:20:15,200
code commit to azure git it triggers an

00:20:14,240 --> 00:20:17,280
automatic build

00:20:15,200 --> 00:20:18,720
the build runs through some tests uh it

00:20:17,280 --> 00:20:20,880
deploys to a vm

00:20:18,720 --> 00:20:21,760
that's listening to the artifact store

00:20:20,880 --> 00:20:26,240
um in

00:20:21,760 --> 00:20:28,559
my case it's a habitat builder

00:20:26,240 --> 00:20:30,000
deploys and runs any test it has and

00:20:28,559 --> 00:20:32,720
then there's a human approval gate

00:20:30,000 --> 00:20:34,080
to deploy to production again same thing

00:20:32,720 --> 00:20:36,400
production is grabbing from the artifact

00:20:34,080 --> 00:20:37,760
store and i have it set up with the

00:20:36,400 --> 00:20:40,960
pipeline such that

00:20:37,760 --> 00:20:42,159
i can't approve my own changes so only

00:20:40,960 --> 00:20:43,520
another authorized user on the

00:20:42,159 --> 00:20:45,840
repository can actually make those

00:20:43,520 --> 00:20:45,840
changes

00:20:47,280 --> 00:20:52,159
so to recap

00:20:50,400 --> 00:20:53,760
humans really suck at routine tasks

00:20:52,159 --> 00:20:55,600
we're let's be honest folks

00:20:53,760 --> 00:20:57,760
we're not good at them i'm i'm really

00:20:55,600 --> 00:20:58,880
bad at them maybe i'm lazy maybe i just

00:20:57,760 --> 00:21:00,799
hate inefficiency

00:20:58,880 --> 00:21:02,640
either way i do my best to automate as

00:21:00,799 --> 00:21:04,320
much as my life as possible

00:21:02,640 --> 00:21:06,159
we're really good at design complexity

00:21:04,320 --> 00:21:07,840
and collaboration so let's focus on

00:21:06,159 --> 00:21:09,200
providing the business values focus on

00:21:07,840 --> 00:21:09,840
making sure that we're doing positive

00:21:09,200 --> 00:21:11,679
things

00:21:09,840 --> 00:21:13,280
uh in the world in our space uh let's

00:21:11,679 --> 00:21:15,440
design the systems that that

00:21:13,280 --> 00:21:17,280
uh that work and do the uh do the

00:21:15,440 --> 00:21:19,520
routine tasks for us

00:21:17,280 --> 00:21:21,919
robots though really great of routine

00:21:19,520 --> 00:21:23,039
tasks let's build some robots to go do

00:21:21,919 --> 00:21:24,400
routine things like

00:21:23,039 --> 00:21:26,559
pushing the button that brings the

00:21:24,400 --> 00:21:28,640
artifact to production

00:21:26,559 --> 00:21:30,000
robots still have to be designed by

00:21:28,640 --> 00:21:31,600
humans ai is getting there

00:21:30,000 --> 00:21:33,600
but still some humans are designing that

00:21:31,600 --> 00:21:35,200
stuff as well right

00:21:33,600 --> 00:21:36,799
the key component here that we can do is

00:21:35,200 --> 00:21:37,679
we can take the automation plus some

00:21:36,799 --> 00:21:39,679
security uh

00:21:37,679 --> 00:21:41,360
ideas and constraints we can create a

00:21:39,679 --> 00:21:42,480
human-free zone which allows us to solve

00:21:41,360 --> 00:21:43,440
some

00:21:42,480 --> 00:21:45,440
security compliance securing appliance

00:21:43,440 --> 00:21:46,880
attestations we need to prove the

00:21:45,440 --> 00:21:48,960
integrity of our systems

00:21:46,880 --> 00:21:49,919
and then again here here's an example of

00:21:48,960 --> 00:21:54,080
of the pipeline

00:21:49,919 --> 00:21:57,679
for that to work with so

00:21:54,080 --> 00:21:59,520
like i said uh i certainly did not use

00:21:57,679 --> 00:22:02,240
up the full 45 minutes

00:21:59,520 --> 00:22:05,760
and i would love to get uh some

00:22:02,240 --> 00:22:05,760
questions and see what we can talk about

00:22:06,080 --> 00:22:10,159
yeah thank you galen um i actually do

00:22:08,000 --> 00:22:12,720
have a couple questions for you

00:22:10,159 --> 00:22:14,559
um so what are do you have any specific

00:22:12,720 --> 00:22:16,320
examples of how automation

00:22:14,559 --> 00:22:18,000
worked for you and you know what

00:22:16,320 --> 00:22:19,760
problems did that solve

00:22:18,000 --> 00:22:21,679
and maybe some examples of how

00:22:19,760 --> 00:22:23,760
automation failed

00:22:21,679 --> 00:22:24,720
sure yeah so let's start with the

00:22:23,760 --> 00:22:28,320
failures i think

00:22:24,720 --> 00:22:30,240
one of the most common ones in

00:22:28,320 --> 00:22:32,159
uh in automating things particularly

00:22:30,240 --> 00:22:33,520
configuration management and operations

00:22:32,159 --> 00:22:37,600
uh stacks

00:22:33,520 --> 00:22:39,039
is like just plenty of times where i've

00:22:37,600 --> 00:22:42,159
locked myself out of a system

00:22:39,039 --> 00:22:44,720
fully right uh and you know by trying to

00:22:42,159 --> 00:22:46,320
implement this uh you know not quite

00:22:44,720 --> 00:22:48,320
ready for ssh to go down

00:22:46,320 --> 00:22:50,000
and and my automation comes in and

00:22:48,320 --> 00:22:51,360
hardens the system and removes it

00:22:50,000 --> 00:22:54,159
and then all of a sudden i have a black

00:22:51,360 --> 00:22:55,760
box to deal with right um

00:22:54,159 --> 00:22:57,200
and you know this it's always a little

00:22:55,760 --> 00:22:58,720
bit terrifying that's why we don't

00:22:57,200 --> 00:23:00,720
run you know these changes directly in

00:22:58,720 --> 00:23:03,440
production we test them first and we

00:23:00,720 --> 00:23:04,960
we test them hard um really effectively

00:23:03,440 --> 00:23:05,919
but yeah like that's really where the

00:23:04,960 --> 00:23:07,520
failures come in

00:23:05,919 --> 00:23:09,520
is as you're going through this you're

00:23:07,520 --> 00:23:12,559
going to run into

00:23:09,520 --> 00:23:13,440
gaps in either your knowledge or things

00:23:12,559 --> 00:23:15,360
are just

00:23:13,440 --> 00:23:17,200
complex enough that that it's hard to

00:23:15,360 --> 00:23:18,720
really get a good understanding of what

00:23:17,200 --> 00:23:20,320
it is before you make a change

00:23:18,720 --> 00:23:22,240
um and you can definitely see those uh

00:23:20,320 --> 00:23:24,080
those failures

00:23:22,240 --> 00:23:25,360
on the other hand that's how we grow

00:23:24,080 --> 00:23:26,960
that's one of the things i really like

00:23:25,360 --> 00:23:28,559
about this space and and

00:23:26,960 --> 00:23:30,080
the areas we operate in and this is

00:23:28,559 --> 00:23:33,440
where the successes come into play

00:23:30,080 --> 00:23:35,360
which is that look i love the blameless

00:23:33,440 --> 00:23:36,880
postmortems i love the retroactives i

00:23:35,360 --> 00:23:38,080
love all of the things we do to make

00:23:36,880 --> 00:23:38,880
ourselves better and continue to

00:23:38,080 --> 00:23:42,320
challenge and grow

00:23:38,880 --> 00:23:42,799
on each other and you only get those i

00:23:42,320 --> 00:23:46,880
think

00:23:42,799 --> 00:23:48,559
really well in organizations when we

00:23:46,880 --> 00:23:51,200
when we collaborate well and we go fast

00:23:48,559 --> 00:23:51,760
like it's it's move fast and break stuff

00:23:51,200 --> 00:23:53,760
right like

00:23:51,760 --> 00:23:54,880
it's in the breakage that we we get to

00:23:53,760 --> 00:23:55,919
learn these things

00:23:54,880 --> 00:23:58,159
and i think that's one of the key

00:23:55,919 --> 00:23:58,640
components of uh of automation one

00:23:58,159 --> 00:24:01,279
reason is

00:23:58,640 --> 00:24:02,559
why i really love the space um and uh

00:24:01,279 --> 00:24:03,200
why i've been passionate in my career

00:24:02,559 --> 00:24:05,840
for the last

00:24:03,200 --> 00:24:05,840
seven years

00:24:06,480 --> 00:24:09,520
that's awesome um thank you so okay a

00:24:08,720 --> 00:24:10,799
couple more

00:24:09,520 --> 00:24:12,799
so then you mentioned chef and

00:24:10,799 --> 00:24:13,760
kubernetes earlier do you have any other

00:24:12,799 --> 00:24:16,880
tools that you use

00:24:13,760 --> 00:24:19,520
in debt in the devsecops pipelines yeah

00:24:16,880 --> 00:24:22,640
so um you know pick a ci tool

00:24:19,520 --> 00:24:24,240
uh uh i'm a big fan of both git lab and

00:24:22,640 --> 00:24:26,720
azure pipelines to both pretty

00:24:24,240 --> 00:24:28,320
pretty solid tools um i haven't seen

00:24:26,720 --> 00:24:30,159
really anything be

00:24:28,320 --> 00:24:31,520
obnoxiously hard for anybody uh

00:24:30,159 --> 00:24:32,000
concourse was one we played with for a

00:24:31,520 --> 00:24:33,679
while it was

00:24:32,000 --> 00:24:35,440
super simple to get going with really

00:24:33,679 --> 00:24:36,960
love the interaction with that one

00:24:35,440 --> 00:24:39,360
um obviously all the hashy tools

00:24:36,960 --> 00:24:40,559
terraform is critical for managing cloud

00:24:39,360 --> 00:24:44,720
environments

00:24:40,559 --> 00:24:46,240
um uh obviously i'm a big chef fan

00:24:44,720 --> 00:24:48,320
but you know like one of the things i

00:24:46,240 --> 00:24:50,159
i've learned in my time at chef is that

00:24:48,320 --> 00:24:51,520
uh if you're an ansible or puppet or

00:24:50,159 --> 00:24:54,559
salt fan uh

00:24:51,520 --> 00:24:56,000
look be happy like all of the tools are

00:24:54,559 --> 00:24:57,039
really mature they're all in a really

00:24:56,000 --> 00:24:58,559
good space

00:24:57,039 --> 00:25:00,799
um i really don't think there's any

00:24:58,559 --> 00:25:01,600
reason uh to continue to have turf wars

00:25:00,799 --> 00:25:03,440
over them

00:25:01,600 --> 00:25:04,799
um really what we're focused on a lot

00:25:03,440 --> 00:25:06,400
now is the security compliance space

00:25:04,799 --> 00:25:07,679
there's an audit and security testing

00:25:06,400 --> 00:25:08,400
component that's really lacking in

00:25:07,679 --> 00:25:10,320
environments

00:25:08,400 --> 00:25:11,679
that's a really key thing uh chef

00:25:10,320 --> 00:25:13,440
inspect is the tool

00:25:11,679 --> 00:25:14,720
on that side that's one of the things

00:25:13,440 --> 00:25:15,840
that i've been focused on a lot for the

00:25:14,720 --> 00:25:17,600
last two years

00:25:15,840 --> 00:25:19,279
and it's just uh it's you know really

00:25:17,600 --> 00:25:22,480
great really great stuff

00:25:19,279 --> 00:25:25,279
um what other things are in my stack uh

00:25:22,480 --> 00:25:25,679
honestly i'm i'm a windows user too i

00:25:25,279 --> 00:25:28,799
don't

00:25:25,679 --> 00:25:29,279
i don't run os x uh how what's mac os

00:25:28,799 --> 00:25:30,880
now

00:25:29,279 --> 00:25:32,799
see how outdated i am on it it's been

00:25:30,880 --> 00:25:35,200
it's been a long time um

00:25:32,799 --> 00:25:37,200
but so yeah so like you know uh you know

00:25:35,200 --> 00:25:37,919
i'm a big powershell fan but honestly

00:25:37,200 --> 00:25:40,559
bash and

00:25:37,919 --> 00:25:42,320
and um really for me i think it's like

00:25:40,559 --> 00:25:45,360
things like commander and

00:25:42,320 --> 00:25:47,760
uh uh

00:25:45,360 --> 00:25:49,200
visual studio code i was like took me a

00:25:47,760 --> 00:25:50,880
minute to remember which

00:25:49,200 --> 00:25:53,919
editor i used but yeah those those are

00:25:50,880 --> 00:25:56,559
all the key components there

00:25:53,919 --> 00:25:57,440
and then awesome and then last question

00:25:56,559 --> 00:25:58,960
for you

00:25:57,440 --> 00:26:00,640
um this is more of a personal opinion

00:25:58,960 --> 00:26:01,600
question um do you see a difference

00:26:00,640 --> 00:26:05,840
between using

00:26:01,600 --> 00:26:07,840
azure versus aws versus gcp

00:26:05,840 --> 00:26:09,200
i i think there's a little bit of

00:26:07,840 --> 00:26:10,400
difference between them obviously they

00:26:09,200 --> 00:26:13,440
all operate a bit differently

00:26:10,400 --> 00:26:15,600
i have found the hardest time

00:26:13,440 --> 00:26:17,679
going from aws to azure to understand

00:26:15,600 --> 00:26:20,320
how azure thinks about networking

00:26:17,679 --> 00:26:21,039
i think that was a a kind of a there's a

00:26:20,320 --> 00:26:23,120
bit

00:26:21,039 --> 00:26:24,320
just it operates differently it's up and

00:26:23,120 --> 00:26:26,880
aws feels

00:26:24,320 --> 00:26:27,600
much more traditional cisco like my

00:26:26,880 --> 00:26:30,640
brain

00:26:27,600 --> 00:26:32,720
manages the aquas better um

00:26:30,640 --> 00:26:34,400
i think we're starting to see the

00:26:32,720 --> 00:26:37,440
providers

00:26:34,400 --> 00:26:38,159
try to segment themselves into specific

00:26:37,440 --> 00:26:41,279
spaces

00:26:38,159 --> 00:26:43,360
right a little bit i think both gcp

00:26:41,279 --> 00:26:45,440
and aws are kind of fighting for some of

00:26:43,360 --> 00:26:48,559
that kind of like high compute

00:26:45,440 --> 00:26:49,679
you know really high load components and

00:26:48,559 --> 00:26:52,080
azure

00:26:49,679 --> 00:26:53,600
is doing a really good job of saying hey

00:26:52,080 --> 00:26:56,240
look you really can't

00:26:53,600 --> 00:26:57,600
rely upon just one of those guys you

00:26:56,240 --> 00:26:59,279
really need to make sure you have

00:26:57,600 --> 00:27:01,120
things going on and obviously azure has

00:26:59,279 --> 00:27:02,640
done a great job with office 365 and

00:27:01,120 --> 00:27:04,559
azure ad

00:27:02,640 --> 00:27:06,000
most people i see are running those

00:27:04,559 --> 00:27:07,679
components as well so so

00:27:06,000 --> 00:27:09,440
you kind of see some of those splits in

00:27:07,679 --> 00:27:12,480
in in the world but

00:27:09,440 --> 00:27:13,600
uh again i'm very much a pick the ones

00:27:12,480 --> 00:27:14,960
you like

00:27:13,600 --> 00:27:16,960
one of the things we tell our customers

00:27:14,960 --> 00:27:18,320
and i i i remember

00:27:16,960 --> 00:27:20,000
i've had a couple good conversations on

00:27:18,320 --> 00:27:21,760
this but i

00:27:20,000 --> 00:27:23,600
had one with a pretty large customer who

00:27:21,760 --> 00:27:26,399
were like yeah we're going all in on aws

00:27:23,600 --> 00:27:27,679
and i we're talking look that's a great

00:27:26,399 --> 00:27:29,120
you know it's fine you know great we're

00:27:27,679 --> 00:27:31,279
happy to help you with that that

00:27:29,120 --> 00:27:32,640
transition however you really need to

00:27:31,279 --> 00:27:34,720
understand like if abs

00:27:32,640 --> 00:27:35,919
goes down you your business is not

00:27:34,720 --> 00:27:38,080
running right

00:27:35,919 --> 00:27:39,919
um if you don't have a plan that backs

00:27:38,080 --> 00:27:42,240
you up somewhere or if you're

00:27:39,919 --> 00:27:43,440
um we've seen things with uh this is

00:27:42,240 --> 00:27:45,039
years ago but custom inc

00:27:43,440 --> 00:27:46,880
had a big ddos attack against them and

00:27:45,039 --> 00:27:48,240
they got up and running in rackspace in

00:27:46,880 --> 00:27:49,919
about three hours and got their

00:27:48,240 --> 00:27:52,159
businesses back online right

00:27:49,919 --> 00:27:53,200
so there's a disaster recovery and this

00:27:52,159 --> 00:27:56,240
and uh kind of

00:27:53,200 --> 00:27:58,080
business continuation plan that i think

00:27:56,240 --> 00:28:00,080
we're still kind of lacking sometimes in

00:27:58,080 --> 00:28:01,840
the enterprise and and sometimes and

00:28:00,080 --> 00:28:03,360
literally the customer in question there

00:28:01,840 --> 00:28:04,960
told me like look

00:28:03,360 --> 00:28:06,640
i'm pretty certain that i can see it you

00:28:04,960 --> 00:28:07,919
know i can deal with aws and my sls with

00:28:06,640 --> 00:28:09,600
aws when that happens

00:28:07,919 --> 00:28:10,960
but that's the risk i'm taking right

00:28:09,600 --> 00:28:11,840
they made a conscious risk for it and i

00:28:10,960 --> 00:28:12,799
think that's one of the things we need

00:28:11,840 --> 00:28:14,880
to be clear on

00:28:12,799 --> 00:28:17,200
in this space is as we go to the cloud

00:28:14,880 --> 00:28:18,720
and as we remove more and more things

00:28:17,200 --> 00:28:20,960
from our control

00:28:18,720 --> 00:28:22,240
from our data centers we need to be very

00:28:20,960 --> 00:28:22,880
clear about the risk decisions we're

00:28:22,240 --> 00:28:24,720
making

00:28:22,880 --> 00:28:26,399
and who we're uh who we're making those

00:28:24,720 --> 00:28:27,919
with

00:28:26,399 --> 00:28:29,679
so if you put your all your ads in one

00:28:27,919 --> 00:28:30,000
basket make sure you're you know you're

00:28:29,679 --> 00:28:33,600
doing

00:28:30,000 --> 00:28:35,760
that exactly yeah you can do it

00:28:33,600 --> 00:28:37,520
don't i mean like everybody people do it

00:28:35,760 --> 00:28:38,000
also just be aware that that's what

00:28:37,520 --> 00:28:40,880
you're you

00:28:38,000 --> 00:28:42,880
what decision you're making right right

00:28:40,880 --> 00:28:46,640
that makes that makes sense to me

00:28:42,880 --> 00:28:48,320
um awesome well so far those are the

00:28:46,640 --> 00:28:50,960
only three questions that we had today

00:28:48,320 --> 00:28:52,640
um if anyone else has any other

00:28:50,960 --> 00:28:53,440
questions please feel free to send them

00:28:52,640 --> 00:28:55,679
now

00:28:53,440 --> 00:28:57,360
um but i'll just have david do you have

00:28:55,679 --> 00:28:58,559
any other last minute comments and then

00:28:57,360 --> 00:29:02,559
i'll just kind of do a last

00:28:58,559 --> 00:29:05,360
spiel before we end uh i

00:29:02,559 --> 00:29:07,520
just thanks all for the time um you know

00:29:05,360 --> 00:29:08,799
if anybody has any questions uh i'm on

00:29:07,520 --> 00:29:10,559
twitter i'm not sure if i put it up

00:29:08,799 --> 00:29:13,279
anywhere galen underscore emery

00:29:10,559 --> 00:29:14,559
i'm also on linkedin um i'm sure my

00:29:13,279 --> 00:29:15,760
contact information is in my bio

00:29:14,559 --> 00:29:17,200
somewhere but if not

00:29:15,760 --> 00:29:18,880
i'm gayle and emery uh there's really

00:29:17,200 --> 00:29:20,080
only one of me um actually it's not true

00:29:18,880 --> 00:29:22,159
there's actually a

00:29:20,080 --> 00:29:23,440
skater kid out of tacoma so if you see

00:29:22,159 --> 00:29:24,840
anything weird on the internet that's

00:29:23,440 --> 00:29:27,360
from him not from me

00:29:24,840 --> 00:29:28,799
promise uh but yeah i really appreciate

00:29:27,360 --> 00:29:31,600
the time everybody and uh

00:29:28,799 --> 00:29:32,240
have a great day awesome yeah thank you

00:29:31,600 --> 00:29:34,880
very much

00:29:32,240 --> 00:29:35,840
there looks there are some chats in oh

00:29:34,880 --> 00:29:38,799
perfect

00:29:35,840 --> 00:29:40,080
chat hold on a second yeah do me to read

00:29:38,799 --> 00:29:43,279
it out for you

00:29:40,080 --> 00:29:44,960
uh looks like lyron benjamin said how do

00:29:43,279 --> 00:29:46,480
you handle things like secrets or config

00:29:44,960 --> 00:29:47,679
maps that you can't save anywhere in

00:29:46,480 --> 00:29:49,039
your source code

00:29:47,679 --> 00:29:50,960
yeah secrets management is actually a

00:29:49,039 --> 00:29:53,679
really interesting space as well

00:29:50,960 --> 00:29:54,640
um i recently ran into a group called a

00:29:53,679 --> 00:29:57,840
keyless

00:29:54,640 --> 00:29:58,960
a keyless is is who they are and they

00:29:57,840 --> 00:30:00,240
have a pretty clean competitor to

00:29:58,960 --> 00:30:01,919
hashicorp's vault

00:30:00,240 --> 00:30:03,679
uh that works really really

00:30:01,919 --> 00:30:05,200
interestingly um

00:30:03,679 --> 00:30:07,279
one of the key things that i didn't talk

00:30:05,200 --> 00:30:08,480
about in this presentation is

00:30:07,279 --> 00:30:09,840
there's a lot of secrets that obviously

00:30:08,480 --> 00:30:11,440
have to get managed from database

00:30:09,840 --> 00:30:14,399
passwords and connection strings and

00:30:11,440 --> 00:30:15,440
you know yada yada yada but one of the

00:30:14,399 --> 00:30:18,320
things that is

00:30:15,440 --> 00:30:20,399
we're seeing often is being abused in

00:30:18,320 --> 00:30:22,559
ransomware attacks in particular

00:30:20,399 --> 00:30:24,080
is actually your operational production

00:30:22,559 --> 00:30:25,919
credentials right like the credentials

00:30:24,080 --> 00:30:28,240
that i would use to talk to production

00:30:25,919 --> 00:30:29,520
are the ones that the uh attackers are

00:30:28,240 --> 00:30:31,120
using and then just

00:30:29,520 --> 00:30:32,480
running around grabbing a bunch of

00:30:31,120 --> 00:30:33,600
information before they decide to lock

00:30:32,480 --> 00:30:36,399
down the environment

00:30:33,600 --> 00:30:38,000
and so this is one of the things around

00:30:36,399 --> 00:30:39,760
the human free pipeline is that

00:30:38,000 --> 00:30:41,760
if i don't ever have a production

00:30:39,760 --> 00:30:42,480
credential like if that just doesn't

00:30:41,760 --> 00:30:43,919
exist

00:30:42,480 --> 00:30:46,080
then nobody can grab that and use it

00:30:43,919 --> 00:30:47,840
against me to do nefarious things in my

00:30:46,080 --> 00:30:48,399
systems right i can't have an insider

00:30:47,840 --> 00:30:50,640
threat

00:30:48,399 --> 00:30:52,640
i can't have an outside attacker grab my

00:30:50,640 --> 00:30:53,760
system if my laptop gets stolen

00:30:52,640 --> 00:30:55,360
there's nothing you know like the

00:30:53,760 --> 00:30:55,919
development credentials are there butch

00:30:55,360 --> 00:30:57,519
but like

00:30:55,919 --> 00:30:59,760
i don't necessarily have the same risk

00:30:57,519 --> 00:31:01,039
that i have as well so

00:30:59,760 --> 00:31:02,960
you obviously need robust secrets

00:31:01,039 --> 00:31:05,760
management as part of any uh

00:31:02,960 --> 00:31:07,519
robot any real production system um

00:31:05,760 --> 00:31:10,159
again you can pick the vendor ones

00:31:07,519 --> 00:31:11,679
um i'm a big fan of hashivault and then

00:31:10,159 --> 00:31:14,559
a keyless is a really clean one

00:31:11,679 --> 00:31:15,360
as well that has uh i still don't fully

00:31:14,559 --> 00:31:16,720
understand

00:31:15,360 --> 00:31:18,480
exactly how they do it but they have

00:31:16,720 --> 00:31:20,799
this distributed kind of key

00:31:18,480 --> 00:31:22,880
zero that their original key they use

00:31:20,799 --> 00:31:24,799
that basically never gets combined but

00:31:22,880 --> 00:31:28,000
still uses all the standard

00:31:24,799 --> 00:31:30,000
um well proven uh cryptography uh

00:31:28,000 --> 00:31:31,760
to to be secure so so there's some

00:31:30,000 --> 00:31:32,320
really clean things there but the basic

00:31:31,760 --> 00:31:34,000
structure

00:31:32,320 --> 00:31:36,159
of what we're talking about on secrets

00:31:34,000 --> 00:31:38,240
is um

00:31:36,159 --> 00:31:39,600
the only things they should get to them

00:31:38,240 --> 00:31:42,240
are the automation

00:31:39,600 --> 00:31:44,080
uh so like have the automation set up to

00:31:42,240 --> 00:31:46,080
grab the secrets appropriately

00:31:44,080 --> 00:31:47,919
this is where your api basically

00:31:46,080 --> 00:31:51,519
management is really really keen

00:31:47,919 --> 00:31:54,640
or king and uh you know really

00:31:51,519 --> 00:31:55,519
reduce eliminate remove the human access

00:31:54,640 --> 00:31:57,360
to those secrets

00:31:55,519 --> 00:31:59,120
and protect in fact one of my colleagues

00:31:57,360 --> 00:32:00,799
at chef nathan cerny really talks a lot

00:31:59,120 --> 00:32:02,799
about a break glass

00:32:00,799 --> 00:32:04,080
thing right you know we talk about the

00:32:02,799 --> 00:32:05,360
human free pipeline and i go to

00:32:04,080 --> 00:32:06,799
customers and i've got a few customers

00:32:05,360 --> 00:32:08,799
who who really do

00:32:06,799 --> 00:32:10,159
do this fully who really don't have any

00:32:08,799 --> 00:32:11,120
production access

00:32:10,159 --> 00:32:12,960
a lot of cloud native a lot of

00:32:11,120 --> 00:32:14,080
kubernetes in those environments but if

00:32:12,960 --> 00:32:16,320
we're talking about existing

00:32:14,080 --> 00:32:17,440
legacy systems we're not going to get

00:32:16,320 --> 00:32:19,039
there tomorrow right

00:32:17,440 --> 00:32:20,799
and so what we've done is we set up

00:32:19,039 --> 00:32:22,640
basically a break glass situation where

00:32:20,799 --> 00:32:23,279
you go into secrets management and check

00:32:22,640 --> 00:32:24,480
out

00:32:23,279 --> 00:32:25,840
the very clear the production

00:32:24,480 --> 00:32:27,519
credentials and then after you're done

00:32:25,840 --> 00:32:30,240
those credentials get rotated

00:32:27,519 --> 00:32:31,600
right so that we know exactly who got in

00:32:30,240 --> 00:32:33,279
and when and we can track all that

00:32:31,600 --> 00:32:34,480
information

00:32:33,279 --> 00:32:36,960
learn hopefully that answered your

00:32:34,480 --> 00:32:36,960
question for you

00:32:37,200 --> 00:32:43,840
awesome thank you

00:32:44,240 --> 00:32:46,320

YouTube URL: https://www.youtube.com/watch?v=Nmycq3BiUTQ


