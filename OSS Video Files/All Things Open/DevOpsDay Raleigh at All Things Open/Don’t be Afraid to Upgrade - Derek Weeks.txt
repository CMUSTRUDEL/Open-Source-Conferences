Title: Don’t be Afraid to Upgrade - Derek Weeks
Publication date: 2020-12-03
Playlist: DevOpsDay Raleigh at All Things Open
Description: 
	Presented by: Derek Weeks, Sonatype
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: With 20 million developers, 300,000 of open source projects, 1.5 trillion open source package downloads annually -- what could go wrong? Or better yet, what could we get more right?

For the past seven years, I’ve studied behaviors of commercial development teams, open source projects, and the community of adversaries attacking open source software supply chains. One thing is certain: when it comes to security, speed is king.

In 2017, it took three days for adversaries to exploit new vulnerabilities discovered in open source components resulting in breaches at Equifax, Canada Revenue, Okinawa Power, and AADHAAR. Since then, companies and governments have made significant investments to not become the “next Equifax”.  Eager to identify their next attack vector, adversary strategies have shifted ‘upstream’ to next generation software supply chain attacks where they can infect a single component that can be quickly distributed ‘downstream’ to hundreds or millions of unsuspecting developers. Their exploits are now achieved in seconds.

For this reason, I’ve partnered with Gene Kim and Dr. Stephen Magill to better understand how speed might lead to better security outcomes for open source projects and enterprise development teams.  For two years, we objectively examined and empirically documented software release and upgrade patterns as well as cybersecurity hygiene practices across 24,000 commercial development teams and open source projects. At the heart of our endeavor, we wanted to know what practices would produce the best security and productivity outcomes.

In this session, I’ll share the practices and outcomes we discovered that differentiate the low performers from the peak performers. You’ll understand how open source projects with 1.5x more frequent releases and 530x faster open source dependencies upgrades harness this speed to dramatically improve security within their code.  You will also learn how high performance enterprise software development teams simultaneously boost productivity and security - achieving 15x faster deployments and 26x faster remediation of application security vulnerabilities.

Finally, I’ll shed light on how we can all apply these exemplary practices to stay a step (or more) ahead of our adversaries. Don’t be afraid to upgrade your perspectives on application security and be sure to join this session.
Captions: 
	00:00:05,040 --> 00:00:07,680
thank you very much i'm excited to be

00:00:06,879 --> 00:00:10,800
here so

00:00:07,680 --> 00:00:13,280
part of it uh part of why i'm excited

00:00:10,800 --> 00:00:13,840
uh normal is uh this is my second year

00:00:13,280 --> 00:00:15,839
speaking

00:00:13,840 --> 00:00:17,039
at all things open so i was there last

00:00:15,839 --> 00:00:20,240
year with

00:00:17,039 --> 00:00:22,400
thousands of people uh at the event

00:00:20,240 --> 00:00:23,279
and so it was pretty exciting to get to

00:00:22,400 --> 00:00:26,000
meet everyone

00:00:23,279 --> 00:00:27,920
in person uh at that event i'm certainly

00:00:26,000 --> 00:00:30,160
looking forward to

00:00:27,920 --> 00:00:31,199
hopefully being there in person next

00:00:30,160 --> 00:00:35,120
year as well

00:00:31,199 --> 00:00:35,520
so in this presentation uh i'm excited

00:00:35,120 --> 00:00:37,520
to

00:00:35,520 --> 00:00:39,120
share with you some of the cool research

00:00:37,520 --> 00:00:41,120
that we've been doing

00:00:39,120 --> 00:00:44,239
uh over the past few years on high

00:00:41,120 --> 00:00:46,640
performance software development teams

00:00:44,239 --> 00:00:48,000
and if you were at all things open and

00:00:46,640 --> 00:00:50,399
happened to see

00:00:48,000 --> 00:00:52,079
my presentation last year this is a

00:00:50,399 --> 00:00:53,520
follow-up to some of the research that

00:00:52,079 --> 00:00:56,879
we did there with

00:00:53,520 --> 00:01:00,480
a lot of new data and insight so

00:00:56,879 --> 00:01:02,480
for the uh for the last seven years

00:01:00,480 --> 00:01:04,960
i've been studying high performance

00:01:02,480 --> 00:01:08,320
software development organizations

00:01:04,960 --> 00:01:10,720
and software supply chains and

00:01:08,320 --> 00:01:12,159
two things are really apparent from this

00:01:10,720 --> 00:01:15,759
one is

00:01:12,159 --> 00:01:18,640
we are more reliant on software supply

00:01:15,759 --> 00:01:21,680
chains than we've ever been before

00:01:18,640 --> 00:01:25,280
and faster is better

00:01:21,680 --> 00:01:27,600
let's talk about fast so as we get

00:01:25,280 --> 00:01:29,759
into understanding kind of what's

00:01:27,600 --> 00:01:31,439
happening or what's really changed with

00:01:29,759 --> 00:01:33,759
software development

00:01:31,439 --> 00:01:35,119
one of the things that i want to focus

00:01:33,759 --> 00:01:37,759
on is this

00:01:35,119 --> 00:01:39,360
concept of software supply chains now

00:01:37,759 --> 00:01:41,759
every one of you in your development

00:01:39,360 --> 00:01:43,680
organizations has a software supply

00:01:41,759 --> 00:01:44,960
chain it is part of your technology

00:01:43,680 --> 00:01:47,439
supply chains

00:01:44,960 --> 00:01:48,799
but in this case specifically to open

00:01:47,439 --> 00:01:52,479
source

00:01:48,799 --> 00:01:54,399
it really ties into you have suppliers

00:01:52,479 --> 00:01:56,079
of code out there and these are either

00:01:54,399 --> 00:01:57,920
open source projects

00:01:56,079 --> 00:01:59,439
could be developers that are creating

00:01:57,920 --> 00:02:02,479
containers

00:01:59,439 --> 00:02:05,280
as well they are making these components

00:02:02,479 --> 00:02:07,040
available on uh in internet based

00:02:05,280 --> 00:02:10,360
warehouses so whether that's

00:02:07,040 --> 00:02:11,520
maven central rubygems.org

00:02:10,360 --> 00:02:14,560
python.pipei.org

00:02:11,520 --> 00:02:16,959
the nougat gallery dockerhub any of

00:02:14,560 --> 00:02:19,040
these are the component warehouses or

00:02:16,959 --> 00:02:20,400
artifact warehouses in your software

00:02:19,040 --> 00:02:22,560
supply chain

00:02:20,400 --> 00:02:25,680
and then you as software development

00:02:22,560 --> 00:02:28,319
teams are consuming these components

00:02:25,680 --> 00:02:29,440
in order to produce your finished goods

00:02:28,319 --> 00:02:33,160
whether it's

00:02:29,440 --> 00:02:36,959
on-premises traditional software or even

00:02:33,160 --> 00:02:39,440
software-as-a-service offerings and

00:02:36,959 --> 00:02:40,800
the the thing that these software supply

00:02:39,440 --> 00:02:43,840
chains have enabled

00:02:40,800 --> 00:02:44,480
all of us over you know the past decade

00:02:43,840 --> 00:02:47,360
or more

00:02:44,480 --> 00:02:48,319
that all of you have been utilizing them

00:02:47,360 --> 00:02:51,040
is that we can

00:02:48,319 --> 00:02:52,879
innovate a whole lot faster than we ever

00:02:51,040 --> 00:02:54,319
did before because we don't have to

00:02:52,879 --> 00:02:57,360
write this code

00:02:54,319 --> 00:02:59,200
ourselves and if you're like me and

00:02:57,360 --> 00:02:59,760
you're following some of the research

00:02:59,200 --> 00:03:02,080
that

00:02:59,760 --> 00:03:04,080
gene uh gene kim and jez humble and

00:03:02,080 --> 00:03:06,480
nicole forsgren have done

00:03:04,080 --> 00:03:08,080
in the state of devops reports and the

00:03:06,480 --> 00:03:10,000
dora reports

00:03:08,080 --> 00:03:12,000
what you know is that the

00:03:10,000 --> 00:03:15,120
high-performing software development

00:03:12,000 --> 00:03:16,000
organizations in their studies are the

00:03:15,120 --> 00:03:19,200
ones that are

00:03:16,000 --> 00:03:21,360
much more likely to be using open source

00:03:19,200 --> 00:03:22,959
and also much more likely to be

00:03:21,360 --> 00:03:26,959
expanding their use of

00:03:22,959 --> 00:03:30,000
open source within their environments

00:03:26,959 --> 00:03:33,360
and to give you a sense of how much

00:03:30,000 --> 00:03:34,560
open source is being used out there

00:03:33,360 --> 00:03:37,040
these are you know when i'm talking

00:03:34,560 --> 00:03:37,360
about open source not applications per

00:03:37,040 --> 00:03:40,239
se

00:03:37,360 --> 00:03:41,920
they're being used a lot too but open

00:03:40,239 --> 00:03:43,440
source components are open source

00:03:41,920 --> 00:03:47,200
packages binaries

00:03:43,440 --> 00:03:48,480
frameworks etc so if we look at the

00:03:47,200 --> 00:03:50,959
some of the stats that i've been

00:03:48,480 --> 00:03:52,319
tracking over the years from the npm

00:03:50,959 --> 00:03:55,280
repository

00:03:52,319 --> 00:03:55,879
they on a weekly basis we're hitting

00:03:55,280 --> 00:03:59,680
about

00:03:55,879 --> 00:04:02,879
25 billion download requests

00:03:59,680 --> 00:04:06,080
from from the npm repository per

00:04:02,879 --> 00:04:09,200
week back in the august time frame

00:04:06,080 --> 00:04:10,879
if you extrapolate that traffic out over

00:04:09,200 --> 00:04:13,280
a year's time

00:04:10,879 --> 00:04:16,959
that means that this year there will be

00:04:13,280 --> 00:04:20,799
nearly 1.1 or 1.2

00:04:16,959 --> 00:04:24,080
trillion javascript package downloads

00:04:20,799 --> 00:04:26,800
this year so you know

00:04:24,080 --> 00:04:27,680
and to put that in context there are

00:04:26,800 --> 00:04:29,919
only about

00:04:27,680 --> 00:04:31,919
seven and a half million javascript

00:04:29,919 --> 00:04:35,919
developers in the world that would want

00:04:31,919 --> 00:04:38,479
access to these uh npm components

00:04:35,919 --> 00:04:40,560
now similarly i've been tracking the

00:04:38,479 --> 00:04:41,120
download request traffic from maven

00:04:40,560 --> 00:04:43,919
central

00:04:41,120 --> 00:04:45,759
over the years that i've been producing

00:04:43,919 --> 00:04:48,320
the state of the software supply chain

00:04:45,759 --> 00:04:52,560
report and as part of that

00:04:48,320 --> 00:04:54,800
last year we saw just over 220 billion

00:04:52,560 --> 00:04:56,479
download requests of java components

00:04:54,800 --> 00:04:58,800
from maven central

00:04:56,479 --> 00:04:59,759
and this year based on traffic that we

00:04:58,800 --> 00:05:01,759
looked at

00:04:59,759 --> 00:05:03,919
back monthly traffic that we looked at

00:05:01,759 --> 00:05:05,600
back in may and june

00:05:03,919 --> 00:05:08,880
we're going we're projecting we'll see

00:05:05,600 --> 00:05:12,080
around 376 billion

00:05:08,880 --> 00:05:14,240
download requests in 2020

00:05:12,080 --> 00:05:16,000
and again there are about 10 million

00:05:14,240 --> 00:05:17,360
java developers around the world that

00:05:16,000 --> 00:05:19,600
would request

00:05:17,360 --> 00:05:21,199
these maven components so you can see

00:05:19,600 --> 00:05:24,000
the the

00:05:21,199 --> 00:05:25,759
exponential increase over time just when

00:05:24,000 --> 00:05:28,000
we think oh my gosh

00:05:25,759 --> 00:05:29,919
that's a huge number i remember when i

00:05:28,000 --> 00:05:33,039
started at sonotype

00:05:29,919 --> 00:05:33,680
and we had just done 13 billion download

00:05:33,039 --> 00:05:35,919
requests

00:05:33,680 --> 00:05:37,039
i was like oh my gosh that's an amazing

00:05:35,919 --> 00:05:40,160
number but

00:05:37,039 --> 00:05:44,000
seven years later we're now you know

00:05:40,160 --> 00:05:46,720
many many uh multiples uh past that

00:05:44,000 --> 00:05:47,360
and really what it means you know for

00:05:46,720 --> 00:05:50,560
all of you

00:05:47,360 --> 00:05:52,960
as developers is about 90

00:05:50,560 --> 00:05:55,199
of the code base in any given modern

00:05:52,960 --> 00:05:57,440
application that's being developed today

00:05:55,199 --> 00:05:59,520
is built from these open source

00:05:57,440 --> 00:06:02,080
components code that we've

00:05:59,520 --> 00:06:03,120
borrowed from external suppliers in

00:06:02,080 --> 00:06:06,000
order to build

00:06:03,120 --> 00:06:07,840
our products faster and with higher

00:06:06,000 --> 00:06:11,479
quality

00:06:07,840 --> 00:06:14,000
when i looked across about 15 000

00:06:11,479 --> 00:06:16,720
organizations that were downloading open

00:06:14,000 --> 00:06:19,759
source components from maven central

00:06:16,720 --> 00:06:22,840
i saw that the average organization

00:06:19,759 --> 00:06:24,000
in this past year was pulling in about

00:06:22,840 --> 00:06:28,080
00:06:24,000 --> 00:06:30,319
000 java packages or maven packages to

00:06:28,080 --> 00:06:32,400
their development organizations

00:06:30,319 --> 00:06:33,360
now these are not all unique packages

00:06:32,400 --> 00:06:37,280
they come from

00:06:33,360 --> 00:06:39,759
about 3 500 open source projects

00:06:37,280 --> 00:06:42,000
and across those projects these

00:06:39,759 --> 00:06:45,919
organizations consume on average

00:06:42,000 --> 00:06:47,600
over 11 000 unique versions from those

00:06:45,919 --> 00:06:50,080
particular projects that

00:06:47,600 --> 00:06:51,120
they're working with but not all of

00:06:50,080 --> 00:06:54,400
those packages

00:06:51,120 --> 00:06:56,560
are created equal around eight percent

00:06:54,400 --> 00:06:58,080
of those downloads are just over eight

00:06:56,560 --> 00:07:00,240
percent last year

00:06:58,080 --> 00:07:01,680
had known vulnerabilities associated

00:07:00,240 --> 00:07:04,720
with them

00:07:01,680 --> 00:07:05,599
similarly on the javascript side if you

00:07:04,720 --> 00:07:09,759
take that

00:07:05,599 --> 00:07:11,599
1.2 1.1 or 1.2 trillion downloads that

00:07:09,759 --> 00:07:15,039
are expected this year

00:07:11,599 --> 00:07:17,360
of npm packages and divide that by the

00:07:15,039 --> 00:07:18,080
number of developers out there then what

00:07:17,360 --> 00:07:21,520
you're seeing

00:07:18,080 --> 00:07:23,440
is around 100 000 packages

00:07:21,520 --> 00:07:24,560
per javascript developer being

00:07:23,440 --> 00:07:27,120
downloaded

00:07:24,560 --> 00:07:28,479
annually and depending on the research

00:07:27,120 --> 00:07:31,440
that you look at whether it's

00:07:28,479 --> 00:07:33,599
npm or there's some university

00:07:31,440 --> 00:07:36,639
researchers that i'm also following

00:07:33,599 --> 00:07:39,680
it's somewhere around 40 to 50 percent

00:07:36,639 --> 00:07:40,639
of the npm packages have a vulnerability

00:07:39,680 --> 00:07:43,440
associated

00:07:40,639 --> 00:07:46,160
associated with that package or with the

00:07:43,440 --> 00:07:49,360
dependency of that package

00:07:46,160 --> 00:07:52,160
coming into the the organization

00:07:49,360 --> 00:07:53,360
so we just have to be aware that what

00:07:52,160 --> 00:07:55,360
we're consuming

00:07:53,360 --> 00:07:57,120
is not created equal and in these

00:07:55,360 --> 00:07:59,199
software supply chains

00:07:57,120 --> 00:08:00,879
that we're working with there are better

00:07:59,199 --> 00:08:04,479
and worse suppliers that

00:08:00,879 --> 00:08:06,240
we can be working with but going back to

00:08:04,479 --> 00:08:08,879
the state of devops reports

00:08:06,240 --> 00:08:10,720
what we know is from their research and

00:08:08,879 --> 00:08:14,160
people like nicole forsgren

00:08:10,720 --> 00:08:17,280
is faster is better in the enterprise

00:08:14,160 --> 00:08:20,319
and measurably better that these high

00:08:17,280 --> 00:08:23,280
performance development teams have

00:08:20,319 --> 00:08:25,120
higher release frequencies they have

00:08:23,280 --> 00:08:28,160
faster

00:08:25,120 --> 00:08:30,080
mean time to repair failures within

00:08:28,160 --> 00:08:31,919
their organization they have lower

00:08:30,080 --> 00:08:35,120
change failure rates

00:08:31,919 --> 00:08:38,880
etc within those organizations

00:08:35,120 --> 00:08:42,640
but these are really external

00:08:38,880 --> 00:08:46,160
proxies or internal

00:08:42,640 --> 00:08:48,160
measures of performance and success

00:08:46,160 --> 00:08:49,279
and i think when we look at this one of

00:08:48,160 --> 00:08:53,360
the things that i look

00:08:49,279 --> 00:08:56,000
back to is a letter that jeff bezos

00:08:53,360 --> 00:08:58,240
uh wrote to amazon shareholders i think

00:08:56,000 --> 00:09:01,120
it was in 2017.

00:08:58,240 --> 00:09:03,600
and in part of that letter jeff said

00:09:01,120 --> 00:09:07,680
beware of the proxies you can get

00:09:03,600 --> 00:09:10,240
so focused on we're fast we're getting

00:09:07,680 --> 00:09:11,120
faster we're releasing faster we can

00:09:10,240 --> 00:09:14,240
recover from

00:09:11,120 --> 00:09:16,399
failures faster than others as internal

00:09:14,240 --> 00:09:17,360
benchmarks that it almost becomes the

00:09:16,399 --> 00:09:19,200
goal

00:09:17,360 --> 00:09:21,440
but when we look at software supply

00:09:19,200 --> 00:09:22,880
chains and the components that are used

00:09:21,440 --> 00:09:25,920
within them

00:09:22,880 --> 00:09:27,279
for your organizations one of the other

00:09:25,920 --> 00:09:29,680
things that we have to consider

00:09:27,279 --> 00:09:31,120
are the external measures of what's

00:09:29,680 --> 00:09:34,160
happening out there

00:09:31,120 --> 00:09:36,160
and in these environments faster is

00:09:34,160 --> 00:09:39,600
better not only for the enterprise

00:09:36,160 --> 00:09:41,839
faster is better for adversaries

00:09:39,600 --> 00:09:43,680
if you're an adversary out there and

00:09:41,839 --> 00:09:46,080
you're looking to

00:09:43,680 --> 00:09:47,200
breach an organization and looking for

00:09:46,080 --> 00:09:50,399
successful breach

00:09:47,200 --> 00:09:50,720
opportunities you can move very quickly

00:09:50,399 --> 00:09:54,240
the

00:09:50,720 --> 00:09:56,480
these days when it comes to open source

00:09:54,240 --> 00:09:58,160
you know we'll take a quick back look to

00:09:56,480 --> 00:10:00,800
00:09:58,160 --> 00:10:02,640
where a strut's vulnerability was

00:10:00,800 --> 00:10:04,560
announced in

00:10:02,640 --> 00:10:05,680
or a vulnerability was announced in the

00:10:04,560 --> 00:10:09,120
apache struts

00:10:05,680 --> 00:10:12,560
project uh at the same day on march 7

00:10:09,120 --> 00:10:13,519
2017 that a new version of struts was

00:10:12,560 --> 00:10:16,560
made available

00:10:13,519 --> 00:10:19,040
everyone needed to update or upgrade as

00:10:16,560 --> 00:10:21,519
quickly as possible to that new version

00:10:19,040 --> 00:10:22,640
and in the meantime adversaries were

00:10:21,519 --> 00:10:24,000
alerted

00:10:22,640 --> 00:10:25,519
at the same time there is this

00:10:24,000 --> 00:10:28,160
vulnerability out there and they were

00:10:25,519 --> 00:10:31,120
racing to look for places to breach

00:10:28,160 --> 00:10:32,959
within three days they breached equifax

00:10:31,120 --> 00:10:35,839
they also breached the canadian

00:10:32,959 --> 00:10:37,360
canada revenue organization the gmo

00:10:35,839 --> 00:10:39,760
payment gateway

00:10:37,360 --> 00:10:41,279
within a couple of days later they

00:10:39,760 --> 00:10:44,720
breached okinawa power

00:10:41,279 --> 00:10:47,040
japan post a month later india post

00:10:44,720 --> 00:10:49,279
et cetera where these uh those

00:10:47,040 --> 00:10:52,800
vulnerable versions of struts were not

00:10:49,279 --> 00:10:56,000
updated now that was 2017

00:10:52,800 --> 00:10:56,880
and a lot's happened since that point so

00:10:56,000 --> 00:11:00,160
when we look

00:10:56,880 --> 00:11:03,600
at what has happened uh

00:11:00,160 --> 00:11:06,240
since that time uh there's been a lot

00:11:03,600 --> 00:11:09,040
where uh we do an annual survey

00:11:06,240 --> 00:11:12,079
devsecops community survey that i lead

00:11:09,040 --> 00:11:15,200
of about 5 000 developers and

00:11:12,079 --> 00:11:16,720
in 2018 the percentage of people taking

00:11:15,200 --> 00:11:18,880
the survey that said

00:11:16,720 --> 00:11:20,240
we had or experienced an open source

00:11:18,880 --> 00:11:23,839
breach in the last

00:11:20,240 --> 00:11:25,680
12 months was 31 but you can see this

00:11:23,839 --> 00:11:28,079
steady decline

00:11:25,680 --> 00:11:30,320
in those survey responses since then and

00:11:28,079 --> 00:11:32,000
i think equifax was this watershed

00:11:30,320 --> 00:11:34,160
moment where people said

00:11:32,000 --> 00:11:35,279
we don't want to be the next equifax how

00:11:34,160 --> 00:11:38,000
do we invest

00:11:35,279 --> 00:11:39,680
in not being the next equifax and as a

00:11:38,000 --> 00:11:43,279
result we saw this

00:11:39,680 --> 00:11:45,440
decline in behavior but

00:11:43,279 --> 00:11:47,200
if you look back to just may of this

00:11:45,440 --> 00:11:49,519
year in terms of

00:11:47,200 --> 00:11:51,600
adversary speed when vulnerabilities are

00:11:49,519 --> 00:11:53,760
announced there was a vulnerability

00:11:51,600 --> 00:11:54,880
that was announced back at the very end

00:11:53,760 --> 00:11:58,160
of april

00:11:54,880 --> 00:11:58,560
uh of this year in salt stack as an open

00:11:58,160 --> 00:12:01,600
source

00:11:58,560 --> 00:12:05,040
application the very same day april 29th

00:12:01,600 --> 00:12:06,959
salt tech released a newer safer version

00:12:05,040 --> 00:12:09,360
of that component for those that were on

00:12:06,959 --> 00:12:12,399
auto updates they received the

00:12:09,360 --> 00:12:14,399
newest version but within three days

00:12:12,399 --> 00:12:16,240
from april 29th which was a

00:12:14,399 --> 00:12:17,600
wednesday afternoon when this was

00:12:16,240 --> 00:12:21,200
revealed by

00:12:17,600 --> 00:12:24,160
saturday morning we saw 18 breaches

00:12:21,200 --> 00:12:24,720
on github that were noted through the

00:12:24,160 --> 00:12:28,000
various

00:12:24,720 --> 00:12:29,600
uh comments in the saltstack uh pages

00:12:28,000 --> 00:12:31,600
that were tracking this

00:12:29,600 --> 00:12:32,720
people were saying you know my servers

00:12:31,600 --> 00:12:35,839
have been taken over

00:12:32,720 --> 00:12:38,000
my firewall has been disabled i'm seeing

00:12:35,839 --> 00:12:39,600
programs executing here that don't

00:12:38,000 --> 00:12:41,360
normally execute

00:12:39,600 --> 00:12:42,720
in these environments and we saw other

00:12:41,360 --> 00:12:45,680
news that throughout the month

00:12:42,720 --> 00:12:47,200
27 breaches were tied to this if you're

00:12:45,680 --> 00:12:50,839
an adversary moving

00:12:47,200 --> 00:12:52,240
quickly actually benefits you uh

00:12:50,839 --> 00:12:55,279
tremendously

00:12:52,240 --> 00:12:56,160
and what we see through our our annual

00:12:55,279 --> 00:12:59,600
survey work

00:12:56,160 --> 00:13:02,720
is that while the adversaries can

00:12:59,600 --> 00:13:05,040
identify where you're using

00:13:02,720 --> 00:13:07,200
certain open source components or open

00:13:05,040 --> 00:13:09,200
source applications

00:13:07,200 --> 00:13:11,040
that have known vulnerabilities

00:13:09,200 --> 00:13:14,160
announced we see that the

00:13:11,040 --> 00:13:15,920
average enterprise takes or about 50

00:13:14,160 --> 00:13:18,880
percent of enterprises take

00:13:15,920 --> 00:13:20,720
a week to discover where vulnerable

00:13:18,880 --> 00:13:23,760
components have been used and then a

00:13:20,720 --> 00:13:25,680
an additional week to remediate those

00:13:23,760 --> 00:13:29,519
vulnerabilities once they've been

00:13:25,680 --> 00:13:32,079
identified as to where they are so

00:13:29,519 --> 00:13:32,720
while enterprises are investing and

00:13:32,079 --> 00:13:36,720
getting

00:13:32,720 --> 00:13:38,560
faster at identifying and remediating or

00:13:36,720 --> 00:13:41,040
fixing or updating open source

00:13:38,560 --> 00:13:43,680
components within their environments

00:13:41,040 --> 00:13:45,839
the adversaries actually recognize this

00:13:43,680 --> 00:13:46,560
behavior of investment of everyone

00:13:45,839 --> 00:13:48,560
saying

00:13:46,560 --> 00:13:50,560
i don't want to be the next equifax and

00:13:48,560 --> 00:13:54,160
they've changed their

00:13:50,560 --> 00:13:56,320
attack vectors as a result and so

00:13:54,160 --> 00:13:58,240
it used to be these kind of downstream

00:13:56,320 --> 00:14:00,959
what i'll call legacy attacks

00:13:58,240 --> 00:14:02,240
or the equifax style attacks let's wait

00:14:00,959 --> 00:14:06,160
for a new vulnerability

00:14:02,240 --> 00:14:08,240
to be introduced and then we can go and

00:14:06,160 --> 00:14:10,320
try and find it before the enterprise

00:14:08,240 --> 00:14:11,760
development or enterprise security teams

00:14:10,320 --> 00:14:14,480
can catch up

00:14:11,760 --> 00:14:15,199
what they found is that's becoming a lot

00:14:14,480 --> 00:14:17,600
less

00:14:15,199 --> 00:14:19,680
efficient of a path so they're moving

00:14:17,600 --> 00:14:20,639
upstream within the software supply

00:14:19,680 --> 00:14:24,160
chains

00:14:20,639 --> 00:14:26,480
to look at where are the most popular

00:14:24,160 --> 00:14:27,920
projects out there what projects are

00:14:26,480 --> 00:14:30,800
being downloaded by

00:14:27,920 --> 00:14:32,079
developers the most and if i could come

00:14:30,800 --> 00:14:35,040
and contribute

00:14:32,079 --> 00:14:36,240
code into those projects and in many

00:14:35,040 --> 00:14:40,240
cases contribute

00:14:36,240 --> 00:14:43,279
good code or good changes to those

00:14:40,240 --> 00:14:44,639
projects at some point as an adversary i

00:14:43,279 --> 00:14:47,680
can also contribute

00:14:44,639 --> 00:14:49,839
malicious code to those projects so that

00:14:47,680 --> 00:14:50,800
when the next version of the project is

00:14:49,839 --> 00:14:53,920
released

00:14:50,800 --> 00:14:57,440
my malicious code is inside

00:14:53,920 --> 00:14:59,360
that project and it's now downloaded

00:14:57,440 --> 00:15:01,360
tens of thousands maybe hundreds of

00:14:59,360 --> 00:15:03,760
thousands of times

00:15:01,360 --> 00:15:04,800
a week so you could see that you know

00:15:03,760 --> 00:15:07,680
the top five

00:15:04,800 --> 00:15:08,560
npm packages on this chart have a reach

00:15:07,680 --> 00:15:10,800
through

00:15:08,560 --> 00:15:12,240
their uses dependencies and other

00:15:10,800 --> 00:15:13,839
projects to

00:15:12,240 --> 00:15:16,079
you know over a hundred and fifty

00:15:13,839 --> 00:15:17,600
thousand other projects within the the

00:15:16,079 --> 00:15:20,320
ecosystem

00:15:17,600 --> 00:15:21,199
also if you were looking as an adversary

00:15:20,320 --> 00:15:23,920
to say

00:15:21,199 --> 00:15:26,880
what if i gained access to be able to

00:15:23,920 --> 00:15:29,279
contribute code or stole the credentials

00:15:26,880 --> 00:15:30,800
of one of the open source project

00:15:29,279 --> 00:15:33,680
maintainers

00:15:30,800 --> 00:15:35,199
in the top 100 you could influence over

00:15:33,680 --> 00:15:38,240
50 percent

00:15:35,199 --> 00:15:41,279
of the npm ecosystem by

00:15:38,240 --> 00:15:44,000
stealing credentials or by contributing

00:15:41,279 --> 00:15:45,120
into those projects malicious code that

00:15:44,000 --> 00:15:48,720
would perhaps go

00:15:45,120 --> 00:15:50,240
unchecked and then downloaded by others

00:15:48,720 --> 00:15:53,519
within the

00:15:50,240 --> 00:15:55,519
within the community so we

00:15:53,519 --> 00:15:56,720
saw these patterns we've seen these

00:15:55,519 --> 00:15:59,759
patterns of

00:15:56,720 --> 00:16:02,000
malicious code injection by adversaries

00:15:59,759 --> 00:16:03,040
very early in software development life

00:16:02,000 --> 00:16:06,240
cycles

00:16:03,040 --> 00:16:09,279
and from may of 2015

00:16:06,240 --> 00:16:12,800
to july of 2019 we saw

00:16:09,279 --> 00:16:15,600
about 200 instances of these

00:16:12,800 --> 00:16:17,120
types of next generation software supply

00:16:15,600 --> 00:16:20,560
chain attacks

00:16:17,120 --> 00:16:24,639
but in my research this year i uncovered

00:16:20,560 --> 00:16:28,079
an additional 900 attacks that happened

00:16:24,639 --> 00:16:32,320
in the past 12 months or really from

00:16:28,079 --> 00:16:35,360
july 2019 through uh july 2020

00:16:32,320 --> 00:16:36,079
so we're seeing an exponential growth in

00:16:35,360 --> 00:16:38,800
this attack

00:16:36,079 --> 00:16:40,880
pattern because the investments of i

00:16:38,800 --> 00:16:42,720
don't want to be the next equifax

00:16:40,880 --> 00:16:44,959
have happened and the adversaries are

00:16:42,720 --> 00:16:46,639
shifting those strategies over time and

00:16:44,959 --> 00:16:48,560
what they're doing is

00:16:46,639 --> 00:16:51,040
they're injecting malicious code that is

00:16:48,560 --> 00:16:53,680
either stealing credentials

00:16:51,040 --> 00:16:56,320
stealing passwords stealing money

00:16:53,680 --> 00:16:59,839
through cryptocurrency miners

00:16:56,320 --> 00:17:00,880
introducing backdoors or in some cases

00:16:59,839 --> 00:17:03,519
like we saw back

00:17:00,880 --> 00:17:04,480
in may with the octopus scanner

00:17:03,519 --> 00:17:07,760
vulnerability

00:17:04,480 --> 00:17:09,120
within um that was discovered by github

00:17:07,760 --> 00:17:13,439
i believe

00:17:09,120 --> 00:17:15,679
that was altering the netbeans ide

00:17:13,439 --> 00:17:18,000
to actually do the injection of

00:17:15,679 --> 00:17:20,799
malicious code into anyone

00:17:18,000 --> 00:17:21,600
that was using the the netbeans ide in

00:17:20,799 --> 00:17:25,120
that particular

00:17:21,600 --> 00:17:28,240
uh attack configuration so we've seen

00:17:25,120 --> 00:17:31,280
adversaries grow to be more

00:17:28,240 --> 00:17:32,000
uh cunning in their approaches to

00:17:31,280 --> 00:17:35,440
attacking

00:17:32,000 --> 00:17:38,320
uh attacking folks so we know

00:17:35,440 --> 00:17:40,080
open sour or speed is better in the

00:17:38,320 --> 00:17:41,120
enterprise faster is better in the

00:17:40,080 --> 00:17:44,720
enterprise we know

00:17:41,120 --> 00:17:46,880
faster is better for adversaries as well

00:17:44,720 --> 00:17:48,400
but one of the things that we wanted to

00:17:46,880 --> 00:17:51,440
do was go and look at

00:17:48,400 --> 00:17:53,520
is faster better when it comes to

00:17:51,440 --> 00:17:55,600
open source projects and open source

00:17:53,520 --> 00:17:58,960
project maintainers

00:17:55,600 --> 00:18:02,080
so as part of work that i did with

00:17:58,960 --> 00:18:03,840
uh the sonotype research team as well as

00:18:02,080 --> 00:18:05,679
gene kim who many of you know

00:18:03,840 --> 00:18:07,280
author of the phoenix project and the

00:18:05,679 --> 00:18:09,919
unicorn project

00:18:07,280 --> 00:18:12,320
and dr stephen mcgill who's ceo of a

00:18:09,919 --> 00:18:15,440
company called musedev here in the dc

00:18:12,320 --> 00:18:19,280
area where i live we went and looked at

00:18:15,440 --> 00:18:21,200
over 24 000 open source projects

00:18:19,280 --> 00:18:23,600
and we looked at these projects and

00:18:21,200 --> 00:18:26,480
their release patterns over a five-year

00:18:23,600 --> 00:18:29,679
period to understand

00:18:26,480 --> 00:18:32,480
if we're going to rely on so many open

00:18:29,679 --> 00:18:35,280
source projects within development

00:18:32,480 --> 00:18:37,280
would there be a way to characterize

00:18:35,280 --> 00:18:39,840
which are the best ones to work with

00:18:37,280 --> 00:18:40,640
and a lot of what the best ones to work

00:18:39,840 --> 00:18:42,400
with

00:18:40,640 --> 00:18:44,000
have been historically are really

00:18:42,400 --> 00:18:47,039
defined by well

00:18:44,000 --> 00:18:48,640
i've used this project for years and it

00:18:47,039 --> 00:18:48,960
does what i need to do it integrates

00:18:48,640 --> 00:18:51,440
with

00:18:48,960 --> 00:18:52,799
what i need it to integrate with uh

00:18:51,440 --> 00:18:55,120
easily

00:18:52,799 --> 00:18:57,039
or is really popular all my friends are

00:18:55,120 --> 00:18:58,640
using this so therefore i use that

00:18:57,039 --> 00:19:01,120
version

00:18:58,640 --> 00:19:02,080
or that uh that particular project well

00:19:01,120 --> 00:19:04,000
we looked across

00:19:02,080 --> 00:19:06,160
different things like the size of the

00:19:04,000 --> 00:19:09,120
development teams the popularity

00:19:06,160 --> 00:19:10,400
of the downloads the average commits per

00:19:09,120 --> 00:19:12,240
month

00:19:10,400 --> 00:19:14,080
how many different releases they were

00:19:12,240 --> 00:19:15,760
doing were they using continuous

00:19:14,080 --> 00:19:18,160
integration or was there

00:19:15,760 --> 00:19:20,000
evidence of that when security

00:19:18,160 --> 00:19:22,240
vulnerabilities came out were they

00:19:20,000 --> 00:19:24,720
updating their code to remediate or

00:19:22,240 --> 00:19:27,679
remove those vulnerabilities

00:19:24,720 --> 00:19:28,960
and what we found was pretty interesting

00:19:27,679 --> 00:19:31,360
in terms of the

00:19:28,960 --> 00:19:32,480
the research so we had a couple of

00:19:31,360 --> 00:19:35,840
hypotheses

00:19:32,480 --> 00:19:39,120
that um one projects that release better

00:19:35,840 --> 00:19:41,520
so faster projects have better outcomes

00:19:39,120 --> 00:19:43,520
we validated that they were more popular

00:19:41,520 --> 00:19:44,400
they had larger development teams they

00:19:43,520 --> 00:19:47,520
were generally

00:19:44,400 --> 00:19:49,039
more foundation supported one of our

00:19:47,520 --> 00:19:51,760
second hypotheses

00:19:49,039 --> 00:19:52,080
in this research was that uh projects

00:19:51,760 --> 00:19:53,919
that

00:19:52,080 --> 00:19:56,160
update their dependencies more

00:19:53,919 --> 00:19:57,679
frequently would generally stay more

00:19:56,160 --> 00:20:00,799
secure

00:19:57,679 --> 00:20:02,640
the projects that in the exemplars

00:20:00,799 --> 00:20:04,080
category if you will are the high

00:20:02,640 --> 00:20:07,120
performers

00:20:04,080 --> 00:20:11,200
these organizations released faster they

00:20:07,120 --> 00:20:13,840
remediated uh vulnerabilities faster

00:20:11,200 --> 00:20:14,320
uh and they were also likes less likely

00:20:13,840 --> 00:20:17,520
to have

00:20:14,320 --> 00:20:20,480
out-of-date dependencies and what this

00:20:17,520 --> 00:20:23,200
really meant was we we looked at

00:20:20,480 --> 00:20:24,000
if projects had security vulnerabilities

00:20:23,200 --> 00:20:26,480
in them

00:20:24,000 --> 00:20:28,000
how fast did they remediate them but not

00:20:26,480 --> 00:20:29,600
all projects

00:20:28,000 --> 00:20:31,120
had security vulnerabilities and

00:20:29,600 --> 00:20:31,919
therefore we didn't have release

00:20:31,120 --> 00:20:33,919
patterns so

00:20:31,919 --> 00:20:34,960
then we looked at the overall release

00:20:33,919 --> 00:20:37,760
patterns

00:20:34,960 --> 00:20:38,559
and what we found is that the blue line

00:20:37,760 --> 00:20:42,080
in this chart

00:20:38,559 --> 00:20:44,400
is really how fast were you

00:20:42,080 --> 00:20:45,679
remediating security vulnerabilities

00:20:44,400 --> 00:20:48,720
when you had them

00:20:45,679 --> 00:20:49,039
the green line was how frequently are

00:20:48,720 --> 00:20:51,360
you

00:20:49,039 --> 00:20:52,559
updating or releasing new versions of

00:20:51,360 --> 00:20:54,400
your project

00:20:52,559 --> 00:20:56,000
and what we found was there's a very

00:20:54,400 --> 00:20:59,039
tight parallel

00:20:56,000 --> 00:21:01,200
between remediating vulnerabilities and

00:20:59,039 --> 00:21:02,080
staying up to date so even if you don't

00:21:01,200 --> 00:21:04,080
have

00:21:02,080 --> 00:21:06,159
vulnerabilities if you're looking for

00:21:04,080 --> 00:21:08,880
the best open source projects you want

00:21:06,159 --> 00:21:12,400
those that are staying up to date

00:21:08,880 --> 00:21:14,960
more as a practice because those will

00:21:12,400 --> 00:21:16,080
also tend to stay more secure if a

00:21:14,960 --> 00:21:19,039
vulnerability is

00:21:16,080 --> 00:21:20,320
ever introduced or discovered in those

00:21:19,039 --> 00:21:23,280
projects

00:21:20,320 --> 00:21:26,240
now we look also had some hypotheses in

00:21:23,280 --> 00:21:29,120
this research that we disproved

00:21:26,240 --> 00:21:30,000
so projects with fewer dependencies

00:21:29,120 --> 00:21:31,919
would stay more

00:21:30,000 --> 00:21:33,760
up to date this kind of made sense if

00:21:31,919 --> 00:21:34,880
you have a project that has three

00:21:33,760 --> 00:21:36,640
dependencies

00:21:34,880 --> 00:21:38,159
or you have a project that has 10

00:21:36,640 --> 00:21:41,360
dependencies it's going to be

00:21:38,159 --> 00:21:42,159
easier to update three dependencies than

00:21:41,360 --> 00:21:44,240
10.

00:21:42,159 --> 00:21:46,480
what we actually found was the opposite

00:21:44,240 --> 00:21:47,760
that open source projects that had more

00:21:46,480 --> 00:21:49,679
dependencies

00:21:47,760 --> 00:21:51,039
were generally better at staying up to

00:21:49,679 --> 00:21:54,080
date and this was

00:21:51,039 --> 00:21:56,000
i think in general because the projects

00:21:54,080 --> 00:21:58,080
that had more dependencies tended to

00:21:56,000 --> 00:22:00,640
have more developers contributing

00:21:58,080 --> 00:22:02,640
as part of that project and therefore

00:22:00,640 --> 00:22:04,000
potentially have more time or resource

00:22:02,640 --> 00:22:06,080
available to

00:22:04,000 --> 00:22:08,000
update those dependencies or to

00:22:06,080 --> 00:22:12,000
prioritize the effort

00:22:08,000 --> 00:22:13,679
of keeping up to date on dependencies uh

00:22:12,000 --> 00:22:16,480
the other hypothesis that

00:22:13,679 --> 00:22:17,440
that we had that was really important

00:22:16,480 --> 00:22:19,360
was that more

00:22:17,440 --> 00:22:20,799
popular projects would be better at

00:22:19,360 --> 00:22:23,280
staying up to date

00:22:20,799 --> 00:22:24,480
and this kind of falls back to the eric

00:22:23,280 --> 00:22:27,520
s raymond

00:22:24,480 --> 00:22:29,280
um cathedral and the bizarre

00:22:27,520 --> 00:22:31,360
arguments that introduce with open

00:22:29,280 --> 00:22:34,159
source projects or open source

00:22:31,360 --> 00:22:36,000
in general with more eyeballs all bugs

00:22:34,159 --> 00:22:37,200
are shallow and we actually found that

00:22:36,000 --> 00:22:40,480
that wasn't

00:22:37,200 --> 00:22:41,840
particularly the case so of these you

00:22:40,480 --> 00:22:43,440
know all these

00:22:41,840 --> 00:22:45,440
tens of thousands of open source

00:22:43,440 --> 00:22:47,440
projects that we analyzed

00:22:45,440 --> 00:22:49,039
we looked at these projects in different

00:22:47,440 --> 00:22:51,679
ways to understand

00:22:49,039 --> 00:22:52,320
in this particular case what is the

00:22:51,679 --> 00:22:54,720
release

00:22:52,320 --> 00:22:57,200
frequency of the the project so the

00:22:54,720 --> 00:22:58,960
further left on this chart the faster

00:22:57,200 --> 00:23:01,760
your release cycles are

00:22:58,960 --> 00:23:03,039
the further right the slower you are at

00:23:01,760 --> 00:23:06,080
your average

00:23:03,039 --> 00:23:09,440
release cycle the higher you are

00:23:06,080 --> 00:23:10,960
on this chart means the uh the more

00:23:09,440 --> 00:23:13,600
popular your

00:23:10,960 --> 00:23:15,360
open source project is by number of

00:23:13,600 --> 00:23:17,280
downloads

00:23:15,360 --> 00:23:18,720
that we were tracking through this this

00:23:17,280 --> 00:23:21,120
research so

00:23:18,720 --> 00:23:23,120
what we found was there there were these

00:23:21,120 --> 00:23:25,919
these projects that fell into these

00:23:23,120 --> 00:23:27,840
exemplar categories and the exemplars

00:23:25,919 --> 00:23:30,159
were those that were releasing fast

00:23:27,840 --> 00:23:32,080
updating fast generally had the larger

00:23:30,159 --> 00:23:34,000
development teams etc

00:23:32,080 --> 00:23:36,080
and if you were going to rely on

00:23:34,000 --> 00:23:38,960
projects these are the types of

00:23:36,080 --> 00:23:39,360
projects that you would want to rely on

00:23:38,960 --> 00:23:42,240
now

00:23:39,360 --> 00:23:43,200
you can also see that there are a whole

00:23:42,240 --> 00:23:45,760
host of

00:23:43,200 --> 00:23:48,720
other projects out there that we

00:23:45,760 --> 00:23:52,159
identified in our research that were

00:23:48,720 --> 00:23:54,720
very popular but also weren't very quick

00:23:52,159 --> 00:23:56,480
at staying up to date or updating their

00:23:54,720 --> 00:23:58,799
dependencies or keeping

00:23:56,480 --> 00:24:00,320
dependencies up to date using the latest

00:23:58,799 --> 00:24:03,600
versions of those

00:24:00,320 --> 00:24:05,679
etc so you know the the research

00:24:03,600 --> 00:24:08,240
and again this is published i'll share

00:24:05,679 --> 00:24:10,640
the more details with you

00:24:08,240 --> 00:24:11,440
on how to find them but there were these

00:24:10,640 --> 00:24:14,240
attributes

00:24:11,440 --> 00:24:15,840
of best-in-class high-performance open

00:24:14,240 --> 00:24:18,320
source projects that

00:24:15,840 --> 00:24:20,080
if you're going to rely on 3 500

00:24:18,320 --> 00:24:23,120
external suppliers

00:24:20,080 --> 00:24:25,279
that you would rely on the best in class

00:24:23,120 --> 00:24:27,440
ones within those choices

00:24:25,279 --> 00:24:29,039
and by having attributes that help you

00:24:27,440 --> 00:24:30,960
make those choices

00:24:29,039 --> 00:24:33,039
more so than i've been using it for

00:24:30,960 --> 00:24:36,640
years or it's popular

00:24:33,039 --> 00:24:39,679
that's the the intent of that research

00:24:36,640 --> 00:24:42,400
so we actually wanted to take

00:24:39,679 --> 00:24:43,919
this research a little further in terms

00:24:42,400 --> 00:24:47,520
of we know the best

00:24:43,919 --> 00:24:49,919
projects are faster

00:24:47,520 --> 00:24:51,120
we know from dora in the state of devops

00:24:49,919 --> 00:24:53,440
reports that the

00:24:51,120 --> 00:24:55,200
best enterprises are faster and we know

00:24:53,440 --> 00:24:58,000
from the previous research

00:24:55,200 --> 00:24:58,880
or the earlier research i shared that

00:24:58,000 --> 00:25:01,679
adve

00:24:58,880 --> 00:25:03,919
better adversaries are faster in their

00:25:01,679 --> 00:25:06,880
particular business model

00:25:03,919 --> 00:25:08,880
so we wanted to look at faster in terms

00:25:06,880 --> 00:25:10,720
of the enterprise when it comes to

00:25:08,880 --> 00:25:12,880
consumption of open source

00:25:10,720 --> 00:25:14,000
and there is there's a fabulous

00:25:12,880 --> 00:25:17,520
presentation

00:25:14,000 --> 00:25:20,400
from eileen yushitel at

00:25:17,520 --> 00:25:22,000
who's at github now she was presenting

00:25:20,400 --> 00:25:24,320
at rails comp

00:25:22,000 --> 00:25:25,279
last year and gave this fabulous

00:25:24,320 --> 00:25:28,400
presentation

00:25:25,279 --> 00:25:30,799
on the effort that they undertook

00:25:28,400 --> 00:25:31,760
which she was a part of at github in

00:25:30,799 --> 00:25:34,960
updating from

00:25:31,760 --> 00:25:38,159
rails 2 to rails 5.

00:25:34,960 --> 00:25:39,760
this was a 7 year upgrade process and

00:25:38,159 --> 00:25:43,279
she talked about

00:25:39,760 --> 00:25:46,480
the pain of updating this project from

00:25:43,279 --> 00:25:49,279
version two to three to four to five

00:25:46,480 --> 00:25:51,520
how long it took how many you know they

00:25:49,279 --> 00:25:53,200
had their unique forks of rails then

00:25:51,520 --> 00:25:56,400
they wanted to standardize

00:25:53,200 --> 00:25:58,000
on the common rails that everyone else

00:25:56,400 --> 00:25:59,840
was using

00:25:58,000 --> 00:26:01,760
she talked about the challenges of

00:25:59,840 --> 00:26:03,760
keeping up to date with new security

00:26:01,760 --> 00:26:06,400
vulnerabilities that were announced

00:26:03,760 --> 00:26:07,440
uh in rails the difficulties of doing

00:26:06,400 --> 00:26:09,279
that when

00:26:07,440 --> 00:26:10,640
their version of rails was different

00:26:09,279 --> 00:26:14,159
than the

00:26:10,640 --> 00:26:15,919
publicly consumed version how difficult

00:26:14,159 --> 00:26:18,240
it made it to hire people

00:26:15,919 --> 00:26:19,120
because they were again doing their

00:26:18,240 --> 00:26:22,480
unique thing

00:26:19,120 --> 00:26:23,360
and not something using using standard

00:26:22,480 --> 00:26:26,640
code but

00:26:23,360 --> 00:26:27,200
just how difficult that process became

00:26:26,640 --> 00:26:28,960
over time

00:26:27,200 --> 00:26:31,520
so if you have a chance to look at that

00:26:28,960 --> 00:26:32,960
presentation i'd highly recommend it

00:26:31,520 --> 00:26:36,159
it's a wonderful

00:26:32,960 --> 00:26:37,039
seven years summary of a seven year

00:26:36,159 --> 00:26:38,799
journey

00:26:37,039 --> 00:26:40,720
that you took there but kind of looking

00:26:38,799 --> 00:26:43,679
at back at 90

00:26:40,720 --> 00:26:44,320
of your application that you're building

00:26:43,679 --> 00:26:46,320
is

00:26:44,320 --> 00:26:48,880
code that isn't yours that you borrowed

00:26:46,320 --> 00:26:51,760
from these 3 500 suppliers

00:26:48,880 --> 00:26:52,720
and looking at these 11 000 versions and

00:26:51,760 --> 00:26:56,159
use

00:26:52,720 --> 00:26:58,320
we wanted to understand what were

00:26:56,159 --> 00:27:00,400
enterprises doing out there to manage

00:26:58,320 --> 00:27:03,120
their open source dependencies

00:27:00,400 --> 00:27:04,559
and to manage their updates or were they

00:27:03,120 --> 00:27:07,120
keeping up to date

00:27:04,559 --> 00:27:09,039
was there any automation within these

00:27:07,120 --> 00:27:11,760
within these processes that they could

00:27:09,039 --> 00:27:15,520
take advantage of

00:27:11,760 --> 00:27:18,559
were there any security practices to

00:27:15,520 --> 00:27:20,399
move any vulnerable or troublesome

00:27:18,559 --> 00:27:21,600
components out of their development

00:27:20,399 --> 00:27:24,960
practices as well

00:27:21,600 --> 00:27:27,840
so um jean kim stephen mcgill and myself

00:27:24,960 --> 00:27:30,240
went out and surveyed 679

00:27:27,840 --> 00:27:31,360
different enterprises earlier this year

00:27:30,240 --> 00:27:33,200
back in may

00:27:31,360 --> 00:27:34,799
and we asked them about you know a

00:27:33,200 --> 00:27:37,279
variety of questions on their

00:27:34,799 --> 00:27:39,200
development philosophy how quickly were

00:27:37,279 --> 00:27:41,440
they

00:27:39,200 --> 00:27:42,399
developing or releasing new code how

00:27:41,440 --> 00:27:45,120
often were they

00:27:42,399 --> 00:27:46,480
updating open source and open source

00:27:45,120 --> 00:27:48,960
dependencies

00:27:46,480 --> 00:27:49,919
did they have policies inside the

00:27:48,960 --> 00:27:53,039
organization

00:27:49,919 --> 00:27:54,559
to guide which open source they should

00:27:53,039 --> 00:27:56,720
be using did they contribute

00:27:54,559 --> 00:27:58,960
open source back into the community so

00:27:56,720 --> 00:28:01,760
if they made changes

00:27:58,960 --> 00:28:02,799
within uh code was it contributed back

00:28:01,760 --> 00:28:06,000
up to the

00:28:02,799 --> 00:28:07,600
organization uh et cetera and

00:28:06,000 --> 00:28:09,200
so what did we find through this

00:28:07,600 --> 00:28:10,880
research i'm going to walk you through

00:28:09,200 --> 00:28:12,159
some of the cool things that we

00:28:10,880 --> 00:28:15,440
uncovered

00:28:12,159 --> 00:28:19,440
as part of that research one is

00:28:15,440 --> 00:28:23,440
um the leading organizations

00:28:19,440 --> 00:28:24,640
were uh 21 of those organizations were

00:28:23,440 --> 00:28:27,919
deploying daily

00:28:24,640 --> 00:28:29,440
within the the organization we also

00:28:27,919 --> 00:28:32,960
found that organizations

00:28:29,440 --> 00:28:36,320
26 of these organizations had

00:28:32,960 --> 00:28:38,320
no ability to approve new

00:28:36,320 --> 00:28:39,360
open source components that were coming

00:28:38,320 --> 00:28:41,200
into their uh

00:28:39,360 --> 00:28:44,080
organization so they could literally

00:28:41,200 --> 00:28:47,279
consume anything that they wanted

00:28:44,080 --> 00:28:49,200
uh developer confidence was uh

00:28:47,279 --> 00:28:50,640
that they were using non-vulnerable

00:28:49,200 --> 00:28:53,600
components uh

00:28:50,640 --> 00:28:56,640
was only 32 of those said that they were

00:28:53,600 --> 00:28:59,360
using non-vulnerable components

00:28:56,640 --> 00:28:59,840
or comfortable that they weren't um

00:28:59,360 --> 00:29:01,760
seven

00:28:59,840 --> 00:29:03,440
percent could find and remediate

00:29:01,760 --> 00:29:05,919
vulnerabilities within a day

00:29:03,440 --> 00:29:06,640
if you look at how fast adversaries can

00:29:05,919 --> 00:29:09,279
go

00:29:06,640 --> 00:29:11,600
um you know we need to look at how fast

00:29:09,279 --> 00:29:12,880
are development teams updating and then

00:29:11,600 --> 00:29:16,320
how fast

00:29:12,880 --> 00:29:19,520
are the enterprises reacting and that

00:29:16,320 --> 00:29:20,240
34 of organizations knew where every

00:29:19,520 --> 00:29:23,520
vulnerable

00:29:20,240 --> 00:29:25,919
uh component was with or where

00:29:23,520 --> 00:29:26,720
every open source component was within

00:29:25,919 --> 00:29:29,360
their

00:29:26,720 --> 00:29:31,919
enterprise so this means that if any

00:29:29,360 --> 00:29:34,159
kind of troublesome component

00:29:31,919 --> 00:29:36,000
or vulnerability was discovered in a

00:29:34,159 --> 00:29:38,559
component 34

00:29:36,000 --> 00:29:39,440
knew where to find that component the

00:29:38,559 --> 00:29:43,279
other

00:29:39,440 --> 00:29:45,120
60 uh 66 percent uh in this case would

00:29:43,279 --> 00:29:47,200
have to go on kind of a scavenger hunt

00:29:45,120 --> 00:29:50,880
did we ever use that component

00:29:47,200 --> 00:29:54,480
uh if so where might it be

00:29:50,880 --> 00:29:56,960
but within this this research one of the

00:29:54,480 --> 00:29:58,960
fascinating things that came out of it

00:29:56,960 --> 00:30:00,399
and this is really one of my favorite

00:29:58,960 --> 00:30:03,520
charts from this year's

00:30:00,399 --> 00:30:06,799
research report was we found four

00:30:03,520 --> 00:30:08,640
distinct groups that were all about the

00:30:06,799 --> 00:30:10,720
same size in terms of

00:30:08,640 --> 00:30:12,240
they were each about 25 percent of the

00:30:10,720 --> 00:30:14,640
population

00:30:12,240 --> 00:30:16,640
but they fell into these different areas

00:30:14,640 --> 00:30:19,200
of we had low performers

00:30:16,640 --> 00:30:20,480
these were the groups that didn't

00:30:19,200 --> 00:30:23,279
release very fast

00:30:20,480 --> 00:30:23,600
and they also didn't prioritize security

00:30:23,279 --> 00:30:26,799
or

00:30:23,600 --> 00:30:28,799
risk positive risk management outcomes

00:30:26,799 --> 00:30:30,640
you had productivity first groups this

00:30:28,799 --> 00:30:33,200
is kind of what we call the devops group

00:30:30,640 --> 00:30:35,279
they were focused on being really fast

00:30:33,200 --> 00:30:36,480
but they didn't really prioritize

00:30:35,279 --> 00:30:39,600
security uh

00:30:36,480 --> 00:30:42,640
is an outcome for instance

00:30:39,600 --> 00:30:44,880
in this group they were able to use

00:30:42,640 --> 00:30:46,480
any open source component that that they

00:30:44,880 --> 00:30:50,080
wanted but they

00:30:46,480 --> 00:30:51,360
26 had no approval process for using

00:30:50,080 --> 00:30:53,520
those components

00:30:51,360 --> 00:30:54,480
so they could move really fast to use

00:30:53,520 --> 00:30:56,480
whatever they wanted

00:30:54,480 --> 00:30:57,919
and security of those and whether they

00:30:56,480 --> 00:31:00,080
were good or bad

00:30:57,919 --> 00:31:01,360
wasn't a priority there was also this

00:31:00,080 --> 00:31:04,480
security first team

00:31:01,360 --> 00:31:07,039
this group was saying hey you know

00:31:04,480 --> 00:31:08,240
i can release any code that i want but i

00:31:07,039 --> 00:31:10,159
need to make sure it

00:31:08,240 --> 00:31:11,600
runs the security gauntlet and the set

00:31:10,159 --> 00:31:13,440
of security tests

00:31:11,600 --> 00:31:15,519
and priorities we have for this code

00:31:13,440 --> 00:31:17,919
before we'll release it so we might not

00:31:15,519 --> 00:31:19,279
be fast but we're definitely focused on

00:31:17,919 --> 00:31:21,200
security

00:31:19,279 --> 00:31:23,200
and then you have the high performers

00:31:21,200 --> 00:31:26,320
the def sec ops group which is

00:31:23,200 --> 00:31:27,200
which we're finding we can move really

00:31:26,320 --> 00:31:30,399
fast

00:31:27,200 --> 00:31:32,720
and implement security

00:31:30,399 --> 00:31:34,240
positive security measures at the same

00:31:32,720 --> 00:31:36,240
time

00:31:34,240 --> 00:31:37,279
and we started to look at the difference

00:31:36,240 --> 00:31:38,880
between

00:31:37,279 --> 00:31:40,720
these different groups the low

00:31:38,880 --> 00:31:43,279
performers and the high performers

00:31:40,720 --> 00:31:44,480
what were the differences between uh

00:31:43,279 --> 00:31:46,799
these groups

00:31:44,480 --> 00:31:47,600
so one is the high performers were

00:31:46,799 --> 00:31:50,320
releasing

00:31:47,600 --> 00:31:51,760
15 times more often than the low

00:31:50,320 --> 00:31:54,399
performers

00:31:51,760 --> 00:31:56,320
when it came to detecting vulnerable

00:31:54,399 --> 00:31:59,760
open source components within

00:31:56,320 --> 00:32:03,120
uh their environment they were also 26

00:31:59,760 --> 00:32:05,760
times faster at detecting

00:32:03,120 --> 00:32:07,039
vulnerable components they were faster

00:32:05,760 --> 00:32:09,840
at remediating

00:32:07,039 --> 00:32:11,760
those components as well and they were

00:32:09,840 --> 00:32:15,039
also when it came to

00:32:11,760 --> 00:32:17,919
time to approve new components for

00:32:15,039 --> 00:32:18,559
use by developers they were 26 times

00:32:17,919 --> 00:32:22,399
faster

00:32:18,559 --> 00:32:22,799
so this this was these were groups that

00:32:22,399 --> 00:32:25,120
said

00:32:22,799 --> 00:32:27,840
we have some construct around what open

00:32:25,120 --> 00:32:30,000
source can be used or not used

00:32:27,840 --> 00:32:32,080
developers can't just use anything that

00:32:30,000 --> 00:32:33,919
they want in general we have a policy

00:32:32,080 --> 00:32:35,440
around what can be used or not but the

00:32:33,919 --> 00:32:38,559
policy moves

00:32:35,440 --> 00:32:40,720
very fast which also means developers

00:32:38,559 --> 00:32:42,960
don't have workarounds to

00:32:40,720 --> 00:32:44,559
the process that if you take five weeks

00:32:42,960 --> 00:32:46,399
to approve a new component

00:32:44,559 --> 00:32:48,159
chances are a development team is going

00:32:46,399 --> 00:32:51,279
to find a workaround to that

00:32:48,159 --> 00:32:52,799
uh that approval process and we also

00:32:51,279 --> 00:32:54,399
found

00:32:52,799 --> 00:32:56,000
interestingly that there was less

00:32:54,399 --> 00:32:58,000
context switching required

00:32:56,000 --> 00:32:59,519
or less time for context switching

00:32:58,000 --> 00:33:02,399
within these teams

00:32:59,519 --> 00:33:04,240
between developers moving from one team

00:33:02,399 --> 00:33:06,960
to the next

00:33:04,240 --> 00:33:08,880
now within uh within the study as well

00:33:06,960 --> 00:33:09,519
we also looked at differences between

00:33:08,880 --> 00:33:11,840
what were the

00:33:09,519 --> 00:33:12,720
these differences between security first

00:33:11,840 --> 00:33:16,080
teams

00:33:12,720 --> 00:33:18,159
and the high performer teams and we

00:33:16,080 --> 00:33:19,360
found some interesting differences here

00:33:18,159 --> 00:33:21,840
as well so

00:33:19,360 --> 00:33:22,799
the high performers were more likely to

00:33:21,840 --> 00:33:25,039
be using

00:33:22,799 --> 00:33:26,399
software composition analysis this is

00:33:25,039 --> 00:33:28,799
part of the

00:33:26,399 --> 00:33:30,240
application security portfolio that

00:33:28,799 --> 00:33:34,159
looks at

00:33:30,240 --> 00:33:36,000
issues or potential problems with

00:33:34,159 --> 00:33:37,279
open source components and the quality

00:33:36,000 --> 00:33:39,440
of those

00:33:37,279 --> 00:33:40,880
there they were definitely a lot more

00:33:39,440 --> 00:33:43,600
likely to automate

00:33:40,880 --> 00:33:45,600
their understanding and intelligent

00:33:43,600 --> 00:33:47,600
speeds to developers of

00:33:45,600 --> 00:33:49,600
are these quality components that we're

00:33:47,600 --> 00:33:51,840
using or not

00:33:49,600 --> 00:33:52,960
they were a little more likely not

00:33:51,840 --> 00:33:54,880
significantly but

00:33:52,960 --> 00:33:58,080
a little more likely to build that into

00:33:54,880 --> 00:33:59,919
their continuous integration platforms

00:33:58,080 --> 00:34:01,840
they were also more likely to use

00:33:59,919 --> 00:34:03,519
s-bombs so s-bombs if you're not

00:34:01,840 --> 00:34:05,440
familiar with them

00:34:03,519 --> 00:34:07,200
are a software bill of materials and

00:34:05,440 --> 00:34:10,000
this basically says

00:34:07,200 --> 00:34:10,240
when we release an application we take

00:34:10,000 --> 00:34:12,960
an

00:34:10,240 --> 00:34:13,839
inventory or keep a centralized

00:34:12,960 --> 00:34:16,159
inventory

00:34:13,839 --> 00:34:17,520
of all of the components used in that

00:34:16,159 --> 00:34:19,839
application

00:34:17,520 --> 00:34:20,800
so we know whatever we've deployed or

00:34:19,839 --> 00:34:23,520
shipped

00:34:20,800 --> 00:34:25,599
we know the ingredients list if you will

00:34:23,520 --> 00:34:27,679
we track that over time

00:34:25,599 --> 00:34:29,520
and if things change in the quality of

00:34:27,679 --> 00:34:30,399
those components over time we will be

00:34:29,520 --> 00:34:32,800
aware of that

00:34:30,399 --> 00:34:34,720
so a security vulnerability that gets

00:34:32,800 --> 00:34:36,960
announced today

00:34:34,720 --> 00:34:39,359
your question as a development team or

00:34:36,960 --> 00:34:41,440
even security team can be

00:34:39,359 --> 00:34:42,480
do we know if we've ever used that

00:34:41,440 --> 00:34:44,639
component

00:34:42,480 --> 00:34:46,000
and if the answer is yes then your next

00:34:44,639 --> 00:34:49,359
question is where

00:34:46,000 --> 00:34:51,119
the s-bomb helps you uh determine where

00:34:49,359 --> 00:34:52,560
that organization is and these

00:34:51,119 --> 00:34:54,240
organizations are

00:34:52,560 --> 00:34:56,800
also more likely to keep that

00:34:54,240 --> 00:35:00,079
centralized inventory of

00:34:56,800 --> 00:35:02,880
uh of components out there so

00:35:00,079 --> 00:35:04,560
this was this is perhaps the best chart

00:35:02,880 --> 00:35:06,240
from the the research that's in the

00:35:04,560 --> 00:35:06,640
report and i'll share the report with

00:35:06,240 --> 00:35:08,800
you

00:35:06,640 --> 00:35:10,640
uh at the end of the the presentation

00:35:08,800 --> 00:35:11,359
i'll share with you how you get a hold

00:35:10,640 --> 00:35:14,400
of it

00:35:11,359 --> 00:35:16,960
uh but when we looked at these different

00:35:14,400 --> 00:35:19,040
clusters that we found we did one of

00:35:16,960 --> 00:35:20,960
part of the analysis that we did was a

00:35:19,040 --> 00:35:23,280
centroid analysis

00:35:20,960 --> 00:35:24,560
and that is it's looking for kind of

00:35:23,280 --> 00:35:27,280
where are the

00:35:24,560 --> 00:35:29,359
most dots if you will in these clusters

00:35:27,280 --> 00:35:32,079
where do they kind of cluster together

00:35:29,359 --> 00:35:33,680
as this is the average performance of

00:35:32,079 --> 00:35:35,440
this cluster

00:35:33,680 --> 00:35:38,000
and so you can see the low performers

00:35:35,440 --> 00:35:40,079
down here the high performers up here

00:35:38,000 --> 00:35:41,280
but there's always been this kind of

00:35:40,079 --> 00:35:43,920
discussion of

00:35:41,280 --> 00:35:46,480
if you're a security first team focusing

00:35:43,920 --> 00:35:49,839
on security not necessarily speed

00:35:46,480 --> 00:35:53,040
and someone says we want you

00:35:49,839 --> 00:35:54,960
we want to move faster and innovate

00:35:53,040 --> 00:35:55,920
faster and release faster as an

00:35:54,960 --> 00:35:58,960
organization

00:35:55,920 --> 00:35:59,440
the security group says if i do that i

00:35:58,960 --> 00:36:02,079
may be

00:35:59,440 --> 00:36:04,079
less secure and what you see is the

00:36:02,079 --> 00:36:06,240
security first green

00:36:04,079 --> 00:36:08,720
if they moved to the high performance

00:36:06,240 --> 00:36:10,880
category and took on the attributes of

00:36:08,720 --> 00:36:14,320
high performance

00:36:10,880 --> 00:36:16,160
organizations they not only get faster

00:36:14,320 --> 00:36:17,359
moving to the right on this chart but

00:36:16,160 --> 00:36:21,520
they also get

00:36:17,359 --> 00:36:23,440
a little bit more secure as a result

00:36:21,520 --> 00:36:25,040
same thing for productivity first this

00:36:23,440 --> 00:36:28,720
is the fast group

00:36:25,040 --> 00:36:31,839
doesn't necessarily emphasize security

00:36:28,720 --> 00:36:34,000
but this group if they built security in

00:36:31,839 --> 00:36:34,880
their fear is that's going to slow us

00:36:34,000 --> 00:36:36,960
down

00:36:34,880 --> 00:36:39,280
and in reality the difference between

00:36:36,960 --> 00:36:42,480
the productivity first group

00:36:39,280 --> 00:36:44,720
and the high performer group is that

00:36:42,480 --> 00:36:46,960
one you're going to add significantly

00:36:44,720 --> 00:36:49,599
more security practices

00:36:46,960 --> 00:36:50,640
but at the same time on average you're

00:36:49,599 --> 00:36:54,640
going to get even

00:36:50,640 --> 00:36:57,040
faster than you were before so that

00:36:54,640 --> 00:36:58,079
finding kind of you know flies in the

00:36:57,040 --> 00:37:01,119
face of a lot of

00:36:58,079 --> 00:37:03,280
kind of myths out there that you know

00:37:01,119 --> 00:37:04,240
if we you know if we're focused on

00:37:03,280 --> 00:37:06,560
security

00:37:04,240 --> 00:37:08,000
and we go faster we'll be less secure if

00:37:06,560 --> 00:37:10,480
we're really fast and we throw

00:37:08,000 --> 00:37:12,160
in security uh you know it'll slow us

00:37:10,480 --> 00:37:13,520
down that there are the negatives that

00:37:12,160 --> 00:37:15,760
come out but

00:37:13,520 --> 00:37:17,680
this research really quantitatively

00:37:15,760 --> 00:37:20,720
showed that

00:37:17,680 --> 00:37:21,280
you get you can get faster and you can

00:37:20,720 --> 00:37:25,359
get

00:37:21,280 --> 00:37:28,560
uh more secure as you go along

00:37:25,359 --> 00:37:32,640
so uh some things that that

00:37:28,560 --> 00:37:36,240
uh just in wrapping up um guidance for

00:37:32,640 --> 00:37:38,880
enterprise development teams one is

00:37:36,240 --> 00:37:40,240
creating a software bill of materials is

00:37:38,880 --> 00:37:42,240
critical

00:37:40,240 --> 00:37:43,520
because not only can you track and trace

00:37:42,240 --> 00:37:46,320
what open source

00:37:43,520 --> 00:37:48,839
you've used but if you have an inventory

00:37:46,320 --> 00:37:51,200
of the components you can also begin to

00:37:48,839 --> 00:37:53,119
analyze what are the quality of

00:37:51,200 --> 00:37:54,720
components that i'm consuming and

00:37:53,119 --> 00:37:58,480
relying upon

00:37:54,720 --> 00:38:01,280
within my organization the other thing

00:37:58,480 --> 00:38:03,040
within it within this approach is to

00:38:01,280 --> 00:38:06,960
surface security data

00:38:03,040 --> 00:38:09,440
for developers in development tools

00:38:06,960 --> 00:38:11,599
that security is not an add-on or a

00:38:09,440 --> 00:38:14,560
bolt-on to the end of a development life

00:38:11,599 --> 00:38:16,800
cycle security more and more and i think

00:38:14,560 --> 00:38:19,359
you all of you that are developers out

00:38:16,800 --> 00:38:22,079
there are seeing this

00:38:19,359 --> 00:38:22,720
kind of come up organically within the

00:38:22,079 --> 00:38:26,000
market

00:38:22,720 --> 00:38:28,880
is github or tools that you have

00:38:26,000 --> 00:38:32,000
integrated into github are surfacing

00:38:28,880 --> 00:38:34,880
security alerts or security information

00:38:32,000 --> 00:38:36,640
on your latest pull requests there's a

00:38:34,880 --> 00:38:38,400
vulnerability in this code we've

00:38:36,640 --> 00:38:39,040
analyzed the code we're telling you

00:38:38,400 --> 00:38:40,880
early

00:38:39,040 --> 00:38:43,119
we're not telling you in a separate

00:38:40,880 --> 00:38:45,760
third-party security tool

00:38:43,119 --> 00:38:46,480
but we're surfacing that information in

00:38:45,760 --> 00:38:48,480
github

00:38:46,480 --> 00:38:50,079
in your ide in your continuous

00:38:48,480 --> 00:38:52,480
integration platform

00:38:50,079 --> 00:38:53,440
so that information is getting to

00:38:52,480 --> 00:38:56,400
developers

00:38:53,440 --> 00:38:59,760
inside of developer tools and that's a

00:38:56,400 --> 00:39:02,560
devsecops best practice that's happening

00:38:59,760 --> 00:39:04,320
the other thing is gates not uh or guard

00:39:02,560 --> 00:39:06,960
rails not gates so

00:39:04,320 --> 00:39:08,800
don't set up security gates or blockers

00:39:06,960 --> 00:39:09,760
where security teams need to approve

00:39:08,800 --> 00:39:13,040
code

00:39:09,760 --> 00:39:13,680
set up rules and guidelines or guard

00:39:13,040 --> 00:39:15,680
rails for

00:39:13,680 --> 00:39:17,599
developers that say you can basically

00:39:15,680 --> 00:39:18,960
build anything you want build with

00:39:17,599 --> 00:39:21,359
anything you want

00:39:18,960 --> 00:39:23,280
any containers any open source project

00:39:21,359 --> 00:39:23,920
that you want but it has to fit within

00:39:23,280 --> 00:39:27,599
these

00:39:23,920 --> 00:39:29,680
downs or criteria or guard rails

00:39:27,599 --> 00:39:31,280
and if you do so then you can operate

00:39:29,680 --> 00:39:33,760
very quickly

00:39:31,280 --> 00:39:34,800
with that security with those security

00:39:33,760 --> 00:39:38,079
rules

00:39:34,800 --> 00:39:39,599
built in and part of this is you also

00:39:38,079 --> 00:39:40,880
have to automate you know when we look

00:39:39,599 --> 00:39:42,960
back to

00:39:40,880 --> 00:39:44,240
the beginning of my presentation where i

00:39:42,960 --> 00:39:47,359
talked about the

00:39:44,240 --> 00:39:49,200
billions and trillions of open source

00:39:47,359 --> 00:39:51,599
components being consumed there's no way

00:39:49,200 --> 00:39:54,880
that you can manually assess

00:39:51,599 --> 00:39:58,400
the consumption of these components or

00:39:54,880 --> 00:40:00,320
uh assess them for the quality of the

00:39:58,400 --> 00:40:02,480
components are these good projects are

00:40:00,320 --> 00:40:05,200
these bad projects how many developers

00:40:02,480 --> 00:40:07,599
do they have how often do they release

00:40:05,200 --> 00:40:09,680
are they well staffed do they upgrade

00:40:07,599 --> 00:40:13,599
update their dependencies often that

00:40:09,680 --> 00:40:16,160
is impossible to do at the scale of

00:40:13,599 --> 00:40:18,880
consumption that that is happening now

00:40:16,160 --> 00:40:19,520
um the the other thing that i will say

00:40:18,880 --> 00:40:22,240
um

00:40:19,520 --> 00:40:23,839
one uh reminder to go back and watch

00:40:22,240 --> 00:40:26,720
eileen yugatel's

00:40:23,839 --> 00:40:28,400
presentation but updating dependencies

00:40:26,720 --> 00:40:30,640
regularly

00:40:28,400 --> 00:40:32,000
a practice you know 25 percent of

00:40:30,640 --> 00:40:34,960
organizations out there

00:40:32,000 --> 00:40:35,839
already doing this have a regular update

00:40:34,960 --> 00:40:38,079
cadence

00:40:35,839 --> 00:40:39,440
for their dependencies but the benefits

00:40:38,079 --> 00:40:42,960
that come along with this

00:40:39,440 --> 00:40:44,640
is one not only are you updating your

00:40:42,960 --> 00:40:45,359
dependencies but you're probably more

00:40:44,640 --> 00:40:47,839
reliant

00:40:45,359 --> 00:40:49,599
on open source projects that are also

00:40:47,839 --> 00:40:51,520
updating their dependencies

00:40:49,599 --> 00:40:53,280
or releasing new versions if you're

00:40:51,520 --> 00:40:55,680
trying to be on the latest version but

00:40:53,280 --> 00:40:57,599
the projects you're relying on are not

00:40:55,680 --> 00:40:58,800
they're harder to use as suppliers and

00:40:57,599 --> 00:41:01,520
you're going to look for

00:40:58,800 --> 00:41:03,760
other suppliers in there we also saw

00:41:01,520 --> 00:41:04,640
that the projects that stay most up to

00:41:03,760 --> 00:41:07,839
date and release

00:41:04,640 --> 00:41:09,440
most frequently also ended up being more

00:41:07,839 --> 00:41:12,720
secure in general so

00:41:09,440 --> 00:41:14,480
you also get that added benefit whether

00:41:12,720 --> 00:41:17,040
you were looking for it or not

00:41:14,480 --> 00:41:18,640
that by staying on the latest versions

00:41:17,040 --> 00:41:21,839
you're going to stay

00:41:18,640 --> 00:41:25,280
more secure in general through your

00:41:21,839 --> 00:41:27,920
through your organization so what did we

00:41:25,280 --> 00:41:30,240
find out through all this research one

00:41:27,920 --> 00:41:31,040
faster is better faster is better for

00:41:30,240 --> 00:41:32,560
adversaries

00:41:31,040 --> 00:41:35,520
faster is better for open source

00:41:32,560 --> 00:41:38,319
projects and faster is better for

00:41:35,520 --> 00:41:41,200
enterprise development teams faster also

00:41:38,319 --> 00:41:43,839
means that you end up being more secure

00:41:41,200 --> 00:41:45,839
as a result of these behaviors and the

00:41:43,839 --> 00:41:47,440
one thing we also covered and i didn't

00:41:45,839 --> 00:41:48,000
show you the research on this but it's

00:41:47,440 --> 00:41:51,040
in the the

00:41:48,000 --> 00:41:53,119
report is the organizations that are the

00:41:51,040 --> 00:41:53,680
higher performing organizations the

00:41:53,119 --> 00:41:56,000
faster

00:41:53,680 --> 00:41:57,440
organizations generally have happier

00:41:56,000 --> 00:41:59,359
developers

00:41:57,440 --> 00:42:00,720
they're happy about their jobs they can

00:41:59,359 --> 00:42:03,680
get their work done

00:42:00,720 --> 00:42:05,440
they're more likely to recommend their

00:42:03,680 --> 00:42:07,680
employer as a place to work to their

00:42:05,440 --> 00:42:09,599
friends so it's easier to hire

00:42:07,680 --> 00:42:10,720
but who doesn't want to work in these

00:42:09,599 --> 00:42:13,440
environments where

00:42:10,720 --> 00:42:15,599
everyone's a little happier on average

00:42:13,440 --> 00:42:18,960
uh than the others

00:42:15,599 --> 00:42:22,000
so with that if you want a copy of the

00:42:18,960 --> 00:42:24,560
research that i led and

00:42:22,000 --> 00:42:25,119
worked on with gene kim and dr stephen

00:42:24,560 --> 00:42:28,000
mcgill

00:42:25,119 --> 00:42:30,240
and a host of other security and

00:42:28,000 --> 00:42:31,680
application and development researchers

00:42:30,240 --> 00:42:33,760
at sonotype

00:42:31,680 --> 00:42:35,839
you can get a hold of that just by

00:42:33,760 --> 00:42:38,560
emailing me today

00:42:35,839 --> 00:42:39,119
my out of office message is on you just

00:42:38,560 --> 00:42:42,400
email

00:42:39,119 --> 00:42:44,160
weeks at sonatype.com my auto response

00:42:42,400 --> 00:42:45,440
will send you a message and say here are

00:42:44,160 --> 00:42:47,680
the links to the slides

00:42:45,440 --> 00:42:48,880
so that you can get them uh available

00:42:47,680 --> 00:42:50,319
immediately

00:42:48,880 --> 00:42:52,640
there's also a link to the state of the

00:42:50,319 --> 00:42:54,640
software supply chain report

00:42:52,640 --> 00:42:55,839
you can also drop by the sony type booth

00:42:54,640 --> 00:42:59,280
where we have these

00:42:55,839 --> 00:43:02,160
uh available as well

00:42:59,280 --> 00:43:03,200
in the email i also put a reminder at 4

00:43:02,160 --> 00:43:06,720
p.m today

00:43:03,200 --> 00:43:08,240
if you have time available i'm going to

00:43:06,720 --> 00:43:10,880
be signing

00:43:08,240 --> 00:43:13,520
copies of my latest devops book feedback

00:43:10,880 --> 00:43:16,400
loops uh voices of all day devops

00:43:13,520 --> 00:43:17,520
uh we're gonna i'm gonna sign 150 copies

00:43:16,400 --> 00:43:19,680
of these and then we're going to send

00:43:17,520 --> 00:43:22,720
them to you at your house so

00:43:19,680 --> 00:43:25,680
you can sign up to be a part of that

00:43:22,720 --> 00:43:26,240
and i will see you there this afternoon

00:43:25,680 --> 00:43:27,680
and then

00:43:26,240 --> 00:43:30,400
sona type has a whole bunch of other

00:43:27,680 --> 00:43:32,720
things going on uh at our booth you can

00:43:30,400 --> 00:43:34,400
uh at our booth and in this uh all

00:43:32,720 --> 00:43:36,480
things open community

00:43:34,400 --> 00:43:37,599
uh you can meet all of our development

00:43:36,480 --> 00:43:40,240
managers here

00:43:37,599 --> 00:43:42,160
uh three o'clock today we have a meeting

00:43:40,240 --> 00:43:42,960
come to our booth check it out and find

00:43:42,160 --> 00:43:45,920
the

00:43:42,960 --> 00:43:48,079
location there also maury is doing a

00:43:45,920 --> 00:43:49,119
demo tomorrow at our booth of some of

00:43:48,079 --> 00:43:51,200
our new

00:43:49,119 --> 00:43:53,280
advanced development pack technologies

00:43:51,200 --> 00:43:54,000
which are related to this topic as well

00:43:53,280 --> 00:43:55,599
of

00:43:54,000 --> 00:43:57,520
how do you get better at updating your

00:43:55,599 --> 00:44:01,520
dependencies or knowing which ones

00:43:57,520 --> 00:44:02,400
to do we have one of our customers

00:44:01,520 --> 00:44:05,760
that's speaking

00:44:02,400 --> 00:44:09,440
uh tomorrow and again i'm signing books

00:44:05,760 --> 00:44:11,280
at 4pm so um anyway if you do want the

00:44:09,440 --> 00:44:13,839
uh the copy of the report once again

00:44:11,280 --> 00:44:15,359
just email my out of office is on today

00:44:13,839 --> 00:44:17,359
if you're watching this for whatever

00:44:15,359 --> 00:44:19,839
reason after all things open

00:44:17,359 --> 00:44:22,000
not live and you're seeing this and you

00:44:19,839 --> 00:44:24,720
email me my out of office will not

00:44:22,000 --> 00:44:27,359
be on so send me a message that says hey

00:44:24,720 --> 00:44:29,760
i saw that all things open presentation

00:44:27,359 --> 00:44:31,440
and i'd like the links uh as well i'd be

00:44:29,760 --> 00:44:33,359
happy to send them to you but just give

00:44:31,440 --> 00:44:34,720
me some context if you're not watching

00:44:33,359 --> 00:44:37,839
live and sending me

00:44:34,720 --> 00:44:39,119
the email that's about it and i'll wrap

00:44:37,839 --> 00:44:49,040
up there and

00:44:39,119 --> 00:44:49,040

YouTube URL: https://www.youtube.com/watch?v=48HIFUZyOIc


