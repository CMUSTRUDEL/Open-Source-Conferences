Title: IstioD - from microservices to monolithic - Lin Sun
Publication date: 2020-12-03
Playlist: DevOpsDay Raleigh at All Things Open
Description: 
	Presented by: Lin Sun, IBM
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: Do you really need microservices? The Istio team have made an architecture decision to change the Istio control plane components from microservices to monolithic to simplify Istio. Come and hear why we did it and how it simplifies Istio operation experience, along with many other changes we made to simplify Istio.
Captions: 
	00:00:07,600 --> 00:00:11,759
i'm a

00:00:08,639 --> 00:00:12,240
ibm senior technical staff member i'm

00:00:11,759 --> 00:00:16,240
also

00:00:12,240 --> 00:00:18,160
a master inventor with ibm

00:00:16,240 --> 00:00:19,760
you might be wondering why am i to be

00:00:18,160 --> 00:00:22,960
still so

00:00:19,760 --> 00:00:26,320
my day job is also contributing to

00:00:22,960 --> 00:00:30,000
the istio project

00:00:26,320 --> 00:00:32,640
you guys know ibm are a co-founder

00:00:30,000 --> 00:00:33,920
of the istio open source project so i'm

00:00:32,640 --> 00:00:36,880
one of the

00:00:33,920 --> 00:00:38,320
core contributors on the project uh

00:00:36,880 --> 00:00:42,079
recently i also

00:00:38,320 --> 00:00:45,200
wrote a book about istio to help our

00:00:42,079 --> 00:00:48,239
users to get started with service mesh

00:00:45,200 --> 00:00:50,800
so we try to explain istio to

00:00:48,239 --> 00:00:53,520
different scenarios with my co-author

00:00:50,800 --> 00:00:53,520
dan burke

00:00:54,719 --> 00:00:58,960
so today i'm going to talk about a

00:00:56,719 --> 00:00:59,920
couple of things so first i want to talk

00:00:58,960 --> 00:01:03,760
about

00:00:59,920 --> 00:01:06,240
the background of service mesh

00:01:03,760 --> 00:01:06,960
you know why service mesh and quickly

00:01:06,240 --> 00:01:10,320
introduce

00:01:06,960 --> 00:01:13,520
you guys to the istio project

00:01:10,320 --> 00:01:16,720
after that i would like to talk about

00:01:13,520 --> 00:01:18,240
uh some journey the community just went

00:01:16,720 --> 00:01:21,360
through this year

00:01:18,240 --> 00:01:24,560
where we actually uh consolidate

00:01:21,360 --> 00:01:27,759
our control plane components from

00:01:24,560 --> 00:01:30,880
multiple uh components into

00:01:27,759 --> 00:01:31,439
one uh monolithic so i want to show you

00:01:30,880 --> 00:01:34,640
guys

00:01:31,439 --> 00:01:37,360
uh the journey of you know why we did it

00:01:34,640 --> 00:01:38,400
and what's the result of doing it you

00:01:37,360 --> 00:01:41,280
know do we feel

00:01:38,400 --> 00:01:42,079
it's a good move so for those of you

00:01:41,280 --> 00:01:45,119
coming to

00:01:42,079 --> 00:01:46,240
learn devops i think that be super

00:01:45,119 --> 00:01:48,960
interesting to you

00:01:46,240 --> 00:01:49,920
just to hear you know why we actually

00:01:48,960 --> 00:01:52,840
went through

00:01:49,920 --> 00:01:54,720
uh the pain of you know using

00:01:52,840 --> 00:01:57,680
microservices

00:01:54,720 --> 00:01:59,200
using service measure yourself go back

00:01:57,680 --> 00:02:01,439
to monolithic

00:01:59,200 --> 00:02:02,960
so let's start talk about some of the

00:02:01,439 --> 00:02:06,320
background of

00:02:02,960 --> 00:02:08,080
service mesh so service mesh really come

00:02:06,320 --> 00:02:11,280
in to help users to solve

00:02:08,080 --> 00:02:14,640
the problem of managing microservices

00:02:11,280 --> 00:02:15,520
does not need to be complicated because

00:02:14,640 --> 00:02:19,120
service mesh

00:02:15,520 --> 00:02:20,319
can help users standardize the way the

00:02:19,120 --> 00:02:23,440
micro services

00:02:20,319 --> 00:02:25,760
are connecting to each other the way the

00:02:23,440 --> 00:02:29,120
microservices are secure

00:02:25,760 --> 00:02:32,720
to each other the way uh to help

00:02:29,120 --> 00:02:34,319
the the platform to the owner of the

00:02:32,720 --> 00:02:38,400
platform to enforce

00:02:34,319 --> 00:02:41,280
policies on microservices

00:02:38,400 --> 00:02:43,120
so service mesh fundamentally is a

00:02:41,280 --> 00:02:46,640
programmable framework

00:02:43,120 --> 00:02:49,840
that allows you as a user to

00:02:46,640 --> 00:02:50,800
observe secure and connect micro

00:02:49,840 --> 00:02:53,080
services

00:02:50,800 --> 00:02:54,480
and most importantly to do it

00:02:53,080 --> 00:02:57,680
consistently

00:02:54,480 --> 00:02:59,760
so that uh you know it's from

00:02:57,680 --> 00:03:01,120
different services you actually have

00:02:59,760 --> 00:03:04,000
consistent

00:03:01,120 --> 00:03:06,959
point of view to observe secure and

00:03:04,000 --> 00:03:10,560
connect to your services

00:03:06,959 --> 00:03:14,080
how does a service mesh work the proxy

00:03:10,560 --> 00:03:15,200
that sits alongside of your application

00:03:14,080 --> 00:03:18,319
container

00:03:15,200 --> 00:03:21,120
is the key piece of the service mesh

00:03:18,319 --> 00:03:22,239
so we cut to the bottom layer is the

00:03:21,120 --> 00:03:25,120
data plane

00:03:22,239 --> 00:03:25,680
where the proxy help you mediate the

00:03:25,120 --> 00:03:28,239
traffic

00:03:25,680 --> 00:03:29,360
so instead of having your app container

00:03:28,239 --> 00:03:32,959
app one

00:03:29,360 --> 00:03:35,440
talk directly to app2 in this case the

00:03:32,959 --> 00:03:38,159
proxy would actually help you

00:03:35,440 --> 00:03:39,440
to facilitate think about it as a

00:03:38,159 --> 00:03:42,159
facilitator

00:03:39,440 --> 00:03:43,519
to a conference session right it

00:03:42,159 --> 00:03:46,560
actually helps you

00:03:43,519 --> 00:03:47,760
to facilitate whether the communication

00:03:46,560 --> 00:03:49,280
should be allowed

00:03:47,760 --> 00:03:51,680
whether the connection should be

00:03:49,280 --> 00:03:54,879
upgraded to mutual tls

00:03:51,680 --> 00:03:58,319
you know whether um you know app one

00:03:54,879 --> 00:04:01,519
should to talk to whichever endpoint of

00:03:58,319 --> 00:04:04,720
app um so all that

00:04:01,519 --> 00:04:05,200
is mediated by the proxy the control

00:04:04,720 --> 00:04:08,640
plane

00:04:05,200 --> 00:04:11,599
really sits in the role of to help you

00:04:08,640 --> 00:04:13,760
program that proxy uh programs that

00:04:11,599 --> 00:04:16,959
proxy unfortunately is not

00:04:13,760 --> 00:04:19,680
trivial if you ever look at

00:04:16,959 --> 00:04:20,959
for example if you ever look at uh

00:04:19,680 --> 00:04:24,320
envoys

00:04:20,959 --> 00:04:27,440
cyca proxy configuration you'll be

00:04:24,320 --> 00:04:31,600
amazed it's like thousands of lines

00:04:27,440 --> 00:04:31,600
so it's nothing simple

00:04:32,240 --> 00:04:38,560
istio is fundamentally a open

00:04:35,520 --> 00:04:41,520
service mesh platform it's a

00:04:38,560 --> 00:04:43,680
open source project multi-vendor i think

00:04:41,520 --> 00:04:44,000
in the latest stats shows it still have

00:04:43,680 --> 00:04:48,320
like

00:04:44,000 --> 00:04:51,280
300 companies over 400 contributors

00:04:48,320 --> 00:04:52,000
so it's uh it's what's rated as the

00:04:51,280 --> 00:04:54,800
fastest

00:04:52,000 --> 00:04:55,680
growing the the fourth is fastest

00:04:54,800 --> 00:04:58,560
growing

00:04:55,680 --> 00:04:59,280
cloud native project from github last

00:04:58,560 --> 00:05:03,759
year

00:04:59,280 --> 00:05:11,840
so it has a lot of momentum around

00:05:03,759 --> 00:05:11,840
it's still

00:05:20,720 --> 00:05:24,000
so you understand the project a little

00:05:23,360 --> 00:05:26,000
bit

00:05:24,000 --> 00:05:27,680
so that you can understand what

00:05:26,000 --> 00:05:31,360
scenarios of going

00:05:27,680 --> 00:05:33,919
back to monolithic so it's your

00:05:31,360 --> 00:05:34,800
same as service mesh architecture it has

00:05:33,919 --> 00:05:38,080
control plane

00:05:34,800 --> 00:05:41,759
and data plane components it has cycle

00:05:38,080 --> 00:05:42,639
proxy which we use envoy as our psycho

00:05:41,759 --> 00:05:45,840
proxy

00:05:42,639 --> 00:05:47,360
to help us mediate the traffic among the

00:05:45,840 --> 00:05:49,759
services

00:05:47,360 --> 00:05:50,560
is still used to have multiple

00:05:49,759 --> 00:05:53,039
components

00:05:50,560 --> 00:05:55,039
as part of control plane as you can see

00:05:53,039 --> 00:05:58,000
now we recently consolidated into

00:05:55,039 --> 00:05:59,199
one single component called istiod well

00:05:58,000 --> 00:06:02,800
the d stands for

00:05:59,199 --> 00:06:06,160
daemon it still also

00:06:02,800 --> 00:06:09,440
provides inbound

00:06:06,160 --> 00:06:10,880
traffic control and secure through istio

00:06:09,440 --> 00:06:14,720
ingress gateway

00:06:10,880 --> 00:06:18,479
and israel also provides uh outbound

00:06:14,720 --> 00:06:21,680
traffic control through isro

00:06:18,479 --> 00:06:27,440
egress gateway

00:06:21,680 --> 00:06:27,440
so let's start to talk why microservices

00:06:32,240 --> 00:06:35,840
are 21.5 we had

00:06:36,720 --> 00:06:40,240
talked about that has for instance does

00:06:39,600 --> 00:06:42,319
pilot

00:06:40,240 --> 00:06:43,600
is one of the component that helps uh

00:06:42,319 --> 00:06:45,280
program

00:06:43,600 --> 00:06:47,520
the sidecar to distribute the

00:06:45,280 --> 00:06:50,639
configuration for the sidecar

00:06:47,520 --> 00:06:54,400
we have a psychiat injector that

00:06:50,639 --> 00:06:55,599
helps inject the cycle into your micro

00:06:54,400 --> 00:06:59,120
services

00:06:55,599 --> 00:07:02,000
we have daily that ingests

00:06:59,120 --> 00:07:02,800
the configuration from kubernetes api

00:07:02,000 --> 00:07:05,440
server

00:07:02,800 --> 00:07:07,039
we also have a component called citadel

00:07:05,440 --> 00:07:09,520
that

00:07:07,039 --> 00:07:11,520
means the certificate for the

00:07:09,520 --> 00:07:13,919
microservices in the mesh

00:07:11,520 --> 00:07:15,280
so each component kind of have its own

00:07:13,919 --> 00:07:18,880
purposes

00:07:15,280 --> 00:07:22,240
and you know we kind of um

00:07:18,880 --> 00:07:25,199
did it because we were like well

00:07:22,240 --> 00:07:25,759
we are a service match right we want to

00:07:25,199 --> 00:07:28,319
uh

00:07:25,759 --> 00:07:29,280
we just started with small because uh

00:07:28,319 --> 00:07:32,319
each different

00:07:29,280 --> 00:07:32,720
team within the project was contributing

00:07:32,319 --> 00:07:35,919
their

00:07:32,720 --> 00:07:39,120
own thing and then we want to eat

00:07:35,919 --> 00:07:42,720
our own dog food also so we kind of

00:07:39,120 --> 00:07:43,440
you know having ourselves also using the

00:07:42,720 --> 00:07:48,000
mash

00:07:43,440 --> 00:07:51,039
and the we inject the cycle proxy to

00:07:48,000 --> 00:07:54,000
most of our control plane components we

00:07:51,039 --> 00:07:55,039
uh we actually leverage like israel

00:07:54,000 --> 00:07:58,479
add-ons like

00:07:55,039 --> 00:08:01,199
grifana to observe the service mesh

00:07:58,479 --> 00:08:02,400
so we actually find out communication

00:08:01,199 --> 00:08:04,560
issues

00:08:02,400 --> 00:08:06,360
among service mesh control plane

00:08:04,560 --> 00:08:09,120
components through

00:08:06,360 --> 00:08:09,919
observabilities we talked about earlier

00:08:09,120 --> 00:08:12,400
to kind of

00:08:09,919 --> 00:08:14,639
observe what's going on with the control

00:08:12,400 --> 00:08:27,840
plane

00:08:14,639 --> 00:08:27,840
so we also talk about the power

00:08:32,399 --> 00:08:41,839
we would

00:08:45,920 --> 00:08:49,000
[Music]

00:08:52,839 --> 00:08:58,399
uh um

00:08:55,200 --> 00:09:00,480
after this at the beginning of this year

00:08:58,399 --> 00:09:02,240
we started starting looking at you know

00:09:00,480 --> 00:09:05,600
what are the advantage of

00:09:02,240 --> 00:09:09,000
micro services um

00:09:05,600 --> 00:09:10,240
we find that people adopting

00:09:09,000 --> 00:09:12,480
microservices

00:09:10,240 --> 00:09:14,320
because they are using different

00:09:12,480 --> 00:09:17,600
programming languages

00:09:14,320 --> 00:09:21,279
or maybe the team are operating

00:09:17,600 --> 00:09:22,000
the services separately or maybe they

00:09:21,279 --> 00:09:25,120
have

00:09:22,000 --> 00:09:26,560
different releases for the services at

00:09:25,120 --> 00:09:29,360
different time

00:09:26,560 --> 00:09:30,839
and also maybe the services was have

00:09:29,360 --> 00:09:33,279
different scaling

00:09:30,839 --> 00:09:34,000
characteristics that they really want to

00:09:33,279 --> 00:09:36,720
scale

00:09:34,000 --> 00:09:38,480
the components differently and sometimes

00:09:36,720 --> 00:09:39,279
maybe they want to deploy their micro

00:09:38,480 --> 00:09:41,920
services

00:09:39,279 --> 00:09:44,160
into different name space and using

00:09:41,920 --> 00:09:47,600
network policy to enforce

00:09:44,160 --> 00:09:49,920
the secure boundary of your services

00:09:47,600 --> 00:09:51,360
or maybe using a service mesh to enforce

00:09:49,920 --> 00:09:55,279
secure bars

00:09:51,360 --> 00:09:58,560
so in those cases uh why people are used

00:09:55,279 --> 00:10:01,760
like this and we look at

00:09:58,560 --> 00:10:06,640
the each of these here

00:10:01,760 --> 00:10:09,440
like really apply to the istio project

00:10:06,640 --> 00:10:11,839
because uh oos services are written in

00:10:09,440 --> 00:10:14,959
gold so the first bullet doesn't apply

00:10:11,839 --> 00:10:18,160
and then people who running is still

00:10:14,959 --> 00:10:20,720
in production they normally is one

00:10:18,160 --> 00:10:21,360
team operate the israel control plane so

00:10:20,720 --> 00:10:23,680
it's not

00:10:21,360 --> 00:10:25,440
separate team operating different

00:10:23,680 --> 00:10:26,240
control plane that they need different

00:10:25,440 --> 00:10:29,200
control

00:10:26,240 --> 00:10:30,720
and we have been never released our

00:10:29,200 --> 00:10:33,360
components

00:10:30,720 --> 00:10:35,760
in different schedule we actually got a

00:10:33,360 --> 00:10:38,800
lot of feedback from our user that

00:10:35,760 --> 00:10:41,839
is still is very complicated

00:10:38,800 --> 00:10:43,920
um and they've

00:10:41,839 --> 00:10:45,920
reported different issues with the

00:10:43,920 --> 00:10:46,480
project so we actually thought it would

00:10:45,920 --> 00:10:49,839
be

00:10:46,480 --> 00:10:50,160
tremendously easy for our user if we can

00:10:49,839 --> 00:10:53,519
just

00:10:50,160 --> 00:10:56,880
release everything together and we know

00:10:53,519 --> 00:10:59,279
we we don't need to tell people hey you

00:10:56,880 --> 00:11:00,560
actually combine different versions of

00:10:59,279 --> 00:11:03,440
different components

00:11:00,560 --> 00:11:04,480
that is really really complicated for

00:11:03,440 --> 00:11:07,600
our user

00:11:04,480 --> 00:11:10,000
to consume the project and

00:11:07,600 --> 00:11:10,880
also we find that we spend a lot of time

00:11:10,000 --> 00:11:13,040
to

00:11:10,880 --> 00:11:14,560
improve the performance of the project

00:11:13,040 --> 00:11:17,600
so it turned out

00:11:14,560 --> 00:11:18,000
the components are kind of scaling you

00:11:17,600 --> 00:11:20,720
know

00:11:18,000 --> 00:11:22,440
closely together so there wasn't a need

00:11:20,720 --> 00:11:26,560
for the components to scale

00:11:22,440 --> 00:11:27,200
independently we just find out it's just

00:11:26,560 --> 00:11:30,240
so much

00:11:27,200 --> 00:11:33,360
easier for us to maintain

00:11:30,240 --> 00:11:34,640
all these providing a single binary for

00:11:33,360 --> 00:11:37,519
our user to run

00:11:34,640 --> 00:11:39,279
and operate and always release them

00:11:37,519 --> 00:11:42,160
together

00:11:39,279 --> 00:11:43,680
so that's when we start to decide you

00:11:42,160 --> 00:11:46,880
know we want to embrace

00:11:43,680 --> 00:11:49,920
monolithic we want to provide a simple

00:11:46,880 --> 00:11:50,639
experience to our users so that they

00:11:49,920 --> 00:11:52,959
would have

00:11:50,639 --> 00:11:54,720
only one single commit one single

00:11:52,959 --> 00:11:56,800
component to worry about

00:11:54,720 --> 00:11:59,279
uh instead of multiple they have one

00:11:56,800 --> 00:12:03,120
release schedule to worry about

00:11:59,279 --> 00:12:06,000
so we started on this journey

00:12:03,120 --> 00:12:07,120
on taking out one of the key components

00:12:06,000 --> 00:12:10,240
is mixer

00:12:07,120 --> 00:12:11,519
because we started to distribute mixed

00:12:10,240 --> 00:12:15,040
components

00:12:11,519 --> 00:12:18,720
the functionality of mixer to the

00:12:15,040 --> 00:12:20,800
envoy sidecar proxy so that also helps

00:12:18,720 --> 00:12:22,000
a lot of performance concerns on the

00:12:20,800 --> 00:12:24,720
project

00:12:22,000 --> 00:12:27,279
where some of the user will perceive

00:12:24,720 --> 00:12:29,360
mixer as a single point of failure

00:12:27,279 --> 00:12:30,320
a lot of cars have to go through the

00:12:29,360 --> 00:12:33,360
mixer

00:12:30,320 --> 00:12:36,639
uh to to figure out you know

00:12:33,360 --> 00:12:39,519
to travel through the mixer to then

00:12:36,639 --> 00:12:40,399
allow the service to communicate so it's

00:12:39,519 --> 00:12:43,600
being

00:12:40,399 --> 00:12:43,600
perceived as

00:12:43,839 --> 00:12:48,399
it could be one mixer if mixer is down

00:12:46,480 --> 00:12:51,600
you know user's data plane could be

00:12:48,399 --> 00:12:53,920
impacted so this is why

00:12:51,600 --> 00:12:56,800
we decided to distribute that mixture

00:12:53,920 --> 00:13:00,160
functionality to the cycloproxy

00:12:56,800 --> 00:13:03,040
um the next component we take out uh

00:13:00,160 --> 00:13:05,040
is uh daily as you can see this

00:13:03,040 --> 00:13:07,200
component disappears

00:13:05,040 --> 00:13:09,120
because we decided that you know it's

00:13:07,200 --> 00:13:11,680
just so much easier

00:13:09,120 --> 00:13:12,480
to move the functionality of that

00:13:11,680 --> 00:13:16,240
component

00:13:12,480 --> 00:13:19,279
into pilot having pilots to

00:13:16,240 --> 00:13:23,279
uh re ingest the configuration

00:13:19,279 --> 00:13:25,920
changes from the kubernetes api server

00:13:23,279 --> 00:13:27,760
uh the next one we took was the scica

00:13:25,920 --> 00:13:30,480
injector which essentially is

00:13:27,760 --> 00:13:31,519
a webhook server for those of you i'm

00:13:30,480 --> 00:13:33,839
familiar with

00:13:31,519 --> 00:13:35,200
kubernetes you can build your own

00:13:33,839 --> 00:13:38,079
webhook server

00:13:35,200 --> 00:13:39,519
and our cycle injector is a mutating

00:13:38,079 --> 00:13:42,720
webhook server

00:13:39,519 --> 00:13:47,839
so we essentially just move that code

00:13:42,720 --> 00:13:50,160
into pilot and the last one

00:13:47,839 --> 00:13:51,519
sorry the second to the last one we move

00:13:50,160 --> 00:13:53,839
is the node agent

00:13:51,519 --> 00:13:55,040
on the left side as you can see it runs

00:13:53,839 --> 00:13:59,519
on the node

00:13:55,040 --> 00:14:01,440
so no agent used to run as a daemon set

00:13:59,519 --> 00:14:03,360
which actually caused a lot of problem

00:14:01,440 --> 00:14:06,240
for our user because

00:14:03,360 --> 00:14:07,440
in order to run as a demonstration our

00:14:06,240 --> 00:14:11,040
user has to configure

00:14:07,440 --> 00:14:13,440
part secure policy which is non-trivial

00:14:11,040 --> 00:14:15,839
and it's also very sometimes whereas

00:14:13,440 --> 00:14:18,160
with different cloud vendors

00:14:15,839 --> 00:14:20,639
it's very hard to use very hard to

00:14:18,160 --> 00:14:23,440
testing very hard to troubleshooting

00:14:20,639 --> 00:14:24,880
so we decided to have the functionality

00:14:23,440 --> 00:14:27,760
of low agent

00:14:24,880 --> 00:14:29,279
moving to the cycle proxy so there's no

00:14:27,760 --> 00:14:32,320
need to config

00:14:29,279 --> 00:14:35,279
past security policy and the cycle

00:14:32,320 --> 00:14:37,199
would just have in that functionality

00:14:35,279 --> 00:14:40,639
instead

00:14:37,199 --> 00:14:44,160
the last component we moved was citadel

00:14:40,639 --> 00:14:47,839
citadel essentially manages

00:14:44,160 --> 00:14:51,120
the keys answers means keys and search

00:14:47,839 --> 00:14:54,880
for the mesh it provisions

00:14:51,120 --> 00:14:57,600
distribute the search to the sitecast

00:14:54,880 --> 00:14:58,000
rotate the certificates for the sitecars

00:14:57,600 --> 00:15:01,360
so we

00:14:58,000 --> 00:15:04,639
also merged that functionality into

00:15:01,360 --> 00:15:07,920
pilot so

00:15:04,639 --> 00:15:11,199
uh why is uod i think we kind of touch

00:15:07,920 --> 00:15:13,680
a lot of points on that but let me just

00:15:11,199 --> 00:15:15,120
quickly summarize from a user

00:15:13,680 --> 00:15:18,959
perspective

00:15:15,120 --> 00:15:22,560
so uh we want to simplify user's

00:15:18,959 --> 00:15:24,800
installation experience so installing

00:15:22,560 --> 00:15:26,000
like four or five microservices is

00:15:24,800 --> 00:15:28,160
actually a lot harder

00:15:26,000 --> 00:15:30,560
than just installing one single

00:15:28,160 --> 00:15:32,959
component

00:15:30,560 --> 00:15:36,000
we want to make sure user have like one

00:15:32,959 --> 00:15:38,880
single control plane component that they

00:15:36,000 --> 00:15:39,360
manage and operate so it's not just day

00:15:38,880 --> 00:15:42,560
one

00:15:39,360 --> 00:15:45,600
installation it's also day two

00:15:42,560 --> 00:15:49,279
to actually keep it running to observe

00:15:45,600 --> 00:15:51,759
uh what's going on within that

00:15:49,279 --> 00:15:52,399
single component it's so much easier

00:15:51,759 --> 00:15:55,759
because

00:15:52,399 --> 00:15:57,920
sometimes we had communication

00:15:55,759 --> 00:15:58,959
issues among our control complaint

00:15:57,920 --> 00:16:01,040
components

00:15:58,959 --> 00:16:03,120
when there were micro services but now

00:16:01,040 --> 00:16:05,279
it's just one single component so

00:16:03,120 --> 00:16:06,959
uh user it's so much easier for user to

00:16:05,279 --> 00:16:10,560
reporting issues

00:16:06,959 --> 00:16:13,360
so much easy to think out

00:16:10,560 --> 00:16:14,800
to just to observe that one single

00:16:13,360 --> 00:16:17,440
component

00:16:14,800 --> 00:16:19,680
it's also simplify our configuration

00:16:17,440 --> 00:16:22,560
experience for a user

00:16:19,680 --> 00:16:25,199
we talked about past security policy

00:16:22,560 --> 00:16:30,160
that was a one major thing for users to

00:16:25,199 --> 00:16:34,839
adopt istio sds

00:16:30,160 --> 00:16:37,040
to secure discovery services

00:16:34,839 --> 00:16:40,000
with

00:16:37,040 --> 00:16:40,000
the yeah

00:16:41,279 --> 00:16:48,000
easy because you

00:16:44,399 --> 00:16:51,120
like the multiple endpoints you have to

00:16:48,000 --> 00:16:51,519
talk to the control plane but now it's

00:16:51,120 --> 00:16:55,199
just

00:16:51,519 --> 00:16:59,279
one single endpoint

00:16:55,199 --> 00:17:02,399
you need to talk to scalability is also

00:16:59,279 --> 00:17:04,319
easy because you don't have to

00:17:02,399 --> 00:17:06,079
scale different components different

00:17:04,319 --> 00:17:08,000
time it's just one single thing and

00:17:06,079 --> 00:17:10,160
debugging also one single logs

00:17:08,000 --> 00:17:12,000
to look at one single dashboard we

00:17:10,160 --> 00:17:12,959
actually find out the startup time

00:17:12,000 --> 00:17:16,400
improves

00:17:12,959 --> 00:17:17,199
really interesting on this um it turns

00:17:16,400 --> 00:17:19,799
out

00:17:17,199 --> 00:17:21,039
we had some of the component

00:17:19,799 --> 00:17:24,959
dependencies

00:17:21,039 --> 00:17:28,480
among our micro services ourself

00:17:24,959 --> 00:17:32,160
before we change to sdod

00:17:28,480 --> 00:17:35,440
so for instance citadel have to stop

00:17:32,160 --> 00:17:36,400
first and then pilot has to start after

00:17:35,440 --> 00:17:39,280
citadel

00:17:36,400 --> 00:17:39,919
so there are certain dependencies uh in

00:17:39,280 --> 00:17:41,679
there

00:17:39,919 --> 00:17:44,240
and sometimes you know if they don't

00:17:41,679 --> 00:17:47,280
start at the right timing right other

00:17:44,240 --> 00:17:48,080
users actually complains and they are

00:17:47,280 --> 00:17:50,960
users sometimes

00:17:48,080 --> 00:17:52,240
reports why these components services

00:17:50,960 --> 00:17:54,559
needs to restart

00:17:52,240 --> 00:17:55,679
more than one time to get it all up

00:17:54,559 --> 00:17:58,320
running

00:17:55,679 --> 00:17:59,600
so when we merge all the components

00:17:58,320 --> 00:18:02,080
together

00:17:59,600 --> 00:18:02,640
we have we do find out the start time

00:18:02,080 --> 00:18:06,320
actually

00:18:02,640 --> 00:18:07,039
improves um and the performance is also

00:18:06,320 --> 00:18:09,120
improved

00:18:07,039 --> 00:18:10,400
we talked about sometimes you know we

00:18:09,120 --> 00:18:13,600
had communication

00:18:10,400 --> 00:18:14,880
issues among our components so now it's

00:18:13,600 --> 00:18:17,679
just communicates through

00:18:14,880 --> 00:18:18,799
local so it's always simpler and

00:18:17,679 --> 00:18:21,919
reliable

00:18:18,799 --> 00:18:23,039
so uh so that's also some of the side

00:18:21,919 --> 00:18:25,360
benefits

00:18:23,039 --> 00:18:27,200
some of these benefits interestingly we

00:18:25,360 --> 00:18:28,080
actually know you know we're going to

00:18:27,200 --> 00:18:31,360
get

00:18:28,080 --> 00:18:33,280
some of these benefits you know we were

00:18:31,360 --> 00:18:36,160
guessing we would get

00:18:33,280 --> 00:18:38,080
but uh you know we couldn't tell for

00:18:36,160 --> 00:18:39,039
sure and here you know we run through

00:18:38,080 --> 00:18:41,520
the testing

00:18:39,039 --> 00:18:42,400
when the change is finally made it was

00:18:41,520 --> 00:18:45,360
just

00:18:42,400 --> 00:18:46,160
super cool to actually confirm we

00:18:45,360 --> 00:18:48,400
actually get

00:18:46,160 --> 00:18:51,679
benefits such as like startup time and

00:18:48,400 --> 00:18:51,679
performance improvement

00:18:52,320 --> 00:18:56,160
so i want to share with you the

00:18:55,200 --> 00:18:59,200
complexity

00:18:56,160 --> 00:19:01,679
by the numbers so you can actually

00:18:59,200 --> 00:19:02,640
you know picture this a little bit more

00:19:01,679 --> 00:19:06,240
easily

00:19:02,640 --> 00:19:08,640
so in 1.4 we actually got a lot of

00:19:06,240 --> 00:19:12,000
feedback on social media that

00:19:08,640 --> 00:19:15,760
issue was way complicated with

00:19:12,000 --> 00:19:19,600
so many crds 23

00:19:15,760 --> 00:19:20,799
so in 1.7 uh the last time i counted it

00:19:19,600 --> 00:19:24,720
we only down to

00:19:20,799 --> 00:19:25,200
12 crds so this is helpful for a user

00:19:24,720 --> 00:19:28,000
because

00:19:25,200 --> 00:19:30,559
every single crd is a learning for them

00:19:28,000 --> 00:19:33,600
if they need that functionality from

00:19:30,559 --> 00:19:36,960
istio so helping them

00:19:33,600 --> 00:19:38,160
reduce their crd help reduce their

00:19:36,960 --> 00:19:42,160
learning curve

00:19:38,160 --> 00:19:45,360
for istio we used to have

00:19:42,160 --> 00:19:49,679
uh seven control plane components uh

00:19:45,360 --> 00:19:53,919
with um with azons of permissus

00:19:49,679 --> 00:19:56,400
grifana and and all the components i was

00:19:53,919 --> 00:19:59,520
mentioning earlier but now we have like

00:19:56,400 --> 00:20:02,559
uh one control plane components

00:19:59,520 --> 00:20:05,039
uh which is sdod we still have

00:20:02,559 --> 00:20:05,600
all the azons and the gateways so those

00:20:05,039 --> 00:20:08,159
remain

00:20:05,600 --> 00:20:09,039
unchanged because those are you know

00:20:08,159 --> 00:20:11,360
like the

00:20:09,039 --> 00:20:12,080
the gateways they're part of the data

00:20:11,360 --> 00:20:15,280
planes

00:20:12,080 --> 00:20:15,760
uh for the users and also the add-ons

00:20:15,280 --> 00:20:19,120
are

00:20:15,760 --> 00:20:22,400
optional so you can optionally

00:20:19,120 --> 00:20:25,360
enable them as you see they provide

00:20:22,400 --> 00:20:26,159
value for you so we didn't have any

00:20:25,360 --> 00:20:29,760
intention

00:20:26,159 --> 00:20:31,440
to change those we used to have one

00:20:29,760 --> 00:20:33,760
demon set

00:20:31,440 --> 00:20:35,039
which is why we talk about you know the

00:20:33,760 --> 00:20:38,880
complexity of

00:20:35,039 --> 00:20:42,240
part security policies but now

00:20:38,880 --> 00:20:44,320
we are down to zero uh daemon set for

00:20:42,240 --> 00:20:47,120
uh for the no agent we still have one

00:20:44,320 --> 00:20:50,480
demon set for the cni

00:20:47,120 --> 00:20:52,000
which is a optional component for you to

00:20:50,480 --> 00:20:55,039
enable if you

00:20:52,000 --> 00:20:58,159
uh once you didn't want to give like

00:20:55,039 --> 00:21:00,400
net admin privileges for whoever

00:20:58,159 --> 00:21:02,640
deployed the microservices

00:21:00,400 --> 00:21:04,240
that once say of services to be injected

00:21:02,640 --> 00:21:07,520
with cycloproxy

00:21:04,240 --> 00:21:10,799
so you kind of have cni to to

00:21:07,520 --> 00:21:15,200
to do that for you um at

00:21:10,799 --> 00:21:18,480
the at the node level so tremendous

00:21:15,200 --> 00:21:21,679
complexity improvement uh

00:21:18,480 --> 00:21:23,600
i want to quickly talk about what's new

00:21:21,679 --> 00:21:26,400
in the community and also kind of a

00:21:23,600 --> 00:21:29,760
touch uh you know how these

00:21:26,400 --> 00:21:33,120
new things related to this

00:21:29,760 --> 00:21:35,679
h2od journey we just went through

00:21:33,120 --> 00:21:36,640
so the first thing i want to highlight

00:21:35,679 --> 00:21:40,240
is we've been

00:21:36,640 --> 00:21:45,840
kind of on this quarterly releases

00:21:40,240 --> 00:21:45,840
schedule this is

00:21:46,320 --> 00:21:52,720
uh saying last year

00:21:49,520 --> 00:21:56,559
we will continue that train to be

00:21:52,720 --> 00:22:00,080
released quarterly we realized

00:21:56,559 --> 00:22:01,440
uh kubernetes has quarterly schedule

00:22:00,080 --> 00:22:05,919
releases

00:22:01,440 --> 00:22:08,000
and we have some of the

00:22:05,919 --> 00:22:10,240
intervention relationship with

00:22:08,000 --> 00:22:12,720
kubernetes so we want to also

00:22:10,240 --> 00:22:14,559
make sure we're released quarterly for

00:22:12,720 --> 00:22:17,840
our user

00:22:14,559 --> 00:22:20,159
the key features of istio i mean it's

00:22:17,840 --> 00:22:22,480
really tremendous features but i just

00:22:20,159 --> 00:22:25,679
want to highlight a few things

00:22:22,480 --> 00:22:27,120
i think that's most impactful so the

00:22:25,679 --> 00:22:29,200
first thing i want to say is

00:22:27,120 --> 00:22:31,200
uh istio when people started with the

00:22:29,200 --> 00:22:34,240
istio you know they find out

00:22:31,200 --> 00:22:36,159
using issue resources can be hard

00:22:34,240 --> 00:22:37,760
and sometimes the syntax arrow are

00:22:36,159 --> 00:22:41,039
really you know semantics

00:22:37,760 --> 00:22:44,320
error really gets people you know

00:22:41,039 --> 00:22:47,440
get them frustrated on the project

00:22:44,320 --> 00:22:50,880
so we spend a lot of time to looking at

00:22:47,440 --> 00:22:54,159
how can we improve users experience

00:22:50,880 --> 00:22:57,200
how can we minimize them to

00:22:54,159 --> 00:22:58,559
needing to dig through the documentation

00:22:57,200 --> 00:23:01,679
how can we provide

00:22:58,559 --> 00:23:04,400
tooling to help them through

00:23:01,679 --> 00:23:07,520
toolings to detect what might be wrong

00:23:04,400 --> 00:23:10,159
with their issue resources

00:23:07,520 --> 00:23:10,960
so istio cuddle has a couple of commands

00:23:10,159 --> 00:23:14,240
to

00:23:10,960 --> 00:23:17,039
really help user to troubleshooting

00:23:14,240 --> 00:23:19,120
what might be wrong to one user to alert

00:23:17,039 --> 00:23:22,480
user with applications

00:23:19,120 --> 00:23:25,280
so some of the commands like analyzer uh

00:23:22,480 --> 00:23:26,880
some of the commands like describe uh

00:23:25,280 --> 00:23:30,159
proxy config

00:23:26,880 --> 00:23:33,360
are tremendously useful for a user

00:23:30,159 --> 00:23:34,320
and we spend a lot of time just to help

00:23:33,360 --> 00:23:37,360
your user

00:23:34,320 --> 00:23:41,679
improve their onboarding and

00:23:37,360 --> 00:23:44,960
adopting stories with istio

00:23:41,679 --> 00:23:47,600
canary update is one the other big thing

00:23:44,960 --> 00:23:50,080
i want to highlight

00:23:47,600 --> 00:23:50,720
so it's your upgrade we got a lot of

00:23:50,080 --> 00:23:54,320
feedback

00:23:50,720 --> 00:23:57,679
it's hard um it's also

00:23:54,320 --> 00:24:01,039
it's so hard defines in a couple of

00:23:57,679 --> 00:24:04,799
uh areas so first it's

00:24:01,039 --> 00:24:05,440
hard in a sense it's a lot of things to

00:24:04,799 --> 00:24:08,640
read

00:24:05,440 --> 00:24:11,840
and a lot of things to digest us

00:24:08,640 --> 00:24:14,880
and there may be down times when you

00:24:11,840 --> 00:24:17,279
as you upgrade so canary update

00:24:14,880 --> 00:24:20,799
is something you know we introduced as a

00:24:17,279 --> 00:24:23,919
community to help solving the problem

00:24:20,799 --> 00:24:27,360
to ensure users can upgrade to

00:24:23,919 --> 00:24:30,320
newer version of istio with

00:24:27,360 --> 00:24:32,400
sufficient testing and only if the

00:24:30,320 --> 00:24:34,960
testing is successful

00:24:32,400 --> 00:24:36,640
they shift the traffic to the new

00:24:34,960 --> 00:24:39,520
control plan

00:24:36,640 --> 00:24:40,159
so remember we've been telling you as

00:24:39,520 --> 00:24:42,799
users

00:24:40,159 --> 00:24:44,400
to when you develop your micro services

00:24:42,799 --> 00:24:47,840
you want to do

00:24:44,400 --> 00:24:49,200
canary blue green deployments to test

00:24:47,840 --> 00:24:52,240
your new versions

00:24:49,200 --> 00:24:55,200
we finally come to the conclusion that

00:24:52,240 --> 00:24:56,799
we need similar things for istio control

00:24:55,200 --> 00:25:00,720
playing as well

00:24:56,799 --> 00:25:03,200
so that you can have sufficient time to

00:25:00,720 --> 00:25:04,960
testing the new version of the control

00:25:03,200 --> 00:25:08,080
plane testing the new version

00:25:04,960 --> 00:25:11,200
of the data plane and then do the switch

00:25:08,080 --> 00:25:14,000
as you feel comfortable instead of like

00:25:11,200 --> 00:25:16,480
boom this is your switch deal with it

00:25:14,000 --> 00:25:17,600
right so you have a lot more graceful

00:25:16,480 --> 00:25:21,679
time

00:25:17,600 --> 00:25:24,320
to work on that switch

00:25:21,679 --> 00:25:26,000
we're also working very hard this is

00:25:24,320 --> 00:25:29,039
going to be upcoming

00:25:26,000 --> 00:25:32,799
in next release 1.8

00:25:29,039 --> 00:25:37,039
to get virtual machine and multi-cluster

00:25:32,799 --> 00:25:40,000
to beta so we are in the process to get

00:25:37,039 --> 00:25:40,640
multi-cluster to beta i think vms as

00:25:40,000 --> 00:25:43,520
well

00:25:40,640 --> 00:25:44,480
so this is the area we want to help our

00:25:43,520 --> 00:25:47,520
user to

00:25:44,480 --> 00:25:50,960
simplify their issue experience

00:25:47,520 --> 00:25:54,240
beyond single clusters so that

00:25:50,960 --> 00:25:55,279
if you have workloads on vms if you have

00:25:54,240 --> 00:25:57,840
workloads on

00:25:55,279 --> 00:26:00,799
a different cluster where you may have

00:25:57,840 --> 00:26:04,240
building your high availability stories

00:26:00,799 --> 00:26:06,880
we want to help you we want to help you

00:26:04,240 --> 00:26:07,919
make sure you feel comfortable within

00:26:06,880 --> 00:26:12,400
these areas

00:26:07,919 --> 00:26:15,760
as well from an ibm perspective

00:26:12,400 --> 00:26:18,880
we've been focusing a lot on

00:26:15,760 --> 00:26:22,880
external sdod where we want to

00:26:18,880 --> 00:26:25,679
provide issue providers having

00:26:22,880 --> 00:26:27,840
the capability to provide istio as a

00:26:25,679 --> 00:26:29,440
service where we manage the control

00:26:27,840 --> 00:26:31,600
plane for our users

00:26:29,440 --> 00:26:33,200
so user doesn't have to worry about

00:26:31,600 --> 00:26:36,400
control plane

00:26:33,200 --> 00:26:38,000
installation upgrade we want to help our

00:26:36,400 --> 00:26:40,480
user a

00:26:38,000 --> 00:26:41,600
multi-cluster which we touch on early

00:26:40,480 --> 00:26:44,880
and also

00:26:41,600 --> 00:26:47,679
ux usability improvement and also

00:26:44,880 --> 00:26:50,240
install configuration and upgrade so

00:26:47,679 --> 00:26:53,679
basically help you

00:26:50,240 --> 00:26:56,720
to provide a simple installation

00:26:53,679 --> 00:26:59,200
experience and provide possibility to

00:26:56,720 --> 00:27:02,240
manage the control plane for you and

00:26:59,200 --> 00:27:06,400
provide possibility to help you to grow

00:27:02,240 --> 00:27:09,760
beyond single clusters so

00:27:06,400 --> 00:27:13,520
um i'd like to quickly talk about uh

00:27:09,760 --> 00:27:16,000
in place and canary so we started with

00:27:13,520 --> 00:27:17,760
uh with in-place upgrade you will start

00:27:16,000 --> 00:27:21,200
with a simple version

00:27:17,760 --> 00:27:24,480
of stod and

00:27:21,200 --> 00:27:27,120
you will then shift to

00:27:24,480 --> 00:27:29,120
version two of isro d and notice there's

00:27:27,120 --> 00:27:31,279
not much controlling here so

00:27:29,120 --> 00:27:33,039
the moment you shift even though you're

00:27:31,279 --> 00:27:34,000
doing a rolling upgrade let's say you

00:27:33,039 --> 00:27:36,799
have three parts

00:27:34,000 --> 00:27:38,799
of stod you may be doing rolling

00:27:36,799 --> 00:27:41,039
upgrades so your first

00:27:38,799 --> 00:27:42,640
replica is moving to version two then

00:27:41,039 --> 00:27:45,200
your second replica

00:27:42,640 --> 00:27:46,000
but there's not much in control to say

00:27:45,200 --> 00:27:48,320
hey i want

00:27:46,000 --> 00:27:50,720
a day to do this testing make sure it's

00:27:48,320 --> 00:27:54,399
thorough

00:27:50,720 --> 00:27:56,880
so then you are moving your proxy which

00:27:54,399 --> 00:27:58,640
is uh you're moving your proxy from v1

00:27:56,880 --> 00:28:01,919
to v2 again you don't

00:27:58,640 --> 00:28:02,559
really have a lot of control for testing

00:28:01,919 --> 00:28:04,799
it just

00:28:02,559 --> 00:28:05,919
you do have rolling upgrade but it

00:28:04,799 --> 00:28:09,120
happens

00:28:05,919 --> 00:28:11,039
still pretty fast uh within that window

00:28:09,120 --> 00:28:12,720
and then you will be switched over right

00:28:11,039 --> 00:28:15,520
so this is the experience we're

00:28:12,720 --> 00:28:18,320
providing to our user with in place

00:28:15,520 --> 00:28:19,279
with canary notice here i want to

00:28:18,320 --> 00:28:21,760
highlight

00:28:19,279 --> 00:28:23,600
before we dive into canary upgrade i

00:28:21,760 --> 00:28:24,559
want to highlight because of where

00:28:23,600 --> 00:28:26,799
consolidate

00:28:24,559 --> 00:28:27,600
all the control plane components to

00:28:26,799 --> 00:28:30,799
single

00:28:27,600 --> 00:28:34,640
stod this is why we could afford

00:28:30,799 --> 00:28:36,480
to offer a canary to our user because

00:28:34,640 --> 00:28:38,559
it's just one single control plan you

00:28:36,480 --> 00:28:40,720
need to shift now

00:28:38,559 --> 00:28:42,320
so single endpoint you need to worry

00:28:40,720 --> 00:28:44,880
about the shifting

00:28:42,320 --> 00:28:46,320
so with canary you can see you know user

00:28:44,880 --> 00:28:48,799
starts with v1

00:28:46,320 --> 00:28:49,840
uh with uh the control plane and the

00:28:48,799 --> 00:28:52,880
proxy

00:28:49,840 --> 00:28:55,039
and then now user would be deployed

00:28:52,880 --> 00:28:58,080
version two of the control plane

00:28:55,039 --> 00:28:59,039
user would also deploy version 2 of the

00:28:58,080 --> 00:29:03,200
proxy

00:28:59,039 --> 00:29:03,200
and the user would do testing with

00:29:03,520 --> 00:29:07,600
version 2 of the proxy with version 2 of

00:29:06,320 --> 00:29:10,960
the control plane

00:29:07,600 --> 00:29:12,480
and after the testing a successful user

00:29:10,960 --> 00:29:15,679
can feel confident to move

00:29:12,480 --> 00:29:18,159
a little bit more workload over and

00:29:15,679 --> 00:29:20,399
gradually move more workload over so

00:29:18,159 --> 00:29:21,840
they have a lot of control here so they

00:29:20,399 --> 00:29:25,440
can do like 10

00:29:21,840 --> 00:29:27,679
50 90 as they wish

00:29:25,440 --> 00:29:30,240
and eventually you know they can once

00:29:27,679 --> 00:29:33,039
they're really happy with version two

00:29:30,240 --> 00:29:33,760
on the proxy and also the control plan

00:29:33,039 --> 00:29:36,320
they can move

00:29:33,760 --> 00:29:37,360
all the workload over and then they can

00:29:36,320 --> 00:29:39,360
kill the

00:29:37,360 --> 00:29:42,000
the version one of the control planes

00:29:39,360 --> 00:29:44,159
you do have full control

00:29:42,000 --> 00:29:45,520
you know exactly how long you want to

00:29:44,159 --> 00:29:48,000
test

00:29:45,520 --> 00:29:48,960
you have full confidence to make sure it

00:29:48,000 --> 00:29:51,679
didn't regress

00:29:48,960 --> 00:29:52,799
anything whether it's functional or

00:29:51,679 --> 00:29:55,600
performance

00:29:52,799 --> 00:29:57,279
and then you do the switch over so

00:29:55,600 --> 00:30:00,480
external control play

00:29:57,279 --> 00:30:02,799
is really what we attempted to um

00:30:00,480 --> 00:30:03,840
like i mentioned earlier we run issue

00:30:02,799 --> 00:30:06,399
control plane

00:30:03,840 --> 00:30:08,080
outside of your cluster so the vendors

00:30:06,399 --> 00:30:11,520
can potentially manage

00:30:08,080 --> 00:30:13,600
control plan for you and not consuming

00:30:11,520 --> 00:30:17,279
any resources in your cluster

00:30:13,600 --> 00:30:17,919
so this is something we envision would

00:30:17,279 --> 00:30:20,320
be

00:30:17,919 --> 00:30:22,159
super helpful for our users so that they

00:30:20,320 --> 00:30:24,720
don't have to worry about

00:30:22,159 --> 00:30:25,440
control plane updates they don't need to

00:30:24,720 --> 00:30:27,360
worry about

00:30:25,440 --> 00:30:29,120
secure connection to the control plane

00:30:27,360 --> 00:30:32,320
so we will take care of

00:30:29,120 --> 00:30:33,440
that for our user the community is also

00:30:32,320 --> 00:30:36,559
doing a lot of work

00:30:33,440 --> 00:30:38,880
our multi-cluster we are consolidating

00:30:36,559 --> 00:30:42,240
our models for multi-cluster

00:30:38,880 --> 00:30:44,640
and notice here you know all these work

00:30:42,240 --> 00:30:45,360
because of its dod because we were able

00:30:44,640 --> 00:30:48,880
to

00:30:45,360 --> 00:30:50,159
um simplify the control plane components

00:30:48,880 --> 00:30:53,440
into one components

00:30:50,159 --> 00:30:55,919
all these work make external issue d

00:30:53,440 --> 00:30:58,559
and multi-class a lot simpler because

00:30:55,919 --> 00:31:01,440
the consolidation to stod

00:30:58,559 --> 00:31:02,320
so we want to provide for multi-cluster

00:31:01,440 --> 00:31:06,320
we want to allow

00:31:02,320 --> 00:31:07,279
user to run sdod within their cluster if

00:31:06,320 --> 00:31:10,320
they choose to

00:31:07,279 --> 00:31:11,679
for maximum high availability or if they

00:31:10,320 --> 00:31:16,080
choose to have

00:31:11,679 --> 00:31:18,399
a shell control plane well

00:31:16,080 --> 00:31:21,279
multiple clusters using one control

00:31:18,399 --> 00:31:24,559
plane that's also possible

00:31:21,279 --> 00:31:27,360
so with that i'm going to jump into

00:31:24,559 --> 00:31:27,360
a live demo

00:31:30,480 --> 00:31:34,080
wish me luck um

00:31:34,240 --> 00:31:40,559
so um sorry i have a little bit of

00:31:38,000 --> 00:31:42,799
screen reset early on so

00:31:40,559 --> 00:31:43,840
i'm going to share with you my

00:31:42,799 --> 00:31:47,279
environment

00:31:43,840 --> 00:31:51,679
um so i have two clusters i deploy

00:31:47,279 --> 00:31:55,760
in our ibm cloud kubernetes clusters

00:31:51,679 --> 00:31:58,840
um so as you can see um

00:31:55,760 --> 00:32:00,320
on the right side is my management

00:31:58,840 --> 00:32:03,760
cluster

00:32:00,320 --> 00:32:07,679
excuse me so on this cluster um

00:32:03,760 --> 00:32:07,679
hopefully my connection is still good

00:32:08,240 --> 00:32:17,279
so on this cluster i deploy hdld um

00:32:14,159 --> 00:32:19,840
it's still two namespace i also

00:32:17,279 --> 00:32:20,960
have another istio running on this

00:32:19,840 --> 00:32:24,480
cluster

00:32:20,960 --> 00:32:25,440
mainly for the purposes of just to

00:32:24,480 --> 00:32:28,559
expose

00:32:25,440 --> 00:32:32,799
this sdod to external

00:32:28,559 --> 00:32:35,440
outside of this cluster on the left side

00:32:32,799 --> 00:32:38,240
of my cluster can you guys see my screen

00:32:35,440 --> 00:32:38,240
okay by the way

00:32:40,840 --> 00:32:43,840
good

00:32:46,799 --> 00:32:50,399
okay so the questions i will try to get

00:32:49,120 --> 00:32:52,320
at the end

00:32:50,399 --> 00:32:54,399
let me actually increase the font a

00:32:52,320 --> 00:32:56,640
little bit just making sure you guys can

00:32:54,399 --> 00:32:59,760
see it

00:32:56,640 --> 00:33:02,799
because i i don't get any feedbacks

00:32:59,760 --> 00:33:06,240
okay um so on my

00:33:02,799 --> 00:33:07,360
on my left side i also have another

00:33:06,240 --> 00:33:10,159
cluster

00:33:07,360 --> 00:33:10,720
so on this cluster i want to share with

00:33:10,159 --> 00:33:14,200
you

00:33:10,720 --> 00:33:17,440
i also installed in the namespace uh

00:33:14,200 --> 00:33:21,360
istio2 that i

00:33:17,440 --> 00:33:26,080
have so i just have my gateway running

00:33:21,360 --> 00:33:26,080
and you can see my gateway also have

00:33:26,559 --> 00:33:33,039
have a service uh it's deployed as a

00:33:30,080 --> 00:33:36,559
load balancer so it has an external ip

00:33:33,039 --> 00:33:40,720
so what i'm going to do next is i want

00:33:36,559 --> 00:33:44,240
share with you that i'm going to deploy

00:33:40,720 --> 00:33:44,880
book info into my namespace so as you

00:33:44,240 --> 00:33:48,880
can see

00:33:44,880 --> 00:33:52,559
some of my namespace i have

00:33:48,880 --> 00:33:54,320
i have cycad injector enabled so i'm

00:33:52,559 --> 00:33:56,799
going to enable

00:33:54,320 --> 00:33:56,799
icon

00:33:58,480 --> 00:34:06,039
label namespace default

00:34:02,000 --> 00:34:10,560
istio injection

00:34:06,039 --> 00:34:13,679
enabled so with istio you can

00:34:10,560 --> 00:34:14,240
very simple to inject your name space

00:34:13,679 --> 00:34:17,440
for

00:34:14,240 --> 00:34:20,639
psycho injection

00:34:17,440 --> 00:34:21,440
so you just do what i just did to label

00:34:20,639 --> 00:34:25,760
it

00:34:21,440 --> 00:34:28,639
and then i want to go ahead and deploy

00:34:25,760 --> 00:34:28,639
book info

00:34:28,879 --> 00:34:32,159
if i can find it

00:34:33,200 --> 00:34:38,879
uh samples booking for i think it's the

00:34:36,560 --> 00:34:42,480
platform

00:34:38,879 --> 00:34:43,599
cube and how many of you are familiar

00:34:42,480 --> 00:34:46,560
with the booking for

00:34:43,599 --> 00:34:47,520
application it's uh one of our standard

00:34:46,560 --> 00:34:52,079
application

00:34:47,520 --> 00:34:54,720
for istio the reason i want to show that

00:34:52,079 --> 00:34:56,720
app is because you know i want to

00:34:54,720 --> 00:34:58,960
minimize the learning of the app the

00:34:56,720 --> 00:35:01,520
purpose is really to show you

00:34:58,960 --> 00:35:02,720
you know i have this control plane

00:35:01,520 --> 00:35:05,280
running

00:35:02,720 --> 00:35:06,480
outside of my cluster and it's actually

00:35:05,280 --> 00:35:08,960
managing

00:35:06,480 --> 00:35:10,000
the data plane running on the left side

00:35:08,960 --> 00:35:11,599
of the cluster

00:35:10,000 --> 00:35:14,320
and also show you you know we

00:35:11,599 --> 00:35:16,640
consolidated all the components of

00:35:14,320 --> 00:35:19,359
control plane together so there's only

00:35:16,640 --> 00:35:21,680
one component that needs to be updated

00:35:19,359 --> 00:35:23,680
installed and managed for the control

00:35:21,680 --> 00:35:27,200
plane

00:35:23,680 --> 00:35:30,320
so as the part reaches running now

00:35:27,200 --> 00:35:32,480
we're going to deploy the gateway

00:35:30,320 --> 00:35:35,119
resources the reason why we want to

00:35:32,480 --> 00:35:37,839
deploy defined might be faster

00:35:35,119 --> 00:35:38,880
the reason i want to deploy gateway

00:35:37,839 --> 00:35:41,200
resources

00:35:38,880 --> 00:35:41,200
is

00:35:43,440 --> 00:35:50,000
ah delete okay sorry

00:35:46,720 --> 00:35:54,160
i thought it would be faster to do apply

00:35:50,000 --> 00:35:54,160
samples book info

00:35:54,800 --> 00:35:59,839
network yep

00:36:00,800 --> 00:36:04,160
so uh the the the reason we want to

00:36:03,520 --> 00:36:07,520
deploy

00:36:04,160 --> 00:36:11,040
the gateway is we want to expose uh

00:36:07,520 --> 00:36:14,480
the book info to the gateway

00:36:11,040 --> 00:36:17,359
so that you can access the application

00:36:14,480 --> 00:36:18,240
so it's really simple we expose on port

00:36:17,359 --> 00:36:21,760
00:36:18,240 --> 00:36:24,000
and will expose a bunch of url and it

00:36:21,760 --> 00:36:25,520
routes the traffic to product page on

00:36:24,000 --> 00:36:28,640
00:36:25,520 --> 00:36:31,520
so we have the ip address

00:36:28,640 --> 00:36:32,560
for the issue ingress gateway running

00:36:31,520 --> 00:36:35,040
here right

00:36:32,560 --> 00:36:37,359
so let's go ahead to visit the product

00:36:35,040 --> 00:36:37,359
page

00:36:37,520 --> 00:36:42,800
so coming o to here bring up my browser

00:36:41,760 --> 00:36:46,640
here

00:36:42,800 --> 00:36:47,119
uh get out of here so what we are going

00:36:46,640 --> 00:36:50,240
to do

00:36:47,119 --> 00:36:52,000
next is we are going to do a visit the

00:36:50,240 --> 00:36:54,160
booking file so

00:36:52,000 --> 00:36:55,920
if you are familiar with the book info

00:36:54,160 --> 00:36:59,920
uh it's basically

00:36:55,920 --> 00:37:00,640
a a service that shows reviews of the

00:36:59,920 --> 00:37:03,760
books

00:37:00,640 --> 00:37:06,880
uh that it has like a three

00:37:03,760 --> 00:37:10,079
version of the reviews so black

00:37:06,880 --> 00:37:13,359
and red and no re no stars

00:37:10,079 --> 00:37:16,240
so those are the three versions

00:37:13,359 --> 00:37:16,720
so what we're going to show next is uh

00:37:16,240 --> 00:37:19,839
you know

00:37:16,720 --> 00:37:22,240
we want to do uh traffic shifting

00:37:19,839 --> 00:37:23,119
uh to header-based routing because i

00:37:22,240 --> 00:37:26,800
want to test

00:37:23,119 --> 00:37:29,440
version two without exposed to everybody

00:37:26,800 --> 00:37:31,359
it was you can see with default behavior

00:37:29,440 --> 00:37:33,280
of kubernetes it's going to expose

00:37:31,359 --> 00:37:35,119
everything to your user

00:37:33,280 --> 00:37:37,280
so that's not really what i wanted

00:37:35,119 --> 00:37:38,000
because i want to make sure you know we

00:37:37,280 --> 00:37:40,800
can

00:37:38,000 --> 00:37:41,680
test everything first so what we're

00:37:40,800 --> 00:37:44,800
going to do

00:37:41,680 --> 00:37:48,720
is uh we're going to find

00:37:44,800 --> 00:37:51,760
out the book info

00:37:48,720 --> 00:37:56,880
virtual service so we're going to do

00:37:51,760 --> 00:38:00,000
a deploy virtual service reviews

00:37:56,880 --> 00:38:00,880
test version 2 and i'll show you what

00:38:00,000 --> 00:38:04,400
looks like

00:38:00,880 --> 00:38:08,320
in case you haven't seen it so this

00:38:04,400 --> 00:38:12,079
is basically says when the user

00:38:08,320 --> 00:38:12,720
json logs in you know i want to only

00:38:12,079 --> 00:38:16,000
test

00:38:12,720 --> 00:38:18,000
the version two and for everybody else i

00:38:16,000 --> 00:38:20,640
want to do version one so let's see if

00:38:18,000 --> 00:38:20,640
this works

00:38:21,920 --> 00:38:25,520
this is interesting i'm actually having

00:38:24,240 --> 00:38:28,960
an issue now

00:38:25,520 --> 00:38:30,960
with product page reviews after i deploy

00:38:28,960 --> 00:38:33,599
this configuration file

00:38:30,960 --> 00:38:34,320
so let's actually check out what's going

00:38:33,599 --> 00:38:37,520
on

00:38:34,320 --> 00:38:40,560
remember we talked about istiocado so

00:38:37,520 --> 00:38:44,079
istiocado has a command called analyze

00:38:40,560 --> 00:38:47,839
so what analyze would do is um

00:38:44,079 --> 00:38:47,839
it will analyze

00:38:59,119 --> 00:39:06,640
so in my virtual services i have

00:39:03,040 --> 00:39:07,119
subsets uh referred to and these are not

00:39:06,640 --> 00:39:10,320
found

00:39:07,119 --> 00:39:13,440
in destination rules

00:39:10,320 --> 00:39:14,560
so if you look at the destination rule

00:39:13,440 --> 00:39:16,400
now

00:39:14,560 --> 00:39:19,680
you probably can find out you know i

00:39:16,400 --> 00:39:21,599
don't have any destination rules

00:39:19,680 --> 00:39:24,320
sorry my internet is a little bit

00:39:21,599 --> 00:39:24,320
unstable

00:39:26,800 --> 00:39:35,599
it do next is apply um

00:39:30,880 --> 00:39:37,480
book infos destination rules

00:39:35,599 --> 00:39:40,480
um networking

00:39:37,480 --> 00:39:45,599
[Music]

00:39:40,480 --> 00:39:45,599
so we're going to do destination rule

00:39:54,839 --> 00:39:57,839
rules

00:39:57,920 --> 00:40:01,440
the destination rule for the reviews are

00:40:00,240 --> 00:40:03,760
applied

00:40:01,440 --> 00:40:05,839
now the configuration would be

00:40:03,760 --> 00:40:09,040
successfully distributed

00:40:05,839 --> 00:40:11,839
from the control plane to the finger

00:40:09,040 --> 00:40:11,839
crossed

00:40:13,440 --> 00:40:25,839
now i would

00:40:26,720 --> 00:40:32,400
it's really really slow now i don't know

00:40:29,520 --> 00:40:32,400
what's going on

00:40:37,599 --> 00:40:41,200
okay so now you can see the review

00:40:39,440 --> 00:40:44,240
information did come back

00:40:41,200 --> 00:40:46,880
now if i log in as jason sorry

00:40:44,240 --> 00:40:49,280
let me log in i know i need to wrap up

00:40:46,880 --> 00:40:51,599
this quickly too

00:40:49,280 --> 00:40:53,839
so this actually won't work so i have to

00:40:51,599 --> 00:40:56,079
log in as lowercase

00:40:53,839 --> 00:40:58,160
and if i log in as json now you can see

00:40:56,079 --> 00:41:01,520
you know i always get the black star

00:40:58,160 --> 00:41:02,160
and if i log out you know you can see i

00:41:01,520 --> 00:41:06,720
always get

00:41:02,160 --> 00:41:09,599
version one so that's essentially

00:41:06,720 --> 00:41:11,760
the demo um i know i'm running out of

00:41:09,599 --> 00:41:13,599
the time i will stay a little bit longer

00:41:11,760 --> 00:41:16,079
to look at the questions

00:41:13,599 --> 00:41:17,760
but i want you before i let you guys go

00:41:16,079 --> 00:41:20,560
i want to summarize

00:41:17,760 --> 00:41:21,839
i'm going also doing a book session

00:41:20,560 --> 00:41:23,920
about my book

00:41:21,839 --> 00:41:26,000
if you're interested to learn more about

00:41:23,920 --> 00:41:28,400
istio i'm going to talk about istio

00:41:26,000 --> 00:41:30,240
explained a book you know why did i

00:41:28,400 --> 00:41:31,359
wrote the book who is appropriate for

00:41:30,240 --> 00:41:34,480
reading the book

00:41:31,359 --> 00:41:36,560
so join me at noon i guess uh

00:41:34,480 --> 00:41:37,760
in a little bit over 10 minutes at the

00:41:36,560 --> 00:41:39,280
virtual theater

00:41:37,760 --> 00:41:40,720
thank you so much for attending i'm

00:41:39,280 --> 00:41:41,920
sorry we're running a little bit of time

00:41:40,720 --> 00:41:45,119
i will take uh

00:41:41,920 --> 00:41:46,880
questions offline here

00:41:45,119 --> 00:41:49,040
awesome thank you very much lynn that

00:41:46,880 --> 00:41:50,960
was a great presentation and thank you

00:41:49,040 --> 00:41:52,319
for everyone that attended

00:41:50,960 --> 00:41:53,839
my name is josh i'm gonna do a little

00:41:52,319 --> 00:41:55,359
bit of housekeeping that we weren't able

00:41:53,839 --> 00:41:56,880
to get at the very beginning

00:41:55,359 --> 00:41:58,880
uh so for those of you who are familiar

00:41:56,880 --> 00:42:00,240
with devops days first off we're really

00:41:58,880 --> 00:42:03,280
glad that you're here

00:42:00,240 --> 00:42:04,880
um you know we'll be doing open spaces

00:42:03,280 --> 00:42:06,240
as part of this the basic idea is

00:42:04,880 --> 00:42:06,640
throughout the next day and a half you

00:42:06,240 --> 00:42:08,640
can

00:42:06,640 --> 00:42:10,640
uh contribute topics that you'd like to

00:42:08,640 --> 00:42:11,520
discuss i'll throw that in chat in just

00:42:10,640 --> 00:42:12,880
a second

00:42:11,520 --> 00:42:14,560
and then we'll gather around have

00:42:12,880 --> 00:42:15,599
discussions on that and we'll share with

00:42:14,560 --> 00:42:17,760
the group throughout the

00:42:15,599 --> 00:42:19,440
rest of the day and through tomorrow on

00:42:17,760 --> 00:42:21,280
how you can contribute to that we also

00:42:19,440 --> 00:42:23,359
have a job board that link is also

00:42:21,280 --> 00:42:25,520
coming in just a moment

00:42:23,359 --> 00:42:27,119
so make sure you post if you have a job

00:42:25,520 --> 00:42:28,880
opening or if you're looking

00:42:27,119 --> 00:42:30,319
and if you enjoyed this presentation

00:42:28,880 --> 00:42:31,280
that you saw today we are going to be

00:42:30,319 --> 00:42:33,280
going live

00:42:31,280 --> 00:42:35,599
in person again with devops days raleigh

00:42:33,280 --> 00:42:36,800
2021 back at the mckinnon center

00:42:35,599 --> 00:42:39,040
um we're hoping it's going to be in

00:42:36,800 --> 00:42:40,640
person that's the plan for april 8th

00:42:39,040 --> 00:42:42,800
details are going to be in chat in just

00:42:40,640 --> 00:42:44,240
a moment our next presentation

00:42:42,800 --> 00:42:46,240
in this room is going to be micro

00:42:44,240 --> 00:42:46,960
service continuous delivery with dan

00:42:46,240 --> 00:42:48,960
garfield

00:42:46,960 --> 00:42:50,560
so thanks again for joining and as

00:42:48,960 --> 00:42:52,160
promised i'm about to post that

00:42:50,560 --> 00:42:54,880
information into the chat

00:42:52,160 --> 00:42:55,920
so you have opportunity to grab those

00:42:54,880 --> 00:42:58,880
links

00:42:55,920 --> 00:42:59,839
just have to do that computery thing and

00:42:58,880 --> 00:43:01,680
here we go

00:42:59,839 --> 00:43:04,319
uh so thanks again lynn for the

00:43:01,680 --> 00:43:05,040
presentation and uh we look forward to

00:43:04,319 --> 00:43:07,760
seeing your

00:43:05,040 --> 00:43:08,160
uh job light or your uh book uh signing

00:43:07,760 --> 00:43:13,839
thing

00:43:08,160 --> 00:43:13,839
here shortly

00:43:15,280 --> 00:43:21,520
all right am i up go for it

00:43:19,359 --> 00:43:22,480
well i think based on the schedule the

00:43:21,520 --> 00:43:25,520
next session

00:43:22,480 --> 00:43:27,359
starts in 10 minutes

00:43:25,520 --> 00:43:28,960
oh okay so uh let it go for ten minutes

00:43:27,359 --> 00:43:30,000
gotcha yes i believe so so yeah i'm

00:43:28,960 --> 00:43:34,400
looking at the schedule

00:43:30,000 --> 00:43:34,400
it's um from 12 p.m to 12 45

00:43:37,680 --> 00:43:43,760
and if i'm being very transparent i

00:43:40,880 --> 00:43:45,760
don't know how that translates to

00:43:43,760 --> 00:43:47,760
jumping in between

00:43:45,760 --> 00:43:49,040
so you know with that being said i did

00:43:47,760 --> 00:43:51,200
track the questions

00:43:49,040 --> 00:43:52,640
so we'll just assume that we're giving

00:43:51,200 --> 00:43:55,440
people an opportunity to

00:43:52,640 --> 00:43:57,040
go back and forth lynn if you're up for

00:43:55,440 --> 00:44:00,319
answering a question

00:43:57,040 --> 00:44:01,599
um the first question that came in was

00:44:00,319 --> 00:44:03,200
from justin chow

00:44:01,599 --> 00:44:05,680
is there any performance concern for

00:44:03,200 --> 00:44:06,400
having side car containers proxying all

00:44:05,680 --> 00:44:10,400
traffic

00:44:06,400 --> 00:44:10,400
to or from each micro service

00:44:13,839 --> 00:44:16,960
uh you are very muted we can barely hear

00:44:16,079 --> 00:44:20,319
you

00:44:16,960 --> 00:44:23,920
uh can you hear me very lightly but

00:44:20,319 --> 00:44:24,720
you're there okay great um i hope this

00:44:23,920 --> 00:44:27,280
is better

00:44:24,720 --> 00:44:27,920
i'm trying to hold close to my speaker

00:44:27,280 --> 00:44:30,319
now

00:44:27,920 --> 00:44:33,520
um so yes definitely there are

00:44:30,319 --> 00:44:35,599
performance concerns on having sidecars

00:44:33,520 --> 00:44:36,720
so you have to look at your particular

00:44:35,599 --> 00:44:40,240
scenarios

00:44:36,720 --> 00:44:43,760
but i would tell you the cycle proxy

00:44:40,240 --> 00:44:45,760
has very minimum performance impact to

00:44:43,760 --> 00:44:49,280
each of your microservices

00:44:45,760 --> 00:44:50,720
and also most importantly if you don't

00:44:49,280 --> 00:44:53,760
have psychoproxy

00:44:50,720 --> 00:44:54,480
you will have the need to have similar

00:44:53,760 --> 00:44:57,000
code

00:44:54,480 --> 00:44:59,119
in your microservices to serve the same

00:44:57,000 --> 00:45:01,040
functionality which is going to be a lot

00:44:59,119 --> 00:45:03,760
more costly

00:45:01,040 --> 00:45:04,880
and also if your microservices are using

00:45:03,760 --> 00:45:07,760
different languages

00:45:04,880 --> 00:45:09,680
you know to be able to maintain all that

00:45:07,760 --> 00:45:10,640
code in different languages it's even

00:45:09,680 --> 00:45:13,520
harder

00:45:10,640 --> 00:45:16,079
so thankfully the cycle proxy is using

00:45:13,520 --> 00:45:19,280
envoy which is high performance

00:45:16,079 --> 00:45:21,119
proxy and it's really battle tested with

00:45:19,280 --> 00:45:24,160
like two million per second

00:45:21,119 --> 00:45:27,040
in production environment like lyft so

00:45:24,160 --> 00:45:27,760
you're leveraging like the best of open

00:45:27,040 --> 00:45:31,599
source

00:45:27,760 --> 00:45:35,119
uh to using envoy as your cycle proxy

00:45:31,599 --> 00:45:36,560
to help mediate your traffic

00:45:35,119 --> 00:45:38,560
excellent and there was one other

00:45:36,560 --> 00:45:40,800
question that came in from stephen wong

00:45:38,560 --> 00:45:42,400
did the istio re-architecture change the

00:45:40,800 --> 00:45:45,440
resource requirements

00:45:42,400 --> 00:45:48,079
with respect to memory and cpu

00:45:45,440 --> 00:45:48,640
that's a great question i think um when

00:45:48,079 --> 00:45:51,040
i look

00:45:48,640 --> 00:45:51,920
back to this statistic i think it

00:45:51,040 --> 00:45:54,319
actually helped

00:45:51,920 --> 00:45:55,359
reduce some of the cpu and memories for

00:45:54,319 --> 00:45:58,560
control play

00:45:55,359 --> 00:45:59,280
so we do have the statistic on istio

00:45:58,560 --> 00:46:03,280
performance

00:45:59,280 --> 00:46:05,200
onto istio.io so if you go to isro.io

00:46:03,280 --> 00:46:07,440
on the top right side there's the search

00:46:05,200 --> 00:46:08,400
button you can see the latest

00:46:07,440 --> 00:46:11,520
performance

00:46:08,400 --> 00:46:13,440
numbers we have like latencies for

00:46:11,520 --> 00:46:16,800
cycles and also we

00:46:13,440 --> 00:46:18,640
publish like default configurations for

00:46:16,800 --> 00:46:20,160
uh the control plane components we

00:46:18,640 --> 00:46:29,599
recommend

00:46:20,160 --> 00:46:29,599

YouTube URL: https://www.youtube.com/watch?v=iYBGGOg66ik


