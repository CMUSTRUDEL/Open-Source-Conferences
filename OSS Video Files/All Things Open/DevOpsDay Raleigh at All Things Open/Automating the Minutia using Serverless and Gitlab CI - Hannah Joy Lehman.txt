Title: Automating the Minutia using Serverless and Gitlab CI - Hannah Joy Lehman
Publication date: 2020-12-03
Playlist: DevOpsDay Raleigh at All Things Open
Description: 
	Presented by: Hannah Joy Lehman, Teamworks
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: Joining a startup after a corporate gig has a lot of perks. After being deemed the Release Manager, though, I quickly realized that many of those "perks" were manual daily and weekly tasks that no one had yet had the bandwidth to make better. There HAD to be a better way, and I knew I had enough knowledge in my toolbelt to be dangerous. So I set off to automate those tasks- sending a daily announcement via Slack, closing out releases in Jira, incrementing our release versions, just to name a few. And through a handful of hiccups and iterations, I found the better way: Using AWS Lambda and Serverless to deploy a cron job that would do my daily "announcing" for me, by retrieving the information I needed from open APIs. In this talk, I'll share how I did just that, along with how other menial tasks quickly became a part of our CI pipeline in Gitlab.
Captions: 
	00:00:05,359 --> 00:00:08,800
hi everyone

00:00:06,640 --> 00:00:10,400
i'm hannah joy lehmann thank you so much

00:00:08,800 --> 00:00:12,240
for joining me at my

00:00:10,400 --> 00:00:13,440
first technical talk which is automating

00:00:12,240 --> 00:00:17,600
the minutia

00:00:13,440 --> 00:00:19,359
with serverless and gitlab ci

00:00:17,600 --> 00:00:21,359
so let me tell you what i'm going to

00:00:19,359 --> 00:00:22,400
talk about today

00:00:21,359 --> 00:00:25,199
first i'll give you a little

00:00:22,400 --> 00:00:28,560
introduction as to who i am

00:00:25,199 --> 00:00:31,840
tell you what this talk is really about

00:00:28,560 --> 00:00:35,360
what problem i was trying to solve

00:00:31,840 --> 00:00:35,360
and how did i go about doing that

00:00:36,000 --> 00:00:41,200
first a little bit about myself um

00:00:39,600 --> 00:00:43,360
so i have a couple of things i'm really

00:00:41,200 --> 00:00:44,960
passionate about but in particular i

00:00:43,360 --> 00:00:47,039
love to rock climb

00:00:44,960 --> 00:00:48,480
i absolutely am obsessed with my dog

00:00:47,039 --> 00:00:51,760
izzy and our new

00:00:48,480 --> 00:00:54,239
dog kevin and i love to garden and grow

00:00:51,760 --> 00:00:56,480
my own food

00:00:54,239 --> 00:00:58,559
i also started and run the triangle

00:00:56,480 --> 00:01:00,719
adult junior developers meetup

00:00:58,559 --> 00:01:02,160
we're a meetup that is dedicated to

00:01:00,719 --> 00:01:04,559
helping people who have entered

00:01:02,160 --> 00:01:07,439
technology through non-traditional means

00:01:04,559 --> 00:01:08,320
have the support and resources they need

00:01:07,439 --> 00:01:09,840
and this month

00:01:08,320 --> 00:01:11,920
because we're celebrating our three-year

00:01:09,840 --> 00:01:12,799
anniversary we'll actually be doing our

00:01:11,920 --> 00:01:15,759
first national

00:01:12,799 --> 00:01:17,200
meet up and lastly i'm a site

00:01:15,759 --> 00:01:19,759
reliability engineer at

00:01:17,200 --> 00:01:20,960
teamworks i've been there for a little

00:01:19,759 --> 00:01:23,520
bit over a year

00:01:20,960 --> 00:01:25,040
started there as a back-end engineer and

00:01:23,520 --> 00:01:28,479
i recently helped launch

00:01:25,040 --> 00:01:30,079
our lgbtq employee resource group so

00:01:28,479 --> 00:01:33,040
shout out to all of my fellow queer

00:01:30,079 --> 00:01:37,119
software engineers

00:01:33,040 --> 00:01:37,119
so what is this talk really about

00:01:38,400 --> 00:01:42,000
when i came up with this title i was

00:01:40,079 --> 00:01:43,360
really excited about you know automating

00:01:42,000 --> 00:01:45,200
the minutia and

00:01:43,360 --> 00:01:46,640
thought about pulling up some dictionary

00:01:45,200 --> 00:01:49,520
definitions and then i thought

00:01:46,640 --> 00:01:50,159
no that's been done before so what is

00:01:49,520 --> 00:01:53,520
this talk

00:01:50,159 --> 00:01:54,000
really about well this talk is about

00:01:53,520 --> 00:01:57,439
taking a

00:01:54,000 --> 00:01:59,520
really large to-do list and putting it

00:01:57,439 --> 00:02:00,640
in the cloud so that i can let my code

00:01:59,520 --> 00:02:05,280
do that to-do list

00:02:00,640 --> 00:02:09,520
for me what problem was i trying to

00:02:05,280 --> 00:02:12,319
solve though

00:02:09,520 --> 00:02:14,720
let me tell you a little story so when i

00:02:12,319 --> 00:02:16,400
was hired at teamworks in september of

00:02:14,720 --> 00:02:19,360
00:02:16,400 --> 00:02:21,040
i was hired as a back-end engineer a

00:02:19,360 --> 00:02:22,720
couple of months into the job

00:02:21,040 --> 00:02:24,720
my co-worker came to me and said hey

00:02:22,720 --> 00:02:27,200
hannah i'm actually moving

00:02:24,720 --> 00:02:28,959
and at the time this was not this was

00:02:27,200 --> 00:02:30,319
not coveted time so most people were in

00:02:28,959 --> 00:02:31,760
the office

00:02:30,319 --> 00:02:33,599
he said i'm moving and i was wondering

00:02:31,760 --> 00:02:35,440
if you'd like to take over my duties as

00:02:33,599 --> 00:02:37,599
our release manager

00:02:35,440 --> 00:02:39,360
well me being eager and wanting to learn

00:02:37,599 --> 00:02:42,560
said sure no problem

00:02:39,360 --> 00:02:45,120
i'll take on that task well i didn't

00:02:42,560 --> 00:02:46,800
really know what i was getting into

00:02:45,120 --> 00:02:48,640
so let me tell you a little bit about

00:02:46,800 --> 00:02:50,800
what i learned

00:02:48,640 --> 00:02:52,959
teamwork is a startup which means that

00:02:50,800 --> 00:02:53,280
we have some goals and where we want to

00:02:52,959 --> 00:02:55,200
be

00:02:53,280 --> 00:02:56,400
but a lot of our infrastructure and a

00:02:55,200 --> 00:03:00,959
lot of how we

00:02:56,400 --> 00:03:03,120
do things was really tedious and just

00:03:00,959 --> 00:03:04,239
not where we wanted to be so this

00:03:03,120 --> 00:03:06,319
diagram shows

00:03:04,239 --> 00:03:08,800
our three environments that are

00:03:06,319 --> 00:03:11,120
represented by the horizontal lines

00:03:08,800 --> 00:03:12,720
and each week we had to do a lot of

00:03:11,120 --> 00:03:16,159
tasks to

00:03:12,720 --> 00:03:19,120
promote code from one development branch

00:03:16,159 --> 00:03:19,840
to a master branch which is used for

00:03:19,120 --> 00:03:21,599
testing

00:03:19,840 --> 00:03:24,000
and then finally to our production ready

00:03:21,599 --> 00:03:24,000
branch

00:03:24,239 --> 00:03:29,840
in particular the release testing was

00:03:27,680 --> 00:03:31,680
done by our entire qa team over the

00:03:29,840 --> 00:03:33,840
course of the week which this blue block

00:03:31,680 --> 00:03:35,920
represents

00:03:33,840 --> 00:03:37,200
the release manager which was the task i

00:03:35,920 --> 00:03:39,920
was asked to take on

00:03:37,200 --> 00:03:41,920
had to be in charge of promoting the

00:03:39,920 --> 00:03:44,319
code

00:03:41,920 --> 00:03:45,760
sorry promoting the code from our

00:03:44,319 --> 00:03:48,720
development branch to

00:03:45,760 --> 00:03:49,040
master promoting it when it was ready

00:03:48,720 --> 00:03:51,040
from

00:03:49,040 --> 00:03:52,799
uh when testing was finished to our

00:03:51,040 --> 00:03:55,439
release web branch

00:03:52,799 --> 00:03:56,480
and then sre had the task of deploying

00:03:55,439 --> 00:03:58,159
it of course

00:03:56,480 --> 00:03:59,760
and that those were just some initial

00:03:58,159 --> 00:04:01,840
things that i learned about the duties

00:03:59,760 --> 00:04:04,799
of the release manager

00:04:01,840 --> 00:04:07,360
well a few a couple more months later i

00:04:04,799 --> 00:04:10,000
was asked to join our sre team

00:04:07,360 --> 00:04:11,760
and so my first project was to collect

00:04:10,000 --> 00:04:12,640
information on the release management

00:04:11,760 --> 00:04:14,400
duties

00:04:12,640 --> 00:04:15,840
and i went to my boss and i said can i

00:04:14,400 --> 00:04:17,840
please automate this

00:04:15,840 --> 00:04:19,759
this is tedious and it's taking up a lot

00:04:17,840 --> 00:04:22,000
of valuable time

00:04:19,759 --> 00:04:25,199
well i quickly learned that there were

00:04:22,000 --> 00:04:27,360
also a lot of daily tasks

00:04:25,199 --> 00:04:28,240
i had a daily slack announcement that i

00:04:27,360 --> 00:04:31,600
had to send

00:04:28,240 --> 00:04:34,160
which was you know par for the course

00:04:31,600 --> 00:04:35,600
but this announcement came with a lot of

00:04:34,160 --> 00:04:38,880
information

00:04:35,600 --> 00:04:40,960
first of all um thanks to kovid i

00:04:38,880 --> 00:04:42,400
was getting in the habit of waking up

00:04:40,960 --> 00:04:44,720
way later than

00:04:42,400 --> 00:04:47,360
our offshore team that was up and

00:04:44,720 --> 00:04:49,199
working while it was 4 a.m our time

00:04:47,360 --> 00:04:51,280
so i had to solve getting that message

00:04:49,199 --> 00:04:52,639
sent way before i wanted to be out of

00:04:51,280 --> 00:04:55,600
bed

00:04:52,639 --> 00:04:58,400
i also had to gather the versions of our

00:04:55,600 --> 00:04:59,840
web app and our mobile app

00:04:58,400 --> 00:05:02,479
get the number of tickets that were

00:04:59,840 --> 00:05:05,039
remaining to be tested

00:05:02,479 --> 00:05:08,400
get the number of regression test

00:05:05,039 --> 00:05:10,639
regression cases that were left

00:05:08,400 --> 00:05:11,600
and then come up with any known issues

00:05:10,639 --> 00:05:13,840
which were

00:05:11,600 --> 00:05:16,240
issues that if released into prod would

00:05:13,840 --> 00:05:19,120
introduce a bug

00:05:16,240 --> 00:05:20,880
and doing that last bit involved

00:05:19,120 --> 00:05:22,800
monitoring a slack channel

00:05:20,880 --> 00:05:24,160
on a regular basis which was all day

00:05:22,800 --> 00:05:26,240
long um

00:05:24,160 --> 00:05:28,000
and asking about every bug that was

00:05:26,240 --> 00:05:30,960
posted to the channel as to whether it

00:05:28,000 --> 00:05:33,199
would block the release or not

00:05:30,960 --> 00:05:34,080
so as you can imagine this kind of built

00:05:33,199 --> 00:05:37,039
up and got

00:05:34,080 --> 00:05:38,880
annoying other tasks that were involved

00:05:37,039 --> 00:05:42,240
were closing the previous week's

00:05:38,880 --> 00:05:47,039
jira tickets closing the jira release

00:05:42,240 --> 00:05:49,759
itself creating a new version in jira

00:05:47,039 --> 00:05:53,840
updating a versionnumber.txt file which

00:05:49,759 --> 00:05:53,840
was used by different parts of our code

00:05:55,120 --> 00:05:58,639
creating our release cut which was that

00:05:57,120 --> 00:05:59,600
part i showed in the diagram where the

00:05:58,639 --> 00:06:03,199
code was merged

00:05:59,600 --> 00:06:03,759
master updating swim lanes on a release

00:06:03,199 --> 00:06:06,720
testing

00:06:03,759 --> 00:06:08,080
jira board back merging code from each

00:06:06,720 --> 00:06:09,840
environment just to make sure

00:06:08,080 --> 00:06:12,639
each environment had parity with the

00:06:09,840 --> 00:06:13,199
next and announcing the approval of the

00:06:12,639 --> 00:06:16,319
release

00:06:13,199 --> 00:06:16,720
by qa once testing was done and none of

00:06:16,319 --> 00:06:19,039
this

00:06:16,720 --> 00:06:21,600
involved the actual deploy to production

00:06:19,039 --> 00:06:23,600
itself

00:06:21,600 --> 00:06:25,600
so i came up with some goals of how i

00:06:23,600 --> 00:06:27,840
wanted to automate and what i wanted to

00:06:25,600 --> 00:06:30,319
automate of these tasks

00:06:27,840 --> 00:06:31,039
so ultimately our goal at teamworks is

00:06:30,319 --> 00:06:34,080
to reach

00:06:31,039 --> 00:06:35,680
a state of true ci cd and i know that

00:06:34,080 --> 00:06:38,319
that is what everyone says

00:06:35,680 --> 00:06:39,360
but we really were on a path forward

00:06:38,319 --> 00:06:42,319
towards getting

00:06:39,360 --> 00:06:44,479
our pipelines to build and release code

00:06:42,319 --> 00:06:44,960
at a regular cadence that it was merged

00:06:44,479 --> 00:06:48,240
into

00:06:44,960 --> 00:06:50,479
into our production ready branch

00:06:48,240 --> 00:06:52,000
so but i wanted to focus on three things

00:06:50,479 --> 00:06:53,680
in particular

00:06:52,000 --> 00:06:55,919
i wanted to focus on the daily slack

00:06:53,680 --> 00:06:58,000
announcement i wanted to cut out the

00:06:55,919 --> 00:07:01,360
jira operations that i was doing

00:06:58,000 --> 00:07:03,120
manually every monday and i wanted to

00:07:01,360 --> 00:07:07,199
automate the cut of the release

00:07:03,120 --> 00:07:09,280
from develop into our master branch

00:07:07,199 --> 00:07:11,919
all while keeping these three things in

00:07:09,280 --> 00:07:14,880
mind one to maintain accuracy

00:07:11,919 --> 00:07:16,400
and timeliness manage versioning without

00:07:14,880 --> 00:07:19,520
a text file

00:07:16,400 --> 00:07:21,759
and require minimal maintenance

00:07:19,520 --> 00:07:23,120
a little disclaimer here in full

00:07:21,759 --> 00:07:25,680
disclosure some of this

00:07:23,120 --> 00:07:27,440
is still a work in progress but today

00:07:25,680 --> 00:07:28,560
i'm going to focus on showing you how i

00:07:27,440 --> 00:07:30,720
automated the daily

00:07:28,560 --> 00:07:31,840
slack announcement and the jira

00:07:30,720 --> 00:07:34,400
operations

00:07:31,840 --> 00:07:37,840
and how i'm looking to go about

00:07:34,400 --> 00:07:37,840
automating the release cut

00:07:38,560 --> 00:07:41,599
how did i do this

00:07:41,680 --> 00:07:46,560
so first i wanted to make sure i used

00:07:44,000 --> 00:07:49,599
tools that i already know

00:07:46,560 --> 00:07:52,400
this included the slack api

00:07:49,599 --> 00:07:54,400
bash and python scripting which i knew a

00:07:52,400 --> 00:07:56,800
little bit of each

00:07:54,400 --> 00:07:58,479
node.js which i had the most experience

00:07:56,800 --> 00:07:59,919
with but wasn't up to par with the

00:07:58,479 --> 00:08:03,120
latest version of

00:07:59,919 --> 00:08:07,199
es or node

00:08:03,120 --> 00:08:11,039
and the jira api and some tools

00:08:07,199 --> 00:08:13,520
i didn't know testrail which was a

00:08:11,039 --> 00:08:15,599
product used by our testing team to

00:08:13,520 --> 00:08:17,680
define test regressions

00:08:15,599 --> 00:08:19,680
git lab which we were just beginning to

00:08:17,680 --> 00:08:22,800
use to develop a

00:08:19,680 --> 00:08:24,960
working pipeline for our code and then

00:08:22,800 --> 00:08:25,840
these other two tools that my boss kept

00:08:24,960 --> 00:08:28,000
mentioning

00:08:25,840 --> 00:08:31,360
amazon lambda and serverless each of

00:08:28,000 --> 00:08:31,360
which i knew nothing about

00:08:31,599 --> 00:08:36,800
so as i mentioned i started with the

00:08:33,839 --> 00:08:36,800
slack announcement

00:08:37,120 --> 00:08:41,839
the slack announcement is this message

00:08:39,120 --> 00:08:44,480
that i showed you earlier

00:08:41,839 --> 00:08:45,440
and it clued me into some apis that i'd

00:08:44,480 --> 00:08:47,279
be able to use

00:08:45,440 --> 00:08:49,839
and as i mentioned a second ago i had

00:08:47,279 --> 00:08:52,839
experience using the jira api

00:08:49,839 --> 00:08:54,000
so i would use this api to get the app

00:08:52,839 --> 00:08:56,959
version

00:08:54,000 --> 00:08:58,959
to get the number of tickets that were

00:08:56,959 --> 00:09:02,240
remaining to be tested

00:08:58,959 --> 00:09:04,560
and any known issues at the time

00:09:02,240 --> 00:09:09,839
i would use the test rail api to gather

00:09:04,560 --> 00:09:09,839
any regression cases that remain

00:09:10,320 --> 00:09:16,720
i would also use the slack api

00:09:13,519 --> 00:09:18,560
slack uses a post that you make to their

00:09:16,720 --> 00:09:22,480
web hooks url

00:09:18,560 --> 00:09:25,200
via a body which contains a message

00:09:22,480 --> 00:09:27,519
which was really simple for me i knew

00:09:25,200 --> 00:09:31,120
that that slack message all boiled down

00:09:27,519 --> 00:09:34,000
to this single post with a message

00:09:31,120 --> 00:09:35,360
that i make to the slack web hook url

00:09:34,000 --> 00:09:37,279
and i used the

00:09:35,360 --> 00:09:38,880
node request library which there are

00:09:37,279 --> 00:09:40,640
many versions of but

00:09:38,880 --> 00:09:42,320
it was something i had experience with

00:09:40,640 --> 00:09:45,519
that would just allow me to very

00:09:42,320 --> 00:09:47,839
simply and easily make api calls to

00:09:45,519 --> 00:09:49,920
these various apis

00:09:47,839 --> 00:09:52,320
and lastly i really wanted to keep in

00:09:49,920 --> 00:09:54,080
mind the single responsibility principle

00:09:52,320 --> 00:09:55,760
it was really important for me to keep

00:09:54,080 --> 00:09:57,680
my code super organized

00:09:55,760 --> 00:10:00,399
so that i could always go back and fix

00:09:57,680 --> 00:10:02,160
it or make adjustments easily

00:10:00,399 --> 00:10:04,399
so the bottom right shows how each of

00:10:02,160 --> 00:10:07,040
the apis that i used

00:10:04,399 --> 00:10:08,720
was contained within its own module in

00:10:07,040 --> 00:10:12,880
javascript

00:10:08,720 --> 00:10:12,880
that allowed me to keep things separate

00:10:12,959 --> 00:10:19,839
but with more single responsibility

00:10:15,120 --> 00:10:19,839
principle came more questions

00:10:19,920 --> 00:10:24,160
as i mentioned a minute ago i knew that

00:10:22,640 --> 00:10:26,160
i would have to build a message

00:10:24,160 --> 00:10:28,240
to send to slack and that part was kind

00:10:26,160 --> 00:10:30,079
of already defined for me

00:10:28,240 --> 00:10:32,399
and i was used to developing a node

00:10:30,079 --> 00:10:34,640
locally so that i could run the command

00:10:32,399 --> 00:10:38,320
node.js and then the location of the

00:10:34,640 --> 00:10:41,279
function to execute my code

00:10:38,320 --> 00:10:43,200
what i didn't know was what server would

00:10:41,279 --> 00:10:45,040
i be hosting my code on

00:10:43,200 --> 00:10:46,480
would i have to handle any dns

00:10:45,040 --> 00:10:48,640
resolution

00:10:46,480 --> 00:10:50,959
would i be or how would i execute the

00:10:48,640 --> 00:10:52,480
function if i didn't know

00:10:50,959 --> 00:10:54,320
what the ser what server would be

00:10:52,480 --> 00:10:57,519
running it and lastly

00:10:54,320 --> 00:10:59,360
what the heck is aws lambda and what is

00:10:57,519 --> 00:11:01,839
serverless that my boss keeps talking

00:10:59,360 --> 00:11:01,839
about

00:11:01,920 --> 00:11:06,000
so i did what i usually do when i'm not

00:11:04,000 --> 00:11:08,800
really sure how to go about something

00:11:06,000 --> 00:11:10,800
and i just dove right into the code

00:11:08,800 --> 00:11:12,240
so i'm about i'm about to show you the

00:11:10,800 --> 00:11:15,519
code that i use to

00:11:12,240 --> 00:11:17,440
send that slack message

00:11:15,519 --> 00:11:20,399
if you recall the first thing in the

00:11:17,440 --> 00:11:22,959
message was the version of the app

00:11:20,399 --> 00:11:25,279
so here i have a method and a lot of

00:11:22,959 --> 00:11:27,600
these code screenshots i've collapsed

00:11:25,279 --> 00:11:28,399
much of the logic just so i could fit it

00:11:27,600 --> 00:11:30,560
on the screen

00:11:28,399 --> 00:11:32,079
but if you have any questions as i go

00:11:30,560 --> 00:11:35,440
along the way by all means

00:11:32,079 --> 00:11:38,480
reach out but this first method

00:11:35,440 --> 00:11:42,000
would take the jira versions

00:11:38,480 --> 00:11:43,600
url endpoint to the api and i have a

00:11:42,000 --> 00:11:45,600
separate wrapper function that builds

00:11:43,600 --> 00:11:47,760
the request so i could pass in

00:11:45,600 --> 00:11:48,959
which url i was posting to and which

00:11:47,760 --> 00:11:52,399
method

00:11:48,959 --> 00:11:56,320
and i then query the jira

00:11:52,399 --> 00:11:58,160
api through that request for

00:11:56,320 --> 00:11:59,920
the web version and the mobile version

00:11:58,160 --> 00:12:02,880
that i needed to build all of the other

00:11:59,920 --> 00:12:02,880
information off of

00:12:03,200 --> 00:12:07,040
next i have a message called get message

00:12:05,600 --> 00:12:09,680
which or sorry a

00:12:07,040 --> 00:12:11,040
method called get message i now realize

00:12:09,680 --> 00:12:12,880
that that

00:12:11,040 --> 00:12:14,560
function name is a little bit confusing

00:12:12,880 --> 00:12:15,440
because what i'm really doing in this

00:12:14,560 --> 00:12:18,639
function

00:12:15,440 --> 00:12:20,639
is i'm querying all of the apis for

00:12:18,639 --> 00:12:23,519
those numerical values that i need for

00:12:20,639 --> 00:12:23,519
the slack message

00:12:23,600 --> 00:12:27,200
and both of these functions combined

00:12:25,680 --> 00:12:29,760
return to me

00:12:27,200 --> 00:12:32,800
all of the values mapped to a name in a

00:12:29,760 --> 00:12:36,079
hash essentially or a javascript object

00:12:32,800 --> 00:12:39,360
that give me the total number of

00:12:36,079 --> 00:12:42,079
tickets left for web for mobile

00:12:39,360 --> 00:12:44,959
whether mobile was skipped the number of

00:12:42,079 --> 00:12:47,680
untested cases which is regressions

00:12:44,959 --> 00:12:47,680
and so on

00:12:48,320 --> 00:12:53,120
so now what i have some code and locally

00:12:51,680 --> 00:12:56,480
i'm able to run

00:12:53,120 --> 00:12:58,800
nodejs index.html and

00:12:56,480 --> 00:13:02,240
i'm able to execute this function that

00:12:58,800 --> 00:13:04,320
returns me the values that i need

00:13:02,240 --> 00:13:08,079
so from there i compile all of the

00:13:04,320 --> 00:13:10,639
responses into a single message body

00:13:08,079 --> 00:13:11,279
and this actually builds the string that

00:13:10,639 --> 00:13:14,160
forms

00:13:11,279 --> 00:13:16,800
the code that needs to be sent to the

00:13:14,160 --> 00:13:20,160
slack api

00:13:16,800 --> 00:13:20,800
and voila i've got a message with my web

00:13:20,160 --> 00:13:23,279
version

00:13:20,800 --> 00:13:24,079
my mobile version and all of the numbers

00:13:23,279 --> 00:13:26,959
that i need

00:13:24,079 --> 00:13:26,959
for that message

00:13:27,680 --> 00:13:30,959
but as i mentioned before i still have

00:13:30,000 --> 00:13:34,560
questions

00:13:30,959 --> 00:13:37,279
so what server am i going to use

00:13:34,560 --> 00:13:38,639
will there be any dns resolution um how

00:13:37,279 --> 00:13:40,720
will i execute this

00:13:38,639 --> 00:13:43,360
and again what is lambda and what is

00:13:40,720 --> 00:13:43,360
serverless

00:13:43,600 --> 00:13:48,000
so at that point i knew it was time to

00:13:45,519 --> 00:13:50,399
look into those last two questions

00:13:48,000 --> 00:13:51,839
because those are the ones that boss

00:13:50,399 --> 00:13:54,959
kept pointing me to to say

00:13:51,839 --> 00:13:58,560
this will handle everything you need

00:13:54,959 --> 00:13:59,839
so first aws lambda what is amazon

00:13:58,560 --> 00:14:01,440
lambda

00:13:59,839 --> 00:14:03,360
and i apologize if you can hear my dog

00:14:01,440 --> 00:14:06,399
sparking

00:14:03,360 --> 00:14:08,959
so amazon lambda is really cool uh

00:14:06,399 --> 00:14:10,240
it's basically something that lets you

00:14:08,959 --> 00:14:12,480
host and

00:14:10,240 --> 00:14:15,120
run code without worrying about

00:14:12,480 --> 00:14:17,920
infrastructure configuration

00:14:15,120 --> 00:14:20,240
without having to worry about paying for

00:14:17,920 --> 00:14:21,839
runtime that you aren't using

00:14:20,240 --> 00:14:24,320
and it just keeps everything really

00:14:21,839 --> 00:14:24,320
simple

00:14:24,399 --> 00:14:31,199
so i started to dig into the

00:14:27,920 --> 00:14:34,320
console and i see sure enough aws

00:14:31,199 --> 00:14:36,320
wants me to upload a single function so

00:14:34,320 --> 00:14:38,240
that works great that's what i was

00:14:36,320 --> 00:14:41,120
working with anyway

00:14:38,240 --> 00:14:42,720
awesome but something stood out to me

00:14:41,120 --> 00:14:45,360
that was kind of strange

00:14:42,720 --> 00:14:47,440
and that was it wanted me to upload a

00:14:45,360 --> 00:14:49,920
zip file of my code

00:14:47,440 --> 00:14:50,800
well i'm used to working in version

00:14:49,920 --> 00:14:52,720
control

00:14:50,800 --> 00:14:54,399
and i knew that this wouldn't be perfect

00:14:52,720 --> 00:14:57,040
from the get-go

00:14:54,399 --> 00:15:00,000
so uploading my code every time i made a

00:14:57,040 --> 00:15:01,680
change just really felt cumbersome

00:15:00,000 --> 00:15:03,199
i also had to start looking at

00:15:01,680 --> 00:15:06,560
permissions and

00:15:03,199 --> 00:15:09,920
roles in aws which is a whole map

00:15:06,560 --> 00:15:12,639
of security and

00:15:09,920 --> 00:15:15,440
allowing certain roles and permissions

00:15:12,639 --> 00:15:17,760
to do different things

00:15:15,440 --> 00:15:20,399
and there were policies that i could

00:15:17,760 --> 00:15:23,920
attach to each role

00:15:20,399 --> 00:15:25,199
and once i hit a list of 624 permission

00:15:23,920 --> 00:15:28,240
policies

00:15:25,199 --> 00:15:28,959
i just kind of panicked and at that

00:15:28,240 --> 00:15:31,680
point i said

00:15:28,959 --> 00:15:33,360
you know what uh well let's just come

00:15:31,680 --> 00:15:36,560
back to amazon lambda because i'm not

00:15:33,360 --> 00:15:39,519
really sure what that's all about

00:15:36,560 --> 00:15:40,880
and i moved on and i said okay well what

00:15:39,519 --> 00:15:43,279
is serverless

00:15:40,880 --> 00:15:45,120
and i should back up and say that when i

00:15:43,279 --> 00:15:45,839
was feeling frustrated with lambda i had

00:15:45,120 --> 00:15:47,759
already

00:15:45,839 --> 00:15:49,519
created two or three versions of the

00:15:47,759 --> 00:15:52,320
function in the console

00:15:49,519 --> 00:15:54,000
and just really wasn't figuring out all

00:15:52,320 --> 00:15:56,959
the ways to connect it to get it working

00:15:54,000 --> 00:15:59,199
right so i have given it the good old

00:15:56,959 --> 00:16:02,399
college try

00:15:59,199 --> 00:16:04,160
so what is serverless well once i found

00:16:02,399 --> 00:16:06,079
serverless

00:16:04,160 --> 00:16:08,079
and read into it i realized this was

00:16:06,079 --> 00:16:08,880
really where i wanted to be so

00:16:08,079 --> 00:16:13,519
serverless

00:16:08,880 --> 00:16:15,440
is a configuration utility

00:16:13,519 --> 00:16:17,839
that lets you spin up a cloud function

00:16:15,440 --> 00:16:19,680
from any provider including amazon

00:16:17,839 --> 00:16:20,880
lambda or you can use google cloud

00:16:19,680 --> 00:16:24,079
functions

00:16:20,880 --> 00:16:24,720
and it lets you very simply create your

00:16:24,079 --> 00:16:26,480
function

00:16:24,720 --> 00:16:28,240
and deploy it in the matter of a couple

00:16:26,480 --> 00:16:32,000
of commands

00:16:28,240 --> 00:16:34,800
so how did this work first i

00:16:32,000 --> 00:16:36,560
went into the console of serverless and

00:16:34,800 --> 00:16:38,880
just created a test app

00:16:36,560 --> 00:16:41,360
and this was just you know named ato

00:16:38,880 --> 00:16:43,440
sample for the sake of this talk but

00:16:41,360 --> 00:16:46,720
once i created the name of the app all i

00:16:43,440 --> 00:16:46,720
had to do is click deploy

00:16:46,880 --> 00:16:50,959
with that i was given two commands to

00:16:49,519 --> 00:16:53,120
run on the command line

00:16:50,959 --> 00:16:54,240
that would install the serverless

00:16:53,120 --> 00:16:57,360
package

00:16:54,240 --> 00:16:59,680
and knit my serverless repository and

00:16:57,360 --> 00:17:00,959
allow me to deploy that project

00:16:59,680 --> 00:17:03,120
immediately

00:17:00,959 --> 00:17:04,880
just from one or two commands on the

00:17:03,120 --> 00:17:07,280
command line

00:17:04,880 --> 00:17:08,799
and what lastly stood out to me was

00:17:07,280 --> 00:17:10,079
serverless offered this really

00:17:08,799 --> 00:17:11,919
convenient

00:17:10,079 --> 00:17:13,679
command line function which is

00:17:11,919 --> 00:17:16,400
serverless invoke local

00:17:13,679 --> 00:17:17,360
that would allow me to test my code from

00:17:16,400 --> 00:17:20,240
my machine

00:17:17,360 --> 00:17:21,919
without having to go and click any sort

00:17:20,240 --> 00:17:25,839
of

00:17:21,919 --> 00:17:28,079
deploy mechanism within the ui

00:17:25,839 --> 00:17:29,200
between serverless deploy and invoke

00:17:28,079 --> 00:17:32,400
local i

00:17:29,200 --> 00:17:32,960
found exactly what i needed so how did i

00:17:32,400 --> 00:17:36,400
set up

00:17:32,960 --> 00:17:37,039
serverless well after i did a serverless

00:17:36,400 --> 00:17:39,440
deploy

00:17:37,039 --> 00:17:41,120
from my project that contained my node

00:17:39,440 --> 00:17:43,840
app

00:17:41,120 --> 00:17:44,480
um i discovered that really serverless

00:17:43,840 --> 00:17:46,720
was doing

00:17:44,480 --> 00:17:47,600
all the things in aws that i needed it

00:17:46,720 --> 00:17:50,559
to

00:17:47,600 --> 00:17:52,559
so i had so all it entailed was a

00:17:50,559 --> 00:17:55,919
serverless yaml configuration

00:17:52,559 --> 00:17:58,160
that gave me just a few items i needed

00:17:55,919 --> 00:18:02,080
to specify so i had to create the

00:17:58,160 --> 00:18:03,760
aws role and specify a run time

00:18:02,080 --> 00:18:05,120
and then pass in some environment

00:18:03,760 --> 00:18:07,520
variables and that was

00:18:05,120 --> 00:18:09,200
it so you can see on the left that i had

00:18:07,520 --> 00:18:10,799
my code base

00:18:09,200 --> 00:18:13,520
and the only thing that serverless did

00:18:10,799 --> 00:18:17,520
is add a single yaml configuration file

00:18:13,520 --> 00:18:20,320
to allow me to deploy via serverless

00:18:17,520 --> 00:18:21,280
i also learned that since i needed my

00:18:20,320 --> 00:18:25,440
function to

00:18:21,280 --> 00:18:27,840
deploy at 7am it was as simple as

00:18:25,440 --> 00:18:28,880
creating two cron schedules in the

00:18:27,840 --> 00:18:31,600
configuration

00:18:28,880 --> 00:18:33,200
so that my my message could be sent

00:18:31,600 --> 00:18:34,880
before i was out of bed

00:18:33,200 --> 00:18:36,720
and you can see from this really

00:18:34,880 --> 00:18:38,960
exciting graph on the lower right

00:18:36,720 --> 00:18:41,200
straight out of serverless console sure

00:18:38,960 --> 00:18:43,919
enough my function deployed at 7am

00:18:41,200 --> 00:18:45,200
and 3pm on the day that i took that

00:18:43,919 --> 00:18:47,840
screenshot

00:18:45,200 --> 00:18:49,280
and lastly i mentioned that i had just

00:18:47,840 --> 00:18:50,160
to set up a couple of environment

00:18:49,280 --> 00:18:53,120
variables

00:18:50,160 --> 00:18:54,080
well i was able to toggle those really

00:18:53,120 --> 00:18:56,080
simply

00:18:54,080 --> 00:18:58,000
to use the test channel that i had where

00:18:56,080 --> 00:18:59,520
i was just blowing it up while i made

00:18:58,000 --> 00:19:01,760
mistakes and learned

00:18:59,520 --> 00:19:03,360
what to fix and then i could also switch

00:19:01,760 --> 00:19:06,400
that easily over

00:19:03,360 --> 00:19:11,200
and deploy the correct web hook url

00:19:06,400 --> 00:19:14,320
um straight from my ammo configuration

00:19:11,200 --> 00:19:16,720
and with that i was able to automate

00:19:14,320 --> 00:19:20,960
my daily slack announcement without

00:19:16,720 --> 00:19:20,960
having to get out of bed before 7am

00:19:21,520 --> 00:19:25,600
so i'll just pause right there and go

00:19:24,080 --> 00:19:28,960
back and look at my goals

00:19:25,600 --> 00:19:30,000
so we talked about um the daily slack

00:19:28,960 --> 00:19:33,760
announcement being

00:19:30,000 --> 00:19:36,480
the first goal and i achieved that

00:19:33,760 --> 00:19:38,240
and that was great so that was part one

00:19:36,480 --> 00:19:40,720
so the rest of this discussion i'll talk

00:19:38,240 --> 00:19:42,640
about the gr operations

00:19:40,720 --> 00:19:45,840
a little bit about the release cut and

00:19:42,640 --> 00:19:45,840
how i went about those

00:19:47,840 --> 00:19:53,280
um actually i'll pause

00:19:51,679 --> 00:19:55,600
if there are any questions before i

00:19:53,280 --> 00:19:58,080
continue

00:19:55,600 --> 00:19:58,080
let's see

00:20:00,480 --> 00:20:09,039
i see q and a i can't see the questions

00:20:06,880 --> 00:20:10,320
okay okay and i can help you if you want

00:20:09,039 --> 00:20:12,000
to uh

00:20:10,320 --> 00:20:13,760
questions alright so we got uh two

00:20:12,000 --> 00:20:15,520
questions right here in the q a

00:20:13,760 --> 00:20:17,679
um so how was the daily slack

00:20:15,520 --> 00:20:20,880
announcement used by team members

00:20:17,679 --> 00:20:21,679
to keep them in the loop yeah that's a

00:20:20,880 --> 00:20:24,080
great question

00:20:21,679 --> 00:20:24,880
um so the daily slack announcement was

00:20:24,080 --> 00:20:28,400
used

00:20:24,880 --> 00:20:30,080
by two teams primarily um for one

00:20:28,400 --> 00:20:31,600
you know i showed you that we have the

00:20:30,080 --> 00:20:35,200
weekly um

00:20:31,600 --> 00:20:37,200
qa um test

00:20:35,200 --> 00:20:38,400
test that need to be done so that's part

00:20:37,200 --> 00:20:41,440
of our workflow

00:20:38,400 --> 00:20:43,360
and a lot of our qa team was overseas

00:20:41,440 --> 00:20:44,640
so even though they used the same

00:20:43,360 --> 00:20:46,880
platforms as we did

00:20:44,640 --> 00:20:48,799
the daily slack announcement gave them a

00:20:46,880 --> 00:20:50,960
really high level overview of

00:20:48,799 --> 00:20:54,080
how are we doing and how much do we have

00:20:50,960 --> 00:20:56,400
left to test this week

00:20:54,080 --> 00:20:58,240
it also helped the product team to see

00:20:56,400 --> 00:21:01,200
where we were at in case

00:20:58,240 --> 00:21:02,000
you know they had any pressing urgencies

00:21:01,200 --> 00:21:04,159
that needed to be

00:21:02,000 --> 00:21:05,120
added to the deploy cycle before the end

00:21:04,159 --> 00:21:07,520
of the week

00:21:05,120 --> 00:21:09,520
so for example if we were really light

00:21:07,520 --> 00:21:10,159
on regressions and there were very few

00:21:09,520 --> 00:21:12,880
tests

00:21:10,159 --> 00:21:13,919
um very few tickets left showing in that

00:21:12,880 --> 00:21:16,080
announcement

00:21:13,919 --> 00:21:17,440
um then they might be able to prioritize

00:21:16,080 --> 00:21:20,400
some other work that we didn't think

00:21:17,440 --> 00:21:20,400
we'd be able to fit in

00:21:21,280 --> 00:21:24,799
great yeah uh thank you for your

00:21:22,799 --> 00:21:25,840
question steve and we also have uh one

00:21:24,799 --> 00:21:27,520
from daniel

00:21:25,840 --> 00:21:30,000
uh just some clarification on what you

00:21:27,520 --> 00:21:34,080
meant by release cut

00:21:30,000 --> 00:21:37,919
yeah um so i will let's see

00:21:34,080 --> 00:21:39,679
um our release cut so because we're not

00:21:37,919 --> 00:21:42,480
at a state of ci cd

00:21:39,679 --> 00:21:43,679
yet we're really using our three

00:21:42,480 --> 00:21:47,120
different environments

00:21:43,679 --> 00:21:49,039
to separate our work

00:21:47,120 --> 00:21:50,240
teamworks is a startup but it is about

00:21:49,039 --> 00:21:53,360
10 years old

00:21:50,240 --> 00:21:56,480
and we were only able to start

00:21:53,360 --> 00:21:59,760
writing a bulk of automated

00:21:56,480 --> 00:22:01,520
end-to-end tests fairly recently so

00:21:59,760 --> 00:22:02,880
for a really long time we had an

00:22:01,520 --> 00:22:06,080
exclusively manual

00:22:02,880 --> 00:22:08,720
qa process so the release

00:22:06,080 --> 00:22:10,320
cut was the process of merging

00:22:08,720 --> 00:22:10,880
everything that was in our develop

00:22:10,320 --> 00:22:13,120
branch

00:22:10,880 --> 00:22:15,600
which is the working you know branch

00:22:13,120 --> 00:22:19,280
that all the developers work off of

00:22:15,600 --> 00:22:20,080
and getting that promoting that into our

00:22:19,280 --> 00:22:22,400
master

00:22:20,080 --> 00:22:23,840
branch or our staging environment which

00:22:22,400 --> 00:22:26,880
is where qa

00:22:23,840 --> 00:22:29,520
would test everything that was written

00:22:26,880 --> 00:22:31,120
in code the week before and that's just

00:22:29,520 --> 00:22:34,400
a good example of how

00:22:31,120 --> 00:22:37,440
you know we are a work in progress and

00:22:34,400 --> 00:22:41,200
moving towards more test automation

00:22:37,440 --> 00:22:43,039
and more automatic processes

00:22:41,200 --> 00:22:44,559
so the release cut specifically was the

00:22:43,039 --> 00:22:45,120
process of getting that code from

00:22:44,559 --> 00:22:47,840
develop

00:22:45,120 --> 00:22:47,840
into master

00:22:48,640 --> 00:22:52,400
great uh we have uh three more questions

00:22:51,200 --> 00:22:53,280
would you like to continue the

00:22:52,400 --> 00:22:57,120
presentation

00:22:53,280 --> 00:22:58,880
or maybe answer um sure i'll continue

00:22:57,120 --> 00:23:00,480
and then we'll have more time for

00:22:58,880 --> 00:23:03,760
questions at the end

00:23:00,480 --> 00:23:07,600
sounds good great thank you

00:23:03,760 --> 00:23:09,760
okay so um continuing um

00:23:07,600 --> 00:23:11,120
so i mentioned the next goal was to

00:23:09,760 --> 00:23:14,400
really automate the

00:23:11,120 --> 00:23:16,960
jira steps so one of the great things

00:23:14,400 --> 00:23:19,280
about when i joined the sre team

00:23:16,960 --> 00:23:20,840
is that we had already started as a

00:23:19,280 --> 00:23:24,159
company to use

00:23:20,840 --> 00:23:27,600
gitlab which was going to help us really

00:23:24,159 --> 00:23:30,320
move closer and closer towards ci cd

00:23:27,600 --> 00:23:31,520
um what i mean by that in this case was

00:23:30,320 --> 00:23:34,480
that we were already using

00:23:31,520 --> 00:23:36,000
build pipelines to run our tests upon

00:23:34,480 --> 00:23:39,200
merge

00:23:36,000 --> 00:23:40,720
and even you know now today this wasn't

00:23:39,200 --> 00:23:42,559
happening at the time but today we're

00:23:40,720 --> 00:23:45,520
using it to deploy

00:23:42,559 --> 00:23:46,240
our code into production so there was

00:23:45,520 --> 00:23:48,960
already

00:23:46,240 --> 00:23:51,679
a path paved for me when i got to the

00:23:48,960 --> 00:23:54,720
stage of wanting to

00:23:51,679 --> 00:23:58,159
automate the jira steps so this is just

00:23:54,720 --> 00:24:00,720
an image of what a pipeline looks like

00:23:58,159 --> 00:24:02,960
so what i wanted to insert into that was

00:24:00,720 --> 00:24:05,919
here on the left you see a release ops

00:24:02,960 --> 00:24:07,120
job um one thing that was really

00:24:05,919 --> 00:24:10,400
important to me that i

00:24:07,120 --> 00:24:11,440
only recently was able to find a

00:24:10,400 --> 00:24:14,159
solution for

00:24:11,440 --> 00:24:14,559
was that a failure in the release ops

00:24:14,159 --> 00:24:16,640
job

00:24:14,559 --> 00:24:17,919
should not do anything to block the

00:24:16,640 --> 00:24:20,400
remaining

00:24:17,919 --> 00:24:22,400
pipeline from being green and that's

00:24:20,400 --> 00:24:25,520
because this was really

00:24:22,400 --> 00:24:28,420
paperwork so to speak compared to

00:24:25,520 --> 00:24:29,520
deployment of infrastructure so

00:24:28,420 --> 00:24:33,200
[Music]

00:24:29,520 --> 00:24:35,919
thanks to gitlab i was able to create a

00:24:33,200 --> 00:24:37,440
job that triggers a child pipeline and

00:24:35,919 --> 00:24:40,559
you can see here

00:24:37,440 --> 00:24:42,559
it says trigger include and

00:24:40,559 --> 00:24:45,279
and it defines this file where you'll

00:24:42,559 --> 00:24:48,559
find the rest of my

00:24:45,279 --> 00:24:53,279
pipeline defined

00:24:48,559 --> 00:24:55,440
so what does that look like um

00:24:53,279 --> 00:24:58,799
so i have my releaseops job it's a

00:24:55,440 --> 00:25:02,400
pre-staged to the rest of the pipeline

00:24:58,799 --> 00:25:05,600
and at this point i wanted to kick off

00:25:02,400 --> 00:25:08,080
steps that updated the version that

00:25:05,600 --> 00:25:10,640
closed the jira tickets that create jira

00:25:08,080 --> 00:25:12,400
tickets and that cut our release

00:25:10,640 --> 00:25:14,000
and you can see here that even though

00:25:12,400 --> 00:25:15,840
this pipeline on the bottom

00:25:14,000 --> 00:25:18,480
has a failure at the end under cut

00:25:15,840 --> 00:25:19,200
release the job that kicked off that

00:25:18,480 --> 00:25:21,520
pipeline

00:25:19,200 --> 00:25:23,200
called a child pipeline is green because

00:25:21,520 --> 00:25:25,279
it successfully triggered the child

00:25:23,200 --> 00:25:27,600
pipeline

00:25:25,279 --> 00:25:30,000
so the awesome thing about get gitlab is

00:25:27,600 --> 00:25:31,679
it's really as simple as defining some

00:25:30,000 --> 00:25:35,480
yaml configuration

00:25:31,679 --> 00:25:38,480
um and so here i have my

00:25:35,480 --> 00:25:38,480
gitlabreleaseops.yaml

00:25:38,880 --> 00:25:43,679
first i define our stages so i have four

00:25:41,679 --> 00:25:44,159
stages which if i go to the previous

00:25:43,679 --> 00:25:47,520
slide

00:25:44,159 --> 00:25:49,520
are these bold words above the job

00:25:47,520 --> 00:25:51,760
itself

00:25:49,520 --> 00:25:52,559
and the stages i have are senver close

00:25:51,760 --> 00:25:54,799
tickets

00:25:52,559 --> 00:25:56,159
create tickets and cut release and the

00:25:54,799 --> 00:25:59,679
great thing about get lab

00:25:56,159 --> 00:26:01,039
or most pipelines is you can have as

00:25:59,679 --> 00:26:03,760
many jobs as you want

00:26:01,039 --> 00:26:04,159
per stage the thing to note though is

00:26:03,760 --> 00:26:06,400
that

00:26:04,159 --> 00:26:08,000
each job running in a stage is going to

00:26:06,400 --> 00:26:10,799
run in parallel

00:26:08,000 --> 00:26:12,080
so because my scripts really kind of

00:26:10,799 --> 00:26:13,679
depended on one another

00:26:12,080 --> 00:26:15,679
it was really important to me that each

00:26:13,679 --> 00:26:18,080
stage had its own function

00:26:15,679 --> 00:26:19,679
and that the next stage didn't continue

00:26:18,080 --> 00:26:23,600
until the previous stage

00:26:19,679 --> 00:26:26,640
did so after i define my stages i define

00:26:23,600 --> 00:26:29,360
four jobs i have update version numbers

00:26:26,640 --> 00:26:31,120
closed your release create your release

00:26:29,360 --> 00:26:33,360
and create release cut

00:26:31,120 --> 00:26:34,559
and under each of those jobs there's you

00:26:33,360 --> 00:26:36,799
know a lot of

00:26:34,559 --> 00:26:37,679
information but the most important part

00:26:36,799 --> 00:26:40,159
is that

00:26:37,679 --> 00:26:41,360
it's as simple as kicking off a script

00:26:40,159 --> 00:26:44,480
so each job

00:26:41,360 --> 00:26:46,960
literally says go run this bash script

00:26:44,480 --> 00:26:48,559
or go around this python script

00:26:46,960 --> 00:26:50,559
and i have one of those correlated to

00:26:48,559 --> 00:26:52,720
each of my jobs

00:26:50,559 --> 00:26:54,720
and then underneath all of those you see

00:26:52,720 --> 00:26:57,440
some rules where you define

00:26:54,720 --> 00:26:59,200
in what cases does this job actually run

00:26:57,440 --> 00:27:01,679
in the pipeline

00:26:59,200 --> 00:27:02,960
so i mentioned before that i used bash

00:27:01,679 --> 00:27:05,679
and python

00:27:02,960 --> 00:27:06,000
the reason for that was twofold one i

00:27:05,679 --> 00:27:07,919
really

00:27:06,000 --> 00:27:09,200
wanted to learn both of those languages

00:27:07,919 --> 00:27:11,520
more thoroughly

00:27:09,200 --> 00:27:14,000
and two i did this work a little bit

00:27:11,520 --> 00:27:17,039
disparately so it wasn't like i sat down

00:27:14,000 --> 00:27:17,440
and just built this pipeline rather it

00:27:17,039 --> 00:27:20,080
was

00:27:17,440 --> 00:27:20,640
i sat down and i built update version

00:27:20,080 --> 00:27:23,120
numbers

00:27:20,640 --> 00:27:24,080
and then a few weeks later after doing

00:27:23,120 --> 00:27:26,399
some other work

00:27:24,080 --> 00:27:28,559
i had time to go in and automate the

00:27:26,399 --> 00:27:30,960
jira operations so

00:27:28,559 --> 00:27:33,039
um for that reason i kind of bounced

00:27:30,960 --> 00:27:36,399
around between bash and python

00:27:33,039 --> 00:27:38,240
as i wished so i'm going to just give

00:27:36,399 --> 00:27:40,159
you one example of each

00:27:38,240 --> 00:27:41,520
i don't want to walk you through too

00:27:40,159 --> 00:27:44,000
much code because i want to leave more

00:27:41,520 --> 00:27:46,320
time for questions but

00:27:44,000 --> 00:27:48,720
first we'll look here at semver at

00:27:46,320 --> 00:27:51,440
updating our version numbers

00:27:48,720 --> 00:27:53,520
so this is this is a bash script and the

00:27:51,440 --> 00:27:56,240
pipeline literally just runs

00:27:53,520 --> 00:27:57,679
that script from its location and says

00:27:56,240 --> 00:28:00,799
miner which is a function

00:27:57,679 --> 00:28:03,360
of how the senver package in node

00:28:00,799 --> 00:28:04,480
works or um yeah because this is a

00:28:03,360 --> 00:28:07,600
global

00:28:04,480 --> 00:28:11,039
node package so first

00:28:07,600 --> 00:28:13,679
um i get the latest prod release version

00:28:11,039 --> 00:28:15,600
so i mentioned before how one of my

00:28:13,679 --> 00:28:18,720
goals was to get rid of using

00:28:15,600 --> 00:28:21,200
a version text file well

00:28:18,720 --> 00:28:23,120
i just about two weeks ago i was able to

00:28:21,200 --> 00:28:25,279
edit this code so that i was no longer

00:28:23,120 --> 00:28:27,600
getting the version from that file

00:28:25,279 --> 00:28:28,480
we're now using git tags which are super

00:28:27,600 --> 00:28:30,399
helpful

00:28:28,480 --> 00:28:32,960
and i do a little bit of parsing to make

00:28:30,399 --> 00:28:34,640
sure i've got the latest tag and that i

00:28:32,960 --> 00:28:36,559
don't have any of the extra verbiage

00:28:34,640 --> 00:28:38,240
with it that i need

00:28:36,559 --> 00:28:40,240
you can see that here i just trim the

00:28:38,240 --> 00:28:41,840
version and get rid of

00:28:40,240 --> 00:28:44,320
the words that are ahead of it because

00:28:41,840 --> 00:28:48,159
each version was named release web dash

00:28:44,320 --> 00:28:50,720
version next i increment that version

00:28:48,159 --> 00:28:51,760
so i create a new version and if you

00:28:50,720 --> 00:28:54,000
know bash

00:28:51,760 --> 00:28:54,799
dollar sign one takes the argument that

00:28:54,000 --> 00:28:57,600
you passed in

00:28:54,799 --> 00:28:58,720
which in this case would be minor and i

00:28:57,600 --> 00:29:00,720
take the version

00:28:58,720 --> 00:29:03,200
and pass that to it as well and create

00:29:00,720 --> 00:29:05,279
the new version

00:29:03,200 --> 00:29:07,679
i then create a new tag with that

00:29:05,279 --> 00:29:07,679
version

00:29:07,760 --> 00:29:15,520
and i push the tag to the repository

00:29:13,200 --> 00:29:17,520
and that's all it took to create our

00:29:15,520 --> 00:29:20,320
update version

00:29:17,520 --> 00:29:20,320
gitlab job

00:29:20,720 --> 00:29:25,440
the next example i want to show you is

00:29:22,480 --> 00:29:26,080
how i used gitlab and python scripting

00:29:25,440 --> 00:29:29,120
to close

00:29:26,080 --> 00:29:31,039
the jira releases and this is

00:29:29,120 --> 00:29:32,799
um the name of the job's a little

00:29:31,039 --> 00:29:34,480
misleading i'm not just closing the

00:29:32,799 --> 00:29:36,320
release but i'm also closing

00:29:34,480 --> 00:29:39,039
all of the tickets that are related to

00:29:36,320 --> 00:29:41,840
that version during that testing week

00:29:39,039 --> 00:29:43,840
so again i use python and i use the jira

00:29:41,840 --> 00:29:46,399
api

00:29:43,840 --> 00:29:47,600
i start off by getting the tags the

00:29:46,399 --> 00:29:50,960
python way

00:29:47,600 --> 00:29:54,559
using a repo package

00:29:50,960 --> 00:29:56,320
and i split that version similarly as i

00:29:54,559 --> 00:29:58,880
do in bash so that i just have the

00:29:56,320 --> 00:30:00,720
version number

00:29:58,880 --> 00:30:02,080
from there i'm able to use the python

00:30:00,720 --> 00:30:04,640
requests library which

00:30:02,080 --> 00:30:05,600
works very similarly to the node request

00:30:04,640 --> 00:30:07,679
library

00:30:05,600 --> 00:30:09,440
and i do a simple get passing in the

00:30:07,679 --> 00:30:12,559
version number to jql

00:30:09,440 --> 00:30:15,360
which is the jira query language

00:30:12,559 --> 00:30:16,720
it's not ideal to have to pass in this

00:30:15,360 --> 00:30:19,679
long

00:30:16,720 --> 00:30:21,120
url encoded string but for the purposes

00:30:19,679 --> 00:30:21,760
that i need of just getting these

00:30:21,120 --> 00:30:23,360
tickets

00:30:21,760 --> 00:30:24,799
making sure i'm only getting ones that

00:30:23,360 --> 00:30:28,720
are still in progress

00:30:24,799 --> 00:30:32,320
it worked next

00:30:28,720 --> 00:30:33,440
i build a payload which tells the jira

00:30:32,320 --> 00:30:36,559
api

00:30:33,440 --> 00:30:38,960
what to do a put on when i pass in

00:30:36,559 --> 00:30:42,240
the ids of each of the issues that i've

00:30:38,960 --> 00:30:44,159
just retrieved via get

00:30:42,240 --> 00:30:46,000
and then i iterate over that list of

00:30:44,159 --> 00:30:49,120
issues and for each list

00:30:46,000 --> 00:30:51,600
in that issue i do a post request

00:30:49,120 --> 00:30:53,279
that updates that issue to a transition

00:30:51,600 --> 00:30:55,440
id of 251

00:30:53,279 --> 00:30:57,519
which i had done a query for to find

00:30:55,440 --> 00:31:00,559
that that's the jira transition

00:30:57,519 --> 00:31:00,559
id for done

00:31:02,399 --> 00:31:06,480
lastly i get what jira calls a release

00:31:05,440 --> 00:31:08,559
or a version

00:31:06,480 --> 00:31:10,159
um so before i was getting the actual

00:31:08,559 --> 00:31:12,080
version of the app

00:31:10,159 --> 00:31:13,360
in this case i'm getting the version

00:31:12,080 --> 00:31:16,000
that um

00:31:13,360 --> 00:31:16,640
as it exists in jira because jira does

00:31:16,000 --> 00:31:20,080
have

00:31:16,640 --> 00:31:21,440
a releases object that you correlate to

00:31:20,080 --> 00:31:23,840
your tickets

00:31:21,440 --> 00:31:25,840
so i get that version or i'm sorry i get

00:31:23,840 --> 00:31:27,840
all of the versions

00:31:25,840 --> 00:31:30,000
and then i use this version is current

00:31:27,840 --> 00:31:32,240
release method to filter and find

00:31:30,000 --> 00:31:34,240
the current release in jira that

00:31:32,240 --> 00:31:36,480
correlates to the current version of the

00:31:34,240 --> 00:31:36,480
app

00:31:37,919 --> 00:31:42,960
lastly i close

00:31:41,039 --> 00:31:44,720
that release and basically call it

00:31:42,960 --> 00:31:48,159
released

00:31:44,720 --> 00:31:51,760
and that's it that allows me to

00:31:48,159 --> 00:31:53,760
then have automated all of my jira um

00:31:51,760 --> 00:31:54,880
methods of that i was normally having to

00:31:53,760 --> 00:31:56,960
do manually

00:31:54,880 --> 00:32:00,000
and making it a simple gitlab job called

00:31:56,960 --> 00:32:03,600
closed your releases

00:32:00,000 --> 00:32:04,960
so how did we do um i've created a

00:32:03,600 --> 00:32:07,200
gitlab pipeline

00:32:04,960 --> 00:32:08,640
it does a lot of this work for me

00:32:07,200 --> 00:32:10,640
updating the version

00:32:08,640 --> 00:32:11,760
closing the jira releases creating

00:32:10,640 --> 00:32:13,440
tickets

00:32:11,760 --> 00:32:15,760
and it looks like i've gotten part way

00:32:13,440 --> 00:32:18,000
through my goal

00:32:15,760 --> 00:32:19,440
you can see at the bottom right corner

00:32:18,000 --> 00:32:21,840
the cut release job

00:32:19,440 --> 00:32:24,080
is red and that's because it's still a

00:32:21,840 --> 00:32:25,919
work in progress

00:32:24,080 --> 00:32:27,120
you know on one hand automating is

00:32:25,919 --> 00:32:29,039
simple and on the other

00:32:27,120 --> 00:32:30,559
every week i find wow i made an

00:32:29,039 --> 00:32:33,919
assumption there so

00:32:30,559 --> 00:32:34,880
i wanted to just be honest about that

00:32:33,919 --> 00:32:38,000
here because

00:32:34,880 --> 00:32:40,000
not everything is always perfect

00:32:38,000 --> 00:32:41,760
and lastly my goal of requiring minimal

00:32:40,000 --> 00:32:43,519
maintenance

00:32:41,760 --> 00:32:45,840
that one kind of gives me a laugh

00:32:43,519 --> 00:32:46,159
because every week i'm making some sort

00:32:45,840 --> 00:32:49,200
of

00:32:46,159 --> 00:32:50,960
small tweak to my automation scripts

00:32:49,200 --> 00:32:53,919
and they've sort of become my little

00:32:50,960 --> 00:32:57,679
baby at teamworks

00:32:53,919 --> 00:33:00,640
so how did i go about doing this well i

00:32:57,679 --> 00:33:01,440
took a giant list of to do of to do

00:33:00,640 --> 00:33:04,000
items

00:33:01,440 --> 00:33:05,200
and i used amazon lambda and serverless

00:33:04,000 --> 00:33:08,640
via gitlab

00:33:05,200 --> 00:33:11,360
um to put them in the cloud

00:33:08,640 --> 00:33:12,480
so with that thank you so much um i'm

00:33:11,360 --> 00:33:14,880
hannah joy lehmann

00:33:12,480 --> 00:33:16,399
um here's all of my info please reach

00:33:14,880 --> 00:33:19,840
out if you have any questions

00:33:16,399 --> 00:33:23,279
um if you're a junior developer find us

00:33:19,840 --> 00:33:26,960
on meetup.com and um you know thank you

00:33:23,279 --> 00:33:26,960
so much to all things open for having me

00:33:28,399 --> 00:33:33,679
awesome great presentation uh hannah

00:33:31,440 --> 00:33:34,799
like uh someone said in the chat we love

00:33:33,679 --> 00:33:37,760
talks that

00:33:34,799 --> 00:33:38,960
have real world examples so yeah super

00:33:37,760 --> 00:33:41,840
insightful

00:33:38,960 --> 00:33:43,760
um we do have about 10 minutes to go

00:33:41,840 --> 00:33:45,600
through some questions so we have five

00:33:43,760 --> 00:33:48,799
right here if you have some more

00:33:45,600 --> 00:33:49,360
uh please use the q and a uh section uh

00:33:48,799 --> 00:33:52,399
the function

00:33:49,360 --> 00:33:55,120
in zoom so let's just get started so

00:33:52,399 --> 00:33:56,159
why why did you use serverless and not a

00:33:55,120 --> 00:33:59,360
cron job

00:33:56,159 --> 00:34:01,600
by an existing ec2 instance

00:33:59,360 --> 00:34:02,960
yeah that's a great question so at

00:34:01,600 --> 00:34:05,679
teamworks we

00:34:02,960 --> 00:34:06,960
historically use a lot of ec2 instances

00:34:05,679 --> 00:34:09,520
for

00:34:06,960 --> 00:34:10,399
everything um but the thing about

00:34:09,520 --> 00:34:14,000
serverless

00:34:10,399 --> 00:34:16,560
compared to ec2 is that ec2 you pay for

00:34:14,000 --> 00:34:17,440
all the time and your so your code has

00:34:16,560 --> 00:34:20,159
to be

00:34:17,440 --> 00:34:20,800
you know living there breathing all the

00:34:20,159 --> 00:34:23,839
time

00:34:20,800 --> 00:34:24,399
but with serverless which allows me to

00:34:23,839 --> 00:34:27,679
use

00:34:24,399 --> 00:34:30,800
amazon lambda um i specifically

00:34:27,679 --> 00:34:33,200
only pay for the compute time that is

00:34:30,800 --> 00:34:34,000
occurring when my code is executed at

00:34:33,200 --> 00:34:36,720
7am

00:34:34,000 --> 00:34:36,720
and 3pm

00:34:38,240 --> 00:34:43,040
awesome um do you ever need to manage

00:34:41,520 --> 00:34:44,079
concurrent work that belongs to

00:34:43,040 --> 00:34:46,839
different releases

00:34:44,079 --> 00:34:49,359
and how do you communicate that via this

00:34:46,839 --> 00:34:53,679
tool oh that's a great question

00:34:49,359 --> 00:34:54,720
um the answer is yes i do have to manage

00:34:53,679 --> 00:34:58,079
concurrent work

00:34:54,720 --> 00:35:01,280
um but with the goal

00:34:58,079 --> 00:35:01,680
of cd in mind what what i really focused

00:35:01,280 --> 00:35:05,440
on

00:35:01,680 --> 00:35:07,760
was our production environment so

00:35:05,440 --> 00:35:09,280
i'm not using this tool to manage

00:35:07,760 --> 00:35:12,079
versions that are below

00:35:09,280 --> 00:35:13,680
production um i'm only using it to

00:35:12,079 --> 00:35:16,400
manage

00:35:13,680 --> 00:35:17,680
the jira ops of the production version

00:35:16,400 --> 00:35:20,960
and the daily announcement

00:35:17,680 --> 00:35:24,960
relating to our staging environment

00:35:20,960 --> 00:35:25,680
i'm sure it could be extended to do more

00:35:24,960 --> 00:35:28,400
of that work

00:35:25,680 --> 00:35:30,160
but i kind of got my work cut out for me

00:35:28,400 --> 00:35:33,200
when i joined and said hey let me

00:35:30,160 --> 00:35:33,200
automate all of this

00:35:34,240 --> 00:35:38,000
uh awesome yeah raising your hand yeah

00:35:36,560 --> 00:35:40,560
someone will

00:35:38,000 --> 00:35:41,680
on that offer um so another question

00:35:40,560 --> 00:35:44,320
here how do you

00:35:41,680 --> 00:35:44,880
algorithmically approach a task like

00:35:44,320 --> 00:35:47,359
this

00:35:44,880 --> 00:35:49,280
where it can quickly devolve into a half

00:35:47,359 --> 00:35:52,800
a dozen other tasks

00:35:49,280 --> 00:35:55,920
that's a great question um let's

00:35:52,800 --> 00:35:59,200
harden my dog in the background

00:35:55,920 --> 00:36:03,119
well algorithmically i think with any

00:35:59,200 --> 00:36:05,359
task that you're trying to codify

00:36:03,119 --> 00:36:06,320
it's a lot of commenting and a lot of

00:36:05,359 --> 00:36:09,200
taking notes

00:36:06,320 --> 00:36:10,480
so when i was first asked to be release

00:36:09,200 --> 00:36:13,200
manager

00:36:10,480 --> 00:36:14,320
i sat down with the previous person in

00:36:13,200 --> 00:36:17,280
that role

00:36:14,320 --> 00:36:19,440
and took copious amounts of notes and

00:36:17,280 --> 00:36:22,480
then i started to look at things and say

00:36:19,440 --> 00:36:23,920
okay what is using an api that is

00:36:22,480 --> 00:36:26,480
available to me

00:36:23,920 --> 00:36:27,839
um as i mentioned i had experience using

00:36:26,480 --> 00:36:31,520
the jira api

00:36:27,839 --> 00:36:32,720
so um as much as there were times when i

00:36:31,520 --> 00:36:36,240
wanted to just say

00:36:32,720 --> 00:36:37,119
okay go do this in the code i was really

00:36:36,240 --> 00:36:39,599
limited to

00:36:37,119 --> 00:36:40,480
what endpoints were available to me and

00:36:39,599 --> 00:36:42,560
so

00:36:40,480 --> 00:36:43,839
it was a combination of what do i want

00:36:42,560 --> 00:36:47,119
to do and then

00:36:43,839 --> 00:36:48,640
what is available to me via the api that

00:36:47,119 --> 00:36:51,760
i'm trying to use

00:36:48,640 --> 00:36:52,560
um a good example of that was the

00:36:51,760 --> 00:36:55,680
versions

00:36:52,560 --> 00:36:58,880
so jira has the versions

00:36:55,680 --> 00:37:02,240
in point which is not um

00:36:58,880 --> 00:37:04,640
verb you know it's not tied into uh

00:37:02,240 --> 00:37:05,839
versions in my app code base the same

00:37:04,640 --> 00:37:08,640
way but

00:37:05,839 --> 00:37:09,680
i had to dig into the api like a lot

00:37:08,640 --> 00:37:11,760
before i could find

00:37:09,680 --> 00:37:13,359
oh that's what i meant when it or that's

00:37:11,760 --> 00:37:15,280
what it means when i look in

00:37:13,359 --> 00:37:16,560
jira and it says releases it actually

00:37:15,280 --> 00:37:18,640
means versions

00:37:16,560 --> 00:37:23,760
so a lot of it was limited based on what

00:37:18,640 --> 00:37:26,160
i what tools i had available to me

00:37:23,760 --> 00:37:28,480
okay the next question oh sorry oh no

00:37:26,160 --> 00:37:31,520
yeah if you if you please go ahead

00:37:28,480 --> 00:37:32,079
okay um i see do you ever need to manage

00:37:31,520 --> 00:37:35,119
concur

00:37:32,079 --> 00:37:36,960
oh we answered that one let's see

00:37:35,119 --> 00:37:39,280
was this work part of your regular job

00:37:36,960 --> 00:37:42,800
activities or something extra you did

00:37:39,280 --> 00:37:45,920
oh that's a great question um this was

00:37:42,800 --> 00:37:48,560
part of my regular job activities and i

00:37:45,920 --> 00:37:51,680
have been so fortunate because

00:37:48,560 --> 00:37:54,720
when i joined sre at teamworks

00:37:51,680 --> 00:37:57,760
a lot of why i joined was out of

00:37:54,720 --> 00:37:59,920
um out of my control and based on the

00:37:57,760 --> 00:38:01,839
needs of the business which just happens

00:37:59,920 --> 00:38:03,359
um we needed to kind of shuffle

00:38:01,839 --> 00:38:05,680
engineers around and do

00:38:03,359 --> 00:38:07,280
different things but i had no site

00:38:05,680 --> 00:38:11,599
reliability experience

00:38:07,280 --> 00:38:15,280
i didn't know the darndest thing about

00:38:11,599 --> 00:38:18,240
servers and monitoring and so to me

00:38:15,280 --> 00:38:18,720
it seemed like a good foray into that

00:38:18,240 --> 00:38:21,040
work

00:38:18,720 --> 00:38:23,359
and fortunately my boss was really on

00:38:21,040 --> 00:38:25,280
board and i would say if you ever

00:38:23,359 --> 00:38:26,640
are asked to take something like this

00:38:25,280 --> 00:38:28,079
and do it at home

00:38:26,640 --> 00:38:30,160
you know if you're really passionate

00:38:28,079 --> 00:38:32,720
about it go automate something you want

00:38:30,160 --> 00:38:35,440
to automate for your own life

00:38:32,720 --> 00:38:36,480
but if you're if your higher ups are

00:38:35,440 --> 00:38:39,599
asking you to automate

00:38:36,480 --> 00:38:41,119
work from home um you know

00:38:39,599 --> 00:38:43,359
some other things need to be taken into

00:38:41,119 --> 00:38:46,240
consideration there

00:38:43,359 --> 00:38:46,800
okay the question next is is your

00:38:46,240 --> 00:38:48,480
project

00:38:46,800 --> 00:38:50,480
public i'd love to be able to dig into

00:38:48,480 --> 00:38:51,440
this more as a solution for issues i

00:38:50,480 --> 00:38:54,560
have

00:38:51,440 --> 00:38:57,760
um it's not public but i

00:38:54,560 --> 00:39:00,079
will um talk to my boss about

00:38:57,760 --> 00:39:01,200
putting it on a public repo because

00:39:00,079 --> 00:39:03,599
currently it's it's

00:39:01,200 --> 00:39:04,320
withheld uh within our private teamworks

00:39:03,599 --> 00:39:05,920
repo

00:39:04,320 --> 00:39:07,599
but if there's any part of it that i can

00:39:05,920 --> 00:39:11,280
put on my private github

00:39:07,599 --> 00:39:12,640
i will and if i do that then i'll post

00:39:11,280 --> 00:39:16,800
it via linkedin

00:39:12,640 --> 00:39:19,200
so you can have access to it okay

00:39:16,800 --> 00:39:20,079
where are the get lab pipelines actually

00:39:19,200 --> 00:39:23,680
running

00:39:20,079 --> 00:39:26,640
serverless or an ec2 worker instance um

00:39:23,680 --> 00:39:28,240
that's a great question as well so the

00:39:26,640 --> 00:39:30,960
gitlab pipelines are running

00:39:28,240 --> 00:39:33,200
on what's called a gitlab runner and i

00:39:30,960 --> 00:39:35,359
believe those are

00:39:33,200 --> 00:39:36,960
in kubernetes but we don't actually

00:39:35,359 --> 00:39:39,119
manage that

00:39:36,960 --> 00:39:41,680
there are configurations of git lab that

00:39:39,119 --> 00:39:43,359
you can manage yourself

00:39:41,680 --> 00:39:45,680
but ours are running through on the

00:39:43,359 --> 00:39:48,800
gitlab runner which is

00:39:45,680 --> 00:39:52,720
running via kubernetes which is not

00:39:48,800 --> 00:39:56,320
serverless or ec2 necessarily

00:39:52,720 --> 00:39:58,160
we do have eks which is

00:39:56,320 --> 00:39:59,599
uh i believe it's elastic kubernetes

00:39:58,160 --> 00:40:03,760
service in aws

00:39:59,599 --> 00:40:07,920
which allows us to um you know at least

00:40:03,760 --> 00:40:11,839
have an eye on the um eks instance that

00:40:07,920 --> 00:40:11,839
is running our gitlab runner

00:40:12,880 --> 00:40:16,800
since you mentioned you have kubernetes

00:40:14,640 --> 00:40:19,920
why not using it instead of serverless

00:40:16,800 --> 00:40:23,440
okay that's a great question as well so

00:40:19,920 --> 00:40:27,200
a lot of this work started back in

00:40:23,440 --> 00:40:28,079
january and just for i guess context we

00:40:27,200 --> 00:40:30,880
just started

00:40:28,079 --> 00:40:31,760
moving our services over to kubernetes

00:40:30,880 --> 00:40:35,200
um

00:40:31,760 --> 00:40:38,319
as early as maybe july i want to say

00:40:35,200 --> 00:40:40,560
um so that's the main reason

00:40:38,319 --> 00:40:42,079
you know i would love to containerize

00:40:40,560 --> 00:40:45,359
this work and get it

00:40:42,079 --> 00:40:46,079
you know just totally um scaled and

00:40:45,359 --> 00:40:49,359
everything

00:40:46,079 --> 00:40:53,839
on its own through kubernetes but um

00:40:49,359 --> 00:40:53,839
we're just not there yet

00:40:54,960 --> 00:40:58,640
awesome so those are all the questions

00:40:57,520 --> 00:41:00,480
in the q a

00:40:58,640 --> 00:41:03,200
board if anyone else has anything by all

00:41:00,480 --> 00:41:06,560
means post that there

00:41:03,200 --> 00:41:08,160
but i see a bunch of comments in the

00:41:06,560 --> 00:41:10,319
chat let me see if there are questions

00:41:08,160 --> 00:41:12,560
hiding in there

00:41:10,319 --> 00:41:12,560
um

00:41:13,760 --> 00:41:16,240
let's see

00:41:16,880 --> 00:41:20,000
well thank you for all the support

00:41:18,960 --> 00:41:23,359
everyone you guys

00:41:20,000 --> 00:41:26,800
are awesome um

00:41:23,359 --> 00:41:28,319
miss all of y'all i feel like i'm on a

00:41:26,800 --> 00:41:31,520
podcast

00:41:28,319 --> 00:41:35,839
um let's see there's got to be a

00:41:31,520 --> 00:41:35,839
question in here somewhere

00:41:38,319 --> 00:41:43,440
all right i do see a comment i'll

00:41:41,280 --> 00:41:46,319
mention a couple of these

00:41:43,440 --> 00:41:48,400
uh if you're in aws and python trying to

00:41:46,319 --> 00:41:49,520
do server list and check out amazon's

00:41:48,400 --> 00:41:51,680
chalice

00:41:49,520 --> 00:41:53,040
um i don't know why aws doesn't

00:41:51,680 --> 00:41:54,560
publicize this more but it makes

00:41:53,040 --> 00:41:56,400
everything super simple

00:41:54,560 --> 00:41:58,079
awesome think of it as serverless and

00:41:56,400 --> 00:41:59,359
flash together where the application

00:41:58,079 --> 00:42:03,040
defines the stack

00:41:59,359 --> 00:42:04,720
cool thank you gabriel um

00:42:03,040 --> 00:42:06,319
shout out to my letter kenny gif i

00:42:04,720 --> 00:42:08,640
appreciate that

00:42:06,319 --> 00:42:10,319
let's see firebase cloud functions has a

00:42:08,640 --> 00:42:13,520
pretty cool version of this as well

00:42:10,319 --> 00:42:16,880
if anyone is interested in aws or azure

00:42:13,520 --> 00:42:17,599
alternatives totally agree i've also

00:42:16,880 --> 00:42:19,680
heard

00:42:17,599 --> 00:42:21,200
google cloud functions operate very

00:42:19,680 --> 00:42:23,119
similarly

00:42:21,200 --> 00:42:24,800
i used aws because that's what i was

00:42:23,119 --> 00:42:25,280
initially pointed to and that's what we

00:42:24,800 --> 00:42:28,319
already

00:42:25,280 --> 00:42:29,760
use as a company

00:42:28,319 --> 00:42:33,119
but there are definitely a lot of

00:42:29,760 --> 00:42:37,119
similar but different ways you can

00:42:33,119 --> 00:42:38,640
do this work cool

00:42:37,119 --> 00:42:40,560
all right three minutes left i know

00:42:38,640 --> 00:42:42,960
someone has a question and don't forget

00:42:40,560 --> 00:42:46,240
you can ask anonymously if you'd like to

00:42:42,960 --> 00:42:46,240
so no pressure there

00:42:57,200 --> 00:43:00,400
all right maybe while we wait i can uh

00:42:58,880 --> 00:43:01,359
kind of give my uh kind of post

00:43:00,400 --> 00:43:04,160
presentation

00:43:01,359 --> 00:43:05,760
uh spill but again hannah thanks so much

00:43:04,160 --> 00:43:06,560
for this presentation and thank you all

00:43:05,760 --> 00:43:09,280
for the great

00:43:06,560 --> 00:43:11,520
engagement and questions um if you

00:43:09,280 --> 00:43:13,280
enjoyed this presentation and others

00:43:11,520 --> 00:43:15,200
that you see today in this track please

00:43:13,280 --> 00:43:16,720
keep in mind that the individual devops

00:43:15,200 --> 00:43:18,480
ace rally event is coming to the

00:43:16,720 --> 00:43:21,359
mckinnon center in brawley

00:43:18,480 --> 00:43:22,160
um and we'll be back april 8th i

00:43:21,359 --> 00:43:23,760
definitely want to

00:43:22,160 --> 00:43:25,520
connect with hannah with you on your

00:43:23,760 --> 00:43:26,000
meetup hope maybe we can get that

00:43:25,520 --> 00:43:28,160
involved

00:43:26,000 --> 00:43:29,520
somehow um so finally the next

00:43:28,160 --> 00:43:30,560
presentation in this room will be

00:43:29,520 --> 00:43:32,240
unlocked

00:43:30,560 --> 00:43:33,760
teams with open source with tracy

00:43:32,240 --> 00:43:35,839
miranda so thank you again

00:43:33,760 --> 00:43:38,560
for everyone for joining and thank you

00:43:35,839 --> 00:43:39,440
so much um and per request i am posting

00:43:38,560 --> 00:43:42,640
my twitter

00:43:39,440 --> 00:43:45,040
and linkedin

00:43:42,640 --> 00:43:45,680
right now as well i think those can also

00:43:45,040 --> 00:43:50,720
be found

00:43:45,680 --> 00:43:50,720
on the all things open website

00:43:51,280 --> 00:43:59,440
and my github user is github.com

00:43:56,319 --> 00:44:02,480
hanna lehman and

00:43:59,440 --> 00:44:04,640
um the meetup is again the triangle

00:44:02,480 --> 00:44:06,720
adult junior developers

00:44:04,640 --> 00:44:08,480
as i said we're having our third

00:44:06,720 --> 00:44:09,680
anniversary this month so would love

00:44:08,480 --> 00:44:12,240
some support

00:44:09,680 --> 00:44:13,760
um throwing our first national meet up

00:44:12,240 --> 00:44:22,240
which will be the second wednesday of

00:44:13,760 --> 00:44:24,319
next month as well

00:44:22,240 --> 00:44:25,920
cool there is one last question what are

00:44:24,319 --> 00:44:27,920
you automating next

00:44:25,920 --> 00:44:30,400
well hopefully next year i won't have a

00:44:27,920 --> 00:44:32,319
red bubble next to release cut

00:44:30,400 --> 00:44:34,000
i really would like to get that figured

00:44:32,319 --> 00:44:36,000
out so that

00:44:34,000 --> 00:44:37,119
not only the release cut which is the

00:44:36,000 --> 00:44:39,200
merge itself

00:44:37,119 --> 00:44:40,720
but the deploy of that to our staging

00:44:39,200 --> 00:44:43,119
environment can be

00:44:40,720 --> 00:44:45,119
completely automated so that monday

00:44:43,119 --> 00:44:51,359
mornings our qa team can wake up and

00:44:45,119 --> 00:44:55,359
have that ready to go

00:44:51,359 --> 00:45:04,560
awesome thank you all so much i really

00:44:55,359 --> 00:45:04,560

YouTube URL: https://www.youtube.com/watch?v=g3fRqFIEFGc


