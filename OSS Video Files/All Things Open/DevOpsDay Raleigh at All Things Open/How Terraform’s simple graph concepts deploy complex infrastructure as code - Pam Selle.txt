Title: How Terraform’s simple graph concepts deploy complex infrastructure as code - Pam Selle
Publication date: 2020-12-03
Playlist: DevOpsDay Raleigh at All Things Open
Description: 
	Presented by: Pam Selle, HashiCorp
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: Terraform is an open source tool that allows you to define your infrastructure-as-code, and when you "apply" your configuration, your resources get made in the right order, but how? Graph theory! In this talk, we’ll go from assuming no knowledge of Terraform or graph theory to looking at how Terraform does what it does … and where it uses graph theory to ensure things happen when they are supposed to. We’ll even take a small, guided journey of Terraform’s source code and what paths it takes to load the config, build the graph, and how it walks that graph to turn it into real infrastructure. You will walk away not only understanding the basics of a really powerful tool but also seeing some of the awesome magic that makes it work!
Captions: 
	00:00:04,960 --> 00:00:06,640
hi

00:00:05,359 --> 00:00:08,960
thanks for the intro and thanks for

00:00:06,640 --> 00:00:11,440
moderating um it takes a lot of

00:00:08,960 --> 00:00:12,320
i mean in-person conferences are a lot

00:00:11,440 --> 00:00:14,320
of work but

00:00:12,320 --> 00:00:16,400
remote conferences especially for so

00:00:14,320 --> 00:00:18,080
many of us are very new uh

00:00:16,400 --> 00:00:19,680
and so i just really appreciate all the

00:00:18,080 --> 00:00:22,400
work you all are doing uh

00:00:19,680 --> 00:00:23,680
and it's it's a lot of work so um

00:00:22,400 --> 00:00:25,039
attendees i hope you are

00:00:23,680 --> 00:00:26,800
enjoying it and appreciative of the work

00:00:25,039 --> 00:00:29,199
that goes into this uh

00:00:26,800 --> 00:00:29,920
so i'm gonna get started with how

00:00:29,199 --> 00:00:31,840
terraform's

00:00:29,920 --> 00:00:33,680
simple graph concepts deploy complex

00:00:31,840 --> 00:00:36,399
infrastructure as code

00:00:33,680 --> 00:00:37,040
and let's see make sure yes all the

00:00:36,399 --> 00:00:40,079
things are

00:00:37,040 --> 00:00:41,760
wired uh so my name is pam sully i'm a

00:00:40,079 --> 00:00:43,200
senior software engineer at hashicorp i

00:00:41,760 --> 00:00:45,920
work on the terraform core team

00:00:43,200 --> 00:00:46,800
so i work on the terraform open source

00:00:45,920 --> 00:00:49,920
project

00:00:46,800 --> 00:00:51,440
and uh outside i live in philadelphia

00:00:49,920 --> 00:00:53,840
pennsylvania in the u.s

00:00:51,440 --> 00:00:54,559
and outside of programming at hashicorp

00:00:53,840 --> 00:00:57,520
i also

00:00:54,559 --> 00:00:58,160
make music using programming through

00:00:57,520 --> 00:01:00,160
what's a

00:00:58,160 --> 00:01:02,879
method known as live code uh all my

00:01:00,160 --> 00:01:06,560
music's online at beats.theweboo.com

00:01:02,879 --> 00:01:08,240
i write on thewebaboard.com is my blog

00:01:06,560 --> 00:01:09,840
and if you would like to mention this

00:01:08,240 --> 00:01:12,640
talk uh or

00:01:09,840 --> 00:01:14,000
keep track of me on twitter my handle is

00:01:12,640 --> 00:01:15,439
at pamasaur

00:01:14,000 --> 00:01:18,240
there's a whole dinosaur theme with

00:01:15,439 --> 00:01:20,080
panasor the web before

00:01:18,240 --> 00:01:21,600
and what we're going to do today is

00:01:20,080 --> 00:01:23,759
we're going to go on a behind-the-scenes

00:01:21,600 --> 00:01:24,799
tour of terraform so this is the devops

00:01:23,759 --> 00:01:26,240
track so you might

00:01:24,799 --> 00:01:28,560
already be familiar with terraform but i

00:01:26,240 --> 00:01:31,200
wanted to keep this really accessible

00:01:28,560 --> 00:01:32,720
and so i'm going to actually go over

00:01:31,200 --> 00:01:34,320
some terraform concepts

00:01:32,720 --> 00:01:36,640
at the beginning which will also help us

00:01:34,320 --> 00:01:37,759
for the bulk of this is going to be a

00:01:36,640 --> 00:01:40,880
source code tour

00:01:37,759 --> 00:01:41,840
and so i'm going to go well actually my

00:01:40,880 --> 00:01:43,360
colleague pam

00:01:41,840 --> 00:01:45,200
has gone through the source code and so

00:01:43,360 --> 00:01:46,479
i'll show a video of going through that

00:01:45,200 --> 00:01:49,759
source code and then i'll be

00:01:46,479 --> 00:01:52,000
right here in the chat uh to it for

00:01:49,759 --> 00:01:53,119
any questions as that source code tour

00:01:52,000 --> 00:01:55,200
goes along

00:01:53,119 --> 00:01:56,320
and um so we'll talk about what

00:01:55,200 --> 00:01:59,600
terraform does

00:01:56,320 --> 00:02:01,360
uh and how it works and

00:01:59,600 --> 00:02:03,119
where in that source code tour we'll

00:02:01,360 --> 00:02:05,200
encounter the graph theory

00:02:03,119 --> 00:02:07,600
that is the core computing concept that

00:02:05,200 --> 00:02:10,160
allows terraform to do what it does

00:02:07,600 --> 00:02:11,280
so terraform is an open source cli tool

00:02:10,160 --> 00:02:13,120
that allows you to define your

00:02:11,280 --> 00:02:16,480
infrastructure as code

00:02:13,120 --> 00:02:18,800
and you use a

00:02:16,480 --> 00:02:19,840
simple human readable language called

00:02:18,800 --> 00:02:22,239
hcl

00:02:19,840 --> 00:02:23,680
uh hashicorp configuration language uh

00:02:22,239 --> 00:02:25,440
and that allows you to write a

00:02:23,680 --> 00:02:27,520
configuration file that then expresses

00:02:25,440 --> 00:02:29,760
your infrastructure

00:02:27,520 --> 00:02:31,519
quick reminder on infrastructure as code

00:02:29,760 --> 00:02:34,480
being the idea that

00:02:31,519 --> 00:02:35,840
before infrastructure is code you or

00:02:34,480 --> 00:02:36,480
even if you don't use infrastructure as

00:02:35,840 --> 00:02:38,319
code you

00:02:36,480 --> 00:02:40,000
artisanally configure your environment

00:02:38,319 --> 00:02:41,599
you log in and especially in the cloud

00:02:40,000 --> 00:02:42,480
oriented world you're logging into these

00:02:41,599 --> 00:02:45,599
consoles

00:02:42,480 --> 00:02:48,480
or maybe you use aws cli

00:02:45,599 --> 00:02:50,160
to spin up infrastructure uh in the

00:02:48,480 --> 00:02:50,959
infrastructures code world the idea is

00:02:50,160 --> 00:02:52,480
that instead of

00:02:50,959 --> 00:02:54,080
doing all that manual configuration

00:02:52,480 --> 00:02:57,360
which can be very brittle and

00:02:54,080 --> 00:03:00,640
keep knowledge in silos is that you have

00:02:57,360 --> 00:03:01,680
a configuration that you can then share

00:03:00,640 --> 00:03:04,000
and version

00:03:01,680 --> 00:03:06,800
and have a reproducible understanding of

00:03:04,000 --> 00:03:06,800
your infrastructure

00:03:07,040 --> 00:03:10,720
and from a diagram view so this is off

00:03:09,120 --> 00:03:12,959
of the terraform website

00:03:10,720 --> 00:03:15,120
is that if you are the practitioner you

00:03:12,959 --> 00:03:17,920
write infrastructure as code which may

00:03:15,120 --> 00:03:18,560
use public modules and i'll get to

00:03:17,920 --> 00:03:20,560
modules

00:03:18,560 --> 00:03:21,840
and then you run the terraform plan or

00:03:20,560 --> 00:03:24,080
apply commands

00:03:21,840 --> 00:03:25,440
and those interact with providers that's

00:03:24,080 --> 00:03:26,159
that little logo wall there at the

00:03:25,440 --> 00:03:29,120
bottom

00:03:26,159 --> 00:03:29,599
and those uh by that interaction will

00:03:29,120 --> 00:03:32,879
create

00:03:29,599 --> 00:03:35,680
real world infrastructure

00:03:32,879 --> 00:03:36,560
but how does it work and the answer at

00:03:35,680 --> 00:03:38,080
its core

00:03:36,560 --> 00:03:42,239
the core computing concept that makes

00:03:38,080 --> 00:03:42,239
the whole thing work is graph theory

00:03:42,480 --> 00:03:46,560
and so before the source code tour and

00:03:44,720 --> 00:03:48,000
the great reveal graph theory

00:03:46,560 --> 00:03:49,280
i'm going to go over some terraform

00:03:48,000 --> 00:03:50,239
concepts that will be helpful for us to

00:03:49,280 --> 00:03:52,239
understand

00:03:50,239 --> 00:03:53,840
we'll see these along the way points as

00:03:52,239 --> 00:03:57,360
we go through the source code

00:03:53,840 --> 00:03:58,720
so first of all being the configuration

00:03:57,360 --> 00:04:01,680
files the hcl

00:03:58,720 --> 00:04:02,640
dot terraform files this is the basic

00:04:01,680 --> 00:04:06,159
shape of a

00:04:02,640 --> 00:04:08,000
terraform file we have a

00:04:06,159 --> 00:04:10,480
i wonder if my i don't know if the

00:04:08,000 --> 00:04:12,000
pointer will work but um so we have the

00:04:10,480 --> 00:04:14,319
resource

00:04:12,000 --> 00:04:16,000
keyword and we have a type of awss three

00:04:14,319 --> 00:04:17,040
bucket we gave it a name of foo and then

00:04:16,000 --> 00:04:20,239
we have

00:04:17,040 --> 00:04:21,600
attributes or arguments uh that are

00:04:20,239 --> 00:04:24,400
uh thank you for confirming that it's

00:04:21,600 --> 00:04:26,840
working uh that the

00:04:24,400 --> 00:04:29,520
that we pass through and these will be

00:04:26,840 --> 00:04:33,120
determined by

00:04:29,520 --> 00:04:35,919
the provider which are the plugins that

00:04:33,120 --> 00:04:37,040
define the shape of those resources or

00:04:35,919 --> 00:04:40,320
data sources

00:04:37,040 --> 00:04:41,280
and define how that communication

00:04:40,320 --> 00:04:43,520
happens to make

00:04:41,280 --> 00:04:45,520
them exist in the real world and so

00:04:43,520 --> 00:04:47,199
declaring a provider

00:04:45,520 --> 00:04:48,720
we have provider blocks and then the

00:04:47,199 --> 00:04:51,919
required providers

00:04:48,720 --> 00:04:52,720
is where you declare at a a full project

00:04:51,919 --> 00:04:54,800
level of what

00:04:52,720 --> 00:04:56,960
the versions of your providers are so

00:04:54,800 --> 00:05:00,080
that you can make sure that those

00:04:56,960 --> 00:05:01,759
no surprise changing your versions and

00:05:00,080 --> 00:05:03,600
providers are responsible for api

00:05:01,759 --> 00:05:06,000
interactions and exposing resources to

00:05:03,600 --> 00:05:08,160
be used in the configuration

00:05:06,000 --> 00:05:09,199
many of providers correspond to cloud

00:05:08,160 --> 00:05:12,479
providers

00:05:09,199 --> 00:05:14,560
but it's not limited to that and

00:05:12,479 --> 00:05:15,680
what actually what happens is the

00:05:14,560 --> 00:05:18,000
provider is

00:05:15,680 --> 00:05:19,199
a plug-in that interacts with core so

00:05:18,000 --> 00:05:20,560
when i talk about terraform core which

00:05:19,199 --> 00:05:21,759
is what i work on and the source code

00:05:20,560 --> 00:05:24,880
that we're going to look at

00:05:21,759 --> 00:05:27,199
that's the project that reads the

00:05:24,880 --> 00:05:29,520
configuration and then communicates with

00:05:27,199 --> 00:05:31,280
these providers over a plug-in protocol

00:05:29,520 --> 00:05:32,880
and then the provider is responsible for

00:05:31,280 --> 00:05:35,759
managing the relationship

00:05:32,880 --> 00:05:37,280
with whatever it's real-world real-world

00:05:35,759 --> 00:05:41,120
representation is

00:05:37,280 --> 00:05:42,880
and so that's what i mean when we say

00:05:41,120 --> 00:05:44,320
like there are things that providers do

00:05:42,880 --> 00:05:44,960
and then things that terraform core does

00:05:44,320 --> 00:05:46,720
and

00:05:44,960 --> 00:05:49,600
a lot of things are in the provider

00:05:46,720 --> 00:05:51,520
domain especially since terraform 013

00:05:49,600 --> 00:05:54,080
came out earlier in 2020

00:05:51,520 --> 00:05:57,039
that publishing and using community

00:05:54,080 --> 00:05:58,720
providers got so much easier

00:05:57,039 --> 00:06:00,560
due to some upgrades in terraform core

00:05:58,720 --> 00:06:03,360
and how we understand providers and

00:06:00,560 --> 00:06:04,960
some upgrades on the improvements and

00:06:03,360 --> 00:06:08,560
enhancements on the terraform registry

00:06:04,960 --> 00:06:10,960
side at registry.terraform.io

00:06:08,560 --> 00:06:12,160
so providers just to emphasize that

00:06:10,960 --> 00:06:12,880
terraform does not exist without

00:06:12,160 --> 00:06:15,919
providers

00:06:12,880 --> 00:06:18,479
and they're extremely useful and they're

00:06:15,919 --> 00:06:18,479
really great

00:06:18,880 --> 00:06:24,639
and now so back to configuration

00:06:22,160 --> 00:06:26,000
some more configuration concepts uh

00:06:24,639 --> 00:06:27,440
named variables there are a few

00:06:26,000 --> 00:06:30,160
different kinds of names

00:06:27,440 --> 00:06:31,520
named values is that we have variables

00:06:30,160 --> 00:06:34,160
locals and outputs

00:06:31,520 --> 00:06:35,680
if we gave this as an analogy if you're

00:06:34,160 --> 00:06:37,680
if you're familiar with programming

00:06:35,680 --> 00:06:38,880
this would be an input variable is like

00:06:37,680 --> 00:06:41,840
a function argument so

00:06:38,880 --> 00:06:43,840
into a module which is the next topic uh

00:06:41,840 --> 00:06:45,600
output values are like return values so

00:06:43,840 --> 00:06:48,240
the return values of a module

00:06:45,600 --> 00:06:49,440
and then local values local very are

00:06:48,240 --> 00:06:51,680
like the

00:06:49,440 --> 00:06:52,960
temporary local variables so if you need

00:06:51,680 --> 00:06:56,160
to in this

00:06:52,960 --> 00:06:57,680
example we have an expression

00:06:56,160 --> 00:06:59,440
so using a function so we call it an

00:06:57,680 --> 00:07:02,960
expression that

00:06:59,440 --> 00:07:05,440
changes the variable to a capitalized

00:07:02,960 --> 00:07:06,080
value and then we use that in an output

00:07:05,440 --> 00:07:09,280
just a

00:07:06,080 --> 00:07:11,680
simple triple example

00:07:09,280 --> 00:07:13,280
and so we talked about those inputs and

00:07:11,680 --> 00:07:14,960
outputs from modules so what are modules

00:07:13,280 --> 00:07:16,479
modules are groups of

00:07:14,960 --> 00:07:18,160
groups of configuration terraform is

00:07:16,479 --> 00:07:19,599
made up of modules

00:07:18,160 --> 00:07:21,840
every terraform configuration has at

00:07:19,599 --> 00:07:24,800
least zero or one modules

00:07:21,840 --> 00:07:26,639
so even if you don't have any anything

00:07:24,800 --> 00:07:28,000
in your config that has the word module

00:07:26,639 --> 00:07:29,599
in it you have a terraform module

00:07:28,000 --> 00:07:30,560
because that itself is a terraform

00:07:29,599 --> 00:07:34,319
module

00:07:30,560 --> 00:07:35,680
and and also that a terraform module can

00:07:34,319 --> 00:07:36,720
be made up of multiple files so if

00:07:35,680 --> 00:07:38,240
they're in the same directory they're

00:07:36,720 --> 00:07:41,360
part of the same module

00:07:38,240 --> 00:07:44,479
um so this example

00:07:41,360 --> 00:07:46,400
we have a just a single module

00:07:44,479 --> 00:07:48,400
where we have a resource and the

00:07:46,400 --> 00:07:51,440
resources refer to each other so

00:07:48,400 --> 00:07:53,759
we create the network and the compute

00:07:51,440 --> 00:07:57,120
instance has a network that references

00:07:53,759 --> 00:07:59,759
that network so we have a module

00:07:57,120 --> 00:08:01,280
with resources and relationships in this

00:07:59,759 --> 00:08:04,319
example we have

00:08:01,280 --> 00:08:07,599
a module that has a module call

00:08:04,319 --> 00:08:09,680
so this here is called is a module call

00:08:07,599 --> 00:08:11,039
and so we have the module keyword oops

00:08:09,680 --> 00:08:14,720
and the

00:08:11,039 --> 00:08:17,199
name of foo and

00:08:14,720 --> 00:08:17,919
in that case we have an output here and

00:08:17,199 --> 00:08:20,960
this is how

00:08:17,919 --> 00:08:22,560
this module exposes information to a

00:08:20,960 --> 00:08:26,160
consumer of the module

00:08:22,560 --> 00:08:28,479
and so it has so we reference it by

00:08:26,160 --> 00:08:29,759
this name and referencing the output

00:08:28,479 --> 00:08:32,479
name over here so

00:08:29,759 --> 00:08:32,479
named values

00:08:34,320 --> 00:08:37,680
and statement backend so how terraform

00:08:36,479 --> 00:08:40,560
understands

00:08:37,680 --> 00:08:42,240
what the dip like where your

00:08:40,560 --> 00:08:43,279
configuration has been applied and what

00:08:42,240 --> 00:08:44,640
exists in the real world that's

00:08:43,279 --> 00:08:46,640
terraform state

00:08:44,640 --> 00:08:48,160
uh there's a whole document if you're

00:08:46,640 --> 00:08:48,640
curious about why is terraform needs

00:08:48,160 --> 00:08:50,800
state

00:08:48,640 --> 00:08:52,320
there's a whole document about that um

00:08:50,800 --> 00:08:54,959
but that's an important

00:08:52,320 --> 00:08:56,720
file to know exist and back ends

00:08:54,959 --> 00:08:58,480
determine where the state is stored and

00:08:56,720 --> 00:09:01,120
where operations run

00:08:58,480 --> 00:09:02,880
so for example if i am working with

00:09:01,120 --> 00:09:04,320
someone else and we have a

00:09:02,880 --> 00:09:05,920
terraform state that we're both

00:09:04,320 --> 00:09:07,440
collaborating on because we both work on

00:09:05,920 --> 00:09:10,800
the same infrastructure

00:09:07,440 --> 00:09:13,839
then if i so we have we put

00:09:10,800 --> 00:09:17,440
in a remote state storage back end

00:09:13,839 --> 00:09:19,519
and then that way when say i run

00:09:17,440 --> 00:09:21,200
terraform and i interact with the state

00:09:19,519 --> 00:09:23,440
then the other person

00:09:21,200 --> 00:09:25,440
on my team there will be a lock so that

00:09:23,440 --> 00:09:28,800
they can't interact with state and

00:09:25,440 --> 00:09:29,680
have bad things happen um by applying

00:09:28,800 --> 00:09:33,200
more than one thing

00:09:29,680 --> 00:09:35,120
at once and so remote state helps us do

00:09:33,200 --> 00:09:36,800
collaboration it also determines where

00:09:35,120 --> 00:09:39,519
operations run

00:09:36,800 --> 00:09:39,920
so uh we'll see this in the source code

00:09:39,519 --> 00:09:41,360
um

00:09:39,920 --> 00:09:44,160
but this is the concept that exists in

00:09:41,360 --> 00:09:46,800
terraform currently that might change

00:09:44,160 --> 00:09:48,720
that remote state and where your state

00:09:46,800 --> 00:09:49,120
is stored and where your operation runs

00:09:48,720 --> 00:09:52,160
is

00:09:49,120 --> 00:09:52,160
what a back end is

00:09:52,320 --> 00:09:55,600
some terraform commands there are lots

00:09:54,080 --> 00:09:57,360
of share form commands but some of the

00:09:55,600 --> 00:09:59,279
main ones that we're going to focus on

00:09:57,360 --> 00:10:00,560
are terraform init terraform plan and

00:09:59,279 --> 00:10:03,040
terraform apply

00:10:00,560 --> 00:10:04,640
so init downloads any modules because

00:10:03,040 --> 00:10:06,720
you might use a module from the registry

00:10:04,640 --> 00:10:09,120
or from a github reference

00:10:06,720 --> 00:10:10,720
and so that will do all the downloading

00:10:09,120 --> 00:10:12,880
and installation and get that

00:10:10,720 --> 00:10:14,480
in the right place terraform plan is

00:10:12,880 --> 00:10:14,959
what do we plan to build and terraform

00:10:14,480 --> 00:10:17,040
apply

00:10:14,959 --> 00:10:18,000
is running a plan and then giving you

00:10:17,040 --> 00:10:20,320
the option to do

00:10:18,000 --> 00:10:22,000
it which will always have a confirmation

00:10:20,320 --> 00:10:25,440
step

00:10:22,000 --> 00:10:28,560
um there's so much more there's so so so

00:10:25,440 --> 00:10:30,480
so much more and some of the

00:10:28,560 --> 00:10:32,320
places you could go to learn more about

00:10:30,480 --> 00:10:33,839
the core concepts of terraform would be

00:10:32,320 --> 00:10:36,079
the configuration docs

00:10:33,839 --> 00:10:37,920
the command docs and i would say check

00:10:36,079 --> 00:10:41,040
out the terraform registry for

00:10:37,920 --> 00:10:43,519
both providers and modules

00:10:41,040 --> 00:10:45,279
and with that i'm going to hand it off

00:10:43,519 --> 00:10:49,600
to my colleague pam

00:10:45,279 --> 00:10:51,839
who has a the code tour

00:10:49,600 --> 00:10:51,839
so

00:10:55,120 --> 00:10:58,160
and then once this is going i'm going to

00:10:56,959 --> 00:11:01,440
mute my video

00:10:58,160 --> 00:11:03,519
or my current time video

00:11:01,440 --> 00:11:05,600
uh and then i'll be in the chat to

00:11:03,519 --> 00:11:08,480
answer questions

00:11:05,600 --> 00:11:15,839
and i think i did not i need to make

00:11:08,480 --> 00:11:15,839
sure i share sound

00:11:16,160 --> 00:11:20,640
thanks pam okay sound working check

00:11:21,040 --> 00:11:24,720
just gonna wait for that confirmation

00:11:22,560 --> 00:11:28,000
thank you cool

00:11:24,720 --> 00:11:31,680
i'm going to hide and hand it off to my

00:11:28,000 --> 00:11:31,680
uh to the other pan

00:11:32,480 --> 00:11:36,959
thanks pam i'm pam and i'm going to be

00:11:34,880 --> 00:11:40,839
taking this on our code tour today

00:11:36,959 --> 00:11:43,839
so before we start though let me check

00:11:40,839 --> 00:11:43,839
something

00:11:43,920 --> 00:11:47,519
okay it appears that the bubble is

00:11:46,560 --> 00:11:49,680
secure

00:11:47,519 --> 00:11:51,519
and we can go ahead and do the source

00:11:49,680 --> 00:11:53,360
code tour so

00:11:51,519 --> 00:11:55,600
however before we go on source for two i

00:11:53,360 --> 00:11:59,200
did want to show you one more thing

00:11:55,600 --> 00:12:01,760
so i have a terraform

00:11:59,200 --> 00:12:02,880
configuration file here so this main dot

00:12:01,760 --> 00:12:06,320
tf

00:12:02,880 --> 00:12:07,600
i'm gonna show you what it says it has a

00:12:06,320 --> 00:12:10,320
declaration of a resource

00:12:07,600 --> 00:12:11,040
called that of type random pet called a

00:12:10,320 --> 00:12:13,440
foo

00:12:11,040 --> 00:12:14,959
and it has a some arguments that are

00:12:13,440 --> 00:12:16,480
going to impact how this resource is

00:12:14,959 --> 00:12:18,720
made

00:12:16,480 --> 00:12:20,880
and i'm going to run terraform init

00:12:18,720 --> 00:12:23,920
first to go get my provider

00:12:20,880 --> 00:12:25,120
and so that gets my my random provider

00:12:23,920 --> 00:12:29,920
plugin

00:12:25,120 --> 00:12:33,519
and i am going to run a terraform plan

00:12:29,920 --> 00:12:35,600
which tells me what would happen if i

00:12:33,519 --> 00:12:39,360
apply this configuration

00:12:35,600 --> 00:12:41,120
and i'm going to run a terraform apply

00:12:39,360 --> 00:12:42,480
and that runs the plan and then also

00:12:41,120 --> 00:12:43,440
asks if that's something that i want to

00:12:42,480 --> 00:12:46,639
do

00:12:43,440 --> 00:12:49,920
i say yes it is and now

00:12:46,639 --> 00:12:53,360
if i run terraform show to show

00:12:49,920 --> 00:12:54,800
what i have in state then i see that i

00:12:53,360 --> 00:12:59,040
have the random pet

00:12:54,800 --> 00:13:01,760
so this is important so that we can see

00:12:59,040 --> 00:13:02,639
some waypoints for what we're going to

00:13:01,760 --> 00:13:06,079
look at so

00:13:02,639 --> 00:13:08,079
in this dive we're going to go through

00:13:06,079 --> 00:13:09,279
from how we enter into the terraform

00:13:08,079 --> 00:13:13,040
program through

00:13:09,279 --> 00:13:16,079
running a whole terraform plan and

00:13:13,040 --> 00:13:18,160
so terraform is a go project

00:13:16,079 --> 00:13:19,360
and it's so it's a compile go pragmatic

00:13:18,160 --> 00:13:20,720
program if you ever want to use the

00:13:19,360 --> 00:13:22,240
latest latest terraform

00:13:20,720 --> 00:13:24,639
probably not a great idea to do that in

00:13:22,240 --> 00:13:25,680
production but if you do want to do that

00:13:24,639 --> 00:13:29,519
you can always

00:13:25,680 --> 00:13:30,560
go install the terraform package as a go

00:13:29,519 --> 00:13:32,720
program

00:13:30,560 --> 00:13:33,680
and you'll have the terraform binary so

00:13:32,720 --> 00:13:36,079
for this

00:13:33,680 --> 00:13:38,399
case i have terraform and i have

00:13:36,079 --> 00:13:40,880
terraform

00:13:38,399 --> 00:13:43,199
version using the the beta 1 version of

00:13:40,880 --> 00:13:46,800
the terraform 014

00:13:43,199 --> 00:13:47,680
and so in a compiled go program the main

00:13:46,800 --> 00:13:50,399
entry point

00:13:47,680 --> 00:13:52,079
for any program is the main package and

00:13:50,399 --> 00:13:53,279
in specifically in that main package the

00:13:52,079 --> 00:13:56,399
main function

00:13:53,279 --> 00:14:00,000
and this has the

00:13:56,399 --> 00:14:02,399
we wrap the real main so real main

00:14:00,000 --> 00:14:03,040
uses a package called panic wrap which

00:14:02,399 --> 00:14:05,680
does some

00:14:03,040 --> 00:14:07,440
some wrapping so that we get good log

00:14:05,680 --> 00:14:10,160
files and such when you

00:14:07,440 --> 00:14:11,440
have an error in terraform which ideally

00:14:10,160 --> 00:14:13,600
doesn't happen but when it does we want

00:14:11,440 --> 00:14:16,639
to make sure we have good information

00:14:13,600 --> 00:14:19,360
and so then wrapped main is the

00:14:16,639 --> 00:14:20,240
probably where the actual main work

00:14:19,360 --> 00:14:22,639
happens

00:14:20,240 --> 00:14:24,399
and we're setting the output for the

00:14:22,639 --> 00:14:27,440
logs if we have trace logs

00:14:24,399 --> 00:14:30,240
going some information we're loading the

00:14:27,440 --> 00:14:32,639
cli config so this is a separate package

00:14:30,240 --> 00:14:33,839
dedicated to the cli config and let's

00:14:32,639 --> 00:14:36,399
note that this is

00:14:33,839 --> 00:14:37,360
related to the cli not terraform

00:14:36,399 --> 00:14:39,360
configuration

00:14:37,360 --> 00:14:41,680
so cli configuration not terraform

00:14:39,360 --> 00:14:45,839
configuration is happening right now

00:14:41,680 --> 00:14:47,440
loading that config and

00:14:45,839 --> 00:14:49,519
we carry on we're setting up service

00:14:47,440 --> 00:14:52,800
discovery because we might need that

00:14:49,519 --> 00:14:54,120
for various applications

00:14:52,800 --> 00:14:56,480
setting up our understanding of

00:14:54,120 --> 00:14:58,240
providers i'm going to

00:14:56,480 --> 00:15:00,079
dig into this one a little bit so this

00:14:58,240 --> 00:15:02,800
is initializing the back ends

00:15:00,079 --> 00:15:04,399
so there are back ends are where state

00:15:02,800 --> 00:15:06,160
is stored but also where the operation

00:15:04,399 --> 00:15:07,040
is run at least this is currently true

00:15:06,160 --> 00:15:10,560
in terraform

00:15:07,040 --> 00:15:12,880
now so there are two kinds of

00:15:10,560 --> 00:15:14,320
enhanced back ends where they both store

00:15:12,880 --> 00:15:15,920
state and operations

00:15:14,320 --> 00:15:18,079
and those are the local and remote back

00:15:15,920 --> 00:15:20,160
ends so remote is say

00:15:18,079 --> 00:15:21,600
terraform cloud chair from enterprise a

00:15:20,160 --> 00:15:23,040
local is if i run

00:15:21,600 --> 00:15:25,440
like what i just did where i ran

00:15:23,040 --> 00:15:26,240
terraform look terraform apply on my

00:15:25,440 --> 00:15:29,199
machine

00:15:26,240 --> 00:15:30,639
um if you store a remote state then

00:15:29,199 --> 00:15:31,680
these are the different kinds of beckons

00:15:30,639 --> 00:15:35,120
that are

00:15:31,680 --> 00:15:38,000
not enhanced back-ends but uh they are

00:15:35,120 --> 00:15:39,279
uh where you can store your state

00:15:38,000 --> 00:15:40,000
remotely say like if i wanted to

00:15:39,279 --> 00:15:42,959
collaborate with someone

00:15:40,000 --> 00:15:44,800
else and we want to share a state file

00:15:42,959 --> 00:15:48,079
and

00:15:44,800 --> 00:15:48,880
so we now have an understanding of what

00:15:48,079 --> 00:15:50,480
our

00:15:48,880 --> 00:15:52,240
back-end possibilities are so that when

00:15:50,480 --> 00:15:54,639
we get to that point of

00:15:52,240 --> 00:15:55,920
loading our back end it'll we'll have

00:15:54,639 --> 00:15:57,519
our options ready

00:15:55,920 --> 00:15:59,680
we're going to initialize the command so

00:15:57,519 --> 00:16:01,680
the the cli package

00:15:59,680 --> 00:16:03,920
used to create terms of terraform cli

00:16:01,680 --> 00:16:06,639
program the cli package

00:16:03,920 --> 00:16:07,759
is responsible for building that cli

00:16:06,639 --> 00:16:12,000
program

00:16:07,759 --> 00:16:14,800
and it takes a a commands uh

00:16:12,000 --> 00:16:15,920
object and that happens in this init

00:16:14,800 --> 00:16:18,800
commands

00:16:15,920 --> 00:16:19,519
function where we're defining all the

00:16:18,800 --> 00:16:23,440
commands

00:16:19,519 --> 00:16:25,600
that are available for

00:16:23,440 --> 00:16:27,040
terraform and on this dive we're going

00:16:25,600 --> 00:16:28,639
to look at plan

00:16:27,040 --> 00:16:30,320
so i'm actually going to go ahead and

00:16:28,639 --> 00:16:35,120
crack open

00:16:30,320 --> 00:16:35,120
so that we have it open the plan command

00:16:35,680 --> 00:16:41,040
so now we have that open

00:16:38,720 --> 00:16:42,880
all right uh we run checkpoint if we

00:16:41,040 --> 00:16:45,199
need to which is a network request

00:16:42,880 --> 00:16:46,639
you that does some reporting on using

00:16:45,199 --> 00:16:50,399
terraform cli

00:16:46,639 --> 00:16:52,240
and we and if you if there's a new

00:16:50,399 --> 00:16:54,000
version of terraform it tells you that

00:16:52,240 --> 00:16:57,040
it does it does helpful things

00:16:54,000 --> 00:16:59,519
like this and we

00:16:57,040 --> 00:17:00,959
merge our environment arguments and

00:16:59,519 --> 00:17:03,600
building the cli

00:17:00,959 --> 00:17:06,079
is built now we run it and so what this

00:17:03,600 --> 00:17:08,720
does which is that separate package

00:17:06,079 --> 00:17:10,000
it wraps a few things but ultimately

00:17:08,720 --> 00:17:12,480
what it's going to do

00:17:10,000 --> 00:17:13,360
is it's going to call run for the given

00:17:12,480 --> 00:17:15,839
command

00:17:13,360 --> 00:17:18,640
so that command is a implementation of

00:17:15,839 --> 00:17:20,319
the command interface and

00:17:18,640 --> 00:17:22,480
the run function is what's going to get

00:17:20,319 --> 00:17:22,959
called when we're actually running the

00:17:22,480 --> 00:17:26,240
command

00:17:22,959 --> 00:17:29,440
with a cli so we've run terraform binary

00:17:26,240 --> 00:17:34,160
and we've passed a plan verb

00:17:29,440 --> 00:17:36,880
to it and that leads to this

00:17:34,160 --> 00:17:37,760
so in this case we're setting up our

00:17:36,880 --> 00:17:41,039
various

00:17:37,760 --> 00:17:42,080
command line flags uh we have a

00:17:41,039 --> 00:17:44,640
situation so if

00:17:42,080 --> 00:17:46,559
you if we wrote terreform plan we passed

00:17:44,640 --> 00:17:50,880
at plan files an argument

00:17:46,559 --> 00:17:53,440
uh we say hey you can't do that

00:17:50,880 --> 00:17:55,360
and you you can't do that and why and if

00:17:53,440 --> 00:17:56,880
you want to do something else do this

00:17:55,360 --> 00:17:59,280
and this is a great example of using the

00:17:56,880 --> 00:18:01,360
tf diags package so the diagnostic

00:17:59,280 --> 00:18:05,120
package that terraform uses

00:18:01,360 --> 00:18:07,679
and so we use this

00:18:05,120 --> 00:18:09,679
all around terraform for tf die as for

00:18:07,679 --> 00:18:10,720
handling for showing and handling errors

00:18:09,679 --> 00:18:14,720
and warnings

00:18:10,720 --> 00:18:18,160
and so in this case this we created

00:18:14,720 --> 00:18:21,679
in this block here we created a

00:18:18,160 --> 00:18:23,120
uh right in line we created a sourceless

00:18:21,679 --> 00:18:24,880
diagnostic so it means it doesn't have a

00:18:23,120 --> 00:18:26,720
source reference a lot of the diags have

00:18:24,880 --> 00:18:28,480
source references to help you if

00:18:26,720 --> 00:18:29,760
say there's a bug that you need to fix

00:18:28,480 --> 00:18:32,720
or an expression with an

00:18:29,760 --> 00:18:34,400
error things like that and we go ahead

00:18:32,720 --> 00:18:36,400
and show diagnostics in return

00:18:34,400 --> 00:18:37,919
from this command at this point so

00:18:36,400 --> 00:18:41,440
bailing out an

00:18:37,919 --> 00:18:44,080
invalid situation so

00:18:41,440 --> 00:18:45,200
but yeah so we see this everywhere and

00:18:44,080 --> 00:18:48,400
now we are setting up

00:18:45,200 --> 00:18:49,360
our back end and so loading the back-end

00:18:48,400 --> 00:18:51,280
config

00:18:49,360 --> 00:18:53,760
so that's uh reading the back-end

00:18:51,280 --> 00:18:55,919
configuration which would look like

00:18:53,760 --> 00:18:57,120
so we have a back-end configuration

00:18:55,919 --> 00:19:00,240
it'll be in the

00:18:57,120 --> 00:19:03,440
terraform but lock and it'll look like

00:19:00,240 --> 00:19:05,679
say i you know something like this

00:19:03,440 --> 00:19:06,559
and have the appropriate fields that it

00:19:05,679 --> 00:19:10,400
needs

00:19:06,559 --> 00:19:13,679
to do that

00:19:10,400 --> 00:19:17,280
and then we given that

00:19:13,679 --> 00:19:20,000
uh config on the back end we're going to

00:19:17,280 --> 00:19:21,360
load the back end and so this function

00:19:20,000 --> 00:19:23,520
this is in the the meta

00:19:21,360 --> 00:19:25,600
back-end package too it does a little

00:19:23,520 --> 00:19:26,880
bit of work as far as checking various

00:19:25,600 --> 00:19:29,440
options

00:19:26,880 --> 00:19:30,000
passing options to it if we need to so

00:19:29,440 --> 00:19:32,799
cli

00:19:30,000 --> 00:19:34,320
options and as a result of loading that

00:19:32,799 --> 00:19:35,520
if it's an enhanced backend we go ahead

00:19:34,320 --> 00:19:37,600
and return it

00:19:35,520 --> 00:19:39,120
and remember that there are enhanced

00:19:37,600 --> 00:19:39,919
back-ends and remote state storage

00:19:39,120 --> 00:19:42,160
back-ends

00:19:39,919 --> 00:19:44,240
and so if we have a remote state storage

00:19:42,160 --> 00:19:47,919
back-end we're going to build

00:19:44,240 --> 00:19:50,640
a new with back-end back-end which is

00:19:47,919 --> 00:19:52,240
a local back-end with a back-end of type

00:19:50,640 --> 00:19:53,520
whatever the remote state storage back

00:19:52,240 --> 00:19:56,799
end was

00:19:53,520 --> 00:19:58,640
and so that's how we end up with a fully

00:19:56,799 --> 00:19:59,840
usable backend that can perform

00:19:58,640 --> 00:20:03,760
operations and

00:19:59,840 --> 00:20:06,559
handle state storage and

00:20:03,760 --> 00:20:08,400
show any diagnostics and reset them and

00:20:06,559 --> 00:20:09,120
then we're going to build the operation

00:20:08,400 --> 00:20:11,120
so the

00:20:09,120 --> 00:20:12,640
various operations that terraform runs

00:20:11,120 --> 00:20:13,600
so it might be a in this case we're

00:20:12,640 --> 00:20:17,280
going to build a

00:20:13,600 --> 00:20:19,760
plan um so various operation types so

00:20:17,280 --> 00:20:21,760
that you can have a fresh plan and apply

00:20:19,760 --> 00:20:24,000
and

00:20:21,760 --> 00:20:25,200
we're initially setting up a config

00:20:24,000 --> 00:20:28,640
loader

00:20:25,200 --> 00:20:32,240
which creates a instance of

00:20:28,640 --> 00:20:32,480
config load uh create a new loader for

00:20:32,240 --> 00:20:35,679
us

00:20:32,480 --> 00:20:38,400
so config loader loader which will use

00:20:35,679 --> 00:20:42,880
the parser to create the configuration

00:20:38,400 --> 00:20:42,880
and install relevant modules

00:20:43,919 --> 00:20:48,400
and so we collect variable values so

00:20:46,720 --> 00:20:51,120
from the various locations

00:20:48,400 --> 00:20:52,720
that variables can be so if you define a

00:20:51,120 --> 00:20:55,360
variable it can be

00:20:52,720 --> 00:20:55,840
in say you can pass it as command line

00:20:55,360 --> 00:20:59,120
argument

00:20:55,840 --> 00:21:04,400
you can pass it in a tf bears file

00:20:59,120 --> 00:21:04,400
and so we collect those values here and

00:21:05,520 --> 00:21:09,200
i'm going to skip over this part and go

00:21:08,400 --> 00:21:12,480
ahead and go to

00:21:09,200 --> 00:21:16,400
run the operation so

00:21:12,480 --> 00:21:18,640
this abstract situation

00:21:16,400 --> 00:21:20,400
is on the still in the command package

00:21:18,640 --> 00:21:23,919
meta run operation

00:21:20,400 --> 00:21:26,720
and it normalizes the path

00:21:23,919 --> 00:21:28,080
and handles the some of the the exit uh

00:21:26,720 --> 00:21:31,280
so handling the channel

00:21:28,080 --> 00:21:33,919
uh that goes on in in this so going to

00:21:31,280 --> 00:21:35,679
that back end operation

00:21:33,919 --> 00:21:38,000
that just shops it out to the the

00:21:35,679 --> 00:21:40,480
interface of whatever instance of

00:21:38,000 --> 00:21:41,600
back end we have that is implementing

00:21:40,480 --> 00:21:44,240
the operation we

00:21:41,600 --> 00:21:45,200
in our dive we happen to know that we

00:21:44,240 --> 00:21:48,720
are using

00:21:45,200 --> 00:21:52,880
the local back end

00:21:48,720 --> 00:21:56,559
and let's find

00:21:52,880 --> 00:21:58,720
the operation so there's our operation

00:21:56,559 --> 00:22:00,320
go ahead and crack this open don't say

00:21:58,720 --> 00:22:03,760
whatever i did there

00:22:00,320 --> 00:22:08,080
and so the operation

00:22:03,760 --> 00:22:11,200
will say call the appropriate function

00:22:08,080 --> 00:22:12,400
for what operation is happening and in

00:22:11,200 --> 00:22:15,840
this case we're

00:22:12,400 --> 00:22:19,039
going to end up hitting this path and

00:22:15,840 --> 00:22:21,840
we set up our contacts

00:22:19,039 --> 00:22:22,320
that are necessary for if you cancel and

00:22:21,840 --> 00:22:26,480
if you

00:22:22,320 --> 00:22:28,480
you know hard exit uh then

00:22:26,480 --> 00:22:29,840
run the operation so run the function

00:22:28,480 --> 00:22:32,880
and what function do we have

00:22:29,840 --> 00:22:35,919
right we have the plan function

00:22:32,880 --> 00:22:37,679
and now we are in the

00:22:35,919 --> 00:22:39,679
so now we're in we've also we wandered

00:22:37,679 --> 00:22:42,159
around a little bit in our packages

00:22:39,679 --> 00:22:43,039
so we are now in the back end local

00:22:42,159 --> 00:22:46,320
package

00:22:43,039 --> 00:22:48,880
um so the local package and in the

00:22:46,320 --> 00:22:50,720
plan function specifically which takes

00:22:48,880 --> 00:22:51,840
our contacts takes the operation that we

00:22:50,720 --> 00:22:55,039
constructed

00:22:51,840 --> 00:22:58,559
and starting the plan

00:22:55,039 --> 00:23:00,000
and so we have some checks to make sure

00:22:58,559 --> 00:23:02,320
we have config setting up

00:23:00,000 --> 00:23:03,200
the count hook so this keeps track as we

00:23:02,320 --> 00:23:05,280
run through the plan

00:23:03,200 --> 00:23:06,960
of the summary of the resource changes

00:23:05,280 --> 00:23:10,240
so created

00:23:06,960 --> 00:23:12,400
removed um so

00:23:10,240 --> 00:23:13,280
how we keep track of those counts as we

00:23:12,400 --> 00:23:15,600
go

00:23:13,280 --> 00:23:16,720
so getting our contacts make sure i keep

00:23:15,600 --> 00:23:19,840
this open

00:23:16,720 --> 00:23:21,039
don't need that anymore and so this

00:23:19,840 --> 00:23:24,799
we're creating our

00:23:21,039 --> 00:23:26,400
terraform context

00:23:24,799 --> 00:23:28,000
this will get us into the terraform

00:23:26,400 --> 00:23:31,919
package

00:23:28,000 --> 00:23:35,120
so we now we get state

00:23:31,919 --> 00:23:38,400
so we're so this is uh

00:23:35,120 --> 00:23:39,679
related to our state manager and we

00:23:38,400 --> 00:23:42,000
request the state lock

00:23:39,679 --> 00:23:43,360
so remember we we lock the state for

00:23:42,000 --> 00:23:47,200
safety

00:23:43,360 --> 00:23:50,240
and da-da-da reading the remote state

00:23:47,200 --> 00:23:53,679
and we use this to

00:23:50,240 --> 00:23:55,840
eventually so get our our state

00:23:53,679 --> 00:23:57,760
and state is handled in the states

00:23:55,840 --> 00:24:00,720
package conveniently

00:23:57,760 --> 00:24:01,840
create a terraform context but not quite

00:24:00,720 --> 00:24:04,320
we're going to create a terraform

00:24:01,840 --> 00:24:06,159
context with this context direct

00:24:04,320 --> 00:24:07,760
because we use a different context if

00:24:06,159 --> 00:24:09,039
it's if we have a plan file because

00:24:07,760 --> 00:24:10,720
remember that function is

00:24:09,039 --> 00:24:12,480
not specific to plan it's used for other

00:24:10,720 --> 00:24:16,000
operations too

00:24:12,480 --> 00:24:17,360
and so context direct so we are going to

00:24:16,000 --> 00:24:19,520
load our configuration

00:24:17,360 --> 00:24:21,440
so this is going to get us now we're

00:24:19,520 --> 00:24:24,799
seeing the configs package

00:24:21,440 --> 00:24:26,400
and so we are loading the config

00:24:24,799 --> 00:24:29,919
using that config loader it's going to

00:24:26,400 --> 00:24:33,919
parse and it's going to

00:24:29,919 --> 00:24:36,559
walk our our configs because it could be

00:24:33,919 --> 00:24:38,000
many uh many modules and maybe those

00:24:36,559 --> 00:24:41,039
modules with other modules

00:24:38,000 --> 00:24:43,760
so we think of this like walking a tree

00:24:41,039 --> 00:24:44,960
and we're going to end up returning that

00:24:43,760 --> 00:24:48,400
config

00:24:44,960 --> 00:24:51,520
and let me see if let's poke

00:24:48,400 --> 00:24:55,360
just a little bit and so

00:24:51,520 --> 00:24:58,320
create a new module and that module

00:24:55,360 --> 00:24:59,279
is in the so we're now in the config so

00:24:58,320 --> 00:25:01,520
creating a

00:24:59,279 --> 00:25:03,600
new module looks like this and the

00:25:01,520 --> 00:25:06,240
various so

00:25:03,600 --> 00:25:08,480
the various components of a module of

00:25:06,240 --> 00:25:10,159
the providers the variables

00:25:08,480 --> 00:25:12,840
module calls and manage resources so

00:25:10,159 --> 00:25:15,840
this is of type of resource

00:25:12,840 --> 00:25:16,960
and that's so when we load a module now

00:25:15,840 --> 00:25:20,559
we have it in this

00:25:16,960 --> 00:25:22,240
we've gone from that that hcl structure

00:25:20,559 --> 00:25:23,200
in your config file to now it's in

00:25:22,240 --> 00:25:26,320
terraform as

00:25:23,200 --> 00:25:29,440
a uh construct and go that

00:25:26,320 --> 00:25:30,559
we can now interact with setting the

00:25:29,440 --> 00:25:33,200
config

00:25:30,559 --> 00:25:35,039
for the settings setting the variables

00:25:33,200 --> 00:25:36,640
and then creating that context using

00:25:35,039 --> 00:25:38,559
that new context method which is how

00:25:36,640 --> 00:25:42,799
i'll tear from context gets made

00:25:38,559 --> 00:25:44,480
and then returning that so

00:25:42,799 --> 00:25:45,919
now we have our tear from context which

00:25:44,480 --> 00:25:49,440
is gets us

00:25:45,919 --> 00:25:51,120
into the terraform package and

00:25:49,440 --> 00:25:52,400
assigning the state to that value

00:25:51,120 --> 00:25:54,240
because remember that's what we did over

00:25:52,400 --> 00:25:57,200
there we went and got the state

00:25:54,240 --> 00:26:00,799
and now we are going to run the plan in

00:25:57,200 --> 00:26:00,799
a go routine so it can get interrupted

00:26:00,960 --> 00:26:04,640
and and now we're in the terraform

00:26:03,120 --> 00:26:07,440
package so terraform

00:26:04,640 --> 00:26:08,480
plan so we create so we create a new

00:26:07,440 --> 00:26:10,240
changes object

00:26:08,480 --> 00:26:11,520
which will get populated throughout this

00:26:10,240 --> 00:26:14,080
plan running

00:26:11,520 --> 00:26:15,520
again making some checks for things

00:26:14,080 --> 00:26:17,919
creating an instance of

00:26:15,520 --> 00:26:20,159
a plan another package that we're seeing

00:26:17,919 --> 00:26:23,039
so plan is responsible for

00:26:20,159 --> 00:26:24,320
the understanding of a terraform plan

00:26:23,039 --> 00:26:27,760
our operation

00:26:24,320 --> 00:26:30,240
is a plan ooh graphs now we have hit

00:26:27,760 --> 00:26:31,279
graphs so the graph type is graph type

00:26:30,240 --> 00:26:35,279
plan

00:26:31,279 --> 00:26:36,480
and then we are going to create our

00:26:35,279 --> 00:26:39,360
graph

00:26:36,480 --> 00:26:40,400
and depending on so depending on the

00:26:39,360 --> 00:26:41,520
kind of

00:26:40,400 --> 00:26:43,679
operation we're running we're going to

00:26:41,520 --> 00:26:45,760
use a different kind of graph uh

00:26:43,679 --> 00:26:48,400
because the the shape might be different

00:26:45,760 --> 00:26:51,440
so in validate which is only checking

00:26:48,400 --> 00:26:53,760
for syntactic correctness

00:26:51,440 --> 00:26:55,760
we don't need to do some things that we

00:26:53,760 --> 00:26:57,600
need to do in a plan because

00:26:55,760 --> 00:26:59,760
we're just we're basically spell

00:26:57,600 --> 00:27:02,880
checking um not just spell checking but

00:26:59,760 --> 00:27:04,799
kind of so in the graph type plan

00:27:02,880 --> 00:27:07,279
we're gonna use the plan graph builder

00:27:04,799 --> 00:27:10,320
we're going to build that graph

00:27:07,279 --> 00:27:13,360
and so in this case so

00:27:10,320 --> 00:27:14,080
these are graph transformers so in a

00:27:13,360 --> 00:27:17,279
graph

00:27:14,080 --> 00:27:18,840
so the graph is a aaa graph we can

00:27:17,279 --> 00:27:21,360
consider as a set of

00:27:18,840 --> 00:27:22,640
nodes or these are also called vertices

00:27:21,360 --> 00:27:24,080
and these in my hands my hands are

00:27:22,640 --> 00:27:27,200
circles in this scenario

00:27:24,080 --> 00:27:29,120
so circles and lines so the graph is

00:27:27,200 --> 00:27:30,960
made up of circles and lines and those

00:27:29,120 --> 00:27:32,000
circles and lines are called nodes or

00:27:30,960 --> 00:27:35,039
vertices

00:27:32,000 --> 00:27:38,320
and those lines are called edges and

00:27:35,039 --> 00:27:38,640
those edges could be directed so they

00:27:38,320 --> 00:27:39,840
have an

00:27:38,640 --> 00:27:42,000
arrow on the end of them they're

00:27:39,840 --> 00:27:45,120
directed so a directed

00:27:42,000 --> 00:27:45,679
edge and if you have a graph where you

00:27:45,120 --> 00:27:48,480
have

00:27:45,679 --> 00:27:50,080
nodes and edges and arrows and you have

00:27:48,480 --> 00:27:51,919
them pointing to each other so let's say

00:27:50,080 --> 00:27:55,039
a points to b and b points to a

00:27:51,919 --> 00:27:57,760
that's called a cycle so

00:27:55,039 --> 00:27:58,640
a cycle is when you have like a

00:27:57,760 --> 00:28:02,080
reference

00:27:58,640 --> 00:28:04,799
that that points through a loop

00:28:02,080 --> 00:28:06,720
and in you if you have a graph that

00:28:04,799 --> 00:28:10,399
you've created that has no cycles

00:28:06,720 --> 00:28:13,360
then it's an acyclic graph so an acyclic

00:28:10,399 --> 00:28:14,000
graph has no cycles and so terraform is

00:28:13,360 --> 00:28:17,440
built on

00:28:14,000 --> 00:28:19,919
a directed arrows acyclic

00:28:17,440 --> 00:28:20,720
no cycles graph bunch of nodes in the

00:28:19,919 --> 00:28:23,279
edges

00:28:20,720 --> 00:28:24,799
and so in the graph builder this is

00:28:23,279 --> 00:28:28,880
where we create the graph

00:28:24,799 --> 00:28:32,720
yeah and each of these is a set of steps

00:28:28,880 --> 00:28:36,000
that is going to add nodes and edges

00:28:32,720 --> 00:28:36,960
to our graph and i wanted to look at one

00:28:36,000 --> 00:28:39,520
transformer

00:28:36,960 --> 00:28:40,399
in particular on this dive so we're

00:28:39,520 --> 00:28:43,600
going to look

00:28:40,399 --> 00:28:47,600
at the module expansion transformer

00:28:43,600 --> 00:28:49,679
and so before terraform013

00:28:47,600 --> 00:28:51,760
modules and this is i guess more

00:28:49,679 --> 00:28:55,120
interesting if you use terraform already

00:28:51,760 --> 00:28:57,120
but modules are a concept and they are

00:28:55,120 --> 00:28:58,000
not actually nodes on the graph and this

00:28:57,120 --> 00:29:01,279
change in terraform

00:28:58,000 --> 00:29:04,000
0 13 which allows you

00:29:01,279 --> 00:29:05,200
to have multiple instances of a module

00:29:04,000 --> 00:29:06,640
so in the same way so this has been

00:29:05,200 --> 00:29:10,000
around for a while

00:29:06,640 --> 00:29:13,120
is that if i wanted more than one i can

00:29:10,000 --> 00:29:15,360
expand this to have a count um

00:29:13,120 --> 00:29:16,399
and then as of last year i can also have

00:29:15,360 --> 00:29:20,159
this be

00:29:16,399 --> 00:29:24,799
for each and have this be a set of

00:29:20,159 --> 00:29:24,799
of strings and

00:29:24,840 --> 00:29:30,720
so for modules modules could not expand

00:29:28,880 --> 00:29:31,440
in the same way until this terraform 0

00:29:30,720 --> 00:29:32,399
00:29:31,440 --> 00:29:34,559
because they weren't actually

00:29:32,399 --> 00:29:37,360
represented in the graph as nodes

00:29:34,559 --> 00:29:39,360
so we couldn't visit them in the way

00:29:37,360 --> 00:29:42,159
that we visit things in terraform

00:29:39,360 --> 00:29:42,640
and so this transformer allows us to do

00:29:42,159 --> 00:29:45,760
that

00:29:42,640 --> 00:29:49,760
so this transformer for

00:29:45,760 --> 00:29:55,600
any module calls so if in our config

00:29:49,760 --> 00:29:58,799
if we have oops if we have

00:29:55,600 --> 00:29:58,799
if we have a module call

00:30:00,240 --> 00:30:04,640
so this would be if i had a module

00:30:02,640 --> 00:30:08,559
defined there

00:30:04,640 --> 00:30:10,960
so a module call this will add a

00:30:08,559 --> 00:30:11,919
uh so in this transform so this

00:30:10,960 --> 00:30:14,720
transformer

00:30:11,919 --> 00:30:16,000
what it's called will for that call

00:30:14,720 --> 00:30:19,039
create a

00:30:16,000 --> 00:30:21,760
expansion module or sorry a

00:30:19,039 --> 00:30:23,600
expansion node uh that might expand into

00:30:21,760 --> 00:30:24,080
multiple module instances it might be it

00:30:23,600 --> 00:30:27,360
might be

00:30:24,080 --> 00:30:29,120
one or more or or zero you could have a

00:30:27,360 --> 00:30:33,600
call with a count of zero

00:30:29,120 --> 00:30:36,399
and we'll add that node to the graph

00:30:33,600 --> 00:30:36,960
and then so that's adding a node and

00:30:36,399 --> 00:30:39,679
then

00:30:36,960 --> 00:30:40,399
if we if we have a parent to connect it

00:30:39,679 --> 00:30:42,640
to

00:30:40,399 --> 00:30:44,080
we say this node has to wait for its

00:30:42,640 --> 00:30:47,279
parent to expand

00:30:44,080 --> 00:30:49,679
and there we add an edge we add a line

00:30:47,279 --> 00:30:50,480
from the expander to the parent node so

00:30:49,679 --> 00:30:53,840
that

00:30:50,480 --> 00:30:56,640
when the we're about to when we

00:30:53,840 --> 00:30:58,000
walk the graph we visit things in the

00:30:56,640 --> 00:30:59,440
right order so that

00:30:58,000 --> 00:31:03,200
things are created when we're ready for

00:30:59,440 --> 00:31:06,720
them and so we also add a close because

00:31:03,200 --> 00:31:09,200
expansion in spinning into modules is a

00:31:06,720 --> 00:31:10,720
like a sub graph so we're entering into

00:31:09,200 --> 00:31:11,600
the subgraph where we expand a bunch of

00:31:10,720 --> 00:31:14,240
things

00:31:11,600 --> 00:31:15,600
or not and then we have an exit when we

00:31:14,240 --> 00:31:17,440
exit that graph so that we know that

00:31:15,600 --> 00:31:20,799
we're done

00:31:17,440 --> 00:31:22,640
and for the graph vertices we check

00:31:20,799 --> 00:31:24,000
to make sure that we connect things that

00:31:22,640 --> 00:31:27,120
need to be and so

00:31:24,000 --> 00:31:28,799
if we if the paths are equal make sure

00:31:27,120 --> 00:31:31,679
that they're connected

00:31:28,799 --> 00:31:33,919
and do recursion to make sure we visit

00:31:31,679 --> 00:31:37,039
and if there's you know further calls

00:31:33,919 --> 00:31:37,440
uh go ahead and do that and then and

00:31:37,039 --> 00:31:41,440
that's

00:31:37,440 --> 00:31:45,039
the creating the uh the transform

00:31:41,440 --> 00:31:46,399
so uh i want to look at that graph

00:31:45,039 --> 00:31:48,720
builder plan again

00:31:46,399 --> 00:31:49,519
because a question you might have could

00:31:48,720 --> 00:31:52,399
be

00:31:49,519 --> 00:31:53,279
hey it looks like you added a lot of

00:31:52,399 --> 00:31:55,200
edges

00:31:53,279 --> 00:31:57,279
doesn't that make the graph complicated

00:31:55,200 --> 00:31:59,200
or at least difficult to reason about

00:31:57,279 --> 00:32:00,880
and you would be right and the answer to

00:31:59,200 --> 00:32:03,279
that question is that we have the

00:32:00,880 --> 00:32:05,600
transitive reduction transformer

00:32:03,279 --> 00:32:07,600
so this is to make the graph more

00:32:05,600 --> 00:32:10,720
understandable

00:32:07,600 --> 00:32:13,679
and so this will

00:32:10,720 --> 00:32:14,559
perform the grass transitive reduction

00:32:13,679 --> 00:32:17,840
method

00:32:14,559 --> 00:32:19,279
which has it's an algorithm so using

00:32:17,840 --> 00:32:20,640
graph theory means that we can benefit

00:32:19,279 --> 00:32:22,720
from using graph theory

00:32:20,640 --> 00:32:24,080
concepts and theorems that have been

00:32:22,720 --> 00:32:27,360
proved because

00:32:24,080 --> 00:32:28,480
that's how mathematics works and so we

00:32:27,360 --> 00:32:32,080
can use

00:32:28,480 --> 00:32:35,120
proven uh algorithms for this

00:32:32,080 --> 00:32:38,159
so let's make sure we finish

00:32:35,120 --> 00:32:39,600
going through the plan uh because we no

00:32:38,159 --> 00:32:41,440
we haven't because we created the graph

00:32:39,600 --> 00:32:42,799
but we haven't done the walk yet and so

00:32:41,440 --> 00:32:47,200
we're going to look at that

00:32:42,799 --> 00:32:50,559
so do the walk so in this case we are

00:32:47,200 --> 00:32:54,640
starting the graph walk and so

00:32:50,559 --> 00:32:58,480
we watch the walk the graph

00:32:54,640 --> 00:33:01,519
and da-da-da which calls that and

00:32:58,480 --> 00:33:04,480
we have our walk function where we

00:33:01,519 --> 00:33:04,799
are visiting these vertices ah neat and

00:33:04,480 --> 00:33:08,240
then

00:33:04,799 --> 00:33:08,960
if it is a module instance so in this

00:33:08,240 --> 00:33:10,480
case so if

00:33:08,960 --> 00:33:12,000
and if it's a module instance we're

00:33:10,480 --> 00:33:12,799
going to enter that path and exit the

00:33:12,000 --> 00:33:14,960
path

00:33:12,799 --> 00:33:17,200
if the node is executable then execute

00:33:14,960 --> 00:33:20,320
it because we have

00:33:17,200 --> 00:33:22,480
uh some are uh

00:33:20,320 --> 00:33:23,600
so if it has implements that interface

00:33:22,480 --> 00:33:26,559
we run that function

00:33:23,600 --> 00:33:28,320
so walk or execute and if it's

00:33:26,559 --> 00:33:28,960
dynamically expand and expand it uh this

00:33:28,320 --> 00:33:31,919
applies to

00:33:28,960 --> 00:33:32,480
resources that have count or for each uh

00:33:31,919 --> 00:33:34,000
and

00:33:32,480 --> 00:33:36,880
some probably some other dynamically

00:33:34,000 --> 00:33:36,880
expanded resources

00:33:37,279 --> 00:33:42,880
our nodes so that's the graph

00:33:40,320 --> 00:33:44,640
so we so we create a structure of a

00:33:42,880 --> 00:33:46,640
bunch of circles and lines

00:33:44,640 --> 00:33:47,840
we do that for a bunch of different

00:33:46,640 --> 00:33:51,120
cases so

00:33:47,840 --> 00:33:54,399
we um the graph builder

00:33:51,120 --> 00:33:59,360
plan we did that

00:33:54,399 --> 00:34:00,720
for our we add our

00:33:59,360 --> 00:34:02,960
things that are represented in state

00:34:00,720 --> 00:34:06,559
things are represented in the config

00:34:02,960 --> 00:34:09,280
and making adjustments as we notice

00:34:06,559 --> 00:34:10,720
various things uh adjustments for

00:34:09,280 --> 00:34:14,480
references

00:34:10,720 --> 00:34:16,960
dependencies if targeting is used

00:34:14,480 --> 00:34:18,720
so these transforms are separated in

00:34:16,960 --> 00:34:21,520
location for that concern which helps

00:34:18,720 --> 00:34:24,000
make it easier to reason about

00:34:21,520 --> 00:34:24,720
and we want once we have that graph we

00:34:24,000 --> 00:34:27,359
walk the graph

00:34:24,720 --> 00:34:28,639
and visit all the vertices and then we

00:34:27,359 --> 00:34:32,159
have our result or

00:34:28,639 --> 00:34:35,359
we haven't yet we'll get there so

00:34:32,159 --> 00:34:36,000
we did the plan and we handle relevant

00:34:35,359 --> 00:34:38,639
exits

00:34:36,000 --> 00:34:39,839
we didn't save the plan to disk and then

00:34:38,639 --> 00:34:41,839
if we have a cli

00:34:39,839 --> 00:34:43,440
to output two which is not always true

00:34:41,839 --> 00:34:46,639
uh we will

00:34:43,440 --> 00:34:50,079
put print out diagnostics

00:34:46,639 --> 00:34:51,280
and we'll render the plan rendering the

00:34:50,079 --> 00:34:53,520
plan

00:34:51,280 --> 00:34:54,480
is printing out all the stuff that we

00:34:53,520 --> 00:34:58,079
saw in the cli

00:34:54,480 --> 00:35:01,440
that created using our account

00:34:58,079 --> 00:35:04,720
count hook of the the various things

00:35:01,440 --> 00:35:06,240
and performing the following actions and

00:35:04,720 --> 00:35:07,760
then i find this interesting because

00:35:06,240 --> 00:35:08,480
this is and the formatting the resource

00:35:07,760 --> 00:35:11,839
change is

00:35:08,480 --> 00:35:15,200
a pretty significant bit of code for

00:35:11,839 --> 00:35:18,480
providing that that report out to

00:35:15,200 --> 00:35:20,880
the out to the output here

00:35:18,480 --> 00:35:22,720
so this is a resource change that we

00:35:20,880 --> 00:35:25,839
output

00:35:22,720 --> 00:35:29,599
so uh let me see something and

00:35:25,839 --> 00:35:34,480
you know let's let's edit the

00:35:29,599 --> 00:35:34,480
this so that we have a change

00:35:34,960 --> 00:35:41,839
and we'll then we'll run

00:35:38,240 --> 00:35:46,320
a terraform plan but this time

00:35:41,839 --> 00:35:48,079
i'm going to use a have the trace on

00:35:46,320 --> 00:35:49,680
and this is how we tend to debug

00:35:48,079 --> 00:35:52,480
terraform as

00:35:49,680 --> 00:35:53,119
core developers is using this trace log

00:35:52,480 --> 00:35:55,280
which

00:35:53,119 --> 00:35:56,240
this is how it looks now it's going to

00:35:55,280 --> 00:35:59,200
change um

00:35:56,240 --> 00:35:59,839
but this is how it looks now and so when

00:35:59,200 --> 00:36:02,560
we run

00:35:59,839 --> 00:36:03,280
a plan we actually also run a validate2

00:36:02,560 --> 00:36:04,880
so we'll

00:36:03,280 --> 00:36:08,240
might run into that so let me make sure

00:36:04,880 --> 00:36:11,280
that i'm in the plan output

00:36:08,240 --> 00:36:13,839
and not the validate

00:36:11,280 --> 00:36:13,839
output

00:36:15,839 --> 00:36:21,520
nope i'm in the validate so

00:36:18,960 --> 00:36:22,480
but what i am scrolling rapidly fast

00:36:21,520 --> 00:36:26,079
here

00:36:22,480 --> 00:36:28,560
is we are building a graph haha we are

00:36:26,079 --> 00:36:31,040
calling the plan so this is after the

00:36:28,560 --> 00:36:32,480
the validate so we call the plan build a

00:36:31,040 --> 00:36:34,640
graph plan

00:36:32,480 --> 00:36:36,720
transform with the config transformer

00:36:34,640 --> 00:36:40,000
the config transformer sees that we have

00:36:36,720 --> 00:36:40,640
a resource in the config and we run a

00:36:40,000 --> 00:36:43,599
bunch of

00:36:40,640 --> 00:36:44,000
transformers we report out what happened

00:36:43,599 --> 00:36:47,760
we

00:36:44,000 --> 00:36:51,839
attach a uh our resource config

00:36:47,760 --> 00:36:55,119
transformer and this is where we have

00:36:51,839 --> 00:36:58,320
our expand we get our provider

00:36:55,119 --> 00:37:00,400
node and

00:36:58,320 --> 00:37:03,760
eventually because see this has that

00:37:00,400 --> 00:37:07,599
expand it's an expand planable resource

00:37:03,760 --> 00:37:10,240
and we eventually through the count

00:37:07,599 --> 00:37:11,440
transformer we find that we have more

00:37:10,240 --> 00:37:14,960
than one instance now

00:37:11,440 --> 00:37:15,920
right and so see how this graph is

00:37:14,960 --> 00:37:18,400
changing

00:37:15,920 --> 00:37:19,760
through each of these transformers and

00:37:18,400 --> 00:37:23,680
then our transitive reduction

00:37:19,760 --> 00:37:26,960
transformer simplifies it

00:37:23,680 --> 00:37:30,000
and then as we visit

00:37:26,960 --> 00:37:31,839
we're going to walk and enter that so

00:37:30,000 --> 00:37:37,280
that's a dynamic

00:37:31,839 --> 00:37:41,280
dynamically expandable and

00:37:37,280 --> 00:37:41,280
let's see expanding dynamic subgraph

00:37:41,440 --> 00:37:47,920
and we now have ah

00:37:45,200 --> 00:37:49,359
ah see sorry this is uh since things run

00:37:47,920 --> 00:37:51,760
on different

00:37:49,359 --> 00:37:53,760
areas we'll see this output in different

00:37:51,760 --> 00:37:57,839
places but yeah so now we have our

00:37:53,760 --> 00:38:05,599
zero and one and

00:37:57,839 --> 00:38:07,200
transforming transforming and we have a

00:38:05,599 --> 00:38:08,480
because we have our first instance

00:38:07,200 --> 00:38:11,760
already so this is actually only going

00:38:08,480 --> 00:38:11,760
to create the second instance

00:38:16,160 --> 00:38:20,079
and now we have our two instances

00:38:17,680 --> 00:38:21,520
because we actually used reuse there's

00:38:20,079 --> 00:38:23,119
that count boundary transformer does

00:38:21,520 --> 00:38:26,160
this is where we reuse our

00:38:23,119 --> 00:38:30,079
zeroth uh instance as

00:38:26,160 --> 00:38:33,680
uh and member of the count instance and

00:38:30,079 --> 00:38:35,760
yeah so i i think we i think we did it

00:38:33,680 --> 00:38:38,000
i think i'm ready to hand it back to pam

00:38:35,760 --> 00:38:40,960
um but we

00:38:38,000 --> 00:38:42,480
we ran the plan and we rendered the plan

00:38:40,960 --> 00:38:45,200
and that drops us out to

00:38:42,480 --> 00:38:46,320
you know we returned the exit code which

00:38:45,200 --> 00:38:49,359
was zero

00:38:46,320 --> 00:38:50,960
because it ran fine and now we've gone

00:38:49,359 --> 00:38:54,400
through the terraform source code

00:38:50,960 --> 00:38:54,400
all right i'll hand it back to pam

00:38:59,200 --> 00:39:06,000
all right uh so

00:39:02,640 --> 00:39:09,359
i hope you all enjoyed that

00:39:06,000 --> 00:39:12,480
for what it was uh and

00:39:09,359 --> 00:39:14,800
so what did we learn uh we hopefully

00:39:12,480 --> 00:39:18,000
learned some of the basics of

00:39:14,800 --> 00:39:20,400
i have that pointer everywhere

00:39:18,000 --> 00:39:21,760
but basically what terraform is uh the

00:39:20,400 --> 00:39:23,839
parts that make up terraform in this

00:39:21,760 --> 00:39:25,599
ecosystem

00:39:23,839 --> 00:39:27,200
definitely not exhaustive there's so

00:39:25,599 --> 00:39:29,680
much to learn

00:39:27,200 --> 00:39:30,480
toward the source of terraform core uh

00:39:29,680 --> 00:39:33,440
and i have

00:39:30,480 --> 00:39:35,359
a few links here that are if you like

00:39:33,440 --> 00:39:36,960
this talk but want something else if you

00:39:35,359 --> 00:39:38,400
like this talk but want more graph

00:39:36,960 --> 00:39:40,560
theory and less source code

00:39:38,400 --> 00:39:42,160
there's a talk for that uh and a few

00:39:40,560 --> 00:39:44,000
different topics that

00:39:42,160 --> 00:39:46,480
perhaps this might have sparked your

00:39:44,000 --> 00:39:49,359
interest in

00:39:46,480 --> 00:39:50,800
and so i'll leave it at that and have a

00:39:49,359 --> 00:39:51,760
couple minutes for questions if there

00:39:50,800 --> 00:39:55,119
aren't any

00:39:51,760 --> 00:39:56,880
uh and so yeah the review on pam uh pam

00:39:55,119 --> 00:39:59,280
selly on the terrapin core team uh you

00:39:56,880 --> 00:40:02,720
can find me on twitter at pamlasaur

00:39:59,280 --> 00:40:04,000
uh my website for links to everything is

00:40:02,720 --> 00:40:07,280
pamsally.com

00:40:04,000 --> 00:40:08,880
uh and uh terraform is on github if you

00:40:07,280 --> 00:40:11,040
would like to

00:40:08,880 --> 00:40:13,920
look at the source code yourself and you

00:40:11,040 --> 00:40:22,079
know report bugs fix things

00:40:13,920 --> 00:40:22,079

YouTube URL: https://www.youtube.com/watch?v=mgkKC_Hig6w


