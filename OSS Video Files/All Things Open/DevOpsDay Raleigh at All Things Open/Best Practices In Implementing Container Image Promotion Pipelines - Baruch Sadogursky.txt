Title: Best Practices In Implementing Container Image Promotion Pipelines - Baruch Sadogursky
Publication date: 2020-12-03
Playlist: DevOpsDay Raleigh at All Things Open
Description: 
	Presented by: Baruch Sadogursky, JFrog
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: Surprisingly, implementing a secure, robust and fast promotion pipelines for container images is not as easy as it might sound. Automating dependency resolution (base images), implementing multiple registries for different maturity stages and making sure that we actually run in production containers from the images we intended can be tricky. In this talk, we will compare different approaches, compile a wish-list of features and create a pipeline that checks all the boxes using free and open-source tools.
Captions: 
	00:00:05,120 --> 00:00:09,440
well it's uh

00:00:06,080 --> 00:00:12,400
great to be here hello everybody um and

00:00:09,440 --> 00:00:13,120
thank you thank you for having me um all

00:00:12,400 --> 00:00:16,320
things open

00:00:13,120 --> 00:00:19,199
was a long time on my bucket list of uh

00:00:16,320 --> 00:00:19,840
visiting and speaking unfortunately you

00:00:19,199 --> 00:00:23,519
know

00:00:19,840 --> 00:00:25,920
we can we can only do it uh virtual

00:00:23,519 --> 00:00:27,439
for for this year but i really hope we

00:00:25,920 --> 00:00:29,439
will do it in person next year

00:00:27,439 --> 00:00:32,160
there was a rally is another one on my

00:00:29,439 --> 00:00:34,480
bucket list that i also hope to do

00:00:32,160 --> 00:00:35,760
to speak at one day and hopefully in

00:00:34,480 --> 00:00:38,239
person in april

00:00:35,760 --> 00:00:38,960
definitely going to submit to the cfp

00:00:38,239 --> 00:00:42,000
and you

00:00:38,960 --> 00:00:44,320
all should do that too submissions are

00:00:42,000 --> 00:00:46,079
open and it's a great event and you

00:00:44,320 --> 00:00:50,559
really really should do that

00:00:46,079 --> 00:00:52,640
um so thanks to the default of zoom

00:00:50,559 --> 00:00:54,079
of sending the chats to everybody now

00:00:52,640 --> 00:00:54,640
you already know how to pronounce my

00:00:54,079 --> 00:00:58,320
name

00:00:54,640 --> 00:01:00,960
that's good and now we can talk about um

00:00:58,320 --> 00:01:02,800
about the implementing container image

00:01:00,960 --> 00:01:05,920
promotion pipelines

00:01:02,800 --> 00:01:06,640
um and so one thing to note before we

00:01:05,920 --> 00:01:09,280
kind of dive

00:01:06,640 --> 00:01:10,720
in well you all know that there are more

00:01:09,280 --> 00:01:13,760
containers than

00:01:10,720 --> 00:01:16,080
than a docker but still

00:01:13,760 --> 00:01:17,520
for a lot of industry and for a lot of

00:01:16,080 --> 00:01:20,799
people including myself

00:01:17,520 --> 00:01:21,840
most of the time when we say uh when we

00:01:20,799 --> 00:01:24,560
say container we

00:01:21,840 --> 00:01:26,240
we mean docker and i guess this is how

00:01:24,560 --> 00:01:28,880
i'm going to use um

00:01:26,240 --> 00:01:29,360
this term today kind of interchangeably

00:01:28,880 --> 00:01:32,960
so

00:01:29,360 --> 00:01:35,840
this is the idea and with docker as with

00:01:32,960 --> 00:01:36,960
almost every software that you encounter

00:01:35,840 --> 00:01:40,240
it's

00:01:36,960 --> 00:01:43,280
this vn diagram applies it's kind of

00:01:40,240 --> 00:01:45,040
um a love and hate relationship

00:01:43,280 --> 00:01:46,479
the more you know how the sausage is

00:01:45,040 --> 00:01:49,439
made the less

00:01:46,479 --> 00:01:51,200
uh you like the sausages and with dog

00:01:49,439 --> 00:01:51,920
hair it's the same it's an amazing

00:01:51,200 --> 00:01:55,680
technology

00:01:51,920 --> 00:01:56,799
revolutionary and it revolutionized how

00:01:55,680 --> 00:01:59,360
we

00:01:56,799 --> 00:02:01,680
develop software the whole concept is

00:01:59,360 --> 00:02:03,520
that if it only works on your machine

00:02:01,680 --> 00:02:04,719
just go ahead and ship your machine to

00:02:03,520 --> 00:02:07,759
production is

00:02:04,719 --> 00:02:09,200
is obviously amazing and this is uh what

00:02:07,759 --> 00:02:13,040
we've been doing

00:02:09,200 --> 00:02:15,120
and but there is something that

00:02:13,040 --> 00:02:16,879
bothers us when we work with docker and

00:02:15,120 --> 00:02:17,360
goes back to the same idea that we'll

00:02:16,879 --> 00:02:20,480
just

00:02:17,360 --> 00:02:21,360
ship our machine what if what we ship in

00:02:20,480 --> 00:02:24,560
this machine

00:02:21,360 --> 00:02:26,800
is not exactly perfect

00:02:24,560 --> 00:02:28,319
so yeah my name is baruch sadogurski i'm

00:02:26,800 --> 00:02:30,720
the chief sticker officer

00:02:28,319 --> 00:02:32,239
at jfrog if you were in a physical

00:02:30,720 --> 00:02:35,280
conference you'll probably get

00:02:32,239 --> 00:02:37,120
some stickers right about now for now

00:02:35,280 --> 00:02:38,319
i will just play the head of devops

00:02:37,120 --> 00:02:42,400
advocacy role

00:02:38,319 --> 00:02:43,120
and and um we we're going to talk about

00:02:42,400 --> 00:02:45,120
containers

00:02:43,120 --> 00:02:46,239
i met jobaro on twitter as you can see

00:02:45,120 --> 00:02:47,920
here and

00:02:46,239 --> 00:02:49,840
this was supposed to be a joint talk

00:02:47,920 --> 00:02:50,560
with cat cosgrove developer advocate

00:02:49,840 --> 00:02:53,920
with jfrog

00:02:50,560 --> 00:02:55,599
she's amazing and um instead of being

00:02:53,920 --> 00:02:56,400
here with me she's doing a workshop for

00:02:55,599 --> 00:02:59,920
you all

00:02:56,400 --> 00:03:01,920
and um in the same time so this is why

00:02:59,920 --> 00:03:03,360
she's not here but the workshop is

00:03:01,920 --> 00:03:05,360
definitely um

00:03:03,360 --> 00:03:07,200
a great and probably better than this

00:03:05,360 --> 00:03:10,480
talk but here we are

00:03:07,200 --> 00:03:12,159
um the most important slide of this talk

00:03:10,480 --> 00:03:14,080
is the show notes if you go to

00:03:12,159 --> 00:03:17,519
jeffree.com show notes

00:03:14,080 --> 00:03:18,480
and even more precisely to this link

00:03:17,519 --> 00:03:23,360
that i'm going to

00:03:18,480 --> 00:03:27,519
post to you right now in the zoom chat

00:03:23,360 --> 00:03:29,440
and this you will find the page

00:03:27,519 --> 00:03:32,239
that with all the slides which are

00:03:29,440 --> 00:03:34,159
already there the video i will upload

00:03:32,239 --> 00:03:36,159
i will upload as soon as the videos will

00:03:34,159 --> 00:03:37,680
become public

00:03:36,159 --> 00:03:39,760
all the links to everything that i'm

00:03:37,680 --> 00:03:40,959
going to mention and the place to

00:03:39,760 --> 00:03:43,360
comment to rate

00:03:40,959 --> 00:03:44,080
and a very nice ruffle thanking you for

00:03:43,360 --> 00:03:47,440
being here

00:03:44,080 --> 00:03:50,720
i think it's a star wars lego set

00:03:47,440 --> 00:03:53,439
something something very nice um

00:03:50,720 --> 00:03:54,560
so let's talk about uh let's talk about

00:03:53,439 --> 00:03:56,720
best practices

00:03:54,560 --> 00:03:58,319
in promotion pipelines when we're coming

00:03:56,720 --> 00:04:01,040
to um

00:03:58,319 --> 00:04:02,480
talking about a new concept of promotion

00:04:01,040 --> 00:04:04,640
pipelines for something new

00:04:02,480 --> 00:04:06,400
we will argue ourselves do we have

00:04:04,640 --> 00:04:08,640
something that already exists

00:04:06,400 --> 00:04:09,920
how we should change it to match the

00:04:08,640 --> 00:04:12,799
technology at hand

00:04:09,920 --> 00:04:14,959
and with promotion pipelines um it's a

00:04:12,799 --> 00:04:15,680
trivial question and the answer is yes

00:04:14,959 --> 00:04:18,799
of course

00:04:15,680 --> 00:04:23,040
we do pipelines for years for many years

00:04:18,799 --> 00:04:25,680
actually and this is how it looks like

00:04:23,040 --> 00:04:26,800
you have the promotion pyramid in which

00:04:25,680 --> 00:04:28,880
you have

00:04:26,800 --> 00:04:30,320
less and less builds as the build

00:04:28,880 --> 00:04:32,960
progress through tests

00:04:30,320 --> 00:04:34,400
because less and less builds survive the

00:04:32,960 --> 00:04:37,520
most elaborate tests

00:04:34,400 --> 00:04:40,400
all the way to production when they

00:04:37,520 --> 00:04:41,360
the selected few are actually going to

00:04:40,400 --> 00:04:43,120
production

00:04:41,360 --> 00:04:45,520
and if you look at this promotion

00:04:43,120 --> 00:04:47,680
pyramid from the other perspective

00:04:45,520 --> 00:04:50,720
this is how it looks like in a very

00:04:47,680 --> 00:04:54,080
early stage in your build

00:04:50,720 --> 00:04:57,120
your sources are converted to binaries

00:04:54,080 --> 00:05:00,720
thanks to your ci process build process

00:04:57,120 --> 00:05:03,039
and once this is done the promotion

00:05:00,720 --> 00:05:05,600
actually starts and the promotion is

00:05:03,039 --> 00:05:08,880
about take the binaries that you build

00:05:05,600 --> 00:05:11,919
and move them through quality gates

00:05:08,880 --> 00:05:15,120
if the quality

00:05:11,919 --> 00:05:18,400
requirements are met to the next space

00:05:15,120 --> 00:05:21,120
in the next space they will be deployed

00:05:18,400 --> 00:05:22,720
to the relevant environment tested again

00:05:21,120 --> 00:05:25,120
with different kind of

00:05:22,720 --> 00:05:26,080
kind of sets and again promoted through

00:05:25,120 --> 00:05:29,520
quality gates

00:05:26,080 --> 00:05:32,560
to yet next uh level in the pipeline

00:05:29,520 --> 00:05:35,919
if they survived and if we decide

00:05:32,560 --> 00:05:39,919
that um that this is good so this is all

00:05:35,919 --> 00:05:43,199
this is all awesome and this is great

00:05:39,919 --> 00:05:46,400
but docker makes it very

00:05:43,199 --> 00:05:49,919
hard to do it the right thing and very

00:05:46,400 --> 00:05:53,440
easy to do it the wrong thing

00:05:49,919 --> 00:05:56,000
and let's start with easy to do right

00:05:53,440 --> 00:05:56,560
the wrong thing the wrong thing is dean

00:05:56,000 --> 00:05:59,440
in

00:05:56,560 --> 00:06:00,720
in this regard is the docker build and

00:05:59,440 --> 00:06:04,880
docker build

00:06:00,720 --> 00:06:07,360
is um so tempting because it's a

00:06:04,880 --> 00:06:08,960
very simple format right it's just like

00:06:07,360 --> 00:06:11,120
what a dozen of commands

00:06:08,960 --> 00:06:12,080
and you can build almost anything that

00:06:11,120 --> 00:06:15,199
you want

00:06:12,080 --> 00:06:18,240
and it takes very little time

00:06:15,199 --> 00:06:20,080
and it's so tempting to just docker

00:06:18,240 --> 00:06:22,240
build all the things

00:06:20,080 --> 00:06:24,800
and by docker build all the things i

00:06:22,240 --> 00:06:28,240
mean it's tempting to promote

00:06:24,800 --> 00:06:29,520
the docker file instead of promoting the

00:06:28,240 --> 00:06:31,840
actual binary

00:06:29,520 --> 00:06:32,880
if we can docker build in every

00:06:31,840 --> 00:06:35,840
environment

00:06:32,880 --> 00:06:36,319
that sounds like a good idea because

00:06:35,840 --> 00:06:38,800
it's

00:06:36,319 --> 00:06:40,720
very convenient that we don't need to

00:06:38,800 --> 00:06:44,080
carry any binaries around

00:06:40,720 --> 00:06:48,000
we can actually just go ahead re-tag

00:06:44,080 --> 00:06:51,599
our docker file and then you know

00:06:48,000 --> 00:06:51,599
retarget from um

00:06:51,759 --> 00:06:55,599
system test to staging and and and we're

00:06:55,120 --> 00:06:59,520
done

00:06:55,599 --> 00:07:02,800
and just rebuild easy right it is easy

00:06:59,520 --> 00:07:03,280
it's not always good and it's not always

00:07:02,800 --> 00:07:06,639
good

00:07:03,280 --> 00:07:08,800
because um you know what here i wanted

00:07:06,639 --> 00:07:10,960
to do like for for the demonstration

00:07:08,800 --> 00:07:12,479
i wanted to build like a ridiculously

00:07:10,960 --> 00:07:14,240
fragile docker file

00:07:12,479 --> 00:07:16,400
that will break and will produce

00:07:14,240 --> 00:07:17,199
different results and then i went to the

00:07:16,400 --> 00:07:19,840
internet

00:07:17,199 --> 00:07:22,080
and it turns out that i don't need to

00:07:19,840 --> 00:07:24,479
invent anything the internet is full

00:07:22,080 --> 00:07:26,639
of horrible docker files this is one of

00:07:24,479 --> 00:07:28,479
them and this is the real deal if you go

00:07:26,639 --> 00:07:31,840
to jeffree.com show notes

00:07:28,479 --> 00:07:33,680
you will find there a git

00:07:31,840 --> 00:07:35,840
link to this exact file and it's

00:07:33,680 --> 00:07:39,280
horrible and it's horrible because

00:07:35,840 --> 00:07:44,160
every line in this docker file

00:07:39,280 --> 00:07:47,280
refers to a resolution of dependency

00:07:44,160 --> 00:07:49,680
of the latest version and obviously this

00:07:47,280 --> 00:07:52,800
is horrible because it means that

00:07:49,680 --> 00:07:55,520
every time you rebuild there are very

00:07:52,800 --> 00:07:57,120
very high chances that you will end up

00:07:55,520 --> 00:07:58,800
with different results

00:07:57,120 --> 00:08:01,199
this different result might not

00:07:58,800 --> 00:08:04,240
necessarily build break your build

00:08:01,199 --> 00:08:04,879
or break your tests but it will for sure

00:08:04,240 --> 00:08:07,039
be

00:08:04,879 --> 00:08:08,319
not what you intended there to be in the

00:08:07,039 --> 00:08:10,160
first place

00:08:08,319 --> 00:08:11,520
and then you can say well borrow that's

00:08:10,160 --> 00:08:12,319
just because you didn't write it

00:08:11,520 --> 00:08:14,960
correctly

00:08:12,319 --> 00:08:15,840
you can fix it and we can try and fix it

00:08:14,960 --> 00:08:18,960
for example

00:08:15,840 --> 00:08:22,080
we can nail down the base image version

00:08:18,960 --> 00:08:26,160
we can say hey let's just use ubuntu

00:08:22,080 --> 00:08:29,039
1904 does it help

00:08:26,160 --> 00:08:30,319
well to an extent we for sure won't get

00:08:29,039 --> 00:08:33,440
the latest version

00:08:30,319 --> 00:08:36,959
which is what 2010 uh

00:08:33,440 --> 00:08:39,919
2010 oh oh my god it's october yeah 2010

00:08:36,959 --> 00:08:41,360
but it doesn't mean that we will get the

00:08:39,919 --> 00:08:44,680
same 1904

00:08:41,360 --> 00:08:48,880
that was published on april

00:08:44,680 --> 00:08:51,839
2019 because docker tags

00:08:48,880 --> 00:08:54,560
are mutable because people can push on

00:08:51,839 --> 00:08:57,600
canonical as a

00:08:54,560 --> 00:09:00,800
as a publisher of ubuntu can push

00:08:57,600 --> 00:09:04,240
additional changes to an existing

00:09:00,800 --> 00:09:07,440
docker image this is horrible so

00:09:04,240 --> 00:09:10,480
what we can do what really works

00:09:07,440 --> 00:09:13,360
checksums or fingerprints now this

00:09:10,480 --> 00:09:14,480
not gonna change for sure but the

00:09:13,360 --> 00:09:16,959
problem with that

00:09:14,480 --> 00:09:18,560
is that do you know which version of

00:09:16,959 --> 00:09:20,480
ubuntu i'm using now

00:09:18,560 --> 00:09:21,600
do i know which version of ubuntu i'm

00:09:20,480 --> 00:09:23,440
using now

00:09:21,600 --> 00:09:25,279
how can i even know that it's a valid

00:09:23,440 --> 00:09:27,680
checksum and not my cat

00:09:25,279 --> 00:09:29,040
just walks over my keyboard and this is

00:09:27,680 --> 00:09:32,880
what it typed

00:09:29,040 --> 00:09:33,279
we have no idea now docker base image is

00:09:32,880 --> 00:09:37,519
only

00:09:33,279 --> 00:09:40,640
one part of the puzzle how about those

00:09:37,519 --> 00:09:43,519
can we nail down those versions

00:09:40,640 --> 00:09:46,000
well it depends on the tool if you know

00:09:43,519 --> 00:09:49,920
apt-get you might decide if you

00:09:46,000 --> 00:09:51,120
can nail them down or not how about this

00:09:49,920 --> 00:09:54,399
how about

00:09:51,120 --> 00:09:56,240
maven clean install well again if you

00:09:54,399 --> 00:09:59,760
don't know medium you can say well

00:09:56,240 --> 00:10:02,880
probably there should be a way to

00:09:59,760 --> 00:10:05,519
pin the dependencies but i don't know if

00:10:02,880 --> 00:10:08,079
you know maven you will say well yes

00:10:05,519 --> 00:10:09,440
you can pin the dependencies if you know

00:10:08,079 --> 00:10:13,200
maven really well

00:10:09,440 --> 00:10:15,519
you will say well no you probably can't

00:10:13,200 --> 00:10:16,800
and you know what it's all about how

00:10:15,519 --> 00:10:18,880
well you know

00:10:16,800 --> 00:10:19,839
the internals of the commands that you

00:10:18,880 --> 00:10:22,399
are running

00:10:19,839 --> 00:10:23,839
but you know what how about that in the

00:10:22,399 --> 00:10:27,279
end of the day

00:10:23,839 --> 00:10:30,640
no matter what if you rebuild you have a

00:10:27,279 --> 00:10:33,440
very high chance of getting

00:10:30,640 --> 00:10:35,040
different results and this is exactly

00:10:33,440 --> 00:10:38,480
why you have this feeling

00:10:35,040 --> 00:10:39,120
that i'm not sure if what i'm running

00:10:38,480 --> 00:10:43,120
now

00:10:39,120 --> 00:10:46,240
is exactly what i wanted to

00:10:43,120 --> 00:10:48,480
uh to create right and

00:10:46,240 --> 00:10:49,279
because you rebuild it in every

00:10:48,480 --> 00:10:51,839
environment

00:10:49,279 --> 00:10:52,640
and there is a high chance that you will

00:10:51,839 --> 00:10:56,240
end up

00:10:52,640 --> 00:10:59,920
with different results

00:10:56,240 --> 00:11:02,240
so what do we do instead instead we

00:10:59,920 --> 00:11:05,519
create we build promotion pipelines

00:11:02,240 --> 00:11:06,160
that promote immutable sustainable

00:11:05,519 --> 00:11:07,680
binaries

00:11:06,160 --> 00:11:10,320
exactly it's the diagram that i showed

00:11:07,680 --> 00:11:12,480
you in the beginning you build only once

00:11:10,320 --> 00:11:13,839
and then you have this docker image that

00:11:12,480 --> 00:11:17,360
you promote

00:11:13,839 --> 00:11:20,800
through quality gates one after another

00:11:17,360 --> 00:11:22,720
through the environment and i'm

00:11:20,800 --> 00:11:24,880
talking about the gates and what's up

00:11:22,720 --> 00:11:26,240
with those gates well those gates are

00:11:24,880 --> 00:11:28,560
crazy important

00:11:26,240 --> 00:11:29,519
because those gates are the ones that

00:11:28,560 --> 00:11:32,640
guarantee

00:11:29,519 --> 00:11:35,360
that you want to end up with

00:11:32,640 --> 00:11:36,320
images that are premature to a certain

00:11:35,360 --> 00:11:38,640
environment

00:11:36,320 --> 00:11:40,800
in this environment and it's specially

00:11:38,640 --> 00:11:42,800
critical obviously in production

00:11:40,800 --> 00:11:43,920
you need to make sure that whatever gets

00:11:42,800 --> 00:11:47,760
to production

00:11:43,920 --> 00:11:49,760
actually passed the entire pipeline

00:11:47,760 --> 00:11:52,000
and how do you do that how can you

00:11:49,760 --> 00:11:55,200
ensure that those gates are

00:11:52,000 --> 00:11:57,760
as rigid as possible let's see

00:11:55,200 --> 00:11:58,880
a couple of examples basically the

00:11:57,760 --> 00:12:01,920
question that you want to

00:11:58,880 --> 00:12:05,120
answer is how do we oh sorry

00:12:01,920 --> 00:12:08,160
how do we separate development from

00:12:05,120 --> 00:12:11,360
production there are

00:12:08,160 --> 00:12:14,399
number of options option number one

00:12:11,360 --> 00:12:17,519
docker metadata and that's docker label

00:12:14,399 --> 00:12:21,760
in docker you can add

00:12:17,519 --> 00:12:24,399
key value pairs to basically everything

00:12:21,760 --> 00:12:25,200
including docker images and then you can

00:12:24,399 --> 00:12:28,720
say

00:12:25,200 --> 00:12:32,000
my my key will be maturity

00:12:28,720 --> 00:12:35,360
and my value will be

00:12:32,000 --> 00:12:38,800
dev qa staging production

00:12:35,360 --> 00:12:41,760
nice well not bad but

00:12:38,800 --> 00:12:42,160
not great it's not great because it's

00:12:41,760 --> 00:12:45,040
just

00:12:42,160 --> 00:12:46,720
strings and you can mistype them and you

00:12:45,040 --> 00:12:49,920
can forget to annotate

00:12:46,720 --> 00:12:52,240
the images and the admission to the

00:12:49,920 --> 00:12:52,959
runtime cluster of your environment

00:12:52,240 --> 00:12:56,399
cannot

00:12:52,959 --> 00:13:00,560
check the right labels on the right

00:12:56,399 --> 00:13:03,279
images it's too loose

00:13:00,560 --> 00:13:06,240
well then we can use docker repositories

00:13:03,279 --> 00:13:09,440
docker repositories are powerful because

00:13:06,240 --> 00:13:12,560
they allow you to use

00:13:09,440 --> 00:13:14,959
our bug control our bug controls is

00:13:12,560 --> 00:13:16,720
allowing only the right usernames to

00:13:14,959 --> 00:13:18,560
access the right repositories

00:13:16,720 --> 00:13:20,480
and then you can provide different

00:13:18,560 --> 00:13:23,360
credentials to different environments

00:13:20,480 --> 00:13:24,240
and this is how you limit them is it

00:13:23,360 --> 00:13:27,200
better

00:13:24,240 --> 00:13:27,839
probably is it good enough well not

00:13:27,200 --> 00:13:30,240
really

00:13:27,839 --> 00:13:31,760
and it's not really good enough because

00:13:30,240 --> 00:13:34,720
docker registries

00:13:31,760 --> 00:13:35,680
is a docker repositories is a concept

00:13:34,720 --> 00:13:37,839
brought from

00:13:35,680 --> 00:13:39,040
github repositories and github

00:13:37,839 --> 00:13:42,560
repositories

00:13:39,040 --> 00:13:43,279
don't have sorry don't have the maturity

00:13:42,560 --> 00:13:47,040
aspect

00:13:43,279 --> 00:13:50,880
we don't have in github repositories for

00:13:47,040 --> 00:13:54,079
development staging and production

00:13:50,880 --> 00:13:56,880
instead it's a repository project

00:13:54,079 --> 00:13:58,320
and this is how it's supposed to be in

00:13:56,880 --> 00:14:00,880
docker hub as well

00:13:58,320 --> 00:14:02,000
so once we have repositories per project

00:14:00,880 --> 00:14:05,120
we still don't have

00:14:02,000 --> 00:14:08,959
the separation between maturity

00:14:05,120 --> 00:14:10,079
the only way to ensure a really rigid

00:14:08,959 --> 00:14:13,360
quality gates

00:14:10,079 --> 00:14:14,480
is to separate registries per

00:14:13,360 --> 00:14:17,440
environment

00:14:14,480 --> 00:14:17,760
now this actually works when you have

00:14:17,440 --> 00:14:20,560
when

00:14:17,760 --> 00:14:21,440
this one will be your integration

00:14:20,560 --> 00:14:24,240
registry

00:14:21,440 --> 00:14:25,040
your integration cluster will only be

00:14:24,240 --> 00:14:28,480
able

00:14:25,040 --> 00:14:32,560
to pull docker images

00:14:28,480 --> 00:14:35,440
and run docker images from integration

00:14:32,560 --> 00:14:36,880
maturity and obviously in production

00:14:35,440 --> 00:14:39,120
will only see

00:14:36,880 --> 00:14:40,959
this registry as the only register in

00:14:39,120 --> 00:14:41,440
the world it won't know about anything

00:14:40,959 --> 00:14:44,160
else

00:14:41,440 --> 00:14:45,680
and this will guarantee that whatever is

00:14:44,160 --> 00:14:47,440
not here

00:14:45,680 --> 00:14:49,519
not in this registry whatever won't

00:14:47,440 --> 00:14:53,680
promote wasn't promoted

00:14:49,519 --> 00:14:56,800
won't end up in promotion great great

00:14:53,680 --> 00:14:59,199
not so fast with docker

00:14:56,800 --> 00:15:01,440
not so fast with docker because docker

00:14:59,199 --> 00:15:04,160
have kind of strange limitation

00:15:01,440 --> 00:15:05,120
that it was completely unnecessary by

00:15:04,160 --> 00:15:08,160
any means

00:15:05,120 --> 00:15:08,480
but it exists and we have to lose it and

00:15:08,160 --> 00:15:11,680
this

00:15:08,480 --> 00:15:14,800
limitation is what we can

00:15:11,680 --> 00:15:17,120
define as a registry and you can see

00:15:14,800 --> 00:15:20,320
here

00:15:17,120 --> 00:15:23,600
in the tagging command

00:15:20,320 --> 00:15:26,720
of uh of of a docker image

00:15:23,600 --> 00:15:28,240
that you can specify a host a port a

00:15:26,720 --> 00:15:32,079
username

00:15:28,240 --> 00:15:36,000
and then the the name of the image

00:15:32,079 --> 00:15:39,360
there is no way to specify which exactly

00:15:36,000 --> 00:15:42,639
registry on this host this image

00:15:39,360 --> 00:15:44,800
should go to the question is how can we

00:15:42,639 --> 00:15:47,279
have

00:15:44,800 --> 00:15:48,320
more than one registry burst host how

00:15:47,279 --> 00:15:50,720
can we have

00:15:48,320 --> 00:15:51,440
something like this when you have your

00:15:50,720 --> 00:15:54,639
host

00:15:51,440 --> 00:15:56,399
and then you can specify the maturity of

00:15:54,639 --> 00:15:59,120
the exact registry

00:15:56,399 --> 00:16:01,600
that you want your request your pool

00:15:59,120 --> 00:16:04,720
your push your dock to go to

00:16:01,600 --> 00:16:05,440
so it sounds like somewhere this someone

00:16:04,720 --> 00:16:08,399
decided

00:16:05,440 --> 00:16:10,240
sometime that one registry per host

00:16:08,399 --> 00:16:13,759
should be enough for everybody

00:16:10,240 --> 00:16:16,800
but i hope i convinced you that is not

00:16:13,759 --> 00:16:19,199
that we want more than one host so what

00:16:16,800 --> 00:16:19,199
do we do

00:16:19,519 --> 00:16:24,480
we can use virtual posts ports and

00:16:22,639 --> 00:16:25,040
virtual hosts we can do something like

00:16:24,480 --> 00:16:28,399
that

00:16:25,040 --> 00:16:30,000
so this is our command docker tag host

00:16:28,399 --> 00:16:32,959
port and the tag name

00:16:30,000 --> 00:16:35,680
and this is how it translated to the

00:16:32,959 --> 00:16:38,560
request to the http request

00:16:35,680 --> 00:16:39,199
that goes into the registry and instead

00:16:38,560 --> 00:16:42,480
of going

00:16:39,199 --> 00:16:45,279
there we want it to go to

00:16:42,480 --> 00:16:45,279
docker dev

00:16:45,519 --> 00:16:49,279
how can we do it we can do a url

00:16:48,240 --> 00:16:53,120
rewriting

00:16:49,279 --> 00:16:57,279
and this is an example from nginx

00:16:53,120 --> 00:17:01,040
similar examples can you can find for

00:16:57,279 --> 00:17:04,480
apache httpd and for

00:17:01,040 --> 00:17:08,559
hd proxy and others but the idea is that

00:17:04,480 --> 00:17:11,679
this port 5001 when it gets the request

00:17:08,559 --> 00:17:15,520
it will know to forward it to docker dev

00:17:11,679 --> 00:17:16,640
5002 will know how to forward it to

00:17:15,520 --> 00:17:20,160
docker staging

00:17:16,640 --> 00:17:24,319
5000 that will be our docker prod

00:17:20,160 --> 00:17:26,799
etc etc so we can do that and it works

00:17:24,319 --> 00:17:28,400
but it's a lot of hassle it means that

00:17:26,799 --> 00:17:32,000
you need to have this

00:17:28,400 --> 00:17:35,840
another component this http rewriting

00:17:32,000 --> 00:17:36,720
tool um kind of in front of your

00:17:35,840 --> 00:17:39,760
registry

00:17:36,720 --> 00:17:41,360
and it's just like another thing to take

00:17:39,760 --> 00:17:44,559
care of and babysit

00:17:41,360 --> 00:17:45,760
instead we can abuse something that we

00:17:44,559 --> 00:17:48,880
don't

00:17:45,760 --> 00:17:49,600
use outside of the context of the docker

00:17:48,880 --> 00:17:53,120
hub

00:17:49,600 --> 00:17:56,400
and that will be the user the username

00:17:53,120 --> 00:17:59,520
is intended for docker hub because

00:17:56,400 --> 00:18:00,559
it's intended to specify who are the

00:17:59,520 --> 00:18:03,919
owners

00:18:00,559 --> 00:18:06,799
of a particular image

00:18:03,919 --> 00:18:07,919
so in this example we have httpd that

00:18:06,799 --> 00:18:11,200
maintained by

00:18:07,919 --> 00:18:14,559
fedora the ubuntu that we looked earlier

00:18:11,200 --> 00:18:17,039
their username will be canonical great

00:18:14,559 --> 00:18:18,000
but when we everything is ours and we

00:18:17,039 --> 00:18:20,320
manage our own

00:18:18,000 --> 00:18:22,720
images and when we talk about promotion

00:18:20,320 --> 00:18:24,720
pipeline is for images that we build

00:18:22,720 --> 00:18:25,919
we don't need to specify the users it's

00:18:24,720 --> 00:18:29,120
our it's us

00:18:25,919 --> 00:18:32,160
so instead we can use this token

00:18:29,120 --> 00:18:36,240
to specify the maturity of the

00:18:32,160 --> 00:18:40,080
registry we want this docker image

00:18:36,240 --> 00:18:43,840
to be in and this is how we can have

00:18:40,080 --> 00:18:47,440
marriage three hosts 5000 and then dev

00:18:43,840 --> 00:18:50,720
testing staging prod whatever we need

00:18:47,440 --> 00:18:51,919
so this is great now now you start

00:18:50,720 --> 00:18:54,720
thinking okay

00:18:51,919 --> 00:18:55,440
now i have multiple images in the same

00:18:54,720 --> 00:19:00,480
tool

00:18:55,440 --> 00:19:05,600
under different proxies how do i promote

00:19:00,480 --> 00:19:07,840
from one docker docker proxy to another

00:19:05,600 --> 00:19:09,679
because when they were in different

00:19:07,840 --> 00:19:12,640
hosts

00:19:09,679 --> 00:19:13,520
you had to pay the network penalty

00:19:12,640 --> 00:19:15,760
anyway

00:19:13,520 --> 00:19:16,559
because you download from one host you

00:19:15,760 --> 00:19:18,799
re-tag

00:19:16,559 --> 00:19:21,360
you push it to another host there are

00:19:18,799 --> 00:19:24,400
different hosts you pay the enterprise

00:19:21,360 --> 00:19:26,559
fine but now when all of them

00:19:24,400 --> 00:19:28,080
are actually in the same tool

00:19:26,559 --> 00:19:31,200
downloading them

00:19:28,080 --> 00:19:32,559
renaming them and pushing them back to

00:19:31,200 --> 00:19:34,799
the same place

00:19:32,559 --> 00:19:35,679
doesn't mean and it doesn't doesn't mean

00:19:34,799 --> 00:19:39,120
anything

00:19:35,679 --> 00:19:39,919
doesn't make any sense and the problem

00:19:39,120 --> 00:19:43,760
is here

00:19:39,919 --> 00:19:45,840
that you cannot work around it with like

00:19:43,760 --> 00:19:47,039
tools like engineering proxy or any

00:19:45,840 --> 00:19:50,160
other hacks you

00:19:47,039 --> 00:19:51,280
actually need tool that supports this

00:19:50,160 --> 00:19:54,720
promotion

00:19:51,280 --> 00:19:58,000
between different docker registries

00:19:54,720 --> 00:20:01,360
within one tool and there are numbers

00:19:58,000 --> 00:20:04,480
of those tools and

00:20:01,360 --> 00:20:05,520
the terminology might differ a little

00:20:04,480 --> 00:20:07,600
bit between them

00:20:05,520 --> 00:20:09,360
the concept is the same so this is the

00:20:07,600 --> 00:20:12,720
example and the terminology

00:20:09,360 --> 00:20:15,280
of the jfrock tools which are the um

00:20:12,720 --> 00:20:16,559
j4 container registry which is free and

00:20:15,280 --> 00:20:18,480
supports all that

00:20:16,559 --> 00:20:19,600
the jeffree platform which has a

00:20:18,480 --> 00:20:21,440
three-tier

00:20:19,600 --> 00:20:24,159
and supports all that and also jeff

00:20:21,440 --> 00:20:25,039
rogerty factory all the j4 tools support

00:20:24,159 --> 00:20:27,200
exactly that

00:20:25,039 --> 00:20:29,360
and there are others but this is just

00:20:27,200 --> 00:20:32,240
what i use for example obviously

00:20:29,360 --> 00:20:34,000
so what we have here are different types

00:20:32,240 --> 00:20:36,960
of registries so first of all we

00:20:34,000 --> 00:20:38,320
have the remote proxy docker hub remote

00:20:36,960 --> 00:20:41,600
the remote proxy

00:20:38,320 --> 00:20:42,880
was a convenience feature for us not to

00:20:41,600 --> 00:20:46,159
go to docker hub

00:20:42,880 --> 00:20:49,360
every day but now and in

00:20:46,159 --> 00:20:50,080
11 days from now it actually becomes one

00:20:49,360 --> 00:20:53,120
of the most

00:20:50,080 --> 00:20:56,080
critical features of tools like

00:20:53,120 --> 00:20:56,480
j4 container registry because it allows

00:20:56,080 --> 00:20:59,520
you

00:20:56,480 --> 00:21:00,240
avoiding the new limitations that docker

00:20:59,520 --> 00:21:04,000
hub

00:21:00,240 --> 00:21:07,520
has starting november 1st the uh

00:21:04,000 --> 00:21:10,640
throttling on amount of pools

00:21:07,520 --> 00:21:13,679
that you can do and the deletion

00:21:10,640 --> 00:21:16,880
of old images it actually solves

00:21:13,679 --> 00:21:19,679
both paints just by sitting there and

00:21:16,880 --> 00:21:20,559
caching your images that you pulled from

00:21:19,679 --> 00:21:22,799
docker hub

00:21:20,559 --> 00:21:25,120
and it does that because obviously they

00:21:22,799 --> 00:21:27,919
won't be deleted from your local cache

00:21:25,120 --> 00:21:28,240
and also after the first request when

00:21:27,919 --> 00:21:30,720
you

00:21:28,240 --> 00:21:31,520
actually proxied it all the subsequent

00:21:30,720 --> 00:21:34,559
requests

00:21:31,520 --> 00:21:37,600
to this docker image will stop here

00:21:34,559 --> 00:21:40,400
in your docker remote proxy and

00:21:37,600 --> 00:21:42,480
won't get all the way to docker hub so

00:21:40,400 --> 00:21:44,559
this is kind of you you get protected so

00:21:42,480 --> 00:21:47,840
this is like a remote

00:21:44,559 --> 00:21:48,559
other types of proxies are the local

00:21:47,840 --> 00:21:51,360
ones

00:21:48,559 --> 00:21:52,159
that we have here like four docker dev

00:21:51,360 --> 00:21:55,120
local

00:21:52,159 --> 00:21:56,400
docker test local docker stage local and

00:21:55,120 --> 00:21:58,559
docker pro local

00:21:56,400 --> 00:21:59,840
and those are your this is your

00:21:58,559 --> 00:22:02,799
promotion pipeline

00:21:59,840 --> 00:22:03,760
those are the different registries and

00:22:02,799 --> 00:22:07,360
the

00:22:03,760 --> 00:22:11,200
images will get here by deploying

00:22:07,360 --> 00:22:12,960
from your ci to um a virtual repository

00:22:11,200 --> 00:22:15,120
virtual proxy and virtual proxy is like

00:22:12,960 --> 00:22:18,080
kind of aggregation of different ones

00:22:15,120 --> 00:22:18,480
so once it's deployed to this one it

00:22:18,080 --> 00:22:21,760
will

00:22:18,480 --> 00:22:22,480
only always get to the beginning of the

00:22:21,760 --> 00:22:25,520
pipeline

00:22:22,480 --> 00:22:28,559
to the dev proxy and then your

00:22:25,520 --> 00:22:32,640
cicd tool your pipeline will trigger

00:22:28,559 --> 00:22:36,000
promotion using rest api or jfrog cli

00:22:32,640 --> 00:22:39,120
and this is a local promotion the images

00:22:36,000 --> 00:22:40,000
are not moving anywhere they are in the

00:22:39,120 --> 00:22:43,120
same

00:22:40,000 --> 00:22:46,000
storage they are just

00:22:43,120 --> 00:22:47,120
uh change their visibility or where they

00:22:46,000 --> 00:22:49,679
appear

00:22:47,120 --> 00:22:51,039
and then when you have your runtime

00:22:49,679 --> 00:22:54,400
environments

00:22:51,039 --> 00:22:56,880
for different um for different

00:22:54,400 --> 00:22:57,840
maturity you have your dev cluster your

00:22:56,880 --> 00:23:01,200
test cluster

00:22:57,840 --> 00:23:04,080
etc those clusters only see

00:23:01,200 --> 00:23:05,039
one registry your production cluster

00:23:04,080 --> 00:23:07,840
only knows

00:23:05,039 --> 00:23:09,280
about the docker pro local it doesn't

00:23:07,840 --> 00:23:11,200
know about anything else

00:23:09,280 --> 00:23:12,720
and this is obviously how you can

00:23:11,200 --> 00:23:15,679
guarantee that

00:23:12,720 --> 00:23:16,720
the maturity of what you see in

00:23:15,679 --> 00:23:19,520
production

00:23:16,720 --> 00:23:20,480
is always went through the entire

00:23:19,520 --> 00:23:23,600
pipeline

00:23:20,480 --> 00:23:27,039
and was served from docker

00:23:23,600 --> 00:23:28,720
docker prolog so this is the win-win-win

00:23:27,039 --> 00:23:30,320
that we are looking for you have a

00:23:28,720 --> 00:23:31,600
single point of access for multiple

00:23:30,320 --> 00:23:34,159
registers when needed

00:23:31,600 --> 00:23:35,039
that's the virtual aggregation proxy you

00:23:34,159 --> 00:23:37,600
have your

00:23:35,039 --> 00:23:39,520
completely isolated environments and

00:23:37,600 --> 00:23:42,000
that's the different registries

00:23:39,520 --> 00:23:43,760
that the random environments only see

00:23:42,000 --> 00:23:46,799
one registry at the time

00:23:43,760 --> 00:23:47,919
and you have the immediate and free

00:23:46,799 --> 00:23:52,000
promotion

00:23:47,919 --> 00:23:55,520
that obviously guarantees that you don't

00:23:52,000 --> 00:23:58,880
move any uh docker images around when

00:23:55,520 --> 00:24:02,240
you need to move it to the next

00:23:58,880 --> 00:24:05,919
promotion stage so and

00:24:02,240 --> 00:24:08,960
we spoke about how you protect

00:24:05,919 --> 00:24:11,600
your uh your

00:24:08,960 --> 00:24:12,640
from images your base images that you

00:24:11,600 --> 00:24:16,159
downloaded

00:24:12,640 --> 00:24:18,720
from a docker hub and now you

00:24:16,159 --> 00:24:19,440
own the copy and you are protected

00:24:18,720 --> 00:24:21,679
against

00:24:19,440 --> 00:24:22,720
any kind of deletions or limitations on

00:24:21,679 --> 00:24:25,120
the other side

00:24:22,720 --> 00:24:26,880
which is which is great but what about

00:24:25,120 --> 00:24:29,120
the rest of the dependencies

00:24:26,880 --> 00:24:30,840
base images are only one type of the

00:24:29,120 --> 00:24:33,600
dependencies

00:24:30,840 --> 00:24:36,480
and uh um

00:24:33,600 --> 00:24:37,520
so here here how it works right you can

00:24:36,480 --> 00:24:40,640
see here

00:24:37,520 --> 00:24:44,640
the um how the base images

00:24:40,640 --> 00:24:45,200
are safely stored in the docker remote

00:24:44,640 --> 00:24:47,760
cache

00:24:45,200 --> 00:24:48,720
but you can also store other

00:24:47,760 --> 00:24:52,000
dependencies

00:24:48,720 --> 00:24:52,960
in other type of repositories inside the

00:24:52,000 --> 00:24:55,840
same tool

00:24:52,960 --> 00:24:57,279
so for example or not for example you

00:24:55,840 --> 00:25:00,320
really should care about

00:24:57,279 --> 00:25:02,400
are your infrastructure dependencies

00:25:00,320 --> 00:25:04,240
and this is a java application so

00:25:02,400 --> 00:25:06,480
obviously you need to take

00:25:04,240 --> 00:25:07,520
to make sure that you are caching your

00:25:06,480 --> 00:25:10,320
jdk

00:25:07,520 --> 00:25:10,960
and your web server in this in this

00:25:10,320 --> 00:25:14,000
example

00:25:10,960 --> 00:25:17,440
but also your application files and here

00:25:14,000 --> 00:25:19,679
is for example uh

00:25:17,440 --> 00:25:21,279
um here's for example the your

00:25:19,679 --> 00:25:25,360
application the web

00:25:21,279 --> 00:25:27,840
the web service 1.1.2 now this all works

00:25:25,360 --> 00:25:29,360
in docker registry even in the like

00:25:27,840 --> 00:25:32,799
jeffrey container registry

00:25:29,360 --> 00:25:33,679
that doesn't support other repository

00:25:32,799 --> 00:25:36,480
types except

00:25:33,679 --> 00:25:37,760
of a docker helm and generic that's

00:25:36,480 --> 00:25:39,919
example to generic

00:25:37,760 --> 00:25:41,279
but if you look like on the universal

00:25:39,919 --> 00:25:43,120
artifact repository

00:25:41,279 --> 00:25:44,559
like jeffree artifactory or jeffrey

00:25:43,120 --> 00:25:47,760
platform and it

00:25:44,559 --> 00:25:48,640
actually has a native support for your

00:25:47,760 --> 00:25:51,360
dependencies

00:25:48,640 --> 00:25:52,640
you don't need to save them as just

00:25:51,360 --> 00:25:56,080
generic files

00:25:52,640 --> 00:26:00,480
instead you can work with it

00:25:56,080 --> 00:26:03,039
as your dependency management and uh

00:26:00,480 --> 00:26:04,559
saving the special type of artifact that

00:26:03,039 --> 00:26:06,559
your dependencies are

00:26:04,559 --> 00:26:08,159
and here you can see here is your java

00:26:06,559 --> 00:26:11,039
where is it the main

00:26:08,159 --> 00:26:13,760
thing here is gradle here is maven but

00:26:11,039 --> 00:26:17,840
also others like go

00:26:13,760 --> 00:26:21,600
and javascript npm and

00:26:17,840 --> 00:26:25,440
net and python and you name it

00:26:21,600 --> 00:26:28,320
right so that's another very important

00:26:25,440 --> 00:26:29,760
concept to to remember you need to own

00:26:28,320 --> 00:26:32,640
your dependencies

00:26:29,760 --> 00:26:34,080
your base image your infrastructure up

00:26:32,640 --> 00:26:35,679
and your

00:26:34,080 --> 00:26:38,240
application files your application

00:26:35,679 --> 00:26:42,240
dependencies and your application files

00:26:38,240 --> 00:26:44,640
and you have to own them because

00:26:42,240 --> 00:26:45,600
you don't know if the source of those

00:26:44,640 --> 00:26:47,760
dependencies

00:26:45,600 --> 00:26:49,679
will be up and running and it will still

00:26:47,760 --> 00:26:53,120
serve you your dependencies

00:26:49,679 --> 00:26:55,200
half a year from now or whatever and

00:26:53,120 --> 00:26:57,840
the last concept that i want to talk to

00:26:55,200 --> 00:27:01,360
you about you remember how we spoke

00:26:57,840 --> 00:27:04,480
that we last version is bad

00:27:01,360 --> 00:27:05,840
and you shouldn't rely on it isn't it a

00:27:04,480 --> 00:27:08,960
shame that it's bad

00:27:05,840 --> 00:27:13,200
isn't it like very convenient there

00:27:08,960 --> 00:27:17,200
is a trade-off between static typing

00:27:13,200 --> 00:27:17,760
and dynamic typing so the static typing

00:27:17,200 --> 00:27:21,679
that

00:27:17,760 --> 00:27:24,799
kind of the case i presented you earlier

00:27:21,679 --> 00:27:28,640
it's assigned once and it remains

00:27:24,799 --> 00:27:29,279
unchanged so you will use your build

00:27:28,640 --> 00:27:33,039
number

00:27:29,279 --> 00:27:36,080
or some kind of a generator to assign

00:27:33,039 --> 00:27:40,080
a version or tag of a version to

00:27:36,080 --> 00:27:42,080
your artifact and you can always refer

00:27:40,080 --> 00:27:43,600
to this version and make sure that you

00:27:42,080 --> 00:27:46,240
get the same artifact

00:27:43,600 --> 00:27:47,760
and this is good because it provides

00:27:46,240 --> 00:27:50,799
reproducible builds

00:27:47,760 --> 00:27:53,360
your dependency is always the same

00:27:50,799 --> 00:27:55,440
it never changes and that's obviously a

00:27:53,360 --> 00:27:59,600
great benefit

00:27:55,440 --> 00:28:03,840
but dynamic tagging has its own benefits

00:27:59,600 --> 00:28:06,880
first of all dynamic tagging kind of

00:28:03,840 --> 00:28:09,360
gives you the latest good state

00:28:06,880 --> 00:28:10,000
image and if you remember when we spoke

00:28:09,360 --> 00:28:13,200
about

00:28:10,000 --> 00:28:17,120
canonical that might push more

00:28:13,200 --> 00:28:20,000
to the existing tag on 1904

00:28:17,120 --> 00:28:21,440
that's not because they evil and want to

00:28:20,000 --> 00:28:23,679
break your builds

00:28:21,440 --> 00:28:24,880
that's because they want to maintain

00:28:23,679 --> 00:28:27,520
latest good state

00:28:24,880 --> 00:28:28,720
image and if for example a security

00:28:27,520 --> 00:28:31,840
vulnerability

00:28:28,720 --> 00:28:34,720
is discovered on 1904

00:28:31,840 --> 00:28:35,840
canonical will push the fixes to this

00:28:34,720 --> 00:28:39,919
vulnerability

00:28:35,840 --> 00:28:41,120
to the same tag so yes the 1904 that you

00:28:39,919 --> 00:28:44,240
will push today

00:28:41,120 --> 00:28:45,520
will be different from 1904 that was in

00:28:44,240 --> 00:28:48,720
april last year

00:28:45,520 --> 00:28:52,399
but that's for a good reason so

00:28:48,720 --> 00:28:55,919
this is important and we want that

00:28:52,399 --> 00:28:58,559
and obviously another benefit of

00:28:55,919 --> 00:29:00,720
having dynamic tagging is these views

00:28:58,559 --> 00:29:02,799
it's very easy for me to say

00:29:00,720 --> 00:29:04,000
just give me the latest version what you

00:29:02,799 --> 00:29:06,080
think it's good

00:29:04,000 --> 00:29:07,919
and it's good enough for me and

00:29:06,080 --> 00:29:12,240
sometimes we want

00:29:07,919 --> 00:29:15,520
this ease of use today so how can we

00:29:12,240 --> 00:29:18,559
have the cake and eat it too um

00:29:15,520 --> 00:29:20,320
well we need a double tagging

00:29:18,559 --> 00:29:22,720
double tagging means that we will

00:29:20,320 --> 00:29:26,320
actually have two versions

00:29:22,720 --> 00:29:30,720
for um possibly two versions

00:29:26,320 --> 00:29:33,840
for a docker image but how can it

00:29:30,720 --> 00:29:36,640
possibly done and how can we know

00:29:33,840 --> 00:29:37,840
that it's the same image and here a

00:29:36,640 --> 00:29:41,279
metadata

00:29:37,840 --> 00:29:42,480
can help very much so we spoke about

00:29:41,279 --> 00:29:45,840
docker labeling

00:29:42,480 --> 00:29:48,399
that's one way or you can use your tool

00:29:45,840 --> 00:29:48,960
to do it automatically for you and here

00:29:48,399 --> 00:29:51,520
again

00:29:48,960 --> 00:29:52,720
an example of jeffrey container registry

00:29:51,520 --> 00:29:56,240
in which you can

00:29:52,720 --> 00:29:57,039
see that we have a latest docker image

00:29:56,240 --> 00:30:00,720
here

00:29:57,039 --> 00:30:04,640
but we actually know exactly to which

00:30:00,720 --> 00:30:08,240
static tag or final immutable version

00:30:04,640 --> 00:30:11,679
this latest refers to and that will be

00:30:08,240 --> 00:30:12,480
26 and it might not even be the real

00:30:11,679 --> 00:30:16,080
latest

00:30:12,480 --> 00:30:19,679
we might keep building 27 and 28

00:30:16,080 --> 00:30:22,000
and whatever versions we want and then

00:30:19,679 --> 00:30:22,960
is it latest or not what the latest

00:30:22,000 --> 00:30:26,240
refers to

00:30:22,960 --> 00:30:29,600
it's very confusing but once you have

00:30:26,240 --> 00:30:33,200
this metadata set you are

00:30:29,600 --> 00:30:35,760
actually protected from overriding

00:30:33,200 --> 00:30:36,880
uh sorry from from not knowing what

00:30:35,760 --> 00:30:40,000
latest is

00:30:36,880 --> 00:30:42,720
and the beauty of this part

00:30:40,000 --> 00:30:43,520
is that the management of this double

00:30:42,720 --> 00:30:46,880
tagging

00:30:43,520 --> 00:30:50,080
is completely automated you can

00:30:46,880 --> 00:30:53,679
assign this property when you

00:30:50,080 --> 00:30:56,720
build your image or in any other way

00:30:53,679 --> 00:31:00,000
by using um again

00:30:56,720 --> 00:31:03,279
jfrog um as cli or

00:31:00,000 --> 00:31:04,080
the rest api or even in the ui if you

00:31:03,279 --> 00:31:06,799
want to

00:31:04,080 --> 00:31:07,919
and then you can decide how do you

00:31:06,799 --> 00:31:10,960
re-tag

00:31:07,919 --> 00:31:14,080
the versions and how do you

00:31:10,960 --> 00:31:15,440
associate dynamic tagging with the

00:31:14,080 --> 00:31:18,159
static tagging

00:31:15,440 --> 00:31:19,519
and then the consumption of that is also

00:31:18,159 --> 00:31:22,640
completely automated

00:31:19,519 --> 00:31:26,000
you can read this api

00:31:22,640 --> 00:31:28,559
by any automated tool

00:31:26,000 --> 00:31:29,039
again everything that i mentioned and

00:31:28,559 --> 00:31:32,799
then

00:31:29,039 --> 00:31:35,600
it might be a part of your pipeline

00:31:32,799 --> 00:31:36,480
and you can say okay someone asked for

00:31:35,600 --> 00:31:40,240
latest

00:31:36,480 --> 00:31:43,519
don't just servant the

00:31:40,240 --> 00:31:45,840
tag that is called

00:31:43,519 --> 00:31:46,640
latest because it might not be the

00:31:45,840 --> 00:31:49,440
latest

00:31:46,640 --> 00:31:51,360
first check what the version is if it's

00:31:49,440 --> 00:31:52,480
really latest if it's not maybe give

00:31:51,360 --> 00:31:54,240
them a warning

00:31:52,480 --> 00:31:56,720
you're trying to download the latest but

00:31:54,240 --> 00:32:00,159
it's actually not etc etc

00:31:56,720 --> 00:32:03,600
so basically once you have more metadata

00:32:00,159 --> 00:32:06,080
you can do more stuff so with that

00:32:03,600 --> 00:32:07,360
just to conclude what we spoke about you

00:32:06,080 --> 00:32:10,000
build only once

00:32:07,360 --> 00:32:12,080
you separate the environments you

00:32:10,000 --> 00:32:15,200
promote what you have built

00:32:12,080 --> 00:32:18,640
and not rebuild on every stage you

00:32:15,200 --> 00:32:20,159
own your dependencies this is kind of

00:32:18,640 --> 00:32:23,840
the big four

00:32:20,159 --> 00:32:26,960
and with that i'm at jaybar on twitter

00:32:23,840 --> 00:32:30,320
this is all things open yay

00:32:26,960 --> 00:32:34,960
and um jeffrey from show notes that's

00:32:30,320 --> 00:32:38,080
the url for getting the slides the video

00:32:34,960 --> 00:32:38,559
once it's published and all the all the

00:32:38,080 --> 00:32:41,679
links

00:32:38,559 --> 00:32:43,120
everything that i mentioned um including

00:32:41,679 --> 00:32:46,000
the docker file that you

00:32:43,120 --> 00:32:46,799
hated or i hope you hated um and the

00:32:46,000 --> 00:32:49,679
ruffle

00:32:46,799 --> 00:32:50,000
the amazing lego set and some t-shirts

00:32:49,679 --> 00:32:53,039
and

00:32:50,000 --> 00:32:53,760
tons of other goodies the url to the

00:32:53,039 --> 00:32:56,399
show notes

00:32:53,760 --> 00:32:57,360
is in the chat so you can go there just

00:32:56,399 --> 00:32:59,840
by clicking it

00:32:57,360 --> 00:33:00,480
in the chat with that thank you very

00:32:59,840 --> 00:33:02,720
much

00:33:00,480 --> 00:33:03,840
questions if you have any i will be more

00:33:02,720 --> 00:33:08,080
than happy

00:33:03,840 --> 00:33:11,760
to answer all right thank you brooke um

00:33:08,080 --> 00:33:15,039
i don't see any questions posted um

00:33:11,760 --> 00:33:17,679
i think we should probably just give the

00:33:15,039 --> 00:33:19,279
audience a couple minutes to maybe post

00:33:17,679 --> 00:33:22,240
some questions if they have any

00:33:19,279 --> 00:33:24,240
absolutely um thank you so much for

00:33:22,240 --> 00:33:27,840
covering that topic

00:33:24,240 --> 00:33:32,080
uh it's a it's a different take on

00:33:27,840 --> 00:33:34,480
on distributing uh container images so

00:33:32,080 --> 00:33:36,480
yeah it's always interesting to to kind

00:33:34,480 --> 00:33:38,880
of see a different take on that and

00:33:36,480 --> 00:33:40,080
i'll definitely be checking out some of

00:33:38,880 --> 00:33:42,480
those resources you

00:33:40,080 --> 00:33:43,919
you posted um did you send the link in

00:33:42,480 --> 00:33:45,919
uh the chat yet

00:33:43,919 --> 00:33:47,600
yeah yeah i did i did it when i first

00:33:45,919 --> 00:33:48,640
mentioned the the show notes in the

00:33:47,600 --> 00:33:51,279
beginning of the talk

00:33:48,640 --> 00:33:52,399
i will actually post it again yeah maybe

00:33:51,279 --> 00:33:56,559
that right now

00:33:52,399 --> 00:33:59,600
there we go all right um

00:33:56,559 --> 00:34:02,240
anyone have any questions oh you got a

00:33:59,600 --> 00:34:06,080
good awesome talk um

00:34:02,240 --> 00:34:08,000
all right okay anyway i think it's it's

00:34:06,080 --> 00:34:08,560
quite clear now that you have to invite

00:34:08,000 --> 00:34:11,760
me to

00:34:08,560 --> 00:34:13,200
to devops days i mean look hey

00:34:11,760 --> 00:34:15,760
i you know i'm only one of the

00:34:13,200 --> 00:34:17,919
organizers so you know feel free to

00:34:15,760 --> 00:34:20,000
feel free to figure it out we figured

00:34:17,919 --> 00:34:23,280
out how to save the chat

00:34:20,000 --> 00:34:26,240
now let's do that

00:34:23,280 --> 00:34:27,119
no i'm just kidding i i understand the

00:34:26,240 --> 00:34:29,599
beauty of the

00:34:27,119 --> 00:34:30,159
of devops days generally is that it's

00:34:29,599 --> 00:34:32,480
really

00:34:30,159 --> 00:34:33,359
limited in the time that you know that

00:34:32,480 --> 00:34:36,079
speakers are

00:34:33,359 --> 00:34:38,000
preaching from the uh from the from the

00:34:36,079 --> 00:34:41,760
scene and everything else it's kind of

00:34:38,000 --> 00:34:44,399
um just open spaces and

00:34:41,760 --> 00:34:45,440
and this is this is great but i will

00:34:44,399 --> 00:34:48,079
definitely

00:34:45,440 --> 00:34:48,800
yeah please please do and um another

00:34:48,079 --> 00:34:51,119
thing that we

00:34:48,800 --> 00:34:52,639
we like to do on devops days is we like

00:34:51,119 --> 00:34:56,079
to bring in

00:34:52,639 --> 00:34:58,480
and and encourage local folks right this

00:34:56,079 --> 00:35:00,560
is an opportunity to bring more

00:34:58,480 --> 00:35:02,400
the local community together right so

00:35:00,560 --> 00:35:04,240
absolutely not to say that you know we

00:35:02,400 --> 00:35:05,520
won't be accepting speakers from all

00:35:04,240 --> 00:35:06,880
over the place understand that you

00:35:05,520 --> 00:35:09,359
already went

00:35:06,880 --> 00:35:10,079
into the excuses why you rejected me

00:35:09,359 --> 00:35:12,800
okay

00:35:10,079 --> 00:35:12,800
no no no no no no

00:35:13,440 --> 00:35:16,960
there we go yes and i encourage everyone

00:35:16,000 --> 00:35:22,050
to

00:35:16,960 --> 00:35:23,200
talk yeah and here we do have a question

00:35:22,050 --> 00:35:25,680
[Music]

00:35:23,200 --> 00:35:27,280
yeah yeah we do have a question um is

00:35:25,680 --> 00:35:27,920
there a resource for more information

00:35:27,280 --> 00:35:31,760
about

00:35:27,920 --> 00:35:35,040
double taking absolutely um let me check

00:35:31,760 --> 00:35:38,880
if i remember correctly we even

00:35:35,040 --> 00:35:41,440
have a white paper on that and

00:35:38,880 --> 00:35:42,960
uh let me see if i can find it real

00:35:41,440 --> 00:35:45,839
quick

00:35:42,960 --> 00:35:45,839
uh

00:35:51,200 --> 00:35:54,880
give me one sec i'll just try and and

00:35:54,000 --> 00:35:57,680
search for it

00:35:54,880 --> 00:35:58,720
but in any way i can give you some

00:35:57,680 --> 00:36:02,000
pointers now

00:35:58,720 --> 00:36:05,200
uh and the the way it works basically

00:36:02,000 --> 00:36:06,630
it's just uh you use rest api

00:36:05,200 --> 00:36:08,320
or um

00:36:06,630 --> 00:36:11,440
[Music]

00:36:08,320 --> 00:36:14,720
or or jfrox cli to

00:36:11,440 --> 00:36:17,440
uh provide properties which refer

00:36:14,720 --> 00:36:18,160
to the other tagging like i showed you

00:36:17,440 --> 00:36:21,760
you have a

00:36:18,160 --> 00:36:25,119
latest but you also say it refers to

00:36:21,760 --> 00:36:26,240
the tag 26 or whatever whatever other

00:36:25,119 --> 00:36:29,599
tag it is

00:36:26,240 --> 00:36:32,320
and then this is how you have two

00:36:29,599 --> 00:36:34,960
images you have your 26 submitted you

00:36:32,320 --> 00:36:37,040
copied it over and the game copy is free

00:36:34,960 --> 00:36:38,240
because the storage is the same so you

00:36:37,040 --> 00:36:41,359
copied it over as

00:36:38,240 --> 00:36:44,960
latest and then you re-tagged it

00:36:41,359 --> 00:36:45,839
and made it uh sorry and then you add

00:36:44,960 --> 00:36:49,119
this property

00:36:45,839 --> 00:36:49,760
and said well this points to the latest

00:36:49,119 --> 00:36:54,160
points

00:36:49,760 --> 00:36:54,430
226 and um i'm trying to find

00:36:54,160 --> 00:36:57,580
the

00:36:54,430 --> 00:36:57,580
[Music]

00:36:59,280 --> 00:37:03,680
what will be the best resource

00:37:04,400 --> 00:37:07,599
yeah i know i know when to point you

00:37:06,320 --> 00:37:10,240
where to point you

00:37:07,599 --> 00:37:10,240
let me see

00:37:16,800 --> 00:37:23,839
all right here we go

00:37:30,720 --> 00:37:34,320
yeah you got five minutes while you're

00:37:32,079 --> 00:37:36,320
searching that uh normal uh actually has

00:37:34,320 --> 00:37:38,240
some computer issues so he has to reboot

00:37:36,320 --> 00:37:41,680
so i'll be taking over

00:37:38,240 --> 00:37:46,400
so all right okay no worries

00:37:41,680 --> 00:37:48,160
no worries uh

00:37:46,400 --> 00:37:50,079
let me see if i can find it maybe i will

00:37:48,160 --> 00:37:51,520
just find an example and that will be

00:37:50,079 --> 00:37:53,839
even better

00:37:51,520 --> 00:37:53,839
um

00:37:58,720 --> 00:38:01,839
maybe it's here

00:38:02,839 --> 00:38:07,440
yes uh steve

00:38:05,280 --> 00:38:09,040
this is the last session for today for

00:38:07,440 --> 00:38:11,839
the devops track

00:38:09,040 --> 00:38:12,160
um so yes this is uh i will be closing

00:38:11,839 --> 00:38:16,400
the

00:38:12,160 --> 00:38:16,400
session the webinar after this talk

00:38:17,520 --> 00:38:19,839
um

00:38:39,680 --> 00:38:47,839
okay let's see if i can find it here

00:38:53,359 --> 00:38:57,599
yeah no it will it will take me some

00:38:55,280 --> 00:39:01,760
digging and i wonder

00:38:57,599 --> 00:39:06,720
how it what will be the easiest way

00:39:01,760 --> 00:39:06,720
to actually uh

00:39:07,680 --> 00:39:12,880
to pass it over to you guys

00:39:11,440 --> 00:39:15,760
you know what i know what i do i have

00:39:12,880 --> 00:39:18,800
the show notes let me let me find it

00:39:15,760 --> 00:39:21,119
and i will just um i will just add

00:39:18,800 --> 00:39:21,839
that will be like a github github

00:39:21,119 --> 00:39:24,880
pointer

00:39:21,839 --> 00:39:26,720
to just a number of lines

00:39:24,880 --> 00:39:29,200
uh in a build script that does the

00:39:26,720 --> 00:39:30,960
double tagging and that will be the

00:39:29,200 --> 00:39:32,640
the easiest way i will just add it to

00:39:30,960 --> 00:39:35,839
the show notes so

00:39:32,640 --> 00:39:37,520
um it's tony just try it let's say like

00:39:35,839 --> 00:39:43,839
later today or tomorrow

00:39:37,520 --> 00:39:43,839
and i will just edit there

00:39:44,000 --> 00:39:46,079

YouTube URL: https://www.youtube.com/watch?v=kXXjI3AS9j0


