Title: All Things Open 2018 - Kris Nova, Heptio - Kubernetes Without All The Hype
Publication date: 2018-12-05
Playlist: All Things Open 2018 Playlist
Description: 
	All Things Open 2018 - Kris Nova, Heptio - Kubernetes Without All The Hype
Captions: 
	00:00:02,659 --> 00:00:08,370
so my name is Chris Nova and we're all

00:00:06,029 --> 00:00:10,349
here to learn about kubernetes

00:00:08,370 --> 00:00:12,719
and I'm gonna learn a lot about you in a

00:00:10,349 --> 00:00:15,900
little bit but we're gonna talk about my

00:00:12,719 --> 00:00:19,410
personal favorite subject myself to

00:00:15,900 --> 00:00:22,140
start okay cool

00:00:19,410 --> 00:00:24,390
so actually before we get started I

00:00:22,140 --> 00:00:26,910
always do this so that I remember who

00:00:24,390 --> 00:00:29,490
wants to be our timekeeper scrum master

00:00:26,910 --> 00:00:29,960
today volunteer right here what's your

00:00:29,490 --> 00:00:33,270
name

00:00:29,960 --> 00:00:35,430
Alex okay so if you want to set a timer

00:00:33,270 --> 00:00:38,340
or however you want to implement a

00:00:35,430 --> 00:00:41,070
solution to this problem here at 3:00

00:00:38,340 --> 00:00:42,780
p.m. we're gonna take a break and we're

00:00:41,070 --> 00:00:44,910
gonna start again at 3:10 p.m. and then

00:00:42,780 --> 00:00:46,590
we'll take another break out for and

00:00:44,910 --> 00:00:49,230
we'll come back here at 4:10 p.m. and

00:00:46,590 --> 00:00:51,390
then like literally wave your hands and

00:00:49,230 --> 00:00:59,820
yell Nova stop we all have to go to the

00:00:51,390 --> 00:01:01,020
bathroom yep it's the first homework

00:00:59,820 --> 00:01:04,710
assignment in the first like five

00:01:01,020 --> 00:01:06,689
seconds here okay cool so just to give a

00:01:04,710 --> 00:01:09,330
little bit of background about me and to

00:01:06,689 --> 00:01:11,640
D formalize the situation because this

00:01:09,330 --> 00:01:13,020
is a workshop which means I hope people

00:01:11,640 --> 00:01:14,970
brought their laptops because I'm gonna

00:01:13,020 --> 00:01:16,920
be encouraging everyone here to jump

00:01:14,970 --> 00:01:18,479
into a terminal and actually install

00:01:16,920 --> 00:01:20,700
kubernetes and we're gonna kind of go

00:01:18,479 --> 00:01:23,790
through this whole thing together so I'm

00:01:20,700 --> 00:01:25,830
a kubernetes maintainer last week was my

00:01:23,790 --> 00:01:28,110
two-year anniversary of working on the

00:01:25,830 --> 00:01:31,710
kubernetes project and being in the

00:01:28,110 --> 00:01:34,079
official Ward whatever that means so I

00:01:31,710 --> 00:01:35,909
work on a lot of software if you're

00:01:34,079 --> 00:01:38,670
familiar with kubernetes you've probably

00:01:35,909 --> 00:01:40,619
ran some of my code if you've ever like

00:01:38,670 --> 00:01:43,799
played pokemon go or shopped out of

00:01:40,619 --> 00:01:46,590
Starbucks or used an Android phone or an

00:01:43,799 --> 00:01:50,220
iPhone you're also running my code I'd

00:01:46,590 --> 00:01:53,009
contribute to golang sometimes a lot of

00:01:50,220 --> 00:01:54,329
actual code contributions and then just

00:01:53,009 --> 00:01:56,729
helping people with the programming

00:01:54,329 --> 00:01:58,469
language in general some notable

00:01:56,729 --> 00:02:01,979
projects that I have contributed to

00:01:58,469 --> 00:02:05,070
terraform on a cop's maintainer there's

00:02:01,979 --> 00:02:07,380
a project Horton Oh my microphone go out

00:02:05,070 --> 00:02:09,509
there's a project called Cuba corn that

00:02:07,380 --> 00:02:11,370
is a reflection of me trying to get

00:02:09,509 --> 00:02:13,440
software engineers to talk about

00:02:11,370 --> 00:02:15,060
unicorns so far it's working really

00:02:13,440 --> 00:02:17,010
great

00:02:15,060 --> 00:02:18,090
and also a program called Q Batman and

00:02:17,010 --> 00:02:21,480
we're gonna learn a lot more about those

00:02:18,090 --> 00:02:23,400
later I'm an organizer of cig AWS which

00:02:21,480 --> 00:02:25,680
means I do a lot of kubernetes on amazon

00:02:23,400 --> 00:02:27,960
the kubernetes cluster I'll be spinning

00:02:25,680 --> 00:02:29,280
up today is on Amazon but you're welcome

00:02:27,960 --> 00:02:30,540
to spend it up wherever you want and

00:02:29,280 --> 00:02:32,820
we'll talk more about that later

00:02:30,540 --> 00:02:34,920
I also am a member of C cluster

00:02:32,820 --> 00:02:37,320
lifecycle that's another subgroup of

00:02:34,920 --> 00:02:39,660
kubernetes and our entire like Charter

00:02:37,320 --> 00:02:42,300
is to make installing kubernetes easier

00:02:39,660 --> 00:02:45,450
and make managing kubernetes easier I

00:02:42,300 --> 00:02:47,640
wrote a book more on that later I climb

00:02:45,450 --> 00:02:49,170
mountains every one of my slides will

00:02:47,640 --> 00:02:51,630
have a picture of a mountain that I took

00:02:49,170 --> 00:02:54,330
and also on the cat lady and all good

00:02:51,630 --> 00:02:55,770
technical presentations need some level

00:02:54,330 --> 00:02:59,580
of cats in them so we're gonna look at

00:02:55,770 --> 00:03:01,290
my cats in a second also I'm transgender

00:02:59,580 --> 00:03:04,170
and I don't know if you've been watching

00:03:01,290 --> 00:03:06,030
the news lately but if you're not ok

00:03:04,170 --> 00:03:09,360
with this you're not welcome here get

00:03:06,030 --> 00:03:10,650
out of the room I'm serious and also if

00:03:09,360 --> 00:03:12,750
you want to take your phones out and

00:03:10,650 --> 00:03:14,520
tweet this so that everybody knows how

00:03:12,750 --> 00:03:16,830
realistic this is and how it's in your

00:03:14,520 --> 00:03:18,600
face I would very much appreciate it

00:03:16,830 --> 00:03:23,910
as would my family members and everybody

00:03:18,600 --> 00:03:26,310
who loves me so there's that as well ok

00:03:23,910 --> 00:03:28,890
so all good technical presentations need

00:03:26,310 --> 00:03:31,440
a book I would remember going home and

00:03:28,890 --> 00:03:34,440
asking myself like damn Nova like what's

00:03:31,440 --> 00:03:36,660
the best book you read last year so I

00:03:34,440 --> 00:03:39,239
wrote this book called cloud native

00:03:36,660 --> 00:03:41,370
infrastructure and it talks a lot about

00:03:39,239 --> 00:03:43,440
cloud native infrastructure and because

00:03:41,370 --> 00:03:44,400
I wrote it I also read it anyway if you

00:03:43,440 --> 00:03:45,720
want to check it out it's gonna be

00:03:44,400 --> 00:03:47,280
talking about a lot of the things in

00:03:45,720 --> 00:03:53,340
kubernetes we're gonna be going over

00:03:47,280 --> 00:03:55,519
today so this is mr. Darcy he's my cat

00:03:53,340 --> 00:03:58,320
he likes to sleep on cute things and

00:03:55,519 --> 00:04:00,090
this is his sister Kylie who will

00:03:58,320 --> 00:04:04,920
literally draw blood from your legs at

00:04:00,090 --> 00:04:07,110
any moment ok so the goal for today for

00:04:04,920 --> 00:04:09,330
you to be the kubernetes gala or guy at

00:04:07,110 --> 00:04:13,350
your company for you to be an expert who

00:04:09,330 --> 00:04:15,060
here runs kubernetes right now who here

00:04:13,350 --> 00:04:17,310
for what for some reason or another

00:04:15,060 --> 00:04:20,130
thinks it's a really really good idea to

00:04:17,310 --> 00:04:22,169
start running kubernetes ok everybody

00:04:20,130 --> 00:04:26,160
put their hand up ok who can give me a

00:04:22,169 --> 00:04:27,690
reason volunteer come on somebody right

00:04:26,160 --> 00:04:37,170
here what's a good reason to run

00:04:27,690 --> 00:04:39,420
Nettie's perfect docker does not have

00:04:37,170 --> 00:04:41,730
the necessary infrastructure to scale up

00:04:39,420 --> 00:04:43,950
or down and there's a lot that's baked

00:04:41,730 --> 00:04:45,690
into that statement even making the

00:04:43,950 --> 00:04:47,370
assumption that containers which we're

00:04:45,690 --> 00:04:50,910
going to talk a little bit later are

00:04:47,370 --> 00:04:52,740
also a good idea anyway at the end of

00:04:50,910 --> 00:04:54,770
the presentation or after our first

00:04:52,740 --> 00:04:56,940
break or our second break or whatever

00:04:54,770 --> 00:04:59,220
we're gonna come back and I'm gonna like

00:04:56,940 --> 00:05:00,630
remind us of our goal so that when you

00:04:59,220 --> 00:05:02,580
walk out of here you feel like you can

00:05:00,630 --> 00:05:06,840
can pretty much answer any question

00:05:02,580 --> 00:05:12,660
about kubernetes as it comes up and is

00:05:06,840 --> 00:05:17,450
needed okay cool so what do you know

00:05:12,660 --> 00:05:17,450
about kubernetes right now anybody

00:05:17,690 --> 00:05:22,710
container orchestration come on more

00:05:19,770 --> 00:05:26,660
buzzwords hype containers thrown at me

00:05:22,710 --> 00:05:28,920
service discovery what's another one

00:05:26,660 --> 00:05:32,850
configuration management that's a good

00:05:28,920 --> 00:05:35,460
one what was it agnostic to any cloud

00:05:32,850 --> 00:05:37,340
provider that's super-important a cloud

00:05:35,460 --> 00:05:39,900
provider is Google Amazon Microsoft

00:05:37,340 --> 00:05:42,150
digitalocean maybe you have your own

00:05:39,900 --> 00:05:45,720
cloud that you you run in-house how many

00:05:42,150 --> 00:05:47,070
people here run in a datacenter 1 2 3 4

00:05:45,720 --> 00:05:48,600
how many people here are looking at

00:05:47,070 --> 00:05:49,590
running in the cloud or that's why

00:05:48,600 --> 00:05:52,500
they're here today is to learn more

00:05:49,590 --> 00:05:54,030
about moving to the cloud ok so I'm

00:05:52,500 --> 00:05:57,090
gonna ask a lot of questions I really

00:05:54,030 --> 00:05:59,460
want folks to participate because again

00:05:57,090 --> 00:06:00,630
this my job is to help you so I can I'm

00:05:59,460 --> 00:06:02,460
not gonna really get up here and lecture

00:06:00,630 --> 00:06:03,900
I want to know what we're doing so I'm

00:06:02,460 --> 00:06:06,480
actually looking at the answers so

00:06:03,900 --> 00:06:11,280
please do put your hand up okay cool so

00:06:06,480 --> 00:06:12,540
yeah kubernetes to me is it's exciting

00:06:11,280 --> 00:06:14,970
it solves a lot of problems we're gonna

00:06:12,540 --> 00:06:17,040
go into like all of the nitty-gritty

00:06:14,970 --> 00:06:19,530
value-adds and exactly what it is here

00:06:17,040 --> 00:06:21,960
in a moment but for right now I think

00:06:19,530 --> 00:06:22,980
the one like sentiment I want folks to

00:06:21,960 --> 00:06:26,390
think of as we go through the

00:06:22,980 --> 00:06:29,460
presentation is kubernetes is this new

00:06:26,390 --> 00:06:32,070
kernel it's a it's a layer of software

00:06:29,460 --> 00:06:33,390
that you build on top of and because

00:06:32,070 --> 00:06:36,090
it's a layer of software it just makes

00:06:33,390 --> 00:06:38,250
it easy for us as engineer minded folks

00:06:36,090 --> 00:06:40,350
to interact with it in the same way that

00:06:38,250 --> 00:06:41,550
the kernel does also in the same way of

00:06:40,350 --> 00:06:44,310
the kernel once certain

00:06:41,550 --> 00:06:46,770
features of kubernetes and they're kind

00:06:44,310 --> 00:06:48,630
of done forever and so we'll be looking

00:06:46,770 --> 00:06:52,680
at some of those specific features in a

00:06:48,630 --> 00:06:54,870
moment okay

00:06:52,680 --> 00:06:57,660
so to break everything down here's what

00:06:54,870 --> 00:06:59,430
we're gonna be going over today number

00:06:57,660 --> 00:07:00,930
one is just going to be getting started

00:06:59,430 --> 00:07:01,470
so it's gonna be getting kubernetes up

00:07:00,930 --> 00:07:03,570
and running

00:07:01,470 --> 00:07:05,430
who here brought a laptop and is gonna

00:07:03,570 --> 00:07:08,430
actually try to get kubernetes up and

00:07:05,430 --> 00:07:09,960
running today awesome whoo and of those

00:07:08,430 --> 00:07:12,870
people who thinks they're gonna be able

00:07:09,960 --> 00:07:14,430
to do it on the first try okay and of

00:07:12,870 --> 00:07:20,210
those people who has already tried to do

00:07:14,430 --> 00:07:23,570
this did you have fun no yes

00:07:20,210 --> 00:07:25,590
mixed it was okay it wasn't too bad okay

00:07:23,570 --> 00:07:26,970
okay so we're gonna try to get the

00:07:25,590 --> 00:07:29,250
cluster up and running we're gonna talk

00:07:26,970 --> 00:07:30,480
about some of the ways that I like to

00:07:29,250 --> 00:07:32,250
get clusters up and running and some of

00:07:30,480 --> 00:07:33,990
the projects that I've worked on to help

00:07:32,250 --> 00:07:36,060
make that easier and then we're gonna

00:07:33,990 --> 00:07:38,250
look at actually creating a main

00:07:36,060 --> 00:07:40,740
function and putting that main function

00:07:38,250 --> 00:07:42,210
into a container after that we're gonna

00:07:40,740 --> 00:07:44,130
have a break we're gonna come back and

00:07:42,210 --> 00:07:47,160
we're gonna learn a lot about the

00:07:44,130 --> 00:07:49,080
kubernetes api objects and how we're

00:07:47,160 --> 00:07:51,180
gonna take this container and run it in

00:07:49,080 --> 00:07:53,400
kubernetes that's gonna take some time

00:07:51,180 --> 00:07:56,010
and it's basically just gonna be me and

00:07:53,400 --> 00:07:57,480
you hacking on kubernetes together I'll

00:07:56,010 --> 00:07:58,830
do some demos up here and then we'll let

00:07:57,480 --> 00:08:01,140
folks try to kind of replicate that on

00:07:58,830 --> 00:08:03,240
our end and then afterwards we'll take a

00:08:01,140 --> 00:08:05,490
break we'll come back and we're going to

00:08:03,240 --> 00:08:07,800
talk about a public web service actually

00:08:05,490 --> 00:08:09,600
getting some sort of resolvable URL up

00:08:07,800 --> 00:08:11,520
and running in kubernetes and we can

00:08:09,600 --> 00:08:13,410
even point that to a DNS record here

00:08:11,520 --> 00:08:15,900
live today so folks can actually go and

00:08:13,410 --> 00:08:18,030
hit like I have a couple of DMS names we

00:08:15,900 --> 00:08:19,170
can use and actually resolve a service

00:08:18,030 --> 00:08:21,330
that we're gonna build together today

00:08:19,170 --> 00:08:23,520
and then at the end I have this sort of

00:08:21,330 --> 00:08:25,530
everything else slide and this is

00:08:23,520 --> 00:08:27,090
nothing more than an amalgamation of all

00:08:25,530 --> 00:08:29,130
the questions I get asked all the time

00:08:27,090 --> 00:08:30,360
so I'm assuming a lot of folks have

00:08:29,130 --> 00:08:36,120
those same questions and we'll talk

00:08:30,360 --> 00:08:39,360
about that as well okay number one

00:08:36,120 --> 00:08:42,870
getting started okay so let's talk about

00:08:39,360 --> 00:08:45,450
kubernetes concretely so this is uh this

00:08:42,870 --> 00:08:47,730
is the the technical definition of what

00:08:45,450 --> 00:08:49,590
kubernetes is and not necessarily the

00:08:47,730 --> 00:08:51,660
value-add of what you get from moving to

00:08:49,590 --> 00:08:53,850
kubernetes but this is important because

00:08:51,660 --> 00:08:55,380
we need to understand what needs to be

00:08:53,850 --> 00:08:57,150
installed before we actually go

00:08:55,380 --> 00:08:59,550
the process of understanding a

00:08:57,150 --> 00:09:01,140
kubernetes cluster also these components

00:08:59,550 --> 00:09:03,990
are relevant as we start to look at

00:09:01,140 --> 00:09:06,480
building things out on top of them later

00:09:03,990 --> 00:09:08,730
so the basic formula for kubernetes and

00:09:06,480 --> 00:09:10,260
honestly this diagram is a you can't

00:09:08,730 --> 00:09:12,420
really find this anywhere and I really

00:09:10,260 --> 00:09:14,160
like this because it's pretty simple but

00:09:12,420 --> 00:09:17,010
to me this is a good definition of what

00:09:14,160 --> 00:09:18,870
kubernetes is and how it works so over

00:09:17,010 --> 00:09:20,310
here we have the Internet and this

00:09:18,870 --> 00:09:23,670
doesn't have to be the public internet

00:09:20,310 --> 00:09:25,650
this be any type of network where you

00:09:23,670 --> 00:09:27,750
and your team would access kubernetes so

00:09:25,650 --> 00:09:30,540
this could be the public Internet it

00:09:27,750 --> 00:09:32,580
could be your local office Corp it could

00:09:30,540 --> 00:09:34,650
be a hybrid of the two it could be

00:09:32,580 --> 00:09:38,340
pretty much whatever you wanted it to to

00:09:34,650 --> 00:09:41,250
be from this network space you then

00:09:38,340 --> 00:09:43,530
would have access to this API server for

00:09:41,250 --> 00:09:46,140
all intensive purposes think of the

00:09:43,530 --> 00:09:47,430
kubernetes api server as like the front

00:09:46,140 --> 00:09:49,920
gateway of how we're going to be

00:09:47,430 --> 00:09:53,430
interacting with kubernetes this is uh

00:09:49,920 --> 00:09:55,440
this is basically any old rust in point

00:09:53,430 --> 00:09:57,510
that you've interacted with before but

00:09:55,440 --> 00:09:59,220
it's just specific to kubernetes who

00:09:57,510 --> 00:10:02,130
here is written software up against an

00:09:59,220 --> 00:10:04,290
API before okay most people good so I'm

00:10:02,130 --> 00:10:07,230
just ranting okay so the the datastore

00:10:04,290 --> 00:10:11,190
that we use in kubernetes is called Etsy

00:10:07,230 --> 00:10:12,720
D you'll be familiar with Etsy D as you

00:10:11,190 --> 00:10:13,920
look at the upgrade story which we're

00:10:12,720 --> 00:10:15,540
going to talk about in a little bit

00:10:13,920 --> 00:10:16,740
because it's kind of annoying but

00:10:15,540 --> 00:10:18,900
ultimately what you need to know about

00:10:16,740 --> 00:10:21,780
it is it's a persistent data store it

00:10:18,900 --> 00:10:24,380
stores key value pairs and it allows for

00:10:21,780 --> 00:10:27,630
this really cool primitive called watch

00:10:24,380 --> 00:10:31,050
and the API server watches the @ çd data

00:10:27,630 --> 00:10:33,270
store and because of this watch the the

00:10:31,050 --> 00:10:35,730
upper two components there the scheduler

00:10:33,270 --> 00:10:38,880
and the controller manager are able to

00:10:35,730 --> 00:10:40,500
respond to events in the data store so

00:10:38,880 --> 00:10:42,090
this is a mix it a little bit different

00:10:40,500 --> 00:10:45,630
than like a traditional like my sequel

00:10:42,090 --> 00:10:47,670
database or something up at the top we

00:10:45,630 --> 00:10:49,650
have this thing called the scheduler

00:10:47,670 --> 00:10:52,020
like literally it's called the scheduler

00:10:49,650 --> 00:10:55,260
and it's it's built off the same

00:10:52,020 --> 00:10:57,390
principles as the the Linux process

00:10:55,260 --> 00:10:59,700
scheduler who here knows what the Linux

00:10:57,390 --> 00:11:03,060
process scheduler is who here has looked

00:10:59,700 --> 00:11:06,990
at the source code for that nice is it

00:11:03,060 --> 00:11:08,490
is it fun to look at it's not so we kind

00:11:06,990 --> 00:11:08,790
of rewrote that and re implemented some

00:11:08,490 --> 00:11:10,410
of

00:11:08,790 --> 00:11:13,350
same principles but it's written in go

00:11:10,410 --> 00:11:16,320
and all the scheduler does is it makes

00:11:13,350 --> 00:11:18,330
sense of what you tell the API server

00:11:16,320 --> 00:11:21,630
that gets stored in at CD and then it

00:11:18,330 --> 00:11:23,970
tries to reason about the best way given

00:11:21,630 --> 00:11:26,430
a certain policy to schedule workloads

00:11:23,970 --> 00:11:29,220
for you so it's just a layer of software

00:11:26,430 --> 00:11:31,290
that makes decisions we then have this

00:11:29,220 --> 00:11:33,180
sort of action-oriented piece of

00:11:31,290 --> 00:11:35,610
software called the controller manager

00:11:33,180 --> 00:11:38,340
which is a confusing way of saying it's

00:11:35,610 --> 00:11:40,200
a lot of controllers controllers are a

00:11:38,340 --> 00:11:42,360
special word in kubernetes and we have a

00:11:40,200 --> 00:11:44,520
whole like little mini lecture on them

00:11:42,360 --> 00:11:45,900
later but basically right now all you

00:11:44,520 --> 00:11:48,270
need to know is a controller is the

00:11:45,900 --> 00:11:50,790
thing that does stuff does something it

00:11:48,270 --> 00:11:52,260
might hit an API it might interact with

00:11:50,790 --> 00:11:55,110
this other piece of software called the

00:11:52,260 --> 00:11:58,530
cubelet but it takes some sort of action

00:11:55,110 --> 00:11:59,850
and the controller is relatively dumb in

00:11:58,530 --> 00:12:01,380
other words the scheduler has all the

00:11:59,850 --> 00:12:03,360
smarts and makes all the decisions and

00:12:01,380 --> 00:12:05,070
the controller basically just goes and

00:12:03,360 --> 00:12:08,310
implements those decisions and makes

00:12:05,070 --> 00:12:11,640
them so the controllers are also

00:12:08,310 --> 00:12:13,440
important because they run in a loop and

00:12:11,640 --> 00:12:16,110
that loop is sort of one of the big

00:12:13,440 --> 00:12:18,300
value adds in kubernetes and that loop

00:12:16,110 --> 00:12:20,940
is in a constant state of auditing

00:12:18,300 --> 00:12:23,910
what's in reality and then reconciling

00:12:20,940 --> 00:12:26,250
that state back and forth a very simple

00:12:23,910 --> 00:12:27,720
example of a control loop is if we've

00:12:26,250 --> 00:12:30,000
all I'd done the robotics arm thing

00:12:27,720 --> 00:12:32,040
before if I intended my arm to go down

00:12:30,000 --> 00:12:32,730
here and then somebody came up and moved

00:12:32,040 --> 00:12:34,590
my arm

00:12:32,730 --> 00:12:35,730
the robotics control loop would put it

00:12:34,590 --> 00:12:37,410
back where I need it to go and that's

00:12:35,730 --> 00:12:39,630
where you get this motion from the

00:12:37,410 --> 00:12:41,880
kubernetes controller effectively does

00:12:39,630 --> 00:12:43,830
the same way if you tell it to do ten

00:12:41,880 --> 00:12:45,420
things and then all of a sudden it

00:12:43,830 --> 00:12:47,820
audits the world and only nine of those

00:12:45,420 --> 00:12:49,920
things are done it will then try to redo

00:12:47,820 --> 00:12:51,750
that last one and reconcile that state

00:12:49,920 --> 00:12:53,040
to bring it back to ten so that's what

00:12:51,750 --> 00:12:55,230
the controller does and we're going to

00:12:53,040 --> 00:12:56,730
talk about how that actually matters

00:12:55,230 --> 00:12:58,640
later but that's the that's the broader

00:12:56,730 --> 00:13:02,760
pattern you need to be aware of

00:12:58,640 --> 00:13:05,610
everybody good so far any questions cool

00:13:02,760 --> 00:13:07,370
okay so the last piece I want to talk

00:13:05,610 --> 00:13:11,760
about is this thing called the cubelet

00:13:07,370 --> 00:13:14,340
the cubelet is a linux service that will

00:13:11,760 --> 00:13:15,600
run on a virtual machine so you can

00:13:14,340 --> 00:13:16,320
literally jump on one of these virtual

00:13:15,600 --> 00:13:18,540
machines

00:13:16,320 --> 00:13:19,950
it's a systemd service you can go and

00:13:18,540 --> 00:13:22,060
look at the skeleton fire or not the

00:13:19,950 --> 00:13:25,420
skeleton file the unit file

00:13:22,060 --> 00:13:29,650
I'm still in it deal and the best land

00:13:25,420 --> 00:13:31,960
anyway the cubelets basically interact

00:13:29,650 --> 00:13:33,580
with the virtual machine and and are the

00:13:31,960 --> 00:13:35,620
receiving end of what the controller

00:13:33,580 --> 00:13:37,450
manager is doing so the controller

00:13:35,620 --> 00:13:39,250
manager might say go do these ten things

00:13:37,450 --> 00:13:41,380
and it might distribute that across

00:13:39,250 --> 00:13:43,440
three or four different cubelets three

00:13:41,380 --> 00:13:47,170
three and four or something like that

00:13:43,440 --> 00:13:49,540
and ultimately a cubelets job is to run

00:13:47,170 --> 00:13:51,670
containers that's really all it does now

00:13:49,540 --> 00:13:54,820
at running a container can mean a lot of

00:13:51,670 --> 00:13:56,260
things but ultimately the cubelets gonna

00:13:54,820 --> 00:13:57,970
make sure that container is running and

00:13:56,260 --> 00:13:59,560
if for whatever reason the container

00:13:57,970 --> 00:14:02,080
breaks or something happens it's gonna

00:13:59,560 --> 00:14:03,550
try to restart it for us in the same way

00:14:02,080 --> 00:14:07,270
that system D will try to restart a

00:14:03,550 --> 00:14:09,160
service and then we're left with these

00:14:07,270 --> 00:14:10,600
beautiful things at the end which are

00:14:09,160 --> 00:14:13,780
containers running on virtual machines

00:14:10,600 --> 00:14:16,990
so that's how you go from some client

00:14:13,780 --> 00:14:19,630
speaking to an API to some arbitrary

00:14:16,990 --> 00:14:21,940
mapping of containers to virtual

00:14:19,630 --> 00:14:23,440
machines and those containers are what's

00:14:21,940 --> 00:14:26,170
going to run you and your team's

00:14:23,440 --> 00:14:29,740
application kubernetes just does all

00:14:26,170 --> 00:14:31,720
that for you okay so why do we care

00:14:29,740 --> 00:14:33,370
about all this why did I just spend like

00:14:31,720 --> 00:14:37,270
five minutes explaining the cubelet and

00:14:33,370 --> 00:14:39,310
API server and everything because of

00:14:37,270 --> 00:14:42,610
this layer of software we actually get a

00:14:39,310 --> 00:14:43,870
lot of value add with kubernetes the

00:14:42,610 --> 00:14:47,500
first thing I like to bring up is

00:14:43,870 --> 00:14:49,960
kubernetes is complex I'm gonna try to

00:14:47,500 --> 00:14:52,150
kind of boil it down to raw ingredients

00:14:49,960 --> 00:14:53,890
for everyone today but a lot of what I'm

00:14:52,150 --> 00:14:56,560
gonna be talking about is gonna be new

00:14:53,890 --> 00:14:58,120
and it can be frustrating it's I still

00:14:56,560 --> 00:15:01,300
get frustrated with kubernetes to be

00:14:58,120 --> 00:15:04,240
completely honest and because of that

00:15:01,300 --> 00:15:06,790
complexity these workshops exist and

00:15:04,240 --> 00:15:07,780
frankly that's why I have a job but the

00:15:06,790 --> 00:15:10,180
thing you need to know about this

00:15:07,780 --> 00:15:12,520
complexity is the value add a viewer

00:15:10,180 --> 00:15:15,340
near team moving into kubernetes might

00:15:12,520 --> 00:15:17,830
outweigh this complexity another way of

00:15:15,340 --> 00:15:19,870
saying that is kubernetes might be a

00:15:17,830 --> 00:15:23,320
technical investment for you and your

00:15:19,870 --> 00:15:24,880
team in other words it's gonna be

00:15:23,320 --> 00:15:26,560
annoying you're going to get frustrated

00:15:24,880 --> 00:15:29,140
it's going to be new things it's going

00:15:26,560 --> 00:15:29,440
to be like relearning Linux all over

00:15:29,140 --> 00:15:31,300
again

00:15:29,440 --> 00:15:33,400
but once you get it you're kind of you

00:15:31,300 --> 00:15:34,350
it's a lifetime skill and you'll have it

00:15:33,400 --> 00:15:37,290
and you and your team

00:15:34,350 --> 00:15:39,780
have it and the promise here is that

00:15:37,290 --> 00:15:41,490
because everyone's moving to it

00:15:39,780 --> 00:15:42,780
if you move to it too you'll be able to

00:15:41,490 --> 00:15:46,260
take advantage of a lot of the other

00:15:42,780 --> 00:15:48,720
works that other folks have done so

00:15:46,260 --> 00:15:50,580
scalability that word to me it kind of

00:15:48,720 --> 00:15:52,110
pisses me off I feel like a lot of

00:15:50,580 --> 00:15:55,320
people say it and it doesn't really mean

00:15:52,110 --> 00:15:58,560
anything but in kubernetes there's

00:15:55,320 --> 00:16:01,350
built-in scalability primitives meaning

00:15:58,560 --> 00:16:04,320
almost every definition in kubernetes

00:16:01,350 --> 00:16:07,860
has some sort of number attached to it

00:16:04,320 --> 00:16:09,540
and that number represents an entity we

00:16:07,860 --> 00:16:11,400
call those replica sets and kubernetes

00:16:09,540 --> 00:16:13,830
but the idea is that you could change

00:16:11,400 --> 00:16:15,210
the number 10 to the number 1000 and

00:16:13,830 --> 00:16:17,580
then kubernetes would kind of do the

00:16:15,210 --> 00:16:20,520
rest for you so you don't really ever

00:16:17,580 --> 00:16:22,710
see an entity in kubernetes that is just

00:16:20,520 --> 00:16:25,320
one thing you see a lot of things that

00:16:22,710 --> 00:16:27,600
are called sets and a set can be equal

00:16:25,320 --> 00:16:29,700
to one or it could be equal to a million

00:16:27,600 --> 00:16:31,830
so that's when I say kubernetes has

00:16:29,700 --> 00:16:33,390
scalable I just mean that the software

00:16:31,830 --> 00:16:34,890
was built in with this mind of we're

00:16:33,390 --> 00:16:38,940
always gonna have a list of things

00:16:34,890 --> 00:16:41,430
instead of just a thing kubernetes is

00:16:38,940 --> 00:16:45,390
repeatable so a little bit about my

00:16:41,430 --> 00:16:47,280
background I come in from no computer

00:16:45,390 --> 00:16:48,930
science degree whatsoever although I've

00:16:47,280 --> 00:16:52,590
written a book that goes deep into

00:16:48,930 --> 00:16:54,630
computer science I was this sre and

00:16:52,590 --> 00:16:56,190
DevOps and a software engineer before I

00:16:54,630 --> 00:16:58,980
started doing the public speaking and

00:16:56,190 --> 00:17:00,330
working as a kubernetes maintainer but

00:16:58,980 --> 00:17:02,100
one of the things I learned was the

00:17:00,330 --> 00:17:04,650
importance of being able to repeat a

00:17:02,100 --> 00:17:07,020
problem how many people here have had

00:17:04,650 --> 00:17:09,990
like the it works for me but it doesn't

00:17:07,020 --> 00:17:11,490
work for you problem everybody in the

00:17:09,990 --> 00:17:13,380
room just put their hand up for folks in

00:17:11,490 --> 00:17:16,620
the front row who didn't turn around

00:17:13,380 --> 00:17:18,660
so yeah kubernetes aims to sort of solve

00:17:16,620 --> 00:17:20,550
this repeatability issue and because

00:17:18,660 --> 00:17:22,320
it's repeatable and because I can walk

00:17:20,550 --> 00:17:24,000
up to you know another software engineer

00:17:22,320 --> 00:17:25,650
in the field and be like hey run this

00:17:24,000 --> 00:17:27,060
command and I would beyond the shadow of

00:17:25,650 --> 00:17:29,010
a doubt no you're going to like

00:17:27,060 --> 00:17:31,500
perfectly reenact the same thing that I

00:17:29,010 --> 00:17:33,840
enacted it gives us a really strong

00:17:31,500 --> 00:17:36,120
foundation for doing like proper

00:17:33,840 --> 00:17:38,160
computer science and when I say computer

00:17:36,120 --> 00:17:40,770
science I literally mean experimenting

00:17:38,160 --> 00:17:42,870
with computers right like I hypothesize

00:17:40,770 --> 00:17:44,310
this and then like I just in my brain I

00:17:42,870 --> 00:17:46,530
imagine like a whiteboard with the

00:17:44,310 --> 00:17:47,820
scientific method drone out on it and we

00:17:46,530 --> 00:17:48,179
can actually go and we can do things

00:17:47,820 --> 00:17:50,519
like

00:17:48,179 --> 00:17:52,320
I'm gonna introduce change and just see

00:17:50,519 --> 00:17:54,869
what happens and as a team we can sort

00:17:52,320 --> 00:17:56,879
of observe that and then do actual real

00:17:54,869 --> 00:17:59,700
experiments with our application which

00:17:56,879 --> 00:18:01,499
is exciting also because it's repeatable

00:17:59,700 --> 00:18:05,730
that sort of gives us this ease of

00:18:01,499 --> 00:18:07,019
delivery for free I walk up to another

00:18:05,730 --> 00:18:09,029
software engineer and I say run this

00:18:07,019 --> 00:18:11,879
command it's good for debugging but it's

00:18:09,029 --> 00:18:15,080
even easier for the CI CV team who needs

00:18:11,879 --> 00:18:17,249
to go and deliver our application for us

00:18:15,080 --> 00:18:19,529
another big feature of kubernetes is

00:18:17,249 --> 00:18:22,980
this sort of resiliency and control

00:18:19,529 --> 00:18:25,169
unselfish Ealing primitive and that's

00:18:22,980 --> 00:18:26,999
what we get with these controllers so we

00:18:25,169 --> 00:18:29,159
go into a working controller example

00:18:26,999 --> 00:18:31,110
later but again all you need to know for

00:18:29,159 --> 00:18:32,610
now is it's the robot arm thing right

00:18:31,110 --> 00:18:35,490
like it audits the state and then if

00:18:32,610 --> 00:18:37,019
that state changes it puts it back which

00:18:35,490 --> 00:18:38,669
you don't really get with a lot of other

00:18:37,019 --> 00:18:40,710
tools a lot of the other tools are kind

00:18:38,669 --> 00:18:43,080
of like throw it over the fence call it

00:18:40,710 --> 00:18:44,789
good and then you're done so these are

00:18:43,080 --> 00:18:47,909
the big wins with kubernetes does

00:18:44,789 --> 00:18:50,879
anybody have any other come on

00:18:47,909 --> 00:18:53,039
somebody's got one all you guys think

00:18:50,879 --> 00:18:56,419
it's a good idea to run kubernetes you

00:18:53,039 --> 00:18:59,700
can't give me a value add ok

00:18:56,419 --> 00:19:02,309
well was that storing secrets that's a

00:18:59,700 --> 00:19:04,619
great one so kubernetes has this

00:19:02,309 --> 00:19:06,659
built-in primitive for storing secrets

00:19:04,619 --> 00:19:08,039
so that you and your team don't really

00:19:06,659 --> 00:19:10,200
have to concern yourself with like hard

00:19:08,039 --> 00:19:11,940
coding sensitive information you can

00:19:10,200 --> 00:19:13,980
sort of pass that off to a secret

00:19:11,940 --> 00:19:15,899
management team or department or

00:19:13,980 --> 00:19:18,240
somebody else and then your application

00:19:15,899 --> 00:19:20,159
can just say I would like a secret for

00:19:18,240 --> 00:19:21,450
this and then it goes and gets that for

00:19:20,159 --> 00:19:23,070
you so that's another value out for

00:19:21,450 --> 00:19:25,139
kubernetes and once we start actually

00:19:23,070 --> 00:19:30,029
getting it up and running I think some

00:19:25,139 --> 00:19:31,860
of these winds will make sense ok let's

00:19:30,029 --> 00:19:33,059
talk about installing a cluster so this

00:19:31,860 --> 00:19:35,399
is the part where it's gonna get

00:19:33,059 --> 00:19:37,559
hands-on I promise I'm only ranting for

00:19:35,399 --> 00:19:42,779
like the first 20 minutes of each little

00:19:37,559 --> 00:19:43,889
session here ok who here is gonna move

00:19:42,779 --> 00:19:47,820
to gke

00:19:43,889 --> 00:19:49,440
or Google ok we have a few hands ok so

00:19:47,820 --> 00:19:51,299
I'm just going to give like a high-level

00:19:49,440 --> 00:19:53,549
overview of all of the ways you can

00:19:51,299 --> 00:19:56,399
install a cluster I'm not gonna tell you

00:19:53,549 --> 00:19:58,919
how to install a cluster but I will do

00:19:56,399 --> 00:20:00,840
probably a cubic horn and maybe a mini

00:19:58,919 --> 00:20:01,950
cube demo up here on stage depending on

00:20:00,840 --> 00:20:04,049
what people want

00:20:01,950 --> 00:20:06,690
um but I think it's important to call

00:20:04,049 --> 00:20:08,100
out the the pros and cons of of each one

00:20:06,690 --> 00:20:11,610
and kind of give a high-level overview

00:20:08,100 --> 00:20:13,559
of of what kubernetes does and the

00:20:11,610 --> 00:20:15,929
different people in ways you can install

00:20:13,559 --> 00:20:16,590
it so gke is a service provider it's

00:20:15,929 --> 00:20:18,059
Google

00:20:16,590 --> 00:20:19,590
they're the original gangsters of

00:20:18,059 --> 00:20:21,960
kubernetes this is the original

00:20:19,590 --> 00:20:23,279
kubernetes as a service this is the one

00:20:21,960 --> 00:20:24,929
that's been running longer than any

00:20:23,279 --> 00:20:26,639
other one and this is where it all

00:20:24,929 --> 00:20:29,730
started that started the whole

00:20:26,639 --> 00:20:32,460
kubernetes thing so they've been doing

00:20:29,730 --> 00:20:34,559
it there's some concerns with it but

00:20:32,460 --> 00:20:35,909
it's getting better and for the most

00:20:34,559 --> 00:20:37,769
part in my mind it's probably the

00:20:35,909 --> 00:20:39,000
simplest solution you can go and click a

00:20:37,769 --> 00:20:40,260
couple buttons and give them a credit

00:20:39,000 --> 00:20:43,110
card number and poof you get a

00:20:40,260 --> 00:20:45,630
kubernetes cluster a lot of people run

00:20:43,110 --> 00:20:47,399
on it pokemons go iLook play pokemons go

00:20:45,630 --> 00:20:49,470
with my girlfriend a lot and I'm like oh

00:20:47,399 --> 00:20:52,710
I'm just test driving kubernetes it

00:20:49,470 --> 00:20:55,740
seems to be working great so there's

00:20:52,710 --> 00:20:57,659
some good banter there upgrades work but

00:20:55,740 --> 00:20:59,279
they're kind of magic we're gonna talk a

00:20:57,659 --> 00:21:02,159
little bit about upgrading a kubernetes

00:20:59,279 --> 00:21:04,799
cluster later but just all you need to

00:21:02,159 --> 00:21:06,029
know about gke is they sort of solve

00:21:04,799 --> 00:21:08,580
that for you and you don't really have

00:21:06,029 --> 00:21:10,620
to pay much attention to it and last but

00:21:08,580 --> 00:21:12,360
not least it's very reliable Google in

00:21:10,620 --> 00:21:13,799
general just has excellent uptime and

00:21:12,360 --> 00:21:15,210
there's a lot of case reports out there

00:21:13,799 --> 00:21:16,860
of folks running our gke

00:21:15,210 --> 00:21:19,169
and it's been working well for them I

00:21:16,860 --> 00:21:22,710
don't even work for Google so you're

00:21:19,169 --> 00:21:24,870
getting the unbiased overview here eks

00:21:22,710 --> 00:21:28,649
on AWS this is important to me because

00:21:24,870 --> 00:21:29,970
I'm one of the organizers of cig AWS so

00:21:28,649 --> 00:21:33,019
if you're looking at running kubernetes

00:21:29,970 --> 00:21:36,000
on amazon this might be exciting to you

00:21:33,019 --> 00:21:37,950
because this is this is Amazon's version

00:21:36,000 --> 00:21:39,000
of hosting kubernetes and you pay them

00:21:37,950 --> 00:21:40,950
and they're going to solve the problem

00:21:39,000 --> 00:21:43,110
for you

00:21:40,950 --> 00:21:45,029
it works pretty well it's not quite as

00:21:43,110 --> 00:21:47,490
shiny as the rest of the Amazon services

00:21:45,029 --> 00:21:50,100
but they're getting there and then the

00:21:47,490 --> 00:21:51,870
whole thing is built sort of an Amazon

00:21:50,100 --> 00:21:53,909
native way so anytime they can take

00:21:51,870 --> 00:21:56,250
advantage of the other parts of the AWS

00:21:53,909 --> 00:21:57,779
they totally do it does some pretty cool

00:21:56,250 --> 00:22:00,240
things with CNI that you can't get with

00:21:57,779 --> 00:22:03,299
other kubernetes clusters and it looks

00:22:00,240 --> 00:22:04,740
like my still not got cut off anyway

00:22:03,299 --> 00:22:06,480
that was just still not as shiny as the

00:22:04,740 --> 00:22:10,139
other AWS objects but it works pretty

00:22:06,480 --> 00:22:11,940
well I used to work on the AKS team at

00:22:10,139 --> 00:22:15,059
Microsoft Azure before I worked for my

00:22:11,940 --> 00:22:15,600
new job at hep tio if you want to run

00:22:15,059 --> 00:22:19,740
kubernetes

00:22:15,600 --> 00:22:21,380
on Microsoft it's Microsoft have fun

00:22:19,740 --> 00:22:25,620
[Music]

00:22:21,380 --> 00:22:28,890
cops on AWS so this is a big one if you

00:22:25,620 --> 00:22:31,380
want to run kubernetes on Amazon this is

00:22:28,890 --> 00:22:32,789
probably the best way to do it I'm just

00:22:31,380 --> 00:22:34,770
gonna be frank here

00:22:32,789 --> 00:22:36,690
I'm the maintainer of this project

00:22:34,770 --> 00:22:38,039
although I have a lot of grievances with

00:22:36,690 --> 00:22:40,860
the project now that I've been like

00:22:38,039 --> 00:22:42,720
staring at the code for two years but

00:22:40,860 --> 00:22:43,799
this is probably the best way to get up

00:22:42,720 --> 00:22:45,480
and off to the races

00:22:43,799 --> 00:22:48,150
and it's gonna give you the upgrade

00:22:45,480 --> 00:22:51,299
story that is a big problem again that

00:22:48,150 --> 00:22:53,159
will go into detail later

00:22:51,299 --> 00:22:55,650
so first off you're welcome

00:22:53,159 --> 00:22:57,360
it was a lot of work for us hats off to

00:22:55,650 --> 00:22:59,340
Justin who's the primary contributor

00:22:57,360 --> 00:23:02,070
he's done a ton of work

00:22:59,340 --> 00:23:03,510
it's very proprietary meaning once you

00:23:02,070 --> 00:23:05,700
get your cluster up and running you're

00:23:03,510 --> 00:23:08,820
pretty much stuck using cops it's not

00:23:05,700 --> 00:23:10,440
super easy to to migrate off of it also

00:23:08,820 --> 00:23:13,500
it's pronounced cops by the way it's not

00:23:10,440 --> 00:23:15,659
chaos you'll hear K up sometimes but

00:23:13,500 --> 00:23:17,039
myself and Justin both call it cops and

00:23:15,659 --> 00:23:19,620
I feel like if we call it that that

00:23:17,039 --> 00:23:21,210
makes it official right um one of the

00:23:19,620 --> 00:23:23,520
things you need to be aware of with cops

00:23:21,210 --> 00:23:25,620
though is it's falling behind if you go

00:23:23,520 --> 00:23:27,840
to github.com / kubernetes slash cops

00:23:25,620 --> 00:23:29,730
you'll see that we're on a version of

00:23:27,840 --> 00:23:31,799
kubernetes that we support that has

00:23:29,730 --> 00:23:34,950
several versions behind the actual

00:23:31,799 --> 00:23:37,460
kubernetes release in other words all of

00:23:34,950 --> 00:23:40,950
kubernetes is running on version in and

00:23:37,460 --> 00:23:42,419
copses in - - is the most recent version

00:23:40,950 --> 00:23:44,789
you can install so you don't even get

00:23:42,419 --> 00:23:47,130
all of the new goodies with cops and

00:23:44,789 --> 00:23:49,289
it's falling even further behind

00:23:47,130 --> 00:23:50,730
so as the rest of kubernetes continues

00:23:49,289 --> 00:23:52,260
to progress cops

00:23:50,730 --> 00:23:53,520
Cobb's continues to sort of take our

00:23:52,260 --> 00:23:55,919
time and we're falling further and

00:23:53,520 --> 00:23:57,120
further behind partially because I am no

00:23:55,919 --> 00:24:00,150
longer really working on this project

00:23:57,120 --> 00:24:02,580
and the trivia is Justin now does not

00:24:00,150 --> 00:24:05,760
work on Amazon he works for Google now

00:24:02,580 --> 00:24:09,090
so anyway there is an amazing upgrade

00:24:05,760 --> 00:24:13,500
story and a lot of the eks stuff was

00:24:09,090 --> 00:24:15,210
sort of inspired by the cops project how

00:24:13,500 --> 00:24:16,500
do the company I worked for we have this

00:24:15,210 --> 00:24:18,330
thing called the hefty Oh QuickStart

00:24:16,500 --> 00:24:20,370
it's just cloud formation for Amazon I

00:24:18,330 --> 00:24:22,950
like it it's my personal favorite

00:24:20,370 --> 00:24:24,059
AWS cluster to set up but it is kind of

00:24:22,950 --> 00:24:25,440
a bit annoying because you're dealing

00:24:24,059 --> 00:24:28,169
with cloud formation and that's just

00:24:25,440 --> 00:24:29,440
always kind of a pain so anyway if you

00:24:28,169 --> 00:24:31,480
want to check that out as well

00:24:29,440 --> 00:24:32,769
and again all of these links are going

00:24:31,480 --> 00:24:33,909
to be I'm gonna have a thing you can

00:24:32,769 --> 00:24:36,429
take a picture of to get all these links

00:24:33,909 --> 00:24:38,860
so don't worry about it right now

00:24:36,429 --> 00:24:40,360
Cuba corn this is my personal favorite

00:24:38,860 --> 00:24:42,240
way of installing kubernetes because

00:24:40,360 --> 00:24:44,769
there's rainbows and unicorns involved

00:24:42,240 --> 00:24:46,059
and I solved a lot of the problems that

00:24:44,769 --> 00:24:47,740
frustrated me with cops

00:24:46,059 --> 00:24:49,409
I'm no longer really working on this

00:24:47,740 --> 00:24:51,940
because I'm working on this new thing

00:24:49,409 --> 00:24:54,129
that is complementary to some of the

00:24:51,940 --> 00:24:55,899
work we're doing that hefty oh but

00:24:54,129 --> 00:24:58,289
anyway I'll be using Cuba corn to spin

00:24:55,899 --> 00:25:01,179
up a cluster here today in a little bit

00:24:58,289 --> 00:25:03,929
cube admin so this is an exciting tool

00:25:01,179 --> 00:25:07,179
so this is the official kubernetes

00:25:03,929 --> 00:25:09,190
installation tool this is built by the

00:25:07,179 --> 00:25:11,529
community maintained by the community

00:25:09,190 --> 00:25:13,960
and this is like the cream of the crop

00:25:11,529 --> 00:25:17,470
or whatever the only problem is is that

00:25:13,960 --> 00:25:20,049
this tool neglects to well I wouldn't

00:25:17,470 --> 00:25:22,799
say neglect but intentionally doesn't

00:25:20,049 --> 00:25:25,029
solve the infrastructure problem meaning

00:25:22,799 --> 00:25:27,070
it's not gonna give you the virtual

00:25:25,029 --> 00:25:28,960
machine in Amazon it's gonna give you a

00:25:27,070 --> 00:25:31,090
command line tool that you can run on a

00:25:28,960 --> 00:25:33,399
virtual machine that you've already set

00:25:31,090 --> 00:25:36,039
up somehow and it'll actually bootstrap

00:25:33,399 --> 00:25:39,309
kubernetes for you if you go back and

00:25:36,039 --> 00:25:42,129
you look at cuba corn all cuba corn does

00:25:39,309 --> 00:25:43,899
is it wraps up cube admin and then it

00:25:42,129 --> 00:25:45,190
also just builds the virtual machines

00:25:43,899 --> 00:25:47,289
and everything sets of the network and

00:25:45,190 --> 00:25:50,590
does everything else you need for you to

00:25:47,289 --> 00:25:52,690
get kubernetes up and running and so

00:25:50,590 --> 00:25:59,259
cube admin is just the the tool that

00:25:52,690 --> 00:26:01,629
just does the software layer only so

00:25:59,259 --> 00:26:03,700
this is what myself and justin and a

00:26:01,629 --> 00:26:04,990
bunch of others are working on folks at

00:26:03,700 --> 00:26:07,000
Google have come together folks at

00:26:04,990 --> 00:26:08,830
Amazon have come together the community

00:26:07,000 --> 00:26:11,049
has officially said we're fine we're

00:26:08,830 --> 00:26:12,970
tired of this fragmented way of

00:26:11,049 --> 00:26:14,350
installing kubernetes and we're gonna

00:26:12,970 --> 00:26:17,350
solve it all with this new thing called

00:26:14,350 --> 00:26:20,440
the cluster API and the cluster API is

00:26:17,350 --> 00:26:23,259
going to basically wrap up cube admin in

00:26:20,440 --> 00:26:25,600
the same way cubic or dead and create

00:26:23,259 --> 00:26:28,360
clusters for you on Amazon Google as

00:26:25,600 --> 00:26:31,000
your digital ocean and even running in

00:26:28,360 --> 00:26:33,789
your own data center as soon as we get

00:26:31,000 --> 00:26:35,409
our first few releases out so this is

00:26:33,789 --> 00:26:37,240
exciting and if you want to learn more

00:26:35,409 --> 00:26:38,740
feel free to ping me afterwards or come

00:26:37,240 --> 00:26:41,369
see one of my talks on the cluster API

00:26:38,740 --> 00:26:43,570
and I can I can tell you more about that

00:26:41,369 --> 00:26:45,280
okay so let's get a cluster up

00:26:43,570 --> 00:26:47,710
running if you would like to take a

00:26:45,280 --> 00:26:51,340
picture of this or type that into your

00:26:47,710 --> 00:26:54,370
URL go for it and that is a github

00:26:51,340 --> 00:26:56,290
repository that I would encourage

00:26:54,370 --> 00:26:59,790
everyone here to feel free to open up

00:26:56,290 --> 00:27:02,500
pull requests to throughout the day I

00:26:59,790 --> 00:27:05,830
put this thing together I have used it a

00:27:02,500 --> 00:27:07,000
few times but it's not perfect and the

00:27:05,830 --> 00:27:08,650
whole point here is for this to be

00:27:07,000 --> 00:27:10,750
interactive so if you can fix some

00:27:08,650 --> 00:27:13,000
documentation if you want to add a new

00:27:10,750 --> 00:27:14,620
docker file whatever feel free to open

00:27:13,000 --> 00:27:16,120
up a PR today you don't even need to

00:27:14,620 --> 00:27:17,590
mention that you're doing it just open

00:27:16,120 --> 00:27:21,790
it up and if I notice it will look at it

00:27:17,590 --> 00:27:26,490
here on the screen so yeah let's take a

00:27:21,790 --> 00:27:28,360
look at this repo any questions so far

00:27:26,490 --> 00:27:29,710
before we actually try to get a

00:27:28,360 --> 00:27:35,620
kubernetes cluster up and running yes

00:27:29,710 --> 00:27:39,010
what's your question is there historical

00:27:35,620 --> 00:27:40,810
relevance to ECS so it's relevant

00:27:39,010 --> 00:27:42,400
because it's a container orchestration

00:27:40,810 --> 00:27:46,030
tool which aims to solve the same

00:27:42,400 --> 00:27:47,590
problems of kubernetes I think you know

00:27:46,030 --> 00:27:49,180
and a lot of folks agree with me on this

00:27:47,590 --> 00:27:51,160
but I personally think that the

00:27:49,180 --> 00:27:51,640
kubernetes solution is going to win and

00:27:51,160 --> 00:27:53,650
beat out

00:27:51,640 --> 00:27:56,290
ECS particularly just because of the

00:27:53,650 --> 00:27:57,790
api's alone if we're all speaking the

00:27:56,290 --> 00:28:00,820
same language then it makes it easier

00:27:57,790 --> 00:28:04,390
for us to build tooling to benefit the

00:28:00,820 --> 00:28:05,770
broader community but ECS does the same

00:28:04,390 --> 00:28:07,540
thing as kubernetes but it doesn't go

00:28:05,770 --> 00:28:08,890
quite as far as kubernetes so somebody

00:28:07,540 --> 00:28:12,040
over here mentioned secret storage

00:28:08,890 --> 00:28:13,330
earlier we don't get that any any CS and

00:28:12,040 --> 00:28:15,550
there's a handful of other features that

00:28:13,330 --> 00:28:19,650
kubernetes gives us that ECS does not as

00:28:15,550 --> 00:28:19,650
well yes question

00:28:25,810 --> 00:28:31,310
yeah so I think the question was cluster

00:28:28,310 --> 00:28:34,610
API is it related to the OCI the open

00:28:31,310 --> 00:28:37,280
container interface so that they're kind

00:28:34,610 --> 00:28:39,920
of at different levels of this stack OCI

00:28:37,280 --> 00:28:41,960
describes how you're going to make an

00:28:39,920 --> 00:28:43,700
image of a container effectively the

00:28:41,960 --> 00:28:45,500
cluster api is more of just a

00:28:43,700 --> 00:28:47,990
declarative way of managing the

00:28:45,500 --> 00:28:50,150
infrastructure of kubernetes so the

00:28:47,990 --> 00:28:51,530
cluster api in the same way that we

00:28:50,150 --> 00:28:54,740
talked about scalability earlier

00:28:51,530 --> 00:28:56,270
changing a 10 to a 10,000 the cluster

00:28:54,740 --> 00:29:02,530
api gives you that but for virtual

00:28:56,270 --> 00:29:04,940
machines question what stay native

00:29:02,530 --> 00:29:06,260
that's a really great question I

00:29:04,940 --> 00:29:09,980
honestly I haven't even played with it

00:29:06,260 --> 00:29:13,130
yet we do a thing every Friday called

00:29:09,980 --> 00:29:15,200
tea gik @fto and it's either me or Joe

00:29:13,130 --> 00:29:16,550
and if Joe does one that's kind of my

00:29:15,200 --> 00:29:18,590
week off so I kind of just completely

00:29:16,550 --> 00:29:20,180
ignore it that week but I haven't played

00:29:18,590 --> 00:29:23,210
with it yet but if anybody here wants to

00:29:20,180 --> 00:29:25,090
help our friend out feel free any other

00:29:23,210 --> 00:29:27,290
questions

00:29:25,090 --> 00:29:29,890
going once twice we're about set up a

00:29:27,290 --> 00:29:29,890
cluster so

00:29:48,950 --> 00:29:51,610
sure

00:29:51,669 --> 00:29:56,809
totally so I think docker edge is

00:29:54,889 --> 00:29:58,309
basically you come up here and you have

00:29:56,809 --> 00:30:00,799
kubernetes right here that's what you're

00:29:58,309 --> 00:30:03,860
talking about right okay so I haven't

00:30:00,799 --> 00:30:05,509
actually used that yet I don't I

00:30:03,860 --> 00:30:06,379
remember I spoke with some folks at

00:30:05,509 --> 00:30:08,210
docker and they told me they were

00:30:06,379 --> 00:30:09,860
building it in but any time you have any

00:30:08,210 --> 00:30:11,899
sort of installation tool you're left

00:30:09,860 --> 00:30:13,399
with this dependency update problem and

00:30:11,899 --> 00:30:14,840
this is this is starting to allude to

00:30:13,399 --> 00:30:17,090
the upgrade problem that I've been

00:30:14,840 --> 00:30:19,970
mentioning all day which is how do you

00:30:17,090 --> 00:30:21,799
stay in sync so I I've never played with

00:30:19,970 --> 00:30:23,029
it if we can I can try to hack on it

00:30:21,799 --> 00:30:24,980
right now and set something up and we

00:30:23,029 --> 00:30:26,269
can develop our opinions right now but

00:30:24,980 --> 00:30:28,549
there is this handy dandy little

00:30:26,269 --> 00:30:31,159
kubernetes thing you can check out here

00:30:28,549 --> 00:30:32,899
in the the docker drop down menu for the

00:30:31,159 --> 00:30:36,259
docker daemon and then over here on the

00:30:32,899 --> 00:30:38,029
left you'll yeah on the left you'll see

00:30:36,259 --> 00:30:40,700
that we have a couple of different

00:30:38,029 --> 00:30:42,259
kubernetes clusters so I will talk about

00:30:40,700 --> 00:30:44,090
the cube config and where that lives on

00:30:42,259 --> 00:30:46,999
your filesystem and how the docker

00:30:44,090 --> 00:30:48,259
daemon is aware of those values but

00:30:46,999 --> 00:30:51,109
those are all the different clusters I

00:30:48,259 --> 00:30:52,369
can authenticate ways right now so I

00:30:51,109 --> 00:31:02,139
does that answer your question at all

00:30:52,369 --> 00:31:02,139
kind of yeah any other questions yes yep

00:31:04,679 --> 00:31:09,509
it doesn't use Bosch we're effectively

00:31:07,080 --> 00:31:11,909
building our own so the way the project

00:31:09,509 --> 00:31:14,519
is set up is it describes the interface

00:31:11,909 --> 00:31:16,619
like we have a machines primitive and a

00:31:14,519 --> 00:31:19,350
machines primitive is agnostic if it's

00:31:16,619 --> 00:31:20,999
an ec2 instance an azure virtual machine

00:31:19,350 --> 00:31:22,919
in a Google virtual machine whatever and

00:31:20,999 --> 00:31:25,769
then there's specific cloud

00:31:22,919 --> 00:31:28,110
implementations that map this agnostic

00:31:25,769 --> 00:31:29,460
image to actually you know creating and

00:31:28,110 --> 00:31:31,200
destroying that infrastructure in a

00:31:29,460 --> 00:31:32,730
cloud so the idea would be that we would

00:31:31,200 --> 00:31:34,499
have a different provider for each one

00:31:32,730 --> 00:31:37,529
of the clouds and those providers just

00:31:34,499 --> 00:31:38,850
all speak a common denominator yep and

00:31:37,529 --> 00:31:40,169
then all those proprietaries are

00:31:38,850 --> 00:31:45,139
homegrown and supported by the

00:31:40,169 --> 00:31:47,759
kubernetes community any other questions

00:31:45,139 --> 00:31:50,519
okay feel free to raise your hand if you

00:31:47,759 --> 00:31:54,570
have any questions as we go forward so

00:31:50,519 --> 00:31:56,389
to start off I'm going to use cuba corn

00:31:54,570 --> 00:32:02,340
here to get a cluster up and running

00:31:56,389 --> 00:32:04,200
somebody say when is that good can you

00:32:02,340 --> 00:32:10,610
see it I can go bigger should I go

00:32:04,200 --> 00:32:13,950
bigger oh hold on let me turn around oh

00:32:10,610 --> 00:32:16,909
that is off screen here I can fix this I

00:32:13,950 --> 00:32:16,909
got this

00:32:19,510 --> 00:32:22,600
and then I just I just won't go

00:32:21,160 --> 00:32:24,010
fullscreen but I'll kind of like there

00:32:22,600 --> 00:32:28,360
that's big enough right we can all see

00:32:24,010 --> 00:32:31,090
that cool okay so if you want to

00:32:28,360 --> 00:32:34,480
download Cuba corn and and follow along

00:32:31,090 --> 00:32:37,990
with me you can go to github.com slash

00:32:34,480 --> 00:32:40,270
Cuba corn slash Cuba corn the problem is

00:32:37,990 --> 00:32:41,530
is we don't have any static releases so

00:32:40,270 --> 00:32:43,060
you're gonna have to actually compile it

00:32:41,530 --> 00:32:44,860
yourself which is why I'm also going to

00:32:43,060 --> 00:32:47,440
do a few other installation methods as

00:32:44,860 --> 00:32:49,600
well this one is just relatively easy

00:32:47,440 --> 00:32:51,250
and follows cops and just my preferred

00:32:49,600 --> 00:32:52,750
method and I feel comfortable debugging

00:32:51,250 --> 00:32:54,820
it if something goes wrong so that's why

00:32:52,750 --> 00:32:58,060
I'm gonna set it up on my end also right

00:32:54,820 --> 00:33:00,280
now if you would like to explore gke eks

00:32:58,060 --> 00:33:01,870
or any other option on your own we only

00:33:00,280 --> 00:33:03,310
have so much time today so i'm not gonna

00:33:01,870 --> 00:33:05,170
be able to go around and make sure every

00:33:03,310 --> 00:33:07,060
person sets the cluster up the same way

00:33:05,170 --> 00:33:08,590
but if you would like to start trying to

00:33:07,060 --> 00:33:10,630
set up a kubernetes cluster and you get

00:33:08,590 --> 00:33:12,190
stuck off in the weeds now's the time

00:33:10,630 --> 00:33:14,080
and I'm sure there's folks sitting near

00:33:12,190 --> 00:33:17,620
you who are also trying to go through it

00:33:14,080 --> 00:33:19,210
as well so here is me using Cuba corn

00:33:17,620 --> 00:33:22,570
and then we'll do the hep do QuickStart

00:33:19,210 --> 00:33:26,860
one as well so I have the Cuba corn

00:33:22,570 --> 00:33:29,290
binary installed on my computer and it's

00:33:26,860 --> 00:33:31,570
just a basic I can't even see my screen

00:33:29,290 --> 00:33:33,700
here hold on there we go

00:33:31,570 --> 00:33:35,830
it's just a basic command-line tool and

00:33:33,700 --> 00:33:37,690
you can see here we have create and

00:33:35,830 --> 00:33:40,270
delete and there's a handful of other

00:33:37,690 --> 00:33:43,420
sub commands so to create a cluster I'm

00:33:40,270 --> 00:33:45,630
gonna do cuba corn create the name of my

00:33:43,420 --> 00:33:48,820
cluster will call it workshop 1 and

00:33:45,630 --> 00:33:50,770
profile we're gonna do AWS and if we

00:33:48,820 --> 00:33:51,790
wanted to set it up in gku we would do

00:33:50,770 --> 00:33:52,570
that and if you wanted to use

00:33:51,790 --> 00:33:57,520
digitalocean

00:33:52,570 --> 00:34:00,790
we would do that so for AWS we're gonna

00:33:57,520 --> 00:34:02,500
do that it creates this Hamel file which

00:34:00,790 --> 00:34:04,780
is called the state of the cluster which

00:34:02,500 --> 00:34:07,270
describes things like what port the API

00:34:04,780 --> 00:34:09,310
server is listening on the size of the

00:34:07,270 --> 00:34:10,629
virtual machines we don't really need to

00:34:09,310 --> 00:34:13,149
take a look at it because that's all

00:34:10,629 --> 00:34:15,550
changing to the cluster API and then to

00:34:13,149 --> 00:34:19,840
apply that I simply do cubic or an apply

00:34:15,550 --> 00:34:22,360
the name of our cluster and I have

00:34:19,840 --> 00:34:25,210
environmental variables exported with my

00:34:22,360 --> 00:34:28,629
Amazon secret and it's actually going

00:34:25,210 --> 00:34:29,690
and setting up infrastructure in Amazon

00:34:28,629 --> 00:34:37,210
for us

00:34:29,690 --> 00:34:37,210
so let's go to my Amazon console sign in

00:34:38,500 --> 00:34:45,700
and if we go to ec2 here we should be

00:34:42,530 --> 00:34:50,569
able to see a handful of instances

00:34:45,700 --> 00:34:52,129
starting to come up so we have one

00:34:50,569 --> 00:34:52,490
running and we should ultimately get

00:34:52,129 --> 00:34:54,409
yeah

00:34:52,490 --> 00:34:58,670
there should be two that are coming up

00:34:54,409 --> 00:35:01,099
now so that's what's being set up in the

00:34:58,670 --> 00:35:03,200
background bicubic horn so to go a

00:35:01,099 --> 00:35:04,640
little bit more granularly let's go

00:35:03,200 --> 00:35:16,520
through the hefty Oh quick start

00:35:04,640 --> 00:35:19,630
together on your end as well uh so this

00:35:16,520 --> 00:35:27,530
link should probably be here in the repo

00:35:19,630 --> 00:35:29,000
I'm gonna cheat and just add it cool so

00:35:27,530 --> 00:35:31,849
if you want to refresh that on your end

00:35:29,000 --> 00:35:34,940
you should now have the link and we're

00:35:31,849 --> 00:35:38,210
gonna be going through this together so

00:35:34,940 --> 00:35:39,829
this describes what you're gonna get the

00:35:38,210 --> 00:35:42,800
big difference between cuba corn and the

00:35:39,829 --> 00:35:44,119
hefty Oh QuickStart is that we were

00:35:42,800 --> 00:35:46,760
going to be running the QuickStart

00:35:44,119 --> 00:35:48,260
virtual machines in a private subnet so

00:35:46,760 --> 00:35:50,599
that introduces the need for this

00:35:48,260 --> 00:35:52,970
bastion host here so in order for us to

00:35:50,599 --> 00:35:54,589
SSH into our cluster we would have to go

00:35:52,970 --> 00:35:58,190
through a bastion but that doesn't

00:35:54,589 --> 00:35:59,750
really matter as we're only gonna be

00:35:58,190 --> 00:36:01,520
interacting with kubernetes through the

00:35:59,750 --> 00:36:05,900
api server for the most part of today's

00:36:01,520 --> 00:36:08,180
demo which is publicly exposed so i

00:36:05,900 --> 00:36:14,150
think we can do the deployment guide

00:36:08,180 --> 00:36:20,140
here nope that's not what we want how to

00:36:14,150 --> 00:36:20,140
deploy deploy into a new V PC

00:36:22,130 --> 00:36:27,380
so we have our design template down here

00:36:25,609 --> 00:36:32,569
it's automatically populated so I think

00:36:27,380 --> 00:36:34,989
we can just go next we'll give it a

00:36:32,569 --> 00:36:39,549
stack name we'll call this workshop two

00:36:34,989 --> 00:36:42,950
and then we have to define a few

00:36:39,549 --> 00:36:45,319
configuration bits down here the admin

00:36:42,950 --> 00:36:49,700
ingress location so I'm gonna just

00:36:45,319 --> 00:36:56,180
yellow open that up and I'm gonna use my

00:36:49,700 --> 00:36:58,430
K Nova that's this H key and just give

00:36:56,180 --> 00:37:01,519
all of this a quick overview this all

00:36:58,430 --> 00:37:08,390
looks pretty solid yeah that looks good

00:37:01,519 --> 00:37:11,119
to me um I need an iamb role I might

00:37:08,390 --> 00:37:17,420
need to go create one of these let's do

00:37:11,119 --> 00:37:18,680
that here show of hands who here is

00:37:17,420 --> 00:37:22,279
setting up using you have to go a quick

00:37:18,680 --> 00:37:25,609
start right now who here is doing gke is

00:37:22,279 --> 00:37:28,489
anybody doing mini cube would anybody

00:37:25,609 --> 00:37:30,619
like to see mini cube okay will do mini

00:37:28,489 --> 00:37:35,150
keep up for this is there anything else

00:37:30,619 --> 00:37:39,049
anybody wants to see is that a quest

00:37:35,150 --> 00:37:41,140
nope okay cool if it is just shout it

00:37:39,049 --> 00:37:41,140
out

00:37:42,819 --> 00:37:47,079
yo oh sorry

00:37:50,140 --> 00:37:54,980
um I can do whatever if you want in a

00:37:53,600 --> 00:38:00,230
different form I can get it to you in a

00:37:54,980 --> 00:38:01,550
different form okay yeah totally um yeah

00:38:00,230 --> 00:38:07,580
just let me know and I can maybe even do

00:38:01,550 --> 00:38:10,300
it here at the end okay so I need to set

00:38:07,580 --> 00:38:10,300
up an IM role

00:38:18,619 --> 00:38:23,059
so I'm setting up a new ec2 role and I'm

00:38:21,170 --> 00:38:25,249
gonna give that the administrator access

00:38:23,059 --> 00:38:26,420
policy just in the name of time because

00:38:25,249 --> 00:38:28,700
we only have about two minutes before

00:38:26,420 --> 00:38:38,900
our next break and I'm gonna call it

00:38:28,700 --> 00:38:44,210
caves admin no I don't know why I kicked

00:38:38,900 --> 00:38:45,829
me out but it did okay and over the

00:38:44,210 --> 00:38:49,099
break I will do mini cube so that we

00:38:45,829 --> 00:38:52,069
stay on topic but I guess if folks want

00:38:49,099 --> 00:38:53,900
to take a break now or ask questions go

00:38:52,069 --> 00:38:55,729
for it we're about two minutes early and

00:38:53,900 --> 00:38:57,319
it's just gonna be setting up a cluster

00:38:55,729 --> 00:39:02,779
for the next probably ten minutes or so

00:38:57,319 --> 00:39:04,039
or a question yeah it's going pretty

00:39:02,779 --> 00:39:06,920
fast can we slow it down

00:39:04,039 --> 00:39:08,539
sure is there anything in particular

00:39:06,920 --> 00:39:16,479
that I went fast on that you would like

00:39:08,539 --> 00:39:16,479
to see understood any other questions

00:39:17,349 --> 00:39:23,660
yeah totally

00:39:20,210 --> 00:39:25,400
so I will slow down and be a little more

00:39:23,660 --> 00:39:27,499
concrete if I start to go fast just wave

00:39:25,400 --> 00:39:33,019
your hand and yell at me okay any other

00:39:27,499 --> 00:39:35,509
questions great so yeah so for the hef

00:39:33,019 --> 00:39:37,999
deal quick start I'm giving it a stack

00:39:35,509 --> 00:39:42,109
name for the availability zone I'm just

00:39:37,999 --> 00:39:45,529
picking us West to be and for the admin

00:39:42,109 --> 00:39:47,920
ingress location I'm opening it up to

00:39:45,529 --> 00:39:47,920
the world

00:39:59,109 --> 00:40:05,890
and now I'm trying to figure out which

00:40:01,059 --> 00:40:15,369
type of I am role I need to create for

00:40:05,890 --> 00:40:17,849
the hep do QuickStart stack here timer

00:40:15,369 --> 00:40:17,849
okay

00:40:25,070 --> 00:40:31,310
um all of these I am rolls do is just

00:40:28,550 --> 00:40:33,710
give our CloudFormation that we're using

00:40:31,310 --> 00:40:35,690
in the hefty Oh quick start the ability

00:40:33,710 --> 00:40:38,210
to create infrastructure it's just a

00:40:35,690 --> 00:40:41,660
security policy it's just basic role

00:40:38,210 --> 00:40:43,970
authentication okay and now that I've

00:40:41,660 --> 00:40:52,970
created that I should be able to refresh

00:40:43,970 --> 00:40:56,140
this page lose all of my work again and

00:40:52,970 --> 00:40:56,140
define it here

00:41:10,500 --> 00:41:17,040
okay so now that we have that I am role

00:41:12,570 --> 00:41:20,900
there I can go ahead and click Next and

00:41:17,040 --> 00:41:20,900
I'll click create

00:41:23,480 --> 00:41:30,350
and that should be coming up any moment

00:41:26,840 --> 00:41:31,730
now okay any questions on getting the

00:41:30,350 --> 00:41:34,640
Hef deal quick start up and running I

00:41:31,730 --> 00:41:36,710
know I went fast on that basically I'm

00:41:34,640 --> 00:41:38,090
trying to demonstrate that getting

00:41:36,710 --> 00:41:40,670
kubernetes up and running as a bit of a

00:41:38,090 --> 00:41:41,840
journey and if I was to sit here and try

00:41:40,670 --> 00:41:44,450
to get everybody to do it in the same

00:41:41,840 --> 00:41:46,369
way it would take a lot of time so I'm

00:41:44,450 --> 00:41:48,920
trying to save folks a little bit of

00:41:46,369 --> 00:41:50,330
headache here and just get us to the

00:41:48,920 --> 00:41:52,700
point where we all have a cluster up and

00:41:50,330 --> 00:41:54,170
running the reason for that is the whole

00:41:52,700 --> 00:41:59,030
promise of kubernetes is it doesn't

00:41:54,170 --> 00:42:02,680
matter where you run it right okay so

00:41:59,030 --> 00:42:02,680
we're we're waiting for that to spin up

00:42:03,670 --> 00:42:10,700
we said we wanted to see mini cube as

00:42:05,930 --> 00:42:12,830
well so to do mini cube you can go to

00:42:10,700 --> 00:42:16,250
the official kubernetes documentation I

00:42:12,830 --> 00:42:19,010
just googled for mini cube if you come

00:42:16,250 --> 00:42:20,540
here to the installation bit you can see

00:42:19,010 --> 00:42:23,530
that there's this quick start for mini

00:42:20,540 --> 00:42:26,780
cube and if you click on installing it

00:42:23,530 --> 00:42:29,930
this is really the page you want to go

00:42:26,780 --> 00:42:32,200
to so I'll add this to the repository as

00:42:29,930 --> 00:42:32,200
well

00:42:43,980 --> 00:42:49,870
cool so if you would like to go there

00:42:46,300 --> 00:42:51,160
and follow along feel free to so the

00:42:49,870 --> 00:42:52,210
first thing that we want to do is we

00:42:51,160 --> 00:42:54,970
want to make sure that we have a

00:42:52,210 --> 00:42:57,850
hypervisor installed the reason that we

00:42:54,970 --> 00:42:59,710
need a hypervisor with mini cube is the

00:42:57,850 --> 00:43:04,510
whole the whole way that the cluster

00:42:59,710 --> 00:43:07,840
works is there's basically a community

00:43:04,510 --> 00:43:09,880
provided virtual machine image that runs

00:43:07,840 --> 00:43:12,640
a kubernetes cluster on a virtual

00:43:09,880 --> 00:43:14,680
machine on your local computer so it

00:43:12,640 --> 00:43:17,260
doesn't actually run kubernetes on your

00:43:14,680 --> 00:43:18,790
on your localhost your laptop here it's

00:43:17,260 --> 00:43:20,770
actually going to spin up a virtual

00:43:18,790 --> 00:43:22,030
machine and that virtual machine is

00:43:20,770 --> 00:43:25,200
gonna have all of the kubernetes

00:43:22,030 --> 00:43:28,030
components running inside event because

00:43:25,200 --> 00:43:29,890
kubernetes is scalable it can you can

00:43:28,030 --> 00:43:33,250
technically run a full kubernetes

00:43:29,890 --> 00:43:36,040
cluster on just one VM you just install

00:43:33,250 --> 00:43:37,870
all of the software on one VM and point

00:43:36,040 --> 00:43:41,170
it to localhost instead of somewhere

00:43:37,870 --> 00:43:42,040
else on the network so to install a

00:43:41,170 --> 00:43:44,590
VirtualBox

00:43:42,040 --> 00:43:45,820
go you can go to the link here and you

00:43:44,590 --> 00:43:51,190
can see that there's a VirtualBox

00:43:45,820 --> 00:43:52,600
download for the OS X host you want to

00:43:51,190 --> 00:43:55,540
click here if you're running on Windows

00:43:52,600 --> 00:43:58,930
there's a link there as well and go

00:43:55,540 --> 00:44:00,520
ahead and download that and you will get

00:43:58,930 --> 00:44:08,800
everything you need to run the virtual

00:44:00,520 --> 00:44:10,960
machine on your local computer after

00:44:08,800 --> 00:44:13,200
that's installed you're gonna want to

00:44:10,960 --> 00:44:16,090
install this command line tool called

00:44:13,200 --> 00:44:18,910
well this is a great conversation to

00:44:16,090 --> 00:44:21,400
have there's about 90 different ways to

00:44:18,910 --> 00:44:23,970
pronounce that I personally say Q

00:44:21,400 --> 00:44:27,160
Bechtel because I enjoy trolling people

00:44:23,970 --> 00:44:29,950
but feel free to call it cube CTL or

00:44:27,160 --> 00:44:31,630
cube control or cubic huddle you'll hear

00:44:29,950 --> 00:44:33,670
all of those used in the in the

00:44:31,630 --> 00:44:36,550
community around kubernetes and they're

00:44:33,670 --> 00:44:38,260
all referring to this tool here and

00:44:36,550 --> 00:44:40,300
we're gonna wait and install this until

00:44:38,260 --> 00:44:44,250
after our break because this is a really

00:44:40,300 --> 00:44:44,250
important part of kubernetes

00:44:47,810 --> 00:44:58,940
I'm sorry yep that's this next step here

00:44:54,990 --> 00:44:58,940
where it says install mini cube yep

00:45:03,010 --> 00:45:07,750
uh it did work at one point I think I

00:45:06,130 --> 00:45:09,610
remember somebody mentioning that it was

00:45:07,750 --> 00:45:12,280
either X hive or bee hive was officially

00:45:09,610 --> 00:45:17,770
deprecated but I think you can use

00:45:12,280 --> 00:45:20,800
pretty much any hypervisor hyperacute I

00:45:17,770 --> 00:45:22,660
have I don't know let's see it looks

00:45:20,800 --> 00:45:24,880
like it's from mobi which is was once

00:45:22,660 --> 00:45:26,590
upon a time called docker so this looks

00:45:24,880 --> 00:45:32,920
like it's just another VM implementation

00:45:26,590 --> 00:45:35,020
from our friends at docker cool so we

00:45:32,920 --> 00:45:38,740
are at this point we're downloading our

00:45:35,020 --> 00:45:40,780
VirtualBox image here I actually already

00:45:38,740 --> 00:45:46,210
have one installed so I can just open

00:45:40,780 --> 00:45:47,740
that up here and you'll see that I've

00:45:46,210 --> 00:45:49,570
actually already got a mini cube image

00:45:47,740 --> 00:45:52,870
up and running but we'll still go

00:45:49,570 --> 00:45:55,180
through the whole process so mini cube

00:45:52,870 --> 00:45:57,400
works from a command-line tools

00:45:55,180 --> 00:45:59,830
perspective so you would download the

00:45:57,400 --> 00:46:01,750
mini cube command-line tool and then you

00:45:59,830 --> 00:46:03,880
actually use the command-line tool to

00:46:01,750 --> 00:46:06,370
set up your virtual machine it's

00:46:03,880 --> 00:46:11,080
actually remarkably easy so to download

00:46:06,370 --> 00:46:13,120
mini cube you come here in this case I

00:46:11,080 --> 00:46:15,940
would download the mini cube Darwyn

00:46:13,120 --> 00:46:18,250
binary if you're running on Linux here's

00:46:15,940 --> 00:46:20,140
the Linux one and it looks like we even

00:46:18,250 --> 00:46:30,400
have one for our friends running Windows

00:46:20,140 --> 00:46:34,270
as well so downloads that how to get to

00:46:30,400 --> 00:46:35,800
this page yep so from this page if you

00:46:34,270 --> 00:46:38,410
just click this latest release right

00:46:35,800 --> 00:46:42,940
here yep and then that's just gonna

00:46:38,410 --> 00:46:45,460
bring you to kubernetes / mini cube it's

00:46:42,940 --> 00:46:46,810
just an important bit of trivia here if

00:46:45,460 --> 00:46:50,680
you look in the top left you'll notice

00:46:46,810 --> 00:46:52,030
that it's kubernetes this tells us just

00:46:50,680 --> 00:46:53,890
from looking at the page this is an

00:46:52,030 --> 00:46:55,930
official community supported project

00:46:53,890 --> 00:46:57,850
meaning this isn't built by a company

00:46:55,930 --> 00:47:00,640
it's built by several companies coming

00:46:57,850 --> 00:47:02,500
together to work and maintain this the

00:47:00,640 --> 00:47:05,320
kubernetes community in general because

00:47:02,500 --> 00:47:07,960
of tools like this is one of the big

00:47:05,320 --> 00:47:10,090
value-adds of kubernetes the community

00:47:07,960 --> 00:47:13,060
built this and because it uses the

00:47:10,090 --> 00:47:14,650
standardized API for everything we get

00:47:13,060 --> 00:47:16,869
to take advantage of a lot of that for

00:47:14,650 --> 00:47:18,640
free so anytime I can

00:47:16,869 --> 00:47:22,990
find a community-driven project like

00:47:18,640 --> 00:47:28,390
this I usually opt into using them so

00:47:22,990 --> 00:47:32,049
yeah after you download the binary I'm

00:47:28,390 --> 00:47:37,630
sorry yeah I just pick one that's right

00:47:32,049 --> 00:47:40,150
for you for your architecture so I

00:47:37,630 --> 00:47:44,499
downloaded the the Darwin and II 64 cuz

00:47:40,150 --> 00:47:51,910
I'm running a MacBook cool after you get

00:47:44,499 --> 00:48:00,849
that running actually let me just do

00:47:51,910 --> 00:48:07,329
this I can make that executable by doing

00:48:00,849 --> 00:48:11,430
a choo mod + X the name of the the

00:48:07,329 --> 00:48:18,009
binary here and then I can move that

00:48:11,430 --> 00:48:19,329
into my path user local Ben and then I'm

00:48:18,009 --> 00:48:20,799
just going to call it mini queue I

00:48:19,329 --> 00:48:23,410
already have one there but I'm gonna go

00:48:20,799 --> 00:48:27,489
ahead and replace it so that's how you

00:48:23,410 --> 00:48:30,880
install mini cube in Naville uh is

00:48:27,489 --> 00:48:36,809
everybody good we good so far now if you

00:48:30,880 --> 00:48:36,809
want to run it here you totally can

00:48:38,519 --> 00:48:44,529
there we go and just like cubic horn

00:48:42,099 --> 00:48:47,829
you'll see a lot at ease

00:48:44,529 --> 00:48:50,339
we have delete and we have start and we

00:48:47,829 --> 00:48:50,339
have stop

00:48:54,050 --> 00:49:01,600
okay so to start up a kubernetes cluster

00:48:57,170 --> 00:49:05,660
with mini cube you type mini cube start

00:49:01,600 --> 00:49:08,000
and the command-line tool is going to

00:49:05,660 --> 00:49:09,760
automatically detect VirtualBox that's

00:49:08,000 --> 00:49:13,040
why I suggested we all use VirtualBox

00:49:09,760 --> 00:49:14,690
and we'll download the image

00:49:13,040 --> 00:49:19,520
automatically for you from the

00:49:14,690 --> 00:49:23,270
communities repositories and actually

00:49:19,520 --> 00:49:25,730
magically start up this VirtualBox image

00:49:23,270 --> 00:49:29,990
here and you can see now it says it's

00:49:25,730 --> 00:49:34,040
running whereas a moment ago it was it

00:49:29,990 --> 00:49:37,160
was in a I think a stop state so after

00:49:34,040 --> 00:49:38,750
this is done we're gonna take a look at

00:49:37,160 --> 00:49:39,830
the cube config file once the folks get

00:49:38,750 --> 00:49:47,510
back into the room we'll give them

00:49:39,830 --> 00:49:48,260
another minute or so yes who's talking

00:49:47,510 --> 00:49:53,270
can you raise your hand

00:49:48,260 --> 00:49:55,760
oh hi what was your question the

00:49:53,270 --> 00:49:57,620
ranchers kubernetes installer so in

00:49:55,760 --> 00:50:00,680
general the rancher one the tectonic one

00:49:57,620 --> 00:50:03,260
so these are companies that have they

00:50:00,680 --> 00:50:04,910
have a tool that solves this problem for

00:50:03,260 --> 00:50:06,500
you right it's like a paid service you

00:50:04,910 --> 00:50:08,450
would you would call up Rancher and say

00:50:06,500 --> 00:50:09,800
hey I want to buy your service and then

00:50:08,450 --> 00:50:12,890
you would have it like a really shiny

00:50:09,800 --> 00:50:13,970
dashboard that allows allows you to set

00:50:12,890 --> 00:50:16,400
up kubernetes that look kind of the

00:50:13,970 --> 00:50:17,660
click of a button so yeah there's a lot

00:50:16,400 --> 00:50:18,410
of folks who are moving in that

00:50:17,660 --> 00:50:20,900
direction

00:50:18,410 --> 00:50:22,550
that's you know my opinion on it is like

00:50:20,900 --> 00:50:24,110
it's just like moving to the cloud right

00:50:22,550 --> 00:50:25,670
like if you want to throw money at the

00:50:24,110 --> 00:50:25,970
problem instead of solving it on your

00:50:25,670 --> 00:50:28,850
end

00:50:25,970 --> 00:50:31,160
that's a 10 out of 10 would recommend it

00:50:28,850 --> 00:50:33,200
makes it easier I don't want to plug my

00:50:31,160 --> 00:50:35,150
company because I am more interested in

00:50:33,200 --> 00:50:38,000
plugging the open-source software but

00:50:35,150 --> 00:50:39,680
there are companies mine included who do

00:50:38,000 --> 00:50:41,600
things like that and actually make that

00:50:39,680 --> 00:50:42,800
easier if you're interested in talking

00:50:41,600 --> 00:50:44,860
more about that

00:50:42,800 --> 00:50:47,210
I'm happy to kind of go off in the weeds

00:50:44,860 --> 00:50:48,160
technically speaking I haven't really

00:50:47,210 --> 00:50:51,290
used the Installer

00:50:48,160 --> 00:50:54,740
but any installer I would prefer them to

00:50:51,290 --> 00:50:57,380
use cube admin as the installation layer

00:50:54,740 --> 00:50:59,570
which I know mini cube does not use by

00:50:57,380 --> 00:51:03,140
default although it does take a flag for

00:50:59,570 --> 00:51:04,850
you to use just because that's the

00:51:03,140 --> 00:51:06,080
official way of starting kubernetes and

00:51:04,850 --> 00:51:06,680
i would like to see more people doing

00:51:06,080 --> 00:51:09,110
that

00:51:06,680 --> 00:51:10,520
um but yeah there's there's a couple of

00:51:09,110 --> 00:51:11,450
solutions out there like that any other

00:51:10,520 --> 00:51:17,650
questions

00:51:11,450 --> 00:51:17,650
yes I I can't hear you I'm sorry

00:51:17,740 --> 00:51:24,800
have I heard of the what can somebody

00:51:21,530 --> 00:51:27,140
help me I can't hear that rke I have not

00:51:24,800 --> 00:51:38,000
heard of RK e what is r ke should what

00:51:27,140 --> 00:51:40,490
should I google it oh this is uh looks

00:51:38,000 --> 00:51:42,560
like it's ranchers thing rancher

00:51:40,490 --> 00:51:44,270
kubernetes engine an extremely simple

00:51:42,560 --> 00:51:47,930
lightweight fast kubernetes installer

00:51:44,270 --> 00:51:49,550
that works everywhere awesome so yeah

00:51:47,930 --> 00:51:52,430
earlier I mentioned if you want to open

00:51:49,550 --> 00:51:53,810
up a PR to the repository I'm just

00:51:52,430 --> 00:51:55,810
trying to track these so the more

00:51:53,810 --> 00:52:00,920
workshops I do folks get a better

00:51:55,810 --> 00:52:04,700
understanding so that is C hefty o slash

00:52:00,920 --> 00:52:09,950
kubernetes workshop if you would like to

00:52:04,700 --> 00:52:11,330
add a snippet here in this file um feel

00:52:09,950 --> 00:52:12,920
free to PR that if not all out it

00:52:11,330 --> 00:52:15,980
afterwards as well but it seems to be

00:52:12,920 --> 00:52:17,570
yet another kubernetes installer and I

00:52:15,980 --> 00:52:20,450
guess that's a really good segue into

00:52:17,570 --> 00:52:23,330
another lesson which is there's a lot of

00:52:20,450 --> 00:52:24,680
kubernetes installers and that's one of

00:52:23,330 --> 00:52:27,200
the reasons why I didn't stand up here

00:52:24,680 --> 00:52:28,700
and say go set it up this way

00:52:27,200 --> 00:52:31,100
because I think it's important for folks

00:52:28,700 --> 00:52:33,950
to realize that there is no right way

00:52:31,100 --> 00:52:35,300
there's just different ways and there's

00:52:33,950 --> 00:52:37,460
pros and cons to each one

00:52:35,300 --> 00:52:39,620
so the first takeaway from this is

00:52:37,460 --> 00:52:42,320
getting kubernetes up and running is a

00:52:39,620 --> 00:52:43,670
pain in the ass and you're gonna have to

00:52:42,320 --> 00:52:44,660
develop your own opinions and figure out

00:52:43,670 --> 00:52:50,510
what makes sense for you and your team

00:52:44,660 --> 00:52:53,180
just to be frank yep openshift

00:52:50,510 --> 00:52:56,570
yeah open chefs who here works for Red

00:52:53,180 --> 00:52:59,240
Hat and yep okay so open shift is great

00:52:56,570 --> 00:53:01,430
Red Hat is a huge community community

00:52:59,240 --> 00:53:03,080
member and kubernetes but just like

00:53:01,430 --> 00:53:06,110
Rancher it's another service provider

00:53:03,080 --> 00:53:08,300
right so it's another example of paying

00:53:06,110 --> 00:53:09,890
somebody to solve a lot of these

00:53:08,300 --> 00:53:11,870
problems and take away this sort of

00:53:09,890 --> 00:53:13,940
support burden that you and your team

00:53:11,870 --> 00:53:17,090
are gonna have if you decide to start

00:53:13,940 --> 00:53:19,190
running kubernetes and what's really

00:53:17,090 --> 00:53:20,030
kind of great about all this is once all

00:53:19,190 --> 00:53:21,440
this is done

00:53:20,030 --> 00:53:24,830
and you kind of get the kubernetes

00:53:21,440 --> 00:53:26,810
install done kubernetes is actually like

00:53:24,830 --> 00:53:29,150
really easy and a lot of fun it's just

00:53:26,810 --> 00:53:31,550
kind of annoying to get here but it's

00:53:29,150 --> 00:53:37,310
open-source software and that's where we

00:53:31,550 --> 00:53:39,080
are but yeah any other questions and

00:53:37,310 --> 00:53:40,790
then we'll start back kind of with our

00:53:39,080 --> 00:53:53,810
lecture here in a moment yeah question

00:53:40,790 --> 00:53:55,670
oh it does by default okay cool

00:53:53,810 --> 00:53:57,410
so I guess there was a switch at some

00:53:55,670 --> 00:53:59,420
point I'm not sure when that switch was

00:53:57,410 --> 00:54:04,550
last i checked it we weren't using it so

00:53:59,420 --> 00:54:06,560
that's good to know as well okay cool

00:54:04,550 --> 00:54:08,030
and then just to kind of give folks a

00:54:06,560 --> 00:54:09,920
high overview of the way this repo is

00:54:08,030 --> 00:54:12,470
set up this is the link I shared earlier

00:54:09,920 --> 00:54:14,390
we have this install mark down here

00:54:12,470 --> 00:54:15,770
which feel free to add notes to that if

00:54:14,390 --> 00:54:17,510
there's notes that you think would

00:54:15,770 --> 00:54:19,130
benefit everyone else and then we're

00:54:17,510 --> 00:54:21,140
gonna move into this next section may

00:54:19,130 --> 00:54:22,370
into a container and we're gonna go

00:54:21,140 --> 00:54:24,230
pretty slow through that because I feel

00:54:22,370 --> 00:54:26,870
like there's a lot to learn there in

00:54:24,230 --> 00:54:28,580
just a moment and then I think we're

00:54:26,870 --> 00:54:30,650
gonna have to wait on gke until maybe

00:54:28,580 --> 00:54:33,350
after the after the session if that's

00:54:30,650 --> 00:54:39,920
okay who asks for gke you did if that's

00:54:33,350 --> 00:54:41,180
all right okay okay so welcome back

00:54:39,920 --> 00:54:44,030
we're gonna kind of start restart the

00:54:41,180 --> 00:54:47,060
lecture now so just see if folks a quick

00:54:44,030 --> 00:54:49,130
overview of what we've done I downloaded

00:54:47,060 --> 00:54:51,740
mini cube and VirtualBox and I ran mini

00:54:49,130 --> 00:54:55,990
cube start and that is bootstrapping now

00:54:51,740 --> 00:54:59,150
I also did a hefty Oh QuickStart cluster

00:54:55,990 --> 00:55:02,230
by going through this deploy into a new

00:54:59,150 --> 00:55:05,030
V PC link here and there's a link in the

00:55:02,230 --> 00:55:06,500
the repo here that this should that the

00:55:05,030 --> 00:55:08,330
idea is this is the only link you're

00:55:06,500 --> 00:55:11,540
going to need for today so we're gonna

00:55:08,330 --> 00:55:14,120
keep piling links in here so that

00:55:11,540 --> 00:55:20,600
QuickStart is up and running and we can

00:55:14,120 --> 00:55:22,510
see that here for wk - although it looks

00:55:20,600 --> 00:55:24,890
like we might have ran into some issues

00:55:22,510 --> 00:55:26,690
maybe I think it may be recreating it

00:55:24,890 --> 00:55:29,320
again let's actually go see and what's

00:55:26,690 --> 00:55:29,320
going on here

00:55:31,270 --> 00:55:38,210
okay yeah so I guess the bastion was

00:55:35,420 --> 00:55:40,580
terminated for some reason I might have

00:55:38,210 --> 00:55:42,200
to redeploy our hefty Oh quick start it

00:55:40,580 --> 00:55:43,700
looks like we had some issues this is

00:55:42,200 --> 00:55:45,700
one of the things with CloudFormation is

00:55:43,700 --> 00:55:47,750
just sometimes it just has bad weather

00:55:45,700 --> 00:55:50,750
which is one of the reasons why I

00:55:47,750 --> 00:55:52,670
suggested to use cuba corn which to pat

00:55:50,750 --> 00:55:56,620
myself on the back is up and working

00:55:52,670 --> 00:55:56,620
perfectly as expected go Chris

00:55:58,180 --> 00:56:06,920
okay so let's go back into our slides

00:56:03,410 --> 00:56:08,150
now show of hands who here feels who

00:56:06,920 --> 00:56:09,880
here how's the cluster up and running

00:56:08,150 --> 00:56:12,260
already

00:56:09,880 --> 00:56:15,320
who here is on their way to getting the

00:56:12,260 --> 00:56:16,550
cluster up and running okay should I

00:56:15,320 --> 00:56:17,930
should I wait to move forward or should

00:56:16,550 --> 00:56:19,460
I go into the lecture now I want to make

00:56:17,930 --> 00:56:23,270
sure I don't confuse people don't move

00:56:19,460 --> 00:56:26,330
forward yes move forward okay okay

00:56:23,270 --> 00:56:28,970
all right so as our clusters come up I'm

00:56:26,330 --> 00:56:31,430
going to just talk about what the first

00:56:28,970 --> 00:56:33,920
thing we're gonna do in our cluster is

00:56:31,430 --> 00:56:35,420
after it gets up and running so this

00:56:33,920 --> 00:56:38,570
should burn it a couple more minutes and

00:56:35,420 --> 00:56:39,650
then when that's all said and done we

00:56:38,570 --> 00:56:41,540
should be able to actually run that

00:56:39,650 --> 00:56:43,250
against our clusters I'll be able to do

00:56:41,540 --> 00:56:44,990
it here on my screen and then hopefully

00:56:43,250 --> 00:56:53,780
you'll be able to replicate it on your

00:56:44,990 --> 00:56:56,600
end as well okay so this next section is

00:56:53,780 --> 00:57:00,290
we're gonna go from a main function of

00:56:56,600 --> 00:57:02,570
any old program to a container in the

00:57:00,290 --> 00:57:04,100
repository I'll pull it up in a second

00:57:02,570 --> 00:57:06,260
there's a directory called main

00:57:04,100 --> 00:57:09,980
container and I think there's seven or

00:57:06,260 --> 00:57:12,920
eight examples of like Java and bash and

00:57:09,980 --> 00:57:14,600
golang and Python and if a programming

00:57:12,920 --> 00:57:16,900
language that you write is not in there

00:57:14,600 --> 00:57:19,520
I would encourage you to open up a PR

00:57:16,900 --> 00:57:23,240
and create one because it's pretty easy

00:57:19,520 --> 00:57:25,070
to do and today okay so we're going to

00:57:23,240 --> 00:57:27,410
be creating a basic hello world program

00:57:25,070 --> 00:57:29,600
that all it does is it echoes out some

00:57:27,410 --> 00:57:31,430
texts to standard out and we can do that

00:57:29,600 --> 00:57:33,200
in virtually any computer in any

00:57:31,430 --> 00:57:35,870
programming language as long as we can

00:57:33,200 --> 00:57:39,050
execute that code somehow inside of the

00:57:35,870 --> 00:57:41,780
container and we'll need some sort of

00:57:39,050 --> 00:57:43,820
container image building tool some

00:57:41,780 --> 00:57:44,270
examples of these are probably the most

00:57:43,820 --> 00:57:47,630
common

00:57:44,270 --> 00:57:49,940
to use is docker there's another one

00:57:47,630 --> 00:57:53,600
called bilder that is from our friends

00:57:49,940 --> 00:57:56,420
at Red Hat Jesse has one called I think

00:57:53,600 --> 00:57:59,570
it's pronounced image or in but it's

00:57:56,420 --> 00:58:00,950
just IMG this is another example and

00:57:59,570 --> 00:58:04,400
you'll see this pattern in kubernetes a

00:58:00,950 --> 00:58:07,100
lot of more than one way to accomplish

00:58:04,400 --> 00:58:10,190
the same task today we're going to be

00:58:07,100 --> 00:58:12,590
using docker simply because they're sort

00:58:10,190 --> 00:58:15,140
of the OGIS here and I feel like they

00:58:12,590 --> 00:58:18,020
have the best user experience for

00:58:15,140 --> 00:58:19,970
actually creating a container and we'll

00:58:18,020 --> 00:58:23,840
talk about what a container and what an

00:58:19,970 --> 00:58:26,510
image is concretely in a moment we'll

00:58:23,840 --> 00:58:29,060
also need a registry which is basically

00:58:26,510 --> 00:58:31,340
going to serve as our artifact registry

00:58:29,060 --> 00:58:33,380
who here has used some type of registry

00:58:31,340 --> 00:58:35,000
before like artifactory or something

00:58:33,380 --> 00:58:38,480
else okay so you're familiar with this

00:58:35,000 --> 00:58:40,850
concept of creating something a static

00:58:38,480 --> 00:58:42,950
binary perhaps and pushing it up to some

00:58:40,850 --> 00:58:45,530
service and then pulling down from that

00:58:42,950 --> 00:58:47,900
service as your point of distributing

00:58:45,530 --> 00:58:52,010
your application so containers work in

00:58:47,900 --> 00:58:55,190
the exact same way okay the big question

00:58:52,010 --> 00:59:00,070
what is a container who here wants to

00:58:55,190 --> 00:59:03,590
try to answer this question go a process

00:59:00,070 --> 00:59:06,350
I'm gonna clap because that's actually a

00:59:03,590 --> 00:59:09,500
really OnPoint explanation for what a

00:59:06,350 --> 00:59:14,180
container is containers are they're

00:59:09,500 --> 00:59:15,590
definitely a new yep he's so he said it

00:59:14,180 --> 00:59:17,360
looks like an operating system at a

00:59:15,590 --> 00:59:20,290
certain level and I have a diagram that

00:59:17,360 --> 00:59:23,870
supports way what he just said

00:59:20,290 --> 00:59:27,650
so get rid of the idea that a container

00:59:23,870 --> 00:59:30,020
is a thing in your mind there's no such

00:59:27,650 --> 00:59:33,400
thing as a container it's ultimately

00:59:30,020 --> 00:59:35,780
just a system process who here has ever

00:59:33,400 --> 00:59:38,060
examined a system process before on a

00:59:35,780 --> 00:59:40,040
unix-like operating system so we're all

00:59:38,060 --> 00:59:43,010
familiar with things like it's going to

00:59:40,040 --> 00:59:45,140
get a pig we can do a stack trace on it

00:59:43,010 --> 00:59:47,150
we can send signals to it this is just a

00:59:45,140 --> 00:59:48,680
regular old process and there's a

00:59:47,150 --> 00:59:51,530
process scheduler on the system that

00:59:48,680 --> 00:59:54,140
actually starts this process that's what

00:59:51,530 --> 00:59:57,560
a container is it's just another system

00:59:54,140 --> 00:59:58,160
process and so how I like to describe a

00:59:57,560 --> 01:00:01,039
container

00:59:58,160 --> 01:00:03,170
is this important business square is

01:00:01,039 --> 01:00:05,119
like your application right this is your

01:00:03,170 --> 01:00:06,980
main function this is this is your

01:00:05,119 --> 01:00:08,900
program that can run and all of its

01:00:06,980 --> 01:00:11,119
programming goodness that makes you and

01:00:08,900 --> 01:00:13,579
your company lots of money and that runs

01:00:11,119 --> 01:00:17,030
on some sort of computer and that

01:00:13,579 --> 01:00:19,970
computer your your software has access

01:00:17,030 --> 01:00:22,130
to and really because that your programs

01:00:19,970 --> 01:00:23,809
running on a computer it allows it to do

01:00:22,130 --> 01:00:26,599
all of the things it needs to do

01:00:23,809 --> 01:00:27,349
it gives it memory to to run with at

01:00:26,599 --> 01:00:29,390
runtime

01:00:27,349 --> 01:00:32,240
it gives it network if it needs to make

01:00:29,390 --> 01:00:33,859
any HTTP or G RPC calls out to the

01:00:32,240 --> 01:00:36,289
broader Internet it's going to give it

01:00:33,859 --> 01:00:38,270
storage if it needs this like cat a file

01:00:36,289 --> 01:00:39,710
to disk or something like that and it's

01:00:38,270 --> 01:00:42,530
gonna give it all of these fundamentals

01:00:39,710 --> 01:00:44,690
that it needs to run so from the context

01:00:42,530 --> 01:00:47,119
of your program you can inspect the file

01:00:44,690 --> 01:00:48,829
system you can write files to the file

01:00:47,119 --> 01:00:50,420
system you can stick things in memory

01:00:48,829 --> 01:00:51,710
you can do all of these things that

01:00:50,420 --> 01:00:56,240
we've been learning about in computer

01:00:51,710 --> 01:00:58,670
science all a container does is it just

01:00:56,240 --> 01:01:01,490
draws an imaginary box around this

01:00:58,670 --> 01:01:05,359
program so in this diagram let's just

01:01:01,490 --> 01:01:08,119
take a very simple concrete example in

01:01:05,359 --> 01:01:10,400
this situation you're let's say that we

01:01:08,119 --> 01:01:13,970
told the container to only allocate 5

01:01:10,400 --> 01:01:16,279
gigabytes of space for that container so

01:01:13,970 --> 01:01:18,349
if you're if your application looked on

01:01:16,279 --> 01:01:20,270
to the underlying file system it would

01:01:18,349 --> 01:01:22,549
see that there is one five gigabyte

01:01:20,270 --> 01:01:26,240
volume and if we were running without a

01:01:22,549 --> 01:01:27,859
container it would actually see the true

01:01:26,240 --> 01:01:30,099
volume size that the rest of the

01:01:27,859 --> 01:01:32,750
computer runs on let's say 20 gigabytes

01:01:30,099 --> 01:01:34,430
so in this example your computer your

01:01:32,750 --> 01:01:36,529
program would be able to run with 20

01:01:34,430 --> 01:01:39,140
gigabytes of storage and in this example

01:01:36,529 --> 01:01:41,510
we've contained that program and only

01:01:39,140 --> 01:01:43,549
told it that it can use this imaginary

01:01:41,510 --> 01:01:45,650
volume that's only 5 gigabytes and

01:01:43,549 --> 01:01:47,900
that's all the program can see and

01:01:45,650 --> 01:01:50,480
because of that we now know that we

01:01:47,900 --> 01:01:53,720
can't actually max out our disks on this

01:01:50,480 --> 01:01:56,390
broader computer here so all containers

01:01:53,720 --> 01:01:59,210
do is it synthesizes a computer around

01:01:56,390 --> 01:02:01,789
your program and it does that in the

01:01:59,210 --> 01:02:05,480
context of glorifying a system process

01:02:01,789 --> 01:02:06,980
so I'll get off kind of deep here for

01:02:05,480 --> 01:02:08,180
folks who are interested but if this is

01:02:06,980 --> 01:02:11,960
above your head it's ok you don't need

01:02:08,180 --> 01:02:13,910
to notice how containers were

01:02:11,960 --> 01:02:16,040
are they're taking advantage of these

01:02:13,910 --> 01:02:18,260
two really important features that came

01:02:16,040 --> 01:02:20,270
into the Linux kernel recently one of

01:02:18,260 --> 01:02:22,940
them is called cgroups in another one is

01:02:20,270 --> 01:02:25,370
called namespace isolation those two

01:02:22,940 --> 01:02:27,350
things allow software engineers to

01:02:25,370 --> 01:02:30,350
cleverly draw imaginary boundaries

01:02:27,350 --> 01:02:32,570
around a process because of those kernel

01:02:30,350 --> 01:02:34,070
features we now have containers if that

01:02:32,570 --> 01:02:36,290
doesn't make sense to you all you need

01:02:34,070 --> 01:02:38,300
to know is it's a process and you can

01:02:36,290 --> 01:02:41,030
tell it how much memory how much

01:02:38,300 --> 01:02:46,970
computer and how much disk space it has

01:02:41,030 --> 01:02:49,670
attached to it also with container

01:02:46,970 --> 01:02:52,100
networking you realize that we have two

01:02:49,670 --> 01:02:53,990
networks that we've now created we have

01:02:52,100 --> 01:02:56,210
the host network which is just the

01:02:53,990 --> 01:02:58,670
regular old computer network and then we

01:02:56,210 --> 01:03:00,860
also have the container network as well

01:02:58,670 --> 01:03:02,810
and there's some sort of bridging that

01:03:00,860 --> 01:03:05,900
can happen between the two of these in

01:03:02,810 --> 01:03:09,080
other words we can map port 8080 on our

01:03:05,900 --> 01:03:12,590
host computer to port 80 on our

01:03:09,080 --> 01:03:14,600
container and if we want to allow

01:03:12,590 --> 01:03:16,670
traffic into and out of our container we

01:03:14,600 --> 01:03:21,320
need to explicitly define those rules as

01:03:16,670 --> 01:03:23,630
well so this is all fine and good and we

01:03:21,320 --> 01:03:27,290
understand that containers are a new way

01:03:23,630 --> 01:03:29,030
of glorifying system processes but we

01:03:27,290 --> 01:03:30,770
needed to talk about this registry thing

01:03:29,030 --> 01:03:33,080
again and then we'll actually go through

01:03:30,770 --> 01:03:34,670
and build a container so a container

01:03:33,080 --> 01:03:37,910
image and I wish I had a diagram for

01:03:34,670 --> 01:03:41,060
this is basically a snapshot of one of

01:03:37,910 --> 01:03:43,730
these system processes and well from a

01:03:41,060 --> 01:03:47,240
container image I can rerun that on any

01:03:43,730 --> 01:03:49,880
computer that can run containers so this

01:03:47,240 --> 01:03:52,670
sort of solves the it works for me but

01:03:49,880 --> 01:03:55,190
not for you problem because I can

01:03:52,670 --> 01:03:58,100
package up and a full operating system

01:03:55,190 --> 01:04:00,200
all of the disk space I need all of the

01:03:58,100 --> 01:04:03,140
networking rules I need and my

01:04:00,200 --> 01:04:05,000
application into one logical entity take

01:04:03,140 --> 01:04:08,300
a snapshot of it and go stick it up into

01:04:05,000 --> 01:04:10,370
a repository called a registry and then

01:04:08,300 --> 01:04:13,070
I can pull that image down and recreate

01:04:10,370 --> 01:04:15,200
it whenever I need to again so we're

01:04:13,070 --> 01:04:17,270
actually going to do that right now

01:04:15,200 --> 01:04:20,990
while we're waiting for kubernetes

01:04:17,270 --> 01:04:24,990
clusters to come up so if you go into

01:04:20,990 --> 01:04:27,600
the repository and you come here

01:04:24,990 --> 01:04:30,900
to this main to container directory

01:04:27,600 --> 01:04:33,180
you'll see that we have all of these

01:04:30,900 --> 01:04:35,490
examples of different ways we can

01:04:33,180 --> 01:04:37,830
actually go and build a container how

01:04:35,490 --> 01:04:42,420
are we doing on time wow this is going

01:04:37,830 --> 01:04:44,070
fast okay who here is gonna be who here

01:04:42,420 --> 01:04:47,250
sees a programming language that they're

01:04:44,070 --> 01:04:48,890
going to use who here wants a

01:04:47,250 --> 01:04:50,630
programming language that's not in there

01:04:48,890 --> 01:04:54,060
what is it

01:04:50,630 --> 01:04:56,130
no js' would you be interested and

01:04:54,060 --> 01:04:58,320
building a node.js container with us as

01:04:56,130 --> 01:04:59,670
we move forward okay

01:04:58,320 --> 01:05:02,790
I'll kind of pick on you a little bit

01:04:59,670 --> 01:05:07,110
any other ones you now know what's this

01:05:02,790 --> 01:05:08,970
yours okay cool do you mind opening up

01:05:07,110 --> 01:05:11,880
APR along the way if you get it up in

01:05:08,970 --> 01:05:14,520
there okay cool so yeah hopefully we'll

01:05:11,880 --> 01:05:16,860
see a no js' pull request and we'll see

01:05:14,520 --> 01:05:20,369
whichever ian has I don't even know what

01:05:16,860 --> 01:05:22,850
language that was any suggestions on

01:05:20,369 --> 01:05:25,170
which one I should use to be helpful

01:05:22,850 --> 01:05:26,580
Python does everybody like Python it

01:05:25,170 --> 01:05:27,600
seems to be like a kind of a lowest

01:05:26,580 --> 01:05:31,980
common denominator

01:05:27,600 --> 01:05:34,080
okay Python it is okay so in our Python

01:05:31,980 --> 01:05:36,270
directory we will see we have three

01:05:34,080 --> 01:05:39,660
files who here has never looked at a

01:05:36,270 --> 01:05:41,310
make file before nobody we're all

01:05:39,660 --> 01:05:42,570
familiar with make so if I pull up and

01:05:41,310 --> 01:05:44,240
make file everybody's gonna understand

01:05:42,570 --> 01:05:46,320
that okay cool

01:05:44,240 --> 01:05:52,440
who here has never looked at a docker

01:05:46,320 --> 01:05:55,500
file before okay we'll start with the

01:05:52,440 --> 01:05:58,740
Python the world's simplest Python

01:05:55,500 --> 01:06:01,830
program so down on lines eight and nine

01:05:58,740 --> 01:06:04,500
we have this really familiar if name is

01:06:01,830 --> 01:06:07,410
equal to main we're going to execute

01:06:04,500 --> 01:06:10,260
this function called run if we look at

01:06:07,410 --> 01:06:12,210
run it just says print rock climbing is

01:06:10,260 --> 01:06:13,530
the best sport in the world and then

01:06:12,210 --> 01:06:16,290
it's going to sleep for a thousand

01:06:13,530 --> 01:06:17,790
seconds and then the program exits and

01:06:16,290 --> 01:06:20,970
then on line one you can see that we

01:06:17,790 --> 01:06:21,900
import the the module time I think I

01:06:20,970 --> 01:06:25,590
said that right I think they're called

01:06:21,900 --> 01:06:27,869
modules in Python so pretty much all of

01:06:25,590 --> 01:06:30,930
the programs in this in all of the

01:06:27,869 --> 01:06:32,820
examples here fit this mold they echo

01:06:30,930 --> 01:06:35,400
out some text and then they sleep and

01:06:32,820 --> 01:06:36,810
then they exit and all we're gonna do is

01:06:35,400 --> 01:06:38,700
we're going to take this Python program

01:06:36,810 --> 01:06:41,070
that you could run directly with

01:06:38,700 --> 01:06:43,440
Python and we're gonna shove it all into

01:06:41,070 --> 01:06:46,920
a container with things like the Python

01:06:43,440 --> 01:06:51,990
executors a small amount of disk space

01:06:46,920 --> 01:06:54,869
attached to it and the program itself so

01:06:51,990 --> 01:06:56,970
how we do that is we have these

01:06:54,869 --> 01:06:59,730
primitives in the make file that are

01:06:56,970 --> 01:07:01,770
then going to read the docker file using

01:06:59,730 --> 01:07:05,130
a command-line tool called docker to

01:07:01,770 --> 01:07:07,770
actually create our container for us and

01:07:05,130 --> 01:07:10,020
so to examine the docker file and kind

01:07:07,770 --> 01:07:12,570
of explain what this is this is also a

01:07:10,020 --> 01:07:14,460
very simple example and if you go and

01:07:12,570 --> 01:07:16,530
you see docker files in the wild you'll

01:07:14,460 --> 01:07:19,079
you'll see that they get very long and

01:07:16,530 --> 01:07:21,900
they can be very confusing I think this

01:07:19,079 --> 01:07:23,700
is a really great way to start this is a

01:07:21,900 --> 01:07:25,079
very simple example and it gives you

01:07:23,700 --> 01:07:28,650
everything you need to get off to the

01:07:25,079 --> 01:07:33,210
races so on line one we see this from

01:07:28,650 --> 01:07:35,490
keyword and then we say Python latest so

01:07:33,210 --> 01:07:38,820
what's happening there is

01:07:35,490 --> 01:07:40,560
we're telling docker in this file that

01:07:38,820 --> 01:07:42,750
we would like to create a new container

01:07:40,560 --> 01:07:45,150
and we want to create that container

01:07:42,750 --> 01:07:48,030
based on a previous existing image and

01:07:45,150 --> 01:07:50,490
what image we've chosen is this one

01:07:48,030 --> 01:07:53,420
called Python so if you go to Google and

01:07:50,490 --> 01:07:57,660
you just type Python docker container

01:07:53,420 --> 01:08:00,750
you'll actually see that hub docker comm

01:07:57,660 --> 01:08:03,150
has this thing called library and there

01:08:00,750 --> 01:08:05,700
is an official docker hub Python

01:08:03,150 --> 01:08:07,380
container now this has a set of

01:08:05,700 --> 01:08:09,420
maintainer x' that actually maintain

01:08:07,380 --> 01:08:12,660
these containers and they'll actually go

01:08:09,420 --> 01:08:14,940
and build it for you the sort of promise

01:08:12,660 --> 01:08:18,270
here is that this container already

01:08:14,940 --> 01:08:21,450
ships with Python installed so think of

01:08:18,270 --> 01:08:23,100
this as like a basic Ubuntu server that

01:08:21,450 --> 01:08:25,799
just has Python and you can execute

01:08:23,100 --> 01:08:29,609
Python commands on it that's really what

01:08:25,799 --> 01:08:31,380
this image starts out as and you'll see

01:08:29,609 --> 01:08:33,390
that there are images for Java there's

01:08:31,380 --> 01:08:35,640
images for Ruby there's images for

01:08:33,390 --> 01:08:37,680
golang we haven't have images for

01:08:35,640 --> 01:08:40,049
certain programs like engine X or

01:08:37,680 --> 01:08:44,370
MongoDB and all you have to do to run

01:08:40,049 --> 01:08:47,489
these is just pull the docker image so

01:08:44,370 --> 01:08:49,890
we could have created our own registry

01:08:47,489 --> 01:08:51,920
here and we could have explicitly typed

01:08:49,890 --> 01:08:54,949
out an

01:08:51,920 --> 01:08:56,839
HTTP URL here but instead we just did

01:08:54,949 --> 01:08:58,730
this shorthand and docker is smart

01:08:56,839 --> 01:09:00,890
enough to say oh if you just type the

01:08:58,730 --> 01:09:02,810
word Python I'm just gonna look at the

01:09:00,890 --> 01:09:05,540
docker hub official registry and just

01:09:02,810 --> 01:09:07,339
pull the Python container as well but

01:09:05,540 --> 01:09:09,140
there is some syntax here for actually

01:09:07,339 --> 01:09:12,109
building your own containers and running

01:09:09,140 --> 01:09:15,109
them later so the next thing we do is we

01:09:12,109 --> 01:09:17,630
do this add a keyword and what this line

01:09:15,109 --> 01:09:20,719
says is it says add the directory that

01:09:17,630 --> 01:09:23,509
this is in and mount that in the

01:09:20,719 --> 01:09:25,310
container into slash app so we'll

01:09:23,509 --> 01:09:26,900
actually build this container and look

01:09:25,310 --> 01:09:29,750
inside of it and actually see that there

01:09:26,900 --> 01:09:32,960
is a directory in root called app and

01:09:29,750 --> 01:09:35,210
then it also says work der in slash app

01:09:32,960 --> 01:09:37,819
that basically says whenever you access

01:09:35,210 --> 01:09:41,929
the container it's going to start you in

01:09:37,819 --> 01:09:44,449
the slash app directory and last but not

01:09:41,929 --> 01:09:47,989
least we define this list of strings

01:09:44,449 --> 01:09:49,759
called command and this is verbatim what

01:09:47,989 --> 01:09:51,980
you would actually type inside the

01:09:49,759 --> 01:09:54,380
container to actually execute our

01:09:51,980 --> 01:09:56,570
program so here we just simply say

01:09:54,380 --> 01:09:59,390
Python that we know is already installed

01:09:56,570 --> 01:10:03,010
and we say main dot pi which of course

01:09:59,390 --> 01:10:06,230
is this main dot PI file we looked at

01:10:03,010 --> 01:10:08,210
and the make file here just takes all of

01:10:06,230 --> 01:10:10,010
these docker commands that I'm about to

01:10:08,210 --> 01:10:18,080
go through and just bundles them up and

01:10:10,010 --> 01:10:21,949
simplifies it for us ok it looks like we

01:10:18,080 --> 01:10:24,050
had an error with mini cube let's try o

01:10:21,949 --> 01:10:29,360
mini let's just try this again really

01:10:24,050 --> 01:10:31,370
quick looks like all of my things timed

01:10:29,360 --> 01:10:32,900
out okay well we can we can get cute

01:10:31,370 --> 01:10:36,350
configs in a moment I think I just had a

01:10:32,900 --> 01:10:38,630
hiccup in my internet or something so I

01:10:36,350 --> 01:10:40,160
have the repository checked out here in

01:10:38,630 --> 01:10:42,320
my king

01:10:40,160 --> 01:10:45,530
my go path on my computer just because I

01:10:42,320 --> 01:10:48,860
write a lot of go hefty o slash

01:10:45,530 --> 01:10:51,890
kubernetes workshop and then we want to

01:10:48,860 --> 01:10:53,860
go into the main - container directory

01:10:51,890 --> 01:10:57,949
and then we want to go into Python here

01:10:53,860 --> 01:11:00,830
okay so here's our docker file our make

01:10:57,949 --> 01:11:03,360
file in our main PI so I can run this

01:11:00,830 --> 01:11:05,910
file locally and just run Python

01:11:03,360 --> 01:11:07,170
hi and you can see that rock climbing is

01:11:05,910 --> 01:11:10,560
the best sport in the world and then I

01:11:07,170 --> 01:11:11,850
sent a sega term to her ctrl C to exit

01:11:10,560 --> 01:11:14,400
the program because it was gonna sleep

01:11:11,850 --> 01:11:16,440
for a thousand seconds um in order for

01:11:14,400 --> 01:11:18,990
us to build a container we can actually

01:11:16,440 --> 01:11:21,810
cheat and look at the make file and see

01:11:18,990 --> 01:11:24,510
what the make file is doing so if I was

01:11:21,810 --> 01:11:27,510
to type make container you would see

01:11:24,510 --> 01:11:30,270
that it says docker build minus T and

01:11:27,510 --> 01:11:32,850
then it just populates the next command

01:11:30,270 --> 01:11:34,880
with some variables that are defined up

01:11:32,850 --> 01:11:38,130
here at the top

01:11:34,880 --> 01:11:41,730
so in docker hub I I have a user named

01:11:38,130 --> 01:11:47,910
Chris Nova so if I go to docker hub hub

01:11:41,730 --> 01:11:53,280
docker calm slash Chris Nova when you

01:11:47,910 --> 01:11:56,580
sign in there we go you can see all of

01:11:53,280 --> 01:11:58,500
my containers that I've built are here

01:11:56,580 --> 01:12:00,420
and you can go to this URL on your end

01:11:58,500 --> 01:12:01,890
and actually access my containers so if

01:12:00,420 --> 01:12:03,390
you want to go and create a docker hub

01:12:01,890 --> 01:12:05,760
user account and use this as your

01:12:03,390 --> 01:12:07,110
registry you're welcome to and I have a

01:12:05,760 --> 01:12:08,750
slide in a moment I'll pull up that

01:12:07,110 --> 01:12:11,670
highlights a few other registries

01:12:08,750 --> 01:12:12,990
choices for you and your team but anyway

01:12:11,670 --> 01:12:16,260
I just wanted you to know this is where

01:12:12,990 --> 01:12:17,970
I'll be pushing mine today so in order

01:12:16,260 --> 01:12:19,500
for us to build our container I'm just

01:12:17,970 --> 01:12:21,680
going to actually type this out

01:12:19,500 --> 01:12:25,380
explicitly so you can see the command

01:12:21,680 --> 01:12:27,390
docker build - T the name of our

01:12:25,380 --> 01:12:29,010
registry which is Chris Nova then a

01:12:27,390 --> 01:12:33,540
slash and we want to call this

01:12:29,010 --> 01:12:34,860
kubernetes workshop app which this can

01:12:33,540 --> 01:12:36,570
be any name you want you can call this

01:12:34,860 --> 01:12:40,440
whatever you want and then we're gonna

01:12:36,570 --> 01:12:41,610
tell it to build the tag latest and then

01:12:40,440 --> 01:12:43,680
we want to build that in our local

01:12:41,610 --> 01:12:47,940
directory so I just add a period to the

01:12:43,680 --> 01:12:49,380
end there and if I run this because I

01:12:47,940 --> 01:12:53,220
have docker and the docker daemon

01:12:49,380 --> 01:12:54,900
installed up here you can see that it's

01:12:53,220 --> 01:12:57,090
going and it's doing some magic for us

01:12:54,900 --> 01:13:01,650
behind the scenes okay

01:12:57,090 --> 01:13:04,050
so what just happened so docker said it

01:13:01,650 --> 01:13:05,580
read that docker file and it put all

01:13:04,050 --> 01:13:07,890
this stuff together for us and because I

01:13:05,580 --> 01:13:09,690
had a docker file that made sense I was

01:13:07,890 --> 01:13:11,490
able to actually go and build this

01:13:09,690 --> 01:13:13,110
container and if we go and we look at

01:13:11,490 --> 01:13:17,219
the logs we can actually see what it was

01:13:13,110 --> 01:13:20,249
doing so it says step one of four

01:13:17,219 --> 01:13:22,650
from Python latest so it read that first

01:13:20,249 --> 01:13:24,059
line first it runs procedurally just

01:13:22,650 --> 01:13:26,729
like an interpreted scripting language

01:13:24,059 --> 01:13:29,940
and it says pulling from library Python

01:13:26,729 --> 01:13:32,039
and then it noticed that most of the the

01:13:29,940 --> 01:13:33,090
container was there the way containers

01:13:32,039 --> 01:13:35,190
work is they're all built on file

01:13:33,090 --> 01:13:37,590
systems and some of those file systems

01:13:35,190 --> 01:13:39,090
don't ever change so this to me looks

01:13:37,590 --> 01:13:41,670
like there was just a small update in

01:13:39,090 --> 01:13:43,739
the Python container and this is the the

01:13:41,670 --> 01:13:46,440
bit that changed and this is the bit

01:13:43,739 --> 01:13:49,199
that remained it the same so it pulled

01:13:46,440 --> 01:13:51,239
the new changes in and it said here's a

01:13:49,199 --> 01:13:53,699
unique sha for the version of that

01:13:51,239 --> 01:13:56,159
container that I'm running and it says

01:13:53,699 --> 01:13:57,749
ok I've downloaded this new Python image

01:13:56,159 --> 01:13:59,789
and we're up to date with whatever the

01:13:57,749 --> 01:14:01,530
community has blessed as the official

01:13:59,789 --> 01:14:03,539
Python image I'm sure there was some

01:14:01,530 --> 01:14:05,760
patch or some security vulnerability

01:14:03,539 --> 01:14:06,780
that they had to fix and if I wanted to

01:14:05,760 --> 01:14:09,599
go and look at the history there I

01:14:06,780 --> 01:14:11,940
certainly could the reason that it

01:14:09,599 --> 01:14:16,679
pulled this updated changed just now is

01:14:11,940 --> 01:14:18,659
because I said from Python latest if I

01:14:16,679 --> 01:14:22,159
didn't do latest I could do a specific

01:14:18,659 --> 01:14:25,440
number or specific release of the Python

01:14:22,159 --> 01:14:29,010
container which are all mapped out at

01:14:25,440 --> 01:14:32,280
hub doctor comm slash Python so I could

01:14:29,010 --> 01:14:34,679
have done 3.7.0 stretch which would be

01:14:32,280 --> 01:14:37,260
Python version 3.7 and I could have

01:14:34,679 --> 01:14:38,670
defined any of these for the tag if you

01:14:37,260 --> 01:14:40,849
just do latest you're always just gonna

01:14:38,670 --> 01:14:43,380
get whatever is the most recent version

01:14:40,849 --> 01:14:46,050
so there's pros and cons to doing latest

01:14:43,380 --> 01:14:47,610
such as you can blindly download patches

01:14:46,050 --> 01:14:51,780
like we just did and not know what's in

01:14:47,610 --> 01:14:55,260
them ok so back in our terminal we then

01:14:51,780 --> 01:14:57,960
add the local directory to slash app we

01:14:55,260 --> 01:14:59,159
set our work dur to slash app and it

01:14:57,960 --> 01:15:02,219
told it by default

01:14:59,159 --> 01:15:05,099
run Python main dot PI so let's go ahead

01:15:02,219 --> 01:15:08,550
and let's run this container so I can do

01:15:05,099 --> 01:15:12,199
a docker run the name of our container

01:15:08,550 --> 01:15:12,199
which I'll just copy right here

01:15:18,020 --> 01:15:24,810
why is it not echoing out rock climbing

01:15:20,460 --> 01:15:28,080
is the best sport in the world okay

01:15:24,810 --> 01:15:30,150
there did okay so the way that it worked

01:15:28,080 --> 01:15:31,770
was until the program exited it wasn't

01:15:30,150 --> 01:15:34,740
actually going to relay the standard out

01:15:31,770 --> 01:15:36,960
back to the screen but because I sent a

01:15:34,740 --> 01:15:38,550
sig term because I didn't want to wait

01:15:36,960 --> 01:15:41,520
for the sleep for a thousand seconds

01:15:38,550 --> 01:15:43,140
I killed the program and then it echoed

01:15:41,520 --> 01:15:45,480
it out and then it terminated the

01:15:43,140 --> 01:15:48,090
program so that was the behavior that we

01:15:45,480 --> 01:15:50,760
just saw there um so that was a docker

01:15:48,090 --> 01:15:51,990
run and it was running our Python app so

01:15:50,760 --> 01:15:53,250
let's actually go and inspect this

01:15:51,990 --> 01:15:56,760
container and see what's going on inside

01:15:53,250 --> 01:15:59,460
this container so in order to do that I

01:15:56,760 --> 01:16:02,520
can do a docker run but I'm gonna add

01:15:59,460 --> 01:16:06,120
the IT argument here which stands for

01:16:02,520 --> 01:16:08,880
interactive TTY I'm gonna paste the name

01:16:06,120 --> 01:16:12,270
of our container again which is chris

01:16:08,880 --> 01:16:13,950
nova kubernetes workshop app and then at

01:16:12,270 --> 01:16:15,540
the end there's this optional argument

01:16:13,950 --> 01:16:20,190
where i'm just going to type it bash and

01:16:15,540 --> 01:16:23,700
what that bash does is it overrides this

01:16:20,190 --> 01:16:26,610
line here so instead of running Python

01:16:23,700 --> 01:16:28,320
main PI in a container I'm actually just

01:16:26,610 --> 01:16:29,430
going to start a bash shell so that I

01:16:28,320 --> 01:16:32,310
can actually go and explore the

01:16:29,430 --> 01:16:34,950
container and see what it looks like so

01:16:32,310 --> 01:16:37,710
if I run that you can see I've actually

01:16:34,950 --> 01:16:42,000
started a new TTY oh I'm like off the

01:16:37,710 --> 01:16:43,230
screen sorry I didn't realize what I see

01:16:42,000 --> 01:16:46,170
here and here is different than what's

01:16:43,230 --> 01:16:47,970
up there so that's okay that's a little

01:16:46,170 --> 01:16:50,790
bit better you can see here I've

01:16:47,970 --> 01:16:52,830
actually started this new route at the

01:16:50,790 --> 01:16:54,630
name of the container and you can see

01:16:52,830 --> 01:16:58,680
that I've started in the slash app

01:16:54,630 --> 01:17:01,200
directory and if I do an LS here you can

01:16:58,680 --> 01:17:04,950
see that I now have the docker file then

01:17:01,200 --> 01:17:06,930
make file in the main dot PI file just

01:17:04,950 --> 01:17:09,870
from this line here where we added the

01:17:06,930 --> 01:17:14,130
local print working directory to slash

01:17:09,870 --> 01:17:21,350
app and if I actually do the Python run

01:17:14,130 --> 01:17:24,410
main dot PI just type that wrong oh

01:17:21,350 --> 01:17:26,640
python run oh my gosh thank you

01:17:24,410 --> 01:17:28,530
Python yeah there we go rock climbing is

01:17:26,640 --> 01:17:30,870
the best sport in the world and we can

01:17:28,530 --> 01:17:33,780
what's interesting though is I still

01:17:30,870 --> 01:17:35,400
have all of the Linux primitives that I

01:17:33,780 --> 01:17:38,250
would have otherwise right so I can

01:17:35,400 --> 01:17:39,960
actually go and actually see what this

01:17:38,250 --> 01:17:41,910
container looks like and you'll actually

01:17:39,960 --> 01:17:44,700
see that this container is actually

01:17:41,910 --> 01:17:45,690
different than my hosts file system so

01:17:44,700 --> 01:17:47,370
that's one of the benefits of a

01:17:45,690 --> 01:17:49,620
container is I'm able to bundle up

01:17:47,370 --> 01:17:51,510
basically a working magic little space

01:17:49,620 --> 01:17:54,300
for you and your application and we'll

01:17:51,510 --> 01:17:55,890
run that in a moment as well and this is

01:17:54,300 --> 01:17:57,480
the whole value add for kubernetes and

01:17:55,890 --> 01:17:59,400
all kubernetes does is it makes what I'm

01:17:57,480 --> 01:18:00,780
doing right now easy and we're gonna get

01:17:59,400 --> 01:18:03,780
to get the kubernetes stuff in a moment

01:18:00,780 --> 01:18:06,410
I promise okay so that's our Python

01:18:03,780 --> 01:18:08,970
application any questions so far on

01:18:06,410 --> 01:18:11,550
building the container or accessing the

01:18:08,970 --> 01:18:14,780
container or why containers are even a

01:18:11,550 --> 01:18:17,780
thing right now any questions at all

01:18:14,780 --> 01:18:17,780
yes

01:18:21,190 --> 01:18:25,330
yep the question was which line in the

01:18:23,920 --> 01:18:29,200
code copied these files

01:18:25,330 --> 01:18:31,090
so that's line three right here ad this

01:18:29,200 --> 01:18:32,920
period is just shorthand for the the

01:18:31,090 --> 01:18:42,610
directory that we're in and we're gonna

01:18:32,920 --> 01:18:45,010
add that to slash app yes question the

01:18:42,610 --> 01:18:47,590
difference between ad and copy is we're

01:18:45,010 --> 01:18:49,380
effectively creating a reference in one

01:18:47,590 --> 01:18:52,060
and we're creating a copy in the other

01:18:49,380 --> 01:18:54,580
copy copies it and add adds the

01:18:52,060 --> 01:18:58,960
reference so with AD I would be able to

01:18:54,580 --> 01:19:01,750
make changes within the I almost always

01:18:58,960 --> 01:19:03,340
do ad although if I really want to make

01:19:01,750 --> 01:19:06,370
sure I have an immutable copy I'll do

01:19:03,340 --> 01:19:07,690
copy if you if you aren't sure which one

01:19:06,370 --> 01:19:10,000
to use start with ad until you have a

01:19:07,690 --> 01:19:14,310
reason not to you that's what I like to

01:19:10,000 --> 01:19:14,310
tell folks question

01:19:20,199 --> 01:19:26,860
yep so the question was the variables in

01:19:23,440 --> 01:19:29,679
my make file so I I have my make file

01:19:26,860 --> 01:19:33,520
here the top registry is your docker hub

01:19:29,679 --> 01:19:35,560
username which is also the name of your

01:19:33,520 --> 01:19:38,080
doctor hub right like you instead of

01:19:35,560 --> 01:19:40,870
saying Chris Nova by itself I could

01:19:38,080 --> 01:19:44,260
actually do HTTP colon backslash

01:19:40,870 --> 01:19:47,410
backslash Google has one called GCR and

01:19:44,260 --> 01:19:49,810
that's G cRIO Amazon has one called ECR

01:19:47,410 --> 01:19:51,310
quai from our friends at Korres have one

01:19:49,810 --> 01:19:53,710
and you could actually put that in there

01:19:51,310 --> 01:19:55,810
but because we're using docker hub I

01:19:53,710 --> 01:19:57,310
don't have to put that HTTP nonsense so

01:19:55,810 --> 01:19:59,980
I just put my username which is Chris

01:19:57,310 --> 01:20:01,420
Nova and then for image this can be

01:19:59,980 --> 01:20:03,790
whatever you want to call your image and

01:20:01,420 --> 01:20:06,790
then the tag of course is whatever you

01:20:03,790 --> 01:20:08,260
want to tag it as I'm doing latest just

01:20:06,790 --> 01:20:11,130
to demonstrate how we can sort of do the

01:20:08,260 --> 01:20:15,699
CI CD thing with kubernetes moving Freud

01:20:11,130 --> 01:20:17,469
so anyway if we look at push here all it

01:20:15,699 --> 01:20:19,330
does is it's a docker push and then

01:20:17,469 --> 01:20:22,330
remember this just equates to the name

01:20:19,330 --> 01:20:24,550
of our image the sort of full name of

01:20:22,330 --> 01:20:27,130
our image so I'm gonna just actually

01:20:24,550 --> 01:20:30,550
type that out here and do docker push do

01:20:27,130 --> 01:20:33,540
I still have nope I don't have it let's

01:20:30,550 --> 01:20:37,330
see if we can't find the name of our

01:20:33,540 --> 01:20:37,900
image here so docker pushed the name of

01:20:37,330 --> 01:20:39,760
our image

01:20:37,900 --> 01:20:41,679
I've already done a docker login and

01:20:39,760 --> 01:20:44,170
authenticated with docker hub and so now

01:20:41,679 --> 01:20:47,469
it's just pushing my image up to docker

01:20:44,170 --> 01:20:49,330
hub okay so I got a unique sha for that

01:20:47,469 --> 01:20:52,780
that is specific to this one-time

01:20:49,330 --> 01:20:56,260
artifact and if I actually go to the

01:20:52,780 --> 01:20:59,650
Chris Nova docker hub here we can look

01:20:56,260 --> 01:21:07,350
for kubernetes workshop app and you can

01:20:59,650 --> 01:21:11,160
see under tags did I push that correctly

01:21:07,350 --> 01:21:11,160
kubernetes workshop AB

01:21:12,070 --> 01:21:16,230
ah thank you

01:21:20,320 --> 01:21:24,550
that should do it I I forgot to add the

01:21:22,420 --> 01:21:27,579
tag to the end of my daugher push okay

01:21:24,550 --> 01:21:31,060
so now if i refresh this what it should

01:21:27,579 --> 01:21:32,469
still say updated I don't know there

01:21:31,060 --> 01:21:33,489
might be something going on with I don't

01:21:32,469 --> 01:21:37,409
know why it's not showing that it

01:21:33,489 --> 01:21:37,409
updated right now that's really weird

01:21:37,679 --> 01:21:40,810
okay

01:21:38,860 --> 01:21:43,869
so anyway I'm moving forward so we've

01:21:40,810 --> 01:21:48,159
now pushed our container up to Chris

01:21:43,869 --> 01:21:51,250
Nova kubernetes Workshop app latest and

01:21:48,159 --> 01:21:54,760
so if you on your system wanted to do a

01:21:51,250 --> 01:21:55,570
type of this command docker run and if

01:21:54,760 --> 01:21:58,719
somebody could do that this would

01:21:55,570 --> 01:22:01,090
actually be helpful docker run the name

01:21:58,719 --> 01:22:02,409
of our the image I just pushed latest

01:22:01,090 --> 01:22:04,449
you should actually be able to run the

01:22:02,409 --> 01:22:06,460
Python program I just built on my

01:22:04,449 --> 01:22:08,230
computer on your computer

01:22:06,460 --> 01:22:11,230
can anybody type this out and run this

01:22:08,230 --> 01:22:13,420
for me really quick anybody any

01:22:11,230 --> 01:22:16,360
volunteers okay we have one up here

01:22:13,420 --> 01:22:18,159
right here all I'm looking for is yes

01:22:16,360 --> 01:22:20,739
the rock climbing is the best sport in

01:22:18,159 --> 01:22:22,329
the world text echoed out just a sanity

01:22:20,739 --> 01:22:25,050
check that the docker registry is

01:22:22,329 --> 01:22:25,050
actually working

01:22:32,290 --> 01:22:43,130
sorry who's talking I can't see oh okay

01:22:41,540 --> 01:22:45,470
so you have to control seer it's still

01:22:43,130 --> 01:22:47,150
gonna wait so what you're saying yeah I

01:22:45,470 --> 01:22:48,590
mean that's the behavior we're hoping to

01:22:47,150 --> 01:22:50,660
see I'm just wanting to see if somebody

01:22:48,590 --> 01:22:52,780
else can replicate it has anybody been

01:22:50,660 --> 01:22:59,810
able to run the doc around command

01:22:52,780 --> 01:23:01,460
okay so Poli conference Wi-Fi so after

01:22:59,810 --> 01:23:03,440
we can guarantee that we can actually

01:23:01,460 --> 01:23:05,750
pull this container down and run it on a

01:23:03,440 --> 01:23:07,730
different system we've now demonstrated

01:23:05,750 --> 01:23:10,010
that we're able to do what the the bare

01:23:07,730 --> 01:23:12,440
minimum requirements for kubernetes

01:23:10,010 --> 01:23:19,940
needs to actually run this container in

01:23:12,440 --> 01:23:22,850
kubernetes okay I'm gonna jump back into

01:23:19,940 --> 01:23:24,680
some slides really quick and and then

01:23:22,850 --> 01:23:26,000
we'll take a break and then after that

01:23:24,680 --> 01:23:28,670
break we're actually gonna run this in

01:23:26,000 --> 01:23:30,380
kubernetes Phil you got it you doctor

01:23:28,670 --> 01:23:31,400
you did a docker run and you got rock

01:23:30,380 --> 01:23:34,310
climbing is the best sport in the world

01:23:31,400 --> 01:23:36,050
thank you thank you so I don't know

01:23:34,310 --> 01:23:38,600
that's weird I've never seen those tags

01:23:36,050 --> 01:23:40,880
oh now of course it works now it says

01:23:38,600 --> 01:23:43,520
updated two minutes ago very weird must

01:23:40,880 --> 01:23:47,300
be a caching issue on my end okay thanks

01:23:43,520 --> 01:23:50,870
for for helping me there Phil okay so

01:23:47,300 --> 01:23:56,180
that's building a docker container image

01:23:50,870 --> 01:23:58,850
let's look at these slides okay

01:23:56,180 --> 01:24:01,160
so to review we should now have a

01:23:58,850 --> 01:24:04,010
kubernetes cluster up and running and we

01:24:01,160 --> 01:24:05,570
should be able to build a simple hello

01:24:04,010 --> 01:24:07,750
world application in a programming

01:24:05,570 --> 01:24:11,630
language of your choice

01:24:07,750 --> 01:24:14,210
and push that up to a registry so that's

01:24:11,630 --> 01:24:16,280
where we should be right now we're gonna

01:24:14,210 --> 01:24:19,550
skip that break and let's actually talk

01:24:16,280 --> 01:24:20,810
about actually I know let's let's do

01:24:19,550 --> 01:24:22,550
that let's take a break because when we

01:24:20,810 --> 01:24:24,710
get back we're gonna jump into

01:24:22,550 --> 01:24:27,800
kubernetes pretty hard so another ten

01:24:24,710 --> 01:24:29,950
minute break and then we'll we'll start

01:24:27,800 --> 01:24:37,180
the actually running in kubernetes bed

01:24:29,950 --> 01:24:39,920
cool absolutely so the question was

01:24:37,180 --> 01:24:42,770
basically what is the resource of

01:24:39,920 --> 01:24:46,580
kubernetes where can I stay up to

01:24:42,770 --> 01:24:47,060
speed honestly that's a really good

01:24:46,580 --> 01:24:49,550
question

01:24:47,060 --> 01:24:51,470
so okay all the answer how I do it and

01:24:49,550 --> 01:24:53,450
then I'll answer how that's probably not

01:24:51,470 --> 01:24:54,800
going to work for anyone else but me and

01:24:53,450 --> 01:24:57,140
then I'll give you a few ideas that I

01:24:54,800 --> 01:24:59,210
have off the top of my head so I don't

01:24:57,140 --> 01:25:02,630
really have the problem of needing to

01:24:59,210 --> 01:25:04,250
stay up to speed with kubernetes as one

01:25:02,630 --> 01:25:06,110
of my other fellow maintainer z-- here

01:25:04,250 --> 01:25:09,080
Phil can tell you we are constantly

01:25:06,110 --> 01:25:12,110
bombarded with updates from the mailing

01:25:09,080 --> 01:25:13,580
list that comes in from kubernetes so

01:25:12,110 --> 01:25:14,810
it's almost at the point where I I hear

01:25:13,580 --> 01:25:17,810
too much about it from the official

01:25:14,810 --> 01:25:20,180
kubernetes mailing list probably but as

01:25:17,810 --> 01:25:23,030
a consumer you're probably interested in

01:25:20,180 --> 01:25:25,400
like what's the latest release what is

01:25:23,030 --> 01:25:27,320
in that release why do I care about it

01:25:25,400 --> 01:25:29,870
and maybe some like opinionated like

01:25:27,320 --> 01:25:32,750
fluff on top that says if we like it or

01:25:29,870 --> 01:25:34,370
if we don't like it right so my company

01:25:32,750 --> 01:25:37,280
hepped EO is trying to get better at

01:25:34,370 --> 01:25:38,690
like offering a release sort of overview

01:25:37,280 --> 01:25:40,310
that where we talk about it every

01:25:38,690 --> 01:25:42,110
release cycle

01:25:40,310 --> 01:25:44,780
I guess just in general it's important

01:25:42,110 --> 01:25:46,880
to note kubernetes releases extremely

01:25:44,780 --> 01:25:49,550
fast right now we're on about every

01:25:46,880 --> 01:25:51,050
three months we cut a new release for an

01:25:49,550 --> 01:25:54,320
open source project that's that's pretty

01:25:51,050 --> 01:25:56,420
fast and because of that speed that's

01:25:54,320 --> 01:25:59,810
where the upgrade problem comes in so

01:25:56,420 --> 01:26:07,190
there is the kubernetes documentation

01:25:59,810 --> 01:26:09,200
which is kubernetes dot io here and this

01:26:07,190 --> 01:26:12,110
is a good resource for how to run

01:26:09,200 --> 01:26:13,520
kubernetes and stays up to date if you

01:26:12,110 --> 01:26:16,310
actually go to the github repo

01:26:13,520 --> 01:26:20,420
github.com slash kubernetes slash

01:26:16,310 --> 01:26:22,640
kubernetes uh you can click on releases

01:26:20,420 --> 01:26:25,970
and this is where you can actually get

01:26:22,640 --> 01:26:29,600
the authentic like ironclad kubernetes

01:26:25,970 --> 01:26:32,470
release with a release the release notes

01:26:29,600 --> 01:26:34,790
here in these change logs for instance

01:26:32,470 --> 01:26:36,230
and you'll notice that you'll see a lot

01:26:34,790 --> 01:26:38,720
of different versions like we just cut

01:26:36,230 --> 01:26:41,120
one point ten point nine and we're also

01:26:38,720 --> 01:26:45,500
in one thirteen alpha what I can't

01:26:41,120 --> 01:26:46,970
believe already on 113 113 is the newest

01:26:45,500 --> 01:26:48,410
release that's about to come out and

01:26:46,970 --> 01:26:50,690
then we just did one that we just

01:26:48,410 --> 01:26:53,090
dropped 1.12 as they would say in the

01:26:50,690 --> 01:26:54,680
community and you can come in and

01:26:53,090 --> 01:26:56,270
actually click on the change log here

01:26:54,680 --> 01:26:59,570
and these are the chain

01:26:56,270 --> 01:27:01,790
log is all built from down here other

01:26:59,570 --> 01:27:03,890
notable changes this is all built from

01:27:01,790 --> 01:27:07,070
various commits to the actual code

01:27:03,890 --> 01:27:08,810
itself so this is a good resource if you

01:27:07,070 --> 01:27:11,260
wanted to go to the kubernetes from yupo

01:27:08,810 --> 01:27:14,870
also if you're getting into kubernetes

01:27:11,260 --> 01:27:17,870
just so that you don't feel unwelcome a

01:27:14,870 --> 01:27:22,970
lot of folks refer to this repository as

01:27:17,870 --> 01:27:26,330
k / k or k k it just means kubernetes /

01:27:22,970 --> 01:27:28,610
kubernetes and then this repo is sort of

01:27:26,330 --> 01:27:30,230
like where it all started this is like

01:27:28,610 --> 01:27:32,930
the beginning of kubernetes here and

01:27:30,230 --> 01:27:37,130
this is a great example of how you

01:27:32,930 --> 01:27:38,480
should never structure a repository I'm

01:27:37,130 --> 01:27:40,010
really opinionated because I used to

01:27:38,480 --> 01:27:42,410
work out of this thing a lot but there

01:27:40,010 --> 01:27:44,630
if you come here to command you'll see

01:27:42,410 --> 01:27:47,120
these are all independent executables

01:27:44,630 --> 01:27:51,470
that all are built out of this same

01:27:47,120 --> 01:27:53,870
repository all of which use some version

01:27:51,470 --> 01:27:56,570
of other packages that are also found in

01:27:53,870 --> 01:27:58,250
this repository as well so keeping up

01:27:56,570 --> 01:28:01,220
with it it's quite annoying because

01:27:58,250 --> 01:28:03,440
there's pull requests that come in for

01:28:01,220 --> 01:28:05,330
the cube admin that have nothing to do

01:28:03,440 --> 01:28:07,460
with any of these other projects and if

01:28:05,330 --> 01:28:08,870
you actually go into the oh my god we're

01:28:07,460 --> 01:28:10,550
less than a thousand so we are actually

01:28:08,870 --> 01:28:12,580
doing really good right now

01:28:10,550 --> 01:28:14,660
if you come into the pull request here

01:28:12,580 --> 01:28:15,920
you can actually see all the different

01:28:14,660 --> 01:28:19,010
PRS that are coming into kubernetes

01:28:15,920 --> 01:28:21,650
kubernetes and we're in the process of

01:28:19,010 --> 01:28:25,810
pulling the repo apart as well so you'll

01:28:21,650 --> 01:28:29,060
now see we have kubernetes SIG's

01:28:25,810 --> 01:28:31,850
organization here and then here in the

01:28:29,060 --> 01:28:33,980
kubernetes SIG's we have all of these

01:28:31,850 --> 01:28:36,530
projects that are official kubernetes

01:28:33,980 --> 01:28:39,110
projects that are just maintained by

01:28:36,530 --> 01:28:41,960
kubernetes versions of subsystems that

01:28:39,110 --> 01:28:43,640
we call SIG's and a cig is just focuses

01:28:41,960 --> 01:28:45,410
on one specific thing there's sig

01:28:43,640 --> 01:28:48,170
networking that focuses on networking

01:28:45,410 --> 01:28:49,940
and there's sig AWS that focuses on

01:28:48,170 --> 01:28:53,120
kubernetes on amazon and then each of

01:28:49,940 --> 01:28:54,650
those groups of people can have projects

01:28:53,120 --> 01:28:59,900
here as well so that's kind of how the

01:28:54,650 --> 01:29:02,410
kubernetes ecosystem is set up yep any

01:28:59,900 --> 01:29:02,410
other questions

01:29:04,849 --> 01:29:12,239
awesome okay let's get started with some

01:29:09,269 --> 01:29:16,380
slides and we have about an hour left so

01:29:12,239 --> 01:29:18,150
we're gonna go pretty quick here so as

01:29:16,380 --> 01:29:21,539
we look at actually deploying to

01:29:18,150 --> 01:29:23,159
kubernetes there's yet a night old you

01:29:21,539 --> 01:29:26,369
you would see this pattern there's yet

01:29:23,159 --> 01:29:29,849
another set of tools you can choose from

01:29:26,369 --> 01:29:32,789
to deploy a container that we just

01:29:29,849 --> 01:29:34,679
created to kubernetes the main ones that

01:29:32,789 --> 01:29:36,960
you'll see if you start googling around

01:29:34,679 --> 01:29:40,800
for deploying my app to kubernetes or

01:29:36,960 --> 01:29:44,969
looking at tutorials or helm case on it

01:29:40,800 --> 01:29:46,590
and quebec dole helm is a is a tool

01:29:44,969 --> 01:29:47,670
that's basically well actually we're

01:29:46,590 --> 01:29:49,110
gonna go into them in a little bit so

01:29:47,670 --> 01:29:50,880
i'm not gonna go into him right now

01:29:49,110 --> 01:29:53,190
one of the other things that you'll need

01:29:50,880 --> 01:29:54,750
to understand is that you will need to

01:29:53,190 --> 01:29:56,340
have some sort of authentication with

01:29:54,750 --> 01:29:59,670
your cluster in order for any of these

01:29:56,340 --> 01:30:03,630
deployment tools to work in our case we

01:29:59,670 --> 01:30:06,809
have this cube config here and if i go

01:30:03,630 --> 01:30:09,059
into a home hidden directory cube and i

01:30:06,809 --> 01:30:11,150
actually cat out this file called config

01:30:09,059 --> 01:30:14,010
you can see that there's a bunch of

01:30:11,150 --> 01:30:15,269
certificates secret information and then

01:30:14,010 --> 01:30:17,489
you'll actually see that it's just a

01:30:15,269 --> 01:30:19,349
yeah mole file that defines all of the

01:30:17,489 --> 01:30:22,590
different clusters i have authentication

01:30:19,349 --> 01:30:25,139
material for earlier when we looked at

01:30:22,590 --> 01:30:27,539
Dockers edge kubernetes i told you that

01:30:25,139 --> 01:30:31,019
there is a file that these come from and

01:30:27,539 --> 01:30:33,480
these contexts are defined in this file

01:30:31,019 --> 01:30:35,039
i have cat it out to my screen here you

01:30:33,480 --> 01:30:36,719
don't really need to know what's in this

01:30:35,039 --> 01:30:38,940
file as much as you just need to know

01:30:36,719 --> 01:30:41,429
that it exists and this is effectively

01:30:38,940 --> 01:30:43,349
your secret file for the cluster this is

01:30:41,429 --> 01:30:48,900
what gives you the ability to run

01:30:43,349 --> 01:30:50,300
command-line tools against kubernetes so

01:30:48,900 --> 01:30:52,559
going back to our slides

01:30:50,300 --> 01:30:54,599
so that's how you authenticate with

01:30:52,559 --> 01:30:56,280
kubernetes if you installed with cuba

01:30:54,599 --> 01:30:57,780
corn we will write that file

01:30:56,280 --> 01:30:59,670
automatically for you so you don't have

01:30:57,780 --> 01:31:01,289
to deal with it if you installed with a

01:30:59,670 --> 01:31:03,059
hefty Oh QuickStart there's a little bit

01:31:01,289 --> 01:31:05,159
of a chore of going and actually getting

01:31:03,059 --> 01:31:07,590
that file off the server if you

01:31:05,159 --> 01:31:09,539
installed with mini cube it should have

01:31:07,590 --> 01:31:10,980
written the file for you but ultimately

01:31:09,539 --> 01:31:13,019
you just need to know that you need that

01:31:10,980 --> 01:31:14,909
file pointing it at the right server

01:31:13,019 --> 01:31:16,610
with the right TLS authentication

01:31:14,909 --> 01:31:18,619
material or you're not going to be

01:31:16,610 --> 01:31:19,969
to access your cluster so that's the

01:31:18,619 --> 01:31:25,400
first snippet into the kubernetes

01:31:19,969 --> 01:31:27,530
security okay so next slide so long long

01:31:25,400 --> 01:31:28,850
ago and the before time I worked for a

01:31:27,530 --> 01:31:31,280
different company and I worked really

01:31:28,850 --> 01:31:33,530
closely with a really a group of awesome

01:31:31,280 --> 01:31:36,230
folks called the home team and I

01:31:33,530 --> 01:31:38,230
remember them saying that they wanted to

01:31:36,230 --> 01:31:40,909
be the package manager for kubernetes

01:31:38,230 --> 01:31:43,090
and if you go look home right now is

01:31:40,909 --> 01:31:45,199
probably the de facto way of installing

01:31:43,090 --> 01:31:47,420
applications on kubernetes although

01:31:45,199 --> 01:31:49,670
there's you know now other tools are

01:31:47,420 --> 01:31:51,830
coming into the space I think helm is

01:31:49,670 --> 01:31:53,659
just the oldest so that you see a lot

01:31:51,830 --> 01:31:56,270
more working examples and people who

01:31:53,659 --> 01:31:59,330
have decided to use helm the best way I

01:31:56,270 --> 01:32:02,300
can think of describing helm to you is

01:31:59,330 --> 01:32:05,389
replace the word helm with apt-get or

01:32:02,300 --> 01:32:07,480
yum or pacman if you're an arch linux

01:32:05,389 --> 01:32:11,780
user like I am

01:32:07,480 --> 01:32:13,790
yeah arch linux well so yeah from my

01:32:11,780 --> 01:32:16,699
command line I would be able to type

01:32:13,790 --> 01:32:18,739
helm install my sequel and that would

01:32:16,699 --> 01:32:20,810
actually pull the my sequel container

01:32:18,739 --> 01:32:23,239
and install it in my kubernetes cluster

01:32:20,810 --> 01:32:25,670
for me and that sort of the workflow

01:32:23,239 --> 01:32:27,020
that helm gives you helm is powerful

01:32:25,670 --> 01:32:30,199
because you can actually go and define

01:32:27,020 --> 01:32:32,420
your own applications and helm install

01:32:30,199 --> 01:32:34,940
them and it sort of gives you a

01:32:32,420 --> 01:32:36,170
framework to build that around one of

01:32:34,940 --> 01:32:38,330
the things you know you need to know

01:32:36,170 --> 01:32:40,070
about helm is it's a client service

01:32:38,330 --> 01:32:43,190
server model and you need to make sure

01:32:40,070 --> 01:32:45,590
that that server client conversation is

01:32:43,190 --> 01:32:48,369
encrypted or you can potentially have a

01:32:45,590 --> 01:32:50,449
vulnerability in your cluster

01:32:48,369 --> 01:32:52,760
furthermore it introduces an out of

01:32:50,449 --> 01:32:54,199
cluster dependency meaning it's yet

01:32:52,760 --> 01:32:55,790
another command-line tool you get to

01:32:54,199 --> 01:32:59,869
download on your laptop to help you

01:32:55,790 --> 01:33:02,540
kubernetes furthermore helmut takes the

01:32:59,869 --> 01:33:05,780
gamal that we will see everywhere in

01:33:02,540 --> 01:33:08,360
kubernetes and it puts another layer of

01:33:05,780 --> 01:33:10,580
configuration management on top of it so

01:33:08,360 --> 01:33:12,110
you're now dependent on using how to

01:33:10,580 --> 01:33:14,659
interpret these config files that you're

01:33:12,110 --> 01:33:17,119
writing and you cannot deploy them any

01:33:14,659 --> 01:33:19,130
other way other than using helmet apart

01:33:17,119 --> 01:33:23,030
them so you're actually creating charts

01:33:19,130 --> 01:33:25,340
that are only valuable to helm and yet

01:33:23,030 --> 01:33:27,800
this is even more yeah Milland even more

01:33:25,340 --> 01:33:30,320
magic because helm actually makes you

01:33:27,800 --> 01:33:33,829
write more ya know files than Coover

01:33:30,320 --> 01:33:37,010
would make you write in the first place

01:33:33,829 --> 01:33:39,710
case on it this is not necessarily a

01:33:37,010 --> 01:33:42,260
competitor to helm but another approach

01:33:39,710 --> 01:33:44,780
to solving the application deployment

01:33:42,260 --> 01:33:47,270
process in kubernetes which we're about

01:33:44,780 --> 01:33:49,130
to go through manually in a moment and

01:33:47,270 --> 01:33:51,079
this is calls itself a Configuration

01:33:49,130 --> 01:33:53,570
Manager for kubernetes so it's not a

01:33:51,079 --> 01:33:56,000
package manager like like helm is the

01:33:53,570 --> 01:33:58,040
configuration lives in your local repo

01:33:56,000 --> 01:34:00,349
and then from the context of your local

01:33:58,040 --> 01:34:03,079
repo you are then able to apply various

01:34:00,349 --> 01:34:05,270
flavors of that configuration to your

01:34:03,079 --> 01:34:07,909
cluster the best example I can think of

01:34:05,270 --> 01:34:11,090
is I'm in a working directory and for my

01:34:07,909 --> 01:34:14,210
application and I have a set of concerns

01:34:11,090 --> 01:34:16,340
I wanted to define for dev or for test

01:34:14,210 --> 01:34:17,989
deployment and then I have a completely

01:34:16,340 --> 01:34:20,690
other set of concerns that I wanted to

01:34:17,989 --> 01:34:22,790
find for production right real

01:34:20,690 --> 01:34:23,960
authentication keys may be actually

01:34:22,790 --> 01:34:24,250
running on real hardware or things like

01:34:23,960 --> 01:34:26,329
that

01:34:24,250 --> 01:34:27,619
caisson allows you to have the two

01:34:26,329 --> 01:34:30,739
different flavors and switch back and

01:34:27,619 --> 01:34:33,170
forth between them easily it's based on

01:34:30,739 --> 01:34:34,610
JSON it jace on it and that whole

01:34:33,170 --> 01:34:37,250
environment thing that I just described

01:34:34,610 --> 01:34:39,619
helm can't do that so that's one of the

01:34:37,250 --> 01:34:41,000
perks freeze in caisson it also case on

01:34:39,619 --> 01:34:42,949
it does not have some sort of

01:34:41,000 --> 01:34:45,320
client-server model it just runs locally

01:34:42,949 --> 01:34:47,540
so it alleviates that potential security

01:34:45,320 --> 01:34:49,429
hole by running a server in your

01:34:47,540 --> 01:34:52,610
kubernetes cluster to track things for

01:34:49,429 --> 01:34:55,579
you this is actually pretty common

01:34:52,610 --> 01:34:57,619
believe it or not a lot of people just

01:34:55,579 --> 01:34:59,599
kind of just like you said or use bash

01:34:57,619 --> 01:35:01,489
and kind of do this deployment thing on

01:34:59,599 --> 01:35:03,530
their own and we're gonna look at a

01:35:01,489 --> 01:35:04,790
deployment concretely in a moment and

01:35:03,530 --> 01:35:06,770
you'll understand why you would want to

01:35:04,790 --> 01:35:08,989
use set or bash but the point I'm trying

01:35:06,770 --> 01:35:11,300
to make here is some people have decided

01:35:08,989 --> 01:35:13,250
to do this themselves and in some cases

01:35:11,300 --> 01:35:17,090
that actually makes sense for you and

01:35:13,250 --> 01:35:19,550
your team I am going to be doing

01:35:17,090 --> 01:35:21,290
everything very concretely today using

01:35:19,550 --> 01:35:23,690
them like the bare minimum of primitives

01:35:21,290 --> 01:35:26,060
so that's going to feel very similar to

01:35:23,690 --> 01:35:28,040
this type of experience the only thing

01:35:26,060 --> 01:35:30,139
you need to be aware of with us is it's

01:35:28,040 --> 01:35:32,329
easy to get trapped here because it'll

01:35:30,139 --> 01:35:34,219
start working and then you'll start to

01:35:32,329 --> 01:35:35,810
like paste more and more bash scripts

01:35:34,219 --> 01:35:37,429
we've all done this before

01:35:35,810 --> 01:35:39,199
paste bash scripts on top of bash

01:35:37,429 --> 01:35:41,210
scripts on top of yeah he's like shaking

01:35:39,199 --> 01:35:42,440
his head right now because it's it's a

01:35:41,210 --> 01:35:43,960
thing that can totally happen so you

01:35:42,440 --> 01:35:46,730
need to be aware of that

01:35:43,960 --> 01:35:49,520
also there's client go which is the

01:35:46,730 --> 01:35:51,530
kubernetes official golang sdk that

01:35:49,520 --> 01:35:53,750
would allow you to to basically build

01:35:51,530 --> 01:35:56,300
your own deployment tool and there's

01:35:53,750 --> 01:35:59,090
other SDKs available as well

01:35:56,300 --> 01:36:02,239
there's SDKs for Python for Java for

01:35:59,090 --> 01:36:03,920
JavaScript for typescript for Ruby and

01:36:02,239 --> 01:36:06,889
because of these SDKs you could

01:36:03,920 --> 01:36:08,330
potentially write your own tool that

01:36:06,889 --> 01:36:10,520
solves this problem of getting a

01:36:08,330 --> 01:36:13,850
container running in kubernetes for you

01:36:10,520 --> 01:36:15,590
as anytime you you generate your own

01:36:13,850 --> 01:36:17,659
tooling you're gonna have to support it

01:36:15,590 --> 01:36:20,239
but ultimately at the end of the day all

01:36:17,659 --> 01:36:22,760
you're doing is you're sending a TLS and

01:36:20,239 --> 01:36:24,710
authenticated API request to the

01:36:22,760 --> 01:36:26,420
kubernetes server and just telling it

01:36:24,710 --> 01:36:29,230
where to pull an image from so it's not

01:36:26,420 --> 01:36:32,179
impossible to build this on your own

01:36:29,230 --> 01:36:33,830
last but not least the magic tool that I

01:36:32,179 --> 01:36:35,619
would like for everybody to download if

01:36:33,830 --> 01:36:39,710
you don't already have it downloaded

01:36:35,619 --> 01:36:41,510
this is 99% of the time what you're

01:36:39,710 --> 01:36:43,699
going to be acting reacting with if

01:36:41,510 --> 01:36:46,429
you're working on kubernetes this is

01:36:43,699 --> 01:36:48,590
called cube actual or cube control or

01:36:46,429 --> 01:36:51,500
cube cuddle or keep CTL or whatever you

01:36:48,590 --> 01:36:54,350
want to call it but this is sort of the

01:36:51,500 --> 01:36:55,550
main entry point for observing and

01:36:54,350 --> 01:36:57,770
interacting with a kubernetes cluster

01:36:55,550 --> 01:37:00,230
and this is what we're going to be using

01:36:57,770 --> 01:37:03,290
today what you need to know about it is

01:37:00,230 --> 01:37:05,480
it it reads Yambol configuration files

01:37:03,290 --> 01:37:09,050
and those yamo configuration files are

01:37:05,480 --> 01:37:11,570
just called manifests oh here's my

01:37:09,050 --> 01:37:15,500
pulling an image diagram I was looking

01:37:11,570 --> 01:37:17,210
for earlier so anyway all that is going

01:37:15,500 --> 01:37:20,540
to be happening when we actually deploy

01:37:17,210 --> 01:37:22,909
our container to kubernetes is we have

01:37:20,540 --> 01:37:24,800
some image registry here for the example

01:37:22,909 --> 01:37:26,960
I'm doing remember I pushed that Python

01:37:24,800 --> 01:37:28,780
container up to docker hub so you can

01:37:26,960 --> 01:37:30,980
just imagine docker hub right there

01:37:28,780 --> 01:37:32,330
there's going to be these components

01:37:30,980 --> 01:37:34,790
inside of kubernetes called the

01:37:32,330 --> 01:37:38,989
scheduler and the controller manager

01:37:34,790 --> 01:37:41,260
that then will declare how much and how

01:37:38,989 --> 01:37:43,940
many of these containers to run on which

01:37:41,260 --> 01:37:45,860
virtual machines and then each of those

01:37:43,940 --> 01:37:48,080
VMs have a cubelet that will then

01:37:45,860 --> 01:37:50,480
actually go and start a container for us

01:37:48,080 --> 01:37:51,619
so when you look at the cubelet here

01:37:50,480 --> 01:37:53,469
does everybody remember what I did

01:37:51,619 --> 01:37:55,940
docker run a moment ago

01:37:53,469 --> 01:37:57,260
that's all the cubelets doing just think

01:37:55,940 --> 01:37:59,119
of a cubelet as just about

01:37:57,260 --> 01:38:00,949
script that just says docker run that's

01:37:59,119 --> 01:38:04,550
a really easy way for you to imagine

01:38:00,949 --> 01:38:08,480
what's going on here okay uh sorry wrong

01:38:04,550 --> 01:38:10,309
button okay so some common image

01:38:08,480 --> 01:38:13,519
registries if you want to snap a photo

01:38:10,309 --> 01:38:16,190
of this to go check out I'm using docker

01:38:13,519 --> 01:38:18,619
hub there's one called Quay Google has

01:38:16,190 --> 01:38:21,170
one called GCR Amazon has one called ECR

01:38:18,619 --> 01:38:23,929
Microsoft has one there's a bunch of

01:38:21,170 --> 01:38:25,820
them out there it's just a place to

01:38:23,929 --> 01:38:27,860
store container images it's not a super

01:38:25,820 --> 01:38:30,559
critical decision deciding on this is

01:38:27,860 --> 01:38:33,949
mostly which UI you like better and

01:38:30,559 --> 01:38:36,619
which one feels more natural to you okay

01:38:33,949 --> 01:38:40,309
but because of this this is why we need

01:38:36,619 --> 01:38:43,159
CI CD because of this whole kubernetes

01:38:40,309 --> 01:38:44,989
is gonna pull an image from an image

01:38:43,159 --> 01:38:46,429
registry and we're gonna need to build

01:38:44,989 --> 01:38:48,230
that image that is why you'll always

01:38:46,429 --> 01:38:51,230
hear oh me and my team need to solve

01:38:48,230 --> 01:38:52,969
this CI CD concern because this whole

01:38:51,230 --> 01:38:55,280
docker build and this whole make file

01:38:52,969 --> 01:38:56,900
stuff that we just went through would be

01:38:55,280 --> 01:38:58,489
nice to have it automated so that you

01:38:56,900 --> 01:39:00,800
didn't have to go and do a docker push

01:38:58,489 --> 01:39:04,070
every time you wanted to run your

01:39:00,800 --> 01:39:07,159
container in kubernetes so that's why we

01:39:04,070 --> 01:39:10,369
have this need for CI CD I think about

01:39:07,159 --> 01:39:11,750
basil not basil is a really good example

01:39:10,369 --> 01:39:14,420
because it has a lot of the container

01:39:11,750 --> 01:39:16,070
building stuff built into it but there

01:39:14,420 --> 01:39:18,079
ain't nothing wrong with using Jenkins

01:39:16,070 --> 01:39:23,260
other than the fact that you're using

01:39:18,079 --> 01:39:26,000
Jenkins so what do we need in kubernetes

01:39:23,260 --> 01:39:26,809
okay this is the first part of the day

01:39:26,000 --> 01:39:30,320
where we're gonna start learning

01:39:26,809 --> 01:39:32,840
kubernetes primitives I'm gonna go kind

01:39:30,320 --> 01:39:35,449
of quick here but if you get lost or

01:39:32,840 --> 01:39:37,309
confused stop me I really sincerely mean

01:39:35,449 --> 01:39:40,070
that please put your hand up so the

01:39:37,309 --> 01:39:43,039
smallest thing in kubernetes you need to

01:39:40,070 --> 01:39:46,550
know about is this thing called a pod a

01:39:43,039 --> 01:39:48,469
pod effectively is your application so

01:39:46,550 --> 01:39:51,710
this whole time we've been talking about

01:39:48,469 --> 01:39:54,170
building a container what a pod does is

01:39:51,710 --> 01:39:55,429
it allows you to run one or more

01:39:54,170 --> 01:39:58,159
containers remember I said earlier

01:39:55,429 --> 01:40:01,190
everything's a set in kubernetes a pot

01:39:58,159 --> 01:40:03,159
is just one or more containers but it's

01:40:01,190 --> 01:40:07,460
the smallest working unit in kubernetes

01:40:03,159 --> 01:40:08,400
it behaves similar to a single virtual

01:40:07,460 --> 01:40:11,159
machine meaning that

01:40:08,400 --> 01:40:13,770
has shared storage and shared network so

01:40:11,159 --> 01:40:15,840
if you define two containers in the same

01:40:13,770 --> 01:40:17,400
pod they're able to share storage

01:40:15,840 --> 01:40:20,640
between them and they're able to network

01:40:17,400 --> 01:40:23,550
between them furthermore we have this

01:40:20,640 --> 01:40:25,170
these arbitrary strings like literally

01:40:23,550 --> 01:40:27,150
they're called labels but literally it's

01:40:25,170 --> 01:40:29,489
just key value pairs that can be

01:40:27,150 --> 01:40:31,890
anything you want and kubernetes likes

01:40:29,489 --> 01:40:34,380
to use these labels to map pods to

01:40:31,890 --> 01:40:36,179
various things movie and Ford what you

01:40:34,380 --> 01:40:37,469
need to know about pods is the whole

01:40:36,179 --> 01:40:40,830
point of them is so that they can be

01:40:37,469 --> 01:40:43,199
scaled up and down meaning we have a pod

01:40:40,830 --> 01:40:45,360
that runs one or more containers and

01:40:43,199 --> 01:40:48,690
then we can have multiple instances of

01:40:45,360 --> 01:40:50,190
that same pod and that's important for

01:40:48,690 --> 01:40:54,900
when we start looking at distributing

01:40:50,190 --> 01:40:56,969
our application horizontally and usually

01:40:54,900 --> 01:41:00,000
a pod is an application aka

01:40:56,969 --> 01:41:01,949
a micro service in our case the Python

01:41:00,000 --> 01:41:04,050
program that we just built and put into

01:41:01,949 --> 01:41:05,880
a container is ultimately going to turn

01:41:04,050 --> 01:41:11,130
into a pod after we deploy its

01:41:05,880 --> 01:41:14,130
kubernetes a layer above the pod is this

01:41:11,130 --> 01:41:17,159
thing called a deployment and deployment

01:41:14,130 --> 01:41:21,210
just defines a set of pods so now we're

01:41:17,159 --> 01:41:23,280
in the sets of sets Department and this

01:41:21,210 --> 01:41:26,880
is helpful for for scaling our

01:41:23,280 --> 01:41:28,860
application horizontally if we had a web

01:41:26,880 --> 01:41:31,980
application that was receiving a ton of

01:41:28,860 --> 01:41:32,940
traffic and the web UI was constantly

01:41:31,980 --> 01:41:35,460
slowing down

01:41:32,940 --> 01:41:38,100
we might would use the deployment to

01:41:35,460 --> 01:41:40,770
actually increase the number of pods and

01:41:38,100 --> 01:41:43,890
then distribute traffic across an even

01:41:40,770 --> 01:41:46,949
higher number of user interface web UIs

01:41:43,890 --> 01:41:49,440
and fix that that laggy problem that we

01:41:46,949 --> 01:41:51,530
were seeing earlier so deployments are

01:41:49,440 --> 01:41:53,880
sets of sets and they're important

01:41:51,530 --> 01:41:56,190
because these are going to be ultimately

01:41:53,880 --> 01:41:57,719
what defined the container image that

01:41:56,190 --> 01:41:59,130
you're going to be running in our case

01:41:57,719 --> 01:42:01,920
it's going to be that chris nova

01:41:59,130 --> 01:42:06,060
kubernetes workshop app we just created

01:42:01,920 --> 01:42:08,640
a moment ago furthermore deployments are

01:42:06,060 --> 01:42:10,770
self-healing meaning if I told the

01:42:08,640 --> 01:42:14,400
deployment I would like 10 copies of a

01:42:10,770 --> 01:42:16,409
pod and one of the pods exited randomly

01:42:14,400 --> 01:42:18,120
as it would because remember our program

01:42:16,409 --> 01:42:20,550
is sleeping for a thousand seconds in an

01:42:18,120 --> 01:42:21,780
exiting kubernetes will detect that the

01:42:20,550 --> 01:42:23,880
container has broken

01:42:21,780 --> 01:42:27,030
and reschedule it so that we always have

01:42:23,880 --> 01:42:29,309
10 copies of it running now because

01:42:27,030 --> 01:42:31,320
containers are ephemeral we would

01:42:29,309 --> 01:42:33,150
actually start a new container it would

01:42:31,320 --> 01:42:35,639
be a new system process but it would be

01:42:33,150 --> 01:42:38,699
an exact replica of that same container

01:42:35,639 --> 01:42:41,730
we've created before so that's a

01:42:38,699 --> 01:42:43,920
deployment this is our last one

01:42:41,730 --> 01:42:46,679
I'm keeping it simple just to start this

01:42:43,920 --> 01:42:49,800
last one is called a service and a

01:42:46,679 --> 01:42:52,020
service is a network abstraction for the

01:42:49,800 --> 01:42:54,030
pods and ultimately for the deployment

01:42:52,020 --> 01:42:56,940
you would map a deployment to a service

01:42:54,030 --> 01:42:58,650
how you map those things together are

01:42:56,940 --> 01:42:59,909
those labels we talked about earlier and

01:42:58,650 --> 01:43:01,770
we're gonna actually look at these

01:42:59,909 --> 01:43:03,719
primitives so don't worry if this is

01:43:01,770 --> 01:43:05,400
confusing and you don't understand where

01:43:03,719 --> 01:43:08,789
you would define things like a label I'm

01:43:05,400 --> 01:43:11,730
about to show you and those labels are

01:43:08,789 --> 01:43:13,170
how kubernetes would say this service

01:43:11,730 --> 01:43:16,440
goes with this deployment

01:43:13,170 --> 01:43:18,570
so you could say match on label name is

01:43:16,440 --> 01:43:20,730
equal to Nova and as long as there is a

01:43:18,570 --> 01:43:23,250
deployment that had a label called a

01:43:20,730 --> 01:43:25,289
name equal to Nova they those two would

01:43:23,250 --> 01:43:27,690
match together and we would be able to

01:43:25,289 --> 01:43:31,320
define the networking components for our

01:43:27,690 --> 01:43:34,079
deployment effectively when I think of a

01:43:31,320 --> 01:43:35,969
service all I think of is poking a hole

01:43:34,079 --> 01:43:39,059
in the firewall all we're really saying

01:43:35,969 --> 01:43:41,820
here is I would like to control some

01:43:39,059 --> 01:43:43,260
level of access to my application and if

01:43:41,820 --> 01:43:45,570
we were to actually build a web service

01:43:43,260 --> 01:43:48,329
we would we would use this to like say

01:43:45,570 --> 01:43:50,250
open up port 80 and map that to our pod

01:43:48,329 --> 01:43:53,570
that we just created and we'll take a

01:43:50,250 --> 01:43:55,889
look at doing all that here in a moment

01:43:53,570 --> 01:43:58,020
so how do we get there what are we

01:43:55,889 --> 01:43:59,489
actually going to run today so get this

01:43:58,020 --> 01:44:02,369
container that we just built running in

01:43:59,489 --> 01:44:05,369
kubernetes I'm gonna use these two

01:44:02,369 --> 01:44:08,420
commands here for queue Bechdel called

01:44:05,369 --> 01:44:11,610
Hugh Bechtel run and Hugh Bechtel expose

01:44:08,420 --> 01:44:14,610
the first one queue Bechtel run is going

01:44:11,610 --> 01:44:17,070
to create a deployment and that

01:44:14,610 --> 01:44:19,860
deployment will have some subset of pods

01:44:17,070 --> 01:44:22,710
each of those pods running the image

01:44:19,860 --> 01:44:24,690
that I defined with the - - image flag

01:44:22,710 --> 01:44:26,309
and I'm just gonna paste in the image

01:44:24,690 --> 01:44:29,250
that we've been using but you can use

01:44:26,309 --> 01:44:31,320
any old image you want after the

01:44:29,250 --> 01:44:33,780
deployment is up and running I'm going

01:44:31,320 --> 01:44:34,740
to then expose that application to the

01:44:33,780 --> 01:44:37,710
broader Internet

01:44:34,740 --> 01:44:40,860
i doing Bechtel expose and I'm gonna

01:44:37,710 --> 01:44:43,050
just simply map port 8080 to port target

01:44:40,860 --> 01:44:44,910
port 8080 and I have an example program

01:44:43,050 --> 01:44:46,170
that I'll run in a moment that is

01:44:44,910 --> 01:44:48,090
actually going to be a web service

01:44:46,170 --> 01:44:50,310
listening on port 8080 and we'll be able

01:44:48,090 --> 01:44:53,550
to hit that together if we have enough

01:44:50,310 --> 01:44:55,260
time okay so is everybody good on those

01:44:53,550 --> 01:44:56,460
two commands and we're gonna run them

01:44:55,260 --> 01:44:59,270
and we're actually gonna look and see

01:44:56,460 --> 01:45:07,170
what happens so let's run these in

01:44:59,270 --> 01:45:09,120
kubernetes so to start off I have the

01:45:07,170 --> 01:45:10,740
cubital command line tool downloaded

01:45:09,120 --> 01:45:13,170
show of hands who already has this up

01:45:10,740 --> 01:45:18,900
and running okay if you want to go ahead

01:45:13,170 --> 01:45:20,370
and type Kubek to low get pods you

01:45:18,900 --> 01:45:25,710
should see that show of hands if you can

01:45:20,370 --> 01:45:27,840
run that command and it works ok cool so

01:45:25,710 --> 01:45:29,310
I have two aliases that I like to use

01:45:27,840 --> 01:45:33,630
the first one is I do

01:45:29,310 --> 01:45:35,910
alias K is equal to ki Bechtel and the

01:45:33,630 --> 01:45:38,880
second one I do alias I just call it K

01:45:35,910 --> 01:45:44,490
dump and I set that to queue Bechtel get

01:45:38,880 --> 01:45:46,080
all - - all namespaces the first one

01:45:44,490 --> 01:45:48,600
just makes my command lines a little bit

01:45:46,080 --> 01:45:50,460
easier and the second one is literally

01:45:48,600 --> 01:45:53,160
like show me everything that's running

01:45:50,460 --> 01:45:54,750
in my cluster which is kind of cool for

01:45:53,160 --> 01:45:56,700
demos so that you can actually see that

01:45:54,750 --> 01:45:58,440
we're creating all of these pods and

01:45:56,700 --> 01:46:01,830
services and deployments that we just

01:45:58,440 --> 01:46:03,720
talked about okay so let's run our

01:46:01,830 --> 01:46:05,280
application in kubernetes

01:46:03,720 --> 01:46:07,440
and then let's talk about what happened

01:46:05,280 --> 01:46:10,560
behind the scenes so to do that I'm

01:46:07,440 --> 01:46:14,190
going to type Q Bechdel run and let me

01:46:10,560 --> 01:46:16,110
just pull up my command here the name of

01:46:14,190 --> 01:46:17,490
the deployment so this can be any name

01:46:16,110 --> 01:46:21,990
that we want to call it does somebody

01:46:17,490 --> 01:46:24,810
just want to shout a name out what Bob

01:46:21,990 --> 01:46:28,110
okay we're gonna run Bob you back to a

01:46:24,810 --> 01:46:30,870
run Bob and we're gonna say - - image

01:46:28,110 --> 01:46:32,420
and then we're gonna paste in the name

01:46:30,870 --> 01:46:35,820
of our image here which is of course

01:46:32,420 --> 01:46:38,220
chris nova kubernetes workshop app and

01:46:35,820 --> 01:46:39,750
we're gonna say the latest remember

01:46:38,220 --> 01:46:45,789
earlier we tagged that with the latest

01:46:39,750 --> 01:46:47,920
tag deployment apps bob was created

01:46:45,789 --> 01:46:50,619
that's it my container is now running in

01:46:47,920 --> 01:46:52,090
kubernetes so let's talk about what

01:46:50,619 --> 01:46:56,489
actually happened because there's a lot

01:46:52,090 --> 01:47:00,340
of stuff that just happened so if I do

01:46:56,489 --> 01:47:02,409
KTX which is an alias I have called cube

01:47:00,340 --> 01:47:04,719
context you can see that I'm actually

01:47:02,409 --> 01:47:07,420
pointed to this kubernetes admin at

01:47:04,719 --> 01:47:09,849
kubernetes cluster now if I was to go

01:47:07,420 --> 01:47:12,280
and look in that Cuba config file we

01:47:09,849 --> 01:47:17,980
would actually see that that cube config

01:47:12,280 --> 01:47:19,840
file is pointing to wk3 master here I

01:47:17,980 --> 01:47:22,119
created a new kubernetes cluster during

01:47:19,840 --> 01:47:27,909
one of the breaks and just called it wk3

01:47:22,119 --> 01:47:30,670
using cuba corn and so that is running

01:47:27,909 --> 01:47:34,329
in Amazon and I just interacted with

01:47:30,670 --> 01:47:38,349
that cluster so if I do k get pods

01:47:34,329 --> 01:47:41,590
member k is short for queue Bechtel you

01:47:38,349 --> 01:47:44,289
can see that I now have one pod running

01:47:41,590 --> 01:47:47,590
its called Bob and it has this unique

01:47:44,289 --> 01:47:50,800
hash at the end of it and every time a

01:47:47,590 --> 01:47:52,960
pod is restarted its gonna get a unique

01:47:50,800 --> 01:47:56,409
hash and that is sort of like its social

01:47:52,960 --> 01:47:59,559
security number to demonstrate some of

01:47:56,409 --> 01:48:01,690
the resiliency with kubernetes before I

01:47:59,559 --> 01:48:04,389
actually look at the logs for this pot

01:48:01,690 --> 01:48:06,159
here and we can explore the pod I just

01:48:04,389 --> 01:48:08,980
want to show folks what would happen if

01:48:06,159 --> 01:48:12,639
I delete this pod so I can delete this

01:48:08,980 --> 01:48:14,739
pod by doing key Bechtel delete pod and

01:48:12,639 --> 01:48:17,130
then I'm just gonna paste that unique

01:48:14,739 --> 01:48:19,000
name for the pod what's gonna happen

01:48:17,130 --> 01:48:23,079
does anybody want to guess what's gonna

01:48:19,000 --> 01:48:25,300
happen a new one's gonna get created the

01:48:23,079 --> 01:48:27,519
this controller manager says I'm

01:48:25,300 --> 01:48:31,269
supposed to have one container created I

01:48:27,519 --> 01:48:32,590
deleted it oh no there's actually zero

01:48:31,269 --> 01:48:34,900
containers running we're gonna go run a

01:48:32,590 --> 01:48:38,860
new container and that's called a pod so

01:48:34,900 --> 01:48:42,070
now if I do K get pods you can see that

01:48:38,860 --> 01:48:45,460
this one was terminated and this one is

01:48:42,070 --> 01:48:48,880
our new one as well so to get logs we're

01:48:45,460 --> 01:48:50,860
gonna do key Bechtel logs the name of

01:48:48,880 --> 01:48:53,949
our pod and then just like everybody's

01:48:50,860 --> 01:48:57,460
done a tail - F before the cubicle takes

01:48:53,949 --> 01:48:59,330
the same - f command line flag here and

01:48:57,460 --> 01:49:04,360
that's going to be

01:48:59,330 --> 01:49:04,360
sically give us our same are saying yes

01:49:06,700 --> 01:49:10,750
I'm sorry what was the question

01:49:19,370 --> 01:49:25,010
I'm gonna get there just one second okay

01:49:22,400 --> 01:49:26,750
so I wanted to demonstrate a quick thing

01:49:25,010 --> 01:49:29,330
about the pods so right now we're

01:49:26,750 --> 01:49:31,340
experiencing that same effect of the

01:49:29,330 --> 01:49:33,410
Python application is running but

01:49:31,340 --> 01:49:36,200
because we haven't controlled seeded it

01:49:33,410 --> 01:49:38,330
hasn't actually echoed out to just

01:49:36,200 --> 01:49:39,590
standard out yet so we can and we know

01:49:38,330 --> 01:49:41,360
we've already deleted one of the pods

01:49:39,590 --> 01:49:45,800
and it was rescheduled I can actually

01:49:41,360 --> 01:49:52,240
get the previous pod logs by doing - -

01:49:45,800 --> 01:49:52,240
previous here and you can actually see

01:49:53,710 --> 01:49:59,690
not found let's try this again feedback

01:49:58,790 --> 01:50:08,360
- logs

01:49:59,690 --> 01:50:10,690
this - - previous not found hmm sorry

01:50:08,360 --> 01:50:10,690
what was that

01:50:11,230 --> 01:50:16,470
oh thanks

01:50:21,500 --> 01:50:26,660
see if that works nope I don't know why

01:50:25,160 --> 01:50:27,980
that's not working that usually wants to

01:50:26,660 --> 01:50:29,510
work and you can get the previous log

01:50:27,980 --> 01:50:31,670
the previous logs

01:50:29,510 --> 01:50:33,500
anyway I'll think about that and if

01:50:31,670 --> 01:50:35,810
somebody else wants to shout something

01:50:33,500 --> 01:50:36,980
out I can try it but the point I was

01:50:35,810 --> 01:50:41,930
trying to make was you would be able to

01:50:36,980 --> 01:50:44,390
see the rock climbing is the best sport

01:50:41,930 --> 01:50:46,840
in the world text in the previous pod

01:50:44,390 --> 01:50:49,220
there but to answer your question

01:50:46,840 --> 01:50:50,660
concretely how would you decommission

01:50:49,220 --> 01:50:52,520
your app since kubernetes to just

01:50:50,660 --> 01:50:55,610
continually re running our container

01:50:52,520 --> 01:50:59,120
over and over again we would interact

01:50:55,610 --> 01:51:00,920
with the deployment object so if I do Q

01:50:59,120 --> 01:51:03,470
Bechdel get pods

01:51:00,920 --> 01:51:05,330
I see the pods but remember the pods are

01:51:03,470 --> 01:51:07,310
a reflection of what the deployment has

01:51:05,330 --> 01:51:09,800
defined so in order for me to see the

01:51:07,310 --> 01:51:13,430
deployment I would do Q Bechdel get

01:51:09,800 --> 01:51:15,920
deploy which is short for deployment and

01:51:13,430 --> 01:51:18,380
you can see that I have one here called

01:51:15,920 --> 01:51:20,990
Bob now this is where the Yambol comes

01:51:18,380 --> 01:51:23,420
in I can actually edit this deployment

01:51:20,990 --> 01:51:26,870
and what that would look like would be

01:51:23,420 --> 01:51:29,990
me doing Q Bechtel edit the name of our

01:51:26,870 --> 01:51:32,540
deployment q Bechtel Edit deploy the

01:51:29,990 --> 01:51:35,630
name of our deployment Bob and that's

01:51:32,540 --> 01:51:38,960
gonna open up and our favorite text

01:51:35,630 --> 01:51:41,210
editor Emacs here and you'll see our

01:51:38,960 --> 01:51:42,620
first Y Amal which I'd like to Pat

01:51:41,210 --> 01:51:44,300
myself on the back for not getting into

01:51:42,620 --> 01:51:47,360
animal until two and a half hours into

01:51:44,300 --> 01:51:50,300
this thing and if you come down you see

01:51:47,360 --> 01:51:54,890
replicas equal to one if I change this

01:51:50,300 --> 01:51:59,540
replica as equal to a thousand and I run

01:51:54,890 --> 01:52:01,940
Q Bechdel get pods you can see that

01:51:59,540 --> 01:52:04,640
kubernetes has now started one thousand

01:52:01,940 --> 01:52:08,060
containers distributed across one

01:52:04,640 --> 01:52:11,120
virtual machine in Amazon and if I had a

01:52:08,060 --> 01:52:13,460
thousand virtual machines in Amazon who

01:52:11,120 --> 01:52:15,980
can guess what the math would be one

01:52:13,460 --> 01:52:18,890
container per machine and if I had 500

01:52:15,980 --> 01:52:22,280
if I cut that in half two containers per

01:52:18,890 --> 01:52:24,740
machine if I had 254 containers per

01:52:22,280 --> 01:52:27,620
machine and kubernetes distributes the

01:52:24,740 --> 01:52:30,290
load horizontally and so this is

01:52:27,620 --> 01:52:34,160
exciting because now I have basically

01:52:30,290 --> 01:52:34,940
started a thousand Python processes onto

01:52:34,160 --> 01:52:36,949
this

01:52:34,940 --> 01:52:40,280
this cloud computer and I did that all

01:52:36,949 --> 01:52:41,989
from the command line here but also I

01:52:40,280 --> 01:52:44,690
can interact with this programmatically

01:52:41,989 --> 01:52:46,900
so if me and my team wanted to to solve

01:52:44,690 --> 01:52:48,949
any problems related around kubernetes

01:52:46,900 --> 01:52:51,500
programmatically there are now these

01:52:48,949 --> 01:52:54,560
primitives in place and this is where we

01:52:51,500 --> 01:52:58,219
start to really see this kernel concept

01:52:54,560 --> 01:53:00,620
appear I just demonstrated how to create

01:52:58,219 --> 01:53:03,199
a container and run it in kubernetes and

01:53:00,620 --> 01:53:06,050
then it look at a thousand copies of it

01:53:03,199 --> 01:53:07,880
using Q Bechtel but if you wanted to

01:53:06,050 --> 01:53:10,340
write tooling or if there was a piece of

01:53:07,880 --> 01:53:12,980
tooling and open source that tool would

01:53:10,340 --> 01:53:15,199
not really care about where your cluster

01:53:12,980 --> 01:53:17,840
is running right it wouldn't matter if

01:53:15,199 --> 01:53:19,760
we were running in mini cube or Amazon

01:53:17,840 --> 01:53:22,070
we would still be able to issue the

01:53:19,760 --> 01:53:24,620
exact same cube cube ekdal command and

01:53:22,070 --> 01:53:26,239
get the same output so we were starting

01:53:24,620 --> 01:53:29,180
to see that we can start to build on top

01:53:26,239 --> 01:53:32,270
of kubernetes to quote one of my

01:53:29,180 --> 01:53:34,430
colleagues Joe kubernetes is a platform

01:53:32,270 --> 01:53:38,360
platform it gives you primitives in what

01:53:34,430 --> 01:53:43,100
you can build on top of and last but not

01:53:38,360 --> 01:53:44,960
least let's look at the service here so

01:53:43,100 --> 01:53:47,690
we can do cubic they'll get service and

01:53:44,960 --> 01:53:51,070
we can actually see that we now have

01:53:47,690 --> 01:53:54,830
this service called kubernetes and if we

01:53:51,070 --> 01:53:58,640
echo that service out we can do queue

01:53:54,830 --> 01:54:02,300
Bechdel get service the name of the

01:53:58,640 --> 01:54:03,800
service output equal to Y amel and you

01:54:02,300 --> 01:54:06,320
can actually see that it's going to echo

01:54:03,800 --> 01:54:08,600
that that yah Mille out here to stand it

01:54:06,320 --> 01:54:10,190
out on my local computer and if you

01:54:08,600 --> 01:54:13,460
scroll down you'll see remember we

01:54:10,190 --> 01:54:15,380
talked about labels beforehand and you

01:54:13,460 --> 01:54:20,480
can scroll down and see that we are

01:54:15,380 --> 01:54:22,310
actually exposing port 443 protocol TCP

01:54:20,480 --> 01:54:26,710
and we're mapping that to the target

01:54:22,310 --> 01:54:29,480
port 443 down here the type is important

01:54:26,710 --> 01:54:30,980
right now we're running cluster IP which

01:54:29,480 --> 01:54:33,350
is a bad way of saying this is only

01:54:30,980 --> 01:54:35,840
accessible to other applications running

01:54:33,350 --> 01:54:38,739
in kubernetes but if I wanted to change

01:54:35,840 --> 01:54:40,850
this to type equal load balancer

01:54:38,739 --> 01:54:44,030
kubernetes would actually go and create

01:54:40,850 --> 01:54:47,210
a load balancer in Amazon and point that

01:54:44,030 --> 01:54:48,920
load balancer to the node or nodes that

01:54:47,210 --> 01:54:51,470
this application is

01:54:48,920 --> 01:54:54,560
and distribute traffic horizontally

01:54:51,470 --> 01:54:56,920
across all of these 1,000 pods I just

01:54:54,560 --> 01:55:09,380
created so that make sense to everyone

01:54:56,920 --> 01:55:11,510
question sagen ok so the question is can

01:55:09,380 --> 01:55:13,010
you do that in the VM itself without

01:55:11,510 --> 01:55:15,350
incurring the cost of a load balancer

01:55:13,010 --> 01:55:18,380
and that's where we get into this new

01:55:15,350 --> 01:55:20,000
type of primitive which the primitives

01:55:18,380 --> 01:55:21,560
we've looked at so far are pod services

01:55:20,000 --> 01:55:23,630
and deployments there's this other one

01:55:21,560 --> 01:55:25,760
called ingress that allows for you to

01:55:23,630 --> 01:55:27,590
bring your own ingress controller to the

01:55:25,760 --> 01:55:29,720
table which is where you could do things

01:55:27,590 --> 01:55:30,830
like using engine X to actually

01:55:29,720 --> 01:55:32,480
distribute it so that you're not

01:55:30,830 --> 01:55:37,520
actually paying for a load balancer

01:55:32,480 --> 01:55:40,400
proper the takeaway here with all of the

01:55:37,520 --> 01:55:43,790
kubernetes resources we've looked at

01:55:40,400 --> 01:55:47,660
three today every kubernetes resource is

01:55:43,790 --> 01:55:50,150
effectively an object this is one

01:55:47,660 --> 01:55:52,640
implementation of the service object

01:55:50,150 --> 01:55:55,550
right so you see up here at the top it

01:55:52,640 --> 01:55:58,970
says kind is equal to service that is a

01:55:55,550 --> 01:56:01,550
kubernetes service object we also have

01:55:58,970 --> 01:56:03,380
pods and we also have deployments which

01:56:01,550 --> 01:56:06,740
we defined a moment ago but I think

01:56:03,380 --> 01:56:08,780
we're there's 32 I want to say total

01:56:06,740 --> 01:56:11,720
kubernetes resources and you can

01:56:08,780 --> 01:56:15,590
actually build your own as well if you

01:56:11,720 --> 01:56:17,450
wanted to so the takeaway here is we

01:56:15,590 --> 01:56:19,010
looked at deployments we looked at pods

01:56:17,450 --> 01:56:21,680
we looked at services those are the

01:56:19,010 --> 01:56:24,680
first basic three that you're gonna need

01:56:21,680 --> 01:56:27,230
to familiarize yourself with but you

01:56:24,680 --> 01:56:29,150
need to go in and actually learn a

01:56:27,230 --> 01:56:31,880
handful of these if you really want to

01:56:29,150 --> 01:56:33,890
like master kubernetes and that's where

01:56:31,880 --> 01:56:36,440
things like ingress and secret

01:56:33,890 --> 01:56:38,150
management and some of the other cool

01:56:36,440 --> 01:56:40,580
features of kubernetes come into play

01:56:38,150 --> 01:56:42,470
and there's actually a link a few slides

01:56:40,580 --> 01:56:44,600
down in my slides that take you to the

01:56:42,470 --> 01:56:46,220
API documentation that calls out all of

01:56:44,600 --> 01:56:48,320
the cool different objects there are in

01:56:46,220 --> 01:56:51,190
kubernetes if anybody wants to see one

01:56:48,320 --> 01:56:56,090
I'm happy to demo one here live as well

01:56:51,190 --> 01:56:58,100
so anyway let's try to get a web service

01:56:56,090 --> 01:57:00,800
up and running in kubernetes and

01:56:58,100 --> 01:57:01,940
actually send an HTTP request to that

01:57:00,800 --> 01:57:04,220
web service

01:57:01,940 --> 01:57:06,800
and get some data back and we can do all

01:57:04,220 --> 01:57:09,020
of that pretty quickly now that we have

01:57:06,800 --> 01:57:10,940
the primitives in place to push a

01:57:09,020 --> 01:57:15,140
container we have the container registry

01:57:10,940 --> 01:57:17,870
set up and I can just rewrite over chris

01:57:15,140 --> 01:57:20,020
nova kubernetes app latest with this new

01:57:17,870 --> 01:57:22,670
program that I'm about to run for you

01:57:20,020 --> 01:57:24,320
right now and then all we have to do is

01:57:22,670 --> 01:57:26,660
just change the service type and we'll

01:57:24,320 --> 01:57:29,000
be able to resolve that so the last

01:57:26,660 --> 01:57:33,110
little demo we have here if you go back

01:57:29,000 --> 01:57:35,900
to the repo here in the last directory

01:57:33,110 --> 01:57:37,990
in Web Services you see we have this

01:57:35,900 --> 01:57:40,550
directory called app and this is a

01:57:37,990 --> 01:57:43,760
prebuilt go program that I wrote

01:57:40,550 --> 01:57:47,720
beforehand that basically is a simple

01:57:43,760 --> 01:57:49,010
HTTP web server so if you come in and

01:57:47,720 --> 01:57:50,540
you actually look at what's going on in

01:57:49,010 --> 01:57:52,130
the go program it's okay if you don't

01:57:50,540 --> 01:57:54,530
right go it's not the end of the world

01:57:52,130 --> 01:57:57,860
all you need to know is it's listening

01:57:54,530 --> 01:58:01,010
on route the the root directory here and

01:57:57,860 --> 01:58:03,050
it's going to echo out Alpine trad is

01:58:01,010 --> 01:58:06,770
the best sport in the world if you send

01:58:03,050 --> 01:58:10,070
an HTTP GET request to route and that's

01:58:06,770 --> 01:58:13,640
listening on port 8080 so in order for

01:58:10,070 --> 01:58:15,980
me to build that I go back into the repo

01:58:13,640 --> 01:58:19,010
that I have checked out here hep do

01:58:15,980 --> 01:58:21,700
kubernetes workshop and then I'm gonna

01:58:19,010 --> 01:58:25,580
go into this last directory web services

01:58:21,700 --> 01:58:30,980
go into app and using the make file I'm

01:58:25,580 --> 01:58:32,450
gonna do make container push so you can

01:58:30,980 --> 01:58:35,840
see how quickly this is actually going

01:58:32,450 --> 01:58:37,790
to go in an update so the mick file in

01:58:35,840 --> 01:58:41,030
this example is basically serving as my

01:58:37,790 --> 01:58:42,770
kubernetes CI CD deployment tool I

01:58:41,030 --> 01:58:44,960
didn't have to type a docker build

01:58:42,770 --> 01:58:46,670
because I hid my hid all that away in

01:58:44,960 --> 01:58:49,010
the make file and I didn't have to hide

01:58:46,670 --> 01:58:50,870
to docker push because I also hid that

01:58:49,010 --> 01:58:52,670
away in the make file and there's a lot

01:58:50,870 --> 01:58:55,100
of tools out there that makes this

01:58:52,670 --> 01:58:56,900
experience richer there's a tool called

01:58:55,100 --> 01:58:59,510
draft from Microsoft that will actually

01:58:56,900 --> 01:59:01,820
watch your directory and as you make

01:58:59,510 --> 01:59:03,710
changes and you save the file it will

01:59:01,820 --> 01:59:05,540
rebuild the container and re push it

01:59:03,710 --> 01:59:07,280
kind of behind the scenes so you're

01:59:05,540 --> 01:59:10,400
always getting this this real-time

01:59:07,280 --> 01:59:13,340
container push so it's not quite as as

01:59:10,400 --> 01:59:14,870
involved as it once was once you kind of

01:59:13,340 --> 01:59:15,610
get it right remember we talked about

01:59:14,870 --> 01:59:17,260
technical in

01:59:15,610 --> 01:59:18,520
investment an hour talking about

01:59:17,260 --> 01:59:20,260
containers and then I just did

01:59:18,520 --> 01:59:22,270
everything in like a second here so

01:59:20,260 --> 01:59:25,090
that's pretty exciting so now that that

01:59:22,270 --> 01:59:27,909
container is pushed we can actually go

01:59:25,090 --> 01:59:28,510
and we can re start the pods in

01:59:27,909 --> 01:59:31,000
kubernetes

01:59:28,510 --> 01:59:35,080
and it should pull this new container

01:59:31,000 --> 01:59:37,179
image that we just pushed down and how

01:59:35,080 --> 01:59:41,530
we how are we gonna restart the pods in

01:59:37,179 --> 01:59:45,909
kubernetes any idea queue Bechtel then

01:59:41,530 --> 01:59:50,290
what we're gonna delete them just like

01:59:45,909 --> 01:59:52,600
we did a moment ago okay so my

01:59:50,290 --> 01:59:55,210
kubernetes cluster is like actually like

01:59:52,600 --> 01:59:58,449
kind of overloaded right now so let me

01:59:55,210 --> 02:00:00,070
scale these 1,000 applications back down

01:59:58,449 --> 02:00:03,340
just cuz I'm like about to break my

02:00:00,070 --> 02:00:07,570
cluster so the shorthand way of doing

02:00:03,340 --> 02:00:09,639
that is queue Bechtel scale deploy Bob -

02:00:07,570 --> 02:00:13,210
- replica is equal to let's just do

02:00:09,639 --> 02:00:15,880
replica is equal to 2 and the kubernetes

02:00:13,210 --> 02:00:18,909
layer of software that's running on my

02:00:15,880 --> 02:00:20,560
cluster in amazon is now busy deleting

02:00:18,909 --> 02:00:23,170
all of these containers he was just

02:00:20,560 --> 02:00:26,670
trying to start in the background and so

02:00:23,170 --> 02:00:29,350
if I do a queue Bechdel get pods again

02:00:26,670 --> 02:00:33,340
you can see as soon as that wants to

02:00:29,350 --> 02:00:35,800
respond somewhere up in here of this

02:00:33,340 --> 02:00:38,679
1000 that I just created we should be

02:00:35,800 --> 02:00:39,820
terminating it must be mixed in there

02:00:38,679 --> 02:00:41,730
right now but it should start

02:00:39,820 --> 02:00:44,080
terminating those pods pretty quickly

02:00:41,730 --> 02:00:45,969
and the ones that are marked pending are

02:00:44,080 --> 02:00:47,889
no longer going to be pending so it's

02:00:45,969 --> 02:00:50,350
just busy reconciling that state right

02:00:47,889 --> 02:00:52,719
now and actually I'm gonna just go ahead

02:00:50,350 --> 02:00:54,130
and set replicas equal to 0 and then

02:00:52,719 --> 02:00:56,500
that's a good example of how to

02:00:54,130 --> 02:00:59,530
decommission your app to answer that

02:00:56,500 --> 02:01:01,570
question from earlier and then of course

02:00:59,530 --> 02:01:04,960
if I wanted to delete the deployment

02:01:01,570 --> 02:01:06,670
entirely I could do that as well

02:01:04,960 --> 02:01:10,510
so we're waiting for that to scale down

02:01:06,670 --> 02:01:12,000
um does anybody have any questions so

02:01:10,510 --> 02:01:15,489
far

02:01:12,000 --> 02:01:18,150
I'm moving pretty fast here no questions

02:01:15,489 --> 02:01:18,150
yes question

02:01:18,489 --> 02:01:23,989
what happens if you scale beyond that

02:01:21,050 --> 02:01:27,020
capacity of the VM excellent question

02:01:23,989 --> 02:01:30,050
so this is where tools like the cluster

02:01:27,020 --> 02:01:31,580
API would would come in and give you

02:01:30,050 --> 02:01:33,590
some sort of promise that would say like

02:01:31,580 --> 02:01:35,420
we would be able to detect that and then

02:01:33,590 --> 02:01:37,280
potentially create another virtual

02:01:35,420 --> 02:01:38,090
machine for you that totally doesn't

02:01:37,280 --> 02:01:39,860
exist yet

02:01:38,090 --> 02:01:42,620
so right now it's up to you and your

02:01:39,860 --> 02:01:45,560
team to have some sort of awareness of

02:01:42,620 --> 02:01:48,140
your current workload on your cluster I

02:01:45,560 --> 02:01:51,020
think there is this command queue

02:01:48,140 --> 02:01:55,580
Bechdel top and you can do queue bechtel

02:01:51,020 --> 02:02:00,860
top node oh I might have already broken

02:01:55,580 --> 02:02:02,300
my cluster nope they're terminating but

02:02:00,860 --> 02:02:03,800
the top command should give you some aid

02:02:02,300 --> 02:02:06,920
information about where your node

02:02:03,800 --> 02:02:09,200
currently is it's really hard to put a

02:02:06,920 --> 02:02:12,260
cluster into deadlock so to speak where

02:02:09,200 --> 02:02:14,420
you've scheduled the capacity of the

02:02:12,260 --> 02:02:18,080
cluster because the kubernetes layer of

02:02:14,420 --> 02:02:20,570
software is already running right so

02:02:18,080 --> 02:02:23,390
I've done it before it's pretty hard

02:02:20,570 --> 02:02:25,730
you basically have to get a cluster

02:02:23,390 --> 02:02:27,080
pretty much at capacity and then kill

02:02:25,730 --> 02:02:28,640
some of the core components of

02:02:27,080 --> 02:02:31,940
kubernetes which are also running in

02:02:28,640 --> 02:02:33,890
containers and then the scheduler would

02:02:31,940 --> 02:02:35,420
try to reschedule your application

02:02:33,890 --> 02:02:37,880
before it tried to reschedule those

02:02:35,420 --> 02:02:41,180
other ones and officially render that

02:02:37,880 --> 02:02:46,750
node unusable it is possible but not

02:02:41,180 --> 02:02:46,750
very common any other questions

02:02:48,040 --> 02:03:00,950
the deploy just you want me to type that

02:02:55,390 --> 02:03:03,820
okay you want me to get it or do you

02:03:00,950 --> 02:03:03,820
want to see the Hamel again

02:03:09,550 --> 02:03:15,730
yep and that's what you see here desired

02:03:12,430 --> 02:03:17,890
current up-to-date available another

02:03:15,730 --> 02:03:21,600
interesting part of kubernetes is

02:03:17,890 --> 02:03:24,640
there's actually an object called node

02:03:21,600 --> 02:03:27,040
or nodes rather these represent the

02:03:24,640 --> 02:03:29,110
virtual machines themselves right so you

02:03:27,040 --> 02:03:31,540
can see here these are both in status of

02:03:29,110 --> 02:03:33,490
ready one of which is in the master role

02:03:31,540 --> 02:03:34,630
and the other one is in no role which

02:03:33,490 --> 02:03:39,570
basically means it's working as a

02:03:34,630 --> 02:03:41,620
workhorse because we only have one node

02:03:39,570 --> 02:03:43,030
kubernetes is only going to distribute

02:03:41,620 --> 02:03:45,760
our load across that one virtual machine

02:03:43,030 --> 02:03:47,380
but in theory we could have as many of

02:03:45,760 --> 02:03:49,360
these as our datacenter allowed and we

02:03:47,380 --> 02:03:51,610
would be able to distribute our load

02:03:49,360 --> 02:03:53,830
horizontally across all of them so you

02:03:51,610 --> 02:03:55,720
can also get a status of your your node

02:03:53,830 --> 02:03:59,410
infrastructure through the node object

02:03:55,720 --> 02:04:04,750
as well so anyway if we finally do a

02:03:59,410 --> 02:04:07,270
queue Bechdel get pods no resources are

02:04:04,750 --> 02:04:09,190
found we can repeat this last scale

02:04:07,270 --> 02:04:15,520
command and we'll do replicas equal to

02:04:09,190 --> 02:04:18,070
two and we can do a queue Bechtel are

02:04:15,520 --> 02:04:20,470
all this duque for short get pods and

02:04:18,070 --> 02:04:22,720
proof we're now back to running two

02:04:20,470 --> 02:04:24,190
containers except for this time instead

02:04:22,720 --> 02:04:26,230
of running the Python container we

02:04:24,190 --> 02:04:28,630
looked at earlier I'm now running this

02:04:26,230 --> 02:04:32,350
go program that I just built and pushed

02:04:28,630 --> 02:04:35,530
up to docker hub a moment ago so in our

02:04:32,350 --> 02:04:37,480
program if we look at it you can see

02:04:35,530 --> 02:04:40,180
that it echoes out this line here that

02:04:37,480 --> 02:04:42,280
says serving dot dot dot and then it

02:04:40,180 --> 02:04:44,560
starts the server so we should be able

02:04:42,280 --> 02:04:45,640
to actually get our logs this time

02:04:44,560 --> 02:04:48,070
because we're not going to have that

02:04:45,640 --> 02:04:51,850
same Python weird thing going on with

02:04:48,070 --> 02:04:53,470
standard out bicubic dialogues the name

02:04:51,850 --> 02:04:56,260
of the pod and then we'll do minus F

02:04:53,470 --> 02:04:59,080
again and you can now of course see that

02:04:56,260 --> 02:05:03,130
our logs are working as expected and we

02:04:59,080 --> 02:05:06,820
have serving dot dot dot so let's try to

02:05:03,130 --> 02:05:08,830
hit this API endpoint so we're going to

02:05:06,820 --> 02:05:10,420
edit the service remember the service is

02:05:08,830 --> 02:05:12,850
sort of the network layer and we map a

02:05:10,420 --> 02:05:15,460
service to a deployment which

02:05:12,850 --> 02:05:16,870
effectively Maps it to a pod so in order

02:05:15,460 --> 02:05:19,720
to edit the service we're going to do

02:05:16,870 --> 02:05:22,250
queue bechtel edit service I think it's

02:05:19,720 --> 02:05:26,369
just called Bob

02:05:22,250 --> 02:05:29,880
what is the name of this service so with

02:05:26,369 --> 02:05:32,280
Q Bechtel you see how I just typed SVC

02:05:29,880 --> 02:05:34,409
here all of the the resources have a

02:05:32,280 --> 02:05:37,860
shorthand so this is actually a valid

02:05:34,409 --> 02:05:41,699
command here k get SVC is short for q

02:05:37,860 --> 02:05:43,139
Bechdel get services so k get SVC oh

02:05:41,699 --> 02:05:45,090
it's because I haven't done the expose

02:05:43,139 --> 02:05:48,269
yet so let's let's do this expose

02:05:45,090 --> 02:05:51,300
command that we talked about earlier so

02:05:48,269 --> 02:05:53,579
we're gonna do K expose the name of our

02:05:51,300 --> 02:05:55,800
deployment which is Bob let me make sure

02:05:53,579 --> 02:05:57,480
I get my this is the command we're

02:05:55,800 --> 02:06:05,150
running here and then we're gonna say

02:05:57,480 --> 02:06:09,659
port 8080 and target port 8080 - - port

02:06:05,150 --> 02:06:11,960
8080 - - target I think it's target -

02:06:09,659 --> 02:06:17,219
port let's make sure that's right though

02:06:11,960 --> 02:06:18,630
yes it is target - port 8080 so you can

02:06:17,219 --> 02:06:20,849
see how already we're getting

02:06:18,630 --> 02:06:22,110
interesting mappings with our different

02:06:20,849 --> 02:06:24,239
ports that our application could be

02:06:22,110 --> 02:06:26,429
listening on and it's a lot to keep

02:06:24,239 --> 02:06:27,900
track of which is why I having some sort

02:06:26,429 --> 02:06:29,849
of deployment management tool like

02:06:27,900 --> 02:06:33,570
Helmer case on it simplifies this whole

02:06:29,849 --> 02:06:35,969
thing that I'm doing here no REO Kay

02:06:33,570 --> 02:06:38,219
expose you have to tell it what we want

02:06:35,969 --> 02:06:41,219
to expose which of course is a

02:06:38,219 --> 02:06:44,309
deployment so now if we get our services

02:06:41,219 --> 02:06:46,619
we should see we now have two services

02:06:44,309 --> 02:06:50,190
the main one for kubernetes and we have

02:06:46,619 --> 02:06:52,440
this other one here called Bob so I

02:06:50,190 --> 02:06:54,210
actually want to change something in the

02:06:52,440 --> 02:06:55,590
bob service and so how we're gonna

02:06:54,210 --> 02:06:59,489
change that is we're going to do the

02:06:55,590 --> 02:07:01,320
edit command again so Kay edit the type

02:06:59,489 --> 02:07:03,449
of our resource which is service and

02:07:01,320 --> 02:07:06,809
then the name of our resource which is

02:07:03,449 --> 02:07:10,019
Bob that's gonna pull it up in our text

02:07:06,809 --> 02:07:12,840
editor of choice and if I scroll down

02:07:10,019 --> 02:07:14,760
here to the bottom this is actually a

02:07:12,840 --> 02:07:17,190
declarative in nature and this is one of

02:07:14,760 --> 02:07:19,230
the big value-adds of kubernetes is just

02:07:17,190 --> 02:07:21,960
by changing the configuration here and

02:07:19,230 --> 02:07:24,599
saving this we're then gonna resend this

02:07:21,960 --> 02:07:26,039
back up to the kubernetes api server the

02:07:24,599 --> 02:07:28,860
api server is gonna stick this

02:07:26,039 --> 02:07:30,510
information in at CD those controllers

02:07:28,860 --> 02:07:32,730
that we talked member the robot arm from

02:07:30,510 --> 02:07:34,469
way long ago those controllers are

02:07:32,730 --> 02:07:37,410
actually going to read all of this

02:07:34,469 --> 02:07:39,780
and then it's gonna say oh I have not

02:07:37,410 --> 02:07:41,250
configured this service correctly I

02:07:39,780 --> 02:07:44,400
actually need to go and make this

02:07:41,250 --> 02:07:47,520
adjustment so changing the type from

02:07:44,400 --> 02:07:49,110
cluster IP to load balancer this is

02:07:47,520 --> 02:07:53,430
where things get exciting

02:07:49,110 --> 02:07:56,520
and we still want port 8080 and port

02:07:53,430 --> 02:07:59,400
8080 here is going to actually tell

02:07:56,520 --> 02:08:01,860
kubernetes to go and create an e lb load

02:07:59,400 --> 02:08:03,510
balancer in Amazon for us and this is

02:08:01,860 --> 02:08:06,570
for the first time we're actually

02:08:03,510 --> 02:08:08,850
watching a layer of software mutate

02:08:06,570 --> 02:08:10,890
underlying infrastructure based on some

02:08:08,850 --> 02:08:12,570
declarative model which what just

02:08:10,890 --> 02:08:15,030
happened is one of the huge value-adds

02:08:12,570 --> 02:08:17,010
of kubernetes is you don't really have

02:08:15,030 --> 02:08:19,560
to care how things are solved you just

02:08:17,010 --> 02:08:22,550
have to care that they do get solved and

02:08:19,560 --> 02:08:26,060
so now if I come into my Amazon console

02:08:22,550 --> 02:08:28,980
and I come down here to load balancers

02:08:26,060 --> 02:08:31,830
you can see that we actually have

02:08:28,980 --> 02:08:33,870
magically created one load balancer and

02:08:31,830 --> 02:08:35,670
if you look here at instances and if

02:08:33,870 --> 02:08:38,430
you've ever looked at a kubernetes load

02:08:35,670 --> 02:08:41,480
balancer before you'll you'll be able to

02:08:38,430 --> 02:08:44,130
come in and see that it is in fact

02:08:41,480 --> 02:08:47,100
listening on port 8080 and it's pointed

02:08:44,130 --> 02:08:49,290
to the correct node and we're just

02:08:47,100 --> 02:08:52,530
waiting for it to come up right now

02:08:49,290 --> 02:08:56,880
so yeah it's listening here on port 8080

02:08:52,530 --> 02:08:59,430
which is exciting so how we get the

02:08:56,880 --> 02:09:02,760
public resolvable URL for this web

02:08:59,430 --> 02:09:05,100
service is we do a queue bechtel get

02:09:02,760 --> 02:09:09,420
service

02:09:05,100 --> 02:09:12,060
I think it's Oh wide so the minus o

02:09:09,420 --> 02:09:15,360
stands for output and then you can do

02:09:12,060 --> 02:09:17,340
output JSON output Y amyl in this case

02:09:15,360 --> 02:09:19,080
I'm gonna do output wide and that's just

02:09:17,340 --> 02:09:21,510
gonna make sure it echos everything out

02:09:19,080 --> 02:09:24,449
to the screen the reason I do that is

02:09:21,510 --> 02:09:26,550
because I know that this string here was

02:09:24,449 --> 02:09:31,230
going to be pretty long to get the

02:09:26,550 --> 02:09:33,840
actual load balancer a name out of the

02:09:31,230 --> 02:09:37,710
the output here and if I actually like

02:09:33,840 --> 02:09:39,239
zoomed out like shrunk this and we could

02:09:37,710 --> 02:09:40,980
like to scale my terminal window here

02:09:39,239 --> 02:09:42,600
and like it would actually be pretty if

02:09:40,980 --> 02:09:47,730
I had a wide enough screen but I just

02:09:42,600 --> 02:09:50,880
don't so anyway this string

02:09:47,730 --> 02:09:53,520
is actually going to match this string

02:09:50,880 --> 02:09:57,390
here and that's just a URL that you can

02:09:53,520 --> 02:10:00,600
go and type in and if all works you

02:09:57,390 --> 02:10:06,300
should be able to go to that end point

02:10:00,600 --> 02:10:11,520
sorry oh thank you port 8080 on port

02:10:06,300 --> 02:10:14,340
8080 and proof we have created a web

02:10:11,520 --> 02:10:17,820
service running in kubernetes in Amazon

02:10:14,340 --> 02:10:20,100
that is now publicly accessible so from

02:10:17,820 --> 02:10:22,410
here we could do a lot of cool things we

02:10:20,100 --> 02:10:25,830
could we could go and we could create a

02:10:22,410 --> 02:10:29,600
DNS entry maybe in route 53 let's do

02:10:25,830 --> 02:10:29,600
that right now actually um

02:10:31,010 --> 02:10:36,810
this is my work account so I don't know

02:10:33,330 --> 02:10:39,780
if I have yeah I have TGI Kate's calm we

02:10:36,810 --> 02:10:45,020
could go to TGI Kate's calm and we could

02:10:39,780 --> 02:10:49,410
just actually put in where is it at

02:10:45,020 --> 02:10:52,170
create record set we'll just do a basic

02:10:49,410 --> 02:10:54,720
cname and we want it to go to that you

02:10:52,170 --> 02:10:58,130
record so anyway while we're waiting for

02:10:54,720 --> 02:10:58,130
that to propagate this OH

02:10:58,890 --> 02:11:03,239
we'll go to app dot TJ Kate's calm thank

02:11:01,140 --> 02:11:06,390
you okay so we're waiting for that to

02:11:03,239 --> 02:11:07,470
propagate you can just begin to see all

02:11:06,390 --> 02:11:10,650
the different ways you could write

02:11:07,470 --> 02:11:13,170
software stick it into container run it

02:11:10,650 --> 02:11:14,640
in kubernetes and then you can using

02:11:13,170 --> 02:11:17,010
kubernetes primitives you could actually

02:11:14,640 --> 02:11:19,230
design a system for you and your team

02:11:17,010 --> 02:11:20,820
that makes sense so the whole point is

02:11:19,230 --> 02:11:23,970
that we have all of these standardized

02:11:20,820 --> 02:11:27,300
objects like services like deployments

02:11:23,970 --> 02:11:29,550
like pods that define the shape of what

02:11:27,300 --> 02:11:31,590
action we want to take in the cloud and

02:11:29,550 --> 02:11:33,120
then kubernetes is just the software

02:11:31,590 --> 02:11:37,110
that just goes and just makes those

02:11:33,120 --> 02:11:38,489
changes happen for us so i chose to

02:11:37,110 --> 02:11:40,110
build a web service because i feel like

02:11:38,489 --> 02:11:41,940
most of us can resonate with a web

02:11:40,110 --> 02:11:44,340
service but if you and your team had a

02:11:41,940 --> 02:11:46,980
data pipeline that was consisting of

02:11:44,340 --> 02:11:50,250
multiple applications you would probably

02:11:46,980 --> 02:11:52,830
have multiple deployments to give you an

02:11:50,250 --> 02:11:54,840
example of all the types of resources

02:11:52,830 --> 02:11:57,930
that are actually running to make

02:11:54,840 --> 02:12:01,170
kubernetes happy I can run this kdump

02:11:57,930 --> 02:12:04,500
command that I created earlier and you

02:12:01,170 --> 02:12:06,840
actually be able to see there is a ton

02:12:04,500 --> 02:12:09,000
happening behind the scenes here in

02:12:06,840 --> 02:12:11,160
kubernetes that actually brings our

02:12:09,000 --> 02:12:15,330
cluster to life and makes all of this

02:12:11,160 --> 02:12:18,630
stuff work to kind of go over it without

02:12:15,330 --> 02:12:20,310
going into a ton of detail up here at

02:12:18,630 --> 02:12:24,060
the top we have all of these pods

02:12:20,310 --> 02:12:26,280
running here our bod pubs Bob pods that

02:12:24,060 --> 02:12:28,230
we created earlier we also have this

02:12:26,280 --> 02:12:30,690
tool called calico which solves

02:12:28,230 --> 02:12:32,760
networking concerns for us we have the

02:12:30,690 --> 02:12:34,620
ED CD storage remember we talked about

02:12:32,760 --> 02:12:37,260
it needs a data server to store all this

02:12:34,620 --> 02:12:38,969
it has the kubernetes api server itself

02:12:37,260 --> 02:12:41,880
is running in a container inside of

02:12:38,969 --> 02:12:44,310
kubernetes and you and your team could

02:12:41,880 --> 02:12:46,320
build out a system that would have a

02:12:44,310 --> 02:12:48,179
completely different output than this

02:12:46,320 --> 02:12:50,370
would on top of all of these other

02:12:48,179 --> 02:12:54,570
existing tools and that's the big value

02:12:50,370 --> 02:12:57,300
of kubernetes so we have 15 minutes left

02:12:54,570 --> 02:12:59,910
I want to make sure I show folks stuff

02:12:57,300 --> 02:13:02,310
that's meaningful to them so we have an

02:12:59,910 --> 02:13:04,590
application we have a container registry

02:13:02,310 --> 02:13:06,840
we have kubernetes up and running who

02:13:04,590 --> 02:13:08,130
all wants to see something anything

02:13:06,840 --> 02:13:11,820
inside of kubernetes that they have

02:13:08,130 --> 02:13:16,650
questions about ok what's up I'll get to

02:13:11,820 --> 02:13:19,400
you in a second Kubek dole get serviced

02:13:16,650 --> 02:13:19,400
yep

02:13:31,640 --> 02:13:34,640
yes

02:13:38,980 --> 02:13:44,800
okay so all he pointed out was now we

02:13:42,100 --> 02:13:46,690
have the external IP address column

02:13:44,800 --> 02:13:47,920
which was not there before and the

02:13:46,690 --> 02:13:55,239
reason we have that is because we

02:13:47,920 --> 02:13:58,020
changed the type to load balancer I can

02:13:55,239 --> 02:13:58,020
barely hear you I'm sorry

02:14:03,260 --> 02:14:10,699
correct he said with cluster IP I would

02:14:08,269 --> 02:14:12,409
only be able to access my service inside

02:14:10,699 --> 02:14:13,730
of the kubernetes cluster that is

02:14:12,409 --> 02:14:15,710
correct so that would be if we had

02:14:13,730 --> 02:14:18,050
another pod or another deployment

02:14:15,710 --> 02:14:20,480
running in kubernetes we would be able

02:14:18,050 --> 02:14:22,369
to access that but we wouldn't be able

02:14:20,480 --> 02:14:26,269
to gain access to it publicly like we

02:14:22,369 --> 02:14:27,769
just did here externally yes and I want

02:14:26,269 --> 02:14:30,340
to talk about namespaces in a second so

02:14:27,769 --> 02:14:30,340
we're gonna get there I promise

02:14:34,030 --> 02:14:39,559
excellent question

02:14:36,340 --> 02:14:41,150
the question was if you scale a web

02:14:39,559 --> 02:14:46,400
server and then go to the website what

02:14:41,150 --> 02:14:48,199
happens so let's do that so remember our

02:14:46,400 --> 02:14:50,239
scale command earlier replicas equal to

02:14:48,199 --> 02:14:52,639
two I'm gonna do it let's do 50

02:14:50,239 --> 02:14:56,389
we'll keep it kind of small so we have

02:14:52,639 --> 02:14:58,550
replicas equal to 50 because we have one

02:14:56,389 --> 02:15:01,420
node in kubernetes the load balancer the

02:14:58,550 --> 02:15:03,710
ELB is only pointed to that one node

02:15:01,420 --> 02:15:05,599
otherwise there's a layer of software

02:15:03,710 --> 02:15:07,159
called the cloud controller that reads

02:15:05,599 --> 02:15:08,869
information from the kubernetes

02:15:07,159 --> 02:15:10,820
scheduler that would then make

02:15:08,869 --> 02:15:12,980
adjustments and point the load balancer

02:15:10,820 --> 02:15:15,500
across whichever nodes we're actually

02:15:12,980 --> 02:15:18,110
actually running those containers so

02:15:15,500 --> 02:15:23,840
when you go and you refresh the the page

02:15:18,110 --> 02:15:26,900
here you're actually probably getting a

02:15:23,840 --> 02:15:29,000
different container each time there's a

02:15:26,900 --> 02:15:31,639
tool that we have at Hebdo called hefty

02:15:29,000 --> 02:15:34,400
o gimble that if you use this this more

02:15:31,639 --> 02:15:36,469
advanced sort of service object called

02:15:34,400 --> 02:15:38,989
ingress it allows you to do cool things

02:15:36,469 --> 02:15:42,380
like say I want 50% of traffic here and

02:15:38,989 --> 02:15:44,449
50% of traffic there 20% here 80% there

02:15:42,380 --> 02:15:47,300
it allows you to even spread it across

02:15:44,449 --> 02:15:49,010
multiple kubernetes clusters as well but

02:15:47,300 --> 02:15:51,019
right now on this basic example it just

02:15:49,010 --> 02:15:52,670
does everything basic I think it's

02:15:51,019 --> 02:15:58,059
round-robin styled

02:15:52,670 --> 02:15:58,059
load balancing other question yes you

02:15:59,570 --> 02:16:05,730
yes ingress and egress controllers I I

02:16:04,290 --> 02:16:07,050
don't know if we have enough time to do

02:16:05,730 --> 02:16:09,870
one but if you want I can I can do a

02:16:07,050 --> 02:16:11,790
demo for you afterwards but the basic

02:16:09,870 --> 02:16:14,130
thing you need to know about ingress and

02:16:11,790 --> 02:16:17,340
egress controllers are and I have a

02:16:14,130 --> 02:16:18,750
slide on this I guess I have like

02:16:17,340 --> 02:16:20,280
closing slides here I wanted to go

02:16:18,750 --> 02:16:29,220
through we can do those in the next few

02:16:20,280 --> 02:16:32,000
minutes so ingress takes takes it a step

02:16:29,220 --> 02:16:35,400
further so the whole point of ingress is

02:16:32,000 --> 02:16:37,230
its able to map arbitrary in points like

02:16:35,400 --> 02:16:39,510
here we have slash this which would be

02:16:37,230 --> 02:16:42,270
that that a name we pasted into the URL

02:16:39,510 --> 02:16:44,280
and right now we're hitting route if we

02:16:42,270 --> 02:16:46,710
wanted to slash this we can map it to

02:16:44,280 --> 02:16:49,679
some arbitrary deployment but we can

02:16:46,710 --> 02:16:51,929
also optionally map slash that to a

02:16:49,679 --> 02:16:54,059
completely other deployment so ingress

02:16:51,929 --> 02:16:55,740
gives us this ability to have like maybe

02:16:54,059 --> 02:16:58,080
we have one container that all it does

02:16:55,740 --> 02:17:00,360
is it solves logging into our service

02:16:58,080 --> 02:17:02,219
right and then that's on the slash off

02:17:00,360 --> 02:17:03,870
endpoint and then after you're

02:17:02,219 --> 02:17:06,059
authenticated and you have a token if

02:17:03,870 --> 02:17:07,349
you hit another directory it might

02:17:06,059 --> 02:17:09,990
actually run a completely different

02:17:07,349 --> 02:17:12,030
piece of software and ingress allows you

02:17:09,990 --> 02:17:13,559
to make logical mappings for your

02:17:12,030 --> 02:17:15,510
applications so that you can really

02:17:13,559 --> 02:17:17,429
start to pull your application apart

02:17:15,510 --> 02:17:19,679
into this micro service e style

02:17:17,429 --> 02:17:22,710
architecture as far as an ingress

02:17:19,679 --> 02:17:25,380
controller goes remember the robot arm

02:17:22,710 --> 02:17:27,990
from earlier an ingress controller it

02:17:25,380 --> 02:17:30,030
takes a tool like Engine X or we there's

02:17:27,990 --> 02:17:31,410
one called we have a tool called contour

02:17:30,030 --> 02:17:33,660
that's built on envoy that has some

02:17:31,410 --> 02:17:36,210
really cool network key things and it

02:17:33,660 --> 02:17:38,520
reads whatever you declare in kubernetes

02:17:36,210 --> 02:17:41,340
and then goes and actually makes that so

02:17:38,520 --> 02:17:43,380
so remember we we were able to edit the

02:17:41,340 --> 02:17:45,270
service and there was some controller

02:17:43,380 --> 02:17:47,520
that actually went and made the change

02:17:45,270 --> 02:17:50,280
in Amazon after we edited the service

02:17:47,520 --> 02:17:51,360
the same with ingress in order for

02:17:50,280 --> 02:17:54,000
ingress to work you would need an

02:17:51,360 --> 02:17:55,800
ingress controller kubernetes by design

02:17:54,000 --> 02:17:57,929
just doesn't ship with an ingress

02:17:55,800 --> 02:18:01,020
controller whereas it does ship with

02:17:57,929 --> 02:18:03,750
controllers for services in pods and

02:18:01,020 --> 02:18:05,880
deployments and everything else a really

02:18:03,750 --> 02:18:08,790
simple ingress controller is the engine

02:18:05,880 --> 02:18:11,099
x1 and the kind of thing you need to

02:18:08,790 --> 02:18:12,960
know about it is once it since

02:18:11,099 --> 02:18:14,790
you can just edit ingress just like we

02:18:12,960 --> 02:18:16,050
did with the other primitives and the

02:18:14,790 --> 02:18:17,340
controller will actually go and

02:18:16,050 --> 02:18:18,990
reconcile that and you shouldn't really

02:18:17,340 --> 02:18:31,410
have to touch it after you install it

02:18:18,990 --> 02:18:34,860
once excellent question

02:18:31,410 --> 02:18:36,450
the question was if a pod has multiple

02:18:34,860 --> 02:18:38,670
containers does each container have an

02:18:36,450 --> 02:18:40,380
IP or does the pot have an IP so the pod

02:18:38,670 --> 02:18:41,880
will get a local IP address the

02:18:40,380 --> 02:18:45,809
containers can talk to each other on

02:18:41,880 --> 02:18:47,490
localhost so a lot of folks I'm gonna

02:18:45,809 --> 02:18:51,420
kind of digress here why we're on the

02:18:47,490 --> 02:18:53,099
topic a lot of folks have heard of this

02:18:51,420 --> 02:18:54,780
thing this new hotness called service

02:18:53,099 --> 02:18:57,450
mesh and all you need to know about

02:18:54,780 --> 02:19:00,030
service mesh is that it basically runs

02:18:57,450 --> 02:19:02,519
this pattern called a sidecar pattern

02:19:00,030 --> 02:19:05,760
which basically says I'm gonna run

02:19:02,519 --> 02:19:08,219
somebody else's pod next to my I'm sorry

02:19:05,760 --> 02:19:11,190
somebody else's container next to my

02:19:08,219 --> 02:19:14,790
container in the same pod and then that

02:19:11,190 --> 02:19:17,070
sidecar container is gonna handle things

02:19:14,790 --> 02:19:18,660
like giving us observability into the

02:19:17,070 --> 02:19:20,729
network maybe it'll handle things like

02:19:18,660 --> 02:19:22,469
authentication and that way my

02:19:20,729 --> 02:19:24,870
application only has to just hit

02:19:22,469 --> 02:19:25,590
localhost and it can just say hey a

02:19:24,870 --> 02:19:27,330
localhost

02:19:25,590 --> 02:19:29,250
I want a secret and this other container

02:19:27,330 --> 02:19:32,250
is responsible for actually returning a

02:19:29,250 --> 02:19:35,280
secret for them and that sidecar pattern

02:19:32,250 --> 02:19:36,510
creates what we call a service mesh and

02:19:35,280 --> 02:19:42,360
that's where we get into that whole

02:19:36,510 --> 02:19:43,979
hotness yes kubernetes namespace I

02:19:42,360 --> 02:19:47,280
really want to get into this this is a

02:19:43,979 --> 02:19:52,050
fundamental part of kubernetes it's

02:19:47,280 --> 02:19:54,440
pretty easy to grok I feel like I can do

02:19:52,050 --> 02:19:56,910
cube back to little get namespaces and

02:19:54,440 --> 02:19:58,680
you can see we have three we have

02:19:56,910 --> 02:20:01,200
default which is the one that we've been

02:19:58,680 --> 02:20:03,150
using this whole time implicitly you

02:20:01,200 --> 02:20:07,650
have cube public and you have cube

02:20:03,150 --> 02:20:11,250
system default is is like the default

02:20:07,650 --> 02:20:13,890
one and if I actually ran a cube Bechtel

02:20:11,250 --> 02:20:15,900
member we've done get pods and you can

02:20:13,890 --> 02:20:17,670
see that we have these what

02:20:15,900 --> 02:20:19,860
fifty-some-odd pods that have been

02:20:17,670 --> 02:20:23,439
running if I do cube Bechdel they'll get

02:20:19,860 --> 02:20:29,380
pods - - name

02:20:23,439 --> 02:20:31,510
space cubes system completely different

02:20:29,380 --> 02:20:32,859
output because these pods are running in

02:20:31,510 --> 02:20:34,989
a different namespace and all a

02:20:32,859 --> 02:20:37,869
namespace does is it allows you to

02:20:34,989 --> 02:20:40,989
logically separate various parts of you

02:20:37,869 --> 02:20:43,060
and your team's application it's an

02:20:40,989 --> 02:20:45,720
imaginary construct but it's a very

02:20:43,060 --> 02:20:48,609
powerful construct because by default

02:20:45,720 --> 02:20:50,350
pods running in one namespace don't have

02:20:48,609 --> 02:20:53,649
access to pods running in another

02:20:50,350 --> 02:20:55,930
namespace but you can optionally plug

02:20:53,649 --> 02:20:58,300
those two together so namespaces give

02:20:55,930 --> 02:21:00,880
you a way to segregate your application

02:20:58,300 --> 02:21:03,279
and draw boundaries around them which is

02:21:00,880 --> 02:21:05,859
another great segue into this concept

02:21:03,279 --> 02:21:09,550
called our Beck role-based access

02:21:05,859 --> 02:21:11,050
control and all our back does is it

02:21:09,550 --> 02:21:14,770
gives you it's another kubernetes

02:21:11,050 --> 02:21:16,180
primitive you could like you could edit

02:21:14,770 --> 02:21:18,010
it in the same way we've done a queue

02:21:16,180 --> 02:21:20,170
back to edit and Quebec to get with

02:21:18,010 --> 02:21:22,300
everything else and all it does is it

02:21:20,170 --> 02:21:24,459
allows you to have various users and

02:21:22,300 --> 02:21:26,920
roles and policies that can do certain

02:21:24,459 --> 02:21:29,649
things in your cluster the simplest way

02:21:26,920 --> 02:21:33,520
to wrap your brain around this is to say

02:21:29,649 --> 02:21:38,159
say like we had two namespaces here Q

02:21:33,520 --> 02:21:41,999
Bechtel create namespace accounting and

02:21:38,159 --> 02:21:45,100
you back to create namespace marketing

02:21:41,999 --> 02:21:46,720
so at my company the accountants have

02:21:45,100 --> 02:21:48,369
some software I need to run for them and

02:21:46,720 --> 02:21:50,499
the marketing folks also have some

02:21:48,369 --> 02:21:52,329
software I need to run for them but

02:21:50,499 --> 02:21:54,579
let's say that we have this new hybrid

02:21:52,329 --> 02:21:56,699
role where we have the new intern who's

02:21:54,579 --> 02:22:00,039
auditing both accounting and marketing

02:21:56,699 --> 02:22:01,989
we would give our new intern give him a

02:22:00,039 --> 02:22:03,489
name and our back policy that says you

02:22:01,989 --> 02:22:06,249
can access both accounting and marketing

02:22:03,489 --> 02:22:08,529
but we might only give access to the

02:22:06,249 --> 02:22:10,109
kubernetes cluster for accounting to the

02:22:08,529 --> 02:22:12,279
the folks in the accounting department

02:22:10,109 --> 02:22:14,170
and then they would only be able to

02:22:12,279 --> 02:22:17,199
create pods and deployments in their

02:22:14,170 --> 02:22:18,819
namespace namespaces just give you that

02:22:17,199 --> 02:22:21,609
logical boundary and allow you to

02:22:18,819 --> 02:22:23,439
separate things as an operator one of

02:22:21,609 --> 02:22:25,479
the reasons that we didn't really see

02:22:23,439 --> 02:22:27,579
namespaces until now is because by

02:22:25,479 --> 02:22:29,739
default everything just gets installed

02:22:27,579 --> 02:22:32,829
into the default namespace unless you

02:22:29,739 --> 02:22:35,430
say otherwise any other questions on

02:22:32,829 --> 02:22:35,430
namespaces

02:22:37,859 --> 02:22:43,240
okay we have five minutes let make sure

02:22:41,830 --> 02:22:44,740
this is valuable more questions I think

02:22:43,240 --> 02:22:47,550
that's what folks are getting the most

02:22:44,740 --> 02:22:47,550
value out of yeah

02:22:53,410 --> 02:22:56,950
so I'm gonna I think I heard your

02:22:55,601 --> 02:22:58,990
question but let me just play it back to

02:22:56,950 --> 02:23:01,240
you to make sure running multiple docker

02:22:58,990 --> 02:23:03,870
containers you would give access based

02:23:01,240 --> 02:23:03,870
on the namespace

02:23:13,189 --> 02:23:15,850
right

02:23:18,390 --> 02:23:23,160
so yeah that's a personal choice that

02:23:20,790 --> 02:23:25,439
you as an application architect would

02:23:23,160 --> 02:23:27,000
need to main make so the question was if

02:23:25,439 --> 02:23:28,109
you have different applications do you

02:23:27,000 --> 02:23:31,710
always want to run them in a different

02:23:28,109 --> 02:23:33,899
namespace if I would say the rule that I

02:23:31,710 --> 02:23:35,790
adhere to is if they are solving

02:23:33,899 --> 02:23:37,710
independent concerns like if there are

02:23:35,790 --> 02:23:39,000
two completely standalone applications

02:23:37,710 --> 02:23:41,040
that have nothing to do with each other

02:23:39,000 --> 02:23:42,569
it's a good practice to run them in a

02:23:41,040 --> 02:23:44,609
different namespace

02:23:42,569 --> 02:23:47,069
but in some cases you'll notice that

02:23:44,609 --> 02:23:49,020
like a single data pipeline is actually

02:23:47,069 --> 02:23:51,000
composed of you know twelve or thirteen

02:23:49,020 --> 02:23:53,580
smaller applications and this is the

02:23:51,000 --> 02:23:55,229
micro-service model we obviously want

02:23:53,580 --> 02:23:57,149
all of those smaller bits running in the

02:23:55,229 --> 02:23:58,890
same namespace so they can interact with

02:23:57,149 --> 02:24:02,300
each other and do what they need to do

02:23:58,890 --> 02:24:04,800
to build a full-fledged data pipeline

02:24:02,300 --> 02:24:06,450
and then of course there are objects in

02:24:04,800 --> 02:24:09,359
kubernetes like services like

02:24:06,450 --> 02:24:12,030
deployments like pods that all can be in

02:24:09,359 --> 02:24:14,399
different namespaces so we could do what

02:24:12,030 --> 02:24:16,530
we just did with getting pods in a

02:24:14,399 --> 02:24:16,740
different namespace with services and so

02:24:16,530 --> 02:24:25,250
on

02:24:16,740 --> 02:24:25,250
question here yes

02:24:44,910 --> 02:24:50,439
sure so the question was is our back a

02:24:48,700 --> 02:24:52,330
first-class citizen and kubernetes my

02:24:50,439 --> 02:24:54,310
answer was yes and the second one does

02:24:52,330 --> 02:24:56,890
our back get more granular than that and

02:24:54,310 --> 02:24:59,680
the answer is also yes when you defined

02:24:56,890 --> 02:25:02,350
an are back rule you can actually go in

02:24:59,680 --> 02:25:04,330
and define all of the different types of

02:25:02,350 --> 02:25:06,729
resources and you can say all the

02:25:04,330 --> 02:25:09,910
different actions that a certain person

02:25:06,729 --> 02:25:12,460
or a certain user or client could use a

02:25:09,910 --> 02:25:15,550
really great example is let's grant

02:25:12,460 --> 02:25:17,590
access to a namespace let's allow pods

02:25:15,550 --> 02:25:19,420
deployment services all of the the

02:25:17,590 --> 02:25:21,580
kubernetes resources that they need

02:25:19,420 --> 02:25:23,380
let's give it read-only let's say that

02:25:21,580 --> 02:25:24,850
they can list and they can get on those

02:25:23,380 --> 02:25:27,939
of those resources but we're not going

02:25:24,850 --> 02:25:30,250
to give them right or edit right so you

02:25:27,939 --> 02:25:32,560
can get more granular than just granting

02:25:30,250 --> 02:25:35,050
access to a full namespace and then

02:25:32,560 --> 02:25:36,729
there's a you know a good hour long hour

02:25:35,050 --> 02:25:38,560
back discussion that you know good we

02:25:36,729 --> 02:25:44,040
can go into at a different talk in a

02:25:38,560 --> 02:25:46,060
different time any other questions

02:25:44,040 --> 02:25:51,189
anybody want to see anything else I'm

02:25:46,060 --> 02:25:53,880
sorry question here yeah I can't hear

02:25:51,189 --> 02:25:53,880
you at all I'm sorry

02:25:58,649 --> 02:26:05,010
okay okay so the question was all this

02:26:03,329 --> 02:26:07,919
is such a great segue this is all for

02:26:05,010 --> 02:26:09,840
you Phil the question was if I was

02:26:07,919 --> 02:26:11,520
running in a data center and I think I

02:26:09,840 --> 02:26:13,289
heard wanted to set up some sort of

02:26:11,520 --> 02:26:15,779
network proxy how would I write a

02:26:13,289 --> 02:26:18,959
controller to do that so kubernetes has

02:26:15,779 --> 02:26:20,479
this really cool thing called CR DS a CR

02:26:18,959 --> 02:26:24,149
D is basically a build-your-own

02:26:20,479 --> 02:26:27,479
kubernetes object so I can do K get CR D

02:26:24,149 --> 02:26:29,970
and you can see my as soon as my cluster

02:26:27,479 --> 02:26:32,789
wants to respond no resources are found

02:26:29,970 --> 02:26:34,829
but you can optionally create a CRT to

02:26:32,789 --> 02:26:36,989
be any object shape you want if you can

02:26:34,829 --> 02:26:39,419
write a definition for this object in

02:26:36,989 --> 02:26:43,189
yellow or in go we can create a CR D for

02:26:39,419 --> 02:26:45,600
it and then we can optionally have a

02:26:43,189 --> 02:26:47,459
controller that would read that

02:26:45,600 --> 02:26:50,069
definition and actually enforce that

02:26:47,459 --> 02:26:52,649
state if you wanted to do something like

02:26:50,069 --> 02:26:55,470
create your a homegrown proxy service in

02:26:52,649 --> 02:26:57,209
a data center you might have a proxy CR

02:26:55,470 --> 02:26:59,970
D and then have a custom piece of

02:26:57,209 --> 02:27:01,829
software that is smart enough to read

02:26:59,970 --> 02:27:03,810
the definition that you would define in

02:27:01,829 --> 02:27:05,640
the the database and then actually go

02:27:03,810 --> 02:27:07,739
and reconcile that state you know by

02:27:05,640 --> 02:27:10,470
setting up whatever a proxy means to you

02:27:07,739 --> 02:27:14,189
and your team right the segue here is

02:27:10,470 --> 02:27:15,840
tomorrow afternoon my co maintainer over

02:27:14,189 --> 02:27:19,739
here fill with rock is giving a lovely

02:27:15,840 --> 02:27:21,840
presentation on cue Builder which is a

02:27:19,739 --> 02:27:24,840
framework that actually does what I just

02:27:21,840 --> 02:27:26,699
described it makes it super easy for you

02:27:24,840 --> 02:27:29,669
so if you want to learn about building

02:27:26,699 --> 02:27:31,470
custom controllers and kubernetes this

02:27:29,669 --> 02:27:33,390
will probably give you all you need to

02:27:31,470 --> 02:27:36,479
actually probably get started right away

02:27:33,390 --> 02:27:39,449
with cue builder and buildings here at

02:27:36,479 --> 02:27:40,260
ease and kubernetes we use it in the

02:27:39,449 --> 02:27:42,959
cluster API

02:27:40,260 --> 02:27:45,959
thanks to actually a PR from P what Rock

02:27:42,959 --> 02:27:47,539
over here and we're all very grateful

02:27:45,959 --> 02:27:50,489
that we're finally able to build it so

02:27:47,539 --> 02:27:52,979
custom resource definition and custom

02:27:50,489 --> 02:27:54,239
resources is the answer there and I

02:27:52,979 --> 02:27:55,409
think we're out of time so you're not

02:27:54,239 --> 02:27:56,999
going to offend me if you want to get up

02:27:55,409 --> 02:27:59,100
and leave I'm gonna keep you answering

02:27:56,999 --> 02:28:03,289
questions if folks have them but thank

02:27:59,100 --> 02:28:03,289
you all for coming it's been great

02:28:05,141 --> 02:28:08,141

YouTube URL: https://www.youtube.com/watch?v=nC6ahujMKzI


