Title: All Things Open 2018 - Phillip Wittrock, Google - Kubernetes: API Building Workshop
Publication date: 2018-12-05
Playlist: All Things Open 2018 Playlist
Description: 
	All Things Open 2018 - Phillip Wittrock, Google - Kubernetes: API Building Workshop
Captions: 
	00:00:02,899 --> 00:00:09,870
hey everyone just about to get started

00:00:07,710 --> 00:00:12,780
here if you are going to be attending

00:00:09,870 --> 00:00:15,240
the second part of the workshop at 3:00

00:00:12,780 --> 00:00:18,720
make sure you have your dev environment

00:00:15,240 --> 00:00:19,410
setup coming in if you plan on actually

00:00:18,720 --> 00:00:21,689
doing the work

00:00:19,410 --> 00:00:24,630
workshop it's perfectly okay to just

00:00:21,689 --> 00:00:27,090
watch me go through it I will do it but

00:00:24,630 --> 00:00:29,070
if you want to participate either follow

00:00:27,090 --> 00:00:33,600
the instructions here to set up your dev

00:00:29,070 --> 00:00:35,130
environment instances of dev

00:00:33,600 --> 00:00:38,550
environments that you can log in through

00:00:35,130 --> 00:00:40,800
a browser on and so if you want one of

00:00:38,550 --> 00:00:42,540
those and if you don't have one set up a

00:00:40,800 --> 00:00:44,760
by the end of this you probably want one

00:00:42,540 --> 00:00:47,460
of those go ahead and raise your hand

00:00:44,760 --> 00:00:51,899
and have some folks here who will pass

00:00:47,460 --> 00:00:54,989
out logins all right fantastic yeah just

00:00:51,899 --> 00:00:56,820
keep them raised we got plenty I know

00:00:54,989 --> 00:00:59,000
I'll ask that again at the end of the

00:00:56,820 --> 00:00:59,000
talk

00:01:04,470 --> 00:01:08,530
okay I was actually gonna ask some

00:01:07,180 --> 00:01:10,240
questions and have people raise their

00:01:08,530 --> 00:01:12,460
hands but that was kind of poorly

00:01:10,240 --> 00:01:16,810
thought out given that I have you

00:01:12,460 --> 00:01:18,700
raising your hands for slips so what I'm

00:01:16,810 --> 00:01:20,470
going to talk about today or I my name

00:01:18,700 --> 00:01:25,540
is Philip Arak I'm a software engineer

00:01:20,470 --> 00:01:29,650
at Google and I am a kubernetes owner so

00:01:25,540 --> 00:01:31,210
I help maintain the product I'm also a

00:01:29,650 --> 00:01:33,970
member of the kubernetes steering

00:01:31,210 --> 00:01:36,729
committee and I'm going to talk about

00:01:33,970 --> 00:01:38,800
today is how kubernetes api s are

00:01:36,729 --> 00:01:41,020
implemented and so I'm not going to talk

00:01:38,800 --> 00:01:44,050
about all the like kernel stuff and the

00:01:41,020 --> 00:01:45,310
container stuff and instead I'm really

00:01:44,050 --> 00:01:47,590
going to talk about how do we build

00:01:45,310 --> 00:01:48,940
abstractions in kubernetes so you can

00:01:47,590 --> 00:01:54,940
work with higher level abstractions

00:01:48,940 --> 00:01:57,210
instead of low-level abstractions I'm

00:01:54,940 --> 00:02:00,000
just gonna give a quick refresher here

00:01:57,210 --> 00:02:03,729
four so we're all on the same page

00:02:00,000 --> 00:02:06,039
kubernetes is a new cluster Orchestrator

00:02:03,729 --> 00:02:09,610
it runs containers in a cluster for you

00:02:06,039 --> 00:02:10,600
and when I talk about nodes those are

00:02:09,610 --> 00:02:12,519
the machines that are gonna end up

00:02:10,600 --> 00:02:14,620
running your containers when I talk

00:02:12,519 --> 00:02:17,140
about pods those are actually just where

00:02:14,620 --> 00:02:20,440
your containers are run in a pod is

00:02:17,140 --> 00:02:23,080
essentially a container or set of

00:02:20,440 --> 00:02:24,940
closely coupled containers with

00:02:23,080 --> 00:02:26,880
environment variables and storage and

00:02:24,940 --> 00:02:29,019
that sort of stuff

00:02:26,880 --> 00:02:30,880
users typically don't create pods

00:02:29,019 --> 00:02:32,260
directly instead they have higher level

00:02:30,880 --> 00:02:33,790
abstractions that can manage the

00:02:32,260 --> 00:02:36,100
creation of pots for them for instance

00:02:33,790 --> 00:02:39,010
replica sets have a count and you can

00:02:36,100 --> 00:02:40,570
just say I want in instances of pods

00:02:39,010 --> 00:02:41,980
that look like this and the replica set

00:02:40,570 --> 00:02:42,450
will go in ahead and stamp those out for

00:02:41,980 --> 00:02:44,590
you

00:02:42,450 --> 00:02:46,630
there's even higher level abstractions

00:02:44,590 --> 00:02:48,070
such as deployments that can take care

00:02:46,630 --> 00:02:50,140
of things such as updating a replica set

00:02:48,070 --> 00:02:52,620
and so you can do a rolling update where

00:02:50,140 --> 00:02:55,120
at some point in time you want two

00:02:52,620 --> 00:02:58,360
versions of pods out right as you shift

00:02:55,120 --> 00:03:01,060
traffic and load from an old version to

00:02:58,360 --> 00:03:02,500
a new version in all these API is the

00:03:01,060 --> 00:03:05,440
deployments the replica sets pods and

00:03:02,500 --> 00:03:07,720
stuff are called resource types and the

00:03:05,440 --> 00:03:10,230
objects and the instances are called

00:03:07,720 --> 00:03:10,230
resources

00:03:12,980 --> 00:03:21,540
very okay so I put up this slide to make

00:03:18,780 --> 00:03:22,980
things sound complicated and hard so

00:03:21,540 --> 00:03:24,600
that when I break them down and make

00:03:22,980 --> 00:03:26,870
them simple you leave feeling like you

00:03:24,600 --> 00:03:31,260
learned a lot feel good about yourselves

00:03:26,870 --> 00:03:33,690
but it's all true communities have these

00:03:31,260 --> 00:03:35,100
properties about them that are really

00:03:33,690 --> 00:03:36,330
important to understand when you're

00:03:35,100 --> 00:03:37,530
working with kubernetes because it's

00:03:36,330 --> 00:03:39,150
really going to help you understand how

00:03:37,530 --> 00:03:46,560
to debug the system and how to make it

00:03:39,150 --> 00:03:48,630
do what you want and so part of this as

00:03:46,560 --> 00:03:50,790
part of this talk I'm going to use a

00:03:48,630 --> 00:03:53,700
pizza metaphor that I got from Jeff's

00:03:50,790 --> 00:03:55,230
teeka at U of M yesterday as feedback

00:03:53,700 --> 00:03:57,660
and I'm gonna try and describe

00:03:55,230 --> 00:03:58,140
kubernetes api is kind of like ordering

00:03:57,660 --> 00:04:02,130
a pizza

00:03:58,140 --> 00:04:04,290
and kind of not like ordering a pizza so

00:04:02,130 --> 00:04:07,620
first of all kubernetes api is our

00:04:04,290 --> 00:04:10,680
declarative and so typically you would

00:04:07,620 --> 00:04:15,140
declare a resource in a file this is a

00:04:10,680 --> 00:04:17,580
deployment instance declared in a file

00:04:15,140 --> 00:04:20,370
that has three blacas running in

00:04:17,580 --> 00:04:22,830
genetics with a particular name and so

00:04:20,370 --> 00:04:24,210
you'd run coop control ply on this and

00:04:22,830 --> 00:04:25,560
that wouldn't go take whatever is in

00:04:24,210 --> 00:04:28,620
this file and make it match what's in

00:04:25,560 --> 00:04:30,540
the cluster declarative is different

00:04:28,620 --> 00:04:32,400
from imperative in that if you wanted to

00:04:30,540 --> 00:04:33,210
make a change to this say increase the

00:04:32,400 --> 00:04:35,130
replica count

00:04:33,210 --> 00:04:37,770
you wouldn't say increase the replica

00:04:35,130 --> 00:04:39,390
count by two you would just put replicas

00:04:37,770 --> 00:04:42,510
five in here reapply it and then it

00:04:39,390 --> 00:04:44,160
would go make those changes for you so

00:04:42,510 --> 00:04:47,300
this is kind of the opposite of ansible

00:04:44,160 --> 00:04:49,590
approach is how i've heard it described

00:04:47,300 --> 00:04:51,360
mmm and it's different than say docker

00:04:49,590 --> 00:04:52,890
run or running a process on the command

00:04:51,360 --> 00:04:54,990
line where you want to start something

00:04:52,890 --> 00:04:56,790
instead this is managed more like code

00:04:54,990 --> 00:04:59,220
where it's checked into a source control

00:04:56,790 --> 00:05:01,200
management system ideally that allows

00:04:59,220 --> 00:05:03,030
you do fun stuff like have it reviewed

00:05:01,200 --> 00:05:05,610
before it's rolled out and really

00:05:03,030 --> 00:05:06,900
understand what's being rolled out be

00:05:05,610 --> 00:05:08,460
able to roll it back because it's

00:05:06,900 --> 00:05:10,050
declarative if you just revert the

00:05:08,460 --> 00:05:12,570
change to make it look like it did

00:05:10,050 --> 00:05:14,970
before it will automatically push push

00:05:12,570 --> 00:05:17,700
it to look like it did before and you

00:05:14,970 --> 00:05:20,250
get a nice audit record so those are

00:05:17,700 --> 00:05:22,700
some nice things about us being API is

00:05:20,250 --> 00:05:22,700
being declared

00:05:24,220 --> 00:05:28,130
so I'm going to go through an example of

00:05:26,420 --> 00:05:28,970
what happens when you run coupe control

00:05:28,130 --> 00:05:30,920
apply on that plat

00:05:28,970 --> 00:05:33,620
so user creates this file called the

00:05:30,920 --> 00:05:36,380
ploidy animal and the writing coupe

00:05:33,620 --> 00:05:38,690
control apply on this file not create

00:05:36,380 --> 00:05:40,160
not update they just say whatever is in

00:05:38,690 --> 00:05:44,330
this file make sure the cluster looks

00:05:40,160 --> 00:05:46,370
like this and coupe control is first

00:05:44,330 --> 00:05:48,860
gonna go discover what endpoints it gets

00:05:46,370 --> 00:05:50,870
exist from the API server so it's

00:05:48,860 --> 00:05:52,430
important that the client doesn't have a

00:05:50,870 --> 00:05:53,900
baked in knowledge of like here's all

00:05:52,430 --> 00:05:55,640
the api's that exists and here's how I

00:05:53,900 --> 00:05:57,830
talk to them instead it just ask the API

00:05:55,640 --> 00:06:00,080
server hey what are your API endpoints

00:05:57,830 --> 00:06:01,940
and then it goes and looks for this

00:06:00,080 --> 00:06:03,140
potato one that matches this if it

00:06:01,940 --> 00:06:04,730
doesn't find one that matches this then

00:06:03,140 --> 00:06:08,870
it will throw an error but in this case

00:06:04,730 --> 00:06:14,930
it will and then it will go update the

00:06:08,870 --> 00:06:16,810
object once that's updated some magic is

00:06:14,930 --> 00:06:20,810
gonna happen and you got pods running

00:06:16,810 --> 00:06:23,300
okay so we're going to talk about what

00:06:20,810 --> 00:06:28,010
that magic is because that's a kind of a

00:06:23,300 --> 00:06:30,940
fun magic here so that magic is in

00:06:28,010 --> 00:06:33,860
controllers kubernetes api s are

00:06:30,940 --> 00:06:37,640
asynchronous and so when you apply that

00:06:33,860 --> 00:06:40,700
deployment change it's going to return

00:06:37,640 --> 00:06:42,140
to you after it stores it right and it

00:06:40,700 --> 00:06:44,630
will do some validation schema

00:06:42,140 --> 00:06:46,640
validation but it's not going to

00:06:44,630 --> 00:06:49,160
actually validate that it can pull the

00:06:46,640 --> 00:06:50,840
image for instance so what's gonna

00:06:49,160 --> 00:06:54,460
happen is after it's stored the

00:06:50,840 --> 00:06:57,290
controller is going to go and pick it up

00:06:54,460 --> 00:07:02,980
see that change or see see what you

00:06:57,290 --> 00:07:06,440
stored and then it's going to actuate it

00:07:02,980 --> 00:07:09,620
controllers are decoupled from the API

00:07:06,440 --> 00:07:11,660
endpoints so the API server where you go

00:07:09,620 --> 00:07:13,040
and write the deployment file to does

00:07:11,660 --> 00:07:14,240
not know about the deployment controller

00:07:13,040 --> 00:07:16,850
which is actually going to implement the

00:07:14,240 --> 00:07:18,650
API what happens instead is you have

00:07:16,850 --> 00:07:21,170
some process running in the cluster and

00:07:18,650 --> 00:07:22,730
that says I want to know anytime there's

00:07:21,170 --> 00:07:24,500
a deployment change to the API server

00:07:22,730 --> 00:07:25,670
and it doesn't say I do something with

00:07:24,500 --> 00:07:27,560
it it just says I won't tell me about

00:07:25,670 --> 00:07:31,010
any time there's a create update or

00:07:27,560 --> 00:07:32,630
delete for these things and so this way

00:07:31,010 --> 00:07:36,760
the whole process the whole system is

00:07:32,630 --> 00:07:36,760
actually decoupled modular

00:07:43,220 --> 00:07:51,290
okay communis api's are also observable

00:07:47,920 --> 00:07:53,300
so as I alluded to with controller does

00:07:51,290 --> 00:07:54,500
is it sends this watch to the API server

00:07:53,300 --> 00:07:58,220
that's what it's called and it's like a

00:07:54,500 --> 00:08:00,650
subscription to events when it gets an

00:07:58,220 --> 00:08:02,930
event it will then take the namespace

00:08:00,650 --> 00:08:04,400
and name of the object is trying to

00:08:02,930 --> 00:08:06,200
reconcile in this case the deployment

00:08:04,400 --> 00:08:08,240
you go look up the state for that

00:08:06,200 --> 00:08:11,060
deployment and compare this is what the

00:08:08,240 --> 00:08:15,050
system should look like against what it

00:08:11,060 --> 00:08:17,540
actually looks like so controllers are

00:08:15,050 --> 00:08:19,550
gonna watch the objects and resources

00:08:17,540 --> 00:08:21,410
they control so the deployment control

00:08:19,550 --> 00:08:23,540
is going to watch deployments they also

00:08:21,410 --> 00:08:25,280
watch resources they create update

00:08:23,540 --> 00:08:26,950
delete or manage right so if a

00:08:25,280 --> 00:08:29,180
deployment creates replica sets

00:08:26,950 --> 00:08:30,440
opponents also gonna watch replicas sets

00:08:29,180 --> 00:08:32,270
that way if something goes and whacks

00:08:30,440 --> 00:08:34,550
the replica set you can go recreate it

00:08:32,270 --> 00:08:37,760
or if a status changes in the replica

00:08:34,550 --> 00:08:39,770
set where for some reason a rollout

00:08:37,760 --> 00:08:45,020
isn't healthy it can detect that and

00:08:39,770 --> 00:08:47,030
then take action the other half of the

00:08:45,020 --> 00:08:48,470
controller in addition to the watch is

00:08:47,030 --> 00:08:51,830
the reconcile and this is really the

00:08:48,470 --> 00:08:56,000
core piece of what drives the kubernetes

00:08:51,830 --> 00:08:58,280
api is the controller gets this

00:08:56,000 --> 00:09:01,460
namespace a name for an object or the

00:08:58,280 --> 00:09:04,520
key for it and it reads all the state of

00:09:01,460 --> 00:09:06,050
the system and then decides what it

00:09:04,520 --> 00:09:07,820
needs to do so this is different than

00:09:06,050 --> 00:09:09,500
getting an event where it says hey

00:09:07,820 --> 00:09:11,420
there's been a scaling event to increase

00:09:09,500 --> 00:09:13,160
replica count by five and okay I'll go

00:09:11,420 --> 00:09:14,600
create some more things instead of looks

00:09:13,160 --> 00:09:16,070
at the entire state and so maybe there's

00:09:14,600 --> 00:09:18,080
multiple scaling events and the rollout

00:09:16,070 --> 00:09:19,520
and oh by the way this bad thing

00:09:18,080 --> 00:09:22,940
happened and we need to work around it

00:09:19,520 --> 00:09:27,460
and then makes certain decisions to push

00:09:22,940 --> 00:09:31,430
what these are said they want into and

00:09:27,460 --> 00:09:38,260
into the cluster okay so so the pizza

00:09:31,430 --> 00:09:40,250
analogy here is that controllers are

00:09:38,260 --> 00:09:44,000
asynchronous so when you order a pizza

00:09:40,250 --> 00:09:45,650
you say hey I want a pepperoni piece or

00:09:44,000 --> 00:09:47,240
something like this and you don't wait

00:09:45,650 --> 00:09:53,030
on the phone until the pizzas delivered

00:09:47,240 --> 00:09:55,040
right you instead what you do is you

00:09:53,030 --> 00:09:56,810
hang up and you kind of wait for things

00:09:55,040 --> 00:09:57,209
to happen right and if the pizza doesn't

00:09:56,810 --> 00:10:00,509
come maybe

00:09:57,209 --> 00:10:05,639
call the guy back but otherwise you just

00:10:00,509 --> 00:10:09,050
wait for dad and the level driven I

00:10:05,639 --> 00:10:11,249
don't have a great pizza analogy for

00:10:09,050 --> 00:10:17,100
other than that maybe if you change your

00:10:11,249 --> 00:10:21,660
order that they don't like give you two

00:10:17,100 --> 00:10:26,819
pizzas okay so I'm gonna do the

00:10:21,660 --> 00:10:30,240
controller or workflow example here so

00:10:26,819 --> 00:10:33,600
this is a workflow for some update comes

00:10:30,240 --> 00:10:34,740
into the API server and the API server

00:10:33,600 --> 00:10:36,209
will then send a watch up into the

00:10:34,740 --> 00:10:39,089
controller so controller said give me

00:10:36,209 --> 00:10:42,540
events API Oh service says ok this event

00:10:39,089 --> 00:10:44,699
happened controller then goes and reads

00:10:42,540 --> 00:10:47,879
the cluster state so the deployment and

00:10:44,699 --> 00:10:49,350
the rep of this set sees what's actually

00:10:47,879 --> 00:10:51,240
there

00:10:49,350 --> 00:10:52,379
that is the rep of the sets and compares

00:10:51,240 --> 00:10:54,720
it to what the deployment thinks should

00:10:52,379 --> 00:10:57,059
be there and then it's going to go make

00:10:54,720 --> 00:10:58,829
some changes those changes may be just

00:10:57,059 --> 00:11:01,860
updating the status to say this is what

00:10:58,829 --> 00:11:03,569
the current deployment status is or it

00:11:01,860 --> 00:11:05,129
could be creating replica sets or

00:11:03,569 --> 00:11:11,790
updating them or deleting them or these

00:11:05,129 --> 00:11:13,019
sorts of things so we're gonna go back

00:11:11,790 --> 00:11:14,220
to that apply example but this time

00:11:13,019 --> 00:11:16,410
we're gonna try and fill in those

00:11:14,220 --> 00:11:23,149
question marks that cause the pods to

00:11:16,410 --> 00:11:29,490
happen so user applies the file and this

00:11:23,149 --> 00:11:30,569
goes in creates the deployment the API

00:11:29,490 --> 00:11:32,910
circles tend to watch them into

00:11:30,569 --> 00:11:34,860
deployment controller in the opponent

00:11:32,910 --> 00:11:36,869
controller we'll see that there is no

00:11:34,860 --> 00:11:38,220
replica set for this deployment so we'll

00:11:36,869 --> 00:11:43,379
say okay I need to go and create that

00:11:38,220 --> 00:11:44,999
replica set and that will get stored and

00:11:43,379 --> 00:11:46,769
the API server is going to stand to

00:11:44,999 --> 00:11:48,299
watch event for replicas sets because

00:11:46,769 --> 00:11:49,499
one just got created and the replica

00:11:48,299 --> 00:11:52,069
says controller is going to subscribe to

00:11:49,499 --> 00:11:55,139
those will see the replica set come in

00:11:52,069 --> 00:11:56,429
and then we'll say ok I expect pods to

00:11:55,139 --> 00:11:59,339
exist so then it will go look for those

00:11:56,429 --> 00:12:01,350
pods see that they don't exist say ok I

00:11:59,339 --> 00:12:06,329
must create the pots so I will send the

00:12:01,350 --> 00:12:09,029
Create pod requests the API server the

00:12:06,329 --> 00:12:10,649
API server then sends watch events for

00:12:09,029 --> 00:12:12,240
pod creation

00:12:10,649 --> 00:12:14,509
and there's this piece called the

00:12:12,240 --> 00:12:16,800
scheduler which is responsible for

00:12:14,509 --> 00:12:19,790
scheduling pods to machines and it will

00:12:16,800 --> 00:12:24,119
see that these pods these new pods exist

00:12:19,790 --> 00:12:26,879
and it will look for a node in the pod

00:12:24,119 --> 00:12:29,069
spec and it won't see one so we'll say

00:12:26,879 --> 00:12:30,600
okay I must schedule this to a thing and

00:12:29,069 --> 00:12:34,709
write that in and it will update that

00:12:30,600 --> 00:12:38,939
pod and nodes are also listening to pot

00:12:34,709 --> 00:12:42,929
emits and so when this comes in the node

00:12:38,939 --> 00:12:44,309
will say a that's that belongs to me but

00:12:42,929 --> 00:12:47,610
I don't see the containers running for

00:12:44,309 --> 00:12:48,540
this pod locally so I will go start

00:12:47,610 --> 00:12:50,369
reading those containers and then I'm

00:12:48,540 --> 00:12:51,629
gonna go update their status right and

00:12:50,369 --> 00:12:53,999
then the status can get propagated up

00:12:51,629 --> 00:12:55,709
through these pieces so the pod status

00:12:53,999 --> 00:12:58,860
into the replicas set status into the

00:12:55,709 --> 00:13:04,999
deployment status through a series of

00:12:58,860 --> 00:13:07,589
watches so update looks pretty similar

00:13:04,999 --> 00:13:09,990
we apply the deployment um we'll file

00:13:07,589 --> 00:13:12,779
after making some change in this case

00:13:09,990 --> 00:13:17,610
say we change the image so when I do a

00:13:12,779 --> 00:13:19,559
rollout that will then send a patch to

00:13:17,610 --> 00:13:21,209
the API server so it will say okay

00:13:19,559 --> 00:13:24,870
change change these parts of the

00:13:21,209 --> 00:13:29,999
deployment send a watch event to the

00:13:24,870 --> 00:13:31,499
deployment controller this time it will

00:13:29,999 --> 00:13:33,179
find the replica set there but the

00:13:31,499 --> 00:13:36,779
replica set won't look the way it wants

00:13:33,179 --> 00:13:38,459
it to and so it'll do is will say we

00:13:36,779 --> 00:13:41,759
need to create a new replica set that

00:13:38,459 --> 00:13:43,850
has the the image we want me so it will

00:13:41,759 --> 00:13:46,889
go ahead and create the new replica set

00:13:43,850 --> 00:13:48,660
and we'll say but we don't just want to

00:13:46,889 --> 00:13:50,249
blow away the old one and then while

00:13:48,660 --> 00:13:52,889
this stuff is spinning up we want to do

00:13:50,249 --> 00:13:54,749
a rolling update so we're gonna begin to

00:13:52,889 --> 00:13:58,709
scale up that new replica set and scale

00:13:54,749 --> 00:14:00,959
down the old one and that will send two

00:13:58,709 --> 00:14:03,029
updates the repla set controller one for

00:14:00,959 --> 00:14:05,089
creating the new replica set and the

00:14:03,029 --> 00:14:07,610
other for updating the existing one

00:14:05,089 --> 00:14:09,749
which will then create into lead pods

00:14:07,610 --> 00:14:12,839
respectively for each of the replica

00:14:09,749 --> 00:14:15,600
sets and then this looks pretty much the

00:14:12,839 --> 00:14:16,980
same with the node needing to stop

00:14:15,600 --> 00:14:20,299
running the old pod terminate it

00:14:16,980 --> 00:14:20,299
beginning the new pod

00:14:25,620 --> 00:14:36,589
okay so before I move on are there any

00:14:28,589 --> 00:14:36,589
questions on controllers yes

00:14:41,190 --> 00:14:48,780
yes so typically there's one controller

00:14:43,410 --> 00:14:50,310
per API type controllers typically are

00:14:48,780 --> 00:14:52,440
designed so that they listen to only

00:14:50,310 --> 00:14:55,200
deployments and since so that means

00:14:52,440 --> 00:14:59,280
you've got for every API type you have

00:14:55,200 --> 00:15:01,650
typically a controller and then there's

00:14:59,280 --> 00:15:06,390
things such as the scheduler and the

00:15:01,650 --> 00:15:08,700
couplet which are not we don't call them

00:15:06,390 --> 00:15:17,600
controllers per se but have a lot of the

00:15:08,700 --> 00:15:19,710
same behaviors so we've talked about

00:15:17,600 --> 00:15:23,310
controllers in this magic that actuates

00:15:19,710 --> 00:15:25,400
the kubernetes api is and it seems

00:15:23,310 --> 00:15:28,590
really important because all this

00:15:25,400 --> 00:15:31,620
orchestration is happening through this

00:15:28,590 --> 00:15:33,840
data being passed around that this data

00:15:31,620 --> 00:15:37,190
is well-structured and well understood

00:15:33,840 --> 00:15:39,450
by all the parties that are consuming it

00:15:37,190 --> 00:15:42,120
so I'm going to talk a bit about the way

00:15:39,450 --> 00:15:44,460
resources are structured because there

00:15:42,120 --> 00:15:47,030
is a consistency to them and they're

00:15:44,460 --> 00:15:51,180
broken in down into roughly four parts

00:15:47,030 --> 00:15:52,560
sometimes three parts and that's tied

00:15:51,180 --> 00:15:54,270
metadata which is highlighted in blue

00:15:52,560 --> 00:15:56,370
there an object metadata which is

00:15:54,270 --> 00:15:57,900
highlighted in red and a spec which is

00:15:56,370 --> 00:16:00,680
highlighted in purple and then a status

00:15:57,900 --> 00:16:00,680
which isn't shown here

00:16:06,960 --> 00:16:14,050
okay so the tide Mehta has a group in

00:16:11,770 --> 00:16:16,030
this case apps the group is really just

00:16:14,050 --> 00:16:19,900
like a package in Java or NGO or

00:16:16,030 --> 00:16:21,160
something like that then it has a

00:16:19,900 --> 00:16:24,370
version these versions are very

00:16:21,160 --> 00:16:26,110
interesting when versions do is they

00:16:24,370 --> 00:16:28,300
allow you to have backwards

00:16:26,110 --> 00:16:30,220
compatibility when you change defaulting

00:16:28,300 --> 00:16:32,650
behavior or the structure of the object

00:16:30,220 --> 00:16:39,190
we also can communicate stability of an

00:16:32,650 --> 00:16:41,680
API like alpha beta GA but what's really

00:16:39,190 --> 00:16:43,750
cool is that if you create an API and

00:16:41,680 --> 00:16:46,750
you don't like the way it looks right so

00:16:43,750 --> 00:16:49,030
say I have a pizza we have our Hawaiian

00:16:46,750 --> 00:16:51,750
pizza and we didn't put ham on it

00:16:49,030 --> 00:16:53,410
originally we just had pineapples right

00:16:51,750 --> 00:16:55,240
and then we realized you know what

00:16:53,410 --> 00:16:56,650
Hawaiian pizza is really better with ham

00:16:55,240 --> 00:16:59,380
and every time someone wears a Hawaiian

00:16:56,650 --> 00:17:01,210
pizza we would really like just to put

00:16:59,380 --> 00:17:04,470
ham on it instead of telling everyone

00:17:01,210 --> 00:17:07,870
order Hawaiian pizza with ham all right

00:17:04,470 --> 00:17:09,760
but what's gonna happen is my kids don't

00:17:07,870 --> 00:17:11,650
like ham and I'm gonna order Hawaiian

00:17:09,760 --> 00:17:14,860
pizza and it's gonna show up with ham on

00:17:11,650 --> 00:17:16,540
it and then I'd be like what happened we

00:17:14,860 --> 00:17:18,010
are I'll mock any dinner tonight because

00:17:16,540 --> 00:17:21,700
there's ham on this pineapple pizza

00:17:18,010 --> 00:17:24,310
right and so by having a version you can

00:17:21,700 --> 00:17:25,510
say okay I want the v1 pineapple pizza

00:17:24,310 --> 00:17:26,740
and that's going to make sure that

00:17:25,510 --> 00:17:29,050
there's never ham on that thing when I

00:17:26,740 --> 00:17:31,210
order it and then we can make v2

00:17:29,050 --> 00:17:33,820
pineapple pizza which will come with ham

00:17:31,210 --> 00:17:37,270
by default in both cases you can always

00:17:33,820 --> 00:17:39,310
order pineapple pizza v1 with ham or

00:17:37,270 --> 00:17:40,570
pineapple pizza v2 without ham and you

00:17:39,310 --> 00:17:43,120
end up getting the same thing but it

00:17:40,570 --> 00:17:45,250
allows us to change these defaults so

00:17:43,120 --> 00:17:48,160
that people aren't surprised when we

00:17:45,250 --> 00:17:49,330
change how we want things to look it

00:17:48,160 --> 00:17:51,250
also allows you to change the structure

00:17:49,330 --> 00:17:53,080
a little bit so if we had a field that

00:17:51,250 --> 00:17:55,800
was say one value and then we realized

00:17:53,080 --> 00:17:58,360
that actually needs to be a list in

00:17:55,800 --> 00:17:59,680
version 1 we could add a list right and

00:17:58,360 --> 00:18:01,600
now you have a single value for the

00:17:59,680 --> 00:18:03,490
field and the list and users kind of

00:18:01,600 --> 00:18:05,650
have to figure out how to fill it in

00:18:03,490 --> 00:18:07,450
right and we could have it say

00:18:05,650 --> 00:18:08,860
you put the first value in the single

00:18:07,450 --> 00:18:11,170
field value and then the rest of the

00:18:08,860 --> 00:18:12,010
list or something like that but really

00:18:11,170 --> 00:18:13,270
you don't want it to look like that

00:18:12,010 --> 00:18:16,330
really you just want to list so when you

00:18:13,270 --> 00:18:18,790
do B 2 you can just have the list right

00:18:16,330 --> 00:18:20,910
and that way people don't need to go

00:18:18,790 --> 00:18:23,980
back and refactor their existing

00:18:20,910 --> 00:18:26,500
deployments and have them break if they

00:18:23,980 --> 00:18:28,390
don't do that right but the new version

00:18:26,500 --> 00:18:34,660
looks nice so that's what the version is

00:18:28,390 --> 00:18:36,130
about and the last piece is the kind so

00:18:34,660 --> 00:18:39,190
the kind is just basically the common

00:18:36,130 --> 00:18:40,690
name of the the resource type and so

00:18:39,190 --> 00:18:43,060
when I say deployment a replica set or

00:18:40,690 --> 00:18:50,620
pod that's really just referring to the

00:18:43,060 --> 00:18:54,280
kind so the next piece of the four

00:18:50,620 --> 00:18:56,320
pieces is the object metadata so while

00:18:54,280 --> 00:18:59,290
type metadata is metadata about the API

00:18:56,320 --> 00:19:02,380
type the object metadata is about the

00:18:59,290 --> 00:19:03,820
instance or the object and has a couple

00:19:02,380 --> 00:19:06,430
interesting things as the namespace in

00:19:03,820 --> 00:19:08,080
the name or in some cases just a name

00:19:06,430 --> 00:19:12,010
and this is the primary key to the

00:19:08,080 --> 00:19:13,300
object so when you look an object up you

00:19:12,010 --> 00:19:14,260
can do it by namespace a name and you

00:19:13,300 --> 00:19:18,100
can't have two objects with the same

00:19:14,260 --> 00:19:20,170
namespace the name exists there's also

00:19:18,100 --> 00:19:21,910
something called the annotations so

00:19:20,170 --> 00:19:24,250
annotations are arbitrary key value

00:19:21,910 --> 00:19:27,610
pairs you can attach to an object like a

00:19:24,250 --> 00:19:28,840
map and they do something really

00:19:27,610 --> 00:19:32,380
interesting which is they allow you to

00:19:28,840 --> 00:19:34,120
extend the schema of the object right so

00:19:32,380 --> 00:19:36,430
if you have a deployment and you're like

00:19:34,120 --> 00:19:37,990
I would like to have tooling that works

00:19:36,430 --> 00:19:40,180
with a deployment that I can extend it

00:19:37,990 --> 00:19:42,910
in some way and as part of that tooling

00:19:40,180 --> 00:19:46,180
I actually need this schema data to be

00:19:42,910 --> 00:19:47,890
attached to the deployment how do I do

00:19:46,180 --> 00:19:50,320
that we've been actually taking an

00:19:47,890 --> 00:19:52,420
annotation and put that data in there

00:19:50,320 --> 00:19:54,070
and now that when you read that instance

00:19:52,420 --> 00:19:55,660
your tools can you go look for that

00:19:54,070 --> 00:19:58,420
annotation value and pull the data out

00:19:55,660 --> 00:20:01,600
and you've effectively extended the

00:19:58,420 --> 00:20:04,240
object the other thing it has are labels

00:20:01,600 --> 00:20:05,890
labels are also arbitrary key value

00:20:04,240 --> 00:20:08,620
pairs but the difference between

00:20:05,890 --> 00:20:12,280
annotations and labels is labels are

00:20:08,620 --> 00:20:14,710
indexed in queryable so if you want to

00:20:12,280 --> 00:20:17,260
label a particular object with some

00:20:14,710 --> 00:20:19,450
property you can then say hey API server

00:20:17,260 --> 00:20:21,310
please give me all the points that have

00:20:19,450 --> 00:20:22,810
this particular label with this

00:20:21,310 --> 00:20:25,120
particular value and it will return them

00:20:22,810 --> 00:20:27,280
to you and also go into later this is

00:20:25,120 --> 00:20:29,020
really useful for connecting objects in

00:20:27,280 --> 00:20:30,640
the system because there's relationships

00:20:29,020 --> 00:20:32,800
between them deployments may manage

00:20:30,640 --> 00:20:34,090
multiple replicas sets replica sets may

00:20:32,800 --> 00:20:36,370
manage multiple pods

00:20:34,090 --> 00:20:41,080
and labels because they allow you to

00:20:36,370 --> 00:20:44,279
query for objects allow controllers to

00:20:41,080 --> 00:20:44,279
find these relationships

00:20:59,070 --> 00:21:06,750
all right so there is a final four final

00:21:03,210 --> 00:21:10,500
two parts to the four are the spec and

00:21:06,750 --> 00:21:12,540
the status so the spec this is most of

00:21:10,500 --> 00:21:16,080
the time where users spend thinking

00:21:12,540 --> 00:21:17,790
about and it has like the replicas for

00:21:16,080 --> 00:21:18,900
instance and the pod template and image

00:21:17,790 --> 00:21:20,190
and all this sort of stuff and it's

00:21:18,900 --> 00:21:21,810
really what you want running in the

00:21:20,190 --> 00:21:23,190
cluster when you say I want to create a

00:21:21,810 --> 00:21:25,380
deployment really what you're saying is

00:21:23,190 --> 00:21:29,370
this is you're filling out the spec and

00:21:25,380 --> 00:21:33,180
saying go make it look like this in

00:21:29,370 --> 00:21:38,130
addition to that most objects have a

00:21:33,180 --> 00:21:40,470
status and when the status has is what

00:21:38,130 --> 00:21:43,860
the current state of the system is so if

00:21:40,470 --> 00:21:45,690
you have three replicas which you

00:21:43,860 --> 00:21:47,310
probably want to know also is how many

00:21:45,690 --> 00:21:48,720
of those replicas are running we're at

00:21:47,310 --> 00:21:52,980
the most recent version or these sorts

00:21:48,720 --> 00:21:54,120
of things or being started and so the

00:21:52,980 --> 00:21:55,890
status is where the controller

00:21:54,120 --> 00:21:57,930
communicates back to the user or other

00:21:55,890 --> 00:22:07,310
parts of the system the current state of

00:21:57,930 --> 00:22:10,310
the object of any questions on resources

00:22:07,310 --> 00:22:10,310
yes

00:22:15,620 --> 00:22:19,680
most of the time so there's there's

00:22:18,480 --> 00:22:22,080
objects that are not namespaced

00:22:19,680 --> 00:22:27,720
like notes for instance don't have any

00:22:22,080 --> 00:22:29,190
concept in a namespace but for the

00:22:27,720 --> 00:22:31,650
purposes of this workshop you can think

00:22:29,190 --> 00:22:33,000
of the namespace and name pair as the

00:22:31,650 --> 00:22:35,970
primary key for the objects you'll be

00:22:33,000 --> 00:22:39,150
working with so and the question was

00:22:35,970 --> 00:22:42,090
sorry you need a namespace and name pair

00:22:39,150 --> 00:22:45,060
too as the primary key for an object and

00:22:42,090 --> 00:22:48,740
the answer is for some objects it's just

00:22:45,060 --> 00:22:48,740
name and for some objects namespace name

00:22:53,780 --> 00:23:01,530
yes you you are correct yeah so it's the

00:22:58,440 --> 00:23:04,650
it's the group version kind for a given

00:23:01,530 --> 00:23:06,860
type I should say that is the key that's

00:23:04,650 --> 00:23:06,860
correct

00:23:14,240 --> 00:23:18,679
okay so now that we've talked a bit

00:23:15,920 --> 00:23:20,840
about the resources and how they're

00:23:18,679 --> 00:23:23,690
structured and the controllers and how

00:23:20,840 --> 00:23:25,850
they work in their relationship we're

00:23:23,690 --> 00:23:28,070
just going to dig into sort of the nitty

00:23:25,850 --> 00:23:31,840
gritties of how does that controller

00:23:28,070 --> 00:23:31,840
actually go and generate those objects

00:23:32,920 --> 00:23:38,960
so this is a diagram of a deployment and

00:23:37,429 --> 00:23:41,780
this relationship to a replica said it's

00:23:38,960 --> 00:23:44,390
created and then its relationship to two

00:23:41,780 --> 00:23:47,330
pods is created the deployment is set

00:23:44,390 --> 00:23:49,970
labels on the replica set and then has

00:23:47,330 --> 00:23:53,000
this selector and the selector allows

00:23:49,970 --> 00:23:55,580
the deployment to query that set of

00:23:53,000 --> 00:23:57,640
labels and find the replica set and the

00:23:55,580 --> 00:24:00,380
same thing the pod has a selector for

00:23:57,640 --> 00:24:04,820
our so the replica set has selector for

00:24:00,380 --> 00:24:06,410
the pods is created so that allows when

00:24:04,820 --> 00:24:11,990
you reckon to reconcile the deployment

00:24:06,410 --> 00:24:14,030
go find a collection of objects but you

00:24:11,990 --> 00:24:18,320
also want to trace back from object to

00:24:14,030 --> 00:24:20,059
the one that created it so one thing for

00:24:18,320 --> 00:24:22,640
instance is when you get an event for a

00:24:20,059 --> 00:24:24,050
replica set you're reconciling the

00:24:22,640 --> 00:24:25,520
deployment in the diploma controller

00:24:24,050 --> 00:24:28,520
you're not reconciling the replica set

00:24:25,520 --> 00:24:29,809
so you need to go find which deployment

00:24:28,520 --> 00:24:31,610
actually owns this object because the

00:24:29,809 --> 00:24:34,160
change in the replica set needs to be

00:24:31,610 --> 00:24:35,330
propagated into the deployment and you

00:24:34,160 --> 00:24:39,700
can do that through an owner's reference

00:24:35,330 --> 00:24:44,059
so the donors reference points back at a

00:24:39,700 --> 00:24:49,429
particular type and namespace name and I

00:24:44,059 --> 00:24:52,160
believe as a UID there to voters

00:24:49,429 --> 00:24:54,410
reference allows another cool feature of

00:24:52,160 --> 00:24:55,790
kubernetes which is when you delete your

00:24:54,410 --> 00:24:57,490
deployment that is then created replica

00:24:55,790 --> 00:24:59,570
sets and those replica sets crated pods

00:24:57,490 --> 00:25:02,630
you would really like the replica set

00:24:59,570 --> 00:25:05,090
and the pods to go away right so how

00:25:02,630 --> 00:25:09,200
does that happen and if you have an

00:25:05,090 --> 00:25:12,470
owners reference on the object and then

00:25:09,200 --> 00:25:13,880
the parent goes away there's a garbage

00:25:12,470 --> 00:25:15,860
collector set collection system that can

00:25:13,880 --> 00:25:20,780
then go find those and automatically

00:25:15,860 --> 00:25:23,660
delete them so this saves essentially

00:25:20,780 --> 00:25:27,820
just work on API writers from having to

00:25:23,660 --> 00:25:27,820
get all the cleanup or correct

00:25:32,210 --> 00:25:37,040
so that's how we generate objects so how

00:25:35,820 --> 00:25:39,900
do we update them that's easy right

00:25:37,040 --> 00:25:43,320
actually turns out it's a little more

00:25:39,900 --> 00:25:45,660
tricky than you might expect this back

00:25:43,320 --> 00:25:47,700
is actually shared across different

00:25:45,660 --> 00:25:49,380
parts of the system and so while you may

00:25:47,700 --> 00:25:52,620
create a service for instance from your

00:25:49,380 --> 00:25:54,330
apply you may apply a service dot yeah

00:25:52,620 --> 00:25:56,930
Mille creates the service you say hey I

00:25:54,330 --> 00:25:59,460
own the spec right it's all in the Spile

00:25:56,930 --> 00:26:02,190
the cluster may actually populate

00:25:59,460 --> 00:26:03,780
important data into that object so

00:26:02,190 --> 00:26:06,690
service if you look at it has a cluster

00:26:03,780 --> 00:26:08,610
IP that gets populated and if you just

00:26:06,690 --> 00:26:10,440
blindly try and update the object by

00:26:08,610 --> 00:26:11,880
taking the one from the file for

00:26:10,440 --> 00:26:15,060
instance or one that you generated and

00:26:11,880 --> 00:26:17,880
say go use this instead it's actually

00:26:15,060 --> 00:26:20,760
gonna fail or delete that data and in

00:26:17,880 --> 00:26:22,380
case of service it will fail saying hey

00:26:20,760 --> 00:26:28,140
you can't delete the cluster IP once

00:26:22,380 --> 00:26:31,380
it's set so what you need to do is from

00:26:28,140 --> 00:26:33,660
a controller you need to really do the

00:26:31,380 --> 00:26:35,820
read set the fields the way you want

00:26:33,660 --> 00:26:37,290
them to be and then do the update and

00:26:35,820 --> 00:26:39,690
you get a nice optimistic locking to

00:26:37,290 --> 00:26:42,990
make sure that you don't stomp on anyone

00:26:39,690 --> 00:26:47,510
else's changes and if you're using

00:26:42,990 --> 00:26:51,150
tooling say you're to control apply

00:26:47,510 --> 00:26:52,560
that's why we do a patch okay we just

00:26:51,150 --> 00:26:53,040
want to change the things that we know

00:26:52,560 --> 00:26:55,080
about

00:26:53,040 --> 00:26:58,260
instead of taking whatever's there and

00:26:55,080 --> 00:27:01,350
replacing with what we have so the way

00:26:58,260 --> 00:27:03,030
could control apply does this is it

00:27:01,350 --> 00:27:06,390
stores a copy of the last thing it

00:27:03,030 --> 00:27:07,560
applied in an annotation right so this

00:27:06,390 --> 00:27:09,930
is where that annotation extending the

00:27:07,560 --> 00:27:11,790
schema comes in when it applies

00:27:09,930 --> 00:27:13,350
something it writes the annotation here

00:27:11,790 --> 00:27:16,730
is the file that I use to create this

00:27:13,350 --> 00:27:22,020
thing and so now the coop control tool

00:27:16,730 --> 00:27:23,280
can differentiate between mmm can go and

00:27:22,020 --> 00:27:25,860
look back in history the last thing it

00:27:23,280 --> 00:27:28,680
applied when you delete a field it can

00:27:25,860 --> 00:27:30,600
go figure out hey this new file doesn't

00:27:28,680 --> 00:27:31,470
have this field that used to exist so

00:27:30,600 --> 00:27:33,870
I'm going to go ahead and delete it

00:27:31,470 --> 00:27:36,120
right but if you never specified a fail

00:27:33,870 --> 00:27:37,740
by cluster IP it doesn't go and try and

00:27:36,120 --> 00:27:39,300
delete it right because it knows that it

00:27:37,740 --> 00:27:40,320
was never something it created and so it

00:27:39,300 --> 00:27:42,480
ignores that stuff

00:27:40,320 --> 00:27:44,670
so it does a diff between the last one

00:27:42,480 --> 00:27:46,740
is stored and the current one and the

00:27:44,670 --> 00:27:47,880
one in your file then it also doesn't

00:27:46,740 --> 00:27:50,850
diff between what's in the cluster and

00:27:47,880 --> 00:27:56,760
what's in the file it creates a patch

00:27:50,850 --> 00:27:58,770
from that okay so we can create update

00:27:56,760 --> 00:28:02,280
create objects you can update them

00:27:58,770 --> 00:28:04,080
controllers and now we need to start

00:28:02,280 --> 00:28:05,490
being able to be smart about how we

00:28:04,080 --> 00:28:08,190
update things like how do we spawn

00:28:05,490 --> 00:28:09,480
respond to wrap on the sets becoming

00:28:08,190 --> 00:28:13,680
healthy when we're doing a rolling

00:28:09,480 --> 00:28:17,010
update right and change respond to

00:28:13,680 --> 00:28:19,190
changes into conditions in those and so

00:28:17,010 --> 00:28:21,270
there one piece of this is the status

00:28:19,190 --> 00:28:23,970
that I talked about earlier and another

00:28:21,270 --> 00:28:27,810
one is events so talking about status

00:28:23,970 --> 00:28:30,300
first status typically has a list of key

00:28:27,810 --> 00:28:32,460
value pairs called conditions these

00:28:30,300 --> 00:28:33,750
conditions are how we tell other parts

00:28:32,460 --> 00:28:35,880
of the system about the current state of

00:28:33,750 --> 00:28:37,860
the object and this is a pattern we use

00:28:35,880 --> 00:28:41,430
instead of a single state because

00:28:37,860 --> 00:28:43,650
sometimes resources in multiple states

00:28:41,430 --> 00:28:46,470
at the same time for instance you are

00:28:43,650 --> 00:28:50,370
scaling up while you are also doing a

00:28:46,470 --> 00:28:52,230
rolling update right and this is because

00:28:50,370 --> 00:28:53,790
it is asynchronous and level driven that

00:28:52,230 --> 00:28:56,040
you can have multiple things going on at

00:28:53,790 --> 00:29:02,910
the same time instead of serially doing

00:28:56,040 --> 00:29:05,270
things the other useful tool we have for

00:29:02,910 --> 00:29:07,710
observing the state of objects is events

00:29:05,270 --> 00:29:10,200
so events are objects you can create and

00:29:07,710 --> 00:29:12,300
then attach to another object and so

00:29:10,200 --> 00:29:13,980
while status will tell us right now

00:29:12,300 --> 00:29:16,080
three replicas are healthy out of five

00:29:13,980 --> 00:29:18,060
or something like that it won't tell us

00:29:16,080 --> 00:29:20,160
that like five minutes ago it just

00:29:18,060 --> 00:29:21,630
brought a new replica online or these

00:29:20,160 --> 00:29:25,110
sorts of things or it wasn't healthy and

00:29:21,630 --> 00:29:26,610
it became healthy and so events give us

00:29:25,110 --> 00:29:27,990
a view back in time and so you can

00:29:26,610 --> 00:29:30,930
attach them to another object and

00:29:27,990 --> 00:29:32,790
publish them and then as a user you can

00:29:30,930 --> 00:29:33,930
use coupon tol describe on an object and

00:29:32,790 --> 00:29:35,700
we'll go get you the events for the

00:29:33,930 --> 00:29:39,170
object and then give you the status and

00:29:35,700 --> 00:29:39,170
spec and pull out different fields

00:29:45,300 --> 00:29:51,100
synchronous defaulting invalidation so I

00:29:48,370 --> 00:29:52,420
mentioned that we do some defaulting and

00:29:51,100 --> 00:29:55,600
we do a validation and how does that

00:29:52,420 --> 00:29:57,460
work these are done synchronously so

00:29:55,600 --> 00:30:00,040
when you create the deployment if you

00:29:57,460 --> 00:30:01,600
don't specify replicas it will go and

00:30:00,040 --> 00:30:03,580
set the replicas field for you when it

00:30:01,600 --> 00:30:04,810
stores it in that way it doesn't change

00:30:03,580 --> 00:30:06,640
underneath you right we don't have

00:30:04,810 --> 00:30:09,280
something in the controller trying to

00:30:06,640 --> 00:30:12,060
interpret manthie value we just upfront

00:30:09,280 --> 00:30:14,850
say okay here's the value for this thing

00:30:12,060 --> 00:30:17,050
and this is done by the API server

00:30:14,850 --> 00:30:19,840
there's also validation that's done by

00:30:17,050 --> 00:30:22,180
the API server so this is simpler

00:30:19,840 --> 00:30:24,070
validation and I can look at certain

00:30:22,180 --> 00:30:26,560
changes like oh the cluster IP is being

00:30:24,070 --> 00:30:27,940
changed we don't allow that

00:30:26,560 --> 00:30:29,560
but it can't do other things like I'm

00:30:27,940 --> 00:30:31,990
gonna pull this live docker image and

00:30:29,560 --> 00:30:35,830
make sure that it sits there and

00:30:31,990 --> 00:30:37,330
accessible and when you're writing

00:30:35,830 --> 00:30:39,130
kubernetes api extensions which I'll

00:30:37,330 --> 00:30:46,510
talk about in a second you can do both

00:30:39,130 --> 00:30:47,860
of these through web hooks so the last

00:30:46,510 --> 00:30:52,170
thing I'm going to talk about is how

00:30:47,860 --> 00:30:53,950
kubernetes api is api's are extensible

00:30:52,170 --> 00:30:55,240
and so i talked about different

00:30:53,950 --> 00:30:57,550
abstraction layers about how you have

00:30:55,240 --> 00:30:58,840
pods but you just don't want to create a

00:30:57,550 --> 00:31:00,810
thousand pod instances they want a

00:30:58,840 --> 00:31:04,300
replica set that does that for them

00:31:00,810 --> 00:31:05,920
then you have replica sets but shifting

00:31:04,300 --> 00:31:07,900
traffic between two different replica

00:31:05,920 --> 00:31:10,180
sets with different pod templates is

00:31:07,900 --> 00:31:11,500
kind of a pain right so we want an

00:31:10,180 --> 00:31:13,090
abstraction on top of that and there's

00:31:11,500 --> 00:31:14,560
how to manage multiple replica sets and

00:31:13,090 --> 00:31:16,870
do rolling updates so we created

00:31:14,560 --> 00:31:19,540
deployments and that's kind of where it

00:31:16,870 --> 00:31:22,600
ends for us right now right is these

00:31:19,540 --> 00:31:24,940
generic api's that allow you to run any

00:31:22,600 --> 00:31:27,490
sort of container with certain common

00:31:24,940 --> 00:31:29,650
properties and then there's also staple

00:31:27,490 --> 00:31:32,200
sets and deployments and daemon sets and

00:31:29,650 --> 00:31:33,100
jobs and there's a couple of them but

00:31:32,200 --> 00:31:36,730
that means when you want to run

00:31:33,100 --> 00:31:39,310
something like MongoDB for instance you

00:31:36,730 --> 00:31:41,350
have to go find a blog post about how to

00:31:39,310 --> 00:31:43,420
run MongoDB right and then you have to

00:31:41,350 --> 00:31:45,310
construct this stateful set and this

00:31:43,420 --> 00:31:46,390
service and then put the right things in

00:31:45,310 --> 00:31:47,770
there and then specify the right

00:31:46,390 --> 00:31:52,390
arguments and so have them specify the

00:31:47,770 --> 00:31:54,970
right environment variables and so it's

00:31:52,390 --> 00:31:57,789
kind of a hassle right it's hard to

00:31:54,970 --> 00:32:01,990
read and each user has to manage all

00:31:57,789 --> 00:32:04,360
that complexity and there's tools too to

00:32:01,990 --> 00:32:08,289
help with this one is called helm which

00:32:04,360 --> 00:32:11,110
is a templating and people can publish

00:32:08,289 --> 00:32:12,909
packages called charts that have all the

00:32:11,110 --> 00:32:14,289
information for creating say am I going

00:32:12,909 --> 00:32:18,820
to be instance and it will spin up a

00:32:14,289 --> 00:32:22,630
staple set and a service for you

00:32:18,820 --> 00:32:24,429
but these aren't kubernetes native api's

00:32:22,630 --> 00:32:26,650
they don't work with coop control apply

00:32:24,429 --> 00:32:30,010
or any of the tooling and they don't

00:32:26,650 --> 00:32:32,260
have the controller logic that

00:32:30,010 --> 00:32:34,780
kubernetes api is to have right so with

00:32:32,260 --> 00:32:36,220
a cloud native kubernetes api you can

00:32:34,780 --> 00:32:38,440
actually look at a specific change and

00:32:36,220 --> 00:32:40,270
instead of just updating a raw value as

00:32:38,440 --> 00:32:42,100
you would with say a template you can

00:32:40,270 --> 00:32:45,090
say okay before i do that i need to do

00:32:42,100 --> 00:32:47,080
this this and this right before i change

00:32:45,090 --> 00:32:49,299
instead of just stamping out a new

00:32:47,080 --> 00:32:50,980
replica set with the same image count or

00:32:49,299 --> 00:32:52,960
the same replica count and deleting the

00:32:50,980 --> 00:32:57,970
old one I'm gonna take a series of steps

00:32:52,960 --> 00:33:00,220
to get from one state to another and so

00:32:57,970 --> 00:33:02,590
you can build all this logic operational

00:33:00,220 --> 00:33:04,659
logic right into a kubernetes api that

00:33:02,590 --> 00:33:07,780
you publish yourself so these are often

00:33:04,659 --> 00:33:10,150
referred to as operators the operator

00:33:07,780 --> 00:33:13,150
pattern and there's a talk here

00:33:10,150 --> 00:33:15,250
and yesterday about operator SDK so

00:33:13,150 --> 00:33:20,950
there's more and more tools coming out

00:33:15,250 --> 00:33:23,820
about building these operators and

00:33:20,950 --> 00:33:26,289
that's because building the controller

00:33:23,820 --> 00:33:30,000
building the resource is not trivial

00:33:26,289 --> 00:33:30,000
there's some real challenges to it where

00:33:30,840 --> 00:33:35,679
the controllers themselves have actually

00:33:34,030 --> 00:33:37,210
very complex logic about how they cache

00:33:35,679 --> 00:33:40,120
data from the API server and set up

00:33:37,210 --> 00:33:42,700
watches reestablish watches if the watch

00:33:40,120 --> 00:33:45,059
time is out and does all this logic and

00:33:42,700 --> 00:33:50,320
setup skewing Message Queuing for you

00:33:45,059 --> 00:33:52,140
and so to just this complexity tools

00:33:50,320 --> 00:33:55,299
such as coop builder and operator sdk

00:33:52,140 --> 00:33:58,539
have published libraries to make it

00:33:55,299 --> 00:33:59,830
simple and in the second half of this

00:33:58,539 --> 00:34:02,860
workshop we're gonna be using one called

00:33:59,830 --> 00:34:05,919
qu builder which is a sub project of API

00:34:02,860 --> 00:34:08,409
machinery and the kubernetes project and

00:34:05,919 --> 00:34:10,809
what qu builder does for you

00:34:08,409 --> 00:34:12,609
is it sets up and initializes a go

00:34:10,809 --> 00:34:14,530
project for you so you have the right

00:34:12,609 --> 00:34:16,210
set of dependencies the right project

00:34:14,530 --> 00:34:17,980
structure the right main file so it

00:34:16,210 --> 00:34:20,559
looks like everyone else's

00:34:17,980 --> 00:34:22,119
and then provides libraries for high

00:34:20,559 --> 00:34:23,770
level abstractions so you just say I

00:34:22,119 --> 00:34:25,569
want to controller I wanted to watch

00:34:23,770 --> 00:34:28,990
this thing and here's the reconcile

00:34:25,569 --> 00:34:31,659
implementation and it will actually

00:34:28,990 --> 00:34:33,369
generate the stubs for that for you so

00:34:31,659 --> 00:34:35,919
while the libraries are pretty simple to

00:34:33,369 --> 00:34:37,899
use and boil it down you still need hook

00:34:35,919 --> 00:34:41,369
it into your system someplace right and

00:34:37,899 --> 00:34:44,470
you still need that initial method name

00:34:41,369 --> 00:34:46,690
and you still need to inject into it a

00:34:44,470 --> 00:34:48,490
quiet for instance right and that sort

00:34:46,690 --> 00:34:50,559
of wiring and boilerplate is a nice

00:34:48,490 --> 00:34:53,889
place that either just gives copy and

00:34:50,559 --> 00:34:55,480
pasted all around or every one does

00:34:53,889 --> 00:34:57,670
slightly differently and then you don't

00:34:55,480 --> 00:35:02,710
have consistency so it'll generate that

00:34:57,670 --> 00:35:06,130
scaffolding for you with some stubs okay

00:35:02,710 --> 00:35:09,490
so going back to what we first talked

00:35:06,130 --> 00:35:11,950
about in the in the slide furnace API is

00:35:09,490 --> 00:35:13,420
our declarative you don't say how you

00:35:11,950 --> 00:35:15,700
want things to change you just say how I

00:35:13,420 --> 00:35:17,920
want them to look now they're

00:35:15,700 --> 00:35:19,450
asynchronous so when you go push the

00:35:17,920 --> 00:35:22,390
changes the system is going to go figure

00:35:19,450 --> 00:35:23,980
out how to make it happen right one nice

00:35:22,390 --> 00:35:25,270
thing about that is if it breaks the

00:35:23,980 --> 00:35:25,900
system is still gonna go figure out how

00:35:25,270 --> 00:35:28,089
to fix it

00:35:25,900 --> 00:35:30,630
right instead of a single operation that

00:35:28,089 --> 00:35:35,140
it completes in it's like okay I'm done

00:35:30,630 --> 00:35:37,059
their level driven I didn't touch on

00:35:35,140 --> 00:35:39,609
this too much but instead of looking at

00:35:37,059 --> 00:35:41,349
individual events they just look at the

00:35:39,609 --> 00:35:43,359
current live state and the current

00:35:41,349 --> 00:35:45,279
desired state and then figure out how to

00:35:43,359 --> 00:35:47,200
match those two things right and so it

00:35:45,279 --> 00:35:49,299
won't if you push three different images

00:35:47,200 --> 00:35:51,490
and say change it change it change it it

00:35:49,299 --> 00:35:54,250
doesn't try and complete each rollout it

00:35:51,490 --> 00:35:56,440
just goes to the latest state that it

00:35:54,250 --> 00:35:59,369
that you should have there's their

00:35:56,440 --> 00:36:02,020
observable with watches of and status

00:35:59,369 --> 00:36:06,130
and there are extensible so you can

00:36:02,020 --> 00:36:08,640
create your own Kronus api's with CRTs

00:36:06,130 --> 00:36:08,640
and controllers

00:36:10,569 --> 00:36:18,049
and so I'm gonna end just a few minutes

00:36:14,720 --> 00:36:19,730
early so that everyone really has a

00:36:18,049 --> 00:36:23,450
chance to go get this set up because

00:36:19,730 --> 00:36:25,819
when I do the workshop next 45 minutes

00:36:23,450 --> 00:36:29,180
is not a lot of time to build from end

00:36:25,819 --> 00:36:32,960
to end a full operator and I don't want

00:36:29,180 --> 00:36:34,250
to slow us down by setting up the

00:36:32,960 --> 00:36:37,549
workshop are setting up the dev

00:36:34,250 --> 00:36:43,720
environments they are there any

00:36:37,549 --> 00:36:43,720
questions yes

00:36:47,120 --> 00:36:51,270
the slides are not in the repo I will be

00:36:49,350 --> 00:36:58,370
publishing them in adding a link to the

00:36:51,270 --> 00:36:58,370
repo afterwards yeah

00:37:17,260 --> 00:37:21,690
let me repeat the question make sure I

00:37:19,240 --> 00:37:23,710
got it right so you have like a Q

00:37:21,690 --> 00:37:26,500
messaging system or something like that

00:37:23,710 --> 00:37:29,170
and you want to auto scale based on the

00:37:26,500 --> 00:37:33,160
size of the queue oh yeah that might be

00:37:29,170 --> 00:37:34,210
a good solution for an operator there's

00:37:33,160 --> 00:37:36,340
probably a couple ways you can do that

00:37:34,210 --> 00:37:39,430
so there are like horizontal pod

00:37:36,340 --> 00:37:41,730
autoscaler exists which knows how to

00:37:39,430 --> 00:37:45,310
scale things like stateful sets and

00:37:41,730 --> 00:37:48,550
deployments and you might be able to

00:37:45,310 --> 00:37:50,580
hook into what metrics it uses to do

00:37:48,550 --> 00:37:55,840
that auto scaling and so that might be

00:37:50,580 --> 00:37:57,520
simpler but if you you could also do it

00:37:55,840 --> 00:38:00,820
through an operator pattern and

00:37:57,520 --> 00:38:02,080
especially if you had logic beyond just

00:38:00,820 --> 00:38:04,180
I want to increase the replica count

00:38:02,080 --> 00:38:11,430
based on this particular metric it'd be

00:38:04,180 --> 00:38:11,430
a good good choice yeah

00:38:18,480 --> 00:38:26,329
yeah great I was expecting that question

00:38:22,310 --> 00:38:28,920
the operator SDK I think so they're

00:38:26,329 --> 00:38:32,730
converging or at least I hope they're

00:38:28,920 --> 00:38:34,349
still converging there is a library set

00:38:32,730 --> 00:38:38,339
called the controller run time which is

00:38:34,349 --> 00:38:40,710
what ku builder uses and as part of the

00:38:38,339 --> 00:38:44,970
workshop you'll see this as an import

00:38:40,710 --> 00:38:47,070
statement operator SDK I believe is

00:38:44,970 --> 00:38:49,230
moving towards being built on top of

00:38:47,070 --> 00:38:51,720
controller runtime and so the idea is

00:38:49,230 --> 00:38:54,990
that while ku builder and operator SDK

00:38:51,720 --> 00:38:57,300
may have different opinions about maybe

00:38:54,990 --> 00:38:59,460
how they scaffold out a particular

00:38:57,300 --> 00:39:01,170
structure under the covers to say it

00:38:59,460 --> 00:39:02,550
they're using like that the direct

00:39:01,170 --> 00:39:08,310
libraries you interact with are the same

00:39:02,550 --> 00:39:12,510
ones that is the hope and I looked at

00:39:08,310 --> 00:39:15,180
the operator SDK repo yesterday and they

00:39:12,510 --> 00:39:19,230
have examples of using the controller

00:39:15,180 --> 00:39:20,730
runtime and it looks the scaffolding

00:39:19,230 --> 00:39:22,770
actually looks very very much like who

00:39:20,730 --> 00:39:28,500
builder so we are seeing convergence

00:39:22,770 --> 00:39:31,880
there also with I think with the

00:39:28,500 --> 00:39:33,810
operator SDK but I know with COO builder

00:39:31,880 --> 00:39:36,150
COO builder just gives you those

00:39:33,810 --> 00:39:38,339
libraries the shared libraries and does

00:39:36,150 --> 00:39:39,750
scaffolding and it doesn't have any

00:39:38,339 --> 00:39:42,630
tools that you need to like build it

00:39:39,750 --> 00:39:44,990
right so when you build it use make or

00:39:42,630 --> 00:39:46,950
use go builder these sorts of things so

00:39:44,990 --> 00:39:49,170
you could create your project with COO

00:39:46,950 --> 00:39:50,400
builder stub out some stuff and then

00:39:49,170 --> 00:39:53,130
delete COO builder forever and

00:39:50,400 --> 00:39:54,240
everything will work from there on out

00:39:53,130 --> 00:39:56,960
and you just have to write your own

00:39:54,240 --> 00:39:56,960
stubs for things

00:40:01,970 --> 00:40:08,970
all right so again set this up and and

00:40:07,140 --> 00:40:12,860
if you don't have a dev environment set

00:40:08,970 --> 00:40:15,480
up raise your hand we can come by with a

00:40:12,860 --> 00:40:20,310
username and password for an account to

00:40:15,480 --> 00:40:21,570
log into and get you set up that way has

00:40:20,310 --> 00:40:27,830
anyone had any trouble setting up the

00:40:21,570 --> 00:40:34,080
dev environment by the way okay great

00:40:27,830 --> 00:40:39,960
any other questions uh yeah that would

00:40:34,080 --> 00:40:41,670
not surprise me at all okay I I don't I

00:40:39,960 --> 00:40:44,640
don't I don't think ku builder is has

00:40:41,670 --> 00:40:47,700
windows binaries pashed so you're going

00:40:44,640 --> 00:40:49,910
to probably want to use one of these

00:40:47,700 --> 00:40:49,910
things

00:40:50,850 --> 00:40:54,560
this guy will bring one to you

00:41:01,890 --> 00:41:11,910
is that a question oh yeah

00:41:06,340 --> 00:41:11,910
oh sorry hands that's confusing isn't it

00:41:13,620 --> 00:41:22,950
alright thanks everyone hello hey hi

00:41:21,460 --> 00:41:26,650
everyone

00:41:22,950 --> 00:41:29,620
alright welcome back so what we're gonna

00:41:26,650 --> 00:41:31,150
do now is we're gonna take everything

00:41:29,620 --> 00:41:32,860
that was talked about in part 1 of this

00:41:31,150 --> 00:41:35,350
workshop if you weren't there don't

00:41:32,860 --> 00:41:38,440
worry about it but if you were there you

00:41:35,350 --> 00:41:40,210
get to take that knowledge about okay

00:41:38,440 --> 00:41:42,490
here's the controller is here's the

00:41:40,210 --> 00:41:45,250
watches here's the directress allies and

00:41:42,490 --> 00:41:47,320
here's what our resource is and actually

00:41:45,250 --> 00:41:51,250
get hands-on experience applying those

00:41:47,320 --> 00:41:55,560
solving a problem which is to make an

00:41:51,250 --> 00:41:55,560
API for creating MongoDB instances yes

00:41:56,190 --> 00:42:07,060
yes I can this is also everyone should

00:42:05,470 --> 00:42:09,310
be able to go access this github page

00:42:07,060 --> 00:42:13,900
and I everyone should just pull this up

00:42:09,310 --> 00:42:17,190
now it's uh if you have a slip it's you

00:42:13,900 --> 00:42:17,190
can get it through that link here all

00:42:21,090 --> 00:42:27,850
okay workshop doc to builder dot IO go

00:42:25,810 --> 00:42:30,330
pull this up because mmm you'll want to

00:42:27,850 --> 00:42:36,390
be able to copy and paste from the

00:42:30,330 --> 00:42:40,840
instructions there so we're gonna do is

00:42:36,390 --> 00:42:42,580
we're going to build the MongoDB API

00:42:40,840 --> 00:42:44,440
right in so at the end of this you

00:42:42,580 --> 00:42:47,800
should be able to write a control llamó

00:42:44,440 --> 00:42:51,970
file that says the group is databases

00:42:47,800 --> 00:42:55,120
the version is v1 bado and the kind is

00:42:51,970 --> 00:42:56,650
MongoDB I set the replicas in the

00:42:55,120 --> 00:42:58,510
storage and then run apply and then

00:42:56,650 --> 00:43:00,280
we'll actually bring up a staple set in

00:42:58,510 --> 00:43:01,630
the service that are running those the

00:43:00,280 --> 00:43:04,080
same way a deployment brings up proplica

00:43:01,630 --> 00:43:04,080
sets

00:43:08,239 --> 00:43:15,779
so steps we're gonna go through our

00:43:10,669 --> 00:43:18,479
we're going to first use ku builder to

00:43:15,779 --> 00:43:22,769
create stubs for the controller and the

00:43:18,479 --> 00:43:24,089
resources ku builder will have already

00:43:22,769 --> 00:43:27,299
set up the project for you if you

00:43:24,089 --> 00:43:28,529
followed prerequisites and if you if you

00:43:27,299 --> 00:43:30,150
haven't we haven't troubled that raise

00:43:28,529 --> 00:43:32,429
your hand we can have someone come by

00:43:30,150 --> 00:43:36,509
and help you but hopefully if you're

00:43:32,429 --> 00:43:39,239
this far you finish those so goo builder

00:43:36,509 --> 00:43:40,890
will up set up the project for you and

00:43:39,239 --> 00:43:43,890
now we want to go ahead and create an

00:43:40,890 --> 00:43:47,039
API and so we tell ku builder create API

00:43:43,890 --> 00:43:49,769
is gonna give it the group in the

00:43:47,039 --> 00:43:52,289
version and the kind which are what to

00:43:49,769 --> 00:43:53,549
find the resource type and then it's

00:43:52,289 --> 00:43:56,099
gonna ask you do you want me to create

00:43:53,549 --> 00:43:58,140
the resource for that you say yes and

00:43:56,099 --> 00:44:02,369
they'll say do you want me to create the

00:43:58,140 --> 00:44:07,049
controller for that say yes and then

00:44:02,369 --> 00:44:09,809
we're gonna complete the filling out the

00:44:07,049 --> 00:44:13,799
spec of the resource stub updating the

00:44:09,809 --> 00:44:14,880
watches and updating the reconcile for

00:44:13,799 --> 00:44:17,669
each one of the steps there's a break

00:44:14,880 --> 00:44:19,499
glass there's a completed solution

00:44:17,669 --> 00:44:22,469
inside this repo so you can click on

00:44:19,499 --> 00:44:23,549
that and then you can say see what the

00:44:22,469 --> 00:44:25,890
code is actually supposed to look like

00:44:23,549 --> 00:44:30,150
so I'll click on that here and it's kind

00:44:25,890 --> 00:44:31,289
of small but you can see that there's

00:44:30,150 --> 00:44:34,019
some code here that shows you how it's

00:44:31,289 --> 00:44:37,199
supposed to look so step one is going to

00:44:34,019 --> 00:44:40,849
be to update the schema and add a

00:44:37,199 --> 00:44:43,049
replicas in a storage field to it

00:44:40,849 --> 00:44:44,759
step two is going to be update the

00:44:43,049 --> 00:44:48,029
watches right so we want our controller

00:44:44,759 --> 00:44:51,509
to be have reconcile run on the MongoDB

00:44:48,029 --> 00:44:55,650
instance whenever a change happens for a

00:44:51,509 --> 00:45:00,299
staple set a service or the MongoDB

00:44:55,650 --> 00:45:02,609
instance and the third thing we're going

00:45:00,299 --> 00:45:05,189
to do is have reconcile go ahead and

00:45:02,609 --> 00:45:07,549
create that staple set and create that

00:45:05,189 --> 00:45:07,549
service

00:45:09,480 --> 00:45:12,240
and that's probably gonna be the hardest

00:45:10,530 --> 00:45:13,619
part and there's a bunch of notes in

00:45:12,240 --> 00:45:16,260
here about how to do that stuff and when

00:45:13,619 --> 00:45:19,050
you do that I've given you utilities

00:45:16,260 --> 00:45:21,000
that go and provide a struct that has

00:45:19,050 --> 00:45:23,010
the staple set to create and provide a

00:45:21,000 --> 00:45:24,599
service that has struck that as the

00:45:23,010 --> 00:45:25,920
service to create so that you don't have

00:45:24,599 --> 00:45:27,150
to figure out and fill all that stuff in

00:45:25,920 --> 00:45:28,920
because that's not the interesting part

00:45:27,150 --> 00:45:31,550
you could go home and you could figure

00:45:28,920 --> 00:45:33,869
out how do I run MongoDB on kubernetes

00:45:31,550 --> 00:45:38,490
and a staple set and then go fill in

00:45:33,869 --> 00:45:39,720
that structure self or change it and

00:45:38,490 --> 00:45:44,790
then we're gonna go and run it inside a

00:45:39,720 --> 00:45:48,030
cluster so I'm gonna go through this

00:45:44,790 --> 00:45:52,440
step-by-step with you if I'm going too

00:45:48,030 --> 00:45:55,500
slow just blaze ahead because I'm gonna

00:45:52,440 --> 00:45:57,359
wait for everyone to catch up if you get

00:45:55,500 --> 00:45:58,530
stuck for whatever reason and you can't

00:45:57,359 --> 00:45:59,849
get the break glass working you can

00:45:58,530 --> 00:46:02,700
either raise your hand or you can just

00:45:59,849 --> 00:46:06,119
follow along and you can see what what

00:46:02,700 --> 00:46:14,010
it looks like when I do it so is

00:46:06,119 --> 00:46:19,050
everyone able to read this I have an ID

00:46:14,010 --> 00:46:20,790
set up here I am lucky in that I can

00:46:19,050 --> 00:46:22,349
actually use an ID because I have it set

00:46:20,790 --> 00:46:24,540
up locally if you happen to be using a

00:46:22,349 --> 00:46:29,819
slip I'm sorry I hope your VIN skills

00:46:24,540 --> 00:46:32,160
are strong and so I'm gonna do is I'm

00:46:29,819 --> 00:46:35,480
gonna go ahead and say from within the

00:46:32,160 --> 00:46:37,560
project within the cue builder project

00:46:35,480 --> 00:46:43,680
go ahead and create the stubs for those

00:46:37,560 --> 00:46:45,300
api's say yes yes and so it says writing

00:46:43,680 --> 00:46:47,190
scaffold for you to edit I'm writing a

00:46:45,300 --> 00:46:49,589
types file for you I'm running a test

00:46:47,190 --> 00:46:52,550
for that file so we'll check the storage

00:46:49,589 --> 00:46:55,319
and make sure it works correctly I am

00:46:52,550 --> 00:46:58,290
writing the controller stub for you and

00:46:55,319 --> 00:47:00,660
a controller test for you and then it

00:46:58,290 --> 00:47:04,380
will go and generate some code the

00:47:00,660 --> 00:47:07,859
format go format go bed it generate the

00:47:04,380 --> 00:47:11,790
CR D which is how the resource gets

00:47:07,859 --> 00:47:14,010
registered at our back rules so you can

00:47:11,790 --> 00:47:17,490
run it inside a cluster and have access

00:47:14,010 --> 00:47:18,810
to the API is they'll run the tests and

00:47:17,490 --> 00:47:23,030
we'll go build it so just everyone go

00:47:18,810 --> 00:47:23,030
ahead and do that if you haven't already

00:47:27,220 --> 00:47:35,540
that's gonna create this type psycho

00:47:29,510 --> 00:47:38,090
file it says edit this file and it has

00:47:35,540 --> 00:47:40,970
down here the MongoDB struct that has

00:47:38,090 --> 00:47:43,340
type meta which we talked about earlier

00:47:40,970 --> 00:47:46,460
the object meta which we also talked

00:47:43,340 --> 00:47:48,350
about spec and the status and so it's

00:47:46,460 --> 00:47:50,480
our job to go and define the spec in the

00:47:48,350 --> 00:47:56,300
status and we'll forget about status for

00:47:50,480 --> 00:48:04,040
now we'll just focus on just Beck so I'm

00:47:56,300 --> 00:48:06,190
going to insert in here the fields we

00:48:04,040 --> 00:48:06,190
line

00:48:07,750 --> 00:48:13,960
so this is going to add a optional

00:48:10,830 --> 00:48:18,160
integer field for replicas and an

00:48:13,960 --> 00:48:19,870
optional string field for storage and

00:48:18,160 --> 00:48:22,690
there's an explanation on the readme

00:48:19,870 --> 00:48:25,990
about what each how to make these

00:48:22,690 --> 00:48:28,810
optional because there are a couple

00:48:25,990 --> 00:48:30,870
things you need to hit okay so that's it

00:48:28,810 --> 00:48:33,820
my schema is defined we have a MongoDB

00:48:30,870 --> 00:48:42,940
resource with your 8 with replicas field

00:48:33,820 --> 00:48:46,090
and a storage field now let's give

00:48:42,940 --> 00:48:48,570
everyone a minute to make sure they're

00:48:46,090 --> 00:48:48,570
up to speed

00:48:58,790 --> 00:49:07,220
so the next step we're gonna do is we're

00:49:02,900 --> 00:49:11,390
going to add the watches for the MongoDB

00:49:07,220 --> 00:49:13,660
instance the way this is done is the

00:49:11,390 --> 00:49:16,370
controller was stubbed out for us here

00:49:13,660 --> 00:49:19,670
in was it has an ad function when thad

00:49:16,370 --> 00:49:22,610
function does is it's called to register

00:49:19,670 --> 00:49:24,650
the controller with the main program and

00:49:22,610 --> 00:49:25,730
you can create multiple controllers by

00:49:24,650 --> 00:49:27,920
writing the queue builder command over

00:49:25,730 --> 00:49:30,560
and over again they all live inside the

00:49:27,920 --> 00:49:33,200
same binary and this actually has some

00:49:30,560 --> 00:49:34,910
nice properties because it allows caches

00:49:33,200 --> 00:49:37,490
to be shared which are heavily relied

00:49:34,910 --> 00:49:39,470
upon actually this is how we run things

00:49:37,490 --> 00:49:41,630
in kubernetes as we have a single

00:49:39,470 --> 00:49:46,310
controller manager binary where all the

00:49:41,630 --> 00:49:49,360
controllers running so we'll go and open

00:49:46,310 --> 00:49:52,750
that file and look at that add function

00:49:49,360 --> 00:49:52,750
which is called

00:49:56,190 --> 00:50:00,390
and that's gonna call this controller

00:49:57,990 --> 00:50:05,430
new thing that creates a new empty

00:50:00,390 --> 00:50:07,800
controller for us right in passes Anna

00:50:05,430 --> 00:50:10,170
reconcile this looks a little bit weird

00:50:07,800 --> 00:50:11,579
it's mainly constructed this way so that

00:50:10,170 --> 00:50:15,300
you can stop out different pieces for

00:50:11,579 --> 00:50:16,829
testing makes it a little easier but

00:50:15,300 --> 00:50:22,579
ultimately this add function gets called

00:50:16,829 --> 00:50:25,650
and it passes in this reconcile

00:50:22,579 --> 00:50:26,670
reconciler and a manager so you have a

00:50:25,650 --> 00:50:27,990
new controller that's gonna call the

00:50:26,670 --> 00:50:31,280
reconcile and now we would configure

00:50:27,990 --> 00:50:35,220
that to watch I'm going to be instances

00:50:31,280 --> 00:50:37,140
services and staple sets and so subbed

00:50:35,220 --> 00:50:39,750
out for us actually watching MongoDB

00:50:37,140 --> 00:50:42,210
instances because of course you're going

00:50:39,750 --> 00:50:43,829
to want to do that you're writing

00:50:42,210 --> 00:50:46,680
controller you said you wanted to write

00:50:43,829 --> 00:50:48,839
a controller for I'm going to be and so

00:50:46,680 --> 00:50:50,790
as this work you the queue requests for

00:50:48,839 --> 00:50:53,970
object who essentially says if I see an

00:50:50,790 --> 00:50:56,760
event for this thing go ahead and do

00:50:53,970 --> 00:50:59,790
reconcile on that thing using that same

00:50:56,760 --> 00:51:01,290
key and then it also stubbed out this

00:50:59,790 --> 00:51:03,960
other thing for us and it turns out what

00:51:01,290 --> 00:51:08,130
the stub did is he created a controller

00:51:03,960 --> 00:51:09,359
that creates deployments because most of

00:51:08,130 --> 00:51:10,680
the things people want to do kind of

00:51:09,359 --> 00:51:12,270
look like I want to create a deployment

00:51:10,680 --> 00:51:13,410
right maybe I want to create a sinful

00:51:12,270 --> 00:51:14,640
said maybe I want to create a deployment

00:51:13,410 --> 00:51:16,319
maybe want to create a couple things

00:51:14,640 --> 00:51:18,180
essentially I want to create some sort

00:51:16,319 --> 00:51:21,510
of kubernetes resource and then manage

00:51:18,180 --> 00:51:24,980
it right and then when a change happens

00:51:21,510 --> 00:51:28,470
on that thing I want to be notified so

00:51:24,980 --> 00:51:30,300
we have this watch statement here that

00:51:28,470 --> 00:51:32,250
has a deployment and says in queue

00:51:30,300 --> 00:51:36,060
request for owner and the owner type is

00:51:32,250 --> 00:51:38,940
MongoDB and the kind is a deployment so

00:51:36,060 --> 00:51:41,970
I'm gonna change that to be a stateful

00:51:38,940 --> 00:51:47,970
set and then I copied it and I'm gonna

00:51:41,970 --> 00:51:49,410
change one to be a service they changed

00:51:47,970 --> 00:51:51,869
the package name here and that's because

00:51:49,410 --> 00:51:53,940
staple sets live in the apps v1 package

00:51:51,869 --> 00:51:58,579
which is imported at the top then

00:51:53,940 --> 00:51:58,579
services live in the core v1 package

00:52:02,490 --> 00:52:08,080
so that's it we have now successfully

00:52:05,170 --> 00:52:10,750
created a controller that does some

00:52:08,080 --> 00:52:13,000
reconcile we haven't implemented yet but

00:52:10,750 --> 00:52:15,400
does get triggered anytime there's a

00:52:13,000 --> 00:52:17,740
change on the MongoDB instance on a

00:52:15,400 --> 00:52:19,330
stateful set and on a service it but it

00:52:17,740 --> 00:52:21,840
will always reconcile the MongoDB

00:52:19,330 --> 00:52:21,840
instance

00:52:26,980 --> 00:52:35,950
so that is step two and there's

00:52:29,859 --> 00:52:37,840
documentation hear about those watch

00:52:35,950 --> 00:52:39,190
functions right because I kind of just

00:52:37,840 --> 00:52:43,300
show you how to scratch the surface but

00:52:39,190 --> 00:52:46,510
you can do implement arbitrary ways of

00:52:43,300 --> 00:52:47,920
mapping objects to one another so

00:52:46,510 --> 00:52:49,119
instead of just through the owners

00:52:47,920 --> 00:52:51,790
reference you can do it through

00:52:49,119 --> 00:52:53,230
something you can cocked having data and

00:52:51,790 --> 00:52:57,359
int annotations or different label

00:52:53,230 --> 00:52:57,359
selectors or any other number of things

00:53:04,200 --> 00:53:09,829
okay is anyone still working on the

00:53:07,470 --> 00:53:09,829
watch

00:53:11,060 --> 00:53:16,970
I'll give it a couple more minutes

00:53:13,250 --> 00:53:18,810
because we got 30 minutes left to

00:53:16,970 --> 00:53:20,060
complete this so we're about halfway

00:53:18,810 --> 00:53:22,770
there

00:53:20,060 --> 00:53:23,760
so I'll just say the next thing we're

00:53:22,770 --> 00:53:25,320
gonna do is we're gonna create the

00:53:23,760 --> 00:53:29,430
reconcile and the reconcile what we want

00:53:25,320 --> 00:53:31,380
to do is create a sample set that runs a

00:53:29,430 --> 00:53:35,579
MongoDB container it's configured a

00:53:31,380 --> 00:53:37,680
specific way now the details of that

00:53:35,579 --> 00:53:40,500
staple site contents are not the focus

00:53:37,680 --> 00:53:44,369
of this I'd also create a service that

00:53:40,500 --> 00:53:46,650
matches it if they don't exist if either

00:53:44,369 --> 00:53:47,790
one does exist they want to compare what

00:53:46,650 --> 00:53:50,730
are those what are the ones that exist

00:53:47,790 --> 00:53:52,410
look like compared to the ones I think

00:53:50,730 --> 00:53:55,829
we should have does the storage match

00:53:52,410 --> 00:53:57,839
does the replicas match and if they

00:53:55,829 --> 00:54:00,750
don't match what we want to do is change

00:53:57,839 --> 00:54:02,609
the fields on the live ones to match

00:54:00,750 --> 00:54:04,829
shall we expect them to be this is

00:54:02,609 --> 00:54:07,109
different than just overriding them

00:54:04,829 --> 00:54:08,369
completely because the service has a

00:54:07,109 --> 00:54:12,170
cluster IP that we don't want to wipe

00:54:08,369 --> 00:54:12,170
out so we want to keep that on there

00:54:12,980 --> 00:54:19,680
I've provided these functions here for

00:54:15,810 --> 00:54:23,010
you so if you are using one of the slips

00:54:19,680 --> 00:54:26,599
to log in or you cloned the prereqs

00:54:23,010 --> 00:54:29,550
project then you will have this package

00:54:26,599 --> 00:54:30,900
that has those functions in it and you

00:54:29,550 --> 00:54:33,720
can go look at the code and see what's

00:54:30,900 --> 00:54:37,290
being created there if you did not clone

00:54:33,720 --> 00:54:38,940
the prereqs repo and you did not use a

00:54:37,290 --> 00:54:40,890
slip but instead decided to set up when

00:54:38,940 --> 00:54:43,890
I'm up from scratch using cout builder

00:54:40,890 --> 00:54:46,740
in it which is a great thing to do it

00:54:43,890 --> 00:54:49,680
will not have these utilities that are

00:54:46,740 --> 00:54:52,230
here and so instead what you need to do

00:54:49,680 --> 00:54:54,569
is you need to go and copy these into

00:54:52,230 --> 00:54:59,310
your project write and create a package

00:54:54,569 --> 00:55:01,950
util package copy that go code in there

00:54:59,310 --> 00:55:08,910
and make sure the import matches so

00:55:01,950 --> 00:55:10,349
whatever go package you're using for

00:55:08,910 --> 00:55:13,040
your project just make sure that that's

00:55:10,349 --> 00:55:13,040
what you import

00:55:16,599 --> 00:55:22,760
okay so I'm gonna scroll down here to

00:55:19,630 --> 00:55:26,329
the reconcile and it has all this please

00:55:22,760 --> 00:55:28,240
update me stuff there's this Auerbach

00:55:26,329 --> 00:55:32,030
thing which we're gonna ignore for now

00:55:28,240 --> 00:55:36,559
then there's the first thing it does is

00:55:32,030 --> 00:55:39,020
it gets the MongoDB instance that that

00:55:36,559 --> 00:55:40,819
has the name in namespace for all right

00:55:39,020 --> 00:55:42,319
so it calls this get the way this is

00:55:40,819 --> 00:55:44,420
done as you provide instance of the

00:55:42,319 --> 00:55:45,710
structu the get method and thing goes

00:55:44,420 --> 00:55:46,849
looks it up and writes it in there and

00:55:45,710 --> 00:55:49,849
then gives you an error if it doesn't

00:55:46,849 --> 00:55:51,109
exist right so if it's not found then we

00:55:49,849 --> 00:55:52,930
just returned and say okay that thing is

00:55:51,109 --> 00:55:54,950
gone garbage collection will handle

00:55:52,930 --> 00:55:57,290
deleting the staple set and service we

00:55:54,950 --> 00:56:00,470
don't need to do anything otherwise we

00:55:57,290 --> 00:56:02,809
found it in the standout code that

00:56:00,470 --> 00:56:03,799
creates a deployment for us here and we

00:56:02,809 --> 00:56:07,609
don't actually want to create a

00:56:03,799 --> 00:56:09,530
deployment but we want to create is a

00:56:07,609 --> 00:56:12,410
service so we're gonna go ahead and

00:56:09,530 --> 00:56:17,059
delete that I say instead generate

00:56:12,410 --> 00:56:18,859
service this is a function that will go

00:56:17,059 --> 00:56:22,069
ahead and create a service for us and

00:56:18,859 --> 00:56:25,180
I'll just open this briefly and it has

00:56:22,069 --> 00:56:27,859
similar code that we saw before where it

00:56:25,180 --> 00:56:29,420
creates a struct and returns the address

00:56:27,859 --> 00:56:31,280
of that struct right and fills in some

00:56:29,420 --> 00:56:36,920
stuff like the port number and the name

00:56:31,280 --> 00:56:39,079
and label selector so right now we have

00:56:36,920 --> 00:56:42,430
a service instance called deploy maybe

00:56:39,079 --> 00:56:45,829
we should change that let's call it

00:56:42,430 --> 00:56:48,200
service okay again I'm sorry if you're

00:56:45,829 --> 00:56:50,150
on VI and don't have the search and

00:56:48,200 --> 00:56:52,460
replace down it might take you a little

00:56:50,150 --> 00:56:55,089
bit longer to go ahead and replace all

00:56:52,460 --> 00:56:55,089
these references

00:56:57,930 --> 00:57:04,530
so the first thing it's going to do it's

00:57:02,339 --> 00:57:07,380
going to go the code the existing code

00:57:04,530 --> 00:57:09,000
goes and looks up hey is there

00:57:07,380 --> 00:57:10,829
deployment before I create one but what

00:57:09,000 --> 00:57:13,050
we want to do is see is there a service

00:57:10,829 --> 00:57:16,829
before we create one so we're gonna

00:57:13,050 --> 00:57:20,540
instead change this to go look up a

00:57:16,829 --> 00:57:22,890
service right so now we changed the type

00:57:20,540 --> 00:57:24,270
what it fetches was based off the type

00:57:22,890 --> 00:57:25,410
so the client goes and looks and see

00:57:24,270 --> 00:57:26,940
this is a service and we'll fetch the

00:57:25,410 --> 00:57:31,050
service it was a deployment before it

00:57:26,940 --> 00:57:34,920
was gonna fetch a deployment so he goes

00:57:31,050 --> 00:57:36,720
and tries to get this thing says ok if

00:57:34,920 --> 00:57:39,599
there is a not found error that is it

00:57:36,720 --> 00:57:42,740
couldn't find the deployment then it's

00:57:39,599 --> 00:57:42,740
going to go ahead and create the service

00:57:43,460 --> 00:57:49,500
otherwise it did find something

00:57:47,760 --> 00:57:52,349
and so the stubbed-out code to something

00:57:49,500 --> 00:57:54,450
very stupid or simple right which is

00:57:52,349 --> 00:57:56,099
just does a DB equals on the specs and

00:57:54,450 --> 00:57:57,980
sees if they match and this doesn't even

00:57:56,099 --> 00:58:00,990
work that well because a lot of the

00:57:57,980 --> 00:58:05,160
fields get defaulted and so it's kind of

00:58:00,990 --> 00:58:07,319
a heuristic but it helps guide users we

00:58:05,160 --> 00:58:12,420
want to get rid of that instead we want

00:58:07,319 --> 00:58:14,099
to check the fields for the service and

00:58:12,420 --> 00:58:16,829
so I have this function here that will

00:58:14,099 --> 00:58:19,460
copy fields from the service Hugh

00:58:16,829 --> 00:58:23,940
generated to the service that was read

00:58:19,460 --> 00:58:25,170
and then return true if they didn't

00:58:23,940 --> 00:58:27,569
equal each other if I did any copies

00:58:25,170 --> 00:58:32,790
because if they weren't the same you're

00:58:27,569 --> 00:58:35,250
going have to update it so it copies the

00:58:32,790 --> 00:58:38,780
fields and if they're if they changed go

00:58:35,250 --> 00:58:38,780
ahead and call update

00:58:42,190 --> 00:58:47,330
so what have we done first read the

00:58:45,140 --> 00:58:50,120
MongoDB instance check if it's there

00:58:47,330 --> 00:58:52,010
then go figure out what service we

00:58:50,120 --> 00:58:54,350
should be creating for this MongoDB

00:58:52,010 --> 00:58:55,700
instance to run it we're gonna set the

00:58:54,350 --> 00:58:57,740
controller reference here this is like

00:58:55,700 --> 00:58:59,570
the owners reference that I talked about

00:58:57,740 --> 00:59:02,120
in the other talk so make sure that the

00:58:59,570 --> 00:59:03,500
service we create points back to the

00:59:02,120 --> 00:59:07,310
MongoDB instance and it gets garbage

00:59:03,500 --> 00:59:09,920
collected then go read that service see

00:59:07,310 --> 00:59:14,300
if we can find it if we can't go ahead

00:59:09,920 --> 00:59:16,220
and create it if we can go ahead and

00:59:14,300 --> 00:59:18,830
update it by copying the fields from the

00:59:16,220 --> 00:59:23,720
one we generated to the one we found and

00:59:18,830 --> 00:59:29,020
calling update so we're going to do the

00:59:23,720 --> 00:59:29,020
same thing for our steeple set

00:59:33,590 --> 00:59:44,660
so it's gonna take the instance it's

00:59:37,310 --> 00:59:46,580
also going to take the replicas and the

00:59:44,660 --> 00:59:47,690
storage and the reason it takes the

00:59:46,580 --> 00:59:49,790
replicas and storage of separate

00:59:47,690 --> 00:59:51,800
arguments is because when I wrote these

00:59:49,790 --> 00:59:53,870
functions the types haven't been defined

00:59:51,800 --> 00:59:56,300
yet so I can't accept it as a type and

00:59:53,870 --> 00:59:58,400
have it compiled otherwise if you were

00:59:56,300 --> 01:00:01,070
to refactor this code now you could just

00:59:58,400 --> 01:00:04,840
delete those as additional arguments and

01:00:01,070 --> 01:00:04,840
have it take the model a to the instance

01:00:06,370 --> 01:00:12,370
then they need to go and do a copy-paste

01:00:09,020 --> 01:00:12,370
update all over the place

01:01:08,180 --> 01:01:13,200
alright did I get everything that's

01:01:10,170 --> 01:01:14,789
always the challenge is making sure you

01:01:13,200 --> 01:01:17,430
don't copy and paste too much and you

01:01:14,789 --> 01:01:20,329
got your search and replace human driven

01:01:17,430 --> 01:01:20,329
search and replace down

01:01:29,560 --> 01:01:37,970
so we should now have a reconcile method

01:01:34,510 --> 01:01:39,170
that will be called with the reconcile

01:01:37,970 --> 01:01:41,690
request containing the name and

01:01:39,170 --> 01:01:44,570
namespace of among going to be instance

01:01:41,690 --> 01:01:47,420
in response to any changes to us staple

01:01:44,570 --> 01:01:48,500
set with a MongoDB controller a service

01:01:47,420 --> 01:01:53,660
with the MongoDB controller or the

01:01:48,500 --> 01:01:57,530
MongoDB instance itself and then it will

01:01:53,660 --> 01:02:02,830
go and create these things so I'm going

01:01:57,530 --> 01:02:02,830
to go ahead and do make

01:02:11,220 --> 01:02:16,000
I'm gonna go check no customer resource

01:02:13,750 --> 01:02:19,780
definitions running so in a minute I'm

01:02:16,000 --> 01:02:21,370
gonna go and kick this off by having it

01:02:19,780 --> 01:02:24,280
install that is generate this here at

01:02:21,370 --> 01:02:26,080
ease and then control apply them to

01:02:24,280 --> 01:02:29,410
write them into the cluster that I

01:02:26,080 --> 01:02:30,820
pointed out and then say make run which

01:02:29,410 --> 01:02:35,050
will run in that controller locally as a

01:02:30,820 --> 01:02:37,540
process on my death station normally

01:02:35,050 --> 01:02:41,050
when you do this you would publish a cou

01:02:37,540 --> 01:02:42,720
control yamo file that has all the CR DS

01:02:41,050 --> 01:02:44,620
and has the controller as a container

01:02:42,720 --> 01:02:47,260
compiled and built in and someone can

01:02:44,620 --> 01:02:48,460
coop control apply that um will file and

01:02:47,260 --> 01:02:49,240
it would just run in their cluster and

01:02:48,460 --> 01:02:51,100
they don't have someone with their

01:02:49,240 --> 01:02:52,120
laptop running the controller but when

01:02:51,100 --> 01:02:55,570
you're doing development it's a lot

01:02:52,120 --> 01:02:57,280
easier to skip that step and just have

01:02:55,570 --> 01:02:59,590
it run here and that works because the

01:02:57,280 --> 01:03:01,960
controller since the watch the API

01:02:59,590 --> 01:03:03,790
server so the API server doesn't need to

01:03:01,960 --> 01:03:05,620
know about this thing and you don't need

01:03:03,790 --> 01:03:07,570
to have the cluster being able to reach

01:03:05,620 --> 01:03:12,700
out and connect to my local machine the

01:03:07,570 --> 01:03:15,760
machine connects to the cluster has

01:03:12,700 --> 01:03:23,380
anyone still working on updating the

01:03:15,760 --> 01:03:26,020
reconcile function okay I do realize it

01:03:23,380 --> 01:03:30,100
takes a while to go and update all those

01:03:26,020 --> 01:03:31,660
things it's quite challenging rather I

01:03:30,100 --> 01:03:39,250
found it time-consuming when I was doing

01:03:31,660 --> 01:03:44,590
it myself okay so we're gonna call make

01:03:39,250 --> 01:03:47,610
install says I generated CR DS that

01:03:44,590 --> 01:03:50,080
generated our back file our back rolls

01:03:47,610 --> 01:03:54,060
which we won't be using because we're

01:03:50,080 --> 01:03:54,060
not running in cluster running locally

01:03:59,030 --> 01:04:03,510
we can see the customer resource

01:04:00,990 --> 01:04:06,030
definition there I'm going to do make

01:04:03,510 --> 01:04:08,970
run now this is gonna start up walking

01:04:06,030 --> 01:04:12,810
process which is the controller that

01:04:08,970 --> 01:04:14,930
creates those things or that actuates

01:04:12,810 --> 01:04:17,160
this resource you can see it there

01:04:14,930 --> 01:04:18,330
starting the command and I'm going to

01:04:17,160 --> 01:04:20,400
send that into the background because it

01:04:18,330 --> 01:04:24,000
blocks so now it's running in the

01:04:20,400 --> 01:04:31,530
background and I'm going to go use cout

01:04:24,000 --> 01:04:34,980
control apply to create an instance so

01:04:31,530 --> 01:04:36,930
one thing that cout builder does for you

01:04:34,980 --> 01:04:38,960
as it goes ahead and spits out a sample

01:04:36,930 --> 01:04:41,610
file for you whenever it creates that

01:04:38,960 --> 01:04:46,350
resource and this just makes it really

01:04:41,610 --> 01:04:47,730
easy to skip the step of looking up this

01:04:46,350 --> 01:04:49,470
particular format

01:04:47,730 --> 01:04:51,600
maybe copying pasting a deployment and

01:04:49,470 --> 01:04:53,550
then changing the API version in the

01:04:51,600 --> 01:04:56,210
kind and the metadata and all this stuff

01:04:53,550 --> 01:04:59,900
which is always just an extra step that

01:04:56,210 --> 01:04:59,900
you don't learn much from

01:05:04,249 --> 01:05:10,589
so this is the goal right was to be able

01:05:08,309 --> 01:05:11,999
to define this file here that just says

01:05:10,589 --> 01:05:14,519
hey when am I going to be instance with

01:05:11,999 --> 01:05:16,980
this replica with one replica and this

01:05:14,519 --> 01:05:18,119
much storage and have the API go and

01:05:16,980 --> 01:05:20,490
build this thing right

01:05:18,119 --> 01:05:21,960
and ideally continue to watch it and do

01:05:20,490 --> 01:05:25,289
whatever it takes to make it keep it

01:05:21,960 --> 01:05:27,809
healthy so I'm going to take that and

01:05:25,289 --> 01:05:29,190
I'm going to update the sample so now

01:05:27,809 --> 01:05:36,109
the sample has the real fields that

01:05:29,190 --> 01:05:39,559
we're using and then I'm going to run

01:05:36,109 --> 01:05:39,559
cube CTL

01:05:44,750 --> 01:05:48,109
okay and what I expect to happen because

01:05:47,210 --> 01:05:49,609
the controller's running in the

01:05:48,109 --> 01:05:50,990
background this is gonna spit out

01:05:49,609 --> 01:05:53,619
something saying hey I'm going in

01:05:50,990 --> 01:05:53,619
creating these things

01:05:59,410 --> 01:06:05,619
so there you go it actually says it's

01:06:03,549 --> 01:06:07,240
updating these things too and that is

01:06:05,619 --> 01:06:09,130
because my copy functions don't do a

01:06:07,240 --> 01:06:12,130
great job of actually detecting changes

01:06:09,130 --> 01:06:13,119
because of all the defaulting there's

01:06:12,130 --> 01:06:15,549
actually a lot of fields that get

01:06:13,119 --> 01:06:18,309
defaulted so when it compares them they

01:06:15,549 --> 01:06:19,329
don't line up correctly and so if you

01:06:18,309 --> 01:06:21,280
were to go in and do a better job of

01:06:19,329 --> 01:06:22,990
this you'd go look at that copy function

01:06:21,280 --> 01:06:25,599
and then you'd figure out what gets

01:06:22,990 --> 01:06:27,280
defaulted in where and then you'd make

01:06:25,599 --> 01:06:30,010
sure that you didn't false the positive

01:06:27,280 --> 01:06:32,460
an update on those things but for now

01:06:30,010 --> 01:06:40,480
we're happy because this is a workshop

01:06:32,460 --> 01:06:43,539
so oops I didn't post that change you

01:06:40,480 --> 01:06:47,619
can do this so I have a list of things

01:06:43,539 --> 01:06:50,130
you can get you can actually do them all

01:06:47,619 --> 01:06:56,470
in one line comma separated no spaces

01:06:50,130 --> 01:06:59,980
services Steve Paul sets so what I just

01:06:56,470 --> 01:07:01,809
asked for is give me the manga to be

01:06:59,980 --> 01:07:06,220
instance in the services that you have

01:07:01,809 --> 01:07:07,510
on the staple sets and the pots right

01:07:06,220 --> 01:07:09,099
and so it spits them out you can see

01:07:07,510 --> 01:07:11,710
there's one bong would it be instance

01:07:09,099 --> 01:07:14,920
there with an age of one minute we have

01:07:11,710 --> 01:07:18,089
the service with the cluster IP there is

01:07:14,920 --> 01:07:21,970
the staple set that has one desired

01:07:18,089 --> 01:07:25,119
replica and one current replica and then

01:07:21,970 --> 01:07:26,829
it has a single pod here and the ready

01:07:25,119 --> 01:07:29,910
to of tooth's means there are two

01:07:26,829 --> 01:07:33,430
containers running in that thing

01:07:29,910 --> 01:07:36,130
not that there's two replicas and the

01:07:33,430 --> 01:07:37,809
status is running mines running right

01:07:36,130 --> 01:07:39,760
away because I've already pulled this

01:07:37,809 --> 01:07:42,849
container for the rest of you it may say

01:07:39,760 --> 01:07:44,589
container creating for a while as the

01:07:42,849 --> 01:07:48,539
pod pulls down that image and then

01:07:44,589 --> 01:07:51,910
begins to run it but eventually will run

01:07:48,539 --> 01:07:54,990
and if it doesn't let me know so you can

01:07:51,910 --> 01:08:00,609
do fun things now like qu control logs

01:07:54,990 --> 01:08:03,750
and then give it the name of the

01:08:00,609 --> 01:08:05,980
container and then go see some logs

01:08:03,750 --> 01:08:07,690
let's go really check and make sure that

01:08:05,980 --> 01:08:09,010
things working so I'm gonna go show you

01:08:07,690 --> 01:08:10,660
something that typically I don't

01:08:09,010 --> 01:08:11,770
recommend which is an imperative

01:08:10,660 --> 01:08:13,780
workflow

01:08:11,770 --> 01:08:17,170
for kubernetes but it works well for

01:08:13,780 --> 01:08:18,670
demos which is COO control run on some

01:08:17,170 --> 01:08:22,960
image so this is just going to give me a

01:08:18,670 --> 01:08:26,380
shell it's a bash shell using the

01:08:22,960 --> 01:08:29,380
MongoDB instance in the cluster and so

01:08:26,380 --> 01:08:32,440
I'm gonna say I'm going to take

01:08:29,380 --> 01:08:34,690
that service IP because this is internal

01:08:32,440 --> 01:08:37,950
only we're not publishing this

01:08:34,690 --> 01:08:41,920
externally I'm gonna say twenty seven

01:08:37,950 --> 01:08:43,660
one seven port I mean you can see you

01:08:41,920 --> 01:08:44,740
have the shell so the things running and

01:08:43,660 --> 01:08:49,410
you can connect to it from inside the

01:08:44,740 --> 01:08:51,940
cluster and this is set up using the

01:08:49,410 --> 01:08:54,370
blog blog post that's linked on the

01:08:51,940 --> 01:08:57,700
readme this is not a production set up

01:08:54,370 --> 01:09:00,160
it is a demonstration set up okay

01:08:57,700 --> 01:09:03,210
so cancel out of that cancel out of that

01:09:00,160 --> 01:09:09,400
and so that's we've proven that we have

01:09:03,210 --> 01:09:12,120
the MongoDB instance running and just

01:09:09,400 --> 01:09:12,120
under 30 minutes

01:09:16,029 --> 01:09:24,040
so there's anyone still working on any

01:09:19,630 --> 01:09:26,400
of the steps that I've shown so far okay

01:09:24,040 --> 01:09:26,400
great

01:09:30,589 --> 01:09:38,109
could someone bring it on Mike over

01:09:32,089 --> 01:09:38,109
please I mean any of my runners around

01:09:45,040 --> 01:09:50,569
so I'm doing the describe of the pods

01:09:48,470 --> 01:09:52,609
and I see it pulling the Mago down

01:09:50,569 --> 01:09:53,839
containers down is that that's gonna

01:09:52,609 --> 01:09:58,100
take a while while those are being

01:09:53,839 --> 01:10:01,760
pulled down so if I try to run the other

01:09:58,100 --> 01:10:03,800
command they get MongoDB with an S

01:10:01,760 --> 01:10:04,910
that's just gonna fail until those are

01:10:03,800 --> 01:10:06,830
done and it's up

01:10:04,910 --> 01:10:09,380
zakharik yeah that's correct if it does

01:10:06,830 --> 01:10:10,760
not say pods running and says anything

01:10:09,380 --> 01:10:13,850
other than pods running since there's

01:10:10,760 --> 01:10:17,390
image pol container creating these sorts

01:10:13,850 --> 01:10:21,760
of things the logs will not work and the

01:10:17,390 --> 01:10:21,760
run will not work okay thank you okay

01:10:26,000 --> 01:10:32,210
so if you've done all these steps you

01:10:29,390 --> 01:10:35,090
have a set of code with the reconcile a

01:10:32,210 --> 01:10:36,890
watch in the ability to go and look and

01:10:35,090 --> 01:10:38,870
say yes this thing is working and now is

01:10:36,890 --> 01:10:40,580
your chance to go and play around and

01:10:38,870 --> 01:10:42,080
see if you can break it or see if you

01:10:40,580 --> 01:10:45,440
can make it cooler right and there's a

01:10:42,080 --> 01:10:47,360
bunch of additional activities listed on

01:10:45,440 --> 01:10:49,370
the readme and you can decide which ones

01:10:47,360 --> 01:10:51,860
you want to do some of the interesting

01:10:49,370 --> 01:10:54,110
things to try are what happens when you

01:10:51,860 --> 01:10:57,320
delete the staple set if you just do

01:10:54,110 --> 01:10:58,970
coop control delete staple set and give

01:10:57,320 --> 01:11:01,010
it the name of that staple set that the

01:10:58,970 --> 01:11:03,080
 DB instance graded what do you

01:11:01,010 --> 01:11:05,140
think's gonna happen any anybody have an

01:11:03,080 --> 01:11:05,140
idea

01:11:06,940 --> 01:11:10,120
no one

01:11:10,619 --> 01:11:19,590
it's going to well let's find out I

01:11:15,600 --> 01:11:19,590
don't know either I'm gonna be surprised

01:11:22,320 --> 01:11:26,760
so it's currently five minutes old

01:11:34,590 --> 01:11:38,070
and you can see there's a bunch of text

01:11:36,420 --> 01:11:38,960
that fire right because that's the

01:11:38,070 --> 01:11:43,050
controller running in the background

01:11:38,960 --> 01:11:46,440
said creating stateful set and then

01:11:43,050 --> 01:11:46,860
updating it because it doesn't differ

01:11:46,440 --> 01:11:48,480
ectly

01:11:46,860 --> 01:11:50,969
you can see now there's a staple set

01:11:48,480 --> 01:11:54,360
running this 14 seconds old and that's

01:11:50,969 --> 01:11:56,310
because it's listening to the updates

01:11:54,360 --> 01:11:57,960
right and it gets a delete event and

01:11:56,310 --> 01:11:59,670
then it goes and triggers that reconcile

01:11:57,960 --> 01:12:02,489
function the reconcile function goes

01:11:59,670 --> 01:12:04,139
says where's the MongoDB instance or

01:12:02,489 --> 01:12:07,679
where's the sample set instance doesn't

01:12:04,139 --> 01:12:11,190
see it go ahead and recreates it you can

01:12:07,679 --> 01:12:15,869
see from the messages if you're careful

01:12:11,190 --> 01:12:19,469
that it doesn't create a service because

01:12:15,869 --> 01:12:20,639
the service already existed so this is

01:12:19,469 --> 01:12:22,560
where you can add interesting things

01:12:20,639 --> 01:12:25,130
that would have self-healing properties

01:12:22,560 --> 01:12:27,090
right and this is the level based system

01:12:25,130 --> 01:12:30,630
that I talked about in the first part of

01:12:27,090 --> 01:12:32,730
the workshop where the controller isn't

01:12:30,630 --> 01:12:34,440
designed to say a MongoDB was created I

01:12:32,730 --> 01:12:38,489
will they're their fourth go and create

01:12:34,440 --> 01:12:41,099
a service and the staple set instead it

01:12:38,489 --> 01:12:42,900
says something happened go go figure out

01:12:41,099 --> 01:12:50,280
what needs to be done right it's a very

01:12:42,900 --> 01:12:53,730
smart little helper another thing you

01:12:50,280 --> 01:12:58,980
can do is I've just specified a couple

01:12:53,730 --> 01:13:02,670
fields here the mm the storage in the

01:12:58,980 --> 01:13:04,250
replicas count but there's other things

01:13:02,670 --> 01:13:09,330
you might want to control like the port

01:13:04,250 --> 01:13:14,400
and so you can go and figure out how to

01:13:09,330 --> 01:13:18,469
go out of port to the spec and go update

01:13:14,400 --> 01:13:20,780
it or another fun thing to do would be

01:13:18,469 --> 01:13:24,090
we didn't fill out the status at all

01:13:20,780 --> 01:13:26,929
right and so when I do coop control get

01:13:24,090 --> 01:13:26,929
- oh yeah mole

01:13:31,190 --> 01:13:37,170
DB's all right it doesn't have any

01:13:35,969 --> 01:13:40,770
information about the state of this

01:13:37,170 --> 01:13:43,920
thing and so we could populate that

01:13:40,770 --> 01:13:47,460
saying hey the service is available at

01:13:43,920 --> 01:13:49,610
this IP address right and we could say

01:13:47,460 --> 01:13:53,489
the or here's the cluster IP of the

01:13:49,610 --> 01:13:55,560
service the MongoDB is behind and you

01:13:53,489 --> 01:13:59,040
could even say whether or not those pots

01:13:55,560 --> 01:14:03,560
are ready for the since one of the

01:13:59,040 --> 01:14:08,030
comments was if the pods aren't running

01:14:03,560 --> 01:14:10,320
do I expect the running in exactly the

01:14:08,030 --> 01:14:12,659
MongoDB to connect to the service to

01:14:10,320 --> 01:14:14,639
work and the answer would be I give is

01:14:12,659 --> 01:14:17,040
no but you have to go do coop control

01:14:14,639 --> 01:14:18,360
get pods figure that out and if you have

01:14:17,040 --> 01:14:20,100
a bunch of stuff running like a bunch of

01:14:18,360 --> 01:14:22,610
different pods for deployments and

01:14:20,100 --> 01:14:24,540
staple sets that are not this thing

01:14:22,610 --> 01:14:28,469
pulling that information out is kind of

01:14:24,540 --> 01:14:31,949
a pain right and so you could have the

01:14:28,469 --> 01:14:36,360
 to be controller go ahead and look

01:14:31,949 --> 01:14:40,520
at the status of the staple set when it

01:14:36,360 --> 01:14:40,520
reconciles and go publish data back

01:14:48,340 --> 01:14:51,370
there's a bunch of other things listed

01:14:50,300 --> 01:14:54,800
here

01:14:51,370 --> 01:14:58,640
adding schema validation publishing

01:14:54,800 --> 01:15:00,440
events scale and points doing more

01:14:58,640 --> 01:15:06,460
interesting things with the API updating

01:15:00,440 --> 01:15:09,290
the tests a challenging task might be to

01:15:06,460 --> 01:15:11,090
do a check for when the version of

01:15:09,290 --> 01:15:13,280
MongoDB changes for instance and maybe

01:15:11,090 --> 01:15:19,760
that some data migration has to be done

01:15:13,280 --> 01:15:22,790
as part of that possibly right or if for

01:15:19,760 --> 01:15:24,320
some something you're operating when you

01:15:22,790 --> 01:15:26,480
scale you need to do a restarting of

01:15:24,320 --> 01:15:28,820
data manually right if you're operating

01:15:26,480 --> 01:15:30,620
a stateful system like that then you can

01:15:28,820 --> 01:15:34,970
detect that change in scale and then

01:15:30,620 --> 01:15:36,470
actually trigger restarting of data as

01:15:34,970 --> 01:15:37,850
part of the API itself and this is why

01:15:36,470 --> 01:15:39,710
they're called operators is there's

01:15:37,850 --> 01:15:41,560
operational logic when running these

01:15:39,710 --> 01:15:45,890
things and you can just bake that

01:15:41,560 --> 01:15:48,250
automation in okay are there any

01:15:45,890 --> 01:15:56,900
questions or does anyone need any help

01:15:48,250 --> 01:16:00,170
getting to this point awesome all right

01:15:56,900 --> 01:16:01,550
I expected this to take everyone a bit

01:16:00,170 --> 01:16:06,440
more time and my test runs they usually

01:16:01,550 --> 01:16:08,390
bumped up to about 50 minutes would you

01:16:06,440 --> 01:16:14,150
guys like to see me try and get this

01:16:08,390 --> 01:16:15,770
running in cluster all right I have not

01:16:14,150 --> 01:16:17,360
practiced this because I was not

01:16:15,770 --> 01:16:19,940
planning on doing this this was mainly

01:16:17,360 --> 01:16:22,400
just for people that finished it early

01:16:19,940 --> 01:16:25,610
so you get to see me try and do

01:16:22,400 --> 01:16:29,800
something unrehearsed so first I'm gonna

01:16:25,610 --> 01:16:29,800
foreground this thing kill it

01:16:32,860 --> 01:16:43,369
next I'm gonna say make docker build and

01:16:41,150 --> 01:16:52,570
I need to find out what project I'm

01:16:43,369 --> 01:16:52,570
running in alright so g-cloud config

01:16:59,720 --> 01:17:02,530
come see

01:17:08,229 --> 01:17:17,729
alright I'll just do this sometimes you

01:17:14,289 --> 01:17:17,729
make darker build and I'm gonna say

01:17:25,640 --> 01:17:36,440
- so this is gonna go ahead and generate

01:17:34,190 --> 01:17:38,480
a container that has the controller I

01:17:36,440 --> 01:17:40,250
was just running locally but put it

01:17:38,480 --> 01:17:42,560
inside this container that I could then

01:17:40,250 --> 01:17:43,880
and run inside a cluster and so the

01:17:42,560 --> 01:17:45,080
docker file was provided by queue

01:17:43,880 --> 01:17:47,690
builder for you this is part of setting

01:17:45,080 --> 01:17:49,490
up the project and fun stuff and one

01:17:47,690 --> 01:17:50,600
advantages of SDKs like this is you

01:17:49,490 --> 01:17:52,190
don't have everyone making a decision

01:17:50,600 --> 01:17:57,050
about what that docker file looks like

01:17:52,190 --> 01:17:59,480
ah this is cuz of the tests that's fun

01:17:57,050 --> 01:18:03,490
so I'm gonna go ahead because I haven't

01:17:59,480 --> 01:18:06,580
updated the tests let me go ahead and

01:18:03,490 --> 01:18:06,580
remove that

01:18:15,869 --> 01:18:18,980
let's show again

01:18:20,850 --> 01:18:27,900
and so unfortunately the do the nature

01:18:25,920 --> 01:18:29,580
of how we stamp out the dockerfile if we

01:18:27,900 --> 01:18:32,310
do decide that what we gave you wasn't

01:18:29,580 --> 01:18:33,690
the best practice and updated in the

01:18:32,310 --> 01:18:35,640
future it is hard to go and update

01:18:33,690 --> 01:18:39,570
everyone unlike the control our runtime

01:18:35,640 --> 01:18:42,270
libraries but at least you have

01:18:39,570 --> 01:18:47,970
something that we thought was the best

01:18:42,270 --> 01:18:49,140
thing at one point in time and you have

01:18:47,970 --> 01:18:50,430
you can always look and see what the

01:18:49,140 --> 01:18:55,920
latest thing that gets stamped out and

01:18:50,430 --> 01:18:58,200
decide if you want to use that okay so

01:18:55,920 --> 01:19:00,690
this uses a multi-stage build so that

01:18:58,200 --> 01:19:01,830
means it's going to the first stage of

01:19:00,690 --> 01:19:03,690
the build which has a containerized

01:19:01,830 --> 01:19:06,840
build the coffee is all the source and

01:19:03,690 --> 01:19:08,700
there builds a binary and then the

01:19:06,840 --> 01:19:10,200
second stage of the build doesn't have

01:19:08,700 --> 01:19:13,260
any of that stuff as layers in the file

01:19:10,200 --> 01:19:19,320
system it just copies the image from the

01:19:13,260 --> 01:19:20,700
first stage and now it just has that so

01:19:19,320 --> 01:19:22,320
it's going in building this thing called

01:19:20,700 --> 01:19:26,130
the manager and the manager is what

01:19:22,320 --> 01:19:27,840
manages multiple controllers if you

01:19:26,130 --> 01:19:29,700
notice when you when you modify the

01:19:27,840 --> 01:19:33,120
reconcile function you have a client

01:19:29,700 --> 01:19:37,530
provided to you that client is provided

01:19:33,120 --> 01:19:39,090
by the manager and it allows the wiring

01:19:37,530 --> 01:19:41,880
for setting this stuff up to be

01:19:39,090 --> 01:19:43,140
consistent and basically boring instead

01:19:41,880 --> 01:19:45,720
of you having to make decisions about

01:19:43,140 --> 01:19:52,110
how to define functions to pass around

01:19:45,720 --> 01:19:55,890
configs and that sort of thing okay so

01:19:52,110 --> 01:20:01,950
there's that copy and then it does this

01:19:55,890 --> 01:20:04,530
kind of fun thing where it changes the

01:20:01,950 --> 01:20:07,140
image in the config file because I

01:20:04,530 --> 01:20:08,580
specified the image I have this config

01:20:07,140 --> 01:20:10,620
file that I used to publish this thing

01:20:08,580 --> 01:20:13,080
but it is that's the image until just

01:20:10,620 --> 01:20:20,180
now so does this said to go and update

01:20:13,080 --> 01:20:20,180
that okay so let's go and push that

01:20:21,770 --> 01:20:25,040
of course

01:20:35,090 --> 01:20:42,760
so that's gonna go push this up

01:20:47,260 --> 01:20:52,630
this is tool called customized that we

01:20:49,570 --> 01:20:58,510
use for running this thing ooh I forgot

01:20:52,630 --> 01:21:02,770
a step does anyone know what this step

01:20:58,510 --> 01:21:07,110
is by any chance I mentioned it in

01:21:02,770 --> 01:21:09,310
passing okay when this runs in cluster

01:21:07,110 --> 01:21:10,810
it's going to have five minutes solve

01:21:09,310 --> 01:21:12,460
this quickly when it runs in cluster

01:21:10,810 --> 01:21:13,750
it's actually running as a service

01:21:12,460 --> 01:21:15,220
account inside that cluster and that

01:21:13,750 --> 01:21:17,110
service account has certain permissions

01:21:15,220 --> 01:21:18,280
new things and not other things and it

01:21:17,110 --> 01:21:19,990
doesn't have permission to do anything I

01:21:18,280 --> 01:21:21,610
haven't already given it I'm like when

01:21:19,990 --> 01:21:24,760
it runs locally it's using my account

01:21:21,610 --> 01:21:27,670
which I have permissions on and so it

01:21:24,760 --> 01:21:31,420
needs to be able to talk to stateful

01:21:27,670 --> 01:21:32,950
sets and services right it needs to be

01:21:31,420 --> 01:21:35,830
able to rights with those things if I do

01:21:32,950 --> 01:21:38,560
not add these lines what's going to

01:21:35,830 --> 01:21:40,390
happen is it's going to start up and

01:21:38,560 --> 01:21:41,440
it's gonna say hey I I can't talk to

01:21:40,390 --> 01:21:48,370
those things and get a bunch of failures

01:21:41,440 --> 01:21:50,610
oops so and then going to do another

01:21:48,370 --> 01:21:50,610
make

01:21:56,040 --> 01:22:00,590
and says are back manifest generated

01:22:04,409 --> 01:22:07,729
let's get the tests

01:22:09,179 --> 01:22:15,449
okay so now I'm going to do this so as

01:22:11,940 --> 01:22:17,070
this MongoDB API thing which has a

01:22:15,449 --> 01:22:18,840
different pieces it's going to create

01:22:17,070 --> 01:22:22,100
you can pop this open later here's the

01:22:18,840 --> 01:22:23,940
abarth our back rules service account

01:22:22,100 --> 01:22:25,440
different pieces it needs to run this

01:22:23,940 --> 01:22:27,679
thing so I'm going to control apply that

01:22:25,440 --> 01:22:27,679
thing

01:22:35,750 --> 01:22:46,150
I know this problem you probably won't

01:22:42,650 --> 01:22:46,150
get this g-cloud

01:22:59,000 --> 01:23:03,800
and there is an explanation for this

01:23:01,780 --> 01:23:05,720
essentially what it's saying is my

01:23:03,800 --> 01:23:08,960
account doesn't have permissions to

01:23:05,720 --> 01:23:13,750
launch this to actually run this inside

01:23:08,960 --> 01:23:17,860
the cluster because I don't have a

01:23:13,750 --> 01:23:17,860
permission see of these are back rolls

01:23:27,690 --> 01:23:37,200
yes all right I might be stuck here for

01:23:31,020 --> 01:23:38,190
the three minutes because okay I'm not

01:23:37,200 --> 01:23:40,940
gonna try and fix this because it's

01:23:38,190 --> 01:23:44,130
gonna take me more than a minute but

01:23:40,940 --> 01:23:45,900
what will happen if I have the correct

01:23:44,130 --> 01:23:50,820
permissions on the account when it's set

01:23:45,900 --> 01:23:53,820
up is this we'll go and start the sample

01:23:50,820 --> 01:23:55,770
set or sorry oh well it will go and

01:23:53,820 --> 01:23:59,430
start the controller as a container I

01:23:55,770 --> 01:24:00,720
think he used as a staple set and then I

01:23:59,430 --> 01:24:02,280
don't need to run it from my laptop

01:24:00,720 --> 01:24:12,570
anymore and then anyone can get at it

01:24:02,280 --> 01:24:16,170
yes but update the manager to use the

01:24:12,570 --> 01:24:20,040
sorry what's the namespace the namespace

01:24:16,170 --> 01:24:25,140
option on the manager it was added a

01:24:20,040 --> 01:24:27,600
little bit ago so I think the the

01:24:25,140 --> 01:24:30,600
problem is not that I don't have access

01:24:27,600 --> 01:24:33,630
to create the namespace is that what you

01:24:30,600 --> 01:24:35,460
mean I think that the problem is that

01:24:33,630 --> 01:24:36,870
your back is probably asking for cluster

01:24:35,460 --> 01:24:39,210
wide access which you probably don't

01:24:36,870 --> 01:24:41,460
have access to instead if you only set

01:24:39,210 --> 01:24:43,440
up your lisped watcher for your new

01:24:41,460 --> 01:24:49,980
space that's a great suggestion let's

01:24:43,440 --> 01:24:55,430
see if that works all right so that

01:24:49,980 --> 01:24:55,430
means have our back in here

01:24:58,239 --> 01:25:06,690
all right do you happen to remember what

01:25:02,050 --> 01:25:06,690
field it is is it name space like that

01:25:06,869 --> 01:25:11,400
yeah all right let's see if this works

01:25:12,780 --> 01:25:15,960
super hack

01:25:19,939 --> 01:25:23,860
all right so those are the API groups

01:25:24,070 --> 01:25:31,599
apps databases and core or another apps

01:25:33,280 --> 01:25:37,579
you might also need to change it from a

01:25:35,389 --> 01:25:39,880
cluster role binding to just a role

01:25:37,579 --> 01:25:39,880
binding

01:25:46,409 --> 01:25:52,800
change cholesterol you said oh just to

01:25:49,080 --> 01:25:54,949
roll yeah let's try this let's see if it

01:25:52,800 --> 01:25:54,949
works

01:26:04,139 --> 01:26:13,050
let's field doesn't go there hmm maybe

01:26:10,750 --> 01:26:13,050
if I do

01:26:28,550 --> 01:26:34,670
all right I'm gonna have to check this

01:26:31,820 --> 01:26:37,490
one later I think we're at a time so I

01:26:34,670 --> 01:26:39,020
didn't quite make that one but mm-hmm if

01:26:37,490 --> 01:26:40,910
you if you have your cluster how to set

01:26:39,020 --> 01:26:43,100
up ahead of time and you do your

01:26:40,910 --> 01:26:46,280
research then you'll probably not have

01:26:43,100 --> 01:26:48,640
this particular problem any other

01:26:46,280 --> 01:26:48,640
questions

01:26:55,190 --> 01:27:24,969
okay awesome thank you thanks no I'm

01:27:22,820 --> 01:27:24,969
done

01:30:11,100 --> 01:30:14,100

YouTube URL: https://www.youtube.com/watch?v=ek1Y4ayRUxM


