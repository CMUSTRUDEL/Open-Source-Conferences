Title: All Things Open 2018 - Chris Collins - Open Source.com, Container Technology - Lightning Talk
Publication date: 2018-12-05
Playlist: All Things Open 2018 Playlist
Description: 
	All Things Open 2018 - Chris Collins - Open Source.com, Container Technology - Lightning Talk
Captions: 
	00:00:04,490 --> 00:00:09,750
hi my name is Chris I'm going to talk to

00:00:07,740 --> 00:00:11,190
you today about alternatives to docker

00:00:09,750 --> 00:00:13,290
and how you can replace docker in your

00:00:11,190 --> 00:00:14,940
infrastructure and a few minutes ago

00:00:13,290 --> 00:00:16,289
when I was telling Sofia what I was

00:00:14,940 --> 00:00:18,900
talking about she asked why I hated

00:00:16,289 --> 00:00:20,189
docker and that's not the case but you

00:00:18,900 --> 00:00:22,949
know alternatives are good and I thought

00:00:20,189 --> 00:00:26,310
I'd share some of these with you so how

00:00:22,949 --> 00:00:29,010
many people will yeah how many people

00:00:26,310 --> 00:00:31,320
here are using containers in production

00:00:29,010 --> 00:00:32,940
that's probably a lot now right how many

00:00:31,320 --> 00:00:34,110
of you are using something other than

00:00:32,940 --> 00:00:36,300
doctor to run those containers in

00:00:34,110 --> 00:00:38,930
production all right cool that's more

00:00:36,300 --> 00:00:41,820
than I thought there was gonna be here

00:00:38,930 --> 00:00:43,860
so really quickly let's break down a

00:00:41,820 --> 00:00:47,160
little bit of what docker does docker is

00:00:43,860 --> 00:00:49,980
a interacts with a runtime it's a user

00:00:47,160 --> 00:00:53,070
interface and an API it's used for

00:00:49,980 --> 00:00:55,770
building images and sharing images and

00:00:53,070 --> 00:00:57,000
it's generally it's a large daemon that

00:00:55,770 --> 00:00:58,649
kind of handles a whole bunch of things

00:00:57,000 --> 00:01:00,570
right

00:00:58,649 --> 00:01:03,090
to clarify real quick a container

00:01:00,570 --> 00:01:05,729
runtime is a low-level program that just

00:01:03,090 --> 00:01:07,049
creates runs and stops containers the

00:01:05,729 --> 00:01:09,420
engine is the user interface that

00:01:07,049 --> 00:01:11,490
creates images and manages images and

00:01:09,420 --> 00:01:13,790
creates the definition of the container

00:01:11,490 --> 00:01:15,570
that the runtime uses to create it

00:01:13,790 --> 00:01:19,470
unfortunately people tend to use these

00:01:15,570 --> 00:01:20,869
two things interchangeably so some

00:01:19,470 --> 00:01:23,580
example runtimes here

00:01:20,869 --> 00:01:25,619
run run see is kind of the standard

00:01:23,580 --> 00:01:27,030
container runtime it's actually used by

00:01:25,619 --> 00:01:29,189
docker through its interface with

00:01:27,030 --> 00:01:31,650
container D but you can use it on its

00:01:29,189 --> 00:01:33,390
own you can use it on the CLI itself or

00:01:31,650 --> 00:01:36,799
you can use it with a wrapper like a

00:01:33,390 --> 00:01:39,479
system D unit or just a batch script

00:01:36,799 --> 00:01:42,000
kata is another container runtime it's

00:01:39,479 --> 00:01:46,500
used for running containers inside of

00:01:42,000 --> 00:01:48,450
virtual machines these are tiny quick to

00:01:46,500 --> 00:01:50,460
start virtual machines that are great

00:01:48,450 --> 00:01:52,950
for a little bit of additional security

00:01:50,460 --> 00:01:55,290
and these come out of the Intel clear

00:01:52,950 --> 00:01:59,340
container and hyper SH hyper-v

00:01:55,290 --> 00:02:00,659
technology again container engines are

00:01:59,340 --> 00:02:02,310
the user interface and the image

00:02:00,659 --> 00:02:03,750
management portion it's the piece that

00:02:02,310 --> 00:02:05,100
they're higher-level applications and

00:02:03,750 --> 00:02:10,470
they're actually designed to be worked

00:02:05,100 --> 00:02:12,959
with by humans cryo is kind of the one

00:02:10,470 --> 00:02:13,740
of the de-facto container engines now

00:02:12,959 --> 00:02:15,780
this is what you

00:02:13,740 --> 00:02:17,910
by the kubernetes project it works with

00:02:15,780 --> 00:02:20,700
the cry standard or container runtime

00:02:17,910 --> 00:02:24,570
interface and it talks to run see down

00:02:20,700 --> 00:02:27,000
below pod man's another potential

00:02:24,570 --> 00:02:29,280
container engine it's originally was

00:02:27,000 --> 00:02:32,880
designed to debug and troubleshoot the

00:02:29,280 --> 00:02:34,440
cryo pods and kubernetes but it can be

00:02:32,880 --> 00:02:37,620
used as a drop-in replacement for docker

00:02:34,440 --> 00:02:40,260
so like pod man run docker run pod men

00:02:37,620 --> 00:02:43,490
build docker build it'll just for almost

00:02:40,260 --> 00:02:46,200
everything just be a drop-in replacement

00:02:43,490 --> 00:02:49,200
rocket is a demon list engine that is

00:02:46,200 --> 00:02:51,360
uses the default unit of an application

00:02:49,200 --> 00:02:53,760
or considers a kubernetes pod the

00:02:51,360 --> 00:02:57,360
default unit of an application and it's

00:02:53,760 --> 00:03:00,810
got some really cool tools for process

00:02:57,360 --> 00:03:02,040
segregation or keeping processes away

00:03:00,810 --> 00:03:03,860
from one another so you can go from a

00:03:02,040 --> 00:03:07,820
single process all the way up to

00:03:03,860 --> 00:03:09,840
confined with its own virtual machine

00:03:07,820 --> 00:03:12,510
singularity is a container engine that's

00:03:09,840 --> 00:03:14,970
used a lot for research in HPC and it's

00:03:12,510 --> 00:03:17,580
got a really good robust GPU support for

00:03:14,970 --> 00:03:19,020
research workloads it has its own image

00:03:17,580 --> 00:03:21,360
format but it also can use the docker

00:03:19,020 --> 00:03:23,130
image format and they're working toward

00:03:21,360 --> 00:03:25,770
compatibility with the kubernetes cry

00:03:23,130 --> 00:03:29,730
interface so someday kubernetes can run

00:03:25,770 --> 00:03:32,670
singularity containers for you Lexx d is

00:03:29,730 --> 00:03:36,180
a container engine that's used for

00:03:32,670 --> 00:03:39,030
interacting with the LXE runtime in the

00:03:36,180 --> 00:03:40,950
canonical projects they run full system

00:03:39,030 --> 00:03:43,320
containers or like a full operating

00:03:40,950 --> 00:03:44,940
system to container and Lex D is a run

00:03:43,320 --> 00:03:46,470
today as a user interface and an API

00:03:44,940 --> 00:03:51,060
that makes working with the daemon or

00:03:46,470 --> 00:03:52,350
the runtime a little more simple there

00:03:51,060 --> 00:03:53,970
are also a lot of tools that you can use

00:03:52,350 --> 00:03:56,130
to replace just small pieces of what

00:03:53,970 --> 00:03:57,720
doctor does they generally follow the

00:03:56,130 --> 00:04:00,570
UNIX philosophy of doing one thing and

00:03:57,720 --> 00:04:01,950
doing it well scope EO is an example of

00:04:00,570 --> 00:04:02,910
this this is a project from the project

00:04:01,950 --> 00:04:05,220
atomic team

00:04:02,910 --> 00:04:07,740
it's a command-line tool for inspecting

00:04:05,220 --> 00:04:09,630
local and remote images and it can push

00:04:07,740 --> 00:04:11,190
and pull images to registries and

00:04:09,630 --> 00:04:12,510
repositories but that's all it does it

00:04:11,190 --> 00:04:14,459
doesn't build images it doesn't run

00:04:12,510 --> 00:04:17,580
containers it just inspects and allows

00:04:14,459 --> 00:04:20,790
you to run or to move image container

00:04:17,580 --> 00:04:21,960
images back and forth build is probably

00:04:20,790 --> 00:04:24,180
one of my favorite tools and I talk

00:04:21,960 --> 00:04:25,740
about it a lot it's a great way to build

00:04:24,180 --> 00:04:27,460
container images without using docker

00:04:25,740 --> 00:04:29,110
you can actually use whatever

00:04:27,460 --> 00:04:31,180
you want with or without a doctor file

00:04:29,110 --> 00:04:34,569
so you could build a container image

00:04:31,180 --> 00:04:35,800
with a Python script or a make file and

00:04:34,569 --> 00:04:37,210
whatever you would like to use to

00:04:35,800 --> 00:04:41,050
combine all those layers into a

00:04:37,210 --> 00:04:44,169
container image and then when it comes

00:04:41,050 --> 00:04:46,930
to orchestration really at the moment

00:04:44,169 --> 00:04:49,180
kubernetes is the best option I think in

00:04:46,930 --> 00:04:50,740
my own opinion there's not anything else

00:04:49,180 --> 00:04:53,169
that's really in the same ballpark at

00:04:50,740 --> 00:04:55,560
the moment so just use kubernetes until

00:04:53,169 --> 00:04:57,610
we have more and better competing

00:04:55,560 --> 00:05:01,360
alternatives for container orchestration

00:04:57,610 --> 00:05:02,830
and thank you very much my name is Chris

00:05:01,360 --> 00:05:04,900
Collins and if you'd like to talk about

00:05:02,830 --> 00:05:05,860
containers or anything else I'd love to

00:05:04,900 --> 00:05:10,499
talk to you thank you

00:05:05,860 --> 00:05:10,499

YouTube URL: https://www.youtube.com/watch?v=QAMo4Kz005s


