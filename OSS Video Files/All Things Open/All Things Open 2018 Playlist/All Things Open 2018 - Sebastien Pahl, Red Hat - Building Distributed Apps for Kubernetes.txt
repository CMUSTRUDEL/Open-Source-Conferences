Title: All Things Open 2018 - Sebastien Pahl, Red Hat - Building Distributed Apps for Kubernetes
Publication date: 2018-12-05
Playlist: All Things Open 2018 Playlist
Description: 
	All Things Open 2018 - Sebastien Pahl, Red Hat - Building Distributed Apps for Kubernetes with the Operator SDK
Captions: 
	00:00:03,140 --> 00:00:08,069
hello everyone thank you very much for

00:00:05,970 --> 00:00:09,210
coming to see my talk and I'm Sebastian

00:00:08,069 --> 00:00:12,059
I work at Red Hat's

00:00:09,210 --> 00:00:14,160
on in the open shift team and on all

00:00:12,059 --> 00:00:16,770
things about automating kubernetes

00:00:14,160 --> 00:00:19,830
applications this talk is about a

00:00:16,770 --> 00:00:21,810
project that we're building across a lot

00:00:19,830 --> 00:00:24,600
of different teams that's called the

00:00:21,810 --> 00:00:26,340
operator framework it contains a lot of

00:00:24,600 --> 00:00:28,560
different pieces that I'm going to be

00:00:26,340 --> 00:00:31,470
talking about and today I'm gonna be

00:00:28,560 --> 00:00:33,420
focusing on building applications with a

00:00:31,470 --> 00:00:36,180
piece of this framework which is called

00:00:33,420 --> 00:00:38,129
the operator SDK so the talk will be a

00:00:36,180 --> 00:00:39,899
few slides and then a main chunk of

00:00:38,129 --> 00:00:42,390
demos that's how I prefer doing my talks

00:00:39,899 --> 00:00:44,399
and then we'll have time for some

00:00:42,390 --> 00:00:47,940
questions at the end like ten minutes or

00:00:44,399 --> 00:00:51,629
something all right so what's an

00:00:47,940 --> 00:00:54,050
operator so obviously I'm assuming a bit

00:00:51,629 --> 00:00:56,969
that you know what kubernetes is a

00:00:54,050 --> 00:00:59,579
platform to deploy applications and to

00:00:56,969 --> 00:01:02,280
manage them in a easier more distributed

00:00:59,579 --> 00:01:05,610
fashion but more importantly kubernetes

00:01:02,280 --> 00:01:08,220
gives us a common API it gives us an API

00:01:05,610 --> 00:01:10,409
that allows us to express objects in

00:01:08,220 --> 00:01:14,159
llamÃ³ and then interact with these

00:01:10,409 --> 00:01:17,070
objects to create new things and not

00:01:14,159 --> 00:01:19,530
just application objects but not just

00:01:17,070 --> 00:01:21,270
kubernetes objects but any objects that

00:01:19,530 --> 00:01:23,490
you want and an operator is an

00:01:21,270 --> 00:01:25,350
application that leverages that API that

00:01:23,490 --> 00:01:30,090
runs on top of kubernetes as a container

00:01:25,350 --> 00:01:33,689
and can therefore automatically manage

00:01:30,090 --> 00:01:35,640
that application the the goal it's a

00:01:33,689 --> 00:01:38,640
design pattern I would say that was

00:01:35,640 --> 00:01:41,340
created by core OS before in before the

00:01:38,640 --> 00:01:43,530
Red Hat acquisition and the goal there

00:01:41,340 --> 00:01:45,840
was to replicate what we call cloud

00:01:43,530 --> 00:01:49,829
services when you use a provider like

00:01:45,840 --> 00:01:52,619
AWS and you want a Postgres database or

00:01:49,829 --> 00:01:54,720
a my sequel database or queue you call

00:01:52,619 --> 00:01:57,509
an API and you get a fully managed

00:01:54,720 --> 00:01:59,670
service let's say RDS for example and

00:01:57,509 --> 00:02:01,950
you're able to launch RDS and interact

00:01:59,670 --> 00:02:03,450
with it and decide when it's going to go

00:02:01,950 --> 00:02:06,420
to a new version but other than that

00:02:03,450 --> 00:02:08,250
you're not you don't care about what's

00:02:06,420 --> 00:02:09,959
happening operationally behind the scene

00:02:08,250 --> 00:02:12,030
of course there's like there's

00:02:09,959 --> 00:02:12,780
exceptions to that but overall that's

00:02:12,030 --> 00:02:16,110
the global ID

00:02:12,780 --> 00:02:18,930
year and the goal here is to do the same

00:02:16,110 --> 00:02:21,870
thing but with any open-source

00:02:18,930 --> 00:02:24,930
application or not open source on top of

00:02:21,870 --> 00:02:26,850
a common platform that's kubernetes that

00:02:24,930 --> 00:02:29,010
way we can bring that same style of

00:02:26,850 --> 00:02:31,050
cloud service that you can find boxed

00:02:29,010 --> 00:02:33,090
into these different cloud providers on

00:02:31,050 --> 00:02:34,260
any cluster whether you run it on pram

00:02:33,090 --> 00:02:37,470
whether you run it on your laptop

00:02:34,260 --> 00:02:39,690
whether you run it on a cloud provider

00:02:37,470 --> 00:02:41,910
itself since they don't give you all the

00:02:39,690 --> 00:02:43,920
services you might want to be able to

00:02:41,910 --> 00:02:45,840
adapt them look under the hood the

00:02:43,920 --> 00:02:47,220
promise that open source gives you about

00:02:45,840 --> 00:02:49,260
being able to go in your software

00:02:47,220 --> 00:02:51,000
looking at it kind of disappears with

00:02:49,260 --> 00:02:53,220
these cloud services and the goal of

00:02:51,000 --> 00:02:56,430
this is to bring that back to be able to

00:02:53,220 --> 00:03:01,200
give that full panel of possibilities to

00:02:56,430 --> 00:03:02,340
the users so the goal here is if you've

00:03:01,200 --> 00:03:05,040
in the past

00:03:02,340 --> 00:03:06,750
started using docker as a developer

00:03:05,040 --> 00:03:08,850
you've had the privilege of being able

00:03:06,750 --> 00:03:10,709
to go from having to know how to install

00:03:08,850 --> 00:03:12,930
something like Postgres for example just

00:03:10,709 --> 00:03:14,700
for your local development on your

00:03:12,930 --> 00:03:16,890
laptop and you would have to configure

00:03:14,700 --> 00:03:18,329
it go into config files figure out how

00:03:16,890 --> 00:03:21,900
to run it figure out how to start it

00:03:18,329 --> 00:03:23,790
start it and then a bit later you were

00:03:21,900 --> 00:03:26,640
able to just do it with a company one

00:03:23,790 --> 00:03:29,220
command called docker run that ease of

00:03:26,640 --> 00:03:31,440
use is tremendous for development but

00:03:29,220 --> 00:03:33,390
hasn't kind quite crossed over into the

00:03:31,440 --> 00:03:34,980
operational world yet despite all the

00:03:33,390 --> 00:03:38,160
promises of the platforms underneath

00:03:34,980 --> 00:03:40,890
there's still a lot of domain-specific

00:03:38,160 --> 00:03:43,700
knowledge that each of these apps need

00:03:40,890 --> 00:03:47,340
to be able to run within a cluster on

00:03:43,700 --> 00:03:49,500
without human intervention and without

00:03:47,340 --> 00:03:51,930
human intervention is a complicated

00:03:49,500 --> 00:03:54,989
subject it requires you to know your app

00:03:51,930 --> 00:03:57,359
very well and to be able to code all the

00:03:54,989 --> 00:03:59,370
operational knowledge somewhere so that

00:03:57,359 --> 00:04:03,570
when something happens like for example

00:03:59,370 --> 00:04:06,000
an upgrade or a recovery or scaling up

00:04:03,570 --> 00:04:08,340
scaling down the app the operator the

00:04:06,000 --> 00:04:11,730
codes in the background can do this

00:04:08,340 --> 00:04:16,190
instead of a human so this basically is

00:04:11,730 --> 00:04:19,260
to bring day to operations to code and

00:04:16,190 --> 00:04:21,810
so we decided to put this behind the

00:04:19,260 --> 00:04:24,479
kubernetes api why the kubernetes api

00:04:21,810 --> 00:04:24,870
because people are real familiar with it

00:04:24,479 --> 00:04:27,540
if they you

00:04:24,870 --> 00:04:29,729
communities they have this they want to

00:04:27,540 --> 00:04:31,680
use the same tools like Cube control or

00:04:29,729 --> 00:04:33,949
anything else that takes advantage of

00:04:31,680 --> 00:04:37,860
these api's and they want to be able to

00:04:33,949 --> 00:04:39,690
easily launch an app and then utilize it

00:04:37,860 --> 00:04:43,199
and have users not worry and be able to

00:04:39,690 --> 00:04:45,090
just query the the server about status

00:04:43,199 --> 00:04:47,490
understanding how it's running but not

00:04:45,090 --> 00:04:51,120
worry if some if a note goes down for

00:04:47,490 --> 00:04:54,360
example the way you buy you build an

00:04:51,120 --> 00:04:56,190
operator though is complicated you yeah

00:04:54,360 --> 00:04:58,740
I write on the slide it's built like any

00:04:56,190 --> 00:05:01,020
other kubernetes controller it is but

00:04:58,740 --> 00:05:04,320
that requires a lot of domain-specific

00:05:01,020 --> 00:05:06,600
knowledge again not in that app which

00:05:04,320 --> 00:05:08,789
you have but in kubernetes which you

00:05:06,600 --> 00:05:10,860
might not want to go that deep or

00:05:08,789 --> 00:05:13,979
especially and you might not have the

00:05:10,860 --> 00:05:17,430
time to go that deep and so the goal

00:05:13,979 --> 00:05:20,639
here is to be able to create a framework

00:05:17,430 --> 00:05:22,650
that we call the operator framework that

00:05:20,639 --> 00:05:25,139
encapsulate Sal OTT of this boilerplate

00:05:22,650 --> 00:05:27,060
and a lot of these operations so that

00:05:25,139 --> 00:05:28,830
you don't have to rewrite them again and

00:05:27,060 --> 00:05:33,210
again so that you don't have to relearn

00:05:28,830 --> 00:05:35,160
the ecosystem again and again so in the

00:05:33,210 --> 00:05:37,050
operator framework we have three

00:05:35,160 --> 00:05:39,660
projects I'll be focusing afterwards on

00:05:37,050 --> 00:05:41,340
the SDK but I want to present the three

00:05:39,660 --> 00:05:43,950
highlighted progress projects there's a

00:05:41,340 --> 00:05:45,900
few more projects coming but I'm gonna

00:05:43,950 --> 00:05:46,560
focus on these here so the operator is

00:05:45,900 --> 00:05:49,710
DK

00:05:46,560 --> 00:05:51,419
that's where developer starts that's the

00:05:49,710 --> 00:05:54,479
tooling that allows you to scaffold a

00:05:51,419 --> 00:05:57,630
lot of code to generate that code to

00:05:54,479 --> 00:05:59,610
start using it and you of course you do

00:05:57,630 --> 00:06:02,310
need to know a bit about kubernetes but

00:05:59,610 --> 00:06:03,720
not the intricate details and you're

00:06:02,310 --> 00:06:06,900
able then to start writing your

00:06:03,720 --> 00:06:09,419
domain-specific code once you have that

00:06:06,900 --> 00:06:11,880
operator you can use the SDK to package

00:06:09,419 --> 00:06:14,910
the operator as a docker container and

00:06:11,880 --> 00:06:18,240
something that is universally runs and

00:06:14,910 --> 00:06:20,370
then also you're able to test your

00:06:18,240 --> 00:06:23,370
operator because if you're gonna write a

00:06:20,370 --> 00:06:25,530
system that needs to update itself scale

00:06:23,370 --> 00:06:26,669
itself then you want to not just write

00:06:25,530 --> 00:06:29,010
that domain-specific knowledge

00:06:26,669 --> 00:06:30,990
logic but you want to absolutely also

00:06:29,010 --> 00:06:33,150
write all the tests that go with it just

00:06:30,990 --> 00:06:35,250
like a normal software development to be

00:06:33,150 --> 00:06:36,840
able to make sure that if I upgrade if I

00:06:35,250 --> 00:06:38,400
change something within that operator

00:06:36,840 --> 00:06:39,960
it's still going to be able

00:06:38,400 --> 00:06:42,150
to run it's still going to be able to

00:06:39,960 --> 00:06:45,630
operate it and more importantly I can

00:06:42,150 --> 00:06:50,340
actually use machines and api's to test

00:06:45,630 --> 00:06:52,470
if my operators work then another

00:06:50,340 --> 00:06:54,180
concept that I'm going to demo a bit is

00:06:52,470 --> 00:06:56,430
what we call the operator lifecycle

00:06:54,180 --> 00:06:58,560
manager once you're in a world with a

00:06:56,430 --> 00:07:00,780
lot of these operators you still want a

00:06:58,560 --> 00:07:02,850
way to manage them all to easily install

00:07:00,780 --> 00:07:05,520
them upgrade them the operators

00:07:02,850 --> 00:07:08,039
themselves and subscribe to let's say a

00:07:05,520 --> 00:07:10,160
stable channel or a beta channel or an

00:07:08,039 --> 00:07:12,449
alpha Channel and you want to manage

00:07:10,160 --> 00:07:14,760
what we call the lifecycle of these app

00:07:12,449 --> 00:07:16,680
operators inside of your service and

00:07:14,760 --> 00:07:18,449
I'll be demoing it afterwards but that's

00:07:16,680 --> 00:07:21,840
what the operator lifecycle manager is

00:07:18,449 --> 00:07:24,600
for metering is another part of the

00:07:21,840 --> 00:07:28,680
framework the idea here is to be able to

00:07:24,600 --> 00:07:30,599
collect metrics in a very granular

00:07:28,680 --> 00:07:32,550
fashion to be able to create usage

00:07:30,599 --> 00:07:35,760
reports across your operators or other

00:07:32,550 --> 00:07:37,440
applications so it's based on Prometheus

00:07:35,760 --> 00:07:40,139
but after that you're able to do

00:07:37,440 --> 00:07:42,990
detailed reports imagine if I wanted to

00:07:40,139 --> 00:07:45,570
build someone or know how much a team is

00:07:42,990 --> 00:07:48,270
using in terms of detailed resources

00:07:45,570 --> 00:07:50,520
with the between the SDK and the

00:07:48,270 --> 00:07:53,190
metering I'm able to build operators

00:07:50,520 --> 00:07:54,599
that send custom metrics and these

00:07:53,190 --> 00:07:56,669
custom metrics can then we put in

00:07:54,599 --> 00:07:59,970
reports to be able to know for example

00:07:56,669 --> 00:08:02,310
how many what the size the average size

00:07:59,970 --> 00:08:04,470
of tables are or how much CPU a certain

00:08:02,310 --> 00:08:10,020
part of an operator used and all of

00:08:04,470 --> 00:08:11,699
these so demos after the demos I'll

00:08:10,020 --> 00:08:13,620
leave a bit of time for questions but I

00:08:11,699 --> 00:08:18,770
think the demos are the more interesting

00:08:13,620 --> 00:08:21,150
part of this so I have let me exit this

00:08:18,770 --> 00:08:24,389
what I have here running here is an open

00:08:21,150 --> 00:08:26,430
shift cluster so kubernetes there's

00:08:24,389 --> 00:08:28,620
nothing running on that yet except the

00:08:26,430 --> 00:08:31,139
base components and what we're going to

00:08:28,620 --> 00:08:34,050
go through right now is I'm going to be

00:08:31,139 --> 00:08:35,700
building a memcache operator so we're

00:08:34,050 --> 00:08:37,289
gonna go through the steps that it takes

00:08:35,700 --> 00:08:38,789
to build a memcache operators and why

00:08:37,289 --> 00:08:43,770
I'm taking these steps and why these

00:08:38,789 --> 00:08:46,860
exist and then show you from 0 to 1 how

00:08:43,770 --> 00:08:49,230
to get memcache running on that note

00:08:46,860 --> 00:08:50,730
that the user of these things won't have

00:08:49,230 --> 00:08:52,170
to do all these steps this is

00:08:50,730 --> 00:08:54,149
these are the this is about developing

00:08:52,170 --> 00:08:57,389
an operator so these are the step that a

00:08:54,149 --> 00:09:03,630
developer would take so let's start I

00:08:57,389 --> 00:09:06,839
have my so first things we're gonna do

00:09:03,630 --> 00:09:13,290
is we're gonna set up a directory where

00:09:06,839 --> 00:09:19,019
we're gonna be working so that's copying

00:09:13,290 --> 00:09:22,470
things out of here all right

00:09:19,019 --> 00:09:24,209
so I have a tool called operator SDK

00:09:22,470 --> 00:09:26,190
I've built it and compiled it it's

00:09:24,209 --> 00:09:29,430
installed on my machine so I'm able to

00:09:26,190 --> 00:09:31,769
start by creating a directory for it

00:09:29,430 --> 00:09:33,600
with all the default code that gets

00:09:31,769 --> 00:09:37,019
generated and all the dependencies that

00:09:33,600 --> 00:09:39,209
need to be installed that's akin of when

00:09:37,019 --> 00:09:41,490
you use a web frameworks like Django for

00:09:39,209 --> 00:09:43,260
example you would be running on you to

00:09:41,490 --> 00:09:44,850
go from zero to something and then it

00:09:43,260 --> 00:09:47,190
would install the dependencies it would

00:09:44,850 --> 00:09:51,029
generate the code that you don't need to

00:09:47,190 --> 00:09:52,949
edit so this should be quite quickly now

00:09:51,029 --> 00:09:57,600
we're done so now I have a git

00:09:52,949 --> 00:10:02,940
repository where I'm able to go in and I

00:09:57,600 --> 00:10:05,190
have a some base lines here then I need

00:10:02,940 --> 00:10:06,690
to start creating this is an empty

00:10:05,190 --> 00:10:07,860
operator there's nothing it doesn't do

00:10:06,690 --> 00:10:10,139
anything even though I've called it

00:10:07,860 --> 00:10:14,310
memcache I'm gonna have to start adding

00:10:10,139 --> 00:10:16,199
an API to it an API in kubernetes you

00:10:14,310 --> 00:10:18,510
the way you do it is you create what's

00:10:16,199 --> 00:10:21,290
called a custom resource definition in

00:10:18,510 --> 00:10:24,420
which is a kind of a yeah Mille that

00:10:21,290 --> 00:10:26,720
describes what's what you're allowed to

00:10:24,420 --> 00:10:30,180
do when you're talking to that API and

00:10:26,720 --> 00:10:33,180
this is the code basically when I do add

00:10:30,180 --> 00:10:35,000
API to generate those custom resource

00:10:33,180 --> 00:10:39,209
definitions and be able to interact with

00:10:35,000 --> 00:10:41,220
after that I need to generate another

00:10:39,209 --> 00:10:43,680
piece which you would call a controller

00:10:41,220 --> 00:10:46,410
so controller is a loop that loop

00:10:43,680 --> 00:10:48,870
basically spends its time doing what's

00:10:46,410 --> 00:10:52,079
the state of the cluster what's running

00:10:48,870 --> 00:10:53,940
and if it doesn't agree with what's

00:10:52,079 --> 00:10:56,040
running it's going to reconcile and fix

00:10:53,940 --> 00:10:58,649
that so for example if it's been told to

00:10:56,040 --> 00:11:00,120
run three memcache servers it's gonna

00:10:58,649 --> 00:11:02,310
look if it finds only two it's gonna

00:11:00,120 --> 00:11:03,760
start another one and the operators job

00:11:02,310 --> 00:11:05,170
is basically to do all that

00:11:03,760 --> 00:11:09,430
and a loop the whole time that's the

00:11:05,170 --> 00:11:13,090
controller part it goes it looks fixes

00:11:09,430 --> 00:11:14,770
it goes back to looking so now that I

00:11:13,090 --> 00:11:16,870
have these things we need to put in some

00:11:14,770 --> 00:11:23,650
custom code so let me show you the

00:11:16,870 --> 00:11:25,630
custom code so the first thing I'm

00:11:23,650 --> 00:11:27,690
copying existing code in there we're

00:11:25,630 --> 00:11:31,270
gonna quickly go in these files as well

00:11:27,690 --> 00:11:35,650
so this is the controller and then this

00:11:31,270 --> 00:11:39,250
would be the types so if you look at

00:11:35,650 --> 00:11:41,560
this quickly why did I copy this because

00:11:39,250 --> 00:11:43,510
when you first generate this it it asks

00:11:41,560 --> 00:11:46,300
you what are the types of your API in my

00:11:43,510 --> 00:11:49,240
case I want a memcache cluster so I need

00:11:46,300 --> 00:11:51,220
a size of my I basically need the size

00:11:49,240 --> 00:11:52,840
of my cluster the size is the parameter

00:11:51,220 --> 00:11:55,180
that I'm gonna pass to tell it how big

00:11:52,840 --> 00:11:56,320
it should be and then I also have to

00:11:55,180 --> 00:11:58,060
edit what's called the status an

00:11:56,320 --> 00:12:00,910
operator doesn't just check something

00:11:58,060 --> 00:12:02,560
it also writes back status about the

00:12:00,910 --> 00:12:04,390
state of the world so in this case the

00:12:02,560 --> 00:12:05,860
number of nodes that we would have so

00:12:04,390 --> 00:12:09,400
these are two variables that I put in

00:12:05,860 --> 00:12:11,380
here so size and nodes these will be

00:12:09,400 --> 00:12:14,500
mapped to some yamo that I'm going to

00:12:11,380 --> 00:12:17,560
show a bit later and then the other

00:12:14,500 --> 00:12:20,650
thing that I copied over is this

00:12:17,560 --> 00:12:23,410
controller that's the negative degree

00:12:20,650 --> 00:12:25,510
part that's the actual loop that I

00:12:23,410 --> 00:12:28,270
talked about the loop that goes and

00:12:25,510 --> 00:12:31,060
checks basically if everything's running

00:12:28,270 --> 00:12:33,640
so basically you can see it here it gets

00:12:31,060 --> 00:12:40,000
the here it gets the memcache instances

00:12:33,640 --> 00:12:41,980
oops it checks for the instances if it's

00:12:40,000 --> 00:12:44,980
not at the number that it wants it'll

00:12:41,980 --> 00:12:47,920
create new pods and that code here is

00:12:44,980 --> 00:12:49,150
written in go you'll see later that I'll

00:12:47,920 --> 00:12:51,730
talk about how you can write this in

00:12:49,150 --> 00:12:53,530
other ways then go what go is the

00:12:51,730 --> 00:12:57,000
default way in which you can write this

00:12:53,530 --> 00:12:59,020
and then the code that you write here is

00:12:57,000 --> 00:13:00,850
depending on your operator can be

00:12:59,020 --> 00:13:02,230
complex or pretty straightforward this

00:13:00,850 --> 00:13:03,790
case this is a very stateless

00:13:02,230 --> 00:13:05,920
application about just spinning up

00:13:03,790 --> 00:13:08,230
memcache and getting them down so it

00:13:05,920 --> 00:13:11,290
fits in a couple of lines or lamp it's

00:13:08,230 --> 00:13:13,380
not that it's a few hundred but it's not

00:13:11,290 --> 00:13:13,380
that

00:13:13,660 --> 00:13:19,579
okay so what do i do once I've copied

00:13:16,399 --> 00:13:25,699
these things well first we've edited the

00:13:19,579 --> 00:13:29,060
types so I need to generate them and so

00:13:25,699 --> 00:13:31,130
I said that and I'm an operator as a is

00:13:29,060 --> 00:13:33,050
a doctor container we're gonna be

00:13:31,130 --> 00:13:34,610
building that doctor container so now

00:13:33,050 --> 00:13:36,440
we're gonna take all this code that we

00:13:34,610 --> 00:13:39,709
edited all this code that we added and

00:13:36,440 --> 00:13:41,870
we're going to generate the container

00:13:39,709 --> 00:13:43,550
that goes with it and I'm giving it a

00:13:41,870 --> 00:13:45,139
night I'm gonna later be pushing it to

00:13:43,550 --> 00:13:48,769
Cueto so I'm already giving it the full

00:13:45,139 --> 00:13:57,350
name that it's gonna have so this is

00:13:48,769 --> 00:13:57,829
done now let's see I'm just changing the

00:13:57,350 --> 00:14:00,199
name

00:13:57,829 --> 00:14:02,959
that's this dev deploy operator file

00:14:00,199 --> 00:14:07,100
down here is how you deploy the operator

00:14:02,959 --> 00:14:08,870
and it was generated by the SDK and so I

00:14:07,100 --> 00:14:12,800
have to edit it since I changed the name

00:14:08,870 --> 00:14:14,660
of the the name of the image and you can

00:14:12,800 --> 00:14:17,569
see it here so this is for those

00:14:14,660 --> 00:14:19,670
familiar with kubernetes this is what it

00:14:17,569 --> 00:14:21,620
looks like this is what a deployment for

00:14:19,670 --> 00:14:23,389
something in kubernetes look like and

00:14:21,620 --> 00:14:25,550
this basically is the file that tells me

00:14:23,389 --> 00:14:27,139
how to deploy that operator I've told

00:14:25,550 --> 00:14:28,850
you before that these are kubernetes

00:14:27,139 --> 00:14:32,240
apps just like the apps they're

00:14:28,850 --> 00:14:36,970
monitoring and so since I've done that

00:14:32,240 --> 00:14:39,260
now all I have to do is push my image

00:14:36,970 --> 00:14:42,970
should be quick since I've pushed it

00:14:39,260 --> 00:14:42,970
already but we're overriding it

00:14:46,280 --> 00:14:51,710
done okay so how do we get this right

00:14:50,120 --> 00:14:56,450
what do we do now

00:14:51,710 --> 00:14:58,220
so first there's this is kubernetes so

00:14:56,450 --> 00:15:00,740
there's quite a few llamo files to

00:14:58,220 --> 00:15:03,620
deploy there's the CR D which I've

00:15:00,740 --> 00:15:07,490
explained so in this case it's the file

00:15:03,620 --> 00:15:09,440
that basically describes the API that

00:15:07,490 --> 00:15:18,820
was generated by the SDK let me show you

00:15:09,440 --> 00:15:22,520
this so this basically describes what a

00:15:18,820 --> 00:15:25,490
how a memcache resource can look like

00:15:22,520 --> 00:15:27,770
and what I can send so that needs to be

00:15:25,490 --> 00:15:30,680
first registered with the kubernetes api

00:15:27,770 --> 00:15:34,960
server so that I can then tell it to

00:15:30,680 --> 00:15:40,370
deploy new memcache existence all right

00:15:34,960 --> 00:15:42,920
so we're gonna be deploying these let me

00:15:40,370 --> 00:15:46,730
just show you I'm gonna paste all this

00:15:42,920 --> 00:15:49,370
quickly here so here we're deploying the

00:15:46,730 --> 00:15:51,350
CR D then what we call the service

00:15:49,370 --> 00:15:52,850
account and also all the permissions and

00:15:51,350 --> 00:15:54,290
the all the permissions that the

00:15:52,850 --> 00:15:57,140
operator will need within that cluster

00:15:54,290 --> 00:15:58,940
and these are a lot of llamÃ³ files and

00:15:57,140 --> 00:16:01,040
I'm going to show you what the lifecycle

00:15:58,940 --> 00:16:02,540
manager does for you later which is the

00:16:01,040 --> 00:16:04,160
fact that you don't have to deploy all

00:16:02,540 --> 00:16:05,570
those UML file the lifecycle manager

00:16:04,160 --> 00:16:07,580
does that for you but if you're in the

00:16:05,570 --> 00:16:09,560
pure development manual mode that's what

00:16:07,580 --> 00:16:12,290
you're gonna have to do and then the

00:16:09,560 --> 00:16:17,600
next thing is we're gonna actually

00:16:12,290 --> 00:16:19,940
deploy this operator so this e now it's

00:16:17,600 --> 00:16:25,420
created so I should be able to do Cube

00:16:19,940 --> 00:16:25,420
control get deployment

00:16:26,520 --> 00:16:32,940
and I can see the memcache operator so

00:16:31,320 --> 00:16:35,490
there's no memcache running yet

00:16:32,940 --> 00:16:36,840
right like if this is just the operator

00:16:35,490 --> 00:16:39,210
itself I have not to instruct it to

00:16:36,840 --> 00:16:43,170
create a memcache cluster of a size that

00:16:39,210 --> 00:16:45,420
I want so let's do that so from a now on

00:16:43,170 --> 00:16:48,000
any user in this cluster that has the

00:16:45,420 --> 00:16:50,250
permissions can do this it doesn't have

00:16:48,000 --> 00:16:53,100
to go through all these different pieces

00:16:50,250 --> 00:17:07,970
of steps that I went through so what

00:16:53,100 --> 00:17:07,970
does this look like seconds all right

00:17:11,240 --> 00:17:20,880
not the right director here okay this is

00:17:18,570 --> 00:17:30,000
where I created everything and so if you

00:17:20,880 --> 00:17:32,940
can't deploy CDs this is it this is the

00:17:30,000 --> 00:17:37,020
oops I've been typing on my other screen

00:17:32,940 --> 00:17:39,600
great that's why I could that's why I

00:17:37,020 --> 00:17:43,260
had to change directories no need to

00:17:39,600 --> 00:17:47,280
change directors here all right so this

00:17:43,260 --> 00:17:48,960
small llamÃ³ here that you can see this

00:17:47,280 --> 00:17:51,210
is all it takes to instantiate an

00:17:48,960 --> 00:17:56,970
instance of memcache in this case three

00:17:51,210 --> 00:17:59,240
servers so if I cube control if I do

00:17:56,970 --> 00:17:59,240
this

00:18:07,290 --> 00:18:18,000
I created it now if I get my deployments

00:18:11,550 --> 00:18:23,870
again get the pods should I should see

00:18:18,000 --> 00:18:23,870
my pots come up there we go

00:18:32,290 --> 00:18:35,490
what did I do wrong

00:18:38,450 --> 00:18:43,200
it should be here

00:18:40,419 --> 00:18:43,200
there it is

00:18:46,040 --> 00:18:51,970
that's definitely it so

00:18:56,559 --> 00:19:00,570
there goes your DS

00:19:10,390 --> 00:19:16,570
this is the one we create a minute ago

00:19:12,940 --> 00:19:28,360
the question is why it's just one good

00:19:16,570 --> 00:19:30,970
question see all right we're gonna skip

00:19:28,360 --> 00:19:34,930
ahead since but basically you can see

00:19:30,970 --> 00:19:39,340
the memcache pod running here like right

00:19:34,930 --> 00:19:42,850
here and that's it why it's not a size

00:19:39,340 --> 00:19:45,700
three is a good question if we have time

00:19:42,850 --> 00:19:47,560
we'll get back to that so basically

00:19:45,700 --> 00:19:49,150
that's how it is if you want to delete

00:19:47,560 --> 00:19:51,760
it you delete the CR if you want to

00:19:49,150 --> 00:19:54,930
instantiate a new one that we can go but

00:19:51,760 --> 00:19:54,930
we can do that that's a good idea

00:19:54,990 --> 00:20:02,830
if we want to do some one that's called

00:19:57,690 --> 00:20:05,370
all things open memcache D and we can

00:20:02,830 --> 00:20:05,370
create

00:20:18,770 --> 00:20:24,009
mmm

00:20:21,320 --> 00:20:24,009
oops

00:20:28,840 --> 00:20:31,710
there we go

00:20:34,720 --> 00:20:44,999
I've been editing this on the wrong one

00:20:36,789 --> 00:20:47,710
that's why okay so here deploy CR DS

00:20:44,999 --> 00:20:50,739
I've been editing this one I've put a

00:20:47,710 --> 00:20:56,849
all things open memcache D here and now

00:20:50,739 --> 00:21:04,029
I can create let's apply this one and

00:20:56,849 --> 00:21:07,029
then now I can get pods there's my other

00:21:04,029 --> 00:21:09,340
things open memcache pod so I have two

00:21:07,029 --> 00:21:12,340
memcache services running at the same

00:21:09,340 --> 00:21:17,649
time all from the one Operator and if I

00:21:12,340 --> 00:21:21,580
kill a pod will restart it all right we

00:21:17,649 --> 00:21:26,859
can try here actually there we go

00:21:21,580 --> 00:21:30,419
delete pod delete it so wait a few

00:21:26,859 --> 00:21:30,419
seconds its terminating

00:21:44,790 --> 00:21:51,360
and well it's terminating let's continue

00:21:47,100 --> 00:21:53,220
so this is the SDK side of things so you

00:21:51,360 --> 00:21:55,080
see there's a lot of manual steps but

00:21:53,220 --> 00:21:56,640
what what does it mean when everything

00:21:55,080 --> 00:21:59,870
comes together what does it mean when

00:21:56,640 --> 00:22:01,650
you take that when you take the operator

00:21:59,870 --> 00:22:04,140
lifecycle manager and you put it

00:22:01,650 --> 00:22:06,060
together with nan not just example apps

00:22:04,140 --> 00:22:08,100
there you see you can see that it was

00:22:06,060 --> 00:22:09,630
restarted it's running again why because

00:22:08,100 --> 00:22:13,230
the operator doesn't want it to be dead

00:22:09,630 --> 00:22:16,140
I told him that it needs to stay open so

00:22:13,230 --> 00:22:18,390
when it all comes together this is what

00:22:16,140 --> 00:22:19,680
we see we have the in this cluster we

00:22:18,390 --> 00:22:25,830
have the operator lifecycle manager

00:22:19,680 --> 00:22:27,240
running and you can see that it has you

00:22:25,830 --> 00:22:29,610
have a list of already existing

00:22:27,240 --> 00:22:31,320
operators that is something that in the

00:22:29,610 --> 00:22:33,450
future will be able to be modified very

00:22:31,320 --> 00:22:34,860
easily and you'll be able to have all

00:22:33,450 --> 00:22:36,330
the operators you want in this case we

00:22:34,860 --> 00:22:38,850
have one at CD and one prometheus

00:22:36,330 --> 00:22:41,250
operator and I'm able to subscribe to

00:22:38,850 --> 00:22:42,210
these operators I'm doing the same thing

00:22:41,250 --> 00:22:44,520
that I've been doing with the cube

00:22:42,210 --> 00:22:49,170
control but inside of the openshift UI

00:22:44,520 --> 00:22:51,660
and here I'm creating a subscription to

00:22:49,170 --> 00:22:54,420
OLM and they say I want to I want my

00:22:51,660 --> 00:22:58,080
users of my cluster to be able to deploy

00:22:54,420 --> 00:23:00,480
at CD and so I just started this I can

00:22:58,080 --> 00:23:03,030
see that it is currently the plan

00:23:00,480 --> 00:23:06,600
completed so this was installed now if I

00:23:03,030 --> 00:23:09,030
go here I am I haven't at CD available

00:23:06,600 --> 00:23:10,590
for me and I can deploy new at CD

00:23:09,030 --> 00:23:12,720
versions so same thing as the cube

00:23:10,590 --> 00:23:14,580
control that I've been doing here I want

00:23:12,720 --> 00:23:16,290
to deploy at CD version with the name of

00:23:14,580 --> 00:23:20,070
example entity cluster with the name of

00:23:16,290 --> 00:23:22,200
example I want its size 3 and I want a

00:23:20,070 --> 00:23:25,950
specific version of at CD in this case 3

00:23:22,200 --> 00:23:29,970
to 13 when I create this you will see

00:23:25,950 --> 00:23:32,520
that new instances will get created of

00:23:29,970 --> 00:23:34,950
that you can go in the deployments here

00:23:32,520 --> 00:23:38,430
you see the NCD operator and you can

00:23:34,950 --> 00:23:41,720
also see the example this is here is the

00:23:38,430 --> 00:23:45,780
example at CD node that was created and

00:23:41,720 --> 00:23:50,190
so that one is ready it's running and

00:23:45,780 --> 00:23:54,240
now I'm able to I can also go here

00:23:50,190 --> 00:23:56,309
and go here and decide instances I can

00:23:54,240 --> 00:23:58,679
see that and I can see that it's coming

00:23:56,309 --> 00:24:01,259
up slowly see sighs three pods is what

00:23:58,679 --> 00:24:03,059
we asked that a to are already here so

00:24:01,259 --> 00:24:04,799
we're waiting for the third one but this

00:24:03,059 --> 00:24:08,100
entire city clusters bootstrapping

00:24:04,799 --> 00:24:09,779
itself and is able to then run you can

00:24:08,100 --> 00:24:12,809
also see that it's sending back status

00:24:09,779 --> 00:24:14,820
the cluster is available the what's the

00:24:12,809 --> 00:24:16,440
client port how do i connect to it what

00:24:14,820 --> 00:24:18,720
are my notes the members are ready

00:24:16,440 --> 00:24:20,460
so all these pods are running now you

00:24:18,720 --> 00:24:24,509
should be able to see them here all

00:24:20,460 --> 00:24:27,480
these examples I call everything example

00:24:24,509 --> 00:24:30,840
I should fix that but you have three one

00:24:27,480 --> 00:24:33,269
two three SED examples and i can combine

00:24:30,840 --> 00:24:36,539
these things i can also start doing a

00:24:33,269 --> 00:24:38,879
Prometheus one so let's see Prometheus

00:24:36,539 --> 00:24:44,070
is for those who don't know a very nice

00:24:38,879 --> 00:24:46,500
monitoring application and that also can

00:24:44,070 --> 00:24:51,149
be instantiated with an operator in this

00:24:46,500 --> 00:24:52,769
case I start the operator again now I

00:24:51,149 --> 00:24:55,139
have it available here here I can do

00:24:52,769 --> 00:24:57,629
more things I cannot just create a

00:24:55,139 --> 00:24:58,980
Prometheus and but I can create rules I

00:24:57,629 --> 00:25:00,899
can create the alert manager for

00:24:58,980 --> 00:25:03,240
Prometheus I can and I can create what

00:25:00,899 --> 00:25:05,759
we call service monitors so let me

00:25:03,240 --> 00:25:10,740
create Prometheus first so in this case

00:25:05,759 --> 00:25:13,259
this is again the CRD for Prometheus is

00:25:10,740 --> 00:25:16,830
a bit more complex so it has more inputs

00:25:13,259 --> 00:25:18,600
but in the end same API I create it and

00:25:16,830 --> 00:25:22,860
this is going to spin up a Prometheus

00:25:18,600 --> 00:25:26,129
cluster with two nodes I believe so and

00:25:22,860 --> 00:25:30,960
then I'm able to then decide if I want

00:25:26,129 --> 00:25:35,159
to have it have when I now go here I'm

00:25:30,960 --> 00:25:37,169
able to compose things so OLM will OLM

00:25:35,159 --> 00:25:39,059
in this case they are both independence

00:25:37,169 --> 00:25:41,159
at CDM Prometheus but one of the other

00:25:39,059 --> 00:25:42,899
goals of OLM is to be able to say if my

00:25:41,159 --> 00:25:45,509
operator is going to require another

00:25:42,899 --> 00:25:48,090
operator might as well find a way to for

00:25:45,509 --> 00:25:49,470
them to request dependencies for example

00:25:48,090 --> 00:25:51,389
if I but if I build something that

00:25:49,470 --> 00:25:53,460
requires HCD I'm not going to build

00:25:51,389 --> 00:25:55,919
another entity operator I'm going to

00:25:53,460 --> 00:25:58,110
invoke a dependency to the HDD operator

00:25:55,919 --> 00:25:59,639
through the lifecycle manager and then

00:25:58,110 --> 00:26:02,429
the lifecycle manager will install that

00:25:59,639 --> 00:26:03,049
for me first or instantiate a version of

00:26:02,429 --> 00:26:06,350
it

00:26:03,049 --> 00:26:08,840
and then deploy my application same ant

00:26:06,350 --> 00:26:11,389
another kind of dependency is for

00:26:08,840 --> 00:26:13,789
example what we call a service monitor

00:26:11,389 --> 00:26:16,369
if I want HDD to be monitored for

00:26:13,789 --> 00:26:19,090
example I can fill out this llamo that I

00:26:16,369 --> 00:26:22,039
have here I can point it to the sed

00:26:19,090 --> 00:26:25,549
instance and that will allow me to then

00:26:22,039 --> 00:26:27,169
see and monitor the sed instance so and

00:26:25,549 --> 00:26:29,570
all that again through the kubernetes

00:26:27,169 --> 00:26:32,570
api so the goal here is composability

00:26:29,570 --> 00:26:36,230
through knowledge through existing api's

00:26:32,570 --> 00:26:38,720
and also to basically run applications

00:26:36,230 --> 00:26:40,820
in ways that weren't possible before

00:26:38,720 --> 00:26:43,159
because you weren't able to easily

00:26:40,820 --> 00:26:46,369
combine them you had to go through tons

00:26:43,159 --> 00:26:49,820
of step to do that so that's basically

00:26:46,369 --> 00:26:51,019
it for for the demo I there's a couple

00:26:49,820 --> 00:26:55,249
of other things that I should note that

00:26:51,019 --> 00:26:57,980
I haven't talked about so let's see so

00:26:55,249 --> 00:27:00,769
the first thing is how do you use this

00:26:57,980 --> 00:27:02,690
where do you find it we have an Oregon

00:27:00,769 --> 00:27:04,580
Oregon github it's called operator

00:27:02,690 --> 00:27:08,269
framework all the projects in there are

00:27:04,580 --> 00:27:10,279
open source you can go there the SDK has

00:27:08,269 --> 00:27:11,690
a nice getting started guide which is

00:27:10,279 --> 00:27:15,889
kind of the same thing that I showed you

00:27:11,690 --> 00:27:18,230
today with a memcache it's usable

00:27:15,889 --> 00:27:21,049
there's their current releases and the

00:27:18,230 --> 00:27:23,779
lifecycle manager as well is there as

00:27:21,049 --> 00:27:26,600
well as metering and all kinds of future

00:27:23,779 --> 00:27:29,480
projects as well so this is where things

00:27:26,600 --> 00:27:32,090
happen then you also have a couple of

00:27:29,480 --> 00:27:34,999
other places like a getting started

00:27:32,090 --> 00:27:37,580
guide that is completely detailed and

00:27:34,999 --> 00:27:40,429
then you can find us on the kubernetes

00:27:37,580 --> 00:27:42,259
operators channel and slack or also on

00:27:40,429 --> 00:27:44,299
our mailing list it's a Google group

00:27:42,259 --> 00:27:47,330
called operator framework if you want to

00:27:44,299 --> 00:27:51,200
participate and there's some activity

00:27:47,330 --> 00:27:53,179
there one more thing that I like to add

00:27:51,200 --> 00:27:55,399
that I haven't done inside of this is

00:27:53,179 --> 00:27:57,289
we've seen how all of this was written

00:27:55,399 --> 00:27:59,749
with a lot of go code but for something

00:27:57,289 --> 00:28:01,850
as simple as memcache and even for more

00:27:59,749 --> 00:28:04,070
complex settings sometimes you don't

00:28:01,850 --> 00:28:06,019
need all that go code some people are

00:28:04,070 --> 00:28:09,679
more familiar with things like helm or

00:28:06,019 --> 00:28:11,929
ansible the SDK allows that as well it's

00:28:09,679 --> 00:28:13,700
there's a separate project called the

00:28:11,929 --> 00:28:14,520
helm app operator kit that we're

00:28:13,700 --> 00:28:16,950
migrating and

00:28:14,520 --> 00:28:18,810
the sdk it will allow you to take home

00:28:16,950 --> 00:28:20,730
charts and transform them into operators

00:28:18,810 --> 00:28:23,930
and in the future probably also add

00:28:20,730 --> 00:28:26,700
custom go code if you need to this is a

00:28:23,930 --> 00:28:28,620
not in the repo yet on the only thing

00:28:26,700 --> 00:28:30,390
that you can find is in there in the

00:28:28,620 --> 00:28:32,600
operator framework org you can find the

00:28:30,390 --> 00:28:36,720
helm app operator kit and then the other

00:28:32,600 --> 00:28:38,580
great thing that we've added is your you

00:28:36,720 --> 00:28:41,670
can write those operators with ansible

00:28:38,580 --> 00:28:44,520
and the the thing that i want to show

00:28:41,670 --> 00:28:50,310
here is what it looks like so the same

00:28:44,520 --> 00:28:52,680
memcache we have a nice repo in the

00:28:50,310 --> 00:28:55,860
Oracles operator SDK samples where you

00:28:52,680 --> 00:28:59,850
can look at examples and an example of

00:28:55,860 --> 00:29:01,320
ansible memcache is here so compared to

00:28:59,850 --> 00:29:03,420
all that ya know that I showed you this

00:29:01,320 --> 00:29:04,980
one is a bit simpler you only have to

00:29:03,420 --> 00:29:07,440
define a few things you have obviously

00:29:04,980 --> 00:29:09,620
what your what's gonna be watched but

00:29:07,440 --> 00:29:12,240
like the more interesting thing is that

00:29:09,620 --> 00:29:14,280
basically without most of the

00:29:12,240 --> 00:29:16,530
boilerplate around this the ansible

00:29:14,280 --> 00:29:19,560
version of the same demo that I did

00:29:16,530 --> 00:29:21,450
boils down to this which is very

00:29:19,560 --> 00:29:23,160
familiar to people who use kubernetes

00:29:21,450 --> 00:29:25,440
which is the definition about how to run

00:29:23,160 --> 00:29:27,780
memcache and then the ansible operator

00:29:25,440 --> 00:29:29,940
instead of the go over on time does this

00:29:27,780 --> 00:29:32,880
it uses the same code underneath it is

00:29:29,940 --> 00:29:34,740
but it allows you to write much more

00:29:32,880 --> 00:29:36,930
yamo for those that prefer versus

00:29:34,740 --> 00:29:38,490
complex to go codes and in the future we

00:29:36,930 --> 00:29:40,920
also you'll be able to mix and match

00:29:38,490 --> 00:29:46,410
there if you need to so this is not just

00:29:40,920 --> 00:29:48,960
for season to go developers that's the

00:29:46,410 --> 00:29:51,450
main thing that was the bulk of the talk

00:29:48,960 --> 00:29:55,070
so if anybody has two questions I'd be

00:29:51,450 --> 00:29:55,070
happy to answer yes

00:29:55,710 --> 00:30:00,049
I there's a mic coming

00:30:09,320 --> 00:30:15,750
notice in your demo that uh your CRD was

00:30:13,710 --> 00:30:18,420
in the same namespace as your deployed

00:30:15,750 --> 00:30:20,280
pods is this just the pattern that we're

00:30:18,420 --> 00:30:23,190
going with or is there a best practice

00:30:20,280 --> 00:30:26,490
for your CR DS and operators should live

00:30:23,190 --> 00:30:28,170
sure so for simplicity of the demo this

00:30:26,490 --> 00:30:29,580
was not something I didn't do it how you

00:30:28,170 --> 00:30:31,440
should do it in production this was all

00:30:29,580 --> 00:30:34,050
are in the same namespace under an admin

00:30:31,440 --> 00:30:36,420
user and all of this but as you saw

00:30:34,050 --> 00:30:37,890
there's quite a bit of our back rules

00:30:36,420 --> 00:30:39,810
and things like this to deploy and

00:30:37,890 --> 00:30:41,730
that's the reason you're supposed to

00:30:39,810 --> 00:30:44,850
isolate things in in different

00:30:41,730 --> 00:30:47,160
namespaces if if you can now the

00:30:44,850 --> 00:30:49,260
operators themselves they can't run in

00:30:47,160 --> 00:30:51,750
different namespaces but the way we're

00:30:49,260 --> 00:30:54,570
designing things right now is or operate

00:30:51,750 --> 00:30:56,760
a lifecycle manager instantiates one one

00:30:54,570 --> 00:30:58,500
operator for the entire cluster and then

00:30:56,760 --> 00:31:00,360
you're able to decide in what namespaces

00:30:58,500 --> 00:31:02,490
individual apps get deployed like for

00:31:00,360 --> 00:31:03,150
example the memcache app it was in the

00:31:02,490 --> 00:31:04,590
default one

00:31:03,150 --> 00:31:06,930
I could have pointed it to another

00:31:04,590 --> 00:31:15,290
namespace if I wanted to which you

00:31:06,930 --> 00:31:15,290
should do any other questions back there

00:31:17,180 --> 00:31:25,650
I'll wait for the mic so why would you

00:31:23,700 --> 00:31:28,350
use the helm operator instead of tiller

00:31:25,650 --> 00:31:30,630
what are the advantages so in this case

00:31:28,350 --> 00:31:33,780
well first of all it doesn't require

00:31:30,630 --> 00:31:36,240
tiller at all you don't you don't the

00:31:33,780 --> 00:31:37,980
the goal here is to it's really to

00:31:36,240 --> 00:31:41,250
simplify things I I don't think they're

00:31:37,980 --> 00:31:42,780
necessarily mutually exclusive but we

00:31:41,250 --> 00:31:46,320
find that it was much simpler to

00:31:42,780 --> 00:31:48,390
generate a complete container that

00:31:46,320 --> 00:31:51,360
self-contained versus relying on

00:31:48,390 --> 00:31:54,030
external other external pieces that's it

00:31:51,360 --> 00:31:56,120
but with the future and how helm 3 is

00:31:54,030 --> 00:32:00,020
going things might change I don't know

00:31:56,120 --> 00:32:00,020

YouTube URL: https://www.youtube.com/watch?v=AOhItx8yR4M


