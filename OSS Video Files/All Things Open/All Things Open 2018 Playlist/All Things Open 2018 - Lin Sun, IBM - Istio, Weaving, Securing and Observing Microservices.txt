Title: All Things Open 2018 - Lin Sun, IBM - Istio, Weaving, Securing and Observing Microservices
Publication date: 2018-12-05
Playlist: All Things Open 2018 Playlist
Description: 
	All Things Open 2018
Captions: 
	00:00:02,300 --> 00:00:10,410
yes so I'd like to introduce myself I

00:00:06,680 --> 00:00:17,369
I'm located in Raleigh so very nice to

00:00:10,410 --> 00:00:19,859
actually be able to feel home I've

00:00:17,369 --> 00:00:23,100
actually given many talks about Israel

00:00:19,859 --> 00:00:24,539
for the past 12 months and very excited

00:00:23,100 --> 00:00:27,420
this is the first time to be able to

00:00:24,539 --> 00:00:30,179
speak in Raleigh so this is our picture

00:00:27,420 --> 00:00:33,840
when we were doing a vacation in San

00:00:30,179 --> 00:00:35,730
Francisco and we saw the boats and I saw

00:00:33,840 --> 00:00:38,670
the bird I was like the bird looks like

00:00:35,730 --> 00:00:41,399
the Twitter icon and the boat certainly

00:00:38,670 --> 00:00:45,840
looked like the sto mashenka so I

00:00:41,399 --> 00:00:53,610
decided to use as the oh my is tio talk

00:00:45,840 --> 00:00:56,190
now so by the way this is they're also

00:00:53,610 --> 00:00:58,590
the first time I actually speak without

00:00:56,190 --> 00:01:01,760
a computer in front of me that makes me

00:00:58,590 --> 00:01:01,760
feel a little bit

00:01:13,430 --> 00:01:18,660
so what is exactly sto what are the

00:01:17,670 --> 00:01:23,070
problems

00:01:18,660 --> 00:01:25,740
sto is trying to solve many of you are

00:01:23,070 --> 00:01:29,760
probably already in the DevOps journey

00:01:25,740 --> 00:01:32,280
to looking at have monolithic

00:01:29,760 --> 00:01:34,410
application and change to modern

00:01:32,280 --> 00:01:37,530
distributed architecture so how many of

00:01:34,410 --> 00:01:41,490
you are actually looking at developing

00:01:37,530 --> 00:01:43,350
modern distributed architecture Wow lots

00:01:41,490 --> 00:01:48,210
of hands so how many of you have heard

00:01:43,350 --> 00:01:50,580
of Sto Wow lots of hand - so as your

00:01:48,210 --> 00:01:52,830
journey to murder more than distributed

00:01:50,580 --> 00:01:55,860
architecture I'm sure you're looking at

00:01:52,830 --> 00:02:00,020
container based services because

00:01:55,860 --> 00:02:04,170
container is the best method to delete

00:02:00,020 --> 00:02:06,539
package and also deliver your modern

00:02:04,170 --> 00:02:10,890
distributed architecture you are looking

00:02:06,539 --> 00:02:13,739
at deployed at micro services into

00:02:10,890 --> 00:02:16,739
dynamic environments and they are likely

00:02:13,739 --> 00:02:20,790
going to be composed through network so

00:02:16,739 --> 00:02:23,190
a set of the emergent problem come arise

00:02:20,790 --> 00:02:25,290
as you kind of lower heavy modern

00:02:23,190 --> 00:02:31,769
distributed architecture breaking into

00:02:25,290 --> 00:02:34,380
you micro services so as our IT industry

00:02:31,769 --> 00:02:37,980
is shifting our modern distributed

00:02:34,380 --> 00:02:40,709
architecture are into micro services and

00:02:37,980 --> 00:02:43,530
distributed architecture the certain

00:02:40,709 --> 00:02:46,290
problem arises as to you how are you

00:02:43,530 --> 00:02:48,390
going to manage leads make up services

00:02:46,290 --> 00:02:50,850
how are you going to connect to these

00:02:48,390 --> 00:02:53,430
micro services how are you going to

00:02:50,850 --> 00:02:55,650
observe what are the traffic's going on

00:02:53,430 --> 00:02:58,019
within the micro services how are you

00:02:55,650 --> 00:03:00,390
going to determine which micro service

00:02:58,019 --> 00:03:02,790
is causing you problems or having your

00:03:00,390 --> 00:03:05,549
application not working how are you

00:03:02,790 --> 00:03:08,190
going to actually apply policies to your

00:03:05,549 --> 00:03:11,730
micro services and how are you going to

00:03:08,190 --> 00:03:13,799
you secure traffic among your micro

00:03:11,730 --> 00:03:16,890
services so these are a set of problems

00:03:13,799 --> 00:03:19,560
you could solve it in one way which is

00:03:16,890 --> 00:03:21,840
each of your micro services going to

00:03:19,560 --> 00:03:23,520
handle all their problems within their

00:03:21,840 --> 00:03:26,430
application and but

00:03:23,520 --> 00:03:30,120
it's not going to be portable and that's

00:03:26,430 --> 00:03:32,190
not going to be consistent and you're

00:03:30,120 --> 00:03:36,090
going to laughter all the application

00:03:32,190 --> 00:03:38,280
developer to handle all that connect

00:03:36,090 --> 00:03:40,830
observe secure and control problem to

00:03:38,280 --> 00:03:45,960
themselves so you may not really want to

00:03:40,830 --> 00:03:48,570
do that here so with this problem the

00:03:45,960 --> 00:03:52,320
service match concept was born probably

00:03:48,570 --> 00:03:55,220
our early last year also the service

00:03:52,320 --> 00:03:58,710
match provides a transparent and

00:03:55,220 --> 00:04:02,700
language independent network for

00:03:58,710 --> 00:04:05,550
connecting observing securing and

00:04:02,700 --> 00:04:08,670
controlling the connectivity between the

00:04:05,550 --> 00:04:13,470
services that's why people call it it's

00:04:08,670 --> 00:04:16,410
a network for services not a network for

00:04:13,470 --> 00:04:21,060
bytes what service match really does is

00:04:16,410 --> 00:04:24,600
actually abstract the different pieces

00:04:21,060 --> 00:04:27,120
your application needed to connect to

00:04:24,600 --> 00:04:31,050
observe to secure and control the micro

00:04:27,120 --> 00:04:32,730
services until the platform lab layer so

00:04:31,050 --> 00:04:34,830
that the platform can solve these

00:04:32,730 --> 00:04:38,100
problem for you regardless what

00:04:34,830 --> 00:04:42,390
languages you are writing you are rating

00:04:38,100 --> 00:04:44,760
your micro services and that's really

00:04:42,390 --> 00:04:47,520
neat because your developer doesn't have

00:04:44,760 --> 00:04:49,530
to worry about this and then they can

00:04:47,520 --> 00:04:51,890
rely on the platform to provide a

00:04:49,530 --> 00:04:55,800
consistent way so you're going to see

00:04:51,890 --> 00:04:57,660
consistency among how your services are

00:04:55,800 --> 00:05:00,150
connected to each other how your

00:04:57,660 --> 00:05:02,760
services are going to be observed by the

00:05:00,150 --> 00:05:07,520
operators all that consistency comes

00:05:02,760 --> 00:05:12,750
with the platform so sto was a project

00:05:07,520 --> 00:05:16,110
launched last May by IBM Google and lyft

00:05:12,750 --> 00:05:19,410
founded by these three companies but

00:05:16,110 --> 00:05:22,800
it's been tremendously growing we have

00:05:19,410 --> 00:05:27,419
red head was a big player in it still

00:05:22,800 --> 00:05:30,810
now and Cisco and Tegrity tree we am

00:05:27,419 --> 00:05:34,490
well so it's a really thriving community

00:05:30,810 --> 00:05:36,870
we have 200 plus contributors now it's

00:05:34,490 --> 00:05:39,270
what's best about SEO is

00:05:36,870 --> 00:05:42,480
leverage the concept of her service

00:05:39,270 --> 00:05:45,660
match and it's providing an open service

00:05:42,480 --> 00:05:48,510
match platform to solve the connectors

00:05:45,660 --> 00:05:50,900
observes our secure and control micro

00:05:48,510 --> 00:05:54,660
service problem so your application

00:05:50,900 --> 00:05:56,880
doesn't have to solve that problem each

00:05:54,660 --> 00:05:59,790
individual developer doesn't have to

00:05:56,880 --> 00:06:02,160
solve it in their language specific away

00:05:59,790 --> 00:06:07,320
and the service must provide the

00:06:02,160 --> 00:06:09,810
consistency for you so at the cove the

00:06:07,320 --> 00:06:11,940
service match is really the for our

00:06:09,810 --> 00:06:14,460
pieces we were mentioning connect

00:06:11,940 --> 00:06:17,280
observe are secure and control fully

00:06:14,460 --> 00:06:20,280
here remember these four words and the

00:06:17,280 --> 00:06:25,230
most important thing is also it's open

00:06:20,280 --> 00:06:27,750
platform for service mesh so how does it

00:06:25,230 --> 00:06:30,060
really works are really quickly our

00:06:27,750 --> 00:06:33,330
since I think a third of you raise hand

00:06:30,060 --> 00:06:35,940
for having heard of Sto so when the

00:06:33,330 --> 00:06:39,660
service are needs a needs to talk to you

00:06:35,940 --> 00:06:44,660
service B and so today they just call

00:06:39,660 --> 00:06:46,920
each other directly when we sing a sto

00:06:44,660 --> 00:06:49,830
environment to remember we talk about

00:06:46,920 --> 00:06:53,100
Israel as a platform it's going to

00:06:49,830 --> 00:06:55,230
abstract all the key functions to

00:06:53,100 --> 00:06:58,670
providing the network for services for

00:06:55,230 --> 00:07:02,910
you so that's through the Envoy sidecar

00:06:58,670 --> 00:07:05,310
so we when you deploy your service a and

00:07:02,910 --> 00:07:07,980
B we think it's your environment you

00:07:05,310 --> 00:07:10,770
would deploy a sidecar along with

00:07:07,980 --> 00:07:13,680
service a which is really on the

00:07:10,770 --> 00:07:16,050
container a so they are deployed with

00:07:13,680 --> 00:07:19,070
seeing the same part we think human area

00:07:16,050 --> 00:07:23,460
environment and also same for B so

00:07:19,070 --> 00:07:26,490
container B which makes up the service B

00:07:23,460 --> 00:07:31,980
is going to be deployed within the same

00:07:26,490 --> 00:07:34,440
pod as the on voice icon it's T also has

00:07:31,980 --> 00:07:36,660
control planes so on the bottom of the

00:07:34,440 --> 00:07:39,270
diagram we are showing you the control

00:07:36,660 --> 00:07:43,140
plane and then at the top is the data

00:07:39,270 --> 00:07:45,480
plane which contains the traffic between

00:07:43,140 --> 00:07:47,970
your applications and the invoice icon

00:07:45,480 --> 00:07:50,580
so one of the key pieces of the control

00:07:47,970 --> 00:07:53,490
plane is pilot so what pilot

00:07:50,580 --> 00:07:56,490
this boots the configuration for your

00:07:53,490 --> 00:07:59,129
arm voice ID car so your own voice ID

00:07:56,490 --> 00:08:04,020
car would have the configuration as far

00:07:59,129 --> 00:08:06,389
as which services is my upstream cluster

00:08:04,020 --> 00:08:08,430
are from an envoy term you know how am I

00:08:06,389 --> 00:08:12,990
going to route my traffic which be am I

00:08:08,430 --> 00:08:16,050
going to talk to you the other key piece

00:08:12,990 --> 00:08:19,949
of the control plane is our telemetry so

00:08:16,050 --> 00:08:22,710
it provides the tracing the observed

00:08:19,949 --> 00:08:26,520
problem we talked about earlier tracing

00:08:22,710 --> 00:08:29,539
a metrics so service a and service B are

00:08:26,520 --> 00:08:32,130
tracing an application level and metrics

00:08:29,539 --> 00:08:36,120
application level can be sent through

00:08:32,130 --> 00:08:39,390
the Envoy sidecar to the trailer to the

00:08:36,120 --> 00:08:41,370
tonometry component and again which is

00:08:39,390 --> 00:08:45,029
neat because the sidecar is doing things

00:08:41,370 --> 00:08:47,190
so your application that has service a

00:08:45,029 --> 00:08:54,360
and service speed doesn't have to handle

00:08:47,190 --> 00:08:56,579
about tracing we also have a Citadel

00:08:54,360 --> 00:08:59,430
component which is our security

00:08:56,579 --> 00:09:02,790
component to be able to assign

00:08:59,430 --> 00:09:05,459
identities and also enable our secure

00:09:02,790 --> 00:09:11,279
communications among service a to

00:09:05,459 --> 00:09:14,940
service B we also have a policy

00:09:11,279 --> 00:09:17,730
component R to help enforce policy so

00:09:14,940 --> 00:09:19,860
when a talks to be it checks with the

00:09:17,730 --> 00:09:25,260
policy component you see you know am I

00:09:19,860 --> 00:09:27,209
really allowed to talk to you B so let's

00:09:25,260 --> 00:09:30,560
take a look how this works in the

00:09:27,209 --> 00:09:34,500
service mesh environment when a cause be

00:09:30,560 --> 00:09:37,140
a sidecar would intercept at a car so it

00:09:34,500 --> 00:09:39,560
doesn't go to the B director Li and then

00:09:37,140 --> 00:09:42,720
a sidecar based on its site

00:09:39,560 --> 00:09:44,940
configuration of the destination and

00:09:42,720 --> 00:09:47,310
also the route route to determine you

00:09:44,940 --> 00:09:49,890
know which exactly the B I'm going to

00:09:47,310 --> 00:09:53,130
send the traffic to and when the traffic

00:09:49,890 --> 00:09:56,100
goes to B it sends to the B's sidecar

00:09:53,130 --> 00:09:58,199
first and then the Envoy side column B

00:09:56,100 --> 00:10:00,209
is going to check you know is a even

00:09:58,199 --> 00:10:03,960
allowed to talk to be a my going to

00:10:00,209 --> 00:10:05,820
allow the request comes through

00:10:03,960 --> 00:10:08,100
that's so that's what are the policy

00:10:05,820 --> 00:10:10,320
checks it goes to and then it forwards

00:10:08,100 --> 00:10:13,440
the traffic to be if it's allowed and

00:10:10,320 --> 00:10:16,560
then when the response come back its

00:10:13,440 --> 00:10:19,950
come back from B to R B side car trips

00:10:16,560 --> 00:10:23,190
are the traffic from envoy and then both

00:10:19,950 --> 00:10:26,310
of the side car also a sink this they

00:10:23,190 --> 00:10:28,740
report tonometry data so it's reported

00:10:26,310 --> 00:10:31,440
to you are from a on the client side and

00:10:28,740 --> 00:10:36,000
B on the server side sue the envoy to

00:10:31,440 --> 00:10:38,700
the tonometry component of Sto so if you

00:10:36,000 --> 00:10:42,470
please put all that together you can see

00:10:38,700 --> 00:10:45,630
at the top is how the data playing are

00:10:42,470 --> 00:10:48,240
goes so if you actually need to visit

00:10:45,630 --> 00:10:50,850
your application most likely you're

00:10:48,240 --> 00:10:53,610
going to visit through a sto ingress

00:10:50,850 --> 00:10:55,649
gateway which is another armboy you

00:10:53,610 --> 00:10:58,560
could also choose to visit your traffic

00:10:55,649 --> 00:11:00,630
directly through your service a using

00:10:58,560 --> 00:11:04,470
Cuban area no balance of service or

00:11:00,630 --> 00:11:06,810
using no port we think you banana but

00:11:04,470 --> 00:11:10,380
you will lose some of the function

00:11:06,810 --> 00:11:12,120
provided by through ingress gateway such

00:11:10,380 --> 00:11:15,270
as you won't be able to do traffic

00:11:12,120 --> 00:11:17,940
shifting all traffic steering from the

00:11:15,270 --> 00:11:20,670
Gateway to service a and then you can

00:11:17,940 --> 00:11:23,730
see the traffic goes to the ingress

00:11:20,670 --> 00:11:26,130
gateway to service a envoy and then to

00:11:23,730 --> 00:11:28,440
service peace envoy and optionally you

00:11:26,130 --> 00:11:31,230
can also set up an egress gateway to

00:11:28,440 --> 00:11:33,830
control your outgoing traffic going out

00:11:31,230 --> 00:11:33,830
of the mesh

00:11:34,440 --> 00:11:40,650
once they really notice the interesting

00:11:36,900 --> 00:11:43,410
on this diagram is only the from the

00:11:40,650 --> 00:11:47,010
data plane traffic it only goes to the

00:11:43,410 --> 00:11:48,930
policy to do the policy check and we

00:11:47,010 --> 00:11:51,360
don't go to the policy engine every

00:11:48,930 --> 00:11:54,300
single time because we do cache a lot of

00:11:51,360 --> 00:11:57,180
data on local envoy so most most of

00:11:54,300 --> 00:11:59,880
Amida doesn't go to the policy component

00:11:57,180 --> 00:12:01,620
to check but sometimes it does are when

00:11:59,880 --> 00:12:05,360
the local cache doesn't have the data

00:12:01,620 --> 00:12:08,970
such as a is they allowed to talk to be

00:12:05,360 --> 00:12:13,670
so where we are is tht one always

00:12:08,970 --> 00:12:17,300
release in July end of July this year

00:12:13,670 --> 00:12:20,300
so it so offers production-ready our

00:12:17,300 --> 00:12:23,060
releases it doesn't mean every single

00:12:20,300 --> 00:12:25,670
feature its production ready but many of

00:12:23,060 --> 00:12:29,690
the core our pieces are pre-production

00:12:25,670 --> 00:12:32,660
ready we talked about 200 developers and

00:12:29,690 --> 00:12:36,709
the growing companies that's joining us

00:12:32,660 --> 00:12:39,950
on this journey this many adapters and a

00:12:36,709 --> 00:12:43,880
lot of customers are actually using sto

00:12:39,950 --> 00:12:47,029
so the sto in action at the bottom of

00:12:43,880 --> 00:12:50,980
the page are a list of the customers on

00:12:47,029 --> 00:12:54,890
different cloud providers using is do

00:12:50,980 --> 00:12:58,940
some of the highlights of sto Wanda o is

00:12:54,890 --> 00:13:00,800
you can flex fully config is do like if

00:12:58,940 --> 00:13:02,540
you don't need mixer because you are

00:13:00,800 --> 00:13:05,540
worried about it goes to the control

00:13:02,540 --> 00:13:07,850
plane mix a component you do the policy

00:13:05,540 --> 00:13:09,950
check you could optionally to install

00:13:07,850 --> 00:13:13,940
its do without mixer so that's totally

00:13:09,950 --> 00:13:17,300
possible you can do minimum SEO are just

00:13:13,940 --> 00:13:19,519
having on voice i car and also the pilot

00:13:17,300 --> 00:13:22,519
component so that's totally possible to

00:13:19,519 --> 00:13:28,279
you we have changed to a new traffic

00:13:22,519 --> 00:13:31,000
management model and new destination

00:13:28,279 --> 00:13:33,970
rule new virtual services new gateway to

00:13:31,000 --> 00:13:37,880
allow more flexibility of our network

00:13:33,970 --> 00:13:40,699
configurations we have also have

00:13:37,880 --> 00:13:42,589
incremental mutual TRS support so that's

00:13:40,699 --> 00:13:45,740
really important when you start you're

00:13:42,589 --> 00:13:48,019
looking into you mutual TLS support we

00:13:45,740 --> 00:13:51,199
think is still I highly recommend you

00:13:48,019 --> 00:13:53,690
start without mutual TLS and then use

00:13:51,199 --> 00:13:56,510
once you get it working and then

00:13:53,690 --> 00:13:59,209
gradually adopt a me to adhere as just

00:13:56,510 --> 00:14:01,790
it's much easier for you to troubleshoot

00:13:59,209 --> 00:14:04,670
in your application without me to tears

00:14:01,790 --> 00:14:07,910
and then it's your provide very flexible

00:14:04,670 --> 00:14:13,220
way for you to enable it with just

00:14:07,910 --> 00:14:15,529
simple configurations we also have mix

00:14:13,220 --> 00:14:18,649
adapter it's out of processor now so you

00:14:15,529 --> 00:14:21,649
could develop mix adapter to extend is

00:14:18,649 --> 00:14:24,020
still without rebooting the mixer

00:14:21,649 --> 00:14:25,430
component of the policy component so

00:14:24,020 --> 00:14:27,110
that's really nice I

00:14:25,430 --> 00:14:31,160
actually resolve a lot of people

00:14:27,110 --> 00:14:33,800
developing more mixer adapters we also

00:14:31,160 --> 00:14:36,110
had recently published our performance

00:14:33,800 --> 00:14:38,960
report so if you're interested to send

00:14:36,110 --> 00:14:41,899
me an email be happy to provide that

00:14:38,960 --> 00:14:44,959
it basically have we have done a

00:14:41,899 --> 00:14:48,260
different performance analysis of sto on

00:14:44,959 --> 00:14:51,140
different cloud providers so give you

00:14:48,260 --> 00:14:53,540
some ideas you know how much SDO is

00:14:51,140 --> 00:14:56,300
being added and how much resource is

00:14:53,540 --> 00:15:00,830
being added to to your application and

00:14:56,300 --> 00:15:04,399
your cuban era classroom we also been

00:15:00,830 --> 00:15:07,190
released our fixed packs so 101-102 has

00:15:04,399 --> 00:15:09,110
been out it's been addressing some of

00:15:07,190 --> 00:15:13,670
the critical issue finding by our

00:15:09,110 --> 00:15:16,100
customers since well it still has a lot

00:15:13,670 --> 00:15:18,380
of features so a lot of our users are

00:15:16,100 --> 00:15:20,360
actually confused when they started

00:15:18,380 --> 00:15:23,290
you're looking at its deal when they

00:15:20,360 --> 00:15:26,029
look at our documentation they find out

00:15:23,290 --> 00:15:28,790
overwhelming because we have a lot of

00:15:26,029 --> 00:15:31,490
features I mean it's a lot of problems

00:15:28,790 --> 00:15:34,310
who is trying to solve from security to

00:15:31,490 --> 00:15:36,890
policy enforcement to resilience to

00:15:34,310 --> 00:15:41,060
traffic control and observer abilities

00:15:36,890 --> 00:15:43,610
so one thing we actually want to make

00:15:41,060 --> 00:15:45,920
sure our user knows that they can

00:15:43,610 --> 00:15:47,839
actually consume some of the features

00:15:45,920 --> 00:15:50,450
are one by one they don't have to

00:15:47,839 --> 00:15:53,680
consume all the features together so for

00:15:50,450 --> 00:15:58,100
instance that our weather company is a

00:15:53,680 --> 00:15:59,930
campus acquired by IBM I think of three

00:15:58,100 --> 00:16:02,600
or four years ago so they've been

00:15:59,930 --> 00:16:05,360
looking at SEO they've been looking at

00:16:02,600 --> 00:16:07,910
deploy SEO in their pre-production

00:16:05,360 --> 00:16:10,279
production environment and what they

00:16:07,910 --> 00:16:12,579
like about Israel is it's a single

00:16:10,279 --> 00:16:16,370
platform for many tools it's

00:16:12,579 --> 00:16:20,450
significantly less code for them to

00:16:16,370 --> 00:16:23,990
write and also it's it's cloud native

00:16:20,450 --> 00:16:25,790
it's cloud agnostic so Amazon I believe

00:16:23,990 --> 00:16:28,550
there's a couple blocks are running

00:16:25,790 --> 00:16:32,560
still there are companies startup doing

00:16:28,550 --> 00:16:35,930
its your support for eks Google has

00:16:32,560 --> 00:16:38,690
technical preview just lined up to you

00:16:35,930 --> 00:16:42,350
for manage the sto Red Hat I believe

00:16:38,690 --> 00:16:45,200
just released technical preview also on

00:16:42,350 --> 00:16:47,540
Sto so this minimum of the cloud

00:16:45,200 --> 00:16:51,170
provider already support its user you're

00:16:47,540 --> 00:16:53,270
not locked in when you use STL so

00:16:51,170 --> 00:16:56,570
whether company was the example they've

00:16:53,270 --> 00:16:59,300
been using is do they find out it really

00:16:56,570 --> 00:17:01,490
helped them identify problems on Monday

00:16:59,300 --> 00:17:04,130
or 40 of their micro services so they

00:17:01,490 --> 00:17:07,370
can quickly knows which services has

00:17:04,130 --> 00:17:10,370
problems it can also quickly allow them

00:17:07,370 --> 00:17:12,290
through configuration changes to be able

00:17:10,370 --> 00:17:15,470
to make sure they are testing the right

00:17:12,290 --> 00:17:20,780
thing to make sure they are actually be

00:17:15,470 --> 00:17:22,790
able to change configuration switch from

00:17:20,780 --> 00:17:26,360
different versions are the in

00:17:22,790 --> 00:17:28,280
development with when they are doing

00:17:26,360 --> 00:17:30,260
their testing so that's really powerful

00:17:28,280 --> 00:17:32,810
so they feel confident about what they

00:17:30,260 --> 00:17:36,560
are testing and what they are running in

00:17:32,810 --> 00:17:38,360
the production environment so one thing

00:17:36,560 --> 00:17:41,720
clearly is really interesting I thought

00:17:38,360 --> 00:17:43,970
in their scenario is they have 40 micro

00:17:41,720 --> 00:17:46,340
services but they decided you know I'm

00:17:43,970 --> 00:17:48,860
not going to move all my micro services

00:17:46,340 --> 00:17:51,410
into its deal we're going to move one

00:17:48,860 --> 00:17:53,810
services a time so in fact they only did

00:17:51,410 --> 00:17:56,150
one of their services in it still match

00:17:53,810 --> 00:17:59,240
so most of their services are actually

00:17:56,150 --> 00:18:02,510
outside of the ISTE oh it's connected to

00:17:59,240 --> 00:18:06,500
buy services within the mesh - they are

00:18:02,510 --> 00:18:09,830
external services so they have they have

00:18:06,500 --> 00:18:13,340
using SEO gateway and virtual services

00:18:09,830 --> 00:18:16,850
to determine well the traffic goes and

00:18:13,340 --> 00:18:18,830
if the if the if the incoming request

00:18:16,850 --> 00:18:20,870
can be handled by their cash generator

00:18:18,830 --> 00:18:23,570
which is within a match the cash

00:18:20,870 --> 00:18:26,060
generator will handle it if it cannot be

00:18:23,570 --> 00:18:28,310
handled by their cash generator they're

00:18:26,060 --> 00:18:31,160
going to forward to the external our

00:18:28,310 --> 00:18:33,920
services which is the current weather

00:18:31,160 --> 00:18:36,980
API so from the current weather API

00:18:33,920 --> 00:18:39,230
perspective we are not seeing they

00:18:36,980 --> 00:18:41,810
didn't even know the traffic has been

00:18:39,230 --> 00:18:44,240
intercepted by ISTE or has been

00:18:41,810 --> 00:18:46,250
intercepted by the cash generator so

00:18:44,240 --> 00:18:49,400
that was really neat from their

00:18:46,250 --> 00:18:51,770
perspective on that and this is a simple

00:18:49,400 --> 00:18:52,400
service entry I'm I'm sorry the phone's

00:18:51,770 --> 00:18:54,860
may not be

00:18:52,400 --> 00:18:58,490
super-friendly the color but it shows

00:18:54,860 --> 00:19:02,090
their service entry to bring their

00:18:58,490 --> 00:19:04,880
current weather API as existing service

00:19:02,090 --> 00:19:08,330
outside of the mesh into the mesh for

00:19:04,880 --> 00:19:10,940
for consume and this is their simple

00:19:08,330 --> 00:19:15,380
route rule you can see how they have

00:19:10,940 --> 00:19:19,610
cash generator intercepted a traffic and

00:19:15,380 --> 00:19:25,670
also rewrite the traffic to do a URI

00:19:19,610 --> 00:19:27,830
match on the rewrite and another company

00:19:25,670 --> 00:19:30,560
we are working with is a larger airline

00:19:27,830 --> 00:19:34,070
company they are deploy our Cuban ad

00:19:30,560 --> 00:19:38,230
cluster or IBM cloud and they're looking

00:19:34,070 --> 00:19:42,350
SEO to leverage traffic management to do

00:19:38,230 --> 00:19:46,430
request routing they use SEO to do

00:19:42,350 --> 00:19:49,040
circle breaking route rules so they can

00:19:46,430 --> 00:19:52,880
control the traffic to do sheer traffic

00:19:49,040 --> 00:19:55,010
steering traffic shifting and also

00:19:52,880 --> 00:19:57,740
traffic monitoring to look at their

00:19:55,010 --> 00:19:59,930
services to see you know well the

00:19:57,740 --> 00:20:02,090
Services has problem where are the

00:19:59,930 --> 00:20:05,330
latencies what are the delays of their

00:20:02,090 --> 00:20:07,670
services and to apply policies on the

00:20:05,330 --> 00:20:10,910
ingress and egress layer so they know

00:20:07,670 --> 00:20:13,130
exactly what are the traffic's goes into

00:20:10,910 --> 00:20:17,780
the mesh and what the traffic goes out

00:20:13,130 --> 00:20:22,580
from the mesh to the external birds so

00:20:17,780 --> 00:20:25,490
that's I see it in life so I like to

00:20:22,580 --> 00:20:29,330
introduce quickly on the application so

00:20:25,490 --> 00:20:31,340
the application we decided to move to

00:20:29,330 --> 00:20:33,290
the mesh it was a popular Cuban

00:20:31,340 --> 00:20:36,800
etiquette spooky example how many of you

00:20:33,290 --> 00:20:40,790
installed Cuban eric s book it's one of

00:20:36,800 --> 00:20:43,160
the most popular cuban eric s book cuban

00:20:40,790 --> 00:20:45,710
any example as we were learning cuban

00:20:43,160 --> 00:20:48,110
any few years back and what's

00:20:45,710 --> 00:20:50,240
interesting about this example is a

00:20:48,110 --> 00:20:53,750
guest book version wine is pretty much

00:20:50,240 --> 00:20:55,880
what comes from cuba Nadi's we didn't

00:20:53,750 --> 00:20:58,940
make any changes and then guest book

00:20:55,880 --> 00:21:01,550
version 2 is what we did are to make a

00:20:58,940 --> 00:21:05,350
difference so we decided we're going to

00:21:01,550 --> 00:21:07,900
consume external service which is a toy

00:21:05,350 --> 00:21:12,669
analyzer service from Watson so as the

00:21:07,900 --> 00:21:14,799
user leave guests leave messages on the

00:21:12,669 --> 00:21:17,080
gas book we're going to automatically

00:21:14,799 --> 00:21:21,910
based on a tone we have a little bit

00:21:17,080 --> 00:21:25,660
code to generate emoji so you actually

00:21:21,910 --> 00:21:29,890
make it fun to see to see the messages

00:21:25,660 --> 00:21:32,770
so with version cube we added we enhance

00:21:29,890 --> 00:21:35,919
the gas for our service and we added the

00:21:32,770 --> 00:21:38,500
analyzer service and what's also

00:21:35,919 --> 00:21:41,679
interesting is you can see we also have

00:21:38,500 --> 00:21:44,470
services running outside of the mesh so

00:21:41,679 --> 00:21:46,570
like in this example the red is slave

00:21:44,470 --> 00:21:48,940
and master they're running in Cuban

00:21:46,570 --> 00:21:55,330
Eddie's but they are running outside of

00:21:48,940 --> 00:21:58,750
the mesh so since I don't have access to

00:21:55,330 --> 00:22:02,830
a laptop so we have to do a recorded

00:21:58,750 --> 00:22:07,750
demo so I apologize its foot had not my

00:22:02,830 --> 00:22:11,220
first choice but I just recorded this an

00:22:07,750 --> 00:22:14,500
hour ago so it's still pretty fresh so

00:22:11,220 --> 00:22:18,220
what we are seeing is you can see all

00:22:14,500 --> 00:22:20,320
the paths within the stl system so you

00:22:18,220 --> 00:22:22,840
can see I have the SPO control plane

00:22:20,320 --> 00:22:26,789
pretty much installed with a bunch of

00:22:22,840 --> 00:22:30,700
optional component like tracing and and

00:22:26,789 --> 00:22:32,799
Griffin that is also there too you can

00:22:30,700 --> 00:22:35,860
see I deployed a guest book version 1

00:22:32,799 --> 00:22:41,350
and version 2 and also the analyzer and

00:22:35,860 --> 00:22:43,659
red is also there too so if you do is

00:22:41,350 --> 00:22:46,360
still sit here I'll get all that would

00:22:43,659 --> 00:22:49,090
shows you all the configuration within

00:22:46,360 --> 00:22:52,659
the mesh so you can see I have our

00:22:49,090 --> 00:22:54,909
destination rule my virtual services and

00:22:52,659 --> 00:22:57,220
guess what gateway so let's take a look

00:22:54,909 --> 00:23:01,120
at the guest book gateway and see what

00:22:57,220 --> 00:23:05,159
it looks like so the guest book gateway

00:23:01,120 --> 00:23:11,169
essentially declares what is my host

00:23:05,159 --> 00:23:16,390
what is my porch what is my port number

00:23:11,169 --> 00:23:18,909
which is 80 and I'm using HTTP as the

00:23:16,390 --> 00:23:19,240
protocol so let's take a look at the

00:23:18,909 --> 00:23:22,390
bird

00:23:19,240 --> 00:23:25,660
services so we have a virtual service

00:23:22,390 --> 00:23:28,630
called gas book virtual service gas book

00:23:25,660 --> 00:23:30,429
and it's the virtual service to bind to

00:23:28,630 --> 00:23:32,890
the guest book gateway we just look at

00:23:30,429 --> 00:23:40,990
and the destination is simple it's just

00:23:32,890 --> 00:23:43,890
a guest book destination so now we're

00:23:40,990 --> 00:23:47,080
going to look at the destination rule

00:23:43,890 --> 00:23:48,940
for the gas book as you can see it's

00:23:47,080 --> 00:23:52,920
your configuration you're pretty much

00:23:48,940 --> 00:23:56,140
using cube kado to handle most of the

00:23:52,920 --> 00:23:58,840
configuration objects so it should be

00:23:56,140 --> 00:24:01,179
very native for folks come from Cuban

00:23:58,840 --> 00:24:03,250
Eddie's so that's the guest book

00:24:01,179 --> 00:24:05,440
basically right now can fix a round

00:24:03,250 --> 00:24:07,929
robin between the services as the

00:24:05,440 --> 00:24:09,970
destination rule has so you can see it's

00:24:07,929 --> 00:24:12,580
basically our router version 1 and

00:24:09,970 --> 00:24:14,800
version 2 and it's a round robin so

00:24:12,580 --> 00:24:18,340
nothing really interesting but it would

00:24:14,800 --> 00:24:21,010
shows you you give you 50% of chance to

00:24:18,340 --> 00:24:24,040
goes to our version where I'm 50% chance

00:24:21,010 --> 00:24:26,950
of goes to version 2 so now we are

00:24:24,040 --> 00:24:30,280
visiting the SEO at the gas book through

00:24:26,950 --> 00:24:36,370
the sto gateway and you can see that 58

00:24:30,280 --> 00:24:40,960
is my gateway IP so what we are doing is

00:24:36,370 --> 00:24:43,179
we are leaving some messages on to the

00:24:40,960 --> 00:24:46,390
gas book now you can see you know I'm

00:24:43,179 --> 00:24:47,830
leaving a message without now I'm

00:24:46,390 --> 00:24:50,950
leaving a message

00:24:47,830 --> 00:24:53,230
okay this should the guest book analyzer

00:24:50,950 --> 00:24:55,809
was attempting to analyze the tomb but

00:24:53,230 --> 00:24:57,700
it didn't find any tone so let's take a

00:24:55,809 --> 00:25:00,460
look at what's going on so remember we

00:24:57,700 --> 00:25:03,370
talked about sto provide metrics and

00:25:00,460 --> 00:25:06,790
tracing so what we are doing is we set a

00:25:03,370 --> 00:25:09,820
port for what you are the Jakob port so

00:25:06,790 --> 00:25:13,000
we can actually look at our JK UI to do

00:25:09,820 --> 00:25:16,120
a little bit debugging and you can see

00:25:13,000 --> 00:25:19,270
our we are looking at the traces from

00:25:16,120 --> 00:25:21,700
the guestbook services so every single

00:25:19,270 --> 00:25:23,830
request to the guestbook services will

00:25:21,700 --> 00:25:28,540
be recorded here so you can see I have

00:25:23,830 --> 00:25:32,080
visited about 20 traces from that looks

00:25:28,540 --> 00:25:33,160
like today and if we go to the analyzer

00:25:32,080 --> 00:25:35,260
services

00:25:33,160 --> 00:25:38,830
so the analyzer services I have two

00:25:35,260 --> 00:25:42,370
arrows I have a single request coming so

00:25:38,830 --> 00:25:45,070
you can see from the tags of the

00:25:42,370 --> 00:25:48,460
particular arrow one oh we actually got

00:25:45,070 --> 00:25:50,860
a 500 arrow on the analyzer services

00:25:48,460 --> 00:25:53,650
that's probably why it must have trouble

00:25:50,860 --> 00:25:59,070
to connect to the Watson tone analyzer

00:25:53,650 --> 00:26:01,810
service so it's Gio has service entry

00:25:59,070 --> 00:26:04,420
when you when your services within the

00:26:01,810 --> 00:26:06,580
match needs to talk to services external

00:26:04,420 --> 00:26:09,070
you actually have to config the service

00:26:06,580 --> 00:26:11,770
entry price object you bring the

00:26:09,070 --> 00:26:15,430
external services into the match so this

00:26:11,770 --> 00:26:17,590
is the service entry configure we are

00:26:15,430 --> 00:26:20,500
going to apply so it basically allows

00:26:17,590 --> 00:26:23,470
Gateway dog watson platform that net on

00:26:20,500 --> 00:26:25,990
this particular port number allowed the

00:26:23,470 --> 00:26:29,440
the traffic from the mash to goes to you

00:26:25,990 --> 00:26:31,750
so now let's apply the service entry now

00:26:29,440 --> 00:26:34,300
let's try to do another message

00:26:31,750 --> 00:26:36,910
hopefully we'll be able to get the tone

00:26:34,300 --> 00:26:40,270
channel line now that we actually apply

00:26:36,910 --> 00:26:43,920
service entry correctly so as you can

00:26:40,270 --> 00:26:47,650
see now we do have the emoji generated

00:26:43,920 --> 00:26:51,190
so the service entry was important as

00:26:47,650 --> 00:26:53,770
the operator of the match to allow the

00:26:51,190 --> 00:26:55,600
micro services developer to say you know

00:26:53,770 --> 00:26:57,610
these are the traffic's I'm allowing to

00:26:55,600 --> 00:27:00,310
access and neither traffic I'm not

00:26:57,610 --> 00:27:02,830
allowing to access so let's take a look

00:27:00,310 --> 00:27:05,530
at how do we do header based testing

00:27:02,830 --> 00:27:06,940
because I can do round-robin with

00:27:05,530 --> 00:27:09,160
guestbook but that's not really

00:27:06,940 --> 00:27:11,590
interesting because 50% of channels I'm

00:27:09,160 --> 00:27:14,350
testing version 1 there's no tone

00:27:11,590 --> 00:27:16,510
analyzed but if I want to do a little

00:27:14,350 --> 00:27:19,110
bit there are round-robin testing like

00:27:16,510 --> 00:27:21,790
this virtual service destiny

00:27:19,110 --> 00:27:24,610
configuration will show you for Firefox

00:27:21,790 --> 00:27:27,090
it always goes to version teal and then

00:27:24,610 --> 00:27:30,070
all the other traffic goes to version 1

00:27:27,090 --> 00:27:33,400
so let's check it out see if it works

00:27:30,070 --> 00:27:36,930
now we're heading through Safari you can

00:27:33,400 --> 00:27:42,450
see I'm always getting to version 1 so

00:27:36,930 --> 00:27:42,450
let's bring up Firefox hopefully soon

00:27:44,140 --> 00:27:52,010
so this is my firefox window and what we

00:27:48,620 --> 00:27:54,890
are doing is try to visit the guestbook

00:27:52,010 --> 00:27:56,960
so you can see I'm always on version 2

00:27:54,890 --> 00:27:59,390
now and that can be confident it's

00:27:56,960 --> 00:28:02,030
always going to be version 2 so if I

00:27:59,390 --> 00:28:05,210
actually leave a message I'll go back to

00:28:02,030 --> 00:28:08,059
Safari and if I leave a message

00:28:05,210 --> 00:28:11,030
it's just not going to be analyzed and

00:28:08,059 --> 00:28:13,400
I'll be confident that now if I go into

00:28:11,030 --> 00:28:15,530
your Firefox and leave a message you

00:28:13,400 --> 00:28:19,100
know I got my own analytes so that's

00:28:15,530 --> 00:28:21,559
really nice with the virtual service

00:28:19,100 --> 00:28:24,590
test configuration because I know

00:28:21,559 --> 00:28:26,780
exactly what I'm a testing now if I feel

00:28:24,590 --> 00:28:29,780
confident about what I'm testing on

00:28:26,780 --> 00:28:32,540
version 2 now what we are going to do is

00:28:29,780 --> 00:28:35,270
we can do canary testing we can say hey

00:28:32,540 --> 00:28:38,600
I want 80% of my traffic goes to version

00:28:35,270 --> 00:28:40,130
1 and I want 20% of traffic goes to

00:28:38,600 --> 00:28:44,179
version - because I'm gaining confidence

00:28:40,130 --> 00:28:47,090
about my version - so now if you go back

00:28:44,179 --> 00:28:50,870
or between file our Firefox and Safari

00:28:47,090 --> 00:28:53,270
you can see it's flip between version 1

00:28:50,870 --> 00:28:55,400
and version 2 you but our version will

00:28:53,270 --> 00:28:58,220
actually have a little much higher

00:28:55,400 --> 00:29:00,650
chance as we can fake so this is really

00:28:58,220 --> 00:29:02,990
nice to be able to do canary testing

00:29:00,650 --> 00:29:08,440
with single configuration without

00:29:02,990 --> 00:29:08,440
changing your cuban re pods replica

00:29:12,980 --> 00:29:22,220
so what we are going to do next is we

00:29:16,519 --> 00:29:24,620
want to bring up the sto dashboard so I

00:29:22,220 --> 00:29:26,659
unfortunately made a little bit typo

00:29:24,620 --> 00:29:29,539
here so what we are going to do is to

00:29:26,659 --> 00:29:32,389
bring up the grief owner to do a Cuban

00:29:29,539 --> 00:29:36,470
add a port forwarding to be able to

00:29:32,389 --> 00:29:39,230
reach out the grief on a dashboard so

00:29:36,470 --> 00:29:42,440
let's get the right command in the

00:29:39,230 --> 00:29:46,190
command prompt and you can see we should

00:29:42,440 --> 00:29:54,769
be able to visit now when our on the

00:29:46,190 --> 00:29:57,470
port 3000 with the port forwarding so

00:29:54,769 --> 00:29:59,809
this dashboard is provided by SEO

00:29:57,470 --> 00:30:00,350
without you needing to do any actual

00:29:59,809 --> 00:30:02,840
work

00:30:00,350 --> 00:30:05,269
so with this dashboard that you can

00:30:02,840 --> 00:30:07,309
actually look at your services deployed

00:30:05,269 --> 00:30:09,799
within the mesh you can look at the

00:30:07,309 --> 00:30:13,299
successful raids you can look at your

00:30:09,799 --> 00:30:16,639
declined requests volume your server

00:30:13,299 --> 00:30:19,940
your server requests volume you can do

00:30:16,639 --> 00:30:22,490
response and you can have an analysis of

00:30:19,940 --> 00:30:25,850
all your response code all the incoming

00:30:22,490 --> 00:30:28,519
requests by different source so all this

00:30:25,850 --> 00:30:31,070
data are available for you provided by

00:30:28,519 --> 00:30:33,830
platform and it's in a consistent way

00:30:31,070 --> 00:30:36,559
for your services deployed within the

00:30:33,830 --> 00:30:41,450
mesh and you don't have to actually do

00:30:36,559 --> 00:30:43,340
any code for this so that goes back to

00:30:41,450 --> 00:30:45,830
what we talked about early on the

00:30:43,340 --> 00:30:48,429
platform to provide a service mesh

00:30:45,830 --> 00:30:53,000
platform for network for services

00:30:48,429 --> 00:30:55,429
provides you the everything abstract

00:30:53,000 --> 00:30:57,320
everything onto the platform layer so

00:30:55,429 --> 00:30:59,899
the developer doesn't have to write code

00:30:57,320 --> 00:31:03,049
to do traffic shifting to do traffic

00:30:59,899 --> 00:31:06,110
routing to do you observe your micro

00:31:03,049 --> 00:31:11,299
services to do tracing and also to do

00:31:06,110 --> 00:31:17,779
the matrix now if we can go back to the

00:31:11,299 --> 00:31:20,600
deck thank you so what you have seen you

00:31:17,779 --> 00:31:23,130
have seen service entry configure

00:31:20,600 --> 00:31:28,580
service entry as the

00:31:23,130 --> 00:31:31,620
as the mesh admin to control what

00:31:28,580 --> 00:31:34,410
external services your micro services

00:31:31,620 --> 00:31:36,750
can access to you so without the service

00:31:34,410 --> 00:31:39,060
entry your micro service is not going to

00:31:36,750 --> 00:31:41,400
be able to access a service outside of

00:31:39,060 --> 00:31:44,960
the mesh which is the watson to analyzer

00:31:41,400 --> 00:31:47,850
you knowwe example you have seen the

00:31:44,960 --> 00:31:51,000
access the guest book through ingress

00:31:47,850 --> 00:31:54,480
gateway you have seen we apply traffic

00:31:51,000 --> 00:31:58,050
management we apply that one show

00:31:54,480 --> 00:32:02,340
version two of the services you have

00:31:58,050 --> 00:32:05,040
seen we do h20 canary testing of our

00:32:02,340 --> 00:32:08,250
version well in version 2 you through

00:32:05,040 --> 00:32:11,370
sto traffic configurations you have seen

00:32:08,250 --> 00:32:13,740
distribute tracing Jay guy UI to help us

00:32:11,370 --> 00:32:17,160
troubleshoot in the problems you have

00:32:13,740 --> 00:32:23,640
seen it steel mesh metrics through the

00:32:17,160 --> 00:32:25,650
grief on a dashboard so it still wonder

00:32:23,640 --> 00:32:30,060
why and beyond the community is very

00:32:25,650 --> 00:32:32,520
actively working on its you're 1.1 we

00:32:30,060 --> 00:32:34,980
are making trying to making it feel

00:32:32,520 --> 00:32:37,730
easier to use and adapter so that's

00:32:34,980 --> 00:32:41,970
actually our trusting the same our mind

00:32:37,730 --> 00:32:45,710
we want to continue our journey to allow

00:32:41,970 --> 00:32:48,780
user to incrementally adapt to still to

00:32:45,710 --> 00:32:51,390
publish around the functionalities are

00:32:48,780 --> 00:32:53,880
already there but the documentation are

00:32:51,390 --> 00:32:55,670
not super friendly so we're trying to

00:32:53,880 --> 00:32:58,500
make sure user knows how to

00:32:55,670 --> 00:33:01,260
incrementally adapter is do they can

00:32:58,500 --> 00:33:04,500
consume what features they want start

00:33:01,260 --> 00:33:08,460
from there we want you a mixer because

00:33:04,500 --> 00:33:10,650
the call to mix has sometimes are part

00:33:08,460 --> 00:33:13,530
of the control plane call you have to go

00:33:10,650 --> 00:33:16,770
back to your mixer so we are looking at

00:33:13,530 --> 00:33:20,850
allow user to run mixer per node as a

00:33:16,770 --> 00:33:23,100
daemon set or even raw mix as a sidecar

00:33:20,850 --> 00:33:25,830
so that you don't have to have their

00:33:23,100 --> 00:33:27,620
actual policy car go back to the control

00:33:25,830 --> 00:33:30,150
plane

00:33:27,620 --> 00:33:33,000
another thing the community are very

00:33:30,150 --> 00:33:35,630
actively working on is multi cluster how

00:33:33,000 --> 00:33:38,240
do we do multi cluster is to your match

00:33:35,630 --> 00:33:40,790
how do we do federated is still mesh

00:33:38,240 --> 00:33:43,370
along multiple environments and

00:33:40,790 --> 00:33:47,960
performance and scalability are always a

00:33:43,370 --> 00:33:51,590
focus for us and we are continue to do

00:33:47,960 --> 00:33:54,260
enhancement on that there are different

00:33:51,590 --> 00:33:56,630
management what other side Cal Agency

00:33:54,260 --> 00:33:59,240
what are the startup time of the sidecar

00:33:56,630 --> 00:34:02,030
and we'll continue focus on that bug

00:33:59,240 --> 00:34:04,700
fixes and integrate with API management

00:34:02,030 --> 00:34:08,000
are the other things we are very

00:34:04,700 --> 00:34:10,280
interested in to focus on minimum it is

00:34:08,000 --> 00:34:12,889
still so the documentation is already

00:34:10,280 --> 00:34:17,240
out there interested in if you run SEO

00:34:12,889 --> 00:34:20,030
without mixer without security you can

00:34:17,240 --> 00:34:22,639
do that even without tracing so if you

00:34:20,030 --> 00:34:24,379
just want to test some traffic be able

00:34:22,639 --> 00:34:26,510
to shift your traffic go through a

00:34:24,379 --> 00:34:29,659
configuration be able to steer your

00:34:26,510 --> 00:34:33,470
traffic that's the profile we recommend

00:34:29,659 --> 00:34:36,980
you to use we also have multi cluster

00:34:33,470 --> 00:34:39,139
single control plane that's out there we

00:34:36,980 --> 00:34:41,840
are currently working on some of the

00:34:39,139 --> 00:34:45,379
limitations of this design so that you

00:34:41,840 --> 00:34:47,810
don't necessarily have flat networking

00:34:45,379 --> 00:34:51,649
route bone multiple networking between

00:34:47,810 --> 00:34:54,260
your parts are multiple clusters so stay

00:34:51,649 --> 00:34:57,290
tuned whether new enhances to reduce the

00:34:54,260 --> 00:34:59,750
limitation now it also requires to

00:34:57,290 --> 00:35:02,180
cluster has different cedar block which

00:34:59,750 --> 00:35:07,010
some of the cloud provider has different

00:35:02,180 --> 00:35:08,780
has the same class cedar blocks so the

00:35:07,010 --> 00:35:11,240
other thing we are also doing is

00:35:08,780 --> 00:35:13,940
federated a steel mesh through the

00:35:11,240 --> 00:35:16,490
Gateway so the new cluster each of the

00:35:13,940 --> 00:35:19,310
cluster has they are hto control plane

00:35:16,490 --> 00:35:22,670
and they can retain the cluster boundary

00:35:19,310 --> 00:35:26,800
and then they have federated is to mesh

00:35:22,670 --> 00:35:30,320
through the ingress and egress gateway

00:35:26,800 --> 00:35:34,820
so with that I hate to encourage you

00:35:30,320 --> 00:35:36,980
guys to try you steel and hopefully you

00:35:34,820 --> 00:35:38,690
are going to give us a feedback on there

00:35:36,980 --> 00:35:40,730
our developer

00:35:38,690 --> 00:35:44,510
mailing list and user mailing list on

00:35:40,730 --> 00:35:48,079
their website or a community project on

00:35:44,510 --> 00:35:49,130
get is all up there and I like to open

00:35:48,079 --> 00:35:52,690
up for questions

00:35:49,130 --> 00:35:57,109
if you guys have any I know it's between

00:35:52,690 --> 00:35:59,599
lunchtime so if you have any welcome or

00:35:57,109 --> 00:36:03,700
you can feel free connect me after the

00:35:59,599 --> 00:36:03,700
session to if you feel too shy

00:36:07,599 --> 00:36:11,890

YouTube URL: https://www.youtube.com/watch?v=17rNOTuO6ys


