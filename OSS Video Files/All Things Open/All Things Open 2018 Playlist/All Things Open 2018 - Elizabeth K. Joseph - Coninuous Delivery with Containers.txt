Title: All Things Open 2018 - Elizabeth K. Joseph - Coninuous Delivery with Containers
Publication date: 2018-12-05
Playlist: All Things Open 2018 Playlist
Description: 
	All Things Open 2018
Captions: 
	00:00:03,140 --> 00:00:09,900
hello everybody good morning

00:00:07,649 --> 00:00:11,790
so I'm here to talk to you this morning

00:00:09,900 --> 00:00:16,470
about continuous delivery with

00:00:11,790 --> 00:00:18,420
containers just some background real

00:00:16,470 --> 00:00:20,160
quick so the first thing is that I'm

00:00:18,420 --> 00:00:21,689
between jobs right now so everything

00:00:20,160 --> 00:00:23,160
that I talk about is totally from me

00:00:21,689 --> 00:00:25,260
like I'm not speaking on behalf of any

00:00:23,160 --> 00:00:26,789
company so I'm gonna be talking about

00:00:25,260 --> 00:00:29,609
kubernetes and get lab and a few other

00:00:26,789 --> 00:00:31,830
things but there's no bias here not that

00:00:29,609 --> 00:00:34,230
there would be any way but be rest

00:00:31,830 --> 00:00:37,230
assured definitely not today

00:00:34,230 --> 00:00:42,690
two years I've been working with Apache

00:00:37,230 --> 00:00:44,520
mesas and kubernetes before that I spent

00:00:42,690 --> 00:00:45,960
time working on the CI CD pipeline for

00:00:44,520 --> 00:00:48,660
the OpenStack project well I was working

00:00:45,960 --> 00:00:50,010
at HP and in that role is really where I

00:00:48,660 --> 00:00:51,410
got the bulk of my continuous

00:00:50,010 --> 00:00:55,230
integration and continuous delivery

00:00:51,410 --> 00:00:56,910
experience and that role it was all of

00:00:55,230 --> 00:01:00,210
the project changes inside of OpenStack

00:00:56,910 --> 00:01:02,489
so at the peak we were doing like 2000

00:01:00,210 --> 00:01:04,739
tests an hour against the OpenStack

00:01:02,489 --> 00:01:05,909
codebase and in that role we were

00:01:04,739 --> 00:01:08,369
running everything on virtual machines

00:01:05,909 --> 00:01:09,930
so it was really in these past two years

00:01:08,369 --> 00:01:12,689
that I've been working on container

00:01:09,930 --> 00:01:14,580
technologies that I started seeing the

00:01:12,689 --> 00:01:16,710
real benefits that could containers can

00:01:14,580 --> 00:01:19,220
bring to the testing space which is sort

00:01:16,710 --> 00:01:22,650
of what brought this talk together and

00:01:19,220 --> 00:01:24,930
then history-wise spent about a decade

00:01:22,650 --> 00:01:25,920
working with systems engineering the

00:01:24,930 --> 00:01:29,329
past two years I've been working as a

00:01:25,920 --> 00:01:31,909
developer advocate so doing a lot of

00:01:29,329 --> 00:01:35,400
sort of basic implementation work of

00:01:31,909 --> 00:01:39,030
continuous delivery pipelines which I'll

00:01:35,400 --> 00:01:41,729
talk about but mostly doing talks like

00:01:39,030 --> 00:01:44,159
this I've also worked on a couple of

00:01:41,729 --> 00:01:45,420
books a lot of people who I meet at open

00:01:44,159 --> 00:01:47,490
source conferences know me because I

00:01:45,420 --> 00:01:48,750
worked on Ubuntu for several years so I

00:01:47,490 --> 00:01:50,549
worked on the eighth and ninth edition

00:01:48,750 --> 00:01:52,649
of the official a boon to book and then

00:01:50,549 --> 00:01:54,509
when I was working at OpenStack I wrote

00:01:52,649 --> 00:01:59,340
an open stack book with a colleague over

00:01:54,509 --> 00:02:02,880
at Time Warner Cable so I want to start

00:01:59,340 --> 00:02:05,490
off so hopefully people here are

00:02:02,880 --> 00:02:07,950
somewhat familiar with continuous

00:02:05,490 --> 00:02:10,800
delivery or anyone using it right now in

00:02:07,950 --> 00:02:13,110
their organization all right that's

00:02:10,800 --> 00:02:13,740
that's a pretty good number so I just

00:02:13,110 --> 00:02:15,450
grabbed

00:02:13,740 --> 00:02:19,620
really basic definition off of the

00:02:15,450 --> 00:02:21,450
Wikipedia page which is really just it's

00:02:19,620 --> 00:02:24,180
just about releasing software and short

00:02:21,450 --> 00:02:25,680
cycles depending on the company this

00:02:24,180 --> 00:02:28,380
could mean you're releasing every single

00:02:25,680 --> 00:02:29,790
day you could be releasing with every

00:02:28,380 --> 00:02:32,010
single commit that you put into your

00:02:29,790 --> 00:02:33,900
master branch or it could be something

00:02:32,010 --> 00:02:37,730
like weekly like that still sort of

00:02:33,900 --> 00:02:37,730
falls into the continuous delivery realm

00:02:37,790 --> 00:02:43,880
so this is in contrast with how software

00:02:41,880 --> 00:02:46,050
is still done in a lot of organizations

00:02:43,880 --> 00:02:51,150
where it takes a few months between

00:02:46,050 --> 00:02:53,640
releases sometimes years don't end up

00:02:51,150 --> 00:02:55,770
seeing their changes very quickly they

00:02:53,640 --> 00:02:58,800
could be like 18 months from the time at

00:02:55,770 --> 00:03:00,300
best when when they request a future -

00:02:58,800 --> 00:03:03,870
when they see it actually result in the

00:03:00,300 --> 00:03:05,250
software and not only for the customers

00:03:03,870 --> 00:03:07,650
but the developers actually lose track

00:03:05,250 --> 00:03:10,740
of what they're working because when a

00:03:07,650 --> 00:03:13,080
change doesn't go to a customer until 18

00:03:10,740 --> 00:03:14,250
months later the bug reports don't come

00:03:13,080 --> 00:03:15,720
in till after the change has been

00:03:14,250 --> 00:03:17,580
updated it could be two or three years

00:03:15,720 --> 00:03:20,970
before the developers are seeing their

00:03:17,580 --> 00:03:24,870
change actually in production and and

00:03:20,970 --> 00:03:27,870
getting feedback but in this world of

00:03:24,870 --> 00:03:29,130
continuous delivery if you're looking at

00:03:27,870 --> 00:03:33,120
sort of like an example of a project

00:03:29,130 --> 00:03:35,250
workflow the first week you know is your

00:03:33,120 --> 00:03:37,170
project planning and then you do like a

00:03:35,250 --> 00:03:39,960
super simple release of the version that

00:03:37,170 --> 00:03:42,090
you're working on so you develop it you

00:03:39,960 --> 00:03:46,440
test it put into staging and then do a

00:03:42,090 --> 00:03:47,880
release and then we - you start right

00:03:46,440 --> 00:03:49,200
into the customer feedback because

00:03:47,880 --> 00:03:51,660
you've already delivered that software

00:03:49,200 --> 00:03:54,630
to your customer and then that's pretty

00:03:51,660 --> 00:03:57,300
much how the weeks after that go until

00:03:54,630 --> 00:04:00,600
you're ready to either make some sort of

00:03:57,300 --> 00:04:02,490
major revision to your software but just

00:04:00,600 --> 00:04:05,210
this workflow ends up being better for

00:04:02,490 --> 00:04:08,100
the customers and better for developers

00:04:05,210 --> 00:04:10,350
but the main problem with this is that

00:04:08,100 --> 00:04:13,500
testing takes a while in the traditional

00:04:10,350 --> 00:04:15,570
model people are working on branches for

00:04:13,500 --> 00:04:17,430
months at a time and really the software

00:04:15,570 --> 00:04:19,260
doesn't come together until you know

00:04:17,430 --> 00:04:22,049
months or years after it was it was

00:04:19,260 --> 00:04:23,430
planned so it takes a real shift in the

00:04:22,049 --> 00:04:25,380
way that you do software engineering at

00:04:23,430 --> 00:04:27,120
your company to develop a continuous

00:04:25,380 --> 00:04:28,380
delivery platform

00:04:27,120 --> 00:04:30,540
and also do it in a way that's fast

00:04:28,380 --> 00:04:33,720
enough which is where containers come

00:04:30,540 --> 00:04:37,620
into this so you can tell I made this

00:04:33,720 --> 00:04:40,710
graphic because it's awful so but anyway

00:04:37,620 --> 00:04:42,150
you get so the in a traditional CI CD

00:04:40,710 --> 00:04:44,580
pipeline that we're talking about CI is

00:04:42,150 --> 00:04:46,710
continuous integration so that's all the

00:04:44,580 --> 00:04:48,720
changes going in and being tested and

00:04:46,710 --> 00:04:50,940
then delivery is actually the launching

00:04:48,720 --> 00:04:54,750
part of it but the idea with this is you

00:04:50,940 --> 00:04:56,850
do a git push to your your git

00:04:54,750 --> 00:05:00,530
repository that's when it goes into this

00:04:56,850 --> 00:05:03,419
CI CD pipeline where the software is

00:05:00,530 --> 00:05:05,010
built into some sort of image whether

00:05:03,419 --> 00:05:06,330
you're testing on bare metal or virtual

00:05:05,010 --> 00:05:09,410
machines or containers it doesn't really

00:05:06,330 --> 00:05:12,620
matter but it's built into some sort of

00:05:09,410 --> 00:05:15,600
machine that can actually run your tests

00:05:12,620 --> 00:05:18,720
from there the artifacts are spit out so

00:05:15,600 --> 00:05:20,970
this can be log files tarballs built

00:05:18,720 --> 00:05:26,270
software if you're making rpms or dead

00:05:20,970 --> 00:05:29,100
packages and then that is what is tested

00:05:26,270 --> 00:05:32,250
or or given to the developers as an

00:05:29,100 --> 00:05:34,650
output then typically it's gone into

00:05:32,250 --> 00:05:37,740
some sort of staging server before it's

00:05:34,650 --> 00:05:39,660
pushed into production in the staging

00:05:37,740 --> 00:05:42,000
and production sections these are of

00:05:39,660 --> 00:05:44,130
varying degrees of automation and manual

00:05:42,000 --> 00:05:46,200
processes a lot of companies like to

00:05:44,130 --> 00:05:48,960
have someone press the go into

00:05:46,200 --> 00:05:51,810
production button but when I was working

00:05:48,960 --> 00:05:53,370
on OpenStack it was like Yolo just like

00:05:51,810 --> 00:05:54,870
push it into productions fine

00:05:53,370 --> 00:05:56,580
it's like all of the documentation that

00:05:54,870 --> 00:05:58,169
we worked on it was immediately

00:05:56,580 --> 00:06:01,860
published after it passed all of the

00:05:58,169 --> 00:06:03,810
tests and was code reviewed so that made

00:06:01,860 --> 00:06:06,240
it really easy to not have any sort of

00:06:03,810 --> 00:06:08,400
manual intervention but a lot of the

00:06:06,240 --> 00:06:10,530
continuous delivery and continuous

00:06:08,400 --> 00:06:12,630
integration tooling has an option to

00:06:10,530 --> 00:06:13,639
pause things and actually the the

00:06:12,630 --> 00:06:16,650
walkthrough that I'm going to show

00:06:13,639 --> 00:06:21,510
during the second half of this talk has

00:06:16,650 --> 00:06:25,050
a mechanism for that so I'm here to talk

00:06:21,510 --> 00:06:27,780
about containers so the way I like I

00:06:25,050 --> 00:06:31,650
like to frame this is for one I don't

00:06:27,780 --> 00:06:33,810
like the container ship metaphor the

00:06:31,650 --> 00:06:35,610
biggest problem I have with that is it

00:06:33,810 --> 00:06:38,030
turns out I'm kind of a nerd and I read

00:06:35,610 --> 00:06:40,800
this entire book about containers once

00:06:38,030 --> 00:06:42,840
and the whole point of container

00:06:40,800 --> 00:06:45,379
they're all the same size and they're

00:06:42,840 --> 00:06:49,259
within some sort of weight limitation

00:06:45,379 --> 00:06:52,500
but that's not a really good metaphor

00:06:49,259 --> 00:06:54,740
for computer containers containers and

00:06:52,500 --> 00:06:57,930
computers can be all different sizes

00:06:54,740 --> 00:06:59,520
sort of weights if you will so I

00:06:57,930 --> 00:07:01,229
actually I went to the Rubbermaid Flickr

00:06:59,520 --> 00:07:04,259
site and I found this one so like in

00:07:01,229 --> 00:07:05,940
this picture we got some yogurt and some

00:07:04,259 --> 00:07:07,860
fruit and some look to little containers

00:07:05,940 --> 00:07:09,289
and this one with the pasta that's got a

00:07:07,860 --> 00:07:12,169
sidecar container

00:07:09,289 --> 00:07:14,940
you know the beans go with the pasta so

00:07:12,169 --> 00:07:17,610
it's sort of a more accurate metaphor

00:07:14,940 --> 00:07:18,360
for containers as they can be all

00:07:17,610 --> 00:07:20,340
different sizes

00:07:18,360 --> 00:07:24,740
they're very portable you can move them

00:07:20,340 --> 00:07:26,879
around mix them up so first with this

00:07:24,740 --> 00:07:30,300
doing continuous delivery everything

00:07:26,879 --> 00:07:31,800
runs in containers and then you can

00:07:30,300 --> 00:07:34,349
organize everything really efficiently

00:07:31,800 --> 00:07:35,969
so I have a chart later that shows you

00:07:34,349 --> 00:07:38,729
sort of where blocks can go in

00:07:35,969 --> 00:07:41,669
containers but the idea is that you

00:07:38,729 --> 00:07:44,849
don't waste resource space on your

00:07:41,669 --> 00:07:49,289
system when you're running VMs that that

00:07:44,849 --> 00:07:50,729
is often the case and bare metal which

00:07:49,289 --> 00:07:53,069
brings me to asking the question like

00:07:50,729 --> 00:07:56,550
why can't I just use VMs like VMS are

00:07:53,069 --> 00:07:59,240
very portable VMS have images they're

00:07:56,550 --> 00:08:03,330
similar to containers in a lot of ways

00:07:59,240 --> 00:08:04,680
but they're not identical even in one so

00:08:03,330 --> 00:08:06,840
I what used to work on OpenStack and

00:08:04,680 --> 00:08:08,849
even in a system that you fully control

00:08:06,840 --> 00:08:11,490
not a public cloud where when you

00:08:08,849 --> 00:08:13,289
request a server you're not sure when

00:08:11,490 --> 00:08:15,870
it's going to come up but even when you

00:08:13,289 --> 00:08:18,330
control the entire environment vm's just

00:08:15,870 --> 00:08:21,389
happened to take longer to provision not

00:08:18,330 --> 00:08:24,240
as long as a bare-metal system but they

00:08:21,389 --> 00:08:26,990
do end up taking longer to spin up and

00:08:24,240 --> 00:08:28,830
that's because they run an entire kernel

00:08:26,990 --> 00:08:30,389
typically a whole version of an

00:08:28,830 --> 00:08:32,640
operating system even it's even if it's

00:08:30,389 --> 00:08:35,399
a really small operating system it still

00:08:32,640 --> 00:08:38,190
takes time to boot and you know load up

00:08:35,399 --> 00:08:40,019
system D and load up all the libraries

00:08:38,190 --> 00:08:41,909
and everything and oftentimes with

00:08:40,019 --> 00:08:45,500
testing you don't actually need all of

00:08:41,909 --> 00:08:47,730
that stuff you need a basic environment

00:08:45,500 --> 00:08:49,800
which has the libraries that you need

00:08:47,730 --> 00:08:51,720
but a container image can be really

00:08:49,800 --> 00:08:53,130
really tiny and it's running on a host

00:08:51,720 --> 00:08:55,540
system that's already up so it just

00:08:53,130 --> 00:08:57,820
boots it up really

00:08:55,540 --> 00:09:00,160
and another thing that comes to play

00:08:57,820 --> 00:09:03,480
really important really important way in

00:09:00,160 --> 00:09:07,060
testing is that a virtual machine image

00:09:03,480 --> 00:09:10,480
it's not super portable you may be able

00:09:07,060 --> 00:09:12,550
to run it on your laptop but the benefit

00:09:10,480 --> 00:09:14,230
of a container image is there one of the

00:09:12,550 --> 00:09:15,790
reasons containers really took off was

00:09:14,230 --> 00:09:18,460
because there's this whole ecosystem of

00:09:15,790 --> 00:09:21,490
being able to run a container on your

00:09:18,460 --> 00:09:23,020
laptop in a really easy way which is the

00:09:21,490 --> 00:09:25,000
thing that docker did for our community

00:09:23,020 --> 00:09:28,420
is they made it easy for everyone to run

00:09:25,000 --> 00:09:30,580
their software locally so the same

00:09:28,420 --> 00:09:32,710
container that is used on the developers

00:09:30,580 --> 00:09:34,750
machine is also what's used in testing

00:09:32,710 --> 00:09:36,910
it's what's used in staging it's what's

00:09:34,750 --> 00:09:41,170
used in production and since these are

00:09:36,910 --> 00:09:42,400
so easy to ship around it makes it so we

00:09:41,170 --> 00:09:44,080
have a much easier time making sure

00:09:42,400 --> 00:09:49,900
everyone is working on the same exact

00:09:44,080 --> 00:09:51,790
thing so as I mentioned there's also

00:09:49,900 --> 00:09:53,860
this difference in like the utilization

00:09:51,790 --> 00:09:56,080
of the server's so there was a study I

00:09:53,860 --> 00:09:59,260
looked at and it said on traditional

00:09:56,080 --> 00:10:01,090
servers either bare metal or show

00:09:59,260 --> 00:10:02,980
machines the utilization tends to be

00:10:01,090 --> 00:10:05,740
somewhat low on bare metal it can be low

00:10:02,980 --> 00:10:06,910
as 12 to 15 percent utilization so you

00:10:05,740 --> 00:10:08,110
have these servers out there that aren't

00:10:06,910 --> 00:10:09,640
really doing much most of the time

00:10:08,110 --> 00:10:12,730
because they may have just one server

00:10:09,640 --> 00:10:15,010
service running on them it's a bit

00:10:12,730 --> 00:10:17,380
better in the old machines you have more

00:10:15,010 --> 00:10:19,780
like percent utilization which is

00:10:17,380 --> 00:10:21,490
because partially because you can size

00:10:19,780 --> 00:10:23,490
the virtual machine to be the size that

00:10:21,490 --> 00:10:25,900
you need it to be for your application

00:10:23,490 --> 00:10:30,040
instead of buying the bigger server just

00:10:25,900 --> 00:10:32,610
in case you might need that later in a

00:10:30,040 --> 00:10:34,810
containerization platform where you a

00:10:32,610 --> 00:10:38,500
granade a bunch of machines into a

00:10:34,810 --> 00:10:41,020
container cluster you have first of all

00:10:38,500 --> 00:10:43,270
the servers aren't so siloed there's

00:10:41,020 --> 00:10:45,280
often service discovery built in so when

00:10:43,270 --> 00:10:46,930
you launch your Jenkins server it

00:10:45,280 --> 00:10:48,430
automatically knows how to find your

00:10:46,930 --> 00:10:51,670
artifactory server for where your

00:10:48,430 --> 00:10:54,670
artifacts are going to land it often

00:10:51,670 --> 00:10:56,590
handles things like authentication so

00:10:54,670 --> 00:11:00,220
you have uniform authentication across

00:10:56,590 --> 00:11:01,840
your applications and then of course

00:11:00,220 --> 00:11:04,780
since it's since it's a computing

00:11:01,840 --> 00:11:06,440
cluster you are sharing the resources of

00:11:04,780 --> 00:11:09,620
all of your systems

00:11:06,440 --> 00:11:15,560
across to run the services that you're

00:11:09,620 --> 00:11:17,140
running so there's a few ways to go

00:11:15,560 --> 00:11:20,750
about this

00:11:17,140 --> 00:11:22,990
you can run every single thing that you

00:11:20,750 --> 00:11:27,740
are running in your continuous delivery

00:11:22,990 --> 00:11:30,560
pipeline on containers or you can use

00:11:27,740 --> 00:11:32,240
partially a legacy infrastructure so if

00:11:30,560 --> 00:11:34,790
you're running something like Jenkins

00:11:32,240 --> 00:11:36,800
you may be able to continue doing that

00:11:34,790 --> 00:11:39,740
just on its own server and then do all

00:11:36,800 --> 00:11:42,710
of your testing and containers or you

00:11:39,740 --> 00:11:45,530
can run everything in containers so that

00:11:42,710 --> 00:11:50,030
would mean first this is sort of a a

00:11:45,530 --> 00:11:52,640
basic container infrastructure map here

00:11:50,030 --> 00:11:55,820
so at the bottom you've got all of your

00:11:52,640 --> 00:11:57,770
Linux servers and those can be on

00:11:55,820 --> 00:11:58,970
anything these can be bare metal these

00:11:57,770 --> 00:12:01,970
can be running on your OpenStack

00:11:58,970 --> 00:12:04,970
instance the keys running Amazon Google

00:12:01,970 --> 00:12:07,400
or whatever but essentially you need a

00:12:04,970 --> 00:12:12,140
Linux box several of them to install

00:12:07,400 --> 00:12:12,890
your cluster on on top and then and then

00:12:12,140 --> 00:12:15,530
that's what you run your

00:12:12,890 --> 00:12:17,780
containerization platform which is gonna

00:12:15,530 --> 00:12:22,160
be your kubernetes rocker swarm your

00:12:17,780 --> 00:12:24,350
Apache besos and on that layer is sort

00:12:22,160 --> 00:12:25,160
of where you get your metrics that's

00:12:24,350 --> 00:12:27,140
where you get your container

00:12:25,160 --> 00:12:29,000
orchestration and all of these different

00:12:27,140 --> 00:12:31,660
pieces that actually make your cluster

00:12:29,000 --> 00:12:31,660
operate properly

00:12:37,020 --> 00:12:43,450
and then on top of that is where you

00:12:40,720 --> 00:12:45,640
actually run all of your services so in

00:12:43,450 --> 00:12:49,120
this model you're running your get lab

00:12:45,640 --> 00:12:50,260
your Jenkins your artifactory whatever

00:12:49,120 --> 00:12:53,650
you're running in your continuous

00:12:50,260 --> 00:12:56,110
delivery pipeline all on top of your

00:12:53,650 --> 00:12:57,340
containerization platform and then what

00:12:56,110 --> 00:12:59,050
you're also doing is you're running all

00:12:57,340 --> 00:13:01,240
of your tests in this platform as well

00:12:59,050 --> 00:13:03,160
so all of your little micro services are

00:13:01,240 --> 00:13:07,120
running here and then every time it goes

00:13:03,160 --> 00:13:08,800
out to run like a test the unit tests on

00:13:07,120 --> 00:13:11,020
your Python code or an integration test

00:13:08,800 --> 00:13:12,190
on your entire stack

00:13:11,020 --> 00:13:15,970
that's all running in the same

00:13:12,190 --> 00:13:17,440
containerization platform so you help

00:13:15,970 --> 00:13:19,060
get help with service discovery so

00:13:17,440 --> 00:13:20,680
jenkins knows exactly where to send

00:13:19,060 --> 00:13:22,150
things off to because it's all done sort

00:13:20,680 --> 00:13:24,250
of locally or you can have separate

00:13:22,150 --> 00:13:28,120
clusters for these things but the idea

00:13:24,250 --> 00:13:29,590
is that you only run one huge underlying

00:13:28,120 --> 00:13:32,020
infrastructure that is the clustering

00:13:29,590 --> 00:13:33,160
software for the containers and then you

00:13:32,020 --> 00:13:37,480
don't have to worry about anything else

00:13:33,160 --> 00:13:40,990
underneath it so what this might look

00:13:37,480 --> 00:13:43,120
like right so in this in this model sort

00:13:40,990 --> 00:13:44,860
of you've got in the traditional one you

00:13:43,120 --> 00:13:46,840
have all these different servers you

00:13:44,860 --> 00:13:48,100
know a couple Jenkins servers one

00:13:46,840 --> 00:13:50,680
running git lab and then one server

00:13:48,100 --> 00:13:53,680
that's totally devoted to tests this is

00:13:50,680 --> 00:13:56,890
nice Rob for isolation but it's not so

00:13:53,680 --> 00:13:58,800
nice for utilization so I just used

00:13:56,890 --> 00:14:01,660
these little colorful blocks to say like

00:13:58,800 --> 00:14:03,550
traditionally one for each service but

00:14:01,660 --> 00:14:06,880
in when you containerize things you can

00:14:03,550 --> 00:14:09,670
run these services in a more like a

00:14:06,880 --> 00:14:11,050
cloud native micro services way where

00:14:09,670 --> 00:14:13,270
you're splitting across the load across

00:14:11,050 --> 00:14:15,310
multiple machines so you've got maybe

00:14:13,270 --> 00:14:16,390
more Jenkins servers but they're smaller

00:14:15,310 --> 00:14:18,940
and they're running in a more

00:14:16,390 --> 00:14:21,460
distributed way and then your tests just

00:14:18,940 --> 00:14:22,990
run everywhere or you can restrict into

00:14:21,460 --> 00:14:25,450
certain machines and get the isolation

00:14:22,990 --> 00:14:27,040
you sort of wanted so maybe your tests

00:14:25,450 --> 00:14:29,410
aren't running on the same server as the

00:14:27,040 --> 00:14:31,750
Jenkins server if you don't want all of

00:14:29,410 --> 00:14:34,060
the containerization platforms have the

00:14:31,750 --> 00:14:35,560
ability to tell them where what type of

00:14:34,060 --> 00:14:38,680
machine you want them to run in the

00:14:35,560 --> 00:14:41,160
cluster and so they could be isolated to

00:14:38,680 --> 00:14:41,160
some degree

00:14:41,760 --> 00:14:46,960
another option is what I alluded to is

00:14:44,920 --> 00:14:49,840
where you have a legacy infrastructure

00:14:46,960 --> 00:14:52,810
and then you want to add containers to

00:14:49,840 --> 00:14:54,730
that so you may have get lab or a

00:14:52,810 --> 00:14:56,590
Jenkins instance running already and

00:14:54,730 --> 00:14:58,750
that's running fine or that's run by

00:14:56,590 --> 00:15:00,940
another team and what you're trying to

00:14:58,750 --> 00:15:02,740
replace is where the tests actually run

00:15:00,940 --> 00:15:04,450
so you could just spin up your

00:15:02,740 --> 00:15:06,400
containerization platform just to run

00:15:04,450 --> 00:15:08,590
the tests and this is actually similar

00:15:06,400 --> 00:15:14,530
to what I'll be showing you in a few

00:15:08,590 --> 00:15:16,840
minutes it's another option is this is

00:15:14,530 --> 00:15:19,900
actually what we used at my last job we

00:15:16,840 --> 00:15:22,990
had Jenkins running internally just by

00:15:19,900 --> 00:15:25,840
the sysadmin team all of our code

00:15:22,990 --> 00:15:29,950
repositories were up on github and then

00:15:25,840 --> 00:15:31,750
we had our our testing cluster which

00:15:29,950 --> 00:15:33,970
actually ran all the tests so in this

00:15:31,750 --> 00:15:36,940
model you push your code up to github

00:15:33,970 --> 00:15:39,100
because jank notifies Jenkins that a

00:15:36,940 --> 00:15:41,920
change has happened Jenkins is what

00:15:39,100 --> 00:15:43,630
sends does all of the CI CD stuff it

00:15:41,920 --> 00:15:45,220
runs your tests and everything and when

00:15:43,630 --> 00:15:48,640
it runs a test it goes out to your

00:15:45,220 --> 00:15:50,170
cluster and runs them and then in our

00:15:48,640 --> 00:15:52,000
case it also that's also where it

00:15:50,170 --> 00:15:54,340
deployed or it deployed to a production

00:15:52,000 --> 00:15:58,390
cluster but that was also containers so

00:15:54,340 --> 00:16:00,760
the containers are shipped around based

00:15:58,390 --> 00:16:05,200
on where we're launching them we did use

00:16:00,760 --> 00:16:07,960
a consolidated container image store so

00:16:05,200 --> 00:16:11,170
like docker hub is an example we ran our

00:16:07,960 --> 00:16:12,730
own where we upload the image and that's

00:16:11,170 --> 00:16:13,900
the image we test rum and it's also the

00:16:12,730 --> 00:16:17,770
image that we deploy from

00:16:13,900 --> 00:16:18,880
as long as the tests pass so in this one

00:16:17,770 --> 00:16:19,960
is actually one of the most common

00:16:18,880 --> 00:16:25,840
models because a lot of people are using

00:16:19,960 --> 00:16:28,920
github you could also use a hosted

00:16:25,840 --> 00:16:32,860
continuous integration delivery service

00:16:28,920 --> 00:16:36,040
circle CI Travis CI team City these are

00:16:32,860 --> 00:16:37,330
all ones that are free to a point for

00:16:36,040 --> 00:16:39,820
open source projects and then there's

00:16:37,330 --> 00:16:41,590
paid versions my last job we use team

00:16:39,820 --> 00:16:43,600
City the paid version in order to run

00:16:41,590 --> 00:16:47,770
our tests these are all of course

00:16:43,600 --> 00:16:49,960
proprietary but they are they do make it

00:16:47,770 --> 00:16:52,810
really easy to get going and a lot of

00:16:49,960 --> 00:16:54,460
these these just hook into github github

00:16:52,810 --> 00:16:54,910
makes it really easy for some or several

00:16:54,460 --> 00:16:57,760
of these

00:16:54,910 --> 00:17:01,720
it's like it even show you the test

00:16:57,760 --> 00:17:03,490
results inside the github UI and so

00:17:01,720 --> 00:17:07,900
really the value-add of these hosted

00:17:03,490 --> 00:17:10,660
services in addition to sort of off you

00:17:07,900 --> 00:17:12,190
skating the configuration and the setup

00:17:10,660 --> 00:17:14,020
and the running of the maintenance I

00:17:12,190 --> 00:17:18,699
think though the infrastructure for the

00:17:14,020 --> 00:17:20,680
CI CI CD system they work really hard to

00:17:18,699 --> 00:17:22,750
make really good workflows so I see the

00:17:20,680 --> 00:17:24,579
circle CI guys over at conferences all

00:17:22,750 --> 00:17:26,980
the time giving really simple workflow

00:17:24,579 --> 00:17:31,390
talks saying we make it really easy for

00:17:26,980 --> 00:17:33,430
you and then in these like you have sort

00:17:31,390 --> 00:17:35,710
of usually the option of running it in

00:17:33,430 --> 00:17:38,110
some sort of internal things internal to

00:17:35,710 --> 00:17:41,890
Travis or team city or you can farm it

00:17:38,110 --> 00:17:44,110
out to a cloud platform so you could run

00:17:41,890 --> 00:17:46,120
it on kubernetes all the bits of three

00:17:44,110 --> 00:17:49,270
big cloud providers all offer kubernetes

00:17:46,120 --> 00:17:52,830
hosting solutions these days which hook

00:17:49,270 --> 00:17:52,830
into all of these services pretty easily

00:17:54,000 --> 00:17:57,490
so I'm going to show you a walkthrough

00:17:55,840 --> 00:18:00,430
and this is this is the walkthrough that

00:17:57,490 --> 00:18:04,320
I have for you so in this model

00:18:00,430 --> 00:18:08,260
everything is hosted up on get lab comm

00:18:04,320 --> 00:18:09,880
which includes the Enterprise Edition if

00:18:08,260 --> 00:18:12,190
you have an open source project thing at

00:18:09,880 --> 00:18:14,560
the Gold Edition that it includes if you

00:18:12,190 --> 00:18:17,560
run everything on get lab calm and have

00:18:14,560 --> 00:18:21,550
a public project but that's your

00:18:17,560 --> 00:18:23,500
repository for your um your code it's

00:18:21,550 --> 00:18:26,200
your artifact store for things like logs

00:18:23,500 --> 00:18:27,790
and container images and it also does

00:18:26,200 --> 00:18:29,560
the test runner which is what goes out

00:18:27,790 --> 00:18:33,280
to your cluster and actually run thing

00:18:29,560 --> 00:18:37,420
runs things and again this can be hooked

00:18:33,280 --> 00:18:39,040
into any of the top three clouds or you

00:18:37,420 --> 00:18:42,010
can hook it into your own kubernetes

00:18:39,040 --> 00:18:44,470
cluster if you're running which is why I

00:18:42,010 --> 00:18:47,800
say like any of these scenarios I just

00:18:44,470 --> 00:18:53,800
ran through you can mix them up there's

00:18:47,800 --> 00:18:55,690
a lot of ways to go through them and if

00:18:53,800 --> 00:18:57,400
you don't have a legacy infrastructure

00:18:55,690 --> 00:19:00,700
you can use hosted or you know what not

00:18:57,400 --> 00:19:02,590
to move things around and maybe you're

00:19:00,700 --> 00:19:03,700
running your production services on a

00:19:02,590 --> 00:19:05,170
cloud but you're running all of your

00:19:03,700 --> 00:19:05,600
local tests in a local kubernetes

00:19:05,170 --> 00:19:11,380
cluster

00:19:05,600 --> 00:19:14,150
or something those are all options so I

00:19:11,380 --> 00:19:15,980
don't have a demo because this actually

00:19:14,150 --> 00:19:17,690
would take a long time to spin

00:19:15,980 --> 00:19:21,110
everything up and do things live also

00:19:17,690 --> 00:19:22,309
I'm not that brave this morning so I'm

00:19:21,110 --> 00:19:26,570
gonna do a walk-through with screenshots

00:19:22,309 --> 00:19:30,169
to show you what I worked on to get a

00:19:26,570 --> 00:19:33,470
pipeline running on get lab it's using

00:19:30,169 --> 00:19:35,240
their tooling called Auto dev ops which

00:19:33,470 --> 00:19:36,650
automatically sets up a pipeline and

00:19:35,240 --> 00:19:38,450
stuff I'll show you it's pretty cool and

00:19:36,650 --> 00:19:47,600
then we're gonna run it on kubernetes

00:19:38,450 --> 00:19:49,340
and I'll take questions at the end but I

00:19:47,600 --> 00:19:53,539
can't really give a ton of answers like

00:19:49,340 --> 00:19:58,010
specifically product why the lab or the

00:19:53,539 --> 00:20:04,820
the Google kubernetes engine but we can

00:19:58,010 --> 00:20:06,140
talk about that more so if you are so I

00:20:04,820 --> 00:20:10,070
want so first of all I wanted to give

00:20:06,140 --> 00:20:13,159
this demo for this this partially

00:20:10,070 --> 00:20:14,809
because gate lab is an open sort it's in

00:20:13,159 --> 00:20:17,030
addition to having get lab comm which is

00:20:14,809 --> 00:20:19,250
hosted there is an open-source version

00:20:17,030 --> 00:20:21,380
of get lab everything that I'm showing

00:20:19,250 --> 00:20:23,240
you in this is pretty much is available

00:20:21,380 --> 00:20:25,190
in the open-source version the only

00:20:23,240 --> 00:20:27,770
thing that's not is some of the the

00:20:25,190 --> 00:20:30,320
tests that auto dev ops sets up like the

00:20:27,770 --> 00:20:31,640
ones really specific to security those

00:20:30,320 --> 00:20:33,320
are sort of their their gold feature

00:20:31,640 --> 00:20:34,760
ones but it doesn't actually matter for

00:20:33,320 --> 00:20:37,220
this you can use auto dev ops on the

00:20:34,760 --> 00:20:39,020
open source version and then I want to

00:20:37,220 --> 00:20:41,720
use kubernetes because while I'm using

00:20:39,020 --> 00:20:43,669
Google's cloud in this example you can

00:20:41,720 --> 00:20:46,070
also hook this into your brew Nettie's

00:20:43,669 --> 00:20:49,760
cluster so this walkthrough I'm giving I

00:20:46,070 --> 00:20:52,030
am showing you the the github calm

00:20:49,760 --> 00:20:54,350
proprietary site and the google

00:20:52,030 --> 00:20:58,190
kubernetes but you can replace those

00:20:54,350 --> 00:21:01,270
with the fully open source versions so

00:20:58,190 --> 00:21:04,290
if you were to do this on get lab today

00:21:01,270 --> 00:21:08,010
there's a

00:21:04,290 --> 00:21:10,700
bottom-2 the walkthrough essentially the

00:21:08,010 --> 00:21:10,700
demo you can do yourself

00:21:11,090 --> 00:21:18,360
but the either you'd start with a new

00:21:14,430 --> 00:21:21,420
project or you'd add a CI file to an

00:21:18,360 --> 00:21:23,580
existing project but right now git lab

00:21:21,420 --> 00:21:25,860
has has this ability for three different

00:21:23,580 --> 00:21:28,560
pieces of type types of code so you've

00:21:25,860 --> 00:21:31,680
got ruby spring and nodejs

00:21:28,560 --> 00:21:34,260
they are adding more but this will set

00:21:31,680 --> 00:21:36,540
up a repository for you that shows you

00:21:34,260 --> 00:21:38,520
all of that sets up like all the testing

00:21:36,540 --> 00:21:41,460
infrastructure you may need for rails

00:21:38,520 --> 00:21:42,480
spring or node so you can use this

00:21:41,460 --> 00:21:45,480
template when you're creating this

00:21:42,480 --> 00:21:47,280
project or you can apply pieces of this

00:21:45,480 --> 00:21:51,870
proud of this template to an existing

00:21:47,280 --> 00:21:53,790
project but that's a bit more manual so

00:21:51,870 --> 00:21:55,620
I decided just to go with a ruby project

00:21:53,790 --> 00:21:59,400
because my example is just a very simple

00:21:55,620 --> 00:22:03,300
website so there's a few things to fill

00:21:59,400 --> 00:22:08,210
in on this page but it's it's pretty

00:22:03,300 --> 00:22:11,010
basic setup of a code repository and

00:22:08,210 --> 00:22:12,270
then we bring in the kubernetes bit and

00:22:11,010 --> 00:22:13,860
this is where you actually have to log

00:22:12,270 --> 00:22:15,570
into your google cloud account and it's

00:22:13,860 --> 00:22:17,160
actually really simple we're not going

00:22:15,570 --> 00:22:20,160
to be launching any kubernetes clusters

00:22:17,160 --> 00:22:24,360
from the google cloud UI itself which is

00:22:20,160 --> 00:22:26,340
good because all of the everything every

00:22:24,360 --> 00:22:29,370
single cloud platform has a really

00:22:26,340 --> 00:22:31,530
confusing UI and google is is no

00:22:29,370 --> 00:22:33,660
exception but they do have this

00:22:31,530 --> 00:22:36,330
QuickStart for getting started with the

00:22:33,660 --> 00:22:38,370
kubernetes side of their cloud and all

00:22:36,330 --> 00:22:40,560
you have to do really is enable the API

00:22:38,370 --> 00:22:43,440
and make sure billing is turned on so it

00:22:40,560 --> 00:22:45,390
will actually charge you for it and then

00:22:43,440 --> 00:22:46,920
you create a project and then that's the

00:22:45,390 --> 00:22:49,590
project you use inside of gitlab when

00:22:46,920 --> 00:22:51,150
you want to run your cluster but the

00:22:49,590 --> 00:22:55,890
interaction with the Google UI is really

00:22:51,150 --> 00:22:58,680
limited and then you go back over to

00:22:55,890 --> 00:23:01,530
your get lab project so your code

00:22:58,680 --> 00:23:02,910
repository exists and there since we set

00:23:01,530 --> 00:23:05,360
it up with Auto DevOps they'll now be a

00:23:02,910 --> 00:23:07,320
button that says add kubernetes cluster

00:23:05,360 --> 00:23:11,400
so you'll just want to click on that

00:23:07,320 --> 00:23:14,070
which brings you to this page in this

00:23:11,400 --> 00:23:17,520
one you can either they they have a like

00:23:14,070 --> 00:23:18,140
integration with the Google cloud so one

00:23:17,520 --> 00:23:19,220
of the first

00:23:18,140 --> 00:23:20,870
should' is that you integrate with them

00:23:19,220 --> 00:23:23,450
which is what I'm doing but you can also

00:23:20,870 --> 00:23:25,940
add an existing cluster and that allows

00:23:23,450 --> 00:23:28,100
you to hook into other kubernetes

00:23:25,940 --> 00:23:29,450
clusters so this makes it super easy

00:23:28,100 --> 00:23:30,530
because it'll spin up the cluster for

00:23:29,450 --> 00:23:32,000
you but if you already have your own

00:23:30,530 --> 00:23:34,370
kubernetes cluster you're running on a

00:23:32,000 --> 00:23:37,250
different cloud this is the page where

00:23:34,370 --> 00:23:39,679
you would the add existing cluster tab

00:23:37,250 --> 00:23:45,290
here to actually do that instead of

00:23:39,679 --> 00:23:46,670
using the Google one and then you add

00:23:45,290 --> 00:23:49,760
the details of what you want your

00:23:46,670 --> 00:23:52,610
cluster to look like see you as I said

00:23:49,760 --> 00:23:55,340
you have to have the cluster already or

00:23:52,610 --> 00:23:56,179
that the project already existing inside

00:23:55,340 --> 00:23:57,890
of Google Cloud

00:23:56,179 --> 00:23:59,799
but then the cluster is all

00:23:57,890 --> 00:24:02,360
automatically configured through get lab

00:23:59,799 --> 00:24:05,660
so you pick the the region you want it

00:24:02,360 --> 00:24:09,340
in how many nodes you want to run run it

00:24:05,660 --> 00:24:11,690
with that's the kubernetes nodes and

00:24:09,340 --> 00:24:17,750
then it automatically spins it up it

00:24:11,690 --> 00:24:19,760
takes a few minutes and then once that's

00:24:17,750 --> 00:24:21,350
up it's up so in this cluster this is

00:24:19,760 --> 00:24:22,880
really the default that the git Lab

00:24:21,350 --> 00:24:26,720
offers you for your kubernetes cluster

00:24:22,880 --> 00:24:32,419
it's got a total of 22 gigs of ram 6

00:24:26,720 --> 00:24:35,059
CPUs so it's not you know a super big

00:24:32,419 --> 00:24:39,140
cluster but for my test I didn't really

00:24:35,059 --> 00:24:42,650
need a really big one and this is again

00:24:39,140 --> 00:24:46,309
this is the UI for Google Cloud because

00:24:42,650 --> 00:24:48,110
I want to have a look at it there so the

00:24:46,309 --> 00:24:50,450
next step in this is you have to enable

00:24:48,110 --> 00:24:53,360
some things on on your kubernetes

00:24:50,450 --> 00:24:55,760
cluster so the first one is helm tiller

00:24:53,360 --> 00:24:58,070
and you can sort of think about helm is

00:24:55,760 --> 00:25:00,020
sort of like the apt-get of the

00:24:58,070 --> 00:25:01,780
kubernetes world it helps you install

00:25:00,020 --> 00:25:03,799
packages on your kubernetes cluster

00:25:01,780 --> 00:25:05,059
which is what we're going to do so first

00:25:03,799 --> 00:25:07,040
we have to install the package manager

00:25:05,059 --> 00:25:09,049
essentially and then we're going to set

00:25:07,040 --> 00:25:12,140
up the ingress controller so we can

00:25:09,049 --> 00:25:14,450
actually get two things on our on our

00:25:12,140 --> 00:25:15,980
cluster so this is ingress is the

00:25:14,450 --> 00:25:17,120
incoming network traffic because we're

00:25:15,980 --> 00:25:20,809
going to launch something into

00:25:17,120 --> 00:25:22,690
production in this continuous we're

00:25:20,809 --> 00:25:25,870
going to continuously deliver something

00:25:22,690 --> 00:25:28,790
and then we add in Prometheus which is a

00:25:25,870 --> 00:25:31,070
monitoring and metrics tool that works

00:25:28,790 --> 00:25:31,820
in cloud native environments so we're

00:25:31,070 --> 00:25:33,950
installing promi

00:25:31,820 --> 00:25:36,890
ts on top of kubernetes in order to get

00:25:33,950 --> 00:25:37,940
some statistics out of it and that's one

00:25:36,890 --> 00:25:39,790
of my favorite parts because it's

00:25:37,940 --> 00:25:41,960
actually integrated into the gitlab UI

00:25:39,790 --> 00:25:45,410
so we don't have to even look at the

00:25:41,960 --> 00:25:50,540
Prometheus UI or set up core fauna or

00:25:45,410 --> 00:25:53,900
anything it's all built into get lab so

00:25:50,540 --> 00:25:55,970
we have our cluster built our repository

00:25:53,900 --> 00:25:57,890
is all ready to run tests and now we

00:25:55,970 --> 00:26:01,790
actually have to enable this Auto DevOps

00:25:57,890 --> 00:26:02,270
thing inside of get lab and it's pretty

00:26:01,790 --> 00:26:05,690
simple

00:26:02,270 --> 00:26:07,310
like you check a box one of the things

00:26:05,690 --> 00:26:10,970
it needs is it needs a wild-card DNS

00:26:07,310 --> 00:26:14,600
entry in order to spin up the VMS and

00:26:10,970 --> 00:26:21,440
then access them and hopefully they just

00:26:14,600 --> 00:26:22,400
use a free service that and and they get

00:26:21,440 --> 00:26:23,840
lab uses a free service that

00:26:22,400 --> 00:26:26,150
automatically sets at the wild card

00:26:23,840 --> 00:26:27,950
domain for you if you don't have a DNS

00:26:26,150 --> 00:26:32,480
server of your own so in this example

00:26:27,950 --> 00:26:33,680
I'm just using that and then there are

00:26:32,480 --> 00:26:37,280
some options I don't know there might be

00:26:33,680 --> 00:26:39,260
too small to read at the bottom of the

00:26:37,280 --> 00:26:41,960
screen you can have it automatically to

00:26:39,260 --> 00:26:43,640
deploy to production or automatically

00:26:41,960 --> 00:26:45,200
deploy to staging and then someone has

00:26:43,640 --> 00:26:47,540
to push the go to production button

00:26:45,200 --> 00:26:49,100
after they review it but they give you a

00:26:47,540 --> 00:26:51,050
few options just built into this and

00:26:49,100 --> 00:26:53,150
again this is like their Auto DevOps

00:26:51,050 --> 00:26:55,700
tool all of this you can edit yourself

00:26:53,150 --> 00:27:02,650
if you go back into your system but this

00:26:55,700 --> 00:27:05,900
is just what comes out of the box so

00:27:02,650 --> 00:27:07,880
once I have that set up once I say OK on

00:27:05,900 --> 00:27:09,530
that it will actually start running the

00:27:07,880 --> 00:27:13,790
test immediately it'll look at my github

00:27:09,530 --> 00:27:16,280
repo get lab repo and launch the test

00:27:13,790 --> 00:27:18,620
that it wants to run so this is sort of

00:27:16,280 --> 00:27:21,800
what the the screen the view pipeline

00:27:18,620 --> 00:27:23,060
scream screen looks like and get lab it

00:27:21,800 --> 00:27:25,520
really just shows you that you've got

00:27:23,060 --> 00:27:27,140
this rails template and that things are

00:27:25,520 --> 00:27:30,010
starting to run but the interesting part

00:27:27,140 --> 00:27:32,390
is what it sets up for you automatically

00:27:30,010 --> 00:27:34,850
so this is what the pipeline looks like

00:27:32,390 --> 00:27:37,370
you've got your build stage which is

00:27:34,850 --> 00:27:39,200
going to grab the base of your container

00:27:37,370 --> 00:27:41,690
add everything into your container

00:27:39,200 --> 00:27:42,870
including your code and then create that

00:27:41,690 --> 00:27:45,990
container image

00:27:42,870 --> 00:27:48,360
in the testing area it adds various

00:27:45,990 --> 00:27:49,740
types of tests and I'll show you in the

00:27:48,360 --> 00:27:51,600
next slide there'll be a description of

00:27:49,740 --> 00:27:54,540
what each of these are but essentially

00:27:51,600 --> 00:27:55,710
it's testing code quality it's scanning

00:27:54,540 --> 00:27:59,790
your container for security

00:27:55,710 --> 00:28:01,740
vulnerabilities doing some license met

00:27:59,790 --> 00:28:05,790
light light license management with a

00:28:01,740 --> 00:28:07,350
really basic licensing scan and then

00:28:05,790 --> 00:28:09,320
whatever unit tests and other things

00:28:07,350 --> 00:28:11,570
that you have defined in your project

00:28:09,320 --> 00:28:13,620
and then I don't have a staging server

00:28:11,570 --> 00:28:15,650
so it's just launching everything into

00:28:13,620 --> 00:28:17,670
production once these tests all pass

00:28:15,650 --> 00:28:19,380
once that's done it also does this

00:28:17,670 --> 00:28:22,170
little really super basic performance

00:28:19,380 --> 00:28:26,520
test but again this is just the defaults

00:28:22,170 --> 00:28:28,890
so you can edit this as you see fit but

00:28:26,520 --> 00:28:32,070
I I i love this screen because i've

00:28:28,890 --> 00:28:35,580
spent the past six years manually

00:28:32,070 --> 00:28:37,230
writing pipelines so to go into a

00:28:35,580 --> 00:28:39,450
project like gitlab which is open source

00:28:37,230 --> 00:28:41,310
and offers all of these tooling and

00:28:39,450 --> 00:28:42,960
automatically just brings up this

00:28:41,310 --> 00:28:45,120
pipeline for me that it does all of this

00:28:42,960 --> 00:28:47,880
stuff I'm like well that's so much nicer

00:28:45,120 --> 00:28:49,470
than in Jenkins file okay

00:28:47,880 --> 00:28:53,190
I mean I will have to go in eventually

00:28:49,470 --> 00:28:54,510
and edit this myself to refine it to be

00:28:53,190 --> 00:28:56,040
actually what I wanted to do but just

00:28:54,510 --> 00:28:58,320
having this out of the box is really

00:28:56,040 --> 00:29:00,270
satisfying and of course with the

00:28:58,320 --> 00:29:02,820
proprietary versions and things that are

00:29:00,270 --> 00:29:04,470
hosted on circle CI and Travis and team

00:29:02,820 --> 00:29:06,300
CD they also have this sort of workflow

00:29:04,470 --> 00:29:11,400
to make it really easy for you to start

00:29:06,300 --> 00:29:12,480
on their platform and then this is

00:29:11,400 --> 00:29:14,790
actually just a screenshot from their

00:29:12,480 --> 00:29:17,130
documentation going into exactly what

00:29:14,790 --> 00:29:18,840
all of these tests are doing so you can

00:29:17,130 --> 00:29:20,490
in addition to being able to read them

00:29:18,840 --> 00:29:22,950
because they're you know in your code

00:29:20,490 --> 00:29:25,410
repository you can sort of just eyeball

00:29:22,950 --> 00:29:28,080
this and see like do I want to do

00:29:25,410 --> 00:29:30,540
dependency scanning sure or no maybe I

00:29:28,080 --> 00:29:32,490
don't maybe I have license management

00:29:30,540 --> 00:29:33,690
system that I'm using so I don't need to

00:29:32,490 --> 00:29:36,630
use the one that came out of the box

00:29:33,690 --> 00:29:38,360
with this one but it just gives you a

00:29:36,630 --> 00:29:45,270
rundown of how each each one's working

00:29:38,360 --> 00:29:47,670
or what each one does so this is what

00:29:45,270 --> 00:29:49,380
happens after you've run your your

00:29:47,670 --> 00:29:51,210
pipeline and it's it's been deployed and

00:29:49,380 --> 00:29:52,410
this big red arrow is pointing the

00:29:51,210 --> 00:29:53,910
important part of this screen that I

00:29:52,410 --> 00:29:56,190
want to bring your attention to the

00:29:53,910 --> 00:29:57,690
little very small arrow

00:29:56,190 --> 00:29:59,940
out of a box that will bring you

00:29:57,690 --> 00:30:01,799
directly to your deployed application so

00:29:59,940 --> 00:30:04,289
you can see it running in production or

00:30:01,799 --> 00:30:06,779
if it went to staging it'll show you

00:30:04,289 --> 00:30:08,700
where where you're going the one next to

00:30:06,779 --> 00:30:10,860
it with some little bars

00:30:08,700 --> 00:30:12,450
that's your metrics so that'll show you

00:30:10,860 --> 00:30:14,610
all the data coming out of prometheus

00:30:12,450 --> 00:30:15,509
I'll show you that in a moment and then

00:30:14,610 --> 00:30:17,190
the really cool one

00:30:15,509 --> 00:30:19,049
they're all really cool but the third

00:30:17,190 --> 00:30:20,549
one is your terminal which will give you

00:30:19,049 --> 00:30:23,159
a terminal on the container where your

00:30:20,549 --> 00:30:24,600
application is running and that's really

00:30:23,159 --> 00:30:27,450
useful if you want to poke around in the

00:30:24,600 --> 00:30:29,070
container and see what it's doing when I

00:30:27,450 --> 00:30:31,110
was working in on maysa they've actually

00:30:29,070 --> 00:30:32,700
made this a lot easier over time but it

00:30:31,110 --> 00:30:34,860
took a couple of hops to get inside of a

00:30:32,700 --> 00:30:36,360
container so that was like first you

00:30:34,860 --> 00:30:38,850
guys to Sage to the master node and then

00:30:36,360 --> 00:30:40,769
you go into the the other ones and

00:30:38,850 --> 00:30:43,409
actually list all of your containers

00:30:40,769 --> 00:30:45,149
find out which one it's running on but

00:30:43,409 --> 00:30:49,230
this is just in your web UI and that's

00:30:45,149 --> 00:30:54,120
quite nice so first this is my website

00:30:49,230 --> 00:30:56,309
that I just launched yay obviously super

00:30:54,120 --> 00:30:57,870
basic but this is the one that would

00:30:56,309 --> 00:30:59,190
have deployed after that pipeline ran

00:30:57,870 --> 00:31:03,120
the pipeline took a few minutes to run

00:30:59,190 --> 00:31:05,970
it's not running a lot of tests and then

00:31:03,120 --> 00:31:08,309
this is your metrics that came in from

00:31:05,970 --> 00:31:09,929
Prometheus over on the Google cloud so

00:31:08,309 --> 00:31:12,570
it's just reading from the Prometheus

00:31:09,929 --> 00:31:14,490
API to pull this and put it into your

00:31:12,570 --> 00:31:15,629
dashboard so in this one we can see the

00:31:14,490 --> 00:31:17,519
throughput this is me just like

00:31:15,629 --> 00:31:19,379
refreshing the demo page a few times and

00:31:17,519 --> 00:31:21,149
so you can see like where that's that's

00:31:19,379 --> 00:31:24,509
spiking over the 20 minutes I had this

00:31:21,149 --> 00:31:26,759
thing running and of course you can you

00:31:24,509 --> 00:31:29,549
can edit what sort of statistics come in

00:31:26,759 --> 00:31:31,830
because Prometheus can gather a ton of

00:31:29,549 --> 00:31:33,750
stuff about your infrastructure but in

00:31:31,830 --> 00:31:35,159
this one this is just the nginx stats

00:31:33,750 --> 00:31:40,559
for the service that I'm running on

00:31:35,159 --> 00:31:44,009
rails and then of course we can make a

00:31:40,559 --> 00:31:46,350
change to our project so in this change

00:31:44,009 --> 00:31:48,120
change I wanted to change the message on

00:31:46,350 --> 00:31:49,980
little website that I'm running just to

00:31:48,120 --> 00:31:55,559
welcome the all things open crowd here

00:31:49,980 --> 00:31:57,899
so I did a quick commit and then it

00:31:55,559 --> 00:31:58,769
automatically runs the jobs again one of

00:31:57,899 --> 00:32:01,049
the nice things about having an

00:31:58,769 --> 00:32:03,919
integrated platform for this is that you

00:32:01,049 --> 00:32:07,019
can have like notifications of when

00:32:03,919 --> 00:32:08,550
something is is triggered I used to do

00:32:07,019 --> 00:32:10,380
demos with Jenkins

00:32:08,550 --> 00:32:13,050
I'd have it like just hammered github

00:32:10,380 --> 00:32:16,500
like once a minute like cron style like

00:32:13,050 --> 00:32:18,060
star star star star star but with gitlab

00:32:16,500 --> 00:32:22,710
since everything is like all together

00:32:18,060 --> 00:32:24,060
your CI your job Runner and your get get

00:32:22,710 --> 00:32:26,220
repository and everything's all together

00:32:24,060 --> 00:32:28,290
there's more internal magic happening

00:32:26,220 --> 00:32:30,750
there so you're not just hitting or get

00:32:28,290 --> 00:32:32,310
repo all the time we're just fine for

00:32:30,750 --> 00:32:38,660
like three projects but once you get to

00:32:32,310 --> 00:32:38,660
3,000 it turns out github throttles you

00:32:40,370 --> 00:32:44,460
so as you can see in this one there's

00:32:43,080 --> 00:32:45,960
actually a few more a few more steps to

00:32:44,460 --> 00:32:48,930
the pipeline because the second time I'm

00:32:45,960 --> 00:32:51,030
running it but it essentially pretty

00:32:48,930 --> 00:32:53,010
pretty similar tests they all get run

00:32:51,030 --> 00:32:56,700
again and then you deploy your

00:32:53,010 --> 00:32:57,840
application again and then I want to add

00:32:56,700 --> 00:33:02,790
this one in because I didn't show you

00:32:57,840 --> 00:33:05,100
before if you look when you click on one

00:33:02,790 --> 00:33:06,330
of these it'll show you what's going on

00:33:05,100 --> 00:33:08,940
with the test and you have this nice

00:33:06,330 --> 00:33:11,040
little UI of what's going on so this is

00:33:08,940 --> 00:33:13,380
when I clicked on the the production job

00:33:11,040 --> 00:33:15,270
the deploy to production job and it just

00:33:13,380 --> 00:33:17,190
gives you the console of how the test is

00:33:15,270 --> 00:33:19,020
running so if you're really impatient

00:33:17,190 --> 00:33:20,700
and you're like why is this taking

00:33:19,020 --> 00:33:22,740
forever you just click in the UI and it

00:33:20,700 --> 00:33:24,380
brings you to the console so you can see

00:33:22,740 --> 00:33:27,180
that and then the logs are also stashed

00:33:24,380 --> 00:33:29,010
later when they're not running live so

00:33:27,180 --> 00:33:29,250
you can go back and find out what went

00:33:29,010 --> 00:33:34,410
wrong

00:33:29,250 --> 00:33:35,670
if one of the tests failed and then

00:33:34,410 --> 00:33:38,400
we've got our successfully deployed

00:33:35,670 --> 00:33:45,210
application which now has a welcome to

00:33:38,400 --> 00:33:47,250
all things open attendees so let's see

00:33:45,210 --> 00:33:49,500
when our time looks like here yeah we've

00:33:47,250 --> 00:33:52,260
got a few minutes so that was showing

00:33:49,500 --> 00:33:56,100
you how you can run get lab either on

00:33:52,260 --> 00:33:59,100
Prem Warren get lab comm for your CI CD

00:33:56,100 --> 00:34:00,840
pipeline and then it ran out to Google

00:33:59,100 --> 00:34:02,310
cloud to actually run all of those tests

00:34:00,840 --> 00:34:07,230
and then deploy the container and

00:34:02,310 --> 00:34:09,570
production and I I started so I started

00:34:07,230 --> 00:34:10,740
playing with this I was trying to figure

00:34:09,570 --> 00:34:12,210
out like which demo and which

00:34:10,740 --> 00:34:14,490
walkthrough I want to do for this talk

00:34:12,210 --> 00:34:19,140
so I played around with a few platforms

00:34:14,490 --> 00:34:20,760
but honestly like I for this this demo

00:34:19,140 --> 00:34:22,020
this walkthrough it took me about three

00:34:20,760 --> 00:34:24,600
hours to get familiar

00:34:22,020 --> 00:34:25,919
the whole thing I'm sure you're talking

00:34:24,600 --> 00:34:27,899
to get lab guys or like it takes five

00:34:25,919 --> 00:34:29,220
minutes but but to really have a

00:34:27,899 --> 00:34:31,380
fundamental understanding of like what's

00:34:29,220 --> 00:34:32,970
going on with kubernetes and how it's

00:34:31,380 --> 00:34:34,649
everything is connected it took me about

00:34:32,970 --> 00:34:36,540
three hours and that is a really short

00:34:34,649 --> 00:34:37,950
amount of time to be go from like not

00:34:36,540 --> 00:34:39,510
being very familiar with the tooling at

00:34:37,950 --> 00:34:41,700
all and just having a vague idea about

00:34:39,510 --> 00:34:44,340
CI CD to actually deploying an

00:34:41,700 --> 00:34:45,810
application so they're doing a really

00:34:44,340 --> 00:34:49,250
good job over there and of course it's

00:34:45,810 --> 00:34:50,880
open source so it's not just using a

00:34:49,250 --> 00:34:52,020
platform where they're trying to make

00:34:50,880 --> 00:34:55,980
things easy because you won't they want

00:34:52,020 --> 00:34:58,230
you to pay them so the last thing I want

00:34:55,980 --> 00:35:01,790
to talk about was these advanced

00:34:58,230 --> 00:35:04,860
strategies for continuous delivery which

00:35:01,790 --> 00:35:07,550
see there's not just a model of deploy

00:35:04,860 --> 00:35:08,880
of staging deploy into production the

00:35:07,550 --> 00:35:11,820
common ones

00:35:08,880 --> 00:35:15,390
the first is doing canary deployments

00:35:11,820 --> 00:35:17,550
there you deploy your application all

00:35:15,390 --> 00:35:19,140
subsets of your users so in the

00:35:17,550 --> 00:35:23,160
containerization world this would

00:35:19,140 --> 00:35:25,290
typically be like three five ten percent

00:35:23,160 --> 00:35:27,150
of your containers get replaced with the

00:35:25,290 --> 00:35:29,250
new version so then people hate your

00:35:27,150 --> 00:35:30,810
load balancer they're going to get sent

00:35:29,250 --> 00:35:32,190
to one of the containers and it could be

00:35:30,810 --> 00:35:34,920
the ninety percent still running on the

00:35:32,190 --> 00:35:38,100
old one or the new percent running the

00:35:34,920 --> 00:35:40,110
new one of the new ten percent and this

00:35:38,100 --> 00:35:41,940
is sort of to see if people this is like

00:35:40,110 --> 00:35:43,170
testing and production right like you're

00:35:41,940 --> 00:35:45,270
seeing if your users are running into

00:35:43,170 --> 00:35:46,290
the problems or if they have complaints

00:35:45,270 --> 00:35:48,390
or if there's all these failures

00:35:46,290 --> 00:35:50,550
throwing up in your log files suddenly

00:35:48,390 --> 00:35:52,410
when you do this canary release and the

00:35:50,550 --> 00:35:54,000
thing with this is it really easy to

00:35:52,410 --> 00:35:55,320
roll back and just shut down those

00:35:54,000 --> 00:35:59,310
containers and go back to the ones you

00:35:55,320 --> 00:36:03,900
were using before oh and the link that I

00:35:59,310 --> 00:36:05,940
give here on Martin Fowler's site he has

00:36:03,900 --> 00:36:07,350
this really great article about canary

00:36:05,940 --> 00:36:09,960
deployments so I'll share these slides

00:36:07,350 --> 00:36:11,010
afterwards but it's really good it's a

00:36:09,960 --> 00:36:12,930
really good read if you want to look at

00:36:11,010 --> 00:36:15,240
it he also wrote one about Bluegreen

00:36:12,930 --> 00:36:17,910
deployments so in a blue-green

00:36:15,240 --> 00:36:19,860
environment you have two production

00:36:17,910 --> 00:36:22,500
environments but only one of them is

00:36:19,860 --> 00:36:24,690
live at any given time so what you do is

00:36:22,500 --> 00:36:27,750
you upgrade the entire system on you

00:36:24,690 --> 00:36:29,580
know your blue once that's upgraded you

00:36:27,750 --> 00:36:31,050
make that one your live and then you

00:36:29,580 --> 00:36:33,450
make your green one which was previously

00:36:31,050 --> 00:36:35,910
your production system you make that one

00:36:33,450 --> 00:36:38,400
like you're you're really hot standby

00:36:35,910 --> 00:36:39,750
and so once you decide that blue is

00:36:38,400 --> 00:36:42,000
looking good in production then you can

00:36:39,750 --> 00:36:43,680
update your green side independently so

00:36:42,000 --> 00:36:44,850
you don't have downtime you just switch

00:36:43,680 --> 00:36:47,760
your load balancer to look at the other

00:36:44,850 --> 00:36:50,190
production cluster and if things go

00:36:47,760 --> 00:36:52,410
wrong you have that hot spare of the old

00:36:50,190 --> 00:36:54,180
version still running at least for a

00:36:52,410 --> 00:36:56,820
certain amount of time until you decide

00:36:54,180 --> 00:36:58,290
to upgrade it and this pretty much you

00:36:56,820 --> 00:36:59,810
don't have downtime because you always

00:36:58,290 --> 00:37:02,490
have two production environments running

00:36:59,810 --> 00:37:04,680
the obvious downside is you have two

00:37:02,490 --> 00:37:08,160
production environments running and that

00:37:04,680 --> 00:37:09,090
is a lot of resources to devote but it

00:37:08,160 --> 00:37:11,490
actually works for a lot of

00:37:09,090 --> 00:37:14,160
organizations where the resources are

00:37:11,490 --> 00:37:17,360
less of a problem than doing a really

00:37:14,160 --> 00:37:20,010
messy rollback and again with containers

00:37:17,360 --> 00:37:23,460
this is sort of a really easy thing to

00:37:20,010 --> 00:37:24,840
do because you're just every time you do

00:37:23,460 --> 00:37:26,280
an upgrade you're not logging into a

00:37:24,840 --> 00:37:28,410
server and running upgrade commands

00:37:26,280 --> 00:37:29,940
you're just shutting down containers and

00:37:28,410 --> 00:37:32,240
replacing them with the new version in

00:37:29,940 --> 00:37:37,200
sort of a golden image style

00:37:32,240 --> 00:37:38,970
deployment and so for all of the

00:37:37,200 --> 00:37:42,060
containerization platforms there are

00:37:38,970 --> 00:37:44,250
mechanisms to do this one of the the

00:37:42,060 --> 00:37:48,870
tools that I worked a lot with an Apache

00:37:44,250 --> 00:37:51,740
basis and DCOs was vamp so indie cos

00:37:48,870 --> 00:37:54,210
you've got the scheduler called marathon

00:37:51,740 --> 00:37:55,950
but you have to be really really good at

00:37:54,210 --> 00:37:58,740
writing marathon configs to do one of

00:37:55,950 --> 00:38:01,050
these sorts of deployments so vamp is a

00:37:58,740 --> 00:38:02,220
company and an open-source project it

00:38:01,050 --> 00:38:04,950
allows you to do these Bluegreen

00:38:02,220 --> 00:38:06,960
deployments on kubernetes and DCOs

00:38:04,950 --> 00:38:09,780
in a really simple way without having to

00:38:06,960 --> 00:38:11,610
run write really complicated config

00:38:09,780 --> 00:38:12,110
files and they just had their 1.0

00:38:11,610 --> 00:38:14,730
release

00:38:12,110 --> 00:38:16,590
recently so it's actually looking really

00:38:14,730 --> 00:38:18,360
cool so you can do these advanced

00:38:16,590 --> 00:38:21,060
deployments in these containerization

00:38:18,360 --> 00:38:25,410
platforms it's not just a thing you can

00:38:21,060 --> 00:38:27,450
do with VMs anymore so I want to leave a

00:38:25,410 --> 00:38:30,780
few minutes here at the end I think

00:38:27,450 --> 00:38:36,000
we've got well five or ten minutes just

00:38:30,780 --> 00:38:38,520
for questions there is a microphone so

00:38:36,000 --> 00:38:40,110
and we have we have our charming

00:38:38,520 --> 00:38:41,670
volunteer here who will run around with

00:38:40,110 --> 00:38:45,349
it for me

00:38:41,670 --> 00:38:45,349
but anyone has questions

00:38:56,640 --> 00:39:04,490
anybody comments experiences yeah there

00:39:00,750 --> 00:39:04,490
was of course far away

00:39:29,510 --> 00:39:51,200
we have yep so look what the question

00:39:48,980 --> 00:39:52,700
was I was talking about Bluegreen

00:39:51,200 --> 00:39:53,960
deployments at the end and if you get

00:39:52,700 --> 00:39:56,270
that automatically when you run

00:39:53,960 --> 00:39:57,920
kubernetes like out of the box no you

00:39:56,270 --> 00:40:02,720
still have to configure kubernetes to do

00:39:57,920 --> 00:40:04,490
that sort of deployment I mean yeah you

00:40:02,720 --> 00:40:06,170
can it's easy to do on the platform but

00:40:04,490 --> 00:40:07,820
you still have to tell it like you can

00:40:06,170 --> 00:40:08,750
run to different production deployments

00:40:07,820 --> 00:40:10,850
you can run even on two different

00:40:08,750 --> 00:40:12,530
kubernetes clusters and then you

00:40:10,850 --> 00:40:13,730
essentially just have identical ones

00:40:12,530 --> 00:40:15,590
with ones when upgrade and ones but not

00:40:13,730 --> 00:40:18,980
but yeah it's it's pretty simple

00:40:15,590 --> 00:40:20,480
especially since like a lot of a lot of

00:40:18,980 --> 00:40:21,980
organizations already are running a

00:40:20,480 --> 00:40:24,109
whole bunch of kubernetes clusters

00:40:21,980 --> 00:40:28,910
anyway it's actually a pretty common way

00:40:24,109 --> 00:40:31,330
for them to run it that way yeah got one

00:40:28,910 --> 00:40:31,330
in the back there

00:40:47,650 --> 00:40:54,580
is it tolerable no hi hey Elizabeth good

00:40:51,970 --> 00:40:57,730
morning I would like to know about the

00:40:54,580 --> 00:40:59,250
container what kind of application you

00:40:57,730 --> 00:41:01,450
can deploy over there

00:40:59,250 --> 00:41:03,460
yeah so what kind of applications you

00:41:01,450 --> 00:41:10,030
can run on containers like like did

00:41:03,460 --> 00:41:11,590
every yeah no sequel so yeah so this is

00:41:10,030 --> 00:41:13,510
a very common question so of course

00:41:11,590 --> 00:41:16,360
containers they all started out by just

00:41:13,510 --> 00:41:17,530
doing stateless services so really just

00:41:16,360 --> 00:41:18,760
like your web front-ends and other

00:41:17,530 --> 00:41:21,520
things that didn't have to do with like

00:41:18,760 --> 00:41:23,620
databases and complex data applications

00:41:21,520 --> 00:41:26,830
but if you're keeping up to speed with

00:41:23,620 --> 00:41:28,750
like the state but the latest things

00:41:26,830 --> 00:41:31,600
going on with containers is stateful

00:41:28,750 --> 00:41:33,190
applications are like the biggest focus

00:41:31,600 --> 00:41:34,450
of pretty much every containerization

00:41:33,190 --> 00:41:36,250
platform that i've worked on so like

00:41:34,450 --> 00:41:39,160
kubernetes is working really hard on

00:41:36,250 --> 00:41:40,750
stateful applications Mesa has been

00:41:39,160 --> 00:41:42,160
doing a lot and is I think they're

00:41:40,750 --> 00:41:46,120
actually like at the moment a bit

00:41:42,160 --> 00:41:49,360
further along but the goal is to run

00:41:46,120 --> 00:41:51,910
everything on containers I think there's

00:41:49,360 --> 00:41:54,190
there's even some just like there's some

00:41:51,910 --> 00:41:56,740
distributed databases projects that are

00:41:54,190 --> 00:41:58,690
being run to run on containers because

00:41:56,740 --> 00:42:01,030
even as recent as last year when I was

00:41:58,690 --> 00:42:08,650
at Mesa is con almost exactly a year ago

00:42:01,030 --> 00:42:10,300
in Europe there was people were mostly

00:42:08,650 --> 00:42:13,390
running like their staff cluster outside

00:42:10,300 --> 00:42:14,890
of their their their mesas clusters and

00:42:13,390 --> 00:42:17,200
they were still running like their old

00:42:14,890 --> 00:42:19,300
NASA's and things but increasingly it's

00:42:17,200 --> 00:42:20,560
becoming very common to run it so what

00:42:19,300 --> 00:42:21,910
I'd recommend is if you were thinking

00:42:20,560 --> 00:42:23,320
about running everything in containers

00:42:21,910 --> 00:42:25,690
just look at what's going on in the

00:42:23,320 --> 00:42:26,800
community and in these projects and find

00:42:25,690 --> 00:42:28,240
out what the current state of it is

00:42:26,800 --> 00:42:29,950
because they're making a ton of progress

00:42:28,240 --> 00:42:31,000
and it's what everyone wants like they

00:42:29,950 --> 00:42:33,040
don't want to have their own staff

00:42:31,000 --> 00:42:35,190
cluster over here in their own you know

00:42:33,040 --> 00:42:37,750
kubernetes cluster over here you know so

00:42:35,190 --> 00:42:40,110
it's definitely on goal and they're

00:42:37,750 --> 00:42:40,110
making progress

00:42:40,930 --> 00:42:47,520
all right thank you

00:42:43,680 --> 00:42:47,520

YouTube URL: https://www.youtube.com/watch?v=uDTVJKhjK2Y


