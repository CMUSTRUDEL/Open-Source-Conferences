Title: Container Management at Scale - Cameron Seader
Publication date: 2020-12-11
Playlist: All Things Open 2020 - Cloud Track
Description: 
	Presented by: Cameron Seader, SUSE
Presented at All Things Open 2020 - Cloud Track

Abstract: Whether you are contemplating starting your container journey or are already on that journey and looking for deeper insight to help you progress, we have the answers for you at SUSE.

There are many challenges to administering a multi-cluster Kubernetes ecosystem, whether it begins at the operating system level, terminates at the cloud, or at an edge endpoint. "Running At Scale" means having highly-available services that can be run at large scale to service users globally, update these services several times an hour to roll out new features, all without service disruption. Kubernetes also will take care of networking, connecting containers with each other, and of providing storage for containers to name a few. 

SUSE offers robust tools for you to operate converged container and virtual infrastructure across a range of mixed cloud environments. We enable you to run legacy workloads alongside cloud-native applications in the digital enterprise. Our solutions help you deploy and manage applications at scale across organizations, clusters and clouds
Captions: 
	00:00:05,120 --> 00:00:09,120
all right thank you so much

00:00:07,359 --> 00:00:11,840
today we're going to be talking about

00:00:09,120 --> 00:00:15,040
orchestrating cloud native storage

00:00:11,840 --> 00:00:16,720
for your enterprise kubernetes workloads

00:00:15,040 --> 00:00:18,480
so i'm going to go into quite a few

00:00:16,720 --> 00:00:22,160
details

00:00:18,480 --> 00:00:22,160
in regards to the

00:00:23,039 --> 00:00:28,560
cloud native storage that i hope

00:00:25,920 --> 00:00:31,119
everybody will

00:00:28,560 --> 00:00:33,440
will appreciate because there's a lot of

00:00:31,119 --> 00:00:37,120
things changing in this world

00:00:33,440 --> 00:00:37,120
as far as storage goes

00:00:37,760 --> 00:00:43,360
now i've been a technology strategist

00:00:40,719 --> 00:00:45,039
with susa for quite a while

00:00:43,360 --> 00:00:46,640
i've had many different roles there i've

00:00:45,039 --> 00:00:50,239
been with susa for

00:00:46,640 --> 00:00:53,760
over 15 years and

00:00:50,239 --> 00:00:56,320
throughout that time i've i've

00:00:53,760 --> 00:00:57,920
worked with many of susa's premium

00:00:56,320 --> 00:01:00,719
customers

00:00:57,920 --> 00:01:02,399
also supporting many of our strategic

00:01:00,719 --> 00:01:04,640
opportunities

00:01:02,399 --> 00:01:06,479
and hopefully some of my experience can

00:01:04,640 --> 00:01:08,560
shed some light on

00:01:06,479 --> 00:01:12,320
what we're talking about here today with

00:01:08,560 --> 00:01:15,680
cloud native

00:01:12,320 --> 00:01:17,520
infrastructure really has always been

00:01:15,680 --> 00:01:19,680
quite demanding it's it's really getting

00:01:17,520 --> 00:01:22,000
more so every every day

00:01:19,680 --> 00:01:23,840
um there's three major dimensions along

00:01:22,000 --> 00:01:26,159
with infrastructure management that's

00:01:23,840 --> 00:01:29,200
becoming more challenging than ever

00:01:26,159 --> 00:01:31,200
and the first of these is the expansion

00:01:29,200 --> 00:01:34,240
and diversification

00:01:31,200 --> 00:01:34,720
that we see in our data center and also

00:01:34,240 --> 00:01:38,960
being

00:01:34,720 --> 00:01:42,560
being able to manage this data center

00:01:38,960 --> 00:01:45,680
full infrastructure at scale

00:01:42,560 --> 00:01:48,159
but your your domain today is

00:01:45,680 --> 00:01:49,360
stretching far beyond just the data

00:01:48,159 --> 00:01:53,360
center

00:01:49,360 --> 00:01:55,200
with public clouds and edge computing

00:01:53,360 --> 00:01:57,040
that might be either something that

00:01:55,200 --> 00:02:00,479
you're exploring

00:01:57,040 --> 00:02:00,479
or you might be using today

00:02:01,119 --> 00:02:04,719
the second demand or challenge in our

00:02:03,520 --> 00:02:07,840
workloads are

00:02:04,719 --> 00:02:11,120
also develop evolving

00:02:07,840 --> 00:02:12,480
and growing in number such as cloud

00:02:11,120 --> 00:02:16,239
native

00:02:12,480 --> 00:02:20,239
back office software ai and analytics

00:02:16,239 --> 00:02:23,120
edge workloads but it's up to you

00:02:20,239 --> 00:02:25,200
to ensure that you're also supplied with

00:02:23,120 --> 00:02:27,680
the infrastructure that you need

00:02:25,200 --> 00:02:30,720
and the right support that you need for

00:02:27,680 --> 00:02:30,720
this infrastructure

00:02:31,120 --> 00:02:34,879
and finally you're also undoubtedly

00:02:33,760 --> 00:02:38,160
feeling

00:02:34,879 --> 00:02:40,400
any increasing pressures

00:02:38,160 --> 00:02:42,239
to move faster today with your

00:02:40,400 --> 00:02:44,319
application stack to provision

00:02:42,239 --> 00:02:45,519
deprovision infrastructure more rapidly

00:02:44,319 --> 00:02:48,319
and frequently than you have

00:02:45,519 --> 00:02:51,840
in the past so the pace of our business

00:02:48,319 --> 00:02:51,840
continues to accelerate

00:02:53,599 --> 00:02:58,640
to date we've been fortunate to have a

00:02:56,800 --> 00:03:00,400
software-defined infrastructure stack

00:02:58,640 --> 00:03:02,080
that helps us to better manage

00:03:00,400 --> 00:03:05,280
infrastructure

00:03:02,080 --> 00:03:07,519
now starting nearly uh roughly two

00:03:05,280 --> 00:03:10,720
decades ago and continuing

00:03:07,519 --> 00:03:12,959
right up to just last year that that

00:03:10,720 --> 00:03:15,120
stack has been based on server

00:03:12,959 --> 00:03:18,159
virtualization

00:03:15,120 --> 00:03:22,000
we've been packaging workloads

00:03:18,159 --> 00:03:23,680
for delivery into virtual machines and

00:03:22,000 --> 00:03:25,280
and we also used a full stack of

00:03:23,680 --> 00:03:26,560
software to manage those virtual

00:03:25,280 --> 00:03:28,480
machines

00:03:26,560 --> 00:03:31,040
and there's been various types of

00:03:28,480 --> 00:03:34,400
virtual machine management out there

00:03:31,040 --> 00:03:37,680
that have that we've come across

00:03:34,400 --> 00:03:40,799
both in open source um

00:03:37,680 --> 00:03:45,680
and off-the-shelf

00:03:40,799 --> 00:03:47,360
software as well as we look to

00:03:45,680 --> 00:03:49,280
address today's new infrastructure

00:03:47,360 --> 00:03:51,120
management challenge we find that

00:03:49,280 --> 00:03:54,319
vm-based model

00:03:51,120 --> 00:03:54,319
is really falling short

00:03:54,560 --> 00:03:58,560
there's a new model that's emerging to

00:03:56,480 --> 00:04:01,040
help us overcome those challenges

00:03:58,560 --> 00:04:03,519
and this model allows us to successfully

00:04:01,040 --> 00:04:04,000
manage the new levels of scale diversity

00:04:03,519 --> 00:04:07,280
and

00:04:04,000 --> 00:04:10,400
and also accelerated space pace

00:04:07,280 --> 00:04:13,200
that uh define our world today

00:04:10,400 --> 00:04:14,000
and it is the focus of the solution we'd

00:04:13,200 --> 00:04:16,640
like to talk about

00:04:14,000 --> 00:04:16,640
with you today

00:04:17,680 --> 00:04:21,680
so what's new well starting at the

00:04:19,680 --> 00:04:25,120
physical layer

00:04:21,680 --> 00:04:29,120
physical server storage networking

00:04:25,120 --> 00:04:31,919
we're going to build out this new stack

00:04:29,120 --> 00:04:33,280
the key building block here around which

00:04:31,919 --> 00:04:36,800
the new stack is centered

00:04:33,280 --> 00:04:39,600
is containers no surprise

00:04:36,800 --> 00:04:40,880
containers offer a different sort of

00:04:39,600 --> 00:04:44,000
workload

00:04:40,880 --> 00:04:45,040
and infrastructure encapsulation and

00:04:44,000 --> 00:04:47,520
where vms

00:04:45,040 --> 00:04:49,199
they need a hypervisor containers

00:04:47,520 --> 00:04:50,800
operate in a container runtime

00:04:49,199 --> 00:04:53,759
environment which becomes part of our

00:04:50,800 --> 00:04:56,160
new stack as well

00:04:53,759 --> 00:04:58,240
to manage lots of containers we use

00:04:56,160 --> 00:05:01,120
today's default container management

00:04:58,240 --> 00:05:03,360
platform which is kubernetes

00:05:01,120 --> 00:05:04,400
kubernetes also provides its own

00:05:03,360 --> 00:05:06,240
interface for

00:05:04,400 --> 00:05:08,880
accessing underlying physical

00:05:06,240 --> 00:05:12,880
infrastructure

00:05:08,880 --> 00:05:14,880
and today particularly

00:05:12,880 --> 00:05:16,560
as our infrastructure domain has become

00:05:14,880 --> 00:05:19,600
so expansive

00:05:16,560 --> 00:05:21,919
we find that we need yet another layer

00:05:19,600 --> 00:05:23,600
a multi-cluster management layer that

00:05:21,919 --> 00:05:26,080
allows us to extend

00:05:23,600 --> 00:05:28,720
the use of the stack over very large

00:05:26,080 --> 00:05:30,479
multi-cluster environments

00:05:28,720 --> 00:05:32,240
and today particularly as our

00:05:30,479 --> 00:05:33,759
infrastructure domain has become so

00:05:32,240 --> 00:05:39,840
expansive

00:05:33,759 --> 00:05:39,840
it also expands into the public cloud

00:05:41,280 --> 00:05:45,600
with this new set of technologies

00:05:43,600 --> 00:05:48,240
comprises our modern

00:05:45,600 --> 00:05:50,000
container infrastructure stack and this

00:05:48,240 --> 00:05:52,080
stack will help us address

00:05:50,000 --> 00:05:53,280
all the scaling challenges we're facing

00:05:52,080 --> 00:05:57,759
today

00:05:53,280 --> 00:05:57,759
so let's take a look at how it does that

00:05:58,000 --> 00:06:03,680
[Music]

00:06:00,639 --> 00:06:05,840
to regain control

00:06:03,680 --> 00:06:08,319
we rely on our new kubernetes

00:06:05,840 --> 00:06:11,360
infrastructure to provide

00:06:08,319 --> 00:06:11,759
a unifying abstraction for managing our

00:06:11,360 --> 00:06:14,400
many

00:06:11,759 --> 00:06:16,400
and diverse infrastructure environments

00:06:14,400 --> 00:06:18,800
with a single management platform we get

00:06:16,400 --> 00:06:21,759
a unified overarching view into

00:06:18,800 --> 00:06:24,479
all of our infrastructure we can monitor

00:06:21,759 --> 00:06:26,319
and manage every kubernetes cluster

00:06:24,479 --> 00:06:29,120
as well as workloads running on those

00:06:26,319 --> 00:06:32,639
clusters wherever they're located

00:06:29,120 --> 00:06:34,160
from edge to core to cloud we can manage

00:06:32,639 --> 00:06:36,080
multiple tenants too

00:06:34,160 --> 00:06:37,919
and exercise proper governance and

00:06:36,080 --> 00:06:39,600
control over the complete infrastructure

00:06:37,919 --> 00:06:43,520
domain

00:06:39,600 --> 00:06:49,599
and we need more detailed information

00:06:43,520 --> 00:06:51,360
to fill in that information

00:06:49,599 --> 00:06:54,639
we're going to focus on supporting some

00:06:51,360 --> 00:06:56,160
of these evolving workloads

00:06:54,639 --> 00:06:58,960
so it's not just about physical

00:06:56,160 --> 00:07:02,000
expansion that you're facing

00:06:58,960 --> 00:07:04,720
your infrastructure must also meet the

00:07:02,000 --> 00:07:07,759
increasing sophisticated networking

00:07:04,720 --> 00:07:11,199
security data processing requirements

00:07:07,759 --> 00:07:14,840
of modern iot ai

00:07:11,199 --> 00:07:17,280
machine learning microservices-based

00:07:14,840 --> 00:07:20,720
applications while continuing to support

00:07:17,280 --> 00:07:20,720
traditional workloads too

00:07:21,599 --> 00:07:25,360
new workloads require multiple types of

00:07:23,840 --> 00:07:28,880
storage

00:07:25,360 --> 00:07:31,039
and lots of it an independent scaling of

00:07:28,880 --> 00:07:34,960
compute and storage

00:07:31,039 --> 00:07:38,720
from your application and data services

00:07:34,960 --> 00:07:41,199
stateful workloads persistent data

00:07:38,720 --> 00:07:44,479
requirements

00:07:41,199 --> 00:07:50,080
my sequel databases

00:07:44,479 --> 00:07:52,879
mariadb mongodb and many others

00:07:50,080 --> 00:07:54,080
we have content management systems that

00:07:52,879 --> 00:07:58,000
require

00:07:54,080 --> 00:08:01,680
extended database connections

00:07:58,000 --> 00:08:02,400
and also data analytics these data farms

00:08:01,680 --> 00:08:05,520
require

00:08:02,400 --> 00:08:09,360
very vast amounts of storage for all

00:08:05,520 --> 00:08:09,360
this computational data that comes in

00:08:11,039 --> 00:08:16,720
all backed by what we call susa

00:08:14,560 --> 00:08:18,000
container as a service platform which is

00:08:16,720 --> 00:08:21,039
kubernetes

00:08:18,000 --> 00:08:22,960
it's a kubernetes distribution in susa

00:08:21,039 --> 00:08:27,840
enterprise storage which is a

00:08:22,960 --> 00:08:27,840
ceph based distribution

00:08:31,199 --> 00:08:34,959
now we still have two stacks

00:08:36,640 --> 00:08:41,039
but we do have new applications that

00:08:39,039 --> 00:08:44,240
need this new infrastructure

00:08:41,039 --> 00:08:46,320
stack but we still have

00:08:44,240 --> 00:08:48,240
all of our existing vm-based

00:08:46,320 --> 00:08:50,640
applications too and our infrastructure

00:08:48,240 --> 00:08:53,760
needs to support them as well

00:08:50,640 --> 00:08:55,600
so we need to maintain vm infrastructure

00:08:53,760 --> 00:08:58,320
as well as container infrastruct

00:08:55,600 --> 00:09:00,959
infrastructure but these environments

00:08:58,320 --> 00:09:02,959
use different management tooling

00:09:00,959 --> 00:09:08,959
so now we have yet another management

00:09:02,959 --> 00:09:11,120
platform to manage

00:09:08,959 --> 00:09:12,320
and that's where we come into

00:09:11,120 --> 00:09:15,519
integrating

00:09:12,320 --> 00:09:16,880
this management platform the future is

00:09:15,519 --> 00:09:19,600
kubernetes

00:09:16,880 --> 00:09:21,680
and that's how susa sees it it will

00:09:19,600 --> 00:09:22,080
become the new normalizing interface

00:09:21,680 --> 00:09:25,279
between

00:09:22,080 --> 00:09:27,120
workloads and infrastructure and so it

00:09:25,279 --> 00:09:28,640
makes sense to build a unified

00:09:27,120 --> 00:09:32,000
management based

00:09:28,640 --> 00:09:33,120
on kubernetes on kubernetes a single

00:09:32,000 --> 00:09:36,240
platform to serve

00:09:33,120 --> 00:09:39,920
future workloads will be all kubernetes

00:09:36,240 --> 00:09:43,120
based and can fit existing workloads

00:09:39,920 --> 00:09:43,120
into the infrastructure

00:09:43,440 --> 00:09:47,360
and if you notice in the software

00:09:46,080 --> 00:09:50,399
defined

00:09:47,360 --> 00:09:54,160
storage and networking space the second

00:09:50,399 --> 00:09:57,279
box from from the bottom csi

00:09:54,160 --> 00:10:00,800
which is container storage interface and

00:09:57,279 --> 00:10:04,720
cni which is container network interface

00:10:00,800 --> 00:10:09,360
is part of the underlying infrastructure

00:10:04,720 --> 00:10:09,360
over top of your physical hardware

00:10:13,200 --> 00:10:16,959
so soos is helping to drive this future

00:10:15,200 --> 00:10:21,279
by ensuring that it is

00:10:16,959 --> 00:10:21,279
manageable by real enterprise customers

00:10:22,399 --> 00:10:26,560
so what are we trying to solve with our

00:10:25,279 --> 00:10:29,600
software defined

00:10:26,560 --> 00:10:32,800
storage with a container

00:10:29,600 --> 00:10:34,240
storage interface well there's several

00:10:32,800 --> 00:10:37,040
things

00:10:34,240 --> 00:10:38,000
on disk files in a container are are

00:10:37,040 --> 00:10:40,000
ephemeral

00:10:38,000 --> 00:10:43,120
when you spin them up which presents a

00:10:40,000 --> 00:10:46,240
few problems for critical applications

00:10:43,120 --> 00:10:48,880
when you're running containers so

00:10:46,240 --> 00:10:49,680
first when a container crashes you also

00:10:48,880 --> 00:10:53,120
have

00:10:49,680 --> 00:10:56,640
a kubelet which actually restarts

00:10:53,120 --> 00:10:57,200
the application but the files will be

00:10:56,640 --> 00:10:59,839
lost

00:10:57,200 --> 00:11:02,000
if they're in an ephemeral state and so

00:10:59,839 --> 00:11:05,120
you need something that

00:11:02,000 --> 00:11:05,120
is more persistent

00:11:05,760 --> 00:11:09,040
second when running containers together

00:11:07,760 --> 00:11:11,519
in a pod

00:11:09,040 --> 00:11:13,760
it's often necessary to share files

00:11:11,519 --> 00:11:17,200
between those containers

00:11:13,760 --> 00:11:20,640
and so you need a way to to share those

00:11:17,200 --> 00:11:22,880
with a storage platform

00:11:20,640 --> 00:11:25,279
kubernetes volume abstraction solves

00:11:22,880 --> 00:11:28,399
both of these problems

00:11:25,279 --> 00:11:30,640
so with the use of the container storage

00:11:28,399 --> 00:11:33,440
interface

00:11:30,640 --> 00:11:34,720
will be able to solve all these problems

00:11:33,440 --> 00:11:36,640
there are many different types of

00:11:34,720 --> 00:11:39,760
volumes that are available today

00:11:36,640 --> 00:11:43,279
when it comes to kubernetes

00:11:39,760 --> 00:11:46,320
both standard and open open source

00:11:43,279 --> 00:11:49,519
there's host path iscsi

00:11:46,320 --> 00:11:53,040
local some of these are

00:11:49,519 --> 00:11:57,040
being deprecated as i speak

00:11:53,040 --> 00:11:58,800
nfs fiber channel rbd set fs

00:11:57,040 --> 00:12:00,240
there's many different third parties out

00:11:58,800 --> 00:12:03,760
there so if you have

00:12:00,240 --> 00:12:06,000
these third-party storage infrastructure

00:12:03,760 --> 00:12:07,680
already in your data center today you

00:12:06,000 --> 00:12:10,720
can take advantage of those

00:12:07,680 --> 00:12:14,720
using a csi driver

00:12:10,720 --> 00:12:18,000
within kubernetes and then also there

00:12:14,720 --> 00:12:25,600
there are some cloud

00:12:18,000 --> 00:12:29,279
specific drivers available as well

00:12:25,600 --> 00:12:32,639
so seven and cloud native cloud native

00:12:29,279 --> 00:12:36,399
is container package dynamically managed

00:12:32,639 --> 00:12:36,399
and micro services oriented

00:12:36,880 --> 00:12:44,480
with the combination of kubernetes and

00:12:40,160 --> 00:12:46,399
ceph we can provide

00:12:44,480 --> 00:12:48,959
persistent storage for cloud native

00:12:46,399 --> 00:12:48,959
workloads

00:12:51,360 --> 00:12:54,800
and there's great benefits here where we

00:12:53,920 --> 00:12:56,880
can co

00:12:54,800 --> 00:12:59,760
co-locate our storage and compute

00:12:56,880 --> 00:13:02,880
infrastructure infrastructure together

00:12:59,760 --> 00:13:03,279
providing file block and object storage

00:13:02,880 --> 00:13:06,940
to

00:13:03,279 --> 00:13:08,160
a kubernetes cluster and also

00:13:06,940 --> 00:13:11,519
[Music]

00:13:08,160 --> 00:13:14,000
self-managing self-scaling self-healing

00:13:11,519 --> 00:13:14,959
all of these services in a cloud-native

00:13:14,000 --> 00:13:18,959
environment become

00:13:14,959 --> 00:13:20,480
very practical cases

00:13:18,959 --> 00:13:22,880
when you're managing the cloud native

00:13:20,480 --> 00:13:22,880
environment

00:13:27,279 --> 00:13:34,399
today susa enterprise storage uses

00:13:30,959 --> 00:13:37,120
seth and rook

00:13:34,399 --> 00:13:38,240
is a cloud native storage orchestrator

00:13:37,120 --> 00:13:41,519
this allows us

00:13:38,240 --> 00:13:45,199
to actually deploy ceph

00:13:41,519 --> 00:13:47,279
in containers on top of kubernetes

00:13:45,199 --> 00:13:49,519
so it allows you to expand your

00:13:47,279 --> 00:13:51,279
kubernetes to run all that storage the

00:13:49,519 --> 00:13:52,880
deployment the configuration

00:13:51,279 --> 00:13:55,920
all the provisioning scaling and

00:13:52,880 --> 00:13:59,120
upgrading of the entire ceph cluster

00:13:55,920 --> 00:14:01,440
on top of kubernetes

00:13:59,120 --> 00:14:02,800
so rook is not part of the data path at

00:14:01,440 --> 00:14:05,279
all it's just doing

00:14:02,800 --> 00:14:08,320
the management and so you'll see a

00:14:05,279 --> 00:14:10,399
namespace and pods running

00:14:08,320 --> 00:14:12,480
the management infrastructure for

00:14:10,399 --> 00:14:14,480
yourself cluster

00:14:12,480 --> 00:14:16,160
so rook manages all the seth damon's

00:14:14,480 --> 00:14:19,120
demons

00:14:16,160 --> 00:14:19,920
that are installed and running across

00:14:19,120 --> 00:14:23,199
all of your

00:14:19,920 --> 00:14:23,199
kubernetes worker nodes

00:14:24,160 --> 00:14:31,199
rook is a cncf incubating project

00:14:28,639 --> 00:14:34,320
and this is part of our susa enterprise

00:14:31,199 --> 00:14:34,320
storage product today

00:14:35,519 --> 00:14:39,040
uh just a a high level view of these the

00:14:38,720 --> 00:14:42,160
rook

00:14:39,040 --> 00:14:44,639
architecture i'm just showing

00:14:42,160 --> 00:14:46,240
you know that rook as an operator runs

00:14:44,639 --> 00:14:49,120
in a pod

00:14:46,240 --> 00:14:49,680
it also runs in its own name space and

00:14:49,120 --> 00:14:52,720
the seth

00:14:49,680 --> 00:14:59,839
cluster connecting directly to disk

00:14:52,720 --> 00:14:59,839
extra disk attached to your worker nodes

00:15:01,279 --> 00:15:04,880
so there's two setups actually we can

00:15:04,399 --> 00:15:08,720
either

00:15:04,880 --> 00:15:10,320
set up a cluster that's separate

00:15:08,720 --> 00:15:12,880
or we can set up a cluster that's

00:15:10,320 --> 00:15:15,279
actually hyper converged

00:15:12,880 --> 00:15:17,040
so a single set cluster provides storage

00:15:15,279 --> 00:15:19,519
to multiple kubernetes clusters and

00:15:17,040 --> 00:15:19,519
clients

00:15:20,160 --> 00:15:24,320
and a hyper converge ceph cluster

00:15:22,399 --> 00:15:27,760
provides the storage

00:15:24,320 --> 00:15:29,759
combined with the cluster but you won't

00:15:27,760 --> 00:15:31,199
be able to connect to other external

00:15:29,759 --> 00:15:33,440
clients

00:15:31,199 --> 00:15:36,320
just by nature of the cluster itself

00:15:33,440 --> 00:15:36,320
being locked down

00:15:36,880 --> 00:15:40,639
so the separate cluster might have the

00:15:39,680 --> 00:15:44,079
advantage of

00:15:40,639 --> 00:15:46,639
utilizing the ceph storage for not just

00:15:44,079 --> 00:15:50,480
kubernetes but other workloads maybe in

00:15:46,639 --> 00:15:50,480
virtual machine environments as well

00:15:53,040 --> 00:15:58,480
so what is the csi the container storage

00:15:56,079 --> 00:16:00,880
interface

00:15:58,480 --> 00:16:02,480
now this really was introduced in

00:16:00,880 --> 00:16:05,920
version

00:16:02,480 --> 00:16:06,480
version 1.9 of kubernetes and it really

00:16:05,920 --> 00:16:10,000
became

00:16:06,480 --> 00:16:12,320
stable in version 1.18 which

00:16:10,000 --> 00:16:14,480
is fairly new it's i think it's been out

00:16:12,320 --> 00:16:16,959
for maybe

00:16:14,480 --> 00:16:18,460
maybe six months or so maybe a little

00:16:16,959 --> 00:16:19,600
bit less

00:16:18,460 --> 00:16:21,839
[Music]

00:16:19,600 --> 00:16:23,600
but it's a standard interface to expose

00:16:21,839 --> 00:16:26,399
storage

00:16:23,600 --> 00:16:27,360
to your container workloads and it was

00:16:26,399 --> 00:16:32,320
really designed

00:16:27,360 --> 00:16:32,320
to to easily

00:16:32,399 --> 00:16:37,920
advocate for the developer community

00:16:35,519 --> 00:16:39,360
that was creating storage drivers for

00:16:37,920 --> 00:16:42,480
kubernetes

00:16:39,360 --> 00:16:44,560
really to make it easier so

00:16:42,480 --> 00:16:46,399
there's lots of new drivers now that are

00:16:44,560 --> 00:16:50,000
that are actually

00:16:46,399 --> 00:16:53,600
being written for the the csi today

00:16:50,000 --> 00:16:55,759
and i put some links here in this

00:16:53,600 --> 00:16:58,560
this presentation so you can go back and

00:16:55,759 --> 00:16:58,560
look at these later

00:17:00,560 --> 00:17:05,280
some of the typical driver features that

00:17:02,880 --> 00:17:06,480
come with just about every driver that's

00:17:05,280 --> 00:17:08,799
available

00:17:06,480 --> 00:17:10,720
this is typical driver spec unless a

00:17:08,799 --> 00:17:14,079
third party builds something else

00:17:10,720 --> 00:17:14,559
into it or extends it but you're going

00:17:14,079 --> 00:17:18,559
to see

00:17:14,559 --> 00:17:21,839
typical topology secrets and credentials

00:17:18,559 --> 00:17:26,000
raw block volumes skip

00:17:21,839 --> 00:17:28,480
attach features pod info expansion

00:17:26,000 --> 00:17:30,240
where you can grow and shrink you're

00:17:28,480 --> 00:17:34,160
doing snapshotting and

00:17:30,240 --> 00:17:37,280
cloning supporting of ephemeral storage

00:17:34,160 --> 00:17:41,280
various types of volume limits

00:17:37,280 --> 00:17:43,919
it also includes side car containers

00:17:41,280 --> 00:17:45,440
most of the csi drivers when you when

00:17:43,919 --> 00:17:49,360
you set them up

00:17:45,440 --> 00:17:50,320
we'll also deploy several sidecar

00:17:49,360 --> 00:17:53,360
containers

00:17:50,320 --> 00:17:56,400
you'll have a provisioner and attacher

00:17:53,360 --> 00:17:58,080
and also a snapshotter or some type of

00:17:56,400 --> 00:17:59,679
node driver

00:17:58,080 --> 00:18:02,400
that will attach to each one of the

00:17:59,679 --> 00:18:02,400
worker nodes

00:18:06,720 --> 00:18:13,600
for ceph specifically the csi

00:18:10,480 --> 00:18:15,840
support matrix is online and i posted it

00:18:13,600 --> 00:18:17,280
here in the slide deck

00:18:15,840 --> 00:18:20,320
[Music]

00:18:17,280 --> 00:18:21,919
but it's pretty comprehensive but it

00:18:20,320 --> 00:18:24,000
always gets updated with

00:18:21,919 --> 00:18:25,039
with some new information so if you're

00:18:24,000 --> 00:18:27,600
curious to

00:18:25,039 --> 00:18:28,160
see what new features there are or

00:18:27,600 --> 00:18:30,960
what's

00:18:28,160 --> 00:18:32,880
what features are supported in what

00:18:30,960 --> 00:18:34,480
version of kubernetes those are

00:18:32,880 --> 00:18:36,240
supported in

00:18:34,480 --> 00:18:39,200
you can find that information out in the

00:18:36,240 --> 00:18:39,200
support matrix

00:18:40,880 --> 00:18:44,880
and that also goes with the ceph version

00:18:43,760 --> 00:18:47,520
as well

00:18:44,880 --> 00:18:50,000
uh sousa enterprise storage is on the

00:18:47,520 --> 00:18:52,000
nautilus version of ceph

00:18:50,000 --> 00:18:54,160
um so you're going to get the latest and

00:18:52,000 --> 00:18:55,520
greatest features available from a seth

00:18:54,160 --> 00:19:00,640
cluster

00:18:55,520 --> 00:19:00,640
in support of kubernetes csi driver

00:19:03,520 --> 00:19:07,760
so some of the prerequisites that you're

00:19:05,760 --> 00:19:09,520
going to want to keep in mind when you

00:19:07,760 --> 00:19:12,799
deploy

00:19:09,520 --> 00:19:14,720
seth for kubernetes the software in each

00:19:12,799 --> 00:19:18,080
kubernetes worker nodes

00:19:14,720 --> 00:19:20,960
needs to be installed so seth common

00:19:18,080 --> 00:19:21,919
and xfs progs it requires those two

00:19:20,960 --> 00:19:25,440
packages on

00:19:21,919 --> 00:19:27,919
every single worker node a kubernetes

00:19:25,440 --> 00:19:31,200
cluster must communicate directly with

00:19:27,919 --> 00:19:33,440
ceph monitors the osd nodes

00:19:31,200 --> 00:19:36,320
and any metadata nodes that are required

00:19:33,440 --> 00:19:36,320
for cfs

00:19:36,799 --> 00:19:43,360
you must have a provisioned rbd pool

00:19:41,120 --> 00:19:44,880
and you must have a provisions ffs

00:19:43,360 --> 00:19:47,919
volume

00:19:44,880 --> 00:19:52,880
so in order to begin those

00:19:47,919 --> 00:19:56,240
are the requirements

00:19:52,880 --> 00:19:58,960
now for the sep rbd setup these

00:19:56,240 --> 00:20:00,000
are six basic steps that you take to

00:19:58,960 --> 00:20:02,720
actually

00:20:00,000 --> 00:20:04,240
set this up and here's a sample rbd

00:20:02,720 --> 00:20:06,880
storage class

00:20:04,240 --> 00:20:10,480
and i'll go through and demonstrate this

00:20:06,880 --> 00:20:10,480
uh in the demonstration video

00:20:12,480 --> 00:20:17,120
there's also a quicker setup so if you

00:20:14,720 --> 00:20:20,090
like fast and easy

00:20:17,120 --> 00:20:21,440
then pay attention to using helm charts

00:20:20,090 --> 00:20:24,320
[Music]

00:20:21,440 --> 00:20:26,000
so it's really nice that most of the csi

00:20:24,320 --> 00:20:28,559
drivers actually have

00:20:26,000 --> 00:20:29,440
a great amount of helm charts available

00:20:28,559 --> 00:20:33,120
so it makes

00:20:29,440 --> 00:20:36,080
things really easily deployable

00:20:33,120 --> 00:20:38,240
just by using a values file or extending

00:20:36,080 --> 00:20:41,039
the values on the

00:20:38,240 --> 00:20:42,000
at the end of each helm install command

00:20:41,039 --> 00:20:46,320
and

00:20:42,000 --> 00:20:46,320
you can get them up and running really

00:20:46,840 --> 00:20:52,880
fast

00:20:48,880 --> 00:20:57,919
for sevfs it's equally uh

00:20:52,880 --> 00:20:57,919
as easy there's not very many steps

00:20:58,640 --> 00:21:04,559
and then of course there's also this ffs

00:21:01,440 --> 00:21:08,000
quick setup with helm charts

00:21:04,559 --> 00:21:08,000
so make it easy for yourself

00:21:09,919 --> 00:21:16,400
now some of the prerequisites for rook

00:21:13,200 --> 00:21:18,480
specifically when you set up soos

00:21:16,400 --> 00:21:19,520
enterprise storage you must at least

00:21:18,480 --> 00:21:21,840
have

00:21:19,520 --> 00:21:23,600
three worker nodes available in your

00:21:21,840 --> 00:21:25,919
kubernetes cluster

00:21:23,600 --> 00:21:27,679
and each worker node must at least have

00:21:25,919 --> 00:21:31,679
one extra disk

00:21:27,679 --> 00:21:34,080
per worker node sousa rook

00:21:31,679 --> 00:21:37,600
manifests need to be located on the

00:21:34,080 --> 00:21:37,600
kubernetes management node

00:21:38,000 --> 00:21:45,520
and the rook seth cluster

00:21:41,200 --> 00:21:49,039
setup is done on kubernetes

00:21:45,520 --> 00:21:49,760
so there's a series of yaml files that

00:21:49,039 --> 00:21:53,280
you use

00:21:49,760 --> 00:21:54,799
kube control create

00:21:53,280 --> 00:21:56,960
and that's all outlined in our

00:21:54,799 --> 00:21:59,760
documentation which i have referenced at

00:21:56,960 --> 00:22:03,520
the end of the slide deck

00:21:59,760 --> 00:22:05,039
it's a pretty simple install we also do

00:22:03,520 --> 00:22:07,679
have a helm chart

00:22:05,039 --> 00:22:09,679
so again make it easy on yourself save

00:22:07,679 --> 00:22:13,840
yourself a few steps

00:22:09,679 --> 00:22:13,840
and run the helm chart

00:22:15,280 --> 00:22:21,600
for rbd and cfs with rook

00:22:20,450 --> 00:22:23,840
[Music]

00:22:21,600 --> 00:22:25,200
it's still fairly easy it doesn't

00:22:23,840 --> 00:22:28,640
require quite as many

00:22:25,200 --> 00:22:32,080
steps as the standalone

00:22:28,640 --> 00:22:35,919
set cluster so

00:22:32,080 --> 00:22:35,919
but it's similar commands

00:22:36,159 --> 00:22:40,159
you know you'll find that all the

00:22:38,000 --> 00:22:43,120
sidecar stuff is already

00:22:40,159 --> 00:22:44,320
installed when you use rook in the seth

00:22:43,120 --> 00:22:47,840
cluster so you really

00:22:44,320 --> 00:22:51,200
just have to create your storage classes

00:22:47,840 --> 00:22:53,600
uh your pools and set up your

00:22:51,200 --> 00:22:55,039
persistent volume claim for any pods

00:22:53,600 --> 00:22:56,159
that you're creating and you're good to

00:22:55,039 --> 00:22:58,400
go

00:22:56,159 --> 00:23:00,159
it's it's pretty quick it's actually a

00:22:58,400 --> 00:23:01,200
lot quicker with rook than it is a

00:23:00,159 --> 00:23:03,679
standalone

00:23:01,200 --> 00:23:03,679
cluster

00:23:04,240 --> 00:23:10,240
so now let's move into this 10 or so

00:23:07,440 --> 00:23:12,320
minute demonstration

00:23:10,240 --> 00:23:14,640
so that you can see some of this in

00:23:12,320 --> 00:23:14,640
action

00:23:16,320 --> 00:23:19,520
i'm going to cue this up i'm going to

00:23:17,840 --> 00:23:23,840
stop sharing and then i'm going to share

00:23:19,520 --> 00:23:23,840
directly the video

00:23:38,480 --> 00:23:51,840
there it is

00:24:00,799 --> 00:24:05,840
machines um

00:24:17,039 --> 00:24:20,640
what's happened the audio is kind of

00:24:19,919 --> 00:24:23,840
muffled

00:24:20,640 --> 00:24:28,159
it sounds very uh just

00:24:23,840 --> 00:24:31,760
distortiony sounds kind of weird

00:24:28,159 --> 00:24:34,960
let me try something else

00:24:31,760 --> 00:24:34,960
to see if this works

00:24:38,400 --> 00:24:43,200
instead of sharing the computer sound

00:24:40,480 --> 00:24:43,200
i'm going to

00:24:44,720 --> 00:24:50,880
try see if this will work

00:24:47,919 --> 00:24:50,880
start that over again

00:24:57,120 --> 00:25:02,799
um now we can't hear anything oh you

00:25:00,000 --> 00:25:02,799
can't hear the call

00:25:06,980 --> 00:25:10,079
[Music]

00:25:12,840 --> 00:25:15,840
okay

00:25:17,200 --> 00:25:29,840
it's not sure

00:25:30,880 --> 00:25:43,840
bear with me while i make an adjustment

00:25:47,950 --> 00:25:51,009
[Music]

00:26:03,290 --> 00:26:06,650
[Music]

00:26:08,240 --> 00:26:12,640
it's like very muffled but also really

00:26:10,320 --> 00:26:12,640
loud

00:26:14,480 --> 00:26:18,640
is that any better um no we can't hear

00:26:17,600 --> 00:26:21,679
anything

00:26:18,640 --> 00:26:24,240
okay so i'm gonna run through this

00:26:21,679 --> 00:26:25,590
i'm gonna pause it i'll just annotate it

00:26:24,240 --> 00:26:27,200
myself

00:26:25,590 --> 00:26:29,600
[Music]

00:26:27,200 --> 00:26:31,039
as the video is playing so this

00:26:29,600 --> 00:26:34,559
particular cluster has

00:26:31,039 --> 00:26:35,840
three worker nodes with a few extra

00:26:34,559 --> 00:26:40,000
disks

00:26:35,840 --> 00:26:41,520
in the cluster and on each node

00:26:40,000 --> 00:26:43,520
so what i'm looking at here is i'm

00:26:41,520 --> 00:26:46,960
looking at all the the rook

00:26:43,520 --> 00:26:47,919
ceph name space is what i just pulled up

00:26:46,960 --> 00:26:51,919
here

00:26:47,919 --> 00:26:53,919
and you can see all the rook seth osds

00:26:51,919 --> 00:26:56,159
those are all the discs that are

00:26:53,919 --> 00:26:59,919
attached to the

00:26:56,159 --> 00:26:59,919
kubernetes rook cluster

00:27:01,200 --> 00:27:05,200
so i'm going through and looking at

00:27:02,480 --> 00:27:08,320
those and then you can see all the side

00:27:05,200 --> 00:27:11,760
cars you've got the rook discover

00:27:08,320 --> 00:27:15,200
the ceph tools rbd plug-ins

00:27:11,760 --> 00:27:21,840
cfs plug-ins all for the

00:27:15,200 --> 00:27:21,840
rook cluster

00:27:33,520 --> 00:27:37,200
and it's moving a little slow so here's

00:27:35,919 --> 00:27:39,360
our

00:27:37,200 --> 00:27:40,799
storage classes i'm using a cube control

00:27:39,360 --> 00:27:43,520
command to get those i

00:27:40,799 --> 00:27:46,320
notice how i have the rook seth block as

00:27:43,520 --> 00:27:51,600
the default storage class i also have

00:27:46,320 --> 00:27:51,600
set fs as a storage class as well

00:27:52,799 --> 00:28:03,840
and i have an nfs client in there

00:27:56,640 --> 00:28:03,840
for an nfs client storage

00:28:08,320 --> 00:28:12,880
the cluster that i set this up on was a

00:28:10,320 --> 00:28:12,880
vagrant

00:28:13,520 --> 00:28:20,240
kubernetes environment from susa

00:28:17,200 --> 00:28:23,039
here's the storage class file that was

00:28:20,240 --> 00:28:26,159
used to create the storage class

00:28:23,039 --> 00:28:27,120
i'm just showing that to you notice how

00:28:26,159 --> 00:28:31,520
it's got both

00:28:27,120 --> 00:28:34,080
these rooks fcsi and

00:28:31,520 --> 00:28:34,080
it's got

00:28:34,720 --> 00:28:41,279
the ceffs in there as well so

00:28:37,760 --> 00:28:45,120
this this one's for the rook seth block

00:28:41,279 --> 00:28:48,720
if you notice the name and metadata

00:28:45,120 --> 00:28:51,200
and the image feature has layering

00:28:48,720 --> 00:28:51,200
support

00:28:51,840 --> 00:28:55,440
that's another important thing to note

00:28:54,480 --> 00:28:59,679
there

00:28:55,440 --> 00:29:02,880
making sure you have layering enabled

00:28:59,679 --> 00:29:02,880
it's pretty straightforward

00:29:11,600 --> 00:29:14,960
another important feature that's in

00:29:13,200 --> 00:29:18,000
there is the image format

00:29:14,960 --> 00:29:20,559
where it defaults to two

00:29:18,000 --> 00:29:21,279
there are some other image formats um

00:29:20,559 --> 00:29:23,760
but those

00:29:21,279 --> 00:29:25,200
don't support like the layering feature

00:29:23,760 --> 00:29:28,000
and

00:29:25,200 --> 00:29:28,640
a few other things so you definitely

00:29:28,000 --> 00:29:41,840
want to use

00:29:28,640 --> 00:29:41,840
image format too

00:29:47,679 --> 00:29:50,799
and i've got a couple of sample

00:29:49,159 --> 00:29:53,039
applications

00:29:50,799 --> 00:29:55,840
that i'm launching here mysql the

00:29:53,039 --> 00:29:55,840
wordpress database

00:29:57,200 --> 00:30:00,640
and notice i have spec this out with a

00:29:59,679 --> 00:30:04,399
storage class

00:30:00,640 --> 00:30:09,840
with using the rook seth block as

00:30:04,399 --> 00:30:09,840
persistent storage

00:30:10,080 --> 00:30:16,000
and i'm just calling out my my

00:30:12,480 --> 00:30:16,000
persistent volume claim there

00:30:16,080 --> 00:30:23,840
for wordpress

00:30:38,880 --> 00:30:44,320
i think if there were a fast forward i

00:30:40,640 --> 00:30:44,320
would fast forward my video here

00:30:45,919 --> 00:30:50,559
i'm scrolling down a little bit um

00:30:49,919 --> 00:30:55,039
you'll see

00:30:50,559 --> 00:30:58,559
the uh the database connection

00:30:55,039 --> 00:30:59,519
uh for a mysql so this is the creation

00:30:58,559 --> 00:31:01,840
of the

00:30:59,519 --> 00:31:02,640
um the container for that and it's got

00:31:01,840 --> 00:31:04,880
the

00:31:02,640 --> 00:31:06,000
the volume there the persistent volume

00:31:04,880 --> 00:31:09,760
plane

00:31:06,000 --> 00:31:12,880
and its claim name um

00:31:09,760 --> 00:31:16,159
referring back to that uh

00:31:12,880 --> 00:31:17,919
same persistent volume claim and then

00:31:16,159 --> 00:31:20,880
the place in which it will mount it

00:31:17,919 --> 00:31:20,880
within the container

00:31:31,679 --> 00:31:35,600
so we're going to apply this workload

00:31:37,600 --> 00:31:42,880
wordpress and mysql execute those

00:31:44,840 --> 00:31:50,399
together

00:31:47,679 --> 00:31:53,120
so this is launching the workload in

00:31:50,399 --> 00:31:53,120
kubernetes

00:31:57,679 --> 00:32:01,760
and both have been created one of them

00:32:00,640 --> 00:32:04,320
came up as

00:32:01,760 --> 00:32:06,159
unchanged me because that persistent

00:32:04,320 --> 00:32:10,480
volume was already

00:32:06,159 --> 00:32:12,559
there i think from a previous test so

00:32:10,480 --> 00:32:14,159
it didn't change anything as far as that

00:32:12,559 --> 00:32:16,399
persistent volume claim that was already

00:32:14,159 --> 00:32:16,399
there

00:32:20,000 --> 00:32:26,000
and there's the uh the two kubernetes

00:32:22,880 --> 00:32:26,000
pods that were created

00:32:26,240 --> 00:32:31,279
or are creating in this case

00:32:32,799 --> 00:32:43,840
and it just takes a a minute or so to

00:32:37,840 --> 00:32:43,840
to launch those containers

00:32:47,840 --> 00:32:57,840
and there they are up and running

00:33:09,279 --> 00:33:13,039
and i'm going to use code control to

00:33:11,519 --> 00:33:17,440
exec

00:33:13,039 --> 00:33:20,799
into uh the wordpress container

00:33:17,440 --> 00:33:22,960
and from there i can show you where

00:33:20,799 --> 00:33:24,320
it's actually done the mount so i'm

00:33:22,960 --> 00:33:27,519
actually executing a command

00:33:24,320 --> 00:33:28,399
inside the container to show all the

00:33:27,519 --> 00:33:31,279
mounts

00:33:28,399 --> 00:33:32,120
that are in there and you'll notice that

00:33:31,279 --> 00:33:35,919
there's dev

00:33:32,120 --> 00:33:38,159
rbd0 on var dub dub

00:33:35,919 --> 00:33:53,840
html just kind of in the middle of the

00:33:38,159 --> 00:33:53,840
page there

00:34:01,679 --> 00:34:09,520
and this is the storage class for set fs

00:34:07,360 --> 00:34:11,200
uh notice there's there's a little bit

00:34:09,520 --> 00:34:14,560
extra stuff there

00:34:11,200 --> 00:34:17,520
that's required um

00:34:14,560 --> 00:34:20,000
as far as the secret name and the name

00:34:17,520 --> 00:34:20,000
space

00:34:20,679 --> 00:34:28,879
a few extra things it's got the

00:34:23,599 --> 00:34:28,879
the data pool that i'm attaching to

00:34:29,200 --> 00:34:34,879
so make sure that you've got plenty of

00:34:31,359 --> 00:34:38,240
storage on your pools that you create

00:34:34,879 --> 00:34:41,919
uh for both set fs

00:34:38,240 --> 00:34:45,760
and for block level storage

00:34:41,919 --> 00:34:49,839
so you can use this cluster-wide for

00:34:45,760 --> 00:34:49,839
numerous resources

00:35:11,680 --> 00:35:15,119
and here's a web server that we're going

00:35:13,760 --> 00:35:18,320
to spin up

00:35:15,119 --> 00:35:22,240
that's utilizing the storage class

00:35:18,320 --> 00:35:25,599
set fs and it's going to

00:35:22,240 --> 00:35:28,240
mount it in a specific location for that

00:35:25,599 --> 00:35:28,240
web server

00:35:28,320 --> 00:35:31,839
so this can come into hand in handy uh

00:35:30,720 --> 00:35:35,119
when you're using

00:35:31,839 --> 00:35:38,000
file share services with cfs

00:35:35,119 --> 00:35:39,920
on a web server or or other services

00:35:38,000 --> 00:35:42,400
doesn't have to be a web server

00:35:39,920 --> 00:35:42,960
but sharing these directory services

00:35:42,400 --> 00:35:46,240
amongst

00:35:42,960 --> 00:35:48,480
multiple web servers if you have some

00:35:46,240 --> 00:35:50,400
resiliency

00:35:48,480 --> 00:35:52,640
enabled in your application you might

00:35:50,400 --> 00:35:55,280
have uh

00:35:52,640 --> 00:35:56,160
you know more than one of these pods

00:35:55,280 --> 00:35:59,839
spun up

00:35:56,160 --> 00:36:03,520
mounted to the same

00:35:59,839 --> 00:36:13,839
the same storage using the

00:36:03,520 --> 00:36:13,839
the read write many option in kubernetes

00:36:15,599 --> 00:36:20,960
and it's just showing the the claim the

00:36:18,160 --> 00:36:20,960
volume claim

00:36:21,440 --> 00:36:24,720
and where it's going to be mounted

00:36:24,960 --> 00:36:40,000
and then we'll do a create so this will

00:36:28,320 --> 00:36:43,839
launch the application

00:36:40,000 --> 00:36:43,839
and it happens to be already existing

00:36:46,560 --> 00:36:51,520
apparently there's there was some

00:36:48,720 --> 00:36:51,520
cleanup missing

00:36:53,520 --> 00:36:57,280
um i think at this point we can take

00:36:55,280 --> 00:37:00,240
some questions

00:36:57,280 --> 00:37:01,040
um the rest of the demo is pretty

00:37:00,240 --> 00:37:02,400
straightforward

00:37:01,040 --> 00:37:04,800
we'll go through and show some of this

00:37:02,400 --> 00:37:06,880
it's gonna move through it pretty slow

00:37:04,800 --> 00:37:08,880
but uh let's go ahead and if you've got

00:37:06,880 --> 00:37:12,560
any questions

00:37:08,880 --> 00:37:12,560
let's post those in the chat

00:37:12,800 --> 00:37:16,560
yep and as a quick reminder uh there are

00:37:14,800 --> 00:37:18,400
three ways to ask questions you can ask

00:37:16,560 --> 00:37:23,839
questions through our chat stream the q

00:37:18,400 --> 00:37:23,839
a or raise your hand

00:37:38,960 --> 00:37:45,280
i hope this was useful for everybody um

00:37:42,800 --> 00:37:47,070
you know then you were able to get some

00:37:45,280 --> 00:37:48,839
stuff out of it

00:37:47,070 --> 00:37:51,030
[Music]

00:37:48,839 --> 00:37:52,320
um

00:37:51,030 --> 00:37:55,280
[Music]

00:37:52,320 --> 00:37:57,839
any questions coming through uh nothing

00:37:55,280 --> 00:37:57,839
just yet

00:38:02,839 --> 00:38:05,839
okay

00:38:06,240 --> 00:38:11,520
and back in the video right now he's

00:38:08,480 --> 00:38:16,160
he's doing a coup control exact he's

00:38:11,520 --> 00:38:18,320
um jumping into the container and doing

00:38:16,160 --> 00:38:20,800
a mount

00:38:18,320 --> 00:38:21,920
uh seeing where that cfs is actually

00:38:20,800 --> 00:38:24,960
mounted you'll see

00:38:21,920 --> 00:38:28,000
there's the cfs volume that's mounted

00:38:24,960 --> 00:38:28,000
notice it's got all the

00:38:28,160 --> 00:38:31,680
the kubernetes excuse me not the

00:38:30,160 --> 00:38:36,720
kubernetes the

00:38:31,680 --> 00:38:39,680
the ceph master nodes

00:38:36,720 --> 00:38:39,680
as part of the

00:38:40,720 --> 00:38:45,119
the mount for that volume so it makes it

00:38:43,760 --> 00:38:48,480
resilient when you mount

00:38:45,119 --> 00:38:48,480
a set of fest volume

00:38:52,000 --> 00:38:56,240
we have a question coming in from mike

00:38:53,760 --> 00:38:56,880
nelson mike nelson asks where can we

00:38:56,240 --> 00:38:59,520
learn more

00:38:56,880 --> 00:39:03,040
and is there a video demo on youtube or

00:38:59,520 --> 00:39:03,040
any other kind of streaming platform

00:39:03,119 --> 00:39:10,240
absolutely you can learn more at

00:39:07,079 --> 00:39:13,040
susa.com in fact

00:39:10,240 --> 00:39:14,000
let me switch directly over to the

00:39:13,040 --> 00:39:16,800
presentation

00:39:14,000 --> 00:39:18,320
i'm going to stop sharing the video um

00:39:16,800 --> 00:39:22,440
because i've got some other

00:39:18,320 --> 00:39:24,320
information in there sure is

00:39:22,440 --> 00:39:26,520
sousa.comsusc.com i can just post that

00:39:24,320 --> 00:39:29,839
on the chat

00:39:26,520 --> 00:39:29,839
s-u-s-e-com yes

00:39:30,800 --> 00:39:36,640
um and then daniel kiyonka asks uh

00:39:34,240 --> 00:39:38,000
do you need to use susa for seth and

00:39:36,640 --> 00:39:40,800
rook or does it work on other

00:39:38,000 --> 00:39:40,800
distributions

00:39:41,040 --> 00:39:45,280
um so that's a very good question and

00:39:43,680 --> 00:39:48,079
the answer is

00:39:45,280 --> 00:39:49,920
our helm charts for rook ceph actually

00:39:48,079 --> 00:39:51,760
will deploy on other kubernetes

00:39:49,920 --> 00:39:54,560
distributions

00:39:51,760 --> 00:39:57,520
but it isn't supported on other linux

00:39:54,560 --> 00:39:59,839
distributions at this time

00:39:57,520 --> 00:40:02,000
we've had many questions like that asked

00:39:59,839 --> 00:40:04,400
before

00:40:02,000 --> 00:40:06,800
and that's really just because of the

00:40:04,400 --> 00:40:09,280
way that we do q a at susa it's all done

00:40:06,800 --> 00:40:11,680
on our linux distribution

00:40:09,280 --> 00:40:13,520
um that's not to say it wouldn't work

00:40:11,680 --> 00:40:16,160
with other linux distributions that's

00:40:13,520 --> 00:40:19,599
just where our qa testing goes

00:40:16,160 --> 00:40:22,000
um so if you're certainly curious about

00:40:19,599 --> 00:40:24,400
you know some of our pricing and and you

00:40:22,000 --> 00:40:27,520
know the setup of that

00:40:24,400 --> 00:40:28,800
uh there's the documentation here that's

00:40:27,520 --> 00:40:30,000
on the screen

00:40:28,800 --> 00:40:33,160
you can use this link in the

00:40:30,000 --> 00:40:34,400
presentation um you can go to

00:40:33,160 --> 00:40:38,720
documentation.susa.com

00:40:34,400 --> 00:40:40,480
everything is is open um

00:40:38,720 --> 00:40:43,119
you know it doesn't require a username

00:40:40,480 --> 00:40:45,520
or password to look at those docs

00:40:43,119 --> 00:40:47,200
um just go out there and look at the

00:40:45,520 --> 00:40:49,280
container

00:40:47,200 --> 00:40:53,839
technical preview docs and you'll figure

00:40:49,280 --> 00:40:53,839
out how to set that up through the docs

00:40:55,920 --> 00:40:58,400
awesome

00:41:00,640 --> 00:41:03,680
great questions guys

00:41:04,839 --> 00:41:11,440
uh cameron we have about

00:41:07,599 --> 00:41:11,440
five minutes left okay

00:41:12,160 --> 00:41:15,680
any other questions uh for me uh or any

00:41:15,200 --> 00:41:18,160
of the

00:41:15,680 --> 00:41:20,960
uh the sousa technology that i talked

00:41:18,160 --> 00:41:22,800
about today anything in relation to

00:41:20,960 --> 00:41:26,079
cloud native and storage

00:41:22,800 --> 00:41:26,079
i'm happy to answer those

00:41:27,119 --> 00:41:32,560
just as a as a side note we

00:41:30,480 --> 00:41:35,359
we are working with many of our cloud

00:41:32,560 --> 00:41:37,200
providers with ceph storage today so if

00:41:35,359 --> 00:41:41,440
you're looking at

00:41:37,200 --> 00:41:44,079
ceph storage for any of the hyperscalers

00:41:41,440 --> 00:41:46,160
we have some partners that we work with

00:41:44,079 --> 00:41:48,560
where they can provide directly

00:41:46,160 --> 00:41:49,599
ceph storage clusters that are direct

00:41:48,560 --> 00:41:52,640
attached

00:41:49,599 --> 00:41:57,520
to any of our hyper scalers today uh

00:41:52,640 --> 00:42:00,800
azure google and amazon

00:41:57,520 --> 00:42:03,599
so if you're interested in providing

00:42:00,800 --> 00:42:05,599
ceph storage for any of those

00:42:03,599 --> 00:42:07,440
hyperscalers

00:42:05,599 --> 00:42:09,170
we can also provide that through some of

00:42:07,440 --> 00:42:11,359
our partners

00:42:09,170 --> 00:42:17,839
[Music]

00:42:11,359 --> 00:42:17,839
any other questions

00:42:25,680 --> 00:42:29,119
all right well thanks everybody for

00:42:27,839 --> 00:42:30,880
joining today and

00:42:29,119 --> 00:42:32,160
really appreciate your time and

00:42:30,880 --> 00:42:34,480
attention

00:42:32,160 --> 00:42:36,000
and i hope you have a a great rest of

00:42:34,480 --> 00:42:38,400
the conference

00:42:36,000 --> 00:42:39,680
and uh we'll see you we'll see you next

00:42:38,400 --> 00:42:41,839
time

00:42:39,680 --> 00:42:45,839
actually cameron before you leave um is

00:42:41,839 --> 00:42:45,839
there any social media platforms that

00:42:46,319 --> 00:42:51,040
what is that um do you have any social

00:42:48,800 --> 00:42:52,800
media platforms that you'd like to share

00:42:51,040 --> 00:42:54,319
with people just in case they think

00:42:52,800 --> 00:42:57,520
about questions after

00:42:54,319 --> 00:42:58,960
the fact sure yeah you can reach me on

00:42:57,520 --> 00:43:04,160
twitter

00:42:58,960 --> 00:43:04,160
my twitter handle is at cam cedar

00:43:04,680 --> 00:43:07,680
c-a-m-s-e-a-d-e-r

00:43:07,760 --> 00:43:14,160
all right um i posted it on chat

00:43:10,880 --> 00:43:16,260
okay you could also reach me on

00:43:14,160 --> 00:43:17,839
linkedin um

00:43:16,260 --> 00:43:21,920
[Music]

00:43:17,839 --> 00:43:27,839
my user id there is c cedar

00:43:21,920 --> 00:43:27,839
that's c s e a d e r

00:43:30,480 --> 00:43:34,480
i'm happy to respond the emails as well

00:43:32,720 --> 00:43:38,839
if you'd like

00:43:34,480 --> 00:43:41,839
my email is cs charlie sam

00:43:38,839 --> 00:43:41,839

YouTube URL: https://www.youtube.com/watch?v=09ndypKq1sM


