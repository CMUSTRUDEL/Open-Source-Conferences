Title: The Do’s and Don’t of Pull Requests and Bug Triage in Open Source Projects - Sahdev Zala
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Back-End Dev Track
Description: 
	Presented by: Sahdev Zala, IBM
Presented at All Things Open 2020 - Back-End Dev Track

Abstract: Contributing to open source projects, particularly creating new Pull Requests (PRs) and managing bugs, can be exciting and rewarding for any developers. A well maintained open source project may have specific guidelines on how to contribute, report bugs and submit pull requests, however, certain practices are accepted as the best practices across most projects; for example, addressing a pull request review comments with a new Git commit instead of the common mistake of amending a previous commit. In this talk, Sahdev Zala — Kubernetes cloud provider subproject owner, maintainer in the Cloud Native Computing Foundation (CNCF) etcd project and core reviewer in OpenStack — will provide a walkthrough of PR workflow and show what are the things you should do and equally important what not to do.
Captions: 
	00:00:05,040 --> 00:00:08,800
hello everyone uh

00:00:06,319 --> 00:00:09,599
welcome and thanks for joining me today

00:00:08,800 --> 00:00:12,080
for

00:00:09,599 --> 00:00:13,120
uh this session do's and daunt of pull

00:00:12,080 --> 00:00:16,960
request and

00:00:13,120 --> 00:00:20,560
book triage in open source projects

00:00:16,960 --> 00:00:21,680
uh my name is sadio zala and uh just a

00:00:20,560 --> 00:00:24,560
little bit about me

00:00:21,680 --> 00:00:27,199
in context of this talk uh i am an open

00:00:24,560 --> 00:00:28,800
source developer at ibm

00:00:27,199 --> 00:00:30,240
continuing contributing to different

00:00:28,800 --> 00:00:32,399
open source projects for

00:00:30,240 --> 00:00:34,480
over eight years i'm contributed to

00:00:32,399 --> 00:00:37,840
kubernetes i'm a colleague

00:00:34,480 --> 00:00:39,440
for communities ibm cloud provider and

00:00:37,840 --> 00:00:41,200
i'm also a maintainer

00:00:39,440 --> 00:00:42,800
one of the maintainer for the fcd

00:00:41,200 --> 00:00:45,520
project previously

00:00:42,800 --> 00:00:48,960
i was a significant contributor for

00:00:45,520 --> 00:00:53,440
openstack as a core reviewer

00:00:48,960 --> 00:00:56,000
and uh a technical committee member for

00:00:53,440 --> 00:00:58,079
oasis taska so in this talk i will share

00:00:56,000 --> 00:01:00,640
my experience

00:00:58,079 --> 00:01:01,440
of gits and github in working with pull

00:01:00,640 --> 00:01:04,799
requests

00:01:01,440 --> 00:01:06,400
and issue triage to help

00:01:04,799 --> 00:01:08,080
you know new contributors to get on

00:01:06,400 --> 00:01:12,640
board and

00:01:08,080 --> 00:01:15,680
learn some of the best practices

00:01:12,640 --> 00:01:16,000
um all right so i assume that uh you

00:01:15,680 --> 00:01:18,479
know

00:01:16,000 --> 00:01:19,680
you already know the gates and github to

00:01:18,479 --> 00:01:23,040
some extender list

00:01:19,680 --> 00:01:25,360
uh but real quick here um

00:01:23,040 --> 00:01:28,400
let me just cover what is a pull request

00:01:25,360 --> 00:01:31,759
and what do i mean by issue triage

00:01:28,400 --> 00:01:34,159
uh pull request in github you can

00:01:31,759 --> 00:01:35,439
you know you create a pull request uh

00:01:34,159 --> 00:01:37,520
for the changes

00:01:35,439 --> 00:01:38,960
that you would like to have merged into

00:01:37,520 --> 00:01:41,840
the base branch of the

00:01:38,960 --> 00:01:42,880
project where you know whatever whatever

00:01:41,840 --> 00:01:45,200
the open source project you are

00:01:42,880 --> 00:01:46,399
contributing to

00:01:45,200 --> 00:01:48,720
and you know it allows you to

00:01:46,399 --> 00:01:50,560
collaborate with uh other developers and

00:01:48,720 --> 00:01:53,119
the maintainers of the project

00:01:50,560 --> 00:01:54,159
uh so that they can review your changes

00:01:53,119 --> 00:01:57,280
and you know

00:01:54,159 --> 00:01:58,479
eventually they merge it if everything

00:01:57,280 --> 00:02:01,680
is good

00:01:58,479 --> 00:02:03,040
um issue triage in github

00:02:01,680 --> 00:02:04,799
issues are used for several different

00:02:03,040 --> 00:02:08,000
things so

00:02:04,799 --> 00:02:10,959
for example you know to report a bug

00:02:08,000 --> 00:02:12,640
uh to request a feature to ask a

00:02:10,959 --> 00:02:13,120
question you know people use issues for

00:02:12,640 --> 00:02:16,640
different

00:02:13,120 --> 00:02:18,480
uh different uh needs so

00:02:16,640 --> 00:02:20,239
you know down the road uh you know

00:02:18,480 --> 00:02:22,480
depending on the projects

00:02:20,239 --> 00:02:24,160
uh the size and how active the project

00:02:22,480 --> 00:02:25,599
is and down the road you can see a pile

00:02:24,160 --> 00:02:27,520
of issues if they are not

00:02:25,599 --> 00:02:29,840
managed efficiently right so that's

00:02:27,520 --> 00:02:31,519
where the triage comes in picture

00:02:29,840 --> 00:02:33,200
uh it helps to speed up the issue

00:02:31,519 --> 00:02:36,000
management and you know

00:02:33,200 --> 00:02:37,680
it's process where uh you know the

00:02:36,000 --> 00:02:40,000
triage engineers they review

00:02:37,680 --> 00:02:41,040
the issues and you know organize them so

00:02:40,000 --> 00:02:43,840
that they can be

00:02:41,040 --> 00:02:44,720
uh actionable right so some of the

00:02:43,840 --> 00:02:46,879
categories

00:02:44,720 --> 00:02:48,640
i mentioned here is you know uh

00:02:46,879 --> 00:02:50,000
identifying the issue kind right whether

00:02:48,640 --> 00:02:52,080
it's a bug

00:02:50,000 --> 00:02:54,160
or it's a feature request or it's just a

00:02:52,080 --> 00:02:56,560
support question or what kind of

00:02:54,160 --> 00:02:58,720
issue it is right what kind of

00:02:56,560 --> 00:03:01,040
priorities can be given to the issues

00:02:58,720 --> 00:03:02,959
is it like high priority or something

00:03:01,040 --> 00:03:05,519
that can weight

00:03:02,959 --> 00:03:06,000
low priority or backlogged um and then

00:03:05,519 --> 00:03:07,840
you know

00:03:06,000 --> 00:03:09,360
owns that issue right who can own the

00:03:07,840 --> 00:03:11,680
issue

00:03:09,360 --> 00:03:13,200
so put a screenshots here i'm using

00:03:11,680 --> 00:03:16,000
kubernetes as an example

00:03:13,200 --> 00:03:17,120
uh this is a spin from uh from the

00:03:16,000 --> 00:03:20,080
kubernetes github repo

00:03:17,120 --> 00:03:20,480
as you can see there's tab for issues uh

00:03:20,080 --> 00:03:22,560
with

00:03:20,480 --> 00:03:26,000
you know over 2000 issues are open there

00:03:22,560 --> 00:03:29,040
uh and then it's therefore pull request

00:03:26,000 --> 00:03:31,920
uh cuban nds has a lot of automations uh

00:03:29,040 --> 00:03:33,360
and they're uh you know heavily uh they

00:03:31,920 --> 00:03:35,200
heavily used labels so

00:03:33,360 --> 00:03:36,720
you can see uh one of the issues there

00:03:35,200 --> 00:03:39,920
with you know

00:03:36,720 --> 00:03:42,239
kind bug label with the priority there

00:03:39,920 --> 00:03:44,560
um also like which special interest

00:03:42,239 --> 00:03:45,760
group in cuban is it belongs to

00:03:44,560 --> 00:03:47,599
all right and it still says it needs

00:03:45,760 --> 00:03:48,879
triage you know once uh someone who is

00:03:47,599 --> 00:03:51,440
authority

00:03:48,879 --> 00:03:53,280
uh to accept this triage you know they

00:03:51,440 --> 00:03:56,239
can change that needs triage to

00:03:53,280 --> 00:03:58,080
triage accepted label so every project

00:03:56,239 --> 00:03:59,920
has a different way of doing things

00:03:58,080 --> 00:04:01,120
right not every open source project has

00:03:59,920 --> 00:04:04,159
the same labeling

00:04:01,120 --> 00:04:06,319
uh or same way of doing things but

00:04:04,159 --> 00:04:08,080
overall you know it's it's similar

00:04:06,319 --> 00:04:09,519
uh if there are no labels you know you

00:04:08,080 --> 00:04:11,680
can simply

00:04:09,519 --> 00:04:15,599
you know add comments in the issue as

00:04:11,680 --> 00:04:18,560
part of triaging

00:04:15,599 --> 00:04:19,840
all right so um let's talk about pull

00:04:18,560 --> 00:04:23,040
request right so

00:04:19,840 --> 00:04:24,960
before you start you know creating a

00:04:23,040 --> 00:04:28,000
pull request making change

00:04:24,960 --> 00:04:31,759
uh that as that you know you would like

00:04:28,000 --> 00:04:34,400
to make as part of fixing any issue

00:04:31,759 --> 00:04:35,199
um you know when you get clone the

00:04:34,400 --> 00:04:37,600
project

00:04:35,199 --> 00:04:39,440
and uh from the project directory if you

00:04:37,600 --> 00:04:40,320
run git branch you see that you're on

00:04:39,440 --> 00:04:42,560
master branch

00:04:40,320 --> 00:04:44,320
right so you don't want to create uh you

00:04:42,560 --> 00:04:46,400
know you don't want to modify the master

00:04:44,320 --> 00:04:48,320
branch and create a pr

00:04:46,400 --> 00:04:49,759
from there and i have some people doing

00:04:48,320 --> 00:04:53,199
that uh you know like

00:04:49,759 --> 00:04:54,320
if truly new contributors but what you

00:04:53,199 --> 00:04:55,600
should do is you know you should create

00:04:54,320 --> 00:04:58,479
a topic branch

00:04:55,600 --> 00:04:59,520
git allows you to create you know any

00:04:58,479 --> 00:05:01,680
number of branch

00:04:59,520 --> 00:05:04,479
and you can name those branch you know

00:05:01,680 --> 00:05:04,479
as you prefer

00:05:04,560 --> 00:05:08,320
and they are light weighted you work on

00:05:06,560 --> 00:05:10,240
that branch you know for a particular

00:05:08,320 --> 00:05:12,080
issue for a particular fix and then

00:05:10,240 --> 00:05:13,440
you know you can delete those branch

00:05:12,080 --> 00:05:15,919
eventually

00:05:13,440 --> 00:05:17,360
so two things right one is to create the

00:05:15,919 --> 00:05:19,280
branch and then check out

00:05:17,360 --> 00:05:21,680
um or you can do both steps in one

00:05:19,280 --> 00:05:23,520
command like git checkout dash b

00:05:21,680 --> 00:05:25,360
and then the name of the branch like i

00:05:23,520 --> 00:05:27,919
said you can give the name

00:05:25,360 --> 00:05:28,880
as you prefer can be a name of the issue

00:05:27,919 --> 00:05:31,199
you are working on

00:05:28,880 --> 00:05:32,080
or it can be something else like you

00:05:31,199 --> 00:05:35,280
know fix

00:05:32,080 --> 00:05:36,560
auth or you know other things as you

00:05:35,280 --> 00:05:38,720
prefer

00:05:36,560 --> 00:05:40,560
but after that if you run git branch you

00:05:38,720 --> 00:05:41,680
will see that you are into this new

00:05:40,560 --> 00:05:43,840
branch you created right

00:05:41,680 --> 00:05:45,120
so that's where you wanna make uh

00:05:43,840 --> 00:05:47,520
changes and

00:05:45,120 --> 00:05:50,080
uh eventually you know push that changes

00:05:47,520 --> 00:05:52,080
as part of your pr

00:05:50,080 --> 00:05:53,600
this allows you to work on multiple pr's

00:05:52,080 --> 00:05:56,960
uh in you know different

00:05:53,600 --> 00:05:59,039
branch uh and uh you know you should be

00:05:56,960 --> 00:06:02,240
using your master brand just to keep

00:05:59,039 --> 00:06:03,919
uh it synced with the uh upstream

00:06:02,240 --> 00:06:05,280
master branch right you know depending

00:06:03,919 --> 00:06:07,039
on the uh

00:06:05,280 --> 00:06:09,120
project activities i mean maybe every

00:06:07,039 --> 00:06:11,120
hour maybe you know

00:06:09,120 --> 00:06:13,120
every day there will be some changes in

00:06:11,120 --> 00:06:13,919
the upstream more codes will be merged

00:06:13,120 --> 00:06:15,840
there right

00:06:13,919 --> 00:06:20,319
so you want to keep your master branch

00:06:15,840 --> 00:06:24,080
in sync with those changes

00:06:20,319 --> 00:06:26,000
all right um so uh you know you have

00:06:24,080 --> 00:06:28,319
your topic bunch created and you are

00:06:26,000 --> 00:06:29,680
you know ready to work on changes you

00:06:28,319 --> 00:06:31,919
made some changes and

00:06:29,680 --> 00:06:33,280
you are ready to push those changes to

00:06:31,919 --> 00:06:36,720
the upstream

00:06:33,280 --> 00:06:37,280
um you would take care of a few things

00:06:36,720 --> 00:06:40,240
there

00:06:37,280 --> 00:06:41,039
before you push you know uh the first

00:06:40,240 --> 00:06:44,000
thing is

00:06:41,039 --> 00:06:44,319
uh you know create a good commit message

00:06:44,000 --> 00:06:46,400
right

00:06:44,319 --> 00:06:47,840
typically it's a one-liner title like a

00:06:46,400 --> 00:06:50,479
short one-liner

00:06:47,840 --> 00:06:51,360
about the changes followed by a little

00:06:50,479 --> 00:06:54,080
bit details

00:06:51,360 --> 00:06:55,360
in the body of the commit message and

00:06:54,080 --> 00:06:58,960
then if you are working on

00:06:55,360 --> 00:07:00,960
a specific issue then also mention

00:06:58,960 --> 00:07:02,800
uh the number of that issue there um i

00:07:00,960 --> 00:07:03,680
was just giving here like an example of

00:07:02,800 --> 00:07:07,039
one of the

00:07:03,680 --> 00:07:09,199
commit message there um you know this

00:07:07,039 --> 00:07:11,440
helps the reviewers right once you push

00:07:09,199 --> 00:07:13,039
it uh they can look at this and

00:07:11,440 --> 00:07:15,520
you know that helps them to get some

00:07:13,039 --> 00:07:19,280
idea about uh the pr you know without

00:07:15,520 --> 00:07:19,280
even looking at the actual changes

00:07:19,520 --> 00:07:23,520
um second thing is don't push without

00:07:22,080 --> 00:07:26,880
making sure that you run

00:07:23,520 --> 00:07:29,759
all the recommended uh tests right so

00:07:26,880 --> 00:07:30,240
you know all the open source projects

00:07:29,759 --> 00:07:32,400
you know

00:07:30,240 --> 00:07:34,400
they should have uh some sort of test

00:07:32,400 --> 00:07:36,800
set you need testing

00:07:34,400 --> 00:07:37,680
uh or for formatting testing uh you know

00:07:36,800 --> 00:07:40,160
that kind of things

00:07:37,680 --> 00:07:41,520
so uh make sure that you run those in

00:07:40,160 --> 00:07:44,479
your local environment

00:07:41,520 --> 00:07:46,240
uh before you push it and the third

00:07:44,479 --> 00:07:49,120
thing is

00:07:46,240 --> 00:07:51,919
if you're adding something new like you

00:07:49,120 --> 00:07:54,000
added a new function for example right

00:07:51,919 --> 00:07:57,039
some utility function then make sure you

00:07:54,000 --> 00:07:59,199
also create a test for that

00:07:57,039 --> 00:08:00,319
uh this helps speed up the review

00:07:59,199 --> 00:08:02,560
process uh

00:08:00,319 --> 00:08:04,160
and uh you know every time you create a

00:08:02,560 --> 00:08:06,639
pr there is uh

00:08:04,160 --> 00:08:07,520
build processes the build resources they

00:08:06,639 --> 00:08:09,840
run in the

00:08:07,520 --> 00:08:11,520
background right to to to do all this

00:08:09,840 --> 00:08:13,440
testing

00:08:11,520 --> 00:08:14,879
so you are you know utilizing those

00:08:13,440 --> 00:08:16,720
resources uh

00:08:14,879 --> 00:08:17,919
in a better way because you have already

00:08:16,720 --> 00:08:19,840
tested it

00:08:17,919 --> 00:08:22,720
and you're giving the reviewers good way

00:08:19,840 --> 00:08:22,720
to review the pr

00:08:23,120 --> 00:08:26,960
um you know this is another topic has

00:08:24,800 --> 00:08:27,599
seen uh been discussed in different

00:08:26,960 --> 00:08:30,319
projects

00:08:27,599 --> 00:08:33,039
you know time to time that uh you know

00:08:30,319 --> 00:08:35,039
sometimes people try to create uh

00:08:33,039 --> 00:08:36,320
separate priors for every little things

00:08:35,039 --> 00:08:37,919
right

00:08:36,320 --> 00:08:39,039
like you know you're a new contributor

00:08:37,919 --> 00:08:41,039
you're looking at the documentation of

00:08:39,039 --> 00:08:43,360
the project and you run into

00:08:41,039 --> 00:08:44,159
you know some some broken links some

00:08:43,360 --> 00:08:46,080
typos

00:08:44,159 --> 00:08:47,680
you know or sometimes even like looking

00:08:46,080 --> 00:08:50,240
at the code you have seen

00:08:47,680 --> 00:08:50,880
you know uh like like a particular piece

00:08:50,240 --> 00:08:52,880
of code

00:08:50,880 --> 00:08:55,120
which is same in different files right

00:08:52,880 --> 00:08:56,800
like a one if loop for example

00:08:55,120 --> 00:08:58,240
and then creating a different uh pull

00:08:56,800 --> 00:09:01,680
request for you know each

00:08:58,240 --> 00:09:03,920
small fixes you know uh do not do that

00:09:01,680 --> 00:09:05,200
try to combine everything into one and

00:09:03,920 --> 00:09:07,120
and then push it right

00:09:05,200 --> 00:09:08,240
um that doesn't mean that you know if

00:09:07,120 --> 00:09:10,880
you only run into one

00:09:08,240 --> 00:09:12,320
broken link uh and you don't create a pr

00:09:10,880 --> 00:09:12,880
because that's just one small change

00:09:12,320 --> 00:09:14,720
right

00:09:12,880 --> 00:09:16,320
every kind of improvements is good for

00:09:14,720 --> 00:09:18,320
the project but

00:09:16,320 --> 00:09:20,480
uh you know you don't want to create

00:09:18,320 --> 00:09:22,080
separate things uh

00:09:20,480 --> 00:09:23,839
knowing that you can combine them you

00:09:22,080 --> 00:09:25,440
know at the time and this helps you know

00:09:23,839 --> 00:09:26,240
to gain the trust in the community

00:09:25,440 --> 00:09:28,080
people know

00:09:26,240 --> 00:09:29,440
that you're not playing a number game

00:09:28,080 --> 00:09:31,360
you know not just trying to increase

00:09:29,440 --> 00:09:34,000
your number of prs

00:09:31,360 --> 00:09:36,959
uh and again you are using the resources

00:09:34,000 --> 00:09:38,959
in a better way

00:09:36,959 --> 00:09:40,080
all right so a little bit contradictory

00:09:38,959 --> 00:09:42,800
to my previous

00:09:40,080 --> 00:09:43,440
uh slide you know uh what if you're

00:09:42,800 --> 00:09:45,440
working on

00:09:43,440 --> 00:09:47,600
something big right some substantial

00:09:45,440 --> 00:09:49,760
changes into the existing code

00:09:47,600 --> 00:09:50,959
uh or you know you're adding a new

00:09:49,760 --> 00:09:53,600
features with

00:09:50,959 --> 00:09:55,200
lots of lines of code in that case you

00:09:53,600 --> 00:09:58,800
know try to break it down

00:09:55,200 --> 00:10:00,560
into multiple pr's uh if you cannot do

00:09:58,800 --> 00:10:01,920
that you know independent uh separate

00:10:00,560 --> 00:10:05,040
prs that can run on

00:10:01,920 --> 00:10:06,560
their own and pass the test you can

00:10:05,040 --> 00:10:08,800
create multiple commits right

00:10:06,560 --> 00:10:09,839
so that helps the reviewers because if

00:10:08,800 --> 00:10:12,560
it's a huge

00:10:09,839 --> 00:10:14,399
change then it's hard to review the

00:10:12,560 --> 00:10:17,200
different commits can help them

00:10:14,399 --> 00:10:18,880
review it in more efficiently and second

00:10:17,200 --> 00:10:22,000
thing is if you're fixing something

00:10:18,880 --> 00:10:24,880
uh and and you see some other problems

00:10:22,000 --> 00:10:27,360
then you know don't try to fix different

00:10:24,880 --> 00:10:29,279
things of different contacts into one pr

00:10:27,360 --> 00:10:31,120
because that again also confuse the

00:10:29,279 --> 00:10:34,160
reviewers

00:10:31,120 --> 00:10:36,160
um so by you know breaking it down uh

00:10:34,160 --> 00:10:38,000
you help reviewers to review uh more

00:10:36,160 --> 00:10:39,920
efficiently

00:10:38,000 --> 00:10:41,440
all right third thing so let's say you

00:10:39,920 --> 00:10:43,120
have your branch ready you

00:10:41,440 --> 00:10:44,480
you made changes you pushed it

00:10:43,120 --> 00:10:46,320
everything is good now you get some

00:10:44,480 --> 00:10:47,920
review comments right

00:10:46,320 --> 00:10:49,839
um you know once you get the review

00:10:47,920 --> 00:10:51,600
comments please do not close

00:10:49,839 --> 00:10:53,040
the pr and create a new one i have seen

00:10:51,600 --> 00:10:54,800
people doing it and

00:10:53,040 --> 00:10:56,079
that's not the right thing to do because

00:10:54,800 --> 00:10:58,160
then you know reviewers

00:10:56,079 --> 00:11:00,800
will need to start everything you know

00:10:58,160 --> 00:11:03,440
from scratch with the new pr right

00:11:00,800 --> 00:11:04,240
um ins instead of that you know use the

00:11:03,440 --> 00:11:07,519
same pr

00:11:04,240 --> 00:11:07,920
to address the comments right um if it's

00:11:07,519 --> 00:11:10,079
a

00:11:07,920 --> 00:11:11,279
again if it's not a trivial pr then

00:11:10,079 --> 00:11:13,360
create a new commit

00:11:11,279 --> 00:11:14,720
uh to address the review comments and so

00:11:13,360 --> 00:11:17,760
that the reviewers can

00:11:14,720 --> 00:11:19,279
uh you know get the good idea you know

00:11:17,760 --> 00:11:19,600
they can compare the two comments and

00:11:19,279 --> 00:11:21,440
see

00:11:19,600 --> 00:11:23,680
what kind of changes you made addressing

00:11:21,440 --> 00:11:25,120
their comments and you know eventually

00:11:23,680 --> 00:11:27,040
the viewers see that everything looks

00:11:25,120 --> 00:11:29,200
good they will ask you to squash

00:11:27,040 --> 00:11:30,800
so you use the git provisions cost them

00:11:29,200 --> 00:11:33,760
into one

00:11:30,800 --> 00:11:34,560
so you know instead of amending your

00:11:33,760 --> 00:11:36,880
commit

00:11:34,560 --> 00:11:37,839
you create a new commit squash it at the

00:11:36,880 --> 00:11:39,600
end and you know

00:11:37,839 --> 00:11:42,640
one last thing i would mention here is

00:11:39,600 --> 00:11:44,480
do not abandon the pr right um

00:11:42,640 --> 00:11:46,079
some people or some kind of viewers are

00:11:44,480 --> 00:11:47,600
like oh they

00:11:46,079 --> 00:11:49,760
think the comments that's something they

00:11:47,600 --> 00:11:51,760
cannot address or they don't have time

00:11:49,760 --> 00:11:53,600
anymore they just don't reply you know

00:11:51,760 --> 00:11:56,240
um idea you should reply

00:11:53,600 --> 00:11:57,360
and tell the maintainers reviewers that

00:11:56,240 --> 00:12:01,519
you know

00:11:57,360 --> 00:12:01,519
help out or assign it to someone else

00:12:01,600 --> 00:12:05,440
all right the merch complete that's

00:12:03,920 --> 00:12:07,920
another thing right you know you

00:12:05,440 --> 00:12:10,079
you worked hard you changed some files

00:12:07,920 --> 00:12:12,959
you know and then you pushed it and

00:12:10,079 --> 00:12:14,000
then you see this message there's a

00:12:12,959 --> 00:12:15,920
conflict

00:12:14,000 --> 00:12:18,399
and that can be you know disappointing

00:12:15,920 --> 00:12:21,120
things for as a new contributor

00:12:18,399 --> 00:12:23,040
uh but don't you know it's easy to fix

00:12:21,120 --> 00:12:24,959
the conflict so do not close the pr and

00:12:23,040 --> 00:12:26,959
create new one you know many times the

00:12:24,959 --> 00:12:29,279
contributor think it's a good idea to

00:12:26,959 --> 00:12:30,560
make uh or you know create a new clean

00:12:29,279 --> 00:12:33,120
pr don't do that

00:12:30,560 --> 00:12:35,440
you know use the same pr uh make sure

00:12:33,120 --> 00:12:38,320
your master branch is in sync with the

00:12:35,440 --> 00:12:39,440
uh the latest upstream right you you you

00:12:38,320 --> 00:12:41,440
fetch the

00:12:39,440 --> 00:12:42,480
upstream code merge it into your master

00:12:41,440 --> 00:12:44,959
local master

00:12:42,480 --> 00:12:46,480
and and then in your topic branch where

00:12:44,959 --> 00:12:48,560
you're working the issues

00:12:46,480 --> 00:12:50,399
you are you know you just rebase it

00:12:48,560 --> 00:12:52,880
there and then push the

00:12:50,399 --> 00:12:54,320
updates so that way uh you know the

00:12:52,880 --> 00:12:57,360
conflicts are resolved

00:12:54,320 --> 00:13:00,560
properly um

00:12:57,360 --> 00:13:02,720
all right um so

00:13:00,560 --> 00:13:03,600
next thing uh just to meet on triaging

00:13:02,720 --> 00:13:06,399
issues um

00:13:03,600 --> 00:13:08,000
considering the time let me tell you how

00:13:06,399 --> 00:13:09,360
i'm going a little bit faster but you

00:13:08,000 --> 00:13:12,000
know please ask me questions

00:13:09,360 --> 00:13:12,399
uh at the end or you know reach out to

00:13:12,000 --> 00:13:15,519
me

00:13:12,399 --> 00:13:17,920
on my twitter with the dm

00:13:15,519 --> 00:13:18,639
if you cannot have uh time to you know

00:13:17,920 --> 00:13:21,200
have more

00:13:18,639 --> 00:13:23,120
q a at the end but anyway so triaging

00:13:21,200 --> 00:13:24,160
issues uh like i said triaging is

00:13:23,120 --> 00:13:27,040
important you know

00:13:24,160 --> 00:13:27,920
uh especially when you see a lot of

00:13:27,040 --> 00:13:29,440
issues out there

00:13:27,920 --> 00:13:31,200
i don't you don't definitely want to

00:13:29,440 --> 00:13:33,519
pile them up

00:13:31,200 --> 00:13:35,440
so participate in the triaging it you

00:13:33,519 --> 00:13:38,000
know you may not find it

00:13:35,440 --> 00:13:39,199
exciting as you know as exciting as

00:13:38,000 --> 00:13:42,079
changing the code

00:13:39,199 --> 00:13:42,959
but this is important uh you know and

00:13:42,079 --> 00:13:46,160
and the second thing is

00:13:42,959 --> 00:13:47,519
follow the triage processes right

00:13:46,160 --> 00:13:49,360
the project should have some triage

00:13:47,519 --> 00:13:50,480
guidelines if not there are none you

00:13:49,360 --> 00:13:53,199
know you should uh

00:13:50,480 --> 00:13:54,480
propose one but the guideline should

00:13:53,199 --> 00:13:56,959
clearly state about

00:13:54,480 --> 00:13:57,839
uh you know the priorities based on the

00:13:56,959 --> 00:14:01,040
issues

00:13:57,839 --> 00:14:03,040
uh when to close the issue right who

00:14:01,040 --> 00:14:04,800
should own the issue

00:14:03,040 --> 00:14:06,720
uh you know home to the for whom to

00:14:04,800 --> 00:14:08,320
forward the issue and if there are

00:14:06,720 --> 00:14:10,079
separate questions how to handle those

00:14:08,320 --> 00:14:10,399
questions like in kubernetes there are

00:14:10,079 --> 00:14:13,680
uh

00:14:10,399 --> 00:14:14,079
stack overflow uh answer wall sites

00:14:13,680 --> 00:14:16,399
where

00:14:14,079 --> 00:14:17,839
they prefer to ask questions there so

00:14:16,399 --> 00:14:20,959
you know those kind of questions

00:14:17,839 --> 00:14:24,320
um are recommended to close and you know

00:14:20,959 --> 00:14:25,839
uh have a reporter to look at the uh

00:14:24,320 --> 00:14:28,720
the the actual sites where they can

00:14:25,839 --> 00:14:30,560
easily find the answers or ask questions

00:14:28,720 --> 00:14:31,760
um this actually gives you good

00:14:30,560 --> 00:14:33,920
visibility uh

00:14:31,760 --> 00:14:34,800
across the community and i've you know

00:14:33,920 --> 00:14:36,240
when i

00:14:34,800 --> 00:14:37,440
i always found it a good learning

00:14:36,240 --> 00:14:39,199
opportunities as well because you're

00:14:37,440 --> 00:14:39,680
looking at the different areas of the

00:14:39,199 --> 00:14:43,199
project

00:14:39,680 --> 00:14:44,079
so that helps you to learn a different

00:14:43,199 --> 00:14:46,959
part of the project

00:14:44,079 --> 00:14:49,440
right you're looking at the issue you

00:14:46,959 --> 00:14:52,560
you try to reproduce it

00:14:49,440 --> 00:14:55,839
and you know if it's bug you say

00:14:52,560 --> 00:14:57,440
so right and if even if you think you

00:14:55,839 --> 00:15:00,320
can fix it you provide a fix

00:14:57,440 --> 00:15:01,519
as well but it can be a really good

00:15:00,320 --> 00:15:04,880
learning

00:15:01,519 --> 00:15:08,000
uh personally um and the one last thing

00:15:04,880 --> 00:15:10,000
i would like to mention is uh you know

00:15:08,000 --> 00:15:13,360
when you work with open source project

00:15:10,000 --> 00:15:14,880
any project if you're using the project

00:15:13,360 --> 00:15:17,199
you know make sure you also contribute

00:15:14,880 --> 00:15:20,560
back right

00:15:17,199 --> 00:15:21,199
you know i met people in time to time at

00:15:20,560 --> 00:15:23,279
different

00:15:21,199 --> 00:15:24,240
conferences i'm like oh we are using

00:15:23,279 --> 00:15:26,959
this project

00:15:24,240 --> 00:15:28,560
uh it's great you know we run into some

00:15:26,959 --> 00:15:30,800
issues we fixed it

00:15:28,560 --> 00:15:32,399
in our local environment and everything

00:15:30,800 --> 00:15:35,120
is good but you know

00:15:32,399 --> 00:15:36,639
if you find some issues if you fixing it

00:15:35,120 --> 00:15:38,959
locally you know try to

00:15:36,639 --> 00:15:40,639
um you know create a pull request and

00:15:38,959 --> 00:15:41,519
you know try to make the project better

00:15:40,639 --> 00:15:43,199
right or

00:15:41,519 --> 00:15:45,440
if you don't have the time bandwidth

00:15:43,199 --> 00:15:47,600
then at least report the issue

00:15:45,440 --> 00:15:49,199
um contribute any way you can so that

00:15:47,600 --> 00:15:51,199
way you make the project better

00:15:49,199 --> 00:15:52,480
and you know by making project better

00:15:51,199 --> 00:15:55,279
you actually helping

00:15:52,480 --> 00:15:58,160
um yourself as an user as well and

00:15:55,279 --> 00:15:58,160
that's the right thing to do

00:15:58,240 --> 00:16:01,680
all right i think we are at the time

00:15:59,759 --> 00:16:04,800
limit so thank you so much

00:16:01,680 --> 00:16:08,000
if you any questions please reach out uh

00:16:04,800 --> 00:16:15,920
to me and we can uh you know we can

00:16:08,000 --> 00:16:15,920

YouTube URL: https://www.youtube.com/watch?v=iz-HTUpzLwA


