Title: How to Build a Unified GraphQL API - Shruti Kapoor
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Back-End Dev Track
Description: 
	Presented by: Shruti Kapoor, PayPal
Presented at All Things Open 2020 - Back-End Dev Track

Abstract: GraphQL is an open source query language for APIs. It allows clients to request a structure of data, and get an exact representation of that structure back without any extra data. This helps to prevent sending excessive payloads of data to the client. This feature of GraphQL makes it a lucrative option for implementing a unified API that integrates two or more downstream GraphQL or non-GraphQL APIs. In cases where a client may need to interface with an enterpriseâ€™s API, a unified GraphQL API can provide a single endpoint that abstracts away any unnecessary data yet curates results from multiple APIs, thereby making it easy to evolve multiple APIs over time. 

In this talk, I will be talking about the motivation behind creating a unified GraphQL API and show an example of how to create a unified GraphQL API with Hasura.
Captions: 
	00:00:04,960 --> 00:00:08,240
hello everyone

00:00:06,000 --> 00:00:09,760
thank you so much for your patience and

00:00:08,240 --> 00:00:11,280
for sticking around

00:00:09,760 --> 00:00:12,880
i know we're having some technical

00:00:11,280 --> 00:00:14,639
difficulties but

00:00:12,880 --> 00:00:16,800
what is a virtual conference without a

00:00:14,639 --> 00:00:18,880
technical difficulty right

00:00:16,800 --> 00:00:21,039
so i'm going to get started i'm going to

00:00:18,880 --> 00:00:22,400
be talking about unified api with

00:00:21,039 --> 00:00:24,800
graphql

00:00:22,400 --> 00:00:25,760
and in this talk i will be talking about

00:00:24,800 --> 00:00:28,800
how to create

00:00:25,760 --> 00:00:30,080
a unified experience that surfaces a

00:00:28,800 --> 00:00:32,079
graphql endpoint

00:00:30,080 --> 00:00:34,960
that can be developed selectively by

00:00:32,079 --> 00:00:38,000
combining two or more downstream apis

00:00:34,960 --> 00:00:41,600
and these apis can be rest or graphql

00:00:38,000 --> 00:00:43,120
or even a database so first a little bit

00:00:41,600 --> 00:00:45,600
of introduction about me

00:00:43,120 --> 00:00:48,000
i'm shruti kapoor i am a senior software

00:00:45,600 --> 00:00:50,640
engineer at paper

00:00:48,000 --> 00:00:52,879
and i love building user experiences

00:00:50,640 --> 00:00:55,840
with react and graphql that solve

00:00:52,879 --> 00:00:59,280
technical problems and make financial

00:00:55,840 --> 00:01:01,680
lives of people easier at paypal

00:00:59,280 --> 00:01:02,719
if there's anything else that i like

00:01:01,680 --> 00:01:06,479
more than

00:01:02,719 --> 00:01:09,600
react and graphql in javascript it is

00:01:06,479 --> 00:01:14,000
def jokes so i'm going to be asking you

00:01:09,600 --> 00:01:19,280
questions and if you can see the chat

00:01:14,000 --> 00:01:19,280
reply hi so i know you are there

00:01:20,720 --> 00:01:27,840
i'm going to open my chat here

00:01:35,360 --> 00:01:40,560
hello pamela hi sunny and zachary all

00:01:40,079 --> 00:01:43,520
right

00:01:40,560 --> 00:01:44,159
so i'm going to ask you questions and

00:01:43,520 --> 00:01:47,759
you can

00:01:44,159 --> 00:01:50,079
say the answer in chat and before the

00:01:47,759 --> 00:01:52,799
question i have a hint for you

00:01:50,079 --> 00:01:55,040
go check out twitter at srikapur008 if

00:01:52,799 --> 00:01:57,840
you need answers

00:01:55,040 --> 00:01:58,560
so the first question how are computers

00:01:57,840 --> 00:02:01,920
and ac

00:01:58,560 --> 00:02:03,600
similar and i'll give you like

00:02:01,920 --> 00:02:05,439
maybe five minutes five seconds to

00:02:03,600 --> 00:02:05,840
answer you can put the answer in the

00:02:05,439 --> 00:02:09,840
chat

00:02:05,840 --> 00:02:09,840
whatever you think

00:02:10,720 --> 00:02:16,000
so how are computers and ac similar both

00:02:13,680 --> 00:02:19,360
break when you need them most

00:02:16,000 --> 00:02:22,640
oh well i'm so sorry for you sorry

00:02:19,360 --> 00:02:27,920
both run cold both have a fan

00:02:22,640 --> 00:02:27,920
that's true anybody else

00:02:34,239 --> 00:02:37,840
you could also check twitter

00:02:41,120 --> 00:02:45,680
they're both useless when you open

00:02:43,040 --> 00:02:45,680
windows

00:02:46,800 --> 00:02:52,480
okay next one why would the javascript

00:02:49,680 --> 00:02:52,480
developer leave

00:03:00,239 --> 00:03:05,840
why did the javascript developer leave

00:03:18,159 --> 00:03:20,879
any ideas

00:03:23,360 --> 00:03:27,360
because they didn't get a raise

00:03:29,760 --> 00:03:35,760
okay next question what does a

00:03:32,480 --> 00:03:35,760
programmer inherit

00:03:43,519 --> 00:03:47,840
class oh nice i like that

00:03:51,519 --> 00:03:54,000
what else

00:03:56,480 --> 00:04:02,560
take that that's correct

00:03:59,760 --> 00:04:05,360
you are the winner um i don't know how

00:04:02,560 --> 00:04:05,360
to say your name

00:04:06,240 --> 00:04:11,360
[Music]

00:04:08,000 --> 00:04:14,080
must rule all right you are the winner

00:04:11,360 --> 00:04:14,959
okay so if you're interested in more dev

00:04:14,080 --> 00:04:18,479
jokes

00:04:14,959 --> 00:04:22,240
you can go to github repository

00:04:18,479 --> 00:04:25,280
sritika pooja slash tag joke or

00:04:22,240 --> 00:04:29,120
you can also follow me on twitter

00:04:25,280 --> 00:04:32,400
where i also tweet javascript tips

00:04:29,120 --> 00:04:32,400
in addition to dev jokes

00:04:34,160 --> 00:04:39,680
but let's get started today so i'm going

00:04:37,120 --> 00:04:41,280
to be talking about unified api

00:04:39,680 --> 00:04:43,520
and the talk is mainly going to be

00:04:41,280 --> 00:04:46,080
divided into three main topics

00:04:43,520 --> 00:04:48,560
i'll talk about what is it unified api

00:04:46,080 --> 00:04:50,960
by unified api with graphql

00:04:48,560 --> 00:04:52,639
and then i'll show you a demo of how to

00:04:50,960 --> 00:04:55,440
build a unified api

00:04:52,639 --> 00:04:58,479
uh using husura and i'll combine a rest

00:04:55,440 --> 00:05:02,240
api and a graphql api

00:04:58,479 --> 00:05:04,639
so what is a unified api and why

00:05:02,240 --> 00:05:06,479
this concept so this concept actually

00:05:04,639 --> 00:05:07,120
came to my mind on a very typical

00:05:06,479 --> 00:05:10,400
saturday

00:05:07,120 --> 00:05:12,800
during the pandemic um when

00:05:10,400 --> 00:05:13,440
on a typical saturday how we spend it

00:05:12,800 --> 00:05:16,240
these days

00:05:13,440 --> 00:05:18,000
is by going grocery shopping so i was

00:05:16,240 --> 00:05:19,840
supposed to go grocery shopping and all

00:05:18,000 --> 00:05:23,280
the items that we need

00:05:19,840 --> 00:05:26,080
are things like food clothes

00:05:23,280 --> 00:05:26,720
video games some electrical supplies

00:05:26,080 --> 00:05:28,880
padding

00:05:26,720 --> 00:05:31,680
stationary supplies home decor and

00:05:28,880 --> 00:05:34,720
beauty supplies

00:05:31,680 --> 00:05:36,880
um now each of those items

00:05:34,720 --> 00:05:38,160
can be stored can be bought from a

00:05:36,880 --> 00:05:40,560
different store

00:05:38,160 --> 00:05:42,320
so some stores specialize for example in

00:05:40,560 --> 00:05:45,520
food like trader joe's

00:05:42,320 --> 00:05:47,039
light bulbs like home depot video games

00:05:45,520 --> 00:05:50,960
like best buy

00:05:47,039 --> 00:05:54,080
clothes h m beauty supplies and so on

00:05:50,960 --> 00:05:56,720
so in order to buy all of these things

00:05:54,080 --> 00:05:59,039
what i'll have to do is i'll have to go

00:05:56,720 --> 00:06:01,280
to each of those items separately

00:05:59,039 --> 00:06:02,960
so first i'll start with trader joe's

00:06:01,280 --> 00:06:04,960
i'll go to bed bath and beyond

00:06:02,960 --> 00:06:06,240
i'll prioritize my list my grocery

00:06:04,960 --> 00:06:08,319
shopping list

00:06:06,240 --> 00:06:09,919
and then i'll maybe go to home depot and

00:06:08,319 --> 00:06:13,360
go to office depot

00:06:09,919 --> 00:06:14,880
and so on so if i was to

00:06:13,360 --> 00:06:17,440
optimize this a little bit what i could

00:06:14,880 --> 00:06:17,919
also do is instead of going to all of

00:06:17,440 --> 00:06:20,080
these

00:06:17,919 --> 00:06:21,280
items first going to trader joe's and

00:06:20,080 --> 00:06:22,080
then coming back home and then going to

00:06:21,280 --> 00:06:24,240
bed bath and

00:06:22,080 --> 00:06:26,160
then coming back home i could instead go

00:06:24,240 --> 00:06:27,840
to a parking lot and see what

00:06:26,160 --> 00:06:29,360
uh stores are available there and go

00:06:27,840 --> 00:06:30,560
check out those stores so i could

00:06:29,360 --> 00:06:34,880
optimize

00:06:30,560 --> 00:06:38,400
my my grocery shopping a little bit

00:06:34,880 --> 00:06:40,560
but that's still a lot of trips to make

00:06:38,400 --> 00:06:42,639
and that's basically what working in an

00:06:40,560 --> 00:06:44,800
enterprise is like

00:06:42,639 --> 00:06:47,360
every single day we have to interact

00:06:44,800 --> 00:06:50,000
with so many different apis

00:06:47,360 --> 00:06:51,280
and sometimes they might be sharing

00:06:50,000 --> 00:06:55,440
common data

00:06:51,280 --> 00:06:58,400
so for example um

00:06:55,440 --> 00:06:59,840
home depot sells light bulbs and sells

00:06:58,400 --> 00:07:02,639
maybe some stationary

00:06:59,840 --> 00:07:04,560
but also office depot would sell light

00:07:02,639 --> 00:07:08,160
bulbs and some stationery

00:07:04,560 --> 00:07:10,240
so instead of going to home depot for

00:07:08,160 --> 00:07:12,080
light bulbs why don't i just go to

00:07:10,240 --> 00:07:14,000
office depot and get my light bulbs

00:07:12,080 --> 00:07:16,479
there plus get my station there

00:07:14,000 --> 00:07:18,960
so this way some stores are actually

00:07:16,479 --> 00:07:21,440
sharing some common data

00:07:18,960 --> 00:07:23,360
and that's how our apis are as well some

00:07:21,440 --> 00:07:24,080
apis are sharing common data some of

00:07:23,360 --> 00:07:26,560
them may be

00:07:24,080 --> 00:07:29,440
asking for similar parameters but then

00:07:26,560 --> 00:07:31,759
as a client interacting with those apis

00:07:29,440 --> 00:07:33,120
those downstream apis i have to read all

00:07:31,759 --> 00:07:35,120
of their documentation

00:07:33,120 --> 00:07:37,759
i have to integrate with all of them

00:07:35,120 --> 00:07:37,759
separately

00:07:37,840 --> 00:07:41,120
and to demonstrate this example a little

00:07:39,840 --> 00:07:43,199
bit further

00:07:41,120 --> 00:07:46,240
let's actually build a fictional

00:07:43,199 --> 00:07:46,240
cosplaying product

00:07:46,639 --> 00:07:52,960
so those of you who are from u.s may

00:07:50,720 --> 00:07:54,400
find this familiar but what we're going

00:07:52,960 --> 00:07:57,440
to build is kind of

00:07:54,400 --> 00:07:58,879
a way for us to equally distribute money

00:07:57,440 --> 00:08:01,039
within friends

00:07:58,879 --> 00:08:02,479
and charge them for dinner so this could

00:08:01,039 --> 00:08:04,720
be a dinner or a trip

00:08:02,479 --> 00:08:06,639
or but basically what we want to do is

00:08:04,720 --> 00:08:07,199
that a user should be able to select a

00:08:06,639 --> 00:08:11,520
list of

00:08:07,199 --> 00:08:14,800
their friends and charge them for dinner

00:08:11,520 --> 00:08:16,479
or any cost a user should be able to

00:08:14,800 --> 00:08:18,560
select all of their friends from their

00:08:16,479 --> 00:08:20,400
friends list they should be able to

00:08:18,560 --> 00:08:22,400
select which payment method they want to

00:08:20,400 --> 00:08:25,280
support so it could be credit card or

00:08:22,400 --> 00:08:27,680
paypal or venmo

00:08:25,280 --> 00:08:29,520
and if we want to send them remind we

00:08:27,680 --> 00:08:31,280
want to send them notifications to all

00:08:29,520 --> 00:08:34,000
of their friends either in app

00:08:31,280 --> 00:08:35,839
notifications or email reminders

00:08:34,000 --> 00:08:38,320
and if the friend is not already a

00:08:35,839 --> 00:08:38,640
customer of our company we want to sign

00:08:38,320 --> 00:08:41,760
them

00:08:38,640 --> 00:08:42,640
up as a customer once the friend has

00:08:41,760 --> 00:08:44,399
already paid

00:08:42,640 --> 00:08:46,560
we want to display a confirmation both

00:08:44,399 --> 00:08:49,600
to the payee and the payer

00:08:46,560 --> 00:08:52,160
so very typical application very

00:08:49,600 --> 00:08:54,320
commonly used something called

00:08:52,160 --> 00:08:56,560
like like venmo is a good example of

00:08:54,320 --> 00:08:56,560
this

00:08:56,640 --> 00:09:00,080
now when you're working when we're

00:08:58,080 --> 00:09:03,040
working on an enterprise

00:09:00,080 --> 00:09:05,279
there's usually multiple apis that will

00:09:03,040 --> 00:09:07,600
do part of the job that we want to do

00:09:05,279 --> 00:09:09,279
so for example in this case we need to

00:09:07,600 --> 00:09:11,600
fetch a list of friends

00:09:09,279 --> 00:09:12,880
and we may have at our disposal and api

00:09:11,600 --> 00:09:14,640
like slash user

00:09:12,880 --> 00:09:16,640
we want to fetch a list of payment

00:09:14,640 --> 00:09:18,640
methods that are eligible for that user

00:09:16,640 --> 00:09:19,920
and we may have at our disposal and api

00:09:18,640 --> 00:09:23,839
slash payments

00:09:19,920 --> 00:09:27,519
and similarly notifications and sign up

00:09:23,839 --> 00:09:29,120
so let's um let's talk through how the

00:09:27,519 --> 00:09:30,160
architecture and the sequence diagram of

00:09:29,120 --> 00:09:32,240
this will look

00:09:30,160 --> 00:09:34,080
so we'll start with the very first one

00:09:32,240 --> 00:09:36,240
which is a user can choose to pay with

00:09:34,080 --> 00:09:39,040
any payment method

00:09:36,240 --> 00:09:40,640
in this case let's talk about some of

00:09:39,040 --> 00:09:42,320
the apis that we might be using so

00:09:40,640 --> 00:09:43,360
remember we have slash user at our

00:09:42,320 --> 00:09:45,360
disposal

00:09:43,360 --> 00:09:46,480
so what we might have to do is because

00:09:45,360 --> 00:09:48,240
we want to get

00:09:46,480 --> 00:09:51,040
all of the payment methods that this

00:09:48,240 --> 00:09:53,040
user is eligible for will have to call

00:09:51,040 --> 00:09:55,440
a get api and get all the payment

00:09:53,040 --> 00:09:57,920
methods then we'll have to get

00:09:55,440 --> 00:10:00,560
we'll have to make a post call to slash

00:09:57,920 --> 00:10:04,000
payments to actually pay that api

00:10:00,560 --> 00:10:06,720
pay that user when we call

00:10:04,000 --> 00:10:07,279
post api we may have to call we may have

00:10:06,720 --> 00:10:10,160
to pause

00:10:07,279 --> 00:10:11,920
pass in an auth token and we may have to

00:10:10,160 --> 00:10:12,560
pass it on all striker even for the get

00:10:11,920 --> 00:10:15,200
api

00:10:12,560 --> 00:10:18,320
we need to use user id and we may need

00:10:15,200 --> 00:10:20,800
to pass in user id for post as well

00:10:18,320 --> 00:10:22,399
and then post further uh post slash

00:10:20,800 --> 00:10:24,480
payments for their calls

00:10:22,399 --> 00:10:27,120
downstream payment processing apis to

00:10:24,480 --> 00:10:29,120
request funds which may

00:10:27,120 --> 00:10:30,959
be called by payments itself or we may

00:10:29,120 --> 00:10:32,480
need to handle that on our own site as

00:10:30,959 --> 00:10:34,480
well

00:10:32,480 --> 00:10:36,240
so that's the first part next the second

00:10:34,480 --> 00:10:37,600
part is that we need to process the

00:10:36,240 --> 00:10:39,680
payment from a user

00:10:37,600 --> 00:10:41,760
so we need to understand which payment

00:10:39,680 --> 00:10:44,160
methods are eligible for a user

00:10:41,760 --> 00:10:44,959
we will call that api we'll have a post

00:10:44,160 --> 00:10:46,800
processing

00:10:44,959 --> 00:10:48,320
post payment processing api as well to

00:10:46,800 --> 00:10:49,920
dispatch their funds

00:10:48,320 --> 00:10:52,959
and then similarly for friends we'll

00:10:49,920 --> 00:10:55,120
have a get user profile and so on

00:10:52,959 --> 00:10:56,480
so to show that in a sequence diagram it

00:10:55,120 --> 00:10:58,640
basically looks like this

00:10:56,480 --> 00:11:00,240
the client will first integrate with the

00:10:58,640 --> 00:11:02,959
user's api

00:11:00,240 --> 00:11:04,399
pass in a user id then that user's api

00:11:02,959 --> 00:11:07,120
will go called the database and do

00:11:04,399 --> 00:11:08,399
its downstream stuff that database comes

00:11:07,120 --> 00:11:10,560
back to the users api

00:11:08,399 --> 00:11:11,839
and then it sends us the information as

00:11:10,560 --> 00:11:14,480
a client

00:11:11,839 --> 00:11:16,720
now we've got the user profile so from

00:11:14,480 --> 00:11:19,279
that we can also get the payment methods

00:11:16,720 --> 00:11:21,680
so we'll call the payment api payment

00:11:19,279 --> 00:11:23,200
api gives back information to us

00:11:21,680 --> 00:11:25,200
we'll display that payment methods on

00:11:23,200 --> 00:11:27,600
our application and let's say

00:11:25,200 --> 00:11:28,640
that the user ha once has to select a

00:11:27,600 --> 00:11:30,880
credit card

00:11:28,640 --> 00:11:32,240
and now we need to click let's say that

00:11:30,880 --> 00:11:34,399
they select paypal and

00:11:32,240 --> 00:11:36,240
now we need to show their friends so

00:11:34,399 --> 00:11:38,320
we'll call another api

00:11:36,240 --> 00:11:40,399
which could be another endpoint on users

00:11:38,320 --> 00:11:42,240
itself which will do its downstream

00:11:40,399 --> 00:11:43,120
things come back to us with the list of

00:11:42,240 --> 00:11:44,560
friends

00:11:43,120 --> 00:11:46,560
now that we've got a list of friends

00:11:44,560 --> 00:11:48,399
from users we'll have to call another

00:11:46,560 --> 00:11:50,160
api for notifications

00:11:48,399 --> 00:11:51,600
which we'll call the sign up api maybe

00:11:50,160 --> 00:11:54,160
we have to call it ourselves maybe

00:11:51,600 --> 00:11:56,800
it'll call by itself and then finally we

00:11:54,160 --> 00:12:00,160
can call the payments api

00:11:56,800 --> 00:12:01,839
so if you were counting that's

00:12:00,160 --> 00:12:04,480
six different apis that we have to

00:12:01,839 --> 00:12:06,240
integrate with

00:12:04,480 --> 00:12:08,000
and every single api that we have to

00:12:06,240 --> 00:12:10,639
integrate with brings

00:12:08,000 --> 00:12:12,240
new documentation we have to read um

00:12:10,639 --> 00:12:14,320
there might be different handle

00:12:12,240 --> 00:12:15,839
the different errors that might be hand

00:12:14,320 --> 00:12:19,360
might need to be handled

00:12:15,839 --> 00:12:21,360
they might be thrown in different format

00:12:19,360 --> 00:12:22,800
because every api might have a different

00:12:21,360 --> 00:12:24,959
error case

00:12:22,800 --> 00:12:26,880
uh most of those apis would be using

00:12:24,959 --> 00:12:27,920
similar parameters so they would all be

00:12:26,880 --> 00:12:30,079
talking about

00:12:27,920 --> 00:12:31,680
they will all be using oauth tokens they

00:12:30,079 --> 00:12:33,519
would all need a user id

00:12:31,680 --> 00:12:35,040
some parameters might be common some of

00:12:33,519 --> 00:12:36,560
them may not be common we also need to

00:12:35,040 --> 00:12:38,160
remember our validations

00:12:36,560 --> 00:12:39,519
but then all of these apis might have

00:12:38,160 --> 00:12:41,120
different versioning as well so when

00:12:39,519 --> 00:12:42,480
they do update we have to keep up with

00:12:41,120 --> 00:12:45,279
it that's just a lot of

00:12:42,480 --> 00:12:47,600
work that's just too much stuff to care

00:12:45,279 --> 00:12:47,600
about

00:12:48,240 --> 00:12:54,160
what if on a saturday

00:12:52,160 --> 00:12:55,920
instead of going to all these stores

00:12:54,160 --> 00:12:58,560
differently

00:12:55,920 --> 00:13:00,480
i could just go to one store and get all

00:12:58,560 --> 00:13:04,079
of my stuff

00:13:00,480 --> 00:13:06,720
from target i'm not sponsored by any of

00:13:04,079 --> 00:13:10,320
these brands by the way

00:13:06,720 --> 00:13:11,839
but similarly what if in our enterprise

00:13:10,320 --> 00:13:13,440
instead of talking to all these six

00:13:11,839 --> 00:13:16,800
different apis

00:13:13,440 --> 00:13:19,200
i could just talk to one api

00:13:16,800 --> 00:13:20,240
i talked to this one interface and i ask

00:13:19,200 --> 00:13:21,760
them the information

00:13:20,240 --> 00:13:24,160
and they give me back the information i

00:13:21,760 --> 00:13:25,760
need and i don't need to worry about any

00:13:24,160 --> 00:13:27,519
of the downstream complexities

00:13:25,760 --> 00:13:28,959
or calling users or payments or

00:13:27,519 --> 00:13:32,959
notifications or whatever

00:13:28,959 --> 00:13:35,839
i don't care about all of that so that

00:13:32,959 --> 00:13:35,839
is unified api

00:13:36,240 --> 00:13:40,639
so in short unified api is an api that

00:13:40,079 --> 00:13:42,800
provides

00:13:40,639 --> 00:13:45,040
one interface for you to interact with

00:13:42,800 --> 00:13:47,040
as a client

00:13:45,040 --> 00:13:49,680
and you don't need to worry about any of

00:13:47,040 --> 00:13:51,760
the downstream apis at all

00:13:49,680 --> 00:13:53,040
so you can only pass in you pass in the

00:13:51,760 --> 00:13:55,519
parameters that that

00:13:53,040 --> 00:13:57,279
interface needs and that interface takes

00:13:55,519 --> 00:13:58,720
care of passing in that parameter to all

00:13:57,279 --> 00:14:00,560
of the downstream apis

00:13:58,720 --> 00:14:02,399
so you are you're only doing auth one

00:14:00,560 --> 00:14:04,720
time that auth token gets carried away

00:14:02,399 --> 00:14:07,040
all the way to the downstream apis

00:14:04,720 --> 00:14:10,320
and because this is graphql there is one

00:14:07,040 --> 00:14:11,920
version that you need to worry about

00:14:10,320 --> 00:14:13,360
and there is one place you have to look

00:14:11,920 --> 00:14:16,079
up documentation

00:14:13,360 --> 00:14:17,279
and all of the existing enterprise

00:14:16,079 --> 00:14:18,079
architecture that's built using

00:14:17,279 --> 00:14:19,760
microservices

00:14:18,079 --> 00:14:22,160
is still there at your level so that

00:14:19,760 --> 00:14:25,920
still works independently

00:14:22,160 --> 00:14:27,120
so um just a quick poll how many of you

00:14:25,920 --> 00:14:29,839
have worked with

00:14:27,120 --> 00:14:31,519
graphql if you work with graphql say

00:14:29,839 --> 00:14:34,480
graphql otherwise you can say

00:14:31,519 --> 00:14:34,480
rest in the chat

00:14:38,639 --> 00:14:42,160
so if you work with graphql say graphql

00:14:40,720 --> 00:14:43,440
or say rust

00:14:42,160 --> 00:14:44,800
okay some people have worked with

00:14:43,440 --> 00:14:45,360
graphql some people have worked with

00:14:44,800 --> 00:14:48,399
dress

00:14:45,360 --> 00:14:48,399
both both great

00:14:56,480 --> 00:14:59,680
cool so it looks like most people have

00:14:58,320 --> 00:15:02,160
worked with rest

00:14:59,680 --> 00:15:04,160
so not a problem i'll give a brief uh

00:15:02,160 --> 00:15:05,440
primer on what is graphql

00:15:04,160 --> 00:15:07,920
i'll just talk about what is the

00:15:05,440 --> 00:15:08,880
difference between working with graphql

00:15:07,920 --> 00:15:11,360
and working with

00:15:08,880 --> 00:15:12,000
uh rust so if you're unfamiliar with

00:15:11,360 --> 00:15:13,600
graphql

00:15:12,000 --> 00:15:16,160
graphql is actually an open source

00:15:13,600 --> 00:15:18,480
software as well

00:15:16,160 --> 00:15:20,320
and the definition of graphql on the

00:15:18,480 --> 00:15:22,079
website itself says that it's a query

00:15:20,320 --> 00:15:23,360
language for apis and a runtime for

00:15:22,079 --> 00:15:24,480
fulfilling those queries with the

00:15:23,360 --> 00:15:25,920
existing data

00:15:24,480 --> 00:15:27,839
provides a complete and understandable

00:15:25,920 --> 00:15:29,920
description of the data in your api

00:15:27,839 --> 00:15:32,079
and it gives the clients the power to

00:15:29,920 --> 00:15:34,240
ask for exactly what they need

00:15:32,079 --> 00:15:36,240
and nothing more and i think that is

00:15:34,240 --> 00:15:39,040
what makes graph tools so powerful

00:15:36,240 --> 00:15:41,360
especially for a unified api

00:15:39,040 --> 00:15:42,480
so i'll show you how so let let me show

00:15:41,360 --> 00:15:44,000
you how uh

00:15:42,480 --> 00:15:45,600
working with the rest would go and how

00:15:44,000 --> 00:15:47,199
working with graphql would go

00:15:45,600 --> 00:15:49,040
so let's say that we're building like

00:15:47,199 --> 00:15:51,360
this uh play music

00:15:49,040 --> 00:15:52,079
app um you would call an api endpoint

00:15:51,360 --> 00:15:54,240
albums

00:15:52,079 --> 00:15:55,120
and then it further calls multiple api

00:15:54,240 --> 00:15:56,800
endpoints

00:15:55,120 --> 00:15:58,880
and then what happens with rest is that

00:15:56,800 --> 00:16:00,880
all of those endpoints need to dissolve

00:15:58,880 --> 00:16:01,920
and then your album's endpoint would

00:16:00,880 --> 00:16:03,440
resolve

00:16:01,920 --> 00:16:04,720
and then what happens in the background

00:16:03,440 --> 00:16:06,399
is that all of these would give

00:16:04,720 --> 00:16:08,320
different objects and then finally

00:16:06,399 --> 00:16:10,639
you'll get a big object back

00:16:08,320 --> 00:16:11,440
but with graphql what happens is that

00:16:10,639 --> 00:16:14,000
you have

00:16:11,440 --> 00:16:15,440
one endpoint albums and then actually in

00:16:14,000 --> 00:16:16,399
the background you'll be calling like a

00:16:15,440 --> 00:16:18,320
query so you'll

00:16:16,399 --> 00:16:21,199
you'll pass in whatever fields you need

00:16:18,320 --> 00:16:22,320
up front so you let the graphql api

00:16:21,199 --> 00:16:25,120
control what

00:16:22,320 --> 00:16:26,959
what you you you will control what

00:16:25,120 --> 00:16:29,279
fields you want to get back so here we

00:16:26,959 --> 00:16:31,040
just need date and name and id and actor

00:16:29,279 --> 00:16:32,560
so you send those objects over to the

00:16:31,040 --> 00:16:34,320
graphql api

00:16:32,560 --> 00:16:35,759
it goes and does its thing and gives you

00:16:34,320 --> 00:16:38,240
back one object

00:16:35,759 --> 00:16:39,839
so not that multiple apis will be giving

00:16:38,240 --> 00:16:41,360
back their object to you it'll just be

00:16:39,839 --> 00:16:42,079
giving back one object and that's

00:16:41,360 --> 00:16:44,079
exactly

00:16:42,079 --> 00:16:45,519
all the fields that you asked for and

00:16:44,079 --> 00:16:47,519
nothing extra

00:16:45,519 --> 00:16:49,360
so that's why it's really helpful in

00:16:47,519 --> 00:16:51,360
making this unified api

00:16:49,360 --> 00:16:52,959
because it reduced the amount of data

00:16:51,360 --> 00:16:56,639
that you kind of have to capture

00:16:52,959 --> 00:16:57,759
on your client side so that's a primer

00:16:56,639 --> 00:17:01,519
between graphql

00:16:57,759 --> 00:17:05,360
and rust i'll give i'll hop into the

00:17:01,519 --> 00:17:07,199
demo part of this

00:17:05,360 --> 00:17:09,439
so for this demo what we're going to be

00:17:07,199 --> 00:17:13,360
doing is we're going to be building

00:17:09,439 --> 00:17:15,439
a unified api i will have a rest api

00:17:13,360 --> 00:17:15,760
with it and i'll have a graphql api with

00:17:15,439 --> 00:17:17,280
it

00:17:15,760 --> 00:17:19,120
and this graphql api can be

00:17:17,280 --> 00:17:20,640
authenticated as well same with dresden

00:17:19,120 --> 00:17:21,839
can be authenticated as well or

00:17:20,640 --> 00:17:23,679
unauthenticated

00:17:21,839 --> 00:17:24,880
for the purpose of this demo i'll be

00:17:23,679 --> 00:17:27,520
showing you how

00:17:24,880 --> 00:17:30,240
a authenticated api works so let's get

00:17:27,520 --> 00:17:30,240
right into it

00:17:30,640 --> 00:17:37,840
let me see if i can share my screen here

00:17:34,640 --> 00:17:40,160
um and just for just as an fyi

00:17:37,840 --> 00:17:44,320
all the tools that i'll be using will be

00:17:40,160 --> 00:17:46,240
graphql asura and netlify for this demo

00:17:44,320 --> 00:17:48,960
so the first thing i'm going to do is

00:17:46,240 --> 00:17:52,320
open my hasura cloud here

00:17:48,960 --> 00:17:54,480
i have hasura running in my cloud so

00:17:52,320 --> 00:17:57,120
i'll launch this console

00:17:54,480 --> 00:17:58,080
and here when you see you will see that

00:17:57,120 --> 00:18:00,480
i have

00:17:58,080 --> 00:18:01,520
so this is the hasora's graphical

00:18:00,480 --> 00:18:03,600
interface

00:18:01,520 --> 00:18:05,440
um on the left here these are the

00:18:03,600 --> 00:18:07,679
queries that are available to me

00:18:05,440 --> 00:18:09,919
and by queries these are actually vast

00:18:07,679 --> 00:18:11,360
api endpoints that are available to me

00:18:09,919 --> 00:18:13,120
i'll show you the code in a little bit

00:18:11,360 --> 00:18:16,080
but basically

00:18:13,120 --> 00:18:18,320
um what we want to do is if you guys are

00:18:16,080 --> 00:18:19,919
familiar with dev.2 it's actually a

00:18:18,320 --> 00:18:21,840
platform for

00:18:19,919 --> 00:18:23,120
sharing blogs i'm sure you guys are

00:18:21,840 --> 00:18:25,600
familiar with it so

00:18:23,120 --> 00:18:26,320
what we want to do is for a user we want

00:18:25,600 --> 00:18:29,039
to show

00:18:26,320 --> 00:18:30,720
what blogs that they have written and

00:18:29,039 --> 00:18:33,760
what articles they have written

00:18:30,720 --> 00:18:36,320
so for that we'll look into this api

00:18:33,760 --> 00:18:38,160
and i'm on their developer documentation

00:18:36,320 --> 00:18:38,720
website and it looks like here there's a

00:18:38,160 --> 00:18:42,559
cr

00:18:38,720 --> 00:18:44,720
there is a published articles get

00:18:42,559 --> 00:18:47,360
interface so that's the one that we need

00:18:44,720 --> 00:18:47,760
so here and we can see here if we come

00:18:47,360 --> 00:18:49,520
down

00:18:47,760 --> 00:18:51,600
i think the field set will use our

00:18:49,520 --> 00:18:56,960
description title

00:18:51,600 --> 00:19:00,080
um and maybe public reactions count

00:18:56,960 --> 00:19:01,039
so i've got a curly i've got a http

00:19:00,080 --> 00:19:02,400
endpoint here

00:19:01,039 --> 00:19:04,799
i'm just going to copy this and i'll

00:19:02,400 --> 00:19:11,840
show you the code so in the code

00:19:04,799 --> 00:19:11,840
i think i have the code right here

00:19:21,600 --> 00:19:25,840
all right now you guys can still see my

00:19:23,520 --> 00:19:25,840
screen right

00:19:30,240 --> 00:19:34,240
cool awesome thank you all right so in

00:19:32,799 --> 00:19:36,840
the code what we're going to do is we

00:19:34,240 --> 00:19:39,440
need this endpoint

00:19:36,840 --> 00:19:41,039
and we are going to create a simple

00:19:39,440 --> 00:19:42,799
fetch function so i've got my api

00:19:41,039 --> 00:19:44,640
endpoint here i've plugged it here

00:19:42,799 --> 00:19:46,480
one thing that it needs one parameter it

00:19:44,640 --> 00:19:47,280
needs is username so i'll pass in my

00:19:46,480 --> 00:19:49,200
username

00:19:47,280 --> 00:19:50,960
and basically it's a fetch response it's

00:19:49,200 --> 00:19:52,400
a simple javascript fetch so i just call

00:19:50,960 --> 00:19:53,120
a fetch and then these are some of the

00:19:52,400 --> 00:19:56,160
fields that

00:19:53,120 --> 00:19:57,360
so remember this this api is sending a

00:19:56,160 --> 00:19:58,799
lot of fields right

00:19:57,360 --> 00:20:00,480
maybe i don't need all of those fields

00:19:58,799 --> 00:20:01,760
maybe i just need a few one

00:20:00,480 --> 00:20:03,760
few of those so i'm just going to

00:20:01,760 --> 00:20:05,200
capture some of these fields and send it

00:20:03,760 --> 00:20:07,440
over to my

00:20:05,200 --> 00:20:08,960
uh so this is actually a serverless

00:20:07,440 --> 00:20:11,280
function with networkify so i'm just

00:20:08,960 --> 00:20:14,720
going to send it over to my api

00:20:11,280 --> 00:20:17,280
now i've got my

00:20:14,720 --> 00:20:18,880
i've got my function uh all deployed on

00:20:17,280 --> 00:20:22,080
netlify

00:20:18,880 --> 00:20:22,640
and then what i'm going to do here is i

00:20:22,080 --> 00:20:26,480
have in

00:20:22,640 --> 00:20:27,039
action here and actions are how we can

00:20:26,480 --> 00:20:30,400
connect

00:20:27,039 --> 00:20:33,120
a downstream rest api with asura so

00:20:30,400 --> 00:20:35,039
for for actions this is the action that

00:20:33,120 --> 00:20:36,240
we're going to be working on articles is

00:20:35,039 --> 00:20:38,960
how we'll fetch

00:20:36,240 --> 00:20:39,360
dev.2 articles so what i need to define

00:20:38,960 --> 00:20:42,000
here

00:20:39,360 --> 00:20:43,440
is an action definition and this is this

00:20:42,000 --> 00:20:45,280
is in graphql format

00:20:43,440 --> 00:20:47,200
but basically what it says is that i

00:20:45,280 --> 00:20:48,000
need a parameter of username which is

00:20:47,200 --> 00:20:49,919
string

00:20:48,000 --> 00:20:51,679
and then the response that i get back

00:20:49,919 --> 00:20:53,120
will be of type article response which

00:20:51,679 --> 00:20:55,039
is what i described right here

00:20:53,120 --> 00:20:56,720
so the fields that i'm interested is in

00:20:55,039 --> 00:21:00,720
is titled description id

00:20:56,720 --> 00:21:02,640
and so on and i deployed my

00:21:00,720 --> 00:21:04,720
i deployed this function as a network

00:21:02,640 --> 00:21:06,480
function so it actually gives me a handy

00:21:04,720 --> 00:21:08,720
dandy url that i can use

00:21:06,480 --> 00:21:11,520
and all i did was copy that url right

00:21:08,720 --> 00:21:14,720
here so i have access to it right here

00:21:11,520 --> 00:21:17,200
and then i'm just going to save this

00:21:14,720 --> 00:21:18,720
and i'll check it out in graphical so i

00:21:17,200 --> 00:21:19,280
have articles right here and then what

00:21:18,720 --> 00:21:21,120
i'm going to do

00:21:19,280 --> 00:21:22,559
is i'm going to get everything that i

00:21:21,120 --> 00:21:25,679
can

00:21:22,559 --> 00:21:28,960
to see if i can

00:21:25,679 --> 00:21:31,919
get this information from dev.2. so

00:21:28,960 --> 00:21:32,799
um i need to pass in a username and the

00:21:31,919 --> 00:21:35,840
way to pass in

00:21:32,799 --> 00:21:37,679
a parameter is to say username and you

00:21:35,840 --> 00:21:39,679
have to specify which type it is so you

00:21:37,679 --> 00:21:40,880
specify string type

00:21:39,679 --> 00:21:43,039
and then i'm just gonna pass in a

00:21:40,880 --> 00:21:44,880
username here and actually my query

00:21:43,039 --> 00:21:47,440
variable is getting passed right here

00:21:44,880 --> 00:21:49,679
so i'm passing in my username and then

00:21:47,440 --> 00:21:52,159
when i run

00:21:49,679 --> 00:21:53,120
it should go and fetch dev.juice

00:21:52,159 --> 00:21:55,120
articles from me

00:21:53,120 --> 00:21:56,960
so it shows here that i published an

00:21:55,120 --> 00:21:58,640
article on september 20 which was just a

00:21:56,960 --> 00:22:00,559
test post and so on

00:21:58,640 --> 00:22:02,559
these are all the articles i get from

00:22:00,559 --> 00:22:04,080
dev.2 api

00:22:02,559 --> 00:22:05,919
now let's say that the client has

00:22:04,080 --> 00:22:07,840
integrated with this and now they change

00:22:05,919 --> 00:22:09,360
their mind and they're like okay i don't

00:22:07,840 --> 00:22:12,480
care about dev.2

00:22:09,360 --> 00:22:14,880
i want actually github repos

00:22:12,480 --> 00:22:17,200
so in that case what they can do is they

00:22:14,880 --> 00:22:17,679
can integrate with dev.2 right here

00:22:17,200 --> 00:22:19,600
which is

00:22:17,679 --> 00:22:20,720
also they can integrate with github

00:22:19,600 --> 00:22:23,919
which is also

00:22:20,720 --> 00:22:26,000
a vast ap uh it was also a rest api

00:22:23,919 --> 00:22:27,600
so here we're going to pass an username

00:22:26,000 --> 00:22:31,280
again just the same username

00:22:27,600 --> 00:22:32,400
and then hit play and i get all the

00:22:31,280 --> 00:22:35,600
repositories that

00:22:32,400 --> 00:22:37,600
i have so without re for the uh for the

00:22:35,600 --> 00:22:39,919
user without reintegrating they get

00:22:37,600 --> 00:22:41,520
access to two different apis and they

00:22:39,919 --> 00:22:43,600
didn't have even had to like

00:22:41,520 --> 00:22:45,840
read new documentation so they have this

00:22:43,600 --> 00:22:48,960
access available to them

00:22:45,840 --> 00:22:52,720
now both of these are rest apis

00:22:48,960 --> 00:22:54,799
what if we want to add a graphql api

00:22:52,720 --> 00:22:56,960
and actually adding a graphql api is

00:22:54,799 --> 00:22:58,400
really simple in hasura because we have

00:22:56,960 --> 00:22:59,440
something called remote schemas

00:22:58,400 --> 00:23:02,000
available

00:22:59,440 --> 00:23:02,960
um and let's walk through how we're

00:23:02,000 --> 00:23:05,200
going to do that so

00:23:02,960 --> 00:23:06,960
i'll click add and basically here i'm

00:23:05,200 --> 00:23:11,600
going to say that my remote

00:23:06,960 --> 00:23:14,080
graphql's name is graphical is github

00:23:11,600 --> 00:23:15,919
and here i need the graphql server url

00:23:14,080 --> 00:23:18,640
so this is the same http endpoint that

00:23:15,919 --> 00:23:21,679
you would do in a curl request

00:23:18,640 --> 00:23:23,440
and i have opened github's documentation

00:23:21,679 --> 00:23:25,120
here so let's go through this and see

00:23:23,440 --> 00:23:30,000
where we can find it

00:23:25,120 --> 00:23:34,240
um there's a graphql overview

00:23:30,000 --> 00:23:36,000
and it talks about graphql schema

00:23:34,240 --> 00:23:39,280
reference maybe there is a guide

00:23:36,000 --> 00:23:41,360
somewhere check out the guides forming

00:23:39,280 --> 00:23:43,200
calls with graphql so okay so let's see

00:23:41,360 --> 00:23:44,880
what this is it says that to communicate

00:23:43,200 --> 00:23:45,840
with graphical server you need an oauth

00:23:44,880 --> 00:23:48,720
token

00:23:45,840 --> 00:23:49,120
okay so that means that i need to pass

00:23:48,720 --> 00:23:52,480
in

00:23:49,120 --> 00:23:55,919
a header here so i'm gonna pass

00:23:52,480 --> 00:23:57,679
authorization and then this needs a

00:23:55,919 --> 00:23:59,039
token so i'll need to create one i've

00:23:57,679 --> 00:23:59,360
actually done the background work of

00:23:59,039 --> 00:24:02,559
that

00:23:59,360 --> 00:24:05,440
and created it myself before and i'm

00:24:02,559 --> 00:24:08,320
just gonna pass in this auth token here

00:24:05,440 --> 00:24:09,440
and then it says you need an oauth token

00:24:08,320 --> 00:24:13,360
and then it says

00:24:09,440 --> 00:24:16,080
um and then you you can pass in

00:24:13,360 --> 00:24:17,760
uh with you can call this api with this

00:24:16,080 --> 00:24:19,520
api endpoint and it's a graphical

00:24:17,760 --> 00:24:21,200
endpoint so i'm just going to copy that

00:24:19,520 --> 00:24:22,480
and here notice it says the endpoint

00:24:21,200 --> 00:24:23,760
remains constant no matter what

00:24:22,480 --> 00:24:25,039
operation we perform so i'm just going

00:24:23,760 --> 00:24:28,640
to copy this

00:24:25,039 --> 00:24:30,480
into my schema right here so i've got my

00:24:28,640 --> 00:24:32,080
server url hooked up i'm sending

00:24:30,480 --> 00:24:34,720
authorization headers

00:24:32,080 --> 00:24:46,960
i've got a token set up and then i'll

00:24:34,720 --> 00:24:48,880
just click on add remote schema

00:24:46,960 --> 00:24:50,480
okay looks like it's hooked up here and

00:24:48,880 --> 00:24:51,600
let's see if i have access to this in

00:24:50,480 --> 00:24:54,480
graphical

00:24:51,600 --> 00:24:55,200
and if i go here i have access to all of

00:24:54,480 --> 00:24:57,679
graphq

00:24:55,200 --> 00:24:58,720
github's api right here and this is

00:24:57,679 --> 00:25:00,880
really cool because

00:24:58,720 --> 00:25:02,080
as a client i get access to this right

00:25:00,880 --> 00:25:04,240
away and

00:25:02,080 --> 00:25:06,159
as an api developer this was super easy

00:25:04,240 --> 00:25:08,960
to add a new api endpoint

00:25:06,159 --> 00:25:10,080
let's see if this actually works so

00:25:08,960 --> 00:25:13,279
maybe

00:25:10,080 --> 00:25:14,799
i will look at the viewer which should

00:25:13,279 --> 00:25:18,559
be me

00:25:14,799 --> 00:25:19,430
and maybe i will find out

00:25:18,559 --> 00:25:22,559
um

00:25:19,430 --> 00:25:26,000
[Music]

00:25:22,559 --> 00:25:29,120
maybe i'll find out my login

00:25:26,000 --> 00:25:31,039
and my name because i don't know so

00:25:29,120 --> 00:25:33,200
it's it shows here that my login is

00:25:31,039 --> 00:25:34,559
shrutika 408 and my name is shruti

00:25:33,200 --> 00:25:36,480
kapoor

00:25:34,559 --> 00:25:37,919
which is great and then maybe what we'll

00:25:36,480 --> 00:25:41,279
do is let's get

00:25:37,919 --> 00:25:44,480
a list of followers so maybe we'll get

00:25:41,279 --> 00:25:47,840
100 followers and

00:25:44,480 --> 00:25:49,679
we'll get their bios

00:25:47,840 --> 00:25:52,799
and the company that they work at their

00:25:49,679 --> 00:25:56,240
email because why not spam them

00:25:52,799 --> 00:25:57,120
and hit reply hit send and so let's see

00:25:56,240 --> 00:26:00,400
if we get some

00:25:57,120 --> 00:26:01,679
followers here so i've got uh actually

00:26:00,400 --> 00:26:03,600
didn't get their name but

00:26:01,679 --> 00:26:06,480
anyways we have their bios we have their

00:26:03,600 --> 00:26:09,919
emails so there we go

00:26:06,480 --> 00:26:10,400
we can spam these people so anyways as

00:26:09,919 --> 00:26:12,480
you saw

00:26:10,400 --> 00:26:14,960
this was so simple to add a new api

00:26:12,480 --> 00:26:17,360
right we we had addressed apis we added

00:26:14,960 --> 00:26:19,039
uh graphql apis we added graphql apis

00:26:17,360 --> 00:26:20,799
using remote schema by just having

00:26:19,039 --> 00:26:23,360
access to the github

00:26:20,799 --> 00:26:24,080
url itself the api endpoint and we added

00:26:23,360 --> 00:26:27,279
actions

00:26:24,080 --> 00:26:29,039
we added rest type endpoints by creating

00:26:27,279 --> 00:26:31,679
a simple fetch

00:26:29,039 --> 00:26:34,240
and adding them as actions and deploying

00:26:31,679 --> 00:26:37,600
them as netlife headless functions

00:26:34,240 --> 00:26:38,159
as well as functions so that's basically

00:26:37,600 --> 00:26:40,799
how

00:26:38,159 --> 00:26:42,559
you add a new um that's basically how

00:26:40,799 --> 00:26:44,480
you can add a new endpoint as well and

00:26:42,559 --> 00:26:45,440
these endpoints can be authenticated as

00:26:44,480 --> 00:26:48,240
well

00:26:45,440 --> 00:26:51,679
or they can be unauthenticated endpoints

00:26:48,240 --> 00:26:55,200
and hasor doesn't really care about that

00:26:51,679 --> 00:26:56,240
so to wrap up the advantages of having a

00:26:55,200 --> 00:26:58,240
unified api

00:26:56,240 --> 00:27:00,159
is that it provides this abstraction

00:26:58,240 --> 00:27:01,520
layer where you can unify how each of

00:27:00,159 --> 00:27:02,640
those requests are made

00:27:01,520 --> 00:27:04,000
and you don't need to worry about

00:27:02,640 --> 00:27:05,679
passing in these parameters to all of

00:27:04,000 --> 00:27:07,600
those downstream apis because the

00:27:05,679 --> 00:27:09,200
platform will do it for your unified api

00:27:07,600 --> 00:27:10,960
will do it for you

00:27:09,200 --> 00:27:13,440
and there is one api that the client

00:27:10,960 --> 00:27:16,559
will need to integrate

00:27:13,440 --> 00:27:17,200
and because we are also using graphql

00:27:16,559 --> 00:27:19,279
for

00:27:17,200 --> 00:27:21,279
making our unified api we can also get

00:27:19,279 --> 00:27:22,720
all of the advantages of graphql

00:27:21,279 --> 00:27:24,559
which is that there is a constant

00:27:22,720 --> 00:27:26,880
version once the

00:27:24,559 --> 00:27:27,600
the client has integrated with one

00:27:26,880 --> 00:27:29,520
version

00:27:27,600 --> 00:27:31,360
or the endpoint that's all they need

00:27:29,520 --> 00:27:32,159
they can get all of the new updates

00:27:31,360 --> 00:27:33,279
available

00:27:32,159 --> 00:27:35,679
right away they don't have to

00:27:33,279 --> 00:27:37,919
reintegrate and as an api developer it's

00:27:35,679 --> 00:27:38,240
really helpful because with graphql you

00:27:37,919 --> 00:27:40,640
get

00:27:38,240 --> 00:27:41,440
a very powerful instrumentation on

00:27:40,640 --> 00:27:42,960
fields

00:27:41,440 --> 00:27:44,799
itself so you know which fields are

00:27:42,960 --> 00:27:47,200
being called how many times

00:27:44,799 --> 00:27:48,799
and when you publish a new uh update

00:27:47,200 --> 00:27:51,360
that's available right away to all of

00:27:48,799 --> 00:27:51,360
the clients

00:27:51,919 --> 00:27:56,240
so to wrap up we talked about what is a

00:27:54,960 --> 00:27:59,760
unified api

00:27:56,240 --> 00:28:02,320
we talked about why unified api

00:27:59,760 --> 00:28:03,279
we i showed an example of how to connect

00:28:02,320 --> 00:28:06,640
rest apis

00:28:03,279 --> 00:28:08,960
and graphical api and then we talked

00:28:06,640 --> 00:28:10,799
about some of the advantages of this

00:28:08,960 --> 00:28:14,720
that's all i have for you today but i

00:28:10,799 --> 00:28:14,720
wanted to leave with one final dev

00:28:14,840 --> 00:28:17,840
joke

00:28:25,440 --> 00:28:29,200
thank you everybody so much you have all

00:28:27,600 --> 00:28:32,159
been a great audience

00:28:29,200 --> 00:28:33,120
again if you're interested in the slides

00:28:32,159 --> 00:28:34,760
or dev jokes

00:28:33,120 --> 00:28:37,279
you can follow me on twitter at

00:28:34,760 --> 00:28:40,000
shrutikapoor08 if you have any questions

00:28:37,279 --> 00:28:45,840
please feel free to dm it to me thank

00:28:40,000 --> 00:28:45,840
you so much everyone

00:28:46,080 --> 00:28:48,159

YouTube URL: https://www.youtube.com/watch?v=IaRFFL6lvH8


