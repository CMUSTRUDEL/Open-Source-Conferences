Title: Introducing github.com open-cluster-management - Michael Elder
Publication date: 2020-12-09
Playlist: All Things Open 2020 - Sponsor Spotlight Track (Day 1)
Description: 
	Presented by: Michael Elder, Red Hat
Presented at All Things Open 2020 - Sponsor Spotlight Track (Day 1)

Abstract: Introducing Open Cluster Management, a community-driven project focused on multicluster and multicloud scenarios for Kubernetes apps. Open APIs are evolving within this project for cluster registration, work distribution, dynamic placement of policies and workloads and cluster and workload health management. In this session, Michael will introduce the project and demonstrate what you can do on OpenShift and Managed Kubernetes as a Service today from community operators on OperatorHub.io.
Captions: 
	00:00:05,200 --> 00:00:10,000
so appreciate everyone making time today

00:00:07,440 --> 00:00:10,800
i wanted to really just have a

00:00:10,000 --> 00:00:12,880
conversation

00:00:10,800 --> 00:00:14,559
about some of the work that we're doing

00:00:12,880 --> 00:00:16,720
in a upstream project called open

00:00:14,559 --> 00:00:19,600
cluster management and

00:00:16,720 --> 00:00:20,560
this project is really about kubernetes

00:00:19,600 --> 00:00:22,720
so

00:00:20,560 --> 00:00:23,920
if you aren't familiar with kubernetes

00:00:22,720 --> 00:00:25,680
i'm not going to go into a lot of depth

00:00:23,920 --> 00:00:27,760
about how kubernetes works

00:00:25,680 --> 00:00:30,800
but at a high level kubernetes takes a

00:00:27,760 --> 00:00:33,840
declarative specification of your app

00:00:30,800 --> 00:00:34,640
applies a model called the balancing

00:00:33,840 --> 00:00:37,200
loop

00:00:34,640 --> 00:00:38,879
where it continuously reconciles how

00:00:37,200 --> 00:00:39,760
does the real world match my declared

00:00:38,879 --> 00:00:42,719
state

00:00:39,760 --> 00:00:43,280
and then runs it on a set of of nodes

00:00:42,719 --> 00:00:44,879
right

00:00:43,280 --> 00:00:47,200
and these nodes then make up a cluster

00:00:44,879 --> 00:00:48,000
so in the end you take a containerized

00:00:47,200 --> 00:00:50,640
image

00:00:48,000 --> 00:00:51,920
and you run container instances on those

00:00:50,640 --> 00:00:52,879
computers and that's as much as i'll

00:00:51,920 --> 00:00:53,840
kind of give in the background of

00:00:52,879 --> 00:00:55,199
kubernetes

00:00:53,840 --> 00:00:57,120
there's always plenty of great resources

00:00:55,199 --> 00:00:58,559
about that but what i want to talk about

00:00:57,120 --> 00:01:00,640
is what happens when

00:00:58,559 --> 00:01:01,600
i start to have more than one kubernetes

00:01:00,640 --> 00:01:03,840
cluster

00:01:01,600 --> 00:01:05,040
there's lots of reasons why i might have

00:01:03,840 --> 00:01:06,720
more than one

00:01:05,040 --> 00:01:08,320
at a minimum you're probably going to

00:01:06,720 --> 00:01:10,080
have lower

00:01:08,320 --> 00:01:11,360
and production environments right dev

00:01:10,080 --> 00:01:13,200
test prod

00:01:11,360 --> 00:01:14,880
you might have a scenario where i'm

00:01:13,200 --> 00:01:17,200
replicating a workload

00:01:14,880 --> 00:01:18,080
geographically in which case i want to

00:01:17,200 --> 00:01:20,479
run some in

00:01:18,080 --> 00:01:22,080
north america or in multiple regions

00:01:20,479 --> 00:01:24,880
within north america

00:01:22,080 --> 00:01:26,000
and some in other regions worldwide

00:01:24,880 --> 00:01:29,040
kubernetes already

00:01:26,000 --> 00:01:31,040
makes it possible to manage multiple

00:01:29,040 --> 00:01:32,479
availability zones within a single

00:01:31,040 --> 00:01:34,079
cluster

00:01:32,479 --> 00:01:35,840
so you don't necessarily need multiple

00:01:34,079 --> 00:01:37,119
clusters for that but when you start to

00:01:35,840 --> 00:01:38,840
cross regions

00:01:37,119 --> 00:01:41,360
you might need multiple clusters at that

00:01:38,840 --> 00:01:43,040
point or you might have just a cluster

00:01:41,360 --> 00:01:43,600
for different project teams or lines of

00:01:43,040 --> 00:01:45,920
business

00:01:43,600 --> 00:01:47,360
so kubernetes makes it easy to run

00:01:45,920 --> 00:01:48,720
containerized workload

00:01:47,360 --> 00:01:50,640
but the way that you adopt this

00:01:48,720 --> 00:01:51,119
technology is going to lead you to

00:01:50,640 --> 00:01:53,040
create

00:01:51,119 --> 00:01:55,119
more than one cluster and there's plenty

00:01:53,040 --> 00:01:57,119
of other reasons why you might

00:01:55,119 --> 00:01:58,880
want more than one cluster maybe it's

00:01:57,119 --> 00:01:59,600
about latency maybe it's about industry

00:01:58,880 --> 00:02:01,200
standards

00:01:59,600 --> 00:02:03,360
maybe you're trying to balance vendor

00:02:01,200 --> 00:02:05,200
lock-in concerns you want to run

00:02:03,360 --> 00:02:06,799
clusters on different cloud environments

00:02:05,200 --> 00:02:08,959
multi-cloud obviously is becoming more

00:02:06,799 --> 00:02:11,039
and more of a reality for many

00:02:08,959 --> 00:02:12,480
enterprises today

00:02:11,039 --> 00:02:14,640
and then there's different things that

00:02:12,480 --> 00:02:15,200
affect scale am i talking about small

00:02:14,640 --> 00:02:18,319
scale

00:02:15,200 --> 00:02:21,200
startup dev teams or am i talking about

00:02:18,319 --> 00:02:22,480
telcos and so depending on where you fit

00:02:21,200 --> 00:02:25,040
in the spectrum

00:02:22,480 --> 00:02:26,720
you might end up starting out with you

00:02:25,040 --> 00:02:29,520
know five or ten clusters tens of

00:02:26,720 --> 00:02:31,440
clusters low tens of clusters

00:02:29,520 --> 00:02:33,200
probably not unless you're a telco where

00:02:31,440 --> 00:02:34,000
you see more than hundreds of clusters

00:02:33,200 --> 00:02:36,400
telcos

00:02:34,000 --> 00:02:37,760
and maybe some edge applications you're

00:02:36,400 --> 00:02:39,519
going to see lots and lots of really

00:02:37,760 --> 00:02:41,680
small clusters everywhere telco might

00:02:39,519 --> 00:02:43,200
see lots and lots of really big clusters

00:02:41,680 --> 00:02:44,879
but you're probably somewhere in here

00:02:43,200 --> 00:02:47,360
probably between 10 and

00:02:44,879 --> 00:02:48,080
and honestly low or mid tens is going to

00:02:47,360 --> 00:02:49,920
be

00:02:48,080 --> 00:02:52,239
i think the bulk of where workloads are

00:02:49,920 --> 00:02:54,239
today

00:02:52,239 --> 00:02:55,360
kubernetes helps you manage apps you end

00:02:54,239 --> 00:02:57,280
up driving to

00:02:55,360 --> 00:02:58,959
manage mini cluster so what do you need

00:02:57,280 --> 00:03:01,040
to do to manage clusters

00:02:58,959 --> 00:03:02,000
and this is the punch line of the talk

00:03:01,040 --> 00:03:04,800
is how

00:03:02,000 --> 00:03:07,120
open cluster management is focused on

00:03:04,800 --> 00:03:09,920
these types of questions

00:03:07,120 --> 00:03:11,440
how do you source your kubernetes

00:03:09,920 --> 00:03:14,720
infrastructure

00:03:11,440 --> 00:03:17,519
do you run your own software on cloud

00:03:14,720 --> 00:03:20,080
nodes on vmware on bare metal

00:03:17,519 --> 00:03:22,239
how do you create clusters how do you

00:03:20,080 --> 00:03:25,280
update those clusters over time

00:03:22,239 --> 00:03:28,319
so kubernetes delivers a new release

00:03:25,280 --> 00:03:30,799
once a quarter and depending on

00:03:28,319 --> 00:03:32,319
which version you're picking up most

00:03:30,799 --> 00:03:34,000
versions to date have

00:03:32,319 --> 00:03:36,159
typically had a support trend of about

00:03:34,000 --> 00:03:38,080
nine months we'll see i think

00:03:36,159 --> 00:03:40,799
uh support timeline going out a little

00:03:38,080 --> 00:03:44,000
bit longer in an upcoming release

00:03:40,799 --> 00:03:46,319
but ultimately not only is it about

00:03:44,000 --> 00:03:47,519
deploying the cluster the first time but

00:03:46,319 --> 00:03:50,720
keeping the cluster

00:03:47,519 --> 00:03:52,879
the control plane et cetera up to date

00:03:50,720 --> 00:03:53,760
once you have created it you have a way

00:03:52,879 --> 00:03:54,879
to update it

00:03:53,760 --> 00:03:56,879
you know how to tear them down and

00:03:54,879 --> 00:03:58,159
decommission them you're gonna

00:03:56,879 --> 00:04:00,159
you're gonna be focused on how do you

00:03:58,159 --> 00:04:02,480
make them consistent right between dev

00:04:00,159 --> 00:04:03,680
qa and prod how do i ensure i have the

00:04:02,480 --> 00:04:06,720
same

00:04:03,680 --> 00:04:09,360
name spaces the same policies the same

00:04:06,720 --> 00:04:11,200
way that i set quota because if i don't

00:04:09,360 --> 00:04:12,000
manage quota the same way between each

00:04:11,200 --> 00:04:13,760
environment

00:04:12,000 --> 00:04:15,200
i might get to a point where something

00:04:13,760 --> 00:04:18,479
that ran fine and dev

00:04:15,200 --> 00:04:19,919
is cpu or memory starved in prod simply

00:04:18,479 --> 00:04:21,440
because of the way that resource limits

00:04:19,919 --> 00:04:24,080
are configured between those two

00:04:21,440 --> 00:04:25,440
environments other types of things that

00:04:24,080 --> 00:04:27,680
kubernetes can manage

00:04:25,440 --> 00:04:29,759
you get into things like access control

00:04:27,680 --> 00:04:31,680
so using roles role bindings or cluster

00:04:29,759 --> 00:04:34,800
roles and clusteral bindings

00:04:31,680 --> 00:04:37,120
using network policies really every part

00:04:34,800 --> 00:04:38,800
of the kubernetes api

00:04:37,120 --> 00:04:41,120
is managed through these declarative

00:04:38,800 --> 00:04:42,160
constructs and so finding a way that you

00:04:41,120 --> 00:04:45,040
can apply them

00:04:42,160 --> 00:04:45,919
and then validate an audit that they are

00:04:45,040 --> 00:04:47,759
consistent

00:04:45,919 --> 00:04:48,960
that's going to become a big issue over

00:04:47,759 --> 00:04:50,479
time

00:04:48,960 --> 00:04:52,000
not even really over time i mean even

00:04:50,479 --> 00:04:53,600
getting to the point where

00:04:52,000 --> 00:04:55,600
you've only got a small handful of

00:04:53,600 --> 00:04:56,080
clusters just making sure that they

00:04:55,600 --> 00:04:59,759
match

00:04:56,080 --> 00:05:02,800
right and then applications

00:04:59,759 --> 00:05:05,520
we're standing up all of this context

00:05:02,800 --> 00:05:06,800
because what we want to do is run

00:05:05,520 --> 00:05:09,039
applications

00:05:06,800 --> 00:05:10,240
with a more continuous delivery

00:05:09,039 --> 00:05:13,199
mechanism

00:05:10,240 --> 00:05:14,639
that helps us react more aggressively to

00:05:13,199 --> 00:05:17,120
changes in the market

00:05:14,639 --> 00:05:17,919
clearly the pandemic and koved have

00:05:17,120 --> 00:05:19,440
driven

00:05:17,919 --> 00:05:21,039
lots of new changes in the way the

00:05:19,440 --> 00:05:23,199
technology is applied

00:05:21,039 --> 00:05:25,039
to business models and the way that

00:05:23,199 --> 00:05:27,919
consumers interact with the business

00:05:25,039 --> 00:05:29,520
so how i distribute apps again if i'm

00:05:27,919 --> 00:05:29,919
running devtest prod i've got to deal

00:05:29,520 --> 00:05:31,680
with

00:05:29,919 --> 00:05:33,520
promoting an app from one stage to the

00:05:31,680 --> 00:05:35,280
next if i'm dealing with

00:05:33,520 --> 00:05:36,840
multiple regions i've got to deal with

00:05:35,280 --> 00:05:38,000
making sure that the app is deployed

00:05:36,840 --> 00:05:40,800
consistently

00:05:38,000 --> 00:05:42,160
across those regions and once i get an

00:05:40,800 --> 00:05:43,600
application up and running

00:05:42,160 --> 00:05:45,199
i need to make sure it's healthy that

00:05:43,600 --> 00:05:48,479
it's running effectively

00:05:45,199 --> 00:05:50,639
so open cluster management is a

00:05:48,479 --> 00:05:53,199
open community project that is

00:05:50,639 --> 00:05:56,080
specifically focused on these questions

00:05:53,199 --> 00:05:57,600
and to that end the first question where

00:05:56,080 --> 00:05:59,600
do you source your kubernetes there's

00:05:57,600 --> 00:06:00,880
lots of ways to source kubernetes in the

00:05:59,600 --> 00:06:04,160
community

00:06:00,880 --> 00:06:06,000
the most widely adopted enterprise

00:06:04,160 --> 00:06:10,000
version of kubernetes is red hat

00:06:06,000 --> 00:06:12,639
open shift it is 100 kubernetes

00:06:10,000 --> 00:06:13,199
and as you will find when you assemble

00:06:12,639 --> 00:06:16,240
any

00:06:13,199 --> 00:06:18,960
project whether it's a software project

00:06:16,240 --> 00:06:21,199
uh do it yourself at home kit whatever

00:06:18,960 --> 00:06:22,560
legos whenever you start assembling

00:06:21,199 --> 00:06:23,600
things right you need to

00:06:22,560 --> 00:06:25,440
have a little bit of this a little bit

00:06:23,600 --> 00:06:26,960
of that so when you get kubernetes you

00:06:25,440 --> 00:06:29,199
want to think about how do i monitor

00:06:26,960 --> 00:06:31,280
prometheus and grafana great ways to

00:06:29,199 --> 00:06:33,840
deal with that how do i drive

00:06:31,280 --> 00:06:35,199
the upgrade lifecycle well red hat has

00:06:33,840 --> 00:06:36,400
really pioneered this notion of

00:06:35,199 --> 00:06:38,400
operators to help

00:06:36,400 --> 00:06:40,000
manage those aspects how do i run

00:06:38,400 --> 00:06:43,919
projects like istio

00:06:40,000 --> 00:06:47,039
or service mesh excuse me serverless

00:06:43,919 --> 00:06:48,080
on kubernetes so red hat openshift is a

00:06:47,039 --> 00:06:50,160
very

00:06:48,080 --> 00:06:51,440
widely adopted very proven enterprise

00:06:50,160 --> 00:06:54,080
hardened platform

00:06:51,440 --> 00:06:55,840
that is 100 kubernetes with all of these

00:06:54,080 --> 00:06:56,639
aspects that most enterprises typically

00:06:55,840 --> 00:06:58,240
need

00:06:56,639 --> 00:06:59,759
so i'm going to talk about that but it's

00:06:58,240 --> 00:07:01,680
not the open source

00:06:59,759 --> 00:07:03,360
open cluster management project is not

00:07:01,680 --> 00:07:06,000
openshift centric

00:07:03,360 --> 00:07:07,759
uh it will ultimately expand with

00:07:06,000 --> 00:07:08,160
different kubernetes distributions it

00:07:07,759 --> 00:07:10,880
does

00:07:08,160 --> 00:07:12,240
support managing projects like

00:07:10,880 --> 00:07:15,280
enterprise excuse me

00:07:12,240 --> 00:07:17,599
eks aks so the amazon

00:07:15,280 --> 00:07:19,840
manage kubernetes service the azure

00:07:17,599 --> 00:07:22,080
manage kubernetes service the ibm

00:07:19,840 --> 00:07:23,280
manage kubernetes service and then

00:07:22,080 --> 00:07:25,599
google as well

00:07:23,280 --> 00:07:27,120
so you can still manage those types of

00:07:25,599 --> 00:07:28,880
services already

00:07:27,120 --> 00:07:31,440
and one of the things that i want to

00:07:28,880 --> 00:07:33,280
entice everyone listening to this talk

00:07:31,440 --> 00:07:35,919
is to look at how you can contribute and

00:07:33,280 --> 00:07:39,520
get involved for whatever kube distro

00:07:35,919 --> 00:07:41,759
is your favorite now when you

00:07:39,520 --> 00:07:43,039
come to open cluster management one of

00:07:41,759 --> 00:07:45,599
the first things that you

00:07:43,039 --> 00:07:47,199
hopefully will take a look at is the

00:07:45,599 --> 00:07:48,240
pull request that's currently active in

00:07:47,199 --> 00:07:50,400
the community

00:07:48,240 --> 00:07:51,599
that is focused on documenting the

00:07:50,400 --> 00:07:53,680
formal mission statement

00:07:51,599 --> 00:07:55,759
so we are seeking feedback from the

00:07:53,680 --> 00:07:59,440
community to also help shape

00:07:55,759 --> 00:08:02,080
what goes on here and these areas

00:07:59,440 --> 00:08:03,280
the questions that i described a slide

00:08:02,080 --> 00:08:05,360
ago

00:08:03,280 --> 00:08:06,479
on how you manage the cluster life cycle

00:08:05,360 --> 00:08:07,919
how you deal with policy and

00:08:06,479 --> 00:08:09,039
configuration how you deal with

00:08:07,919 --> 00:08:11,360
applications

00:08:09,039 --> 00:08:12,400
and how you manage health these are the

00:08:11,360 --> 00:08:13,759
four areas

00:08:12,400 --> 00:08:16,080
that open cluster management is

00:08:13,759 --> 00:08:17,919
specifically uh

00:08:16,080 --> 00:08:19,199
trying to address and so you can take a

00:08:17,919 --> 00:08:21,120
look at the pr

00:08:19,199 --> 00:08:22,639
it's currently open it'll remain open

00:08:21,120 --> 00:08:24,800
for a little while

00:08:22,639 --> 00:08:26,080
join the conversation if you'd like to

00:08:24,800 --> 00:08:27,599
get more directly involved

00:08:26,080 --> 00:08:29,360
or bring your organization to get more

00:08:27,599 --> 00:08:32,240
directly involved we'd love

00:08:29,360 --> 00:08:33,919
to have that type of participation so

00:08:32,240 --> 00:08:37,440
now i'm going to give you

00:08:33,919 --> 00:08:40,640
a very rapid fire uh

00:08:37,440 --> 00:08:42,000
highlight of each of those four areas

00:08:40,640 --> 00:08:44,720
we're going to take a look at some

00:08:42,000 --> 00:08:46,720
running environments and take a look at

00:08:44,720 --> 00:08:49,440
how these api

00:08:46,720 --> 00:08:50,800
for open cluster management appear in

00:08:49,440 --> 00:08:52,240
kubernetes

00:08:50,800 --> 00:08:54,160
and then i'll kind of show you how you

00:08:52,240 --> 00:08:56,000
can tile the parts together at the very

00:08:54,160 --> 00:08:57,680
end

00:08:56,000 --> 00:08:59,680
you will not be an expert in this

00:08:57,680 --> 00:09:01,279
project at the end of this talk

00:08:59,680 --> 00:09:03,839
but hopefully this will help drive your

00:09:01,279 --> 00:09:07,440
curiosity to come and engage

00:09:03,839 --> 00:09:10,880
try it out get involved etc

00:09:07,440 --> 00:09:12,720
so for cluster lifecycle

00:09:10,880 --> 00:09:14,320
we're really looking at two primary

00:09:12,720 --> 00:09:17,360
roles your traditional

00:09:14,320 --> 00:09:20,800
it operations admin et cetera

00:09:17,360 --> 00:09:22,880
or more of the trendy buzzish but

00:09:20,800 --> 00:09:24,000
really really powerful roles around

00:09:22,880 --> 00:09:26,160
devops

00:09:24,000 --> 00:09:27,200
and what's called site reliability

00:09:26,160 --> 00:09:30,320
engineering or

00:09:27,200 --> 00:09:33,040
sre so each of these roles

00:09:30,320 --> 00:09:34,959
in different organizations will operate

00:09:33,040 --> 00:09:38,240
in slightly different ways i'll

00:09:34,959 --> 00:09:40,720
oversimplify traditional it environments

00:09:38,240 --> 00:09:42,640
probably more service ticket driven

00:09:40,720 --> 00:09:43,760
still some automation but maybe it's not

00:09:42,640 --> 00:09:46,800
tightly coupled

00:09:43,760 --> 00:09:48,320
a service ticket comes in an admin takes

00:09:46,800 --> 00:09:51,920
care of running automation

00:09:48,320 --> 00:09:54,720
returns a result devops and sre

00:09:51,920 --> 00:09:56,160
much more heavily reliant on automation

00:09:54,720 --> 00:10:00,160
much more heavily reliant

00:09:56,160 --> 00:10:01,839
on things like a service level objective

00:10:00,160 --> 00:10:04,000
and trying to validate are those being

00:10:01,839 --> 00:10:05,519
met in a running environment

00:10:04,000 --> 00:10:07,120
so maybe that's kind of the key

00:10:05,519 --> 00:10:07,600
difference in how these two roles might

00:10:07,120 --> 00:10:10,959
operate

00:10:07,600 --> 00:10:13,040
between different organizations today

00:10:10,959 --> 00:10:14,320
when those roles interact with open

00:10:13,040 --> 00:10:16,560
cluster management

00:10:14,320 --> 00:10:18,000
they're able to use different parts of

00:10:16,560 --> 00:10:19,839
the project

00:10:18,000 --> 00:10:21,120
to provision clusters and here we're

00:10:19,839 --> 00:10:23,600
talking primarily

00:10:21,120 --> 00:10:25,040
the existing support allows you to

00:10:23,600 --> 00:10:27,600
provision openshift

00:10:25,040 --> 00:10:28,399
on pri on the public cloud providers

00:10:27,600 --> 00:10:31,040
that we have today

00:10:28,399 --> 00:10:32,000
amazon google and azure an upcoming

00:10:31,040 --> 00:10:34,800
release

00:10:32,000 --> 00:10:35,760
will uh formalize our support for bare

00:10:34,800 --> 00:10:38,800
metal

00:10:35,760 --> 00:10:40,959
and support for vsphere and

00:10:38,800 --> 00:10:42,880
obviously openshift can be provisioned

00:10:40,959 --> 00:10:44,720
in many other environments

00:10:42,880 --> 00:10:46,240
but when you come directly into the

00:10:44,720 --> 00:10:47,120
project and look at what's supported out

00:10:46,240 --> 00:10:49,040
of the box

00:10:47,120 --> 00:10:50,880
these are things that you'll see today

00:10:49,040 --> 00:10:52,320
we're using hive as the openshift

00:10:50,880 --> 00:10:55,200
provisioning engine

00:10:52,320 --> 00:10:56,240
but once the openshift instance is

00:10:55,200 --> 00:10:58,800
provisioned

00:10:56,240 --> 00:11:00,720
it's going to be managed just like any

00:10:58,800 --> 00:11:02,320
other kubernetes if i'm running eks or

00:11:00,720 --> 00:11:04,160
aks side by side

00:11:02,320 --> 00:11:05,440
i can deploy the agent we'll talk about

00:11:04,160 --> 00:11:07,519
that in just a minute

00:11:05,440 --> 00:11:09,600
and do things like answer the questions

00:11:07,519 --> 00:11:11,279
before apply policies consistently

00:11:09,600 --> 00:11:14,720
deliver apps manage help

00:11:11,279 --> 00:11:16,160
etc so from here

00:11:14,720 --> 00:11:18,079
i'm going to entice you hopefully to

00:11:16,160 --> 00:11:19,600
take a look at what this looks like in

00:11:18,079 --> 00:11:21,760
the community today

00:11:19,600 --> 00:11:23,279
um in the one hand we have the design

00:11:21,760 --> 00:11:24,560
that talks about the different kinds of

00:11:23,279 --> 00:11:26,320
api

00:11:24,560 --> 00:11:28,320
and if you want to kick the tires on the

00:11:26,320 --> 00:11:31,440
community version these are available

00:11:28,320 --> 00:11:33,440
in the communityoperatorhub.io project

00:11:31,440 --> 00:11:35,279
so what does that look like so if i take

00:11:33,440 --> 00:11:37,360
a look at the design

00:11:35,279 --> 00:11:39,120
here again this is under open cluster

00:11:37,360 --> 00:11:43,200
management this is in the api

00:11:39,120 --> 00:11:45,600
project this captures the core api

00:11:43,200 --> 00:11:46,720
a cluster manager we'll call that a hub

00:11:45,600 --> 00:11:48,640
i'll show you what that looks like in a

00:11:46,720 --> 00:11:50,560
picture in just one more moment

00:11:48,640 --> 00:11:53,440
and the cluster lit that's our name for

00:11:50,560 --> 00:11:56,160
the agent so we'll see this sort of hub

00:11:53,440 --> 00:11:58,399
and attached cluster model to drive the

00:11:56,160 --> 00:12:00,720
overall management behavior

00:11:58,399 --> 00:12:02,399
and then there's some additional api

00:12:00,720 --> 00:12:05,440
that's part of this project

00:12:02,399 --> 00:12:07,839
how we represent a cluster which is

00:12:05,440 --> 00:12:08,560
being controlled by the hub and how we

00:12:07,839 --> 00:12:10,720
deliver

00:12:08,560 --> 00:12:13,279
sort of the very raw basic building

00:12:10,720 --> 00:12:16,079
block of how we deliver capability

00:12:13,279 --> 00:12:16,880
to that attached cluster and if you want

00:12:16,079 --> 00:12:20,160
to try this

00:12:16,880 --> 00:12:22,639
in your kubernetes from operatorhub.io

00:12:20,160 --> 00:12:24,000
you can simply search for cluster if you

00:12:22,639 --> 00:12:27,839
filter it to the red hat

00:12:24,000 --> 00:12:30,160
providers then you'll see

00:12:27,839 --> 00:12:32,399
both the cluster manager and the cluster

00:12:30,160 --> 00:12:35,279
lit our community operators

00:12:32,399 --> 00:12:36,720
that are implementing this api that

00:12:35,279 --> 00:12:38,000
we're discussing

00:12:36,720 --> 00:12:40,079
if you want to see that in a real

00:12:38,000 --> 00:12:43,760
cluster on the left

00:12:40,079 --> 00:12:45,680
i have a hub and i'm attached to that

00:12:43,760 --> 00:12:47,680
authorized to that cluster we'll call it

00:12:45,680 --> 00:12:50,079
quebec for short

00:12:47,680 --> 00:12:50,800
and i'm attached to one of the manage

00:12:50,079 --> 00:12:53,839
clusters

00:12:50,800 --> 00:12:57,200
we'll call it quebec alpha for short

00:12:53,839 --> 00:12:57,600
so the hub and let me give you a picture

00:12:57,200 --> 00:13:01,040
to

00:12:57,600 --> 00:13:02,720
help conceptualize this the hub is just

00:13:01,040 --> 00:13:03,200
a kubernetes cluster with a little bit

00:13:02,720 --> 00:13:05,279
of

00:13:03,200 --> 00:13:06,800
additional parts that are running on it

00:13:05,279 --> 00:13:09,760
so more pods

00:13:06,800 --> 00:13:11,120
more api et cetera more controllers from

00:13:09,760 --> 00:13:13,920
kubernetes

00:13:11,120 --> 00:13:15,120
and then i have an agent and again these

00:13:13,920 --> 00:13:16,639
are just

00:13:15,120 --> 00:13:19,040
these are kubernetes environments

00:13:16,639 --> 00:13:22,160
running an agent the agent is

00:13:19,040 --> 00:13:24,160
making api calls back to the hub and so

00:13:22,160 --> 00:13:26,560
this is how the model looks and so here

00:13:24,160 --> 00:13:28,079
i'm calling my hub quebec and i'm

00:13:26,560 --> 00:13:28,560
calling one of the attach clusters

00:13:28,079 --> 00:13:31,040
quebec

00:13:28,560 --> 00:13:34,560
alpha for this demo and so i can see

00:13:31,040 --> 00:13:36,959
that cluster manager kind

00:13:34,560 --> 00:13:39,440
on the hub and i can see that cluster

00:13:36,959 --> 00:13:41,120
like kind

00:13:39,440 --> 00:13:43,519
on the attached cluster what does that

00:13:41,120 --> 00:13:49,279
really mean what it means is simply that

00:13:43,519 --> 00:13:54,320
there is a formal api

00:13:49,279 --> 00:13:57,680
cluster what close this down over here

00:13:54,320 --> 00:13:57,680
there's a formal api

00:13:58,399 --> 00:14:05,360
that allows you to say

00:14:02,240 --> 00:14:08,240
i want to attach a cluster

00:14:05,360 --> 00:14:09,519
to a hub by creating a cluster let's cr

00:14:08,240 --> 00:14:11,360
creating this instance

00:14:09,519 --> 00:14:14,000
i give it some parameters about where to

00:14:11,360 --> 00:14:16,160
attach i give it an authorization token

00:14:14,000 --> 00:14:18,240
for the agent to call home

00:14:16,160 --> 00:14:19,279
and then it's able to connect to the hub

00:14:18,240 --> 00:14:22,320
and what that

00:14:19,279 --> 00:14:26,000
looks like now on the hub is

00:14:22,320 --> 00:14:28,800
an instance of a managed cluster

00:14:26,000 --> 00:14:29,760
and so i can see my quebec alpha manage

00:14:28,800 --> 00:14:32,720
cluster

00:14:29,760 --> 00:14:35,279
if i look at the yaml so here i'm simply

00:14:32,720 --> 00:14:37,760
interacting with the kubernetes api

00:14:35,279 --> 00:14:39,120
description of the manage cluster and i

00:14:37,760 --> 00:14:42,320
can see that

00:14:39,120 --> 00:14:44,880
this quebec alpha cluster has been

00:14:42,320 --> 00:14:46,160
accepted by the hub meaning that the hub

00:14:44,880 --> 00:14:47,920
will send it

00:14:46,160 --> 00:14:49,440
information about the policies or the

00:14:47,920 --> 00:14:50,240
apps or other things that it wants to be

00:14:49,440 --> 00:14:52,639
applied

00:14:50,240 --> 00:14:54,800
and i can see the conditions that it's

00:14:52,639 --> 00:14:55,839
currently recognizing the cluster lit as

00:14:54,800 --> 00:14:57,600
available

00:14:55,839 --> 00:14:59,360
it's currently been accepted to be

00:14:57,600 --> 00:15:02,079
managed by the hub

00:14:59,360 --> 00:15:03,199
the admin has taken that action of

00:15:02,079 --> 00:15:05,360
marking

00:15:03,199 --> 00:15:06,240
this sub-resource hub accepts client to

00:15:05,360 --> 00:15:08,320
true

00:15:06,240 --> 00:15:12,560
and so now the cluster like can receive

00:15:08,320 --> 00:15:16,240
work and so in fact if i look at

00:15:12,560 --> 00:15:19,760
the manifest work objects in my quebec

00:15:16,240 --> 00:15:21,680
alpha namespace i can see i'm delivering

00:15:19,760 --> 00:15:22,959
some information over here we have some

00:15:21,680 --> 00:15:24,639
additional layers

00:15:22,959 --> 00:15:26,480
that are managing a search collector

00:15:24,639 --> 00:15:28,320
that are managing the policy controllers

00:15:26,480 --> 00:15:31,680
that are managing the apps

00:15:28,320 --> 00:15:36,320
and those are getting distributed as

00:15:31,680 --> 00:15:36,320
running deployments and other pods

00:15:36,720 --> 00:15:43,600
in a particular name space over here on

00:15:40,560 --> 00:15:47,600
the manage cluster so let me

00:15:43,600 --> 00:15:50,240
agent there we go um and so these pods

00:15:47,600 --> 00:15:51,839
cluster lit add-on app manager are

00:15:50,240 --> 00:15:54,560
specifically created because

00:15:51,839 --> 00:15:56,959
some time ago on the hub a manifest work

00:15:54,560 --> 00:15:58,480
object was applied to the hub

00:15:56,959 --> 00:16:00,720
and then it gets federated down to the

00:15:58,480 --> 00:16:02,000
manage cluster i'm going quickly

00:16:00,720 --> 00:16:04,399
because i just want to kind of get the

00:16:02,000 --> 00:16:07,519
basic idea out there the hub

00:16:04,399 --> 00:16:09,360
connects the actual hub itself is what

00:16:07,519 --> 00:16:11,600
drives all of the intended behavior for

00:16:09,360 --> 00:16:11,920
the fleet the agents connect back to the

00:16:11,600 --> 00:16:14,240
hub

00:16:11,920 --> 00:16:16,639
to get their instructions and all of the

00:16:14,240 --> 00:16:17,920
api which controls that protocol and

00:16:16,639 --> 00:16:20,880
that life cycle

00:16:17,920 --> 00:16:22,320
is part of this upstream api project

00:16:20,880 --> 00:16:23,839
that you can take a look at under open

00:16:22,320 --> 00:16:25,519
cluster management

00:16:23,839 --> 00:16:28,320
there's nothing here that's really uber

00:16:25,519 --> 00:16:30,639
specific it's not specific at all to

00:16:28,320 --> 00:16:32,720
open shift you can run these on any

00:16:30,639 --> 00:16:35,759
kubernetes environment

00:16:32,720 --> 00:16:37,519
so cluster lifecycle and that defined

00:16:35,759 --> 00:16:39,040
api now gives us the building blocks

00:16:37,519 --> 00:16:41,279
that we can

00:16:39,040 --> 00:16:42,800
attach agents and then drive behavior

00:16:41,279 --> 00:16:45,040
down we can also

00:16:42,800 --> 00:16:46,720
provision clusters as i alluded to

00:16:45,040 --> 00:16:48,079
before and for that we're using an

00:16:46,720 --> 00:16:51,040
upstream project

00:16:48,079 --> 00:16:53,199
called hive and the hive project also

00:16:51,040 --> 00:16:56,160
defined some new api so just like we

00:16:53,199 --> 00:16:57,360
we saw manage cluster a moment ago in

00:16:56,160 --> 00:17:01,360
this environment

00:16:57,360 --> 00:17:01,360
on the hub i also have

00:17:01,680 --> 00:17:06,319
a set of objects called cluster

00:17:05,039 --> 00:17:07,600
deployments

00:17:06,319 --> 00:17:09,679
and we'll just look for these in all

00:17:07,600 --> 00:17:11,439
namespaces

00:17:09,679 --> 00:17:13,120
and so now i can see that cluster

00:17:11,439 --> 00:17:15,120
deployment for quebec alpha

00:17:13,120 --> 00:17:17,120
so not only is there an agent which

00:17:15,120 --> 00:17:18,079
connects from quebec alpha back to the

00:17:17,120 --> 00:17:21,199
hub

00:17:18,079 --> 00:17:22,880
it was also provisioned directly from

00:17:21,199 --> 00:17:24,959
the hub cluster by creating one of these

00:17:22,880 --> 00:17:27,280
cluster deployment objects

00:17:24,959 --> 00:17:29,120
in this case named quebec alpha and that

00:17:27,280 --> 00:17:30,160
object then provided all the details

00:17:29,120 --> 00:17:33,919
needed about

00:17:30,160 --> 00:17:35,840
which cloud i'm running it on uh what

00:17:33,919 --> 00:17:37,360
credentials et cetera that i need to to

00:17:35,840 --> 00:17:38,960
go and actually run that process of

00:17:37,360 --> 00:17:41,280
provisioning hosts

00:17:38,960 --> 00:17:42,720
uh sourcing those note those uh

00:17:41,280 --> 00:17:44,799
operating systems into running

00:17:42,720 --> 00:17:46,240
kubernetes nodes

00:17:44,799 --> 00:17:50,000
establishing the control plane

00:17:46,240 --> 00:17:53,919
establishing the worker nodes etc

00:17:50,000 --> 00:17:56,320
so manage cluster cluster lit

00:17:53,919 --> 00:17:57,039
cluster manager those are all api kinds

00:17:56,320 --> 00:17:59,840
that help us

00:17:57,039 --> 00:18:00,640
attach an agent and drive behavior hive

00:17:59,840 --> 00:18:02,640
gives us

00:18:00,640 --> 00:18:04,160
these additional kinds and cluster

00:18:02,640 --> 00:18:05,440
deployment is just one of several that's

00:18:04,160 --> 00:18:07,200
part of hive but again i just want you

00:18:05,440 --> 00:18:09,520
to kind of take away that big idea

00:18:07,200 --> 00:18:12,960
hive helps you provision open shift on

00:18:09,520 --> 00:18:15,200
virtually any cloud environment

00:18:12,960 --> 00:18:16,960
now that you have clusters and again

00:18:15,200 --> 00:18:19,039
we're going fast here

00:18:16,960 --> 00:18:20,400
but now that i can provision clusters

00:18:19,039 --> 00:18:23,039
how do i drive

00:18:20,400 --> 00:18:24,160
consistent configuration against those

00:18:23,039 --> 00:18:26,480
clusters

00:18:24,160 --> 00:18:27,760
so in this area of open cluster

00:18:26,480 --> 00:18:29,200
management we're really looking at

00:18:27,760 --> 00:18:31,440
policy driven

00:18:29,200 --> 00:18:33,200
governance risk and compliance so we're

00:18:31,440 --> 00:18:34,080
looking at roles like a security ops

00:18:33,200 --> 00:18:36,720
person

00:18:34,080 --> 00:18:38,559
or a chief information security officer

00:18:36,720 --> 00:18:42,720
a cso type role

00:18:38,559 --> 00:18:44,640
where that type of role is looking at

00:18:42,720 --> 00:18:45,840
i want to follow a certain standard i

00:18:44,640 --> 00:18:49,440
want to follow

00:18:45,840 --> 00:18:51,280
pci dss i want to follow a nist 853 i

00:18:49,440 --> 00:18:54,320
want to follow

00:18:51,280 --> 00:18:57,440
some other hipaa healthcare government

00:18:54,320 --> 00:18:59,679
type related standard some of those

00:18:57,440 --> 00:19:02,960
standards like pci

00:18:59,679 --> 00:19:04,160
require operational behavior how changes

00:19:02,960 --> 00:19:06,400
get

00:19:04,160 --> 00:19:08,080
validated or vetted before they're made

00:19:06,400 --> 00:19:09,360
and some of them can be reduced to a

00:19:08,080 --> 00:19:12,240
technical control

00:19:09,360 --> 00:19:13,440
like specifically a namespace should not

00:19:12,240 --> 00:19:16,799
allow

00:19:13,440 --> 00:19:19,039
any uh incoming network access

00:19:16,799 --> 00:19:20,000
except on ports one two three four or

00:19:19,039 --> 00:19:22,400
whatever

00:19:20,000 --> 00:19:24,880
and so those technical controls are what

00:19:22,400 --> 00:19:27,520
we are representing now as policies

00:19:24,880 --> 00:19:27,919
that again are another api kind that can

00:19:27,520 --> 00:19:30,480
be

00:19:27,919 --> 00:19:31,760
delivered against those managed clusters

00:19:30,480 --> 00:19:33,919
so if we take a look

00:19:31,760 --> 00:19:35,039
at an example of what that api kind

00:19:33,919 --> 00:19:37,280
looks like

00:19:35,039 --> 00:19:40,240
i might look for policies that are

00:19:37,280 --> 00:19:40,240
defined on the hub

00:19:40,400 --> 00:19:44,960
so we'll do that here on the left so

00:19:43,120 --> 00:19:48,400
i've defined a policy for something like

00:19:44,960 --> 00:19:49,360
auth provider and a little bit of a

00:19:48,400 --> 00:19:50,880
preview

00:19:49,360 --> 00:19:53,360
one of the concepts that's really

00:19:50,880 --> 00:19:56,720
important here is this idea of a

00:19:53,360 --> 00:19:57,600
placement rule which allows me to

00:19:56,720 --> 00:20:02,000
describe

00:19:57,600 --> 00:20:02,000
what clusters i want

00:20:02,159 --> 00:20:07,440
my policies to be deployed against and

00:20:05,360 --> 00:20:10,240
so if i want to pick on something like

00:20:07,440 --> 00:20:10,880
the auth provider i can look at its

00:20:10,240 --> 00:20:13,679
governing

00:20:10,880 --> 00:20:13,679
placement rule

00:20:15,360 --> 00:20:18,480
and look at the yaml and this fits out a

00:20:17,440 --> 00:20:21,679
whole bunch of yaml

00:20:18,480 --> 00:20:26,240
which under the covers is actually

00:20:21,679 --> 00:20:28,480
what says i want to match any cluster

00:20:26,240 --> 00:20:29,520
that says it has an authentication

00:20:28,480 --> 00:20:32,640
profile

00:20:29,520 --> 00:20:33,039
with a value of ht password now if i go

00:20:32,640 --> 00:20:34,640
back

00:20:33,039 --> 00:20:36,320
you can see it's already matched quebec

00:20:34,640 --> 00:20:38,640
alpha if i

00:20:36,320 --> 00:20:40,240
go back to the api and say show me

00:20:38,640 --> 00:20:43,840
what's in

00:20:40,240 --> 00:20:43,840
the managed

00:20:44,559 --> 00:20:51,280
cluster for quebec alpha

00:20:48,960 --> 00:20:53,840
one of the things that you should see is

00:20:51,280 --> 00:20:53,840
a label

00:20:54,320 --> 00:20:58,720
and here i can see the labels include

00:20:56,240 --> 00:21:00,400
authentication profile ht password

00:20:58,720 --> 00:21:02,640
so the placement rule is dynamically

00:21:00,400 --> 00:21:04,240
saying this policy

00:21:02,640 --> 00:21:05,760
should be matched to this specific

00:21:04,240 --> 00:21:11,520
cluster and now

00:21:05,760 --> 00:21:11,520
over here if i go and look i can find

00:21:11,840 --> 00:21:16,080
the oauth kind for that i'm going to

00:21:14,240 --> 00:21:21,840
forget exactly what that kind is

00:21:16,080 --> 00:21:21,840
named so i'll just go back up here

00:21:23,440 --> 00:21:27,280
about the placement rule i want the

00:21:24,799 --> 00:21:27,280
policy

00:21:27,520 --> 00:21:31,840
and so here i'm going to show you that

00:21:32,960 --> 00:21:37,200
that policy is defining

00:21:42,080 --> 00:21:47,840
a required object for the oauth

00:21:44,720 --> 00:21:51,600
configuration on my openshift cluster

00:21:47,840 --> 00:21:53,039
kind of oh and apparently

00:21:51,600 --> 00:21:55,600
spelling is important when you're

00:21:53,039 --> 00:21:58,000
talking about api constructs who knew

00:21:55,600 --> 00:22:00,240
and in this case if i look at the

00:21:58,000 --> 00:22:01,679
content of that object

00:22:00,240 --> 00:22:04,240
the short answer is i'm going to see

00:22:01,679 --> 00:22:06,080
this ht password identity provider

00:22:04,240 --> 00:22:07,679
and it's there not because the admin

00:22:06,080 --> 00:22:10,799
went and manually created it

00:22:07,679 --> 00:22:12,720
on that quebec alpha managed cluster

00:22:10,799 --> 00:22:14,720
but rather because an admin went to the

00:22:12,720 --> 00:22:16,159
hub and said here's my policy here's my

00:22:14,720 --> 00:22:17,840
placement rule

00:22:16,159 --> 00:22:19,600
go make it happen right and it might

00:22:17,840 --> 00:22:20,559
match one cluster it might match 100

00:22:19,600 --> 00:22:22,640
clusters

00:22:20,559 --> 00:22:26,000
the hub is that control plane which is

00:22:22,640 --> 00:22:27,760
driving consistency across the fleet and

00:22:26,000 --> 00:22:28,159
the way that these policy controllers

00:22:27,760 --> 00:22:30,960
work

00:22:28,159 --> 00:22:34,000
ultimately allow us to drive those

00:22:30,960 --> 00:22:36,720
defined policy apis on the hub

00:22:34,000 --> 00:22:37,679
propagate them down to a managed cluster

00:22:36,720 --> 00:22:39,919
and not only

00:22:37,679 --> 00:22:42,000
create the object the first time but

00:22:39,919 --> 00:22:43,200
help give us a feedback loop that helps

00:22:42,000 --> 00:22:45,280
us understand

00:22:43,200 --> 00:22:46,559
whether it's constantly in compliance or

00:22:45,280 --> 00:22:48,799
not

00:22:46,559 --> 00:22:49,840
policies you can create your own there's

00:22:48,799 --> 00:22:51,360
a great blog

00:22:49,840 --> 00:22:53,440
that we publish to talk about how to

00:22:51,360 --> 00:22:57,280
create your own policy controller

00:22:53,440 --> 00:23:00,559
and in the community again is a

00:22:57,280 --> 00:23:02,480
set that policies that's being defined

00:23:00,559 --> 00:23:04,480
with many participants including red hat

00:23:02,480 --> 00:23:08,799
and nist which helps us

00:23:04,480 --> 00:23:12,000
create sort of a stable consistent

00:23:08,799 --> 00:23:14,400
library of policies out of the box that

00:23:12,000 --> 00:23:18,400
are consistent with technical controls

00:23:14,400 --> 00:23:18,880
in nist 853 and so you'll see some that

00:23:18,400 --> 00:23:20,400
are

00:23:18,880 --> 00:23:22,240
already there some of these you saw in

00:23:20,400 --> 00:23:24,480
my environment like defined roles or

00:23:22,240 --> 00:23:27,600
role bindings as examples

00:23:24,480 --> 00:23:30,640
so policies again an open source way

00:23:27,600 --> 00:23:31,760
to declare i want a certain

00:23:30,640 --> 00:23:34,320
configuration to be

00:23:31,760 --> 00:23:36,320
available or i might want to drive

00:23:34,320 --> 00:23:38,799
behavior like opa so we can ensure that

00:23:36,320 --> 00:23:41,440
the opa gatekeeper policy framework

00:23:38,799 --> 00:23:43,520
is running on every cluster and that the

00:23:41,440 --> 00:23:44,320
rego statements that oppa uses to

00:23:43,520 --> 00:23:46,559
configure

00:23:44,320 --> 00:23:50,080
some dynamic behavior are applied

00:23:46,559 --> 00:23:50,799
consistently to the fleet as well all

00:23:50,080 --> 00:23:52,240
right

00:23:50,799 --> 00:23:54,480
we're pushing forward here we got 20

00:23:52,240 --> 00:23:56,960
minutes to go

00:23:54,480 --> 00:23:58,720
we can derive creating clusters we can

00:23:56,960 --> 00:24:00,400
drive attaching cluster lists

00:23:58,720 --> 00:24:01,919
and managing clusters we can drive

00:24:00,400 --> 00:24:03,200
policy that gives us consistent

00:24:01,919 --> 00:24:06,799
configuration across

00:24:03,200 --> 00:24:09,600
clusters what about the apps

00:24:06,799 --> 00:24:10,000
so in this case typically the devops sre

00:24:09,600 --> 00:24:12,559
role

00:24:10,000 --> 00:24:13,840
or the it operations role is what we're

00:24:12,559 --> 00:24:16,480
focused on

00:24:13,840 --> 00:24:17,840
in this project from a user community

00:24:16,480 --> 00:24:20,559
perspective

00:24:17,840 --> 00:24:22,400
open cluster management is not really

00:24:20,559 --> 00:24:24,559
scope to try to make it easier to

00:24:22,400 --> 00:24:27,200
scaffold an application

00:24:24,559 --> 00:24:28,640
or as a developer simply to have an edit

00:24:27,200 --> 00:24:31,679
compile debug loop

00:24:28,640 --> 00:24:32,000
with my kubernetes cluster it's really

00:24:31,679 --> 00:24:34,640
more

00:24:32,000 --> 00:24:35,840
about the roles that are helping take an

00:24:34,640 --> 00:24:38,720
application

00:24:35,840 --> 00:24:39,919
from an early stage like development and

00:24:38,720 --> 00:24:42,159
promote it

00:24:39,919 --> 00:24:43,520
across the various stages of the

00:24:42,159 --> 00:24:45,600
pipeline

00:24:43,520 --> 00:24:47,039
and then when it's in production deal

00:24:45,600 --> 00:24:49,039
with aspects like

00:24:47,039 --> 00:24:50,559
scaling it out placing it more

00:24:49,039 --> 00:24:53,679
dynamically

00:24:50,559 --> 00:24:55,679
adjusting how much

00:24:53,679 --> 00:24:57,360
adjusting perhaps moving applications

00:24:55,679 --> 00:24:59,360
from one cluster to another because of

00:24:57,360 --> 00:25:01,279
maintenance issues or whatever

00:24:59,360 --> 00:25:02,960
but it's really more about the work the

00:25:01,279 --> 00:25:04,320
roles which are actually

00:25:02,960 --> 00:25:06,240
helping to manage the running

00:25:04,320 --> 00:25:08,799
applications once they've been

00:25:06,240 --> 00:25:10,159
developed and created and the core idea

00:25:08,799 --> 00:25:11,760
here is is really one that's been

00:25:10,159 --> 00:25:13,039
consistent with continuous delivery for

00:25:11,760 --> 00:25:15,840
a long time

00:25:13,039 --> 00:25:18,080
you attach a subscription to a cluster

00:25:15,840 --> 00:25:20,159
and it's going to go and collect

00:25:18,080 --> 00:25:22,559
information from that subscription and

00:25:20,159 --> 00:25:24,400
apply it to that cluster

00:25:22,559 --> 00:25:26,159
okay where do i get my content from

00:25:24,400 --> 00:25:28,400
subscriptions

00:25:26,159 --> 00:25:29,200
ultimately there's a couple of options

00:25:28,400 --> 00:25:32,400
github

00:25:29,200 --> 00:25:35,039
or bitbucket or gitlab

00:25:32,400 --> 00:25:36,880
your favorite get uh hopefully that's

00:25:35,039 --> 00:25:38,880
one of your favorite gets if not

00:25:36,880 --> 00:25:40,000
come join the community add support for

00:25:38,880 --> 00:25:40,960
your favorite get if it's not one of

00:25:40,000 --> 00:25:42,720
those three

00:25:40,960 --> 00:25:44,640
but github is probably going to be the

00:25:42,720 --> 00:25:46,320
most common it's definitely the most

00:25:44,640 --> 00:25:47,520
common that you see in examples in the

00:25:46,320 --> 00:25:49,679
project today

00:25:47,520 --> 00:25:51,200
where i have a set of kubernetes

00:25:49,679 --> 00:25:53,760
manifest maybe they're

00:25:51,200 --> 00:25:56,320
straight yaml maybe their helm charts

00:25:53,760 --> 00:25:57,679
maybe i'm using customize but i've got

00:25:56,320 --> 00:26:00,799
that kubernetes

00:25:57,679 --> 00:26:03,600
set of declared objects in my git repo

00:26:00,799 --> 00:26:05,679
and i create a subscription that says go

00:26:03,600 --> 00:26:10,159
get content from this git repo

00:26:05,679 --> 00:26:11,520
as it changes over time now

00:26:10,159 --> 00:26:14,000
that's kind of interesting right now

00:26:11,520 --> 00:26:14,880
instead of having to apply a change

00:26:14,000 --> 00:26:17,600
directly

00:26:14,880 --> 00:26:18,880
we're driving a git ops driven model and

00:26:17,600 --> 00:26:20,880
what's a little bit different

00:26:18,880 --> 00:26:22,720
from the way that projects like argo do

00:26:20,880 --> 00:26:24,480
it and i'll comment on that just a

00:26:22,720 --> 00:26:26,559
little in just a minute

00:26:24,480 --> 00:26:28,080
but here that notion of dynamic

00:26:26,559 --> 00:26:30,400
placement behavior

00:26:28,080 --> 00:26:31,120
again plays a significant role in how

00:26:30,400 --> 00:26:33,679
you

00:26:31,120 --> 00:26:34,400
not only drive the link from github to

00:26:33,679 --> 00:26:37,360
the hub

00:26:34,400 --> 00:26:39,039
right from get to your hub cluster but

00:26:37,360 --> 00:26:42,159
how i dynamically

00:26:39,039 --> 00:26:43,120
deliver content to the fleet and git is

00:26:42,159 --> 00:26:44,640
not the only

00:26:43,120 --> 00:26:47,039
source you can also pull content from a

00:26:44,640 --> 00:26:48,559
helm repo from an object store

00:26:47,039 --> 00:26:50,240
and there's even kind of a built-in way

00:26:48,559 --> 00:26:51,840
that really is only used for dev

00:26:50,240 --> 00:26:53,279
where i kind of templatize an object and

00:26:51,840 --> 00:26:55,520
put it in a name space and kind of treat

00:26:53,279 --> 00:26:57,279
the name space like a poor man catalog

00:26:55,520 --> 00:26:59,360
but really it's going to be probably get

00:26:57,279 --> 00:27:01,279
helm or an object store

00:26:59,360 --> 00:27:03,520
and so if i just want to apply it to one

00:27:01,279 --> 00:27:06,159
cluster i create the subscription

00:27:03,520 --> 00:27:07,440
i'm pulling content continuously it'll

00:27:06,159 --> 00:27:09,200
get updated

00:27:07,440 --> 00:27:11,440
but where this becomes more interesting

00:27:09,200 --> 00:27:12,720
is when i have content that gets applied

00:27:11,440 --> 00:27:14,240
to a hub

00:27:12,720 --> 00:27:16,080
and then i'm using those dynamic

00:27:14,240 --> 00:27:16,720
placement rules to deliver my

00:27:16,080 --> 00:27:19,120
application

00:27:16,720 --> 00:27:20,000
out and so if i take a look again at

00:27:19,120 --> 00:27:26,080
kind of what that looks

00:27:20,000 --> 00:27:26,080
like here i've got a subscription

00:27:27,039 --> 00:27:31,039
that is on the hub so remember on the

00:27:29,360 --> 00:27:34,799
left i'm dealing with a hub

00:27:31,039 --> 00:27:37,919
on the right i'm dealing with

00:27:34,799 --> 00:27:38,880
my manage cluster and that one showing

00:27:37,919 --> 00:27:40,880
me propagation

00:27:38,880 --> 00:27:42,320
failed so i had something that changed

00:27:40,880 --> 00:27:43,840
my get repo in the last couple of

00:27:42,320 --> 00:27:44,640
minutes that triggered a change so one

00:27:43,840 --> 00:27:46,320
of my

00:27:44,640 --> 00:27:47,520
partners is making a change there but

00:27:46,320 --> 00:27:48,880
it's not going to affect what i want to

00:27:47,520 --> 00:27:51,440
show you here

00:27:48,880 --> 00:27:53,520
but the subscription itself is saying go

00:27:51,440 --> 00:27:57,840
get content from a git repo

00:27:53,520 --> 00:27:57,840
that example happens to be coming from

00:27:58,080 --> 00:28:01,520
a repo called k it's pac-man app you can

00:28:00,480 --> 00:28:03,600
go play with this

00:28:01,520 --> 00:28:05,360
behind the scenes if you want an example

00:28:03,600 --> 00:28:06,960
for a project today

00:28:05,360 --> 00:28:08,640
but again that notion of placement rule

00:28:06,960 --> 00:28:13,600
becomes really powerful

00:28:08,640 --> 00:28:16,399
because i can say where i want

00:28:13,600 --> 00:28:17,919
that application to be deployed against

00:28:16,399 --> 00:28:20,399
a running environment

00:28:17,919 --> 00:28:22,640
and so in this case it's targeted to a

00:28:20,399 --> 00:28:24,960
few

00:28:22,640 --> 00:28:26,000
unless my cohort has made a change

00:28:24,960 --> 00:28:28,320
behind me

00:28:26,000 --> 00:28:29,360
it should be running on three clusters

00:28:28,320 --> 00:28:31,279
okay so

00:28:29,360 --> 00:28:32,799
quebec bravo got taken out but right now

00:28:31,279 --> 00:28:34,559
it's running on two clusters

00:28:32,799 --> 00:28:35,919
so something changed in the running

00:28:34,559 --> 00:28:37,760
clusters and

00:28:35,919 --> 00:28:39,200
instead of running on alpha bravo and

00:28:37,760 --> 00:28:40,240
charlie it's now just running on alpha

00:28:39,200 --> 00:28:42,320
and charlie

00:28:40,240 --> 00:28:43,840
still good the placement rule says run

00:28:42,320 --> 00:28:47,039
it on at least

00:28:43,840 --> 00:28:48,640
clusters that match these labels and in

00:28:47,039 --> 00:28:51,200
this case there are only two clusters in

00:28:48,640 --> 00:28:54,159
my fleet that currently match that label

00:28:51,200 --> 00:28:56,320
so we're doing good there in this case

00:28:54,159 --> 00:28:58,559
the application model

00:28:56,320 --> 00:29:00,320
drives this notion of placement rules as

00:28:58,559 --> 00:29:01,120
kind of the unique way that open cluster

00:29:00,320 --> 00:29:04,159
management

00:29:01,120 --> 00:29:06,320
delivers content to the fleet now with

00:29:04,159 --> 00:29:08,000
that let's take a look at pacman so i've

00:29:06,320 --> 00:29:09,120
showed you kind of the api from the

00:29:08,000 --> 00:29:10,640
command line

00:29:09,120 --> 00:29:12,960
things that you can assemble from the

00:29:10,640 --> 00:29:14,640
upstream project

00:29:12,960 --> 00:29:16,159
one of the ways that red hat delivers

00:29:14,640 --> 00:29:17,679
content from this community is in an

00:29:16,159 --> 00:29:18,720
offering called red hat advanced cluster

00:29:17,679 --> 00:29:20,480
management

00:29:18,720 --> 00:29:21,919
i'm going to show you that ui because

00:29:20,480 --> 00:29:24,000
it's going to show you the same api

00:29:21,919 --> 00:29:25,520
concepts that we've been discussing

00:29:24,000 --> 00:29:26,960
you can go play with us i would love for

00:29:25,520 --> 00:29:28,240
you to but really what i want to get you

00:29:26,960 --> 00:29:30,480
enticed to do

00:29:28,240 --> 00:29:32,559
is to come and play with the upstream

00:29:30,480 --> 00:29:33,840
project itself those community operators

00:29:32,559 --> 00:29:36,159
etc

00:29:33,840 --> 00:29:38,080
so what i'll do is i'll kind of switch

00:29:36,159 --> 00:29:39,760
gears into showing you some prettier

00:29:38,080 --> 00:29:42,799
pictures

00:29:39,760 --> 00:29:43,760
rather than the api layout that we saw a

00:29:42,799 --> 00:29:45,679
minute ago

00:29:43,760 --> 00:29:47,600
and so here i can see those same managed

00:29:45,679 --> 00:29:51,600
clusters that were attached

00:29:47,600 --> 00:29:53,760
shortly attached in the in the console

00:29:51,600 --> 00:29:55,039
but now i can just see a ui that shows

00:29:53,760 --> 00:29:57,520
me what's running

00:29:55,039 --> 00:29:59,200
and i can see a little more clearly

00:29:57,520 --> 00:30:01,200
what's going on in that cluster

00:29:59,200 --> 00:30:03,039
i can see the version of kubernetes it's

00:30:01,200 --> 00:30:06,399
running i can get access to the

00:30:03,039 --> 00:30:07,919
cluster api the console i can show you

00:30:06,399 --> 00:30:09,120
my creds but i don't really want to so

00:30:07,919 --> 00:30:10,480
i'm not going to do that

00:30:09,120 --> 00:30:12,799
and then we're pulling information like

00:30:10,480 --> 00:30:14,880
the nodes and then details like cluster

00:30:12,799 --> 00:30:17,760
settings and whether things are healthy

00:30:14,880 --> 00:30:19,200
at this point in time so here we're

00:30:17,760 --> 00:30:20,480
driving this behavior now one of the

00:30:19,200 --> 00:30:21,760
other things i want you to pay attention

00:30:20,480 --> 00:30:23,919
to

00:30:21,760 --> 00:30:24,880
is i have openshift clusters that are

00:30:23,919 --> 00:30:26,559
not only running

00:30:24,880 --> 00:30:29,200
in a single cloud but actually running

00:30:26,559 --> 00:30:31,120
in multiple clouds at the same time

00:30:29,200 --> 00:30:33,840
and so now what i'm getting with

00:30:31,120 --> 00:30:34,559
openshift is this consistent open hybrid

00:30:33,840 --> 00:30:36,399
platform

00:30:34,559 --> 00:30:38,720
right so we'll call that the open hybrid

00:30:36,399 --> 00:30:40,159
cloud and my application which i'm going

00:30:38,720 --> 00:30:43,120
to show you in just a minute

00:30:40,159 --> 00:30:44,960
can assume in every environment that my

00:30:43,120 --> 00:30:46,320
openshift distribution of kubernetes is

00:30:44,960 --> 00:30:47,760
going to look the same

00:30:46,320 --> 00:30:49,360
and that becomes powerful now if i want

00:30:47,760 --> 00:30:50,720
to scale things across different clouds

00:30:49,360 --> 00:30:54,000
without having to worry too much about

00:30:50,720 --> 00:30:55,520
all the nuances between clouds

00:30:54,000 --> 00:30:57,360
showed you manage clusters i showed you

00:30:55,520 --> 00:30:58,240
policy this is what policy looks like in

00:30:57,360 --> 00:31:00,880
the ui

00:30:58,240 --> 00:31:02,000
we looked at that auth provider policy

00:31:00,880 --> 00:31:05,120
very quickly

00:31:02,000 --> 00:31:06,799
we can see that i had one cluster

00:31:05,120 --> 00:31:08,720
notice now that instead of just showing

00:31:06,799 --> 00:31:09,919
that it's delivered that configuration

00:31:08,720 --> 00:31:11,360
to the cluster

00:31:09,919 --> 00:31:13,600
i can see that it's constantly

00:31:11,360 --> 00:31:14,960
reconciling to see if that cluster is

00:31:13,600 --> 00:31:17,279
within compliance

00:31:14,960 --> 00:31:18,559
and so here i'm attached it's enforcing

00:31:17,279 --> 00:31:21,279
that change

00:31:18,559 --> 00:31:23,120
i can see that oauth provider object

00:31:21,279 --> 00:31:24,240
that's being applied to a configuration

00:31:23,120 --> 00:31:26,559
policy

00:31:24,240 --> 00:31:28,399
and i can see the actual expression so

00:31:26,559 --> 00:31:30,480
this is the placement rule that we saw

00:31:28,399 --> 00:31:32,480
in the console just a minute ago and

00:31:30,480 --> 00:31:32,960
again that authentication profile must

00:31:32,480 --> 00:31:36,159
match

00:31:32,960 --> 00:31:38,159
ht password quebec alpha has that label

00:31:36,159 --> 00:31:39,200
it's applied it's being validated it's

00:31:38,159 --> 00:31:41,519
compliant

00:31:39,200 --> 00:31:43,200
great some of the other examples here

00:31:41,519 --> 00:31:44,240
this shows up better in the user

00:31:43,200 --> 00:31:46,399
experience

00:31:44,240 --> 00:31:47,760
some of these policies are not in

00:31:46,399 --> 00:31:49,519
compliance

00:31:47,760 --> 00:31:50,799
in this case i have an audit policy

00:31:49,519 --> 00:31:53,360
which is simply

00:31:50,799 --> 00:31:53,919
saying i want you to tell me whenever a

00:31:53,360 --> 00:31:56,320
cluster

00:31:53,919 --> 00:31:57,519
doesn't match this policy or in this

00:31:56,320 --> 00:32:01,600
case this rule

00:31:57,519 --> 00:32:03,039
is a sort of view auditor role

00:32:01,600 --> 00:32:05,120
i can see what that looks like here i

00:32:03,039 --> 00:32:07,120
can see that kubernetes object being

00:32:05,120 --> 00:32:09,840
defined as part of the policy

00:32:07,120 --> 00:32:11,440
and if the auditor role doesn't exist on

00:32:09,840 --> 00:32:13,039
the manage cluster

00:32:11,440 --> 00:32:15,360
then i want you to report that as a

00:32:13,039 --> 00:32:17,120
violation and so here it's matching

00:32:15,360 --> 00:32:18,399
every cluster in my fleet

00:32:17,120 --> 00:32:20,399
and it can tell me they're all not

00:32:18,399 --> 00:32:21,039
compliant it's going to generate an

00:32:20,399 --> 00:32:24,080
alert

00:32:21,039 --> 00:32:25,440
when it finds any non-compliant cluster

00:32:24,080 --> 00:32:27,440
i can have that trigger additional

00:32:25,440 --> 00:32:28,799
behavior to notify me to reconcile it

00:32:27,440 --> 00:32:30,159
maybe i'm using a different automation

00:32:28,799 --> 00:32:32,880
tool for some reason

00:32:30,159 --> 00:32:35,519
it might be a type of policy that can't

00:32:32,880 --> 00:32:37,840
automatically correct a problem

00:32:35,519 --> 00:32:39,760
what kind of policy might that be well

00:32:37,840 --> 00:32:42,480
it turns out when you've got

00:32:39,760 --> 00:32:44,559
a container that's running in a hub in a

00:32:42,480 --> 00:32:46,399
in a cluster that's in the fleet

00:32:44,559 --> 00:32:47,919
and that container image has a

00:32:46,399 --> 00:32:49,519
vulnerability

00:32:47,919 --> 00:32:52,640
we can't correct it from the control

00:32:49,519 --> 00:32:56,320
plane we have to look for the user

00:32:52,640 --> 00:32:57,760
to fix the image deliver a new version

00:32:56,320 --> 00:32:59,360
throughout whatever pipeline your

00:32:57,760 --> 00:33:00,720
organization defines

00:32:59,360 --> 00:33:02,720
and ultimately update that running

00:33:00,720 --> 00:33:05,519
container instance in the fleet

00:33:02,720 --> 00:33:08,000
and at that point it'll take away in

00:33:05,519 --> 00:33:09,519
this case the violation because i have

00:33:08,000 --> 00:33:11,519
something that's non-compliant in that

00:33:09,519 --> 00:33:14,720
case the operator's deployed

00:33:11,519 --> 00:33:15,760
but on quebec alpha i've got some

00:33:14,720 --> 00:33:19,120
container

00:33:15,760 --> 00:33:20,000
in the book import namespace which is

00:33:19,120 --> 00:33:21,360
not

00:33:20,000 --> 00:33:23,360
that has a vulnerability in the

00:33:21,360 --> 00:33:25,519
container instance it's running

00:33:23,360 --> 00:33:26,480
because it needs a newer version of the

00:33:25,519 --> 00:33:28,960
image

00:33:26,480 --> 00:33:30,320
running that container so policies can

00:33:28,960 --> 00:33:31,919
be really powerful there's also some

00:33:30,320 --> 00:33:34,000
examples with opa

00:33:31,919 --> 00:33:35,600
which we're not going to get to but

00:33:34,000 --> 00:33:37,200
ultimately policies now allow us to

00:33:35,600 --> 00:33:38,799
drive that consistent configuration

00:33:37,200 --> 00:33:41,360
everywhere

00:33:38,799 --> 00:33:42,799
okay graded clusters manage clusters

00:33:41,360 --> 00:33:44,480
deliver policy now let's talk about

00:33:42,799 --> 00:33:46,559
applications

00:33:44,480 --> 00:33:48,799
and for that i'll come back and switch

00:33:46,559 --> 00:33:48,799
here

00:33:49,120 --> 00:33:54,000
so i i alluded to the pacman example and

00:33:52,159 --> 00:33:55,360
in my slide it was running on three

00:33:54,000 --> 00:33:57,519
different clusters

00:33:55,360 --> 00:33:59,440
in this case the placement rule

00:33:57,519 --> 00:34:00,000
attempted to take one of those clusters

00:33:59,440 --> 00:34:01,600
out

00:34:00,000 --> 00:34:04,080
and so one of the clusters that it

00:34:01,600 --> 00:34:06,799
should be running on actually now it's

00:34:04,080 --> 00:34:08,159
back up um so now it's actually deployed

00:34:06,799 --> 00:34:09,839
it against bravo again

00:34:08,159 --> 00:34:11,280
so behind the scenes when it went into

00:34:09,839 --> 00:34:13,599
that failed state

00:34:11,280 --> 00:34:14,560
something on bravo changed now it's

00:34:13,599 --> 00:34:16,079
changed back

00:34:14,560 --> 00:34:17,359
now it's actually deployed it and

00:34:16,079 --> 00:34:18,480
running on these three different

00:34:17,359 --> 00:34:21,359
clusters

00:34:18,480 --> 00:34:23,200
and i can actually see the route that

00:34:21,359 --> 00:34:25,040
it's running behind

00:34:23,200 --> 00:34:27,520
and even open that application up if i

00:34:25,040 --> 00:34:29,520
wanted to do that or anyone that's

00:34:27,520 --> 00:34:31,599
paying enough attention at home and goes

00:34:29,520 --> 00:34:32,960
and pokes at that url we'll see pac-man

00:34:31,599 --> 00:34:35,440
and you can

00:34:32,960 --> 00:34:36,399
play along at home for fun running in my

00:34:35,440 --> 00:34:38,320
environment

00:34:36,399 --> 00:34:39,919
in that case it's running on one cluster

00:34:38,320 --> 00:34:41,359
and then it's got a route with a load

00:34:39,919 --> 00:34:44,000
balancer in front of it

00:34:41,359 --> 00:34:45,440
and so here i've got two openshift

00:34:44,000 --> 00:34:47,760
clusters so alpha

00:34:45,440 --> 00:34:48,800
and charlie are on aws bravo is on

00:34:47,760 --> 00:34:51,359
google

00:34:48,800 --> 00:34:52,960
and the public route in front will pick

00:34:51,359 --> 00:34:54,000
one of the three different clusters to

00:34:52,960 --> 00:34:56,720
run it on

00:34:54,000 --> 00:34:59,119
and the way that this app got created

00:34:56,720 --> 00:35:00,960
and was deployed in that cluster

00:34:59,119 --> 00:35:02,720
was through a subscription which was

00:35:00,960 --> 00:35:05,280
matched to a placement rule

00:35:02,720 --> 00:35:06,960
so at a high level the key value here is

00:35:05,280 --> 00:35:10,000
that open cluster management

00:35:06,960 --> 00:35:11,440
helps you drive continuous updates and

00:35:10,000 --> 00:35:14,400
dynamically place them

00:35:11,440 --> 00:35:16,400
against clusters in your fleet and it

00:35:14,400 --> 00:35:18,079
might have one subscription for the app

00:35:16,400 --> 00:35:20,560
it might have multiple so i might have

00:35:18,079 --> 00:35:24,240
the front end in this example

00:35:20,560 --> 00:35:27,440
both the back end and the

00:35:24,240 --> 00:35:28,480
um the front end itself are under one

00:35:27,440 --> 00:35:31,119
subscription

00:35:28,480 --> 00:35:34,079
but i could have broken these up and so

00:35:31,119 --> 00:35:35,760
these two deployments could be placed

00:35:34,079 --> 00:35:37,280
governed by different placement rules if

00:35:35,760 --> 00:35:38,800
i wanted to have the data plane in a

00:35:37,280 --> 00:35:40,560
separate set of clusters

00:35:38,800 --> 00:35:42,000
than the front end control plane or the

00:35:40,560 --> 00:35:44,800
front-end api or ui

00:35:42,000 --> 00:35:46,880
environment um and again all of this is

00:35:44,800 --> 00:35:47,200
backed by api so here again just going

00:35:46,880 --> 00:35:49,359
back

00:35:47,200 --> 00:35:51,359
a quick review these are the same

00:35:49,359 --> 00:35:54,000
commands just run from part of

00:35:51,359 --> 00:35:55,839
the ui called visual web terminal and i

00:35:54,000 --> 00:35:58,079
can see the cluster manager

00:35:55,839 --> 00:35:58,960
the cluster manager again is that api

00:35:58,079 --> 00:36:01,680
construct

00:35:58,960 --> 00:36:02,640
that says i will take over the role of a

00:36:01,680 --> 00:36:05,599
hub

00:36:02,640 --> 00:36:06,640
and i create this as part of that

00:36:05,599 --> 00:36:08,240
operator

00:36:06,640 --> 00:36:10,320
then i've got manage clusters like

00:36:08,240 --> 00:36:12,800
quebec alpha this is a

00:36:10,320 --> 00:36:13,440
api construct that says there is some

00:36:12,800 --> 00:36:15,680
remote

00:36:13,440 --> 00:36:17,040
cluster that is attached to this hub and

00:36:15,680 --> 00:36:19,680
wants to accept

00:36:17,040 --> 00:36:21,440
directives from you those directives are

00:36:19,680 --> 00:36:23,599
things like policies so

00:36:21,440 --> 00:36:26,000
i want to drive how i configure my auth

00:36:23,599 --> 00:36:29,040
provider i can do that through a policy

00:36:26,000 --> 00:36:30,560
and i can place it against certain

00:36:29,040 --> 00:36:32,480
clusters

00:36:30,560 --> 00:36:33,760
and then i can drive subscription

00:36:32,480 --> 00:36:35,760
behaviors as well

00:36:33,760 --> 00:36:37,440
if i want to drive a subscription that

00:36:35,760 --> 00:36:39,040
applies policy like if you go and look

00:36:37,440 --> 00:36:41,680
at the policy collection

00:36:39,040 --> 00:36:43,200
repo that i had up a minute ago i can

00:36:41,680 --> 00:36:45,920
actually deploy that

00:36:43,200 --> 00:36:47,839
from a git repository so i can have all

00:36:45,920 --> 00:36:48,720
of my configuration policies driven from

00:36:47,839 --> 00:36:51,359
get

00:36:48,720 --> 00:36:51,920
applied to the hub dynamically placed

00:36:51,359 --> 00:36:55,520
against

00:36:51,920 --> 00:36:58,079
clusters in my fleet so

00:36:55,520 --> 00:36:59,359
overall this gives you now a way with a

00:36:58,079 --> 00:37:02,800
community project

00:36:59,359 --> 00:37:04,720
to make that process of creating new

00:37:02,800 --> 00:37:06,800
uh openshift or kubernetes clusters

00:37:04,720 --> 00:37:09,119
easier and then

00:37:06,800 --> 00:37:10,320
managing them over time i did not have

00:37:09,119 --> 00:37:12,160
time today and i won't be able to show

00:37:10,320 --> 00:37:13,839
you how we do observability

00:37:12,160 --> 00:37:15,200
i'll show you this fancy picture because

00:37:13,839 --> 00:37:16,960
what i want you to take away is really

00:37:15,200 --> 00:37:19,520
just that we're using other open source

00:37:16,960 --> 00:37:22,079
projects like thanos and grafana

00:37:19,520 --> 00:37:23,520
in order to attach prometheus from a

00:37:22,079 --> 00:37:27,040
managed cluster

00:37:23,520 --> 00:37:29,280
and drive a a collector

00:37:27,040 --> 00:37:31,119
back into that hub cluster that

00:37:29,280 --> 00:37:32,000
understands health metrics for managed

00:37:31,119 --> 00:37:34,960
clusters

00:37:32,000 --> 00:37:36,800
and so now we'll be able to actually see

00:37:34,960 --> 00:37:38,960
how an application is running

00:37:36,800 --> 00:37:40,640
is it running correctly are the alerts

00:37:38,960 --> 00:37:41,760
firing on that manage cluster

00:37:40,640 --> 00:37:43,359
and we'll be able to see all that from

00:37:41,760 --> 00:37:44,480
the hub without having to log into each

00:37:43,359 --> 00:37:45,760
of those different consoles and

00:37:44,480 --> 00:37:48,240
dashboards

00:37:45,760 --> 00:37:49,599
and then i showed you some of the ui

00:37:48,240 --> 00:37:51,760
here just

00:37:49,599 --> 00:37:54,400
a whirlwind tour what i want you to take

00:37:51,760 --> 00:37:56,560
away is not any particular little detail

00:37:54,400 --> 00:37:58,240
but rather i want you to take a look at

00:37:56,560 --> 00:38:00,960
the upstream project i want you to

00:37:58,240 --> 00:38:02,320
to get involved and in this case we do

00:38:00,960 --> 00:38:05,119
have a new offering

00:38:02,320 --> 00:38:06,880
a new version coming out very very soon

00:38:05,119 --> 00:38:08,720
and we'll see some updates the ones that

00:38:06,880 --> 00:38:10,160
are highlighted here

00:38:08,720 --> 00:38:12,320
you can also deploy this through an

00:38:10,160 --> 00:38:14,560
operator in the openshift catalog

00:38:12,320 --> 00:38:15,359
but the little parts the cluster manager

00:38:14,560 --> 00:38:17,040
the cluster

00:38:15,359 --> 00:38:19,359
policy controllers the application

00:38:17,040 --> 00:38:20,720
subscriptions those are all parts that

00:38:19,359 --> 00:38:23,680
are part of the

00:38:20,720 --> 00:38:25,760
community operator hub today so

00:38:23,680 --> 00:38:28,960
applications use this multi-cluster

00:38:25,760 --> 00:38:30,480
subscription operator hive allows you to

00:38:28,960 --> 00:38:31,520
create openshift clusters against

00:38:30,480 --> 00:38:33,119
different

00:38:31,520 --> 00:38:34,480
cloud providers cluster manager and

00:38:33,119 --> 00:38:36,160
cluster what we talked about quite a bit

00:38:34,480 --> 00:38:37,760
so

00:38:36,160 --> 00:38:39,200
go take a look if there are any

00:38:37,760 --> 00:38:40,560
questions i'm happy to take those

00:38:39,200 --> 00:38:42,560
we should have about five minutes i

00:38:40,560 --> 00:38:45,920
think left for questions

00:38:42,560 --> 00:38:46,720
if not i will happily dive back in if we

00:38:45,920 --> 00:38:49,040
want to see something

00:38:46,720 --> 00:38:50,560
more detailed or yield the time for

00:38:49,040 --> 00:38:52,800
everyone to get coffee before the next

00:38:50,560 --> 00:38:54,880
talk

00:38:52,800 --> 00:39:00,160
and i'm looking in the q a and looking

00:38:54,880 --> 00:39:01,599
in the chat for questions

00:39:00,160 --> 00:39:02,880
and norma maybe you can help me if

00:39:01,599 --> 00:39:05,839
there's another place i should be

00:39:02,880 --> 00:39:05,839
looking for these as well

00:39:12,960 --> 00:39:18,480
normal let me confirm i do not hear your

00:39:16,000 --> 00:39:18,480
audio

00:39:19,839 --> 00:39:23,359
and our moderator may have stepped away

00:39:21,280 --> 00:39:29,839
for just a moment um are there any

00:39:23,359 --> 00:39:29,839
questions from the audience

00:39:32,800 --> 00:39:38,640
okay and i don't see any raised hands

00:39:36,079 --> 00:39:39,520
um appreciate everyone's time today in

00:39:38,640 --> 00:39:41,520
the pandemic

00:39:39,520 --> 00:39:43,200
if there's any more questions if there

00:39:41,520 --> 00:39:43,760
are anything if you poke around in the

00:39:43,200 --> 00:39:47,280
project

00:39:43,760 --> 00:39:50,800
and want to reach out you can reach me

00:39:47,280 --> 00:39:52,640
in a number of ways probably

00:39:50,800 --> 00:39:54,320
the easiest would be twitter i'll go

00:39:52,640 --> 00:39:55,440
back to the slide here that should have

00:39:54,320 --> 00:39:57,680
a couple of ways

00:39:55,440 --> 00:40:00,480
um you can ping me on twitter send me an

00:39:57,680 --> 00:40:01,839
email mdelder redhat.com

00:40:00,480 --> 00:40:03,760
i'm more than happy to kind of chat

00:40:01,839 --> 00:40:04,560
about ways for hoax to get involved from

00:40:03,760 --> 00:40:06,480
the community

00:40:04,560 --> 00:40:08,000
we will begin sort of a regular cadence

00:40:06,480 --> 00:40:09,839
of open community meetings

00:40:08,000 --> 00:40:12,240
that will run much like the kubernetes

00:40:09,839 --> 00:40:13,520
cigs do we are participating where

00:40:12,240 --> 00:40:15,359
possible

00:40:13,520 --> 00:40:16,880
uh to you know cross-pollinate with

00:40:15,359 --> 00:40:19,040
projects like opa

00:40:16,880 --> 00:40:21,200
we expect to do more of that with argo

00:40:19,040 --> 00:40:22,960
uh with projects like sig policy

00:40:21,200 --> 00:40:24,480
sigmulti cluster as well

00:40:22,960 --> 00:40:26,960
so really what we're trying to do with

00:40:24,480 --> 00:40:29,200
this one open cluster management

00:40:26,960 --> 00:40:31,680
arena is form a community that tries to

00:40:29,200 --> 00:40:34,400
address that holistic view

00:40:31,680 --> 00:40:35,599
of how we manage kubernetes fleets so

00:40:34,400 --> 00:40:36,839
with that thank you so much for your

00:40:35,599 --> 00:40:45,760
time today

00:40:36,839 --> 00:40:45,760

YouTube URL: https://www.youtube.com/watch?v=1aab7B0Nnwo


