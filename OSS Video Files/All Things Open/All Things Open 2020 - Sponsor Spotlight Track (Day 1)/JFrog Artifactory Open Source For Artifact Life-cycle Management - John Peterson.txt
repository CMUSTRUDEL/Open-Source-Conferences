Title: JFrog Artifactory Open Source For Artifact Life-cycle Management - John Peterson
Publication date: 2020-12-09
Playlist: All Things Open 2020 - Sponsor Spotlight Track (Day 1)
Description: 
	Presented by: John Peterson, JFrog
Presented at All Things Open 2020 - Sponsor Spotlight Track (Day 1)

Abstract: Open source is an awesome space. Great place for learning and contributing back to the larger community effort. While this is great and all, there are times when we canâ€™t find the production grade tools we need. Artifactory is the premier artifact management tool which we offer an open source version and unlike other tools our open source code base is the same core code base as our commercial products! Now that we have the code where should we deploy it?
Captions: 
	00:00:05,279 --> 00:00:07,520
so as was mentioned i'm going to be

00:00:06,640 --> 00:00:10,240
covering today

00:00:07,520 --> 00:00:12,320
artifactory open source which is the

00:00:10,240 --> 00:00:15,519
addition that jfrog offers

00:00:12,320 --> 00:00:17,600
as part of our open source offerings

00:00:15,519 --> 00:00:21,359
i am john peterson your speaker today a

00:00:17,600 --> 00:00:25,359
partner engineer here at jfrog

00:00:21,359 --> 00:00:26,960
and so what is you know what is

00:00:25,359 --> 00:00:28,400
what is it what is artifactory open

00:00:26,960 --> 00:00:30,640
source edition so

00:00:28,400 --> 00:00:32,880
it's your it's your typical artifact

00:00:30,640 --> 00:00:35,680
repository management software

00:00:32,880 --> 00:00:36,480
it's the open source version of jfrog's

00:00:35,680 --> 00:00:38,800
enterprise

00:00:36,480 --> 00:00:40,559
artifactory software which some of you

00:00:38,800 --> 00:00:42,800
may be familiar with

00:00:40,559 --> 00:00:44,800
um all versions of artifactory are

00:00:42,800 --> 00:00:45,600
actually built off this common source

00:00:44,800 --> 00:00:48,000
code

00:00:45,600 --> 00:00:49,760
so don't think that you know you're

00:00:48,000 --> 00:00:50,399
getting some different version of the

00:00:49,760 --> 00:00:52,559
source

00:00:50,399 --> 00:00:54,320
that's way scaled down if this is

00:00:52,559 --> 00:00:56,239
actually the real source code that

00:00:54,320 --> 00:00:58,320
artifactory is built off of

00:00:56,239 --> 00:01:00,480
it's just that additional features are

00:00:58,320 --> 00:01:02,399
then overlaid on top of it

00:01:00,480 --> 00:01:03,520
um for some of the premium more premium

00:01:02,399 --> 00:01:05,760
features

00:01:03,520 --> 00:01:07,360
and so what can it accomplish so it

00:01:05,760 --> 00:01:11,439
supports out of the bat

00:01:07,360 --> 00:01:14,320
out of the box uh maven gradle iv

00:01:11,439 --> 00:01:15,520
and generic repositories it supports

00:01:14,320 --> 00:01:17,680
users groups

00:01:15,520 --> 00:01:19,119
permissions all the typical role-based

00:01:17,680 --> 00:01:22,000
authentic authorization

00:01:19,119 --> 00:01:24,080
controls that you're familiar with in

00:01:22,000 --> 00:01:25,119
addition it also supports builds and

00:01:24,080 --> 00:01:27,119
build infos

00:01:25,119 --> 00:01:30,400
which are quite a powerful feature which

00:01:27,119 --> 00:01:30,400
i'll show you here in a second

00:01:30,479 --> 00:01:33,600
and so who's really the audience of this

00:01:32,960 --> 00:01:36,799
uh

00:01:33,600 --> 00:01:38,159
particular offering so in general it's

00:01:36,799 --> 00:01:40,720
people who want a free

00:01:38,159 --> 00:01:41,840
on-prem version of artifactory in

00:01:40,720 --> 00:01:44,880
addition

00:01:41,840 --> 00:01:45,439
devop devops practitioners who want to

00:01:44,880 --> 00:01:47,600
leverage

00:01:45,439 --> 00:01:48,880
our generic repositories through the

00:01:47,600 --> 00:01:51,920
jfrog cli

00:01:48,880 --> 00:01:53,200
to enhance their automation and before

00:01:51,920 --> 00:01:54,479
you jump in though

00:01:53,200 --> 00:01:56,320
what are some of the things that you

00:01:54,479 --> 00:01:59,360
should consider right

00:01:56,320 --> 00:02:01,040
so deploying artifactory open source

00:01:59,360 --> 00:02:02,960
there's various infrastructure

00:02:01,040 --> 00:02:04,719
requirements and maintenance

00:02:02,960 --> 00:02:06,000
so that's definitely something to be

00:02:04,719 --> 00:02:08,319
aware of

00:02:06,000 --> 00:02:09,440
we're handing you an open source version

00:02:08,319 --> 00:02:11,200
of the software

00:02:09,440 --> 00:02:12,560
but you're still responsible for your

00:02:11,200 --> 00:02:14,160
own infrastructure

00:02:12,560 --> 00:02:15,760
uh making sure you have the minimum

00:02:14,160 --> 00:02:16,720
system requirements as well as

00:02:15,760 --> 00:02:19,360
maintaining that

00:02:16,720 --> 00:02:21,599
infrastructure and there's ways around

00:02:19,360 --> 00:02:23,760
this such as cloud-based deployments

00:02:21,599 --> 00:02:26,000
but regardless it's still considered an

00:02:23,760 --> 00:02:29,040
on-prem version for your particular

00:02:26,000 --> 00:02:30,640
um company or individual

00:02:29,040 --> 00:02:32,800
and so the other thing you really want

00:02:30,640 --> 00:02:33,920
to call out is there's also software

00:02:32,800 --> 00:02:36,239
maintenance

00:02:33,920 --> 00:02:37,040
so just because we're giving you the

00:02:36,239 --> 00:02:38,400
current the most

00:02:37,040 --> 00:02:40,480
up-to-date current version of

00:02:38,400 --> 00:02:42,480
artifactory open source

00:02:40,480 --> 00:02:44,400
uh within a month there's going to be

00:02:42,480 --> 00:02:45,680
new versions more likely than not that

00:02:44,400 --> 00:02:47,840
will come out

00:02:45,680 --> 00:02:48,720
and so you'll be responsible for the

00:02:47,840 --> 00:02:51,360
software

00:02:48,720 --> 00:02:52,640
maintenance in terms of upgrades in

00:02:51,360 --> 00:02:55,200
terms of

00:02:52,640 --> 00:02:57,040
all the various day one plus type of

00:02:55,200 --> 00:03:00,159
activities that can occur

00:02:57,040 --> 00:03:02,000
in the software life cycle management of

00:03:00,159 --> 00:03:03,680
any of your typical you know software

00:03:02,000 --> 00:03:05,680
installations that you might be familiar

00:03:03,680 --> 00:03:07,519
with

00:03:05,680 --> 00:03:08,720
and so maybe that doesn't sound good

00:03:07,519 --> 00:03:10,239
maybe you don't want to deal with the

00:03:08,720 --> 00:03:11,680
infrastructure requirements

00:03:10,239 --> 00:03:13,519
maybe you don't want to be responsible

00:03:11,680 --> 00:03:16,640
for upgrading so

00:03:13,519 --> 00:03:19,040
we also offer the jfrog free tier now

00:03:16,640 --> 00:03:20,879
and so this is a very powerful offering

00:03:19,040 --> 00:03:22,080
because this is actually our enterprise

00:03:20,879 --> 00:03:25,360
great software

00:03:22,080 --> 00:03:27,760
artifactory x-ray and pipelines

00:03:25,360 --> 00:03:29,840
so what's included in free tier so it's

00:03:27,760 --> 00:03:32,560
the actual artifactory enterprise it's

00:03:29,840 --> 00:03:35,840
the full feature offering of artifactory

00:03:32,560 --> 00:03:38,000
as well as x-ray it's the full feature

00:03:35,840 --> 00:03:39,120
offering of x-ray so it's a robust

00:03:38,000 --> 00:03:41,840
component level

00:03:39,120 --> 00:03:44,560
security scanner and in addition we also

00:03:41,840 --> 00:03:45,040
have pipelines which is a powerful ci cd

00:03:44,560 --> 00:03:47,040
tool

00:03:45,040 --> 00:03:48,159
that's built directly into the jfrog

00:03:47,040 --> 00:03:51,120
platform

00:03:48,159 --> 00:03:51,920
and this really allows you to end and

00:03:51,120 --> 00:03:55,439
manage

00:03:51,920 --> 00:03:57,120
artifactory x-ray distribution pipelines

00:03:55,439 --> 00:03:59,280
all of this you can manage now

00:03:57,120 --> 00:04:01,040
through this powerful ci cd tool that's

00:03:59,280 --> 00:04:03,040
built into the platform

00:04:01,040 --> 00:04:04,239
and in addition the really thing i want

00:04:03,040 --> 00:04:07,280
to call out is

00:04:04,239 --> 00:04:10,400
if you do uh go the route to free tier

00:04:07,280 --> 00:04:12,480
versus open source jfrog will actually

00:04:10,400 --> 00:04:13,120
manage and support your instances for

00:04:12,480 --> 00:04:15,840
free

00:04:13,120 --> 00:04:17,519
so you have a full production grade

00:04:15,840 --> 00:04:19,840
devops support team

00:04:17,519 --> 00:04:20,720
who's there 24 7 to manage these

00:04:19,840 --> 00:04:23,360
instances

00:04:20,720 --> 00:04:23,840
resolve any issues that might occur and

00:04:23,360 --> 00:04:27,120
that way

00:04:23,840 --> 00:04:29,840
you don't even have to basically

00:04:27,120 --> 00:04:31,040
perform that sunk cost of maintenance

00:04:29,840 --> 00:04:33,360
and maintaining

00:04:31,040 --> 00:04:34,560
all of these uh various software

00:04:33,360 --> 00:04:36,400
installations

00:04:34,560 --> 00:04:38,320
and so how do you get it signing up for

00:04:36,400 --> 00:04:40,479
free tier is very easy

00:04:38,320 --> 00:04:42,400
um as you see there's a link right there

00:04:40,479 --> 00:04:44,080
no credit card is required

00:04:42,400 --> 00:04:45,680
um you can go ahead and sign up just

00:04:44,080 --> 00:04:47,360
provide basically your name

00:04:45,680 --> 00:04:49,360
your company your email address and

00:04:47,360 --> 00:04:51,120
you're able to sign up for free

00:04:49,360 --> 00:04:52,479
you can pick which cloud you like

00:04:51,120 --> 00:04:55,680
whether it's azure

00:04:52,479 --> 00:04:56,080
aws gcp so it's offered on all the

00:04:55,680 --> 00:04:58,560
variety

00:04:56,080 --> 00:05:00,320
of clouds and so it's a very easy

00:04:58,560 --> 00:05:01,919
solution for people who don't want to

00:05:00,320 --> 00:05:04,720
actually handle maintenance

00:05:01,919 --> 00:05:05,840
of the infrastructure and software and

00:05:04,720 --> 00:05:07,600
so

00:05:05,840 --> 00:05:08,960
for regardless of whether you went

00:05:07,600 --> 00:05:13,199
artifactory oss

00:05:08,960 --> 00:05:16,240
or you had free tier the jfrog ecosystem

00:05:13,199 --> 00:05:18,560
really supports artifactory as a whole

00:05:16,240 --> 00:05:20,800
and so why is this important so

00:05:18,560 --> 00:05:21,600
artifactory oss comes with the entire

00:05:20,800 --> 00:05:24,320
ecosystem

00:05:21,600 --> 00:05:26,560
around our factory enterprise so you get

00:05:24,320 --> 00:05:29,840
the artifactory user plug-ins

00:05:26,560 --> 00:05:32,160
you get the jfrog cli you get various

00:05:29,840 --> 00:05:34,320
uh build tool plug-ins such as the art

00:05:32,160 --> 00:05:35,759
factory maven plug-in which i'll demo

00:05:34,320 --> 00:05:38,240
here in a second

00:05:35,759 --> 00:05:39,199
the artifactory jenkins plug-in and then

00:05:38,240 --> 00:05:42,560
there's the entire

00:05:39,199 --> 00:05:44,639
ecosystem of communities so the j center

00:05:42,560 --> 00:05:45,840
chart center all of the centers that

00:05:44,639 --> 00:05:50,080
kind of support

00:05:45,840 --> 00:05:50,080
the overall jfrog ecosystem

00:05:50,400 --> 00:05:56,319
and so i'm going to dive into a demo now

00:05:53,840 --> 00:05:57,520
and so what is this demo going to cover

00:05:56,319 --> 00:05:58,960
in this demonstration

00:05:57,520 --> 00:06:00,960
we're going to actually install

00:05:58,960 --> 00:06:03,759
artifactory oss

00:06:00,960 --> 00:06:05,199
we're going to configure our factory oss

00:06:03,759 --> 00:06:06,639
we're going to create some local

00:06:05,199 --> 00:06:07,919
repositories

00:06:06,639 --> 00:06:10,240
we're going to create some virtual

00:06:07,919 --> 00:06:12,880
repositories i'll deploy

00:06:10,240 --> 00:06:13,919
deploy a maven project to artifactory

00:06:12,880 --> 00:06:15,759
oss

00:06:13,919 --> 00:06:18,000
and then we'll also deploy some

00:06:15,759 --> 00:06:21,600
artifactory build infos

00:06:18,000 --> 00:06:24,639
utilizing the artifactory maven plugin

00:06:21,600 --> 00:06:25,840
and so what i want to first do is i'm

00:06:24,639 --> 00:06:28,800
going to jump over to

00:06:25,840 --> 00:06:30,240
gke and i just spun up a brand new

00:06:28,800 --> 00:06:32,080
cluster

00:06:30,240 --> 00:06:34,160
and so i'm going to actually go ahead

00:06:32,080 --> 00:06:36,639
and grab that now and

00:06:34,160 --> 00:06:38,160
so that was actually the zoom link so

00:06:36,639 --> 00:06:40,400
make sure i can actually copy paste

00:06:38,160 --> 00:06:43,440
correctly

00:06:40,400 --> 00:06:45,440
and so now

00:06:43,440 --> 00:06:46,880
you'll see i just basically spun up this

00:06:45,440 --> 00:06:48,560
cluster right now

00:06:46,880 --> 00:06:49,919
there's literally nothing in this

00:06:48,560 --> 00:06:53,039
cluster

00:06:49,919 --> 00:06:55,199
as of right now and so

00:06:53,039 --> 00:06:58,240
what i'm going to do is i'm going to

00:06:55,199 --> 00:07:00,400
actually deploy artifactory oss

00:06:58,240 --> 00:07:02,800
and so i'm i'm deploying it into a

00:07:00,400 --> 00:07:05,280
kubernete kubernetes based installation

00:07:02,800 --> 00:07:06,000
so i'm going to use the helm chart so

00:07:05,280 --> 00:07:09,280
i'm actually

00:07:06,000 --> 00:07:10,240
able to uh i've already added jfrog as a

00:07:09,280 --> 00:07:12,240
repo

00:07:10,240 --> 00:07:13,360
so you can see here i've already added

00:07:12,240 --> 00:07:15,039
to jfrog repo

00:07:13,360 --> 00:07:16,800
if i needed to do that i could actually

00:07:15,039 --> 00:07:20,720
do a repo

00:07:16,800 --> 00:07:23,039
ad and then the name and then the url

00:07:20,720 --> 00:07:24,160
and that will add this repository into

00:07:23,039 --> 00:07:26,319
my helm

00:07:24,160 --> 00:07:27,680
at which point i can then go ahead and

00:07:26,319 --> 00:07:30,319
do a repo update

00:07:27,680 --> 00:07:32,400
to make sure i have the latest charts

00:07:30,319 --> 00:07:33,840
once i have the latest charts

00:07:32,400 --> 00:07:37,360
what i'm going to do is i'm actually

00:07:33,840 --> 00:07:40,080
going to look for artifactory oss chart

00:07:37,360 --> 00:07:42,840
and so i'm going to search for

00:07:40,080 --> 00:07:44,879
artifactory

00:07:42,840 --> 00:07:46,400
oss so

00:07:44,879 --> 00:07:48,720
what we'll see here is we're going to

00:07:46,400 --> 00:07:51,360
see artifactory oss listed

00:07:48,720 --> 00:07:52,720
under the official jfrog chart uh helm

00:07:51,360 --> 00:07:55,120
helm repo

00:07:52,720 --> 00:07:57,360
and so you can see here uh there is the

00:07:55,120 --> 00:08:00,639
jfrog artifactory oss

00:07:57,360 --> 00:08:04,479
it's actually on version 710 2 of

00:08:00,639 --> 00:08:06,960
artifactory and so at this point

00:08:04,479 --> 00:08:08,319
i can actually install this helm chart

00:08:06,960 --> 00:08:10,639
and so i'm going to do that

00:08:08,319 --> 00:08:11,680
i'm going to go ahead and say helm

00:08:10,639 --> 00:08:14,800
install

00:08:11,680 --> 00:08:17,120
art factory oss jfrog

00:08:14,800 --> 00:08:18,879
artifactory oss and since this is

00:08:17,120 --> 00:08:22,080
artifactory oss

00:08:18,879 --> 00:08:24,400
there are no additional requirements

00:08:22,080 --> 00:08:25,360
so typically speaking when you install a

00:08:24,400 --> 00:08:27,680
helm chart for

00:08:25,360 --> 00:08:29,599
artifactory you'll need to specify

00:08:27,680 --> 00:08:32,240
things such as the licenses

00:08:29,599 --> 00:08:33,919
obviously that doesn't apply here the

00:08:32,240 --> 00:08:36,880
one thing i do want to call out

00:08:33,919 --> 00:08:38,159
is if you guys are planning on using tls

00:08:36,880 --> 00:08:41,440
you will

00:08:38,159 --> 00:08:44,800
need to supply a tls secret name

00:08:41,440 --> 00:08:45,200
uh so that's that's probably the only

00:08:44,800 --> 00:08:47,200
thing

00:08:45,200 --> 00:08:48,560
that you will actually need to install

00:08:47,200 --> 00:08:50,800
artifactory oss

00:08:48,560 --> 00:08:52,160
besides the health chart itself is

00:08:50,800 --> 00:08:55,519
you'll need an actual

00:08:52,160 --> 00:08:58,399
uh dns and tls cert

00:08:55,519 --> 00:08:59,519
assuming you want to set up ssl for me i

00:08:58,399 --> 00:09:00,720
don't even really care

00:08:59,519 --> 00:09:03,760
so i'm just going to go ahead and

00:09:00,720 --> 00:09:03,760
install it directly

00:09:06,080 --> 00:09:09,360
and so this will then go ahead and spin

00:09:08,720 --> 00:09:12,160
up

00:09:09,360 --> 00:09:13,279
artifactory oss in my kubernetes based

00:09:12,160 --> 00:09:16,399
environment

00:09:13,279 --> 00:09:18,320
and so what i can now do is i'll go

00:09:16,399 --> 00:09:18,959
ahead and list out first the pods that

00:09:18,320 --> 00:09:21,200
got spun

00:09:18,959 --> 00:09:22,399
up and i'll explain a little bit here

00:09:21,200 --> 00:09:24,399
what's going on

00:09:22,399 --> 00:09:26,800
so when you deploy artifactory

00:09:24,399 --> 00:09:28,240
artifactory needs a database

00:09:26,800 --> 00:09:30,640
and so you'll see that there is a

00:09:28,240 --> 00:09:32,959
postgresql that's also coming up

00:09:30,640 --> 00:09:34,240
with this particular artifactory as well

00:09:32,959 --> 00:09:36,640
as an nginx

00:09:34,240 --> 00:09:38,320
the nginx is going to act as the reverse

00:09:36,640 --> 00:09:40,560
proxy for artifactory

00:09:38,320 --> 00:09:42,800
um if you set it up that way or it will

00:09:40,560 --> 00:09:43,440
just act as the proxy to the web

00:09:42,800 --> 00:09:46,480
interface

00:09:43,440 --> 00:09:48,000
to artifactory and so in addition to the

00:09:46,480 --> 00:09:50,240
pods that are going to get spun

00:09:48,000 --> 00:09:52,080
up there's also going to be an external

00:09:50,240 --> 00:09:53,760
load balancer

00:09:52,080 --> 00:09:55,839
a network load balancer that will be

00:09:53,760 --> 00:09:57,760
deployed into my kubernetes

00:09:55,839 --> 00:09:59,440
i will then be able to access that

00:09:57,760 --> 00:10:02,240
public ip address

00:09:59,440 --> 00:10:02,880
and actually access the artifactory oss

00:10:02,240 --> 00:10:05,839
that just

00:10:02,880 --> 00:10:07,040
finished spinning up and so i'll give

00:10:05,839 --> 00:10:10,480
this a second here

00:10:07,040 --> 00:10:11,519
uh to spin up uh and while this is

00:10:10,480 --> 00:10:14,560
spinning up

00:10:11,519 --> 00:10:17,600
the one thing i do want to call out

00:10:14,560 --> 00:10:20,880
right is some of the things

00:10:17,600 --> 00:10:23,440
for artifactory that typically occur

00:10:20,880 --> 00:10:24,480
during installation such as the the

00:10:23,440 --> 00:10:26,399
domain name

00:10:24,480 --> 00:10:27,519
and the cert i have already set up in

00:10:26,399 --> 00:10:29,200
another cluster

00:10:27,519 --> 00:10:31,440
um just so that we didn't have to wait

00:10:29,200 --> 00:10:32,320
as long i've already set up my own

00:10:31,440 --> 00:10:34,800
cluster here

00:10:32,320 --> 00:10:36,640
as well and so i'm going to be actually

00:10:34,800 --> 00:10:37,920
demoing off of this cluster so that way

00:10:36,640 --> 00:10:40,959
you guys can see

00:10:37,920 --> 00:10:42,640
um everything set up end to end

00:10:40,959 --> 00:10:44,399
and so as we wait for this to finish

00:10:42,640 --> 00:10:46,000
spinning up what i'll do is i'll go

00:10:44,399 --> 00:10:48,640
ahead and grab that public

00:10:46,000 --> 00:10:50,320
ip address as well and so you can see

00:10:48,640 --> 00:10:53,200
here's the ip address

00:10:50,320 --> 00:10:55,120
um that got exposed based upon the

00:10:53,200 --> 00:10:56,720
network load balancer

00:10:55,120 --> 00:10:58,480
and so if we give it just one more

00:10:56,720 --> 00:11:01,839
second so i'll just do a

00:10:58,480 --> 00:11:01,839
w so we can wait

00:11:02,800 --> 00:11:06,320
and while we wait i'll also just go

00:11:04,640 --> 00:11:08,399
ahead and

00:11:06,320 --> 00:11:09,839
tail the log so you guys can see kind of

00:11:08,399 --> 00:11:11,279
what's going on

00:11:09,839 --> 00:11:14,399
what's going on with the particular

00:11:11,279 --> 00:11:16,480
artifactory instance

00:11:14,399 --> 00:11:17,760
and you can see artifactory is coming up

00:11:16,480 --> 00:11:20,640
very typical

00:11:17,760 --> 00:11:22,160
uh of the logs um if you see this kind

00:11:20,640 --> 00:11:23,519
of uh

00:11:22,160 --> 00:11:25,200
format this is generally a good

00:11:23,519 --> 00:11:28,079
indication once you see

00:11:25,200 --> 00:11:29,440
the artifactory oss and the version dump

00:11:28,079 --> 00:11:31,839
is a good indication that you've

00:11:29,440 --> 00:11:34,240
successfully installed artifactory

00:11:31,839 --> 00:11:36,000
again for oss it's a much simpler

00:11:34,240 --> 00:11:37,760
installation process where you basically

00:11:36,000 --> 00:11:41,200
just directly run the helm chart

00:11:37,760 --> 00:11:43,680
so it's not very impressive

00:11:41,200 --> 00:11:45,040
but for much more complex art factories

00:11:43,680 --> 00:11:48,240
things can generally go long

00:11:45,040 --> 00:11:51,519
go wrong a lot easier right and so

00:11:48,240 --> 00:11:54,399
at this point artifactory is

00:11:51,519 --> 00:11:55,519
almost up i see it now joining the

00:11:54,399 --> 00:11:57,760
cluster

00:11:55,519 --> 00:11:59,120
it's running the final jobs spinning up

00:11:57,760 --> 00:12:02,240
the cron

00:11:59,120 --> 00:12:05,040
and now at this point we should see the

00:12:02,240 --> 00:12:07,600
nginx and the artifactory pods final

00:12:05,040 --> 00:12:07,600
finalize

00:12:08,079 --> 00:12:12,880
and once that happens then i'm going to

00:12:10,560 --> 00:12:14,480
go ahead and load this artifactory so

00:12:12,880 --> 00:12:16,880
that way you guys can see

00:12:14,480 --> 00:12:18,480
um the artifactory that i so here we go

00:12:16,880 --> 00:12:19,839
we just got the message all services

00:12:18,480 --> 00:12:21,839
started successfully

00:12:19,839 --> 00:12:22,880
we can see the artifactory has just

00:12:21,839 --> 00:12:25,040
finished

00:12:22,880 --> 00:12:27,040
and then the last step is the engine x

00:12:25,040 --> 00:12:28,880
and once the nginx has come up

00:12:27,040 --> 00:12:30,240
now we can actually go directly to this

00:12:28,880 --> 00:12:32,240
ip address

00:12:30,240 --> 00:12:34,959
and you can see we have just spun up an

00:12:32,240 --> 00:12:34,959
artifactory

00:12:36,160 --> 00:12:40,000
and so now typical i can log in with the

00:12:39,360 --> 00:12:42,880
default

00:12:40,000 --> 00:12:43,839
admin password it's going to log me in

00:12:42,880 --> 00:12:45,680
it's going to take me

00:12:43,839 --> 00:12:48,480
again this is going to complain because

00:12:45,680 --> 00:12:51,519
admin password has been part of a breach

00:12:48,480 --> 00:12:54,079
so we always recommend users in fact we

00:12:51,519 --> 00:12:56,320
require users to change their password

00:12:54,079 --> 00:12:58,959
the first time they install

00:12:56,320 --> 00:12:59,519
and i'm also going to use a less than

00:12:58,959 --> 00:13:01,760
secure

00:12:59,519 --> 00:13:04,399
password again just because it's a

00:13:01,760 --> 00:13:06,079
demonstration

00:13:04,399 --> 00:13:08,160
and so now it's going to ask me for

00:13:06,079 --> 00:13:09,519
various things such as the base url

00:13:08,160 --> 00:13:11,279
a lot of this stuff you can actually

00:13:09,519 --> 00:13:13,680
skip so i'm going to skip

00:13:11,279 --> 00:13:14,320
all of that and so the first thing that

00:13:13,680 --> 00:13:16,079
you'll see

00:13:14,320 --> 00:13:17,680
right when you have successfully

00:13:16,079 --> 00:13:19,680
deployed artifactory

00:13:17,680 --> 00:13:21,040
um is this onboarding page this

00:13:19,680 --> 00:13:23,839
onboarding page

00:13:21,040 --> 00:13:26,000
is very helpful for new users um if

00:13:23,839 --> 00:13:27,920
you've never used artifactory before

00:13:26,000 --> 00:13:29,120
i highly recommend you walking through

00:13:27,920 --> 00:13:30,959
the onboarding

00:13:29,120 --> 00:13:32,480
this will actually we're going to walk

00:13:30,959 --> 00:13:34,000
through this right now

00:13:32,480 --> 00:13:36,079
because this will take us through the

00:13:34,000 --> 00:13:37,839
steps that i promised you guys which is

00:13:36,079 --> 00:13:39,680
after we've installed we're going to

00:13:37,839 --> 00:13:41,440
start to configure artifactory we're

00:13:39,680 --> 00:13:44,480
going to create a local repo

00:13:41,440 --> 00:13:45,360
of virtual repo etc and so i'll go back

00:13:44,480 --> 00:13:47,680
here

00:13:45,360 --> 00:13:49,600
a few things i want to call out before

00:13:47,680 --> 00:13:52,000
we start to create the repo

00:13:49,600 --> 00:13:53,680
and everything else um i'm actually

00:13:52,000 --> 00:13:55,920
going to save this and so

00:13:53,680 --> 00:13:58,240
one of the major things that typically

00:13:55,920 --> 00:14:01,440
happens is we need to set up

00:13:58,240 --> 00:14:02,560
users groups and permissions right i

00:14:01,440 --> 00:14:05,839
highly encourage

00:14:02,560 --> 00:14:08,160
folks not to use the admin user

00:14:05,839 --> 00:14:10,000
and for that reason um i'm going to go

00:14:08,160 --> 00:14:13,040
ahead and make a new user

00:14:10,000 --> 00:14:15,839
i'm going to make a user as myself you

00:14:13,040 --> 00:14:16,160
can set up this user as an administrator

00:14:15,839 --> 00:14:19,839
um

00:14:16,160 --> 00:14:23,279
that's fine and so i'll go ahead and

00:14:19,839 --> 00:14:26,480
make this new user here

00:14:23,279 --> 00:14:27,519
and i'll go ahead and say okay since i'm

00:14:26,480 --> 00:14:29,760
an admin user

00:14:27,519 --> 00:14:30,639
so i've at least made a new user under

00:14:29,760 --> 00:14:32,160
myself

00:14:30,639 --> 00:14:34,639
typically speaking you're not going to

00:14:32,160 --> 00:14:37,279
want everybody to be an admin user

00:14:34,639 --> 00:14:39,440
so what you'll probably end up doing is

00:14:37,279 --> 00:14:42,399
instead of just making one-off users

00:14:39,440 --> 00:14:43,360
you'll come in here we'll first define a

00:14:42,399 --> 00:14:45,839
group

00:14:43,360 --> 00:14:47,360
will assign will assign permissions

00:14:45,839 --> 00:14:50,079
actually to a group

00:14:47,360 --> 00:14:51,839
and then we'll assign users to the group

00:14:50,079 --> 00:14:52,800
and that's how you can perform the role

00:14:51,839 --> 00:14:55,920
based

00:14:52,800 --> 00:14:56,800
authorization controls um across

00:14:55,920 --> 00:14:59,600
artifactory

00:14:56,800 --> 00:15:00,399
to ensure the right level of permissions

00:14:59,600 --> 00:15:03,440
for groups

00:15:00,399 --> 00:15:05,199
as well as users and so just to show you

00:15:03,440 --> 00:15:07,600
guys uh the permissions right

00:15:05,199 --> 00:15:09,399
permissions are very full feature

00:15:07,600 --> 00:15:11,120
artifactory you can actually control

00:15:09,399 --> 00:15:13,040
repositories

00:15:11,120 --> 00:15:14,160
remote repositories distribution

00:15:13,040 --> 00:15:16,079
repositories

00:15:14,160 --> 00:15:17,760
you can apply it to builds so it's a

00:15:16,079 --> 00:15:19,680
very powerful

00:15:17,760 --> 00:15:21,040
feature set that i really recommend that

00:15:19,680 --> 00:15:22,959
folks check out

00:15:21,040 --> 00:15:24,880
and so that's configuring your

00:15:22,959 --> 00:15:27,600
artifactory is making sure that you have

00:15:24,880 --> 00:15:29,600
users groups permissions all set up

00:15:27,600 --> 00:15:31,920
assuming that you've already done all of

00:15:29,600 --> 00:15:33,279
that onboarding of setting up your users

00:15:31,920 --> 00:15:34,639
and your groups that you want them to

00:15:33,279 --> 00:15:37,199
use your artifactory

00:15:34,639 --> 00:15:38,880
at this point the next step for a binary

00:15:37,199 --> 00:15:40,959
repository manager is to obviously

00:15:38,880 --> 00:15:41,839
create repositories for your binaries

00:15:40,959 --> 00:15:43,839
right

00:15:41,839 --> 00:15:46,000
and so what we're going to do is we're

00:15:43,839 --> 00:15:47,360
going to first artifactory supports a

00:15:46,000 --> 00:15:49,199
variety of different types of

00:15:47,360 --> 00:15:52,399
repositories so i'm going to quickly

00:15:49,199 --> 00:15:54,720
explain which which each one does

00:15:52,399 --> 00:15:57,759
um and you can see it here on screen as

00:15:54,720 --> 00:15:59,680
well um so a local repository this is

00:15:57,759 --> 00:16:02,079
your most typical type of repository

00:15:59,680 --> 00:16:02,480
these are um repositories that actually

00:16:02,079 --> 00:16:05,120
live

00:16:02,480 --> 00:16:07,279
in artifactory themselves you deploy

00:16:05,120 --> 00:16:08,480
artifacts and binaries into these

00:16:07,279 --> 00:16:11,120
repositories

00:16:08,480 --> 00:16:13,279
and they're stored in artifactory local

00:16:11,120 --> 00:16:15,839
to that specific artifactory

00:16:13,279 --> 00:16:17,199
a remote repository this is probably the

00:16:15,839 --> 00:16:19,680
repository type that

00:16:17,199 --> 00:16:21,839
most people are most familiar with if

00:16:19,680 --> 00:16:23,360
you've ever used maven central or

00:16:21,839 --> 00:16:25,279
jcenter

00:16:23,360 --> 00:16:27,120
these are your remote repositories so

00:16:25,279 --> 00:16:30,240
these are actually repositories

00:16:27,120 --> 00:16:31,600
that sit there out there on the internet

00:16:30,240 --> 00:16:34,000
and these are the ones that you'll

00:16:31,600 --> 00:16:36,000
actually go and download your dependency

00:16:34,000 --> 00:16:39,040
jars from such as a maven central

00:16:36,000 --> 00:16:39,839
or a j center again and so these will be

00:16:39,040 --> 00:16:42,639
set up

00:16:39,839 --> 00:16:44,399
uh automatically typically through the

00:16:42,639 --> 00:16:45,920
onboarding process we'll typically set

00:16:44,399 --> 00:16:47,440
up jcenter for you

00:16:45,920 --> 00:16:49,759
but if you have additional remote

00:16:47,440 --> 00:16:50,000
repositories you can also set those up

00:16:49,759 --> 00:16:52,399
through

00:16:50,000 --> 00:16:54,959
artifactory and so the first type i'm

00:16:52,399 --> 00:16:57,600
going to do is create a local repository

00:16:54,959 --> 00:16:59,360
as you can see here since i've deployed

00:16:57,600 --> 00:17:02,560
artifactory oss

00:16:59,360 --> 00:17:06,240
i am limited down to just basically a

00:17:02,560 --> 00:17:08,720
generic gradle ivy maven or sbt

00:17:06,240 --> 00:17:09,360
if i was using the jfrog free tier

00:17:08,720 --> 00:17:11,199
though

00:17:09,360 --> 00:17:13,120
i would be able to create any of these

00:17:11,199 --> 00:17:15,120
repository types

00:17:13,120 --> 00:17:16,880
so that's just something i want to call

00:17:15,120 --> 00:17:19,600
out so i'm going to create a maven

00:17:16,880 --> 00:17:21,839
repository a local maven repository i'm

00:17:19,600 --> 00:17:25,679
going to call it live

00:17:21,839 --> 00:17:28,640
snapshot local

00:17:25,679 --> 00:17:29,919
and at this point um i can also apply

00:17:28,640 --> 00:17:32,240
various uh

00:17:29,919 --> 00:17:33,760
permissions other things for the sake of

00:17:32,240 --> 00:17:34,880
this demonstration i'm going to keep it

00:17:33,760 --> 00:17:36,640
fairly simple

00:17:34,880 --> 00:17:38,240
so i'm going to go ahead and create this

00:17:36,640 --> 00:17:40,080
local repository

00:17:38,240 --> 00:17:42,480
and you can say okay it's going to

00:17:40,080 --> 00:17:44,559
instruct me on how i can add users

00:17:42,480 --> 00:17:45,679
since i only have one administrative

00:17:44,559 --> 00:17:47,440
user uh

00:17:45,679 --> 00:17:49,200
i don't really need to add any users

00:17:47,440 --> 00:17:50,320
because admins already have permissions

00:17:49,200 --> 00:17:52,160
on everything

00:17:50,320 --> 00:17:53,919
and so the next step i want to create a

00:17:52,160 --> 00:17:55,200
remote repository i want to be able to

00:17:53,919 --> 00:17:57,440
download jars

00:17:55,200 --> 00:17:58,640
from the internet such as maven central

00:17:57,440 --> 00:18:00,320
or jcenter

00:17:58,640 --> 00:18:02,640
so i'm going to go ahead and create a

00:18:00,320 --> 00:18:04,559
remote repository

00:18:02,640 --> 00:18:06,559
and you can see it's already saying

00:18:04,559 --> 00:18:08,799
here's the jcenter url so i'll give it

00:18:06,559 --> 00:18:10,720
the name of jcenter

00:18:08,799 --> 00:18:13,360
and i'm going to go ahead and click save

00:18:10,720 --> 00:18:15,600
so i now have this remote repository

00:18:13,360 --> 00:18:17,120
the next step so you're going okay well

00:18:15,600 --> 00:18:19,280
now you have two repositories

00:18:17,120 --> 00:18:21,039
what good is that right like we can only

00:18:19,280 --> 00:18:21,840
point at one so how is that going to be

00:18:21,039 --> 00:18:24,720
helpful

00:18:21,840 --> 00:18:25,679
in my naming settings.xml that's a great

00:18:24,720 --> 00:18:28,160
question

00:18:25,679 --> 00:18:28,960
the next type of repository is going to

00:18:28,160 --> 00:18:31,760
solve that

00:18:28,960 --> 00:18:33,120
for us so virtual repositories are a

00:18:31,760 --> 00:18:35,600
very powerful type

00:18:33,120 --> 00:18:37,120
that are able to combine both local and

00:18:35,600 --> 00:18:39,039
remote repositories

00:18:37,120 --> 00:18:40,320
into them and so i'm going to actually

00:18:39,039 --> 00:18:42,880
create a maven

00:18:40,320 --> 00:18:44,799
virtual repository and i'm going to go

00:18:42,880 --> 00:18:47,039
ahead and call this one actually lib

00:18:44,799 --> 00:18:48,880
snapshot and what i'm going to do is i'm

00:18:47,039 --> 00:18:50,960
going to include both the local

00:18:48,880 --> 00:18:52,160
as well as the j center and then i'm

00:18:50,960 --> 00:18:54,840
going to say that the

00:18:52,160 --> 00:18:56,960
default deployment repository is lip

00:18:54,840 --> 00:18:59,120
snapshot and so what does this

00:18:56,960 --> 00:19:00,559
do well what this is going to do is it's

00:18:59,120 --> 00:19:03,600
going to allow me to connect to this

00:19:00,559 --> 00:19:05,360
virtual repository in my settings.xml

00:19:03,600 --> 00:19:07,280
and then what i'm going to do is anytime

00:19:05,360 --> 00:19:08,640
i deploy to this repository it's

00:19:07,280 --> 00:19:09,760
automatically going to store the

00:19:08,640 --> 00:19:12,880
artifacts

00:19:09,760 --> 00:19:13,600
in libsnapshop local but if i happen to

00:19:12,880 --> 00:19:15,919
do

00:19:13,600 --> 00:19:16,960
let's say a maven dependency colon

00:19:15,919 --> 00:19:18,320
resolve

00:19:16,960 --> 00:19:20,000
what it's going to do is it's going to

00:19:18,320 --> 00:19:22,080
actually reach out to jcenter to

00:19:20,000 --> 00:19:24,880
download all of those dependencies

00:19:22,080 --> 00:19:27,280
and so now i'm able to deploy and

00:19:24,880 --> 00:19:28,960
retrieve all of my artifacts against one

00:19:27,280 --> 00:19:31,039
virtual repository

00:19:28,960 --> 00:19:33,039
so i'll go ahead and click save and at

00:19:31,039 --> 00:19:35,200
this point now what i've done is i've

00:19:33,039 --> 00:19:36,559
really basically successfully set up the

00:19:35,200 --> 00:19:38,559
lib snapshots

00:19:36,559 --> 00:19:39,600
in addition what i would typically do is

00:19:38,559 --> 00:19:42,160
i would go and set up

00:19:39,600 --> 00:19:42,960
lib release as well and which i've

00:19:42,160 --> 00:19:44,960
already done

00:19:42,960 --> 00:19:46,799
on this instance over here so i don't

00:19:44,960 --> 00:19:47,679
want everybody to have to sit around and

00:19:46,799 --> 00:19:50,080
wait for me

00:19:47,679 --> 00:19:52,720
to do the exact same procedures again

00:19:50,080 --> 00:19:55,679
you'll see here i have the lib release

00:19:52,720 --> 00:19:56,160
the lib snapshot as well as the virtual

00:19:55,679 --> 00:19:58,240
and

00:19:56,160 --> 00:20:00,000
uh the virtual repository for both live

00:19:58,240 --> 00:20:03,760
snapshot and lib release

00:20:00,000 --> 00:20:05,840
and since i've used this uh

00:20:03,760 --> 00:20:07,679
um instance already for doing some

00:20:05,840 --> 00:20:09,360
dependency resolutions

00:20:07,679 --> 00:20:11,280
you'll see there's a whole bunch of jars

00:20:09,360 --> 00:20:14,080
that i've already downloaded

00:20:11,280 --> 00:20:15,120
um from jcenter which are now being

00:20:14,080 --> 00:20:18,080
stored

00:20:15,120 --> 00:20:18,960
um being cached in my artifactory and so

00:20:18,080 --> 00:20:21,200
this is a very

00:20:18,960 --> 00:20:22,320
important thing this will help um in

00:20:21,200 --> 00:20:24,720
particular

00:20:22,320 --> 00:20:25,679
um to reduce your bandwidth your network

00:20:24,720 --> 00:20:27,200
bandwidth once

00:20:25,679 --> 00:20:28,720
artifactories have once that your

00:20:27,200 --> 00:20:30,480
artifactory instance

00:20:28,720 --> 00:20:32,000
has downloaded that jar from the

00:20:30,480 --> 00:20:34,000
internet it's stored

00:20:32,000 --> 00:20:36,000
locally in artifactory for quick

00:20:34,000 --> 00:20:38,640
resolutions again

00:20:36,000 --> 00:20:39,200
and so that's great i've set up all of

00:20:38,640 --> 00:20:41,840
this

00:20:39,200 --> 00:20:43,679
now now what right so i've created my

00:20:41,840 --> 00:20:44,720
local repository i've created my virtual

00:20:43,679 --> 00:20:46,960
repository

00:20:44,720 --> 00:20:48,799
now i want to deploy a maven project to

00:20:46,960 --> 00:20:51,440
this this art factory right

00:20:48,799 --> 00:20:52,480
and so to do that how would i get this

00:20:51,440 --> 00:20:54,799
to work right

00:20:52,480 --> 00:20:55,679
so the easiest way to actually get this

00:20:54,799 --> 00:20:58,880
to work

00:20:55,679 --> 00:21:00,720
is to come into artifactory itself go to

00:20:58,880 --> 00:21:03,360
the particular repository

00:21:00,720 --> 00:21:05,360
and we have this button called set me up

00:21:03,360 --> 00:21:07,600
and so if you click on this button

00:21:05,360 --> 00:21:09,600
what you can actually do is give it your

00:21:07,600 --> 00:21:11,600
password

00:21:09,600 --> 00:21:13,919
and then you can tell it to generate the

00:21:11,600 --> 00:21:16,400
maven settings.xml

00:21:13,919 --> 00:21:18,799
and so what this will do is this will

00:21:16,400 --> 00:21:21,760
actually generate a settings.xml

00:21:18,799 --> 00:21:24,159
which you can then take and then fill in

00:21:21,760 --> 00:21:26,400
the correct information for the username

00:21:24,159 --> 00:21:27,919
as well as encrypting the password and

00:21:26,400 --> 00:21:29,280
then once you have all of this

00:21:27,919 --> 00:21:31,480
information set up

00:21:29,280 --> 00:21:32,880
you'll then need to store this

00:21:31,480 --> 00:21:35,919
settings.xml

00:21:32,880 --> 00:21:38,080
inside of your m2 folder or

00:21:35,919 --> 00:21:40,240
if you're building on a particular java

00:21:38,080 --> 00:21:42,640
project like for example i am

00:21:40,240 --> 00:21:45,039
i'm actually storing this settings.xml

00:21:42,640 --> 00:21:47,520
local to the actual maven project

00:21:45,039 --> 00:21:49,039
and then i'm applying various

00:21:47,520 --> 00:21:51,280
environment variables

00:21:49,039 --> 00:21:53,600
so i'm actually overriding these values

00:21:51,280 --> 00:21:57,520
based upon environment variables

00:21:53,600 --> 00:21:59,840
so this user variable password variable

00:21:57,520 --> 00:22:01,039
as well as the url variable will then

00:21:59,840 --> 00:22:02,880
get overwritten

00:22:01,039 --> 00:22:05,679
and then that's how i'm then able to use

00:22:02,880 --> 00:22:07,600
this settings.xml in my project

00:22:05,679 --> 00:22:09,360
and so what i'm going to do now is i'm

00:22:07,600 --> 00:22:10,320
actually going to go into my project

00:22:09,360 --> 00:22:12,480
here

00:22:10,320 --> 00:22:13,679
and i'm going to go ahead and show you

00:22:12,480 --> 00:22:18,240
guys very quickly

00:22:13,679 --> 00:22:20,720
uh just deploying this and so

00:22:18,240 --> 00:22:21,919
i'm going to run this command here maven

00:22:20,720 --> 00:22:23,440
clean deploy

00:22:21,919 --> 00:22:25,200
i'm actually going to skip the test

00:22:23,440 --> 00:22:25,760
because i'm actually just running junit

00:22:25,200 --> 00:22:27,600
00:22:25,760 --> 00:22:29,760
just to show you guys what this project

00:22:27,600 --> 00:22:30,400
is this is basically a very simple maven

00:22:29,760 --> 00:22:32,000
project

00:22:30,400 --> 00:22:34,400
where i have basically the source code

00:22:32,000 --> 00:22:35,039
for junit nothing that i've written or

00:22:34,400 --> 00:22:37,600
changed

00:22:35,039 --> 00:22:38,799
directly the only thing i did was i made

00:22:37,600 --> 00:22:41,520
it a child project

00:22:38,799 --> 00:22:42,880
to my palm and inside of my poem what do

00:22:41,520 --> 00:22:45,039
i have in this poem

00:22:42,880 --> 00:22:47,919
the main thing i have in this poem is

00:22:45,039 --> 00:22:50,159
the distribution management

00:22:47,919 --> 00:22:51,200
so this section so that way it knows how

00:22:50,159 --> 00:22:54,240
to deploy my

00:22:51,200 --> 00:22:57,120
my jars to the correct artifactory as

00:22:54,240 --> 00:22:58,960
well as the artifactory maven plug-in

00:22:57,120 --> 00:23:00,400
and so this plug-in is what will

00:22:58,960 --> 00:23:03,760
actually deploy the

00:23:00,400 --> 00:23:04,880
artifact rebuild info anytime i run that

00:23:03,760 --> 00:23:07,360
maven deploy

00:23:04,880 --> 00:23:08,480
command and so you'll see that i also

00:23:07,360 --> 00:23:11,600
have to specify

00:23:08,480 --> 00:23:12,640
my username my password as well as the

00:23:11,600 --> 00:23:14,799
build number

00:23:12,640 --> 00:23:16,159
into this individual artifactory

00:23:14,799 --> 00:23:18,480
instance

00:23:16,159 --> 00:23:20,080
again these can be specified via

00:23:18,480 --> 00:23:21,200
environment variables a whole bunch of

00:23:20,080 --> 00:23:23,280
different strategies

00:23:21,200 --> 00:23:24,960
but the idea is again not to actually

00:23:23,280 --> 00:23:25,919
store any of these kind of type of

00:23:24,960 --> 00:23:28,480
credentials

00:23:25,919 --> 00:23:29,919
in the actual source so right now we're

00:23:28,480 --> 00:23:33,200
just specifying these as

00:23:29,919 --> 00:23:33,679
maven parameters and so what i'm going

00:23:33,200 --> 00:23:35,679
to do

00:23:33,679 --> 00:23:38,159
is i'm going to now run this and you'll

00:23:35,679 --> 00:23:38,480
see i'm actually specifying it with dash

00:23:38,159 --> 00:23:41,279
d

00:23:38,480 --> 00:23:42,080
the username the password as well as the

00:23:41,279 --> 00:23:45,360
build number

00:23:42,080 --> 00:23:47,120
and i'm going to run this now and so

00:23:45,360 --> 00:23:48,799
what this will do is this is going to go

00:23:47,120 --> 00:23:51,679
into that junit 4

00:23:48,799 --> 00:23:52,240
again just the github.com junit 4 source

00:23:51,679 --> 00:23:54,400
code

00:23:52,240 --> 00:23:55,520
it's going to compile that source code

00:23:54,400 --> 00:23:58,400
oh and i

00:23:55,520 --> 00:24:00,080
actually have a ssl error so i apologize

00:23:58,400 --> 00:24:01,120
i actually have z scaler on so it's

00:24:00,080 --> 00:24:03,279
giving me some

00:24:01,120 --> 00:24:05,679
network communication issues so let me

00:24:03,279 --> 00:24:07,600
disable z-scaler

00:24:05,679 --> 00:24:09,600
and so if i run this again without

00:24:07,600 --> 00:24:12,000
z-scaler on i can actually get to the

00:24:09,600 --> 00:24:12,000
internet

00:24:12,080 --> 00:24:15,600
and so now that i run this without any

00:24:14,320 --> 00:24:17,360
network hiccups

00:24:15,600 --> 00:24:18,960
what will happen is it's going to run

00:24:17,360 --> 00:24:20,880
this it's going to compile it

00:24:18,960 --> 00:24:22,480
you're going to see here it's deploying

00:24:20,880 --> 00:24:24,880
the artifact out

00:24:22,480 --> 00:24:26,640
and so this is where it's actually

00:24:24,880 --> 00:24:29,760
shipping the jar

00:24:26,640 --> 00:24:30,640
my parent palm as well as the junit 4

00:24:29,760 --> 00:24:33,120
palm

00:24:30,640 --> 00:24:34,640
and then in addition it also deployed

00:24:33,120 --> 00:24:36,320
the the build info

00:24:34,640 --> 00:24:37,760
right and so you can see here it

00:24:36,320 --> 00:24:40,480
deployed the build info

00:24:37,760 --> 00:24:42,400
and it was build number nine so if i go

00:24:40,480 --> 00:24:44,559
back into this artifactory

00:24:42,400 --> 00:24:47,039
at this point what i can do is i can

00:24:44,559 --> 00:24:48,159
actually go in and i can look at this

00:24:47,039 --> 00:24:50,720
lib local

00:24:48,159 --> 00:24:51,520
uh and lib release and you can see i

00:24:50,720 --> 00:24:54,559
deployed this

00:24:51,520 --> 00:24:56,320
ato maven parent because i marked it as

00:24:54,559 --> 00:24:58,240
a real version it showed up in lib

00:24:56,320 --> 00:25:00,960
release instead of snapshot

00:24:58,240 --> 00:25:02,240
um and so you can see here is my um palm

00:25:00,960 --> 00:25:04,960
that was deployed

00:25:02,240 --> 00:25:06,720
and in addition there's also the build

00:25:04,960 --> 00:25:07,679
and so you can see the last build number

00:25:06,720 --> 00:25:10,000
is nine

00:25:07,679 --> 00:25:11,520
this is very powerful for an open source

00:25:10,000 --> 00:25:15,039
edition of art factory

00:25:11,520 --> 00:25:17,279
we give you the entire build info um

00:25:15,039 --> 00:25:18,640
and the builds so that way you're able

00:25:17,279 --> 00:25:20,240
to regardless of

00:25:18,640 --> 00:25:22,559
you know who's building this or from

00:25:20,240 --> 00:25:23,600
where you're able to actually go into an

00:25:22,559 --> 00:25:25,760
individual build

00:25:23,600 --> 00:25:28,480
such as this one you can see which

00:25:25,760 --> 00:25:29,279
modules have been published and then in

00:25:28,480 --> 00:25:31,279
addition

00:25:29,279 --> 00:25:32,559
what you can actually see is this build

00:25:31,279 --> 00:25:36,400
info json

00:25:32,559 --> 00:25:38,640
and so this is a very this this json

00:25:36,400 --> 00:25:40,240
is very powerful it's captured a whole

00:25:38,640 --> 00:25:43,360
bunch of information

00:25:40,240 --> 00:25:45,919
right um about my specific computer

00:25:43,360 --> 00:25:46,960
such as my uh what type of computer mac

00:25:45,919 --> 00:25:49,360
os x

00:25:46,960 --> 00:25:51,279
what are the uh parameters that were uh

00:25:49,360 --> 00:25:54,000
the command line args that were passed

00:25:51,279 --> 00:25:55,360
what was the jdk version that was used

00:25:54,000 --> 00:25:57,279
all of this is very

00:25:55,360 --> 00:25:58,799
important information i know i don't

00:25:57,279 --> 00:25:59,279
know how many times i've heard somebody

00:25:58,799 --> 00:26:02,000
say

00:25:59,279 --> 00:26:03,760
well the build worked on my my computer

00:26:02,000 --> 00:26:05,760
but it doesn't work over here

00:26:03,760 --> 00:26:06,880
um so this is the type of information

00:26:05,760 --> 00:26:09,600
that you could use

00:26:06,880 --> 00:26:10,400
to actually see you know hey why is this

00:26:09,600 --> 00:26:12,640
build

00:26:10,400 --> 00:26:14,320
behaving differently on this computer

00:26:12,640 --> 00:26:17,440
versus this server over here

00:26:14,320 --> 00:26:19,360
well this build info will give you

00:26:17,440 --> 00:26:21,600
all of the information that you need so

00:26:19,360 --> 00:26:24,000
you can actually diff the build

00:26:21,600 --> 00:26:25,120
and in addition look at the actual shaws

00:26:24,000 --> 00:26:26,880
that are produced

00:26:25,120 --> 00:26:28,720
to make sure that this build was

00:26:26,880 --> 00:26:31,679
actually reproduced the same

00:26:28,720 --> 00:26:32,640
regardless of what environment it was on

00:26:31,679 --> 00:26:34,880
and so that

00:26:32,640 --> 00:26:37,760
is covering that covered basically the

00:26:34,880 --> 00:26:39,760
artifactory oss demo

00:26:37,760 --> 00:26:41,919
in this demo again what did we cover

00:26:39,760 --> 00:26:44,240
installing our factory oss

00:26:41,919 --> 00:26:45,200
configuring artifactory oss creating a

00:26:44,240 --> 00:26:47,120
local repo

00:26:45,200 --> 00:26:48,240
creating a virtual repo deploying a

00:26:47,120 --> 00:26:51,120
maven project

00:26:48,240 --> 00:26:52,559
and deploying a build info so that's all

00:26:51,120 --> 00:26:54,559
great you know

00:26:52,559 --> 00:26:55,679
artifactory's up i'm using my

00:26:54,559 --> 00:26:58,720
artifactory

00:26:55,679 --> 00:26:59,520
i'm happy but what about day one plus

00:26:58,720 --> 00:27:02,640
activities

00:26:59,520 --> 00:27:03,039
right so artifactory oss leverages the

00:27:02,640 --> 00:27:06,080
same

00:27:03,039 --> 00:27:08,159
ecosystem as artifactory enterprise um

00:27:06,080 --> 00:27:09,200
so one of the things that typically

00:27:08,159 --> 00:27:11,120
people run into

00:27:09,200 --> 00:27:13,520
is they need to do some kind of cleanup

00:27:11,120 --> 00:27:14,480
right i deployed all these artifacts you

00:27:13,520 --> 00:27:16,240
might have seen

00:27:14,480 --> 00:27:17,520
you know i had a whole bunch of versions

00:27:16,240 --> 00:27:20,000
some of them were bad

00:27:17,520 --> 00:27:21,279
so how can i solve that so artifactory

00:27:20,000 --> 00:27:24,240
user plugins

00:27:21,279 --> 00:27:25,760
in particular the artifact cleanup will

00:27:24,240 --> 00:27:28,640
allow you to basically

00:27:25,760 --> 00:27:29,039
install a user plug-in into artifactory

00:27:28,640 --> 00:27:30,960
um

00:27:29,039 --> 00:27:33,520
these have been around for a very long

00:27:30,960 --> 00:27:36,559
time over five years

00:27:33,520 --> 00:27:39,679
across multiple major

00:27:36,559 --> 00:27:41,600
revision releases and so

00:27:39,679 --> 00:27:42,799
artifactory user plug-ins are a very

00:27:41,600 --> 00:27:45,600
mature and stable

00:27:42,799 --> 00:27:47,600
ecosystem and so you can deploy the

00:27:45,600 --> 00:27:49,200
artifact cleanup user plug-in

00:27:47,600 --> 00:27:50,720
or you can even build your own user

00:27:49,200 --> 00:27:52,960
plug-ins right

00:27:50,720 --> 00:27:54,799
it's designed so that you can extend the

00:27:52,960 --> 00:27:57,840
ecosystem yourself

00:27:54,799 --> 00:27:59,840
and in addition we also provide jfrog's

00:27:57,840 --> 00:28:03,120
artifactory log analytics

00:27:59,840 --> 00:28:05,760
completely free and open source and so

00:28:03,120 --> 00:28:08,000
we link off to the github directly here

00:28:05,760 --> 00:28:10,000
and so this github you'll see here

00:28:08,000 --> 00:28:12,320
everything is open source whether it's

00:28:10,000 --> 00:28:15,520
our vendors so we support

00:28:12,320 --> 00:28:17,760
splunk elastic prometheus datadog

00:28:15,520 --> 00:28:19,039
all of our fluent files everything is

00:28:17,760 --> 00:28:20,399
all open source

00:28:19,039 --> 00:28:22,080
so there's nothing that we're hiding

00:28:20,399 --> 00:28:24,039
from you you're able to utilize

00:28:22,080 --> 00:28:25,279
all of that and so you can use

00:28:24,039 --> 00:28:28,480
artifactory's

00:28:25,279 --> 00:28:31,440
log analytics to deploy an efk stack

00:28:28,480 --> 00:28:33,120
and send logs to elastic and so i'm

00:28:31,440 --> 00:28:34,000
going to quickly show you guys setting

00:28:33,120 --> 00:28:36,640
this up

00:28:34,000 --> 00:28:37,440
and so in this particular demo what am i

00:28:36,640 --> 00:28:39,600
going to do

00:28:37,440 --> 00:28:41,279
i'm going to actually deploy an elastic

00:28:39,600 --> 00:28:43,679
i'm going to deploy a cabana

00:28:41,279 --> 00:28:45,919
i'm going to install fluentd i'm going

00:28:43,679 --> 00:28:47,600
to send logs to the elastic

00:28:45,919 --> 00:28:49,279
and then we're also going to install the

00:28:47,600 --> 00:28:51,600
dashboard into kibana

00:28:49,279 --> 00:28:53,200
and so this will give you a robust log

00:28:51,600 --> 00:28:56,799
analytics solution

00:28:53,200 --> 00:28:58,640
on top of your artifactory oss and again

00:28:56,799 --> 00:29:01,600
all of this is open source

00:28:58,640 --> 00:29:02,080
and freely available on the internet and

00:29:01,600 --> 00:29:04,720
so

00:29:02,080 --> 00:29:06,159
first thing i want to do right is to

00:29:04,720 --> 00:29:08,960
deploy an elastic

00:29:06,159 --> 00:29:10,960
if i come back up here and i'm going to

00:29:08,960 --> 00:29:13,840
go ahead and close this one just for

00:29:10,960 --> 00:29:15,360
making a little bit easier to consume

00:29:13,840 --> 00:29:17,200
and so if i come in here and i look at

00:29:15,360 --> 00:29:20,640
what pods i have deployed again

00:29:17,200 --> 00:29:21,679
all i have is my artifactory uh my nginx

00:29:20,640 --> 00:29:24,399
and my postgres

00:29:21,679 --> 00:29:25,279
so i'm gonna go into ato what i have

00:29:24,399 --> 00:29:27,279
already done

00:29:25,279 --> 00:29:28,480
is i've already cloned this entire

00:29:27,279 --> 00:29:30,640
repository

00:29:28,480 --> 00:29:31,520
um i recommend that you use dash dash

00:29:30,640 --> 00:29:34,799
recursive

00:29:31,520 --> 00:29:35,520
um as there are some sub modules get sub

00:29:34,799 --> 00:29:36,880
modules

00:29:35,520 --> 00:29:38,559
and to make sure that you clone

00:29:36,880 --> 00:29:39,200
everything you should use the recursive

00:29:38,559 --> 00:29:41,520
flag

00:29:39,200 --> 00:29:43,520
which i've already done so what i can do

00:29:41,520 --> 00:29:44,399
is i can come into my log analytics

00:29:43,520 --> 00:29:46,159
folder

00:29:44,399 --> 00:29:48,320
and the first thing i'm going to do is

00:29:46,159 --> 00:29:50,640
i'm going to go into my log vendors

00:29:48,320 --> 00:29:51,919
and i'm going to go into elastic because

00:29:50,640 --> 00:29:54,480
this is the one that i want

00:29:51,919 --> 00:29:55,200
right and in addition i'm also going to

00:29:54,480 --> 00:29:58,799
go

00:29:55,200 --> 00:30:00,559
into my readme for elastic uh here

00:29:58,799 --> 00:30:03,200
and so you can click on this and you can

00:30:00,559 --> 00:30:06,080
see all of our versions that we support

00:30:03,200 --> 00:30:06,960
across the products and then there's

00:30:06,080 --> 00:30:08,960
additional

00:30:06,960 --> 00:30:10,159
setup and instructions on how you can

00:30:08,960 --> 00:30:12,399
actually set this up

00:30:10,159 --> 00:30:14,640
and so if i go down there's actually a

00:30:12,399 --> 00:30:16,720
section for an efk demo

00:30:14,640 --> 00:30:17,919
very helpful this will get you guys set

00:30:16,720 --> 00:30:19,760
up very quickly

00:30:17,919 --> 00:30:21,600
and so i'm going to actually go ahead

00:30:19,760 --> 00:30:22,320
and run these commands directly right

00:30:21,600 --> 00:30:24,480
here

00:30:22,320 --> 00:30:25,919
inside of this folder so that i have the

00:30:24,480 --> 00:30:27,360
same gamma

00:30:25,919 --> 00:30:28,720
and so at this point what it's going to

00:30:27,360 --> 00:30:30,640
do is it's going to deploy the

00:30:28,720 --> 00:30:33,520
elasticsearch config map

00:30:30,640 --> 00:30:35,520
the service as well as the stateful set

00:30:33,520 --> 00:30:37,520
and so then now we need to go ahead and

00:30:35,520 --> 00:30:40,080
wait for the elastic cluster

00:30:37,520 --> 00:30:42,159
oops click the wrong guy sorry about

00:30:40,080 --> 00:30:44,880
that

00:30:42,159 --> 00:30:45,919
and so wait for the elastic cluster to

00:30:44,880 --> 00:30:48,480
roll out

00:30:45,919 --> 00:30:49,840
once elastic has rolled out then we're

00:30:48,480 --> 00:30:51,919
going to go ahead and set up the

00:30:49,840 --> 00:30:52,880
passwords for our new elastic search

00:30:51,919 --> 00:30:54,640
cluster

00:30:52,880 --> 00:30:55,919
once we've set up the passwords then

00:30:54,640 --> 00:30:59,200
we're going to deploy

00:30:55,919 --> 00:30:59,840
deploy cabana and once we have deployed

00:30:59,200 --> 00:31:02,320
cabana

00:30:59,840 --> 00:31:03,519
then we're going to install fluentd into

00:31:02,320 --> 00:31:06,720
the artifactory

00:31:03,519 --> 00:31:10,240
to ship the logs from artifactory oss

00:31:06,720 --> 00:31:12,720
into elastic and then we'll last step

00:31:10,240 --> 00:31:13,279
deploy the dashboard which is also open

00:31:12,720 --> 00:31:15,519
source

00:31:13,279 --> 00:31:17,279
we'll deploy the dashboard into cabana

00:31:15,519 --> 00:31:18,799
the same dashboard that our enterprise

00:31:17,279 --> 00:31:22,000
customers use

00:31:18,799 --> 00:31:24,480
to then monitor our artifactory instance

00:31:22,000 --> 00:31:25,120
and so while we wait for this to finish

00:31:24,480 --> 00:31:27,440
um

00:31:25,120 --> 00:31:29,200
give this just one second an elastic

00:31:27,440 --> 00:31:30,159
search can take a little bit of time so

00:31:29,200 --> 00:31:32,159
let's

00:31:30,159 --> 00:31:34,080
double check yep the elasticsearch

00:31:32,159 --> 00:31:37,039
cluster is going to come

00:31:34,080 --> 00:31:37,039
here in one second

00:31:37,679 --> 00:31:41,760
and so i have already done most of this

00:31:40,799 --> 00:31:44,960
setup

00:31:41,760 --> 00:31:48,960
and uh so what i will show you guys is

00:31:44,960 --> 00:31:48,960
actually here in one second

00:31:50,240 --> 00:31:53,840
the cabana right so i've already

00:31:52,240 --> 00:31:56,240
deployed this kibana

00:31:53,840 --> 00:31:58,000
um i've already set all this up so i'm

00:31:56,240 --> 00:32:01,840
gonna log in while we wait

00:31:58,000 --> 00:32:01,840
so that way you guys can see

00:32:02,000 --> 00:32:08,080
kind of see this in action so to speak

00:32:05,760 --> 00:32:09,919
and so here is the kibana what i'll be

00:32:08,080 --> 00:32:10,640
able to do is i'll be able to actually

00:32:09,919 --> 00:32:13,200
search

00:32:10,640 --> 00:32:14,159
here and so you can see uh this is what

00:32:13,200 --> 00:32:16,320
happens is

00:32:14,159 --> 00:32:18,640
once we have this integration set up and

00:32:16,320 --> 00:32:20,399
end we'll be able to send our logs

00:32:18,640 --> 00:32:22,720
directly into kibana

00:32:20,399 --> 00:32:23,679
as you see here and so let's let this

00:32:22,720 --> 00:32:26,640
finish

00:32:23,679 --> 00:32:28,080
and so now that elastic has finished the

00:32:26,640 --> 00:32:30,399
next step that we need to do

00:32:28,080 --> 00:32:32,159
is we need to set up the passwords and

00:32:30,399 --> 00:32:32,640
so i'm going to go ahead and copy this

00:32:32,159 --> 00:32:35,840
command

00:32:32,640 --> 00:32:37,760
here and run it

00:32:35,840 --> 00:32:39,600
and what this will do is this will drop

00:32:37,760 --> 00:32:42,159
into the elastic search

00:32:39,600 --> 00:32:43,600
setup passwords in an interactive

00:32:42,159 --> 00:32:47,519
fashion

00:32:43,600 --> 00:32:57,840
and so give this a second to spin up

00:32:47,519 --> 00:32:57,840
and it looks like

00:32:58,320 --> 00:33:02,399
there we go so it was still it was still

00:33:00,799 --> 00:33:04,960
starting up that's why it gave me some

00:33:02,399 --> 00:33:05,760
network errors but now that it's running

00:33:04,960 --> 00:33:07,840
i can actually

00:33:05,760 --> 00:33:08,880
set the passwords up so i'm going to go

00:33:07,840 --> 00:33:12,240
ahead and

00:33:08,880 --> 00:33:15,360
use the same super secure password over

00:33:12,240 --> 00:33:15,360
for all of these

00:33:16,320 --> 00:33:24,240
and so once i have set up the password

00:33:20,000 --> 00:33:25,840
for all of these elastic systems it's

00:33:24,240 --> 00:33:28,960
going to ask me for it i think one more

00:33:25,840 --> 00:33:28,960
time after this

00:33:31,679 --> 00:33:35,200
all right it's going to go ahead and

00:33:33,120 --> 00:33:36,559
change the passwords and so at this

00:33:35,200 --> 00:33:40,000
point now what i can do

00:33:36,559 --> 00:33:43,440
is i can go ahead and set up

00:33:40,000 --> 00:33:48,159
the cabana and so

00:33:43,440 --> 00:33:48,159
i will need to go ahead and do this

00:33:50,880 --> 00:33:58,399
and deploy all those and then now

00:33:55,120 --> 00:33:59,519
i will go ahead and wait for the cabana

00:33:58,399 --> 00:34:03,279
to finish

00:33:59,519 --> 00:34:07,840
deploying and so let's wait for it for

00:34:03,279 --> 00:34:07,840
one second

00:34:10,399 --> 00:34:14,240
and so now the next step uh after we've

00:34:13,040 --> 00:34:16,879
already so we've just

00:34:14,240 --> 00:34:19,359
deployed elastic in cabana using the

00:34:16,879 --> 00:34:22,720
commands directly from the log analytics

00:34:19,359 --> 00:34:24,639
folder i mean the github repo

00:34:22,720 --> 00:34:26,879
and so the next step is the installation

00:34:24,639 --> 00:34:28,079
of fluentd so what is fluentd fluentd is

00:34:26,879 --> 00:34:30,720
the logging agent

00:34:28,079 --> 00:34:31,839
that we use to actually ship the logs

00:34:30,720 --> 00:34:34,800
from artifactory

00:34:31,839 --> 00:34:35,679
into elasticsearch and so what we'll

00:34:34,800 --> 00:34:37,440
need to do

00:34:35,679 --> 00:34:39,119
is we're going to actually need to drop

00:34:37,440 --> 00:34:42,720
into the pod

00:34:39,119 --> 00:34:44,240
uh for uh elasticsearch and it looks

00:34:42,720 --> 00:34:46,000
like i actually

00:34:44,240 --> 00:34:47,280
didn't do something right so what i'm

00:34:46,000 --> 00:34:50,240
going to do

00:34:47,280 --> 00:34:52,879
is quickly go back to the cluster i have

00:34:50,240 --> 00:34:52,879
already set up

00:34:55,359 --> 00:35:03,839
apologize one second

00:35:02,079 --> 00:35:06,400
and this is why i have already set this

00:35:03,839 --> 00:35:09,119
up just in case anything happened

00:35:06,400 --> 00:35:10,000
so go ahead and jump into this cluster

00:35:09,119 --> 00:35:11,680
because it looks like i

00:35:10,000 --> 00:35:13,440
probably didn't apply the password

00:35:11,680 --> 00:35:14,960
correctly and so

00:35:13,440 --> 00:35:17,200
once i jump into this cluster what

00:35:14,960 --> 00:35:18,160
you'll see is i already have the cabana

00:35:17,200 --> 00:35:20,720
up and running

00:35:18,160 --> 00:35:21,280
as expected and so what i'm going to do

00:35:20,720 --> 00:35:23,280
now

00:35:21,280 --> 00:35:24,320
is i'm actually going to go ahead and

00:35:23,280 --> 00:35:27,440
drop into

00:35:24,320 --> 00:35:29,040
artifactory oss and so if i drop into

00:35:27,440 --> 00:35:30,560
artifactory oss

00:35:29,040 --> 00:35:32,320
what i'm going to need to do is i'm

00:35:30,560 --> 00:35:32,880
actually going to need to install fluid

00:35:32,320 --> 00:35:35,680
d

00:35:32,880 --> 00:35:38,079
the easiest way to install fluid d

00:35:35,680 --> 00:35:41,760
directly as the artifactory user

00:35:38,079 --> 00:35:42,800
is to actually use our log analytics we

00:35:41,760 --> 00:35:46,400
provide

00:35:42,800 --> 00:35:47,920
an installation path so if we go back

00:35:46,400 --> 00:35:50,079
what you'll see is on the main log

00:35:47,920 --> 00:35:52,320
analytics we have a fluent installer

00:35:50,079 --> 00:35:54,560
you can actually download this installer

00:35:52,320 --> 00:35:57,280
which i've already done here

00:35:54,560 --> 00:35:58,960
and so you can see the same tar gz you

00:35:57,280 --> 00:36:00,960
unzip the tar gz

00:35:58,960 --> 00:36:03,440
and at that point you have the entire

00:36:00,960 --> 00:36:06,720
fluent ecosystem installed

00:36:03,440 --> 00:36:07,599
um and so what you will want to do is to

00:36:06,720 --> 00:36:09,359
test it out

00:36:07,599 --> 00:36:11,599
is you can run it directly against the

00:36:09,359 --> 00:36:13,680
test comp that will be there

00:36:11,599 --> 00:36:15,440
and once you've tested it out and

00:36:13,680 --> 00:36:16,240
confirmed that fluent is working as

00:36:15,440 --> 00:36:18,880
expected

00:36:16,240 --> 00:36:20,000
you see the dummy message the next step

00:36:18,880 --> 00:36:23,040
will be to actually

00:36:20,000 --> 00:36:26,160
set up your elastic configuration so

00:36:23,040 --> 00:36:29,200
to get the elastic configuration it was

00:36:26,160 --> 00:36:32,079
inside of the github repo

00:36:29,200 --> 00:36:34,160
so again if i go back to the github repo

00:36:32,079 --> 00:36:35,359
and i go to my log vendor which i'm

00:36:34,160 --> 00:36:37,800
using elastic

00:36:35,359 --> 00:36:39,359
what you'll see is there's actually

00:36:37,800 --> 00:36:42,160
affluentconf.rt

00:36:39,359 --> 00:36:44,320
and you'll also see it here as well uh

00:36:42,160 --> 00:36:46,480
that artifactory is supported

00:36:44,320 --> 00:36:48,800
and so i can actually click on this rt

00:36:46,480 --> 00:36:51,440
conf i copy it over here

00:36:48,800 --> 00:36:52,160
which i've already done for the sake of

00:36:51,440 --> 00:36:54,720
time

00:36:52,160 --> 00:36:55,680
and so at this point then what i can do

00:36:54,720 --> 00:36:58,480
is i can actually

00:36:55,680 --> 00:36:59,280
run this directly against this and this

00:36:58,480 --> 00:37:03,280
is what will then

00:36:59,280 --> 00:37:05,359
ship my logs over uh to elastic

00:37:03,280 --> 00:37:07,200
and so i've already set this up as a

00:37:05,359 --> 00:37:08,720
background process so i'm gonna go ahead

00:37:07,200 --> 00:37:10,800
and kill this additional

00:37:08,720 --> 00:37:11,760
installation and just make sure that

00:37:10,800 --> 00:37:13,920
it's still running

00:37:11,760 --> 00:37:14,960
so you see i already have fluency it's

00:37:13,920 --> 00:37:17,520
already running

00:37:14,960 --> 00:37:19,839
and so at this point i've already set up

00:37:17,520 --> 00:37:23,440
fluent to ship logs to my elastic

00:37:19,839 --> 00:37:25,359
the next step is to set up a cabana

00:37:23,440 --> 00:37:27,040
so to set up cabana what you'll need to

00:37:25,359 --> 00:37:28,000
do is you'll need to set up the index

00:37:27,040 --> 00:37:30,400
patterns

00:37:28,000 --> 00:37:31,280
the first index pattern will come in

00:37:30,400 --> 00:37:32,880
what you'll want to do

00:37:31,280 --> 00:37:35,040
is you'll want to create a new index

00:37:32,880 --> 00:37:37,280
pattern off of unified

00:37:35,040 --> 00:37:38,160
once you've created the index pattern

00:37:37,280 --> 00:37:40,640
the next step

00:37:38,160 --> 00:37:41,760
is to load the save object so what

00:37:40,640 --> 00:37:44,880
you'll want to do is

00:37:41,760 --> 00:37:48,560
import our json so if i go back

00:37:44,880 --> 00:37:51,440
and if i go back to all things open

00:37:48,560 --> 00:37:53,359
and i go to the log analytics and then i

00:37:51,440 --> 00:37:55,760
go into the log vendors again

00:37:53,359 --> 00:37:59,040
i go to elastic you'll see there's

00:37:55,760 --> 00:38:01,520
actually this export.nd.json

00:37:59,040 --> 00:38:03,040
again this is in the readme but this is

00:38:01,520 --> 00:38:05,520
the file that you'll use

00:38:03,040 --> 00:38:06,160
i can go ahead and then click import

00:38:05,520 --> 00:38:09,040
you'll see

00:38:06,160 --> 00:38:10,400
it successfully imported the 40 objects

00:38:09,040 --> 00:38:13,119
and so at this point

00:38:10,400 --> 00:38:14,720
i've now imported the jfrock dashboard

00:38:13,119 --> 00:38:17,680
all of the objects into a

00:38:14,720 --> 00:38:19,040
cabana i've set up the log analytics to

00:38:17,680 --> 00:38:21,680
ship to elastic

00:38:19,040 --> 00:38:24,640
and so i can actually now go into the

00:38:21,680 --> 00:38:24,640
dashboard itself

00:38:26,160 --> 00:38:31,359
and so what i should be able to do is

00:38:28,960 --> 00:38:33,359
click on this

00:38:31,359 --> 00:38:36,400
and oops if i actually click on

00:38:33,359 --> 00:38:36,400
dashboard sorry

00:38:36,720 --> 00:38:40,960
click on dashboards you'll see the jfrog

00:38:38,800 --> 00:38:42,000
dashboard i can go into the jfrog

00:38:40,960 --> 00:38:44,320
dashboard

00:38:42,000 --> 00:38:45,839
i can look i can change the time frames

00:38:44,320 --> 00:38:46,640
i can do a whole bunch a number of other

00:38:45,839 --> 00:38:49,520
things

00:38:46,640 --> 00:38:50,000
so i'll go and change this time frame to

00:38:49,520 --> 00:38:53,200
the

00:38:50,000 --> 00:38:55,440
last 24 hours i'll hit refresh

00:38:53,200 --> 00:38:56,480
and so you can see here in the last 24

00:38:55,440 --> 00:38:58,880
hours

00:38:56,480 --> 00:39:00,560
i've uploaded some data clearly i was

00:38:58,880 --> 00:39:02,320
doing some more testing at these

00:39:00,560 --> 00:39:05,119
particular times

00:39:02,320 --> 00:39:05,760
in addition there's also the artifactory

00:39:05,119 --> 00:39:08,160
errors

00:39:05,760 --> 00:39:10,240
the dashboard also covers x-ray which

00:39:08,160 --> 00:39:11,359
doesn't is not unfortunately included in

00:39:10,240 --> 00:39:13,040
oss

00:39:11,359 --> 00:39:14,480
but since this is the enterprise great

00:39:13,040 --> 00:39:16,640
dashboard you're going to see

00:39:14,480 --> 00:39:18,480
widgets that are for the entire uh

00:39:16,640 --> 00:39:20,160
enterprise suite of offering

00:39:18,480 --> 00:39:23,280
uh and so you can see here here's the

00:39:20,160 --> 00:39:25,200
accepted deploys by my username

00:39:23,280 --> 00:39:28,000
and so this is what's really provided is

00:39:25,200 --> 00:39:30,800
this ability to monitor artifactory

00:39:28,000 --> 00:39:31,599
through cabana through elastic and all

00:39:30,800 --> 00:39:35,440
of this again

00:39:31,599 --> 00:39:37,359
is free open source and available and so

00:39:35,440 --> 00:39:39,599
let's go ahead and jump back to the

00:39:37,359 --> 00:39:42,160
presentation and so i've shown you now

00:39:39,599 --> 00:39:42,880
setting up the artifactory log analytics

00:39:42,160 --> 00:39:44,560
demo

00:39:42,880 --> 00:39:47,280
where we've deployed an elastic we

00:39:44,560 --> 00:39:49,680
deployed a cabana we installed a fluent

00:39:47,280 --> 00:39:51,359
we sent the logs to elastic and then

00:39:49,680 --> 00:39:52,960
last thing we installed the dashboard

00:39:51,359 --> 00:39:55,599
into kibana

00:39:52,960 --> 00:39:56,240
and so bringing this all together we

00:39:55,599 --> 00:39:58,880
actually

00:39:56,240 --> 00:39:59,760
have the jfrog free tier which actually

00:39:58,880 --> 00:40:02,480
offers the

00:39:59,760 --> 00:40:03,599
x-ray enterprise robust component level

00:40:02,480 --> 00:40:06,000
security scanner

00:40:03,599 --> 00:40:06,640
it also has the pipelines built into it

00:40:06,000 --> 00:40:08,319
as well

00:40:06,640 --> 00:40:10,960
so how can we take advantage of these

00:40:08,319 --> 00:40:13,680
offerings right so there's no reason why

00:40:10,960 --> 00:40:14,640
you couldn't use artifactory oss with

00:40:13,680 --> 00:40:16,960
free tier

00:40:14,640 --> 00:40:19,119
and so a quick example is you could

00:40:16,960 --> 00:40:19,920
instead of maybe deploy to artifactory

00:40:19,119 --> 00:40:22,240
oss

00:40:19,920 --> 00:40:23,040
you could do a maven deploy to free tier

00:40:22,240 --> 00:40:25,200
you could use

00:40:23,040 --> 00:40:28,079
pipelines to potentially build release

00:40:25,200 --> 00:40:30,160
candidates offer your snapshot builds

00:40:28,079 --> 00:40:31,599
we could run and analyze the x-ray

00:40:30,160 --> 00:40:33,440
security scans

00:40:31,599 --> 00:40:34,720
and then we can also have pipelines to

00:40:33,440 --> 00:40:37,440
deploy to production

00:40:34,720 --> 00:40:38,079
and since this is all free we get to

00:40:37,440 --> 00:40:40,640
utilize

00:40:38,079 --> 00:40:41,760
all of these tools with artifactory oss

00:40:40,640 --> 00:40:45,359
at no cost

00:40:41,760 --> 00:40:48,079
with no credit card required and so

00:40:45,359 --> 00:40:50,400
the last thing i want to call out uh is

00:40:48,079 --> 00:40:53,520
if you don't want to use jfrog free tier

00:40:50,400 --> 00:40:56,240
but i still want to be able to uh use

00:40:53,520 --> 00:40:57,839
let's say helm and docker um because you

00:40:56,240 --> 00:40:59,839
know those are the type of

00:40:57,839 --> 00:41:01,839
production deployments that we're doing

00:40:59,839 --> 00:41:04,240
now uh we're going to a

00:41:01,839 --> 00:41:05,680
containerized kind of world uh where

00:41:04,240 --> 00:41:07,839
everything is being deployed into a

00:41:05,680 --> 00:41:10,000
kubernetes via helm charts

00:41:07,839 --> 00:41:11,920
um and so i really need to uh i really

00:41:10,000 --> 00:41:14,000
need to be able to support my my java

00:41:11,920 --> 00:41:16,160
project that's built with java uh

00:41:14,000 --> 00:41:17,520
built with uh maven or gradle but i

00:41:16,160 --> 00:41:18,800
really need to support it into a

00:41:17,520 --> 00:41:21,920
kubernetes right

00:41:18,800 --> 00:41:24,240
and so we offer jfrog container registry

00:41:21,920 --> 00:41:26,800
and there's no reason why um again you

00:41:24,240 --> 00:41:28,079
can't use artifactory oss plus jfrog

00:41:26,800 --> 00:41:30,319
container registry

00:41:28,079 --> 00:41:32,640
and if you combine these two offerings

00:41:30,319 --> 00:41:35,839
it basically allows you to support

00:41:32,640 --> 00:41:39,040
maven gradle iv sbt generic helm

00:41:35,839 --> 00:41:40,960
and docker and as you can see here

00:41:39,040 --> 00:41:42,560
why would you use jfrog container

00:41:40,960 --> 00:41:44,319
registry versus some of these other

00:41:42,560 --> 00:41:47,520
registries out there

00:41:44,319 --> 00:41:49,359
our registry has helm built into it so

00:41:47,520 --> 00:41:49,920
that's a very competitive advantage

00:41:49,359 --> 00:41:51,760
right

00:41:49,920 --> 00:41:53,280
being able to deploy your helm charts as

00:41:51,760 --> 00:41:56,480
well as your docker images

00:41:53,280 --> 00:41:59,040
into the same registry is very useful

00:41:56,480 --> 00:42:01,359
again we also support the concept of

00:41:59,040 --> 00:42:03,599
remote and virtual repositories

00:42:01,359 --> 00:42:06,079
so you're able to set up jfrog's chart

00:42:03,599 --> 00:42:08,000
center as your remote repository

00:42:06,079 --> 00:42:09,839
able to set up your local repository and

00:42:08,000 --> 00:42:11,599
then use a virtual repository

00:42:09,839 --> 00:42:13,680
like what i showed you guys for maven

00:42:11,599 --> 00:42:15,680
but this time for your helm charts

00:42:13,680 --> 00:42:17,119
uh and then it also in addition has

00:42:15,680 --> 00:42:19,440
built-in oss

00:42:17,119 --> 00:42:21,200
vulnerability scanning um which is not

00:42:19,440 --> 00:42:25,920
always offered on all the other

00:42:21,200 --> 00:42:25,920
uh offerings across the the cloud space

00:42:26,480 --> 00:42:30,400
so thank you uh for coming um in this

00:42:29,680 --> 00:42:32,960
talk

00:42:30,400 --> 00:42:33,839
we covered again artifactory oss plus

00:42:32,960 --> 00:42:36,240
free tier

00:42:33,839 --> 00:42:38,319
we also briefly touched on jcr and how

00:42:36,240 --> 00:42:40,560
you could use that for helm and docker

00:42:38,319 --> 00:42:41,359
um the slides are available at the link

00:42:40,560 --> 00:42:43,520
below

00:42:41,359 --> 00:42:44,400
uh and thank you so much and hopefully

00:42:43,520 --> 00:42:52,480
you enjoyed

00:42:44,400 --> 00:42:52,480

YouTube URL: https://www.youtube.com/watch?v=k-AjrM97ynE


