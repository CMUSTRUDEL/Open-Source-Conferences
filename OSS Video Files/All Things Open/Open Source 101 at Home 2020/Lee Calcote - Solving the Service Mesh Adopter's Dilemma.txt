Title: Lee Calcote - Solving the Service Mesh Adopter's Dilemma
Publication date: 2020-05-19
Playlist: Open Source 101 at Home 2020
Description: 
	Solving the Service Mesh Adopterâ€™s Dilemma

Presented at: Open Source 101 at Home 2020
Presented by: Lee Calcote, Layer5

Abstract: Which service mesh should I use and how do I get started? What are the different service meshes, and how do their architectures contrast?

This talk introduces Meshery, an open source, multi-service mesh management plane that provisions (six and counting) different service meshes, their sample applications and benchmarks the performance of service mesh deployments. Meshery facilitates benchmarking various configuration scenarios of service meshes, comparison of performance of services (applications) on and off the mesh and across different meshes. It vets mesh and services configuration against deployment best practices. 

Attendees will be empowered with the ability to quickly deploy different service meshes in which they may learn how service meshes function and how each differs from the next, so that they may select the best-fit-for-purpose service mesh for their workloads and their environment.

For more info: https://opensource101.com/
Captions: 
	00:00:00,030 --> 00:00:18,930
ah hi all very nice of each of you to

00:00:14,250 --> 00:00:21,480
join my name is Li you will be here

00:00:18,930 --> 00:00:25,310
listening to me for the next 40 years

00:00:21,480 --> 00:00:28,710
minutes 45 minutes or so if I catch some

00:00:25,310 --> 00:00:31,349
questions in the chat as we go maybe we

00:00:28,710 --> 00:00:34,500
will hear from you as well I'm hopeful

00:00:31,349 --> 00:00:37,649
that we will I'm really excited about

00:00:34,500 --> 00:00:40,469
the conference today in part because I'm

00:00:37,649 --> 00:00:42,690
coming to you from Austin Texas where

00:00:40,469 --> 00:00:46,829
the conference was was originally to be

00:00:42,690 --> 00:00:48,960
held and I'm tickled the the organizers

00:00:46,829 --> 00:00:52,320
I'm Todd and the rest and dancing the

00:00:48,960 --> 00:00:54,030
rest of the folks Danny have put on this

00:00:52,320 --> 00:00:56,910
event in virtually for us so we're still

00:00:54,030 --> 00:00:59,730
able to share I'm gonna share with you

00:00:56,910 --> 00:01:02,940
on some technology but I'm also gonna

00:00:59,730 --> 00:01:07,310
share with you really in the spirit of

00:01:02,940 --> 00:01:09,720
this conference and that will be about

00:01:07,310 --> 00:01:11,610
well about an open-source project and

00:01:09,720 --> 00:01:13,530
more than that project about a

00:01:11,610 --> 00:01:18,560
collection of projects and a community

00:01:13,530 --> 00:01:21,390
around it so so let's get started let me

00:01:18,560 --> 00:01:27,180
share with you with any luck we will

00:01:21,390 --> 00:01:29,159
also have a demo and so very good so

00:01:27,180 --> 00:01:33,869
today it is the tech that we're going to

00:01:29,159 --> 00:01:36,540
talk about is service meshes and the

00:01:33,869 --> 00:01:40,470
challenge of adopting them there are a

00:01:36,540 --> 00:01:42,180
number of service meshes out there not

00:01:40,470 --> 00:01:44,220
only you have to make an intelligent

00:01:42,180 --> 00:01:48,509
decision when you try to adopt one but

00:01:44,220 --> 00:01:51,270
also you need to overcome what might be

00:01:48,509 --> 00:01:53,909
your fears about

00:01:51,270 --> 00:01:56,280
well Software Defined Networking or

00:01:53,909 --> 00:01:57,899
next-gen Software Defined Networking I

00:01:56,280 --> 00:02:00,479
think it depends on how you want to

00:01:57,899 --> 00:02:05,189
phrase that but we're gonna see if we

00:02:00,479 --> 00:02:07,470
can help get you past that today small

00:02:05,189 --> 00:02:10,170
bit about me maybe the most important

00:02:07,470 --> 00:02:14,099
thing to take away from this slide is

00:02:10,170 --> 00:02:15,780
the URL that's in yellow not only I

00:02:14,099 --> 00:02:18,420
think will this recording be public

00:02:15,780 --> 00:02:20,400
later solo the slides as a matter of

00:02:18,420 --> 00:02:24,630
fact all of the talks that I could go up

00:02:20,400 --> 00:02:25,709
on that yellow URL and so if you see

00:02:24,630 --> 00:02:29,220
something interesting that I maybe

00:02:25,709 --> 00:02:31,319
skipped over you can find it there I am

00:02:29,220 --> 00:02:33,450
in general a few things about me I'm

00:02:31,319 --> 00:02:36,959
fairly busy in the cloud native

00:02:33,450 --> 00:02:39,720
ecosystem I think I used to characterize

00:02:36,959 --> 00:02:42,060
that as the container ecosystem and

00:02:39,720 --> 00:02:44,549
maybe still do I spend some time as a

00:02:42,060 --> 00:02:48,600
docker captain I spend some time as a

00:02:44,549 --> 00:02:51,690
scene CF ambassador and I chair one of

00:02:48,600 --> 00:02:55,440
the well the networking special interest

00:02:51,690 --> 00:02:57,660
group I also have written a few books on

00:02:55,440 --> 00:03:00,560
this particular topic on service meshes

00:02:57,660 --> 00:03:04,049
I'm in the process well on the very

00:03:00,560 --> 00:03:06,540
front end of writing another one on

00:03:04,049 --> 00:03:09,690
service meshed patterns so hopefully

00:03:06,540 --> 00:03:13,500
that will contain any number of good

00:03:09,690 --> 00:03:15,030
best practices if I can get control of

00:03:13,500 --> 00:03:21,420
my slides again we'll go to the next one

00:03:15,030 --> 00:03:24,420
and get off of me yeah great now that

00:03:21,420 --> 00:03:27,510
I've skipped through all the slides all

00:03:24,420 --> 00:03:29,310
right so I said that part of what we're

00:03:27,510 --> 00:03:32,579
going to talk about is service meshes as

00:03:29,310 --> 00:03:35,670
a technology but also about layer 5 as

00:03:32,579 --> 00:03:38,430
an open-source community a layer 5 is a

00:03:35,670 --> 00:03:41,579
community that's focused on well service

00:03:38,430 --> 00:03:44,069
meshes but through the auspices of that

00:03:41,579 --> 00:03:48,269
focus also inherently focused on

00:03:44,069 --> 00:03:51,580
kubernetes darker and really distributed

00:03:48,269 --> 00:03:54,190
things so

00:03:51,580 --> 00:03:57,220
this is a call to come on over the

00:03:54,190 --> 00:03:59,350
community is warm it's welcoming there's

00:03:57,220 --> 00:04:01,570
a slack Channel that's probably where

00:03:59,350 --> 00:04:05,260
you will find the most activity going on

00:04:01,570 --> 00:04:07,300
there are three open-source projects

00:04:05,260 --> 00:04:08,890
being stewarded in the community and we

00:04:07,300 --> 00:04:12,220
will talk about a little bit about each

00:04:08,890 --> 00:04:14,470
of them today that community just to

00:04:12,220 --> 00:04:17,890
give you a sense since we're here at

00:04:14,470 --> 00:04:20,560
open source 101 to give you a sense of

00:04:17,890 --> 00:04:23,110
it haven't gone from from zero to what

00:04:20,560 --> 00:04:26,560
it is currently it's been right at a

00:04:23,110 --> 00:04:28,960
year now that a couple of us have gotten

00:04:26,560 --> 00:04:31,330
together that were interested in service

00:04:28,960 --> 00:04:32,740
meshes and interested in solving really

00:04:31,330 --> 00:04:35,830
the thing that we're talking about today

00:04:32,740 --> 00:04:39,070
that the adopters dilemma it was as we

00:04:35,830 --> 00:04:40,750
were giving workshops on this technology

00:04:39,070 --> 00:04:43,180
that kept getting asked the same

00:04:40,750 --> 00:04:44,650
questions about how to stand up a

00:04:43,180 --> 00:04:47,560
service mesh which one to use

00:04:44,650 --> 00:04:50,290
what's the overhead of a mesh how do

00:04:47,560 --> 00:04:51,880
they how do they perform how should I

00:04:50,290 --> 00:04:54,070
configure them how do I run them well

00:04:51,880 --> 00:04:57,010
what should I expect out of them we

00:04:54,070 --> 00:05:00,250
formed this well this open source

00:04:57,010 --> 00:05:02,830
community layer five and it's grown and

00:05:00,250 --> 00:05:05,130
the projects that its stewards has grown

00:05:02,830 --> 00:05:08,669
as mater it's grown so much that will be

00:05:05,130 --> 00:05:11,620
shortly donating mesially to the CNC F

00:05:08,669 --> 00:05:13,090
mesially is a prot one of the the

00:05:11,620 --> 00:05:15,830
biggest project that we'll be talking

00:05:13,090 --> 00:05:20,120
about later

00:05:15,830 --> 00:05:22,250
so this slide maybe both encourages you

00:05:20,120 --> 00:05:26,390
to come and join it's an active

00:05:22,250 --> 00:05:29,690
community much happening we have ten we

00:05:26,390 --> 00:05:32,210
have many new joiners each day we in

00:05:29,690 --> 00:05:33,590
fact because of that and boy I don't

00:05:32,210 --> 00:05:38,780
seem to be able to control my slides

00:05:33,590 --> 00:05:41,020
much today there with me because of that

00:05:38,780 --> 00:05:44,930
we've instituted a new program there

00:05:41,020 --> 00:05:48,380
called mesh mates it's a it's a mentor

00:05:44,930 --> 00:05:52,190
program to help first-time open source

00:05:48,380 --> 00:05:53,960
contributors get familiar with what it's

00:05:52,190 --> 00:05:57,530
like to jump into the to a community

00:05:53,960 --> 00:05:59,270
like this and when I say open source

00:05:57,530 --> 00:06:04,970
contributors I don't necessarily mean

00:05:59,270 --> 00:06:06,590
code but a lot of other things so come

00:06:04,970 --> 00:06:12,260
and join the community you'll see what

00:06:06,590 --> 00:06:13,340
I'm saying of the service meshes I think

00:06:12,260 --> 00:06:15,410
you know for those that are going to

00:06:13,340 --> 00:06:17,270
adopt them you might still have a little

00:06:15,410 --> 00:06:20,780
bit of this question in your mind about

00:06:17,270 --> 00:06:22,310
what a service mesh is and you know

00:06:20,780 --> 00:06:25,310
there's there's a formal definition if

00:06:22,310 --> 00:06:27,080
you bore yourself enough to read one of

00:06:25,310 --> 00:06:28,730
the books that I've authored it says

00:06:27,080 --> 00:06:31,190
that it's you know it sort of

00:06:28,730 --> 00:06:33,410
regurgitates what it is that each of the

00:06:31,190 --> 00:06:35,750
meshes themselves kind of describe

00:06:33,410 --> 00:06:37,790
themselves as and that is a dedicated

00:06:35,750 --> 00:06:39,560
layer for managing service to service of

00:06:37,790 --> 00:06:41,750
communication that doesn't really

00:06:39,560 --> 00:06:44,120
explain it and so some people refer to

00:06:41,750 --> 00:06:46,340
them as a micro services platform I

00:06:44,120 --> 00:06:48,500
think that's partially true there are

00:06:46,340 --> 00:06:51,590
some service meshes that are large

00:06:48,500 --> 00:06:54,500
enough and you have enough capabilities

00:06:51,590 --> 00:06:56,660
have enough extensibility that you can

00:06:54,500 --> 00:06:58,280
build on top of them that they do become

00:06:56,660 --> 00:07:03,080
that layer does become something of a

00:06:58,280 --> 00:07:04,460
platform myself and some others have and

00:07:03,080 --> 00:07:06,890
I really don't know what's going on with

00:07:04,460 --> 00:07:08,930
my slides let me come out of full screen

00:07:06,890 --> 00:07:14,140
there and just see if this serves us

00:07:08,930 --> 00:07:16,820
better myself and some others have

00:07:14,140 --> 00:07:21,050
characterized them as a services first

00:07:16,820 --> 00:07:25,460
network so essentially a surface mesh

00:07:21,050 --> 00:07:27,920
lays down a new layer a new networking

00:07:25,460 --> 00:07:29,330
layer that's really for purposes of

00:07:27,920 --> 00:07:31,009
taking care of

00:07:29,330 --> 00:07:33,610
the needs of your distributed

00:07:31,009 --> 00:07:37,669
applications the needs of your

00:07:33,610 --> 00:07:40,099
microservices now you don't have to be

00:07:37,669 --> 00:07:42,710
using micro services to benefit from a

00:07:40,099 --> 00:07:45,349
service match but I would say the more

00:07:42,710 --> 00:07:47,990
services you're running the more that

00:07:45,349 --> 00:07:49,340
you benefit from a match you can onboard

00:07:47,990 --> 00:07:51,889
and we'll talk about it

00:07:49,340 --> 00:07:54,199
existing applications that you have that

00:07:51,889 --> 00:07:56,949
are running on bare metal or DMS you can

00:07:54,199 --> 00:07:59,270
onboard those arms that mesh as well

00:07:56,949 --> 00:08:03,289
what we'll be talking about mostly today

00:07:59,270 --> 00:08:04,699
is it sort of in context of well in

00:08:03,289 --> 00:08:07,330
context of running an application on

00:08:04,699 --> 00:08:12,110
kubernetes which this is an example of

00:08:07,330 --> 00:08:13,940
and this is well this is EC O's sample

00:08:12,110 --> 00:08:15,949
application each of the service measures

00:08:13,940 --> 00:08:18,069
that we'll talk about come generally

00:08:15,949 --> 00:08:21,110
come with a sample app so that you can

00:08:18,069 --> 00:08:23,060
gain some familiarity with what a

00:08:21,110 --> 00:08:25,250
service mesh does each one of those

00:08:23,060 --> 00:08:26,930
sample apps so it does a good job of

00:08:25,250 --> 00:08:33,050
highlighting the value of a match and

00:08:26,930 --> 00:08:36,589
this example one is no no exception it

00:08:33,050 --> 00:08:38,390
is written it's it's really a simple

00:08:36,589 --> 00:08:39,890
book catalog well actually look at two

00:08:38,390 --> 00:08:42,140
of these today we'll look at is Theos

00:08:39,890 --> 00:08:44,630
book catalog and as a sample app and

00:08:42,140 --> 00:08:47,959
we'll look at linker DS book catalog as

00:08:44,630 --> 00:08:50,390
a sample app as well what's pictured

00:08:47,959 --> 00:08:52,130
here is his sto is conceptually there

00:08:50,390 --> 00:08:55,370
there's probably you know relatively

00:08:52,130 --> 00:08:58,010
fairly similar this one is broken into

00:08:55,370 --> 00:08:59,959
four individual services each of these

00:08:58,010 --> 00:09:02,990
services Rob as written in a different

00:08:59,959 --> 00:09:05,449
language which begins to highlight part

00:09:02,990 --> 00:09:07,880
of the value of a mesh it working across

00:09:05,449 --> 00:09:10,190
languages providing the value that we're

00:09:07,880 --> 00:09:13,880
going to talk about irrespective of what

00:09:10,190 --> 00:09:15,320
language you're running now this is what

00:09:13,880 --> 00:09:17,240
that app looks like when it's not

00:09:15,320 --> 00:09:19,790
deployed on a mesh but is running in a

00:09:17,240 --> 00:09:22,640
kubernetes environment this is what that

00:09:19,790 --> 00:09:26,769
app looks like well specifically when

00:09:22,640 --> 00:09:29,810
it's deployed on certain types of meshes

00:09:26,769 --> 00:09:31,279
some service meshes and we're going to

00:09:29,810 --> 00:09:36,699
look at the architecture of different

00:09:31,279 --> 00:09:41,990
service meshes but some of them will

00:09:36,699 --> 00:09:42,380
inject a network proxy and sidecar next

00:09:41,990 --> 00:09:45,740
to

00:09:42,380 --> 00:09:50,210
your application containers inside the

00:09:45,740 --> 00:09:54,680
same kubernetes pod when they do that

00:09:50,210 --> 00:09:56,480
they essentially form a new services

00:09:54,680 --> 00:09:59,270
first network and network that we were

00:09:56,480 --> 00:10:02,510
just describing and really the traffic

00:09:59,270 --> 00:10:04,340
the requests that go to your services go

00:10:02,510 --> 00:10:07,330
in between your services and go in and

00:10:04,340 --> 00:10:11,690
out of your services are facilitated now

00:10:07,330 --> 00:10:14,870
by the service proxy that's side card

00:10:11,690 --> 00:10:18,470
next to your out so we'll look at this

00:10:14,870 --> 00:10:21,800
more in detail and give do a demo of how

00:10:18,470 --> 00:10:23,870
that works first you know I would say as

00:10:21,800 --> 00:10:27,740
people go to adopt service nationÃ­s they

00:10:23,870 --> 00:10:29,740
do it for any number of reasons that

00:10:27,740 --> 00:10:33,170
really depends on your use cases as to

00:10:29,740 --> 00:10:37,160
which particular piece of value you you

00:10:33,170 --> 00:10:39,590
assign the most well that you ascribe to

00:10:37,160 --> 00:10:42,610
the most that you're looking to run a

00:10:39,590 --> 00:10:46,610
match for one of those is observability

00:10:42,610 --> 00:10:48,830
the traffic that then now flows across a

00:10:46,610 --> 00:10:51,260
service mesh that the requests and the

00:10:48,830 --> 00:10:54,080
traffic that a surface finish is

00:10:51,260 --> 00:10:56,480
watching and facilitating well it can

00:10:54,080 --> 00:10:59,030
generate all kinds of telemetry all

00:10:56,480 --> 00:11:02,480
kinds of signals about that and by all

00:10:59,030 --> 00:11:06,890
kinds I generally mean traces logs and

00:11:02,480 --> 00:11:09,410
mint metrics and you can then ingest

00:11:06,890 --> 00:11:12,890
those that telemetry into your you know

00:11:09,410 --> 00:11:14,960
monitoring system of choice and give a

00:11:12,890 --> 00:11:18,890
lot of value you can take the blinders

00:11:14,960 --> 00:11:24,080
off if you will without having having

00:11:18,890 --> 00:11:25,910
had to instrument your app now there's a

00:11:24,080 --> 00:11:27,560
couple of asterisks about the

00:11:25,910 --> 00:11:30,680
observability that I was just talking

00:11:27,560 --> 00:11:33,680
about I guess I'll go back for a moment

00:11:30,680 --> 00:11:36,740
and say much of this is that the metrics

00:11:33,680 --> 00:11:39,610
and the logs are generally kind of black

00:11:36,740 --> 00:11:42,800
box to your application container

00:11:39,610 --> 00:11:44,420
meaning that the metrics and the logs

00:11:42,800 --> 00:11:48,020
that are generated from a mesh are

00:11:44,420 --> 00:11:51,790
generally focused on the traffic that's

00:11:48,020 --> 00:11:53,100
flowing into and between your services

00:11:51,790 --> 00:11:54,540
the try

00:11:53,100 --> 00:11:58,410
is the distributed tracing that you'll

00:11:54,540 --> 00:12:00,090
get out of a mash is more of what you

00:11:58,410 --> 00:12:03,990
would describe as white box monitoring

00:12:00,090 --> 00:12:05,760
say so you do see latency of the

00:12:03,990 --> 00:12:11,450
transactions that your services are

00:12:05,760 --> 00:12:13,470
processing in a very granular way and so

00:12:11,450 --> 00:12:17,010
yeah good so I'm glad I made that

00:12:13,470 --> 00:12:19,400
disclaimer the other capabilities that

00:12:17,010 --> 00:12:23,460
people deploy a service mesh for are

00:12:19,400 --> 00:12:25,950
well fine grained traffic control when

00:12:23,460 --> 00:12:27,990
you lay down but all of those proxies

00:12:25,950 --> 00:12:30,330
and you're able to control their

00:12:27,990 --> 00:12:32,400
configuration and direct traffic there's

00:12:30,330 --> 00:12:34,410
a lot of things that you can do when a

00:12:32,400 --> 00:12:38,040
proxy and network proxy is able to open

00:12:34,410 --> 00:12:42,090
up that packet and introspect it drop it

00:12:38,040 --> 00:12:44,280
reroute it take in a conditional maybe a

00:12:42,090 --> 00:12:46,230
particular person has logged in and so

00:12:44,280 --> 00:12:49,710
that they should be their traffic should

00:12:46,230 --> 00:12:52,130
be routed somewhere else maybe their

00:12:49,710 --> 00:12:54,900
traffic should be queued before others

00:12:52,130 --> 00:12:58,350
because of that control you're also able

00:12:54,900 --> 00:13:03,570
to do a lot of well essentially um chaos

00:12:58,350 --> 00:13:05,940
engineering you're able to both well in

00:13:03,570 --> 00:13:09,000
both chaos engineering and resiliency I

00:13:05,940 --> 00:13:12,170
think to the extent that you can inject

00:13:09,000 --> 00:13:15,660
chaos you can also configure a mesh to

00:13:12,170 --> 00:13:20,550
be provide a bunch of resiliency to your

00:13:15,660 --> 00:13:22,550
services so you can add in retries for

00:13:20,550 --> 00:13:25,950
failed requests that might go through

00:13:22,550 --> 00:13:28,050
you can add in rate limiting on your

00:13:25,950 --> 00:13:31,170
api's or on your endpoints so that they

00:13:28,050 --> 00:13:32,960
don't get overwhelmed you can have those

00:13:31,170 --> 00:13:36,270
connections to your services

00:13:32,960 --> 00:13:38,550
break or it basically invoke the circuit

00:13:36,270 --> 00:13:41,490
breaker there's a lot of things that

00:13:38,550 --> 00:13:44,870
another another aspect of a service mesh

00:13:41,490 --> 00:13:47,310
that that people look for is security

00:13:44,870 --> 00:13:50,190
central to the concept of a service mesh

00:13:47,310 --> 00:13:52,380
is identity and the notion that every

00:13:50,190 --> 00:13:55,080
service that's deployed on a mesh gets a

00:13:52,380 --> 00:13:57,810
unique ID gives you a identity and it's

00:13:55,080 --> 00:14:01,470
because of that identity that service

00:13:57,810 --> 00:14:05,450
meshes are able to facilitate east-west

00:14:01,470 --> 00:14:09,260
if you will secure connections

00:14:05,450 --> 00:14:12,710
those done through mutual TLS and so

00:14:09,260 --> 00:14:16,280
between observability granular network

00:14:12,710 --> 00:14:18,770
control and in this enhanced security

00:14:16,280 --> 00:14:21,380
there's a lot that people expect out of

00:14:18,770 --> 00:14:24,200
a mesh and this is in part why people

00:14:21,380 --> 00:14:27,080
use circus patches it's also to avoid

00:14:24,200 --> 00:14:30,410
things like writing all of those

00:14:27,080 --> 00:14:32,510
concerns that we just talked about into

00:14:30,410 --> 00:14:34,280
your application code if your

00:14:32,510 --> 00:14:36,890
infrastructure is capable of taking care

00:14:34,280 --> 00:14:40,250
of those things which is service mesh

00:14:36,890 --> 00:14:43,790
can then that really obviates the need

00:14:40,250 --> 00:14:45,530
to incorporate that infrastructure those

00:14:43,790 --> 00:14:47,570
infrastructure concerns into your

00:14:45,530 --> 00:14:48,920
application code that some of those

00:14:47,570 --> 00:14:52,610
concerns can kind of melt off your

00:14:48,920 --> 00:14:54,740
business logic if you will and let and

00:14:52,610 --> 00:14:57,710
you can you know expect more out of your

00:14:54,740 --> 00:14:59,900
infrastructure you can avoid doing

00:14:57,710 --> 00:15:01,910
duplicate of work like if you're having

00:14:59,900 --> 00:15:03,950
a building like the rate-limiting that I

00:15:01,910 --> 00:15:06,230
was just mentioning or having to

00:15:03,950 --> 00:15:07,790
redirect traffic based on the presence

00:15:06,230 --> 00:15:09,890
of a cookie or the fact that someone was

00:15:07,790 --> 00:15:12,380
logged in if you're having to build that

00:15:09,890 --> 00:15:15,470
into your application code you can hand

00:15:12,380 --> 00:15:17,360
that off to the the mesh to do those

00:15:15,470 --> 00:15:19,880
things you can make sure that the

00:15:17,360 --> 00:15:22,930
behavior of your network the behavior of

00:15:19,880 --> 00:15:25,820
the way that your services respond is

00:15:22,930 --> 00:15:27,770
uniform that the observability that the

00:15:25,820 --> 00:15:30,560
telemetry that you get out of your

00:15:27,770 --> 00:15:32,570
services the way in which you managed to

00:15:30,560 --> 00:15:34,250
manage them and what your what signals

00:15:32,570 --> 00:15:38,680
you're looking at you can haveyou can

00:15:34,250 --> 00:15:41,440
immediately get a uniform visibility

00:15:38,680 --> 00:15:43,820
across services running on a mesh

00:15:41,440 --> 00:15:46,010
because it doesn't matter what language

00:15:43,820 --> 00:15:50,690
you're running the service mesh will

00:15:46,010 --> 00:15:54,230
provide the same telemetry out of out of

00:15:50,690 --> 00:15:58,640
your deployment it also you know fairly

00:15:54,230 --> 00:16:01,520
notably eliminates a diffusion of

00:15:58,640 --> 00:16:05,750
responsibility about whose

00:16:01,520 --> 00:16:09,670
responsibility it is to in fact define

00:16:05,750 --> 00:16:12,530
the rate limit to define the retry count

00:16:09,670 --> 00:16:15,830
is that the developer is that the

00:16:12,530 --> 00:16:17,480
operator is who's defining your service

00:16:15,830 --> 00:16:18,800
level objective

00:16:17,480 --> 00:16:20,720
maybe it's an SRE

00:16:18,800 --> 00:16:22,220
maybe it's a service owner right now

00:16:20,720 --> 00:16:25,130
that can be diffused that's not always

00:16:22,220 --> 00:16:27,380
clear whose responsibility that is or if

00:16:25,130 --> 00:16:30,080
it is maybe an operator's responsibility

00:16:27,380 --> 00:16:32,930
maybe they don't have today they don't

00:16:30,080 --> 00:16:34,550
have control to affect that change they

00:16:32,930 --> 00:16:37,010
have to go to the development team to

00:16:34,550 --> 00:16:40,130
have that change made well when the

00:16:37,010 --> 00:16:41,870
service batch comes forth that is really

00:16:40,130 --> 00:16:44,089
empowering of the operator it's also

00:16:41,870 --> 00:16:46,820
really empowering of the developer who

00:16:44,089 --> 00:16:50,450
can even begin to not focus on some of

00:16:46,820 --> 00:16:52,700
those concerns service meshes also help

00:16:50,450 --> 00:16:55,420
like I'd said before about the well with

00:16:52,700 --> 00:16:58,610
modernizing your existing applications

00:16:55,420 --> 00:17:02,660
so there's some meshes not all of them

00:16:58,610 --> 00:17:04,339
will uplift your existing apps see they

00:17:02,660 --> 00:17:08,990
don't necessarily need to be running in

00:17:04,339 --> 00:17:11,569
containers to run on a Mac so people

00:17:08,990 --> 00:17:13,630
will run service specialists because of

00:17:11,569 --> 00:17:15,589
the things that I just mentioned and

00:17:13,630 --> 00:17:18,800
also because they're looking to move

00:17:15,589 --> 00:17:21,620
faster they're looking to increase the

00:17:18,800 --> 00:17:24,290
speed by which they release software by

00:17:21,620 --> 00:17:25,850
which they release new features and it's

00:17:24,290 --> 00:17:28,760
kind of interesting to take a look back

00:17:25,850 --> 00:17:32,360
over how it is that we develop software

00:17:28,760 --> 00:17:35,570
and how that the practices by which we

00:17:32,360 --> 00:17:37,370
do that have evolved over time the way

00:17:35,570 --> 00:17:38,510
in which we architect our application is

00:17:37,370 --> 00:17:40,370
the way in which we package and deploy

00:17:38,510 --> 00:17:43,130
them the infrastructure that we run them

00:17:40,370 --> 00:17:44,450
on an interesting note here is that I

00:17:43,130 --> 00:17:46,610
consider that there's a lot of

00:17:44,450 --> 00:17:50,450
similarities between the value

00:17:46,610 --> 00:17:53,480
proposition of functions both as compute

00:17:50,450 --> 00:17:57,130
and that of service measures and that is

00:17:53,480 --> 00:18:02,090
to say that a service measure can span

00:17:57,130 --> 00:18:05,720
you know these different cloud layers if

00:18:02,090 --> 00:18:08,059
you will I'm including functions if

00:18:05,720 --> 00:18:10,130
functions provide you know also have a

00:18:08,059 --> 00:18:12,770
similar value proposition around letting

00:18:10,130 --> 00:18:16,520
people letting developers and specific

00:18:12,770 --> 00:18:18,470
focus on just business logic and only

00:18:16,520 --> 00:18:20,929
having to run you know run that

00:18:18,470 --> 00:18:24,290
particular piece of business logic but

00:18:20,929 --> 00:18:25,850
that doesn't fit all types of services

00:18:24,290 --> 00:18:27,590
are all well not even services but all

00:18:25,850 --> 00:18:28,550
types of applications all types of

00:18:27,590 --> 00:18:30,679
workloads that you're going to want to

00:18:28,550 --> 00:18:32,420
run they work well for short-lived

00:18:30,679 --> 00:18:34,430
event-driven things

00:18:32,420 --> 00:18:37,640
of the workloads that we have in the

00:18:34,430 --> 00:18:40,310
world today or longer lived there there

00:18:37,640 --> 00:18:43,810
long long lived services that that are

00:18:40,310 --> 00:18:45,890
always hot tend to be processed driven

00:18:43,810 --> 00:18:52,040
service much to provide value in the

00:18:45,890 --> 00:18:54,770
face of that so as we as we go to get

00:18:52,040 --> 00:18:57,830
into some more specifics here about the

00:18:54,770 --> 00:19:01,970
architectures of the meshes I'll first

00:18:57,830 --> 00:19:05,660
say that it's fairly clear that service

00:19:01,970 --> 00:19:07,400
mesh adoption is coming in a big way and

00:19:05,660 --> 00:19:08,960
it really you know could be

00:19:07,400 --> 00:19:11,660
characterized as it's kind of a third

00:19:08,960 --> 00:19:14,930
major step that a lot of us take in our

00:19:11,660 --> 00:19:16,880
cloud native journey if you look at the

00:19:14,930 --> 00:19:20,870
timeframe by which some of these these

00:19:16,880 --> 00:19:23,510
these steps were announced or the

00:19:20,870 --> 00:19:26,060
timeframe by which the the one data or

00:19:23,510 --> 00:19:30,290
the GA version of each of the most

00:19:26,060 --> 00:19:34,970
popular projects or products in these

00:19:30,290 --> 00:19:38,750
areas you we are I think you know

00:19:34,970 --> 00:19:42,170
service mesh as a as a buzzword if you

00:19:38,750 --> 00:19:44,390
will was pretty buzzy and over the last

00:19:42,170 --> 00:19:46,250
couple of years I think what we're gonna

00:19:44,390 --> 00:19:48,260
be seeing now that it's been around for

00:19:46,250 --> 00:19:51,950
some time and people are more and more

00:19:48,260 --> 00:19:55,790
people are running more and more

00:19:51,950 --> 00:19:57,470
containers serviced mesh deployments are

00:19:55,790 --> 00:19:59,320
probably going to get a pretty real and

00:19:57,470 --> 00:20:03,320
we will actually talk about a couple I

00:19:59,320 --> 00:20:06,050
talked about the the notion that that

00:20:03,320 --> 00:20:09,260
responsibility becomes a bit or the

00:20:06,050 --> 00:20:12,140
diffusion of responsibility begins to go

00:20:09,260 --> 00:20:14,720
away when a mesh is present that both

00:20:12,140 --> 00:20:19,820
developers and operators are empowered

00:20:14,720 --> 00:20:23,540
with this smarter infrastructure that's

00:20:19,820 --> 00:20:26,300
actually maybe the the key to sort of

00:20:23,540 --> 00:20:30,610
the hidden secret if you will as to what

00:20:26,300 --> 00:20:34,550
the real value of a service mesh is this

00:20:30,610 --> 00:20:37,310
fifth layer this if you're familiar with

00:20:34,550 --> 00:20:41,330
the OSI model kind of the layer five is

00:20:37,310 --> 00:20:44,420
a session layer and it's a bit

00:20:41,330 --> 00:20:45,330
tongue-in-cheek but conceptually the

00:20:44,420 --> 00:20:48,540
service specialist will

00:20:45,330 --> 00:20:50,970
lay down at that in that space they

00:20:48,540 --> 00:20:53,120
clearly speak layer seven and interact

00:20:50,970 --> 00:20:56,460
with your applications and your services

00:20:53,120 --> 00:20:57,780
but it's pretty interesting that both of

00:20:56,460 --> 00:21:00,090
these teams are empowered and they're

00:20:57,780 --> 00:21:02,970
empowered to maybe decouple a little bit

00:21:00,090 --> 00:21:06,780
and iterate and move forward independent

00:21:02,970 --> 00:21:10,010
of one another so there are some a

00:21:06,780 --> 00:21:13,620
number of case studies of different

00:21:10,010 --> 00:21:15,810
organizations having deployed and the

00:21:13,620 --> 00:21:18,450
two examples I'm using here are sto and

00:21:15,810 --> 00:21:22,730
Laker G but I haven't deployed a service

00:21:18,450 --> 00:21:27,540
match and having significantly benefited

00:21:22,730 --> 00:21:29,520
in terms of the overall cost of running

00:21:27,540 --> 00:21:32,250
their infrastructure or that the cost

00:21:29,520 --> 00:21:36,480
that it would have taken to get to I'm a

00:21:32,250 --> 00:21:39,390
highly secured coming east-west traffic

00:21:36,480 --> 00:21:40,470
like we were talking about before for

00:21:39,390 --> 00:21:43,080
them to be able to get to something like

00:21:40,470 --> 00:21:44,670
that would have taken and this in this

00:21:43,080 --> 00:21:48,890
case in the example on the left about

00:21:44,670 --> 00:21:52,170
six months to secure that infrastructure

00:21:48,890 --> 00:21:55,680
took a lot less when when a mesh was

00:21:52,170 --> 00:21:57,750
deployed so kind of interesting let's

00:21:55,680 --> 00:22:00,540
talk about the service measure

00:21:57,750 --> 00:22:02,040
architectures and some of their

00:22:00,540 --> 00:22:04,680
differences so we took a look at a

00:22:02,040 --> 00:22:10,320
sample app earlier and we talked about

00:22:04,680 --> 00:22:12,480
how for some meshes running your

00:22:10,320 --> 00:22:16,040
workload on the service mesh means that

00:22:12,480 --> 00:22:20,280
you would have a service proxy side card

00:22:16,040 --> 00:22:22,500
to your application some meshes um have

00:22:20,280 --> 00:22:25,890
that architecture and some don't of

00:22:22,500 --> 00:22:28,380
their pros and cons to both of those but

00:22:25,890 --> 00:22:33,020
irrespective of that those different

00:22:28,380 --> 00:22:35,910
models this this high-level architecture

00:22:33,020 --> 00:22:39,330
holds true for each each service mesh

00:22:35,910 --> 00:22:41,580
that you might encounter so the first

00:22:39,330 --> 00:22:44,430
layer here the first come architectural

00:22:41,580 --> 00:22:46,590
component is referred to as the data

00:22:44,430 --> 00:22:49,950
plane inside of the surface mesh this is

00:22:46,590 --> 00:22:53,940
really where all of the network proxies

00:22:49,950 --> 00:22:56,160
all those service proxies are logically

00:22:53,940 --> 00:22:57,540
grouped they are they're kind of the

00:22:56,160 --> 00:23:01,440
workhorse of

00:22:57,540 --> 00:23:03,540
servus match so those those myriad

00:23:01,440 --> 00:23:06,929
proxies are the ones that are doing the

00:23:03,540 --> 00:23:09,809
heavy lifting they're intercepting but

00:23:06,929 --> 00:23:12,660
well transparently intercepting network

00:23:09,809 --> 00:23:14,970
requests and doing things with those

00:23:12,660 --> 00:23:19,640
requests they're responsible for quite a

00:23:14,970 --> 00:23:22,650
bit the the next layer here the next

00:23:19,640 --> 00:23:26,419
plane Network claim is the control plane

00:23:22,650 --> 00:23:28,679
this is often where you as an individual

00:23:26,419 --> 00:23:30,809
operator or someone who's deploying a

00:23:28,679 --> 00:23:34,320
service mesh might interface with that

00:23:30,809 --> 00:23:37,799
service mesh and applied configuration

00:23:34,320 --> 00:23:40,410
the control plane deals with speaking to

00:23:37,799 --> 00:23:44,270
the proxies updating their configuration

00:23:40,410 --> 00:23:49,350
and it's really the the point of control

00:23:44,270 --> 00:23:52,020
for a given type of service mesh if you

00:23:49,350 --> 00:23:54,390
are of a networking background or or not

00:23:52,020 --> 00:23:56,850
you you may have come across the concept

00:23:54,390 --> 00:23:59,760
of a management plane which is to say

00:23:56,850 --> 00:24:03,000
that the world isn't just service meshes

00:23:59,760 --> 00:24:04,710
and with there are you know any number

00:24:03,000 --> 00:24:06,510
of control planes I think for some of

00:24:04,710 --> 00:24:08,580
you who are running kubernetes or

00:24:06,510 --> 00:24:10,200
familiar with kubernetes it too has a

00:24:08,580 --> 00:24:12,150
control plane so there are there are

00:24:10,200 --> 00:24:14,850
many control plans for a variety of

00:24:12,150 --> 00:24:17,549
systems that that people are running a

00:24:14,850 --> 00:24:21,370
management plane layers on top to help

00:24:17,549 --> 00:24:23,059
stitch these together to help federal

00:24:21,370 --> 00:24:25,350
[Music]

00:24:23,059 --> 00:24:27,240
service mesh deployments whether those

00:24:25,350 --> 00:24:28,830
are the same type of service mesh or

00:24:27,240 --> 00:24:33,260
different types of service service

00:24:28,830 --> 00:24:38,669
missions they come in to layer on

00:24:33,260 --> 00:24:41,450
enhanced policy and governance may be do

00:24:38,669 --> 00:24:46,530
perform some chaos engineering maybe to

00:24:41,450 --> 00:24:48,240
help with some cost control to do a lot

00:24:46,530 --> 00:24:52,169
of things that you wouldn't expect a

00:24:48,240 --> 00:24:54,929
control plane itself to do so we take a

00:24:52,169 --> 00:24:57,530
look at some specific examples of how

00:24:54,929 --> 00:25:01,350
these architectures come to life

00:24:57,530 --> 00:25:03,600
particularly look at an East EO e SEOs

00:25:01,350 --> 00:25:07,080
undergone some architectural change

00:25:03,600 --> 00:25:08,690
recently the logical components that

00:25:07,080 --> 00:25:11,750
we're showing here are

00:25:08,690 --> 00:25:16,100
[Music]

00:25:11,750 --> 00:25:19,820
or perform certain duties in the control

00:25:16,100 --> 00:25:22,910
plane for it for sto when you deploy it

00:25:19,820 --> 00:25:24,800
on in a kubernetes environment that

00:25:22,910 --> 00:25:27,140
control plane will be deployed and its

00:25:24,800 --> 00:25:30,170
components will be deployed inside of a

00:25:27,140 --> 00:25:32,290
separate namespace that namespace is

00:25:30,170 --> 00:25:36,380
reserved for

00:25:32,290 --> 00:25:39,580
ISTE O's but in steals control plane

00:25:36,380 --> 00:25:43,220
components daily pilot Citadel mixer

00:25:39,580 --> 00:25:45,130
just briefly to highlight what each of

00:25:43,220 --> 00:25:48,050
these components do

00:25:45,130 --> 00:25:51,020
ditalion pilot deal with interfacing

00:25:48,050 --> 00:25:53,540
with the underlying platform the

00:25:51,020 --> 00:25:56,990
underlying infrastructure interfacing

00:25:53,540 --> 00:25:59,030
with kubernetes may be sourcing where it

00:25:56,990 --> 00:26:01,280
is that kubernetes is scheduling and

00:25:59,030 --> 00:26:03,140
placing various services so it's

00:26:01,280 --> 00:26:05,830
interfacing with service discovery it's

00:26:03,140 --> 00:26:08,150
then taking that configuration and

00:26:05,830 --> 00:26:10,460
reformatting it to push down that

00:26:08,150 --> 00:26:13,970
configuration to the individual sidecar

00:26:10,460 --> 00:26:17,810
proxies Citadel as a component in sto is

00:26:13,970 --> 00:26:21,200
dealing with certificates and identity

00:26:17,810 --> 00:26:26,180
and mixer is dealing with enforcing

00:26:21,200 --> 00:26:29,630
policy and collecting telemetry and so

00:26:26,180 --> 00:26:32,750
if we take a look at another service

00:26:29,630 --> 00:26:35,540
mesh that this one is well it can run

00:26:32,750 --> 00:26:38,030
with or with an existing is do

00:26:35,540 --> 00:26:39,560
deployment or or it will deploy a new

00:26:38,030 --> 00:26:44,630
you co deployment for you

00:26:39,560 --> 00:26:47,090
octarine is a security centric service

00:26:44,630 --> 00:26:49,460
mesh and helping you run your services

00:26:47,090 --> 00:26:52,370
more securely it too has a control plane

00:26:49,460 --> 00:26:54,470
and a data plane link your D your

00:26:52,370 --> 00:26:57,110
probably you know also familiar with a

00:26:54,470 --> 00:27:00,530
control plane and a data plan different

00:26:57,110 --> 00:27:02,030
control plane components we're seeing

00:27:00,530 --> 00:27:04,100
here more that it's common for the

00:27:02,030 --> 00:27:07,220
control planes to include a small

00:27:04,100 --> 00:27:08,810
instance of grow fauna or Prometheus if

00:27:07,220 --> 00:27:10,900
for nothing else to help people get up

00:27:08,810 --> 00:27:13,910
and running and get at that

00:27:10,900 --> 00:27:18,770
observability get up those telemetric

00:27:13,910 --> 00:27:23,320
signals linker D in this case also comes

00:27:18,770 --> 00:27:25,450
with user interface but it

00:27:23,320 --> 00:27:27,220
work of the three architectures or three

00:27:25,450 --> 00:27:30,190
sample architectures the reality is like

00:27:27,220 --> 00:27:32,830
that it's messy out there if you will

00:27:30,190 --> 00:27:34,240
it's there are you know you know about

00:27:32,830 --> 00:27:36,550
twenty something different service

00:27:34,240 --> 00:27:38,740
meshes some of them share I have much

00:27:36,550 --> 00:27:40,960
commonality while others really don't

00:27:38,740 --> 00:27:42,760
and so there's a one of the projects

00:27:40,960 --> 00:27:47,860
that that open-source community later

00:27:42,760 --> 00:27:50,110
five curates is a landscape

00:27:47,860 --> 00:27:53,019
well service meshes and related

00:27:50,110 --> 00:27:54,970
technologies and so you'll see some a

00:27:53,019 --> 00:27:58,890
lot of information about the service

00:27:54,970 --> 00:28:02,679
meshes here at layer five io / landscape

00:27:58,890 --> 00:28:05,559
you'll also very shortly see a bunch of

00:28:02,679 --> 00:28:08,169
opinions answering the service mesh

00:28:05,559 --> 00:28:12,309
adopters dilemma one of them which is

00:28:08,169 --> 00:28:13,870
which mesh should I adopt it will fairly

00:28:12,309 --> 00:28:15,909
shortly provide a lot of opinion about

00:28:13,870 --> 00:28:17,950
that and try to help you I'm trying to

00:28:15,909 --> 00:28:19,600
open direct you based on your

00:28:17,950 --> 00:28:21,279
environment because the answer there

00:28:19,600 --> 00:28:24,760
isn't so simple it's really like it

00:28:21,279 --> 00:28:27,480
depends it depends on well a lot of

00:28:24,760 --> 00:28:30,669
things when it will talk about something

00:28:27,480 --> 00:28:33,490
it's only it is a multi mesh world today

00:28:30,669 --> 00:28:36,690
we'll see if how much that does or does

00:28:33,490 --> 00:28:39,039
not consolidate you know going forth

00:28:36,690 --> 00:28:41,350
because it is a multi mesh world today

00:28:39,039 --> 00:28:44,110
there are service mesh abstractions that

00:28:41,350 --> 00:28:47,200
have come about one of those is called

00:28:44,110 --> 00:28:48,700
surface mesh interface or SMI it's

00:28:47,200 --> 00:28:51,490
intended to be something about a

00:28:48,700 --> 00:28:55,299
lowest-common-denominator interface a

00:28:51,490 --> 00:28:58,120
standard interface behind which surface

00:28:55,299 --> 00:29:00,669
meshes might plug in and so you as an

00:28:58,120 --> 00:29:04,480
adopter instead of interfacing with the

00:29:00,669 --> 00:29:06,669
specific api's of any even mesh you

00:29:04,480 --> 00:29:11,380
would instead interface with it this

00:29:06,669 --> 00:29:13,899
standard api SMI another one that's

00:29:11,380 --> 00:29:16,480
that's out there is one for helping

00:29:13,899 --> 00:29:18,130
federate the catalogs of different

00:29:16,480 --> 00:29:21,460
either the same type of mesh or

00:29:18,130 --> 00:29:22,990
different meshes such that in a multi

00:29:21,460 --> 00:29:25,809
cluster environment or a multi mesh

00:29:22,990 --> 00:29:28,299
environment that the services that one

00:29:25,809 --> 00:29:32,440
is providing forward running can be

00:29:28,299 --> 00:29:33,850
spoken to and exchanged between meshes

00:29:32,440 --> 00:29:36,730
so they can be cognizant to one another

00:29:33,850 --> 00:29:39,779
there's a third specification coming

00:29:36,730 --> 00:29:43,809
forth here and it's the service mesh

00:29:39,779 --> 00:29:48,809
performance specification it's SMPS it's

00:29:43,809 --> 00:29:53,110
one for capturing and describing the

00:29:48,809 --> 00:29:55,360
performance of a service mesh it's not

00:29:53,110 --> 00:29:57,789
an easy thing to necessarily do it

00:29:55,360 --> 00:30:01,340
captures the performance of a mesh and

00:29:57,789 --> 00:30:03,320
it also offers up that

00:30:01,340 --> 00:30:05,150
performance numbers in context of the

00:30:03,320 --> 00:30:09,799
value that you're getting out of the

00:30:05,150 --> 00:30:11,210
mesh so it gives you the tools to help

00:30:09,799 --> 00:30:12,410
understand if you're running doing a

00:30:11,210 --> 00:30:14,120
good job of running your infrastructure

00:30:12,410 --> 00:30:15,890
if you're really getting the value that

00:30:14,120 --> 00:30:18,140
you should be out of a mesh unless you

00:30:15,890 --> 00:30:21,170
do it in a comparative way which is

00:30:18,140 --> 00:30:23,059
really like the two you know the two

00:30:21,170 --> 00:30:25,760
very prominent questions that people ask

00:30:23,059 --> 00:30:28,780
when they go to adopt a service batch

00:30:25,760 --> 00:30:33,860
which is what I mentioned earlier on and

00:30:28,780 --> 00:30:36,410
so earlier on I'd said that we might get

00:30:33,860 --> 00:30:38,270
to a demo now I think that we we will I

00:30:36,410 --> 00:30:40,250
think we've got time I'm just just

00:30:38,270 --> 00:30:43,610
checking so because of those two

00:30:40,250 --> 00:30:46,370
questions I was saying I was saying

00:30:43,610 --> 00:30:48,650
before that we a collection of open

00:30:46,370 --> 00:30:52,160
source eccentric individuals of mine

00:30:48,650 --> 00:30:55,460
including myself went off to build this

00:30:52,160 --> 00:30:58,640
project mystery it said it's a it's a

00:30:55,460 --> 00:30:59,559
service mesh management plan it manages

00:30:58,640 --> 00:31:02,090
multiple meshes

00:30:59,559 --> 00:31:05,540
I'm irrespective of whether it's

00:31:02,090 --> 00:31:07,760
managing multiple meshes or just one it

00:31:05,540 --> 00:31:09,950
really provides the same value so it

00:31:07,760 --> 00:31:12,440
tries to address the two questions we

00:31:09,950 --> 00:31:14,660
were just looking at which one to adopt

00:31:12,440 --> 00:31:16,100
how to get your service match up what

00:31:14,660 --> 00:31:19,309
are the best practices are running them

00:31:16,100 --> 00:31:21,380
serve as mesh and what's the what should

00:31:19,309 --> 00:31:24,350
I expect in terms of overhead how should

00:31:21,380 --> 00:31:26,990
i ongoing manage that overhead because

00:31:24,350 --> 00:31:28,580
that the performance of your workload

00:31:26,990 --> 00:31:31,790
and the performance of your service

00:31:28,580 --> 00:31:36,880
measures will change over time my Cherie

00:31:31,790 --> 00:31:39,260
is well soon to be the well it's it's um

00:31:36,880 --> 00:31:42,410
it's an implementation of has an

00:31:39,260 --> 00:31:45,440
implementation of SMR it in terms of

00:31:42,410 --> 00:31:49,730
like this conference in particular open

00:31:45,440 --> 00:31:52,010
source 101 at home this community and

00:31:49,730 --> 00:31:55,010
this open source project participates

00:31:52,010 --> 00:31:57,380
and has interns through the linux

00:31:55,010 --> 00:31:59,600
foundation's community bridge which i'm

00:31:57,380 --> 00:32:02,059
not sure how many of you have

00:31:59,600 --> 00:32:03,320
necessarily heard of that but it's but

00:32:02,059 --> 00:32:05,299
it's an up-and-coming program and

00:32:03,320 --> 00:32:07,510
there's been there about a year and a

00:32:05,299 --> 00:32:07,510
half now

00:32:07,950 --> 00:32:12,029
and it also has interns through google

00:32:10,019 --> 00:32:13,710
Summer of Code and so the the community

00:32:12,029 --> 00:32:17,909
that the layer five community that it's

00:32:13,710 --> 00:32:20,750
within is very much so friendly to

00:32:17,909 --> 00:32:23,639
open-source newcomers and helps people

00:32:20,750 --> 00:32:27,529
cut their teeth on what it means to

00:32:23,639 --> 00:32:32,340
participate in an open-source project

00:32:27,529 --> 00:32:33,840
so measure II is a management plan so we

00:32:32,340 --> 00:32:37,169
were talking about the data playing the

00:32:33,840 --> 00:32:39,870
control plane and we gave examples of

00:32:37,169 --> 00:32:41,039
what service measures look like and what

00:32:39,870 --> 00:32:42,750
their control planes look like what

00:32:41,039 --> 00:32:44,519
their data planes look like here's what

00:32:42,750 --> 00:32:46,710
an example of what a management plane

00:32:44,519 --> 00:32:50,340
looks like and so so measure e

00:32:46,710 --> 00:32:52,470
interfaces with any number of well and I

00:32:50,340 --> 00:32:55,500
guess by any number I mean today six

00:32:52,470 --> 00:32:57,659
different types of service meshes we've

00:32:55,500 --> 00:33:01,880
been fortunate that we for the most part

00:32:57,659 --> 00:33:05,700
had maintained errs from Citrix and

00:33:01,880 --> 00:33:07,860
octarine and NSM or network service

00:33:05,700 --> 00:33:11,039
rather from a number of places come and

00:33:07,860 --> 00:33:14,789
create adaptors between measure E and

00:33:11,039 --> 00:33:16,289
those specific service missions so

00:33:14,789 --> 00:33:19,980
management playing again can layers in

00:33:16,289 --> 00:33:23,039
on top memory does support those six

00:33:19,980 --> 00:33:25,769
service meshes today it's our hope and

00:33:23,039 --> 00:33:29,909
kind of the an agreement that with each

00:33:25,769 --> 00:33:32,370
of these service mesh projects each of

00:33:29,909 --> 00:33:34,220
those either products or projects that

00:33:32,370 --> 00:33:37,320
create the service mesh is listed here

00:33:34,220 --> 00:33:41,159
they will eventually incorporate measure

00:33:37,320 --> 00:33:44,870
e into their build and release system to

00:33:41,159 --> 00:33:47,809
be able to well

00:33:44,870 --> 00:33:50,030
assess the performance of those service

00:33:47,809 --> 00:33:52,420
meshes as they're being released and to

00:33:50,030 --> 00:33:54,620
be able to baseline a benchmark the

00:33:52,420 --> 00:33:57,020
service measure performance from release

00:33:54,620 --> 00:33:59,090
to release it's one thing for the

00:33:57,020 --> 00:34:00,740
vendors or the project's themselves to

00:33:59,090 --> 00:34:03,200
do that which is great and as yet

00:34:00,740 --> 00:34:05,780
another for you as an individual as an

00:34:03,200 --> 00:34:08,690
adopter to take measure II as a tool and

00:34:05,780 --> 00:34:12,260
run it in your environment against your

00:34:08,690 --> 00:34:15,169
clusters against your workloads because

00:34:12,260 --> 00:34:19,700
the environments are very different your

00:34:15,169 --> 00:34:22,550
needs are different as well part of the

00:34:19,700 --> 00:34:25,669
lineup part of how we as a tool helps

00:34:22,550 --> 00:34:27,530
people adopt is to well analyze the

00:34:25,669 --> 00:34:30,560
configuration of your service mash and

00:34:27,530 --> 00:34:33,980
to tell you when you're doing it wrong

00:34:30,560 --> 00:34:35,690
or or maybe not so much that is to

00:34:33,980 --> 00:34:38,750
suggest when how you might do it better

00:34:35,690 --> 00:34:43,210
I mean so there are built into Mestre

00:34:38,750 --> 00:34:46,159
are a number of different best practices

00:34:43,210 --> 00:34:47,899
which is in part kind of the focus of

00:34:46,159 --> 00:34:50,570
that the book that I was mentioning

00:34:47,899 --> 00:34:55,159
earlier so helps people operate with

00:34:50,570 --> 00:34:57,890
confidence the other thing that well

00:34:55,159 --> 00:34:59,480
that measure II does is that third

00:34:57,890 --> 00:35:01,160
specification that I was talking about

00:34:59,480 --> 00:35:02,830
earlier the the service mesh

00:35:01,160 --> 00:35:05,750
abstractions that we were talking about

00:35:02,830 --> 00:35:09,170
the service mashup performance

00:35:05,750 --> 00:35:11,210
specification SPS is under active

00:35:09,170 --> 00:35:14,660
development now we've been fortunate to

00:35:11,210 --> 00:35:17,090
partner with a couple of universities

00:35:14,660 --> 00:35:22,550
and have got some research going on

00:35:17,090 --> 00:35:25,400
about how to really you know inform

00:35:22,550 --> 00:35:27,470
people that you're you're squeezing as

00:35:25,400 --> 00:35:29,120
much value out of your mesh as possible

00:35:27,470 --> 00:35:31,340
how to make sure that you're you're

00:35:29,120 --> 00:35:33,410
optimizing that you're getting maybe for

00:35:31,340 --> 00:35:34,910
example as much distributed tracing as

00:35:33,410 --> 00:35:39,060
you would like out of your mesh but

00:35:34,910 --> 00:35:40,620
doing so in them in the and then

00:35:39,060 --> 00:35:43,620
the expensive way with the lowest

00:35:40,620 --> 00:35:46,440
overhead part of that is to be able to

00:35:43,620 --> 00:35:48,930
compare to well across surface meshes

00:35:46,440 --> 00:35:51,030
maybe as part of your decision to adopt

00:35:48,930 --> 00:35:52,560
them but another part of that is also

00:35:51,030 --> 00:35:54,360
just comparing to your neighbor your

00:35:52,560 --> 00:35:57,060
proverbial neighbor if you will so if

00:35:54,360 --> 00:35:58,560
you've chosen a given mesh and you've

00:35:57,060 --> 00:36:00,660
configured it and you're running it and

00:35:58,560 --> 00:36:02,490
you're deriving some value but you're

00:36:00,660 --> 00:36:05,600
paying paying for that you know in terms

00:36:02,490 --> 00:36:08,670
of memory and CPU and latency overhead

00:36:05,600 --> 00:36:11,870
are you doing it well or not and so part

00:36:08,670 --> 00:36:15,720
of the project that we have here is to

00:36:11,870 --> 00:36:17,970
well is to engage with those

00:36:15,720 --> 00:36:23,040
universities and engage with adopters

00:36:17,970 --> 00:36:24,990
like you to do some statistical analysis

00:36:23,040 --> 00:36:26,880
a buncha upon across a bunch of

00:36:24,990 --> 00:36:28,410
different environments right now there's

00:36:26,880 --> 00:36:32,490
a little we're a little shy of about a

00:36:28,410 --> 00:36:34,950
thousand performance tests having been

00:36:32,490 --> 00:36:37,380
run in a variety of environments and

00:36:34,950 --> 00:36:40,680
we're gonna take those those results and

00:36:37,380 --> 00:36:42,990
analyze them and share of what I'm

00:36:40,680 --> 00:36:46,500
showing here on the screen is well a

00:36:42,990 --> 00:36:49,560
fairly old actually example of can the

00:36:46,500 --> 00:36:51,060
difference in overhead between kind of

00:36:49,560 --> 00:36:52,590
each of these three service messages and

00:36:51,060 --> 00:36:55,770
running what's essentially the same

00:36:52,590 --> 00:36:58,650
workload but how much in this case I

00:36:55,770 --> 00:37:00,720
think it is in terms of memory how much

00:36:58,650 --> 00:37:05,040
memory that the control plan for each of

00:37:00,720 --> 00:37:07,410
these took up now the what I wouldn't

00:37:05,040 --> 00:37:13,170
want for you to do is to walk away from

00:37:07,410 --> 00:37:14,910
this thinking that eesti oh it has so

00:37:13,170 --> 00:37:16,110
much more overhead than the others

00:37:14,910 --> 00:37:20,640
because that would be entirely

00:37:16,110 --> 00:37:23,460
inaccurate m''d be not understanding

00:37:20,640 --> 00:37:25,050
that in this case sto was doing about

00:37:23,460 --> 00:37:26,790
three times as much as the others

00:37:25,050 --> 00:37:28,620
depending upon how you quantify that and

00:37:26,790 --> 00:37:30,840
that's really the purpose of that

00:37:28,620 --> 00:37:34,320
service master performance specification

00:37:30,840 --> 00:37:37,370
is to help quantify that in the most

00:37:34,320 --> 00:37:37,370
vendor-neutral of ways

00:37:39,260 --> 00:37:48,200
see if we can stop my yammering and see

00:37:43,040 --> 00:37:52,040
if we can do a demo demo of a management

00:37:48,200 --> 00:38:01,760
playing a demo of nursery I think that

00:37:52,040 --> 00:38:03,110
is us right so so we took I think a

00:38:01,760 --> 00:38:08,690
brief look at at mysteries of

00:38:03,110 --> 00:38:13,790
architecture earlier let me let me stop

00:38:08,690 --> 00:38:16,340
sharing there and start sharing what my

00:38:13,790 --> 00:38:19,010
whole screen so that you can see me

00:38:16,340 --> 00:38:24,400
seeing me looking at myself seeing me I

00:38:19,010 --> 00:38:24,400
guess or hopefully not very long is that

00:38:24,670 --> 00:38:30,580
okay

00:38:25,880 --> 00:38:33,470
good good you should all be seeing I

00:38:30,580 --> 00:38:41,780
guess my ugly mug on this side and then

00:38:33,470 --> 00:38:45,140
a terminal over here on the left I get

00:38:41,780 --> 00:38:46,400
this right we have well you either have

00:38:45,140 --> 00:38:48,110
five minutes left or ten minutes left

00:38:46,400 --> 00:38:49,790
and I think Nancy's probably saying five

00:38:48,110 --> 00:38:53,210
minutes so let's see when you can knock

00:38:49,790 --> 00:38:57,950
out in five minutes so many as a utility

00:38:53,210 --> 00:39:01,040
comes with a CLI and actually let me go

00:38:57,950 --> 00:39:02,690
back a slide you can quickly get measure

00:39:01,040 --> 00:39:04,160
either like there's a bunch of variety

00:39:02,690 --> 00:39:07,040
right of ways to install it one way I

00:39:04,160 --> 00:39:09,590
see use of homebrew and just install the

00:39:07,040 --> 00:39:12,200
tap and do a brew install Mishra CTL and

00:39:09,590 --> 00:39:14,450
you do a measuring stark or another way

00:39:12,200 --> 00:39:17,090
is to use this batch script either way

00:39:14,450 --> 00:39:19,940
you'll find that you can run on one

00:39:17,090 --> 00:39:22,310
script and had initially downloaded have

00:39:19,940 --> 00:39:24,170
mesh restart as a set of containers in

00:39:22,310 --> 00:39:27,130
this case I'm running my Surrey locally

00:39:24,170 --> 00:39:29,660
on my iMac that I'm speaking to you from

00:39:27,130 --> 00:39:33,620
in measure II starts up as a docker

00:39:29,660 --> 00:39:36,320
compose well app you go over maybe check

00:39:33,620 --> 00:39:38,660
this NASA so it's a collect it's a few

00:39:36,320 --> 00:39:42,260
different containers one is just that of

00:39:38,660 --> 00:39:44,570
massery server a small static go binary

00:39:42,260 --> 00:39:45,890
that that is measuring it contains the

00:39:44,570 --> 00:39:49,810
server and the UI that we're about to

00:39:45,890 --> 00:39:52,700
look at and then there's one small

00:39:49,810 --> 00:39:54,109
adapter available as well for each diff

00:39:52,700 --> 00:39:59,180
each of the six different types of

00:39:54,109 --> 00:40:04,579
service measures that mastery supports

00:39:59,180 --> 00:40:08,150
so go ahead and log into mastery when we

00:40:04,579 --> 00:40:10,609
do make the screen a little bit here we

00:40:08,150 --> 00:40:13,940
end up what we'll find is that mastery

00:40:10,609 --> 00:40:17,660
will attempt to automatically detect

00:40:13,940 --> 00:40:19,310
where your kubernetes cluster is and in

00:40:17,660 --> 00:40:22,940
my case my kubernetes cluster is the

00:40:19,310 --> 00:40:27,920
vocal running docker desktop and so I've

00:40:22,940 --> 00:40:32,119
just got kubernetes running via docker

00:40:27,920 --> 00:40:34,280
desktop so grab my local keep config I

00:40:32,119 --> 00:40:35,810
can do a quick connection test just to

00:40:34,280 --> 00:40:38,270
verify that memory can talk to

00:40:35,810 --> 00:40:39,950
kubernetes great my Cherie also has each

00:40:38,270 --> 00:40:42,920
of these adapters loaded up so that we

00:40:39,950 --> 00:40:44,960
can go interface with people provision

00:40:42,920 --> 00:40:47,329
an interface and configure and analyze

00:40:44,960 --> 00:40:49,780
and do performance tests across any of

00:40:47,329 --> 00:40:51,859
these service messages make sure he also

00:40:49,780 --> 00:40:53,450
understands you know kind of what I was

00:40:51,859 --> 00:40:55,490
saying earlier about Ravana and

00:40:53,450 --> 00:41:01,010
prometheus as prominent observability

00:40:55,490 --> 00:41:04,190
tools being either available you know

00:41:01,010 --> 00:41:07,490
commonly in your environments or coming

00:41:04,190 --> 00:41:13,430
as part and parcel to the control plane

00:41:07,490 --> 00:41:16,940
of a given match and so let's see what

00:41:13,430 --> 00:41:19,160
I've got running in my environment so it

00:41:16,940 --> 00:41:21,020
looks like I've got eto deployed at the

00:41:19,160 --> 00:41:23,030
moment which is good since we're running

00:41:21,020 --> 00:41:25,609
low on time we're gonna do a quick maybe

00:41:23,030 --> 00:41:27,560
we've got sto deployed and we've got SEO

00:41:25,609 --> 00:41:30,680
sample app that book info app I was

00:41:27,560 --> 00:41:33,380
talking about earlier we'll do a quick

00:41:30,680 --> 00:41:35,900
demo of sto and it's sample app and then

00:41:33,380 --> 00:41:40,700
hit link or die's real quick as well so

00:41:35,900 --> 00:41:45,109
so within there you're able to go over

00:41:40,700 --> 00:41:46,220
and you'll interact with a given mesh so

00:41:45,109 --> 00:41:49,670
in this case what we're choosing to

00:41:46,220 --> 00:41:51,530
interact with is do I think before I

00:41:49,670 --> 00:41:53,000
forget one thing you know a lot of times

00:41:51,530 --> 00:41:54,530
we'll say hey you want to go over and

00:41:53,000 --> 00:41:57,079
provision is do there's different

00:41:54,530 --> 00:41:59,270
configurations that it supports might

00:41:57,079 --> 00:42:01,130
want to go provisioning a given sample

00:41:59,270 --> 00:42:03,560
app to get familiar with this do and and

00:42:01,130 --> 00:42:04,220
once you have we provision the book info

00:42:03,560 --> 00:42:06,380
and this

00:42:04,220 --> 00:42:08,780
you might want to begin to manipulate

00:42:06,380 --> 00:42:12,020
traffic and configure the service mesh

00:42:08,780 --> 00:42:15,109
to do to do different things based on

00:42:12,020 --> 00:42:17,359
the presence of that sample app another

00:42:15,109 --> 00:42:22,190
thing that this measure will do is check

00:42:17,359 --> 00:42:24,049
the the configuration of EMS your your

00:42:22,190 --> 00:42:27,829
math your mess your mesh against best

00:42:24,049 --> 00:42:29,510
practices to see if you have a mess in

00:42:27,829 --> 00:42:30,890
this case I don't leave these checks are

00:42:29,510 --> 00:42:32,270
running I'm just fine but there's

00:42:30,890 --> 00:42:39,020
there's about nine or ten of them that's

00:42:32,270 --> 00:42:44,569
running right now to let me see I should

00:42:39,020 --> 00:42:46,430
have that sample application the eCos

00:42:44,569 --> 00:42:48,410
book info sample app sitting here

00:42:46,430 --> 00:42:49,549
running and I'm just kind of refreshing

00:42:48,410 --> 00:42:54,260
my screen and we're seeing some

00:42:49,549 --> 00:42:57,619
different responses if we go answer one

00:42:54,260 --> 00:43:00,470
of the service mesh adopters questions

00:42:57,619 --> 00:43:01,780
around performance and and understand

00:43:00,470 --> 00:43:10,640
trying to help them understand what

00:43:01,780 --> 00:43:17,839
overhead there is we can go over and run

00:43:10,640 --> 00:43:19,250
a test give this a name good saying what

00:43:17,839 --> 00:43:22,569
service measure we'd like to test this

00:43:19,250 --> 00:43:29,200
against in this case is yeah I'm gonna

00:43:22,569 --> 00:43:29,200
give my max my IMAX

00:43:32,950 --> 00:43:39,280
my wife IP address which is how much me

00:43:37,570 --> 00:43:43,030
that's running as a container inside of

00:43:39,280 --> 00:43:45,250
docker can interface with product page

00:43:43,030 --> 00:43:47,440
that's running in kubernetes running on

00:43:45,250 --> 00:43:50,410
top of this do in kubernetes we can sit

00:43:47,440 --> 00:43:53,560
here and run a quick test you know that

00:43:50,410 --> 00:43:57,640
test we can essentially tell measure e

00:43:53,560 --> 00:44:01,030
to generate a bunch of HTTP load against

00:43:57,640 --> 00:44:03,609
that end point product page and give it

00:44:01,030 --> 00:44:05,650
some parameters in terms of just how how

00:44:03,609 --> 00:44:07,240
hard we want to hit that commenter you

00:44:05,650 --> 00:44:10,210
know that end point and for how long

00:44:07,240 --> 00:44:13,839
um when that's done what we get back is

00:44:10,210 --> 00:44:16,510
an analysis of that traffic will be able

00:44:13,839 --> 00:44:18,520
to understand that the throughput how

00:44:16,510 --> 00:44:21,700
much load we were able to get through in

00:44:18,520 --> 00:44:25,270
this time frame and something of an

00:44:21,700 --> 00:44:26,920
analysis of the the latency and actually

00:44:25,270 --> 00:44:28,930
this is kind of funny cuz what we've got

00:44:26,920 --> 00:44:34,480
it we've generated I'm a statistical

00:44:28,930 --> 00:44:36,940
analysis of the p50 the P 75 P 99 we're

00:44:34,480 --> 00:44:40,300
actually seeing that the P 99.9 as being

00:44:36,940 --> 00:44:42,339
way out here which is a little bit

00:44:40,300 --> 00:44:44,349
different from a lot of tests that that

00:44:42,339 --> 00:44:46,569
a lot of results that I'll typically get

00:44:44,349 --> 00:44:48,700
back but but basically measure will

00:44:46,569 --> 00:44:51,400
count up all of those HTTP package that

00:44:48,700 --> 00:44:54,760
has sent categorize them into a

00:44:51,400 --> 00:44:56,950
histogram calculate them it'll capture

00:44:54,760 --> 00:44:58,510
the environment that I'm in because that

00:44:56,950 --> 00:45:00,790
that certainly plays a large role in

00:44:58,510 --> 00:45:02,880
terms of how quickly things can respond

00:45:00,790 --> 00:45:05,650
how much memory I assigned to my VM I'm

00:45:02,880 --> 00:45:08,260
fortunate that I'm on a machine that has

00:45:05,650 --> 00:45:11,470
a lot of anyway how much memory of a

00:45:08,260 --> 00:45:13,900
sent my VM how many cores I have if I

00:45:11,470 --> 00:45:17,040
was also if I had also connected to grow

00:45:13,900 --> 00:45:21,040
fauna I would be seeing down below

00:45:17,040 --> 00:45:24,430
charts metrics showing me also the the

00:45:21,040 --> 00:45:27,130
CPU and memory overhead of my nodes in

00:45:24,430 --> 00:45:30,130
my communities cluster um after I run a

00:45:27,130 --> 00:45:30,780
few of those and I ran one a few minutes

00:45:30,130 --> 00:45:33,579
ago

00:45:30,780 --> 00:45:36,760
you can come here and you kind of look

00:45:33,579 --> 00:45:38,079
at that that those results you can if

00:45:36,760 --> 00:45:42,160
you run a few you can go over and

00:45:38,079 --> 00:45:43,300
compare those results this is because if

00:45:42,160 --> 00:45:46,030
you've made changes in your environment

00:45:43,300 --> 00:45:48,590
you might want to

00:45:46,030 --> 00:45:50,600
I'm the see how to see how if you're

00:45:48,590 --> 00:45:52,400
willing to you know what the overhead is

00:45:50,600 --> 00:45:54,680
for a given network function that you're

00:45:52,400 --> 00:45:56,690
having to ServiceMaster perform she can

00:45:54,680 --> 00:46:00,890
be very helpful and so you can benchmark

00:45:56,690 --> 00:46:03,590
an account baseline over time we're

00:46:00,890 --> 00:46:07,420
about at time so I said that I would try

00:46:03,590 --> 00:46:15,740
to show you a couple of meshes so let me

00:46:07,420 --> 00:46:19,010
do this very briefly I'm just going to

00:46:15,740 --> 00:46:21,470
set a watch on on our pods that are

00:46:19,010 --> 00:46:23,960
running in my local cluster I'm having

00:46:21,470 --> 00:46:27,619
my Surrey delete or deep provisioning

00:46:23,960 --> 00:46:30,320
the sample app for book info as well as

00:46:27,619 --> 00:46:32,240
just deep provision sto itself so we

00:46:30,320 --> 00:46:34,460
should see sto and its namespace going

00:46:32,240 --> 00:46:35,840
away as well as that sample act while

00:46:34,460 --> 00:46:39,020
that's going on I'm gonna go over to

00:46:35,840 --> 00:46:40,670
link or D and I'm gonna go ahead and

00:46:39,020 --> 00:46:44,930
deploy link your D to the default

00:46:40,670 --> 00:46:47,570
namespace and deploy the latest version

00:46:44,930 --> 00:46:49,520
of linker D as that starts to come up

00:46:47,570 --> 00:46:52,310
but we might want to give that a moment

00:46:49,520 --> 00:46:55,970
to come up so that we can once link for

00:46:52,310 --> 00:46:58,130
D is there deploy a link your DS kind of

00:46:55,970 --> 00:47:02,140
book catalog book catalog if you will

00:46:58,130 --> 00:47:02,140
and go take a look at

00:47:06,110 --> 00:47:14,430
as this comes up I don't I know we're

00:47:10,710 --> 00:47:15,960
right at time so I'm a bit leery that

00:47:14,430 --> 00:47:18,630
this this next bit is probably not

00:47:15,960 --> 00:47:21,210
horrifically impressive just as soon as

00:47:18,630 --> 00:47:22,920
this is there

00:47:21,210 --> 00:47:26,029
but rather what we're going to do is

00:47:22,920 --> 00:47:26,029
just a provision

00:47:27,490 --> 00:47:36,910
the liquor DS book catalog and then go

00:47:31,450 --> 00:47:41,710
over and get access to it which would be

00:47:36,910 --> 00:47:55,380
to do a port forward I think of of its

00:47:41,710 --> 00:47:55,380
web web app for 7,000 their grief

00:47:58,750 --> 00:48:01,470
here we go

00:48:03,960 --> 00:48:15,090
of which I think I'm alright port

00:48:05,880 --> 00:48:21,300
forwarding let's see if it's there or

00:48:15,090 --> 00:48:22,770
I'm I am but that container that I was

00:48:21,300 --> 00:48:27,740
forwarding to you before isn't there and

00:48:22,770 --> 00:48:30,720
so that's what happens when you do your

00:48:27,740 --> 00:48:33,360
when you pre provision before you give

00:48:30,720 --> 00:48:36,960
your talk so anyway since we're at time

00:48:33,360 --> 00:48:39,600
I won't go fix it just because but what

00:48:36,960 --> 00:48:42,810
I will leave you with is an invite to

00:48:39,600 --> 00:48:45,030
join the later five community this open

00:48:42,810 --> 00:48:46,380
source community many many people I'm

00:48:45,030 --> 00:48:48,570
cutting their teeth for the first time

00:48:46,380 --> 00:48:53,100
on well a lot of things on open source

00:48:48,570 --> 00:48:55,500
on service meshes heck a lot of folks

00:48:53,100 --> 00:48:57,480
that join don't know kubernetes or

00:48:55,500 --> 00:49:00,630
really docker either but that doesn't

00:48:57,480 --> 00:49:02,070
stop them from well actually from three

00:49:00,630 --> 00:49:03,390
of them recently getting hired at Red

00:49:02,070 --> 00:49:06,390
Hat based on the work that they've done

00:49:03,390 --> 00:49:08,400
in the community so so said he'll

00:49:06,390 --> 00:49:12,060
guarantees that people will get job

00:49:08,400 --> 00:49:15,510
offers but but will hope to see you in

00:49:12,060 --> 00:49:18,000
there so thanks I'll look for comments

00:49:15,510 --> 00:49:20,600
and questions in the chat very nice to

00:49:18,000 --> 00:49:20,600

YouTube URL: https://www.youtube.com/watch?v=Q1zSWbO0RmI


