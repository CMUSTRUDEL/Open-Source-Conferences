Title: Dave Stokes - MySQL 8.0 New Features
Publication date: 2020-05-20
Playlist: Open Source 101 at Home 2020
Description: 
	MySQL 8.0 New Features

Presented at: Open Source 101 at Home 2020
Presented by: Dave Stokes, Oracle Corporation

Abstract: MySQL 8.0 is quickest adopted version of the most popular database on the web. Now on a CI/CD release cycle recent editions have added features like hash indexes, EXPLAIN ANALYZE, JSON document validation, multi-value indexes, check constraints, and more. Also InnoDB Cluster, the NoSQL JSON Document Store, the new shell, and the language connectors are also on the same cycle & improving all the time. This is your chance to get up to speed on the latest and greatest from MySQL.

For more info: https://opensource101.com
Captions: 
	00:00:05,400 --> 00:00:11,820
[Music]

00:00:09,650 --> 00:00:14,820
for those who don't know me my name is

00:00:11,820 --> 00:00:16,830
Dave Stokes I've been coming to a lot of

00:00:14,820 --> 00:00:18,289
these events that Todd Lewis and crew

00:00:16,830 --> 00:00:21,119
have been putting on for many years

00:00:18,289 --> 00:00:22,439
always great events my bosses are always

00:00:21,119 --> 00:00:24,090
impressed by the feedback we get from

00:00:22,439 --> 00:00:27,359
these shows and what I'm talking about

00:00:24,090 --> 00:00:29,400
today is new features in MySQL one of

00:00:27,359 --> 00:00:30,810
the things that's frustrating in my job

00:00:29,400 --> 00:00:33,059
is that we come out with some new

00:00:30,810 --> 00:00:35,219
feature but it's you'll Pareto optimum

00:00:33,059 --> 00:00:37,620
80% of our customers are using 20% of

00:00:35,219 --> 00:00:40,140
the features I was giving it this a

00:00:37,620 --> 00:00:42,660
similar taki grandfather this talk last

00:00:40,140 --> 00:00:43,739
year in the UK and the middle of it I

00:00:42,660 --> 00:00:45,270
was mentioning a new feature and this

00:00:43,739 --> 00:00:48,480
one gentleman was getting rather upset

00:00:45,270 --> 00:00:50,550
with me and I could tell that he was not

00:00:48,480 --> 00:00:53,219
happy anyway at the end of the show I

00:00:50,550 --> 00:00:54,780
thought he was going to deliver a right

00:00:53,219 --> 00:00:57,210
cross to my nose and hang up said you

00:00:54,780 --> 00:00:59,039
know if I'd known about this for months

00:00:57,210 --> 00:01:01,260
ago it would have saved me two months

00:00:59,039 --> 00:01:06,630
worth of work so that's why I'm doing

00:01:01,260 --> 00:01:09,930
this talk so safe harbor statement I

00:01:06,630 --> 00:01:11,610
work for Oracle and Oracle wants you to

00:01:09,930 --> 00:01:13,260
know that I do not have perfect

00:01:11,610 --> 00:01:15,540
knowledge or things that are coming out

00:01:13,260 --> 00:01:19,020
in the future if I mentioned a new

00:01:15,540 --> 00:01:21,240
product during QA or just in passing I

00:01:19,020 --> 00:01:22,920
might say it's blue and you think sky

00:01:21,240 --> 00:01:24,659
blue I'm thinking royal blue ends up

00:01:22,920 --> 00:01:26,729
being blue cheese so please take

00:01:24,659 --> 00:01:30,600
anything I say about future products

00:01:26,729 --> 00:01:33,360
with a grain of salt by the way if

00:01:30,600 --> 00:01:38,189
you're running MySQL five six the end of

00:01:33,360 --> 00:01:40,710
life is February 5th 2021 please plan to

00:01:38,189 --> 00:01:43,320
upgrade to five seven at least err

00:01:40,710 --> 00:01:44,460
hopefully eight oh by the way if you are

00:01:43,320 --> 00:01:46,140
running five seven

00:01:44,460 --> 00:01:47,909
you can run our new shell which has an

00:01:46,140 --> 00:01:49,770
upgrade checker you type in util check

00:01:47,909 --> 00:01:53,369
for upgrade and give the root password

00:01:49,770 --> 00:01:54,750
and root account name and we'll go out

00:01:53,369 --> 00:01:57,719
there and tell you if you have things

00:01:54,750 --> 00:01:59,520
like reserved words violations if you

00:01:57,719 --> 00:02:02,100
have troubles converting over utf-8 and

00:01:59,520 --> 00:02:03,509
before if you have any key constraint

00:02:02,100 --> 00:02:07,920
problems if we're using the old temp

00:02:03,509 --> 00:02:10,450
table format it's a very handy tool and

00:02:07,920 --> 00:02:14,240
well worth the effort of trying it

00:02:10,450 --> 00:02:15,350
so a little about me many years ago I

00:02:14,240 --> 00:02:16,880
was working at the American Heart

00:02:15,350 --> 00:02:19,610
Association where this new database

00:02:16,880 --> 00:02:22,100
called MySQL came out immediately loaded

00:02:19,610 --> 00:02:24,170
on my Red Hat for box that's not real

00:02:22,100 --> 00:02:28,850
for that's the original real hat Red Hat

00:02:24,170 --> 00:02:31,820
Enterprise Linux for been using it in

00:02:28,850 --> 00:02:38,030
many projects good part of my career I

00:02:31,820 --> 00:02:42,340
was I'm supposed to double click on

00:02:38,030 --> 00:02:46,720
these and zoom to get these larger ok

00:02:42,340 --> 00:02:46,720
let me see if I can get that over there

00:02:50,440 --> 00:02:53,800
here we go

00:02:55,420 --> 00:03:07,730
of course my mouse isn't showing up see

00:03:04,550 --> 00:03:10,910
what the joys having you there we go

00:03:07,730 --> 00:03:13,130
much better thank you dan Seifer that by

00:03:10,910 --> 00:03:16,070
the way a big round of applause to Nancy

00:03:13,130 --> 00:03:19,250
and the other volunteers they do a heck

00:03:16,070 --> 00:03:20,959
of a job you do not see them sweating

00:03:19,250 --> 00:03:22,400
but believe me they work their butts off

00:03:20,959 --> 00:03:24,680
for these shows to make it look easy

00:03:22,400 --> 00:03:25,550
anyway I had a lot of my career where I

00:03:24,680 --> 00:03:28,610
was working on open source software

00:03:25,550 --> 00:03:29,690
because I was hired to finished projects

00:03:28,610 --> 00:03:31,940
that had been started by someone else

00:03:29,690 --> 00:03:33,470
and they ran out of budget money by the

00:03:31,940 --> 00:03:34,640
way if you do ever come to Texas I

00:03:33,470 --> 00:03:37,070
believe this is that set of comfort

00:03:34,640 --> 00:03:39,280
where we have our own Stonehenge and we

00:03:37,070 --> 00:03:41,239
have our own Easter Island figureheads

00:03:39,280 --> 00:03:43,100
anyway now I'm a school community

00:03:41,239 --> 00:03:47,270
manager I start off in the certification

00:03:43,100 --> 00:03:48,739
team been part of the MySQL a b2 Sun

00:03:47,270 --> 00:03:50,150
Microsystems acquisition then we got

00:03:48,739 --> 00:03:52,640
bought by Oracle ax for a little bit to

00:03:50,150 --> 00:03:54,620
go off to a column or database engine

00:03:52,640 --> 00:04:00,190
company called Cal pot wood has the

00:03:54,620 --> 00:04:00,190
infinity be a column or data store and

00:04:00,670 --> 00:04:08,230
let's see if I can get this to advance

00:04:03,020 --> 00:04:08,230
now ah now I know what I'm going to do

00:04:08,470 --> 00:04:16,610
the joys

00:04:09,990 --> 00:04:16,610
actual sessions well maybe not

00:04:21,860 --> 00:04:25,380
there we go

00:04:23,640 --> 00:04:30,140
like I said I'm now in the Moscow

00:04:25,380 --> 00:04:33,960
community team and I have them by SQL

00:04:30,140 --> 00:04:36,270
8.0 DBA certification we are currently

00:04:33,960 --> 00:04:40,680
developing the developer certification

00:04:36,270 --> 00:04:42,120
and I do live in Texas north of Fort

00:04:40,680 --> 00:04:44,550
Worth and west of Dallas in a small town

00:04:42,120 --> 00:04:49,590
and I do have the required hound dog and

00:04:44,550 --> 00:04:51,830
pickup truck so our agenda today first

00:04:49,590 --> 00:04:54,570
thing if you have questions please

00:04:51,830 --> 00:04:56,010
please shoot them up I'd rather answer

00:04:54,570 --> 00:04:57,630
your question what comes up to have you

00:04:56,010 --> 00:04:59,400
wait and get distracted or something

00:04:57,630 --> 00:05:01,520
gets cut off or something else happens

00:04:59,400 --> 00:05:04,890
I'd rather answered it as it comes up so

00:05:01,520 --> 00:05:08,820
please ask questions I have window going

00:05:04,890 --> 00:05:10,770
to us the chat thing I'd look to make

00:05:08,820 --> 00:05:13,170
this interactive one of my problems with

00:05:10,770 --> 00:05:14,580
these virtual shows is I miss the

00:05:13,170 --> 00:05:19,040
audience interaction I used to be a

00:05:14,580 --> 00:05:21,210
stand-up comic and I really missed that

00:05:19,040 --> 00:05:25,670
also I'd like to know what you want to

00:05:21,210 --> 00:05:29,160
see from masculine 2020 and 2021

00:05:25,670 --> 00:05:35,720
so last QL with the release of a tote

00:05:29,160 --> 00:05:37,710
now two years ago what on the CL c IC d

00:05:35,720 --> 00:05:39,930
bandwagon like a lot of the rest you

00:05:37,710 --> 00:05:41,640
have the programs that we're offering

00:05:39,930 --> 00:05:44,760
now or much more complexed in the

00:05:41,640 --> 00:05:47,070
software back in the 5.5 era we've done

00:05:44,760 --> 00:05:49,020
a lot of work to implement new features

00:05:47,070 --> 00:05:51,810
as plugins which means if you don't like

00:05:49,020 --> 00:05:56,280
them you can pull the plug very easy to

00:05:51,810 --> 00:05:57,960
remove we've have a great ability now to

00:05:56,280 --> 00:06:00,600
do a lot of benchmarking on our software

00:05:57,960 --> 00:06:02,280
before it ever sees your computer so

00:06:00,600 --> 00:06:05,280
it's a much more reliable much more

00:06:02,280 --> 00:06:07,230
rugged piece of software and we're able

00:06:05,280 --> 00:06:10,530
to get the new features into your hands

00:06:07,230 --> 00:06:12,840
much faster and I believe it's a much

00:06:10,530 --> 00:06:15,290
much better product than what we offered

00:06:12,840 --> 00:06:15,290
in the past

00:06:16,670 --> 00:06:20,120
by the way one of the things we did is

00:06:17,840 --> 00:06:21,740
we have these quarterly releases and we

00:06:20,120 --> 00:06:24,860
release new versions of everything

00:06:21,740 --> 00:06:27,260
new features bug fixes enhancements some

00:06:24,860 --> 00:06:28,580
deprecations and the old problem used to

00:06:27,260 --> 00:06:31,220
have in the past was if you're running

00:06:28,580 --> 00:06:34,730
MySQL server five six and you had the

00:06:31,220 --> 00:06:37,430
ODBC connector one point four and you're

00:06:34,730 --> 00:06:40,010
connecting through early thing of a

00:06:37,430 --> 00:06:41,630
muscular they had all these different

00:06:40,010 --> 00:06:44,600
version numbers it was kind of hard to

00:06:41,630 --> 00:06:48,230
trace who was doing what to whom so it's

00:06:44,600 --> 00:06:51,560
now much much easier to just remember

00:06:48,230 --> 00:06:55,310
that if you're running server 8 o 0 8 0

00:06:51,560 --> 00:06:58,520
20 used the shell 8 0 20 workbench or

00:06:55,310 --> 00:07:02,840
the connector makes it a lot easier on

00:06:58,520 --> 00:07:05,330
us and on you so let's take a look at

00:07:02,840 --> 00:07:07,490
the mask unity server yes it's still

00:07:05,330 --> 00:07:09,170
free we do have an enterprise version

00:07:07,490 --> 00:07:10,580
that comes with support contract as you

00:07:09,170 --> 00:07:13,160
can get the price is extremely

00:07:10,580 --> 00:07:16,100
reasonable probably a lot less than

00:07:13,160 --> 00:07:20,600
you're paying for things like copies of

00:07:16,100 --> 00:07:21,800
office software from various vendors now

00:07:20,600 --> 00:07:25,760
I'm going to march backwards through

00:07:21,800 --> 00:07:29,120
time here and just two weeks ago eight

00:07:25,760 --> 00:07:30,980
zero 20 was released the big news here

00:07:29,120 --> 00:07:33,490
is that we improved our hash joints I'll

00:07:30,980 --> 00:07:37,370
go and hash joins in a slide coming up

00:07:33,490 --> 00:07:39,650
we now have in turn on equi-join semi

00:07:37,370 --> 00:07:43,130
joins anti joins left outer joints and

00:07:39,650 --> 00:07:44,810
right outer joints very big thing for

00:07:43,130 --> 00:07:48,260
those who are doing a lot of equi-join

00:07:44,810 --> 00:07:50,780
type work also we added a new double

00:07:48,260 --> 00:07:54,200
right buffer and binary log compression

00:07:50,780 --> 00:07:55,580
for replication and we improved cats cat

00:07:54,200 --> 00:07:58,520
stance for a contention to where a

00:07:55,580 --> 00:08:00,230
transaction scheduler several years ago

00:07:58,520 --> 00:08:03,530
University of Michigan put out a paper

00:08:00,230 --> 00:08:06,500
on how to handle hot rows hot columns in

00:08:03,530 --> 00:08:08,270
your data cats does not switch on until

00:08:06,500 --> 00:08:11,060
you its notices there's contention for

00:08:08,270 --> 00:08:14,180
certain rows or certain columns to boil

00:08:11,060 --> 00:08:16,100
down a very nice analytic academic paper

00:08:14,180 --> 00:08:18,860
down to one sentence it's if you have

00:08:16,100 --> 00:08:20,900
greedy processes looking for more

00:08:18,860 --> 00:08:23,750
resources they have an algorithm for

00:08:20,900 --> 00:08:26,600
handling that and that algorithm really

00:08:23,750 --> 00:08:29,070
does speed up your processes if you do

00:08:26,600 --> 00:08:31,180
have those hot rooms and columns

00:08:29,070 --> 00:08:33,400
now going a little bit of detail the

00:08:31,180 --> 00:08:37,090
double right buffer one of the things

00:08:33,400 --> 00:08:38,770
that MySQL did to help with acid

00:08:37,090 --> 00:08:41,440
compliance was make sure that everything

00:08:38,770 --> 00:08:43,930
was written down twice that way if

00:08:41,440 --> 00:08:46,050
something crashed you had a very very

00:08:43,930 --> 00:08:47,200
good chance of being able to recover

00:08:46,050 --> 00:08:49,180
nodb

00:08:47,200 --> 00:08:52,330
is bringing as a storage end as they

00:08:49,180 --> 00:08:55,840
come but there are still some problems

00:08:52,330 --> 00:08:57,550
we had with that it was also part of the

00:08:55,840 --> 00:09:00,220
regular system tablespace which means

00:08:57,550 --> 00:09:01,660
it's contending for resources there so

00:09:00,220 --> 00:09:03,100
if you want to you can take the double

00:09:01,660 --> 00:09:06,250
right buffers and put them on another

00:09:03,100 --> 00:09:08,050
device that you have set of your data

00:09:06,250 --> 00:09:11,590
directory the default is in your stated

00:09:08,050 --> 00:09:15,280
run known data directory so what happens

00:09:11,590 --> 00:09:16,810
is as your your working set your data

00:09:15,280 --> 00:09:20,230
that you have in memory kind of hits

00:09:16,810 --> 00:09:22,480
memory size things tend to start slowing

00:09:20,230 --> 00:09:25,960
down as you can see on the red line

00:09:22,480 --> 00:09:28,450
there because things have to get copied

00:09:25,960 --> 00:09:30,340
out and it has to be written twice well

00:09:28,450 --> 00:09:32,500
with the new double write buffer we and

00:09:30,340 --> 00:09:34,210
moving stuff around we were able to as

00:09:32,500 --> 00:09:40,080
you see was the blue line greatly

00:09:34,210 --> 00:09:40,080
increased this it's a very handy feature

00:09:40,680 --> 00:09:46,120
binary log compression those are you

00:09:43,540 --> 00:09:48,640
running replication know that all your

00:09:46,120 --> 00:09:51,640
transactions get sent from the primary

00:09:48,640 --> 00:09:53,710
to the secondary boxes well now they're

00:09:51,640 --> 00:09:54,610
compressed before they go and they can

00:09:53,710 --> 00:09:57,760
be handled while they're still

00:09:54,610 --> 00:10:01,590
compressed makes it a lot easier on your

00:09:57,760 --> 00:10:01,590
network band space and your disk space

00:10:03,750 --> 00:10:09,030
way back in January hey remember when we

00:10:06,430 --> 00:10:12,310
go get haircuts and sit in a restaurant

00:10:09,030 --> 00:10:14,110
we introduce interesting features too

00:10:12,310 --> 00:10:16,930
many log in a tense tense and you can

00:10:14,110 --> 00:10:18,400
lock the account the table statement

00:10:16,930 --> 00:10:20,890
along with row I'll go into a little

00:10:18,400 --> 00:10:23,020
more detail that limits and recurse

00:10:20,890 --> 00:10:26,040
recursive common table expressions and

00:10:23,020 --> 00:10:29,200
an alias on duplicate duplicate key

00:10:26,040 --> 00:10:30,790
statements okay

00:10:29,200 --> 00:10:32,860
film logging test someone's just trying

00:10:30,790 --> 00:10:35,200
to hammer your system and you want to

00:10:32,860 --> 00:10:37,650
block them out I should see the first

00:10:35,200 --> 00:10:40,450
example here we're creating a user and

00:10:37,650 --> 00:10:41,660
we put in failed login attempts number

00:10:40,450 --> 00:10:43,850
three

00:10:41,660 --> 00:10:45,800
and once they hit that third failed

00:10:43,850 --> 00:10:49,490
login attempt that account is locked for

00:10:45,800 --> 00:10:51,740
three days now if you need finer

00:10:49,490 --> 00:10:53,030
granularity in that let me know I'd love

00:10:51,740 --> 00:10:54,580
to take that to the engineer team

00:10:53,030 --> 00:10:57,110
engineering team and see what they say

00:10:54,580 --> 00:10:59,150
by the way the second statement see

00:10:57,110 --> 00:11:00,410
their alter user this is how you do it

00:10:59,150 --> 00:11:02,930
if you already have an account up there

00:11:00,410 --> 00:11:05,030
and in this case the PAC password lock

00:11:02,930 --> 00:11:06,710
time is unbounded which means once it

00:11:05,030 --> 00:11:13,490
gets locked someone has to manually come

00:11:06,710 --> 00:11:14,660
in and unlock the account now this might

00:11:13,490 --> 00:11:17,690
seem a little weird but it's part of the

00:11:14,660 --> 00:11:20,470
SQL standard the two statements you see

00:11:17,690 --> 00:11:23,890
on the top left in blue are equivalent

00:11:20,470 --> 00:11:28,130
we've now introduced the tables and row

00:11:23,890 --> 00:11:32,060
syntax so instead of typing select star

00:11:28,130 --> 00:11:34,610
from T you just now type table T doesn't

00:11:32,060 --> 00:11:37,190
seem as poetic to me but that's also

00:11:34,610 --> 00:11:41,020
there also you see in the middle of the

00:11:37,190 --> 00:11:43,430
screen insert into T 1 using the row

00:11:41,020 --> 00:11:45,620
option that makes it a little bit

00:11:43,430 --> 00:11:47,390
cleaner read I hopefully this will be

00:11:45,620 --> 00:11:55,640
get more adopted but those two

00:11:47,390 --> 00:12:01,430
statements are also equivalent in the

00:11:55,640 --> 00:12:03,680
past if you were dealing with records we

00:12:01,430 --> 00:12:04,970
had a duplicate key you had to do

00:12:03,680 --> 00:12:06,680
something like on the bottom where you

00:12:04,970 --> 00:12:08,060
had the use of values function to be

00:12:06,680 --> 00:12:10,400
able to get the value of the current

00:12:08,060 --> 00:12:12,290
route a current index you're trying to

00:12:10,400 --> 00:12:16,190
put in there and here we're trying to do

00:12:12,290 --> 00:12:18,350
a increment on that now on the top you

00:12:16,190 --> 00:12:20,300
see that we have the keyword new sort of

00:12:18,350 --> 00:12:21,680
like in a trigger which makes it a lot

00:12:20,300 --> 00:12:30,050
easier if you're handling this type of

00:12:21,680 --> 00:12:32,660
work way back in October we introduced

00:12:30,050 --> 00:12:36,800
random passwords explain analyze hash

00:12:32,660 --> 00:12:38,150
joins updated our compression and the

00:12:36,800 --> 00:12:40,340
Enterprise Edition started supporting

00:12:38,150 --> 00:12:43,580
the hash e-court vault so if you're

00:12:40,340 --> 00:12:47,750
running at rest encryption we work with

00:12:43,580 --> 00:12:50,780
hashing court so let's dig into the

00:12:47,750 --> 00:12:53,810
random password that's one of my blogs

00:12:50,780 --> 00:12:55,520
on this if you have a corporation where

00:12:53,810 --> 00:12:58,910
you have to change your passwords every

00:12:55,520 --> 00:13:02,710
X days every password has to be Y length

00:12:58,910 --> 00:13:06,050
with Z number of uppercase characters a

00:13:02,710 --> 00:13:08,240
number of special characters and all

00:13:06,050 --> 00:13:10,310
that minus QL can support that and

00:13:08,240 --> 00:13:11,870
rather than tie all sorts of different

00:13:10,310 --> 00:13:14,870
pieces of software gether try to enforce

00:13:11,870 --> 00:13:18,800
that you can have the mask you server

00:13:14,870 --> 00:13:20,900
generate this for you in the example

00:13:18,800 --> 00:13:23,960
here we're creating a random password

00:13:20,900 --> 00:13:26,420
and you can see that it returns the

00:13:23,960 --> 00:13:33,740
username and the host and that random

00:13:26,420 --> 00:13:37,310
password hash joints hash joints are

00:13:33,740 --> 00:13:43,370
equi joints where you're doing join

00:13:37,310 --> 00:13:48,020
column join table B to table a where c1

00:13:43,370 --> 00:13:52,700
equals CX and as you see on that little

00:13:48,020 --> 00:13:57,080
nice diagram blue is our normal branch

00:13:52,700 --> 00:14:01,400
and loop search and with these other

00:13:57,080 --> 00:14:06,050
equi-join you can see that i'm sorry the

00:14:01,400 --> 00:14:08,630
the blue is the is the the hash but the

00:14:06,050 --> 00:14:11,600
oranges are traditional branching and

00:14:08,630 --> 00:14:16,700
loop much faster if you're doing

00:14:11,600 --> 00:14:19,190
equi-join x' by the way as i mentioned

00:14:16,700 --> 00:14:23,380
earlier 8 0 20 which it's been out for

00:14:19,190 --> 00:14:23,380
two weeks now has much improved on this

00:14:24,430 --> 00:14:29,930
now if you're used to tuning your

00:14:28,310 --> 00:14:32,030
queries you've run into the explain

00:14:29,930 --> 00:14:34,370
command you prepend explain on top in

00:14:32,030 --> 00:14:36,530
front of your query and it goes out to

00:14:34,370 --> 00:14:40,640
the optimizer and says okay how would

00:14:36,530 --> 00:14:42,640
you optimize this statement and go out

00:14:40,640 --> 00:14:44,900
and get the data and report back to me

00:14:42,640 --> 00:14:48,280
well without the word analyzed in there

00:14:44,900 --> 00:14:51,140
it's a historical guess based on

00:14:48,280 --> 00:14:54,800
statistics that are on hand I think is

00:14:51,140 --> 00:14:56,570
like a GPS in your car now GPS is if

00:14:54,800 --> 00:14:59,090
you're probably well aware aren't great

00:14:56,570 --> 00:15:00,860
things but unless it has the latest data

00:14:59,090 --> 00:15:03,140
it doesn't know there's a car accident

00:15:00,860 --> 00:15:04,280
down the end of the street also does it

00:15:03,140 --> 00:15:06,350
know about the traffic jam on the

00:15:04,280 --> 00:15:08,780
freeway and it's going to write try to

00:15:06,350 --> 00:15:09,529
route you through those so if you have a

00:15:08,780 --> 00:15:12,170
lot of all

00:15:09,529 --> 00:15:14,209
child data that information from that

00:15:12,170 --> 00:15:15,199
the optimizers trying to use is not

00:15:14,209 --> 00:15:17,870
great

00:15:15,199 --> 00:15:19,730
now with explain analyze what it does

00:15:17,870 --> 00:15:21,379
and this is a big difference is it

00:15:19,730 --> 00:15:23,810
actually goes out there and runs the

00:15:21,379 --> 00:15:26,509
query and gives you the expected versus

00:15:23,810 --> 00:15:28,610
the actual by the way if you're expected

00:15:26,509 --> 00:15:30,920
versus actual is way way way off please

00:15:28,610 --> 00:15:41,089
for an analyzed table on there very very

00:15:30,920 --> 00:15:43,699
handy to to see what's going on okay

00:15:41,089 --> 00:15:46,519
back in July we added multi valued

00:15:43,699 --> 00:15:50,959
indexes JSON document validation dual

00:15:46,519 --> 00:15:56,709
passwords the clone plug-in and a faster

00:15:50,959 --> 00:16:00,110
you TFA mb mb for collation by the way

00:15:56,709 --> 00:16:03,259
if you're interested I'll have a ask me

00:16:00,110 --> 00:16:05,480
anything later in this year were

00:16:03,259 --> 00:16:07,670
actually June 2nd on the document

00:16:05,480 --> 00:16:09,559
validation but let's take a look at

00:16:07,670 --> 00:16:10,550
these features that I've put in there by

00:16:09,559 --> 00:16:11,839
the way I'm not going over everything

00:16:10,550 --> 00:16:14,439
I'm just going to stuff that interested

00:16:11,839 --> 00:16:17,089
me that I know it interests developers

00:16:14,439 --> 00:16:19,189
ok multivalued indexes why is this

00:16:17,089 --> 00:16:21,199
important well in the past there was a

00:16:19,189 --> 00:16:24,769
limit you could have one row and an

00:16:21,199 --> 00:16:27,319
index for one row and a table you can

00:16:24,769 --> 00:16:29,750
exceed that well we start doing JSON

00:16:27,319 --> 00:16:31,490
documents and suddenly you have a list

00:16:29,750 --> 00:16:35,149
of serial numbers that make up a

00:16:31,490 --> 00:16:37,339
component or various phone numbers for

00:16:35,149 --> 00:16:40,069
one individual and you want to be able

00:16:37,339 --> 00:16:41,930
to index that well with multi value

00:16:40,069 --> 00:16:44,019
indexes you can do that so there's no

00:16:41,930 --> 00:16:47,600
longer that tie one-to-one relationship

00:16:44,019 --> 00:16:49,430
by the way some testing that I've done

00:16:47,600 --> 00:16:52,129
until you hit about 20 million records

00:16:49,430 --> 00:16:54,529
this may not pay off for you but this is

00:16:52,129 --> 00:16:57,139
the time and dependent on what your data

00:16:54,529 --> 00:17:03,880
actually looks like see if there's any

00:16:57,139 --> 00:17:08,079
questions out there JSON

00:17:03,880 --> 00:17:12,220
love JSON it's great unfortunately I'm

00:17:08,079 --> 00:17:14,140
an old DBA and I'm used to having fairly

00:17:12,220 --> 00:17:15,850
strict typing so if you're trying to put

00:17:14,140 --> 00:17:17,440
a string into an integer field it

00:17:15,850 --> 00:17:19,959
complains and it's let you put the bad

00:17:17,440 --> 00:17:22,150
data in there now catching bad data

00:17:19,959 --> 00:17:24,579
before it actually goes into your system

00:17:22,150 --> 00:17:25,839
is a lot cheaper than trying to fish it

00:17:24,579 --> 00:17:29,470
out and correct it later

00:17:25,839 --> 00:17:31,060
so the JSON schema dot-org folks came up

00:17:29,470 --> 00:17:34,990
with some proposals that we've

00:17:31,060 --> 00:17:38,200
implemented and if you look in the

00:17:34,990 --> 00:17:43,300
middle of the slide there you'll see a

00:17:38,200 --> 00:17:46,060
function JSON schema valid what this is

00:17:43,300 --> 00:17:49,270
is in there is an exemplar document of

00:17:46,060 --> 00:17:51,730
what we want to have checked in this

00:17:49,270 --> 00:17:55,680
case we're checking for the object and

00:17:51,730 --> 00:17:58,000
that object out there is called my age

00:17:55,680 --> 00:18:00,880
now it's going to come in hopefully as a

00:17:58,000 --> 00:18:05,080
type number the minimum value of 28

00:18:00,880 --> 00:18:07,450
maximum number of 99 so 27 or under or

00:18:05,080 --> 00:18:09,490
100 and over is not going to get into

00:18:07,450 --> 00:18:12,040
the database by the way you also see

00:18:09,490 --> 00:18:13,300
that this is required so if you want to

00:18:12,040 --> 00:18:17,740
make sure that you get that piece of

00:18:13,300 --> 00:18:20,830
information it's in there otherwise this

00:18:17,740 --> 00:18:24,850
is tomorrow let in so we go to insert

00:18:20,830 --> 00:18:27,790
two records go insert a my age of 27

00:18:24,850 --> 00:18:33,100
and we get you told my age in range is

00:18:27,790 --> 00:18:35,170
violated second example here we have a

00:18:33,100 --> 00:18:37,450
one that's in the right range and the

00:18:35,170 --> 00:18:39,310
data gets in there so this really does

00:18:37,450 --> 00:18:41,470
help you keep bad data out of your

00:18:39,310 --> 00:18:43,600
database is this something traditional

00:18:41,470 --> 00:18:45,010
you can't do with JSON and I think we're

00:18:43,600 --> 00:18:47,560
the only ones implementing it right now

00:18:45,010 --> 00:18:49,660
but I hopefully the JSON schema.org

00:18:47,560 --> 00:18:56,770
folks will get to become an approved

00:18:49,660 --> 00:18:58,060
standard dual passwords this is the one

00:18:56,770 --> 00:19:01,110
that the gentleman the UK was getting

00:18:58,060 --> 00:19:04,300
except with me a couple months ago

00:19:01,110 --> 00:19:07,000
basically what you do is you alter a

00:19:04,300 --> 00:19:10,360
user and you type in a new password

00:19:07,000 --> 00:19:13,240
which is identified by and you add

00:19:10,360 --> 00:19:15,700
retain current password so now either

00:19:13,240 --> 00:19:17,950
password works

00:19:15,700 --> 00:19:20,860
to get into the account well how does

00:19:17,950 --> 00:19:23,410
this help Dave well imagine you're your

00:19:20,860 --> 00:19:25,480
boss comes to you and said hey I know we

00:19:23,410 --> 00:19:27,550
have somewhere north of 800 programs out

00:19:25,480 --> 00:19:29,200
there for our current environment but we

00:19:27,550 --> 00:19:31,960
need to change the passwords on all of

00:19:29,200 --> 00:19:34,210
them because somehow it's either

00:19:31,960 --> 00:19:36,460
security time or someone mention it on

00:19:34,210 --> 00:19:40,030
zoom' or something like that so rather

00:19:36,460 --> 00:19:43,270
than doing Emacs paste our dot PHP or

00:19:40,030 --> 00:19:46,390
whatever language you use what you can

00:19:43,270 --> 00:19:49,930
do is you you can move gracefully a

00:19:46,390 --> 00:19:52,780
group of programs over at a time so you

00:19:49,930 --> 00:19:54,850
can change them from the old password to

00:19:52,780 --> 00:19:57,250
the new password very effectively and

00:19:54,850 --> 00:19:59,470
very easily and as you can see down the

00:19:57,250 --> 00:20:02,280
bottom when you get everything converted

00:19:59,470 --> 00:20:05,950
over just do another alter user and

00:20:02,280 --> 00:20:07,510
discard old password boom now the middle

00:20:05,950 --> 00:20:10,630
screen there you can see what's actually

00:20:07,510 --> 00:20:12,580
recorded the hash of the password it's

00:20:10,630 --> 00:20:21,600
actually recorded within the record in

00:20:12,580 --> 00:20:24,360
the MySQL user table way back a year ago

00:20:21,600 --> 00:20:28,530
we got rid of the MySQL upgrade script

00:20:24,360 --> 00:20:31,090
added constraint checks and the C API

00:20:28,530 --> 00:20:33,340
started supporting asynchronous

00:20:31,090 --> 00:20:36,130
non-blocking communication as a server

00:20:33,340 --> 00:20:37,810
and we added explained format equals

00:20:36,130 --> 00:20:39,820
tree you've actually seen a little bit

00:20:37,810 --> 00:20:43,570
of an example of that up above with

00:20:39,820 --> 00:20:46,870
explaining analyze so the big one I want

00:20:43,570 --> 00:20:50,170
explain is MySQL upgrade script every so

00:20:46,870 --> 00:20:51,520
often before 8 o 16 someone would do an

00:20:50,170 --> 00:20:53,890
upgrade and they get on Stack Overflow

00:20:51,520 --> 00:20:55,750
or on slacks saying hey upgraded my

00:20:53,890 --> 00:20:58,030
server but I'm getting all these missing

00:20:55,750 --> 00:21:00,400
columns missing whatever things on my

00:20:58,030 --> 00:21:02,170
server what's going on well I used to

00:21:00,400 --> 00:21:04,060
have to run the MySQL upgrade

00:21:02,170 --> 00:21:05,680
script after you changed your binary

00:21:04,060 --> 00:21:08,050
this would go out there to the system

00:21:05,680 --> 00:21:11,100
tables and the metadata and update them

00:21:08,050 --> 00:21:14,740
to the latest format now what we do is

00:21:11,100 --> 00:21:17,230
we check the version of the metadata if

00:21:14,740 --> 00:21:19,350
it needs to have MySQL upgrade run and

00:21:17,230 --> 00:21:21,580
we'll do so automatically this is a

00:21:19,350 --> 00:21:25,650
bonus as you don't have to remember to

00:21:21,580 --> 00:21:25,650
do that script no chance to forget it

00:21:28,389 --> 00:21:33,649
constraint checks in the past - Kuehl

00:21:31,879 --> 00:21:36,470
head constraint checks we just ignored

00:21:33,649 --> 00:21:39,109
them we have a couple examples here

00:21:36,470 --> 00:21:41,059
we're creating a table and the first

00:21:39,109 --> 00:21:45,830
check we have is we're gonna check that

00:21:41,059 --> 00:21:50,210
c1 is not equal to c2 second one is c1

00:21:45,830 --> 00:21:54,950
is greater than ten and so on and so

00:21:50,210 --> 00:21:58,399
forth now I'd like to point out the one

00:21:54,950 --> 00:22:01,549
the c2 and constraint and it has a name

00:21:58,399 --> 00:22:03,320
in there C to underscore positive which

00:22:01,549 --> 00:22:06,470
is going to check the c2 screen and zero

00:22:03,320 --> 00:22:09,080
please use this format there's nothing

00:22:06,470 --> 00:22:10,429
like being being called at three o'clock

00:22:09,080 --> 00:22:12,169
the morning saying there's some sort of

00:22:10,429 --> 00:22:14,029
constraint check going on and you don't

00:22:12,169 --> 00:22:16,279
get a good error message if you put a

00:22:14,029 --> 00:22:19,399
name on there it will tell you that C to

00:22:16,279 --> 00:22:20,570
underscore positive was violated the

00:22:19,399 --> 00:22:28,970
other ones will just tell you there was

00:22:20,570 --> 00:22:34,129
a constraint check violated okay way way

00:22:28,970 --> 00:22:36,289
way back January February 2019 we

00:22:34,129 --> 00:22:38,599
actually had a toe 14 a toe 15 came out

00:22:36,289 --> 00:22:40,489
because there was a problem with a

00:22:38,599 --> 00:22:42,830
supporting library I believe it was

00:22:40,489 --> 00:22:46,399
secure socket layer z' and we had to do

00:22:42,830 --> 00:22:48,889
a quick release we added an admin tcp/ip

00:22:46,399 --> 00:22:51,859
port that fault version port number is

00:22:48,889 --> 00:22:54,109
three three zero six two if you shut off

00:22:51,859 --> 00:22:56,210
communications to the regular ports you

00:22:54,109 --> 00:22:58,970
need this to be able to or you can use

00:22:56,210 --> 00:23:01,369
this to be able to go out and Adam in

00:22:58,970 --> 00:23:02,929
the Box on now your court your account

00:23:01,369 --> 00:23:06,049
doesn't need a service connection admin

00:23:02,929 --> 00:23:08,989
privilege we also fixed JSON or a AG and

00:23:06,049 --> 00:23:11,599
JSON object egg to work with windowing

00:23:08,989 --> 00:23:14,450
functions so if you're aggregating data

00:23:11,599 --> 00:23:16,700
either JSON or non JSON that you want a

00:23:14,450 --> 00:23:19,190
JSON format those will now work with

00:23:16,700 --> 00:23:22,639
windowing functions and we added set

00:23:19,190 --> 00:23:25,519
persist and set persist only set persist

00:23:22,639 --> 00:23:27,590
is great I believe if I go into detail

00:23:25,519 --> 00:23:30,470
on that a little bit later and lateral

00:23:27,590 --> 00:23:32,690
Drive tables let's go into that sub

00:23:30,470 --> 00:23:34,779
queries anyone who's trying to learn SQL

00:23:32,690 --> 00:23:37,009
runs into a problem with sub grace

00:23:34,779 --> 00:23:40,129
that's that query embedded within

00:23:37,009 --> 00:23:41,270
another query and there's correlated and

00:23:40,129 --> 00:23:43,580
I'm correlated a hold

00:23:41,270 --> 00:23:45,380
other stuff and they're very frustrating

00:23:43,580 --> 00:23:47,930
you're right that's why we should start

00:23:45,380 --> 00:23:49,280
supporting CTE s two years ago common

00:23:47,930 --> 00:23:52,160
table expressions they're a lot easier

00:23:49,280 --> 00:23:54,470
and a lot nicer and easier to comprehend

00:23:52,160 --> 00:23:56,510
than just standard sub-query now in this

00:23:54,470 --> 00:24:01,130
example you'll notice the sub-query here

00:23:56,510 --> 00:24:05,090
is in red and it's all preceded by the

00:24:01,130 --> 00:24:07,910
word lateral now previously do this if I

00:24:05,090 --> 00:24:11,260
was trying to get that CC column out of

00:24:07,910 --> 00:24:14,840
the sub-query I'd get a violation error

00:24:11,260 --> 00:24:17,420
this always used to grind my gears as

00:24:14,840 --> 00:24:19,880
they say now in this example we're able

00:24:17,420 --> 00:24:22,340
to say okay this is referencing the

00:24:19,880 --> 00:24:29,690
sub-query so the optimizer knows how to

00:24:22,340 --> 00:24:32,030
handle this okay so what has MySQL

00:24:29,690 --> 00:24:35,630
basically been doing in the two years

00:24:32,030 --> 00:24:38,180
and a month since 8 o 11 became

00:24:35,630 --> 00:24:40,310
generally available well we put all your

00:24:38,180 --> 00:24:42,260
metadata in the data dictionary what

00:24:40,310 --> 00:24:43,640
does that mean for you well you're not

00:24:42,260 --> 00:24:45,950
tying up I know it's with all little

00:24:43,640 --> 00:24:51,320
files holding metadata it's all kept in

00:24:45,950 --> 00:24:52,640
in an ODB table crash proof and the side

00:24:51,320 --> 00:24:56,630
effect of that is you can now have

00:24:52,640 --> 00:24:58,280
millions of tables within a schema the

00:24:56,630 --> 00:24:59,600
bad news is you can now have millions of

00:24:58,280 --> 00:25:02,980
tables within a schema

00:24:59,600 --> 00:25:06,170
I also added histograms this is a

00:25:02,980 --> 00:25:07,340
variation of the ID on indexes indexes

00:25:06,170 --> 00:25:09,920
are great they get you right to the

00:25:07,340 --> 00:25:13,090
record or records you need however every

00:25:09,920 --> 00:25:16,730
time you do an add an update or delete

00:25:13,090 --> 00:25:19,160
the table that holds all the indexing

00:25:16,730 --> 00:25:20,810
information has to be updated histograms

00:25:19,160 --> 00:25:22,760
are kind of like setting up all your

00:25:20,810 --> 00:25:24,500
data in rows you have all the A's and

00:25:22,760 --> 00:25:28,370
this row all the B's in this row all the

00:25:24,500 --> 00:25:29,720
C's in this row and when you're looking

00:25:28,370 --> 00:25:32,950
for someone da you know what row to go

00:25:29,720 --> 00:25:35,120
to vastly speeds up the optimizer

00:25:32,950 --> 00:25:37,190
resource groups if you're running on a

00:25:35,120 --> 00:25:39,410
multiply CPU machine you could say okay

00:25:37,190 --> 00:25:42,170
CPUs 2 and 3 are going to be for batch

00:25:39,410 --> 00:25:44,480
processing only set down their priority

00:25:42,170 --> 00:25:47,210
and any batch job you have can go there

00:25:44,480 --> 00:25:50,240
other machines get faster response I

00:25:47,210 --> 00:25:52,820
mentioned cats earlier better JSON

00:25:50,240 --> 00:25:54,450
support we had a JSON pretty improved

00:25:52,820 --> 00:25:57,300
JSON table

00:25:54,450 --> 00:25:59,520
and that a whole lot of other works

00:25:57,300 --> 00:26:01,110
there something else we did is that it

00:25:59,520 --> 00:26:04,590
can do partial updates so if you're only

00:26:01,110 --> 00:26:06,360
updating a certain key in a document

00:26:04,590 --> 00:26:09,200
we're not rewriting everything when you

00:26:06,360 --> 00:26:12,120
do an update which was the case with 5-7

00:26:09,200 --> 00:26:16,110
utf-8 and before full support this gives

00:26:12,120 --> 00:26:19,620
you the CGA language support and emojis

00:26:16,110 --> 00:26:21,690
I also improved inner TB cluster I'll

00:26:19,620 --> 00:26:24,300
mention that a little bit more much

00:26:21,690 --> 00:26:27,630
improvement on X dev API which is our no

00:26:24,300 --> 00:26:30,450
SQL protocol is a true protocol not an

00:26:27,630 --> 00:26:32,550
ORM came up with a new temporary engine

00:26:30,450 --> 00:26:34,050
that's between 10 and 20 percent faster

00:26:32,550 --> 00:26:42,540
depending what you're doing and a lot

00:26:34,050 --> 00:26:43,650
better performance so we want to give

00:26:42,540 --> 00:26:46,440
you a much better product with more

00:26:43,650 --> 00:26:49,200
flexibility giving you better SQL with

00:26:46,440 --> 00:26:51,120
windowing functions continue common

00:26:49,200 --> 00:26:52,710
table expressions derived tables

00:26:51,120 --> 00:26:55,500
constraint checks and the table and row

00:26:52,710 --> 00:26:57,890
functionality much better no sequel with

00:26:55,500 --> 00:27:01,440
JSON validation improved exit of API

00:26:57,890 --> 00:27:03,180
better JSON support JSON table which is

00:27:01,440 --> 00:27:06,060
a interesting function lets you take

00:27:03,180 --> 00:27:08,760
your unstructured JSON data and

00:27:06,060 --> 00:27:11,370
temporarily cast it into an SQL table

00:27:08,760 --> 00:27:14,600
for processing with with SQL functions

00:27:11,370 --> 00:27:14,600
like when doing functions and all that

00:27:16,010 --> 00:27:20,940
now I wish I had an update for this I'm

00:27:18,390 --> 00:27:22,500
gonna have to ask for one a doe has had

00:27:20,940 --> 00:27:25,260
the fastest adoption of any previous

00:27:22,500 --> 00:27:28,140
root of any release that we've had up to

00:27:25,260 --> 00:27:30,240
now also we'd like you to take a look at

00:27:28,140 --> 00:27:33,120
inner DB cluster imagine your

00:27:30,240 --> 00:27:34,860
application is that little blue box up

00:27:33,120 --> 00:27:37,560
there where you have your application

00:27:34,860 --> 00:27:39,510
running and in there you have your MySQL

00:27:37,560 --> 00:27:40,590
connector and you can run last your

00:27:39,510 --> 00:27:43,440
router on that it's a very lightweight

00:27:40,590 --> 00:27:44,760
level for a router your application

00:27:43,440 --> 00:27:46,260
really shouldn't know anything about the

00:27:44,760 --> 00:27:48,300
data layer underneath it should just

00:27:46,260 --> 00:27:50,460
know the talks to the connector to it

00:27:48,300 --> 00:27:53,360
and that's about it underneath that you

00:27:50,460 --> 00:27:56,700
can have a simple three node mask you'll

00:27:53,360 --> 00:27:58,380
know DB cluster like you see here one

00:27:56,700 --> 00:28:00,270
machines primary four reads and writes

00:27:58,380 --> 00:28:02,280
the other two are secondary for a reads

00:28:00,270 --> 00:28:04,620
only mask you'll writer will do some

00:28:02,280 --> 00:28:07,480
load balancing for you this is all

00:28:04,620 --> 00:28:10,010
administered by the new MySQL shell

00:28:07,480 --> 00:28:12,620
something we added in the previous

00:28:10,010 --> 00:28:13,760
release I was in ODB replica set if

00:28:12,620 --> 00:28:15,980
you've normally setup my school

00:28:13,760 --> 00:28:18,680
replication you know it's a bit of a

00:28:15,980 --> 00:28:20,420
pain in the butt you have to make a copy

00:28:18,680 --> 00:28:22,720
recurrent data copy it over to the other

00:28:20,420 --> 00:28:25,220
machine set it up

00:28:22,720 --> 00:28:28,220
hopefully you're only GT IDE so it knows

00:28:25,220 --> 00:28:29,930
how to run that well the big change here

00:28:28,220 --> 00:28:32,630
is this gives you access to the clone

00:28:29,930 --> 00:28:35,450
plugin well what's the clone plugin Dave

00:28:32,630 --> 00:28:39,320
well this is an extremely extremely fast

00:28:35,450 --> 00:28:41,030
way of CAP capturing data on one in ODB

00:28:39,320 --> 00:28:43,730
tablespace and copying it over to

00:28:41,030 --> 00:28:47,180
another machine it is absolutely

00:28:43,730 --> 00:28:49,850
brutally fast it's not a choke point and

00:28:47,180 --> 00:28:52,940
it makes provisioning a new machine very

00:28:49,850 --> 00:28:55,160
very simple you set up the hardware set

00:28:52,940 --> 00:28:58,010
up to your replication accounts using

00:28:55,160 --> 00:29:02,860
the previous slides information for the

00:28:58,010 --> 00:29:02,860
replication and boom it copies it over

00:29:04,000 --> 00:29:08,660
also I'd like to talk about our new

00:29:06,170 --> 00:29:10,280
shell the old shell is great but it's

00:29:08,660 --> 00:29:11,360
kind of getting along in the tooth it's

00:29:10,280 --> 00:29:13,670
25 years old

00:29:11,360 --> 00:29:15,890
it's an advanced client and code editor

00:29:13,670 --> 00:29:18,350
when the handy things about it has a

00:29:15,890 --> 00:29:20,120
great help system built into it with

00:29:18,350 --> 00:29:21,860
command completion so if you don't

00:29:20,120 --> 00:29:23,450
remember the arguments you could type in

00:29:21,860 --> 00:29:25,850
a letter or two and hit tab I'm showing

00:29:23,450 --> 00:29:27,770
the option options has three modes

00:29:25,850 --> 00:29:31,250
structured query language section you'd

00:29:27,770 --> 00:29:32,660
expect Python and JavaScript so if you

00:29:31,250 --> 00:29:34,430
have libraries for either those two

00:29:32,660 --> 00:29:36,010
languages you can include those in there

00:29:34,430 --> 00:29:38,630
and help manipulate your data with that

00:29:36,010 --> 00:29:41,240
it's our admin tool for a replica set

00:29:38,630 --> 00:29:44,480
and a BB cluster as I mentioned earlier

00:29:41,240 --> 00:29:47,360
it has a 5 7 to 800 upgrade checker and

00:29:44,480 --> 00:29:48,890
it has a bulk loader works in parallel

00:29:47,360 --> 00:29:52,580
very fast for a comma-separated

00:29:48,890 --> 00:29:54,500
tab-separated and json data now when you

00:29:52,580 --> 00:29:56,900
use the new shell when the first things

00:29:54,500 --> 00:29:59,480
you'll notice is that it's not

00:29:56,900 --> 00:30:02,990
monochrome anymore and in this case

00:29:59,480 --> 00:30:04,700
you'll see that first little yellow

00:30:02,990 --> 00:30:06,650
block with the black letters G is in

00:30:04,700 --> 00:30:08,510
there that's telling you we're talking

00:30:06,650 --> 00:30:10,820
JavaScript and we connect into the

00:30:08,510 --> 00:30:12,920
server and if you look down a couple

00:30:10,820 --> 00:30:15,920
lines you'll see that the next to Leo

00:30:12,920 --> 00:30:18,650
line tells us where we logged into and

00:30:15,920 --> 00:30:20,780
what schema we're talking to and below

00:30:18,650 --> 00:30:23,630
that I typed /s

00:30:20,780 --> 00:30:26,240
the status of the system please notice

00:30:23,630 --> 00:30:29,420
that on the SSL line that we're using

00:30:26,240 --> 00:30:31,700
TLS by default we turn on security

00:30:29,420 --> 00:30:33,110
because we want the communications

00:30:31,700 --> 00:30:35,290
between your server and your client to

00:30:33,110 --> 00:30:37,760
be as secure as possible out of the box

00:30:35,290 --> 00:30:40,160
we setup all the keys for you you can

00:30:37,760 --> 00:30:41,270
use your own keys if you want I also

00:30:40,160 --> 00:30:43,640
know it's down a little bit further that

00:30:41,270 --> 00:30:49,100
all the communications are in utf-8 and

00:30:43,640 --> 00:30:54,190
b4 which is the default by the way our

00:30:49,100 --> 00:30:56,420
new API lets you bypass a lot of the

00:30:54,190 --> 00:31:00,380
overhead and prerequisites used to have

00:30:56,420 --> 00:31:03,260
to have on a sequel SQL Server or any

00:31:00,380 --> 00:31:06,860
other rational server to save your data

00:31:03,260 --> 00:31:08,780
in this case we use backslash use to say

00:31:06,860 --> 00:31:11,120
what schema we want to use or we could

00:31:08,780 --> 00:31:15,140
have just done a session not create

00:31:11,120 --> 00:31:16,880
schema once we pick a schema to use

00:31:15,140 --> 00:31:18,500
you'll notice that I type in DB and this

00:31:16,880 --> 00:31:20,630
tells me the pointer to our current

00:31:18,500 --> 00:31:22,730
schema and under there I can create a

00:31:20,630 --> 00:31:26,180
document collation DB dot create

00:31:22,730 --> 00:31:27,290
collection a and if I type in DBA it

00:31:26,180 --> 00:31:30,230
tells you that it's a collection

00:31:27,290 --> 00:31:32,900
underneath that we do a DBA dot add and

00:31:30,230 --> 00:31:34,970
we're adding a key and a value and if I

00:31:32,900 --> 00:31:36,740
do a find you'll see that it's saved our

00:31:34,970 --> 00:31:38,330
data haven't gone out had to go out

00:31:36,740 --> 00:31:41,690
there and set up relational tables

00:31:38,330 --> 00:31:43,640
indexes normalized data or all that and

00:31:41,690 --> 00:31:46,910
start saving your data and JSON right

00:31:43,640 --> 00:31:48,740
away very fast very flexible if you want

00:31:46,910 --> 00:31:52,070
to access this from SQL side you can do

00:31:48,740 --> 00:31:55,880
that later or at the same time you can

00:31:52,070 --> 00:31:58,910
also make copy the stuff from the JSON

00:31:55,880 --> 00:32:00,890
side over to the SQL side when they

00:31:58,910 --> 00:32:08,200
generated column give you ultimate

00:32:00,890 --> 00:32:11,360
flexibility now I mentioned earlier the

00:32:08,200 --> 00:32:13,280
about the bulk loader first started with

00:32:11,360 --> 00:32:15,350
a Python script one of our community

00:32:13,280 --> 00:32:17,660
members the data charmer came up with

00:32:15,350 --> 00:32:19,790
and was basically imports the regular

00:32:17,660 --> 00:32:21,770
expression library and the files read

00:32:19,790 --> 00:32:22,300
the file line-by-line write it out line

00:32:21,770 --> 00:32:24,440
by line

00:32:22,300 --> 00:32:26,540
our engineers thought that was great and

00:32:24,440 --> 00:32:29,300
they came up with a bulk loader that

00:32:26,540 --> 00:32:31,160
worked very fast as you can see here I'm

00:32:29,300 --> 00:32:34,520
saying okay here's my file where has the

00:32:31,160 --> 00:32:36,260
information and I tell it to optionally

00:32:34,520 --> 00:32:39,790
what schema and collection I want to go

00:32:36,260 --> 00:32:42,470
into and it loaded it pretty quickly

00:32:39,790 --> 00:32:46,270
well they went back to the drawing board

00:32:42,470 --> 00:32:48,350
and came back with a parallel bulkloader

00:32:46,270 --> 00:32:50,150
which will run up to I think five

00:32:48,350 --> 00:32:53,530
threads to do parallel bulk loading so

00:32:50,150 --> 00:32:58,700
if you have CSV TSV or JSON data to load

00:32:53,530 --> 00:33:00,140
it's very very very quick and it's an

00:32:58,700 --> 00:33:02,420
example of running the parallel loader

00:33:00,140 --> 00:33:04,910
as you see here it only ran three

00:33:02,420 --> 00:33:12,470
threads I've seen it run five I think

00:33:04,910 --> 00:33:15,050
that's the limit so this is kind of a

00:33:12,470 --> 00:33:19,150
cute little cartoon that was kind of the

00:33:15,050 --> 00:33:21,380
vein of every DBAs life for many years

00:33:19,150 --> 00:33:23,330
basically they will rule what you set

00:33:21,380 --> 00:33:26,810
your buffer size your buffer pool size

00:33:23,330 --> 00:33:29,270
to 70 to 85 percent of memory and pass

00:33:26,810 --> 00:33:30,320
over years we've been a lot better at

00:33:29,270 --> 00:33:33,230
figuring out what your hardware is

00:33:30,320 --> 00:33:36,380
actually set to so at this point I'd

00:33:33,230 --> 00:33:38,540
love to hear some feedback from folks on

00:33:36,380 --> 00:33:41,510
what you want to see in the next

00:33:38,540 --> 00:33:45,410
releases of MySQL I'll give you my

00:33:41,510 --> 00:33:47,510
guesses first these are my private ideas

00:33:45,410 --> 00:33:50,900
not blessed by Oracle or my SQL

00:33:47,510 --> 00:33:53,180
management the Enterprise Edition has

00:33:50,900 --> 00:33:55,640
been doing a lot past several years with

00:33:53,180 --> 00:33:56,750
security and right now your bosses are

00:33:55,640 --> 00:33:59,000
talking cloud but they're buying

00:33:56,750 --> 00:34:01,280
security you're gonna see a lot more

00:33:59,000 --> 00:34:03,050
support for JSON and the graphical

00:34:01,280 --> 00:34:06,350
information systems we use the boost

00:34:03,050 --> 00:34:08,120
libraries here and before five seven we

00:34:06,350 --> 00:34:10,690
used our own libraries and the boost

00:34:08,120 --> 00:34:13,610
folks have much better C++ libraries and

00:34:10,690 --> 00:34:16,850
it does a full and look so it'll wrap

00:34:13,610 --> 00:34:19,280
around 3d world very very impressive I

00:34:16,850 --> 00:34:22,510
think it supports 8,000 graphical

00:34:19,280 --> 00:34:25,130
reference identification identifiers

00:34:22,510 --> 00:34:28,090
very interesting you're gonna see a lot

00:34:25,130 --> 00:34:30,230
more functionality for nodb cluster

00:34:28,090 --> 00:34:33,409
you're gonna see the big improvements in

00:34:30,230 --> 00:34:34,850
the exa dev API more features are being

00:34:33,409 --> 00:34:36,620
added to the shell a matter matter of

00:34:34,850 --> 00:34:37,190
fact I'm testing semo's hopefully later

00:34:36,620 --> 00:34:39,740
today

00:34:37,190 --> 00:34:42,710
now performance problems caused by

00:34:39,740 --> 00:34:45,860
mutexes 25 years ago when they wrote the

00:34:42,710 --> 00:34:47,960
code originally it had some sticking

00:34:45,860 --> 00:34:50,030
points we're slowly hammering those

00:34:47,960 --> 00:34:51,919
a grinding them down making them nicely

00:34:50,030 --> 00:34:54,349
polished here you see a lot more

00:34:51,919 --> 00:34:58,250
emphasis on kubernetes issues like

00:34:54,349 --> 00:35:00,230
deployments also I think you're gonna

00:34:58,250 --> 00:35:02,240
have a hard time finding DBAs because

00:35:00,230 --> 00:35:06,140
the job is shifting the scope is going

00:35:02,240 --> 00:35:09,410
to widen and be less of a database

00:35:06,140 --> 00:35:11,420
plumber but meanwhile I think bad data

00:35:09,410 --> 00:35:15,530
architectures are still going to plague

00:35:11,420 --> 00:35:19,910
us you you can't make a thoroughbred

00:35:15,530 --> 00:35:21,560
horse out of a pig so they're gonna see

00:35:19,910 --> 00:35:24,920
a lot of folks have to go back and

00:35:21,560 --> 00:35:27,910
recover out their data by the way

00:35:24,920 --> 00:35:30,170
speaking of JSON I wrote a book

00:35:27,910 --> 00:35:33,650
masculine JSON practical programming

00:35:30,170 --> 00:35:35,330
guide this is featured on sale at Amazon

00:35:33,650 --> 00:35:36,710
on a regular basis which means instead

00:35:35,330 --> 00:35:39,230
of getting three cents a book I get a

00:35:36,710 --> 00:35:42,849
penny and a half whoo by the way you'll

00:35:39,230 --> 00:35:46,490
never go rich running a computer book

00:35:42,849 --> 00:35:49,070
and with that I'd like to thank you my

00:35:46,490 --> 00:35:52,130
email is David Stokes at Oracle comm on

00:35:49,070 --> 00:35:55,040
Twitter I'm a dancer honest that's nice

00:35:52,130 --> 00:35:57,260
analogy hopefully that's the turbine out

00:35:55,040 --> 00:35:58,940
of the pig if you have any questions

00:35:57,260 --> 00:36:00,619
I'll stay around on for the QA as long

00:35:58,940 --> 00:36:04,339
as I can once again thanks to NASA

00:36:00,619 --> 00:36:06,109
Nancy Bailey for being my my monitor in

00:36:04,339 --> 00:36:07,970
this and if you have any questions

00:36:06,109 --> 00:36:11,390
please see me I'll be at the booth later

00:36:07,970 --> 00:36:13,220
today our virtual booth and with that I

00:36:11,390 --> 00:36:16,250
want to thank you I hope you all have a

00:36:13,220 --> 00:36:18,500
good and safe time thank you kevin

00:36:16,250 --> 00:36:20,570
eldridge and once again if you need to

00:36:18,500 --> 00:36:22,760
get hold of me at stoker or David Stokes

00:36:20,570 --> 00:36:26,589
at oracle calm and with that thank you

00:36:22,760 --> 00:36:26,589

YouTube URL: https://www.youtube.com/watch?v=asHs2IiKouI


