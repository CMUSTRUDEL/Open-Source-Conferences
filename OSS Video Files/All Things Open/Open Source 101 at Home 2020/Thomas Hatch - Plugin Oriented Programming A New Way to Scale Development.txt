Title: Thomas Hatch - Plugin Oriented Programming A New Way to Scale Development
Publication date: 2020-05-20
Playlist: Open Source 101 at Home 2020
Description: 
	Plugin Oriented Programming A New Way to Scale Development

Presented at: Open Source 101 at Home 2020
Presented by: Thomas Hatch, SaltStack

Abstract: A universal truth has evolved in open source. Many open-source projects are difficult to maintain and teams maintaining them are spread too thin. The promise of code reuse that came from OOP has met a ceiling. Open Source developers become slaves to managing contributions.

A proposed solution to this problem is called POP, recently highlighted on the New Stack: https://thenewstack.io/saltstack-plugin-oriented-programming-could-help-open-source-woes/

POP is about scaling human capabilities. Making projects that are easier to contribute to in a large, distributed fashion. Software projects that are small are more manageable. A single developer can be expected to be able to manage and develop projects that consist of tens of thousands of lines of code, but it is unreasonable to conclude that a developer can be on-boarded to and own larger codebases.

In fact, larger codebases present serious long term issues, as they are not only deeply difficult to convey to others, but they are also irreplaceable. Over time new techniques are developed that can more easily solve historic problems. So instead of fixing older software to use newer capabilities, entirely new platforms are often produced.

POP aims to solve this issue, POP allows all code to be written in plugins, this allows entire applications to be made pluggable. But this is not all! POP makes applications pluggable with each other. So any POP application should be pluggable into another POP application.

The end result is that codebases can be broken up and tested in smaller chunks, but they can still be delivered as an easy to deploy and manage monolith. In many ways, it presents the benefits of microservices without the overhead of scheduler systems like Kubernetes.

In the end, the argument is, large projects almost always need to turn to plugin models, why not start with one?

For more info: https://opensource101.com
Captions: 
	00:00:05,400 --> 00:00:15,030
[Music]

00:00:09,920 --> 00:00:18,060
all right a little while ago

00:00:15,030 --> 00:00:20,130
linus torvalds was interviewed and he

00:00:18,060 --> 00:00:23,519
said my job really is at the end of the

00:00:20,130 --> 00:00:26,039
day to say no somebody has to say no to

00:00:23,519 --> 00:00:28,050
this page this poll request and because

00:00:26,039 --> 00:00:30,119
developers know that if they do

00:00:28,050 --> 00:00:32,700
something that I'll say no to they do a

00:00:30,119 --> 00:00:35,130
better job of writing the code I think

00:00:32,700 --> 00:00:37,110
that we can argue that Linus Torvalds is

00:00:35,130 --> 00:00:41,460
one of the greatest minds in the

00:00:37,110 --> 00:00:45,210
industry and I find it I find a

00:00:41,460 --> 00:00:46,440
disheartening that one of the greatest

00:00:45,210 --> 00:00:48,829
minds in the industry has been

00:00:46,440 --> 00:00:53,100
effectively reduced to a to a gatekeeper

00:00:48,829 --> 00:00:56,699
somebody who says yea or nay about about

00:00:53,100 --> 00:01:00,390
software being included into a codebase

00:00:56,699 --> 00:01:02,160
and that's one of the reasons that I

00:01:00,390 --> 00:01:04,769
feel that this plugin oriented

00:01:02,160 --> 00:01:07,310
programming pode approach is a good idea

00:01:04,769 --> 00:01:11,250
it helps solve some of these problems

00:01:07,310 --> 00:01:13,770
the next quote that I've got is my own

00:01:11,250 --> 00:01:16,890
the pop allows for code bases to be

00:01:13,770 --> 00:01:20,340
extremely month augmented plugin

00:01:16,890 --> 00:01:22,740
oriented programming takes the idea of

00:01:20,340 --> 00:01:25,170
well we should make software that can

00:01:22,740 --> 00:01:27,600
have plugins but extends it to a whole

00:01:25,170 --> 00:01:31,170
new level meaning that it's easy for us

00:01:27,600 --> 00:01:34,640
to externally augment software that

00:01:31,170 --> 00:01:39,720
means that instead of contributions

00:01:34,640 --> 00:01:43,020
being something that is potentially a

00:01:39,720 --> 00:01:47,250
burden on the maintainer ship team they

00:01:43,020 --> 00:01:49,790
can also or sorry they can instead be

00:01:47,250 --> 00:01:52,680
could be completely separate code bases

00:01:49,790 --> 00:01:53,909
which makes the maintainer ship of

00:01:52,680 --> 00:01:56,310
software much easier

00:01:53,909 --> 00:02:00,270
it also can make the contribution of

00:01:56,310 --> 00:02:02,040
software much easier and then finally

00:02:00,270 --> 00:02:06,479
plugin oriented programming has begun to

00:02:02,040 --> 00:02:08,940
be adopted by the fun to project and by

00:02:06,479 --> 00:02:12,569
some of the tools instead of gen 2 so

00:02:08,940 --> 00:02:13,800
despite it being a very young paradigm

00:02:12,569 --> 00:02:15,680
and project we

00:02:13,800 --> 00:02:18,930
are already starting to see some

00:02:15,680 --> 00:02:24,090
adoption and so Daniel Robbins the

00:02:18,930 --> 00:02:27,510
creator of Gentoo and fun - recently

00:02:24,090 --> 00:02:29,430
said to me plugin oriented programming

00:02:27,510 --> 00:02:31,590
is becoming a virus because it's taking

00:02:29,430 --> 00:02:34,740
over my code and killing off weak

00:02:31,590 --> 00:02:36,480
patterns I have a lot of code that sort

00:02:34,740 --> 00:02:38,850
of reads its potential with just modules

00:02:36,480 --> 00:02:42,900
and classes and it was just sitting

00:02:38,850 --> 00:02:44,850
there waiting for something like this as

00:02:42,900 --> 00:02:46,350
I continued to develop and work on

00:02:44,850 --> 00:02:50,670
plugin oriented programming these

00:02:46,350 --> 00:02:52,560
scenarios really emboldened me and made

00:02:50,670 --> 00:02:56,280
me want to continue developing this

00:02:52,560 --> 00:02:58,170
paradigm well I should start by saying

00:02:56,280 --> 00:02:59,970
that I'm currently presenting an

00:02:58,170 --> 00:03:03,030
alternative programming paradigm that's

00:02:59,970 --> 00:03:04,530
an incredibly bold thing to say and so I

00:03:03,030 --> 00:03:06,780
want to start this presentation by

00:03:04,530 --> 00:03:09,630
talking a little bit about very very

00:03:06,780 --> 00:03:12,270
briefly a little bit about the history

00:03:09,630 --> 00:03:13,770
of programming paradigms when we look at

00:03:12,270 --> 00:03:16,110
programming paradigms they really

00:03:13,770 --> 00:03:18,060
started in a way to express mathematics

00:03:16,110 --> 00:03:20,640
this is where we end up with programming

00:03:18,060 --> 00:03:22,050
paradigms particularly such as

00:03:20,640 --> 00:03:25,640
procedural and functional programming

00:03:22,050 --> 00:03:27,750
and these paradigms

00:03:25,640 --> 00:03:29,730
begin to be used not just for

00:03:27,750 --> 00:03:33,120
mathematics in the early early days of

00:03:29,730 --> 00:03:35,310
software but also in the development of

00:03:33,120 --> 00:03:37,830
some of these foundational pieces of

00:03:35,310 --> 00:03:40,950
software that we still conceptually have

00:03:37,830 --> 00:03:43,230
today like operating systems we go back

00:03:40,950 --> 00:03:45,239
and we still write operating system

00:03:43,230 --> 00:03:47,340
kernels using procedural software and

00:03:45,239 --> 00:03:50,610
procedural approaches albeit very

00:03:47,340 --> 00:03:53,220
modular approaches and then after the

00:03:50,610 --> 00:03:57,270
development of Unix

00:03:53,220 --> 00:04:01,800
in 1969 and its fulfillment one could

00:03:57,270 --> 00:04:03,150
say in the early 70s we ended up with a

00:04:01,800 --> 00:04:06,510
wonderful thing called the UNIX

00:04:03,150 --> 00:04:09,660
philosophy the UNIX philosophy states

00:04:06,510 --> 00:04:11,880
that the optimal way to make software

00:04:09,660 --> 00:04:13,200
into scale software from a human

00:04:11,880 --> 00:04:16,919
development perspective as well as a

00:04:13,200 --> 00:04:19,260
usage perspective is to be able to have

00:04:16,919 --> 00:04:22,200
lots of different pieces of software

00:04:19,260 --> 00:04:25,110
that can interoperate in a smooth way

00:04:22,200 --> 00:04:27,750
from a UNIX perspective that makes a lot

00:04:25,110 --> 00:04:29,160
of sense because everybody has this

00:04:27,750 --> 00:04:30,270
the same interface right it was

00:04:29,160 --> 00:04:33,570
everything everything was just running

00:04:30,270 --> 00:04:35,520
on a shell and so that philosophy was an

00:04:33,570 --> 00:04:38,450
expression of the shell but at the same

00:04:35,520 --> 00:04:42,500
time that UNIX philosophy is what is

00:04:38,450 --> 00:04:45,260
facilitated and allowed large-scale

00:04:42,500 --> 00:04:48,810
open-source software to be developed

00:04:45,260 --> 00:04:51,510
because it allows us to have lots of

00:04:48,810 --> 00:04:54,390
small software projects which can be

00:04:51,510 --> 00:04:56,670
developed by individuals or small teams

00:04:54,390 --> 00:05:00,060
which is as we've seen one of the most

00:04:56,670 --> 00:05:02,640
scalable ways to write software but then

00:05:00,060 --> 00:05:04,530
in the 90s we saw the rise of

00:05:02,640 --> 00:05:05,610
object-oriented programming now I don't

00:05:04,530 --> 00:05:06,690
want to come across as an

00:05:05,610 --> 00:05:08,400
object-oriented hey there

00:05:06,690 --> 00:05:13,290
object-oriented programming has many

00:05:08,400 --> 00:05:17,580
fantastic qualities but it was very much

00:05:13,290 --> 00:05:20,669
so in prominence it existed before the

00:05:17,580 --> 00:05:23,640
90s certainly but it rose in prominence

00:05:20,669 --> 00:05:27,090
largely because it's a really good way

00:05:23,640 --> 00:05:29,340
to write desktop gooeys it's a fantastic

00:05:27,090 --> 00:05:31,410
way to write gooeys and there that's

00:05:29,340 --> 00:05:33,930
what we wrote in the 90s

00:05:31,410 --> 00:05:37,950
lots of desktop gooeys and we had the

00:05:33,930 --> 00:05:40,350
rise of Windows and as such this view of

00:05:37,950 --> 00:05:46,220
creating a desktop became much more

00:05:40,350 --> 00:05:50,400
dominant and so as we started to create

00:05:46,220 --> 00:05:53,100
desktop software we started to see more

00:05:50,400 --> 00:05:55,740
and more very large monolithic pieces of

00:05:53,100 --> 00:05:59,419
software being developed well the modern

00:05:55,740 --> 00:06:02,640
era of software has diverged yet again

00:05:59,419 --> 00:06:04,740
but in doing so it's combined a lot of

00:06:02,640 --> 00:06:07,620
the concepts that we've had historically

00:06:04,740 --> 00:06:11,040
we still run our web and SAS

00:06:07,620 --> 00:06:15,360
applications very dominantly on Linux

00:06:11,040 --> 00:06:18,240
systems and our open source software and

00:06:15,360 --> 00:06:22,440
the many little components of software

00:06:18,240 --> 00:06:25,169
that we develop that we have now is much

00:06:22,440 --> 00:06:28,380
more the ecosystem that we work with

00:06:25,169 --> 00:06:30,720
much more so than the days of the 90s in

00:06:28,380 --> 00:06:32,850
the early 2000s when it was when the

00:06:30,720 --> 00:06:36,180
world was much more dominated by desktop

00:06:32,850 --> 00:06:38,640
software and so as such we've seen a

00:06:36,180 --> 00:06:40,950
resurgence in interest in programming

00:06:38,640 --> 00:06:41,639
paradigms because the way in which we

00:06:40,950 --> 00:06:44,129
develop

00:06:41,639 --> 00:06:46,860
where has changed in many respects and

00:06:44,129 --> 00:06:48,360
the teams and the mechanisms that we

00:06:46,860 --> 00:06:51,680
developed software has changed and

00:06:48,360 --> 00:06:55,379
especially in the days of covet the

00:06:51,680 --> 00:06:59,629
massive distribution of teams is a

00:06:55,379 --> 00:07:03,270
completely new thing in the sheer

00:06:59,629 --> 00:07:06,710
universality of it as we no longer even

00:07:03,270 --> 00:07:11,629
have people congregating in offices and

00:07:06,710 --> 00:07:14,669
and I just wish I had more whiteboards

00:07:11,629 --> 00:07:16,710
so we end up with problems that exist

00:07:14,669 --> 00:07:19,439
today problems that I would argue that

00:07:16,710 --> 00:07:22,740
object-oriented programming has a

00:07:19,439 --> 00:07:26,279
limited approach and appeal to problems

00:07:22,740 --> 00:07:29,789
where we run into scale issues with open

00:07:26,279 --> 00:07:33,620
source software development problems

00:07:29,789 --> 00:07:36,569
with pull requests and maintaining

00:07:33,620 --> 00:07:42,599
software projects for long periods of

00:07:36,569 --> 00:07:46,680
time and so what we end up with is a

00:07:42,599 --> 00:07:49,560
situation where like I was saying at the

00:07:46,680 --> 00:07:53,430
beginning we end up with a situation

00:07:49,560 --> 00:07:56,759
where the people who create very

00:07:53,430 --> 00:08:00,270
powerful platforms and them in a certain

00:07:56,759 --> 00:08:03,629
extent being chained to them through

00:08:00,270 --> 00:08:07,080
tasks of maintainer ship I'm endlessly

00:08:03,629 --> 00:08:10,069
amazed at how many open-source founders

00:08:07,080 --> 00:08:16,560
of large projects become bogged down and

00:08:10,069 --> 00:08:18,599
really emotionally and timewise burdened

00:08:16,560 --> 00:08:21,539
with the maintainer ship of these large

00:08:18,599 --> 00:08:23,699
projects and so on one hand I should say

00:08:21,539 --> 00:08:25,979
I love the contribution as much as the

00:08:23,699 --> 00:08:29,520
next guy but on the other hand when you

00:08:25,979 --> 00:08:33,089
receive anywhere from 30 to 200 pull

00:08:29,520 --> 00:08:35,969
requests every day it becomes a quite

00:08:33,089 --> 00:08:38,339
daunting challenge to keep on top of

00:08:35,969 --> 00:08:40,370
that workflow and it also turns into a

00:08:38,339 --> 00:08:43,769
disservice to the contributor the

00:08:40,370 --> 00:08:46,880
contributor comes in and for many many

00:08:43,769 --> 00:08:49,170
projects pull requests sit in the queue

00:08:46,880 --> 00:08:50,730
sometimes for months I've seen pull

00:08:49,170 --> 00:08:55,440
requests and some projects that for many

00:08:50,730 --> 00:08:57,240
years and so again it becomes very

00:08:55,440 --> 00:09:00,090
the next problem they run into is

00:08:57,240 --> 00:09:04,310
testing our software is becoming larger

00:09:00,090 --> 00:09:08,580
and more monolithic we're diverting from

00:09:04,310 --> 00:09:10,590
the UNIX philosophy in a big way and so

00:09:08,580 --> 00:09:12,690
monolithic software is harder and harder

00:09:10,590 --> 00:09:17,580
to test it's harder and harder to

00:09:12,690 --> 00:09:19,110
validate therefore if we want to make

00:09:17,580 --> 00:09:21,780
software that's easier to test and

00:09:19,110 --> 00:09:25,200
easier to develop at scale we would need

00:09:21,780 --> 00:09:27,600
to make things less monolithic in nature

00:09:25,200 --> 00:09:32,970
now we've started to make changes like

00:09:27,600 --> 00:09:36,180
this with things like kubernetes and

00:09:32,970 --> 00:09:38,010
micro services but the argument I'd like

00:09:36,180 --> 00:09:41,460
to present today is that we can go

00:09:38,010 --> 00:09:44,940
further and that we can create paradigms

00:09:41,460 --> 00:09:46,950
in which we don't have to be bound to

00:09:44,940 --> 00:09:50,160
software needing to have extremely

00:09:46,950 --> 00:09:52,590
complex run times to be executable but

00:09:50,160 --> 00:09:55,310
we can still make it natively pluggable

00:09:52,590 --> 00:09:57,810
valuable and lots of small points

00:09:55,310 --> 00:10:02,250
another thing I'd like to mention is a

00:09:57,810 --> 00:10:04,860
book that was written in 1974 and they

00:10:02,250 --> 00:10:07,410
used to make you read this in college so

00:10:04,860 --> 00:10:09,000
I mean I guess I've gotten old because a

00:10:07,410 --> 00:10:10,230
lot of the younger folks I talked to

00:10:09,000 --> 00:10:11,190
they would they were never told to read

00:10:10,230 --> 00:10:14,760
the mythical man-month

00:10:11,190 --> 00:10:17,040
the mythical man-month explains it was

00:10:14,760 --> 00:10:19,080
written to manageress in the 70s to say

00:10:17,040 --> 00:10:20,760
well you've been managing assembly line

00:10:19,080 --> 00:10:23,880
and now you have to manage software

00:10:20,760 --> 00:10:27,200
engineers it's very different a problem

00:10:23,880 --> 00:10:30,960
many managers still struggle with today

00:10:27,200 --> 00:10:32,670
and this book goes on to explain that on

00:10:30,960 --> 00:10:34,380
a production line if you have three

00:10:32,670 --> 00:10:37,470
people building something and you want

00:10:34,380 --> 00:10:40,490
the double output you hire three more

00:10:37,470 --> 00:10:43,230
people and make another production line

00:10:40,490 --> 00:10:45,810
but in software if you have a single

00:10:43,230 --> 00:10:47,460
software project and three people are

00:10:45,810 --> 00:10:48,870
writing in you want a double output and

00:10:47,460 --> 00:10:52,589
you hire three more people you're not

00:10:48,870 --> 00:10:55,440
going to double output and this is a

00:10:52,589 --> 00:10:58,710
problem which is still plagues us today

00:10:55,440 --> 00:11:01,740
but I think I would argue that again a

00:10:58,710 --> 00:11:03,240
change in paradigm approach what we're

00:11:01,740 --> 00:11:06,310
trying to do with plugin oriented

00:11:03,240 --> 00:11:09,610
programming is overcome that

00:11:06,310 --> 00:11:12,940
and the last thing I'd like to say is to

00:11:09,610 --> 00:11:18,250
talk a little bit about freedom freedom

00:11:12,940 --> 00:11:21,640
is what we made open-source for in so

00:11:18,250 --> 00:11:25,060
many ways we created open-source so that

00:11:21,640 --> 00:11:27,640
we would be able to have more freedom as

00:11:25,060 --> 00:11:30,730
software developers so that we would be

00:11:27,640 --> 00:11:36,070
able to have and share code but at the

00:11:30,730 --> 00:11:39,910
same time in many ways we haven't had a

00:11:36,070 --> 00:11:44,770
freedom from licenses in many ways we've

00:11:39,910 --> 00:11:47,740
seen ourselves be homeland to supporting

00:11:44,770 --> 00:11:50,620
software that we're not compensated for

00:11:47,740 --> 00:11:52,690
as software engineers we end up

00:11:50,620 --> 00:11:55,750
supporting software for businesses and

00:11:52,690 --> 00:11:58,720
companies and merging pull requests

00:11:55,750 --> 00:12:01,839
which don't drive necessarily drive the

00:11:58,720 --> 00:12:04,630
software vision forward but instead

00:12:01,839 --> 00:12:08,380
giving into giving into community or

00:12:04,630 --> 00:12:11,110
user pressures and then being bound to a

00:12:08,380 --> 00:12:13,930
pull request queue as opposed to having

00:12:11,110 --> 00:12:18,760
the freedom to create more which is so

00:12:13,930 --> 00:12:21,089
often what people who start open source

00:12:18,760 --> 00:12:26,380
projects want to do is create more

00:12:21,089 --> 00:12:29,140
software and so this is where plugin

00:12:26,380 --> 00:12:31,870
oriented programming tries to bring an

00:12:29,140 --> 00:12:34,089
answer to these challenges

00:12:31,870 --> 00:12:36,460
now I mentioned briefly at the beginning

00:12:34,089 --> 00:12:38,170
that plug annoying and programming is a

00:12:36,460 --> 00:12:41,440
programming is a very new programming

00:12:38,170 --> 00:12:43,420
fort alized programming paradigm I don't

00:12:41,440 --> 00:12:46,900
want to get in front of everybody and

00:12:43,420 --> 00:12:49,980
make it sound like I'm saying that we've

00:12:46,900 --> 00:12:53,260
never made plugins before heavens'

00:12:49,980 --> 00:12:56,020
plugins and modular programming has long

00:12:53,260 --> 00:12:58,450
been a very good way to approach

00:12:56,020 --> 00:13:00,160
software but play and oriented

00:12:58,450 --> 00:13:02,770
programming is a paradigm that

00:13:00,160 --> 00:13:06,640
formalizes plugins with the idea of

00:13:02,770 --> 00:13:08,890
saying maybe we could make a system so

00:13:06,640 --> 00:13:10,360
that we don't have to reinvent plug-ins

00:13:08,890 --> 00:13:12,940
every time we were at a piece of

00:13:10,360 --> 00:13:17,589
software maybe we can make a system

00:13:12,940 --> 00:13:19,390
where not just a certain aspect of the

00:13:17,589 --> 00:13:23,470
code is modular

00:13:19,390 --> 00:13:27,190
but what if the entire piece of software

00:13:23,470 --> 00:13:29,500
was fundamentally modular fundamentally

00:13:27,190 --> 00:13:34,209
pluggable but it wasn't only comprised

00:13:29,500 --> 00:13:38,260
entirely of plugins but also that that

00:13:34,209 --> 00:13:41,649
code itself was pluggable one with

00:13:38,260 --> 00:13:43,480
another and natively so they'd like the

00:13:41,649 --> 00:13:45,100
UNIX philosophy that said well

00:13:43,480 --> 00:13:47,380
everything is a text stream so as long

00:13:45,100 --> 00:13:49,089
as we input an output text streams any

00:13:47,380 --> 00:13:51,640
two pieces of software could merge

00:13:49,089 --> 00:13:55,990
together what if we had a programming

00:13:51,640 --> 00:13:59,200
paradigm and model where the mere use of

00:13:55,990 --> 00:14:02,709
the model created seamless

00:13:59,200 --> 00:14:05,459
interoperability with every other piece

00:14:02,709 --> 00:14:08,320
of software that followed that model

00:14:05,459 --> 00:14:10,630
then we would have not only software

00:14:08,320 --> 00:14:14,290
which is modular in and of its own right

00:14:10,630 --> 00:14:16,390
which is a wonderful benefit to have but

00:14:14,290 --> 00:14:21,670
the entire software stack that we're

00:14:16,390 --> 00:14:24,990
delivering becomes modular and modular

00:14:21,670 --> 00:14:29,140
with arbitrary other pieces of software

00:14:24,990 --> 00:14:32,860
and so we wanted to revive the UNIX

00:14:29,140 --> 00:14:36,339
philosophy the UNIX philosophy says do

00:14:32,860 --> 00:14:38,290
one thing and do it well which leads to

00:14:36,339 --> 00:14:41,649
your software components being small and

00:14:38,290 --> 00:14:46,510
concise easy to maintain easy to audit

00:14:41,649 --> 00:14:49,149
easy to secure easy to develop and easy

00:14:46,510 --> 00:14:52,209
to keep community rallied around because

00:14:49,149 --> 00:14:54,970
if your code base is only 5,000 lines of

00:14:52,209 --> 00:14:57,970
code you don't need to maintain a

00:14:54,970 --> 00:15:01,000
massive or request queue releases become

00:14:57,970 --> 00:15:04,839
easy tests become easy and fast for that

00:15:01,000 --> 00:15:06,430
code and as long as you follow rules

00:15:04,839 --> 00:15:09,839
which are well established today about

00:15:06,430 --> 00:15:11,740
maintaining public accessible interfaces

00:15:09,839 --> 00:15:13,750
then that code can maintain

00:15:11,740 --> 00:15:17,110
interoperability with other code in a

00:15:13,750 --> 00:15:19,600
seamless way so do one thing and do it

00:15:17,110 --> 00:15:22,000
well write programs that work well

00:15:19,600 --> 00:15:25,959
together so that they can interoperate

00:15:22,000 --> 00:15:27,640
with foreign software this again used to

00:15:25,959 --> 00:15:30,730
be easy when the only interaction

00:15:27,640 --> 00:15:31,650
between for and software happens to be a

00:15:30,730 --> 00:15:33,930
show

00:15:31,650 --> 00:15:36,529
but plugin oriented programming

00:15:33,930 --> 00:15:39,779
introduces a concept called app merging

00:15:36,529 --> 00:15:42,720
app merging means that any two pieces of

00:15:39,779 --> 00:15:45,200
software written using plugin oriented

00:15:42,720 --> 00:15:49,740
programming again can just be merged

00:15:45,200 --> 00:15:51,930
seamlessly together with only a couple

00:15:49,740 --> 00:15:53,970
of lines of code to denote that they

00:15:51,930 --> 00:15:57,270
that they exist in a single coherent

00:15:53,970 --> 00:16:01,400
unit and then the entire stack of those

00:15:57,270 --> 00:16:04,529
applications functionality can be merged

00:16:01,400 --> 00:16:07,080
sim subsequently the last of the three

00:16:04,529 --> 00:16:09,240
rules of the UNIX philosophy again was

00:16:07,080 --> 00:16:10,830
all software it can communicate with

00:16:09,240 --> 00:16:14,310
each other over text streams because

00:16:10,830 --> 00:16:16,800
text rings were Universal but the

00:16:14,310 --> 00:16:21,170
concept of app merging inside a plugin

00:16:16,800 --> 00:16:23,390
oriented programming gives us the idea

00:16:21,170 --> 00:16:26,430
that these pieces of software

00:16:23,390 --> 00:16:29,400
communicate with each other through a

00:16:26,430 --> 00:16:31,560
completely unified model that exists

00:16:29,400 --> 00:16:34,589
inside of the Sonic inside of the

00:16:31,560 --> 00:16:36,660
programming language itself meaning that

00:16:34,589 --> 00:16:40,140
it's always fast it's always efficient

00:16:36,660 --> 00:16:42,080
and we don't have to worry about a lot

00:16:40,140 --> 00:16:45,000
of the issues that we run into in

00:16:42,080 --> 00:16:48,630
creating interoperability between pieces

00:16:45,000 --> 00:16:50,850
of software which is I must say a very

00:16:48,630 --> 00:16:52,290
serious and legitimately difficult

00:16:50,850 --> 00:16:57,300
problem that we deal with today is

00:16:52,290 --> 00:16:58,950
software interoperability so I'm on the

00:16:57,300 --> 00:17:00,990
original author of a plugin oriented

00:16:58,950 --> 00:17:02,880
programming that the community around it

00:17:00,990 --> 00:17:05,760
is growing significantly which has been

00:17:02,880 --> 00:17:08,250
really exciting to watch we've now got

00:17:05,760 --> 00:17:11,040
in contributions and regular

00:17:08,250 --> 00:17:13,050
contributions into the plug-in oriented

00:17:11,040 --> 00:17:14,189
programming ecosystem despite the fact

00:17:13,050 --> 00:17:18,569
that again it was announced last

00:17:14,189 --> 00:17:20,730
November we've we've got closing in on

00:17:18,569 --> 00:17:24,209
about 50 people who are actively

00:17:20,730 --> 00:17:27,750
contributing which is really fast for

00:17:24,209 --> 00:17:31,140
for its youth so when I started working

00:17:27,750 --> 00:17:33,360
on plugin oriented programming I didn't

00:17:31,140 --> 00:17:36,929
start working on it with the intent of

00:17:33,360 --> 00:17:38,400
creating a programming paradigm for

00:17:36,929 --> 00:17:41,280
those of you who are aware my name is

00:17:38,400 --> 00:17:44,670
Thomas hatch I'm the original creator of

00:17:41,280 --> 00:17:45,480
salt and the salt stack company and salt

00:17:44,670 --> 00:17:48,929
is a

00:17:45,480 --> 00:17:52,169
very very widely used automation

00:17:48,929 --> 00:17:55,350
platform inside of salt I created a

00:17:52,169 --> 00:17:57,720
plug-in system because again plug-in

00:17:55,350 --> 00:17:59,580
designs are good designs we ended up

00:17:57,720 --> 00:18:01,710
using that plug-in system for a very

00:17:59,580 --> 00:18:04,890
significantly large portion of the code

00:18:01,710 --> 00:18:07,110
base inside of salt and so that plug-in

00:18:04,890 --> 00:18:09,090
system after a few years I took a look

00:18:07,110 --> 00:18:11,580
at it I thought it wouldn't be nice if I

00:18:09,090 --> 00:18:14,309
had a standalone plug-in system I'd love

00:18:11,580 --> 00:18:17,460
to be able to reuse this thing and so I

00:18:14,309 --> 00:18:19,080
wrote a standalone plug-in system and it

00:18:17,460 --> 00:18:21,179
looked a lot like the one inside of salt

00:18:19,080 --> 00:18:21,870
and I realized I didn't like it very

00:18:21,179 --> 00:18:24,960
much

00:18:21,870 --> 00:18:26,520
after using salts plug-in system for

00:18:24,960 --> 00:18:30,210
years of course we'd run into a number

00:18:26,520 --> 00:18:32,040
of limitations and challenges and so I

00:18:30,210 --> 00:18:35,700
thought well why don't I just have fun

00:18:32,040 --> 00:18:37,760
you know on the weekends and rework this

00:18:35,700 --> 00:18:42,179
model over and over and over again and

00:18:37,760 --> 00:18:44,610
so I would more or less for fun over and

00:18:42,179 --> 00:18:47,850
over again I kept creating this this

00:18:44,610 --> 00:18:50,520
plug-in system created four or five

00:18:47,850 --> 00:18:55,020
different versions of it until I got to

00:18:50,520 --> 00:18:58,850
the point where I realized that I had

00:18:55,020 --> 00:19:01,710
actually created a programming paradigm

00:18:58,850 --> 00:19:03,330
which was when I changed the name of

00:19:01,710 --> 00:19:08,940
what I've been working on to plug-in

00:19:03,330 --> 00:19:11,100
oriented programming and then released

00:19:08,940 --> 00:19:14,880
plug-in oriented programming last year

00:19:11,100 --> 00:19:17,760
we also started to use it at salt stack

00:19:14,880 --> 00:19:20,190
for a number of our newer projects so

00:19:17,760 --> 00:19:22,110
all of our new pieces of software that

00:19:20,190 --> 00:19:23,880
we're developing are based on plug-in

00:19:22,110 --> 00:19:27,210
oriented programming and we've seen

00:19:23,880 --> 00:19:30,059
significant benefit using it and so this

00:19:27,210 --> 00:19:32,400
isn't something that I just cook it up

00:19:30,059 --> 00:19:34,070
one night in the basement this is

00:19:32,400 --> 00:19:37,110
something that has gone undergone

00:19:34,070 --> 00:19:39,600
significant scrutiny a fair amount of

00:19:37,110 --> 00:19:42,540
people have reviewed it it's in

00:19:39,600 --> 00:19:45,090
production to be honest we've we've got

00:19:42,540 --> 00:19:47,890
pot projects in production at this point

00:19:45,090 --> 00:19:50,770
in thousands of data centers

00:19:47,890 --> 00:19:53,040
so this again this is this is something

00:19:50,770 --> 00:19:56,350
which has been growing underneath the

00:19:53,040 --> 00:19:58,810
under the hood and more or less silently

00:19:56,350 --> 00:20:01,870
for the last few years and again that we

00:19:58,810 --> 00:20:04,600
only really formalized very recently and

00:20:01,870 --> 00:20:07,660
so again it's really exciting to see it

00:20:04,600 --> 00:20:09,900
get to the point where what I'm able to

00:20:07,660 --> 00:20:14,950
to talk about what we're trying to do

00:20:09,900 --> 00:20:17,170
with plugin oriented programming so I've

00:20:14,950 --> 00:20:21,510
talked a lot about these high level

00:20:17,170 --> 00:20:24,640
concepts of plugin oriented programming

00:20:21,510 --> 00:20:27,840
but let me talk very briefly about how

00:20:24,640 --> 00:20:40,380
to create a plugin oriented project and

00:20:27,840 --> 00:20:45,010
how we can very easily step into using

00:20:40,380 --> 00:20:47,610
plugin oriented software and so let's

00:20:45,010 --> 00:20:47,610
see look

00:20:48,360 --> 00:20:52,680
there's when things get tricky as I

00:20:53,760 --> 00:20:58,440
there we go it's not difficult at all

00:20:59,550 --> 00:21:14,110
pull up a shell alright

00:21:08,070 --> 00:21:17,110
so let's say we want to make a new

00:21:14,110 --> 00:21:22,090
project using plugin oriented

00:21:17,110 --> 00:21:23,980
programming I'll call it papi because I

00:21:22,090 --> 00:21:26,620
I guess I'm not very creative with names

00:21:23,980 --> 00:21:34,840
today some some days I'm better than

00:21:26,620 --> 00:21:38,500
others Oh like an oriented programming

00:21:34,840 --> 00:21:42,550
is implemented in Python you can think

00:21:38,500 --> 00:21:44,590
of it similarly to C++ as an extension

00:21:42,550 --> 00:21:48,250
of c plugin oriented programming is

00:21:44,590 --> 00:21:49,630
based on python runs on python i would

00:21:48,250 --> 00:21:54,640
love to see it implemented in other

00:21:49,630 --> 00:21:56,950
languages but heck i'm a Python guy and

00:21:54,640 --> 00:21:58,780
it was a really really reasonable way to

00:21:56,950 --> 00:22:01,360
build the paradigm I think you do so

00:21:58,780 --> 00:22:05,049
much flexibility but so you can Pippin

00:22:01,360 --> 00:22:07,059
stall pop and whammo you've got plugin

00:22:05,049 --> 00:22:11,049
Orion programming it comes with a tool

00:22:07,059 --> 00:22:15,580
cop pops see now pop seed if we were in

00:22:11,049 --> 00:22:17,799
pop seed poppy we create a lovely little

00:22:15,580 --> 00:22:19,420
plugin oriented programming project

00:22:17,799 --> 00:22:21,429
takes care of a lot of the boilerplate

00:22:19,420 --> 00:22:24,640
for you gives you a set of top pie

00:22:21,429 --> 00:22:26,470
that's always gonna work and a few other

00:22:24,640 --> 00:22:41,110
things that we'll talk about as soon as

00:22:26,470 --> 00:22:44,410
I run this I can say alright execute my

00:22:41,110 --> 00:22:46,090
run dot pie the set up top pie gives you

00:22:44,410 --> 00:22:48,220
this little file called a run dot pie

00:22:46,090 --> 00:22:52,600
which contains all the code that needs

00:22:48,220 --> 00:22:54,370
to exist outside that isn't a plugin so

00:22:52,600 --> 00:22:57,059
we kind of have to bootstrap into a

00:22:54,370 --> 00:23:00,910
plugin environment but but don't worry

00:22:57,059 --> 00:23:02,440
bootstrapping into a fully plug plugin

00:23:00,910 --> 00:23:06,960
oriented programming environment takes

00:23:02,440 --> 00:23:09,820
it that much code it's not complicated

00:23:06,960 --> 00:23:14,190
and all and I'll dive in and explain

00:23:09,820 --> 00:23:18,340
this here in a moment but as you can see

00:23:14,190 --> 00:23:22,419
when we ran this it just spat out poppy

00:23:18,340 --> 00:23:25,750
works so what happened if we take a look

00:23:22,419 --> 00:23:29,590
at at our run dot pie here that we

00:23:25,750 --> 00:23:32,140
executed again pretty standard Python

00:23:29,590 --> 00:23:36,460
doesn't look too crazy we import pop dot

00:23:32,140 --> 00:23:38,260
hub we've got a start function which we

00:23:36,460 --> 00:23:41,400
of course are invoking down here and

00:23:38,260 --> 00:23:45,210
then we create an object called a hub

00:23:41,400 --> 00:23:48,700
inside a plugin or in a programming a

00:23:45,210 --> 00:23:54,000
hub the hub is you can think of it like

00:23:48,700 --> 00:23:56,679
a really big hierarchical self variable

00:23:54,000 --> 00:23:59,500
it gives you a palette to create a

00:23:56,679 --> 00:24:02,290
hierarchical structure for all of the

00:23:59,500 --> 00:24:04,630
plugins which you implement to be made

00:24:02,290 --> 00:24:07,330
available as well as all of the data

00:24:04,630 --> 00:24:10,870
relative to those plugins to be made

00:24:07,330 --> 00:24:14,760
available and so once we have the

00:24:10,870 --> 00:24:18,370
hobbit' the hub gets what we call plugin

00:24:14,760 --> 00:24:20,160
subsystems so to have plug-in design

00:24:18,370 --> 00:24:22,870
we've got to be able to have multiple

00:24:20,160 --> 00:24:25,210
multiple interfaces which contain

00:24:22,870 --> 00:24:26,590
different types of plugins and that's

00:24:25,210 --> 00:24:30,370
really how we end up breaking down

00:24:26,590 --> 00:24:32,679
plugin oriented code so when we create a

00:24:30,370 --> 00:24:35,620
hub it comes with a plug-in subsystem

00:24:32,679 --> 00:24:37,630
already called pop which gives us all of

00:24:35,620 --> 00:24:41,140
our tools which allows us to have

00:24:37,630 --> 00:24:43,210
Turtles all the way down and so if we

00:24:41,140 --> 00:24:45,820
want to add a new plug-in subsystem we

00:24:43,210 --> 00:24:48,280
would just say alright on the hub I'm

00:24:45,820 --> 00:24:52,690
going to reference my pop plug-in

00:24:48,280 --> 00:24:55,260
subsystem in there I'm going to

00:24:52,690 --> 00:25:00,550
reference the plug-in called sub and

00:24:55,260 --> 00:25:04,320
call the function add and then say give

00:25:00,550 --> 00:25:07,919
me a new plug-in subsystem named puppy

00:25:04,320 --> 00:25:10,330
as soon as we run this function a new

00:25:07,919 --> 00:25:13,030
plug-in subsystem has been made

00:25:10,330 --> 00:25:14,080
available onto the hub in this case

00:25:13,030 --> 00:25:16,000
called puppy

00:25:14,080 --> 00:25:17,380
of course that's the name of our project

00:25:16,000 --> 00:25:19,620
that's the name of the first plug-in

00:25:17,380 --> 00:25:23,550
subsystem that we add to it

00:25:19,620 --> 00:25:27,040
papí now has a plug-in called an int and

00:25:23,550 --> 00:25:29,380
initial the Anita PI where the anit

00:25:27,040 --> 00:25:32,950
plug-in is the initializer for a plug-in

00:25:29,380 --> 00:25:36,010
subsystem so similar to the construction

00:25:32,950 --> 00:25:38,860
and initialization of a class when we

00:25:36,010 --> 00:25:40,900
create a plug-in subsystem we can define

00:25:38,860 --> 00:25:44,590
how that plug-in subsystem is going to

00:25:40,900 --> 00:25:46,000
function inside of an initializer and

00:25:44,590 --> 00:25:48,610
we'll take a look at that initializer

00:25:46,000 --> 00:25:51,340
here in a moment and then we call the

00:25:48,610 --> 00:25:54,309
CLI function in that initializer so

00:25:51,340 --> 00:25:57,630
again what we're looking at is that all

00:25:54,309 --> 00:26:01,570
code inside of the paradigm is

00:25:57,630 --> 00:26:03,370
referenced hierarchically now there's a

00:26:01,570 --> 00:26:05,950
lot of benefits that come to rep to

00:26:03,370 --> 00:26:08,100
hierarchical representation of code and

00:26:05,950 --> 00:26:12,580
we'll we'll see how far I can get in my

00:26:08,100 --> 00:26:20,530
remaining 15 minutes and so let's take a

00:26:12,580 --> 00:26:22,310
look at at where this code is if we look

00:26:20,530 --> 00:26:24,620
at the code structure

00:26:22,310 --> 00:26:29,140
it's written in Python and so I have to

00:26:24,620 --> 00:26:33,770
extract a Python package first off and

00:26:29,140 --> 00:26:35,870
then my actual plug-in subsystem that I

00:26:33,770 --> 00:26:38,780
was talking about called poppies in this

00:26:35,870 --> 00:26:42,740
poppy directory inside of my Python

00:26:38,780 --> 00:26:44,690
plug-in and here's my init dot pi as I

00:26:42,740 --> 00:26:46,670
take a look at my Nick top pi there's

00:26:44,690 --> 00:26:49,040
the CLI function that I just referenced

00:26:46,670 --> 00:26:51,200
on the hub one of the things that's

00:26:49,040 --> 00:26:53,600
really nice about using a hierarchical

00:26:51,200 --> 00:26:57,830
model is that it's very easy to track

00:26:53,600 --> 00:27:01,310
where code is in your code base if I say

00:26:57,830 --> 00:27:05,810
like I just did hub papi down amid not

00:27:01,310 --> 00:27:10,280
CLI I know that there is an init plug-in

00:27:05,810 --> 00:27:13,340
which contains a function CLI inside of

00:27:10,280 --> 00:27:15,260
a papi subsystem and so it makes it

00:27:13,340 --> 00:27:18,020
easier to find the source of the code

00:27:15,260 --> 00:27:20,450
that I'm trying to call which is a

00:27:18,020 --> 00:27:23,510
traditional challenge for some people

00:27:20,450 --> 00:27:25,430
and object-oriented programming but so

00:27:23,510 --> 00:27:29,210
as you can see here and this is where we

00:27:25,430 --> 00:27:32,470
say print puppy works and therefore the

00:27:29,210 --> 00:27:34,490
software functions the software this

00:27:32,470 --> 00:27:37,730
application only I mean this is the

00:27:34,490 --> 00:27:39,770
entirety of the code inside of it but

00:27:37,730 --> 00:27:43,160
there's a number of other problems that

00:27:39,770 --> 00:27:47,450
have to be solved if we want to merge

00:27:43,160 --> 00:27:50,120
multiple pieces of software together so

00:27:47,450 --> 00:27:52,640
that a complete application stack can be

00:27:50,120 --> 00:27:55,430
fundamentally just merged into another

00:27:52,640 --> 00:27:57,640
application we also need to merge the

00:27:55,430 --> 00:28:01,270
initialization of that software stack

00:27:57,640 --> 00:28:04,640
the initialization of an application

00:28:01,270 --> 00:28:08,530
involves the setup of basic services as

00:28:04,640 --> 00:28:11,320
well as the ingestion of configuration

00:28:08,530 --> 00:28:13,880
so we need the ingestion of

00:28:11,320 --> 00:28:18,140
configuration options across multiple

00:28:13,880 --> 00:28:20,570
applications to be unified pop provides

00:28:18,140 --> 00:28:24,070
this so that you never have to write

00:28:20,570 --> 00:28:26,930
command-line parsing config file parsing

00:28:24,070 --> 00:28:28,670
operating system variable gathering that

00:28:26,930 --> 00:28:31,880
you never have to deal with that crap

00:28:28,670 --> 00:28:35,770
again okay and if you write an

00:28:31,880 --> 00:28:38,540
application then all of that

00:28:35,770 --> 00:28:42,770
information about how your application

00:28:38,540 --> 00:28:46,400
loads its configuration can be

00:28:42,770 --> 00:28:48,470
initialized by emerging application so

00:28:46,400 --> 00:28:49,340
let's take a quick look at how and how

00:28:48,470 --> 00:28:52,400
that works

00:28:49,340 --> 00:28:55,070
so again in a nutshell if I want to

00:28:52,400 --> 00:28:58,820
facilitate merging multiple applications

00:28:55,070 --> 00:29:01,460
together I have to allow config loading

00:28:58,820 --> 00:29:03,140
to be merged together so with with the

00:29:01,460 --> 00:29:08,030
code that you're looking at there if I

00:29:03,140 --> 00:29:11,350
say Python run help we see that this

00:29:08,030 --> 00:29:13,690
application has a significant amount of

00:29:11,350 --> 00:29:16,100
[Music]

00:29:13,690 --> 00:29:21,170
command line options already applied to

00:29:16,100 --> 00:29:25,880
it and so for each project we've got a

00:29:21,170 --> 00:29:29,870
file called the cop top by the cop top I

00:29:25,880 --> 00:29:33,140
allows us to add configuration to these

00:29:29,870 --> 00:29:37,460
systems and if we look at the

00:29:33,140 --> 00:29:39,380
configuration loading problem the

00:29:37,460 --> 00:29:41,360
configuration loading problem is a pain

00:29:39,380 --> 00:29:43,490
in the neck because you traditionally

00:29:41,360 --> 00:29:46,190
get configuration options from four

00:29:43,490 --> 00:29:48,410
locations and those locations are

00:29:46,190 --> 00:29:52,310
command line flags operating system

00:29:48,410 --> 00:29:54,200
variables defaults and config files they

00:29:52,310 --> 00:29:57,440
have to be prioritized in a specific

00:29:54,200 --> 00:30:01,940
order that order being command line

00:29:57,440 --> 00:30:07,280
flags then OS variables then config file

00:30:01,940 --> 00:30:09,680
options and then defaults well if we're

00:30:07,280 --> 00:30:11,660
using Python for instance you define

00:30:09,680 --> 00:30:14,540
your defaults with your command line

00:30:11,660 --> 00:30:17,090
flags which means that you then have to

00:30:14,540 --> 00:30:18,680
write a system that over that loads a

00:30:17,090 --> 00:30:20,780
config file after you've read your

00:30:18,680 --> 00:30:22,820
command line flags figures on which

00:30:20,780 --> 00:30:24,800
command line flags were passed in which

00:30:22,820 --> 00:30:27,980
were defaults which are necessarily

00:30:24,800 --> 00:30:30,860
exposed easily by hard parse and then

00:30:27,980 --> 00:30:32,420
only override the defaults and then

00:30:30,860 --> 00:30:34,160
after you've overwritten the defaults

00:30:32,420 --> 00:30:35,960
manually parse your operating system

00:30:34,160 --> 00:30:38,260
variables that you want to expose and

00:30:35,960 --> 00:30:40,490
then shove those into the right mix

00:30:38,260 --> 00:30:42,170
obviously that's a pain in the neck and

00:30:40,490 --> 00:30:44,770
something that frankly we should never

00:30:42,170 --> 00:30:46,800
have to do again as long as we live and

00:30:44,770 --> 00:30:49,980
so

00:30:46,800 --> 00:30:52,740
what we do inside the plugin oriented

00:30:49,980 --> 00:30:59,460
programming is that we are able to

00:30:52,740 --> 00:31:03,110
specify a configuration option as my

00:30:59,460 --> 00:31:04,980
again my super creative dreaming juices

00:31:03,110 --> 00:31:09,360
aren't flowing today I'm going to be

00:31:04,980 --> 00:31:23,130
using a lot of food bomb chuck bar all

00:31:09,360 --> 00:31:43,140
right let's do this so we can easily

00:31:23,130 --> 00:31:45,840
specify a command line system so we add

00:31:43,140 --> 00:31:47,640
it to the config which means that if any

00:31:45,840 --> 00:31:50,850
other application merges in this

00:31:47,640 --> 00:31:52,620
application the config options in config

00:31:50,850 --> 00:31:54,570
are going to be made available to the

00:31:52,620 --> 00:32:09,030
foreign application in this own

00:31:54,570 --> 00:32:13,010
applications own namespace and so now we

00:32:09,030 --> 00:32:13,010
can expose Bob on the command line there

00:32:13,430 --> 00:32:21,420
run help again and there it is which

00:32:18,930 --> 00:32:25,910
means that the addition of that parsing

00:32:21,420 --> 00:32:28,560
becomes very easy if for instance I

00:32:25,910 --> 00:32:31,820
wanted to also be able to pull it from

00:32:28,560 --> 00:32:31,820
an OS variable

00:32:41,680 --> 00:32:46,060
and now well we are also able to pull

00:32:44,170 --> 00:32:48,070
this configuration variable from an OS

00:32:46,060 --> 00:32:51,480
variable and it all shows up in a

00:32:48,070 --> 00:32:54,700
consistent place when I come back and

00:32:51,480 --> 00:32:56,200
take a look at this init dot pi you saw

00:32:54,700 --> 00:32:58,960
that there was one line in here that

00:32:56,200 --> 00:33:02,170
says hey can you can you load up the

00:32:58,960 --> 00:33:04,540
config if I wanted to merge multiple

00:33:02,170 --> 00:33:07,690
applications together and their config

00:33:04,540 --> 00:33:09,400
together when I say load here this is a

00:33:07,690 --> 00:33:11,680
list and I would just add another

00:33:09,400 --> 00:33:14,170
application right so I could just say

00:33:11,680 --> 00:33:18,040
you know I want to I don't have all the

00:33:14,170 --> 00:33:18,640
options from the corn program to or you

00:33:18,040 --> 00:33:20,800
know

00:33:18,640 --> 00:33:26,290
let's see what's another one there's

00:33:20,800 --> 00:33:28,510
item or another pop project it's Feist

00:33:26,290 --> 00:33:30,910
and then all of a sudden I've got the

00:33:28,510 --> 00:33:34,360
all the configuration options for those

00:33:30,910 --> 00:33:39,120
applications as well and then when those

00:33:34,360 --> 00:33:44,050
get loaded they get presented on our

00:33:39,120 --> 00:33:55,870
hierarchical namespace but I can come

00:33:44,050 --> 00:34:01,090
back and print an object that we add on

00:33:55,870 --> 00:34:03,820
the hub called opt and we can see that

00:34:01,090 --> 00:34:06,730
that object is abstracted as a

00:34:03,820 --> 00:34:10,150
dictionary it's a I mean it's it's set

00:34:06,730 --> 00:34:11,550
up as say immutable object because you

00:34:10,150 --> 00:34:14,740
know you shouldn't be mucking about with

00:34:11,550 --> 00:34:16,300
configure options but yep it's got a

00:34:14,740 --> 00:34:22,660
top-level dictionary called papi and

00:34:16,300 --> 00:34:27,160
there is Bob and if I run and it's true

00:34:22,660 --> 00:34:30,820
now so you've got config loading all

00:34:27,160 --> 00:34:33,790
right one of the next challenges that we

00:34:30,820 --> 00:34:37,510
went into with what I'm talking about

00:34:33,790 --> 00:34:39,910
this idea of lots of plugins and lots

00:34:37,510 --> 00:34:42,820
and and it lends itself against a lots

00:34:39,910 --> 00:34:45,280
of merging projects you come back and

00:34:42,820 --> 00:34:47,890
say oh man deploying that software is

00:34:45,280 --> 00:34:50,020
going to be a nightmare and then oh and

00:34:47,890 --> 00:34:52,669
you chose Python and we all know that

00:34:50,020 --> 00:34:55,730
deploying software with Python is a nice

00:34:52,669 --> 00:34:57,589
despite the fact that who doesn't love

00:34:55,730 --> 00:35:00,880
Python syntax I guess people who like

00:34:57,589 --> 00:35:04,940
brackets more than they should but that

00:35:00,880 --> 00:35:06,880
was a joke one of the challenges were

00:35:04,940 --> 00:35:09,950
again with these online presentations is

00:35:06,880 --> 00:35:17,049
normally I try and make people laugh but

00:35:09,950 --> 00:35:21,170
I can't see or hear anybody so so pop

00:35:17,049 --> 00:35:24,049
also ships with a system that allows you

00:35:21,170 --> 00:35:25,520
to distribute software thank you I

00:35:24,049 --> 00:35:35,950
appreciate that

00:35:25,520 --> 00:35:39,349
Oh Sam you're wonderful so so pop

00:35:35,950 --> 00:35:44,480
presents a system that strives to solve

00:35:39,349 --> 00:35:47,000
that problem now in the world of Python

00:35:44,480 --> 00:35:50,059
we've got the problem of writing code

00:35:47,000 --> 00:35:54,109
that attaches to a version of system

00:35:50,059 --> 00:35:56,569
Python dealing with dependencies and of

00:35:54,109 --> 00:36:01,849
course the paradigm I'm presenting again

00:35:56,569 --> 00:36:03,380
it really suggests that we should be

00:36:01,849 --> 00:36:08,000
able to have a lot of control over our

00:36:03,380 --> 00:36:09,650
dependencies and so there is a bed

00:36:08,000 --> 00:36:11,770
rather than thinking about I've got a

00:36:09,650 --> 00:36:15,049
development version of pop build on here

00:36:11,770 --> 00:36:17,740
so there's a tool that you can also

00:36:15,049 --> 00:36:22,069
install to extend pop called pop build

00:36:17,740 --> 00:36:26,660
pop build creates single binaries or

00:36:22,069 --> 00:36:30,680
single portable directories of Python

00:36:26,660 --> 00:36:32,420
projects I know that freezing a Python

00:36:30,680 --> 00:36:35,680
project is nothing new pop build

00:36:32,420 --> 00:36:37,730
actually leverages PI installer because

00:36:35,680 --> 00:36:40,220
after spending a lot of time researching

00:36:37,730 --> 00:36:44,540
this our conclusion was that those guys

00:36:40,220 --> 00:36:46,309
just did the best job but of course it's

00:36:44,540 --> 00:36:47,890
it's built on pop so it's pluggable so

00:36:46,309 --> 00:36:52,099
we could use something else if you want

00:36:47,890 --> 00:36:55,040
heavens plugins they're great any any

00:36:52,099 --> 00:36:58,130
component can always just be replaced so

00:36:55,040 --> 00:37:00,260
so pop build goes in and actually

00:36:58,130 --> 00:37:02,910
bypasses a bunch of the problems that

00:37:00,260 --> 00:37:06,510
you're an end to with PI installer

00:37:02,910 --> 00:37:09,750
meaning that so far with with more

00:37:06,510 --> 00:37:13,770
recent versions of pop build I'd say for

00:37:09,750 --> 00:37:15,599
the last two months I haven't been able

00:37:13,770 --> 00:37:19,710
to find the project that pop build can't

00:37:15,599 --> 00:37:21,660
just build and it doesn't work I'm

00:37:19,710 --> 00:37:23,520
strongly considering writing a piece of

00:37:21,660 --> 00:37:26,400
software that would basically pip

00:37:23,520 --> 00:37:28,980
install Python projects as single

00:37:26,400 --> 00:37:30,869
binaries because it just it just works

00:37:28,980 --> 00:37:34,230
yeah it's great

00:37:30,869 --> 00:37:37,349
which would get rid of I mean they're a

00:37:34,230 --> 00:37:41,130
little big don't get me wrong but but I

00:37:37,349 --> 00:37:44,460
get single Python binaries so I can do

00:37:41,130 --> 00:37:48,900
pop build and then just give it a name

00:37:44,460 --> 00:37:52,170
of my project here and the only thing

00:37:48,900 --> 00:37:55,619
that pop build needs to be able to build

00:37:52,170 --> 00:37:58,109
that single binary is it's gonna look

00:37:55,619 --> 00:38:01,470
for a requirements text file so your

00:37:58,109 --> 00:38:03,119
your Python dependencies are still

00:38:01,470 --> 00:38:06,390
managed the same way they've always been

00:38:03,119 --> 00:38:09,710
managed it's also going to look for that

00:38:06,390 --> 00:38:13,500
run dot pi file it needs an entry point

00:38:09,710 --> 00:38:14,910
so for a lot of projects I've needed to

00:38:13,500 --> 00:38:19,710
write an entry point most of them is two

00:38:14,910 --> 00:38:21,569
or three lines and one of the things I

00:38:19,710 --> 00:38:23,369
really like to see is getting a better

00:38:21,569 --> 00:38:26,400
integrated with setup tools and a few

00:38:23,369 --> 00:38:29,220
other Python build systems so that it

00:38:26,400 --> 00:38:33,089
can much more natively pickup write

00:38:29,220 --> 00:38:40,920
figure out what we're going to be doing

00:38:33,089 --> 00:38:42,960
for that for that single to

00:38:40,920 --> 00:38:45,109
auto-generate the entry point is one of

00:38:42,960 --> 00:38:48,480
the things that I'd like to get in there

00:38:45,109 --> 00:38:50,220
because again usually I'll download a

00:38:48,480 --> 00:38:52,619
Python project if I wanna make it into a

00:38:50,220 --> 00:38:55,589
single binary just download a Python

00:38:52,619 --> 00:38:58,380
project take a look at its entry point

00:38:55,589 --> 00:39:01,829
and then just write a little run dot pi

00:38:58,380 --> 00:39:05,039
that says import foo and then food

00:39:01,829 --> 00:39:11,029
function and run pot bill and you've

00:39:05,039 --> 00:39:11,029
done okay so now we've got this copy and

00:39:12,589 --> 00:39:20,970
we can run that thing and shoot mo works

00:39:18,799 --> 00:39:24,630
especially after I talked it up and

00:39:20,970 --> 00:39:27,180
everything this puppy is completely

00:39:24,630 --> 00:39:32,039
self-contained in that it has it has

00:39:27,180 --> 00:39:35,670
Python in there which means that yes the

00:39:32,039 --> 00:39:37,200
binary is big it's much bigger than what

00:39:35,670 --> 00:39:40,410
you get from a go binary I mean

00:39:37,200 --> 00:39:41,849
that'sthat's 20 Meg's there are a number

00:39:40,410 --> 00:39:45,599
of things that we can do to shrink that

00:39:41,849 --> 00:39:48,230
binary that we're still working on at

00:39:45,599 --> 00:39:50,190
the end of the day I strongly suspect

00:39:48,230 --> 00:39:54,150
that we should be able to have that

00:39:50,190 --> 00:40:02,640
binary size down to between about 7 and

00:39:54,150 --> 00:40:07,410
10 Meg's alright so that's a very very

00:40:02,640 --> 00:40:14,700
quick and brief introduction into using

00:40:07,410 --> 00:40:16,619
pop seed and into pop now there are a

00:40:14,700 --> 00:40:20,759
few more things that I want to mention

00:40:16,619 --> 00:40:23,670
this is really just a that this

00:40:20,759 --> 00:40:32,549
presentation is intended to say hey

00:40:23,670 --> 00:40:35,210
we've got a new way of we've we've got a

00:40:32,549 --> 00:40:38,160
new way of looking at writing code and

00:40:35,210 --> 00:40:41,819
45 minutes isn't enough time to

00:40:38,160 --> 00:40:45,930
introduce the breadth of a programming

00:40:41,819 --> 00:40:47,759
paradigm and to the extent that I

00:40:45,930 --> 00:40:49,859
haven't even been able to talk about

00:40:47,759 --> 00:40:53,190
vertical ab merging and horizontal ab

00:40:49,859 --> 00:40:55,400
merging and introduce you to a number of

00:40:53,190 --> 00:40:58,739
additional projects that are out there

00:40:55,400 --> 00:41:02,880
so normally I would talk about the rent

00:40:58,739 --> 00:41:04,999
project if I had more time because it's

00:41:02,880 --> 00:41:07,140
a really really easy way to introduce

00:41:04,999 --> 00:41:10,890
there's another project out there called

00:41:07,140 --> 00:41:14,609
corn which generates a list of just

00:41:10,890 --> 00:41:17,190
system attributes and a large list of

00:41:14,609 --> 00:41:20,400
system attributes across all all major

00:41:17,190 --> 00:41:23,170
Linux distributions Windows Mac and even

00:41:20,400 --> 00:41:26,119
Solaris and AIX

00:41:23,170 --> 00:41:32,749
as we've already received contributions

00:41:26,119 --> 00:41:34,309
for those which is interesting and talk

00:41:32,749 --> 00:41:35,869
to you about how vertical at merging

00:41:34,309 --> 00:41:37,849
means that one of those plug-in

00:41:35,869 --> 00:41:40,700
subsystems it's really a bucket that

00:41:37,849 --> 00:41:43,789
contains plugins which means that

00:41:40,700 --> 00:41:46,339
somebody can make their own project that

00:41:43,789 --> 00:41:49,190
contains plugins for a subsystem you

00:41:46,339 --> 00:41:51,319
made to extend that subsystems

00:41:49,190 --> 00:41:53,390
functionality which means that they

00:41:51,319 --> 00:41:55,880
don't have to wait for you to merge that

00:41:53,390 --> 00:41:59,119
pull request they can make their project

00:41:55,880 --> 00:42:01,729
put it up on pipe I install it and it

00:41:59,119 --> 00:42:03,710
Denikin and it just works you just turn

00:42:01,729 --> 00:42:06,559
it on and Wham

00:42:03,710 --> 00:42:10,759
they've extended the system because

00:42:06,559 --> 00:42:12,970
Logan's men which also means that when

00:42:10,759 --> 00:42:16,519
they publish their own code to

00:42:12,970 --> 00:42:18,140
vertically extend your code or you

00:42:16,519 --> 00:42:20,960
publish code to vertically extend

00:42:18,140 --> 00:42:24,170
something else's code you don't have to

00:42:20,960 --> 00:42:27,170
wait for a release you don't have to

00:42:24,170 --> 00:42:28,789
wait for a merge you can say my codes

00:42:27,170 --> 00:42:30,469
stable I know it works against these

00:42:28,789 --> 00:42:31,069
versions I'm going to publish it and

00:42:30,469 --> 00:42:35,569
we're good to go

00:42:31,069 --> 00:42:37,549
and and and hopefully it makes things

00:42:35,569 --> 00:42:41,690
much more fluid hopefully it makes

00:42:37,549 --> 00:42:44,210
things easier for contributors again to

00:42:41,690 --> 00:42:45,739
extend projects and they can do it

00:42:44,210 --> 00:42:47,450
without having to go through the

00:42:45,739 --> 00:42:50,920
gauntlet that a project has rightfully

00:42:47,450 --> 00:42:53,960
set up to defend itself from from

00:42:50,920 --> 00:42:56,529
introducing bad code but at the same

00:42:53,960 --> 00:42:58,940
time those contributors are able to

00:42:56,529 --> 00:43:00,739
function more autonomously and they're

00:42:58,940 --> 00:43:10,249
able to maintain their own code in the

00:43:00,739 --> 00:43:15,650
long run all right so I'm I believe I'm

00:43:10,249 --> 00:43:17,569
just about out of time and so the last

00:43:15,650 --> 00:43:19,430
thing that I'll say is if you're

00:43:17,569 --> 00:43:23,299
interested in learning more about plugin

00:43:19,430 --> 00:43:26,119
oriented programming you can go check

00:43:23,299 --> 00:43:31,160
out the repository it's currently on get

00:43:26,119 --> 00:43:33,259
labs my salt snack slash pop oh goodness

00:43:31,160 --> 00:43:35,400
I could have sworn I put this in this

00:43:33,259 --> 00:43:39,150
slide there is also a

00:43:35,400 --> 00:43:42,829
book online that explains the paradigm

00:43:39,150 --> 00:43:47,549
and gives more examples and and

00:43:42,829 --> 00:43:50,009
explanations around usage of pot its pot

00:43:47,549 --> 00:43:52,890
it's a place on prior sorry it's it's a

00:43:50,009 --> 00:43:56,130
project called Pop book and you can find

00:43:52,890 --> 00:44:00,660
that pop book dot read the docs dot I uh

00:43:56,130 --> 00:44:02,220
and so what we end up is in sin so you

00:44:00,660 --> 00:44:05,029
can go and check it out it's not a very

00:44:02,220 --> 00:44:08,339
long book I mean you could probably

00:44:05,029 --> 00:44:10,890
consume it in an afternoon it's about

00:44:08,339 --> 00:44:12,930
fifty pages but it goes over the

00:44:10,890 --> 00:44:14,730
fundamentals of how to think and pop I

00:44:12,930 --> 00:44:18,839
did more of the ideas about where it

00:44:14,730 --> 00:44:22,259
came from so thank you all for listening

00:44:18,839 --> 00:44:24,690
and coming again I I can't tell you how

00:44:22,259 --> 00:44:27,630
excited I am as I've seen this paradigm

00:44:24,690 --> 00:44:29,099
again we released it six months ago not

00:44:27,630 --> 00:44:32,359
even that five and a half months ago

00:44:29,099 --> 00:44:38,160
that's when we publicly announced pot

00:44:32,359 --> 00:44:40,410
yes that is it thank you Robert yeah so

00:44:38,160 --> 00:44:43,230
only only a few months ago and we're

00:44:40,410 --> 00:44:45,690
already getting a sizable amount of

00:44:43,230 --> 00:44:48,390
usage and it's it's interesting you

00:44:45,690 --> 00:44:49,980
wouldn't see it from activity on the on

00:44:48,390 --> 00:44:51,680
the repos itself which is actually a

00:44:49,980 --> 00:44:54,509
testament to the fact that it's working

00:44:51,680 --> 00:44:56,759
I'm just really excited how many times

00:44:54,509 --> 00:44:58,200
people are reaching out and more and

00:44:56,759 --> 00:45:00,480
more of these presentations people are

00:44:58,200 --> 00:45:05,400
attending and I'm hearing about more and

00:45:00,480 --> 00:45:11,509
more projects spitting up alright thank

00:45:05,400 --> 00:45:11,509
you all for listening to my talk I'll be

00:45:11,660 --> 00:45:18,200
I'll be wherever it is I'm supposed to

00:45:14,369 --> 00:45:22,140
be in this conference afterwards for Q&A

00:45:18,200 --> 00:45:24,920
I'll figure that out okay thank you

00:45:22,140 --> 00:45:24,920

YouTube URL: https://www.youtube.com/watch?v=cavGklX54B0


