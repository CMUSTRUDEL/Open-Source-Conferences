Title: Mike Schwartz - How to 2FA-enable Open Source Applications
Publication date: 2020-05-19
Playlist: Open Source 101 at Home 2020
Description: 
	How to 2FA-enable Open Source Applications

Presented at: Open Source 101 at Home 2020
Presented by: Mike Schwartz, Gluu

Abstract: Your organization loves open source tools like Wordpress, SuiteCRM, NextCloud, RocketChat, and OnlyOffice... but most of these tools are protected with plain old passwords. You want to use two-factor authentication... but how? In this workshop, you'll learn:

- Which 2FA technologies can be used without paying a license
- How to enable users to enroll and delete 2FA credentials
- How to configure open source applications to act as a federated relying party--delegating authentication to a central service
- How custom applications can act as a federated relying party

For more info: www.opensource101.com
Captions: 
	00:00:05,400 --> 00:00:12,870
[Music]

00:00:09,500 --> 00:00:18,390
thank you all things open for organizing

00:00:12,870 --> 00:00:26,330
this great event and let me I think I'm

00:00:18,390 --> 00:00:28,920
gonna move this screen to a different

00:00:26,330 --> 00:00:37,280
screen that way I can see what's going

00:00:28,920 --> 00:00:37,280
on um oops nope not that one

00:00:38,120 --> 00:00:52,710
so let's share slides here okay perfect

00:00:49,110 --> 00:00:55,770
oops wrong side okay let's get started

00:00:52,710 --> 00:00:58,430
welcome everyone thanks for joining I'm

00:00:55,770 --> 00:01:03,809
Mike Schwartz I'm the founder and CEO of

00:00:58,430 --> 00:01:07,320
glue a Identity and Access Management so

00:01:03,809 --> 00:01:10,860
open to our software startup I am also

00:01:07,320 --> 00:01:11,570
the author of a book called securing the

00:01:10,860 --> 00:01:14,430
perimeter

00:01:11,570 --> 00:01:18,049
published by a press or a proced last

00:01:14,430 --> 00:01:22,140
year with my co-author machi maha lock

00:01:18,049 --> 00:01:26,549
it's about how you use open source

00:01:22,140 --> 00:01:28,939
software for access management and it

00:01:26,549 --> 00:01:33,360
features a lot of different tools

00:01:28,939 --> 00:01:36,360
plugins libraries and and where we need

00:01:33,360 --> 00:01:38,369
an IDP the glue server of course so it's

00:01:36,360 --> 00:01:42,090
a good place to start if you want to

00:01:38,369 --> 00:01:45,390
learn about LDAP or Sam alluro auth or

00:01:42,090 --> 00:01:47,600
open ID or proxying or two-factor

00:01:45,390 --> 00:01:51,090
authentication or Identity Management

00:01:47,600 --> 00:01:54,659
eat there's about 10 chapters each

00:01:51,090 --> 00:01:59,790
chapter is half theory and half examples

00:01:54,659 --> 00:02:02,909
so what else I'm also the host of a

00:01:59,790 --> 00:02:06,180
podcast called open source underdogs and

00:02:02,909 --> 00:02:09,750
if you're interested in learning more

00:02:06,180 --> 00:02:12,450
about how what is the business model

00:02:09,750 --> 00:02:15,000
behind open source

00:02:12,450 --> 00:02:18,390
startups or open-source software

00:02:15,000 --> 00:02:20,730
startups in particular you can go to the

00:02:18,390 --> 00:02:25,739
website open-source underdogs com

00:02:20,730 --> 00:02:27,629
it's on stitcher and blow the iTunes and

00:02:25,739 --> 00:02:29,730
the Google Play Store and just about

00:02:27,629 --> 00:02:32,190
ever ever every podcast platform out

00:02:29,730 --> 00:02:36,000
there and I found it's been really

00:02:32,190 --> 00:02:39,690
helpful for me to really get a more of a

00:02:36,000 --> 00:02:41,340
vocabulary about how to use open source

00:02:39,690 --> 00:02:45,510
and how to talk to business people about

00:02:41,340 --> 00:02:49,400
open source so the topic of today's

00:02:45,510 --> 00:02:52,860
discussion is two-factor authentication

00:02:49,400 --> 00:02:57,840
everyone it knows how terrible passwords

00:02:52,860 --> 00:03:01,470
are this even even former presidents are

00:02:57,840 --> 00:03:03,420
suggesting that you should use you know

00:03:01,470 --> 00:03:07,799
better types of authentic digital

00:03:03,420 --> 00:03:09,900
authentication then passwords so in the

00:03:07,799 --> 00:03:13,260
in this in this talk what I what I want

00:03:09,900 --> 00:03:15,599
to do is is provide it an overview of

00:03:13,260 --> 00:03:19,620
two-factor authentication technologies

00:03:15,599 --> 00:03:24,959
sort of mine mine view of 2fa let's say

00:03:19,620 --> 00:03:28,170
and then really move into specifically

00:03:24,959 --> 00:03:30,359
some of the challenges around two-factor

00:03:28,170 --> 00:03:34,880
authentication or rolling out two-factor

00:03:30,359 --> 00:03:40,139
authentication and then some overview of

00:03:34,880 --> 00:03:42,540
how to use open ID and sam'l t2

00:03:40,139 --> 00:03:46,920
centralized on the management of

00:03:42,540 --> 00:03:48,989
two-factor authentication so let me

00:03:46,920 --> 00:03:51,660
let's just the I just want to do some

00:03:48,989 --> 00:03:55,230
level setting at first there's some

00:03:51,660 --> 00:03:59,430
confusion about multi factor versus

00:03:55,230 --> 00:04:01,139
multi step authentication and in a lot

00:03:59,430 --> 00:04:02,700
of my examples I use Google because I

00:04:01,139 --> 00:04:07,109
think Google does a really good job at

00:04:02,700 --> 00:04:09,120
this and so you know in the old days we

00:04:07,109 --> 00:04:11,160
used to think about two-factor

00:04:09,120 --> 00:04:15,329
authentication so if you if you had a

00:04:11,160 --> 00:04:18,060
device maybe an RSA SecurID token you

00:04:15,329 --> 00:04:20,250
might put in a pin in the password field

00:04:18,060 --> 00:04:22,560
maybe you entered you username and then

00:04:20,250 --> 00:04:25,020
in the password field you'd enter a pin

00:04:22,560 --> 00:04:25,810
number plus the code that was displaying

00:04:25,020 --> 00:04:28,690
on

00:04:25,810 --> 00:04:30,970
on the on the physical token so it was

00:04:28,690 --> 00:04:33,910
two factors because the the pin number

00:04:30,970 --> 00:04:35,919
was something you know and the and the

00:04:33,910 --> 00:04:38,830
token number was sort of something you

00:04:35,919 --> 00:04:42,430
had and so those two together are two

00:04:38,830 --> 00:04:44,500
factor um and but it was done as a one

00:04:42,430 --> 00:04:47,470
step authentication so you put in your

00:04:44,500 --> 00:04:49,960
user name and then in the password you

00:04:47,470 --> 00:04:52,950
put in the pin plus the token and so it

00:04:49,960 --> 00:04:57,419
was a two-factor one step authentication

00:04:52,950 --> 00:05:00,640
today in modern strong authentication

00:04:57,419 --> 00:05:03,460
strategies a lot of times you'll see a

00:05:00,640 --> 00:05:05,560
multi step authentication workflow and

00:05:03,460 --> 00:05:08,530
and Google's a perfect example of this

00:05:05,560 --> 00:05:10,570
so in step one they don't even ask you

00:05:08,530 --> 00:05:12,610
for your password they just ask you for

00:05:10,570 --> 00:05:14,710
your username that's called identify our

00:05:12,610 --> 00:05:18,190
first authentication and that's a really

00:05:14,710 --> 00:05:21,520
good pattern to emulate just by having

00:05:18,190 --> 00:05:22,900
the user enter their username and hit

00:05:21,520 --> 00:05:24,760
submit you're getting a lot of

00:05:22,900 --> 00:05:26,979
contextual information you're finding

00:05:24,760 --> 00:05:28,060
out IP address you're finding out you

00:05:26,979 --> 00:05:31,900
know you from there you can go to

00:05:28,060 --> 00:05:34,630
geolocation you can look at you know all

00:05:31,900 --> 00:05:37,630
sorts of contextual variables I've heard

00:05:34,630 --> 00:05:41,320
Google tracks 50-plus like contextual

00:05:37,630 --> 00:05:43,960
variables about authentication so I'm in

00:05:41,320 --> 00:05:46,630
step two Google says okay give me your

00:05:43,960 --> 00:05:49,120
password so this is the second form that

00:05:46,630 --> 00:05:51,960
they're presenting and then in Step

00:05:49,120 --> 00:05:54,610
three they asked me for a strong

00:05:51,960 --> 00:06:00,570
Authenticator you know in this case in

00:05:54,610 --> 00:06:03,940
this slide I'm using my my phyto token

00:06:00,570 --> 00:06:06,640
but but the idea though is that the more

00:06:03,940 --> 00:06:09,580
times the more you know pages you can

00:06:06,640 --> 00:06:12,070
put a user through the more chances it

00:06:09,580 --> 00:06:13,419
gives you to do fraud detection and to

00:06:12,070 --> 00:06:16,320
look at the whole context of the

00:06:13,419 --> 00:06:19,000
authentication so I would say that a

00:06:16,320 --> 00:06:23,860
one-step two-factor authentication is

00:06:19,000 --> 00:06:25,890
not as secure as a 2-step two-factor

00:06:23,860 --> 00:06:27,960
authentication

00:06:25,890 --> 00:06:30,180
this has some deployment considerations

00:06:27,960 --> 00:06:32,970
also because if you're thinking about a

00:06:30,180 --> 00:06:35,400
clustered authentication solution you

00:06:32,970 --> 00:06:38,190
have to remember that this say the same

00:06:35,400 --> 00:06:40,200
the server that processes step one might

00:06:38,190 --> 00:06:42,870
not process step two so there can some

00:06:40,200 --> 00:06:46,650
considerations around deployment but in

00:06:42,870 --> 00:06:49,260
general I think user experience has

00:06:46,650 --> 00:06:53,630
improved and security is improved with

00:06:49,260 --> 00:06:57,930
multi step authentication workflows so

00:06:53,630 --> 00:06:59,760
sometimes people forget that when you're

00:06:57,930 --> 00:07:02,310
talking about two factors you're

00:06:59,760 --> 00:07:04,560
actually talking about two factors that

00:07:02,310 --> 00:07:07,560
are in different categories so for

00:07:04,560 --> 00:07:10,320
example if you think about a mobile

00:07:07,560 --> 00:07:12,480
authentication maybe there's a push

00:07:10,320 --> 00:07:14,130
notification and maybe there's a

00:07:12,480 --> 00:07:16,680
cryptographic challenge response

00:07:14,130 --> 00:07:20,370
those are both something that you have

00:07:16,680 --> 00:07:21,750
so in order to be two factors according

00:07:20,370 --> 00:07:25,110
to the the NIST

00:07:21,750 --> 00:07:27,060
863 definition they have to be two

00:07:25,110 --> 00:07:31,560
different categories so but you know

00:07:27,060 --> 00:07:34,440
cognitive plus biometric plus you know

00:07:31,560 --> 00:07:35,970
possession of something most people know

00:07:34,440 --> 00:07:41,040
that something you have something you

00:07:35,970 --> 00:07:44,370
are something you know so some quick

00:07:41,040 --> 00:07:45,720
notes about passwords I think that you

00:07:44,370 --> 00:07:48,180
know everyone says passwords are

00:07:45,720 --> 00:07:50,790
terrible but I don't think that

00:07:48,180 --> 00:07:54,000
passwords are the problem themselves

00:07:50,790 --> 00:07:55,800
I think it's overuse of passwords it's

00:07:54,000 --> 00:07:59,760
the fact that we've we're hanging too

00:07:55,800 --> 00:08:03,780
much security on this old or on the

00:07:59,760 --> 00:08:06,660
single security strategy III compare

00:08:03,780 --> 00:08:11,690
this to you know any crop failure where

00:08:06,660 --> 00:08:11,690
you you don't have enough diversity so

00:08:11,720 --> 00:08:17,160
we move on to the next slide so in in

00:08:15,360 --> 00:08:19,470
security we have this thing called a

00:08:17,160 --> 00:08:21,480
threat model which helps you you know

00:08:19,470 --> 00:08:24,780
which encourages you to think like a

00:08:21,480 --> 00:08:26,460
hacker and to figure out you know what's

00:08:24,780 --> 00:08:30,150
the vulnerability of the security

00:08:26,460 --> 00:08:32,710
mechanism what's the impact what are the

00:08:30,150 --> 00:08:35,470
most likely attacks not and

00:08:32,710 --> 00:08:37,630
and so when you start thinking about the

00:08:35,470 --> 00:08:39,610
threat model for passwords I mean this

00:08:37,630 --> 00:08:43,200
is only a partial list I mean because

00:08:39,610 --> 00:08:45,970
because it's been such a monoculture

00:08:43,200 --> 00:08:50,410
hackers have found all sorts of ways to

00:08:45,970 --> 00:08:52,990
attack passwords they can you know snoop

00:08:50,410 --> 00:08:56,230
the passwords they can trick you to

00:08:52,990 --> 00:08:58,990
enter the passwords in their site you

00:08:56,230 --> 00:09:00,520
know there's the side channel attack you

00:08:58,990 --> 00:09:03,790
know that's in the physical world where

00:09:00,520 --> 00:09:06,580
I find your yellow sticky note there's

00:09:03,790 --> 00:09:08,890
all sorts of you know the list of

00:09:06,580 --> 00:09:10,840
different ways that you can get these

00:09:08,890 --> 00:09:13,120
passwords you know just goes on and on

00:09:10,840 --> 00:09:16,710
so the attack surface area of passwords

00:09:13,120 --> 00:09:20,500
is really high but I would argue that

00:09:16,710 --> 00:09:22,360
it's not really that the passwords

00:09:20,500 --> 00:09:25,180
themselves or that let's just say

00:09:22,360 --> 00:09:27,880
generically cognitive authentication

00:09:25,180 --> 00:09:30,070
mechanisms generically are really bad

00:09:27,880 --> 00:09:31,930
it's just that if we rely on them by

00:09:30,070 --> 00:09:34,060
themselves then they're really

00:09:31,930 --> 00:09:38,170
problematic so if we can actually

00:09:34,060 --> 00:09:41,080
combine these cognitive authentication

00:09:38,170 --> 00:09:43,330
strategy with something else we can

00:09:41,080 --> 00:09:46,660
really greatly improve security and

00:09:43,330 --> 00:09:50,980
that's what TFA is all about so what are

00:09:46,660 --> 00:09:53,860
our other options so biometric is I

00:09:50,980 --> 00:09:56,140
think a lot of people love the idea of

00:09:53,860 --> 00:10:00,300
biometric because the usability so good

00:09:56,140 --> 00:10:03,910
I can never forget my fingerprint and

00:10:00,300 --> 00:10:07,810
it's fast the sensors are getting more

00:10:03,910 --> 00:10:11,290
better all the time so a lot of people

00:10:07,810 --> 00:10:14,650
think that that that biometric

00:10:11,290 --> 00:10:16,330
authentication is the Silver Bullet my

00:10:14,650 --> 00:10:18,730
feeling is is that there's no silver

00:10:16,330 --> 00:10:22,630
bullet authentication we want all the

00:10:18,730 --> 00:10:24,550
strategies at our disposal the some of

00:10:22,630 --> 00:10:27,450
the challenges with biometric is that

00:10:24,550 --> 00:10:30,280
your face is not a secret

00:10:27,450 --> 00:10:33,160
so whereas your passwords a secret your

00:10:30,280 --> 00:10:37,840
face is all over the place especially in

00:10:33,160 --> 00:10:39,370
these days of social media and even your

00:10:37,840 --> 00:10:41,080
fingerprint might not be a secret you

00:10:39,370 --> 00:10:43,720
might leave it somewhere so there's

00:10:41,080 --> 00:10:46,420
always that issue a real challenge

00:10:43,720 --> 00:10:51,190
around biometric is there's a trade-off

00:10:46,420 --> 00:10:55,420
usability and accuracy so I can make it

00:10:51,190 --> 00:10:58,089
really really useable there but it would

00:10:55,420 --> 00:11:00,459
it means that like anytime I present my

00:10:58,089 --> 00:11:02,260
biometric it always passes but then

00:11:00,459 --> 00:11:04,300
there's a trade-off of accuracy if I

00:11:02,260 --> 00:11:07,209
make it really really accurate maybe

00:11:04,300 --> 00:11:13,240
have to keep retraining it and I get a

00:11:07,209 --> 00:11:16,000
lot of login failures so so anyway so I

00:11:13,240 --> 00:11:18,720
think that you know biometric is one of

00:11:16,000 --> 00:11:22,420
the one of the great tools we have but

00:11:18,720 --> 00:11:27,880
but it doesn't entirely solve the

00:11:22,420 --> 00:11:31,060
two-factor challenge so the human beings

00:11:27,880 --> 00:11:35,190
are really really unique basically every

00:11:31,060 --> 00:11:40,630
aspect of a human being is unique so

00:11:35,190 --> 00:11:44,470
fingerprints eyes ears the geometry of

00:11:40,630 --> 00:11:47,560
your four fingers how you type so

00:11:44,470 --> 00:11:49,449
there's a number there's a lot of you

00:11:47,560 --> 00:11:53,260
know different biometric sensors out

00:11:49,449 --> 00:11:55,420
there some of the new sensors are really

00:11:53,260 --> 00:11:57,459
interesting like some people would say

00:11:55,420 --> 00:11:59,350
oh it's a fingerprint sensor well

00:11:57,459 --> 00:12:01,390
there's a sonic sensor that's actually

00:11:59,350 --> 00:12:06,100
taking a 3d image of your whole thing er

00:12:01,390 --> 00:12:09,339
um so so we're seeing that and then some

00:12:06,100 --> 00:12:11,649
of these biometric sensors are combining

00:12:09,339 --> 00:12:14,410
to get multiple biometrics and that

00:12:11,649 --> 00:12:18,550
really helps improve the security quite

00:12:14,410 --> 00:12:20,829
a bit so we talked before about the

00:12:18,550 --> 00:12:23,860
authentication model and and one of the

00:12:20,829 --> 00:12:26,199
interesting questions you can ask your

00:12:23,860 --> 00:12:29,290
environment is the vendors of the

00:12:26,199 --> 00:12:34,149
authentication technology is to is to

00:12:29,290 --> 00:12:36,190
ask for the threat model now what about

00:12:34,149 --> 00:12:40,540
these older types of authentication a

00:12:36,190 --> 00:12:42,730
lot of people know OTP one-time password

00:12:40,540 --> 00:12:45,430
this is actually an IETF standard called

00:12:42,730 --> 00:12:50,319
oath there's two different types of OTP

00:12:45,430 --> 00:12:53,139
algorithms h.o.t P and T OTP now these

00:12:50,319 --> 00:12:57,850
things are still useful if you want to

00:12:53,139 --> 00:13:00,190
enter your strong authentication token

00:12:57,850 --> 00:13:04,000
over the phone using your touch-tone

00:13:00,190 --> 00:13:06,970
using DTMF then OTP is actually a pretty

00:13:04,000 --> 00:13:09,700
good option the sensor requirement for

00:13:06,970 --> 00:13:12,850
or the input requirement for OTP is

00:13:09,700 --> 00:13:15,820
really low hanging fruit it's the way

00:13:12,850 --> 00:13:19,870
that Oh T peas are generated is they you

00:13:15,820 --> 00:13:23,470
you hash and you throw out the letters

00:13:19,870 --> 00:13:29,370
and you keep the numbers so so it's it's

00:13:23,470 --> 00:13:29,370
actually it's still a useful technology

00:13:29,610 --> 00:13:34,870
the price of these OTP cards that have

00:13:32,680 --> 00:13:38,500
come way down the one that I'm showing

00:13:34,870 --> 00:13:40,540
on the screen the fee T on card can be

00:13:38,500 --> 00:13:42,190
there it can be when you press the

00:13:40,540 --> 00:13:43,840
button or you enter a PIN code if you

00:13:42,190 --> 00:13:45,610
enter the pin code you're adding with

00:13:43,840 --> 00:13:47,470
something you know to make it to factor

00:13:45,610 --> 00:13:49,900
you know those have come way down in

00:13:47,470 --> 00:13:52,420
price and it just you know ballparking

00:13:49,900 --> 00:13:53,740
it they used to be like $50 a card and

00:13:52,420 --> 00:13:57,760
they've come down to like you know

00:13:53,740 --> 00:14:00,190
closer to $1.00 per card so now one of

00:13:57,760 --> 00:14:02,230
the challenges with OTP and I think my

00:14:00,190 --> 00:14:03,760
next slide I talked about software OTP

00:14:02,230 --> 00:14:06,310
so if you don't want to buy one of these

00:14:03,760 --> 00:14:08,680
cards or one of these key fobs then you

00:14:06,310 --> 00:14:11,110
can load an app on the phone this is a

00:14:08,680 --> 00:14:13,300
picture of Google Authenticator which is

00:14:11,110 --> 00:14:17,830
open source and Apache 2 license so you

00:14:13,300 --> 00:14:19,810
could even include an OTP generation

00:14:17,830 --> 00:14:21,880
algorithm in your app if you're like or

00:14:19,810 --> 00:14:25,690
in your in your could write your own app

00:14:21,880 --> 00:14:28,420
or just fork it Sophos attenti cater is

00:14:25,690 --> 00:14:32,440
another free one that I use on my phone

00:14:28,420 --> 00:14:36,970
and so it's nice because I don't need a

00:14:32,440 --> 00:14:42,910
device I can actually scan a QR code to

00:14:36,970 --> 00:14:46,089
enroll to self-enroll my OTP and but the

00:14:42,910 --> 00:14:47,920
the one of the challenges with OTP on

00:14:46,089 --> 00:14:49,810
both the hardware tokens and the

00:14:47,920 --> 00:14:52,510
software tokens is that it has a three

00:14:49,810 --> 00:14:54,430
percent failure rate that means three

00:14:52,510 --> 00:14:56,710
percent of the time you're either going

00:14:54,430 --> 00:14:58,810
to enter the wrong code or the like

00:14:56,710 --> 00:15:01,000
maybe typo or the code is going to

00:14:58,810 --> 00:15:04,960
expire you know you'll miss the window

00:15:01,000 --> 00:15:07,770
and what you need to enter it and three

00:15:04,960 --> 00:15:10,180
you know three percent if you have

00:15:07,770 --> 00:15:12,640
thousands or tens of thousands of users

00:15:10,180 --> 00:15:13,630
or millions of users you know three

00:15:12,640 --> 00:15:15,730
percent

00:15:13,630 --> 00:15:17,530
times all those users times all the

00:15:15,730 --> 00:15:21,790
times they login actually adds up to

00:15:17,530 --> 00:15:27,520
real productivity costs or real ux user

00:15:21,790 --> 00:15:30,340
dissatisfaction so now a mobile push

00:15:27,520 --> 00:15:33,630
this is a screenshot of super glue which

00:15:30,340 --> 00:15:38,130
is clues open source mobile push

00:15:33,630 --> 00:15:38,130
notification there's a bunch of other

00:15:38,970 --> 00:15:45,010
mobile apps that are using software push

00:15:42,250 --> 00:15:47,080
notifications duo security is one of the

00:15:45,010 --> 00:15:50,050
best known ones owned by Cisco Microsoft

00:15:47,080 --> 00:15:53,410
has an Authenticator app and so these

00:15:50,050 --> 00:15:56,260
are using push tokens on the on the

00:15:53,410 --> 00:15:59,230
Google and Apple network to send these

00:15:56,260 --> 00:16:01,600
notifications and then we optionally

00:15:59,230 --> 00:16:02,850
have some type of cryptographic function

00:16:01,600 --> 00:16:07,630
behind it

00:16:02,850 --> 00:16:09,730
super glue for example uses phyto u2f so

00:16:07,630 --> 00:16:12,010
when you enroll your phone it generates

00:16:09,730 --> 00:16:14,110
a public key and private key and uploads

00:16:12,010 --> 00:16:17,290
the public key and when you get an

00:16:14,110 --> 00:16:19,390
authentication notification you and you

00:16:17,290 --> 00:16:21,480
hit approve it triggers a challenge

00:16:19,390 --> 00:16:26,110
response against the previously

00:16:21,480 --> 00:16:29,380
registered public key so it's it's

00:16:26,110 --> 00:16:30,960
adding push notifications plus you know

00:16:29,380 --> 00:16:34,360
plus some type of cryptographic

00:16:30,960 --> 00:16:36,850
verification and the usability is good

00:16:34,360 --> 00:16:38,920
users tend to like it one thing to keep

00:16:36,850 --> 00:16:41,620
in mind is that the phone must have

00:16:38,920 --> 00:16:43,870
network access so in disconnected

00:16:41,620 --> 00:16:46,120
you know network situations if a person

00:16:43,870 --> 00:16:48,340
is overseas or somewhere where they

00:16:46,120 --> 00:16:51,850
maybe don't have access to an internet

00:16:48,340 --> 00:16:56,320
or telco connection sometimes OTP might

00:16:51,850 --> 00:17:00,010
be a better option for them but but in

00:16:56,320 --> 00:17:03,000
general the the user experience of just

00:17:00,010 --> 00:17:05,709
hitting approve is a pretty good one

00:17:03,000 --> 00:17:08,140
another issue on this is that Google and

00:17:05,709 --> 00:17:11,319
Apple don't guarantee push notifications

00:17:08,140 --> 00:17:12,880
so it's not on a best efforts basis so

00:17:11,319 --> 00:17:15,569
if you don't get the push notification

00:17:12,880 --> 00:17:18,339
you can't really complain to anyone

00:17:15,569 --> 00:17:19,870
superglue has a fallback option where if

00:17:18,339 --> 00:17:22,600
you don't get the notification you can

00:17:19,870 --> 00:17:24,850
scan a QR code but anyway in general

00:17:22,600 --> 00:17:26,949
people love these things I also don't

00:17:24,850 --> 00:17:33,710
think these are the Silver Bullet either

00:17:26,949 --> 00:17:36,049
and okay so SMS OTP which is much

00:17:33,710 --> 00:17:39,169
maligned for good reason

00:17:36,049 --> 00:17:40,580
so delivering an OTP via SMS or voice

00:17:39,169 --> 00:17:43,250
for that matter

00:17:40,580 --> 00:17:45,260
you're basically trusting the phone

00:17:43,250 --> 00:17:48,020
number you're saying that control of

00:17:45,260 --> 00:17:53,059
this phone number indicates the person's

00:17:48,020 --> 00:17:56,660
identity and it just hasn't shown to be

00:17:53,059 --> 00:17:59,390
a great like control of the phone number

00:17:56,660 --> 00:18:01,850
is not necessarily a great indicator of

00:17:59,390 --> 00:18:04,220
identity and then the main reason is

00:18:01,850 --> 00:18:07,820
what they call the sim swap attack where

00:18:04,220 --> 00:18:10,159
you have a person who either says I lost

00:18:07,820 --> 00:18:14,150
my phone and they go into a phone you

00:18:10,159 --> 00:18:16,760
know a franchise you know phone mobile

00:18:14,150 --> 00:18:19,220
phone operator store most of those

00:18:16,760 --> 00:18:20,690
physical stores are not actually owned

00:18:19,220 --> 00:18:24,260
by the mobile operator they're

00:18:20,690 --> 00:18:26,000
franchised out to third parties so so

00:18:24,260 --> 00:18:28,460
you're trusting either somebody working

00:18:26,000 --> 00:18:30,919
at that third-party store so you walk in

00:18:28,460 --> 00:18:32,690
you say you lost your phone you know and

00:18:30,919 --> 00:18:34,789
they hand you a new phone when they move

00:18:32,690 --> 00:18:36,200
over your phone number but what if

00:18:34,789 --> 00:18:37,909
you're not really the person who lost

00:18:36,200 --> 00:18:40,640
your phone and you're targeting somebody

00:18:37,909 --> 00:18:42,710
so this type of attack can start with a

00:18:40,640 --> 00:18:46,039
compromised password maybe the hacker

00:18:42,710 --> 00:18:47,539
buys a a password on the dark web they

00:18:46,039 --> 00:18:51,140
figure out the mobile phone that's

00:18:47,539 --> 00:18:53,600
associated with it in some cases hackers

00:18:51,140 --> 00:18:56,659
have been able to actually convince the

00:18:53,600 --> 00:18:59,059
phone operator to move the phone number

00:18:56,659 --> 00:19:03,950
over not even by showing up in person

00:18:59,059 --> 00:19:06,890
but just by sort of socially hacking the

00:19:03,950 --> 00:19:09,070
call centre and I put baby crying in the

00:19:06,890 --> 00:19:13,159
background like people are really

00:19:09,070 --> 00:19:18,169
sympathetic and and so and hackers are

00:19:13,159 --> 00:19:21,830
gonna had exploiting these you know our

00:19:18,169 --> 00:19:26,059
our niceness and so so there's been a

00:19:21,830 --> 00:19:28,190
number of fraudulent attacks where

00:19:26,059 --> 00:19:31,549
basically you know if the hacker gets

00:19:28,190 --> 00:19:35,450
access to both your password and your

00:19:31,549 --> 00:19:37,340
mobile phone bad things can ensue they

00:19:35,450 --> 00:19:39,779
can get access to your bank they can

00:19:37,340 --> 00:19:42,779
start escalating so

00:19:39,779 --> 00:19:46,099
anyway so as I messed with that said as

00:19:42,779 --> 00:19:50,759
much as I like to malign all these these

00:19:46,099 --> 00:19:53,489
authentication mechanism option that you

00:19:50,759 --> 00:19:57,779
have and it might be a worthwhile risk

00:19:53,489 --> 00:20:00,690
mitigation versus doing nothing so so

00:19:57,779 --> 00:20:03,090
it's security is not about perfection

00:20:00,690 --> 00:20:06,330
it's about risk mitigation and if you

00:20:03,090 --> 00:20:08,070
can mitigate risk by sending an SMS OTP

00:20:06,330 --> 00:20:12,450
then it might be your best option

00:20:08,070 --> 00:20:14,009
so know one of the things I want to talk

00:20:12,450 --> 00:20:18,179
about is that the man-in-the-middle

00:20:14,009 --> 00:20:20,609
attack this is and all three of these

00:20:18,179 --> 00:20:23,869
mechanisms that I described the mobile

00:20:20,609 --> 00:20:27,779
push notifications the one-time password

00:20:23,869 --> 00:20:30,929
SMS they're all susceptible to this

00:20:27,779 --> 00:20:32,729
man-in-the-middle attack and the man in

00:20:30,929 --> 00:20:36,479
the middle attack normally starts with a

00:20:32,729 --> 00:20:40,019
phishing attack where we're emailing the

00:20:36,479 --> 00:20:42,509
hackers or emailing users and you know

00:20:40,019 --> 00:20:46,529
trying to get them to log in to a

00:20:42,509 --> 00:20:48,659
website in this case this is based on an

00:20:46,529 --> 00:20:51,389
actual attack the hacker the hack

00:20:48,659 --> 00:20:54,059
actually started with DNS where the

00:20:51,389 --> 00:20:56,849
hacker was able to hack into DNS and add

00:20:54,059 --> 00:21:01,289
their own DNS entry for their server in

00:20:56,849 --> 00:21:05,519
in the bank's DNS so you know if you see

00:21:01,289 --> 00:21:06,389
a URL and it says you know login 53 bank

00:21:05,519 --> 00:21:09,359
com

00:21:06,389 --> 00:21:12,330
you might not know log in 53 server but

00:21:09,359 --> 00:21:15,299
you know bang comm and the little you

00:21:12,330 --> 00:21:18,869
know icon is green so everything looks

00:21:15,299 --> 00:21:21,479
good so you go ahead and you log in now

00:21:18,869 --> 00:21:25,379
the the attacker is actually proxying

00:21:21,479 --> 00:21:27,450
the website so what you get is it looks

00:21:25,379 --> 00:21:30,659
exactly like the bank's website so you

00:21:27,450 --> 00:21:32,940
put in your username and password maybe

00:21:30,659 --> 00:21:35,219
they even asked you for an OTP maybe

00:21:32,940 --> 00:21:36,779
they push you a notification but this is

00:21:35,219 --> 00:21:40,229
all good because you're logging into the

00:21:36,779 --> 00:21:43,409
bank so you nothing looks wrong and then

00:21:40,229 --> 00:21:45,960
you log in and they actually proxy the

00:21:43,409 --> 00:21:47,249
the real content so you're seeing your

00:21:45,960 --> 00:21:48,919
balance you're seeing all your

00:21:47,249 --> 00:21:51,479
information and everything looks good

00:21:48,919 --> 00:21:53,970
but the problem is you're not really

00:21:51,479 --> 00:21:56,760
connected to the bank

00:21:53,970 --> 00:21:59,940
in this particular attack the hacker was

00:21:56,760 --> 00:22:02,940
waiting on a wire transfer in which case

00:21:59,940 --> 00:22:06,690
they were switching the recipient of the

00:22:02,940 --> 00:22:08,940
wire transfer and in this case the bank

00:22:06,690 --> 00:22:11,460
even sent a wire transfer notification

00:22:08,940 --> 00:22:13,760
to the person but the person said well I

00:22:11,460 --> 00:22:19,550
am doing a wire transfer so it's okay

00:22:13,760 --> 00:22:23,700
so this is a really dangerous attack and

00:22:19,550 --> 00:22:27,770
it can't be any any two-factor

00:22:23,700 --> 00:22:31,280
credential that uses an out-of-band

00:22:27,770 --> 00:22:34,980
mechanism can't protect you against it

00:22:31,280 --> 00:22:39,050
so the key is is that you want the web

00:22:34,980 --> 00:22:42,210
browser that you're using to verify that

00:22:39,050 --> 00:22:45,570
it's connected to a website that it

00:22:42,210 --> 00:22:49,410
knows and trusts so there's actually two

00:22:45,570 --> 00:22:53,460
technologies that can can mitigate this

00:22:49,410 --> 00:22:56,850
attack one of them is phyto and so phyto

00:22:53,460 --> 00:23:00,530
USB tokens were using a physical device

00:22:56,850 --> 00:23:05,820
plugged directly you know into the same

00:23:00,530 --> 00:23:07,770
server as as your browser is running in

00:23:05,820 --> 00:23:12,480
this case the browser and the key

00:23:07,770 --> 00:23:15,960
actually interact and and this

00:23:12,480 --> 00:23:18,780
interaction can't be proxied by a

00:23:15,960 --> 00:23:25,230
man-in-the-middle so they call us it's a

00:23:18,780 --> 00:23:27,330
phishing resistant credential let me see

00:23:25,230 --> 00:23:29,220
if I have okay so let me just jump ahead

00:23:27,330 --> 00:23:32,520
a little bit so the other the other

00:23:29,220 --> 00:23:35,310
phishing resistant credential or smart

00:23:32,520 --> 00:23:37,260
cards oh and that's why if you work for

00:23:35,310 --> 00:23:40,860
a government agency or other really

00:23:37,260 --> 00:23:43,110
security conscious organizations they

00:23:40,860 --> 00:23:45,840
might want you to use a smart card with

00:23:43,110 --> 00:23:48,600
mutual TLS again that's a connection

00:23:45,840 --> 00:23:52,140
from the browser to the server which

00:23:48,600 --> 00:23:53,520
cannot be proxied because the the man in

00:23:52,140 --> 00:23:57,350
the middle doesn't have access to the

00:23:53,520 --> 00:23:57,350
private key so

00:23:57,410 --> 00:24:03,440
so going back to the fight or tokens so

00:24:00,650 --> 00:24:05,390
a lot of you probably heard that there's

00:24:03,440 --> 00:24:08,390
a fighter there's there's a couple of

00:24:05,390 --> 00:24:10,880
phyto versions out there the fight oh

00:24:08,390 --> 00:24:16,610
the original tokens were fight Oh u2f

00:24:10,880 --> 00:24:19,480
tokens fight oh so this standard was

00:24:16,610 --> 00:24:21,980
brought to the w3c so there's a new

00:24:19,480 --> 00:24:27,220
standard called w3c web authentication

00:24:21,980 --> 00:24:30,200
and phyto 2 is actually a combination of

00:24:27,220 --> 00:24:33,770
w3c web authentication plus another

00:24:30,200 --> 00:24:36,860
protocol called c tap c tap is basically

00:24:33,770 --> 00:24:39,320
it enables reverse compatibility with

00:24:36,860 --> 00:24:41,000
phyto u2f tokens because we want to make

00:24:39,320 --> 00:24:45,590
sure all those people who bought those

00:24:41,000 --> 00:24:50,090
old tokens can still use them but phyto

00:24:45,590 --> 00:24:54,380
2 had some enhancements one of the

00:24:50,090 --> 00:24:57,740
enhancements is that it enables password

00:24:54,380 --> 00:24:59,810
list authentication or I should say not

00:24:57,740 --> 00:25:02,840
even password loss it enables user

00:24:59,810 --> 00:25:05,060
nameless authentication so you can use

00:25:02,840 --> 00:25:08,450
the credential as an identifier not just

00:25:05,060 --> 00:25:11,020
as an Authenticator also it has some

00:25:08,450 --> 00:25:14,870
built-in capabilities for biometric

00:25:11,020 --> 00:25:17,930
modalities so in the traditional phyto

00:25:14,870 --> 00:25:20,660
token and you have a button and the and

00:25:17,930 --> 00:25:22,370
you press the button to authenticate but

00:25:20,660 --> 00:25:28,370
what if instead of presenting the button

00:25:22,370 --> 00:25:32,750
you present your your fingerprint oh and

00:25:28,370 --> 00:25:35,090
this would add in biometric costs you

00:25:32,750 --> 00:25:38,720
know plus possession of or control of

00:25:35,090 --> 00:25:40,340
the key that got registered so phyto is

00:25:38,720 --> 00:25:42,800
a good thing we're seeing a lot of

00:25:40,340 --> 00:25:46,430
innovation in fight o fighters being

00:25:42,800 --> 00:25:49,850
built into devices so for example I have

00:25:46,430 --> 00:25:52,250
a pixel book and the pixel book actually

00:25:49,850 --> 00:25:55,130
has the fighter device built into it if

00:25:52,250 --> 00:25:57,230
I click touch the power button it's like

00:25:55,130 --> 00:26:00,710
pressing the button on on a fight o u2f

00:25:57,230 --> 00:26:02,060
token windows also has built-in phyto to

00:26:00,710 --> 00:26:11,160
into windows hello

00:26:02,060 --> 00:26:16,350
and so we're going implementation

00:26:11,160 --> 00:26:19,620
of phyto where you can actually you

00:26:16,350 --> 00:26:23,010
through bluetooth bind your phone as a

00:26:19,620 --> 00:26:27,000
phyto device so we're seeing that

00:26:23,010 --> 00:26:30,750
there's a lot of innovation in the phyto

00:26:27,000 --> 00:26:33,210
area this is a really great credential

00:26:30,750 --> 00:26:36,030
with a very low failure rate

00:26:33,210 --> 00:26:36,690
I mentioned OTP has a three percent

00:26:36,030 --> 00:26:38,760
failure rate

00:26:36,690 --> 00:26:41,850
phyto devices have close to a zero

00:26:38,760 --> 00:26:44,070
percent failure rate so the usability is

00:26:41,850 --> 00:26:47,460
great the security is great at smishing

00:26:44,070 --> 00:26:50,760
resistant and we're seeing more adoption

00:26:47,460 --> 00:26:53,240
of phyto technologies in a lot of

00:26:50,760 --> 00:26:56,760
different form factors and built in so

00:26:53,240 --> 00:27:00,690
we were bullish on fight oh I wish my

00:26:56,760 --> 00:27:03,600
bank would support fight oh if I feel

00:27:00,690 --> 00:27:06,660
like my car is more secure than my bank

00:27:03,600 --> 00:27:09,860
and I don't know why my house keys cost

00:27:06,660 --> 00:27:16,020
me like $10 a piece but I can't use a

00:27:09,860 --> 00:27:19,050
$10 key to secure all my money and okay

00:27:16,020 --> 00:27:20,820
so it says so so that not just I think

00:27:19,050 --> 00:27:23,220
it's worthwhile to just sort of give an

00:27:20,820 --> 00:27:25,470
overview where does two-factor

00:27:23,220 --> 00:27:28,500
authentication stand today so we can

00:27:25,470 --> 00:27:31,620
keep going on this there's I think um

00:27:28,500 --> 00:27:33,030
you know analysts in the industry are

00:27:31,620 --> 00:27:35,190
tracking like a hundred different

00:27:33,030 --> 00:27:38,340
technologies of two-factor

00:27:35,190 --> 00:27:40,410
authentication and so what what we what

00:27:38,340 --> 00:27:44,280
I've come to realize over the years is

00:27:40,410 --> 00:27:47,040
that it's not like we don't have any

00:27:44,280 --> 00:27:50,580
other ways to authenticate people other

00:27:47,040 --> 00:27:53,370
than passwords um you know having you

00:27:50,580 --> 00:27:55,110
know glues eleven years old and so I

00:27:53,370 --> 00:27:58,350
have spoken with a number of

00:27:55,110 --> 00:28:00,030
entrepreneurs who you know who basically

00:27:58,350 --> 00:28:02,430
approached me with the story is goes

00:28:00,030 --> 00:28:04,800
something like you know I solved the

00:28:02,430 --> 00:28:07,680
security password problem you know I

00:28:04,800 --> 00:28:10,110
figured out a new way to authenticate

00:28:07,680 --> 00:28:12,840
you know people using this you know

00:28:10,110 --> 00:28:16,580
mathematical algorithm or this you know

00:28:12,840 --> 00:28:21,510
technology and my responses is always

00:28:16,580 --> 00:28:24,750
well that's great but but we already

00:28:21,510 --> 00:28:27,740
have a lot of technologies that are

00:28:24,750 --> 00:28:30,840
a better security profile than passwords

00:28:27,740 --> 00:28:34,020
that's not a very high bar

00:28:30,840 --> 00:28:38,340
we even have technologies that have

00:28:34,020 --> 00:28:41,280
better usability so pressing a button on

00:28:38,340 --> 00:28:44,550
the token or maybe just hitting approve

00:28:41,280 --> 00:28:46,140
on my mobile phone is way better I don't

00:28:44,550 --> 00:28:49,920
know if you ever had to put in a

00:28:46,140 --> 00:28:52,920
password on your TV remote I mean that's

00:28:49,920 --> 00:28:55,160
a terrible user experience I don't think

00:28:52,920 --> 00:28:58,890
it gets any worse than that

00:28:55,160 --> 00:29:02,010
so so passwords are not that great for

00:28:58,890 --> 00:29:04,170
in terms of usability so deployability

00:29:02,010 --> 00:29:06,930
has really been the challenge how do

00:29:04,170 --> 00:29:08,790
organizations actually roll out two

00:29:06,930 --> 00:29:12,840
factor authentication and that's where I

00:29:08,790 --> 00:29:14,760
want to spend the rest of this talk this

00:29:12,840 --> 00:29:16,830
is way too small for you to see but you

00:29:14,760 --> 00:29:19,740
can look at it if you check out the

00:29:16,830 --> 00:29:22,310
slides later this is based on

00:29:19,740 --> 00:29:24,900
Microsoft's research and they sort of

00:29:22,310 --> 00:29:27,420
you know they they categorize different

00:29:24,900 --> 00:29:29,850
types of authentication technologies and

00:29:27,420 --> 00:29:32,550
it's like I serve a research report on

00:29:29,850 --> 00:29:36,570
it's a summary of other research reports

00:29:32,550 --> 00:29:40,410
so but it's a it's a really nice job

00:29:36,570 --> 00:29:41,720
that they did and they their conclusion

00:29:40,410 --> 00:29:45,090
was quite interesting

00:29:41,720 --> 00:29:47,430
while they said you know some some

00:29:45,090 --> 00:29:51,120
authentication technologies are more

00:29:47,430 --> 00:29:53,760
secure some are more usable but none are

00:29:51,120 --> 00:29:57,660
more deployable than passwords and

00:29:53,760 --> 00:30:01,470
that's really basically what is is is in

00:29:57,660 --> 00:30:05,970
the way here so what is at the heart of

00:30:01,470 --> 00:30:08,370
the deployability challenge and I would

00:30:05,970 --> 00:30:10,800
I would argue that there's there's two

00:30:08,370 --> 00:30:13,020
if there's two things we can focus on

00:30:10,800 --> 00:30:16,740
getting right we can really greatly

00:30:13,020 --> 00:30:22,500
improve the deploy ability of two-factor

00:30:16,740 --> 00:30:24,350
technology the first one is recovery you

00:30:22,500 --> 00:30:27,120
could say that two-factor authentication

00:30:24,350 --> 00:30:32,080
the Achilles heel of two-factor

00:30:27,120 --> 00:30:34,600
authentication is recovery if

00:30:32,080 --> 00:30:37,090
if I have a really secure front door and

00:30:34,600 --> 00:30:38,800
a really insecure back door then hackers

00:30:37,090 --> 00:30:42,640
are gonna go after the back door not the

00:30:38,800 --> 00:30:47,010
front door so so if I have a you know a

00:30:42,640 --> 00:30:51,010
really fancy mobile crypto technology

00:30:47,010 --> 00:30:54,040
but then I do SMS for reset then your

00:30:51,010 --> 00:30:58,360
security is SMS like well why bother

00:30:54,040 --> 00:31:01,980
with the crypto at all on the phone so

00:30:58,360 --> 00:31:04,630
that this is a this is a big issue

00:31:01,980 --> 00:31:07,600
you're only as good as the lowest common

00:31:04,630 --> 00:31:11,110
denominator of your reset mechanism and

00:31:07,600 --> 00:31:14,410
also there's been a gap in the industry

00:31:11,110 --> 00:31:18,450
on what is the right way to do this we

00:31:14,410 --> 00:31:20,740
know or how to reset passwords like

00:31:18,450 --> 00:31:22,600
consumers understand if I lost my

00:31:20,740 --> 00:31:25,270
password I go to the forgot password

00:31:22,600 --> 00:31:29,380
link it sends me an email I click on a

00:31:25,270 --> 00:31:31,840
link and I'm back-end but what is the

00:31:29,380 --> 00:31:34,420
what is the the right flow for the

00:31:31,840 --> 00:31:37,510
stronger credentials so this is

00:31:34,420 --> 00:31:40,450
something that I'll address the second

00:31:37,510 --> 00:31:43,770
issue has to do with the playability has

00:31:40,450 --> 00:31:47,950
to do with centralizing authentication

00:31:43,770 --> 00:31:51,280
so that you don't have to one-off

00:31:47,950 --> 00:31:55,120
integrate to factor out vacation into

00:31:51,280 --> 00:31:57,250
different apps now actually it's already

00:31:55,120 --> 00:31:59,620
been a best practice not to hard-code

00:31:57,250 --> 00:32:02,620
password authentication we don't want

00:31:59,620 --> 00:32:06,720
every app to hold its own password and

00:32:02,620 --> 00:32:13,030
ideally we don't even want every app to

00:32:06,720 --> 00:32:17,380
descent to see the password so so it's

00:32:13,030 --> 00:32:18,250
really in in in in security it's an

00:32:17,380 --> 00:32:22,750
anti-pattern

00:32:18,250 --> 00:32:25,060
to implicate to implement authentication

00:32:22,750 --> 00:32:27,400
code in your application the best

00:32:25,060 --> 00:32:29,710
practice is to use open standards for

00:32:27,400 --> 00:32:32,890
authentication for a federated identity

00:32:29,710 --> 00:32:35,590
like open ID connect and sam'l and so

00:32:32,890 --> 00:32:38,350
I'm going to dive into into that topic

00:32:35,590 --> 00:32:41,320
pretty deeply a little bit later too

00:32:38,350 --> 00:32:43,180
about how do you how do you use 2fa

00:32:41,320 --> 00:32:45,750
features when you're using Open ID

00:32:43,180 --> 00:32:45,750
connect and

00:32:45,879 --> 00:32:51,950
so good start I'm gonna start with the

00:32:49,850 --> 00:32:56,679
with I'm going to probably start and end

00:32:51,950 --> 00:32:56,679
with the with the two-factor credential

00:32:56,710 --> 00:33:02,899
issue but one one point that I like to

00:33:00,080 --> 00:33:06,470
make is that in order to do a good job

00:33:02,899 --> 00:33:08,960
of two-factor credential reset people

00:33:06,470 --> 00:33:12,769
need to have a to equally strong

00:33:08,960 --> 00:33:14,989
credentials and I like to show this

00:33:12,769 --> 00:33:17,149
picture this is a picture from the

00:33:14,989 --> 00:33:19,039
Sistine Chapel it's a parody in a

00:33:17,149 --> 00:33:21,619
picture of a Peter getting the keys and

00:33:19,039 --> 00:33:24,679
I like to point out that he's he's

00:33:21,619 --> 00:33:28,789
getting two keys so even even Peter

00:33:24,679 --> 00:33:31,279
needs a backup key and you have a two

00:33:28,789 --> 00:33:34,039
keys to your house you have two keys to

00:33:31,279 --> 00:33:36,080
your car you need two keys to your

00:33:34,039 --> 00:33:39,109
computer or to your computer resources

00:33:36,080 --> 00:33:42,320
and and those keys should be roughly the

00:33:39,109 --> 00:33:46,129
same so I think that this trust model

00:33:42,320 --> 00:33:48,529
goes way way back and that for some

00:33:46,129 --> 00:33:50,720
reason we we decided that we didn't need

00:33:48,529 --> 00:33:52,190
to maintain this trust model that maybe

00:33:50,720 --> 00:33:57,799
it would be okay to just give somebody

00:33:52,190 --> 00:34:00,889
one token so one of the things I like to

00:33:57,799 --> 00:34:03,109
show is how does how what's Google doing

00:34:00,889 --> 00:34:08,270
here I mentioned before Google's doing a

00:34:03,109 --> 00:34:10,970
good job and so when if you enable

00:34:08,270 --> 00:34:12,319
two-factor authentication at Google one

00:34:10,970 --> 00:34:16,089
of the things that I really like about

00:34:12,319 --> 00:34:18,760
it is that they enable you to register

00:34:16,089 --> 00:34:22,669
multiple strong authentication

00:34:18,760 --> 00:34:24,919
credentials so so I can I can I can

00:34:22,669 --> 00:34:27,710
register an OTP device I can register

00:34:24,919 --> 00:34:30,799
multiple tokens they also have Google

00:34:27,710 --> 00:34:32,839
prom they have one time codes which I

00:34:30,799 --> 00:34:35,599
guess you'd have to like print out and

00:34:32,839 --> 00:34:37,220
keep somewhere they have SMS which I

00:34:35,599 --> 00:34:40,359
actually disabled on my Google account

00:34:37,220 --> 00:34:43,339
because I don't trust my mobile operator

00:34:40,359 --> 00:34:44,990
but but basically their approach is I

00:34:43,339 --> 00:34:48,409
really like the way they present you

00:34:44,990 --> 00:34:50,450
with this page where you can manage your

00:34:48,409 --> 00:34:52,369
your two-factor credentials and if I

00:34:50,450 --> 00:34:53,869
lose one of my credentials it's not the

00:34:52,369 --> 00:34:55,670
end of the world because I solve another

00:34:53,869 --> 00:34:59,370
credential to login what

00:34:55,670 --> 00:35:02,760
Blue has an open-source portal for

00:34:59,370 --> 00:35:04,980
credential management called Casa like

00:35:02,760 --> 00:35:06,090
house in Spanish so we called it Cossack

00:35:04,980 --> 00:35:08,940
and it's like a house for your

00:35:06,090 --> 00:35:11,190
two-factor credentials we originally

00:35:08,940 --> 00:35:12,840
called a credential manager but then we

00:35:11,190 --> 00:35:16,020
decided they we had some more use cases

00:35:12,840 --> 00:35:18,180
for our Casa like managing consent and

00:35:16,020 --> 00:35:21,200
other stuff and so we didn't want to

00:35:18,180 --> 00:35:24,090
pigeonhole it on John credentials but

00:35:21,200 --> 00:35:27,300
but the idea for em is similar where

00:35:24,090 --> 00:35:30,780
it's a user facing portal where users

00:35:27,300 --> 00:35:35,660
can you know enroll and unenroll home

00:35:30,780 --> 00:35:38,390
credentials and I hope to finish the the

00:35:35,660 --> 00:35:41,760
presentation with a deeper dive into

00:35:38,390 --> 00:35:44,550
into Casa but I think this is a really

00:35:41,760 --> 00:35:49,170
important part of the deployability

00:35:44,550 --> 00:35:51,750
challenge so before we go back to Casa

00:35:49,170 --> 00:35:56,490
let's go let's go talk a little bit more

00:35:51,750 --> 00:35:58,380
about sam'l and Open ID Connect now

00:35:56,490 --> 00:36:00,930
first of all I just want to say start by

00:35:58,380 --> 00:36:04,140
saying that sam'l and Open ID Connect

00:36:00,930 --> 00:36:08,430
are pretty much the same thing they're

00:36:04,140 --> 00:36:11,340
both an identity layer and there there

00:36:08,430 --> 00:36:15,450
are differences but there are a lot of

00:36:11,340 --> 00:36:17,760
analogies to so sam'l you know starting

00:36:15,450 --> 00:36:20,160
maybe from the bottom sam'l Zolder you

00:36:17,760 --> 00:36:23,400
know it was pretty much finished in 2006

00:36:20,160 --> 00:36:26,940
in 2006 the iPhone hadn't come out yet

00:36:23,400 --> 00:36:31,230
the iPhone came out in 2007 so sin when

00:36:26,940 --> 00:36:34,490
sam'l came out the we were the the

00:36:31,230 --> 00:36:37,950
targeted design was web applications

00:36:34,490 --> 00:36:41,070
after the iPhone comes out in 2007 now

00:36:37,950 --> 00:36:43,610
we have mobile apps calling api's we

00:36:41,070 --> 00:36:45,690
have really advances in browser-based

00:36:43,610 --> 00:36:47,370
applications like Google Maps

00:36:45,690 --> 00:36:50,010
I remember seeing Google Maps the first

00:36:47,370 --> 00:36:51,570
time after the iPhone came out and I was

00:36:50,010 --> 00:36:53,930
pretty amazed at what they were doing

00:36:51,570 --> 00:36:56,190
with JavaScript I was like that's really

00:36:53,930 --> 00:36:58,770
interactive so there's a lot of

00:36:56,190 --> 00:37:02,550
innovations and sort of how applications

00:36:58,770 --> 00:37:04,860
get written how api's get written um the

00:37:02,550 --> 00:37:08,010
whole idea of develop a developer should

00:37:04,860 --> 00:37:09,029
have input into the design of api's that

00:37:08,010 --> 00:37:11,069
sort of a

00:37:09,029 --> 00:37:14,219
comes about and I would say you know and

00:37:11,069 --> 00:37:18,689
sort of around the time is that the

00:37:14,219 --> 00:37:22,949
iPhone comes out so and you know also

00:37:18,689 --> 00:37:25,169
and maybe before 2006 you know HTML was

00:37:22,949 --> 00:37:26,459
really bigger than in the 90s so we're

00:37:25,169 --> 00:37:28,529
starting to think you know everything

00:37:26,459 --> 00:37:33,959
should be a text-based markup language

00:37:28,529 --> 00:37:37,019
XML is really big and but by you know by

00:37:33,959 --> 00:37:40,499
maybe 2007 there's sort of this shift

00:37:37,019 --> 00:37:43,229
away from XML towards JSON it turns out

00:37:40,499 --> 00:37:45,900
that JSON is actually more secure and

00:37:43,229 --> 00:37:47,900
why is that well XML is pretty

00:37:45,900 --> 00:37:51,959
complicated it has a lot of features

00:37:47,900 --> 00:37:55,650
it's really hard to write a good XML

00:37:51,959 --> 00:37:58,140
parser and because there have been

00:37:55,650 --> 00:38:00,419
parser errors those flow up into the

00:37:58,140 --> 00:38:05,039
into the implementations of the protocol

00:38:00,419 --> 00:38:07,799
so many of the the vulnerabilities have

00:38:05,039 --> 00:38:10,309
actually been XML vulnerability Shimon

00:38:07,799 --> 00:38:13,890
generically not sam'l specific

00:38:10,309 --> 00:38:17,189
vulnerabilities so JSON weirdly being

00:38:13,890 --> 00:38:19,769
simpler is actually proven to be more

00:38:17,189 --> 00:38:23,089
secure oh and in general this has been

00:38:19,769 --> 00:38:27,539
sort of a move to her towards developers

00:38:23,089 --> 00:38:29,489
feeling like JSON is easier to map to

00:38:27,539 --> 00:38:31,769
their to objects in their programming

00:38:29,489 --> 00:38:34,439
language and just easier to work with so

00:38:31,769 --> 00:38:37,949
that's a big change a sam'l assertion is

00:38:34,439 --> 00:38:39,719
a chunk is XML it's an XML document an

00:38:37,949 --> 00:38:44,849
open ID assertion is a JSON document

00:38:39,719 --> 00:38:46,229
just simply said so if you've if you've

00:38:44,849 --> 00:38:48,150
been around this industry and

00:38:46,229 --> 00:38:51,269
authentication and you've probably heard

00:38:48,150 --> 00:38:55,019
the term sam'l assertion a sam'l

00:38:51,269 --> 00:38:58,409
assertion is like the who what where

00:38:55,019 --> 00:39:00,150
when and why and how of an

00:38:58,409 --> 00:39:03,150
authentication event you know it tells

00:39:00,150 --> 00:39:04,859
you who issued who that a person was

00:39:03,150 --> 00:39:08,519
authenticated the person is called the

00:39:04,859 --> 00:39:11,640
subject who issued that assertion you

00:39:08,519 --> 00:39:13,529
know was it my my company was that my

00:39:11,640 --> 00:39:17,009
university was that the government

00:39:13,529 --> 00:39:18,719
so these there's an issuer the assertion

00:39:17,009 --> 00:39:20,660
is good for a certain amount of time so

00:39:18,719 --> 00:39:22,549
it has an expiration

00:39:20,660 --> 00:39:25,039
I was authenticated with a certain

00:39:22,549 --> 00:39:31,239
technology so maybe I use password maybe

00:39:25,039 --> 00:39:33,439
I used biometric or token so the the

00:39:31,239 --> 00:39:35,390
sam'l assertion basically has

00:39:33,439 --> 00:39:39,829
information about the authentication

00:39:35,390 --> 00:39:42,229
event optionally it has attributes so

00:39:39,829 --> 00:39:44,209
optionally in that sam'l assertion I

00:39:42,229 --> 00:39:46,729
might include more information about the

00:39:44,209 --> 00:39:50,839
subject like maybe first name last name

00:39:46,729 --> 00:39:53,390
email address date of birth you know

00:39:50,839 --> 00:39:59,809
others we call those in sam'l attributes

00:39:53,390 --> 00:40:02,809
of the person so in in an open ID we

00:39:59,809 --> 00:40:04,699
have the same exact thing except instead

00:40:02,809 --> 00:40:07,759
of calling it a sam'l assertion we call

00:40:04,699 --> 00:40:10,069
it the ID token maybe the ID token is

00:40:07,759 --> 00:40:13,849
myst name maybe it's not really a token

00:40:10,069 --> 00:40:15,439
at all maybe it's really it is really

00:40:13,849 --> 00:40:18,469
more I wish they had called it an

00:40:15,439 --> 00:40:20,749
identity underscore assertion would have

00:40:18,469 --> 00:40:23,029
been more accurate because I think a lot

00:40:20,749 --> 00:40:26,539
of people confuse it with an OAuth

00:40:23,029 --> 00:40:30,079
access token and ooofff access token is

00:40:26,539 --> 00:40:31,640
presented to an API and the API looks at

00:40:30,079 --> 00:40:34,159
it and decides whether or not to give

00:40:31,640 --> 00:40:38,599
you back you know whatever you're asking

00:40:34,159 --> 00:40:41,839
for but a 90 token is more like as an

00:40:38,599 --> 00:40:45,140
assertion about the person but if you

00:40:41,839 --> 00:40:46,849
see sam'l assertion in in sam'l jargon

00:40:45,140 --> 00:40:49,609
you can think ID token and open IT

00:40:46,849 --> 00:40:52,699
jargon it also has the issuer this

00:40:49,609 --> 00:40:55,699
subject the type of authentication the

00:40:52,699 --> 00:40:57,229
expiration who this assertion was issued

00:40:55,699 --> 00:41:02,569
to so there's a one-to-one mapping

00:40:57,229 --> 00:41:04,609
between those documents an open ID or in

00:41:02,569 --> 00:41:07,759
sam'l you we here we talk about the

00:41:04,609 --> 00:41:10,179
identity provider or IDP an open ID we

00:41:07,759 --> 00:41:13,640
call it the open ID provider or opie I

00:41:10,179 --> 00:41:15,650
use those terms interchangeably my

00:41:13,640 --> 00:41:18,829
identity provider is a particularly apt

00:41:15,650 --> 00:41:20,509
name and hard to shake and people have

00:41:18,829 --> 00:41:23,059
been doing federated identity for a

00:41:20,509 --> 00:41:26,709
while I think we just sometimes can't

00:41:23,059 --> 00:41:29,179
help ourselves then we still use IDP and

00:41:26,709 --> 00:41:31,069
service provider you know in sam'l

00:41:29,179 --> 00:41:33,979
remember everything was a website and in

00:41:31,069 --> 00:41:34,460
in in sam'l jargon we would call it the

00:41:33,979 --> 00:41:36,770
S

00:41:34,460 --> 00:41:40,609
or service provider really it's always a

00:41:36,770 --> 00:41:43,280
website and in open IG jargon we call it

00:41:40,609 --> 00:41:45,770
the client that's really a wolf jargon

00:41:43,280 --> 00:41:48,950
open ideas a certain really a profile of

00:41:45,770 --> 00:41:51,950
Roth 2.0 and client is generically what

00:41:48,950 --> 00:41:55,190
we would call this thing you know that's

00:41:51,950 --> 00:41:58,010
calling the talking to the IDP sometimes

00:41:55,190 --> 00:42:01,130
we call it relying party or RP um that

00:41:58,010 --> 00:42:03,320
that jargon actually exists in sam'l

00:42:01,130 --> 00:42:06,470
also meaning pretty much the same thing

00:42:03,320 --> 00:42:08,540
maybe a little more generically but you

00:42:06,470 --> 00:42:11,300
know whereas in you know Sam well you'll

00:42:08,540 --> 00:42:13,490
hear SP an open idea I would say most of

00:42:11,300 --> 00:42:17,599
the time you'll hear RP and sometimes

00:42:13,490 --> 00:42:20,420
client so we're the topic of today's

00:42:17,599 --> 00:42:23,660
conversation is authentication so in

00:42:20,420 --> 00:42:28,070
sam'l we talked about the authentic on

00:42:23,660 --> 00:42:30,589
text class breath and in open ID we just

00:42:28,070 --> 00:42:33,830
call it simply the ACR it should

00:42:30,589 --> 00:42:36,859
probably be the ACC are but but part of

00:42:33,830 --> 00:42:38,900
the goal in a in in open ID I think was

00:42:36,859 --> 00:42:42,109
to make things short err make it smaller

00:42:38,900 --> 00:42:44,109
on the wire make it easier to read and

00:42:42,109 --> 00:42:47,960
so we just call an ACR

00:42:44,109 --> 00:42:50,630
so the NCR tell you how the user was

00:42:47,960 --> 00:42:52,580
authenticated I mentioned before that

00:42:50,630 --> 00:42:55,820
sam'l has attributes and open and you we

00:42:52,580 --> 00:42:58,820
have user claims in in sam'l there are

00:42:55,820 --> 00:43:02,869
different flows open ID also has

00:42:58,820 --> 00:43:04,040
different flows in sam'l so we you might

00:43:02,869 --> 00:43:06,619
hear of something called the artifact

00:43:04,040 --> 00:43:10,820
binding flow but it's not used as much

00:43:06,619 --> 00:43:13,070
as other flows but in open ID we have

00:43:10,820 --> 00:43:16,220
the code flow and that is the standard

00:43:13,070 --> 00:43:19,160
flow in fact if you look at the mailing

00:43:16,220 --> 00:43:21,980
list for open ID connect you'll see it's

00:43:19,160 --> 00:43:25,240
called the open ID a be mailing list and

00:43:21,980 --> 00:43:28,670
that a B stands for artifact binding

00:43:25,240 --> 00:43:30,770
because code flow is more secure or

00:43:28,670 --> 00:43:33,770
artifact binding if you're using sam'l

00:43:30,770 --> 00:43:35,510
and the reason for that is we don't send

00:43:33,770 --> 00:43:38,270
the assertion or the token through the

00:43:35,510 --> 00:43:41,210
browser which has been attacked has a

00:43:38,270 --> 00:43:43,099
big attack surface area so all we do is

00:43:41,210 --> 00:43:45,320
we send a reference ID through the a

00:43:43,099 --> 00:43:46,599
one-time reference ID through the

00:43:45,320 --> 00:43:49,420
browser back

00:43:46,599 --> 00:43:50,920
the web server let's say and this

00:43:49,420 --> 00:43:54,519
protects against a lot of different

00:43:50,920 --> 00:43:56,140
types of attacks anyway so the idea here

00:43:54,519 --> 00:43:58,779
there and now I'm gonna do a deep dive

00:43:56,140 --> 00:44:00,609
into Oakland ID connect and Samwell is

00:43:58,779 --> 00:44:03,339
really the same you know I guess I made

00:44:00,609 --> 00:44:06,279
killed that point already so but I'm

00:44:03,339 --> 00:44:11,200
gonna talk about about about open ID in

00:44:06,279 --> 00:44:16,059
general so I just want to introduce the

00:44:11,200 --> 00:44:19,599
actors here too so people sometimes

00:44:16,059 --> 00:44:23,559
conflate these different actors we have

00:44:19,599 --> 00:44:27,549
in federated identity so I start always

00:44:23,559 --> 00:44:29,440
with the person the human being remember

00:44:27,549 --> 00:44:35,140
people are analog not digital

00:44:29,440 --> 00:44:37,630
we don't speak tcp/ip or HTTP so if you

00:44:35,140 --> 00:44:39,999
if you're a fan of a science-fiction you

00:44:37,630 --> 00:44:42,400
might have heard of the the term the

00:44:39,999 --> 00:44:44,739
meet space you know cyberspace is where

00:44:42,400 --> 00:44:47,489
digital stuff happens the meet space is

00:44:44,739 --> 00:44:50,950
where pieces of meat are walking around

00:44:47,489 --> 00:44:53,109
so so that's the the person the

00:44:50,950 --> 00:44:54,430
carbon-based life form people use that

00:44:53,109 --> 00:44:57,999
too

00:44:54,430 --> 00:45:00,729
then there's the browser in sam'l you'll

00:44:57,999 --> 00:45:02,499
you'll hear this frequently referred to

00:45:00,729 --> 00:45:04,440
as the user agent or UA

00:45:02,499 --> 00:45:07,059
it doesn't have to be a browser

00:45:04,440 --> 00:45:09,729
technically I guess it could be a mobile

00:45:07,059 --> 00:45:11,650
app although the mobile apps tend to be

00:45:09,729 --> 00:45:14,529
using the browser elements and in the

00:45:11,650 --> 00:45:17,619
phone anyway but the browser is sort of

00:45:14,529 --> 00:45:19,809
you know it's kind of dumb it's

00:45:17,619 --> 00:45:23,229
displaying stuff and it's really a

00:45:19,809 --> 00:45:25,839
separate thing then either the person or

00:45:23,229 --> 00:45:29,019
the piece of software so there's really

00:45:25,839 --> 00:45:30,670
two let's say models where's the

00:45:29,019 --> 00:45:34,150
software so the software is called the

00:45:30,670 --> 00:45:37,049
client the relying party the RP the

00:45:34,150 --> 00:45:40,479
service provider the SP or the website

00:45:37,049 --> 00:45:42,969
so if you think about a CGI program you

00:45:40,479 --> 00:45:45,700
know that's your client you know that's

00:45:42,969 --> 00:45:47,769
the code that's running on the server if

00:45:45,700 --> 00:45:50,349
you're thinking about a mobile app then

00:45:47,769 --> 00:45:52,630
it's really your you know the app that

00:45:50,349 --> 00:45:55,059
gets installed you know into the phone

00:45:52,630 --> 00:45:57,969
is the client or if you're thinking

00:45:55,059 --> 00:45:59,630
about a browser-based application and

00:45:57,969 --> 00:46:02,750
I'm like an angular app or

00:45:59,630 --> 00:46:05,240
or something then he then potentially

00:46:02,750 --> 00:46:08,030
the client could actually run in the

00:46:05,240 --> 00:46:09,590
browser but it's not the browser there's

00:46:08,030 --> 00:46:11,780
still a distinction between the browser

00:46:09,590 --> 00:46:13,940
and the code running in the browser the

00:46:11,780 --> 00:46:18,230
code running in the browser the angular

00:46:13,940 --> 00:46:19,910
out that's the client so anyway I mean

00:46:18,230 --> 00:46:21,800
you might think I'm splitting hairs but

00:46:19,910 --> 00:46:25,040
this is a pretty important distinction

00:46:21,800 --> 00:46:27,590
and then finally we talked about the the

00:46:25,040 --> 00:46:30,980
the identity provider the open ID

00:46:27,590 --> 00:46:33,500
provider on in Oh off generic terms this

00:46:30,980 --> 00:46:35,390
is the authorization server so this is

00:46:33,500 --> 00:46:38,690
the thing that's issuing tokens and

00:46:35,390 --> 00:46:41,390
identity assertions so that's a that's

00:46:38,690 --> 00:46:43,370
the a S and that could be Google if you

00:46:41,390 --> 00:46:45,260
go to accounts.google.com that's their

00:46:43,370 --> 00:46:49,580
that's their their open ID provider

00:46:45,260 --> 00:46:50,930
Google users open ID connect but or if

00:46:49,580 --> 00:46:53,780
you're installing open source software

00:46:50,930 --> 00:46:56,570
like glue or you're using commercial

00:46:53,780 --> 00:46:58,340
software like ping identity or you're

00:46:56,570 --> 00:47:00,950
using a sass ID any provider they're

00:46:58,340 --> 00:47:04,610
providing all of these things are

00:47:00,950 --> 00:47:07,610
providing identity the IDP okay let's

00:47:04,610 --> 00:47:12,280
move on so I'm gonna walk you through

00:47:07,610 --> 00:47:14,470
just really quickly your typical flow

00:47:12,280 --> 00:47:16,850
some of you might know this already but

00:47:14,470 --> 00:47:18,590
it's interesting for the point of level

00:47:16,850 --> 00:47:20,600
setting as we get into how you integrate

00:47:18,590 --> 00:47:23,930
the apps it's good to sort of have an

00:47:20,600 --> 00:47:26,780
overview so here are our actors remember

00:47:23,930 --> 00:47:28,490
person browser client authorization

00:47:26,780 --> 00:47:31,790
server I introduced a new one here

00:47:28,490 --> 00:47:37,730
resource server the resource server

00:47:31,790 --> 00:47:40,100
could be basically api's so in a lot of

00:47:37,730 --> 00:47:42,410
mobile apps the user authenticates and

00:47:40,100 --> 00:47:44,480
then they start calling api's those

00:47:42,410 --> 00:47:46,610
api's we were generically going to call

00:47:44,480 --> 00:47:48,920
them the resource server they're gonna

00:47:46,610 --> 00:47:51,800
give the Reis or the resource server RS

00:47:48,920 --> 00:47:55,250
consumes access tokens and looks at the

00:47:51,800 --> 00:47:58,400
access token to decide whether or not to

00:47:55,250 --> 00:48:00,410
give access to something but in general

00:47:58,400 --> 00:48:02,570
you could say authentication happens

00:48:00,410 --> 00:48:04,220
first because first we want to know who

00:48:02,570 --> 00:48:06,710
is this person and then the person

00:48:04,220 --> 00:48:11,119
starts calling api's

00:48:06,710 --> 00:48:14,539
so the flow every federated identity

00:48:11,119 --> 00:48:16,789
flow out there uses redirects so the

00:48:14,539 --> 00:48:19,640
first the way and the way that the flow

00:48:16,789 --> 00:48:21,589
starts as the user clicks login and the

00:48:19,640 --> 00:48:23,989
client says oh this user wants to login

00:48:21,589 --> 00:48:26,509
I don't know who this user is I'm going

00:48:23,989 --> 00:48:28,400
to redirect the person's browser to the

00:48:26,509 --> 00:48:30,619
authorization server um

00:48:28,400 --> 00:48:33,650
samwell's the same exact thing sam'l

00:48:30,619 --> 00:48:37,579
will send a redirect or redirect the

00:48:33,650 --> 00:48:39,499
users browser to the IDP an open ID we

00:48:37,579 --> 00:48:41,869
redirect the users browser to the

00:48:39,499 --> 00:48:45,670
authorization endpoint of the open ID

00:48:41,869 --> 00:48:49,190
provider and the open ID provider

00:48:45,670 --> 00:48:51,890
presents the login page the user enters

00:48:49,190 --> 00:48:52,789
their credentials and now those could be

00:48:51,890 --> 00:48:55,579
any credentials

00:48:52,789 --> 00:48:59,269
it could be password it could be phyto

00:48:55,579 --> 00:49:01,489
tokens that could be biometric Oakland

00:48:59,269 --> 00:49:04,480
ID Connect is neutral on how you

00:49:01,489 --> 00:49:07,430
authenticate the user that's why we say

00:49:04,480 --> 00:49:09,880
Samuel and open ID our federation

00:49:07,430 --> 00:49:12,079
federated identity protocols not

00:49:09,880 --> 00:49:14,690
authentication protocols are actually

00:49:12,079 --> 00:49:17,029
authentication neutral which is super

00:49:14,690 --> 00:49:19,460
confusing to most people who think of

00:49:17,029 --> 00:49:22,609
open ID and sam'l or even OA as

00:49:19,460 --> 00:49:24,460
authentication protocols so the user

00:49:22,609 --> 00:49:27,049
enters their credentials the

00:49:24,460 --> 00:49:29,710
authorization server or the or the open

00:49:27,049 --> 00:49:33,739
ID provider validates those credentials

00:49:29,710 --> 00:49:36,670
in Oakland ID connect the the opie I

00:49:33,739 --> 00:49:40,279
will then ask the user for consent

00:49:36,670 --> 00:49:43,009
that's optional if you think about

00:49:40,279 --> 00:49:44,089
Google you know if you're going to

00:49:43,009 --> 00:49:49,009
Google calendar

00:49:44,089 --> 00:49:51,589
they don't repress or share information

00:49:49,009 --> 00:49:54,140
with Google Calendar you know the Google

00:49:51,589 --> 00:49:56,599
calendar client is trusted by Google

00:49:54,140 --> 00:49:59,660
it's their client but if you go to a

00:49:56,599 --> 00:50:01,910
third party for example glue as a cycle

00:49:59,660 --> 00:50:06,170
you can book me this allows you to

00:50:01,910 --> 00:50:09,470
schedule meetings with glue and and

00:50:06,170 --> 00:50:15,200
input actually puts meetings directly on

00:50:09,470 --> 00:50:17,630
my calendar so so I have to get now

00:50:15,200 --> 00:50:19,099
Google doesn't know if they can trust

00:50:17,630 --> 00:50:21,440
you can book me too

00:50:19,099 --> 00:50:23,539
to put things on my calendar so Google

00:50:21,440 --> 00:50:26,809
has to ask me like when when I set that

00:50:23,539 --> 00:50:29,749
up they they said you know do you trust

00:50:26,809 --> 00:50:33,079
you can book me to do this and I said

00:50:29,749 --> 00:50:37,459
yes so that's that's the consent so the

00:50:33,079 --> 00:50:42,619
consent can happen for poor access to to

00:50:37,459 --> 00:50:46,729
api's but it can also happen for access

00:50:42,619 --> 00:50:48,979
to personal information so for example -

00:50:46,729 --> 00:50:52,430
does this applicate do we have should we

00:50:48,979 --> 00:50:54,170
share this your profile information with

00:50:52,430 --> 00:50:56,269
this application should we share your

00:50:54,170 --> 00:50:59,779
email address with this application that

00:50:56,269 --> 00:51:01,519
also happens in the consent phase so

00:50:59,779 --> 00:51:04,489
just going I'm going to back up just to

00:51:01,519 --> 00:51:08,329
get where we were just so user goes to

00:51:04,489 --> 00:51:11,089
the browser hits login the client

00:51:08,329 --> 00:51:13,369
application redirects the user to the

00:51:11,089 --> 00:51:15,920
authorization server authorization

00:51:13,369 --> 00:51:19,009
server presents the login pages page or

00:51:15,920 --> 00:51:23,109
pages user authenticates in n number of

00:51:19,009 --> 00:51:27,440
steps after authentication user consents

00:51:23,109 --> 00:51:30,049
okay after the user can sense then the

00:51:27,440 --> 00:51:33,619
auth the authorization server or open ID

00:51:30,049 --> 00:51:38,089
provider returns the code the code is a

00:51:33,619 --> 00:51:40,039
one-time use reference token so the code

00:51:38,089 --> 00:51:41,719
is sent to the browser which and the

00:51:40,039 --> 00:51:44,599
browser then sends that back to the

00:51:41,719 --> 00:51:47,390
redirect URI of the client so now the

00:51:44,599 --> 00:51:51,410
client the piece of software has this

00:51:47,390 --> 00:51:53,599
code and it it needs tokens it wants

00:51:51,410 --> 00:51:55,940
that ID token and once the access token

00:51:53,599 --> 00:51:59,059
to call api's and maybe wants a refresh

00:51:55,940 --> 00:52:01,940
token so what it has to do is go to the

00:51:59,059 --> 00:52:05,059
token endpoint of the open ID provider

00:52:01,940 --> 00:52:08,959
and say I have this code please give me

00:52:05,059 --> 00:52:11,449
back tokens and so it presents the code

00:52:08,959 --> 00:52:14,329
but it also presents the presents its

00:52:11,449 --> 00:52:17,059
client credentials so it's every client

00:52:14,329 --> 00:52:19,279
has a client ID and secret and so it

00:52:17,059 --> 00:52:22,940
uses the code plus kline credentials to

00:52:19,279 --> 00:52:25,839
get back with tokens and then

00:52:22,940 --> 00:52:28,730
then the client gets the access token

00:52:25,839 --> 00:52:31,160
and then the client can then call API is

00:52:28,730 --> 00:52:34,369
including the user info endpoint in

00:52:31,160 --> 00:52:35,900
order to get attributes about who is

00:52:34,369 --> 00:52:39,380
this person like what's their email

00:52:35,900 --> 00:52:41,869
address what's their so whatever so

00:52:39,380 --> 00:52:44,630
after the actor after the client has the

00:52:41,869 --> 00:52:46,099
access token I can start calling API is

00:52:44,630 --> 00:52:48,589
whether that's user and for anything

00:52:46,099 --> 00:52:51,140
else and by the way if you have

00:52:48,589 --> 00:52:54,950
questions about this as we go just feel

00:52:51,140 --> 00:52:57,079
free to put them in the chat so ok so

00:52:54,950 --> 00:52:59,720
that's your crash course and in Oakland

00:52:57,079 --> 00:53:01,609
ID and this will be useful later and

00:52:59,720 --> 00:53:04,190
when we discuss some of the open ID

00:53:01,609 --> 00:53:09,440
connect features and how they work with

00:53:04,190 --> 00:53:12,109
2fa so ok so now you know a little bit

00:53:09,440 --> 00:53:14,510
about open ID and sam'l and so your

00:53:12,109 --> 00:53:16,760
question is how do I use these darn

00:53:14,510 --> 00:53:19,520
things like how do I use them in my app

00:53:16,760 --> 00:53:24,170
and and so I always like to talk about

00:53:19,520 --> 00:53:29,300
two approaches for single sign-on so

00:53:24,170 --> 00:53:31,430
approach number one is what I would say

00:53:29,300 --> 00:53:35,359
is integrating the federated identity

00:53:31,430 --> 00:53:38,750
protocol into your application directly

00:53:35,359 --> 00:53:40,520
by calling the api's home so if you're a

00:53:38,750 --> 00:53:44,300
Python programmer this means getting

00:53:40,520 --> 00:53:46,730
Python libraries for open ID and this

00:53:44,300 --> 00:53:50,180
can be done for sam'l two so you see

00:53:46,730 --> 00:53:53,690
like you know salesforce.com I'm sure

00:53:50,180 --> 00:53:55,400
that they have you know sam'l libraries

00:53:53,690 --> 00:53:59,359
that they integrated into their platform

00:53:55,400 --> 00:54:00,829
in that they use so that's that's you

00:53:59,359 --> 00:54:04,670
know a lot of developers will say you

00:54:00,829 --> 00:54:08,599
know hey I know how to use Google a log

00:54:04,670 --> 00:54:11,210
Google login so why can't I log into my

00:54:08,599 --> 00:54:14,329
organization using the same API I'm good

00:54:11,210 --> 00:54:18,020
at calling api's so application

00:54:14,329 --> 00:54:21,050
developers like this paradigm option

00:54:18,020 --> 00:54:24,470
number two is a tried-and-true method

00:54:21,050 --> 00:54:27,950
where we put a webserver in front of the

00:54:24,470 --> 00:54:30,410
application so we say okay application

00:54:27,950 --> 00:54:32,210
is going to be non internet facing it's

00:54:30,410 --> 00:54:33,710
going to be on the private network so

00:54:32,210 --> 00:54:35,990
but we're going to put some web server

00:54:33,710 --> 00:54:36,420
which is internet facing and it's going

00:54:35,990 --> 00:54:39,570
to

00:54:36,420 --> 00:54:41,910
y're authentication and then it's gonna

00:54:39,570 --> 00:54:44,040
proxy to the back-end application and

00:54:41,910 --> 00:54:47,520
send the user information in environment

00:54:44,040 --> 00:54:49,770
variables so I'm generally using the

00:54:47,520 --> 00:54:53,670
headers so you might have a header

00:54:49,770 --> 00:54:57,180
you know HTTP underscore ID underscore

00:54:53,670 --> 00:55:01,140
first name so the application can very

00:54:57,180 --> 00:55:04,140
simply pull that information from the

00:55:01,140 --> 00:55:06,000
headers and sometimes by the way the the

00:55:04,140 --> 00:55:10,020
webserver can just send the whole token

00:55:06,000 --> 00:55:11,940
the web server can send the ID token and

00:55:10,020 --> 00:55:15,540
let the application does consume it and

00:55:11,940 --> 00:55:17,250
verify it itself if it wants both of

00:55:15,540 --> 00:55:21,900
these advantages have their pluses and

00:55:17,250 --> 00:55:24,510
minuses the advantage of of option

00:55:21,900 --> 00:55:27,630
number one is that you can build a

00:55:24,510 --> 00:55:31,230
better user experience if you look at

00:55:27,630 --> 00:55:34,080
something like Gmail the developers who

00:55:31,230 --> 00:55:37,110
write Gmail they have a really they've

00:55:34,080 --> 00:55:40,230
deeply integrated identity into that

00:55:37,110 --> 00:55:43,380
application and that allows them to do

00:55:40,230 --> 00:55:48,920
some really cool things and to very

00:55:43,380 --> 00:55:52,220
seamlessly present or to manage identity

00:55:48,920 --> 00:55:56,070
the advantage of option number two is

00:55:52,220 --> 00:55:58,590
it's actually pretty scalable if you you

00:55:56,070 --> 00:56:00,210
don't have to rely if you have maybe a

00:55:58,590 --> 00:56:02,910
company and you have dozens of

00:56:00,210 --> 00:56:05,340
developers and you know and they're all

00:56:02,910 --> 00:56:07,860
grabbing libraries off github to call

00:56:05,340 --> 00:56:10,260
open I to call your open ID provider how

00:56:07,860 --> 00:56:13,500
do you update those libraries when

00:56:10,260 --> 00:56:15,510
something goes wrong so in a way telling

00:56:13,500 --> 00:56:17,820
developers no don't worry about you know

00:56:15,510 --> 00:56:22,080
open ID or sam'l will do that on the web

00:56:17,820 --> 00:56:24,900
tier maybe it's easier to upgrade all

00:56:22,080 --> 00:56:26,640
those web libraries if something happens

00:56:24,900 --> 00:56:29,160
in open ID or sam'l and you need to

00:56:26,640 --> 00:56:31,230
address it you know after we write the

00:56:29,160 --> 00:56:33,330
code or find out if the libraries that

00:56:31,230 --> 00:56:35,820
they're using even includes fixes where

00:56:33,330 --> 00:56:38,760
those vulnerabilities so from a

00:56:35,820 --> 00:56:41,400
deployment manageability standpoint the

00:56:38,760 --> 00:56:43,830
web server approach is it's still a good

00:56:41,400 --> 00:56:46,020
one and it was knockin either one of

00:56:43,830 --> 00:56:47,470
these approaches is going away and it's

00:56:46,020 --> 00:56:49,500
more of a

00:56:47,470 --> 00:56:57,130
sort of a depends on your on your

00:56:49,500 --> 00:56:59,589
deployment preferences so so one way to

00:56:57,130 --> 00:57:02,020
implement that the title of this talk is

00:56:59,589 --> 00:57:04,180
how to to FA enable open source

00:57:02,020 --> 00:57:07,060
applications so one of the cool things

00:57:04,180 --> 00:57:09,460
about this is that well once you've

00:57:07,060 --> 00:57:14,980
implemented or supported two-factor

00:57:09,460 --> 00:57:20,530
authentication in your sort of a at your

00:57:14,980 --> 00:57:22,960
IDP level then you can you can a lot of

00:57:20,530 --> 00:57:29,790
open source applications already sip

00:57:22,960 --> 00:57:37,240
with support for for sam'l or open ID so

00:57:29,790 --> 00:57:39,579
this is a sort of a it's a picture of

00:57:37,240 --> 00:57:42,569
what we're using it glue you know at

00:57:39,579 --> 00:57:47,349
glue I think we're weirdly anti cloud

00:57:42,569 --> 00:57:50,230
and we we sort of have an open source

00:57:47,349 --> 00:57:54,359
stack of software that we run for email

00:57:50,230 --> 00:57:57,280
and Chad and documents and CRM and

00:57:54,359 --> 00:57:59,859
content management and so we've

00:57:57,280 --> 00:58:03,760
basically hooked and by the way we have

00:57:59,859 --> 00:58:06,550
a we have some custom applications to we

00:58:03,760 --> 00:58:08,170
we have rewrote our own supports if you

00:58:06,550 --> 00:58:11,440
go to support glue org

00:58:08,170 --> 00:58:13,089
that's a django application so we have

00:58:11,440 --> 00:58:15,609
some custom apps in there too and

00:58:13,089 --> 00:58:17,050
they're all some of them are using sam'l

00:58:15,609 --> 00:58:21,280
some of them are using open ID

00:58:17,050 --> 00:58:25,920
I know raka chat uses open ID

00:58:21,280 --> 00:58:30,040
I think only office is using sam'l so

00:58:25,920 --> 00:58:32,650
really it's okay we prefer open ID but

00:58:30,040 --> 00:58:35,470
if but if sam'l is there I think the

00:58:32,650 --> 00:58:38,109
WordPress one we're using open ID but

00:58:35,470 --> 00:58:39,640
you know if it's um if we're just

00:58:38,109 --> 00:58:41,950
talking about authentication and there's

00:58:39,640 --> 00:58:45,480
a sam'l plug-in I'm not complaining I

00:58:41,950 --> 00:58:49,119
think sam'l is a very reasonable option

00:58:45,480 --> 00:58:52,180
for for vendors of author shelf software

00:58:49,119 --> 00:58:54,760
or open source software to offer you

00:58:52,180 --> 00:58:57,099
know I would sort of recommend open ID

00:58:54,760 --> 00:58:59,819
you know I I think open idea is more

00:58:57,099 --> 00:59:01,450
secure it certainly it gives developers

00:58:59,819 --> 00:59:03,339
client developers

00:59:01,450 --> 00:59:05,619
more features they could use on the Opie

00:59:03,339 --> 00:59:08,829
anyone who tells you that sam'l is more

00:59:05,619 --> 00:59:11,800
secure than open ideas crazy because of

00:59:08,829 --> 00:59:13,150
the fact that generally the identity

00:59:11,800 --> 00:59:15,579
assertion is sent through the browser

00:59:13,150 --> 00:59:18,160
and it's XML which is that all sorts of

00:59:15,579 --> 00:59:20,140
problems and it was not designed first

00:59:18,160 --> 00:59:22,990
for other types of app so I don't think

00:59:20,140 --> 00:59:25,270
it's more secure but but for web

00:59:22,990 --> 00:59:27,940
applications I would say it's a very

00:59:25,270 --> 00:59:30,180
reasonable you don't want it one offs

00:59:27,940 --> 00:59:34,359
and I think it's a very reasonable

00:59:30,180 --> 00:59:37,810
option to use but really almost all

00:59:34,359 --> 00:59:42,190
cloud apps most most enterprise cloud

00:59:37,810 --> 00:59:44,680
apps will support a open ID or sam'l

00:59:42,190 --> 00:59:48,040
many open source apps that's sort of a

00:59:44,680 --> 00:59:51,430
quick way let's start talking a little

00:59:48,040 --> 00:59:54,550
bit more about custom apps too and go a

00:59:51,430 --> 00:59:58,869
little bit more into the guts of how

00:59:54,550 --> 01:00:01,290
does how can you do this stuff so we

00:59:58,869 --> 01:00:03,900
talked a little bit before about this

01:00:01,290 --> 01:00:08,819
authentic on tax class reference

01:00:03,900 --> 01:00:15,730
parameter and how both open ID and sam'l

01:00:08,819 --> 01:00:18,550
have a so use it and so in a remember

01:00:15,730 --> 01:00:21,250
how in when I was talking about open ID

01:00:18,550 --> 01:00:24,040
connect I said the first step is when we

01:00:21,250 --> 01:00:26,410
redirect the users browser to the open

01:00:24,040 --> 01:00:28,930
ID provider or the identity provider

01:00:26,410 --> 01:00:32,260
generically and the IDP renders the

01:00:28,930 --> 01:00:35,380
login page so that redirect that's

01:00:32,260 --> 01:00:38,680
called the authentication request and

01:00:35,380 --> 01:00:41,290
set both sam'l and open ID connect to

01:00:38,680 --> 01:00:43,270
find the authentication request and like

01:00:41,290 --> 01:00:46,119
any request you know there's there's

01:00:43,270 --> 01:00:49,050
parameters or you know in sam'l of

01:00:46,119 --> 01:00:51,700
course it's going to be XML an open ID

01:00:49,050 --> 01:00:55,210
there's a parameter called ACR

01:00:51,700 --> 01:00:57,640
underscore values which then has a space

01:00:55,210 --> 01:01:01,060
separated list of ACR that you can put

01:00:57,640 --> 01:01:05,440
in and sam'l this is a piece of XML of

01:01:01,060 --> 01:01:10,210
course but but the idea here is that the

01:01:05,440 --> 01:01:14,260
the client or SP can provide a hint as

01:01:10,210 --> 01:01:15,730
to what type of authentication it would

01:01:14,260 --> 01:01:19,870
like

01:01:15,730 --> 01:01:26,200
I also put in a to the right of the open

01:01:19,870 --> 01:01:29,200
ID Connect request parameter I also put

01:01:26,200 --> 01:01:32,380
in what is the ACR look like in the ID

01:01:29,200 --> 01:01:35,860
token itself because the ID token is the

01:01:32,380 --> 01:01:38,200
identity assertion remember I said this

01:01:35,860 --> 01:01:42,850
is the how the user got authenticated

01:01:38,200 --> 01:01:46,840
and so so this comes back as a as a as a

01:01:42,850 --> 01:01:48,850
claim of the ID token and although we

01:01:46,840 --> 01:01:52,330
send ACR underscore values as the

01:01:48,850 --> 01:01:55,960
parameter the name of the the ID token

01:01:52,330 --> 01:01:59,290
claim is just ACR by itself

01:01:55,960 --> 01:02:03,340
note that in open ID connect the client

01:01:59,290 --> 01:02:05,410
can also register default ACR values so

01:02:03,340 --> 01:02:07,720
the client can basically say I don't

01:02:05,410 --> 01:02:13,180
want to put in ACR values into every

01:02:07,720 --> 01:02:15,250
request because I have a default ACR so

01:02:13,180 --> 01:02:19,510
just always use this ACR whenever you

01:02:15,250 --> 01:02:22,540
see a request from me so there's server

01:02:19,510 --> 01:02:25,210
metadata I guess the last thing I that I

01:02:22,540 --> 01:02:28,720
should mention is that in the open ID

01:02:25,210 --> 01:02:32,320
Connect provider metadata the opie can

01:02:28,720 --> 01:02:33,910
also publish which a CRS its support so

01:02:32,320 --> 01:02:36,670
clients can know what different types of

01:02:33,910 --> 01:02:39,070
authentication are available so you've

01:02:36,670 --> 01:02:41,770
seen this ACR parameter in a couple of

01:02:39,070 --> 01:02:45,190
places in the request in the identity

01:02:41,770 --> 01:02:47,380
assertion in the client information and

01:02:45,190 --> 01:02:52,270
the server information so it's good to

01:02:47,380 --> 01:02:56,800
know what this ACR thing is now

01:02:52,270 --> 01:02:58,390
sometimes federated identity presents a

01:02:56,800 --> 01:03:01,750
problem with two-factor authentication

01:02:58,390 --> 01:03:05,770
and that problem is that the user might

01:03:01,750 --> 01:03:10,210
already be logged in so the client might

01:03:05,770 --> 01:03:13,960
request let's say let's just a phytolith

01:03:10,210 --> 01:03:15,910
indication but if the Khloe you if the

01:03:13,960 --> 01:03:19,660
user already has a session in their

01:03:15,910 --> 01:03:21,280
browser then the IDP might say well I'm

01:03:19,660 --> 01:03:23,160
not even going to authenticate this

01:03:21,280 --> 01:03:25,680
person because they already of a session

01:03:23,160 --> 01:03:28,750
so you're good to go

01:03:25,680 --> 01:03:31,750
so sometimes the

01:03:28,750 --> 01:03:35,890
the client needs the signal to the IDP

01:03:31,750 --> 01:03:39,280
that it wants real thin acacia in sam'l

01:03:35,890 --> 01:03:42,040
in the authentic West there's you can

01:03:39,280 --> 01:03:45,310
use a light forget the right word for it

01:03:42,040 --> 01:03:47,200
so you can use an attribute of the sam'l

01:03:45,310 --> 01:03:49,150
I forget the right word but basically in

01:03:47,200 --> 01:03:52,290
the in the authentic West element itself

01:03:49,150 --> 01:03:56,740
you can say forces auth end equals true

01:03:52,290 --> 01:03:59,890
and and that's sort of it's it's a hint

01:03:56,740 --> 01:04:02,710
to the IDP that because the client wants

01:03:59,890 --> 01:04:05,140
to relent ik eight the user an open ID

01:04:02,710 --> 01:04:09,340
connect there's a similar feature called

01:04:05,140 --> 01:04:12,610
prompt equals login note that is not a

01:04:09,340 --> 01:04:16,360
required feature for an open ID provider

01:04:12,610 --> 01:04:19,090
it is a should not I must that that's

01:04:16,360 --> 01:04:21,730
supported so for example Google chose

01:04:19,090 --> 01:04:26,290
not to support that feature they don't

01:04:21,730 --> 01:04:28,480
want to give clients the ability to get

01:04:26,290 --> 01:04:29,790
the tooth get to force the user to have

01:04:28,480 --> 01:04:32,680
to relent Akane

01:04:29,790 --> 01:04:34,270
so there are security considerations

01:04:32,680 --> 01:04:36,280
around whether whether you want to let

01:04:34,270 --> 01:04:39,970
clients do this and usability

01:04:36,280 --> 01:04:42,790
considerations and so anyway so it's

01:04:39,970 --> 01:04:46,210
it's it's optional but it is a handy

01:04:42,790 --> 01:04:49,240
trick to have in your pocket if you want

01:04:46,210 --> 01:04:51,520
to make sure that you get a certain

01:04:49,240 --> 01:04:53,680
authentication workflow and the person

01:04:51,520 --> 01:05:01,210
has already logged in and has a session

01:04:53,680 --> 01:05:03,490
active in their browser so I wanted to

01:05:01,210 --> 01:05:05,680
mention you know so there's a lot of

01:05:03,490 --> 01:05:10,740
challenges around these newer types of

01:05:05,680 --> 01:05:14,800
applications so Google puts out a

01:05:10,740 --> 01:05:18,220
library called Apple I grab the app off

01:05:14,800 --> 01:05:23,380
for Jas the logo but there's also one

01:05:18,220 --> 01:05:29,910
for Android and for iOS and so if you're

01:05:23,380 --> 01:05:34,330
writing open ID connect client code then

01:05:29,910 --> 01:05:35,950
you you might want to use app off my

01:05:34,330 --> 01:05:39,330
recommendation would be actually to use

01:05:35,950 --> 01:05:42,550
app off and there's actually two RFC's

01:05:39,330 --> 01:05:45,670
they put lengthen into this presentation

01:05:42,550 --> 01:05:47,170
one's recommendations for native

01:05:45,670 --> 01:05:48,730
applications one we're at one's

01:05:47,170 --> 01:05:51,390
recommendations for browser-based

01:05:48,730 --> 01:05:54,910
applications that's actually not an RFC

01:05:51,390 --> 01:05:58,450
it's it's still a draft I think they're

01:05:54,910 --> 01:06:00,520
on draft six right now but there are

01:05:58,450 --> 01:06:04,600
some special security considerations

01:06:00,520 --> 01:06:07,420
around these types of applications for

01:06:04,600 --> 01:06:11,080
example you can't store a client secret

01:06:07,420 --> 01:06:14,650
in a native app or JavaScript app native

01:06:11,080 --> 01:06:16,270
apps can be recompiled and JavaScript

01:06:14,650 --> 01:06:21,580
apps there's just basically no way to

01:06:16,270 --> 01:06:26,470
protect a client secret so you can still

01:06:21,580 --> 01:06:27,820
use these parameters but anyway so if

01:06:26,470 --> 01:06:29,410
you're writing one of these types of

01:06:27,820 --> 01:06:31,990
applications like I would seriously

01:06:29,410 --> 01:06:34,030
consider using these libraries and the

01:06:31,990 --> 01:06:37,240
reason Google these are libraries app

01:06:34,030 --> 01:06:40,720
off their Apache 2 license Google

01:06:37,240 --> 01:06:44,010
basically wants to help developers to

01:06:40,720 --> 01:06:47,440
write secure authentication code if

01:06:44,010 --> 01:06:49,420
developers do a bad job authenticating

01:06:47,440 --> 01:06:54,100
users and these credentials are leaked

01:06:49,420 --> 01:06:56,230
Google as the IP is impacted and so I'm

01:06:54,100 --> 01:06:58,480
pretty sure the reason they open-source

01:06:56,230 --> 01:07:01,920
this is because they just felt like ok

01:06:58,480 --> 01:07:06,970
guys here's some good code you can use

01:07:01,920 --> 01:07:11,460
so another client that I really like is

01:07:06,970 --> 01:07:16,540
called mod off open IDC there's actually

01:07:11,460 --> 01:07:18,700
if you prefer nginx there's also a lot

01:07:16,540 --> 01:07:21,220
of libraries for nginx but I just wanted

01:07:18,700 --> 01:07:25,090
to show another approach about first

01:07:21,220 --> 01:07:29,140
steps up authentication where in this

01:07:25,090 --> 01:07:31,120
case in mono open IDC you know it works

01:07:29,140 --> 01:07:33,700
basically you can see we're protecting

01:07:31,120 --> 01:07:35,710
this folder called slash user so we're

01:07:33,700 --> 01:07:37,780
saying like maybe you only need password

01:07:35,710 --> 01:07:40,600
to get to this website but if you

01:07:37,780 --> 01:07:42,730
traverse into the slash user folder what

01:07:40,600 --> 01:07:46,810
we're saying is is that we want to see

01:07:42,730 --> 01:07:49,690
either the phyto claim or the OTP claim

01:07:46,810 --> 01:07:52,330
or I'm sorry the either the phyto ACR or

01:07:49,690 --> 01:07:56,440
the OTP ACR

01:07:52,330 --> 01:08:00,820
so so the motto open IDC will will

01:07:56,440 --> 01:08:02,590
enforce that so this is another this is

01:08:00,820 --> 01:08:08,230
an example of how if you're using step

01:08:02,590 --> 01:08:10,420
two you can enforce that you know this

01:08:08,230 --> 01:08:13,810
is I have a demo I'm depending upon how

01:08:10,420 --> 01:08:16,810
we do on time you know the glue server

01:08:13,810 --> 01:08:18,220
is a platform or I'm sorry glue as a

01:08:16,810 --> 01:08:20,500
platform for Identity and Access

01:08:18,220 --> 01:08:22,630
Management and one of the components we

01:08:20,500 --> 01:08:25,180
have is called glued gateway and glue

01:08:22,630 --> 01:08:28,990
gateway is both an API gateway and a web

01:08:25,180 --> 01:08:32,740
reverse proxy and we implemented a

01:08:28,990 --> 01:08:35,410
similar feature to mono open IDC where

01:08:32,740 --> 01:08:37,480
you can protect a certain folder you can

01:08:35,410 --> 01:08:40,000
see in the upper right whereas we're

01:08:37,480 --> 01:08:41,800
protecting the payments folder and we're

01:08:40,000 --> 01:08:46,500
saying like if you do a get in the

01:08:41,800 --> 01:08:49,000
payments folder then you need a OTP to

01:08:46,500 --> 01:08:52,570
to have authenticated with OTP

01:08:49,000 --> 01:08:54,700
authentication this glue key way can

01:08:52,570 --> 01:08:58,630
actually be configured by api's this is

01:08:54,700 --> 01:09:00,490
the GUI view of glue gateway but it

01:08:58,630 --> 01:09:04,330
enables you to do something similar

01:09:00,490 --> 01:09:06,670
similar or also implementing stepped up

01:09:04,330 --> 01:09:08,920
on that occasion so I have a demo we'll

01:09:06,670 --> 01:09:16,000
see if we have time I'll show the demo

01:09:08,920 --> 01:09:18,580
of that so okay so I've been talking a

01:09:16,000 --> 01:09:22,710
little bit about how to end users

01:09:18,580 --> 01:09:25,210
manager credentials and how do you

01:09:22,710 --> 01:09:27,310
applications request a certain type of

01:09:25,210 --> 01:09:30,220
authentication what I haven't talked

01:09:27,310 --> 01:09:32,410
about is how do you implement two-factor

01:09:30,220 --> 01:09:36,160
authentication in an open source

01:09:32,410 --> 01:09:38,589
identity provider and well glue is not

01:09:36,160 --> 01:09:41,080
the only IDP out there it happens to be

01:09:38,589 --> 01:09:45,520
the one that I know the best so I'm

01:09:41,080 --> 01:09:47,950
going to show this one so in the glue

01:09:45,520 --> 01:09:50,950
server there we have these things called

01:09:47,950 --> 01:09:52,720
interception scripts and these scripts

01:09:50,950 --> 01:09:57,100
allow you to write a little bit of

01:09:52,720 --> 01:10:00,160
Python to customize business logic the

01:09:57,100 --> 01:10:02,260
reason we do this is because we don't

01:10:00,160 --> 01:10:04,570
want you to fork the code not that you

01:10:02,260 --> 01:10:06,430
can't fork the code the code is Apache 2

01:10:04,570 --> 01:10:09,040
license it's on github

01:10:06,430 --> 01:10:12,580
it's all public so you can fork it if

01:10:09,040 --> 01:10:16,030
you want but we don't want you to fork

01:10:12,580 --> 01:10:19,660
it because it becomes hard to update if

01:10:16,030 --> 01:10:21,430
you fork the code then you know and it

01:10:19,660 --> 01:10:23,950
was a security server like the glue

01:10:21,430 --> 01:10:26,500
server we want you to update frequently

01:10:23,950 --> 01:10:28,630
and if you fork the code it becomes

01:10:26,500 --> 01:10:31,150
challenging because you have to when so

01:10:28,630 --> 01:10:35,680
and when there's a new version out you

01:10:31,150 --> 01:10:39,010
have to you know merger changes and

01:10:35,680 --> 01:10:44,650
rebuild and retest and it reduces your

01:10:39,010 --> 01:10:46,900
ability to to keep up to date so what we

01:10:44,650 --> 01:10:52,600
did was we said you know when customers

01:10:46,900 --> 01:10:54,730
would ask us for for customizations or

01:10:52,600 --> 01:10:56,110
when they started forking the code we

01:10:54,730 --> 01:10:57,370
would start asking them well why do you

01:10:56,110 --> 01:10:59,740
want to fork the code what do you want

01:10:57,370 --> 01:11:03,250
to do and we would expose these standard

01:10:59,740 --> 01:11:06,010
interfaces the interfaces are nice

01:11:03,250 --> 01:11:08,230
because they're upgrade friendly so you

01:11:06,010 --> 01:11:10,000
can update the binaries of the glue

01:11:08,230 --> 01:11:12,430
server without impacting the

01:11:10,000 --> 01:11:14,770
customization the most popular of these

01:11:12,430 --> 01:11:17,370
customizations is the authentication

01:11:14,770 --> 01:11:20,670
scripts that allow you to implement

01:11:17,370 --> 01:11:23,110
multi-step authentication workflows and

01:11:20,670 --> 01:11:27,070
there's other there's other ones like

01:11:23,110 --> 01:11:30,640
interest token introspection cash

01:11:27,070 --> 01:11:32,710
refresh authorization consent there's a

01:11:30,640 --> 01:11:33,750
number of session management there's

01:11:32,710 --> 01:11:36,610
there's a number of different

01:11:33,750 --> 01:11:40,510
interception scripts we chose Python

01:11:36,610 --> 01:11:43,120
because well we could let you write Java

01:11:40,510 --> 01:11:44,470
but my feeling was was that I wanted

01:11:43,120 --> 01:11:48,520
something that was more system

01:11:44,470 --> 01:11:50,860
administrator friendly so that if um if

01:11:48,520 --> 01:11:53,650
system ends had to actually like see

01:11:50,860 --> 01:11:55,630
what was going on or maybe forked or add

01:11:53,650 --> 01:11:58,660
a print statement or just I don't know I

01:11:55,630 --> 01:12:01,630
felt like Java was well we love Java and

01:11:58,660 --> 01:12:04,660
glue is basically a Java server we felt

01:12:01,630 --> 01:12:07,210
that sometimes Java is very opaque where

01:12:04,660 --> 01:12:09,400
the code is checked in somewhere the

01:12:07,210 --> 01:12:10,960
system ends or you know they're dropping

01:12:09,400 --> 01:12:12,700
a jar file in the right place they're

01:12:10,960 --> 01:12:14,590
referencing a class name but they might

01:12:12,700 --> 01:12:15,820
not be able to see what's going on and

01:12:14,590 --> 01:12:17,200
we felt that was something like

01:12:15,820 --> 01:12:18,670
authentication

01:12:17,200 --> 01:12:22,030
we wanted to bring in more front and

01:12:18,670 --> 01:12:25,330
center so system and could see actually

01:12:22,030 --> 01:12:27,970
follow the logic in this tiny little

01:12:25,330 --> 01:12:30,580
snippet that I have I just want to bring

01:12:27,970 --> 01:12:32,050
out a couple of points which is that you

01:12:30,580 --> 01:12:33,610
know there's two methods which I'm

01:12:32,050 --> 01:12:35,500
highlighting here one is called

01:12:33,610 --> 01:12:38,230
authenticate which not surprisingly

01:12:35,500 --> 01:12:40,360
returns true or false but the thing I

01:12:38,230 --> 01:12:42,570
wanted to point out is that this step is

01:12:40,360 --> 01:12:46,830
sent into the authenticated method

01:12:42,570 --> 01:12:48,940
remember earlier on I mentioned how we

01:12:46,830 --> 01:12:51,190
wanted to support multi-step

01:12:48,940 --> 01:12:53,350
authentication workflows and then in a

01:12:51,190 --> 01:12:54,850
cluster we don't know which server is

01:12:53,350 --> 01:12:57,280
going to get step one and which server

01:12:54,850 --> 01:13:00,220
is going to get step two so the step is

01:12:57,280 --> 01:13:02,890
sent into the authenticate method and

01:13:00,220 --> 01:13:05,140
then in in in the implementation we

01:13:02,890 --> 01:13:07,060
switch on the step we say if step one we

01:13:05,140 --> 01:13:12,430
do something of step two we do something

01:13:07,060 --> 01:13:14,140
else and likewise when you're

01:13:12,430 --> 01:13:17,080
authenticating a user you're presenting

01:13:14,140 --> 01:13:18,640
more than one page and so in the glue

01:13:17,080 --> 01:13:20,440
server and this authenticated

01:13:18,640 --> 01:13:23,260
interception script there's a method

01:13:20,440 --> 01:13:26,350
called get page for step and so if it's

01:13:23,260 --> 01:13:28,600
in in this particular authentication I I

01:13:26,350 --> 01:13:31,090
was actually this is I pulled this one

01:13:28,600 --> 01:13:33,610
from do authentication do Oh actually

01:13:31,090 --> 01:13:35,710
has a multi-step authentication but in

01:13:33,610 --> 01:13:38,110
step one I do oh we're actually using

01:13:35,710 --> 01:13:40,000
the again just presenting the username

01:13:38,110 --> 01:13:41,500
password page so we use the

01:13:40,000 --> 01:13:44,980
out-of-the-box one for that I was

01:13:41,500 --> 01:13:48,430
working fine but in step 2 Duo gave us

01:13:44,980 --> 01:13:50,500
some JavaScript and so we we built a

01:13:48,430 --> 01:13:52,870
page and we included that JavaScript and

01:13:50,500 --> 01:13:56,350
so and what this is saying is that in

01:13:52,870 --> 01:13:59,590
step two we we present this this other

01:13:56,350 --> 01:14:00,970
page so the idea though is that you're

01:13:59,590 --> 01:14:05,050
able to put the user through multiple

01:14:00,970 --> 01:14:07,330
steps and and you know what we think of

01:14:05,050 --> 01:14:09,370
as a two-step authentication you might

01:14:07,330 --> 01:14:12,340
actually think about that as a four step

01:14:09,370 --> 01:14:15,490
authentication because we present page

01:14:12,340 --> 01:14:18,130
one we process page one we present page

01:14:15,490 --> 01:14:19,990
two we process page two and in the glue

01:14:18,130 --> 01:14:21,700
server there's a pre authentication

01:14:19,990 --> 01:14:24,820
state where you can pass information

01:14:21,700 --> 01:14:29,480
back and forth between the page and and

01:14:24,820 --> 01:14:32,450
the authenticate script and

01:14:29,480 --> 01:14:34,580
that session context is or purchase a

01:14:32,450 --> 01:14:38,600
pre authentication session context is

01:14:34,580 --> 01:14:40,820
useful in duo for example in the page we

01:14:38,600 --> 01:14:45,590
have to send the right notification to

01:14:40,820 --> 01:14:46,940
the right person out of the box one of

01:14:45,590 --> 01:14:48,890
the things I like to point out is that

01:14:46,940 --> 01:14:51,680
you don't have the license to off a

01:14:48,890 --> 01:14:53,360
technology there's quite a bit of open

01:14:51,680 --> 01:14:56,870
standards out there that you can

01:14:53,360 --> 01:14:59,900
leverage glue ships out of the box with

01:14:56,870 --> 01:15:04,330
support for Fito both phyto u2f and

01:14:59,900 --> 01:15:08,390
phyto - OTP is based on open standards

01:15:04,330 --> 01:15:11,930
it's still very useful SMS as much as I

01:15:08,390 --> 01:15:20,510
was knocking it we have a Twilio SMS

01:15:11,930 --> 01:15:21,739
script and smart cards and anyway so

01:15:20,510 --> 01:15:23,900
we're shipping out of the box with a

01:15:21,739 --> 01:15:25,910
bunch of different open standards-based

01:15:23,900 --> 01:15:28,250
two-factor authentication technologies

01:15:25,910 --> 01:15:30,590
you can put to use but I always think

01:15:28,250 --> 01:15:33,650
about to emmaus has really you know two

01:15:30,590 --> 01:15:35,900
challenges one challenge is how to end

01:15:33,650 --> 01:15:38,150
users how do people manage these

01:15:35,900 --> 01:15:39,980
two-factor credentials and the second

01:15:38,150 --> 01:15:43,430
part of the challenge is how do we

01:15:39,980 --> 01:15:46,310
validate these credentials in the IDP so

01:15:43,430 --> 01:15:50,510
the glue server is doing the validation

01:15:46,310 --> 01:15:54,800
part and then the Casa application is is

01:15:50,510 --> 01:15:57,530
doing the third of the end user portal

01:15:54,800 --> 01:15:59,810
part we see how though this is okay this

01:15:57,530 --> 01:16:02,140
brings us right into the live demo we do

01:15:59,810 --> 01:16:04,850
a quick time check 13 minutes

01:16:02,140 --> 01:16:06,110
I'm impressed if you've managed to this

01:16:04,850 --> 01:16:09,260
the stick through this whole

01:16:06,110 --> 01:16:15,350
presentation I'm going to do a quick

01:16:09,260 --> 01:16:22,120
demo of of Casa let me see

01:16:15,350 --> 01:16:24,260
sorry I lost my screen here so let me

01:16:22,120 --> 01:16:28,390
sorry if I'm looking somewhere else

01:16:24,260 --> 01:16:32,450
because I have well let me go like this

01:16:28,390 --> 01:16:34,160
so I think this it's this demo is

01:16:32,450 --> 01:16:37,650
helpful because sometimes it's easier to

01:16:34,160 --> 01:16:39,290
show this Qasim and it is to actually

01:16:37,650 --> 01:16:43,520
[Music]

01:16:39,290 --> 01:16:45,200
I mean what it is so this is the

01:16:43,520 --> 01:16:49,340
application I hope you're seeing this

01:16:45,200 --> 01:16:52,070
it's actually hold on I'm gonna I'm

01:16:49,340 --> 01:16:57,740
gonna redo this not sure you're seeing

01:16:52,070 --> 01:16:59,320
it application window Casa share okay

01:16:57,740 --> 01:17:04,430
there we go

01:16:59,320 --> 01:17:06,110
so so this is a casa support social

01:17:04,430 --> 01:17:09,890
login I'm not going to use that because

01:17:06,110 --> 01:17:12,860
that would skip to factor but so in in

01:17:09,890 --> 01:17:18,560
step one of this authentication I'm just

01:17:12,860 --> 01:17:21,710
using my username password in step two

01:17:18,560 --> 01:17:23,780
Casas my um my token is actually

01:17:21,710 --> 01:17:26,210
blindingly flashing at me right now it

01:17:23,780 --> 01:17:30,800
really wants me to click the button but

01:17:26,210 --> 01:17:32,150
maybe I don't want to use phyto even

01:17:30,800 --> 01:17:36,620
though it's probably the easiest maybe I

01:17:32,150 --> 01:17:39,860
want to use superglue so now I'm getting

01:17:36,620 --> 01:17:41,600
a notification on my phone you probably

01:17:39,860 --> 01:17:42,890
can't read that and just it never

01:17:41,600 --> 01:17:45,410
displays anymore

01:17:42,890 --> 01:17:48,050
um it's asking me can't read that either

01:17:45,410 --> 01:17:53,210
um it's asking me for my fingerprint

01:17:48,050 --> 01:17:54,890
actually and then once it um now it's

01:17:53,210 --> 01:17:56,900
basically it's this is really illegible

01:17:54,890 --> 01:17:59,030
but now it's saying okay what it's

01:17:56,900 --> 01:18:02,810
telling me Mike is logging in from

01:17:59,030 --> 01:18:06,920
Austin Texas and I'll hit up okay that's

01:18:02,810 --> 01:18:10,490
me I'll hit approve and now it should

01:18:06,920 --> 01:18:14,600
let me through so that was a quick demo

01:18:10,490 --> 01:18:16,610
of superglue and I guess of phyto let me

01:18:14,600 --> 01:18:18,260
keep going so this application by the

01:18:16,610 --> 01:18:21,110
way is a hundred percent open source

01:18:18,260 --> 01:18:23,150
actually Casa is now built into the glue

01:18:21,110 --> 01:18:25,040
server so when you do apt install glue

01:18:23,150 --> 01:18:27,920
server and you runs that up it'll ask

01:18:25,040 --> 01:18:30,200
you if you want to install Casa so when

01:18:27,920 --> 01:18:34,460
we say open-source so the code is open

01:18:30,200 --> 01:18:36,590
source the binaries aka the Linux

01:18:34,460 --> 01:18:41,270
packages so we have packages were sent

01:18:36,590 --> 01:18:44,870
to us a bunch of Debian and Red Hat so

01:18:41,270 --> 01:18:47,720
the the code the binaries the Linux

01:18:44,870 --> 01:18:50,180
containers kubernetes it's all it's all

01:18:47,720 --> 01:18:52,250
open source and actually we do community

01:18:50,180 --> 01:18:52,700
support we actually believe that without

01:18:52,250 --> 01:18:55,310
coming

01:18:52,700 --> 01:18:57,140
support wear with glue actually help you

01:18:55,310 --> 01:19:00,670
know contributing it's not really like

01:18:57,140 --> 01:19:03,230
adoptable by the community so it's not a

01:19:00,670 --> 01:19:05,480
complete free card I mean we can't we

01:19:03,230 --> 01:19:08,630
can only do so much support we do our

01:19:05,480 --> 01:19:13,520
best but we are trying to really make

01:19:08,630 --> 01:19:18,770
glue deployable by a large community and

01:19:13,520 --> 01:19:21,590
trying to help so let me actually click

01:19:18,770 --> 01:19:24,290
on so this is sort of like Google it's

01:19:21,590 --> 01:19:27,140
actually a one-page application so I

01:19:24,290 --> 01:19:30,140
have my u2f keys I have my superglue

01:19:27,140 --> 01:19:33,980
devices my OTP tokens all that stuff if

01:19:30,140 --> 01:19:36,170
I click on these links then it gives me

01:19:33,980 --> 01:19:39,020
a view of the page it's really one page

01:19:36,170 --> 01:19:41,090
this is just a view of the page so I

01:19:39,020 --> 01:19:43,280
probably have more phyto tokens than

01:19:41,090 --> 01:19:45,920
anyone else on the planet I try and get

01:19:43,280 --> 01:19:48,020
every one of them but the key the issue

01:19:45,920 --> 01:19:53,750
here is let's say I lose this token I

01:19:48,020 --> 01:19:56,660
can delete it and now let's say I get a

01:19:53,750 --> 01:19:58,790
new token I can hit add token now my

01:19:56,660 --> 01:20:03,460
tokens flashing at me I'll hit the

01:19:58,790 --> 01:20:10,790
button give it a name hyper phyto mini

01:20:03,460 --> 01:20:13,700
I'm happy with add it in so likewise I

01:20:10,790 --> 01:20:16,070
can manage my superglue devices so I

01:20:13,700 --> 01:20:17,630
happen to have two phones I have a

01:20:16,070 --> 01:20:19,610
Google FIFO which I travel

01:20:17,630 --> 01:20:22,250
internationally with and I have a 1 + 5

01:20:19,610 --> 01:20:25,820
t which is which I love it's great great

01:20:22,250 --> 01:20:27,830
phone so if I lose one phone I'm not

01:20:25,820 --> 01:20:30,860
locked out as long as I have my other

01:20:27,830 --> 01:20:32,720
phone maybe if you have a spouse you can

01:20:30,860 --> 01:20:34,970
have your spouse register their phone so

01:20:32,720 --> 01:20:38,600
you have a backup device to get into

01:20:34,970 --> 01:20:41,480
your account oh by the way on super glue

01:20:38,600 --> 01:20:43,850
if you get a new device basically you're

01:20:41,480 --> 01:20:46,460
gonna boot start the app and scan the QR

01:20:43,850 --> 01:20:50,240
code um

01:20:46,460 --> 01:20:52,970
OTP incasa has built-in support for soft

01:20:50,240 --> 01:20:55,250
tokens so I can scan Google

01:20:52,970 --> 01:20:57,050
Authenticator and Sophos and most other

01:20:55,250 --> 01:21:00,470
apps these days let you scan a QR code

01:20:57,050 --> 01:21:03,170
then enter the code tavella t we also

01:21:00,470 --> 01:21:05,840
support hardware tokens so you can enter

01:21:03,170 --> 01:21:06,650
the very user friendly 40 character seed

01:21:05,840 --> 01:21:09,140
value

01:21:06,650 --> 01:21:11,060
kasa also has provisioning API so if you

01:21:09,140 --> 01:21:13,610
want to provision that token and mail it

01:21:11,060 --> 01:21:16,370
out to the user you can do that too but

01:21:13,610 --> 01:21:19,330
you know as I mentioned ODB tokens still

01:21:16,370 --> 01:21:22,070
useful SMS as much as I hate it

01:21:19,330 --> 01:21:23,630
you know might be your best option we

01:21:22,070 --> 01:21:26,120
have a script with Twilio there's

01:21:23,630 --> 01:21:32,570
another script in Glu checked in for for

01:21:26,120 --> 01:21:34,580
SMS gateway we actually casa has

01:21:32,570 --> 01:21:37,130
built-in support for social login

01:21:34,580 --> 01:21:39,050
actually this is really originating the

01:21:37,130 --> 01:21:42,469
glue server support social login through

01:21:39,050 --> 01:21:45,050
password is so technically you can any

01:21:42,469 --> 01:21:50,330
any social provider that has a passport

01:21:45,050 --> 01:21:52,219
Deus strategy can be supported here I'm

01:21:50,330 --> 01:21:56,449
just showing github Twitter and Google

01:21:52,219 --> 01:21:59,360
arbitrarily I mentioned that we had

01:21:56,449 --> 01:22:02,409
consent management so Casa as a user

01:21:59,360 --> 01:22:05,590
facing portal could be useful to do

01:22:02,409 --> 01:22:07,790
other things besides manage

01:22:05,590 --> 01:22:09,739
authentication credentials in this case

01:22:07,790 --> 01:22:11,360
we're saying maybe you've given access

01:22:09,739 --> 01:22:13,280
to an application and you want to revoke

01:22:11,360 --> 01:22:15,469
that access um

01:22:13,280 --> 01:22:17,659
refresh tokens or long lives so maybe

01:22:15,469 --> 01:22:21,380
give the user some way to revoke a long

01:22:17,659 --> 01:22:23,770
web access a long live refresh token by

01:22:21,380 --> 01:22:26,360
the way um Casa has a built in feature

01:22:23,770 --> 01:22:28,070
where you can delegate to users the

01:22:26,360 --> 01:22:30,860
ability to control when their teeth

01:22:28,070 --> 01:22:33,560
doctor authenticated so maybe you always

01:22:30,860 --> 01:22:36,219
want a two-factor authentication a be

01:22:33,560 --> 01:22:40,969
you want to look at the geolocation

01:22:36,219 --> 01:22:42,860
remember we have so we have the IP

01:22:40,969 --> 01:22:45,830
address so from that we can get the

01:22:42,860 --> 01:22:47,570
geolocation another strategy a lot of

01:22:45,830 --> 01:22:49,760
companies use is they write a cookie to

01:22:47,570 --> 01:22:52,190
the browser so maybe we only want to

01:22:49,760 --> 01:22:54,260
make people 202 if a when they're using

01:22:52,190 --> 01:22:55,610
a new browser or device otherwise we

01:22:54,260 --> 01:22:59,900
will let them through if we recognize

01:22:55,610 --> 01:23:02,659
the browser now something else I wanted

01:22:59,900 --> 01:23:05,690
to point out this has built-in password

01:23:02,659 --> 01:23:07,909
reset if you want to do that a lot of

01:23:05,690 --> 01:23:10,580
times people don't want it so there's an

01:23:07,909 --> 01:23:14,300
admin section takasi so one of the cool

01:23:10,580 --> 01:23:16,489
things about Casa is that you can extend

01:23:14,300 --> 01:23:18,440
the functionality of Casa maybe you have

01:23:16,489 --> 01:23:21,670
your own great two-factor authentication

01:23:18,440 --> 01:23:23,890
technology maybe you're a - if a

01:23:21,670 --> 01:23:26,050
you can implement basically features

01:23:23,890 --> 01:23:28,120
that would be present either on the user

01:23:26,050 --> 01:23:30,130
facing side or the admin facing side to

01:23:28,120 --> 01:23:31,870
plugins in fact many of the features

01:23:30,130 --> 01:23:33,010
that I just showed you were implemented

01:23:31,870 --> 01:23:36,190
through plugins

01:23:33,010 --> 01:23:38,470
I think I saw Thomas hatch giving a talk

01:23:36,190 --> 01:23:41,620
about how how plugins are a great way to

01:23:38,470 --> 01:23:44,290
write software we're hoping to see more

01:23:41,620 --> 01:23:49,180
community plugins we've actually created

01:23:44,290 --> 01:23:51,100
a a marketplace site on the casa website

01:23:49,180 --> 01:23:52,870
to allow third parties to promote

01:23:51,100 --> 01:23:55,600
plugins that they write so if you do

01:23:52,870 --> 01:23:59,040
something cool with Casa and it's

01:23:55,600 --> 01:24:02,800
open-source please contribute it one new

01:23:59,040 --> 01:24:04,750
plugin that we're adding is for smart

01:24:02,800 --> 01:24:07,330
card authentication and we were doing a

01:24:04,750 --> 01:24:10,360
little work with Department of Defense

01:24:07,330 --> 01:24:12,670
they of course use smart cards so we're

01:24:10,360 --> 01:24:15,040
adding a smart card casa module we're

01:24:12,670 --> 01:24:17,080
actually adding an email smart module

01:24:15,040 --> 01:24:18,070
another thing I'm aligned but heck

01:24:17,080 --> 01:24:22,870
someone needs it

01:24:18,070 --> 01:24:25,300
so actually in government they are more

01:24:22,870 --> 01:24:26,740
strict about control of access to email

01:24:25,300 --> 01:24:30,130
and it turns out it's not a bad

01:24:26,740 --> 01:24:33,670
Authenticator so somebody is adding an

01:24:30,130 --> 01:24:37,740
email plug-in also controller emails

01:24:33,670 --> 01:24:40,510
another potential way to verify identity

01:24:37,740 --> 01:24:42,700
you can defied you know maybe you don't

01:24:40,510 --> 01:24:44,230
want to offer all these 2fa mechanisms

01:24:42,700 --> 01:24:46,390
maybe you don't want to use super glue

01:24:44,230 --> 01:24:48,870
or maybe you don't want to use OTP or

01:24:46,390 --> 01:24:52,140
email so when when you're setting up

01:24:48,870 --> 01:24:54,720
costly you can say which authentication

01:24:52,140 --> 01:25:01,540
mechanisms do you want to make available

01:24:54,720 --> 01:25:03,160
note that you once you enable once a

01:25:01,540 --> 01:25:05,800
user registers one it won't let you

01:25:03,160 --> 01:25:08,560
unregister it you can do some quick

01:25:05,800 --> 01:25:10,870
branding so maybe you want to change the

01:25:08,560 --> 01:25:13,900
logo maybe you want to change the fav

01:25:10,870 --> 01:25:16,330
icon the text you can do a deeper

01:25:13,900 --> 01:25:20,340
branding by uploading CSS and images and

01:25:16,330 --> 01:25:23,110
stuff like that um and so that's Casa

01:25:20,340 --> 01:25:26,260
actually I'm getting the 3-minute

01:25:23,110 --> 01:25:27,580
warning now oh you guys if you're

01:25:26,260 --> 01:25:30,989
hanging if you actually hung in there

01:25:27,580 --> 01:25:33,360
for this whole presentation I'm shocked

01:25:30,989 --> 01:25:35,270
but we have just a couple of minutes to

01:25:33,360 --> 01:25:43,469
answer questions if anyone has questions

01:25:35,270 --> 01:25:46,920
feel free to type them in now and let me

01:25:43,469 --> 01:25:54,060
go back maybe I will quickly just

01:25:46,920 --> 01:25:58,260
navigate to glued-on org slash Docs so

01:25:54,060 --> 01:26:01,410
installing glue is super easy apt

01:25:58,260 --> 01:26:03,540
install glue server started run setup

01:26:01,410 --> 01:26:07,110
answer some questions it's basically up

01:26:03,540 --> 01:26:11,460
and running glue has a number of

01:26:07,110 --> 01:26:13,710
different distributions so we have a

01:26:11,460 --> 01:26:15,090
docker distribution if you're running it

01:26:13,710 --> 01:26:17,700
on your laptop we're not really

01:26:15,090 --> 01:26:18,989
suggesting this one for production but

01:26:17,700 --> 01:26:20,600
if you have a if you want to run it on

01:26:18,989 --> 01:26:23,550
your laptop there's a docker compose

01:26:20,600 --> 01:26:27,120
distribution we have packages for a bun

01:26:23,550 --> 01:26:30,150
to Debian RedHat cent OS we have so if

01:26:27,120 --> 01:26:34,370
you're clustering the containers then we

01:26:30,150 --> 01:26:36,900
have a kubernetes distribution which is

01:26:34,370 --> 01:26:39,140
you know each service running in its own

01:26:36,900 --> 01:26:45,090
container with lots of organism

01:26:39,140 --> 01:26:48,780
orchestration and helm charts so this is

01:26:45,090 --> 01:26:54,570
all open source I didn't get a chance to

01:26:48,780 --> 01:26:56,340
show Gloup Gloup gateway so let me go

01:26:54,570 --> 01:26:59,900
back to and just give a quick overview

01:26:56,340 --> 01:27:02,370
so glue server is the identity provider

01:26:59,900 --> 01:27:04,350
costs as the user facing portable

01:27:02,370 --> 01:27:07,350
two-factor authentication glue gateways

01:27:04,350 --> 01:27:10,080
the fancy proxy super glue is the mobile

01:27:07,350 --> 01:27:11,760
app cluster manager this is our only

01:27:10,080 --> 01:27:13,380
licensed tool this is if you're not

01:27:11,760 --> 01:27:15,060
using Karuna days but you want to

01:27:13,380 --> 01:27:17,820
cluster with VMs we have a deployment

01:27:15,060 --> 01:27:20,370
tool and we have some client software

01:27:17,820 --> 01:27:22,770
which I won't bore you with but it's

01:27:20,370 --> 01:27:25,530
really targeted more for other

01:27:22,770 --> 01:27:29,100
ecosystems it's actually used to build

01:27:25,530 --> 01:27:32,850
Casas and glue gateway but I think we

01:27:29,100 --> 01:27:35,760
are pulling in right at 3:29 I don't see

01:27:32,850 --> 01:27:38,420
any question so thank you everybody and

01:27:35,760 --> 01:27:41,040
I hope you're able to implement

01:27:38,420 --> 01:27:43,200
two-factor authentication for more of

01:27:41,040 --> 01:27:45,120
your custom applications

01:27:43,200 --> 01:27:48,030
and open-source applications and SAS

01:27:45,120 --> 01:27:52,340
applications so stay safe everyone and

01:27:48,030 --> 01:27:52,340

YouTube URL: https://www.youtube.com/watch?v=9nyg2KL2i7I


