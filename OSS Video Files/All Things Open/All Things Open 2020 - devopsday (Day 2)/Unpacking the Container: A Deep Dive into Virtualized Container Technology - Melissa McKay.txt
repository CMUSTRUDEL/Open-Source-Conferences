Title: Unpacking the Container: A Deep Dive into Virtualized Container Technology - Melissa McKay
Publication date: 2020-12-18
Playlist: All Things Open 2020 - devopsday (Day 2)
Description: 
	Presented by: Melissa McKay, JFrog
Presented at All Things Open 2020 - devopsday (Day 2)

Abstract: Containers have become integral to every phase in the lifecycle of application development. Production grade orchestration tools such as Kubernetes have been built to manage them and container platforms like Docker are becoming commonplace in both testing and development. Web tutorials on how to build and manage simple Docker images abound! But what are containers exactly and why have they become so essential to the DevOps ecosystem? This talk is for those curious minds who want to look below the surface and really understand the mechanics of a technique that has actually been around longer than you may think. Where did Docker come from? What about other projects in the container ecosystem - are there alternatives? What does a Docker image actually look like on the filesystem? How do Docker image layers work? What are cgroups? How are system resources allocated and managed and are there any gotchas that you should be aware of? What about security? How can JFrog Container Registry help me manage my Docker images? After this talk, you will have a solid understanding of the what, how & why of virtualized container technology.
Captions: 
	00:00:05,359 --> 00:00:08,800
hi

00:00:05,680 --> 00:00:10,880
everyone i hope you can hear me okay

00:00:08,800 --> 00:00:12,639
uh welcome to the second day of all

00:00:10,880 --> 00:00:13,519
things open i hope you're enjoying your

00:00:12,639 --> 00:00:15,759
time here

00:00:13,519 --> 00:00:18,080
i know there's a little bit of virtual

00:00:15,759 --> 00:00:19,920
fatigue i'm definitely aware of it so

00:00:18,080 --> 00:00:20,560
it's it's kind of nice to be able to be

00:00:19,920 --> 00:00:22,720
here live

00:00:20,560 --> 00:00:23,920
and to be able to speak to all of you i

00:00:22,720 --> 00:00:25,760
can't see your faces

00:00:23,920 --> 00:00:27,760
unfortunately but i'm hoping in the

00:00:25,760 --> 00:00:29,119
future that maybe we'll cross paths at

00:00:27,760 --> 00:00:31,920
some point

00:00:29,119 --> 00:00:32,960
anyway today at least i'm here live

00:00:31,920 --> 00:00:35,200
virtually

00:00:32,960 --> 00:00:36,480
and uh welcome to this talk on unpacking

00:00:35,200 --> 00:00:38,559
the container

00:00:36,480 --> 00:00:40,000
i'm pretty excited to share with you

00:00:38,559 --> 00:00:42,480
today some things that i've learned

00:00:40,000 --> 00:00:44,239
about containers in my own experience

00:00:42,480 --> 00:00:45,760
and of course they are still all of

00:00:44,239 --> 00:00:47,680
their age right now

00:00:45,760 --> 00:00:49,760
so an important topic to get your head

00:00:47,680 --> 00:00:52,320
wrapped around if you haven't yet

00:00:49,760 --> 00:00:53,760
um my hope is that you come away today

00:00:52,320 --> 00:00:54,480
with a better understanding of the

00:00:53,760 --> 00:00:57,120
history

00:00:54,480 --> 00:00:58,000
behind containers how they actually work

00:00:57,120 --> 00:00:59,520
on your system

00:00:58,000 --> 00:01:01,280
and some of what is really going on

00:00:59,520 --> 00:01:03,359
under the covers

00:01:01,280 --> 00:01:05,360
my idea here is that if you really

00:01:03,359 --> 00:01:07,600
understand how something works

00:01:05,360 --> 00:01:09,760
underneath you will be able to use it

00:01:07,600 --> 00:01:12,240
better and more efficiently

00:01:09,760 --> 00:01:12,880
so that's my goal for you today the

00:01:12,240 --> 00:01:14,720
slides

00:01:12,880 --> 00:01:16,400
that i have for you and additional

00:01:14,720 --> 00:01:19,119
information about this talk will be

00:01:16,400 --> 00:01:21,920
available on jfrog.com show notes

00:01:19,119 --> 00:01:23,840
i've got a link here on this slide i am

00:01:21,920 --> 00:01:24,880
available on twitter you can dm me with

00:01:23,840 --> 00:01:28,479
questions

00:01:24,880 --> 00:01:31,680
um and uh i also

00:01:28,479 --> 00:01:34,799
before we go any further have some swag

00:01:31,680 --> 00:01:35,200
to offer you if you go to this bitly

00:01:34,799 --> 00:01:37,759
link

00:01:35,200 --> 00:01:39,119
you have a chance to win a star wars

00:01:37,759 --> 00:01:41,360
lego set

00:01:39,119 --> 00:01:42,560
i was really disappointed when i found

00:01:41,360 --> 00:01:43,840
out that i couldn't enter

00:01:42,560 --> 00:01:45,680
because i don't have the millennium

00:01:43,840 --> 00:01:47,520
falcon yet and um

00:01:45,680 --> 00:01:49,680
this is a really cool one so don't miss

00:01:47,520 --> 00:01:52,840
out on that take a screenshot take a

00:01:49,680 --> 00:01:54,159
picture of your phone get this link

00:01:52,840 --> 00:01:56,640
folks

00:01:54,159 --> 00:01:58,320
all right um next just a little bit

00:01:56,640 --> 00:02:00,960
about me and my background

00:01:58,320 --> 00:02:03,360
um i'm melissa mckay i started with

00:02:00,960 --> 00:02:05,200
jfrog as a developer advocate in

00:02:03,360 --> 00:02:07,680
february of this year

00:02:05,200 --> 00:02:09,360
so right just right before everything

00:02:07,680 --> 00:02:11,280
shut down and we weren't doing live

00:02:09,360 --> 00:02:14,879
conferences anymore

00:02:11,280 --> 00:02:17,599
um before that i was a developer

00:02:14,879 --> 00:02:18,080
i've been a developer for over 20 years

00:02:17,599 --> 00:02:20,080
and

00:02:18,080 --> 00:02:22,560
most of my experience has been in server

00:02:20,080 --> 00:02:23,920
side development and java but i've had

00:02:22,560 --> 00:02:24,879
the privilege of working on many

00:02:23,920 --> 00:02:26,720
different

00:02:24,879 --> 00:02:28,080
teams over the years in a variety of

00:02:26,720 --> 00:02:29,280
different languages

00:02:28,080 --> 00:02:32,000
different tool sets different

00:02:29,280 --> 00:02:34,239
technologies i've been on large teams

00:02:32,000 --> 00:02:35,360
small teams big companies small

00:02:34,239 --> 00:02:37,680
companies

00:02:35,360 --> 00:02:39,440
definitely had my share of frustrations

00:02:37,680 --> 00:02:42,160
and successes as many of you

00:02:39,440 --> 00:02:43,840
i'm sure and along the way i discovered

00:02:42,160 --> 00:02:45,519
that i really like to speak

00:02:43,840 --> 00:02:46,959
that was something that i did for a

00:02:45,519 --> 00:02:49,519
while in my spare time

00:02:46,959 --> 00:02:50,160
and it's it's work it's a lot of

00:02:49,519 --> 00:02:53,599
research

00:02:50,160 --> 00:02:55,280
and time to put aside so i reached out

00:02:53,599 --> 00:02:56,640
looking for an opportunity to do this

00:02:55,280 --> 00:02:59,040
full time

00:02:56,640 --> 00:03:02,080
and the opportunity of a jfrog came up

00:02:59,040 --> 00:03:02,080
so here i am today

00:03:03,760 --> 00:03:08,560
all right let's get started um first

00:03:06,720 --> 00:03:10,480
we'll begin with a brief history

00:03:08,560 --> 00:03:12,319
to give you some background context

00:03:10,480 --> 00:03:13,680
hopefully this part won't be too boring

00:03:12,319 --> 00:03:15,280
but there's some really important

00:03:13,680 --> 00:03:16,159
milestones in the past that are

00:03:15,280 --> 00:03:17,840
important to know

00:03:16,159 --> 00:03:19,360
about containers and how we got here

00:03:17,840 --> 00:03:21,040
today

00:03:19,360 --> 00:03:23,120
then we'll take a look at the container

00:03:21,040 --> 00:03:25,360
market what's been going on there over

00:03:23,120 --> 00:03:28,159
the last few years

00:03:25,360 --> 00:03:28,640
then we'll get into a real understanding

00:03:28,159 --> 00:03:32,319
of what

00:03:28,640 --> 00:03:32,959
docker actually is and note that docker

00:03:32,319 --> 00:03:35,360
is not

00:03:32,959 --> 00:03:37,280
synonymous with containers it's a

00:03:35,360 --> 00:03:38,799
different thing

00:03:37,280 --> 00:03:40,319
after that we'll be in an excellent

00:03:38,799 --> 00:03:44,159
place to talk about what a

00:03:40,319 --> 00:03:46,720
container actually is then we'll review

00:03:44,159 --> 00:03:48,159
a few gotchas these are things that i

00:03:46,720 --> 00:03:51,760
fell into

00:03:48,159 --> 00:03:54,480
in my experience when i first started

00:03:51,760 --> 00:03:55,680
then we'll i'll give you some ideas on

00:03:54,480 --> 00:03:58,080
how to manage

00:03:55,680 --> 00:04:01,439
your container images that's pretty

00:03:58,080 --> 00:04:04,799
important too and then last but l

00:04:01,439 --> 00:04:07,120
last but not least i'll point you to

00:04:04,799 --> 00:04:07,840
um i'll reshare the link so that you can

00:04:07,120 --> 00:04:11,840
get your

00:04:07,840 --> 00:04:13,280
lego set so without further ado

00:04:11,840 --> 00:04:15,360
let's jump in and start learning about

00:04:13,280 --> 00:04:17,600
containers

00:04:15,360 --> 00:04:19,759
so i've given this talk a few times now

00:04:17,600 --> 00:04:21,040
and it's it's kind of fun

00:04:19,759 --> 00:04:22,479
you're probably wondering right away if

00:04:21,040 --> 00:04:24,720
you're in the right place because this

00:04:22,479 --> 00:04:27,199
is not the picture that you would expect

00:04:24,720 --> 00:04:28,560
in a container talk it's not a shipping

00:04:27,199 --> 00:04:30,479
container

00:04:28,560 --> 00:04:31,600
there's a couple reasons that i chose

00:04:30,479 --> 00:04:34,320
bananas

00:04:31,600 --> 00:04:34,720
and uh that's the theme of this talk um

00:04:34,320 --> 00:04:37,840
there's

00:04:34,720 --> 00:04:39,199
uh a couple reasons first and foremost

00:04:37,840 --> 00:04:39,919
i'm just tired of seeing shipping

00:04:39,199 --> 00:04:42,800
containers

00:04:39,919 --> 00:04:43,360
in every presentation anything about

00:04:42,800 --> 00:04:45,680
docker

00:04:43,360 --> 00:04:47,759
or containerization in general so i

00:04:45,680 --> 00:04:48,400
started a bit of a rebellion and i

00:04:47,759 --> 00:04:50,160
challenge

00:04:48,400 --> 00:04:51,440
all speakers find something else find

00:04:50,160 --> 00:04:54,960
something else other than a

00:04:51,440 --> 00:04:56,800
shipping container i'm second

00:04:54,960 --> 00:04:58,800
this is actually really a story about

00:04:56,800 --> 00:05:00,479
how our industry has adapted to dealing

00:04:58,800 --> 00:05:02,880
with limited resources

00:05:00,479 --> 00:05:04,720
and bananas reminded me of a story that

00:05:02,880 --> 00:05:07,840
my grandfather would tell me

00:05:04,720 --> 00:05:10,880
when i was growing up he grew up in the

00:05:07,840 --> 00:05:13,440
the late 20s early 30s and back then he

00:05:10,880 --> 00:05:16,240
would get a banana once a year

00:05:13,440 --> 00:05:17,199
and he and his siblings would take that

00:05:16,240 --> 00:05:19,120
one banana

00:05:17,199 --> 00:05:20,960
and they would scrape the banana from

00:05:19,120 --> 00:05:22,720
the banana peel to get as much as they

00:05:20,960 --> 00:05:24,080
could off there because you know it was

00:05:22,720 --> 00:05:26,000
limited resources

00:05:24,080 --> 00:05:27,680
a limited resource they wouldn't be

00:05:26,000 --> 00:05:29,520
getting another one until the following

00:05:27,680 --> 00:05:32,320
year

00:05:29,520 --> 00:05:34,400
so it might not be the best analogy but

00:05:32,320 --> 00:05:35,440
i liken that story to how computing

00:05:34,400 --> 00:05:38,320
resources were

00:05:35,440 --> 00:05:39,199
in the 1960s and 70s they were very

00:05:38,320 --> 00:05:42,000
limited

00:05:39,199 --> 00:05:42,880
and very expensive on top of that it

00:05:42,000 --> 00:05:45,360
took forever

00:05:42,880 --> 00:05:47,039
to get any anything done and often a

00:05:45,360 --> 00:05:49,440
computer would be dedicated

00:05:47,039 --> 00:05:50,240
for a long period of time to a single

00:05:49,440 --> 00:05:53,840
task for

00:05:50,240 --> 00:05:53,840
a single user

00:05:54,400 --> 00:05:58,960
obviously the limits on time and

00:05:56,800 --> 00:06:01,600
resources created bottlenecks

00:05:58,960 --> 00:06:02,080
and inefficiency and just being able to

00:06:01,600 --> 00:06:03,840
share

00:06:02,080 --> 00:06:06,000
was not enough there needed to be a

00:06:03,840 --> 00:06:07,120
method to share without getting in each

00:06:06,000 --> 00:06:08,880
other's way

00:06:07,120 --> 00:06:10,720
and without having one person

00:06:08,880 --> 00:06:14,160
inadvertently causing an entire

00:06:10,720 --> 00:06:14,560
system crash for everyone so the need

00:06:14,160 --> 00:06:16,400
for

00:06:14,560 --> 00:06:18,400
better strategies in sharing compute

00:06:16,400 --> 00:06:19,039
resources actually started a path of

00:06:18,400 --> 00:06:22,880
innovation

00:06:19,039 --> 00:06:24,880
that we see massive benefits from today

00:06:22,880 --> 00:06:26,880
there are some key points in time that

00:06:24,880 --> 00:06:29,600
brought us to the state that we are

00:06:26,880 --> 00:06:30,400
in today with containers and i'm going

00:06:29,600 --> 00:06:32,080
to begin

00:06:30,400 --> 00:06:34,639
our container history lesson with

00:06:32,080 --> 00:06:36,319
charoot ch root

00:06:34,639 --> 00:06:37,840
or change root however you want to

00:06:36,319 --> 00:06:40,400
pronounce it

00:06:37,840 --> 00:06:42,000
true was born in 1979 during the

00:06:40,400 --> 00:06:43,600
development of the seventh edition of

00:06:42,000 --> 00:06:46,880
unix and was added to

00:06:43,600 --> 00:06:48,639
bsd in 1982.

00:06:46,880 --> 00:06:50,080
being able to change the apparent root

00:06:48,639 --> 00:06:52,560
directory for a process

00:06:50,080 --> 00:06:53,520
and its children results in a bit of

00:06:52,560 --> 00:06:55,680
isolation

00:06:53,520 --> 00:06:56,880
in order to provide an environment for

00:06:55,680 --> 00:07:02,319
example

00:06:56,880 --> 00:07:02,639
testing a different distribution true

00:07:02,319 --> 00:07:05,759
was

00:07:02,639 --> 00:07:09,280
a great idea it solved a specific

00:07:05,759 --> 00:07:09,919
problem but more was needed the jail

00:07:09,280 --> 00:07:13,520
command

00:07:09,919 --> 00:07:15,360
was introduced by freebsd in 2000

00:07:13,520 --> 00:07:17,440
jail is a little more sophisticated than

00:07:15,360 --> 00:07:19,599
troot in that it includes additional

00:07:17,440 --> 00:07:21,120
features to help with further isolation

00:07:19,599 --> 00:07:23,039
of file systems

00:07:21,120 --> 00:07:24,639
users and networks with the ability to

00:07:23,039 --> 00:07:29,120
assign an ip address

00:07:24,639 --> 00:07:30,960
to each jail in 2004

00:07:29,120 --> 00:07:32,240
solaris zones brought us ahead even

00:07:30,960 --> 00:07:35,199
further by giving an

00:07:32,240 --> 00:07:36,160
application full user process and file

00:07:35,199 --> 00:07:38,960
system space

00:07:36,160 --> 00:07:41,039
and access to system hardware solaris

00:07:38,960 --> 00:07:43,520
zones also introduced the idea of being

00:07:41,039 --> 00:07:47,199
able to snapshot a file system

00:07:43,520 --> 00:07:50,400
you'll see the importance of that later

00:07:47,199 --> 00:07:51,680
in 2006 google jumped in with their

00:07:50,400 --> 00:07:54,160
process containers

00:07:51,680 --> 00:07:55,039
these were later renewed c renamed c

00:07:54,160 --> 00:07:56,800
groups

00:07:55,039 --> 00:08:01,039
which centered around isolating and

00:07:56,800 --> 00:08:01,039
limiting the resource usage of a process

00:08:01,280 --> 00:08:06,960
moving right along in 2008 c groups were

00:08:04,879 --> 00:08:09,680
merged into the linux kernel

00:08:06,960 --> 00:08:11,039
which along with linux namespaces led to

00:08:09,680 --> 00:08:14,240
ibm's development

00:08:11,039 --> 00:08:14,240
of linux containers

00:08:15,199 --> 00:08:21,280
and then 2013 was a big year

00:08:18,800 --> 00:08:22,879
this is when docker came on the scene

00:08:21,280 --> 00:08:23,759
bringing their ability to package

00:08:22,879 --> 00:08:25,599
containers

00:08:23,759 --> 00:08:27,840
and move them from one environment to

00:08:25,599 --> 00:08:27,840
another

00:08:31,039 --> 00:08:36,159
that same year google open sourced their

00:08:34,320 --> 00:08:38,479
letme container that for you

00:08:36,159 --> 00:08:39,680
project that provided applications the

00:08:38,479 --> 00:08:42,640
ability to create

00:08:39,680 --> 00:08:43,200
and manage their own subcontainers from

00:08:42,640 --> 00:08:45,440
here

00:08:43,200 --> 00:08:46,399
we see the use of containers and docker

00:08:45,440 --> 00:08:49,360
specifically

00:08:46,399 --> 00:08:49,360
just explode

00:08:49,519 --> 00:08:53,760
in 2014 docker chose to swap out their

00:08:52,959 --> 00:08:56,240
use of the

00:08:53,760 --> 00:08:57,760
lxc toolset for launching containers

00:08:56,240 --> 00:09:00,959
with lib container

00:08:57,760 --> 00:09:03,600
in order to utilize a native goling

00:09:00,959 --> 00:09:04,800
solution that was something new for me

00:09:03,600 --> 00:09:08,480
that

00:09:04,800 --> 00:09:10,000
they use goaling i'm almost done with

00:09:08,480 --> 00:09:13,040
this history lesson

00:09:10,000 --> 00:09:17,600
but before we move on

00:09:13,040 --> 00:09:17,600
uh there is another event

00:09:18,560 --> 00:09:23,360
june 2015. this is important to know

00:09:22,080 --> 00:09:25,120
about because it'll give you some

00:09:23,360 --> 00:09:26,480
insight into some of the activity and

00:09:25,120 --> 00:09:30,480
the motivations behind

00:09:26,480 --> 00:09:33,519
shifts in the market the open container

00:09:30,480 --> 00:09:34,240
initiative was established this is an

00:09:33,519 --> 00:09:36,240
organization

00:09:34,240 --> 00:09:38,320
under the linux foundation that includes

00:09:36,240 --> 00:09:40,480
members from many major stakeholders

00:09:38,320 --> 00:09:42,320
which includes docker with the goal of

00:09:40,480 --> 00:09:44,399
creating open standards

00:09:42,320 --> 00:09:45,839
for container run times and image

00:09:44,399 --> 00:09:47,360
specification

00:09:45,839 --> 00:09:51,839
we'll talk a little bit more about that

00:09:47,360 --> 00:09:51,839
later as well

00:09:52,800 --> 00:09:56,399
while all of this is happening in the

00:09:54,320 --> 00:09:57,760
container world there are a couple of

00:09:56,399 --> 00:10:00,080
other dates that are going to be

00:09:57,760 --> 00:10:02,240
important to java devs specifically

00:10:00,080 --> 00:10:05,120
since my background was a lot in java

00:10:02,240 --> 00:10:10,560
this was important to me

00:10:05,120 --> 00:10:12,959
java 7 was released in july of 2011.

00:10:10,560 --> 00:10:15,040
notice this is before docker came on the

00:10:12,959 --> 00:10:17,920
scene and before a lot of this work

00:10:15,040 --> 00:10:20,800
um with containers was you know

00:10:17,920 --> 00:10:23,600
available to the public

00:10:20,800 --> 00:10:26,800
work was started on java 8 which was

00:10:23,600 --> 00:10:28,959
released in march of 2014

00:10:26,800 --> 00:10:30,800
so keep this in mind because when you

00:10:28,959 --> 00:10:32,560
start containerizing your java

00:10:30,800 --> 00:10:35,760
applications this little bit of history

00:10:32,560 --> 00:10:35,760
will be important to know

00:10:36,320 --> 00:10:39,760
all right that's it for our history

00:10:37,920 --> 00:10:40,320
lesson let's move on to what's been

00:10:39,760 --> 00:10:43,040
going on

00:10:40,320 --> 00:10:43,839
in the market with containers i did a

00:10:43,040 --> 00:10:46,560
little hunting

00:10:43,839 --> 00:10:47,440
i found that for the last three years

00:10:46,560 --> 00:10:49,120
systig

00:10:47,440 --> 00:10:50,880
a company that provides a really

00:10:49,120 --> 00:10:52,480
powerful monitoring and troubleshooting

00:10:50,880 --> 00:10:54,720
tool for linux a lot of you might

00:10:52,480 --> 00:10:56,959
already be familiar with this product

00:10:54,720 --> 00:10:59,440
they put out a container report based on

00:10:56,959 --> 00:11:01,120
the analysis of their own users

00:10:59,440 --> 00:11:03,920
part of the report includes data on

00:11:01,120 --> 00:11:07,680
container runtimes that are in use

00:11:03,920 --> 00:11:08,800
in 2017 they analyzed data from 45 000

00:11:07,680 --> 00:11:10,880
containers

00:11:08,800 --> 00:11:12,160
there's no graph available for that one

00:11:10,880 --> 00:11:14,000
because 99

00:11:12,160 --> 00:11:16,640
of those containers were docker so they

00:11:14,000 --> 00:11:19,120
didn't bother to split up the results

00:11:16,640 --> 00:11:19,760
in 2018 it became more apparent that

00:11:19,120 --> 00:11:22,480
that would be

00:11:19,760 --> 00:11:23,760
interesting data to show they analyzed

00:11:22,480 --> 00:11:26,560
twice as many containers

00:11:23,760 --> 00:11:27,279
90 000 it still doesn't seem like that

00:11:26,560 --> 00:11:30,480
many

00:11:27,279 --> 00:11:33,519
but in 83 of those were

00:11:30,480 --> 00:11:35,720
docker 12 were core os rocket

00:11:33,519 --> 00:11:37,040
containers four percent meso

00:11:35,720 --> 00:11:39,519
containerization

00:11:37,040 --> 00:11:40,240
or containerizer sorry and one percent

00:11:39,519 --> 00:11:42,399
lxe

00:11:40,240 --> 00:11:44,240
so it looks like they're at this point

00:11:42,399 --> 00:11:45,839
other container run times are starting

00:11:44,240 --> 00:11:48,480
to encroach a little bit

00:11:45,839 --> 00:11:48,480
on docker

00:11:49,120 --> 00:11:53,040
moving to 2019 the latest system

00:11:52,000 --> 00:11:55,279
container report

00:11:53,040 --> 00:11:56,240
included stats from over 2 million

00:11:55,279 --> 00:11:58,320
containers

00:11:56,240 --> 00:11:59,279
now we're talking this is some real data

00:11:58,320 --> 00:12:00,959
here

00:11:59,279 --> 00:12:03,120
docker is still holding relatively

00:12:00,959 --> 00:12:06,560
strong at 79 percent

00:12:03,120 --> 00:12:07,519
18 is container d um it's worth noting

00:12:06,560 --> 00:12:10,000
that container d

00:12:07,519 --> 00:12:11,839
is actually a runtime that docker builds

00:12:10,000 --> 00:12:15,040
on top of

00:12:11,839 --> 00:12:16,880
the last four percent is cryo

00:12:15,040 --> 00:12:18,720
i don't know that there is enough data

00:12:16,880 --> 00:12:20,320
here to determine whether docker will

00:12:18,720 --> 00:12:21,920
stay on top in the future

00:12:20,320 --> 00:12:24,720
or if something completely different

00:12:21,920 --> 00:12:26,560
will prevail that remains to be seen

00:12:24,720 --> 00:12:28,079
but this data is interesting especially

00:12:26,560 --> 00:12:30,399
because of what's been happening over

00:12:28,079 --> 00:12:32,320
the last few years

00:12:30,399 --> 00:12:33,839
another thing to note here and it's kind

00:12:32,320 --> 00:12:35,839
of a sad story

00:12:33,839 --> 00:12:37,200
notice that rocket core os rocket

00:12:35,839 --> 00:12:40,240
containers disappeared

00:12:37,200 --> 00:12:42,160
at this point from the graph core os was

00:12:40,240 --> 00:12:44,000
acquired by red hat at the beginning of

00:12:42,160 --> 00:12:46,079
00:12:44,000 --> 00:12:47,760
prior to that rocket was accepted to the

00:12:46,079 --> 00:12:50,000
cncf

00:12:47,760 --> 00:12:51,519
as an incubating project and looked like

00:12:50,000 --> 00:12:54,240
a promising competitor

00:12:51,519 --> 00:12:55,200
to docker's container d however since

00:12:54,240 --> 00:12:56,720
that acquisition

00:12:55,200 --> 00:12:59,839
the development of the project went

00:12:56,720 --> 00:13:02,720
dormant and in mid 2019

00:12:59,839 --> 00:13:03,519
rocket was archived by the cncf in

00:13:02,720 --> 00:13:07,519
february

00:13:03,519 --> 00:13:09,519
2020 this year the project was ended

00:13:07,519 --> 00:13:11,839
now that i've introduced a few of these

00:13:09,519 --> 00:13:14,240
other container runtimes

00:13:11,839 --> 00:13:15,839
that exist out there besides docker it's

00:13:14,240 --> 00:13:16,639
time to start talking about what a

00:13:15,839 --> 00:13:19,600
container

00:13:16,639 --> 00:13:20,399
actually is and what docker actually

00:13:19,600 --> 00:13:22,240
provides

00:13:20,399 --> 00:13:24,880
in order to appreciate the differences

00:13:22,240 --> 00:13:24,880
between them

00:13:26,560 --> 00:13:33,120
so what exactly is docker anyway

00:13:30,320 --> 00:13:34,959
this is key what docker had over the

00:13:33,120 --> 00:13:37,519
other players in the container game

00:13:34,959 --> 00:13:38,320
was a focus on commoditizing a complete

00:13:37,519 --> 00:13:40,079
solution

00:13:38,320 --> 00:13:42,480
that made it easy for developers to

00:13:40,079 --> 00:13:46,079
package and deploy their applications

00:13:42,480 --> 00:13:48,399
once containers became easy to use

00:13:46,079 --> 00:13:50,480
we all witnessed that explosion of tools

00:13:48,399 --> 00:13:52,880
and resources around containers

00:13:50,480 --> 00:13:55,680
and the docker image format rose to

00:13:52,880 --> 00:13:58,320
become a de facto standard in the market

00:13:55,680 --> 00:14:00,480
the stats that i showed from systig are

00:13:58,320 --> 00:14:02,079
specific to container runtimes

00:14:00,480 --> 00:14:03,760
that terminology is important to

00:14:02,079 --> 00:14:05,360
understand here

00:14:03,760 --> 00:14:07,199
i'll explain the pieces and parts

00:14:05,360 --> 00:14:09,040
involved in working with containers

00:14:07,199 --> 00:14:11,120
and you'll immediately understand why

00:14:09,040 --> 00:14:13,760
docker sucked up the market

00:14:11,120 --> 00:14:13,760
so fast

00:14:15,600 --> 00:14:19,040
as users let's think about what we

00:14:18,000 --> 00:14:22,079
actually need

00:14:19,040 --> 00:14:23,920
to get our apps up and running out there

00:14:22,079 --> 00:14:26,320
every innovation that is coming out of

00:14:23,920 --> 00:14:28,880
this space is purely based on

00:14:26,320 --> 00:14:30,639
users needs and wants whatever the

00:14:28,880 --> 00:14:33,680
motivation behind it if you've got

00:14:30,639 --> 00:14:35,519
those motivations um bad enough there's

00:14:33,680 --> 00:14:37,040
a huge opportunity there for solution

00:14:35,519 --> 00:14:39,360
providers

00:14:37,040 --> 00:14:40,160
that's a common sense thing maybe not

00:14:39,360 --> 00:14:42,480
worth saying

00:14:40,160 --> 00:14:44,079
but so often we find ourselves getting

00:14:42,480 --> 00:14:46,160
so far down into the nitty-gritty

00:14:44,079 --> 00:14:48,079
details that we lose sight of the actual

00:14:46,160 --> 00:14:49,839
problem we are trying to solve

00:14:48,079 --> 00:14:52,240
and this leads to a ton of missed and

00:14:49,839 --> 00:14:54,639
overlooked opportunities

00:14:52,240 --> 00:14:57,519
so here's a list of needs that are

00:14:54,639 --> 00:14:59,360
broken up into discrete features

00:14:57,519 --> 00:15:01,199
first and foremost we need that

00:14:59,360 --> 00:15:02,560
container itself

00:15:01,199 --> 00:15:04,880
some of you might be asking about

00:15:02,560 --> 00:15:07,040
virtual machines at this point

00:15:04,880 --> 00:15:09,040
discussing vms is out of the scope of

00:15:07,040 --> 00:15:10,720
this session so i'm not going to go deep

00:15:09,040 --> 00:15:11,680
into the differences between vms and

00:15:10,720 --> 00:15:14,079
containers

00:15:11,680 --> 00:15:15,279
or why you would use one over the other

00:15:14,079 --> 00:15:17,440
the one thing i will say

00:15:15,279 --> 00:15:19,279
is that a virtual machine is not

00:15:17,440 --> 00:15:21,519
synonymous with a container

00:15:19,279 --> 00:15:24,000
the biggest difference being that a vm

00:15:21,519 --> 00:15:26,560
actually includes an entire os

00:15:24,000 --> 00:15:27,279
all to itself containers share the

00:15:26,560 --> 00:15:30,639
systems

00:15:27,279 --> 00:15:32,399
os the point of the container

00:15:30,639 --> 00:15:34,560
is to be lightweight and have the

00:15:32,399 --> 00:15:35,040
ability to move from one environment to

00:15:34,560 --> 00:15:37,839
another

00:15:35,040 --> 00:15:39,199
seamlessly and quickly that tends to be

00:15:37,839 --> 00:15:41,360
the biggest difference between

00:15:39,199 --> 00:15:43,440
containers and vms

00:15:41,360 --> 00:15:45,040
that said i know there's a ton of

00:15:43,440 --> 00:15:46,240
developments going on right now in the

00:15:45,040 --> 00:15:49,440
vm space

00:15:46,240 --> 00:15:52,240
but that's a topic for another time

00:15:49,440 --> 00:15:56,240
so the rest of this list we need an

00:15:52,240 --> 00:15:58,399
image format to define a container

00:15:56,240 --> 00:16:00,959
we need a way to build an image of a

00:15:58,399 --> 00:16:05,279
container

00:16:00,959 --> 00:16:08,079
we need a way to manage images

00:16:05,279 --> 00:16:09,120
we need a way to distribute and share

00:16:08,079 --> 00:16:13,360
our images

00:16:09,120 --> 00:16:13,360
with our teams or externally

00:16:13,440 --> 00:16:20,800
we need a way to create launch

00:16:16,800 --> 00:16:22,880
and run a container environment

00:16:20,800 --> 00:16:25,519
and we need a way to manage the life

00:16:22,880 --> 00:16:27,920
cycle of the running containers

00:16:25,519 --> 00:16:28,639
i didn't even get into orchestration or

00:16:27,920 --> 00:16:32,079
anything

00:16:28,639 --> 00:16:36,079
but this is plenty to to prove my point

00:16:32,079 --> 00:16:36,639
about docker so docker was ready with an

00:16:36,079 --> 00:16:39,519
answer

00:16:36,639 --> 00:16:40,880
for everything um you want to start

00:16:39,519 --> 00:16:43,440
using containers

00:16:40,880 --> 00:16:44,240
well here's docker engine use docker

00:16:43,440 --> 00:16:46,639
engine

00:16:44,240 --> 00:16:47,920
you need an image format well here's a

00:16:46,639 --> 00:16:50,720
docker image format

00:16:47,920 --> 00:16:51,279
all ready for you you need a way to

00:16:50,720 --> 00:16:54,160
build

00:16:51,279 --> 00:16:54,720
an image well just create a docker file

00:16:54,160 --> 00:16:58,560
and call

00:16:54,720 --> 00:17:02,079
docker build you want to manage images

00:16:58,560 --> 00:17:07,280
sure call docker images or

00:17:02,079 --> 00:17:10,079
docker rm for removing images

00:17:07,280 --> 00:17:11,760
you want to share your images or use an

00:17:10,079 --> 00:17:14,720
image from someone else

00:17:11,760 --> 00:17:15,839
call docker push or dock or pull oh and

00:17:14,720 --> 00:17:17,839
there's docker hub

00:17:15,839 --> 00:17:19,039
where you can store and share your

00:17:17,839 --> 00:17:21,919
images with you know

00:17:19,039 --> 00:17:21,919
external teams

00:17:22,240 --> 00:17:26,079
you need a way to launch run and manage

00:17:24,160 --> 00:17:28,640
your containers in their life cycle

00:17:26,079 --> 00:17:30,480
we'll call docker run docker stop or

00:17:28,640 --> 00:17:32,880
docker ps

00:17:30,480 --> 00:17:34,720
docker succeeded in quickly meeting the

00:17:32,880 --> 00:17:36,400
immediate needs of a container hungry

00:17:34,720 --> 00:17:38,880
market

00:17:36,400 --> 00:17:40,799
on top of that the tool sets that docker

00:17:38,880 --> 00:17:43,120
provided made it really easy

00:17:40,799 --> 00:17:44,799
for developers it was enough to walk

00:17:43,120 --> 00:17:46,880
away with a tremendous part

00:17:44,799 --> 00:17:48,799
of the market share all the way down the

00:17:46,880 --> 00:17:51,039
aisle i hope you appreciate this

00:17:48,799 --> 00:17:53,039
banana picture took a while to find

00:17:51,039 --> 00:17:55,520
something that was

00:17:53,039 --> 00:17:55,520
relatable

00:17:56,960 --> 00:18:00,160
remember in our history lesson when i

00:17:58,640 --> 00:18:01,360
spoke about the open container

00:18:00,160 --> 00:18:03,200
initiative

00:18:01,360 --> 00:18:05,600
out of all of those features that we

00:18:03,200 --> 00:18:08,080
just discussed that docker offers you

00:18:05,600 --> 00:18:10,000
there are two that were taken up for the

00:18:08,080 --> 00:18:12,080
cause by the oci

00:18:10,000 --> 00:18:13,760
the image format and the container

00:18:12,080 --> 00:18:16,240
runtime

00:18:13,760 --> 00:18:17,760
this is again more of this terminology

00:18:16,240 --> 00:18:19,600
around containers

00:18:17,760 --> 00:18:21,600
docker did quite a bit of reorganizing

00:18:19,600 --> 00:18:22,720
their code base they developed some

00:18:21,600 --> 00:18:25,679
extractions

00:18:22,720 --> 00:18:28,240
pulling out discrete functionality they

00:18:25,679 --> 00:18:31,520
are a heavy contributor to the oci

00:18:28,240 --> 00:18:34,960
and they gave docker v2 image spec

00:18:31,520 --> 00:18:38,080
as a basis for the oci image spec

00:18:34,960 --> 00:18:38,720
and run c which was contributed as a

00:18:38,080 --> 00:18:43,039
reference

00:18:38,720 --> 00:18:44,640
implementation of the oci runtime spec

00:18:43,039 --> 00:18:46,400
there are quite a few other container

00:18:44,640 --> 00:18:48,559
runtimes you might see out there

00:18:46,400 --> 00:18:50,240
including container d rocket which we've

00:18:48,559 --> 00:18:52,320
discussed cryo and

00:18:50,240 --> 00:18:54,400
kata all with various levels of features

00:18:52,320 --> 00:18:56,880
for specific use cases

00:18:54,400 --> 00:18:59,039
it's worth pointing out that um again

00:18:56,880 --> 00:18:59,600
container d was actually contributed by

00:18:59,039 --> 00:19:02,080
docker

00:18:59,600 --> 00:19:02,960
to the cncf the cloud native computing

00:19:02,080 --> 00:19:06,400
foundation

00:19:02,960 --> 00:19:06,720
and internally uses run c container d

00:19:06,400 --> 00:19:08,559
has

00:19:06,720 --> 00:19:10,080
also been integrated into the latest

00:19:08,559 --> 00:19:13,120
versions of docker it's actually

00:19:10,080 --> 00:19:16,000
been in use since version 1.11

00:19:13,120 --> 00:19:18,400
which came out in 2016 so it's it's been

00:19:16,000 --> 00:19:20,400
around a while now

00:19:18,400 --> 00:19:22,400
the next few years will be interesting

00:19:20,400 --> 00:19:24,080
to observe what happens with these specs

00:19:22,400 --> 00:19:26,000
and how the oci moves forward

00:19:24,080 --> 00:19:28,000
with this there's quite a range of

00:19:26,000 --> 00:19:29,600
differing opinions about what should and

00:19:28,000 --> 00:19:32,080
should not be in the standard

00:19:29,600 --> 00:19:33,039
for a container runtime we're in a

00:19:32,080 --> 00:19:35,440
situation where

00:19:33,039 --> 00:19:38,160
using a runtime that only meets the

00:19:35,440 --> 00:19:40,799
requirements of the oci spec doesn't

00:19:38,160 --> 00:19:43,760
seem to be enough

00:19:40,799 --> 00:19:44,559
clearly by the use of the full full

00:19:43,760 --> 00:19:48,799
docker

00:19:44,559 --> 00:19:50,640
ecosystem i've added a couple links here

00:19:48,799 --> 00:19:52,640
that are excellent starting places to

00:19:50,640 --> 00:19:53,919
learn more about container runtimes if

00:19:52,640 --> 00:19:55,120
you're curious

00:19:53,919 --> 00:19:56,960
again these slides will be made

00:19:55,120 --> 00:20:01,120
available later and

00:19:56,960 --> 00:20:03,200
after the after the conference as well

00:20:01,120 --> 00:20:05,840
the second one is the beginning of a

00:20:03,200 --> 00:20:08,880
blog series by ian lewis who's a

00:20:05,840 --> 00:20:09,760
google dev advocate the first subtitle

00:20:08,880 --> 00:20:12,480
in that blog

00:20:09,760 --> 00:20:14,720
is is literally why are container

00:20:12,480 --> 00:20:18,080
runtimes so confusing

00:20:14,720 --> 00:20:21,440
and i read that and immediately agreed

00:20:18,080 --> 00:20:22,799
yes you know why is that anyway ian does

00:20:21,440 --> 00:20:26,720
a really good job of

00:20:22,799 --> 00:20:26,720
succinctly explaining some of this

00:20:29,039 --> 00:20:32,400
now that we understand all that docker

00:20:31,360 --> 00:20:33,760
entails

00:20:32,400 --> 00:20:36,400
and some of what's going on in the

00:20:33,760 --> 00:20:37,200
market let's focus on just the container

00:20:36,400 --> 00:20:39,120
itself

00:20:37,200 --> 00:20:41,200
and what that actually looks like on

00:20:39,120 --> 00:20:41,840
your system i'll show you how it's

00:20:41,200 --> 00:20:43,440
stored

00:20:41,840 --> 00:20:45,280
and what's actually happening under the

00:20:43,440 --> 00:20:46,799
covers and you'll discover

00:20:45,280 --> 00:20:48,400
pretty quickly that images and

00:20:46,799 --> 00:20:50,880
containers aren't really all that

00:20:48,400 --> 00:20:50,880
magical

00:20:52,080 --> 00:20:57,039
my first experience with containers was

00:20:54,799 --> 00:20:58,159
as a new developer on a project with a

00:20:57,039 --> 00:21:01,360
tight deadline

00:20:58,159 --> 00:21:04,000
of course i think many maybe all

00:21:01,360 --> 00:21:04,960
software projects have tight deadlines i

00:21:04,000 --> 00:21:08,000
could argue

00:21:04,960 --> 00:21:09,360
yeah that describes most projects the

00:21:08,000 --> 00:21:11,840
best course of action for me

00:21:09,360 --> 00:21:13,200
usually is to just jump in get started

00:21:11,840 --> 00:21:15,679
getting something up and

00:21:13,200 --> 00:21:17,600
running on my local system i learned

00:21:15,679 --> 00:21:19,440
best by doing

00:21:17,600 --> 00:21:21,200
the doctor documentation is actually

00:21:19,440 --> 00:21:23,600
really good for this so if you find

00:21:21,200 --> 00:21:25,360
yourself in a similar position

00:21:23,600 --> 00:21:26,720
start with their getting started docs

00:21:25,360 --> 00:21:28,880
i've linked those here

00:21:26,720 --> 00:21:30,080
on this slide going through that guide

00:21:28,880 --> 00:21:31,440
will help you get

00:21:30,080 --> 00:21:34,720
comfortable with some of the docker

00:21:31,440 --> 00:21:37,039
commands you're going to need

00:21:34,720 --> 00:21:39,120
the first thing to note is that a docker

00:21:37,039 --> 00:21:42,240
image is really just a tarball

00:21:39,120 --> 00:21:44,159
of a complete file system remember in

00:21:42,240 --> 00:21:45,520
our history lesson when i talked about

00:21:44,159 --> 00:21:48,720
the ability to snapshot

00:21:45,520 --> 00:21:50,480
a file system that's what this is when

00:21:48,720 --> 00:21:52,240
an image is unpacked

00:21:50,480 --> 00:21:54,880
it's actually just thrown into its own

00:21:52,240 --> 00:21:58,159
directory which becomes its root

00:21:54,880 --> 00:22:00,159
file system the second

00:21:58,159 --> 00:22:01,360
is that processes that are involved in

00:22:00,159 --> 00:22:04,400
running the containers

00:22:01,360 --> 00:22:06,159
are just regular linux processes

00:22:04,400 --> 00:22:08,320
on top of that there are just a few

00:22:06,159 --> 00:22:08,799
linux features that are used together in

00:22:08,320 --> 00:22:11,039
a way

00:22:08,799 --> 00:22:13,039
to achieve the isolation that we want

00:22:11,039 --> 00:22:15,600
from containers

00:22:13,039 --> 00:22:16,799
namespaces are one of those that's an

00:22:15,600 --> 00:22:18,799
important ingredient

00:22:16,799 --> 00:22:21,360
because it's used to provide virtual

00:22:18,799 --> 00:22:23,600
separation between the containers

00:22:21,360 --> 00:22:24,480
this is how the processes inside a

00:22:23,600 --> 00:22:27,120
container

00:22:24,480 --> 00:22:29,280
don't interfere with the host or

00:22:27,120 --> 00:22:31,600
processes inside a different container

00:22:29,280 --> 00:22:33,600
on the same host

00:22:31,600 --> 00:22:35,919
here you can see the namespaces that

00:22:33,600 --> 00:22:39,200
were set up for a postgres container

00:22:35,919 --> 00:22:39,200
that i have on my box

00:22:39,760 --> 00:22:45,360
the c groups functionality is integral

00:22:43,200 --> 00:22:47,919
to constraining how much a container can

00:22:45,360 --> 00:22:51,280
use things like your cpu

00:22:47,919 --> 00:22:54,000
memory network bandwidth etc

00:22:51,280 --> 00:22:56,000
i can set these constraints by including

00:22:54,000 --> 00:22:59,360
options on the docker run command

00:22:56,000 --> 00:23:00,080
when launching an image here you can see

00:22:59,360 --> 00:23:02,640
that

00:23:00,080 --> 00:23:05,600
i've constrained the memory usage limit

00:23:02,640 --> 00:23:09,039
on one of my containers

00:23:05,600 --> 00:23:10,159
there's an interesting note about java

00:23:09,039 --> 00:23:14,320
that i'll bring up

00:23:10,159 --> 00:23:14,320
in a bit about this particular subject

00:23:16,559 --> 00:23:19,919
i want to quickly gloss over some file

00:23:18,880 --> 00:23:22,799
system details

00:23:19,919 --> 00:23:24,640
on this slide where containers and

00:23:22,799 --> 00:23:25,679
images are actually stored on your file

00:23:24,640 --> 00:23:29,039
system

00:23:25,679 --> 00:23:32,000
once you install docker

00:23:29,039 --> 00:23:33,919
if you run the command docker info that

00:23:32,000 --> 00:23:36,000
will spit out a bunch of information

00:23:33,919 --> 00:23:37,840
about your installation including the

00:23:36,000 --> 00:23:39,760
docker root directory

00:23:37,840 --> 00:23:41,919
if you hadn't haven't had a chance or

00:23:39,760 --> 00:23:43,760
haven't done it yet um

00:23:41,919 --> 00:23:45,200
go and explore your file system this is

00:23:43,760 --> 00:23:46,240
definitely worth doing just so you know

00:23:45,200 --> 00:23:47,600
where you are

00:23:46,240 --> 00:23:49,760
and what's happening under the covers

00:23:47,600 --> 00:23:51,679
here um

00:23:49,760 --> 00:23:53,200
so that docker root directory that's

00:23:51,679 --> 00:23:55,120
where most everything you're going to

00:23:53,200 --> 00:23:56,080
care about regarding your docker images

00:23:55,120 --> 00:23:58,799
and containers

00:23:56,080 --> 00:23:59,360
that's where it's going to be stored uh

00:23:58,799 --> 00:24:01,520
one

00:23:59,360 --> 00:24:02,880
thing if you're on a mac your containers

00:24:01,520 --> 00:24:04,000
are actually going to be running in a

00:24:02,880 --> 00:24:06,799
tiny vm

00:24:04,000 --> 00:24:08,000
so you're going to need to use a tool

00:24:06,799 --> 00:24:10,080
like screen

00:24:08,000 --> 00:24:12,080
to get in there and get to the docker

00:24:10,080 --> 00:24:13,919
root directory to look around

00:24:12,080 --> 00:24:15,919
and if you're not familiar with how to

00:24:13,919 --> 00:24:18,240
use the screen command

00:24:15,919 --> 00:24:19,520
definitely google that get familiar with

00:24:18,240 --> 00:24:21,679
it first

00:24:19,520 --> 00:24:24,240
it will mess up your text display pretty

00:24:21,679 --> 00:24:26,960
good if you don't enter an exit screen

00:24:24,240 --> 00:24:26,960
in the right way

00:24:28,880 --> 00:24:32,000
this slide shows how you can get

00:24:31,360 --> 00:24:34,000
information

00:24:32,000 --> 00:24:35,039
about the images that you have stored on

00:24:34,000 --> 00:24:37,520
your system

00:24:35,039 --> 00:24:38,880
first i listed my available images under

00:24:37,520 --> 00:24:41,360
the docker images

00:24:38,880 --> 00:24:42,159
command i actually have several

00:24:41,360 --> 00:24:44,320
installed

00:24:42,159 --> 00:24:45,360
but i'm just showing the first couple in

00:24:44,320 --> 00:24:48,320
my list

00:24:45,360 --> 00:24:49,120
for you to see using that the docker

00:24:48,320 --> 00:24:51,440
inspect

00:24:49,120 --> 00:24:54,240
command i can inspect any image i like

00:24:51,440 --> 00:24:56,320
using its image id

00:24:54,240 --> 00:24:58,000
this um will spit out a ton of

00:24:56,320 --> 00:24:59,360
interesting information

00:24:58,000 --> 00:25:01,279
what i want to highlight here though is

00:24:59,360 --> 00:25:03,520
this graph driver section

00:25:01,279 --> 00:25:05,679
which contains to the paths it contains

00:25:03,520 --> 00:25:07,840
the paths to the directories where all

00:25:05,679 --> 00:25:09,440
of the layers that belong to this image

00:25:07,840 --> 00:25:11,679
live

00:25:09,440 --> 00:25:14,000
docker that's another term we need to

00:25:11,679 --> 00:25:14,799
learn here docker images are composed of

00:25:14,000 --> 00:25:16,880
layers

00:25:14,799 --> 00:25:19,279
which represent instructions in the

00:25:16,880 --> 00:25:21,120
docker file that was used to build the

00:25:19,279 --> 00:25:23,760
image originally

00:25:21,120 --> 00:25:24,960
these layers actually translate into

00:25:23,760 --> 00:25:27,360
directories

00:25:24,960 --> 00:25:29,200
these layers can be shared across images

00:25:27,360 --> 00:25:32,320
and the point is to save

00:25:29,200 --> 00:25:34,799
space the

00:25:32,320 --> 00:25:35,840
lower dir mergeder and upper dir

00:25:34,799 --> 00:25:38,159
sections

00:25:35,840 --> 00:25:39,840
these are important to know the lower

00:25:38,159 --> 00:25:42,320
dir directory contains

00:25:39,840 --> 00:25:43,440
all of the directories or layers that we

00:25:42,320 --> 00:25:45,279
just talked about

00:25:43,440 --> 00:25:47,600
that were used to build the original

00:25:45,279 --> 00:25:49,919
image

00:25:47,600 --> 00:25:51,840
these are read only important to

00:25:49,919 --> 00:25:54,159
remember that

00:25:51,840 --> 00:25:56,320
the upper dirt directory contains all of

00:25:54,159 --> 00:25:59,440
the content that has been modified

00:25:56,320 --> 00:26:01,840
while the container is running if mautic

00:25:59,440 --> 00:26:02,720
if modifications are needed for a read

00:26:01,840 --> 00:26:05,360
only layer

00:26:02,720 --> 00:26:07,520
in the lower der section then that layer

00:26:05,360 --> 00:26:09,440
is copied into the upper dir

00:26:07,520 --> 00:26:10,960
where it can be written to this is

00:26:09,440 --> 00:26:13,840
called a copy on write

00:26:10,960 --> 00:26:16,000
operation it's important to remember

00:26:13,840 --> 00:26:18,799
that the data in the upper dir

00:26:16,000 --> 00:26:20,720
is ephemeral data it only lives as long

00:26:18,799 --> 00:26:22,799
as the container lives

00:26:20,720 --> 00:26:24,799
in fact if you have data that you intend

00:26:22,799 --> 00:26:27,600
to keep you should utilize

00:26:24,799 --> 00:26:30,159
the volume features of docker and mount

00:26:27,600 --> 00:26:32,640
a location that will stick around

00:26:30,159 --> 00:26:34,880
even after the container dies this is

00:26:32,640 --> 00:26:38,240
how most containers running a database

00:26:34,880 --> 00:26:41,039
for example are run

00:26:38,240 --> 00:26:43,440
lastly the mergeder it's kind of like a

00:26:41,039 --> 00:26:46,960
virtual directory that combines

00:26:43,440 --> 00:26:49,679
everything from lower dir and upper der

00:26:46,960 --> 00:26:52,000
the way the union file system works is

00:26:49,679 --> 00:26:55,440
that any edited layers that were copied

00:26:52,000 --> 00:26:56,159
into upper dir from loader will overlay

00:26:55,440 --> 00:26:59,360
layers

00:26:56,159 --> 00:27:01,760
in the low order so the merged er

00:26:59,360 --> 00:27:02,799
is actually when you when you log into a

00:27:01,760 --> 00:27:05,440
container

00:27:02,799 --> 00:27:08,159
that's what you see you see everything

00:27:05,440 --> 00:27:08,159
merged together

00:27:11,360 --> 00:27:14,799
this slide shows i actually have a few

00:27:13,919 --> 00:27:17,039
containers

00:27:14,799 --> 00:27:19,039
currently running on my system two of

00:27:17,039 --> 00:27:19,760
them are my local jfrog container

00:27:19,039 --> 00:27:21,600
registry

00:27:19,760 --> 00:27:22,880
installation which includes a container

00:27:21,600 --> 00:27:25,919
for artifactory

00:27:22,880 --> 00:27:28,080
and a container for a postgres database

00:27:25,919 --> 00:27:30,399
the other is a simple test container

00:27:28,080 --> 00:27:33,039
that i was playing around with

00:27:30,399 --> 00:27:34,080
note that the container ids of these

00:27:33,039 --> 00:27:36,480
running containers

00:27:34,080 --> 00:27:37,919
match up with the container subdirectory

00:27:36,480 --> 00:27:40,559
names

00:27:37,919 --> 00:27:41,279
something to remember here is if you

00:27:40,559 --> 00:27:44,159
stop

00:27:41,279 --> 00:27:46,080
a container that corresponding directory

00:27:44,159 --> 00:27:48,320
doesn't automatically go away

00:27:46,080 --> 00:27:50,480
until the container is actually removed

00:27:48,320 --> 00:27:52,480
with the docker remove command

00:27:50,480 --> 00:27:54,640
so if you have stopped containers lying

00:27:52,480 --> 00:27:56,559
around that never get cleaned up

00:27:54,640 --> 00:27:58,320
you might see your available space start

00:27:56,559 --> 00:28:00,960
to dwindle

00:27:58,320 --> 00:28:01,840
there's a docker prune command that you

00:28:00,960 --> 00:28:04,080
can run

00:28:01,840 --> 00:28:06,000
that will help clean things up like this

00:28:04,080 --> 00:28:08,240
or you can launch a container with

00:28:06,000 --> 00:28:09,039
a flag to indicate that it should be

00:28:08,240 --> 00:28:11,520
removed

00:28:09,039 --> 00:28:12,399
when it's finished running now if you're

00:28:11,520 --> 00:28:15,279
using

00:28:12,399 --> 00:28:16,720
anything like any orchestration system

00:28:15,279 --> 00:28:18,640
like kubernetes

00:28:16,720 --> 00:28:19,760
there are ways in there that you can

00:28:18,640 --> 00:28:23,360
indicate that

00:28:19,760 --> 00:28:23,360
you want these containers cleaned up

00:28:29,200 --> 00:28:34,159
all right the tool sets around building

00:28:32,240 --> 00:28:36,960
and running images and containers

00:28:34,159 --> 00:28:38,799
have made things so easy that it is also

00:28:36,960 --> 00:28:42,240
easy to shoot yourself in the foot

00:28:38,799 --> 00:28:44,000
in a few places and here are a few of

00:28:42,240 --> 00:28:48,159
the most common gotchas

00:28:44,000 --> 00:28:49,840
plus one jvm java specific gotcha that i

00:28:48,159 --> 00:28:51,440
ran into almost immediately

00:28:49,840 --> 00:28:54,080
when i first started working with

00:28:51,440 --> 00:28:54,080
containers

00:28:55,279 --> 00:29:01,279
the first is running a containerized

00:28:59,039 --> 00:29:03,760
application as the root user

00:29:01,279 --> 00:29:05,520
i'll be honest here when i was initially

00:29:03,760 --> 00:29:08,240
getting containers up and running i was

00:29:05,520 --> 00:29:10,080
so excited about how well it was working

00:29:08,240 --> 00:29:12,000
that it was a while before i took this

00:29:10,080 --> 00:29:14,559
one seriously

00:29:12,000 --> 00:29:16,240
if you now that you know that these

00:29:14,559 --> 00:29:17,039
processes that are running inside a

00:29:16,240 --> 00:29:19,200
container

00:29:17,039 --> 00:29:21,679
are just like any other process on the

00:29:19,200 --> 00:29:25,039
system albeit a few constraints

00:29:21,679 --> 00:29:25,840
it's scary now to run as root inside a

00:29:25,039 --> 00:29:27,919
container

00:29:25,840 --> 00:29:30,480
doing that opens up the possibility of a

00:29:27,919 --> 00:29:31,440
process escaping the intended confines

00:29:30,480 --> 00:29:35,039
of the container

00:29:31,440 --> 00:29:37,279
and gaining access to host resources

00:29:35,039 --> 00:29:38,480
it's a best practice to reduce your

00:29:37,279 --> 00:29:40,240
attack service

00:29:38,480 --> 00:29:41,760
you do that with a container by

00:29:40,240 --> 00:29:42,960
following the principle of least

00:29:41,760 --> 00:29:44,960
privilege

00:29:42,960 --> 00:29:46,960
although containers are designed

00:29:44,960 --> 00:29:48,000
themselves not to affect other running

00:29:46,960 --> 00:29:50,640
containers

00:29:48,000 --> 00:29:52,320
they can if someone gains access to your

00:29:50,640 --> 00:29:53,279
container and immediately has root

00:29:52,320 --> 00:29:55,520
privileges

00:29:53,279 --> 00:29:57,200
they can wreak havoc on your host which

00:29:55,520 --> 00:29:57,679
will affect everything running on your

00:29:57,200 --> 00:30:00,720
host

00:29:57,679 --> 00:30:02,399
even other containers so how do we

00:30:00,720 --> 00:30:05,360
mitigate this problem

00:30:02,399 --> 00:30:06,960
the best thing to do is to create a user

00:30:05,360 --> 00:30:08,640
and use the user command

00:30:06,960 --> 00:30:10,720
inside the docker file when the

00:30:08,640 --> 00:30:14,080
container is built in order to run

00:30:10,720 --> 00:30:16,000
processes as that user there's a way to

00:30:14,080 --> 00:30:17,600
specify a user when running the

00:30:16,000 --> 00:30:19,440
the docker run command when you're

00:30:17,600 --> 00:30:21,120
launching a container but

00:30:19,440 --> 00:30:22,880
that leaves open the possibility of

00:30:21,120 --> 00:30:25,840
forgetting to do that

00:30:22,880 --> 00:30:26,559
so it's nice if the image is just set up

00:30:25,840 --> 00:30:30,000
by default

00:30:26,559 --> 00:30:32,640
not to run as root that said

00:30:30,000 --> 00:30:34,240
pay attention to any of the official

00:30:32,640 --> 00:30:37,360
images that you pull

00:30:34,240 --> 00:30:40,399
from docker hub pay attention to whether

00:30:37,360 --> 00:30:41,279
they run as root by default and if they

00:30:40,399 --> 00:30:43,679
leave that step

00:30:41,279 --> 00:30:43,679
up to you

00:30:48,880 --> 00:30:52,640
no constraints so like i said when i

00:30:51,760 --> 00:30:55,039
first started

00:30:52,640 --> 00:30:57,440
with uh docker and getting my stuff up

00:30:55,039 --> 00:30:58,960
and running i left everything as default

00:30:57,440 --> 00:31:00,399
it's the easiest thing to do to get

00:30:58,960 --> 00:31:01,600
something to work it's the simplest

00:31:00,399 --> 00:31:04,799
thing that works

00:31:01,600 --> 00:31:05,840
however even though docker provides you

00:31:04,799 --> 00:31:08,080
with the ability

00:31:05,840 --> 00:31:09,120
to set resource limits on your container

00:31:08,080 --> 00:31:11,840
it won't do that

00:31:09,120 --> 00:31:13,679
automatically for you in fact the

00:31:11,840 --> 00:31:16,720
default settings are

00:31:13,679 --> 00:31:18,720
a free for all with no limits so

00:31:16,720 --> 00:31:20,320
make sure you understand the resource

00:31:18,720 --> 00:31:22,480
needs of your application

00:31:20,320 --> 00:31:23,679
too little in your container will die

00:31:22,480 --> 00:31:26,320
from starvation

00:31:23,679 --> 00:31:28,880
too much and the container could smother

00:31:26,320 --> 00:31:30,640
other things on the system

00:31:28,880 --> 00:31:31,919
the resource huge usage of your

00:31:30,640 --> 00:31:34,320
containers is something that you're

00:31:31,919 --> 00:31:36,880
going to want to monitor over time

00:31:34,320 --> 00:31:38,960
and adjust as needed it's a good way to

00:31:36,880 --> 00:31:41,200
determine if something is going wrong

00:31:38,960 --> 00:31:47,120
or if load on your system has changed

00:31:41,200 --> 00:31:50,159
for any reason

00:31:47,120 --> 00:31:52,480
never updating we all

00:31:50,159 --> 00:31:53,360
get into this at one point or another

00:31:52,480 --> 00:31:54,960
you'll if

00:31:53,360 --> 00:31:57,120
especially as a developer you're going

00:31:54,960 --> 00:32:00,159
to end up in a situation where

00:31:57,120 --> 00:32:01,440
you're just you don't want to update it

00:32:00,159 --> 00:32:04,080
works the way it is

00:32:01,440 --> 00:32:07,200
you just want to leave it alone but this

00:32:04,080 --> 00:32:09,679
is actually a really big security issue

00:32:07,200 --> 00:32:11,279
it's easy to get complacent and not pay

00:32:09,679 --> 00:32:12,159
attention to what is actually getting

00:32:11,279 --> 00:32:14,559
pulled in

00:32:12,159 --> 00:32:16,480
when you're building your images not

00:32:14,559 --> 00:32:19,279
only do you need to be aware of

00:32:16,480 --> 00:32:20,799
outdated versions that you specify in

00:32:19,279 --> 00:32:22,720
your own docker file

00:32:20,799 --> 00:32:24,240
but you need to pay attention to what's

00:32:22,720 --> 00:32:27,440
in the base image

00:32:24,240 --> 00:32:28,000
that it's coming from not updating

00:32:27,440 --> 00:32:29,919
packages

00:32:28,000 --> 00:32:32,399
and libraries inside your container can

00:32:29,919 --> 00:32:35,039
lead to some pretty embarrassing results

00:32:32,399 --> 00:32:37,120
especially when there are a lot of tools

00:32:35,039 --> 00:32:37,519
out there available now that will alert

00:32:37,120 --> 00:32:39,360
you

00:32:37,519 --> 00:32:42,720
when security issues have been

00:32:39,360 --> 00:32:44,720
discovered with specific artifacts

00:32:42,720 --> 00:32:46,320
obviously we can't predict everything

00:32:44,720 --> 00:32:47,519
that's going to happen but there are

00:32:46,320 --> 00:32:49,760
definitely

00:32:47,519 --> 00:32:51,200
there's a lot of work going on out there

00:32:49,760 --> 00:32:53,760
to identify

00:32:51,200 --> 00:32:55,760
and make folks aware when a security

00:32:53,760 --> 00:32:57,360
issue is found

00:32:55,760 --> 00:33:00,159
even ensuring that you're running

00:32:57,360 --> 00:33:02,240
containers with a non-privileged user

00:33:00,159 --> 00:33:03,279
that has risk when there are known

00:33:02,240 --> 00:33:05,760
vulnerabilities

00:33:03,279 --> 00:33:07,840
that exist within your container or even

00:33:05,760 --> 00:33:09,919
on the kernel of the host

00:33:07,840 --> 00:33:11,679
from time to time exploits are found

00:33:09,919 --> 00:33:13,519
that enable

00:33:11,679 --> 00:33:15,039
attackers to potentially escape a

00:33:13,519 --> 00:33:17,679
container

00:33:15,039 --> 00:33:19,360
so keep up with those security updates

00:33:17,679 --> 00:33:22,559
not only within your container

00:33:19,360 --> 00:33:24,799
but on the host itself

00:33:22,559 --> 00:33:26,399
i've definitely been on teams where this

00:33:24,799 --> 00:33:30,000
has not been a priority

00:33:26,399 --> 00:33:31,919
um definitely because of the a fear

00:33:30,000 --> 00:33:33,440
of breaking the product or a service

00:33:31,919 --> 00:33:36,480
that's already working

00:33:33,440 --> 00:33:38,960
but that is a symptom of other problems

00:33:36,480 --> 00:33:40,559
and probably worth an entire session uh

00:33:38,960 --> 00:33:43,760
devoted to that

00:33:40,559 --> 00:33:44,640
um trust me it's much worse to leak

00:33:43,760 --> 00:33:47,120
private data

00:33:44,640 --> 00:33:48,960
or potentially be the start of a domino

00:33:47,120 --> 00:33:50,000
effect that can bring an entire system

00:33:48,960 --> 00:33:53,200
down

00:33:50,000 --> 00:33:56,559
so take the time um get your backlog

00:33:53,200 --> 00:33:56,559
done and get those updates in there

00:33:57,840 --> 00:34:01,519
this this is pretty java specific i like

00:34:00,480 --> 00:34:03,840
this um

00:34:01,519 --> 00:34:04,799
image because it's not something you

00:34:03,840 --> 00:34:06,799
expect

00:34:04,799 --> 00:34:08,960
and that can happen if you're trying to

00:34:06,799 --> 00:34:12,079
containerize a java project without

00:34:08,960 --> 00:34:15,839
knowing some background this is

00:34:12,079 --> 00:34:17,839
definitely specific to java applications

00:34:15,839 --> 00:34:19,520
it's very much related to being aware of

00:34:17,839 --> 00:34:22,720
what your application requires

00:34:19,520 --> 00:34:24,399
to run successfully regarding memory

00:34:22,720 --> 00:34:26,159
so remember earlier in our history

00:34:24,399 --> 00:34:30,480
lesson when i mentioned the dates

00:34:26,159 --> 00:34:33,440
for java 7 and when java 8 came out

00:34:30,480 --> 00:34:35,440
the jvm on its own is pretty clever at

00:34:33,440 --> 00:34:36,639
automatically determining the settings

00:34:35,440 --> 00:34:38,639
for your swap

00:34:36,639 --> 00:34:39,839
and heap and your garbage collection

00:34:38,639 --> 00:34:42,399
behavior

00:34:39,839 --> 00:34:44,560
based on things like the memory and the

00:34:42,399 --> 00:34:47,679
number of cores available

00:34:44,560 --> 00:34:48,000
but considering the timeline of docker

00:34:47,679 --> 00:34:51,679
and

00:34:48,000 --> 00:34:52,879
java releases java 7 and 8 and certainly

00:34:51,679 --> 00:34:56,000
earlier versions

00:34:52,879 --> 00:34:58,400
are not fully container aware

00:34:56,000 --> 00:35:00,400
this means that your java application

00:34:58,400 --> 00:35:02,720
won't necessarily obey

00:35:00,400 --> 00:35:04,160
the memory and cpu constraints that you

00:35:02,720 --> 00:35:06,480
put on your container

00:35:04,160 --> 00:35:07,599
you may end up with some surprise out of

00:35:06,480 --> 00:35:11,359
memory killer

00:35:07,599 --> 00:35:14,160
activity this reason for this

00:35:11,359 --> 00:35:15,280
is that the mechanisms that the jvm uses

00:35:14,160 --> 00:35:17,040
to retrieve

00:35:15,280 --> 00:35:18,320
the resources that are available for

00:35:17,040 --> 00:35:20,960
your application

00:35:18,320 --> 00:35:21,599
actually come from the host machine and

00:35:20,960 --> 00:35:24,800
not the c

00:35:21,599 --> 00:35:26,800
group limits that you would expect

00:35:24,800 --> 00:35:28,000
there were some improvements around

00:35:26,800 --> 00:35:31,680
container awareness

00:35:28,000 --> 00:35:34,240
introduced in java 8 update 131

00:35:31,680 --> 00:35:35,680
remember that and further improvements

00:35:34,240 --> 00:35:38,160
in later versions

00:35:35,680 --> 00:35:39,520
but if at all possible really try to get

00:35:38,160 --> 00:35:42,079
to java 11

00:35:39,520 --> 00:35:45,200
that's the latest available lts release

00:35:42,079 --> 00:35:47,200
that is container aware

00:35:45,200 --> 00:35:49,119
if you're uh like i said i mean a lot of

00:35:47,200 --> 00:35:50,800
the container stuff has been backported

00:35:49,119 --> 00:35:52,880
to later versions of java 8.

00:35:50,800 --> 00:35:54,480
if you're stuck on java 8 at least you

00:35:52,880 --> 00:35:57,599
know get to those later

00:35:54,480 --> 00:36:00,720
later updates also if

00:35:57,599 --> 00:36:02,400
you have no hope um you know

00:36:00,720 --> 00:36:04,880
it's not all lost it's just that you

00:36:02,400 --> 00:36:06,960
won't be able to depend on the jvm

00:36:04,880 --> 00:36:08,480
to automatically determine the best use

00:36:06,960 --> 00:36:10,960
of resources for you

00:36:08,480 --> 00:36:12,480
um you'll need to explicitly set the

00:36:10,960 --> 00:36:14,720
necessary flags

00:36:12,480 --> 00:36:16,240
for memory and the number of garbage

00:36:14,720 --> 00:36:18,560
collection threads

00:36:16,240 --> 00:36:21,440
based on the limitations you want to set

00:36:18,560 --> 00:36:21,440
on your container

00:36:24,960 --> 00:36:29,280
so we need tools to help manage our

00:36:27,839 --> 00:36:32,560
images

00:36:29,280 --> 00:36:36,880
um jfrog artifactory actually supports

00:36:32,560 --> 00:36:39,119
docker registries and images um you can

00:36:36,880 --> 00:36:40,400
use it just like you do for other types

00:36:39,119 --> 00:36:42,560
of artifacts

00:36:40,400 --> 00:36:44,240
both as a cache for third-party based

00:36:42,560 --> 00:36:47,280
images and as your own

00:36:44,240 --> 00:36:49,119
internal registry after uploading your

00:36:47,280 --> 00:36:49,599
docker images you have the ability to

00:36:49,119 --> 00:36:52,240
gather

00:36:49,599 --> 00:36:54,720
statistics and even drill down into each

00:36:52,240 --> 00:36:57,440
layer of an image for more information

00:36:54,720 --> 00:36:59,760
if you've integrated a ci cd solution

00:36:57,440 --> 00:37:02,079
you can also determine what build

00:36:59,760 --> 00:37:02,800
produced a particular image or what

00:37:02,079 --> 00:37:06,960
build

00:37:02,800 --> 00:37:09,839
used it why do i need this

00:37:06,960 --> 00:37:11,760
well having a private registry is just

00:37:09,839 --> 00:37:12,880
as necessary as having a private

00:37:11,760 --> 00:37:14,400
repository for

00:37:12,880 --> 00:37:17,280
any of your other third-party

00:37:14,400 --> 00:37:19,520
dependencies one of the biggest reasons

00:37:17,280 --> 00:37:21,440
is that just for the sake of your

00:37:19,520 --> 00:37:22,320
development teams and for your build

00:37:21,440 --> 00:37:23,839
pipelines

00:37:22,320 --> 00:37:26,320
you need to have these dependencies

00:37:23,839 --> 00:37:28,960
available to you in an environment that

00:37:26,320 --> 00:37:28,960
you control

00:37:29,200 --> 00:37:33,680
this is worth mentioning there are you

00:37:32,079 --> 00:37:35,440
know the free

00:37:33,680 --> 00:37:37,760
public repositories that you may be

00:37:35,440 --> 00:37:40,960
pulling dependencies from

00:37:37,760 --> 00:37:41,280
they have limits too and in fact docker

00:37:40,960 --> 00:37:44,480
hub

00:37:41,280 --> 00:37:46,560
is going to be changing

00:37:44,480 --> 00:37:47,920
some things around their user agreement

00:37:46,560 --> 00:37:50,000
beginning november 1st

00:37:47,920 --> 00:37:51,200
if you haven't gone to look at that yet

00:37:50,000 --> 00:37:53,040
and you often

00:37:51,200 --> 00:37:54,960
pull stuff from docker hub it's time to

00:37:53,040 --> 00:37:56,640
go take a look at that

00:37:54,960 --> 00:37:58,480
there's going to be some limitations on

00:37:56,640 --> 00:37:59,599
how often you can pull how many times

00:37:58,480 --> 00:38:02,400
you can pull

00:37:59,599 --> 00:38:04,079
and also some limitations on how long

00:38:02,400 --> 00:38:07,599
you can store an image

00:38:04,079 --> 00:38:08,640
so that's another reason to look into a

00:38:07,599 --> 00:38:11,040
private

00:38:08,640 --> 00:38:12,320
repository of some kind so that you can

00:38:11,040 --> 00:38:16,839
at least cache

00:38:12,320 --> 00:38:18,000
things i encourage you to check these

00:38:16,839 --> 00:38:19,599
out

00:38:18,000 --> 00:38:22,960
discussed earlier the problems of not

00:38:19,599 --> 00:38:27,119
updating images regularly

00:38:22,960 --> 00:38:30,320
this is x-ray jfrog x-ray

00:38:27,119 --> 00:38:30,720
um there's a few reasons that we like

00:38:30,320 --> 00:38:34,240
why

00:38:30,720 --> 00:38:34,800
we care about image security um the base

00:38:34,240 --> 00:38:36,960
images

00:38:34,800 --> 00:38:38,960
that your images are come from that they

00:38:36,960 --> 00:38:41,200
come from and that you build from

00:38:38,960 --> 00:38:42,160
um you really need to know your build

00:38:41,200 --> 00:38:44,240
you need to know

00:38:42,160 --> 00:38:47,040
what dependencies are being pulled in

00:38:44,240 --> 00:38:50,160
and uh what you know what versions

00:38:47,040 --> 00:38:51,839
of things mainly there are known

00:38:50,160 --> 00:38:53,520
vulnerabilities that you can protect

00:38:51,839 --> 00:38:56,000
yourself from um

00:38:53,520 --> 00:38:58,160
also x-ray is pretty cool because it

00:38:56,000 --> 00:38:59,599
monitors licensing as well

00:38:58,160 --> 00:39:01,359
that's another thing that you may not be

00:38:59,599 --> 00:39:03,680
aware of when you're pulling in

00:39:01,359 --> 00:39:04,800
stuff from a base image make sure that

00:39:03,680 --> 00:39:07,920
those licenses

00:39:04,800 --> 00:39:11,200
are okay for your you and your team and

00:39:07,920 --> 00:39:14,240
your company to be using

00:39:11,200 --> 00:39:16,000
x-ray is a security scanning tool

00:39:14,240 --> 00:39:17,920
it's also available in the jfrog

00:39:16,000 --> 00:39:20,000
platform it will alert you if there are

00:39:17,920 --> 00:39:23,200
any known security vulnerabilities or

00:39:20,000 --> 00:39:24,720
or licensing issues for docker images

00:39:23,200 --> 00:39:26,079
it's especially useful because it has

00:39:24,720 --> 00:39:29,280
the ability to drill down

00:39:26,079 --> 00:39:31,520
into each layer of the image to find out

00:39:29,280 --> 00:39:32,640
exactly what library or package has been

00:39:31,520 --> 00:39:35,040
flagged as a problem

00:39:32,640 --> 00:39:36,480
so it'll even dig into your base images

00:39:35,040 --> 00:39:39,599
for you

00:39:36,480 --> 00:39:42,000
you have control over how sensitive

00:39:39,599 --> 00:39:45,119
to make these alerts and what actions to

00:39:42,000 --> 00:39:47,760
take when they're triggered

00:39:45,119 --> 00:39:49,119
alright that is all i wanted to share

00:39:47,760 --> 00:39:51,280
with you

00:39:49,119 --> 00:39:52,560
i'll put up this link again for your

00:39:51,280 --> 00:39:57,839
swag and your

00:39:52,560 --> 00:39:57,839

YouTube URL: https://www.youtube.com/watch?v=nHAkj3eQjeY


