Title: Taking Command of Cloud Security with OPA - Josh Stella
Publication date: 2020-11-03
Playlist: All Things Open 2020
Description: 
	Presented by: Josh Stella, Fugue
Presented at All Things Open 2020, DevOpsDay Raleigh

Abstract: Cloud security is a source of frustration for developers and risk for organizations. Traditional security tools don’t work in the cloud, and security professionals often don’t understand how the cloud works. This means countless hours clicking through consoles, updating spreadsheets, reviewing alerts, and drawing diagrams. None of those are engineering tools. 

The solution to cloud security lies squarely with developers and cloud engineers. Cloud security is about the secure configuration of resources. And when configuration is programmable, cloud security becomes a software engineering problem, not a security analysis one. It’s a problem tailor-made for engineers to tackle.

Policy-as-code gives developers and cloud ops an engineering-centric approach to cloud security. The Cloud Native Computing Foundation's open source Open Policy Agent (OPA) project provides a flexible policy-as-code framework for a wide variety of use cases, such as cloud infrastructure configuration, infrastructure-as-code, and Kubernetes transactions.

In this talk, Josh Stella, cofounder and CTO at Fugue, will walk through how OPA works and how developers and cloud engineering teams can leverage it and open source tools in the OPA ecosystem for cloud security and compliance. 

By the end of the talk, attendees will learn:

- How OPA and the Rego policy language work for a variety of cloud security use cases 
- How developers can check Terraform against policy with Regula, an open source tool that uses OPA 
- How to use OPA with CI/CD tools to integrate cloud infrastructure security into automated delivery pipelines
Captions: 
	00:00:05,040 --> 00:00:08,720
so

00:00:05,440 --> 00:00:11,840
today we're going to talk about uh

00:00:08,720 --> 00:00:15,120
open policy agent which is

00:00:11,840 --> 00:00:18,480
uh called by the creators of it uh oppa

00:00:15,120 --> 00:00:18,480
are you seeing my screen chris

00:00:20,080 --> 00:00:27,519
i share in yep all right great so

00:00:23,359 --> 00:00:29,439
um let me get into powerpoint selected

00:00:27,519 --> 00:00:31,439
so the agenda today i am going to go

00:00:29,439 --> 00:00:32,480
through some slides i'm sorry i hate

00:00:31,439 --> 00:00:34,719
slides

00:00:32,480 --> 00:00:36,239
i think most of us do i am going to go

00:00:34,719 --> 00:00:37,360
through some slides to kind of set the

00:00:36,239 --> 00:00:41,280
stage

00:00:37,360 --> 00:00:44,000
for using opa uh with cloud security

00:00:41,280 --> 00:00:44,399
okay but i'm also going to spend some

00:00:44,000 --> 00:00:47,200
time

00:00:44,399 --> 00:00:48,640
showing you around the opa ecosystem and

00:00:47,200 --> 00:00:50,960
showing you code

00:00:48,640 --> 00:00:51,840
if you're not a coder stick around

00:00:50,960 --> 00:00:54,079
because it

00:00:51,840 --> 00:00:55,840
i i will explain it in in very great

00:00:54,079 --> 00:00:58,239
detail such that you will

00:00:55,840 --> 00:00:59,840
be able to follow along i'm sorry my my

00:00:58,239 --> 00:01:02,079
video camera seems to be

00:00:59,840 --> 00:01:03,600
glitching a little bit uh giving me kind

00:01:02,079 --> 00:01:05,840
of a max headroom effect but

00:01:03,600 --> 00:01:06,880
uh we'll just get through it all right

00:01:05,840 --> 00:01:09,520
we're going to go through an

00:01:06,880 --> 00:01:10,880
overview of misconfiguration risk the

00:01:09,520 --> 00:01:13,760
reason we're going to do that

00:01:10,880 --> 00:01:15,119
as it relates to cloud is what i'm going

00:01:13,760 --> 00:01:17,759
to show you around oppa

00:01:15,119 --> 00:01:18,320
is focused on getting cloud security

00:01:17,759 --> 00:01:21,920
right

00:01:18,320 --> 00:01:24,479
and that's almost all misconfiguration

00:01:21,920 --> 00:01:24,960
we believe at fugue that policy as code

00:01:24,479 --> 00:01:27,439
is

00:01:24,960 --> 00:01:28,640
mandatory for automating security and

00:01:27,439 --> 00:01:31,360
compliance

00:01:28,640 --> 00:01:34,079
in the cloud i'm going to give you an

00:01:31,360 --> 00:01:37,520
introduction to open policy agent

00:01:34,079 --> 00:01:40,479
and policy as code as a concept and

00:01:37,520 --> 00:01:41,600
as a reality and then we're going to do

00:01:40,479 --> 00:01:43,840
some deep dives

00:01:41,600 --> 00:01:45,520
into the opa toolbox just to show you

00:01:43,840 --> 00:01:47,600
how this thing works

00:01:45,520 --> 00:01:50,320
finally i'm going to talk about how to

00:01:47,600 --> 00:01:52,079
get started with with these technologies

00:01:50,320 --> 00:01:54,320
uh and hopefully we'll have some time

00:01:52,079 --> 00:01:57,600
for uh q a

00:01:54,320 --> 00:01:59,920
all right so cloud misconfiguration

00:01:57,600 --> 00:02:01,920
is the number one cloud risk and that's

00:01:59,920 --> 00:02:03,119
why we're going to use policy as code to

00:02:01,920 --> 00:02:06,000
address it

00:02:03,119 --> 00:02:08,000
uh many of the advanced cloud

00:02:06,000 --> 00:02:10,720
misconfigurations that sounds

00:02:08,000 --> 00:02:13,640
funny uh because what's an advanced

00:02:10,720 --> 00:02:16,239
misconfiguration what we mean there is

00:02:13,640 --> 00:02:18,080
misconfigurations that advanced hackers

00:02:16,239 --> 00:02:21,200
can take advantage of

00:02:18,080 --> 00:02:22,080
are not seen as compliance violations

00:02:21,200 --> 00:02:25,520
they're not

00:02:22,080 --> 00:02:28,800
caught typically by things like

00:02:25,520 --> 00:02:30,000
cis or nist

00:02:28,800 --> 00:02:32,000
therefore they're not seen as

00:02:30,000 --> 00:02:34,840
vulnerabilities

00:02:32,000 --> 00:02:36,560
which makes them uh easy to miss hard to

00:02:34,840 --> 00:02:39,120
find and also

00:02:36,560 --> 00:02:40,239
only apparent in the full context of an

00:02:39,120 --> 00:02:43,280
environment

00:02:40,239 --> 00:02:45,680
so when you build a vpc you might have

00:02:43,280 --> 00:02:46,640
built that vpc correctly on aws for

00:02:45,680 --> 00:02:48,239
example

00:02:46,640 --> 00:02:50,319
but it could be that something within

00:02:48,239 --> 00:02:51,840
that vpc and how it communicates with

00:02:50,319 --> 00:02:53,360
something in s3

00:02:51,840 --> 00:02:55,200
is creating the vulnerability so you

00:02:53,360 --> 00:02:57,360
have to you have to look at the thing as

00:02:55,200 --> 00:03:00,400
a whole

00:02:57,360 --> 00:03:02,400
these therefore these misconfigurations

00:03:00,400 --> 00:03:05,200
are very very common

00:03:02,400 --> 00:03:05,519
in cloud environments generally uh we

00:03:05,200 --> 00:03:08,720
say

00:03:05,519 --> 00:03:12,080
enterprise here because uh scale

00:03:08,720 --> 00:03:15,360
uh tends to multiply the number

00:03:12,080 --> 00:03:17,200
of misconfigurations so uh if you're

00:03:15,360 --> 00:03:18,879
operating at large scale on cloud you

00:03:17,200 --> 00:03:21,680
probably have a lot of these

00:03:18,879 --> 00:03:22,480
out there and when you read the major

00:03:21,680 --> 00:03:25,680
breaches

00:03:22,480 --> 00:03:28,799
that we see all the time in the cloud

00:03:25,680 --> 00:03:31,120
these are almost always part of the

00:03:28,799 --> 00:03:31,120
issue

00:03:31,519 --> 00:03:35,680
okay at fugue we do a survey about every

00:03:34,640 --> 00:03:39,360
year

00:03:35,680 --> 00:03:40,000
of uh folks who are operating at large

00:03:39,360 --> 00:03:43,440
scale

00:03:40,000 --> 00:03:44,560
on the cloud and we don't ask them about

00:03:43,440 --> 00:03:46,799
our product

00:03:44,560 --> 00:03:47,680
and by the way this isn't going to be a

00:03:46,799 --> 00:03:50,319
product

00:03:47,680 --> 00:03:52,000
demo to you i will show you how we use

00:03:50,319 --> 00:03:52,720
opa a little bit it's really about opa

00:03:52,000 --> 00:03:56,319
though

00:03:52,720 --> 00:03:57,840
um so these folks who are operating at

00:03:56,319 --> 00:03:58,560
scale in the cloud we ask a lot of

00:03:57,840 --> 00:04:01,760
questions

00:03:58,560 --> 00:04:02,720
around cloud security issues so a few we

00:04:01,760 --> 00:04:06,080
asked

00:04:02,720 --> 00:04:08,720
last year these statistics these

00:04:06,080 --> 00:04:09,920
figures came from that survey of about

00:04:08,720 --> 00:04:11,840
00:04:09,920 --> 00:04:13,920
organizations operating at scale and

00:04:11,840 --> 00:04:16,079
cloud 84

00:04:13,920 --> 00:04:17,440
said they were concerned that they had

00:04:16,079 --> 00:04:18,560
already been hacked and didn't know

00:04:17,440 --> 00:04:20,959
about it

00:04:18,560 --> 00:04:22,639
uh that's a very good concern to have

00:04:20,959 --> 00:04:24,880
very often cloud breaches go

00:04:22,639 --> 00:04:26,560
unnoticed until the data shows up

00:04:24,880 --> 00:04:29,280
somewhere or the hacker

00:04:26,560 --> 00:04:30,720
brags on social media they are hard to

00:04:29,280 --> 00:04:34,400
detect

00:04:30,720 --> 00:04:36,320
um 92 percent were concerned that

00:04:34,400 --> 00:04:37,919
they're vulnerable to cloud breach

00:04:36,320 --> 00:04:41,280
this should really be a hundred percent

00:04:37,919 --> 00:04:43,360
i was at aws prior to founding fugue

00:04:41,280 --> 00:04:45,280
i've worked in national security

00:04:43,360 --> 00:04:49,040
software for years

00:04:45,280 --> 00:04:51,759
um i'm very familiar with the domain and

00:04:49,040 --> 00:04:53,759
everyone should be worried about this

00:04:51,759 --> 00:04:56,800
the eight percent who said they weren't

00:04:53,759 --> 00:04:56,800
i suspect are either

00:04:57,040 --> 00:05:03,120
you know not not really using cloud or

00:05:00,240 --> 00:05:04,880
are getting hacked right now and then uh

00:05:03,120 --> 00:05:07,120
three quarters 76 percent

00:05:04,880 --> 00:05:08,639
said they thought misconfiguration of

00:05:07,120 --> 00:05:11,280
resources

00:05:08,639 --> 00:05:13,919
misconfiguration risk will increase or

00:05:11,280 --> 00:05:17,280
stay the same

00:05:13,919 --> 00:05:20,960
my view on this is quite simple

00:05:17,280 --> 00:05:24,400
if you're using new cloud services

00:05:20,960 --> 00:05:27,759
those have new attack profiles for bad

00:05:24,400 --> 00:05:30,639
guys so as you add services to the mix

00:05:27,759 --> 00:05:30,960
you're adding attack surface to the mix

00:05:30,639 --> 00:05:33,759
and

00:05:30,960 --> 00:05:34,880
as you add resources in the cloud even

00:05:33,759 --> 00:05:37,600
using the same

00:05:34,880 --> 00:05:38,080
services you had been using you're also

00:05:37,600 --> 00:05:40,720
adding

00:05:38,080 --> 00:05:43,120
a tax surface so if you're growing in

00:05:40,720 --> 00:05:45,600
cloud and using new services

00:05:43,120 --> 00:05:46,479
misconfiguration risk is generally

00:05:45,600 --> 00:05:48,960
speaking

00:05:46,479 --> 00:05:48,960
rising

00:05:50,400 --> 00:05:53,440
all right a little bit about hacker

00:05:52,080 --> 00:05:56,479
strategy and why

00:05:53,440 --> 00:05:59,039
automation is so important uh

00:05:56,479 --> 00:06:00,560
in the in the kind of old days uh and

00:05:59,039 --> 00:06:03,199
this still happens

00:06:00,560 --> 00:06:05,120
right uh the hackers would target an

00:06:03,199 --> 00:06:07,919
organization

00:06:05,120 --> 00:06:09,680
and then create or find vulnerabilities

00:06:07,919 --> 00:06:11,680
so a couple examples of this

00:06:09,680 --> 00:06:12,960
aside from every hollywood movie about

00:06:11,680 --> 00:06:14,960
hacking ever

00:06:12,960 --> 00:06:16,880
in the real world a couple examples are

00:06:14,960 --> 00:06:19,600
things like stuxnet

00:06:16,880 --> 00:06:21,520
which was clearly targeting uh the

00:06:19,600 --> 00:06:24,319
iranian nuclear program

00:06:21,520 --> 00:06:26,400
or when sony pictures made a movie that

00:06:24,319 --> 00:06:28,960
the north koreans didn't like

00:06:26,400 --> 00:06:30,400
they went after sony executives right so

00:06:28,960 --> 00:06:35,120
this is kind of the

00:06:30,400 --> 00:06:35,440
classic idea of um of hacking but what

00:06:35,120 --> 00:06:39,039
we

00:06:35,440 --> 00:06:43,120
see vastly more often now

00:06:39,039 --> 00:06:46,080
is automation where the hackers

00:06:43,120 --> 00:06:48,000
know what misconfigurations to look for

00:06:46,080 --> 00:06:50,880
or vulnerabilities to look for

00:06:48,000 --> 00:06:52,960
they write programs to find them and

00:06:50,880 --> 00:06:57,039
then they get a shopping list

00:06:52,960 --> 00:07:00,080
of organizations to attack secondarily

00:06:57,039 --> 00:07:01,840
and this is true even in the really big

00:07:00,080 --> 00:07:02,639
major hacks that you read about in the

00:07:01,840 --> 00:07:06,639
news

00:07:02,639 --> 00:07:08,639
so john bredon here says from cso online

00:07:06,639 --> 00:07:10,319
skilled or well-funded hacker groups are

00:07:08,639 --> 00:07:12,720
employing automation to discover

00:07:10,319 --> 00:07:15,360
and exploit misconfigured cloud assets

00:07:12,720 --> 00:07:18,400
within hours of their deployment

00:07:15,360 --> 00:07:21,759
what we've seen is it's minutes so this

00:07:18,400 --> 00:07:24,560
hours might be kind of rosy uh hence

00:07:21,759 --> 00:07:26,080
the need for automation and where policy

00:07:24,560 --> 00:07:28,080
as code comes in

00:07:26,080 --> 00:07:30,080
so i want to take a step back here and

00:07:28,080 --> 00:07:34,080
talk about how policy is code

00:07:30,080 --> 00:07:38,000
works because code typically

00:07:34,080 --> 00:07:40,800
meant building stuff logical functions

00:07:38,000 --> 00:07:42,880
uh you know to operate on data and to

00:07:40,800 --> 00:07:44,479
perform transactions so in programming

00:07:42,880 --> 00:07:46,879
languages you know

00:07:44,479 --> 00:07:48,879
general purpose programming languages

00:07:46,879 --> 00:07:51,039
you're typically expressing

00:07:48,879 --> 00:07:52,879
you know some kind of function and doing

00:07:51,039 --> 00:07:55,360
some kind of data processing

00:07:52,879 --> 00:07:56,960
and the compilers and interpreters and

00:07:55,360 --> 00:07:59,759
debuggers

00:07:56,960 --> 00:08:00,960
provide feedback to the developer on

00:07:59,759 --> 00:08:04,160
whether it's functioning

00:08:00,960 --> 00:08:07,599
correctly what policy is code is

00:08:04,160 --> 00:08:09,680
similar in ways but is narrower in focus

00:08:07,599 --> 00:08:11,120
so with policy as code what you're

00:08:09,680 --> 00:08:13,280
really trying to express

00:08:11,120 --> 00:08:14,639
is your security rules your your

00:08:13,280 --> 00:08:16,960
security posture

00:08:14,639 --> 00:08:17,919
and your your policies and you're

00:08:16,960 --> 00:08:20,160
expressing those

00:08:17,919 --> 00:08:21,759
as code so that's a little different

00:08:20,160 --> 00:08:24,160
you're not building

00:08:21,759 --> 00:08:24,960
uh you know data processing functions

00:08:24,160 --> 00:08:28,960
you're building

00:08:24,960 --> 00:08:29,680
security functions and the evaluation

00:08:28,960 --> 00:08:32,080
though

00:08:29,680 --> 00:08:33,519
can provide feedback to the developer

00:08:32,080 --> 00:08:35,360
really quickly

00:08:33,519 --> 00:08:36,719
as to whether or not what you're doing

00:08:35,360 --> 00:08:39,760
is safe

00:08:36,719 --> 00:08:42,000
so with a traditional

00:08:39,760 --> 00:08:43,680
general purpose programming languages

00:08:42,000 --> 00:08:46,800
the tool chain

00:08:43,680 --> 00:08:50,000
provides you information like oh you you

00:08:46,800 --> 00:08:54,160
cast a variable the wrong way

00:08:50,000 --> 00:08:56,000
or what not but with policy as code

00:08:54,160 --> 00:08:57,760
you'll get feedback from the tool chain

00:08:56,000 --> 00:09:01,200
saying something

00:08:57,760 --> 00:09:03,279
that you chose to to do is not safe

00:09:01,200 --> 00:09:05,680
and therefore you should not do that but

00:09:03,279 --> 00:09:08,640
it happens really really quickly

00:09:05,680 --> 00:09:09,600
because it's expressed as code and and

00:09:08,640 --> 00:09:13,360
this is one of the

00:09:09,600 --> 00:09:14,080
massive benefits of um using policy as

00:09:13,360 --> 00:09:16,560
code

00:09:14,080 --> 00:09:18,240
is the developers who are now doing

00:09:16,560 --> 00:09:22,080
infrastructures code and

00:09:18,240 --> 00:09:23,600
building stuff in cloud uh can um can

00:09:22,080 --> 00:09:24,959
get that feedback without going through

00:09:23,600 --> 00:09:27,839
a security audit

00:09:24,959 --> 00:09:29,519
so uh i just saw my dog's face entering

00:09:27,839 --> 00:09:32,480
the picture uh he's laying here

00:09:29,519 --> 00:09:34,080
uh i i apologize if he uh if he uh gets

00:09:32,480 --> 00:09:37,360
in the way or makes any

00:09:34,080 --> 00:09:38,560
noises okay so let's talk about open

00:09:37,360 --> 00:09:41,120
policy agent

00:09:38,560 --> 00:09:42,720
uh we at fugue are really excited about

00:09:41,120 --> 00:09:44,959
open policy agent

00:09:42,720 --> 00:09:46,800
because well we have a lot of patents on

00:09:44,959 --> 00:09:48,000
policies code here at fugue and we wrote

00:09:46,800 --> 00:09:50,720
a bunch of

00:09:48,000 --> 00:09:53,680
language compilers and things like that

00:09:50,720 --> 00:09:57,040
and then open policy agent came along

00:09:53,680 --> 00:09:58,080
and we saw that probably for the first

00:09:57,040 --> 00:10:01,120
time

00:09:58,080 --> 00:10:03,920
there is a potential open standard

00:10:01,120 --> 00:10:06,240
for policy as code rather than a bunch

00:10:03,920 --> 00:10:07,519
of proprietary languages or pseudo

00:10:06,240 --> 00:10:10,800
languages

00:10:07,519 --> 00:10:13,120
which is kind of what the past was so

00:10:10,800 --> 00:10:15,279
opa is now sponsored by the cloud native

00:10:13,120 --> 00:10:17,760
computing foundation

00:10:15,279 --> 00:10:18,480
it is a declarative language it's a real

00:10:17,760 --> 00:10:20,880
language

00:10:18,480 --> 00:10:23,120
based on data log and i'll get into what

00:10:20,880 --> 00:10:25,440
i mean by a real language as opposed to

00:10:23,120 --> 00:10:27,360
a kind of pseudo language or or semi

00:10:25,440 --> 00:10:29,760
language

00:10:27,360 --> 00:10:32,000
using a language called rego which again

00:10:29,760 --> 00:10:35,040
is based on data log it's declarative

00:10:32,000 --> 00:10:36,079
and it's a query language it can

00:10:35,040 --> 00:10:39,279
validate any

00:10:36,079 --> 00:10:40,560
json data structure and the beauty of

00:10:39,279 --> 00:10:43,200
that is we've kind of

00:10:40,560 --> 00:10:43,760
decided that json is going to be the way

00:10:43,200 --> 00:10:46,079
we

00:10:43,760 --> 00:10:47,839
throw data between services and so on

00:10:46,079 --> 00:10:50,800
for the most part

00:10:47,839 --> 00:10:52,160
and express in many cases configuration

00:10:50,800 --> 00:10:53,200
which is what we're going to talk about

00:10:52,160 --> 00:10:56,399
here

00:10:53,200 --> 00:10:59,519
and that means opa's applicable to

00:10:56,399 --> 00:11:00,880
a wide variety of cloud use cases so

00:10:59,519 --> 00:11:02,720
i'm going to talk about cloud

00:11:00,880 --> 00:11:04,880
infrastructure today

00:11:02,720 --> 00:11:07,040
uh what you see most folks doing with

00:11:04,880 --> 00:11:09,440
opa has more to do with things like

00:11:07,040 --> 00:11:11,600
kubernetes transactions you know

00:11:09,440 --> 00:11:15,200
microservice to microservice in a

00:11:11,600 --> 00:11:16,160
kubernetes environment and checking

00:11:15,200 --> 00:11:19,200
authorization

00:11:16,160 --> 00:11:20,880
for api calls things like that uh doing

00:11:19,200 --> 00:11:22,720
api governance etc

00:11:20,880 --> 00:11:24,000
so but the beauty here is it's

00:11:22,720 --> 00:11:26,880
applicable to

00:11:24,000 --> 00:11:28,000
lots and lots of use cases and and

00:11:26,880 --> 00:11:31,519
that's why few were

00:11:28,000 --> 00:11:34,720
really early adopters of opa

00:11:31,519 --> 00:11:37,040
is it's it's a potential standard way to

00:11:34,720 --> 00:11:38,399
handle a bunch of different problems in

00:11:37,040 --> 00:11:41,120
an open way

00:11:38,399 --> 00:11:42,800
it has a really robust tooling ecosystem

00:11:41,120 --> 00:11:46,160
i'm going to show you today

00:11:42,800 --> 00:11:46,880
the kind of native opa open source but

00:11:46,160 --> 00:11:49,120
also

00:11:46,880 --> 00:11:50,240
some stuff we've put out there open

00:11:49,120 --> 00:11:55,600
source

00:11:50,240 --> 00:11:57,120
and free that you can use with with opa

00:11:55,600 --> 00:11:59,440
um i don't think i need to read through

00:11:57,120 --> 00:12:00,399
these bullets i covered some of these

00:11:59,440 --> 00:12:03,680
points

00:12:00,399 --> 00:12:08,079
um but just to kind of paint a picture

00:12:03,680 --> 00:12:11,200
historically most policy is code and

00:12:08,079 --> 00:12:12,480
historically meaning today most policy

00:12:11,200 --> 00:12:14,480
is code for example

00:12:12,480 --> 00:12:16,560
in like cloud security applications

00:12:14,480 --> 00:12:19,760
fugue is a cloud security service

00:12:16,560 --> 00:12:23,120
an application most of them

00:12:19,760 --> 00:12:26,560
use proprietary kind of pseudo languages

00:12:23,120 --> 00:12:29,040
often they're kind of partial

00:12:26,560 --> 00:12:29,760
implementations of sql but they're map

00:12:29,040 --> 00:12:33,040
they're stuck

00:12:29,760 --> 00:12:36,720
on one one product or one project

00:12:33,040 --> 00:12:39,360
you can also see this with libraries

00:12:36,720 --> 00:12:40,959
uh that are uh actually proprietary

00:12:39,360 --> 00:12:43,519
expressions but using a

00:12:40,959 --> 00:12:44,959
a commonly used language like python or

00:12:43,519 --> 00:12:47,440
something like this

00:12:44,959 --> 00:12:48,399
so with open policy agent we just think

00:12:47,440 --> 00:12:50,839
that the future

00:12:48,399 --> 00:12:52,240
is having a standard way to do policy as

00:12:50,839 --> 00:12:55,040
code

00:12:52,240 --> 00:12:57,120
and it should be expressed as a domain

00:12:55,040 --> 00:12:58,000
specific language to policy in our

00:12:57,120 --> 00:13:01,279
opinion

00:12:58,000 --> 00:13:04,079
uh rather than trying to lever uh

00:13:01,279 --> 00:13:05,440
something proprietary or wedge it into a

00:13:04,079 --> 00:13:08,560
general purpose language

00:13:05,440 --> 00:13:08,880
they just have different goals all right

00:13:08,560 --> 00:13:12,560
so

00:13:08,880 --> 00:13:13,200
one common misconception is that you

00:13:12,560 --> 00:13:15,920
can't do

00:13:13,200 --> 00:13:18,320
policy as code as it relates to cloud

00:13:15,920 --> 00:13:20,720
particularly cloud infrastructure

00:13:18,320 --> 00:13:21,519
unless you're doing infrastructure as

00:13:20,720 --> 00:13:25,760
code

00:13:21,519 --> 00:13:29,120
that is absolutely not true and in fact

00:13:25,760 --> 00:13:32,639
infrastructure's code templates cannot

00:13:29,120 --> 00:13:35,279
fully capture what you need to

00:13:32,639 --> 00:13:37,360
in order to perform policies code

00:13:35,279 --> 00:13:39,680
throughout the entire life cycle

00:13:37,360 --> 00:13:40,560
so you have to be able to apply policy

00:13:39,680 --> 00:13:43,120
as code

00:13:40,560 --> 00:13:45,199
no matter how infrastructure was made

00:13:43,120 --> 00:13:48,000
it's good to check infrastructure

00:13:45,199 --> 00:13:50,000
as code templates before they are turned

00:13:48,000 --> 00:13:50,639
into infrastructure you can catch maybe

00:13:50,000 --> 00:13:53,760
half

00:13:50,639 --> 00:13:55,600
probably less of the misconfigurations

00:13:53,760 --> 00:13:58,399
there so it's a good thing to do

00:13:55,600 --> 00:13:58,880
but it's not good enough and also you

00:13:58,399 --> 00:14:01,760
don't

00:13:58,880 --> 00:14:02,000
need to be doing infrastructure as code

00:14:01,760 --> 00:14:05,279
to

00:14:02,000 --> 00:14:09,920
use policies code it can be applied to

00:14:05,279 --> 00:14:09,920
real world running infrastructure

00:14:10,639 --> 00:14:15,600
we believe that you need policy as code

00:14:13,199 --> 00:14:16,959
because of the disparate methods used to

00:14:15,600 --> 00:14:19,440
create a modify

00:14:16,959 --> 00:14:21,120
cloud so you might run some terraform we

00:14:19,440 --> 00:14:22,079
actually have an open source project i'm

00:14:21,120 --> 00:14:24,000
going to show you

00:14:22,079 --> 00:14:26,160
for using opa to check terraform

00:14:24,000 --> 00:14:28,240
templates

00:14:26,160 --> 00:14:30,079
you might be running ansible you might

00:14:28,240 --> 00:14:31,920
be running cloud formation in most

00:14:30,079 --> 00:14:34,800
enterprises that we see

00:14:31,920 --> 00:14:35,600
there's a mix of those with also things

00:14:34,800 --> 00:14:39,040
like

00:14:35,600 --> 00:14:40,320
uh scripts and people going in the

00:14:39,040 --> 00:14:43,040
console

00:14:40,320 --> 00:14:44,240
so your policies code really should be

00:14:43,040 --> 00:14:47,440
an umbrella over

00:14:44,240 --> 00:14:50,240
all that stuff no matter how it was made

00:14:47,440 --> 00:14:52,000
otherwise you have gaps in your strategy

00:14:50,240 --> 00:14:54,560
and in your security

00:14:52,000 --> 00:14:55,040
so we believe policies code should be

00:14:54,560 --> 00:14:56,320
used

00:14:55,040 --> 00:14:58,160
all the way through the software

00:14:56,320 --> 00:15:00,560
development life cycle

00:14:58,160 --> 00:15:01,760
from design time where you can catch

00:15:00,560 --> 00:15:04,880
like i said maybe half

00:15:01,760 --> 00:15:08,560
maybe a third to deploy time

00:15:04,880 --> 00:15:11,600
using policy as code to prevent uh

00:15:08,560 --> 00:15:12,240
insecure and injurious changes to be

00:15:11,600 --> 00:15:15,279
made

00:15:12,240 --> 00:15:17,440
through build fails things like that and

00:15:15,279 --> 00:15:18,800
then once it's deployed because cloud

00:15:17,440 --> 00:15:21,360
infrastructure is

00:15:18,800 --> 00:15:22,240
generally speaking mutable it can be

00:15:21,360 --> 00:15:24,880
changed

00:15:22,240 --> 00:15:26,800
and it does get changed you need that

00:15:24,880 --> 00:15:27,839
same policy as code to tell you if

00:15:26,800 --> 00:15:31,040
anything

00:15:27,839 --> 00:15:32,480
dangerous happens post-deployment like

00:15:31,040 --> 00:15:33,279
somebody going in in a maintenance

00:15:32,480 --> 00:15:36,480
window

00:15:33,279 --> 00:15:37,600
and opening a hole in a in a security

00:15:36,480 --> 00:15:40,959
group

00:15:37,600 --> 00:15:43,680
all right let's um get out of powerpoint

00:15:40,959 --> 00:15:44,639
and start showing you around oppa itself

00:15:43,680 --> 00:15:46,480
so

00:15:44,639 --> 00:15:48,880
i'm gonna switch here to doing a little

00:15:46,480 --> 00:15:52,320
web browsing and i'm gonna show you some

00:15:48,880 --> 00:15:54,399
code two so

00:15:52,320 --> 00:15:56,000
uh here this is just the open policy

00:15:54,399 --> 00:15:58,000
agent website

00:15:56,000 --> 00:15:59,120
all right and the reason i'm showing you

00:15:58,000 --> 00:16:03,120
this

00:15:59,120 --> 00:16:04,399
is primarily to show you this diagram

00:16:03,120 --> 00:16:07,440
right here

00:16:04,399 --> 00:16:10,240
so what is opa it is both a

00:16:07,440 --> 00:16:12,320
policy language which as i said is

00:16:10,240 --> 00:16:13,440
declarative and is really a query

00:16:12,320 --> 00:16:17,440
language

00:16:13,440 --> 00:16:19,519
um but it's also a runtime

00:16:17,440 --> 00:16:20,800
and that's one of the reasons it's so

00:16:19,519 --> 00:16:25,839
cool

00:16:20,800 --> 00:16:29,360
you can deploy it both as a demon

00:16:25,839 --> 00:16:32,480
and as a library i'm seeing here some

00:16:29,360 --> 00:16:37,839
q a come in so i'm just gonna

00:16:32,480 --> 00:16:37,839
come on zoom

00:16:37,920 --> 00:16:42,160
ah i need to get my chat window open

00:16:40,399 --> 00:16:44,560
sorry i'm taking a pause here

00:16:42,160 --> 00:16:46,480
i just want to make sure uh there's

00:16:44,560 --> 00:16:48,480
nothing going on that

00:16:46,480 --> 00:16:49,759
is a problem because you never know on

00:16:48,480 --> 00:16:51,040
these virtual events

00:16:49,759 --> 00:16:52,959
you know they're they're awesome and

00:16:51,040 --> 00:16:54,639
they're a lot of fun but um

00:16:52,959 --> 00:16:56,720
sometimes things are going off the rails

00:16:54,639 --> 00:16:59,920
and you can't tell from your end

00:16:56,720 --> 00:16:59,920
all right it looks like we're good

00:17:00,800 --> 00:17:04,079
all right so you can run it as a demon

00:17:03,519 --> 00:17:06,319
what does that

00:17:04,079 --> 00:17:07,919
mean if you think about a microservice

00:17:06,319 --> 00:17:10,799
architecture

00:17:07,919 --> 00:17:12,319
um i'm i'm an old guy so to me it's just

00:17:10,799 --> 00:17:13,439
service architectures right they should

00:17:12,319 --> 00:17:14,559
be the right size

00:17:13,439 --> 00:17:16,559
but what we're talking about are

00:17:14,559 --> 00:17:20,000
distributed systems

00:17:16,559 --> 00:17:23,520
so you can stand up oppa

00:17:20,000 --> 00:17:25,839
as a demon to be called over the network

00:17:23,520 --> 00:17:28,960
and that's pretty cool for some use

00:17:25,839 --> 00:17:31,919
cases that's the best way to deploy it

00:17:28,960 --> 00:17:33,200
in our particular case we use it as a

00:17:31,919 --> 00:17:35,360
library

00:17:33,200 --> 00:17:36,480
and it's great that you have this option

00:17:35,360 --> 00:17:40,400
because you know

00:17:36,480 --> 00:17:42,559
a network call is about 100 times slower

00:17:40,400 --> 00:17:43,760
uh 10 to 100 times slower than a local

00:17:42,559 --> 00:17:45,600
call right

00:17:43,760 --> 00:17:46,960
depending on your network it can be much

00:17:45,600 --> 00:17:49,679
slower than that

00:17:46,960 --> 00:17:51,440
so we at feud do billions of open

00:17:49,679 --> 00:17:54,480
evaluations a day

00:17:51,440 --> 00:17:56,080
so we use it as a library and that's

00:17:54,480 --> 00:17:58,559
kind of awesome you can deploy it either

00:17:56,080 --> 00:18:00,880
way it's a go program

00:17:58,559 --> 00:18:02,400
let's go jump over to their github and

00:18:00,880 --> 00:18:06,799
we'll poke around a little bit

00:18:02,400 --> 00:18:09,130
at that why there we go

00:18:06,799 --> 00:18:10,880
my mouse cursor has disappeared for me

00:18:09,130 --> 00:18:14,880
[Laughter]

00:18:10,880 --> 00:18:16,320
all right um let's just take a quick

00:18:14,880 --> 00:18:18,080
look you can see here it's it's

00:18:16,320 --> 00:18:21,919
completely open source

00:18:18,080 --> 00:18:24,880
4 000 stars uh almost 500 forks

00:18:21,919 --> 00:18:25,760
so it's getting used a lot um again it's

00:18:24,880 --> 00:18:28,799
a go program

00:18:25,760 --> 00:18:31,039
it's it's very very solidly built

00:18:28,799 --> 00:18:32,400
as i mentioned earlier we at fugue had

00:18:31,039 --> 00:18:36,080
written our own

00:18:32,400 --> 00:18:37,760
uh pure functional uh policy as code and

00:18:36,080 --> 00:18:39,039
infrastructure as code language with a

00:18:37,760 --> 00:18:40,960
compiler

00:18:39,039 --> 00:18:43,120
based on the haskell type system we're

00:18:40,960 --> 00:18:45,679
pretty nerdy about this stuff

00:18:43,120 --> 00:18:48,000
and we take our computer science pretty

00:18:45,679 --> 00:18:49,600
seriously here and when we saw oppa

00:18:48,000 --> 00:18:51,280
we got pretty excited because it's

00:18:49,600 --> 00:18:55,039
actually really good

00:18:51,280 --> 00:18:58,640
it's it's very well implemented

00:18:55,039 --> 00:18:58,880
data log is a a well understood language

00:18:58,640 --> 00:19:01,120
it's

00:18:58,880 --> 00:19:02,720
that's a serious language with a lot of

00:19:01,120 --> 00:19:06,240
the features you would want

00:19:02,720 --> 00:19:09,360
and uh we're really big big fans but so

00:19:06,240 --> 00:19:10,400
are a lot of other folks so let's take a

00:19:09,360 --> 00:19:12,720
look at the

00:19:10,400 --> 00:19:13,840
adopters here so this is just their

00:19:12,720 --> 00:19:17,039
github repo

00:19:13,840 --> 00:19:21,039
and you can see atlassian is using oppa

00:19:17,039 --> 00:19:22,720
uh bny melon capital one chef cloudflare

00:19:21,039 --> 00:19:25,039
uh we're in this list we were a very

00:19:22,720 --> 00:19:28,400
early adopter a couple of years ago

00:19:25,039 --> 00:19:32,559
of oppa goldman sachs netflix

00:19:28,400 --> 00:19:36,840
pinterest uh sap t-mobile

00:19:32,559 --> 00:19:39,919
uh yelp so so the reason this

00:19:36,840 --> 00:19:42,400
matters for you when you're making a

00:19:39,919 --> 00:19:46,080
choice in this area

00:19:42,400 --> 00:19:49,200
is oppa will give engineers

00:19:46,080 --> 00:19:50,880
valuable skills in the market and that's

00:19:49,200 --> 00:19:52,640
a really powerful thing

00:19:50,880 --> 00:19:55,039
if you're an engineer you know you don't

00:19:52,640 --> 00:19:56,240
want to learn something that only works

00:19:55,039 --> 00:19:58,400
in some narrow use case

00:19:56,240 --> 00:19:59,440
you want to learn something that is a

00:19:58,400 --> 00:20:01,280
marketable skill

00:19:59,440 --> 00:20:03,039
that you're you know that that learning

00:20:01,280 --> 00:20:03,919
time is going to be leveraged on many

00:20:03,039 --> 00:20:06,960
projects

00:20:03,919 --> 00:20:10,880
well oppa has the kind of profile

00:20:06,960 --> 00:20:10,880
uh that that will get you that

00:20:12,400 --> 00:20:18,000
um yeah so let's see here

00:20:16,240 --> 00:20:19,360
you can you can contribute to it we

00:20:18,000 --> 00:20:22,720
contribute to it quite a lot

00:20:19,360 --> 00:20:26,559
as i said it is a go

00:20:22,720 --> 00:20:28,960
project we're big fans of go here um

00:20:26,559 --> 00:20:30,000
it's not coincidental that api

00:20:28,960 --> 00:20:31,840
authorization

00:20:30,000 --> 00:20:33,120
is the top of the list here that's what

00:20:31,840 --> 00:20:35,760
most folks

00:20:33,120 --> 00:20:37,120
that are using opa are doing with it in

00:20:35,760 --> 00:20:38,640
my experience

00:20:37,120 --> 00:20:41,360
all right so what we do at fugue is

00:20:38,640 --> 00:20:41,840
quite different what we do at fugue and

00:20:41,360 --> 00:20:44,880
uh

00:20:41,840 --> 00:20:47,360
let me show you an open source project

00:20:44,880 --> 00:20:48,159
it's really weird my mouse cursor arrow

00:20:47,360 --> 00:20:51,760
has disappeared

00:20:48,159 --> 00:20:54,760
so i'm kind of shooting blind um

00:20:51,760 --> 00:20:56,000
is cloud infrastructure not api

00:20:54,760 --> 00:20:59,280
authorizations

00:20:56,000 --> 00:21:01,360
but rather analysis of infrastructure to

00:20:59,280 --> 00:21:03,840
determine if it's safe or not

00:21:01,360 --> 00:21:05,039
and we've put out an open source project

00:21:03,840 --> 00:21:09,600
called regula

00:21:05,039 --> 00:21:13,200
you can get it at github.comregula

00:21:09,600 --> 00:21:15,520
and you can see here that what it does

00:21:13,200 --> 00:21:17,520
is it checks terraform prior to

00:21:15,520 --> 00:21:20,000
deployment

00:21:17,520 --> 00:21:21,360
so and it's completely open source it's

00:21:20,000 --> 00:21:24,559
mostly made of

00:21:21,360 --> 00:21:27,760
rego rego is the language

00:21:24,559 --> 00:21:30,400
of oppa so i'm gonna in fact

00:21:27,760 --> 00:21:31,360
i think jump over and show you some

00:21:30,400 --> 00:21:32,880
source code

00:21:31,360 --> 00:21:35,039
don't run away don't get scared i'm

00:21:32,880 --> 00:21:38,080
going to really explain it in a

00:21:35,039 --> 00:21:41,360
hopefully hopefully a very simple way

00:21:38,080 --> 00:21:42,840
that you'll grok even if you're not

00:21:41,360 --> 00:21:46,240
super technical

00:21:42,840 --> 00:21:49,679
okay so uh let me make my phone a little

00:21:46,240 --> 00:21:52,640
bigger there we go um this is

00:21:49,679 --> 00:21:53,120
part of regular this is a rego file this

00:21:52,640 --> 00:21:56,480
is a

00:21:53,120 --> 00:21:59,120
program written for opa

00:21:56,480 --> 00:22:00,400
and it's in the form generally speaking

00:21:59,120 --> 00:22:03,679
of a query

00:22:00,400 --> 00:22:05,520
making assertions so um

00:22:03,679 --> 00:22:07,919
remember it's a real language we get

00:22:05,520 --> 00:22:11,039
comments yay

00:22:07,919 --> 00:22:13,440
we don't have to write in yaml or

00:22:11,039 --> 00:22:14,880
json and worry about indentations and

00:22:13,440 --> 00:22:18,080
quoting everything

00:22:14,880 --> 00:22:18,720
it has types in it it's it's a real

00:22:18,080 --> 00:22:21,440
language

00:22:18,720 --> 00:22:21,919
and you can create packages so that's

00:22:21,440 --> 00:22:25,039
kind of

00:22:21,919 --> 00:22:28,080
awesome so this package is called rules

00:22:25,039 --> 00:22:31,280
kms rotate and what we wrote here

00:22:28,080 --> 00:22:34,480
is uh just a very very

00:22:31,280 --> 00:22:38,000
simple check to see

00:22:34,480 --> 00:22:41,039
if kms keys are set to rotate

00:22:38,000 --> 00:22:42,720
all right so one of the characteristics

00:22:41,039 --> 00:22:46,159
of a good language

00:22:42,720 --> 00:22:46,960
is that doing easy things and simple

00:22:46,159 --> 00:22:50,559
things

00:22:46,960 --> 00:22:53,760
is easy another characteristic

00:22:50,559 --> 00:22:57,360
is that doing arbitrarily complex things

00:22:53,760 --> 00:22:59,919
is possible or are possible

00:22:57,360 --> 00:23:00,799
so here i'm showing you the simple

00:22:59,919 --> 00:23:03,360
because we've

00:23:00,799 --> 00:23:04,320
done a lot of the complex for you in

00:23:03,360 --> 00:23:07,600
regula

00:23:04,320 --> 00:23:09,520
so here we're just naming the package

00:23:07,600 --> 00:23:13,120
we're saying the resource type we're

00:23:09,520 --> 00:23:15,120
going to consider is an aws kms key

00:23:13,120 --> 00:23:16,799
and you'll see we have some libraries

00:23:15,120 --> 00:23:18,240
getting back to the complexity behind

00:23:16,799 --> 00:23:20,480
the scenes

00:23:18,240 --> 00:23:21,280
that you can get for free and open

00:23:20,480 --> 00:23:24,240
source

00:23:21,280 --> 00:23:25,280
that that make this so simple and then

00:23:24,240 --> 00:23:28,720
we're mapping it

00:23:25,280 --> 00:23:29,760
to some controls so in this case uh cis

00:23:28,720 --> 00:23:32,640
benchmark

00:23:29,760 --> 00:23:33,919
as well as our own internal regula

00:23:32,640 --> 00:23:36,960
accounting of rules

00:23:33,919 --> 00:23:38,320
just so we have a enumeration of

00:23:36,960 --> 00:23:40,640
controls that we can

00:23:38,320 --> 00:23:41,760
map to different families uh not just

00:23:40,640 --> 00:23:44,159
cis

00:23:41,760 --> 00:23:45,360
so here's here's the the real code

00:23:44,159 --> 00:23:49,279
though

00:23:45,360 --> 00:23:49,919
um is deny if uh not input enable key

00:23:49,279 --> 00:23:52,880
rotation

00:23:49,919 --> 00:23:54,799
so and then send the message back and

00:23:52,880 --> 00:23:56,240
this is the important part right

00:23:54,799 --> 00:23:58,159
it's important to check it but it's

00:23:56,240 --> 00:23:58,880
equally important to explain to the

00:23:58,159 --> 00:24:01,679
engineer

00:23:58,880 --> 00:24:02,720
what they need to fix just like your

00:24:01,679 --> 00:24:05,120
compiler

00:24:02,720 --> 00:24:06,080
or interpreter or debugger will help you

00:24:05,120 --> 00:24:08,000
with

00:24:06,080 --> 00:24:11,120
so you can send this message back saying

00:24:08,000 --> 00:24:14,000
hey kmsk rotation should be

00:24:11,120 --> 00:24:16,000
enabled all right so so this is

00:24:14,000 --> 00:24:17,200
effectively you know it's uh it's four

00:24:16,000 --> 00:24:19,760
lines of code

00:24:17,200 --> 00:24:20,480
functioning code uh you know other than

00:24:19,760 --> 00:24:23,919
just the

00:24:20,480 --> 00:24:25,600
declarations of some variables um

00:24:23,919 --> 00:24:26,960
but two of those are you know mostly

00:24:25,600 --> 00:24:29,440
just angle brackets

00:24:26,960 --> 00:24:30,960
so it's a really really simple way to do

00:24:29,440 --> 00:24:33,600
this you do have to get

00:24:30,960 --> 00:24:34,480
used to working with a declarative

00:24:33,600 --> 00:24:36,159
language

00:24:34,480 --> 00:24:39,440
another example of a declarative

00:24:36,159 --> 00:24:42,159
language is generally speaking sql

00:24:39,440 --> 00:24:43,919
so it's more like a query language than

00:24:42,159 --> 00:24:47,440
it's like python

00:24:43,919 --> 00:24:49,919
i do want to show you that you can do

00:24:47,440 --> 00:24:50,960
the other thing i mentioned so this is

00:24:49,919 --> 00:24:54,480
make

00:24:50,960 --> 00:24:57,679
simple things make obvious things easy

00:24:54,480 --> 00:24:58,840
but make arbitrarily complex and

00:24:57,679 --> 00:25:02,000
difficult things

00:24:58,840 --> 00:25:03,039
possible and so this is one of the

00:25:02,000 --> 00:25:06,640
libraries

00:25:03,039 --> 00:25:08,480
we ship with regula and this is another

00:25:06,640 --> 00:25:10,480
reason why you want a real language is

00:25:08,480 --> 00:25:11,760
so you can have libraries and you can

00:25:10,480 --> 00:25:14,640
have packages

00:25:11,760 --> 00:25:15,120
so this package we just called fugue and

00:25:14,640 --> 00:25:17,520
here

00:25:15,120 --> 00:25:20,320
we're doing a bunch of work behind the

00:25:17,520 --> 00:25:22,400
scenes like you do in a library

00:25:20,320 --> 00:25:25,279
to do things like define resource types

00:25:22,400 --> 00:25:28,640
and resources by type so you can call

00:25:25,279 --> 00:25:30,640
these simple things and

00:25:28,640 --> 00:25:32,240
you know here's the resources view we've

00:25:30,640 --> 00:25:35,120
done a lot of work in here

00:25:32,240 --> 00:25:35,520
so i'm i'm not showing you this to scare

00:25:35,120 --> 00:25:38,080
you

00:25:35,520 --> 00:25:38,960
the opposite i'm showing you that you

00:25:38,080 --> 00:25:42,000
can do

00:25:38,960 --> 00:25:45,679
again uh easy things very

00:25:42,000 --> 00:25:48,080
very easily with regular and with opa

00:25:45,679 --> 00:25:49,039
but you can do very complex things

00:25:48,080 --> 00:25:52,240
there's really not

00:25:49,039 --> 00:25:55,200
a uh an arbitrary limit

00:25:52,240 --> 00:25:56,240
on how far this can go all right i'm

00:25:55,200 --> 00:25:59,279
going to show you one

00:25:56,240 --> 00:26:02,720
more thing on the web here

00:25:59,279 --> 00:26:04,880
and then um we can go back

00:26:02,720 --> 00:26:06,400
and i don't know chris are we taking

00:26:04,880 --> 00:26:11,840
live q a here

00:26:06,400 --> 00:26:11,840
help me out

00:26:12,400 --> 00:26:16,000
i think we might have lost chris um i'll

00:26:15,200 --> 00:26:18,400
ask him

00:26:16,000 --> 00:26:20,000
uh oh silvia says that you guys can see

00:26:18,400 --> 00:26:21,919
my cursor that's good

00:26:20,000 --> 00:26:24,000
i can see the blue ring okay i got my

00:26:21,919 --> 00:26:28,480
cursor back so showing you one more

00:26:24,000 --> 00:26:28,480
open source project um

00:26:28,640 --> 00:26:33,039
it's called freco hey krista would you

00:26:31,600 --> 00:26:33,760
did we get you back should i leave some

00:26:33,039 --> 00:26:35,679
time for q

00:26:33,760 --> 00:26:37,039
a at the end or how do we want to do

00:26:35,679 --> 00:26:39,360
this hey hey

00:26:37,039 --> 00:26:40,799
josh yeah i'm here i'm sorry i just had

00:26:39,360 --> 00:26:42,080
a little delay there as i've

00:26:40,799 --> 00:26:43,760
muted myself while you're giving the

00:26:42,080 --> 00:26:44,720
presentation we've gotten one question

00:26:43,760 --> 00:26:47,120
so far

00:26:44,720 --> 00:26:48,480
uh it's not really synchronous to your

00:26:47,120 --> 00:26:50,080
your content so

00:26:48,480 --> 00:26:51,520
uh if you want to leave a couple minutes

00:26:50,080 --> 00:26:54,240
at the end we can just take q

00:26:51,520 --> 00:26:55,600
a as well as any others that come in um

00:26:54,240 --> 00:26:57,039
or we can do it real time

00:26:55,600 --> 00:26:58,400
we're flexible but yeah i'd say go ahead

00:26:57,039 --> 00:26:58,960
and continue and just leave us like you

00:26:58,400 --> 00:27:01,440
know maybe

00:26:58,960 --> 00:27:03,279
three five minutes at the end to address

00:27:01,440 --> 00:27:06,400
all right i will do that

00:27:03,279 --> 00:27:08,799
um so another open source project here

00:27:06,400 --> 00:27:10,080
is called frego which is the fugue grego

00:27:08,799 --> 00:27:13,440
toolkit it's

00:27:10,080 --> 00:27:16,000
github.com fugue

00:27:13,440 --> 00:27:17,760
frego and we built this for a couple of

00:27:16,000 --> 00:27:20,399
reasons

00:27:17,760 --> 00:27:21,440
what it what it will do it it is its

00:27:20,399 --> 00:27:24,240
namesake it's a

00:27:21,440 --> 00:27:26,000
it's a toolkit for programming rego it

00:27:24,240 --> 00:27:28,799
will allow you to do things like setting

00:27:26,000 --> 00:27:30,240
breakpoints and you know we write a

00:27:28,799 --> 00:27:34,000
whole lot of rego

00:27:30,240 --> 00:27:37,600
at few and we operate it at massive

00:27:34,000 --> 00:27:38,640
scale so we needed tooling including a

00:27:37,600 --> 00:27:41,279
rebel

00:27:38,640 --> 00:27:42,960
and you know again the ability to do

00:27:41,279 --> 00:27:46,080
things like set breakpoints

00:27:42,960 --> 00:27:49,760
that would help us develop a complex

00:27:46,080 --> 00:27:51,919
rego code because we write a lot of that

00:27:49,760 --> 00:27:52,960
so we've put this out uh free and open

00:27:51,919 --> 00:27:57,440
source

00:27:52,960 --> 00:27:59,279
um it also happens to because our use

00:27:57,440 --> 00:28:02,559
case is evaluating

00:27:59,279 --> 00:28:04,559
very large configuration data

00:28:02,559 --> 00:28:06,559
well very large compared to individual

00:28:04,559 --> 00:28:09,919
transactions

00:28:06,559 --> 00:28:13,440
against lots and lots and lots of

00:28:09,919 --> 00:28:14,720
reggae rules we are very sensitive to

00:28:13,440 --> 00:28:18,080
performance

00:28:14,720 --> 00:28:19,600
so frego is not a replacement for the

00:28:18,080 --> 00:28:22,880
opa runtime

00:28:19,600 --> 00:28:26,480
for everyone it doesn't run as a demon

00:28:22,880 --> 00:28:27,440
for example so generally to get started

00:28:26,480 --> 00:28:30,640
i would suggest

00:28:27,440 --> 00:28:32,480
running the the opa native

00:28:30,640 --> 00:28:35,360
implementation of the runtime

00:28:32,480 --> 00:28:35,679
but frego is also a runtime that if

00:28:35,360 --> 00:28:38,320
you're

00:28:35,679 --> 00:28:40,320
dealing with use cases similar to ours

00:28:38,320 --> 00:28:43,120
larger data sets

00:28:40,320 --> 00:28:44,720
uh lots and lots and lots of library

00:28:43,120 --> 00:28:48,159
level evaluation

00:28:44,720 --> 00:28:51,360
it's about 30 to 100 times faster

00:28:48,159 --> 00:28:54,799
and we're very much based on lambda

00:28:51,360 --> 00:28:56,799
in aws so for us time is money but

00:28:54,799 --> 00:28:57,919
most people who are using freco are

00:28:56,799 --> 00:29:01,120
using it uh

00:28:57,919 --> 00:29:03,679
to help uh with writing rego

00:29:01,120 --> 00:29:06,960
code um so you can see we've got you

00:29:03,679 --> 00:29:09,360
know 150 or so folks i think regulars

00:29:06,960 --> 00:29:11,039
yeah in the mid 200s of folks that are

00:29:09,360 --> 00:29:12,559
using it and we're you know getting good

00:29:11,039 --> 00:29:13,760
contributions we're very active

00:29:12,559 --> 00:29:16,640
maintainers of these

00:29:13,760 --> 00:29:17,360
we're also contributors back to the opa

00:29:16,640 --> 00:29:20,159
um

00:29:17,360 --> 00:29:21,279
project itself all right i'm going to

00:29:20,159 --> 00:29:25,679
show you one

00:29:21,279 --> 00:29:29,120
more way uh to use opa i've got to log

00:29:25,679 --> 00:29:32,159
in to our free sas here

00:29:29,120 --> 00:29:32,640
so if you we uh i i promise this would

00:29:32,159 --> 00:29:34,320
not be

00:29:32,640 --> 00:29:35,679
a product demo i'm just going to show

00:29:34,320 --> 00:29:38,480
you how we use opa

00:29:35,679 --> 00:29:40,640
in the product um it's not going to be a

00:29:38,480 --> 00:29:43,840
full product demo let me log in here

00:29:40,640 --> 00:29:46,880
so what we do is a sas

00:29:43,840 --> 00:29:50,480
for cloud security

00:29:46,880 --> 00:29:52,960
and cloud configuration

00:29:50,480 --> 00:29:54,080
and if you're at an individual

00:29:52,960 --> 00:29:57,440
contributor level

00:29:54,080 --> 00:30:00,480
with like less than 1500 cloud resources

00:29:57,440 --> 00:30:02,080
it's free forever um so i'm but

00:30:00,480 --> 00:30:03,600
i'm just going to show you what oppa

00:30:02,080 --> 00:30:05,919
does here for for

00:30:03,600 --> 00:30:07,919
uh at the run time because i said

00:30:05,919 --> 00:30:08,720
earlier in the deck right if i go back

00:30:07,919 --> 00:30:11,679
to my

00:30:08,720 --> 00:30:11,679
to my deck here

00:30:12,559 --> 00:30:16,960
you know we want this through the entire

00:30:14,799 --> 00:30:20,320
sdlc

00:30:16,960 --> 00:30:23,760
so regula is handling the design

00:30:20,320 --> 00:30:24,080
time if you're using terraform regular

00:30:23,760 --> 00:30:27,600
can

00:30:24,080 --> 00:30:31,520
also help you during deploy time by

00:30:27,600 --> 00:30:34,880
building regula into your ci cd pipeline

00:30:31,520 --> 00:30:36,240
but when you run a terraform template

00:30:34,880 --> 00:30:38,960
for example

00:30:36,240 --> 00:30:41,679
the infrastructure you get is more than

00:30:38,960 --> 00:30:44,320
what was defined in the template

00:30:41,679 --> 00:30:45,840
what i mean by that is ap cloud apis

00:30:44,320 --> 00:30:48,960
have side effects

00:30:45,840 --> 00:30:51,520
so when you're defining an

00:30:48,960 --> 00:30:52,960
individual you know ec2 instance for

00:30:51,520 --> 00:30:56,320
example

00:30:52,960 --> 00:30:58,880
you are saying and give me a volume

00:30:56,320 --> 00:31:00,480
and that volume a disk volume ebs volume

00:30:58,880 --> 00:31:02,720
generally folks do that

00:31:00,480 --> 00:31:04,640
it has its own characteristics if you

00:31:02,720 --> 00:31:07,919
create a vpc network

00:31:04,640 --> 00:31:09,600
uh your if you don't narrowly specify

00:31:07,919 --> 00:31:12,000
every parameter of it you're going to

00:31:09,600 --> 00:31:15,120
get things like default routing tables

00:31:12,000 --> 00:31:19,039
and and default security groups

00:31:15,120 --> 00:31:22,799
and those can't always be inferred

00:31:19,039 --> 00:31:24,960
from the infrastructure's code template

00:31:22,799 --> 00:31:26,159
that's what i mean by side effects so

00:31:24,960 --> 00:31:29,360
you also need

00:31:26,159 --> 00:31:30,960
to carry this through into the runtime

00:31:29,360 --> 00:31:33,519
in our opinion

00:31:30,960 --> 00:31:36,480
now the beauty of oppa is you can use

00:31:33,519 --> 00:31:39,200
the same rules the whole way through

00:31:36,480 --> 00:31:41,360
so uh in the past you know

00:31:39,200 --> 00:31:43,120
infrastructures code vendors would put

00:31:41,360 --> 00:31:44,240
like some security stuff out for their

00:31:43,120 --> 00:31:46,559
iac stuff

00:31:44,240 --> 00:31:47,679
but then you couldn't use that once it

00:31:46,559 --> 00:31:50,799
was deployed

00:31:47,679 --> 00:31:52,559
you just had to believe have faith that

00:31:50,799 --> 00:31:54,320
nothing would ever change

00:31:52,559 --> 00:31:55,760
in production well guess what it does

00:31:54,320 --> 00:31:58,559
and everyone knows that

00:31:55,760 --> 00:32:00,159
and so another set of policy as code is

00:31:58,559 --> 00:32:02,320
typically used

00:32:00,159 --> 00:32:04,159
to check it well those things aren't

00:32:02,320 --> 00:32:06,880
going to agree

00:32:04,159 --> 00:32:07,440
in all cases if you've ever tried to

00:32:06,880 --> 00:32:09,440
write

00:32:07,440 --> 00:32:11,760
a program in two different languages and

00:32:09,440 --> 00:32:15,120
get it to perform exactly the same

00:32:11,760 --> 00:32:15,919
you know what i mean it is a true

00:32:15,120 --> 00:32:19,360
challenge

00:32:15,919 --> 00:32:20,960
and it's honestly not feasible in in the

00:32:19,360 --> 00:32:22,799
long run in its scale

00:32:20,960 --> 00:32:24,799
so the beauty of using opa through this

00:32:22,799 --> 00:32:28,000
whole thing is the exact

00:32:24,799 --> 00:32:31,360
same collection of policy as code can

00:32:28,000 --> 00:32:34,559
be uh employed throughout the entire

00:32:31,360 --> 00:32:37,360
life cycle so i'm going to show you here

00:32:34,559 --> 00:32:38,080
how we do that at fugue in the runtime

00:32:37,360 --> 00:32:40,080
and again

00:32:38,080 --> 00:32:41,679
for developers this is free forever but

00:32:40,080 --> 00:32:44,640
you're you know you're welcome

00:32:41,679 --> 00:32:45,760
to to implement something similar it's a

00:32:44,640 --> 00:32:48,799
it's a lot of work

00:32:45,760 --> 00:32:52,720
uh so what you're seeing here is uh we

00:32:48,799 --> 00:32:53,679
we like to visualize um

00:32:52,720 --> 00:32:55,600
i'm just gonna full screen the

00:32:53,679 --> 00:32:57,360
visualization we like to visualize

00:32:55,600 --> 00:32:59,679
infrastructure because uh

00:32:57,360 --> 00:33:01,919
it's really hard to understand just big

00:32:59,679 --> 00:33:03,519
long lists and contextualize it

00:33:01,919 --> 00:33:05,679
so what we're showing here just to

00:33:03,519 --> 00:33:07,120
contextualize this is over on the left

00:33:05,679 --> 00:33:09,760
is the internet

00:33:07,120 --> 00:33:10,880
going into a gateway into a load

00:33:09,760 --> 00:33:14,240
balancer

00:33:10,880 --> 00:33:15,279
and some ec2 instances and we generate

00:33:14,240 --> 00:33:16,720
these diagrams

00:33:15,279 --> 00:33:18,399
automatically and and make them

00:33:16,720 --> 00:33:21,279
interactive and

00:33:18,399 --> 00:33:21,840
one of the main reasons we do that is to

00:33:21,279 --> 00:33:25,519
show

00:33:21,840 --> 00:33:27,919
where there are dangerous configurations

00:33:25,519 --> 00:33:29,519
or what we call misconfiguration so any

00:33:27,919 --> 00:33:32,480
of these red guys like let's look at

00:33:29,519 --> 00:33:32,480
this load balancer

00:33:32,559 --> 00:33:35,840
you can see here we're interrogating the

00:33:34,240 --> 00:33:39,440
entire configuration

00:33:35,840 --> 00:33:40,480
but in terms of why it turned red opa is

00:33:39,440 --> 00:33:42,159
doing that

00:33:40,480 --> 00:33:44,080
we've written hundreds of these oprah

00:33:42,159 --> 00:33:46,960
rules and in this case

00:33:44,080 --> 00:33:47,679
uh the elb listener source protocol

00:33:46,960 --> 00:33:51,039
should be

00:33:47,679 --> 00:33:52,000
encrypted right we should be using https

00:33:51,039 --> 00:33:56,080
generally

00:33:52,000 --> 00:33:58,000
not http uh and similarly cross-end load

00:33:56,080 --> 00:34:00,480
balancing should be enabled

00:33:58,000 --> 00:34:01,279
access logging should be enabled so

00:34:00,480 --> 00:34:03,760
these are pretty

00:34:01,279 --> 00:34:06,320
simple misconfigurations in that they're

00:34:03,760 --> 00:34:08,280
concerned only with one resource

00:34:06,320 --> 00:34:10,079
but we also have to think about

00:34:08,280 --> 00:34:11,520
misconfigurations that cross over

00:34:10,079 --> 00:34:15,599
resource types

00:34:11,520 --> 00:34:18,960
so i want to show you a little more um

00:34:15,599 --> 00:34:21,599
rego because oppa can do this

00:34:18,960 --> 00:34:23,440
most of the proprietary stuff out there

00:34:21,599 --> 00:34:24,000
struggles to do this it can it can like

00:34:23,440 --> 00:34:26,560
look at

00:34:24,000 --> 00:34:27,440
individual resource types but the

00:34:26,560 --> 00:34:30,639
beautiful thing

00:34:27,440 --> 00:34:33,919
with opa uh is you can

00:34:30,639 --> 00:34:35,760
you can look across multiple types and

00:34:33,919 --> 00:34:37,520
look at how those things relate

00:34:35,760 --> 00:34:39,280
so if you're not a programmer and you're

00:34:37,520 --> 00:34:40,639
not used to declarative languages

00:34:39,280 --> 00:34:43,359
this might be a little scary i'm going

00:34:40,639 --> 00:34:46,720
to try to make it easy to understand

00:34:43,359 --> 00:34:48,159
so here we're just collecting up all the

00:34:46,720 --> 00:34:49,839
policy resources

00:34:48,159 --> 00:34:51,520
and you can see those right here so

00:34:49,839 --> 00:34:54,560
these are different

00:34:51,520 --> 00:34:55,839
kinds of resources in the cloud an iam

00:34:54,560 --> 00:34:58,400
user policy

00:34:55,839 --> 00:34:59,280
an iam user policy attachment to

00:34:58,400 --> 00:35:02,480
something

00:34:59,280 --> 00:35:03,839
and an iam policy attachment itself

00:35:02,480 --> 00:35:05,520
you might think those are all the same

00:35:03,839 --> 00:35:08,560
they're not and so

00:35:05,520 --> 00:35:09,200
here we're saying i am policies should

00:35:08,560 --> 00:35:12,880
not be

00:35:09,200 --> 00:35:15,440
directly attached to users

00:35:12,880 --> 00:35:16,400
we should be attaching them via you know

00:35:15,440 --> 00:35:20,160
a a

00:35:16,400 --> 00:35:21,680
a group okay and that's best practice

00:35:20,160 --> 00:35:24,880
according to aws

00:35:21,680 --> 00:35:26,240
and so here you can see uh we we collect

00:35:24,880 --> 00:35:30,320
up the resources

00:35:26,240 --> 00:35:31,040
um we say uh is invalid uh based on

00:35:30,320 --> 00:35:34,400
those

00:35:31,040 --> 00:35:36,320
and then we assert the policy uh on

00:35:34,400 --> 00:35:37,839
those resources based on whether or not

00:35:36,320 --> 00:35:41,200
they're attached directly

00:35:37,839 --> 00:35:43,200
to users so as you're looking at running

00:35:41,200 --> 00:35:44,000
infrastructure that's regular so that's

00:35:43,200 --> 00:35:47,760
going to be looking

00:35:44,000 --> 00:35:49,200
at um pre-deployment but you can also

00:35:47,760 --> 00:35:49,680
look at these things on the fly like

00:35:49,200 --> 00:35:52,240
let's say

00:35:49,680 --> 00:35:54,960
somebody goes into the console and

00:35:52,240 --> 00:35:57,760
creates a new user and attaches directly

00:35:54,960 --> 00:35:59,839
an im policy well that that same

00:35:57,760 --> 00:36:03,119
infrastructure's code that worked

00:35:59,839 --> 00:36:05,680
pre-deployment will also function

00:36:03,119 --> 00:36:07,359
uh post-deployment if you're if you're

00:36:05,680 --> 00:36:08,480
using this kind of approach whether

00:36:07,359 --> 00:36:12,320
you're using

00:36:08,480 --> 00:36:17,440
our product or not

00:36:12,320 --> 00:36:17,440
okay i think i just have

00:36:17,599 --> 00:36:20,960
yeah so how to get started uh the first

00:36:20,320 --> 00:36:24,240
thing to do

00:36:20,960 --> 00:36:26,800
is just go to openpolicyagent.org

00:36:24,240 --> 00:36:28,800
and uh check out you know read up on it

00:36:26,800 --> 00:36:31,599
go to their github repo

00:36:28,800 --> 00:36:32,720
and you can learn a whole lot there so

00:36:31,599 --> 00:36:36,160
right here

00:36:32,720 --> 00:36:38,800
uh concrete examples uh for integrating

00:36:36,160 --> 00:36:39,680
uh opa with kubernetes terraform docker

00:36:38,800 --> 00:36:42,480
etc

00:36:39,680 --> 00:36:43,440
you know go explore these learn a little

00:36:42,480 --> 00:36:45,680
bit about

00:36:43,440 --> 00:36:47,280
rego so here we're talking about ingress

00:36:45,680 --> 00:36:49,040
validation this is not the use case

00:36:47,280 --> 00:36:51,359
fugue is focused on

00:36:49,040 --> 00:36:52,640
um and here you can see they have a

00:36:51,359 --> 00:36:56,640
small example

00:36:52,640 --> 00:36:59,359
of terraform uh over here in regular

00:36:56,640 --> 00:36:59,920
you can see we cover a whole bunch of

00:36:59,359 --> 00:37:04,160
stuff

00:36:59,920 --> 00:37:07,680
uh on aws on gcp and on azure

00:37:04,160 --> 00:37:08,560
just out of the box so you can learn a

00:37:07,680 --> 00:37:10,560
lot

00:37:08,560 --> 00:37:12,960
uh by looking through the source code

00:37:10,560 --> 00:37:16,160
that we've written i would suggest

00:37:12,960 --> 00:37:19,040
uh first starting with maybe uh

00:37:16,160 --> 00:37:19,520
some of the simple examples we give

00:37:19,040 --> 00:37:22,720
let's

00:37:19,520 --> 00:37:25,760
look at uh again kms rotate

00:37:22,720 --> 00:37:28,079
you know just just try to understand

00:37:25,760 --> 00:37:30,000
what the code is doing before you start

00:37:28,079 --> 00:37:36,480
diving into the libraries

00:37:30,000 --> 00:37:38,640
where more complexity wants um

00:37:36,480 --> 00:37:38,640
me

00:37:39,839 --> 00:37:43,440
there are a lot of good examples in here

00:37:41,599 --> 00:37:46,160
as well just showing you some

00:37:43,440 --> 00:37:46,480
basic stuff around rego and then you

00:37:46,160 --> 00:37:49,200
know

00:37:46,480 --> 00:37:50,960
try it out stand up a demon and shoot

00:37:49,200 --> 00:37:52,079
some data at it or just use it as a

00:37:50,960 --> 00:37:54,480
library

00:37:52,079 --> 00:37:55,520
frego is really handy for this because

00:37:54,480 --> 00:37:58,240
you actually

00:37:55,520 --> 00:38:00,400
don't need to do that if you just uh run

00:37:58,240 --> 00:38:02,560
freco and it's available it's actually a

00:38:00,400 --> 00:38:05,680
haskell program not a go program so

00:38:02,560 --> 00:38:06,800
it might be a little more challenging to

00:38:05,680 --> 00:38:09,200
contribute to

00:38:06,800 --> 00:38:10,400
uh but if you're a haskeller and you

00:38:09,200 --> 00:38:12,480
want to help with

00:38:10,400 --> 00:38:14,800
writing like super fast and developer

00:38:12,480 --> 00:38:16,240
friendly opa tools we would love to have

00:38:14,800 --> 00:38:18,240
your contributions

00:38:16,240 --> 00:38:19,599
uh and if you're not a haskeller uh you

00:38:18,240 --> 00:38:23,520
know it's a really

00:38:19,599 --> 00:38:26,880
cool and fun language um but this will

00:38:23,520 --> 00:38:27,200
give you again a rebel a rebels where

00:38:26,880 --> 00:38:28,880
you're

00:38:27,200 --> 00:38:30,320
programming and getting instantaneous

00:38:28,880 --> 00:38:32,400
feedback

00:38:30,320 --> 00:38:35,200
uh with a lot of additional

00:38:32,400 --> 00:38:37,200
functionality over the stock opa rebel

00:38:35,200 --> 00:38:38,320
so it's a way to just write little bits

00:38:37,200 --> 00:38:41,839
of code

00:38:38,320 --> 00:38:43,119
and learn as you go all right we're at

00:38:41,839 --> 00:38:46,240
00:38:43,119 --> 00:38:47,599
after the hour so um here are the

00:38:46,240 --> 00:38:50,640
resources that i

00:38:47,599 --> 00:38:54,160
i put up there and if anyone has any

00:38:50,640 --> 00:38:57,359
questions um i see a couple

00:38:54,160 --> 00:39:00,480
all right um eric

00:38:57,359 --> 00:39:03,599
asks have we seen any use cases

00:39:00,480 --> 00:39:06,160
involving policy as code to evaluate

00:39:03,599 --> 00:39:07,200
data or metadata structures uh yeah

00:39:06,160 --> 00:39:09,599
absolutely

00:39:07,200 --> 00:39:11,440
um particularly metadata i mean you can

00:39:09,599 --> 00:39:12,320
think of what few are doing what we're

00:39:11,440 --> 00:39:14,640
doing here

00:39:12,320 --> 00:39:15,359
when we oops i'm rotating the wrong

00:39:14,640 --> 00:39:18,960
screen

00:39:15,359 --> 00:39:22,880
what we're doing over here

00:39:18,960 --> 00:39:24,320
is we're actually grabbing all of the

00:39:22,880 --> 00:39:27,200
metadata

00:39:24,320 --> 00:39:27,520
related to resources on the cloud and

00:39:27,200 --> 00:39:29,920
then

00:39:27,520 --> 00:39:30,800
analyzing that versus opa so all you

00:39:29,920 --> 00:39:33,520
really need

00:39:30,800 --> 00:39:34,560
is a json data structure uh you could

00:39:33,520 --> 00:39:37,680
certainly

00:39:34,560 --> 00:39:39,440
uh i've not done it myself or

00:39:37,680 --> 00:39:41,680
i shouldn't say myself we at fugue have

00:39:39,440 --> 00:39:44,960
not been doing this

00:39:41,680 --> 00:39:46,560
but for example if you had uh some kind

00:39:44,960 --> 00:39:48,480
of data extract

00:39:46,560 --> 00:39:49,680
from a database or something and wanted

00:39:48,480 --> 00:39:51,440
to check for

00:39:49,680 --> 00:39:52,800
social security numbers i mean oppa

00:39:51,440 --> 00:39:56,800
could do that

00:39:52,800 --> 00:39:59,440
all right um john asks

00:39:56,800 --> 00:40:00,640
are there predefined rule sets for aws

00:39:59,440 --> 00:40:01,440
we can grab and run against our

00:40:00,640 --> 00:40:05,119
terraform

00:40:01,440 --> 00:40:07,440
yes you can uh that's what this thing is

00:40:05,119 --> 00:40:09,119
uh that we put out there regula so you

00:40:07,440 --> 00:40:13,040
can see we're doing cloudfront

00:40:09,119 --> 00:40:15,440
cloudtrail ebs im kms s3 vpc

00:40:13,040 --> 00:40:17,040
and we also handle other clouds in

00:40:15,440 --> 00:40:20,079
regula and we're adding to it

00:40:17,040 --> 00:40:23,359
and we welcome you to make contributions

00:40:20,079 --> 00:40:26,560
so uh absolutely uh regula

00:40:23,359 --> 00:40:27,839
is is for you if you want to uh use it

00:40:26,560 --> 00:40:30,640
with terraform

00:40:27,839 --> 00:40:32,079
um that's that's what it's for it's

00:40:30,640 --> 00:40:33,359
going to operate against your terraform

00:40:32,079 --> 00:40:36,240
plan

00:40:33,359 --> 00:40:37,280
and tell you at the plan stage prior to

00:40:36,240 --> 00:40:40,400
deployment

00:40:37,280 --> 00:40:42,880
uh whether what you're doing um is uh

00:40:40,400 --> 00:40:44,160
is dangerous or not uh and of course you

00:40:42,880 --> 00:40:47,599
can add your own

00:40:44,160 --> 00:40:49,520
oprah rules to this and also in our

00:40:47,599 --> 00:40:51,440
product you can have your own oprah

00:40:49,520 --> 00:40:53,839
rules and a get repo or whatever you

00:40:51,440 --> 00:40:53,839

YouTube URL: https://www.youtube.com/watch?v=0K8MAYpQnAU


