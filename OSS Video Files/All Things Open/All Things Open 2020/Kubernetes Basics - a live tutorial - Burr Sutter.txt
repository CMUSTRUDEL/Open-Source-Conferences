Title: Kubernetes Basics - a live tutorial - Burr Sutter
Publication date: 2020-10-29
Playlist: All Things Open 2020
Description: 
	Presented by: Burr Sutter, Red Hat
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: In this fast paced session, we will be learning the fundamentals of Kubernetes and the power of the Pod - the open source container orchestrator by the Cloud Native Computing Foundation.  

Be prepared to interact with other attendees and the instructor on this journey that includes the open hybrid cloud, Kubernetes, tooling, terminology, concepts, and practical exercises of how you can apply, deploy, and use Kubernetes to meet your cloud native application needs.   

Key agenda items include:
- Why use Kubernetes
- What are the key Kubernetes components and terminology
- Installation of minikube (or OpenShift)
- kubectl
- Pod, ReplicaSet, Deployment, Service
- Application Deployment techniques
- Logs
- Rolling updates
- Live and Ready

Installation steps prior to the session:
https://redhat-scholars.github.io/kubernetes-tutorial/kubernetes-tutorial/installation.html
Captions: 
	00:00:04,880 --> 00:00:08,639
that's right uh

00:00:05,759 --> 00:00:09,360
matthew all good done this works option

00:00:08,639 --> 00:00:12,400
one

00:00:09,360 --> 00:00:14,000
two don't get to setting thing didn't

00:00:12,400 --> 00:00:15,440
get to setting things up so matthew

00:00:14,000 --> 00:00:18,480
didn't get to set up

00:00:15,440 --> 00:00:19,439
that is okay that is okay here's the

00:00:18,480 --> 00:00:20,400
setup link

00:00:19,439 --> 00:00:22,720
you can go ahead and start the

00:00:20,400 --> 00:00:24,400
installation and the setup i'm actually

00:00:22,720 --> 00:00:26,400
i'm gonna walk through the setup also

00:00:24,400 --> 00:00:27,920
so we're gonna spend about three three

00:00:26,400 --> 00:00:29,439
and a half hours three four three hours

00:00:27,920 --> 00:00:30,960
45 minutes with each other

00:00:29,439 --> 00:00:33,120
really walking through all this

00:00:30,960 --> 00:00:36,640
kubernetes stuff hello james

00:00:33,120 --> 00:00:39,360
i see you here uh in the q a at least

00:00:36,640 --> 00:00:41,120
that is fantastic good to have you here

00:00:39,360 --> 00:00:41,920
that's james dean by the way in case you

00:00:41,120 --> 00:00:43,680
see a jd

00:00:41,920 --> 00:00:45,200
that's james dean or james date i'm

00:00:43,680 --> 00:00:47,039
kidding uh who's

00:00:45,200 --> 00:00:48,480
who's always with us or often with us

00:00:47,039 --> 00:00:49,760
from these kind of fun sessions

00:00:48,480 --> 00:00:51,039
and actually at this point james we're

00:00:49,760 --> 00:00:51,520
gonna let you teach this class how about

00:00:51,039 --> 00:00:53,680
that

00:00:51,520 --> 00:00:54,640
would that be kind of cool we can do

00:00:53,680 --> 00:00:57,360
that

00:00:54,640 --> 00:00:58,559
but i added the link to the installation

00:00:57,360 --> 00:00:59,359
for what we're going to be walking

00:00:58,559 --> 00:01:01,440
through today

00:00:59,359 --> 00:01:02,719
this is a live tutorial though so i want

00:01:01,440 --> 00:01:03,359
you guys to get hands on as much as

00:01:02,719 --> 00:01:05,360
possible

00:01:03,359 --> 00:01:07,439
so go ahead and put as go ahead and get

00:01:05,360 --> 00:01:08,880
mini cube installed if you can

00:01:07,439 --> 00:01:11,119
everything you see here though should

00:01:08,880 --> 00:01:12,880
work on your favorite kubernetes so mini

00:01:11,119 --> 00:01:13,840
cube is the one i default to for working

00:01:12,880 --> 00:01:15,280
on your laptop

00:01:13,840 --> 00:01:17,280
but if you want to use the one that's

00:01:15,280 --> 00:01:18,880
built into docker daemon here like

00:01:17,280 --> 00:01:20,320
docker for mac docker for windows that

00:01:18,880 --> 00:01:21,040
one should work many of the students

00:01:20,320 --> 00:01:23,360
i've had before

00:01:21,040 --> 00:01:24,720
use that one that one seems to work and

00:01:23,360 --> 00:01:28,320
then also you can

00:01:24,720 --> 00:01:30,079
use kind k-i-n-d uh so k-i-n-d

00:01:28,320 --> 00:01:31,439
kubernetes right that's that's another

00:01:30,079 --> 00:01:33,040
popular option

00:01:31,439 --> 00:01:35,439
the so that one might be the one you

00:01:33,040 --> 00:01:36,880
want but mini cube is the one i

00:01:35,439 --> 00:01:38,880
typically work with

00:01:36,880 --> 00:01:40,079
and have for a while now so i know it

00:01:38,880 --> 00:01:41,040
actually works pretty well and i'll add

00:01:40,079 --> 00:01:43,280
the link to the

00:01:41,040 --> 00:01:45,360
mini cube documentation there but it

00:01:43,280 --> 00:01:46,000
doesn't really matter i also have on my

00:01:45,360 --> 00:01:48,000
system

00:01:46,000 --> 00:01:49,680
i also have an open shift running here

00:01:48,000 --> 00:01:51,680
so in other words i have a full

00:01:49,680 --> 00:01:52,720
real production ready cluster running on

00:01:51,680 --> 00:01:54,320
the google cloud

00:01:52,720 --> 00:01:55,759
but i have mini cube running on my local

00:01:54,320 --> 00:01:56,960
laptop so we're going to be

00:01:55,759 --> 00:01:59,759
having a lot of fun with these different

00:01:56,960 --> 00:02:03,200
options as we get through it okay

00:01:59,759 --> 00:02:06,960
uh let's see here oh and micro

00:02:03,200 --> 00:02:10,720
micro yes so there's the micro k8 s

00:02:06,960 --> 00:02:11,760
micro k8s that option is also growing in

00:02:10,720 --> 00:02:13,680
popularity

00:02:11,760 --> 00:02:14,959
uh i've not personally tried that one

00:02:13,680 --> 00:02:16,640
but you know there's definitely people

00:02:14,959 --> 00:02:18,000
who love that one so you might want to

00:02:16,640 --> 00:02:19,680
try give that one a try

00:02:18,000 --> 00:02:21,840
but this is the hardest part coming up

00:02:19,680 --> 00:02:22,640
with a kubernetes that works for you

00:02:21,840 --> 00:02:24,720
okay

00:02:22,640 --> 00:02:26,560
and our goal here is to basically get

00:02:24,720 --> 00:02:28,239
you up and running with kubernetes get

00:02:26,560 --> 00:02:29,760
you some experience with kubernetes

00:02:28,239 --> 00:02:31,200
give you the basics of kubernetes but

00:02:29,760 --> 00:02:33,280
you'll see that we can cover a lot of

00:02:31,200 --> 00:02:35,599
ground depending on how fast we go

00:02:33,280 --> 00:02:36,319
so just in this one document alone we

00:02:35,599 --> 00:02:38,239
cover

00:02:36,319 --> 00:02:39,760
you know the basics of getting set up

00:02:38,239 --> 00:02:41,120
and how to use the cube control command

00:02:39,760 --> 00:02:43,200
line tool where the pod is

00:02:41,120 --> 00:02:44,400
replica set all that kind of jazz right

00:02:43,200 --> 00:02:46,879
even blue green deployments

00:02:44,400 --> 00:02:48,480
how to manipulate services building

00:02:46,879 --> 00:02:50,640
images resource limits

00:02:48,480 --> 00:02:52,319
we can get into secrets and operators

00:02:50,640 --> 00:02:54,080
custom resource definitions

00:02:52,319 --> 00:02:55,440
so we can go pretty far with the

00:02:54,080 --> 00:02:57,440
tutorial that we have

00:02:55,440 --> 00:02:59,040
and that's just one of the courses that

00:02:57,440 --> 00:03:00,400
if you guys want to dip into we could

00:02:59,040 --> 00:03:02,640
dip into some others

00:03:00,400 --> 00:03:04,080
uh for instance here on my one of my

00:03:02,640 --> 00:03:06,000
standard presentations

00:03:04,080 --> 00:03:08,560
i have a list of links here we also can

00:03:06,000 --> 00:03:09,599
cover istio k native quarkus kafka

00:03:08,560 --> 00:03:11,360
tecton

00:03:09,599 --> 00:03:13,200
and even generic containers if we wanted

00:03:11,360 --> 00:03:14,720
to lots of ground we could cover but

00:03:13,200 --> 00:03:18,239
we're gonna mostly focus on the

00:03:14,720 --> 00:03:19,360
cube uh kubernetes basics okay so here's

00:03:18,239 --> 00:03:21,840
what i want you guys to do well i'll

00:03:19,360 --> 00:03:23,200
give you guys these two slide decks

00:03:21,840 --> 00:03:24,560
uh we'll just we'll run through these

00:03:23,200 --> 00:03:25,920
slide decks since they match the course

00:03:24,560 --> 00:03:30,159
material a little bit better

00:03:25,920 --> 00:03:30,159
so you can go to this link here

00:03:30,400 --> 00:03:33,599
okay that link there and that'll get you

00:03:32,959 --> 00:03:34,879
into

00:03:33,599 --> 00:03:36,720
this primary deck you can see that some

00:03:34,879 --> 00:03:40,080
folks already joined

00:03:36,720 --> 00:03:40,560
and and this is your first cube talk

00:03:40,080 --> 00:03:42,400
ever

00:03:40,560 --> 00:03:44,400
all right all right so we won't go too

00:03:42,400 --> 00:03:45,920
fast then and you'll have to forgive me

00:03:44,400 --> 00:03:47,680
if i go too fast i just tend to move

00:03:45,920 --> 00:03:48,879
rather fast but we don't have to go fast

00:03:47,680 --> 00:03:51,040
today

00:03:48,879 --> 00:03:52,480
okay now if you if you don't have a

00:03:51,040 --> 00:03:54,480
background in linux

00:03:52,480 --> 00:03:55,760
learning kubernetes is a little bit of a

00:03:54,480 --> 00:03:57,920
chore because

00:03:55,760 --> 00:03:58,959
uh to some degree kubernetes assumes you

00:03:57,920 --> 00:04:00,480
know some linux

00:03:58,959 --> 00:04:02,319
if you don't feel uh but that's okay

00:04:00,480 --> 00:04:03,519
we'll we'll show you some basic linux

00:04:02,319 --> 00:04:04,959
things too and actually it's not really

00:04:03,519 --> 00:04:05,920
linux i'm running on a mac here for

00:04:04,959 --> 00:04:07,280
goodness sake

00:04:05,920 --> 00:04:09,040
but there is some linux containers that

00:04:07,280 --> 00:04:10,799
we're messing with over there

00:04:09,040 --> 00:04:12,080
so the world linux containers creates

00:04:10,799 --> 00:04:14,000
came from the linux community

00:04:12,080 --> 00:04:15,280
as a whole windows containers are under

00:04:14,000 --> 00:04:16,639
development of course those require

00:04:15,280 --> 00:04:18,880
windows servers and

00:04:16,639 --> 00:04:20,239
windows worker nodes but i don't do

00:04:18,880 --> 00:04:21,680
anything with windows here

00:04:20,239 --> 00:04:23,680
it is pretty much a linux world that i

00:04:21,680 --> 00:04:25,520
live in here okay

00:04:23,680 --> 00:04:27,680
so again get your mini cube up and

00:04:25,520 --> 00:04:28,880
running on your operating system

00:04:27,680 --> 00:04:30,639
and actually i'm gonna go ahead and

00:04:28,880 --> 00:04:32,400
start mine up here you'll notice we try

00:04:30,639 --> 00:04:34,000
to give you all the instructions

00:04:32,400 --> 00:04:35,120
for like if you're running on a mac if

00:04:34,000 --> 00:04:35,840
you're running on windows you're running

00:04:35,120 --> 00:04:37,199
on linux

00:04:35,840 --> 00:04:38,960
you know it's all basically the same

00:04:37,199 --> 00:04:40,240
stuff you got to get this mini cube

00:04:38,960 --> 00:04:42,720
binary downloaded

00:04:40,240 --> 00:04:44,639
and in case of a linux type distribution

00:04:42,720 --> 00:04:46,560
you need to make it an executable

00:04:44,639 --> 00:04:47,680
you need to get a cube control

00:04:46,560 --> 00:04:49,199
downloaded also

00:04:47,680 --> 00:04:51,040
and by the way there's lots of ways to

00:04:49,199 --> 00:04:52,320
download these guys this is just a

00:04:51,040 --> 00:04:53,199
simple way to get it on your local

00:04:52,320 --> 00:04:54,240
machine

00:04:53,199 --> 00:04:56,560
and of course you want to make sure

00:04:54,240 --> 00:04:58,320
they're both in your path okay those

00:04:56,560 --> 00:05:01,360
things have to be in your path

00:04:58,320 --> 00:05:04,400
uh so so if i if i just do a

00:05:01,360 --> 00:05:04,800
echo dollar path i got to get those

00:05:04,400 --> 00:05:06,240
things

00:05:04,800 --> 00:05:08,160
somewhere in there right they've just

00:05:06,240 --> 00:05:09,840
got to be in there someplace and so you

00:05:08,160 --> 00:05:13,840
should be to type in a mini cue

00:05:09,840 --> 00:05:15,840
version there we go and cube control

00:05:13,840 --> 00:05:17,360
version those are two key tools that

00:05:15,840 --> 00:05:18,639
you'll need to have access to

00:05:17,360 --> 00:05:20,960
and you notice i'm getting this error

00:05:18,639 --> 00:05:22,800
message about local host 8080

00:05:20,960 --> 00:05:24,880
and that is because i don't have my cube

00:05:22,800 --> 00:05:27,039
config set up correctly i don't have my

00:05:24,880 --> 00:05:27,919
cluster running at all yet so some of

00:05:27,039 --> 00:05:29,039
these problems

00:05:27,919 --> 00:05:31,039
some of these things start getting

00:05:29,039 --> 00:05:32,720
solved as we get going here

00:05:31,039 --> 00:05:34,320
do feel free though to throw questions

00:05:32,720 --> 00:05:36,080
at me in the q a

00:05:34,320 --> 00:05:37,440
panel i have it up over here as well as

00:05:36,080 --> 00:05:38,400
the chat if you have comments or

00:05:37,440 --> 00:05:39,360
concerns

00:05:38,400 --> 00:05:41,039
and then we're going to kind of go

00:05:39,360 --> 00:05:41,840
through this process all right but go

00:05:41,039 --> 00:05:43,199
through go ahead and get the

00:05:41,840 --> 00:05:45,360
installation working

00:05:43,199 --> 00:05:46,400
as a matter of fact let me let me go

00:05:45,360 --> 00:05:50,880
ahead and see here uh

00:05:46,400 --> 00:05:52,400
mini cube home fine dun dun cube config

00:05:50,880 --> 00:05:54,000
all right you want to get to set these

00:05:52,400 --> 00:05:55,280
environment variables

00:05:54,000 --> 00:05:57,520
and see there's a little windows tab

00:05:55,280 --> 00:05:58,800
here too we will be working by the way

00:05:57,520 --> 00:06:00,080
from the command line

00:05:58,800 --> 00:06:02,000
so you know you got to be comfortable

00:06:00,080 --> 00:06:03,520
with the command line that is probably

00:06:02,000 --> 00:06:05,520
the hardest piece of the learning curve

00:06:03,520 --> 00:06:06,319
for kubernetes is these command line

00:06:05,520 --> 00:06:08,000
tools

00:06:06,319 --> 00:06:10,319
while there are point and clicky things

00:06:08,000 --> 00:06:11,360
like if you have like uh openshift here

00:06:10,319 --> 00:06:14,319
right you can do everything pointing

00:06:11,360 --> 00:06:15,919
clicky if you want but that is

00:06:14,319 --> 00:06:17,600
openshift right which is a specific

00:06:15,919 --> 00:06:19,199
version of kubernetes and so

00:06:17,600 --> 00:06:21,120
to get the pointy clicky part you got to

00:06:19,199 --> 00:06:22,240
have a specific version of kubernetes

00:06:21,120 --> 00:06:24,400
right you got to have the

00:06:22,240 --> 00:06:25,840
the google version the amazon version

00:06:24,400 --> 00:06:26,880
and actually the amazon version doesn't

00:06:25,840 --> 00:06:29,440
have much point-and-click

00:06:26,880 --> 00:06:30,639
uh the azure version the red hat version

00:06:29,440 --> 00:06:32,000
right that kind of thing

00:06:30,639 --> 00:06:33,360
if you deal with just kind of vanilla

00:06:32,000 --> 00:06:34,720
kubernetes then you're mostly dealing

00:06:33,360 --> 00:06:36,560
with the command line which is a better

00:06:34,720 --> 00:06:38,319
way to learn in my opinion

00:06:36,560 --> 00:06:40,240
all right so you want to get those tools

00:06:38,319 --> 00:06:41,840
running and let me do let me double

00:06:40,240 --> 00:06:43,120
check something here

00:06:41,840 --> 00:06:44,560
this environment variable is very

00:06:43,120 --> 00:06:46,639
important to you because you're going to

00:06:44,560 --> 00:06:47,600
have things that populate in that file

00:06:46,639 --> 00:06:50,160
right there

00:06:47,600 --> 00:06:50,880
so you can connect to your kubernetes

00:06:50,160 --> 00:06:52,400
cluster

00:06:50,880 --> 00:06:54,400
so you want to make sure that's set

00:06:52,400 --> 00:06:56,000
correctly and that's what we basically

00:06:54,400 --> 00:06:58,960
you know are telling you here to do

00:06:56,000 --> 00:06:59,360
uh also if you you can firewall if you

00:06:58,960 --> 00:07:00,960
will

00:06:59,360 --> 00:07:02,560
different kubernetes clusters from each

00:07:00,960 --> 00:07:04,479
other by simply just having these

00:07:02,560 --> 00:07:06,080
different cube configs right different

00:07:04,479 --> 00:07:08,240
different config files and so i do that

00:07:06,080 --> 00:07:09,520
a ton i have i typically keep my

00:07:08,240 --> 00:07:11,039
clusters firewalled from each other

00:07:09,520 --> 00:07:12,000
pretty well meaning i don't like them to

00:07:11,039 --> 00:07:13,360
overlap

00:07:12,000 --> 00:07:15,039
and there's this other one this other

00:07:13,360 --> 00:07:18,240
one here called cube editor

00:07:15,039 --> 00:07:20,639
here let me double check that one

00:07:18,240 --> 00:07:21,759
okay what that means this will become

00:07:20,639 --> 00:07:23,280
important to you later but you're going

00:07:21,759 --> 00:07:24,240
to use a command called cube control

00:07:23,280 --> 00:07:25,919
edit

00:07:24,240 --> 00:07:27,680
and what it will do in this case is

00:07:25,919 --> 00:07:30,080
pop-up visual studio code

00:07:27,680 --> 00:07:31,280
instead of the normal vi experience that

00:07:30,080 --> 00:07:33,120
would provide for you

00:07:31,280 --> 00:07:34,160
and that's a much nicer editing

00:07:33,120 --> 00:07:36,000
environment so that's another

00:07:34,160 --> 00:07:37,919
environment variable that's good to set

00:07:36,000 --> 00:07:39,680
if you have visual studio code and you

00:07:37,919 --> 00:07:41,840
can do something like code dot

00:07:39,680 --> 00:07:44,160
on the command line right so visual

00:07:41,840 --> 00:07:45,280
studio code popping up there as an

00:07:44,160 --> 00:07:48,240
example

00:07:45,280 --> 00:07:49,280
okay so that's a nice little tip and

00:07:48,240 --> 00:07:50,560
we're going to cover a lot of tips and

00:07:49,280 --> 00:07:53,840
tricks by the way for getting

00:07:50,560 --> 00:07:55,599
all set up here

00:07:53,840 --> 00:07:59,280
and james says he can teach everyone

00:07:55,599 --> 00:08:01,360
what not to do and just notice that

00:07:59,280 --> 00:08:03,440
all right uh would it be crazy to try k

00:08:01,360 --> 00:08:04,960
uh k8 kubernetes on my raspberry pi

00:08:03,440 --> 00:08:07,360
instead of virtual locks

00:08:04,960 --> 00:08:08,879
yes and here's why uh you notice right

00:08:07,360 --> 00:08:10,960
here we basically when you

00:08:08,879 --> 00:08:12,560
we start mini cube up we basically say

00:08:10,960 --> 00:08:13,199
go ahead and give it eight gigs of ram

00:08:12,560 --> 00:08:15,680
and three

00:08:13,199 --> 00:08:17,440
cores and that's because we can do a lot

00:08:15,680 --> 00:08:19,919
with kubernetes okay

00:08:17,440 --> 00:08:21,840
so you know if you only have a raspberry

00:08:19,919 --> 00:08:23,199
pi with i forget the last raspberry pi

00:08:21,840 --> 00:08:24,720
rendition it might have two gigs of ram

00:08:23,199 --> 00:08:26,479
or something or one gig of ram

00:08:24,720 --> 00:08:28,160
and i think it does have four cores but

00:08:26,479 --> 00:08:28,879
i'm not sure how to behave when you use

00:08:28,160 --> 00:08:31,759
this

00:08:28,879 --> 00:08:33,440
so we basically need some resources uh

00:08:31,759 --> 00:08:35,279
what a raspberry pi is good for

00:08:33,440 --> 00:08:36,880
is being a worker node okay and we're

00:08:35,279 --> 00:08:39,120
gonna hear more about what that means

00:08:36,880 --> 00:08:41,200
but it shouldn't be the whole cluster so

00:08:39,120 --> 00:08:42,719
if you have six raspberry pi's

00:08:41,200 --> 00:08:44,720
i would say go for it if you have one

00:08:42,719 --> 00:08:46,160
raspberry pi you're going to be happier

00:08:44,720 --> 00:08:47,920
i think on your laptop

00:08:46,160 --> 00:08:49,600
uh just to keep my mind a raspberry pi

00:08:47,920 --> 00:08:50,399
is just just doesn't have much going on

00:08:49,600 --> 00:08:52,240
with it

00:08:50,399 --> 00:08:53,839
so i'm going to copy this command out

00:08:52,240 --> 00:08:55,519
and you can see it says mini cube start

00:08:53,839 --> 00:08:56,240
eight gigs around you can of course tune

00:08:55,519 --> 00:08:58,320
that uh

00:08:56,240 --> 00:08:59,600
we won't be needing all eight gigs for

00:08:58,320 --> 00:09:01,040
what we're doing here today

00:08:59,600 --> 00:09:02,480
so if you want to tune that down to five

00:09:01,040 --> 00:09:03,519
gigs of ram or something you'll probably

00:09:02,480 --> 00:09:05,360
be fine with that

00:09:03,519 --> 00:09:06,640
maybe two cores instead of three if you

00:09:05,360 --> 00:09:10,080
need to go a little slimmer

00:09:06,640 --> 00:09:10,800
i'm using kubernetes 118 today i'm using

00:09:10,080 --> 00:09:13,120
the vm

00:09:10,800 --> 00:09:15,200
driver a virtual box depending on your

00:09:13,120 --> 00:09:18,560
machine you might have kvm

00:09:15,200 --> 00:09:19,920
you might have a v what is a vsphere or

00:09:18,560 --> 00:09:20,959
whatever it's called

00:09:19,920 --> 00:09:22,640
you know you'll have to kind of look

00:09:20,959 --> 00:09:23,120
here and see what your different options

00:09:22,640 --> 00:09:26,640
are

00:09:23,120 --> 00:09:27,440
okay hyper-v on windows kvm parallels

00:09:26,640 --> 00:09:29,200
etc

00:09:27,440 --> 00:09:30,640
so you just want to kind of dig through

00:09:29,200 --> 00:09:31,360
the materials there to figure out which

00:09:30,640 --> 00:09:32,800
virtual

00:09:31,360 --> 00:09:35,680
virtualization solution you would like

00:09:32,800 --> 00:09:36,880
to use okay i use virtualbox because

00:09:35,680 --> 00:09:39,519
it's available everywhere

00:09:36,880 --> 00:09:41,200
and then dash p is your profile that

00:09:39,519 --> 00:09:42,399
gives it the profile name so i'm going

00:09:41,200 --> 00:09:44,640
to copy that

00:09:42,399 --> 00:09:45,519
and paste it in over here and let it

00:09:44,640 --> 00:09:46,800
start running

00:09:45,519 --> 00:09:49,040
you can see it's going to get going

00:09:46,800 --> 00:09:50,480
there and that's going to configure my

00:09:49,040 --> 00:09:51,839
environment for me and if you do use

00:09:50,480 --> 00:09:54,080
virtualbox

00:09:51,839 --> 00:09:56,160
you'll see that you'll see it pop up

00:09:54,080 --> 00:09:57,120
here the via virtual machine pop into

00:09:56,160 --> 00:09:59,360
virtualbox here

00:09:57,120 --> 00:10:00,320
there it goes so it's loading in now

00:09:59,360 --> 00:10:01,600
starting it up

00:10:00,320 --> 00:10:03,120
and then it's going to download a bunch

00:10:01,600 --> 00:10:05,440
of things from the internet to to

00:10:03,120 --> 00:10:07,360
basically create that kubernetes cluster

00:10:05,440 --> 00:10:09,440
right there inside that virtual machine

00:10:07,360 --> 00:10:11,920
the nice thing about using this uh

00:10:09,440 --> 00:10:12,880
vm based solution by the way is you can

00:10:11,920 --> 00:10:14,880
discard

00:10:12,880 --> 00:10:16,800
the whole mini cube discard that vm and

00:10:14,880 --> 00:10:18,560
recreate it from scratch i do that

00:10:16,800 --> 00:10:20,160
almost every day i did it today as a

00:10:18,560 --> 00:10:20,800
matter of fact right so for you guys

00:10:20,160 --> 00:10:22,560
right now

00:10:20,800 --> 00:10:24,320
i deleted my previous environment

00:10:22,560 --> 00:10:26,079
completely and i'm rebuilding it from

00:10:24,320 --> 00:10:28,320
scratch right now

00:10:26,079 --> 00:10:30,240
okay a couple minutes late could you

00:10:28,320 --> 00:10:31,519
please repost with links yes yes you

00:10:30,240 --> 00:10:34,320
want to make sure you have

00:10:31,519 --> 00:10:36,640
access to the installation guide and the

00:10:34,320 --> 00:10:39,920
written tutorial so that's that one

00:10:36,640 --> 00:10:41,680
also all the slideware you'll want to

00:10:39,920 --> 00:10:43,519
make sure you have access to that

00:10:41,680 --> 00:10:46,399
and this and i'll just give you access

00:10:43,519 --> 00:10:47,839
to all three of my decks because i teach

00:10:46,399 --> 00:10:50,560
this in a lot of different formats

00:10:47,839 --> 00:10:51,920
as an example and so they you'll be like

00:10:50,560 --> 00:10:53,040
there's some overlap in the slide decks

00:10:51,920 --> 00:10:54,399
but there's a lot of fun stuff in there

00:10:53,040 --> 00:10:55,600
too you'll want to check out

00:10:54,399 --> 00:10:57,519
so make sure you have access to all

00:10:55,600 --> 00:11:00,560
those links uh

00:10:57,519 --> 00:11:02,800
if you have at least 16 gigs of ram

00:11:00,560 --> 00:11:04,560
no for crw james you're going to want to

00:11:02,800 --> 00:11:07,600
have a 32 gig machine

00:11:04,560 --> 00:11:08,320
for a mini cube a 16 gig machine will be

00:11:07,600 --> 00:11:11,120
fine

00:11:08,320 --> 00:11:12,320
but if you're going to go to if you're

00:11:11,120 --> 00:11:14,640
using cover ready workspaces oh i'm

00:11:12,320 --> 00:11:17,120
sorry code ready workspace is not crc

00:11:14,640 --> 00:11:17,920
covering workspaces that runs inside the

00:11:17,120 --> 00:11:19,600
cluster

00:11:17,920 --> 00:11:22,399
i don't think you would run that on a 16

00:11:19,600 --> 00:11:24,160
gig you need at least a 32 gig machine i

00:11:22,399 --> 00:11:24,480
think to run crw inside your cluster

00:11:24,160 --> 00:11:27,120
there

00:11:24,480 --> 00:11:28,079
as an example so things take membrane so

00:11:27,120 --> 00:11:29,519
that's actually one thing you guys

00:11:28,079 --> 00:11:31,120
should understand right away there's no

00:11:29,519 --> 00:11:32,560
magic here though it looks like a lot of

00:11:31,120 --> 00:11:35,120
magic there's no magic

00:11:32,560 --> 00:11:36,320
things still take memory things still

00:11:35,120 --> 00:11:38,240
take cpu

00:11:36,320 --> 00:11:40,160
we're just going to highly virtualize it

00:11:38,240 --> 00:11:40,800
and slice and dice it and over commit it

00:11:40,160 --> 00:11:43,120
to death

00:11:40,800 --> 00:11:45,200
okay that's going to be what we're doing

00:11:43,120 --> 00:11:46,640
so get started on the installation

00:11:45,200 --> 00:11:49,120
it'll take a little while by the way so

00:11:46,640 --> 00:11:50,639
i've got mine cranking up all right

00:11:49,120 --> 00:11:52,240
and actually it's finished already i say

00:11:50,639 --> 00:11:53,120
it takes a while look how fast mine

00:11:52,240 --> 00:11:55,600
worked this time

00:11:53,120 --> 00:11:56,320
some days it can be very slow but i'm

00:11:55,600 --> 00:11:59,519
going to type in

00:11:56,320 --> 00:12:01,040
cube control cluster info

00:11:59,519 --> 00:12:04,079
and see i can tell that's on my little

00:12:01,040 --> 00:12:05,600
local environment here i'm 192 168.99

00:12:04,079 --> 00:12:07,200
because that's what virtualbox ip

00:12:05,600 --> 00:12:09,279
addresses look like so

00:12:07,200 --> 00:12:10,720
cube control cluster info cue control

00:12:09,279 --> 00:12:11,920
get nodes

00:12:10,720 --> 00:12:13,839
are two of the commands you should be

00:12:11,920 --> 00:12:15,120
able to work on right away

00:12:13,839 --> 00:12:19,040
now actually we'll paste this one into

00:12:15,120 --> 00:12:20,480
the chat so people have access to it

00:12:19,040 --> 00:12:22,240
okay make sure you know what that

00:12:20,480 --> 00:12:23,440
command looks like because then

00:12:22,240 --> 00:12:24,959
if you're running on a different cluster

00:12:23,440 --> 00:12:26,720
like if i come over here and go to my

00:12:24,959 --> 00:12:28,480
kubernetes cluster

00:12:26,720 --> 00:12:31,120
my openshift cluster on google i should

00:12:28,480 --> 00:12:34,320
say cluster info

00:12:31,120 --> 00:12:35,360
i come here you can kind of see there it

00:12:34,320 --> 00:12:37,279
is it's running at this

00:12:35,360 --> 00:12:38,639
ip address which actually is a domain

00:12:37,279 --> 00:12:39,920
name so it's actually running out on the

00:12:38,639 --> 00:12:41,519
public internet

00:12:39,920 --> 00:12:43,040
and i'm just connected to it from here

00:12:41,519 --> 00:12:44,880
as an example so

00:12:43,040 --> 00:12:46,880
this cube control cluster info tells you

00:12:44,880 --> 00:12:48,720
what cluster you're connected to

00:12:46,880 --> 00:12:50,399
what cluster you're pointing at and

00:12:48,720 --> 00:12:52,160
again that is a factor of this thing

00:12:50,399 --> 00:12:54,959
called cube config

00:12:52,160 --> 00:12:55,519
see that right there there it is and if

00:12:54,959 --> 00:12:57,200
you just

00:12:55,519 --> 00:12:59,200
cut that file you'll see there's some

00:12:57,200 --> 00:13:01,200
nice stuff in there as an example

00:12:59,200 --> 00:13:02,320
okay so we'll come back to that more in

00:13:01,200 --> 00:13:06,079
a second

00:13:02,320 --> 00:13:11,040
um yeah i mistyped

00:13:06,079 --> 00:13:12,560
code ready containers right yep yep yep

00:13:11,040 --> 00:13:14,320
yeah we're coated in containers you need

00:13:12,560 --> 00:13:16,240
you need big machines

00:13:14,320 --> 00:13:17,760
and uh we'll explain why that is in a

00:13:16,240 --> 00:13:21,839
second all right

00:13:17,760 --> 00:13:21,839
so code ready containers by the way is

00:13:21,920 --> 00:13:26,160
is actually openshift for your laptop

00:13:24,160 --> 00:13:28,639
but openshift is a fairly

00:13:26,160 --> 00:13:29,760
uh out of the box enterprise ready

00:13:28,639 --> 00:13:31,760
kubernetes

00:13:29,760 --> 00:13:33,120
and so that's really what so that's why

00:13:31,760 --> 00:13:34,800
it takes a lot more memory than let's

00:13:33,120 --> 00:13:36,399
say standard mini cube

00:13:34,800 --> 00:13:38,399
all right you'll get a chance to see

00:13:36,399 --> 00:13:39,680
some of that as we get going here

00:13:38,399 --> 00:13:41,279
all right so you have access to the

00:13:39,680 --> 00:13:42,160
slide deck you have access to tutorial

00:13:41,279 --> 00:13:43,519
you should get going

00:13:42,160 --> 00:13:45,199
let's kind of dive into this thing and

00:13:43,519 --> 00:13:47,680
get get moving here

00:13:45,199 --> 00:13:48,800
okay here's going to be our agenda we're

00:13:47,680 --> 00:13:50,800
gonna do this in two

00:13:48,800 --> 00:13:52,079
segments we're gonna do this one and

00:13:50,800 --> 00:13:53,440
then we're gonna do the second one which

00:13:52,079 --> 00:13:55,279
is the elementary side of it

00:13:53,440 --> 00:13:56,880
and then if we have time we'll continue

00:13:55,279 --> 00:13:58,160
going further and just keep going

00:13:56,880 --> 00:14:01,360
through this material

00:13:58,160 --> 00:14:02,160
okay lots of fun here it's fine if we're

00:14:01,360 --> 00:14:03,920
just

00:14:02,160 --> 00:14:05,920
winging it right when you say winging it

00:14:03,920 --> 00:14:07,920
do you mean you're getting it installed

00:14:05,920 --> 00:14:09,199
okay i'm hoping you guys are getting it

00:14:07,920 --> 00:14:11,120
installed because part of today's

00:14:09,199 --> 00:14:13,519
exercise is get everyone installed and

00:14:11,120 --> 00:14:15,040
up and running as much as possible it is

00:14:13,519 --> 00:14:16,399
hard though to get a kubernetes cluster

00:14:15,040 --> 00:14:17,360
running on your laptop i'm not going to

00:14:16,399 --> 00:14:19,760
say it's easy

00:14:17,360 --> 00:14:20,880
uh it you need to have decent hardware a

00:14:19,760 --> 00:14:22,880
single raspberry pi

00:14:20,880 --> 00:14:24,880
won't cut it really to run a whole

00:14:22,880 --> 00:14:26,399
cluster a raspberry pi for one of the

00:14:24,880 --> 00:14:27,920
nodes is fine we'll explain that in a

00:14:26,399 --> 00:14:29,199
second but i would say a whole cluster

00:14:27,920 --> 00:14:30,560
would be tricky

00:14:29,199 --> 00:14:32,399
so keep that in mind but there's just a

00:14:30,560 --> 00:14:33,600
lot of stuff here all right a lot of

00:14:32,399 --> 00:14:35,199
stuff we're going to be running

00:14:33,600 --> 00:14:37,199
as a matter of fact if you guys have

00:14:35,199 --> 00:14:38,079
ever run let's say spring boot or

00:14:37,199 --> 00:14:41,600
node.js

00:14:38,079 --> 00:14:44,560
or quercus or python or

00:14:41,600 --> 00:14:45,519
ruby on your machine before think of it

00:14:44,560 --> 00:14:48,240
as running like

00:14:45,519 --> 00:14:49,600
25 of those things simultaneously okay

00:14:48,240 --> 00:14:50,320
then you're more mentally in the right

00:14:49,600 --> 00:14:53,120
game

00:14:50,320 --> 00:14:54,880
okay because this is a whole cloud unto

00:14:53,120 --> 00:14:56,399
itself maybe another way to think of it

00:14:54,880 --> 00:14:58,000
it is not what you would think of as a

00:14:56,399 --> 00:15:01,040
single machine thing

00:14:58,000 --> 00:15:03,199
uh let's see having virtualbox issues

00:15:01,040 --> 00:15:04,720
that could be a problem if you don't if

00:15:03,199 --> 00:15:07,519
you're having virtualbox issues

00:15:04,720 --> 00:15:10,720
i'll give you one tip here and that is

00:15:07,519 --> 00:15:13,040
on a mac use hyperkit instead

00:15:10,720 --> 00:15:14,800
okay you gotta install hyperkit also and

00:15:13,040 --> 00:15:17,360
you can see here's the brew install

00:15:14,800 --> 00:15:18,959
for hyperkit and when you basically say

00:15:17,360 --> 00:15:22,320
vm driver here put in the word

00:15:18,959 --> 00:15:24,399
hyperkit so that is your backup solution

00:15:22,320 --> 00:15:26,000
for uh and actually that's the primary

00:15:24,399 --> 00:15:27,440
solution for many people on mac i use

00:15:26,000 --> 00:15:29,440
virtualbox because i'm used to

00:15:27,440 --> 00:15:30,720
virtualbox but hyperkit is another

00:15:29,440 --> 00:15:33,360
option on the mac

00:15:30,720 --> 00:15:36,160
as an example so do try hyperkit if

00:15:33,360 --> 00:15:39,040
virtualbox is acting up on you

00:15:36,160 --> 00:15:40,639
all right all right all right all right

00:15:39,040 --> 00:15:41,600
there okay so here we go

00:15:40,639 --> 00:15:42,800
all right let's talk about some of this

00:15:41,600 --> 00:15:43,920
fun stuff so why in the world do we have

00:15:42,800 --> 00:15:46,160
kubernetes to begin with

00:15:43,920 --> 00:15:47,360
why is it the most important thing in

00:15:46,160 --> 00:15:48,959
your life at this moment

00:15:47,360 --> 00:15:50,399
the most exciting thing in the entire

00:15:48,959 --> 00:15:52,959
industry that people

00:15:50,399 --> 00:15:55,440
are freaking out about and it has to do

00:15:52,959 --> 00:15:57,279
with this one diagram that i chose to

00:15:55,440 --> 00:15:59,440
articulate story around it has to do if

00:15:57,279 --> 00:16:01,839
you're old school or new school now

00:15:59,440 --> 00:16:04,240
i'm an old guy i'm actually old school i

00:16:01,839 --> 00:16:04,880
love 80s music way more and i like 20 20

00:16:04,240 --> 00:16:07,040
music

00:16:04,880 --> 00:16:08,560
so i am kind of old school so let's say

00:16:07,040 --> 00:16:10,720
you are old school

00:16:08,560 --> 00:16:11,920
well old school means you build a big

00:16:10,720 --> 00:16:13,680
old application

00:16:11,920 --> 00:16:14,959
in the case of java e right if you're

00:16:13,680 --> 00:16:17,199
familiar with java e

00:16:14,959 --> 00:16:19,279
we would build a java application in an

00:16:17,199 --> 00:16:20,720
ear file with multiple war files with a

00:16:19,279 --> 00:16:23,120
bunch of jar files

00:16:20,720 --> 00:16:25,519
that java e application would easily

00:16:23,120 --> 00:16:26,959
grow to 10 megabyte 40 megabyte a

00:16:25,519 --> 00:16:28,480
gigabyte in size

00:16:26,959 --> 00:16:30,639
and we would deploy that monolithic

00:16:28,480 --> 00:16:32,480
application every six

00:16:30,639 --> 00:16:33,759
months we were quite proud of ourselves

00:16:32,480 --> 00:16:35,920
right we could deploy that

00:16:33,759 --> 00:16:37,360
application every six months it took 45

00:16:35,920 --> 00:16:39,759
or 50 or 100 of us to

00:16:37,360 --> 00:16:41,920
to build it test it we had manual you

00:16:39,759 --> 00:16:43,759
know we had 20 manual twist testers that

00:16:41,920 --> 00:16:44,959
had spreadsheets to check the box

00:16:43,759 --> 00:16:46,639
you know every time they tested a

00:16:44,959 --> 00:16:48,240
function of the application and we would

00:16:46,639 --> 00:16:50,639
ship it every six months

00:16:48,240 --> 00:16:51,360
that's your old school world the problem

00:16:50,639 --> 00:16:52,720
is the

00:16:51,360 --> 00:16:54,959
the world we live in doesn't want to

00:16:52,720 --> 00:16:56,399
wait around anymore right for

00:16:54,959 --> 00:16:58,880
six month deployments they don't want to

00:16:56,399 --> 00:17:00,320
wait around anymore for that gigabyte

00:16:58,880 --> 00:17:02,959
deliverable they don't want to wait

00:17:00,320 --> 00:17:04,720
around for those 45 50 200 people to do

00:17:02,959 --> 00:17:07,199
their job they want it

00:17:04,720 --> 00:17:08,480
faster okay they want it faster they

00:17:07,199 --> 00:17:09,839
want ship they want to ship software

00:17:08,480 --> 00:17:10,880
faster and that's why we live in this

00:17:09,839 --> 00:17:13,360
new school world

00:17:10,880 --> 00:17:14,959
where we have micro services now there's

00:17:13,360 --> 00:17:16,319
a lot of ways to skin that cat when it

00:17:14,959 --> 00:17:18,240
comes to micro service

00:17:16,319 --> 00:17:20,160
but we have all this new types of

00:17:18,240 --> 00:17:20,880
infrastructure that allows us to deploy

00:17:20,160 --> 00:17:23,360
applications

00:17:20,880 --> 00:17:24,880
ever faster okay so if you want to think

00:17:23,360 --> 00:17:26,079
about breaking out that monolithic

00:17:24,880 --> 00:17:26,959
application into a series of

00:17:26,079 --> 00:17:28,880
microservices

00:17:26,959 --> 00:17:30,240
involving a network connection between

00:17:28,880 --> 00:17:32,000
the different microservices

00:17:30,240 --> 00:17:33,600
it does mean you can have different

00:17:32,000 --> 00:17:34,559
teams with different pipelines and

00:17:33,600 --> 00:17:37,039
workflows

00:17:34,559 --> 00:17:38,799
at different delivery intervals dropping

00:17:37,039 --> 00:17:40,720
their software off in production

00:17:38,799 --> 00:17:41,919
at their time so if they don't want to

00:17:40,720 --> 00:17:42,960
ship every six months they want to ship

00:17:41,919 --> 00:17:44,400
every six days

00:17:42,960 --> 00:17:46,000
they could you might have one team

00:17:44,400 --> 00:17:47,520
monster ship every six minutes and

00:17:46,000 --> 00:17:50,480
that's possible too

00:17:47,520 --> 00:17:51,440
okay uh ms project yeah don't tell us

00:17:50,480 --> 00:17:54,160
about ms project

00:17:51,440 --> 00:17:54,799
and gantt charts for goodness sake okay

00:17:54,160 --> 00:17:57,120
uh

00:17:54,799 --> 00:17:58,480
then hyper-v install microwave so you

00:17:57,120 --> 00:18:00,960
can do docker desktop

00:17:58,480 --> 00:18:02,400
and hyper-v of course on windows on a

00:18:00,960 --> 00:18:03,919
windows machine by the way make sure you

00:18:02,400 --> 00:18:05,440
have the bios configured to allow

00:18:03,919 --> 00:18:06,160
virtualization a lot of windows machines

00:18:05,440 --> 00:18:08,000
come with

00:18:06,160 --> 00:18:10,320
virtualization turned off that might be

00:18:08,000 --> 00:18:11,200
one gotcha and then a good tip from adam

00:18:10,320 --> 00:18:14,320
miller there

00:18:11,200 --> 00:18:16,400
on how to fix up virtualbox on a mac

00:18:14,320 --> 00:18:18,240
and it can take a little time yes but

00:18:16,400 --> 00:18:19,120
this is the fun part getting a vm

00:18:18,240 --> 00:18:21,280
running

00:18:19,120 --> 00:18:23,039
on your machine might be rather hard all

00:18:21,280 --> 00:18:24,080
right so the installation portion of is

00:18:23,039 --> 00:18:24,799
the hardest part once you got the

00:18:24,080 --> 00:18:27,280
installation

00:18:24,799 --> 00:18:28,240
the rest is easy okay so let's keep

00:18:27,280 --> 00:18:30,000
going here

00:18:28,240 --> 00:18:31,520
so here's a challenge here's why we care

00:18:30,000 --> 00:18:32,240
so much about this concept of the linux

00:18:31,520 --> 00:18:34,880
container

00:18:32,240 --> 00:18:36,960
here's why we're so excited five years

00:18:34,880 --> 00:18:38,799
ago six years ago when docker was born

00:18:36,960 --> 00:18:40,799
and the world lit on fire

00:18:38,799 --> 00:18:42,320
and we were like oh my god this docker

00:18:40,799 --> 00:18:43,120
thing is the most amazing thing i've

00:18:42,320 --> 00:18:45,520
ever seen

00:18:43,120 --> 00:18:47,360
it allows me to actually run linux on my

00:18:45,520 --> 00:18:49,600
windows machine so i had windows

00:18:47,360 --> 00:18:50,880
i could run a linux virtual machine on

00:18:49,600 --> 00:18:52,799
that windows machine

00:18:50,880 --> 00:18:54,240
and it was like magic okay or i could

00:18:52,799 --> 00:18:56,160
run linux on my mac

00:18:54,240 --> 00:18:57,280
or i could run some other operating

00:18:56,160 --> 00:18:58,160
system on the other

00:18:57,280 --> 00:18:59,840
and so we're talking about

00:18:58,160 --> 00:19:01,520
virtualization but we're talking about a

00:18:59,840 --> 00:19:03,760
very specialized version of it

00:19:01,520 --> 00:19:05,919
because what this allowed us to do is

00:19:03,760 --> 00:19:07,520
con consider this configuration

00:19:05,919 --> 00:19:09,760
in the old world we would have to take

00:19:07,520 --> 00:19:12,080
our application and we'd have to define

00:19:09,760 --> 00:19:13,919
all the configuration steps associated

00:19:12,080 --> 00:19:15,760
with it like we need this version of a

00:19:13,919 --> 00:19:17,760
driver for the database we might need

00:19:15,760 --> 00:19:19,520
this kind of data source configuration

00:19:17,760 --> 00:19:21,520
we might this kind of app server as an

00:19:19,520 --> 00:19:23,120
example we might need this kind of java

00:19:21,520 --> 00:19:24,559
virtual machine and a different kind of

00:19:23,120 --> 00:19:25,280
operating system configured a certain

00:19:24,559 --> 00:19:27,039
way

00:19:25,280 --> 00:19:29,039
and so this was challenging even the

00:19:27,039 --> 00:19:31,440
forward slash versus backslash

00:19:29,039 --> 00:19:33,039
burned people in production constantly

00:19:31,440 --> 00:19:34,080
because on windows there's one way and

00:19:33,039 --> 00:19:36,320
linux the other

00:19:34,080 --> 00:19:38,080
okay and this really messed people up

00:19:36,320 --> 00:19:40,559
and see matthew is having some problems

00:19:38,080 --> 00:19:40,559
with zoom

00:19:41,120 --> 00:19:45,679
that might be true zoom is going to eat

00:19:42,880 --> 00:19:46,960
some of your cpu at the same time

00:19:45,679 --> 00:19:48,960
mini cube is going to eat some of your

00:19:46,960 --> 00:19:49,919
cpu so you might have to adjust things

00:19:48,960 --> 00:19:51,760
accordingly

00:19:49,919 --> 00:19:53,440
to make sure mini cube and zoom don't

00:19:51,760 --> 00:19:55,280
conflict on that same box

00:19:53,440 --> 00:19:56,480
i'm actually running zoom and i'm

00:19:55,280 --> 00:19:58,400
running this obs

00:19:56,480 --> 00:19:59,840
uh obs which is giving me this green

00:19:58,400 --> 00:20:00,720
screen effect i actually have a green

00:19:59,840 --> 00:20:02,320
screen here

00:20:00,720 --> 00:20:04,320
so that that allows me to do things like

00:20:02,320 --> 00:20:07,120
this as an example if i want to

00:20:04,320 --> 00:20:07,840
have this view of it uh or if i have my

00:20:07,120 --> 00:20:10,240
elephant here

00:20:07,840 --> 00:20:11,600
so i got that option also but i'll go

00:20:10,240 --> 00:20:12,880
back to this mode to keep it keep it

00:20:11,600 --> 00:20:14,080
more sane

00:20:12,880 --> 00:20:16,320
but you do have to watch out for all

00:20:14,080 --> 00:20:18,080
that cpu usage in my case i got the

00:20:16,320 --> 00:20:18,480
latest and greatest mac with 32 gigs of

00:20:18,080 --> 00:20:21,600
ram

00:20:18,480 --> 00:20:23,039
and i think eight cores i9 so that does

00:20:21,600 --> 00:20:25,520
help me a little bit

00:20:23,039 --> 00:20:26,400
okay but this concept this challenge

00:20:25,520 --> 00:20:28,159
that you see here

00:20:26,400 --> 00:20:29,600
this was hard all right this was really

00:20:28,159 --> 00:20:30,960
problematic for all of us

00:20:29,600 --> 00:20:33,200
as a matter of fact the way we solved it

00:20:30,960 --> 00:20:35,440
was by sending an email now some of you

00:20:33,200 --> 00:20:36,240
i know you folks are super cool you

00:20:35,440 --> 00:20:37,679
basically

00:20:36,240 --> 00:20:39,520
you know didn't send an email you had a

00:20:37,679 --> 00:20:41,600
wiki page instead but you would

00:20:39,520 --> 00:20:43,200
basically email or update the wiki page

00:20:41,600 --> 00:20:45,360
to let your qa team

00:20:43,200 --> 00:20:47,039
know what it took to run the app right

00:20:45,360 --> 00:20:48,960
you're like here's my new ear file my

00:20:47,039 --> 00:20:51,440
jar file my npm

00:20:48,960 --> 00:20:53,440
you know my package.json whatever it is

00:20:51,440 --> 00:20:54,960
you hand it over to the next team

00:20:53,440 --> 00:20:56,720
you basically would document that and

00:20:54,960 --> 00:20:58,000
basically say hey guys could you

00:20:56,720 --> 00:21:00,240
try to configure it this way and i think

00:20:58,000 --> 00:21:01,600
it'll run okay but the problem is your

00:21:00,240 --> 00:21:03,200
desktop and your production environment

00:21:01,600 --> 00:21:04,320
never actually matched right so you had

00:21:03,200 --> 00:21:06,080
a windows desktop

00:21:04,320 --> 00:21:07,200
you had a red hat enterprise linux

00:21:06,080 --> 00:21:08,400
production environment you had a

00:21:07,200 --> 00:21:09,120
different version of the java virtual

00:21:08,400 --> 00:21:12,159
machine

00:21:09,120 --> 00:21:13,600
or v8 node.js runtime or pc python

00:21:12,159 --> 00:21:15,440
runtime whatever it might have been

00:21:13,600 --> 00:21:17,120
you have different forms of app servers

00:21:15,440 --> 00:21:18,720
configured there maybe you had apache

00:21:17,120 --> 00:21:20,559
versus nginx versus web server versus

00:21:18,720 --> 00:21:23,120
web to logic versus jboss

00:21:20,559 --> 00:21:24,320
all this was a big hot mess okay and the

00:21:23,120 --> 00:21:26,000
email just didn't work

00:21:24,320 --> 00:21:27,440
the email was always out of sync with

00:21:26,000 --> 00:21:28,880
the real runtime environment

00:21:27,440 --> 00:21:30,640
and therefore things would break in

00:21:28,880 --> 00:21:31,760
production and you might have heard this

00:21:30,640 --> 00:21:34,320
phrase before

00:21:31,760 --> 00:21:35,520
well it works on my machine well guess

00:21:34,320 --> 00:21:37,360
what we're going to extend

00:21:35,520 --> 00:21:38,880
the works on my machine concept to it

00:21:37,360 --> 00:21:39,840
works on my cluster

00:21:38,880 --> 00:21:41,280
that's what you're going to be hearing

00:21:39,840 --> 00:21:42,240
going forward it kind of works on every

00:21:41,280 --> 00:21:43,840
machine now

00:21:42,240 --> 00:21:45,520
but not on your cluster versus my

00:21:43,840 --> 00:21:46,880
cluster okay that's what the world we're

00:21:45,520 --> 00:21:48,640
about to get into

00:21:46,880 --> 00:21:50,159
now this concept of the docker file was

00:21:48,640 --> 00:21:51,840
part of the the big part of the magic

00:21:50,159 --> 00:21:54,320
when it came to the docker tool

00:21:51,840 --> 00:21:56,559
it had the concept of taking that email

00:21:54,320 --> 00:21:57,440
that wiki page and codifying it into a

00:21:56,559 --> 00:21:59,280
file

00:21:57,440 --> 00:22:00,799
that was essentially a piece of code

00:21:59,280 --> 00:22:02,240
okay a configuration file

00:22:00,799 --> 00:22:04,559
but we could check this file into our

00:22:02,240 --> 00:22:06,159
source code repository and anybody who

00:22:04,559 --> 00:22:06,880
checked the project out to their local

00:22:06,159 --> 00:22:09,440
machine

00:22:06,880 --> 00:22:11,440
could rebuild that container image just

00:22:09,440 --> 00:22:12,960
like the original developer had built it

00:22:11,440 --> 00:22:14,880
so the original developer had basically

00:22:12,960 --> 00:22:16,400
said okay i want this configuration file

00:22:14,880 --> 00:22:17,120
i want this version of the operating

00:22:16,400 --> 00:22:18,960
system

00:22:17,120 --> 00:22:21,039
this patch level of the operating system

00:22:18,960 --> 00:22:23,520
with this patch level the jvm

00:22:21,039 --> 00:22:25,120
or v8 or python or whatever else they

00:22:23,520 --> 00:22:27,360
needed for their app to run

00:22:25,120 --> 00:22:28,159
you could basically recreate that world

00:22:27,360 --> 00:22:29,760
easily

00:22:28,159 --> 00:22:31,760
with the beauty of the docker file again

00:22:29,760 --> 00:22:33,600
it codified all those key elements

00:22:31,760 --> 00:22:34,960
and made it so you could easily put it

00:22:33,600 --> 00:22:37,200
all together

00:22:34,960 --> 00:22:38,080
now here's the trick with just the

00:22:37,200 --> 00:22:40,240
docker world

00:22:38,080 --> 00:22:41,760
okay docker solved that problem you

00:22:40,240 --> 00:22:43,840
could do a docker build and you could do

00:22:41,760 --> 00:22:45,840
a docker run and you would have exactly

00:22:43,840 --> 00:22:46,880
what fred had on his laptop you would

00:22:45,840 --> 00:22:48,960
have exactly what

00:22:46,880 --> 00:22:50,960
sally configured when she built it on

00:22:48,960 --> 00:22:53,679
her laptop you would have exactly what

00:22:50,960 --> 00:22:55,840
you know jimmy had when he did it and it

00:22:53,679 --> 00:22:59,360
was a beautiful thing it was amazing

00:22:55,840 --> 00:23:02,640
innovation but it did have one challenge

00:22:59,360 --> 00:23:04,960
that is a per container solution on

00:23:02,640 --> 00:23:06,799
one container image and one container

00:23:04,960 --> 00:23:08,080
easy when you get into let's say that

00:23:06,799 --> 00:23:10,480
microservices architecture

00:23:08,080 --> 00:23:11,679
where you have 45 of these things it

00:23:10,480 --> 00:23:12,640
gets complicated

00:23:11,679 --> 00:23:14,159
as a matter of fact if you have a

00:23:12,640 --> 00:23:14,799
microservices architecture you usually

00:23:14,159 --> 00:23:17,919
have four

00:23:14,799 --> 00:23:18,880
10 50 500 of these things and now you

00:23:17,919 --> 00:23:20,640
have to deal with

00:23:18,880 --> 00:23:22,640
managing it at scale or how to do it

00:23:20,640 --> 00:23:25,039
port conflicts for instance if i'm

00:23:22,640 --> 00:23:27,039
running four spring boots on this laptop

00:23:25,039 --> 00:23:29,200
i have four things trying to run on port

00:23:27,039 --> 00:23:30,799
8080 well that's problematic

00:23:29,200 --> 00:23:32,559
if i'm running a tomcat and a spring

00:23:30,799 --> 00:23:33,760
boot they're both living on 8080 because

00:23:32,559 --> 00:23:35,120
spring boot is tomcat

00:23:33,760 --> 00:23:38,080
right if i also have some other

00:23:35,120 --> 00:23:39,520
different application components running

00:23:38,080 --> 00:23:41,520
i might have port conflicts as an

00:23:39,520 --> 00:23:43,679
example and i definitely have issues

00:23:41,520 --> 00:23:45,840
with all these multiple hosts

00:23:43,679 --> 00:23:47,520
so here's where we really get our head

00:23:45,840 --> 00:23:47,919
into what this kubernetes thing really

00:23:47,520 --> 00:23:51,120
is

00:23:47,919 --> 00:23:52,480
okay kubernetes allows you to take one a

00:23:51,120 --> 00:23:54,480
bunch of computers

00:23:52,480 --> 00:23:56,080
and make them look like one computer

00:23:54,480 --> 00:23:58,640
okay so if i have let's say

00:23:56,080 --> 00:24:00,400
six computers and these might be my six

00:23:58,640 --> 00:24:03,120
raspberry pi's

00:24:00,400 --> 00:24:03,679
okay or six virtual machines as a matter

00:24:03,120 --> 00:24:06,559
of fact

00:24:03,679 --> 00:24:08,320
here i'll go show you this real quick

00:24:06,559 --> 00:24:09,039
this is my google cluster running over

00:24:08,320 --> 00:24:11,039
here

00:24:09,039 --> 00:24:12,799
so i have all these virtual machines

00:24:11,039 --> 00:24:14,960
running on my google cluster

00:24:12,799 --> 00:24:16,880
as an example so these are virtual

00:24:14,960 --> 00:24:19,039
machines think of them all as individual

00:24:16,880 --> 00:24:20,080
raspberry pi's running out there on the

00:24:19,039 --> 00:24:23,200
google cloud

00:24:20,080 --> 00:24:24,960
but i've clustered those so with with

00:24:23,200 --> 00:24:25,360
kubernetes with openshift so they look

00:24:24,960 --> 00:24:28,240
like

00:24:25,360 --> 00:24:29,520
one i can treat them as one and that is

00:24:28,240 --> 00:24:31,360
really where the magic happens so

00:24:29,520 --> 00:24:32,559
whenever you guys hear the term cluster

00:24:31,360 --> 00:24:33,919
if you're not familiar with that

00:24:32,559 --> 00:24:35,520
whenever someone says clustering that

00:24:33,919 --> 00:24:38,159
often means the situation

00:24:35,520 --> 00:24:38,799
or the case of multiple computers acting

00:24:38,159 --> 00:24:40,720
as one

00:24:38,799 --> 00:24:42,480
so if you have a in memory data grid as

00:24:40,720 --> 00:24:44,000
an example well those cluster if you

00:24:42,480 --> 00:24:45,919
have a kafka cluster

00:24:44,000 --> 00:24:47,679
right kafka brokers have clusters also

00:24:45,919 --> 00:24:49,200
where there's three of them typically

00:24:47,679 --> 00:24:50,640
uh working together we'll actually show

00:24:49,200 --> 00:24:51,520
you some kafka a little bit later as we

00:24:50,640 --> 00:24:53,679
go

00:24:51,520 --> 00:24:55,600
okay again feel free to throw questions

00:24:53,679 --> 00:25:00,720
at me into the

00:24:55,600 --> 00:25:03,840
uh into this into the chat okay

00:25:00,720 --> 00:25:05,200
become quite complex hard to maintain so

00:25:03,840 --> 00:25:05,840
it looks like a really exciting project

00:25:05,200 --> 00:25:08,080
i'm trying to

00:25:05,840 --> 00:25:10,320
understand oh that's sorry that was the

00:25:08,080 --> 00:25:12,799
previous sessions question

00:25:10,320 --> 00:25:14,080
on opa all right here we're doing more

00:25:12,799 --> 00:25:16,640
the basics

00:25:14,080 --> 00:25:18,080
uh let's see here all right fantastic so

00:25:16,640 --> 00:25:18,559
this is really where kubernetes comes

00:25:18,080 --> 00:25:21,200
into it

00:25:18,559 --> 00:25:22,559
uh it's it's it's the foreground here

00:25:21,200 --> 00:25:24,880
right this is where it gets interesting

00:25:22,559 --> 00:25:25,919
so kubernetes is a term means helmsman

00:25:24,880 --> 00:25:28,240
or governor

00:25:25,919 --> 00:25:29,200
i like to think of it as the admiral of

00:25:28,240 --> 00:25:31,039
the fleet of

00:25:29,200 --> 00:25:33,200
ships okay that's another way to think

00:25:31,039 --> 00:25:35,200
of it it is the admiral not the captain

00:25:33,200 --> 00:25:36,559
the captain of one ship is one thing

00:25:35,200 --> 00:25:38,960
this is the admiral of

00:25:36,559 --> 00:25:40,080
all the ships okay uh there's another

00:25:38,960 --> 00:25:41,840
way to say it so it's a whole fleet of

00:25:40,080 --> 00:25:42,559
ships its goal is to have more than one

00:25:41,840 --> 00:25:44,159
computer

00:25:42,559 --> 00:25:45,760
we're using a mini cube in a one

00:25:44,159 --> 00:25:47,039
computer setting but it is not the

00:25:45,760 --> 00:25:49,039
normal way you would run it

00:25:47,039 --> 00:25:50,400
mini cube is not for production you

00:25:49,039 --> 00:25:51,600
would never run in a production setting

00:25:50,400 --> 00:25:52,400
at least well you're not supposed to at

00:25:51,600 --> 00:25:55,440
least

00:25:52,400 --> 00:25:56,000
it is basically a single ship and a

00:25:55,440 --> 00:25:58,720
single

00:25:56,000 --> 00:26:01,039
node cluster right all in one your

00:25:58,720 --> 00:26:01,520
default cluster size with a kubernetes

00:26:01,039 --> 00:26:04,400
should be

00:26:01,520 --> 00:26:04,880
three at a minimum three and often it is

00:26:04,400 --> 00:26:06,480
five

00:26:04,880 --> 00:26:08,400
right five seems to be about the sweet

00:26:06,480 --> 00:26:09,039
spot and it grows easily to five

00:26:08,400 --> 00:26:11,039
thousand

00:26:09,039 --> 00:26:12,240
okay you know so maybe you want a

00:26:11,039 --> 00:26:13,919
thousand computers

00:26:12,240 --> 00:26:15,360
in that cluster or you want five

00:26:13,919 --> 00:26:17,520
thousand computers in that cluster

00:26:15,360 --> 00:26:18,720
but you would probably start off no no

00:26:17,520 --> 00:26:20,320
fewer than three

00:26:18,720 --> 00:26:22,080
and you might go up to a thousand as an

00:26:20,320 --> 00:26:23,200
example that tends to be the the window

00:26:22,080 --> 00:26:24,240
in which people operate here with

00:26:23,200 --> 00:26:25,760
kubernetes

00:26:24,240 --> 00:26:27,520
all right inspired by google's

00:26:25,760 --> 00:26:28,799
experience with containers if i was a

00:26:27,520 --> 00:26:29,200
google person i would sit here and tell

00:26:28,799 --> 00:26:31,039
you

00:26:29,200 --> 00:26:32,240
at google we launched two billion

00:26:31,039 --> 00:26:35,039
containers a week

00:26:32,240 --> 00:26:35,679
we know containers as an example uh open

00:26:35,039 --> 00:26:37,279
source

00:26:35,679 --> 00:26:38,559
project written in go so the go

00:26:37,279 --> 00:26:40,080
programming language of course is

00:26:38,559 --> 00:26:41,440
enjoying a lot of popularity based on

00:26:40,080 --> 00:26:42,960
the fact that it's associated with the

00:26:41,440 --> 00:26:45,200
kubernetes popularity

00:26:42,960 --> 00:26:46,000
as an example all right and the whole

00:26:45,200 --> 00:26:47,840
goal here

00:26:46,000 --> 00:26:49,600
is to help you manage machine manage

00:26:47,840 --> 00:26:52,000
applications and not machines

00:26:49,600 --> 00:26:52,640
so it's trying to abstract the computers

00:26:52,000 --> 00:26:54,720
out there

00:26:52,640 --> 00:26:56,559
to make them all look virtually the same

00:26:54,720 --> 00:26:58,880
so you just deploy your application

00:26:56,559 --> 00:26:59,919
and it lands and runs somewhere across

00:26:58,880 --> 00:27:02,400
those different

00:26:59,919 --> 00:27:03,919
computers those different machines okay

00:27:02,400 --> 00:27:04,640
so a lot of fun stuff here in kubernetes

00:27:03,919 --> 00:27:06,960
land

00:27:04,640 --> 00:27:08,559
now his microservices has been something

00:27:06,960 --> 00:27:09,120
we've been operating on for a long time

00:27:08,559 --> 00:27:10,720
meaning

00:27:09,120 --> 00:27:13,279
we've been thinking about how we break

00:27:10,720 --> 00:27:15,440
up a monolithic project plan

00:27:13,279 --> 00:27:17,440
into smaller little project plans right

00:27:15,440 --> 00:27:18,480
we called that uh extreme programming we

00:27:17,440 --> 00:27:20,559
called that agile

00:27:18,480 --> 00:27:22,399
the concept of a big old gantt chart

00:27:20,559 --> 00:27:24,399
running a max microsoft project

00:27:22,399 --> 00:27:25,679
can be slimmed down into smaller little

00:27:24,399 --> 00:27:27,039
units as an example

00:27:25,679 --> 00:27:28,799
we might even refer to those things as

00:27:27,039 --> 00:27:31,360
sprints so we figured how to

00:27:28,799 --> 00:27:32,640
break up project plans into smaller

00:27:31,360 --> 00:27:34,480
project deliverables

00:27:32,640 --> 00:27:36,000
and with sprints as an example where we

00:27:34,480 --> 00:27:37,520
might actually have a deliverable

00:27:36,000 --> 00:27:39,200
every three weeks if we have a three

00:27:37,520 --> 00:27:39,679
week sprint or two weeks with a two week

00:27:39,200 --> 00:27:41,600
sprint

00:27:39,679 --> 00:27:43,039
or four weeks with a four week sprint so

00:27:41,600 --> 00:27:44,399
we've been thinking about how to break

00:27:43,039 --> 00:27:46,559
up the process

00:27:44,399 --> 00:27:47,919
the workflow if you will of how we work

00:27:46,559 --> 00:27:49,679
but now we've been thinking about how we

00:27:47,919 --> 00:27:52,000
break up the app itself

00:27:49,679 --> 00:27:53,679
okay instead of one big old code base

00:27:52,000 --> 00:27:56,159
and one repository where

00:27:53,679 --> 00:27:56,960
all 45 developers all contribute their

00:27:56,159 --> 00:27:58,399
code to

00:27:56,960 --> 00:28:00,320
what if we actually break up the code

00:27:58,399 --> 00:28:01,120
base to maybe match the broken up

00:28:00,320 --> 00:28:02,480
project plan

00:28:01,120 --> 00:28:04,240
in other words the code base might have

00:28:02,480 --> 00:28:06,159
25 little repos

00:28:04,240 --> 00:28:07,919
and those 45 developers are sprinkled

00:28:06,159 --> 00:28:09,520
across those 25 repos

00:28:07,919 --> 00:28:11,039
as an example and so we would start

00:28:09,520 --> 00:28:12,000
thinking in terms of building smaller

00:28:11,039 --> 00:28:14,000
units of work

00:28:12,000 --> 00:28:15,440
but we also now need this additional

00:28:14,000 --> 00:28:17,760
capability to help manage

00:28:15,440 --> 00:28:19,679
all those smaller units of work at scale

00:28:17,760 --> 00:28:22,480
so docker was born in 2013

00:28:19,679 --> 00:28:24,399
spring boot born in 2013. you see

00:28:22,480 --> 00:28:26,159
microservices officially defined by the

00:28:24,399 --> 00:28:27,200
thoughtworks team fowler and lewis on

00:28:26,159 --> 00:28:28,399
00:28:27,200 --> 00:28:30,559
all right and then kubernetes born in

00:28:28,399 --> 00:28:31,840
2014. i made that point because you can

00:28:30,559 --> 00:28:32,960
see we've been working on this for quite

00:28:31,840 --> 00:28:35,360
some time

00:28:32,960 --> 00:28:37,120
okay so the world has started evolving

00:28:35,360 --> 00:28:39,760
you know back back in 2012

00:28:37,120 --> 00:28:40,799
2013 2014 to this new way of breaking up

00:28:39,760 --> 00:28:42,799
applications

00:28:40,799 --> 00:28:44,720
and making them much more interesting to

00:28:42,799 --> 00:28:46,240
work with when it comes to deployment

00:28:44,720 --> 00:28:47,760
now one thing i like to call your

00:28:46,240 --> 00:28:49,120
attention to and you have this link here

00:28:47,760 --> 00:28:51,520
go watch it on your own time

00:28:49,120 --> 00:28:53,600
but that's where in 2015 we came out

00:28:51,520 --> 00:28:55,120
with kubernetes this is a demonstration

00:28:53,600 --> 00:28:57,039
i helped organize

00:28:55,120 --> 00:28:58,320
for red hat and we actually had a

00:28:57,039 --> 00:29:00,640
thousand containers

00:28:58,320 --> 00:29:02,080
launched live on stage now here's

00:29:00,640 --> 00:29:03,039
something to understand we launched a

00:29:02,080 --> 00:29:04,960
thousand

00:29:03,039 --> 00:29:06,960
node.js little application servers live

00:29:04,960 --> 00:29:07,840
on stage we did that in two and a half

00:29:06,960 --> 00:29:09,440
minutes

00:29:07,840 --> 00:29:10,880
we launched a thousand little app

00:29:09,440 --> 00:29:12,640
servers and we invited everyone in the

00:29:10,880 --> 00:29:14,080
audience to whip out their phone

00:29:12,640 --> 00:29:15,520
do a little drawing on their phone with

00:29:14,080 --> 00:29:16,720
their fingertip and then they could

00:29:15,520 --> 00:29:19,279
upload that

00:29:16,720 --> 00:29:20,960
image into their server they could

00:29:19,279 --> 00:29:22,320
actually plant their flag on one of the

00:29:20,960 --> 00:29:23,600
servers that we launched live for them

00:29:22,320 --> 00:29:25,039
in two and a half minutes

00:29:23,600 --> 00:29:26,880
the point of this presentation was to

00:29:25,039 --> 00:29:28,240
show you how amazingly flexible the

00:29:26,880 --> 00:29:30,960
kubernetes architecture is

00:29:28,240 --> 00:29:31,600
and how fast it can be to light up a

00:29:30,960 --> 00:29:33,919
thousand

00:29:31,600 --> 00:29:35,760
applications on the fly and as a matter

00:29:33,919 --> 00:29:37,279
of fact the thousand twenty six

00:29:35,760 --> 00:29:38,880
uh if you watch closely you'll see those

00:29:37,279 --> 00:29:40,399
come to life in that youtube video there

00:29:38,880 --> 00:29:41,440
but that was back in 2015.

00:29:40,399 --> 00:29:43,520
so we've been working with this for

00:29:41,440 --> 00:29:44,720
quite some time now

00:29:43,520 --> 00:29:46,720
here's a term you're gonna have to get

00:29:44,720 --> 00:29:50,720
used to this concept of the pod

00:29:46,720 --> 00:29:52,880
the pod pod and the pod

00:29:50,720 --> 00:29:54,960
right is that container so if you think

00:29:52,880 --> 00:29:55,520
you can think of pod container container

00:29:54,960 --> 00:29:57,200
pod

00:29:55,520 --> 00:29:59,279
if your brain maps it that way you're

00:29:57,200 --> 00:30:00,720
you're okay but a pod can be

00:29:59,279 --> 00:30:02,399
more than one container and we'll

00:30:00,720 --> 00:30:04,000
explain that more when you get to the

00:30:02,399 --> 00:30:06,159
more advanced use cases but we'll try to

00:30:04,000 --> 00:30:08,960
show you that but a pod also is a

00:30:06,159 --> 00:30:10,399
family of whales right a group of whales

00:30:08,960 --> 00:30:11,520
this is the docker logo by the way

00:30:10,399 --> 00:30:13,200
docker of course being kind of

00:30:11,520 --> 00:30:15,840
synonymous with the linux container

00:30:13,200 --> 00:30:16,799
but if i had two little whales maybe

00:30:15,840 --> 00:30:19,039
that's a pod

00:30:16,799 --> 00:30:20,559
okay right a family of whales so i'd

00:30:19,039 --> 00:30:21,840
like that term of the pod

00:30:20,559 --> 00:30:24,320
some people actually think this actually

00:30:21,840 --> 00:30:26,240
refers to the pod people from the

00:30:24,320 --> 00:30:27,919
invasion of the body snatchers it does

00:30:26,240 --> 00:30:28,960
not but the pod of course

00:30:27,919 --> 00:30:31,120
is the thing you're going to be working

00:30:28,960 --> 00:30:32,559
with on a regular basis if you think

00:30:31,120 --> 00:30:35,440
about launching your code

00:30:32,559 --> 00:30:37,360
running your app that runs as a pod okay

00:30:35,440 --> 00:30:39,200
your node.js app runs as a pod your

00:30:37,360 --> 00:30:40,000
python app runs as a pod your java app

00:30:39,200 --> 00:30:42,000
runs as a pod

00:30:40,000 --> 00:30:44,799
your web server web logic jboss app runs

00:30:42,000 --> 00:30:47,039
as a pod think of that as what it is

00:30:44,799 --> 00:30:48,000
so pods are a group of contain

00:30:47,039 --> 00:30:50,240
contenders

00:30:48,000 --> 00:30:51,760
not containers but contenders brendan

00:30:50,240 --> 00:30:54,640
that can that's kind of funny

00:30:51,760 --> 00:30:55,440
hmm i would say i wouldn't call it a

00:30:54,640 --> 00:30:58,960
contender

00:30:55,440 --> 00:31:00,880
but it is a container okay all right now

00:30:58,960 --> 00:31:03,039
so here's this concept of the pot the

00:31:00,880 --> 00:31:04,320
pod is the component you primarily will

00:31:03,039 --> 00:31:06,159
be working with all right so

00:31:04,320 --> 00:31:07,919
you care a lot about your pods you love

00:31:06,159 --> 00:31:09,919
pods pods are the key thing

00:31:07,919 --> 00:31:11,679
you want pods to be running and pods to

00:31:09,919 --> 00:31:12,640
be happy and pods to do what they're

00:31:11,679 --> 00:31:14,000
supposed to do

00:31:12,640 --> 00:31:16,240
because the pod really matters to you a

00:31:14,000 --> 00:31:17,440
lot now the pod of course can be more

00:31:16,240 --> 00:31:19,279
than one container

00:31:17,440 --> 00:31:20,480
okay all right so brandon containers

00:31:19,279 --> 00:31:21,840
they're fantastic

00:31:20,480 --> 00:31:23,360
uh so the pod can be more than one

00:31:21,840 --> 00:31:24,720
container and we're gonna see that and

00:31:23,360 --> 00:31:25,840
i'll show you some advanced use cases

00:31:24,720 --> 00:31:27,279
where it really

00:31:25,840 --> 00:31:29,120
shines so you can have the concept of

00:31:27,279 --> 00:31:30,640
like a sidecar container

00:31:29,120 --> 00:31:32,240
in with your main business logic

00:31:30,640 --> 00:31:33,200
container there's really some cool stuff

00:31:32,240 --> 00:31:34,960
you can do there

00:31:33,200 --> 00:31:36,240
but more than one container they have a

00:31:34,960 --> 00:31:37,840
shared ip address

00:31:36,240 --> 00:31:39,600
all right they share an ip address

00:31:37,840 --> 00:31:40,080
therefore you might have port conflict

00:31:39,600 --> 00:31:42,480
here

00:31:40,080 --> 00:31:43,679
don't try to launch two tomcats in a pod

00:31:42,480 --> 00:31:45,600
both on 8080

00:31:43,679 --> 00:31:47,440
put one of them on 90 90 and then you'll

00:31:45,600 --> 00:31:48,880
be fine but you could have two tomcats

00:31:47,440 --> 00:31:50,480
in a pod if you wanted to

00:31:48,880 --> 00:31:52,960
they have a shared storage but it's

00:31:50,480 --> 00:31:54,080
ephemeral so you can write to local disk

00:31:52,960 --> 00:31:56,880
in that pod but this

00:31:54,080 --> 00:31:58,559
the as the pod recycles the data goes

00:31:56,880 --> 00:32:00,159
away so just keep that in mind you would

00:31:58,559 --> 00:32:02,640
only use it for like a scratch

00:32:00,159 --> 00:32:03,760
kind of disk case scratch purposes and

00:32:02,640 --> 00:32:04,799
even that i'm not sure if i would

00:32:03,760 --> 00:32:05,919
recommend it

00:32:04,799 --> 00:32:08,159
you would probably want to actually have

00:32:05,919 --> 00:32:10,159
a shared volume underneath it it has

00:32:08,159 --> 00:32:13,039
shared resources and shared life cycle

00:32:10,159 --> 00:32:14,799
so all the containers come and go

00:32:13,039 --> 00:32:16,320
together within that pod so just keep

00:32:14,799 --> 00:32:17,360
that in mind the pod goes down all

00:32:16,320 --> 00:32:18,799
containers go with it

00:32:17,360 --> 00:32:20,559
when the pod comes up the containers

00:32:18,799 --> 00:32:22,080
come back to life okay

00:32:20,559 --> 00:32:24,159
so you got to just keep that in mind if

00:32:22,080 --> 00:32:25,440
the pod is not running you're not really

00:32:24,159 --> 00:32:26,880
using memory and cpu

00:32:25,440 --> 00:32:28,000
because your tomcat's not really running

00:32:26,880 --> 00:32:29,840
your websphere is not really running

00:32:28,000 --> 00:32:32,240
your node.js is not really running

00:32:29,840 --> 00:32:33,360
until the container and the pod itself

00:32:32,240 --> 00:32:37,679
is running

00:32:33,360 --> 00:32:40,720
okay uh oh i had to reboot

00:32:37,679 --> 00:32:41,760
that's too bad matthew okay but you can

00:32:40,720 --> 00:32:43,440
certainly pay attention

00:32:41,760 --> 00:32:45,120
as we go through this and listen in if

00:32:43,440 --> 00:32:46,080
you like as opposed to doing a hands-on

00:32:45,120 --> 00:32:47,679
portion

00:32:46,080 --> 00:32:49,200
but here's the kubernetes cluster

00:32:47,679 --> 00:32:50,559
remember i said earlier the concept of

00:32:49,200 --> 00:32:51,600
the cluster is multiple computers

00:32:50,559 --> 00:32:53,440
working together

00:32:51,600 --> 00:32:55,440
in tandem working together to support a

00:32:53,440 --> 00:32:58,559
use case so you're going to have

00:32:55,440 --> 00:32:59,919
let's say nine computers here that's

00:32:58,559 --> 00:33:02,720
what i have on the screen

00:32:59,919 --> 00:33:04,000
i have node node node so in kubernetes

00:33:02,720 --> 00:33:06,880
lan a computer

00:33:04,000 --> 00:33:07,360
a node is a computer a node as a virtual

00:33:06,880 --> 00:33:09,360
machine

00:33:07,360 --> 00:33:10,480
it can be real bare metal machine or

00:33:09,360 --> 00:33:11,919
virtual machine

00:33:10,480 --> 00:33:13,200
but it is that computer or your

00:33:11,919 --> 00:33:14,799
raspberry pi for all intents and

00:33:13,200 --> 00:33:18,000
purposes so we refer to that as a

00:33:14,799 --> 00:33:20,480
node all right n-o-d-e the node was

00:33:18,000 --> 00:33:23,760
where you run your pods okay so pods

00:33:20,480 --> 00:33:26,480
as processes live inside that node

00:33:23,760 --> 00:33:26,799
as an example and so you again i have

00:33:26,480 --> 00:33:28,720
six

00:33:26,799 --> 00:33:29,919
drawn here on this screen we also have

00:33:28,720 --> 00:33:31,600
what's called the master

00:33:29,919 --> 00:33:33,440
and actually the master is being renamed

00:33:31,600 --> 00:33:34,640
uh you know we're no longer going to use

00:33:33,440 --> 00:33:36,240
the term master going forward

00:33:34,640 --> 00:33:38,080
i think supervisor is what it's being

00:33:36,240 --> 00:33:39,360
renamed to and checked the documentation

00:33:38,080 --> 00:33:41,600
in the last couple days to see if it's

00:33:39,360 --> 00:33:42,960
been renamed yet but the the there's

00:33:41,600 --> 00:33:44,960
three nodes here which are the

00:33:42,960 --> 00:33:46,799
supervisors or the master nodes

00:33:44,960 --> 00:33:48,640
the reason there's three is because of

00:33:46,799 --> 00:33:51,919
this little guy right here called etsyd

00:33:48,640 --> 00:33:53,679
etd is a database an in-memory database

00:33:51,919 --> 00:33:54,799
and the database needs three to be

00:33:53,679 --> 00:33:56,480
highly available

00:33:54,799 --> 00:33:58,240
so that's why we say the magic number is

00:33:56,480 --> 00:34:00,000
three no less than three

00:33:58,240 --> 00:34:01,679
if you go less than three then you might

00:34:00,000 --> 00:34:03,279
have a database that gets corrupted or a

00:34:01,679 --> 00:34:04,960
database that goes down and then

00:34:03,279 --> 00:34:07,519
you can't interact with your application

00:34:04,960 --> 00:34:09,200
or your any of your applications anymore

00:34:07,519 --> 00:34:11,520
okay there are some people working on

00:34:09,200 --> 00:34:13,280
single node clusters uh the mini cube

00:34:11,520 --> 00:34:14,960
itself is a single node cluster where

00:34:13,280 --> 00:34:16,800
all these things live inside

00:34:14,960 --> 00:34:18,079
one virtual machine known as the

00:34:16,800 --> 00:34:19,520
minicube virtual machine running a

00:34:18,079 --> 00:34:22,480
virtualbox hyperkit

00:34:19,520 --> 00:34:24,240
etc etc now you have your api which

00:34:22,480 --> 00:34:26,079
basically is your create read update

00:34:24,240 --> 00:34:28,399
delete your rest to api that talks to

00:34:26,079 --> 00:34:30,560
that cd writes records to that ncd

00:34:28,399 --> 00:34:32,159
deletes records from that ncd and then

00:34:30,560 --> 00:34:34,240
once that record is stored there their

00:34:32,159 --> 00:34:36,320
schedulers and controllers take over

00:34:34,240 --> 00:34:38,159
for determining what to do with that

00:34:36,320 --> 00:34:40,079
record that landed in ncd

00:34:38,159 --> 00:34:42,399
so if you built a node.js application

00:34:40,079 --> 00:34:45,679
before a python web-based api

00:34:42,399 --> 00:34:47,359
a java jax or s or spring mvc style app

00:34:45,679 --> 00:34:48,960
you've built apps this way where it's a

00:34:47,359 --> 00:34:50,720
public restful api

00:34:48,960 --> 00:34:52,159
interacting with your database that's

00:34:50,720 --> 00:34:55,200
normal behavior for you

00:34:52,159 --> 00:34:56,639
so i'm sure that you would have um i'm

00:34:55,200 --> 00:34:58,480
sure that you would actually have

00:34:56,639 --> 00:35:00,160
you know this concept hopefully okay in

00:34:58,480 --> 00:35:02,480
your head the magic

00:35:00,160 --> 00:35:04,400
is the scheduler and controllers these

00:35:02,480 --> 00:35:05,839
guys kicking in and basically looking at

00:35:04,400 --> 00:35:08,480
that record and going hmm

00:35:05,839 --> 00:35:10,240
what do we do with that request okay and

00:35:08,480 --> 00:35:12,480
it enacts with these cubelets

00:35:10,240 --> 00:35:13,920
to basically make that request real in

00:35:12,480 --> 00:35:16,800
the real world

00:35:13,920 --> 00:35:18,800
so three masters out of six yes so if

00:35:16,800 --> 00:35:19,119
you have six total nodes typically three

00:35:18,800 --> 00:35:21,920
of them

00:35:19,119 --> 00:35:23,280
are masters uh and you know because you

00:35:21,920 --> 00:35:25,839
want three masters as

00:35:23,280 --> 00:35:28,160
at a minimum here i'll show you that

00:35:25,839 --> 00:35:32,000
let's come over here to my

00:35:28,160 --> 00:35:35,839
uh my google one again cube ctl

00:35:32,000 --> 00:35:37,680
cue control get nodes here i have it

00:35:35,839 --> 00:35:40,240
should be the total of six

00:35:37,680 --> 00:35:41,520
all right i have the three masters and

00:35:40,240 --> 00:35:43,920
the three workers

00:35:41,520 --> 00:35:45,440
okay three master street workers now

00:35:43,920 --> 00:35:47,599
typically what you have is

00:35:45,440 --> 00:35:49,520
three masters two workers that would be

00:35:47,599 --> 00:35:51,119
often your minimal set

00:35:49,520 --> 00:35:52,720
you can also make your master

00:35:51,119 --> 00:35:55,680
schedulable so work

00:35:52,720 --> 00:35:57,040
the workers the work goes to the masters

00:35:55,680 --> 00:35:58,400
i've done that before also

00:35:57,040 --> 00:36:00,160
so you can't get down to the gist of

00:35:58,400 --> 00:36:01,520
three masters but three masters is

00:36:00,160 --> 00:36:03,599
typically your minimum

00:36:01,520 --> 00:36:05,760
unless you live in a world like uh there

00:36:03,599 --> 00:36:08,880
is another kubernetes option out there

00:36:05,760 --> 00:36:13,040
called k3s

00:36:08,880 --> 00:36:15,680
as an example and that one replaced ncd

00:36:13,040 --> 00:36:17,920
so it can actually go to a single node

00:36:15,680 --> 00:36:19,040
okay so it carries its own database i

00:36:17,920 --> 00:36:21,599
forget what it is

00:36:19,040 --> 00:36:23,040
uh at this point so that is your typical

00:36:21,599 --> 00:36:23,760
architecture there right what you see

00:36:23,040 --> 00:36:26,079
right there

00:36:23,760 --> 00:36:29,680
if i go back to my mini cube however and

00:36:26,079 --> 00:36:29,680
do cube control get nodes

00:36:30,320 --> 00:36:35,119
okay you'll see there's just one node

00:36:33,359 --> 00:36:36,640
that's the master node so it's a master

00:36:35,119 --> 00:36:39,520
and worker all in one

00:36:36,640 --> 00:36:41,680
if i say cube control get pods dash all

00:36:39,520 --> 00:36:44,240
name spaces

00:36:41,680 --> 00:36:44,800
you'll see that it actually has that ncd

00:36:44,240 --> 00:36:48,160
api

00:36:44,800 --> 00:36:50,240
server controller scheduler right so

00:36:48,160 --> 00:36:52,640
those things that we mentioned already

00:36:50,240 --> 00:36:54,079
are here even in this little mini cube

00:36:52,640 --> 00:36:54,720
versus what's running in that big

00:36:54,079 --> 00:36:58,000
cluster

00:36:54,720 --> 00:37:00,720
as an example okay uh

00:36:58,000 --> 00:37:02,000
k3s does run on raspberry pi that is

00:37:00,720 --> 00:37:04,320
true

00:37:02,000 --> 00:37:05,280
so james three infranodes so the reason

00:37:04,320 --> 00:37:07,839
you would have the three

00:37:05,280 --> 00:37:09,200
infra nodes is because you want to take

00:37:07,839 --> 00:37:12,000
other parts that aren't quite

00:37:09,200 --> 00:37:13,839
master components for instance your aj

00:37:12,000 --> 00:37:16,160
proxy which represents your ingress

00:37:13,839 --> 00:37:18,320
often your ingress goes on the infra

00:37:16,160 --> 00:37:20,000
nodes or if you had distributed

00:37:18,320 --> 00:37:21,280
virtualized storage maybe that goes on

00:37:20,000 --> 00:37:23,599
your infra nodes as opposed to your

00:37:21,280 --> 00:37:26,079
masters or your workers as an example

00:37:23,599 --> 00:37:27,599
okay so you might have infra nodes also

00:37:26,079 --> 00:37:29,040
uh that's more of an open shift thing

00:37:27,599 --> 00:37:30,240
than a regular kubernetes thing

00:37:29,040 --> 00:37:33,839
openshift has that

00:37:30,240 --> 00:37:35,440
certain type of solution and

00:37:33,839 --> 00:37:37,680
well you would you would lighten up the

00:37:35,440 --> 00:37:39,920
load on those masters for fcd yeah so

00:37:37,680 --> 00:37:40,960
ntd is taking up cpu resources on those

00:37:39,920 --> 00:37:43,920
three masters

00:37:40,960 --> 00:37:45,920
and you want to offload cpu and memory

00:37:43,920 --> 00:37:47,920
so scd can do its job

00:37:45,920 --> 00:37:50,079
okay but hopefully for those who are

00:37:47,920 --> 00:37:51,680
brand new to what we just talked about

00:37:50,079 --> 00:37:54,000
you're now thinking okay this kubernetes

00:37:51,680 --> 00:37:57,680
thing is maybe not what i expected

00:37:54,000 --> 00:38:01,119
kubernetes is a cluster of resources

00:37:57,680 --> 00:38:01,760
it is a big thing okay mini cube is a

00:38:01,119 --> 00:38:04,240
small thing

00:38:01,760 --> 00:38:05,280
k3s is a small thing but kubernetes is

00:38:04,240 --> 00:38:08,320
meant to be used at

00:38:05,280 --> 00:38:10,320
scale all right think of it as running

00:38:08,320 --> 00:38:12,480
all the applications for your entire

00:38:10,320 --> 00:38:12,960
company that's really what it's there

00:38:12,480 --> 00:38:14,800
for

00:38:12,960 --> 00:38:16,320
that's why when google says they launch

00:38:14,800 --> 00:38:18,480
two billion containers a week

00:38:16,320 --> 00:38:19,839
is because they run all the stuff you

00:38:18,480 --> 00:38:23,440
run at google

00:38:19,839 --> 00:38:24,000
in containers okay so it is kind of a

00:38:23,440 --> 00:38:25,680
big deal

00:38:24,000 --> 00:38:27,520
and takes a lot of work and actually i

00:38:25,680 --> 00:38:28,560
just lost the qa panel let me pull it

00:38:27,520 --> 00:38:30,400
back up here

00:38:28,560 --> 00:38:31,839
come on qa panel there it is again make

00:38:30,400 --> 00:38:32,960
sure we don't lose it all right so

00:38:31,839 --> 00:38:33,680
hopefully the answer is your question

00:38:32,960 --> 00:38:36,000
andrew

00:38:33,680 --> 00:38:38,160
uh three masters out of six all right in

00:38:36,000 --> 00:38:39,680
this case i do have nine blocks here

00:38:38,160 --> 00:38:41,200
nine is not the minimum three is the

00:38:39,680 --> 00:38:41,760
minimum but you you know you pick and

00:38:41,200 --> 00:38:43,440
choose

00:38:41,760 --> 00:38:44,800
your applications of course use these

00:38:43,440 --> 00:38:45,760
nodes and you have to decide which one

00:38:44,800 --> 00:38:47,280
we're out there

00:38:45,760 --> 00:38:49,280
now all this is done in a declarative

00:38:47,280 --> 00:38:49,920
way you will basically say i want to run

00:38:49,280 --> 00:38:53,119
my

00:38:49,920 --> 00:38:55,200
tomcat v1 here four times

00:38:53,119 --> 00:38:57,359
four replicas of tomcat and the reason i

00:38:55,200 --> 00:39:00,079
want four replicas of tomcat is because

00:38:57,359 --> 00:39:01,040
one i have a lot of inbound load from my

00:39:00,079 --> 00:39:02,400
user base

00:39:01,040 --> 00:39:05,680
and therefore i need more than one

00:39:02,400 --> 00:39:07,440
tomcat i also want some highly available

00:39:05,680 --> 00:39:09,040
you know ha qualities about the

00:39:07,440 --> 00:39:10,320
applications so i need a minimum of two

00:39:09,040 --> 00:39:12,079
tomcats

00:39:10,320 --> 00:39:13,520
in order to do highly available and load

00:39:12,079 --> 00:39:15,599
balancing across them

00:39:13,520 --> 00:39:16,640
so you know four tomcats gives us some

00:39:15,599 --> 00:39:18,560
redundancy

00:39:16,640 --> 00:39:20,800
if one of our tomcats dies we still have

00:39:18,560 --> 00:39:22,320
three left if two of them die we still

00:39:20,800 --> 00:39:23,440
have two left if three of them died we

00:39:22,320 --> 00:39:24,960
still have one left

00:39:23,440 --> 00:39:26,160
and we can be scurrying around trying to

00:39:24,960 --> 00:39:26,960
figure out how to get our tomcats back

00:39:26,160 --> 00:39:29,040
to life

00:39:26,960 --> 00:39:31,040
and the load is distributed across the

00:39:29,040 --> 00:39:32,640
four of them so you might have that

00:39:31,040 --> 00:39:34,480
tomcat show up in four

00:39:32,640 --> 00:39:36,400
different places here in our cluster

00:39:34,480 --> 00:39:38,800
that's often what you would do

00:39:36,400 --> 00:39:40,640
so again if one of these nodes goes away

00:39:38,800 --> 00:39:41,599
let's say someone pulls the power plug

00:39:40,640 --> 00:39:44,880
on that server

00:39:41,599 --> 00:39:47,200
that raspberry pi is smashed right

00:39:44,880 --> 00:39:49,440
then this thing might fail so what if

00:39:47,200 --> 00:39:51,920
the raspberry pi here gets killed

00:39:49,440 --> 00:39:53,680
the vm dies and by the way vms do die

00:39:51,920 --> 00:39:54,480
i've actually killed one out but amazon

00:39:53,680 --> 00:39:56,160
before

00:39:54,480 --> 00:39:58,480
and you know you can easily overload a

00:39:56,160 --> 00:40:00,079
vm and it might just die and go away

00:39:58,480 --> 00:40:01,520
but what happens is kubernetes knows

00:40:00,079 --> 00:40:03,119
that that thing died

00:40:01,520 --> 00:40:05,040
and it realizes you still want four

00:40:03,119 --> 00:40:06,800
tomcats so it finds another place in the

00:40:05,040 --> 00:40:08,960
cluster to run your tomcat

00:40:06,800 --> 00:40:10,720
and it also depending on your kubernetes

00:40:08,960 --> 00:40:12,079
version it'll see that if the node

00:40:10,720 --> 00:40:14,960
really does die

00:40:12,079 --> 00:40:16,480
it'll figure out that all those uh

00:40:14,960 --> 00:40:16,880
processes that we're running there like

00:40:16,480 --> 00:40:19,280
the

00:40:16,880 --> 00:40:20,640
pg admin which is postgres the spring

00:40:19,280 --> 00:40:22,560
boot here the wildfly

00:40:20,640 --> 00:40:24,560
it'll schedule those elsewhere in the

00:40:22,560 --> 00:40:26,480
cluster okay in other words it'll find a

00:40:24,560 --> 00:40:28,160
new home for it elsewhere in the cluster

00:40:26,480 --> 00:40:30,160
and it'll try to rebuild that node and

00:40:28,160 --> 00:40:32,640
bring it back to life so that your

00:40:30,160 --> 00:40:34,240
whole environment looks good again okay

00:40:32,640 --> 00:40:35,440
so we'll work pretty hard to put all

00:40:34,240 --> 00:40:37,520
these things together

00:40:35,440 --> 00:40:38,960
so our pods the same as nodes no pod is

00:40:37,520 --> 00:40:42,160
like my tomcat

00:40:38,960 --> 00:40:45,280
and i have on this node my my tomcat pod

00:40:42,160 --> 00:40:48,000
my wildfly pod my spring boot pod my

00:40:45,280 --> 00:40:48,480
postgres pod or maybe i have my node.js

00:40:48,000 --> 00:40:51,040
pod

00:40:48,480 --> 00:40:52,640
my my sql pod my tomcat pod my spring

00:40:51,040 --> 00:40:55,359
pod all running on the node

00:40:52,640 --> 00:40:56,560
so typically you have more than one pod

00:40:55,359 --> 00:40:58,000
per node

00:40:56,560 --> 00:40:59,680
that's not required by the way you can

00:40:58,000 --> 00:41:00,720
do one pod per node but that's like

00:40:59,680 --> 00:41:02,319
basically saying

00:41:00,720 --> 00:41:05,280
uh your computer can only run run

00:41:02,319 --> 00:41:07,119
process and right now if you're using a

00:41:05,280 --> 00:41:09,119
computer to interact with us on this

00:41:07,119 --> 00:41:10,640
call you're using zoom which is a

00:41:09,119 --> 00:41:11,440
process you're using mini cube which is

00:41:10,640 --> 00:41:12,720
a process

00:41:11,440 --> 00:41:15,200
and you probably have chrome running

00:41:12,720 --> 00:41:17,119
which is a lot of processes and firefox

00:41:15,200 --> 00:41:19,040
and safari and who knows what else so

00:41:17,119 --> 00:41:20,720
you get many processes running on a

00:41:19,040 --> 00:41:22,319
single computer and that's kind of the

00:41:20,720 --> 00:41:23,440
concept your head should be in when it

00:41:22,319 --> 00:41:25,440
comes these pods

00:41:23,440 --> 00:41:27,440
running on those nodes they are just

00:41:25,440 --> 00:41:30,000
processes running on that computer

00:41:27,440 --> 00:41:31,920
okay uh all right let's keep going here

00:41:30,000 --> 00:41:34,319
let's actually show you a little demo

00:41:31,920 --> 00:41:35,280
all right of how do we mess around here

00:41:34,319 --> 00:41:37,920
now

00:41:35,280 --> 00:41:38,640
my mini cube came up already okay so i

00:41:37,920 --> 00:41:41,359
said

00:41:38,640 --> 00:41:42,880
i'm going to say cube cto cluster info

00:41:41,359 --> 00:41:44,880
that tells me what cluster i'm connected

00:41:42,880 --> 00:41:45,760
to and again that's based on this cube

00:41:44,880 --> 00:41:47,680
config

00:41:45,760 --> 00:41:49,200
variable and where is that you know you

00:41:47,680 --> 00:41:51,040
got you should know where that is

00:41:49,200 --> 00:41:53,200
and also by the way if this gets a

00:41:51,040 --> 00:41:54,720
little screwed up at times

00:41:53,200 --> 00:41:56,400
you know feel free to wipe it out every

00:41:54,720 --> 00:41:58,079
now and then uh you know i'm not gonna

00:41:56,400 --> 00:41:59,760
do it now since my cluster is already up

00:41:58,079 --> 00:42:01,440
and that would be a little confusing but

00:41:59,760 --> 00:42:02,480
you could wipe it out from time to time

00:42:01,440 --> 00:42:04,560
get it clean

00:42:02,480 --> 00:42:06,880
and recreate that mini cube environment

00:42:04,560 --> 00:42:08,079
from scratch i do it all the time

00:42:06,880 --> 00:42:09,839
all right that that's a really nice

00:42:08,079 --> 00:42:11,599
thing about mini cube and even when it

00:42:09,839 --> 00:42:13,200
comes to my big clusters like this big

00:42:11,599 --> 00:42:14,720
cluster i have running over here

00:42:13,200 --> 00:42:16,400
i just recreated it this morning you can

00:42:14,720 --> 00:42:17,599
see it's only been running for 3 hours

00:42:16,400 --> 00:42:19,760
and 47 minutes

00:42:17,599 --> 00:42:21,520
so i recreate my big clusters all the

00:42:19,760 --> 00:42:24,079
time depending on what i need

00:42:21,520 --> 00:42:25,680
as an example so think of clusters as

00:42:24,079 --> 00:42:27,040
something that's fairly ephemeral also

00:42:25,680 --> 00:42:29,200
you can recreate them

00:42:27,040 --> 00:42:31,520
okay so you basically are going to say

00:42:29,200 --> 00:42:33,200
cube ctl get namespaces

00:42:31,520 --> 00:42:35,200
so one thing to understand about

00:42:33,200 --> 00:42:37,119
kubernetes cluster it has a concept of

00:42:35,200 --> 00:42:39,119
namespaces which are think of them as

00:42:37,119 --> 00:42:40,720
folders or directories where you put

00:42:39,119 --> 00:42:41,359
stuff all right you're going to have

00:42:40,720 --> 00:42:42,880
stuff

00:42:41,359 --> 00:42:45,040
in a folder like you would on your hard

00:42:42,880 --> 00:42:47,200
drive or stuff in a directory

00:42:45,040 --> 00:42:48,400
very similar concept with namespaces

00:42:47,200 --> 00:42:49,520
namespaces have some additional

00:42:48,400 --> 00:42:52,960
properties

00:42:49,520 --> 00:42:54,319
uh so clusters are like cattle not pets

00:42:52,960 --> 00:42:54,800
that's very true i treat mine like

00:42:54,319 --> 00:42:56,960
cattle

00:42:54,800 --> 00:42:58,480
not pets however criminalities does

00:42:56,960 --> 00:42:59,920
allow you to treat it as a pet if you're

00:42:58,480 --> 00:43:00,880
familiar with that concept of cattle

00:42:59,920 --> 00:43:02,480
versus pets

00:43:00,880 --> 00:43:04,400
we definitely have customers at red hat

00:43:02,480 --> 00:43:06,800
who treat their clusters like pets

00:43:04,400 --> 00:43:08,480
and and many of them do actually meaning

00:43:06,800 --> 00:43:10,160
they have clusters with a thousand

00:43:08,480 --> 00:43:11,920
servers inside them

00:43:10,160 --> 00:43:13,680
with tens of thousands of applications

00:43:11,920 --> 00:43:14,880
running on them and they treat it like a

00:43:13,680 --> 00:43:17,520
pet

00:43:14,880 --> 00:43:18,960
so i actually treat mine like cattle but

00:43:17,520 --> 00:43:20,480
some people might treat it like a pet as

00:43:18,960 --> 00:43:23,119
an example

00:43:20,480 --> 00:43:24,480
okay so know about get name spaces

00:43:23,119 --> 00:43:26,560
because that's going to basically

00:43:24,480 --> 00:43:28,000
tell you where things are running okay

00:43:26,560 --> 00:43:28,880
that's an important thing and you can

00:43:28,000 --> 00:43:30,640
say

00:43:28,880 --> 00:43:32,240
and you can also know what name space

00:43:30,640 --> 00:43:33,760
you're in and this is actually one of

00:43:32,240 --> 00:43:35,359
those special tools we mentioned it's

00:43:33,760 --> 00:43:36,480
called cuban s

00:43:35,359 --> 00:43:38,800
so if you actually look back at our

00:43:36,480 --> 00:43:41,200
documentation one of the tools we

00:43:38,800 --> 00:43:42,319
recommend you install

00:43:41,200 --> 00:43:43,359
you don't have to install all these by

00:43:42,319 --> 00:43:44,560
the way but some of them are pretty

00:43:43,359 --> 00:43:45,040
valuable and we'll call them out as we

00:43:44,560 --> 00:43:47,680
go

00:43:45,040 --> 00:43:49,119
is cube ctx so you do a brew install

00:43:47,680 --> 00:43:50,640
cube ctx

00:43:49,119 --> 00:43:52,240
and that's a really nice little command

00:43:50,640 --> 00:43:53,280
line tool for basically helping you

00:43:52,240 --> 00:43:54,880
understand

00:43:53,280 --> 00:43:57,280
more about the cluster you're connected

00:43:54,880 --> 00:43:59,040
to and what name space you're in so

00:43:57,280 --> 00:43:59,520
cuban s tells you what name space you're

00:43:59,040 --> 00:44:00,640
in

00:43:59,520 --> 00:44:01,760
all right so that's the one you're

00:44:00,640 --> 00:44:02,960
already following could think of it as

00:44:01,760 --> 00:44:04,079
like pwd

00:44:02,960 --> 00:44:06,560
if you're familiar with the linux

00:44:04,079 --> 00:44:08,800
command for what name space am i in

00:44:06,560 --> 00:44:10,400
okay you treat it like a boil which

00:44:08,800 --> 00:44:11,920
means you might blow it up right james

00:44:10,400 --> 00:44:13,440
just kill it every now and then

00:44:11,920 --> 00:44:15,440
we got the mini cube installed we got

00:44:13,440 --> 00:44:16,640
the cube control installed another great

00:44:15,440 --> 00:44:17,920
tool is stern we're gonna hear more

00:44:16,640 --> 00:44:18,960
about that later that's for helping you

00:44:17,920 --> 00:44:20,720
get logs

00:44:18,960 --> 00:44:22,000
logs out of the cluster really great

00:44:20,720 --> 00:44:23,839
tool get

00:44:22,000 --> 00:44:25,680
for get cloning the thing we're looking

00:44:23,839 --> 00:44:26,480
at right here so you will want to get

00:44:25,680 --> 00:44:29,040
clone

00:44:26,480 --> 00:44:30,720
this whole repo and pull it down so the

00:44:29,040 --> 00:44:32,319
repo with the documentation is also the

00:44:30,720 --> 00:44:34,800
repo we'll use

00:44:32,319 --> 00:44:36,400
for our samples as an example here still

00:44:34,800 --> 00:44:39,760
having trouble with minicube

00:44:36,400 --> 00:44:43,040
well if you want try docker right here

00:44:39,760 --> 00:44:45,040
you can go to docker preferences

00:44:43,040 --> 00:44:46,160
and if you have docker for mac docker

00:44:45,040 --> 00:44:47,599
for windows

00:44:46,160 --> 00:44:49,839
and the kubernetes just needs to be

00:44:47,599 --> 00:44:51,359
turned on i have mine turned off because

00:44:49,839 --> 00:44:53,200
i'm using mini q for my kubernetes

00:44:51,359 --> 00:44:55,440
that's another option for you

00:44:53,200 --> 00:44:56,480
and the um but when it comes to your

00:44:55,440 --> 00:44:58,480
mini cube

00:44:56,480 --> 00:45:00,079
it could be a lot of different things it

00:44:58,480 --> 00:45:02,960
should be noted by the way

00:45:00,079 --> 00:45:05,440
that any given kubernetes distribution

00:45:02,960 --> 00:45:07,520
fails on any given laptop

00:45:05,440 --> 00:45:09,280
no two laptops are configured the same

00:45:07,520 --> 00:45:10,800
and therefore you might have all sorts

00:45:09,280 --> 00:45:11,920
of problems making kubernetes run on

00:45:10,800 --> 00:45:14,079
your machine

00:45:11,920 --> 00:45:15,839
and i'll give you one more tip though

00:45:14,079 --> 00:45:18,000
let's say that um

00:45:15,839 --> 00:45:19,520
you want a kubernetes cluster and your

00:45:18,000 --> 00:45:21,680
laptop just won't get there from here

00:45:19,520 --> 00:45:23,440
your laptop is either too underpowered

00:45:21,680 --> 00:45:25,119
or your laptop just won't run

00:45:23,440 --> 00:45:25,440
virtualization correctly a lot of them

00:45:25,119 --> 00:45:27,040
don't

00:45:25,440 --> 00:45:29,040
especially if they're windows machines

00:45:27,040 --> 00:45:30,880
they just don't have virtualization

00:45:29,040 --> 00:45:32,880
capable of running you also if you have

00:45:30,880 --> 00:45:34,880
an enterprise laptop meaning

00:45:32,880 --> 00:45:36,400
your big bank or your big government

00:45:34,880 --> 00:45:38,240
gave you an enterprise laptop

00:45:36,400 --> 00:45:40,160
often those are configured never to run

00:45:38,240 --> 00:45:41,119
these sorts of things so you can never

00:45:40,160 --> 00:45:42,400
make things run there

00:45:41,119 --> 00:45:44,319
you don't have installation privileges

00:45:42,400 --> 00:45:46,800
you don't have administrative control so

00:45:44,319 --> 00:45:49,599
i'll tell you what go to digitalocean

00:45:46,800 --> 00:45:50,720
okay sign in sign up and run a

00:45:49,599 --> 00:45:51,839
kubernetes cluster there it's a

00:45:50,720 --> 00:45:54,480
beautiful thing

00:45:51,839 --> 00:45:55,040
uh here let me see uh i don't even

00:45:54,480 --> 00:45:57,599
remember

00:45:55,040 --> 00:45:58,800
my address well let me see uh maybe i'm

00:45:57,599 --> 00:46:00,640
with google i can't remember how i

00:45:58,800 --> 00:46:02,640
configured this it's been too long let

00:46:00,640 --> 00:46:05,119
me see if it's with my google account

00:46:02,640 --> 00:46:06,960
but just go to digitalocean and you can

00:46:05,119 --> 00:46:07,680
just click and launch a cluster as an

00:46:06,960 --> 00:46:09,920
example

00:46:07,680 --> 00:46:13,200
okay here's another here's another

00:46:09,920 --> 00:46:17,040
option for you for just today

00:46:13,200 --> 00:46:18,400
so you can come right here to this url

00:46:17,040 --> 00:46:20,319
and this will give you a one hour

00:46:18,400 --> 00:46:22,160
cluster so it cost you nothing

00:46:20,319 --> 00:46:24,079
other than a click and you get a one

00:46:22,160 --> 00:46:25,119
hour cluster uh so just keep that in

00:46:24,079 --> 00:46:26,960
mind it's only good for one hour we're

00:46:25,119 --> 00:46:28,960
gonna be here for another three hours

00:46:26,960 --> 00:46:30,400
so just bear that in mind but that'll

00:46:28,960 --> 00:46:32,720
get you into a cluster

00:46:30,400 --> 00:46:34,319
super easy also with no money no credit

00:46:32,720 --> 00:46:35,680
card as an example

00:46:34,319 --> 00:46:37,359
uh and you'll be able to do some of the

00:46:35,680 --> 00:46:38,560
same things we're doing here so that's

00:46:37,359 --> 00:46:40,240
another way to get a cluster so there's

00:46:38,560 --> 00:46:41,839
lots of ways to get a cluster

00:46:40,240 --> 00:46:43,920
uh in this world but you just have to

00:46:41,839 --> 00:46:48,079
know which one you want

00:46:43,920 --> 00:46:50,240
okay can you send these links on chat

00:46:48,079 --> 00:46:51,839
yeah uh oh you mean like the digital

00:46:50,240 --> 00:46:55,200
ocean one i think so

00:46:51,839 --> 00:46:55,200
okay digitalocean

00:46:57,760 --> 00:47:01,280
yes on that on that one that i showed

00:46:59,920 --> 00:47:02,560
you with openshift here that is a one

00:47:01,280 --> 00:47:04,400
hour cluster

00:47:02,560 --> 00:47:06,079
but a nice thing about it is free

00:47:04,400 --> 00:47:07,680
digitalocean is also another option

00:47:06,079 --> 00:47:08,800
there's also there's lots of ways to get

00:47:07,680 --> 00:47:11,440
one

00:47:08,800 --> 00:47:13,200
uh k3s might be another option for you

00:47:11,440 --> 00:47:14,480
it works on some machines that minicube

00:47:13,200 --> 00:47:17,119
won't work on

00:47:14,480 --> 00:47:18,400
but you'll just kind of have to try all

00:47:17,119 --> 00:47:19,359
these different options to get one that

00:47:18,400 --> 00:47:22,839
works for you

00:47:19,359 --> 00:47:25,599
okay kind is another one that's very

00:47:22,839 --> 00:47:27,280
popular that works for people

00:47:25,599 --> 00:47:28,880
and but again i tend to use mini cube

00:47:27,280 --> 00:47:29,200
now the good news is once you get beyond

00:47:28,880 --> 00:47:31,520
the

00:47:29,200 --> 00:47:32,800
clusters running everything basically

00:47:31,520 --> 00:47:34,720
works the same okay

00:47:32,800 --> 00:47:36,640
you just gotta get a cluster running all

00:47:34,720 --> 00:47:37,760
right so we got this here we started our

00:47:36,640 --> 00:47:38,800
cluster

00:47:37,760 --> 00:47:41,040
you don't have to worry about this part

00:47:38,800 --> 00:47:42,240
of it right now you can later you can

00:47:41,040 --> 00:47:44,559
ignore this step

00:47:42,240 --> 00:47:46,240
basically you can map your docker daemon

00:47:44,559 --> 00:47:47,359
uh into the mini cube directly which is

00:47:46,240 --> 00:47:49,359
kind of clever

00:47:47,359 --> 00:47:50,640
okay let's look over here in the

00:47:49,359 --> 00:47:52,319
beginner section

00:47:50,640 --> 00:47:53,760
so you should know about your cube

00:47:52,319 --> 00:47:57,680
control config view

00:47:53,760 --> 00:48:00,319
you get nodes nodes show namespaces show

00:47:57,680 --> 00:48:02,640
labels uh get pods all namespaces we

00:48:00,319 --> 00:48:05,680
kind of showed you these options

00:48:02,640 --> 00:48:07,599
okay all that there all good stuff

00:48:05,680 --> 00:48:08,880
make sure that you you know i know about

00:48:07,599 --> 00:48:11,839
these commands

00:48:08,880 --> 00:48:13,119
so there's my get pods all name spaces

00:48:11,839 --> 00:48:15,200
finds all pods across

00:48:13,119 --> 00:48:17,200
all name spaces you can see right now we

00:48:15,200 --> 00:48:20,640
have a kind of a bare bones environment

00:48:17,200 --> 00:48:24,400
just cube system okay in the

00:48:20,640 --> 00:48:27,440
let's see term nsf turned

00:48:24,400 --> 00:48:30,000
involves clustering its name

00:48:27,440 --> 00:48:31,440
i don't know what msfw stands for

00:48:30,000 --> 00:48:34,800
anymore

00:48:31,440 --> 00:48:37,440
um now i got this error error let's see

00:48:34,800 --> 00:48:37,440
cluster info

00:48:38,240 --> 00:48:41,680
yes uh so if you're getting the

00:48:40,240 --> 00:48:43,680
localhost error

00:48:41,680 --> 00:48:45,280
it's because your cube config is not set

00:48:43,680 --> 00:48:49,839
correctly

00:48:45,280 --> 00:48:49,839
cube control cluster info

00:48:50,640 --> 00:48:54,160
and let's see i think mine should not

00:48:52,160 --> 00:48:55,200
have an error yeah because mine's

00:48:54,160 --> 00:48:58,240
configured correctly so

00:48:55,200 --> 00:49:00,960
check this value cube echo q config

00:48:58,240 --> 00:49:02,720
and see what it's set to and get it set

00:49:00,960 --> 00:49:04,400
correctly

00:49:02,720 --> 00:49:06,960
that's the magic trick right there you

00:49:04,400 --> 00:49:10,160
got to get that variable set correctly

00:49:06,960 --> 00:49:10,559
all right and you know i actually had it

00:49:10,160 --> 00:49:13,520
set

00:49:10,559 --> 00:49:14,079
prior to launching mini cube so i know

00:49:13,520 --> 00:49:16,160
where it

00:49:14,079 --> 00:49:17,440
is so if you you know what i mean you

00:49:16,160 --> 00:49:18,319
might have to kind of look at your mini

00:49:17,440 --> 00:49:20,800
cube startup

00:49:18,319 --> 00:49:22,079
to figure out what happened to it okay

00:49:20,800 --> 00:49:25,280
where did it go

00:49:22,079 --> 00:49:27,200
uh config view okay all the c

00:49:25,280 --> 00:49:30,079
when i do a config view this is pointing

00:49:27,200 --> 00:49:31,760
to that that file

00:49:30,079 --> 00:49:33,440
all right it's pointing to this file so

00:49:31,760 --> 00:49:35,040
you gotta know where that file is

00:49:33,440 --> 00:49:36,480
uh and of course kubernetes has to know

00:49:35,040 --> 00:49:38,720
where that file is that's basically how

00:49:36,480 --> 00:49:42,319
it knows how to find its cluster

00:49:38,720 --> 00:49:44,000
uh-huh the yeah we don't give you a

00:49:42,319 --> 00:49:46,400
cubeconfig because that is unique

00:49:44,000 --> 00:49:47,920
to your world every cube config is

00:49:46,400 --> 00:49:50,319
unique to you

00:49:47,920 --> 00:49:51,119
pretty much all right so you want to

00:49:50,319 --> 00:49:53,280
create one

00:49:51,119 --> 00:49:56,400
it generates it automatically when you

00:49:53,280 --> 00:49:56,400
do your mini cube start

00:49:57,040 --> 00:50:01,119
okay now it you should go ahead and

00:50:00,160 --> 00:50:04,160
export

00:50:01,119 --> 00:50:08,079
cube config to something like

00:50:04,160 --> 00:50:11,119
you know my directory

00:50:08,079 --> 00:50:11,119
a directory

00:50:11,680 --> 00:50:17,680
a place i remember

00:50:15,440 --> 00:50:19,280
config okay you want to make sure you're

00:50:17,680 --> 00:50:20,720
pointing someplace

00:50:19,280 --> 00:50:22,960
and when you do your mini cube start

00:50:20,720 --> 00:50:26,160
it'll populate it for you

00:50:22,960 --> 00:50:28,960
all right now if someone has a cluster

00:50:26,160 --> 00:50:29,839
for you okay if someone's given you a

00:50:28,960 --> 00:50:31,520
cluster

00:50:29,839 --> 00:50:33,040
then they will give you this cube config

00:50:31,520 --> 00:50:34,559
file

00:50:33,040 --> 00:50:36,720
or they might they might give you this

00:50:34,559 --> 00:50:38,319
config file but in the case of minicube

00:50:36,720 --> 00:50:39,920
it's your cluster you own it you're the

00:50:38,319 --> 00:50:41,280
cluster administrator therefore you're

00:50:39,920 --> 00:50:43,119
responsible for managing your cube

00:50:41,280 --> 00:50:46,240
config file

00:50:43,119 --> 00:50:48,319
okay yep yep yep so i think

00:50:46,240 --> 00:50:50,160
that again this is the hardest part

00:50:48,319 --> 00:50:51,599
getting the cluster

00:50:50,160 --> 00:50:53,440
and getting the cluster up and running

00:50:51,599 --> 00:50:55,680
on a machine that is the hardest part

00:50:53,440 --> 00:50:56,800
once you have the cluster life is gold

00:50:55,680 --> 00:50:58,079
gold all right

00:50:56,800 --> 00:51:00,000
now some commands here you should be

00:50:58,079 --> 00:51:02,160
familiar with get pods all name spaces

00:51:00,000 --> 00:51:04,240
show labels and actually one thing i

00:51:02,160 --> 00:51:07,280
forgot to mention here

00:51:04,240 --> 00:51:08,400
i just zoomed through this too fast okay

00:51:07,280 --> 00:51:10,000
let me come back here

00:51:08,400 --> 00:51:12,160
the concept of label there's these key

00:51:10,000 --> 00:51:13,760
value pairs called labels associated

00:51:12,160 --> 00:51:16,000
with all kubernetes objects

00:51:13,760 --> 00:51:17,200
all right and just get your head around

00:51:16,000 --> 00:51:19,280
the concept there's a

00:51:17,200 --> 00:51:20,720
think of it as a tagging system it is

00:51:19,280 --> 00:51:22,559
really just a name value

00:51:20,720 --> 00:51:23,839
a key value pair and they're associated

00:51:22,559 --> 00:51:26,079
with everything okay

00:51:23,839 --> 00:51:27,520
so when you say show labels like in this

00:51:26,079 --> 00:51:28,880
command here

00:51:27,520 --> 00:51:31,359
that means you want to see what those

00:51:28,880 --> 00:51:33,520
labels are and so therefore

00:51:31,359 --> 00:51:34,490
if you use that cube control get pods

00:51:33,520 --> 00:51:35,680
all namespaces

00:51:34,490 --> 00:51:37,680
[Music]

00:51:35,680 --> 00:51:39,839
show labels you'll see the little labels

00:51:37,680 --> 00:51:40,240
out here and that could be very valuable

00:51:39,839 --> 00:51:41,680
to you

00:51:40,240 --> 00:51:45,200
what is that you know there you might

00:51:41,680 --> 00:51:47,040
see production development etc

00:51:45,200 --> 00:51:49,200
what is the kubernetes preload i'm not

00:51:47,040 --> 00:51:51,680
sure what that question means savannah

00:51:49,200 --> 00:51:52,880
uh kubernetes preload but if you look at

00:51:51,680 --> 00:51:54,880
your mini cube here

00:51:52,880 --> 00:51:57,440
the one we're dealing with this is what

00:51:54,880 --> 00:51:59,280
comes out of the box for mini cube

00:51:57,440 --> 00:52:00,800
you're depending on the cluster you're

00:51:59,280 --> 00:52:02,480
talking to

00:52:00,800 --> 00:52:04,160
it might come with all the box other

00:52:02,480 --> 00:52:05,359
features like uh here i'll show you this

00:52:04,160 --> 00:52:09,040
one here on my

00:52:05,359 --> 00:52:11,520
big enterprise e1 all right

00:52:09,040 --> 00:52:12,800
you'll see that it comes with a lot of

00:52:11,520 --> 00:52:14,800
stuff

00:52:12,800 --> 00:52:16,720
out of the box a software defined

00:52:14,800 --> 00:52:18,640
network in this case i also installed k

00:52:16,720 --> 00:52:21,200
native for serverless capability

00:52:18,640 --> 00:52:22,559
uh ovs right uh it has tekton i got

00:52:21,200 --> 00:52:25,040
tecton pipelines in here

00:52:22,559 --> 00:52:26,960
i've got kiali jaeger istio for istio

00:52:25,040 --> 00:52:27,520
service mesh technology i've got kafka

00:52:26,960 --> 00:52:30,640
in here

00:52:27,520 --> 00:52:32,559
elasticsearch uh what else i got the

00:52:30,640 --> 00:52:34,319
operator lifecycle manager you know

00:52:32,559 --> 00:52:35,119
thanos you know thanos prometheus

00:52:34,319 --> 00:52:36,800
grafana

00:52:35,119 --> 00:52:38,640
i've got a lot of stuff running in this

00:52:36,800 --> 00:52:40,800
other cluster as an example

00:52:38,640 --> 00:52:42,480
so that getpods all namespaces gives you

00:52:40,800 --> 00:52:43,040
a feel for what the heck is running in

00:52:42,480 --> 00:52:46,000
this

00:52:43,040 --> 00:52:47,200
set of machines as an example okay

00:52:46,000 --> 00:52:50,880
downloading the

00:52:47,200 --> 00:52:53,040
1186 preload so i don't oh it's

00:52:50,880 --> 00:52:54,240
when if that's minicube start it's

00:52:53,040 --> 00:52:56,640
loading kubernetes

00:52:54,240 --> 00:52:57,680
into that virtual machine so if you come

00:52:56,640 --> 00:52:58,640
over here and look at this virtual

00:52:57,680 --> 00:53:01,839
machine

00:52:58,640 --> 00:53:03,760
it's running but until minicube

00:53:01,839 --> 00:53:05,119
loads it up it's got to load it with a

00:53:03,760 --> 00:53:06,559
bunch of stuff it's got to load it with

00:53:05,119 --> 00:53:10,000
all the stuff you see here

00:53:06,559 --> 00:53:12,000
all right uh get pods

00:53:10,000 --> 00:53:13,440
well get puzzle nice spaces putting all

00:53:12,000 --> 00:53:14,800
these things in there for you

00:53:13,440 --> 00:53:16,960
and it's doing that by the way by

00:53:14,800 --> 00:53:19,520
installing container images for you

00:53:16,960 --> 00:53:21,119
so the the pre-loading would be the

00:53:19,520 --> 00:53:22,000
installation of kubernetes into that

00:53:21,119 --> 00:53:23,680
cluster

00:53:22,000 --> 00:53:25,359
that should be what it's doing the nice

00:53:23,680 --> 00:53:26,160
thing is if you stop it and start it

00:53:25,359 --> 00:53:28,319
again

00:53:26,160 --> 00:53:29,599
it'll already be there okay in other

00:53:28,319 --> 00:53:30,800
words if you just stop and start as

00:53:29,599 --> 00:53:34,160
opposed to delete

00:53:30,800 --> 00:53:35,760
it'll already have those cached okay

00:53:34,160 --> 00:53:37,839
now in this section we're in the cube

00:53:35,760 --> 00:53:39,680
control section here

00:53:37,839 --> 00:53:42,559
let me paste that in so you can see

00:53:39,680 --> 00:53:45,040
where i'm at all right

00:53:42,559 --> 00:53:46,000
double checking my q a tab here so what

00:53:45,040 --> 00:53:47,599
you're going to do

00:53:46,000 --> 00:53:49,920
when you want to see if your kubernetes

00:53:47,599 --> 00:53:50,960
cluster is happy again you use the

00:53:49,920 --> 00:53:54,400
cluster info

00:53:50,960 --> 00:53:56,000
the config view the get pods those trip

00:53:54,400 --> 00:53:58,079
those tricks to see what's going on and

00:53:56,000 --> 00:54:00,319
then you're going to create a namespace

00:53:58,079 --> 00:54:01,599
okay create a namespace for stuff all

00:54:00,319 --> 00:54:03,440
right for where you're going to put your

00:54:01,599 --> 00:54:07,119
stuff so i'm going to say cube control

00:54:03,440 --> 00:54:08,640
create namespace and call it my stuff

00:54:07,119 --> 00:54:09,760
let's just keep it my stuff to make it

00:54:08,640 --> 00:54:13,200
simple

00:54:09,760 --> 00:54:16,160
now i'm going to say cube control

00:54:13,200 --> 00:54:17,920
get name spaces and as i mentioned you

00:54:16,160 --> 00:54:19,680
know we're in kind of a

00:54:17,920 --> 00:54:21,200
command line environment cli environment

00:54:19,680 --> 00:54:22,880
we're doing a lot of typing because in a

00:54:21,200 --> 00:54:23,760
kubernetes world this is the primary you

00:54:22,880 --> 00:54:26,079
interact with it

00:54:23,760 --> 00:54:27,280
again different kubernetes distributions

00:54:26,079 --> 00:54:28,720
have guise

00:54:27,280 --> 00:54:31,359
like if i wanted to do the same thing

00:54:28,720 --> 00:54:33,839
over here i would say create project

00:54:31,359 --> 00:54:35,040
my stuff so i have a gui over here in

00:54:33,839 --> 00:54:37,599
openshift land

00:54:35,040 --> 00:54:38,640
and your your vendor may have a gui for

00:54:37,599 --> 00:54:40,720
you also

00:54:38,640 --> 00:54:41,680
okay but that's the same idea but what i

00:54:40,720 --> 00:54:43,680
just did

00:54:41,680 --> 00:54:45,440
now if i do my cuban s again you can see

00:54:43,680 --> 00:54:46,799
it's still pointing to default

00:54:45,440 --> 00:54:49,040
and i really want to point it to my

00:54:46,799 --> 00:54:53,040
stuff so cuban s

00:54:49,040 --> 00:54:55,040
my stuff that gets me there

00:54:53,040 --> 00:54:56,640
all right now it's pointing to my stuff

00:54:55,040 --> 00:54:57,520
or if you look at the documentation that

00:54:56,640 --> 00:55:01,119
we have here

00:54:57,520 --> 00:55:01,119
you can use this longer command

00:55:01,359 --> 00:55:04,880
to basically get it to be your default

00:55:03,760 --> 00:55:06,400
namespace

00:55:04,880 --> 00:55:07,599
so that you're you know you know which

00:55:06,400 --> 00:55:09,280
name space you're working in so let me

00:55:07,599 --> 00:55:12,880
go back to default here

00:55:09,280 --> 00:55:15,280
cube cdo cuban s see default

00:55:12,880 --> 00:55:18,000
is now the default and if i want to make

00:55:15,280 --> 00:55:21,599
my stuff the default

00:55:18,000 --> 00:55:22,960
there we go right now that's my stuff

00:55:21,599 --> 00:55:24,079
all right so just keep that in mind you

00:55:22,960 --> 00:55:24,960
want to know what namespace you're in

00:55:24,079 --> 00:55:26,240
that's very important you know what

00:55:24,960 --> 00:55:27,920
namespace is because you'll be

00:55:26,240 --> 00:55:29,599
installing things and you'll be lost

00:55:27,920 --> 00:55:31,599
it's like what namespace is that in

00:55:29,599 --> 00:55:33,440
now it should be known a namespace again

00:55:31,599 --> 00:55:34,960
is just a folder structure

00:55:33,440 --> 00:55:37,520
it has really nothing to do with the

00:55:34,960 --> 00:55:40,160
nodes or the pods per se

00:55:37,520 --> 00:55:40,799
right the the it basically is just a way

00:55:40,160 --> 00:55:42,240
to group

00:55:40,799 --> 00:55:43,839
things all right a way to group things

00:55:42,240 --> 00:55:45,280
where anything else so now i'm going to

00:55:43,839 --> 00:55:46,880
do this create deployment

00:55:45,280 --> 00:55:49,200
so if you look right here the create

00:55:46,880 --> 00:55:50,480
deployment basically pulls an image from

00:55:49,200 --> 00:55:54,319
quayio

00:55:50,480 --> 00:55:56,720
rh developers quarkus demo v1

00:55:54,319 --> 00:55:58,160
so this is a container image now if

00:55:56,720 --> 00:56:00,319
typically if you dealt with containers

00:55:58,160 --> 00:56:01,599
before you probably dealt with docker io

00:56:00,319 --> 00:56:04,160
which is the default if you don't

00:56:01,599 --> 00:56:06,240
specify the registry or repository

00:56:04,160 --> 00:56:08,160
but you also will have things coming

00:56:06,240 --> 00:56:09,839
from other locations also

00:56:08,160 --> 00:56:11,680
so as a matter of fact let me show you

00:56:09,839 --> 00:56:14,799
this real quick uh

00:56:11,680 --> 00:56:16,480
well sorry let me come here

00:56:14,799 --> 00:56:18,319
remember this last line i mentioned down

00:56:16,480 --> 00:56:18,960
here at the bottom that you don't really

00:56:18,319 --> 00:56:21,920
have to do

00:56:18,960 --> 00:56:23,599
i'm going to do it anyway let me run it

00:56:21,920 --> 00:56:25,200
because what this does

00:56:23,599 --> 00:56:26,640
it allows me to do things like this now

00:56:25,200 --> 00:56:28,960
docker images

00:56:26,640 --> 00:56:30,960
and see those docker images actually are

00:56:28,960 --> 00:56:33,920
coming from the mini cube docker daemon

00:56:30,960 --> 00:56:35,200
that's what we've done here okay so if i

00:56:33,920 --> 00:56:36,880
do mini cube

00:56:35,200 --> 00:56:39,839
docker env you'll see it's just setting

00:56:36,880 --> 00:56:39,839
up the environment variables

00:56:41,760 --> 00:56:46,960
let me first be in the right profile

00:56:44,720 --> 00:56:49,119
devnation

00:56:46,960 --> 00:56:50,400
and dockery and v says just setting

00:56:49,119 --> 00:56:52,160
these environment variables

00:56:50,400 --> 00:56:54,240
but because of that my docker command

00:56:52,160 --> 00:56:56,559
line tool is no longer talking to this

00:56:54,240 --> 00:56:58,319
docker daemon over here

00:56:56,559 --> 00:56:59,599
it's talking to the one in mini cube so

00:56:58,319 --> 00:57:01,680
if i do docker images you can see

00:56:59,599 --> 00:57:02,240
there's some from gcrio that's their

00:57:01,680 --> 00:57:05,040
google

00:57:02,240 --> 00:57:05,040
repository

00:57:05,280 --> 00:57:08,640
and so that's where the image came from

00:57:07,359 --> 00:57:10,880
and now if i want to run this other

00:57:08,640 --> 00:57:12,319
command

00:57:10,880 --> 00:57:12,780
the create deployment command this one

00:57:12,319 --> 00:57:14,960
right here

00:57:12,780 --> 00:57:18,000
[Music]

00:57:14,960 --> 00:57:20,810
and run it okay

00:57:18,000 --> 00:57:22,720
i do docker images

00:57:20,810 --> 00:57:27,040
[Music]

00:57:22,720 --> 00:57:29,920
all right let's see here

00:57:27,040 --> 00:57:30,559
watch watch cube control get pods okay

00:57:29,920 --> 00:57:33,680
oh

00:57:30,559 --> 00:57:38,559
there's my app uh

00:57:33,680 --> 00:57:40,720
dot well the cube cto get deployments

00:57:38,559 --> 00:57:42,000
right great all right so there's my app

00:57:40,720 --> 00:57:42,799
there's my pod

00:57:42,000 --> 00:57:46,319
you're gonna hear more about these

00:57:42,799 --> 00:57:47,359
components in a second get rs

00:57:46,319 --> 00:57:49,440
all right good all right so i got

00:57:47,359 --> 00:57:52,000
everything i was expecting there

00:57:49,440 --> 00:57:54,079
okay but the create deployment basically

00:57:52,000 --> 00:57:56,319
is the easiest way to launch your image

00:57:54,079 --> 00:57:57,760
into your kubernetes okay so you gotta

00:57:56,319 --> 00:57:59,280
have an image first

00:57:57,760 --> 00:58:00,880
so this image might be my sequel it

00:57:59,280 --> 00:58:02,799
might be postgres it might be

00:58:00,880 --> 00:58:05,440
you know ghost if you're into node.js

00:58:02,799 --> 00:58:06,960
and blogging right it might be wordpress

00:58:05,440 --> 00:58:08,880
in this case it's this little quercus

00:58:06,960 --> 00:58:09,280
demo but that is the fastest way to get

00:58:08,880 --> 00:58:10,880
the thing

00:58:09,280 --> 00:58:12,319
launched into your kubernetes to see if

00:58:10,880 --> 00:58:14,160
in fact things are going to run

00:58:12,319 --> 00:58:15,520
correctly okay so see if you can run

00:58:14,160 --> 00:58:18,160
some code there

00:58:15,520 --> 00:58:20,079
now one thing i forgot to show you but

00:58:18,160 --> 00:58:23,839
you'll want to watch your events

00:58:20,079 --> 00:58:23,839
and here's why

00:58:24,000 --> 00:58:27,839
all right watch your events because

00:58:25,119 --> 00:58:29,599
you'll see the the life cycle happen

00:58:27,839 --> 00:58:31,599
you'll see that when i basically made

00:58:29,599 --> 00:58:33,599
that create deployment request

00:58:31,599 --> 00:58:34,799
that is going into the api that's going

00:58:33,599 --> 00:58:36,960
into ncd

00:58:34,799 --> 00:58:38,640
ncd is then basically letting you know

00:58:36,960 --> 00:58:40,480
the schedulers and controllers know hey

00:58:38,640 --> 00:58:44,079
there's a request to run this thing

00:58:40,480 --> 00:58:46,079
called the corkus demo okay

00:58:44,079 --> 00:58:48,240
so it's scheduled it's got to then pull

00:58:46,079 --> 00:58:48,720
the image so think of this as docker

00:58:48,240 --> 00:58:49,920
pull

00:58:48,720 --> 00:58:51,599
if you familiar with that command

00:58:49,920 --> 00:58:52,480
pulling the image from that location on

00:58:51,599 --> 00:58:54,880
the internet

00:58:52,480 --> 00:58:56,079
down to this machine successful create

00:58:54,880 --> 00:58:58,240
scaling replica set

00:58:56,079 --> 00:58:59,200
pulled so in other words i have finished

00:58:58,240 --> 00:59:00,319
pulling the image

00:58:59,200 --> 00:59:02,000
and then i'm going to create the

00:59:00,319 --> 00:59:02,720
container quarkus demo and it's going to

00:59:02,000 --> 00:59:04,240
be started

00:59:02,720 --> 00:59:06,720
and you're gonna see it as status

00:59:04,240 --> 00:59:09,040
running here ready one for one

00:59:06,720 --> 00:59:10,720
so when you see running and one for one

00:59:09,040 --> 00:59:13,520
as opposed to zero for one

00:59:10,720 --> 00:59:15,200
that is how you know things are okay

00:59:13,520 --> 00:59:16,640
okay so that is running my little

00:59:15,200 --> 00:59:18,799
application my little java application

00:59:16,640 --> 00:59:21,920
here on this local machine

00:59:18,799 --> 00:59:23,520
inside that kubernetes cluster now

00:59:21,920 --> 00:59:25,040
you might be running well how do you

00:59:23,520 --> 00:59:27,440
know that it's there how do

00:59:25,040 --> 00:59:30,000
you check that it's okay all right how

00:59:27,440 --> 00:59:31,520
do you know that it's okay

00:59:30,000 --> 00:59:33,119
all right we're gonna come in here and

00:59:31,520 --> 00:59:37,680
we're gonna say cube control

00:59:33,119 --> 00:59:39,440
exec it and we're gonna basically

00:59:37,680 --> 00:59:40,960
exec into this pod i'm gonna paste the

00:59:39,440 --> 00:59:44,720
pod name in

00:59:40,960 --> 00:59:47,200
right there dash dash bin bash

00:59:44,720 --> 00:59:49,440
so then i can say curl localhost because

00:59:47,200 --> 00:59:51,760
i'm now inside that pod

00:59:49,440 --> 00:59:53,359
or inside that container and i can say

00:59:51,760 --> 00:59:54,720
curl low host and there it is that's the

00:59:53,359 --> 00:59:55,920
little running application running on

00:59:54,720 --> 00:59:58,880
this machine

00:59:55,920 --> 01:00:00,079
so if you guys can run that same command

00:59:58,880 --> 01:00:00,720
let's see how many people can get that

01:00:00,079 --> 01:00:02,319
running

01:00:00,720 --> 01:00:03,839
how many people have gotten this far and

01:00:02,319 --> 01:00:05,520
here i'll paste this command into the

01:00:03,839 --> 01:00:07,599
chat

01:00:05,520 --> 01:00:08,799
how many well i didn't copy it correctly

01:00:07,599 --> 01:00:10,240
how many people have gotten this far

01:00:08,799 --> 01:00:13,280
though they can actually

01:00:10,240 --> 01:00:16,000
see that thing running they

01:00:13,280 --> 01:00:16,880
they created the deployment and they got

01:00:16,000 --> 01:00:18,400
it running

01:00:16,880 --> 01:00:21,280
right there all right mark's got it

01:00:18,400 --> 01:00:21,280
running fantastic

01:00:21,760 --> 01:00:25,760
uh paul question what is the typical

01:00:24,480 --> 01:00:26,960
security that people make when running a

01:00:25,760 --> 01:00:28,720
kubernetes

01:00:26,960 --> 01:00:30,160
okay so what are the typical mistakes

01:00:28,720 --> 01:00:31,680
related to security

01:00:30,160 --> 01:00:34,000
that people make when running kubernetes

01:00:31,680 --> 01:00:36,240
out of the gate uh the easiest one is

01:00:34,000 --> 01:00:39,359
they do not secure

01:00:36,240 --> 01:00:41,920
this api endpoint all right so if i come

01:00:39,359 --> 01:00:42,799
back over here to this little drawing

01:00:41,920 --> 01:00:45,280
right there's a pub

01:00:42,799 --> 01:00:46,799
there's an api that's exposed you need

01:00:45,280 --> 01:00:48,799
to lock that thing down

01:00:46,799 --> 01:00:50,240
okay because anybody who has access to

01:00:48,799 --> 01:00:52,880
the api has control

01:00:50,240 --> 01:00:54,160
of your cluster so it's important that

01:00:52,880 --> 01:00:54,960
you make sure that that api is not

01:00:54,160 --> 01:00:56,480
exposed

01:00:54,960 --> 01:00:58,640
that is probably the most the biggest

01:00:56,480 --> 01:00:59,520
ones the other one that red hat is a big

01:00:58,640 --> 01:01:01,520
stickler on

01:00:59,520 --> 01:01:03,680
is when you launch these images into

01:01:01,520 --> 01:01:04,400
your cluster we recommend those images

01:01:03,680 --> 01:01:07,200
do not run

01:01:04,400 --> 01:01:08,559
as root therefore if someone does break

01:01:07,200 --> 01:01:10,480
into the pod

01:01:08,559 --> 01:01:11,839
and into that container they are not

01:01:10,480 --> 01:01:14,240
root on that machine

01:01:11,839 --> 01:01:15,119
as an example this is another big one

01:01:14,240 --> 01:01:16,480
okay

01:01:15,119 --> 01:01:17,680
uh and there will be there could be some

01:01:16,480 --> 01:01:18,880
others that we think of along the way

01:01:17,680 --> 01:01:19,680
but those are two big ones that i

01:01:18,880 --> 01:01:22,240
remember

01:01:19,680 --> 01:01:24,480
off top of my head let's see here mini q

01:01:22,240 --> 01:01:28,160
is unable to connect to the vm

01:01:24,480 --> 01:01:30,720
i o timeout all right do you see

01:01:28,160 --> 01:01:32,799
on your virtualbox surge do you see that

01:01:30,720 --> 01:01:34,240
your virtualbox is running

01:01:32,799 --> 01:01:35,839
here do you got a little you can

01:01:34,240 --> 01:01:36,720
basically load up the virtualbox user

01:01:35,839 --> 01:01:39,200
interface

01:01:36,720 --> 01:01:40,640
and see that it's running here that will

01:01:39,200 --> 01:01:42,160
tell you that at least something

01:01:40,640 --> 01:01:43,920
attempted to happen

01:01:42,160 --> 01:01:46,400
and if it can't talk to it then you

01:01:43,920 --> 01:01:48,720
probably have a networking issue

01:01:46,400 --> 01:01:49,839
on your computer and those are really

01:01:48,720 --> 01:01:51,920
hard to debug

01:01:49,839 --> 01:01:53,119
um it might just be a networking issue

01:01:51,920 --> 01:01:56,240
that's why it can't connect to that

01:01:53,119 --> 01:01:58,559
virtual machine from minicube

01:01:56,240 --> 01:01:59,760
uh but do check that it's running inside

01:01:58,559 --> 01:02:03,039
your virtualbox

01:01:59,760 --> 01:02:06,559
uh if you said vm driver virtualbox okay

01:02:03,039 --> 01:02:11,359
so you can also do if mini cubes start

01:02:06,559 --> 01:02:14,160
failed you can also do a mini cube stop

01:02:11,359 --> 01:02:15,359
see if that succeeds and try starting

01:02:14,160 --> 01:02:17,680
again

01:02:15,359 --> 01:02:20,160
you can also just do a delete wipe it

01:02:17,680 --> 01:02:21,200
out and come back and start again as an

01:02:20,160 --> 01:02:24,160
example

01:02:21,200 --> 01:02:26,000
uh can i install k uh kubernetes in a vm

01:02:24,160 --> 01:02:26,559
looks like no kernel support doing on a

01:02:26,000 --> 01:02:28,319
vm

01:02:26,559 --> 01:02:31,119
no no uh you can actually install

01:02:28,319 --> 01:02:34,240
kubernetes on a bunch of vms

01:02:31,119 --> 01:02:34,480
okay uh you normally don't do one vm but

01:02:34,240 --> 01:02:36,720
you

01:02:34,480 --> 01:02:37,680
could in theory so this this is the tool

01:02:36,720 --> 01:02:40,640
for that

01:02:37,680 --> 01:02:41,920
cube adm this is where you want to just

01:02:40,640 --> 01:02:43,680
go

01:02:41,920 --> 01:02:45,839
you want to be hardcore linux and do it

01:02:43,680 --> 01:02:47,359
on your own as an example

01:02:45,839 --> 01:02:49,280
okay so you want to be hardcore and do

01:02:47,359 --> 01:02:50,880
it on your own so that would be one

01:02:49,280 --> 01:02:52,160
option for you and it's a very popular

01:02:50,880 --> 01:02:53,280
option for people who are hardcore

01:02:52,160 --> 01:02:55,359
linuxes admins

01:02:53,280 --> 01:02:56,319
they like using this option as an

01:02:55,359 --> 01:02:58,000
example

01:02:56,319 --> 01:02:59,520
you know because i've actually never

01:02:58,000 --> 01:03:01,039
done it i've always used mini cube or

01:02:59,520 --> 01:03:02,160
something else that gives me a cluster

01:03:01,039 --> 01:03:05,280
more easily

01:03:02,160 --> 01:03:07,440
as an example okay

01:03:05,280 --> 01:03:08,720
all right so when we're monitoring you

01:03:07,440 --> 01:03:10,000
want to monitor the event so cube

01:03:08,720 --> 01:03:12,000
control get events

01:03:10,000 --> 01:03:13,280
is a way to kind of see the life cycle

01:03:12,000 --> 01:03:14,480
that's happening there

01:03:13,280 --> 01:03:16,079
now there's a couple other things that

01:03:14,480 --> 01:03:17,440
have happened we have a deployment and

01:03:16,079 --> 01:03:19,440
we have a replica set

01:03:17,440 --> 01:03:21,440
so when we did that create deployment we

01:03:19,440 --> 01:03:25,039
ended up with three objects

01:03:21,440 --> 01:03:27,280
cube cto get pods okay

01:03:25,039 --> 01:03:29,520
cube control get deployment you notice i

01:03:27,280 --> 01:03:31,039
use the term cube control git cube ctl i

01:03:29,520 --> 01:03:33,440
go back and forth there

01:03:31,039 --> 01:03:34,799
and a replica set you actually know

01:03:33,440 --> 01:03:35,920
three objects you ended up with a

01:03:34,799 --> 01:03:38,960
deployment

01:03:35,920 --> 01:03:40,400
my app which created a replica set which

01:03:38,960 --> 01:03:43,200
created your pods

01:03:40,400 --> 01:03:44,000
okay or in this case one pod so that is

01:03:43,200 --> 01:03:45,520
often the way

01:03:44,000 --> 01:03:46,799
this goes you create a deployment which

01:03:45,520 --> 01:03:48,240
creates a replica set which creates a

01:03:46,799 --> 01:03:50,720
pod these are not

01:03:48,240 --> 01:03:52,400
guaranteed things but you that's the

01:03:50,720 --> 01:03:53,760
normal behavior especially if you're

01:03:52,400 --> 01:03:55,599
brand new to kubernetes

01:03:53,760 --> 01:03:57,200
just create a deployment which creates a

01:03:55,599 --> 01:03:58,480
replica set which creates a pod

01:03:57,200 --> 01:04:00,720
so let's come back to this diagram here

01:03:58,480 --> 01:04:03,520
and discuss this a little bit more okay

01:04:00,720 --> 01:04:05,280
we have these terms here all right so

01:04:03,520 --> 01:04:07,920
the deployment and the replica set

01:04:05,280 --> 01:04:09,200
its job is to try to maintain a certain

01:04:07,920 --> 01:04:12,000
number of replicas

01:04:09,200 --> 01:04:13,039
and it defines the pod template and this

01:04:12,000 --> 01:04:15,200
is very important

01:04:13,039 --> 01:04:18,240
so your deployment is smarter than your

01:04:15,200 --> 01:04:20,720
pod the deployment is the pod template

01:04:18,240 --> 01:04:22,160
it is the pod recipe if you will and

01:04:20,720 --> 01:04:25,039
that's where you put things that are

01:04:22,160 --> 01:04:26,720
that apply to all pods okay so let's say

01:04:25,039 --> 01:04:28,880
i want a certain set of health checks

01:04:26,720 --> 01:04:30,480
a certain set of resource constraints a

01:04:28,880 --> 01:04:31,920
certain image obviously the image is

01:04:30,480 --> 01:04:32,960
very critical like what image are we

01:04:31,920 --> 01:04:35,599
going to load

01:04:32,960 --> 01:04:37,599
okay so that's a critical aspect of it

01:04:35,599 --> 01:04:40,079
so that concept is all part of it here

01:04:37,599 --> 01:04:42,160
so you want to make sure that you use a

01:04:40,079 --> 01:04:43,440
deployment which creates a replica set

01:04:42,160 --> 01:04:44,880
which creates your pod

01:04:43,440 --> 01:04:46,720
okay we'll show you this more in a

01:04:44,880 --> 01:04:48,400
second also

01:04:46,720 --> 01:04:50,000
when we're gonna we're gonna also put a

01:04:48,400 --> 01:04:51,039
load balancer in front of our pods

01:04:50,000 --> 01:04:54,000
called a service

01:04:51,039 --> 01:04:55,520
so service is often almost always with a

01:04:54,000 --> 01:04:57,680
deployment you'll have a deployment

01:04:55,520 --> 01:04:59,280
and a service the service is your load

01:04:57,680 --> 01:05:00,880
balancer in front of your pods

01:04:59,280 --> 01:05:02,480
and the nice thing about that is this

01:05:00,880 --> 01:05:04,880
represents the dns entry

01:05:02,480 --> 01:05:06,079
the domain the the name of the service

01:05:04,880 --> 01:05:08,079
it gives it a real name

01:05:06,079 --> 01:05:09,119
textual name and it is the virtualized

01:05:08,079 --> 01:05:11,039
ip address

01:05:09,119 --> 01:05:12,799
which maps to the ip addresses of the

01:05:11,039 --> 01:05:14,480
pods so in other words you will or

01:05:12,799 --> 01:05:17,039
you want your end users interacting with

01:05:14,480 --> 01:05:20,240
your service not your pod ips

01:05:17,039 --> 01:05:22,160
by default okay and then there's this

01:05:20,240 --> 01:05:23,599
concept of a persistent volume and that

01:05:22,160 --> 01:05:24,319
is if you want network addressable

01:05:23,599 --> 01:05:26,559
storage

01:05:24,319 --> 01:05:27,440
and this is not ephemeral this is

01:05:26,559 --> 01:05:30,240
persistent

01:05:27,440 --> 01:05:31,839
storage across multiple pod invocations

01:05:30,240 --> 01:05:33,440
pods coming and going

01:05:31,839 --> 01:05:35,280
okay let me show you a couple other

01:05:33,440 --> 01:05:37,359
things here

01:05:35,280 --> 01:05:38,559
they got our one little pod running this

01:05:37,359 --> 01:05:40,400
is by the way is a watch i

01:05:38,559 --> 01:05:42,480
i love the little watch command all

01:05:40,400 --> 01:05:43,920
watch does is constantly run that same

01:05:42,480 --> 01:05:45,520
command every two seconds

01:05:43,920 --> 01:05:47,359
so you can see there's our there's our

01:05:45,520 --> 01:05:50,319
part up and running i don't have a

01:05:47,359 --> 01:05:52,079
service right now cube cto get services

01:05:50,319 --> 01:05:53,599
right now that no services right now if

01:05:52,079 --> 01:05:55,839
i to cube control get

01:05:53,599 --> 01:05:56,720
all you'll see that we have the

01:05:55,839 --> 01:05:59,359
deployment

01:05:56,720 --> 01:06:00,640
the replica set and the pod let's

01:05:59,359 --> 01:06:02,720
actually kind of look at these things a

01:06:00,640 --> 01:06:04,720
little bit let's do a cube control

01:06:02,720 --> 01:06:06,640
edit remember that edit trick i told you

01:06:04,720 --> 01:06:09,980
here what's up

01:06:06,640 --> 01:06:11,119
uh echo cube editor

01:06:09,980 --> 01:06:14,400
[Music]

01:06:11,119 --> 01:06:18,799
so uh let's go cube control edit

01:06:14,400 --> 01:06:21,119
and the deployment my app

01:06:18,799 --> 01:06:22,079
let's see if that'll work for me there

01:06:21,119 --> 01:06:25,039
we go

01:06:22,079 --> 01:06:26,000
so now i'm editing that document so what

01:06:25,039 --> 01:06:28,720
i just did

01:06:26,000 --> 01:06:30,240
was i went to the api i pulled the

01:06:28,720 --> 01:06:32,480
document out of ncd

01:06:30,240 --> 01:06:34,640
back to my visual studio code here and

01:06:32,480 --> 01:06:37,599
now i can make changes to the document

01:06:34,640 --> 01:06:38,880
okay so this is just the yaml file which

01:06:37,599 --> 01:06:41,280
represents the live

01:06:38,880 --> 01:06:42,880
running beast running in my environment

01:06:41,280 --> 01:06:44,559
so i can make changes to it so remember

01:06:42,880 --> 01:06:45,359
as i said earlier there was this pod

01:06:44,559 --> 01:06:47,200
template

01:06:45,359 --> 01:06:48,640
so all this got created automatically

01:06:47,200 --> 01:06:49,839
for us when we just did that one create

01:06:48,640 --> 01:06:51,200
deployment command

01:06:49,839 --> 01:06:53,599
it basically decided okay here's the

01:06:51,200 --> 01:06:55,760
container image and it should it pull it

01:06:53,599 --> 01:06:57,440
if it's not present so do pull it right

01:06:55,760 --> 01:06:59,440
if it's not already on this cluster as

01:06:57,440 --> 01:07:01,599
an example or on this node

01:06:59,440 --> 01:07:03,200
specifically it has a rolling update

01:07:01,599 --> 01:07:05,119
support you know max surge

01:07:03,200 --> 01:07:06,319
maximum available these are all fairly

01:07:05,119 --> 01:07:07,039
advanced things so let's kind of ignore

01:07:06,319 --> 01:07:08,480
that for now

01:07:07,039 --> 01:07:11,280
what i'm simply going to show you is if

01:07:08,480 --> 01:07:14,319
i make this replicas 3

01:07:11,280 --> 01:07:16,079
hit save and close

01:07:14,319 --> 01:07:19,039
you'll notice there's now two more

01:07:16,079 --> 01:07:21,440
replicas of that pod come to life

01:07:19,039 --> 01:07:23,200
there's now three of those applications

01:07:21,440 --> 01:07:24,799
running on this machine

01:07:23,200 --> 01:07:26,720
okay so if i want to come in here and

01:07:24,799 --> 01:07:29,359
say cube control exec

01:07:26,720 --> 01:07:31,280
i t and i want to go into this one this

01:07:29,359 --> 01:07:34,960
is the one at the top of the list there

01:07:31,280 --> 01:07:38,559
i say curl localhost 8080.

01:07:34,960 --> 01:07:41,599
okay see it basically provides its pod

01:07:38,559 --> 01:07:43,039
name and this numeral four that is just

01:07:41,599 --> 01:07:44,960
an instance variable to let me know that

01:07:43,039 --> 01:07:46,480
that process is stayed up so every time

01:07:44,960 --> 01:07:49,039
you hit it gives you a new number

01:07:46,480 --> 01:07:50,000
same example but if i exit out of here

01:07:49,039 --> 01:07:53,039
and let's say i

01:07:50,000 --> 01:07:56,559
bust over to this guy q control

01:07:53,039 --> 01:07:59,839
exit exec it

01:07:56,559 --> 01:08:03,440
dash dash bin bash

01:07:59,839 --> 01:08:05,039
all right curl local host 8080

01:08:03,440 --> 01:08:06,559
and there it is that's number one so

01:08:05,039 --> 01:08:08,720
notice these numbers are different

01:08:06,559 --> 01:08:10,400
and these pod identifiers are different

01:08:08,720 --> 01:08:11,680
this is nothing more than the host name

01:08:10,400 --> 01:08:13,440
so if you're familiar with

01:08:11,680 --> 01:08:15,359
the environment variable called hostname

01:08:13,440 --> 01:08:16,480
and your node.js code python code java

01:08:15,359 --> 01:08:18,560
code

01:08:16,480 --> 01:08:19,600
basically this code thinks its host is

01:08:18,560 --> 01:08:22,480
that pod

01:08:19,600 --> 01:08:23,600
okay the computer i'm running on is this

01:08:22,480 --> 01:08:25,279
one right here

01:08:23,600 --> 01:08:27,040
so you you kind of have to get your head

01:08:25,279 --> 01:08:28,159
around that the pod is essentially the

01:08:27,040 --> 01:08:29,839
code's computer

01:08:28,159 --> 01:08:31,520
the code is unaware it's running as a

01:08:29,839 --> 01:08:33,120
pod the code is unaware

01:08:31,520 --> 01:08:34,560
it's running in this highly virtualized

01:08:33,120 --> 01:08:37,120
crazy kubernetes world

01:08:34,560 --> 01:08:39,199
it just knows it's running okay and its

01:08:37,120 --> 01:08:41,359
host is that pod

01:08:39,199 --> 01:08:42,560
so that's what we have when it comes to

01:08:41,359 --> 01:08:43,359
those three pods and that's what the

01:08:42,560 --> 01:08:46,640
replica set

01:08:43,359 --> 01:08:48,719
concept does so if i say cube ctl get rs

01:08:46,640 --> 01:08:49,679
you'll see we have a desired three a

01:08:48,719 --> 01:08:51,600
current three

01:08:49,679 --> 01:08:53,120
so the replica sets job is to make sure

01:08:51,600 --> 01:08:56,319
that if you say replicas 3

01:08:53,120 --> 01:08:57,520
10 30 1 whatever number you give it its

01:08:56,319 --> 01:08:59,440
job is to make sure those

01:08:57,520 --> 01:09:01,920
pods are up and running and then we have

01:08:59,440 --> 01:09:03,679
the deployment

01:09:01,920 --> 01:09:05,679
and then the deployment includes the pod

01:09:03,679 --> 01:09:06,560
template and everything else you need to

01:09:05,679 --> 01:09:09,520
basically

01:09:06,560 --> 01:09:10,880
govern that pod that we want to run okay

01:09:09,520 --> 01:09:11,839
so those are those are the objects you

01:09:10,880 --> 01:09:13,839
deal with a lot

01:09:11,839 --> 01:09:16,239
and the concept of the service so let's

01:09:13,839 --> 01:09:18,719
go back into our our tutorial here

01:09:16,239 --> 01:09:20,400
because we should have setting up the

01:09:18,719 --> 01:09:22,480
service coming up soon

01:09:20,400 --> 01:09:24,239
okay so here's the fastest way to set up

01:09:22,480 --> 01:09:25,279
the service i'm going to just copy that

01:09:24,239 --> 01:09:28,880
one

01:09:25,279 --> 01:09:32,640
paste it in okay

01:09:28,880 --> 01:09:34,239
now i say cube ctl get services

01:09:32,640 --> 01:09:36,719
and so this now this one's a little bit

01:09:34,239 --> 01:09:39,679
tricky depending on the kubernetes

01:09:36,719 --> 01:09:39,679
cluster you're dealing with

01:09:40,000 --> 01:09:45,440
uh watch cube cto get services

01:09:43,600 --> 01:09:48,159
when you say type load balancer like we

01:09:45,440 --> 01:09:51,279
did there you may see an external ip

01:09:48,159 --> 01:09:53,679
show up but it would take some time

01:09:51,279 --> 01:09:54,640
okay it may take some time so depending

01:09:53,679 --> 01:09:58,320
on if it's google

01:09:54,640 --> 01:09:59,840
gke if it's aks eks if it's open shift

01:09:58,320 --> 01:10:01,120
running in those three public clouds you

01:09:59,840 --> 01:10:01,840
know openshift runs across all those

01:10:01,120 --> 01:10:03,920
clouds

01:10:01,840 --> 01:10:05,520
then you would get an ip address

01:10:03,920 --> 01:10:06,960
eventually it takes time

01:10:05,520 --> 01:10:08,400
and it actually then takes longer for it

01:10:06,960 --> 01:10:10,159
to resolve right so you might have to

01:10:08,400 --> 01:10:12,080
wait a few minutes to get this to

01:10:10,159 --> 01:10:13,199
go from pending to the iep address in

01:10:12,080 --> 01:10:15,679
the case of minicube

01:10:13,199 --> 01:10:17,199
it pretty much always says pending okay

01:10:15,679 --> 01:10:18,560
so like you see here this pending won't

01:10:17,199 --> 01:10:19,440
change no matter how long we sit are

01:10:18,560 --> 01:10:21,040
looking at it

01:10:19,440 --> 01:10:22,480
in the case of minicube it gives us this

01:10:21,040 --> 01:10:25,520
thing called a node port

01:10:22,480 --> 01:10:28,320
so you see this 32536 here

01:10:25,520 --> 01:10:30,960
that is the node port exposed from that

01:10:28,320 --> 01:10:34,080
node the single node that we have here

01:10:30,960 --> 01:10:36,320
all right the single node we have here

01:10:34,080 --> 01:10:37,760
available to the host so the host in

01:10:36,320 --> 01:10:39,040
this case my mac

01:10:37,760 --> 01:10:41,600
is going to be able to see this thing at

01:10:39,040 --> 01:10:44,880
mini cube ip

01:10:41,600 --> 01:10:45,920
and then that node port so i can say

01:10:44,880 --> 01:10:49,199
curl

01:10:45,920 --> 01:10:52,800
192 168

01:10:49,199 --> 01:10:55,840
99 132 colon

01:10:52,800 --> 01:10:57,600
32 536

01:10:55,840 --> 01:10:59,600
and there we go so i'm now talking that

01:10:57,600 --> 01:11:01,199
application now look what's happening

01:10:59,600 --> 01:11:03,679
here

01:11:01,199 --> 01:11:04,960
look at the load balancing from this one

01:11:03,679 --> 01:11:05,920
right here which is that guy in the

01:11:04,960 --> 01:11:08,960
middle

01:11:05,920 --> 01:11:12,880
to this one the zj x5p

01:11:08,960 --> 01:11:16,320
that's that one to this one right here

01:11:12,880 --> 01:11:18,880
the rdz vj right there

01:11:16,320 --> 01:11:20,400
so the load balancing is built into the

01:11:18,880 --> 01:11:22,640
service construct

01:11:20,400 --> 01:11:23,520
okay the service is a load balancer

01:11:22,640 --> 01:11:24,880
built right in

01:11:23,520 --> 01:11:28,000
and now i have that load balancer

01:11:24,880 --> 01:11:30,000
working across those three pods

01:11:28,000 --> 01:11:31,440
and this is kind of awesome okay so you

01:11:30,000 --> 01:11:32,239
notice my curl command just keeps on

01:11:31,440 --> 01:11:33,920
working

01:11:32,239 --> 01:11:37,440
as a matter of fact let's copy and paste

01:11:33,920 --> 01:11:37,440
it and do something fun with it here

01:11:37,679 --> 01:11:40,800
all right so i'm going to say wild true

01:11:40,239 --> 01:11:44,159
do

01:11:40,800 --> 01:11:46,159
curl uh sleep for a little bit

01:11:44,159 --> 01:11:47,679
done let it go and just pull there we go

01:11:46,159 --> 01:11:50,080
so now it's cooking along

01:11:47,679 --> 01:11:51,600
bouncing up against those three pods and

01:11:50,080 --> 01:11:53,040
if you notice by the way i use three

01:11:51,600 --> 01:11:55,360
different windows because i like

01:11:53,040 --> 01:11:56,640
doing this sort of demonstration but

01:11:55,360 --> 01:11:57,120
they're all configured the same way i

01:11:56,640 --> 01:11:59,600
have an

01:11:57,120 --> 01:12:01,600
i have a script that basically you know

01:11:59,600 --> 01:12:02,239
ensures that my cube config is set the

01:12:01,600 --> 01:12:05,760
same

01:12:02,239 --> 01:12:08,800
so cube ctl config view

01:12:05,760 --> 01:12:10,560
i can do an echo cube config right that

01:12:08,800 --> 01:12:13,520
tells me they're all configured the same

01:12:10,560 --> 01:12:15,040
cube cdl get nodes so i like i like

01:12:13,520 --> 01:12:16,560
working this way

01:12:15,040 --> 01:12:17,760
so my three they're three different

01:12:16,560 --> 01:12:19,199
terminals but they're basically

01:12:17,760 --> 01:12:21,040
configured with the same environment so

01:12:19,199 --> 01:12:25,120
i can kind of bounce back and forth

01:12:21,040 --> 01:12:28,480
but let me go cube ctl get deployments

01:12:25,120 --> 01:12:31,440
cube control edit deployment

01:12:28,480 --> 01:12:34,000
my app that's going to bring up visual

01:12:31,440 --> 01:12:37,520
studio code

01:12:34,000 --> 01:12:40,640
and let me come down here to replicas

01:12:37,520 --> 01:12:43,920
way down here let's make it two now

01:12:40,640 --> 01:12:45,120
save and close and you'll see that one

01:12:43,920 --> 01:12:47,679
gets killed

01:12:45,120 --> 01:12:49,840
because i only want replicas equal to

01:12:47,679 --> 01:12:52,159
therefore if i say cube ct ctl get

01:12:49,840 --> 01:12:53,440
rs you can see it's desired too it's

01:12:52,159 --> 01:12:55,120
making two happen

01:12:53,440 --> 01:12:57,040
one of the one of the previous ones is

01:12:55,120 --> 01:12:58,800
going away it's gone but notice my load

01:12:57,040 --> 01:13:01,199
balancer didn't have a problem at all

01:12:58,800 --> 01:13:02,719
right it just bounced around that issue

01:13:01,199 --> 01:13:05,920
it basically did not care

01:13:02,719 --> 01:13:08,400
so if i add more okay let me do this one

01:13:05,920 --> 01:13:08,400
more time

01:13:09,120 --> 01:13:14,400
let me come here replicas

01:13:12,800 --> 01:13:16,080
let's make it five let's say i want five

01:13:14,400 --> 01:13:19,600
of these little guys running

01:13:16,080 --> 01:13:20,560
save and close you'll see a bunch of

01:13:19,600 --> 01:13:22,000
coming up here

01:13:20,560 --> 01:13:24,080
and you might see an error message let's

01:13:22,000 --> 01:13:25,440
see if we see it okay no it's not it's

01:13:24,080 --> 01:13:26,719
not going to give us an error message

01:13:25,440 --> 01:13:28,320
but there's something we'll teach you a

01:13:26,719 --> 01:13:29,520
little bit later as we get to some more

01:13:28,320 --> 01:13:31,199
advanced concepts

01:13:29,520 --> 01:13:32,560
but you notice those new pods came to

01:13:31,199 --> 01:13:33,600
life you can kind of see they started

01:13:32,560 --> 01:13:35,440
over at one

01:13:33,600 --> 01:13:37,120
uh here i'll stop this from scrolling so

01:13:35,440 --> 01:13:38,520
fast but you can kind of see there's the

01:13:37,120 --> 01:13:41,120
h8

01:13:38,520 --> 01:13:42,719
h8tgr that system right here it's only

01:13:41,120 --> 01:13:46,239
22 seconds old

01:13:42,719 --> 01:13:47,679
here's the wwrdwb

01:13:46,239 --> 01:13:49,840
right that's this one right here 28

01:13:47,679 --> 01:13:51,920
seconds old here you know you'll see the

01:13:49,840 --> 01:13:53,920
older one here the rdz

01:13:51,920 --> 01:13:54,960
vj that one's been around a while so

01:13:53,920 --> 01:13:55,760
it's a little counter is a little bit

01:13:54,960 --> 01:13:57,600
higher

01:13:55,760 --> 01:13:59,679
so that concept right of that load

01:13:57,600 --> 01:14:01,600
balancer that service working across

01:13:59,679 --> 01:14:03,120
those different components is incredibly

01:14:01,600 --> 01:14:05,120
powerful right and again you get the

01:14:03,120 --> 01:14:06,560
round robin load balancing for free

01:14:05,120 --> 01:14:08,640
okay out of the box when it comes to

01:14:06,560 --> 01:14:09,760
kubernetes and that alone might be worth

01:14:08,640 --> 01:14:11,040
the price of admission

01:14:09,760 --> 01:14:13,120
if you've never had a configure load

01:14:11,040 --> 01:14:14,719
balancer before it can be very painful

01:14:13,120 --> 01:14:16,560
if you ever had to buy a load balancer

01:14:14,719 --> 01:14:17,920
before it can be very expensive

01:14:16,560 --> 01:14:20,000
and so this gives you something that

01:14:17,920 --> 01:14:21,280
gives you a load balancer out of the box

01:14:20,000 --> 01:14:22,159
and now you can try some really fun

01:14:21,280 --> 01:14:24,960
stuff there

01:14:22,159 --> 01:14:26,719
okay now in the case of minicube we show

01:14:24,960 --> 01:14:27,520
you how to set up that ip address you

01:14:26,719 --> 01:14:29,280
saw me do it

01:14:27,520 --> 01:14:31,360
manually but you can configure it this

01:14:29,280 --> 01:14:33,600
way so mini cube ip

01:14:31,360 --> 01:14:35,199
and then you can go into the grab the

01:14:33,600 --> 01:14:36,719
node port there

01:14:35,199 --> 01:14:39,679
so you'll see this little command that's

01:14:36,719 --> 01:14:42,800
actually very powerful not only can you

01:14:39,679 --> 01:14:46,159
get something okay

01:14:42,800 --> 01:14:49,040
cube cto get pods i can also

01:14:46,159 --> 01:14:50,080
get a single object like get the service

01:14:49,040 --> 01:14:51,280
my app here

01:14:50,080 --> 01:14:53,280
and i can take out the slash if that

01:14:51,280 --> 01:14:55,280
makes a little easier read okay

01:14:53,280 --> 01:14:58,000
and then i can say pump it through this

01:14:55,280 --> 01:14:59,679
json path and rip out its node port

01:14:58,000 --> 01:15:02,320
so this is a very powerful concept of

01:14:59,679 --> 01:15:04,159
the api you can rip out parts

01:15:02,320 --> 01:15:05,360
of things so if i say cube ctl get

01:15:04,159 --> 01:15:08,640
service

01:15:05,360 --> 01:15:10,480
my app oh json

01:15:08,640 --> 01:15:12,320
you get the json version of that

01:15:10,480 --> 01:15:14,560
document over an fcd

01:15:12,320 --> 01:15:16,239
pulled back to you you can also say i

01:15:14,560 --> 01:15:18,000
want the yaml version

01:15:16,239 --> 01:15:19,840
and there's the ammo version but the

01:15:18,000 --> 01:15:21,520
json version is kind of nice because you

01:15:19,840 --> 01:15:25,840
can then parse it

01:15:21,520 --> 01:15:29,199
okay you can then go to jsonpath.com or

01:15:25,840 --> 01:15:32,080
or whatever it is uh let's see here uh

01:15:29,199 --> 01:15:32,800
github jsonpath.com and then you can do

01:15:32,080 --> 01:15:35,360
some stuff here

01:15:32,800 --> 01:15:36,800
all right you can go fool around with

01:15:35,360 --> 01:15:38,560
that json

01:15:36,800 --> 01:15:39,840
and figure out exactly how to rip out a

01:15:38,560 --> 01:15:44,480
piece of that

01:15:39,840 --> 01:15:47,600
of that api that document okay let's see

01:15:44,480 --> 01:15:48,560
has engineering come up with an mta mta

01:15:47,600 --> 01:15:50,239
that does not

01:15:48,560 --> 01:15:53,280
aliase your java code to a port and

01:15:50,239 --> 01:15:56,080
corkish an mta does not enlist your java

01:15:53,280 --> 01:15:56,080
code to a port

01:15:56,719 --> 01:16:05,520
i don't quite know what you mean by mta

01:16:01,199 --> 01:16:07,280
james so on your questionnaire so

01:16:05,520 --> 01:16:08,800
mta but for some reason i'm drawing a

01:16:07,280 --> 01:16:12,159
blank on that acronym

01:16:08,800 --> 01:16:13,360
but the i mean if your java code opens a

01:16:12,159 --> 01:16:16,880
port

01:16:13,360 --> 01:16:18,400
that's the port okay so you know if you

01:16:16,880 --> 01:16:20,320
think about if you don't open a port you

01:16:18,400 --> 01:16:21,440
can't listen to transactions coming from

01:16:20,320 --> 01:16:23,280
the outside world

01:16:21,440 --> 01:16:24,880
right the port is basically your network

01:16:23,280 --> 01:16:26,320
interface you know the

01:16:24,880 --> 01:16:28,400
the thing you're going to listen on

01:16:26,320 --> 01:16:30,239
right that's your port

01:16:28,400 --> 01:16:32,719
okay and this node port is what we

01:16:30,239 --> 01:16:35,120
opened up and then made it available

01:16:32,719 --> 01:16:36,159
so all this stuff is part of the

01:16:35,120 --> 01:16:38,640
equation here

01:16:36,159 --> 01:16:39,840
let me see here there we go and you can

01:16:38,640 --> 01:16:41,760
kind of see what we did

01:16:39,840 --> 01:16:43,600
now we uh we've modified the replicas

01:16:41,760 --> 01:16:45,199
but we did that by using the edit trick

01:16:43,600 --> 01:16:47,520
you could also do it by the command line

01:16:45,199 --> 01:16:50,080
here oh this is fun

01:16:47,520 --> 01:16:51,600
basically let's change the image so one

01:16:50,080 --> 01:16:55,600
thing that's super awesome here is you

01:16:51,600 --> 01:16:55,600
can also change the image on the fly

01:16:56,480 --> 01:17:00,800
there we go let me get my curl going

01:16:57,760 --> 01:17:02,719
again and let me come over here and

01:17:00,800 --> 01:17:03,840
edit my deployment again let's kind of

01:17:02,719 --> 01:17:07,280
make this more

01:17:03,840 --> 01:17:07,280
sane instead of five of those

01:17:08,159 --> 01:17:11,600
all right come on let's get down to

01:17:10,239 --> 01:17:13,450
three again

01:17:11,600 --> 01:17:14,880
so three and save

01:17:13,450 --> 01:17:16,960
[Music]

01:17:14,880 --> 01:17:18,719
all right there we go so two are

01:17:16,960 --> 01:17:20,640
terminating three are running

01:17:18,719 --> 01:17:22,080
again the load balancer is happy but

01:17:20,640 --> 01:17:23,199
watch this

01:17:22,080 --> 01:17:25,040
we're gonna what we're gonna do is we're

01:17:23,199 --> 01:17:26,480
gonna change the image out from

01:17:25,040 --> 01:17:29,360
underneath that deployment

01:17:26,480 --> 01:17:30,239
and again that represents the uh pod

01:17:29,360 --> 01:17:32,080
template

01:17:30,239 --> 01:17:34,400
okay we're gonna change it to a

01:17:32,080 --> 01:17:35,840
different image completely which is a

01:17:34,400 --> 01:17:37,440
spring boot image

01:17:35,840 --> 01:17:39,440
and watch what happens here this is

01:17:37,440 --> 01:17:41,440
actually very important this is the

01:17:39,440 --> 01:17:43,199
magic that kubernetes offer to the world

01:17:41,440 --> 01:17:45,360
that blew people's minds

01:17:43,199 --> 01:17:47,360
so you're going to do a rolling update

01:17:45,360 --> 01:17:50,800
here and right now if we do

01:17:47,360 --> 01:17:52,960
if we do watch q control get events

01:17:50,800 --> 01:17:55,520
it's actually pulling that image okay so

01:17:52,960 --> 01:17:56,719
it's still once it gets it pulled

01:17:55,520 --> 01:17:58,480
okay so it's going to be going through

01:17:56,719 --> 01:18:00,239
and pulling that image once it gets

01:17:58,480 --> 01:18:01,920
pulled it's going to launch it

01:18:00,239 --> 01:18:03,679
once it launches it it's going to throw

01:18:01,920 --> 01:18:05,760
it into the load balance automatically

01:18:03,679 --> 01:18:07,120
see container creating here that means

01:18:05,760 --> 01:18:08,719
it's still pulling

01:18:07,120 --> 01:18:10,159
that pretty much what that means pulling

01:18:08,719 --> 01:18:11,679
pulling pulling

01:18:10,159 --> 01:18:13,280
depending on the speed of your internet

01:18:11,679 --> 01:18:14,960
connection the speed of the remote

01:18:13,280 --> 01:18:16,159
repository across the internet

01:18:14,960 --> 01:18:18,000
you know you might be pulling for a

01:18:16,159 --> 01:18:19,040
little while also depends on how big

01:18:18,000 --> 01:18:20,719
that image is

01:18:19,040 --> 01:18:22,560
smaller images pull faster than big

01:18:20,719 --> 01:18:25,120
images i think that makes sense

01:18:22,560 --> 01:18:26,000
and look what happened there okay it

01:18:25,120 --> 01:18:28,880
basically is

01:18:26,000 --> 01:18:29,760
rolling updating now all those all those

01:18:28,880 --> 01:18:31,760
guys

01:18:29,760 --> 01:18:33,280
from the quarkus application to the

01:18:31,760 --> 01:18:35,120
spring boot application you guys see

01:18:33,280 --> 01:18:38,239
that

01:18:35,120 --> 01:18:42,560
mta might stand for mail transport agent

01:18:38,239 --> 01:18:44,239
could be i don't know uh let's see

01:18:42,560 --> 01:18:46,239
mail transport agent so everyone thinks

01:18:44,239 --> 01:18:50,000
it's mail transport agent james

01:18:46,239 --> 01:18:52,880
mta oh you mean the migration

01:18:50,000 --> 01:18:54,800
tool kit ah okay yeah so on the

01:18:52,880 --> 01:18:57,040
migration toolkit i've not looked to see

01:18:54,800 --> 01:18:58,640
exactly how it does port analysis

01:18:57,040 --> 01:19:00,560
uh so james was asking about the

01:18:58,640 --> 01:19:02,800
migration toolkit not the

01:19:00,560 --> 01:19:03,760
my not the mail transfer agent so

01:19:02,800 --> 01:19:06,800
migration

01:19:03,760 --> 01:19:08,560
toolkit for applications

01:19:06,800 --> 01:19:09,920
this is a tool you can use to analyze

01:19:08,560 --> 01:19:12,400
your applications

01:19:09,920 --> 01:19:13,440
and then decide if they are ready for

01:19:12,400 --> 01:19:15,679
kubernetes or not

01:19:13,440 --> 01:19:17,840
that's kind of the idea metropolitan

01:19:15,679 --> 01:19:19,840
transfer yeah that's a good one summer

01:19:17,840 --> 01:19:21,679
yep the metropolitan transport authority

01:19:19,840 --> 01:19:22,960
i like that one but this is what james

01:19:21,679 --> 01:19:24,480
was talking about and i've not looked to

01:19:22,960 --> 01:19:25,920
see if it handles ports

01:19:24,480 --> 01:19:28,000
correctly or incorrectly or anything

01:19:25,920 --> 01:19:29,199
like that right its job is primarily to

01:19:28,000 --> 01:19:32,719
look at your application

01:19:29,199 --> 01:19:34,159
to see how if it's kubernetes ready or

01:19:32,719 --> 01:19:36,480
help to get it kubernetes ready as an

01:19:34,159 --> 01:19:39,920
example make it openship ready

01:19:36,480 --> 01:19:41,440
okay all right so what but you guys saw

01:19:39,920 --> 01:19:43,679
what happened here in this failure

01:19:41,440 --> 01:19:45,679
okay notice by the way it's all good now

01:19:43,679 --> 01:19:47,840
it says aloha spring boot

01:19:45,679 --> 01:19:49,760
but let's try this again okay let's

01:19:47,840 --> 01:19:51,040
actually run this

01:19:49,760 --> 01:19:53,199
set image one more time i'm going to go

01:19:51,040 --> 01:19:54,560
to the v2 now v2

01:19:53,199 --> 01:19:56,560
you're going to see it do all its

01:19:54,560 --> 01:19:57,520
rolling update again it's going to pull

01:19:56,560 --> 01:19:59,760
the image

01:19:57,520 --> 01:20:01,760
so there it goes trying to pull giving

01:19:59,760 --> 01:20:03,920
us some errors

01:20:01,760 --> 01:20:05,360
trying trying notice the v2 image came

01:20:03,920 --> 01:20:08,320
down faster

01:20:05,360 --> 01:20:09,600
because v2 is based on v1 and by the way

01:20:08,320 --> 01:20:10,880
when we're doing these pulls it only

01:20:09,600 --> 01:20:12,880
pulls the delta

01:20:10,880 --> 01:20:14,000
the diff if you will so the v2 image

01:20:12,880 --> 01:20:16,320
came along faster

01:20:14,000 --> 01:20:19,840
but look we still got errors okay we

01:20:16,320 --> 01:20:19,840
went from

01:21:11,920 --> 01:21:15,600
hold tight everyone i think we just lost

01:21:13,840 --> 01:21:17,840
burr he should probably be rejoining

01:21:15,600 --> 01:21:17,840
here

01:21:26,840 --> 01:21:29,840
shortly

01:22:27,840 --> 01:22:31,360
all right come on come on come on

01:22:32,320 --> 01:22:34,639
open

01:22:35,920 --> 01:22:41,360
or this is like a new uh an updated

01:22:39,120 --> 01:22:41,360
window

01:22:46,320 --> 01:22:50,080
let's see let's see we had a network

01:22:47,840 --> 01:22:50,080
issue

01:22:50,400 --> 01:22:53,840
always makes it fun

01:22:54,480 --> 01:23:00,639
where's our chat let's go here

01:22:57,679 --> 01:23:01,520
i wonder if i got you a burr here yeah i

01:23:00,639 --> 01:23:03,199
figured you lost

01:23:01,520 --> 01:23:04,719
lost your connection there so everybody

01:23:03,199 --> 01:23:08,000
stand by okay

01:23:04,719 --> 01:23:09,760
here we come back the

01:23:08,000 --> 01:23:11,679
it is kind of funny right the the

01:23:09,760 --> 01:23:15,280
network just died here

01:23:11,679 --> 01:23:16,960
yeah okay but it came back online

01:23:15,280 --> 01:23:19,199
let's see here let me open up the little

01:23:16,960 --> 01:23:22,239
tabs again

01:23:19,199 --> 01:23:23,679
zoom's coming back up where did the q a

01:23:22,239 --> 01:23:25,199
section go okay here it is

01:23:23,679 --> 01:23:27,040
okay all right all right you guys all

01:23:25,199 --> 01:23:29,760
right we're back

01:23:27,040 --> 01:23:29,760
uh right

01:23:30,080 --> 01:23:33,199
and then still all right

01:23:33,520 --> 01:23:36,560
turn it off and on again often with your

01:23:36,000 --> 01:23:38,400
router

01:23:36,560 --> 01:23:40,159
that is the best plan of action by the

01:23:38,400 --> 01:23:41,600
way so john you know if you got

01:23:40,159 --> 01:23:42,800
sometimes bouncing that router is the

01:23:41,600 --> 01:23:45,120
right way to go

01:23:42,800 --> 01:23:47,280
okay let's see here what we were going

01:23:45,120 --> 01:23:49,199
to show you was that rolling update

01:23:47,280 --> 01:23:50,560
with the quercus image where to go it's

01:23:49,199 --> 01:23:52,320
way back here and i've forgotten it

01:23:50,560 --> 01:23:55,840
already so quark is demo

01:23:52,320 --> 01:23:58,400
v1 come back here

01:23:55,840 --> 01:23:59,360
and let's set that well not there set it

01:23:58,400 --> 01:24:00,639
here

01:23:59,360 --> 01:24:02,480
and we're going to switch it over to the

01:24:00,639 --> 01:24:03,199
quarkus image again it's going to do its

01:24:02,480 --> 01:24:05,520
rolling update

01:24:03,199 --> 01:24:06,400
that's what we want to show you all

01:24:05,520 --> 01:24:08,480
right

01:24:06,400 --> 01:24:09,920
notice that with quarkus it flips right

01:24:08,480 --> 01:24:11,760
over without error

01:24:09,920 --> 01:24:13,520
and it's purely based on the speed

01:24:11,760 --> 01:24:14,960
quarkx is a java application but it's

01:24:13,520 --> 01:24:17,520
insanely fast

01:24:14,960 --> 01:24:18,800
and so therefore it spins it flips right

01:24:17,520 --> 01:24:20,320
over without a problem

01:24:18,800 --> 01:24:23,600
while when we use these spring boot ones

01:24:20,320 --> 01:24:25,280
which are more typical java based apps

01:24:23,600 --> 01:24:26,960
you know that slow enough to start that

01:24:25,280 --> 01:24:28,400
you actually see an error like if i go

01:24:26,960 --> 01:24:29,120
back to spring boot here you'll see an

01:24:28,400 --> 01:24:32,159
error

01:24:29,120 --> 01:24:32,880
so just keep that in mind okay let's

01:24:32,159 --> 01:24:34,320
keep that in mind

01:24:32,880 --> 01:24:35,920
that you basically have this thing

01:24:34,320 --> 01:24:37,679
called a liveness probe and readiness

01:24:35,920 --> 01:24:40,080
probe which are not yet set

01:24:37,679 --> 01:24:41,120
that will help you deal with that outage

01:24:40,080 --> 01:24:42,000
right there because you don't want a

01:24:41,120 --> 01:24:44,000
production outage

01:24:42,000 --> 01:24:46,239
your users will see that outage and go

01:24:44,000 --> 01:24:46,719
hey there they'll file a ticket they'll

01:24:46,239 --> 01:24:49,040
tweet

01:24:46,719 --> 01:24:50,400
that the your system and api is down and

01:24:49,040 --> 01:24:52,719
that's what you don't want

01:24:50,400 --> 01:24:54,480
okay all right so let me see we did we

01:24:52,719 --> 01:24:57,520
cover all the important things here

01:24:54,480 --> 01:25:00,320
i think we did uh let the scale replica

01:24:57,520 --> 01:25:01,440
set the image yeah all that good stuff

01:25:00,320 --> 01:25:04,480
and as a matter of fact

01:25:01,440 --> 01:25:05,760
let me come over here and i'm going to

01:25:04,480 --> 01:25:07,280
basically just run this last set of

01:25:05,760 --> 01:25:08,800
cleanup commands here

01:25:07,280 --> 01:25:10,719
and we're going to delete the whole

01:25:08,800 --> 01:25:12,400
namespace my stuff

01:25:10,719 --> 01:25:14,400
and that by the way will terminate these

01:25:12,400 --> 01:25:15,760
three pods and wipe it all out just like

01:25:14,400 --> 01:25:17,920
if you delete a directory

01:25:15,760 --> 01:25:19,520
it deletes the files in that directory

01:25:17,920 --> 01:25:20,480
same kind of concept here it'll wipe out

01:25:19,520 --> 01:25:23,920
those pods

01:25:20,480 --> 01:25:28,960
you'll notice also the deployment

01:25:23,920 --> 01:25:32,560
that we had earlier is gone the service

01:25:28,960 --> 01:25:34,080
is gone the replica set is gone

01:25:32,560 --> 01:25:35,440
and i'm not gonna wait for that delete

01:25:34,080 --> 01:25:35,920
to happen but if even if i'm trying to

01:25:35,440 --> 01:25:39,120
curl

01:25:35,920 --> 01:25:40,639
it's all gone okay everything's killed

01:25:39,120 --> 01:25:42,320
and all it's waiting right for right now

01:25:40,639 --> 01:25:43,199
is for those processes to properly shut

01:25:42,320 --> 01:25:44,719
down

01:25:43,199 --> 01:25:46,880
and then of course the whole name space

01:25:44,719 --> 01:25:49,920
goes away okay

01:25:46,880 --> 01:25:51,360
name spaces so it is still here right

01:25:49,920 --> 01:25:52,800
now we can see it's in terminating

01:25:51,360 --> 01:25:55,679
status because i did kill it

01:25:52,800 --> 01:25:56,400
and it will eventually clean that up

01:25:55,679 --> 01:25:59,360
okay

01:25:56,400 --> 01:26:00,080
all right so this is basically what we

01:25:59,360 --> 01:26:02,480
just did here

01:26:00,080 --> 01:26:03,760
we did the cube control area and we kind

01:26:02,480 --> 01:26:05,120
of walked you through that and if you

01:26:03,760 --> 01:26:05,679
just get through this portion of it

01:26:05,120 --> 01:26:08,159
today

01:26:05,679 --> 01:26:09,679
okay this already is a massive win you

01:26:08,159 --> 01:26:11,840
got your mini cube running

01:26:09,679 --> 01:26:13,679
you deployed your first app you've seen

01:26:11,840 --> 01:26:15,120
the real magic of kubernetes which is

01:26:13,679 --> 01:26:16,639
this concept of the service

01:26:15,120 --> 01:26:18,000
and this ability to do load balancing

01:26:16,639 --> 01:26:19,120
across that service and then do the

01:26:18,000 --> 01:26:21,040
rolling updates

01:26:19,120 --> 01:26:22,639
your rolling update is imperfect right

01:26:21,040 --> 01:26:23,760
you're getting errors with the rolling

01:26:22,639 --> 01:26:25,360
update but that's okay

01:26:23,760 --> 01:26:26,960
we show you how to clean that up as we

01:26:25,360 --> 01:26:29,360
go throughout this course

01:26:26,960 --> 01:26:30,560
but that is the magic of kubernetes all

01:26:29,360 --> 01:26:31,840
right and you've seen the pod you've

01:26:30,560 --> 01:26:32,960
seen the replica set in deployment

01:26:31,840 --> 01:26:34,239
you've seen the service

01:26:32,960 --> 01:26:36,400
we haven't got the persistent volumes

01:26:34,239 --> 01:26:37,679
that comes later and technically you saw

01:26:36,400 --> 01:26:38,880
labels we just didn't mess around with

01:26:37,679 --> 01:26:41,040
it too much

01:26:38,880 --> 01:26:43,840
okay so let me double check that we're

01:26:41,040 --> 01:26:46,000
covering all the key ground here

01:26:43,840 --> 01:26:47,120
uh oh we we kind of hide a lot of this

01:26:46,000 --> 01:26:51,120
stuff right uh

01:26:47,120 --> 01:26:54,000
so let's see here the the

01:26:51,120 --> 01:26:55,840
okay uh yeah this is no this run command

01:26:54,000 --> 01:26:56,719
is now old and deprecated and as a

01:26:55,840 --> 01:26:58,639
matter of fact

01:26:56,719 --> 01:27:01,280
let me see if it will still even run for

01:26:58,639 --> 01:27:02,880
me uh cuban s

01:27:01,280 --> 01:27:05,600
cuban s default let me get to the

01:27:02,880 --> 01:27:08,400
default namespace

01:27:05,600 --> 01:27:10,080
okay it still seems to be working okay

01:27:08,400 --> 01:27:11,120
so at some point they were deprecating

01:27:10,080 --> 01:27:12,639
some of these commands

01:27:11,120 --> 01:27:14,719
but the create deployment command is the

01:27:12,639 --> 01:27:16,000
one you really want okay it looks like

01:27:14,719 --> 01:27:19,360
it came up there

01:27:16,000 --> 01:27:22,239
that is cool cube ctl get all

01:27:19,360 --> 01:27:24,400
and it gave me that pod okay so let me

01:27:22,239 --> 01:27:27,679
just delete that pod

01:27:24,400 --> 01:27:29,280
my boot there we go wipe it out but do

01:27:27,679 --> 01:27:30,480
you know look at these different things

01:27:29,280 --> 01:27:33,360
for the

01:27:30,480 --> 01:27:35,280
get name spaces get pods run create look

01:27:33,360 --> 01:27:37,520
at the logs cube control logs

01:27:35,280 --> 01:27:39,199
expose it as a service and then of

01:27:37,520 --> 01:27:40,480
course you can scale the replicas you

01:27:39,199 --> 01:27:42,560
can change the image that's basically

01:27:40,480 --> 01:27:44,960
what we showed you in that section

01:27:42,560 --> 01:27:46,320
okay and this is the magic this is the

01:27:44,960 --> 01:27:48,639
hard part uh

01:27:46,320 --> 01:27:49,679
of all these things and the rest of this

01:27:48,639 --> 01:27:50,960
by the way is just

01:27:49,679 --> 01:27:52,800
slides for you to have there's some free

01:27:50,960 --> 01:27:54,880
ebooks things like that but we're going

01:27:52,800 --> 01:27:57,600
to simply just walk through the tutorial

01:27:54,880 --> 01:27:59,600
together all right let's kind of drill

01:27:57,600 --> 01:28:01,360
down now into this pod replica set and

01:27:59,600 --> 01:28:02,639
deployment another level

01:28:01,360 --> 01:28:04,320
yeah it seems like we're going to repeat

01:28:02,639 --> 01:28:05,360
ourselves here a little bit and we are

01:28:04,320 --> 01:28:06,960
because we want to make sure you

01:28:05,360 --> 01:28:08,480
understand the concept here

01:28:06,960 --> 01:28:09,760
or at least have some experience with it

01:28:08,480 --> 01:28:10,719
to be comfortable with it because it's

01:28:09,760 --> 01:28:13,920
very important

01:28:10,719 --> 01:28:15,120
that your concept of the pod be the hole

01:28:13,920 --> 01:28:17,760
in your head

01:28:15,120 --> 01:28:19,120
not a hole in your head but whole as in

01:28:17,760 --> 01:28:20,880
together

01:28:19,120 --> 01:28:22,320
okay now here's one thing you can do you

01:28:20,880 --> 01:28:25,120
can actually have a piece of yaml

01:28:22,320 --> 01:28:26,880
file this is a yaml file where you

01:28:25,120 --> 01:28:28,960
declare a pod

01:28:26,880 --> 01:28:30,480
against a certain image i want a pod of

01:28:28,960 --> 01:28:32,400
this image as an example

01:28:30,480 --> 01:28:34,320
so you can actually on a bash shell a

01:28:32,400 --> 01:28:36,239
bash environment like your linux machine

01:28:34,320 --> 01:28:39,840
or mac you can copy that

01:28:36,239 --> 01:28:41,199
and come here and paste it in okay and

01:28:39,840 --> 01:28:42,080
you should see there it is it's coming

01:28:41,199 --> 01:28:44,960
to life

01:28:42,080 --> 01:28:46,880
and this is what's known as a naked pod

01:28:44,960 --> 01:28:48,320
if you notice there was no deployment no

01:28:46,880 --> 01:28:50,400
replica set

01:28:48,320 --> 01:28:51,679
a link to the presentation yep links to

01:28:50,400 --> 01:28:55,360
the presentation

01:28:51,679 --> 01:28:58,080
are this is this presentation here

01:28:55,360 --> 01:28:58,639
and this is uh the other ones we'll see

01:28:58,080 --> 01:29:01,679
a little bit

01:28:58,639 --> 01:29:03,600
later on this one

01:29:01,679 --> 01:29:04,960
and then if i also run this as another

01:29:03,600 --> 01:29:05,679
type of session called nine steps

01:29:04,960 --> 01:29:06,880
awesome

01:29:05,679 --> 01:29:08,880
you might see some slightly different

01:29:06,880 --> 01:29:11,600
slides here

01:29:08,880 --> 01:29:13,120
all that's all open source slideware and

01:29:11,600 --> 01:29:14,320
then of course we're in our tutorial

01:29:13,120 --> 01:29:17,520
document

01:29:14,320 --> 01:29:20,960
which is right here okay

01:29:17,520 --> 01:29:22,880
right there okay so what we've done is

01:29:20,960 --> 01:29:24,639
we've created what's called a naked pod

01:29:22,880 --> 01:29:26,239
this is a pod without a replica set and

01:29:24,639 --> 01:29:28,080
without a deployment remember a

01:29:26,239 --> 01:29:29,520
deployment creates a replica set replica

01:29:28,080 --> 01:29:31,760
set creates the pods

01:29:29,520 --> 01:29:33,440
and the reason that's that's cool okay

01:29:31,760 --> 01:29:34,800
so like i can come here and just do this

01:29:33,440 --> 01:29:38,159
exact command

01:29:34,800 --> 01:29:38,719
let me copy that paste it in all right

01:29:38,159 --> 01:29:40,159
it'll

01:29:38,719 --> 01:29:41,760
by the way that's a deprecated version

01:29:40,159 --> 01:29:44,080
it should be dash dash

01:29:41,760 --> 01:29:46,880
uh before the bin bash but i can say

01:29:44,080 --> 01:29:49,760
curl localhost

01:29:46,880 --> 01:29:50,400
8080. okay see i'm talking to it it's

01:29:49,760 --> 01:29:53,199
good

01:29:50,400 --> 01:29:53,679
but here's what's funny about it here's

01:29:53,199 --> 01:29:55,280
what's

01:29:53,679 --> 01:29:57,440
bad about a naked pod if i come over

01:29:55,280 --> 01:30:01,199
here and say cube ctl

01:29:57,440 --> 01:30:04,639
delete pod and the name of the pod

01:30:01,199 --> 01:30:06,719
the pod goes away okay so

01:30:04,639 --> 01:30:08,000
here's an aspect of self-healing that

01:30:06,719 --> 01:30:10,800
kubernetes has

01:30:08,000 --> 01:30:12,880
if you use a replica set in a deployment

01:30:10,800 --> 01:30:15,600
it will see that that pod is dying and

01:30:12,880 --> 01:30:18,000
it'll recreate it for you as an example

01:30:15,600 --> 01:30:19,520
where's the devnation login devnation

01:30:18,000 --> 01:30:20,400
login i'm not sure what you mean by

01:30:19,520 --> 01:30:23,440
devnation

01:30:20,400 --> 01:30:24,480
login like uh is there do we ask for a

01:30:23,440 --> 01:30:26,800
login

01:30:24,480 --> 01:30:28,800
there's no login to get this document as

01:30:26,800 --> 01:30:30,159
an example

01:30:28,800 --> 01:30:32,000
uh you know so i'm not sure what you

01:30:30,159 --> 01:30:34,320
mean by definition log in there brandon

01:30:32,000 --> 01:30:35,199
okay but just know that a naked pod can

01:30:34,320 --> 01:30:38,800
be killed

01:30:35,199 --> 01:30:40,880
and it stays dead all right in the case

01:30:38,800 --> 01:30:43,760
of using a replica set let's come use a

01:30:40,880 --> 01:30:43,760
replica set here

01:30:43,840 --> 01:30:48,880
the pod won't stay dead okay this

01:30:46,800 --> 01:30:50,719
actually can be very confusing to people

01:30:48,880 --> 01:30:53,440
so i'm going to basically use a replica

01:30:50,719 --> 01:30:56,239
set cube ct i'll get rs

01:30:53,440 --> 01:30:58,080
qct i'll get pods so we have our three

01:30:56,239 --> 01:30:58,480
pods replica sets that i wanted three of

01:30:58,080 --> 01:31:00,080
them

01:30:58,480 --> 01:31:01,840
therefore we're getting three born up

01:31:00,080 --> 01:31:02,800
there if i come here and delete the

01:31:01,840 --> 01:31:07,120
middle one

01:31:02,800 --> 01:31:08,600
cube cdl delete middle one

01:31:07,120 --> 01:31:11,360
watch what happens

01:31:08,600 --> 01:31:14,719
[Music]

01:31:11,360 --> 01:31:17,040
delete pod there we go

01:31:14,719 --> 01:31:17,840
it basically will kill the one i told it

01:31:17,040 --> 01:31:21,520
to kill

01:31:17,840 --> 01:31:24,320
but then it responds another because

01:31:21,520 --> 01:31:25,600
of the desired three all right so you

01:31:24,320 --> 01:31:27,040
want three it's going to try to make

01:31:25,600 --> 01:31:29,600
three happen for you somewhere

01:31:27,040 --> 01:31:30,400
in that cluster uh the pod is only

01:31:29,600 --> 01:31:32,880
mostly dead

01:31:30,400 --> 01:31:34,159
so there is a great uh princess bride

01:31:32,880 --> 01:31:37,120
reference right there

01:31:34,159 --> 01:31:38,320
it is it is not mostly dead versus all

01:31:37,120 --> 01:31:39,040
dead if you're familiar with princess

01:31:38,320 --> 01:31:42,080
bride

01:31:39,040 --> 01:31:44,560
but it actually is all dead okay

01:31:42,080 --> 01:31:45,120
so from a process standpoint that jvm

01:31:44,560 --> 01:31:47,360
that

01:31:45,120 --> 01:31:50,480
v8 that wordpress whatever is truly did

01:31:47,360 --> 01:31:52,320
die however the replica set responds it

01:31:50,480 --> 01:31:52,719
so this is closer to what you see like

01:31:52,320 --> 01:31:54,560
in

01:31:52,719 --> 01:31:56,159
a video game you know in a video game

01:31:54,560 --> 01:31:57,520
where you get blasted your health goes

01:31:56,159 --> 01:31:59,440
to zero and you're dead

01:31:57,520 --> 01:32:00,800
but you pop up again onto the board you

01:31:59,440 --> 01:32:03,120
might have lost all your

01:32:00,800 --> 01:32:04,080
you know your magic potions and swords

01:32:03,120 --> 01:32:05,199
and stuff like that

01:32:04,080 --> 01:32:07,040
they are all scattered all over the

01:32:05,199 --> 01:32:08,239
ground when you died and you can start

01:32:07,040 --> 01:32:09,679
picking it back up again or the other

01:32:08,239 --> 01:32:11,520
competitors can pick it back up

01:32:09,679 --> 01:32:13,199
but it's a respawning actually all right

01:32:11,520 --> 01:32:14,560
so the process actually is dead from a

01:32:13,199 --> 01:32:17,840
linux standpoint

01:32:14,560 --> 01:32:19,520
but it'll really respond uh did this

01:32:17,840 --> 01:32:20,320
post the links to the documents in the

01:32:19,520 --> 01:32:21,840
chat please

01:32:20,320 --> 01:32:24,239
post the links to the documents in the

01:32:21,840 --> 01:32:29,280
chat which which documents does that

01:32:24,239 --> 01:32:31,140
the ones we pasted here like this one

01:32:29,280 --> 01:32:32,560
all right there's that one

01:32:31,140 --> 01:32:35,140
[Music]

01:32:32,560 --> 01:32:37,600
and there's these ones

01:32:35,140 --> 01:32:39,120
[Music]

01:32:37,600 --> 01:32:40,719
but this is actually going to panelist

01:32:39,120 --> 01:32:42,480
oh i see what the problem is

01:32:40,719 --> 01:32:44,000
this silly little chat switched to

01:32:42,480 --> 01:32:47,440
panelist only

01:32:44,000 --> 01:32:50,719
and not and not attendees

01:32:47,440 --> 01:32:54,320
yeah there we go all right all right

01:32:50,719 --> 01:32:55,840
the chat defaulted to other speakers not

01:32:54,320 --> 01:32:56,080
the actual attendees all right there you

01:32:55,840 --> 01:32:57,360
go

01:32:56,080 --> 01:33:00,000
hopefully those are the main documents

01:32:57,360 --> 01:33:01,760
you need and uh let's see here would you

01:33:00,000 --> 01:33:02,960
go away

01:33:01,760 --> 01:33:04,400
there's one thing bad about zoom the

01:33:02,960 --> 01:33:05,520
silly little thing that pops up above

01:33:04,400 --> 01:33:08,880
the top bar

01:33:05,520 --> 01:33:10,800
and then here's my other one all right

01:33:08,880 --> 01:33:12,719
there you go and then you'll see there's

01:33:10,800 --> 01:33:14,639
some other links there

01:33:12,719 --> 01:33:16,400
all right so the replica set respawns

01:33:14,639 --> 01:33:18,159
the pods just so you're aware of

01:33:16,400 --> 01:33:19,920
what it looks like there you can also

01:33:18,159 --> 01:33:22,480
use this command called describe to

01:33:19,920 --> 01:33:25,120
describe it that's your friend describe

01:33:22,480 --> 01:33:26,560
get describe get right you'll use those

01:33:25,120 --> 01:33:27,679
two commands a lot when it comes to

01:33:26,560 --> 01:33:29,040
these objects

01:33:27,679 --> 01:33:30,880
and one thing i want you guys to start

01:33:29,040 --> 01:33:34,239
getting your heads around these are just

01:33:30,880 --> 01:33:35,520
objects in a database okay the pod is an

01:33:34,239 --> 01:33:37,040
object in the database

01:33:35,520 --> 01:33:38,800
the deployment is an object in a

01:33:37,040 --> 01:33:41,199
database the replica set is an

01:33:38,800 --> 01:33:42,159
object the database so if i say get rs

01:33:41,199 --> 01:33:44,560
here

01:33:42,159 --> 01:33:46,159
that gets me all replica sets if i say

01:33:44,560 --> 01:33:50,080
cube co get rs

01:33:46,159 --> 01:33:50,800
and this particular replica set okay so

01:33:50,080 --> 01:33:53,840
this is the

01:33:50,800 --> 01:33:56,880
type that i want to get all right so get

01:33:53,840 --> 01:33:57,440
a type this specific instance and then i

01:33:56,880 --> 01:33:59,360
can say

01:33:57,440 --> 01:34:01,440
you know sorry there i get it and then

01:33:59,360 --> 01:34:03,679
this can say oh json

01:34:01,440 --> 01:34:05,600
i can say oh yaml and i'm pulling that

01:34:03,679 --> 01:34:06,800
document out of that cd database okay

01:34:05,600 --> 01:34:07,840
i'm pulling it out of the etsy database

01:34:06,800 --> 01:34:09,440
and i'm looking at it

01:34:07,840 --> 01:34:11,040
and because i can look at it i can also

01:34:09,440 --> 01:34:14,880
edit it

01:34:11,040 --> 01:34:16,320
okay so let me try edit i can now edit

01:34:14,880 --> 01:34:18,960
that same document

01:34:16,320 --> 01:34:20,560
and toss it back into the database all

01:34:18,960 --> 01:34:22,639
right so this is a beautiful thing so if

01:34:20,560 --> 01:34:26,320
i say i want replicas two

01:34:22,639 --> 01:34:27,520
save close you'll see that it'll kill

01:34:26,320 --> 01:34:30,080
one and give us two

01:34:27,520 --> 01:34:31,040
because that's the new desired state

01:34:30,080 --> 01:34:33,520
cube ctl

01:34:31,040 --> 01:34:34,719
get rs so everything in kubernetes land

01:34:33,520 --> 01:34:36,800
works on this concept

01:34:34,719 --> 01:34:38,080
of a declaration this by the way the

01:34:36,800 --> 01:34:41,440
editor trick

01:34:38,080 --> 01:34:44,159
one more time all right i map it to cube

01:34:41,440 --> 01:34:46,400
dash w for new window and uh sorry code

01:34:44,159 --> 01:34:48,000
dash w and that's my visual studio code

01:34:46,400 --> 01:34:51,119
right that's how that if you don't have

01:34:48,000 --> 01:34:56,080
that set uh it'll just go

01:34:51,119 --> 01:35:00,960
let's see here if we unset it

01:34:56,080 --> 01:35:03,920
edit tor okay echo

01:35:00,960 --> 01:35:05,119
let's see if i got it unset correctly i

01:35:03,920 --> 01:35:07,360
think so

01:35:05,119 --> 01:35:09,520
and so let's do that edit command one

01:35:07,360 --> 01:35:11,920
more time

01:35:09,520 --> 01:35:13,280
and it pulls it up in vi so now you use

01:35:11,920 --> 01:35:16,080
vi commands

01:35:13,280 --> 01:35:16,080
for replicas

01:35:18,000 --> 01:35:21,520
all right okay and then you gotta dig

01:35:19,520 --> 01:35:22,800
around in here

01:35:21,520 --> 01:35:24,960
and for those people love vi they're

01:35:22,800 --> 01:35:28,560
like yes i'm not a big

01:35:24,960 --> 01:35:32,080
lover of a uh vi let's see x

01:35:28,560 --> 01:35:36,239
oh man i forgot hit i

01:35:32,080 --> 01:35:38,800
there we go four w

01:35:36,239 --> 01:35:39,760
q let's see if i did it right there we

01:35:38,800 --> 01:35:41,440
go

01:35:39,760 --> 01:35:43,199
so that's your default experience use

01:35:41,440 --> 01:35:44,880
that vi uh

01:35:43,199 --> 01:35:47,119
yeah nine steps awesome because i always

01:35:44,880 --> 01:35:49,040
ran nine different things john there i

01:35:47,119 --> 01:35:50,800
ran like nine different components to

01:35:49,040 --> 01:35:52,719
get you up and running on kubernetes

01:35:50,800 --> 01:35:54,320
it's all the same content uh basically i

01:35:52,719 --> 01:35:55,199
now have a whole team of people helping

01:35:54,320 --> 01:35:57,199
maintain

01:35:55,199 --> 01:35:59,199
the tutorial so you can see it's really

01:35:57,199 --> 01:36:00,639
gotten robust over time

01:35:59,199 --> 01:36:02,239
but that is the concept right you're

01:36:00,639 --> 01:36:03,440
pulling things into that database so

01:36:02,239 --> 01:36:05,679
let's actually

01:36:03,440 --> 01:36:07,440
delete the replica set and we get the

01:36:05,679 --> 01:36:10,080
deployment

01:36:07,440 --> 01:36:11,280
okay notice this cat eof trick cube

01:36:10,080 --> 01:36:13,840
control apply dash

01:36:11,280 --> 01:36:15,520
f and then eof it's basically going to

01:36:13,840 --> 01:36:17,840
say make everything in there

01:36:15,520 --> 01:36:19,840
just like it came from a file so i can

01:36:17,840 --> 01:36:22,480
do that right there

01:36:19,840 --> 01:36:24,400
okay and there we go another thing you

01:36:22,480 --> 01:36:26,480
should be aware of and let me go ahead

01:36:24,400 --> 01:36:29,920
and do this

01:36:26,480 --> 01:36:33,920
to actually you go away over there okay

01:36:29,920 --> 01:36:33,920
and let's come here github

01:36:34,239 --> 01:36:40,000
scholars kubernetes tutorial

01:36:38,270 --> 01:36:43,280
[Music]

01:36:40,000 --> 01:36:47,440
this is what we're working off here

01:36:43,280 --> 01:36:47,440
on github there we go come on

01:36:48,239 --> 01:36:56,000
there we go and then if i come to apps

01:36:52,320 --> 01:36:59,520
and let's just go to cube files

01:36:56,000 --> 01:37:03,119
and let me grab this my boot deployment

01:36:59,520 --> 01:37:05,679
here you see that deployment yaml

01:37:03,119 --> 01:37:06,560
i'm going to raw mode okay here's what

01:37:05,679 --> 01:37:09,440
it looks like

01:37:06,560 --> 01:37:10,239
so this is your deployment yaml so in

01:37:09,440 --> 01:37:12,320
raw mode

01:37:10,239 --> 01:37:13,440
that means no chrome no browser chrome

01:37:12,320 --> 01:37:15,920
no fancy stuff

01:37:13,440 --> 01:37:18,880
i can just deploy that so in other words

01:37:15,920 --> 01:37:18,880
let me come back over here

01:37:18,960 --> 01:37:23,119
let me double i'm just double checking

01:37:20,400 --> 01:37:27,520
that looks good to me i can say cube

01:37:23,119 --> 01:37:30,639
control apply dash f and the url

01:37:27,520 --> 01:37:33,040
so as long as you can stream the yamo in

01:37:30,639 --> 01:37:35,360
somehow or another right kubernetes

01:37:33,040 --> 01:37:36,800
takes it writes it to the ncd database

01:37:35,360 --> 01:37:38,400
the schedulers and controllers kick in

01:37:36,800 --> 01:37:39,119
and go okay let me try to make it happen

01:37:38,400 --> 01:37:40,560
in the world

01:37:39,119 --> 01:37:42,639
and now i have my little spring boot

01:37:40,560 --> 01:37:43,600
application running alongside my quercus

01:37:42,639 --> 01:37:46,960
application

01:37:43,600 --> 01:37:50,239
so if i want to queue control exec it

01:37:46,960 --> 01:37:51,920
into that pod dash dash bin bash

01:37:50,239 --> 01:37:53,920
let's we're going into the spring boot

01:37:51,920 --> 01:37:55,360
one here curl local host

01:37:53,920 --> 01:37:58,080
once you're in the pod you can curl

01:37:55,360 --> 01:38:01,360
local host all right there it is

01:37:58,080 --> 01:38:02,400
if i want to cube control cube control

01:38:01,360 --> 01:38:05,450
exec

01:38:02,400 --> 01:38:07,600
it and this guy right here this one

01:38:05,450 --> 01:38:10,639
[Music]

01:38:07,600 --> 01:38:14,080
how about again copy

01:38:10,639 --> 01:38:17,600
paste there we go dash dash bin bash

01:38:14,080 --> 01:38:18,320
and then curl local host there we go so

01:38:17,600 --> 01:38:20,159
we're talking to that

01:38:18,320 --> 01:38:22,400
corcus one right there okay the one in

01:38:20,159 --> 01:38:24,080
the middle so that concept is

01:38:22,400 --> 01:38:25,760
often how you decide is it working in

01:38:24,080 --> 01:38:26,880
kubernetes or not right you get your

01:38:25,760 --> 01:38:29,600
deployment

01:38:26,880 --> 01:38:32,239
it gets it gets created uh you look for

01:38:29,600 --> 01:38:34,000
the pods to show up

01:38:32,239 --> 01:38:35,920
so here's my two deployments you notice

01:38:34,000 --> 01:38:37,679
i have a watch cube control get pods and

01:38:35,920 --> 01:38:38,639
then i exec into the pod to see if it's

01:38:37,679 --> 01:38:40,960
okay

01:38:38,639 --> 01:38:42,400
all right that is my common paradigm to

01:38:40,960 --> 01:38:42,960
see if things are kind of sort of

01:38:42,400 --> 01:38:44,639
working

01:38:42,960 --> 01:38:46,320
and then you go build a service that

01:38:44,639 --> 01:38:48,159
basically is the wrapper around it

01:38:46,320 --> 01:38:49,199
right now i don't have any services but

01:38:48,159 --> 01:38:50,480
it doesn't you don't actually have to

01:38:49,199 --> 01:38:52,000
have services right the

01:38:50,480 --> 01:38:53,840
the pods themselves might be all you

01:38:52,000 --> 01:38:55,840
want in some cases depending on how

01:38:53,840 --> 01:38:57,920
you're going to access it

01:38:55,840 --> 01:39:00,239
let me come over here and basically now

01:38:57,920 --> 01:39:03,520
delete these two deployments

01:39:00,239 --> 01:39:05,119
my boot and the quarkus one

01:39:03,520 --> 01:39:07,040
when i delete the deployment it deletes

01:39:05,119 --> 01:39:08,159
the replica set which

01:39:07,040 --> 01:39:10,159
and then it basically starts tearing

01:39:08,159 --> 01:39:12,800
down my old pods

01:39:10,159 --> 01:39:15,360
okay what happens if you mess up the

01:39:12,800 --> 01:39:18,159
json yaml file and attempt to use it

01:39:15,360 --> 01:39:19,679
the uh yes so if in fact you have a

01:39:18,159 --> 01:39:20,159
validation error so a question from john

01:39:19,679 --> 01:39:24,000
here

01:39:20,159 --> 01:39:24,719
if you have a a if you have a validation

01:39:24,000 --> 01:39:26,719
error

01:39:24,719 --> 01:39:28,480
let's see here let's actually cause a

01:39:26,719 --> 01:39:31,199
validation error

01:39:28,480 --> 01:39:33,760
uh let's see this by the way is still on

01:39:31,199 --> 01:39:37,360
my local machine i did do the cube

01:39:33,760 --> 01:39:38,080
clone here a git clone so there's this

01:39:37,360 --> 01:39:40,800
one

01:39:38,080 --> 01:39:41,280
okay no don't mess with me here in vs

01:39:40,800 --> 01:39:43,199
code

01:39:41,280 --> 01:39:44,800
but let's say i really goofed this up uh

01:39:43,199 --> 01:39:47,280
let's put in the word bur here

01:39:44,800 --> 01:39:48,880
so the the combination of matters is

01:39:47,280 --> 01:39:50,800
kind an api version

01:39:48,880 --> 01:39:53,040
kind is the object type i'm doing a

01:39:50,800 --> 01:39:56,320
deployment a replica set a pod

01:39:53,040 --> 01:39:58,000
a kafka a pizza right the cool thing is

01:39:56,320 --> 01:39:59,840
you can actually extend the api to give

01:39:58,000 --> 01:40:01,280
it any object type you want

01:39:59,840 --> 01:40:02,639
but i'm going to do a deployment and the

01:40:01,280 --> 01:40:04,320
api version that's that's the

01:40:02,639 --> 01:40:06,159
combination that has to matter

01:40:04,320 --> 01:40:07,440
so i'm going to say v1 bur which doesn't

01:40:06,159 --> 01:40:09,119
really exist

01:40:07,440 --> 01:40:11,199
and if i come over here and try to apply

01:40:09,119 --> 01:40:11,199
it

01:40:11,360 --> 01:40:19,360
dash f and it's under apps cube files

01:40:14,880 --> 01:40:23,119
and that is my boot deployment

01:40:19,360 --> 01:40:24,320
yaml okay it'll say sorry i don't know

01:40:23,119 --> 01:40:25,760
what that is

01:40:24,320 --> 01:40:28,159
all right so it doesn't know what a v1

01:40:25,760 --> 01:40:30,400
bur is so you're getting a

01:40:28,159 --> 01:40:31,199
you're basically getting a validation

01:40:30,400 --> 01:40:34,000
error

01:40:31,199 --> 01:40:35,199
and let me try something else let me i

01:40:34,000 --> 01:40:37,280
don't know let's just kind of come here

01:40:35,199 --> 01:40:40,480
and whack

01:40:37,280 --> 01:40:40,880
a section of it so save let's see if

01:40:40,480 --> 01:40:42,239
that

01:40:40,880 --> 01:40:44,400
let's see if that gives us a little

01:40:42,239 --> 01:40:46,960
error all right yep ignoring

01:40:44,400 --> 01:40:47,920
it basically has a validation error okay

01:40:46,960 --> 01:40:51,679
so if you

01:40:47,920 --> 01:40:53,520
jack up your your file normally it won't

01:40:51,679 --> 01:40:56,400
deploy

01:40:53,520 --> 01:40:57,360
whoops oh man oh there we go all right

01:40:56,400 --> 01:40:59,600
so get it back to

01:40:57,360 --> 01:41:01,440
right again so now i you know the bare

01:40:59,600 --> 01:41:04,239
bones deployment is there

01:41:01,440 --> 01:41:05,840
and then i can deploy it and notice also

01:41:04,239 --> 01:41:08,710
by the way i have the yamles

01:41:05,840 --> 01:41:11,199
tool from visual studio code here

01:41:08,710 --> 01:41:14,639
[Music]

01:41:11,199 --> 01:41:14,639
okay not that one this one

01:41:14,800 --> 01:41:20,080
okay the yaml tool and so red hat by the

01:41:18,320 --> 01:41:21,920
way provides a yaml tool which also

01:41:20,080 --> 01:41:22,719
helps you validate your yamls which is

01:41:21,920 --> 01:41:24,960
nice

01:41:22,719 --> 01:41:27,040
uh it you know so we also do the java

01:41:24,960 --> 01:41:29,600
tools for visual studio code

01:41:27,040 --> 01:41:30,960
out here as well so if you're into java

01:41:29,600 --> 01:41:32,480
so if you're into visual studio code

01:41:30,960 --> 01:41:33,360
there's just a lot of great tools for

01:41:32,480 --> 01:41:36,080
helping you

01:41:33,360 --> 01:41:37,920
helping you manage your world right so

01:41:36,080 --> 01:41:38,719
the yaml tool is also very powerful yaml

01:41:37,920 --> 01:41:40,159
and java are two

01:41:38,719 --> 01:41:41,920
most popular tools that we provide for

01:41:40,159 --> 01:41:44,960
visual studio code

01:41:41,920 --> 01:41:46,719
okay so there's that and i don't need

01:41:44,960 --> 01:41:48,960
that open anymore

01:41:46,719 --> 01:41:50,800
all right and then so if i did it right

01:41:48,960 --> 01:41:53,840
okay there's the little

01:41:50,800 --> 01:41:55,440
boot running there okay now

01:41:53,840 --> 01:41:57,119
you might be having problems getting

01:41:55,440 --> 01:41:59,040
this image name okay

01:41:57,119 --> 01:42:00,239
so let's do this let's come over here

01:41:59,040 --> 01:42:01,440
and delete

01:42:00,239 --> 01:42:03,440
the deployment and by the way here's a

01:42:01,440 --> 01:42:06,000
way to delete instead of deleting the

01:42:03,440 --> 01:42:06,880
deployment you can just use the uh yaml

01:42:06,000 --> 01:42:08,320
file

01:42:06,880 --> 01:42:10,239
okay this is actually considered to be a

01:42:08,320 --> 01:42:12,639
better form to delete

01:42:10,239 --> 01:42:14,480
using the yaml file just like i created

01:42:12,639 --> 01:42:16,320
it using the ammo file

01:42:14,480 --> 01:42:19,040
that way you know exactly the name i

01:42:16,320 --> 01:42:20,480
could have also said get deployments

01:42:19,040 --> 01:42:22,639
figured out its name and then cube

01:42:20,480 --> 01:42:26,000
control delete deployment and its name

01:42:22,639 --> 01:42:28,159
whatever it was okay

01:42:26,000 --> 01:42:29,280
but now let's try this let's try i want

01:42:28,159 --> 01:42:30,320
to show you this this is a really

01:42:29,280 --> 01:42:31,280
important one because you will get

01:42:30,320 --> 01:42:34,639
burned on this one

01:42:31,280 --> 01:42:35,760
uh c versus v6 quay io burst center my

01:42:34,639 --> 01:42:40,080
boot v6

01:42:35,760 --> 01:42:40,080
let's go over here

01:42:40,840 --> 01:42:45,920
okay i gotta bring my firefox up

01:42:44,560 --> 01:42:47,679
i know i know you think i'm trying to

01:42:45,920 --> 01:42:52,960
log into red hat i'm not

01:42:47,679 --> 01:42:55,520
let's go to quay io my boot

01:42:52,960 --> 01:42:56,080
images see that v6 right there i just

01:42:55,520 --> 01:42:59,440
created it

01:42:56,080 --> 01:43:00,000
uh five days ago okay if and there's a

01:42:59,440 --> 01:43:01,840
v7

01:43:00,000 --> 01:43:05,440
there's a five four three two one right

01:43:01,840 --> 01:43:08,239
so uh let's actually say i put v8 here

01:43:05,440 --> 01:43:10,800
and there is no v8 there's no v8 image

01:43:08,239 --> 01:43:13,199
so i hit save

01:43:10,800 --> 01:43:14,239
i say cube control apply dash f actually

01:43:13,199 --> 01:43:16,960
let me just

01:43:14,239 --> 01:43:18,960
go up here and do it okay look what

01:43:16,960 --> 01:43:22,480
watch what happens

01:43:18,960 --> 01:43:24,560
cube cto get events all right first of

01:43:22,480 --> 01:43:27,040
all you see the er er

01:43:24,560 --> 01:43:27,760
image pool because it can't really find

01:43:27,040 --> 01:43:30,000
that image

01:43:27,760 --> 01:43:31,440
okay that image doesn't really exist and

01:43:30,000 --> 01:43:34,560
if we dig around in here

01:43:31,440 --> 01:43:35,199
we will see that it can't it it doesn't

01:43:34,560 --> 01:43:37,760
exist

01:43:35,199 --> 01:43:39,520
uh so where's the pulling and one

01:43:37,760 --> 01:43:41,199
problem by the way is this thing is not

01:43:39,520 --> 01:43:44,800
ordered

01:43:41,199 --> 01:43:47,520
your events by the way uh so

01:43:44,800 --> 01:43:48,159
get events sorted let's do an ordered

01:43:47,520 --> 01:43:49,679
okay

01:43:48,159 --> 01:43:51,280
i have a script for that it's also in

01:43:49,679 --> 01:43:53,199
the document how to get them ordered

01:43:51,280 --> 01:43:54,719
but see right here it failed to pull the

01:43:53,199 --> 01:43:56,880
image v8

01:43:54,719 --> 01:43:58,320
there ain't no v8 so therefore it can't

01:43:56,880 --> 01:43:59,199
get it and now it's doing this image

01:43:58,320 --> 01:44:00,960
pull back off

01:43:59,199 --> 01:44:02,480
this is a very common error for you guys

01:44:00,960 --> 01:44:05,600
to get all right because

01:44:02,480 --> 01:44:07,280
you'll just typo the image name

01:44:05,600 --> 01:44:10,000
okay and you won't quite get a break at

01:44:07,280 --> 01:44:11,920
work now i can go edit that document and

01:44:10,000 --> 01:44:13,360
i should by the way i can go edit that

01:44:11,920 --> 01:44:15,520
document and fix my problem

01:44:13,360 --> 01:44:17,679
check that back into source control but

01:44:15,520 --> 01:44:20,400
again the declarative nature

01:44:17,679 --> 01:44:21,360
of kubernetes is so powerful uh let's

01:44:20,400 --> 01:44:23,840
see here

01:44:21,360 --> 01:44:25,360
cube control get deployments if i have

01:44:23,840 --> 01:44:26,480
to fix this even in my production

01:44:25,360 --> 01:44:28,639
runtime environment

01:44:26,480 --> 01:44:30,560
cubectl edit you should never do this by

01:44:28,639 --> 01:44:33,199
the way deployments

01:44:30,560 --> 01:44:34,080
my boot i can come here into the

01:44:33,199 --> 01:44:37,040
production

01:44:34,080 --> 01:44:39,440
environment uh figure out where that

01:44:37,040 --> 01:44:39,440
image is

01:44:41,199 --> 01:44:46,960
where is it there it is

01:44:44,639 --> 01:44:48,800
and make it something that i know exists

01:44:46,960 --> 01:44:51,760
so there we go

01:44:48,800 --> 01:44:51,760
and six

01:44:52,320 --> 01:44:55,520
okay and now and notice it goes to

01:44:54,880 --> 01:44:57,600
running

01:44:55,520 --> 01:45:00,880
so that image it has now it's up and

01:44:57,600 --> 01:45:04,639
happy again i can keep control

01:45:00,880 --> 01:45:07,760
exec it

01:45:04,639 --> 01:45:10,480
dash dash bin bash and curl

01:45:07,760 --> 01:45:11,760
local host 8080 there we go all right so

01:45:10,480 --> 01:45:13,360
there it is

01:45:11,760 --> 01:45:16,480
now your one of your questions is going

01:45:13,360 --> 01:45:17,280
to be well how do the images come to be

01:45:16,480 --> 01:45:18,719
to begin with

01:45:17,280 --> 01:45:20,560
how do they exist begin with we cover

01:45:18,719 --> 01:45:21,230
that a little bit later okay we cover

01:45:20,560 --> 01:45:22,400
that a little bit later

01:45:21,230 --> 01:45:24,719
[Music]

01:45:22,400 --> 01:45:26,080
so here's what we ought to do next okay

01:45:24,719 --> 01:45:28,159
we did this we did this

01:45:26,080 --> 01:45:30,320
right all that's good i think you how

01:45:28,159 --> 01:45:32,239
many people got this far with it you got

01:45:30,320 --> 01:45:34,000
to the cube control section you got the

01:45:32,239 --> 01:45:35,520
pod and replica set section

01:45:34,000 --> 01:45:38,080
how many people kind of got that working

01:45:35,520 --> 01:45:39,920
at least because you got to have those

01:45:38,080 --> 01:45:41,920
basics working before we can do the more

01:45:39,920 --> 01:45:44,080
advanced things with services and things

01:45:41,920 --> 01:45:45,679
like that blue green deployments and

01:45:44,080 --> 01:45:49,520
you know we building images down here in

01:45:45,679 --> 01:45:49,520
this section of our tutorial

01:45:50,719 --> 01:45:58,880
let's see where's the chat at yeah there

01:45:52,080 --> 01:46:01,119
it is do it all the time

01:45:58,880 --> 01:46:02,639
all right so yeah just tell me if you

01:46:01,119 --> 01:46:04,560
guys are doing okay

01:46:02,639 --> 01:46:05,679
so mark mark owens has said he's doing

01:46:04,560 --> 01:46:07,440
okay and

01:46:05,679 --> 01:46:09,119
and also what kubernetes are you using

01:46:07,440 --> 01:46:10,800
if you're not using mini cube tell me

01:46:09,119 --> 01:46:15,280
what you're using are using kind

01:46:10,800 --> 01:46:19,760
the docker one okay the gke from google

01:46:15,280 --> 01:46:22,000
aks eks from azure amazon

01:46:19,760 --> 01:46:23,679
all right andrew working on mini cube

01:46:22,000 --> 01:46:27,600
fantastic

01:46:23,679 --> 01:46:29,840
all right very good there

01:46:27,600 --> 01:46:31,679
okay let's do this we've been going at

01:46:29,840 --> 01:46:32,239
it for about an hour and 48 minutes

01:46:31,679 --> 01:46:34,800
let's take

01:46:32,239 --> 01:46:36,800
you guys want to take a few minute break

01:46:34,800 --> 01:46:39,440
let people go to the restroom real quick

01:46:36,800 --> 01:46:40,639
let people grab some water people who

01:46:39,440 --> 01:46:42,480
are fighting their way through making

01:46:40,639 --> 01:46:44,080
mini cube run can continue fighting with

01:46:42,480 --> 01:46:48,159
it right here

01:46:44,080 --> 01:46:51,440
okay so let's see here uh countdown

01:46:48,159 --> 01:46:55,280
clock let me see there's one google has

01:46:51,440 --> 01:46:58,560
let's just do a five minute break

01:46:55,280 --> 01:46:58,560
let me see we got an error here

01:46:59,360 --> 01:47:02,480
guest provision failed to validate

01:47:01,040 --> 01:47:05,760
network so

01:47:02,480 --> 01:47:09,199
that is still on the mini cube

01:47:05,760 --> 01:47:12,159
guest provision so

01:47:09,199 --> 01:47:16,159
that's telling me that mini cube can't

01:47:12,159 --> 01:47:19,440
speak to the virtual box on that machine

01:47:16,159 --> 01:47:19,440
how does let's see here

01:47:19,760 --> 01:47:24,480
okay there was some debugging not on

01:47:22,560 --> 01:47:27,120
this one

01:47:24,480 --> 01:47:29,119
there are some debugging notes

01:47:27,120 --> 01:47:32,800
[Music]

01:47:29,119 --> 01:47:32,800
uh let's see here's your drivers

01:47:33,199 --> 01:47:40,820
let's see if this is the one

01:47:36,960 --> 01:47:42,000
leave yeah try looking at this

01:47:40,820 --> 01:47:44,960
[Music]

01:47:42,000 --> 01:47:46,159
website it gives you a little bit more

01:47:44,960 --> 01:47:48,080
information about the drivers from

01:47:46,159 --> 01:47:51,040
minicube

01:47:48,080 --> 01:47:52,719
and this is something we did a while ago

01:47:51,040 --> 01:47:54,380
so this document is fairly

01:47:52,719 --> 01:47:57,560
dated

01:47:54,380 --> 01:47:57,560
[Music]

01:47:58,159 --> 01:48:02,400
but there are also some you know

01:48:00,320 --> 01:48:05,199
debugging or setup steps here that might

01:48:02,400 --> 01:48:06,719
help you depending on your

01:48:05,199 --> 01:48:08,320
you know so even though it's very dated

01:48:06,719 --> 01:48:09,760
at this point it might help you figure

01:48:08,320 --> 01:48:11,440
out why your vert

01:48:09,760 --> 01:48:13,840
why your virtualization solution is not

01:48:11,440 --> 01:48:13,840
working

01:48:16,840 --> 01:48:21,280
okay

01:48:18,480 --> 01:48:23,840
all right let's get back into this let

01:48:21,280 --> 01:48:26,880
me see let's go back here

01:48:23,840 --> 01:48:28,480
okay all right we kind of showed you pod

01:48:26,880 --> 01:48:30,400
replica set and deployment

01:48:28,480 --> 01:48:31,920
these are all critical aspects again to

01:48:30,400 --> 01:48:33,199
get your head around because this is how

01:48:31,920 --> 01:48:34,960
the magic happens

01:48:33,199 --> 01:48:36,239
also you're hopefully getting a feel for

01:48:34,960 --> 01:48:38,880
what you've seen so far

01:48:36,239 --> 01:48:39,679
that kubernetes is just declarative

01:48:38,880 --> 01:48:41,520
state

01:48:39,679 --> 01:48:42,719
an eventual consistency kind of

01:48:41,520 --> 01:48:44,800
operation in other words

01:48:42,719 --> 01:48:46,719
we declare what we want like we declare

01:48:44,800 --> 01:48:48,800
we want a replica set

01:48:46,719 --> 01:48:50,719
and it goes about making it happen in

01:48:48,800 --> 01:48:51,840
the world right in this case inside

01:48:50,719 --> 01:48:53,520
those worker nodes

01:48:51,840 --> 01:48:55,199
and this in the case of mini cube it's

01:48:53,520 --> 01:48:56,719
all in one right it's master node and

01:48:55,199 --> 01:49:00,080
worker note all in one

01:48:56,719 --> 01:49:01,840
okay so just be aware of that

01:49:00,080 --> 01:49:03,520
that you know it's a declarative thing

01:49:01,840 --> 01:49:05,040
you're updating the database and then in

01:49:03,520 --> 01:49:06,960
turn it's going out there

01:49:05,040 --> 01:49:08,159
and trying to make it happen the reason

01:49:06,960 --> 01:49:09,440
that matters is when you get more

01:49:08,159 --> 01:49:12,000
advanced with kubernetes

01:49:09,440 --> 01:49:12,800
you can basically add your own object

01:49:12,000 --> 01:49:15,840
types

01:49:12,800 --> 01:49:17,040
to the kubernetes api okay so we'll talk

01:49:15,840 --> 01:49:17,599
more about that as we get a little bit

01:49:17,040 --> 01:49:19,840
later

01:49:17,599 --> 01:49:21,280
uh but maybe make it a little bit more

01:49:19,840 --> 01:49:23,119
real for you

01:49:21,280 --> 01:49:25,280
okay if i come over here and say cube

01:49:23,119 --> 01:49:28,880
control get crds

01:49:25,280 --> 01:49:32,239
on my on my big old cluster over here

01:49:28,880 --> 01:49:35,040
i have a a kafka crd

01:49:32,239 --> 01:49:37,199
so therefore i can deploy whole kafka

01:49:35,040 --> 01:49:39,199
objects now and that means a whole kafka

01:49:37,199 --> 01:49:40,639
broker which is three broker processes

01:49:39,199 --> 01:49:42,960
three zookeepers

01:49:40,639 --> 01:49:43,840
and and an operator around it as an

01:49:42,960 --> 01:49:45,440
example

01:49:43,840 --> 01:49:47,840
uh if one of the things we see in the

01:49:45,440 --> 01:49:49,840
tutorial uh the example i came up with a

01:49:47,840 --> 01:49:52,080
long time ago was pizzas

01:49:49,840 --> 01:49:53,440
so if i come over here we can declare

01:49:52,080 --> 01:49:56,480
pizzas

01:49:53,440 --> 01:49:58,080
okay we have pizza objects inside our

01:49:56,480 --> 01:49:58,639
kubernetes so in other words you can

01:49:58,080 --> 01:50:01,199
make bur

01:49:58,639 --> 01:50:02,320
objects james objects brandon objects it

01:50:01,199 --> 01:50:03,599
doesn't really matter

01:50:02,320 --> 01:50:05,840
and the cool thing about that is you can

01:50:03,599 --> 01:50:07,679
then write your own custom controller

01:50:05,840 --> 01:50:09,760
okay we will call this an operator by

01:50:07,679 --> 01:50:12,159
the way uh to then

01:50:09,760 --> 01:50:13,360
respond to new pizzas respond to new

01:50:12,159 --> 01:50:16,719
burrs new brandon's

01:50:13,360 --> 01:50:18,639
new james and there's a yes that's james

01:50:16,719 --> 01:50:21,199
we have james ward here also

01:50:18,639 --> 01:50:22,320
okay so you can have a james ward object

01:50:21,199 --> 01:50:24,960
type if you want

01:50:22,320 --> 01:50:26,400
uh inside your kubernetes cluster okay

01:50:24,960 --> 01:50:27,040
let's get into the service concept a

01:50:26,400 --> 01:50:28,880
little bit more

01:50:27,040 --> 01:50:30,639
let me see what have i destroyed here so

01:50:28,880 --> 01:50:33,840
far what have we got running so far

01:50:30,639 --> 01:50:37,520
uh let's not that here

01:50:33,840 --> 01:50:39,599
uh let's see cube ctl get all

01:50:37,520 --> 01:50:41,360
oh wait i'm in the wrong cluster come

01:50:39,599 --> 01:50:42,960
back over to this cluster

01:50:41,360 --> 01:50:45,360
cube cto get all let's see what we got

01:50:42,960 --> 01:50:46,480
running okay we left leicester leg we

01:50:45,360 --> 01:50:47,920
left our hero

01:50:46,480 --> 01:50:49,679
in this boat we have the deployment we

01:50:47,920 --> 01:50:52,719
have our service we have

01:50:49,679 --> 01:50:53,440
our pod okay fine that's all good then

01:50:52,719 --> 01:50:55,199
we basically

01:50:53,440 --> 01:50:56,560
showed you all that now we create a

01:50:55,199 --> 01:50:58,320
service okay

01:50:56,560 --> 01:51:00,159
now here's the trick with the service

01:50:58,320 --> 01:51:02,800
notice the selector

01:51:00,159 --> 01:51:03,920
app quercus demo you see that right

01:51:02,800 --> 01:51:05,760
there

01:51:03,920 --> 01:51:07,199
that is a piece of the magic so you kind

01:51:05,760 --> 01:51:10,320
of have to know about the selector

01:51:07,199 --> 01:51:11,599
so if i say get pods dash dash show

01:51:10,320 --> 01:51:13,679
labels i'm not sure if this is even the

01:51:11,599 --> 01:51:15,040
right thing here all right see it says

01:51:13,679 --> 01:51:17,280
app my boot

01:51:15,040 --> 01:51:18,840
so if i basically deploy the service

01:51:17,280 --> 01:51:22,239
it's going to look for

01:51:18,840 --> 01:51:24,480
app quarkus demo not at my boot

01:51:22,239 --> 01:51:26,000
so the service can't map to the pod that

01:51:24,480 --> 01:51:26,560
exists because i've deployed the wrong

01:51:26,000 --> 01:51:29,920
pod

01:51:26,560 --> 01:51:34,320
okay so let me do this

01:51:29,920 --> 01:51:36,880
uh get deployments and cube ctl delete

01:51:34,320 --> 01:51:36,880
deployment

01:51:37,360 --> 01:51:40,960
my boot all right we're going to get rid

01:51:39,840 --> 01:51:43,599
of the deployment

01:51:40,960 --> 01:51:45,920
which gets rid of the replica set which

01:51:43,599 --> 01:51:47,520
gets rid of the pods

01:51:45,920 --> 01:51:49,599
all righty there all right so all that

01:51:47,520 --> 01:51:52,400
gets cleaned up nicely okay

01:51:49,599 --> 01:51:53,840
and stream z that strum z is the kafka

01:51:52,400 --> 01:51:56,800
as an example so yes

01:51:53,840 --> 01:51:57,520
uh so that's good information have you

01:51:56,800 --> 01:51:59,040
want the strim

01:51:57,520 --> 01:52:01,199
z if you want to actually run kafka on

01:51:59,040 --> 01:52:02,719
your kubernetes cluster all right so let

01:52:01,199 --> 01:52:04,000
me back up here make sure i do this what

01:52:02,719 --> 01:52:05,280
we said to do here

01:52:04,000 --> 01:52:08,320
all right so we're gonna have the

01:52:05,280 --> 01:52:10,960
myspace cube and s where am i at

01:52:08,320 --> 01:52:12,480
okay so let's create let's create the

01:52:10,960 --> 01:52:16,560
space myspace

01:52:12,480 --> 01:52:19,679
crea cto create namespace

01:52:16,560 --> 01:52:20,320
and space myspace i'll just use the

01:52:19,679 --> 01:52:23,760
shortcut

01:52:20,320 --> 01:52:24,880
create cubeness myspace

01:52:23,760 --> 01:52:27,040
there we are we're in the right

01:52:24,880 --> 01:52:29,520
namespace now um

01:52:27,040 --> 01:52:31,520
i don't have this deployment anymore

01:52:29,520 --> 01:52:33,280
corga's demo deployment

01:52:31,520 --> 01:52:34,960
that's because it was over here let me

01:52:33,280 --> 01:52:38,320
go find it real quick

01:52:34,960 --> 01:52:39,679
let's get it running all right that

01:52:38,320 --> 01:52:42,159
not the replica set we want the

01:52:39,679 --> 01:52:45,600
deployment

01:52:42,159 --> 01:52:46,800
there we go quercus uh demo deployment

01:52:45,600 --> 01:52:49,920
[Music]

01:52:46,800 --> 01:52:53,119
yup that looks right run it

01:52:49,920 --> 01:52:54,560
okay now notice right away

01:52:53,119 --> 01:52:55,760
there's something different about the

01:52:54,560 --> 01:52:56,840
deployment we haven't really explained

01:52:55,760 --> 01:53:01,440
yet uh get

01:52:56,840 --> 01:53:03,840
pods show

01:53:01,440 --> 01:53:04,960
labels all right see it says app quercus

01:53:03,840 --> 01:53:08,719
demo here

01:53:04,960 --> 01:53:10,639
env dev env dev app quarkus demo

01:53:08,719 --> 01:53:12,400
that came from right here in the

01:53:10,639 --> 01:53:15,040
template area we basically say

01:53:12,400 --> 01:53:16,719
go ahead and apply these labels to the

01:53:15,040 --> 01:53:18,320
pods that are created

01:53:16,719 --> 01:53:20,480
so we're going to create pods from this

01:53:18,320 --> 01:53:21,920
image we're going to always pull this

01:53:20,480 --> 01:53:23,360
image by the way always it's just for

01:53:21,920 --> 01:53:24,159
development purposes never use it in

01:53:23,360 --> 01:53:26,159
production

01:53:24,159 --> 01:53:27,679
because it's slow uh you know you

01:53:26,159 --> 01:53:29,440
typically want to cache these images on

01:53:27,679 --> 01:53:31,040
your production nodes but in this case i

01:53:29,440 --> 01:53:32,639
just say always for making it more fun

01:53:31,040 --> 01:53:34,719
from a development standpoint

01:53:32,639 --> 01:53:36,239
uh the name of those you know the pod

01:53:34,719 --> 01:53:37,520
name by the way will be based on the

01:53:36,239 --> 01:53:40,639
name you see here

01:53:37,520 --> 01:53:41,119
but notice these labels get applied env

01:53:40,639 --> 01:53:43,599
dev

01:53:41,119 --> 01:53:44,320
quercus demo and if i come back and look

01:53:43,599 --> 01:53:45,840
here and

01:53:44,320 --> 01:53:48,000
i say show labels you can see app

01:53:45,840 --> 01:53:49,920
quarkus demo enb dev

01:53:48,000 --> 01:53:51,599
so when we create our service we want

01:53:49,920 --> 01:53:53,440
those labels to match

01:53:51,599 --> 01:53:54,800
that's the key element of the service

01:53:53,440 --> 01:53:56,480
here

01:53:54,800 --> 01:53:59,119
so if i copy and paste a service into

01:53:56,480 --> 01:54:00,560
place it says appcorkusdemo that's what

01:53:59,119 --> 01:54:01,679
it's looking for it doesn't care about

01:54:00,560 --> 01:54:05,040
the dev

01:54:01,679 --> 01:54:08,000
env dev it just cares about the

01:54:05,040 --> 01:54:09,280
cube c let's qct get services okay

01:54:08,000 --> 01:54:12,960
there's that service

01:54:09,280 --> 01:54:16,320
okay there it is watch this cube ctl get

01:54:12,960 --> 01:54:18,719
endpoints notice there's three

01:54:16,320 --> 01:54:19,440
endpoints for that service there's a

01:54:18,719 --> 01:54:23,040
three

01:54:19,440 --> 01:54:26,080
so 172 17 3 172 17

01:54:23,040 --> 01:54:27,280
4 172 17 5.

01:54:26,080 --> 01:54:29,199
okay where did these end points come

01:54:27,280 --> 01:54:33,040
from if i come say

01:54:29,199 --> 01:54:36,080
describe service

01:54:33,040 --> 01:54:37,280
the service right there there's the

01:54:36,080 --> 01:54:39,119
endpoints

01:54:37,280 --> 01:54:41,119
and there they are where those numbers

01:54:39,119 --> 01:54:45,040
come from cube ctl

01:54:41,119 --> 01:54:46,960
get pods oh wide

01:54:45,040 --> 01:54:49,040
and there are those numbers so there's

01:54:46,960 --> 01:54:50,800
my pod ip address

01:54:49,040 --> 01:54:52,719
and that pod ip address shows up as an

01:54:50,800 --> 01:54:54,800
end point in my service

01:54:52,719 --> 01:54:56,000
now this is where it gets a little bit

01:54:54,800 --> 01:54:57,199
tricky okay

01:54:56,000 --> 01:54:59,119
and you'll see this a little bit in a

01:54:57,199 --> 01:55:00,400
little bit later because

01:54:59,119 --> 01:55:02,800
the reason it shows up here is because

01:55:00,400 --> 01:55:03,440
the labels match all right the labels

01:55:02,800 --> 01:55:06,880
match

01:55:03,440 --> 01:55:11,040
the selector right here

01:55:06,880 --> 01:55:11,040
see where it says selector where to go

01:55:12,000 --> 01:55:17,040
oh boy let's show the selector here

01:55:14,639 --> 01:55:17,040
properly

01:55:17,440 --> 01:55:24,159
cube cto get services cube ctl get

01:55:20,880 --> 01:55:28,800
service the service oh

01:55:24,159 --> 01:55:28,800
yaml let's see

01:55:29,360 --> 01:55:32,480
type 10 select it right there okay so

01:55:30,800 --> 01:55:34,159
i'm looking at it so selector

01:55:32,480 --> 01:55:36,400
right there because of the selector

01:55:34,159 --> 01:55:38,560
that's what it it knows to find the pods

01:55:36,400 --> 01:55:41,199
get the rip address loaded into its uh

01:55:38,560 --> 01:55:42,320
uh endpoints right so get endpoints as

01:55:41,199 --> 01:55:43,760
well you'll see it

01:55:42,320 --> 01:55:45,679
and that is how the magic happens that's

01:55:43,760 --> 01:55:46,000
how the load balancer works so it works

01:55:45,679 --> 01:55:48,000
across

01:55:46,000 --> 01:55:49,679
those three pods named by these iap

01:55:48,000 --> 01:55:52,400
addresses simply because

01:55:49,679 --> 01:55:53,920
their labels match that's all all right

01:55:52,400 --> 01:55:55,679
the magic of labels

01:55:53,920 --> 01:55:57,520
if the labels didn't match it wouldn't

01:55:55,679 --> 01:56:00,880
show up okay

01:55:57,520 --> 01:56:03,920
so let's see here cube ctl

01:56:00,880 --> 01:56:05,679
uh label let's try to label this

01:56:03,920 --> 01:56:08,239
i wonder if i can only let me show the

01:56:05,679 --> 01:56:12,000
heck a label right here so app

01:56:08,239 --> 01:56:15,360
minus i'm trying to remove the label

01:56:12,000 --> 01:56:17,599
from one pod

01:56:15,360 --> 01:56:20,400
one right there in the middle let's see

01:56:17,599 --> 01:56:22,239
if i was successful

01:56:20,400 --> 01:56:24,400
okay and here's what's funny because i

01:56:22,239 --> 01:56:24,880
have the deployment i did i did remove

01:56:24,400 --> 01:56:27,599
it

01:56:24,880 --> 01:56:28,080
from the one but then it realized oh we

01:56:27,599 --> 01:56:29,360
need to

01:56:28,080 --> 01:56:31,040
the deployment's like let me create a

01:56:29,360 --> 01:56:32,480
new one for you so like it's a little

01:56:31,040 --> 01:56:35,040
it's outsmarting me here

01:56:32,480 --> 01:56:36,400
but if we kind of watch it closely cube

01:56:35,040 --> 01:56:39,040
cgl get

01:56:36,400 --> 01:56:39,040
endpoints

01:56:39,520 --> 01:56:44,239
endpoints get endpoints boy i can't type

01:56:42,000 --> 01:56:44,239
today

01:56:44,639 --> 01:56:48,400
all right see it's uh three five and six

01:56:47,840 --> 01:56:50,960
now

01:56:48,400 --> 01:56:52,880
when it used to be three four and five

01:56:50,960 --> 01:56:56,080
so basically the one without the label

01:56:52,880 --> 01:56:58,080
got dropped out okay and the fact that

01:56:56,080 --> 01:56:59,920
you know the deployment is trying to

01:56:58,080 --> 01:57:02,000
create the world that we asked for it

01:56:59,920 --> 01:57:04,080
basically spawned another one for me

01:57:02,000 --> 01:57:05,119
okay so that's really what we're trying

01:57:04,080 --> 01:57:05,840
to show you here in the section on

01:57:05,119 --> 01:57:07,599
services

01:57:05,840 --> 01:57:09,599
is this concept that you get this load

01:57:07,599 --> 01:57:11,679
balancer for free and then of course you

01:57:09,599 --> 01:57:13,280
can then interact with it like if i use

01:57:11,679 --> 01:57:16,880
my mini cube setup here

01:57:13,280 --> 01:57:20,159
i can say curl port

01:57:16,880 --> 01:57:22,960
there we go and i can say while true

01:57:20,159 --> 01:57:25,440
do and this curl command i can loop

01:57:22,960 --> 01:57:29,040
along

01:57:25,440 --> 01:57:29,440
there we go and pause for just a little

01:57:29,040 --> 01:57:31,280
bit

01:57:29,440 --> 01:57:33,520
and then done and there we go we're

01:57:31,280 --> 01:57:35,679
bouncing off those guys

01:57:33,520 --> 01:57:37,520
okay and again as i manipulate those

01:57:35,679 --> 01:57:38,960
pods in some way or another removing

01:57:37,520 --> 01:57:40,159
labels adding labels

01:57:38,960 --> 01:57:41,520
and they will drop in and out of the

01:57:40,159 --> 01:57:43,360
service automatically and you'll just

01:57:41,520 --> 01:57:45,679
see it just keep on trucking

01:57:43,360 --> 01:57:47,520
okay that's really what it's there for

01:57:45,679 --> 01:57:48,080
now there we have a section here on

01:57:47,520 --> 01:57:49,679
ingress

01:57:48,080 --> 01:57:50,800
ingress is also in the advanced section

01:57:49,679 --> 01:57:52,880
so we're going to skip it for now

01:57:50,800 --> 01:57:55,679
because ingress is a little bit tricky

01:57:52,880 --> 01:57:56,080
and it depends on your cluster vendor so

01:57:55,679 --> 01:57:57,440
you

01:57:56,080 --> 01:57:58,880
in the case of mini cube which we've

01:57:57,440 --> 01:58:00,320
documented here this is how you set up

01:57:58,880 --> 01:58:02,560
ingress for minicube

01:58:00,320 --> 01:58:03,520
but depending on if you're google or ibm

01:58:02,560 --> 01:58:04,719
or amazon or

01:58:03,520 --> 01:58:07,040
openshift or whomever you're getting

01:58:04,719 --> 01:58:07,599
your kubernetes cluster from ingress is

01:58:07,040 --> 01:58:10,000
unique

01:58:07,599 --> 01:58:11,599
per cluster all right you can even tell

01:58:10,000 --> 01:58:14,080
that right here with the host name

01:58:11,599 --> 01:58:16,480
it has got gcp bur sutter dev in there

01:58:14,080 --> 01:58:19,199
obviously i had made it just for me

01:58:16,480 --> 01:58:22,080
for my google environment at that time

01:58:19,199 --> 01:58:24,719
uh when burster.dev was my host name

01:58:22,080 --> 01:58:26,960
or my domain name i should say and so

01:58:24,719 --> 01:58:27,520
you know even the ingress file itself is

01:58:26,960 --> 01:58:29,599
not

01:58:27,520 --> 01:58:31,119
you it cannot it won't be common if you

01:58:29,599 --> 01:58:33,760
will right it's going to be unique

01:58:31,119 --> 01:58:34,400
and so the good news is every kubernetes

01:58:33,760 --> 01:58:36,800
cluster

01:58:34,400 --> 01:58:37,760
worth a damn does have ingress support

01:58:36,800 --> 01:58:39,840
you just have to

01:58:37,760 --> 01:58:41,040
make sure it's turned on and configured

01:58:39,840 --> 01:58:42,480
correctly and

01:58:41,040 --> 01:58:43,599
again it's unique per cluster so if you

01:58:42,480 --> 01:58:44,960
come to the ingress section under

01:58:43,599 --> 01:58:46,000
advanced down here you'll see how to do

01:58:44,960 --> 01:58:47,679
it for mini cube

01:58:46,000 --> 01:58:49,040
and then this will work for you for now

01:58:47,679 --> 01:58:50,320
i'm just going to ignore it okay because

01:58:49,040 --> 01:58:51,520
a mini cube it doesn't really offer a

01:58:50,320 --> 01:58:53,440
lot of value

01:58:51,520 --> 01:58:54,480
in the case of open shift all right when

01:58:53,440 --> 01:58:56,080
you're dealing with openshift it

01:58:54,480 --> 01:58:58,800
actually is this thing called a route

01:58:56,080 --> 01:59:00,880
and the route is h a proxy based by the

01:58:58,800 --> 01:59:03,199
way this ingress down here is

01:59:00,880 --> 01:59:04,639
nginx based in the case of openshift we

01:59:03,199 --> 01:59:07,599
use aj proxy

01:59:04,639 --> 01:59:09,040
for our ingress okay so you can kind of

01:59:07,599 --> 01:59:11,840
go play with that if you like

01:59:09,040 --> 01:59:13,040
there is a logs command i'm not going to

01:59:11,840 --> 01:59:14,960
spend a lot of time here because there's

01:59:13,040 --> 01:59:16,880
more interesting things to go show you

01:59:14,960 --> 01:59:19,040
but there is a logs command where you

01:59:16,880 --> 01:59:21,360
basically say cube control and logs and

01:59:19,040 --> 01:59:23,920
the name of the pod in question

01:59:21,360 --> 01:59:24,960
and so to kind of show you what that is

01:59:23,920 --> 01:59:26,480
let's uh so that's

01:59:24,960 --> 01:59:29,119
b bopping along there so i'm going to

01:59:26,480 --> 01:59:32,320
copy that pod identifier right there

01:59:29,119 --> 01:59:34,000
cube control logs and so

01:59:32,320 --> 01:59:36,000
i can see there's the logs for that one

01:59:34,000 --> 01:59:38,239
application there's not much

01:59:36,000 --> 01:59:40,000
interesting from a logging standpoint

01:59:38,239 --> 01:59:41,599
but there that's how you pick the logs

01:59:40,000 --> 01:59:42,960
from a certain pod

01:59:41,599 --> 01:59:45,280
there's a tip i'll give you which is

01:59:42,960 --> 01:59:47,920
dash p if for some reason the

01:59:45,280 --> 01:59:48,560
pod is failing dash p will give you the

01:59:47,920 --> 01:59:51,599
previous

01:59:48,560 --> 01:59:52,719
failing pods logs if it can uh that's

01:59:51,599 --> 01:59:54,159
one way to get it

01:59:52,719 --> 01:59:56,560
uh this is logs by the way for a

01:59:54,159 --> 01:59:59,119
developer this is not production logging

01:59:56,560 --> 02:00:00,719
this is just for a developer but there's

01:59:59,119 --> 02:00:02,480
another option called stern

02:00:00,719 --> 02:00:04,320
and stern allows for wild card matches

02:00:02,480 --> 02:00:07,119
so i can say quarkus

02:00:04,320 --> 02:00:08,159
demo and it will match all the quarkus

02:00:07,119 --> 02:00:09,599
demo pods

02:00:08,159 --> 02:00:11,199
and give me a little color coding here

02:00:09,599 --> 02:00:12,080
to basically give me i can see the

02:00:11,199 --> 02:00:14,719
unique differences

02:00:12,080 --> 02:00:16,800
per pod now based on the color coding so

02:00:14,719 --> 02:00:19,280
stern does a wild card match

02:00:16,800 --> 02:00:20,880
and also stern follows so you can follow

02:00:19,280 --> 02:00:22,560
with the regular login command but

02:00:20,880 --> 02:00:24,239
seeing stern is

02:00:22,560 --> 02:00:26,480
going to stream out the logs so stern's

02:00:24,239 --> 02:00:28,159
a very powerful tool for your

02:00:26,480 --> 02:00:29,920
debugging purposes when it comes to

02:00:28,159 --> 02:00:31,199
learning how to use kubernetes

02:00:29,920 --> 02:00:33,679
and it works on minicube it works on

02:00:31,199 --> 02:00:35,360
your kubernetes cluster okay so stern is

02:00:33,679 --> 02:00:37,679
a good tip for you there

02:00:35,360 --> 02:00:38,880
okay another debugging tip is to exec

02:00:37,679 --> 02:00:40,000
into the pod you've seen me do that

02:00:38,880 --> 02:00:41,760
several times

02:00:40,000 --> 02:00:43,920
so exact into the pod think of that like

02:00:41,760 --> 02:00:45,280
as an ssh into the pod in question

02:00:43,920 --> 02:00:46,880
that allows you to go check it out and

02:00:45,280 --> 02:00:48,000
see if it's behaving correctly

02:00:46,880 --> 02:00:50,880
misbehaving

02:00:48,000 --> 02:00:52,560
so your exec command by the way is into

02:00:50,880 --> 02:00:54,320
that linux container

02:00:52,560 --> 02:00:56,560
and it's going to be limited by the

02:00:54,320 --> 02:00:57,840
linux container so depending on how you

02:00:56,560 --> 02:00:58,960
built that image we'll talk more about

02:00:57,840 --> 02:01:01,280
images in a second

02:00:58,960 --> 02:01:03,119
it may or may not even have been bash

02:01:01,280 --> 02:01:04,560
okay like there's some container images

02:01:03,119 --> 02:01:05,920
i have that only have sh

02:01:04,560 --> 02:01:08,080
so it's not a bash shell it's just a

02:01:05,920 --> 02:01:09,840
regular uh whatever it's called c shell

02:01:08,080 --> 02:01:11,840
or something i forget what sh is called

02:01:09,840 --> 02:01:13,920
maybe someone on chat knows what is the

02:01:11,840 --> 02:01:14,639
default shell if you forget to set it

02:01:13,920 --> 02:01:16,719
right so

02:01:14,639 --> 02:01:18,320
it may not have a bash shell it may not

02:01:16,719 --> 02:01:21,360
have tools like ps

02:01:18,320 --> 02:01:23,119
or top but like let's see this let's see

02:01:21,360 --> 02:01:26,400
what this image looks like i don't know

02:01:23,119 --> 02:01:30,159
i've forgotten at this point qtl exec

02:01:26,400 --> 02:01:33,360
i t dash dash been bash

02:01:30,159 --> 02:01:37,440
okay so i'm inside it now so ps ps

02:01:33,360 --> 02:01:41,520
ef uh so there's no ps there's no top

02:01:37,440 --> 02:01:46,000
uh let's see cat etsy

02:01:41,520 --> 02:01:47,360
os release so we have a bash shell

02:01:46,000 --> 02:01:49,520
but we don't have much of the tools that

02:01:47,360 --> 02:01:50,320
you would expect inside it all right so

02:01:49,520 --> 02:01:53,760
like ps

02:01:50,320 --> 02:01:56,000
top uh let's see it's df here

02:01:53,760 --> 02:01:57,920
okay so i can use df to see exactly what

02:01:56,000 --> 02:01:59,440
i have so just keep that in mind that

02:01:57,920 --> 02:02:00,800
you might you know depending on the base

02:01:59,440 --> 02:02:02,239
image you've used

02:02:00,800 --> 02:02:04,080
uh you may or may not have the things

02:02:02,239 --> 02:02:07,040
you want so shell is the default

02:02:04,080 --> 02:02:08,239
shell if you don't have bash shell thank

02:02:07,040 --> 02:02:10,159
you for that jason

02:02:08,239 --> 02:02:11,280
uh so he responded to me there on the

02:02:10,159 --> 02:02:13,040
chat

02:02:11,280 --> 02:02:15,199
the um so just keep that in mind so

02:02:13,040 --> 02:02:17,440
exact tool is your your favorite tool

02:02:15,199 --> 02:02:18,960
you might do a job version what version

02:02:17,440 --> 02:02:20,639
java do i have here

02:02:18,960 --> 02:02:22,159
oh do i even have a java here oh and i

02:02:20,639 --> 02:02:23,679
actually don't you know why because this

02:02:22,159 --> 02:02:25,760
quark is application is compiled to

02:02:23,679 --> 02:02:27,599
native and doesn't need a java runtime

02:02:25,760 --> 02:02:29,280
that's funny i hadn't thought about it

02:02:27,599 --> 02:02:31,040
so if i was using my spring boot image

02:02:29,280 --> 02:02:32,960
because it needs a java runtime you

02:02:31,040 --> 02:02:36,000
would actually better type java java c

02:02:32,960 --> 02:02:37,920
things like that okay and then exit from

02:02:36,000 --> 02:02:40,480
that shell back into my mac

02:02:37,920 --> 02:02:41,920
shell in this case all right so a lot of

02:02:40,480 --> 02:02:42,480
just debugging tips there when it comes

02:02:41,920 --> 02:02:44,719
to log

02:02:42,480 --> 02:02:46,719
exec etc standard stuff you've seen

02:02:44,719 --> 02:02:47,520
before there's also another tool called

02:02:46,719 --> 02:02:50,400
kale

02:02:47,520 --> 02:02:51,440
do check out kale as another option all

02:02:50,400 --> 02:02:53,679
right let me show you this

02:02:51,440 --> 02:02:54,719
thing we call service magic all right

02:02:53,679 --> 02:02:55,280
and the reason i'm going to show it to

02:02:54,719 --> 02:02:56,400
you is because

02:02:55,280 --> 02:02:57,520
hopefully this will help you get your

02:02:56,400 --> 02:02:58,400
head in the game when it comes to these

02:02:57,520 --> 02:03:02,000
services

02:02:58,400 --> 02:03:05,040
qcdl get deployments all right

02:03:02,000 --> 02:03:05,040
let's wipe this one out

02:03:05,440 --> 02:03:10,719
actually let's delete the whole

02:03:07,280 --> 02:03:12,960
namespace let's wipe out the whole thing

02:03:10,719 --> 02:03:14,480
uh this was called my stuff right let me

02:03:12,960 --> 02:03:17,840
double check cube ctl

02:03:14,480 --> 02:03:19,199
get namespaces sometimes it's just

02:03:17,840 --> 02:03:21,040
easier to wipe out the namespace and

02:03:19,199 --> 02:03:25,199
everything inside it

02:03:21,040 --> 02:03:28,000
uh my stuff oh my space my space

02:03:25,199 --> 02:03:29,199
all righty yeah get rid of that you'll

02:03:28,000 --> 02:03:30,800
notice it takes a little while for the

02:03:29,199 --> 02:03:31,040
delete to return on a namespace because

02:03:30,800 --> 02:03:32,320
it

02:03:31,040 --> 02:03:34,080
is going to go out there and try to rip

02:03:32,320 --> 02:03:36,000
everything down so it takes time

02:03:34,080 --> 02:03:37,599
and it basically wants to nicely clean

02:03:36,000 --> 02:03:39,119
everything up and then respond back to

02:03:37,599 --> 02:03:40,239
you so you are blocked while that thing

02:03:39,119 --> 02:03:42,000
is occurring

02:03:40,239 --> 02:03:44,000
i'm going to let it be blocked i'm going

02:03:42,000 --> 02:03:44,800
to say i'm going to go ahead and do this

02:03:44,000 --> 02:03:46,480
thing now

02:03:44,800 --> 02:03:48,000
let's go ahead and go to the fun stuff

02:03:46,480 --> 02:03:49,599
namespace

02:03:48,000 --> 02:03:52,000
all right again you can set context

02:03:49,599 --> 02:03:53,119
using this command or use the cuban s

02:03:52,000 --> 02:03:56,560
command

02:03:53,119 --> 02:03:58,480
q s fun stuff

02:03:56,560 --> 02:04:01,040
all right all right that's another way

02:03:58,480 --> 02:04:02,880
to do it so get all in fun stuff there's

02:04:01,040 --> 02:04:04,719
nothing in fun stuff so far let's go put

02:04:02,880 --> 02:04:06,480
some stuff in here

02:04:04,719 --> 02:04:08,840
let's go put some stuff in the fun stuff

02:04:06,480 --> 02:04:11,360
one all right let's deploy this python

02:04:08,840 --> 02:04:14,560
app

02:04:11,360 --> 02:04:14,960
let's deploy this my go app so python

02:04:14,560 --> 02:04:18,159
app

02:04:14,960 --> 02:04:19,679
a go app and a node.js app all right so

02:04:18,159 --> 02:04:21,520
just three completely different things

02:04:19,679 --> 02:04:22,880
seemingly speaking

02:04:21,520 --> 02:04:25,520
and you kind of see right there see it

02:04:22,880 --> 02:04:27,679
says app my go at my node

02:04:25,520 --> 02:04:29,920
at my python it's doing container

02:04:27,679 --> 02:04:31,679
creating that's because it is pulling

02:04:29,920 --> 02:04:33,679
if i say get events we should see some

02:04:31,679 --> 02:04:35,840
pullings and pullings

02:04:33,679 --> 02:04:37,520
and then eventually we'll see pulled so

02:04:35,840 --> 02:04:38,000
it's pulling that image again smaller

02:04:37,520 --> 02:04:40,079
images

02:04:38,000 --> 02:04:42,320
come down faster and by the way this

02:04:40,079 --> 02:04:42,800
pulling happens on every worker node

02:04:42,320 --> 02:04:45,040
that the

02:04:42,800 --> 02:04:46,719
the container runs on so if you have six

02:04:45,040 --> 02:04:48,639
worker nodes in your cluster

02:04:46,719 --> 02:04:50,000
and you're constantly changing that app

02:04:48,639 --> 02:04:51,040
right it's got to pull the image to all

02:04:50,000 --> 02:04:52,800
six nodes

02:04:51,040 --> 02:04:54,639
there are various tools to help you

02:04:52,800 --> 02:04:55,840
pre-pull the images if you're really

02:04:54,639 --> 02:04:57,760
worried about that

02:04:55,840 --> 02:04:59,119
uh and but otherwise you'll have to wait

02:04:57,760 --> 02:05:01,679
for the pulling per

02:04:59,119 --> 02:05:02,320
worker node okay uh just keep that in

02:05:01,679 --> 02:05:03,760
mind

02:05:02,320 --> 02:05:06,239
all right looks like we got a couple of

02:05:03,760 --> 02:05:07,760
them running here the my node is taking

02:05:06,239 --> 02:05:10,480
some time i think that is a big one the

02:05:07,760 --> 02:05:10,480
mind node one

02:05:10,639 --> 02:05:14,880
okay all right so that's good now let's

02:05:13,440 --> 02:05:17,199
create our service

02:05:14,880 --> 02:05:19,040
notice the service selector says app my

02:05:17,199 --> 02:05:22,719
stuff

02:05:19,040 --> 02:05:25,360
okay and in service my pods

02:05:22,719 --> 02:05:27,199
answers my pods so it's looking for

02:05:25,360 --> 02:05:29,599
in-service my pods let's go and run that

02:05:27,199 --> 02:05:29,599
service

02:05:29,760 --> 02:05:35,840
and let's see we got there's no there's

02:05:32,159 --> 02:05:35,840
not many endpoints

02:05:36,639 --> 02:05:44,320
see it says none describe

02:05:40,960 --> 02:05:46,079
service my service all right see

02:05:44,320 --> 02:05:48,480
endpoints none

02:05:46,079 --> 02:05:50,079
okay because none so far for the

02:05:48,480 --> 02:05:54,960
selector

02:05:50,079 --> 02:05:56,800
the selector says uh where to go uh

02:05:54,960 --> 02:05:58,079
man every now and then they kind of move

02:05:56,800 --> 02:06:01,119
things around i get confused

02:05:58,079 --> 02:06:03,679
so let's do this all right

02:06:01,119 --> 02:06:05,599
service and get so not to describe it's

02:06:03,679 --> 02:06:08,719
in the get

02:06:05,599 --> 02:06:10,320
and oh yeah there we go

02:06:08,719 --> 02:06:12,320
the selector inserts my pods you see

02:06:10,320 --> 02:06:15,599
that that's that's basically

02:06:12,320 --> 02:06:17,040
there's no pod matching that label okay

02:06:15,599 --> 02:06:19,679
so let's go ahead and run our little

02:06:17,040 --> 02:06:19,679
looper here

02:06:20,239 --> 02:06:24,239
and let's do that all right i'm just

02:06:23,119 --> 02:06:25,280
copying and pasting for the sake of

02:06:24,239 --> 02:06:26,960
going fast

02:06:25,280 --> 02:06:28,560
okay and we're getting all these errors

02:06:26,960 --> 02:06:30,000
because there are no pods backing up

02:06:28,560 --> 02:06:32,800
that service

02:06:30,000 --> 02:06:34,960
all right no pods backing up the service

02:06:32,800 --> 02:06:36,480
so how do we add a pod to it so all we

02:06:34,960 --> 02:06:38,560
got to do is label a pod

02:06:36,480 --> 02:06:40,079
we're going to label the my python pod

02:06:38,560 --> 02:06:42,480
with this additional label called

02:06:40,079 --> 02:06:44,079
in-service my pods

02:06:42,480 --> 02:06:45,840
so watch what happens when we add the

02:06:44,079 --> 02:06:47,360
label

02:06:45,840 --> 02:06:49,520
immediately we start getting responses

02:06:47,360 --> 02:06:52,159
from the python pod and you can see here

02:06:49,520 --> 02:06:54,719
is the new label it says app my python

02:06:52,159 --> 02:06:55,280
in service my pods if i remove that

02:06:54,719 --> 02:06:56,719
label

02:06:55,280 --> 02:06:58,880
and you do it by just putting the minus

02:06:56,719 --> 02:07:01,280
sign here

02:06:58,880 --> 02:07:02,320
all right it's gone so our users are

02:07:01,280 --> 02:07:05,520
getting arrows again

02:07:02,320 --> 02:07:07,599
if i add it back we get python but this

02:07:05,520 --> 02:07:09,360
what this means is if you're paying

02:07:07,599 --> 02:07:11,440
attention this is kind of how you could

02:07:09,360 --> 02:07:12,880
do some interesting blue green style

02:07:11,440 --> 02:07:15,520
deployments right with

02:07:12,880 --> 02:07:17,280
a regular old kubernetes simply by

02:07:15,520 --> 02:07:18,560
labeling your pods correctly they show

02:07:17,280 --> 02:07:22,719
up in the service or not

02:07:18,560 --> 02:07:25,239
and so if i do cube ctl get endpoints

02:07:22,719 --> 02:07:26,560
we see we have one there which is 172

02:07:25,239 --> 02:07:28,000
02:07:26,560 --> 02:07:30,000
that should be the ip address that maps

02:07:28,000 --> 02:07:30,960
to that pod right there if i say cube

02:07:30,000 --> 02:07:34,000
ctl

02:07:30,960 --> 02:07:36,880
get pods o wide you'll see

02:07:34,000 --> 02:07:37,599
that is the 11703 that is in fact it

02:07:36,880 --> 02:07:40,000
okay

02:07:37,599 --> 02:07:40,960
and it has the label that's how we know

02:07:40,000 --> 02:07:45,199
but if i

02:07:40,960 --> 02:07:48,400
subtract that label remove it

02:07:45,199 --> 02:07:50,960
it's gone if i say cube ctl get

02:07:48,400 --> 02:07:50,960
endpoints

02:07:51,199 --> 02:07:55,360
all right we're back to none in points

02:07:52,719 --> 02:07:58,960
again so that is a bit of the magic

02:07:55,360 --> 02:08:02,239
okay so let me let me do the python

02:07:58,960 --> 02:08:04,400
let me do the go let me do the node

02:08:02,239 --> 02:08:06,079
let's add them all in so even though

02:08:04,400 --> 02:08:06,960
these are implemented using different

02:08:06,079 --> 02:08:08,480
technology

02:08:06,960 --> 02:08:10,480
it doesn't matter as long as they have

02:08:08,480 --> 02:08:12,159
the same basic api in this case

02:08:10,480 --> 02:08:14,239
it's doing a get request that's what

02:08:12,159 --> 02:08:16,960
curl is doing a get request http get

02:08:14,239 --> 02:08:18,800
against the root on that system as long

02:08:16,960 --> 02:08:20,960
as that works we're good to go

02:08:18,800 --> 02:08:23,280
okay you can see now it's load balancing

02:08:20,960 --> 02:08:24,719
across the python the node.js the go

02:08:23,280 --> 02:08:26,639
it's kind of all random at this point

02:08:24,719 --> 02:08:29,760
because of the way we did it but

02:08:26,639 --> 02:08:32,159
it is working as we expect it to if i

02:08:29,760 --> 02:08:34,800
say qctl getenpoints

02:08:32,159 --> 02:08:36,719
right you see that is the magic of the

02:08:34,800 --> 02:08:37,119
service right there and if i come back

02:08:36,719 --> 02:08:40,239
and

02:08:37,119 --> 02:08:43,520
remove one of these guys let's remove go

02:08:40,239 --> 02:08:46,079
up remove go type

02:08:43,520 --> 02:08:49,040
the minus cyber go is going to drop out

02:08:46,079 --> 02:08:52,719
and it's just python a node

02:08:49,040 --> 02:08:55,760
and if i come over here and minus out

02:08:52,719 --> 02:08:55,760
the python

02:08:56,079 --> 02:09:01,199
it's going to just be node cube ctl get

02:08:58,800 --> 02:09:01,199
endpoints

02:09:01,280 --> 02:09:04,639
all right so i want you guys to be aware

02:09:03,119 --> 02:09:05,599
of that because that's an incredibly

02:09:04,639 --> 02:09:07,040
powerful construct

02:09:05,599 --> 02:09:08,159
and because of that construct it's one

02:09:07,040 --> 02:09:09,040
of the most powerful aspects of

02:09:08,159 --> 02:09:11,280
kubernetes

02:09:09,040 --> 02:09:13,280
right that concept of being able to just

02:09:11,280 --> 02:09:15,840
simply map your services on the fly

02:09:13,280 --> 02:09:18,000
your end users deal with the service and

02:09:15,840 --> 02:09:20,000
the pods are ephemeral the pod ip

02:09:18,000 --> 02:09:21,280
address is ephemeral that's why you

02:09:20,000 --> 02:09:23,119
don't really worry about the pi ip

02:09:21,280 --> 02:09:25,679
addresses that's why it's kind of hidden

02:09:23,119 --> 02:09:27,440
over here under the o wide command so

02:09:25,679 --> 02:09:29,360
here you see the actual

02:09:27,440 --> 02:09:30,960
pod ip and you actually see the node

02:09:29,360 --> 02:09:33,119
it's running on that's your worker node

02:09:30,960 --> 02:09:35,119
in the case of mini cube it's all one of

02:09:33,119 --> 02:09:38,159
the same if i come over here to my

02:09:35,119 --> 02:09:41,920
big old cluster qcdl get pods

02:09:38,159 --> 02:09:44,159
uh let's do all namespaces

02:09:41,920 --> 02:09:45,520
oh wide right this is going to be a big

02:09:44,159 --> 02:09:47,280
mess of stuff

02:09:45,520 --> 02:09:48,560
but you will see you know it'll

02:09:47,280 --> 02:09:51,520
basically show you this is the

02:09:48,560 --> 02:09:52,639
node that it's on the ip address ip

02:09:51,520 --> 02:09:54,480
address for that pod

02:09:52,639 --> 02:09:55,840
the node that it's on and you can see i

02:09:54,480 --> 02:09:57,119
have a bunch of different nodes here on

02:09:55,840 --> 02:09:58,719
this big old cluster

02:09:57,119 --> 02:10:01,280
you just do get nodes running on my

02:09:58,719 --> 02:10:03,360
google environment

02:10:01,280 --> 02:10:05,520
so james word there you like the fact

02:10:03,360 --> 02:10:06,880
i'm running on the google environment

02:10:05,520 --> 02:10:09,599
as an example if he's still with us

02:10:06,880 --> 02:10:12,320
let's see if he's still with us okay

02:10:09,599 --> 02:10:13,920
there we go so that that's what we call

02:10:12,320 --> 02:10:15,520
service magic so that little exercise

02:10:13,920 --> 02:10:16,239
kind of helps you do some pretty fun

02:10:15,520 --> 02:10:18,079
stuff

02:10:16,239 --> 02:10:19,599
when it comes to working with them

02:10:18,079 --> 02:10:21,599
working with this environment

02:10:19,599 --> 02:10:23,599
okay there's also blue green deployments

02:10:21,599 --> 02:10:26,000
which it's very similar

02:10:23,599 --> 02:10:27,280
so you can kind of check that out or you

02:10:26,000 --> 02:10:29,199
should check it out

02:10:27,280 --> 02:10:30,880
because it's very similar in what you

02:10:29,199 --> 02:10:31,520
can do but you can kind of see how you

02:10:30,880 --> 02:10:33,920
can fall

02:10:31,520 --> 02:10:34,960
fail over from blue to green right with

02:10:33,920 --> 02:10:36,719
the i can go to

02:10:34,960 --> 02:10:38,079
python version the go version the

02:10:36,719 --> 02:10:40,400
node.js version

02:10:38,079 --> 02:10:42,719
all that pretty quickly okay that is

02:10:40,400 --> 02:10:44,079
what the green concept is all about

02:10:42,719 --> 02:10:46,159
right the ability to kind of fail over

02:10:44,079 --> 02:10:47,360
between the two and notice we're using a

02:10:46,159 --> 02:10:50,239
patch command here

02:10:47,360 --> 02:10:51,119
so cube control patch and we're patching

02:10:50,239 --> 02:10:52,560
the uh

02:10:51,119 --> 02:10:54,639
the service right we're actually

02:10:52,560 --> 02:10:56,800
patching it so you could edit it

02:10:54,639 --> 02:10:58,960
you could redeploy the yaml or you could

02:10:56,800 --> 02:11:00,800
just patch the one live in production

02:10:58,960 --> 02:11:02,079
and watch the bits flip back and forth

02:11:00,800 --> 02:11:04,480
it's pretty awesome

02:11:02,079 --> 02:11:05,199
okay so there's the patch command there

02:11:04,480 --> 02:11:09,199
too

02:11:05,199 --> 02:11:10,719
very powerful concept okay so let me

02:11:09,199 --> 02:11:12,239
yeah let's go here wait i want to get

02:11:10,719 --> 02:11:15,199
you to the next section

02:11:12,239 --> 02:11:17,440
okay next section here cube ctl get name

02:11:15,199 --> 02:11:21,360
spaces

02:11:17,440 --> 02:11:23,440
cube ctl delete uh namespace

02:11:21,360 --> 02:11:25,280
fun stuff let's just get rid of that one

02:11:23,440 --> 02:11:26,880
and then we'll we'll see those pods go

02:11:25,280 --> 02:11:28,880
away up here

02:11:26,880 --> 02:11:30,560
okay it's gonna remove its deployment

02:11:28,880 --> 02:11:31,760
remove the replica sets then eventually

02:11:30,560 --> 02:11:33,119
tear down the pods

02:11:31,760 --> 02:11:35,040
keep in mind the pod is really what's

02:11:33,119 --> 02:11:40,079
running your code right so the pod

02:11:35,040 --> 02:11:42,079
is the the container of your application

02:11:40,079 --> 02:11:43,920
all right there it is going away now so

02:11:42,079 --> 02:11:45,599
let's talk about building images

02:11:43,920 --> 02:11:47,760
all right we've been so far we've done

02:11:45,599 --> 02:11:49,520
everything with using existing images

02:11:47,760 --> 02:11:51,840
and the building images part is pretty

02:11:49,520 --> 02:11:53,119
important okay so let's kind of do this

02:11:51,840 --> 02:11:55,199
from scratch

02:11:53,119 --> 02:11:57,280
all right from not complete scratch

02:11:55,199 --> 02:11:59,679
we'll just take an existing one

02:11:57,280 --> 02:12:02,320
i have a hello world let's go into the

02:11:59,679 --> 02:12:04,000
spring boot hello world

02:12:02,320 --> 02:12:06,000
okay let me bring up my visual studio

02:12:04,000 --> 02:12:08,800
code here

02:12:06,000 --> 02:12:10,079
let's see where's the java code for it

02:12:08,800 --> 02:12:12,000
here we go

02:12:10,079 --> 02:12:15,040
it says howdy right now let's actually

02:12:12,000 --> 02:12:17,679
make this uh namaste

02:12:15,040 --> 02:12:20,480
okay yeah yeah yeah vs code go away all

02:12:17,679 --> 02:12:23,679
right so i made the greeting namaste

02:12:20,480 --> 02:12:26,560
okay so i'm going to save that

02:12:23,679 --> 02:12:28,239
let me close that don't save that all

02:12:26,560 --> 02:12:29,440
right so i'm just making a piece of a

02:12:28,239 --> 02:12:30,480
java code change there's a lot of things

02:12:29,440 --> 02:12:32,239
this thing is doing

02:12:30,480 --> 02:12:34,400
like it's actually asking the jvm for

02:12:32,239 --> 02:12:35,760
its resources this becomes important by

02:12:34,400 --> 02:12:38,960
the way because java will

02:12:35,760 --> 02:12:40,159
blow up on a containerized world in a c

02:12:38,960 --> 02:12:40,880
groups world if you don't treat it

02:12:40,159 --> 02:12:42,800
carefully

02:12:40,880 --> 02:12:44,560
and have the right version of java so

02:12:42,800 --> 02:12:45,360
this actually demonstrates how to blow

02:12:44,560 --> 02:12:47,119
up

02:12:45,360 --> 02:12:48,719
java which is kind of fun and for

02:12:47,119 --> 02:12:50,560
everybody here is really a node.js

02:12:48,719 --> 02:12:53,119
and anti-java person this is your moment

02:12:50,560 --> 02:12:56,480
to gloat on watching java die

02:12:53,119 --> 02:12:58,239
or python right go etc because it's

02:12:56,480 --> 02:12:59,599
fairly easy to do it if you know the

02:12:58,239 --> 02:13:01,360
trick to it and it actually happens in a

02:12:59,599 --> 02:13:02,800
lot of production runtime environments a

02:13:01,360 --> 02:13:04,000
lot of red hat customers are blowing up

02:13:02,800 --> 02:13:06,159
their jvms

02:13:04,000 --> 02:13:07,679
and so we show you how to do it so you

02:13:06,159 --> 02:13:08,560
can figure out how to work around in the

02:13:07,679 --> 02:13:11,679
future

02:13:08,560 --> 02:13:14,960
any case let's say we do our maven clean

02:13:11,679 --> 02:13:16,239
compile package so basically i made a

02:13:14,960 --> 02:13:17,920
change to the code

02:13:16,239 --> 02:13:19,280
i'm going to compile the code here on my

02:13:17,920 --> 02:13:22,560
local machine

02:13:19,280 --> 02:13:25,440
that gives us this fat jar right here so

02:13:22,560 --> 02:13:27,199
right there so if i say java dash jar

02:13:25,440 --> 02:13:29,440
target and then boot demo

02:13:27,199 --> 02:13:30,880
jar this is going to run it on my local

02:13:29,440 --> 02:13:32,400
machine

02:13:30,880 --> 02:13:33,920
and we'll wait for a second for spring

02:13:32,400 --> 02:13:36,800
boot to come up okay it's up

02:13:33,920 --> 02:13:38,719
curl localhost 8080. now this is

02:13:36,800 --> 02:13:41,920
localhost on my mac

02:13:38,719 --> 02:13:43,679
and it says namaste from springboot okay

02:13:41,920 --> 02:13:45,440
so that is your you know let's say

02:13:43,679 --> 02:13:45,760
that's your code that's the code you

02:13:45,440 --> 02:13:48,400
want

02:13:45,760 --> 02:13:48,880
in production so the next step is to

02:13:48,400 --> 02:13:51,599
build

02:13:48,880 --> 02:13:52,719
a docker image now here's the part

02:13:51,599 --> 02:13:54,320
that's tricky

02:13:52,719 --> 02:13:55,679
there's a hundred different ways to

02:13:54,320 --> 02:13:56,000
build a docker image i'm going to show

02:13:55,679 --> 02:13:59,280
you

02:13:56,000 --> 02:14:01,520
the most basic way to build a docker

02:13:59,280 --> 02:14:02,560
image okay the most basic way and that

02:14:01,520 --> 02:14:05,599
is you have to have this

02:14:02,560 --> 02:14:07,280
docker file okay and the docker file is

02:14:05,599 --> 02:14:10,320
gonna have a from command in it

02:14:07,280 --> 02:14:13,760
it's gonna be from some base image

02:14:10,320 --> 02:14:16,480
if you don't specify the repository name

02:14:13,760 --> 02:14:18,560
think of it as docker io by default okay

02:14:16,480 --> 02:14:20,880
so everything is docker io by default

02:14:18,560 --> 02:14:22,800
which basically means docker hub so if i

02:14:20,880 --> 02:14:26,960
come over here to

02:14:22,800 --> 02:14:28,159
docker hub that's where that image is

02:14:26,960 --> 02:14:30,800
going to come from

02:14:28,159 --> 02:14:32,159
i could pull it from quayio i could pull

02:14:30,800 --> 02:14:33,520
it from gcrio

02:14:32,159 --> 02:14:35,679
i could pull it from some other place

02:14:33,520 --> 02:14:36,239
and i don't need to sign in uh let's see

02:14:35,679 --> 02:14:37,599
here

02:14:36,239 --> 02:14:40,239
just come back here and let's go get

02:14:37,599 --> 02:14:43,440
open jdk

02:14:40,239 --> 02:14:43,760
all right then open jdk okay and you can

02:14:43,440 --> 02:14:46,079
say

02:14:43,760 --> 02:14:47,119
there's been 500 million polls of this

02:14:46,079 --> 02:14:51,920
image

02:14:47,119 --> 02:14:55,760
um tags you can see there's lots of tags

02:14:51,920 --> 02:14:57,679
and i'm using tags 8u151

02:14:55,760 --> 02:14:58,960
let's actually just search for it here

02:14:57,679 --> 02:15:01,599
okay there it is

02:14:58,960 --> 02:15:02,239
so there's the the tag for it okay last

02:15:01,599 --> 02:15:04,400
updated

02:15:02,239 --> 02:15:07,040
two years ago and actually i'm not using

02:15:04,400 --> 02:15:09,040
these alpine ones

02:15:07,040 --> 02:15:10,239
uh it's not the slim slim you can see

02:15:09,040 --> 02:15:11,440
there's all these different options

02:15:10,239 --> 02:15:13,360
there it is i'm using that one from

02:15:11,440 --> 02:15:14,880
three years ago all right

02:15:13,360 --> 02:15:16,800
now this is important that you

02:15:14,880 --> 02:15:18,880
understand this you need to know where

02:15:16,800 --> 02:15:20,960
your container images are coming from

02:15:18,880 --> 02:15:22,480
because depending on where you're

02:15:20,960 --> 02:15:23,760
getting this base image from

02:15:22,480 --> 02:15:26,000
someone could have snuck in a nice

02:15:23,760 --> 02:15:27,760
little bitcoin miner in that image

02:15:26,000 --> 02:15:29,599
or whatever backdoor that they might

02:15:27,760 --> 02:15:31,599
want because it is a linux

02:15:29,599 --> 02:15:32,960
image and therefore anything that linux

02:15:31,599 --> 02:15:34,880
can do this

02:15:32,960 --> 02:15:36,400
can do so if they want to have some

02:15:34,880 --> 02:15:38,079
stuff hidden in there they can

02:15:36,400 --> 02:15:39,599
so you do want to make sure that you've

02:15:38,079 --> 02:15:40,719
double checked where you're getting your

02:15:39,599 --> 02:15:43,440
images from

02:15:40,719 --> 02:15:44,000
is it good is it you know any backdoors

02:15:43,440 --> 02:15:47,119
in there

02:15:44,000 --> 02:15:50,400
are there violations in that image

02:15:47,119 --> 02:15:52,159
for instance if you go to quay io uh one

02:15:50,400 --> 02:15:53,920
of the things we have

02:15:52,159 --> 02:15:56,320
this and crayola by the way is a red hat

02:15:53,920 --> 02:15:58,400
service uh let's see

02:15:56,320 --> 02:15:59,280
let's see will it let me search here i

02:15:58,400 --> 02:16:00,800
don't know i haven't looked i haven't

02:15:59,280 --> 02:16:02,880
looked at this thing in so long

02:16:00,800 --> 02:16:04,800
um here i'm just picking on something

02:16:02,880 --> 02:16:07,599
random but

02:16:04,800 --> 02:16:09,119
it'll actually give you a security scan

02:16:07,599 --> 02:16:09,520
in this case you can see it's all passed

02:16:09,119 --> 02:16:11,119
here

02:16:09,520 --> 02:16:12,480
if you look at some of my images i got

02:16:11,119 --> 02:16:12,960
all kinds of security vulnerabilities in

02:16:12,480 --> 02:16:14,800
mind

02:16:12,960 --> 02:16:16,239
because i haven't updated them so just

02:16:14,800 --> 02:16:17,440
be careful of where you get your base

02:16:16,239 --> 02:16:18,239
image from all right that's kind of the

02:16:17,440 --> 02:16:19,760
point here

02:16:18,239 --> 02:16:21,520
and so once you have that base image

02:16:19,760 --> 02:16:22,159
identified and by the way this is not a

02:16:21,520 --> 02:16:23,760
good one

02:16:22,159 --> 02:16:24,880
the one i picked here is not a good one

02:16:23,760 --> 02:16:26,079
i just picked it because it's kind of

02:16:24,880 --> 02:16:28,639
fun to show you

02:16:26,079 --> 02:16:29,520
8u151 you've got to have your from then

02:16:28,639 --> 02:16:31,840
you basically

02:16:29,520 --> 02:16:33,200
set up your work directory you copy in

02:16:31,840 --> 02:16:36,639
what you want in this case it's going to

02:16:33,200 --> 02:16:38,240
go get the boot demo 1.0.0.jar

02:16:36,639 --> 02:16:42,479
let me double check that is in fact the

02:16:38,240 --> 02:16:44,639
one lsls target

02:16:42,479 --> 02:16:45,599
all right yep that's the one that's the

02:16:44,639 --> 02:16:46,719
one we're going to pick it up off our

02:16:45,599 --> 02:16:48,000
hard drive

02:16:46,719 --> 02:16:49,760
we're going to drop it into this

02:16:48,000 --> 02:16:50,559
container image we're going to expose

02:16:49,760 --> 02:16:52,479
02:16:50,559 --> 02:16:53,920
and then when we go to run it at runtime

02:16:52,479 --> 02:16:55,760
it's going to run java

02:16:53,920 --> 02:16:57,280
java options which i didn't specify any

02:16:55,760 --> 02:16:58,800
dash jar jar name

02:16:57,280 --> 02:17:01,519
so in other words at runtime it's going

02:16:58,800 --> 02:17:02,639
to do exactly what you saw here

02:17:01,519 --> 02:17:04,319
except there's not going to be a target

02:17:02,639 --> 02:17:05,120
directory anymore it's going to do

02:17:04,319 --> 02:17:07,359
exactly that

02:17:05,120 --> 02:17:08,319
okay this is like bare-bones super easy

02:17:07,359 --> 02:17:10,000
java

02:17:08,319 --> 02:17:12,399
you would have node there if it was your

02:17:10,000 --> 02:17:13,120
node or npm start if it's your node

02:17:12,399 --> 02:17:15,120
application

02:17:13,120 --> 02:17:16,719
or your python app right it all depends

02:17:15,120 --> 02:17:19,040
on how you configure that image

02:17:16,719 --> 02:17:20,319
but you would just run your app okay so

02:17:19,040 --> 02:17:22,960
you're gonna have a docker file

02:17:20,319 --> 02:17:24,080
once you have your docker file oh let me

02:17:22,960 --> 02:17:26,559
look at this real quick uh

02:17:24,080 --> 02:17:27,200
docker yeah this is the one that's

02:17:26,559 --> 02:17:31,040
mapped to

02:17:27,200 --> 02:17:32,240
my mini cube let's not map the one let's

02:17:31,040 --> 02:17:34,479
ignore the one that's mapped to mini

02:17:32,240 --> 02:17:36,319
cube

02:17:34,479 --> 02:17:38,160
only because i don't want to confuse

02:17:36,319 --> 02:17:42,000
folks

02:17:38,160 --> 02:17:43,599
or confuse myself all right so yeah so

02:17:42,000 --> 02:17:45,519
there's no docker host here if there's

02:17:43,599 --> 02:17:46,719
no docker host set it defaults to the

02:17:45,519 --> 02:17:50,719
docker daemon

02:17:46,719 --> 02:17:55,439
uh for docker desktop on mac and windows

02:17:50,719 --> 02:17:57,200
okay so let's go here eps uh hello world

02:17:55,439 --> 02:17:59,120
spring boot so you're gonna do docker

02:17:57,200 --> 02:18:00,639
build dash t and i'm gonna go ahead and

02:17:59,120 --> 02:18:01,760
put in the repository name because i

02:18:00,639 --> 02:18:03,200
know i'm gonna push it there this is

02:18:01,760 --> 02:18:06,960
just a little shortcut

02:18:03,200 --> 02:18:09,280
my boot v8 i think i have let's go

02:18:06,960 --> 02:18:11,200
double check i don't have a v8 there

02:18:09,280 --> 02:18:13,120
let's see my boot no there's a seven

02:18:11,200 --> 02:18:16,559
there's a six there's no v8

02:18:13,120 --> 02:18:19,040
let's do a v8 here and then dot dot is

02:18:16,559 --> 02:18:20,080
where to pick up the files to be loaded

02:18:19,040 --> 02:18:22,000
into my image

02:18:20,080 --> 02:18:23,439
so dot says in the current directory i'm

02:18:22,000 --> 02:18:24,160
sitting in that's where it's docker file

02:18:23,439 --> 02:18:25,599
is

02:18:24,160 --> 02:18:27,280
all right so it built that image real

02:18:25,599 --> 02:18:28,800
fast it builds real fast by the way if

02:18:27,280 --> 02:18:31,200
you've built it before and some of the

02:18:28,800 --> 02:18:32,639
image layers are already cached

02:18:31,200 --> 02:18:33,840
i could do a docker run to double check

02:18:32,639 --> 02:18:35,280
it real quick i'm going to trust that

02:18:33,840 --> 02:18:36,559
it's okay

02:18:35,280 --> 02:18:39,280
i should do a docker run but i'm going

02:18:36,559 --> 02:18:42,479
to cheat cue i o

02:18:39,280 --> 02:18:43,439
uh burr setter and then we're going to

02:18:42,479 --> 02:18:46,399
go to

02:18:43,439 --> 02:18:48,639
my boot v8 so what we're doing is we're

02:18:46,399 --> 02:18:51,040
pushing it from the local docker demon

02:18:48,639 --> 02:18:52,080
out across the internet to the coil

02:18:51,040 --> 02:18:53,760
repository

02:18:52,080 --> 02:18:55,439
i've already done my docker login by the

02:18:53,760 --> 02:18:57,200
way and docker login is how you log in

02:18:55,439 --> 02:18:58,880
so it knows that this is burr

02:18:57,200 --> 02:19:00,719
from my machine so i've already

02:18:58,880 --> 02:19:03,760
authenticated

02:19:00,719 --> 02:19:06,000
and if i come over here and refresh now

02:19:03,760 --> 02:19:07,040
we should see there's a recent v8 yeah a

02:19:06,000 --> 02:19:10,399
few seconds ago

02:19:07,040 --> 02:19:12,559
v8 was added so there it is and now

02:19:10,399 --> 02:19:14,000
i can just use it okay and by the way

02:19:12,559 --> 02:19:15,519
anybody here on this call right now

02:19:14,000 --> 02:19:16,399
could use it also so you could do a

02:19:15,519 --> 02:19:18,479
docker run

02:19:16,399 --> 02:19:20,719
with those same coordinates and run it

02:19:18,479 --> 02:19:25,439
so let's try that repair so docker run

02:19:20,719 --> 02:19:28,240
dash i t dash p

02:19:25,439 --> 02:19:29,840
8080 i think i've been doing this right

02:19:28,240 --> 02:19:31,760
i've spent so long

02:19:29,840 --> 02:19:33,280
because i don't use docker as much as i

02:19:31,760 --> 02:19:34,080
used to because there's all these other

02:19:33,280 --> 02:19:38,639
ways to do this

02:19:34,080 --> 02:19:38,639
okay so quay io for sutter

02:19:38,960 --> 02:19:46,840
my boot v8

02:19:42,319 --> 02:19:50,479
i think i did that right let's see here

02:19:46,840 --> 02:19:53,120
okay yeah it looks okay curl localhost

02:19:50,479 --> 02:19:53,120
8080.

02:19:54,399 --> 02:19:58,399
there we go namaste springboot that's my

02:19:56,399 --> 02:20:00,560
v8 one right there

02:19:58,399 --> 02:20:02,000
okay let me control c so i did the

02:20:00,560 --> 02:20:03,680
docker run you guys could do the same

02:20:02,000 --> 02:20:05,920
docker run on your machine

02:20:03,680 --> 02:20:08,240
to pull my image and run it on right

02:20:05,920 --> 02:20:09,439
there okay and so the dash p8080 says

02:20:08,240 --> 02:20:12,880
map the internal

02:20:09,439 --> 02:20:14,800
8080 to mics to my localhost 8080.

02:20:12,880 --> 02:20:16,240
by the way i'll post this into the chat

02:20:14,800 --> 02:20:18,240
okay so you guys can have it

02:20:16,240 --> 02:20:19,359
and that basically allows me to run uh

02:20:18,240 --> 02:20:22,880
that docker image

02:20:19,359 --> 02:20:23,280
okay now now that you have your docker

02:20:22,880 --> 02:20:25,040
image

02:20:23,280 --> 02:20:26,399
you just gotta make it run on your

02:20:25,040 --> 02:20:28,000
kubernetes you remember there's that

02:20:26,399 --> 02:20:29,920
create deployment command

02:20:28,000 --> 02:20:31,280
so we had that create deployment command

02:20:29,920 --> 02:20:33,280
so you could do that

02:20:31,280 --> 02:20:34,479
okay that create deployment command is

02:20:33,280 --> 02:20:36,319
just for

02:20:34,479 --> 02:20:37,760
real-time kind of hacking right

02:20:36,319 --> 02:20:38,960
real-time kind of hacking so that's what

02:20:37,760 --> 02:20:41,120
you would use it for

02:20:38,960 --> 02:20:43,280
oh by the way i we have the user go

02:20:41,120 --> 02:20:45,280
through cis resources so you'll see

02:20:43,280 --> 02:20:46,479
how it reports its resources and

02:20:45,280 --> 02:20:47,920
actually let's go and show you that

02:20:46,479 --> 02:20:50,880
because that could be an important

02:20:47,920 --> 02:20:50,880
an important element

02:20:51,200 --> 02:20:55,120
okay let me show you this because it

02:20:53,520 --> 02:20:56,479
misreports its resources

02:20:55,120 --> 02:20:58,640
and if anybody has to manage these

02:20:56,479 --> 02:21:01,120
things in production you will run into

02:20:58,640 --> 02:21:03,680
this issue

02:21:01,120 --> 02:21:03,680
docker run

02:21:05,200 --> 02:21:07,520
come on

02:21:08,880 --> 02:21:12,160
i thought i had the docker run here

02:21:10,000 --> 02:21:12,880
where'd it go darker run let's do it

02:21:12,160 --> 02:21:16,080
again

02:21:12,880 --> 02:21:20,160
uh let's say dash dash rem yeah rm

02:21:16,080 --> 02:21:22,080
i t p the ram bass says delete it when

02:21:20,160 --> 02:21:25,120
i'm done with it so after i close it it

02:21:22,080 --> 02:21:30,240
auto deletes it okay uh

02:21:25,120 --> 02:21:30,240
for center my boot v8

02:21:30,399 --> 02:21:35,600
come on now there it is loading up again

02:21:33,920 --> 02:21:37,120
this by the way is all happening in the

02:21:35,600 --> 02:21:38,640
context of my darker daemon

02:21:37,120 --> 02:21:41,200
it is not running in my mini cube at

02:21:38,640 --> 02:21:44,399
this point okay but there it is

02:21:41,200 --> 02:21:45,920
if i say sys resources

02:21:44,399 --> 02:21:47,840
look where it basically says it's got

02:21:45,920 --> 02:21:50,319
1.2 gigabytes of ram

02:21:47,840 --> 02:21:51,760
and three cores now where does this

02:21:50,319 --> 02:21:53,840
information come from

02:21:51,760 --> 02:21:55,120
okay why does the jvm on that little

02:21:53,840 --> 02:21:56,560
spring boot application think it has

02:21:55,120 --> 02:21:59,760
access to three cores

02:21:56,560 --> 02:22:02,479
and 1.2 gigabytes around it comes from

02:21:59,760 --> 02:22:03,840
what you see in the virtualbox settings

02:22:02,479 --> 02:22:06,319
all right so right here

02:22:03,840 --> 02:22:07,520
i basically said give it three cores and

02:22:06,319 --> 02:22:09,200
eight gigs of ram

02:22:07,520 --> 02:22:10,960
so there's the three cores that's pretty

02:22:09,200 --> 02:22:14,240
obvious it's basically saying

02:22:10,960 --> 02:22:14,800
the jvm has access to all cores on the

02:22:14,240 --> 02:22:16,800
node

02:22:14,800 --> 02:22:18,560
the node in this case being devnation

02:22:16,800 --> 02:22:21,439
and all memory

02:22:18,560 --> 02:22:23,040
on the node in this case the the memory

02:22:21,439 --> 02:22:23,760
being this eight gigabytes of assigned

02:22:23,040 --> 02:22:26,319
to it

02:22:23,760 --> 02:22:26,960
and based on the heap size it calculates

02:22:26,319 --> 02:22:28,880
it's about

02:22:26,960 --> 02:22:30,640
it's less than a quarter about a quarter

02:22:28,880 --> 02:22:32,080
of that total memory so basically it

02:22:30,640 --> 02:22:34,080
takes total memory

02:22:32,080 --> 02:22:36,399
and gives you about a quarter for heap

02:22:34,080 --> 02:22:38,800
okay this does mean

02:22:36,399 --> 02:22:40,399
that if you are using a constrained

02:22:38,800 --> 02:22:41,920
environment

02:22:40,399 --> 02:22:43,680
using c groups to constrain that

02:22:41,920 --> 02:22:47,359
environment it will over

02:22:43,680 --> 02:22:48,720
allocate memory and blow up all right so

02:22:47,359 --> 02:22:49,680
let's kind of show you what that looks

02:22:48,720 --> 02:22:50,800
like

02:22:49,680 --> 02:22:53,120
and we can do it here all from the

02:22:50,800 --> 02:22:55,280
darker daemon okay let's see here

02:22:53,120 --> 02:22:56,160
see by the way there's it's if you're

02:22:55,280 --> 02:22:58,720
using oh

02:22:56,160 --> 02:23:00,240
i'm sorry i told you the only thing i

02:22:58,720 --> 02:23:01,920
gave you the mini cube information which

02:23:00,240 --> 02:23:03,840
works the same way but in this case i am

02:23:01,920 --> 02:23:05,760
running against the darker daemon

02:23:03,840 --> 02:23:07,120
it reminded me here and i think i wrote

02:23:05,760 --> 02:23:09,439
this documentation

02:23:07,120 --> 02:23:11,280
long ago i can't remember my own steps

02:23:09,439 --> 02:23:14,000
but come here docker engine

02:23:11,280 --> 02:23:15,120
uh resources all right so yes so this is

02:23:14,000 --> 02:23:16,880
the three course

02:23:15,120 --> 02:23:18,160
it's funny i had this for example three

02:23:16,880 --> 02:23:19,439
course and it's actually a quarter of

02:23:18,160 --> 02:23:22,399
that five seven

02:23:19,439 --> 02:23:23,680
five okay so that's actually where the

02:23:22,399 --> 02:23:26,160
number is coming from

02:23:23,680 --> 02:23:28,080
uh let me not confuse myself okay so if

02:23:26,160 --> 02:23:31,040
you use consume there

02:23:28,080 --> 02:23:32,000
okay it will consume it but let's do

02:23:31,040 --> 02:23:33,680
this let's constrain

02:23:32,000 --> 02:23:35,680
our resources here we're going to

02:23:33,680 --> 02:23:38,720
constrain our resources

02:23:35,680 --> 02:23:42,240
to 400 meg uh 400

02:23:38,720 --> 02:23:45,439
megabytes and one cpu let's do that

02:23:42,240 --> 02:23:45,439
okay let's do that

02:23:46,560 --> 02:23:50,880
ctrl c there we go let's add in this

02:23:50,000 --> 02:23:54,730
additional

02:23:50,880 --> 02:23:57,920
set of constraints there we go

02:23:54,730 --> 02:23:57,920
[Music]

02:23:58,640 --> 02:24:05,680
and come on now cis resources

02:24:02,880 --> 02:24:06,399
okay so it still says the 1268 megabytes

02:24:05,680 --> 02:24:08,479
ram

02:24:06,399 --> 02:24:10,800
or gigabytes in this case and three

02:24:08,479 --> 02:24:12,479
cores and if i say consume

02:24:10,800 --> 02:24:13,840
and all consume does by the way is have

02:24:12,479 --> 02:24:14,560
an immutable string that is trying to

02:24:13,840 --> 02:24:17,600
concatenate

02:24:14,560 --> 02:24:19,120
up to what it thinks memory should be

02:24:17,600 --> 02:24:21,200
and let's see what happens here it seems

02:24:19,120 --> 02:24:22,880
like it's hung up but what it's trying

02:24:21,200 --> 02:24:24,399
to do it's asking the jvm to allocate

02:24:22,880 --> 02:24:25,439
that memory that it thinks it has access

02:24:24,399 --> 02:24:27,280
to

02:24:25,439 --> 02:24:29,040
and if you do this and depending on the

02:24:27,280 --> 02:24:31,120
environment you're doing it in it will

02:24:29,040 --> 02:24:32,560
kill it all right because it's trying to

02:24:31,120 --> 02:24:33,280
go beyond the memory constraint

02:24:32,560 --> 02:24:35,439
specified

02:24:33,280 --> 02:24:37,359
so in this case it does say killed here

02:24:35,439 --> 02:24:39,280
so in the docker demon it got killed

02:24:37,359 --> 02:24:40,399
if you do this on kubernetes it also

02:24:39,280 --> 02:24:42,560
gets killed

02:24:40,399 --> 02:24:44,080
okay so just be aware of it that's an

02:24:42,560 --> 02:24:46,479
important thing to understand

02:24:44,080 --> 02:24:48,080
because it in kubernetes you almost

02:24:46,479 --> 02:24:51,280
always have these constraints

02:24:48,080 --> 02:24:53,280
and the jvm will over allocate okay

02:24:51,280 --> 02:24:56,880
the way you fix that is there's other

02:24:53,280 --> 02:24:58,240
docker files that are here

02:24:56,880 --> 02:25:00,319
that you should check out in this little

02:24:58,240 --> 02:25:02,240
sample app okay

02:25:00,319 --> 02:25:03,920
one is just use java 11. java 11 doesn't

02:25:02,240 --> 02:25:06,560
have the problem okay

02:25:03,920 --> 02:25:08,319
also 151 has the problem but if you go a

02:25:06,560 --> 02:25:09,600
little bit later like 200 something

02:25:08,319 --> 02:25:12,240
it doesn't have the problem all right

02:25:09,600 --> 02:25:13,200
that's another item and if you basically

02:25:12,240 --> 02:25:15,280
come over here and say

02:25:13,200 --> 02:25:16,800
okay unlock experimental options so if

02:25:15,280 --> 02:25:19,520
you want to use 151

02:25:16,800 --> 02:25:20,160
unlock experimental options we'll also

02:25:19,520 --> 02:25:22,560
fix the

02:25:20,160 --> 02:25:24,240
memory portion it doesn't fix the cpus

02:25:22,560 --> 02:25:25,760
but you don't get killed for over using

02:25:24,240 --> 02:25:26,880
cpus you just don't really have access

02:25:25,760 --> 02:25:28,399
to your cpus

02:25:26,880 --> 02:25:30,240
okay you just can't use them but if you

02:25:28,399 --> 02:25:32,399
try to over allocate memory it will

02:25:30,240 --> 02:25:34,160
shut you down so unlock experimental

02:25:32,399 --> 02:25:36,319
options will fix the memory issue

02:25:34,160 --> 02:25:38,399
all right use c group memory limit for

02:25:36,319 --> 02:25:41,439
heap and then the other

02:25:38,399 --> 02:25:43,120
option right here is to simply fix it so

02:25:41,439 --> 02:25:44,640
in other words make your heap size a

02:25:43,120 --> 02:25:45,439
certain size and then you can't over

02:25:44,640 --> 02:25:47,359
allocate it

02:25:45,439 --> 02:25:49,680
in this case you might still blow the

02:25:47,359 --> 02:25:50,880
memory but it's going to be much harder

02:25:49,680 --> 02:25:52,319
to blow the memory because you fixed

02:25:50,880 --> 02:25:53,040
your hip size to something to be very

02:25:52,319 --> 02:25:54,880
small

02:25:53,040 --> 02:25:56,800
the reason i put it down is 112

02:25:54,880 --> 02:25:59,280
megabytes here is because

02:25:56,800 --> 02:26:00,319
back on our command line it was 400 megs

02:25:59,280 --> 02:26:03,840
so i was trying to keep that

02:26:00,319 --> 02:26:07,520
about 25 factor for heat okay

02:26:03,840 --> 02:26:08,399
so 100 you know 25 of 400 is about 112

02:26:07,520 --> 02:26:10,160
megs ram

02:26:08,399 --> 02:26:12,080
okay that's kind of the idea there so

02:26:10,160 --> 02:26:13,439
you can use these different docker files

02:26:12,080 --> 02:26:16,080
and then that of course would build your

02:26:13,439 --> 02:26:18,640
image in a more appropriate way

02:26:16,080 --> 02:26:20,560
okay so that's how to build an image now

02:26:18,640 --> 02:26:23,680
if i go over here to my nine steps

02:26:20,560 --> 02:26:25,920
class i

02:26:23,680 --> 02:26:28,080
some other options available to you that

02:26:25,920 --> 02:26:29,520
you should be aware of

02:26:28,080 --> 02:26:31,520
when it comes to building images where's

02:26:29,520 --> 02:26:33,600
it at tools

02:26:31,520 --> 02:26:35,439
there's all this stuff uh building

02:26:33,600 --> 02:26:36,240
images right so we use the docker build

02:26:35,439 --> 02:26:39,280
which is the

02:26:36,240 --> 02:26:41,680
default typical thing right docker build

02:26:39,280 --> 02:26:43,840
however there's this j cube which can be

02:26:41,680 --> 02:26:45,120
input put in your maven palm xml

02:26:43,840 --> 02:26:47,760
there's jib that comes from the google

02:26:45,120 --> 02:26:49,520
team okay that also would be very

02:26:47,760 --> 02:26:50,640
valuable to you that jib will also build

02:26:49,520 --> 02:26:51,600
your image push your image for you

02:26:50,640 --> 02:26:54,479
automatically

02:26:51,600 --> 02:26:56,399
there's tools like s2i right s2i is

02:26:54,479 --> 02:26:59,359
built into things like open shift

02:26:56,399 --> 02:27:00,800
uh like where let me see yeah like so

02:26:59,359 --> 02:27:03,280
here's an example

02:27:00,800 --> 02:27:04,160
if i come over here to developer and i

02:27:03,280 --> 02:27:07,680
hit

02:27:04,160 --> 02:27:08,880
add from git so if i basically say i

02:27:07,680 --> 02:27:14,240
want to add the

02:27:08,880 --> 02:27:14,240
project github

02:27:14,840 --> 02:27:19,040
for okay i'm just going to pick up one

02:27:17,840 --> 02:27:20,560
of my projects that i've been playing

02:27:19,040 --> 02:27:21,520
with lately and that's the spring pet

02:27:20,560 --> 02:27:24,399
clinic

02:27:21,520 --> 02:27:26,000
so i'm going to just paste that git repo

02:27:24,399 --> 02:27:27,200
so if you'll notice there's no docker

02:27:26,000 --> 02:27:28,560
file in here

02:27:27,200 --> 02:27:30,399
there's a docker compose but it's

02:27:28,560 --> 02:27:31,760
different there's no doctor file there's

02:27:30,399 --> 02:27:35,040
no yamls

02:27:31,760 --> 02:27:37,680
right so if you paste that in uh and we

02:27:35,040 --> 02:27:40,560
say we want to be a java app

02:27:37,680 --> 02:27:41,280
and we'll give it the app up that looks

02:27:40,560 --> 02:27:43,040
good

02:27:41,280 --> 02:27:46,000
deployment so the deployment object we

02:27:43,040 --> 02:27:47,600
see there too and let's hit create

02:27:46,000 --> 02:27:49,840
okay it's going to go through the

02:27:47,600 --> 02:27:52,800
process of building that image

02:27:49,840 --> 02:27:54,560
and deploying it so this is a yamless

02:27:52,800 --> 02:27:56,640
docker fileless solution

02:27:54,560 --> 02:27:58,160
to basically running your app in a

02:27:56,640 --> 02:27:59,840
kubernetes cluster in this case it's a

02:27:58,160 --> 02:28:01,520
feature specific of openshift

02:27:59,840 --> 02:28:03,120
but that's what s2i represents right it

02:28:01,520 --> 02:28:04,640
basically takes your source

02:28:03,120 --> 02:28:07,120
and makes your image out of it with no

02:28:04,640 --> 02:28:09,040
docker files no yaml files etc

02:28:07,120 --> 02:28:11,439
there's other tools like in the case of

02:28:09,040 --> 02:28:13,359
tecton so if you remember there's this

02:28:11,439 --> 02:28:16,080
class also called tecton

02:28:13,359 --> 02:28:17,280
that we teach and in that tecton example

02:28:16,080 --> 02:28:19,600
you can basically

02:28:17,280 --> 02:28:20,399
build your image in cluster so it's like

02:28:19,600 --> 02:28:21,760
s2i

02:28:20,399 --> 02:28:23,760
and s2i by the way can be used with

02:28:21,760 --> 02:28:24,640
tecton but this is a full pipeline

02:28:23,760 --> 02:28:27,040
solution

02:28:24,640 --> 02:28:28,160
so you can have a full uh pipeline based

02:28:27,040 --> 02:28:31,439
solution to do

02:28:28,160 --> 02:28:35,520
not only your get clone your maven build

02:28:31,439 --> 02:28:37,680
your maven test your maven package your

02:28:35,520 --> 02:28:39,120
produce the docker image using builda

02:28:37,680 --> 02:28:41,760
etc etc

02:28:39,120 --> 02:28:43,120
do a load test roll it from production

02:28:41,760 --> 02:28:44,800
one to production two

02:28:43,120 --> 02:28:46,319
you know it's a full pipeline solution

02:28:44,800 --> 02:28:48,399
and that's tecton

02:28:46,319 --> 02:28:49,840
there's also many other solutions okay

02:28:48,399 --> 02:28:50,880
so lots of things like build packs is

02:28:49,840 --> 02:28:52,720
another example

02:28:50,880 --> 02:28:54,000
lots of ways to build images that's

02:28:52,720 --> 02:28:56,880
we've had a lot of

02:28:54,000 --> 02:28:59,359
um a lot of flexibility in this area

02:28:56,880 --> 02:29:01,680
okay a lot of things happen in this area

02:28:59,359 --> 02:29:02,720
all right let me see we did that we did

02:29:01,680 --> 02:29:06,399
that

02:29:02,720 --> 02:29:10,080
uh we pushed the image uh let's see here

02:29:06,399 --> 02:29:12,319
let's go here and try this okay

02:29:10,080 --> 02:29:13,439
let's now talk about how to deploy that

02:29:12,319 --> 02:29:15,600
app into

02:29:13,439 --> 02:29:17,840
kubernetes but now we're going to we're

02:29:15,600 --> 02:29:20,160
going to constrain the resources

02:29:17,840 --> 02:29:21,600
all right so we did that my boot v8

02:29:20,160 --> 02:29:23,350
that's the image i created right so let

02:29:21,600 --> 02:29:26,319
me come over here

02:29:23,350 --> 02:29:29,359
[Music]

02:29:26,319 --> 02:29:30,800
let's bring back this this is my my boot

02:29:29,359 --> 02:29:34,160
deployment

02:29:30,800 --> 02:29:36,080
the v8 was the one i just created okay

02:29:34,160 --> 02:29:37,280
we just created it so let's actually run

02:29:36,080 --> 02:29:41,600
this guy

02:29:37,280 --> 02:29:45,200
all right this deployment yaml here cube

02:29:41,600 --> 02:29:51,040
cubinus uh cuban s

02:29:45,200 --> 02:29:55,040
cubectl create namespace uh

02:29:51,040 --> 02:29:57,760
all right i'm just giving it a name okay

02:29:55,040 --> 02:29:58,479
there we go my watch switched

02:29:57,760 --> 02:30:03,280
automatically for

02:29:58,479 --> 02:30:03,280
me that's fantastic so cube applied f

02:30:03,600 --> 02:30:09,439
uh apps cube files

02:30:06,640 --> 02:30:12,240
my boot deployment yamo this is the one

02:30:09,439 --> 02:30:17,600
that has the v8 in it

02:30:12,240 --> 02:30:19,200
so let's that run okay

02:30:17,600 --> 02:30:21,600
let's exec into it to make sure it's the

02:30:19,200 --> 02:30:21,600
right one

02:30:22,880 --> 02:30:29,359
and bash girl localhost

02:30:27,600 --> 02:30:30,880
the namaste one that's fantastic that's

02:30:29,359 --> 02:30:33,840
the one that we wanted

02:30:30,880 --> 02:30:35,280
okay all right good okay so that's the

02:30:33,840 --> 02:30:36,319
one we just ran right there in my boot

02:30:35,280 --> 02:30:39,280
deployment

02:30:36,319 --> 02:30:40,399
and now what we want to do is constrain

02:30:39,280 --> 02:30:42,640
this thing okay so

02:30:40,399 --> 02:30:44,560
i'm going to go to this one now my boot

02:30:42,640 --> 02:30:46,399
deployment resources

02:30:44,560 --> 02:30:47,760
and so to notice the difference between

02:30:46,399 --> 02:30:48,560
these two worlds and actually let's do

02:30:47,760 --> 02:30:50,260
this

02:30:48,560 --> 02:30:52,640
uh select for compare

02:30:50,260 --> 02:30:56,000
[Music]

02:30:52,640 --> 02:30:57,600
compare with selected so you'll see

02:30:56,000 --> 02:30:58,800
there's a slight difference between

02:30:57,600 --> 02:31:00,240
these two files

02:30:58,800 --> 02:31:01,840
for one thing my image name is different

02:31:00,240 --> 02:31:03,760
so let me fix this up so

02:31:01,840 --> 02:31:05,040
all right so there we get the v8 but

02:31:03,760 --> 02:31:06,880
notice before

02:31:05,040 --> 02:31:08,800
the one we deployed before did not have

02:31:06,880 --> 02:31:09,920
the resources section the request

02:31:08,800 --> 02:31:12,080
section

02:31:09,920 --> 02:31:14,160
see that so we're going to do that we're

02:31:12,080 --> 02:31:16,560
going to basically make some requests

02:31:14,160 --> 02:31:18,319
and actually i'm going to mistype the

02:31:16,560 --> 02:31:20,399
cpu request here

02:31:18,319 --> 02:31:21,920
notice i put ten thousand m in not one

02:31:20,399 --> 02:31:24,240
thousand one thousand m

02:31:21,920 --> 02:31:25,760
one thousand millicourse is one core ten

02:31:24,240 --> 02:31:30,399
thousand millicourse is ten

02:31:25,760 --> 02:31:32,560
cores so let me save that file

02:31:30,399 --> 02:31:33,840
okay and actually let's go wipe out the

02:31:32,560 --> 02:31:36,399
previous deployment just to be on the

02:31:33,840 --> 02:31:36,399
safe side

02:31:36,560 --> 02:31:40,960
just to really make it hopefully super

02:31:38,960 --> 02:31:44,000
obvious what we're doing here

02:31:40,960 --> 02:31:46,960
and let me do this all right okay so

02:31:44,000 --> 02:31:50,640
we're getting rid of that old deployment

02:31:46,960 --> 02:31:50,640
let's do this one resources

02:31:51,600 --> 02:31:55,120
so let's this one come to life and watch

02:31:54,000 --> 02:31:58,560
look what's happening here

02:31:55,120 --> 02:32:01,040
pending the reason it's pending

02:31:58,560 --> 02:32:02,000
is because there is not a worker node

02:32:01,040 --> 02:32:04,240
with 10

02:32:02,000 --> 02:32:05,680
cores available so the first thing i

02:32:04,240 --> 02:32:06,319
understand about resources there's this

02:32:05,680 --> 02:32:07,680
request

02:32:06,319 --> 02:32:09,439
and a limit we'll see the limit a

02:32:07,680 --> 02:32:12,479
section second

02:32:09,439 --> 02:32:14,240
okay request is please allocate

02:32:12,479 --> 02:32:15,920
some you know please find me a worker

02:32:14,240 --> 02:32:19,359
node with at least

02:32:15,920 --> 02:32:20,240
300 megabytes of ram and 10 cores in

02:32:19,359 --> 02:32:21,920
this case

02:32:20,240 --> 02:32:24,160
we don't have 10 cores in any specific

02:32:21,920 --> 02:32:26,160
node remember this virtualbox i'm using

02:32:24,160 --> 02:32:28,399
here so i only gave it three cores

02:32:26,160 --> 02:32:29,680
all together if i had made it 10 cores

02:32:28,399 --> 02:32:32,960
it might have worked

02:32:29,680 --> 02:32:34,319
okay but there's not 10 available cores

02:32:32,960 --> 02:32:37,040
in any of our systems so you're going to

02:32:34,319 --> 02:32:39,200
see pending so pending is your

02:32:37,040 --> 02:32:40,880
i'm out of resources i'm out of memory

02:32:39,200 --> 02:32:41,840
or i'm out of course primarily you're

02:32:40,880 --> 02:32:43,200
out of course

02:32:41,840 --> 02:32:45,120
and how do you know what to do with that

02:32:43,200 --> 02:32:48,399
information you use get events

02:32:45,120 --> 02:32:50,240
so when you do your get events

02:32:48,399 --> 02:32:52,319
right there look for this one zero of

02:32:50,240 --> 02:32:56,560
one nodes are available

02:32:52,319 --> 02:32:59,359
one insufficient cpu okay

02:32:56,560 --> 02:33:00,560
now let me um well let me while i'm

02:32:59,359 --> 02:33:01,439
doing this let me come over here to this

02:33:00,560 --> 02:33:03,920
machine

02:33:01,439 --> 02:33:05,359
uh what what project was i working in

02:33:03,920 --> 02:33:08,080
earlier

02:33:05,359 --> 02:33:10,160
my stuff over here okay go see project

02:33:08,080 --> 02:33:12,240
my stuff

02:33:10,160 --> 02:33:14,080
i'm switching over to my google cluster

02:33:12,240 --> 02:33:18,560
what based on

02:33:14,080 --> 02:33:20,640
uh based on openshift

02:33:18,560 --> 02:33:22,720
let's see what we have running out here

02:33:20,640 --> 02:33:24,000
all right there's the spring pet clinic

02:33:22,720 --> 02:33:26,640
okay up and running that we just did

02:33:24,000 --> 02:33:28,560
earlier uh but ignore that one for now

02:33:26,640 --> 02:33:30,479
i'm going to come to the same kubernetes

02:33:28,560 --> 02:33:34,640
tutorial i'm going to q

02:33:30,479 --> 02:33:37,680
ctl apply dash f

02:33:34,640 --> 02:33:41,120
let's see apps cube files and then the

02:33:37,680 --> 02:33:48,479
my boot deployment resources the same

02:33:41,120 --> 02:33:49,920
thing as before and the reason i'm

02:33:48,479 --> 02:33:51,280
showing you this is even on a big

02:33:49,920 --> 02:33:52,960
cluster

02:33:51,280 --> 02:33:55,359
all right 10 is still going to be a

02:33:52,960 --> 02:33:56,960
problem because my worker nodes do not

02:33:55,359 --> 02:33:59,920
have 10 cores they're all like

02:33:56,960 --> 02:34:01,600
two or four core machines so therefore

02:33:59,920 --> 02:34:05,520
there's not one with 10 cores

02:34:01,600 --> 02:34:08,080
and so if i say cube steel get events

02:34:05,520 --> 02:34:08,080
we will see

02:34:08,640 --> 02:34:19,439
now let's see here

02:34:16,399 --> 02:34:22,880
all right let's try to do this

02:34:19,439 --> 02:34:22,880
get events

02:34:24,160 --> 02:34:28,840
oh wait wait wait wait maybe just run

02:34:27,920 --> 02:34:31,680
here

02:34:28,840 --> 02:34:33,359
oh okay i have that in a different whole

02:34:31,680 --> 02:34:35,760
another section

02:34:33,359 --> 02:34:37,520
this is actually kind of funny um i'm in

02:34:35,760 --> 02:34:38,720
two different directors i can confuse

02:34:37,520 --> 02:34:41,040
myself there

02:34:38,720 --> 02:34:44,319
yeah yeah yeah let's copy that here get

02:34:41,040 --> 02:34:47,280
event sorted

02:34:44,319 --> 02:34:49,040
okay zero of six nodes available six

02:34:47,280 --> 02:34:49,760
insufficient cpu so even on this really

02:34:49,040 --> 02:34:52,880
big cluster

02:34:49,760 --> 02:34:55,359
there's not one with ten cores available

02:34:52,880 --> 02:34:57,040
okay so just bear that in mind and

02:34:55,359 --> 02:35:00,160
actually i should have been here

02:34:57,040 --> 02:35:01,280
and here instead i i use different

02:35:00,160 --> 02:35:03,520
directories for my

02:35:01,280 --> 02:35:05,439
big cl production clusters versus my

02:35:03,520 --> 02:35:07,359
mini cube environment

02:35:05,439 --> 02:35:09,200
so the easiest thing to do is simply fix

02:35:07,359 --> 02:35:12,160
that problem

02:35:09,200 --> 02:35:12,560
let's see what my cube editor said here

02:35:12,160 --> 02:35:16,160
uh

02:35:12,560 --> 02:35:19,920
editor yep

02:35:16,160 --> 02:35:19,920
so cube ctl get deployment

02:35:21,200 --> 02:35:26,960
and cube ctl edit deployment my boot

02:35:25,439 --> 02:35:29,359
let's try that visual studio code in

02:35:26,960 --> 02:35:32,000
this case it's going across the internet

02:35:29,359 --> 02:35:33,439
to hit that cluster and let me see where

02:35:32,000 --> 02:35:35,680
is my image

02:35:33,439 --> 02:35:36,560
v1 okay should have said it was v8 to

02:35:35,680 --> 02:35:40,399
begin with

02:35:36,560 --> 02:35:44,000
and then where is the request 10 cpu

02:35:40,399 --> 02:35:47,359
let's request one cpu save

02:35:44,000 --> 02:35:50,000
and close with one cpu we should see it

02:35:47,359 --> 02:35:50,000
get scheduled

02:35:50,240 --> 02:35:54,270
so container creating that means pull

02:35:53,200 --> 02:35:56,479
error image pool

02:35:54,270 --> 02:35:59,520
[Music]

02:35:56,479 --> 02:36:02,720
let me see let me double check my image

02:35:59,520 --> 02:36:02,720
uh cray io

02:36:04,960 --> 02:36:12,300
oh that's because yes i put this in mine

02:36:09,200 --> 02:36:14,240
not red developers one save

02:36:12,300 --> 02:36:15,920
[Music]

02:36:14,240 --> 02:36:17,760
all right let's now we should have a

02:36:15,920 --> 02:36:19,200
proper image name it should pull that

02:36:17,760 --> 02:36:20,560
image it will take a little time to pull

02:36:19,200 --> 02:36:21,840
the image across the internet to that

02:36:20,560 --> 02:36:23,359
cluster

02:36:21,840 --> 02:36:24,880
so you'll by the way you'll you'll see

02:36:23,359 --> 02:36:25,520
these eventually just go away these

02:36:24,880 --> 02:36:28,800
other

02:36:25,520 --> 02:36:32,000
bad guys here all right and i can just

02:36:28,800 --> 02:36:32,000
delete them to get rid of them

02:36:32,560 --> 02:36:35,600
try to get rid of those things we don't

02:36:33,760 --> 02:36:36,070
need but it's going to be pulling that

02:36:35,600 --> 02:36:38,399
image

02:36:36,070 --> 02:36:41,200
[Music]

02:36:38,399 --> 02:36:41,200
from cue i o

02:36:42,479 --> 02:36:49,200
and yeah yep that should

02:36:46,000 --> 02:36:51,840
there we go and running so let's see

02:36:49,200 --> 02:36:51,840
here

02:36:54,240 --> 02:36:59,760
it is running now because it's no longer

02:36:56,000 --> 02:37:02,800
requesting 10 cpus

02:36:59,760 --> 02:37:02,800
let me execute into it

02:37:03,600 --> 02:37:12,240
okay there we go namaste all right

02:37:07,680 --> 02:37:12,240
i can now say uh cube ctl

02:37:12,560 --> 02:37:18,720
oh let's let it be all right let's just

02:37:14,160 --> 02:37:19,840
let it yeah right but the whole point of

02:37:18,720 --> 02:37:21,920
that was to basically show you how

02:37:19,840 --> 02:37:23,680
resources work

02:37:21,920 --> 02:37:25,359
okay now in the case of resources do you

02:37:23,680 --> 02:37:26,720
have a request and you have a limits

02:37:25,359 --> 02:37:28,880
okay let's come down here to where the

02:37:26,720 --> 02:37:30,319
limits are the limits are hard limits

02:37:28,880 --> 02:37:32,640
and you should just be aware of them

02:37:30,319 --> 02:37:34,240
because you're gonna get burned by this

02:37:32,640 --> 02:37:35,359
okay you're gonna get burned by the hard

02:37:34,240 --> 02:37:37,280
limit so resource

02:37:35,359 --> 02:37:40,240
limits so there's a separate file for

02:37:37,280 --> 02:37:43,280
this one let me go look at it real quick

02:37:40,240 --> 02:37:43,840
all right let's close that and not that

02:37:43,280 --> 02:37:46,720
one

02:37:43,840 --> 02:37:47,600
let's go here and this is the one with

02:37:46,720 --> 02:37:49,600
limits

02:37:47,600 --> 02:37:50,800
so let me also make this one working off

02:37:49,600 --> 02:37:54,720
the right image again bur

02:37:50,800 --> 02:37:56,240
setter my boot v8 okay

02:37:54,720 --> 02:37:58,240
but notice this one basically has the

02:37:56,240 --> 02:38:01,040
request of 300 megs

02:37:58,240 --> 02:38:02,399
one quarter core with a hard limit of

02:38:01,040 --> 02:38:04,640
400 megs

02:38:02,399 --> 02:38:06,240
and one core now this is a hard limit

02:38:04,640 --> 02:38:07,439
this is a c groups level limit linux

02:38:06,240 --> 02:38:10,000
kernel level limit

02:38:07,439 --> 02:38:11,920
if you try to if you try to blow it uh

02:38:10,000 --> 02:38:13,200
it will constrain you if you try to blow

02:38:11,920 --> 02:38:14,800
the cpus it'll just

02:38:13,200 --> 02:38:16,479
constrain you and you won't get them in

02:38:14,800 --> 02:38:17,200
the case of memory you will get shot in

02:38:16,479 --> 02:38:20,160
the head

02:38:17,200 --> 02:38:21,439
with an oom killed out of memory killed

02:38:20,160 --> 02:38:22,800
okay so let's

02:38:21,439 --> 02:38:25,040
that's that one right there let me go

02:38:22,800 --> 02:38:26,560
and try to run it

02:38:25,040 --> 02:38:28,319
okay let's just go back to my mini cube

02:38:26,560 --> 02:38:32,399
here and

02:38:28,319 --> 02:38:32,399
let's see that one get deployments

02:38:32,800 --> 02:38:37,040
okay let's just try to overlay it

02:38:34,319 --> 02:38:39,920
replace there's a replace command

02:38:37,040 --> 02:38:41,040
and let's see let's just replace it my

02:38:39,920 --> 02:38:45,520
boot

02:38:41,040 --> 02:38:48,960
deployment resources limits yaml

02:38:45,520 --> 02:38:49,760
okay so we should give up on that other

02:38:48,960 --> 02:38:51,310
one

02:38:49,760 --> 02:38:53,920
okay there it looks like it's running

02:38:51,310 --> 02:38:57,200
[Music]

02:38:53,920 --> 02:38:58,479
cube ctl get

02:38:57,200 --> 02:39:02,800
services i don't think i have a service

02:38:58,479 --> 02:39:02,800
here okay good right uh cube ctl exec

02:39:03,200 --> 02:39:07,280
i.t let's get in there

02:39:08,640 --> 02:39:11,840
uh well i did something wrong

02:39:12,720 --> 02:39:16,640
one dash the double dash single dash

02:39:15,439 --> 02:39:19,840
always confuses me

02:39:16,640 --> 02:39:20,640
uh localhost 8080 this should be our

02:39:19,840 --> 02:39:24,560
namaste

02:39:20,640 --> 02:39:26,399
that's our namaste okay cis resources

02:39:24,560 --> 02:39:27,600
how many resources do you think you have

02:39:26,399 --> 02:39:30,000
all right it thinks it has

02:39:27,600 --> 02:39:31,680
1.7 gigabytes of ram three cores this

02:39:30,000 --> 02:39:33,040
one is running on the mini cube so this

02:39:31,680 --> 02:39:34,319
is what's coming from here

02:39:33,040 --> 02:39:36,640
right so about a quarter of that eight

02:39:34,319 --> 02:39:38,690
gigabytes and three uh three

02:39:36,640 --> 02:39:40,000
cpus however

02:39:38,690 --> 02:39:42,960
[Music]

02:39:40,000 --> 02:39:42,960
we did constrain it

02:39:43,840 --> 02:39:50,399
and cube ctl uh edit

02:39:47,359 --> 02:39:55,600
deployment my boot

02:39:50,399 --> 02:39:55,600
let's go check this out limits

02:39:56,560 --> 02:39:59,359
there we go so there are real

02:39:57,920 --> 02:40:00,720
constraints here there's the limit and

02:39:59,359 --> 02:40:02,960
the res and the request

02:40:00,720 --> 02:40:04,880
okay so request is can i be scheduled

02:40:02,960 --> 02:40:07,920
the limit is a hard limit

02:40:04,880 --> 02:40:09,760
so 400 megs of ram even though

02:40:07,920 --> 02:40:11,680
so it's constrained to 400 meg even

02:40:09,760 --> 02:40:15,200
though it thinks it has 1.7 gig

02:40:11,680 --> 02:40:15,200
all right so if we call the consume

02:40:15,920 --> 02:40:20,319
okay notice we can empty apply oom

02:40:19,439 --> 02:40:21,920
killed

02:40:20,319 --> 02:40:23,760
restarts one if you were paying

02:40:21,920 --> 02:40:27,040
attention and it goes real fast

02:40:23,760 --> 02:40:28,000
it did om killed restarts one so your

02:40:27,040 --> 02:40:30,000
restarts one

02:40:28,000 --> 02:40:31,439
is already a giveaway that something is

02:40:30,000 --> 02:40:33,680
not quite right

02:40:31,439 --> 02:40:34,960
okay something is not quite right that

02:40:33,680 --> 02:40:36,640
pod was restarted

02:40:34,960 --> 02:40:38,399
when it tried to go over its memory

02:40:36,640 --> 02:40:40,080
limit it got shot in the head by

02:40:38,399 --> 02:40:42,399
by linux and then of course it got

02:40:40,080 --> 02:40:44,880
restarted so kubernetes is constantly

02:40:42,399 --> 02:40:46,399
self-healing it is trying to create the

02:40:44,880 --> 02:40:48,479
world you've asked it to create so it's

02:40:46,399 --> 02:40:50,880
trying to heal itself and it did

02:40:48,479 --> 02:40:52,399
but the problem is uh you know you might

02:40:50,880 --> 02:40:54,000
not even notice that it failed

02:40:52,399 --> 02:40:56,000
your users might notice it failed the

02:40:54,000 --> 02:40:56,720
user got an error right empty reply from

02:40:56,000 --> 02:40:58,720
server

02:40:56,720 --> 02:41:00,160
but if we come over here now say cube

02:40:58,720 --> 02:41:03,279
ctl

02:41:00,160 --> 02:41:06,560
get events and we look at our event log

02:41:03,279 --> 02:41:09,680
we should see and again uh you know

02:41:06,560 --> 02:41:11,200
stopping killing we might we'll see some

02:41:09,680 --> 02:41:14,840
errors in here

02:41:11,200 --> 02:41:16,080
but here's it's more interesting uh

02:41:14,840 --> 02:41:17,610
describe

02:41:16,080 --> 02:41:20,000
the pod

02:41:17,610 --> 02:41:23,120
[Music]

02:41:20,000 --> 02:41:27,600
let's describe the pod

02:41:23,120 --> 02:41:29,279
and there's the limits

02:41:27,600 --> 02:41:31,600
and there it is the last state was

02:41:29,279 --> 02:41:34,800
terminated due to oom killed

02:41:31,600 --> 02:41:35,920
that's how you know it got shot okay

02:41:34,800 --> 02:41:37,439
and again if you build your image

02:41:35,920 --> 02:41:38,640
correctly the jvm doesn't over allocate

02:41:37,439 --> 02:41:39,120
memory in which case you don't have this

02:41:38,640 --> 02:41:40,880
problem

02:41:39,120 --> 02:41:42,720
but that's a fun way to see the

02:41:40,880 --> 02:41:43,600
resources and limits in real time and

02:41:42,720 --> 02:41:46,800
what it can do

02:41:43,600 --> 02:41:50,319
and those are real constraints okay

02:41:46,800 --> 02:41:52,160
and uh and you will you will get an

02:41:50,319 --> 02:41:53,920
error

02:41:52,160 --> 02:41:55,120
from it all right you will get a user

02:41:53,920 --> 02:41:55,840
will get an error if they're trying to

02:41:55,120 --> 02:41:58,080
invoke it

02:41:55,840 --> 02:41:59,120
so that's really what the whole resource

02:41:58,080 --> 02:42:03,040
limits and up

02:41:59,120 --> 02:42:04,880
um ups resources limits is about

02:42:03,040 --> 02:42:06,720
so let me pause for a second any

02:42:04,880 --> 02:42:07,920
questions about that any thoughts about

02:42:06,720 --> 02:42:08,800
that based on what you guys are seeing

02:42:07,920 --> 02:42:11,200
right now

02:42:08,800 --> 02:42:12,000
do you think that makes sense do you

02:42:11,200 --> 02:42:13,520
think that's kind of

02:42:12,000 --> 02:42:14,720
strange a lot of people when they see

02:42:13,520 --> 02:42:16,880
this the first time they think it's kind

02:42:14,720 --> 02:42:18,080
of strange why is it getting killed

02:42:16,880 --> 02:42:20,319
and of course it gets killed and it

02:42:18,080 --> 02:42:21,279
restarts automatically so did it really

02:42:20,319 --> 02:42:22,640
get killed

02:42:21,279 --> 02:42:24,240
and so one of the things you want to do

02:42:22,640 --> 02:42:26,160
if you're an operations person is you

02:42:24,240 --> 02:42:27,279
want to be looking for om killed in your

02:42:26,160 --> 02:42:28,880
log files

02:42:27,279 --> 02:42:30,560
and then i'm trying to understand better

02:42:28,880 --> 02:42:32,640
why it was killed

02:42:30,560 --> 02:42:33,760
because since kubernetes restarts

02:42:32,640 --> 02:42:34,560
everything and it actually works out

02:42:33,760 --> 02:42:36,240
pretty well

02:42:34,560 --> 02:42:37,520
i've actually had one person tell me a

02:42:36,240 --> 02:42:38,479
software manager who managed a lot of

02:42:37,520 --> 02:42:40,319
software developers

02:42:38,479 --> 02:42:41,600
tell me they love this automatic restart

02:42:40,319 --> 02:42:43,279
thing that they saw here

02:42:41,600 --> 02:42:45,279
because their programmers write bad code

02:42:43,279 --> 02:42:46,319
the programmers over allocate memory

02:42:45,279 --> 02:42:48,000
they shouldn't have

02:42:46,319 --> 02:42:50,399
and therefore it gets restarted

02:42:48,000 --> 02:42:52,479
automatically cleaning up the bad memory

02:42:50,399 --> 02:42:54,000
and starting from a clean slate because

02:42:52,479 --> 02:42:55,439
how many times have you guys gone into a

02:42:54,000 --> 02:42:57,920
production environment

02:42:55,439 --> 02:42:58,720
and told the person to reboot the

02:42:57,920 --> 02:43:00,640
machine

02:42:58,720 --> 02:43:02,240
and for some reason it works fine after

02:43:00,640 --> 02:43:03,840
reboot and as a matter of fact i had to

02:43:02,240 --> 02:43:04,800
reboot this laptop before i started

02:43:03,840 --> 02:43:06,640
today's session

02:43:04,800 --> 02:43:08,240
because some things just weren't wrong

02:43:06,640 --> 02:43:10,880
on this computer any longer

02:43:08,240 --> 02:43:12,160
so that's a reboot built in the reason

02:43:10,880 --> 02:43:14,319
i'm making a point of this reboot

02:43:12,160 --> 02:43:14,960
concept is the next section is about how

02:43:14,319 --> 02:43:16,560
to do

02:43:14,960 --> 02:43:18,319
automated reboots in other words

02:43:16,560 --> 02:43:19,279
kubernetes has a reboot feature built

02:43:18,319 --> 02:43:20,880
right in

02:43:19,279 --> 02:43:22,640
this might really be worth the price of

02:43:20,880 --> 02:43:23,200
admission all by itself is the auto

02:43:22,640 --> 02:43:25,760
restart

02:43:23,200 --> 02:43:26,880
auto reboot uh again the software

02:43:25,760 --> 02:43:28,399
development manager is like i have

02:43:26,880 --> 02:43:31,040
really bad programmers so the auto

02:43:28,399 --> 02:43:32,880
reboot auto restart is a wonderful thing

02:43:31,040 --> 02:43:34,160
but because i have poor programmers as

02:43:32,880 --> 02:43:35,359
an example so

02:43:34,160 --> 02:43:37,520
instead of my ops people having to

02:43:35,359 --> 02:43:38,479
restart reboot kubernetes will do it for

02:43:37,520 --> 02:43:41,680
me

02:43:38,479 --> 02:43:43,359
okay let's see here we did this rolling

02:43:41,680 --> 02:43:45,920
update idea before

02:43:43,359 --> 02:43:47,359
but if you remember we did it without

02:43:45,920 --> 02:43:51,040
the um

02:43:47,359 --> 02:43:52,240
we did it without the uh the resources

02:43:51,040 --> 02:43:53,279
set correctly so we're getting those

02:43:52,240 --> 02:43:54,640
error messages

02:43:53,279 --> 02:43:56,160
so if you remember we're getting errors

02:43:54,640 --> 02:43:57,439
when we do the rolling update now let's

02:43:56,160 --> 02:43:58,399
do the rolling update with the

02:43:57,439 --> 02:44:02,240
appropriate

02:43:58,399 --> 02:44:03,439
appropriate resource constraints

02:44:02,240 --> 02:44:05,040
now actually this is going to just show

02:44:03,439 --> 02:44:06,080
the error again but so we're going to

02:44:05,040 --> 02:44:08,160
see that error

02:44:06,080 --> 02:44:10,080
okay and there's no service what

02:44:08,160 --> 02:44:13,439
deployments do i have here

02:44:10,080 --> 02:44:13,439
let's just get rid of that deployment

02:44:14,000 --> 02:44:20,640
okay uh delete deployments

02:44:18,080 --> 02:44:20,640
my boot

02:44:22,479 --> 02:44:26,240
let's just deploy these guys here

02:44:29,120 --> 02:44:34,319
okay so there's my boot coming online

02:44:34,880 --> 02:44:38,319
let's do our little loopy thing

02:44:38,880 --> 02:44:44,399
and let's curl it

02:44:42,240 --> 02:44:45,920
there we go that's the namaste right and

02:44:44,399 --> 02:44:46,960
if you remember i edited the file so it

02:44:45,920 --> 02:44:48,240
has my little v8

02:44:46,960 --> 02:44:50,800
on your machine you won't have the

02:44:48,240 --> 02:44:52,080
little namaste because you have v1 v2

02:44:50,800 --> 02:44:54,080
something like that

02:44:52,080 --> 02:44:55,600
okay so if you describe the deployment

02:44:54,080 --> 02:44:57,520
you'll notice this strategy type rolling

02:44:55,600 --> 02:44:59,040
update the rolling update is the default

02:44:57,520 --> 02:45:01,120
update type all right that is the kind

02:44:59,040 --> 02:45:03,760
of coolest part of it and so that means

02:45:01,120 --> 02:45:06,720
whatever you make a change to the image

02:45:03,760 --> 02:45:08,240
it just tries to roll it out okay now

02:45:06,720 --> 02:45:08,800
you'll notice it kind of rolls it out in

02:45:08,240 --> 02:45:12,240
a

02:45:08,800 --> 02:45:12,720
in a at this moment in kind of a unusual

02:45:12,240 --> 02:45:16,960
way

02:45:12,720 --> 02:45:16,960
right so like if i come here

02:45:17,200 --> 02:45:20,160
uh let's see here

02:45:20,640 --> 02:45:27,760
let's go edit edit my boot

02:45:24,800 --> 02:45:30,479
all right then the v1 now it's going to

02:45:27,760 --> 02:45:30,479
be v8

02:45:30,720 --> 02:45:34,880
oh wait wait wait wait and it's going to

02:45:31,920 --> 02:45:34,880
be burst center right now

02:45:36,800 --> 02:45:40,080
there it is now that's the one we don't

02:45:39,760 --> 02:45:43,040
want

02:45:40,080 --> 02:45:44,160
rh developers let's do this let's go to

02:45:43,040 --> 02:45:46,880
one

02:45:44,160 --> 02:45:48,080
save and close and i forgot to close the

02:45:46,880 --> 02:45:49,040
previous one that's fine we got

02:45:48,080 --> 02:45:50,399
disconnected

02:45:49,040 --> 02:45:52,479
but it's gonna roll it out so you see

02:45:50,399 --> 02:45:55,520
it's doing its rolling update now

02:45:52,479 --> 02:45:58,399
but it's failing it's not a clean

02:45:55,520 --> 02:46:00,160
rolling update but now it's working

02:45:58,399 --> 02:46:01,279
and it's not clean because of the next

02:46:00,160 --> 02:46:02,960
thing we're about to show you that's the

02:46:01,279 --> 02:46:06,640
liveness probe and redness probe

02:46:02,960 --> 02:46:10,319
let me see arch developers

02:46:06,640 --> 02:46:14,720
v1 all right let's make it v2 now

02:46:10,319 --> 02:46:16,399
save and close this should go to bonjour

02:46:14,720 --> 02:46:20,160
we're going to get the outage again

02:46:16,399 --> 02:46:20,160
because the rolling update is not clean

02:46:20,720 --> 02:46:24,640
okay so this is another piece of the

02:46:22,800 --> 02:46:26,479
magic there's bonjour

02:46:24,640 --> 02:46:28,240
so how do we make this rolling update

02:46:26,479 --> 02:46:29,279
thing work okay

02:46:28,240 --> 02:46:31,040
that's really what we're trying to teach

02:46:29,279 --> 02:46:33,680
in this next section it's called the

02:46:31,040 --> 02:46:37,120
liveness probe and readiness probe

02:46:33,680 --> 02:46:38,640
okay if you look here there's our

02:46:37,120 --> 02:46:40,000
constraints we just talked about

02:46:38,640 --> 02:46:42,319
and there's the liveness problem running

02:46:40,000 --> 02:46:43,680
this probe so here's the way to think of

02:46:42,319 --> 02:46:46,319
live and ready

02:46:43,680 --> 02:46:47,680
one you have to be live to be ready so

02:46:46,319 --> 02:46:48,800
hopefully that makes sense

02:46:47,680 --> 02:46:50,399
you don't have to use them together

02:46:48,800 --> 02:46:51,600
though you can ignore the live and only

02:46:50,399 --> 02:46:52,720
be ready or ignore they're ready and

02:46:51,600 --> 02:46:54,080
hold you live

02:46:52,720 --> 02:46:56,479
but they do have two different kind of

02:46:54,080 --> 02:46:57,760
distinct uh capabilities

02:46:56,479 --> 02:46:59,600
there's also one called startup by the

02:46:57,760 --> 02:47:00,960
way too so startup is a new one that was

02:46:59,600 --> 02:47:04,560
just added

02:47:00,960 --> 02:47:06,240
but live is testing are you alive or not

02:47:04,560 --> 02:47:07,600
that hopefully makes sense

02:47:06,240 --> 02:47:09,840
it's testing to see if you're alive or

02:47:07,600 --> 02:47:11,760
not the reason this really matters

02:47:09,840 --> 02:47:13,359
is you could easily have a java based

02:47:11,760 --> 02:47:15,040
app this is very common in java based

02:47:13,359 --> 02:47:16,319
applications as an example

02:47:15,040 --> 02:47:18,080
where you have pushed it out to a

02:47:16,319 --> 02:47:19,439
production environment you've had a

02:47:18,080 --> 02:47:21,279
programming error

02:47:19,439 --> 02:47:22,720
where you basically have pulled a

02:47:21,279 --> 02:47:25,600
connection from a connection pool

02:47:22,720 --> 02:47:26,080
database connection http pool you know

02:47:25,600 --> 02:47:27,520
whatever

02:47:26,080 --> 02:47:29,520
connection pool you might have in the

02:47:27,520 --> 02:47:31,760
system you pull the connection out

02:47:29,520 --> 02:47:32,960
and you didn't correctly use a try catch

02:47:31,760 --> 02:47:35,120
finally block

02:47:32,960 --> 02:47:36,720
and therefore an exception was thrown

02:47:35,120 --> 02:47:39,600
and that connection never made it

02:47:36,720 --> 02:47:40,399
back to the pool it was just eaten and

02:47:39,600 --> 02:47:42,240
lost

02:47:40,399 --> 02:47:44,640
and so over time based on how that code

02:47:42,240 --> 02:47:46,399
gets executed you may or may not notice

02:47:44,640 --> 02:47:48,000
this for a while but at some point

02:47:46,399 --> 02:47:49,279
late in the day or late in a week or

02:47:48,000 --> 02:47:51,120
late in a year depending on how long

02:47:49,279 --> 02:47:52,399
that jvm has been up and running

02:47:51,120 --> 02:47:53,520
you will have a situation where you've

02:47:52,399 --> 02:47:54,560
eaten all the connections from the

02:47:53,520 --> 02:47:56,640
connection pool

02:47:54,560 --> 02:47:58,720
and the app looks like it's running it's

02:47:56,640 --> 02:48:01,279
nothing's misbehaving except for

02:47:58,720 --> 02:48:02,720
every request that comes in from a user

02:48:01,279 --> 02:48:04,160
hangs

02:48:02,720 --> 02:48:06,160
because there's no connections in the

02:48:04,160 --> 02:48:08,000
connection pool to serve it so it just

02:48:06,160 --> 02:48:08,560
hangs and pauses and eventually times

02:48:08,000 --> 02:48:10,160
out

02:48:08,560 --> 02:48:12,000
so what an alignment probe does it

02:48:10,160 --> 02:48:13,200
basically talks to your app

02:48:12,000 --> 02:48:14,960
in this case it's going to go to the

02:48:13,200 --> 02:48:16,160
root and and you can make it whatever

02:48:14,960 --> 02:48:18,640
url you want

02:48:16,160 --> 02:48:20,399
and make it htp or not and there's other

02:48:18,640 --> 02:48:22,319
options beside http

02:48:20,399 --> 02:48:24,240
you can basically talk to your app and

02:48:22,319 --> 02:48:26,399
say hey

02:48:24,240 --> 02:48:27,840
are you alive and if you're responsible

02:48:26,399 --> 02:48:30,160
to 200

02:48:27,840 --> 02:48:31,040
he or she is alive right frankenstein is

02:48:30,160 --> 02:48:32,960
alive

02:48:31,040 --> 02:48:34,240
and then if it doesn't respond if it

02:48:32,960 --> 02:48:36,560
responds with an error code

02:48:34,240 --> 02:48:37,359
or times out right see the timeout

02:48:36,560 --> 02:48:38,960
seconds

02:48:37,359 --> 02:48:41,120
then it's not alive in other words

02:48:38,960 --> 02:48:42,960
kubernetes assumes it's not alive

02:48:41,120 --> 02:48:45,840
if kubernetes finds it's not alive guess

02:48:42,960 --> 02:48:48,319
what it does it auto restarts it

02:48:45,840 --> 02:48:50,000
okay and this is kind of awesome so if

02:48:48,319 --> 02:48:51,520
you have a connection pool kind of error

02:48:50,000 --> 02:48:52,720
which is a very common programming error

02:48:51,520 --> 02:48:54,479
in a java world

02:48:52,720 --> 02:48:56,479
and you've kind of you know you have an

02:48:54,479 --> 02:48:58,399
app that eventually hangs

02:48:56,479 --> 02:49:00,399
instead of your ops team having to get

02:48:58,399 --> 02:49:02,319
uh email from the boss to say hey their

02:49:00,399 --> 02:49:03,520
app's hung again go restart it

02:49:02,319 --> 02:49:04,880
and the ops team that's what they do

02:49:03,520 --> 02:49:06,880
right they get a ticket they go restart

02:49:04,880 --> 02:49:07,600
it or you get angry tweets from your

02:49:06,880 --> 02:49:09,120
customers

02:49:07,600 --> 02:49:11,200
hey i'm trying to get to your api it's

02:49:09,120 --> 02:49:12,880
not working any longer you can it

02:49:11,200 --> 02:49:15,120
proactively restarts it

02:49:12,880 --> 02:49:16,000
okay this is a big win big win by itself

02:49:15,120 --> 02:49:18,319
so live

02:49:16,000 --> 02:49:20,000
liveness auto restarts when it fails the

02:49:18,319 --> 02:49:22,319
liveness probe

02:49:20,000 --> 02:49:23,520
okay the redness probe is slightly

02:49:22,319 --> 02:49:24,800
different than that the redness probe

02:49:23,520 --> 02:49:27,840
basically says okay

02:49:24,800 --> 02:49:30,240
are you alive yes okay now are you ready

02:49:27,840 --> 02:49:31,520
ready means should you be in the load

02:49:30,240 --> 02:49:33,439
balancer or not

02:49:31,520 --> 02:49:35,120
and until you're ready you're not in the

02:49:33,439 --> 02:49:37,279
service based load balancer that

02:49:35,120 --> 02:49:39,279
endpoint ip address you saw earlier

02:49:37,279 --> 02:49:40,479
that magic doesn't happen either the

02:49:39,279 --> 02:49:42,880
labels are correct

02:49:40,479 --> 02:49:44,640
unless you're ready okay you got to be

02:49:42,880 --> 02:49:45,920
ready to truly be part of the load

02:49:44,640 --> 02:49:47,600
balancer in the service

02:49:45,920 --> 02:49:49,359
and then once you already load or

02:49:47,600 --> 02:49:51,520
traffic comes through to you so that

02:49:49,359 --> 02:49:53,040
readiness probe is very important

02:49:51,520 --> 02:49:55,200
because that's when you receive traffic

02:49:53,040 --> 02:49:56,000
or not the startup probe is hopefully

02:49:55,200 --> 02:49:58,319
well named

02:49:56,000 --> 02:49:59,520
it basically is a slight variant of

02:49:58,319 --> 02:50:02,479
these two options

02:49:59,520 --> 02:50:03,520
startup basically only executes one time

02:50:02,479 --> 02:50:05,279
the startup probe

02:50:03,520 --> 02:50:08,000
for instance might have a fairly long

02:50:05,279 --> 02:50:08,800
initial delay maybe 30 seconds maybe 60

02:50:08,000 --> 02:50:12,000
seconds maybe

02:50:08,800 --> 02:50:13,120
300 seconds or 3000 seconds because the

02:50:12,000 --> 02:50:14,560
startup probe

02:50:13,120 --> 02:50:16,160
might be doing something like reindexing

02:50:14,560 --> 02:50:18,399
a database this happens a lot when your

02:50:16,160 --> 02:50:20,240
database crashed and got corrupted maybe

02:50:18,399 --> 02:50:22,160
in order to bring your database back up

02:50:20,240 --> 02:50:24,399
right it might take three minutes

02:50:22,160 --> 02:50:25,279
while it's checking its indexes things

02:50:24,399 --> 02:50:26,960
of that nature

02:50:25,279 --> 02:50:28,800
maybe you have a kafka broker that got

02:50:26,960 --> 02:50:30,479
hammered and went down for some reason

02:50:28,800 --> 02:50:32,800
the startup pro basically says okay let

02:50:30,479 --> 02:50:33,520
me let it come up let me keep talking to

02:50:32,800 --> 02:50:35,200
it are you up

02:50:33,520 --> 02:50:36,720
are you up are you up oh let's take five

02:50:35,200 --> 02:50:38,479
more minutes to get you up

02:50:36,720 --> 02:50:40,240
and therefore what you don't want is

02:50:38,479 --> 02:50:41,439
super long startups to impact the

02:50:40,240 --> 02:50:43,520
liveness probe and redness probe which

02:50:41,439 --> 02:50:45,439
are more runtime production probes

02:50:43,520 --> 02:50:46,960
okay startup probe is just for startup

02:50:45,439 --> 02:50:48,840
live and ready or more in you know when

02:50:46,960 --> 02:50:51,120
the things up and running

02:50:48,840 --> 02:50:51,760
okay with these things set correctly

02:50:51,120 --> 02:50:55,040
though

02:50:51,760 --> 02:51:00,880
you then have a a working application

02:50:55,040 --> 02:51:00,880
so let me apply the right yaml file here

02:51:01,520 --> 02:51:08,240
uh let's see here

02:51:05,200 --> 02:51:11,840
and actually let's go just get this one

02:51:08,240 --> 02:51:14,240
start up live ready let's just pick live

02:51:11,840 --> 02:51:16,640
and ready for now

02:51:14,240 --> 02:51:19,600
go here it is let me go with my image

02:51:16,640 --> 02:51:21,680
again v8

02:51:19,600 --> 02:51:22,960
image pull policy always again you

02:51:21,680 --> 02:51:24,479
wouldn't use that in production

02:51:22,960 --> 02:51:26,080
only if not present but here's the

02:51:24,479 --> 02:51:28,880
liveness probe redness probe

02:51:26,080 --> 02:51:30,000
so liveness hits on the root and then

02:51:28,880 --> 02:51:32,160
the redness probe

02:51:30,000 --> 02:51:33,279
hits on health hopefully i have a health

02:51:32,160 --> 02:51:34,240
out there otherwise we'll have some

02:51:33,279 --> 02:51:37,760
problems

02:51:34,240 --> 02:51:39,439
okay so let's go here by the way a

02:51:37,760 --> 02:51:40,640
common error is to misconfigure these

02:51:39,439 --> 02:51:42,080
urls and

02:51:40,640 --> 02:51:43,760
have it wrong in which case you get all

02:51:42,080 --> 02:51:44,720
kinds of wonky behavior let's try to

02:51:43,760 --> 02:51:49,120
show you that

02:51:44,720 --> 02:51:51,359
so let's cube ctl replace dash f

02:51:49,120 --> 02:51:51,359
uh

02:51:54,319 --> 02:51:57,359
and it's called my boot

02:51:58,640 --> 02:52:05,279
my boot deployment live and ready

02:52:02,479 --> 02:52:06,640
yammer okay and let's see if it should

02:52:05,279 --> 02:52:09,040
be replacing

02:52:06,640 --> 02:52:11,840
okay it's replacing notice by the way

02:52:09,040 --> 02:52:15,840
it's rolling out our new deployment

02:52:11,840 --> 02:52:19,040
all right right now okay and there's our

02:52:15,840 --> 02:52:21,680
there's our bonjours let's see if it

02:52:19,040 --> 02:52:22,319
fail bonjour bonjour wait it shouldn't

02:52:21,680 --> 02:52:24,160
be bonjour

02:52:22,319 --> 02:52:29,279
oh there's the namaste there's the

02:52:24,160 --> 02:52:32,080
namaste coming through

02:52:29,279 --> 02:52:32,800
okay let's let it just finish till we

02:52:32,080 --> 02:52:35,840
get to all

02:52:32,800 --> 02:52:38,000
namaste's but notice it's this behavior

02:52:35,840 --> 02:52:39,600
has already changed slightly

02:52:38,000 --> 02:52:41,600
notice it's not it didn't immediately

02:52:39,600 --> 02:52:43,279
just try dumping you into namaste

02:52:41,600 --> 02:52:44,640
because it is trying to do that liveness

02:52:43,279 --> 02:52:46,960
check and writing this check before it

02:52:44,640 --> 02:52:48,720
throws into the load balancer

02:52:46,960 --> 02:52:50,240
all right so we just have a few more

02:52:48,720 --> 02:52:51,520
bonjour still in the production

02:52:50,240 --> 02:52:55,359
environment let's see if it'll

02:52:51,520 --> 02:52:58,800
clean those out and get all namaste

02:52:55,359 --> 02:53:02,080
all right good i think we're there now

02:52:58,800 --> 02:53:02,080
let me edit that deployment

02:53:04,800 --> 02:53:12,880
uh colon v8 all right

02:53:08,319 --> 02:53:12,880
let's go back to rhee developers

02:53:14,080 --> 02:53:20,720
my boot and let's go to back to v1

02:53:17,600 --> 02:53:22,399
save and close

02:53:20,720 --> 02:53:24,399
okay let's see how this behaves so it's

02:53:22,399 --> 02:53:26,399
rolling out the v1 image now instead of

02:53:24,399 --> 02:53:28,560
that v8 image i created

02:53:26,399 --> 02:53:31,120
notice how slow it's being because the

02:53:28,560 --> 02:53:32,720
slowness is because it's booting it up

02:53:31,120 --> 02:53:34,000
checking the liveness checking the live

02:53:32,720 --> 02:53:34,880
it's checking the readiness it's

02:53:34,000 --> 02:53:37,200
checking

02:53:34,880 --> 02:53:38,080
okay and it only sends you your load

02:53:37,200 --> 02:53:40,240
through

02:53:38,080 --> 02:53:42,880
when it's find it valid right so it's

02:53:40,240 --> 02:53:45,439
now aloha but not aloha across the board

02:53:42,880 --> 02:53:46,640
because it's still rolling out those um

02:53:45,439 --> 02:53:47,920
those pods right

02:53:46,640 --> 02:53:50,840
and at some point it'll eventually

02:53:47,920 --> 02:53:52,240
overturn all the pods from namaste to

02:53:50,840 --> 02:53:55,439
aloha and

02:53:52,240 --> 02:53:57,920
oh still one more nama stay in play

02:53:55,439 --> 02:53:59,359
so the process of roll out is way slower

02:53:57,920 --> 02:54:03,359
because it's doing it very

02:53:59,359 --> 02:54:05,359
safely now okay it's doing the roll out

02:54:03,359 --> 02:54:06,560
from the perspective of check doing

02:54:05,359 --> 02:54:08,319
those checks

02:54:06,560 --> 02:54:09,840
so make sure you have you have those

02:54:08,319 --> 02:54:10,720
liveness probes and radius probes set

02:54:09,840 --> 02:54:12,800
correctly

02:54:10,720 --> 02:54:14,319
otherwise all hell could break loose in

02:54:12,800 --> 02:54:15,520
your environment let's actually test it

02:54:14,319 --> 02:54:19,680
one more time

02:54:15,520 --> 02:54:20,080
so that was v1 all right so let me go to

02:54:19,680 --> 02:54:22,720
the

02:54:20,080 --> 02:54:24,960
where the v1 was all right let me make

02:54:22,720 --> 02:54:28,479
this v2

02:54:24,960 --> 02:54:29,520
save close so now that you roll over to

02:54:28,479 --> 02:54:31,680
bonjour

02:54:29,520 --> 02:54:33,760
and we should you know you would see it

02:54:31,680 --> 02:54:35,279
overturn the previous pods

02:54:33,760 --> 02:54:36,800
so it starts up the new pod before it

02:54:35,279 --> 02:54:37,120
tears down the old pot so that's a key

02:54:36,800 --> 02:54:38,560
thing

02:54:37,120 --> 02:54:40,800
start new pod before tearing down the

02:54:38,560 --> 02:54:42,240
new pod our old pot start the new pod

02:54:40,800 --> 02:54:43,760
check its liveness and redness before

02:54:42,240 --> 02:54:45,200
tearing down the old pod

02:54:43,760 --> 02:54:46,479
and then it goes through all existing

02:54:45,200 --> 02:54:49,120
pods and does that so in this case

02:54:46,479 --> 02:54:50,800
there's three pods up by default

02:54:49,120 --> 02:54:52,240
and therefore it's tearing them down one

02:54:50,800 --> 02:54:54,880
at a time

02:54:52,240 --> 02:54:56,880
and making sure you know live and ready

02:54:54,880 --> 02:54:58,399
passes before it turns it over

02:54:56,880 --> 02:55:00,080
from a service standpoint so there we go

02:54:58,399 --> 02:55:01,760
nice clean rolling update

02:55:00,080 --> 02:55:03,520
so the magic of kubernetes is the

02:55:01,760 --> 02:55:05,760
rolling updates right this is what

02:55:03,520 --> 02:55:07,120
we pay the big money for if you will if

02:55:05,760 --> 02:55:08,640
we didn't have this in our previous

02:55:07,120 --> 02:55:09,200
production environments this stuff was

02:55:08,640 --> 02:55:11,520
hard

02:55:09,200 --> 02:55:12,720
we had to use big ipf 5 routers we had

02:55:11,520 --> 02:55:14,319
to hire a consultant

02:55:12,720 --> 02:55:15,359
we spent days if not weeks trying to

02:55:14,319 --> 02:55:16,000
figure out how to make it work and then

02:55:15,359 --> 02:55:18,319
it never really

02:55:16,000 --> 02:55:19,760
quite worked this is all part of the

02:55:18,319 --> 02:55:21,760
kubernetes ecosystem are part of the

02:55:19,760 --> 02:55:23,040
kubernetes solution for free if you will

02:55:21,760 --> 02:55:24,640
but you do got to set the liveness

02:55:23,040 --> 02:55:26,319
program register pro correctly to get

02:55:24,640 --> 02:55:29,120
the behavior that you want

02:55:26,319 --> 02:55:29,760
so they are nicely overturned everybody

02:55:29,120 --> 02:55:31,520
from

02:55:29,760 --> 02:55:33,040
aloha to bonjour and we can go back to

02:55:31,520 --> 02:55:35,120
namaste if we want

02:55:33,040 --> 02:55:36,720
and it all is good from that perspective

02:55:35,120 --> 02:55:38,240
all right loudness from redis probe are

02:55:36,720 --> 02:55:40,240
your big wins here

02:55:38,240 --> 02:55:41,840
make sure you have those set correctly

02:55:40,240 --> 02:55:43,200
let's see if we can actually

02:55:41,840 --> 02:55:46,479
break it a little bit all right i don't

02:55:43,200 --> 02:55:46,479
know if we tell you to do that here

02:55:46,720 --> 02:55:52,319
um misbehave

02:55:49,920 --> 02:55:52,319
oh yeah

02:55:53,439 --> 02:55:57,359
okay yeah this is a good this is

02:55:55,120 --> 02:55:58,960
actually i forgot we added this

02:55:57,359 --> 02:56:01,600
so you notice right here see it's one

02:55:58,960 --> 02:56:06,319
for one ready

02:56:01,600 --> 02:56:12,400
i'm going to exec into that middle pod

02:56:06,319 --> 02:56:14,399
okay up the middle pod here

02:56:12,400 --> 02:56:18,080
[Music]

02:56:14,399 --> 02:56:18,080
dash dash bin bash

02:56:19,359 --> 02:56:23,760
all right oh boy it did something wrong

02:56:22,000 --> 02:56:26,960
oh it's not the double dash i t

02:56:23,760 --> 02:56:28,720
i did that again single dash okay curl

02:56:26,960 --> 02:56:31,840
localhost

02:56:28,720 --> 02:56:34,960
8080. all right see it says bonjour

02:56:31,840 --> 02:56:35,600
my boot rz29p that is the one in the

02:56:34,960 --> 02:56:38,720
middle good

02:56:35,600 --> 02:56:42,640
got the right one and i'm gonna

02:56:38,720 --> 02:56:45,279
call this command called misbehave okay

02:56:42,640 --> 02:56:46,000
misbehave means that it's actually when

02:56:45,279 --> 02:56:48,640
you

02:56:46,000 --> 02:56:49,600
curl it it's going to give you a slight

02:56:48,640 --> 02:56:52,840
error

02:56:49,600 --> 02:56:55,840
okay a slight error it's going to give

02:56:52,840 --> 02:56:55,840
you

02:56:56,240 --> 02:57:01,760
no it's not why does it say 200 there

02:56:58,640 --> 02:57:01,760
let's see let's see let's see

02:57:02,640 --> 02:57:08,160
okay and all right so notice what

02:57:05,359 --> 02:57:10,800
happens here see it's a zero of one

02:57:08,160 --> 02:57:12,240
because it's misbehaving zero of one

02:57:10,800 --> 02:57:16,000
it's no longer ready

02:57:12,240 --> 02:57:16,000
okay it's no longer ready

02:57:16,240 --> 02:57:21,200
in points yeah so the end point itself

02:57:19,600 --> 02:57:26,080
is gone

02:57:21,200 --> 02:57:26,080
uh oh let's do this oh wide

02:57:26,880 --> 02:57:30,640
so basically four is no longer in the

02:57:29,760 --> 02:57:34,160
game

02:57:30,640 --> 02:57:36,319
because it's no longer ready okay

02:57:34,160 --> 02:57:38,080
and let's let's double check on this

02:57:36,319 --> 02:57:40,240
real quick so misbehave

02:57:38,080 --> 02:57:41,359
it's going to call the address is now

02:57:40,240 --> 02:57:44,319
gone

02:57:41,359 --> 02:57:45,439
the and so this is just the redness

02:57:44,319 --> 02:57:46,720
probe we're filling with here that's the

02:57:45,439 --> 02:57:50,080
misbehave

02:57:46,720 --> 02:57:52,960
okay so it's going to basically

02:57:50,080 --> 02:57:54,479
see it's going to be 0 1 no longer ready

02:57:52,960 --> 02:57:56,640
and therefore our curl is not going to

02:57:54,479 --> 02:58:01,040
see it anymore this is dropped out

02:57:56,640 --> 02:58:02,720
if i come back here and say behave

02:58:01,040 --> 02:58:04,640
right it'll eventually come back around

02:58:02,720 --> 02:58:06,640
see that it's behaving

02:58:04,640 --> 02:58:07,840
correctly one of one and now it's part

02:58:06,640 --> 02:58:11,680
of load balancer again so

02:58:07,840 --> 02:58:13,120
now you start seeing rz29 in there again

02:58:11,680 --> 02:58:15,520
so that's an example of the redness

02:58:13,120 --> 02:58:17,600
probe right you can basically

02:58:15,520 --> 02:58:18,560
you can because it's your url you can

02:58:17,600 --> 02:58:20,720
decide

02:58:18,560 --> 02:58:22,560
how you want to behave in this case um

02:58:20,720 --> 02:58:23,520
the misbehave just sets a flag that says

02:58:22,560 --> 02:58:27,040
return of

02:58:23,520 --> 02:58:28,960
an error okay

02:58:27,040 --> 02:58:30,800
the readiness pro by the way also could

02:58:28,960 --> 02:58:32,560
can be used to deal with your caches

02:58:30,800 --> 02:58:34,160
so let's say you want to before your app

02:58:32,560 --> 02:58:36,720
runs you want to connect to a database

02:58:34,160 --> 02:58:37,840
cache a bunch of stuff in memory and

02:58:36,720 --> 02:58:39,840
then be ready

02:58:37,840 --> 02:58:41,520
that's for you to control you basically

02:58:39,840 --> 02:58:44,640
can have your readiness probe

02:58:41,520 --> 02:58:46,319
return a 500 up until the point where

02:58:44,640 --> 02:58:47,600
your cache is populated then return 200

02:58:46,319 --> 02:58:48,399
which says you're ready to receive

02:58:47,600 --> 02:58:50,240
traffic

02:58:48,399 --> 02:58:51,520
and then you can kind of you know be in

02:58:50,240 --> 02:58:52,720
or out of the load balancer based on

02:58:51,520 --> 02:58:55,680
that point

02:58:52,720 --> 02:58:57,120
so if i go back to behave here and get

02:58:55,680 --> 02:58:58,319
our endpoints you can see now it's added

02:58:57,120 --> 02:59:00,640
back in

02:58:58,319 --> 02:59:02,300
okay and let's see if we can blow the

02:59:00,640 --> 02:59:05,279
lightness probe

02:59:02,300 --> 02:59:08,560
[Music]

02:59:05,279 --> 02:59:10,720
okay uh let's see here i'm curious to

02:59:08,560 --> 02:59:10,720
know

02:59:11,040 --> 02:59:15,120
edit deployment my boot let's see if we

02:59:14,479 --> 02:59:17,600
can make the

02:59:15,120 --> 02:59:20,240
lightest probe misbehave this is the one

02:59:17,600 --> 02:59:20,240
set with the wrong

02:59:20,720 --> 02:59:25,920
with vim instead of instead of vs codes

02:59:23,439 --> 02:59:25,920
let's do this

02:59:27,520 --> 02:59:31,920
all right what is the liveness probe set

02:59:29,359 --> 02:59:36,240
to just double checking

02:59:31,920 --> 02:59:36,240
in here it is set to

02:59:36,319 --> 02:59:42,880
where'd it go uh it's set to go to

02:59:39,680 --> 02:59:45,040
root okay it's set to go to root

02:59:42,880 --> 02:59:45,040
so

02:59:46,080 --> 02:59:51,520
okay so here's what we'll do okay so

02:59:48,800 --> 02:59:56,319
instead of going to root

02:59:51,520 --> 02:59:59,520
let it go to health save that

02:59:56,319 --> 03:00:02,880
okay let it go to health

02:59:59,520 --> 03:00:05,359
health should still be fine let's let it

03:00:02,880 --> 03:00:05,359
roll out

03:00:06,560 --> 03:00:12,880
so let's go into its process

03:00:11,600 --> 03:00:14,640
you notice the number by the way the

03:00:12,880 --> 03:00:15,040
incrementing number it goes back to one

03:00:14,640 --> 03:00:17,520
when

03:00:15,040 --> 03:00:19,680
the jvm gets restarted so it is

03:00:17,520 --> 03:00:21,200
restarting the jvms upon a rollout

03:00:19,680 --> 03:00:25,279
a respawn if you remember i said that

03:00:21,200 --> 03:00:28,880
earlier everything kind of responds here

03:00:25,279 --> 03:00:30,080
and this should behave as as as before

03:00:28,880 --> 03:00:32,640
the difference is we're going to mess

03:00:30,080 --> 03:00:32,640
with a little bit

03:00:33,040 --> 03:00:37,120
okay so there it goes all right so we

03:00:35,520 --> 03:00:39,439
have our three new spring boots

03:00:37,120 --> 03:00:40,720
bright and shiny let's pick this one in

03:00:39,439 --> 03:00:42,960
the middle there's some old ones are

03:00:40,720 --> 03:00:46,240
still terminating let's pick this one

03:00:42,960 --> 03:00:46,240
cube ctl exec

03:00:46,720 --> 03:00:54,240
it name of the pod

03:00:50,960 --> 03:00:57,439
ben bash let's see if this works for me

03:00:54,240 --> 03:01:00,640
okay i'm gonna do that curl localhost

03:00:57,439 --> 03:01:00,640
misbehave trick again

03:01:04,960 --> 03:01:07,840
misbehaving

03:01:09,279 --> 03:01:16,080
and let's see what happens here

03:01:13,120 --> 03:01:20,960
all right so it's no longer ready so

03:01:16,080 --> 03:01:25,200
zero of one means it's no longer ready

03:01:20,960 --> 03:01:25,200
it's no longer part of the load balancer

03:01:28,000 --> 03:01:30,479
okay

03:01:32,080 --> 03:01:34,640
and i have looked at this code in a

03:01:33,120 --> 03:01:37,040
while so let me go let me while it's

03:01:34,640 --> 03:01:37,040
doing that

03:01:40,160 --> 03:01:48,080
and hello world and

03:01:43,439 --> 03:01:50,000
spring boot let's look at the code

03:01:48,080 --> 03:01:51,600
okay let's um let's keep that curl

03:01:50,000 --> 03:01:53,680
running though

03:01:51,600 --> 03:01:54,800
because that's just interesting there it

03:01:53,680 --> 03:01:58,240
is oh oh

03:01:54,800 --> 03:02:00,160
oh and it and it did it okay

03:01:58,240 --> 03:02:02,000
so we kind of missed it so let's see

03:02:00,160 --> 03:02:04,960
this is subtle but it's important

03:02:02,000 --> 03:02:04,960
so health

03:02:05,279 --> 03:02:08,399
health okay so health has the behave

03:02:07,359 --> 03:02:11,120
flag so if the

03:02:08,399 --> 03:02:13,040
behave flag is set to false right every

03:02:11,120 --> 03:02:15,359
so if it's set to true returns to 200.

03:02:13,040 --> 03:02:17,680
if it's set to false right it returns a

03:02:15,359 --> 03:02:20,399
service unavailable which is a 503

03:02:17,680 --> 03:02:22,800
so the health command is returning a 503

03:02:20,399 --> 03:02:26,160
when this behave flag is set to false

03:02:22,800 --> 03:02:29,120
okay after set to true returns to 200

03:02:26,160 --> 03:02:31,840
notice to restart one there so let's try

03:02:29,120 --> 03:02:31,840
this one more time

03:02:32,880 --> 03:02:34,680
yeah yeah yeah let's try this one more

03:02:34,399 --> 03:02:36,399
time

03:02:34,680 --> 03:02:38,720
[Music]

03:02:36,399 --> 03:02:41,439
let's go back into it curl localhost

03:02:38,720 --> 03:02:41,439
03:02:42,840 --> 03:02:47,520
misbehave happening

03:02:44,880 --> 03:02:48,160
is because we're misbehaving it's

03:02:47,520 --> 03:02:49,520
returning an

03:02:48,160 --> 03:02:51,600
error so you're going to see it the

03:02:49,520 --> 03:02:54,000
readiness probe fail first

03:02:51,600 --> 03:02:55,279
but when the liveness probe fails you

03:02:54,000 --> 03:02:58,399
will see the restart

03:02:55,279 --> 03:02:59,520
increment to two so there so the redness

03:02:58,399 --> 03:03:00,800
probe basically said okay you're no

03:02:59,520 --> 03:03:02,720
longer part of the load balancer you're

03:03:00,800 --> 03:03:04,160
misbehaving

03:03:02,720 --> 03:03:05,439
but then eventually the lines probe

03:03:04,160 --> 03:03:07,359
comes around and goes hey you're really

03:03:05,439 --> 03:03:09,359
misbehaving let me restart you

03:03:07,359 --> 03:03:10,800
the fact that it restarts us though

03:03:09,359 --> 03:03:12,479
resets that flag

03:03:10,800 --> 03:03:13,920
to behave as opposed to misbehave and

03:03:12,479 --> 03:03:16,160
therefore it comes back

03:03:13,920 --> 03:03:19,200
normally right but you you so in other

03:03:16,160 --> 03:03:19,200
words it should be gone

03:03:19,840 --> 03:03:23,279
until we have a situation where it goes

03:03:21,840 --> 03:03:26,479
restarts two

03:03:23,279 --> 03:03:29,680
so that's what we're looking for there

03:03:26,479 --> 03:03:31,680
okay let's get endpoints right so

03:03:29,680 --> 03:03:37,120
there's our two end points restarts two

03:03:31,680 --> 03:03:37,120
see it now and then

03:03:38,319 --> 03:03:42,080
and oh by the way you notice my exec got

03:03:40,319 --> 03:03:44,240
kicked out because the pod got restarted

03:03:42,080 --> 03:03:46,399
so my exec got kicked out

03:03:44,240 --> 03:03:48,000
and now you see there's three end points

03:03:46,399 --> 03:03:49,680
because it passes its liveness permanent

03:03:48,000 --> 03:03:52,080
reddispro

03:03:49,680 --> 03:03:53,600
so where'd our curl go back so if we

03:03:52,080 --> 03:03:54,960
back to curling again we should see all

03:03:53,600 --> 03:03:56,960
three

03:03:54,960 --> 03:03:59,520
all right so there should be all three

03:03:56,960 --> 03:04:01,040
in there and there okay fantastic

03:03:59,520 --> 03:04:02,479
so you know you you want to spend some

03:04:01,040 --> 03:04:03,920
time thinking about that live and

03:04:02,479 --> 03:04:06,640
redispro but very important

03:04:03,920 --> 03:04:07,600
very important items okay we got a few

03:04:06,640 --> 03:04:10,160
minutes left

03:04:07,600 --> 03:04:12,399
okay i think we actually go to 5 45

03:04:10,160 --> 03:04:14,800
according to the schedule

03:04:12,399 --> 03:04:16,479
i'm just double checking that to be sure

03:04:14,800 --> 03:04:18,479
yeah yeah there's a final

03:04:16,479 --> 03:04:19,920
comment and keynote at six so we go to 5

03:04:18,479 --> 03:04:22,720
45 here

03:04:19,920 --> 03:04:24,399
the if you guys are still with me god

03:04:22,720 --> 03:04:25,359
bless your souls you guys are real

03:04:24,399 --> 03:04:28,479
troopers

03:04:25,359 --> 03:04:29,600
sticking in there all you folks because

03:04:28,479 --> 03:04:31,920
you know this is my

03:04:29,600 --> 03:04:33,200
numbing hard stuff and some of you

03:04:31,920 --> 03:04:34,399
basically say you know what i go

03:04:33,200 --> 03:04:36,399
i'm going to take the tutorial and do

03:04:34,399 --> 03:04:37,920
this on my own time right

03:04:36,399 --> 03:04:39,840
i know you guys are you know you're

03:04:37,920 --> 03:04:42,399
suffering from all this sort of thing

03:04:39,840 --> 03:04:45,439
uh all right brandon's still there all

03:04:42,399 --> 03:04:48,160
right i get blisters on my fingers

03:04:45,439 --> 03:04:49,279
okay yeah so what we want to show you

03:04:48,160 --> 03:04:50,960
now is a couple more things

03:04:49,279 --> 03:04:52,399
okay because there are some pretty

03:04:50,960 --> 03:04:53,520
interesting things that you should just

03:04:52,399 --> 03:04:54,800
be aware of

03:04:53,520 --> 03:04:56,720
one is how do you deal with

03:04:54,800 --> 03:04:59,359
configuration okay

03:04:56,720 --> 03:05:01,200
configuration in the form of config map

03:04:59,359 --> 03:05:02,640
environment and secrets

03:05:01,200 --> 03:05:04,560
and i noticed that when we did the

03:05:02,640 --> 03:05:07,520
secret section we knocked out the

03:05:04,560 --> 03:05:09,760
environment variable one

03:05:07,520 --> 03:05:11,279
okay so i need to come back and add this

03:05:09,760 --> 03:05:13,040
this document by the way

03:05:11,279 --> 03:05:14,479
used to be all over here nine steps

03:05:13,040 --> 03:05:18,319
awesome and

03:05:14,479 --> 03:05:20,319
originally was my set of ascii docs and

03:05:18,319 --> 03:05:22,160
but when we've started migrating it to a

03:05:20,319 --> 03:05:23,279
common repository but let me give you

03:05:22,160 --> 03:05:26,160
this one

03:05:23,279 --> 03:05:27,359
because this talks about the environment

03:05:26,160 --> 03:05:28,640
okay

03:05:27,359 --> 03:05:30,240
because what we want to do is kind of

03:05:28,640 --> 03:05:31,520
say how do you do a configuration now

03:05:30,240 --> 03:05:32,960
this is super important

03:05:31,520 --> 03:05:35,200
so how do you do a configuration there's

03:05:32,960 --> 03:05:36,080
the config map there's environment

03:05:35,200 --> 03:05:38,080
variables

03:05:36,080 --> 03:05:39,680
and there's secrets because what you

03:05:38,080 --> 03:05:41,600
want is the behavior of your application

03:05:39,680 --> 03:05:43,040
to change based on your

03:05:41,600 --> 03:05:45,040
uh based on your environment so in other

03:05:43,040 --> 03:05:46,000
words i want to run this in development

03:05:45,040 --> 03:05:48,479
on mini cube

03:05:46,000 --> 03:05:50,640
but i want to run the exact same code uh

03:05:48,479 --> 03:05:52,000
on in my staging environment and my

03:05:50,640 --> 03:05:53,840
staging environment might not connect to

03:05:52,000 --> 03:05:55,680
my sql might connect to oracle or if i

03:05:53,840 --> 03:05:57,920
might want to have a different

03:05:55,680 --> 03:05:59,359
url for the connections to my database

03:05:57,920 --> 03:06:01,040
to my message broker

03:05:59,359 --> 03:06:02,399
i might want to just have simply a

03:06:01,040 --> 03:06:04,319
different config

03:06:02,399 --> 03:06:06,160
now this is all part of the 12 factor

03:06:04,319 --> 03:06:07,439
apps right so 12 factor apps is what who

03:06:06,160 --> 03:06:08,880
pushed this idea

03:06:07,439 --> 03:06:10,240
so in other words you externalize

03:06:08,880 --> 03:06:11,600
configurations so you don't have to

03:06:10,240 --> 03:06:13,520
change code

03:06:11,600 --> 03:06:14,640
i make this point because i run into

03:06:13,520 --> 03:06:16,880
lots of teams

03:06:14,640 --> 03:06:18,319
who literally in their git repository or

03:06:16,880 --> 03:06:21,600
subversion repository

03:06:18,319 --> 03:06:23,439
have a branch for development of the

03:06:21,600 --> 03:06:26,720
same code a branch for

03:06:23,439 --> 03:06:29,120
qa a branch for staging

03:06:26,720 --> 03:06:30,720
and a branch for production because in

03:06:29,120 --> 03:06:32,479
order to change the configuration they

03:06:30,720 --> 03:06:34,240
literally have to change the code

03:06:32,479 --> 03:06:35,680
and therefore they have to change the

03:06:34,240 --> 03:06:37,439
configuration by changing the code

03:06:35,680 --> 03:06:39,359
this of course is horrible they are

03:06:37,439 --> 03:06:40,479
suffering from this process because

03:06:39,359 --> 03:06:41,439
every time they want to make a change

03:06:40,479 --> 03:06:42,560
they got to make it across four

03:06:41,439 --> 03:06:43,840
different branches

03:06:42,560 --> 03:06:45,040
because the production one is slightly

03:06:43,840 --> 03:06:46,319
different the staging one just like

03:06:45,040 --> 03:06:47,680
different qa1 which is slightly

03:06:46,319 --> 03:06:49,279
different from the development one

03:06:47,680 --> 03:06:51,200
the goal is to externalize all that

03:06:49,279 --> 03:06:52,399
configuration using some form of

03:06:51,200 --> 03:06:53,520
environment variable

03:06:52,399 --> 03:06:54,800
and then you get those environment

03:06:53,520 --> 03:06:55,439
variables from this thing called config

03:06:54,800 --> 03:06:59,439
map

03:06:55,439 --> 03:07:01,359
okay so let me come back over here

03:06:59,439 --> 03:07:02,640
that uh my boot deployment now that

03:07:01,359 --> 03:07:04,960
let's ignore that

03:07:02,640 --> 03:07:06,080
configure set and i'm just looking at

03:07:04,960 --> 03:07:09,680
this here

03:07:06,080 --> 03:07:11,120
let's go is this the right file even

03:07:09,680 --> 03:07:12,800
my boot deployment anything that's right

03:07:11,120 --> 03:07:16,720
file let's look at it the web

03:07:12,800 --> 03:07:20,479
files not that

03:07:16,720 --> 03:07:24,080
let's go here so resources

03:07:20,479 --> 03:07:26,720
resource limits configuration okay so

03:07:24,080 --> 03:07:29,040
we're it's going to pull the my boot v1

03:07:26,720 --> 03:07:30,960
notice it says configmat ref my config

03:07:29,040 --> 03:07:32,000
here all right so environment from

03:07:30,960 --> 03:07:34,240
configmapref

03:07:32,000 --> 03:07:35,760
my config so in other words pull

03:07:34,240 --> 03:07:37,840
environment variables out of the config

03:07:35,760 --> 03:07:40,800
map called

03:07:37,840 --> 03:07:42,640
okay this does mean we gotta deploy the

03:07:40,800 --> 03:07:45,920
uh configuration

03:07:42,640 --> 03:07:47,359
uh the config file let's see where it

03:07:45,920 --> 03:07:49,120
says to do that

03:07:47,359 --> 03:07:50,800
yeah yeah yeah that all that create the

03:07:49,120 --> 03:07:52,319
config map all right so create the

03:07:50,800 --> 03:07:55,040
config map

03:07:52,319 --> 03:07:56,560
okay from the config map my config from

03:07:55,040 --> 03:07:58,640
environment file

03:07:56,560 --> 03:08:00,160
apps config some properties you see the

03:07:58,640 --> 03:08:01,920
apps config some properties

03:08:00,160 --> 03:08:07,760
so there's actually two little files in

03:08:01,920 --> 03:08:11,920
here let that be for now

03:08:07,760 --> 03:08:14,000
okay under apps config

03:08:11,920 --> 03:08:15,520
some properties other properties so in

03:08:14,000 --> 03:08:16,880
other words we have some properties here

03:08:15,520 --> 03:08:18,000
it's just a properties file

03:08:16,880 --> 03:08:19,720
but if you have a spring boot

03:08:18,000 --> 03:08:20,960
application and you want to override the

03:08:19,720 --> 03:08:22,479
application.properties

03:08:20,960 --> 03:08:23,840
you basically just have to you can

03:08:22,479 --> 03:08:25,439
create another properties file that's

03:08:23,840 --> 03:08:26,000
separate from it load into the config

03:08:25,439 --> 03:08:28,479
map

03:08:26,000 --> 03:08:30,399
and then these values will overlay the

03:08:28,479 --> 03:08:30,960
values in your application of properties

03:08:30,399 --> 03:08:32,160
right so

03:08:30,960 --> 03:08:33,439
just like an environment variable

03:08:32,160 --> 03:08:34,800
overlays it that's because these are

03:08:33,439 --> 03:08:36,479
environment variables

03:08:34,800 --> 03:08:37,680
so that's how you might set your

03:08:36,479 --> 03:08:38,800
environment variables is through this

03:08:37,680 --> 03:08:41,439
config map

03:08:38,800 --> 03:08:43,600
and if we look at the uh code let's go

03:08:41,439 --> 03:08:45,840
ahead and replace the code

03:08:43,600 --> 03:08:45,840
um

03:08:46,720 --> 03:08:54,640
apps compute files my boot

03:08:50,960 --> 03:08:54,640
deployment configuration

03:08:55,200 --> 03:09:01,439
yaml okay let that roll out

03:09:00,080 --> 03:09:03,200
let's take that o wide off so it's a

03:09:01,439 --> 03:09:05,200
little bit cleaner easier to read

03:09:03,200 --> 03:09:07,439
configuring oh i don't have the config

03:09:05,200 --> 03:09:08,479
map out yet so let's get the config map

03:09:07,439 --> 03:09:10,960
out there

03:09:08,479 --> 03:09:11,760
uh let's see here so it is going to have

03:09:10,960 --> 03:09:14,319
an error until we

03:09:11,760 --> 03:09:16,880
the config map exists so let's make sure

03:09:14,319 --> 03:09:20,319
we have it

03:09:16,880 --> 03:09:22,319
there we go now you notice we

03:09:20,319 --> 03:09:24,319
we issued our deployment before we had

03:09:22,319 --> 03:09:26,560
our config map and that gave us an error

03:09:24,319 --> 03:09:27,760
but it did eventually come back and say

03:09:26,560 --> 03:09:29,439
okay it's running

03:09:27,760 --> 03:09:30,479
so here's another thing about kubernetes

03:09:29,439 --> 03:09:31,120
that kind of will break your brain a

03:09:30,479 --> 03:09:32,479
little bit

03:09:31,120 --> 03:09:34,640
and that is kind of it has this

03:09:32,479 --> 03:09:35,520
reconciliation loop it's trying to fix

03:09:34,640 --> 03:09:37,200
itself

03:09:35,520 --> 03:09:38,800
so even though a config map was missing

03:09:37,200 --> 03:09:40,160
and therefore we got an error once we

03:09:38,800 --> 03:09:41,200
did have the config map we didn't have

03:09:40,160 --> 03:09:43,600
to redeploy

03:09:41,200 --> 03:09:45,520
it basically oh okay i'm good and it

03:09:43,600 --> 03:09:46,800
redeployed on its own right

03:09:45,520 --> 03:09:51,840
it kind of figured that out a little bit

03:09:46,800 --> 03:09:53,120
later so let's see here cube cto

03:09:51,840 --> 03:09:55,120
get services do we still have the

03:09:53,120 --> 03:09:58,160
service here cube cto get

03:09:55,120 --> 03:09:59,040
endpoints yeah there it is that's the

03:09:58,160 --> 03:10:03,040
one

03:09:59,040 --> 03:10:03,040
okay let's try our curl command again

03:10:04,239 --> 03:10:09,439
yeah let's see there okay fine

03:10:07,520 --> 03:10:10,880
that one says jumbo in this case the

03:10:09,439 --> 03:10:14,479
reason it says jumbo

03:10:10,880 --> 03:10:14,479
is because in the

03:10:14,560 --> 03:10:17,680
greeting jumbo right greeting

03:10:16,560 --> 03:10:22,479
environment variable

03:10:17,680 --> 03:10:22,479
if we go look at that code over here

03:10:22,640 --> 03:10:26,399
greeting the it's going to environment

03:10:25,200 --> 03:10:27,760
get property greeting

03:10:26,399 --> 03:10:29,439
it's gonna put the word default there if

03:10:27,760 --> 03:10:30,800
it doesn't find a greeting it loads the

03:10:29,439 --> 03:10:32,000
greeting into the string

03:10:30,800 --> 03:10:34,239
and then of course you now have that

03:10:32,000 --> 03:10:36,800
string so if we call the configure

03:10:34,239 --> 03:10:37,520
url you'll see what its properties are

03:10:36,800 --> 03:10:39,600
okay

03:10:37,520 --> 03:10:42,479
so let's actually do that real quick

03:10:39,600 --> 03:10:45,680
let's come over here

03:10:42,479 --> 03:10:47,120
and let's let that go here and actually

03:10:45,680 --> 03:10:48,239
let's just let that spin that's always

03:10:47,120 --> 03:10:51,279
fun to watch

03:10:48,239 --> 03:10:53,279
curl that

03:10:51,279 --> 03:10:55,279
and configure oh i have the word curl in

03:10:53,279 --> 03:10:58,640
there twice

03:10:55,279 --> 03:11:00,160
all right let's do this curl

03:10:58,640 --> 03:11:02,720
oh oh i don't have this environment

03:11:00,160 --> 03:11:08,800
variable set correctly

03:11:02,720 --> 03:11:13,279
so let's do this

03:11:08,800 --> 03:11:16,399
nope type it correctly bro here we go

03:11:13,279 --> 03:11:18,399
curl there we go so see it says uh

03:11:16,399 --> 03:11:20,080
jumbo and a more that comes from the

03:11:18,399 --> 03:11:21,520
properties file and this says default

03:11:20,080 --> 03:11:22,720
and default because that's what config

03:11:21,520 --> 03:11:26,880
map says

03:11:22,720 --> 03:11:29,600
okay so say configure that's what we got

03:11:26,880 --> 03:11:31,840
okay now let's actually load in the

03:11:29,600 --> 03:11:31,840
other

03:11:32,080 --> 03:11:36,630
so we had we basically pulled in some

03:11:33,680 --> 03:11:39,040
properties let's change that config map

03:11:36,630 --> 03:11:42,239
[Music]

03:11:39,040 --> 03:11:42,640
where that command go all right let's

03:11:42,239 --> 03:11:45,680
see

03:11:42,640 --> 03:11:48,720
let's just try to replace on it

03:11:45,680 --> 03:11:50,160
sometimes replace won't work and you'll

03:11:48,720 --> 03:11:54,080
get an error uh

03:11:50,160 --> 03:11:57,120
let me see and this was called other

03:11:54,080 --> 03:11:59,760
properties i think let me double check

03:11:57,120 --> 03:12:02,840
some properties other properties right

03:11:59,760 --> 03:12:05,680
so now we should set the other two

03:12:02,840 --> 03:12:08,960
values

03:12:05,680 --> 03:12:13,120
um nope you can't replace right

03:12:08,960 --> 03:12:19,840
so let's do this let's uh cube ctl

03:12:13,120 --> 03:12:19,840
get cm cube ctl delete cm my config

03:12:21,040 --> 03:12:26,080
all right and let's just create the

03:12:23,279 --> 03:12:26,080
other properties

03:12:26,960 --> 03:12:30,080
okay i think i did that correctly that

03:12:28,720 --> 03:12:33,279
looks good looks good

03:12:30,080 --> 03:12:33,840
cube ctl get cm okay let's make sure

03:12:33,279 --> 03:12:35,520
that we

03:12:33,840 --> 03:12:37,200
let's just go and bounce our pod to make

03:12:35,520 --> 03:12:38,239
sure it picks up the well actually let's

03:12:37,200 --> 03:12:39,760
call it a

03:12:38,239 --> 03:12:41,680
configure okay it's still the old

03:12:39,760 --> 03:12:44,880
settings let's bounce our pods so it

03:12:41,680 --> 03:12:44,880
picks up the new configuration

03:12:45,040 --> 03:12:51,040
delete pod okay

03:12:48,239 --> 03:12:51,040
let it come back up

03:12:52,399 --> 03:12:56,239
all right call that configure endpoint

03:12:54,960 --> 03:12:58,640
again

03:12:56,239 --> 03:13:00,640
and there it is so so basically we now

03:12:58,640 --> 03:13:02,239
set the other two values

03:13:00,640 --> 03:13:04,080
so the point of this is you can use the

03:13:02,239 --> 03:13:04,800
config map as a way to store your

03:13:04,080 --> 03:13:06,239
environment

03:13:04,800 --> 03:13:08,160
and then your config map is a separate

03:13:06,239 --> 03:13:08,720
entity that you can also by the way it

03:13:08,160 --> 03:13:12,000
also

03:13:08,720 --> 03:13:16,000
is a bit of yaml if you want it to be

03:13:12,000 --> 03:13:19,520
so get cm get cm

03:13:16,000 --> 03:13:20,399
my config oh yaml and you can basically

03:13:19,520 --> 03:13:23,439
have this thing

03:13:20,399 --> 03:13:24,800
living in your um source code repository

03:13:23,439 --> 03:13:26,080
also so in other words this could be

03:13:24,800 --> 03:13:27,600
your config map for

03:13:26,080 --> 03:13:29,120
staging your configmat for production

03:13:27,600 --> 03:13:30,319
you config map for development

03:13:29,120 --> 03:13:32,479
and then of course you would just change

03:13:30,319 --> 03:13:33,600
that file save it back to your source

03:13:32,479 --> 03:13:34,960
code repository

03:13:33,600 --> 03:13:36,319
and then that's the one you load when

03:13:34,960 --> 03:13:37,359
you want to load it into a certain type

03:13:36,319 --> 03:13:38,160
of environment maybe you have a mini

03:13:37,359 --> 03:13:40,840
cube version

03:13:38,160 --> 03:13:42,000
as an example and the reason that might

03:13:40,840 --> 03:13:43,439
matter

03:13:42,000 --> 03:13:46,319
by the way is because if you look at

03:13:43,439 --> 03:13:46,319
some of these settings

03:13:47,520 --> 03:13:51,040
okay here's a good example where this

03:13:49,840 --> 03:13:52,560
really might apply

03:13:51,040 --> 03:13:55,279
and it's slightly different than config

03:13:52,560 --> 03:13:58,319
maps but if i say edit deployment

03:13:55,279 --> 03:14:01,600
my boot okay

03:13:58,319 --> 03:14:03,600
and here if i look at replicas

03:14:01,600 --> 03:14:04,960
and in development my replicas is almost

03:14:03,600 --> 03:14:06,399
always going to be what right i don't

03:14:04,960 --> 03:14:08,000
need unless i'm experimenting i don't

03:14:06,399 --> 03:14:09,359
need to be more than one

03:14:08,000 --> 03:14:11,279
but in production there's almost always

03:14:09,359 --> 03:14:14,560
at least two if not three

03:14:11,279 --> 03:14:15,920
in development my memory and cpu is

03:14:14,560 --> 03:14:19,760
always going to be pretty low

03:14:15,920 --> 03:14:23,040
right one cpu 400 max ram in production

03:14:19,760 --> 03:14:24,960
is going to be one cpu two cpu five cpus

03:14:23,040 --> 03:14:26,239
and more memory so you're going to have

03:14:24,960 --> 03:14:28,479
situations where you want to

03:14:26,239 --> 03:14:29,359
adjust these settings for your

03:14:28,479 --> 03:14:30,800
environment

03:14:29,359 --> 03:14:32,080
this is by the way it's not based on a

03:14:30,800 --> 03:14:33,840
config map this is based on the

03:14:32,080 --> 03:14:38,560
manipulation of yaml itself

03:14:33,840 --> 03:14:38,560
and it's something called customize okay

03:14:38,800 --> 03:14:42,560
so customize so when you do cube control

03:14:41,279 --> 03:14:45,439
applied dash

03:14:42,560 --> 03:14:46,000
k and you'll see a customization file

03:14:45,439 --> 03:14:47,680
there

03:14:46,000 --> 03:14:50,000
i'll show you an example what that looks

03:14:47,680 --> 03:14:52,720
like it's not in this base class

03:14:50,000 --> 03:14:55,040
it is in the more advanced classes that

03:14:52,720 --> 03:14:55,040
we have

03:14:55,439 --> 03:14:59,760
let's see red hat scholars

03:14:58,479 --> 03:15:01,760
we're kind of sitting between two

03:14:59,760 --> 03:15:03,200
organizations by the way reddit scholars

03:15:01,760 --> 03:15:07,279
and developer demos

03:15:03,200 --> 03:15:12,399
let me see this the techton one this one

03:15:07,279 --> 03:15:12,399
let's see here is it the

03:15:12,560 --> 03:15:19,359
no not here where do we have it

03:15:15,760 --> 03:15:19,359
we have some more advanced examples

03:15:19,439 --> 03:15:22,960
and i gotta remember where one is

03:15:24,720 --> 03:15:28,319
oh and we have a question what about

03:15:26,720 --> 03:15:30,399
secrets okay we'll talk about secrets in

03:15:28,319 --> 03:15:32,160
a second

03:15:30,399 --> 03:15:34,239
that is coming up i'm just trying to

03:15:32,160 --> 03:15:37,040
show you

03:15:34,239 --> 03:15:37,040
an example

03:15:40,640 --> 03:15:47,200
of customize and it's a dash k

03:15:43,920 --> 03:15:50,239
instead of a dash f and

03:15:47,200 --> 03:15:50,239
oh it's not here

03:15:52,330 --> 03:15:55,559
[Music]

03:15:58,080 --> 03:16:04,640
come on come on back in

03:16:02,160 --> 03:16:04,640
here's our

03:16:06,640 --> 03:16:11,439
see this customization.yaml that's the

03:16:09,840 --> 03:16:11,760
file it's going to look for and you use

03:16:11,439 --> 03:16:13,439
a

03:16:11,760 --> 03:16:15,520
k but it allows you to do these wild

03:16:13,439 --> 03:16:16,800
card replacements throughout your yamls

03:16:15,520 --> 03:16:18,399
so you can do the things like the

03:16:16,800 --> 03:16:19,520
replicas and things of that nature that

03:16:18,399 --> 03:16:22,239
i mentioned

03:16:19,520 --> 03:16:22,720
customize you can also use helm right so

03:16:22,239 --> 03:16:24,319
helm

03:16:22,720 --> 03:16:26,479
is another solution that people like in

03:16:24,319 --> 03:16:28,960
the space helm charts

03:16:26,479 --> 03:16:30,640
and so people use helm a lot to interact

03:16:28,960 --> 03:16:33,120
with their kubernetes cluster would help

03:16:30,640 --> 03:16:35,200
helps them deal with this templating

03:16:33,120 --> 03:16:37,279
okay on the question of secrets though

03:16:35,200 --> 03:16:38,640
okay could you do this with him okay so

03:16:37,279 --> 03:16:40,640
todd's sake hey what about hell

03:16:38,640 --> 03:16:42,239
yes helm so customize by the way is

03:16:40,640 --> 03:16:44,479
built into the cube control command line

03:16:42,239 --> 03:16:44,960
tool itself so dash k as opposed to dash

03:16:44,479 --> 03:16:46,239
f

03:16:44,960 --> 03:16:48,000
and it looks for those customization

03:16:46,239 --> 03:16:49,120
files and so therefore

03:16:48,000 --> 03:16:50,560
people have kind of just started using

03:16:49,120 --> 03:16:51,359
customize because it's kind of what they

03:16:50,560 --> 03:16:52,880
already have

03:16:51,359 --> 03:16:54,960
you don't have to install another tool

03:16:52,880 --> 03:16:56,239
like helm but helm of course was the

03:16:54,960 --> 03:16:59,439
most popular solution

03:16:56,239 --> 03:17:01,840
prior to uh doing this so you know if

03:16:59,439 --> 03:17:03,359
you come over here and look at the um

03:17:01,840 --> 03:17:05,600
uh if you want to try home and you're

03:17:03,359 --> 03:17:05,600
new

03:17:06,000 --> 03:17:10,319
i'd just come check out the quick start

03:17:08,000 --> 03:17:11,840
guide for helm it's pretty awesome

03:17:10,319 --> 03:17:14,080
you can work it should work right with

03:17:11,840 --> 03:17:16,399
the mini cube you've just set up here

03:17:14,080 --> 03:17:18,239
all right so you could use the helm and

03:17:16,399 --> 03:17:21,279
then for customize

03:17:18,239 --> 03:17:24,080
let's see customize

03:17:21,279 --> 03:17:25,359
i don't i have not actually looked for a

03:17:24,080 --> 03:17:28,560
customized getting started

03:17:25,359 --> 03:17:30,960
i've tried the helm one works great

03:17:28,560 --> 03:17:32,640
uh declining manager and then using

03:17:30,960 --> 03:17:36,720
customize

03:17:32,640 --> 03:17:36,720
yeah so again dash k

03:17:37,279 --> 03:17:41,760
all right so check that out okay a nice

03:17:40,239 --> 03:17:42,399
nice way to deal with wild cards things

03:17:41,760 --> 03:17:43,840
like that

03:17:42,399 --> 03:17:45,279
if you have an open shift environment it

03:17:43,840 --> 03:17:46,960
supports those solutions that we just

03:17:45,279 --> 03:17:47,920
saw but obviously it also has a concept

03:17:46,960 --> 03:17:49,760
of templates

03:17:47,920 --> 03:17:51,200
so if you think about it from an

03:17:49,760 --> 03:17:52,720
enterprise standpoint

03:17:51,200 --> 03:17:54,399
you're going to have a dev staging

03:17:52,720 --> 03:17:55,600
production and so we've always had the

03:17:54,399 --> 03:17:57,200
concept of templates from the very

03:17:55,600 --> 03:17:59,439
beginning with an open shift as

03:17:57,200 --> 03:18:00,720
our kubernetes distribution all right so

03:17:59,439 --> 03:18:03,120
let's talk about secrets

03:18:00,720 --> 03:18:04,960
okay now this is important because

03:18:03,120 --> 03:18:07,760
secrets are going to be kind of funny

03:18:04,960 --> 03:18:09,359
okay we got those things we got our

03:18:07,760 --> 03:18:13,359
secrets

03:18:09,359 --> 03:18:15,040
okay i'm just looking here to see what

03:18:13,359 --> 03:18:17,600
it says to do

03:18:15,040 --> 03:18:18,800
okay and we want the configuration

03:18:17,600 --> 03:18:20,960
secret okay

03:18:18,800 --> 03:18:21,840
all right all right let's so let's do

03:18:20,960 --> 03:18:24,239
this

03:18:21,840 --> 03:18:25,040
okay you're going to create a secret i'm

03:18:24,239 --> 03:18:26,800
i'm just going to say

03:18:25,040 --> 03:18:28,720
i'm going to call this command cube cto

03:18:26,800 --> 03:18:31,359
create secret generic my secret

03:18:28,720 --> 03:18:32,479
from literal user my username from

03:18:31,359 --> 03:18:34,560
literal password

03:18:32,479 --> 03:18:35,600
so this is kind of the wrong way to do a

03:18:34,560 --> 03:18:38,800
secret but

03:18:35,600 --> 03:18:39,680
here it is okay we want to kind of just

03:18:38,800 --> 03:18:42,399
show you how to

03:18:39,680 --> 03:18:42,880
set up a secret so let's do that create

03:18:42,399 --> 03:18:46,319
secret

03:18:42,880 --> 03:18:46,319
cube ctl get secrets

03:18:46,399 --> 03:18:50,479
all right so we have the secret call my

03:18:48,399 --> 03:18:51,520
secret there that is super awesome so

03:18:50,479 --> 03:18:53,520
there it is so it's kind of like a

03:18:51,520 --> 03:18:55,120
config map it's its own object

03:18:53,520 --> 03:18:56,880
and it's because its own object you

03:18:55,120 --> 03:18:59,200
should know how to treat it special

03:18:56,880 --> 03:19:00,000
okay so if we say describe it okay you

03:18:59,200 --> 03:19:02,319
notice we uh

03:19:00,000 --> 03:19:03,279
it says password is 10 bytes so it

03:19:02,319 --> 03:19:05,200
doesn't just show

03:19:03,279 --> 03:19:07,680
us the password it says the password is

03:19:05,200 --> 03:19:11,120
10 bytes the user name is 10 bytes

03:19:07,680 --> 03:19:12,319
okay so it is kind of encrypted but it's

03:19:11,120 --> 03:19:14,640
not really encrypted

03:19:12,319 --> 03:19:16,160
all right if you do the oh yaml version

03:19:14,640 --> 03:19:18,239
of it

03:19:16,160 --> 03:19:19,359
let's see right there see the encryption

03:19:18,239 --> 03:19:22,399
is not really encryption

03:19:19,359 --> 03:19:23,120
it's just encoding okay it's base64

03:19:22,399 --> 03:19:25,760
encoded

03:19:23,120 --> 03:19:26,560
so if you have a base64 tool you can

03:19:25,760 --> 03:19:30,239
easily

03:19:26,560 --> 03:19:31,840
decode it okay so it's not encrypted

03:19:30,239 --> 03:19:34,000
so but this is where you really would

03:19:31,840 --> 03:19:35,600
put your user ids and passwords is in a

03:19:34,000 --> 03:19:37,439
secret not a config map

03:19:35,600 --> 03:19:39,040
and the whole point is that way

03:19:37,439 --> 03:19:40,319
everybody involved in the production

03:19:39,040 --> 03:19:41,439
management of your kubernetes cluster

03:19:40,319 --> 03:19:43,120
knows secrets are

03:19:41,439 --> 03:19:45,200
something to be kept secret well

03:19:43,120 --> 03:19:46,319
configmap if it gets out in the wild

03:19:45,200 --> 03:19:48,560
it's not too

03:19:46,319 --> 03:19:50,160
it's not a big issue if somebody like a

03:19:48,560 --> 03:19:51,840
developer figures it out

03:19:50,160 --> 03:19:53,120
right but you don't want your developer

03:19:51,840 --> 03:19:54,080
to know your secrets that are actually

03:19:53,120 --> 03:19:55,439
from production

03:19:54,080 --> 03:19:58,319
so the fact you can keep these things as

03:19:55,439 --> 03:20:02,000
two separate objects so get cm

03:19:58,319 --> 03:20:04,479
versus get secret is a key aspect of it

03:20:02,000 --> 03:20:05,279
okay it's just purely a separate place

03:20:04,479 --> 03:20:07,520
to keep

03:20:05,279 --> 03:20:08,720
the configuration information in this

03:20:07,520 --> 03:20:10,880
case a secret

03:20:08,720 --> 03:20:11,920
okay now there's some other things that

03:20:10,880 --> 03:20:14,319
you should be aware of

03:20:11,920 --> 03:20:16,080
so you can you know again we're using

03:20:14,319 --> 03:20:19,040
the base64 decode

03:20:16,080 --> 03:20:20,479
so you can always decode it all right so

03:20:19,040 --> 03:20:23,840
the next question is

03:20:20,479 --> 03:20:26,160
wait how do you make it really encrypted

03:20:23,840 --> 03:20:27,760
okay how do you make it really encrypted

03:20:26,160 --> 03:20:28,520
so there's a bunch of different options

03:20:27,760 --> 03:20:33,439
out there so

03:20:28,520 --> 03:20:36,720
kubernetes uh secrets

03:20:33,439 --> 03:20:38,720
encrypted okay a lot of options there

03:20:36,720 --> 03:20:42,399
so you can encrypting you know you might

03:20:38,720 --> 03:20:45,040
want to check out how to encrypt it here

03:20:42,399 --> 03:20:47,520
but what a lot what everyone really uses

03:20:45,040 --> 03:20:50,960
is this thing called vault

03:20:47,520 --> 03:20:53,279
okay let's see blah blah blah

03:20:50,960 --> 03:20:54,640
you know how to how to keep your secrets

03:20:53,279 --> 03:20:56,000
secure and get

03:20:54,640 --> 03:20:57,439
uh and of course there's lots of ways

03:20:56,000 --> 03:20:58,080
you can do that and that's just get

03:20:57,439 --> 03:21:00,560
stuff

03:20:58,080 --> 03:21:01,920
but let's see here so vault so hashtag

03:21:00,560 --> 03:21:04,960
fault

03:21:01,920 --> 03:21:04,960
is what a lot of people use

03:21:05,359 --> 03:21:08,560
for their way of and creep truly

03:21:07,840 --> 03:21:11,439
encrypting

03:21:08,560 --> 03:21:13,279
their secrets okay so that's a great

03:21:11,439 --> 03:21:15,120
tool that people like to use

03:21:13,279 --> 03:21:16,479
uh to deal with the encryption side of

03:21:15,120 --> 03:21:17,200
it because by default a secret is not

03:21:16,479 --> 03:21:18,560
encrypted

03:21:17,200 --> 03:21:20,720
we kind of make that point here it's

03:21:18,560 --> 03:21:21,840
just base64 encoded so

03:21:20,720 --> 03:21:25,040
uh it's important that you understand

03:21:21,840 --> 03:21:27,520
that okay so we got that secret

03:21:25,040 --> 03:21:29,520
you know can pull it out now how does

03:21:27,520 --> 03:21:30,880
the secret make it into the pod

03:21:29,520 --> 03:21:33,120
okay it doesn't actually go in his

03:21:30,880 --> 03:21:33,359
environment variable by default it goes

03:21:33,120 --> 03:21:36,160
in

03:21:33,359 --> 03:21:39,120
as a volume mount okay so it actually

03:21:36,160 --> 03:21:41,120
shows up on the file system on the disk

03:21:39,120 --> 03:21:42,720
and gets written to a certain location

03:21:41,120 --> 03:21:46,080
so let me get this

03:21:42,720 --> 03:21:47,600
let's apply this deployment

03:21:46,080 --> 03:21:49,680
okay and let's actually go look at it

03:21:47,600 --> 03:21:53,760
real quick while it's loading up

03:21:49,680 --> 03:21:56,399
so the configuration but secret

03:21:53,760 --> 03:21:57,439
okay notice there's a volume mounts and

03:21:56,399 --> 03:22:01,279
it's going to say

03:21:57,439 --> 03:22:02,560
my stuff secret stuff true volumes my

03:22:01,279 --> 03:22:05,359
secret volume

03:22:02,560 --> 03:22:06,160
secret secret name my secret so this my

03:22:05,359 --> 03:22:08,479
secret

03:22:06,160 --> 03:22:10,160
is the name of the secret itself okay so

03:22:08,479 --> 03:22:13,840
if i say cube ctl

03:22:10,160 --> 03:22:17,040
get secrets we call it my secret

03:22:13,840 --> 03:22:18,080
that's here we want to basically make it

03:22:17,040 --> 03:22:20,239
a volume

03:22:18,080 --> 03:22:22,160
there's a volume mount so basically what

03:22:20,239 --> 03:22:22,800
happens is your secret stuff is going to

03:22:22,160 --> 03:22:26,000
show up on

03:22:22,800 --> 03:22:27,279
in my stuff secret stuff all right so

03:22:26,000 --> 03:22:30,319
let's kind of go find that out

03:22:27,279 --> 03:22:33,900
let's go to cube ctl exec

03:22:30,319 --> 03:22:35,840
i t this is the pod in question

03:22:33,900 --> 03:22:39,439
[Music]

03:22:35,840 --> 03:22:41,120
dash dash ben bash let's curl local host

03:22:39,439 --> 03:22:42,640
i always like doing that say is it

03:22:41,120 --> 03:22:44,160
is it what i think i have okay so it's

03:22:42,640 --> 03:22:48,880
aloha this time

03:22:44,160 --> 03:22:52,479
okay and my stuff

03:22:48,880 --> 03:22:55,600
ls secret stuff there it is

03:22:52,479 --> 03:22:58,319
cat password my password cat

03:22:55,600 --> 03:22:59,120
user there it is so notice it's no

03:22:58,319 --> 03:23:02,160
longer even

03:22:59,120 --> 03:23:04,080
encoded over here it's in clear text but

03:23:02,160 --> 03:23:05,840
in this case it is volume mounted in

03:23:04,080 --> 03:23:07,439
and therefore you can easily go read it

03:23:05,840 --> 03:23:08,880
from the local file system to know what

03:23:07,439 --> 03:23:11,120
that secret stuff is

03:23:08,880 --> 03:23:13,600
and then apply it accordingly okay so

03:23:11,120 --> 03:23:14,880
that's another way to get configuration

03:23:13,600 --> 03:23:17,520
in the outside work from the outside

03:23:14,880 --> 03:23:18,399
world into your pod is using the concept

03:23:17,520 --> 03:23:20,239
of a secret

03:23:18,399 --> 03:23:21,520
and of course this volume mounting trick

03:23:20,239 --> 03:23:22,880
i think there are other tricks to it i

03:23:21,520 --> 03:23:23,520
just can't remember them all at this

03:23:22,880 --> 03:23:26,080
point

03:23:23,520 --> 03:23:28,319
but just know that's how you set it up

03:23:26,080 --> 03:23:31,760
and it's pretty straightforward okay

03:23:28,319 --> 03:23:34,239
now for how to get those secrets working

03:23:31,760 --> 03:23:35,920
uh so that secrets versus config map and

03:23:34,239 --> 03:23:37,920
of course environment variables

03:23:35,920 --> 03:23:39,760
uh are all different options there for

03:23:37,920 --> 03:23:41,200
you to configure your code and make it

03:23:39,760 --> 03:23:42,880
behave accordingly

03:23:41,200 --> 03:23:44,160
let's talk about operators now and the

03:23:42,880 --> 03:23:45,200
reason we talk about operators is

03:23:44,160 --> 03:23:47,200
because it's actually a really

03:23:45,200 --> 03:23:48,560
good thing to get your head around in

03:23:47,200 --> 03:23:49,680
order for you to kind of get ready for

03:23:48,560 --> 03:23:52,080
the next level

03:23:49,680 --> 03:23:52,880
all right let's see here cube and s

03:23:52,080 --> 03:23:56,560
where are we at

03:23:52,880 --> 03:23:59,279
cube let's delete namespace that all

03:23:56,560 --> 03:24:02,160
right one

03:23:59,279 --> 03:24:03,439
let's just get rid of that one if you

03:24:02,160 --> 03:24:04,880
see that pod terminate

03:24:03,439 --> 03:24:07,359
just clean it out get rid of all the

03:24:04,880 --> 03:24:08,720
secrets and config maps and

03:24:07,359 --> 03:24:09,600
whatever else we had in there just wipe

03:24:08,720 --> 03:24:11,200
it all out so the nice thing about

03:24:09,600 --> 03:24:12,080
wiping out the directory is it wipes out

03:24:11,200 --> 03:24:16,080
all the stuff inside

03:24:12,080 --> 03:24:18,560
it all right now let's talk about crds

03:24:16,080 --> 03:24:19,359
if i do a cube control get crds all name

03:24:18,560 --> 03:24:22,399
spaces here

03:24:19,359 --> 03:24:24,479
on my on mini cube notice it says

03:24:22,399 --> 03:24:25,680
no resources found i'm going to paste

03:24:24,479 --> 03:24:26,640
this into chat so you can kind of look

03:24:25,680 --> 03:24:29,600
at the command

03:24:26,640 --> 03:24:30,800
cube ctl get crds all name spaces if i

03:24:29,600 --> 03:24:32,800
do it on my

03:24:30,800 --> 03:24:34,160
google cluster my openshift cluster

03:24:32,800 --> 03:24:37,359
watch what happens

03:24:34,160 --> 03:24:40,160
an amazing list comes out okay

03:24:37,359 --> 03:24:41,040
so remember earlier when we talked about

03:24:40,160 --> 03:24:44,800
this concept

03:24:41,040 --> 03:24:48,000
of ncd and actually let me

03:24:44,800 --> 03:24:48,000
i have another diagram

03:24:48,160 --> 03:24:52,960
here we go okay remember you're using

03:24:51,840 --> 03:24:54,399
the cube control command

03:24:52,960 --> 03:24:56,800
and you're saying create deployment

03:24:54,399 --> 03:24:58,960
create pod create replica set

03:24:56,800 --> 03:24:59,920
create service that's every time you use

03:24:58,960 --> 03:25:01,200
that api

03:24:59,920 --> 03:25:03,040
through the cube control command it's

03:25:01,200 --> 03:25:04,960
writing it to the scd database

03:25:03,040 --> 03:25:06,239
okay and then of course some scheduler

03:25:04,960 --> 03:25:08,080
some controller

03:25:06,239 --> 03:25:09,520
basically is watching the database and

03:25:08,080 --> 03:25:10,160
going oh there's stuff you'd like me to

03:25:09,520 --> 03:25:12,560
do

03:25:10,160 --> 03:25:14,160
i want to spin out a new pod or spin out

03:25:12,560 --> 03:25:15,520
a new deployment spin on a replica set

03:25:14,160 --> 03:25:16,960
spin out a new service so

03:25:15,520 --> 03:25:18,960
basically that's what you're dealing

03:25:16,960 --> 03:25:19,600
with here okay and in the case of a real

03:25:18,960 --> 03:25:21,359
pod

03:25:19,600 --> 03:25:23,040
it goes to the cubelet and essentially

03:25:21,359 --> 03:25:24,479
does a docker run on your behalf

03:25:23,040 --> 03:25:27,120
all right that's essentially what the

03:25:24,479 --> 03:25:27,920
workflow is of what's happening in all

03:25:27,120 --> 03:25:31,040
the magical

03:25:27,920 --> 03:25:32,640
components if you have a crd you can

03:25:31,040 --> 03:25:35,439
extend the schema if you will

03:25:32,640 --> 03:25:36,000
of this ncd database and the api server

03:25:35,439 --> 03:25:38,479
to have this

03:25:36,000 --> 03:25:39,760
new object type and the reason this

03:25:38,479 --> 03:25:41,200
super matters if you're new to

03:25:39,760 --> 03:25:44,800
kubernetes is because

03:25:41,200 --> 03:25:47,920
all the cool stuff is done as customized

03:25:44,800 --> 03:25:49,600
custom resource definitions okay so

03:25:47,920 --> 03:25:52,160
custom resource definitions are these

03:25:49,600 --> 03:25:54,239
extensions to the api extensions to scd

03:25:52,160 --> 03:25:56,239
that make all kinds of other magic

03:25:54,239 --> 03:25:57,040
happen and that's where your istio your

03:25:56,239 --> 03:25:59,200
tecton

03:25:57,040 --> 03:26:00,720
your k native and all sorts of other

03:25:59,200 --> 03:26:02,640
craziness happens

03:26:00,720 --> 03:26:04,000
okay so i just want you to be aware of

03:26:02,640 --> 03:26:06,399
it because you're going to be

03:26:04,000 --> 03:26:08,479
living in this world where hey my mini

03:26:06,399 --> 03:26:10,239
cube doesn't have any crds and that's

03:26:08,479 --> 03:26:12,399
because it's a vanilla

03:26:10,239 --> 03:26:13,439
plain kubernetes and you're right it

03:26:12,399 --> 03:26:15,200
doesn't have anything

03:26:13,439 --> 03:26:17,200
super cool about it all right it's just

03:26:15,200 --> 03:26:19,520
plain old kubernetes

03:26:17,200 --> 03:26:22,560
but if i say cube control api resources

03:26:19,520 --> 03:26:23,920
so you should be aware of this command

03:26:22,560 --> 03:26:25,760
because this command tells you well what

03:26:23,920 --> 03:26:27,840
apis are available

03:26:25,760 --> 03:26:29,279
so you can see even vanilla kubernetes

03:26:27,840 --> 03:26:30,960
has tons of stuff in it

03:26:29,279 --> 03:26:32,720
right we already did secrets we did

03:26:30,960 --> 03:26:34,239
services we did a replication

03:26:32,720 --> 03:26:37,120
another replication controller we did a

03:26:34,239 --> 03:26:37,920
replica set uh we didn't do pvs pvcs but

03:26:37,120 --> 03:26:40,479
we could have

03:26:37,920 --> 03:26:41,920
uh we did endpoints we did config maps

03:26:40,479 --> 03:26:43,359
uh what else we did events

03:26:41,920 --> 03:26:45,439
right these are the objects we've been

03:26:43,359 --> 03:26:46,720
cube control get on keep control get

03:26:45,439 --> 03:26:49,840
nodes control get

03:26:46,720 --> 03:26:51,920
events q control get endpoints right

03:26:49,840 --> 03:26:54,479
so we did those commands that is known

03:26:51,920 --> 03:26:55,760
as cube control api resources

03:26:54,479 --> 03:26:57,840
when you apply a custom resource

03:26:55,760 --> 03:27:01,120
definition the api

03:26:57,840 --> 03:27:02,239
grows okay so it grows so let's actually

03:27:01,120 --> 03:27:03,760
try that real quick

03:27:02,239 --> 03:27:04,800
and uh and the reason this matters

03:27:03,760 --> 03:27:05,600
because when you get into the crazy

03:27:04,800 --> 03:27:06,960
stuff

03:27:05,600 --> 03:27:08,560
you know then you'll kind of have a

03:27:06,960 --> 03:27:09,600
better feel for it so here's an example

03:27:08,560 --> 03:27:11,200
crd

03:27:09,600 --> 03:27:12,720
this is it and by the way you normally

03:27:11,200 --> 03:27:13,600
won't create the custom resource

03:27:12,720 --> 03:27:16,160
definition

03:27:13,600 --> 03:27:17,600
you will create the custom resource

03:27:16,160 --> 03:27:19,760
based on a definition

03:27:17,600 --> 03:27:21,760
you typically will add a red hat right

03:27:19,760 --> 03:27:23,840
create the custom resource definitions

03:27:21,760 --> 03:27:24,960
and do these custom extensions but if

03:27:23,840 --> 03:27:26,640
you want to know how to do it

03:27:24,960 --> 03:27:27,920
it's pretty cool and let's say you might

03:27:26,640 --> 03:27:30,000
work for a software vendor you don't

03:27:27,920 --> 03:27:32,479
work for a big bank or big government

03:27:30,000 --> 03:27:33,279
you work for you know acme corporation

03:27:32,479 --> 03:27:35,920
who produces

03:27:33,279 --> 03:27:37,520
super cool widgets and gadgets uh and

03:27:35,920 --> 03:27:39,920
you make pizzas let's say

03:27:37,520 --> 03:27:41,120
so this is how you would do it okay so

03:27:39,920 --> 03:27:43,279
i'm gonna come in here

03:27:41,120 --> 03:27:44,640
and let's create that pizza hat you

03:27:43,279 --> 03:27:45,760
notice it's not pizza hut

03:27:44,640 --> 03:27:47,279
because i figured i would be in some

03:27:45,760 --> 03:27:49,279
form of copyright violation when i did

03:27:47,279 --> 03:27:52,800
that so let's create the pizza hat

03:27:49,279 --> 03:27:54,080
uh as an example okay

03:27:52,800 --> 03:27:55,439
we're in the pizza hut and i didn't

03:27:54,080 --> 03:27:56,000
really have to be in the name space yet

03:27:55,439 --> 03:27:59,279
but let's add

03:27:56,000 --> 03:27:59,279
the pizzas crd

03:27:59,760 --> 03:28:06,080
and now i say cube control get crds

03:28:03,439 --> 03:28:06,720
there's pizzas now okay that's kind of

03:28:06,080 --> 03:28:08,800
cool

03:28:06,720 --> 03:28:10,000
and so and actually this crd concept if

03:28:08,800 --> 03:28:12,810
i come over to my

03:28:10,000 --> 03:28:16,239
openshift environment where'd it go

03:28:12,810 --> 03:28:18,880
[Music]

03:28:16,239 --> 03:28:20,239
yep i could do it here too okay in other

03:28:18,880 --> 03:28:22,319
words the customer resource definition

03:28:20,239 --> 03:28:25,359
is just an extension of the api

03:28:22,319 --> 03:28:27,520
no matter what customer get crds grip

03:28:25,359 --> 03:28:29,439
pizzas the reason i'm gripping is

03:28:27,520 --> 03:28:30,880
because this one has a lot of crds in it

03:28:29,439 --> 03:28:32,960
but now you see pizzas

03:28:30,880 --> 03:28:34,800
are in my open shift cluster running on

03:28:32,960 --> 03:28:36,640
google as well as in my mini cube

03:28:34,800 --> 03:28:38,160
and now i have pizza objects so i can do

03:28:36,640 --> 03:28:42,080
things like get cube control

03:28:38,160 --> 03:28:44,000
get pizzas and there are no pizzas

03:28:42,080 --> 03:28:46,319
okay i don't have any pizzas loaded into

03:28:44,000 --> 03:28:46,960
the system yet but i have this get crds

03:28:46,319 --> 03:28:50,000
pizzas

03:28:46,960 --> 03:28:53,760
if i say cube control api resources

03:28:50,000 --> 03:28:56,160
and grip looking for pizzas

03:28:53,760 --> 03:28:57,600
there we go we now pizzas with a short

03:28:56,160 --> 03:29:00,720
name a pz

03:28:57,600 --> 03:29:01,840
so i can say cube control get pz and

03:29:00,720 --> 03:29:04,080
it's the same thing as if i

03:29:01,840 --> 03:29:05,760
typed out pizzas so now i have pizza

03:29:04,080 --> 03:29:06,960
objects as first class citizens and my

03:29:05,760 --> 03:29:09,040
and my system

03:29:06,960 --> 03:29:10,640
okay that's pretty awesome all by itself

03:29:09,040 --> 03:29:14,000
this means i can now

03:29:10,640 --> 03:29:16,319
uh deploy pizzas so let's say i deploy

03:29:14,000 --> 03:29:17,680
a cheese pizza here so cube control

03:29:16,319 --> 03:29:21,680
apply dash f

03:29:17,680 --> 03:29:25,200
and a cheese pizza

03:29:21,680 --> 03:29:27,200
and i say cue control get pizzas

03:29:25,200 --> 03:29:28,359
there it is there's a cheese pizza and

03:29:27,200 --> 03:29:33,359
if i say

03:29:28,359 --> 03:29:35,279
describe peasy cheesy pea

03:29:33,359 --> 03:29:36,560
cheesyp there it is you can see it has

03:29:35,279 --> 03:29:40,479
toppings of mozzarella

03:29:36,560 --> 03:29:41,840
but regular sauce okay and now

03:29:40,479 --> 03:29:43,040
now here's the thing that's kind of

03:29:41,840 --> 03:29:44,319
interesting about it so far all we're

03:29:43,040 --> 03:29:46,239
doing is

03:29:44,319 --> 03:29:47,600
creating reading and updating data

03:29:46,239 --> 03:29:48,000
within the database all right that's all

03:29:47,600 --> 03:29:50,239
we've done

03:29:48,000 --> 03:29:52,000
so far all right we're just crud

03:29:50,239 --> 03:29:53,120
operations against database that sct

03:29:52,000 --> 03:29:55,840
database

03:29:53,120 --> 03:29:56,720
but now we apply an operator okay an

03:29:55,840 --> 03:29:58,960
operator

03:29:56,720 --> 03:30:00,239
is just another type of pod that's going

03:29:58,960 --> 03:30:04,080
to respond

03:30:00,239 --> 03:30:06,000
to pizzas okay so let's go ahead and

03:30:04,080 --> 03:30:07,840
get it up and running so that we have

03:30:06,000 --> 03:30:09,840
pod now

03:30:07,840 --> 03:30:10,880
who's going to respond to those pizza

03:30:09,840 --> 03:30:12,720
objects

03:30:10,880 --> 03:30:15,279
living in our database so this is a

03:30:12,720 --> 03:30:18,000
custom example of a custom controller

03:30:15,279 --> 03:30:19,439
and let's see here while that's pull

03:30:18,000 --> 03:30:20,319
it's doing its container pulling right

03:30:19,439 --> 03:30:23,520
now

03:30:20,319 --> 03:30:26,960
let's see if i can find my pizzas

03:30:23,520 --> 03:30:28,840
uh pizza operator okay so the p that's

03:30:26,960 --> 03:30:31,680
the operator code

03:30:28,840 --> 03:30:33,439
and what am i missing let me go double

03:30:31,680 --> 03:30:36,399
check

03:30:33,439 --> 03:30:39,200
pizza app pizza's pizza deployment ammo

03:30:36,399 --> 03:30:39,200
app pizzas

03:30:40,880 --> 03:30:45,520
pizza deployment yammer oh there it is

03:30:43,439 --> 03:30:48,640
there it is there it is pizza deployment

03:30:45,520 --> 03:30:49,760
okay so notice this is a cluster roll

03:30:48,640 --> 03:30:51,760
all right so there's additional things

03:30:49,760 --> 03:30:54,319
here it has a service account

03:30:51,760 --> 03:30:56,080
it has a cluster roll binding it has a

03:30:54,319 --> 03:30:57,279
deployment so the plan is what we're

03:30:56,080 --> 03:30:59,359
used to seeing there's some additional

03:30:57,279 --> 03:31:00,000
stuff in related security your service

03:30:59,359 --> 03:31:02,720
accounts

03:31:00,000 --> 03:31:04,960
and customer cluster roles are basically

03:31:02,720 --> 03:31:05,680
how do you do security without a user

03:31:04,960 --> 03:31:07,920
involved

03:31:05,680 --> 03:31:10,319
okay and then we basically say it's

03:31:07,920 --> 03:31:12,479
going to pull this pizza operator

03:31:10,319 --> 03:31:14,239
image so it works just like a normal

03:31:12,479 --> 03:31:16,800
operator but it has to have

03:31:14,239 --> 03:31:19,040
access to the kubernetes api so that is

03:31:16,800 --> 03:31:20,800
why the service accounts are so critical

03:31:19,040 --> 03:31:22,319
it has it's looking at the creators api

03:31:20,800 --> 03:31:24,080
and going hey do you have pizzas

03:31:22,319 --> 03:31:25,600
and if so what pieces do you have on

03:31:24,080 --> 03:31:26,560
board and therefore it's going to

03:31:25,600 --> 03:31:28,720
operate on it

03:31:26,560 --> 03:31:31,120
and what happened here is it actually

03:31:28,720 --> 03:31:33,439
cranked up this cheesy pea pod

03:31:31,120 --> 03:31:35,359
if we come over here and say cube ctl

03:31:33,439 --> 03:31:36,960
logs to cheesy pea pod

03:31:35,359 --> 03:31:38,399
you can see it basically said doing the

03:31:36,960 --> 03:31:40,720
sauce adding

03:31:38,399 --> 03:31:41,680
sauce regular adding toppings mozzarella

03:31:40,720 --> 03:31:44,080
baking bake

03:31:41,680 --> 03:31:44,880
ready for delivery and that's all it did

03:31:44,080 --> 03:31:46,880
okay

03:31:44,880 --> 03:31:49,760
and so it also ran it as a job to

03:31:46,880 --> 03:31:51,520
complete it it's not continuing to run

03:31:49,760 --> 03:31:53,120
because it decided it didn't need to

03:31:51,520 --> 03:31:54,800
continue running it just had to run that

03:31:53,120 --> 03:31:56,080
job you can do it either way

03:31:54,800 --> 03:31:58,560
but the nice thing is you now have this

03:31:56,080 --> 03:31:59,600
concept of pizza objects cube ctl get

03:31:58,560 --> 03:32:01,600
pizzas

03:31:59,600 --> 03:32:03,279
and if we bring other pizzas into the

03:32:01,600 --> 03:32:07,920
system

03:32:03,279 --> 03:32:10,960
okay so let's actually let's try it so

03:32:07,920 --> 03:32:12,319
you can do this fast enough

03:32:10,960 --> 03:32:14,239
and make it a little bit more fun so

03:32:12,319 --> 03:32:17,520
cube ctl apply dash chef

03:32:14,239 --> 03:32:21,520
apps pizzas let's go with the

03:32:17,520 --> 03:32:25,359
pizzas pizza pizza pizzas pizzas

03:32:21,520 --> 03:32:26,960
let's go to meat pizza apply it stern

03:32:25,359 --> 03:32:29,040
meat let's see if we catch it fast

03:32:26,960 --> 03:32:30,560
enough okay so

03:32:29,040 --> 03:32:32,720
we're trying to basically look for the

03:32:30,560 --> 03:32:34,000
meat pizza uh coming to the system so

03:32:32,720 --> 03:32:35,359
the operator is going to see the fact

03:32:34,000 --> 03:32:38,160
that we've added a new pizza cube see

03:32:35,359 --> 03:32:38,160
i'll get pizzas

03:32:38,560 --> 03:32:45,760
and oh man so my stern didn't missed it

03:32:41,600 --> 03:32:48,640
okay meat stern doesn't work for me here

03:32:45,760 --> 03:32:51,279
all right so cube ctl logs and meats

03:32:48,640 --> 03:32:54,800
pizza pod

03:32:51,279 --> 03:32:57,120
meets pizza pie there we go oh oh oh oh

03:32:54,800 --> 03:32:58,880
got some extra stuff there there we go

03:32:57,120 --> 03:33:00,399
so it added the toppings mozzarella

03:32:58,880 --> 03:33:02,479
pepperoni sausage and bacon

03:33:00,399 --> 03:33:03,680
and then baking baked ready for delivery

03:33:02,479 --> 03:33:05,520
okay so

03:33:03,680 --> 03:33:06,800
you know this is just a fun example to

03:33:05,520 --> 03:33:08,720
show you kind of how

03:33:06,800 --> 03:33:10,399
to deal with something that's custom

03:33:08,720 --> 03:33:11,520
this does mean that in your company you

03:33:10,399 --> 03:33:13,680
can have your own custom resource

03:33:11,520 --> 03:33:17,439
definitions your own custom resources

03:33:13,680 --> 03:33:19,200
so custom resources are an example of uh

03:33:17,439 --> 03:33:20,479
p so let's actually look at these files

03:33:19,200 --> 03:33:22,640
so here's the crd

03:33:20,479 --> 03:33:24,399
custom resource definition okay that has

03:33:22,640 --> 03:33:26,160
to get declared and part of the api but

03:33:24,399 --> 03:33:27,040
this is a custom resource this is a

03:33:26,160 --> 03:33:30,000
specific

03:33:27,040 --> 03:33:31,120
pizza that i want called meets p okay

03:33:30,000 --> 03:33:33,359
and if i call it meets p

03:33:31,120 --> 03:33:34,960
bird that would be what's name uh so

03:33:33,359 --> 03:33:38,319
here if i save that

03:33:34,960 --> 03:33:40,080
and let's apply it again we'll see a

03:33:38,319 --> 03:33:42,640
meets p burr there right all right

03:33:40,080 --> 03:33:43,439
so but the operator is basically saying

03:33:42,640 --> 03:33:46,319
look for the

03:33:43,439 --> 03:33:47,120
record in ncd and spin on a pod uh to

03:33:46,319 --> 03:33:49,840
completion

03:33:47,120 --> 03:33:51,680
basically based on what it saw there and

03:33:49,840 --> 03:33:55,920
so if i wanted something else in here

03:33:51,680 --> 03:33:59,279
like my wife really likes mushrooms

03:33:55,920 --> 03:34:00,550
and let's call this meets pizza burr 2

03:33:59,279 --> 03:34:03,680
and apply it again

03:34:00,550 --> 03:34:08,720
[Music]

03:34:03,680 --> 03:34:08,720
and cube ctl logs beats

03:34:09,120 --> 03:34:14,080
p bur 2 pod

03:34:12,399 --> 03:34:15,840
there we go see now mushrooms are part

03:34:14,080 --> 03:34:18,399
of the equation okay

03:34:15,840 --> 03:34:20,080
so that is custom resource definitions

03:34:18,399 --> 03:34:21,439
the reason this matters so much though

03:34:20,080 --> 03:34:23,200
is once you have something kind of

03:34:21,439 --> 03:34:24,560
set up on your environment you can say

03:34:23,200 --> 03:34:26,399
things like get kafka's i want to come

03:34:24,560 --> 03:34:29,359
over here to my kafka one

03:34:26,399 --> 03:34:30,560
okay there's no kafkas in here but let's

03:34:29,359 --> 03:34:36,160
do this

03:34:30,560 --> 03:34:36,160
done uh watch cubes done my stuff

03:34:38,720 --> 03:34:42,960
okay so no kafka objects but we got some

03:34:41,120 --> 03:34:46,080
other stuff running here

03:34:42,960 --> 03:34:49,680
okay now if i come here and actually let

03:34:46,080 --> 03:34:49,680
me just do this from the gui standpoint

03:34:50,160 --> 03:34:53,520
so my stuff i can let me go back to

03:34:52,000 --> 03:34:55,520
administrator mode

03:34:53,520 --> 03:34:56,960
and let me come here and say operators

03:34:55,520 --> 03:34:58,560
installed operators

03:34:56,960 --> 03:35:00,000
one of them so this is what we did

03:34:58,560 --> 03:35:01,439
earlier with pizzas but this is more

03:35:00,000 --> 03:35:02,080
advanced right this is more like real

03:35:01,439 --> 03:35:04,560
world

03:35:02,080 --> 03:35:07,359
let me come here to where it says kafka

03:35:04,560 --> 03:35:09,040
and i can say create kafka

03:35:07,359 --> 03:35:13,040
and i'll call this my cluster and i'll

03:35:09,040 --> 03:35:13,040
just call it pizza for fun

03:35:13,760 --> 03:35:20,479
there we go and let's hit create so this

03:35:16,800 --> 03:35:23,760
is me doing the same thing with the ammo

03:35:20,479 --> 03:35:26,399
all right so here's the yaml for that

03:35:23,760 --> 03:35:26,960
but in this case what i'm doing is

03:35:26,399 --> 03:35:28,880
simply

03:35:26,960 --> 03:35:30,880
building a kafka object so what you'll

03:35:28,880 --> 03:35:32,160
notice is there's my cluster pizza

03:35:30,880 --> 03:35:33,359
there's gonna be three zookeepers

03:35:32,160 --> 03:35:35,600
because by default in this version of

03:35:33,359 --> 03:35:37,359
kafka the one we support in production

03:35:35,600 --> 03:35:39,200
at red hat you have three zookeepers you

03:35:37,359 --> 03:35:41,120
have three kafka brokers

03:35:39,200 --> 03:35:43,359
and basically it's building a whole

03:35:41,120 --> 03:35:46,640
cluster of kafka objects

03:35:43,359 --> 03:35:47,120
for me based on that okay now we're

03:35:46,640 --> 03:35:48,720
running

03:35:47,120 --> 03:35:50,160
pretty close on time pretty short on

03:35:48,720 --> 03:35:51,520
time we got to wrap things up

03:35:50,160 --> 03:35:53,600
i just kind of want to show you that

03:35:51,520 --> 03:35:55,520
concept though because that is how

03:35:53,600 --> 03:35:57,040
you get virtual services from mistio

03:35:55,520 --> 03:35:57,840
that's how you get serverless services

03:35:57,040 --> 03:35:59,680
from k-native

03:35:57,840 --> 03:36:01,920
that's how you get kafka objects from

03:35:59,680 --> 03:36:03,040
the kafka and all these other operators

03:36:01,920 --> 03:36:05,920
that you would install

03:36:03,040 --> 03:36:07,680
in your system right elasticsearch jager

03:36:05,920 --> 03:36:09,600
kiali which is your uh command

03:36:07,680 --> 03:36:11,359
your tool for visualizing your uh

03:36:09,600 --> 03:36:14,239
service mesh technology

03:36:11,359 --> 03:36:14,800
techcom pipelines that's what it you can

03:36:14,239 --> 03:36:16,960
have as

03:36:14,800 --> 03:36:18,560
extensions to your um kubernetes

03:36:16,960 --> 03:36:19,200
environment and give you a lot of

03:36:18,560 --> 03:36:21,600
advanced

03:36:19,200 --> 03:36:23,279
powers we have tutorials for all these

03:36:21,600 --> 03:36:24,880
by the way

03:36:23,279 --> 03:36:26,800
if you look at the nine steps to awesome

03:36:24,880 --> 03:36:28,160
document i list them all here we just

03:36:26,800 --> 03:36:29,520
been focusing on this one

03:36:28,160 --> 03:36:31,600
by the way the people's names here

03:36:29,520 --> 03:36:33,040
because these are the folks i recently

03:36:31,600 --> 03:36:34,399
assigned to helping maintain the

03:36:33,040 --> 03:36:36,000
documents because i

03:36:34,399 --> 03:36:37,920
didn't take a while for me to maintain

03:36:36,000 --> 03:36:39,439
them all so alex on our team here and

03:36:37,920 --> 03:36:40,880
comesh and sebi and

03:36:39,439 --> 03:36:42,720
elder et cetera they've been working on

03:36:40,880 --> 03:36:45,600
maintaining these documents for us

03:36:42,720 --> 03:36:46,399
uh if you if you go into any of them uh

03:36:45,600 --> 03:36:49,520
so like let's

03:36:46,399 --> 03:36:51,279
go to istio tutorial here and pop into

03:36:49,520 --> 03:36:53,120
that repository it takes you directly to

03:36:51,279 --> 03:36:56,239
the github

03:36:53,120 --> 03:36:57,760
and then the html has been spun out here

03:36:56,239 --> 03:36:59,520
right so now you can do the istio

03:36:57,760 --> 03:37:01,920
version of what we just did

03:36:59,520 --> 03:37:03,120
okay and then you can also uh just

03:37:01,920 --> 03:37:04,479
follow get up issue

03:37:03,120 --> 03:37:05,520
right you can see there's issues here

03:37:04,479 --> 03:37:06,720
pull requests that we have to go

03:37:05,520 --> 03:37:08,720
evaluate

03:37:06,720 --> 03:37:09,920
um and then you know file an issue if

03:37:08,720 --> 03:37:11,760
you have an issue with it

03:37:09,920 --> 03:37:13,600
and these things are always falling out

03:37:11,760 --> 03:37:14,560
of date uh just the nature of the job

03:37:13,600 --> 03:37:17,600
right you know these

03:37:14,560 --> 03:37:18,960
this stuff is moving fast okay do on

03:37:17,600 --> 03:37:19,520
your own complete some of these things

03:37:18,960 --> 03:37:20,960
you see

03:37:19,520 --> 03:37:22,319
you can play with the scheduler you can

03:37:20,960 --> 03:37:23,680
see how pods are scheduled through

03:37:22,319 --> 03:37:25,279
taints or affinity

03:37:23,680 --> 03:37:26,960
uh you can have jobs that's kind of like

03:37:25,279 --> 03:37:29,040
the completed thing you had saw earlier

03:37:26,960 --> 03:37:30,640
it runs to a certain completion state it

03:37:29,040 --> 03:37:32,880
doesn't always stay running

03:37:30,640 --> 03:37:34,880
it doesn't stay always on damon said

03:37:32,880 --> 03:37:36,640
stateful set so if you run databases and

03:37:34,880 --> 03:37:37,439
stateful technology you use a stateful

03:37:36,640 --> 03:37:39,040
set

03:37:37,439 --> 03:37:40,560
again ingress was down here if you want

03:37:39,040 --> 03:37:41,760
to try minicube ingress

03:37:40,560 --> 03:37:43,040
it's actually pretty straightforward you

03:37:41,760 --> 03:37:44,000
just do the add-on but then you got to

03:37:43,040 --> 03:37:46,800
do some other little tweaks

03:37:44,000 --> 03:37:47,600
to get to to work with ingress as an

03:37:46,800 --> 03:37:49,439
example

03:37:47,600 --> 03:37:50,560
but that's all your kubernetes tutorial

03:37:49,439 --> 03:37:52,160
you can see we had to cover a lot of

03:37:50,560 --> 03:37:54,160
ground a short period of time

03:37:52,160 --> 03:37:55,760
you guys have all the documents so at

03:37:54,160 --> 03:37:58,239
this point you are ready to rock and

03:37:55,760 --> 03:38:00,640
roll on your own and try these things

03:37:58,239 --> 03:38:01,439
again use that mini cube uh to your

03:38:00,640 --> 03:38:02,680
advantage

03:38:01,439 --> 03:38:04,399
or you can go back to that

03:38:02,680 --> 03:38:05,840
learn.openshift.com for the one hour

03:38:04,399 --> 03:38:07,200
thing

03:38:05,840 --> 03:38:09,359
right here that would give you the one

03:38:07,200 --> 03:38:13,920
hour if you needed it

03:38:09,359 --> 03:38:16,080
let me put that right here one more time

03:38:13,920 --> 03:38:17,520
and we are at this point out of time if

03:38:16,080 --> 03:38:19,520
there are any closing questions or

03:38:17,520 --> 03:38:22,560
thoughts feel free to throw them at me

03:38:19,520 --> 03:38:23,920
and let me get out of this mode here and

03:38:22,560 --> 03:38:25,680
let's see here oh this

03:38:23,920 --> 03:38:27,199
popped up over here i'm actually was

03:38:25,680 --> 03:38:28,160
monitoring my environment now i can see

03:38:27,199 --> 03:38:30,000
it better

03:38:28,160 --> 03:38:31,279
but if you have questions feel free to

03:38:30,000 --> 03:38:32,880
throw them at me in chat

03:38:31,279 --> 03:38:35,279
can i get the link to nine steps awesome

03:38:32,880 --> 03:38:36,800
slides yes yes yes this nine steps

03:38:35,279 --> 03:38:39,199
awesome slide deck

03:38:36,800 --> 03:38:40,080
all right let's come back here add that

03:38:39,199 --> 03:38:41,199
there

03:38:40,080 --> 03:38:45,120
thank you catherine hopefully you

03:38:41,199 --> 03:38:47,359
enjoyed it uh let's see

03:38:45,120 --> 03:38:48,399
all right other any other thoughts

03:38:47,359 --> 03:38:50,160
questions

03:38:48,399 --> 03:38:51,920
andrew you like the session hopefully it

03:38:50,160 --> 03:38:53,439
was fun we did work really hard getting

03:38:51,920 --> 03:38:54,880
all the documents in place because one

03:38:53,439 --> 03:38:56,239
thing i always hate when i take a little

03:38:54,880 --> 03:38:58,560
training class is

03:38:56,239 --> 03:38:59,920
great i paid attention i learned as fast

03:38:58,560 --> 03:39:01,199
as i could but i really want to try it

03:38:59,920 --> 03:39:02,880
on my own

03:39:01,199 --> 03:39:04,399
and the documents we work really hard to

03:39:02,880 --> 03:39:05,359
make sure you can go afterwards and try

03:39:04,399 --> 03:39:07,600
it as homework

03:39:05,359 --> 03:39:09,439
and give it a try and then of course

03:39:07,600 --> 03:39:10,720
come back and give us feedback later

03:39:09,439 --> 03:39:12,720
if you want to track me down you can

03:39:10,720 --> 03:39:16,080
always track me down on twitter

03:39:12,720 --> 03:39:18,560
or via email so here's the twitter

03:39:16,080 --> 03:39:19,840
as an example and at this point we're

03:39:18,560 --> 03:39:21,520
going to be breaking out of here and all

03:39:19,840 --> 03:39:23,600
things open is going into a final

03:39:21,520 --> 03:39:26,640
comments and wrap up keynote

03:39:23,600 --> 03:39:28,399
at six o'clock i think i assume right

03:39:26,640 --> 03:39:31,520
doug something's gonna be happening over

03:39:28,399 --> 03:39:34,000
there yeah i believe it's at six

03:39:31,520 --> 03:39:37,600
yeah yeah so a few sessions uh is that

03:39:34,000 --> 03:39:39,120
gonna be um

03:39:37,600 --> 03:39:41,359
but do you know who's actually going to

03:39:39,120 --> 03:39:45,359
be the presenter in that one

03:39:41,359 --> 03:39:46,479
i do not offend i don't okay

03:39:45,359 --> 03:39:48,160
but hopefully you guys enjoyed your all

03:39:46,479 --> 03:39:49,760
things open experience for those here

03:39:48,160 --> 03:39:52,000
virtually i highly encourage you to come

03:39:49,760 --> 03:39:53,359
to the one based in physical raleigh

03:39:52,000 --> 03:39:54,880
i've been involved with all things open

03:39:53,359 --> 03:39:55,920
i think since a very inception it's a

03:39:54,880 --> 03:39:57,359
wonderful event

03:39:55,920 --> 03:39:58,800
two or three thousand people show up

03:39:57,359 --> 03:39:59,600
physically when we could visit in the

03:39:58,800 --> 03:40:01,120
real world

03:39:59,600 --> 03:40:03,359
uh down to the raleigh convention center

03:40:01,120 --> 03:40:04,479
raleigh's a quaint little southern town

03:40:03,359 --> 03:40:05,680
if you've not been to it it's not

03:40:04,479 --> 03:40:07,439
exactly a tourist attraction

03:40:05,680 --> 03:40:08,800
except for all things open so i'd

03:40:07,439 --> 03:40:09,840
encourage you to come to the real event

03:40:08,800 --> 03:40:12,479
and the future

03:40:09,840 --> 03:40:13,600
uh it's a quite good economic value and

03:40:12,479 --> 03:40:15,199
just a lot of fun to see here one day

03:40:13,600 --> 03:40:17,680
red hat's often a sponsor

03:40:15,199 --> 03:40:31,520
and therefore i often try to be there

03:40:17,680 --> 03:40:31,520

YouTube URL: https://www.youtube.com/watch?v=SPo8f_TO88Y


