Title: All Things Open 2020 - Tim Hinrichs - Cloud-native Policy Enforcement
Publication date: 2020-10-29
Playlist: All Things Open 2020
Description: 
	All Things Open 2020
Tim Hinrichs
Cloud-native Policy Enforcement
Captions: 
	00:00:05,040 --> 00:00:07,359
all right well welcome everyone my name

00:00:06,160 --> 00:00:09,120
is tim henricks i'm the cto and

00:00:07,359 --> 00:00:10,800
co-founder at styra

00:00:09,120 --> 00:00:13,040
and i'm one of the co-creators of the

00:00:10,800 --> 00:00:15,519
open policy agent project

00:00:13,040 --> 00:00:17,119
so here today um uh we're gonna be

00:00:15,519 --> 00:00:18,320
talking about policy enforcement um

00:00:17,119 --> 00:00:19,920
we're gonna be sort of focusing on

00:00:18,320 --> 00:00:21,199
kubernetes and the applications running

00:00:19,920 --> 00:00:23,279
on kubernetes

00:00:21,199 --> 00:00:25,039
um and and to do that we're gonna be

00:00:23,279 --> 00:00:30,720
looking at the open policy agent

00:00:25,039 --> 00:00:33,360
um and using policies code

00:00:30,720 --> 00:00:34,399
so the sort of jumping off point for for

00:00:33,360 --> 00:00:36,719
this

00:00:34,399 --> 00:00:39,040
uh for this for today is just sort of a

00:00:36,719 --> 00:00:40,640
very simple observation which is that

00:00:39,040 --> 00:00:42,399
all of these mega trends that we're

00:00:40,640 --> 00:00:44,239
seeing throughout the world around

00:00:42,399 --> 00:00:45,600
uh you know changing how software is

00:00:44,239 --> 00:00:47,600
being built and run

00:00:45,600 --> 00:00:48,800
you know devops and and ci cd and

00:00:47,600 --> 00:00:50,320
microservices and

00:00:48,800 --> 00:00:51,920
and cloud and self-service and

00:00:50,320 --> 00:00:53,120
automation um those are all just

00:00:51,920 --> 00:00:54,640
fundamentally changing the way that

00:00:53,120 --> 00:00:56,960
we're building and running software

00:00:54,640 --> 00:00:58,000
um and it's super exciting you know like

00:00:56,960 --> 00:01:01,039
it's a lot of fun

00:00:58,000 --> 00:01:03,199
uh to be you know part of this this new

00:01:01,039 --> 00:01:04,159
movement around uh around software

00:01:03,199 --> 00:01:05,760
development

00:01:04,159 --> 00:01:07,200
um the observation we'll make here

00:01:05,760 --> 00:01:08,640
though is that there is

00:01:07,200 --> 00:01:10,080
because of all those changes around

00:01:08,640 --> 00:01:11,680
software development practices a bunch

00:01:10,080 --> 00:01:12,720
of changes around security that

00:01:11,680 --> 00:01:15,759
fundamentally

00:01:12,720 --> 00:01:17,920
security is changing in response to

00:01:15,759 --> 00:01:20,240
a lot of these these mega trends that

00:01:17,920 --> 00:01:21,600
we're also familiar with

00:01:20,240 --> 00:01:22,720
and so here down at the bottom i've sort

00:01:21,600 --> 00:01:24,159
of called out a couple of them you know

00:01:22,720 --> 00:01:25,600
if you think about the apis

00:01:24,159 --> 00:01:26,640
if you think about how many apis we have

00:01:25,600 --> 00:01:28,720
if you think about the public cloud

00:01:26,640 --> 00:01:31,119
you've got literally thousands of apis

00:01:28,720 --> 00:01:31,920
in a single large admittedly piece of

00:01:31,119 --> 00:01:34,240
software

00:01:31,920 --> 00:01:35,920
uh if you think about microservices you

00:01:34,240 --> 00:01:37,600
know the whole idea behind microservices

00:01:35,920 --> 00:01:38,400
is that you have many many more maybe

00:01:37,600 --> 00:01:40,000
10x

00:01:38,400 --> 00:01:42,079
the number of different software

00:01:40,000 --> 00:01:44,640
components each of which have

00:01:42,079 --> 00:01:45,920
um their own apis um and so from a

00:01:44,640 --> 00:01:47,280
security point of view you know from a

00:01:45,920 --> 00:01:48,479
usability point of view that's wonderful

00:01:47,280 --> 00:01:50,159
because now we have all these wonderful

00:01:48,479 --> 00:01:51,680
apis that we can use to to

00:01:50,159 --> 00:01:54,320
get our work done from a security point

00:01:51,680 --> 00:01:56,320
of view what that ends up doing is in in

00:01:54,320 --> 00:01:57,600
is increasing the attack surface you

00:01:56,320 --> 00:01:59,360
know if you think about all those

00:01:57,600 --> 00:02:00,880
apis that are great for us as as

00:01:59,360 --> 00:02:02,240
legitimate users if you think about

00:02:00,880 --> 00:02:04,479
this from a from a security point of

00:02:02,240 --> 00:02:06,159
view those are also uh that's also

00:02:04,479 --> 00:02:08,239
a much broader attack surface when you

00:02:06,159 --> 00:02:08,720
think about an attacker if you think

00:02:08,239 --> 00:02:10,720
about the

00:02:08,720 --> 00:02:12,319
cloud you know it used to be we all had

00:02:10,720 --> 00:02:14,480
control security wise over

00:02:12,319 --> 00:02:16,800
our you know our networks and our in our

00:02:14,480 --> 00:02:19,040
data centers our physical hardware

00:02:16,800 --> 00:02:20,560
um but uh but now what now that we moved

00:02:19,040 --> 00:02:21,760
to the public cloud well we just don't

00:02:20,560 --> 00:02:23,440
have control of that we don't have

00:02:21,760 --> 00:02:25,200
visibility into that

00:02:23,440 --> 00:02:26,640
a lot of times and so and so again

00:02:25,200 --> 00:02:28,080
that's just a fundamental shift in how

00:02:26,640 --> 00:02:29,920
we think about security

00:02:28,080 --> 00:02:32,640
if you think about ci cd and automation

00:02:29,920 --> 00:02:34,560
what that means to me in part is that

00:02:32,640 --> 00:02:35,920
especially in the context of the cloud

00:02:34,560 --> 00:02:38,319
is that we're spinning up new

00:02:35,920 --> 00:02:40,239
applications all the time

00:02:38,319 --> 00:02:41,840
um and and moreover we're spinning those

00:02:40,239 --> 00:02:43,280
up in new environments right we may be

00:02:41,840 --> 00:02:44,480
spinning up an environment in a country

00:02:43,280 --> 00:02:46,720
we've never visited before

00:02:44,480 --> 00:02:47,920
and so the the environments in which

00:02:46,720 --> 00:02:49,680
we're spinning these

00:02:47,920 --> 00:02:51,040
these new running applications is just

00:02:49,680 --> 00:02:53,360
far more dynamic

00:02:51,040 --> 00:02:54,480
than it ever has been before and and if

00:02:53,360 --> 00:02:56,560
you even think about you know load

00:02:54,480 --> 00:02:59,200
balancers and you know elastic

00:02:56,560 --> 00:03:00,560
uh compute um even the the environments

00:02:59,200 --> 00:03:02,319
are changing even based on the load that

00:03:00,560 --> 00:03:03,280
we're seeing on those applications

00:03:02,319 --> 00:03:05,040
and then if you finally think about

00:03:03,280 --> 00:03:07,280
devops and self-service we've just got

00:03:05,040 --> 00:03:09,200
far more people now using production

00:03:07,280 --> 00:03:10,400
um equipment than than we ever had

00:03:09,200 --> 00:03:13,519
before so

00:03:10,400 --> 00:03:16,560
that's again a big change in terms of

00:03:13,519 --> 00:03:18,000
in terms of security and so there's a

00:03:16,560 --> 00:03:19,040
bunch of things in security that we

00:03:18,000 --> 00:03:21,280
could talk about today we're going to be

00:03:19,040 --> 00:03:23,120
talking about authorization or policy

00:03:21,280 --> 00:03:24,319
a bit more generally the idea behind

00:03:23,120 --> 00:03:26,400
authorization remember

00:03:24,319 --> 00:03:27,519
is that what you're really thinking

00:03:26,400 --> 00:03:29,680
about in terms of security is

00:03:27,519 --> 00:03:31,440
controlling which actions

00:03:29,680 --> 00:03:32,959
are taken and now those actions could be

00:03:31,440 --> 00:03:34,080
taken by people they could be taken by

00:03:32,959 --> 00:03:35,519
machines

00:03:34,080 --> 00:03:36,879
and so it really really from the

00:03:35,519 --> 00:03:38,000
authorization's point of view doesn't

00:03:36,879 --> 00:03:38,959
doesn't really matter

00:03:38,000 --> 00:03:40,480
at the end of the day what you care

00:03:38,959 --> 00:03:42,400
about is which actions can these people

00:03:40,480 --> 00:03:45,200
in these machines take

00:03:42,400 --> 00:03:46,000
um and and the the answers the decisions

00:03:45,200 --> 00:03:49,040
to that to that

00:03:46,000 --> 00:03:51,040
authorization question are are sometimes

00:03:49,040 --> 00:03:52,799
dependent on a wide variety of factors

00:03:51,040 --> 00:03:53,439
sometimes it's just can this person or

00:03:52,799 --> 00:03:56,480
machine

00:03:53,439 --> 00:03:57,200
execute this api fine but maybe it also

00:03:56,480 --> 00:03:58,959
depends on

00:03:57,200 --> 00:04:00,640
you know the software or the environment

00:03:58,959 --> 00:04:01,920
that they're executing that api on maybe

00:04:00,640 --> 00:04:03,519
it depends on the resource maybe it

00:04:01,920 --> 00:04:05,519
depends on the time of day

00:04:03,519 --> 00:04:07,280
maybe it depends on you know 57 other

00:04:05,519 --> 00:04:08,480
things and so those authorization

00:04:07,280 --> 00:04:10,560
decisions that get made

00:04:08,480 --> 00:04:12,480
are pretty multi-faceted in a lot of a

00:04:10,560 --> 00:04:12,799
lot of cases and and what we need to do

00:04:12,480 --> 00:04:15,760
as

00:04:12,799 --> 00:04:16,959
you know as practitioners and and people

00:04:15,760 --> 00:04:19,440
responsible for

00:04:16,959 --> 00:04:20,239
running and building software is is

00:04:19,440 --> 00:04:22,800
impose

00:04:20,239 --> 00:04:24,880
uh our will on on which actions are

00:04:22,800 --> 00:04:26,639
allowed or which ones are not

00:04:24,880 --> 00:04:28,320
i will contrast this just just for the

00:04:26,639 --> 00:04:30,000
sake of completeness with authentication

00:04:28,320 --> 00:04:32,320
remember authentication is a problem of

00:04:30,000 --> 00:04:33,919
uh who are you right like you know how

00:04:32,320 --> 00:04:35,600
do you how do you convince the computer

00:04:33,919 --> 00:04:37,040
system that i am tim while i give it a

00:04:35,600 --> 00:04:38,560
username and a password and

00:04:37,040 --> 00:04:40,080
thumbprint whatever else multi-factor

00:04:38,560 --> 00:04:41,040
authentication so we're not

00:04:40,080 --> 00:04:42,400
going to be talking too much about

00:04:41,040 --> 00:04:43,680
authentication today we assume that's

00:04:42,400 --> 00:04:44,960
being solved there are plenty of good

00:04:43,680 --> 00:04:45,919
solutions around authentication for

00:04:44,960 --> 00:04:47,919
people as well as

00:04:45,919 --> 00:04:49,280
as well as for machines so what we're

00:04:47,919 --> 00:04:51,919
going to be focusing on today is really

00:04:49,280 --> 00:04:53,520
really authorization um and so i think

00:04:51,919 --> 00:04:56,560
the claim that i'll make here is that

00:04:53,520 --> 00:04:58,400
in this new world of of devops and

00:04:56,560 --> 00:04:59,520
self-service and so on and so forth

00:04:58,400 --> 00:05:00,880
authorization is just more important

00:04:59,520 --> 00:05:02,400
than ever um and it's just more

00:05:00,880 --> 00:05:03,039
important because they're just many more

00:05:02,400 --> 00:05:05,759
people

00:05:03,039 --> 00:05:06,880
that um that are that have access to

00:05:05,759 --> 00:05:08,240
production

00:05:06,880 --> 00:05:09,840
software there are many more actions

00:05:08,240 --> 00:05:11,840
that those people are taking there are

00:05:09,840 --> 00:05:12,800
many more software uh pieces of software

00:05:11,840 --> 00:05:14,320
that they're taking those actions on

00:05:12,800 --> 00:05:15,360
many many more resources than there ever

00:05:14,320 --> 00:05:17,440
were in the past

00:05:15,360 --> 00:05:18,479
um and those in those environments in

00:05:17,440 --> 00:05:19,360
which they're taking those actions are

00:05:18,479 --> 00:05:21,440
wildly uh

00:05:19,360 --> 00:05:22,800
wildly dynamic today far more so than in

00:05:21,440 --> 00:05:24,479
the past

00:05:22,800 --> 00:05:26,560
um and so then if i think about a sort

00:05:24,479 --> 00:05:28,080
of a standard cloud native stack

00:05:26,560 --> 00:05:29,600
uh one of the things that we see is that

00:05:28,080 --> 00:05:30,240
really authorization takes place

00:05:29,600 --> 00:05:32,720
everywhere

00:05:30,240 --> 00:05:34,720
right authorization is is is one of

00:05:32,720 --> 00:05:36,320
those foundational pillars of security

00:05:34,720 --> 00:05:38,400
and not surprisingly therefore it shows

00:05:36,320 --> 00:05:40,639
up in each and every piece of software

00:05:38,400 --> 00:05:42,560
that we use uh so if you think about

00:05:40,639 --> 00:05:44,320
like uh kubernetes for example there's

00:05:42,560 --> 00:05:45,440
all kinds of authorization i know mark

00:05:44,320 --> 00:05:46,400
was talking a little bit about it in the

00:05:45,440 --> 00:05:47,840
last session

00:05:46,400 --> 00:05:50,000
that you know at the kubernetes layer

00:05:47,840 --> 00:05:51,039
you've got authorization sort of at the

00:05:50,000 --> 00:05:52,320
there are a couple of different kinds of

00:05:51,039 --> 00:05:53,840
authorization the one i'll call out here

00:05:52,320 --> 00:05:55,680
though is just you know every time a

00:05:53,840 --> 00:05:57,600
user tries to deploy a new resource a

00:05:55,680 --> 00:05:58,240
new pod a new ingress to a kubernetes

00:05:57,600 --> 00:06:00,160
cluster

00:05:58,240 --> 00:06:01,280
is that user authorized to to deploy

00:06:00,160 --> 00:06:03,440
that resource or or

00:06:01,280 --> 00:06:05,199
are they not anytime you think about a

00:06:03,440 --> 00:06:06,080
microservice application or even just an

00:06:05,199 --> 00:06:07,680
application

00:06:06,080 --> 00:06:10,000
every time a user tries to take an

00:06:07,680 --> 00:06:12,000
action or a microservice tries to

00:06:10,000 --> 00:06:13,360
to execute an api call there's an

00:06:12,000 --> 00:06:14,960
authorization decision that needs to be

00:06:13,360 --> 00:06:16,880
made is that

00:06:14,960 --> 00:06:19,120
is that user is that is that machine

00:06:16,880 --> 00:06:20,560
authorized to perform that api call

00:06:19,120 --> 00:06:23,120
anytime somebody queries a production

00:06:20,560 --> 00:06:24,319
database or makes a change deduction

00:06:23,120 --> 00:06:25,600
database obviously there's an

00:06:24,319 --> 00:06:26,160
authorization question that needs to be

00:06:25,600 --> 00:06:27,919
solved

00:06:26,160 --> 00:06:29,680
anytime somebody spins up a new public

00:06:27,919 --> 00:06:31,280
cloud resource or modifies one that

00:06:29,680 --> 00:06:31,919
exists again there's an authorization

00:06:31,280 --> 00:06:33,919
decision

00:06:31,919 --> 00:06:35,520
anytime somebody ssh is into a linux box

00:06:33,919 --> 00:06:36,880
or spins up a docker container there's a

00:06:35,520 --> 00:06:38,479
there's an authorization decision is

00:06:36,880 --> 00:06:40,080
that is that allowed or not

00:06:38,479 --> 00:06:42,479
even in the cicd pipeline anytime

00:06:40,080 --> 00:06:43,680
somebody tries to commit a new resource

00:06:42,479 --> 00:06:45,360
especially if you're embracing sort of a

00:06:43,680 --> 00:06:45,680
git ops model where those resources that

00:06:45,360 --> 00:06:49,599
can

00:06:45,680 --> 00:06:51,440
get committed to to um to repositories

00:06:49,599 --> 00:06:53,199
get automatically deployed to

00:06:51,440 --> 00:06:54,639
kubernetes there's an authorization

00:06:53,199 --> 00:06:58,000
decision that needs to be made there

00:06:54,639 --> 00:07:00,800
as well so the sort of observation here

00:06:58,000 --> 00:07:02,319
is that authorization is is

00:07:00,800 --> 00:07:04,960
is pervasive throughout this cloud

00:07:02,319 --> 00:07:06,400
native ecosystem

00:07:04,960 --> 00:07:08,720
and the way that we used to deal with

00:07:06,400 --> 00:07:09,919
authorization um is there

00:07:08,720 --> 00:07:11,199
actually a couple of different ways so

00:07:09,919 --> 00:07:12,800
one one way that we used to deal with

00:07:11,199 --> 00:07:14,240
authorization was we just used to train

00:07:12,800 --> 00:07:15,440
people we just used to say you know here

00:07:14,240 --> 00:07:17,840
are the rules and regulations here's a

00:07:15,440 --> 00:07:20,080
wiki here's a pdf

00:07:17,840 --> 00:07:21,599
you know learn this and make sure that

00:07:20,080 --> 00:07:23,039
when you spin up a new resource on the

00:07:21,599 --> 00:07:23,919
public cloud that you know not to open

00:07:23,039 --> 00:07:26,560
ports that we've

00:07:23,919 --> 00:07:28,080
deemed are unacceptable or anytime you

00:07:26,560 --> 00:07:28,960
spin up a new resource on kubernetes

00:07:28,080 --> 00:07:30,880
make sure

00:07:28,960 --> 00:07:32,319
that um you know you've got the

00:07:30,880 --> 00:07:33,759
appropriate labels and you're using

00:07:32,319 --> 00:07:34,479
liveness and readiness probes or

00:07:33,759 --> 00:07:36,240
whatever the

00:07:34,479 --> 00:07:38,000
the rules are for that organization so

00:07:36,240 --> 00:07:39,280
that's one option another

00:07:38,000 --> 00:07:41,520
option is sort of the opposite end of

00:07:39,280 --> 00:07:42,240
the spectrum is that we actually take

00:07:41,520 --> 00:07:44,479
those policies

00:07:42,240 --> 00:07:45,919
and we hard code them into software so

00:07:44,479 --> 00:07:47,120
the idea here being that you know

00:07:45,919 --> 00:07:49,120
you could write let's say an admission

00:07:47,120 --> 00:07:50,879
controller on kubernetes and and write

00:07:49,120 --> 00:07:52,479
some go code and hard code into that

00:07:50,879 --> 00:07:53,680
that you're only going to allow

00:07:52,479 --> 00:07:55,120
new resources to be deployed to

00:07:53,680 --> 00:07:56,840
kubernetes if they have those liveness

00:07:55,120 --> 00:07:58,319
and readiness probes and the appropriate

00:07:56,840 --> 00:07:59,759
labels

00:07:58,319 --> 00:08:01,440
somewhere in between is sort of this

00:07:59,759 --> 00:08:03,599
configuration option which

00:08:01,440 --> 00:08:04,720
um is what we see from from most pieces

00:08:03,599 --> 00:08:06,000
of software today most pieces of

00:08:04,720 --> 00:08:07,039
software already have an authorization

00:08:06,000 --> 00:08:08,800
system built into them

00:08:07,039 --> 00:08:10,560
and so what you can do is go ahead and

00:08:08,800 --> 00:08:12,160
configure those authorization systems to

00:08:10,560 --> 00:08:14,400
control which people or which machines

00:08:12,160 --> 00:08:17,360
can perform which actions

00:08:14,400 --> 00:08:18,240
now um the the sort of downside to all

00:08:17,360 --> 00:08:19,280
of these approaches

00:08:18,240 --> 00:08:20,960
is that either you know if you're

00:08:19,280 --> 00:08:22,400
looking at training people then you know

00:08:20,960 --> 00:08:24,000
there's no actual enforcement you're

00:08:22,400 --> 00:08:25,120
just hoping that people have have read

00:08:24,000 --> 00:08:26,879
that wiki

00:08:25,120 --> 00:08:28,319
um when you think about hard-coding

00:08:26,879 --> 00:08:29,759
policy one of the downsides is that well

00:08:28,319 --> 00:08:31,520
now if that policy changes or somebody

00:08:29,759 --> 00:08:34,000
wants to audit that policy

00:08:31,520 --> 00:08:34,640
um you've got to go and and and re and

00:08:34,000 --> 00:08:36,399
change that

00:08:34,640 --> 00:08:37,919
you've got to go and find a programmer

00:08:36,399 --> 00:08:40,719
to change that policy and then

00:08:37,919 --> 00:08:41,839
redeploy it the configuration option is

00:08:40,719 --> 00:08:43,279
therefore sort of the nice one in

00:08:41,839 --> 00:08:45,040
between except the downside here is that

00:08:43,279 --> 00:08:46,480
each and every product on the planet

00:08:45,040 --> 00:08:48,480
each and every project on the planet has

00:08:46,480 --> 00:08:49,200
their own configuration language their

00:08:48,480 --> 00:08:51,680
own way

00:08:49,200 --> 00:08:53,600
of expressing and enforcing

00:08:51,680 --> 00:08:54,959
authorization they have their own api

00:08:53,600 --> 00:08:57,040
their own gui their own even

00:08:54,959 --> 00:08:58,320
model for how you think about um

00:08:57,040 --> 00:09:00,160
authorization

00:08:58,320 --> 00:09:01,440
um and so you know here are a couple of

00:09:00,160 --> 00:09:04,240
very simple uh uh

00:09:01,440 --> 00:09:04,560
examples of of policy you know only if

00:09:04,240 --> 00:09:06,399
you're

00:09:04,560 --> 00:09:08,480
on call can you run production apis or

00:09:06,399 --> 00:09:08,959
can you talk to production databases or

00:09:08,480 --> 00:09:10,480
can you

00:09:08,959 --> 00:09:13,360
you know spin up new resources on the

00:09:10,480 --> 00:09:13,360
kubernetes cluster

00:09:14,399 --> 00:09:18,240
now the open policy agent project which

00:09:16,640 --> 00:09:19,839
we'll talk about here for for most of

00:09:18,240 --> 00:09:22,080
today was really designed

00:09:19,839 --> 00:09:23,200
to to provide a unified solution to

00:09:22,080 --> 00:09:25,279
authorization

00:09:23,200 --> 00:09:26,320
across all of these different cloud

00:09:25,279 --> 00:09:28,720
native

00:09:26,320 --> 00:09:29,920
software systems so the idea behind opa

00:09:28,720 --> 00:09:31,519
is that instead of having

00:09:29,920 --> 00:09:33,040
you know in different configuration

00:09:31,519 --> 00:09:35,839
languages that you have to learn

00:09:33,040 --> 00:09:36,160
in order to set up in order to enforce

00:09:35,839 --> 00:09:38,720
and

00:09:36,160 --> 00:09:39,519
audit authorization throughout the cloud

00:09:38,720 --> 00:09:41,440
native stack

00:09:39,519 --> 00:09:43,680
in this case you have one language you

00:09:41,440 --> 00:09:46,000
have one set of tools you have one

00:09:43,680 --> 00:09:47,279
policy engine you have one framework for

00:09:46,000 --> 00:09:49,680
putting authorization

00:09:47,279 --> 00:09:52,000
into place across this cloud-native

00:09:49,680 --> 00:09:55,279
ecosystem

00:09:52,000 --> 00:09:56,959
and so uh really the way i like to think

00:09:55,279 --> 00:09:59,279
about this is you know what

00:09:56,959 --> 00:10:01,200
everybody now today realizes that there

00:09:59,279 --> 00:10:02,800
is such a thing as a kubernetes manifest

00:10:01,200 --> 00:10:05,839
there's also such a thing as a

00:10:02,800 --> 00:10:06,240
as an image format called jpeg or pngs

00:10:05,839 --> 00:10:07,839
right

00:10:06,240 --> 00:10:09,920
one of the things that oprah provides is

00:10:07,839 --> 00:10:12,399
a new format for a file

00:10:09,920 --> 00:10:13,839
called a policy file which which ends in

00:10:12,399 --> 00:10:15,360
rego as the

00:10:13,839 --> 00:10:17,200
which is the name of the policy language

00:10:15,360 --> 00:10:19,920
and that file defines

00:10:17,200 --> 00:10:22,240
how you express authorization policies

00:10:19,920 --> 00:10:24,160
and those authorization policies

00:10:22,240 --> 00:10:25,760
are then processed by that policy engine

00:10:24,160 --> 00:10:27,360
the idea being that the policy engine

00:10:25,760 --> 00:10:28,880
is integrated into each of these

00:10:27,360 --> 00:10:30,800
different pieces of software and now

00:10:28,880 --> 00:10:33,040
that one policy engine can interpret

00:10:30,800 --> 00:10:36,399
whatever policy file you hand it

00:10:33,040 --> 00:10:39,519
so moreover the tools

00:10:36,399 --> 00:10:41,360
that oprah provides enable to you to see

00:10:39,519 --> 00:10:42,959
and and sort of experience an entire

00:10:41,360 --> 00:10:44,480
life cycle for policy just like we have

00:10:42,959 --> 00:10:46,480
an entire life cycle

00:10:44,480 --> 00:10:47,600
for software and we'll go into more

00:10:46,480 --> 00:10:50,160
detail on that

00:10:47,600 --> 00:10:50,160
in a little bit

00:10:52,399 --> 00:10:56,079
all right so that's sort of the quick

00:10:54,079 --> 00:10:56,880
overview of opa the problem that it

00:10:56,079 --> 00:10:59,040
solves and

00:10:56,880 --> 00:11:00,720
and and not how it works but what it

00:10:59,040 --> 00:11:03,519
aims to do

00:11:00,720 --> 00:11:06,720
and so maybe i'll take this moment to

00:11:03,519 --> 00:11:06,720
see if anybody has

00:11:12,839 --> 00:11:15,839
questions

00:11:22,959 --> 00:11:27,040
yeah it looks like we're good so far all

00:11:24,640 --> 00:11:31,040
right so we'll just keep going

00:11:27,040 --> 00:11:32,560
um so let's let's spend just a few

00:11:31,040 --> 00:11:34,560
minutes looking at at

00:11:32,560 --> 00:11:35,920
the community that's growing up around

00:11:34,560 --> 00:11:37,120
around oppa this is always you know

00:11:35,920 --> 00:11:38,959
whenever i'm looking at a new

00:11:37,120 --> 00:11:40,880
project that i haven't run across before

00:11:38,959 --> 00:11:42,399
this is always pretty important to me

00:11:40,880 --> 00:11:44,160
so um the first thing to understand is

00:11:42,399 --> 00:11:45,760
that oppa is a completely open source

00:11:44,160 --> 00:11:47,279
project it is owned by the cloud native

00:11:45,760 --> 00:11:50,560
computing foundation

00:11:47,279 --> 00:11:52,720
uh at styro we founded it back in 2016.

00:11:50,560 --> 00:11:54,639
we then donated it to the cncf a couple

00:11:52,720 --> 00:11:56,720
years later in 2018.

00:11:54,639 --> 00:11:58,560
when you do that the most projects go in

00:11:56,720 --> 00:12:00,399
as sandbox projects that's sort of

00:11:58,560 --> 00:12:02,800
like the first of three rungs of

00:12:00,399 --> 00:12:05,600
maturity about a year later it

00:12:02,800 --> 00:12:08,079
it moved along to incubating and that's

00:12:05,600 --> 00:12:09,839
where it's at right now

00:12:08,079 --> 00:12:12,000
just like many projects that cncf has a

00:12:09,839 --> 00:12:12,880
nice dev stats portal that you can look

00:12:12,000 --> 00:12:13,839
at if you want to see

00:12:12,880 --> 00:12:15,839
all the different folks who are

00:12:13,839 --> 00:12:17,440
contributing to it so i would definitely

00:12:15,839 --> 00:12:19,600
check that out here

00:12:17,440 --> 00:12:20,639
and then as you can see sort of here is

00:12:19,600 --> 00:12:21,120
if you haven't seen this before this is

00:12:20,639 --> 00:12:22,880
sort of

00:12:21,120 --> 00:12:24,320
uh it's probably a little old the cloud

00:12:22,880 --> 00:12:26,160
native computing foundation's

00:12:24,320 --> 00:12:27,760
landscape so this is sort of a depiction

00:12:26,160 --> 00:12:28,560
of all the different projects that exist

00:12:27,760 --> 00:12:30,639
within

00:12:28,560 --> 00:12:32,399
the cncf or that are attached in some

00:12:30,639 --> 00:12:34,000
way to the cncf

00:12:32,399 --> 00:12:35,440
and so what you'll see here is that you

00:12:34,000 --> 00:12:37,040
know certainly the only one that's at

00:12:35,440 --> 00:12:39,040
incubating status today

00:12:37,040 --> 00:12:40,160
that's focused primarily and solely on

00:12:39,040 --> 00:12:43,200
policy and giving you

00:12:40,160 --> 00:12:46,079
that sort of unified approach to policy

00:12:43,200 --> 00:12:46,560
is is opa today so i definitely uh

00:12:46,079 --> 00:12:49,680
definitely

00:12:46,560 --> 00:12:51,200
uh we'll we'll see more about that the

00:12:49,680 --> 00:12:52,880
other thing i wanted to point out was

00:12:51,200 --> 00:12:54,800
in in addition to sort of the you know

00:12:52,880 --> 00:12:56,959
the organization and the

00:12:54,800 --> 00:12:58,399
the the contributors to the project the

00:12:56,959 --> 00:12:58,880
other super important thing to me is

00:12:58,399 --> 00:13:00,880
always

00:12:58,880 --> 00:13:02,000
you know who are the end users i i

00:13:00,880 --> 00:13:03,920
always like to

00:13:02,000 --> 00:13:05,680
whenever i'm evaluating a new open

00:13:03,920 --> 00:13:06,399
source project i want to look at the end

00:13:05,680 --> 00:13:07,760
users who

00:13:06,399 --> 00:13:09,760
who's using it you know what are their

00:13:07,760 --> 00:13:12,240
stories why did they pick it up and so i

00:13:09,760 --> 00:13:14,720
always like to call out here for for opa

00:13:12,240 --> 00:13:16,000
uh you know dense areas dense venues

00:13:14,720 --> 00:13:18,480
where you can find a bunch of different

00:13:16,000 --> 00:13:20,959
end user talks

00:13:18,480 --> 00:13:23,279
and so uh here uh what you see here is

00:13:20,959 --> 00:13:23,680
um i'm calling out um a really good a

00:13:23,279 --> 00:13:25,920
really

00:13:23,680 --> 00:13:27,519
dense collection of opa talks from end

00:13:25,920 --> 00:13:30,880
users is really at kubecon

00:13:27,519 --> 00:13:32,399
us 2019. um so here uh

00:13:30,880 --> 00:13:33,440
the nice thing is you get a bunch of

00:13:32,399 --> 00:13:34,959
different folks that are talking about

00:13:33,440 --> 00:13:36,959
how they're using open y

00:13:34,959 --> 00:13:38,000
but you're also getting sort of a sense

00:13:36,959 --> 00:13:39,600
as to

00:13:38,000 --> 00:13:41,199
the different kinds of use cases that

00:13:39,600 --> 00:13:43,920
opa is being used for today

00:13:41,199 --> 00:13:44,720
so maybe if i back up a slide or two if

00:13:43,920 --> 00:13:47,839
i think about

00:13:44,720 --> 00:13:50,000
these this collection of use cases here

00:13:47,839 --> 00:13:51,120
all of these are none of these are just

00:13:50,000 --> 00:13:52,720
theoretical examples

00:13:51,120 --> 00:13:54,240
all of these are examples of where

00:13:52,720 --> 00:13:55,839
people are using opa to solve

00:13:54,240 --> 00:13:58,560
authorization policy

00:13:55,839 --> 00:14:00,639
throughout the cloud native ecosystem um

00:13:58,560 --> 00:14:02,560
in production at scale right so there is

00:14:00,639 --> 00:14:03,360
somebody from each of these who's using

00:14:02,560 --> 00:14:05,519
oppa

00:14:03,360 --> 00:14:06,639
um in production for kubernetes and for

00:14:05,519 --> 00:14:08,959
microservices and for

00:14:06,639 --> 00:14:09,680
for kafka is probably the most popular

00:14:08,959 --> 00:14:12,079
one

00:14:09,680 --> 00:14:13,519
for terraform um even for linux that's

00:14:12,079 --> 00:14:16,160
always an interesting one that

00:14:13,519 --> 00:14:18,399
people end up adding that at some point

00:14:16,160 --> 00:14:20,399
and it's certainly for ci cd as well so

00:14:18,399 --> 00:14:21,600
um so if you want to hear more about how

00:14:20,399 --> 00:14:23,519
people are using that

00:14:21,600 --> 00:14:24,959
uh i'll certainly call out a number of

00:14:23,519 --> 00:14:27,360
these talks some of these talks are very

00:14:24,959 --> 00:14:29,040
focused on a single use case um you know

00:14:27,360 --> 00:14:30,320
i think let's see goldman here was

00:14:29,040 --> 00:14:33,120
really talking about

00:14:30,320 --> 00:14:34,160
kubernetes very very important yelp here

00:14:33,120 --> 00:14:36,320
was talking about

00:14:34,160 --> 00:14:38,160
using opa for microservices but then

00:14:36,320 --> 00:14:40,160
there's some like pinterest who said

00:14:38,160 --> 00:14:41,199
well we're using oppa for microservices

00:14:40,160 --> 00:14:44,079
and for kafka

00:14:41,199 --> 00:14:44,880
and so on and so forth and so um yeah

00:14:44,079 --> 00:14:46,720
there are some that

00:14:44,880 --> 00:14:48,240
actually talk about you know using open

00:14:46,720 --> 00:14:49,120
and rolling out opa for a couple of

00:14:48,240 --> 00:14:50,320
different use cases

00:14:49,120 --> 00:14:52,160
and then there are some that are focused

00:14:50,320 --> 00:14:53,199
more so on a single use case

00:14:52,160 --> 00:14:56,160
the other thing i'll call out here is

00:14:53,199 --> 00:14:57,920
this opa summit um so that was a a thing

00:14:56,160 --> 00:15:00,079
we ran

00:14:57,920 --> 00:15:01,120
that sort of ran at the same time as as

00:15:00,079 --> 00:15:03,839
the kubecon

00:15:01,120 --> 00:15:05,440
uh normal tracks but like the day before

00:15:03,839 --> 00:15:07,040
and that was just a great place to

00:15:05,440 --> 00:15:08,560
to have you know half a dozen folks come

00:15:07,040 --> 00:15:09,680
and and really talk about how they're

00:15:08,560 --> 00:15:12,160
using opa again

00:15:09,680 --> 00:15:13,760
mainly end user and your end user folks

00:15:12,160 --> 00:15:15,199
so if you want to hear from end users

00:15:13,760 --> 00:15:16,560
about how they're using opa i definitely

00:15:15,199 --> 00:15:19,279
recommend checking out

00:15:16,560 --> 00:15:19,279
some of these talks

00:15:21,199 --> 00:15:25,600
all right another good chance to stop

00:15:24,240 --> 00:15:30,959
and see if anyone's got

00:15:25,600 --> 00:15:30,959
questions see i don't see any yet

00:15:39,600 --> 00:15:42,480
okay so

00:15:42,800 --> 00:15:46,240
let's go on so one of the things uh

00:15:44,639 --> 00:15:48,079
hopefully that's clear at this point

00:15:46,240 --> 00:15:49,759
is you know what the project aims to do

00:15:48,079 --> 00:15:51,519
provide unified policy unified

00:15:49,759 --> 00:15:52,720
authorization across that cloud native

00:15:51,519 --> 00:15:56,560
ecosystem

00:15:52,720 --> 00:15:59,040
um and and uh one of the things

00:15:56,560 --> 00:16:00,480
uh that we'll see is that um

00:15:59,040 --> 00:16:02,399
architecturally

00:16:00,480 --> 00:16:04,320
um the way opal was designed was very

00:16:02,399 --> 00:16:05,440
much uh in keeping with the cloud native

00:16:04,320 --> 00:16:07,360
and the kubernetes

00:16:05,440 --> 00:16:08,800
uh i think philosophies around do one

00:16:07,360 --> 00:16:10,399
thing do it very well and make it easy

00:16:08,800 --> 00:16:13,279
to integrate and offload

00:16:10,399 --> 00:16:13,680
um functionality to other components and

00:16:13,279 --> 00:16:15,360
so

00:16:13,680 --> 00:16:16,399
and so here let's look a little bit at

00:16:15,360 --> 00:16:17,199
architecture because once you get a

00:16:16,399 --> 00:16:19,600
sense of

00:16:17,199 --> 00:16:21,120
of the architecture and how opal works

00:16:19,600 --> 00:16:22,560
and how it integrates with with some of

00:16:21,120 --> 00:16:24,079
these different pieces of software i

00:16:22,560 --> 00:16:25,920
think that's the best way to get

00:16:24,079 --> 00:16:27,519
uh get really your get a good

00:16:25,920 --> 00:16:29,839
understanding of

00:16:27,519 --> 00:16:31,440
how and why and what opa actually ends

00:16:29,839 --> 00:16:32,720
up doing

00:16:31,440 --> 00:16:34,160
okay so this is the picture that i

00:16:32,720 --> 00:16:36,000
showed a little bit ago i was a little

00:16:34,160 --> 00:16:38,000
worried about showing this just because

00:16:36,000 --> 00:16:39,920
it kind of gives you the sense that oppa

00:16:38,000 --> 00:16:40,320
is like the centralized system right

00:16:39,920 --> 00:16:41,920
that

00:16:40,320 --> 00:16:43,199
that all of these different pieces of

00:16:41,920 --> 00:16:44,480
software that all your kubernetes

00:16:43,199 --> 00:16:46,720
clusters are going to have to jump over

00:16:44,480 --> 00:16:48,000
the network in order to talk to oppa

00:16:46,720 --> 00:16:49,199
that all the microservices are going to

00:16:48,000 --> 00:16:50,959
have to jump over the network to talk to

00:16:49,199 --> 00:16:51,759
oppa and that's just that's just not the

00:16:50,959 --> 00:16:53,199
case this is a

00:16:51,759 --> 00:16:55,839
this is sort of a logical picture of

00:16:53,199 --> 00:16:58,560
what it gives you once you deploy opa

00:16:55,839 --> 00:16:59,839
um to uh and integrate it with all these

00:16:58,560 --> 00:17:02,160
different pieces of software

00:16:59,839 --> 00:17:04,000
but at the end of the day um what it

00:17:02,160 --> 00:17:04,959
really does architecturally is it was

00:17:04,000 --> 00:17:07,919
designed to be

00:17:04,959 --> 00:17:10,720
a decentralized or a distributed kind of

00:17:07,919 --> 00:17:13,039
of authorization and enforcement model

00:17:10,720 --> 00:17:14,160
so the idea here is that opal was

00:17:13,039 --> 00:17:16,079
designed to run

00:17:14,160 --> 00:17:18,240
sort of at the edge whatever that edge

00:17:16,079 --> 00:17:20,720
means to you if you're deploying oppa

00:17:18,240 --> 00:17:22,640
as part of kubernetes then you would

00:17:20,720 --> 00:17:24,720
deploy one or maybe a handful of opo's

00:17:22,640 --> 00:17:27,839
on each in every kubernetes cluster

00:17:24,720 --> 00:17:29,520
if you were running opa

00:17:27,839 --> 00:17:31,440
and applying it to the microservice use

00:17:29,520 --> 00:17:32,320
case you would run one opa typically as

00:17:31,440 --> 00:17:34,480
a side car

00:17:32,320 --> 00:17:35,440
even uh next to each and every

00:17:34,480 --> 00:17:37,679
microservice

00:17:35,440 --> 00:17:39,120
the idea in both those cases is that you

00:17:37,679 --> 00:17:40,320
know anytime kubernetes needs an

00:17:39,120 --> 00:17:41,039
authorization decision it doesn't have

00:17:40,320 --> 00:17:43,600
to hop

00:17:41,039 --> 00:17:45,360
uh what you know to uh over the internet

00:17:43,600 --> 00:17:47,840
to grab a decision it just talks to the

00:17:45,360 --> 00:17:48,640
opa that's locally running on that

00:17:47,840 --> 00:17:50,160
cluster

00:17:48,640 --> 00:17:52,160
same way with microservices every time a

00:17:50,160 --> 00:17:54,559
microservice receives an api call

00:17:52,160 --> 00:17:56,240
it can ask a local opa for an

00:17:54,559 --> 00:17:58,240
authorization decision

00:17:56,240 --> 00:17:59,919
and the idea here and the same is true

00:17:58,240 --> 00:18:01,760
for all these different use cases right

00:17:59,919 --> 00:18:02,880
wherever you you can choose to run oppa

00:18:01,760 --> 00:18:04,480
wherever you want what we typically

00:18:02,880 --> 00:18:05,679
recommend is you run it at the edge so

00:18:04,480 --> 00:18:08,720
you push it all the way

00:18:05,679 --> 00:18:10,640
as close to um whatever software needs

00:18:08,720 --> 00:18:11,280
authorization decisions as you possibly

00:18:10,640 --> 00:18:13,440
can so

00:18:11,280 --> 00:18:15,120
i like to call opa like a host local

00:18:13,440 --> 00:18:16,559
cache of the policies

00:18:15,120 --> 00:18:18,480
that it needs in order to make decisions

00:18:16,559 --> 00:18:19,919
and then you run it on the same server

00:18:18,480 --> 00:18:21,760
as that piece of software that needs

00:18:19,919 --> 00:18:23,120
those decisions so the cool thing here

00:18:21,760 --> 00:18:24,559
is what it's doing is it's giving you

00:18:23,120 --> 00:18:26,400
two things simultaneously it's

00:18:24,559 --> 00:18:28,640
allowing you to sort of decouple pull

00:18:26,400 --> 00:18:30,000
those policies out of out of that piece

00:18:28,640 --> 00:18:31,440
of software so you can manage them

00:18:30,000 --> 00:18:32,320
independently that's kind of what we saw

00:18:31,440 --> 00:18:33,600
on the last slide

00:18:32,320 --> 00:18:35,039
but in this slide what we see is that

00:18:33,600 --> 00:18:35,679
what we're doing is we're running that

00:18:35,039 --> 00:18:37,360
opa

00:18:35,679 --> 00:18:39,919
on the same server as that piece of

00:18:37,360 --> 00:18:41,919
software that needs decisions from opa

00:18:39,919 --> 00:18:43,200
so that at the end of the day you get

00:18:41,919 --> 00:18:44,160
roughly the same performance and

00:18:43,200 --> 00:18:46,160
availability

00:18:44,160 --> 00:18:47,600
as if you had just hard-coded and left

00:18:46,160 --> 00:18:49,600
those policies

00:18:47,600 --> 00:18:51,039
inside that piece of software so what

00:18:49,600 --> 00:18:52,400
we're trying to do there is is balance

00:18:51,039 --> 00:18:55,200
those two needs so we're having

00:18:52,400 --> 00:18:56,720
independent management and analysis of

00:18:55,200 --> 00:18:58,160
those policies while at the same time

00:18:56,720 --> 00:18:59,120
giving you roughly the same performance

00:18:58,160 --> 00:19:01,039
and availability

00:18:59,120 --> 00:19:02,880
that you would get had you left them

00:19:01,039 --> 00:19:04,640
built into that software

00:19:02,880 --> 00:19:06,640
when um when you know one of the

00:19:04,640 --> 00:19:08,080
earliest users of oppo was netflix and

00:19:06,640 --> 00:19:10,240
they picked it up for to do this sort of

00:19:08,080 --> 00:19:12,160
micro service authorization use case

00:19:10,240 --> 00:19:13,919
and what they said was look um you know

00:19:12,160 --> 00:19:14,480
they told effectively the same story

00:19:13,919 --> 00:19:16,000
that i did

00:19:14,480 --> 00:19:17,840
that i just told which was look if

00:19:16,000 --> 00:19:19,679
you've got a micro service application

00:19:17,840 --> 00:19:21,200
you cannot afford in a cloud native

00:19:19,679 --> 00:19:22,960
world to uh

00:19:21,200 --> 00:19:24,799
every for every time that microservice

00:19:22,960 --> 00:19:25,520
receives an api call to jump over the

00:19:24,799 --> 00:19:27,440
network

00:19:25,520 --> 00:19:28,559
to to ask is this api call authorized

00:19:27,440 --> 00:19:29,120
you're going to immediately double all

00:19:28,559 --> 00:19:30,640
your

00:19:29,120 --> 00:19:32,240
network latencies and you're going to

00:19:30,640 --> 00:19:32,640
double the the chances that you've got

00:19:32,240 --> 00:19:34,640
an

00:19:32,640 --> 00:19:36,160
availability problem and so you know the

00:19:34,640 --> 00:19:37,679
reason they picked up opal is because it

00:19:36,160 --> 00:19:38,559
does have this well-defined language

00:19:37,679 --> 00:19:40,720
that

00:19:38,559 --> 00:19:42,160
allows you to to go ahead and express

00:19:40,720 --> 00:19:43,919
whatever authorization policies that you

00:19:42,160 --> 00:19:45,360
want and yet at the same time it is an

00:19:43,919 --> 00:19:46,799
agent after all that's in its name and

00:19:45,360 --> 00:19:48,000
so go ahead and run it on the same

00:19:46,799 --> 00:19:49,840
server as that software that needs

00:19:48,000 --> 00:19:52,080
decisions

00:19:49,840 --> 00:19:53,760
okay so i think the tagline here that

00:19:52,080 --> 00:19:55,360
that i think is appropriate is it is

00:19:53,760 --> 00:19:57,520
logically centralized meaning that you

00:19:55,360 --> 00:19:58,080
have one framework one language one tool

00:19:57,520 --> 00:19:59,840
set to

00:19:58,080 --> 00:20:01,280
express and enforce and audit all those

00:19:59,840 --> 00:20:03,120
policies across those

00:20:01,280 --> 00:20:05,120
different pieces of software but at the

00:20:03,120 --> 00:20:06,000
same time it is physically distributed

00:20:05,120 --> 00:20:07,280
so you get the the

00:20:06,000 --> 00:20:09,120
good availability and performance

00:20:07,280 --> 00:20:10,320
results that you would need

00:20:09,120 --> 00:20:12,880
for for this kind of cloud native

00:20:10,320 --> 00:20:12,880
ecosystem

00:20:19,200 --> 00:20:22,720
i think we've got a question here

00:20:27,120 --> 00:20:30,400
okay um

00:20:31,039 --> 00:20:34,799
okay so now let's look at in a little

00:20:32,559 --> 00:20:36,320
bit more detail about how opa talks to

00:20:34,799 --> 00:20:37,679
each and every one of those services

00:20:36,320 --> 00:20:39,840
right so here's our service maybe this

00:20:37,679 --> 00:20:41,600
is the kubernetes api server maybe

00:20:39,840 --> 00:20:43,360
maybe it's a microservice maybe it's

00:20:41,600 --> 00:20:45,280
your ci cd pipeline maybe it's your

00:20:43,360 --> 00:20:46,880
linux pan module doesn't really matter

00:20:45,280 --> 00:20:48,159
the the way this works is that that

00:20:46,880 --> 00:20:49,360
service decides it needs an

00:20:48,159 --> 00:20:51,120
authorization decision

00:20:49,360 --> 00:20:53,200
and so it goes ahead and it sends a

00:20:51,120 --> 00:20:54,559
policy query to oppa

00:20:53,200 --> 00:20:56,240
that service goes ahead and says here's

00:20:54,559 --> 00:20:58,000
the decision here's here's a query i

00:20:56,240 --> 00:20:59,120
need a decision about open returns that

00:20:58,000 --> 00:21:01,039
decision

00:20:59,120 --> 00:21:03,039
and then it's a services responsibility

00:21:01,039 --> 00:21:05,039
to enforce that decision it is oprah's

00:21:03,039 --> 00:21:06,000
responsibility to make that decision so

00:21:05,039 --> 00:21:08,240
that's how we think about that

00:21:06,000 --> 00:21:09,520
separation of responsibilities there

00:21:08,240 --> 00:21:11,840
now the interesting thing about that

00:21:09,520 --> 00:21:13,520
policy query is that that policy query

00:21:11,840 --> 00:21:16,159
as you see noted there is really just

00:21:13,520 --> 00:21:18,960
any arbitrary json object

00:21:16,159 --> 00:21:21,039
it doesn't really matter to opa uh what

00:21:18,960 --> 00:21:23,919
is what the contents of that json is

00:21:21,039 --> 00:21:24,880
oppa itself does not know or understand

00:21:23,919 --> 00:21:27,440
what the real

00:21:24,880 --> 00:21:29,039
real world meaning of that json is so

00:21:27,440 --> 00:21:30,240
let me give you a couple of examples

00:21:29,039 --> 00:21:32,480
let's suppose that service is a

00:21:30,240 --> 00:21:34,080
kubernetes api server

00:21:32,480 --> 00:21:35,600
so the way this works with kubernetes is

00:21:34,080 --> 00:21:37,120
that each and every time a

00:21:35,600 --> 00:21:38,880
an end user tries to go ahead and let's

00:21:37,120 --> 00:21:42,000
say deploy a new pod or an ingress

00:21:38,880 --> 00:21:43,039
to the cluster the cube api server goes

00:21:42,000 --> 00:21:45,440
ahead and

00:21:43,039 --> 00:21:46,080
um and sends a request to open says hey

00:21:45,440 --> 00:21:48,799
is

00:21:46,080 --> 00:21:50,640
is this new pod of this new ingress safe

00:21:48,799 --> 00:21:52,320
to deploy under the cluster and when

00:21:50,640 --> 00:21:54,480
kubernetes does that it sends over the

00:21:52,320 --> 00:21:56,880
full 50 100 200 however

00:21:54,480 --> 00:21:57,840
however many lines of json that

00:21:56,880 --> 00:21:59,679
represents

00:21:57,840 --> 00:22:02,240
that pod or that ingress right and all

00:21:59,679 --> 00:22:03,679
of its gory detail all that yaml

00:22:02,240 --> 00:22:05,600
code that we're also accustomed to

00:22:03,679 --> 00:22:07,360
seeing is what gets sent over to open

00:22:05,600 --> 00:22:09,120
order for opa to make a decision

00:22:07,360 --> 00:22:11,600
so opa doesn't really know or understand

00:22:09,120 --> 00:22:12,880
what a pattern ingress is

00:22:11,600 --> 00:22:14,480
if on the other hand that service is

00:22:12,880 --> 00:22:16,159
let's say a micro service and the

00:22:14,480 --> 00:22:16,480
service wants an authorization decision

00:22:16,159 --> 00:22:18,960
for

00:22:16,480 --> 00:22:20,640
an http api call well the service sends

00:22:18,960 --> 00:22:22,559
over a json object that might include

00:22:20,640 --> 00:22:24,480
the user the method and the path

00:22:22,559 --> 00:22:26,080
let's say again opa doesn't know what a

00:22:24,480 --> 00:22:27,520
user method and path are but

00:22:26,080 --> 00:22:28,880
nevertheless it can go ahead and return

00:22:27,520 --> 00:22:30,960
the policy decision

00:22:28,880 --> 00:22:31,919
the reason this works is because i as a

00:22:30,960 --> 00:22:33,840
policy author i

00:22:31,919 --> 00:22:35,360
as a person as a human being i know what

00:22:33,840 --> 00:22:38,240
a user a method of path

00:22:35,360 --> 00:22:40,240
mean i know what that http api means and

00:22:38,240 --> 00:22:41,760
so i can write the appropriate logic to

00:22:40,240 --> 00:22:43,919
make the correct decision

00:22:41,760 --> 00:22:45,760
and have it returned to the service so

00:22:43,919 --> 00:22:47,120
the the reason that we didn't build a

00:22:45,760 --> 00:22:49,200
bunch of knowledge about pods and

00:22:47,120 --> 00:22:52,640
ingresses and http apis and

00:22:49,200 --> 00:22:54,799
and linux into opa was was

00:22:52,640 --> 00:22:56,320
so that oppa could be applicable to all

00:22:54,799 --> 00:22:57,840
of these different pieces of software

00:22:56,320 --> 00:22:59,520
what we didn't want to have happen is

00:22:57,840 --> 00:23:01,200
that every time you know kubernetes

00:22:59,520 --> 00:23:03,520
releases a new kind of

00:23:01,200 --> 00:23:04,640
of resource um that we have to go and

00:23:03,520 --> 00:23:07,039
make some changes to oppa

00:23:04,640 --> 00:23:07,679
right instead uh the flexibility the

00:23:07,039 --> 00:23:10,320
power

00:23:07,679 --> 00:23:12,080
that um the the generality that that

00:23:10,320 --> 00:23:13,280
that comes with oppa comes from the fact

00:23:12,080 --> 00:23:14,400
that we didn't make a bun

00:23:13,280 --> 00:23:15,760
we didn't try to build in a bunch of

00:23:14,400 --> 00:23:16,400
knowledge about these different domains

00:23:15,760 --> 00:23:18,240
into oppa

00:23:16,400 --> 00:23:19,760
and because of that you can apply opa to

00:23:18,240 --> 00:23:23,840
a broad range of

00:23:19,760 --> 00:23:25,200
of software what that does is it puts

00:23:23,840 --> 00:23:26,640
some pressure then on the policy

00:23:25,200 --> 00:23:28,159
language the policy language needs to be

00:23:26,640 --> 00:23:30,320
fairly expressive it needs to be

00:23:28,159 --> 00:23:32,320
fairly powerful you need to be able to

00:23:30,320 --> 00:23:35,919
if you want to write a policy that says

00:23:32,320 --> 00:23:36,799
ensure that only images that come from

00:23:35,919 --> 00:23:38,960
our trusted

00:23:36,799 --> 00:23:40,400
uh image registry are deployed onto the

00:23:38,960 --> 00:23:42,080
cluster well in order

00:23:40,400 --> 00:23:44,240
in order to sort of implement that

00:23:42,080 --> 00:23:45,600
policy the policy language needs to let

00:23:44,240 --> 00:23:47,679
me as a policy author

00:23:45,600 --> 00:23:50,159
sort of dig down through those pods and

00:23:47,679 --> 00:23:52,960
those deployments and those replica set

00:23:50,159 --> 00:23:54,960
yaml files it needs to let me like pick

00:23:52,960 --> 00:23:56,640
out that that array of containers

00:23:54,960 --> 00:23:58,400
and then it needs to let me sort of

00:23:56,640 --> 00:24:00,559
iterate over all those containers

00:23:58,400 --> 00:24:02,080
and for each one grab the image field

00:24:00,559 --> 00:24:03,600
and for that image field do some string

00:24:02,080 --> 00:24:06,880
manipulation to figure out

00:24:03,600 --> 00:24:08,720
whether or not the the image is coming

00:24:06,880 --> 00:24:10,480
from our trusted registry or not

00:24:08,720 --> 00:24:13,120
so that kind of functionality is what

00:24:10,480 --> 00:24:15,440
oppa is what oppa's policy language

00:24:13,120 --> 00:24:18,240
called rego was designed to let you do

00:24:15,440 --> 00:24:19,120
so that kind of flexibility is pretty

00:24:18,240 --> 00:24:22,640
powerful

00:24:19,120 --> 00:24:24,240
um and just just for uh just to

00:24:22,640 --> 00:24:25,840
contrast this a little bit if you think

00:24:24,240 --> 00:24:28,400
about um all the sort of

00:24:25,840 --> 00:24:30,080
classic models of authorization you know

00:24:28,400 --> 00:24:31,919
role-based access control attribute

00:24:30,080 --> 00:24:32,480
based access control access control

00:24:31,919 --> 00:24:35,679
lists

00:24:32,480 --> 00:24:37,760
even sort of im models all of those you

00:24:35,679 --> 00:24:38,559
can encode in regula's policy language

00:24:37,760 --> 00:24:40,080
because

00:24:38,559 --> 00:24:43,600
it has that kind of flexibility that you

00:24:40,080 --> 00:24:44,960
need to analyze arbitrary json

00:24:43,600 --> 00:24:46,559
the third thing on this slide that i'll

00:24:44,960 --> 00:24:46,960
call out is that data and json on the

00:24:46,559 --> 00:24:48,880
right

00:24:46,960 --> 00:24:50,640
lower right hand side the idea behind

00:24:48,880 --> 00:24:51,520
this is that when we designed opa we

00:24:50,640 --> 00:24:52,880
wanted to

00:24:51,520 --> 00:24:54,640
make it possible for you to write

00:24:52,880 --> 00:24:57,279
policies that are what we like to call

00:24:54,640 --> 00:24:58,840
context aware so policies that are aware

00:24:57,279 --> 00:25:00,320
of the world in which they're being

00:24:58,840 --> 00:25:02,880
evaluated

00:25:00,320 --> 00:25:04,480
and that's what that data in json is the

00:25:02,880 --> 00:25:05,760
idea here being that i'll use an example

00:25:04,480 --> 00:25:06,960
from earlier let's say you wanted to

00:25:05,760 --> 00:25:09,679
write a policy that says

00:25:06,960 --> 00:25:11,279
only people who are on call can ssh to

00:25:09,679 --> 00:25:13,360
production servers can make changes to

00:25:11,279 --> 00:25:15,360
our production kubernetes cluster

00:25:13,360 --> 00:25:16,720
um and can you know query our production

00:25:15,360 --> 00:25:19,120
database well

00:25:16,720 --> 00:25:20,960
who's on call you know kubernetes

00:25:19,120 --> 00:25:24,080
doesn't know the servers don't know

00:25:20,960 --> 00:25:26,000
uh my my databases don't know even your

00:25:24,080 --> 00:25:27,440
you know your idp or your ldap you never

00:25:26,000 --> 00:25:29,679
store who's on call and

00:25:27,440 --> 00:25:30,880
there really the only the only piece of

00:25:29,679 --> 00:25:32,240
software that knows who's on call is

00:25:30,880 --> 00:25:33,120
some third-party service typically like

00:25:32,240 --> 00:25:34,960
pagerduty

00:25:33,120 --> 00:25:37,360
so what opal allows you to do is sort of

00:25:34,960 --> 00:25:38,799
extract that list of on-call people from

00:25:37,360 --> 00:25:40,960
pagerduty let's say

00:25:38,799 --> 00:25:42,159
and inject it into opa through its

00:25:40,960 --> 00:25:44,080
through its api and there are a couple

00:25:42,159 --> 00:25:46,720
of different mechanisms for doing that

00:25:44,080 --> 00:25:48,240
and now oppa just sees that data as json

00:25:46,720 --> 00:25:49,440
and then you as a policy author well we

00:25:48,240 --> 00:25:50,960
already know that you've got a policy

00:25:49,440 --> 00:25:52,400
language that allows you to write policy

00:25:50,960 --> 00:25:54,080
over arbitrary json so now you've just

00:25:52,400 --> 00:25:55,039
got kind of two inputs you've got

00:25:54,080 --> 00:25:57,200
the input that comes from the

00:25:55,039 --> 00:25:58,640
environment this data in json and then

00:25:57,200 --> 00:26:00,799
you also have the input that's coming

00:25:58,640 --> 00:26:02,159
from the the service this policy

00:26:00,799 --> 00:26:03,840
query and then you're free to write

00:26:02,159 --> 00:26:05,600
whatever policies you like to make the

00:26:03,840 --> 00:26:08,880
decision that's appropriate

00:26:05,600 --> 00:26:10,559
for that request the last bit on the

00:26:08,880 --> 00:26:13,840
slide that i'll call out here

00:26:10,559 --> 00:26:17,120
is that the decisions that opa makes um

00:26:13,840 --> 00:26:19,120
can be any arbitrary json value now

00:26:17,120 --> 00:26:21,120
very commonly what we see most people

00:26:19,120 --> 00:26:23,360
using oppa4 to start out with are

00:26:21,120 --> 00:26:24,799
are authorization policies uh and when i

00:26:23,360 --> 00:26:26,000
hear authorization i think when a lot of

00:26:24,799 --> 00:26:27,919
people hear authorization they think of

00:26:26,000 --> 00:26:30,320
you know allow deny yes no

00:26:27,919 --> 00:26:31,760
true false ones and zeros very simple

00:26:30,320 --> 00:26:33,520
boolean decisions

00:26:31,760 --> 00:26:35,039
but as you can see here opel was

00:26:33,520 --> 00:26:36,880
designed to be a general purpose policy

00:26:35,039 --> 00:26:38,240
engine and one of those

00:26:36,880 --> 00:26:40,159
what that means in part is that the

00:26:38,240 --> 00:26:42,080
decisions that it makes can be richer

00:26:40,159 --> 00:26:45,279
than simply true false allow deny

00:26:42,080 --> 00:26:46,640
they can be any arbitrary json value so

00:26:45,279 --> 00:26:48,400
imagine for example that you wanted to

00:26:46,640 --> 00:26:49,600
write a policy that makes a decision

00:26:48,400 --> 00:26:51,840
about what the rate limit

00:26:49,600 --> 00:26:54,080
for this user is or what the return code

00:26:51,840 --> 00:26:55,440
for that for that request was

00:26:54,080 --> 00:26:57,039
in those in those cases you need to

00:26:55,440 --> 00:26:58,960
return a number right that's not a true

00:26:57,039 --> 00:27:00,400
false it's not allowed deny

00:26:58,960 --> 00:27:02,799
other cases maybe you want to write a

00:27:00,400 --> 00:27:05,279
policy that decides which

00:27:02,799 --> 00:27:06,720
clusters to deploy an application to

00:27:05,279 --> 00:27:08,000
again that's a case where you're not

00:27:06,720 --> 00:27:09,440
just returning loud tonight maybe you

00:27:08,000 --> 00:27:10,640
want to return the array of all the

00:27:09,440 --> 00:27:12,640
cluster names

00:27:10,640 --> 00:27:13,919
um another example is maybe you're

00:27:12,640 --> 00:27:15,760
actually hooking up opa to the

00:27:13,919 --> 00:27:17,679
kubernetes admission control

00:27:15,760 --> 00:27:20,159
in the api server and what you actually

00:27:17,679 --> 00:27:21,679
want open to return is the actual json

00:27:20,159 --> 00:27:23,760
that represents an admission review

00:27:21,679 --> 00:27:25,600
response again there you need to return

00:27:23,760 --> 00:27:27,679
a deeply nested json object

00:27:25,600 --> 00:27:30,080
so in all those cases opa allows you to

00:27:27,679 --> 00:27:31,279
return those objects and in so doing

00:27:30,080 --> 00:27:33,200
again you've got quite a bit of

00:27:31,279 --> 00:27:34,720
flexibility in terms of how you

00:27:33,200 --> 00:27:37,200
integrate opa with these external

00:27:34,720 --> 00:27:37,200
services

00:27:37,440 --> 00:27:41,919
all right i've got a couple of examples

00:27:40,320 --> 00:27:43,679
here to just ground this

00:27:41,919 --> 00:27:46,799
so remember here is sort of our picture

00:27:43,679 --> 00:27:50,399
of our canonical cloud native stack

00:27:46,799 --> 00:27:52,559
and here let's look at um a quick um

00:27:50,399 --> 00:27:54,399
example of how you might integrate opa

00:27:52,559 --> 00:27:57,760
uh to solve a microservice

00:27:54,399 --> 00:28:00,000
authorization problem

00:27:57,760 --> 00:28:01,120
so here the idea is that oh and in fact

00:28:00,000 --> 00:28:02,799
what i should say is you know on that

00:28:01,120 --> 00:28:03,520
last slide a question that i sometimes

00:28:02,799 --> 00:28:04,880
get is

00:28:03,520 --> 00:28:07,200
well like look does that mean that i

00:28:04,880 --> 00:28:09,840
have to change my my software service my

00:28:07,200 --> 00:28:12,159
micro service in order to get

00:28:09,840 --> 00:28:13,600
an integration with opa the answer is no

00:28:12,159 --> 00:28:15,279
what we often see people do for the

00:28:13,600 --> 00:28:16,559
micro service authorization case is to

00:28:15,279 --> 00:28:18,240
use a network proxy so there are all

00:28:16,559 --> 00:28:20,159
kinds of network proxies out there

00:28:18,240 --> 00:28:21,279
envoy linker d kuma apogee those are

00:28:20,159 --> 00:28:22,960
those are the ones we happen to have

00:28:21,279 --> 00:28:24,799
here on the slide but a network proxy's

00:28:22,960 --> 00:28:27,279
job remember is to just sit there

00:28:24,799 --> 00:28:28,480
um and run think of the network proxies

00:28:27,279 --> 00:28:29,360
running as a sidecar next to the

00:28:28,480 --> 00:28:30,640
microservice

00:28:29,360 --> 00:28:32,720
it's been configured sort of at the

00:28:30,640 --> 00:28:34,399
iptables level to send and receive all

00:28:32,720 --> 00:28:35,600
the network traffic to and from that

00:28:34,399 --> 00:28:37,440
microservice

00:28:35,600 --> 00:28:39,440
the idea then is that you integrate that

00:28:37,440 --> 00:28:41,279
network proxy with opa

00:28:39,440 --> 00:28:43,760
so that anytime a request comes into the

00:28:41,279 --> 00:28:45,360
network proxy it can go ahead and send

00:28:43,760 --> 00:28:47,200
that request over to opa and get a

00:28:45,360 --> 00:28:47,600
decision is this api call authorized or

00:28:47,200 --> 00:28:49,360
not

00:28:47,600 --> 00:28:50,480
and if that api call is authorized it

00:28:49,360 --> 00:28:51,360
goes ahead and forwards it onto the

00:28:50,480 --> 00:28:52,880
microservice

00:28:51,360 --> 00:28:54,880
then the microservice just receives an

00:28:52,880 --> 00:28:56,240
api call and goes about

00:28:54,880 --> 00:28:57,919
constructing the response the way it

00:28:56,240 --> 00:28:59,600
always would and

00:28:57,919 --> 00:29:01,120
sends that back to the network proxy and

00:28:59,600 --> 00:29:03,200
then and then therefore um

00:29:01,120 --> 00:29:04,960
back out onto the onto the network and

00:29:03,200 --> 00:29:06,159
so in this world you don't have to go

00:29:04,960 --> 00:29:07,200
ahead and change your microservice in

00:29:06,159 --> 00:29:09,200
any way shape or form

00:29:07,200 --> 00:29:11,039
you just sort of intercept the traffic

00:29:09,200 --> 00:29:13,440
using a network proxy and then

00:29:11,039 --> 00:29:15,039
integrate your your network proxy with

00:29:13,440 --> 00:29:18,480
with opa

00:29:15,039 --> 00:29:19,760
so um this is sort of the network proxy

00:29:18,480 --> 00:29:21,200
integration hopefully that

00:29:19,760 --> 00:29:23,679
makes sense and this is how we see a

00:29:21,200 --> 00:29:26,320
bunch of people using opa for

00:29:23,679 --> 00:29:27,840
uh for microservice authorization the

00:29:26,320 --> 00:29:29,279
nice thing here is that there is no way

00:29:27,840 --> 00:29:31,279
to circumvent oppa

00:29:29,279 --> 00:29:33,679
right um some people will sometimes go

00:29:31,279 --> 00:29:35,279
ahead and and think about modifying the

00:29:33,679 --> 00:29:36,720
microservice if

00:29:35,279 --> 00:29:38,480
the downside of that then is that we

00:29:36,720 --> 00:29:40,240
need to make sure that um that the

00:29:38,480 --> 00:29:41,679
microservice on every api call goes

00:29:40,240 --> 00:29:44,880
ahead and consults opa

00:29:41,679 --> 00:29:46,960
in this architectural option you

00:29:44,880 --> 00:29:48,080
all of the all of the network is

00:29:46,960 --> 00:29:49,200
required to go through

00:29:48,080 --> 00:29:50,399
all the network traffic is required to

00:29:49,200 --> 00:29:52,960
go through oppa effectively and so

00:29:50,399 --> 00:29:55,840
there's no way to circumvent it

00:29:52,960 --> 00:29:57,200
here's another example um this one is

00:29:55,840 --> 00:29:58,399
more admission control i know mark

00:29:57,200 --> 00:29:59,279
talked about this a little bit at the

00:29:58,399 --> 00:30:00,880
last session

00:29:59,279 --> 00:30:02,480
uh where uh this is sort of where pod

00:30:00,880 --> 00:30:04,080
security policies come into play

00:30:02,480 --> 00:30:05,440
uh but the idea behind kubernetes is

00:30:04,080 --> 00:30:06,399
that if you haven't looked at this in

00:30:05,440 --> 00:30:08,080
detail for a while

00:30:06,399 --> 00:30:10,240
the the the way that this works is every

00:30:08,080 --> 00:30:11,679
time a new user tries to a user doesn't

00:30:10,240 --> 00:30:12,320
have to be a new user anytime a user

00:30:11,679 --> 00:30:14,240
tries to

00:30:12,320 --> 00:30:15,520
spin up a new pod or an ingress on the

00:30:14,240 --> 00:30:17,039
api server it'll go through

00:30:15,520 --> 00:30:18,080
authentication and authorization and

00:30:17,039 --> 00:30:19,600
finally admission

00:30:18,080 --> 00:30:21,760
so admission is just you know one of

00:30:19,600 --> 00:30:23,360
these places where kubernetes has been

00:30:21,760 --> 00:30:24,880
designed to be extensible

00:30:23,360 --> 00:30:26,720
and so what we do is we hook oppa into

00:30:24,880 --> 00:30:28,399
this admission control step

00:30:26,720 --> 00:30:30,240
and so we and so opa effectively

00:30:28,399 --> 00:30:30,799
receives admission review requests and

00:30:30,240 --> 00:30:34,240
then

00:30:30,799 --> 00:30:35,840
sends back responses to that again

00:30:34,240 --> 00:30:37,279
just like the last one this is a great

00:30:35,840 --> 00:30:39,039
uh integration for opa because it is

00:30:37,279 --> 00:30:40,640
integrated natively into the kubernetes

00:30:39,039 --> 00:30:41,919
api there's no way to circumvent this

00:30:40,640 --> 00:30:43,440
there's you know it's not a proxy

00:30:41,919 --> 00:30:44,320
sitting at the front of it somehow that

00:30:43,440 --> 00:30:46,320
people

00:30:44,320 --> 00:30:48,480
it's it's integrated directly into the

00:30:46,320 --> 00:30:50,880
api server

00:30:48,480 --> 00:30:52,799
here's a third example um here uh you

00:30:50,880 --> 00:30:53,440
know in a cicd pipeline we all know how

00:30:52,799 --> 00:30:55,919
to

00:30:53,440 --> 00:30:57,440
spin up and run you know pr jobs and so

00:30:55,919 --> 00:30:58,799
you can do that with open as well so you

00:30:57,440 --> 00:31:00,080
just imagine some sort of pipeline or

00:30:58,799 --> 00:31:01,840
some pr check that

00:31:00,080 --> 00:31:03,200
anytime somebody opens up a pr you can

00:31:01,840 --> 00:31:04,960
go ahead and spin up oppo

00:31:03,200 --> 00:31:06,720
run it against the policies and and have

00:31:04,960 --> 00:31:07,120
it check whatever you know files are in

00:31:06,720 --> 00:31:10,320
that

00:31:07,120 --> 00:31:11,679
in that repository or in that in that pr

00:31:10,320 --> 00:31:13,200
and then again open can make whatever

00:31:11,679 --> 00:31:14,080
decision you want uh sometimes it'll go

00:31:13,200 --> 00:31:15,679
ahead and return

00:31:14,080 --> 00:31:18,159
a bunch of error messages and you can go

00:31:15,679 --> 00:31:22,240
ahead and show those as

00:31:18,159 --> 00:31:22,240
as comments effectively in the in the pr

00:31:23,200 --> 00:31:27,440
okay so now is another good time to

00:31:26,000 --> 00:31:29,760
pause and see

00:31:27,440 --> 00:31:31,440
uh okay we've got some questions here

00:31:29,760 --> 00:31:32,000
and kubernetes okay so thomas was asking

00:31:31,440 --> 00:31:34,080
kubernetes

00:31:32,000 --> 00:31:35,519
can you run oppa as a daemon set on each

00:31:34,080 --> 00:31:38,559
node instead of a sidecar

00:31:35,519 --> 00:31:40,799
yup you can do that too oh maybe i uh

00:31:38,559 --> 00:31:42,240
maybe i've missed that here so if we

00:31:40,799 --> 00:31:43,360
look at this slide carefully down here

00:31:42,240 --> 00:31:46,399
at the bottom

00:31:43,360 --> 00:31:46,720
what we can see here is that oppa can

00:31:46,399 --> 00:31:49,440
run

00:31:46,720 --> 00:31:51,039
as a library a sidecar a daemon or even

00:31:49,440 --> 00:31:52,320
as a service sometimes architecturally

00:31:51,039 --> 00:31:54,320
it's pretty flexible

00:31:52,320 --> 00:31:55,919
um you know for for kubernetes for the

00:31:54,320 --> 00:31:58,880
admission controller we usually run like

00:31:55,919 --> 00:32:01,200
a handful of opa instances

00:31:58,880 --> 00:32:02,880
on the on the on as a you know as a

00:32:01,200 --> 00:32:04,880
service on kubernetes

00:32:02,880 --> 00:32:06,000
um so that's fine for that use case uh

00:32:04,880 --> 00:32:08,000
for micro services

00:32:06,000 --> 00:32:09,840
we often will see side cars some people

00:32:08,000 --> 00:32:10,640
uh i think yelp for example ran it as a

00:32:09,840 --> 00:32:12,000
damen

00:32:10,640 --> 00:32:14,240
um so that's fine as well so you've got

00:32:12,000 --> 00:32:17,120
quite a bit of flexibility there

00:32:14,240 --> 00:32:17,840
wasm is a new kind of way that we are

00:32:17,120 --> 00:32:19,360
starting

00:32:17,840 --> 00:32:21,600
that we're starting to support for for

00:32:19,360 --> 00:32:23,679
integrations the idea here is that

00:32:21,600 --> 00:32:25,679
um you could you know wasm is one of

00:32:23,679 --> 00:32:26,159
these uh one of these functionalities

00:32:25,679 --> 00:32:27,679
that

00:32:26,159 --> 00:32:29,039
is effectively a binary instruction

00:32:27,679 --> 00:32:29,519
format it's kind of like a mini vm

00:32:29,039 --> 00:32:31,279
that's

00:32:29,519 --> 00:32:32,720
that's got implementations in a number

00:32:31,279 --> 00:32:35,279
of different programming languages

00:32:32,720 --> 00:32:37,600
so here the idea is that it's like even

00:32:35,279 --> 00:32:38,559
closer to the original process than a

00:32:37,600 --> 00:32:40,960
sidecar would be

00:32:38,559 --> 00:32:42,320
so i guess i think of it as you know you

00:32:40,960 --> 00:32:44,640
could run opa as a

00:32:42,320 --> 00:32:46,960
as a go library or as wasm and they're

00:32:44,640 --> 00:32:48,720
sort of basically in process

00:32:46,960 --> 00:32:50,080
um and then if you wanted to just jump

00:32:48,720 --> 00:32:51,360
out of that process you could run it as

00:32:50,080 --> 00:32:52,320
a sidecar if you want to jump a little

00:32:51,360 --> 00:32:54,000
bit further

00:32:52,320 --> 00:32:55,760
or save the number of oppas you could

00:32:54,000 --> 00:32:58,559
run as a daemon if you're

00:32:55,760 --> 00:32:59,519
somehow in some cases you can go ahead

00:32:58,559 --> 00:33:01,120
and pay for network

00:32:59,519 --> 00:33:03,519
hop in which case you can run it as a

00:33:01,120 --> 00:33:03,519
service

00:33:04,159 --> 00:33:12,559
okay hey tim there's also a question in

00:33:08,559 --> 00:33:15,760
the chat as well oh thank you

00:33:12,559 --> 00:33:15,760
over to the chat

00:33:17,600 --> 00:33:22,640
okay is there one much opa integrates

00:33:20,000 --> 00:33:25,600
with aws azure gcp or replacing

00:33:22,640 --> 00:33:27,279
aws iem uh yeah so one of the things

00:33:25,600 --> 00:33:27,840
that we see in the cloud native world is

00:33:27,279 --> 00:33:29,840
that they're

00:33:27,840 --> 00:33:31,360
that the sort of the externalizing

00:33:29,840 --> 00:33:33,360
authorization is just

00:33:31,360 --> 00:33:35,600
uh through for example web hooks uh

00:33:33,360 --> 00:33:37,039
that's what envoy and kubernetes do

00:33:35,600 --> 00:33:38,640
um that's just becoming more and more of

00:33:37,039 --> 00:33:40,720
the the standard uh

00:33:38,640 --> 00:33:42,240
for for you know for pieces for for

00:33:40,720 --> 00:33:43,120
making these these projects more

00:33:42,240 --> 00:33:46,240
extensible

00:33:43,120 --> 00:33:49,279
uh for the public clouds i think that's

00:33:46,240 --> 00:33:50,880
uh that that i actually heard about uh i

00:33:49,279 --> 00:33:52,960
heard somebody say suggest the other day

00:33:50,880 --> 00:33:54,880
that there was a way to to plug opa in

00:33:52,960 --> 00:33:56,399
to i think it was azure i haven't seen

00:33:54,880 --> 00:33:57,200
that myself and haven't had a chance to

00:33:56,399 --> 00:33:58,640
follow up on it

00:33:57,200 --> 00:34:00,320
but again that's kind of the way that i

00:33:58,640 --> 00:34:02,320
would think about it is that uh

00:34:00,320 --> 00:34:03,360
um that understanding where you can

00:34:02,320 --> 00:34:06,559
integrate oppo

00:34:03,360 --> 00:34:08,800
is sort of is is one of the first things

00:34:06,559 --> 00:34:10,720
to think about and as i as far as i know

00:34:08,800 --> 00:34:14,000
uh aws

00:34:10,720 --> 00:34:15,280
nor gcp have uh have hooks to hook into

00:34:14,000 --> 00:34:17,280
there

00:34:15,280 --> 00:34:18,480
another question are octa and opa

00:34:17,280 --> 00:34:19,760
similar just wondering since the first

00:34:18,480 --> 00:34:21,599
time i hear about oppa

00:34:19,760 --> 00:34:22,879
so octa i always think of octa is really

00:34:21,599 --> 00:34:24,560
being responsible for

00:34:22,879 --> 00:34:27,280
uh single sign-on so authentication

00:34:24,560 --> 00:34:28,639
remember how we sort of um

00:34:27,280 --> 00:34:30,960
talked about both of those at the

00:34:28,639 --> 00:34:32,800
beginning that you know it's really octa

00:34:30,960 --> 00:34:34,560
is really responsible for signing in so

00:34:32,800 --> 00:34:34,879
when you sign into octa or you sign in

00:34:34,560 --> 00:34:37,119
through

00:34:34,879 --> 00:34:38,320
you know facebook or twitter or linkedin

00:34:37,119 --> 00:34:39,520
or google

00:34:38,320 --> 00:34:41,760
you're really you know proving to the

00:34:39,520 --> 00:34:43,440
system here's who i am now what a lot of

00:34:41,760 --> 00:34:45,359
these systems will also do is allow you

00:34:43,440 --> 00:34:49,040
to include a bunch of claims

00:34:45,359 --> 00:34:51,040
into your sign on token so that

00:34:49,040 --> 00:34:53,040
so that when all the downstream

00:34:51,040 --> 00:34:54,800
processes receive all the downstream

00:34:53,040 --> 00:34:56,480
software receives that token

00:34:54,800 --> 00:34:58,400
they know let's say what groups you're

00:34:56,480 --> 00:35:00,400
in and then they can make authorization

00:34:58,400 --> 00:35:02,320
decisions based on the information in

00:35:00,400 --> 00:35:02,640
that token so one of the things that we

00:35:02,320 --> 00:35:04,320
see

00:35:02,640 --> 00:35:05,680
people do a lot with opa especially in

00:35:04,320 --> 00:35:09,040
the microservice authorization

00:35:05,680 --> 00:35:11,040
space is uh encode a bunch of of like

00:35:09,040 --> 00:35:14,240
those claims into jot so

00:35:11,040 --> 00:35:14,720
json web tokens and then they go ahead

00:35:14,240 --> 00:35:16,560
and

00:35:14,720 --> 00:35:18,400
um and then hand those jots over to open

00:35:16,560 --> 00:35:19,599
then oppa can inspect the internals and

00:35:18,400 --> 00:35:21,359
and just like i said

00:35:19,599 --> 00:35:22,880
uh the the policies you write can then

00:35:21,359 --> 00:35:23,760
make decisions based on whatever groups

00:35:22,880 --> 00:35:28,000
show up in that

00:35:23,760 --> 00:35:28,000
sign-on token yeah that's a great

00:35:28,839 --> 00:35:31,839
question

00:35:32,079 --> 00:35:35,520
oh uh oppa there's a question uh oppa

00:35:34,079 --> 00:35:37,920
and gatekeeper yeah gatekeeper

00:35:35,520 --> 00:35:39,440
is a is a sub project of oppa it's

00:35:37,920 --> 00:35:42,560
dedicated to

00:35:39,440 --> 00:35:43,359
building a a dedicated uh integration

00:35:42,560 --> 00:35:47,359
between oppa

00:35:43,359 --> 00:35:47,359
and kubernetes admission control yeah

00:35:50,400 --> 00:35:55,280
okay great all right so time check we

00:35:52,960 --> 00:35:56,560
got 20 minutes that should be good

00:35:55,280 --> 00:35:59,040
all right keep those questions flowing

00:35:56,560 --> 00:36:02,640
these are great

00:35:59,040 --> 00:36:02,640
all right let's go back to

00:36:04,400 --> 00:36:08,079
okay so um what we sort of talked about

00:36:06,640 --> 00:36:09,599
up to this point is like

00:36:08,079 --> 00:36:11,520
a number of different ways we sort of

00:36:09,599 --> 00:36:12,160
talked about what opa does at a high

00:36:11,520 --> 00:36:14,240
level

00:36:12,160 --> 00:36:15,760
what problem it was designed to solve

00:36:14,240 --> 00:36:17,520
we've seen how you can integrate it

00:36:15,760 --> 00:36:19,839
architecturally and i think that

00:36:17,520 --> 00:36:21,839
that certainly seems to give a lot of

00:36:19,839 --> 00:36:23,119
folks a good sense as to what it does

00:36:21,839 --> 00:36:23,920
and what it doesn't do and that's pretty

00:36:23,119 --> 00:36:25,440
important

00:36:23,920 --> 00:36:26,960
the last thing that i want to talk about

00:36:25,440 --> 00:36:28,560
here uh and i think i'm going to spend

00:36:26,960 --> 00:36:30,160
most of my time here on on a demo but

00:36:28,560 --> 00:36:32,000
i've got a few slides to

00:36:30,160 --> 00:36:33,839
uh to go through first is really talking

00:36:32,000 --> 00:36:35,599
about okay let's suppose you've got opa

00:36:33,839 --> 00:36:37,280
in place you've got it integrated

00:36:35,599 --> 00:36:38,800
and now what what does that buy what

00:36:37,280 --> 00:36:40,720
what is the experience like

00:36:38,800 --> 00:36:42,560
uh in terms of writing policy enforcing

00:36:40,720 --> 00:36:45,680
policy and so on

00:36:42,560 --> 00:36:46,720
once open's installed and integrated so

00:36:45,680 --> 00:36:47,520
the way i always like to think about

00:36:46,720 --> 00:36:50,800
this is

00:36:47,520 --> 00:36:52,079
opa is really giving us an embodiment of

00:36:50,800 --> 00:36:53,440
policies code

00:36:52,079 --> 00:36:55,520
right just like we have infrastructure's

00:36:53,440 --> 00:36:57,520
code policy is code is the idea that now

00:36:55,520 --> 00:36:59,280
you've got a file format a file that you

00:36:57,520 --> 00:37:02,800
can put your policies into and then

00:36:59,280 --> 00:37:04,720
those policies can be enforced by opa

00:37:02,800 --> 00:37:06,400
and part of the benefit to that is that

00:37:04,720 --> 00:37:08,800
now there's an entire life cycle

00:37:06,400 --> 00:37:10,720
that you can choose to put that policy

00:37:08,800 --> 00:37:11,920
through and that life cycle moreover

00:37:10,720 --> 00:37:13,280
mirrors that same

00:37:11,920 --> 00:37:15,359
software development life cycle that

00:37:13,280 --> 00:37:17,280
we're all so familiar with so there is a

00:37:15,359 --> 00:37:18,640
requirements gathering process where

00:37:17,280 --> 00:37:20,560
you know just like we talked about a

00:37:18,640 --> 00:37:21,680
minute ago when

00:37:20,560 --> 00:37:23,599
when somebody gives you let's say a

00:37:21,680 --> 00:37:24,720
policy that you're supposed to enforce

00:37:23,599 --> 00:37:25,760
one of the first things that you want to

00:37:24,720 --> 00:37:27,440
think about is well what are my

00:37:25,760 --> 00:37:30,240
enforcement points where can i integrate

00:37:27,440 --> 00:37:31,280
opa so that i can enforce this policy

00:37:30,240 --> 00:37:33,359
um and then once you go through

00:37:31,280 --> 00:37:35,040
requirements um then you want to think

00:37:33,359 --> 00:37:36,560
about well how do i author that policy

00:37:35,040 --> 00:37:38,800
what what you know what do i actually

00:37:36,560 --> 00:37:39,599
type and we'll see how to do this in a

00:37:38,800 --> 00:37:41,520
little bit um

00:37:39,599 --> 00:37:43,119
i'll do a little live coding if folks

00:37:41,520 --> 00:37:44,560
aren't interested

00:37:43,119 --> 00:37:46,320
um and so what we'll see is that there's

00:37:44,560 --> 00:37:46,880
a there's a policy authoring stage as

00:37:46,320 --> 00:37:48,160
well

00:37:46,880 --> 00:37:50,079
and then it can go on to like our

00:37:48,160 --> 00:37:51,280
standard ci process where now we want to

00:37:50,079 --> 00:37:53,839
test our policy

00:37:51,280 --> 00:37:55,040
you know policies certainly oppa has a

00:37:53,839 --> 00:37:55,920
unit test framework we'll go through

00:37:55,040 --> 00:37:57,599
this a little bit

00:37:55,920 --> 00:37:59,440
but um certainly what we recommend

00:37:57,599 --> 00:38:01,760
heavily is is don't just

00:37:59,440 --> 00:38:02,960
don't just toss your your new policies

00:38:01,760 --> 00:38:05,280
out into the world you should definitely

00:38:02,960 --> 00:38:06,640
test them before that

00:38:05,280 --> 00:38:08,160
then you got to deploy your policies

00:38:06,640 --> 00:38:09,760
remember oppa is running distributed you

00:38:08,160 --> 00:38:10,640
may have many may have hundreds of

00:38:09,760 --> 00:38:12,480
instances of

00:38:10,640 --> 00:38:14,240
of opa running so you've got to deploy

00:38:12,480 --> 00:38:16,079
your policies out to all those opa's

00:38:14,240 --> 00:38:17,040
there's also a monitor monitoring stage

00:38:16,079 --> 00:38:18,000
you want to make sure those opens are

00:38:17,040 --> 00:38:19,440
healthy and that the last

00:38:18,000 --> 00:38:21,359
policy they receive is functioning

00:38:19,440 --> 00:38:22,079
properly and there's also a logging

00:38:21,359 --> 00:38:23,359
stage where

00:38:22,079 --> 00:38:25,359
you want to actually record those

00:38:23,359 --> 00:38:27,839
decisions that oppa is making

00:38:25,359 --> 00:38:29,760
so that so that you can you can you know

00:38:27,839 --> 00:38:30,320
audit it later or do other things with

00:38:29,760 --> 00:38:32,560
it

00:38:30,320 --> 00:38:34,240
so oppa provides different tools that

00:38:32,560 --> 00:38:35,280
that apply to each of these different

00:38:34,240 --> 00:38:36,560
elements

00:38:35,280 --> 00:38:39,040
each of these different stages of the

00:38:36,560 --> 00:38:40,720
life cycle i'll call out here there is

00:38:39,040 --> 00:38:42,480
an open ecosystem you know i've talked

00:38:40,720 --> 00:38:43,520
about a couple of the most popular opa

00:38:42,480 --> 00:38:45,839
use cases

00:38:43,520 --> 00:38:47,520
but there's a whole page of i guess when

00:38:45,839 --> 00:38:48,800
i made decided there were 40 different

00:38:47,520 --> 00:38:50,560
integrations obviously

00:38:48,800 --> 00:38:52,800
to greater lesser maturity but but

00:38:50,560 --> 00:38:54,320
nevertheless 40 different

00:38:52,800 --> 00:38:56,320
integrations that you can find on that

00:38:54,320 --> 00:38:58,240
page to maybe inspire you and understand

00:38:56,320 --> 00:39:00,160
what what people have done in the past

00:38:58,240 --> 00:39:02,640
in terms of authoring there's support

00:39:00,160 --> 00:39:06,079
for a number of different ides

00:39:02,640 --> 00:39:06,800
vs code and intellij both support the

00:39:06,079 --> 00:39:08,800
rego

00:39:06,800 --> 00:39:09,760
policy language there's a playground i'm

00:39:08,800 --> 00:39:10,880
going to show you that in a little bit

00:39:09,760 --> 00:39:12,800
it's a nice way to

00:39:10,880 --> 00:39:15,119
test out policy and share it and there's

00:39:12,800 --> 00:39:18,240
a reple as well so a readable print loop

00:39:15,119 --> 00:39:20,400
sort of a command line version of a ide

00:39:18,240 --> 00:39:22,240
in terms of ci there's some test tools

00:39:20,400 --> 00:39:23,280
performance tools there's a compiler as

00:39:22,240 --> 00:39:26,079
well

00:39:23,280 --> 00:39:26,960
in terms of deployment this is pretty

00:39:26,079 --> 00:39:29,760
pretty

00:39:26,960 --> 00:39:30,160
useful that uh in terms of deployment

00:39:29,760 --> 00:39:31,760
you

00:39:30,160 --> 00:39:33,599
uh you can configure open to download

00:39:31,760 --> 00:39:34,880
policies from a centralized location

00:39:33,599 --> 00:39:36,400
that's pretty it's pretty powerful

00:39:34,880 --> 00:39:37,680
that's the bundle api we'll talk a

00:39:36,400 --> 00:39:39,599
little bit about that

00:39:37,680 --> 00:39:42,000
uh in terms of monitoring uh there's a

00:39:39,599 --> 00:39:43,680
status api and prometheus endpoints and

00:39:42,000 --> 00:39:44,400
then there's also a dedicated logging

00:39:43,680 --> 00:39:46,560
api

00:39:44,400 --> 00:39:47,680
oppo when it logs it doesn't just record

00:39:46,560 --> 00:39:49,680
the decisions it makes

00:39:47,680 --> 00:39:51,440
in text it records them in what i like

00:39:49,680 --> 00:39:52,720
to call high fidelity json so you

00:39:51,440 --> 00:39:54,000
actually get a json object that

00:39:52,720 --> 00:39:56,960
represents each decision

00:39:54,000 --> 00:39:58,160
what input was provided what output uh

00:39:56,960 --> 00:39:59,839
opa provided

00:39:58,160 --> 00:40:01,280
you know if you want what revision of

00:39:59,839 --> 00:40:02,560
the policy was used to make that

00:40:01,280 --> 00:40:04,000
decision and so on

00:40:02,560 --> 00:40:05,839
um so anyway i want to give you just a

00:40:04,000 --> 00:40:08,240
quick overview of some of the opa

00:40:05,839 --> 00:40:08,240
tooling

00:40:08,839 --> 00:40:13,680
um that is sort of

00:40:12,240 --> 00:40:15,200
an overview of the tooling what i want

00:40:13,680 --> 00:40:17,440
to spend most of the time on now is sort

00:40:15,200 --> 00:40:19,520
of like policy authoring

00:40:17,440 --> 00:40:21,680
and i think looking at the time it's

00:40:19,520 --> 00:40:22,640
about 10 45 i think what i probably want

00:40:21,680 --> 00:40:24,880
to do is just skip

00:40:22,640 --> 00:40:26,480
over a couple of these and go straight

00:40:24,880 --> 00:40:28,079
to a demo and then i can talk through

00:40:26,480 --> 00:40:33,200
some of this stuff as we

00:40:28,079 --> 00:40:33,200
as we do the demo okay so let's do that

00:40:34,240 --> 00:40:38,480
all right any other questions while

00:40:36,480 --> 00:40:41,760
we're here

00:40:38,480 --> 00:40:42,720
it looks like not okay good okay so what

00:40:41,760 --> 00:40:45,680
i want to show here

00:40:42,720 --> 00:40:46,800
is a couple of things so one of which is

00:40:45,680 --> 00:40:48,480
that i'm going to show you

00:40:46,800 --> 00:40:50,640
give you a quick intro to policy

00:40:48,480 --> 00:40:51,119
authoring and then what i also want to

00:40:50,640 --> 00:40:53,040
do

00:40:51,119 --> 00:40:54,800
is go ahead and show you sort of

00:40:53,040 --> 00:40:56,560
something working end to end where

00:40:54,800 --> 00:40:59,280
we're writing policy and then we've

00:40:56,560 --> 00:41:00,640
already got an opa running

00:40:59,280 --> 00:41:02,160
and integrated with actually two

00:41:00,640 --> 00:41:03,119
different things so what i've done ahead

00:41:02,160 --> 00:41:05,200
of time here is i've

00:41:03,119 --> 00:41:07,760
gotten opa running and integrated on

00:41:05,200 --> 00:41:09,359
just a sort of a kubernetes cluster

00:41:07,760 --> 00:41:11,839
we've got an application running on the

00:41:09,359 --> 00:41:14,880
kubernetes cluster it's actually kuma's

00:41:11,839 --> 00:41:17,599
sample application

00:41:14,880 --> 00:41:18,640
and i also have an opa's integrated into

00:41:17,599 --> 00:41:20,000
that application

00:41:18,640 --> 00:41:22,400
just like i showed you with the the

00:41:20,000 --> 00:41:25,359
microservice network proxy integration

00:41:22,400 --> 00:41:26,640
and then i've also got opa running um as

00:41:25,359 --> 00:41:28,240
an admission controller on that

00:41:26,640 --> 00:41:30,640
kubernetes cluster

00:41:28,240 --> 00:41:31,920
um so uh so what i'm gonna show you is

00:41:30,640 --> 00:41:34,560
uh authoring policy

00:41:31,920 --> 00:41:35,040
for um actually you know what i can do

00:41:34,560 --> 00:41:36,720
here

00:41:35,040 --> 00:41:39,200
maybe what i'll do first is i can show

00:41:36,720 --> 00:41:41,520
you a couple of the yaml snippets

00:41:39,200 --> 00:41:42,720
that i used to go ahead and put opa in

00:41:41,520 --> 00:41:44,720
place

00:41:42,720 --> 00:41:46,960
so first let's look at the kubernetes

00:41:44,720 --> 00:41:46,960
one

00:41:47,200 --> 00:41:52,960
um so here is

00:41:51,119 --> 00:41:54,480
is kubernetes so anytime you spin up

00:41:52,960 --> 00:41:55,760
open you integrate it as an admission

00:41:54,480 --> 00:41:57,280
controller there are a couple things to

00:41:55,760 --> 00:41:58,560
do this this isn't using gatekeeper and

00:41:57,280 --> 00:41:59,920
there's a reason for that i'll i'll show

00:41:58,560 --> 00:42:01,280
you because i wanted to show everything

00:41:59,920 --> 00:42:02,000
i want to show all the policy authoring

00:42:01,280 --> 00:42:04,640
being done through the

00:42:02,000 --> 00:42:05,200
the playground uh but so when you spin

00:42:04,640 --> 00:42:07,520
up oppa

00:42:05,200 --> 00:42:09,119
as a as an admission controller um

00:42:07,520 --> 00:42:10,079
here's sort of like the kubernetes

00:42:09,119 --> 00:42:11,359
validating

00:42:10,079 --> 00:42:13,119
web hook configuration that you would

00:42:11,359 --> 00:42:15,440
put in place and that just tells

00:42:13,119 --> 00:42:16,640
kubernetes every time you see receive an

00:42:15,440 --> 00:42:18,319
admission request

00:42:16,640 --> 00:42:20,560
go ahead and send that over to oppa and

00:42:18,319 --> 00:42:22,160
then you can obviously configure that

00:42:20,560 --> 00:42:24,319
to only send some of this stuff over to

00:42:22,160 --> 00:42:27,599
oppa as you like

00:42:24,319 --> 00:42:30,000
in addition here there is basically opa

00:42:27,599 --> 00:42:31,839
which is a deployment

00:42:30,000 --> 00:42:33,440
you can run as many replicas as you like

00:42:31,839 --> 00:42:34,800
as you would expect

00:42:33,440 --> 00:42:37,200
and then what you do is you configure

00:42:34,800 --> 00:42:38,880
opa to go ahead and pull its

00:42:37,200 --> 00:42:40,480
configuration from a config map you

00:42:38,880 --> 00:42:42,240
could also hard code this if you like

00:42:40,480 --> 00:42:44,000
but here's the config map and the one

00:42:42,240 --> 00:42:46,000
thing i'll call out here is that

00:42:44,000 --> 00:42:47,200
there is this bundle api that i

00:42:46,000 --> 00:42:49,280
mentioned and so what we've done here in

00:42:47,200 --> 00:42:52,400
this bundle api is we've configured

00:42:49,280 --> 00:42:54,720
uh this particular um opa

00:42:52,400 --> 00:42:55,760
to pull bundles from the playground and

00:42:54,720 --> 00:42:56,000
i'll show you that in a little bit so

00:42:55,760 --> 00:42:57,119
what

00:42:56,000 --> 00:42:58,720
what's happening here is that opa is

00:42:57,119 --> 00:42:59,839
being configured to download policy

00:42:58,720 --> 00:43:01,680
periodically

00:42:59,839 --> 00:43:03,200
from this playground that i'm about to

00:43:01,680 --> 00:43:05,359
show you so that's how it gets

00:43:03,200 --> 00:43:07,200
dynamic policy updates the rest of this

00:43:05,359 --> 00:43:09,040
is pretty straightforward a service that

00:43:07,200 --> 00:43:11,599
sits on top of the deployment

00:43:09,040 --> 00:43:12,400
and then a namespace to actually host

00:43:11,599 --> 00:43:13,760
all of this stuff

00:43:12,400 --> 00:43:15,839
and then a secret you need a secret in

00:43:13,760 --> 00:43:19,119
place so that oppa and the

00:43:15,839 --> 00:43:21,200
kube api server can communicate

00:43:19,119 --> 00:43:22,800
all right um so that's sort of how you

00:43:21,200 --> 00:43:25,920
might run oppa

00:43:22,800 --> 00:43:27,359
sort of a bear opa on as a kubernetes

00:43:25,920 --> 00:43:29,599
mission controller

00:43:27,359 --> 00:43:31,200
when it comes to the application that's

00:43:29,599 --> 00:43:32,960
running i won't go through all the

00:43:31,200 --> 00:43:34,400
details here but what i will say is that

00:43:32,960 --> 00:43:37,359
here we have a deployment

00:43:34,400 --> 00:43:38,960
um and this is sort of one of kuma's you

00:43:37,359 --> 00:43:40,160
know back-end services so this is the

00:43:38,960 --> 00:43:41,599
kuma um app

00:43:40,160 --> 00:43:43,839
web application it's got some backend

00:43:41,599 --> 00:43:45,440
services and so the one thing that i did

00:43:43,839 --> 00:43:47,440
uh when i added oppo is i just went

00:43:45,440 --> 00:43:48,880
ahead and added opa here

00:43:47,440 --> 00:43:50,400
and here again this is basically the

00:43:48,880 --> 00:43:51,040
same configuration that we saw a moment

00:43:50,400 --> 00:43:52,400
ago

00:43:51,040 --> 00:43:54,079
in this case what we're doing though is

00:43:52,400 --> 00:43:56,560
we're pointing oppa at

00:43:54,079 --> 00:43:58,640
a different bundle so this is basically

00:43:56,560 --> 00:44:00,400
just again configuring this opa to pull

00:43:58,640 --> 00:44:03,680
and download policy

00:44:00,400 --> 00:44:05,839
from from the playground and then the

00:44:03,680 --> 00:44:07,520
idea is that there's also just a little

00:44:05,839 --> 00:44:09,599
bit of

00:44:07,520 --> 00:44:10,800
extra to actually tell kuma to forward

00:44:09,599 --> 00:44:14,240
all the requests

00:44:10,800 --> 00:44:15,920
over to um over to oppa

00:44:14,240 --> 00:44:17,359
which oh yeah here it is so this is sort

00:44:15,920 --> 00:44:20,960
of the equivalent or

00:44:17,359 --> 00:44:23,119
the analogy to the admission or the web

00:44:20,960 --> 00:44:25,920
the validating web hook configuration so

00:44:23,119 --> 00:44:27,040
in in fukuma it's a proxy template

00:44:25,920 --> 00:44:28,640
all right so that's sort of what you

00:44:27,040 --> 00:44:29,440
would do uh in terms of setting

00:44:28,640 --> 00:44:31,359
everything up

00:44:29,440 --> 00:44:32,720
uh now let's go ahead and look at uh the

00:44:31,359 --> 00:44:35,119
playground

00:44:32,720 --> 00:44:36,000
so um uh all of those both those opos

00:44:35,119 --> 00:44:37,520
were basically configured

00:44:36,000 --> 00:44:38,720
to pull their policies out of this

00:44:37,520 --> 00:44:40,400
playground so this playground is

00:44:38,720 --> 00:44:41,680
basically just a web application it's

00:44:40,400 --> 00:44:42,480
not intended for production it's just

00:44:41,680 --> 00:44:44,240
good for

00:44:42,480 --> 00:44:46,480
for testing out your policies it's good

00:44:44,240 --> 00:44:48,079
for helping you author policies

00:44:46,480 --> 00:44:52,000
and to actually connect them sort of as

00:44:48,079 --> 00:44:54,480
a demo of to to a running opa so that

00:44:52,000 --> 00:44:55,920
um so that you can go ahead and um and

00:44:54,480 --> 00:44:57,440
see this all working end to end so

00:44:55,920 --> 00:44:58,640
that's what we're going to do here today

00:44:57,440 --> 00:45:00,720
so the idea here is that when you're

00:44:58,640 --> 00:45:02,319
writing policy i'll call a couple things

00:45:00,720 --> 00:45:04,319
out here um the package is just you know

00:45:02,319 --> 00:45:05,680
a package from a standard sort of

00:45:04,319 --> 00:45:06,960
programming language thing you can you

00:45:05,680 --> 00:45:08,400
can write multiple policies you can

00:45:06,960 --> 00:45:10,319
organize them into packages or into

00:45:08,400 --> 00:45:12,000
modules as you so desire

00:45:10,319 --> 00:45:13,680
in this particular example uh we've

00:45:12,000 --> 00:45:14,880
really got two allow statements that

00:45:13,680 --> 00:45:17,359
we're writing here

00:45:14,880 --> 00:45:18,319
um and so allowand and i aren't keywords

00:45:17,359 --> 00:45:20,079
in oppa

00:45:18,319 --> 00:45:22,079
really at the end of the day allow is

00:45:20,079 --> 00:45:24,400
just is just a variable

00:45:22,079 --> 00:45:26,160
but at a high level what this policy

00:45:24,400 --> 00:45:26,640
language was designed to do is to sort

00:45:26,160 --> 00:45:28,720
of

00:45:26,640 --> 00:45:30,480
syntactically mirror the real world

00:45:28,720 --> 00:45:31,599
policies that we all see in wikis and

00:45:30,480 --> 00:45:34,240
pdf so

00:45:31,599 --> 00:45:35,680
all the statements that you write in a

00:45:34,240 --> 00:45:37,599
in a regular policy are really

00:45:35,680 --> 00:45:39,280
if statements so what this is saying is

00:45:37,599 --> 00:45:41,680
allow is true if

00:45:39,280 --> 00:45:42,960
all of these conditions are true here's

00:45:41,680 --> 00:45:43,839
another statement that says allow is

00:45:42,960 --> 00:45:46,400
also true if

00:45:43,839 --> 00:45:46,960
all of these conditions are true and so

00:45:46,400 --> 00:45:48,240
what we're doing

00:45:46,960 --> 00:45:50,720
here in this first example is we're

00:45:48,240 --> 00:45:54,319
saying we're going to allow

00:45:50,720 --> 00:45:56,640
an api call that is a get to slash items

00:45:54,319 --> 00:45:57,839
and so and so we're writing a couple of

00:45:56,640 --> 00:45:58,960
conditions here the first one's checking

00:45:57,839 --> 00:46:00,319
that the method is a get

00:45:58,960 --> 00:46:02,240
and the second one is second one is

00:46:00,319 --> 00:46:03,599
checking that the path is is what we

00:46:02,240 --> 00:46:04,880
expect

00:46:03,599 --> 00:46:06,079
and then here in the second statement

00:46:04,880 --> 00:46:07,040
what we're seeing here is we're going to

00:46:06,079 --> 00:46:09,760
allow

00:46:07,040 --> 00:46:11,839
a get request to this url here which is

00:46:09,760 --> 00:46:13,280
slash items and then there's an id

00:46:11,839 --> 00:46:15,200
and then there's slash reviews and then

00:46:13,280 --> 00:46:17,280
there's another id and again

00:46:15,200 --> 00:46:18,480
uh you know that mirrors pretty closely

00:46:17,280 --> 00:46:21,520
the two conditions

00:46:18,480 --> 00:46:22,480
that are written there um in rego now

00:46:21,520 --> 00:46:23,599
the other thing that i probably should

00:46:22,480 --> 00:46:25,760
have called out first

00:46:23,599 --> 00:46:27,200
was that anytime oppa receives a risk a

00:46:25,760 --> 00:46:29,599
request from

00:46:27,200 --> 00:46:30,720
from kuma in this case which is envoy

00:46:29,599 --> 00:46:32,480
under the hood

00:46:30,720 --> 00:46:36,079
oppa receives the input that you see

00:46:32,480 --> 00:46:36,079
over here on the right hand side

00:46:39,680 --> 00:46:43,040
and what you can see here is that

00:46:40,640 --> 00:46:45,040
there's just a bunch of json right like

00:46:43,040 --> 00:46:46,880
you see there's a destination you see

00:46:45,040 --> 00:46:47,760
there's some metadata you see there's a

00:46:46,880 --> 00:46:50,079
request

00:46:47,760 --> 00:46:51,520
and inside the request there's an http

00:46:50,079 --> 00:46:52,079
portion of it you can see the headers if

00:46:51,520 --> 00:46:53,520
you want

00:46:52,079 --> 00:46:56,079
you can also get the method you can get

00:46:53,520 --> 00:46:57,040
the path you can also get the source if

00:46:56,079 --> 00:46:58,319
you want so that's kind of the

00:46:57,040 --> 00:46:59,839
information that oprah's handed that's

00:46:58,319 --> 00:47:00,640
that policy query we saw on the slides a

00:46:59,839 --> 00:47:02,800
little bit ago

00:47:00,640 --> 00:47:04,400
and now given that information as input

00:47:02,800 --> 00:47:06,000
let's make a decision let's write the

00:47:04,400 --> 00:47:07,599
logic that makes a decision in this case

00:47:06,000 --> 00:47:09,440
we're going to return allow

00:47:07,599 --> 00:47:11,040
is true or false one of the nice things

00:47:09,440 --> 00:47:13,520
you can do here is within the

00:47:11,040 --> 00:47:14,640
the playground you can go ahead and hit

00:47:13,520 --> 00:47:15,760
the evaluate button

00:47:14,640 --> 00:47:17,920
and what that does is it actually

00:47:15,760 --> 00:47:19,839
evaluates this policy over this input

00:47:17,920 --> 00:47:22,640
and then it spits out whatever

00:47:19,839 --> 00:47:23,680
results um oppa provides and so in this

00:47:22,640 --> 00:47:24,800
case it's allow

00:47:23,680 --> 00:47:27,520
so if we want to see this in action

00:47:24,800 --> 00:47:29,760
let's click over the actual application

00:47:27,520 --> 00:47:30,880
here's the application um it's a you

00:47:29,760 --> 00:47:33,359
know e-commerce

00:47:30,880 --> 00:47:34,960
app and as you can see you can load this

00:47:33,359 --> 00:47:36,160
page of all items that was one of the

00:47:34,960 --> 00:47:38,000
allow statements we wrote

00:47:36,160 --> 00:47:39,760
and the other one that we wrote was that

00:47:38,000 --> 00:47:42,240
we can allow an inspection

00:47:39,760 --> 00:47:43,599
of one of the actual um one of the

00:47:42,240 --> 00:47:46,000
actual

00:47:43,599 --> 00:47:47,280
items in that list now if we want to see

00:47:46,000 --> 00:47:49,760
this actually

00:47:47,280 --> 00:47:51,119
uh change let's go ahead and change some

00:47:49,760 --> 00:47:52,319
of our policy

00:47:51,119 --> 00:47:54,000
now once we change it we're going to go

00:47:52,319 --> 00:47:55,119
ahead and publish it and now it's the

00:47:54,000 --> 00:47:55,760
playground's going to give us a bunch of

00:47:55,119 --> 00:47:57,520
information

00:47:55,760 --> 00:48:00,400
this information was what i used to

00:47:57,520 --> 00:48:03,440
actually set up oppa and install it

00:48:00,400 --> 00:48:04,960
as as as i showed you a minute ago

00:48:03,440 --> 00:48:06,880
but for now we can just close it because

00:48:04,960 --> 00:48:08,319
we've already done that so now if we go

00:48:06,880 --> 00:48:10,160
ahead and it'll take

00:48:08,319 --> 00:48:12,640
five or ten seconds to go ahead and and

00:48:10,160 --> 00:48:16,079
for open to download that

00:48:12,640 --> 00:48:17,839
that policy um and so maybe let's take a

00:48:16,079 --> 00:48:19,440
crack okay so it looks like yeah okay so

00:48:17,839 --> 00:48:21,440
opa's downloaded the policy

00:48:19,440 --> 00:48:23,520
and now while we could reload the page

00:48:21,440 --> 00:48:24,960
um what we see now here is that we're

00:48:23,520 --> 00:48:26,480
getting an authorization or you're no

00:48:24,960 --> 00:48:27,119
longer authorized to make this api

00:48:26,480 --> 00:48:28,960
request

00:48:27,119 --> 00:48:30,800
the api request that we commented out

00:48:28,960 --> 00:48:32,559
there in that policy is exactly

00:48:30,800 --> 00:48:34,800
obviously the api request that's been

00:48:32,559 --> 00:48:40,640
denied here

00:48:34,800 --> 00:48:40,640
all right any questions here

00:48:43,920 --> 00:48:48,880
okay not so far all right let me show

00:48:47,040 --> 00:48:50,960
you the other half of this very quickly

00:48:48,880 --> 00:48:52,079
uh and then i'll just open it up for for

00:48:50,960 --> 00:48:55,359
questions

00:48:52,079 --> 00:48:57,680
um so what we see here is

00:48:55,359 --> 00:48:59,200
a live running application that we are

00:48:57,680 --> 00:49:01,280
able to

00:48:59,200 --> 00:49:04,079
manage policy over authorization policy

00:49:01,280 --> 00:49:06,400
over using oppa in the playground

00:49:04,079 --> 00:49:08,319
but what you can also do is use that

00:49:06,400 --> 00:49:09,359
same playground that same language that

00:49:08,319 --> 00:49:11,520
same tool set

00:49:09,359 --> 00:49:13,040
to go ahead and control the resources

00:49:11,520 --> 00:49:14,720
that are deployed onto that same

00:49:13,040 --> 00:49:16,400
kubernetes cluster where our application

00:49:14,720 --> 00:49:19,920
happens to be living

00:49:16,400 --> 00:49:23,040
so here is the policy that

00:49:19,920 --> 00:49:24,480
that we have in place here's the policy

00:49:23,040 --> 00:49:27,760
that we have in place for

00:49:24,480 --> 00:49:29,920
the um for the kubernetes api

00:49:27,760 --> 00:49:31,280
server for the admission controller and

00:49:29,920 --> 00:49:33,200
here this one looks a little bit more

00:49:31,280 --> 00:49:34,880
complicated i'll tell you just for now

00:49:33,200 --> 00:49:37,119
ignore this top part this top part is

00:49:34,880 --> 00:49:38,880
basically just constructing the response

00:49:37,119 --> 00:49:40,319
the actual api response that gets sent

00:49:38,880 --> 00:49:42,400
back to the cube api server

00:49:40,319 --> 00:49:44,240
and so as you can see the response has

00:49:42,400 --> 00:49:45,280
to be an admission review object and so

00:49:44,240 --> 00:49:47,280
you know i mentioned this a little bit

00:49:45,280 --> 00:49:48,559
ago that that oppa can return these

00:49:47,280 --> 00:49:50,079
arbitrarily structured objects and

00:49:48,559 --> 00:49:51,520
here's a good example of that

00:49:50,079 --> 00:49:53,040
but when we're thinking about policy

00:49:51,520 --> 00:49:53,760
really what we're thinking about for the

00:49:53,040 --> 00:49:55,680
most part

00:49:53,760 --> 00:49:57,119
is what are the resources what are the

00:49:55,680 --> 00:49:59,680
conditions on resources

00:49:57,119 --> 00:50:00,240
that are that we know are unsafe to

00:49:59,680 --> 00:50:02,480
deploy

00:50:00,240 --> 00:50:03,839
to that cluster so maybe for example you

00:50:02,480 --> 00:50:07,119
want to write a policy that says

00:50:03,839 --> 00:50:09,520
only that all pods must uh

00:50:07,119 --> 00:50:10,240
must run images from our trusted image

00:50:09,520 --> 00:50:11,920
registry

00:50:10,240 --> 00:50:14,160
or maybe you want to say that in the

00:50:11,920 --> 00:50:16,400
second case here that all

00:50:14,160 --> 00:50:17,920
all pods must have a cost center label

00:50:16,400 --> 00:50:19,200
all right now how would you write that

00:50:17,920 --> 00:50:20,960
well this looks a little different from

00:50:19,200 --> 00:50:21,280
the allow statements a minute ago these

00:50:20,960 --> 00:50:22,960
are

00:50:21,280 --> 00:50:24,880
slightly more complicated deny

00:50:22,960 --> 00:50:26,400
statements what these deny statements

00:50:24,880 --> 00:50:27,119
are doing is actually returning error

00:50:26,400 --> 00:50:29,680
messages

00:50:27,119 --> 00:50:30,480
that tell the user why in fact their

00:50:29,680 --> 00:50:33,040
resources

00:50:30,480 --> 00:50:34,319
is is rejected if in fact it is and so

00:50:33,040 --> 00:50:35,680
in this case what you see here is i've

00:50:34,319 --> 00:50:38,400
commented out the top one

00:50:35,680 --> 00:50:40,000
which is but but the one that's below is

00:50:38,400 --> 00:50:42,079
in place and it's saying well every pod

00:50:40,000 --> 00:50:44,480
must have a cost center label

00:50:42,079 --> 00:50:45,920
and so let's take a quick look at a pod

00:50:44,480 --> 00:50:47,680
and then we'll drop into the command

00:50:45,920 --> 00:50:51,280
line to actually see

00:50:47,680 --> 00:50:52,960
us trying to to create that pod

00:50:51,280 --> 00:50:54,640
all right so here's our pod as you can

00:50:52,960 --> 00:50:55,280
see it's a super simple pod it's just

00:50:54,640 --> 00:50:57,920
got an

00:50:55,280 --> 00:50:59,440
nginx image which does not come from our

00:50:57,920 --> 00:51:00,240
trusted registry that's coming from a

00:50:59,440 --> 00:51:03,440
public

00:51:00,240 --> 00:51:05,200
docker image and so what we're going to

00:51:03,440 --> 00:51:10,480
do here is very quickly look

00:51:05,200 --> 00:51:12,240
at kubernetes so just so that

00:51:10,480 --> 00:51:13,520
you see this is the same pot i showed

00:51:12,240 --> 00:51:17,000
you a moment ago

00:51:13,520 --> 00:51:20,000
if we go ahead and coupe kettle apply

00:51:17,000 --> 00:51:20,000
pod.yaml

00:51:20,319 --> 00:51:23,599
we see that oh we get an error and the

00:51:22,000 --> 00:51:24,559
reason we get an error is because that

00:51:23,599 --> 00:51:28,000
pod

00:51:24,559 --> 00:51:29,520
failed to include a cost center label

00:51:28,000 --> 00:51:31,520
uh and if you remember that was the one

00:51:29,520 --> 00:51:33,680
rule that we had in place over here

00:51:31,520 --> 00:51:34,880
so we could go into the pod if we wanted

00:51:33,680 --> 00:51:37,359
and

00:51:34,880 --> 00:51:38,240
go ahead and add a cost center label

00:51:37,359 --> 00:51:41,920
label cost

00:51:38,240 --> 00:51:44,720
center that's not right cost center

00:51:41,920 --> 00:51:47,359
is whatever bar let's save it let's try

00:51:44,720 --> 00:51:51,839
to do it again

00:51:47,359 --> 00:51:51,839
unknown field labels

00:51:52,880 --> 00:51:56,480
okay and this time the pod was created

00:51:58,480 --> 00:52:03,280
all right now if we wanted to go ahead

00:52:00,640 --> 00:52:04,720
and put this policy in place

00:52:03,280 --> 00:52:06,079
let's go ahead and publish it again this

00:52:04,720 --> 00:52:06,720
time we're going to require that all

00:52:06,079 --> 00:52:10,240
pods

00:52:06,720 --> 00:52:13,599
also come from a trusted registry

00:52:10,240 --> 00:52:13,599
and we go ahead and try this out

00:52:16,240 --> 00:52:19,359
again giving it five or ten seconds to

00:52:17,920 --> 00:52:22,480
go ahead and

00:52:19,359 --> 00:52:22,480
download policy

00:52:22,960 --> 00:52:27,280
all right and now here we see remember

00:52:24,960 --> 00:52:29,440
that pod had the cost center label

00:52:27,280 --> 00:52:30,400
but it does not have but now it has that

00:52:29,440 --> 00:52:33,440
nginx

00:52:30,400 --> 00:52:35,599
um image and that fails to come from our

00:52:33,440 --> 00:52:38,319
trusted registry

00:52:35,599 --> 00:52:40,319
okay so again second example what we see

00:52:38,319 --> 00:52:42,079
here is using that same

00:52:40,319 --> 00:52:43,359
using the same language certainly

00:52:42,079 --> 00:52:44,880
certainly we're even using the same

00:52:43,359 --> 00:52:47,920
playground the same sort of

00:52:44,880 --> 00:52:49,200
solution to to sort of deploying policy

00:52:47,920 --> 00:52:51,040
and now we're applying that to the

00:52:49,200 --> 00:52:53,839
kubernetes admission uh

00:52:51,040 --> 00:52:54,559
problem and so again just just to drill

00:52:53,839 --> 00:52:57,359
that home

00:52:54,559 --> 00:52:58,000
uh one language one tool set one

00:52:57,359 --> 00:53:00,800
framework

00:52:58,000 --> 00:53:03,440
for enforcing policy across multiple

00:53:00,800 --> 00:53:05,440
different kinds of software

00:53:03,440 --> 00:53:07,520
okay so i think with that i will go

00:53:05,440 --> 00:53:08,880
ahead and

00:53:07,520 --> 00:53:11,520
it looks like we've got another question

00:53:08,880 --> 00:53:15,839
[Music]

00:53:11,520 --> 00:53:15,839
stop share

00:53:18,000 --> 00:53:23,280
okay andy smith says this looks like a

00:53:22,079 --> 00:53:24,240
really exciting project one thing that

00:53:23,280 --> 00:53:25,520
comes to mind

00:53:24,240 --> 00:53:27,119
is that policies could become quite

00:53:25,520 --> 00:53:28,880
complex or hard to maintain is this left

00:53:27,119 --> 00:53:29,920
to the implementer are there tools best

00:53:28,880 --> 00:53:31,280
practices

00:53:29,920 --> 00:53:34,079
yeah so one of the things that we've oh

00:53:31,280 --> 00:53:37,520
that i didn't do here maybe i can share

00:53:34,079 --> 00:53:40,640
this again is

00:53:37,520 --> 00:53:42,880
uh yeah i'll just do this whole thing

00:53:40,640 --> 00:53:44,400
all right so um so yeah if we look at

00:53:42,880 --> 00:53:45,680
the playground the other thing that

00:53:44,400 --> 00:53:47,440
um that we started doing here is

00:53:45,680 --> 00:53:49,760
providing some examples to help people

00:53:47,440 --> 00:53:52,400
get started

00:53:49,760 --> 00:53:54,240
um so the idea being here that like if

00:53:52,400 --> 00:53:56,559
you want to start with like envoy

00:53:54,240 --> 00:53:58,559
and you want to write uh you know think

00:53:56,559 --> 00:54:00,240
about how do you decode jots and

00:53:58,559 --> 00:54:02,160
use those to make authorization

00:54:00,240 --> 00:54:03,119
decisions you've got you know example to

00:54:02,160 --> 00:54:04,800
get you started

00:54:03,119 --> 00:54:06,880
same way with if you want to look at you

00:54:04,800 --> 00:54:08,559
know checking the contents of a jot and

00:54:06,880 --> 00:54:09,280
using that as sort of like a role based

00:54:08,559 --> 00:54:10,960
kind of

00:54:09,280 --> 00:54:12,559
access control so one of the things that

00:54:10,960 --> 00:54:13,520
we are trying to do is provide a number

00:54:12,559 --> 00:54:16,559
of examples

00:54:13,520 --> 00:54:18,240
uh and and guidance out of the box to uh

00:54:16,559 --> 00:54:19,920
how the box is strong but guidance

00:54:18,240 --> 00:54:21,440
around tooling and documentation to help

00:54:19,920 --> 00:54:23,200
people get started in the right way

00:54:21,440 --> 00:54:24,880
we've seen that be very useful in terms

00:54:23,200 --> 00:54:26,240
of providing i don't know if i'd go so

00:54:24,880 --> 00:54:26,800
far as to call them best practices but

00:54:26,240 --> 00:54:28,800
by

00:54:26,800 --> 00:54:30,240
at least giving people examples they

00:54:28,800 --> 00:54:31,440
have a great place to start

00:54:30,240 --> 00:54:34,079
and so the other thing that i'll call

00:54:31,440 --> 00:54:35,680
out while we're here is

00:54:34,079 --> 00:54:38,640
if you want a good place to get started

00:54:35,680 --> 00:54:39,920
under the documentation

00:54:38,640 --> 00:54:41,520
there are a number of tutorials that

00:54:39,920 --> 00:54:43,040
were designed to help sort of walk you

00:54:41,520 --> 00:54:44,640
through using open to solve very

00:54:43,040 --> 00:54:47,760
concrete use cases

00:54:44,640 --> 00:54:49,599
so here you know docker http apis kafka

00:54:47,760 --> 00:54:51,359
ssh terraform envoy

00:54:49,599 --> 00:54:53,119
and then kubernetes is such a popular

00:54:51,359 --> 00:54:55,119
example that it's got its own

00:54:53,119 --> 00:54:56,640
sort of section here where there's uh

00:54:55,119 --> 00:54:57,440
where here are the tutorials for ingress

00:54:56,640 --> 00:54:59,119
validation

00:54:57,440 --> 00:55:00,559
so it's a great place to get started it

00:54:59,119 --> 00:55:02,079
not only sort of walks you through doing

00:55:00,559 --> 00:55:02,880
the integration or applying the

00:55:02,079 --> 00:55:04,480
integration

00:55:02,880 --> 00:55:06,480
but also gives you a place to get

00:55:04,480 --> 00:55:07,680
started in terms of authoring policy so

00:55:06,480 --> 00:55:09,280
we found that to be pretty

00:55:07,680 --> 00:55:12,079
pretty successful in terms of helping

00:55:09,280 --> 00:55:12,079
people get started

00:55:19,920 --> 00:55:22,160
uh

00:55:24,240 --> 00:55:28,880
okay so um unless there are any other

00:55:27,119 --> 00:55:31,760
questions i think we will

00:55:28,880 --> 00:55:35,520
wrap it up for today uh so i should show

00:55:31,760 --> 00:55:37,760
you this slide

00:55:35,520 --> 00:55:39,200
so thank you all for joining me and

00:55:37,760 --> 00:55:41,040
giving me some of your time

00:55:39,200 --> 00:55:43,440
hopefully you found that helpful in some

00:55:41,040 --> 00:55:45,119
way and definitely feel free to reach

00:55:43,440 --> 00:55:48,720
out

00:55:45,119 --> 00:55:49,920
at styro or oppa there's a great slack

00:55:48,720 --> 00:55:51,359
channel for oppa where there are plenty

00:55:49,920 --> 00:55:53,599
of folks that want to help you out

00:55:51,359 --> 00:55:54,880
or go ahead and ping me on on twitter as

00:55:53,599 --> 00:56:03,839
well all right

00:55:54,880 --> 00:56:03,839

YouTube URL: https://www.youtube.com/watch?v=pu6PoH-7Hcs


