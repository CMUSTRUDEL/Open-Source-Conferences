Title: Sudo For Defense: How can new or lesser-known features help you? - Peter Czanik
Publication date: 2020-12-10
Playlist: All Things Open 2020 - Security Track
Description: 
	Presented by: Peter Czanik, One Identity
Presented at All Things Open 2020 - Security Track

Abstract: Sudo has supported fine-tuned permissions and logging in-depth for many years, even though system administrators often know it only as the “prefix” to use before entering a command requiring root privileges. Recent versions provide even more tools to operate and secure your systems. You can collect session recordings centrally. You can now also extend sudo using Python code to, for example, further restrict authorization, terminate sessions, and alert on suspicious activity.

Learning or guessing a user’s password is relatively easy. That is why attackers know sudo as an easy stepping-stone to administrator access. Earlier versions of sudo already provided in-depth logging in order to spot suspicious activity. Version 1.9 puts even more tools into the hands of administrators and security teams. You can collect session recordings centrally. Plugin support was already available in 1.8 but starting with 1.9 you can also extend sudo using Python code.

This talk gives you an introduction to lesser-known features of sudo and then focuses on new possibilities for system administrators available with version 1.9.

Using sudo does not make much sense without proper logging and alerting. There are three major possibilities:
- syslog: all events are logged to syslog. For additional security, collect sudo logs centrally, so a malicious user cannot delete them easily.
- e-mail: sudo can send email alerts on different kinds of failures.
- debug: in-depth logging of subsystems, mostly useful for developers

Session recording is a fourth possibility. The terminal output can be saved in a file and played back. You can play back what happened, even if the user started up an interactive shell.

Starting with version 1.9, you can collect session recordings centrally. This has many advantages: it is convenient, more available, and provides additional security.

You can also extend sudo in Python. This gives you even more possibilities on the defense side. Using Python code, you can easily query external applications for information. For example, only allow a session if there is an open ticket for it, or when the given sysadmin is on duty according to the HR database.

Python also provides many possibilities to detect suspicious activities. A new API provides you with full access to sudo logs, with even more data than the traditional sudo logs provide, so you can analyze log messages in real-time within sudo. You can also analyze IO logs from Python, including user input and terminal output. This way it is easy to detect suspicious content on the screen, like file names appearing on-screen from a directory which the user was never supposed to access. With a few additional tricks, you can also detect what the user is typing and analyze command lines. You can alert on suspicious activity or even terminate sessions.

As you can see, sudo has several lesser-known features that can make access management and monitoring easier.
Captions: 
	00:00:05,680 --> 00:00:08,319
so

00:00:11,040 --> 00:00:17,520
i guess i can skip this one so

00:00:14,240 --> 00:00:20,400
what is sudo uh

00:00:17,520 --> 00:00:21,439
i asked these questions quite uh from

00:00:20,400 --> 00:00:25,039
quite a lot of people

00:00:21,439 --> 00:00:28,240
in the past two years uh since i'm

00:00:25,039 --> 00:00:30,800
working with todd and i get

00:00:28,240 --> 00:00:33,040
very different answers depending on the

00:00:30,800 --> 00:00:33,600
experience of the person and the size of

00:00:33,040 --> 00:00:37,360
the

00:00:33,600 --> 00:00:40,559
environment where one is working

00:00:37,360 --> 00:00:41,120
so the most common answer was it's a

00:00:40,559 --> 00:00:43,680
tool to

00:00:41,120 --> 00:00:46,800
complicate life this was coming

00:00:43,680 --> 00:00:49,440
especially from desktop users

00:00:46,800 --> 00:00:50,399
but even season system administrators

00:00:49,440 --> 00:00:51,920
tell me that

00:00:50,399 --> 00:00:53,440
well it's just the prefix for the

00:00:51,920 --> 00:00:57,039
administrative commands

00:00:53,440 --> 00:01:00,640
only very few are aware of the

00:00:57,039 --> 00:01:00,640
advanced feature of sudo

00:01:01,039 --> 00:01:04,960
so what is sudo according to the sudo

00:01:03,680 --> 00:01:08,080
website

00:01:04,960 --> 00:01:10,240
sudo allows a system administrator and

00:01:08,080 --> 00:01:12,000
to delegate authority by giving certain

00:01:10,240 --> 00:01:13,680
users the ability to

00:01:12,000 --> 00:01:16,080
run some commands as root or another

00:01:13,680 --> 00:01:17,119
user while providing an audit trail of

00:01:16,080 --> 00:01:20,720
the comments and

00:01:17,119 --> 00:01:22,799
arguments so as

00:01:20,720 --> 00:01:25,520
you can see and you will see it's a lot

00:01:22,799 --> 00:01:28,799
more than just the prefix

00:01:25,520 --> 00:01:31,360
well if we can believe to x x k

00:01:28,799 --> 00:01:32,240
c d uh it can even make you assembly

00:01:31,360 --> 00:01:34,799
just make sure

00:01:32,240 --> 00:01:37,680
that when you ask for it you use the

00:01:34,799 --> 00:01:37,680
sudo prefix

00:01:39,200 --> 00:01:45,280
so let's go back to basics uh sudo

00:01:42,240 --> 00:01:47,119
uh stores its configuration in in in the

00:01:45,280 --> 00:01:50,640
epc studio arts file

00:01:47,119 --> 00:01:53,360
when you take a look at it you will see

00:01:50,640 --> 00:01:55,840
that by default it will have a single

00:01:53,360 --> 00:01:55,840
rule in it

00:01:58,079 --> 00:02:05,119
that members of the real group can do

00:02:01,200 --> 00:02:09,840
practically anything on your hosts

00:02:05,119 --> 00:02:09,840
but even if this simple

00:02:10,399 --> 00:02:13,680
rule is useful as

00:02:12,200 --> 00:02:17,760
[Music]

00:02:13,680 --> 00:02:20,800
if you use sudo to run commands you will

00:02:17,760 --> 00:02:23,599
see who did what on your system

00:02:20,800 --> 00:02:24,400
the columns here mean that who on which

00:02:23,599 --> 00:02:27,760
hosts

00:02:24,400 --> 00:02:29,440
uh a switch user and uh which commands

00:02:27,760 --> 00:02:32,319
are allowed to be run

00:02:29,440 --> 00:02:34,480
of course when uh it's more than just

00:02:32,319 --> 00:02:38,000
you and your best friend administrating

00:02:34,480 --> 00:02:41,440
uh machine he will start to fine-tune

00:02:38,000 --> 00:02:41,440
permissions and

00:02:41,760 --> 00:02:49,040
you can create lists

00:02:45,840 --> 00:02:52,800
instead of any of the columns above so

00:02:49,040 --> 00:02:57,120
you can use a list of users a list of

00:02:52,800 --> 00:02:57,120
host names list of comments and so on

00:02:57,599 --> 00:03:01,840
but quickly you will realize that you

00:03:01,200 --> 00:03:04,879
are copying

00:03:01,840 --> 00:03:07,760
copying and pasting huge lists around in

00:03:04,879 --> 00:03:09,519
your configuration

00:03:07,760 --> 00:03:11,200
which can be quite error from just

00:03:09,519 --> 00:03:13,200
imagine that

00:03:11,200 --> 00:03:14,400
you have a problem with one of your

00:03:13,200 --> 00:03:17,760
sysadmins

00:03:14,400 --> 00:03:21,120
and you remove most of the

00:03:17,760 --> 00:03:22,720
most of the appearances of his username

00:03:21,120 --> 00:03:24,159
from the pseudo-arts file but not

00:03:22,720 --> 00:03:29,840
everything

00:03:24,159 --> 00:03:29,840
and it's quite easy easily possible that

00:03:30,560 --> 00:03:34,959
that this admin can come back using that

00:03:32,879 --> 00:03:38,879
command

00:03:34,959 --> 00:03:41,920
as a backdoor this is where aliases

00:03:38,879 --> 00:03:44,799
can come handy as they can

00:03:41,920 --> 00:03:45,200
greatly simplify uh the configuration

00:03:44,799 --> 00:03:48,560
and

00:03:45,200 --> 00:03:51,680
make it last lesser work done instead of

00:03:48,560 --> 00:03:53,360
uh copying copying and pasting lists

00:03:51,680 --> 00:03:55,760
around in your config

00:03:53,360 --> 00:03:58,000
you can create aliases and use the

00:03:55,760 --> 00:04:00,319
aliases in your configuration

00:03:58,000 --> 00:04:01,760
here are a few examples the host areas

00:04:00,319 --> 00:04:04,720
for web servers

00:04:01,760 --> 00:04:05,920
user areas for administrators and the

00:04:04,720 --> 00:04:09,040
commander yes for

00:04:05,920 --> 00:04:09,040
rebooting the system

00:04:12,400 --> 00:04:19,919
sudo has a huge set of defaults uh

00:04:16,239 --> 00:04:21,919
inside most of these make perfect sense

00:04:19,919 --> 00:04:24,240
but sometimes you want to override

00:04:21,919 --> 00:04:26,560
the default behavior you can use that

00:04:24,240 --> 00:04:29,440
you can

00:04:26,560 --> 00:04:30,080
do that using the uh default statements

00:04:29,440 --> 00:04:33,199
in your

00:04:30,080 --> 00:04:34,160
sql's file here we override the secure

00:04:33,199 --> 00:04:37,759
path

00:04:34,160 --> 00:04:38,800
the which environment variables are kept

00:04:37,759 --> 00:04:44,400
from the user

00:04:38,800 --> 00:04:44,400
and we disable inserts for our users

00:04:44,720 --> 00:04:48,800
these defaults can also be uh user or

00:04:47,919 --> 00:04:51,919
host specific

00:04:48,800 --> 00:04:55,040
like at the bottom of the screen it's

00:04:51,919 --> 00:04:57,280
we enable inserts for members of the

00:04:55,040 --> 00:05:00,800
real group

00:04:57,280 --> 00:05:02,960
so what are insults they are fun but not

00:05:00,800 --> 00:05:06,479
always politically correct

00:05:02,960 --> 00:05:11,520
so for the past couple of years

00:05:06,479 --> 00:05:15,680
they are disabled by default these are

00:05:11,520 --> 00:05:18,880
some fun error messages when someone

00:05:15,680 --> 00:05:18,880
mistypes a password

00:05:18,960 --> 00:05:29,120
sysadmin humor

00:05:25,120 --> 00:05:32,160
you can also do uh digest verification

00:05:29,120 --> 00:05:34,240
using this pseudo horse file and this

00:05:32,160 --> 00:05:36,160
way you can prevent modified binaries

00:05:34,240 --> 00:05:39,680
from running

00:05:36,160 --> 00:05:40,320
this digest lists are quite difficult to

00:05:39,680 --> 00:05:43,120
maintain

00:05:40,320 --> 00:05:46,560
on the other hand he can create an

00:05:43,120 --> 00:05:46,560
additional layer of protection

00:05:46,720 --> 00:05:55,280
when you don't trust your users at all

00:05:52,880 --> 00:05:56,479
you can also do session recording it's

00:05:55,280 --> 00:05:58,800
to do it is

00:05:56,479 --> 00:05:59,840
especially important if you need to hand

00:05:58,800 --> 00:06:02,639
out

00:05:59,840 --> 00:06:03,680
shell access to your users but it it can

00:06:02,639 --> 00:06:07,360
come handy

00:06:03,680 --> 00:06:09,360
for other users you use this as well

00:06:07,360 --> 00:06:10,720
this way you can playback record

00:06:09,360 --> 00:06:11,360
everything what is happening on the

00:06:10,720 --> 00:06:13,919
terminal

00:06:11,360 --> 00:06:15,120
and play it back as well just like a

00:06:13,919 --> 00:06:17,120
movie

00:06:15,120 --> 00:06:18,160
the recording itself is quite difficult

00:06:17,120 --> 00:06:21,360
to modify as

00:06:18,160 --> 00:06:24,560
it's not clear text on the other hand

00:06:21,360 --> 00:06:29,039
easy to delete especially when you give

00:06:24,560 --> 00:06:29,039
shell access to the user but stay tuned

00:06:29,520 --> 00:06:33,680
sudo 1.8 introduced a plugin based

00:06:32,080 --> 00:06:36,160
architecture

00:06:33,680 --> 00:06:36,560
which means that most of its features

00:06:36,160 --> 00:06:37,840
are

00:06:36,560 --> 00:06:41,440
[Music]

00:06:37,840 --> 00:06:43,680
implemented as plugins and you can

00:06:41,440 --> 00:06:45,120
replace or extend this functionality

00:06:43,680 --> 00:06:47,360
using your

00:06:45,120 --> 00:06:49,199
own plugins there are both open source

00:06:47,360 --> 00:06:52,479
and commercial plugins

00:06:49,199 --> 00:06:52,479
available forced to do

00:06:52,720 --> 00:07:00,840
here i want to show you the

00:06:56,000 --> 00:07:05,199
studio pair it's a nice plugin

00:07:00,840 --> 00:07:09,280
to uh make sure that no user can

00:07:05,199 --> 00:07:12,000
enter uh comments uh

00:07:09,280 --> 00:07:12,880
on their own so that needs to be someone

00:07:12,000 --> 00:07:16,800
approving

00:07:12,880 --> 00:07:18,880
uh sessions uh

00:07:16,800 --> 00:07:20,000
you can even follow what is happening on

00:07:18,880 --> 00:07:23,360
screen

00:07:20,000 --> 00:07:24,160
uh and uh terminate the session uh if

00:07:23,360 --> 00:07:27,199
you see some

00:07:24,160 --> 00:07:29,199
suspicious activity the downside of this

00:07:27,199 --> 00:07:31,440
plugin is that it's developed in rust

00:07:29,199 --> 00:07:33,599
which means that it's it can be

00:07:31,440 --> 00:07:37,919
difficult to compile it and

00:07:33,599 --> 00:07:42,240
even more difficult to distribute it

00:07:37,919 --> 00:07:42,240
let me show you a quick demo of it

00:07:43,039 --> 00:07:47,120
uh on the left hand side uh

00:07:48,080 --> 00:07:54,479
there is a root user logged in

00:07:51,599 --> 00:07:55,280
and uh we will approve or reject

00:07:54,479 --> 00:07:57,440
sessions from

00:07:55,280 --> 00:07:58,479
that window and on the right hand side

00:07:57,440 --> 00:08:02,400
window

00:07:58,479 --> 00:08:06,960
i will run sudo and

00:08:02,400 --> 00:08:10,240
in this case try to run a shell

00:08:06,960 --> 00:08:13,840
i enter my password and you see

00:08:10,240 --> 00:08:15,759
that number two numbers are printed here

00:08:13,840 --> 00:08:16,960
one is the user id another is the

00:08:15,759 --> 00:08:19,120
process id

00:08:16,960 --> 00:08:22,080
and the approval needs to enter these

00:08:19,120 --> 00:08:22,080
two numbers

00:08:22,720 --> 00:08:29,919
and uh we can easily

00:08:26,479 --> 00:08:33,120
reject it and you see

00:08:29,919 --> 00:08:34,800
the user never executed anything even

00:08:33,120 --> 00:08:41,760
with the authentication

00:08:34,800 --> 00:08:46,080
so let's try this again

00:08:41,760 --> 00:08:49,360
this time we approve it and

00:08:46,080 --> 00:08:50,320
as you can see anything i enter on the

00:08:49,360 --> 00:08:53,839
right hand side

00:08:50,320 --> 00:08:58,080
is mirrored on the left hand side

00:08:53,839 --> 00:09:00,640
now let's try to do something

00:08:58,080 --> 00:09:02,240
nasty just delete everything on my

00:09:00,640 --> 00:09:05,920
laptop

00:09:02,240 --> 00:09:09,279
but luckily the guy on the

00:09:05,920 --> 00:09:12,560
left hand side supervising

00:09:09,279 --> 00:09:14,640
this sudo session is aware and quickly

00:09:12,560 --> 00:09:16,880
terminates the session

00:09:14,640 --> 00:09:18,959
now when i hit enter on the right hand

00:09:16,880 --> 00:09:23,120
side

00:09:18,959 --> 00:09:26,080
nothing happens well i can see that

00:09:23,120 --> 00:09:26,399
i'm kicked out from this studio session

00:09:26,080 --> 00:09:30,800
so

00:09:26,399 --> 00:09:34,000
my laptop is my laptop's arrived and i i

00:09:30,800 --> 00:09:34,000
can continue my talk

00:09:34,880 --> 00:09:38,800
let's talk a bit about configuring sudo

00:09:37,440 --> 00:09:42,240
uh the configuration

00:09:38,800 --> 00:09:45,760
itself is a plain text file uh

00:09:42,240 --> 00:09:48,720
at etc sutures on the other hand you

00:09:45,760 --> 00:09:49,200
should edit it using visu as it also

00:09:48,720 --> 00:09:52,399
does

00:09:49,200 --> 00:09:54,560
some syntax tracking for you

00:09:52,399 --> 00:09:57,920
uh if you don't like vi you can change

00:09:54,560 --> 00:09:57,920
it to any other editor

00:10:00,959 --> 00:10:06,640
just be aware that uh syntactically

00:10:04,320 --> 00:10:09,519
correct configuration doesn't mean that

00:10:06,640 --> 00:10:11,680
you can execute anything through sudo so

00:10:09,519 --> 00:10:14,000
when you are experimenting with sudo

00:10:11,680 --> 00:10:14,959
make sure that you have a backdoor i

00:10:14,000 --> 00:10:19,839
mean you know the

00:10:14,959 --> 00:10:19,839
root password yes even ubuntu

00:10:20,000 --> 00:10:25,120
otherwise you have to break your own

00:10:22,800 --> 00:10:25,120
machine

00:10:26,720 --> 00:10:33,519
the sudo reads the configuration

00:10:30,320 --> 00:10:37,920
from the top from top to the bottom and

00:10:33,519 --> 00:10:40,160
uh always the last setting means

00:10:37,920 --> 00:10:41,680
which means that you should start with

00:10:40,160 --> 00:10:45,200
general settings

00:10:41,680 --> 00:10:48,560
and add exceptions at the end of the

00:10:45,200 --> 00:10:50,800
round at the end of the file here is

00:10:48,560 --> 00:10:52,800
a sample configuration you see that

00:10:50,800 --> 00:10:55,440
there are a huge

00:10:52,800 --> 00:10:56,959
set of default statements overriding

00:10:55,440 --> 00:11:00,160
many parameters

00:10:56,959 --> 00:11:02,640
then we have the user route

00:11:00,160 --> 00:11:04,240
and members of the real group can do

00:11:02,640 --> 00:11:09,200
everything

00:11:04,240 --> 00:11:12,720
then we have

00:11:09,200 --> 00:11:13,040
a default statement enabling insults for

00:11:12,720 --> 00:11:16,480
the

00:11:13,040 --> 00:11:18,959
members of the real group and

00:11:16,480 --> 00:11:20,959
disabling inserts for everyone else on

00:11:18,959 --> 00:11:25,279
the last line we

00:11:20,959 --> 00:11:25,279
enable session recording

00:11:26,640 --> 00:11:31,920
well that was a very common mistake on

00:11:28,880 --> 00:11:31,920
the previous slide

00:11:35,920 --> 00:11:42,880
if you take a look at it you will see

00:11:39,760 --> 00:11:45,760
that first we enable inserts

00:11:42,880 --> 00:11:46,959
for the real group but always the last

00:11:45,760 --> 00:11:50,160
setting wins

00:11:46,959 --> 00:11:51,120
and there we disable insults for

00:11:50,160 --> 00:11:52,959
everyone

00:11:51,120 --> 00:11:55,120
which means that if you want insults for

00:11:52,959 --> 00:11:57,680
the wheel group have some

00:11:55,120 --> 00:11:58,560
sysadmin humor then you need to reverse

00:11:57,680 --> 00:12:01,360
the order of

00:11:58,560 --> 00:12:01,360
these two lines

00:12:04,160 --> 00:12:07,920
once you have more than a single machine

00:12:06,160 --> 00:12:10,880
you most likely want to do some central

00:12:07,920 --> 00:12:14,000
management of your configuration

00:12:10,880 --> 00:12:17,920
puppet and silver chef sword whatever

00:12:14,000 --> 00:12:22,560
you want to use supports sudo

00:12:17,920 --> 00:12:22,560
the problem with this is that

00:12:23,200 --> 00:12:26,560
change changes are not done in real time

00:12:25,680 --> 00:12:29,360
and

00:12:26,560 --> 00:12:31,040
users can modify configuration files

00:12:29,360 --> 00:12:34,639
locally

00:12:31,040 --> 00:12:38,320
it can be also be error prone if you

00:12:34,639 --> 00:12:40,560
if your configure something centrally

00:12:38,320 --> 00:12:41,760
which is not yet supported by the

00:12:40,560 --> 00:12:45,680
version of sudo

00:12:41,760 --> 00:12:48,639
you have locally another possibility is

00:12:45,680 --> 00:12:50,160
storing your pseudo configuration in

00:12:48,639 --> 00:12:52,399
ldap

00:12:50,160 --> 00:12:53,200
this has the advantage that settings are

00:12:52,399 --> 00:12:55,680
propagated

00:12:53,200 --> 00:12:57,360
in real time they cannot be modified

00:12:55,680 --> 00:12:59,519
locally on the other hand there are

00:12:57,360 --> 00:13:02,959
quite a few limitations like

00:12:59,519 --> 00:13:06,480
aliases don't work through ldap

00:13:02,959 --> 00:13:08,399
and if you if your network is broken

00:13:06,480 --> 00:13:11,600
and you cannot reach out up you cannot

00:13:08,399 --> 00:13:11,600
use sudo either

00:13:12,800 --> 00:13:17,279
an often overlooked feature of sudo is

00:13:15,519 --> 00:13:21,440
logging and alerting

00:13:17,279 --> 00:13:24,560
itself can create email alerts

00:13:21,440 --> 00:13:27,200
and everything is locked

00:13:24,560 --> 00:13:28,160
to syslog as you do just make sure that

00:13:27,200 --> 00:13:30,480
your

00:13:28,160 --> 00:13:32,639
system messages are collected centrally

00:13:30,480 --> 00:13:35,920
otherwise it's quite easy to

00:13:32,639 --> 00:13:38,160
delete them if you give your users shell

00:13:35,920 --> 00:13:40,390
access

00:13:38,160 --> 00:13:41,760
if you use system genji to collect

00:13:40,390 --> 00:13:44,639
[Music]

00:13:41,760 --> 00:13:45,920
pseudo block messages then these are

00:13:44,639 --> 00:13:50,000
automatic parts

00:13:45,920 --> 00:13:54,720
parsed and you can easily push alerts to

00:13:50,000 --> 00:13:59,519
slack sprung or different cloud services

00:13:54,720 --> 00:13:59,519
for real-time alerting from your system

00:14:00,800 --> 00:14:04,720
if you are lucky you will never have to

00:14:02,480 --> 00:14:07,920
use debug log messages

00:14:04,720 --> 00:14:10,079
these are used to debug rules when

00:14:07,920 --> 00:14:11,199
you don't understand why something

00:14:10,079 --> 00:14:14,839
doesn't work

00:14:11,199 --> 00:14:17,839
and it it is also used to report

00:14:14,839 --> 00:14:17,839
programs

00:14:18,800 --> 00:14:22,800
let me talk a few words about uh system

00:14:21,519 --> 00:14:26,000
g how to create

00:14:22,800 --> 00:14:27,680
an alert r2 slack

00:14:26,000 --> 00:14:29,839
so what is first of all what is syslog

00:14:27,680 --> 00:14:31,680
ng it's an intense logging demand with a

00:14:29,839 --> 00:14:32,800
strong focus and portability and high

00:14:31,680 --> 00:14:35,360
performance central

00:14:32,800 --> 00:14:35,360
collection

00:14:36,560 --> 00:14:41,839
the configuration is simply logical even

00:14:39,760 --> 00:14:43,440
if it doesn't really look so at first

00:14:41,839 --> 00:14:46,560
sight and

00:14:43,440 --> 00:14:49,120
often not even at second side

00:14:46,560 --> 00:14:50,399
it is using a pipeline model there are

00:14:49,120 --> 00:14:53,680
different building blocks

00:14:50,399 --> 00:14:57,680
sources destination filters and so on

00:14:53,680 --> 00:15:01,360
and these building blocks are connected

00:14:57,680 --> 00:15:04,160
together into a pipeline using

00:15:01,360 --> 00:15:04,160
lock statements

00:15:04,480 --> 00:15:12,079
here is how configuration looks like we

00:15:08,079 --> 00:15:16,480
always start with the version number uh

00:15:12,079 --> 00:15:19,920
some general options at the beginning

00:15:16,480 --> 00:15:22,639
then you can see building blocks here uh

00:15:19,920 --> 00:15:23,040
source source collecting local messages

00:15:22,639 --> 00:15:26,160
a

00:15:23,040 --> 00:15:27,760
file destination and a filter typical

00:15:26,160 --> 00:15:29,839
for warlock messages

00:15:27,760 --> 00:15:31,040
and at the bottom of the screen there is

00:15:29,839 --> 00:15:33,600
a lock statement

00:15:31,040 --> 00:15:36,160
connecting all of these building blocks

00:15:33,600 --> 00:15:36,160
together

00:15:36,800 --> 00:15:43,519
next we going to create creating

00:15:40,320 --> 00:15:47,040
an alert from pseudoblocks to

00:15:43,519 --> 00:15:50,800
uh slack

00:15:47,040 --> 00:15:53,600
first we have a filter filtering on

00:15:50,800 --> 00:15:55,360
pseudorocks then we have two

00:15:53,600 --> 00:15:56,320
destinations the first one just for

00:15:55,360 --> 00:16:00,000
debugging

00:15:56,320 --> 00:16:02,639
the second one is sending log messages

00:16:00,000 --> 00:16:02,639
to slack

00:16:06,560 --> 00:16:12,800
and the here we have uh log statement

00:16:09,680 --> 00:16:14,160
note that we don't have uh separate

00:16:12,800 --> 00:16:17,440
parser for studio

00:16:14,160 --> 00:16:18,079
log messages defined as uh system g is

00:16:17,440 --> 00:16:20,639
parsing

00:16:18,079 --> 00:16:22,320
these logs by default and creates name

00:16:20,639 --> 00:16:25,680
value pairs

00:16:22,320 --> 00:16:27,839
from cinderblocks so

00:16:25,680 --> 00:16:28,959
we use the same sources for warlock

00:16:27,839 --> 00:16:32,800
messages

00:16:28,959 --> 00:16:36,639
use the sudo filter and here we have a

00:16:32,800 --> 00:16:41,600
filter matching on my username

00:16:36,639 --> 00:16:43,440
and we send logs the local file and also

00:16:41,600 --> 00:16:46,639
the slack

00:16:43,440 --> 00:16:50,079
and here you can see

00:16:46,639 --> 00:16:53,920
the results all of the commands

00:16:50,079 --> 00:16:57,680
are executed through sudo are

00:16:53,920 --> 00:16:57,680
streamed in real-time dislike

00:16:59,120 --> 00:17:08,160
so what is new in sudo 1.9

00:17:05,839 --> 00:17:09,120
it introduced the recording service so

00:17:08,160 --> 00:17:12,480
the studio can

00:17:09,120 --> 00:17:15,839
collect io locks centrally

00:17:12,480 --> 00:17:19,839
there are two new apis the audit

00:17:15,839 --> 00:17:19,839
plugin and the approver plugin

00:17:20,160 --> 00:17:26,880
you can extend sudo

00:17:23,280 --> 00:17:29,679
plugins written in python and

00:17:26,880 --> 00:17:31,760
you can configure change root and change

00:17:29,679 --> 00:17:35,919
working directory

00:17:31,760 --> 00:17:36,720
for sudo so what is the recording

00:17:35,919 --> 00:17:39,039
service

00:17:36,720 --> 00:17:40,480
uh using the recording service you can

00:17:39,039 --> 00:17:43,120
uh correct io

00:17:40,480 --> 00:17:44,840
centrally what what is irocs practical

00:17:43,120 --> 00:17:48,320
is the same data as in

00:17:44,840 --> 00:17:50,799
session recording so any input and

00:17:48,320 --> 00:17:50,799
output

00:17:52,080 --> 00:17:57,520
from the terminal these log messages can

00:17:55,280 --> 00:18:02,160
be streamed in real time

00:17:57,520 --> 00:18:05,760
to a central lock collector and

00:18:02,160 --> 00:18:08,799
store their security

00:18:05,760 --> 00:18:12,080
why this is important first of all it's

00:18:08,799 --> 00:18:14,240
convenient instead of logging into each

00:18:12,080 --> 00:18:17,600
of your hosts you can

00:18:14,240 --> 00:18:18,240
browse session recordings centrally it

00:18:17,600 --> 00:18:20,880
also means

00:18:18,240 --> 00:18:22,720
availability even if your sending

00:18:20,880 --> 00:18:25,520
machine is down you can

00:18:22,720 --> 00:18:26,880
check your locks what happened and it's

00:18:25,520 --> 00:18:30,000
also security

00:18:26,880 --> 00:18:33,679
as when a machine is hacked

00:18:30,000 --> 00:18:36,799
often the first first thing is removing

00:18:33,679 --> 00:18:39,280
locks including locks from sudo but

00:18:36,799 --> 00:18:40,840
if you have connected your locks

00:18:39,280 --> 00:18:44,080
centrally

00:18:40,840 --> 00:18:47,200
then you can check how

00:18:44,080 --> 00:18:47,200
your machine was held

00:18:52,160 --> 00:18:55,280
the audit plugin is brand new in sudo

00:18:54,240 --> 00:18:57,280
1.9

00:18:55,280 --> 00:18:59,360
it's not a user visible feature meaning

00:18:57,280 --> 00:19:02,000
that you cannot

00:18:59,360 --> 00:19:02,480
configure it from the sudoers file but

00:19:02,000 --> 00:19:07,360
it's an

00:19:02,480 --> 00:19:11,120
api to access any kind of co2 locks

00:19:07,360 --> 00:19:13,970
you can use it to debug

00:19:11,120 --> 00:19:16,400
studio and also

00:19:13,970 --> 00:19:20,480
[Music]

00:19:16,400 --> 00:19:22,000
send locks to other places than syslog

00:19:20,480 --> 00:19:23,760
directly from sudo

00:19:22,000 --> 00:19:27,200
like logging or reacting to

00:19:23,760 --> 00:19:31,840
elasticsearch different cloud providers

00:19:27,200 --> 00:19:34,880
it's very useful from python

00:19:31,840 --> 00:19:38,320
the next one is the audit

00:19:34,880 --> 00:19:41,919
plugin which enables you the

00:19:38,320 --> 00:19:46,160
session approval without uh

00:19:41,919 --> 00:19:50,080
replacing uh the basic policy plugin

00:19:46,160 --> 00:19:53,840
uh using the sudoers file

00:19:50,080 --> 00:19:57,520
uh it these plugins only run

00:19:53,840 --> 00:20:01,440
uh after uh

00:19:57,520 --> 00:20:01,440
the basic policy plugin

00:20:01,520 --> 00:20:07,840
already approved a session

00:20:04,799 --> 00:20:12,650
and you can have uh

00:20:07,840 --> 00:20:14,720
eight different approval plugins

00:20:12,650 --> 00:20:19,280
[Music]

00:20:14,720 --> 00:20:19,280
as with the

00:20:19,440 --> 00:20:25,039
looking uh api uh it

00:20:22,559 --> 00:20:26,320
it can be used from python and you can

00:20:25,039 --> 00:20:29,360
easily connect

00:20:26,320 --> 00:20:31,760
sudo with ticketing system for example

00:20:29,360 --> 00:20:33,120
error session only when there is an open

00:20:31,760 --> 00:20:36,559
ticket for it

00:20:33,120 --> 00:20:40,720
or limit access to sudo

00:20:36,559 --> 00:20:40,720
to working hours or working days

00:20:43,919 --> 00:20:48,000
i already mentioned python support a

00:20:46,159 --> 00:20:50,799
couple of times

00:20:48,000 --> 00:20:52,960
it means that you can extend sudo using

00:20:50,799 --> 00:20:56,080
python scripts

00:20:52,960 --> 00:20:59,440
it is using the very same apis as the

00:20:56,080 --> 00:21:00,799
c plugins on the other hand there is no

00:20:59,440 --> 00:21:04,480
need for a dedicated

00:21:00,799 --> 00:21:08,960
development environment or compiling

00:21:04,480 --> 00:21:12,400
plugins and the development is often

00:21:08,960 --> 00:21:16,640
a lot quicker and you can

00:21:12,400 --> 00:21:19,360
easily distribute the

00:21:16,640 --> 00:21:23,280
these python scripts using your

00:21:19,360 --> 00:21:23,280
configuration management applications

00:21:25,120 --> 00:21:31,039
i will show you a couple of python

00:21:27,840 --> 00:21:34,640
scripts here

00:21:31,039 --> 00:21:37,600
the different apis scripts and

00:21:34,640 --> 00:21:37,919
how they work and i will give them one

00:21:37,600 --> 00:21:42,559
of

00:21:37,919 --> 00:21:45,600
those the policy plugin of sudo

00:21:42,559 --> 00:21:48,960
decides who can do what in a system only

00:21:45,600 --> 00:21:52,799
one of these policy plugins

00:21:48,960 --> 00:21:55,919
is allowed the default uh

00:21:52,799 --> 00:21:57,280
plugin is using is the one implementing

00:21:55,919 --> 00:21:59,760
the simpler's file

00:21:57,280 --> 00:22:01,600
so it's quite an important one but still

00:21:59,760 --> 00:22:05,280
you can replace it with your

00:22:01,600 --> 00:22:12,880
own code just make sure that you have

00:22:05,280 --> 00:22:17,039
other means to access your machines

00:22:12,880 --> 00:22:20,159
the policy on the next slide is

00:22:17,039 --> 00:22:23,280
very simple only the command id is

00:22:20,159 --> 00:22:26,400
allowed and nothing else

00:22:23,280 --> 00:22:29,840
here is the code as you can see

00:22:26,400 --> 00:22:33,679
we started by importing sudo it's

00:22:29,840 --> 00:22:37,039
not a module on your hard drive

00:22:33,679 --> 00:22:41,840
but something implemented within the

00:22:37,039 --> 00:22:41,840
python plugin of sudo

00:22:41,919 --> 00:22:48,400
and there is

00:22:45,039 --> 00:22:51,440
a mandatory method called

00:22:48,400 --> 00:22:55,120
check policy and here

00:22:51,440 --> 00:22:58,320
within this we check if

00:22:55,120 --> 00:22:59,120
the name of the command is different

00:22:58,320 --> 00:23:02,159
from id

00:22:59,120 --> 00:23:05,280
if it's different then we

00:23:02,159 --> 00:23:08,640
create an error message and reject the

00:23:05,280 --> 00:23:11,840
student session otherwise

00:23:08,640 --> 00:23:14,799
we prepare the environment and

00:23:11,840 --> 00:23:15,120
the need this will do so the application

00:23:14,799 --> 00:23:19,760
can

00:23:15,120 --> 00:23:23,600
run here is a screenshot of this

00:23:19,760 --> 00:23:26,720
studio alas returns with the

00:23:23,600 --> 00:23:28,490
with the error message we just defined

00:23:26,720 --> 00:23:30,400
uh studio id

00:23:28,490 --> 00:23:33,360
[Music]

00:23:30,400 --> 00:23:34,840
shows you that it's running with proper

00:23:33,360 --> 00:23:37,840
to click the

00:23:34,840 --> 00:23:37,840
privileges

00:23:39,910 --> 00:23:45,360
[Music]

00:23:41,679 --> 00:23:46,640
the io locks api gives you access to

00:23:45,360 --> 00:23:50,159
input and output

00:23:46,640 --> 00:23:52,320
from user sessions

00:23:50,159 --> 00:23:53,200
i will show you a couple of python

00:23:52,320 --> 00:23:57,120
examples

00:23:53,200 --> 00:24:00,159
uh the first one uh breaks a connection

00:23:57,120 --> 00:24:03,679
if a given text appears on screen the

00:24:00,159 --> 00:24:06,880
next one uh if

00:24:03,679 --> 00:24:10,000
error minus f fr is uh

00:24:06,880 --> 00:24:10,960
appearing on the command line and uh the

00:24:10,000 --> 00:24:13,679
last plus one

00:24:10,960 --> 00:24:16,159
is asking uh for the reason of the

00:24:13,679 --> 00:24:16,159
session

00:24:16,480 --> 00:24:23,200
of course all of these examples are

00:24:19,679 --> 00:24:26,559
just to show you

00:24:23,200 --> 00:24:27,919
what is possible but no not production

00:24:26,559 --> 00:24:30,720
ready code

00:24:27,919 --> 00:24:30,720
you can easily

00:24:31,039 --> 00:24:39,200
work around these cards and

00:24:34,640 --> 00:24:42,080
so it's not foolproof it's just

00:24:39,200 --> 00:24:42,080
proof of concept

00:24:44,240 --> 00:24:52,240
the first example is the simplest

00:24:48,960 --> 00:24:54,960
uh all it does is checking if uh

00:24:52,240 --> 00:24:56,000
the text my secret appears uh on the

00:24:54,960 --> 00:24:59,440
screen

00:24:56,000 --> 00:25:02,240
and in this in this case

00:24:59,440 --> 00:25:02,559
session is broken with an error message

00:25:02,240 --> 00:25:05,760
that

00:25:02,559 --> 00:25:05,760
don't look at my secret

00:25:05,919 --> 00:25:11,840
let me show you how it works uh

00:25:09,919 --> 00:25:13,919
on the left hand side i'm logged in as

00:25:11,840 --> 00:25:16,480
root and

00:25:13,919 --> 00:25:17,200
there is a directory called do not enter

00:25:16,480 --> 00:25:21,280
which has

00:25:17,200 --> 00:25:22,799
a single file in it called my secret

00:25:21,280 --> 00:25:25,919
[Music]

00:25:22,799 --> 00:25:30,640
now i switch to the right hand side

00:25:25,919 --> 00:25:34,159
and start sudo with the shell

00:25:30,640 --> 00:25:34,159
i enter my password

00:25:41,360 --> 00:25:48,799
then i change to the root directory

00:25:45,120 --> 00:25:50,240
listed oh and there is a directory do

00:25:48,799 --> 00:25:54,840
not enter it must be

00:25:50,240 --> 00:25:56,400
pretty interesting let's check what's in

00:25:54,840 --> 00:26:00,240
it

00:25:56,400 --> 00:26:03,919
but even before

00:26:00,240 --> 00:26:06,000
my secret could appear on my screen the

00:26:03,919 --> 00:26:07,279
pseudo-detected the python script

00:26:06,000 --> 00:26:12,720
detected

00:26:07,279 --> 00:26:12,720
the text below the sudo session

00:26:15,679 --> 00:26:21,760
the next example is a bit more complex

00:26:19,360 --> 00:26:22,480
it's trying to reproduce what the user

00:26:21,760 --> 00:26:25,520
is typing

00:26:22,480 --> 00:26:29,279
on the command line and

00:26:25,520 --> 00:26:33,520
break the session if reminds fr is

00:26:29,279 --> 00:26:36,880
typed on screen of course if you

00:26:33,520 --> 00:26:38,799
enter an extra space or reverse the

00:26:36,880 --> 00:26:41,600
order of options or whatever

00:26:38,799 --> 00:26:43,360
it's easy to work it around it's nothing

00:26:41,600 --> 00:26:46,960
foolproof

00:26:43,360 --> 00:26:52,799
it just to show you that such a thing is

00:26:46,960 --> 00:26:57,200
possible and here is how it looks

00:26:52,799 --> 00:27:01,039
when you try it you start sudo

00:26:57,200 --> 00:27:03,760
then start entering rm minus fr

00:27:01,039 --> 00:27:04,799
but before r could be displayed on

00:27:03,760 --> 00:27:09,120
screen

00:27:04,799 --> 00:27:09,120
the session is broken

00:27:09,200 --> 00:27:15,760
the last iraq's example uh

00:27:12,240 --> 00:27:21,120
is a conversation with the user

00:27:15,760 --> 00:27:24,480
it is asking the reason why

00:27:21,120 --> 00:27:24,480
recession is started

00:27:27,440 --> 00:27:32,960
there are multiple possibilities how it

00:27:30,559 --> 00:27:32,960
works

00:27:33,440 --> 00:27:36,640
you can echo back on screen what this

00:27:35,840 --> 00:27:39,760
types but

00:27:36,640 --> 00:27:42,320
uh if you want to keep the reason

00:27:39,760 --> 00:27:44,320
in secret uh for example someone is

00:27:42,320 --> 00:27:47,039
standing behind you

00:27:44,320 --> 00:27:48,720
but you still want to explain why you

00:27:47,039 --> 00:27:51,120
are running this

00:27:48,720 --> 00:27:51,910
[Music]

00:27:51,120 --> 00:27:55,009
you can

00:27:51,910 --> 00:27:55,009
[Music]

00:27:55,200 --> 00:27:58,640
enter a secret reason which is messed as

00:27:58,159 --> 00:28:01,440
you see

00:27:58,640 --> 00:28:02,480
on this screen so here is a public

00:28:01,440 --> 00:28:07,200
reason

00:28:02,480 --> 00:28:07,200
and this one is not shown screen

00:28:10,240 --> 00:28:17,039
the last api is the group plugin api

00:28:13,840 --> 00:28:21,760
it allows to do

00:28:17,039 --> 00:28:26,799
non-unix group recaps this way

00:28:21,760 --> 00:28:26,799
for example you can integrate

00:28:27,600 --> 00:28:33,520
sudo with active directory

00:28:31,279 --> 00:28:33,520
or

00:28:34,720 --> 00:28:38,880
just a simple workaround

00:28:39,600 --> 00:28:44,880
the policy plugin and extend it with an

00:28:42,799 --> 00:28:48,320
additional check but this is something

00:28:44,880 --> 00:28:48,640
inside the policy plugin and not after

00:28:48,320 --> 00:28:52,399
that

00:28:48,640 --> 00:28:55,760
like the approval plugin here it's a

00:28:52,399 --> 00:28:58,640
simple python example that no

00:28:55,760 --> 00:28:59,360
password is used if the user is part of

00:28:58,640 --> 00:29:02,880
my

00:28:59,360 --> 00:29:06,000
the group called my group here is

00:29:02,880 --> 00:29:08,960
how we call it from the suitors file

00:29:06,000 --> 00:29:11,279
that we are using the python plugin we

00:29:08,960 --> 00:29:11,279
use

00:29:11,679 --> 00:29:16,000
this uh python

00:29:14,290 --> 00:29:19,840
[Music]

00:29:16,000 --> 00:29:23,279
script and we call this

00:29:19,840 --> 00:29:26,960
class we use this class

00:29:23,279 --> 00:29:29,440
and uh here

00:29:26,960 --> 00:29:30,080
we see on the last line that members of

00:29:29,440 --> 00:29:34,480
the

00:29:30,080 --> 00:29:39,360
of my group don't have to use a password

00:29:34,480 --> 00:29:42,880
and here is a very simple python example

00:29:39,360 --> 00:29:44,640
with my username hardcoded as member of

00:29:42,880 --> 00:29:47,360
my group

00:29:44,640 --> 00:29:48,480
so i can use i can run comments without

00:29:47,360 --> 00:29:55,120
a password

00:29:48,480 --> 00:30:00,080
but anybody else needs to use a password

00:29:55,120 --> 00:30:00,080
uh the last uh

00:30:00,880 --> 00:30:08,880
release of uh python

00:30:04,720 --> 00:30:11,679
of sudo 1.9 was made developer

00:30:08,880 --> 00:30:13,279
just two weeks ago and it added support

00:30:11,679 --> 00:30:14,960
for change root and change working

00:30:13,279 --> 00:30:17,919
directory

00:30:14,960 --> 00:30:20,159
it means that you can give your users

00:30:17,919 --> 00:30:23,279
change root access without

00:30:20,159 --> 00:30:26,480
handing out full root access

00:30:23,279 --> 00:30:27,520
and uh changing the working directory

00:30:26,480 --> 00:30:31,520
can also can

00:30:27,520 --> 00:30:34,080
come handy like uh

00:30:31,520 --> 00:30:36,640
some applications are checking from

00:30:34,080 --> 00:30:40,080
which directory you are starting it

00:30:36,640 --> 00:30:44,370
and this way you can

00:30:40,080 --> 00:30:46,480
change even to a secular directory

00:30:44,370 --> 00:30:51,840
[Music]

00:30:46,480 --> 00:30:51,840
without giving shall access to the user

00:30:54,000 --> 00:30:57,600
both of these options need to be enabled

00:30:56,640 --> 00:31:01,279
enabled

00:30:57,600 --> 00:31:03,039
explicitly in the configuration file

00:31:01,279 --> 00:31:05,600
and there are multiple possibilities

00:31:03,039 --> 00:31:08,880
here either you can

00:31:05,600 --> 00:31:12,399
hard code the directory name in the

00:31:08,880 --> 00:31:17,440
uh sid vars file in this case it's used

00:31:12,399 --> 00:31:17,440
each and every time when

00:31:17,519 --> 00:31:23,440
the user is running sudo or you can make

00:31:20,240 --> 00:31:25,360
it configurable by the user

00:31:23,440 --> 00:31:27,360
peter before you move on here there's a

00:31:25,360 --> 00:31:28,480
question is there a way to do this

00:31:27,360 --> 00:31:33,600
without needing to be

00:31:28,480 --> 00:31:33,600
root uh change route

00:31:33,919 --> 00:31:38,080
okay i'm just reading from the q a there

00:31:36,799 --> 00:31:39,679
that uh someone who's

00:31:38,080 --> 00:31:41,360
saying is there a way to do it without

00:31:39,679 --> 00:31:44,460
root

00:31:41,360 --> 00:31:47,670
yes you don't have to be rude uh to

00:31:44,460 --> 00:31:47,670
[Music]

00:31:50,880 --> 00:31:55,919
okay good and then larry goetz had a

00:31:54,240 --> 00:31:56,799
question earlier that i missed about

00:31:55,919 --> 00:31:58,799
five minutes ago

00:31:56,799 --> 00:32:00,000
is this process outlined somewhere

00:31:58,799 --> 00:32:03,440
online if

00:32:00,000 --> 00:32:05,519
so where larry if i missed uh context

00:32:03,440 --> 00:32:08,559
there you can ask a question again

00:32:05,519 --> 00:32:13,279
uh actually this is almost the last

00:32:08,559 --> 00:32:13,279
last slide of from my presentation so

00:32:13,440 --> 00:32:17,039
i think i i i should i try to finish it

00:32:16,720 --> 00:32:19,519
up

00:32:17,039 --> 00:32:20,720
and then return to the question in just

00:32:19,519 --> 00:32:23,519
about one minute

00:32:20,720 --> 00:32:23,519
all right sounds good

00:32:24,880 --> 00:32:31,600
so as you could see from my talk uh sue

00:32:28,000 --> 00:32:35,600
is a lot more than just a prefix

00:32:31,600 --> 00:32:38,720
even 1.8 had many advanced features like

00:32:35,600 --> 00:32:42,039
digest verification session recording

00:32:38,720 --> 00:32:43,519
ldap based configuration and plugins and

00:32:42,039 --> 00:32:46,720
1.1.9

00:32:43,519 --> 00:32:48,240
i did a couple of more apis central

00:32:46,720 --> 00:32:51,679
session recording

00:32:48,240 --> 00:32:54,960
and my absolute favorite is

00:32:51,679 --> 00:32:54,960
python plugin support

00:32:55,760 --> 00:33:01,519
and uh here we are uh

00:32:58,960 --> 00:33:01,519
questions

00:33:04,080 --> 00:33:07,760
all right great thank you we still have

00:33:06,960 --> 00:33:09,919
uh

00:33:07,760 --> 00:33:11,919
a couple more minutes here if you have

00:33:09,919 --> 00:33:13,600
questions

00:33:11,919 --> 00:33:14,960
and you have access to your mic you're

00:33:13,600 --> 00:33:16,880
welcome to use your mic

00:33:14,960 --> 00:33:18,799
now i'm not sure how the system is set

00:33:16,880 --> 00:33:20,480
up here but if you'd like to ask

00:33:18,799 --> 00:33:23,039
questions you can

00:33:20,480 --> 00:33:24,000
and then we have the question in the q

00:33:23,039 --> 00:33:26,799
and a peter it says

00:33:24,000 --> 00:33:27,919
to clarify all of the authentications

00:33:26,799 --> 00:33:30,799
for pseudo were done

00:33:27,919 --> 00:33:32,960
from the root user so is there a way to

00:33:30,799 --> 00:33:33,600
do the authentications without being

00:33:32,960 --> 00:33:36,640
root

00:33:33,600 --> 00:33:40,240
oh this is uh

00:33:36,640 --> 00:33:40,240
this is for the uh

00:33:40,320 --> 00:33:48,480
sudopers plugin which i showed you okay

00:33:43,679 --> 00:33:48,480
uh i guess at least i guess so uh

00:33:48,960 --> 00:33:52,159
i haven't tested it

00:33:52,320 --> 00:33:55,600
as far as i can remember from the

00:33:54,399 --> 00:34:00,640
documentation

00:33:55,600 --> 00:34:00,640
it is possible but yes i uh

00:34:00,720 --> 00:34:05,200
i used root as that was the easiest to

00:34:03,200 --> 00:34:08,960
set up

00:34:05,200 --> 00:34:11,760
as otherwise uh uh it's using a

00:34:08,960 --> 00:34:13,760
control circuit and one needs to set up

00:34:11,760 --> 00:34:17,359
permissions on the socket

00:34:13,760 --> 00:34:21,040
uh otherwise so it was easier for me to

00:34:17,359 --> 00:34:23,679
do the authentication as uh true great

00:34:21,040 --> 00:34:25,200
stephen madrid i uh unmuted you if you'd

00:34:23,679 --> 00:34:28,320
like to unmute you might you

00:34:25,200 --> 00:34:28,320
you can ask your question

00:34:30,960 --> 00:34:37,280
stephen i see that you had asked to be

00:34:34,000 --> 00:34:40,879
unmuted i guess i missed that

00:34:37,280 --> 00:34:45,200
okay so

00:34:40,879 --> 00:34:49,839
just to clarify then peter

00:34:45,200 --> 00:34:51,440
when is uh can you show your last slide

00:34:49,839 --> 00:34:53,520
again just to sit up there because it's

00:34:51,440 --> 00:34:56,320
got resources on it to point to right

00:34:53,520 --> 00:34:56,320
so they can yes

00:34:59,040 --> 00:35:03,760
sal welcome i see you came in there good

00:35:01,119 --> 00:35:06,240
to see you

00:35:03,760 --> 00:35:07,040
here you go there we go so people can

00:35:06,240 --> 00:35:09,280
see that

00:35:07,040 --> 00:35:10,160
i think that's important if you want to

00:35:09,280 --> 00:35:12,800
take a shot

00:35:10,160 --> 00:35:13,599
at what peter was talking about peter as

00:35:12,800 --> 00:35:16,960
you're thinking

00:35:13,599 --> 00:35:18,960
back over this presentation

00:35:16,960 --> 00:35:21,040
what would you like most of all for

00:35:18,960 --> 00:35:22,880
people to take away what was your whole

00:35:21,040 --> 00:35:24,830
concept of why you wanted them to see

00:35:22,880 --> 00:35:26,720
this

00:35:24,830 --> 00:35:30,320
[Music]

00:35:26,720 --> 00:35:32,720
because what i often uh see

00:35:30,320 --> 00:35:33,599
uh that people are not not aware of the

00:35:32,720 --> 00:35:37,839
possibilities

00:35:33,599 --> 00:35:41,520
uh and uh

00:35:37,839 --> 00:35:45,359
did most users just seeing sudo as

00:35:41,520 --> 00:35:49,040
yes i entered sudo before i

00:35:45,359 --> 00:35:52,160
can do something administrative but

00:35:49,040 --> 00:35:52,720
don't see how much it can help you to

00:35:52,160 --> 00:35:56,240
debug

00:35:52,720 --> 00:35:58,720
what is happening actually on your hosts

00:35:56,240 --> 00:35:59,920
that sudo is logging everything that you

00:35:58,720 --> 00:36:02,880
can

00:35:59,920 --> 00:36:04,640
that giving shell access to the user is

00:36:02,880 --> 00:36:07,280
not a black hole but you can actually

00:36:04,640 --> 00:36:13,040
monitor what is happening inside

00:36:07,280 --> 00:36:16,480
and uh with sudo 1.9

00:36:13,040 --> 00:36:18,640
and you can collect this

00:36:16,480 --> 00:36:21,119
session recordings century which gives

00:36:18,640 --> 00:36:25,520
you additional security

00:36:21,119 --> 00:36:28,560
and uh even if i'm not a programmer

00:36:25,520 --> 00:36:31,440
my absolute favorite is uh

00:36:28,560 --> 00:36:32,880
that simply can be extended using python

00:36:31,440 --> 00:36:35,920
which means that

00:36:32,880 --> 00:36:38,880
uh you can easily

00:36:35,920 --> 00:36:41,280
add logic which was pretty previously

00:36:38,880 --> 00:36:44,720
impossible

00:36:41,280 --> 00:36:48,240
like checking what is on

00:36:44,720 --> 00:36:52,160
screen and implement

00:36:48,240 --> 00:36:55,040
data leak prevention or

00:36:52,160 --> 00:36:57,920
analyze the commands executed by users

00:36:55,040 --> 00:36:57,920
inside the shell

00:36:58,000 --> 00:37:01,440
okay so lots more possibilities than

00:37:00,240 --> 00:37:04,800
previously

00:37:01,440 --> 00:37:06,400
yeah uh larry getz has a question larry

00:37:04,800 --> 00:37:10,400
you have the microphone

00:37:06,400 --> 00:37:12,320
yes thank you uh hello peter

00:37:10,400 --> 00:37:13,760
uh my question was about the

00:37:12,320 --> 00:37:17,680
documentation

00:37:13,760 --> 00:37:19,520
or about this process i'm assuming

00:37:17,680 --> 00:37:21,599
and i'm just looking for clarification

00:37:19,520 --> 00:37:22,079
it'll be at that website that's on this

00:37:21,599 --> 00:37:26,560
slide

00:37:22,079 --> 00:37:28,570
here uh the 3d documentation is here

00:37:26,560 --> 00:37:31,040
uh for this

00:37:28,570 --> 00:37:32,880
[Music]

00:37:31,040 --> 00:37:35,280
pseudo perspective that's something

00:37:32,880 --> 00:37:38,720
completely third party it's

00:37:35,280 --> 00:37:43,440
not done by the sudo developers

00:37:38,720 --> 00:37:46,560
uh i can dig you uh

00:37:43,440 --> 00:37:49,839
the url in a few minutes

00:37:46,560 --> 00:37:51,760
right off my right after my talk well

00:37:49,839 --> 00:37:54,000
i'll shoot you an email just to make

00:37:51,760 --> 00:37:56,000
sure i can get it um

00:37:54,000 --> 00:37:58,079
stay in touch with you because this this

00:37:56,000 --> 00:38:01,359
seems like a way of

00:37:58,079 --> 00:38:02,160
limiting uh p people from coming in and

00:38:01,359 --> 00:38:06,480
acquiring

00:38:02,160 --> 00:38:10,079
root or acquiring a pseudo account

00:38:06,480 --> 00:38:12,320
to be able to go deeper and

00:38:10,079 --> 00:38:13,680
outside the parameters of what they

00:38:12,320 --> 00:38:15,839
should be able to do

00:38:13,680 --> 00:38:17,040
so yes this is something that seems a

00:38:15,839 --> 00:38:20,800
little interesting with

00:38:17,040 --> 00:38:20,800
a script of that sort thank you

00:38:21,200 --> 00:38:27,359
all right let's see uh anybody else with

00:38:25,440 --> 00:38:29,839
questions you can either use the q a

00:38:27,359 --> 00:38:33,760
panel or just request the microphone and

00:38:29,839 --> 00:38:37,359
i'll hand it over to you

00:38:33,760 --> 00:38:39,920
and other than that peter thanks so much

00:38:37,359 --> 00:38:40,880
i appreciate you spending the time with

00:38:39,920 --> 00:38:44,240
us

00:38:40,880 --> 00:38:47,280
let's make sure that the people

00:38:44,240 --> 00:38:48,960
get that pseudo.ws url

00:38:47,280 --> 00:38:51,440
so that they can only go and check it

00:38:48,960 --> 00:38:53,839
out and that'll be it

00:38:51,440 --> 00:39:01,760
peter thank you so much appreciate it

00:38:53,839 --> 00:39:01,760

YouTube URL: https://www.youtube.com/watch?v=QM8QFe6QGL0


