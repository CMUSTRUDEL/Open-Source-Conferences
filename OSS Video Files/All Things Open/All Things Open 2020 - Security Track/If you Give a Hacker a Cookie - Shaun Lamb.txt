Title: If you Give a Hacker a Cookie - Shaun Lamb
Publication date: 2020-12-10
Playlist: All Things Open 2020 - Security Track
Description: 
	Presented by: Shaun Lamb, SAS Institute
Presented at All Things Open 2020 - Security Track

Abstract: If you give a hacker a cookie… He’s going to inspect the cookie with a tool like OWASP ZAP.  When he’s found a persistent session cookie, he might notice the SameSite or HttpOnly attributes are missing.  So he will probably run a dynamic security scan using ZAP to find a cross site scripting vulnerability on a page that uses the vulnerable cookie.  When the scanner finds a reflected XSS, he’ll want to execute a session hijacking attack to steal the sensitive information in the persistent cookie.  He might send phishing emails containing the vulnerable URL which would execute Javascript in the user’s browser and send sensitive information back to the hacker.  He might get carried away and brag about his exploit on social media thus damaging the reputation of the company.  He’ll post the YouTube video of his exploit and stand back to look at it.  While looking at YouTube he’ll end up watching a funny video of a cat falling asleep while drinking milk which will remind him that he’s thirsty.  So… he’ll want a glass of milk.  And chances are while he drinks a glass of milk, he’s going to want a cookie to go with it.     

This session will cover:
- An introduction to OIDC, Oauth and JWTs in the context of a microservices based architecture
- A comparison of a traditional cookie-based authentication approach vs a modern JWT based design
- Open Source OWASP Tools such as the API Security Guide, Cheat Sheets, and Testing Tools
- Role of an API Gateway when using Cloud based Identity Providers
Captions: 
	00:00:06,480 --> 00:00:09,519
you're

00:00:06,960 --> 00:00:11,120
looking good okay thank you all right so

00:00:09,519 --> 00:00:13,040
i'm going to talk today about

00:00:11,120 --> 00:00:14,880
authentication authorization and web

00:00:13,040 --> 00:00:16,640
applications there's a pretty

00:00:14,880 --> 00:00:18,880
broad spectrum of topics that i'm going

00:00:16,640 --> 00:00:20,480
to to go over today so not just

00:00:18,880 --> 00:00:22,640
security i know this is the security

00:00:20,480 --> 00:00:24,960
track but i'll also talk quite a bit

00:00:22,640 --> 00:00:26,400
about identity management

00:00:24,960 --> 00:00:28,320
i'll show some code so for some

00:00:26,400 --> 00:00:29,760
developers that are that are attending i

00:00:28,320 --> 00:00:31,679
think you'll you'll like maybe the code

00:00:29,760 --> 00:00:33,440
snippets that i'm going to show

00:00:31,679 --> 00:00:35,040
uh as well so hopefully we've got a

00:00:33,440 --> 00:00:37,280
little something for everyone

00:00:35,040 --> 00:00:39,440
including some some comparisons of

00:00:37,280 --> 00:00:40,960
application architecture

00:00:39,440 --> 00:00:43,040
i'll start off and this is meant to be

00:00:40,960 --> 00:00:44,640
an introductory uh talk so i'll start

00:00:43,040 --> 00:00:45,680
off with just the basics about cookie

00:00:44,640 --> 00:00:47,440
security

00:00:45,680 --> 00:00:49,680
some basics about application

00:00:47,440 --> 00:00:51,760
vulnerabilities and web applications

00:00:49,680 --> 00:00:53,760
as they relate to to cookies and

00:00:51,760 --> 00:00:55,680
authentication and authorization

00:00:53,760 --> 00:00:57,840
i'll talk about some open source

00:00:55,680 --> 00:00:58,719
projects oasis app and some of the cheat

00:00:57,840 --> 00:01:00,160
sheets

00:00:58,719 --> 00:01:02,160
and then i'm going to get into a history

00:01:00,160 --> 00:01:04,720
of identity solutions so we'll start way

00:01:02,160 --> 00:01:06,880
back in the 90s with with the wham's

00:01:04,720 --> 00:01:08,560
web access management and talk about

00:01:06,880 --> 00:01:09,439
saml and oidc

00:01:08,560 --> 00:01:11,840
and then we'll go through the

00:01:09,439 --> 00:01:12,640
terminology and concepts associated with

00:01:11,840 --> 00:01:14,960
oauth

00:01:12,640 --> 00:01:16,080
and json web tokens i think for anybody

00:01:14,960 --> 00:01:19,040
who is new

00:01:16,080 --> 00:01:21,200
to jwts and oauth it can be scary at

00:01:19,040 --> 00:01:23,759
first in part because of there's so much

00:01:21,200 --> 00:01:25,280
terminology associated with it but we'll

00:01:23,759 --> 00:01:27,040
i'll bring up those code snippets that i

00:01:25,280 --> 00:01:28,720
mentioned and hopefully show that

00:01:27,040 --> 00:01:30,640
there really isn't that much coding

00:01:28,720 --> 00:01:31,119
involved just a lot of to learn in terms

00:01:30,640 --> 00:01:34,159
of

00:01:31,119 --> 00:01:36,640
of concepts and terminology

00:01:34,159 --> 00:01:39,040
we'll get into architectures we'll talk

00:01:36,640 --> 00:01:39,439
about modern architectures microservices

00:01:39,040 --> 00:01:42,079
based

00:01:39,439 --> 00:01:44,159
architectures specifically uh we'll

00:01:42,079 --> 00:01:45,840
we'll go through some of the oauth api

00:01:44,159 --> 00:01:47,439
security top 10

00:01:45,840 --> 00:01:50,399
and talk about our back so we want to

00:01:47,439 --> 00:01:52,720
talk about role-based access control

00:01:50,399 --> 00:01:54,560
as it relates to mitigating some of

00:01:52,720 --> 00:01:57,360
those api security top 10

00:01:54,560 --> 00:01:59,280
issues and after going through those

00:01:57,360 --> 00:02:01,280
concepts and the terminology then we're

00:01:59,280 --> 00:02:03,200
going to get into the

00:02:01,280 --> 00:02:04,399
actual patterns so we'll get into real

00:02:03,200 --> 00:02:07,200
life approaches

00:02:04,399 --> 00:02:08,319
with with implementing oidc and using

00:02:07,200 --> 00:02:10,000
jwts

00:02:08,319 --> 00:02:11,520
we'll talk about four different patterns

00:02:10,000 --> 00:02:17,120
or approaches

00:02:11,520 --> 00:02:17,120
for for using oidc and jwts

00:02:17,280 --> 00:02:20,319
all right in the year of covid and

00:02:18,640 --> 00:02:22,000
coronavirus i've decided to take a

00:02:20,319 --> 00:02:23,760
lighthearted approach with this

00:02:22,000 --> 00:02:25,520
talk as you may have noticed from the

00:02:23,760 --> 00:02:26,879
abstract that i wrote up i feel like we

00:02:25,520 --> 00:02:29,920
could all use a little bit of

00:02:26,879 --> 00:02:31,280
humor these days you may not know the

00:02:29,920 --> 00:02:34,080
cookie monster is actually

00:02:31,280 --> 00:02:36,239
a notorious cyber criminal it's not just

00:02:34,080 --> 00:02:38,560
the chocolate chip cookies that he loves

00:02:36,239 --> 00:02:41,360
he loves the browser cookies as well so

00:02:38,560 --> 00:02:43,920
he he loves to perform session hijacking

00:02:41,360 --> 00:02:45,440
and other types of attacks so i'm going

00:02:43,920 --> 00:02:47,200
to start off the cookie section just

00:02:45,440 --> 00:02:48,319
talking about vulnerabilities related to

00:02:47,200 --> 00:02:50,959
cookie handling

00:02:48,319 --> 00:02:52,959
we'll talk about uh session session

00:02:50,959 --> 00:02:55,440
fixation session writing

00:02:52,959 --> 00:02:56,560
session uh session hacking as well so

00:02:55,440 --> 00:02:58,480
we'll get into some of these different

00:02:56,560 --> 00:03:00,159
vulnerabilities cross-site scripting

00:02:58,480 --> 00:03:02,000
cross-site request forgery things like

00:03:00,159 --> 00:03:04,480
that and then we'll go into the details

00:03:02,000 --> 00:03:06,480
about the types of cookies so

00:03:04,480 --> 00:03:08,159
long-lived cookies persistent cookies

00:03:06,480 --> 00:03:09,360
session cookies

00:03:08,159 --> 00:03:11,360
i'll explain what it means if it's a

00:03:09,360 --> 00:03:12,879
wild card or a global cookie and then

00:03:11,360 --> 00:03:14,720
we'll look at each one of the cookie

00:03:12,879 --> 00:03:17,599
attributes and talk about why they are

00:03:14,720 --> 00:03:19,519
important i'll end this section talking

00:03:17,599 --> 00:03:22,480
about mitigation options

00:03:19,519 --> 00:03:23,760
and then we'll get into then we'll get

00:03:22,480 --> 00:03:25,840
into the oauth and jwt

00:03:23,760 --> 00:03:27,040
section and talk about alternatives

00:03:25,840 --> 00:03:31,519
where there are no cookies

00:03:27,040 --> 00:03:32,720
involved so just to start off here

00:03:31,519 --> 00:03:34,640
we're going to talk about cross-site

00:03:32,720 --> 00:03:37,120
scripting in the bottom right

00:03:34,640 --> 00:03:39,680
you should be able to to see the chrome

00:03:37,120 --> 00:03:41,680
browser where we're examining a cookie

00:03:39,680 --> 00:03:44,080
and you can see that there are certain

00:03:41,680 --> 00:03:46,640
attributes where there are no values so

00:03:44,080 --> 00:03:48,400
for the http only attribute for that

00:03:46,640 --> 00:03:50,080
cookie or the secure attribute or the

00:03:48,400 --> 00:03:51,680
same site attribute those are empty

00:03:50,080 --> 00:03:53,760
meaning they are not set they do not

00:03:51,680 --> 00:03:55,280
have a value

00:03:53,760 --> 00:03:57,040
also about this cookie you can see that

00:03:55,280 --> 00:04:00,879
there is a long lived expiration

00:03:57,040 --> 00:04:02,879
so it is a month out long-lived cookie

00:04:00,879 --> 00:04:04,480
which is not not a good sign so there's

00:04:02,879 --> 00:04:06,000
a lot of things wrong with this cookie

00:04:04,480 --> 00:04:08,159
the one thing that looks good though is

00:04:06,000 --> 00:04:09,760
that there is a sub domain set so if you

00:04:08,159 --> 00:04:10,640
look at the browser bar you'll see that

00:04:09,760 --> 00:04:14,640
i have

00:04:10,640 --> 00:04:16,479
a sub domain that that matches the uh

00:04:14,640 --> 00:04:18,160
that matches the domain of the cookie as

00:04:16,479 --> 00:04:19,600
well and so the reason that's important

00:04:18,160 --> 00:04:21,280
we don't want the cookie to be set

00:04:19,600 --> 00:04:24,000
sent to every single application that's

00:04:21,280 --> 00:04:26,560
a part of that azurewebsites.net

00:04:24,000 --> 00:04:28,000
site there so this example is going to

00:04:26,560 --> 00:04:28,639
show cross-site scripting how it can be

00:04:28,000 --> 00:04:31,520
used

00:04:28,639 --> 00:04:33,120
to steal that cookie if you look in the

00:04:31,520 --> 00:04:34,240
bottom part of that screenshot there you

00:04:33,120 --> 00:04:36,800
can see that i have

00:04:34,240 --> 00:04:38,080
just injected a bit of javascript as a

00:04:36,800 --> 00:04:41,520
url fragment

00:04:38,080 --> 00:04:43,360
on that url and it it actually

00:04:41,520 --> 00:04:45,360
worked the the cross-site scripting was

00:04:43,360 --> 00:04:45,840
successful and so it's showing an alert

00:04:45,360 --> 00:04:47,600
with

00:04:45,840 --> 00:04:49,759
with that cookie now obviously the

00:04:47,600 --> 00:04:51,040
all-alert example is the classic way of

00:04:49,759 --> 00:04:53,680
proof of concept

00:04:51,040 --> 00:04:56,160
doesn't do a whole lot how how would a

00:04:53,680 --> 00:04:58,080
cookie monster or another

00:04:56,160 --> 00:04:59,199
hacker actually use this in the real

00:04:58,080 --> 00:05:01,680
world scenario

00:04:59,199 --> 00:05:03,919
most likely you would modify the dom

00:05:01,680 --> 00:05:05,440
through this javascript injection

00:05:03,919 --> 00:05:07,199
you know this is one way where you could

00:05:05,440 --> 00:05:09,280
you could add an image to the dom

00:05:07,199 --> 00:05:10,639
with the url and attach that cookie

00:05:09,280 --> 00:05:12,320
value onto it

00:05:10,639 --> 00:05:14,080
so a request would be initiated through

00:05:12,320 --> 00:05:16,720
the browser and sent to

00:05:14,080 --> 00:05:18,400
a separate malicious site this is

00:05:16,720 --> 00:05:22,160
down-based cross-site scripting

00:05:18,400 --> 00:05:25,680
an example that that steals or hijacks

00:05:22,160 --> 00:05:26,320
that cookie for a name cookie yes

00:05:25,680 --> 00:05:29,440
there's some

00:05:26,320 --> 00:05:31,199
personal information there but in

00:05:29,440 --> 00:05:33,039
in reality the bigger concern is going

00:05:31,199 --> 00:05:34,880
to be about stealing a session cookie so

00:05:33,039 --> 00:05:36,479
something that represents the session of

00:05:34,880 --> 00:05:38,720
the authenticated user

00:05:36,479 --> 00:05:41,759
that's going to be the bigger concern

00:05:38,720 --> 00:05:43,280
when it when it comes to cookie security

00:05:41,759 --> 00:05:45,919
cross-site scripting isn't the only way

00:05:43,280 --> 00:05:48,479
that a cookie might be leaked or stolen

00:05:45,919 --> 00:05:49,680
cookies and other http attributes are

00:05:48,479 --> 00:05:53,120
often

00:05:49,680 --> 00:05:55,120
included in in request logs so

00:05:53,120 --> 00:05:56,160
a typical access log might only have

00:05:55,120 --> 00:05:58,160
query parameters

00:05:56,160 --> 00:05:59,520
but in a full log where we're in

00:05:58,160 --> 00:06:01,360
production or another

00:05:59,520 --> 00:06:02,880
you know depending on your environment

00:06:01,360 --> 00:06:05,360
you've enabled full

00:06:02,880 --> 00:06:06,080
full logging a cookie is just a header

00:06:05,360 --> 00:06:10,240
and it would

00:06:06,080 --> 00:06:10,240
it could uh be leaked there as well

00:06:10,400 --> 00:06:13,840
so wildcard cookies as i mentioned they

00:06:12,880 --> 00:06:15,440
are

00:06:13,840 --> 00:06:17,759
they're risky because they're sent to

00:06:15,440 --> 00:06:19,199
everything that matches that domain

00:06:17,759 --> 00:06:20,960
the browser is going to look at the

00:06:19,199 --> 00:06:21,919
domain of a cookie and it's going to

00:06:20,960 --> 00:06:24,000
decide when

00:06:21,919 --> 00:06:25,039
when and where to send that so if you

00:06:24,000 --> 00:06:26,880
have a shared

00:06:25,039 --> 00:06:28,880
site where you have multiple subdomains

00:06:26,880 --> 00:06:30,240
multiple applications on the same site

00:06:28,880 --> 00:06:33,280
you want to make sure that you're you're

00:06:30,240 --> 00:06:35,360
setting that domain attribute

00:06:33,280 --> 00:06:36,639
all right the reason that this that this

00:06:35,360 --> 00:06:39,440
exploit actually

00:06:36,639 --> 00:06:41,600
did work is because the cookie did not

00:06:39,440 --> 00:06:44,000
have the http only attributes set

00:06:41,600 --> 00:06:46,319
so in other words the javascript was

00:06:44,000 --> 00:06:49,120
able to access

00:06:46,319 --> 00:06:49,840
this cookie so just simply setting that

00:06:49,120 --> 00:06:52,960
attribute

00:06:49,840 --> 00:06:55,680
is is one way that you can prevent

00:06:52,960 --> 00:06:56,800
this this type of attack so it's it's

00:06:55,680 --> 00:06:58,240
effective and

00:06:56,800 --> 00:06:59,680
as i'll talk about in a minute you want

00:06:58,240 --> 00:07:00,880
to take other steps to reduce the

00:06:59,680 --> 00:07:02,240
likelihood of

00:07:00,880 --> 00:07:04,240
cross-site scripting you want to have a

00:07:02,240 --> 00:07:06,880
defense in-depth type of approach

00:07:04,240 --> 00:07:08,479
but using the http only attribute is a

00:07:06,880 --> 00:07:10,000
great way of preventing

00:07:08,479 --> 00:07:11,840
via javascript and via cross-site

00:07:10,000 --> 00:07:14,639
scripting of someone stealing

00:07:11,840 --> 00:07:16,240
stealing that cookie value the domain

00:07:14,639 --> 00:07:17,919
and path is related to

00:07:16,240 --> 00:07:19,840
as i talked about before wild card

00:07:17,919 --> 00:07:20,800
cookies you want to have a specific

00:07:19,840 --> 00:07:23,440
domain there

00:07:20,800 --> 00:07:24,800
and expires is bad too for that logging

00:07:23,440 --> 00:07:26,160
scenario so if you have a long lift

00:07:24,800 --> 00:07:28,479
cookie with a long

00:07:26,160 --> 00:07:29,680
expiration value set then it's more

00:07:28,479 --> 00:07:33,120
likely to be

00:07:29,680 --> 00:07:34,800
stolen through through a log

00:07:33,120 --> 00:07:36,960
in the bottom here i have a screenshot

00:07:34,800 --> 00:07:38,400
showing oauth of zap which is a dynamic

00:07:36,960 --> 00:07:41,520
security testing tool

00:07:38,400 --> 00:07:42,000
owasp is a non-profit education group

00:07:41,520 --> 00:07:43,680
that has

00:07:42,000 --> 00:07:45,680
all kinds of information about

00:07:43,680 --> 00:07:47,120
application security

00:07:45,680 --> 00:07:48,800
you'll see that there are two findings

00:07:47,120 --> 00:07:50,240
from zap one is about the same site

00:07:48,800 --> 00:07:51,759
attribute and the other is

00:07:50,240 --> 00:07:53,840
is the secure flag or the secure

00:07:51,759 --> 00:07:55,440
attribute is not set on the cookie

00:07:53,840 --> 00:07:56,879
the secure attribute means that the

00:07:55,440 --> 00:07:59,680
cookie is going to be set

00:07:56,879 --> 00:08:01,280
sent both to http requests and also

00:07:59,680 --> 00:08:02,800
https

00:08:01,280 --> 00:08:04,479
right so if you have a mixed content

00:08:02,800 --> 00:08:06,560
scenario in your web application where

00:08:04,479 --> 00:08:08,879
you're making requests to both http

00:08:06,560 --> 00:08:09,680
and https which isn't a great thing to

00:08:08,879 --> 00:08:11,120
have but

00:08:09,680 --> 00:08:13,039
i'm setting that secure attribute is

00:08:11,120 --> 00:08:13,680
going to tell the browser only send this

00:08:13,039 --> 00:08:17,120
cookie

00:08:13,680 --> 00:08:20,319
when you're making requests to https

00:08:17,120 --> 00:08:22,560
sites that also match that domain value

00:08:20,319 --> 00:08:24,800
same site attribute is the new cookie

00:08:22,560 --> 00:08:26,080
attribute in town so to speak it's it's

00:08:24,800 --> 00:08:28,000
relatively new

00:08:26,080 --> 00:08:29,680
there are three possible values none

00:08:28,000 --> 00:08:31,680
lacks and restricted

00:08:29,680 --> 00:08:33,200
the same site attribute is used to

00:08:31,680 --> 00:08:35,599
prevent against cross-site request

00:08:33,200 --> 00:08:37,599
forgery

00:08:35,599 --> 00:08:39,519
so let's take a look at what sea surf is

00:08:37,599 --> 00:08:41,440
you can see in this screenshot i have a

00:08:39,519 --> 00:08:43,839
website maliciouswebsite.com

00:08:41,440 --> 00:08:44,959
and there is a forum post present so

00:08:43,839 --> 00:08:47,279
there is a

00:08:44,959 --> 00:08:48,800
url back to my other application that we

00:08:47,279 --> 00:08:50,720
were looking at a minute ago

00:08:48,800 --> 00:08:52,720
it is a traditional forum post meaning

00:08:50,720 --> 00:08:56,000
the content type is going to be

00:08:52,720 --> 00:08:57,920
form url encoded and as a result

00:08:56,000 --> 00:08:59,920
when this malicious website makes this

00:08:57,920 --> 00:09:03,360
request the cookie

00:08:59,920 --> 00:09:05,200
that pertains to that domain isoato

00:09:03,360 --> 00:09:06,800
azure websites that's going to be sent

00:09:05,200 --> 00:09:09,360
right along with it

00:09:06,800 --> 00:09:10,399
so this demonstrates the cross site from

00:09:09,360 --> 00:09:13,519
one site

00:09:10,399 --> 00:09:15,440
going to another uh and then forgery

00:09:13,519 --> 00:09:16,800
which means fake so this this shows the

00:09:15,440 --> 00:09:19,279
crosshair across forgery

00:09:16,800 --> 00:09:20,320
also referred to as sea surf or known as

00:09:19,279 --> 00:09:23,519
session

00:09:20,320 --> 00:09:24,880
riding this same site attribute is uh

00:09:23,519 --> 00:09:27,519
would prevent

00:09:24,880 --> 00:09:29,040
uh this sea surf type of attack it's

00:09:27,519 --> 00:09:30,880
going to tell the browser that

00:09:29,040 --> 00:09:33,279
either with lacks or restricted what are

00:09:30,880 --> 00:09:35,200
the what are the situations where the

00:09:33,279 --> 00:09:36,480
where the cookie should be sent along

00:09:35,200 --> 00:09:39,920
from one from one's

00:09:36,480 --> 00:09:43,519
website's origin to another and so this

00:09:39,920 --> 00:09:47,120
is one uh effective way of mitigating

00:09:43,519 --> 00:09:47,120
against cross-site request forgery

00:09:47,519 --> 00:09:51,279
now like i said we should we should take

00:09:50,240 --> 00:09:53,279
a defense in-depth

00:09:51,279 --> 00:09:55,120
approach uh this session is not meant to

00:09:53,279 --> 00:09:57,279
be about application vulnerabilities

00:09:55,120 --> 00:09:59,519
i'm gonna mention uh cross-site

00:09:57,279 --> 00:10:01,040
scripting and c-surf briefly and how to

00:09:59,519 --> 00:10:02,959
mitigate against those

00:10:01,040 --> 00:10:04,320
uh for cross-site scripting always

00:10:02,959 --> 00:10:05,600
always do output encoding

00:10:04,320 --> 00:10:07,279
ideally you'll have a javascript

00:10:05,600 --> 00:10:09,680
framework like angular or another one

00:10:07,279 --> 00:10:12,880
that's going to output encode by default

00:10:09,680 --> 00:10:14,240
input validation is a weaker but it is a

00:10:12,880 --> 00:10:15,680
mitigation that's that's

00:10:14,240 --> 00:10:17,600
part of a defense and depth type of

00:10:15,680 --> 00:10:19,040
approach there are security headers that

00:10:17,600 --> 00:10:21,440
can help prevent

00:10:19,040 --> 00:10:23,279
cross-site scripting as well and then

00:10:21,440 --> 00:10:25,360
for sea surf there are some

00:10:23,279 --> 00:10:26,399
mitigations which are challenging to

00:10:25,360 --> 00:10:28,560
implement

00:10:26,399 --> 00:10:30,240
sea surf anti-forgery tokens where you

00:10:28,560 --> 00:10:32,079
create a one-time token

00:10:30,240 --> 00:10:34,079
for each and every form and then

00:10:32,079 --> 00:10:36,880
validate that on the session side

00:10:34,079 --> 00:10:37,760
that is a very effective way of

00:10:36,880 --> 00:10:40,640
mitigating against

00:10:37,760 --> 00:10:42,079
sea surf but it's also difficult to to

00:10:40,640 --> 00:10:44,560
implement it can cause trouble with the

00:10:42,079 --> 00:10:46,800
back button for example

00:10:44,560 --> 00:10:48,640
one way to avoid c-surf altogether is to

00:10:46,800 --> 00:10:51,040
use a rest-based architecture

00:10:48,640 --> 00:10:53,839
if you have proper rest apis that take

00:10:51,040 --> 00:10:56,160
application json or or maybe xml

00:10:53,839 --> 00:10:58,399
type of content types as well then you

00:10:56,160 --> 00:11:00,079
don't have traditional form posts

00:10:58,399 --> 00:11:01,680
likely if you're using rest apis you're

00:11:00,079 --> 00:11:04,320
using jwts

00:11:01,680 --> 00:11:06,240
which will bring us to our next session

00:11:04,320 --> 00:11:07,839
maybe we just don't need cookies maybe

00:11:06,240 --> 00:11:09,200
we can do without them

00:11:07,839 --> 00:11:10,880
um let's we're going to think through

00:11:09,200 --> 00:11:12,480
that and examine that and talk about

00:11:10,880 --> 00:11:14,079
some different application architectures

00:11:12,480 --> 00:11:18,640
to see how realistic

00:11:14,079 --> 00:11:20,560
that is so let's now go into

00:11:18,640 --> 00:11:21,839
or i'll go into the jwt section in just

00:11:20,560 --> 00:11:23,920
a second but just a quick

00:11:21,839 --> 00:11:26,320
review if you are going to give a hacker

00:11:23,920 --> 00:11:28,880
a cookie then by all means

00:11:26,320 --> 00:11:29,440
prefer session there's session kind of

00:11:28,880 --> 00:11:31,600
cookies

00:11:29,440 --> 00:11:33,200
that as soon as you close the browser

00:11:31,600 --> 00:11:34,880
tab or the browser itself this the

00:11:33,200 --> 00:11:37,360
cookie is deleted

00:11:34,880 --> 00:11:39,279
um don't avoid wild card cookies use the

00:11:37,360 --> 00:11:40,880
http only attribute

00:11:39,279 --> 00:11:42,720
so that javascript can't access the

00:11:40,880 --> 00:11:44,160
cookie and so that'll prevent the

00:11:42,720 --> 00:11:46,000
cross-scripting from stealing your

00:11:44,160 --> 00:11:47,279
cookies

00:11:46,000 --> 00:11:49,200
and then use the same side cookie

00:11:47,279 --> 00:11:51,839
attribute as a part of mitigation

00:11:49,200 --> 00:11:54,079
against sea surf

00:11:51,839 --> 00:11:55,040
all right so let's go into a history now

00:11:54,079 --> 00:11:58,320
of

00:11:55,040 --> 00:12:01,200
of oauth open id connect in jwts as well

00:11:58,320 --> 00:12:02,000
um i will talk about the predecessors to

00:12:01,200 --> 00:12:05,279
these types

00:12:02,000 --> 00:12:07,120
of of uh of concepts and

00:12:05,279 --> 00:12:08,720
frameworks i will talk to start off

00:12:07,120 --> 00:12:09,920
talking about wham and go through these

00:12:08,720 --> 00:12:11,680
if you're wondering what the batman

00:12:09,920 --> 00:12:13,040
connection is you know when i was

00:12:11,680 --> 00:12:14,320
reading all these specs and reading

00:12:13,040 --> 00:12:16,800
documentation

00:12:14,320 --> 00:12:19,360
i just felt like the terminology here

00:12:16,800 --> 00:12:22,160
just reminded me of the old batman

00:12:19,360 --> 00:12:24,160
tv show with the wham and the pow and

00:12:22,160 --> 00:12:26,399
there is a way i'm in the identity world

00:12:24,160 --> 00:12:27,760
and that's web access management it

00:12:26,399 --> 00:12:30,480
emerged in the 90s

00:12:27,760 --> 00:12:31,440
and i have a movie poster for reference

00:12:30,480 --> 00:12:34,240
just to show how

00:12:31,440 --> 00:12:35,839
old uh the wham came out even though

00:12:34,240 --> 00:12:38,000
it's still used today

00:12:35,839 --> 00:12:39,360
for many companies you can see that the

00:12:38,000 --> 00:12:41,279
old val kilmer

00:12:39,360 --> 00:12:43,360
tommy lee jones where jim carrey was the

00:12:41,279 --> 00:12:45,760
riddler that's around the same time that

00:12:43,360 --> 00:12:47,760
the wham standards came out

00:12:45,760 --> 00:12:48,959
this was referred to in many cases a

00:12:47,760 --> 00:12:52,160
single sign-on

00:12:48,959 --> 00:12:54,000
it was heavily reliant on on cookies and

00:12:52,160 --> 00:12:55,040
in the time of monolithic web

00:12:54,000 --> 00:12:58,000
applications

00:12:55,040 --> 00:12:59,440
your old traditional asp and jsp kind of

00:12:58,000 --> 00:13:00,880
web applications

00:12:59,440 --> 00:13:03,040
where you were running everything on

00:13:00,880 --> 00:13:06,240
prem

00:13:03,040 --> 00:13:07,120
wham worked really well it gave single

00:13:06,240 --> 00:13:08,800
sign-on

00:13:07,120 --> 00:13:10,959
it allowed you to do authentication and

00:13:08,800 --> 00:13:12,160
authorization sometimes this was like an

00:13:10,959 --> 00:13:14,480
agent-based

00:13:12,160 --> 00:13:16,480
uh server agent maybe through apache or

00:13:14,480 --> 00:13:18,240
another mechanism

00:13:16,480 --> 00:13:19,760
where you could enforce authentication

00:13:18,240 --> 00:13:20,399
and it worked really well back in the

00:13:19,760 --> 00:13:22,800
day

00:13:20,399 --> 00:13:24,800
the problem with wams is that it is

00:13:22,800 --> 00:13:26,320
session full so to speak

00:13:24,800 --> 00:13:28,480
meaning all of those cookies and those

00:13:26,320 --> 00:13:30,160
session cookies are an actual session

00:13:28,480 --> 00:13:32,880
that is stored in a database

00:13:30,160 --> 00:13:33,279
in most implementations so that means

00:13:32,880 --> 00:13:36,000
for

00:13:33,279 --> 00:13:37,839
a big enterprise using a wham you could

00:13:36,000 --> 00:13:39,040
have millions upon millions of entries

00:13:37,839 --> 00:13:40,079
in a database

00:13:39,040 --> 00:13:42,959
and of course there's going to be

00:13:40,079 --> 00:13:44,959
scalability and performance issues

00:13:42,959 --> 00:13:47,040
when you have that many number of active

00:13:44,959 --> 00:13:49,360
sessions as a result as

00:13:47,040 --> 00:13:51,920
as a development team started moving

00:13:49,360 --> 00:13:54,079
towards microservice based architectures

00:13:51,920 --> 00:13:55,120
it was common for folks to have issues

00:13:54,079 --> 00:13:57,600
with wams

00:13:55,120 --> 00:13:58,639
you could hit max session issues there

00:13:57,600 --> 00:14:01,120
could just be

00:13:58,639 --> 00:14:02,800
timeouts and trying to verify that a

00:14:01,120 --> 00:14:04,720
user is authenticated when making rest

00:14:02,800 --> 00:14:06,800
api calls to the wham

00:14:04,720 --> 00:14:08,639
it didn't scale well and as a result

00:14:06,800 --> 00:14:10,639
there have been outages and issues and

00:14:08,639 --> 00:14:14,079
problems and folks have started to move

00:14:10,639 --> 00:14:15,760
move away from from williams

00:14:14,079 --> 00:14:18,000
i want to i want to elaborate just a bit

00:14:15,760 --> 00:14:20,079
about microservice based architectures

00:14:18,000 --> 00:14:22,399
you can think of a traditional web app

00:14:20,079 --> 00:14:24,720
that was maybe you know

00:14:22,399 --> 00:14:26,480
a million lines of code let's say and

00:14:24,720 --> 00:14:29,040
and maybe a team has

00:14:26,480 --> 00:14:30,880
modernized and then refactored or

00:14:29,040 --> 00:14:31,839
rebuilt and so that there's now a dozen

00:14:30,880 --> 00:14:34,480
microservices

00:14:31,839 --> 00:14:36,240
instead of that one big monolith that

00:14:34,480 --> 00:14:37,760
that example shows you know you need an

00:14:36,240 --> 00:14:39,199
authentication token from each one of

00:14:37,760 --> 00:14:42,160
those microservices

00:14:39,199 --> 00:14:43,680
there's more uh clients and api calls

00:14:42,160 --> 00:14:47,120
going back and forth there's just more

00:14:43,680 --> 00:14:48,800
sessions that that shows how

00:14:47,120 --> 00:14:50,959
for a micro services bank based

00:14:48,800 --> 00:14:53,839
architecture a wham is not a good

00:14:50,959 --> 00:14:55,440
solution also once you get into cloud

00:14:53,839 --> 00:14:57,199
environments

00:14:55,440 --> 00:15:00,160
you have a hybrid architecture you have

00:14:57,199 --> 00:15:03,199
cloud-based systems and on-prem ram

00:15:00,160 --> 00:15:06,639
is just not robust enough to meet needs

00:15:03,199 --> 00:15:06,639
of modern solutions

00:15:07,040 --> 00:15:10,480
all right so in the 2000s samwell came

00:15:09,519 --> 00:15:12,160
out samwell

00:15:10,480 --> 00:15:13,600
also referred to single sign-on it's one

00:15:12,160 --> 00:15:14,639
of the reasons that single sign-on is

00:15:13,600 --> 00:15:17,519
such a

00:15:14,639 --> 00:15:18,399
confusing and overused word but single

00:15:17,519 --> 00:15:20,320
sign-on refers to

00:15:18,399 --> 00:15:21,600
a lot of different implementations saml

00:15:20,320 --> 00:15:25,040
being one of those

00:15:21,600 --> 00:15:27,920
xml based saml allowed for

00:15:25,040 --> 00:15:30,560
software providers you know as as more

00:15:27,920 --> 00:15:32,160
companies were starting to

00:15:30,560 --> 00:15:33,199
buy instead of just build everything

00:15:32,160 --> 00:15:35,600
themselves they're going to buy

00:15:33,199 --> 00:15:37,199
solutions run it run it on-prem

00:15:35,600 --> 00:15:39,759
sam will allow them to have that same

00:15:37,199 --> 00:15:41,839
single sign-on experience

00:15:39,759 --> 00:15:43,120
in a way that you know was great for

00:15:41,839 --> 00:15:45,600
users and also

00:15:43,120 --> 00:15:46,399
very secure sam was still very popular

00:15:45,600 --> 00:15:49,920
today

00:15:46,399 --> 00:15:51,120
works really well uh in the late 2000s

00:15:49,920 --> 00:15:53,519
and this was around the same time that

00:15:51,120 --> 00:15:56,320
batman the very first batman begins

00:15:53,519 --> 00:15:57,680
movie came out which is a trilogy um

00:15:56,320 --> 00:15:59,199
that one made me feel old because that

00:15:57,680 --> 00:16:00,720
was i remember that very clearly when

00:15:59,199 --> 00:16:02,720
that one came out

00:16:00,720 --> 00:16:04,320
and how great it was um the first

00:16:02,720 --> 00:16:06,560
version of oauth came out and there have

00:16:04,320 --> 00:16:08,560
been two versions of the oauth standard

00:16:06,560 --> 00:16:09,759
version 2 was not backwards compatible

00:16:08,560 --> 00:16:11,920
with version 1.

00:16:09,759 --> 00:16:13,040
it was really like a redo and then there

00:16:11,920 --> 00:16:15,759
have been many

00:16:13,040 --> 00:16:17,199
standards since but oauth was much more

00:16:15,759 --> 00:16:20,639
geared towards

00:16:17,199 --> 00:16:23,440
rest apis and then

00:16:20,639 --> 00:16:24,880
once oid sees the oidc standard came out

00:16:23,440 --> 00:16:26,240
and jwts

00:16:24,880 --> 00:16:28,399
and things like pixie which i'm going to

00:16:26,240 --> 00:16:32,000
talk about in a minute once these

00:16:28,399 --> 00:16:34,399
these newer rfcs were released oauth v2

00:16:32,000 --> 00:16:36,240
became a very appealing option that

00:16:34,399 --> 00:16:39,120
worked for a great number of

00:16:36,240 --> 00:16:41,120
of companies some of the things that

00:16:39,120 --> 00:16:43,839
were introduced in the oauth v2

00:16:41,120 --> 00:16:45,279
and odc standards were id tokens and

00:16:43,839 --> 00:16:46,720
jwts

00:16:45,279 --> 00:16:48,480
there's really a collection of these i'm

00:16:46,720 --> 00:16:51,440
going to talk about them as a group

00:16:48,480 --> 00:16:52,480
id tokens where you have a gwt for for

00:16:51,440 --> 00:16:55,440
client-side apps

00:16:52,480 --> 00:16:57,199
access tokens for server-side this was

00:16:55,440 --> 00:16:59,839
authentication focused

00:16:57,199 --> 00:17:01,600
many cloud-based identity providers also

00:16:59,839 --> 00:17:03,360
implemented authorization capabilities

00:17:01,600 --> 00:17:05,039
through jwts and oauth

00:17:03,360 --> 00:17:06,559
i'm going to have examples of this in a

00:17:05,039 --> 00:17:10,079
minute

00:17:06,559 --> 00:17:12,079
some great things about about jwts

00:17:10,079 --> 00:17:13,199
you know it's a smart token it has

00:17:12,079 --> 00:17:14,640
information about the current

00:17:13,199 --> 00:17:15,839
authenticated user in it

00:17:14,640 --> 00:17:17,520
and obviously you don't want to have too

00:17:15,839 --> 00:17:18,000
much information or sensitive

00:17:17,520 --> 00:17:20,160
information

00:17:18,000 --> 00:17:21,360
in the jwt that you can include current

00:17:20,160 --> 00:17:24,480
user information there

00:17:21,360 --> 00:17:27,919
so it's really useful uh it and it

00:17:24,480 --> 00:17:29,919
felt felt right for rest api type of

00:17:27,919 --> 00:17:32,160
architectures with single page apps it

00:17:29,919 --> 00:17:35,360
really was meant for these modern types

00:17:32,160 --> 00:17:37,200
of architectures so

00:17:35,360 --> 00:17:38,480
what are jason webb tokens they are very

00:17:37,200 --> 00:17:40,960
cool like the original

00:17:38,480 --> 00:17:42,559
batmobile and jwt is the sound that the

00:17:40,960 --> 00:17:44,240
batmobile makes when it peels out in

00:17:42,559 --> 00:17:46,320
case you didn't know

00:17:44,240 --> 00:17:47,360
like i said jwts do contain information

00:17:46,320 --> 00:17:49,520
about the current user

00:17:47,360 --> 00:17:50,480
they're really just json json's just

00:17:49,520 --> 00:17:53,600
javascript

00:17:50,480 --> 00:17:54,000
it is base64 encoded json uh meaning

00:17:53,600 --> 00:17:56,799
there's

00:17:54,000 --> 00:17:58,559
there's a standard uh format of this

00:17:56,799 --> 00:17:59,440
json that's encoded and so that could be

00:17:58,559 --> 00:18:03,520
passed around

00:17:59,440 --> 00:18:05,919
easily jwts are session lists

00:18:03,520 --> 00:18:07,520
so opposed to wams which are session

00:18:05,919 --> 00:18:10,799
full and have those giant session

00:18:07,520 --> 00:18:13,440
databases in some cases jwts are session

00:18:10,799 --> 00:18:15,200
list tokens meaning you don't have to

00:18:13,440 --> 00:18:16,400
store them in a repository

00:18:15,200 --> 00:18:18,400
you might be wondering if you're not

00:18:16,400 --> 00:18:19,039
familiar with jwts well how does one

00:18:18,400 --> 00:18:21,440
verify

00:18:19,039 --> 00:18:23,440
that a user is authenticated if it's not

00:18:21,440 --> 00:18:24,799
stored in some database

00:18:23,440 --> 00:18:26,559
in a traditional whim you're calling

00:18:24,799 --> 00:18:28,480
like a rest api with a

00:18:26,559 --> 00:18:29,919
with a cookie value in order to say is

00:18:28,480 --> 00:18:30,960
this user authenticated are they

00:18:29,919 --> 00:18:33,280
authorized

00:18:30,960 --> 00:18:34,559
with jwts there is a public key and a

00:18:33,280 --> 00:18:36,960
private key

00:18:34,559 --> 00:18:39,039
that's used to a private key is used to

00:18:36,960 --> 00:18:39,760
create the jwt and a public key can be

00:18:39,039 --> 00:18:43,280
used

00:18:39,760 --> 00:18:45,440
to to verify that jwt

00:18:43,280 --> 00:18:46,640
these are generally issued by the

00:18:45,440 --> 00:18:48,640
identity provider

00:18:46,640 --> 00:18:50,240
so your cloud-based identity provider or

00:18:48,640 --> 00:18:51,679
if you have one on-prem

00:18:50,240 --> 00:18:54,400
that would be responsible for issuing

00:18:51,679 --> 00:18:54,960
the jwt and as a result it's responsible

00:18:54,400 --> 00:18:56,720
for

00:18:54,960 --> 00:18:58,799
for maintaining that private key which

00:18:56,720 --> 00:19:01,440
is so important to protect

00:18:58,799 --> 00:19:02,559
one of the side effect benefits besides

00:19:01,440 --> 00:19:04,080
the

00:19:02,559 --> 00:19:06,720
you know the security benefits of using

00:19:04,080 --> 00:19:08,160
jwts is that it reduces the number of

00:19:06,720 --> 00:19:11,039
network connections

00:19:08,160 --> 00:19:12,799
so a server-side application doesn't

00:19:11,039 --> 00:19:13,840
have to make that request back out to

00:19:12,799 --> 00:19:16,160
the identity tool

00:19:13,840 --> 00:19:16,960
it can use that that public key over and

00:19:16,160 --> 00:19:20,160
over again

00:19:16,960 --> 00:19:22,000
to verify that the user is authenticated

00:19:20,160 --> 00:19:24,640
here's what a jwt looks like on the

00:19:22,000 --> 00:19:28,000
right that's base64 encoded json

00:19:24,640 --> 00:19:30,000
on the left i have decoded that jwt

00:19:28,000 --> 00:19:31,679
and you can see the key value pairs

00:19:30,000 --> 00:19:33,120
which are known as claims

00:19:31,679 --> 00:19:35,200
so you have your name and your value

00:19:33,120 --> 00:19:37,360
pair and you can see that it has some

00:19:35,200 --> 00:19:38,559
useful information about me although i

00:19:37,360 --> 00:19:39,600
blocked out some of that useful

00:19:38,559 --> 00:19:41,760
information

00:19:39,600 --> 00:19:43,679
i also i want to highlight that there is

00:19:41,760 --> 00:19:45,679
an expiration and this is one of the big

00:19:43,679 --> 00:19:48,799
benefits of jwts

00:19:45,679 --> 00:19:50,880
if you're using one of the commonly

00:19:48,799 --> 00:19:53,200
cloud common cloud-based identity

00:19:50,880 --> 00:19:56,480
providers and there are a lot of options

00:19:53,200 --> 00:19:59,360
by default these jwts will have an

00:19:56,480 --> 00:19:59,919
expiration within an hour or two in some

00:19:59,360 --> 00:20:01,600
cases

00:19:59,919 --> 00:20:03,360
and i've worked with a few of these

00:20:01,600 --> 00:20:04,880
identity providers you don't have the

00:20:03,360 --> 00:20:07,200
option to change it because you don't

00:20:04,880 --> 00:20:09,600
want to have a long lift jwt

00:20:07,200 --> 00:20:10,240
in part because it's session less and

00:20:09,600 --> 00:20:12,880
they're

00:20:10,240 --> 00:20:14,640
in some cases there isn't a way to uh to

00:20:12,880 --> 00:20:17,440
say oh this jwt has leaked

00:20:14,640 --> 00:20:19,280
i want to um expire it i want to make it

00:20:17,440 --> 00:20:20,799
so it's no longer usable

00:20:19,280 --> 00:20:23,919
you need to have a short expiration on a

00:20:20,799 --> 00:20:25,440
jwt and that's the default

00:20:23,919 --> 00:20:27,440
all right so the joker if you will is

00:20:25,440 --> 00:20:29,440
your jwk and that is the public key

00:20:27,440 --> 00:20:31,679
which i have already mentioned

00:20:29,440 --> 00:20:32,480
you can validate your jwt with a public

00:20:31,679 --> 00:20:36,799
key

00:20:32,480 --> 00:20:39,840
for many cloud-based identity providers

00:20:36,799 --> 00:20:40,480
that that jwk will be publicly

00:20:39,840 --> 00:20:42,240
accessible

00:20:40,480 --> 00:20:43,679
it really is okay to have that open to

00:20:42,240 --> 00:20:46,159
anyone and everyone

00:20:43,679 --> 00:20:46,720
both the id token and the access token

00:20:46,159 --> 00:20:52,480
can

00:20:46,720 --> 00:20:52,480
can be validated um with with uh jwk

00:20:53,440 --> 00:20:57,039
all right so one of the great things

00:20:54,720 --> 00:20:59,760
about oauth and open id connect is that

00:20:57,039 --> 00:21:01,919
you it it supports many different types

00:20:59,760 --> 00:21:03,760
of clients

00:21:01,919 --> 00:21:05,200
in oauth terminology you have oauth

00:21:03,760 --> 00:21:07,440
grant types which

00:21:05,200 --> 00:21:09,039
are more or less used by these various

00:21:07,440 --> 00:21:11,600
types of clients so

00:21:09,039 --> 00:21:12,960
opposed to the old wam types of approach

00:21:11,600 --> 00:21:15,200
you have

00:21:12,960 --> 00:21:17,120
if you're using a cloud-based identity

00:21:15,200 --> 00:21:17,840
provider that has the full oauth openid

00:21:17,120 --> 00:21:19,520
connect

00:21:17,840 --> 00:21:20,960
spec that it's implemented you're going

00:21:19,520 --> 00:21:21,919
to be able to support lots of different

00:21:20,960 --> 00:21:24,559
client types

00:21:21,919 --> 00:21:26,880
including mobile devices um be able to

00:21:24,559 --> 00:21:30,320
do things like integrated windows off

00:21:26,880 --> 00:21:31,760
and even be able to do um you know more

00:21:30,320 --> 00:21:34,159
advanced like internet of things

00:21:31,760 --> 00:21:35,200
type of situations so because of time

00:21:34,159 --> 00:21:35,840
i'm not going to be able to talk about

00:21:35,200 --> 00:21:37,039
all of these

00:21:35,840 --> 00:21:39,120
i'm going to highlight just a few of

00:21:37,039 --> 00:21:40,559
them one of them is pixi which is proof

00:21:39,120 --> 00:21:43,039
key code exchange

00:21:40,559 --> 00:21:44,720
that's used by single page apps talk

00:21:43,039 --> 00:21:45,520
briefly about the authorization code

00:21:44,720 --> 00:21:46,799
grant type

00:21:45,520 --> 00:21:48,799
and that's for traditional web

00:21:46,799 --> 00:21:50,480
applications and then i'll talk about

00:21:48,799 --> 00:21:52,159
the password grant type mostly because i

00:21:50,480 --> 00:21:54,000
feel like the password grant type

00:21:52,159 --> 00:21:55,679
gets a really bad wrap but there are

00:21:54,000 --> 00:21:57,280
some times when you just you have to use

00:21:55,679 --> 00:21:59,840
it

00:21:57,280 --> 00:22:02,000
the the oboe one is interesting as well

00:21:59,840 --> 00:22:05,039
it is a way to do server-side

00:22:02,000 --> 00:22:06,400
token exchanges so one great thing about

00:22:05,039 --> 00:22:08,720
jwts

00:22:06,400 --> 00:22:09,919
uh it's going to encourage you to have

00:22:08,720 --> 00:22:12,080
jwt's

00:22:09,919 --> 00:22:13,919
per application or group logically

00:22:12,080 --> 00:22:15,919
related group of applications

00:22:13,919 --> 00:22:17,520
so instead of one cookie for lots of

00:22:15,919 --> 00:22:19,039
applications which is a risk

00:22:17,520 --> 00:22:20,720
because you know one app might have a

00:22:19,039 --> 00:22:21,440
vulnerability that allows that cookie to

00:22:20,720 --> 00:22:24,640
be leaked

00:22:21,440 --> 00:22:26,000
we're now going to have jwts for for one

00:22:24,640 --> 00:22:28,720
application or one or one

00:22:26,000 --> 00:22:30,720
group of related applications so there's

00:22:28,720 --> 00:22:34,240
going to be cases where you need to

00:22:30,720 --> 00:22:35,679
exchange your jwt for another one

00:22:34,240 --> 00:22:37,280
and we don't want to have a negative

00:22:35,679 --> 00:22:38,000
user experience where we're having

00:22:37,280 --> 00:22:40,080
people

00:22:38,000 --> 00:22:42,159
reprompt over and over again to be to

00:22:40,080 --> 00:22:44,159
log in

00:22:42,159 --> 00:22:45,280
so i mentioned oboe is the server-side

00:22:44,159 --> 00:22:48,080
way of doing

00:22:45,280 --> 00:22:48,720
token exchanges pixi is the client-side

00:22:48,080 --> 00:22:51,760
way

00:22:48,720 --> 00:22:54,640
of doing uh token exchanges so pxe

00:22:51,760 --> 00:22:56,240
is proof key code exchange some of you

00:22:54,640 --> 00:22:57,039
might be familiar with the implicit

00:22:56,240 --> 00:22:58,559
grant type

00:22:57,039 --> 00:23:00,240
which appeared in an earlier version of

00:22:58,559 --> 00:23:02,640
the oauth spec

00:23:00,240 --> 00:23:04,640
for for all purposes and first

00:23:02,640 --> 00:23:06,159
especially for security people

00:23:04,640 --> 00:23:09,120
we should consider the implicit grant

00:23:06,159 --> 00:23:11,039
type deprecated almost

00:23:09,120 --> 00:23:12,720
well the cloud-based identity providers

00:23:11,039 --> 00:23:14,400
that i know of support pixie already

00:23:12,720 --> 00:23:16,720
even though it's relatively new

00:23:14,400 --> 00:23:18,559
and i think that the next oauth spec

00:23:16,720 --> 00:23:19,280
iteration of version will likely have

00:23:18,559 --> 00:23:21,039
pixie

00:23:19,280 --> 00:23:23,600
as the go-to option for single page apps

00:23:21,039 --> 00:23:26,799
and it will deprecate

00:23:23,600 --> 00:23:29,120
so what is pixi it is a two-step process

00:23:26,799 --> 00:23:30,080
initiated from a ui usually via some

00:23:29,120 --> 00:23:32,799
javascript

00:23:30,080 --> 00:23:34,880
that's going to have a redirect for the

00:23:32,799 --> 00:23:36,080
user to go to the identity provider

00:23:34,880 --> 00:23:38,080
they will log in it could be

00:23:36,080 --> 00:23:40,159
multi-factor you know

00:23:38,080 --> 00:23:41,840
it just depends on what's configured on

00:23:40,159 --> 00:23:43,440
the identity provider side

00:23:41,840 --> 00:23:45,200
but there's a two-step process the one

00:23:43,440 --> 00:23:47,200
has to redirect to the authorization

00:23:45,200 --> 00:23:49,360
endpoint and then the next one is to go

00:23:47,200 --> 00:23:50,080
back with with a randomly generated

00:23:49,360 --> 00:23:53,279
token

00:23:50,080 --> 00:23:55,679
that comes from the idp and go back to

00:23:53,279 --> 00:23:57,919
go back to the token endpoint if that

00:23:55,679 --> 00:23:59,120
all sounds super complicated and anybody

00:23:57,919 --> 00:24:02,960
is scared

00:23:59,120 --> 00:24:04,640
don't worry this is all provided by

00:24:02,960 --> 00:24:06,240
javascript libraries

00:24:04,640 --> 00:24:08,960
of the of the identity providers that

00:24:06,240 --> 00:24:11,039
i've looked at they have js libraries

00:24:08,960 --> 00:24:12,640
and i do most of the heavy lifting for

00:24:11,039 --> 00:24:13,760
you and i'm going to show a code snippet

00:24:12,640 --> 00:24:15,760
in a second

00:24:13,760 --> 00:24:17,120
so this is some conceptual background

00:24:15,760 --> 00:24:19,279
information

00:24:17,120 --> 00:24:20,240
if you're a developer it could be just

00:24:19,279 --> 00:24:22,400
as easy as

00:24:20,240 --> 00:24:23,440
using importing the javascript library

00:24:22,400 --> 00:24:24,880
and making use of it

00:24:23,440 --> 00:24:27,200
not having to know all the nitty gritty

00:24:24,880 --> 00:24:29,039
details

00:24:27,200 --> 00:24:31,600
so once the ui or the single page app

00:24:29,039 --> 00:24:32,000
has a access token which is meant to be

00:24:31,600 --> 00:24:34,400
used for

00:24:32,000 --> 00:24:35,200
server-side calls the ui would initiate

00:24:34,400 --> 00:24:37,520
an ajax

00:24:35,200 --> 00:24:39,600
rest api call going through an api

00:24:37,520 --> 00:24:41,760
gateway in this case

00:24:39,600 --> 00:24:43,600
the api gateway is going to use that jwk

00:24:41,760 --> 00:24:45,919
public key that i mentioned earlier it's

00:24:43,600 --> 00:24:48,159
going to heavily cache that public key

00:24:45,919 --> 00:24:49,760
and the api gateway is going to do the

00:24:48,159 --> 00:24:52,080
jwt validation

00:24:49,760 --> 00:24:52,880
if all is well then traffic will

00:24:52,080 --> 00:24:56,080
continue

00:24:52,880 --> 00:24:57,520
proxying to the underlying ape

00:24:56,080 --> 00:24:59,840
one of the valuable things that i

00:24:57,520 --> 00:25:01,520
mentioned before is is pxe silent

00:24:59,840 --> 00:25:04,559
reauthentication support

00:25:01,520 --> 00:25:07,679
where through that javascript library

00:25:04,559 --> 00:25:10,240
you can get a new token as long as

00:25:07,679 --> 00:25:11,279
the user is authenticated to your

00:25:10,240 --> 00:25:13,200
identity provider

00:25:11,279 --> 00:25:15,440
and has that session that's already

00:25:13,200 --> 00:25:18,159
established

00:25:15,440 --> 00:25:19,440
from the spec itself i wanted to just to

00:25:18,159 --> 00:25:22,640
show

00:25:19,440 --> 00:25:24,720
this is from the the rfc original 144

00:25:22,640 --> 00:25:27,679
proof key code exchange you know that's

00:25:24,720 --> 00:25:30,480
that two-step process

00:25:27,679 --> 00:25:32,960
but fear not on the development side

00:25:30,480 --> 00:25:35,919
there's easy ways in order to do this

00:25:32,960 --> 00:25:37,520
silent reauthentication and there's

00:25:35,919 --> 00:25:39,520
similar examples for different

00:25:37,520 --> 00:25:41,200
identity providers but if you need a

00:25:39,520 --> 00:25:44,880
silent token it's going to

00:25:41,200 --> 00:25:47,760
get that for you automatically no pop-up

00:25:44,880 --> 00:25:49,120
no no redirect you know sometimes you've

00:25:47,760 --> 00:25:51,919
seen

00:25:49,120 --> 00:25:53,600
like a quick redirect flash back over

00:25:51,919 --> 00:25:55,360
that's not going to happen here

00:25:53,600 --> 00:25:56,640
implementations vary sometimes identity

00:25:55,360 --> 00:25:59,600
providers will like

00:25:56,640 --> 00:26:01,679
inject a hidden iframe perform this

00:25:59,600 --> 00:26:03,600
authentication operation

00:26:01,679 --> 00:26:06,799
and then get that jwt and set it back

00:26:03,600 --> 00:26:09,039
usually in html5 session storage

00:26:06,799 --> 00:26:11,200
if that doesn't work if it doesn't maybe

00:26:09,039 --> 00:26:13,039
the user's

00:26:11,200 --> 00:26:15,039
session with the with the cloud tool has

00:26:13,039 --> 00:26:17,440
already expired then you can

00:26:15,039 --> 00:26:18,400
in your error block here say okay we'll

00:26:17,440 --> 00:26:19,600
do the pop-up

00:26:18,400 --> 00:26:22,159
in order to have the user

00:26:19,600 --> 00:26:25,600
re-authenticate or maybe it's a redirect

00:26:22,159 --> 00:26:27,840
whichever one that you prefer

00:26:25,600 --> 00:26:29,520
one of the benefits of using pixie and

00:26:27,840 --> 00:26:32,159
going with a standard approach with

00:26:29,520 --> 00:26:33,520
oauth and openid connect and using gwts

00:26:32,159 --> 00:26:35,360
is that you have much better tool

00:26:33,520 --> 00:26:39,520
support so using

00:26:35,360 --> 00:26:40,480
a legacy wham or legacy on-prem identity

00:26:39,520 --> 00:26:43,200
tool

00:26:40,480 --> 00:26:44,480
that has some custom authentication

00:26:43,200 --> 00:26:45,679
capabilities

00:26:44,480 --> 00:26:47,520
you're not going to have this kind of

00:26:45,679 --> 00:26:49,360
tool support this is one thing that

00:26:47,520 --> 00:26:50,799
developers have really enjoyed

00:26:49,360 --> 00:26:52,400
also it's great from a security

00:26:50,799 --> 00:26:54,640
standpoint if you're doing security

00:26:52,400 --> 00:26:56,720
testing for example

00:26:54,640 --> 00:26:58,880
you can even set up postman as a proxy

00:26:56,720 --> 00:27:00,799
and use your owasps app or use your

00:26:58,880 --> 00:27:02,000
your burp or whatever your dynamic

00:27:00,799 --> 00:27:04,480
security testing

00:27:02,000 --> 00:27:06,400
tool is and still get pretty good test

00:27:04,480 --> 00:27:08,080
coverage of your rest apis

00:27:06,400 --> 00:27:10,320
you're just doing this step through

00:27:08,080 --> 00:27:13,279
postman in order to easily get back

00:27:10,320 --> 00:27:13,279
your jwt

00:27:14,320 --> 00:27:17,760
all right next up is password grant type

00:27:16,159 --> 00:27:18,080
and i do feel like password grant type

00:27:17,760 --> 00:27:21,039
gets

00:27:18,080 --> 00:27:23,200
gets a bad rap just because um it has

00:27:21,039 --> 00:27:24,880
been misused and that has led some folks

00:27:23,200 --> 00:27:25,919
i think to say never ever use password

00:27:24,880 --> 00:27:27,919
grant type

00:27:25,919 --> 00:27:29,120
if you have a crown job batch job

00:27:27,919 --> 00:27:31,039
something like a demon kind of thing

00:27:29,120 --> 00:27:33,600
that runs once an hour once a day

00:27:31,039 --> 00:27:35,919
once a minute whatever it might be using

00:27:33,600 --> 00:27:37,840
the password grant type it can be

00:27:35,919 --> 00:27:39,919
a viable option the other one is the

00:27:37,840 --> 00:27:41,520
client credentials grant type but

00:27:39,919 --> 00:27:43,039
depending on your identity provider and

00:27:41,520 --> 00:27:44,320
how they've implemented client

00:27:43,039 --> 00:27:45,679
credentials you might want to use the

00:27:44,320 --> 00:27:47,600
password grant type

00:27:45,679 --> 00:27:50,080
in that case your cron job will have a

00:27:47,600 --> 00:27:51,840
set of a username and password in

00:27:50,080 --> 00:27:54,159
addition to a client id and a client

00:27:51,840 --> 00:27:55,279
secret

00:27:54,159 --> 00:27:56,559
i would always recommend using a

00:27:55,279 --> 00:27:58,080
password vault not hard coding

00:27:56,559 --> 00:27:59,600
credentials of course

00:27:58,080 --> 00:28:00,960
so if you have a password bought we can

00:27:59,600 --> 00:28:02,960
programmatically pull down those

00:28:00,960 --> 00:28:04,480
credentials that's great

00:28:02,960 --> 00:28:06,240
then the password grant type as far as

00:28:04,480 --> 00:28:07,440
the oauth flow goes is

00:28:06,240 --> 00:28:08,960
you're going to be sending along those

00:28:07,440 --> 00:28:09,520
credentials the client id the client

00:28:08,960 --> 00:28:11,200
secret

00:28:09,520 --> 00:28:13,360
you're going to go to the token endpoint

00:28:11,200 --> 00:28:15,760
in order to get your access token

00:28:13,360 --> 00:28:16,960
because this is a server side there is

00:28:15,760 --> 00:28:19,360
no id token

00:28:16,960 --> 00:28:20,000
id tokens are meant to be used by ui so

00:28:19,360 --> 00:28:21,520
you can

00:28:20,000 --> 00:28:23,919
you know within your ui say things like

00:28:21,520 --> 00:28:25,520
welcome user or maybe pre-fill a form

00:28:23,919 --> 00:28:27,279
based on the authenticated user's

00:28:25,520 --> 00:28:28,640
information

00:28:27,279 --> 00:28:30,640
you just need an access token in this

00:28:28,640 --> 00:28:32,559
case same thing with calling the api

00:28:30,640 --> 00:28:34,080
gateway

00:28:32,559 --> 00:28:35,520
or calling the api which goes through

00:28:34,080 --> 00:28:37,120
the api gateway and the gateway does

00:28:35,520 --> 00:28:40,640
your your token validation

00:28:37,120 --> 00:28:42,240
using the public key jwk you can use

00:28:40,640 --> 00:28:43,360
postman for the to test the password

00:28:42,240 --> 00:28:46,399
grant type as well

00:28:43,360 --> 00:28:48,240
it's a great great free tool you can

00:28:46,399 --> 00:28:50,960
also use curl of course or or another

00:28:48,240 --> 00:28:52,640
way of initiating an http request

00:28:50,960 --> 00:28:55,120
this just shows that you you're sending

00:28:52,640 --> 00:28:57,520
your username your password and so on

00:28:55,120 --> 00:28:58,960
this is fine to use password grain type

00:28:57,520 --> 00:29:00,880
uh in my opinion

00:28:58,960 --> 00:29:02,159
for this particular use case the problem

00:29:00,880 --> 00:29:04,320
is when people say

00:29:02,159 --> 00:29:06,720
well i don't understand the pixie flow

00:29:04,320 --> 00:29:09,200
or i don't understand authorization code

00:29:06,720 --> 00:29:10,720
and so i'm going to create my own login

00:29:09,200 --> 00:29:12,480
and use the password grant type and have

00:29:10,720 --> 00:29:13,520
people enter in passwords

00:29:12,480 --> 00:29:15,840
that's where you're going to get in all

00:29:13,520 --> 00:29:17,120
kinds of trouble when web applications

00:29:15,840 --> 00:29:19,360
have to handle passwords

00:29:17,120 --> 00:29:21,039
themselves from a ui standpoint

00:29:19,360 --> 00:29:22,960
especially there's just all kinds of

00:29:21,039 --> 00:29:24,399
ways to shoot yourself in the foot

00:29:22,960 --> 00:29:26,080
so just if you're going to use password

00:29:24,399 --> 00:29:29,279
grant type just use it for this

00:29:26,080 --> 00:29:30,799
this cron job type of approach

00:29:29,279 --> 00:29:32,640
okay so that was a lot of concepts and

00:29:30,799 --> 00:29:34,080
terminology about oauth

00:29:32,640 --> 00:29:36,080
i hope i didn't lose anybody there we're

00:29:34,080 --> 00:29:39,760
gonna get into some more concrete things

00:29:36,080 --> 00:29:40,000
in a little bit uh one one one more

00:29:39,760 --> 00:29:41,600
piece

00:29:40,000 --> 00:29:43,679
of conceptual thing that i want to cover

00:29:41,600 --> 00:29:45,679
is our back row based access control and

00:29:43,679 --> 00:29:46,720
what does that look like with oauth and

00:29:45,679 --> 00:29:48,640
jwts

00:29:46,720 --> 00:29:50,720
so i'll talk about that first talk

00:29:48,640 --> 00:29:51,360
briefly about the oauth api security top

00:29:50,720 --> 00:29:52,880
00:29:51,360 --> 00:29:56,240
and then i'm going to get into specific

00:29:52,880 --> 00:29:59,279
usages of jwts

00:29:56,240 --> 00:30:00,880
all right so so our back okay so we in

00:29:59,279 --> 00:30:02,240
this diagram i'm showing an identity

00:30:00,880 --> 00:30:04,320
provider

00:30:02,240 --> 00:30:05,679
i have a single page app ui an api

00:30:04,320 --> 00:30:08,480
gateway and an api

00:30:05,679 --> 00:30:10,559
so with your identity provider this is

00:30:08,480 --> 00:30:13,520
this is known at least in this context

00:30:10,559 --> 00:30:14,559
as a policy information point the in one

00:30:13,520 --> 00:30:16,559
of the advantage

00:30:14,559 --> 00:30:17,760
advantages of using a cloud-based

00:30:16,559 --> 00:30:20,240
identity provider

00:30:17,760 --> 00:30:21,360
is going to have a beautiful kind of ui

00:30:20,240 --> 00:30:23,840
where you can define your

00:30:21,360 --> 00:30:24,799
your roles your groups you can map users

00:30:23,840 --> 00:30:27,200
and groups to

00:30:24,799 --> 00:30:29,440
roles the reason that's important in the

00:30:27,200 --> 00:30:31,520
context of oauth and gwt

00:30:29,440 --> 00:30:33,039
is that you can have a roles claim on

00:30:31,520 --> 00:30:35,279
your jwt

00:30:33,039 --> 00:30:37,440
so just like when we looked at the jwt

00:30:35,279 --> 00:30:39,520
before and you saw those key value pairs

00:30:37,440 --> 00:30:41,360
we can have a roles where the identity

00:30:39,520 --> 00:30:43,360
provider is also acting as the

00:30:41,360 --> 00:30:45,200
policy decision point to say i'm going

00:30:43,360 --> 00:30:47,440
to create you this jwt

00:30:45,200 --> 00:30:49,120
and i'm going to populate it with roles

00:30:47,440 --> 00:30:51,039
based on how you've mapped

00:30:49,120 --> 00:30:52,640
users and groups to roles through the

00:30:51,039 --> 00:30:54,559
identity provider ui

00:30:52,640 --> 00:30:56,000
of course there's a cli and a rest api

00:30:54,559 --> 00:30:57,840
as well

00:30:56,000 --> 00:30:59,279
so there we go policy information point

00:30:57,840 --> 00:31:00,720
policy decision point

00:30:59,279 --> 00:31:02,159
what's doing the enforcement though

00:31:00,720 --> 00:31:03,360
what's actually going to make the yay or

00:31:02,159 --> 00:31:05,600
nay decision

00:31:03,360 --> 00:31:06,799
that's the api gateway it's your policy

00:31:05,600 --> 00:31:07,760
enforcement point

00:31:06,799 --> 00:31:10,000
that's where you would have your

00:31:07,760 --> 00:31:10,559
authorization rules and i'm going to

00:31:10,000 --> 00:31:13,200
show

00:31:10,559 --> 00:31:14,640
i'll show this in just a second you'll

00:31:13,200 --> 00:31:18,000
have your authorization rules

00:31:14,640 --> 00:31:20,399
where you can say a

00:31:18,000 --> 00:31:22,720
person with a admin role can make get

00:31:20,399 --> 00:31:24,640
post puts and deletes to all endpoints

00:31:22,720 --> 00:31:26,480
or a person with just a reporting role

00:31:24,640 --> 00:31:27,760
can just make get requests

00:31:26,480 --> 00:31:29,039
you know that's that's the kind of

00:31:27,760 --> 00:31:30,720
authorization rules that you can define

00:31:29,039 --> 00:31:33,279
at your api gateway layer

00:31:30,720 --> 00:31:35,360
and that's your policy enforcement point

00:31:33,279 --> 00:31:36,240
i will say that by using a cloud-based

00:31:35,360 --> 00:31:39,600
idp

00:31:36,240 --> 00:31:42,159
you can just leverage the fact that they

00:31:39,600 --> 00:31:45,200
have implemented these specs to a t

00:31:42,159 --> 00:31:46,720
things like pxe and jwt and oauth

00:31:45,200 --> 00:31:48,559
and you're less likely to shoot yourself

00:31:46,720 --> 00:31:50,320
in the foot i will say that

00:31:48,559 --> 00:31:52,240
i did shoot myself in the foot at one

00:31:50,320 --> 00:31:54,720
point in time when i tried to implement

00:31:52,240 --> 00:31:56,320
sort of an identity solution myself

00:31:54,720 --> 00:31:56,880
didn't realize what a can of worms that

00:31:56,320 --> 00:31:59,279
was

00:31:56,880 --> 00:32:01,120
and all the things that can go wrong for

00:31:59,279 --> 00:32:04,799
example how to properly protect

00:32:01,120 --> 00:32:07,919
that that so important uh private key

00:32:04,799 --> 00:32:09,600
when using rst56 the siding algorithm

00:32:07,919 --> 00:32:10,880
that's asynchronous and has a public key

00:32:09,600 --> 00:32:12,799
and a private key

00:32:10,880 --> 00:32:14,320
you know those are things that the idp

00:32:12,799 --> 00:32:17,519
can handle for you

00:32:14,320 --> 00:32:19,440
which i would highly recommend one of

00:32:17,519 --> 00:32:21,519
the many resources that oas provides is

00:32:19,440 --> 00:32:22,960
this api security top 10 list

00:32:21,519 --> 00:32:25,200
it's relatively new there's been an

00:32:22,960 --> 00:32:27,120
oauth top 10 for many many years

00:32:25,200 --> 00:32:28,399
the api security top 10 came out i think

00:32:27,120 --> 00:32:30,720
last year

00:32:28,399 --> 00:32:31,760
you can see that three of these top 10

00:32:30,720 --> 00:32:33,760
issues

00:32:31,760 --> 00:32:35,120
are related to access control there's

00:32:33,760 --> 00:32:36,799
broken authentication

00:32:35,120 --> 00:32:38,799
there's broken object level access

00:32:36,799 --> 00:32:41,200
control and there's missing function

00:32:38,799 --> 00:32:42,240
resource level access control and i want

00:32:41,200 --> 00:32:44,799
to highlight api

00:32:42,240 --> 00:32:45,519
5 broken function level access control

00:32:44,799 --> 00:32:49,120
this is worth

00:32:45,519 --> 00:32:50,480
a read for sure complex access control

00:32:49,120 --> 00:32:52,720
policies with different hierarchies

00:32:50,480 --> 00:32:54,840
groups and roles and unclear separation

00:32:52,720 --> 00:32:57,120
between administrative and regular

00:32:54,840 --> 00:32:59,200
functions these lead to authorization

00:32:57,120 --> 00:33:01,919
flaws

00:32:59,200 --> 00:33:03,760
so if you're using an api gateway it

00:33:01,919 --> 00:33:05,840
becomes your policy enforcement

00:33:03,760 --> 00:33:06,880
point it helps you do this function

00:33:05,840 --> 00:33:09,519
level access

00:33:06,880 --> 00:33:11,279
control by checking the jwt checking

00:33:09,519 --> 00:33:12,960
those roles

00:33:11,279 --> 00:33:15,600
it also allows you to do a number of

00:33:12,960 --> 00:33:16,559
other policies like rate limiting that

00:33:15,600 --> 00:33:18,000
i'll talk about

00:33:16,559 --> 00:33:19,519
but i mentioned cross-site scripting

00:33:18,000 --> 00:33:20,640
before you can do some basic input

00:33:19,519 --> 00:33:22,480
validation

00:33:20,640 --> 00:33:23,840
at the api gateway similar to what you

00:33:22,480 --> 00:33:25,360
would do in a laugh like a web

00:33:23,840 --> 00:33:28,559
application firewall

00:33:25,360 --> 00:33:30,320
but this is api specific here are those

00:33:28,559 --> 00:33:32,559
roles and those authorization rules that

00:33:30,320 --> 00:33:34,159
i mentioned before you have your roles

00:33:32,559 --> 00:33:36,080
that you've defined in your cloud-based

00:33:34,159 --> 00:33:37,679
identity provider then you can do some

00:33:36,080 --> 00:33:39,440
fine green rules here saying if you're

00:33:37,679 --> 00:33:40,320
an admin you can do get post puts and

00:33:39,440 --> 00:33:42,399
deletes

00:33:40,320 --> 00:33:44,960
and if you have a role like app reader

00:33:42,399 --> 00:33:47,760
then you can just do gets

00:33:44,960 --> 00:33:48,080
i think that this quote is just spot on

00:33:47,760 --> 00:33:49,600
for

00:33:48,080 --> 00:33:51,519
if for teams that have switched away

00:33:49,600 --> 00:33:54,320
from monolithic web applications they've

00:33:51,519 --> 00:33:56,559
moved towards rest apis

00:33:54,320 --> 00:33:57,679
i think what folks have observed and

00:33:56,559 --> 00:34:00,080
what i've seen for sure

00:33:57,679 --> 00:34:01,039
is that things that used to be private

00:34:00,080 --> 00:34:04,080
methods or

00:34:01,039 --> 00:34:06,240
private parts of the application

00:34:04,080 --> 00:34:08,000
of the monolith now is exposed because

00:34:06,240 --> 00:34:09,440
in a rest api architecture everything is

00:34:08,000 --> 00:34:11,919
a rest api endpoint

00:34:09,440 --> 00:34:14,240
so you need a way to say some of these

00:34:11,919 --> 00:34:16,079
rest api endpoints are only for admins

00:34:14,240 --> 00:34:18,000
some are for those with the writer roles

00:34:16,079 --> 00:34:20,320
you need some kind of way to do function

00:34:18,000 --> 00:34:21,440
level access control

00:34:20,320 --> 00:34:23,119
i didn't want to talk about rate

00:34:21,440 --> 00:34:24,079
limiting since i'm talking about an api

00:34:23,119 --> 00:34:27,280
gateway

00:34:24,079 --> 00:34:28,960
how does this relate to jwts with a jwt

00:34:27,280 --> 00:34:31,280
here you can easily do

00:34:28,960 --> 00:34:33,359
fine-grained rate limiting there are

00:34:31,280 --> 00:34:34,960
pitfalls associated with rate limiting

00:34:33,359 --> 00:34:36,159
like if you had a shared key that lots

00:34:34,960 --> 00:34:39,359
of users

00:34:36,159 --> 00:34:40,639
were sharing in order to send that along

00:34:39,359 --> 00:34:41,119
and you were rate limiting based off of

00:34:40,639 --> 00:34:43,280
that

00:34:41,119 --> 00:34:45,119
you could have one user a misbehaving

00:34:43,280 --> 00:34:46,879
user who's making lots of requests

00:34:45,119 --> 00:34:48,079
maybe it's a misbehaving batch job for

00:34:46,879 --> 00:34:49,280
example that just sent a million

00:34:48,079 --> 00:34:51,440
requests

00:34:49,280 --> 00:34:52,639
per minute uh you know that that would

00:34:51,440 --> 00:34:54,079
block everybody else

00:34:52,639 --> 00:34:56,800
based on a rate limiting policy that's

00:34:54,079 --> 00:34:58,720
based off of x of api keys

00:34:56,800 --> 00:35:00,320
so as a result you want the most

00:34:58,720 --> 00:35:01,280
fine-grained rate limit that you can

00:35:00,320 --> 00:35:04,640
apply

00:35:01,280 --> 00:35:06,640
a jwt has those attributes like email

00:35:04,640 --> 00:35:08,960
that's typically unique you can rate

00:35:06,640 --> 00:35:10,000
limit not off the jwt itself

00:35:08,960 --> 00:35:12,320
because the user could just

00:35:10,000 --> 00:35:14,640
re-authenticate and get a new jwt

00:35:12,320 --> 00:35:15,920
over and over again you can rate limit

00:35:14,640 --> 00:35:17,200
just off of the email because that's

00:35:15,920 --> 00:35:20,400
going to stay the same no matter how

00:35:17,200 --> 00:35:20,400
many jwts they get

00:35:22,000 --> 00:35:25,599
all right so that first pattern that i

00:35:23,520 --> 00:35:26,400
talked a lot about was was rest api

00:35:25,599 --> 00:35:28,960
architectures

00:35:26,400 --> 00:35:29,599
microservice architectures are are very

00:35:28,960 --> 00:35:31,920
common

00:35:29,599 --> 00:35:33,359
and it's used so frequently i'm gonna

00:35:31,920 --> 00:35:35,280
spend a lot of time on it

00:35:33,359 --> 00:35:37,520
uh one one other thing that most

00:35:35,280 --> 00:35:39,040
enterprises will have

00:35:37,520 --> 00:35:41,040
is a content management solution at

00:35:39,040 --> 00:35:42,560
least one maybe you have more this could

00:35:41,040 --> 00:35:44,720
be wordpress there's a bunch of other

00:35:42,560 --> 00:35:47,599
vendors as well

00:35:44,720 --> 00:35:49,119
if you have an apache fronted type of

00:35:47,599 --> 00:35:51,920
content management system

00:35:49,119 --> 00:35:53,440
then using this this open source apache

00:35:51,920 --> 00:35:56,079
mod oidc

00:35:53,440 --> 00:35:57,119
module could makes a lot of sense so

00:35:56,079 --> 00:35:58,960
this works with

00:35:57,119 --> 00:36:00,400
several identity providers that has them

00:35:58,960 --> 00:36:02,880
listed out if you check out

00:36:00,400 --> 00:36:05,680
the website it provides authentication

00:36:02,880 --> 00:36:08,240
and some authorization capabilities

00:36:05,680 --> 00:36:09,200
it also does refreshing of jdbt's

00:36:08,240 --> 00:36:12,079
automatically

00:36:09,200 --> 00:36:12,560
which is really nice and then even for

00:36:12,079 --> 00:36:14,640
the

00:36:12,560 --> 00:36:16,640
the underlying application it's going to

00:36:14,640 --> 00:36:17,119
add an extra header so the underlying

00:36:16,640 --> 00:36:19,760
app

00:36:17,119 --> 00:36:20,480
will know you know who the current user

00:36:19,760 --> 00:36:22,400
was so that's

00:36:20,480 --> 00:36:24,240
sort of like a convenience thing but

00:36:22,400 --> 00:36:26,320
this is a great open source project

00:36:24,240 --> 00:36:27,760
it has a lot of support behind it as

00:36:26,320 --> 00:36:30,960
well and worth

00:36:27,760 --> 00:36:30,960
checking checking out

00:36:31,440 --> 00:36:36,160
so many so much buzz still around

00:36:34,800 --> 00:36:39,119
kubernetes it's become

00:36:36,160 --> 00:36:40,480
such a common application runtime the

00:36:39,119 --> 00:36:42,000
kubernetes ingress

00:36:40,480 --> 00:36:43,599
which by default is going to be based on

00:36:42,000 --> 00:36:45,520
nginx it has

00:36:43,599 --> 00:36:47,200
uh extensive support it's it's

00:36:45,520 --> 00:36:47,920
incredibly robust and i continue to be

00:36:47,200 --> 00:36:49,280
surprised but

00:36:47,920 --> 00:36:51,760
by all the things you can do with uh

00:36:49,280 --> 00:36:54,079
within ingress and kubernetes

00:36:51,760 --> 00:36:55,599
this is essentially the same as as the

00:36:54,079 --> 00:36:56,720
apache that we were just looking at it

00:36:55,599 --> 00:36:59,839
is a

00:36:56,720 --> 00:37:01,200
it is a a proxy any and all traffic is

00:36:59,839 --> 00:37:02,480
going to pass through this ingress

00:37:01,200 --> 00:37:04,240
before getting to the

00:37:02,480 --> 00:37:07,280
underlying application which is running

00:37:04,240 --> 00:37:09,359
in in kubernetes

00:37:07,280 --> 00:37:10,880
as you can see here i have some args

00:37:09,359 --> 00:37:12,560
specified so you're going to have your

00:37:10,880 --> 00:37:14,160
yaml your deployment ammo your ingress

00:37:12,560 --> 00:37:15,280
emo you're going to use some nginx

00:37:14,160 --> 00:37:17,200
annotations

00:37:15,280 --> 00:37:20,240
on your ingress yaml the deployment

00:37:17,200 --> 00:37:21,920
requires some configurations

00:37:20,240 --> 00:37:24,160
this this project by the way is

00:37:21,920 --> 00:37:27,280
recommended from the the kubernetes uh

00:37:24,160 --> 00:37:29,040
website um uh

00:37:27,280 --> 00:37:30,880
i meant to have the actual name the

00:37:29,040 --> 00:37:32,400
actual name as well on here but if

00:37:30,880 --> 00:37:34,320
if you go there to the kubernetes site

00:37:32,400 --> 00:37:34,880
it'll redirect you and uh or pointing to

00:37:34,320 --> 00:37:37,200
the right

00:37:34,880 --> 00:37:38,960
uh the right place you are going to

00:37:37,200 --> 00:37:40,320
configure some args such as your

00:37:38,960 --> 00:37:42,720
identity provider

00:37:40,320 --> 00:37:44,480
your cookie name but also those cookie

00:37:42,720 --> 00:37:45,280
attributes so this is a cookie-based

00:37:44,480 --> 00:37:47,839
approach

00:37:45,280 --> 00:37:49,520
after it authenticates you using oauth

00:37:47,839 --> 00:37:50,400
and it's using the authorization code

00:37:49,520 --> 00:37:52,079
grant type

00:37:50,400 --> 00:37:54,640
which is why you need a client secret as

00:37:52,079 --> 00:37:56,240
well as a client id to configure this

00:37:54,640 --> 00:37:58,000
it's doing that server side so it's more

00:37:56,240 --> 00:37:58,880
of a traditional type of authentication

00:37:58,000 --> 00:38:01,280
approach because it's using

00:37:58,880 --> 00:38:03,520
authorization code

00:38:01,280 --> 00:38:05,040
and it is going to set a cookie but this

00:38:03,520 --> 00:38:06,640
this is a great solution

00:38:05,040 --> 00:38:08,560
also works with a bunch of identity

00:38:06,640 --> 00:38:10,320
providers

00:38:08,560 --> 00:38:11,680
and it seems to be pretty robust and

00:38:10,320 --> 00:38:13,200
again there's a great community around

00:38:11,680 --> 00:38:15,119
this project

00:38:13,200 --> 00:38:16,480
i realize this is an open source con

00:38:15,119 --> 00:38:18,079
conference but i did want to talk about

00:38:16,480 --> 00:38:20,400
the fourth pattern of

00:38:18,079 --> 00:38:22,320
not using uh open source projects and

00:38:20,400 --> 00:38:23,920
instead going full cloud

00:38:22,320 --> 00:38:26,640
if i can jump in real quick just a five

00:38:23,920 --> 00:38:27,920
minute warning okay thank you

00:38:26,640 --> 00:38:29,680
if you're going full cloud meaning

00:38:27,920 --> 00:38:30,880
you're deploying your applications your

00:38:29,680 --> 00:38:32,320
identity tool

00:38:30,880 --> 00:38:34,400
everything is going into one of the big

00:38:32,320 --> 00:38:37,599
three clouds is what i'm referring to

00:38:34,400 --> 00:38:39,839
if you are uh doing that then yes

00:38:37,599 --> 00:38:41,200
it might be easier and faster of course

00:38:39,839 --> 00:38:43,359
you're going to pay for that pleasure of

00:38:41,200 --> 00:38:44,960
going so fast

00:38:43,359 --> 00:38:46,640
you will have the luxury of a single

00:38:44,960 --> 00:38:48,640
integration window

00:38:46,640 --> 00:38:50,000
which is really nice you know you can

00:38:48,640 --> 00:38:50,960
often configure authentication

00:38:50,000 --> 00:38:53,040
authorization

00:38:50,960 --> 00:38:54,240
if it's the rest api you can often even

00:38:53,040 --> 00:38:56,000
do the

00:38:54,240 --> 00:38:58,160
api gateway configuration all within

00:38:56,000 --> 00:38:58,720
that single pane so that's something

00:38:58,160 --> 00:39:02,560
that

00:38:58,720 --> 00:39:06,000
can be really convenient just less tools

00:39:02,560 --> 00:39:09,359
simpler as a result i in my experience

00:39:06,000 --> 00:39:09,359
you are really

00:39:09,760 --> 00:39:12,800
you have to use what they provide for

00:39:11,200 --> 00:39:15,680
you there's not a lot of extensibility

00:39:12,800 --> 00:39:17,760
there's not a lot of customization

00:39:15,680 --> 00:39:19,599
so one of the questions is what's what's

00:39:17,760 --> 00:39:20,480
the way to go should you go a full cloud

00:39:19,599 --> 00:39:21,839
approach

00:39:20,480 --> 00:39:23,920
i mean it really is going to depend on a

00:39:21,839 --> 00:39:25,920
number of factors like your budget

00:39:23,920 --> 00:39:27,760
where should you use open source what i

00:39:25,920 --> 00:39:28,960
have found is that using a cloud-based

00:39:27,760 --> 00:39:30,720
identity provider

00:39:28,960 --> 00:39:32,240
because it implements the specs because

00:39:30,720 --> 00:39:34,400
it forces you into good

00:39:32,240 --> 00:39:35,599
security postures things like expiring

00:39:34,400 --> 00:39:37,920
your jwt after an

00:39:35,599 --> 00:39:39,839
hour that going the identity cloud

00:39:37,920 --> 00:39:42,000
approach makes a lot of sense

00:39:39,839 --> 00:39:43,760
using enforcements whether it's the open

00:39:42,000 --> 00:39:44,960
source api gateway

00:39:43,760 --> 00:39:46,560
you know at the apache layer the

00:39:44,960 --> 00:39:47,680
kubernetes ingress doing the

00:39:46,560 --> 00:39:48,960
enforcements and the

00:39:47,680 --> 00:39:51,359
essentially the authentication

00:39:48,960 --> 00:39:53,520
verification of your jwts

00:39:51,359 --> 00:39:55,200
there are a lot of open source projects

00:39:53,520 --> 00:39:59,040
for that and i think that

00:39:55,200 --> 00:39:59,040
that approach uh works well

00:39:59,599 --> 00:40:02,800
all right so to wrap up here we started

00:40:01,440 --> 00:40:04,880
talking about cookies

00:40:02,800 --> 00:40:06,720
and traditional architectures then we

00:40:04,880 --> 00:40:09,440
went into microservices

00:40:06,720 --> 00:40:10,960
based architectures the question is

00:40:09,440 --> 00:40:12,079
should we avoid cookies are they so

00:40:10,960 --> 00:40:13,520
problematic that we shouldn't use

00:40:12,079 --> 00:40:16,240
cookies anymore

00:40:13,520 --> 00:40:17,359
it's tempting just to say you know no

00:40:16,240 --> 00:40:18,480
let's just not use cookies but

00:40:17,359 --> 00:40:20,079
realistically you're going to have

00:40:18,480 --> 00:40:21,760
content management systems

00:40:20,079 --> 00:40:23,359
you're going to have other types of web

00:40:21,760 --> 00:40:25,119
applications

00:40:23,359 --> 00:40:26,720
where you're going to want to use

00:40:25,119 --> 00:40:27,839
cookies in certain situations not

00:40:26,720 --> 00:40:29,760
everything is going to be

00:40:27,839 --> 00:40:32,240
a rest based architecture with a single

00:40:29,760 --> 00:40:33,760
page app with a with a jwt going back

00:40:32,240 --> 00:40:36,480
and forth

00:40:33,760 --> 00:40:38,480
oauth with jwts it strikes me as more

00:40:36,480 --> 00:40:40,319
modern and more robust you can support

00:40:38,480 --> 00:40:42,000
advanced clients type client types

00:40:40,319 --> 00:40:43,200
internet of things mobile apps things

00:40:42,000 --> 00:40:45,040
like that

00:40:43,200 --> 00:40:46,319
definitely there's a ton of terminology

00:40:45,040 --> 00:40:48,079
and concepts

00:40:46,319 --> 00:40:49,839
but fundamentally i think as long as

00:40:48,079 --> 00:40:50,480
you're not taking a do-it-yourself

00:40:49,839 --> 00:40:52,240
approach

00:40:50,480 --> 00:40:54,480
to oauth and jbts rather you're

00:40:52,240 --> 00:40:56,079
depending on a reliable identity tool

00:40:54,480 --> 00:40:58,720
i think that the that's an oauth

00:40:56,079 --> 00:41:01,280
approach with jdbts is going to be more

00:40:58,720 --> 00:41:03,119
secure either which way though uh

00:41:01,280 --> 00:41:04,880
whatever direction you choose

00:41:03,119 --> 00:41:06,800
i think that you you're going to have to

00:41:04,880 --> 00:41:07,920
do your your your security reviews your

00:41:06,800 --> 00:41:10,079
pen testing you're gonna have to look

00:41:07,920 --> 00:41:12,240
for application vulnerabilities

00:41:10,079 --> 00:41:14,079
uh you know things like security headers

00:41:12,240 --> 00:41:16,720
there's other cross-site scripting

00:41:14,079 --> 00:41:17,200
preventions um all of those things are

00:41:16,720 --> 00:41:20,079
still

00:41:17,200 --> 00:41:22,000
still a must but i think as long as you

00:41:20,079 --> 00:41:24,160
adhere to those

00:41:22,000 --> 00:41:25,200
security uh cookie security best

00:41:24,160 --> 00:41:27,200
practices

00:41:25,200 --> 00:41:28,880
or you go with an oauth dwt type of

00:41:27,200 --> 00:41:30,240
approach then cookie monster is going to

00:41:28,880 --> 00:41:31,760
be really sad because he's going to have

00:41:30,240 --> 00:41:33,040
a hard time

00:41:31,760 --> 00:41:34,880
he can have a hard time session

00:41:33,040 --> 00:41:37,359
hijacking and stealing cookies

00:41:34,880 --> 00:41:39,680
and impersonating users around the web

00:41:37,359 --> 00:41:42,240
website

00:41:39,680 --> 00:41:43,920
all right and that is the end of my

00:41:42,240 --> 00:41:44,480
slides and i'm happy to take a look at

00:41:43,920 --> 00:41:46,560
the

00:41:44,480 --> 00:41:48,319
questions now if there are you know what

00:41:46,560 --> 00:41:50,319
i i think it would be good uh

00:41:48,319 --> 00:41:52,079
sean if you could jump into the chat

00:41:50,319 --> 00:41:55,359
room and answer questions

00:41:52,079 --> 00:41:56,160
there like a quick slack channel kind of

00:41:55,359 --> 00:41:58,720
thing

00:41:56,160 --> 00:42:00,160
um also justin if you could cut and

00:41:58,720 --> 00:42:02,640
paste your question

00:42:00,160 --> 00:42:03,520
into the chat channel also sean can

00:42:02,640 --> 00:42:06,560
answer there

00:42:03,520 --> 00:42:09,680
i think it'd be good um

00:42:06,560 --> 00:42:12,160
sean as you're thinking about this

00:42:09,680 --> 00:42:14,839
what is the one major thing you'd like

00:42:12,160 --> 00:42:16,960
people to take away from this

00:42:14,839 --> 00:42:17,599
presentation yeah i mean i hope that

00:42:16,960 --> 00:42:19,760
people

00:42:17,599 --> 00:42:21,440
learn some things about oauth and openid

00:42:19,760 --> 00:42:24,560
connect and jwts and

00:42:21,440 --> 00:42:26,480
thought about uh how your uh your

00:42:24,560 --> 00:42:31,839
applications are approaching

00:42:26,480 --> 00:42:31,839
authentication and authorization

00:42:34,319 --> 00:42:36,400

YouTube URL: https://www.youtube.com/watch?v=5uF-dCRPA2A


