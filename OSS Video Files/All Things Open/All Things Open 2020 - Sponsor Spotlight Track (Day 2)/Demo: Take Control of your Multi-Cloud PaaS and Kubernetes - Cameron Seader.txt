Title: Demo: Take Control of your Multi-Cloud PaaS and Kubernetes - Cameron Seader
Publication date: 2020-12-18
Playlist: All Things Open 2020 - Sponsor Spotlight Track (Day 2)
Description: 
	Presented by: Cameron Seader, SUSE
Presented at All Things Open 2020 - Sponsor Spotlight Track (Day 2)

Abstract: SUSE will demonstrate how to take control of your multi-cloud deployment - whether it involves a full PaaS with Cloud Foundry or Kubernetes, there are key nuggets that everyone can use in their strategy today. We will show the integration with public and private, multi-cloud, cloud foundry, kubernetes, helm chart repositories, security scanning tools and more. All with a forms and click button approach that makes things quick and easy. It's also extensible! It's got it all, at least we think so.
Captions: 
	00:00:04,960 --> 00:00:08,000
so thanks everybody for joining

00:00:06,720 --> 00:00:09,920
um there's probably going to be more

00:00:08,000 --> 00:00:12,800
that will just kind of trickle in as we

00:00:09,920 --> 00:00:12,800
get moving here

00:00:13,120 --> 00:00:17,039
so my name is cameron cedar i've been

00:00:15,759 --> 00:00:20,400
with sousa for

00:00:17,039 --> 00:00:22,400
15 plus years supporting

00:00:20,400 --> 00:00:24,000
susa strategic opportunities and a lot

00:00:22,400 --> 00:00:25,359
of their premium customers over the

00:00:24,000 --> 00:00:26,880
years

00:00:25,359 --> 00:00:28,720
so hopefully i can use some of my

00:00:26,880 --> 00:00:30,560
experience

00:00:28,720 --> 00:00:32,320
and explain to you some of what we're

00:00:30,560 --> 00:00:35,440
doing here at susa

00:00:32,320 --> 00:00:39,040
um around multi-cloud

00:00:35,440 --> 00:00:41,600
uh multi-cluster management and uh

00:00:39,040 --> 00:00:42,960
what that really means to us and

00:00:41,600 --> 00:00:46,079
hopefully this is

00:00:42,960 --> 00:00:48,000
something that is a topic that is top of

00:00:46,079 --> 00:00:50,719
your mind as well

00:00:48,000 --> 00:00:52,480
again this is going back this is the

00:00:50,719 --> 00:00:53,920
kubernetes infrastructure that i'm

00:00:52,480 --> 00:00:55,039
running in this demonstration

00:00:53,920 --> 00:00:57,840
environment

00:00:55,039 --> 00:01:00,239
it's called cavs platform or container

00:00:57,840 --> 00:01:03,600
as a service platform

00:01:00,239 --> 00:01:07,680
so again three masternodes

00:01:03,600 --> 00:01:07,680
three worker nodes for the cluster

00:01:08,720 --> 00:01:12,320
and then on top of that the

00:01:10,960 --> 00:01:15,360
infrastructure for

00:01:12,320 --> 00:01:17,360
susa cloud application platform which is

00:01:15,360 --> 00:01:20,640
a platform as a service running

00:01:17,360 --> 00:01:22,000
on top of kubernetes i was just talking

00:01:20,640 --> 00:01:25,040
about the irene

00:01:22,000 --> 00:01:27,840
and quarks projects that allow us

00:01:25,040 --> 00:01:29,920
to run this cloud foundry framework on

00:01:27,840 --> 00:01:33,280
top of kubernetes

00:01:29,920 --> 00:01:36,720
so those provide the kubernetes operator

00:01:33,280 --> 00:01:38,240
and the scheduling engine to execute

00:01:36,720 --> 00:01:39,119
applications running on top of

00:01:38,240 --> 00:01:42,479
kubernetes

00:01:39,119 --> 00:01:44,479
for cloud foundry um and then i was

00:01:42,479 --> 00:01:45,520
explaining this particular diagram just

00:01:44,479 --> 00:01:47,759
last

00:01:45,520 --> 00:01:49,200
uh that explains all of the uh the

00:01:47,759 --> 00:01:51,280
containers

00:01:49,200 --> 00:01:54,240
uh that are part of the cloud

00:01:51,280 --> 00:01:57,439
application platform

00:01:54,240 --> 00:01:58,640
providing the run time the routing and

00:01:57,439 --> 00:02:02,079
access api

00:01:58,640 --> 00:02:04,960
and management infrastructure logging

00:02:02,079 --> 00:02:05,360
and various types of storage attachment

00:02:04,960 --> 00:02:09,840
and

00:02:05,360 --> 00:02:09,840
services attachment to your applications

00:02:11,120 --> 00:02:15,760
on top of that i wanted to kind of break

00:02:13,840 --> 00:02:16,800
out a little bit and speak just a little

00:02:15,760 --> 00:02:20,160
bit about

00:02:16,800 --> 00:02:20,840
uh workflows uh workflows when it comes

00:02:20,160 --> 00:02:26,560
to

00:02:20,840 --> 00:02:26,560
devops more importantly ci cd pipelines

00:02:26,720 --> 00:02:30,800
because i think it plays a big role when

00:02:29,040 --> 00:02:32,160
you have a kubernetes cluster up and

00:02:30,800 --> 00:02:34,239
running

00:02:32,160 --> 00:02:36,480
if you're doing any type of development

00:02:34,239 --> 00:02:39,599
you are also setting up

00:02:36,480 --> 00:02:43,440
a ci cd pipeline and

00:02:39,599 --> 00:02:44,000
this is what uh you know a platform as a

00:02:43,440 --> 00:02:47,440
service

00:02:44,000 --> 00:02:52,319
is famous for providing is a

00:02:47,440 --> 00:02:52,319
an opinionated view of a workflow

00:02:52,560 --> 00:02:56,080
and here's a typical workflow you know

00:02:54,879 --> 00:02:58,879
if you were to typically

00:02:56,080 --> 00:03:00,959
set this up on top of a kubernetes

00:02:58,879 --> 00:03:03,120
cluster

00:03:00,959 --> 00:03:04,640
you will more than likely use some sort

00:03:03,120 --> 00:03:07,120
of jenkins

00:03:04,640 --> 00:03:08,400
or a tool that provides some type of

00:03:07,120 --> 00:03:10,000
automation

00:03:08,400 --> 00:03:11,519
and i'll get to some of those more

00:03:10,000 --> 00:03:14,879
integrated tools

00:03:11,519 --> 00:03:17,920
and what those are but

00:03:14,879 --> 00:03:18,800
you going from your source code to your

00:03:17,920 --> 00:03:20,480
build environment

00:03:18,800 --> 00:03:23,680
jenkins is going to allow you to

00:03:20,480 --> 00:03:25,840
orchestrate that whole process

00:03:23,680 --> 00:03:26,959
for your workflow so when you're

00:03:25,840 --> 00:03:29,599
building out

00:03:26,959 --> 00:03:31,440
your application as a container and

00:03:29,599 --> 00:03:32,720
putting the source code and pairing that

00:03:31,440 --> 00:03:35,840
up with

00:03:32,720 --> 00:03:39,599
either a build pack or

00:03:35,840 --> 00:03:41,040
a container that has a specialized build

00:03:39,599 --> 00:03:43,040
environment

00:03:41,040 --> 00:03:46,640
for you to build your source code in and

00:03:43,040 --> 00:03:48,799
then output a docker container of sorts

00:03:46,640 --> 00:03:50,720
into a registry which can be launched or

00:03:48,799 --> 00:03:53,599
published into production

00:03:50,720 --> 00:03:54,400
on top of kubernetes all this stuff is

00:03:53,599 --> 00:03:57,439
going to be

00:03:54,400 --> 00:03:58,879
automated and orchestrated with the use

00:03:57,439 --> 00:04:01,200
of jenkins

00:03:58,879 --> 00:04:03,599
and then of course there's many other

00:04:01,200 --> 00:04:06,959
tools which you can choose from

00:04:03,599 --> 00:04:10,000
from the cncf foundation landscape

00:04:06,959 --> 00:04:13,280
to plug into this so it can get

00:04:10,000 --> 00:04:15,280
you know quite large

00:04:13,280 --> 00:04:16,959
there's lots of maintenance that goes on

00:04:15,280 --> 00:04:19,519
here when you're when you are

00:04:16,959 --> 00:04:21,359
maintaining workflow

00:04:19,519 --> 00:04:22,800
because there are several different

00:04:21,359 --> 00:04:25,280
pieces and parts

00:04:22,800 --> 00:04:27,360
uh to this particular workflow but it's

00:04:25,280 --> 00:04:30,880
all part of the development process

00:04:27,360 --> 00:04:34,080
and this is not much different than

00:04:30,880 --> 00:04:37,040
uh you know any java development

00:04:34,080 --> 00:04:38,080
uh from times past which still happened

00:04:37,040 --> 00:04:40,400
today

00:04:38,080 --> 00:04:42,400
um we've you know gone through the

00:04:40,400 --> 00:04:45,040
process of simplifying

00:04:42,400 --> 00:04:46,080
java development and you know putting

00:04:45,040 --> 00:04:49,840
java into

00:04:46,080 --> 00:04:53,199
war files and and launching those and

00:04:49,840 --> 00:04:54,720
and you know making it easy um

00:04:53,199 --> 00:04:57,120
not much different right we're just

00:04:54,720 --> 00:05:00,240
doing this with more languages now

00:04:57,120 --> 00:05:04,479
and creating these workflows to handle

00:05:00,240 --> 00:05:06,800
multiple languages but

00:05:04,479 --> 00:05:08,560
once you add a platform as a service to

00:05:06,800 --> 00:05:10,479
this infrastructure it becomes a little

00:05:08,560 --> 00:05:14,560
bit more opinionated

00:05:10,479 --> 00:05:16,880
you have this extended workflow

00:05:14,560 --> 00:05:19,759
that connects directly into this what we

00:05:16,880 --> 00:05:22,560
call a black box

00:05:19,759 --> 00:05:24,960
because it's doing some magic behind the

00:05:22,560 --> 00:05:26,000
scenes that you really don't see what's

00:05:24,960 --> 00:05:27,840
going on

00:05:26,000 --> 00:05:29,680
or you don't really understand or know

00:05:27,840 --> 00:05:32,479
what's going on

00:05:29,680 --> 00:05:34,960
maybe from an operator perspective from

00:05:32,479 --> 00:05:37,440
a developer you expect the platform to

00:05:34,960 --> 00:05:41,120
do as you tell it to do

00:05:37,440 --> 00:05:42,639
and just spit out my application to run

00:05:41,120 --> 00:05:45,360
that's what you wanted to do with this

00:05:42,639 --> 00:05:45,360
black box

00:05:45,600 --> 00:05:50,960
inside this black box on a typical

00:05:47,759 --> 00:05:50,960
platform as a service

00:05:51,199 --> 00:05:55,520
there's lots of things going on um for

00:05:53,919 --> 00:05:58,560
cloud foundry

00:05:55,520 --> 00:06:03,199
um this is a typical you know

00:05:58,560 --> 00:06:08,800
workflow of what's going on inside of

00:06:03,199 --> 00:06:11,280
coogcf or kubernetes cloud foundry

00:06:08,800 --> 00:06:13,120
and as you can see there is lots of

00:06:11,280 --> 00:06:17,600
things going on

00:06:13,120 --> 00:06:20,639
um when you actually are building the

00:06:17,600 --> 00:06:23,280
source code into a container

00:06:20,639 --> 00:06:24,800
doing some some qa testing of the

00:06:23,280 --> 00:06:26,000
container and then launching that

00:06:24,800 --> 00:06:30,720
container

00:06:26,000 --> 00:06:34,000
getting it ready pairing it up with your

00:06:30,720 --> 00:06:37,039
your build pack with the right language

00:06:34,000 --> 00:06:39,600
maybe connecting it to a a service

00:06:37,039 --> 00:06:42,720
that's part of the

00:06:39,600 --> 00:06:44,800
part of the application or connecting it

00:06:42,720 --> 00:06:47,280
to

00:06:44,800 --> 00:06:48,800
multiple services right you could have

00:06:47,280 --> 00:06:52,560
applications that are

00:06:48,800 --> 00:06:56,000
much larger in size than you know single

00:06:52,560 --> 00:06:57,680
uh or multiple pods on kubernetes

00:06:56,000 --> 00:06:59,280
you know the way that kubernetes sets

00:06:57,680 --> 00:07:00,720
things up today is

00:06:59,280 --> 00:07:02,960
uh they're not necessarily an

00:07:00,720 --> 00:07:06,000
application form

00:07:02,960 --> 00:07:06,479
there's multiple pods and multiple pods

00:07:06,000 --> 00:07:10,240
can

00:07:06,479 --> 00:07:13,680
form a single application and

00:07:10,240 --> 00:07:14,160
any one pod could have you know a dozen

00:07:13,680 --> 00:07:17,759
to

00:07:14,160 --> 00:07:20,960
maybe one container running in it

00:07:17,759 --> 00:07:25,120
and so a single application

00:07:20,960 --> 00:07:28,400
in you know in application speak

00:07:25,120 --> 00:07:29,199
it could be multiple pods and one

00:07:28,400 --> 00:07:32,240
application

00:07:29,199 --> 00:07:35,280
could consist of 15 to

00:07:32,240 --> 00:07:39,120
50 different containers all working

00:07:35,280 --> 00:07:39,120
together for a single application

00:07:39,759 --> 00:07:44,080
and so in the context of deploying

00:07:42,479 --> 00:07:48,400
applications and managing

00:07:44,080 --> 00:07:50,160
applications in a platform as a service

00:07:48,400 --> 00:07:51,840
that's why this becomes very very

00:07:50,160 --> 00:07:54,720
important because

00:07:51,840 --> 00:07:56,000
you can manage things much more

00:07:54,720 --> 00:07:58,800
efficiently

00:07:56,000 --> 00:08:01,120
and easier from an application point of

00:07:58,800 --> 00:08:01,120
view

00:08:02,080 --> 00:08:07,120
and some of these more opinionated

00:08:04,720 --> 00:08:09,520
integration points from a cicd

00:08:07,120 --> 00:08:11,039
system that are much more native to

00:08:09,520 --> 00:08:14,240
kubernetes are things like

00:08:11,039 --> 00:08:17,759
techton um drone or argo

00:08:14,240 --> 00:08:19,919
jenkins x is extremely popular and these

00:08:17,759 --> 00:08:21,919
all all these platforms that you see

00:08:19,919 --> 00:08:25,120
here provide a much more

00:08:21,919 --> 00:08:28,160
native uh cicd

00:08:25,120 --> 00:08:31,280
um pipeline

00:08:28,160 --> 00:08:33,360
that runs directly on kubernetes

00:08:31,280 --> 00:08:34,880
and you don't have to make any guesswork

00:08:33,360 --> 00:08:37,839
about what other things

00:08:34,880 --> 00:08:40,640
might get connected to it like jenkins

00:08:37,839 --> 00:08:40,640
and other things

00:08:41,120 --> 00:08:45,200
it has its own built-in orchestration

00:08:43,599 --> 00:08:50,560
automation

00:08:45,200 --> 00:08:54,160
that is provided well what if i want to

00:08:50,560 --> 00:08:56,000
take these and plug that directly into a

00:08:54,160 --> 00:08:59,040
platform as a service

00:08:56,000 --> 00:09:01,200
and this is where susa is spending some

00:08:59,040 --> 00:09:04,480
time working on

00:09:01,200 --> 00:09:06,560
how this all works and is fit together

00:09:04,480 --> 00:09:07,920
we're working on some deeper integration

00:09:06,560 --> 00:09:11,440
here

00:09:07,920 --> 00:09:12,000
between cicd platforms and platform as a

00:09:11,440 --> 00:09:15,760
service

00:09:12,000 --> 00:09:15,760
and how they can complement each other

00:09:16,080 --> 00:09:21,200
so whether it's using tecton whether

00:09:18,640 --> 00:09:23,600
it's using jenkins x for your build test

00:09:21,200 --> 00:09:26,880
and packaging

00:09:23,600 --> 00:09:29,120
more than likely you'll want to send

00:09:26,880 --> 00:09:31,360
that over to cloud foundry to package

00:09:29,120 --> 00:09:34,959
that up as an application

00:09:31,360 --> 00:09:38,480
and and deliver that on top

00:09:34,959 --> 00:09:40,880
of your kubernetes infrastructure

00:09:38,480 --> 00:09:43,200
and it typically would work in

00:09:40,880 --> 00:09:44,959
conjunction with a private registry that

00:09:43,200 --> 00:09:48,000
you might have in your environment

00:09:44,959 --> 00:09:49,440
such as harbor that comes with uh with

00:09:48,000 --> 00:09:52,800
susa

00:09:49,440 --> 00:09:53,519
cloud application platform and also

00:09:52,800 --> 00:09:56,959
integrating

00:09:53,519 --> 00:09:58,560
other additions there

00:09:56,959 --> 00:10:00,160
that might provide any type of

00:09:58,560 --> 00:10:01,680
monitoring logging

00:10:00,160 --> 00:10:04,079
those types of things that are required

00:10:01,680 --> 00:10:07,120
for managing

00:10:04,079 --> 00:10:11,360
an application with multiple

00:10:07,120 --> 00:10:11,360
pods and containers all together

00:10:11,440 --> 00:10:15,760
so susa is spending a lot of time doing

00:10:14,320 --> 00:10:19,040
this type of work

00:10:15,760 --> 00:10:22,880
and figuring out what the the best

00:10:19,040 --> 00:10:26,079
or opinionated view might be out there

00:10:22,880 --> 00:10:29,600
um and more than likely

00:10:26,079 --> 00:10:31,680
plugging in directly to cloud foundry

00:10:29,600 --> 00:10:33,279
uh with your own opinionated view

00:10:31,680 --> 00:10:35,440
whether it's tekton or

00:10:33,279 --> 00:10:36,880
jenkins x or something you've already

00:10:35,440 --> 00:10:39,920
built

00:10:36,880 --> 00:10:44,800
that's fine you can plug those in

00:10:39,920 --> 00:10:44,800
directly to cloud foundry today

00:10:45,600 --> 00:10:53,440
so also building out a richer

00:10:49,279 --> 00:10:56,320
management experience when it comes to

00:10:53,440 --> 00:10:57,279
managing both kubernetes the underlying

00:10:56,320 --> 00:11:00,079
layer

00:10:57,279 --> 00:11:03,680
and also the platform on top whether

00:11:00,079 --> 00:11:05,440
that's cloud foundry and all the other

00:11:03,680 --> 00:11:06,530
workflow pieces that we just talked

00:11:05,440 --> 00:11:08,079
about

00:11:06,530 --> 00:11:10,240
[Music]

00:11:08,079 --> 00:11:13,920
you know sousa is working on building

00:11:10,240 --> 00:11:16,160
out a better management experience using

00:11:13,920 --> 00:11:18,160
what's called the stratos console which

00:11:16,160 --> 00:11:19,760
comes with both our container as a

00:11:18,160 --> 00:11:23,519
service platform

00:11:19,760 --> 00:11:26,800
and our cloud application platform

00:11:23,519 --> 00:11:28,720
and for kubernetes we've been able to

00:11:26,800 --> 00:11:31,680
have the ability to connect up to

00:11:28,720 --> 00:11:35,200
multiple kubernetes endpoints

00:11:31,680 --> 00:11:38,000
so you could be managing one cluster

00:11:35,200 --> 00:11:39,120
or you can be managing five or more

00:11:38,000 --> 00:11:42,320
clusters

00:11:39,120 --> 00:11:45,440
from a single stratos

00:11:42,320 --> 00:11:47,120
management platform and we can

00:11:45,440 --> 00:11:50,320
authenticate to

00:11:47,120 --> 00:11:53,440
you know azure aws google

00:11:50,320 --> 00:11:58,160
um susacas platform and other

00:11:53,440 --> 00:11:58,160
kubernetes distributions as well

00:11:59,920 --> 00:12:03,920
so the view here is really aimed at

00:12:02,720 --> 00:12:07,680
trying to best

00:12:03,920 --> 00:12:10,240
manage a kubernetes cluster it also has

00:12:07,680 --> 00:12:12,240
an embedded kubernetes dashboard so it

00:12:10,240 --> 00:12:15,200
comes directly from the upstream

00:12:12,240 --> 00:12:17,440
which you can install directly using the

00:12:15,200 --> 00:12:21,279
stratos console itself

00:12:17,440 --> 00:12:21,680
and it does that by utilizing the helm

00:12:21,279 --> 00:12:25,839
chart

00:12:21,680 --> 00:12:25,839
capabilities within stratos

00:12:26,160 --> 00:12:30,000
another addition is prometheus and

00:12:29,120 --> 00:12:33,440
grafana

00:12:30,000 --> 00:12:35,360
for the metrics gathering throughout the

00:12:33,440 --> 00:12:37,519
entire cluster

00:12:35,360 --> 00:12:39,200
which it actually will run on all of

00:12:37,519 --> 00:12:41,440
your nodes

00:12:39,200 --> 00:12:42,959
and do all your metrics gathering

00:12:41,440 --> 00:12:46,639
logging

00:12:42,959 --> 00:12:50,639
and export all those logs into

00:12:46,639 --> 00:12:53,600
into cloud foundry both for kubernetes

00:12:50,639 --> 00:12:54,800
and for the cloud foundry that's running

00:12:53,600 --> 00:12:58,320
on top of

00:12:54,800 --> 00:12:58,320
the kubernetes infrastructure

00:12:59,920 --> 00:13:04,079
and all this all the stratos views that

00:13:02,320 --> 00:13:05,760
you see both in cloud foundry and

00:13:04,079 --> 00:13:08,959
kubernetes

00:13:05,760 --> 00:13:10,399
all those metrics that are gathered

00:13:08,959 --> 00:13:14,160
there

00:13:10,399 --> 00:13:14,639
those are all extended and connected

00:13:14,160 --> 00:13:18,639
with

00:13:14,639 --> 00:13:24,399
the the prometheus metrics endpoint

00:13:18,639 --> 00:13:24,399
that is set up within stratos

00:13:25,050 --> 00:13:29,920
[Music]

00:13:26,560 --> 00:13:32,160
there's also helm endpoints so if you

00:13:29,920 --> 00:13:32,959
have helm repositories that you like to

00:13:32,160 --> 00:13:35,600
use

00:13:32,959 --> 00:13:37,360
because it provides some very specific

00:13:35,600 --> 00:13:38,720
applications that you require in your

00:13:37,360 --> 00:13:41,600
environment

00:13:38,720 --> 00:13:44,079
then feel free to add those as endpoints

00:13:41,600 --> 00:13:48,880
within the stratos console

00:13:44,079 --> 00:13:51,839
and you can browse

00:13:48,880 --> 00:13:53,519
you can browse the helm chart repository

00:13:51,839 --> 00:13:55,760
like a marketplace

00:13:53,519 --> 00:13:57,360
and by a click of a button you can click

00:13:55,760 --> 00:14:00,959
install

00:13:57,360 --> 00:14:02,880
you can modify the values file directly

00:14:00,959 --> 00:14:04,959
from the interface

00:14:02,880 --> 00:14:06,639
and you can click install and it will

00:14:04,959 --> 00:14:09,600
directly install

00:14:06,639 --> 00:14:10,639
that helm chart directly in the stratos

00:14:09,600 --> 00:14:14,959
console

00:14:10,639 --> 00:14:18,320
so it makes a nice market place for

00:14:14,959 --> 00:14:22,399
for application deployment right inside

00:14:18,320 --> 00:14:22,399
uh the console itself

00:14:25,360 --> 00:14:33,600
and now i want to shift

00:14:29,040 --> 00:14:33,600
to showing you um

00:14:33,760 --> 00:14:37,519
a little bit of a demonstration here

00:14:40,160 --> 00:14:43,839
this here is the stratos console i'm

00:14:42,639 --> 00:14:48,320
just going to log in as

00:14:43,839 --> 00:14:48,320
administrator and

00:14:49,519 --> 00:14:54,079
i'm going to increase the font just a

00:14:52,399 --> 00:14:56,959
little bit

00:14:54,079 --> 00:14:56,959
not too large

00:14:57,600 --> 00:15:01,440
the first thing that i want to show you

00:15:02,639 --> 00:15:08,240
um is the end points

00:15:06,079 --> 00:15:09,120
and i just want to show you end points

00:15:08,240 --> 00:15:11,120
because

00:15:09,120 --> 00:15:13,040
you know you'll notice that in this

00:15:11,120 --> 00:15:14,959
particular setup

00:15:13,040 --> 00:15:18,480
i've got multiple endpoints in fact i

00:15:14,959 --> 00:15:22,519
have i've got helm chart repositories

00:15:18,480 --> 00:15:24,320
i've got a couple of those ones the

00:15:22,519 --> 00:15:27,519
kubernetescharts.susa.com

00:15:24,320 --> 00:15:28,360
i've also got a helm chart repository

00:15:27,519 --> 00:15:30,959
for

00:15:28,360 --> 00:15:32,240
eclipse.org so they have some helm

00:15:30,959 --> 00:15:36,160
charts out there for

00:15:32,240 --> 00:15:38,880
the uh for eclipse like eclipse shea

00:15:36,160 --> 00:15:40,399
and some other things uh more

00:15:38,880 --> 00:15:43,600
specifically for

00:15:40,399 --> 00:15:45,759
um managing their edge platforms

00:15:43,600 --> 00:15:47,440
um and then we've got a couple of

00:15:45,759 --> 00:15:51,279
different uh

00:15:47,440 --> 00:15:52,480
uh sousa cloud application platform

00:15:51,279 --> 00:15:55,759
environments

00:15:52,480 --> 00:15:58,959
i've got one that's uh the

00:15:55,759 --> 00:16:01,680
the susa developer sandbox

00:15:58,959 --> 00:16:05,279
if you're not familiar with that i

00:16:01,680 --> 00:16:05,279
certainly urge you to go out to

00:16:05,639 --> 00:16:10,639
explore.susa.dev

00:16:07,440 --> 00:16:14,320
and check out that url

00:16:10,639 --> 00:16:17,519
and you can get access to your own

00:16:14,320 --> 00:16:19,759
sandbox environment to do

00:16:17,519 --> 00:16:20,880
do your own development in i believe it

00:16:19,759 --> 00:16:24,399
gives you about

00:16:20,880 --> 00:16:26,480
10 gigabytes of of memory

00:16:24,399 --> 00:16:29,120
it has some limited resources but it

00:16:26,480 --> 00:16:30,959
gives you a nice idea of how this system

00:16:29,120 --> 00:16:32,800
actually works

00:16:30,959 --> 00:16:34,959
we also provide you with some sample

00:16:32,800 --> 00:16:38,240
applications you can play around with

00:16:34,959 --> 00:16:41,519
or you can develop your own put your own

00:16:38,240 --> 00:16:44,560
java code in there or whatever it is

00:16:41,519 --> 00:16:45,279
ruby python whatever you like to program

00:16:44,560 --> 00:16:48,320
in

00:16:45,279 --> 00:16:50,320
drop your own code in there and and run

00:16:48,320 --> 00:16:53,120
it

00:16:50,320 --> 00:16:56,399
and see how you like the environment

00:16:53,120 --> 00:16:56,399
it's really powerful to use

00:16:56,639 --> 00:17:01,519
there's also a connection to the

00:16:59,600 --> 00:17:02,240
kubernetes environment that's attached

00:17:01,519 --> 00:17:05,439
here

00:17:02,240 --> 00:17:07,839
on susadojo.com

00:17:05,439 --> 00:17:09,199
and then i also have prometheus i don't

00:17:07,839 --> 00:17:12,880
think the prometheus

00:17:09,199 --> 00:17:16,079
is working properly with this little

00:17:12,880 --> 00:17:19,520
um warning sign there

00:17:16,079 --> 00:17:22,959
um but not to worry that's okay

00:17:19,520 --> 00:17:26,799
i will still be able to show you uh

00:17:22,959 --> 00:17:29,200
some really cool stuff um

00:17:26,799 --> 00:17:31,600
so going from end points and looking at

00:17:29,200 --> 00:17:34,640
the left hand side you'll see

00:17:31,600 --> 00:17:37,840
helm this will be populated once you

00:17:34,640 --> 00:17:40,960
have helm repositories

00:17:37,840 --> 00:17:43,840
helm repository endpoints added

00:17:40,960 --> 00:17:45,440
and this is just a nice little view you

00:17:43,840 --> 00:17:50,080
can either do a list view

00:17:45,440 --> 00:17:52,320
or a grid view of the applications

00:17:50,080 --> 00:17:54,559
but you can search through these or you

00:17:52,320 --> 00:17:59,200
can filter them by name

00:17:54,559 --> 00:17:59,200
i could install a hardware registry

00:17:59,440 --> 00:18:06,400
i could set up an nginx ingress

00:18:02,960 --> 00:18:08,720
uh controller um

00:18:06,400 --> 00:18:10,880
of course prometheus is in in here we

00:18:08,720 --> 00:18:15,039
also have from susa

00:18:10,880 --> 00:18:17,760
our rook seth deployment

00:18:15,039 --> 00:18:20,160
so if you wanted to set up seth storage

00:18:17,760 --> 00:18:22,400
on your kubernetes cluster

00:18:20,160 --> 00:18:23,600
for a hyper converged configuration of

00:18:22,400 --> 00:18:26,840
ceph

00:18:23,600 --> 00:18:28,320
you could do that through this interface

00:18:26,840 --> 00:18:31,760
here

00:18:28,320 --> 00:18:32,799
kubernetes once you have the end point

00:18:31,760 --> 00:18:34,720
there if you

00:18:32,799 --> 00:18:37,679
are looking at the list on the left hand

00:18:34,720 --> 00:18:39,600
side this is kind of a neat

00:18:37,679 --> 00:18:41,120
view into your kubernetes your

00:18:39,600 --> 00:18:42,960
kubernetes cluster although it doesn't

00:18:41,120 --> 00:18:46,480
give you everything

00:18:42,960 --> 00:18:49,440
from the summary page it does give you

00:18:46,480 --> 00:18:51,120
you know some idea of how many resources

00:18:49,440 --> 00:18:53,840
you're using

00:18:51,120 --> 00:18:55,840
i've got 125 pods running in this

00:18:53,840 --> 00:18:58,960
particular cluster

00:18:55,840 --> 00:19:00,559
which isn't a lot in comparison to many

00:18:58,960 --> 00:19:03,600
production environments you're going to

00:19:00,559 --> 00:19:06,240
see hundreds to thousands of pods

00:19:03,600 --> 00:19:09,120
deployed in production environments

00:19:06,240 --> 00:19:11,280
but it also has the advantage here of

00:19:09,120 --> 00:19:13,440
hitting configure

00:19:11,280 --> 00:19:14,880
and if i didn't have the dashboard

00:19:13,440 --> 00:19:17,440
installed already

00:19:14,880 --> 00:19:18,960
it would have an option here to install

00:19:17,440 --> 00:19:21,039
the dashboard

00:19:18,960 --> 00:19:23,280
and it will basically grab that using

00:19:21,039 --> 00:19:25,520
the helm chart

00:19:23,280 --> 00:19:27,919
but instead since it's already installed

00:19:25,520 --> 00:19:30,960
i can click view dashboard

00:19:27,919 --> 00:19:34,160
and directly in the stratus console i

00:19:30,960 --> 00:19:36,000
can pull up the kubernetes console

00:19:34,160 --> 00:19:37,280
and this will give me some extended

00:19:36,000 --> 00:19:40,640
information

00:19:37,280 --> 00:19:43,280
about my kubernetes cluster i can view

00:19:40,640 --> 00:19:44,080
the services that are available and i

00:19:43,280 --> 00:19:46,960
can view them

00:19:44,080 --> 00:19:51,039
in many of the different name spaces my

00:19:46,960 --> 00:19:51,039
kubernetes system name space

00:19:51,120 --> 00:19:57,520
um my longhorn

00:19:54,160 --> 00:20:01,440
storage namespace

00:19:57,520 --> 00:20:03,360
um i have my monitoring namespace this

00:20:01,440 --> 00:20:06,320
is for prometheus

00:20:03,360 --> 00:20:08,320
and you can see where those points you

00:20:06,320 --> 00:20:10,960
can see where the external endpoints are

00:20:08,320 --> 00:20:14,480
and i can open up a browser

00:20:10,960 --> 00:20:17,440
to those endpoints directly

00:20:14,480 --> 00:20:19,440
and then i can open up my my prometheus

00:20:17,440 --> 00:20:21,919
using that

00:20:19,440 --> 00:20:24,320
the kubernetes dashboard is really handy

00:20:21,919 --> 00:20:26,960
for system administrators to

00:20:24,320 --> 00:20:29,520
really manage kubernetes save you some

00:20:26,960 --> 00:20:32,840
it'll save your fingers

00:20:29,520 --> 00:20:34,000
from typing a lot of the coupe control

00:20:32,840 --> 00:20:35,760
commands

00:20:34,000 --> 00:20:38,640
that many of the kubernetes

00:20:35,760 --> 00:20:42,159
administrators get quite used to

00:20:38,640 --> 00:20:45,039
in the environment we at soosa also

00:20:42,159 --> 00:20:45,840
have in our package repositories other

00:20:45,039 --> 00:20:49,919
tools like

00:20:45,840 --> 00:20:51,679
k9s um which is also very handy as well

00:20:49,919 --> 00:20:54,080
in addition to

00:20:51,679 --> 00:20:56,240
this kubernetes dashboard but you can

00:20:54,080 --> 00:20:56,960
also visualize all your workloads as

00:20:56,240 --> 00:20:59,919
well

00:20:56,960 --> 00:21:02,799
and get a nice workload status view of

00:20:59,919 --> 00:21:06,799
all the pods that are running there

00:21:02,799 --> 00:21:08,799
and get an understanding of of the

00:21:06,799 --> 00:21:11,039
of what the resources really are looking

00:21:08,799 --> 00:21:11,039
like

00:21:13,200 --> 00:21:16,720
and then of course your cluster nodes in

00:21:15,360 --> 00:21:18,799
general

00:21:16,720 --> 00:21:20,960
here's all the six nodes that i have

00:21:18,799 --> 00:21:23,280
running in this particular cluster

00:21:20,960 --> 00:21:26,080
the cpu utilization and the memory

00:21:23,280 --> 00:21:30,320
utilization across the board

00:21:26,080 --> 00:21:30,320
all the namespaces i have created

00:21:30,880 --> 00:21:36,960
storage classes that i have created

00:21:35,200 --> 00:21:39,039
so this is very valuable anything that

00:21:36,960 --> 00:21:41,760
you can

00:21:39,039 --> 00:21:44,000
query from a coupe control command you

00:21:41,760 --> 00:21:46,880
can pretty much see here in kubernetes

00:21:44,000 --> 00:21:48,480
dashboard it doesn't have everything

00:21:46,880 --> 00:21:52,720
however

00:21:48,480 --> 00:21:55,280
so anything that you want to do with uh

00:21:52,720 --> 00:21:56,240
you know that revolves around any type

00:21:55,280 --> 00:21:58,720
of

00:21:56,240 --> 00:22:00,640
security or service accounts those types

00:21:58,720 --> 00:22:02,240
of things

00:22:00,640 --> 00:22:04,640
those all have to be handled through a

00:22:02,240 --> 00:22:08,480
lot of command line interfaces

00:22:04,640 --> 00:22:10,240
um secrets management

00:22:08,480 --> 00:22:12,320
you know although you can view secrets

00:22:10,240 --> 00:22:15,520
here the creation

00:22:12,320 --> 00:22:19,360
and um the better use of

00:22:15,520 --> 00:22:21,039
that is all done through command line um

00:22:19,360 --> 00:22:23,840
so that's powerful do i always i don't

00:22:21,039 --> 00:22:26,400
spend a whole lot of time with that

00:22:23,840 --> 00:22:29,440
another thing that that you'll notice

00:22:26,400 --> 00:22:32,640
here is cloud foundry

00:22:29,440 --> 00:22:35,520
now i can pick and choose what

00:22:32,640 --> 00:22:38,400
what endpoint i want to connect to

00:22:35,520 --> 00:22:42,159
what's really powerful about this is

00:22:38,400 --> 00:22:45,360
you get a really good idea of that i'm

00:22:42,159 --> 00:22:49,919
i'm able to from a single pane of glass

00:22:45,360 --> 00:22:53,039
uh manage multi-cluster and multi-cloud

00:22:49,919 --> 00:22:55,039
these two in kubernetes excuse me cloud

00:22:53,039 --> 00:22:58,320
foundry environments

00:22:55,039 --> 00:23:00,880
are ones on prem and

00:22:58,320 --> 00:23:02,159
this other one here the the susa dev

00:23:00,880 --> 00:23:05,440
environment

00:23:02,159 --> 00:23:05,440
or the sandbox

00:23:05,600 --> 00:23:10,720
is located in the amazon cloud

00:23:11,440 --> 00:23:15,840
so i'm truly managing a multi-cloud

00:23:14,000 --> 00:23:17,120
environment using this console here

00:23:15,840 --> 00:23:20,159
today

00:23:17,120 --> 00:23:22,960
if i connect up to the sandbox

00:23:20,159 --> 00:23:23,840
i can get more of a summary view of

00:23:22,960 --> 00:23:27,440
what's going on

00:23:23,840 --> 00:23:29,360
in this particular cluster

00:23:27,440 --> 00:23:32,240
but more importantly i can understand

00:23:29,360 --> 00:23:35,120
what cloud foundry is all about

00:23:32,240 --> 00:23:35,120
just from this view

00:23:35,360 --> 00:23:42,400
i actually have build packs

00:23:38,720 --> 00:23:46,400
so these will allow me to build

00:23:42,400 --> 00:23:49,440
ingen x java ruby

00:23:46,400 --> 00:23:50,880
i have many different languages that are

00:23:49,440 --> 00:23:54,880
supported here i've got

00:23:50,880 --> 00:23:58,080
go and php nodejs

00:23:54,880 --> 00:23:59,440
so pick your favorite language i'm sure

00:23:58,080 --> 00:24:02,799
that we can build it out here

00:23:59,440 --> 00:24:06,720
even your.net core if you're

00:24:02,799 --> 00:24:06,720
if you like to develop in.net

00:24:08,480 --> 00:24:11,919
and then of course we've got routes i do

00:24:11,200 --> 00:24:15,440
have

00:24:11,919 --> 00:24:18,159
a 12 factor application running

00:24:15,440 --> 00:24:21,600
i can take a look at the applications

00:24:18,159 --> 00:24:21,600
that are running in this environment

00:24:21,840 --> 00:24:25,360
you'll notice the one at the bottom here

00:24:23,440 --> 00:24:28,080
where it says 12 factor

00:24:25,360 --> 00:24:29,120
or i can go to the very top on the left

00:24:28,080 --> 00:24:31,760
hand side and click

00:24:29,120 --> 00:24:32,480
applications and this will give me an

00:24:31,760 --> 00:24:36,400
overall

00:24:32,480 --> 00:24:39,600
view of every one of my endpoints

00:24:36,400 --> 00:24:42,320
so in conjunction together and i can do

00:24:39,600 --> 00:24:45,440
filters so if i don't want to view

00:24:42,320 --> 00:24:47,360
all endpoints and all applications

00:24:45,440 --> 00:24:49,760
across all endpoints

00:24:47,360 --> 00:24:51,039
then i can change that to just viewing

00:24:49,760 --> 00:24:52,799
the dev sandbox

00:24:51,039 --> 00:24:54,480
and it will show me all applications

00:24:52,799 --> 00:24:59,200
that are running in

00:24:54,480 --> 00:25:02,480
the dev sandbox or i can look at

00:24:59,200 --> 00:25:06,240
my on-prem deployment and view the

00:25:02,480 --> 00:25:06,240
applications that are running there

00:25:06,559 --> 00:25:12,240
so it gives you a nice ability ability

00:25:09,520 --> 00:25:14,799
to filter out and

00:25:12,240 --> 00:25:16,000
see multiple endpoints together if

00:25:14,799 --> 00:25:19,760
you're managing

00:25:16,000 --> 00:25:23,679
uh multi-cluster uh or multi-cloud

00:25:19,760 --> 00:25:26,880
together in the stratos console

00:25:23,679 --> 00:25:27,360
um so that scales pretty well um as far

00:25:26,880 --> 00:25:30,960
as

00:25:27,360 --> 00:25:30,960
as its management goes

00:25:31,279 --> 00:25:36,080
um let's take a look at an application

00:25:34,559 --> 00:25:36,720
because that's kind of the fun part

00:25:36,080 --> 00:25:38,799
about this

00:25:36,720 --> 00:25:41,279
is actually deploying applications and

00:25:38,799 --> 00:25:43,039
just seeing how easy it is

00:25:41,279 --> 00:25:44,559
to launch an application in this

00:25:43,039 --> 00:25:46,480
environment

00:25:44,559 --> 00:25:47,679
i'm going to look more specifically at

00:25:46,480 --> 00:25:49,760
the

00:25:47,679 --> 00:25:51,440
dev sandbox and we'll look at this 12

00:25:49,760 --> 00:25:54,000
factor application

00:25:51,440 --> 00:25:54,960
and i picked this one because this

00:25:54,000 --> 00:25:59,520
actually

00:25:54,960 --> 00:26:01,840
ties with a redis database

00:25:59,520 --> 00:26:05,039
there's nothing really that special with

00:26:01,840 --> 00:26:08,799
this particular application

00:26:05,039 --> 00:26:13,200
but it does bind itself to

00:26:08,799 --> 00:26:16,320
a redis database now if i want to see

00:26:13,200 --> 00:26:19,120
those services running i can click on

00:26:16,320 --> 00:26:20,960
services on the left

00:26:19,120 --> 00:26:24,279
and you'll notice i've got multiple

00:26:20,960 --> 00:26:27,679
services here i've got a rabbitmq

00:26:24,279 --> 00:26:31,600
postgresql mariadb

00:26:27,679 --> 00:26:34,480
and revis what's really nice about

00:26:31,600 --> 00:26:35,440
the services within cloud foundry is

00:26:34,480 --> 00:26:38,559
that you can

00:26:35,440 --> 00:26:41,919
create these services

00:26:38,559 --> 00:26:44,080
that are running on top of kubernetes

00:26:41,919 --> 00:26:44,960
but you can bind these services to your

00:26:44,080 --> 00:26:48,159
application

00:26:44,960 --> 00:26:50,640
so that when you are writing your code

00:26:48,159 --> 00:26:53,360
you can directly write that code to this

00:26:50,640 --> 00:26:56,720
common service api

00:26:53,360 --> 00:26:59,360
and get access to the service no matter

00:26:56,720 --> 00:27:00,559
if it's a you know some type of a sql

00:26:59,360 --> 00:27:03,679
database

00:27:00,559 --> 00:27:04,960
or a messaging queue or redis

00:27:03,679 --> 00:27:07,039
and there's many others that you can

00:27:04,960 --> 00:27:09,360
choose from

00:27:07,039 --> 00:27:10,080
so you notice that this redis one

00:27:09,360 --> 00:27:13,360
actually has

00:27:10,080 --> 00:27:15,200
an application that's attached to it and

00:27:13,360 --> 00:27:17,360
you can have more than one application

00:27:15,200 --> 00:27:21,200
attached to a service

00:27:17,360 --> 00:27:24,240
you could have a dozen or more right

00:27:21,200 --> 00:27:26,080
you can scale this out quite large but

00:27:24,240 --> 00:27:27,200
the application that's actually attached

00:27:26,080 --> 00:27:29,039
to this

00:27:27,200 --> 00:27:31,760
i think this is actually that could

00:27:29,039 --> 00:27:33,279
unbind it if i wanted to

00:27:31,760 --> 00:27:36,880
the application that's tied to this is

00:27:33,279 --> 00:27:36,880
the 12 factor application

00:27:38,159 --> 00:27:41,679
and if i wanted to i could completely

00:27:40,880 --> 00:27:44,240
restage

00:27:41,679 --> 00:27:46,320
or i could stop let's go ahead and just

00:27:44,240 --> 00:27:50,080
stop this application

00:27:46,320 --> 00:27:52,080
it's now offline i can restage

00:27:50,080 --> 00:27:53,600
this application let's go ahead and

00:27:52,080 --> 00:27:57,039
restage it

00:27:53,600 --> 00:27:59,200
what that will do is it will go through

00:27:57,039 --> 00:28:01,679
the complete build process of the

00:27:59,200 --> 00:28:06,399
application itself

00:28:01,679 --> 00:28:10,799
and so let's go ahead and show that

00:28:06,399 --> 00:28:10,799
it's actually started up restaging

00:28:11,279 --> 00:28:17,840
see if it will show the staging process

00:28:25,520 --> 00:28:30,559
and maybe i'm not connected to the

00:28:28,840 --> 00:28:44,240
sandbox

00:28:30,559 --> 00:28:47,919
there's our 12 factor

00:28:44,240 --> 00:28:49,200
and yeah so you can see in our staging

00:28:47,919 --> 00:28:52,480
here

00:28:49,200 --> 00:28:54,000
through the log stream that uh

00:28:52,480 --> 00:28:56,399
you'll notice through the log stream

00:28:54,000 --> 00:29:02,000
it's doing our staging it's actually

00:28:56,399 --> 00:29:02,000
running the install of these particular

00:29:02,720 --> 00:29:07,520
libraries and things required to run

00:29:05,120 --> 00:29:10,640
this 12-factor application

00:29:07,520 --> 00:29:12,799
and then it's going to actually

00:29:10,640 --> 00:29:14,799
create a container here it's using the

00:29:12,799 --> 00:29:17,840
diego cell

00:29:14,799 --> 00:29:19,440
in order to do some uh some testing of

00:29:17,840 --> 00:29:21,120
the application

00:29:19,440 --> 00:29:23,120
um destroying and creating that

00:29:21,120 --> 00:29:26,080
container

00:29:23,120 --> 00:29:26,960
i'm sorry to interrupt um it's now 205

00:29:26,080 --> 00:29:30,000
eastern

00:29:26,960 --> 00:29:31,679
we have about 10 minutes um remaining so

00:29:30,000 --> 00:29:32,720
if you want to start the q a now you

00:29:31,679 --> 00:29:34,159
certainly can

00:29:32,720 --> 00:29:36,960
or if you just like to continue the

00:29:34,159 --> 00:29:39,360
presentation um feel free

00:29:36,960 --> 00:29:41,039
um we do have one raised hand in the

00:29:39,360 --> 00:29:43,360
audience i'm

00:29:41,039 --> 00:29:45,279
not sure if this person has a question

00:29:43,360 --> 00:29:46,960
or if they were just um

00:29:45,279 --> 00:29:50,159
one of the people nice enough to help us

00:29:46,960 --> 00:29:52,000
out with the display issue

00:29:50,159 --> 00:29:53,840
so if you have any questions please type

00:29:52,000 --> 00:29:55,520
them into the chat window or the q a

00:29:53,840 --> 00:29:58,640
window

00:29:55,520 --> 00:30:01,440
and cameron will get to them as he

00:29:58,640 --> 00:30:01,440
as he has time

00:30:02,159 --> 00:30:06,399
yeah thank you any questions up to this

00:30:05,600 --> 00:30:08,320
point

00:30:06,399 --> 00:30:11,760
on the demonstration and kind of what

00:30:08,320 --> 00:30:11,760
you've seen here today

00:30:14,320 --> 00:30:18,480
is this something that's useful for you

00:30:20,840 --> 00:30:23,840
all

00:30:25,039 --> 00:30:30,799
and then once the application is is

00:30:27,679 --> 00:30:34,640
restaged and redeployed i can actually

00:30:30,799 --> 00:30:37,520
it creates a route a dynamic route so

00:30:34,640 --> 00:30:41,440
i can open that route up and there's my

00:30:37,520 --> 00:30:41,440
12 factor application running

00:30:41,600 --> 00:30:45,520
this is all the 12 factor app is

00:30:46,399 --> 00:30:50,480
and here's the random route that it

00:30:48,840 --> 00:30:53,600
created

00:30:50,480 --> 00:30:57,760
it basically used the application name

00:30:53,600 --> 00:30:57,760
and my name space name

00:30:58,159 --> 00:31:02,399
and then tied that in that random route

00:31:00,559 --> 00:31:05,440
into

00:31:02,399 --> 00:31:09,360
the uh the soosa dev environment

00:31:05,440 --> 00:31:12,720
environment um and you can see those

00:31:09,360 --> 00:31:15,919
routes within the console as well

00:31:12,720 --> 00:31:17,440
so if you go to routes

00:31:15,919 --> 00:31:20,320
you'll see that route here that's

00:31:17,440 --> 00:31:22,240
created so every application that has a

00:31:20,320 --> 00:31:23,840
random route that's created or any type

00:31:22,240 --> 00:31:28,559
of route

00:31:23,840 --> 00:31:28,559
you can actually see those listed here

00:31:30,480 --> 00:31:36,000
the log stream is available um

00:31:33,760 --> 00:31:37,600
you know throughout this environment so

00:31:36,000 --> 00:31:40,240
you can grab

00:31:37,600 --> 00:31:41,679
uh it's basically just a fire hose of

00:31:40,240 --> 00:31:45,679
events

00:31:41,679 --> 00:31:48,000
throughout the uh the application stack

00:31:45,679 --> 00:31:50,240
so this is specifically this log stream

00:31:48,000 --> 00:31:51,440
is specifically for the application 12

00:31:50,240 --> 00:31:54,960
factor

00:31:51,440 --> 00:31:54,960
but if i wanted to take a look at

00:31:55,679 --> 00:31:58,960
there's the services tied to the 12

00:31:57,600 --> 00:32:01,840
factor app

00:31:58,960 --> 00:32:01,840
which is the redis

00:32:02,480 --> 00:32:05,840
and any of the variables that are

00:32:05,120 --> 00:32:08,000
plugged in

00:32:05,840 --> 00:32:09,840
in particular for this application you

00:32:08,000 --> 00:32:12,880
can visualize those

00:32:09,840 --> 00:32:12,880
you'll notice all the

00:32:13,440 --> 00:32:17,039
password information and keys and all

00:32:15,679 --> 00:32:21,279
that stuff

00:32:17,039 --> 00:32:23,519
that's all through this variables um

00:32:21,279 --> 00:32:23,519
this

00:32:25,760 --> 00:32:31,360
events so events over time

00:32:29,440 --> 00:32:33,519
like it's going to log all these events

00:32:31,360 --> 00:32:35,039
over time so you can get a historical

00:32:33,519 --> 00:32:36,640
view of what's going on with this

00:32:35,039 --> 00:32:40,240
particular application

00:32:36,640 --> 00:32:42,080
i could set up a scaling policy to scale

00:32:40,240 --> 00:32:43,360
up the application based on certain

00:32:42,080 --> 00:32:47,440
events

00:32:43,360 --> 00:32:52,000
whether it's resource type events

00:32:47,440 --> 00:32:55,519
like cpu utilization networking

00:32:52,000 --> 00:32:57,360
or memory

00:32:55,519 --> 00:32:58,880
constraints various things of that

00:32:57,360 --> 00:33:02,000
nature

00:32:58,880 --> 00:33:04,240
um if i wanted to take a look at cloud

00:33:02,000 --> 00:33:06,799
foundry as a whole

00:33:04,240 --> 00:33:09,760
from the cloud foundry cluster i could

00:33:06,799 --> 00:33:13,279
go into that cluster and take a look at

00:33:09,760 --> 00:33:13,279
the logging here as well

00:33:13,360 --> 00:33:16,720
i can look at the events

00:33:17,200 --> 00:33:24,960
across the cluster i can look at

00:33:21,039 --> 00:33:27,679
the quotas for each one of the

00:33:24,960 --> 00:33:29,519
various organizations so i have a

00:33:27,679 --> 00:33:31,519
sandbox organization

00:33:29,519 --> 00:33:33,200
you can see the quota limits for that

00:33:31,519 --> 00:33:36,159
particular

00:33:33,200 --> 00:33:38,320
sandbox organization you could have

00:33:36,159 --> 00:33:41,440
multiple organizations set up

00:33:38,320 --> 00:33:43,799
so it gives you a level of multi-tenancy

00:33:41,440 --> 00:33:45,679
so if you're looking for a type of

00:33:43,799 --> 00:33:48,960
tenancy-based

00:33:45,679 --> 00:33:52,240
quota arrangement on top of kubernetes

00:33:48,960 --> 00:33:56,320
this will provide that for you

00:33:52,240 --> 00:34:01,120
with organizations and name spaces

00:33:56,320 --> 00:34:04,840
you know and applying quotas to those

00:34:01,120 --> 00:34:06,240
here's the the organization security

00:34:04,840 --> 00:34:07,840
groups

00:34:06,240 --> 00:34:10,159
all the build packs that are available

00:34:07,840 --> 00:34:11,599
for it

00:34:10,159 --> 00:34:13,919
and here's the organizations that you

00:34:11,599 --> 00:34:15,679
can drill down into and all the spaces

00:34:13,919 --> 00:34:21,119
that are tied to that organization

00:34:15,679 --> 00:34:24,399
etc um

00:34:21,119 --> 00:34:26,960
any other questions anybody else have

00:34:24,399 --> 00:34:26,960
questions

00:34:31,200 --> 00:34:35,040
we have about five minutes remaining so

00:34:33,040 --> 00:34:37,119
if there are no questions

00:34:35,040 --> 00:34:38,399
feel free to use the rest of the time

00:34:37,119 --> 00:34:40,240
for uh

00:34:38,399 --> 00:34:49,760
general discussions or any other

00:34:40,240 --> 00:34:52,960
comments that you would like to make

00:34:49,760 --> 00:34:54,480
very well i don't have any more stuff to

00:34:52,960 --> 00:34:58,720
show you

00:34:54,480 --> 00:35:00,960
um maybe i will show you this is the

00:34:58,720 --> 00:35:03,200
on-prem environment

00:35:00,960 --> 00:35:04,079
but these feature flags have to be

00:35:03,200 --> 00:35:05,680
enabled

00:35:04,079 --> 00:35:08,400
in order for you to see some of these

00:35:05,680 --> 00:35:11,119
things like the fire hose

00:35:08,400 --> 00:35:12,960
um if i wanted to see all of my logging

00:35:11,119 --> 00:35:16,880
throughout the entire cluster

00:35:12,960 --> 00:35:18,800
i can also disable some of these metrics

00:35:16,880 --> 00:35:20,320
and i if i want to just show errors or

00:35:18,800 --> 00:35:23,359
if i just want to show

00:35:20,320 --> 00:35:25,680
logs from the applications across the

00:35:23,359 --> 00:35:28,240
cluster then i can just show those

00:35:25,680 --> 00:35:30,000
otherwise these counters and metrics are

00:35:28,240 --> 00:35:33,119
just going to be scrolling quite

00:35:30,000 --> 00:35:34,480
fast most of that you're

00:35:33,119 --> 00:35:38,400
not going to understand unless you're

00:35:34,480 --> 00:35:38,400
doing some debugging of your application

00:35:42,160 --> 00:35:46,400
and of course if you have admin rights

00:35:44,560 --> 00:35:51,040
you can see things like users

00:35:46,400 --> 00:35:55,839
and and uh various other features within

00:35:51,040 --> 00:35:58,079
um within the cloud foundry environment

00:35:55,839 --> 00:36:00,160
we do have a question in the q a window

00:35:58,079 --> 00:36:01,119
um probably the last one we have time

00:36:00,160 --> 00:36:05,839
for

00:36:01,119 --> 00:36:07,920
okay uh can cloud foundry be deployed in

00:36:05,839 --> 00:36:10,000
a container

00:36:07,920 --> 00:36:11,280
can cloud foundry be deployed in a

00:36:10,000 --> 00:36:14,510
container

00:36:11,280 --> 00:36:16,079
in a single computer

00:36:14,510 --> 00:36:20,720
[Music]

00:36:16,079 --> 00:36:20,720
now of course there are ways of

00:36:21,680 --> 00:36:28,079
in our current deployment yesterday

00:36:24,960 --> 00:36:31,760
version 2.1 came out

00:36:28,079 --> 00:36:34,960
and it is it is slick

00:36:31,760 --> 00:36:38,079
um i was able to install it in about 12

00:36:34,960 --> 00:36:39,200
minutes so you can have a full cloud

00:36:38,079 --> 00:36:42,640
foundry environment

00:36:39,200 --> 00:36:45,839
a default setup in 12 minutes running on

00:36:42,640 --> 00:36:45,839
top of kubernetes

00:36:46,000 --> 00:36:51,710
that's pretty fast it used to take about

00:36:48,720 --> 00:36:52,960
25 minutes to half an hour

00:36:51,710 --> 00:36:57,440
[Music]

00:36:52,960 --> 00:37:00,640
and so 12 minutes is quick um it has

00:36:57,440 --> 00:37:04,720
um there's probably more than two dozen

00:37:00,640 --> 00:37:06,480
uh maybe three dozen containers

00:37:04,720 --> 00:37:08,720
because there are a lot of components

00:37:06,480 --> 00:37:10,079
working together so putting it into a

00:37:08,720 --> 00:37:12,560
single container

00:37:10,079 --> 00:37:23,119
that's not going to work with the cloud

00:37:12,560 --> 00:37:23,119

YouTube URL: https://www.youtube.com/watch?v=A8HVjDSs_tg


