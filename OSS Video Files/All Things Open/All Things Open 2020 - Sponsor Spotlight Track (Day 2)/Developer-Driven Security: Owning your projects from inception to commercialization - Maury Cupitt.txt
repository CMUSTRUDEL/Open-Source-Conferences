Title: Developer-Driven Security: Owning your projects from inception to commercialization - Maury Cupitt
Publication date: 2020-12-18
Playlist: All Things Open 2020 - Sponsor Spotlight Track (Day 2)
Description: 
	Presented by: Maury Cupitt, Sonatype
Presented at All Things Open 2020 - Sponsor Spotlight Track (Day 2)

Abstract: Triaging and remediating security issues in your projects can be a pain, especially when you’re given a long list of tasks to complete at the end of a deployment. How can we make the build process as seamless as possible for dev teams? Join this session with Maury in a discussion about making developer’s lives easier. Learn how to upgrade components with the least amount of effort, avoid versions that will completely break your project, and how to avoid dangerous components from the get-go.
Captions: 
	00:00:05,040 --> 00:00:09,440
uh welcome today's talk

00:00:06,640 --> 00:00:11,040
uh good morning good afternoon uh really

00:00:09,440 --> 00:00:13,599
going to be focused on open source

00:00:11,040 --> 00:00:14,639
software how we can as developers own

00:00:13,599 --> 00:00:17,359
our projects from an

00:00:14,639 --> 00:00:18,560
inception to commercialization how do we

00:00:17,359 --> 00:00:20,240
how do we actually

00:00:18,560 --> 00:00:23,119
secure our applications and build our

00:00:20,240 --> 00:00:26,000
applications uh securely and quickly

00:00:23,119 --> 00:00:26,720
uh like a lot of folks at um all things

00:00:26,000 --> 00:00:29,199
open

00:00:26,720 --> 00:00:30,640
uh i'm kind of a jack of all trades i've

00:00:29,199 --> 00:00:31,279
been lucky enough to be with some of the

00:00:30,640 --> 00:00:34,480
best

00:00:31,279 --> 00:00:35,280
internet-based startups in the in the

00:00:34,480 --> 00:00:37,120
world really

00:00:35,280 --> 00:00:38,719
uh have a bachelor of fine arts in

00:00:37,120 --> 00:00:40,879
theatrical sound design so

00:00:38,719 --> 00:00:42,239
kind of all over the place i love all

00:00:40,879 --> 00:00:43,920
things open because it's right down the

00:00:42,239 --> 00:00:44,160
road for me i'm in durham north carolina

00:00:43,920 --> 00:00:46,160
i

00:00:44,160 --> 00:00:47,680
was in raleigh i missed the t-shirt

00:00:46,160 --> 00:00:50,079
drive but um

00:00:47,680 --> 00:00:52,160
like you said feel free to ask questions

00:00:50,079 --> 00:00:55,680
or put questions in the in the chat room

00:00:52,160 --> 00:00:57,600
um and uh we'll just go from there

00:00:55,680 --> 00:00:59,440
so why are we here right why why are we

00:00:57,600 --> 00:01:02,000
here learning about open source

00:00:59,440 --> 00:01:03,680
uh things open things why are we

00:01:02,000 --> 00:01:06,880
building software

00:01:03,680 --> 00:01:08,799
uh we've at sonotype really talked about

00:01:06,880 --> 00:01:10,799
the software supply chain so one of the

00:01:08,799 --> 00:01:11,600
things to associate the software supply

00:01:10,799 --> 00:01:14,560
chain with is

00:01:11,600 --> 00:01:15,759
a real supply chain and when you have uh

00:01:14,560 --> 00:01:18,159
edward stemming

00:01:15,759 --> 00:01:19,040
um you know decades old quotes of you

00:01:18,159 --> 00:01:20,720
know what are we to

00:01:19,040 --> 00:01:22,720
what are we trying to do why are we here

00:01:20,720 --> 00:01:24,080
i think it's important even now is

00:01:22,720 --> 00:01:25,360
we're trying to create a consistency of

00:01:24,080 --> 00:01:26,080
purpose and dedication to the

00:01:25,360 --> 00:01:27,920
improvement

00:01:26,080 --> 00:01:29,840
of competitive position to keep the

00:01:27,920 --> 00:01:31,600
company alive and to provide jobs

00:01:29,840 --> 00:01:33,360
for their employees so whether we work

00:01:31,600 --> 00:01:34,079
for a large organization we work for

00:01:33,360 --> 00:01:36,159
ourselves

00:01:34,079 --> 00:01:37,680
we're building open source projects

00:01:36,159 --> 00:01:40,000
we're really trying to

00:01:37,680 --> 00:01:41,520
to improve our competitive position in

00:01:40,000 --> 00:01:42,720
the end that improves the world that

00:01:41,520 --> 00:01:45,439
improves our lives

00:01:42,720 --> 00:01:45,840
provides jobs right we miss we miss

00:01:45,439 --> 00:01:48,479
those

00:01:45,840 --> 00:01:50,079
um those outcomes and anything anything

00:01:48,479 --> 00:01:51,600
that happens anything we do and any

00:01:50,079 --> 00:01:54,880
process that we put in place

00:01:51,600 --> 00:01:56,960
that hinders that is going to hurt us so

00:01:54,880 --> 00:01:58,640
how are we how we decided that we're

00:01:56,960 --> 00:02:01,119
going to do this right well

00:01:58,640 --> 00:02:03,119
we've decided that faster is better

00:02:01,119 --> 00:02:05,200
right through digital transformation

00:02:03,119 --> 00:02:07,439
so rather than say let's go faster well

00:02:05,200 --> 00:02:10,000
let's do a digital transformation

00:02:07,439 --> 00:02:12,560
and for us digital transformation we're

00:02:10,000 --> 00:02:14,640
focused on devops agile ci cd

00:02:12,560 --> 00:02:16,160
security whatever you want to call it

00:02:14,640 --> 00:02:16,959
it's about delivering value to our

00:02:16,160 --> 00:02:19,680
customers

00:02:16,959 --> 00:02:20,800
faster right and more securely with

00:02:19,680 --> 00:02:23,120
better quality

00:02:20,800 --> 00:02:24,239
so that we can do that desired outcome

00:02:23,120 --> 00:02:26,640
right

00:02:24,239 --> 00:02:28,080
so is fast really good and what what can

00:02:26,640 --> 00:02:31,760
go wrong

00:02:28,080 --> 00:02:34,879
i think in my work with our customers

00:02:31,760 --> 00:02:37,200
it's this this notion of the the process

00:02:34,879 --> 00:02:38,720
kind of takes over right so beware of

00:02:37,200 --> 00:02:41,040
the proxies the process becomes the

00:02:38,720 --> 00:02:42,560
proxy for the result that you want

00:02:41,040 --> 00:02:44,239
if you stop looking at that outcome we

00:02:42,560 --> 00:02:46,800
know what the outcome is and you're just

00:02:44,239 --> 00:02:48,480
looking at the process

00:02:46,800 --> 00:02:50,319
this is gonna fall apart because the the

00:02:48,480 --> 00:02:51,920
process is not the thing

00:02:50,319 --> 00:02:54,400
and a lot of times when we talk about

00:02:51,920 --> 00:02:56,080
building software and securing it and

00:02:54,400 --> 00:02:58,319
and having different silos having

00:02:56,080 --> 00:03:00,000
different jobs we end up focusing on

00:02:58,319 --> 00:03:01,599
that process rather than focusing on

00:03:00,000 --> 00:03:03,599
what that desired outcome is

00:03:01,599 --> 00:03:05,760
we want to build the best uh best

00:03:03,599 --> 00:03:07,120
software the best product that we can

00:03:05,760 --> 00:03:09,120
so that we can provide value to our

00:03:07,120 --> 00:03:11,920
customers right um

00:03:09,120 --> 00:03:13,360
having said that uh we are uh we are

00:03:11,920 --> 00:03:14,480
going faster we're trying to deliver

00:03:13,360 --> 00:03:16,560
value faster

00:03:14,480 --> 00:03:18,720
so how are we doing it developers are

00:03:16,560 --> 00:03:21,280
getting faster right and it's no secret

00:03:18,720 --> 00:03:24,400
we're we're using open source software

00:03:21,280 --> 00:03:26,159
as the means to go faster 90 of the

00:03:24,400 --> 00:03:28,159
application that i build is made up of

00:03:26,159 --> 00:03:30,400
open source and third-party components

00:03:28,159 --> 00:03:31,680
right i want that i want that speed

00:03:30,400 --> 00:03:33,760
there because i want to focus

00:03:31,680 --> 00:03:34,959
my efforts on solving my business's

00:03:33,760 --> 00:03:37,360
problem solving on

00:03:34,959 --> 00:03:39,040
uh solving that problem right so i'm

00:03:37,360 --> 00:03:40,879
using open source components to build

00:03:39,040 --> 00:03:41,840
those to piece those together

00:03:40,879 --> 00:03:43,680
and it's becoming more and more

00:03:41,840 --> 00:03:44,400
complicated it's not just picking one

00:03:43,680 --> 00:03:46,720
language

00:03:44,400 --> 00:03:48,640
and sticking with it um almost every

00:03:46,720 --> 00:03:50,000
web-based application has a combination

00:03:48,640 --> 00:03:51,440
of the back-end language and the

00:03:50,000 --> 00:03:53,280
front-end language right so if you're

00:03:51,440 --> 00:03:55,200
doing java and javascript or

00:03:53,280 --> 00:03:57,280
node all the way if you're doing data

00:03:55,200 --> 00:03:58,879
science you've got the python side of it

00:03:57,280 --> 00:04:00,720
right so you're in the trillions of

00:03:58,879 --> 00:04:03,760
downloads of open source components

00:04:00,720 --> 00:04:04,560
across the the enterprise and if you and

00:04:03,760 --> 00:04:06,159
if you look at

00:04:04,560 --> 00:04:07,439
not just the component that you want but

00:04:06,159 --> 00:04:09,519
all the transit of dependencies it

00:04:07,439 --> 00:04:13,120
becomes even more and more complicated

00:04:09,519 --> 00:04:14,879
um something like a uh react from uh in

00:04:13,120 --> 00:04:16,000
the javascript world we'll install over

00:04:14,879 --> 00:04:18,639
a thousand dependencies

00:04:16,000 --> 00:04:20,400
right so how do we manage this open uh

00:04:18,639 --> 00:04:21,919
open source risk and how do we do it

00:04:20,400 --> 00:04:24,000
at scale and do we have governance

00:04:21,919 --> 00:04:26,080
policies in place the reality is

00:04:24,000 --> 00:04:27,759
we really don't a lot of times we don't

00:04:26,080 --> 00:04:31,520
know what's actually in there

00:04:27,759 --> 00:04:33,600
so what we end up having folks do is

00:04:31,520 --> 00:04:35,120
recognize that right these open source

00:04:33,600 --> 00:04:37,440
components are part

00:04:35,120 --> 00:04:38,880
of our application and they're critical

00:04:37,440 --> 00:04:40,880
their critical foundation

00:04:38,880 --> 00:04:42,320
to that application so we must we must

00:04:40,880 --> 00:04:43,040
need to secure it we must need to

00:04:42,320 --> 00:04:46,720
understand

00:04:43,040 --> 00:04:48,479
uh what's in it and what happens is we

00:04:46,720 --> 00:04:50,000
put in these processes that generate

00:04:48,479 --> 00:04:51,680
unplanned work

00:04:50,000 --> 00:04:53,199
right so if we're trying to go really

00:04:51,680 --> 00:04:54,400
really fast what is what is that

00:04:53,199 --> 00:04:57,040
unplanned work that's there that's

00:04:54,400 --> 00:05:00,800
causing us to slow down

00:04:57,040 --> 00:05:02,400
and uh in in um

00:05:00,800 --> 00:05:04,880
in the the title of the talk it really

00:05:02,400 --> 00:05:07,280
is you know how how can i

00:05:04,880 --> 00:05:09,120
continue to build software quickly

00:05:07,280 --> 00:05:10,720
without having all of this unplanned

00:05:09,120 --> 00:05:13,120
work and what are some typical

00:05:10,720 --> 00:05:14,800
unplanned work pieces here uh security

00:05:13,120 --> 00:05:16,320
scans late in the sdlc

00:05:14,800 --> 00:05:17,600
are the number one in our world so if

00:05:16,320 --> 00:05:18,479
we're trying to secure the open source

00:05:17,600 --> 00:05:20,080
components

00:05:18,479 --> 00:05:21,280
the the thought is i need to list all

00:05:20,080 --> 00:05:22,639
the open source components and

00:05:21,280 --> 00:05:25,039
third-party components and

00:05:22,639 --> 00:05:26,800
i need to generate a list of all the uh

00:05:25,039 --> 00:05:28,320
vulnerabilities in the world that ever

00:05:26,800 --> 00:05:30,080
ever associated with that and if i'm

00:05:28,320 --> 00:05:31,360
using a docker container i need to look

00:05:30,080 --> 00:05:34,160
at the os level and

00:05:31,360 --> 00:05:35,600
generate all the vulnerabilities for all

00:05:34,160 --> 00:05:36,960
the os level components that the

00:05:35,600 --> 00:05:39,680
developer is never going to change

00:05:36,960 --> 00:05:40,000
individually anyway right and i'm just

00:05:39,680 --> 00:05:41,840
going to

00:05:40,000 --> 00:05:43,199
generate that report and then give it to

00:05:41,840 --> 00:05:44,160
the developer and they're magically

00:05:43,199 --> 00:05:47,680
going to fix it

00:05:44,160 --> 00:05:51,199
nope you've just created a whole

00:05:47,680 --> 00:05:53,680
mess load of unplanned work right

00:05:51,199 --> 00:05:55,520
you you think you know before optimizing

00:05:53,680 --> 00:05:57,360
this process you get quotes like

00:05:55,520 --> 00:05:58,880
it was very time consuming and expensive

00:05:57,360 --> 00:06:00,479
reworking issues that were identified

00:05:58,880 --> 00:06:03,600
late in the stlc

00:06:00,479 --> 00:06:06,240
oh that's a little typo there sldc um

00:06:03,600 --> 00:06:06,800
as you come through right you're you're

00:06:06,240 --> 00:06:09,600
you're

00:06:06,800 --> 00:06:11,280
wanting to reduce lead time right but

00:06:09,600 --> 00:06:13,280
again let's just go back to devops

00:06:11,280 --> 00:06:14,560
handbook let's go back to any of the

00:06:13,280 --> 00:06:16,639
books that we've been reading over the

00:06:14,560 --> 00:06:18,960
past uh five years

00:06:16,639 --> 00:06:20,560
reducing lead time increasing the the

00:06:18,960 --> 00:06:23,759
speed with which we deliver

00:06:20,560 --> 00:06:25,440
value to our customers um one of the

00:06:23,759 --> 00:06:27,440
things that that's been frustrating me

00:06:25,440 --> 00:06:29,199
in the in this process lately is this

00:06:27,440 --> 00:06:30,800
oh well we're going to solve it by

00:06:29,199 --> 00:06:32,080
shifting left right we're going to let

00:06:30,800 --> 00:06:33,919
the developers

00:06:32,080 --> 00:06:35,840
uh secure the code and what's that

00:06:33,919 --> 00:06:38,240
really what really has come out is

00:06:35,840 --> 00:06:39,520
this shifting left has been like a work

00:06:38,240 --> 00:06:42,400
worst practice

00:06:39,520 --> 00:06:42,880
where all we've allowed the developer do

00:06:42,400 --> 00:06:45,039
to do

00:06:42,880 --> 00:06:46,479
is generate that list of vulnerabilities

00:06:45,039 --> 00:06:48,080
without giving them the tools that they

00:06:46,479 --> 00:06:50,479
need to help remediate that problem

00:06:48,080 --> 00:06:52,000
right to quickly fix the problem so me

00:06:50,479 --> 00:06:55,039
as a developer how do i

00:06:52,000 --> 00:06:56,560
how do i help security by

00:06:55,039 --> 00:06:58,319
fixing these problems earlier i don't

00:06:56,560 --> 00:07:00,720
want to help security by generating this

00:06:58,319 --> 00:07:02,479
all-encompassing list of vulnerabilities

00:07:00,720 --> 00:07:04,400
and then as a security team

00:07:02,479 --> 00:07:06,000
if i'm going to do this scan later in

00:07:04,400 --> 00:07:08,080
the life cycle how do i provide that

00:07:06,000 --> 00:07:11,039
data back to the development teams

00:07:08,080 --> 00:07:12,880
to help them prioritize that work right

00:07:11,039 --> 00:07:15,039
anything like an automated pr

00:07:12,880 --> 00:07:16,000
an automated pr a pull request is

00:07:15,039 --> 00:07:17,280
unplanned work

00:07:16,000 --> 00:07:19,039
right we want to eliminate this

00:07:17,280 --> 00:07:19,759
unplanned work and put the processes in

00:07:19,039 --> 00:07:23,199
place

00:07:19,759 --> 00:07:26,319
um that allow us to do that so

00:07:23,199 --> 00:07:28,080
um what does sonotype think well

00:07:26,319 --> 00:07:30,080
we really believe that right we need we

00:07:28,080 --> 00:07:31,680
need to accelerate in this notion of

00:07:30,080 --> 00:07:34,560
devsecops early

00:07:31,680 --> 00:07:36,800
everywhere at scale and the again the

00:07:34,560 --> 00:07:38,400
whole goal here is

00:07:36,800 --> 00:07:39,840
whether we're generating open source

00:07:38,400 --> 00:07:41,199
software for people or

00:07:39,840 --> 00:07:43,280
we work for a company that needs to

00:07:41,199 --> 00:07:45,280
increase revenue through faster product

00:07:43,280 --> 00:07:47,440
release cycles or

00:07:45,280 --> 00:07:49,680
through improved competitiveness we need

00:07:47,440 --> 00:07:52,560
to be able to provide

00:07:49,680 --> 00:07:53,440
this level of security early everywhere

00:07:52,560 --> 00:07:55,840
at scale because

00:07:53,440 --> 00:07:57,280
early is the place that we as developers

00:07:55,840 --> 00:07:58,240
are going to be able to have the biggest

00:07:57,280 --> 00:08:00,560
impact

00:07:58,240 --> 00:08:01,919
and be able to provide uh the work

00:08:00,560 --> 00:08:03,919
that's needed to be done

00:08:01,919 --> 00:08:05,440
to fix the problem because in the end if

00:08:03,919 --> 00:08:07,599
security comes in and says

00:08:05,440 --> 00:08:09,039
hey here's a list of things and i have a

00:08:07,599 --> 00:08:10,479
version number that you need to go to

00:08:09,039 --> 00:08:12,240
still got to go to development to

00:08:10,479 --> 00:08:15,759
actually validate that that

00:08:12,240 --> 00:08:18,400
that version's gonna work right so

00:08:15,759 --> 00:08:20,479
um if we can layer on top of that uh

00:08:18,400 --> 00:08:22,800
open source governance policies across

00:08:20,479 --> 00:08:24,319
all of the life cycle so the developers

00:08:22,800 --> 00:08:25,840
know that they're building software

00:08:24,319 --> 00:08:27,599
based on policy

00:08:25,840 --> 00:08:29,280
that's going to make it through to

00:08:27,599 --> 00:08:31,680
production right so

00:08:29,280 --> 00:08:33,039
for us it's not just about the security

00:08:31,680 --> 00:08:35,279
vulnerabilities but it's

00:08:33,039 --> 00:08:36,959
providing policy around the open source

00:08:35,279 --> 00:08:40,399
components that i use

00:08:36,959 --> 00:08:43,120
that provide security legal advice and

00:08:40,399 --> 00:08:44,080
uh architecture right so security legal

00:08:43,120 --> 00:08:45,760
and architecture

00:08:44,080 --> 00:08:47,279
and i want to know and pick the best

00:08:45,760 --> 00:08:48,480
components based on that policy

00:08:47,279 --> 00:08:50,080
not the ones that have the least

00:08:48,480 --> 00:08:51,279
vulnerabilities because the one that has

00:08:50,080 --> 00:08:53,279
the least vulnerabilities and doesn't

00:08:51,279 --> 00:08:54,959
have the right license and is 15 years

00:08:53,279 --> 00:08:57,680
old is that really the one i want

00:08:54,959 --> 00:08:59,360
uh in production so having a platform

00:08:57,680 --> 00:09:01,839
that provides

00:08:59,360 --> 00:09:02,399
this overall governance of open source

00:09:01,839 --> 00:09:04,800
components

00:09:02,399 --> 00:09:05,519
that's used at every stage becomes uh

00:09:04,800 --> 00:09:07,040
incredibly

00:09:05,519 --> 00:09:10,720
important because right now that the

00:09:07,040 --> 00:09:12,560
process is manual the developer

00:09:10,720 --> 00:09:14,399
i'll put in a request for component

00:09:12,560 --> 00:09:16,399
legal team has to look at it

00:09:14,399 --> 00:09:18,000
um the security team has to look at they

00:09:16,399 --> 00:09:19,920
have to do all the research

00:09:18,000 --> 00:09:21,200
before they approve it guess what i'm

00:09:19,920 --> 00:09:22,880
probably using that component while

00:09:21,200 --> 00:09:24,640
they're doing the approval process

00:09:22,880 --> 00:09:26,480
uh six to eight weeks is the typical

00:09:24,640 --> 00:09:28,480
manual process and we can automate that

00:09:26,480 --> 00:09:30,640
right because we have this consistent

00:09:28,480 --> 00:09:34,959
gover uh consistency

00:09:30,640 --> 00:09:38,000
of policy across all of my applications

00:09:34,959 --> 00:09:40,480
and um as part of this as the developers

00:09:38,000 --> 00:09:41,920
let's let's drive in dive into the early

00:09:40,480 --> 00:09:45,760
piece of it right

00:09:41,920 --> 00:09:46,480
uh if i can get to solving the open

00:09:45,760 --> 00:09:48,640
source

00:09:46,480 --> 00:09:50,320
vulnerabilities and securing using the

00:09:48,640 --> 00:09:51,600
open source components i have earlier

00:09:50,320 --> 00:09:53,120
i'm going to save time i'm going to save

00:09:51,600 --> 00:09:54,399
money right i'm reducing the amount of

00:09:53,120 --> 00:09:56,720
time

00:09:54,399 --> 00:09:58,399
securing the approval of the process to

00:09:56,720 --> 00:10:00,480
downloading the

00:09:58,399 --> 00:10:01,680
quality oss components right i'm

00:10:00,480 --> 00:10:03,360
reducing the amount of time i'm

00:10:01,680 --> 00:10:06,079
remediating

00:10:03,360 --> 00:10:06,880
the the issue or any of the rework that

00:10:06,079 --> 00:10:09,279
i have to do

00:10:06,880 --> 00:10:10,480
right so if i have a critical issue how

00:10:09,279 --> 00:10:12,480
much of that rework's going to be

00:10:10,480 --> 00:10:14,480
involved because i'm having to upgrade

00:10:12,480 --> 00:10:16,320
an individual component and the earlier

00:10:14,480 --> 00:10:18,720
clearly the earlier you can do this

00:10:16,320 --> 00:10:19,360
the better off you're going to be right

00:10:18,720 --> 00:10:22,560
so

00:10:19,360 --> 00:10:24,320
um when we start to look at ways to do

00:10:22,560 --> 00:10:26,000
this we want to know how

00:10:24,320 --> 00:10:28,240
as developers we can choose the best

00:10:26,000 --> 00:10:30,640
components we want to avoid

00:10:28,240 --> 00:10:31,680
suspicious packages uh we know what'll

00:10:30,640 --> 00:10:33,360
break so part of that

00:10:31,680 --> 00:10:35,279
unplanned work is well we don't want to

00:10:33,360 --> 00:10:35,839
generate uh breaking changes further

00:10:35,279 --> 00:10:37,839
down the

00:10:35,839 --> 00:10:39,680
the line or off to another team that

00:10:37,839 --> 00:10:41,279
might uh be using it

00:10:39,680 --> 00:10:44,079
and then we want to be able to fix these

00:10:41,279 --> 00:10:45,279
uh dependencies faster right so

00:10:44,079 --> 00:10:46,880
we want to look at this from the

00:10:45,279 --> 00:10:48,240
developer's point of view and how do we

00:10:46,880 --> 00:10:50,720
fix this

00:10:48,240 --> 00:10:51,839
so um i'm going to combine slides and

00:10:50,720 --> 00:10:54,160
and demo here

00:10:51,839 --> 00:10:55,920
um the the first thing that we we really

00:10:54,160 --> 00:10:56,880
want to focus on is am i giving the

00:10:55,920 --> 00:10:58,720
developer

00:10:56,880 --> 00:11:00,079
uh the information they need to solve

00:10:58,720 --> 00:11:01,360
these problems earlier

00:11:00,079 --> 00:11:03,200
again i don't want to just give them a

00:11:01,360 --> 00:11:04,399
list of vulnerabilities i want them to

00:11:03,200 --> 00:11:06,160
be able to see

00:11:04,399 --> 00:11:07,920
a list of the open source components

00:11:06,160 --> 00:11:10,000
that they're using in their environment

00:11:07,920 --> 00:11:11,519
not only see that list but sort them on

00:11:10,000 --> 00:11:14,240
priority a fix

00:11:11,519 --> 00:11:16,560
to the to the organization right this is

00:11:14,240 --> 00:11:18,160
happens to be the struts 2 rce

00:11:16,560 --> 00:11:19,920
applications just easy to do because

00:11:18,160 --> 00:11:22,240
it's everybody knows struts and

00:11:19,920 --> 00:11:23,920
and the vulnerabilities that existed but

00:11:22,240 --> 00:11:25,200
they don't you don't know how many

00:11:23,920 --> 00:11:27,279
open source components are in there what

00:11:25,200 --> 00:11:29,279
are the riskiest components that are

00:11:27,279 --> 00:11:30,399
better in there so bringing this

00:11:29,279 --> 00:11:33,440
information

00:11:30,399 --> 00:11:35,279
into the developer based on policy so

00:11:33,440 --> 00:11:37,279
on the right hand side here i'm looking

00:11:35,279 --> 00:11:38,399
at all of the versions that we know

00:11:37,279 --> 00:11:40,880
about

00:11:38,399 --> 00:11:42,959
comparing each one of those versions to

00:11:40,880 --> 00:11:44,560
the security policies and the license

00:11:42,959 --> 00:11:46,399
the legal policies and the architecture

00:11:44,560 --> 00:11:48,720
policies and saying

00:11:46,399 --> 00:11:50,800
here are the most popular uh versions

00:11:48,720 --> 00:11:53,360
here are the ones that are going to pass

00:11:50,800 --> 00:11:55,240
and oh by the way this might have 50

00:11:53,360 --> 00:11:56,480
vulnerabilities but if you just go to

00:11:55,240 --> 00:11:58,399
2.5.22

00:11:56,480 --> 00:12:00,800
it's going to pass your policies again

00:11:58,399 --> 00:12:02,320
why give them a list of vulnerabilities

00:12:00,800 --> 00:12:03,279
when what i'm really trying to do is

00:12:02,320 --> 00:12:05,200
solve the problem

00:12:03,279 --> 00:12:06,800
and i can easily solve this problem and

00:12:05,200 --> 00:12:10,000
almost all of the other problems

00:12:06,800 --> 00:12:11,680
by just upgrading to the um a newer

00:12:10,000 --> 00:12:13,920
component and it's not the most recent

00:12:11,680 --> 00:12:15,200
version right so even further on i might

00:12:13,920 --> 00:12:16,560
have components that are

00:12:15,200 --> 00:12:19,279
later in the process but if i'm not

00:12:16,560 --> 00:12:21,040
comparing them to the policy that i know

00:12:19,279 --> 00:12:22,480
that i'm going to use really going to

00:12:21,040 --> 00:12:24,639
have a hard time picking and choosing

00:12:22,480 --> 00:12:26,880
the the components that i need

00:12:24,639 --> 00:12:28,639
so again bringing this in so the

00:12:26,880 --> 00:12:29,360
developer has all the information that

00:12:28,639 --> 00:12:32,480
they need

00:12:29,360 --> 00:12:34,079
no scan has run this is inside uh

00:12:32,480 --> 00:12:36,079
their development environment you're

00:12:34,079 --> 00:12:37,360
bringing down uh checking out the source

00:12:36,079 --> 00:12:38,720
code you're making the changes you're

00:12:37,360 --> 00:12:40,639
doing your unit tests

00:12:38,720 --> 00:12:42,240
uh yes i can automate a pull request for

00:12:40,639 --> 00:12:43,519
a specific version but

00:12:42,240 --> 00:12:45,440
all i'm doing is skipping this and

00:12:43,519 --> 00:12:47,760
generating manual work i still have to

00:12:45,440 --> 00:12:48,560
get the developer to validate this right

00:12:47,760 --> 00:12:52,079
so

00:12:48,560 --> 00:12:53,279
i can select a specific version and go

00:12:52,079 --> 00:12:55,920
from there right so

00:12:53,279 --> 00:12:56,560
the the other piece of this is um not

00:12:55,920 --> 00:12:59,120
only am i

00:12:56,560 --> 00:13:00,000
am i looking this in terms of policy but

00:12:59,120 --> 00:13:02,160
really starting to

00:13:00,000 --> 00:13:03,600
incorporate things like breaking changes

00:13:02,160 --> 00:13:05,200
um with the

00:13:03,600 --> 00:13:07,440
tens of hundreds of thousands of

00:13:05,200 --> 00:13:08,800
versions and components

00:13:07,440 --> 00:13:10,560
what we're really doing here is we're

00:13:08,800 --> 00:13:12,320
looking at the structure and the

00:13:10,560 --> 00:13:14,000
signatures of these public apis for

00:13:12,320 --> 00:13:16,720
these components that are being used

00:13:14,000 --> 00:13:18,720
and comparing the the changes in the

00:13:16,720 --> 00:13:20,800
method signatures between those

00:13:18,720 --> 00:13:22,079
components to give the developer an idea

00:13:20,800 --> 00:13:24,240
of how risky

00:13:22,079 --> 00:13:26,560
a change is going to be to a specific

00:13:24,240 --> 00:13:28,240
version based on those public apis are

00:13:26,560 --> 00:13:31,519
there going to be breaking changes

00:13:28,240 --> 00:13:32,000
right so again it's not the it's not the

00:13:31,519 --> 00:13:33,680
oh

00:13:32,000 --> 00:13:35,040
you need to change this individual piece

00:13:33,680 --> 00:13:37,120
of of code it is

00:13:35,040 --> 00:13:39,199
what is the level effort that's going to

00:13:37,120 --> 00:13:41,600
take to actually move to

00:13:39,199 --> 00:13:42,959
a version that um that's going to work

00:13:41,600 --> 00:13:45,360
for me right

00:13:42,959 --> 00:13:48,320
so in in our world i want to be able to

00:13:45,360 --> 00:13:49,279
fix uh these problems i want to be able

00:13:48,320 --> 00:13:51,839
to

00:13:49,279 --> 00:13:53,279
uh to bring good components in and i

00:13:51,839 --> 00:13:55,199
want to do it in an automated way

00:13:53,279 --> 00:13:58,000
right so i've got a list of all these

00:13:55,199 --> 00:13:59,440
components there's struts 2.5.10

00:13:58,000 --> 00:14:01,279
as a developer if i were actually to

00:13:59,440 --> 00:14:04,079
build this i couldn't

00:14:01,279 --> 00:14:05,440
because um real shift left means i'm

00:14:04,079 --> 00:14:07,680
providing the

00:14:05,440 --> 00:14:08,800
the guidance that the developer needs

00:14:07,680 --> 00:14:10,720
and putting security

00:14:08,800 --> 00:14:12,720
on not on the developer's shoulder but

00:14:10,720 --> 00:14:14,880
helping them earlier in that process

00:14:12,720 --> 00:14:15,760
so if i as a developer try to build this

00:14:14,880 --> 00:14:17,600
maven project

00:14:15,760 --> 00:14:20,560
i'm actually going out to my nexus

00:14:17,600 --> 00:14:22,560
repository which has a

00:14:20,560 --> 00:14:24,240
component firewall on it that every

00:14:22,560 --> 00:14:26,240
component that's being downloaded gets

00:14:24,240 --> 00:14:27,360
evaluated against that policy

00:14:26,240 --> 00:14:29,600
and i can have the option of

00:14:27,360 --> 00:14:30,000
quarantining those that that fail that

00:14:29,600 --> 00:14:32,160
policy

00:14:30,000 --> 00:14:33,199
so if we can eliminate that manual

00:14:32,160 --> 00:14:35,600
process of

00:14:33,199 --> 00:14:36,800
component approval give the developers

00:14:35,600 --> 00:14:39,440
the best of the best

00:14:36,800 --> 00:14:41,440
right i'm developing and remediating uh

00:14:39,440 --> 00:14:43,440
as quickly as i possibly can right i'm

00:14:41,440 --> 00:14:46,000
giving them everything that's good about

00:14:43,440 --> 00:14:46,959
the open source but there are times i

00:14:46,000 --> 00:14:49,040
want to block

00:14:46,959 --> 00:14:50,399
those components i don't want new

00:14:49,040 --> 00:14:53,040
projects to come on board

00:14:50,399 --> 00:14:54,160
and download uh components that we know

00:14:53,040 --> 00:14:55,279
are vulnerable right so

00:14:54,160 --> 00:14:57,760
these three components have actually

00:14:55,279 --> 00:14:58,320
been quarantined by the nexus platform

00:14:57,760 --> 00:15:00,399
and

00:14:58,320 --> 00:15:01,760
the developer can't build this

00:15:00,399 --> 00:15:02,720
application at all because they can't

00:15:01,760 --> 00:15:05,120
get that

00:15:02,720 --> 00:15:06,160
this is incredibly important now we're

00:15:05,120 --> 00:15:07,920
all doing

00:15:06,160 --> 00:15:09,279
more with less we're seeing more

00:15:07,920 --> 00:15:11,199
developers

00:15:09,279 --> 00:15:12,800
playing multiple roles on different

00:15:11,199 --> 00:15:13,839
applications in different project teams

00:15:12,800 --> 00:15:17,040
and moving

00:15:13,839 --> 00:15:19,760
from projects more often than ever and

00:15:17,040 --> 00:15:21,519
giving them visibility into what an

00:15:19,760 --> 00:15:24,480
application is made of

00:15:21,519 --> 00:15:25,440
and then giving them the guard rails

00:15:24,480 --> 00:15:26,800
around

00:15:25,440 --> 00:15:28,800
what they can actually use and what they

00:15:26,800 --> 00:15:29,440
can pull in we want to automate that

00:15:28,800 --> 00:15:31,600
process we

00:15:29,440 --> 00:15:33,360
don't want them to have to go through uh

00:15:31,600 --> 00:15:36,560
security reports and look at all the

00:15:33,360 --> 00:15:38,240
all of that data so um the other

00:15:36,560 --> 00:15:40,160
the other place that we're shifting left

00:15:38,240 --> 00:15:43,199
is before i ever

00:15:40,160 --> 00:15:43,759
bring this this application or this

00:15:43,199 --> 00:15:47,199
component

00:15:43,759 --> 00:15:48,320
inbound well can i actually choose the

00:15:47,199 --> 00:15:51,519
component right

00:15:48,320 --> 00:15:54,320
so let me uh if i'm going to

00:15:51,519 --> 00:15:55,040
say research the struts component that i

00:15:54,320 --> 00:15:58,079
wanted

00:15:55,040 --> 00:15:59,920
and be able to look at the data that

00:15:58,079 --> 00:16:01,120
that's provided and can i actually use

00:15:59,920 --> 00:16:03,040
this right

00:16:01,120 --> 00:16:06,000
we've got a component research plug-in

00:16:03,040 --> 00:16:07,600
that uh evaluates this component

00:16:06,000 --> 00:16:09,199
against our policies and we can see the

00:16:07,600 --> 00:16:10,160
little exclamation point here and then i

00:16:09,199 --> 00:16:12,560
can come up and

00:16:10,160 --> 00:16:14,480
and actually see all the details the

00:16:12,560 --> 00:16:16,000
security vulnerabilities

00:16:14,480 --> 00:16:17,600
here i don't want to go through 10

00:16:16,000 --> 00:16:19,199
security vulnerabilities to see

00:16:17,600 --> 00:16:21,759
if this is the one that i can actually

00:16:19,199 --> 00:16:23,759
use is there a recommendation

00:16:21,759 --> 00:16:24,800
of a version that i can use and then

00:16:23,759 --> 00:16:27,120
well let me just

00:16:24,800 --> 00:16:28,240
dive right into that in the website so

00:16:27,120 --> 00:16:30,000
here um

00:16:28,240 --> 00:16:31,759
i actually don't have to start an

00:16:30,000 --> 00:16:32,240
approval process or a manual approval

00:16:31,759 --> 00:16:34,079
process

00:16:32,240 --> 00:16:35,920
this is the thing i want to use i know

00:16:34,079 --> 00:16:37,600
this version is going to pass

00:16:35,920 --> 00:16:39,040
my policies all the way through the

00:16:37,600 --> 00:16:41,040
software development life cycle

00:16:39,040 --> 00:16:42,320
i can't get any more secure and i can't

00:16:41,040 --> 00:16:43,680
get any easier

00:16:42,320 --> 00:16:45,759
than that by picking the component that

00:16:43,680 --> 00:16:46,160
i'm going to use and this works not just

00:16:45,759 --> 00:16:48,839
for

00:16:46,160 --> 00:16:50,399
for maven but all of the open source

00:16:48,839 --> 00:16:52,800
components they're

00:16:50,399 --> 00:16:53,519
um their repository managers their their

00:16:52,800 --> 00:16:55,279
platforms

00:16:53,519 --> 00:16:57,040
right so if i wanted to go to pi pi or

00:16:55,279 --> 00:16:58,399
nougat i have that same level of

00:16:57,040 --> 00:17:01,040
visibility

00:16:58,399 --> 00:17:01,519
we actually believe in this uh so much

00:17:01,040 --> 00:17:04,400
that

00:17:01,519 --> 00:17:06,120
we take a lot of the uh the data and the

00:17:04,400 --> 00:17:07,919
components and we if we go back to

00:17:06,120 --> 00:17:11,600
2.5.10

00:17:07,919 --> 00:17:11,600
here 2.5

00:17:12,559 --> 00:17:19,760
i can just mooring put 10 there

00:17:16,000 --> 00:17:20,480
and hit enter um we believe in this so

00:17:19,760 --> 00:17:23,919
much we

00:17:20,480 --> 00:17:24,400
actually have open source um components

00:17:23,919 --> 00:17:26,959
that

00:17:24,400 --> 00:17:29,039
that we allow folks to use one of them

00:17:26,959 --> 00:17:32,080
is the oss index so you'll see

00:17:29,039 --> 00:17:33,760
even just embedded in maven central

00:17:32,080 --> 00:17:35,280
oh by the way we're the creators and

00:17:33,760 --> 00:17:36,400
still the stewards of maven central's

00:17:35,280 --> 00:17:39,440
right so we have this

00:17:36,400 --> 00:17:42,799
visibility here but um we can view uh

00:17:39,440 --> 00:17:44,559
items in oss index so as part of

00:17:42,799 --> 00:17:46,559
you building open source projects for

00:17:44,559 --> 00:17:49,919
others you can leverage the tools

00:17:46,559 --> 00:17:52,320
uh that use the data like oss index um

00:17:49,919 --> 00:17:53,919
and bring in uh the most secure

00:17:52,320 --> 00:17:55,679
components into your project

00:17:53,919 --> 00:17:57,120
right and if you're if you're looking at

00:17:55,679 --> 00:17:58,640
the tools that then

00:17:57,120 --> 00:18:00,880
uh can integrate with that and these are

00:17:58,640 --> 00:18:02,400
all free tools right that we provide

00:18:00,880 --> 00:18:04,240
and that others provide a wasp

00:18:02,400 --> 00:18:07,039
dependency check and dependency track

00:18:04,240 --> 00:18:07,760
uh get their data from uh from the oss

00:18:07,039 --> 00:18:09,520
index

00:18:07,760 --> 00:18:11,919
and then all of the tools that you see

00:18:09,520 --> 00:18:14,640
here ahab audit.net cargo pants

00:18:11,919 --> 00:18:16,799
these are developer specific tools um

00:18:14,640 --> 00:18:19,120
that live inside that workflow right

00:18:16,799 --> 00:18:20,720
i can have audit js in one command do

00:18:19,120 --> 00:18:23,440
npx auto js and

00:18:20,720 --> 00:18:25,120
and evaluate uh the application i can

00:18:23,440 --> 00:18:27,440
incorporate that into the build process

00:18:25,120 --> 00:18:29,200
locally in the package.json file

00:18:27,440 --> 00:18:32,160
i'm giving the developers again that

00:18:29,200 --> 00:18:35,360
visibility early into the process

00:18:32,160 --> 00:18:38,160
so um when we think about early right

00:18:35,360 --> 00:18:40,160
it's it's about bringing that view into

00:18:38,160 --> 00:18:42,480
uh the developers world

00:18:40,160 --> 00:18:43,360
allowing them to come through make the

00:18:42,480 --> 00:18:46,720
change to

00:18:43,360 --> 00:18:49,520
a specific uh version of a product right

00:18:46,720 --> 00:18:50,559
and and then go from there and continue

00:18:49,520 --> 00:18:53,120
to build

00:18:50,559 --> 00:18:53,760
the best software that you possibly can

00:18:53,120 --> 00:18:55,919
so

00:18:53,760 --> 00:18:56,880
um that's the that's the early piece of

00:18:55,919 --> 00:18:58,880
this

00:18:56,880 --> 00:19:00,960
the everywhere pieces we know we can't

00:18:58,880 --> 00:19:02,240
sit in a silo right we need to break

00:19:00,960 --> 00:19:03,039
down these barriers between the

00:19:02,240 --> 00:19:05,760
departments

00:19:03,039 --> 00:19:06,160
uh so that uh this is uh edward stemming

00:19:05,760 --> 00:19:08,320
again

00:19:06,160 --> 00:19:10,320
people in research design sales product

00:19:08,320 --> 00:19:12,240
production must work as a team

00:19:10,320 --> 00:19:14,960
in our world that's development project

00:19:12,240 --> 00:19:16,720
management uh qa the build teams

00:19:14,960 --> 00:19:18,640
operations right there they're all

00:19:16,720 --> 00:19:20,480
different so we need to be able to

00:19:18,640 --> 00:19:22,799
provide the tools there

00:19:20,480 --> 00:19:25,360
as well so that we can reduce the amount

00:19:22,799 --> 00:19:28,400
of time reviewing the releases

00:19:25,360 --> 00:19:30,720
and be able to find and respond to

00:19:28,400 --> 00:19:33,760
vulnerabilities that exist in production

00:19:30,720 --> 00:19:36,080
i i don't want to have a tool that just

00:19:33,760 --> 00:19:38,559
generates that list and hands it out

00:19:36,080 --> 00:19:39,120
if i can um reduce the amount of time

00:19:38,559 --> 00:19:41,200
that

00:19:39,120 --> 00:19:42,559
the security teams are developing or

00:19:41,200 --> 00:19:44,160
reviewing this

00:19:42,559 --> 00:19:46,160
the vulnerabilities and being able to

00:19:44,160 --> 00:19:48,160
say hey if i can pass this on provide

00:19:46,160 --> 00:19:49,600
as much information as i can to the

00:19:48,160 --> 00:19:51,360
developer um

00:19:49,600 --> 00:19:53,120
i can have this visibility in there

00:19:51,360 --> 00:19:55,440
right so what everywhere for

00:19:53,120 --> 00:19:58,160
for us means is as i start to build this

00:19:55,440 --> 00:20:00,400
as this goes into my cic pipeline

00:19:58,160 --> 00:20:01,200
i i want to be able to have it in a

00:20:00,400 --> 00:20:02,799
place

00:20:01,200 --> 00:20:05,360
that everybody that's part of that

00:20:02,799 --> 00:20:08,320
process can see the results of

00:20:05,360 --> 00:20:10,400
the that open source vulnerability scan

00:20:08,320 --> 00:20:13,200
or that open source governance right

00:20:10,400 --> 00:20:14,880
according to the policy uh what security

00:20:13,200 --> 00:20:15,840
issues are there what licensing issues

00:20:14,880 --> 00:20:17,600
are there we're just

00:20:15,840 --> 00:20:19,200
we're following through the life cycle

00:20:17,600 --> 00:20:20,880
so that and the developer already

00:20:19,200 --> 00:20:22,880
already knows pieces of this

00:20:20,880 --> 00:20:23,919
but now how do i start to manage this

00:20:22,880 --> 00:20:26,640
across the

00:20:23,919 --> 00:20:27,200
um the environment and in my build

00:20:26,640 --> 00:20:28,799
process

00:20:27,200 --> 00:20:31,280
and how do i automate this right so i

00:20:28,799 --> 00:20:33,919
can take my my policies

00:20:31,280 --> 00:20:35,200
and i can put uh automation right i can

00:20:33,919 --> 00:20:36,880
fail

00:20:35,200 --> 00:20:38,720
an evaluation and if i fail my

00:20:36,880 --> 00:20:41,760
evaluation inside my pipeline

00:20:38,720 --> 00:20:44,080
i can have it fail the the build right

00:20:41,760 --> 00:20:45,200
i can do multiple evaluations in in the

00:20:44,080 --> 00:20:46,960
same pipeline

00:20:45,200 --> 00:20:49,039
where i might do an evaluation when i

00:20:46,960 --> 00:20:50,159
pull the source code from the repo to

00:20:49,039 --> 00:20:51,600
evaluate any

00:20:50,159 --> 00:20:53,760
third-party components that are stored

00:20:51,600 --> 00:20:55,360
in the source code repository yes people

00:20:53,760 --> 00:20:57,440
still do that

00:20:55,360 --> 00:20:58,960
the second is let's say in a nuget

00:20:57,440 --> 00:21:01,039
application where i do a

00:20:58,960 --> 00:21:03,120
nuget restore which i have to do to do

00:21:01,039 --> 00:21:03,600
the build well why don't i just evaluate

00:21:03,120 --> 00:21:05,200
all the

00:21:03,600 --> 00:21:06,960
the open source components that are

00:21:05,200 --> 00:21:08,799
there at that point and then let me do

00:21:06,960 --> 00:21:10,799
an evaluation a third time

00:21:08,799 --> 00:21:12,559
right all within this pipeline that that

00:21:10,799 --> 00:21:13,919
looks at everything that gets built why

00:21:12,559 --> 00:21:15,360
would you do it a third time

00:21:13,919 --> 00:21:17,280
well because i've downloaded the source

00:21:15,360 --> 00:21:19,039
code which has a package.json

00:21:17,280 --> 00:21:20,480
i've downloaded the nuget files which

00:21:19,039 --> 00:21:22,960
are all the net files

00:21:20,480 --> 00:21:24,640
and then after we do the install that

00:21:22,960 --> 00:21:27,120
install script typically does

00:21:24,640 --> 00:21:28,559
an npm install and then installs all the

00:21:27,120 --> 00:21:30,000
javascript components right

00:21:28,559 --> 00:21:32,240
so i want to be able to have that

00:21:30,000 --> 00:21:34,799
visibility across all of those different

00:21:32,240 --> 00:21:35,760
stages of the life cycle so that's

00:21:34,799 --> 00:21:38,799
that's the uh

00:21:35,760 --> 00:21:41,520
that's the everywhere part um now

00:21:38,799 --> 00:21:42,720
as we come through we want to be able to

00:21:41,520 --> 00:21:45,280
to see

00:21:42,720 --> 00:21:46,720
again not only this in the developers

00:21:45,280 --> 00:21:47,039
environment but i want to be able to see

00:21:46,720 --> 00:21:49,520
it

00:21:47,039 --> 00:21:52,080
in my tools and then i i also want to be

00:21:49,520 --> 00:21:55,360
able to see this level of detail

00:21:52,080 --> 00:21:58,400
in in reporting right i want to have

00:21:55,360 --> 00:21:59,200
a bill of materials so this is my struts

00:21:58,400 --> 00:22:02,960
2 again

00:21:59,200 --> 00:22:05,600
it looks a lot like uh the the view here

00:22:02,960 --> 00:22:07,679
um a little bit more detail in terms of

00:22:05,600 --> 00:22:10,720
the scan this is the result of

00:22:07,679 --> 00:22:12,799
a scan at the build process right so

00:22:10,720 --> 00:22:14,440
same set of set of components i can see

00:22:12,799 --> 00:22:17,760
my struts 2 core

00:22:14,440 --> 00:22:18,159
2.5.10 i i can actually see who brought

00:22:17,760 --> 00:22:19,840
it in

00:22:18,159 --> 00:22:21,520
i have all the version information what

00:22:19,840 --> 00:22:23,280
version should i go to

00:22:21,520 --> 00:22:24,799
i can actually start to see where it got

00:22:23,280 --> 00:22:27,520
included in uh

00:22:24,799 --> 00:22:28,799
the application i can look at the policy

00:22:27,520 --> 00:22:31,280
that's associated with it

00:22:28,799 --> 00:22:32,480
right so these this this failed a bunch

00:22:31,280 --> 00:22:34,240
of policies

00:22:32,480 --> 00:22:36,159
and you'll see this often again it's not

00:22:34,240 --> 00:22:37,440
just about the security criticals or the

00:22:36,159 --> 00:22:39,200
security highs

00:22:37,440 --> 00:22:41,120
but it's an unpopular version there's

00:22:39,200 --> 00:22:42,640
some medium stuff in there

00:22:41,120 --> 00:22:44,720
and then of course i have the ability to

00:22:42,640 --> 00:22:46,159
say hey i've looked at this there is no

00:22:44,720 --> 00:22:47,039
other version there's no way we can get

00:22:46,159 --> 00:22:49,679
around this

00:22:47,039 --> 00:22:50,400
so putting in robust waving capabilities

00:22:49,679 --> 00:22:52,080
right

00:22:50,400 --> 00:22:54,400
time-based waivers things that i can i

00:22:52,080 --> 00:22:57,360
can use to let my project

00:22:54,400 --> 00:22:58,400
um advance right i'm still focused on

00:22:57,360 --> 00:23:00,159
delivering value

00:22:58,400 --> 00:23:01,600
so if i break everything while i try to

00:23:00,159 --> 00:23:02,799
figure everything out that's not going

00:23:01,600 --> 00:23:05,919
to work either

00:23:02,799 --> 00:23:07,200
and then when when i do need to have the

00:23:05,919 --> 00:23:11,360
development team

00:23:07,200 --> 00:23:15,200
look at individual vulnerabilities

00:23:11,360 --> 00:23:18,799
having our data research team that takes

00:23:15,200 --> 00:23:21,520
the the data human curates it expands on

00:23:18,799 --> 00:23:23,600
the data from the cve providing an

00:23:21,520 --> 00:23:25,120
explanation detections recommendations

00:23:23,600 --> 00:23:26,799
right if i can't upgrade what's the

00:23:25,120 --> 00:23:29,360
recommendation around this

00:23:26,799 --> 00:23:30,320
um what's the root cause really getting

00:23:29,360 --> 00:23:32,080
to

00:23:30,320 --> 00:23:33,919
eliminating false negatives and false

00:23:32,080 --> 00:23:36,960
positives as a developer

00:23:33,919 --> 00:23:39,520
i would love to know that um

00:23:36,960 --> 00:23:40,559
this is a problem only if i actually see

00:23:39,520 --> 00:23:43,440
this file

00:23:40,559 --> 00:23:44,080
the the scan sees this file in the the

00:23:43,440 --> 00:23:46,240
scan

00:23:44,080 --> 00:23:48,000
and what we do is we you know we build

00:23:46,240 --> 00:23:48,720
it we break open the application we find

00:23:48,000 --> 00:23:50,720
all the

00:23:48,720 --> 00:23:52,480
uh the components we'll see the jar file

00:23:50,720 --> 00:23:53,600
we'll break open the jar file look at

00:23:52,480 --> 00:23:55,760
the classes in there

00:23:53,600 --> 00:23:56,880
do we actually see that right so and

00:23:55,760 --> 00:23:58,799
then only

00:23:56,880 --> 00:24:00,320
uh apply this vulnerability against the

00:23:58,799 --> 00:24:02,320
policy if that exists so

00:24:00,320 --> 00:24:03,360
you have to be able again not just

00:24:02,320 --> 00:24:05,200
generate a list

00:24:03,360 --> 00:24:07,200
oh by the way you know if you want me to

00:24:05,200 --> 00:24:09,520
generate a list of course because

00:24:07,200 --> 00:24:10,880
that is a requirement sometimes right

00:24:09,520 --> 00:24:12,960
there's there's the list and

00:24:10,880 --> 00:24:14,240
a lot of times this is this is all i get

00:24:12,960 --> 00:24:17,120
as a developer

00:24:14,240 --> 00:24:19,919
right you need to fix these four cbes

00:24:17,120 --> 00:24:22,320
well what do those four cds do

00:24:19,919 --> 00:24:23,840
this list is important for security

00:24:22,320 --> 00:24:26,159
often so that they can

00:24:23,840 --> 00:24:28,000
potentially track it but how about if i

00:24:26,159 --> 00:24:30,159
look at this from a component view

00:24:28,000 --> 00:24:31,200
i'm not managing vulnerabilities i want

00:24:30,159 --> 00:24:32,880
to manage

00:24:31,200 --> 00:24:34,720
the components i want to pick the best

00:24:32,880 --> 00:24:38,320
components i possibly can

00:24:34,720 --> 00:24:41,600
and again it's not not just part of

00:24:38,320 --> 00:24:42,720
the the security side of it it's the

00:24:41,600 --> 00:24:44,960
legal side of it too

00:24:42,720 --> 00:24:46,799
and it's interesting because you you

00:24:44,960 --> 00:24:47,520
have to be able to help the teams right

00:24:46,799 --> 00:24:50,720
it says

00:24:47,520 --> 00:24:55,440
if you come in and say hey i see this um

00:24:50,720 --> 00:24:56,400
component i text pdf 5.5.6 it's got a

00:24:55,440 --> 00:24:59,440
really

00:24:56,400 --> 00:25:01,679
strict copy left license here right

00:24:59,440 --> 00:25:03,440
i go to occurrences yep it's included in

00:25:01,679 --> 00:25:06,320
my war file

00:25:03,440 --> 00:25:07,200
this this starts conversations around if

00:25:06,320 --> 00:25:10,000
i don't have

00:25:07,200 --> 00:25:11,919
this visibility at the um at the

00:25:10,000 --> 00:25:13,120
developer side how do i actually know

00:25:11,919 --> 00:25:15,440
which version i have

00:25:13,120 --> 00:25:16,799
because the developer actually asks for

00:25:15,440 --> 00:25:20,360
a specific version

00:25:16,799 --> 00:25:21,760
here right the they ask for this com.log

00:25:20,360 --> 00:25:24,320
4.2.2

00:25:21,760 --> 00:25:24,799
which is not even this component right

00:25:24,320 --> 00:25:27,520
and

00:25:24,799 --> 00:25:28,000
what happens is developers can put in

00:25:27,520 --> 00:25:30,720
component

00:25:28,000 --> 00:25:31,600
versions uh that then get changed by a

00:25:30,720 --> 00:25:35,600
specific

00:25:31,600 --> 00:25:37,200
um uh package right so i asked for 4.2.2

00:25:35,600 --> 00:25:38,640
well the company changed their name and

00:25:37,200 --> 00:25:39,120
changed the version number i want to

00:25:38,640 --> 00:25:42,400
have the

00:25:39,120 --> 00:25:46,000
the information about that as well

00:25:42,400 --> 00:25:47,279
and how am i doing on time 11 56

00:25:46,000 --> 00:25:49,520
and you're going to give me a five

00:25:47,279 --> 00:25:51,520
minute 10 minute something like that

00:25:49,520 --> 00:25:54,880
we'll call that good

00:25:51,520 --> 00:25:57,360
all right so uh early everywhere and

00:25:54,880 --> 00:25:59,039
the third piece of this is at scale so

00:25:57,360 --> 00:26:00,080
as a developer i want to know the work

00:25:59,039 --> 00:26:03,360
that i'm doing

00:26:00,080 --> 00:26:05,520
isn't just fixing my individual problem

00:26:03,360 --> 00:26:07,120
yes i like fixing my individual problem

00:26:05,520 --> 00:26:08,880
but are we are we able to fix that

00:26:07,120 --> 00:26:10,880
problem across the environment are there

00:26:08,880 --> 00:26:14,000
other applications that are using this

00:26:10,880 --> 00:26:17,200
right how do i reduce the time spent um

00:26:14,000 --> 00:26:20,400
spent remediating these problems right

00:26:17,200 --> 00:26:23,520
how can production help

00:26:20,400 --> 00:26:24,799
deliver and and identify new

00:26:23,520 --> 00:26:26,559
vulnerabilities and pass that

00:26:24,799 --> 00:26:28,400
information on to me as a developer

00:26:26,559 --> 00:26:30,159
right so this notion of continuous

00:26:28,400 --> 00:26:31,679
monitoring if i've got an application in

00:26:30,159 --> 00:26:31,919
production and a new vulnerability comes

00:26:31,679 --> 00:26:33,279
out

00:26:31,919 --> 00:26:35,760
i want to be able to make sure i see

00:26:33,279 --> 00:26:38,640
those those vulnerabilities

00:26:35,760 --> 00:26:40,240
and and put them into my workflow so

00:26:38,640 --> 00:26:42,559
that they don't become unplanned work

00:26:40,240 --> 00:26:43,840
right so at scale means really reducing

00:26:42,559 --> 00:26:44,640
that time for newly discovered

00:26:43,840 --> 00:26:46,559
vulnerabilities

00:26:44,640 --> 00:26:48,320
and uh and including this license

00:26:46,559 --> 00:26:51,600
compliance and regulatory risk right

00:26:48,320 --> 00:26:54,720
so we're removing that time the

00:26:51,600 --> 00:26:57,200
the key piece of this is the at scale

00:26:54,720 --> 00:26:58,559
right i know that there are other

00:26:57,200 --> 00:27:01,600
applications using

00:26:58,559 --> 00:27:02,799
that component right so am i if i'm

00:27:01,600 --> 00:27:06,240
choosing components

00:27:02,799 --> 00:27:07,600
or i'm looking at adoption

00:27:06,240 --> 00:27:09,760
quality and performance from an

00:27:07,600 --> 00:27:11,679
executive level right

00:27:09,760 --> 00:27:14,400
where are the riskiest components which

00:27:11,679 --> 00:27:17,600
applications are using those components

00:27:14,400 --> 00:27:19,120
the new sales rep for itex pdf has has

00:27:17,600 --> 00:27:20,799
called us and said

00:27:19,120 --> 00:27:22,320
we've got a couple applications that

00:27:20,799 --> 00:27:24,320
have generated pdfs that are

00:27:22,320 --> 00:27:26,000
now on the web that makes it distributed

00:27:24,320 --> 00:27:26,799
that makes the license kick in and we

00:27:26,000 --> 00:27:28,880
owe the money

00:27:26,799 --> 00:27:30,880
but where are we using that component

00:27:28,880 --> 00:27:31,200
right so bringing that at scale bringing

00:27:30,880 --> 00:27:33,039
out

00:27:31,200 --> 00:27:35,039
and understanding where across the

00:27:33,039 --> 00:27:37,679
environment i'm using those components

00:27:35,039 --> 00:27:39,840
right which teams are using these

00:27:37,679 --> 00:27:41,840
components if i can identify which teams

00:27:39,840 --> 00:27:43,760
and which applications are using these

00:27:41,840 --> 00:27:44,880
components how are you planning to

00:27:43,760 --> 00:27:47,279
upgrade right

00:27:44,880 --> 00:27:48,720
looking across the the organization even

00:27:47,279 --> 00:27:50,480
if i'm just having a conversation with

00:27:48,720 --> 00:27:51,440
another developer about how they've

00:27:50,480 --> 00:27:53,279
remediated

00:27:51,440 --> 00:27:54,720
uh a specific problem or how they're

00:27:53,279 --> 00:27:56,720
using a component or

00:27:54,720 --> 00:27:58,000
is their application allowed to use a

00:27:56,720 --> 00:27:59,679
specific component

00:27:58,000 --> 00:28:01,360
here i can actually quickly see where

00:27:59,679 --> 00:28:03,279
those components are

00:28:01,360 --> 00:28:06,159
and then again on the executive side

00:28:03,279 --> 00:28:08,559
really looking at three things adoption

00:28:06,159 --> 00:28:09,200
quality and performance on the adoption

00:28:08,559 --> 00:28:11,840
side

00:28:09,200 --> 00:28:13,360
i want to make sure that i have my

00:28:11,840 --> 00:28:14,080
development teams and my application

00:28:13,360 --> 00:28:16,799
teams

00:28:14,080 --> 00:28:18,480
doing this evaluation uh in the develop

00:28:16,799 --> 00:28:18,960
stage in the build stage in the release

00:28:18,480 --> 00:28:20,399
stage

00:28:18,960 --> 00:28:22,720
right so it's great that i see my

00:28:20,399 --> 00:28:23,520
projects um doing an open source

00:28:22,720 --> 00:28:24,880
evaluation

00:28:23,520 --> 00:28:26,799
but i really want to see them doing the

00:28:24,880 --> 00:28:28,399
evaluation at different stages

00:28:26,799 --> 00:28:29,840
right and i want to see quality getting

00:28:28,399 --> 00:28:30,480
better right at option quality and

00:28:29,840 --> 00:28:32,960
performance

00:28:30,480 --> 00:28:33,919
if i can see quality getting better um

00:28:32,960 --> 00:28:36,399
that's ideal and

00:28:33,919 --> 00:28:37,760
then if i'm delivering uh value if i'm

00:28:36,399 --> 00:28:39,200
delivering value to my

00:28:37,760 --> 00:28:40,799
my customers right so i'm delivering

00:28:39,200 --> 00:28:42,399
features i'm delivering releases

00:28:40,799 --> 00:28:44,559
i'm not spending time on rework and

00:28:42,399 --> 00:28:46,559
remediation then i'm delivering value

00:28:44,559 --> 00:28:49,600
true value to my customers right

00:28:46,559 --> 00:28:52,080
so um for us that that's uh

00:28:49,600 --> 00:28:53,200
again early everywhere uh and then at

00:28:52,080 --> 00:28:55,760
scale

00:28:53,200 --> 00:28:56,480
uh the at scale piece uh also being able

00:28:55,760 --> 00:28:58,399
to look at

00:28:56,480 --> 00:28:59,840
success metrics and look at mean time to

00:28:58,399 --> 00:29:02,159
resolution and really

00:28:59,840 --> 00:29:03,600
providing the data that we're using when

00:29:02,159 --> 00:29:04,240
we're building the application to help

00:29:03,600 --> 00:29:07,360
drive

00:29:04,240 --> 00:29:10,960
uh those performance metrics so back

00:29:07,360 --> 00:29:11,679
back to our um our slideshow here right

00:29:10,960 --> 00:29:13,600
so we've got

00:29:11,679 --> 00:29:15,200
improved uh adoption quality and

00:29:13,600 --> 00:29:18,559
productivity um

00:29:15,200 --> 00:29:21,679
again at scale everywhere and early

00:29:18,559 --> 00:29:23,760
and for us it's looking at

00:29:21,679 --> 00:29:25,279
this across the life cycle so whether

00:29:23,760 --> 00:29:26,080
it's the net new procurement this is

00:29:25,279 --> 00:29:28,720
that notion of

00:29:26,080 --> 00:29:30,960
well let me block that stuff um as it

00:29:28,720 --> 00:29:32,799
violates the policy before it comes in

00:29:30,960 --> 00:29:34,399
uh to the environment it's that earliest

00:29:32,799 --> 00:29:36,799
process

00:29:34,399 --> 00:29:38,399
leverage of a configuration binary

00:29:36,799 --> 00:29:41,360
configuration management think

00:29:38,399 --> 00:29:42,960
nexus repository manager artifactory we

00:29:41,360 --> 00:29:44,159
want to be able to store these proxied

00:29:42,960 --> 00:29:47,760
and release components

00:29:44,159 --> 00:29:49,600
uh in a central place as we're all

00:29:47,760 --> 00:29:50,960
as we're all distributed now i want to

00:29:49,600 --> 00:29:52,720
know that my development teams

00:29:50,960 --> 00:29:54,880
are actually pulling the approved

00:29:52,720 --> 00:29:58,000
components the right components from

00:29:54,880 --> 00:30:00,080
my binary repositories i have

00:29:58,000 --> 00:30:01,039
all of my work machines have access to

00:30:00,080 --> 00:30:02,960
the internet but i

00:30:01,039 --> 00:30:04,480
i still in order to get some of the open

00:30:02,960 --> 00:30:05,679
source components that are approved have

00:30:04,480 --> 00:30:08,320
to go through

00:30:05,679 --> 00:30:09,360
a specific repository manager so making

00:30:08,320 --> 00:30:11,200
that part of the

00:30:09,360 --> 00:30:13,039
uh the workflow is important and then

00:30:11,200 --> 00:30:15,120
just really focusing on dependency

00:30:13,039 --> 00:30:17,120
management across the life cycle

00:30:15,120 --> 00:30:18,720
as a developer if i can i can take

00:30:17,120 --> 00:30:20,320
control by picking those components

00:30:18,720 --> 00:30:22,320
earlier by fixing those

00:30:20,320 --> 00:30:23,600
components earlier i still have those

00:30:22,320 --> 00:30:26,159
checks and balances

00:30:23,600 --> 00:30:27,520
uh further right right in the ci cd and

00:30:26,159 --> 00:30:29,679
the release pipeline

00:30:27,520 --> 00:30:31,520
so if i can't actually fix the the

00:30:29,679 --> 00:30:33,600
problem i can now have

00:30:31,520 --> 00:30:35,039
a healthy conversation with the security

00:30:33,600 --> 00:30:36,960
teams and release teams

00:30:35,039 --> 00:30:39,520
about why those vulnerabilities pop up

00:30:36,960 --> 00:30:42,159
about why those policy violations pop up

00:30:39,520 --> 00:30:43,440
later in the life cycle right everybody

00:30:42,159 --> 00:30:45,679
everybody can see

00:30:43,440 --> 00:30:46,880
uh what's going on it's it's not just a

00:30:45,679 --> 00:30:48,960
cycle of

00:30:46,880 --> 00:30:50,799
the release team runs a scan and then

00:30:48,960 --> 00:30:52,799
sends that data back and

00:30:50,799 --> 00:30:53,919
so on and so forth that little endless

00:30:52,799 --> 00:30:56,320
loop

00:30:53,919 --> 00:30:58,240
so for us this is the the nexus platform

00:30:56,320 --> 00:30:59,039
you layer on continuous monitoring as i

00:30:58,240 --> 00:31:01,279
mentioned earlier

00:30:59,039 --> 00:31:02,240
this ability to hey if i've got my

00:31:01,279 --> 00:31:03,600
application it's not

00:31:02,240 --> 00:31:05,600
being built all the time but it's still

00:31:03,600 --> 00:31:06,320
in production right some people call

00:31:05,600 --> 00:31:08,080
that legacy

00:31:06,320 --> 00:31:10,080
if it's in production i call it mission

00:31:08,080 --> 00:31:11,679
critical i want to know

00:31:10,080 --> 00:31:12,799
but what's the what are the open source

00:31:11,679 --> 00:31:14,159
components that are there what's the

00:31:12,799 --> 00:31:16,320
health of those components

00:31:14,159 --> 00:31:18,000
um and and be alerted if there are

00:31:16,320 --> 00:31:20,000
anything uh if there's anything

00:31:18,000 --> 00:31:21,760
new in those production applications and

00:31:20,000 --> 00:31:24,080
extend that out

00:31:21,760 --> 00:31:26,080
so uh you've probably seen a lot of this

00:31:24,080 --> 00:31:29,200
in all things open on the devops sides

00:31:26,080 --> 00:31:30,799
you know as you're starting to to

00:31:29,200 --> 00:31:32,159
take control of the open source

00:31:30,799 --> 00:31:32,799
components that we're using earlier in

00:31:32,159 --> 00:31:35,679
that process

00:31:32,799 --> 00:31:36,960
and then developers really not not

00:31:35,679 --> 00:31:39,760
shifting left so that we're

00:31:36,960 --> 00:31:41,279
taking security on as we flip the scan

00:31:39,760 --> 00:31:42,720
switch and we send the results to

00:31:41,279 --> 00:31:45,519
security and that's what's

00:31:42,720 --> 00:31:47,919
shifting left it's really about taking

00:31:45,519 --> 00:31:51,200
control of the supply chain

00:31:47,919 --> 00:31:52,240
at our pace right we know what we need

00:31:51,200 --> 00:31:55,200
to work on we know

00:31:52,240 --> 00:31:56,720
what's uh critical in terms of policy

00:31:55,200 --> 00:31:58,240
for the organization

00:31:56,720 --> 00:31:59,840
we know how to upgrade we know if

00:31:58,240 --> 00:32:00,799
upgrades are going to work this is the

00:31:59,840 --> 00:32:02,640
best and

00:32:00,799 --> 00:32:04,640
uh and quite frankly the cheapest place

00:32:02,640 --> 00:32:05,440
to do it it may not feel like it at the

00:32:04,640 --> 00:32:07,200
time because

00:32:05,440 --> 00:32:08,559
we're we're having to manage open source

00:32:07,200 --> 00:32:09,679
components that maybe somebody put in

00:32:08,559 --> 00:32:12,080
and haven't touched in

00:32:09,679 --> 00:32:13,760
in five years but really this is going

00:32:12,080 --> 00:32:15,200
to make our lives so much easier because

00:32:13,760 --> 00:32:17,440
we're not just going to get that report

00:32:15,200 --> 00:32:18,240
from security whether that's a pdf

00:32:17,440 --> 00:32:22,159
report or any

00:32:18,240 --> 00:32:24,720
email or excel spreadsheet

00:32:22,159 --> 00:32:26,320
so um i appreciate the time i'll go

00:32:24,720 --> 00:32:30,080
ahead and open it up

00:32:26,320 --> 00:32:30,080
for questions if there are any

00:32:32,240 --> 00:32:36,720
we do have one question in the q a

00:32:34,320 --> 00:32:36,720
window

00:32:37,120 --> 00:32:41,440
so the old versions one carrot uh old

00:32:40,480 --> 00:32:44,320
versions

00:32:41,440 --> 00:32:45,519
old versions components that were

00:32:44,320 --> 00:32:47,279
approved but don't have the latest

00:32:45,519 --> 00:32:48,159
security patches can be very attractive

00:32:47,279 --> 00:32:49,600
that they're

00:32:48,159 --> 00:32:51,200
pre-approved and prevent you from having

00:32:49,600 --> 00:32:54,159
to go through the process uh

00:32:51,200 --> 00:32:54,720
yes the the components exist already

00:32:54,159 --> 00:32:57,840
right

00:32:54,720 --> 00:33:01,360
um and uh and a lot of that

00:32:57,840 --> 00:33:03,840
that firewall capability um is around

00:33:01,360 --> 00:33:05,600
really you know having a process where

00:33:03,840 --> 00:33:07,200
um i've got to find out where all these

00:33:05,600 --> 00:33:10,640
components that have been used

00:33:07,200 --> 00:33:13,120
um before are

00:33:10,640 --> 00:33:13,840
then used again right so if we if we

00:33:13,120 --> 00:33:16,480
look at

00:33:13,840 --> 00:33:18,720
something like an approval process right

00:33:16,480 --> 00:33:21,760
for a specific component

00:33:18,720 --> 00:33:22,960
a lot of this has uh to do with this

00:33:21,760 --> 00:33:26,000
ability to

00:33:22,960 --> 00:33:29,519
approve just a very specific

00:33:26,000 --> 00:33:30,399
uh set of components um for a specific

00:33:29,519 --> 00:33:32,799
set of

00:33:30,399 --> 00:33:33,679
potential applications as well and and

00:33:32,799 --> 00:33:36,640
versions

00:33:33,679 --> 00:33:38,559
right so when i when i focus on policy

00:33:36,640 --> 00:33:39,120
and we say let's pick jackson data bond

00:33:38,559 --> 00:33:40,880
which is in

00:33:39,120 --> 00:33:42,320
everything who brought it in which

00:33:40,880 --> 00:33:44,159
version can i go to

00:33:42,320 --> 00:33:46,880
but if i select a policy here and say

00:33:44,159 --> 00:33:50,320
well i really need to use this version

00:33:46,880 --> 00:33:52,080
and i wave i want to waive this

00:33:50,320 --> 00:33:55,600
i have the option of saying i only want

00:33:52,080 --> 00:33:58,320
to waive it for this version 2.6.1

00:33:55,600 --> 00:33:58,640
and only for this application right only

00:33:58,320 --> 00:34:01,440
this

00:33:58,640 --> 00:34:02,559
instance and then having you know that

00:34:01,440 --> 00:34:05,919
apply to

00:34:02,559 --> 00:34:07,440
other uh components as well right so

00:34:05,919 --> 00:34:09,119
you're right i want to be very specific

00:34:07,440 --> 00:34:11,520
about what i'm approving

00:34:09,119 --> 00:34:12,320
but i also want to know uh in every

00:34:11,520 --> 00:34:14,800
application

00:34:12,320 --> 00:34:15,359
did that component actually show up in

00:34:14,800 --> 00:34:18,079
my

00:34:15,359 --> 00:34:19,520
um in my scans this is one of the

00:34:18,079 --> 00:34:22,639
reasons why you

00:34:19,520 --> 00:34:23,359
you do the evaluation everywhere so if i

00:34:22,639 --> 00:34:26,000
know

00:34:23,359 --> 00:34:28,079
that in the release process a component

00:34:26,000 --> 00:34:29,599
gets added through some other process

00:34:28,079 --> 00:34:31,599
i want to be able to break that open

00:34:29,599 --> 00:34:34,639
find that component

00:34:31,599 --> 00:34:35,760
and then alert and do notifications on

00:34:34,639 --> 00:34:37,760
that

00:34:35,760 --> 00:34:39,760
where do other components come from well

00:34:37,760 --> 00:34:41,359
other components can come from well

00:34:39,760 --> 00:34:43,040
the developer really needed that to work

00:34:41,359 --> 00:34:44,800
or it came from a third-party

00:34:43,040 --> 00:34:46,800
integration tool that they included in

00:34:44,800 --> 00:34:50,000
their build so that they could talk to

00:34:46,800 --> 00:34:50,720
their fortify instance right as an

00:34:50,000 --> 00:34:53,040
example

00:34:50,720 --> 00:34:54,800
and then later down the line yeah we

00:34:53,040 --> 00:34:55,280
know this component's not supposed to be

00:34:54,800 --> 00:34:58,400
used

00:34:55,280 --> 00:35:00,640
and alert on it so good question

00:34:58,400 --> 00:35:02,720
um what's involved in garrett asks

00:35:00,640 --> 00:35:05,920
what's involved in adding an application

00:35:02,720 --> 00:35:09,280
we have actual uh automatic application

00:35:05,920 --> 00:35:10,720
creation so uh for us this whole notion

00:35:09,280 --> 00:35:12,960
of policy and i

00:35:10,720 --> 00:35:14,079
i didn't have a ton of time but the

00:35:12,960 --> 00:35:16,720
policy engine here

00:35:14,079 --> 00:35:18,000
is based on the hierarchy right so i

00:35:16,720 --> 00:35:19,760
have a

00:35:18,000 --> 00:35:20,880
set of policies and actually all of my

00:35:19,760 --> 00:35:21,680
policies are set at the root

00:35:20,880 --> 00:35:23,280
organization

00:35:21,680 --> 00:35:25,760
but i can add organizations and

00:35:23,280 --> 00:35:27,440
applications um we have automatic

00:35:25,760 --> 00:35:28,240
application creation so you don't have

00:35:27,440 --> 00:35:31,200
to have

00:35:28,240 --> 00:35:32,320
an onboarding process that um that gets

00:35:31,200 --> 00:35:34,400
you going

00:35:32,320 --> 00:35:35,520
um before you do the scan so if your

00:35:34,400 --> 00:35:36,800
developers want to

00:35:35,520 --> 00:35:38,320
to use the plugins and do the

00:35:36,800 --> 00:35:39,680
evaluations we'll create the

00:35:38,320 --> 00:35:42,160
applications automatically

00:35:39,680 --> 00:35:43,920
and as you might um guess we're all

00:35:42,160 --> 00:35:45,839
about automation so

00:35:43,920 --> 00:35:47,520
we've got all the rest apis that you

00:35:45,839 --> 00:35:50,880
need to do to create

00:35:47,520 --> 00:35:54,000
organizations applications

00:35:50,880 --> 00:35:57,119
against those and i've had a number of

00:35:54,000 --> 00:36:00,400
companies that have taken specifically

00:35:57,119 --> 00:36:01,599
probably 1200 uh fortify applications

00:36:00,400 --> 00:36:03,200
that they're already scanning

00:36:01,599 --> 00:36:04,720
and they're adding the the open source

00:36:03,200 --> 00:36:07,599
component to it so

00:36:04,720 --> 00:36:08,960
we used um we used a python script to

00:36:07,599 --> 00:36:09,920
you know pull the application names

00:36:08,960 --> 00:36:12,560
reform adam

00:36:09,920 --> 00:36:13,760
on the fortify side and create the

00:36:12,560 --> 00:36:17,119
applications on the

00:36:13,760 --> 00:36:20,560
the sonotype side um once i fixed my

00:36:17,119 --> 00:36:21,200
um not so great code right it took 15

00:36:20,560 --> 00:36:26,079
seconds

00:36:21,200 --> 00:36:28,880
so onboarding is an important piece

00:36:26,079 --> 00:36:28,880
any other questions

00:36:31,280 --> 00:36:36,079
we have about eight minutes um remaining

00:36:34,480 --> 00:36:37,440
for further questions or further

00:36:36,079 --> 00:36:39,119
discussions or

00:36:37,440 --> 00:36:41,839
however the speaker wishes to use the

00:36:39,119 --> 00:36:41,839
time

00:36:43,200 --> 00:36:47,200
well that that's all i have um like we

00:36:45,680 --> 00:36:49,520
can give eight minutes back to

00:36:47,200 --> 00:36:52,640
to folks uh i appreciate you guys

00:36:49,520 --> 00:36:52,640
spending the time again

00:36:52,800 --> 00:36:56,400
just go to sonotype.com uh there's some

00:36:55,440 --> 00:36:58,320
developer tools

00:36:56,400 --> 00:36:59,520
i actually will end on this we'll end up

00:36:58,320 --> 00:37:03,040
on uh

00:36:59,520 --> 00:37:08,160
we'll go to sonotype.com here

00:37:03,040 --> 00:37:12,079
and we'll look at um the

00:37:08,160 --> 00:37:14,640
solutions for uh developers

00:37:12,079 --> 00:37:15,119
and then here we go we're talking about

00:37:14,640 --> 00:37:16,560
um

00:37:15,119 --> 00:37:17,839
the open source components that we have

00:37:16,560 --> 00:37:18,720
the developer tools that we have the

00:37:17,839 --> 00:37:21,680
free tools

00:37:18,720 --> 00:37:21,680
uh that we have so

00:37:21,760 --> 00:37:25,839
getting this kind of visibility for your

00:37:23,839 --> 00:37:26,880
project uh and your environment is

00:37:25,839 --> 00:37:28,800
possible now

00:37:26,880 --> 00:37:30,960
uh you don't have to go through a big

00:37:28,800 --> 00:37:33,119
process so uh take a look at the free

00:37:30,960 --> 00:37:36,320
developer friendly tools that uh

00:37:33,119 --> 00:37:40,720
that we have here again i appreciate the

00:37:36,320 --> 00:37:40,720
the time and enjoy the the rest of the

00:37:43,640 --> 00:37:46,640

YouTube URL: https://www.youtube.com/watch?v=BJcZM-NHWuU


