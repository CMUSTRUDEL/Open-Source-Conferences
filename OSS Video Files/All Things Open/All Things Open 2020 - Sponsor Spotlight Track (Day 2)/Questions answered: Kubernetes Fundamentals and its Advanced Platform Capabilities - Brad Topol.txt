Title: Questions answered: Kubernetes Fundamentals and its Advanced Platform Capabilities - Brad Topol
Publication date: 2020-12-18
Playlist: All Things Open 2020 - Sponsor Spotlight Track (Day 2)
Description: 
	Presented by: Brad Topol, IBM
Presented at All Things Open 2020 - Sponsor Spotlight Track (Day 2)

Abstract: Kubernetes continues to experience explosive growth as it becomes the de facto platform of choice for the creation of cloud native computing applications.  Key to Kubernetes success is both its core functionality and its advanced capabilities. In this moderated discussion, weâ€™ll introduce you to Kubernetes core features. And, we'll discuss advanced platform capabilities provided by both Kubernetes and its ecosystem, enabling it as a ubiquitous application development platform.
Captions: 
	00:00:05,359 --> 00:00:08,559
so

00:00:05,759 --> 00:00:09,120
i'm brad topple i'm ibm's distinguished

00:00:08,559 --> 00:00:11,440
engineer

00:00:09,120 --> 00:00:12,960
for open technologies and developer

00:00:11,440 --> 00:00:15,759
advocacy

00:00:12,960 --> 00:00:16,960
and the main portion of this talk is

00:00:15,759 --> 00:00:18,000
going to be about kubernetes

00:00:16,960 --> 00:00:21,359
fundamentals

00:00:18,000 --> 00:00:22,800
and advanced platform capabilities so in

00:00:21,359 --> 00:00:24,880
a short amount of time we're going to

00:00:22,800 --> 00:00:27,680
take you from the history and the basics

00:00:24,880 --> 00:00:31,599
all the way to some advanced features

00:00:27,680 --> 00:00:34,800
but before i get into that um i'm gonna

00:00:31,599 --> 00:00:37,680
do some call for code announcements

00:00:34,800 --> 00:00:39,120
and i don't know if everyone on the call

00:00:37,680 --> 00:00:42,640
here is familiar with call for

00:00:39,120 --> 00:00:44,160
code but it's it's it's a way to have an

00:00:42,640 --> 00:00:47,440
impact on the world

00:00:44,160 --> 00:00:50,640
and it's also a way to

00:00:47,440 --> 00:00:54,480
win a very large amount of money

00:00:50,640 --> 00:00:57,600
so if you're not familiar

00:00:54,480 --> 00:00:58,000
natural disasters affect 2.5 billion

00:00:57,600 --> 00:01:00,640
people

00:00:58,000 --> 00:01:01,520
every year with property loss and human

00:01:00,640 --> 00:01:04,879
loss

00:01:01,520 --> 00:01:06,799
and we can't prevent natural disasters

00:01:04,879 --> 00:01:09,040
but we can find better ways to prepare

00:01:06,799 --> 00:01:10,080
for them and better ways to respond to

00:01:09,040 --> 00:01:13,280
them

00:01:10,080 --> 00:01:15,600
and the folks that are the most

00:01:13,280 --> 00:01:17,759
in many ways the most capable to to come

00:01:15,600 --> 00:01:19,360
up with great solutions are software

00:01:17,759 --> 00:01:22,560
developers

00:01:19,360 --> 00:01:24,880
and so a few years back uh about three

00:01:22,560 --> 00:01:26,960
years ago we decided to to put together

00:01:24,880 --> 00:01:27,600
what we called call for code we put it

00:01:26,960 --> 00:01:30,880
together

00:01:27,600 --> 00:01:31,439
with the david clark cause the united

00:01:30,880 --> 00:01:34,479
nations

00:01:31,439 --> 00:01:37,520
human rights uh commissioner

00:01:34,479 --> 00:01:40,000
council and the linux foundation and the

00:01:37,520 --> 00:01:43,200
idea is let's let's get developers

00:01:40,000 --> 00:01:45,200
thinking about how they can help

00:01:43,200 --> 00:01:46,960
mitigate natural disasters

00:01:45,200 --> 00:01:48,399
and let's have a coding competition

00:01:46,960 --> 00:01:52,079
let's have a coding

00:01:48,399 --> 00:01:52,960
challenge and yes software developers

00:01:52,079 --> 00:01:56,159
want to

00:01:52,960 --> 00:01:56,799
do things to to help the world but let's

00:01:56,159 --> 00:01:59,280
also

00:01:56,799 --> 00:02:01,439
put some pretty solid prize money behind

00:01:59,280 --> 00:02:02,000
it and so every year there's a call for

00:02:01,439 --> 00:02:05,280
code

00:02:02,000 --> 00:02:08,239
winner that wins a 200 000

00:02:05,280 --> 00:02:09,440
prize we also have second place third

00:02:08,239 --> 00:02:11,360
place fourth place

00:02:09,440 --> 00:02:12,959
um and those are twenty five thousand

00:02:11,360 --> 00:02:14,400
dollars and we have the regional award

00:02:12,959 --> 00:02:15,280
winner which i'm going to announce in a

00:02:14,400 --> 00:02:18,239
couple charts

00:02:15,280 --> 00:02:19,360
for our our our north american regional

00:02:18,239 --> 00:02:22,239
winner

00:02:19,360 --> 00:02:23,440
but the the important thing is is to

00:02:22,239 --> 00:02:25,599
understand that

00:02:23,440 --> 00:02:26,959
there is a wonderful way here for

00:02:25,599 --> 00:02:29,920
developers to form

00:02:26,959 --> 00:02:31,360
small teams and come up with fabulous

00:02:29,920 --> 00:02:34,080
solutions to

00:02:31,360 --> 00:02:36,239
to very difficult problems uh you know

00:02:34,080 --> 00:02:37,760
related to natural disasters related to

00:02:36,239 --> 00:02:41,040
pandemics

00:02:37,760 --> 00:02:43,280
but what differentiates call for code is

00:02:41,040 --> 00:02:43,920
once we see some really great solutions

00:02:43,280 --> 00:02:46,720
come

00:02:43,920 --> 00:02:47,120
come from the developers we don't stop

00:02:46,720 --> 00:02:50,160
there

00:02:47,120 --> 00:02:51,040
we actually fund deploying those

00:02:50,160 --> 00:02:53,840
solutions

00:02:51,040 --> 00:02:55,519
out in the field so it's not just oh we

00:02:53,840 --> 00:02:57,519
came up with a great idea we won some

00:02:55,519 --> 00:02:59,040
prize money isn't that great we actually

00:02:57,519 --> 00:03:00,560
get behind the winners

00:02:59,040 --> 00:03:02,319
and actually help them to deploy their

00:03:00,560 --> 00:03:03,599
solutions where they can make a huge

00:03:02,319 --> 00:03:06,159
difference

00:03:03,599 --> 00:03:07,680
so we have this uh this challenge every

00:03:06,159 --> 00:03:08,400
year and i would encourage you to form

00:03:07,680 --> 00:03:11,680
your small

00:03:08,400 --> 00:03:14,239
team and and get involved

00:03:11,680 --> 00:03:16,000
so if we want to look at past winners

00:03:14,239 --> 00:03:17,760
just just so you can see what we've done

00:03:16,000 --> 00:03:22,239
in the past

00:03:17,760 --> 00:03:25,440
the first winner uh 2018 was project owl

00:03:22,239 --> 00:03:27,040
and this came about a huge hurricane hit

00:03:25,440 --> 00:03:28,799
in puerto rico

00:03:27,040 --> 00:03:30,159
and what people learned is your cell

00:03:28,799 --> 00:03:32,720
phones don't work

00:03:30,159 --> 00:03:34,720
you know all the cell towers go down and

00:03:32,720 --> 00:03:35,360
project owl looked at how they could

00:03:34,720 --> 00:03:38,400
create an

00:03:35,360 --> 00:03:40,560
ad hoc wi-fi net mesh network

00:03:38,400 --> 00:03:42,400
that could allow people that had no

00:03:40,560 --> 00:03:42,879
other connectivity otherwise to be able

00:03:42,400 --> 00:03:46,879
to say

00:03:42,879 --> 00:03:49,280
hey i need food i need water and so

00:03:46,879 --> 00:03:50,319
they demonstrated it and built this on a

00:03:49,280 --> 00:03:53,120
whole bunch of

00:03:50,319 --> 00:03:53,920
cloud technologies uh you know ibm we

00:03:53,120 --> 00:03:55,840
have lots of

00:03:53,920 --> 00:03:57,840
watson cloud technologies and we have

00:03:55,840 --> 00:03:59,680
all the weather company apis

00:03:57,840 --> 00:04:02,400
so you can put together some really cool

00:03:59,680 --> 00:04:05,159
solutions that can help people in need

00:04:02,400 --> 00:04:06,560
and so that was a 2018 winner and in

00:04:05,159 --> 00:04:08,400
00:04:06,560 --> 00:04:10,799
we had a different approach which was

00:04:08,400 --> 00:04:12,560
dealing with fires and firefighters

00:04:10,799 --> 00:04:14,080
and making sure that the firefighters

00:04:12,560 --> 00:04:16,239
had something that would monitor

00:04:14,080 --> 00:04:18,239
their surroundings so we could tell when

00:04:16,239 --> 00:04:21,519
firefighters were getting into really

00:04:18,239 --> 00:04:23,919
dangerous situations you know with with

00:04:21,519 --> 00:04:24,960
way too much carbon monoxide or what

00:04:23,919 --> 00:04:28,240
have you

00:04:24,960 --> 00:04:31,360
and so that was the 2019 winner and just

00:04:28,240 --> 00:04:32,080
recently announced uh not too many a few

00:04:31,360 --> 00:04:35,280
days ago

00:04:32,080 --> 00:04:39,120
was agrali which was um

00:04:35,280 --> 00:04:41,199
from brazil um to to help small-scale

00:04:39,120 --> 00:04:42,960
farmers manage resources and understand

00:04:41,199 --> 00:04:46,240
the impact on climate

00:04:42,960 --> 00:04:48,240
and help them to to worry

00:04:46,240 --> 00:04:50,080
from you know how the crops are doing

00:04:48,240 --> 00:04:51,680
and and how to manage that

00:04:50,080 --> 00:04:54,479
and if you look all three of these

00:04:51,680 --> 00:04:56,800
winners are there's deployments underway

00:04:54,479 --> 00:04:58,320
so project al was deployed in puerto

00:04:56,800 --> 00:05:01,680
rico in australia

00:04:58,320 --> 00:05:04,240
from from edio was deployed in barcelona

00:05:01,680 --> 00:05:05,039
in australia and the new winner of

00:05:04,240 --> 00:05:08,400
raleigh

00:05:05,039 --> 00:05:11,440
was uh tested and used in mongolia

00:05:08,400 --> 00:05:13,039
so those were all big 200 000 winners um

00:05:11,440 --> 00:05:14,160
i don't have the pleasure of announcing

00:05:13,039 --> 00:05:16,880
a 200 000

00:05:14,160 --> 00:05:17,680
winner today i do get the pleasure of

00:05:16,880 --> 00:05:21,680
announcing a

00:05:17,680 --> 00:05:25,360
5 000 regional winner and

00:05:21,680 --> 00:05:29,520
that winner is high stakes

00:05:25,360 --> 00:05:32,000
so high stakes was a team in puerto rico

00:05:29,520 --> 00:05:33,120
and they actually worked uh help

00:05:32,000 --> 00:05:35,360
deploying

00:05:33,120 --> 00:05:36,800
the original winner project owls so

00:05:35,360 --> 00:05:38,000
these were folks that were involved in

00:05:36,800 --> 00:05:40,240
getting to deploy a previous

00:05:38,000 --> 00:05:42,000
winner and then they got inspired to

00:05:40,240 --> 00:05:44,000
come up with their own solution

00:05:42,000 --> 00:05:45,120
and what they came up with was the

00:05:44,000 --> 00:05:46,639
notion of

00:05:45,120 --> 00:05:48,240
these stakes that you stick in the

00:05:46,639 --> 00:05:50,960
ground that monitor

00:05:48,240 --> 00:05:53,120
moisture levels and humidity levels and

00:05:50,960 --> 00:05:55,680
basically this helps you to worry about

00:05:53,120 --> 00:05:57,440
anomalies like flooding and other

00:05:55,680 --> 00:05:58,479
weather anomalies and then to send

00:05:57,440 --> 00:06:01,280
alerts

00:05:58,479 --> 00:06:03,360
so to be able to get some proactive

00:06:01,280 --> 00:06:03,759
information out that hey certain areas

00:06:03,360 --> 00:06:05,440
are

00:06:03,759 --> 00:06:07,759
starting to flood and we need to take

00:06:05,440 --> 00:06:10,479
action so this was our regional

00:06:07,759 --> 00:06:10,880
our north american regional winner and

00:06:10,479 --> 00:06:12,880
uh

00:06:10,880 --> 00:06:14,319
we're happy to award them five thousand

00:06:12,880 --> 00:06:15,759
dollars and

00:06:14,319 --> 00:06:17,680
for everyone on this call i would

00:06:15,759 --> 00:06:18,319
encourage you to look into forming a

00:06:17,680 --> 00:06:20,000
team

00:06:18,319 --> 00:06:21,360
because if you come up with a great idea

00:06:20,000 --> 00:06:24,000
and you go implement it

00:06:21,360 --> 00:06:26,319
we'll actually one you'll you know we

00:06:24,000 --> 00:06:28,479
will give you a very nice prize

00:06:26,319 --> 00:06:30,080
and you'll get to deploy it so you can

00:06:28,479 --> 00:06:32,000
make a huge difference in the world

00:06:30,080 --> 00:06:33,199
so so please please think about doing

00:06:32,000 --> 00:06:37,120
that

00:06:33,199 --> 00:06:38,039
um all right danielson from high stakes

00:06:37,120 --> 00:06:41,120
is on the call

00:06:38,039 --> 00:06:41,840
congratulations congratulations

00:06:41,120 --> 00:06:43,680
danielson

00:06:41,840 --> 00:06:45,759
that's awesome and so i'm glad you i

00:06:43,680 --> 00:06:49,360
didn't know you'd be on the call but um

00:06:45,759 --> 00:06:52,479
great that you're here and and you know

00:06:49,360 --> 00:06:54,400
and and enjoy your win and enjoy the

00:06:52,479 --> 00:06:55,520
the award but more importantly thank you

00:06:54,400 --> 00:06:58,639
for what you're doing to help

00:06:55,520 --> 00:06:58,639
make the world a better place

00:06:58,960 --> 00:07:05,120
okay so now we're going to switch gears

00:07:02,080 --> 00:07:06,800
and you know this is an interesting talk

00:07:05,120 --> 00:07:09,280
it's one of my favorites to give

00:07:06,800 --> 00:07:10,880
because it helps people to understand

00:07:09,280 --> 00:07:14,000
from the very beginning

00:07:10,880 --> 00:07:15,599
uh containers and kubernetes and

00:07:14,000 --> 00:07:17,280
then we'll go on and get into some

00:07:15,599 --> 00:07:19,039
advanced stuff until they give me the

00:07:17,280 --> 00:07:21,759
hook and pull me off this stage so we'll

00:07:19,039 --> 00:07:25,120
see how much we can cover

00:07:21,759 --> 00:07:29,759
but let's talk about containers

00:07:25,120 --> 00:07:31,440
so if we go back to about 2012

00:07:29,759 --> 00:07:32,960
most of us were working in the cloud

00:07:31,440 --> 00:07:35,360
infrastructure space

00:07:32,960 --> 00:07:37,919
were using cloud infrastructures that

00:07:35,360 --> 00:07:40,160
were virtual machine based

00:07:37,919 --> 00:07:41,919
and life was pretty good you could get

00:07:40,160 --> 00:07:43,680
your virtual your applications running

00:07:41,919 --> 00:07:45,360
as virtual machines

00:07:43,680 --> 00:07:47,919
you could get things like web

00:07:45,360 --> 00:07:51,280
applications and databases

00:07:47,919 --> 00:07:53,120
say deployed in a couple days

00:07:51,280 --> 00:07:54,800
way better than if you had to deploy

00:07:53,120 --> 00:07:55,440
things on bare metal servers all by

00:07:54,800 --> 00:07:57,120
yourself

00:07:55,440 --> 00:07:59,199
trying to get an application server up

00:07:57,120 --> 00:08:02,319
and running a database up and running

00:07:59,199 --> 00:08:04,080
life was pretty good um virtual machines

00:08:02,319 --> 00:08:07,599
were a decent way to go

00:08:04,080 --> 00:08:09,840
but then in 2013 um

00:08:07,599 --> 00:08:11,680
at pycon there was a presentation by

00:08:09,840 --> 00:08:14,000
solomon hikes who said

00:08:11,680 --> 00:08:15,759
hey all you folks who are doing all this

00:08:14,000 --> 00:08:17,599
deploying your applications and your

00:08:15,759 --> 00:08:18,879
cloud applications using virtual

00:08:17,599 --> 00:08:21,919
machines

00:08:18,879 --> 00:08:23,440
well turns out i can do something a

00:08:21,919 --> 00:08:26,240
little bit different

00:08:23,440 --> 00:08:26,800
linux has really improved its security

00:08:26,240 --> 00:08:28,560
and so

00:08:26,800 --> 00:08:30,000
instead of deploying as a whole virtual

00:08:28,560 --> 00:08:33,599
machine i can deploy

00:08:30,000 --> 00:08:36,240
applications as processes

00:08:33,599 --> 00:08:38,399
that take advantage of linux advanced

00:08:36,240 --> 00:08:40,399
features to provide isolation

00:08:38,399 --> 00:08:41,839
so i can give my processes their own

00:08:40,399 --> 00:08:44,880
file system

00:08:41,839 --> 00:08:46,399
i can give them um i can isolate them

00:08:44,880 --> 00:08:48,080
from other processes

00:08:46,399 --> 00:08:49,440
and i can give them guaranteed limits on

00:08:48,080 --> 00:08:51,120
cpu and memory

00:08:49,440 --> 00:08:52,640
and so now when i want to start up an

00:08:51,120 --> 00:08:55,040
application

00:08:52,640 --> 00:08:55,920
it's just starting up a process and so

00:08:55,040 --> 00:08:59,360
it'll start up

00:08:55,920 --> 00:09:01,519
really really fast plus i've figured out

00:08:59,360 --> 00:09:02,560
how to give the process its own little

00:09:01,519 --> 00:09:04,560
file system

00:09:02,560 --> 00:09:06,640
i could make sure i package up all the

00:09:04,560 --> 00:09:07,760
libraries and code that the process

00:09:06,640 --> 00:09:09,519
needs to run

00:09:07,760 --> 00:09:11,760
in its own little package and i'm going

00:09:09,519 --> 00:09:14,320
to call it a container

00:09:11,760 --> 00:09:16,480
and so now i can package things up i can

00:09:14,320 --> 00:09:19,600
isolate them from other things

00:09:16,480 --> 00:09:21,760
and since it has its own little file

00:09:19,600 --> 00:09:24,320
system i can do snapshotting i can

00:09:21,760 --> 00:09:26,800
snapshot your your container images

00:09:24,320 --> 00:09:27,839
your process images and snapshot the

00:09:26,800 --> 00:09:30,240
differences

00:09:27,839 --> 00:09:32,640
and i can do that way faster than

00:09:30,240 --> 00:09:36,080
snapshotting a virtual machine

00:09:32,640 --> 00:09:37,519
so we we saw a world where we most of us

00:09:36,080 --> 00:09:38,320
used to use virtual machines to do

00:09:37,519 --> 00:09:40,080
everything

00:09:38,320 --> 00:09:41,440
but now somebody was showing us a way to

00:09:40,080 --> 00:09:42,640
do it with these new things called

00:09:41,440 --> 00:09:44,480
containers

00:09:42,640 --> 00:09:46,880
which were just processes that had some

00:09:44,480 --> 00:09:49,839
advanced isolation features

00:09:46,880 --> 00:09:51,839
and they were showing us how to create

00:09:49,839 --> 00:09:53,519
things much faster because if you start

00:09:51,839 --> 00:09:54,320
a virtual machine it takes a lot of time

00:09:53,519 --> 00:09:56,640
to start up

00:09:54,320 --> 00:09:58,160
and if you snapshot it it snapshots the

00:09:56,640 --> 00:09:59,920
whole virtual machine

00:09:58,160 --> 00:10:01,920
that takes a lot of space and a lot of

00:09:59,920 --> 00:10:03,680
time and here they're doing these things

00:10:01,920 --> 00:10:04,640
with containers that started up real

00:10:03,680 --> 00:10:06,959
fast

00:10:04,640 --> 00:10:09,279
and snapshotting was really fast and

00:10:06,959 --> 00:10:11,040
this was a huge step forward

00:10:09,279 --> 00:10:12,640
and so you can see a picture of this

00:10:11,040 --> 00:10:14,079
that you know you've got these different

00:10:12,640 --> 00:10:16,000
processes with their source code and

00:10:14,079 --> 00:10:19,279
libraries each one's a container and

00:10:16,000 --> 00:10:21,120
they're all running on a linux kernel

00:10:19,279 --> 00:10:22,720
and this is much more efficient than

00:10:21,120 --> 00:10:24,399
running virtual machines because on a

00:10:22,720 --> 00:10:26,480
virtual machine if i want to put say

00:10:24,399 --> 00:10:28,720
three on a server

00:10:26,480 --> 00:10:30,959
each one has the application and then a

00:10:28,720 --> 00:10:32,800
full virtualized linux kernel that's

00:10:30,959 --> 00:10:34,560
part of the virtual machine

00:10:32,800 --> 00:10:35,839
but with containers i just have the

00:10:34,560 --> 00:10:37,920
applications

00:10:35,839 --> 00:10:40,320
and they're all sharing the same linux

00:10:37,920 --> 00:10:41,920
kernel so i'm able to pack a lot more

00:10:40,320 --> 00:10:44,160
containers onto a server

00:10:41,920 --> 00:10:46,079
than i could with a virtual machine so

00:10:44,160 --> 00:10:48,720
these are way more efficient

00:10:46,079 --> 00:10:50,560
so containers really started taking off

00:10:48,720 --> 00:10:52,000
and they started getting exciting

00:10:50,560 --> 00:10:54,560
and then people needed to figure out how

00:10:52,000 --> 00:10:56,480
to provision these how do we manage them

00:10:54,560 --> 00:10:57,600
how do we manage them running on a

00:10:56,480 --> 00:11:01,760
cluster

00:10:57,600 --> 00:11:03,680
well turns out you know the original

00:11:01,760 --> 00:11:05,120
creator of the container sullivan hikes

00:11:03,680 --> 00:11:08,480
he started a company called

00:11:05,120 --> 00:11:10,560
docker maybe you've heard of it and so

00:11:08,480 --> 00:11:12,160
the docker became very very popular and

00:11:10,560 --> 00:11:14,160
now it was time to orchestrate the

00:11:12,160 --> 00:11:15,519
docker containers and

00:11:14,160 --> 00:11:17,600
and there was a couple different

00:11:15,519 --> 00:11:20,000
approaches but

00:11:17,600 --> 00:11:21,839
the one that really went out was called

00:11:20,000 --> 00:11:22,880
kubernetes it came originally from

00:11:21,839 --> 00:11:26,320
google

00:11:22,880 --> 00:11:28,079
and um google believe it or not

00:11:26,320 --> 00:11:30,560
just like docker had been running things

00:11:28,079 --> 00:11:32,399
in containers for a very very long time

00:11:30,560 --> 00:11:34,399
and so they you know if your your gmail

00:11:32,399 --> 00:11:35,680
account for example runs in a container

00:11:34,399 --> 00:11:37,760
if you didn't know it

00:11:35,680 --> 00:11:39,760
and so they have a lot of expertise with

00:11:37,760 --> 00:11:40,640
what we call orchestration which will

00:11:39,760 --> 00:11:43,200
provision

00:11:40,640 --> 00:11:45,519
manage and scale your container-based

00:11:43,200 --> 00:11:48,480
applications across a cluster

00:11:45,519 --> 00:11:50,399
and so what happened is after some

00:11:48,480 --> 00:11:53,360
convincing

00:11:50,399 --> 00:11:54,480
google was willing to donate kubernetes

00:11:53,360 --> 00:11:56,079
to a foundation

00:11:54,480 --> 00:11:58,240
and the one that was started was the

00:11:56,079 --> 00:12:00,560
cloud native computing foundation

00:11:58,240 --> 00:12:02,320
and why this was important and why it

00:12:00,560 --> 00:12:03,680
helped kubernetes to succeed

00:12:02,320 --> 00:12:05,360
was when you put something in a

00:12:03,680 --> 00:12:07,040
foundation you have

00:12:05,360 --> 00:12:09,360
open governance and you have a level

00:12:07,040 --> 00:12:11,120
playing field and now you have multiple

00:12:09,360 --> 00:12:13,040
vendors willing to contribute to the

00:12:11,120 --> 00:12:14,560
project so it's no longer a single

00:12:13,040 --> 00:12:16,320
vendor open source

00:12:14,560 --> 00:12:19,040
so you have multiple folks willing to

00:12:16,320 --> 00:12:20,000
contribute and this helped kubernetes to

00:12:19,040 --> 00:12:23,040
grow

00:12:20,000 --> 00:12:27,360
and become the de facto standard

00:12:23,040 --> 00:12:27,360
for container orchestration

00:12:28,320 --> 00:12:33,680
we'll get into it in more detail but the

00:12:31,519 --> 00:12:35,519
beauty of kubernetes is it has a

00:12:33,680 --> 00:12:38,000
declarative model

00:12:35,519 --> 00:12:38,800
so you get to declare what you want to

00:12:38,000 --> 00:12:40,639
happen

00:12:38,800 --> 00:12:42,560
you tell kubernetes what you want to

00:12:40,639 --> 00:12:44,399
happen hey i would like

00:12:42,560 --> 00:12:46,639
six copies of my application up and

00:12:44,399 --> 00:12:47,760
running and so kubernetes takes your

00:12:46,639 --> 00:12:50,000
declarations

00:12:47,760 --> 00:12:51,760
and it makes it and turns it into

00:12:50,000 --> 00:12:52,399
something that's implemented it actually

00:12:51,760 --> 00:12:54,079
does

00:12:52,399 --> 00:12:55,519
and creates your six copies of your

00:12:54,079 --> 00:12:56,320
applications and gets them up and

00:12:55,519 --> 00:12:59,600
running

00:12:56,320 --> 00:13:01,440
so so really exciting there um what

00:12:59,600 --> 00:13:03,519
kubernetes is able to do

00:13:01,440 --> 00:13:04,480
so just a quick history of what happened

00:13:03,519 --> 00:13:07,519
just to sum up

00:13:04,480 --> 00:13:10,160
again pycon march 2013

00:13:07,519 --> 00:13:12,079
the world was introduced to containers

00:13:10,160 --> 00:13:13,600
then google released kubernetes as its

00:13:12,079 --> 00:13:16,959
container management

00:13:13,600 --> 00:13:20,079
uh solution for orchestration um

00:13:16,959 --> 00:13:21,760
after some convincing the there was the

00:13:20,079 --> 00:13:22,560
creation of the cloud native computing

00:13:21,760 --> 00:13:25,440
foundation

00:13:22,560 --> 00:13:26,240
kubernetes became the seed technology

00:13:25,440 --> 00:13:28,480
and the cnf

00:13:26,240 --> 00:13:29,440
has grown huge there's over 500 member

00:13:28,480 --> 00:13:31,920
companies

00:13:29,440 --> 00:13:34,800
it now hosts over 33 open source

00:13:31,920 --> 00:13:38,270
projects that are somehow related

00:13:34,800 --> 00:13:40,639
to kubernetes and um

00:13:38,270 --> 00:13:42,800
[Music]

00:13:40,639 --> 00:13:45,040
you know there's been even huge huge

00:13:42,800 --> 00:13:47,839
numbers of distributions of kubernetes

00:13:45,040 --> 00:13:51,040
that are now uh certified by the cncf so

00:13:47,839 --> 00:13:53,680
a lot of great progress there

00:13:51,040 --> 00:13:55,519
checking out the kubernetes architecture

00:13:53,680 --> 00:13:57,680
it basically allows you to run across a

00:13:55,519 --> 00:14:00,320
cluster you have a masternode

00:13:57,680 --> 00:14:01,360
that you can interact with via api user

00:14:00,320 --> 00:14:04,639
interface or

00:14:01,360 --> 00:14:06,720
via command line interface and that's

00:14:04,639 --> 00:14:08,240
who you're telling to get your your your

00:14:06,720 --> 00:14:09,360
containers up and running

00:14:08,240 --> 00:14:12,000
and then you have a whole bunch of

00:14:09,360 --> 00:14:15,040
worker nodes in the cluster

00:14:12,000 --> 00:14:16,160
and that's where your containers run now

00:14:15,040 --> 00:14:18,560
what's interesting

00:14:16,160 --> 00:14:19,199
in in the kubernetes architecture is the

00:14:18,560 --> 00:14:21,519
smallest

00:14:19,199 --> 00:14:22,639
unit that you provision and manage is

00:14:21,519 --> 00:14:23,839
not a container

00:14:22,639 --> 00:14:26,800
even though this is all built for

00:14:23,839 --> 00:14:28,720
containers they actually created another

00:14:26,800 --> 00:14:31,680
abstraction called a pod

00:14:28,720 --> 00:14:32,880
because in many cases you might have two

00:14:31,680 --> 00:14:34,720
containers

00:14:32,880 --> 00:14:36,720
that that that are related and they

00:14:34,720 --> 00:14:37,440
really need to run together in the same

00:14:36,720 --> 00:14:40,079
place

00:14:37,440 --> 00:14:40,639
and so the the pod approach allows you

00:14:40,079 --> 00:14:43,120
to

00:14:40,639 --> 00:14:45,440
to organize your containers in a way so

00:14:43,120 --> 00:14:49,360
that if you need them to run together

00:14:45,440 --> 00:14:52,880
and um in the same spot they can

00:14:49,360 --> 00:14:55,199
and so that's the key the first resource

00:14:52,880 --> 00:14:56,240
type that kubernetes introduced was a

00:14:55,199 --> 00:14:58,320
pod

00:14:56,240 --> 00:15:00,240
and again what happens in a pod it's

00:14:58,320 --> 00:15:02,160
visually shown here on the right

00:15:00,240 --> 00:15:04,480
is it's a basically a collection of

00:15:02,160 --> 00:15:06,160
application containers and volumes

00:15:04,480 --> 00:15:08,560
and they run in the same execution

00:15:06,160 --> 00:15:10,560
environment and that pod

00:15:08,560 --> 00:15:12,560
is the smallest deployable unit in a

00:15:10,560 --> 00:15:16,079
kubernetes cluster

00:15:12,560 --> 00:15:17,440
so you know if you just have a single

00:15:16,079 --> 00:15:19,120
container well you'll put a single

00:15:17,440 --> 00:15:21,360
container in a pod

00:15:19,120 --> 00:15:23,920
now applications in the same pod these

00:15:21,360 --> 00:15:25,600
container applications in the same pod

00:15:23,920 --> 00:15:27,519
they're going to share an ip address and

00:15:25,600 --> 00:15:28,959
they're going to share a port space

00:15:27,519 --> 00:15:31,519
they're going to share the same host

00:15:28,959 --> 00:15:34,079
name and they can communicate

00:15:31,519 --> 00:15:35,920
using native inter-process communication

00:15:34,079 --> 00:15:37,920
and they can share mounted volume

00:15:35,920 --> 00:15:39,680
storage

00:15:37,920 --> 00:15:41,199
application containers that run in

00:15:39,680 --> 00:15:43,440
different pods are going to have a

00:15:41,199 --> 00:15:45,680
different ip address

00:15:43,440 --> 00:15:46,959
different host name and believe it or

00:15:45,680 --> 00:15:49,279
not it's as if

00:15:46,959 --> 00:15:50,639
if they're in different pods it's really

00:15:49,279 --> 00:15:53,519
as if they're running

00:15:50,639 --> 00:15:55,199
on different servers so when you're

00:15:53,519 --> 00:15:57,120
designing your pods

00:15:55,199 --> 00:15:58,959
the question you ask yourself is will

00:15:57,120 --> 00:16:00,880
these containers work correctly if they

00:15:58,959 --> 00:16:02,720
land on different machines

00:16:00,880 --> 00:16:03,920
and if that's the case you can put your

00:16:02,720 --> 00:16:06,880
containers in different

00:16:03,920 --> 00:16:07,279
pots another good example of where you

00:16:06,880 --> 00:16:10,320
put

00:16:07,279 --> 00:16:12,800
containers in different pods is when you

00:16:10,320 --> 00:16:14,160
have say a web application in a database

00:16:12,800 --> 00:16:16,079
you typically would put those in

00:16:14,160 --> 00:16:18,399
different pods because

00:16:16,079 --> 00:16:19,120
you typically scale the web application

00:16:18,399 --> 00:16:21,040
up

00:16:19,120 --> 00:16:23,040
at a higher rate than you do your

00:16:21,040 --> 00:16:24,320
databases and so by putting them in

00:16:23,040 --> 00:16:27,360
different pods

00:16:24,320 --> 00:16:28,480
kubernetes can scale up multiple copies

00:16:27,360 --> 00:16:31,759
of the application

00:16:28,480 --> 00:16:32,560
the web application um and do that to a

00:16:31,759 --> 00:16:34,480
higher level

00:16:32,560 --> 00:16:36,240
than than the database which you

00:16:34,480 --> 00:16:39,600
typically don't scale scale

00:16:36,240 --> 00:16:41,279
as large so

00:16:39,600 --> 00:16:43,440
if we look at the features provided by

00:16:41,279 --> 00:16:46,160
kubernetes pods

00:16:43,440 --> 00:16:46,959
basically there's basic features like

00:16:46,160 --> 00:16:49,440
you can create

00:16:46,959 --> 00:16:51,040
list and delete your pods and you can

00:16:49,440 --> 00:16:53,440
run the commands

00:16:51,040 --> 00:16:55,040
um in your pods containers so you can

00:16:53,440 --> 00:16:56,480
run commands in the and the containers

00:16:55,040 --> 00:16:58,320
that run in your pods

00:16:56,480 --> 00:17:00,639
and you can copy files to and from the

00:16:58,320 --> 00:17:02,560
containers that run in your pods

00:17:00,639 --> 00:17:05,120
and there's ways from your local machine

00:17:02,560 --> 00:17:06,799
to actually test and connect

00:17:05,120 --> 00:17:09,520
your connectivity and test the

00:17:06,799 --> 00:17:10,959
applications that run in the pods

00:17:09,520 --> 00:17:12,959
and then one of the key features of

00:17:10,959 --> 00:17:14,640
kubernetes and it's got several that

00:17:12,959 --> 00:17:16,799
distinguish it from previous cloud

00:17:14,640 --> 00:17:18,240
infrastructures one it's got out of

00:17:16,799 --> 00:17:19,839
scaling built in and we're going to talk

00:17:18,240 --> 00:17:23,360
a little more about that

00:17:19,839 --> 00:17:25,360
but also it has built-in it keeps track

00:17:23,360 --> 00:17:27,760
of your pod applications

00:17:25,360 --> 00:17:29,039
to see if they're still up and running

00:17:27,760 --> 00:17:30,799
so

00:17:29,039 --> 00:17:32,880
really important to you if you want 10

00:17:30,799 --> 00:17:35,840
copies of your pod up and running

00:17:32,880 --> 00:17:37,679
that that all 10 stay up and running and

00:17:35,840 --> 00:17:39,760
if a couple crash

00:17:37,679 --> 00:17:41,760
that kubernetes can recognize that a

00:17:39,760 --> 00:17:43,120
couple crashed and can actually start a

00:17:41,760 --> 00:17:44,559
few new ones

00:17:43,120 --> 00:17:46,400
so there's what they call liveness

00:17:44,559 --> 00:17:48,799
probes and readiness probes

00:17:46,400 --> 00:17:49,919
that enable kubernetes to keep track of

00:17:48,799 --> 00:17:52,400
your pods

00:17:49,919 --> 00:17:53,360
and make sure they're up and running or

00:17:52,400 --> 00:17:56,400
start new ones

00:17:53,360 --> 00:18:00,160
if it needs to as i mentioned

00:17:56,400 --> 00:18:01,120
earlier kubernetes is a declarative

00:18:00,160 --> 00:18:03,760
approach

00:18:01,120 --> 00:18:05,760
so you specify what you want and then

00:18:03,760 --> 00:18:08,160
kubernetes will make it happen

00:18:05,760 --> 00:18:10,480
and yaml specifications yaml file

00:18:08,160 --> 00:18:12,880
specifications are typically what is

00:18:10,480 --> 00:18:15,600
used and so if you look on the right

00:18:12,880 --> 00:18:17,679
here we have a very simple specification

00:18:15,600 --> 00:18:19,840
we've got the api version that's being

00:18:17,679 --> 00:18:21,760
used we have the resource type and in

00:18:19,840 --> 00:18:23,600
this case that's a pod

00:18:21,760 --> 00:18:25,280
we give the pod a name in this case

00:18:23,600 --> 00:18:27,360
we're calling it nginx

00:18:25,280 --> 00:18:30,080
and then we use our specification again

00:18:27,360 --> 00:18:32,400
we get to specify what we want to happen

00:18:30,080 --> 00:18:34,080
the container that we're going to run

00:18:32,400 --> 00:18:35,679
has a name we're going to give it a name

00:18:34,080 --> 00:18:37,679
nginx as well

00:18:35,679 --> 00:18:39,120
and the container docker image the

00:18:37,679 --> 00:18:41,200
container image

00:18:39,120 --> 00:18:42,400
is uh you know using a standard the

00:18:41,200 --> 00:18:44,880
standard labeling for

00:18:42,400 --> 00:18:47,360
in container images is nginx version you

00:18:44,880 --> 00:18:49,120
know with a tag of 179

00:18:47,360 --> 00:18:51,200
and then we can also say what ports are

00:18:49,120 --> 00:18:54,160
used by that container image

00:18:51,200 --> 00:18:56,080
and so we take this yaml specification

00:18:54,160 --> 00:18:58,320
and we run a kubernetes command called

00:18:56,080 --> 00:19:01,280
cubecontrol where we say kubecontrol

00:18:58,320 --> 00:19:03,039
create and give the name of this file

00:19:01,280 --> 00:19:05,360
and that file gets passed into

00:19:03,039 --> 00:19:06,480
kubernetes and kubernetes will look at

00:19:05,360 --> 00:19:08,960
the file and say

00:19:06,480 --> 00:19:10,559
well he wants a pod running he wants the

00:19:08,960 --> 00:19:12,960
pod to have a container

00:19:10,559 --> 00:19:15,200
with a particular cane container image

00:19:12,960 --> 00:19:17,520
called engine x 179

00:19:15,200 --> 00:19:19,200
and it's using container port 80. i'm

00:19:17,520 --> 00:19:22,480
going to make that happen for you

00:19:19,200 --> 00:19:25,360
and that's what kubernetes does

00:19:22,480 --> 00:19:26,080
so that's a very basic feature but the

00:19:25,360 --> 00:19:28,000
great

00:19:26,080 --> 00:19:29,600
you know the neat thing about kubernetes

00:19:28,000 --> 00:19:30,559
is it gives you way more than basic

00:19:29,600 --> 00:19:32,160
features

00:19:30,559 --> 00:19:33,600
and one of the key features that you're

00:19:32,160 --> 00:19:37,760
going to like is

00:19:33,600 --> 00:19:39,919
the ability for kubernetes to say i want

00:19:37,760 --> 00:19:40,880
more than one copy of the pod up and

00:19:39,919 --> 00:19:42,960
running

00:19:40,880 --> 00:19:44,320
and there's a new resource type called a

00:19:42,960 --> 00:19:47,039
replica set

00:19:44,320 --> 00:19:49,039
and so the replica set is a controller

00:19:47,039 --> 00:19:51,840
or a pod manager

00:19:49,039 --> 00:19:53,760
that will make sure the proper number of

00:19:51,840 --> 00:19:57,760
your pods that you wanted

00:19:53,760 --> 00:20:00,080
are always running so the pods

00:19:57,760 --> 00:20:00,960
the pods are managed by the replica set

00:20:00,080 --> 00:20:03,679
and

00:20:00,960 --> 00:20:04,640
if if any of them crash the replica set

00:20:03,679 --> 00:20:06,480
controller is going to

00:20:04,640 --> 00:20:08,000
figure out that some of them crash and

00:20:06,480 --> 00:20:08,400
it's going to start new ones up in their

00:20:08,000 --> 00:20:10,559
place

00:20:08,400 --> 00:20:11,440
they may end up on a different server

00:20:10,559 --> 00:20:12,880
but if

00:20:11,440 --> 00:20:14,880
you know in this example we'll see on

00:20:12,880 --> 00:20:16,640
the right we wanted three replicas if

00:20:14,880 --> 00:20:18,559
one or two go down

00:20:16,640 --> 00:20:20,240
the replica set's going to recognize

00:20:18,559 --> 00:20:22,880
that and say well

00:20:20,240 --> 00:20:24,960
he wants three i only see one running i

00:20:22,880 --> 00:20:29,120
better start two more up

00:20:24,960 --> 00:20:32,240
and so um if we look at the specif

00:20:29,120 --> 00:20:34,240
the specification here on the right um

00:20:32,240 --> 00:20:37,360
we see that the resource type is

00:20:34,240 --> 00:20:40,000
different the kind value is replica set

00:20:37,360 --> 00:20:40,880
um we give it a name called front end

00:20:40,000 --> 00:20:44,080
and now we use

00:20:40,880 --> 00:20:46,080
labels in kubernetes we we label

00:20:44,080 --> 00:20:49,440
everything with key value pairs

00:20:46,080 --> 00:20:51,200
and that's how the different uh uh

00:20:49,440 --> 00:20:52,480
pod managers know what they're trying to

00:20:51,200 --> 00:20:55,280
keep track of

00:20:52,480 --> 00:20:56,559
so so in this case uh there's gonna be

00:20:55,280 --> 00:20:59,440
some labels

00:20:56,559 --> 00:20:59,919
uh there's a label for app guest book

00:20:59,440 --> 00:21:01,840
and

00:20:59,919 --> 00:21:03,120
and tears the other label of the values

00:21:01,840 --> 00:21:05,200
front end and you

00:21:03,120 --> 00:21:06,240
see it right here that we want three

00:21:05,200 --> 00:21:09,760
replicas

00:21:06,240 --> 00:21:11,520
so we want three replicas and

00:21:09,760 --> 00:21:13,120
we've got some matching function that

00:21:11,520 --> 00:21:14,320
says okay well how do you know which

00:21:13,120 --> 00:21:16,240
pods are yours

00:21:14,320 --> 00:21:17,679
and there's a little match expression

00:21:16,240 --> 00:21:19,520
that says well

00:21:17,679 --> 00:21:21,440
basically if you read this it says i

00:21:19,520 --> 00:21:25,360
need the pods that

00:21:21,440 --> 00:21:25,760
have um a a key of tier with a value of

00:21:25,360 --> 00:21:28,640
front

00:21:25,760 --> 00:21:30,080
end in it and then at the lower part of

00:21:28,640 --> 00:21:32,000
the specification

00:21:30,080 --> 00:21:34,480
so at the top talks about the replica

00:21:32,000 --> 00:21:36,760
set and what it's trying to manage

00:21:34,480 --> 00:21:38,240
and at the bottom there's a nested

00:21:36,760 --> 00:21:40,240
specification

00:21:38,240 --> 00:21:42,880
that actually says oh and here are the

00:21:40,240 --> 00:21:44,240
pods that i'm trying to start up

00:21:42,880 --> 00:21:47,120
and here are the pods that i need to

00:21:44,240 --> 00:21:50,400
worry about so this one specification

00:21:47,120 --> 00:21:52,480
defines your replica set uh controller

00:21:50,400 --> 00:21:54,480
and it also just defines what it's going

00:21:52,480 --> 00:21:55,760
to manage and in this case it's managing

00:21:54,480 --> 00:21:59,200
some containers

00:21:55,760 --> 00:22:00,159
the name is php redis and here's the

00:21:59,200 --> 00:22:03,440
image for that

00:22:00,159 --> 00:22:05,520
um example there and so it's got

00:22:03,440 --> 00:22:07,120
it's got the image example it's got the

00:22:05,520 --> 00:22:08,799
port and so we have all the

00:22:07,120 --> 00:22:10,559
functionality that we had with the pod

00:22:08,799 --> 00:22:11,120
resource that was on the page before

00:22:10,559 --> 00:22:14,000
this

00:22:11,120 --> 00:22:16,559
but now we're also saying hey keep three

00:22:14,000 --> 00:22:18,799
copies of this running at all times

00:22:16,559 --> 00:22:19,679
and uh again we use the same command at

00:22:18,799 --> 00:22:22,720
the bottom

00:22:19,679 --> 00:22:24,559
cube control create to create the specif

00:22:22,720 --> 00:22:26,880
that to actually

00:22:24,559 --> 00:22:28,559
create the pods and create the container

00:22:26,880 --> 00:22:30,159
images and deploy them

00:22:28,559 --> 00:22:31,760
and keep track of them just from the

00:22:30,159 --> 00:22:34,960
specification

00:22:31,760 --> 00:22:36,080
so why you know why operators love this

00:22:34,960 --> 00:22:37,679
capability

00:22:36,080 --> 00:22:39,360
is because it helps keep them from

00:22:37,679 --> 00:22:40,080
getting those calls in the middle of the

00:22:39,360 --> 00:22:41,919
night

00:22:40,080 --> 00:22:44,000
so normally they've got pager duty they

00:22:41,919 --> 00:22:44,880
got the page pager goes off the

00:22:44,000 --> 00:22:47,840
application

00:22:44,880 --> 00:22:48,799
crashed they've got to hustle and go you

00:22:47,840 --> 00:22:50,640
know go

00:22:48,799 --> 00:22:53,280
go get the thing back up and start it

00:22:50,640 --> 00:22:55,840
again but

00:22:53,280 --> 00:22:56,640
in this case with kubernetes kubernetes

00:22:55,840 --> 00:22:58,720
is gonna

00:22:56,640 --> 00:23:01,200
can recognize that applications have

00:22:58,720 --> 00:23:03,520
failed before the person gets paged

00:23:01,200 --> 00:23:06,080
and ideally we'll start them back up and

00:23:03,520 --> 00:23:08,320
keep the application back up and running

00:23:06,080 --> 00:23:10,320
so a lot of value here um from

00:23:08,320 --> 00:23:12,559
kubernetes compared to previous cloud

00:23:10,320 --> 00:23:15,280
infrastructures

00:23:12,559 --> 00:23:16,960
so here's a quick example we started

00:23:15,280 --> 00:23:19,760
with three replicas

00:23:16,960 --> 00:23:21,600
but now all we have to do is update the

00:23:19,760 --> 00:23:22,080
ammo specification and we see that on

00:23:21,600 --> 00:23:24,080
the right

00:23:22,080 --> 00:23:25,120
and change the replica value from three

00:23:24,080 --> 00:23:27,760
to six

00:23:25,120 --> 00:23:29,679
and guess what kubernetes is gonna do

00:23:27,760 --> 00:23:33,200
kubernetes is gonna say

00:23:29,679 --> 00:23:35,200
oh wow we had three but now you want six

00:23:33,200 --> 00:23:37,280
well i've only got three running but you

00:23:35,200 --> 00:23:38,159
want six so let me get three more up and

00:23:37,280 --> 00:23:40,159
running

00:23:38,159 --> 00:23:41,840
so this is basically the same yaml

00:23:40,159 --> 00:23:44,240
specification all we did was change the

00:23:41,840 --> 00:23:46,640
value of the number of replicas

00:23:44,240 --> 00:23:47,760
and after doing that kubernetes will get

00:23:46,640 --> 00:23:50,240
that up and running

00:23:47,760 --> 00:23:51,279
and go from three to six and these

00:23:50,240 --> 00:23:54,320
replica sets

00:23:51,279 --> 00:23:56,400
are easily deleted and um

00:23:54,320 --> 00:23:57,679
there's also auto scaling this is a

00:23:56,400 --> 00:24:00,880
great feature

00:23:57,679 --> 00:24:02,240
so what you can say is start with three

00:24:00,880 --> 00:24:05,200
replicas

00:24:02,240 --> 00:24:06,159
and go up to seven every time the cpu

00:24:05,200 --> 00:24:09,360
percentage

00:24:06,159 --> 00:24:10,799
uh uh the cpu percentage utilization is

00:24:09,360 --> 00:24:13,120
at eighty percent

00:24:10,799 --> 00:24:14,880
so again unlike previous cloud

00:24:13,120 --> 00:24:17,600
infrastructures

00:24:14,880 --> 00:24:18,320
kubernetes came with auto scaling built

00:24:17,600 --> 00:24:20,400
in and this

00:24:18,320 --> 00:24:21,919
this and its replica support were huge

00:24:20,400 --> 00:24:25,440
advantages and why

00:24:21,919 --> 00:24:29,039
why kubernetes has become so popular um

00:24:25,440 --> 00:24:31,039
in so many industries now i told you a

00:24:29,039 --> 00:24:32,880
whole lot about replica sets

00:24:31,039 --> 00:24:35,120
but you're pretty much not going to use

00:24:32,880 --> 00:24:36,960
them because there's another resource

00:24:35,120 --> 00:24:40,159
type in kubernetes that has all the

00:24:36,960 --> 00:24:43,120
benefits of replica sets

00:24:40,159 --> 00:24:44,960
called deployments but also supports

00:24:43,120 --> 00:24:46,000
rolling out new versions of your

00:24:44,960 --> 00:24:48,000
application

00:24:46,000 --> 00:24:49,840
so it's starting to handle some basic

00:24:48,000 --> 00:24:51,919
life cycle management

00:24:49,840 --> 00:24:55,440
so again most people will use a

00:24:51,919 --> 00:24:57,760
deployment as opposed to a replica set

00:24:55,440 --> 00:25:00,320
and so we'll get into the details of the

00:24:57,760 --> 00:25:02,080
ammo specification a couple of charts

00:25:00,320 --> 00:25:04,720
but the beauty of the deployments is

00:25:02,080 --> 00:25:06,400
they allow you to easily move from one

00:25:04,720 --> 00:25:09,200
version of your application

00:25:06,400 --> 00:25:11,200
to a new version and you get it allows

00:25:09,200 --> 00:25:12,159
you to easily control how the rollouts

00:25:11,200 --> 00:25:14,400
are done

00:25:12,159 --> 00:25:15,919
so you can do outs done quickly where

00:25:14,400 --> 00:25:17,679
let's say you have uh

00:25:15,919 --> 00:25:18,960
there's three copies of your current

00:25:17,679 --> 00:25:21,760
application

00:25:18,960 --> 00:25:23,200
and you need a new one out it'll rapidly

00:25:21,760 --> 00:25:25,200
get three of the new ones out

00:25:23,200 --> 00:25:27,039
and then only after those three new ones

00:25:25,200 --> 00:25:28,320
the new versions are out will it delete

00:25:27,039 --> 00:25:30,960
the old ones

00:25:28,320 --> 00:25:31,919
or you could go slowly where you you

00:25:30,960 --> 00:25:35,039
only

00:25:31,919 --> 00:25:37,120
roll out just a few at a time so there's

00:25:35,039 --> 00:25:38,880
different ways to roll out fast or slow

00:25:37,120 --> 00:25:39,840
and deployments give you the ability to

00:25:38,880 --> 00:25:41,760
do that

00:25:39,840 --> 00:25:43,520
and this all runs server side so if you

00:25:41,760 --> 00:25:44,880
get disconnected while you're running

00:25:43,520 --> 00:25:46,480
these commands you're not going to cause

00:25:44,880 --> 00:25:48,159
any harm

00:25:46,480 --> 00:25:49,600
and then pictorially in the bottom here

00:25:48,159 --> 00:25:51,679
this is what this looks like

00:25:49,600 --> 00:25:52,799
you had your your one set of replica

00:25:51,679 --> 00:25:55,760
sets from

00:25:52,799 --> 00:25:56,880
from version one um and then there was a

00:25:55,760 --> 00:25:59,360
newer version and then

00:25:56,880 --> 00:25:59,919
the top here is is the latest version so

00:25:59,360 --> 00:26:02,000
you can see

00:25:59,919 --> 00:26:03,520
three different versions and each one

00:26:02,000 --> 00:26:06,960
has three pods and

00:26:03,520 --> 00:26:09,039
those are three deployments

00:26:06,960 --> 00:26:10,000
and so again to scale just like the

00:26:09,039 --> 00:26:13,600
replica set

00:26:10,000 --> 00:26:15,600
is very straightforward you just change

00:26:13,600 --> 00:26:16,960
the replica value from three to six and

00:26:15,600 --> 00:26:19,600
now you're going to have that and you

00:26:16,960 --> 00:26:22,640
can run the kube control apply command

00:26:19,600 --> 00:26:25,120
and that'll get that value updated and

00:26:22,640 --> 00:26:27,200
it'll go from three to six

00:26:25,120 --> 00:26:29,520
and if you want to do an update the

00:26:27,200 --> 00:26:31,360
container image

00:26:29,520 --> 00:26:32,799
we have the ability here you look at the

00:26:31,360 --> 00:26:35,919
values in red

00:26:32,799 --> 00:26:38,559
we were able to control the

00:26:35,919 --> 00:26:39,840
the speed of the update with a surge

00:26:38,559 --> 00:26:41,840
value so if you've got

00:26:39,840 --> 00:26:43,440
three out there and you make the surge

00:26:41,840 --> 00:26:45,840
value three

00:26:43,440 --> 00:26:47,039
it'll start three new whole copies up

00:26:45,840 --> 00:26:48,559
before it worries about

00:26:47,039 --> 00:26:50,720
deleting the old ones because you were

00:26:48,559 --> 00:26:53,200
able to three surge up to say

00:26:50,720 --> 00:26:55,120
hey you can use up three more and then

00:26:53,200 --> 00:26:56,080
you have a max unavailable value that

00:26:55,120 --> 00:26:58,320
says hey

00:26:56,080 --> 00:27:00,400
how how many can be unavailable at one

00:26:58,320 --> 00:27:01,919
time so if you're nervous about

00:27:00,400 --> 00:27:03,440
you know your your site getting

00:27:01,919 --> 00:27:05,520
overloaded you can say hey

00:27:03,440 --> 00:27:07,279
only one can be unavailable at one time

00:27:05,520 --> 00:27:08,799
while you're doing the upgrades

00:27:07,279 --> 00:27:10,400
and then in red at the bottom you can

00:27:08,799 --> 00:27:12,080
actually give the newer version of the

00:27:10,400 --> 00:27:13,440
application which will be a new version

00:27:12,080 --> 00:27:16,080
of the container image

00:27:13,440 --> 00:27:17,840
with with a new label so there's

00:27:16,080 --> 00:27:19,440
actually some wonderful commands here

00:27:17,840 --> 00:27:21,279
that control the deployment you can

00:27:19,440 --> 00:27:22,000
check the status you can pause the

00:27:21,279 --> 00:27:23,840
deployment

00:27:22,000 --> 00:27:25,520
you can resume it and you can see the

00:27:23,840 --> 00:27:29,520
deployment history

00:27:25,520 --> 00:27:32,000
so so um you know running your

00:27:29,520 --> 00:27:33,919
your your kubernetes deployment and and

00:27:32,000 --> 00:27:36,720
scaling out new versions is very

00:27:33,919 --> 00:27:40,080
straightforward

00:27:36,720 --> 00:27:44,159
now what's neat about kubernetes is

00:27:40,080 --> 00:27:45,840
the pod applications if they crash

00:27:44,159 --> 00:27:47,760
kubernetes is automatically going to

00:27:45,840 --> 00:27:49,360
start new ones up and they may be on a

00:27:47,760 --> 00:27:53,120
different server

00:27:49,360 --> 00:27:55,600
so how that makes life complicated for

00:27:53,120 --> 00:27:57,520
for if you had a load balancer is well

00:27:55,600 --> 00:27:59,679
these these pods could be crashing and

00:27:57,520 --> 00:28:01,520
be restarted on different machines

00:27:59,679 --> 00:28:03,679
and something needs to keep track of

00:28:01,520 --> 00:28:05,200
where they've moved and be able to

00:28:03,679 --> 00:28:07,600
find them if you're going to do load

00:28:05,200 --> 00:28:09,440
balancing and so

00:28:07,600 --> 00:28:10,720
just a general load balancer doesn't

00:28:09,440 --> 00:28:12,640
really do that and

00:28:10,720 --> 00:28:13,919
kubernetes provides what it calls a

00:28:12,640 --> 00:28:16,320
service object

00:28:13,919 --> 00:28:17,279
that is essentially a proxy or a load

00:28:16,320 --> 00:28:20,320
balancer

00:28:17,279 --> 00:28:20,640
for all your pods and that service will

00:28:20,320 --> 00:28:22,240
be

00:28:20,640 --> 00:28:24,320
assigned what's called a virtual ip

00:28:22,240 --> 00:28:25,120
address that's also called a cluster ip

00:28:24,320 --> 00:28:27,520
address

00:28:25,120 --> 00:28:29,760
and that ip address will then load

00:28:27,520 --> 00:28:30,960
balance to all your pods no matter where

00:28:29,760 --> 00:28:32,640
they are in the cluster

00:28:30,960 --> 00:28:34,080
and if they crash and get moved and

00:28:32,640 --> 00:28:36,559
restarted somewhere else it's still

00:28:34,080 --> 00:28:38,559
going to find them

00:28:36,559 --> 00:28:41,360
and that cluster ip address is something

00:28:38,559 --> 00:28:43,760
that can be provided to a dns service

00:28:41,360 --> 00:28:45,520
the readiness checks are built in so the

00:28:43,760 --> 00:28:48,080
kubernetes service object

00:28:45,520 --> 00:28:50,399
is only going to start uh is only going

00:28:48,080 --> 00:28:53,200
to send traffic to the pods that that it

00:28:50,399 --> 00:28:54,880
can actually say are running

00:28:53,200 --> 00:28:57,039
and we've got some commands here on the

00:28:54,880 --> 00:28:58,559
right uh that shows you first we're

00:28:57,039 --> 00:28:59,760
going to create a deployment with three

00:28:58,559 --> 00:29:01,679
replicas

00:28:59,760 --> 00:29:03,039
and then below that we show how we you

00:29:01,679 --> 00:29:05,840
can use the

00:29:03,039 --> 00:29:08,000
kube control command to create a service

00:29:05,840 --> 00:29:11,200
that will expose that deployment

00:29:08,000 --> 00:29:12,320
and make it available on port 80 and the

00:29:11,200 --> 00:29:15,039
containers that it's

00:29:12,320 --> 00:29:17,200
connecting to are running on port 8000

00:29:15,039 --> 00:29:19,360
so a lot of nice built-in features

00:29:17,200 --> 00:29:22,000
for load balancing that you get for free

00:29:19,360 --> 00:29:24,960
from kubernetes

00:29:22,000 --> 00:29:26,080
um again a huge feature of kubernetes is

00:29:24,960 --> 00:29:29,279
auto scaling

00:29:26,080 --> 00:29:31,679
so think um um you know

00:29:29,279 --> 00:29:32,399
the the the friday after thanksgiving

00:29:31,679 --> 00:29:34,320
where

00:29:32,399 --> 00:29:37,279
there's you know our cyber monday where

00:29:34,320 --> 00:29:39,440
there's huge loads on the websites

00:29:37,279 --> 00:29:41,840
you can build in auto scaling and the

00:29:39,440 --> 00:29:44,080
application will scale itself

00:29:41,840 --> 00:29:46,320
within the parameters that you give it

00:29:44,080 --> 00:29:47,679
so

00:29:46,320 --> 00:29:49,360
you know there's many different ways to

00:29:47,679 --> 00:29:50,960
do the auto scaling but

00:29:49,360 --> 00:29:52,559
we're showing the horizontal auto

00:29:50,960 --> 00:29:55,440
scaling here and i don't have

00:29:52,559 --> 00:29:57,039
time to go into the details but um you

00:29:55,440 --> 00:29:58,960
know basically what's happening on the

00:29:57,039 --> 00:30:00,480
right here is we're declaring hey we're

00:29:58,960 --> 00:30:02,080
going to run in the application

00:30:00,480 --> 00:30:04,000
we're going to run a service and then

00:30:02,080 --> 00:30:05,360
we're going to say hey auto scale

00:30:04,000 --> 00:30:08,480
between 1 and 10

00:30:05,360 --> 00:30:10,480
copies of the pod application

00:30:08,480 --> 00:30:11,760
when you hit an eighty percent threshold

00:30:10,480 --> 00:30:15,360
of util

00:30:11,760 --> 00:30:16,960
utilization on the cpu and

00:30:15,360 --> 00:30:18,960
um there's a little a little little

00:30:16,960 --> 00:30:19,520
program here to create some fake load is

00:30:18,960 --> 00:30:21,600
the last

00:30:19,520 --> 00:30:23,440
the last thing there so if you want to

00:30:21,600 --> 00:30:26,159
try that you can have some fun and try

00:30:23,440 --> 00:30:28,000
out the auto scaling

00:30:26,159 --> 00:30:29,440
okay so let's move over from the

00:30:28,000 --> 00:30:31,440
fundamentals to

00:30:29,440 --> 00:30:33,440
when things get serious and let's talk

00:30:31,440 --> 00:30:34,799
about what you're going to need running

00:30:33,440 --> 00:30:37,919
in production

00:30:34,799 --> 00:30:40,159
and running cuban production um there's

00:30:37,919 --> 00:30:43,679
a lot of things you got to take care of

00:30:40,159 --> 00:30:45,919
and fortunately there are distributions

00:30:43,679 --> 00:30:46,960
like openshift that have a lot built

00:30:45,919 --> 00:30:49,440
into them

00:30:46,960 --> 00:30:51,120
to take a lot take away a lot of the

00:30:49,440 --> 00:30:52,320
pain that you're going to run into when

00:30:51,120 --> 00:30:56,080
running into production

00:30:52,320 --> 00:30:57,840
and let's go through some of these so

00:30:56,080 --> 00:30:59,600
one thing that that openshift is going

00:30:57,840 --> 00:31:02,720
to give you is image creation

00:30:59,600 --> 00:31:03,600
and deployment tooling so yes if you're

00:31:02,720 --> 00:31:05,279
an expert

00:31:03,600 --> 00:31:06,960
at you know you spend a lot of time

00:31:05,279 --> 00:31:09,039
working with docker you're going to be

00:31:06,960 --> 00:31:11,360
an expert maybe about how you pull down

00:31:09,039 --> 00:31:13,519
an image how you take your code

00:31:11,360 --> 00:31:15,039
how your code gets merged into the image

00:31:13,519 --> 00:31:16,880
to create a new image

00:31:15,039 --> 00:31:18,159
and how that image then gets pushed to a

00:31:16,880 --> 00:31:21,919
registry so that

00:31:18,159 --> 00:31:23,600
that you can use it and and

00:31:21,919 --> 00:31:25,200
there are people that are experts on

00:31:23,600 --> 00:31:26,960
that but if you think about

00:31:25,200 --> 00:31:28,799
the cloud native world and we want to

00:31:26,960 --> 00:31:29,679
bring as many developers as we can in

00:31:28,799 --> 00:31:32,000
that world

00:31:29,679 --> 00:31:32,799
we're getting uh python developers we're

00:31:32,000 --> 00:31:35,120
getting

00:31:32,799 --> 00:31:36,240
java developers we're not getting people

00:31:35,120 --> 00:31:39,039
that are say

00:31:36,240 --> 00:31:41,039
full stack container developers

00:31:39,039 --> 00:31:41,360
necessarily but they want the benefits

00:31:41,039 --> 00:31:43,519
of

00:31:41,360 --> 00:31:45,440
of running cloud native applications and

00:31:43,519 --> 00:31:48,080
running in kubernetes

00:31:45,440 --> 00:31:49,360
so production environments like

00:31:48,080 --> 00:31:52,240
openshift provide

00:31:49,360 --> 00:31:53,960
great tools they provide source to image

00:31:52,240 --> 00:31:55,279
which is a way to go from a git

00:31:53,960 --> 00:31:57,840
repository

00:31:55,279 --> 00:31:59,440
you push your new code to the repository

00:31:57,840 --> 00:32:00,240
and they'll automatically pull the right

00:31:59,440 --> 00:32:03,120
base image

00:32:00,240 --> 00:32:03,840
take your code merge it create a new

00:32:03,120 --> 00:32:06,159
image

00:32:03,840 --> 00:32:06,880
push it to a registry and deploy it for

00:32:06,159 --> 00:32:08,799
you

00:32:06,880 --> 00:32:10,559
that's a great feature that saves

00:32:08,799 --> 00:32:12,559
developers a lot of pain

00:32:10,559 --> 00:32:14,480
especially the developers who are not

00:32:12,559 --> 00:32:15,919
the world's expert on creating those

00:32:14,480 --> 00:32:17,519
docker images

00:32:15,919 --> 00:32:19,840
and openshift's also going to give you

00:32:17,519 --> 00:32:20,960
image and configuration change detection

00:32:19,840 --> 00:32:23,360
as well

00:32:20,960 --> 00:32:25,200
so so it's going to worry about your

00:32:23,360 --> 00:32:27,600
images and when the configurations have

00:32:25,200 --> 00:32:28,960
changed and redeploy for you

00:32:27,600 --> 00:32:30,880
the other thing that openshift is going

00:32:28,960 --> 00:32:31,919
to give you in production is security

00:32:30,880 --> 00:32:34,159
guard rails

00:32:31,919 --> 00:32:36,320
so when you when you run in production

00:32:34,159 --> 00:32:38,799
security is a big deal

00:32:36,320 --> 00:32:40,159
very big deal so you need to worry about

00:32:38,799 --> 00:32:43,120
not doing things that would

00:32:40,159 --> 00:32:43,600
that i'd call running with scissors okay

00:32:43,120 --> 00:32:46,880
so

00:32:43,600 --> 00:32:48,960
classic example running privileged

00:32:46,880 --> 00:32:51,279
containers by default

00:32:48,960 --> 00:32:52,799
in in a production environment is bad

00:32:51,279 --> 00:32:53,360
because it gives you a lot of surface

00:32:52,799 --> 00:32:55,760
area

00:32:53,360 --> 00:32:57,519
to exploit a privileged container a

00:32:55,760 --> 00:32:59,600
privileged container runs as

00:32:57,519 --> 00:33:01,360
roots and running those in production

00:32:59,600 --> 00:33:02,080
unless you really really wanted to do

00:33:01,360 --> 00:33:03,519
that

00:33:02,080 --> 00:33:05,279
you don't want to be able to do that by

00:33:03,519 --> 00:33:08,080
default so openshift is going to look

00:33:05,279 --> 00:33:10,960
for that and keep you from doing that

00:33:08,080 --> 00:33:11,679
similarly um setting all the security

00:33:10,960 --> 00:33:13,120
knobs

00:33:11,679 --> 00:33:15,120
and turning them all the right way in

00:33:13,120 --> 00:33:16,399
kubernetes really requires some

00:33:15,120 --> 00:33:18,640
expertise

00:33:16,399 --> 00:33:20,799
openshift will bundle those up into

00:33:18,640 --> 00:33:21,840
profiles it calls them security context

00:33:20,799 --> 00:33:23,600
constraints

00:33:21,840 --> 00:33:24,880
and so you can be safe you use the right

00:33:23,600 --> 00:33:26,240
context constrained

00:33:24,880 --> 00:33:29,039
and you can be safe that you're going to

00:33:26,240 --> 00:33:30,960
get the right security that you intended

00:33:29,039 --> 00:33:33,039
and then another thing that can happen

00:33:30,960 --> 00:33:34,799
there's these things called name spaces

00:33:33,039 --> 00:33:36,080
but if you run in the default name space

00:33:34,799 --> 00:33:38,080
again that could be a security

00:33:36,080 --> 00:33:38,799
vulnerability and that's really frowned

00:33:38,080 --> 00:33:40,320
upon

00:33:38,799 --> 00:33:41,919
openshift is going to keep you from

00:33:40,320 --> 00:33:43,760
doing that out of the box

00:33:41,919 --> 00:33:46,799
and force you to pick a namespace and

00:33:43,760 --> 00:33:49,120
force you to pick some security policies

00:33:46,799 --> 00:33:50,799
similarly running in production you need

00:33:49,120 --> 00:33:53,039
to worry about your cluster size

00:33:50,799 --> 00:33:55,120
management not just your application

00:33:53,039 --> 00:33:57,039
you know you how many worker nodes do

00:33:55,120 --> 00:33:58,799
you have and can you start up new worker

00:33:57,039 --> 00:34:01,120
nodes if you need them

00:33:58,799 --> 00:34:02,399
openshift is a production kubernetes

00:34:01,120 --> 00:34:03,600
distribution that gives you that

00:34:02,399 --> 00:34:04,960
capability

00:34:03,600 --> 00:34:06,799
and it also gives you what we call

00:34:04,960 --> 00:34:08,879
automated day two operations

00:34:06,799 --> 00:34:10,320
it gives you automated installation

00:34:08,879 --> 00:34:11,760
automated updates

00:34:10,320 --> 00:34:13,280
and it's going to worry about making

00:34:11,760 --> 00:34:14,240
sure the operating system that's

00:34:13,280 --> 00:34:16,000
installed and the

00:34:14,240 --> 00:34:17,679
version of kubernetes that's installed

00:34:16,000 --> 00:34:20,000
that everything is

00:34:17,679 --> 00:34:20,800
is is is aligned and that those

00:34:20,000 --> 00:34:24,000
peacefully

00:34:20,800 --> 00:34:25,679
those work well together so as you go

00:34:24,000 --> 00:34:27,679
from learning about kubernetes to

00:34:25,679 --> 00:34:29,919
getting serious about production

00:34:27,679 --> 00:34:31,440
um highly recommend you use something

00:34:29,919 --> 00:34:33,200
like openshift so you have

00:34:31,440 --> 00:34:34,639
less headaches and you worry about more

00:34:33,200 --> 00:34:37,280
of the fun stuff which is building your

00:34:34,639 --> 00:34:37,280
application

00:34:37,520 --> 00:34:41,599
so as you run in production again we're

00:34:40,240 --> 00:34:42,320
talking more about running production

00:34:41,599 --> 00:34:44,639
let's talk about

00:34:42,320 --> 00:34:45,520
continuous delivery so here are some

00:34:44,639 --> 00:34:47,599
continuous

00:34:45,520 --> 00:34:49,839
delivery fundamentals to worry about

00:34:47,599 --> 00:34:52,240
worry about small batch changes all your

00:34:49,839 --> 00:34:54,320
changes should be incremental and finite

00:34:52,240 --> 00:34:56,879
so that you don't break the world and

00:34:54,320 --> 00:35:00,240
you can keep rolling those out

00:34:56,879 --> 00:35:01,599
source control everything everything in

00:35:00,240 --> 00:35:04,079
kubernetes is either

00:35:01,599 --> 00:35:04,880
a say a docker file for creating the

00:35:04,079 --> 00:35:07,920
image

00:35:04,880 --> 00:35:09,760
or yaml deployment files

00:35:07,920 --> 00:35:11,359
you can source control all your

00:35:09,760 --> 00:35:13,119
configuration files

00:35:11,359 --> 00:35:15,040
and so you can even understand who's

00:35:13,119 --> 00:35:17,040
changed the configuration and keep track

00:35:15,040 --> 00:35:19,280
of it

00:35:17,040 --> 00:35:20,079
your developer environments you can keep

00:35:19,280 --> 00:35:21,599
those

00:35:20,079 --> 00:35:23,920
very similar to what your production

00:35:21,599 --> 00:35:26,480
like environments are so you don't run

00:35:23,920 --> 00:35:28,640
into the well it worked on my laptop

00:35:26,480 --> 00:35:30,480
issue because you can really help the

00:35:28,640 --> 00:35:33,200
the developer environment look more like

00:35:30,480 --> 00:35:34,560
the production environment

00:35:33,200 --> 00:35:36,720
and again you could start doing your

00:35:34,560 --> 00:35:39,520
continuous integration of changes

00:35:36,720 --> 00:35:41,200
and start doing highly automated testing

00:35:39,520 --> 00:35:42,000
now if you didn't get all this detail

00:35:41,200 --> 00:35:44,000
here don't worry

00:35:42,000 --> 00:35:45,680
at the end i've got links to two books

00:35:44,000 --> 00:35:48,079
and the first book covers a lot of this

00:35:45,680 --> 00:35:50,960
in great detail and it's a free book

00:35:48,079 --> 00:35:52,560
so um so look out for that but but these

00:35:50,960 --> 00:35:54,640
continuous delivery fundamentals are

00:35:52,560 --> 00:35:56,480
very very important and

00:35:54,640 --> 00:36:00,160
they help you to really take and get the

00:35:56,480 --> 00:36:02,160
most benefits out of cloud native

00:36:00,160 --> 00:36:04,079
now an advanced technique for doing

00:36:02,160 --> 00:36:04,960
continuous integration continuous

00:36:04,079 --> 00:36:07,599
delivery for

00:36:04,960 --> 00:36:09,440
kubernetes is a new tool new delivery

00:36:07,599 --> 00:36:12,160
system called tecton

00:36:09,440 --> 00:36:13,760
and tekton actually itself runs as a

00:36:12,160 --> 00:36:15,200
kubernetes-based cloud native

00:36:13,760 --> 00:36:18,720
application

00:36:15,200 --> 00:36:20,640
and so um the the benefits of it running

00:36:18,720 --> 00:36:23,680
as a cloud native application

00:36:20,640 --> 00:36:26,079
is it it's it's also got the redundancy

00:36:23,680 --> 00:36:27,599
of a of a cloud native application

00:36:26,079 --> 00:36:29,599
so since it runs as a cloud native

00:36:27,599 --> 00:36:31,280
application it has multiple copies it

00:36:29,599 --> 00:36:34,320
has scalability

00:36:31,280 --> 00:36:35,760
your com your your cic dis ci cd system

00:36:34,320 --> 00:36:36,960
is not going to be your bottleneck and

00:36:35,760 --> 00:36:39,839
it's not going to fail

00:36:36,960 --> 00:36:42,160
because it's in itself is cloud native

00:36:39,839 --> 00:36:44,480
and techdon does provide a dashboard

00:36:42,160 --> 00:36:45,440
a dashboard for managing its ci cd

00:36:44,480 --> 00:36:47,280
workloads

00:36:45,440 --> 00:36:48,720
it's got event trigger and web hook

00:36:47,280 --> 00:36:51,359
support

00:36:48,720 --> 00:36:53,760
and it's got shared storage so you can

00:36:51,359 --> 00:36:56,000
build these really complex pipelines

00:36:53,760 --> 00:36:58,240
of what your build processes are and

00:36:56,000 --> 00:37:00,800
then your deployment processes are

00:36:58,240 --> 00:37:02,640
and usually one step feeds into the next

00:37:00,800 --> 00:37:05,359
step feeds into the next step

00:37:02,640 --> 00:37:08,079
and it provides a shared storage area of

00:37:05,359 --> 00:37:10,160
volume storage area to make that easy

00:37:08,079 --> 00:37:12,240
and it's got some basic key constructs

00:37:10,160 --> 00:37:15,440
we'll talk about them it's got steps

00:37:12,240 --> 00:37:19,200
tasks and pipelines on the right here

00:37:15,440 --> 00:37:20,640
is a very uh is a task and each task has

00:37:19,200 --> 00:37:23,040
multiple steps

00:37:20,640 --> 00:37:24,800
and what happens if we go to the next

00:37:23,040 --> 00:37:27,520
chart

00:37:24,800 --> 00:37:28,079
so what happens in a step a step runs a

00:37:27,520 --> 00:37:30,800
command

00:37:28,079 --> 00:37:31,520
in a container so it's already container

00:37:30,800 --> 00:37:32,880
aware

00:37:31,520 --> 00:37:34,720
understand you're going to need certain

00:37:32,880 --> 00:37:37,280
containers certain versions of operating

00:37:34,720 --> 00:37:40,079
systems with certain build tools

00:37:37,280 --> 00:37:41,839
and the step will then run its commands

00:37:40,079 --> 00:37:45,520
on those containers

00:37:41,839 --> 00:37:46,720
a task is is a list of steps that run

00:37:45,520 --> 00:37:49,359
sequentially

00:37:46,720 --> 00:37:51,359
on the same pod so the tasks are there

00:37:49,359 --> 00:37:55,040
and they contain lots of steps

00:37:51,359 --> 00:37:56,960
and then a pipeline is uh composes or

00:37:55,040 --> 00:37:59,760
puts together in a graph form

00:37:56,960 --> 00:38:01,359
multiple tasks so you can build up

00:37:59,760 --> 00:38:05,119
really complex

00:38:01,359 --> 00:38:07,839
ci cd delivery uh systems

00:38:05,119 --> 00:38:08,640
using these this this whole notion of

00:38:07,839 --> 00:38:10,960
building some

00:38:08,640 --> 00:38:13,280
steps you put them into tasks and then

00:38:10,960 --> 00:38:14,960
the pipelines pull all the tasks

00:38:13,280 --> 00:38:16,880
and and they can do things where one

00:38:14,960 --> 00:38:19,839
thing has to run before another

00:38:16,880 --> 00:38:21,680
or it can do things where two different

00:38:19,839 --> 00:38:23,920
tasks can run in parallel

00:38:21,680 --> 00:38:25,920
so a lot affects flexibility in how you

00:38:23,920 --> 00:38:29,200
define your pipelines

00:38:25,920 --> 00:38:31,440
and and how these things run and those

00:38:29,200 --> 00:38:33,119
tasks are reusable so you can share them

00:38:31,440 --> 00:38:34,320
across your organization

00:38:33,119 --> 00:38:36,000
and that's what they you know you look

00:38:34,320 --> 00:38:38,400
at the picture here on the right it's

00:38:36,000 --> 00:38:39,520
showing a pretty complex situation

00:38:38,400 --> 00:38:41,520
so it looks like i've got about five

00:38:39,520 --> 00:38:42,960
minutes start to interrupt you brad five

00:38:41,520 --> 00:38:44,560
minutes

00:38:42,960 --> 00:38:46,240
yeah right yeah five minutes so feel

00:38:44,560 --> 00:38:49,760
free to take questions or

00:38:46,240 --> 00:38:51,200
um we'll tell you what it is um

00:38:49,760 --> 00:38:53,359
yeah we'll start taking a question about

00:38:51,200 --> 00:38:55,200
two minutes so a lot of cool stuff there

00:38:53,359 --> 00:38:57,359
i won't go into it here but everything's

00:38:55,200 --> 00:38:58,880
just simple yaml files to create your

00:38:57,359 --> 00:39:00,480
tasks and put them together in a

00:38:58,880 --> 00:39:02,800
pipeline

00:39:00,480 --> 00:39:04,560
so so take a look at tecton.dev and go

00:39:02,800 --> 00:39:06,480
check that out

00:39:04,560 --> 00:39:07,920
you can extend kubernetes with what are

00:39:06,480 --> 00:39:10,000
called operators

00:39:07,920 --> 00:39:11,920
so this allows you to add new resource

00:39:10,000 --> 00:39:13,760
types and control

00:39:11,920 --> 00:39:15,760
the life cycle management of those

00:39:13,760 --> 00:39:16,720
resource types again i can't go into too

00:39:15,760 --> 00:39:18,480
much detail

00:39:16,720 --> 00:39:20,320
kubernetes was great for stateless

00:39:18,480 --> 00:39:22,000
applications out of the box

00:39:20,320 --> 00:39:24,400
but how do you manage stateful

00:39:22,000 --> 00:39:26,079
applications like databases and worry

00:39:24,400 --> 00:39:27,280
about doing backups and worrying about

00:39:26,079 --> 00:39:28,800
all the state

00:39:27,280 --> 00:39:30,720
and if you have special life cycle

00:39:28,800 --> 00:39:32,240
management you need to create

00:39:30,720 --> 00:39:34,560
well the wonderful thing about

00:39:32,240 --> 00:39:36,640
kubernetes it is built in this new

00:39:34,560 --> 00:39:40,000
extensibility to do that with the

00:39:36,640 --> 00:39:41,359
this capability called operators and you

00:39:40,000 --> 00:39:42,400
can build these and make them really

00:39:41,359 --> 00:39:43,760
really complex

00:39:42,400 --> 00:39:46,320
and if you go look on the right there's

00:39:43,760 --> 00:39:48,160
operator hub there's lots of operators

00:39:46,320 --> 00:39:49,359
out there for all kinds of stateful

00:39:48,160 --> 00:39:50,720
applications

00:39:49,359 --> 00:39:52,800
that will allow you to extend the

00:39:50,720 --> 00:39:54,880
kubernetes platform in an amazing amount

00:39:52,800 --> 00:39:56,960
of ways

00:39:54,880 --> 00:39:59,040
and so we're wrapping up here if i went

00:39:56,960 --> 00:40:00,720
too fast here's the first book

00:39:59,040 --> 00:40:02,320
there's a link you can get it it covers

00:40:00,720 --> 00:40:03,680
a lot of the basics that we covered in

00:40:02,320 --> 00:40:05,520
this presentation

00:40:03,680 --> 00:40:08,079
so feel free to get your free online

00:40:05,520 --> 00:40:09,599
book um last year i was signing these

00:40:08,079 --> 00:40:11,280
all things open and hopefully next year

00:40:09,599 --> 00:40:12,560
i'll be signing books as well

00:40:11,280 --> 00:40:14,720
looking forward to getting back to

00:40:12,560 --> 00:40:16,720
seeing everyone in person

00:40:14,720 --> 00:40:18,640
and here's a sneak preview of my latest

00:40:16,720 --> 00:40:20,160
book it covers more of the

00:40:18,640 --> 00:40:21,599
the latter part of the presentation

00:40:20,160 --> 00:40:22,720
where we talk about open shift and

00:40:21,599 --> 00:40:25,200
production

00:40:22,720 --> 00:40:26,640
and you know running in production and

00:40:25,200 --> 00:40:29,040
and it's kubernetes but

00:40:26,640 --> 00:40:31,359
you know the features that make it easy

00:40:29,040 --> 00:40:32,960
o'reilly's giving you a 30-day trial so

00:40:31,359 --> 00:40:34,560
there's a link for the 30-day trial and

00:40:32,960 --> 00:40:36,319
once you get your 30-day trial

00:40:34,560 --> 00:40:38,079
there's a link here at the bottom take a

00:40:36,319 --> 00:40:39,920
picture that will give you

00:40:38,079 --> 00:40:41,359
uh the first couple chapters are already

00:40:39,920 --> 00:40:43,040
available and we're going to be

00:40:41,359 --> 00:40:43,920
delivering a few more chapters really

00:40:43,040 --> 00:40:46,000
really soon

00:40:43,920 --> 00:40:48,480
so enjoy the sneak preview for the book

00:40:46,000 --> 00:40:50,880
it'll be out early next year hopefully

00:40:48,480 --> 00:40:52,400
and i'll leave that one up because that

00:40:50,880 --> 00:40:55,040
is my last chart i'll be happy to take

00:40:52,400 --> 00:40:55,040
any questions

00:41:01,839 --> 00:41:06,720
thank you brad so please um type your

00:41:04,800 --> 00:41:09,599
questions into the chat window

00:41:06,720 --> 00:41:10,000
if you can uh if you do put them into

00:41:09,599 --> 00:41:12,319
the

00:41:10,000 --> 00:41:13,359
q a window accidentally that's fine

00:41:12,319 --> 00:41:16,400
because i'll just

00:41:13,359 --> 00:41:18,319
copy them over brad as i said is working

00:41:16,400 --> 00:41:20,079
on a dual screen display and he's taking

00:41:18,319 --> 00:41:22,960
questions

00:41:20,079 --> 00:41:22,960
in a different screen

00:41:24,720 --> 00:41:27,920
yep so if you put them in the chat i

00:41:26,160 --> 00:41:31,280
should be able to see them

00:41:27,920 --> 00:41:32,480
or you can raise your hand you can click

00:41:31,280 --> 00:41:34,640
to

00:41:32,480 --> 00:41:36,480
raise your hand or if there aren't any

00:41:34,640 --> 00:41:37,119
questions feel free to use the remaining

00:41:36,480 --> 00:41:38,800
time

00:41:37,119 --> 00:41:42,079
which is unfortunately only about two

00:41:38,800 --> 00:41:44,000
minutes for uh general discussion or

00:41:42,079 --> 00:41:46,720
comments or anything else anyone wants

00:41:44,000 --> 00:41:48,480
to add yeah and i'm available on twitter

00:41:46,720 --> 00:41:50,079
at brad topple and i'm

00:41:48,480 --> 00:41:51,760
always on it so you can always get a

00:41:50,079 --> 00:41:55,280
hold of me and i can

00:41:51,760 --> 00:41:55,280
dm my email address if you have any

00:41:58,520 --> 00:42:01,520

YouTube URL: https://www.youtube.com/watch?v=XolCzMrFXB0


