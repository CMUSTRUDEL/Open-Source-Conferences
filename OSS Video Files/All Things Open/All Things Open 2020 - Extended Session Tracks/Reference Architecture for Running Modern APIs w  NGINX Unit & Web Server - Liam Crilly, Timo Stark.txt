Title: Reference Architecture for Running Modern APIs w  NGINX Unit & Web Server - Liam Crilly, Timo Stark
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Liam Crilly & Timo Stark, NGINX, now part of F5
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: Building and deploying cloud native APIs is a complex operation, and can require a multitude of components. In this workshop we focus on the fundamentals of deploying the runtime API code and publishing the API through an API gateway. To achieve this we use NGINX Unit as a polyglot application server and NGINX web server as an API gateway. With this combination we deliver a solution lightweight enough for dev and strong enough for production.

You will learn how to use NGINX Unit to run one or more apps and APIs in a variety of languages, including seamlessly deploying new versions. You will then see the best practices for how to configure NGINX to perform the common API gateway functions of request routing, rate limiting, and authentication for multiple APIs. We will also touch on advanced use cases such as HTTP method enforcement, and JSON validation.

No previous experience of NGINX or NGINX Unit is required, but a basic knowledge of HTTP and JSON/REST APIs is valuable.
Captions: 
	00:00:05,440 --> 00:00:09,200
as

00:00:06,000 --> 00:00:10,960
monica said this is the nginx workshop

00:00:09,200 --> 00:00:13,440
we're going to be looking at two

00:00:10,960 --> 00:00:16,000
different nginx open source projects

00:00:13,440 --> 00:00:16,880
into next unit and the uh far more

00:00:16,000 --> 00:00:20,240
well-known uh

00:00:16,880 --> 00:00:21,359
nglx web server reverse property so

00:00:20,240 --> 00:00:23,199
this is what we're going to do in this

00:00:21,359 --> 00:00:24,000
workshop and this workshop is a double

00:00:23,199 --> 00:00:26,480
format

00:00:24,000 --> 00:00:27,279
so we're going to take the the first 45

00:00:26,480 --> 00:00:28,720
minutes

00:00:27,279 --> 00:00:30,240
we can get mgx unit and we're going to

00:00:28,720 --> 00:00:31,920
take the second 45 minutes looking at

00:00:30,240 --> 00:00:34,800
engine x plus and we'll have

00:00:31,920 --> 00:00:35,680
the 50-minute break in the middle as per

00:00:34,800 --> 00:00:37,360
the agenda

00:00:35,680 --> 00:00:39,040
but this is essentially a double

00:00:37,360 --> 00:00:40,640
workshop session uh

00:00:39,040 --> 00:00:43,040
it will make sense if you just want if

00:00:40,640 --> 00:00:45,440
you can only stay from one or both parts

00:00:43,040 --> 00:00:46,879
but that's we're going to use an hour

00:00:45,440 --> 00:00:50,000
and 45 minutes with a lot

00:00:46,879 --> 00:00:50,800
to get through so what we're going to do

00:00:50,000 --> 00:00:54,399
with this workshop

00:00:50,800 --> 00:00:56,399
is we're going to build apis

00:00:54,399 --> 00:00:57,520
and run those using ngs unit and then

00:00:56,399 --> 00:01:00,239
we're going to use

00:00:57,520 --> 00:01:01,840
nginx as an api gateway in front of

00:01:00,239 --> 00:01:04,960
those systems

00:01:01,840 --> 00:01:06,240
uh so that's the self-basic diagram my

00:01:04,960 --> 00:01:10,000
name is liam crilley

00:01:06,240 --> 00:01:13,119
i am a product manager for nginx

00:01:10,000 --> 00:01:15,280
and the ngx plus product and

00:01:13,119 --> 00:01:17,040
timo is joining me from germany who is

00:01:15,280 --> 00:01:18,240
going to be uh he's a pro manager

00:01:17,040 --> 00:01:20,720
engineer who is uh

00:01:18,240 --> 00:01:21,759
also probably heavily involved in nginx

00:01:20,720 --> 00:01:25,920
unit

00:01:21,759 --> 00:01:28,000
so here's the agenda i'll do a quick

00:01:25,920 --> 00:01:30,320
introduction to nginx

00:01:28,000 --> 00:01:31,040
and the history then i'll hand it over

00:01:30,320 --> 00:01:33,920
to timo

00:01:31,040 --> 00:01:36,560
and he'll take you through running apis

00:01:33,920 --> 00:01:38,159
with internet's unit

00:01:36,560 --> 00:01:40,880
we will have a q a towards the end of

00:01:38,159 --> 00:01:43,600
this first 45 minute session

00:01:40,880 --> 00:01:45,759
and however because there's two of us we

00:01:43,600 --> 00:01:48,479
can handle questions in the chat

00:01:45,759 --> 00:01:49,360
as monica said quite easily so we'll

00:01:48,479 --> 00:01:51,759
hope to make this

00:01:49,360 --> 00:01:52,640
interactive as possible if you have a

00:01:51,759 --> 00:01:54,560
question

00:01:52,640 --> 00:01:56,000
fire it in there uh and whilst timo

00:01:54,560 --> 00:01:57,759
speaking i'll try and answer

00:01:56,000 --> 00:02:00,000
uh and he will do the same for me a

00:01:57,759 --> 00:02:02,399
little later on

00:02:00,000 --> 00:02:03,360
we'll take a break uh the 15 minutes in

00:02:02,399 --> 00:02:06,159
between

00:02:03,360 --> 00:02:08,160
the two main workshop sessions and then

00:02:06,159 --> 00:02:11,280
we'll get on to deploying

00:02:08,160 --> 00:02:12,080
nginx web server as an api gateway so

00:02:11,280 --> 00:02:15,280
we'll be

00:02:12,080 --> 00:02:19,200
uh extending the work that teemo does

00:02:15,280 --> 00:02:22,239
with the api runtime and will be then

00:02:19,200 --> 00:02:24,319
essentially taken to production using

00:02:22,239 --> 00:02:26,640
engine x as reverse proxies web action

00:02:24,319 --> 00:02:27,680
gateway again we'll leave some q a time

00:02:26,640 --> 00:02:30,640
right at the end

00:02:27,680 --> 00:02:31,920
um but please do uh make this as

00:02:30,640 --> 00:02:33,440
interactive as possible i think it's

00:02:31,920 --> 00:02:37,280
better for everybody

00:02:33,440 --> 00:02:38,800
and just keep your questions flowing

00:02:37,280 --> 00:02:41,200
timo you want to say hello before we uh

00:02:38,800 --> 00:02:44,239
get started sure thanks leon

00:02:41,200 --> 00:02:46,160
um yeah so thanks um for the short

00:02:44,239 --> 00:02:49,200
introduction and hello from

00:02:46,160 --> 00:02:50,239
my site to anybody who's joined in this

00:02:49,200 --> 00:02:53,120
session

00:02:50,239 --> 00:02:54,879
um yes leo said just one more word about

00:02:53,120 --> 00:02:57,599
it it's a workshop it's not like

00:02:54,879 --> 00:02:59,760
uh something we we get talking for the

00:02:57,599 --> 00:03:01,120
next one hour 45 minutes uh

00:02:59,760 --> 00:03:03,200
so if you have questions feel free to

00:03:01,120 --> 00:03:05,599
ask and um i'll put a lot of

00:03:03,200 --> 00:03:07,040
stuff in my demo we do a lot of

00:03:05,599 --> 00:03:09,440
interactive things

00:03:07,040 --> 00:03:11,840
um to make it as interesting as possible

00:03:09,440 --> 00:03:15,200
so looking forward to it

00:03:11,840 --> 00:03:17,200
thanks demon okay so let's

00:03:15,200 --> 00:03:18,319
start off just with a quick introduction

00:03:17,200 --> 00:03:23,200
to nginx

00:03:18,319 --> 00:03:26,159
um now actually before i start

00:03:23,200 --> 00:03:29,440
or as i start um let me make sure i can

00:03:26,159 --> 00:03:29,440
see my chat window here

00:03:29,599 --> 00:03:36,640
there it is so nzx started

00:03:34,000 --> 00:03:37,040
well uh quite a quite a while ago now

00:03:36,640 --> 00:03:40,400
with

00:03:37,040 --> 00:03:43,760
with one guy igor cesarev who was

00:03:40,400 --> 00:03:45,920
working at the time as a assist admin

00:03:43,760 --> 00:03:47,440
really or a web admin probably these

00:03:45,920 --> 00:03:48,560
days you call him a site reliability

00:03:47,440 --> 00:03:51,519
engineer

00:03:48,560 --> 00:03:52,159
sre and he was running the apache web

00:03:51,519 --> 00:03:54,319
servers

00:03:52,159 --> 00:03:56,560
for a russian internet portal service

00:03:54,319 --> 00:03:59,680
kind of like yahoo of the day

00:03:56,560 --> 00:04:01,200
called rambla and he was that was a web

00:03:59,680 --> 00:04:03,200
portal in russia

00:04:01,200 --> 00:04:04,400
and the apache servers at the time the

00:04:03,200 --> 00:04:06,080
internet was going you know

00:04:04,400 --> 00:04:07,519
through one of its huge periods of

00:04:06,080 --> 00:04:09,360
explosive growth

00:04:07,519 --> 00:04:11,200
and the apache web service just couldn't

00:04:09,360 --> 00:04:12,560
handle the amount of traffic and it was

00:04:11,200 --> 00:04:15,280
causing eagle real headaches

00:04:12,560 --> 00:04:15,920
and so he set out to solve that

00:04:15,280 --> 00:04:17,759
basically

00:04:15,920 --> 00:04:20,000
how could he handle more concurrent

00:04:17,759 --> 00:04:22,880
connections with a single server

00:04:20,000 --> 00:04:23,759
at the time there was a computer science

00:04:22,880 --> 00:04:26,880
problem called the

00:04:23,759 --> 00:04:29,120
c10k problem how to handle 10 000

00:04:26,880 --> 00:04:30,880
concurrent connections on a single

00:04:29,120 --> 00:04:32,880
server hardware box

00:04:30,880 --> 00:04:34,240
uh so ego took a slightly different

00:04:32,880 --> 00:04:35,840
approach a very different approach to

00:04:34,240 --> 00:04:36,880
the way that apache was implemented at

00:04:35,840 --> 00:04:40,560
the time

00:04:36,880 --> 00:04:42,639
and came up with nginx which

00:04:40,560 --> 00:04:44,479
blew away his original goal and was able

00:04:42,639 --> 00:04:47,680
to cope with huge loads

00:04:44,479 --> 00:04:48,880
uh by using an event loop an

00:04:47,680 --> 00:04:52,240
asynchronous architecture

00:04:48,880 --> 00:04:55,520
at the heart of nginx

00:04:52,240 --> 00:04:57,360
so intelex is a very

00:04:55,520 --> 00:05:00,160
popular open source project just to get

00:04:57,360 --> 00:05:03,680
a sense if everyone in

00:05:00,160 --> 00:05:06,400
on the session could go in the chat and

00:05:03,680 --> 00:05:07,680
send a message to panelists and

00:05:06,400 --> 00:05:10,479
attendees

00:05:07,680 --> 00:05:11,919
and just type yes or no if you have

00:05:10,479 --> 00:05:15,680
heard of nginx

00:05:11,919 --> 00:05:17,600
or used nginx in the past that will

00:05:15,680 --> 00:05:19,840
be helpful later for when we go through

00:05:17,600 --> 00:05:24,080
the workshop side

00:05:19,840 --> 00:05:24,639
cool seeing some answers fantastic keep

00:05:24,080 --> 00:05:26,639
them coming

00:05:24,639 --> 00:05:28,240
oh lots of guesses all right fantastic

00:05:26,639 --> 00:05:29,759
so we've heard of it let's do something

00:05:28,240 --> 00:05:32,560
interesting with it

00:05:29,759 --> 00:05:33,360
now just to bring you kind of up to date

00:05:32,560 --> 00:05:36,080
so

00:05:33,360 --> 00:05:37,440
that original open source release was

00:05:36,080 --> 00:05:39,199
back in 2004

00:05:37,440 --> 00:05:40,880
a while ago now but it took another

00:05:39,199 --> 00:05:41,759
three years this was a side project for

00:05:40,880 --> 00:05:43,840
igor

00:05:41,759 --> 00:05:44,880
uh you know from his day job uh he

00:05:43,840 --> 00:05:47,120
thought it was viable

00:05:44,880 --> 00:05:48,800
in his own words uh three years later

00:05:47,120 --> 00:05:50,240
2007.

00:05:48,800 --> 00:05:52,160
and then another three years passed

00:05:50,240 --> 00:05:55,840
before we actually went from

00:05:52,160 --> 00:05:59,199
0.9 to 1.0 so internet version 1

00:05:55,840 --> 00:06:03,520
was released on the 12th of april

00:05:59,199 --> 00:06:06,800
2011 uh and from there we started to see

00:06:03,520 --> 00:06:08,960
really tremendous growth and uh the

00:06:06,800 --> 00:06:10,880
documentation site had been translated

00:06:08,960 --> 00:06:14,080
to english by then so that was helping

00:06:10,880 --> 00:06:17,840
uh grow adoption uh

00:06:14,080 --> 00:06:20,880
now fast forward to 2018 engine x unit

00:06:17,840 --> 00:06:22,880
is released an evil sorry the email will

00:06:20,880 --> 00:06:24,400
speak to this in more detail

00:06:22,880 --> 00:06:26,960
but it was also released on the 12th of

00:06:24,400 --> 00:06:28,400
april uh which is the international day

00:06:26,960 --> 00:06:32,880
of human spaceflight

00:06:28,400 --> 00:06:36,080
as igos is quite the space man

00:06:32,880 --> 00:06:38,080
so that kind of brings us up to date uh

00:06:36,080 --> 00:06:39,759
i haven't extended the timeline to this

00:06:38,080 --> 00:06:41,360
year because i think we'd all rather

00:06:39,759 --> 00:06:44,479
forget this year ever happen

00:06:41,360 --> 00:06:48,240
so let's just leave it at 2019 where

00:06:44,479 --> 00:06:50,400
nginx is hugely popular running uh

00:06:48,240 --> 00:06:52,479
majority websites on the internet and

00:06:50,400 --> 00:06:55,599
nginx unit is now emerging as

00:06:52,479 --> 00:06:58,800
a next generation application server so

00:06:55,599 --> 00:06:59,360
with that let's get into the workshop

00:06:58,800 --> 00:07:03,440
content

00:06:59,360 --> 00:07:07,520
and i will hand it over to timo and uh

00:07:03,440 --> 00:07:09,440
timo will pick up the presenting i will

00:07:07,520 --> 00:07:11,599
go on mute and look out for questions

00:07:09,440 --> 00:07:14,840
speak to you later

00:07:11,599 --> 00:07:16,000
thanks liam so let's go ahead and

00:07:14,840 --> 00:07:18,720
continue

00:07:16,000 --> 00:07:19,919
share so let's move the chat window a

00:07:18,720 --> 00:07:23,120
little bit out of the way

00:07:19,919 --> 00:07:26,000
um yes so as i said um

00:07:23,120 --> 00:07:26,479
we'll do a little bit of a of the nginx

00:07:26,000 --> 00:07:29,280
unit

00:07:26,479 --> 00:07:31,680
walkthrough i'll go ahead and talk about

00:07:29,280 --> 00:07:35,120
the basic concept of unit what it is

00:07:31,680 --> 00:07:38,000
how to configure how to install um

00:07:35,120 --> 00:07:38,960
yeah then we'll build three different

00:07:38,000 --> 00:07:41,919
small

00:07:38,960 --> 00:07:42,160
javascript based apis and deploy them on

00:07:41,919 --> 00:07:45,919
an

00:07:42,160 --> 00:07:48,080
aws ec2 instance while the ecr container

00:07:45,919 --> 00:07:50,560
registry

00:07:48,080 --> 00:07:51,919
um so what we're going to build in this

00:07:50,560 --> 00:07:53,919
this step is this

00:07:51,919 --> 00:07:55,199
this box at the very right of this

00:07:53,919 --> 00:07:58,319
picture

00:07:55,199 --> 00:08:01,840
um we will we'll go ahead and create

00:07:58,319 --> 00:08:03,039
three different apis hosted on nginx

00:08:01,840 --> 00:08:06,560
unit

00:08:03,039 --> 00:08:11,120
in a docker container and

00:08:06,560 --> 00:08:13,840
that will publish this apis to

00:08:11,120 --> 00:08:13,840
aws

00:08:14,240 --> 00:08:21,680
yeah as liam said the the nginx unit

00:08:18,160 --> 00:08:22,400
is a public application server a reverse

00:08:21,680 --> 00:08:25,039
proxy

00:08:22,400 --> 00:08:25,440
as well as a static file server as you

00:08:25,039 --> 00:08:28,240
know

00:08:25,440 --> 00:08:29,199
from from nginx where you can serve html

00:08:28,240 --> 00:08:32,320
javascript and

00:08:29,199 --> 00:08:34,800
css files um and

00:08:32,320 --> 00:08:36,719
uh yeah well what does it mean so what

00:08:34,800 --> 00:08:38,000
is what are all the all the features we

00:08:36,719 --> 00:08:40,959
have in place here

00:08:38,000 --> 00:08:42,479
um so the most important thing is that

00:08:40,959 --> 00:08:46,399
ego's vision

00:08:42,479 --> 00:08:47,200
about how to run a next generation web

00:08:46,399 --> 00:08:49,600
server

00:08:47,200 --> 00:08:51,279
and at the time he started with nginx

00:08:49,600 --> 00:08:53,920
open source

00:08:51,279 --> 00:08:55,200
um was the same still the same vision

00:08:53,920 --> 00:08:58,720
when he started

00:08:55,200 --> 00:09:00,959
to yeah create this nginx unit

00:08:58,720 --> 00:09:03,680
application server or when he started to

00:09:00,959 --> 00:09:05,040
to develop this and so that means

00:09:03,680 --> 00:09:08,560
everything that was in the

00:09:05,040 --> 00:09:11,680
in the core of nginx at this point

00:09:08,560 --> 00:09:14,160
was put into the unit project

00:09:11,680 --> 00:09:15,760
as well so all the ideas all the visions

00:09:14,160 --> 00:09:18,959
all the concepts about

00:09:15,760 --> 00:09:22,080
performance security simplicity it's

00:09:18,959 --> 00:09:25,200
it's all part of nginx unit as well

00:09:22,080 --> 00:09:27,600
and i'll go ahead and share a couple of

00:09:25,200 --> 00:09:29,120
um insights about the architecture

00:09:27,600 --> 00:09:31,839
system architecture

00:09:29,120 --> 00:09:33,680
um from unit let me just go ahead and

00:09:31,839 --> 00:09:37,440
click my start watch here

00:09:33,680 --> 00:09:39,760
i'll make sure i stay in time

00:09:37,440 --> 00:09:41,360
so let's let's talk a little bit more

00:09:39,760 --> 00:09:44,560
about what what it means

00:09:41,360 --> 00:09:48,240
by flexible so flexible means that the

00:09:44,560 --> 00:09:52,080
the nginx unit application server is

00:09:48,240 --> 00:09:55,120
fully configurable wire and rest api

00:09:52,080 --> 00:09:55,600
so you can send the configuration to the

00:09:55,120 --> 00:09:58,800
unit

00:09:55,600 --> 00:10:01,440
app server just by curling and

00:09:58,800 --> 00:10:03,360
a specific http endpoint and sending the

00:10:01,440 --> 00:10:07,600
api in adjacent format

00:10:03,360 --> 00:10:10,720
so this is this is definitely um

00:10:07,600 --> 00:10:11,600
a big change instead of the of the nginx

00:10:10,720 --> 00:10:15,200
configuration

00:10:11,600 --> 00:10:17,279
you know from from today and

00:10:15,200 --> 00:10:18,399
yeah so at the moment we support eight

00:10:17,279 --> 00:10:21,440
different

00:10:18,399 --> 00:10:24,959
languages starting from assembly go

00:10:21,440 --> 00:10:25,600
java javascript is something we'll see

00:10:24,959 --> 00:10:29,279
today

00:10:25,600 --> 00:10:31,120
php perl python and ruby

00:10:29,279 --> 00:10:32,800
they act a little bit different it's

00:10:31,120 --> 00:10:35,680
depending on the way we are

00:10:32,800 --> 00:10:36,480
we can implement the language features

00:10:35,680 --> 00:10:38,320
um

00:10:36,480 --> 00:10:40,399
but i'll go ahead and share this in a

00:10:38,320 --> 00:10:42,480
minute with you um

00:10:40,399 --> 00:10:43,680
so what about the security features i

00:10:42,480 --> 00:10:45,760
mean security is

00:10:43,680 --> 00:10:48,079
is all around the place especially when

00:10:45,760 --> 00:10:51,920
it comes to cloud architecture

00:10:48,079 --> 00:10:55,040
security is a key figure at this time

00:10:51,920 --> 00:10:57,519
so we have a couple of options where we

00:10:55,040 --> 00:11:00,640
can secure our application stack

00:10:57,519 --> 00:11:01,760
by hosting them on unit one is that we

00:11:00,640 --> 00:11:04,880
can

00:11:01,760 --> 00:11:07,519
put tls certificates or ssl certificates

00:11:04,880 --> 00:11:08,480
into unit and configure them dynamically

00:11:07,519 --> 00:11:10,320
so we can send

00:11:08,480 --> 00:11:12,560
and update and change certificates on

00:11:10,320 --> 00:11:16,079
the fly without reloading

00:11:12,560 --> 00:11:17,680
any processes and can

00:11:16,079 --> 00:11:19,600
or what we can achieve with this is that

00:11:17,680 --> 00:11:22,000
we can enforce an encryption

00:11:19,600 --> 00:11:22,959
on the transport layer um to our

00:11:22,000 --> 00:11:24,800
applications

00:11:22,959 --> 00:11:26,320
so this is a this is very easy to

00:11:24,800 --> 00:11:28,320
configure and

00:11:26,320 --> 00:11:29,760
i can show you this if we have time

00:11:28,320 --> 00:11:32,000
after the workshop

00:11:29,760 --> 00:11:34,000
um and another or a couple of another

00:11:32,000 --> 00:11:36,320
security features at this point

00:11:34,000 --> 00:11:37,600
um are that the client connections or

00:11:36,320 --> 00:11:39,600
the the

00:11:37,600 --> 00:11:41,519
processes where we handle our client

00:11:39,600 --> 00:11:43,760
connections for each application

00:11:41,519 --> 00:11:44,560
are isolated we'll see this in an

00:11:43,760 --> 00:11:47,600
example

00:11:44,560 --> 00:11:49,360
here and with the newer releases of

00:11:47,600 --> 00:11:51,040
nginx unit we introduced

00:11:49,360 --> 00:11:54,959
something like system namespaces

00:11:51,040 --> 00:11:58,480
isolation and file system isolation

00:11:54,959 --> 00:11:59,600
and about the performance as i said this

00:11:58,480 --> 00:12:02,000
is

00:11:59,600 --> 00:12:04,959
the same vision the same ideas from

00:12:02,000 --> 00:12:06,399
nginx is now an nginx unit so it's the

00:12:04,959 --> 00:12:08,560
it's the same approach we're doing

00:12:06,399 --> 00:12:12,000
asynchronously um

00:12:08,560 --> 00:12:15,600
we work as synchronously and we'll still

00:12:12,000 --> 00:12:18,399
at this point where the 10k mark is

00:12:15,600 --> 00:12:19,760
is always always in place so we want to

00:12:18,399 --> 00:12:22,560
handle

00:12:19,760 --> 00:12:24,720
10 000 simultaneous connections um with

00:12:22,560 --> 00:12:27,440
the lowest amount of memory

00:12:24,720 --> 00:12:28,079
um so this is these are very very key

00:12:27,440 --> 00:12:31,680
figures

00:12:28,079 --> 00:12:33,920
of nginx unit be flexible and simple

00:12:31,680 --> 00:12:36,800
be secure and keep the performance as

00:12:33,920 --> 00:12:36,800
high as possible

00:12:36,880 --> 00:12:40,079
so let's dive into a little bit of the

00:12:38,880 --> 00:12:43,760
system architecture

00:12:40,079 --> 00:12:47,279
of of unit before we're going to

00:12:43,760 --> 00:12:50,399
do the api work um so

00:12:47,279 --> 00:12:53,120
we the nginx unit

00:12:50,399 --> 00:12:53,519
contains out of a couple of processes

00:12:53,120 --> 00:12:57,200
one

00:12:53,519 --> 00:12:59,519
is the controller and the main process

00:12:57,200 --> 00:13:00,959
and then the router process and the

00:12:59,519 --> 00:13:04,880
couple of worker threads

00:13:00,959 --> 00:13:07,040
or the application processes

00:13:04,880 --> 00:13:08,560
the controller process as you can see on

00:13:07,040 --> 00:13:11,279
top here

00:13:08,560 --> 00:13:13,920
is our configuration endpoint where we

00:13:11,279 --> 00:13:16,079
can send our configuration to

00:13:13,920 --> 00:13:17,760
the main process is sending the

00:13:16,079 --> 00:13:21,200
configuration to

00:13:17,760 --> 00:13:23,680
uh to the instance and and

00:13:21,200 --> 00:13:25,600
doing the main work and the router

00:13:23,680 --> 00:13:28,399
process is a very interesting thing but

00:13:25,600 --> 00:13:29,920
let's dive into this a little bit later

00:13:28,399 --> 00:13:32,079
um

00:13:29,920 --> 00:13:34,320
i said the controller process takes care

00:13:32,079 --> 00:13:38,720
of about our configuration

00:13:34,320 --> 00:13:42,000
and by default the controller process

00:13:38,720 --> 00:13:44,480
will listen on a unique socket

00:13:42,000 --> 00:13:45,120
but you can change this if really needed

00:13:44,480 --> 00:13:48,160
to be an

00:13:45,120 --> 00:13:50,800
import so then you can send your

00:13:48,160 --> 00:13:52,399
your json configuration to a port

00:13:50,800 --> 00:13:55,000
instead of a socket

00:13:52,399 --> 00:13:57,519
it's well documented on the website

00:13:55,000 --> 00:13:57,839
unit.nginx.org so feel free to check it

00:13:57,519 --> 00:14:00,880
out

00:13:57,839 --> 00:14:02,800
for default it is a unix socket so

00:14:00,880 --> 00:14:04,720
any configuration change you send to the

00:14:02,800 --> 00:14:06,240
controller process will be checked by

00:14:04,720 --> 00:14:08,160
the controller

00:14:06,240 --> 00:14:09,440
and in case it's valid it will send to

00:14:08,160 --> 00:14:11,680
the main process

00:14:09,440 --> 00:14:14,079
to get processed and to reconfigure the

00:14:11,680 --> 00:14:14,079
instance

00:14:15,760 --> 00:14:19,519
the router process here um is

00:14:18,720 --> 00:14:22,639
interesting

00:14:19,519 --> 00:14:23,600
because the router process is the more

00:14:22,639 --> 00:14:26,000
or less your

00:14:23,600 --> 00:14:27,839
the the process taking care of the http

00:14:26,000 --> 00:14:29,680
connections from the client side

00:14:27,839 --> 00:14:31,760
the controller process takes care of the

00:14:29,680 --> 00:14:33,600
connections from our side from the

00:14:31,760 --> 00:14:34,320
sysadmin side for the configuration

00:14:33,600 --> 00:14:37,839
changes

00:14:34,320 --> 00:14:40,079
and the router process is the

00:14:37,839 --> 00:14:41,040
exposed process if you want to take care

00:14:40,079 --> 00:14:42,399
of the

00:14:41,040 --> 00:14:44,880
of the client connections from the

00:14:42,399 --> 00:14:48,160
outside world

00:14:44,880 --> 00:14:49,680
and it contains what a main thread and a

00:14:48,160 --> 00:14:51,360
couple of worker threads depending on

00:14:49,680 --> 00:14:54,079
how many applications

00:14:51,360 --> 00:14:56,000
you have configured but we'll see this

00:14:54,079 --> 00:14:56,959
in our workshop i have a demo where you

00:14:56,000 --> 00:14:59,760
can see

00:14:56,959 --> 00:15:02,000
how that how that looks like but the

00:14:59,760 --> 00:15:03,920
router process is a very important thing

00:15:02,000 --> 00:15:06,320
to know about that all the client

00:15:03,920 --> 00:15:08,800
connections everything we send from the

00:15:06,320 --> 00:15:10,560
client side to unit will be handled by

00:15:08,800 --> 00:15:13,839
the router process

00:15:10,560 --> 00:15:16,079
and that enables us to configure some

00:15:13,839 --> 00:15:17,040
some routing policies we call them

00:15:16,079 --> 00:15:19,920
measures

00:15:17,040 --> 00:15:22,959
um on unit and this is something i'll go

00:15:19,920 --> 00:15:22,959
ahead and see in a minute

00:15:25,360 --> 00:15:28,959
so this is how that works so we have a

00:15:26,959 --> 00:15:30,160
client connection and request to the

00:15:28,959 --> 00:15:32,880
router process

00:15:30,160 --> 00:15:34,240
um and then we configure two different

00:15:32,880 --> 00:15:37,360
applications

00:15:34,240 --> 00:15:40,399
and as we encapsulate

00:15:37,360 --> 00:15:41,040
uh like the language modules in unit

00:15:40,399 --> 00:15:43,680
modules

00:15:41,040 --> 00:15:45,440
most of them in that case php we can run

00:15:43,680 --> 00:15:49,120
for example php5

00:15:45,440 --> 00:15:49,839
php 7 nodejs or javascript and ruby

00:15:49,120 --> 00:15:52,880
applications

00:15:49,839 --> 00:15:56,880
all of the same instance and

00:15:52,880 --> 00:15:58,720
unit can dynamically make use of them

00:15:56,880 --> 00:16:00,240
um and of the underlying system

00:15:58,720 --> 00:16:03,199
architecture

00:16:00,240 --> 00:16:04,880
to configure or run yeah to configure

00:16:03,199 --> 00:16:06,800
the application and route the traffic to

00:16:04,880 --> 00:16:09,839
the to the right applications

00:16:06,800 --> 00:16:11,759
at the time it's it's it's requested so

00:16:09,839 --> 00:16:13,440
that means the polyglot application

00:16:11,759 --> 00:16:17,440
server we can use

00:16:13,440 --> 00:16:19,920
unit to host our supported languages

00:16:17,440 --> 00:16:21,360
eight of them on the same unit instance

00:16:19,920 --> 00:16:24,800
on the same system

00:16:21,360 --> 00:16:26,880
without having another main unit process

00:16:24,800 --> 00:16:27,839
up and running so the main unit process

00:16:26,880 --> 00:16:31,440
will take care of

00:16:27,839 --> 00:16:31,440
all eight different languages

00:16:32,560 --> 00:16:37,279
and this is a go example but this is

00:16:35,519 --> 00:16:40,560
kind of the same logic

00:16:37,279 --> 00:16:44,399
than for node.js

00:16:40,560 --> 00:16:46,560
it's the left part is your

00:16:44,399 --> 00:16:47,519
yeah the out-of-the-box way if you want

00:16:46,560 --> 00:16:50,399
so

00:16:47,519 --> 00:16:51,600
let's rewrite this here on the fly to

00:16:50,399 --> 00:16:54,639
node.js

00:16:51,600 --> 00:16:58,320
um i mean node.js brings an

00:16:54,639 --> 00:17:01,440
own http server if you want with it

00:16:58,320 --> 00:17:03,839
we could use but the way of the

00:17:01,440 --> 00:17:05,839
so the implementation how node.js

00:17:03,839 --> 00:17:09,439
implemented the http

00:17:05,839 --> 00:17:10,799
server and how our unit router process

00:17:09,439 --> 00:17:14,480
and our modules

00:17:10,799 --> 00:17:16,640
implemented the http server is at this

00:17:14,480 --> 00:17:19,039
point very different

00:17:16,640 --> 00:17:21,919
the node.js one is mostly written in

00:17:19,039 --> 00:17:25,760
javascript and our http

00:17:21,919 --> 00:17:28,960
processor is written mostly in c

00:17:25,760 --> 00:17:29,600
and with yeah with the router process we

00:17:28,960 --> 00:17:31,360
have here

00:17:29,600 --> 00:17:32,960
we have a lot of flexibility we can

00:17:31,360 --> 00:17:34,000
configure the route measures we can

00:17:32,960 --> 00:17:37,520
configure

00:17:34,000 --> 00:17:41,280
a lot of different things and

00:17:37,520 --> 00:17:42,000
as we have this router on top of our

00:17:41,280 --> 00:17:44,160
application

00:17:42,000 --> 00:17:46,160
of the language stack the router

00:17:44,160 --> 00:17:47,200
configuration is independent from the

00:17:46,160 --> 00:17:50,080
language

00:17:47,200 --> 00:17:51,600
the application is written in so the

00:17:50,080 --> 00:17:54,160
route configuration is

00:17:51,600 --> 00:17:56,160
always the same structure it's always

00:17:54,160 --> 00:17:59,200
the same schema the same

00:17:56,160 --> 00:18:02,480
syntax independing of the language

00:17:59,200 --> 00:18:02,960
beyond the router so this is one benefit

00:18:02,480 --> 00:18:05,360
it's

00:18:02,960 --> 00:18:06,080
it keeps the configuration aligned and

00:18:05,360 --> 00:18:08,240
simple

00:18:06,080 --> 00:18:10,000
even if if we are hosting different

00:18:08,240 --> 00:18:12,559
applications in different languages in

00:18:10,000 --> 00:18:15,840
the same instance

00:18:12,559 --> 00:18:17,840
and we'll have examples for this as well

00:18:15,840 --> 00:18:19,520
um i hope you can see this it's big

00:18:17,840 --> 00:18:20,480
enough and this is a the process

00:18:19,520 --> 00:18:24,480
overview

00:18:20,480 --> 00:18:26,400
um of unit as we said this is the main

00:18:24,480 --> 00:18:29,440
process in version 1.20

00:18:26,400 --> 00:18:30,320
our last one with a couple of options so

00:18:29,440 --> 00:18:33,679
you see

00:18:30,320 --> 00:18:37,039
unit is right now able to be controlled

00:18:33,679 --> 00:18:38,960
or configured via the unix socket

00:18:37,039 --> 00:18:40,880
then we have the controller and the

00:18:38,960 --> 00:18:42,480
router process

00:18:40,880 --> 00:18:44,640
and see that they're running as

00:18:42,480 --> 00:18:47,760
non-privileged users it's this

00:18:44,640 --> 00:18:50,559
kind of the same logic um

00:18:47,760 --> 00:18:52,000
we have at the moment with nginx we have

00:18:50,559 --> 00:18:53,280
a main process that's running as

00:18:52,000 --> 00:18:55,840
privileged user

00:18:53,280 --> 00:18:57,760
root in that case and then we have all

00:18:55,840 --> 00:19:00,720
the other processes

00:18:57,760 --> 00:19:01,520
running under non-privileged user and

00:19:00,720 --> 00:19:05,600
what you can see

00:19:01,520 --> 00:19:08,080
here is that we have this wordpress user

00:19:05,600 --> 00:19:09,440
so that means what we can do we can

00:19:08,080 --> 00:19:12,640
create a run user

00:19:09,440 --> 00:19:14,880
on our you know in the container or on a

00:19:12,640 --> 00:19:18,160
vm or an ec2 instance

00:19:14,880 --> 00:19:20,160
wherever we install unit and can make

00:19:18,160 --> 00:19:21,200
use of this run user in the unit

00:19:20,160 --> 00:19:25,760
configuration

00:19:21,200 --> 00:19:28,559
so that means unit can create a process

00:19:25,760 --> 00:19:29,039
controlled or run by it by a specific

00:19:28,559 --> 00:19:32,559
user

00:19:29,039 --> 00:19:35,360
in that case wordpress so we have an

00:19:32,559 --> 00:19:39,039
application wordpress we have f1 and two

00:19:35,360 --> 00:19:42,160
and we have a django python project

00:19:39,039 --> 00:19:44,240
running a one unit instance this is our

00:19:42,160 --> 00:19:46,480
demo here

00:19:44,240 --> 00:19:48,720
so how to install where you can get your

00:19:46,480 --> 00:19:51,520
nginx unit from

00:19:48,720 --> 00:19:52,000
um yeah you can use sender as red hat

00:19:51,520 --> 00:19:55,520
ubuntu

00:19:52,000 --> 00:19:56,160
debian based systems docker or mac os on

00:19:55,520 --> 00:20:00,240
your

00:19:56,160 --> 00:20:03,120
macbook imac locally um

00:20:00,240 --> 00:20:03,600
so i have a little asterisk here because

00:20:03,120 --> 00:20:05,679
um

00:20:03,600 --> 00:20:08,080
what i've not put on this slide but it's

00:20:05,679 --> 00:20:10,240
it's it's required to do so

00:20:08,080 --> 00:20:13,120
um is you you have to configure the

00:20:10,240 --> 00:20:15,360
nginx unit repository

00:20:13,120 --> 00:20:17,200
on your system before you can you can

00:20:15,360 --> 00:20:20,480
jump install app get install app

00:20:17,200 --> 00:20:22,159
install whatever it's documented on the

00:20:20,480 --> 00:20:24,640
website and i'll go ahead and

00:20:22,159 --> 00:20:25,520
paste the link to the repository

00:20:24,640 --> 00:20:27,840
configuration

00:20:25,520 --> 00:20:28,960
in the chat um right at the point i'm

00:20:27,840 --> 00:20:32,559
done with my

00:20:28,960 --> 00:20:35,360
uh with my part um so you'll have it

00:20:32,559 --> 00:20:36,320
definitely right after right after my

00:20:35,360 --> 00:20:39,360
talk here

00:20:36,320 --> 00:20:41,679
um yeah after you you configured your

00:20:39,360 --> 00:20:42,559
your environment and the repository is

00:20:41,679 --> 00:20:44,240
available

00:20:42,559 --> 00:20:47,039
uh you can simply go ahead and jump

00:20:44,240 --> 00:20:50,080
install unit

00:20:47,039 --> 00:20:50,640
and the unit is the core module of nginx

00:20:50,080 --> 00:20:52,480
unit

00:20:50,640 --> 00:20:54,000
and then we have a couple of language

00:20:52,480 --> 00:20:57,600
modules

00:20:54,000 --> 00:21:00,559
like for php or for go for ruby python

00:20:57,600 --> 00:21:02,880
um and this is something you can install

00:21:00,559 --> 00:21:06,159
alongside with unit

00:21:02,880 --> 00:21:08,720
so installing unit as a core and then

00:21:06,159 --> 00:21:10,480
depending on the language module um you

00:21:08,720 --> 00:21:14,320
can go ahead and install

00:21:10,480 --> 00:21:16,080
php ruby python go

00:21:14,320 --> 00:21:18,240
for javascript it's different that's why

00:21:16,080 --> 00:21:20,799
i picked this as an example here

00:21:18,240 --> 00:21:22,880
um because it's better to do this a

00:21:20,799 --> 00:21:25,360
little bit more interactively

00:21:22,880 --> 00:21:26,640
um yeah the same for ubuntu debian based

00:21:25,360 --> 00:21:28,960
systems

00:21:26,640 --> 00:21:30,000
and if you if you're familiar with

00:21:28,960 --> 00:21:32,080
docker and if

00:21:30,000 --> 00:21:33,919
you're if you would like to get started

00:21:32,080 --> 00:21:35,760
um without

00:21:33,919 --> 00:21:38,159
installing or configuring anything on

00:21:35,760 --> 00:21:38,640
your system uh you can use docker as

00:21:38,159 --> 00:21:40,880
well

00:21:38,640 --> 00:21:41,679
um i personally prefer the docker

00:21:40,880 --> 00:21:44,720
approach

00:21:41,679 --> 00:21:45,520
um because there is a base image called

00:21:44,720 --> 00:21:48,640
unit

00:21:45,520 --> 00:21:51,840
version at the moment it's 1.20.0

00:21:48,640 --> 00:21:53,600
and at the point where talking um

00:21:51,840 --> 00:21:55,520
it may be different in a couple of

00:21:53,600 --> 00:21:58,960
months um so

00:21:55,520 --> 00:22:01,760
update the uh yeah the number

00:21:58,960 --> 00:22:02,720
the release number if needed um and then

00:22:01,760 --> 00:22:05,280
you use the

00:22:02,720 --> 00:22:06,960
full version of it and this will include

00:22:05,280 --> 00:22:08,000
all the language modules we're currently

00:22:06,960 --> 00:22:09,760
supporting

00:22:08,000 --> 00:22:11,520
and so this is maybe a good starting

00:22:09,760 --> 00:22:12,880
point to play a little bit or hack a

00:22:11,520 --> 00:22:16,480
little bit around

00:22:12,880 --> 00:22:19,200
with unit to use the nginx unit full

00:22:16,480 --> 00:22:19,200
docker image

00:22:20,559 --> 00:22:24,880
all right so let's talk a little bit

00:22:22,720 --> 00:22:27,120
about the configuration so what that's

00:22:24,880 --> 00:22:28,799
the next step so we installed it

00:22:27,120 --> 00:22:31,440
we pulled the docker image we can type

00:22:28,799 --> 00:22:32,159
docker run have a unit container up and

00:22:31,440 --> 00:22:34,640
running

00:22:32,159 --> 00:22:35,919
and the next step is the configuration

00:22:34,640 --> 00:22:38,880
of unit so how we can

00:22:35,919 --> 00:22:39,520
bring an application inside of unit as i

00:22:38,880 --> 00:22:43,679
said it's

00:22:39,520 --> 00:22:46,240
all dynamically configured with an api

00:22:43,679 --> 00:22:48,480
um so what we can do is we can write a

00:22:46,240 --> 00:22:50,640
json file

00:22:48,480 --> 00:22:52,559
containing our configuration and

00:22:50,640 --> 00:22:54,720
basically at the beginning we have two

00:22:52,559 --> 00:22:55,600
different parts we have the certificate

00:22:54,720 --> 00:22:58,000
section

00:22:55,600 --> 00:22:59,919
and the config section on the on the

00:22:58,000 --> 00:23:02,159
root level if you want to say

00:22:59,919 --> 00:23:03,840
certificate is like the placeholder for

00:23:02,159 --> 00:23:06,880
all our tls certificates

00:23:03,840 --> 00:23:09,919
we can use in our listeners and the

00:23:06,880 --> 00:23:13,200
config holds a couple of other

00:23:09,919 --> 00:23:13,200
configuration objects

00:23:13,840 --> 00:23:17,760
so this is as you see all the all the

00:23:16,320 --> 00:23:20,720
the paths

00:23:17,760 --> 00:23:22,640
are printed here in the headline so at

00:23:20,720 --> 00:23:25,360
the moment we are in localhost

00:23:22,640 --> 00:23:26,400
config if you notice here that was just

00:23:25,360 --> 00:23:29,520
localhost

00:23:26,400 --> 00:23:31,760
um so as it is all json based and

00:23:29,520 --> 00:23:33,440
real objects you can you can dive into

00:23:31,760 --> 00:23:34,320
another section by just adding the

00:23:33,440 --> 00:23:37,039
object

00:23:34,320 --> 00:23:37,919
key at the end of your url so that means

00:23:37,039 --> 00:23:40,799
localhost

00:23:37,919 --> 00:23:42,559
config slash listeners will bring you

00:23:40,799 --> 00:23:44,640
all the listeners slash routes will

00:23:42,559 --> 00:23:46,400
bring you all routes

00:23:44,640 --> 00:23:47,840
and uh yeah the same approach for the

00:23:46,400 --> 00:23:51,039
for the other

00:23:47,840 --> 00:23:54,240
objects here so

00:23:51,039 --> 00:23:54,799
settings are inter instance wide or unit

00:23:54,240 --> 00:23:57,840
wide

00:23:54,799 --> 00:24:00,960
configuration settings the listener

00:23:57,840 --> 00:24:03,760
is the the main entry

00:24:00,960 --> 00:24:04,000
door to your unit server where you can

00:24:03,760 --> 00:24:06,000
say

00:24:04,000 --> 00:24:07,520
you bind an ip address at the specific

00:24:06,000 --> 00:24:09,200
port to

00:24:07,520 --> 00:24:11,440
the outside world where you can accept

00:24:09,200 --> 00:24:13,679
connections

00:24:11,440 --> 00:24:15,600
this is something we'll see in the demo

00:24:13,679 --> 00:24:18,080
we'll not go ahead and

00:24:15,600 --> 00:24:20,480
talk about the routes and the measures

00:24:18,080 --> 00:24:22,880
because this is a very complex

00:24:20,480 --> 00:24:24,480
um topic of two examples in the next two

00:24:22,880 --> 00:24:25,919
slides where we'll explain a little bit

00:24:24,480 --> 00:24:28,640
how that calling works

00:24:25,919 --> 00:24:30,799
or how they work um but these are the

00:24:28,640 --> 00:24:33,200
the routes i've talked about earlier

00:24:30,799 --> 00:24:35,520
and they will control the behavior of

00:24:33,200 --> 00:24:37,840
our unit router

00:24:35,520 --> 00:24:38,960
the application object yeah is the

00:24:37,840 --> 00:24:42,960
container or the

00:24:38,960 --> 00:24:45,840
the the object where all our application

00:24:42,960 --> 00:24:46,960
configuration is placed into the

00:24:45,840 --> 00:24:49,760
upstream

00:24:46,960 --> 00:24:50,640
directive is pretty new this is for load

00:24:49,760 --> 00:24:52,640
balancing

00:24:50,640 --> 00:24:53,760
this is something we'll not cover in

00:24:52,640 --> 00:24:56,480
today's talk

00:24:53,760 --> 00:24:57,600
um and the access log is something where

00:24:56,480 --> 00:25:00,880
you can say

00:24:57,600 --> 00:25:04,320
where we should store the access locks

00:25:00,880 --> 00:25:07,760
to our to our applications

00:25:04,320 --> 00:25:08,240
um one sliding node on the axis lock

00:25:07,760 --> 00:25:09,840
thing

00:25:08,240 --> 00:25:12,159
it is pretty handy when it comes to

00:25:09,840 --> 00:25:14,400
docker to create a file here

00:25:12,159 --> 00:25:15,840
and inside of your docker file for

00:25:14,400 --> 00:25:18,720
example um

00:25:15,840 --> 00:25:19,120
create a sim link to std error or stdl

00:25:18,720 --> 00:25:21,840
to

00:25:19,120 --> 00:25:23,600
to this file so with this you will be

00:25:21,840 --> 00:25:24,480
able to see the access logs to your

00:25:23,600 --> 00:25:27,440
application

00:25:24,480 --> 00:25:29,279
within the docker logs so just specify

00:25:27,440 --> 00:25:31,120
something wrong log access log

00:25:29,279 --> 00:25:32,960
touch the file make it empty and then

00:25:31,120 --> 00:25:36,320
sim link it to

00:25:32,960 --> 00:25:36,320
std out or error

00:25:38,080 --> 00:25:44,799
yeah the routes as i said

00:25:41,679 --> 00:25:47,840
each round has a name and a specific

00:25:44,799 --> 00:25:49,919
a specific match as well as an action

00:25:47,840 --> 00:25:52,080
um the match is more of the routing

00:25:49,919 --> 00:25:53,919
pattern and in case it's

00:25:52,080 --> 00:25:57,840
it's matching the routing pattern it

00:25:53,919 --> 00:25:57,840
will invoke a specific action

00:25:58,159 --> 00:26:01,279
this is an example for wordpress where

00:26:00,159 --> 00:26:05,039
you say if the uri

00:26:01,279 --> 00:26:07,760
contains something php or something dot

00:26:05,039 --> 00:26:10,960
php slash or wp admin

00:26:07,760 --> 00:26:15,200
we'll go ahead and send the request to

00:26:10,960 --> 00:26:18,720
this specific application or

00:26:15,200 --> 00:26:20,480
as a fallback we can say we can try to

00:26:18,720 --> 00:26:21,520
serve a static file this is the share

00:26:20,480 --> 00:26:24,480
directive

00:26:21,520 --> 00:26:27,120
so that means if the user wants to to to

00:26:24,480 --> 00:26:29,919
cncss or javascript file or load it

00:26:27,120 --> 00:26:32,559
um we'll go ahead and check inside of

00:26:29,919 --> 00:26:35,120
our app home wordpress for

00:26:32,559 --> 00:26:37,200
the file if it exists we can send it if

00:26:35,120 --> 00:26:38,400
it's not exist as a fallback we will

00:26:37,200 --> 00:26:41,039
pass the

00:26:38,400 --> 00:26:42,960
the request to the index.php file in

00:26:41,039 --> 00:26:46,000
this case

00:26:42,960 --> 00:26:46,480
um but as i said this is um you can do a

00:26:46,000 --> 00:26:48,480
lot of

00:26:46,480 --> 00:26:51,360
complex things with the route matcher

00:26:48,480 --> 00:26:53,440
just that you that you saw that

00:26:51,360 --> 00:26:54,720
it's always the same structure a matcha

00:26:53,440 --> 00:26:56,240
action um

00:26:54,720 --> 00:26:57,760
then you have a couple of objects here

00:26:56,240 --> 00:27:00,880
like uri and

00:26:57,760 --> 00:27:01,440
other request parameters um so it's

00:27:00,880 --> 00:27:03,600
worth

00:27:01,440 --> 00:27:07,840
to check out the website and i said i'll

00:27:03,600 --> 00:27:07,840
go ahead and share the link in the chat

00:27:08,720 --> 00:27:13,200
right so after we configured everything

00:27:10,799 --> 00:27:14,799
um how we can send the configuration to

00:27:13,200 --> 00:27:17,919
unit

00:27:14,799 --> 00:27:19,360
um yeah we're we will at the moment we

00:27:17,919 --> 00:27:21,039
are thinking it's uh it's still the

00:27:19,360 --> 00:27:24,159
websocket it's not a tcp

00:27:21,039 --> 00:27:25,520
port it's socket so we curl use the

00:27:24,159 --> 00:27:28,799
socket

00:27:25,520 --> 00:27:31,840
then we send the json to

00:27:28,799 --> 00:27:33,520
the config endpoint um

00:27:31,840 --> 00:27:35,520
this is the the overall approach this

00:27:33,520 --> 00:27:37,360
will update the whole configuration

00:27:35,520 --> 00:27:39,120
but as i said you can go down in the

00:27:37,360 --> 00:27:42,799
path and say applications

00:27:39,120 --> 00:27:45,440
my app whatever it is and then

00:27:42,799 --> 00:27:46,960
update a very specific part of the unit

00:27:45,440 --> 00:27:49,760
configuration itself

00:27:46,960 --> 00:27:51,450
and this is this is pretty handy for

00:27:49,760 --> 00:27:52,640
example if you want to update an

00:27:51,450 --> 00:27:55,039
[Music]

00:27:52,640 --> 00:27:55,919
environment secret or an api secret

00:27:55,039 --> 00:27:58,480
inside of

00:27:55,919 --> 00:27:59,279
one application you can just update the

00:27:58,480 --> 00:28:02,559
secret

00:27:59,279 --> 00:28:04,880
by calling the applications app

00:28:02,559 --> 00:28:06,720
environment object and then the name of

00:28:04,880 --> 00:28:09,279
your environment variable

00:28:06,720 --> 00:28:10,080
hit up hit enter and then at the next

00:28:09,279 --> 00:28:13,440
request

00:28:10,080 --> 00:28:16,399
the api secret will be the new secret

00:28:13,440 --> 00:28:17,679
just as an example here what you can do

00:28:16,399 --> 00:28:21,200
with this dynamic

00:28:17,679 --> 00:28:22,799
with this dynamic updates all right so

00:28:21,200 --> 00:28:23,919
this is now the part where you dive into

00:28:22,799 --> 00:28:28,240
the demo section

00:28:23,919 --> 00:28:31,279
um as i said i prefer the docker way

00:28:28,240 --> 00:28:33,200
because it's easy to test and it's uh

00:28:31,279 --> 00:28:36,720
there's one cool feature

00:28:33,200 --> 00:28:38,880
um i want you i want to talk about

00:28:36,720 --> 00:28:40,399
and there is one called docker entry

00:28:38,880 --> 00:28:42,720
point dot d

00:28:40,399 --> 00:28:45,039
this is directory inside of the nginx

00:28:42,720 --> 00:28:46,640
unit base images

00:28:45,039 --> 00:28:48,080
where you can place a couple of things

00:28:46,640 --> 00:28:50,640
into you can

00:28:48,080 --> 00:28:51,919
put a json file in it and this will then

00:28:50,640 --> 00:28:55,039
be applied as the

00:28:51,919 --> 00:28:56,240
default configuration you can upload any

00:28:55,039 --> 00:28:58,880
pen file you want

00:28:56,240 --> 00:29:00,799
an nginx unit will then upload the pen

00:28:58,880 --> 00:29:03,919
files into the certificate sections

00:29:00,799 --> 00:29:05,279
automatically and if you place a shell

00:29:03,919 --> 00:29:08,000
script

00:29:05,279 --> 00:29:09,840
in this directory nginx unit will go

00:29:08,000 --> 00:29:10,480
ahead and run the shell script right

00:29:09,840 --> 00:29:12,720
after

00:29:10,480 --> 00:29:14,559
it configured the instance or uploaded

00:29:12,720 --> 00:29:17,039
the certificates

00:29:14,559 --> 00:29:19,600
um yes this is the part where we'll jump

00:29:17,039 --> 00:29:22,000
into our demo

00:29:19,600 --> 00:29:23,840
um because we use all of those of those

00:29:22,000 --> 00:29:25,360
features right now

00:29:23,840 --> 00:29:27,760
um yeah as i said we have three

00:29:25,360 --> 00:29:28,320
different apis we have a space events

00:29:27,760 --> 00:29:34,080
api

00:29:28,320 --> 00:29:34,080
and images api and the plugins api

00:29:34,720 --> 00:29:41,279
all written in javascript with

00:29:37,919 --> 00:29:44,000
express and node.js and

00:29:41,279 --> 00:29:44,880
let's use the events api as an example

00:29:44,000 --> 00:29:48,399
here

00:29:44,880 --> 00:29:50,640
um yeah so as i said this is our default

00:29:48,399 --> 00:29:54,320
configuration for nginx unit

00:29:50,640 --> 00:29:57,440
first we specify the center port 8080

00:29:54,320 --> 00:29:59,520
and here this is

00:29:57,440 --> 00:30:01,440
the configuration to tell unit what to

00:29:59,520 --> 00:30:03,200
do with an incoming request

00:30:01,440 --> 00:30:05,840
in this case we send the request

00:30:03,200 --> 00:30:09,039
directly to the application without

00:30:05,840 --> 00:30:13,039
intercepting any route policies

00:30:09,039 --> 00:30:15,279
and send it to applications api this one

00:30:13,039 --> 00:30:16,240
and yeah as i said this is this is a

00:30:15,279 --> 00:30:19,840
little bit different for

00:30:16,240 --> 00:30:21,120
for for javascript it's the application

00:30:19,840 --> 00:30:23,360
type external

00:30:21,120 --> 00:30:24,399
we have external for go at the moment

00:30:23,360 --> 00:30:28,159
and for node.js

00:30:24,399 --> 00:30:30,880
as we use the system binaries directly

00:30:28,159 --> 00:30:32,000
for other languages php python ruby for

00:30:30,880 --> 00:30:35,120
example

00:30:32,000 --> 00:30:36,880
we have a unit language module this is

00:30:35,120 --> 00:30:38,559
this is a little bit different so that

00:30:36,880 --> 00:30:42,159
means in that case we're

00:30:38,559 --> 00:30:45,279
handling the the the connection or the

00:30:42,159 --> 00:30:46,240
yeah this sending our sending requests

00:30:45,279 --> 00:30:48,640
to these

00:30:46,240 --> 00:30:50,240
to this language module is in this case

00:30:48,640 --> 00:30:53,360
a little bit different

00:30:50,240 --> 00:30:54,000
so for example in php we use the server

00:30:53,360 --> 00:30:58,640
api

00:30:54,000 --> 00:31:00,320
of php um to execute the the php code

00:30:58,640 --> 00:31:02,080
um yeah simple approach here is the

00:31:00,320 --> 00:31:02,640
working directory where is our api

00:31:02,080 --> 00:31:04,240
located

00:31:02,640 --> 00:31:07,360
and what's the starting point in that

00:31:04,240 --> 00:31:09,840
case it's the server.js file

00:31:07,360 --> 00:31:11,519
um yeah as i said the overall unit

00:31:09,840 --> 00:31:15,120
instant settings

00:31:11,519 --> 00:31:17,279
where you can put a couple of different

00:31:15,120 --> 00:31:18,159
things in here they will be accepted

00:31:17,279 --> 00:31:21,919
instance white

00:31:18,159 --> 00:31:25,200
so for the whole unit instance all right

00:31:21,919 --> 00:31:28,399
um so let's go ahead and talk a little

00:31:25,200 --> 00:31:28,399
bit about the dockerfile

00:31:28,480 --> 00:31:33,360
let me make this maybe a little bit

00:31:30,840 --> 00:31:35,519
bigger

00:31:33,360 --> 00:31:37,360
so as i said we have the base image is

00:31:35,519 --> 00:31:40,080
unit 1.20

00:31:37,360 --> 00:31:42,240
minimal so without any language module

00:31:40,080 --> 00:31:43,519
as for javascript there is no language

00:31:42,240 --> 00:31:45,679
module

00:31:43,519 --> 00:31:48,880
needed at this point i go ahead and use

00:31:45,679 --> 00:31:52,320
that one then i edit

00:31:48,880 --> 00:31:53,760
run user and the most important thing is

00:31:52,320 --> 00:31:56,480
for javascript

00:31:53,760 --> 00:31:58,880
that i'll go ahead and install a couple

00:31:56,480 --> 00:32:00,970
of dependencies here

00:31:58,880 --> 00:32:02,720
like node.js and

00:32:00,970 --> 00:32:06,080
[Music]

00:32:02,720 --> 00:32:09,760
npm at this point as our

00:32:06,080 --> 00:32:13,440
nginx unit http

00:32:09,760 --> 00:32:15,440
package for node.js will be installed in

00:32:13,440 --> 00:32:17,200
this container dynamically during the

00:32:15,440 --> 00:32:19,440
npm install process

00:32:17,200 --> 00:32:21,120
and therefore we need a couple of

00:32:19,440 --> 00:32:22,480
requirements here we need node.js and

00:32:21,120 --> 00:32:25,840
npm of course

00:32:22,480 --> 00:32:29,360
and to build the unit http module

00:32:25,840 --> 00:32:32,640
we need make support

00:32:29,360 --> 00:32:35,360
python and g plus plus

00:32:32,640 --> 00:32:37,840
this is for installing the unit http

00:32:35,360 --> 00:32:37,840
module

00:32:38,559 --> 00:32:42,720
right then we copy over the api code we

00:32:40,799 --> 00:32:46,000
are copying the unit conf

00:32:42,720 --> 00:32:47,600
and the install script and as i said we

00:32:46,000 --> 00:32:49,679
have this interesting

00:32:47,600 --> 00:32:50,960
docker entry point directory where unit

00:32:49,679 --> 00:32:52,799
will automatically look for

00:32:50,960 --> 00:32:53,919
configuration and shell spreads and

00:32:52,799 --> 00:32:56,080
certificates

00:32:53,919 --> 00:32:58,399
and a good question could be here at

00:32:56,080 --> 00:33:00,559
this point why we are not sending the

00:32:58,399 --> 00:33:01,600
unit configuration to the docker entry

00:33:00,559 --> 00:33:05,039
point directory

00:33:01,600 --> 00:33:07,760
if it's it will be applied automatically

00:33:05,039 --> 00:33:08,720
um let's have a look inside the install

00:33:07,760 --> 00:33:13,039
sh script

00:33:08,720 --> 00:33:16,640
and see cy yeah as i said the

00:33:13,039 --> 00:33:17,840
unit way of handling node.js

00:33:16,640 --> 00:33:21,519
applications

00:33:17,840 --> 00:33:24,799
is by changing the http

00:33:21,519 --> 00:33:27,440
module if you want created by node.js

00:33:24,799 --> 00:33:29,200
to something that's created or hosted by

00:33:27,440 --> 00:33:32,080
unit

00:33:29,200 --> 00:33:33,279
so therefore we have to install it and

00:33:32,080 --> 00:33:36,480
link it into our

00:33:33,279 --> 00:33:40,080
current into our current project and

00:33:36,480 --> 00:33:43,679
this needs to be done before we start

00:33:40,080 --> 00:33:45,919
our application so in case we would

00:33:43,679 --> 00:33:47,120
we would send our unit con file to the

00:33:45,919 --> 00:33:49,200
docker entry point

00:33:47,120 --> 00:33:51,679
unit would like to apply the

00:33:49,200 --> 00:33:54,000
configuration before

00:33:51,679 --> 00:33:55,600
it run our shell script therefore the

00:33:54,000 --> 00:33:56,640
node modules and all this stuff would

00:33:55,600 --> 00:33:59,679
not be there

00:33:56,640 --> 00:34:02,000
and the application wouldn't start

00:33:59,679 --> 00:34:03,600
and that's why we have this shell script

00:34:02,000 --> 00:34:07,519
and do all the things

00:34:03,600 --> 00:34:10,079
in one script we're installing npm

00:34:07,519 --> 00:34:11,440
the dependencies we are linking the unit

00:34:10,079 --> 00:34:14,639
http module

00:34:11,440 --> 00:34:17,760
and then at the end we're configuring

00:34:14,639 --> 00:34:21,440
our nginx unit instance by applying

00:34:17,760 --> 00:34:23,520
the configuration so this is our install

00:34:21,440 --> 00:34:26,639
is h script that will be

00:34:23,520 --> 00:34:29,679
run by unit right after

00:34:26,639 --> 00:34:33,359
it started all right

00:34:29,679 --> 00:34:36,000
so um so this is basically just a

00:34:33,359 --> 00:34:38,159
small a small javascript project the

00:34:36,000 --> 00:34:41,280
most interesting part here

00:34:38,159 --> 00:34:43,119
is the server.js file um

00:34:41,280 --> 00:34:44,879
two things i want to mention here they

00:34:43,119 --> 00:34:46,720
are important

00:34:44,879 --> 00:34:48,639
if you want to get started with node.js

00:34:46,720 --> 00:34:50,480
and unit

00:34:48,639 --> 00:34:52,399
first thing is that we need this

00:34:50,480 --> 00:34:54,079
shipping at the very first line of the

00:34:52,399 --> 00:34:55,839
server.js file

00:34:54,079 --> 00:34:57,359
this is not a mistake this is actually

00:34:55,839 --> 00:35:00,720
needed so make sure

00:34:57,359 --> 00:35:03,599
this is in place and

00:35:00,720 --> 00:35:05,599
another thing is that we are changing or

00:35:03,599 --> 00:35:09,359
like overriding

00:35:05,599 --> 00:35:11,200
the node.js http module with our unit

00:35:09,359 --> 00:35:13,839
http module

00:35:11,200 --> 00:35:14,480
so this one is required as well all the

00:35:13,839 --> 00:35:18,960
rest

00:35:14,480 --> 00:35:21,839
by on the server.js file all the routes

00:35:18,960 --> 00:35:23,040
for services controllers this is it's

00:35:21,839 --> 00:35:26,480
all the same this is

00:35:23,040 --> 00:35:28,240
like this can stay as is so there's no

00:35:26,480 --> 00:35:30,800
changes needed in here

00:35:28,240 --> 00:35:33,119
um so what i want to do right now with

00:35:30,800 --> 00:35:36,960
you as part of my demo is

00:35:33,119 --> 00:35:39,280
to change this api content a little bit

00:35:36,960 --> 00:35:40,079
and deploy it to aws and show you the

00:35:39,280 --> 00:35:44,320
scripts

00:35:40,079 --> 00:35:47,040
um how we did that um so first of all

00:35:44,320 --> 00:35:47,760
let's go ahead to the ec2 instance and

00:35:47,040 --> 00:35:49,839
see what's

00:35:47,760 --> 00:35:51,280
up and running so we have three

00:35:49,839 --> 00:35:55,280
different containers

00:35:51,280 --> 00:35:58,400
one is for events images and planets

00:35:55,280 --> 00:36:03,599
um so let's see

00:35:58,400 --> 00:36:12,800
what is actually inside of our

00:36:03,599 --> 00:36:15,920
events api

00:36:12,800 --> 00:36:18,640
all right so as we see there's one

00:36:15,920 --> 00:36:19,599
event named data.txt mars behind the

00:36:18,640 --> 00:36:22,000
moon

00:36:19,599 --> 00:36:23,119
and now we'll go ahead and put a second

00:36:22,000 --> 00:36:25,920
event

00:36:23,119 --> 00:36:28,800
into our api and publish it or send it

00:36:25,920 --> 00:36:28,800
to aws

00:36:29,040 --> 00:36:34,480
it's all about preparation so i have a

00:36:31,520 --> 00:36:34,480
text file here

00:36:34,560 --> 00:36:41,839
go ahead and change that a little bit

00:36:43,599 --> 00:36:48,079
and there's even a better way of doing

00:36:46,560 --> 00:36:50,240
this

00:36:48,079 --> 00:36:55,839
in production but i think it's totally

00:36:50,240 --> 00:36:55,839
good for the demo purpose

00:36:58,880 --> 00:37:08,160
all right then we put some we put

00:37:02,160 --> 00:37:10,720
some text

00:37:08,160 --> 00:37:10,720
in here

00:37:20,839 --> 00:37:23,839
some

00:37:25,119 --> 00:37:32,640
image url okay

00:37:29,440 --> 00:37:32,640
so this looks good now

00:37:34,400 --> 00:37:40,240
all right so now we have updated our api

00:37:36,800 --> 00:37:40,240
code and now we want to publish it

00:37:41,520 --> 00:37:47,200
so what we're going to do here is we

00:37:44,320 --> 00:37:51,440
have some scripts

00:37:47,200 --> 00:37:52,720
there's one there's one build script

00:37:51,440 --> 00:37:54,880
and this is something i really like to

00:37:52,720 --> 00:37:58,079
do at the beginning of a project

00:37:54,880 --> 00:38:00,960
um so what we want to do is we want to

00:37:58,079 --> 00:38:04,720
push our images or build our image and

00:38:00,960 --> 00:38:07,040
push it to our aws container registry

00:38:04,720 --> 00:38:07,839
so we have a build script here that's

00:38:07,040 --> 00:38:10,400
building all

00:38:07,839 --> 00:38:11,119
all our docker images and sending them

00:38:10,400 --> 00:38:14,880
to

00:38:11,119 --> 00:38:14,880
to the easier to the ecr

00:38:16,160 --> 00:38:19,839
okay so this is push all

00:38:25,680 --> 00:38:29,200
so while that runs um go ahead and

00:38:28,079 --> 00:38:30,800
explain it a little bit

00:38:29,200 --> 00:38:33,359
there's not really rocket science or

00:38:30,800 --> 00:38:37,280
magic it's basically a docker build

00:38:33,359 --> 00:38:39,680
based on the docker files in our

00:38:37,280 --> 00:38:41,280
api locations one one for event one for

00:38:39,680 --> 00:38:43,680
image one for planet

00:38:41,280 --> 00:38:44,400
and then we're building the docker file

00:38:43,680 --> 00:38:47,359
tagging them

00:38:44,400 --> 00:38:48,880
accordingly to our docker registry and

00:38:47,359 --> 00:38:51,599
at the end we are pushing

00:38:48,880 --> 00:38:54,000
our newly created images to the amazon

00:38:51,599 --> 00:38:55,680
container registry

00:38:54,000 --> 00:38:57,440
okay that's all done was just a small

00:38:55,680 --> 00:39:00,960
change a lot of things

00:38:57,440 --> 00:39:06,000
were in the cache so now we go ahead

00:39:00,960 --> 00:39:09,280
and here um there's another script

00:39:06,000 --> 00:39:11,760
called deploy um and it's doing

00:39:09,280 --> 00:39:13,200
basically the exact same thing it's

00:39:11,760 --> 00:39:17,280
logging into

00:39:13,200 --> 00:39:19,599
the aws elastic container registry

00:39:17,280 --> 00:39:20,880
we're pulling newly created images and

00:39:19,599 --> 00:39:24,160
we are restarting

00:39:20,880 --> 00:39:27,119
our services that's all the magic so we

00:39:24,160 --> 00:39:29,359
do deploy we're logging in

00:39:27,119 --> 00:39:30,720
see the events api was changed we

00:39:29,359 --> 00:39:33,580
downloaded the layer

00:39:30,720 --> 00:39:36,160
that was changed and then let's see

00:39:33,580 --> 00:39:40,640
[Music]

00:39:36,160 --> 00:39:40,640
let's start it okay there you go

00:39:40,960 --> 00:39:44,000
all right so event number two is now

00:39:43,440 --> 00:39:47,359
published

00:39:44,000 --> 00:39:57,200
biggest full moon over the year um

00:39:47,359 --> 00:40:00,079
with the text

00:39:57,200 --> 00:40:01,359
so as a small wrap up what we have right

00:40:00,079 --> 00:40:04,000
now is

00:40:01,359 --> 00:40:04,800
we have on our developer machine three

00:40:04,000 --> 00:40:08,319
different

00:40:04,800 --> 00:40:10,640
apis we have changed one api but all the

00:40:08,319 --> 00:40:14,400
others working the same way

00:40:10,640 --> 00:40:17,359
we have scripts in place that can push

00:40:14,400 --> 00:40:18,319
our changes to amazon ls container

00:40:17,359 --> 00:40:19,920
registry

00:40:18,319 --> 00:40:22,079
and then we have another script running

00:40:19,920 --> 00:40:25,839
on ec2 pulling

00:40:22,079 --> 00:40:29,440
the containers with unit running unit

00:40:25,839 --> 00:40:29,440
and exposing ports

00:40:29,760 --> 00:40:33,920
on the ec2 instance and this is

00:40:31,280 --> 00:40:36,839
something i'll go ahead and show you

00:40:33,920 --> 00:40:38,240
because this is important for liam's

00:40:36,839 --> 00:40:43,440
session

00:40:38,240 --> 00:40:46,319
so we have port 8085 and 80 90 and 8080

00:40:43,440 --> 00:40:47,599
on our ec2 instance one port for each

00:40:46,319 --> 00:40:52,560
service

00:40:47,599 --> 00:40:56,160
and yeah next step at this point will be

00:40:52,560 --> 00:40:59,040
to configure our api gateway to make

00:40:56,160 --> 00:40:59,920
our apis exposable securely exposable to

00:40:59,040 --> 00:41:03,280
the

00:40:59,920 --> 00:41:05,520
to the outside world

00:41:03,280 --> 00:41:06,319
and at this point i'm pretty sure we had

00:41:05,520 --> 00:41:10,560
to

00:41:06,319 --> 00:41:13,200
we're at the q a part um

00:41:10,560 --> 00:41:16,240
and after that we will do the 15 minutes

00:41:13,200 --> 00:41:16,240
50 minutes break

00:41:18,560 --> 00:41:21,839
all right

00:41:25,280 --> 00:41:28,160
so let's see

00:41:31,040 --> 00:41:35,839
yes yes yes

00:41:37,599 --> 00:41:40,640
all right so i think i answered all the

00:41:39,680 --> 00:41:43,680
questions

00:41:40,640 --> 00:41:45,599
as we went along um but now is a great

00:41:43,680 --> 00:41:47,359
time to get into

00:41:45,599 --> 00:41:49,040
anything maybe in a bit more depth if

00:41:47,359 --> 00:41:52,079
anyone has any

00:41:49,040 --> 00:41:54,480
questions about what this is all about

00:41:52,079 --> 00:41:55,440
um you know why doing it this way is

00:41:54,480 --> 00:41:57,200
better than

00:41:55,440 --> 00:41:59,680
maybe the way you're doing it so yeah

00:41:57,200 --> 00:41:59,680
feel free

00:42:00,720 --> 00:42:04,000
all right so um

00:42:04,800 --> 00:42:08,160
first of all libby asked so if you want

00:42:07,040 --> 00:42:12,160
to add

00:42:08,160 --> 00:42:14,079
the this code to the github repository

00:42:12,160 --> 00:42:17,280
for unit examples on

00:42:14,079 --> 00:42:21,200
or changing this space example

00:42:17,280 --> 00:42:23,200
um yeah i'll go ahead and reconfigure

00:42:21,200 --> 00:42:25,200
or restructure this a little bit and

00:42:23,200 --> 00:42:25,680
i'll definitely go ahead and upload the

00:42:25,200 --> 00:42:28,079
whole

00:42:25,680 --> 00:42:28,800
structure i've showed you here um to

00:42:28,079 --> 00:42:32,640
github

00:42:28,800 --> 00:42:35,680
and there is a unit example

00:42:32,640 --> 00:42:38,400
repository inside of the nginx

00:42:35,680 --> 00:42:38,960
project and i'll go ahead and share the

00:42:38,400 --> 00:42:43,440
link

00:42:38,960 --> 00:42:45,920
right after this or during the break

00:42:43,440 --> 00:42:48,560
no worries um there's another question

00:42:45,920 --> 00:42:48,560
from ryan

00:42:50,319 --> 00:42:53,760
um is the unit piece used in conjunction

00:42:53,440 --> 00:42:56,480
with

00:42:53,760 --> 00:42:58,000
nginx it's almost like a runtime insight

00:42:56,480 --> 00:43:00,640
of nginx

00:42:58,000 --> 00:43:01,440
so the nginx unit is a completely

00:43:00,640 --> 00:43:05,680
separate

00:43:01,440 --> 00:43:08,880
product and project um

00:43:05,680 --> 00:43:12,079
at this point so you can use

00:43:08,880 --> 00:43:13,760
nginx unit and nginx open source or web

00:43:12,079 --> 00:43:17,680
server reverse proxy

00:43:13,760 --> 00:43:20,079
um in the combination but

00:43:17,680 --> 00:43:21,119
there is no really yet so you can launch

00:43:20,079 --> 00:43:25,119
an api

00:43:21,119 --> 00:43:27,760
for example just with nginx unit as well

00:43:25,119 --> 00:43:29,440
using the capabilities we just saw there

00:43:27,760 --> 00:43:32,960
is no need of having

00:43:29,440 --> 00:43:34,960
an nginx in front of it at this point

00:43:32,960 --> 00:43:36,400
in some it makes sword it might make

00:43:34,960 --> 00:43:38,480
sense in some sort and this is

00:43:36,400 --> 00:43:40,480
something we will see right after the

00:43:38,480 --> 00:43:43,839
break

00:43:40,480 --> 00:43:46,000
but technically there is you can serve

00:43:43,839 --> 00:43:48,160
the api static files and everything just

00:43:46,000 --> 00:43:52,079
with nginx unit there is no need of

00:43:48,160 --> 00:43:52,079
having an nginx in front of it

00:43:52,839 --> 00:43:57,040
technically

00:43:54,720 --> 00:43:58,560
yeah i'll double click on that one so

00:43:57,040 --> 00:44:00,160
just as timo said there's

00:43:58,560 --> 00:44:02,160
there's it's a separate project there's

00:44:00,160 --> 00:44:05,119
no shared code

00:44:02,160 --> 00:44:07,359
between unit and regular nginx web

00:44:05,119 --> 00:44:09,440
server

00:44:07,359 --> 00:44:11,440
nginx unit can serve static files it can

00:44:09,440 --> 00:44:12,400
do tls it can do processing load

00:44:11,440 --> 00:44:15,359
balancing

00:44:12,400 --> 00:44:17,280
and it can run your application code

00:44:15,359 --> 00:44:20,560
runtimes

00:44:17,280 --> 00:44:23,119
however all of those the features i just

00:44:20,560 --> 00:44:24,240
listed like load balancing and ssl

00:44:23,119 --> 00:44:28,000
they're at an

00:44:24,240 --> 00:44:29,520
earlier stage of their maturity so

00:44:28,000 --> 00:44:31,119
uh it's great to have those things in

00:44:29,520 --> 00:44:32,800
unit and they will become richer and

00:44:31,119 --> 00:44:34,800
richer over time

00:44:32,800 --> 00:44:36,240
but typically we would say use nginx

00:44:34,800 --> 00:44:38,079
unit for

00:44:36,240 --> 00:44:39,599
uh for your dev environment for your

00:44:38,079 --> 00:44:40,480
testing environment and when it comes to

00:44:39,599 --> 00:44:42,800
production

00:44:40,480 --> 00:44:44,480
it makes makes a lot of sense to deploy

00:44:42,800 --> 00:44:46,560
an nginx web server

00:44:44,480 --> 00:44:47,920
a reverse proxy in front of that to get

00:44:46,560 --> 00:44:52,640
that that richness

00:44:47,920 --> 00:44:52,640
of tls and by balancing et cetera

00:44:54,240 --> 00:44:57,440
and we're at oh you might even be at

00:44:56,400 --> 00:44:59,680
time so

00:44:57,440 --> 00:45:00,640
i think that worked out pretty well tina

00:44:59,680 --> 00:45:05,280
hi this is liam

00:45:00,640 --> 00:45:06,720
nginx and we have arrived at part two so

00:45:05,280 --> 00:45:09,440
we're beyond the break

00:45:06,720 --> 00:45:11,280
and we're now going to be deploying

00:45:09,440 --> 00:45:14,000
nginx

00:45:11,280 --> 00:45:14,880
web server as a reverse proxy but more

00:45:14,000 --> 00:45:18,960
specifically

00:45:14,880 --> 00:45:22,000
as an api gateway so let's

00:45:18,960 --> 00:45:24,079
jump straight into it now

00:45:22,000 --> 00:45:25,440
in the first half of this workshop uh

00:45:24,079 --> 00:45:26,880
and if you didn't uh if you weren't

00:45:25,440 --> 00:45:28,960
there for timo's talk it doesn't matter

00:45:26,880 --> 00:45:30,000
this is self-contained but what we have

00:45:28,960 --> 00:45:32,400
what we did

00:45:30,000 --> 00:45:33,119
uh what team teemo did was he deployed

00:45:32,400 --> 00:45:35,839
uh

00:45:33,119 --> 00:45:36,400
a number of apis uh in docker containers

00:45:35,839 --> 00:45:39,119
using

00:45:36,400 --> 00:45:40,240
in your next unit as the runtime and now

00:45:39,119 --> 00:45:42,000
what we're going to do

00:45:40,240 --> 00:45:43,440
is we're going to publish those apis

00:45:42,000 --> 00:45:45,599
make them available to the

00:45:43,440 --> 00:45:47,760
big wide world and to do that we're

00:45:45,599 --> 00:45:50,720
going to use nginx as an apk

00:45:47,760 --> 00:45:51,680
so in the uh in the red box here is

00:45:50,720 --> 00:45:55,440
where we are

00:45:51,680 --> 00:45:57,119
at now enginex is most

00:45:55,440 --> 00:45:59,040
commonly known as a web server as i

00:45:57,119 --> 00:46:00,240
mentioned or reverse proxy and sometimes

00:45:59,040 --> 00:46:03,119
also load balancer

00:46:00,240 --> 00:46:05,520
and sometimes also a content cache and

00:46:03,119 --> 00:46:08,560
many other things for

00:46:05,520 --> 00:46:11,599
driving http traffic or even

00:46:08,560 --> 00:46:12,960
layer 4 tcp and udp traffic but

00:46:11,599 --> 00:46:15,119
what's that got to do with an api

00:46:12,960 --> 00:46:16,880
gateway so

00:46:15,119 --> 00:46:18,960
let's uh let's answer that so most

00:46:16,880 --> 00:46:21,040
engine most websites

00:46:18,960 --> 00:46:22,480
use nginx we overtook apache as the most

00:46:21,040 --> 00:46:26,400
popular web server on the internet

00:46:22,480 --> 00:46:29,760
uh sometime in the last 12 months and

00:46:26,400 --> 00:46:32,079
what we find when we survey the uh

00:46:29,760 --> 00:46:33,680
our community our open source user base

00:46:32,079 --> 00:46:36,880
what is it that you use

00:46:33,680 --> 00:46:37,520
nginx for it's all the things i just

00:46:36,880 --> 00:46:40,000
mentioned

00:46:37,520 --> 00:46:41,760
but api gateway is one of the most

00:46:40,000 --> 00:46:44,640
popular use cases

00:46:41,760 --> 00:46:45,440
we come across and often it's an api

00:46:44,640 --> 00:46:47,760
gateway

00:46:45,440 --> 00:46:50,800
as well as being like balance or as well

00:46:47,760 --> 00:46:52,640
as being a web server or reverse proxy

00:46:50,800 --> 00:46:55,040
and that's part of what i'm going to

00:46:52,640 --> 00:46:57,680
focus here in on this workshop is

00:46:55,040 --> 00:46:59,119
how you can manage nginx as an api

00:46:57,680 --> 00:47:00,480
gateway show you some best practice

00:46:59,119 --> 00:47:02,079
configuration

00:47:00,480 --> 00:47:05,119
and i'm going to do a lot of this stuff

00:47:02,079 --> 00:47:06,800
live i'm going to do it from scratch

00:47:05,119 --> 00:47:08,160
and to do it from scratch i'm going to

00:47:06,800 --> 00:47:10,960
need to install

00:47:08,160 --> 00:47:11,440
nginx now the way that i'm going to do

00:47:10,960 --> 00:47:14,560
this

00:47:11,440 --> 00:47:16,240
is i'm going to install uh ngx using the

00:47:14,560 --> 00:47:19,680
official

00:47:16,240 --> 00:47:21,359
repository that is hosted at nginx.org

00:47:19,680 --> 00:47:24,319
and this link here will explain how to

00:47:21,359 --> 00:47:27,280
do that that's not usually necessary uh

00:47:24,319 --> 00:47:27,920
it's great to get the uh the curated

00:47:27,280 --> 00:47:31,599
builds

00:47:27,920 --> 00:47:33,680
by the nginx team but you can also get

00:47:31,599 --> 00:47:35,119
from all of your favorite uh yeah either

00:47:33,680 --> 00:47:38,079
from docker the official

00:47:35,119 --> 00:47:39,040
nginx image or from your your operating

00:47:38,079 --> 00:47:41,520
system

00:47:39,040 --> 00:47:43,040
uh package manager will have engine x

00:47:41,520 --> 00:47:44,559
just there so you can do yum install

00:47:43,040 --> 00:47:46,720
action store

00:47:44,559 --> 00:47:48,240
uh usually when you do that however

00:47:46,720 --> 00:47:51,359
you're gonna pull down

00:47:48,240 --> 00:47:52,880
the uh the stable branch and

00:47:51,359 --> 00:47:55,200
we like putting new features into the

00:47:52,880 --> 00:47:58,000
mainline branch so there are two

00:47:55,200 --> 00:47:59,440
and it's often for those uh when i my

00:47:58,000 --> 00:48:00,160
canvas this at the start of the other

00:47:59,440 --> 00:48:03,200
session

00:48:00,160 --> 00:48:05,359
uh enginex is is widely used

00:48:03,200 --> 00:48:08,079
and one of the things i come across when

00:48:05,359 --> 00:48:09,599
i'm speaking to folks is that

00:48:08,079 --> 00:48:11,520
they don't know whether to use the main

00:48:09,599 --> 00:48:12,559
line or the stable version and as the

00:48:11,520 --> 00:48:14,800
operating system

00:48:12,559 --> 00:48:16,960
vendors tend to provide only the stable

00:48:14,800 --> 00:48:20,319
version i thought i'd just

00:48:16,960 --> 00:48:23,760
explain that before we go any further

00:48:20,319 --> 00:48:26,800
so mainline is this outer

00:48:23,760 --> 00:48:30,079
red sorry red it's green

00:48:26,800 --> 00:48:31,760
outer green uh circle and what happens

00:48:30,079 --> 00:48:34,400
is that if we run

00:48:31,760 --> 00:48:34,880
our versioning on an odd and an even

00:48:34,400 --> 00:48:38,000
number

00:48:34,880 --> 00:48:38,720
so one dot odd dot something is our main

00:48:38,000 --> 00:48:41,040
line branch

00:48:38,720 --> 00:48:44,920
and one.even that something is our

00:48:41,040 --> 00:48:48,240
stable so 1.18.0 is the current stable

00:48:44,920 --> 00:48:51,200
1.19.3 is the current main line

00:48:48,240 --> 00:48:53,359
now mainline gets updated uh every four

00:48:51,200 --> 00:48:56,400
to six weeks eight to 12 times a year

00:48:53,359 --> 00:49:00,000
as when new features become available

00:48:56,400 --> 00:49:02,319
but stable is uh is stable

00:49:00,000 --> 00:49:03,280
and the reason i that sounds dumb is

00:49:02,319 --> 00:49:05,280
because

00:49:03,280 --> 00:49:08,400
it's stable in terms of its features

00:49:05,280 --> 00:49:09,440
it's not a description of the quality of

00:49:08,400 --> 00:49:11,440
the software

00:49:09,440 --> 00:49:13,920
so when we put a feature into mainline

00:49:11,440 --> 00:49:16,880
it's ready for prime times ready for ga

00:49:13,920 --> 00:49:17,839
and indeed the commercial offerings of

00:49:16,880 --> 00:49:20,960
nginx

00:49:17,839 --> 00:49:22,160
use the mainline branch for that now

00:49:20,960 --> 00:49:24,720
every year

00:49:22,160 --> 00:49:25,920
around about april time we retired a

00:49:24,720 --> 00:49:28,559
stable branch

00:49:25,920 --> 00:49:30,000
and we'll stop updating it and then we

00:49:28,559 --> 00:49:33,920
fork mainline

00:49:30,000 --> 00:49:36,880
and so sometime during april or may

00:49:33,920 --> 00:49:38,480
the current stable version of nginx is

00:49:36,880 --> 00:49:40,960
actually the newest version of nginx

00:49:38,480 --> 00:49:44,319
available so just as a

00:49:40,960 --> 00:49:46,000
a reminder that it's not about

00:49:44,319 --> 00:49:47,040
the quality of the software it's just

00:49:46,000 --> 00:49:49,280
about whether you're going to see

00:49:47,040 --> 00:49:52,240
features in that branch

00:49:49,280 --> 00:49:53,599
so we fork mainline stable gets a bump

00:49:52,240 --> 00:49:57,119
so it'll become the next

00:49:53,599 --> 00:50:01,760
even number so april 2021 will have

00:49:57,119 --> 00:50:04,240
uh 1.20.0 at the same time

00:50:01,760 --> 00:50:05,760
we bump the version of mainline and we

00:50:04,240 --> 00:50:07,200
keep adding features and we keep

00:50:05,760 --> 00:50:10,240
releasing

00:50:07,200 --> 00:50:11,040
and the only time that will update the

00:50:10,240 --> 00:50:14,520
stable

00:50:11,040 --> 00:50:15,760
branch so currently 118 0 we would do a

00:50:14,520 --> 00:50:17,920
118.1

00:50:15,760 --> 00:50:19,520
if there was a critical bug fix or a

00:50:17,920 --> 00:50:20,559
security vulnerability that kind of

00:50:19,520 --> 00:50:23,200
thing

00:50:20,559 --> 00:50:23,839
will never change the functionality of

00:50:23,200 --> 00:50:26,240
stable

00:50:23,839 --> 00:50:26,880
throughout the year but every year it

00:50:26,240 --> 00:50:28,000
inherits

00:50:26,880 --> 00:50:30,480
all of the new features from the

00:50:28,000 --> 00:50:33,280
previous year

00:50:30,480 --> 00:50:34,240
so choose whichever one makes the most

00:50:33,280 --> 00:50:37,359
sense for you

00:50:34,240 --> 00:50:38,559
i am going to go ahead and

00:50:37,359 --> 00:50:41,280
jump i'm going to be jumping between the

00:50:38,559 --> 00:50:45,440
slides and my terminal

00:50:41,280 --> 00:50:47,280
so i'm logged in to the api gateway

00:50:45,440 --> 00:50:49,119
virtual machine on aws which is the

00:50:47,280 --> 00:50:52,960
environment that team has

00:50:49,119 --> 00:50:57,040
got prepared and at the moment

00:50:52,960 --> 00:51:00,480
nginx is not installed so

00:50:57,040 --> 00:51:04,160
i'm going to um just do this as

00:51:00,480 --> 00:51:08,880
root and i'm going to install

00:51:04,160 --> 00:51:12,480
nginx now i have configured this machine

00:51:08,880 --> 00:51:14,640
uh with the nginx official repo

00:51:12,480 --> 00:51:16,319
and it's in this file and this is an

00:51:14,640 --> 00:51:19,359
ubuntu machine so it's

00:51:16,319 --> 00:51:20,640
uh in sources.list and here we just

00:51:19,359 --> 00:51:23,920
specify

00:51:20,640 --> 00:51:27,119
that for nginx i'm going to pull it from

00:51:23,920 --> 00:51:30,160
the nginx.org package repository

00:51:27,119 --> 00:51:31,520
so that when i do an nginx install so an

00:51:30,160 --> 00:51:34,000
app to install nginx

00:51:31,520 --> 00:51:34,880
it's going to pull that from the

00:51:34,000 --> 00:51:37,440
official

00:51:34,880 --> 00:51:38,720
repository i could pull source code and

00:51:37,440 --> 00:51:41,440
compile it

00:51:38,720 --> 00:51:42,640
but when you pull the packages you know

00:51:41,440 --> 00:51:43,280
that you're getting something that was

00:51:42,640 --> 00:51:44,800
built

00:51:43,280 --> 00:51:47,200
by the same enginex team that wrote the

00:51:44,800 --> 00:51:50,559
code and it's super easy

00:51:47,200 --> 00:51:53,599
so that's now installed and if i do a

00:51:50,559 --> 00:51:56,960
new x-b we do indeed have the very

00:51:53,599 --> 00:52:00,079
latest version 1.19.3

00:51:56,960 --> 00:52:02,319
and if i change to

00:52:00,079 --> 00:52:04,480
etc nginx you will notice throughout

00:52:02,319 --> 00:52:07,760
this workshop that my typing will be the

00:52:04,480 --> 00:52:07,760
least reliable thing of all

00:52:10,640 --> 00:52:14,720
and we don't have a great deal so this

00:52:12,960 --> 00:52:18,240
is interesting

00:52:14,720 --> 00:52:20,240
where are all my files lynn

00:52:18,240 --> 00:52:22,000
i don't seem to have an ninja next conf

00:52:20,240 --> 00:52:23,760
so what i'm going to do is probably try

00:52:22,000 --> 00:52:26,079
and do this again

00:52:23,760 --> 00:52:26,079
and

00:52:27,359 --> 00:52:30,480
this is what you get when you do a reset

00:52:29,359 --> 00:52:33,839
before a demo

00:52:30,480 --> 00:52:33,839
alright so let's

00:52:34,000 --> 00:52:37,040
ah i took it back up i was clever all

00:52:36,559 --> 00:52:47,119
right

00:52:37,040 --> 00:52:48,880
not that clever um

00:52:47,119 --> 00:52:50,160
oh yeah okay uh i'm gonna put these

00:52:48,880 --> 00:52:51,359
files back in place and then i think

00:52:50,160 --> 00:52:56,480
everything will be fine

00:52:51,359 --> 00:52:59,200
um so let's drop them in here

00:52:56,480 --> 00:53:00,000
before i do that so bear with me for 90

00:52:59,200 --> 00:53:02,960
seconds while i

00:53:00,000 --> 00:53:02,960
fix my mess up

00:53:03,200 --> 00:53:10,079
d is empty all right um so let's

00:53:06,640 --> 00:53:10,640
do that and then let's copy the backup i

00:53:10,079 --> 00:53:14,800
made

00:53:10,640 --> 00:53:17,200
from nginx

00:53:14,800 --> 00:53:17,200
to here

00:53:18,319 --> 00:53:22,319
i've got my files back and if i go in

00:53:20,800 --> 00:53:24,800
curve.d

00:53:22,319 --> 00:53:24,800
all right

00:53:25,359 --> 00:53:29,839
don't need those

00:53:36,400 --> 00:53:43,839
one more thing

00:53:46,319 --> 00:53:50,319
okay thank you for bearing with me nginx

00:53:48,800 --> 00:53:53,839
is now installed

00:53:50,319 --> 00:53:55,200
and if i do an nginx t there's my config

00:53:53,839 --> 00:53:58,880
all right

00:53:55,200 --> 00:54:01,040
so apologies for the hiccup

00:53:58,880 --> 00:54:02,640
uh it seemed that when i uninstalled

00:54:01,040 --> 00:54:05,359
nginx it uh

00:54:02,640 --> 00:54:06,880
it was quite brutal so i have my

00:54:05,359 --> 00:54:08,160
internet configuration file you may have

00:54:06,880 --> 00:54:09,599
seen something like this before this is

00:54:08,160 --> 00:54:13,359
the default that comes

00:54:09,599 --> 00:54:15,440
with the install and the most important

00:54:13,359 --> 00:54:16,079
thing in here is that we have an include

00:54:15,440 --> 00:54:17,760
file

00:54:16,079 --> 00:54:20,079
and the include directive means that we

00:54:17,760 --> 00:54:23,760
can organize

00:54:20,079 --> 00:54:25,359
our configuration into different areas

00:54:23,760 --> 00:54:26,079
and we can manage that in different

00:54:25,359 --> 00:54:28,319
files

00:54:26,079 --> 00:54:29,680
which is great for making small changes

00:54:28,319 --> 00:54:30,400
without worrying about breaking big

00:54:29,680 --> 00:54:31,599
things

00:54:30,400 --> 00:54:34,240
it's also great for when you have

00:54:31,599 --> 00:54:36,400
multiple teams and in this case

00:54:34,240 --> 00:54:38,880
we might think about having multiple app

00:54:36,400 --> 00:54:40,640
teams that are building different apis

00:54:38,880 --> 00:54:42,400
so i'm going to consider timo as the app

00:54:40,640 --> 00:54:44,400
developer he's built

00:54:42,400 --> 00:54:45,839
this api that's themed around space it's

00:54:44,400 --> 00:54:47,839
got space data

00:54:45,839 --> 00:54:49,599
we have we'll come and look at those in

00:54:47,839 --> 00:54:51,119
a little bit more detail in a sec

00:54:49,599 --> 00:54:52,720
but i might have some other apis from

00:54:51,119 --> 00:54:58,160
other teams and i want to publish

00:54:52,720 --> 00:54:58,160
all of those so i've got a vanilla

00:54:58,640 --> 00:55:02,400
nginx install and in my conf.d directory

00:55:01,440 --> 00:55:06,000
i have absolutely

00:55:02,400 --> 00:55:09,119
no files so if i were

00:55:06,000 --> 00:55:11,920
to start nginx um it wouldn't be

00:55:09,119 --> 00:55:11,920
listening or anything

00:55:14,079 --> 00:55:17,920
so let's get started and let's get the

00:55:15,839 --> 00:55:20,400
api gateway defined

00:55:17,920 --> 00:55:21,839
so i'm going to use a specific file in

00:55:20,400 --> 00:55:23,599
that conflict d directory

00:55:21,839 --> 00:55:25,760
uh called api gateway it's going to be

00:55:23,599 --> 00:55:29,200
my listener i'm going to expose

00:55:25,760 --> 00:55:33,119
initially my apis on port 8080 and we'll

00:55:29,200 --> 00:55:35,280
move on to a tls config a little later

00:55:33,119 --> 00:55:37,520
and then i'm going to create a directory

00:55:35,280 --> 00:55:39,119
to store all my apis in so my

00:55:37,520 --> 00:55:41,040
uh the space api will be the one we'll

00:55:39,119 --> 00:55:42,480
publish today

00:55:41,040 --> 00:55:45,680
and then we'll just do a quick test of

00:55:42,480 --> 00:55:48,799
that so here is the config that we want

00:55:45,680 --> 00:55:50,720
to write i'm going to

00:55:48,799 --> 00:55:52,559
squeeze my terminal over so i can i'm

00:55:50,720 --> 00:55:54,799
just going to do this

00:55:52,559 --> 00:55:56,640
directly so the first thing i'm going to

00:55:54,799 --> 00:56:02,240
do is

00:55:56,640 --> 00:56:03,760
create my great api gateway.com

00:56:02,240 --> 00:56:05,680
so i might have a bunch of other web

00:56:03,760 --> 00:56:08,079
servers listening um

00:56:05,680 --> 00:56:09,599
and so this allows me to isolate my api

00:56:08,079 --> 00:56:12,720
gateway configuration

00:56:09,599 --> 00:56:16,319
uh from everything else i'm gonna listen

00:56:12,720 --> 00:56:21,200
on port 8080

00:56:16,319 --> 00:56:21,200
this config go here

00:56:21,440 --> 00:56:26,400
and then i'm going to use the include

00:56:23,119 --> 00:56:28,640
directive for my own needs

00:56:26,400 --> 00:56:31,040
i'm going to pull in anything from my

00:56:28,640 --> 00:56:34,160
apis directory

00:56:31,040 --> 00:56:36,240
that is uh star.com and so i can have as

00:56:34,160 --> 00:56:39,119
many files in there each of which

00:56:36,240 --> 00:56:39,119
could be its own

00:56:41,119 --> 00:56:44,799
uh each which could be it's it's uh its

00:56:43,440 --> 00:56:48,160
own api

00:56:44,799 --> 00:56:50,480
um and the other thing i'm going to do

00:56:48,160 --> 00:56:52,319
uh which partially is for me just to

00:56:50,480 --> 00:56:54,319
test that everything is working

00:56:52,319 --> 00:56:55,440
um is that i'm going to create a catch

00:56:54,319 --> 00:56:58,640
all location

00:56:55,440 --> 00:56:59,359
so location slash for the the root of

00:56:58,640 --> 00:57:03,280
the

00:56:59,359 --> 00:57:05,520
uh of the server is going to be

00:57:03,280 --> 00:57:06,480
the location that njx will match a

00:57:05,520 --> 00:57:07,520
request on

00:57:06,480 --> 00:57:09,599
if it doesn't have anything more

00:57:07,520 --> 00:57:11,520
specific to match up

00:57:09,599 --> 00:57:14,799
and what i'm going to do is say if i end

00:57:11,520 --> 00:57:17,760
up here send me a 400 i could say 404

00:57:14,799 --> 00:57:18,559
but a 400 is better for our demo

00:57:17,760 --> 00:57:20,160
purposes

00:57:18,559 --> 00:57:22,319
because it means we didn't match any

00:57:20,160 --> 00:57:23,200
apis that are published so actually your

00:57:22,319 --> 00:57:25,520
bad client

00:57:23,200 --> 00:57:26,480
go away rather than give away the fact

00:57:25,520 --> 00:57:29,280
that you didn't make a

00:57:26,480 --> 00:57:30,240
you didn't find a valid resource also if

00:57:29,280 --> 00:57:33,200
you see 400

00:57:30,240 --> 00:57:34,799
i know that this is now working so

00:57:33,200 --> 00:57:37,839
that's all the config we need

00:57:34,799 --> 00:57:40,240
for now let's save that let's test our

00:57:37,839 --> 00:57:42,960
ngs configuration with a dash t

00:57:40,240 --> 00:57:46,000
it's okay and actually we didn't start

00:57:42,960 --> 00:57:49,119
it yet so let's start nginx up

00:57:46,000 --> 00:57:52,319
here the 80 already in use

00:57:49,119 --> 00:57:53,839
maybe it was running and now let's start

00:57:52,319 --> 00:57:58,079
it again all right

00:57:53,839 --> 00:58:02,480
now it's started and now

00:57:58,079 --> 00:58:05,920
if i go to port 8080

00:58:02,480 --> 00:58:07,760
i will get the 400 response that i

00:58:05,920 --> 00:58:09,520
said should happen if i didn't match

00:58:07,760 --> 00:58:10,880
anything and of course i could fit any

00:58:09,520 --> 00:58:12,559
old garbage in here

00:58:10,880 --> 00:58:14,960
and i still want to get over 100 because

00:58:12,559 --> 00:58:18,160
we're not actually listening on anything

00:58:14,960 --> 00:58:21,280
but we have our listener in place

00:58:18,160 --> 00:58:22,000
however you'll notice that um the

00:58:21,280 --> 00:58:26,160
response i got

00:58:22,000 --> 00:58:29,520
back um isn't very api gateway like

00:58:26,160 --> 00:58:31,920
that's what we got now

00:58:29,520 --> 00:58:34,160
it's api gateway but it's returning html

00:58:31,920 --> 00:58:36,400
errors which is not super so let's make

00:58:34,160 --> 00:58:38,160
it look like a bit more like api gateway

00:58:36,400 --> 00:58:39,920
give our api clients a fighting chance

00:58:38,160 --> 00:58:41,280
of dealing with errors

00:58:39,920 --> 00:58:43,680
and we'll define some json error

00:58:41,280 --> 00:58:47,040
responses

00:58:43,680 --> 00:58:47,040
so this is how i'm going to do that

00:58:47,200 --> 00:58:50,880
and one i'm going to use the error page

00:58:49,280 --> 00:58:53,359
directive

00:58:50,880 --> 00:58:54,319
and what it does if there's an error the

00:58:53,359 --> 00:58:56,319
error page directive

00:58:54,319 --> 00:58:57,440
says oh if i caught this error then do

00:58:56,319 --> 00:59:02,559
this with it

00:58:57,440 --> 00:59:04,880
and on line 16 it's going to

00:59:02,559 --> 00:59:05,599
convert that error and it's going to

00:59:04,880 --> 00:59:07,599
handle it

00:59:05,599 --> 00:59:09,440
with a named location and the name

00:59:07,599 --> 00:59:11,839
location starts with an

00:59:09,440 --> 00:59:12,640
at sign and the nice thing about at

00:59:11,839 --> 00:59:14,559
signs is that you

00:59:12,640 --> 00:59:16,480
they're not valid in your eyes so you

00:59:14,559 --> 00:59:17,520
know that no external clients can

00:59:16,480 --> 00:59:21,119
actually try and

00:59:17,520 --> 00:59:22,960
access at the at 400 uri so it's used

00:59:21,119 --> 00:59:24,559
it's internal only

00:59:22,960 --> 00:59:26,160
so i'm going to send processing to the

00:59:24,559 --> 00:59:29,200
at 400 location

00:59:26,160 --> 00:59:30,559
and in there i'm going to send back the

00:59:29,200 --> 00:59:34,799
actual response

00:59:30,559 --> 00:59:38,880
so let's go and edit that api gateway

00:59:34,799 --> 00:59:38,880
file again and

00:59:39,200 --> 00:59:42,079
lost my mouse

00:59:43,599 --> 00:59:47,839
okay keyboard it is

00:59:50,400 --> 00:59:56,240
uh so error handling let's do this

00:59:55,280 --> 00:59:58,319
first of all we're going to have a

00:59:56,240 --> 01:00:00,799
default type so we'll send back

00:59:58,319 --> 01:00:03,280
uh if we don't know what type it is

01:00:00,799 --> 01:00:06,400
we'll send by calculation json

01:00:03,280 --> 01:00:08,400
and then we're going to say if we get a

01:00:06,400 --> 01:00:11,280
01:00:08,400 --> 01:00:12,640
then let's return it as a 400 and we'll

01:00:11,280 --> 01:00:15,760
use the 400

01:00:12,640 --> 01:00:19,760
at 400 location to handling

01:00:15,760 --> 01:00:19,760
so here is the location itself

01:00:21,520 --> 01:00:29,839
we're going to return the 400 code

01:00:24,640 --> 01:00:29,839
but now we're going to send back

01:00:30,240 --> 01:00:37,200
some json saying status is 400

01:00:33,839 --> 01:00:37,200
and the message is

01:00:39,839 --> 01:00:45,200
bad request close that close that

01:00:43,760 --> 01:00:49,200
let's put a new line in at the end to

01:00:45,200 --> 01:00:49,200
make it a little bit nicer there we go

01:00:49,359 --> 01:00:51,599
now

01:00:55,280 --> 01:01:02,799
reload and now when we hit uh

01:00:59,599 --> 01:01:06,000
let's hit the root for 8080

01:01:02,799 --> 01:01:11,440
we get a json response so we're looking

01:01:06,000 --> 01:01:13,359
a bit more like an api gateway

01:01:11,440 --> 01:01:15,440
now that's great for a 400 but what

01:01:13,359 --> 01:01:17,920
about the rest

01:01:15,440 --> 01:01:18,559
of all the errors that are available so

01:01:17,920 --> 01:01:22,240
uh

01:01:18,559 --> 01:01:23,920
for that i do have a file and there's a

01:01:22,240 --> 01:01:26,559
i do have it on my github so we'll share

01:01:23,920 --> 01:01:28,799
these with everybody later

01:01:26,559 --> 01:01:28,799
and

01:01:31,839 --> 01:01:35,760
tell you what we'll do is we will

01:01:36,079 --> 01:01:39,200
take a look shall we right so here we

01:01:38,000 --> 01:01:40,880
are there's 400

01:01:39,200 --> 01:01:42,400
that's the first one we did and now i've

01:01:40,880 --> 01:01:45,680
got all the error codes that we might

01:01:42,400 --> 01:01:45,680
reasonably expect to receive

01:01:45,760 --> 01:01:49,520
uh from a a back end or indeed from a

01:01:48,880 --> 01:01:51,200
client

01:01:49,520 --> 01:01:52,960
so let's just grab the raw version of

01:01:51,200 --> 01:01:56,160
that copy it

01:01:52,960 --> 01:01:56,160
and i'll go back to my

01:01:58,480 --> 01:02:03,119
so i didn't i'm going to create this

01:02:01,359 --> 01:02:07,440
directory for where i'm going to put

01:02:03,119 --> 01:02:10,480
my apis and we'll have

01:02:07,440 --> 01:02:12,720
the file make sure i get the file name

01:02:10,480 --> 01:02:12,720
right

01:02:14,559 --> 01:02:17,839
uh it doesn't matter i can just call it

01:02:16,000 --> 01:02:19,280
errors.json

01:02:17,839 --> 01:02:22,000
it doesn't actually matter as long as it

01:02:19,280 --> 01:02:25,119
ends in a dot com

01:02:22,000 --> 01:02:25,119
boom there it is

01:02:28,559 --> 01:02:32,079
so should i need them later i now have a

01:02:31,280 --> 01:02:35,200
nice set of

01:02:32,079 --> 01:02:38,480
json error responses for any uh

01:02:35,200 --> 01:02:41,920
eventuality all right

01:02:38,480 --> 01:02:45,039
now uh we're getting some progress but

01:02:41,920 --> 01:02:46,720
what we need now is uh we're aiming for

01:02:45,039 --> 01:02:48,079
a production api gateway here so let's

01:02:46,720 --> 01:02:51,119
make sure we've got some

01:02:48,079 --> 01:02:53,440
i've got tls in place

01:02:51,119 --> 01:02:54,640
and we left the placeholder for this

01:02:53,440 --> 01:02:58,720
let's set it up now

01:02:54,640 --> 01:03:01,119
i do have some certificates

01:02:58,720 --> 01:03:03,280
i can use for this purpose from let's

01:03:01,119 --> 01:03:04,640
encrypt so we're going to make this api

01:03:03,280 --> 01:03:07,680
gateway available

01:03:04,640 --> 01:03:09,599
at space.enginex.org

01:03:07,680 --> 01:03:12,000
so i'm going to copy the inserts in and

01:03:09,599 --> 01:03:14,319
set up the 443 listener

01:03:12,000 --> 01:03:16,559
now notice that in this example we're

01:03:14,319 --> 01:03:18,880
still listing on port 8080

01:03:16,559 --> 01:03:19,760
which is weird so it is possible to have

01:03:18,880 --> 01:03:22,960
nginx listen

01:03:19,760 --> 01:03:25,520
both on plain text and on

01:03:22,960 --> 01:03:27,280
ssl um there's no good reason for doing

01:03:25,520 --> 01:03:30,079
that outside of testing

01:03:27,280 --> 01:03:31,520
so but it is sometimes easy to leave the

01:03:30,079 --> 01:03:34,559
port 81 for example

01:03:31,520 --> 01:03:36,240
in uh after you set up tls and uh

01:03:34,559 --> 01:03:37,760
you're not as secure as you thought you

01:03:36,240 --> 01:03:42,480
were

01:03:37,760 --> 01:03:46,000
okay so firstly i need my certificates

01:03:42,480 --> 01:03:49,039
so i'm going to create a directory in

01:03:46,000 --> 01:03:50,319
etc nginx for ssl oh did i already leave

01:03:49,039 --> 01:03:53,920
these in there

01:03:50,319 --> 01:03:57,039
uh here they are isn't that handy

01:03:53,920 --> 01:03:59,359
in which case i can go back to my api

01:03:57,039 --> 01:04:03,760
gateway

01:03:59,359 --> 01:04:03,760
and picks up my listener

01:04:04,079 --> 01:04:10,559
still no mouse very strange all right

01:04:07,280 --> 01:04:13,920
so list.443 this with ssl otherwise it's

01:04:10,559 --> 01:04:13,920
just a plain text four four three

01:04:14,720 --> 01:04:18,079
we'll have an ssl certificate

01:04:21,359 --> 01:04:27,839
space nginx.org dot cert and then

01:04:31,359 --> 01:04:34,880
the private key

01:04:38,480 --> 01:04:45,039
space to engineers.org dot key

01:04:41,680 --> 01:04:46,960
boom okay and

01:04:45,039 --> 01:04:48,640
as i was recommending let's stop

01:04:46,960 --> 01:04:53,920
listening on poor 8080.

01:04:48,640 --> 01:04:55,280
actually i will uh just rumored why okay

01:04:53,920 --> 01:04:57,839
now

01:04:55,280 --> 01:04:58,480
by the way nginx-s reload will also test

01:04:57,839 --> 01:05:01,920
the config

01:04:58,480 --> 01:05:05,760
so it will show if there's an error and

01:05:01,920 --> 01:05:05,760
now if i jump to my

01:05:07,520 --> 01:05:10,720
i'm going to struggle with that i'm

01:05:08,960 --> 01:05:14,160
bouncing well

01:05:10,720 --> 01:05:17,760
i can do it this way all right so

01:05:14,160 --> 01:05:22,799
let's use uh curl to https

01:05:17,760 --> 01:05:24,400
space intellect.org

01:05:22,799 --> 01:05:26,319
and a bad request so that must be my api

01:05:24,400 --> 01:05:27,599
gateway and this is public on the

01:05:26,319 --> 01:05:28,799
internet but please don't try and hack

01:05:27,599 --> 01:05:29,839
it or break it because it's not really

01:05:28,799 --> 01:05:32,640
that secure

01:05:29,839 --> 01:05:33,440
but later on uh you'll be able to use

01:05:32,640 --> 01:05:34,880
the same uri

01:05:33,440 --> 01:05:37,119
and test some of the other things i'm

01:05:34,880 --> 01:05:39,599
doing with the gateway and if it breaks

01:05:37,119 --> 01:05:42,880
that means i can blame the audience

01:05:39,599 --> 01:05:44,720
okay let us continue

01:05:42,880 --> 01:05:46,240
so we haven't done a great deal yet

01:05:44,720 --> 01:05:47,440
we've got tls

01:05:46,240 --> 01:05:49,119
we've got json errors we haven't

01:05:47,440 --> 01:05:49,520
actually published any apis which of

01:05:49,119 --> 01:05:52,640
course

01:05:49,520 --> 01:05:54,160
is the uh the main idea so let's get to

01:05:52,640 --> 01:05:56,240
that

01:05:54,160 --> 01:05:58,400
we're going to publish our first api

01:05:56,240 --> 01:06:01,520
timo in the previous session

01:05:58,400 --> 01:06:03,440
published three separate apis or three

01:06:01,520 --> 01:06:06,799
separate services

01:06:03,440 --> 01:06:09,599
as with regards to space there was a

01:06:06,799 --> 01:06:10,640
uh planets and events that he modified

01:06:09,599 --> 01:06:13,039
on the fly

01:06:10,640 --> 01:06:14,720
and there's also an images microservice

01:06:13,039 --> 01:06:16,160
so you might think this is a space

01:06:14,720 --> 01:06:19,359
this is the foundations of an entire

01:06:16,160 --> 01:06:22,079
space api or a space app

01:06:19,359 --> 01:06:23,760
and what we're going to do is take those

01:06:22,079 --> 01:06:25,760
three separate microservices

01:06:23,760 --> 01:06:27,839
and use the api gateway to present them

01:06:25,760 --> 01:06:30,160
as a single api

01:06:27,839 --> 01:06:31,359
which is a common pattern and we've got

01:06:30,160 --> 01:06:33,760
different

01:06:31,359 --> 01:06:36,000
uri elements that will be routed to

01:06:33,760 --> 01:06:39,280
different backends

01:06:36,000 --> 01:06:40,720
so api space has planets it's going to

01:06:39,280 --> 01:06:44,000
go into planets microservice

01:06:40,720 --> 01:06:45,839
events to events and images to images

01:06:44,000 --> 01:06:47,920
so we're going to go ahead and set that

01:06:45,839 --> 01:06:49,440
up and we'll publish

01:06:47,920 --> 01:06:51,680
uh we need two things to do we need to

01:06:49,440 --> 01:06:53,680
define uh the set of backends and

01:06:51,680 --> 01:06:55,680
microservices where they are

01:06:53,680 --> 01:06:58,160
and then we need to describe the routing

01:06:55,680 --> 01:06:59,119
rules for how the uris are actually

01:06:58,160 --> 01:07:02,640
going to get proxied

01:06:59,119 --> 01:07:02,640
to the correct microservice

01:07:03,359 --> 01:07:06,880
step one of that is we're going to

01:07:05,039 --> 01:07:09,839
define the backend service

01:07:06,880 --> 01:07:11,119
and i think i will spare you looking at

01:07:09,839 --> 01:07:13,920
my typing

01:07:11,119 --> 01:07:15,119
by pasting in this configuration here so

01:07:13,920 --> 01:07:18,079
you may remember from

01:07:15,119 --> 01:07:18,960
timo's session that he exposed three

01:07:18,079 --> 01:07:20,720
different

01:07:18,960 --> 01:07:23,119
docker containers on three different

01:07:20,720 --> 01:07:26,559
ports uh 8080 planets

01:07:23,119 --> 01:07:29,680
8085 for events in 1890 for images

01:07:26,559 --> 01:07:34,799
so there encapsulated here

01:07:29,680 --> 01:07:34,799
and if i flip back to the

01:07:37,359 --> 01:07:40,640
i think powerpoint has robbed me of my

01:07:39,520 --> 01:07:42,000
mouse pointer so

01:07:40,640 --> 01:07:45,440
i'm doing an awful lot of keyboardy

01:07:42,000 --> 01:07:47,599
stuff let's make sure this goes okay

01:07:45,440 --> 01:07:47,599
so

01:07:49,119 --> 01:07:52,160
i'm going to put this in a separate file

01:07:50,640 --> 01:07:54,000
and again

01:07:52,160 --> 01:07:55,599
i'm going to use a lot of use of

01:07:54,000 --> 01:07:57,280
different files that get automatically

01:07:55,599 --> 01:07:58,559
included by nginx

01:07:57,280 --> 01:08:00,880
there's not a hell of a lot of config

01:07:58,559 --> 01:08:02,880
that's going to go in here but it is

01:08:00,880 --> 01:08:04,400
good best practice to isolate different

01:08:02,880 --> 01:08:05,599
elements of the configuration into

01:08:04,400 --> 01:08:06,720
different files

01:08:05,599 --> 01:08:09,359
so that you can modify them

01:08:06,720 --> 01:08:09,359
independently

01:08:09,440 --> 01:08:12,559
and there we are so i pasted it in we've

01:08:12,240 --> 01:08:15,359
got

01:08:12,559 --> 01:08:17,279
three different upstream blocks each of

01:08:15,359 --> 01:08:18,799
these can have multiple server elements

01:08:17,279 --> 01:08:19,600
we've just got one container for each

01:08:18,799 --> 01:08:21,759
right now

01:08:19,600 --> 01:08:23,359
but if you were to add more you would

01:08:21,759 --> 01:08:25,040
then nginx would automatically start

01:08:23,359 --> 01:08:27,440
load balancing between them for every

01:08:25,040 --> 01:08:30,799
matching request

01:08:27,440 --> 01:08:33,279
however if we were to do that uh

01:08:30,799 --> 01:08:36,000
in production we would really want to

01:08:33,279 --> 01:08:38,719
define a shared memory zone

01:08:36,000 --> 01:08:40,400
so that each engine its worker process

01:08:38,719 --> 01:08:43,040
is aware of any

01:08:40,400 --> 01:08:44,560
uh errors detected for example by a

01:08:43,040 --> 01:08:45,679
different worker process that had tried

01:08:44,560 --> 01:08:47,839
to reach the back end

01:08:45,679 --> 01:08:49,520
so that in that doing it that way you

01:08:47,839 --> 01:08:51,679
don't get

01:08:49,520 --> 01:08:53,359
engine x trying more than once to reach

01:08:51,679 --> 01:08:55,199
a failed back end

01:08:53,359 --> 01:08:56,480
and so all we need to do to enable that

01:08:55,199 --> 01:08:58,239
is to allocate a very small amount of

01:08:56,480 --> 01:09:01,440
memory like 64 kilobytes

01:08:58,239 --> 01:09:03,679
uh to a shared memory zone like that

01:09:01,440 --> 01:09:04,799
but i won't uh as we only have one it

01:09:03,679 --> 01:09:06,319
really doesn't make a difference for

01:09:04,799 --> 01:09:08,480
this configuration but

01:09:06,319 --> 01:09:10,799
production best practice use the zone

01:09:08,480 --> 01:09:13,440
directive

01:09:10,799 --> 01:09:14,080
uh oops i think i screwed that up all

01:09:13,440 --> 01:09:17,679
right

01:09:14,080 --> 01:09:21,120
um that is the back ends

01:09:17,679 --> 01:09:25,759
i got my mouse back now

01:09:21,120 --> 01:09:28,319
let's define the api and

01:09:25,759 --> 01:09:29,679
we're going to do this using an unusual

01:09:28,319 --> 01:09:31,520
piece of configuration

01:09:29,679 --> 01:09:33,120
we saw the location block earlier where

01:09:31,520 --> 01:09:34,960
we defined the catcher and this is how

01:09:33,120 --> 01:09:36,880
we match on uris

01:09:34,960 --> 01:09:38,080
and so we're going to create a location

01:09:36,880 --> 01:09:40,159
for slash api

01:09:38,080 --> 01:09:42,400
space because everything that we're

01:09:40,159 --> 01:09:46,319
exposing in this api is

01:09:42,400 --> 01:09:48,000
below that uri prefix

01:09:46,319 --> 01:09:49,679
but then we're going to be more specific

01:09:48,000 --> 01:09:52,640
and we're going to use a location block

01:09:49,679 --> 01:09:54,159
inside a location block to catch

01:09:52,640 --> 01:09:56,320
individual uris

01:09:54,159 --> 01:09:57,600
and then we can proxy them to different

01:09:56,320 --> 01:09:59,679
places

01:09:57,600 --> 01:10:02,880
so there's two great reasons for using

01:09:59,679 --> 01:10:04,480
nested locations number one

01:10:02,880 --> 01:10:06,640
is that it makes it very easy to

01:10:04,480 --> 01:10:11,280
describe a routing policy

01:10:06,640 --> 01:10:12,800
for inside a uri prefix namespace

01:10:11,280 --> 01:10:15,199
we can have a default and we can also

01:10:12,800 --> 01:10:18,960
have overrides

01:10:15,199 --> 01:10:20,800
and we can be very explicit about which

01:10:18,960 --> 01:10:22,560
uris are actually permitted

01:10:20,800 --> 01:10:24,480
and which are not so we'll only proxy

01:10:22,560 --> 01:10:27,600
things to back-end services

01:10:24,480 --> 01:10:28,880
that match a precise location

01:10:27,600 --> 01:10:31,040
the other reason for using nested

01:10:28,880 --> 01:10:32,159
locations is that within the outer

01:10:31,040 --> 01:10:34,080
location block

01:10:32,159 --> 01:10:36,239
we can put in policies and we'll do some

01:10:34,080 --> 01:10:37,679
of that in just a minute

01:10:36,239 --> 01:10:39,840
and in that way we just define the

01:10:37,679 --> 01:10:41,280
policies for this api at one time

01:10:39,840 --> 01:10:45,520
and if we want to be more specific we

01:10:41,280 --> 01:10:47,120
can do so inside the inner locations

01:10:45,520 --> 01:10:49,520
so i'm going to go ahead and set this up

01:10:47,120 --> 01:10:51,679
right now

01:10:49,520 --> 01:10:51,679
so

01:10:53,600 --> 01:10:58,800
let's open this as a separate file

01:10:57,280 --> 01:11:01,360
my apis and we're going to call it

01:10:58,800 --> 01:11:03,840
space.com

01:11:01,360 --> 01:11:06,800
here it is um so i'll type in some of

01:11:03,840 --> 01:11:09,679
this and i'll paste in the rest

01:11:06,800 --> 01:11:12,000
and nginx has three different ways of

01:11:09,679 --> 01:11:14,960
matching on your eyes

01:11:12,000 --> 01:11:17,520
in this default location such api space

01:11:14,960 --> 01:11:21,840
anything that starts with that pattern

01:11:17,520 --> 01:11:24,960
will match here but if i use the equals

01:11:21,840 --> 01:11:27,840
qualifier then only the

01:11:24,960 --> 01:11:27,840
exact

01:11:29,360 --> 01:11:32,880
uh only the exact uri i specify here

01:11:32,080 --> 01:11:34,880
will match

01:11:32,880 --> 01:11:36,800
so this it will be such api so space

01:11:34,880 --> 01:11:40,400
just planets

01:11:36,800 --> 01:11:44,800
we have on a proxy pass to

01:11:40,400 --> 01:11:44,800
the planet's service

01:11:44,880 --> 01:11:47,760
and then we're going to be

01:11:50,080 --> 01:11:57,760
add another uri to say if it's api

01:11:53,280 --> 01:11:57,760
space planets

01:11:57,840 --> 01:12:01,840
slash something so no qualifier so it's

01:12:00,560 --> 01:12:05,280
a prefix match

01:12:01,840 --> 01:12:06,320
then we'll also proxy pass to the same

01:12:05,280 --> 01:12:09,440
one

01:12:06,320 --> 01:12:10,880
now why would i do that when i could

01:12:09,440 --> 01:12:13,199
just have a prefix well

01:12:10,880 --> 01:12:14,159
if you have an api that you're you're

01:12:13,199 --> 01:12:16,239
publishing

01:12:14,159 --> 01:12:17,600
um you might not want to send requests

01:12:16,239 --> 01:12:20,960
to it that start with

01:12:17,600 --> 01:12:22,719
api space planets one one one one

01:12:20,960 --> 01:12:24,320
one right that that's not actually part

01:12:22,719 --> 01:12:26,239
of my api

01:12:24,320 --> 01:12:27,760
i only want to match on explicit things

01:12:26,239 --> 01:12:30,159
and i could be even more explicit

01:12:27,760 --> 01:12:32,000
and uh if i had an open api spec for

01:12:30,159 --> 01:12:32,640
example i could make this configuration

01:12:32,000 --> 01:12:34,880
match

01:12:32,640 --> 01:12:35,760
what the open api spec might define as

01:12:34,880 --> 01:12:38,960
all the paths

01:12:35,760 --> 01:12:41,360
in that api so

01:12:38,960 --> 01:12:43,600
there are the two uris that i will pass

01:12:41,360 --> 01:12:43,600
to

01:12:43,760 --> 01:12:47,920
the planet service i'll paste in the

01:12:48,840 --> 01:12:53,120
others

01:12:50,880 --> 01:12:53,120
so

01:12:54,080 --> 01:13:05,840
actually i'd have to drop out about to

01:12:56,640 --> 01:13:05,840
do that

01:13:06,719 --> 01:13:10,159
there so just to show what's going on

01:13:09,760 --> 01:13:12,719
here

01:13:10,159 --> 01:13:13,600
the tilde is the qualifier for regular

01:13:12,719 --> 01:13:15,199
expression

01:13:13,600 --> 01:13:16,800
so here we have anything starting api

01:13:15,199 --> 01:13:19,920
space images

01:13:16,800 --> 01:13:23,280
and then ending with svg or png

01:13:19,920 --> 01:13:24,960
will match anything ending jpeg

01:13:23,280 --> 01:13:26,719
which might exist at the back end that

01:13:24,960 --> 01:13:30,080
we don't want to expose jpegs

01:13:26,719 --> 01:13:31,280
won't match and then finally

01:13:30,080 --> 01:13:33,360
we're going to match anything that

01:13:31,280 --> 01:13:34,800
starts with slash events

01:13:33,360 --> 01:13:37,280
to the event service so here's our

01:13:34,800 --> 01:13:40,800
routing and i'm going to need

01:13:37,280 --> 01:13:42,480
leave uh i'm going to leave a little

01:13:40,800 --> 01:13:44,719
white space at the top

01:13:42,480 --> 01:13:46,480
because later on we're going to come put

01:13:44,719 --> 01:13:51,040
some policies in here

01:13:46,480 --> 01:13:53,760
okay let's save that and save that

01:13:51,040 --> 01:13:55,040
and check it and have your typos and now

01:13:53,760 --> 01:14:00,320
reload the configuration

01:13:55,040 --> 01:14:03,920
so this time let's

01:14:00,320 --> 01:14:03,920
make some actual api calls

01:14:05,840 --> 01:14:09,199
so i can still get here locally on

01:14:08,159 --> 01:14:12,400
localhost

01:14:09,199 --> 01:14:12,400
api space

01:14:13,520 --> 01:14:20,320
planets excellent

01:14:17,120 --> 01:14:20,320
that's quite big isn't it

01:14:22,480 --> 01:14:25,520
let's make that a little prettier there

01:14:24,400 --> 01:14:27,440
we go

01:14:25,520 --> 01:14:28,560
and if i were to choose a specific

01:14:27,440 --> 01:14:32,320
planet

01:14:28,560 --> 01:14:35,600
there we go but if i were to say

01:14:32,320 --> 01:14:37,280
planets that

01:14:35,600 --> 01:14:39,840
doesn't match any of the locations i set

01:14:37,280 --> 01:14:42,560
up and so we're going to send a 404 back

01:14:39,840 --> 01:14:43,520
notice a 404 not 400 i thought we had

01:14:42,560 --> 01:14:46,480
four hundreds for

01:14:43,520 --> 01:14:49,199
the catch-all well that's true except

01:14:46,480 --> 01:14:53,199
that in our

01:14:49,199 --> 01:14:53,199
uh in our uh

01:14:54,000 --> 01:14:57,040
outer location we're matching here on

01:14:56,159 --> 01:14:59,440
api space

01:14:57,040 --> 01:15:00,239
anything but because we didn't match

01:14:59,440 --> 01:15:02,719
anything in the

01:15:00,239 --> 01:15:03,440
inner locations we did the index default

01:15:02,719 --> 01:15:06,719
behavior

01:15:03,440 --> 01:15:08,560
and we sent a 404. so this tells us that

01:15:06,719 --> 01:15:10,640
okay i've hit an api that's published

01:15:08,560 --> 01:15:14,400
but it's not i've added a uri

01:15:10,640 --> 01:15:16,159
for that i have that particular api

01:15:14,400 --> 01:15:17,760
if i were to put something like some

01:15:16,159 --> 01:15:19,120
bogus characters in here

01:15:17,760 --> 01:15:24,000
i'm going to get the 400 because that

01:15:19,120 --> 01:15:28,400
doesn't match any of the apis

01:15:24,000 --> 01:15:31,920
the api is published now and

01:15:28,400 --> 01:15:35,520
i could also show that if i

01:15:31,920 --> 01:15:36,960
uh show the regular expression match if

01:15:35,520 --> 01:15:40,000
i go to localhost

01:15:36,960 --> 01:15:43,520
um we've got a dummy image service here

01:15:40,000 --> 01:15:43,520
so that's api space

01:15:43,840 --> 01:15:50,320
images mars dot

01:15:46,880 --> 01:15:53,600
svg right it does return

01:15:50,320 --> 01:15:56,719
some metadata but if i were to make that

01:15:53,600 --> 01:15:58,800
jpeg we get a 404 because the regular

01:15:56,719 --> 01:16:02,080
expression said i'm only going to allow

01:15:58,800 --> 01:16:04,880
svg and png responses

01:16:02,080 --> 01:16:06,000
so just to confirm the routing is set up

01:16:04,880 --> 01:16:08,719
i'm just going to do one last

01:16:06,000 --> 01:16:10,000
check and make sure that we can also get

01:16:08,719 --> 01:16:15,440
the events

01:16:10,000 --> 01:16:15,440
uri fantastic and it's also got

01:16:17,040 --> 01:16:20,560
the extra events that timo added in the

01:16:19,760 --> 01:16:23,920
last session

01:16:20,560 --> 01:16:26,400
all right so the api is now

01:16:23,920 --> 01:16:27,760
fully published but we have no policies

01:16:26,400 --> 01:16:29,440
applied

01:16:27,760 --> 01:16:30,880
very unusual to publish an api without

01:16:29,440 --> 01:16:33,840
any policies

01:16:30,880 --> 01:16:34,960
let's look at a couple of those and i

01:16:33,840 --> 01:16:37,040
think we'll be able to

01:16:34,960 --> 01:16:38,719
get through two or three policies that

01:16:37,040 --> 01:16:41,679
we can apply to this api

01:16:38,719 --> 01:16:44,560
before the clock runs out first thing

01:16:41,679 --> 01:16:47,440
we'll do is rate limiting

01:16:44,560 --> 01:16:48,800
now nginx is a very flexible rate

01:16:47,440 --> 01:16:51,280
limiting

01:16:48,800 --> 01:16:52,400
system we configure it in two different

01:16:51,280 --> 01:16:55,280
places

01:16:52,400 --> 01:16:56,640
because we isolate the way that nginx

01:16:55,280 --> 01:17:00,159
tracks and monitors

01:16:56,640 --> 01:17:02,480
the requests coming in from where those

01:17:00,159 --> 01:17:03,760
rate limits are actually applied so we

01:17:02,480 --> 01:17:07,040
can monitor

01:17:03,760 --> 01:17:08,719
in the top line here uh all of the

01:17:07,040 --> 01:17:11,520
remote ip addresses

01:17:08,719 --> 01:17:12,560
uh and with a measurement of them being

01:17:11,520 --> 01:17:14,640
at uh

01:17:12,560 --> 01:17:16,880
above or below two requests a second and

01:17:14,640 --> 01:17:18,480
then later on we could apply that rate

01:17:16,880 --> 01:17:20,880
limit in the space api

01:17:18,480 --> 01:17:23,520
in a different api or just inside one of

01:17:20,880 --> 01:17:25,040
in or just inside the planet's endpoint

01:17:23,520 --> 01:17:27,040
or indeed we could have different rate

01:17:25,040 --> 01:17:30,960
limits for different

01:17:27,040 --> 01:17:32,800
uris what's more there's five different

01:17:30,960 --> 01:17:35,920
policies that we can apply

01:17:32,800 --> 01:17:38,320
for or uh behaviors i should say when a

01:17:35,920 --> 01:17:41,040
rate limit is exceeded

01:17:38,320 --> 01:17:42,159
what gonna do here is not delay the

01:17:41,040 --> 01:17:44,239
default is to

01:17:42,159 --> 01:17:46,480
throttle requests hold them back until

01:17:44,239 --> 01:17:50,320
the rate limit can be

01:17:46,480 --> 01:17:51,440
achieved but for our purposes we're

01:17:50,320 --> 01:17:53,280
going to just reject them

01:17:51,440 --> 01:17:55,440
flat out there's a couple of other

01:17:53,280 --> 01:17:58,960
tweaks we can do like allow a few over

01:17:55,440 --> 01:18:02,320
before we start limiting

01:17:58,960 --> 01:18:03,760
so let's set that up now again we do

01:18:02,320 --> 01:18:07,280
that in two different places

01:18:03,760 --> 01:18:10,960
so let me get my mouse back

01:18:07,280 --> 01:18:10,960
which since i have to do this button

01:18:11,600 --> 01:18:17,360
nope all right key what it is

01:18:14,880 --> 01:18:18,800
uh so this is going to be in the api

01:18:17,360 --> 01:18:20,560
gateway.com

01:18:18,800 --> 01:18:21,840
so we're going to set up right at the

01:18:20,560 --> 01:18:24,320
top

01:18:21,840 --> 01:18:25,760
a shed memory zone so another shared

01:18:24,320 --> 01:18:28,640
memory zone so this is

01:18:25,760 --> 01:18:31,760
a piece of memory that all of the nginx

01:18:28,640 --> 01:18:31,760
workers have access to

01:18:32,159 --> 01:18:35,520
and we're going to say that we're going

01:18:33,600 --> 01:18:36,960
to

01:18:35,520 --> 01:18:39,199
use the remote ip address that's the

01:18:36,960 --> 01:18:42,320
remote android variable

01:18:39,199 --> 01:18:44,320
give the zone a name called per ip i'll

01:18:42,320 --> 01:18:48,560
give it an amount of memory to use

01:18:44,320 --> 01:18:50,239
a megabyte and we'll specify the rate uh

01:18:48,560 --> 01:18:52,239
i'll do two requests a second so that i

01:18:50,239 --> 01:18:55,760
can actually exceed it

01:18:52,239 --> 01:19:01,600
by hand and

01:18:55,760 --> 01:19:01,600
let's then apply it in my space api

01:19:02,640 --> 01:19:04,880
so

01:19:07,040 --> 01:19:10,400
so we're going to apply the rate limit

01:19:08,560 --> 01:19:13,040
from the per ip zone

01:19:10,400 --> 01:19:14,080
and we said that we would not delay any

01:19:13,040 --> 01:19:16,640
requests

01:19:14,080 --> 01:19:17,600
i.e we will reject them and the other

01:19:16,640 --> 01:19:19,920
thing we're going to do is going to

01:19:17,600 --> 01:19:21,920
control

01:19:19,920 --> 01:19:23,040
what status code we send back if we

01:19:21,920 --> 01:19:25,120
exceed so we use

01:19:23,040 --> 01:19:27,040
429 which is the conventional two menu

01:19:25,120 --> 01:19:30,400
request response

01:19:27,040 --> 01:19:30,400
and i think we're ready to save that

01:19:30,640 --> 01:19:34,000
and save that as well

01:19:34,320 --> 01:19:42,159
test the typos and reload

01:19:37,920 --> 01:19:44,719
and now uh

01:19:42,159 --> 01:19:46,080
what shall we use so let's go to

01:19:44,719 --> 01:19:49,120
localhost

01:19:46,080 --> 01:19:52,400
uthe api space

01:19:49,120 --> 01:19:56,400
planets mars

01:19:52,400 --> 01:19:56,400
there we go and

01:19:57,679 --> 01:20:01,920
i'll just make that pretty so that we

01:20:00,400 --> 01:20:04,880
can see it nicely

01:20:01,920 --> 01:20:05,679
and now let's run three in a row

01:20:04,880 --> 01:20:07,360
excellent

01:20:05,679 --> 01:20:08,800
so the first one worked and then of

01:20:07,360 --> 01:20:09,840
course because they came from the same

01:20:08,800 --> 01:20:11,600
ip address

01:20:09,840 --> 01:20:13,120
the next two hit the rate limit we got

01:20:11,600 --> 01:20:15,600
the code we asked for

01:20:13,120 --> 01:20:18,400
and there's the message from our errors

01:20:15,600 --> 01:20:19,280
file that i used earlier rate limiting

01:20:18,400 --> 01:20:23,600
enabled

01:20:19,280 --> 01:20:26,000
fantastic now let's see if we can

01:20:23,600 --> 01:20:28,400
also add authentication quite unusual

01:20:26,000 --> 01:20:30,880
that apis are published

01:20:28,400 --> 01:20:33,760
fully public so what we're going to do

01:20:30,880 --> 01:20:35,280
is look at our authentication options

01:20:33,760 --> 01:20:37,040
we have we have a good choice

01:20:35,280 --> 01:20:38,639
authentication options that's handy

01:20:37,040 --> 01:20:41,840
because apis

01:20:38,639 --> 01:20:43,840
uh don't have a standard it could be

01:20:41,840 --> 01:20:46,400
many different things that we could use

01:20:43,840 --> 01:20:48,719
we can use client certificate

01:20:46,400 --> 01:20:50,800
authentication with x509 certs

01:20:48,719 --> 01:20:52,960
we can use http basic authentication

01:20:50,800 --> 01:20:56,960
with a username and password

01:20:52,960 --> 01:20:59,440
we can use in maybe not all things open

01:20:56,960 --> 01:21:00,000
we can use api keys by setting them up

01:20:59,440 --> 01:21:03,360
in a separate

01:21:00,000 --> 01:21:06,400
file and we can also use an external

01:21:03,360 --> 01:21:09,760
authentication server for example

01:21:06,400 --> 01:21:10,560
oauth tokens can be introspected by

01:21:09,760 --> 01:21:12,480
asking the

01:21:10,560 --> 01:21:14,480
identity provider hey i just got this

01:21:12,480 --> 01:21:16,239
token please let me know if it's still

01:21:14,480 --> 01:21:20,320
valid

01:21:16,239 --> 01:21:20,320
so for the purposes of uh

01:21:21,760 --> 01:21:25,360
yeah for the purposes of this demo

01:21:26,000 --> 01:21:29,760
i'm going to use http basic

01:21:28,960 --> 01:21:31,840
authentication

01:21:29,760 --> 01:21:34,320
but i'm going to use it as if it were

01:21:31,840 --> 01:21:36,239
used for api keys

01:21:34,320 --> 01:21:37,360
and again we're going to apply this

01:21:36,239 --> 01:21:41,360
policy

01:21:37,360 --> 01:21:42,800
under the api space namespace so all of

01:21:41,360 --> 01:21:45,920
the uris that we match on

01:21:42,800 --> 01:21:48,400
will require authentication

01:21:45,920 --> 01:21:48,960
if i were to use another different

01:21:48,400 --> 01:21:51,679
method

01:21:48,960 --> 01:21:52,239
i might use auth jwt or auth request to

01:21:51,679 --> 01:21:55,199
make

01:21:52,239 --> 01:21:56,560
http calls the exception is the client

01:21:55,199 --> 01:21:57,760
certificates because that's part of the

01:21:56,560 --> 01:21:59,199
tls handshake

01:21:57,760 --> 01:22:02,639
so that actually happens at the api

01:21:59,199 --> 01:22:05,920
gateway level not at the uri level

01:22:02,639 --> 01:22:05,920
so let's see if we can get this done

01:22:06,400 --> 01:22:10,320
i do already have a file so i'm going to

01:22:09,920 --> 01:22:13,600
grab

01:22:10,320 --> 01:22:13,600
that it's just got three

01:22:15,199 --> 01:22:18,159
api keys in it

01:22:19,280 --> 01:22:25,840
oops i'll try and copy paste this

01:22:25,920 --> 01:22:29,840
where's my browser gone here we go

01:22:31,440 --> 01:22:34,560
here's the file it's got client one

01:22:33,280 --> 01:22:36,480
client two client three and i've just

01:22:34,560 --> 01:22:39,040
got some plain text keys in here

01:22:36,480 --> 01:22:40,239
these would normally be encrypted but uh

01:22:39,040 --> 01:22:45,199
i explicitly over

01:22:40,239 --> 01:22:48,080
overwrote that with the with the plain

01:22:45,199 --> 01:22:50,800
qualifier just for demo purposes don't

01:22:48,080 --> 01:22:50,800
do this at home

01:22:50,840 --> 01:22:54,719
so

01:22:53,120 --> 01:22:58,400
i'll create another file this one's

01:22:54,719 --> 01:22:58,400
called api clients paste those in

01:22:59,840 --> 01:23:07,840
and then i'm going to actually just

01:23:03,280 --> 01:23:07,840
open it inside um

01:23:08,080 --> 01:23:12,000
edit the space api definition there's

01:23:10,159 --> 01:23:15,120
the rate limiting there

01:23:12,000 --> 01:23:15,120
i'm just going to put it at the top

01:23:16,800 --> 01:23:22,000
basic um

01:23:20,639 --> 01:23:23,920
what's the challenge going to be if i'm

01:23:22,000 --> 01:23:26,400
not authenticated it's going to be space

01:23:23,920 --> 01:23:26,400
api

01:23:27,040 --> 01:23:34,960
excuse me yeah just double checking and

01:23:29,840 --> 01:23:38,480
then i need to specify the course basic

01:23:34,960 --> 01:23:43,120
user file

01:23:38,480 --> 01:23:46,400
and i call it api client start conf

01:23:43,120 --> 01:23:48,880
owner ht password

01:23:46,400 --> 01:23:50,000
i should fix them so there's configura

01:23:48,880 --> 01:23:52,159
there's authentication

01:23:50,000 --> 01:23:53,360
now defined space i just need to fix my

01:23:52,159 --> 01:23:56,400
typo

01:23:53,360 --> 01:23:56,400
it's not a con file

01:24:00,159 --> 01:24:04,239
hd password file in the apache style

01:24:06,320 --> 01:24:12,719
now let's go and hit that uh

01:24:10,000 --> 01:24:14,639
mars end point and i'm getting a 401

01:24:12,719 --> 01:24:16,000
unauthorized

01:24:14,639 --> 01:24:17,760
which is exactly what we expected

01:24:16,000 --> 01:24:19,199
because uh

01:24:17,760 --> 01:24:21,360
i need to send a username and password

01:24:19,199 --> 01:24:24,560
now so let's have a look at that

01:24:21,360 --> 01:24:24,560
that these api clients

01:24:25,120 --> 01:24:27,440
and

01:24:28,719 --> 01:24:33,440
we use curl to send this in so i'm going

01:24:31,199 --> 01:24:36,400
to say i'm client one

01:24:33,440 --> 01:24:36,400
and my password

01:24:36,560 --> 01:24:41,760
is that and now i get the response

01:24:40,080 --> 01:24:43,520
and if i modify that in even the

01:24:41,760 --> 01:24:45,120
slightest way

01:24:43,520 --> 01:24:47,679
of course it won't match i'm

01:24:45,120 --> 01:24:50,480
unauthorized again

01:24:47,679 --> 01:24:50,480
terrific so

01:24:52,159 --> 01:24:55,040
we've done quite a lot

01:24:55,760 --> 01:25:00,000
i'll skip the api keys so we've got an

01:24:57,760 --> 01:25:03,040
api published with rate limiting

01:25:00,000 --> 01:25:05,199
with tls and with authentication

01:25:03,040 --> 01:25:07,840
we've got five minutes to go so i'm

01:25:05,199 --> 01:25:10,639
going to save the rest of the

01:25:07,840 --> 01:25:10,639
of these for

01:25:10,960 --> 01:25:16,560
uh further slides um i'll just show

01:25:14,239 --> 01:25:17,280
uh other things that we can do but i

01:25:16,560 --> 01:25:19,679
won't do

01:25:17,280 --> 01:25:21,920
live right now is that we can control

01:25:19,679 --> 01:25:25,760
which

01:25:21,920 --> 01:25:29,120
methods are allowed for a given uri

01:25:25,760 --> 01:25:29,840
so in this example anything to slash

01:25:29,120 --> 01:25:33,520
events

01:25:29,840 --> 01:25:35,520
can be a get or a post but that is all

01:25:33,520 --> 01:25:38,560
the other thing that we can do is that

01:25:35,520 --> 01:25:40,560
we can validate that if it were a post

01:25:38,560 --> 01:25:42,960
that the body that was sent in the

01:25:40,560 --> 01:25:46,880
request the payload itself

01:25:42,960 --> 01:25:50,480
is json and we can do that by

01:25:46,880 --> 01:25:53,360
using the nginx javascript module to

01:25:50,480 --> 01:25:56,159
actually parse the body and make sure

01:25:53,360 --> 01:25:58,960
that it doesn't have any exceptions

01:25:56,159 --> 01:26:00,320
and we can add that configuration in uh

01:25:58,960 --> 01:26:03,120
so that we

01:26:00,320 --> 01:26:04,880
force nginx to pull the body in and to

01:26:03,120 --> 01:26:06,800
validate that it's really json

01:26:04,880 --> 01:26:08,960
before it sends it to the back end just

01:26:06,800 --> 01:26:10,320
in case there might be a json attack in

01:26:08,960 --> 01:26:12,880
there

01:26:10,320 --> 01:26:14,560
so here's the ambitious list of things

01:26:12,880 --> 01:26:15,840
that i was hoping to get through we did

01:26:14,560 --> 01:26:17,600
pretty well we've got more than halfway

01:26:15,840 --> 01:26:21,679
through

01:26:17,600 --> 01:26:23,199
so with that i will pause for a moment

01:26:21,679 --> 01:26:24,800
we'll take any questions that are

01:26:23,199 --> 01:26:26,400
left in the chat and i'll just bring

01:26:24,800 --> 01:26:29,360
that window open

01:26:26,400 --> 01:26:29,760
um and while i do that i'll just leave

01:26:29,360 --> 01:26:32,800
this

01:26:29,760 --> 01:26:34,840
link up this page of links up for

01:26:32,800 --> 01:26:36,960
the resources that you might want to

01:26:34,840 --> 01:26:38,239
access a couple of things i've mentioned

01:26:36,960 --> 01:26:40,000
along the way

01:26:38,239 --> 01:26:41,840
there's also a developer license in here

01:26:40,000 --> 01:26:43,440
for nginx plus the commercial version of

01:26:41,840 --> 01:26:45,120
nginx

01:26:43,440 --> 01:26:47,440
with the code there that you can use to

01:26:45,120 --> 01:26:51,520
get access

01:26:47,440 --> 01:26:54,560
all right

01:26:51,520 --> 01:26:56,320
brian thanks yes um so

01:26:54,560 --> 01:26:57,600
what i'll do before we share this deck

01:26:56,320 --> 01:27:00,400
out with all things openings

01:26:57,600 --> 01:27:02,400
we'll add in the the repo links to

01:27:00,400 --> 01:27:06,560
timo's code and to my configs

01:27:02,400 --> 01:27:07,920
i use just now and then you'll have a

01:27:06,560 --> 01:27:09,520
great set of resources

01:27:07,920 --> 01:27:11,040
i i went through about a million

01:27:09,520 --> 01:27:12,800
different engine x directives through

01:27:11,040 --> 01:27:16,840
this and if you ever need the docs

01:27:12,800 --> 01:27:18,080
the best kept secret uh is if you go to

01:27:16,840 --> 01:27:20,400
index.org

01:27:18,080 --> 01:27:21,760
something directive name proxy pass auth

01:27:20,400 --> 01:27:24,159
basic whatever it is

01:27:21,760 --> 01:27:25,199
that will jump you right to the docs for

01:27:24,159 --> 01:27:28,639
that

01:27:25,199 --> 01:27:30,239
piece that that directive we've also got

01:27:28,639 --> 01:27:33,440
some good stuff on our

01:27:30,239 --> 01:27:35,280
uh on our website there are a couple of

01:27:33,440 --> 01:27:35,920
blog posts about deploying interest api

01:27:35,280 --> 01:27:38,239
gateway

01:27:35,920 --> 01:27:40,239
i will say they're a bit out of date the

01:27:38,239 --> 01:27:40,800
best practice is what i showed in this

01:27:40,239 --> 01:27:42,960
demo

01:27:40,800 --> 01:27:44,800
so this deck will be a better resource

01:27:42,960 --> 01:27:46,400
and we are in the process of updating

01:27:44,800 --> 01:27:49,600
uh these blogs from a couple of years

01:27:46,400 --> 01:27:51,120
ago to bring them up to spec

01:27:49,600 --> 01:27:52,800
so with that i think we're about a

01:27:51,120 --> 01:27:53,600
minute out so i'll just double check the

01:27:52,800 --> 01:27:57,120
other questions

01:27:53,600 --> 01:27:58,400
um feel free to drop something in

01:27:57,120 --> 01:28:00,960
or if teamwork if there's anything that

01:27:58,400 --> 01:28:04,800
came up that uh

01:28:00,960 --> 01:28:04,800
that i missed let me know

01:28:05,440 --> 01:28:09,679
yes github replay will be in the deck um

01:28:10,560 --> 01:28:14,159
much of this was done earlier today so

01:28:13,199 --> 01:28:16,000
the github repo

01:28:14,159 --> 01:28:17,679
needs a little bit of finishing off

01:28:16,000 --> 01:28:19,280
we'll make sure that's done in time for

01:28:17,679 --> 01:28:21,600
all things open to send out the datejust

01:28:19,280 --> 01:28:21,600
money

01:28:27,440 --> 01:28:33,760
ryan yes method matching is here

01:28:30,480 --> 01:28:37,040
so line 20 uh you can

01:28:33,760 --> 01:28:39,840
require limit accept means i'll

01:28:37,040 --> 01:28:40,880
uh block everything apart from the

01:28:39,840 --> 01:28:44,000
listed methods

01:28:40,880 --> 01:28:44,560
so you can indeed do that so you might

01:28:44,000 --> 01:28:49,280
add

01:28:44,560 --> 01:28:49,280
limited set get to all the regular uris

01:28:51,840 --> 01:28:55,360
all righty okay uh one thing i think we

01:28:54,480 --> 01:28:58,719
have a virtual

01:28:55,360 --> 01:29:02,080
booth around the conference

01:28:58,719 --> 01:29:05,280
so we go ahead and check with our

01:29:02,080 --> 01:29:08,960
yeah with our persons hosting the booth

01:29:05,280 --> 01:29:12,080
uh there's any chance of of being around

01:29:08,960 --> 01:29:13,679
for letting the next 30 minutes or so so

01:29:12,080 --> 01:29:15,679
if you have questions i think you can go

01:29:13,679 --> 01:29:18,480
and ask them in the booth as well

01:29:15,679 --> 01:29:19,600
and that's they should they should find

01:29:18,480 --> 01:29:21,199
us

01:29:19,600 --> 01:29:23,679
the questions and we'll be happy to

01:29:21,199 --> 01:29:25,280
answer yes

01:29:23,679 --> 01:29:26,960
great teamwork thanks we're better out

01:29:25,280 --> 01:29:28,880
of time so yeah so benefits over spring

01:29:26,960 --> 01:29:32,000
cloud gateway and spring boot

01:29:28,880 --> 01:29:33,760
um basically you're using nginx it's

01:29:32,000 --> 01:29:35,040
actually used by most of the api gateway

01:29:33,760 --> 01:29:38,080
vendors anyway

01:29:35,040 --> 01:29:40,000
uh so you you're getting to use

01:29:38,080 --> 01:29:41,760
you'll get the most best performance by

01:29:40,000 --> 01:29:44,080
using nginx in this way

01:29:41,760 --> 01:29:45,199
in your apis but we can go into more

01:29:44,080 --> 01:29:47,120
detail in the booth so

01:29:45,199 --> 01:29:48,560
i don't want to overrun thanks everyone

01:29:47,120 --> 01:29:53,840
for uh

01:29:48,560 --> 01:29:53,840

YouTube URL: https://www.youtube.com/watch?v=WWWPXyw3kNw


