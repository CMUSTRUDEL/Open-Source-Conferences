Title: Peel Back the Layers of Your Enterprise with the NEW Security Onion 2.0! - Doug Burks
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Doug Burks, Security Onion Solutions, LLC
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: Security Onion is a free and open source platform for threat hunting, enterprise security monitoring, and log management. We've got a new container-based platform that is more flexible, more powerful, and more scalable than ever before. Join us to see how you can peel back the layers of your enterprise and make your adversaries cry!
Captions: 
	00:00:04,960 --> 00:00:08,639
all right well thank you very much

00:00:06,640 --> 00:00:10,480
uh i really do appreciate the

00:00:08,639 --> 00:00:12,320
opportunity to be here appreciate the

00:00:10,480 --> 00:00:14,160
fine folks at all things open putting

00:00:12,320 --> 00:00:16,240
together this great conference

00:00:14,160 --> 00:00:17,760
really enjoyed every time that i've been

00:00:16,240 --> 00:00:19,680
a part of the conference in the past and

00:00:17,760 --> 00:00:21,520
looking forward to another great event

00:00:19,680 --> 00:00:23,519
today

00:00:21,520 --> 00:00:27,119
so we are going to be talking about the

00:00:23,519 --> 00:00:29,199
new security onion 2

00:00:27,119 --> 00:00:31,279
but first i want to kind of take a step

00:00:29,199 --> 00:00:32,640
back and i want to talk about the

00:00:31,279 --> 00:00:35,200
bicycle

00:00:32,640 --> 00:00:35,680
you may ask yourself why is he talking

00:00:35,200 --> 00:00:37,360
about

00:00:35,680 --> 00:00:39,200
bicycles but trust me i'm going

00:00:37,360 --> 00:00:40,640
somewhere with this so i want you to

00:00:39,200 --> 00:00:44,000
close your eyes

00:00:40,640 --> 00:00:46,480
and i want you to think about your first

00:00:44,000 --> 00:00:47,280
bicycle you know that might have been a

00:00:46,480 --> 00:00:49,600
little

00:00:47,280 --> 00:00:52,000
12-inch bike with training wheels it

00:00:49,600 --> 00:00:54,960
might have been a 20-inch bmx bike or

00:00:52,000 --> 00:00:56,640
freestyle bike um but i want you to

00:00:54,960 --> 00:00:58,640
think about that feeling you know when

00:00:56,640 --> 00:01:01,280
you were a kid you thought you could run

00:00:58,640 --> 00:01:02,800
really fast but then when you learned to

00:01:01,280 --> 00:01:04,479
ride a bike

00:01:02,800 --> 00:01:05,840
all of a sudden you could you could ride

00:01:04,479 --> 00:01:07,439
with the wind

00:01:05,840 --> 00:01:09,439
all of a sudden you could go much

00:01:07,439 --> 00:01:11,439
further and much faster

00:01:09,439 --> 00:01:12,720
than your little legs could take you

00:01:11,439 --> 00:01:14,400
previously

00:01:12,720 --> 00:01:16,880
and then maybe at some point in the

00:01:14,400 --> 00:01:19,360
future maybe you upgraded to

00:01:16,880 --> 00:01:20,320
a 10-speed bike or maybe a mountain bike

00:01:19,360 --> 00:01:23,040
with a whole lot

00:01:20,320 --> 00:01:23,680
more gears on it and those gears helped

00:01:23,040 --> 00:01:26,960
you to

00:01:23,680 --> 00:01:30,079
climb hills and to be able to go

00:01:26,960 --> 00:01:30,560
even further and even faster than you

00:01:30,079 --> 00:01:33,920
could

00:01:30,560 --> 00:01:36,000
have previously and so i want you to

00:01:33,920 --> 00:01:39,280
kind of think about

00:01:36,000 --> 00:01:42,079
your experience as a bicycle writer

00:01:39,280 --> 00:01:43,520
and uh i'm going somewhere with that i

00:01:42,079 --> 00:01:46,479
promise

00:01:43,520 --> 00:01:48,960
so the fine folks at scientific american

00:01:46,479 --> 00:01:51,600
way back in 1973

00:01:48,960 --> 00:01:52,799
they wrote this great article on the

00:01:51,600 --> 00:01:56,079
bicycle

00:01:52,799 --> 00:01:59,680
and specifically they talked about this

00:01:56,079 --> 00:02:02,079
graph that you see here of the cost of

00:01:59,680 --> 00:02:02,880
transport which is the the calories per

00:02:02,079 --> 00:02:05,920
gram

00:02:02,880 --> 00:02:06,799
per kilometer and comparing that to the

00:02:05,920 --> 00:02:10,720
body weight

00:02:06,799 --> 00:02:13,040
of certain animal species in kilograms

00:02:10,720 --> 00:02:15,040
and so what you see here is that you

00:02:13,040 --> 00:02:17,599
know way up here at the top you have

00:02:15,040 --> 00:02:19,840
mice which have a really high cost of

00:02:17,599 --> 00:02:21,680
transport it's really expensive for them

00:02:19,840 --> 00:02:24,000
to move themselves around

00:02:21,680 --> 00:02:25,440
even though mice are actually pretty

00:02:24,000 --> 00:02:28,000
small

00:02:25,440 --> 00:02:29,200
and if as you go further down this graph

00:02:28,000 --> 00:02:32,400
you get into things like

00:02:29,200 --> 00:02:33,920
dogs dogs are pretty efficient sheep are

00:02:32,400 --> 00:02:36,879
even more efficient

00:02:33,920 --> 00:02:37,760
and then you get into mankind we're more

00:02:36,879 --> 00:02:40,879
efficient than

00:02:37,760 --> 00:02:43,519
sheep or dogs we're doing okay but yet

00:02:40,879 --> 00:02:44,800
you know horses still beat us out pretty

00:02:43,519 --> 00:02:48,080
good

00:02:44,800 --> 00:02:49,760
and salmon look how efficient salmon is

00:02:48,080 --> 00:02:51,360
uh you know compared to their body

00:02:49,760 --> 00:02:54,239
weight

00:02:51,360 --> 00:02:56,959
but the point of this chart is not

00:02:54,239 --> 00:03:00,239
really this stuff up here so much

00:02:56,959 --> 00:03:03,120
more specifically down here man on

00:03:00,239 --> 00:03:04,560
bicycle and if you look at that that

00:03:03,120 --> 00:03:07,840
what that's telling you

00:03:04,560 --> 00:03:12,000
is that man on bicycle is incredibly

00:03:07,840 --> 00:03:15,519
efficient so man as a tool builder

00:03:12,000 --> 00:03:18,159
was able to build this tool which was

00:03:15,519 --> 00:03:18,640
lightweight and efficient and helped us

00:03:18,159 --> 00:03:20,959
to go

00:03:18,640 --> 00:03:22,560
further and faster than we could have

00:03:20,959 --> 00:03:24,799
otherwise

00:03:22,560 --> 00:03:26,560
and even compared to things like jet

00:03:24,799 --> 00:03:29,599
transport and automobiles

00:03:26,560 --> 00:03:34,000
and fighter planes and things like that

00:03:29,599 --> 00:03:35,599
the bicycle is incredibly efficient

00:03:34,000 --> 00:03:38,080
so i think this is a really great

00:03:35,599 --> 00:03:39,280
analogy and

00:03:38,080 --> 00:03:41,440
this other guy thought it was a great

00:03:39,280 --> 00:03:43,360
analogy too and his name was steve jobs

00:03:41,440 --> 00:03:45,599
and years ago he co-founded a company

00:03:43,360 --> 00:03:47,680
called apple you may have heard of it

00:03:45,599 --> 00:03:49,599
and he had this great quote way back in

00:03:47,680 --> 00:03:52,720
1980 when he said

00:03:49,599 --> 00:03:55,760
when we invented the personal computer

00:03:52,720 --> 00:03:58,799
we created a new kind of bicycle

00:03:55,760 --> 00:04:00,879
a new man-machine partnership

00:03:58,799 --> 00:04:02,799
and i think that's a great quote and

00:04:00,879 --> 00:04:04,959
they used that quote

00:04:02,799 --> 00:04:06,560
uh to great success in a marketing

00:04:04,959 --> 00:04:08,000
campaign where they said that apple

00:04:06,560 --> 00:04:11,280
computer is really kind of a

00:04:08,000 --> 00:04:14,000
bicycle for the mind now instead of a

00:04:11,280 --> 00:04:16,079
bicycle really kind of helping your legs

00:04:14,000 --> 00:04:17,359
you've got a bicycle that's helping that

00:04:16,079 --> 00:04:20,799
muscle that's

00:04:17,359 --> 00:04:22,560
inside of our head so we can take an

00:04:20,799 --> 00:04:25,360
idea that's in our brain

00:04:22,560 --> 00:04:28,080
and we can use this sort of

00:04:25,360 --> 00:04:30,479
technological bicycle to take that idea

00:04:28,080 --> 00:04:32,000
even further even faster than we could

00:04:30,479 --> 00:04:33,919
before

00:04:32,000 --> 00:04:35,919
and so they had this great marketing

00:04:33,919 --> 00:04:37,440
campaign that showed a guy on a bicycle

00:04:35,919 --> 00:04:38,240
with kind of an apple computer on the

00:04:37,440 --> 00:04:40,800
back

00:04:38,240 --> 00:04:41,759
a bicycle for the mind so i think that's

00:04:40,800 --> 00:04:44,880
a great

00:04:41,759 --> 00:04:46,479
kind of mental image for you know what

00:04:44,880 --> 00:04:48,080
we're trying to do

00:04:46,479 --> 00:04:50,400
in the computer industry and

00:04:48,080 --> 00:04:51,040
specifically you know what we're trying

00:04:50,400 --> 00:04:53,680
to do

00:04:51,040 --> 00:04:54,479
in the cyber security industry and so

00:04:53,680 --> 00:04:57,040
that logo

00:04:54,479 --> 00:04:58,960
actually kind of reminds me of this logo

00:04:57,040 --> 00:05:02,080
which is our brand new logo

00:04:58,960 --> 00:05:03,759
for security onion solutions so it kind

00:05:02,080 --> 00:05:06,080
of looks like a bike you know this these

00:05:03,759 --> 00:05:08,240
concentric circles kind of look like you

00:05:06,080 --> 00:05:09,520
pedaling those pedals around and around

00:05:08,240 --> 00:05:11,759
and around

00:05:09,520 --> 00:05:13,440
and of course this this o in the middle

00:05:11,759 --> 00:05:16,400
is really kind of symbolizing an

00:05:13,440 --> 00:05:17,039
onion which is uh where the the free and

00:05:16,400 --> 00:05:19,199
open source

00:05:17,039 --> 00:05:21,120
platform originally started which i'll

00:05:19,199 --> 00:05:22,960
talk about in a minute

00:05:21,120 --> 00:05:25,199
but the idea is that we want to peel

00:05:22,960 --> 00:05:28,400
back the layers of our enterprises

00:05:25,199 --> 00:05:30,720
and make our adversaries cry and

00:05:28,400 --> 00:05:33,360
there's lots of other subtle easter eggs

00:05:30,720 --> 00:05:35,520
hidden in this new logo design

00:05:33,360 --> 00:05:36,720
one of them is kind of the the stem of

00:05:35,520 --> 00:05:38,880
the onion is blue

00:05:36,720 --> 00:05:40,400
for blue teamers we're we're defenders

00:05:38,880 --> 00:05:42,240
we're defending against those red

00:05:40,400 --> 00:05:44,800
teamers those adversaries that are

00:05:42,240 --> 00:05:47,199
trying to break into our networks

00:05:44,800 --> 00:05:48,000
and then in addition to this being an

00:05:47,199 --> 00:05:50,000
onion

00:05:48,000 --> 00:05:52,479
you know if you look closely including

00:05:50,000 --> 00:05:54,479
the stem this also kind of makes out an

00:05:52,479 --> 00:05:56,560
s so you kind of kind of got an s

00:05:54,479 --> 00:05:58,639
overlaid on top of the o

00:05:56,560 --> 00:06:01,840
so there's lots of little details that

00:05:58,639 --> 00:06:04,960
we packed into this new logo design

00:06:01,840 --> 00:06:06,800
which is really sort of just a a glimmer

00:06:04,960 --> 00:06:09,039
of an idea of how much

00:06:06,800 --> 00:06:10,000
detail and how much thought we've put

00:06:09,039 --> 00:06:12,560
into

00:06:10,000 --> 00:06:15,039
our new software platform which is what

00:06:12,560 --> 00:06:17,120
we're going to talk about today

00:06:15,039 --> 00:06:19,039
so that's our new kind of company logo

00:06:17,120 --> 00:06:20,720
we also have a new logo for the free and

00:06:19,039 --> 00:06:22,639
open source software which you'll see in

00:06:20,720 --> 00:06:26,160
just a few minutes

00:06:22,639 --> 00:06:27,199
and you know we will talk about those

00:06:26,160 --> 00:06:30,800
logos as we

00:06:27,199 --> 00:06:34,080
as we go on so a brief history

00:06:30,800 --> 00:06:36,080
of security onion way back in 2008

00:06:34,080 --> 00:06:38,880
i started building security onion

00:06:36,080 --> 00:06:42,720
because i really saw this problem

00:06:38,880 --> 00:06:45,680
first and foremost you know back in 2008

00:06:42,720 --> 00:06:46,560
uh we as defenders were getting our

00:06:45,680 --> 00:06:49,919
butts kicked

00:06:46,560 --> 00:06:52,880
by adversaries we were

00:06:49,919 --> 00:06:55,120
outmanned and outgunned and we had every

00:06:52,880 --> 00:06:57,520
single disadvantage there was

00:06:55,120 --> 00:06:58,319
in terms of of trying to keep our

00:06:57,520 --> 00:07:01,599
networks

00:06:58,319 --> 00:07:03,599
secure and one of the many

00:07:01,599 --> 00:07:04,960
kind of disadvantages that we had was

00:07:03,599 --> 00:07:06,400
that

00:07:04,960 --> 00:07:08,960
you know back then there was this

00:07:06,400 --> 00:07:10,800
toolkit called backtrack linux which is

00:07:08,960 --> 00:07:13,039
now called kali linux

00:07:10,800 --> 00:07:15,440
and that was kind of the attacker's tool

00:07:13,039 --> 00:07:16,720
set already compiled already configured

00:07:15,440 --> 00:07:19,120
ready to go

00:07:16,720 --> 00:07:20,720
and attackers could freely download that

00:07:19,120 --> 00:07:23,360
and be up and running in just a few

00:07:20,720 --> 00:07:25,199
minutes with all their favorite tools

00:07:23,360 --> 00:07:27,039
but yet we as defenders didn't really

00:07:25,199 --> 00:07:29,840
have anything like that

00:07:27,039 --> 00:07:31,199
we had some individual open source

00:07:29,840 --> 00:07:34,080
components

00:07:31,199 --> 00:07:36,720
but no real overarching platform that

00:07:34,080 --> 00:07:40,319
put those components together

00:07:36,720 --> 00:07:41,919
in a coherent fashion and this really

00:07:40,319 --> 00:07:44,639
kind of hit home for me

00:07:41,919 --> 00:07:46,479
uh in about 2009-2000 i was actually

00:07:44,639 --> 00:07:50,080
working a pretty major

00:07:46,479 --> 00:07:52,240
security incident and i realized very

00:07:50,080 --> 00:07:54,400
early on in the investigation

00:07:52,240 --> 00:07:56,319
that the attacker was actually using

00:07:54,400 --> 00:07:59,759
backtrack linux and so

00:07:56,319 --> 00:08:01,680
you know here i was i was trying to

00:07:59,759 --> 00:08:02,960
string together some open source

00:08:01,680 --> 00:08:05,280
components and

00:08:02,960 --> 00:08:06,240
i had a few commercial security

00:08:05,280 --> 00:08:08,240
appliances

00:08:06,240 --> 00:08:10,800
and i was doing the best that i could

00:08:08,240 --> 00:08:13,360
but still at the end of the day

00:08:10,800 --> 00:08:15,039
it was so much easier for that bad guy

00:08:13,360 --> 00:08:18,560
to break into my network

00:08:15,039 --> 00:08:20,240
than it was for me to try to monitor my

00:08:18,560 --> 00:08:21,440
own network and defend against those

00:08:20,240 --> 00:08:24,479
adversaries

00:08:21,440 --> 00:08:26,800
that's kind of fundamentally unjust

00:08:24,479 --> 00:08:28,479
and so it became clear to me that you

00:08:26,800 --> 00:08:31,599
know it was kind of my mission in life

00:08:28,479 --> 00:08:34,320
to try to rebalance that equation

00:08:31,599 --> 00:08:36,800
to try to give defenders a few more

00:08:34,320 --> 00:08:38,880
advantages over the adversaries

00:08:36,800 --> 00:08:41,200
so that was the idea that really kind of

00:08:38,880 --> 00:08:43,120
started off in 2008

00:08:41,200 --> 00:08:45,680
uh it took several months to build that

00:08:43,120 --> 00:08:47,440
first version to identify the the proper

00:08:45,680 --> 00:08:48,880
open source components and to kind of

00:08:47,440 --> 00:08:51,600
glue them together and

00:08:48,880 --> 00:08:52,240
make it easy to use and so that first

00:08:51,600 --> 00:08:56,399
version

00:08:52,240 --> 00:08:58,880
came out in 2009 and over the years

00:08:56,399 --> 00:09:00,640
we continued to make improvements to

00:08:58,880 --> 00:09:02,240
security onion as a free and open source

00:09:00,640 --> 00:09:04,640
platform

00:09:02,240 --> 00:09:06,959
and the the worldwide security onion

00:09:04,640 --> 00:09:09,360
community grew and really kind of took

00:09:06,959 --> 00:09:11,519
off uh we're now over

00:09:09,360 --> 00:09:13,040
1 million downloads our software is

00:09:11,519 --> 00:09:14,800
being used in

00:09:13,040 --> 00:09:16,080
just about every corner of the globe

00:09:14,800 --> 00:09:18,640
that there is

00:09:16,080 --> 00:09:20,720
by defenders who you know are trying

00:09:18,640 --> 00:09:23,760
their best to defend their networks

00:09:20,720 --> 00:09:26,000
and are are coming to rely on security

00:09:23,760 --> 00:09:28,480
onion to do that

00:09:26,000 --> 00:09:30,080
in 2014 i really kind of made this my

00:09:28,480 --> 00:09:32,240
full-time job so i

00:09:30,080 --> 00:09:33,680
previously i had a great job working for

00:09:32,240 --> 00:09:35,120
mandiant which then got acquired by

00:09:33,680 --> 00:09:38,560
fireeye

00:09:35,120 --> 00:09:41,839
but i i knew that security onion was uh

00:09:38,560 --> 00:09:42,640
really kind of needing some full-time

00:09:41,839 --> 00:09:44,399
attention

00:09:42,640 --> 00:09:46,880
uh all of these folks that were using it

00:09:44,399 --> 00:09:48,720
all around the world were asking for

00:09:46,880 --> 00:09:50,640
things like training and professional

00:09:48,720 --> 00:09:53,519
services and hardware appliances

00:09:50,640 --> 00:09:55,760
so in 2014 i started securing the

00:09:53,519 --> 00:09:57,760
solutions as the company behind that

00:09:55,760 --> 00:09:59,360
free and open source platform

00:09:57,760 --> 00:10:01,680
and we've been steadily growing as a

00:09:59,360 --> 00:10:03,839
company ever since then

00:10:01,680 --> 00:10:06,959
and so the the next big kind of turning

00:10:03,839 --> 00:10:09,120
point in our history was in 2018

00:10:06,959 --> 00:10:11,200
uh and this was really kind of the the

00:10:09,120 --> 00:10:12,720
10-year anniversary of the security

00:10:11,200 --> 00:10:15,440
onion project

00:10:12,720 --> 00:10:16,240
and it made sense to say okay what are

00:10:15,440 --> 00:10:18,959
we going to do

00:10:16,240 --> 00:10:20,000
for the next 10 years what is the the

00:10:18,959 --> 00:10:23,040
next generation

00:10:20,000 --> 00:10:25,519
platform look like so

00:10:23,040 --> 00:10:27,279
i hired a product manager mike reeves

00:10:25,519 --> 00:10:29,839
and the very first conversation that we

00:10:27,279 --> 00:10:33,120
had was about security onion 2.

00:10:29,839 --> 00:10:34,640
what's it actually going to look like

00:10:33,120 --> 00:10:37,040
what are the things that we need to

00:10:34,640 --> 00:10:38,160
change about the existing security onion

00:10:37,040 --> 00:10:41,760
platform

00:10:38,160 --> 00:10:44,240
to make it stronger faster more capable

00:10:41,760 --> 00:10:45,760
more scalable and to make it that much

00:10:44,240 --> 00:10:49,279
better of a bicycle

00:10:45,760 --> 00:10:51,920
to enable defenders to defend themselves

00:10:49,279 --> 00:10:53,920
so we started that discussion in 2018

00:10:51,920 --> 00:10:54,880
started building that new platform that

00:10:53,920 --> 00:10:58,640
year

00:10:54,880 --> 00:11:01,279
and in 2019 we because we believe

00:10:58,640 --> 00:11:02,959
in release early release often that's a

00:11:01,279 --> 00:11:04,800
kind of a common mantra that you hear in

00:11:02,959 --> 00:11:07,680
open source projects

00:11:04,800 --> 00:11:09,920
we released the first alpha version of

00:11:07,680 --> 00:11:10,240
security onion 2 because it's important

00:11:09,920 --> 00:11:12,240
to

00:11:10,240 --> 00:11:14,880
us to make sure that we're putting

00:11:12,240 --> 00:11:16,959
things out there getting folks to

00:11:14,880 --> 00:11:18,640
poke it and prod it and give us feedback

00:11:16,959 --> 00:11:19,680
so that we can then incorporate that

00:11:18,640 --> 00:11:23,680
feedback

00:11:19,680 --> 00:11:26,560
into future iterations of the project

00:11:23,680 --> 00:11:28,079
so we did that in 2019 and then this

00:11:26,560 --> 00:11:30,880
year 2020

00:11:28,079 --> 00:11:32,959
we reached the release candidate phase

00:11:30,880 --> 00:11:37,680
so in 2020 we released

00:11:32,959 --> 00:11:40,880
our c1 rc2 and rc3

00:11:37,680 --> 00:11:42,880
and so this slide says you know a brief

00:11:40,880 --> 00:11:44,480
history of security onion but i'd

00:11:42,880 --> 00:11:45,680
actually actually like to change that

00:11:44,480 --> 00:11:49,440
slide and

00:11:45,680 --> 00:11:51,760
uh we made history on this past friday

00:11:49,440 --> 00:11:52,880
because we actually released security

00:11:51,760 --> 00:11:55,360
onion 2.

00:11:52,880 --> 00:11:56,880
at our annual security onion conference

00:11:55,360 --> 00:11:58,079
we made the big announcement that

00:11:56,880 --> 00:12:01,760
security onion 2

00:11:58,079 --> 00:12:04,000
is now generally available and so

00:12:01,760 --> 00:12:05,680
you know if you look at that that's uh

00:12:04,000 --> 00:12:08,240
really kind of three years

00:12:05,680 --> 00:12:10,000
of blood sweat and tears that went into

00:12:08,240 --> 00:12:12,320
this particular platform

00:12:10,000 --> 00:12:14,399
that all culminated in that release

00:12:12,320 --> 00:12:17,040
announcement last friday and so we're

00:12:14,399 --> 00:12:19,760
we're happy to uh talk about that here

00:12:17,040 --> 00:12:23,120
today and kind of introduce it to

00:12:19,760 --> 00:12:23,120
another new audience here

00:12:23,680 --> 00:12:27,279
so let's kind of talk about some of the

00:12:25,600 --> 00:12:30,480
challenges of this

00:12:27,279 --> 00:12:32,639
new security onion 2 platform

00:12:30,480 --> 00:12:34,079
so first and foremost you know we want

00:12:32,639 --> 00:12:37,120
folks to be able to

00:12:34,079 --> 00:12:39,360
easily download security onion

00:12:37,120 --> 00:12:40,240
and spin it up maybe in a virtual

00:12:39,360 --> 00:12:42,800
machine

00:12:40,240 --> 00:12:44,320
and get their feet wet just very quickly

00:12:42,800 --> 00:12:45,920
and easily without

00:12:44,320 --> 00:12:48,160
without too much fighting with the

00:12:45,920 --> 00:12:49,200
platform just make it nice and

00:12:48,160 --> 00:12:52,000
streamlined

00:12:49,200 --> 00:12:53,920
maybe that's trying it out as a

00:12:52,000 --> 00:12:55,200
practitioner maybe that's

00:12:53,920 --> 00:12:57,760
you know you're a student and you're

00:12:55,200 --> 00:12:59,680
using it for a college cyber security

00:12:57,760 --> 00:13:01,839
class whatever the case may be

00:12:59,680 --> 00:13:03,760
we want you to be able to have a really

00:13:01,839 --> 00:13:05,360
good first experience

00:13:03,760 --> 00:13:07,120
with security on you and that's really

00:13:05,360 --> 00:13:08,639
easy because

00:13:07,120 --> 00:13:10,639
you know if you're talking about running

00:13:08,639 --> 00:13:12,560
these kind of components in a small

00:13:10,639 --> 00:13:14,480
virtual machine

00:13:12,560 --> 00:13:16,399
scalability is not an issue at that

00:13:14,480 --> 00:13:18,320
point in time so that's pretty easy

00:13:16,399 --> 00:13:20,160
we've been able to do that for

00:13:18,320 --> 00:13:24,560
uh ever since the beginning of the

00:13:20,160 --> 00:13:26,880
security onion project way back in 2008

00:13:24,560 --> 00:13:28,480
but what's more difficult is really that

00:13:26,880 --> 00:13:30,720
second bullet point which is

00:13:28,480 --> 00:13:32,079
how do you build a platform that's

00:13:30,720 --> 00:13:34,639
scalable

00:13:32,079 --> 00:13:35,680
so that if you are trying to defend an

00:13:34,639 --> 00:13:38,959
enterprise

00:13:35,680 --> 00:13:41,120
with offices around the world and

00:13:38,959 --> 00:13:42,639
you might need to have network sensors

00:13:41,120 --> 00:13:43,360
at each of those offices so now we're

00:13:42,639 --> 00:13:46,959
talking about

00:13:43,360 --> 00:13:49,839
thousands of sensors and maybe

00:13:46,959 --> 00:13:51,680
10 000 devices that you're monitoring on

00:13:49,839 --> 00:13:54,320
that enterprise network

00:13:51,680 --> 00:13:55,360
well going to that opposite end of the

00:13:54,320 --> 00:13:58,079
spectrum

00:13:55,360 --> 00:13:58,480
is hard it's more difficult than that

00:13:58,079 --> 00:14:01,680
first

00:13:58,480 --> 00:14:05,040
use case of a small virtual machine

00:14:01,680 --> 00:14:07,120
now what's also hard is how do you

00:14:05,040 --> 00:14:08,399
especially for that enterprise setting

00:14:07,120 --> 00:14:11,760
you know those enterprise

00:14:08,399 --> 00:14:13,760
users want to be able to customize

00:14:11,760 --> 00:14:15,600
that deployment they want to be able to

00:14:13,760 --> 00:14:17,040
integrate it with other systems in their

00:14:15,600 --> 00:14:19,440
enterprise

00:14:17,040 --> 00:14:20,160
but at the same time we want to keep

00:14:19,440 --> 00:14:23,519
them from

00:14:20,160 --> 00:14:26,720
shooting themselves in the foot right so

00:14:23,519 --> 00:14:28,880
how do you how do you walk that delicate

00:14:26,720 --> 00:14:30,000
line that what's the delicate balancing

00:14:28,880 --> 00:14:32,320
act between

00:14:30,000 --> 00:14:35,760
allowing customization but preventing

00:14:32,320 --> 00:14:37,440
folks from breaking the system

00:14:35,760 --> 00:14:39,360
and then the next challenge that we had

00:14:37,440 --> 00:14:41,839
was we have a lot of

00:14:39,360 --> 00:14:43,760
military customers a lot of folks are

00:14:41,839 --> 00:14:46,160
monitoring military networks

00:14:43,760 --> 00:14:47,440
using our software and a lot of those

00:14:46,160 --> 00:14:50,000
military networks

00:14:47,440 --> 00:14:51,199
are air-gapped they don't have internet

00:14:50,000 --> 00:14:53,440
access

00:14:51,199 --> 00:14:56,160
and so how do you how do you do all of

00:14:53,440 --> 00:14:59,120
these things that we talked about above

00:14:56,160 --> 00:15:01,360
without internet access and how do you

00:14:59,120 --> 00:15:02,480
update that platform so when we come out

00:15:01,360 --> 00:15:04,480
with a new version

00:15:02,480 --> 00:15:06,240
how do you actually get those updates

00:15:04,480 --> 00:15:09,600
across that air gap

00:15:06,240 --> 00:15:10,320
in a secure fashion and then finally how

00:15:09,600 --> 00:15:13,519
do you do

00:15:10,320 --> 00:15:14,240
all of this in the easiest way possible

00:15:13,519 --> 00:15:16,399
which is

00:15:14,240 --> 00:15:18,160
either using our iso image or if you

00:15:16,399 --> 00:15:22,560
don't want to use our iso image

00:15:18,160 --> 00:15:24,560
simply running a very simple bash script

00:15:22,560 --> 00:15:26,240
and that's where kind of all these

00:15:24,560 --> 00:15:29,680
challenges come together

00:15:26,240 --> 00:15:31,440
it's really kind of uh you know

00:15:29,680 --> 00:15:33,120
adding all these things together each of

00:15:31,440 --> 00:15:34,800
them has their own complexity but when

00:15:33,120 --> 00:15:36,160
you try to put it all together and make

00:15:34,800 --> 00:15:38,839
it simple

00:15:36,160 --> 00:15:41,040
that's an even higher level of

00:15:38,839 --> 00:15:44,320
complexity

00:15:41,040 --> 00:15:46,240
so let's look at the numbers i kind of

00:15:44,320 --> 00:15:47,680
talked before about the history of

00:15:46,240 --> 00:15:50,320
security onion 2.

00:15:47,680 --> 00:15:51,600
we started talking about it in 2018 we

00:15:50,320 --> 00:15:54,000
started off with some tech

00:15:51,600 --> 00:15:56,160
preview releases just so folks could

00:15:54,000 --> 00:15:57,920
kind of see what it looks like

00:15:56,160 --> 00:15:59,680
but we made lots of disclaimers at the

00:15:57,920 --> 00:16:00,079
time of you know things are going to

00:15:59,680 --> 00:16:02,480
change

00:16:00,079 --> 00:16:04,399
drastically but we want to release early

00:16:02,480 --> 00:16:05,360
release often we want you to poke at it

00:16:04,399 --> 00:16:07,199
prod at it

00:16:05,360 --> 00:16:09,920
and give us your feedback so we can

00:16:07,199 --> 00:16:12,480
incorporate that feedback

00:16:09,920 --> 00:16:13,920
so then we then moved into the alpha

00:16:12,480 --> 00:16:16,240
phase we did four of those

00:16:13,920 --> 00:16:19,040
alpha releases we moved into beta phase

00:16:16,240 --> 00:16:21,680
we did beta 1 beta 2 beta 3

00:16:19,040 --> 00:16:24,560
and as i mentioned previously we did rc1

00:16:21,680 --> 00:16:27,600
rc2 and rc3 so you can see here we did

00:16:24,560 --> 00:16:30,639
lots of releases along the way

00:16:27,600 --> 00:16:34,079
again trying to solicit that feedback

00:16:30,639 --> 00:16:36,160
from the community so that we could

00:16:34,079 --> 00:16:38,959
bring that feedback in as early on as

00:16:36,160 --> 00:16:41,040
possible in the development life cycle

00:16:38,959 --> 00:16:43,040
and make sure that when we do finally

00:16:41,040 --> 00:16:45,759
reach the release date

00:16:43,040 --> 00:16:48,399
that things are going to be in as good

00:16:45,759 --> 00:16:50,480
shape as possible

00:16:48,399 --> 00:16:52,720
so when you look at that entire history

00:16:50,480 --> 00:16:53,120
of security onion 2 you're talking about

00:16:52,720 --> 00:16:56,399
over

00:16:53,120 --> 00:16:58,240
34 months of development work

00:16:56,399 --> 00:17:00,800
if you look at our github repo it's over

00:16:58,240 --> 00:17:04,079
5 000 commits

00:17:00,800 --> 00:17:07,280
so this is a massive undertaking uh

00:17:04,079 --> 00:17:09,839
and you know we're very proud to

00:17:07,280 --> 00:17:11,760
have it behind us to be able to kind of

00:17:09,839 --> 00:17:13,760
put the bow on it and put it out there

00:17:11,760 --> 00:17:16,079
and release it to the community

00:17:13,760 --> 00:17:19,839
uh we're we're really excited to have it

00:17:16,079 --> 00:17:19,839
out there after doing all of that work

00:17:20,559 --> 00:17:24,160
so after talking about the history of

00:17:23,679 --> 00:17:27,839
this

00:17:24,160 --> 00:17:29,760
new security union 2 platform

00:17:27,839 --> 00:17:31,520
you know now your next question is okay

00:17:29,760 --> 00:17:34,720
well how do i install

00:17:31,520 --> 00:17:37,520
security onion your first option

00:17:34,720 --> 00:17:38,799
is you can download our security onion 2

00:17:37,520 --> 00:17:41,440
iso image

00:17:38,799 --> 00:17:43,360
so assuming that you've done an

00:17:41,440 --> 00:17:44,880
installation of any modern linux

00:17:43,360 --> 00:17:46,480
distribution before

00:17:44,880 --> 00:17:49,120
this is going to be pretty simple for

00:17:46,480 --> 00:17:52,000
you our iso image is based on

00:17:49,120 --> 00:17:52,559
cenos7 and so if you're familiar with

00:17:52,000 --> 00:17:55,360
that

00:17:52,559 --> 00:17:56,000
uh it's going to be very much identical

00:17:55,360 --> 00:17:57,200
although

00:17:56,000 --> 00:17:59,120
it's actually going to be a little bit

00:17:57,200 --> 00:18:00,720
easier because we've got an automated

00:17:59,120 --> 00:18:03,840
installation

00:18:00,720 --> 00:18:04,720
and so basically all you do is give it a

00:18:03,840 --> 00:18:06,400
username

00:18:04,720 --> 00:18:07,919
you set your password and confirm your

00:18:06,400 --> 00:18:09,039
password and it does all of the

00:18:07,919 --> 00:18:12,240
partitioning for you

00:18:09,039 --> 00:18:14,880
automatically and gets the system

00:18:12,240 --> 00:18:15,760
set up very quickly and very easily now

00:18:14,880 --> 00:18:18,559
if you don't

00:18:15,760 --> 00:18:19,280
want to use our iso image that's fine

00:18:18,559 --> 00:18:22,320
too

00:18:19,280 --> 00:18:26,400
you can install standard cenos7

00:18:22,320 --> 00:18:28,960
or you can install ubuntu 1804

00:18:26,400 --> 00:18:30,559
and then run our installer on top of

00:18:28,960 --> 00:18:32,400
either one of those

00:18:30,559 --> 00:18:34,559
and that's what i mentioned before about

00:18:32,400 --> 00:18:37,760
how do you do all of those complex

00:18:34,559 --> 00:18:38,640
challenges while still making this easy

00:18:37,760 --> 00:18:42,240
to install

00:18:38,640 --> 00:18:44,400
via a simple shell script and that's

00:18:42,240 --> 00:18:46,960
how that works if you're to if you were

00:18:44,400 --> 00:18:48,080
to install on top of cenos7 or ubuntu

00:18:46,960 --> 00:18:49,760
00:18:48,080 --> 00:18:51,520
you'd just be running a shell script

00:18:49,760 --> 00:18:53,280
from our github repo and it would

00:18:51,520 --> 00:18:56,400
download all the components

00:18:53,280 --> 00:18:58,400
and install them appropriately now how

00:18:56,400 --> 00:19:00,240
do we actually accomplish that

00:18:58,400 --> 00:19:01,679
because if you're familiar with linux

00:19:00,240 --> 00:19:04,400
distributions uh

00:19:01,679 --> 00:19:04,880
you know that there's not really a a

00:19:04,400 --> 00:19:08,160
simple

00:19:04,880 --> 00:19:08,559
trivial way to really kind of deal with

00:19:08,160 --> 00:19:12,480
both

00:19:08,559 --> 00:19:15,039
cinos 7 and ubuntu 1804 at the same time

00:19:12,480 --> 00:19:16,080
of course nowadays we have docker

00:19:15,039 --> 00:19:17,760
containers

00:19:16,080 --> 00:19:19,600
and that's exactly what this new

00:19:17,760 --> 00:19:21,600
platform is based on

00:19:19,600 --> 00:19:24,160
so we've containerized the entire

00:19:21,600 --> 00:19:26,320
platform all of our major components

00:19:24,160 --> 00:19:28,720
have their own docker containers and

00:19:26,320 --> 00:19:31,440
that's what enables us to embrace

00:19:28,720 --> 00:19:33,120
not just ubuntu as we had in the past

00:19:31,440 --> 00:19:33,840
with the original version of security

00:19:33,120 --> 00:19:37,280
onion

00:19:33,840 --> 00:19:38,000
but also cenos and in the future

00:19:37,280 --> 00:19:40,400
potentially

00:19:38,000 --> 00:19:42,080
other linux distributions as well and

00:19:40,400 --> 00:19:43,600
that's really kind of the brilliant

00:19:42,080 --> 00:19:46,160
thing about containers

00:19:43,600 --> 00:19:47,840
is it's this nice abstraction layer

00:19:46,160 --> 00:19:51,120
which makes it easy to run

00:19:47,840 --> 00:19:53,679
on different linux distributions

00:19:51,120 --> 00:19:54,400
in addition to that that also means that

00:19:53,679 --> 00:19:57,520
we get some

00:19:54,400 --> 00:19:58,880
nice security side benefits because

00:19:57,520 --> 00:20:01,440
those containers

00:19:58,880 --> 00:20:02,320
have a little bit stronger isolation

00:20:01,440 --> 00:20:04,559
from each other

00:20:02,320 --> 00:20:05,520
and from the host operating system than

00:20:04,559 --> 00:20:09,520
you would normally

00:20:05,520 --> 00:20:10,159
have with a traditional rpm package or

00:20:09,520 --> 00:20:13,360
traditional

00:20:10,159 --> 00:20:13,919
ubuntu debian package so we get some

00:20:13,360 --> 00:20:16,520
nice

00:20:13,919 --> 00:20:18,960
security benefits from that

00:20:16,520 --> 00:20:20,960
containerization

00:20:18,960 --> 00:20:22,320
now those containers are actually

00:20:20,960 --> 00:20:24,240
orchestrated using

00:20:22,320 --> 00:20:26,559
salt stack and that's kind of the other

00:20:24,240 --> 00:20:29,600
piece of the puzzle in terms of

00:20:26,559 --> 00:20:31,600
how are we able to run on both cenos 7

00:20:29,600 --> 00:20:34,799
and ubuntu 1804

00:20:31,600 --> 00:20:38,159
so we've developed a comprehensive

00:20:34,799 --> 00:20:40,559
set of salt stack scripts

00:20:38,159 --> 00:20:42,000
which then orchestrate all of those dark

00:20:40,559 --> 00:20:43,600
docker containers

00:20:42,000 --> 00:20:44,960
and they make sure that they're running

00:20:43,600 --> 00:20:46,640
properly they make sure that they're

00:20:44,960 --> 00:20:48,320
configured properly

00:20:46,640 --> 00:20:49,840
and that kind of gets back to the the

00:20:48,320 --> 00:20:51,280
key point that we talked about a few

00:20:49,840 --> 00:20:54,480
slides ago about

00:20:51,280 --> 00:20:55,600
how do we enable users to customize the

00:20:54,480 --> 00:20:58,240
software

00:20:55,600 --> 00:21:00,159
but at the same time prevent them from

00:20:58,240 --> 00:21:02,640
breaking the system and that's exactly

00:21:00,159 --> 00:21:04,320
what salt stack allows us to do

00:21:02,640 --> 00:21:06,000
because you can go into the

00:21:04,320 --> 00:21:08,159
configuration and you can

00:21:06,000 --> 00:21:10,400
configure things how you want them and

00:21:08,159 --> 00:21:12,320
then salt stack is going to make sure

00:21:10,400 --> 00:21:15,360
that they're always in the proper

00:21:12,320 --> 00:21:16,240
state and so that's that enables you to

00:21:15,360 --> 00:21:19,200
have a much

00:21:16,240 --> 00:21:21,280
more reliable system that's much more

00:21:19,200 --> 00:21:23,280
likely to be

00:21:21,280 --> 00:21:26,080
in the proper configuration the way that

00:21:23,280 --> 00:21:27,919
you want it to be

00:21:26,080 --> 00:21:30,799
so your next question is okay well how

00:21:27,919 --> 00:21:32,880
do i make my adversaries cry

00:21:30,799 --> 00:21:33,919
with security onion well this is what

00:21:32,880 --> 00:21:35,200
that looks like

00:21:33,919 --> 00:21:37,919
we've got kind of an architecture

00:21:35,200 --> 00:21:39,919
diagram here and we can see at the top

00:21:37,919 --> 00:21:40,960
that adversary out on the big bad

00:21:39,919 --> 00:21:43,919
internet

00:21:40,960 --> 00:21:45,840
and we've got our firewall here which

00:21:43,919 --> 00:21:47,679
kind of separates us from that wild wild

00:21:45,840 --> 00:21:50,960
west of the internet

00:21:47,679 --> 00:21:51,919
and so what we'd like to do is install

00:21:50,960 --> 00:21:54,400
secured union

00:21:51,919 --> 00:21:55,760
on your network and have it collect

00:21:54,400 --> 00:21:59,200
network traffic

00:21:55,760 --> 00:22:01,039
from a tap or a span port and

00:21:59,200 --> 00:22:02,480
we call this kind of the the north south

00:22:01,039 --> 00:22:03,600
traffic because that's the traffic

00:22:02,480 --> 00:22:06,080
that's kind of

00:22:03,600 --> 00:22:07,679
leaving your network and going out to

00:22:06,080 --> 00:22:09,760
the internet

00:22:07,679 --> 00:22:11,200
and that's really kind of the the best

00:22:09,760 --> 00:22:13,760
place to start

00:22:11,200 --> 00:22:14,960
your network monitoring and then once

00:22:13,760 --> 00:22:17,120
you kind of have

00:22:14,960 --> 00:22:18,880
uh some good visibility there the next

00:22:17,120 --> 00:22:19,840
thing you want to do is get some

00:22:18,880 --> 00:22:22,240
east-west

00:22:19,840 --> 00:22:23,520
visibility what do we mean by that well

00:22:22,240 --> 00:22:25,280
that means is

00:22:23,520 --> 00:22:27,120
you know probably on your enterprise

00:22:25,280 --> 00:22:29,200
network you you probably have some

00:22:27,120 --> 00:22:30,720
core switches that have your kind of

00:22:29,200 --> 00:22:32,559
data center connected to it

00:22:30,720 --> 00:22:34,960
you might have some edge switches which

00:22:32,559 --> 00:22:37,679
might have your desktops and laptops and

00:22:34,960 --> 00:22:40,320
other endpoints connected there

00:22:37,679 --> 00:22:40,799
and really what you're looking for is

00:22:40,320 --> 00:22:43,120
when an

00:22:40,799 --> 00:22:44,960
adversary gets into your environment and

00:22:43,120 --> 00:22:46,880
establishes a foothold

00:22:44,960 --> 00:22:48,159
maybe on one of these endpoints down

00:22:46,880 --> 00:22:50,960
here maybe that's via

00:22:48,159 --> 00:22:51,919
a spearfishing email or some other

00:22:50,960 --> 00:22:54,720
initial

00:22:51,919 --> 00:22:55,600
compromise the next thing they're going

00:22:54,720 --> 00:22:58,080
to do

00:22:55,600 --> 00:22:59,039
is try to pivot laterally from that

00:22:58,080 --> 00:23:01,120
endpoint

00:22:59,039 --> 00:23:02,720
to some of the systems in your data

00:23:01,120 --> 00:23:03,360
centers they're probably going to try to

00:23:02,720 --> 00:23:05,120
go after

00:23:03,360 --> 00:23:07,280
active directory they're probably going

00:23:05,120 --> 00:23:08,000
to try to go after your file servers

00:23:07,280 --> 00:23:10,320
your database

00:23:08,000 --> 00:23:13,280
servers and that's going to be that

00:23:10,320 --> 00:23:16,799
lateral movement that we're looking for

00:23:13,280 --> 00:23:18,480
so ideally we'd like to monitor

00:23:16,799 --> 00:23:21,120
our north-south traffic from a tap or

00:23:18,480 --> 00:23:23,440
span port here just inside the firewall

00:23:21,120 --> 00:23:24,159
and we'd like to monitor our east-west

00:23:23,440 --> 00:23:26,559
traffic

00:23:24,159 --> 00:23:27,919
from a tap or span port on the inside of

00:23:26,559 --> 00:23:30,240
our network

00:23:27,919 --> 00:23:32,400
now that network visibility is a great

00:23:30,240 --> 00:23:34,320
place to start

00:23:32,400 --> 00:23:35,520
but as we all know more and more of our

00:23:34,320 --> 00:23:37,360
network traffic

00:23:35,520 --> 00:23:38,799
is becoming encrypted and that's

00:23:37,360 --> 00:23:42,080
generally a good thing

00:23:38,799 --> 00:23:44,640
in terms of privacy however for

00:23:42,080 --> 00:23:45,840
us as defenders that makes our jobs a

00:23:44,640 --> 00:23:48,080
little bit more

00:23:45,840 --> 00:23:50,000
difficult and so that means we've kind

00:23:48,080 --> 00:23:52,720
of got some blind spots in our network

00:23:50,000 --> 00:23:53,600
visibility and so what we'd like to be

00:23:52,720 --> 00:23:56,080
able to do

00:23:53,600 --> 00:23:57,840
is to fill in those blind spots with

00:23:56,080 --> 00:24:00,720
some additional visibility from

00:23:57,840 --> 00:24:03,039
host logs and so that's what you see in

00:24:00,720 --> 00:24:05,200
the bottom part of this diagram

00:24:03,039 --> 00:24:06,720
we want to be able to collect logs from

00:24:05,200 --> 00:24:07,520
your servers we want to be able to

00:24:06,720 --> 00:24:10,320
collect

00:24:07,520 --> 00:24:12,400
endpoint logs from your laptops and

00:24:10,320 --> 00:24:14,960
desktops and workstations

00:24:12,400 --> 00:24:15,440
and really bring all of that data back

00:24:14,960 --> 00:24:17,360
to

00:24:15,440 --> 00:24:18,799
security onions so that i can see both

00:24:17,360 --> 00:24:20,640
the network visibility

00:24:18,799 --> 00:24:22,559
and the host visibility and i can

00:24:20,640 --> 00:24:24,880
correlate between the two

00:24:22,559 --> 00:24:26,480
and i can very quickly and easily slice

00:24:24,880 --> 00:24:28,159
and dice all that data

00:24:26,480 --> 00:24:29,600
find those adversaries that are hiding

00:24:28,159 --> 00:24:32,799
out in my network

00:24:29,600 --> 00:24:34,320
and hopefully interrupt them before they

00:24:32,799 --> 00:24:36,960
achieve their objectives

00:24:34,320 --> 00:24:38,799
if we can do that then we can make our

00:24:36,960 --> 00:24:41,919
adversaries cry because we've

00:24:38,799 --> 00:24:43,440
frustrated them uh we've we've kind of

00:24:41,919 --> 00:24:44,480
taught them a lesson we've slapped their

00:24:43,440 --> 00:24:46,240
hand

00:24:44,480 --> 00:24:48,159
and hopefully they they will learn their

00:24:46,240 --> 00:24:49,679
lesson and not come back to our network

00:24:48,159 --> 00:24:52,320
because they know that we're gonna

00:24:49,679 --> 00:24:53,919
catch them if they try to get back in so

00:24:52,320 --> 00:24:56,159
that's really the ideal that's what we

00:24:53,919 --> 00:24:57,520
want to try to get to

00:24:56,159 --> 00:24:59,840
so let's talk about that network

00:24:57,520 --> 00:25:01,840
visibility piece first

00:24:59,840 --> 00:25:03,200
as i mentioned before security onion is

00:25:01,840 --> 00:25:06,480
kind of based on

00:25:03,200 --> 00:25:09,679
the best of breed open source components

00:25:06,480 --> 00:25:11,360
uh that that already existed out there

00:25:09,679 --> 00:25:13,200
you know it didn't make sense for us to

00:25:11,360 --> 00:25:15,919
go and reinvent the wheel

00:25:13,200 --> 00:25:17,520
rather we wanted to kind of integrate

00:25:15,919 --> 00:25:19,200
with all of these existing

00:25:17,520 --> 00:25:22,000
open source projects that were out there

00:25:19,200 --> 00:25:24,320
and their own open source communities

00:25:22,000 --> 00:25:25,440
and really use those those best of breed

00:25:24,320 --> 00:25:27,440
integrations

00:25:25,440 --> 00:25:28,480
and really take that to the next level

00:25:27,440 --> 00:25:31,360
and build

00:25:28,480 --> 00:25:33,279
the best of breed open source platform

00:25:31,360 --> 00:25:35,200
that has all those components

00:25:33,279 --> 00:25:38,400
so the first thing that we do is is we

00:25:35,200 --> 00:25:40,840
start with network-based ids alerts

00:25:38,400 --> 00:25:42,000
and we get those from a component called

00:25:40,840 --> 00:25:43,600
suricata

00:25:42,000 --> 00:25:45,520
sorry cod has been around for many many

00:25:43,600 --> 00:25:47,679
years now and

00:25:45,520 --> 00:25:49,200
it does a great job of monitoring your

00:25:47,679 --> 00:25:52,720
network traffic

00:25:49,200 --> 00:25:54,799
running a rule set and and for example

00:25:52,720 --> 00:25:57,360
we give you the emerging threats open

00:25:54,799 --> 00:25:58,159
rule set by default that's a totally

00:25:57,360 --> 00:26:00,720
free rule set

00:25:58,159 --> 00:26:02,240
over twenty thousand rules as surikata

00:26:00,720 --> 00:26:04,240
is monitoring your traffic

00:26:02,240 --> 00:26:05,360
if any of that traffic matches any one

00:26:04,240 --> 00:26:07,840
of those rules

00:26:05,360 --> 00:26:10,000
then surikata will generate an alert and

00:26:07,840 --> 00:26:13,279
that's really kind of a starting point

00:26:10,000 --> 00:26:14,880
for your investigative process

00:26:13,279 --> 00:26:16,640
now i say that's a starting point

00:26:14,880 --> 00:26:18,400
because anybody who's ever looked at an

00:26:16,640 --> 00:26:21,120
ids alert before

00:26:18,400 --> 00:26:23,520
you realize of course that an ids alert

00:26:21,120 --> 00:26:26,000
really kind of poses a question

00:26:23,520 --> 00:26:28,480
but it doesn't necessarily answer that

00:26:26,000 --> 00:26:31,120
question in and of itself

00:26:28,480 --> 00:26:31,919
in other words it's important for us as

00:26:31,120 --> 00:26:34,960
defenders

00:26:31,919 --> 00:26:37,440
as analysts to be able to

00:26:34,960 --> 00:26:39,679
kind of surround that ids alert with

00:26:37,440 --> 00:26:40,960
other contextual data that helps us

00:26:39,679 --> 00:26:43,360
determine

00:26:40,960 --> 00:26:45,520
is that ids alert number one a true

00:26:43,360 --> 00:26:48,640
positive or a false positive

00:26:45,520 --> 00:26:50,960
and number two if it's a true positive

00:26:48,640 --> 00:26:52,400
does it even have any impact for our

00:26:50,960 --> 00:26:54,640
environment

00:26:52,400 --> 00:26:56,559
meaning that it could be a true positive

00:26:54,640 --> 00:26:57,840
for a piece of software that we don't

00:26:56,559 --> 00:27:00,720
even run

00:26:57,840 --> 00:27:02,960
in our enterprise and so even if it is a

00:27:00,720 --> 00:27:04,880
true positive i don't care because

00:27:02,960 --> 00:27:06,880
i'm not vulnerable since i'm not running

00:27:04,880 --> 00:27:08,559
that software

00:27:06,880 --> 00:27:10,720
so that's kind of where we start but

00:27:08,559 --> 00:27:13,679
then we we need that context

00:27:10,720 --> 00:27:15,760
and we get that context from protocol

00:27:13,679 --> 00:27:19,039
metadata what does that mean

00:27:15,760 --> 00:27:22,000
well we have processes either

00:27:19,039 --> 00:27:24,000
zeke or surikata that are going to

00:27:22,000 --> 00:27:26,960
monitor that network traffic

00:27:24,000 --> 00:27:29,520
and they're going to log every single

00:27:26,960 --> 00:27:30,880
http transaction meaning every time you

00:27:29,520 --> 00:27:33,679
go to a website

00:27:30,880 --> 00:27:34,080
it's going to create a log and say this

00:27:33,679 --> 00:27:36,399
ip

00:27:34,080 --> 00:27:38,320
address went out to google.com and

00:27:36,399 --> 00:27:40,559
requested this page

00:27:38,320 --> 00:27:41,360
now of course google.com by default

00:27:40,559 --> 00:27:44,559
nowadays

00:27:41,360 --> 00:27:46,559
is encrypted so it's going to be https

00:27:44,559 --> 00:27:48,240
so our visibility is somewhat limited

00:27:46,559 --> 00:27:51,440
there however

00:27:48,240 --> 00:27:55,039
we still get protocol metadata from

00:27:51,440 --> 00:27:58,159
those https connections because those

00:27:55,039 --> 00:28:01,440
ssl certificates those tls certificates

00:27:58,159 --> 00:28:03,600
have to be exchanged in clear text and

00:28:01,440 --> 00:28:05,840
we're still getting logging from those

00:28:03,600 --> 00:28:07,760
certificates because they're being

00:28:05,840 --> 00:28:09,600
transferred in clear text across the

00:28:07,760 --> 00:28:13,039
network in addition to

00:28:09,600 --> 00:28:15,200
http and https we also have a log of all

00:28:13,039 --> 00:28:18,240
dns lookups we have a log of all

00:28:15,200 --> 00:28:20,480
connections regardless of protocol and

00:28:18,240 --> 00:28:23,520
that really kind of gives you that next

00:28:20,480 --> 00:28:26,399
level of data to help you start to

00:28:23,520 --> 00:28:27,120
paint a more complete picture around

00:28:26,399 --> 00:28:30,480
those

00:28:27,120 --> 00:28:31,520
ids alerts and then if that's not enough

00:28:30,480 --> 00:28:34,399
context

00:28:31,520 --> 00:28:36,159
we also do full packet capture and this

00:28:34,399 --> 00:28:36,960
is really like a video camera for your

00:28:36,159 --> 00:28:39,039
network

00:28:36,960 --> 00:28:41,279
uh because you know i like to use the

00:28:39,039 --> 00:28:44,320
analogy of a security system

00:28:41,279 --> 00:28:46,480
for your house uh you know if you want

00:28:44,320 --> 00:28:49,200
physical security for your house

00:28:46,480 --> 00:28:49,840
you go and get a security system but if

00:28:49,200 --> 00:28:52,320
you

00:28:49,840 --> 00:28:54,399
if you had the installer come out and

00:28:52,320 --> 00:28:57,120
you realize that what they installed

00:28:54,399 --> 00:28:59,200
was just a motion activated camera that

00:28:57,120 --> 00:29:00,640
took a snapshot

00:28:59,200 --> 00:29:02,640
well that's kind of what our

00:29:00,640 --> 00:29:05,039
network-based ids alerts are it's really

00:29:02,640 --> 00:29:07,039
just kind of a snapshot in time

00:29:05,039 --> 00:29:09,440
what we really prefer to have is a

00:29:07,039 --> 00:29:11,600
videotape that we can rewind

00:29:09,440 --> 00:29:12,559
and see exactly what happened from start

00:29:11,600 --> 00:29:14,320
to finish

00:29:12,559 --> 00:29:16,799
and that's what our full packet capture

00:29:14,320 --> 00:29:18,640
does for us we get that from google

00:29:16,799 --> 00:29:21,039
stenographer

00:29:18,640 --> 00:29:23,360
so it's designed by google it's designed

00:29:21,039 --> 00:29:24,159
to run on very large networks with lots

00:29:23,360 --> 00:29:26,320
of

00:29:24,159 --> 00:29:27,200
bandwidth and so it's very scalable by

00:29:26,320 --> 00:29:29,440
design

00:29:27,200 --> 00:29:30,960
and so we've integrated that right into

00:29:29,440 --> 00:29:33,679
security onion

00:29:30,960 --> 00:29:35,039
version two so that you can very quickly

00:29:33,679 --> 00:29:37,039
and easily go from

00:29:35,039 --> 00:29:38,640
a network-based ids alert you can

00:29:37,039 --> 00:29:39,520
surround that with your protocol

00:29:38,640 --> 00:29:41,919
metadata

00:29:39,520 --> 00:29:43,200
and then if you find an interesting tcp

00:29:41,919 --> 00:29:46,399
connection

00:29:43,200 --> 00:29:47,279
uh that maybe it's a command and control

00:29:46,399 --> 00:29:50,159
beacon

00:29:47,279 --> 00:29:51,360
maybe it's data exfiltration uh

00:29:50,159 --> 00:29:53,120
information being stolen from your

00:29:51,360 --> 00:29:54,399
network you can then pivot to full

00:29:53,120 --> 00:29:57,039
packet capture

00:29:54,399 --> 00:29:59,120
to actually see the nitty-gritty details

00:29:57,039 --> 00:30:01,760
you can then rewind that video tape

00:29:59,120 --> 00:30:04,080
and see exactly what that bad guy did in

00:30:01,760 --> 00:30:05,919
your network

00:30:04,080 --> 00:30:08,000
so here's what that looks like from a

00:30:05,919 --> 00:30:10,240
component standpoint

00:30:08,000 --> 00:30:11,440
traffic comes into our sniffing network

00:30:10,240 --> 00:30:13,840
interface

00:30:11,440 --> 00:30:14,880
and then we use af packet which is built

00:30:13,840 --> 00:30:17,600
into modern

00:30:14,880 --> 00:30:18,080
linux kernels we use that as a flow

00:30:17,600 --> 00:30:20,159
based

00:30:18,080 --> 00:30:22,080
load balancer so that we can then spin

00:30:20,159 --> 00:30:24,000
up multiple workers

00:30:22,080 --> 00:30:25,840
for things like stenographer and

00:30:24,000 --> 00:30:28,320
sarikata and zeke

00:30:25,840 --> 00:30:29,919
so that they can scale up to handle high

00:30:28,320 --> 00:30:32,880
amounts of traffic

00:30:29,919 --> 00:30:33,679
and so these scalable processes are

00:30:32,880 --> 00:30:36,880
really only

00:30:33,679 --> 00:30:37,840
limited by the number of cpu cores that

00:30:36,880 --> 00:30:40,880
you have

00:30:37,840 --> 00:30:41,279
in your sensor so you know if you you

00:30:40,880 --> 00:30:43,520
buy

00:30:41,279 --> 00:30:44,720
a fancy new server with amd epic

00:30:43,520 --> 00:30:47,440
processors with

00:30:44,720 --> 00:30:48,080
128 cpu cores then you'll be able to

00:30:47,440 --> 00:30:50,480
spin up

00:30:48,080 --> 00:30:51,760
lots and lots of these worker processes

00:30:50,480 --> 00:30:54,880
and be able to handle

00:30:51,760 --> 00:30:56,559
lots and lots of network traffic

00:30:54,880 --> 00:30:58,720
so we have stenographer that's writing

00:30:56,559 --> 00:31:00,240
that full packet capture out to slash

00:30:58,720 --> 00:31:02,720
nsm slash pcapp

00:31:00,240 --> 00:31:05,200
we have cericada that's writing our ids

00:31:02,720 --> 00:31:06,640
alerts out to innocence cericada

00:31:05,200 --> 00:31:09,360
we have zeek that's writing out our

00:31:06,640 --> 00:31:12,640
protocol metadata to nsm

00:31:09,360 --> 00:31:15,440
zeek slash logs and it's also

00:31:12,640 --> 00:31:16,320
detecting well-known file types things

00:31:15,440 --> 00:31:18,799
like windows

00:31:16,320 --> 00:31:21,279
executables and pdf files things that

00:31:18,799 --> 00:31:24,480
are commonly seen in malware attacks

00:31:21,279 --> 00:31:27,039
and it's automatically extracting those

00:31:24,480 --> 00:31:28,799
files to this location nsm zeke

00:31:27,039 --> 00:31:30,240
extracted complete

00:31:28,799 --> 00:31:32,000
and then we have another process that

00:31:30,240 --> 00:31:35,200
comes along called stroka

00:31:32,000 --> 00:31:38,480
which does automated file analysis

00:31:35,200 --> 00:31:40,960
on those extracted file types so that's

00:31:38,480 --> 00:31:41,679
another great way to really kind of look

00:31:40,960 --> 00:31:44,159
for

00:31:41,679 --> 00:31:46,640
malware that's being transferred across

00:31:44,159 --> 00:31:48,159
your network

00:31:46,640 --> 00:31:50,320
now as we talked about before more and

00:31:48,159 --> 00:31:52,559
more of our network traffic is becoming

00:31:50,320 --> 00:31:55,360
encrypted and so it's important for us

00:31:52,559 --> 00:31:57,840
to kind of augment our network

00:31:55,360 --> 00:31:59,919
visibility with endpoint visibility

00:31:57,840 --> 00:32:01,039
as well we've got a couple of options

00:31:59,919 --> 00:32:04,279
for that and the first

00:32:01,039 --> 00:32:07,679
is os query os query is a great

00:32:04,279 --> 00:32:09,440
cross-platform endpoint agent

00:32:07,679 --> 00:32:10,960
being cross-platform it can run on

00:32:09,440 --> 00:32:14,000
windows mac os

00:32:10,960 --> 00:32:17,919
unix linux what have you and

00:32:14,000 --> 00:32:21,200
the great thing about os query is that

00:32:17,919 --> 00:32:24,240
we also have a nice web interface for

00:32:21,200 --> 00:32:26,880
managing those os query agents

00:32:24,240 --> 00:32:28,399
so if you deploy os query agents to your

00:32:26,880 --> 00:32:30,240
enterprise they'll check in to your

00:32:28,399 --> 00:32:33,600
security onion deployment you can log

00:32:30,240 --> 00:32:35,519
into fleet and that's your web interface

00:32:33,600 --> 00:32:39,519
for managing those agents

00:32:35,519 --> 00:32:42,480
you can then go and query those agents

00:32:39,519 --> 00:32:43,360
interactively so i can target a specific

00:32:42,480 --> 00:32:45,039
set of agents

00:32:43,360 --> 00:32:46,399
i can run queries against them i can

00:32:45,039 --> 00:32:48,080
interrogate their

00:32:46,399 --> 00:32:49,679
memory their disk their registry

00:32:48,080 --> 00:32:52,480
whatever the case may be

00:32:49,679 --> 00:32:53,320
and so that's a really great free and

00:32:52,480 --> 00:32:56,559
open source

00:32:53,320 --> 00:32:58,559
cross-platform agent for endpoint

00:32:56,559 --> 00:33:01,120
visibility

00:32:58,559 --> 00:33:02,720
another option is the elastic beats

00:33:01,120 --> 00:33:04,640
family of agents

00:33:02,720 --> 00:33:05,760
of course security onion includes the

00:33:04,640 --> 00:33:08,799
elastic stack

00:33:05,760 --> 00:33:10,960
and that's how we store all of our logs

00:33:08,799 --> 00:33:12,720
and because of that we can integrate

00:33:10,960 --> 00:33:16,240
quite nicely with the beats

00:33:12,720 --> 00:33:17,039
family of endpoint agents so for example

00:33:16,240 --> 00:33:19,760
for windows

00:33:17,039 --> 00:33:21,600
you can download winlogbeat and install

00:33:19,760 --> 00:33:23,039
that on your windows endpoint

00:33:21,600 --> 00:33:24,960
it's going to collect all of those

00:33:23,039 --> 00:33:27,120
standard windows system logs

00:33:24,960 --> 00:33:28,480
and send those over to the elastic stack

00:33:27,120 --> 00:33:30,799
on security onion

00:33:28,480 --> 00:33:33,279
and that's where you can slice and dice

00:33:30,799 --> 00:33:35,760
all of those logs

00:33:33,279 --> 00:33:37,200
another option is wazoo which is kind of

00:33:35,760 --> 00:33:41,600
the next generation

00:33:37,200 --> 00:33:43,120
fork of an older component called osec

00:33:41,600 --> 00:33:44,960
which is a host based intrusion

00:33:43,120 --> 00:33:47,519
detection system and the nice thing

00:33:44,960 --> 00:33:50,720
about osac and now wazoo is that

00:33:47,519 --> 00:33:53,360
it's not just log collection

00:33:50,720 --> 00:33:55,440
but it's encrypted log transport it's

00:33:53,360 --> 00:33:56,320
file integrity checking it's root kit

00:33:55,440 --> 00:33:59,039
detection

00:33:56,320 --> 00:33:59,919
so you really kind of get multiple

00:33:59,039 --> 00:34:03,600
components

00:33:59,919 --> 00:34:05,840
in one nice neat little agent

00:34:03,600 --> 00:34:07,840
so we've got really kind of three big

00:34:05,840 --> 00:34:09,839
options here

00:34:07,840 --> 00:34:11,919
and it's really kind of up to you in

00:34:09,839 --> 00:34:14,320
terms of what's the best for your

00:34:11,919 --> 00:34:16,480
enterprise do you need something that's

00:34:14,320 --> 00:34:18,800
cross-platform do you need something

00:34:16,480 --> 00:34:21,919
that fits a certain

00:34:18,800 --> 00:34:23,520
set of features uh and so

00:34:21,919 --> 00:34:24,960
you know in some cases enterprises

00:34:23,520 --> 00:34:26,000
already have one of these that they're

00:34:24,960 --> 00:34:27,520
already using

00:34:26,000 --> 00:34:29,359
and so that's why we want to be able to

00:34:27,520 --> 00:34:31,520
integrate with as many different

00:34:29,359 --> 00:34:32,480
endpoint agents as possible to kind of

00:34:31,520 --> 00:34:34,399
meet

00:34:32,480 --> 00:34:35,839
enterprise users where they are and be

00:34:34,399 --> 00:34:38,480
able to integrate with their existing

00:34:35,839 --> 00:34:42,000
technologies where possible

00:34:38,480 --> 00:34:44,159
and so uh those are really the three

00:34:42,000 --> 00:34:45,760
best of breed open source endpoint

00:34:44,159 --> 00:34:48,639
agents that are available

00:34:45,760 --> 00:34:49,599
uh for integration today now in addition

00:34:48,639 --> 00:34:53,040
to that

00:34:49,599 --> 00:34:53,040
there are some other kind of

00:34:53,119 --> 00:34:57,680
additional add-ons that can give you

00:34:55,359 --> 00:34:59,440
additional visibility so for example

00:34:57,680 --> 00:35:01,680
especially in the world of windows you

00:34:59,440 --> 00:35:02,079
know we even if we are free and open

00:35:01,680 --> 00:35:04,320
source

00:35:02,079 --> 00:35:05,280
advocates chances are in our networks we

00:35:04,320 --> 00:35:07,760
have some

00:35:05,280 --> 00:35:08,560
some windows installation somewhere and

00:35:07,760 --> 00:35:11,599
for those

00:35:08,560 --> 00:35:12,560
windows deployments sysmon is a great

00:35:11,599 --> 00:35:14,560
free utility

00:35:12,560 --> 00:35:16,720
it's not open source of course but it is

00:35:14,560 --> 00:35:20,079
free from the sysinternals team

00:35:16,720 --> 00:35:22,320
at microsoft and it gives us really

00:35:20,079 --> 00:35:24,560
comprehensive logging for those windows

00:35:22,320 --> 00:35:27,040
endpoints so it logs things like

00:35:24,560 --> 00:35:29,200
network connections and process creation

00:35:27,040 --> 00:35:31,839
and registry changes

00:35:29,200 --> 00:35:32,320
all kinds of great telemetry for those

00:35:31,839 --> 00:35:35,200
windows

00:35:32,320 --> 00:35:37,200
endpoints and the great thing is that as

00:35:35,200 --> 00:35:40,240
sysmon is logging that stuff

00:35:37,200 --> 00:35:43,599
that log can be picked up by any one

00:35:40,240 --> 00:35:45,599
of these three endpoint agents up here

00:35:43,599 --> 00:35:47,359
so these really kind of fit together

00:35:45,599 --> 00:35:49,359
quite nicely

00:35:47,359 --> 00:35:50,880
in in addition to that we have auto runs

00:35:49,359 --> 00:35:53,680
as well it's another tool

00:35:50,880 --> 00:35:54,240
from the sysinternals toolset and auto

00:35:53,680 --> 00:35:58,000
runs

00:35:54,240 --> 00:36:00,320
shows you those auto run locations

00:35:58,000 --> 00:36:01,440
inside of windows that attackers might

00:36:00,320 --> 00:36:03,839
be using

00:36:01,440 --> 00:36:04,560
as a form of persistence as a

00:36:03,839 --> 00:36:07,920
persistence

00:36:04,560 --> 00:36:10,640
mechanism to maintain that foothold

00:36:07,920 --> 00:36:11,599
in your environment so you could deploy

00:36:10,640 --> 00:36:13,920
auto runs

00:36:11,599 --> 00:36:16,320
you could have it logging and be

00:36:13,920 --> 00:36:18,079
collecting those auto runs logs back to

00:36:16,320 --> 00:36:18,800
security onion where you could slice and

00:36:18,079 --> 00:36:20,560
dice

00:36:18,800 --> 00:36:24,839
and look for those persistence

00:36:20,560 --> 00:36:27,280
mechanisms across your entire

00:36:24,839 --> 00:36:29,680
enterprise now once you have

00:36:27,280 --> 00:36:30,880
your network visibility and your host

00:36:29,680 --> 00:36:34,480
based visibility

00:36:30,880 --> 00:36:37,280
as well you're now ready to log in to

00:36:34,480 --> 00:36:37,839
security onion 2. when you do so you'll

00:36:37,280 --> 00:36:40,320
be great

00:36:37,839 --> 00:36:41,440
greeted with our new security onion

00:36:40,320 --> 00:36:44,560
console

00:36:41,440 --> 00:36:46,240
or sock as we call it and so if you

00:36:44,560 --> 00:36:48,960
log in here with your email address and

00:36:46,240 --> 00:36:49,839
password you're then logged into sock

00:36:48,960 --> 00:36:52,880
and that gives you

00:36:49,839 --> 00:36:54,079
access to really all of these really

00:36:52,880 --> 00:36:57,359
nice

00:36:54,079 --> 00:36:58,800
web interfaces which really integrate

00:36:57,359 --> 00:37:01,040
quite nicely and we'll kind of talk

00:36:58,800 --> 00:37:04,320
about how these things fit together

00:37:01,040 --> 00:37:07,119
over the next few slides

00:37:04,320 --> 00:37:09,520
so there are a few native tools built

00:37:07,119 --> 00:37:13,040
into security onion console and that's

00:37:09,520 --> 00:37:14,560
things like hunt and pcapp but sock also

00:37:13,040 --> 00:37:17,119
gives you access to

00:37:14,560 --> 00:37:18,160
some external tools things like cabana

00:37:17,119 --> 00:37:23,280
grafana

00:37:18,160 --> 00:37:26,160
fleet the hive and so on and so forth

00:37:23,280 --> 00:37:27,520
so let's talk about some of the tools

00:37:26,160 --> 00:37:30,640
that are built into

00:37:27,520 --> 00:37:32,400
security onion console natively so when

00:37:30,640 --> 00:37:34,079
you log into sock

00:37:32,400 --> 00:37:36,240
you'll be greeted with this menu on the

00:37:34,079 --> 00:37:37,920
left hand side you've got the overview

00:37:36,240 --> 00:37:40,800
and the next thing you have is

00:37:37,920 --> 00:37:42,880
alerts and this is a brand new interface

00:37:40,800 --> 00:37:44,640
that we just developed so even if you

00:37:42,880 --> 00:37:46,000
were following along with some of our

00:37:44,640 --> 00:37:48,160
release candidates

00:37:46,000 --> 00:37:49,920
for security onion 2 you wouldn't have

00:37:48,160 --> 00:37:51,680
even seen this in any of the release

00:37:49,920 --> 00:37:53,440
candidates because it's brand new

00:37:51,680 --> 00:37:55,440
it's fresh out of the oven and we're

00:37:53,440 --> 00:37:58,720
really excited about it

00:37:55,440 --> 00:38:02,720
because we really set out to build

00:37:58,720 --> 00:38:05,520
what is the simplest interface possible

00:38:02,720 --> 00:38:07,200
for dealing with alerts whether they're

00:38:05,520 --> 00:38:10,480
network-based ids alerts

00:38:07,200 --> 00:38:13,520
or host-based alerts or

00:38:10,480 --> 00:38:16,320
strelka alerts or playbook alerts

00:38:13,520 --> 00:38:17,040
and to be able to do that in a scalable

00:38:16,320 --> 00:38:19,359
fashion

00:38:17,040 --> 00:38:20,480
because if if we plug in any kind of a

00:38:19,359 --> 00:38:22,320
sensor

00:38:20,480 --> 00:38:24,000
to an enterprise network doesn't matter

00:38:22,320 --> 00:38:25,760
whether it's security or something

00:38:24,000 --> 00:38:27,920
else any network sensor is going to

00:38:25,760 --> 00:38:30,640
start generating hundreds or

00:38:27,920 --> 00:38:31,520
thousands or potentially 10 000 or more

00:38:30,640 --> 00:38:33,760
alerts

00:38:31,520 --> 00:38:36,560
and we need to be able to slice and dice

00:38:33,760 --> 00:38:38,960
those alerts very quickly and easily

00:38:36,560 --> 00:38:39,760
so we put a lot of thought and a lot of

00:38:38,960 --> 00:38:41,839
effort

00:38:39,760 --> 00:38:42,880
into this new alerts interface to make

00:38:41,839 --> 00:38:44,960
sure

00:38:42,880 --> 00:38:46,079
that it was going to be as simple to use

00:38:44,960 --> 00:38:48,079
as possible

00:38:46,079 --> 00:38:49,119
but at the same time be extremely

00:38:48,079 --> 00:38:52,480
scalable

00:38:49,119 --> 00:38:54,160
for those large enterprise deployments

00:38:52,480 --> 00:38:55,839
so the nice thing about this alerts

00:38:54,160 --> 00:38:58,480
interface is that

00:38:55,839 --> 00:38:59,680
you can deal with large numbers of

00:38:58,480 --> 00:39:02,480
alerts

00:38:59,680 --> 00:39:02,880
and it's a it's an alerts queue which is

00:39:02,480 --> 00:39:05,520
an

00:39:02,880 --> 00:39:06,320
important concept because you know these

00:39:05,520 --> 00:39:09,440
alerts

00:39:06,320 --> 00:39:10,640
are high priority events and when it

00:39:09,440 --> 00:39:12,400
comes to

00:39:10,640 --> 00:39:15,520
defenders when you have an official

00:39:12,400 --> 00:39:16,240
security a security operations center or

00:39:15,520 --> 00:39:19,200
not

00:39:16,240 --> 00:39:19,680
uh you need to be working through that

00:39:19,200 --> 00:39:21,680
queue

00:39:19,680 --> 00:39:24,079
every single day we want to work that

00:39:21,680 --> 00:39:26,560
queue down to zero every single day

00:39:24,079 --> 00:39:27,440
if possible and so it's important to

00:39:26,560 --> 00:39:30,720
think about this

00:39:27,440 --> 00:39:33,680
cue and to go in here and

00:39:30,720 --> 00:39:35,920
you know use these icons on the left to

00:39:33,680 --> 00:39:38,320
either acknowledge an alert

00:39:35,920 --> 00:39:40,079
to say this is either a false positive

00:39:38,320 --> 00:39:42,560
or maybe it's a true positive but i just

00:39:40,079 --> 00:39:44,240
don't care about it but on the other

00:39:42,560 --> 00:39:46,960
hand if it is a true positive

00:39:44,240 --> 00:39:48,960
and i do care about it and maybe it's

00:39:46,960 --> 00:39:49,760
time to engage the incident response

00:39:48,960 --> 00:39:51,440
process

00:39:49,760 --> 00:39:53,520
that's when i would use this blue

00:39:51,440 --> 00:39:56,480
triangle to escalate

00:39:53,520 --> 00:39:59,280
that particular alert and so the beauty

00:39:56,480 --> 00:40:01,040
of this is that regardless of whether

00:39:59,280 --> 00:40:03,040
you know maybe you're the only defender

00:40:01,040 --> 00:40:04,240
in your enterprise that's kind of one

00:40:03,040 --> 00:40:06,240
end of the spectrum

00:40:04,240 --> 00:40:07,680
the other end of the spectrum is a a

00:40:06,240 --> 00:40:09,520
really large mature

00:40:07,680 --> 00:40:11,920
organization that has a large security

00:40:09,520 --> 00:40:13,599
operations center with multiple tiers of

00:40:11,920 --> 00:40:14,480
analysts maybe you have some level one

00:40:13,599 --> 00:40:17,119
analysts

00:40:14,480 --> 00:40:19,599
that do the initial triage they escalate

00:40:17,119 --> 00:40:22,079
things up to higher level analysts

00:40:19,599 --> 00:40:22,960
uh this interface really kind of caters

00:40:22,079 --> 00:40:25,280
to both

00:40:22,960 --> 00:40:26,800
of those ends of the spectrum and

00:40:25,280 --> 00:40:29,280
everything in between

00:40:26,800 --> 00:40:30,640
and it scales quite nicely so we're

00:40:29,280 --> 00:40:32,160
really proud of this new alerts

00:40:30,640 --> 00:40:34,640
interface

00:40:32,160 --> 00:40:35,839
now moving from there you know i talked

00:40:34,640 --> 00:40:39,040
before about how

00:40:35,839 --> 00:40:41,920
ids alerts in particular

00:40:39,040 --> 00:40:43,760
start an investigation they may kind of

00:40:41,920 --> 00:40:46,800
pose a question but it's really kind of

00:40:43,760 --> 00:40:50,240
up to us as analysts or defenders

00:40:46,800 --> 00:40:51,119
to answer that question and that's where

00:40:50,240 --> 00:40:54,079
we need to

00:40:51,119 --> 00:40:54,880
cast a wider net and look for additional

00:40:54,079 --> 00:40:57,119
context

00:40:54,880 --> 00:40:58,960
around those alerts so that we can then

00:40:57,119 --> 00:41:01,440
paint a more complete picture

00:40:58,960 --> 00:41:03,680
about what actually happened and so we

00:41:01,440 --> 00:41:04,000
make it very easy for you to pivot from

00:41:03,680 --> 00:41:06,480
that

00:41:04,000 --> 00:41:07,040
alerts interface in the previous slide

00:41:06,480 --> 00:41:09,599
to

00:41:07,040 --> 00:41:10,079
what we're calling the hunt interface

00:41:09,599 --> 00:41:11,839
which

00:41:10,079 --> 00:41:13,520
really gives you access to not just

00:41:11,839 --> 00:41:16,720
alerts but really all

00:41:13,520 --> 00:41:17,760
of our data types all of that protocol

00:41:16,720 --> 00:41:19,359
metadata

00:41:17,760 --> 00:41:21,040
all of your host logs all of your

00:41:19,359 --> 00:41:23,040
endpoint logs

00:41:21,040 --> 00:41:24,720
if you send firewall logs to it all of

00:41:23,040 --> 00:41:27,280
those are going to show up in there

00:41:24,720 --> 00:41:29,359
and so that's really going to allow you

00:41:27,280 --> 00:41:31,839
to ask the question well

00:41:29,359 --> 00:41:33,040
this ip address looks like it might

00:41:31,839 --> 00:41:36,480
potentially be

00:41:33,040 --> 00:41:39,119
compromised so what else has it done

00:41:36,480 --> 00:41:39,680
in the last 24 hours has it connected

00:41:39,119 --> 00:41:42,240
out to

00:41:39,680 --> 00:41:43,440
any strange ip addresses on the internet

00:41:42,240 --> 00:41:46,880
has it tried to do

00:41:43,440 --> 00:41:48,720
any uh lateral movement on the inside of

00:41:46,880 --> 00:41:51,520
the network and that's what

00:41:48,720 --> 00:41:51,839
hunt is going to enable you to do when

00:41:51,520 --> 00:41:54,960
you

00:41:51,839 --> 00:41:58,160
are investigating those alerts

00:41:54,960 --> 00:42:00,319
now even apart from alert investigation

00:41:58,160 --> 00:42:01,359
the brilliant thing about threat hunting

00:42:00,319 --> 00:42:03,280
is that

00:42:01,359 --> 00:42:05,280
you know we need to be able to go in and

00:42:03,280 --> 00:42:06,640
really kind of look at all of our data

00:42:05,280 --> 00:42:10,560
at a glance

00:42:06,640 --> 00:42:13,040
and group it by different fields

00:42:10,560 --> 00:42:13,839
uh slice it and dice it across multiple

00:42:13,040 --> 00:42:16,560
dimensions

00:42:13,839 --> 00:42:17,599
looking for those anomalies or those

00:42:16,560 --> 00:42:21,359
outliers

00:42:17,599 --> 00:42:21,680
which might be indicative of suspicious

00:42:21,359 --> 00:42:24,960
or

00:42:21,680 --> 00:42:28,079
possibly malicious activity

00:42:24,960 --> 00:42:28,960
so hunt is really and truly designed

00:42:28,079 --> 00:42:32,240
from the ground

00:42:28,960 --> 00:42:34,960
up to be able to do all of that

00:42:32,240 --> 00:42:36,640
very quickly and easily now the next

00:42:34,960 --> 00:42:38,800
thing that we talked about

00:42:36,640 --> 00:42:40,720
was full packet capture and so we

00:42:38,800 --> 00:42:41,599
designed a web interface specifically

00:42:40,720 --> 00:42:44,319
for that

00:42:41,599 --> 00:42:45,839
which gives you a nice overview of full

00:42:44,319 --> 00:42:47,119
packet capture when you're looking at a

00:42:45,839 --> 00:42:48,960
particular stream

00:42:47,119 --> 00:42:50,400
you can also switch to an ascii

00:42:48,960 --> 00:42:51,839
transcript view which you see on the

00:42:50,400 --> 00:42:53,680
right hand side here

00:42:51,839 --> 00:42:56,000
and you can also download the pcap

00:42:53,680 --> 00:42:58,800
itself if you want to open it up in

00:42:56,000 --> 00:43:01,599
wireshark or network miner or some other

00:42:58,800 --> 00:43:03,040
lib pcapp utility

00:43:01,599 --> 00:43:04,800
now if you're familiar with the elastic

00:43:03,040 --> 00:43:07,920
stack we also include

00:43:04,800 --> 00:43:10,240
cabana and so we've built

00:43:07,920 --> 00:43:11,040
dashboards for all of our main data

00:43:10,240 --> 00:43:13,200
types

00:43:11,040 --> 00:43:14,880
so you can go in there into kibana you

00:43:13,200 --> 00:43:17,680
can look at all those dashboards

00:43:14,880 --> 00:43:18,880
we also enable you to escalate events

00:43:17,680 --> 00:43:21,440
from kibana

00:43:18,880 --> 00:43:22,079
and create cases out of those we enable

00:43:21,440 --> 00:43:24,400
you to

00:43:22,079 --> 00:43:26,960
pivot to full packet capture from kibana

00:43:24,400 --> 00:43:28,800
so it's really a comprehensive

00:43:26,960 --> 00:43:30,640
uh kind of integration that we've done

00:43:28,800 --> 00:43:33,599
between all these different tools and

00:43:30,640 --> 00:43:36,319
all these different data types

00:43:33,599 --> 00:43:36,640
now once you've found an interesting bit

00:43:36,319 --> 00:43:39,760
of

00:43:36,640 --> 00:43:40,000
traffic you might have some encoding you

00:43:39,760 --> 00:43:42,400
might

00:43:40,000 --> 00:43:44,160
have some sort of decoding that you need

00:43:42,400 --> 00:43:46,800
to do in order to analyze that and

00:43:44,160 --> 00:43:50,640
that's where cyber chef comes into play

00:43:46,800 --> 00:43:53,760
cyber chef has lots of great plugins

00:43:50,640 --> 00:43:55,520
for being able to decode different

00:43:53,760 --> 00:43:57,520
strings and different blobs and

00:43:55,520 --> 00:43:59,680
different kinds of data

00:43:57,520 --> 00:44:01,280
and really excels at that and we'll

00:43:59,680 --> 00:44:03,680
actually see an example of that in our

00:44:01,280 --> 00:44:05,359
demo a little bit later

00:44:03,680 --> 00:44:08,240
we've also got a new interface called

00:44:05,359 --> 00:44:11,280
playbook and the idea here is that

00:44:08,240 --> 00:44:13,359
playbook can pull in sigma rules which

00:44:11,280 --> 00:44:15,839
enable you to define

00:44:13,359 --> 00:44:16,560
uh suspicious uh indicators of

00:44:15,839 --> 00:44:18,960
compromise

00:44:16,560 --> 00:44:20,160
really across your entire enterprise

00:44:18,960 --> 00:44:22,640
whether that's from a network

00:44:20,160 --> 00:44:24,960
perspective or a host-based perspective

00:44:22,640 --> 00:44:27,119
and you can then go in and write plays

00:44:24,960 --> 00:44:27,920
to detect that kind of activity in the

00:44:27,119 --> 00:44:31,119
future

00:44:27,920 --> 00:44:33,280
and then schedule those uh queries to

00:44:31,119 --> 00:44:34,079
run on a periodic basis and generate

00:44:33,280 --> 00:44:37,680
alerts

00:44:34,079 --> 00:44:39,599
as necessary next we have fleet which i

00:44:37,680 --> 00:44:39,920
mentioned before is the web interface

00:44:39,599 --> 00:44:42,240
for

00:44:39,920 --> 00:44:43,760
os query so as you deploy os query

00:44:42,240 --> 00:44:45,760
agents to your enterprise

00:44:43,760 --> 00:44:46,960
they'll check into this web interface

00:44:45,760 --> 00:44:49,359
and you can then

00:44:46,960 --> 00:44:50,000
query those endpoints you can

00:44:49,359 --> 00:44:52,480
interrogate

00:44:50,000 --> 00:44:55,440
them ask them questions and get answers

00:44:52,480 --> 00:44:57,200
back really quickly and easily

00:44:55,440 --> 00:44:59,359
next we have the hive and that's kind of

00:44:57,200 --> 00:45:01,200
our case management software so as we

00:44:59,359 --> 00:45:04,400
escalate events from

00:45:01,200 --> 00:45:05,040
alerts or hunt or kibana they create

00:45:04,400 --> 00:45:07,440
cases

00:45:05,040 --> 00:45:09,119
in the hive and then you and your fellow

00:45:07,440 --> 00:45:11,839
analysts and defenders

00:45:09,119 --> 00:45:12,800
can then work together to work through

00:45:11,839 --> 00:45:14,880
those cases

00:45:12,800 --> 00:45:16,160
document all of your indicators document

00:45:14,880 --> 00:45:20,720
all of your actions

00:45:16,160 --> 00:45:22,400
and then ultimately close those cases

00:45:20,720 --> 00:45:23,760
next we have the attack navigator from

00:45:22,400 --> 00:45:26,160
the fine folks at

00:45:23,760 --> 00:45:27,359
mitre this goes along with their miter

00:45:26,160 --> 00:45:30,000
attack framework

00:45:27,359 --> 00:45:30,800
and it gives you kind of visibility over

00:45:30,000 --> 00:45:33,599
how much

00:45:30,800 --> 00:45:34,880
coverage you have for that attack

00:45:33,599 --> 00:45:36,880
framework

00:45:34,880 --> 00:45:38,160
so again think about how this might fit

00:45:36,880 --> 00:45:40,880
into your overall

00:45:38,160 --> 00:45:41,839
incident response process or your your

00:45:40,880 --> 00:45:46,240
kind of

00:45:41,839 --> 00:45:48,400
security visibility over your enterprise

00:45:46,240 --> 00:45:49,599
hey doug i think we have about 15

00:45:48,400 --> 00:45:51,359
minutes left and i just want to make

00:45:49,599 --> 00:45:53,680
sure you're still good on time

00:45:51,359 --> 00:45:54,560
yeah we do have a few questions in the

00:45:53,680 --> 00:45:56,960
chat if you're

00:45:54,560 --> 00:45:57,920
you're able to answer them at this time

00:45:56,960 --> 00:46:00,960
okay

00:45:57,920 --> 00:46:04,640
sure yeah so the first one is

00:46:00,960 --> 00:46:07,680
is it possible to dual boot with sov2

00:46:04,640 --> 00:46:09,440
and if you would um you recommend to

00:46:07,680 --> 00:46:13,119
either use so v2

00:46:09,440 --> 00:46:15,440
iso image or install it over centos 7

00:46:13,119 --> 00:46:18,400
ubuntu 18.04

00:46:15,440 --> 00:46:19,760
or do you recommend another option

00:46:18,400 --> 00:46:21,040
that's a really good question actually

00:46:19,760 --> 00:46:22,240
there's a few questions there so i'll

00:46:21,040 --> 00:46:25,359
start with the first one

00:46:22,240 --> 00:46:26,240
which was uh about dual booting so in

00:46:25,359 --> 00:46:29,520
theory you

00:46:26,240 --> 00:46:31,839
could dual boot but

00:46:29,520 --> 00:46:32,560
in practice you probably wouldn't want

00:46:31,839 --> 00:46:36,400
to

00:46:32,560 --> 00:46:39,119
uh and i'll tell you why in addition to

00:46:36,400 --> 00:46:41,119
announcing security onion 2 on friday

00:46:39,119 --> 00:46:43,760
last friday we also announced

00:46:41,119 --> 00:46:46,560
an end of life a six-month end-of-life

00:46:43,760 --> 00:46:48,880
window for security onion 1604.

00:46:46,560 --> 00:46:52,480
what that means is that because security

00:46:48,880 --> 00:46:55,440
onion 1604 is based on ubuntu 1604

00:46:52,480 --> 00:46:56,079
and because ubuntu 1604 goes end of life

00:46:55,440 --> 00:46:59,040
in april

00:46:56,079 --> 00:47:01,040
of 2021 that therefore means that

00:46:59,040 --> 00:47:05,040
security onion 1604

00:47:01,040 --> 00:47:06,960
goes end of life april 2021 as well

00:47:05,040 --> 00:47:09,680
so what we're telling folks is you

00:47:06,960 --> 00:47:13,359
should go ahead and start planning today

00:47:09,680 --> 00:47:15,760
to either upgrade or replace

00:47:13,359 --> 00:47:16,960
any existing security onion 1604

00:47:15,760 --> 00:47:20,480
deployments

00:47:16,960 --> 00:47:22,400
with security onion 2. and there's so

00:47:20,480 --> 00:47:24,640
many new features and so many new

00:47:22,400 --> 00:47:26,480
capabilities in security onion 2

00:47:24,640 --> 00:47:28,079
it's going to be well worth your time

00:47:26,480 --> 00:47:31,680
and effort to

00:47:28,079 --> 00:47:33,599
do that upgrade or replace and and get

00:47:31,680 --> 00:47:33,920
that new capability and that new feature

00:47:33,599 --> 00:47:37,040
set

00:47:33,920 --> 00:47:37,359
from security onion 2. in terms of what

00:47:37,040 --> 00:47:39,760
we

00:47:37,359 --> 00:47:41,920
recommend for most folks we recommend

00:47:39,760 --> 00:47:44,640
using our security onion 2

00:47:41,920 --> 00:47:46,160
iso image because it's the quickest and

00:47:44,640 --> 00:47:49,359
easiest way

00:47:46,160 --> 00:47:50,960
to get it installed and configured

00:47:49,359 --> 00:47:53,359
if you don't want to use that you don't

00:47:50,960 --> 00:47:54,240
have to you can install our components

00:47:53,359 --> 00:47:57,440
manually

00:47:54,240 --> 00:47:58,000
on cinos 7 or ubuntu 1804 but for most

00:47:57,440 --> 00:48:02,400
folks

00:47:58,000 --> 00:48:05,839
we recommend using our iso image

00:48:02,400 --> 00:48:06,400
okay great answer our next question

00:48:05,839 --> 00:48:10,079
comes from

00:48:06,400 --> 00:48:11,200
paul have you have you seen benefits or

00:48:10,079 --> 00:48:14,160
have implementation

00:48:11,200 --> 00:48:17,680
insights in relation to process scaling

00:48:14,160 --> 00:48:19,359
through container-based deployment

00:48:17,680 --> 00:48:21,119
yeah i think that's a great question too

00:48:19,359 --> 00:48:24,720
and we've definitely seen

00:48:21,119 --> 00:48:26,319
lots of benefits of containerization

00:48:24,720 --> 00:48:27,839
we started with containers a couple of

00:48:26,319 --> 00:48:30,640
years ago

00:48:27,839 --> 00:48:32,640
i think it was 2017 when we decided to

00:48:30,640 --> 00:48:35,839
embrace the elastic stack

00:48:32,640 --> 00:48:38,599
and since we were running on ubuntu 1604

00:48:35,839 --> 00:48:41,280
at the time we really needed to

00:48:38,599 --> 00:48:43,520
containerize the elastic stack and so

00:48:41,280 --> 00:48:46,400
that we could run the latest version

00:48:43,520 --> 00:48:48,319
of the elastic stack and so there was

00:48:46,400 --> 00:48:48,800
certainly a learning curve there having

00:48:48,319 --> 00:48:51,599
been

00:48:48,800 --> 00:48:53,119
used to the world of ubuntu packages for

00:48:51,599 --> 00:48:55,280
many many years

00:48:53,119 --> 00:48:56,640
it was definitely a transition period to

00:48:55,280 --> 00:49:00,160
kind of migrate

00:48:56,640 --> 00:49:02,000
from ubuntu packages to containers

00:49:00,160 --> 00:49:03,359
but having done that and having gotten

00:49:02,000 --> 00:49:05,200
over that learning curve it was

00:49:03,359 --> 00:49:08,079
certainly well worth it for

00:49:05,200 --> 00:49:09,200
all of the additional capabilities that

00:49:08,079 --> 00:49:11,520
you get

00:49:09,200 --> 00:49:13,440
uh things like you know that nice

00:49:11,520 --> 00:49:15,680
abstraction layer so that we can

00:49:13,440 --> 00:49:16,720
run on more than one linux distribution

00:49:15,680 --> 00:49:19,839
we can now support

00:49:16,720 --> 00:49:21,599
not just ubuntu but also cenos we also

00:49:19,839 --> 00:49:24,079
get security side benefits

00:49:21,599 --> 00:49:24,960
so we get some additional isolation

00:49:24,079 --> 00:49:27,760
between those

00:49:24,960 --> 00:49:29,680
processes and between the processes and

00:49:27,760 --> 00:49:32,160
the host operating

00:49:29,680 --> 00:49:33,119
operating system itself and then

00:49:32,160 --> 00:49:34,720
furthermore

00:49:33,119 --> 00:49:36,400
if you think about from the standpoint

00:49:34,720 --> 00:49:39,520
that you know if uh

00:49:36,400 --> 00:49:40,400
if a user were to mess up a container or

00:49:39,520 --> 00:49:43,599
even worse

00:49:40,400 --> 00:49:44,160
if an attacker were to get into the

00:49:43,599 --> 00:49:47,280
system

00:49:44,160 --> 00:49:47,680
and mess up a container it's really easy

00:49:47,280 --> 00:49:51,040
then

00:49:47,680 --> 00:49:53,440
trivial to kind of restart that process

00:49:51,040 --> 00:49:54,640
which essentially wipes out that

00:49:53,440 --> 00:49:57,280
container

00:49:54,640 --> 00:49:58,079
and initiates a new container from a

00:49:57,280 --> 00:50:00,400
known good

00:49:58,079 --> 00:50:02,960
image so at that point you're really

00:50:00,400 --> 00:50:04,240
talking about a really stable reliable

00:50:02,960 --> 00:50:06,400
system

00:50:04,240 --> 00:50:09,920
which is going to be really kind of

00:50:06,400 --> 00:50:09,920
bulletproof for the future

00:50:10,720 --> 00:50:15,119
can you not run security onion in centos

00:50:13,520 --> 00:50:17,680
eight

00:50:15,119 --> 00:50:18,880
ah that's a really great question when

00:50:17,680 --> 00:50:21,280
cinos 8 was

00:50:18,880 --> 00:50:22,319
announced we took a a really good look

00:50:21,280 --> 00:50:24,319
at that because we

00:50:22,319 --> 00:50:26,960
we want to be able to embrace that and

00:50:24,319 --> 00:50:30,559
integrate with it as soon as possible

00:50:26,960 --> 00:50:32,640
the fine folks at red hat made a change

00:50:30,559 --> 00:50:33,839
in where they're no longer supporting

00:50:32,640 --> 00:50:36,000
docker they're

00:50:33,839 --> 00:50:38,319
instead supporting pod man which is kind

00:50:36,000 --> 00:50:40,720
of their own docker replacement

00:50:38,319 --> 00:50:41,760
and they're currently working on making

00:50:40,720 --> 00:50:45,839
the podman

00:50:41,760 --> 00:50:49,119
api compatible with the docker api

00:50:45,839 --> 00:50:52,880
once that happens then we should

00:50:49,119 --> 00:50:54,880
be able to support cenos eight

00:50:52,880 --> 00:50:58,240
but it all comes down to getting that

00:50:54,880 --> 00:51:01,280
api being fully compatible

00:50:58,240 --> 00:51:03,359
fair enough okay so those are the

00:51:01,280 --> 00:51:04,800
questions we've had so far i know we

00:51:03,359 --> 00:51:07,280
have about nine minutes left

00:51:04,800 --> 00:51:08,960
doug i'm gonna leave this to you um you

00:51:07,280 --> 00:51:10,880
can continue presenting or we can take a

00:51:08,960 --> 00:51:12,400
short break and pick back up at the top

00:51:10,880 --> 00:51:14,240
of the hour

00:51:12,400 --> 00:51:15,680
why don't we take a short break and

00:51:14,240 --> 00:51:16,960
we'll pick up at the top of the hour and

00:51:15,680 --> 00:51:22,880
we'll finish up the slides and we'll

00:51:16,960 --> 00:51:26,720
move into the uh the live demo

00:51:22,880 --> 00:51:28,559
it's a great session thank you

00:51:26,720 --> 00:51:29,839
i just like how you tie it all together

00:51:28,559 --> 00:51:32,000
from the company's name

00:51:29,839 --> 00:51:34,640
steve jobs bike for a mind and the

00:51:32,000 --> 00:51:38,000
company logo it was just great story

00:51:34,640 --> 00:51:40,240
appreciate that it's uh you know it's

00:51:38,000 --> 00:51:42,240
it's important to to do some

00:51:40,240 --> 00:51:45,040
storytelling and to be able to

00:51:42,240 --> 00:51:47,040
uh you know not just be uh the total

00:51:45,040 --> 00:51:49,200
nerd that i am but be able to

00:51:47,040 --> 00:51:50,880
you know connect with folks and tell

00:51:49,200 --> 00:51:51,440
stories and and tie these things

00:51:50,880 --> 00:51:53,200
together

00:51:51,440 --> 00:51:56,160
into something that's a little bit more

00:51:53,200 --> 00:51:58,480
meaningful than just bits and bytes

00:51:56,160 --> 00:51:59,520
yeah no i definitely loved it though for

00:51:58,480 --> 00:52:01,440
that type of stuff

00:51:59,520 --> 00:52:03,520
it like makes sense to me i'm not a

00:52:01,440 --> 00:52:05,200
technical person so when people give a

00:52:03,520 --> 00:52:07,040
story like that i'm like i'm on board

00:52:05,200 --> 00:52:09,359
with this now

00:52:07,040 --> 00:52:09,359
nice

00:52:13,200 --> 00:52:16,480
i didn't realize they must have like

00:52:14,720 --> 00:52:19,839
kicked us out or something like not

00:52:16,480 --> 00:52:19,839
sharing um

00:52:31,280 --> 00:52:37,760
so i do see one more question here um

00:52:35,040 --> 00:52:39,280
there are ways to run docker and sent

00:52:37,760 --> 00:52:41,760
centos 008

00:52:39,280 --> 00:52:43,040
if you want i can provide the info what

00:52:41,760 --> 00:52:44,640
it's not a question it was a statement

00:52:43,040 --> 00:52:48,079
that came in yet

00:52:44,640 --> 00:52:48,720
yeah uh we are aware that there are ways

00:52:48,079 --> 00:52:51,280
to

00:52:48,720 --> 00:52:51,839
run docker uh part of the problem is

00:52:51,280 --> 00:52:53,359
that

00:52:51,839 --> 00:52:55,599
we're not just trying to run docker

00:52:53,359 --> 00:52:58,000
itself we're also trying to use

00:52:55,599 --> 00:52:59,359
salt stack to orchestrate those docker

00:52:58,000 --> 00:53:02,400
containers so it's

00:52:59,359 --> 00:53:03,119
it all comes down to red hat making the

00:53:02,400 --> 00:53:06,400
podman

00:53:03,119 --> 00:53:10,640
api 100 compatible with the docker api

00:53:06,400 --> 00:53:14,000
and then salt stack making sure that

00:53:10,640 --> 00:53:16,720
their salt stack components for

00:53:14,000 --> 00:53:18,319
instantiating docker containers can

00:53:16,720 --> 00:53:21,040
actually instantiate those

00:53:18,319 --> 00:53:22,640
podman containers so there is a way

00:53:21,040 --> 00:53:23,920
forward it is going to happen at some

00:53:22,640 --> 00:53:29,839
point in time it's just kind of a

00:53:23,920 --> 00:53:29,839
waiting game at this point

00:53:40,559 --> 00:53:44,079
okay there's one more with security

00:53:42,319 --> 00:53:44,640
onion version two is it possible to

00:53:44,079 --> 00:53:46,720
generate

00:53:44,640 --> 00:53:48,000
contact notifications when service or

00:53:46,720 --> 00:53:50,720
host problems

00:53:48,000 --> 00:53:51,920
occur so they can get resolved via email

00:53:50,720 --> 00:53:54,480
pager or user

00:53:51,920 --> 00:53:56,240
defined method in case someone is

00:53:54,480 --> 00:53:58,000
currently away from their desk

00:53:56,240 --> 00:53:59,599
verse currently sitting and watching the

00:53:58,000 --> 00:54:01,200
alerts

00:53:59,599 --> 00:54:03,680
yes that's a really good question we

00:54:01,200 --> 00:54:06,800
have a process called a last alert

00:54:03,680 --> 00:54:09,359
and the idea is that it's going to

00:54:06,800 --> 00:54:10,000
based on your predefined criteria it's

00:54:09,359 --> 00:54:12,480
going to

00:54:10,000 --> 00:54:13,839
search across all of the data that's in

00:54:12,480 --> 00:54:15,680
elasticsearch

00:54:13,839 --> 00:54:17,440
and if anything matches your specific

00:54:15,680 --> 00:54:18,640
criteria whether it's an alert or

00:54:17,440 --> 00:54:20,800
anything else

00:54:18,640 --> 00:54:22,640
then a last alert can then take an

00:54:20,800 --> 00:54:22,880
action on that and that could be sending

00:54:22,640 --> 00:54:26,480
an

00:54:22,880 --> 00:54:28,319
email it could be integrating with slack

00:54:26,480 --> 00:54:29,760
and sending a message via slack or some

00:54:28,319 --> 00:54:31,119
other kind of a chat client

00:54:29,760 --> 00:54:33,680
so yeah there's lots of different ways

00:54:31,119 --> 00:54:33,680
of doing that

00:54:33,839 --> 00:54:37,920
good i think people like being able to

00:54:36,240 --> 00:54:38,400
have those options too for variety

00:54:37,920 --> 00:54:40,000
because

00:54:38,400 --> 00:54:41,760
there's so many different use cases and

00:54:40,000 --> 00:54:44,000
people operate so differently so it's

00:54:41,760 --> 00:54:47,680
good to have that flexibility

00:54:44,000 --> 00:54:48,880
absolutely yeah i see we're back at the

00:54:47,680 --> 00:54:50,880
top of the hour so

00:54:48,880 --> 00:54:53,119
everybody welcome back to all things

00:54:50,880 --> 00:54:55,520
open my name's katie grigg i'm here

00:54:53,119 --> 00:54:57,280
on the security talk track and i have

00:54:55,520 --> 00:54:57,680
the pleasure of introducing doug burks

00:54:57,280 --> 00:55:00,160
again

00:54:57,680 --> 00:55:00,799
from security onion so here we'll be

00:55:00,160 --> 00:55:03,040
doing

00:55:00,799 --> 00:55:04,559
the second part of his workshop today i

00:55:03,040 --> 00:55:06,000
know he's got a couple more slides and

00:55:04,559 --> 00:55:08,000
then the moment we've all been waiting

00:55:06,000 --> 00:55:10,480
for is the live demo so doug take it

00:55:08,000 --> 00:55:13,760
away all right well thank you very much

00:55:10,480 --> 00:55:18,079
let me share my screen again

00:55:13,760 --> 00:55:18,079
and i think that should be the right one

00:55:18,160 --> 00:55:24,720
can you confirm you can see that okay

00:55:21,359 --> 00:55:27,119
looks good all right so when we uh

00:55:24,720 --> 00:55:29,280
left off we were kind of talking about

00:55:27,119 --> 00:55:31,839
some of the different interfaces that we

00:55:29,280 --> 00:55:33,040
include in security onion 2. and the

00:55:31,839 --> 00:55:35,599
next one on the list

00:55:33,040 --> 00:55:36,559
is grafana and that's really where we're

00:55:35,599 --> 00:55:40,400
going to

00:55:36,559 --> 00:55:42,400
log in to see the how our system is

00:55:40,400 --> 00:55:46,160
doing health-wise

00:55:42,400 --> 00:55:49,359
and so we can see things like cpu usage

00:55:46,160 --> 00:55:51,440
disk usage do we have any packet loss

00:55:49,359 --> 00:55:52,640
and we can see this historically so by

00:55:51,440 --> 00:55:54,880
default it's going to show you for the

00:55:52,640 --> 00:55:57,839
last hour but you could change that to

00:55:54,880 --> 00:55:59,359
the last 24 hours the last week whatever

00:55:57,839 --> 00:56:00,480
and so you could chart these things over

00:55:59,359 --> 00:56:02,480
time and you can see

00:56:00,480 --> 00:56:04,799
exactly you know did we have a blip here

00:56:02,480 --> 00:56:06,240
do we have a service outage here

00:56:04,799 --> 00:56:08,160
and that kind of ties into one of the

00:56:06,240 --> 00:56:10,160
questions before about you know if

00:56:08,160 --> 00:56:11,440
there's a process problem or some other

00:56:10,160 --> 00:56:13,440
kind of an outage

00:56:11,440 --> 00:56:15,440
can we be alerted to that and grafana

00:56:13,440 --> 00:56:16,319
can help you to track that stuff down to

00:56:15,440 --> 00:56:18,160
determine

00:56:16,319 --> 00:56:19,680
you know look at your your graphs and

00:56:18,160 --> 00:56:21,599
and look for those blips and look for

00:56:19,680 --> 00:56:23,599
those peaks and valleys

00:56:21,599 --> 00:56:25,680
in addition to that uh we've done a lot

00:56:23,599 --> 00:56:27,359
of work for grafana to make it really

00:56:25,680 --> 00:56:28,960
kind of integrate with our distributed

00:56:27,359 --> 00:56:30,079
deployment model which we'll talk about

00:56:28,960 --> 00:56:32,960
in just a minute

00:56:30,079 --> 00:56:34,799
so that you can from the from a single

00:56:32,960 --> 00:56:36,640
pane of glass you can essentially see

00:56:34,799 --> 00:56:38,960
the health metrics from across your

00:56:36,640 --> 00:56:41,280
entire security onion deployment

00:56:38,960 --> 00:56:42,240
so you may have a single standalone box

00:56:41,280 --> 00:56:45,839
or you may have

00:56:42,240 --> 00:56:48,079
10 or 100 security onion boxes in one

00:56:45,839 --> 00:56:49,119
kind of grid but griffon is going to

00:56:48,079 --> 00:56:53,520
show you the health

00:56:49,119 --> 00:56:56,839
of all of those all right so next up

00:56:53,520 --> 00:56:58,880
we have what we call the analyst

00:56:56,839 --> 00:57:01,119
workstation and this is kind of an

00:56:58,880 --> 00:57:03,200
optional thing that we have built into

00:57:01,119 --> 00:57:05,680
security onion 2

00:57:03,200 --> 00:57:07,040
and the idea here is that you know if

00:57:05,680 --> 00:57:09,920
you're going to

00:57:07,040 --> 00:57:12,000
look at potentially malicious traffic

00:57:09,920 --> 00:57:15,200
and especially if you're going to be

00:57:12,000 --> 00:57:16,559
looking at suspected malware maybe

00:57:15,200 --> 00:57:20,000
you're going to

00:57:16,559 --> 00:57:22,640
kind of reconstruct that malware

00:57:20,000 --> 00:57:23,839
and maybe try to do some reverse

00:57:22,640 --> 00:57:27,280
engineering on it

00:57:23,839 --> 00:57:28,480
well then the scary thing is we don't

00:57:27,280 --> 00:57:30,960
want to do that

00:57:28,480 --> 00:57:32,960
in kind of our corporate windows image

00:57:30,960 --> 00:57:34,000
where if we accidentally execute that

00:57:32,960 --> 00:57:37,200
malware

00:57:34,000 --> 00:57:39,040
our day has just gone from bad to worse

00:57:37,200 --> 00:57:41,040
so it's important to do that in a

00:57:39,040 --> 00:57:42,400
relatively safe environment and that's

00:57:41,040 --> 00:57:45,119
exactly what we've built

00:57:42,400 --> 00:57:47,200
with the analyst workstation so if you

00:57:45,119 --> 00:57:50,079
install secured engine 2

00:57:47,200 --> 00:57:51,839
and you optionally install the analyst

00:57:50,079 --> 00:57:53,119
workstation you're going to get a full

00:57:51,839 --> 00:57:55,200
gnome desktop

00:57:53,119 --> 00:57:57,599
the chromium web browser you're going to

00:57:55,200 --> 00:58:00,240
get some pcapp utilities including

00:57:57,599 --> 00:58:01,520
network miner wireshark and a bunch of

00:58:00,240 --> 00:58:03,839
others

00:58:01,520 --> 00:58:05,599
so this gives you the capability to as

00:58:03,839 --> 00:58:07,440
you see on the screenshot go from our

00:58:05,599 --> 00:58:10,000
pcapp web interface

00:58:07,440 --> 00:58:11,680
where you can download a pcap and we've

00:58:10,000 --> 00:58:14,799
automatically configured

00:58:11,680 --> 00:58:15,520
network miner to be the registered pcap

00:58:14,799 --> 00:58:17,280
handler

00:58:15,520 --> 00:58:18,880
and so you can open that pcap up

00:58:17,280 --> 00:58:20,720
directly in network miner

00:58:18,880 --> 00:58:22,559
you can then go to this files tab and

00:58:20,720 --> 00:58:25,200
it's going to automatically

00:58:22,559 --> 00:58:26,480
extract any files from that network

00:58:25,200 --> 00:58:28,000
traffic

00:58:26,480 --> 00:58:29,920
and so when you think about that it's

00:58:28,000 --> 00:58:32,079
almost kind of a magic act right because

00:58:29,920 --> 00:58:34,240
you're you're then taking

00:58:32,079 --> 00:58:35,440
you're rewinding the video tape right

00:58:34,240 --> 00:58:37,119
you're taking your video camera

00:58:35,440 --> 00:58:38,240
rewinding the videotape but you're

00:58:37,119 --> 00:58:40,000
actually pulling out

00:58:38,240 --> 00:58:42,079
evidence from that videotape you're

00:58:40,000 --> 00:58:42,720
actually reconstructing the scene of the

00:58:42,079 --> 00:58:44,720
crime

00:58:42,720 --> 00:58:47,119
and actually pulling out that real live

00:58:44,720 --> 00:58:50,319
malware from that network traffic

00:58:47,119 --> 00:58:52,160
so that's kind of cool now let's talk

00:58:50,319 --> 00:58:53,839
about the power of community being a

00:58:52,160 --> 00:58:56,079
free and open source project of course

00:58:53,839 --> 00:58:57,359
community is very important to me

00:58:56,079 --> 00:58:59,119
and it's very important that we

00:58:57,359 --> 00:59:00,880
integrate with as many different

00:58:59,119 --> 00:59:02,960
communities as possible

00:59:00,880 --> 00:59:04,079
i mentioned before that we include the

00:59:02,960 --> 00:59:06,720
emerging threats

00:59:04,079 --> 00:59:07,760
rule set for network-based intrusion

00:59:06,720 --> 00:59:10,160
detection

00:59:07,760 --> 00:59:11,440
and so that's a rule set of over 20 000

00:59:10,160 --> 00:59:13,440
rules and so there's lots of

00:59:11,440 --> 00:59:15,359
intelligence built into that rule set

00:59:13,440 --> 00:59:16,240
there's lots of other defenders out

00:59:15,359 --> 00:59:18,880
there

00:59:16,240 --> 00:59:19,680
writing those rules and we get to

00:59:18,880 --> 00:59:22,240
benefit

00:59:19,680 --> 00:59:23,839
from their expertise and from their

00:59:22,240 --> 00:59:26,400
lessons learned

00:59:23,839 --> 00:59:27,040
same way with wazoo which as i mentioned

00:59:26,400 --> 00:59:29,920
before

00:59:27,040 --> 00:59:30,240
is kind of the next generation fork of

00:59:29,920 --> 00:59:33,280
the

00:59:30,240 --> 00:59:34,880
osac host intrusion detection system

00:59:33,280 --> 00:59:36,960
and it's got lots of rules that were

00:59:34,880 --> 00:59:40,240
kind of built on again

00:59:36,960 --> 00:59:41,680
this shared community expertise

00:59:40,240 --> 00:59:43,520
of what are the things that we're

00:59:41,680 --> 00:59:46,960
looking for across

00:59:43,520 --> 00:59:47,839
our endpoints and servers in addition to

00:59:46,960 --> 00:59:49,920
that we have

00:59:47,839 --> 00:59:52,400
sigma rules i mentioned that before and

00:59:49,920 --> 00:59:54,319
that's another great community

00:59:52,400 --> 00:59:56,160
and and really the cool thing here is

00:59:54,319 --> 00:59:58,480
that sigma is really kind of this

00:59:56,160 --> 00:59:59,599
generic abstraction layer of writing

00:59:58,480 --> 01:00:03,119
rules

00:59:59,599 --> 01:00:05,520
that can exist and can apply

01:00:03,119 --> 01:00:07,119
to multiple different backends what does

01:00:05,520 --> 01:00:09,200
that actually mean well

01:00:07,119 --> 01:00:10,319
you know some enterprises are storing

01:00:09,200 --> 01:00:12,319
all their logs in

01:00:10,319 --> 01:00:14,079
elasticsearch like we are with security

01:00:12,319 --> 01:00:16,480
onion other enterprises

01:00:14,079 --> 01:00:18,079
are storing their logs in splunk or

01:00:16,480 --> 01:00:20,880
something else

01:00:18,079 --> 01:00:21,920
and so traditionally we couldn't really

01:00:20,880 --> 01:00:25,040
benefit

01:00:21,920 --> 01:00:28,640
from the intelligence of those

01:00:25,040 --> 01:00:30,400
splunk users we couldn't really

01:00:28,640 --> 01:00:32,799
communicate with them we couldn't really

01:00:30,400 --> 01:00:34,079
cross pollinate we couldn't share ideas

01:00:32,799 --> 01:00:36,000
and detection

01:00:34,079 --> 01:00:38,160
concepts with them because we had

01:00:36,000 --> 01:00:40,079
different sort of backends

01:00:38,160 --> 01:00:42,000
but sigma changes all that because you

01:00:40,079 --> 01:00:45,119
can write sigma rules that are generic

01:00:42,000 --> 01:00:46,319
and abstract which then get converted to

01:00:45,119 --> 01:00:48,000
different back ends

01:00:46,319 --> 01:00:50,000
so you can convert your sigma roles to

01:00:48,000 --> 01:00:52,000
run on an elasticsearch backend

01:00:50,000 --> 01:00:54,000
and that's exactly what we do in

01:00:52,000 --> 01:00:56,000
security onion

01:00:54,000 --> 01:00:57,119
next we have yara rules and these are

01:00:56,000 --> 01:00:59,520
are great rules

01:00:57,119 --> 01:01:01,440
when it comes to file analysis and

01:00:59,520 --> 01:01:03,440
looking for malware specifically

01:01:01,440 --> 01:01:05,119
i mentioned before that we run strelka

01:01:03,440 --> 01:01:07,040
so whenever zeek

01:01:05,119 --> 01:01:08,240
sees that you're transferring files

01:01:07,040 --> 01:01:10,319
across the network

01:01:08,240 --> 01:01:13,440
it will take certain well-known file

01:01:10,319 --> 01:01:16,400
types like windows exes and pdf files

01:01:13,440 --> 01:01:17,119
extract those run them through strelka

01:01:16,400 --> 01:01:19,520
which then

01:01:17,119 --> 01:01:20,720
processes them using these yara rules

01:01:19,520 --> 01:01:21,599
and now we've got additional

01:01:20,720 --> 01:01:24,079
intelligence

01:01:21,599 --> 01:01:27,520
running across all of those files that

01:01:24,079 --> 01:01:30,880
are transiting across our network

01:01:27,520 --> 01:01:32,960
next we have elastic common schema and

01:01:30,880 --> 01:01:34,079
this is another great way for us to

01:01:32,960 --> 01:01:38,400
integrate with

01:01:34,079 --> 01:01:41,040
the elastic community at large because

01:01:38,400 --> 01:01:43,119
in years past with all of these

01:01:41,040 --> 01:01:44,559
different elastic search deployments out

01:01:43,119 --> 01:01:46,559
there

01:01:44,559 --> 01:01:48,240
some folks would define their data types

01:01:46,559 --> 01:01:50,079
one way other folks would define their

01:01:48,240 --> 01:01:52,400
data types the other way

01:01:50,079 --> 01:01:53,280
and it was really difficult then to be

01:01:52,400 --> 01:01:56,079
able to share

01:01:53,280 --> 01:01:58,480
visualizations and dashboards and

01:01:56,079 --> 01:02:00,079
elastic common schema really helps to

01:01:58,480 --> 01:02:02,400
resolve those differences

01:02:00,079 --> 01:02:06,240
because now we're defining a common

01:02:02,400 --> 01:02:08,480
schema so that this data type is defined

01:02:06,240 --> 01:02:09,440
this way this field is defined as this

01:02:08,480 --> 01:02:10,720
data type

01:02:09,440 --> 01:02:12,880
and that really helps us to be able to

01:02:10,720 --> 01:02:14,319
share visualizations and dashboards and

01:02:12,880 --> 01:02:16,480
integrate with other tools and

01:02:14,319 --> 01:02:19,520
technologies

01:02:16,480 --> 01:02:20,960
finally we have community id and we're

01:02:19,520 --> 01:02:21,680
going to talk about this for a few

01:02:20,960 --> 01:02:24,240
minutes

01:02:21,680 --> 01:02:26,319
and this is really cool because what

01:02:24,240 --> 01:02:28,319
this means is that

01:02:26,319 --> 01:02:31,280
we now have really kind of a common

01:02:28,319 --> 01:02:33,760
language to be able to correlate

01:02:31,280 --> 01:02:35,039
from a surrey kata network network-based

01:02:33,760 --> 01:02:38,240
ids alert

01:02:35,039 --> 01:02:41,280
to a z-clog to a sysmon

01:02:38,240 --> 01:02:43,039
log to a firewall log we'll actually see

01:02:41,280 --> 01:02:44,480
this over the next couple of slides what

01:02:43,039 --> 01:02:48,079
this means practically

01:02:44,480 --> 01:02:50,079
for you as a defender is that you know

01:02:48,079 --> 01:02:51,280
previously if you started with an ids

01:02:50,079 --> 01:02:54,000
alert

01:02:51,280 --> 01:02:55,920
if you wanted to cast a wider net and

01:02:54,000 --> 01:02:59,359
look for that additional context

01:02:55,920 --> 01:03:02,720
you may have had to run a manual query

01:02:59,359 --> 01:03:05,760
for say source ip and source port

01:03:02,720 --> 01:03:09,359
destination ip and destination port

01:03:05,760 --> 01:03:11,440
and that gets old really really fast

01:03:09,359 --> 01:03:12,240
when you're having to manually construct

01:03:11,440 --> 01:03:14,640
that query

01:03:12,240 --> 01:03:16,880
a hundred times a day or 500 times a day

01:03:14,640 --> 01:03:18,960
or however often you're doing it

01:03:16,880 --> 01:03:20,720
but community id really takes all the

01:03:18,960 --> 01:03:22,480
dirty work out of that because now we've

01:03:20,720 --> 01:03:24,640
got a single field

01:03:22,480 --> 01:03:26,880
which enables us to correlate between

01:03:24,640 --> 01:03:30,000
all those different data types

01:03:26,880 --> 01:03:31,680
much much faster than we could before

01:03:30,000 --> 01:03:33,760
again it's that bicycle that's

01:03:31,680 --> 01:03:36,960
propelling us to go much further much

01:03:33,760 --> 01:03:39,200
faster than we could in the past

01:03:36,960 --> 01:03:40,480
so let's see what that looks like surya

01:03:39,200 --> 01:03:42,960
kata includes

01:03:40,480 --> 01:03:44,079
native support for community id and in

01:03:42,960 --> 01:03:47,119
security onion 2

01:03:44,079 --> 01:03:47,680
we turn that on by default so you can

01:03:47,119 --> 01:03:49,760
see

01:03:47,680 --> 01:03:51,440
this chart where on the left these are

01:03:49,760 --> 01:03:54,480
our surikata alerts

01:03:51,440 --> 01:03:58,480
on the right these are the community id

01:03:54,480 --> 01:04:00,319
values for all of the different tcp

01:03:58,480 --> 01:04:03,039
streams where those alerts

01:04:00,319 --> 01:04:04,960
fired now if we wanted to correlate

01:04:03,039 --> 01:04:06,160
those surycada alerts to the

01:04:04,960 --> 01:04:08,559
corresponding z

01:04:06,160 --> 01:04:09,920
logs we could use that community id

01:04:08,559 --> 01:04:12,960
value

01:04:09,920 --> 01:04:15,760
and again we see that zeke

01:04:12,960 --> 01:04:17,760
has native support for community id and

01:04:15,760 --> 01:04:20,559
in security engine 2 we turn that

01:04:17,760 --> 01:04:21,760
on by default so here you see some

01:04:20,559 --> 01:04:24,720
network connections

01:04:21,760 --> 01:04:25,119
source ip destination ip and how zeke

01:04:24,720 --> 01:04:28,319
has

01:04:25,119 --> 01:04:31,359
automatically computed the community id

01:04:28,319 --> 01:04:33,680
value so that we can correlate that

01:04:31,359 --> 01:04:35,760
backwards and forwards with our suricata

01:04:33,680 --> 01:04:37,680
alerts

01:04:35,760 --> 01:04:40,480
now in addition to that we sponsored the

01:04:37,680 --> 01:04:42,720
development of community id support in

01:04:40,480 --> 01:04:44,799
os query we talked about osquery before

01:04:42,720 --> 01:04:46,880
how it's a great endpoint agent

01:04:44,799 --> 01:04:49,920
and now this enables us to say okay if

01:04:46,880 --> 01:04:53,280
we found an interesting community id

01:04:49,920 --> 01:04:54,240
we can now run a query across all of our

01:04:53,280 --> 01:04:57,440
os query

01:04:54,240 --> 01:04:59,760
endpoints and actually look

01:04:57,440 --> 01:05:00,799
for the process that generated that

01:04:59,760 --> 01:05:03,359
traffic

01:05:00,799 --> 01:05:04,960
and that's a really amazing

01:05:03,359 --> 01:05:07,440
functionality to have

01:05:04,960 --> 01:05:09,760
to be able to look at some network

01:05:07,440 --> 01:05:12,079
traffic and trace it all the way back

01:05:09,760 --> 01:05:13,520
to the particular process running on a

01:05:12,079 --> 01:05:15,359
particular host

01:05:13,520 --> 01:05:17,839
and that's really going to turbo charge

01:05:15,359 --> 01:05:21,359
your incident response process

01:05:17,839 --> 01:05:24,240
but we can make it even better because

01:05:21,359 --> 01:05:25,200
what about tools where we can't easily

01:05:24,240 --> 01:05:28,240
add

01:05:25,200 --> 01:05:30,480
native community id support so

01:05:28,240 --> 01:05:32,960
os query was open source so all we had

01:05:30,480 --> 01:05:33,599
to do was sponsor a developer to work on

01:05:32,960 --> 01:05:35,359
it

01:05:33,599 --> 01:05:36,960
but for things like sysmon which we

01:05:35,359 --> 01:05:39,839
talked about before

01:05:36,960 --> 01:05:40,240
it's a great free utility however it's

01:05:39,839 --> 01:05:44,400
not

01:05:40,240 --> 01:05:46,240
open source they do have a github repo

01:05:44,400 --> 01:05:49,039
as you see here on the screen

01:05:46,240 --> 01:05:50,640
and folks have requested that community

01:05:49,039 --> 01:05:53,119
id be added

01:05:50,640 --> 01:05:54,799
to sysmon it's been accepted as a

01:05:53,119 --> 01:05:55,680
feature request and added to their

01:05:54,799 --> 01:05:57,359
backlog

01:05:55,680 --> 01:06:00,400
but it simply hasn't been worked on and

01:05:57,359 --> 01:06:03,200
we don't have an eta for it yet

01:06:00,400 --> 01:06:04,640
so this is just one example of many you

01:06:03,200 --> 01:06:07,280
know another example might be

01:06:04,640 --> 01:06:08,240
firewalls where you know you might want

01:06:07,280 --> 01:06:10,079
to collect

01:06:08,240 --> 01:06:12,640
firewall logs from all the firewalls in

01:06:10,079 --> 01:06:16,079
your enterprise but most firewalls don't

01:06:12,640 --> 01:06:18,240
natively support community id

01:06:16,079 --> 01:06:20,240
but we came up with a solution for that

01:06:18,240 --> 01:06:23,280
so we sponsored the development

01:06:20,240 --> 01:06:27,039
of an elasticsearch ingest processor

01:06:23,280 --> 01:06:30,319
for community id what that means is that

01:06:27,039 --> 01:06:32,960
any log that contains

01:06:30,319 --> 01:06:34,319
source ip source port destination ip

01:06:32,960 --> 01:06:36,559
destination port

01:06:34,319 --> 01:06:38,160
and the protocol then we can

01:06:36,559 --> 01:06:41,599
automatically generate

01:06:38,160 --> 01:06:43,440
that community id value on the fly

01:06:41,599 --> 01:06:44,720
so you could send sysmon logs to

01:06:43,440 --> 01:06:46,880
security onion 2

01:06:44,720 --> 01:06:48,799
you could send firewall logs to secured

01:06:46,880 --> 01:06:49,599
engine 2 and it's going to automatically

01:06:48,799 --> 01:06:53,599
generate

01:06:49,599 --> 01:06:55,359
those community id values on the fly

01:06:53,599 --> 01:06:56,960
and that's tremendously powerful as

01:06:55,359 --> 01:06:59,119
we'll see in the demo in just a few

01:06:56,960 --> 01:07:01,039
minutes

01:06:59,119 --> 01:07:02,480
so let's talk about some use cases i'm

01:07:01,039 --> 01:07:03,440
going to move fairly quickly through

01:07:02,480 --> 01:07:05,039
this so we can

01:07:03,440 --> 01:07:06,720
get into the live demo which i know

01:07:05,039 --> 01:07:08,559
you're all itching to see

01:07:06,720 --> 01:07:10,400
so our first use case is a small

01:07:08,559 --> 01:07:11,200
forensics vm and this is kind of what we

01:07:10,400 --> 01:07:12,960
talked about

01:07:11,200 --> 01:07:15,280
really at the beginning of the talk in

01:07:12,960 --> 01:07:17,760
terms of we want you to have

01:07:15,280 --> 01:07:19,760
the quickest and easiest experience if

01:07:17,760 --> 01:07:21,039
this is your first time running security

01:07:19,760 --> 01:07:23,440
onion

01:07:21,039 --> 01:07:25,280
just install a very minimal virtual

01:07:23,440 --> 01:07:26,480
machine all you need is four gigabytes

01:07:25,280 --> 01:07:28,880
of ram

01:07:26,480 --> 01:07:31,520
and you can install security onion 2 and

01:07:28,880 --> 01:07:33,839
you can do this small forensics vm

01:07:31,520 --> 01:07:35,280
you can run a utility we have called so

01:07:33,839 --> 01:07:37,280
import pcap

01:07:35,280 --> 01:07:38,799
and so if you have an interesting pcap

01:07:37,280 --> 01:07:40,960
that you want to import

01:07:38,799 --> 01:07:42,880
you simply run so import pcapp and give

01:07:40,960 --> 01:07:43,599
it the full path to one or more pcap

01:07:42,880 --> 01:07:45,359
files

01:07:43,599 --> 01:07:47,760
and it will then import that it'll run

01:07:45,359 --> 01:07:49,839
it across surreycata and z

01:07:47,760 --> 01:07:51,599
can put it in a place where we can pivot

01:07:49,839 --> 01:07:54,880
the full packet capture

01:07:51,599 --> 01:07:56,559
and it works really really nicely

01:07:54,880 --> 01:07:58,720
moving from there once you've kind of

01:07:56,559 --> 01:08:00,480
gotten your feet wet with security onion

01:07:58,720 --> 01:08:03,839
2 and you want to actually

01:08:00,480 --> 01:08:06,160
put this into production you might start

01:08:03,839 --> 01:08:06,720
with a standalone deployment that's a

01:08:06,160 --> 01:08:10,319
sting

01:08:06,720 --> 01:08:13,440
single standalone server box

01:08:10,319 --> 01:08:15,440
which is running pretty much all of the

01:08:13,440 --> 01:08:18,960
components of security onion 2

01:08:15,440 --> 01:08:20,239
inside of that one single standalone box

01:08:18,960 --> 01:08:21,839
but now once you've kind of gotten

01:08:20,239 --> 01:08:22,319
comfortable with that that might work

01:08:21,839 --> 01:08:24,080
for

01:08:22,319 --> 01:08:26,159
small networks that might work for a

01:08:24,080 --> 01:08:28,960
small number of endpoints

01:08:26,159 --> 01:08:31,199
but if you really want to be fully

01:08:28,960 --> 01:08:32,719
scalable for the enterprise

01:08:31,199 --> 01:08:34,880
then you're going to be looking at a

01:08:32,719 --> 01:08:36,960
distributed deployment

01:08:34,880 --> 01:08:38,080
this is where you would have a manager

01:08:36,960 --> 01:08:40,400
that manages your entire

01:08:38,080 --> 01:08:42,400
deployment you've got one or more search

01:08:40,400 --> 01:08:42,880
nodes on the back end that's going to

01:08:42,400 --> 01:08:45,679
store

01:08:42,880 --> 01:08:46,560
all of your logs and then you're going

01:08:45,679 --> 01:08:47,839
to have one or more

01:08:46,560 --> 01:08:49,759
forward nodes and those are going to be

01:08:47,839 --> 01:08:50,400
your network sensors and that's what's

01:08:49,759 --> 01:08:52,719
going to be

01:08:50,400 --> 01:08:54,799
generating the logs and sending them to

01:08:52,719 --> 01:08:58,400
those search nodes on the back end we'll

01:08:54,799 --> 01:09:00,799
see a diagram of this in just a minute

01:08:58,400 --> 01:09:02,400
so the small forensics vm again it's

01:09:00,799 --> 01:09:04,239
very minimal

01:09:02,400 --> 01:09:06,000
a minimal set of components that you see

01:09:04,239 --> 01:09:08,159
here in the diagram

01:09:06,000 --> 01:09:10,640
contrast that with the standalone

01:09:08,159 --> 01:09:12,880
deployment which has more components

01:09:10,640 --> 01:09:14,960
meaning that it's a little bit more

01:09:12,880 --> 01:09:17,440
scalable it's a little bit more flexible

01:09:14,960 --> 01:09:19,120
a little bit more customizable

01:09:17,440 --> 01:09:21,199
and it's a little bit more kind of fault

01:09:19,120 --> 01:09:23,279
tolerant because it's got redis

01:09:21,199 --> 01:09:24,880
built in as kind of a buffer if a

01:09:23,279 --> 01:09:26,880
process kind of skips a beat for a

01:09:24,880 --> 01:09:28,319
little while redis can kind of cue logs

01:09:26,880 --> 01:09:29,359
up so we don't really miss anything

01:09:28,319 --> 01:09:32,799
there

01:09:29,359 --> 01:09:35,359
so that's a little bit more stable and

01:09:32,799 --> 01:09:37,359
reliable for enterprise deployments but

01:09:35,359 --> 01:09:38,880
again it's only going to work for kind

01:09:37,359 --> 01:09:40,960
of limited networks

01:09:38,880 --> 01:09:42,239
limited number of endpoints if you

01:09:40,960 --> 01:09:45,520
really want true

01:09:42,239 --> 01:09:47,440
enterprise scalability you want this

01:09:45,520 --> 01:09:48,560
distributed deployment

01:09:47,440 --> 01:09:51,120
and that's where we're going to have

01:09:48,560 --> 01:09:52,159
this manager that controls the entire

01:09:51,120 --> 01:09:53,839
grid

01:09:52,159 --> 01:09:55,360
you're going to have your forward nodes

01:09:53,839 --> 01:09:57,199
one or more of those which are going to

01:09:55,360 --> 01:10:00,560
act as your network sensors

01:09:57,199 --> 01:10:03,760
generating z logs surrey catalogs

01:10:00,560 --> 01:10:05,760
collecting syslog from your remote

01:10:03,760 --> 01:10:07,760
syslog senders and sending all that

01:10:05,760 --> 01:10:08,719
through the manager to back-end search

01:10:07,760 --> 01:10:10,640
nodes

01:10:08,719 --> 01:10:12,960
and the brilliant thing about this

01:10:10,640 --> 01:10:15,840
design is that if you need to

01:10:12,960 --> 01:10:16,880
continue to grow it you can simply snap

01:10:15,840 --> 01:10:19,199
in additional

01:10:16,880 --> 01:10:20,000
nodes so if you need more network

01:10:19,199 --> 01:10:21,840
visibility

01:10:20,000 --> 01:10:24,880
you simply add more forward nodes up

01:10:21,840 --> 01:10:27,600
here if that then starts to kind of fill

01:10:24,880 --> 01:10:29,920
up your existing search nodes down here

01:10:27,600 --> 01:10:30,960
then you can simply snap in additional

01:10:29,920 --> 01:10:33,920
search nodes

01:10:30,960 --> 01:10:36,400
and they'll continue to load balance all

01:10:33,920 --> 01:10:39,120
of the new logs that come in

01:10:36,400 --> 01:10:39,840
so that's kind of our three main big

01:10:39,120 --> 01:10:43,199
deployment

01:10:39,840 --> 01:10:44,880
models to kind of give you a sense of

01:10:43,199 --> 01:10:46,880
how you can get started with securitying

01:10:44,880 --> 01:10:50,080
and how you can really scale it up to

01:10:46,880 --> 01:10:51,600
large enterprise usage

01:10:50,080 --> 01:10:53,360
now i mentioned before that we made some

01:10:51,600 --> 01:10:55,840
major announcements last friday and that

01:10:53,360 --> 01:10:57,520
includes this release of security onion

01:10:55,840 --> 01:10:58,640
2 but we also made some other major

01:10:57,520 --> 01:11:01,840
announcements

01:10:58,640 --> 01:11:03,760
so any good open source project

01:11:01,840 --> 01:11:05,360
needs to have good documentation we've

01:11:03,760 --> 01:11:07,840
spent a lot of time and effort

01:11:05,360 --> 01:11:09,040
making sure that we do have really good

01:11:07,840 --> 01:11:12,199
documentation

01:11:09,040 --> 01:11:13,679
so that's available now you can go to

01:11:12,199 --> 01:11:15,679
docs.securityonion.net

01:11:13,679 --> 01:11:18,560
and all of that documentation has been

01:11:15,679 --> 01:11:20,800
updated for the new security onion 2.

01:11:18,560 --> 01:11:21,600
uh i i should mention that documentation

01:11:20,800 --> 01:11:24,400
is always

01:11:21,600 --> 01:11:26,320
a work in progress so if you if you

01:11:24,400 --> 01:11:27,920
notice anything is missing or incorrect

01:11:26,320 --> 01:11:30,719
there just simply reach out to us and

01:11:27,920 --> 01:11:33,280
we'll get it corrected pretty quickly

01:11:30,719 --> 01:11:35,840
to go along with that and as a part of

01:11:33,280 --> 01:11:36,880
that documentation we have a handy dandy

01:11:35,840 --> 01:11:39,040
cheat sheet

01:11:36,880 --> 01:11:40,239
so this is a nice desk reference that

01:11:39,040 --> 01:11:42,000
you can print out

01:11:40,239 --> 01:11:43,679
either front and back or two separate

01:11:42,000 --> 01:11:44,960
pages however you want to do it

01:11:43,679 --> 01:11:47,120
and you can have it right there and it's

01:11:44,960 --> 01:11:49,280
got the main kind of commands that you

01:11:47,120 --> 01:11:51,040
would be running on a daily basis

01:11:49,280 --> 01:11:52,400
and kind of the main file system

01:11:51,040 --> 01:11:53,520
locations that you might need to be

01:11:52,400 --> 01:11:55,520
aware of

01:11:53,520 --> 01:11:57,920
as you're kind of monitoring and

01:11:55,520 --> 01:12:00,000
administering your system

01:11:57,920 --> 01:12:01,199
we also announced a new website so you

01:12:00,000 --> 01:12:03,040
know and when you're when you're

01:12:01,199 --> 01:12:04,400
dropping a brand new platform that's

01:12:03,040 --> 01:12:05,760
three years in the making

01:12:04,400 --> 01:12:07,679
you take a look at everything that you

01:12:05,760 --> 01:12:08,000
do and you kind of redesign everything

01:12:07,679 --> 01:12:10,800
at

01:12:08,000 --> 01:12:12,480
once to include the platform the logos

01:12:10,800 --> 01:12:14,000
the website all the marketing and

01:12:12,480 --> 01:12:14,640
everything so you can find our new

01:12:14,000 --> 01:12:17,360
website

01:12:14,640 --> 01:12:19,040
at securityonion.net we've spent a lot

01:12:17,360 --> 01:12:21,760
of time and effort again making sure

01:12:19,040 --> 01:12:23,760
it's it's beautiful but that it also

01:12:21,760 --> 01:12:26,159
provides the information that you need

01:12:23,760 --> 01:12:28,159
at your fingertips whether that's about

01:12:26,159 --> 01:12:28,560
the free and open source project itself

01:12:28,159 --> 01:12:30,400
or

01:12:28,560 --> 01:12:32,159
about you know some of the commercial

01:12:30,400 --> 01:12:33,760
products and services that we provide

01:12:32,159 --> 01:12:34,400
alongside that free and open source

01:12:33,760 --> 01:12:37,360
project

01:12:34,400 --> 01:12:39,760
it's all right there at your fingertips

01:12:37,360 --> 01:12:41,040
we've also got a new community support

01:12:39,760 --> 01:12:43,600
forum

01:12:41,040 --> 01:12:46,159
so github has this new thing called

01:12:43,600 --> 01:12:48,960
discussions which is not even available

01:12:46,159 --> 01:12:50,080
to the entire public yet we were

01:12:48,960 --> 01:12:52,719
fortunate enough to

01:12:50,080 --> 01:12:53,520
kind of get in on the private beta of

01:12:52,719 --> 01:12:55,280
that

01:12:53,520 --> 01:12:57,120
and so we're now using that as our new

01:12:55,280 --> 01:12:59,199
community support forum so we'll be

01:12:57,120 --> 01:13:00,640
moving away from our traditional

01:12:59,199 --> 01:13:02,880
google group and away from our

01:13:00,640 --> 01:13:05,600
traditional subreddit which we had for

01:13:02,880 --> 01:13:06,080
a number of years and github discussions

01:13:05,600 --> 01:13:08,320
is where

01:13:06,080 --> 01:13:10,000
all of our new community support for

01:13:08,320 --> 01:13:11,520
security onion 2

01:13:10,000 --> 01:13:14,320
will be held and the nice thing about

01:13:11,520 --> 01:13:16,000
that is that it's right there in github

01:13:14,320 --> 01:13:19,199
right with the code right with the

01:13:16,000 --> 01:13:20,320
issues and it's nicely and tightly

01:13:19,199 --> 01:13:23,360
integrated

01:13:20,320 --> 01:13:24,480
with the rest of our repo

01:13:23,360 --> 01:13:26,000
so we made lots and lots of

01:13:24,480 --> 01:13:27,920
announcements last friday and that's

01:13:26,000 --> 01:13:29,120
just kind of a little hint of some of

01:13:27,920 --> 01:13:30,400
those things

01:13:29,120 --> 01:13:32,239
if you'd like to see some of the other

01:13:30,400 --> 01:13:34,320
announcements that we made you can catch

01:13:32,239 --> 01:13:36,560
the recording from last friday

01:13:34,320 --> 01:13:39,360
which we'll be publishing to youtube at

01:13:36,560 --> 01:13:42,080
some point this week

01:13:39,360 --> 01:13:44,480
all right now it's time for that moment

01:13:42,080 --> 01:13:47,360
that you've all been waiting for it

01:13:44,480 --> 01:13:48,000
it's time for that live demo uh to see

01:13:47,360 --> 01:13:50,239
if

01:13:48,000 --> 01:13:52,480
the live demo actually succeeds or if it

01:13:50,239 --> 01:13:54,320
goes down in a blaze of glory

01:13:52,480 --> 01:13:55,600
so we'll see how it goes but let me kind

01:13:54,320 --> 01:13:58,400
of set the stage

01:13:55,600 --> 01:14:00,320
for this live demo and we'll go back to

01:13:58,400 --> 01:14:03,600
that architecture diagram that we saw at

01:14:00,320 --> 01:14:05,440
the very beginning of this presentation

01:14:03,600 --> 01:14:07,120
and that's the fact that we have an

01:14:05,440 --> 01:14:09,679
adversary out there on the big bad

01:14:07,120 --> 01:14:11,280
internet we have a firewall we have our

01:14:09,679 --> 01:14:13,120
internal network here

01:14:11,280 --> 01:14:15,120
with security onion monitoring that

01:14:13,120 --> 01:14:17,840
north-south traffic of all the traffic

01:14:15,120 --> 01:14:20,400
entering and leaving our network

01:14:17,840 --> 01:14:22,080
and then we want to get some additional

01:14:20,400 --> 01:14:24,480
endpoint visibility

01:14:22,080 --> 01:14:26,080
from our endpoints here by collecting

01:14:24,480 --> 01:14:28,239
logs directly from that

01:14:26,080 --> 01:14:29,280
endpoint so that's exactly what i've

01:14:28,239 --> 01:14:31,040
done i've

01:14:29,280 --> 01:14:33,120
set up some virtual machines here on my

01:14:31,040 --> 01:14:36,159
laptop i've got

01:14:33,120 --> 01:14:39,520
a windows 10 endpoint

01:14:36,159 --> 01:14:42,320
and i've also got a security onion 2

01:14:39,520 --> 01:14:43,600
virtual machine i've also got a pfsense

01:14:42,320 --> 01:14:46,000
firewall

01:14:43,600 --> 01:14:48,080
and they're all connected together so

01:14:46,000 --> 01:14:49,440
pfsense is sending all its firewall logs

01:14:48,080 --> 01:14:51,120
to security onion

01:14:49,440 --> 01:14:54,000
security onion is monitoring the network

01:14:51,120 --> 01:14:56,719
traffic here and the windows 10

01:14:54,000 --> 01:14:57,920
is sending its logs to security onion as

01:14:56,719 --> 01:15:00,400
well

01:14:57,920 --> 01:15:02,320
so what we're going to try to see is if

01:15:00,400 --> 01:15:04,640
we can see what it actually looks like

01:15:02,320 --> 01:15:06,719
to use all these new web interfaces

01:15:04,640 --> 01:15:08,640
to slice and dice all these logs to

01:15:06,719 --> 01:15:10,480
leverage community id

01:15:08,640 --> 01:15:11,679
to correlate all these different data

01:15:10,480 --> 01:15:14,320
types together

01:15:11,679 --> 01:15:15,040
to really make better sense of what's

01:15:14,320 --> 01:15:18,159
happening

01:15:15,040 --> 01:15:21,199
on our network so without further a

01:15:18,159 --> 01:15:23,120
further ado here we go let me flip over

01:15:21,199 --> 01:15:25,840
to my vm here

01:15:23,120 --> 01:15:26,320
and as you can see this is our security

01:15:25,840 --> 01:15:29,120
onion

01:15:26,320 --> 01:15:30,320
2 virtual machine i'm running the

01:15:29,120 --> 01:15:32,480
optional

01:15:30,320 --> 01:15:34,800
analyst workstation so i've got the

01:15:32,480 --> 01:15:36,080
additional kind of graphical tools built

01:15:34,800 --> 01:15:39,600
in

01:15:36,080 --> 01:15:40,719
and so when you log into security onion

01:15:39,600 --> 01:15:43,440
console

01:15:40,719 --> 01:15:44,719
you're gonna see those tools which as i

01:15:43,440 --> 01:15:45,440
mentioned in the first half of this

01:15:44,719 --> 01:15:48,080
presentation

01:15:45,440 --> 01:15:49,120
are built right into security console

01:15:48,080 --> 01:15:51,920
itself

01:15:49,120 --> 01:15:54,159
and that's things like alerts and hunt

01:15:51,920 --> 01:15:56,080
and pcap

01:15:54,159 --> 01:15:58,560
and then we've got the external tools

01:15:56,080 --> 01:16:00,080
down here things like cabana grafana and

01:15:58,560 --> 01:16:03,440
etc

01:16:00,080 --> 01:16:06,640
and so let's kind of start with alerts

01:16:03,440 --> 01:16:08,400
because for many organizations that's

01:16:06,640 --> 01:16:09,199
really going to kind of be the starting

01:16:08,400 --> 01:16:11,520
point

01:16:09,199 --> 01:16:13,280
uh where they kind of get their feet wet

01:16:11,520 --> 01:16:15,440
with security onion

01:16:13,280 --> 01:16:17,360
and so we've got the security onion

01:16:15,440 --> 01:16:19,040
sensor it's monitoring network traffic

01:16:17,360 --> 01:16:21,679
it's collecting host-based logs

01:16:19,040 --> 01:16:22,159
it's generating alerts and so we start

01:16:21,679 --> 01:16:24,640
there

01:16:22,159 --> 01:16:25,760
at alerts we take a look at some of

01:16:24,640 --> 01:16:29,440
these alerts

01:16:25,760 --> 01:16:29,840
that we have and so what you can see if

01:16:29,440 --> 01:16:32,080
you look

01:16:29,840 --> 01:16:34,159
under event module we have some logs

01:16:32,080 --> 01:16:35,600
coming from osec that's our host-based

01:16:34,159 --> 01:16:37,840
intrusion detection system

01:16:35,600 --> 01:16:39,679
we have some logs coming from surikata

01:16:37,840 --> 01:16:41,199
and that's our network-based intrusion

01:16:39,679 --> 01:16:44,480
detection system

01:16:41,199 --> 01:16:46,480
these alerts are at different severities

01:16:44,480 --> 01:16:47,520
and so some are low some are medium some

01:16:46,480 --> 01:16:49,760
are high

01:16:47,520 --> 01:16:53,040
and so we could slice and dice according

01:16:49,760 --> 01:16:55,120
to event module or severity

01:16:53,040 --> 01:16:56,239
but let's just kind of pick and choose a

01:16:55,120 --> 01:16:58,080
couple of these

01:16:56,239 --> 01:17:00,000
and kind of think about the things that

01:16:58,080 --> 01:17:02,400
we might want to do

01:17:00,000 --> 01:17:03,679
as defenders when we're looking at our

01:17:02,400 --> 01:17:05,600
alerts

01:17:03,679 --> 01:17:07,040
so for example let's just kind of start

01:17:05,600 --> 01:17:10,080
with these first two

01:17:07,040 --> 01:17:11,199
at the top here these are from osec and

01:17:10,080 --> 01:17:14,000
i know what these are

01:17:11,199 --> 01:17:15,040
these are not that big of a deal and so

01:17:14,000 --> 01:17:17,600
one of the things that you do

01:17:15,040 --> 01:17:18,560
when looking at alerts is triaging those

01:17:17,600 --> 01:17:20,880
alerts

01:17:18,560 --> 01:17:22,159
and we talked about kind of managing

01:17:20,880 --> 01:17:25,280
that alert's cue

01:17:22,159 --> 01:17:26,719
working that q down to zero and so if i

01:17:25,280 --> 01:17:28,400
know what these are and i'm not

01:17:26,719 --> 01:17:29,120
concerned about them well then i just

01:17:28,400 --> 01:17:31,280
need to go

01:17:29,120 --> 01:17:33,199
and acknowledge them so if i click this

01:17:31,280 --> 01:17:35,280
first bell icon

01:17:33,199 --> 01:17:36,480
it's going to remove it from that

01:17:35,280 --> 01:17:38,560
display and i'll go ahead and do the

01:17:36,480 --> 01:17:41,040
second one as well

01:17:38,560 --> 01:17:41,920
so now if i go and toggle the

01:17:41,040 --> 01:17:44,560
acknowledged

01:17:41,920 --> 01:17:46,719
slider it's going to show me those

01:17:44,560 --> 01:17:50,159
alerts that i just acknowledged

01:17:46,719 --> 01:17:52,320
so i've started working that cue down by

01:17:50,159 --> 01:17:54,080
reviewing and triaging those alerts and

01:17:52,320 --> 01:17:54,480
acknowledging those things that i i

01:17:54,080 --> 01:17:57,600
really

01:17:54,480 --> 01:17:59,199
don't care about now if i turn that

01:17:57,600 --> 01:18:00,560
acknowledge slider off i'm back to the

01:17:59,199 --> 01:18:02,719
main default view

01:18:00,560 --> 01:18:04,239
of all of those alerts that have not

01:18:02,719 --> 01:18:07,679
been reviewed yet

01:18:04,239 --> 01:18:10,159
and i need to start taking a look at

01:18:07,679 --> 01:18:12,560
so now let's let's start thinking about

01:18:10,159 --> 01:18:15,360
what else can we do from here

01:18:12,560 --> 01:18:16,719
because number one when i'm looking at

01:18:15,360 --> 01:18:18,800
alerts

01:18:16,719 --> 01:18:20,239
i need to do that triage process that i

01:18:18,800 --> 01:18:22,400
talked about

01:18:20,239 --> 01:18:24,159
and in order to do that i might need to

01:18:22,400 --> 01:18:28,159
get some additional context

01:18:24,159 --> 01:18:29,920
around that alert so for example let's

01:18:28,159 --> 01:18:32,320
let's find an interesting alert here

01:18:29,920 --> 01:18:34,400
like this one this is in the

01:18:32,320 --> 01:18:35,920
emerging threats rule set it's in the

01:18:34,400 --> 01:18:39,120
policy category

01:18:35,920 --> 01:18:42,400
and it's for outgoing basic auth base64

01:18:39,120 --> 01:18:45,440
http password detected unencrypted

01:18:42,400 --> 01:18:46,480
now that's a mouthful but essentially

01:18:45,440 --> 01:18:50,080
what that means

01:18:46,480 --> 01:18:52,320
is that there was some web traffic where

01:18:50,080 --> 01:18:53,280
there was some kind of credentials being

01:18:52,320 --> 01:18:56,640
sent using

01:18:53,280 --> 01:18:59,360
basic authentication which means it's

01:18:56,640 --> 01:19:00,640
unencrypted and so if these were

01:18:59,360 --> 01:19:02,640
sensitive credentials

01:19:00,640 --> 01:19:04,080
well that might be a security incident

01:19:02,640 --> 01:19:05,920
we might need to engage the instant

01:19:04,080 --> 01:19:06,800
response process because now we've had

01:19:05,920 --> 01:19:09,440
some

01:19:06,800 --> 01:19:11,600
some kind of exposure of our sensitive

01:19:09,440 --> 01:19:14,080
credentials

01:19:11,600 --> 01:19:15,360
so the next thing we might want to do is

01:19:14,080 --> 01:19:18,400
we might ask the question well

01:19:15,360 --> 01:19:21,360
what were the credentials that were

01:19:18,400 --> 01:19:23,840
exposed because maybe i care about them

01:19:21,360 --> 01:19:26,159
but maybe i don't maybe it's just some

01:19:23,840 --> 01:19:28,800
default credentials for some kind of

01:19:26,159 --> 01:19:30,960
device that i just don't even care about

01:19:28,800 --> 01:19:32,080
and so i've got a couple of options here

01:19:30,960 --> 01:19:33,840
if i want to kind of drill

01:19:32,080 --> 01:19:36,480
further into this i can click on this

01:19:33,840 --> 01:19:39,440
and that brings up our quick action bar

01:19:36,480 --> 01:19:40,480
and we can click this to drill down into

01:19:39,440 --> 01:19:41,920
the value

01:19:40,480 --> 01:19:44,640
and that gives us a little bit extra

01:19:41,920 --> 01:19:47,360
information here we could click on this

01:19:44,640 --> 01:19:49,360
arrow to open up the log and see all of

01:19:47,360 --> 01:19:51,120
the fields within the log

01:19:49,360 --> 01:19:52,800
and that gives us a little bit of extra

01:19:51,120 --> 01:19:55,120
information

01:19:52,800 --> 01:19:56,159
including this network data decoded

01:19:55,120 --> 01:20:00,239
field

01:19:56,159 --> 01:20:04,480
which shows us the http get request

01:20:00,239 --> 01:20:07,120
going to testmynids.org and

01:20:04,480 --> 01:20:09,360
here's the authorization header for that

01:20:07,120 --> 01:20:10,960
http transaction and that's where we see

01:20:09,360 --> 01:20:12,880
that basic auth

01:20:10,960 --> 01:20:15,199
and that's the data that was actually

01:20:12,880 --> 01:20:16,800
sent and this is where we get into

01:20:15,199 --> 01:20:19,520
how all of these different web

01:20:16,800 --> 01:20:21,360
interfaces actually fit together

01:20:19,520 --> 01:20:23,199
and how we actually use them in

01:20:21,360 --> 01:20:26,159
conjunction with each other

01:20:23,199 --> 01:20:28,080
in order to go further and faster in

01:20:26,159 --> 01:20:30,480
that incident response process

01:20:28,080 --> 01:20:33,440
so if i take and copy that and then

01:20:30,480 --> 01:20:35,440
maybe go over to cyber chef

01:20:33,440 --> 01:20:37,280
what i can do is i can paste that into

01:20:35,440 --> 01:20:39,960
the input here

01:20:37,280 --> 01:20:41,440
and then i can slide over this from

01:20:39,960 --> 01:20:44,159
base64

01:20:41,440 --> 01:20:44,719
and you see immediately in this output

01:20:44,159 --> 01:20:47,760
root

01:20:44,719 --> 01:20:51,040
colon root what that means is

01:20:47,760 --> 01:20:52,320
that base64 authentication was sending a

01:20:51,040 --> 01:20:55,440
username of root

01:20:52,320 --> 01:20:57,040
and a password of root and so then it

01:20:55,440 --> 01:21:00,159
might be up to us to determine

01:20:57,040 --> 01:21:02,239
okay was this was this an actual

01:21:00,159 --> 01:21:04,560
root account on one of our legitimate

01:21:02,239 --> 01:21:06,880
servers that we're concerned about

01:21:04,560 --> 01:21:09,120
or was this some internet of things

01:21:06,880 --> 01:21:10,159
device which just had some hard-coded

01:21:09,120 --> 01:21:12,000
credentials

01:21:10,159 --> 01:21:13,600
and it's a garbage device which we don't

01:21:12,000 --> 01:21:15,120
even care about so we don't care about

01:21:13,600 --> 01:21:18,159
the credentials

01:21:15,120 --> 01:21:20,320
but at least now we know that that

01:21:18,159 --> 01:21:21,600
device with that ip address is sending

01:21:20,320 --> 01:21:24,960
that username and that

01:21:21,600 --> 01:21:27,040
password and so there you can see

01:21:24,960 --> 01:21:29,920
immediately the power of having

01:21:27,040 --> 01:21:30,239
this capability of going from an alert

01:21:29,920 --> 01:21:33,120
to

01:21:30,239 --> 01:21:35,360
cyber chef to be able to decode that

01:21:33,120 --> 01:21:36,719
kind of information

01:21:35,360 --> 01:21:39,120
let's take it a step further and let's

01:21:36,719 --> 01:21:41,760
say well you know this network

01:21:39,120 --> 01:21:43,679
data decoded field really only shows us

01:21:41,760 --> 01:21:46,719
the http get request

01:21:43,679 --> 01:21:49,280
maybe i'm curious about what the web

01:21:46,719 --> 01:21:51,360
server actually responded with when it

01:21:49,280 --> 01:21:54,239
got these credentials

01:21:51,360 --> 01:21:56,000
and so maybe i might use this item on

01:21:54,239 --> 01:21:58,080
our quick action bar

01:21:56,000 --> 01:21:59,360
to pivot to over to our full packet

01:21:58,080 --> 01:22:01,199
capture

01:21:59,360 --> 01:22:02,480
so now you can see we're on our pcapp

01:22:01,199 --> 01:22:04,560
page

01:22:02,480 --> 01:22:06,800
and this is essentially like we said

01:22:04,560 --> 01:22:09,280
before rewinding the video tape

01:22:06,800 --> 01:22:10,800
and showing us that entire tcp stream

01:22:09,280 --> 01:22:12,639
from start to finish

01:22:10,800 --> 01:22:15,280
this is kind of an overview that you

01:22:12,639 --> 01:22:18,719
might see maybe like in wireshark

01:22:15,280 --> 01:22:20,800
but if i turn on this view that kind of

01:22:18,719 --> 01:22:22,560
collapses it down to a nice ascii

01:22:20,800 --> 01:22:23,360
transcript which is a little bit easier

01:22:22,560 --> 01:22:25,679
to read

01:22:23,360 --> 01:22:26,560
and here i can see that get request that

01:22:25,679 --> 01:22:29,440
we saw before

01:22:26,560 --> 01:22:31,440
in the network data decoded field but in

01:22:29,440 --> 01:22:33,360
addition to that i also see the web

01:22:31,440 --> 01:22:35,120
server's response which is highlighted

01:22:33,360 --> 01:22:37,360
in red down here

01:22:35,120 --> 01:22:39,280
so now i can actually see that entire

01:22:37,360 --> 01:22:42,320
tcp stream because i've

01:22:39,280 --> 01:22:44,159
rewound the video tape now when i look

01:22:42,320 --> 01:22:47,679
at the web server's response

01:22:44,159 --> 01:22:50,159
i see this page is just a placeholder

01:22:47,679 --> 01:22:51,600
blah blah blah blah and as it turns out

01:22:50,159 --> 01:22:54,719
this was really just kind of some

01:22:51,600 --> 01:22:55,920
simulated malware that i ran on this

01:22:54,719 --> 01:22:58,159
windows endpoint

01:22:55,920 --> 01:23:00,560
and so this wasn't real malware this

01:22:58,159 --> 01:23:02,880
wasn't a real security incident

01:23:00,560 --> 01:23:05,199
but now we kind of have the confidence

01:23:02,880 --> 01:23:07,600
because we have that full packet capture

01:23:05,199 --> 01:23:08,480
and we were able to pivot to it very

01:23:07,600 --> 01:23:12,159
quickly

01:23:08,480 --> 01:23:15,760
and easily but now let's

01:23:12,159 --> 01:23:20,320
for the sake of argument let's just say

01:23:15,760 --> 01:23:22,239
that that was more suspicious maybe we

01:23:20,320 --> 01:23:24,000
did decide to engage the incident

01:23:22,239 --> 01:23:26,080
response process

01:23:24,000 --> 01:23:28,080
and so if we were to go back to this

01:23:26,080 --> 01:23:28,800
alert what we might want to do is

01:23:28,080 --> 01:23:30,800
instead of

01:23:28,800 --> 01:23:31,920
acknowledging it like we did in the very

01:23:30,800 --> 01:23:33,679
beginning

01:23:31,920 --> 01:23:35,199
with those other examples we might use

01:23:33,679 --> 01:23:38,560
this blue triangle to

01:23:35,199 --> 01:23:40,800
escalate that particular alert

01:23:38,560 --> 01:23:41,679
so when i do that it's going to remove

01:23:40,800 --> 01:23:44,320
the alert

01:23:41,679 --> 01:23:46,000
from this alerts queue because i've now

01:23:44,320 --> 01:23:49,120
done something with it

01:23:46,000 --> 01:23:51,280
and so now if i go to the hive

01:23:49,120 --> 01:23:52,320
that's our case management systems now

01:23:51,280 --> 01:23:56,080
if i

01:23:52,320 --> 01:23:56,080
authenticate to the hive

01:23:56,800 --> 01:24:01,840
i should have a case in here

01:23:59,840 --> 01:24:03,120
and i had some cases from uh some

01:24:01,840 --> 01:24:05,760
previous examples

01:24:03,120 --> 01:24:08,480
but here's my new case for this outgoing

01:24:05,760 --> 01:24:10,719
basic auth base64

01:24:08,480 --> 01:24:11,760
and that took all of the information

01:24:10,719 --> 01:24:13,760
from that alert

01:24:11,760 --> 01:24:15,520
and started a new case in the high so i

01:24:13,760 --> 01:24:18,239
can now start adding

01:24:15,520 --> 01:24:19,360
observables indicators i can add tasks

01:24:18,239 --> 01:24:21,199
to this so if i

01:24:19,360 --> 01:24:23,280
if i decided that this was malware and i

01:24:21,199 --> 01:24:24,800
wanted the help desk to go and re-image

01:24:23,280 --> 01:24:26,639
this particular workstation

01:24:24,800 --> 01:24:28,080
i could put in a task for the help desk

01:24:26,639 --> 01:24:30,239
to do that and

01:24:28,080 --> 01:24:31,679
to ultimately document everything

01:24:30,239 --> 01:24:34,239
relating to this case

01:24:31,679 --> 01:24:36,239
so that then i could close that case and

01:24:34,239 --> 01:24:38,719
if i ever needed to refer back to it

01:24:36,239 --> 01:24:40,480
i had all my notes and all of my

01:24:38,719 --> 01:24:43,679
documentation in one place

01:24:40,480 --> 01:24:43,679
for that particular case

01:24:43,760 --> 01:24:47,040
so that's really kind of the the first

01:24:45,199 --> 01:24:49,120
example and let's take a look at

01:24:47,040 --> 01:24:51,280
kind of another example starting again

01:24:49,120 --> 01:24:53,760
with alerts

01:24:51,280 --> 01:24:55,679
and so maybe i could look at uh this

01:24:53,760 --> 01:24:57,679
alert here which says

01:24:55,679 --> 01:25:00,560
here's an emerging threats policy alert

01:24:57,679 --> 01:25:04,320
for a pdf with embedded file

01:25:00,560 --> 01:25:07,520
and so maybe this time maybe i might go

01:25:04,320 --> 01:25:10,719
and cast a wider net for

01:25:07,520 --> 01:25:12,239
that particular field so if i hunt for

01:25:10,719 --> 01:25:14,000
this field that's going to take me from

01:25:12,239 --> 01:25:16,080
alerts over to hunt

01:25:14,000 --> 01:25:18,239
and it's going to hunt for this

01:25:16,080 --> 01:25:20,239
particular string which is the title of

01:25:18,239 --> 01:25:22,960
that alert

01:25:20,239 --> 01:25:24,000
now this is a more powerful interface it

01:25:22,960 --> 01:25:26,719
has more

01:25:24,000 --> 01:25:29,600
knobs and things that we can tweak on it

01:25:26,719 --> 01:25:32,080
compared to that alerts interface

01:25:29,600 --> 01:25:32,880
um but we can also do more things with

01:25:32,080 --> 01:25:35,840
that

01:25:32,880 --> 01:25:37,520
uh so again if we wanted to sort of

01:25:35,840 --> 01:25:38,159
pivot to full packet capture we could

01:25:37,520 --> 01:25:41,600
click on

01:25:38,159 --> 01:25:43,760
this icon here and that's going to show

01:25:41,600 --> 01:25:46,920
me that ascii transcript and we can see

01:25:43,760 --> 01:25:48,159
that workstation doing a get request for

01:25:46,920 --> 01:25:50,159
pdf.pdf

01:25:48,159 --> 01:25:52,480
kind of an interesting name again that's

01:25:50,159 --> 01:25:54,560
to testmynits.org again i was kind of

01:25:52,480 --> 01:25:55,920
simulating malware there

01:25:54,560 --> 01:25:58,480
and then we see the web server's

01:25:55,920 --> 01:26:00,719
response application pdf and there's the

01:25:58,480 --> 01:26:03,679
actual pdf file

01:26:00,719 --> 01:26:04,560
but now if i wanted to go a step further

01:26:03,679 --> 01:26:07,520
and actually

01:26:04,560 --> 01:26:08,400
extract that pdf and maybe do some

01:26:07,520 --> 01:26:11,280
analysis

01:26:08,400 --> 01:26:13,520
of it i could click this icon here which

01:26:11,280 --> 01:26:15,600
is going to download the pcap file

01:26:13,520 --> 01:26:18,960
and because we've registered network

01:26:15,600 --> 01:26:21,280
miner as the default pcapp handler

01:26:18,960 --> 01:26:23,280
then when i click on that pcot file it

01:26:21,280 --> 01:26:25,920
automatically spawns network miner

01:26:23,280 --> 01:26:27,600
i can go to the files tab it's already

01:26:25,920 --> 01:26:30,480
extracted that pdf

01:26:27,600 --> 01:26:31,360
for me i can now right click and open

01:26:30,480 --> 01:26:34,840
folder

01:26:31,360 --> 01:26:38,159
and there is my pdf file so i've now

01:26:34,840 --> 01:26:39,440
reconstructed that pdf which you might

01:26:38,159 --> 01:26:41,360
you know pretend as

01:26:39,440 --> 01:26:42,560
malware or something else suspicious or

01:26:41,360 --> 01:26:44,880
malicious

01:26:42,560 --> 01:26:47,040
and i've now reconstructed that right

01:26:44,880 --> 01:26:48,080
out of that network traffic now i know

01:26:47,040 --> 01:26:50,080
that this is

01:26:48,080 --> 01:26:52,320
simulated malware so i'm not concerned

01:26:50,080 --> 01:26:54,000
about it so i can open this right up

01:26:52,320 --> 01:26:56,719
just to prove that this is

01:26:54,000 --> 01:26:57,120
actually a legitimate pdf and that it

01:26:56,719 --> 01:27:00,400
does

01:26:57,120 --> 01:27:03,600
open up because it was fully rendered

01:27:00,400 --> 01:27:06,239
from that pcap file so that's pretty

01:27:03,600 --> 01:27:09,199
powerful to have that kind of capability

01:27:06,239 --> 01:27:10,800
let me show you one more thing uh when

01:27:09,199 --> 01:27:12,800
it comes to

01:27:10,800 --> 01:27:15,199
kind of starting with alerts and we'll

01:27:12,800 --> 01:27:16,719
go back to this pdf with embedded file

01:27:15,199 --> 01:27:19,920
again

01:27:16,719 --> 01:27:21,760
so if i drill down into that

01:27:19,920 --> 01:27:24,480
we talked about community id and the

01:27:21,760 --> 01:27:27,120
ability to use that to correlate between

01:27:24,480 --> 01:27:29,440
different data types what i might do

01:27:27,120 --> 01:27:30,159
is from this alerts view i can i can

01:27:29,440 --> 01:27:32,000
look into

01:27:30,159 --> 01:27:33,920
all of my different fields and i can

01:27:32,000 --> 01:27:37,040
find this community id

01:27:33,920 --> 01:27:38,080
field when i find that value i can click

01:27:37,040 --> 01:27:39,679
on that

01:27:38,080 --> 01:27:42,400
and then click the clear magnifying

01:27:39,679 --> 01:27:45,600
glass here and that's going to do a hunt

01:27:42,400 --> 01:27:47,600
for that particular value

01:27:45,600 --> 01:27:50,880
and what you see there is that in the

01:27:47,600 --> 01:27:52,880
results i get not only a cericada alert

01:27:50,880 --> 01:27:56,400
which is what i was just looking at

01:27:52,880 --> 01:27:59,760
but i also get a zeke connection log

01:27:56,400 --> 01:28:03,280
a z http log and also a pf

01:27:59,760 --> 01:28:05,440
sense firewall log and so that's really

01:28:03,280 --> 01:28:08,400
the power of that correlation that's the

01:28:05,440 --> 01:28:10,960
power of using that community id value

01:28:08,400 --> 01:28:12,400
because if i didn't have that if i

01:28:10,960 --> 01:28:13,440
wanted to try to do this kind of

01:28:12,400 --> 01:28:15,040
correlation

01:28:13,440 --> 01:28:16,560
i would have had to go up here to this

01:28:15,040 --> 01:28:17,360
query bar and i would have had to try to

01:28:16,560 --> 01:28:20,080
type in

01:28:17,360 --> 01:28:21,760
the source ip and then the source port

01:28:20,080 --> 01:28:24,000
and then the destination ip

01:28:21,760 --> 01:28:25,760
and then the destination port and that

01:28:24,000 --> 01:28:28,159
takes a lot of time

01:28:25,760 --> 01:28:29,760
it's certainly a whole lot slower than

01:28:28,159 --> 01:28:32,560
just being able to

01:28:29,760 --> 01:28:34,800
click on this community id value and

01:28:32,560 --> 01:28:36,719
have it search for that

01:28:34,800 --> 01:28:39,600
so that's really kind of the first big

01:28:36,719 --> 01:28:42,480
use case is

01:28:39,600 --> 01:28:43,360
we are starting with some sort of an

01:28:42,480 --> 01:28:44,880
alert

01:28:43,360 --> 01:28:46,880
we're triaging that alert we're

01:28:44,880 --> 01:28:48,960
investigating that alert we're casting a

01:28:46,880 --> 01:28:50,880
wider net to figure out exactly what

01:28:48,960 --> 01:28:52,960
happened we're painting a more complete

01:28:50,880 --> 01:28:55,280
picture and ultimately deciding

01:28:52,960 --> 01:28:56,080
whether to acknowledge the alert or to

01:28:55,280 --> 01:28:59,760
escalate

01:28:56,080 --> 01:29:01,760
the alert now the second big use case

01:28:59,760 --> 01:29:02,960
is really more of a threat hunting use

01:29:01,760 --> 01:29:06,239
case

01:29:02,960 --> 01:29:10,159
and we've gotten to a place

01:29:06,239 --> 01:29:13,280
where sophisticated adversaries are

01:29:10,159 --> 01:29:15,920
smart enough to be able to evade

01:29:13,280 --> 01:29:17,440
our traditional ids signatures just like

01:29:15,920 --> 01:29:19,920
they've been evading our antivirus

01:29:17,440 --> 01:29:22,239
signatures for years and years and years

01:29:19,920 --> 01:29:23,760
now they're evading our network-based

01:29:22,239 --> 01:29:25,920
ids signatures

01:29:23,760 --> 01:29:27,199
and so it's important to be able to

01:29:25,920 --> 01:29:30,000
spend a good amount of time

01:29:27,199 --> 01:29:31,440
doing some arbitrary threat hunting in

01:29:30,000 --> 01:29:33,440
other words

01:29:31,440 --> 01:29:34,960
yes alerts are important but it's also

01:29:33,440 --> 01:29:37,679
important to go into

01:29:34,960 --> 01:29:38,719
hunt and just start doing some freeform

01:29:37,679 --> 01:29:42,239
hunting

01:29:38,719 --> 01:29:45,920
uh apart from our alerts

01:29:42,239 --> 01:29:48,320
and so we've got a lot of

01:29:45,920 --> 01:29:49,280
hunting queries built into hunt by

01:29:48,320 --> 01:29:51,760
default if you just

01:29:49,280 --> 01:29:53,040
click this drop down box we've got all

01:29:51,760 --> 01:29:55,280
these queries listed

01:29:53,040 --> 01:29:57,120
here to kind of start you on your

01:29:55,280 --> 01:29:59,199
hunting journey

01:29:57,120 --> 01:30:00,880
and so you know one of the main

01:29:59,199 --> 01:30:03,360
protocols that's in use today of course

01:30:00,880 --> 01:30:05,920
is http for the web

01:30:03,360 --> 01:30:06,960
and we still see lots of malware and

01:30:05,920 --> 01:30:10,000
attacks

01:30:06,960 --> 01:30:13,520
using http even though it's clear text

01:30:10,000 --> 01:30:15,440
and it's it's still

01:30:13,520 --> 01:30:17,120
out there and it's still you're still

01:30:15,440 --> 01:30:20,320
able to catch attacks

01:30:17,120 --> 01:30:22,159
in clear text via http and so one of the

01:30:20,320 --> 01:30:23,199
things that that i always recommend it's

01:30:22,159 --> 01:30:24,480
always fun

01:30:23,199 --> 01:30:26,880
you know whenever we're working with a

01:30:24,480 --> 01:30:28,159
customer or you know

01:30:26,880 --> 01:30:30,159
consulting with folks in their

01:30:28,159 --> 01:30:33,360
environment it's always fun

01:30:30,159 --> 01:30:37,280
to run this query right here http

01:30:33,360 --> 01:30:38,639
traffic grouped by user agent

01:30:37,280 --> 01:30:42,000
and so this is going to go and take a

01:30:38,639 --> 01:30:44,400
look at all of our z http logs

01:30:42,000 --> 01:30:46,880
and then do a group by which you may

01:30:44,400 --> 01:30:48,560
consider to be an aggregation or you may

01:30:46,880 --> 01:30:50,960
call it stacking whatever you want to

01:30:48,560 --> 01:30:51,679
call it it's essentially looking for the

01:30:50,960 --> 01:30:54,639
unique

01:30:51,679 --> 01:30:55,840
values in that data if you're if you're

01:30:54,639 --> 01:30:57,840
an old school

01:30:55,840 --> 01:31:00,480
unix and linux command line junkie like

01:30:57,840 --> 01:31:04,000
i am you know you think about

01:31:00,480 --> 01:31:07,600
gripping a log file and piping that into

01:31:04,000 --> 01:31:09,840
sort dash u uh pipe it into

01:31:07,600 --> 01:31:11,679
or unique dash c or whatever the case

01:31:09,840 --> 01:31:14,480
may be and looking for those unique

01:31:11,679 --> 01:31:15,280
values right we're essentially doing the

01:31:14,480 --> 01:31:18,719
same thing

01:31:15,280 --> 01:31:20,560
here by doing that the

01:31:18,719 --> 01:31:21,760
most common user agents are going to

01:31:20,560 --> 01:31:23,600
bubble up to the top

01:31:21,760 --> 01:31:27,840
right you might expect to see the google

01:31:23,600 --> 01:31:29,760
chrome browser bubbling up to the top

01:31:27,840 --> 01:31:32,800
we see here some kind of legitimate

01:31:29,760 --> 01:31:34,800
microsoft user agents for crypto api

01:31:32,800 --> 01:31:36,719
that's pretty standard stuff i expect to

01:31:34,800 --> 01:31:38,960
see in a microsoft

01:31:36,719 --> 01:31:40,400
windows network but then when i look

01:31:38,960 --> 01:31:42,560
lower in the list i see

01:31:40,400 --> 01:31:44,480
other user agents which i don't expect

01:31:42,560 --> 01:31:45,520
to see which i don't know off the top of

01:31:44,480 --> 01:31:47,360
my head

01:31:45,520 --> 01:31:49,120
what they actually represent so things

01:31:47,360 --> 01:31:51,120
like black sun

01:31:49,120 --> 01:31:52,480
and so if i were to drill into this i

01:31:51,120 --> 01:31:52,880
could click on it and then click the

01:31:52,480 --> 01:31:55,040
plus

01:31:52,880 --> 01:31:58,639
magnifying glass that's going to add

01:31:55,040 --> 01:32:01,280
that user agent to my query up here

01:31:58,639 --> 01:32:02,480
now i've filtered my entire hunt

01:32:01,280 --> 01:32:06,400
interface

01:32:02,480 --> 01:32:07,760
to just that one http log that had that

01:32:06,400 --> 01:32:11,760
user agent

01:32:07,760 --> 01:32:13,360
in it and so i've got my zeek http log

01:32:11,760 --> 01:32:14,320
again i could drill into it and i could

01:32:13,360 --> 01:32:18,159
get the data

01:32:14,320 --> 01:32:20,480
that zeke gave me in that http log

01:32:18,159 --> 01:32:21,440
but what if i wanted more data about

01:32:20,480 --> 01:32:24,880
that actual

01:32:21,440 --> 01:32:26,800
traffic itself that's when we go back to

01:32:24,880 --> 01:32:28,560
this network community id value so if i

01:32:26,800 --> 01:32:30,000
click on that and click the clear

01:32:28,560 --> 01:32:32,480
magnifying glass

01:32:30,000 --> 01:32:34,880
that starts a brand new query for just

01:32:32,480 --> 01:32:36,639
the community id

01:32:34,880 --> 01:32:38,560
and there we see we have not only our

01:32:36,639 --> 01:32:40,480
zeek http log that we were looking at

01:32:38,560 --> 01:32:44,159
previously but also

01:32:40,480 --> 01:32:45,360
a zeke con log and so if i were to drill

01:32:44,159 --> 01:32:48,400
into that

01:32:45,360 --> 01:32:50,800
i could look at my z con log and

01:32:48,400 --> 01:32:52,960
things i get there are things like geoip

01:32:50,800 --> 01:32:55,360
lookups so i can see

01:32:52,960 --> 01:32:58,880
destination guip information i can also

01:32:55,360 --> 01:33:01,760
see source guip information if it exists

01:32:58,880 --> 01:33:02,560
and so that's lots of good context to

01:33:01,760 --> 01:33:06,639
have

01:33:02,560 --> 01:33:09,280
if i want to kind of go back

01:33:06,639 --> 01:33:10,639
i can do that and then i can look at

01:33:09,280 --> 01:33:13,199
well i've also got

01:33:10,639 --> 01:33:14,719
a firewall log that correlates based on

01:33:13,199 --> 01:33:17,120
that community id value

01:33:14,719 --> 01:33:18,400
i've got a suricata alert so even though

01:33:17,120 --> 01:33:20,000
i didn't start

01:33:18,400 --> 01:33:21,679
with a suricata alert for this

01:33:20,000 --> 01:33:24,400
particular use case

01:33:21,679 --> 01:33:26,480
i'm actually able to correlate back to a

01:33:24,400 --> 01:33:29,760
cericada alert so let's let's drill into

01:33:26,480 --> 01:33:33,120
that and see what surykata has to say

01:33:29,760 --> 01:33:36,000
so here we see an example of

01:33:33,120 --> 01:33:36,639
starting with threat hunting and we had

01:33:36,000 --> 01:33:40,639
this

01:33:36,639 --> 01:33:41,199
feeling that this user agent of black

01:33:40,639 --> 01:33:43,120
sun

01:33:41,199 --> 01:33:44,400
is suspicious because we've never heard

01:33:43,120 --> 01:33:48,239
of it before

01:33:44,400 --> 01:33:49,360
and here we see that by pivoting based

01:33:48,239 --> 01:33:52,560
on community id

01:33:49,360 --> 01:33:54,159
and doing this correlation well cericada

01:33:52,560 --> 01:33:55,520
and the emerging threats rule set is

01:33:54,159 --> 01:33:58,000
actually confirming

01:33:55,520 --> 01:34:00,880
our suspicions it's actually confirming

01:33:58,000 --> 01:34:02,840
that this is a suspicious user agent

01:34:00,880 --> 01:34:04,080
and this is something that's been seen

01:34:02,840 --> 01:34:07,520
previously

01:34:04,080 --> 01:34:08,239
in network trojan attacks and so if i

01:34:07,520 --> 01:34:10,560
wanted to go

01:34:08,239 --> 01:34:12,000
even further of course i could pivot to

01:34:10,560 --> 01:34:15,440
full packet capture

01:34:12,000 --> 01:34:18,080
and again i could see the get request

01:34:15,440 --> 01:34:19,040
and the server's response rewinding that

01:34:18,080 --> 01:34:21,120
videotape

01:34:19,040 --> 01:34:22,880
and reconstructing the scene of the

01:34:21,120 --> 01:34:26,239
crime

01:34:22,880 --> 01:34:28,480
so that's kind of use case number two

01:34:26,239 --> 01:34:30,080
so now let's move on to use case number

01:34:28,480 --> 01:34:31,920
three and again this is going to be kind

01:34:30,080 --> 01:34:33,600
of more of a threat hunting kind of a

01:34:31,920 --> 01:34:37,199
thing but instead of starting with

01:34:33,600 --> 01:34:40,239
our zeek http logs now let's start

01:34:37,199 --> 01:34:42,239
with sysmon because in that previous

01:34:40,239 --> 01:34:42,719
example we saw some sysmon logs let's

01:34:42,239 --> 01:34:46,239
actually

01:34:42,719 --> 01:34:49,840
start with sysmond logs for this one

01:34:46,239 --> 01:34:51,760
so if i go to sysmon events

01:34:49,840 --> 01:34:53,360
here we see i've got some process

01:34:51,760 --> 01:34:54,400
creation i've got some process

01:34:53,360 --> 01:34:56,880
termination

01:34:54,400 --> 01:34:58,800
and i've got some network connections so

01:34:56,880 --> 01:35:01,520
let's click the plus sign for the

01:34:58,800 --> 01:35:03,760
network connections

01:35:01,520 --> 01:35:05,679
and this is where things get really cool

01:35:03,760 --> 01:35:08,000
because

01:35:05,679 --> 01:35:08,880
having a windows endpoint with sysmon

01:35:08,000 --> 01:35:10,960
installed

01:35:08,880 --> 01:35:13,840
and collecting those sysmon logs and

01:35:10,960 --> 01:35:16,639
bringing them back to security

01:35:13,840 --> 01:35:17,840
i could actually group by network

01:35:16,639 --> 01:35:21,600
connection

01:35:17,840 --> 01:35:23,600
and then look at the executables

01:35:21,600 --> 01:35:25,040
that actually created those network

01:35:23,600 --> 01:35:26,719
connections

01:35:25,040 --> 01:35:28,480
and notice that i have this process

01:35:26,719 --> 01:35:30,080
executable field and i can see that

01:35:28,480 --> 01:35:32,480
there's a lot of these that

01:35:30,080 --> 01:35:34,080
are showing me that this was curl

01:35:32,480 --> 01:35:35,040
running on a windows box which i don't

01:35:34,080 --> 01:35:37,920
really expect to see

01:35:35,040 --> 01:35:39,280
curl running on a windows box normally

01:35:37,920 --> 01:35:41,920
in this case again i was

01:35:39,280 --> 01:35:44,159
simulating malware so i had the windows

01:35:41,920 --> 01:35:45,280
subsystem for linux installed on my

01:35:44,159 --> 01:35:48,480
windows endpoint

01:35:45,280 --> 01:35:50,960
and that's where curl came from

01:35:48,480 --> 01:35:51,760
but let's just pretend that we have all

01:35:50,960 --> 01:35:53,600
of these

01:35:51,760 --> 01:35:56,000
sysmon network connection logs and

01:35:53,600 --> 01:35:59,360
instead of 22 of these logs

01:35:56,000 --> 01:36:02,159
maybe i had 2 200 or maybe 22 000

01:35:59,360 --> 01:36:03,040
logs and i really don't want to go one

01:36:02,159 --> 01:36:05,760
by one

01:36:03,040 --> 01:36:08,080
or page by page through all of those

01:36:05,760 --> 01:36:10,639
what i'd like to be able to do

01:36:08,080 --> 01:36:11,520
is use the power of group buys and

01:36:10,639 --> 01:36:13,600
aggregation

01:36:11,520 --> 01:36:16,320
and stacking to be able to look for

01:36:13,600 --> 01:36:19,280
those unique values to look for those

01:36:16,320 --> 01:36:19,600
statistical anomalies or those outliers

01:36:19,280 --> 01:36:22,800
which

01:36:19,600 --> 01:36:25,280
might indicate suspicious activity

01:36:22,800 --> 01:36:26,239
so in order to do that what i can do is

01:36:25,280 --> 01:36:28,960
take this process

01:36:26,239 --> 01:36:29,679
executable field click on it and then

01:36:28,960 --> 01:36:32,400
click this

01:36:29,679 --> 01:36:34,880
icon which is kind of the the stacking

01:36:32,400 --> 01:36:37,040
icon or the aggregation icon

01:36:34,880 --> 01:36:40,800
so when i do that it's going to group by

01:36:37,040 --> 01:36:44,480
process executable so what i see is that

01:36:40,800 --> 01:36:46,239
even if i had 22 000 network connections

01:36:44,480 --> 01:36:47,920
it would show me the unique number of

01:36:46,239 --> 01:36:50,480
those that

01:36:47,920 --> 01:36:52,719
were curl and then it would show me a

01:36:50,480 --> 01:36:54,880
smaller number that

01:36:52,719 --> 01:36:57,119
were network connections initiated by

01:36:54,880 --> 01:36:58,639
digg another utility that i don't

01:36:57,119 --> 01:37:02,000
normally expect to see

01:36:58,639 --> 01:37:03,520
on windows but let's drill into that

01:37:02,000 --> 01:37:06,320
because that's the one with a smaller

01:37:03,520 --> 01:37:08,080
number and so let's just drill into that

01:37:06,320 --> 01:37:10,320
and then maybe i might look at my

01:37:08,080 --> 01:37:11,520
destination ip and again i might use the

01:37:10,320 --> 01:37:13,520
power of group by

01:37:11,520 --> 01:37:15,199
to say well let's group by destination

01:37:13,520 --> 01:37:17,520
ip

01:37:15,199 --> 01:37:19,520
and that's going to group it by up there

01:37:17,520 --> 01:37:21,440
and i could select one of those

01:37:19,520 --> 01:37:23,040
so you start to see this process of how

01:37:21,440 --> 01:37:25,520
we use threat hunting

01:37:23,040 --> 01:37:27,119
how we're constantly kind of zooming in

01:37:25,520 --> 01:37:28,960
finding something of value and then

01:37:27,119 --> 01:37:29,760
maybe casting a wider net pivoting to

01:37:28,960 --> 01:37:31,840
something else

01:37:29,760 --> 01:37:33,760
zooming out we're constantly doing that

01:37:31,840 --> 01:37:36,239
zooming in zooming out stacking

01:37:33,760 --> 01:37:37,040
aggregation kind of activity and that's

01:37:36,239 --> 01:37:41,360
exactly what

01:37:37,040 --> 01:37:44,400
this hunt interface was designed to do

01:37:41,360 --> 01:37:46,800
but now let's see uh

01:37:44,400 --> 01:37:48,159
if i were to take a look at this traffic

01:37:46,800 --> 01:37:51,040
you know this is dig

01:37:48,159 --> 01:37:51,600
traffic going to 8.8.8.8 which is of

01:37:51,040 --> 01:37:55,280
course

01:37:51,600 --> 01:37:58,320
a google dns server and so

01:37:55,280 --> 01:38:00,080
maybe i might want to again sort of

01:37:58,320 --> 01:38:04,000
pivot on

01:38:00,080 --> 01:38:08,000
community id value show me everything

01:38:04,000 --> 01:38:11,199
related to that community id

01:38:08,000 --> 01:38:15,440
and then maybe from there i might say

01:38:11,199 --> 01:38:17,520
well let's pivot to full packet capture

01:38:15,440 --> 01:38:18,639
and if i were to go to this view what i

01:38:17,520 --> 01:38:21,040
would see

01:38:18,639 --> 01:38:22,000
is you know there's that full packet

01:38:21,040 --> 01:38:24,800
capture traffic

01:38:22,000 --> 01:38:27,760
there's the actual dns request going out

01:38:24,800 --> 01:38:29,760
to that google dns server

01:38:27,760 --> 01:38:31,520
and so again being able to leverage all

01:38:29,760 --> 01:38:33,600
those different data types

01:38:31,520 --> 01:38:35,280
and correlate them together using

01:38:33,600 --> 01:38:37,119
community id

01:38:35,280 --> 01:38:38,639
so now let's look at our our very last

01:38:37,119 --> 01:38:41,199
case study and we'll do this quickly as

01:38:38,639 --> 01:38:44,239
we're starting to run out of time here

01:38:41,199 --> 01:38:45,199
for this one let's start with a firewall

01:38:44,239 --> 01:38:48,639
log

01:38:45,199 --> 01:38:51,679
so again most firewalls are not capable

01:38:48,639 --> 01:38:54,719
of generating community id values

01:38:51,679 --> 01:38:56,480
so i've got a pf sense firewall and i'm

01:38:54,719 --> 01:38:58,639
sending all those firewall logs over

01:38:56,480 --> 01:39:01,199
here to security onion 2.

01:38:58,639 --> 01:39:02,880
and so we've got a query built into hunt

01:39:01,199 --> 01:39:04,000
that takes those firewall logs and

01:39:02,880 --> 01:39:06,080
groups by

01:39:04,000 --> 01:39:07,840
action which is going to be either does

01:39:06,080 --> 01:39:09,600
the firewall allow the traffic to pass

01:39:07,840 --> 01:39:12,159
or does it block it so maybe i drill

01:39:09,600 --> 01:39:14,719
into the pass

01:39:12,159 --> 01:39:15,760
and then again let's pretend that

01:39:14,719 --> 01:39:17,840
there's

01:39:15,760 --> 01:39:19,440
thousands or ten thousand or a hundred

01:39:17,840 --> 01:39:21,920
thousand logs here and we don't want to

01:39:19,440 --> 01:39:24,960
go one by one or page by page

01:39:21,920 --> 01:39:27,360
so maybe we group by the source ip

01:39:24,960 --> 01:39:29,199
field and that gives me the unique

01:39:27,360 --> 01:39:30,320
values it shows me there's 4 000

01:39:29,199 --> 01:39:33,440
connections for this

01:39:30,320 --> 01:39:35,360
ip address and there's only 149

01:39:33,440 --> 01:39:36,400
connections for this ip address so maybe

01:39:35,360 --> 01:39:40,159
i drill into

01:39:36,400 --> 01:39:43,199
this and then maybe i group by

01:39:40,159 --> 01:39:45,040
destination ip

01:39:43,199 --> 01:39:48,000
and again that shows me the unique

01:39:45,040 --> 01:39:50,400
values for that destination ip

01:39:48,000 --> 01:39:52,800
maybe i find an interesting ip here and

01:39:50,400 --> 01:39:54,880
drill into that

01:39:52,800 --> 01:39:57,040
and once i've done that maybe i group by

01:39:54,880 --> 01:39:59,119
destination port

01:39:57,040 --> 01:40:01,040
you start to see this iterative process

01:39:59,119 --> 01:40:02,639
of again kind of zooming in

01:40:01,040 --> 01:40:05,040
and zooming out and zooming in and

01:40:02,639 --> 01:40:06,880
zooming out and working our way down to

01:40:05,040 --> 01:40:09,440
something that's of interest

01:40:06,880 --> 01:40:11,360
again i see some port 80 traffic which

01:40:09,440 --> 01:40:13,119
you know might be rather expected most

01:40:11,360 --> 01:40:15,520
web traffic is port 80

01:40:13,119 --> 01:40:18,239
but now i see also one connection that

01:40:15,520 --> 01:40:21,360
was port 22. an attacker might be using

01:40:18,239 --> 01:40:22,719
that as uh command and control

01:40:21,360 --> 01:40:24,719
might be using that for data

01:40:22,719 --> 01:40:25,920
exfiltration maybe doing some scp over

01:40:24,719 --> 01:40:28,000
port 22.

01:40:25,920 --> 01:40:29,679
so maybe we might want to drill into

01:40:28,000 --> 01:40:33,280
that maybe we might want to then

01:40:29,679 --> 01:40:35,840
pivot to full packet capture

01:40:33,280 --> 01:40:37,760
and actually let me go back and do this

01:40:35,840 --> 01:40:40,320
a different way

01:40:37,760 --> 01:40:42,239
because we can pivot on community id and

01:40:40,320 --> 01:40:44,960
we can see not only

01:40:42,239 --> 01:40:46,800
the firewall log itself but also a z con

01:40:44,960 --> 01:40:48,719
log

01:40:46,800 --> 01:40:50,800
so again using that community id value

01:40:48,719 --> 01:40:52,000
for correlation i can pivot to full

01:40:50,800 --> 01:40:54,000
packet capture

01:40:52,000 --> 01:40:56,239
there i can see the actual traffic

01:40:54,000 --> 01:40:56,880
itself because we've rewound the video

01:40:56,239 --> 01:40:58,960
tape

01:40:56,880 --> 01:41:01,679
and just like in wireshark you see we've

01:40:58,960 --> 01:41:04,159
got a syn flag we've got a syn flag

01:41:01,679 --> 01:41:05,280
but there's no full tcp three-way

01:41:04,159 --> 01:41:07,679
handshake

01:41:05,280 --> 01:41:08,639
so that kind of gives us a better sense

01:41:07,679 --> 01:41:10,960
of

01:41:08,639 --> 01:41:12,159
there really wasn't any data that was

01:41:10,960 --> 01:41:13,440
transferred here

01:41:12,159 --> 01:41:16,400
there wasn't much that actually

01:41:13,440 --> 01:41:19,679
transpired in this tcp connection

01:41:16,400 --> 01:41:22,239
all we had was a couple of uh send

01:41:19,679 --> 01:41:26,159
packets that went out

01:41:22,239 --> 01:41:27,840
so at this point we are

01:41:26,159 --> 01:41:29,600
we're pretty much out of time for the

01:41:27,840 --> 01:41:32,400
demo but uh

01:41:29,600 --> 01:41:33,760
what we saw here was several different

01:41:32,400 --> 01:41:36,560
kind of use cases

01:41:33,760 --> 01:41:38,719
of starting from different data types

01:41:36,560 --> 01:41:40,960
and correlating between those different

01:41:38,719 --> 01:41:42,960
data types using community id being able

01:41:40,960 --> 01:41:45,840
to pivot full packet capture

01:41:42,960 --> 01:41:47,119
being able to escalate alerts and create

01:41:45,840 --> 01:41:50,239
cases out of them

01:41:47,119 --> 01:41:51,840
being able to acknowledge alerts

01:41:50,239 --> 01:41:54,320
if they are things that don't mean

01:41:51,840 --> 01:41:56,400
anything to us so you start to see how

01:41:54,320 --> 01:41:58,159
all of these different interfaces really

01:41:56,400 --> 01:42:00,480
kind of work together

01:41:58,159 --> 01:42:02,560
to build that better bicycle to help you

01:42:00,480 --> 01:42:05,760
to go further and faster

01:42:02,560 --> 01:42:08,639
than you could have otherwise

01:42:05,760 --> 01:42:09,600
so at this point i'll kind of wrap up

01:42:08,639 --> 01:42:12,320
and

01:42:09,600 --> 01:42:14,560
turn it over to our moderator to see if

01:42:12,320 --> 01:42:16,000
we have any questions uh from our

01:42:14,560 --> 01:42:18,880
audience

01:42:16,000 --> 01:42:20,000
thanks doug so we do have one question

01:42:18,880 --> 01:42:22,560
that came in

01:42:20,000 --> 01:42:23,840
for standalone product deployment could

01:42:22,560 --> 01:42:25,600
so v2

01:42:23,840 --> 01:42:28,000
be deployed on a small single board

01:42:25,600 --> 01:42:31,800
computer like a raspberry pi

01:42:28,000 --> 01:42:35,760
odroid or arduino

01:42:31,800 --> 01:42:38,400
a-r-d-i-n-o sorry yeah so

01:42:35,760 --> 01:42:39,119
the upper management yeah very good very

01:42:38,400 --> 01:42:41,840
good question

01:42:39,119 --> 01:42:44,080
um you know i'm a huge fan of raspberry

01:42:41,840 --> 01:42:44,960
pies myself and i have a you know a

01:42:44,080 --> 01:42:47,360
whole

01:42:44,960 --> 01:42:49,600
drawer full of them literally uh and

01:42:47,360 --> 01:42:51,280
raspberry pies are cool the problem with

01:42:49,600 --> 01:42:54,080
raspberry pie is it's just

01:42:51,280 --> 01:42:54,560
not quite enough horsepower to do the

01:42:54,080 --> 01:42:57,119
kind of

01:42:54,560 --> 01:42:58,000
network analysis that we are trying to

01:42:57,119 --> 01:43:00,960
do

01:42:58,000 --> 01:43:01,679
and so we don't compile our software for

01:43:00,960 --> 01:43:04,880
arm

01:43:01,679 --> 01:43:08,400
processors we only compile for

01:43:04,880 --> 01:43:11,040
intel amd 64-bit architecture

01:43:08,400 --> 01:43:12,880
but what that means is uh there is an

01:43:11,040 --> 01:43:15,679
atomic pie out there that's not an

01:43:12,880 --> 01:43:17,840
official raspberry pi but it does run

01:43:15,679 --> 01:43:19,600
intel architecture you can kind of run

01:43:17,840 --> 01:43:21,119
that it's still very very limited and

01:43:19,600 --> 01:43:22,560
it's still very limited especially when

01:43:21,119 --> 01:43:25,199
it comes to ram

01:43:22,560 --> 01:43:26,560
um there are other single board

01:43:25,199 --> 01:43:28,960
computers out there that

01:43:26,560 --> 01:43:31,199
run an actual intel processor and they

01:43:28,960 --> 01:43:33,040
have enough ram to be able to do the

01:43:31,199 --> 01:43:36,880
kind of things that we're doing

01:43:33,040 --> 01:43:38,320
uh and so you can get small form factor

01:43:36,880 --> 01:43:39,840
pcs

01:43:38,320 --> 01:43:42,080
if you're looking to do this like on a

01:43:39,840 --> 01:43:42,400
home network or another really small

01:43:42,080 --> 01:43:45,920
like

01:43:42,400 --> 01:43:47,679
lab network or you know just a minimal

01:43:45,920 --> 01:43:49,119
network maybe at work

01:43:47,679 --> 01:43:51,040
it can work well for those kind of

01:43:49,119 --> 01:43:53,040
things the best

01:43:51,040 --> 01:43:54,800
most detailed information is going to be

01:43:53,040 --> 01:43:57,719
on the hardware requirements page

01:43:54,800 --> 01:43:59,199
on our documentation so just go to

01:43:57,719 --> 01:44:00,880
securityonion.net

01:43:59,199 --> 01:44:02,960
docs and you'll see a hardware

01:44:00,880 --> 01:44:04,880
requirements page and it'll walk you

01:44:02,960 --> 01:44:07,440
through all of those requirements from

01:44:04,880 --> 01:44:08,159
the processor architecture to the ram to

01:44:07,440 --> 01:44:09,920
disk

01:44:08,159 --> 01:44:13,199
to all of that information that you need

01:44:09,920 --> 01:44:13,199
to spec out the hardware

01:44:13,600 --> 01:44:18,480
great answer so doug again i can't say

01:44:17,280 --> 01:44:20,480
thank you enough for

01:44:18,480 --> 01:44:22,400
giving this workshop today here at all

01:44:20,480 --> 01:44:24,480
things open um

01:44:22,400 --> 01:44:26,159
i know i personally learned a lot and i

01:44:24,480 --> 01:44:27,119
love the fact that you put your social

01:44:26,159 --> 01:44:28,400
connect down there

01:44:27,119 --> 01:44:30,320
i'm sure a lot more people will be

01:44:28,400 --> 01:44:32,400
having questions to follow up with you

01:44:30,320 --> 01:44:34,560
on so guys if you're out there

01:44:32,400 --> 01:44:36,320
and you can see the slide doug's put up

01:44:34,560 --> 01:44:38,639
his social

01:44:36,320 --> 01:44:39,840
networks as to where you can find him so

01:44:38,639 --> 01:44:47,920
at doug burks or

01:44:39,840 --> 01:44:47,920

YouTube URL: https://www.youtube.com/watch?v=hzTY5G5HeXs


