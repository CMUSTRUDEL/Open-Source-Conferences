Title: Contributing to Elasticsearch - Nik Everett
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Nik Everett, Elastic
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: Elasticsearch is an open source distributed, RESTful search engine used for everything from log analytics to application performance monitoring to on site search to security incident response. NASA and Facebook and Verizon and Microsoft and Wikipedia all use it. I'll introduce you to the code, help you find a beginner friendly thing to work on, and walk you through setting up your development environment.

I opened my first pull request in 2013 while I was working on a fairly high traffic on site search deployment. I joined Elastic in 2015 to be a full time Elasticsearch hacker.

Elasticsearch is built with Java which isn't the newest, shiniest language on the block. But it gets the job done. And it lets us stand on the shoulders of giants.

The docs are written in AsciiDoc and could always use more contributors too! Everyone that writes features for Elasticsearch has to write the docs for those features, so if you contribute to Elasticsearch for long enough you'll need to learn that too!
Captions: 
	00:00:05,120 --> 00:00:10,559
i'm nick everett

00:00:06,399 --> 00:00:14,480
um and uh i'm gonna start with the story

00:00:10,559 --> 00:00:16,880
about eight years ago i was

00:00:14,480 --> 00:00:18,240
working for a company local to raleigh

00:00:16,880 --> 00:00:21,279
north carolina where i live

00:00:18,240 --> 00:00:24,640
where this conference is spaced and

00:00:21,279 --> 00:00:24,960
yeah and um things went really bad right

00:00:24,640 --> 00:00:27,760
we

00:00:24,960 --> 00:00:28,800
we laid off all but three of the

00:00:27,760 --> 00:00:32,000
engineers who

00:00:28,800 --> 00:00:34,399
worked in raleigh and i s

00:00:32,000 --> 00:00:37,040
i was one of the ones who was kept which

00:00:34,399 --> 00:00:39,600
means no severance package for me

00:00:37,040 --> 00:00:41,040
so i spent six months looking for my

00:00:39,600 --> 00:00:44,800
dream job

00:00:41,040 --> 00:00:48,320
and surprise surprise

00:00:44,800 --> 00:00:51,680
um i found a job that i loved

00:00:48,320 --> 00:00:53,760
i was eminently unqualified for it but

00:00:51,680 --> 00:00:55,199
i was hired by the wikimedia foundation

00:00:53,760 --> 00:00:58,239
to work on search

00:00:55,199 --> 00:01:01,680
for uh wikipedia and its

00:00:58,239 --> 00:01:05,199
various different language incarnations

00:01:01,680 --> 00:01:09,439
and sister sites and

00:01:05,199 --> 00:01:11,680
it was amazing and eye-opening and

00:01:09,439 --> 00:01:13,040
i learned a lot on how to sort of

00:01:11,680 --> 00:01:15,600
interact with

00:01:13,040 --> 00:01:16,880
big scary websites the first time you

00:01:15,600 --> 00:01:19,840
deployed to

00:01:16,880 --> 00:01:21,680
wikipedia is really quite a rush um you

00:01:19,840 --> 00:01:23,280
type in the command line you type deploy

00:01:21,680 --> 00:01:23,840
and then you watch the progress bars

00:01:23,280 --> 00:01:26,240
fill up

00:01:23,840 --> 00:01:27,439
and you know that if you take it down

00:01:26,240 --> 00:01:29,200
you'll lose

00:01:27,439 --> 00:01:31,200
you know a million people or whatever

00:01:29,200 --> 00:01:34,479
about looking at the site

00:01:31,200 --> 00:01:34,799
anyway um i ended up using elasticsearch

00:01:34,479 --> 00:01:38,560
there

00:01:34,799 --> 00:01:40,720
uh and the company the foundation

00:01:38,560 --> 00:01:41,840
uh had recently had a terrible

00:01:40,720 --> 00:01:44,880
experience

00:01:41,840 --> 00:01:48,640
working with the folks at varnish

00:01:44,880 --> 00:01:50,000
and well they said you need to have a

00:01:48,640 --> 00:01:53,600
good relationship

00:01:50,000 --> 00:01:55,600
with the elasticsearch core

00:01:53,600 --> 00:01:58,240
group right the core maintainers of

00:01:55,600 --> 00:02:01,600
elasticsearch if we're going to use it

00:01:58,240 --> 00:02:02,159
so yes please ask to talk early and

00:02:01,600 --> 00:02:04,880
awesome

00:02:02,159 --> 00:02:05,920
uh interrupt me it's perfect um so

00:02:04,880 --> 00:02:07,520
anyway i i

00:02:05,920 --> 00:02:09,679
started contributing to elasticsearch i

00:02:07,520 --> 00:02:11,120
opened my first pull request

00:02:09,679 --> 00:02:13,120
long before we had elasticsearch in

00:02:11,120 --> 00:02:14,319
production i found some test thing and

00:02:13,120 --> 00:02:17,120
opened it and

00:02:14,319 --> 00:02:19,360
talked to one of the contributors one of

00:02:17,120 --> 00:02:22,640
the maintainers a couple hours later and

00:02:19,360 --> 00:02:24,640
we got it in a day or two and

00:02:22,640 --> 00:02:25,760
ever since i have been a contributor to

00:02:24,640 --> 00:02:29,760
elasticsearch

00:02:25,760 --> 00:02:32,720
and as uh dreams go my dream job

00:02:29,760 --> 00:02:34,720
collapsed and things that the foundation

00:02:32,720 --> 00:02:37,200
changed

00:02:34,720 --> 00:02:38,959
it is a very unique and wonderful place

00:02:37,200 --> 00:02:42,319
with a wonderful mission

00:02:38,959 --> 00:02:45,040
but it didn't work out for me um

00:02:42,319 --> 00:02:46,480
i uh they i was the chief engineer of a

00:02:45,040 --> 00:02:48,480
particular

00:02:46,480 --> 00:02:50,080
thing they they made a search thing and

00:02:48,480 --> 00:02:51,440
i decided i didn't want to be a chief

00:02:50,080 --> 00:02:53,200
engineer

00:02:51,440 --> 00:02:54,640
so i went to go work for elastic as an

00:02:53,200 --> 00:02:56,640
individual contributor hacking

00:02:54,640 --> 00:02:59,519
elasticsearch and i've pretty much done

00:02:56,640 --> 00:03:01,440
that for the past five years now

00:02:59,519 --> 00:03:03,280
i never thought i would do anything for

00:03:01,440 --> 00:03:05,360
five years that's a long time but look

00:03:03,280 --> 00:03:08,480
at anyone technology

00:03:05,360 --> 00:03:09,519
anyone place so yeah here i am uh here

00:03:08,480 --> 00:03:11,920
to talk about

00:03:09,519 --> 00:03:13,680
elasticsearch because after five years

00:03:11,920 --> 00:03:15,440
feels a little like that's all i know

00:03:13,680 --> 00:03:16,720
but it's it's a useful thing and people

00:03:15,440 --> 00:03:20,720
tend to like it so

00:03:16,720 --> 00:03:24,400
i'm happy um so

00:03:20,720 --> 00:03:26,239
let me share my screen i have to admit

00:03:24,400 --> 00:03:27,440
that i'm using my children's gaming

00:03:26,239 --> 00:03:30,480
desktop because

00:03:27,440 --> 00:03:31,200
i usually use linux and i don't feel

00:03:30,480 --> 00:03:33,200
that

00:03:31,200 --> 00:03:35,040
linux is particularly stable for screen

00:03:33,200 --> 00:03:37,519
sharing zoom all day

00:03:35,040 --> 00:03:38,159
um it likes to crash when you screen

00:03:37,519 --> 00:03:40,720
shows you

00:03:38,159 --> 00:03:43,040
so this is it this is my presentation uh

00:03:40,720 --> 00:03:45,120
you can see how organized i am i'm

00:03:43,040 --> 00:03:46,239
i am not a professional speaker i'm very

00:03:45,120 --> 00:03:49,440
much a

00:03:46,239 --> 00:03:50,560
a hacker uh and i'm even sort of doing

00:03:49,440 --> 00:03:52,879
things out of order

00:03:50,560 --> 00:03:53,920
um so i just did the what is net who is

00:03:52,879 --> 00:03:56,239
nick part

00:03:53,920 --> 00:03:58,799
uh and i'm gonna skip the the what is

00:03:56,239 --> 00:04:00,480
elasticsearch part because

00:03:58,799 --> 00:04:03,120
well that doesn't feel like the right

00:04:00,480 --> 00:04:04,640
time yet um

00:04:03,120 --> 00:04:06,720
i guess let's skip to the who are you

00:04:04,640 --> 00:04:09,280
people part uh if

00:04:06,720 --> 00:04:10,959
we were in person uh this is where i

00:04:09,280 --> 00:04:14,560
would try to go around the room

00:04:10,959 --> 00:04:16,799
and uh talk to everybody um

00:04:14,560 --> 00:04:17,840
you know get your name what you do what

00:04:16,799 --> 00:04:20,320
you want to do

00:04:17,840 --> 00:04:21,040
and uh you know why you're while you're

00:04:20,320 --> 00:04:24,479
in this

00:04:21,040 --> 00:04:28,479
workshop and interested in contributing

00:04:24,479 --> 00:04:32,080
just say hi so hi um i will stop

00:04:28,479 --> 00:04:33,360
um yeah can you they can't go on video

00:04:32,080 --> 00:04:36,400
right that's not a thing

00:04:33,360 --> 00:04:39,680
no but i but what i can do is

00:04:36,400 --> 00:04:43,759
i can allow i can allow

00:04:39,680 --> 00:04:46,240
everyone to talk though so

00:04:43,759 --> 00:04:48,400
and so we could just do it that way we

00:04:46,240 --> 00:04:51,199
only have 14

00:04:48,400 --> 00:04:51,680
people yeah so this should work really

00:04:51,199 --> 00:04:55,360
well

00:04:51,680 --> 00:04:57,199
so all right if you allow everyone to

00:04:55,360 --> 00:04:58,960
talk i will go from the top of my

00:04:57,199 --> 00:05:00,960
attendees list to the bottom or else

00:04:58,960 --> 00:05:03,840
people won't have any idea

00:05:00,960 --> 00:05:04,960
what order to go in so yeah know that

00:05:03,840 --> 00:05:07,360
you're going to be called in

00:05:04,960 --> 00:05:11,360
alphabetical order by first name

00:05:07,360 --> 00:05:15,680
so prepare uh or not apparently ed

00:05:11,360 --> 00:05:19,199
ed has jumped in front of andrew so uh

00:05:15,680 --> 00:05:25,840
ed are you ready can you tell

00:05:19,199 --> 00:05:25,840
us who you are

00:05:31,919 --> 00:05:35,039
right everyone's changing order on my in

00:05:34,080 --> 00:05:38,080
my view so that's

00:05:35,039 --> 00:05:41,039
perfect as you're promoting them

00:05:38,080 --> 00:05:42,160
yeah sorry about that well i just asked

00:05:41,039 --> 00:05:45,199
ed to unmute

00:05:42,160 --> 00:05:48,560
so hopefully ed will hear this

00:05:45,199 --> 00:05:50,160
and unmute and um like the last time i

00:05:48,560 --> 00:05:52,639
was i sat through

00:05:50,160 --> 00:05:54,080
the kubernetes talk uh if somebody had

00:05:52,639 --> 00:05:54,560
asked me in the middle of the talk to go

00:05:54,080 --> 00:05:56,800
off

00:05:54,560 --> 00:05:57,840
to go off mute to come unmute i would

00:05:56,800 --> 00:05:59,919
not be able to

00:05:57,840 --> 00:06:01,120
so it's okay if you can't or don't want

00:05:59,919 --> 00:06:04,880
to yeah

00:06:01,120 --> 00:06:06,639
um we can move on to whoever's next

00:06:04,880 --> 00:06:09,120
in fact frankly anyone who wants to just

00:06:06,639 --> 00:06:11,280
come on off mute let's do it

00:06:09,120 --> 00:06:12,160
let's do it that way so you want to

00:06:11,280 --> 00:06:21,360
introduce yourself

00:06:12,160 --> 00:06:22,080
please do it uh my name is savannah and

00:06:21,360 --> 00:06:24,720
i'm into

00:06:22,080 --> 00:06:26,000
data curation and ontologies and all

00:06:24,720 --> 00:06:28,960
that good stuff

00:06:26,000 --> 00:06:34,880
um and i'm just interested in what

00:06:28,960 --> 00:06:37,520
elasticsearch is

00:06:34,880 --> 00:06:38,800
all right that's awesome i will have

00:06:37,520 --> 00:06:41,120
maybe

00:06:38,800 --> 00:06:42,479
i'll have some what elasticsearch is and

00:06:41,120 --> 00:06:45,840
how it works

00:06:42,479 --> 00:06:47,440
uh but my plan is to go into the sort of

00:06:45,840 --> 00:06:50,560
hacking on elasticsearch stuff

00:06:47,440 --> 00:06:53,599
pretty quickly um if it turns out

00:06:50,560 --> 00:06:55,360
that that is what the that that's what

00:06:53,599 --> 00:06:58,479
people are primarily interested in is

00:06:55,360 --> 00:07:01,280
what elasticsearch is and how you use it

00:06:58,479 --> 00:07:02,479
we'll do it um with no preparation

00:07:01,280 --> 00:07:03,840
whatsoever

00:07:02,479 --> 00:07:06,240
we'll have that we'll have that talk

00:07:03,840 --> 00:07:06,240
instead

00:07:12,400 --> 00:07:20,000
can you guys hear me yes go for it

00:07:16,319 --> 00:07:22,560
hey um i'm logish and uh

00:07:20,000 --> 00:07:24,479
i'm here to kind of also see what what

00:07:22,560 --> 00:07:26,240
elastic search is

00:07:24,479 --> 00:07:27,599
uh maybe you could just kind of give a

00:07:26,240 --> 00:07:31,840
brief and then

00:07:27,599 --> 00:07:31,840
kind of cover whatever you had

00:07:33,039 --> 00:07:35,919
yeah absolutely

00:07:38,960 --> 00:07:44,639
can i go yeah do it for breeze go go go

00:07:42,400 --> 00:07:47,680
hey so i'm fabrice i've been working

00:07:44,639 --> 00:07:50,080
with this research in the past

00:07:47,680 --> 00:07:52,879
i was i was building a search platform

00:07:50,080 --> 00:07:52,879
essentially for

00:07:53,440 --> 00:07:56,720
recruiters to find engineers or other

00:07:56,080 --> 00:07:58,479
kind of

00:07:56,720 --> 00:08:00,960
things and i stopped talking there

00:07:58,479 --> 00:08:02,240
actually for two years and a half ago or

00:08:00,960 --> 00:08:04,479
something like that seems that i didn't

00:08:02,240 --> 00:08:07,120
touch elasticsearch i kind of miss it

00:08:04,479 --> 00:08:07,759
so that's why i'm here especially i want

00:08:07,120 --> 00:08:13,840
to

00:08:07,759 --> 00:08:13,840
get my hands a bit dirty and uh yeah

00:08:15,759 --> 00:08:18,160
awesome

00:08:19,919 --> 00:08:27,199
all right anyone else want to come off

00:08:22,160 --> 00:08:31,120
mute introduce yourself

00:08:27,199 --> 00:08:34,240
hey hey uh my name's uh jean marcel

00:08:31,120 --> 00:08:37,279
not related to jean-claude van damme um

00:08:34,240 --> 00:08:40,560
but uh i'm a devops engineer

00:08:37,279 --> 00:08:43,919
um i've played a little bit with uh

00:08:40,560 --> 00:08:45,360
um with elasticsearch but um

00:08:43,919 --> 00:08:47,120
i kind of just want to learn a little

00:08:45,360 --> 00:08:50,560
bit more about it like

00:08:47,120 --> 00:08:55,839
some of the use cases um and yeah

00:08:50,560 --> 00:08:55,839
that's pretty much what i attended

00:08:58,959 --> 00:09:02,560
all right if there's anyone else please

00:09:01,760 --> 00:09:06,959
go ahead

00:09:02,560 --> 00:09:08,880
otherwise i will start talking about

00:09:06,959 --> 00:09:11,040
introduction to elasticsearch and and

00:09:08,880 --> 00:09:14,160
use cases and uh

00:09:11,040 --> 00:09:14,640
sadly bore for breeze for 20 minutes or

00:09:14,160 --> 00:09:17,279
something

00:09:14,640 --> 00:09:18,560
and then um we'll turn around and try to

00:09:17,279 --> 00:09:21,200
get a little dirtier

00:09:18,560 --> 00:09:24,800
into how it all works uh and i'll break

00:09:21,200 --> 00:09:24,800
out ms paint and all that good stuff

00:09:26,240 --> 00:09:31,920
anyone else want to introduce yes i

00:09:29,440 --> 00:09:32,880
can go next my name is gabe i'm

00:09:31,920 --> 00:09:35,360
currently a

00:09:32,880 --> 00:09:36,000
senior software engineer i work

00:09:35,360 --> 00:09:39,120
primarily

00:09:36,000 --> 00:09:44,720
in java and i am interested

00:09:39,120 --> 00:09:44,720
in elasticsearch as a means to

00:09:44,880 --> 00:09:50,959
as a custom means to search

00:09:48,399 --> 00:09:51,600
a lot of application logs and like build

00:09:50,959 --> 00:09:54,959
my

00:09:51,600 --> 00:09:54,959
own tools in that space

00:09:58,959 --> 00:10:04,880
and my kid just uh affirmed that

00:10:02,480 --> 00:10:07,279
i hear it i hear it that's good perfect

00:10:04,880 --> 00:10:10,160
that's what these things are

00:10:07,279 --> 00:10:11,040
children all i put my screen up here uh

00:10:10,160 --> 00:10:13,360
so that my

00:10:11,040 --> 00:10:14,320
kids may not bash it down and jump in

00:10:13,360 --> 00:10:16,800
front of the camera

00:10:14,320 --> 00:10:19,839
but uh you know two hours is a long time

00:10:16,800 --> 00:10:19,839
they may just do it

00:10:26,800 --> 00:10:30,480
hey ed you are not you do not have sound

00:10:29,360 --> 00:10:33,040
you came from

00:10:30,480 --> 00:10:35,200
came for the hacking all right good uh

00:10:33,040 --> 00:10:39,040
and automatic test locally i'm happy to

00:10:35,200 --> 00:10:46,480
i will get to that all right so um

00:10:39,040 --> 00:10:50,079
i'm gonna i am going to uh

00:10:46,480 --> 00:10:51,600
give this talk uh as though

00:10:50,079 --> 00:10:53,680
oh is that another person wants to

00:10:51,600 --> 00:10:56,079
introduce if so go ahead

00:10:53,680 --> 00:10:56,079
if not

00:10:56,720 --> 00:11:00,320
all right i'm going to introduce this

00:10:58,320 --> 00:11:02,240
i'm going to roll this talk as though it

00:11:00,320 --> 00:11:04,800
were

00:11:02,240 --> 00:11:06,480
fracking and take a longer detour into

00:11:04,800 --> 00:11:08,399
sort of how to use elasticsearch and try

00:11:06,480 --> 00:11:10,480
to cover sort of why

00:11:08,399 --> 00:11:13,360
why it does the things that it does to

00:11:10,480 --> 00:11:16,880
try and not

00:11:13,360 --> 00:11:18,320
um try and not make things uh

00:11:16,880 --> 00:11:19,839
wrong for those of you that came and

00:11:18,320 --> 00:11:21,120
wanted a sort of general general

00:11:19,839 --> 00:11:24,880
introduction

00:11:21,120 --> 00:11:25,839
so um expects to see a bunch of json a

00:11:24,880 --> 00:11:28,399
bunch of curl

00:11:25,839 --> 00:11:29,440
and uh probably a bunch of in this paint

00:11:28,399 --> 00:11:31,279
as we start to

00:11:29,440 --> 00:11:33,040
describe how nodes talk to one another

00:11:31,279 --> 00:11:35,360
and why they do that

00:11:33,040 --> 00:11:37,120
because i think that kind of talk is is

00:11:35,360 --> 00:11:40,800
fairly useful for faults

00:11:37,120 --> 00:11:42,480
um that need a sort of

00:11:40,800 --> 00:11:43,839
higher level about how elasticsearch

00:11:42,480 --> 00:11:46,640
does what it does

00:11:43,839 --> 00:11:46,640
so um

00:11:47,920 --> 00:11:51,279
let's do this those of you that are that

00:11:50,240 --> 00:11:54,320
are interested

00:11:51,279 --> 00:11:55,839
in contributing to elasticsearch um or

00:11:54,320 --> 00:11:57,200
just those of you that are interested in

00:11:55,839 --> 00:11:58,480
contributing open source software in

00:11:57,200 --> 00:12:03,040
general

00:11:58,480 --> 00:12:06,639
um go through these steps along with me

00:12:03,040 --> 00:12:08,800
open up github and get you a github

00:12:06,639 --> 00:12:10,880
account

00:12:08,800 --> 00:12:12,560
um if you don't already have a github

00:12:10,880 --> 00:12:14,480
account i don't know particularly how

00:12:12,560 --> 00:12:16,240
long it takes but you'll be a tiny bit

00:12:14,480 --> 00:12:19,279
behind

00:12:16,240 --> 00:12:23,360
um go to

00:12:19,279 --> 00:12:27,120
go to github slash elastic slash

00:12:23,360 --> 00:12:30,800
elasticsearch which i will paste

00:12:27,120 --> 00:12:30,800
into the chat

00:12:31,360 --> 00:12:42,800
to the chat if i can find it

00:12:39,519 --> 00:12:46,639
uh actually um nick i will go ahead

00:12:42,800 --> 00:12:50,880
and oh you got it just barely

00:12:46,639 --> 00:12:51,440
i know so look at my uh fixing things

00:12:50,880 --> 00:12:54,399
while i'm

00:12:51,440 --> 00:12:55,440
doing presentations all right so go up

00:12:54,399 --> 00:12:58,160
to

00:12:55,440 --> 00:13:00,079
this button and and the upper right says

00:12:58,160 --> 00:13:03,279
fork

00:13:00,079 --> 00:13:07,839
and click it and it should take you

00:13:03,279 --> 00:13:07,839
to a page that looks like a photocopier

00:13:08,160 --> 00:13:11,920
and then you end up waiting a good a few

00:13:11,040 --> 00:13:13,839
minutes wow

00:13:11,920 --> 00:13:16,480
well github makes you a copy of

00:13:13,839 --> 00:13:18,880
elasticsearch

00:13:16,480 --> 00:13:20,000
what's sort of step one for writing any

00:13:18,880 --> 00:13:23,279
real contributions to

00:13:20,000 --> 00:13:25,519
it step two

00:13:23,279 --> 00:13:26,800
is downloading the latest jdk which you

00:13:25,519 --> 00:13:29,920
can just search

00:13:26,800 --> 00:13:35,839
google for java development kit

00:13:29,920 --> 00:13:35,839
click download

00:13:42,720 --> 00:13:49,839
oh boy maybe i can

00:14:11,920 --> 00:14:17,199
there we go you'll want this site here

00:14:14,720 --> 00:14:21,600
to get the latest jdk

00:14:17,199 --> 00:14:25,040
you should um you should probably use 15

00:14:21,600 --> 00:14:27,279
uh 14 may work 15

00:14:25,040 --> 00:14:28,839
uh it's probably gonna be required

00:14:27,279 --> 00:14:31,680
frankly

00:14:28,839 --> 00:14:33,600
um go and download that

00:14:31,680 --> 00:14:35,040
and now while you are downloading that i

00:14:33,600 --> 00:14:36,959
will take you through sort of a brief

00:14:35,040 --> 00:14:40,079
introduction of

00:14:36,959 --> 00:14:40,079
what elasticsearch

00:14:40,959 --> 00:14:45,839
does so

00:14:48,000 --> 00:14:52,079
ignore the man behind the mirror for a

00:14:56,839 --> 00:14:59,839
moment

00:15:01,279 --> 00:15:12,959
so can you see this large

00:15:04,959 --> 00:15:17,120
uh get bash window in the middle yes

00:15:12,959 --> 00:15:18,639
perfect thank you very much so um i am

00:15:17,120 --> 00:15:20,240
running elasticsearch this is a thing

00:15:18,639 --> 00:15:21,600
that i promise you and by the

00:15:20,240 --> 00:15:23,680
end of the next 20 minutes you'll be

00:15:21,600 --> 00:15:25,279
able to do uh running elastic search

00:15:23,680 --> 00:15:26,959
from source

00:15:25,279 --> 00:15:28,560
unless we end up fighting with the jdk

00:15:26,959 --> 00:15:31,920
for a while which is

00:15:28,560 --> 00:15:35,440
traditional but uh we'll work it out

00:15:31,920 --> 00:15:36,079
so um oh there it goes downloading a

00:15:35,440 --> 00:15:38,880
snapshot

00:15:36,079 --> 00:15:41,360
and taking an extra few minutes right at

00:15:38,880 --> 00:15:44,399
the top of our presentation but

00:15:41,360 --> 00:15:47,759
elasticsearch is a distributed

00:15:44,399 --> 00:15:52,320
restful document store

00:15:47,759 --> 00:15:55,040
search engine thing um

00:15:52,320 --> 00:15:56,079
those of you that are rest purists may

00:15:55,040 --> 00:15:59,600
not buy that

00:15:56,079 --> 00:16:02,240
but uh essentially you stick documents

00:15:59,600 --> 00:16:05,279
in it that look like json

00:16:02,240 --> 00:16:06,839
say like this document here that i've

00:16:05,279 --> 00:16:08,880
highlighted on my screen that is a

00:16:06,839 --> 00:16:09,920
description of the talk that we're

00:16:08,880 --> 00:16:12,079
giving

00:16:09,920 --> 00:16:14,399
or that i'm that i'm giving you all are

00:16:12,079 --> 00:16:16,639
participating in

00:16:14,399 --> 00:16:16,639
um

00:16:18,880 --> 00:16:25,680
uh elasticsearch the the restful bit is

00:16:22,720 --> 00:16:29,519
basically that you talk to it over http

00:16:25,680 --> 00:16:30,959
so uh that is the same thing that your

00:16:29,519 --> 00:16:33,040
browser speaks

00:16:30,959 --> 00:16:35,040
uh but there's sort of this lovely

00:16:33,040 --> 00:16:35,279
command line tool called curl that sort

00:16:35,040 --> 00:16:37,600
of

00:16:35,279 --> 00:16:38,320
does it for us lets us communicate with

00:16:37,600 --> 00:16:40,800
it

00:16:38,320 --> 00:16:41,680
uh if you've done a bunch of unix stuff

00:16:40,800 --> 00:16:44,800
you'll have

00:16:41,680 --> 00:16:47,759
bumped into curl or wgap or whatever

00:16:44,800 --> 00:16:47,759
so you can

00:16:48,839 --> 00:16:51,839
paste

00:16:52,639 --> 00:16:56,720
s because it keeps it from taking up all

00:16:55,040 --> 00:16:59,279
the entire screen

00:16:56,720 --> 00:17:00,720
so when you send this uh this document

00:16:59,279 --> 00:17:04,000
to elasticsearch it happily

00:17:00,720 --> 00:17:05,839
says hey i got it basically and like i

00:17:04,000 --> 00:17:07,760
said it's a document store so you can

00:17:05,839 --> 00:17:10,959
get the document right back out again

00:17:07,760 --> 00:17:10,959
um based

00:17:14,959 --> 00:17:18,079
that's what i get for using windows i'm

00:17:16,720 --> 00:17:19,919
not used to it

00:17:18,079 --> 00:17:22,480
so this is our document that we put in

00:17:19,919 --> 00:17:22,480
right here

00:17:24,880 --> 00:17:31,039
and it does sort of standard database

00:17:27,919 --> 00:17:34,000
things and that you can

00:17:31,039 --> 00:17:36,000
do queries against it so like this is a

00:17:34,000 --> 00:17:38,880
range query this is like a

00:17:36,000 --> 00:17:41,120
like a less than or greater than kind of

00:17:38,880 --> 00:17:41,120
thing

00:17:45,200 --> 00:17:49,039
and that gets our document back out as

00:17:46,880 --> 00:17:50,640
well we use json to talk to

00:17:49,039 --> 00:17:54,000
elasticsearch

00:17:50,640 --> 00:17:57,120
mostly because that's what people that

00:17:54,000 --> 00:18:01,280
like http tend to like uh

00:17:57,120 --> 00:18:03,039
it gets the job done but uh you'll see

00:18:01,280 --> 00:18:05,120
when you start writing longer and longer

00:18:03,039 --> 00:18:05,840
bits of request to elasticsearch that it

00:18:05,120 --> 00:18:09,120
tends to get

00:18:05,840 --> 00:18:09,840
very very verbose uh elasticsearch on

00:18:09,120 --> 00:18:11,360
top of

00:18:09,840 --> 00:18:12,880
being just sort of regular document

00:18:11,360 --> 00:18:14,400
store it's also got like a search engine

00:18:12,880 --> 00:18:16,160
in it right um

00:18:14,400 --> 00:18:18,400
so i can search for the word

00:18:16,160 --> 00:18:18,720
contributing which appears i mean it is

00:18:18,400 --> 00:18:19,919
a

00:18:18,720 --> 00:18:21,840
search engine anyway i can search for

00:18:19,919 --> 00:18:24,160
the word contributing which

00:18:21,840 --> 00:18:25,600
matches one of the words in the title

00:18:24,160 --> 00:18:28,559
and that

00:18:25,600 --> 00:18:30,080
the way we index the documents sort of

00:18:28,559 --> 00:18:32,480
makes that automatically work

00:18:30,080 --> 00:18:35,039
right so you can automatically find our

00:18:32,480 --> 00:18:36,799
contributing to elasticsearch

00:18:35,039 --> 00:18:38,880
finally we're going to use the bulk

00:18:36,799 --> 00:18:40,080
action to load a whole bunch of

00:18:38,880 --> 00:18:41,039
documents at the same time in

00:18:40,080 --> 00:18:43,919
elasticsearch

00:18:41,039 --> 00:18:44,880
this is um if you've used the relational

00:18:43,919 --> 00:18:47,600
databases

00:18:44,880 --> 00:18:48,559
uh you know that when you begin a

00:18:47,600 --> 00:18:50,160
transaction

00:18:48,559 --> 00:18:52,160
and insert a bunch of documents and then

00:18:50,160 --> 00:18:54,240
commit

00:18:52,160 --> 00:18:56,240
the database is flushing to the file

00:18:54,240 --> 00:18:58,799
system to ensure that

00:18:56,240 --> 00:19:00,320
if there's a power outage or whatever um

00:18:58,799 --> 00:19:03,120
you don't

00:19:00,320 --> 00:19:04,559
get half your data written or things

00:19:03,120 --> 00:19:07,360
along those lines

00:19:04,559 --> 00:19:08,400
um elasticsearch doesn't have

00:19:07,360 --> 00:19:11,120
transactions and it

00:19:08,400 --> 00:19:12,480
doesn't have persistent connections uh

00:19:11,120 --> 00:19:15,120
because it's using

00:19:12,480 --> 00:19:16,160
http so the way we we handle this is

00:19:15,120 --> 00:19:19,600
that you end up with this

00:19:16,160 --> 00:19:20,559
bulk bulk right operation because that's

00:19:19,600 --> 00:19:24,640
the thing that you

00:19:20,559 --> 00:19:24,960
tend to want to to delay the the fsync

00:19:24,640 --> 00:19:26,400
for

00:19:24,960 --> 00:19:28,000
so this will just write a whole bunch of

00:19:26,400 --> 00:19:31,679
documents like six or something

00:19:28,000 --> 00:19:33,280
one two five documents all at one time

00:19:31,679 --> 00:19:34,880
and because it's demo data it's

00:19:33,280 --> 00:19:37,200
basically instant

00:19:34,880 --> 00:19:38,400
um and this takes the same results that

00:19:37,200 --> 00:19:40,240
we had before

00:19:38,400 --> 00:19:42,320
when you added a single document and

00:19:40,240 --> 00:19:46,880
adds it all to the output

00:19:42,320 --> 00:19:50,960
and uh yeah that's about

00:19:46,880 --> 00:19:54,559
that's that so i would like to know uh

00:19:50,960 --> 00:19:59,600
who has uh downloaded the jdk

00:19:54,559 --> 00:20:01,600
and um created a fork of elasticsearch

00:19:59,600 --> 00:20:04,000
is there anyone that wants to do those

00:20:01,600 --> 00:20:05,600
things and has has yet to finish doing

00:20:04,000 --> 00:20:07,679
those things

00:20:05,600 --> 00:20:09,840
because i can stall for time if i have

00:20:07,679 --> 00:20:09,840
to

00:20:16,080 --> 00:20:22,240
all right i'm going to proceed as though

00:20:19,120 --> 00:20:26,480
you have completed all those things so

00:20:22,240 --> 00:20:28,240
uh you should i have yet and will

00:20:26,480 --> 00:20:30,000
but you can continue great to them thank

00:20:28,240 --> 00:20:31,679
you you

00:20:30,000 --> 00:20:33,200
getting stuck signing up for github or

00:20:31,679 --> 00:20:36,480
something that i

00:20:33,200 --> 00:20:36,480
didn't warn people they had to do

00:20:38,000 --> 00:20:43,120
so that that fork

00:20:41,520 --> 00:20:45,520
process that page that looked like a

00:20:43,120 --> 00:20:47,840
photocopy should

00:20:45,520 --> 00:20:50,159
um change to look a heck of a lot like

00:20:47,840 --> 00:20:50,159
this

00:20:50,799 --> 00:20:55,280
uh this is your own copy of

00:20:53,120 --> 00:20:59,360
elasticsearch

00:20:55,280 --> 00:20:59,360
and it's uh

00:20:59,600 --> 00:21:04,000
got all the code in it the way you get

00:21:02,080 --> 00:21:06,480
that code

00:21:04,000 --> 00:21:07,679
is by clicking this code button and then

00:21:06,480 --> 00:21:11,440
clicking

00:21:07,679 --> 00:21:15,200
here you will also want to go get

00:21:11,440 --> 00:21:17,919
git which

00:21:15,200 --> 00:21:20,320
if you're on windows actually has this

00:21:17,919 --> 00:21:20,320
lovely

00:21:21,760 --> 00:21:25,919
comes with this lovely git ssh thing

00:21:24,080 --> 00:21:27,679
that i've been using as a

00:21:25,919 --> 00:21:29,039
proper console editor because windows

00:21:27,679 --> 00:21:32,240
didn't have a

00:21:29,039 --> 00:21:34,080
a good terminal for what until a couple

00:21:32,240 --> 00:21:37,120
years ago

00:21:34,080 --> 00:21:44,880
so yeah um you'll want to execute

00:21:37,120 --> 00:21:48,720
command like

00:21:44,880 --> 00:21:48,720
you want to go to some directory

00:21:49,679 --> 00:21:54,320
and you want to execute a command that

00:21:51,600 --> 00:21:54,320
looks like this

00:21:56,159 --> 00:22:01,919
git clone and then whatever this

00:21:59,360 --> 00:22:01,919
copies

00:22:02,559 --> 00:22:06,480
whatever clicking that button copies

00:22:04,240 --> 00:22:06,480
from

00:22:08,559 --> 00:22:13,840
that's also wrong thank you

00:22:18,080 --> 00:22:27,840
i think my terminal is done for

00:22:30,960 --> 00:22:34,080
you want to execute a command that looks

00:22:32,720 --> 00:22:36,000
like git clone

00:22:34,080 --> 00:22:37,360
and then whatever that paste so it'll

00:22:36,000 --> 00:22:40,480
look like git clone get

00:22:37,360 --> 00:22:44,080
at github.com

00:22:40,480 --> 00:22:47,760
and that will

00:22:44,080 --> 00:22:47,760
likely prompt you for your github

00:22:52,840 --> 00:22:57,039
password

00:22:54,000 --> 00:23:00,080
ignore that i don't know my own password

00:22:57,039 --> 00:23:02,080
um and then it will go

00:23:00,080 --> 00:23:03,840
and download elasticsearch so this will

00:23:02,080 --> 00:23:06,799
download your clone

00:23:03,840 --> 00:23:06,799
of elasticsearch

00:23:06,960 --> 00:23:12,320
is any of this weird to anyone

00:23:16,240 --> 00:23:22,640
if you have never used git before

00:23:20,080 --> 00:23:25,039
the answer is yes this is weird but if

00:23:22,640 --> 00:23:28,720
you have you've probably

00:23:25,039 --> 00:23:28,720
gotten used to all this strangeness

00:23:29,440 --> 00:23:34,080
but while we are waiting for it to

00:23:31,120 --> 00:23:34,080
download i will

00:23:34,480 --> 00:23:41,360
give you the you forget uh it is

00:23:38,480 --> 00:23:42,080
basically a system for versioning text

00:23:41,360 --> 00:23:44,000
files

00:23:42,080 --> 00:23:46,320
versioning big directory trees of text

00:23:44,000 --> 00:23:48,080
files

00:23:46,320 --> 00:23:49,520
the idea is that you can make some

00:23:48,080 --> 00:23:53,360
change on your local system

00:23:49,520 --> 00:23:56,000
stage them and then write them to a

00:23:53,360 --> 00:23:58,159
shared log that everyone

00:23:56,000 --> 00:24:00,320
write them to a log on your system with

00:23:58,159 --> 00:24:01,520
an annotation as to why you changed them

00:24:00,320 --> 00:24:03,279
that way

00:24:01,520 --> 00:24:05,440
and then share that log with other

00:24:03,279 --> 00:24:08,559
people that is sort of

00:24:05,440 --> 00:24:12,320
generically what git does and people

00:24:08,559 --> 00:24:14,159
use it in various sort of magic ways to

00:24:12,320 --> 00:24:16,480
build software

00:24:14,159 --> 00:24:18,720
because for the most part software is

00:24:16,480 --> 00:24:20,880
text files and

00:24:18,720 --> 00:24:22,320
this problem of maintaining them and not

00:24:20,880 --> 00:24:23,440
stamping on each other's toes is

00:24:22,320 --> 00:24:27,120
actually quite hard

00:24:23,440 --> 00:24:27,120
it does a fairly decent job of it

00:24:28,400 --> 00:24:32,080
so because i have a cooking show style i

00:24:31,120 --> 00:24:36,880
already have

00:24:32,080 --> 00:24:36,880
cloned this sitting over here um

00:24:37,120 --> 00:24:41,760
so what else did i say oh let's give you

00:24:40,320 --> 00:24:43,520
a second

00:24:41,760 --> 00:24:47,840
second list of things elasticsearch can

00:24:43,520 --> 00:24:47,840
do so while you are still downloading

00:25:00,960 --> 00:25:04,880
i will run it and run some more commands

00:25:03,919 --> 00:25:07,600
um

00:25:04,880 --> 00:25:08,480
shoot jump in please okay uh it looks

00:25:07,600 --> 00:25:11,279
like ed

00:25:08,480 --> 00:25:11,919
it's just me but it looks like ed has a

00:25:11,279 --> 00:25:15,440
question

00:25:11,919 --> 00:25:16,640
in chat yeah okay

00:25:15,440 --> 00:25:18,559
mostly thinking of memory but it's

00:25:16,640 --> 00:25:19,919
surprisingly uh

00:25:18,559 --> 00:25:22,880
processor and disintensive that's

00:25:19,919 --> 00:25:25,039
helpful as well um

00:25:22,880 --> 00:25:27,440
if you want to open elasticsearch in an

00:25:25,039 --> 00:25:29,520
integrated development environment

00:25:27,440 --> 00:25:31,279
like intellij or eclipse you're gonna

00:25:29,520 --> 00:25:32,880
need about two gigs of memory because

00:25:31,279 --> 00:25:36,480
those things

00:25:32,880 --> 00:25:39,919
love memory a lot elastic search itself

00:25:36,480 --> 00:25:42,720
um if you happen to run all of the tests

00:25:39,919 --> 00:25:46,080
uh like all of them all of them um

00:25:42,720 --> 00:25:49,360
you're gonna need a couple hours maybe

00:25:46,080 --> 00:25:52,640
50 60 gigabytes of memory and

00:25:49,360 --> 00:25:54,880
um a desktop computer

00:25:52,640 --> 00:25:57,039
laptops tend to like levitate on their

00:25:54,880 --> 00:25:59,600
fans when they do all of it

00:25:57,039 --> 00:26:00,640
uh but for the most part if you open up

00:25:59,600 --> 00:26:02,240
if you're if you're interested in

00:26:00,640 --> 00:26:04,080
opening a pull request you can

00:26:02,240 --> 00:26:05,760
run the tests really in a fairly

00:26:04,080 --> 00:26:06,960
targeted manner and you don't end up

00:26:05,760 --> 00:26:09,039
needing to do that

00:26:06,960 --> 00:26:10,960
and you just need to sort of compile it

00:26:09,039 --> 00:26:13,600
and run one or two

00:26:10,960 --> 00:26:14,559
uh so i do my day-to-day development on

00:26:13,600 --> 00:26:17,440
on a laptop

00:26:14,559 --> 00:26:18,080
that um well frankly because elastic

00:26:17,440 --> 00:26:20,480
paid for it

00:26:18,080 --> 00:26:21,120
made them pay for a very nice one but uh

00:26:20,480 --> 00:26:24,000
you

00:26:21,120 --> 00:26:25,039
don't really need a super duper nice one

00:26:24,000 --> 00:26:28,320
the biggest thing

00:26:25,039 --> 00:26:30,240
is having a bunch of memory uh it helps

00:26:28,320 --> 00:26:33,200
a lot with the ides

00:26:30,240 --> 00:26:35,679
um just to clone it apparently is it

00:26:33,200 --> 00:26:37,120
takes like a gigabyte

00:26:35,679 --> 00:26:38,400
doing all the compile it's gonna take

00:26:37,120 --> 00:26:39,200
another couple of gigabytes of hard

00:26:38,400 --> 00:26:42,559
drive space

00:26:39,200 --> 00:26:43,679
uh it's it's it's a rather a lot of

00:26:42,559 --> 00:26:46,000
software

00:26:43,679 --> 00:26:47,760
frankly to to clone it and get it all

00:26:46,000 --> 00:26:50,240
running

00:26:47,760 --> 00:26:52,080
and it's not like java it's not like

00:26:50,240 --> 00:26:54,159
that was something they optimized

00:26:52,080 --> 00:26:56,960
for when they made java the size of the

00:26:54,159 --> 00:26:56,960
executable

00:26:57,120 --> 00:27:04,880
so uh well we've got uh

00:27:00,880 --> 00:27:04,880
while you are cloning um

00:27:05,039 --> 00:27:09,520
i already did that both i can talk about

00:27:08,240 --> 00:27:14,400
some other things

00:27:09,520 --> 00:27:14,400
uh that elasticsearch does um

00:27:17,440 --> 00:27:22,399
um actually we just did that one we did

00:27:19,840 --> 00:27:25,919
a query

00:27:22,399 --> 00:27:28,880
so elasticsearch also does these sort of

00:27:25,919 --> 00:27:29,440
um aggregate we call them aggregations

00:27:28,880 --> 00:27:31,600
they're really

00:27:29,440 --> 00:27:33,120
they are a lot like uh group buying

00:27:31,600 --> 00:27:36,640
statements in sql

00:27:33,120 --> 00:27:38,559
the idea here is that you can summarize

00:27:36,640 --> 00:27:39,840
many documents that are sitting on the

00:27:38,559 --> 00:27:42,240
elasticsearch server

00:27:39,840 --> 00:27:44,240
without having to pull them all down to

00:27:42,240 --> 00:27:48,080
your local machine

00:27:44,240 --> 00:27:51,279
um so this one groups the the documents

00:27:48,080 --> 00:27:52,240
uh by the value in a particular of a

00:27:51,279 --> 00:27:56,000
particular

00:27:52,240 --> 00:27:57,919
uh string field in this case the track

00:27:56,000 --> 00:28:02,399
field uh so you see up here that i

00:27:57,919 --> 00:28:03,520
dumped um

00:28:02,399 --> 00:28:05,039
things with the track networking

00:28:03,520 --> 00:28:07,279
elasticsearch and some things with the

00:28:05,039 --> 00:28:10,559
track databases into the system

00:28:07,279 --> 00:28:13,840
right yes i did um and so

00:28:10,559 --> 00:28:13,840
when i run this query

00:28:15,440 --> 00:28:22,960
it says index not found that's perfect

00:28:19,120 --> 00:28:24,960
and oh because i destroyed it when i

00:28:22,960 --> 00:28:27,919
ctrl c it and start it over so we can

00:28:24,960 --> 00:28:27,919
just build it again

00:28:29,520 --> 00:28:34,080
go go demogobs okay

00:28:39,360 --> 00:28:45,120
so this is this little bit right here

00:28:42,799 --> 00:28:47,360
is the output of that aggregation where

00:28:45,120 --> 00:28:49,360
it's taking and summarizing

00:28:47,360 --> 00:28:50,720
the documents as i said it groups them

00:28:49,360 --> 00:28:53,039
by uh

00:28:50,720 --> 00:28:54,960
the the track that they're in and counts

00:28:53,039 --> 00:28:56,320
them and because i dumped six documents

00:28:54,960 --> 00:29:00,720
into the system

00:28:56,320 --> 00:29:03,120
talking about the uh the three of the uh

00:29:00,720 --> 00:29:04,640
or three of the talks in the databases

00:29:03,120 --> 00:29:06,000
track and three of the tokens

00:29:04,640 --> 00:29:07,760
the track that we're in the networking

00:29:06,000 --> 00:29:11,279
elastic search track

00:29:07,760 --> 00:29:12,880
uh it counts to three um

00:29:11,279 --> 00:29:14,880
if you see here i got other options

00:29:12,880 --> 00:29:17,200
right i can

00:29:14,880 --> 00:29:19,840
group by time in this case i'm grouping

00:29:17,200 --> 00:29:19,840
by day

00:29:20,559 --> 00:29:26,320
um so you see here that i made an error

00:29:24,320 --> 00:29:27,840
and i dumped one in two two days from

00:29:26,320 --> 00:29:32,080
now not not tomorrow

00:29:27,840 --> 00:29:34,000
but uh that it does group them

00:29:32,080 --> 00:29:35,360
uh and you can sort of compose these

00:29:34,000 --> 00:29:39,360
things together

00:29:35,360 --> 00:29:40,799
um you can put the this is the

00:29:39,360 --> 00:29:42,480
this is the aggregation from up here

00:29:40,799 --> 00:29:44,399
that groups by time and this is the

00:29:42,480 --> 00:29:45,360
aggregation that goes by term so you can

00:29:44,399 --> 00:29:48,799
see

00:29:45,360 --> 00:29:51,760
uh when when the classes are in

00:29:48,799 --> 00:29:51,760
particular days

00:29:52,799 --> 00:29:56,159
you can see that the networking

00:29:54,159 --> 00:29:59,520
elasticsearch track i only indicate

00:29:56,159 --> 00:29:59,919
i only um indexed the the talks for

00:29:59,520 --> 00:30:03,039
today

00:29:59,919 --> 00:30:04,880
and you can see that for the databases

00:30:03,039 --> 00:30:06,559
track i index the talk for

00:30:04,880 --> 00:30:08,000
what should be tomorrow but i started

00:30:06,559 --> 00:30:11,600
the day after tomorrow and

00:30:08,000 --> 00:30:15,120
two talks for today so

00:30:11,600 --> 00:30:16,640
elasticsearch is it sort of shines when

00:30:15,120 --> 00:30:18,559
you can use both of these things

00:30:16,640 --> 00:30:21,679
together

00:30:18,559 --> 00:30:24,799
when when you want to search for some

00:30:21,679 --> 00:30:27,840
particular piece of text

00:30:24,799 --> 00:30:30,960
either in its very search index english

00:30:27,840 --> 00:30:32,720
analysis ways right where it's like like

00:30:30,960 --> 00:30:35,039
you saw here that i

00:30:32,720 --> 00:30:36,320
was able to search for the word

00:30:35,039 --> 00:30:38,799
contributing

00:30:36,320 --> 00:30:40,240
even though that sort of is some word

00:30:38,799 --> 00:30:41,919
inside of

00:30:40,240 --> 00:30:44,240
inside of the title so it shines when

00:30:41,919 --> 00:30:46,640
you need to do that

00:30:44,240 --> 00:30:47,360
or you need to summarize lots and lots

00:30:46,640 --> 00:30:48,799
of documents

00:30:47,360 --> 00:30:51,600
and it especially shines when you need

00:30:48,799 --> 00:30:54,960
to do both of those things together

00:30:51,600 --> 00:30:57,200
so um i think it was for brace that said

00:30:54,960 --> 00:30:58,320
that they had built a certain search

00:30:57,200 --> 00:31:02,159
system for

00:30:58,320 --> 00:31:04,320
resumes and and folks like that

00:31:02,159 --> 00:31:05,279
the way that you do that then he's

00:31:04,320 --> 00:31:06,880
honestly gonna know

00:31:05,279 --> 00:31:08,960
a heck of a lot more about it than i do

00:31:06,880 --> 00:31:12,480
but the way you do that is is by

00:31:08,960 --> 00:31:14,960
building some json document like

00:31:12,480 --> 00:31:17,120
there you go so see how i i built this

00:31:14,960 --> 00:31:18,640
json document that has a timestamp and a

00:31:17,120 --> 00:31:20,480
track and a title

00:31:18,640 --> 00:31:22,320
so you'd build some json document that

00:31:20,480 --> 00:31:25,360
destroy that describes a

00:31:22,320 --> 00:31:26,240
an applicant right or uh probably an

00:31:25,360 --> 00:31:28,399
applicant frankly

00:31:26,240 --> 00:31:30,080
and have their name and the resumes that

00:31:28,399 --> 00:31:31,600
they've submitted and the skills that

00:31:30,080 --> 00:31:33,519
they listed and

00:31:31,600 --> 00:31:35,919
just the whole text of the document but

00:31:33,519 --> 00:31:39,039
any other stuff that you can

00:31:35,919 --> 00:31:42,399
yank out of the the resume

00:31:39,039 --> 00:31:44,880
by whatever black magic that you

00:31:42,399 --> 00:31:47,840
you develop at your company to extract

00:31:44,880 --> 00:31:47,840
it

00:31:48,320 --> 00:31:54,000
so how is everyone doing my laptop has

00:31:51,840 --> 00:31:54,720
gone to sleep so i cannot see chat one

00:31:54,000 --> 00:31:57,919
moment

00:31:54,720 --> 00:32:02,720
oh now it is awake again okay no

00:31:57,919 --> 00:32:06,080
extra chance how is this different from

00:32:02,720 --> 00:32:09,600
comparing a string um

00:32:06,080 --> 00:32:11,440
through a javascript project or a

00:32:09,600 --> 00:32:13,600
java project just you can just feed

00:32:11,440 --> 00:32:16,320
anything to a

00:32:13,600 --> 00:32:17,039
api and then do the comparison in any

00:32:16,320 --> 00:32:19,840
language

00:32:17,039 --> 00:32:21,760
right oh yeah certainly right um if you

00:32:19,840 --> 00:32:24,240
just have to do some string comparisons

00:32:21,760 --> 00:32:25,919
and just your like if you've got stuff

00:32:24,240 --> 00:32:26,399
in memory if you've got stuff that fits

00:32:25,919 --> 00:32:28,960
in

00:32:26,399 --> 00:32:32,480
in in memory then there isn't really any

00:32:28,960 --> 00:32:35,519
point in using elasticsearch right

00:32:32,480 --> 00:32:36,880
i mean i guess one of one of the reasons

00:32:35,519 --> 00:32:39,760
you may wish

00:32:36,880 --> 00:32:39,760
i'm pinging

00:32:40,399 --> 00:32:46,399
yes so search relevancy is a good uh

00:32:43,519 --> 00:32:47,919
is one of the good answers but uh an

00:32:46,399 --> 00:32:50,080
another answer is that it's

00:32:47,919 --> 00:32:52,960
it it sort of wraps these comparisons

00:32:50,080 --> 00:32:56,720
and wraps these documents in http

00:32:52,960 --> 00:32:58,080
um so this it's the same sort of reason

00:32:56,720 --> 00:33:00,559
why you would use

00:32:58,080 --> 00:33:01,120
a database at all right or a mongodb or

00:33:00,559 --> 00:33:03,440
whatever

00:33:01,120 --> 00:33:04,399
right you want to put these documents

00:33:03,440 --> 00:33:06,559
somewhere that

00:33:04,399 --> 00:33:08,080
isn't your application server partially

00:33:06,559 --> 00:33:09,919
that's because

00:33:08,080 --> 00:33:11,760
you want to be able to shoot your

00:33:09,919 --> 00:33:13,360
application server and replace it or

00:33:11,760 --> 00:33:15,039
because you want to be able to expand

00:33:13,360 --> 00:33:19,360
the number of applications

00:33:15,039 --> 00:33:19,360
because you um

00:33:19,440 --> 00:33:23,440
just don't want to make the application

00:33:21,519 --> 00:33:24,720
servers have enough disk space or even

00:33:23,440 --> 00:33:26,080
have maybe you don't even want them to

00:33:24,720 --> 00:33:27,919
have real disks right they have

00:33:26,080 --> 00:33:29,360
ephemeral disks that die when they go

00:33:27,919 --> 00:33:31,200
away but

00:33:29,360 --> 00:33:32,720
the disks that you give elasticsearch

00:33:31,200 --> 00:33:36,840
get gets to live

00:33:32,720 --> 00:33:39,760
but on top of that it's nicer because

00:33:36,840 --> 00:33:40,799
elasticsearch uh builds data structures

00:33:39,760 --> 00:33:43,440
up front to make the

00:33:40,799 --> 00:33:45,600
to make these searches fast so when i

00:33:43,440 --> 00:33:47,360
search for the word contributing

00:33:45,600 --> 00:33:49,440
elasticsearch did not have to go through

00:33:47,360 --> 00:33:52,880
all of the documents in the database

00:33:49,440 --> 00:33:55,679
right in elasticsearch in fact it it

00:33:52,880 --> 00:33:57,679
it only looked at one right because what

00:33:55,679 --> 00:34:01,760
it does when you give it a document

00:33:57,679 --> 00:34:04,559
here like this is it takes these

00:34:01,760 --> 00:34:05,679
um it takes all of the words and it

00:34:04,559 --> 00:34:07,440
breaks

00:34:05,679 --> 00:34:10,159
breaks them apart into words and then it

00:34:07,440 --> 00:34:12,720
builds an index with the words

00:34:10,159 --> 00:34:14,960
actually it's sort of better than that

00:34:12,720 --> 00:34:14,960
here

00:34:15,359 --> 00:34:21,440
let's get a code editor so that i can

00:34:18,240 --> 00:34:25,119
show you

00:34:21,440 --> 00:34:27,280
thank you however long that takes

00:34:25,119 --> 00:34:28,800
are you there the other other thing the

00:34:27,280 --> 00:34:31,359
thing fabrice said

00:34:28,800 --> 00:34:32,839
i thought that i didn't get to yet is

00:34:31,359 --> 00:34:36,399
search relevancy

00:34:32,839 --> 00:34:38,639
that's when you are making

00:34:36,399 --> 00:34:41,599
when you make on-site search right so

00:34:38,639 --> 00:34:41,599
here let's uh

00:34:43,919 --> 00:34:47,359
just go away come on my children are

00:34:46,240 --> 00:34:48,960
going to be upset at me that i've made

00:34:47,359 --> 00:34:50,879
desktop icons

00:34:48,960 --> 00:34:52,320
but i think they'll have to be okay with

00:34:50,879 --> 00:34:54,960
it

00:34:52,320 --> 00:34:54,960
yes please

00:34:56,079 --> 00:35:01,119
all right in a moment we'll go back to

00:34:59,760 --> 00:35:03,440
this but let's talk about search

00:35:01,119 --> 00:35:03,440
let's see

00:35:05,520 --> 00:35:09,680
so when you go to wikipedia and you want

00:35:07,280 --> 00:35:12,079
to search for cats right

00:35:09,680 --> 00:35:13,119
and you go to the search base for cats

00:35:12,079 --> 00:35:16,079
um

00:35:13,119 --> 00:35:17,359
you see how here how you get cat then

00:35:16,079 --> 00:35:18,880
cats

00:35:17,359 --> 00:35:20,400
the disambiguation page and then

00:35:18,880 --> 00:35:23,520
polydactyl cat

00:35:20,400 --> 00:35:24,720
and then the musical and then like cats

00:35:23,520 --> 00:35:28,839
and dogs

00:35:24,720 --> 00:35:32,400
presumably the film yeah um

00:35:28,839 --> 00:35:34,320
so without any sort of

00:35:32,400 --> 00:35:36,320
understanding of search relevancy you

00:35:34,320 --> 00:35:38,320
just you you'd get

00:35:36,320 --> 00:35:41,040
any one of these first right you'd be

00:35:38,320 --> 00:35:44,079
sorting by the last edit

00:35:41,040 --> 00:35:46,160
date or you'd be sorting by

00:35:44,079 --> 00:35:48,320
well what other choices for sorts do we

00:35:46,160 --> 00:35:50,720
have

00:35:48,320 --> 00:35:52,160
uh creation date or the length of the

00:35:50,720 --> 00:35:55,200
article or something silly

00:35:52,160 --> 00:35:57,520
but um

00:35:55,200 --> 00:35:58,400
we sorted by search relevance which is

00:35:57,520 --> 00:36:01,760
this sort of

00:35:58,400 --> 00:36:05,119
nebulous term where each document

00:36:01,760 --> 00:36:07,040
matched and there are you know

00:36:05,119 --> 00:36:08,560
a couple hundred of them that match

00:36:07,040 --> 00:36:10,560
right i don't know how many matched it

00:36:08,560 --> 00:36:13,040
doesn't actually want to tell us

00:36:10,560 --> 00:36:15,440
because it's expensive to calculate the

00:36:13,040 --> 00:36:18,320
total number of matches but it's like

00:36:15,440 --> 00:36:20,160
more than 500 documents contained cat

00:36:18,320 --> 00:36:22,720
and the fact that

00:36:20,160 --> 00:36:24,160
you get the top one on top is useful so

00:36:22,720 --> 00:36:26,160
it assigns a score to all of them and

00:36:24,160 --> 00:36:28,480
basically sorts by score that's this

00:36:26,160 --> 00:36:30,000
concept of search relevancy

00:36:28,480 --> 00:36:32,880
another thing that it does that is

00:36:30,000 --> 00:36:36,000
useful is like i said it cuts these

00:36:32,880 --> 00:36:36,800
the words into it cuts text into words

00:36:36,000 --> 00:36:40,079
right

00:36:36,800 --> 00:36:42,640
so if you have say i wanted to

00:36:40,079 --> 00:36:42,640
index this

00:36:43,680 --> 00:36:47,119
the first thing it does is it takes the

00:36:45,200 --> 00:36:48,960
whole the whole big long thing and it

00:36:47,119 --> 00:36:50,400
indexes that as a keyword so if you want

00:36:48,960 --> 00:36:51,359
to search for an exact match you can do

00:36:50,400 --> 00:36:53,440
it

00:36:51,359 --> 00:36:56,400
but then the next thing it does is it

00:36:53,440 --> 00:36:59,520
analyzes it and you can think of

00:36:56,400 --> 00:37:02,400
analysis as like uh

00:36:59,520 --> 00:37:03,680
it's sort of this lossy transformation

00:37:02,400 --> 00:37:05,359
that you can do to text

00:37:03,680 --> 00:37:07,359
that will make it so that when you ask

00:37:05,359 --> 00:37:12,160
for the text back you get the same thing

00:37:07,359 --> 00:37:14,160
so um we'll use my search for cats as

00:37:12,160 --> 00:37:15,760
a first example and then bounce to this

00:37:14,160 --> 00:37:18,160
other one next

00:37:15,760 --> 00:37:19,580
when you search for uh wikipedia for

00:37:18,160 --> 00:37:20,839
cats

00:37:19,580 --> 00:37:23,920
[Music]

00:37:20,839 --> 00:37:25,520
um elasticsearch will take that word

00:37:23,920 --> 00:37:27,119
and and it will say well that's just one

00:37:25,520 --> 00:37:28,400
word one english word so it doesn't have

00:37:27,119 --> 00:37:29,680
to do any work there

00:37:28,400 --> 00:37:31,520
and then it will run it through a bunch

00:37:29,680 --> 00:37:33,839
of english

00:37:31,520 --> 00:37:35,520
token filters these are things that

00:37:33,839 --> 00:37:38,240
modify the word

00:37:35,520 --> 00:37:39,040
so they take the word cats and they

00:37:38,240 --> 00:37:42,400
strip off

00:37:39,040 --> 00:37:44,240
the s right um

00:37:42,400 --> 00:37:45,839
and search for that word so in

00:37:44,240 --> 00:37:48,079
particular we found the word for

00:37:45,839 --> 00:37:50,000
cats right or we found the phage for cat

00:37:48,079 --> 00:37:52,560
not cats it figured out

00:37:50,000 --> 00:37:54,720
that cat is is more important than what

00:37:52,560 --> 00:37:56,480
i for what i search for than that

00:37:54,720 --> 00:37:58,720
uh another thing that ends up happening

00:37:56,480 --> 00:38:02,160
is if you search for

00:37:58,720 --> 00:38:05,359
cat and dog right um

00:38:02,160 --> 00:38:08,320
so for cat let's search for cat dog

00:38:05,359 --> 00:38:11,760
right let's see what that manages

00:38:08,320 --> 00:38:11,760
not catholic church

00:38:12,720 --> 00:38:16,480
it actually founds finds a television

00:38:15,040 --> 00:38:18,720
show called cat dog

00:38:16,480 --> 00:38:19,839
which is pretty good um that's a pretty

00:38:18,720 --> 00:38:23,200
good match

00:38:19,839 --> 00:38:24,960
um but what what this thing does is

00:38:23,200 --> 00:38:27,119
it cuts this into two words right the

00:38:24,960 --> 00:38:30,320
word cat and then the word

00:38:27,119 --> 00:38:32,640
dog and

00:38:30,320 --> 00:38:33,520
then it does a search for for pages that

00:38:32,640 --> 00:38:35,440
contain the word cat

00:38:33,520 --> 00:38:37,200
and pages that contain the word dog and

00:38:35,440 --> 00:38:39,359
then pages that contain the words when

00:38:37,200 --> 00:38:41,440
they're near one another

00:38:39,359 --> 00:38:43,760
um hey nick just wanted to let you know

00:38:41,440 --> 00:38:47,040
we got five minutes left in

00:38:43,760 --> 00:38:49,440
this half oh that's perfect so

00:38:47,040 --> 00:38:50,800
okay we can spend the next half doing

00:38:49,440 --> 00:38:54,079
some hacking things

00:38:50,800 --> 00:38:57,280
and uh sort of talking about the way

00:38:54,079 --> 00:38:57,839
things fit together um but we can spend

00:38:57,280 --> 00:39:00,320
the next

00:38:57,839 --> 00:39:01,280
five minutes talking about search

00:39:00,320 --> 00:39:04,400
relevancy

00:39:01,280 --> 00:39:08,640
and how these things are useful um

00:39:04,400 --> 00:39:11,040
in a sort of more uh

00:39:08,640 --> 00:39:12,240
a more like a bigger example imagine the

00:39:11,040 --> 00:39:13,839
word like running

00:39:12,240 --> 00:39:15,839
right how should you know when you want

00:39:13,839 --> 00:39:19,119
to do a search for something like that

00:39:15,839 --> 00:39:19,440
you you end up wanting to to to remove

00:39:19,119 --> 00:39:22,720
the

00:39:19,440 --> 00:39:24,560
n and img part of it and cut it down so

00:39:22,720 --> 00:39:27,920
there's sort of a lot of

00:39:24,560 --> 00:39:29,680
things built in um to to elasticsearch

00:39:27,920 --> 00:39:30,560
to try to find the thing that you're

00:39:29,680 --> 00:39:32,079
looking for

00:39:30,560 --> 00:39:34,000
and this is actually a really kind of an

00:39:32,079 --> 00:39:37,040
interesting game uh

00:39:34,000 --> 00:39:39,520
because as you do

00:39:37,040 --> 00:39:40,400
more and more transformations you make

00:39:39,520 --> 00:39:42,079
the search find

00:39:40,400 --> 00:39:44,320
more and more and more results but you

00:39:42,079 --> 00:39:47,200
don't necessarily make the results

00:39:44,320 --> 00:39:48,079
better right if you search for the word

00:39:47,200 --> 00:39:50,240
running

00:39:48,079 --> 00:39:52,079
and and you want to find documents that

00:39:50,240 --> 00:39:53,839
literally contain the word running and

00:39:52,079 --> 00:39:57,599
not the word run

00:39:53,839 --> 00:39:59,920
then sometimes it's difficult to do that

00:39:57,599 --> 00:40:01,520
like this is why if you go to google and

00:39:59,920 --> 00:40:03,119
you search for running you get the right

00:40:01,520 --> 00:40:04,560
answer google's very good at this

00:40:03,119 --> 00:40:07,119
oh google you don't get to know my

00:40:04,560 --> 00:40:08,800
location um

00:40:07,119 --> 00:40:10,160
but like this is why google has this

00:40:08,800 --> 00:40:13,280
quote operator right

00:40:10,160 --> 00:40:17,839
and and you get to to get exact matches

00:40:13,280 --> 00:40:21,440
we have that too right um

00:40:17,839 --> 00:40:21,440
to be or not to be

00:40:23,520 --> 00:40:26,319
that's strange

00:40:30,240 --> 00:40:33,599
interesting i don't know why that didn't

00:40:31,680 --> 00:40:34,960
work but anyway uh

00:40:33,599 --> 00:40:36,960
when you search for lots of words we

00:40:34,960 --> 00:40:38,880
tend to try and do other tricks to make

00:40:36,960 --> 00:40:42,000
the thing work better

00:40:38,880 --> 00:40:43,760
these words to be or not to be are such

00:40:42,000 --> 00:40:45,839
common english words that if we didn't

00:40:43,760 --> 00:40:49,599
play tricks and try to do things like

00:40:45,839 --> 00:40:52,960
find phrases together uh you'd end up

00:40:49,599 --> 00:40:55,359
with uh well every

00:40:52,960 --> 00:40:58,000
every single english wikipedia page

00:40:55,359 --> 00:40:59,520
would come back

00:40:58,000 --> 00:41:01,760
all right i think that's our five

00:40:59,520 --> 00:41:03,119
minutes uh or at least pretty close to

00:41:01,760 --> 00:41:06,560
it

00:41:03,119 --> 00:41:10,640
pretty close let's do it this way

00:41:06,560 --> 00:41:11,520
um if you want to talk about hacking

00:41:10,640 --> 00:41:15,520
stick around

00:41:11,520 --> 00:41:15,520
if you are interested in

00:41:16,480 --> 00:41:22,640
other sort of topics that have to do

00:41:19,599 --> 00:41:24,240
with um why you would use elasticsearch

00:41:22,640 --> 00:41:27,200
or how how you would use it for certain

00:41:24,240 --> 00:41:30,560
things or how you want to relate it to

00:41:27,200 --> 00:41:31,680
um certain certain ways data is

00:41:30,560 --> 00:41:35,440
structured

00:41:31,680 --> 00:41:35,920
uh head to the elastic booth and talk to

00:41:35,440 --> 00:41:38,240
those

00:41:35,920 --> 00:41:40,079
lovely folks either tomorrow morning

00:41:38,240 --> 00:41:41,280
which will be me that is my official

00:41:40,079 --> 00:41:44,960
booth duty or

00:41:41,280 --> 00:41:47,760
right now uh and you will talk to

00:41:44,960 --> 00:41:48,400
uh some folks who honestly are probably

00:41:47,760 --> 00:41:51,200
going to know

00:41:48,400 --> 00:41:53,280
more about how you apply elasticsearch

00:41:51,200 --> 00:41:56,480
to different use cases

00:41:53,280 --> 00:41:58,640
than i do right i as i said i

00:41:56,480 --> 00:42:00,240
i for better or worse i built this page

00:41:58,640 --> 00:42:02,000
that you're looking at right

00:42:00,240 --> 00:42:03,839
and so i understand how you use

00:42:02,000 --> 00:42:05,440
elasticsearch for searching logs and i

00:42:03,839 --> 00:42:07,920
understand elasticsearch how you

00:42:05,440 --> 00:42:09,839
how you use alaska search for searching

00:42:07,920 --> 00:42:12,319
uh corpuses of texts that

00:42:09,839 --> 00:42:14,720
look like um encyclopedias or

00:42:12,319 --> 00:42:16,079
dictionaries or resumes or whatever so i

00:42:14,720 --> 00:42:19,200
understand those two use cases

00:42:16,079 --> 00:42:23,040
but once you start talking about uh how

00:42:19,200 --> 00:42:26,720
you use elasticsearch uh to handle

00:42:23,040 --> 00:42:28,319
uh security events and and and suss out

00:42:26,720 --> 00:42:28,640
intruders and stuff like that which are

00:42:28,319 --> 00:42:30,960
all

00:42:28,640 --> 00:42:32,240
products that are built on elastic

00:42:30,960 --> 00:42:35,440
elasticsearch

00:42:32,240 --> 00:42:36,960
by elastic company i i don't know

00:42:35,440 --> 00:42:38,480
frankly and i would go and ask the

00:42:36,960 --> 00:42:39,359
people at my booth for help if you ask

00:42:38,480 --> 00:42:42,480
me anyway

00:42:39,359 --> 00:42:44,000
so um if that's

00:42:42,480 --> 00:42:46,079
what the kind of thing you're interested

00:42:44,000 --> 00:42:47,119
in go and ask the booth either today

00:42:46,079 --> 00:42:48,160
tomorrow

00:42:47,119 --> 00:42:50,880
and if you want to learn more about

00:42:48,160 --> 00:42:54,160
hacking come back in

00:42:50,880 --> 00:42:57,280
what is it 15 15 whole minutes

00:42:54,160 --> 00:42:58,480
15 whole all right so let's let's get to

00:42:57,280 --> 00:43:01,200
this

00:42:58,480 --> 00:43:03,359
uh so i presume everyone that is left is

00:43:01,200 --> 00:43:05,520
interested in hacking elasticsearch

00:43:03,359 --> 00:43:07,280
or um if you are not interested you're

00:43:05,520 --> 00:43:09,599
interested in watching me flail around

00:43:07,280 --> 00:43:13,040
trying to explain it to people that are

00:43:09,599 --> 00:43:17,440
which sounds like fun to me frankly

00:43:13,040 --> 00:43:19,839
so i hope you enjoy it so um

00:43:17,440 --> 00:43:21,760
if you have finished cloning

00:43:19,839 --> 00:43:25,200
elasticsearch you can

00:43:21,760 --> 00:43:28,400
you should end up somewhere like this

00:43:25,200 --> 00:43:28,800
um you should end up with a directory

00:43:28,400 --> 00:43:30,800
called

00:43:28,800 --> 00:43:33,359
elasticsearch and you probably will end

00:43:30,800 --> 00:43:35,440
up with your jdk that you downloaded

00:43:33,359 --> 00:43:37,280
and if you did what i did you will have

00:43:35,440 --> 00:43:41,119
git bash or

00:43:37,280 --> 00:43:44,000
um probably real bash sitting around

00:43:41,119 --> 00:43:45,520
if you don't use bash you know better

00:43:44,000 --> 00:43:47,680
than i do what to do

00:43:45,520 --> 00:43:48,640
so uh head into the elasticsearch

00:43:47,680 --> 00:43:50,560
directory

00:43:48,640 --> 00:43:52,880
uh there's a zillion zillion files in

00:43:50,560 --> 00:43:55,040
here uh i suggest

00:43:52,880 --> 00:43:57,119
opening them in a regular old text

00:43:55,040 --> 00:43:58,720
editor first and then going to an ide

00:43:57,119 --> 00:44:01,520
later

00:43:58,720 --> 00:44:04,240
the highlights are contributing.mb at

00:44:01,520 --> 00:44:06,960
testing.ascii doc

00:44:04,240 --> 00:44:07,359
these show two very interesting things

00:44:06,960 --> 00:44:09,680
one

00:44:07,359 --> 00:44:12,000
that we care very much about people

00:44:09,680 --> 00:44:14,400
wanting to

00:44:12,000 --> 00:44:16,240
to contribute code and two that we

00:44:14,400 --> 00:44:18,079
cannot decide on a text

00:44:16,240 --> 00:44:20,839
like on a documentation file format

00:44:18,079 --> 00:44:25,359
we've got notice.txt

00:44:20,839 --> 00:44:28,880
readme.ascii. and everything in between

00:44:25,359 --> 00:44:31,920
so um elasticsearch is built with gradle

00:44:28,880 --> 00:44:35,119
the the thing that i suggest that you do

00:44:31,920 --> 00:44:36,160
is run it first uh before trying to

00:44:35,119 --> 00:44:38,720
import it into

00:44:36,160 --> 00:44:40,240
into your favorite ide the way that you

00:44:38,720 --> 00:44:42,880
run it is by running

00:44:40,240 --> 00:44:44,240
uh the gradle w executable if you are on

00:44:42,880 --> 00:44:46,000
windows and do not

00:44:44,240 --> 00:44:47,440
have git bash then you will want the

00:44:46,000 --> 00:44:50,720
gradle w bat

00:44:47,440 --> 00:44:52,160
executable and so help you god for being

00:44:50,720 --> 00:44:55,359
on windows without

00:44:52,160 --> 00:44:57,200
dash uh good luck um so you'll want to

00:44:55,359 --> 00:45:00,400
run gradle level you run

00:44:57,200 --> 00:45:01,040
and hit enter and then oh there's one of

00:45:00,400 --> 00:45:04,720
my children

00:45:01,040 --> 00:45:05,119
she avoided me maybe somebody has warned

00:45:04,720 --> 00:45:07,599
her

00:45:05,119 --> 00:45:09,040
anyway we'll run gradle of you run um

00:45:07,599 --> 00:45:12,000
and then

00:45:09,040 --> 00:45:13,200
let gradle do its thing gradle in the

00:45:12,000 --> 00:45:16,240
grand tradition of every

00:45:13,200 --> 00:45:18,480
java build toolkit yes please do you

00:45:16,240 --> 00:45:20,800
have permission to talk please jump in

00:45:18,480 --> 00:45:22,079
uh gradle in the grand tradition of any

00:45:20,800 --> 00:45:25,200
java build tool

00:45:22,079 --> 00:45:28,079
downloads 500 megabytes of

00:45:25,200 --> 00:45:30,640
stuff uh compiles stuff then downloads

00:45:28,079 --> 00:45:34,720
another 500 megabytes of stuff

00:45:30,640 --> 00:45:37,440
and then compiles your code and then

00:45:34,720 --> 00:45:38,880
runs it uh if you're curious about why

00:45:37,440 --> 00:45:41,599
we use gradle instead of the

00:45:38,880 --> 00:45:43,119
the massive zoo of build tools i'd be

00:45:41,599 --> 00:45:44,880
happy to talk about it i was involved in

00:45:43,119 --> 00:45:49,119
that process but

00:45:44,880 --> 00:45:51,359
um you should after something like

00:45:49,119 --> 00:45:52,640
two or three minutes or more depending

00:45:51,359 --> 00:45:55,920
on your cpu

00:45:52,640 --> 00:45:58,240
and disk speed i get something that

00:45:55,920 --> 00:46:00,720
looks very like this

00:45:58,240 --> 00:46:02,560
you will see that way way above there's

00:46:00,720 --> 00:46:05,359
a line that says starting and

00:46:02,560 --> 00:46:06,800
you will see an amazing number of extra

00:46:05,359 --> 00:46:10,160
stuff

00:46:06,800 --> 00:46:13,280
um when it gets quiet it's ready uh

00:46:10,160 --> 00:46:15,440
this it

00:46:13,280 --> 00:46:16,720
used to be our startup used to be

00:46:15,440 --> 00:46:19,040
cleaner but now it's

00:46:16,720 --> 00:46:21,119
it's it's gotten loud again and

00:46:19,040 --> 00:46:23,760
someone's got to go and

00:46:21,119 --> 00:46:25,440
and and make this word the actual signal

00:46:23,760 --> 00:46:28,720
that we're ready but

00:46:25,440 --> 00:46:29,839
for for uh for now um when it gets quiet

00:46:28,720 --> 00:46:32,880
it's ready

00:46:29,839 --> 00:46:37,520
and elasticsearch will be available

00:46:32,880 --> 00:46:39,760
at port 8080 uh with the password

00:46:37,520 --> 00:46:41,200
with the user elastic the password

00:46:39,760 --> 00:46:44,000
password

00:46:41,200 --> 00:46:45,119
um or sorry it'll be available at port

00:46:44,000 --> 00:46:48,480
9200.

00:46:45,119 --> 00:46:49,920
um that default username and password is

00:46:48,480 --> 00:46:51,599
a default for development only

00:46:49,920 --> 00:46:53,119
if it's when you actually download it

00:46:51,599 --> 00:46:54,560
and run it it'll scramble something up

00:46:53,119 --> 00:46:56,079
for you and you'll have to deal with it

00:46:54,560 --> 00:46:58,560
there

00:46:56,079 --> 00:47:00,079
it's been so many years since i did that

00:46:58,560 --> 00:47:02,960
i actually couldn't tell you

00:47:00,079 --> 00:47:04,000
uh how to do it follow the docs i hope

00:47:02,960 --> 00:47:07,839
they're good now

00:47:04,000 --> 00:47:10,960
um that they were good before anyway um

00:47:07,839 --> 00:47:13,440
for development you run um gradle

00:47:10,960 --> 00:47:14,480
or you run a run like i said and then

00:47:13,440 --> 00:47:18,880
you

00:47:14,480 --> 00:47:22,000
um can curl on

00:47:18,880 --> 00:47:23,200
port 9200 with the username elastic and

00:47:22,000 --> 00:47:26,559
the password

00:47:23,200 --> 00:47:31,040
password okay so

00:47:26,559 --> 00:47:32,800
folks uh where to go from here

00:47:31,040 --> 00:47:34,880
some folks said that they were

00:47:32,800 --> 00:47:36,319
interested in running tests

00:47:34,880 --> 00:47:38,000
some folks said that they were

00:47:36,319 --> 00:47:41,200
interested in hacking and seeing

00:47:38,000 --> 00:47:42,640
things and some folks

00:47:41,200 --> 00:47:44,960
were interested in other things and i

00:47:42,640 --> 00:47:49,920
sent them to the booth

00:47:44,960 --> 00:47:52,960
so for running particular tests

00:47:49,920 --> 00:47:55,599
actually let's start with an ide

00:47:52,960 --> 00:47:56,720
first get it open on an ide then go to

00:47:55,599 --> 00:47:58,559
tests

00:47:56,720 --> 00:48:01,280
while the ide is opening it and then

00:47:58,559 --> 00:48:04,319
come back to the ide

00:48:01,280 --> 00:48:07,839
is that okay with everyone

00:48:04,319 --> 00:48:07,839
if not come off mute and tell me

00:48:08,880 --> 00:48:12,480
and if you don't have permission to come

00:48:10,319 --> 00:48:14,480
off mute i'm very sorry

00:48:12,480 --> 00:48:15,839
there's only one person and it's because

00:48:14,480 --> 00:48:19,359
he's running an old

00:48:15,839 --> 00:48:22,880
version so matt sorry about that

00:48:19,359 --> 00:48:25,599
sorry but silence sounds like

00:48:22,880 --> 00:48:26,160
like a scent but yes everyone i have

00:48:25,599 --> 00:48:29,440
taken

00:48:26,160 --> 00:48:31,760
you do not have to raise your hand so

00:48:29,440 --> 00:48:32,960
i can dress we can all be grown-ups in a

00:48:31,760 --> 00:48:36,160
small group of ten

00:48:32,960 --> 00:48:39,200
if you have comments just have

00:48:36,160 --> 00:48:41,440
at it so let's make this a nice

00:48:39,200 --> 00:48:42,319
nice interactive thing at the end of the

00:48:41,440 --> 00:48:46,160
day

00:48:42,319 --> 00:48:47,920
all right so um you

00:48:46,160 --> 00:48:49,599
have two choices if you want to open

00:48:47,920 --> 00:48:51,760
elasticsearch up in an ide

00:48:49,599 --> 00:48:53,599
and and realistically you have one

00:48:51,760 --> 00:48:57,920
choice

00:48:53,599 --> 00:49:02,079
if you are not in love with eclipse

00:48:57,920 --> 00:49:05,599
you should use intellij

00:49:02,079 --> 00:49:07,280
so i will say this again if you are not

00:49:05,599 --> 00:49:10,640
in love with eclipse

00:49:07,280 --> 00:49:13,280
go get intellij download it install it

00:49:10,640 --> 00:49:13,280
and start it

00:49:13,839 --> 00:49:18,559
i am in love with eclipse and have used

00:49:16,640 --> 00:49:21,839
it for so long and am used to its

00:49:18,559 --> 00:49:25,599
terrible terrible terrible quirks

00:49:21,839 --> 00:49:27,119
so that's all i can show you

00:49:25,599 --> 00:49:29,040
and here it is having imported

00:49:27,119 --> 00:49:31,920
elasticsearch

00:49:29,040 --> 00:49:33,839
apparently there are many oh yes i can

00:49:31,920 --> 00:49:37,440
go through these to fix these

00:49:33,839 --> 00:49:38,319
okay so when you start at least in

00:49:37,440 --> 00:49:41,119
eclipse

00:49:38,319 --> 00:49:43,680
you go import gradle project and then

00:49:41,119 --> 00:49:47,119
point it at the root of elasticsearch

00:49:43,680 --> 00:49:48,240
and then wait five minutes for to do its

00:49:47,119 --> 00:49:53,040
importing

00:49:48,240 --> 00:49:56,160
i suspect intellij is is quite similar

00:49:53,040 --> 00:50:01,599
the instructions for intellij

00:49:56,160 --> 00:50:01,599
are available in contributing.md

00:50:03,920 --> 00:50:07,359
so we give a specific version that you

00:50:05,760 --> 00:50:09,359
need to get and

00:50:07,359 --> 00:50:12,640
a way to get it apparently and how to

00:50:09,359 --> 00:50:15,760
get it all open

00:50:12,640 --> 00:50:18,880
got it once

00:50:15,760 --> 00:50:21,359
you have it open um

00:50:18,880 --> 00:50:22,880
eclipse has a few a few extra rules that

00:50:21,359 --> 00:50:27,680
you have to do but you can

00:50:22,880 --> 00:50:30,319
you can see me do them here um

00:50:27,680 --> 00:50:31,839
i will just do them while we're here so

00:50:30,319 --> 00:50:34,000
you can see them

00:50:31,839 --> 00:50:34,960
um you have to fix the import order

00:50:34,000 --> 00:50:38,319
because

00:50:34,960 --> 00:50:42,160
eclipse because of java basically

00:50:38,319 --> 00:50:44,400
don't down the way java is

00:50:42,160 --> 00:50:45,680
uh you import a million things so you

00:50:44,400 --> 00:50:47,599
want to import

00:50:45,680 --> 00:50:49,839
you want to import our standard import

00:50:47,599 --> 00:50:49,839
order

00:50:51,040 --> 00:50:58,319
change these to

00:50:55,599 --> 00:50:59,520
a very big number apparently not that

00:50:58,319 --> 00:51:04,240
big

00:50:59,520 --> 00:51:04,240
because we never use those um

00:51:04,480 --> 00:51:08,800
and it looks like we have a question

00:51:05,839 --> 00:51:10,240
from ed in chat is it reasonable to do

00:51:08,800 --> 00:51:11,839
everything in vs code you find yourself

00:51:10,240 --> 00:51:12,640
wanting that intelligent eclipse real

00:51:11,839 --> 00:51:16,240
fast

00:51:12,640 --> 00:51:19,359
um i have never got vs code useful

00:51:16,240 --> 00:51:19,920
for debugging um i have gotten it

00:51:19,359 --> 00:51:23,760
working

00:51:19,920 --> 00:51:24,800
fairly well with the the intelligent or

00:51:23,760 --> 00:51:29,280
sorry the

00:51:24,800 --> 00:51:30,960
the compiler server for java so the vs

00:51:29,280 --> 00:51:32,319
code java plug-in i have gotten that

00:51:30,960 --> 00:51:36,079
working fairly well

00:51:32,319 --> 00:51:38,559
it does a pretty reasonable job um

00:51:36,079 --> 00:51:40,319
officially we support eclipse and

00:51:38,559 --> 00:51:43,680
intellij

00:51:40,319 --> 00:51:46,400
and running it on the command line

00:51:43,680 --> 00:51:46,960
uh and and the command line is obviously

00:51:46,400 --> 00:51:50,240
the

00:51:46,960 --> 00:51:52,640
the real um real version

00:51:50,240 --> 00:51:54,160
um like that's what that's what uh

00:51:52,640 --> 00:51:56,079
jenkins does and that's what builds the

00:51:54,160 --> 00:51:59,200
packages and everything

00:51:56,079 --> 00:51:59,920
but um if you need help we actually will

00:51:59,200 --> 00:52:03,359
support

00:51:59,920 --> 00:52:05,599
uh eclipse and the um

00:52:03,359 --> 00:52:06,800
command line if you like emacs quite a

00:52:05,599 --> 00:52:09,599
lot

00:52:06,800 --> 00:52:11,680
uh there are a couple of folks who use

00:52:09,599 --> 00:52:13,200
emacs for hacking elasticsearch

00:52:11,680 --> 00:52:15,599
i don't know how they do it or what they

00:52:13,200 --> 00:52:18,400
do but if you search

00:52:15,599 --> 00:52:19,680
for a hacking elasticsearch with emacs

00:52:18,400 --> 00:52:21,599
you will probably find

00:52:19,680 --> 00:52:22,880
blobs of players where they talk about

00:52:21,599 --> 00:52:26,880
how to do it

00:52:22,880 --> 00:52:29,680
um if you see there's a dear locals.uh

00:52:26,880 --> 00:52:30,079
el file that's that's for emacs lisp

00:52:29,680 --> 00:52:33,680
that

00:52:30,079 --> 00:52:34,880
this all this stuff is the configuration

00:52:33,680 --> 00:52:37,280
for the people that like to hack

00:52:34,880 --> 00:52:40,160
elasticsearch and emacs

00:52:37,280 --> 00:52:41,200
uh so yeah if if that's your if that's

00:52:40,160 --> 00:52:44,000
your editor of choice

00:52:41,200 --> 00:52:46,640
um i use both intellij and or sorry i

00:52:44,000 --> 00:52:50,400
use both vs code and eclipse

00:52:46,640 --> 00:52:53,680
i use vs code for opening um

00:52:50,400 --> 00:52:53,680
yaml files like

00:52:58,000 --> 00:53:02,160
for instance oh that's lovely

00:53:12,400 --> 00:53:16,079
whatever so like these ammo files are

00:53:14,559 --> 00:53:16,720
some of our some of our integration

00:53:16,079 --> 00:53:19,119
tests

00:53:16,720 --> 00:53:21,440
so i use this for our tests because i

00:53:19,119 --> 00:53:25,920
find it to be easier to use

00:53:21,440 --> 00:53:28,960
than eclipse but for um

00:53:25,920 --> 00:53:32,079
these for for actually running the tests

00:53:28,960 --> 00:53:33,280
inside of it um i'll use eclipse

00:53:32,079 --> 00:53:36,720
so the other thing you have to do to

00:53:33,280 --> 00:53:36,720
make eclipse happy is

00:53:38,000 --> 00:53:43,839
documented in contributing

00:53:50,160 --> 00:53:54,720
there's something about cyclical

00:53:51,680 --> 00:53:56,559
dependencies you have to turn off

00:53:54,720 --> 00:53:59,200
oh and the file and there's a

00:53:56,559 --> 00:54:03,200
instructions for importing the editor

00:53:59,200 --> 00:54:03,200
but uh we can ignore that let's just

00:54:04,079 --> 00:54:11,839
it's in here somewhere java compiler

00:54:07,599 --> 00:54:11,839
errors warning

00:54:18,800 --> 00:54:23,200
oh well we'll ignore it for now because

00:54:21,359 --> 00:54:26,800
that's how we do presentations

00:54:23,200 --> 00:54:26,800
we do them with a million errors

00:54:31,440 --> 00:54:37,359
so um elasticsearch

00:54:35,040 --> 00:54:39,200
has is broken up into like a million

00:54:37,359 --> 00:54:42,960
billion modules

00:54:39,200 --> 00:54:44,720
uh you'll see that we have build tools

00:54:42,960 --> 00:54:47,760
which is how you that's the actual

00:54:44,720 --> 00:54:50,160
gradle project that builds elasticsearch

00:54:47,760 --> 00:54:51,280
in and of itself that gradle project is

00:54:50,160 --> 00:54:53,920
a

00:54:51,280 --> 00:54:54,799
many many thousands of lines piece of

00:54:53,920 --> 00:54:58,480
code

00:54:54,799 --> 00:55:00,880
so it's fairly complex um

00:54:58,480 --> 00:55:02,720
the client is a high level and a low

00:55:00,880 --> 00:55:05,040
level rest client

00:55:02,720 --> 00:55:06,079
to talk to elasticsearch all of this

00:55:05,040 --> 00:55:09,520
stuff is involved

00:55:06,079 --> 00:55:11,680
in in building elasticsearch uh

00:55:09,520 --> 00:55:13,119
distributions actually it goes all the

00:55:11,680 --> 00:55:15,280
way down to here

00:55:13,119 --> 00:55:16,240
uh some of these these these tools are

00:55:15,280 --> 00:55:18,720
things that are shipped to the

00:55:16,240 --> 00:55:21,119
elasticsearch distribution

00:55:18,720 --> 00:55:22,079
but are not run uh inside of the server

00:55:21,119 --> 00:55:24,880
of elasticsearch

00:55:22,079 --> 00:55:26,319
others of these are like uh these these

00:55:24,880 --> 00:55:30,799
packages are for like

00:55:26,319 --> 00:55:32,799
rpm and deb um

00:55:30,799 --> 00:55:34,960
docker is for our docker container we

00:55:32,799 --> 00:55:36,079
make a million billion archives and

00:55:34,960 --> 00:55:39,599
these are for building

00:55:36,079 --> 00:55:39,599
backwards compatibility tests

00:55:41,839 --> 00:55:46,319
the actual core of elasticsearch that

00:55:44,960 --> 00:55:49,920
you end up playing with

00:55:46,319 --> 00:55:53,599
is in the server

00:55:49,920 --> 00:55:57,040
which if i can find the letter s

00:55:53,599 --> 00:56:00,720
if you have imported uh this in

00:55:57,040 --> 00:56:02,480
linux or osx you will

00:56:00,720 --> 00:56:04,720
not see all these underscores you'll see

00:56:02,480 --> 00:56:05,839
colons because that's the standard way

00:56:04,720 --> 00:56:08,400
that gradle

00:56:05,839 --> 00:56:09,440
greatly writes its files um or gradle

00:56:08,400 --> 00:56:12,640
gradle separates

00:56:09,440 --> 00:56:15,839
its projects uh windows does not allow

00:56:12,640 --> 00:56:18,640
colons in project names because

00:56:15,839 --> 00:56:22,160
reasons and so we just replace them with

00:56:18,640 --> 00:56:22,160
underscores because underscores are this

00:56:22,400 --> 00:56:26,799
it allows them so yeah this is this is

00:56:25,680 --> 00:56:28,839
all the elastic search

00:56:26,799 --> 00:56:30,240
this is the code for the core of

00:56:28,839 --> 00:56:32,799
elasticsearch uh

00:56:30,240 --> 00:56:34,720
sort of two interesting things about

00:56:32,799 --> 00:56:38,160
this repository

00:56:34,720 --> 00:56:38,799
as we talk about it uh crack it open in

00:56:38,160 --> 00:56:42,000
the

00:56:38,799 --> 00:56:44,000
editor uh this repository contains

00:56:42,000 --> 00:56:45,119
uh files licensed under two different

00:56:44,000 --> 00:56:47,680
licenses and

00:56:45,119 --> 00:56:49,040
you can generally look at the top of

00:56:47,680 --> 00:56:51,920
every file to

00:56:49,040 --> 00:56:53,359
see the license uh these are uh under

00:56:51,920 --> 00:56:55,680
the apache two license

00:56:53,359 --> 00:56:57,200
so everything uh basically everything

00:56:55,680 --> 00:56:59,040
outside of the

00:56:57,200 --> 00:57:00,880
expat directory is licensed under the

00:56:59,040 --> 00:57:05,440
apache 2 license and then everything

00:57:00,880 --> 00:57:06,799
in the expat directory is licensed

00:57:05,440 --> 00:57:10,480
under this thing called the elastic

00:57:06,799 --> 00:57:14,319
license the elastic license is a

00:57:10,480 --> 00:57:17,119
um license that lets folks read

00:57:14,319 --> 00:57:18,240
uh and write and contribute software and

00:57:17,119 --> 00:57:21,359
run it in

00:57:18,240 --> 00:57:24,400
for tests and things like that um

00:57:21,359 --> 00:57:27,599
but then has to get a

00:57:24,400 --> 00:57:28,799
has to get a um a license for using the

00:57:27,599 --> 00:57:33,040
software

00:57:28,799 --> 00:57:36,480
uh from elastic so essentially uh

00:57:33,040 --> 00:57:38,720
elasticsearch is a big open source

00:57:36,480 --> 00:57:41,599
project with many many plugins

00:57:38,720 --> 00:57:42,400
some of which are uh also apache

00:57:41,599 --> 00:57:44,720
licensed

00:57:42,400 --> 00:57:46,559
others are licensed with this fairly

00:57:44,720 --> 00:57:49,280
open elastic license

00:57:46,559 --> 00:57:50,319
that lets folks read and write and file

00:57:49,280 --> 00:57:54,240
bugs

00:57:50,319 --> 00:57:57,520
in github and that sort of thing um but

00:57:54,240 --> 00:57:57,520
not all of the

00:57:59,680 --> 00:58:02,559
you do not have permission to do

00:58:01,359 --> 00:58:03,440
everything that you would do with the

00:58:02,559 --> 00:58:05,920
apache

00:58:03,440 --> 00:58:07,040
license stuff the apache license lets

00:58:05,920 --> 00:58:08,480
you do whatever you want with the

00:58:07,040 --> 00:58:12,079
software right

00:58:08,480 --> 00:58:14,240
um some of the things that are in the

00:58:12,079 --> 00:58:17,920
expat directory are also free

00:58:14,240 --> 00:58:19,359
right uh but they are they are free but

00:58:17,920 --> 00:58:21,200
licensed they're like free as in b are

00:58:19,359 --> 00:58:24,319
not freezing speech

00:58:21,200 --> 00:58:27,119
anyway um if you don't know that

00:58:24,319 --> 00:58:28,480
that is a very old open source

00:58:27,119 --> 00:58:33,040
expression i guess

00:58:28,480 --> 00:58:36,540
anyway um let's talk about running tests

00:58:33,040 --> 00:58:38,640
for uh a minute before we dive too deep

00:58:36,540 --> 00:58:40,720
[Music]

00:58:38,640 --> 00:58:42,079
let's open up let's open up some actions

00:58:40,720 --> 00:58:45,200
all right

00:58:42,079 --> 00:58:46,799
and then we'll get to tests so do any

00:58:45,200 --> 00:58:49,440
y'all remember

00:58:46,799 --> 00:58:50,000
how i performed this bulk action over

00:58:49,440 --> 00:58:53,280
here

00:58:50,000 --> 00:58:56,000
this action looks like this under

00:58:53,280 --> 00:58:58,160
test underscore bulk and then has this

00:58:56,000 --> 00:59:01,520
refresh and pretty

00:58:58,160 --> 00:59:05,359
opera uh refreshing pretty url parameter

00:59:01,520 --> 00:59:09,280
so that is defined by the

00:59:05,359 --> 00:59:12,400
rest bulk action um

00:59:09,280 --> 00:59:12,799
you see here that i use open type i have

00:59:12,400 --> 00:59:15,920
no

00:59:12,799 --> 00:59:17,040
idea what what directory this is in i

00:59:15,920 --> 00:59:19,680
know that it's in this

00:59:17,040 --> 00:59:21,280
the uh the server so if i click this i

00:59:19,680 --> 00:59:23,040
know that this is under the

00:59:21,280 --> 00:59:24,799
the server so this is sort of shipped

00:59:23,040 --> 00:59:25,599
with the core of elasticsearch it's not

00:59:24,799 --> 00:59:27,520
in a

00:59:25,599 --> 00:59:28,720
not in a plug-in it's not in a module

00:59:27,520 --> 00:59:32,000
which are plug-ins

00:59:28,720 --> 00:59:34,000
in the core but um

00:59:32,000 --> 00:59:35,920
don't actually know what package this is

00:59:34,000 --> 00:59:36,799
in that's pretty standard for folks that

00:59:35,920 --> 00:59:39,040
hack java

00:59:36,799 --> 00:59:40,480
um these packages you end up with

00:59:39,040 --> 00:59:41,920
millions and billions of

00:59:40,480 --> 00:59:44,240
different packages directories

00:59:41,920 --> 00:59:47,440
containing the software and

00:59:44,240 --> 00:59:48,079
then you never know um so this rest bulk

00:59:47,440 --> 00:59:50,559
action

00:59:48,079 --> 00:59:51,760
uh defines where the thing is and you

00:59:50,559 --> 00:59:54,559
see here that it's got

00:59:51,760 --> 00:59:55,359
four different patterns uh you can put

00:59:54,559 --> 00:59:57,680
or post

00:59:55,359 --> 01:00:00,240
this action and you can specify the

00:59:57,680 --> 01:00:03,200
index or not

01:00:00,240 --> 01:00:04,000
uh and you see here that uh that

01:00:03,200 --> 01:00:07,680
parameter

01:00:04,000 --> 01:00:10,559
refresh that i used is is here right

01:00:07,680 --> 01:00:11,119
uh so i use this refresh parameter just

01:00:10,559 --> 01:00:13,040
without

01:00:11,119 --> 01:00:14,559
without setting it to a value so you

01:00:13,040 --> 01:00:17,160
could actually jump back

01:00:14,559 --> 01:00:18,640
and see how this parsing works this

01:00:17,160 --> 01:00:22,960
request.params

01:00:18,640 --> 01:00:22,960
will get you a string um

01:00:23,280 --> 01:00:29,359
i believe it gets it gets some special

01:00:26,799 --> 01:00:30,240
well let's check i believe it gets the

01:00:29,359 --> 01:00:33,200
empty string

01:00:30,240 --> 01:00:35,359
if you define it but don't set a value

01:00:33,200 --> 01:00:36,640
so you see we have some special code to

01:00:35,359 --> 01:00:40,480
parse the

01:00:36,640 --> 01:00:42,880
pars the these refresh parameters

01:00:40,480 --> 01:00:44,079
here indeed the empty string which is

01:00:42,880 --> 01:00:48,319
what i passed in

01:00:44,079 --> 01:00:51,040
uh for refresh um it gets immediate

01:00:48,319 --> 01:00:51,359
refresh but you also have the choice of

01:00:51,040 --> 01:00:54,720
uh

01:00:51,359 --> 01:00:58,079
no refresh or uh wait for refresh

01:00:54,720 --> 01:01:00,240
so many many years ago you you this used

01:00:58,079 --> 01:01:00,960
to be a boolean as as you can probably

01:01:00,240 --> 01:01:04,480
tell

01:01:00,960 --> 01:01:06,720
so when you uh did a bulk operation

01:01:04,480 --> 01:01:08,000
um let's crack that open in ps code to

01:01:06,720 --> 01:01:10,319
play with it when you did a bulk

01:01:08,000 --> 01:01:11,839
operation you used to be able to do

01:01:10,319 --> 01:01:13,920
refresh without anything and that would

01:01:11,839 --> 01:01:14,960
force a force or refresh to make your

01:01:13,920 --> 01:01:16,400
documents visible

01:01:14,960 --> 01:01:18,960
um you used to be able to do refresh

01:01:16,400 --> 01:01:20,960
true to do the same thing or refresh

01:01:18,960 --> 01:01:23,359
false which was the default so you could

01:01:20,960 --> 01:01:26,960
leave it off and that would not

01:01:23,359 --> 01:01:29,440
perform the elasticsearch refresh

01:01:26,960 --> 01:01:31,040
so uh that's sort of the basics of a

01:01:29,440 --> 01:01:33,520
little bit of basics of like how

01:01:31,040 --> 01:01:34,960
parsing how request parsing goes uh

01:01:33,520 --> 01:01:38,160
let's look at how their

01:01:34,960 --> 01:01:40,720
requests are actually executed so uh

01:01:38,160 --> 01:01:41,440
this thing builds this bulk request

01:01:40,720 --> 01:01:45,680
object

01:01:41,440 --> 01:01:48,240
right so this is a

01:01:45,680 --> 01:01:52,720
request to further down in the system

01:01:48,240 --> 01:01:54,960
elasticsearch sort of respects the

01:01:52,720 --> 01:01:56,960
back in the day people talked about java

01:01:54,960 --> 01:01:57,839
applications and layers right how there

01:01:56,960 --> 01:02:00,960
was like a rest

01:01:57,839 --> 01:02:08,319
layer and uh application

01:02:00,960 --> 01:02:11,119
layer and a storage layer or something

01:02:08,319 --> 01:02:13,039
elastic search doesn't i don't think any

01:02:11,119 --> 01:02:16,160
application ever really did that

01:02:13,039 --> 01:02:17,760
elasticsearch has a rest layer and then

01:02:16,160 --> 01:02:20,079
it's got everything else

01:02:17,760 --> 01:02:21,359
uh i think that's actually pretty normal

01:02:20,079 --> 01:02:23,359
for most

01:02:21,359 --> 01:02:26,000
people that said they did these layers

01:02:23,359 --> 01:02:28,079
anyway this bulk request is

01:02:26,000 --> 01:02:29,760
the way that you transport things

01:02:28,079 --> 01:02:32,480
between the the

01:02:29,760 --> 01:02:33,280
rest layer this rest bulk action and the

01:02:32,480 --> 01:02:35,839
next layer

01:02:33,280 --> 01:02:37,520
so the bulk request can contain sort of

01:02:35,839 --> 01:02:40,000
a bazillion different things

01:02:37,520 --> 01:02:41,599
um it also has this fairly esoteric

01:02:40,000 --> 01:02:44,240
looking method here

01:02:41,599 --> 01:02:46,480
that uh any guesses what this actually

01:02:44,240 --> 01:02:46,480
does

01:02:46,559 --> 01:02:50,559
i'll give you a few seconds in the chat

01:02:48,400 --> 01:02:50,559
to

01:02:50,640 --> 01:03:03,839
to guess it's kind of fun

01:03:05,039 --> 01:03:09,680
so this allows elasticsearch to throw

01:03:07,359 --> 01:03:12,880
the request over the wire

01:03:09,680 --> 01:03:15,920
this stream

01:03:12,880 --> 01:03:16,880
input is is the name of the thing that

01:03:15,920 --> 01:03:20,160
we use

01:03:16,880 --> 01:03:21,839
uh to read off the wire and stream

01:03:20,160 --> 01:03:23,599
output is the name that we used to write

01:03:21,839 --> 01:03:26,720
the thing to the wire

01:03:23,599 --> 01:03:29,119
so somewhere else in this

01:03:26,720 --> 01:03:30,880
object there is a there's a write to

01:03:29,119 --> 01:03:32,480
method that takes a stream output that

01:03:30,880 --> 01:03:34,880
is the mirror of this

01:03:32,480 --> 01:03:35,680
so you can put these things over the

01:03:34,880 --> 01:03:39,119
wire

01:03:35,680 --> 01:03:43,440
otherwise um it's just this

01:03:39,119 --> 01:03:43,440
holder for the stock write requests

01:03:45,440 --> 01:03:50,160
uh it's actually executed by a thing

01:03:47,680 --> 01:03:53,039
called transport bulk action

01:03:50,160 --> 01:03:54,720
transport bulk action the the name

01:03:53,039 --> 01:03:56,799
transport i'll get to

01:03:54,720 --> 01:03:58,000
but for now you can understand

01:03:56,799 --> 01:03:59,680
everything with the name

01:03:58,000 --> 01:04:02,000
transport in front of it with the word

01:03:59,680 --> 01:04:06,319
transport in front of it is

01:04:02,000 --> 01:04:08,720
the actual implementation of a method

01:04:06,319 --> 01:04:11,200
the implementation of some some bulk or

01:04:08,720 --> 01:04:14,400
some request

01:04:11,200 --> 01:04:16,400
uh and if we

01:04:14,400 --> 01:04:18,799
scroll down it has a method called do

01:04:16,400 --> 01:04:21,359
execute and in grand java tradition

01:04:18,799 --> 01:04:22,240
there was a method called execute that

01:04:21,359 --> 01:04:26,079
we had to

01:04:22,240 --> 01:04:27,760
uh has to have shared code and now the

01:04:26,079 --> 01:04:29,359
method that everyone implements is

01:04:27,760 --> 01:04:32,319
called do execute and this

01:04:29,359 --> 01:04:32,880
method um applies a couple of funny

01:04:32,319 --> 01:04:35,039
things

01:04:32,880 --> 01:04:36,720
but for the most part what it what its

01:04:35,039 --> 01:04:39,359
job is to do

01:04:36,720 --> 01:04:40,000
what its job is is to group all of the

01:04:39,359 --> 01:04:42,160
all of the

01:04:40,000 --> 01:04:44,000
lines of the bulk request to group this

01:04:42,160 --> 01:04:45,119
line and this line and this line and

01:04:44,000 --> 01:04:49,520
this line

01:04:45,119 --> 01:04:52,799
into uh a shard bulk request

01:04:49,520 --> 01:04:54,880
so elasticsearch is

01:04:52,799 --> 01:04:57,440
like it it's it's claim to shame it's

01:04:54,880 --> 01:04:59,359
it's it's nice thing is that you can run

01:04:57,440 --> 01:05:01,200
this on more than one node

01:04:59,359 --> 01:05:02,960
and a former cluster and be able to talk

01:05:01,200 --> 01:05:05,760
to each other and

01:05:02,960 --> 01:05:08,240
it all works fairly simply uh the way

01:05:05,760 --> 01:05:11,119
that it all works fairly simply is that

01:05:08,240 --> 01:05:12,960
indices can be divided into shards and

01:05:11,119 --> 01:05:16,000
when you write a document

01:05:12,960 --> 01:05:18,880
we take the id and we hash the id

01:05:16,000 --> 01:05:20,799
and we drop it we just determine which

01:05:18,880 --> 01:05:22,640
chart should hold the document based on

01:05:20,799 --> 01:05:24,880
that id

01:05:22,640 --> 01:05:26,559
that is literally what this code that

01:05:24,880 --> 01:05:30,799
we're looking at does

01:05:26,559 --> 01:05:33,760
it grabs all of the

01:05:30,799 --> 01:05:34,799
let's see where we if we can actually

01:05:33,760 --> 01:05:38,799
find

01:05:34,799 --> 01:05:44,319
the hashing um method in here

01:05:38,799 --> 01:05:44,319
it's not it's it's actually gonna be

01:05:45,760 --> 01:05:50,640
buried apparently oh well

01:05:59,760 --> 01:06:03,760
it's going to be in here somewhere this

01:06:01,680 --> 01:06:05,200
is where oh here we go request by shard

01:06:03,760 --> 01:06:09,920
so wherever we built

01:06:05,200 --> 01:06:09,920
this oh here um

01:06:16,000 --> 01:06:23,039
operate there we go this

01:06:20,559 --> 01:06:25,520
this and this performs the hashing this

01:06:23,039 --> 01:06:25,520
line here

01:06:26,319 --> 01:06:31,200
so that if you end up diving in is where

01:06:29,760 --> 01:06:33,920
where you can look up the hashing

01:06:31,200 --> 01:06:35,680
algorithm and figure out what's going on

01:06:33,920 --> 01:06:37,039
many years ago we accidentally changed

01:06:35,680 --> 01:06:37,920
the hashing algorithm and broke

01:06:37,039 --> 01:06:40,720
everything

01:06:37,920 --> 01:06:41,520
we have since developed much much better

01:06:40,720 --> 01:06:42,559
tests

01:06:41,520 --> 01:06:44,640
that would have caught that

01:06:42,559 --> 01:06:47,839
automatically

01:06:44,640 --> 01:06:51,839
so um let's talk about running

01:06:47,839 --> 01:06:55,680
tests the most basic tests you can run

01:06:51,839 --> 01:06:57,680
are just unit tests um so

01:06:55,680 --> 01:07:00,160
let's look at when i was running

01:06:57,680 --> 01:07:04,880
recently like

01:07:00,160 --> 01:07:09,760
i was looking at the range aggregator

01:07:04,880 --> 01:07:12,799
tests so

01:07:09,760 --> 01:07:14,319
you can just run these oh god okay

01:07:12,799 --> 01:07:16,400
i can't run them without fixing

01:07:14,319 --> 01:07:18,640
everything but you can just run them in

01:07:16,400 --> 01:07:20,480
your id by clicking the button

01:07:18,640 --> 01:07:22,000
and it will run them as just regular

01:07:20,480 --> 01:07:25,359
test cases

01:07:22,000 --> 01:07:29,920
we use the uh

01:07:25,359 --> 01:07:32,720
very very old style junit to

01:07:29,920 --> 01:07:34,640
marker for tests all the methods that

01:07:32,720 --> 01:07:35,680
are tests are public and have the word

01:07:34,640 --> 01:07:38,640
test in their name

01:07:35,680 --> 01:07:38,640
in the front of their name

01:07:38,880 --> 01:07:42,720
that's gone out of style people now put

01:07:41,119 --> 01:07:45,920
annotations on the methods

01:07:42,720 --> 01:07:49,680
to to mark things as tests uh

01:07:45,920 --> 01:07:51,839
but we keep doing this and it works for

01:07:49,680 --> 01:07:54,319
us

01:07:51,839 --> 01:07:56,079
you can run this same method but you can

01:07:54,319 --> 01:07:58,400
run this same test on the command

01:07:56,079 --> 01:07:59,839
line um and there are other tests that

01:07:58,400 --> 01:08:00,319
you sort of have to run on the command

01:07:59,839 --> 01:08:01,920
line

01:08:00,319 --> 01:08:03,359
but you can run the test on the command

01:08:01,920 --> 01:08:06,720
line by

01:08:03,359 --> 01:08:08,720
going to here control c

01:08:06,720 --> 01:08:11,119
out of your elastic search i'm doing

01:08:08,720 --> 01:08:11,119
gradle

01:08:12,799 --> 01:08:16,719
server to pick the server subproject

01:08:14,960 --> 01:08:19,679
because this test is in the server sub

01:08:16,719 --> 01:08:22,480
project which you can tell

01:08:19,679 --> 01:08:25,279
by scrolling way up and seeing that it's

01:08:22,480 --> 01:08:25,279
in here

01:08:26,239 --> 01:08:33,679
test that the tests dot

01:08:30,640 --> 01:08:37,199
class and then

01:08:33,679 --> 01:08:40,480
a glob pattern to select the class

01:08:37,199 --> 01:08:42,400
so this will go compile

01:08:40,480 --> 01:08:44,080
as much stuff as it needs to do into the

01:08:42,400 --> 01:08:47,440
tests so

01:08:44,080 --> 01:08:49,359
this is the authoritative run of the

01:08:47,440 --> 01:08:50,719
tests running running this way versus

01:08:49,359 --> 01:08:53,920
running in your ide

01:08:50,719 --> 01:08:55,920
so when folks ask um you know when you

01:08:53,920 --> 01:08:58,239
asked about running vs code

01:08:55,920 --> 01:08:59,679
i did that for like six months and it

01:08:58,239 --> 01:09:02,719
worked okay

01:08:59,679 --> 01:09:06,719
but uh not being able to

01:09:02,719 --> 01:09:09,279
to debug unit tests was sort of a big

01:09:06,719 --> 01:09:09,279
big pain

01:09:13,839 --> 01:09:17,920
so yeah this ends up having to compile

01:09:16,159 --> 01:09:19,040
the other half of the world right i

01:09:17,920 --> 01:09:21,279
suspect

01:09:19,040 --> 01:09:22,640
that elasticsearch has more tests than

01:09:21,279 --> 01:09:26,239
it has code

01:09:22,640 --> 01:09:28,560
uh that's also pretty normal for

01:09:26,239 --> 01:09:30,960
software projects as i've come to

01:09:28,560 --> 01:09:30,960
realize

01:09:31,199 --> 01:09:37,040
and yeah zoom is eating up our cpu so

01:09:34,319 --> 01:09:39,839
that's why i'm stalling for time well

01:09:37,040 --> 01:09:41,359
the server compiled test java is now

01:09:39,839 --> 01:09:43,759
just finishing

01:09:41,359 --> 01:09:45,520
uh so now it will boot up the test

01:09:43,759 --> 01:09:48,960
runner

01:09:45,520 --> 01:09:51,279
um elasticsearch has somewhere between

01:09:48,960 --> 01:09:53,120
three

01:09:51,279 --> 01:09:55,120
somewhere between two and four different

01:09:53,120 --> 01:09:58,320
kinds of tests

01:09:55,120 --> 01:10:01,520
um it has the kind of tests

01:09:58,320 --> 01:10:03,199
that uh everyone is used to in java and

01:10:01,520 --> 01:10:04,719
that's the ones i just showed you right

01:10:03,199 --> 01:10:06,880
it has these

01:10:04,719 --> 01:10:08,719
uh unit tests so that actually executed

01:10:06,880 --> 01:10:11,360
it and and i promise you it wouldn't

01:10:08,719 --> 01:10:13,760
take a minute 26 seconds

01:10:11,360 --> 01:10:14,960
most of the time most of that was spent

01:10:13,760 --> 01:10:19,040
compiling and

01:10:14,960 --> 01:10:22,159
waiting on zoom frankly

01:10:19,040 --> 01:10:24,800
but it is significantly faster to be

01:10:22,159 --> 01:10:27,440
able to run it in your id if you can

01:10:24,800 --> 01:10:29,120
and there we go that ran all 34 test

01:10:27,440 --> 01:10:30,320
methods on this class

01:10:29,120 --> 01:10:32,640
i'm not sure where they all came from

01:10:30,320 --> 01:10:35,199
but they're mostly there

01:10:32,640 --> 01:10:36,159
um the other sort of tests that we have

01:10:35,199 --> 01:10:40,000
are

01:10:36,159 --> 01:10:42,640
uh tests that stand up an entire elastic

01:10:40,000 --> 01:10:45,360
search cluster inside of a unit test

01:10:42,640 --> 01:10:47,199
these are really wonderful and really

01:10:45,360 --> 01:10:51,920
terrible at the same time

01:10:47,199 --> 01:10:53,520
um they all extend from this esn tag

01:10:51,920 --> 01:10:55,280
test case class

01:10:53,520 --> 01:10:57,679
and i'm going to find us a good example

01:10:55,280 --> 01:10:59,600
of one it used to be that these were the

01:10:57,679 --> 01:11:03,120
only way that you could run

01:10:59,600 --> 01:11:05,600
complex tests so you ended up

01:11:03,120 --> 01:11:07,199
using you ended up with everything being

01:11:05,600 --> 01:11:10,960
tested this way

01:11:07,199 --> 01:11:13,199
um actually

01:11:10,960 --> 01:11:14,480
it here we go so this is one of them

01:11:13,199 --> 01:11:17,520
right this tests

01:11:14,480 --> 01:11:18,480
uh just a query it tests a fairly simple

01:11:17,520 --> 01:11:20,640
query

01:11:18,480 --> 01:11:22,400
uh but it it stands up a whole

01:11:20,640 --> 01:11:24,480
elasticsearch cluster with maybe four or

01:11:22,400 --> 01:11:26,960
five elastic search nodes in the unit

01:11:24,480 --> 01:11:28,320
tests in the same jvm all communicating

01:11:26,960 --> 01:11:29,520
with itself and it can take quite a

01:11:28,320 --> 01:11:33,040
while

01:11:29,520 --> 01:11:36,400
um and you can run that in your ide

01:11:33,040 --> 01:11:40,000
and it works which is good but it is

01:11:36,400 --> 01:11:44,719
very not real

01:11:40,000 --> 01:11:46,800
it's it's very lying um it doesn't

01:11:44,719 --> 01:11:48,400
first of all it uses these these scripts

01:11:46,800 --> 01:11:49,360
that aren't real scripts you can see

01:11:48,400 --> 01:11:51,600
that

01:11:49,360 --> 01:11:53,600
uh you know we we have a script here

01:11:51,600 --> 01:11:56,159
called

01:11:53,600 --> 01:11:57,679
doc num value and that literally is

01:11:56,159 --> 01:11:59,760
implemented right here in java right

01:11:57,679 --> 01:12:01,600
next to it

01:11:59,760 --> 01:12:04,000
so it's not using the real scripting

01:12:01,600 --> 01:12:07,520
language that comes with elasticsearch

01:12:04,000 --> 01:12:10,800
um if you want to do

01:12:07,520 --> 01:12:13,920
real tests uh there

01:12:10,800 --> 01:12:17,040
are rest tests that

01:12:13,920 --> 01:12:20,320
you can execute and these ones

01:12:17,040 --> 01:12:23,840
um this they are not actually contained

01:12:20,320 --> 01:12:23,840
in the server but

01:12:24,560 --> 01:12:29,360
they're sort of in other spots let's do

01:12:33,280 --> 01:12:37,840
oh okay

01:12:39,280 --> 01:12:44,320
well i'll find one this way

01:12:46,480 --> 01:12:51,840
all right here we go things like testing

01:12:54,400 --> 01:12:59,840
this is like a test where we uh try to

01:12:57,280 --> 01:12:59,840
use

01:13:00,000 --> 01:13:04,880
um elasticsearch where we try to

01:13:02,320 --> 01:13:07,679
communicate with elasticsearch

01:13:04,880 --> 01:13:08,239
inside of a wildfly server to make sure

01:13:07,679 --> 01:13:11,600
that the

01:13:08,239 --> 01:13:15,040
uh that our that our test client doesn't

01:13:11,600 --> 01:13:16,960
blow up inside of wildfly

01:13:15,040 --> 01:13:20,320
in or that our regular client doesn't

01:13:16,960 --> 01:13:22,000
blow up inside of wildfly

01:13:20,320 --> 01:13:23,920
in addition we also have these yaml

01:13:22,000 --> 01:13:27,760
tests that i sort of showed

01:13:23,920 --> 01:13:29,840
folks these tests are

01:13:27,760 --> 01:13:31,679
shared between elastic such as clients

01:13:29,840 --> 01:13:35,360
and elasticsearch

01:13:31,679 --> 01:13:37,600
so when you run these tests

01:13:35,360 --> 01:13:40,560
these those ones you can run with a

01:13:37,600 --> 01:13:40,560
command like

01:13:44,000 --> 01:13:48,560
this the rest api spec directory has

01:13:47,440 --> 01:13:51,120
most of the minute

01:13:48,560 --> 01:13:52,719
and that will run zillions and zillions

01:13:51,120 --> 01:13:54,239
of tests that we've got for

01:13:52,719 --> 01:13:56,719
elasticsearch that we share with the

01:13:54,239 --> 01:13:56,719
clients

01:13:57,360 --> 01:14:03,600
in addition edition

01:14:00,480 --> 01:14:07,199
we also do some magic to the

01:14:03,600 --> 01:14:07,199
to the documentation so

01:14:12,080 --> 01:14:18,800
if i do this if i

01:14:15,199 --> 01:14:23,440
type it properly um

01:14:18,800 --> 01:14:25,920
so if you look over

01:14:23,440 --> 01:14:27,120
here we have a docs directory right and

01:14:25,920 --> 01:14:31,040
then we have

01:14:27,120 --> 01:14:31,520
things like in the reference we talk

01:14:31,040 --> 01:14:36,400
about

01:14:31,520 --> 01:14:36,400
how you use the

01:14:37,760 --> 01:14:41,679
terms aggregation this is one that i

01:14:39,760 --> 01:14:44,159
actually showed you

01:14:41,679 --> 01:14:45,440
and you know we say things like oh this

01:14:44,159 --> 01:14:46,719
is this is what it looks like you

01:14:45,440 --> 01:14:49,840
perform a search with the

01:14:46,719 --> 01:14:54,400
these eggs here um

01:14:49,840 --> 01:14:56,640
but then we have sneaky stuff like this

01:14:54,400 --> 01:15:00,239
and this is a comment that hides the

01:14:56,640 --> 01:15:02,320
output from the documentation

01:15:00,239 --> 01:15:03,600
so these are all actually turned into

01:15:02,320 --> 01:15:06,239
tests and

01:15:03,600 --> 01:15:09,199
and we execute this first and then we

01:15:06,239 --> 01:15:12,719
execute this

01:15:09,199 --> 01:15:16,560
and so when you want to try and run

01:15:12,719 --> 01:15:19,840
um rather when you run the docs

01:15:16,560 --> 01:15:21,760
check that's what happens it it takes

01:15:19,840 --> 01:15:24,560
takes examples from the documentation

01:15:21,760 --> 01:15:27,760
and turns them into tests

01:15:24,560 --> 01:15:30,159
so uh i have shown

01:15:27,760 --> 01:15:31,920
people uh where you can find

01:15:30,159 --> 01:15:33,360
implementations of things and i've shown

01:15:31,920 --> 01:15:34,960
folks

01:15:33,360 --> 01:15:36,840
rather i've given you a whirlwind tour

01:15:34,960 --> 01:15:38,080
of where the tests are and how you run

01:15:36,840 --> 01:15:53,840
them

01:15:38,080 --> 01:15:53,840
where folks like to go from here

01:15:59,040 --> 01:16:03,360
what work needs to be done well

01:16:05,199 --> 01:16:10,960
lots of work let's look up

01:16:08,239 --> 01:16:21,840
so that is something i even said i would

01:16:10,960 --> 01:16:21,840
do in the description

01:16:25,600 --> 01:16:30,000
so we currently have 22

01:16:30,040 --> 01:16:35,199
2652 open issues

01:16:32,400 --> 01:16:37,199
exactly which of them are things that a

01:16:35,199 --> 01:16:37,679
contributor could do are difficult to

01:16:37,199 --> 01:16:41,520
say

01:16:37,679 --> 01:16:44,800
but we have a good first issue

01:16:41,520 --> 01:16:48,000
um which has

01:16:44,800 --> 01:16:50,320
33 open issues so that

01:16:48,000 --> 01:16:52,400
absolutely counts and i know because

01:16:50,320 --> 01:16:56,400
i've been watching

01:16:52,400 --> 01:17:01,040
um this one go by

01:16:56,400 --> 01:17:03,920
that it is a good first issue i was

01:17:01,040 --> 01:17:05,040
involved in talking about talking to

01:17:03,920 --> 01:17:08,719
some people

01:17:05,040 --> 01:17:12,400
uh about it so yeah

01:17:08,719 --> 01:17:16,159
if you search for a good first issue

01:17:12,400 --> 01:17:18,640
um it is the label good first issue

01:17:16,159 --> 01:17:19,600
you should find issues that we think

01:17:18,640 --> 01:17:22,560
probably

01:17:19,600 --> 01:17:24,320
are good first issues um some of them as

01:17:22,560 --> 01:17:26,239
you go back further in time

01:17:24,320 --> 01:17:27,440
they were issues we thought were a good

01:17:26,239 --> 01:17:29,679
first issue

01:17:27,440 --> 01:17:31,760
but maybe just because they haven't been

01:17:29,679 --> 01:17:34,000
done for

01:17:31,760 --> 01:17:34,000
uh

01:17:34,960 --> 01:17:39,199
seven seven years they might this might

01:17:37,920 --> 01:17:43,280
be a lie

01:17:39,199 --> 01:17:45,440
um so i wouldn't believe

01:17:43,280 --> 01:17:47,280
a good first issue when you go too far

01:17:45,440 --> 01:17:50,400
back i'm gonna

01:17:47,280 --> 01:17:55,440
take that as something i have to do

01:17:50,400 --> 01:17:55,440
in the next few days to try to clean up

01:17:56,320 --> 01:17:59,679
to try to clean this up because some of

01:17:58,800 --> 01:18:01,440
these are

01:17:59,679 --> 01:18:03,040
they're just too old to be good first

01:18:01,440 --> 01:18:04,880
issues they're

01:18:03,040 --> 01:18:06,080
the code base has changed so much in

01:18:04,880 --> 01:18:09,679
seven years

01:18:06,080 --> 01:18:11,760
that any any guess somebody had

01:18:09,679 --> 01:18:13,280
um as to whether this was a good first

01:18:11,760 --> 01:18:16,719
issue can't be a good guess

01:18:13,280 --> 01:18:18,640
anymore so if you are interested in a

01:18:16,719 --> 01:18:22,000
first issue

01:18:18,640 --> 01:18:24,840
i actually uh i suggest this one

01:18:22,000 --> 01:18:28,480
here option to remove kia string from

01:18:24,840 --> 01:18:28,480
aggregations response

01:18:30,199 --> 01:18:34,800
63898 and i can show you exactly what

01:18:33,040 --> 01:18:39,440
they're talking about

01:18:34,800 --> 01:18:41,760
when we ran our lovely aggregation

01:18:39,440 --> 01:18:44,000
let's let's make this circulation run

01:18:41,760 --> 01:18:44,000
again

01:18:44,960 --> 01:18:51,600
when we ran our lovely aggregation which

01:18:47,920 --> 01:18:51,600
was on this demo2 page

01:18:51,920 --> 01:18:56,719
say this one here well we're grouping by

01:18:54,320 --> 01:18:56,719
track

01:18:57,440 --> 01:19:00,159
steal this

01:19:00,719 --> 01:19:09,840
wait for that to start and paste

01:19:19,120 --> 01:19:22,880
i apologize it's it's one that looks

01:19:20,960 --> 01:19:24,239
like this when we were grouping by

01:19:22,880 --> 01:19:26,560
yeah here's the one where we grew by

01:19:24,239 --> 01:19:26,560
track

01:19:30,719 --> 01:19:37,920
that one doesn't happen um

01:19:36,320 --> 01:19:41,600
i lied that one doesn't have it but this

01:19:37,920 --> 01:19:45,199
one does when we were grouping by day

01:19:41,600 --> 01:19:48,560
see how we have key as string here

01:19:45,199 --> 01:19:51,199
um a lot of applications

01:19:48,560 --> 01:19:51,840
don't need this and it's sort of a waste

01:19:51,199 --> 01:19:55,679
of time

01:19:51,840 --> 01:19:58,960
to make it right

01:19:55,679 --> 01:20:00,880
we don't need to to

01:19:58,960 --> 01:20:02,560
to format the string we don't need to

01:20:00,880 --> 01:20:03,760
build it we don't need to send it across

01:20:02,560 --> 01:20:06,239
the wire

01:20:03,760 --> 01:20:07,679
we don't need any of that garbage if the

01:20:06,239 --> 01:20:11,280
application on the other side is just

01:20:07,679 --> 01:20:14,560
going to throw the kia string away

01:20:11,280 --> 01:20:17,280
so if you look so this is in the

01:20:14,560 --> 01:20:18,639
uh the date histogram response so if we

01:20:17,280 --> 01:20:23,040
crack open

01:20:18,639 --> 01:20:23,040
eclipse that is in

01:20:23,840 --> 01:20:29,120
class called internal date histogram the

01:20:26,960 --> 01:20:30,719
response objects for aggregations all

01:20:29,120 --> 01:20:34,639
start with the word internal

01:20:30,719 --> 01:20:35,040
for a reason that made sense five years

01:20:34,639 --> 01:20:38,719
ago

01:20:35,040 --> 01:20:41,520
but hasn't made sense for three years

01:20:38,719 --> 01:20:42,400
um if you search for a mythical x

01:20:41,520 --> 01:20:46,159
content you'll see

01:20:42,400 --> 01:20:47,760
this is exactly how we format it here we

01:20:46,159 --> 01:20:51,440
see if format is not

01:20:47,760 --> 01:20:53,840
raw then format this thing

01:20:51,440 --> 01:20:55,120
and our format is not raw in the case of

01:20:53,840 --> 01:21:00,880
dates

01:20:55,120 --> 01:21:02,320
because well um

01:21:00,880 --> 01:21:04,480
oh that's interesting you probably could

01:21:02,320 --> 01:21:06,480
request it raw already so maybe we can

01:21:04,480 --> 01:21:07,440
close this issue maybe it's not a real

01:21:06,480 --> 01:21:10,960
issue

01:21:07,440 --> 01:21:14,000
um they may so the issue is make an

01:21:10,960 --> 01:21:16,719
option to disable rendering this because

01:21:14,000 --> 01:21:17,440
it it could be a waste of time to render

01:21:16,719 --> 01:21:20,560
it and

01:21:17,440 --> 01:21:20,560
a lot of people don't need it

01:21:21,040 --> 01:21:24,719
there may already in fact be such an

01:21:23,040 --> 01:21:26,400
option

01:21:24,719 --> 01:21:28,400
in which case somebody should write that

01:21:26,400 --> 01:21:31,120
down but

01:21:28,400 --> 01:21:32,639
um if it turns out that that's not true

01:21:31,120 --> 01:21:35,440
this is a great first issue

01:21:32,639 --> 01:21:36,719
because not only because i know exactly

01:21:35,440 --> 01:21:38,800
where it is so i can

01:21:36,719 --> 01:21:40,960
talk to anyone who wants to work on it

01:21:38,800 --> 01:21:42,560
but also um

01:21:40,960 --> 01:21:44,400
i think it's not particularly involved

01:21:42,560 --> 01:21:45,440
to get it fixed to introduce an extra

01:21:44,400 --> 01:21:50,480
option to make that

01:21:45,440 --> 01:21:50,480
a thing that we can remove

01:21:51,760 --> 01:21:58,239
so yeah as i said go and look at um good

01:21:56,159 --> 01:21:59,679
first issues

01:21:58,239 --> 01:22:02,320
i can talk a little bit about the pull

01:21:59,679 --> 01:22:03,280
request process uh when you open a pull

01:22:02,320 --> 01:22:06,159
request to

01:22:03,280 --> 01:22:07,280
elasticsearch uh typically target the

01:22:06,159 --> 01:22:08,560
master branch

01:22:07,280 --> 01:22:11,840
that is sort of what will happen by

01:22:08,560 --> 01:22:11,840
default if you're using github

01:22:13,520 --> 01:22:21,760
it's not required but i tend to write

01:22:18,639 --> 01:22:23,760
like paragraphs of markdown

01:22:21,760 --> 01:22:25,600
that github turns into some lovely

01:22:23,760 --> 01:22:28,000
description for people

01:22:25,600 --> 01:22:29,360
uh sometimes certainly for your first

01:22:28,000 --> 01:22:30,719
stuff it'll be a lot shorter right

01:22:29,360 --> 01:22:31,760
because you'll be doing a lot smaller

01:22:30,719 --> 01:22:35,040
things

01:22:31,760 --> 01:22:38,000
um but yeah the the uh

01:22:35,040 --> 01:22:38,400
pull request the description in in the

01:22:38,000 --> 01:22:41,360
git

01:22:38,400 --> 01:22:42,800
commits turning marked in uh and we

01:22:41,360 --> 01:22:46,080
review it we go through the sort of

01:22:42,800 --> 01:22:49,120
standard review process as you'd imagine

01:22:46,080 --> 01:22:50,840
any open source project does so this is

01:22:49,120 --> 01:22:53,280
you open up

01:22:50,840 --> 01:22:54,400
um you open up the pull request with a

01:22:53,280 --> 01:22:56,480
bunch of code

01:22:54,400 --> 01:22:59,360
and you wait for one of the maintainers

01:22:56,480 --> 01:23:02,480
uh to review it and talk about it

01:22:59,360 --> 01:23:05,760
and we all go through this process

01:23:02,480 --> 01:23:09,120
um there

01:23:05,760 --> 01:23:10,960
there are uh some

01:23:09,120 --> 01:23:12,480
there are some cases where maintainers

01:23:10,960 --> 01:23:15,120
can push code that

01:23:12,480 --> 01:23:16,400
is not reviewed but it's mostly just to

01:23:15,120 --> 01:23:19,120
do things like

01:23:16,400 --> 01:23:20,800
uh turn off broken tests temporarily

01:23:19,120 --> 01:23:25,199
until somebody can get to them

01:23:20,800 --> 01:23:26,639
things like that for the most part

01:23:25,199 --> 01:23:28,320
we all go through this code review

01:23:26,639 --> 01:23:32,000
process and

01:23:28,320 --> 01:23:32,320
um if you are curious i will never give

01:23:32,000 --> 01:23:34,320
this

01:23:32,320 --> 01:23:36,400
up you will have to you will have to

01:23:34,320 --> 01:23:39,360
take code review for my

01:23:36,400 --> 01:23:40,880
my cold dead fingers the fact that every

01:23:39,360 --> 01:23:41,600
commit goes through code review and

01:23:40,880 --> 01:23:44,159
every commit

01:23:41,600 --> 01:23:44,159
has to be

01:23:44,800 --> 01:23:49,840
looked at by another person is wonderful

01:23:47,280 --> 01:23:49,840
partly

01:23:51,199 --> 01:23:57,120
primarily because it sets up a dynamic

01:23:55,120 --> 01:23:59,679
where you have to be nice to

01:23:57,120 --> 01:24:01,280
each other you have to try to understand

01:23:59,679 --> 01:24:02,880
what the other person is doing and you

01:24:01,280 --> 01:24:04,960
have to try to understand why they're

01:24:02,880 --> 01:24:05,840
doing it and you have to try to help the

01:24:04,960 --> 01:24:07,440
people that

01:24:05,840 --> 01:24:09,360
are reviewing your code to try and

01:24:07,440 --> 01:24:12,639
understand what you're doing

01:24:09,360 --> 01:24:14,560
so um it sort of forces

01:24:12,639 --> 01:24:17,600
you to go back and forth with each other

01:24:14,560 --> 01:24:20,960
and get on board with what's going on

01:24:17,600 --> 01:24:22,800
uh this is well pretty standard stuff

01:24:20,960 --> 01:24:24,560
but it's all pretty standard stuff for

01:24:22,800 --> 01:24:30,560
an open source project but

01:24:24,560 --> 01:24:34,480
i'm frankly really glad we have it

01:24:30,560 --> 01:24:34,480
so yeah any other questions

01:24:36,159 --> 01:24:41,760
oh we have about five minutes left

01:24:38,880 --> 01:24:41,760
before we're done

01:24:42,880 --> 01:24:46,639
a quick question actually um i know that

01:24:45,920 --> 01:24:48,800
it's uh

01:24:46,639 --> 01:24:50,159
oktoberfest i'm wondering if you guys

01:24:48,800 --> 01:24:52,719
are running something like that

01:24:50,159 --> 01:24:53,520
or if you're participating not that i

01:24:52,719 --> 01:24:56,960
know of

01:24:53,520 --> 01:25:00,159
um i should look but i don't think so

01:24:56,960 --> 01:25:02,960
um we have a program for like the

01:25:00,159 --> 01:25:04,800
company has a program for contributors

01:25:02,960 --> 01:25:06,800
where they try to celebrate contributors

01:25:04,800 --> 01:25:09,679
uh you know

01:25:06,800 --> 01:25:11,440
all the time and they try to promote

01:25:09,679 --> 01:25:13,120
contributors and make sure they can

01:25:11,440 --> 01:25:16,320
they get invited to conferences and

01:25:13,120 --> 01:25:19,440
things like that um

01:25:16,320 --> 01:25:22,560
oddly hello travis um

01:25:19,440 --> 01:25:25,840
oddly uh

01:25:22,560 --> 01:25:27,679
a lot of the contributors nowadays don't

01:25:25,840 --> 01:25:30,000
come contributing to elasticsearch they

01:25:27,679 --> 01:25:32,960
come contributing to other projects

01:25:30,000 --> 01:25:34,159
uh that are under the elastic umbrella i

01:25:32,960 --> 01:25:38,480
don't

01:25:34,159 --> 01:25:41,520
know why um you know part of that is

01:25:38,480 --> 01:25:42,239
java's java right uh people aren't in

01:25:41,520 --> 01:25:46,880
love with it

01:25:42,239 --> 01:25:46,880
uh but it gets the job done right

01:25:52,960 --> 01:25:56,560
all right any other questions for the

01:25:55,199 --> 01:26:00,000
next two minutes

01:25:56,560 --> 01:26:00,000
any other things to talk about

01:26:03,600 --> 01:26:07,360
not going to answer that pressing

01:26:05,360 --> 01:26:10,719
question from travis

01:26:07,360 --> 01:26:12,719
oh but it didn't i know um that isn't

01:26:10,719 --> 01:26:15,600
that is an old old

01:26:12,719 --> 01:26:17,440
uh and it didn't go to he sent it to all

01:26:15,600 --> 01:26:20,719
panelists not everyone

01:26:17,440 --> 01:26:25,040
perfect for those of you that um that

01:26:20,719 --> 01:26:28,480
uh are gonna be doing chat um

01:26:25,040 --> 01:26:31,600
uh there is a drop down under two

01:26:28,480 --> 01:26:33,840
and um in zoom and you should

01:26:31,600 --> 01:26:34,719
always always always switch it to all

01:26:33,840 --> 01:26:38,239
panelists

01:26:34,719 --> 01:26:40,560
and attendees if you don't do that

01:26:38,239 --> 01:26:43,199
it tends to default to all panelists so

01:26:40,560 --> 01:26:47,199
only the speaker gets the message

01:26:43,199 --> 01:26:50,880
and if the speaker isn't looking

01:26:47,199 --> 01:26:52,719
they'll never see it and

01:26:50,880 --> 01:26:55,040
in general in these in these things like

01:26:52,719 --> 01:26:59,600
it's nice to have

01:26:55,040 --> 01:27:01,679
um it's nice to have

01:26:59,600 --> 01:27:03,520
this sort of ongoing conversation and it

01:27:01,679 --> 01:27:06,719
looks to me like also

01:27:03,520 --> 01:27:09,040
zoom defaults to to switching the two

01:27:06,719 --> 01:27:10,880
back to whoever last sent the message

01:27:09,040 --> 01:27:15,120
for some reason

01:27:10,880 --> 01:27:16,800
um so so as soon as travis sends me a

01:27:15,120 --> 01:27:18,400
message to me it defaults to for me

01:27:16,800 --> 01:27:18,719
trying to send a private message back to

01:27:18,400 --> 01:27:22,080
him

01:27:18,719 --> 01:27:23,760
it's terrible uh other resources

01:27:22,080 --> 01:27:25,360
that i'd recommend youtube videos and

01:27:23,760 --> 01:27:27,199
walkthroughs um

01:27:25,360 --> 01:27:28,320
there aren't a whole lot of uh youtube

01:27:27,199 --> 01:27:30,080
videos or walkthroughs of the

01:27:28,320 --> 01:27:32,320
elasticsearch code base

01:27:30,080 --> 01:27:34,000
there was me giving a presentation

01:27:32,320 --> 01:27:37,280
fairly similar to this but

01:27:34,000 --> 01:27:39,440
much much shorter uh

01:27:37,280 --> 01:27:40,639
and two two or three years ago at

01:27:39,440 --> 01:27:43,760
elasticon

01:27:40,639 --> 01:27:46,800
so you could certainly find it

01:27:43,760 --> 01:27:48,800
but i don't think it's any good

01:27:46,800 --> 01:27:50,719
partly because i don't think i'm super

01:27:48,800 --> 01:27:53,120
great at giving these and partly because

01:27:50,719 --> 01:27:54,960
frankly three years is a long time and

01:27:53,120 --> 01:27:57,360
things change in three years and

01:27:54,960 --> 01:27:58,840
and also it's a different setting right

01:27:57,360 --> 01:28:02,159
like doing these things

01:27:58,840 --> 01:28:03,920
um this setting is is rough because i

01:28:02,159 --> 01:28:04,800
can't go to your laptop and talk to you

01:28:03,920 --> 01:28:07,199
and sort of

01:28:04,800 --> 01:28:08,800
understand the things you want to do and

01:28:07,199 --> 01:28:09,120
you know one thing i really miss about

01:28:08,800 --> 01:28:11,679
this

01:28:09,120 --> 01:28:13,840
is like i have to ask all right who's

01:28:11,679 --> 01:28:14,480
done cloning who's doing this and you

01:28:13,840 --> 01:28:16,960
know

01:28:14,480 --> 01:28:17,679
is this the thing you know i have to i

01:28:16,960 --> 01:28:20,800
can't just go

01:28:17,679 --> 01:28:23,440
and look and see where you are

01:28:20,800 --> 01:28:25,600
i think we could have we could have done

01:28:23,440 --> 01:28:28,480
more in person

01:28:25,600 --> 01:28:28,960
but otherwise um the other sort of part

01:28:28,480 --> 01:28:30,800
of this is

01:28:28,960 --> 01:28:32,960
it is nice that i have a big screen and

01:28:30,800 --> 01:28:34,639
i can show pieces and i can bring up the

01:28:32,960 --> 01:28:39,280
ide

01:28:34,639 --> 01:28:42,960
and sort of move around and try to

01:28:39,280 --> 01:28:46,000
try to find places right this is

01:28:42,960 --> 01:28:49,520
this is good um

01:28:46,000 --> 01:28:53,920
to be honest if you if you have more

01:28:49,520 --> 01:28:57,120
uh questions uh about how you might

01:28:53,920 --> 01:28:58,320
go about with some pull request if you

01:28:57,120 --> 01:29:00,159
reply to an

01:28:58,320 --> 01:29:02,080
issue saying hey i'd like to work on

01:29:00,159 --> 01:29:03,760
this issue and

01:29:02,080 --> 01:29:05,440
uh you know i think maybe this is the

01:29:03,760 --> 01:29:06,000
right way to start anyone would happily

01:29:05,440 --> 01:29:10,239
help you

01:29:06,000 --> 01:29:12,480
also i will type in zoom chat

01:29:10,239 --> 01:29:14,320
uh my email address and you can send me

01:29:12,480 --> 01:29:17,440
an email

01:29:14,320 --> 01:29:17,920
that's elasticsearch as a project is

01:29:17,440 --> 01:29:21,520
sort of

01:29:17,920 --> 01:29:25,840
big enough that that is not something

01:29:21,520 --> 01:29:25,840
that we do very much um

01:29:26,080 --> 01:29:30,000
but we you know i would be quite quite

01:29:28,639 --> 01:29:32,080
happy to help anyone

01:29:30,000 --> 01:29:34,239
that's sat through two hours of me

01:29:32,080 --> 01:29:37,600
lathering on about elastic search

01:29:34,239 --> 01:29:46,400
now yeah so send me an email if you have

01:29:37,600 --> 01:29:46,400

YouTube URL: https://www.youtube.com/watch?v=TyuuDpTwh9I


