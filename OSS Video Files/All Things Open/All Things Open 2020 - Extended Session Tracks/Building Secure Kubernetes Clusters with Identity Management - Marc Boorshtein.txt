Title: Building Secure Kubernetes Clusters with Identity Management - Marc Boorshtein
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Marc Boorshtein, Tremolo Security, Inc.
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: What goes into building a secure kubernetes cluster? Most of the reading you’ll find focuses on TLS and container design. An area that is often overlooked is identity management. Who’s accessing the cluster? Why do they need access? Do they still need access? Are they accessing the cluster using the correct credentials? In this class we’ll build a kubernetes cluster with identity management as the primary focus. You’ll learn how to:

- Integrate a running cluster with OpenID Connect
- Automate the creation of network and pod security policies
- Lock down access to the Kubernetes dashboard
- Build and debug RBAC policies, as well as automate them
- In addition to locking down your cluster, we’ll explore how identity interacts through your pipeline and container registry strategies. By the time you’re done with this class you’ll have seen how identity and automation plays a crucial role in securing your clusters.

This class is not an introduction to Kubernetes. It is highly recommended to have some familiarity with Kubernetes prior to this workshop. Attendees should plan to bring a laptop with an SSH client and browser. Having the local kubectl utilities is a bonus. All other lab materials will be provided.
Captions: 
	00:00:05,120 --> 00:00:09,200
so welcome everybody to

00:00:06,960 --> 00:00:11,759
uh kubernetes identity management we're

00:00:09,200 --> 00:00:14,240
going to be teaching you how to secure

00:00:11,759 --> 00:00:17,680
your clusters

00:00:14,240 --> 00:00:19,119
uh with identity um so we got a two-hour

00:00:17,680 --> 00:00:20,960
session

00:00:19,119 --> 00:00:22,960
uh we will be taking a break this is

00:00:20,960 --> 00:00:25,519
going to be an interactive session

00:00:22,960 --> 00:00:26,320
um and is going to have a few labs so

00:00:25,519 --> 00:00:27,279
we're going to be covering

00:00:26,320 --> 00:00:29,519
authentication

00:00:27,279 --> 00:00:30,640
authorization pod security policies had

00:00:29,519 --> 00:00:34,320
debugget

00:00:30,640 --> 00:00:36,640
uh things like that um and

00:00:34,320 --> 00:00:38,160
so uh just to get started with a little

00:00:36,640 --> 00:00:40,399
bit of housekeeping

00:00:38,160 --> 00:00:42,399
um i think i can actually put this in

00:00:40,399 --> 00:00:43,200
the chat window to make everybody's

00:00:42,399 --> 00:00:45,840
lives

00:00:43,200 --> 00:00:45,840
easier

00:00:50,079 --> 00:00:54,000
figure out how to do that real quick

00:00:56,840 --> 00:01:00,640
um

00:00:58,399 --> 00:01:00,640
more

00:01:01,680 --> 00:01:08,000
chat here we go so i'm going to send

00:01:04,559 --> 00:01:10,880
this to everybody this bitly link

00:01:08,000 --> 00:01:10,880
will bring you

00:01:11,439 --> 00:01:18,640
so here we go uh here to

00:01:14,880 --> 00:01:20,240
a uh gist on github

00:01:18,640 --> 00:01:22,400
um the first thing you're going to want

00:01:20,240 --> 00:01:23,840
to do is go to this google spreadsheet

00:01:22,400 --> 00:01:27,520
that's linked to

00:01:23,840 --> 00:01:30,560
and pick a cluster uh any cluster

00:01:27,520 --> 00:01:32,079
once you have chosen a cluster go ahead

00:01:30,560 --> 00:01:33,759
and just put a little x

00:01:32,079 --> 00:01:35,200
to make sure that it's taken we got

00:01:33,759 --> 00:01:37,280
plenty of vms

00:01:35,200 --> 00:01:40,720
uh we got a little less than 20 people

00:01:37,280 --> 00:01:41,840
in here we got 125 vms so please feel

00:01:40,720 --> 00:01:45,520
free to spread out

00:01:41,840 --> 00:01:48,720
pick some pick one at random these vms

00:01:45,520 --> 00:01:49,840
all have the exact same key so let's

00:01:48,720 --> 00:01:53,759
make sure that

00:01:49,840 --> 00:01:56,560
um yeah we play nicely everybody

00:01:53,759 --> 00:01:58,000
nobody is trying to take over anybody

00:01:56,560 --> 00:02:03,040
else's

00:01:58,000 --> 00:02:03,040
vm once you pick avm

00:02:04,479 --> 00:02:12,800
come back here uh

00:02:08,000 --> 00:02:16,239
the keys to access it are in here

00:02:12,800 --> 00:02:17,520
so whether you're using openssh or you

00:02:16,239 --> 00:02:20,560
are using putty

00:02:17,520 --> 00:02:22,000
you can use either of these keys don't

00:02:20,560 --> 00:02:23,840
start with the lab quite yet

00:02:22,000 --> 00:02:25,440
once you get yourself settled in you're

00:02:23,840 --> 00:02:29,200
able to ssh in

00:02:25,440 --> 00:02:31,280
to your your chosen lab um

00:02:29,200 --> 00:02:32,560
go ahead and just kind of hang out and

00:02:31,280 --> 00:02:35,200
let's get started with

00:02:32,560 --> 00:02:36,000
the presentation uh portion so what

00:02:35,200 --> 00:02:40,080
we're going to

00:02:36,000 --> 00:02:43,280
do is uh because this

00:02:40,080 --> 00:02:44,400
is a very deep topic um

00:02:43,280 --> 00:02:46,560
what i'm going to do is i'm going to be

00:02:44,400 --> 00:02:48,800
keeping an eye on the q a section

00:02:46,560 --> 00:02:50,400
as you ask questions i'll go ahead and

00:02:48,800 --> 00:02:53,040
add each slide

00:02:50,400 --> 00:02:54,480
after we get past the slide i'll go

00:02:53,040 --> 00:02:56,319
ahead and

00:02:54,480 --> 00:02:58,400
check the q a section to make sure that

00:02:56,319 --> 00:03:01,760
there are no new questions

00:02:58,400 --> 00:03:02,800
um with that let's go ahead and get

00:03:01,760 --> 00:03:04,319
started so let's talk about what we're

00:03:02,800 --> 00:03:06,400
going to cover

00:03:04,319 --> 00:03:07,360
uh we are going to cover a little bit

00:03:06,400 --> 00:03:08,879
we're going to talk a little bit about

00:03:07,360 --> 00:03:11,040
host level authentication

00:03:08,879 --> 00:03:12,000
uh kind of that soft underbelly in the

00:03:11,040 --> 00:03:14,400
underbelly

00:03:12,000 --> 00:03:16,239
of the kubernetes clusters we're going

00:03:14,400 --> 00:03:16,720
to spend a lot of time on authentication

00:03:16,239 --> 00:03:19,200
this is

00:03:16,720 --> 00:03:21,040
one that you know it's a username

00:03:19,200 --> 00:03:21,920
password right what's a big deal well

00:03:21,040 --> 00:03:24,720
kubernetes is

00:03:21,920 --> 00:03:26,400
really unique in a lot of ways

00:03:24,720 --> 00:03:28,720
especially in the enterprise world

00:03:26,400 --> 00:03:30,400
so we're going to talk a lot about

00:03:28,720 --> 00:03:32,000
specifically the open id connect

00:03:30,400 --> 00:03:34,560
protocol why it's most likely

00:03:32,000 --> 00:03:36,640
the one you should be using we're going

00:03:34,560 --> 00:03:38,400
to talk about several anti-patterns

00:03:36,640 --> 00:03:40,239
for instance certificate authentication

00:03:38,400 --> 00:03:42,159
why you shouldn't be using it

00:03:40,239 --> 00:03:43,920
and we'll get into impersonation as well

00:03:42,159 --> 00:03:45,519
that that's kind of a really interesting

00:03:43,920 --> 00:03:48,159
use case and one i've i've really

00:03:45,519 --> 00:03:50,480
enjoyed using as of late

00:03:48,159 --> 00:03:52,000
we'll also get into authorization so

00:03:50,480 --> 00:03:53,439
we're going to spend a lot of time on

00:03:52,000 --> 00:03:54,959
authentication

00:03:53,439 --> 00:03:56,640
but once you get through the

00:03:54,959 --> 00:03:58,480
authentication part you then have to

00:03:56,640 --> 00:03:59,360
figure out who has access to what inside

00:03:58,480 --> 00:04:00,879
the cluster

00:03:59,360 --> 00:04:02,400
so we're going to talk about our back

00:04:00,879 --> 00:04:05,599
how do you debug it

00:04:02,400 --> 00:04:06,799
how do you design your policies

00:04:05,599 --> 00:04:08,799
we're going to touch a little bit on

00:04:06,799 --> 00:04:12,000
network policies uh

00:04:08,799 --> 00:04:13,920
just from a a design standpoint

00:04:12,000 --> 00:04:15,760
but really the the focus is going to be

00:04:13,920 --> 00:04:16,639
on our back and then on pod security

00:04:15,760 --> 00:04:18,320
policies

00:04:16,639 --> 00:04:22,000
uh how to handle them what's going to

00:04:18,320 --> 00:04:22,000
happen to them etc

00:04:22,639 --> 00:04:26,720
what we're not going to talk about this

00:04:24,240 --> 00:04:29,759
is not an introduction to kubernetes

00:04:26,720 --> 00:04:31,759
um there is an assumption that you have

00:04:29,759 --> 00:04:33,199
some basic understanding of how

00:04:31,759 --> 00:04:36,639
kubernetes works

00:04:33,199 --> 00:04:38,000
um so uh yeah we won't be covering

00:04:36,639 --> 00:04:40,000
things like what's a pod what's a

00:04:38,000 --> 00:04:42,800
deployment things of that nature

00:04:40,000 --> 00:04:44,479
uh we're not to really get into how you

00:04:42,800 --> 00:04:45,199
do certificate management we'll talk

00:04:44,479 --> 00:04:48,000
about it

00:04:45,199 --> 00:04:49,280
from a high level as to how it applies

00:04:48,000 --> 00:04:51,040
to kubernetes

00:04:49,280 --> 00:04:52,800
um but we're not going to go through how

00:04:51,040 --> 00:04:54,560
you actually stand up a ca

00:04:52,800 --> 00:04:56,160
get a certificate issue things of that

00:04:54,560 --> 00:04:58,560
nature uh

00:04:56,160 --> 00:04:59,600
and then the the last few here kind of

00:04:58,560 --> 00:05:04,320
basic

00:04:59,600 --> 00:05:06,400
um uh uh security of your environment

00:05:04,320 --> 00:05:08,400
um there's often a lot of talk about how

00:05:06,400 --> 00:05:10,560
kubernetes is not secure by default that

00:05:08,400 --> 00:05:13,120
is a hundred percent accurate

00:05:10,560 --> 00:05:14,400
uh there are so many things that go into

00:05:13,120 --> 00:05:16,320
doing that that i would not

00:05:14,400 --> 00:05:18,160
possibly do it justice in a couple of

00:05:16,320 --> 00:05:19,680
hours you know our focus is really going

00:05:18,160 --> 00:05:25,840
to be on the identity side who's

00:05:19,680 --> 00:05:28,639
accessing your cluster

00:05:25,840 --> 00:05:29,600
there we go so let's talk a little bit

00:05:28,639 --> 00:05:32,400
about host level

00:05:29,600 --> 00:05:33,280
authentication your host is the soft

00:05:32,400 --> 00:05:35,919
underbelly

00:05:33,280 --> 00:05:37,600
of your cluster if somebody has access

00:05:35,919 --> 00:05:39,600
to your host think about this

00:05:37,600 --> 00:05:40,720
you're running docker most likely

00:05:39,600 --> 00:05:43,919
there's some cluster there

00:05:40,720 --> 00:05:46,080
there there are a lot of uh um

00:05:43,919 --> 00:05:47,120
distros out there that don't use docker

00:05:46,080 --> 00:05:48,639
uh but

00:05:47,120 --> 00:05:50,800
at some level you're running some kind

00:05:48,639 --> 00:05:54,160
of container infrastructure

00:05:50,800 --> 00:05:56,720
on your host and containers don't really

00:05:54,160 --> 00:05:58,160
have that great of security boundary

00:05:56,720 --> 00:05:59,759
uh you have to put a lot of work to make

00:05:58,160 --> 00:06:02,639
that security boundary work

00:05:59,759 --> 00:06:04,160
and the fact is that i'm on your host i

00:06:02,639 --> 00:06:06,639
have root access to your host

00:06:04,160 --> 00:06:08,960
i win i have access to all your volumes

00:06:06,639 --> 00:06:10,960
i have access to all the processes

00:06:08,960 --> 00:06:12,639
you know uh once you get into your

00:06:10,960 --> 00:06:15,919
cluster if you run

00:06:12,639 --> 00:06:17,600
uh ps or top you'll see

00:06:15,919 --> 00:06:19,039
all the processes running inside of

00:06:17,600 --> 00:06:20,560
containers uh

00:06:19,039 --> 00:06:22,880
even though it's it's running inside of

00:06:20,560 --> 00:06:26,560
kubernetes so one once i have your

00:06:22,880 --> 00:06:26,960
your node i win uh even better if i own

00:06:26,560 --> 00:06:30,000
your

00:06:26,960 --> 00:06:31,199
your control plane uh i have access to

00:06:30,000 --> 00:06:34,000
your ftd data

00:06:31,199 --> 00:06:35,280
all of your keys it it really is the

00:06:34,000 --> 00:06:36,400
soft underbelly

00:06:35,280 --> 00:06:38,000
uh and so there are a couple of

00:06:36,400 --> 00:06:38,800
different strategies you can use when it

00:06:38,000 --> 00:06:42,000
comes to

00:06:38,800 --> 00:06:46,000
identity and walking down access

00:06:42,000 --> 00:06:47,280
to uh those hosts there are those that

00:06:46,000 --> 00:06:49,039
will do

00:06:47,280 --> 00:06:50,880
identity by ansible i call it where

00:06:49,039 --> 00:06:54,960
you're provisioning certificates

00:06:50,880 --> 00:06:56,319
for ssh i might have been guilty of that

00:06:54,960 --> 00:06:59,039
once or twice

00:06:56,319 --> 00:07:01,440
but that doesn't scale there are several

00:06:59,039 --> 00:07:03,120
centralized options

00:07:01,440 --> 00:07:04,720
so you're you know you might be looking

00:07:03,120 --> 00:07:08,000
at things like free

00:07:04,720 --> 00:07:09,599
uh free ipa active directory

00:07:08,000 --> 00:07:11,199
uh there are a lot of different options

00:07:09,599 --> 00:07:12,160
there for managing who has access to

00:07:11,199 --> 00:07:13,919
your host

00:07:12,160 --> 00:07:15,680
uh or you could just say you know what

00:07:13,919 --> 00:07:16,319
nobody's gonna have access to my house

00:07:15,680 --> 00:07:19,120
so

00:07:16,319 --> 00:07:20,479
if you're doing a managed cluster on on

00:07:19,120 --> 00:07:22,960
aks eks

00:07:20,479 --> 00:07:24,560
etc you might just not give anybody

00:07:22,960 --> 00:07:27,039
access

00:07:24,560 --> 00:07:28,080
here's the trick though if one user

00:07:27,039 --> 00:07:31,120
needs access

00:07:28,080 --> 00:07:32,800
to your host for whatever reason then

00:07:31,120 --> 00:07:34,240
you need to spend the time to make sure

00:07:32,800 --> 00:07:36,960
that you're managing access

00:07:34,240 --> 00:07:38,800
properly uh because you know there are

00:07:36,960 --> 00:07:40,000
these memes out there and videos out

00:07:38,800 --> 00:07:42,560
there of

00:07:40,000 --> 00:07:44,400
uh different doors where they have these

00:07:42,560 --> 00:07:46,240
giant locks and then they're

00:07:44,400 --> 00:07:49,039
defeated because somebody can just reach

00:07:46,240 --> 00:07:51,599
around and open it from the inside

00:07:49,039 --> 00:07:54,160
not securing your host not making sure

00:07:51,599 --> 00:07:55,919
people have access to your host

00:07:54,160 --> 00:07:57,440
is kind of like that so we're not

00:07:55,919 --> 00:07:59,120
getting in details of how to do that

00:07:57,440 --> 00:08:01,280
because that

00:07:59,120 --> 00:08:02,639
that differs very much between different

00:08:01,280 --> 00:08:06,000
distributions

00:08:02,639 --> 00:08:07,280
different um platforms uh but as you're

00:08:06,000 --> 00:08:08,400
starting to design your cluster

00:08:07,280 --> 00:08:10,960
implementation

00:08:08,400 --> 00:08:13,840
do not ignore who has access to the

00:08:10,960 --> 00:08:13,840
hosts

00:08:15,360 --> 00:08:20,319
so let's talk i mean this one ah i did

00:08:19,039 --> 00:08:22,240
miss one i'm sorry

00:08:20,319 --> 00:08:23,759
so um sorry to jump around here but

00:08:22,240 --> 00:08:26,879
let's talk a little bit

00:08:23,759 --> 00:08:28,800
first about what is identity management

00:08:26,879 --> 00:08:30,479
who what why and specifically when we're

00:08:28,800 --> 00:08:34,479
talking about kubernetes

00:08:30,479 --> 00:08:36,320
so the who is who are you

00:08:34,479 --> 00:08:37,919
and you know kind of like the scene from

00:08:36,320 --> 00:08:40,479
the matrix where neo

00:08:37,919 --> 00:08:41,519
is going to visit the oracle and is

00:08:40,479 --> 00:08:44,000
waiting in

00:08:41,519 --> 00:08:44,800
uh her kitchen talking all the kids

00:08:44,000 --> 00:08:46,560
there and

00:08:44,800 --> 00:08:47,839
and the kids bending the spoon in front

00:08:46,560 --> 00:08:49,839
of him and she says

00:08:47,839 --> 00:08:51,600
you know the trick is to realize there

00:08:49,839 --> 00:08:53,200
is no spoon

00:08:51,600 --> 00:08:55,600
that's what you have to realize when it

00:08:53,200 --> 00:08:58,720
comes to identity in kubernetes

00:08:55,600 --> 00:09:01,120
there are no users there's no user

00:08:58,720 --> 00:09:03,120
object there's no group object

00:09:01,120 --> 00:09:04,560
everything has to be asserted when the

00:09:03,120 --> 00:09:05,440
api is called

00:09:04,560 --> 00:09:06,800
and that's one of the things that's

00:09:05,440 --> 00:09:09,120
interesting about kubernetes we think

00:09:06,800 --> 00:09:11,839
about kubernetes as this overall system

00:09:09,120 --> 00:09:12,880
but it's an api so you might be

00:09:11,839 --> 00:09:14,880
interacting

00:09:12,880 --> 00:09:16,399
with kubernetes with kube control you

00:09:14,880 --> 00:09:18,240
might be interacting with kubernetes

00:09:16,399 --> 00:09:21,440
with a dashboard

00:09:18,240 --> 00:09:24,000
or a local management system or a

00:09:21,440 --> 00:09:26,000
centralized management system you might

00:09:24,000 --> 00:09:29,760
be using kiali if you're

00:09:26,000 --> 00:09:31,680
using um a istio

00:09:29,760 --> 00:09:33,680
you know there are all these different

00:09:31,680 --> 00:09:35,279
platforms that you might be using to

00:09:33,680 --> 00:09:36,800
interact with kubernetes that you'll

00:09:35,279 --> 00:09:38,240
authenticate to and we're going to talk

00:09:36,800 --> 00:09:39,519
about how authentication for those

00:09:38,240 --> 00:09:41,200
should work

00:09:39,519 --> 00:09:42,560
but at the end of the day kubernetes is

00:09:41,200 --> 00:09:47,279
just an api

00:09:42,560 --> 00:09:50,720
so every single api request has to be

00:09:47,279 --> 00:09:54,720
has to be self-contained you can't have

00:09:50,720 --> 00:09:56,720
a api request that relies on another api

00:09:54,720 --> 00:09:58,640
request session you know it's not like

00:09:56,720 --> 00:10:00,240
when you go to a web browser you log in

00:09:58,640 --> 00:10:01,760
you've got a cookie that you pass back

00:10:00,240 --> 00:10:04,160
and forth that's your session

00:10:01,760 --> 00:10:07,519
it doesn't exist so every single

00:10:04,160 --> 00:10:11,279
authentication call has to include

00:10:07,519 --> 00:10:13,120
what you're able to do and who you are

00:10:11,279 --> 00:10:14,480
so in the kubernetes world that boils

00:10:13,120 --> 00:10:17,200
down to a couple of different

00:10:14,480 --> 00:10:20,079
uh options the first one we often run

00:10:17,200 --> 00:10:22,959
into is certificates we launch a cluster

00:10:20,079 --> 00:10:24,959
and there's that master config file it's

00:10:22,959 --> 00:10:28,720
got a certificate in it

00:10:24,959 --> 00:10:29,440
it's got um that master key that can do

00:10:28,720 --> 00:10:31,040
everything

00:10:29,440 --> 00:10:32,640
that's great for break glass in case of

00:10:31,040 --> 00:10:34,000
emergency but you don't want to use it

00:10:32,640 --> 00:10:35,279
day to day and we'll talk about the

00:10:34,000 --> 00:10:37,680
reasons why

00:10:35,279 --> 00:10:39,760
then you've got open id connect this is

00:10:37,680 --> 00:10:43,279
kind of your workhorse of identity

00:10:39,760 --> 00:10:44,160
in the kubernetes world this is the one

00:10:43,279 --> 00:10:47,440
you should be using

00:10:44,160 --> 00:10:49,600
quite frankly um and you know that

00:10:47,440 --> 00:10:51,920
may also include cloud or manage-based

00:10:49,600 --> 00:10:54,800
clusters we'll talk about those as well

00:10:51,920 --> 00:10:55,440
uh but at the end this is a protocol

00:10:54,800 --> 00:10:58,480
that has

00:10:55,440 --> 00:11:01,200
thousands of hours of peer review

00:10:58,480 --> 00:11:02,800
um and it lets you say who you are and

00:11:01,200 --> 00:11:05,279
what you can do

00:11:02,800 --> 00:11:06,720
uh in a very elegant way and in a way

00:11:05,279 --> 00:11:08,720
that is much safer than

00:11:06,720 --> 00:11:09,920
most of the other options you use

00:11:08,720 --> 00:11:11,360
impersonation

00:11:09,920 --> 00:11:13,360
which is an interesting technique we'll

00:11:11,360 --> 00:11:16,720
talk about that

00:11:13,360 --> 00:11:18,160
you could do custom authentication uh i

00:11:16,720 --> 00:11:21,519
would import you please

00:11:18,160 --> 00:11:23,279
never ever ever do this

00:11:21,519 --> 00:11:24,880
just just don't it's like writing your

00:11:23,279 --> 00:11:28,480
own encryption you're

00:11:24,880 --> 00:11:30,720
begging to have problems um you know the

00:11:28,480 --> 00:11:32,959
if you're a cloud vendor and you have a

00:11:30,720 --> 00:11:34,959
token system that you're using to secure

00:11:32,959 --> 00:11:37,200
all of your apis

00:11:34,959 --> 00:11:38,800
that's a different story but if you are

00:11:37,200 --> 00:11:40,000
deploying kubernetes into your

00:11:38,800 --> 00:11:43,279
environment

00:11:40,000 --> 00:11:46,000
chances are a custom implementation will

00:11:43,279 --> 00:11:48,320
be much much less secure than existing

00:11:46,000 --> 00:11:49,839
options

00:11:48,320 --> 00:11:51,519
and then we've got service accounts and

00:11:49,839 --> 00:11:53,360
we'll talk about those

00:11:51,519 --> 00:11:55,920
service accounts have a lot of issues

00:11:53,360 --> 00:11:57,279
around them especially when it comes to

00:11:55,920 --> 00:11:59,760
identifying users

00:11:57,279 --> 00:12:01,200
they're not meant to represent people

00:11:59,760 --> 00:12:03,760
they're meant to represent

00:12:01,200 --> 00:12:05,360
systems and people who use them to

00:12:03,760 --> 00:12:07,600
represent people

00:12:05,360 --> 00:12:09,279
are often asking for issues and we'll

00:12:07,600 --> 00:12:11,920
get into that as well

00:12:09,279 --> 00:12:12,560
so we've identified who you are the next

00:12:11,920 --> 00:12:15,760
question is

00:12:12,560 --> 00:12:19,120
what can you do in kubernetes

00:12:15,760 --> 00:12:21,760
that's typically done by our back um

00:12:19,120 --> 00:12:22,320
and so you combine your subject who you

00:12:21,760 --> 00:12:24,240
are

00:12:22,320 --> 00:12:26,160
a role which is really a list of

00:12:24,240 --> 00:12:27,040
permissions and what those permissions

00:12:26,160 --> 00:12:30,480
apply to

00:12:27,040 --> 00:12:32,320
and the name space uh where those push

00:12:30,480 --> 00:12:34,399
permissions apply and that gives you a

00:12:32,320 --> 00:12:35,839
role binding cluster role binding you

00:12:34,399 --> 00:12:38,399
take away the name space but it's the

00:12:35,839 --> 00:12:44,160
same idea

00:12:38,399 --> 00:12:44,160
you can reference groups inside of your

00:12:44,480 --> 00:12:48,480
inside of your role bindings but just

00:12:46,320 --> 00:12:49,680
like users they don't exist you have to

00:12:48,480 --> 00:12:53,839
assert them

00:12:49,680 --> 00:12:53,839
as part of your authentication process

00:12:56,000 --> 00:13:00,480
and then finally the why why should you

00:12:58,800 --> 00:13:02,480
have access to the system

00:13:00,480 --> 00:13:04,480
kubernetes doesn't give you that we'll

00:13:02,480 --> 00:13:06,160
talk a little bit about that

00:13:04,480 --> 00:13:07,920
but when especially you're talking about

00:13:06,160 --> 00:13:09,440
an enterprise deployment you will often

00:13:07,920 --> 00:13:11,360
be looking for hey

00:13:09,440 --> 00:13:13,120
why should somebody have access to this

00:13:11,360 --> 00:13:14,959
namespace or this cluster

00:13:13,120 --> 00:13:16,480
should they still have access that's an

00:13:14,959 --> 00:13:17,760
external workflow that's something that

00:13:16,480 --> 00:13:21,839
you're going to have to build

00:13:17,760 --> 00:13:21,839
uh on your own

00:13:21,920 --> 00:13:25,120
so we talked about host level

00:13:23,120 --> 00:13:26,639
authentication okay now we can talk

00:13:25,120 --> 00:13:29,120
about open id connect

00:13:26,639 --> 00:13:30,720
uh so like i said before open id connect

00:13:29,120 --> 00:13:32,800
it's got a heavy peer review

00:13:30,720 --> 00:13:34,480
it's a standard it's gone through that

00:13:32,800 --> 00:13:37,600
review process

00:13:34,480 --> 00:13:41,120
um it's a very complex standard

00:13:37,600 --> 00:13:42,959
that we'll get into and there are a lot

00:13:41,120 --> 00:13:45,199
of different rfcs please

00:13:42,959 --> 00:13:47,519
don't try and implement this yourself

00:13:45,199 --> 00:13:48,399
there are plenty of implementations out

00:13:47,519 --> 00:13:50,480
there

00:13:48,399 --> 00:13:52,240
we're going to be using open unison for

00:13:50,480 --> 00:13:52,639
our labs today that's my company's open

00:13:52,240 --> 00:13:55,199
source

00:13:52,639 --> 00:13:56,240
project but everything is applicable to

00:13:55,199 --> 00:14:00,240
key cloud dex

00:13:56,240 --> 00:14:01,839
wso2 you could use adfs

00:14:00,240 --> 00:14:04,560
you can connect directly with google or

00:14:01,839 --> 00:14:07,040
octa there are so many options

00:14:04,560 --> 00:14:08,720
please do not try and write this on your

00:14:07,040 --> 00:14:10,639
own

00:14:08,720 --> 00:14:12,720
uh and these next couple of bullets are

00:14:10,639 --> 00:14:14,560
really great especially when it comes to

00:14:12,720 --> 00:14:17,250
locking down your clusters

00:14:14,560 --> 00:14:18,480
short lived tokens um

00:14:17,250 --> 00:14:21,839
[Music]

00:14:18,480 --> 00:14:24,959
if anybody uh has uh

00:14:21,839 --> 00:14:28,880
uh attended the um

00:14:24,959 --> 00:14:32,000
uh kubecon virtual in europe uh that was

00:14:28,880 --> 00:14:33,920
um there was a great session uh by ian

00:14:32,000 --> 00:14:37,120
coldwater and brad giesemann

00:14:33,920 --> 00:14:38,720
um about uh advanced persistent threats

00:14:37,120 --> 00:14:39,360
inside of kubernetes and what those look

00:14:38,720 --> 00:14:42,240
like

00:14:39,360 --> 00:14:44,160
and you know amazing bit of work amazing

00:14:42,240 --> 00:14:47,040
bit of engineering they all started with

00:14:44,160 --> 00:14:48,800
start with cluster admin so if you think

00:14:47,040 --> 00:14:51,040
about

00:14:48,800 --> 00:14:52,240
the way that kubernetes works like i

00:14:51,040 --> 00:14:54,720
said it's an api

00:14:52,240 --> 00:14:55,279
you're making api requests you have to

00:14:54,720 --> 00:14:58,800
send

00:14:55,279 --> 00:15:00,720
a token over the wire that kubernetes

00:14:58,800 --> 00:15:04,399
knows how to interpret

00:15:00,720 --> 00:15:06,800
so if somebody gets a hold of that token

00:15:04,399 --> 00:15:07,600
they could abuse it so one of the best

00:15:06,800 --> 00:15:11,040
ways to

00:15:07,600 --> 00:15:11,600
minimize your blast radius if that token

00:15:11,040 --> 00:15:13,519
were to

00:15:11,600 --> 00:15:15,199
to be leaked how would that token be

00:15:13,519 --> 00:15:18,399
leaked um

00:15:15,199 --> 00:15:21,760
uh cni's uh there i think it was

00:15:18,399 --> 00:15:23,519
calico had a bug a couple of years ago

00:15:21,760 --> 00:15:25,920
where they were leaking tokens

00:15:23,519 --> 00:15:26,560
um just logging people sometimes will

00:15:25,920 --> 00:15:28,079
log it

00:15:26,560 --> 00:15:29,839
and not realize it as part of their

00:15:28,079 --> 00:15:32,079
debug logging or they're doing a dump

00:15:29,839 --> 00:15:34,800
environment variables

00:15:32,079 --> 00:15:36,560
so if you have that token really shortly

00:15:34,800 --> 00:15:37,440
and i'm talking like one to two minutes

00:15:36,560 --> 00:15:39,759
is my

00:15:37,440 --> 00:15:42,480
kind of where i try to be you have

00:15:39,759 --> 00:15:45,920
enough time to finish the operation

00:15:42,480 --> 00:15:48,399
but by the time somebody gets the token

00:15:45,920 --> 00:15:49,279
realizes what it is and tries to use it

00:15:48,399 --> 00:15:52,880
it's already

00:15:49,279 --> 00:15:52,880
expired and becomes useless

00:15:53,279 --> 00:15:56,880
and then multi-factor authentication uh

00:15:55,839 --> 00:15:58,560
again

00:15:56,880 --> 00:16:00,079
the easiest way to get somebody's

00:15:58,560 --> 00:16:03,759
password is to just

00:16:00,079 --> 00:16:06,480
ask um more polite you are

00:16:03,759 --> 00:16:07,279
more often they'll tell you uh and so

00:16:06,480 --> 00:16:09,600
the the

00:16:07,279 --> 00:16:11,360
easiest way one of the easiest ways to

00:16:09,600 --> 00:16:12,320
make sure that your system doesn't get

00:16:11,360 --> 00:16:15,680
abused

00:16:12,320 --> 00:16:17,839
is multi-factor authentication um

00:16:15,680 --> 00:16:18,880
it was uh it was google i think it was

00:16:17,839 --> 00:16:22,000
like two years ago

00:16:18,880 --> 00:16:23,920
published a paper on how uh

00:16:22,000 --> 00:16:25,600
they were able to cut down phishing

00:16:23,920 --> 00:16:28,079
attacks by like 98

00:16:25,600 --> 00:16:28,959
some ridiculous amount with software

00:16:28,079 --> 00:16:30,399
tokens

00:16:28,959 --> 00:16:33,279
and it was like a hundred percent with

00:16:30,399 --> 00:16:36,480
hardware talking ridiculous amount

00:16:33,279 --> 00:16:38,079
um so multi-factor and because open id

00:16:36,480 --> 00:16:40,240
connect works through a web browser

00:16:38,079 --> 00:16:42,160
you have an unlimited range of

00:16:40,240 --> 00:16:43,440
multi-factor options that you can work

00:16:42,160 --> 00:16:45,839
with

00:16:43,440 --> 00:16:47,519
uh and you know the great thing about

00:16:45,839 --> 00:16:48,480
this process it externalizes your

00:16:47,519 --> 00:16:50,480
authorization

00:16:48,480 --> 00:16:51,519
once we start talking about our back

00:16:50,480 --> 00:16:54,079
you'll realize

00:16:51,519 --> 00:16:54,800
uh pretty quickly that trying to load up

00:16:54,079 --> 00:16:57,680
a lot

00:16:54,800 --> 00:16:58,320
of principles directly into your

00:16:57,680 --> 00:17:00,399
policies

00:16:58,320 --> 00:17:01,360
gets messy very quickly whereas with

00:17:00,399 --> 00:17:03,199
open id connect

00:17:01,360 --> 00:17:04,559
you can just embed group memberships

00:17:03,199 --> 00:17:06,160
into that token

00:17:04,559 --> 00:17:08,079
and reference those group memberships so

00:17:06,160 --> 00:17:10,720
you're not rewriting

00:17:08,079 --> 00:17:12,799
or updating these policies on every

00:17:10,720 --> 00:17:14,640
request

00:17:12,799 --> 00:17:16,559
and then finally kate's never has your

00:17:14,640 --> 00:17:18,000
credentials

00:17:16,559 --> 00:17:19,520
especially if you're working in a

00:17:18,000 --> 00:17:21,199
regulated industry where you get the big

00:17:19,520 --> 00:17:22,640
giant spreadsheet of controls that you

00:17:21,199 --> 00:17:23,439
have to fill out every time you deploy

00:17:22,640 --> 00:17:24,559
something

00:17:23,439 --> 00:17:26,640
well guess what there's a bunch of

00:17:24,559 --> 00:17:28,880
controls that you can just ignore

00:17:26,640 --> 00:17:29,919
because the password never goes through

00:17:28,880 --> 00:17:31,840
case

00:17:29,919 --> 00:17:33,760
kubernetes never knows what your

00:17:31,840 --> 00:17:35,360
credentials are it's just validating

00:17:33,760 --> 00:17:37,600
that you have been authenticated

00:17:35,360 --> 00:17:40,880
that presents a lot of value from an

00:17:37,600 --> 00:17:40,880
implementation standpoint

00:17:41,440 --> 00:17:44,960
so are the downsides right if this is so

00:17:43,440 --> 00:17:47,360
great why doesn't everybody want to do

00:17:44,960 --> 00:17:49,760
it

00:17:47,360 --> 00:17:51,760
so first it is complex we're going to

00:17:49,760 --> 00:17:56,480
get into the individual steps

00:17:51,760 --> 00:17:58,240
um and uh it it it can be intimidating

00:17:56,480 --> 00:18:00,080
uh it took me a while to figure it out

00:17:58,240 --> 00:18:00,720
and i will not lie there are times where

00:18:00,080 --> 00:18:04,000
i find

00:18:00,720 --> 00:18:06,240
new aspects of the spec um

00:18:04,000 --> 00:18:08,160
i think the uh one of the first ones

00:18:06,240 --> 00:18:10,559
that i saw or i saw a graphic

00:18:08,160 --> 00:18:11,600
uh a couple of months ago where openid

00:18:10,559 --> 00:18:14,880
connect

00:18:11,600 --> 00:18:18,000
can be is composed of like 40 some odd

00:18:14,880 --> 00:18:18,960
specs you know different rfcs and

00:18:18,000 --> 00:18:22,240
whatnot

00:18:18,960 --> 00:18:24,240
um so it can be very intimidating uh

00:18:22,240 --> 00:18:27,200
and and it's okay to feel intimidated by

00:18:24,240 --> 00:18:29,200
it um

00:18:27,200 --> 00:18:30,240
excuse me to do it correctly you need a

00:18:29,200 --> 00:18:32,480
web browser

00:18:30,240 --> 00:18:33,600
there are profiles in open id connect

00:18:32,480 --> 00:18:35,679
and there are plugins

00:18:33,600 --> 00:18:38,400
where you can do just coupe control

00:18:35,679 --> 00:18:41,760
login it asks for username password

00:18:38,400 --> 00:18:44,080
and you're able to use a token uh

00:18:41,760 --> 00:18:45,200
those were put there for scenarios where

00:18:44,080 --> 00:18:49,039
you don't

00:18:45,200 --> 00:18:52,080
have a browser uh they're actually or

00:18:49,039 --> 00:18:54,320
you can't handle redirects properly um

00:18:52,080 --> 00:18:55,840
so it was originally designed for like

00:18:54,320 --> 00:18:57,280
you've written a web app that uses

00:18:55,840 --> 00:18:58,960
openid connect

00:18:57,280 --> 00:19:01,039
like a single page application that

00:18:58,960 --> 00:19:02,799
can't handle or redirect

00:19:01,039 --> 00:19:04,480
so it's just going to query the identity

00:19:02,799 --> 00:19:07,440
provider with the username password and

00:19:04,480 --> 00:19:09,679
get back a token

00:19:07,440 --> 00:19:11,520
that doesn't really exist anymore web

00:19:09,679 --> 00:19:13,840
frameworks know how to handle that

00:19:11,520 --> 00:19:15,679
in fact the next version of oauth 2

00:19:13,840 --> 00:19:17,440
which is the primary spect open id

00:19:15,679 --> 00:19:19,280
connect is built off of

00:19:17,440 --> 00:19:21,520
is deprecating i'm pretty sure it's

00:19:19,280 --> 00:19:22,960
actually deprecating that profile

00:19:21,520 --> 00:19:25,120
in order to do it correctly you need to

00:19:22,960 --> 00:19:27,360
use a web browser now this can

00:19:25,120 --> 00:19:28,160
introduce some other challenges because

00:19:27,360 --> 00:19:30,559
like i said

00:19:28,160 --> 00:19:32,240
kubernetes is an api uh so if you're

00:19:30,559 --> 00:19:33,600
running coupe control locally how do you

00:19:32,240 --> 00:19:36,559
log into a browser

00:19:33,600 --> 00:19:38,480
and then transfer that context into kube

00:19:36,559 --> 00:19:40,799
control we'll talk about that

00:19:38,480 --> 00:19:43,280
there are numerous patterns for handling

00:19:40,799 --> 00:19:44,799
that scenario

00:19:43,280 --> 00:19:47,280
and then finally bearer tokens are

00:19:44,799 --> 00:19:49,200
incredibly easy to abuse so what do i

00:19:47,280 --> 00:19:52,160
mean by bearer tokens

00:19:49,200 --> 00:19:53,440
a bearer token is like a ticket to get

00:19:52,160 --> 00:19:56,720
into a ball game

00:19:53,440 --> 00:19:59,919
or a you know a match or whatever your

00:19:56,720 --> 00:20:00,960
your favorite sport is um it's piece of

00:19:59,919 --> 00:20:03,840
paper

00:20:00,960 --> 00:20:04,799
you use it to get in if somebody else

00:20:03,840 --> 00:20:07,039
you know

00:20:04,799 --> 00:20:08,080
tries to use it before you and then you

00:20:07,039 --> 00:20:09,919
try to use it

00:20:08,080 --> 00:20:11,760
we scan the barcode you're all this

00:20:09,919 --> 00:20:14,960
ticket's already been used

00:20:11,760 --> 00:20:17,520
um bear tokens are that easy to abuse

00:20:14,960 --> 00:20:20,720
which is why it's so important to have

00:20:17,520 --> 00:20:24,080
a short lived time span

00:20:20,720 --> 00:20:25,520
there was a spec a couple years ago two

00:20:24,080 --> 00:20:27,360
or three years ago maybe

00:20:25,520 --> 00:20:29,360
um there was an attempt to build in

00:20:27,360 --> 00:20:32,320
what's called channel binding

00:20:29,360 --> 00:20:33,120
where it was this idea that the token

00:20:32,320 --> 00:20:36,320
was

00:20:33,120 --> 00:20:38,080
was tied directly to the tls connection

00:20:36,320 --> 00:20:39,679
that was a part of

00:20:38,080 --> 00:20:41,919
microsoft does this for instance in the

00:20:39,679 --> 00:20:43,679
kerberos world now

00:20:41,919 --> 00:20:45,280
um but if you think about it like in the

00:20:43,679 --> 00:20:47,200
cloud native world this really wouldn't

00:20:45,280 --> 00:20:50,240
work because you could have like

00:20:47,200 --> 00:20:53,760
12 different proxies right i mean

00:20:50,240 --> 00:20:56,159
you have your your external uh uh

00:20:53,760 --> 00:20:57,520
uh you know you have your offloader and

00:20:56,159 --> 00:21:00,799
then you have

00:20:57,520 --> 00:21:02,720
an ingress controller and then you have

00:21:00,799 --> 00:21:04,000
you might have an mtls controller if

00:21:02,720 --> 00:21:05,520
you're going that route so

00:21:04,000 --> 00:21:07,600
that kind of channel buying never really

00:21:05,520 --> 00:21:10,080
works so it's really really important

00:21:07,600 --> 00:21:11,200
short lived tokens that's a really

00:21:10,080 --> 00:21:14,480
important aspect

00:21:11,200 --> 00:21:17,360
to keeping openid connect secure

00:21:14,480 --> 00:21:17,360
nothing in q a

00:21:18,000 --> 00:21:22,320
so let's look at how openid connect

00:21:20,480 --> 00:21:25,760
works so this diagram is taken right off

00:21:22,320 --> 00:21:28,080
of the kubernetes authentication website

00:21:25,760 --> 00:21:28,960
and uh we'll be going through this

00:21:28,080 --> 00:21:31,520
process so

00:21:28,960 --> 00:21:34,320
so if the diagram you have a hard time

00:21:31,520 --> 00:21:35,919
visualizing it totally understand

00:21:34,320 --> 00:21:37,600
you're going to log into an identity

00:21:35,919 --> 00:21:39,919
provider so this is the thing that's

00:21:37,600 --> 00:21:41,200
going to authenticate you

00:21:39,919 --> 00:21:43,039
in our instance we're going to be using

00:21:41,200 --> 00:21:47,520
open unison but this dex

00:21:43,039 --> 00:21:50,159
key cloak octa adfs whatever

00:21:47,520 --> 00:21:52,240
you're going to authenticate and you get

00:21:50,159 --> 00:21:55,200
three pieces of information back

00:21:52,240 --> 00:21:56,960
you get an access token an id token

00:21:55,200 --> 00:21:59,200
which identifies who you are

00:21:56,960 --> 00:22:01,520
and a refresh token which is what you

00:21:59,200 --> 00:22:03,280
can use to get a new set of access

00:22:01,520 --> 00:22:05,039
tokens id tokens

00:22:03,280 --> 00:22:06,880
now kubernetes doesn't use the access

00:22:05,039 --> 00:22:08,880
token

00:22:06,880 --> 00:22:10,640
kind of throw that one away what really

00:22:08,880 --> 00:22:13,520
focuses on is the id

00:22:10,640 --> 00:22:14,159
token this is what's called a json web

00:22:13,520 --> 00:22:19,039
token

00:22:14,159 --> 00:22:21,039
bit of json that just says who you are

00:22:19,039 --> 00:22:23,280
when the token is good to you know not

00:22:21,039 --> 00:22:26,400
before and not after

00:22:23,280 --> 00:22:26,880
what groups you might be a part of and

00:22:26,400 --> 00:22:28,799
when

00:22:26,880 --> 00:22:31,440
and is digitally signed with the

00:22:28,799 --> 00:22:34,480
certificate from the identity provider

00:22:31,440 --> 00:22:35,840
so you take that token and

00:22:34,480 --> 00:22:38,000
you put into your coupe control

00:22:35,840 --> 00:22:40,000
configuration

00:22:38,000 --> 00:22:41,440
coupe control you know coupe control get

00:22:40,000 --> 00:22:42,640
pods

00:22:41,440 --> 00:22:44,320
what's going to happen is it's going to

00:22:42,640 --> 00:22:45,840
take that bear cube control is going to

00:22:44,320 --> 00:22:47,679
take that token

00:22:45,840 --> 00:22:49,600
shove it into a header the authorization

00:22:47,679 --> 00:22:51,760
header called bearer

00:22:49,600 --> 00:22:53,679
it's going to send it to the api server

00:22:51,760 --> 00:22:55,440
at which point the api server

00:22:53,679 --> 00:22:57,520
is first going to see is the signature

00:22:55,440 --> 00:23:01,600
valid and has it expired

00:22:57,520 --> 00:23:04,240
so let's make sure that it's a valid

00:23:01,600 --> 00:23:06,320
it's a valid token it's going to do a

00:23:04,240 --> 00:23:08,960
couple of other checks to make sure

00:23:06,320 --> 00:23:10,000
that the token is formatted in a way

00:23:08,960 --> 00:23:13,840
that's expected

00:23:10,000 --> 00:23:15,840
so um yeah making sure that the client

00:23:13,840 --> 00:23:18,880
id is correct things of that nature

00:23:15,840 --> 00:23:21,200
uh the issuer is correct as well uh

00:23:18,880 --> 00:23:23,600
and then it's gonna do an authorization

00:23:21,200 --> 00:23:24,960
check so we'll talk about authorization

00:23:23,600 --> 00:23:25,840
but it's going to take the information

00:23:24,960 --> 00:23:28,159
from that token

00:23:25,840 --> 00:23:29,520
hand it off to the authorization engine

00:23:28,159 --> 00:23:31,679
so it can run through

00:23:29,520 --> 00:23:33,360
our back policies i'm going to do

00:23:31,679 --> 00:23:35,440
whatever you asked it to do

00:23:33,360 --> 00:23:37,360
return a result and the result goes back

00:23:35,440 --> 00:23:40,080
to the user so this all happens in the

00:23:37,360 --> 00:23:40,080
blink of an eye

00:23:40,159 --> 00:23:43,520
now what becomes interesting is if that

00:23:42,960 --> 00:23:48,000
session

00:23:43,520 --> 00:23:50,720
if that token has expired

00:23:48,000 --> 00:23:52,480
then what coupe control will do is say

00:23:50,720 --> 00:23:54,080
okay this token has respired

00:23:52,480 --> 00:23:55,760
so i'm going to go back to the identity

00:23:54,080 --> 00:23:56,960
provider with my refresh token

00:23:55,760 --> 00:23:59,600
now here's where the security of the

00:23:56,960 --> 00:24:01,200
refresh token comes in it's a one-time

00:23:59,600 --> 00:24:03,679
use only token

00:24:01,200 --> 00:24:05,039
once you've used it it is no longer

00:24:03,679 --> 00:24:06,880
valid

00:24:05,039 --> 00:24:08,080
so that refresh token goes back to the

00:24:06,880 --> 00:24:09,919
identity provider

00:24:08,080 --> 00:24:11,279
identity provider gives you back a new

00:24:09,919 --> 00:24:14,000
id token

00:24:11,279 --> 00:24:16,320
and a new refresh token so somebody can

00:24:14,000 --> 00:24:17,919
get access to your id token

00:24:16,320 --> 00:24:20,240
they can continue to use it until it

00:24:17,919 --> 00:24:22,320
expires somebody gets access to your

00:24:20,240 --> 00:24:25,520
fresh token you've already used it

00:24:22,320 --> 00:24:25,520
it no longer works

00:24:25,760 --> 00:24:29,200
the other important aspect of the

00:24:26,960 --> 00:24:29,520
refresh token is it only goes between

00:24:29,200 --> 00:24:32,000
you

00:24:29,520 --> 00:24:33,919
and the identity provider it never goes

00:24:32,000 --> 00:24:37,520
to your kubernetes infrastructure

00:24:33,919 --> 00:24:39,279
so somebody weeks it can't leak it

00:24:37,520 --> 00:24:40,559
right it's like a password they can't

00:24:39,279 --> 00:24:41,279
link it from your kubernetes

00:24:40,559 --> 00:24:46,320
infrastructure

00:24:41,279 --> 00:24:49,440
because they never get it

00:24:46,320 --> 00:24:52,559
so best practices again short

00:24:49,440 --> 00:24:54,640
lived tokens um

00:24:52,559 --> 00:24:55,840
typically i find that refresh tokens are

00:24:54,640 --> 00:24:59,360
going to be scoped

00:24:55,840 --> 00:25:00,000
to your session idle timeout so if we're

00:24:59,360 --> 00:25:01,360
talking about

00:25:00,000 --> 00:25:03,440
you know most corporate enterprise

00:25:01,360 --> 00:25:04,480
policies are anywhere between 15 to 20

00:25:03,440 --> 00:25:06,159
minutes

00:25:04,480 --> 00:25:07,600
um you know if you've got that

00:25:06,159 --> 00:25:09,360
short-lived tokens

00:25:07,600 --> 00:25:12,000
you know those those refresh tokens can

00:25:09,360 --> 00:25:13,360
be constantly refreshing

00:25:12,000 --> 00:25:15,200
could both users and groups in the

00:25:13,360 --> 00:25:18,240
claims now when you look

00:25:15,200 --> 00:25:21,360
at how you identify users

00:25:18,240 --> 00:25:21,360
there is a

00:25:23,760 --> 00:25:26,880
kind of a instinct to go with email

00:25:26,159 --> 00:25:30,080
address

00:25:26,880 --> 00:25:31,039
please don't email addresses are based

00:25:30,080 --> 00:25:34,559
on names

00:25:31,039 --> 00:25:37,200
names can change yes it can become a

00:25:34,559 --> 00:25:40,880
little annoying trying to look up

00:25:37,200 --> 00:25:44,400
what uuid associates to a user

00:25:40,880 --> 00:25:47,679
but by leveraging um

00:25:44,400 --> 00:25:51,360
by leveraging uh um a

00:25:47,679 --> 00:25:54,000
uh item or not item potent um

00:25:51,360 --> 00:25:54,799
a non-changing something that's not

00:25:54,000 --> 00:25:56,720
based on

00:25:54,799 --> 00:25:59,039
anything in particular truly random i'm

00:25:56,720 --> 00:26:02,880
a big fan of type 4 uuids

00:25:59,039 --> 00:26:04,880
um you now have a cluster that

00:26:02,880 --> 00:26:06,880
if somebody does change their name and

00:26:04,880 --> 00:26:08,559
look there are several situations in our

00:26:06,880 --> 00:26:10,559
lives where names might change

00:26:08,559 --> 00:26:12,080
we might not like our name right you

00:26:10,559 --> 00:26:13,919
know people get married they change the

00:26:12,080 --> 00:26:14,720
last names it might change their email

00:26:13,919 --> 00:26:17,440
address

00:26:14,720 --> 00:26:18,799
uh there are all sorts of scenarios in

00:26:17,440 --> 00:26:19,760
this world where somebody might change

00:26:18,799 --> 00:26:21,919
their name

00:26:19,760 --> 00:26:23,120
um you don't want to then have to turn

00:26:21,919 --> 00:26:25,279
around and change all your

00:26:23,120 --> 00:26:27,919
authorizations because of that so

00:26:25,279 --> 00:26:28,960
yeah please don't use emails as your

00:26:27,919 --> 00:26:32,000
your identifier

00:26:28,960 --> 00:26:32,000
it's an anti-pattern

00:26:34,080 --> 00:26:38,960
so uh as much as everybody loves hearing

00:26:36,799 --> 00:26:39,360
me talk why don't we start having some

00:26:38,960 --> 00:26:42,320
fun

00:26:39,360 --> 00:26:43,840
and actually get going with the uh uh

00:26:42,320 --> 00:26:45,760
get going with the actual

00:26:43,840 --> 00:26:46,880
lab so what we're going to do is i'm

00:26:45,760 --> 00:26:51,200
going to exit

00:26:46,880 --> 00:26:53,760
uh presentation mode um and then

00:26:51,200 --> 00:26:54,400
we will go ahead and get started i'm

00:26:53,760 --> 00:26:58,000
gonna do

00:26:54,400 --> 00:27:01,760
the the um

00:26:58,000 --> 00:27:05,840
the the lab with everybody uh usually

00:27:01,760 --> 00:27:06,400
this lab takes a good 15 to 20 minutes

00:27:05,840 --> 00:27:08,320
um

00:27:06,400 --> 00:27:10,480
depending on how comfortable people are

00:27:08,320 --> 00:27:13,520
with copy and paste in a terminal window

00:27:10,480 --> 00:27:14,480
uh but um i'm gonna go very very slowly

00:27:13,520 --> 00:27:17,679
so people can follow

00:27:14,480 --> 00:27:18,080
along and then i will be keeping an eye

00:27:17,679 --> 00:27:21,760
open

00:27:18,080 --> 00:27:25,520
on q a

00:27:21,760 --> 00:27:29,679
all right and

00:27:25,520 --> 00:27:31,200
uh yes uh actually i will shoot out a

00:27:29,679 --> 00:27:33,279
link

00:27:31,200 --> 00:27:34,000
this is actually all open source i'm

00:27:33,279 --> 00:27:35,840
answering the question is the

00:27:34,000 --> 00:27:39,039
possibility i copied the presentation

00:27:35,840 --> 00:27:41,360
absolutely it's on slideshare um

00:27:39,039 --> 00:27:43,200
and then what i'll also be doing is uh

00:27:41,360 --> 00:27:45,760
sending out a link at the end

00:27:43,200 --> 00:27:47,200
um to the source material this is all

00:27:45,760 --> 00:27:48,000
open source in our github so if you

00:27:47,200 --> 00:27:50,240
wanted to

00:27:48,000 --> 00:27:51,760
rebuild this cluster on your own later

00:27:50,240 --> 00:27:54,000
you're welcome to do so

00:27:51,760 --> 00:27:55,679
all right so let's go ahead and pull

00:27:54,000 --> 00:27:59,279
this up

00:27:55,679 --> 00:27:59,679
um and so lab one we're gonna go ahead

00:27:59,279 --> 00:28:03,039
and

00:27:59,679 --> 00:28:05,360
start our start

00:28:03,039 --> 00:28:05,360
our

00:28:08,799 --> 00:28:11,840
where's firefox there we go i'm going to

00:28:10,880 --> 00:28:14,840
make this a little bit

00:28:11,840 --> 00:28:17,840
smaller so that way we can do a side by

00:28:14,840 --> 00:28:17,840
side

00:28:20,080 --> 00:28:24,640
so the first thing we're going to do is

00:28:21,760 --> 00:28:27,679
we're going to log into open unison

00:28:24,640 --> 00:28:29,679
now my ip address and i hope

00:28:27,679 --> 00:28:31,360
everybody's taking an ip i'm just kind

00:28:29,679 --> 00:28:32,640
of going through here and scanning it

00:28:31,360 --> 00:28:36,559
real quick

00:28:32,640 --> 00:28:40,000
anybody who came in a little bit late

00:28:36,559 --> 00:28:40,799
if you go to the bitly link at the very

00:28:40,000 --> 00:28:42,720
beginning of this

00:28:40,799 --> 00:28:44,799
chat there will be a link to this

00:28:42,720 --> 00:28:48,159
spreadsheet this spreadsheet

00:28:44,799 --> 00:28:50,559
has a list of all of the vms

00:28:48,159 --> 00:28:52,159
that have been provisioned for this

00:28:50,559 --> 00:28:54,080
workshop

00:28:52,159 --> 00:28:55,679
pick any vm that doesn't have a little

00:28:54,080 --> 00:28:58,799
something in the taken

00:28:55,679 --> 00:29:01,600
column um

00:28:58,799 --> 00:29:04,240
and that'll be your vm so uh that'll be

00:29:01,600 --> 00:29:07,360
your vm for the rest of the morning

00:29:04,240 --> 00:29:08,480
um so once you've picked your ip the

00:29:07,360 --> 00:29:09,919
first thing we're going to do is log

00:29:08,480 --> 00:29:12,720
into open unison

00:29:09,919 --> 00:29:13,840
so one of the things you know we've all

00:29:12,720 --> 00:29:18,720
seen the memes it's a

00:29:13,840 --> 00:29:18,720
it's not dns but it's you know dns

00:29:19,679 --> 00:29:26,880
um so i love for these types of uh

00:29:23,600 --> 00:29:28,399
um workshops and whatnot a service

00:29:26,880 --> 00:29:31,039
called nip.io

00:29:28,399 --> 00:29:32,640
uh it lets you send any ip address to it

00:29:31,039 --> 00:29:34,480
and it'll come back with a host name

00:29:32,640 --> 00:29:36,320
so instead having to you know

00:29:34,480 --> 00:29:36,880
pre-provision a bunch of hosts and

00:29:36,320 --> 00:29:39,600
whatnot

00:29:36,880 --> 00:29:40,399
this is so much easier um so i'm going

00:29:39,600 --> 00:29:43,840
to go ahead

00:29:40,399 --> 00:29:47,279
and do this with my

00:29:43,840 --> 00:29:47,279
ip so this one's mine

00:29:47,840 --> 00:29:51,679
and again everybody good housekeeping

00:29:53,039 --> 00:30:02,399
so i'm gonna log into here

00:29:58,080 --> 00:30:02,399
nope that's definitely not right

00:30:06,000 --> 00:30:13,120
there we go dot nip dot io

00:30:09,200 --> 00:30:13,120
so you can see here what i've done

00:30:13,919 --> 00:30:19,279
is i've replaced this ip address with my

00:30:17,039 --> 00:30:23,840
ip address

00:30:19,279 --> 00:30:23,840
so let's go ahead and log in

00:30:25,200 --> 00:30:31,760
move this all right i'm going to make

00:30:29,039 --> 00:30:34,000
this bigger

00:30:31,760 --> 00:30:37,840
so i'm going to log in with our user

00:30:34,000 --> 00:30:37,840
kate's lab

00:30:40,000 --> 00:30:43,840
and dollar sign start one two three

00:30:44,320 --> 00:30:48,559
so this is what you should see i'm

00:30:46,799 --> 00:30:50,720
actually gonna close this out for now

00:30:48,559 --> 00:30:53,760
i'll keep an eye on the q a

00:30:50,720 --> 00:30:55,440
um so this is what you should see this

00:30:53,760 --> 00:30:58,159
is the open unison access portal for

00:30:55,440 --> 00:30:58,159
kubernetes

00:31:00,159 --> 00:31:03,679
uh now this also includes our

00:31:02,480 --> 00:31:05,200
provisioning

00:31:03,679 --> 00:31:06,559
uh tools to be able to create new name

00:31:05,200 --> 00:31:08,640
spaces we'll talk about that a little

00:31:06,559 --> 00:31:10,240
bit later when we get into our back

00:31:08,640 --> 00:31:11,760
um you click on your name you should see

00:31:10,240 --> 00:31:15,279
that your role is user

00:31:11,760 --> 00:31:17,840
a little bit of info about you uh but

00:31:15,279 --> 00:31:18,640
there's not a lot here so first thing we

00:31:17,840 --> 00:31:20,880
need to do

00:31:18,640 --> 00:31:22,480
is make ourselves administer we've got

00:31:20,880 --> 00:31:24,080
to bootstrap ourselves

00:31:22,480 --> 00:31:26,080
so you could go through and request

00:31:24,080 --> 00:31:28,799
access to a lot of things

00:31:26,080 --> 00:31:30,720
but we are going to do this very simple

00:31:28,799 --> 00:31:33,919
so we're i'm jumping now down to

00:31:30,720 --> 00:31:36,880
step five this is going to require you

00:31:33,919 --> 00:31:36,880
being logged in

00:31:37,200 --> 00:31:39,840
to your

00:31:40,399 --> 00:31:48,880
uh to to your um

00:31:46,399 --> 00:31:50,159
server so i'm going to go ahead and just

00:31:48,880 --> 00:31:52,559
copy and paste this

00:31:50,159 --> 00:31:54,240
all this is doing is instead of us going

00:31:52,559 --> 00:31:57,519
through the process

00:31:54,240 --> 00:31:58,320
of going through an access request and

00:31:57,519 --> 00:31:59,760
approval

00:31:58,320 --> 00:32:01,279
we're just bootstrapping and saying you

00:31:59,760 --> 00:32:04,000
know what i'm going to make myself an

00:32:01,279 --> 00:32:04,000
administrator

00:32:06,720 --> 00:32:11,679
so once you've run those two commands

00:32:10,480 --> 00:32:15,840
we're going to come back here we're

00:32:11,679 --> 00:32:15,840
going to log out

00:32:16,880 --> 00:32:20,080
and we're going to log back in

00:32:21,200 --> 00:32:24,640
so same user this time

00:32:25,039 --> 00:32:30,480
of course if i knew how to type this

00:32:26,960 --> 00:32:30,480
would make this so much easier

00:32:36,399 --> 00:32:44,159
nope do

00:32:39,760 --> 00:32:44,159
this right kate's lab

00:32:44,640 --> 00:32:49,039
so you know the security is working

00:32:46,080 --> 00:32:52,159
right there we go

00:32:49,039 --> 00:32:56,080
all right never save not now okay

00:32:52,159 --> 00:32:57,440
so once you run step five and six now

00:32:56,080 --> 00:32:59,440
we're on step seven you log

00:32:57,440 --> 00:33:01,279
in you will see that we got a bunch more

00:32:59,440 --> 00:33:03,120
buttons to push

00:33:01,279 --> 00:33:04,000
and click on your email address up here

00:33:03,120 --> 00:33:05,279
you'll see that you're now an

00:33:04,000 --> 00:33:08,480
administrator

00:33:05,279 --> 00:33:11,519
and a cluster administrator

00:33:08,480 --> 00:33:12,320
so we're going to ignore most of this

00:33:11,519 --> 00:33:13,279
stuff

00:33:12,320 --> 00:33:15,840
we're going to start here with the

00:33:13,279 --> 00:33:18,399
kubernetes dashboard that's the easiest

00:33:15,840 --> 00:33:19,760
way to visualize what you're seeing

00:33:18,399 --> 00:33:21,840
and you'll see there's not a lot to see

00:33:19,760 --> 00:33:25,120
here you go up here

00:33:21,840 --> 00:33:28,720
make this a little bit bigger

00:33:25,120 --> 00:33:30,399
you'll see just this angry unauthorized

00:33:28,720 --> 00:33:31,919
because what's happening is you're

00:33:30,399 --> 00:33:35,279
logged into open unison

00:33:31,919 --> 00:33:36,880
open unison is a reverse proxy that is

00:33:35,279 --> 00:33:39,919
taking your token

00:33:36,880 --> 00:33:42,399
and passing it down to the api server so

00:33:39,919 --> 00:33:45,200
every call that the dashboard makes down

00:33:42,399 --> 00:33:47,039
to kubernetes is done as you

00:33:45,200 --> 00:33:48,640
this means that the dashboard and we'll

00:33:47,039 --> 00:33:50,840
talk about this in a little bit

00:33:48,640 --> 00:33:53,600
but the dashboard itself actually has no

00:33:50,840 --> 00:33:58,000
permissions it can't do anything

00:33:53,600 --> 00:34:02,080
um so when people will uh often say

00:33:58,000 --> 00:34:06,080
um you know uh the the dashboard

00:34:02,080 --> 00:34:08,639
is insecure what they really mean

00:34:06,080 --> 00:34:09,359
isn't that the dashboard isn't secure

00:34:08,639 --> 00:34:11,919
it's that

00:34:09,359 --> 00:34:13,280
they haven't deployed it securely uh

00:34:11,919 --> 00:34:15,919
they've they've deployed it with

00:34:13,280 --> 00:34:20,079
credentials they've deployed it with

00:34:15,919 --> 00:34:22,320
um something else so uh

00:34:20,079 --> 00:34:23,679
you know it's it's really important to

00:34:22,320 --> 00:34:26,000
understand how you

00:34:23,679 --> 00:34:27,679
correctly deploy the dashboard so as you

00:34:26,000 --> 00:34:30,320
can see it's unauthorized

00:34:27,679 --> 00:34:31,760
um that is because we need to enable ssl

00:34:30,320 --> 00:34:34,879
we need to tell

00:34:31,760 --> 00:34:35,839
kubernetes hey trust this open unison

00:34:34,879 --> 00:34:39,440
instance

00:34:35,839 --> 00:34:42,800
to be able to say who the user is

00:34:39,440 --> 00:34:42,800
so we're going to do that now

00:34:42,879 --> 00:34:46,399
and again if you have any questions

00:34:45,040 --> 00:34:50,000
please drop it in the q

00:34:46,399 --> 00:34:50,000
a section i get a little alert

00:34:50,560 --> 00:34:54,399
that something's been dropped in there

00:34:55,119 --> 00:34:59,920
so next up let's enable sso so let's ssh

00:34:57,839 --> 00:35:03,200
into our server

00:34:59,920 --> 00:35:05,040
we did that now we need to get our api

00:35:03,200 --> 00:35:06,640
configuration flags

00:35:05,040 --> 00:35:08,560
so this step is a little specific to

00:35:06,640 --> 00:35:11,119
open units and we create the api

00:35:08,560 --> 00:35:16,880
configuration flags for you

00:35:11,119 --> 00:35:18,160
when um when you install the system

00:35:16,880 --> 00:35:19,040
into your cluster and we'll talk a

00:35:18,160 --> 00:35:20,960
little bit about what these

00:35:19,040 --> 00:35:22,800
configuration flags here mean

00:35:20,960 --> 00:35:24,560
uh i'm actually going to bring it to the

00:35:22,800 --> 00:35:27,680
top oops

00:35:24,560 --> 00:35:29,280
make it a little easier um but this is

00:35:27,680 --> 00:35:31,440
going to be specific to each

00:35:29,280 --> 00:35:32,880
identity provider so dex is different

00:35:31,440 --> 00:35:34,240
than key cloak

00:35:32,880 --> 00:35:38,000
is different than open unison is

00:35:34,240 --> 00:35:38,000
different than wso2 etc

00:35:38,240 --> 00:35:43,359
so check with your your implementation

00:35:40,720 --> 00:35:46,400
on how to get this information

00:35:43,359 --> 00:35:51,200
so the first one here is oidc issuer

00:35:46,400 --> 00:35:51,200
url so this is

00:35:51,760 --> 00:35:57,280
where our jwts come from

00:35:55,680 --> 00:35:59,599
and what's important about this

00:35:57,280 --> 00:36:02,400
particular url

00:35:59,599 --> 00:36:04,000
is that it has to have what's called a

00:36:02,400 --> 00:36:08,720
discovery url

00:36:04,000 --> 00:36:08,720
available so if i go ahead and run

00:36:10,320 --> 00:36:16,960
see if i do this by memory dot

00:36:13,599 --> 00:36:21,119
well known open

00:36:16,960 --> 00:36:24,720
id configuration

00:36:21,119 --> 00:36:25,520
yep so that worked so this is what's

00:36:24,720 --> 00:36:28,880
called

00:36:25,520 --> 00:36:31,359
the discovery url here

00:36:28,880 --> 00:36:32,640
and it tells kubernetes everything it

00:36:31,359 --> 00:36:36,400
needs to know to

00:36:32,640 --> 00:36:37,760
validate your token it has the issuer

00:36:36,400 --> 00:36:39,680
but obviously that's

00:36:37,760 --> 00:36:41,280
coming out of the issuer url has the

00:36:39,680 --> 00:36:44,400
authorization endpoint

00:36:41,280 --> 00:36:46,400
which is where kubernetes um or actually

00:36:44,400 --> 00:36:49,440
really coop control is going to go

00:36:46,400 --> 00:36:51,200
to get tokens um

00:36:49,440 --> 00:36:53,280
and where you as a user will go to get

00:36:51,200 --> 00:36:54,000
tokens it's got the token endpoint which

00:36:53,280 --> 00:36:56,560
is part of the

00:36:54,000 --> 00:36:58,400
transference user info so some

00:36:56,560 --> 00:36:59,760
applications want to know more about you

00:36:58,400 --> 00:37:00,720
they can't read the information out of

00:36:59,760 --> 00:37:02,640
the token

00:37:00,720 --> 00:37:04,400
so this is a web services call they can

00:37:02,640 --> 00:37:06,400
use and then

00:37:04,400 --> 00:37:08,079
it tells you where all the certificates

00:37:06,400 --> 00:37:09,599
are although

00:37:08,079 --> 00:37:11,760
in actuality what's interesting about

00:37:09,599 --> 00:37:12,560
openid connect is there are no

00:37:11,760 --> 00:37:16,000
certificates

00:37:12,560 --> 00:37:18,800
everything's basic public key

00:37:16,000 --> 00:37:20,880
private key so certificates in fact

00:37:18,800 --> 00:37:22,880
never expire

00:37:20,880 --> 00:37:25,760
and then you have some information about

00:37:22,880 --> 00:37:25,760
what's supported

00:37:26,240 --> 00:37:30,560
the next one is the client id kubernetes

00:37:28,560 --> 00:37:33,359
this is just an arbitrary id that

00:37:30,560 --> 00:37:36,960
identity providers will use to identify

00:37:33,359 --> 00:37:41,040
a relying party relying party in

00:37:36,960 --> 00:37:43,760
sso terms is whoever is relying upon

00:37:41,040 --> 00:37:45,359
the identity information uh in the older

00:37:43,760 --> 00:37:46,480
saml days this used to be called a

00:37:45,359 --> 00:37:48,720
service provider

00:37:46,480 --> 00:37:51,200
so as a user you're interacting with the

00:37:48,720 --> 00:37:54,640
service the service relies on

00:37:51,200 --> 00:37:56,960
the token so kubernetes

00:37:54,640 --> 00:37:57,839
go talk to this get all the certificates

00:37:56,960 --> 00:38:02,839
it needs

00:37:57,839 --> 00:38:05,839
and it's off to the races so

00:38:02,839 --> 00:38:05,839
um

00:38:06,960 --> 00:38:10,160
sorry i thought that was an emergency um

00:38:09,440 --> 00:38:12,880
so

00:38:10,160 --> 00:38:14,320
uh so that's what that first the the

00:38:12,880 --> 00:38:17,280
client id does next one

00:38:14,320 --> 00:38:18,400
is the username claim now the default is

00:38:17,280 --> 00:38:21,839
to use

00:38:18,400 --> 00:38:25,359
the sub um

00:38:21,839 --> 00:38:28,800
uh the sub um

00:38:25,359 --> 00:38:32,480
uh parameter the sub parameter uh

00:38:28,800 --> 00:38:35,680
is or um attribute

00:38:32,480 --> 00:38:37,920
is just kind of like the user id uid

00:38:35,680 --> 00:38:39,280
um it's arbitrary but this is where you

00:38:37,920 --> 00:38:43,440
would put your unique

00:38:39,280 --> 00:38:46,560
information again i'm a big fan of

00:38:43,440 --> 00:38:48,640
type 4 uuid something that is not based

00:38:46,560 --> 00:38:52,720
on the user's name

00:38:48,640 --> 00:38:53,280
uh and then your group's claim so this

00:38:52,720 --> 00:38:55,920
tells

00:38:53,280 --> 00:38:56,640
kubernetes where are the groups coming

00:38:55,920 --> 00:39:00,720
from where

00:38:56,640 --> 00:39:02,640
are um the uh uh

00:39:00,720 --> 00:39:04,640
how do i identify what groups a user is

00:39:02,640 --> 00:39:07,680
in and then finally

00:39:04,640 --> 00:39:10,880
um a certificate to identify

00:39:07,680 --> 00:39:14,240
uh uh to protect the tls connection

00:39:10,880 --> 00:39:15,440
between kubernetes and your identity

00:39:14,240 --> 00:39:18,240
provider

00:39:15,440 --> 00:39:20,480
if your identity provider is signed by a

00:39:18,240 --> 00:39:22,400
generic or a typical commercial

00:39:20,480 --> 00:39:23,599
third party like what's encrypt or

00:39:22,400 --> 00:39:28,160
something like that

00:39:23,599 --> 00:39:32,320
you can skip this step so let's go ahead

00:39:28,160 --> 00:39:32,320
and get our certificate

00:39:32,480 --> 00:39:36,400
so let's clear this so i'm going to go

00:39:35,520 --> 00:39:39,839
to step

00:39:36,400 --> 00:39:40,839
three just check is there anything in q

00:39:39,839 --> 00:39:43,680
a

00:39:40,839 --> 00:39:46,000
no so i'm going to go to step

00:39:43,680 --> 00:39:46,000
three

00:39:52,240 --> 00:39:58,240
and no why didn't that copy

00:39:55,680 --> 00:39:58,240
it's weird

00:39:58,960 --> 00:40:02,240
there we go so what this command is

00:40:00,880 --> 00:40:03,200
going to do is a little bit of voodoo

00:40:02,240 --> 00:40:05,280
for us

00:40:03,200 --> 00:40:06,800
it's going to get the secret tls

00:40:05,280 --> 00:40:08,480
certificate so that's where we're

00:40:06,800 --> 00:40:11,839
storing the certificate used by the

00:40:08,480 --> 00:40:11,839
ingress controller

00:40:12,800 --> 00:40:17,280
piping it out to json and we're using

00:40:16,000 --> 00:40:20,400
the jq command

00:40:17,280 --> 00:40:23,359
to pull the tls.cert

00:40:20,400 --> 00:40:24,640
entry from data we're going to decode it

00:40:23,359 --> 00:40:27,200
and then we're going to stick it into

00:40:24,640 --> 00:40:27,200
this file

00:40:27,280 --> 00:40:32,560
so this is one of the beautiful things

00:40:29,200 --> 00:40:32,560
about getting used to

00:40:33,839 --> 00:40:38,560
working with coop control is being able

00:40:35,920 --> 00:40:41,839
to easily manipulate

00:40:38,560 --> 00:40:41,839
the resulting json

00:40:47,040 --> 00:40:52,319
so you should be able to check that file

00:40:49,520 --> 00:40:55,760
that certificate's going to be there

00:40:52,319 --> 00:40:58,400
all right so now let's go ahead

00:40:55,760 --> 00:40:59,520
and update our api server now this is

00:40:58,400 --> 00:41:03,119
going to be different

00:40:59,520 --> 00:41:06,560
based on your distribution of kubernetes

00:41:03,119 --> 00:41:08,720
i'm using kube adm here there are a lot

00:41:06,560 --> 00:41:09,920
of derivatives of kube adm that you

00:41:08,720 --> 00:41:13,760
don't realize are kubernetes

00:41:09,920 --> 00:41:15,680
so as an example uh kind

00:41:13,760 --> 00:41:17,119
uh which is you know where you actually

00:41:15,680 --> 00:41:18,720
run kubernetes

00:41:17,119 --> 00:41:21,839
inside of a docker container great

00:41:18,720 --> 00:41:21,839
project i love it

00:41:23,119 --> 00:41:26,400
actually just runs cube adm inside of a

00:41:25,359 --> 00:41:28,720
container

00:41:26,400 --> 00:41:29,920
so it's actually the same steps just you

00:41:28,720 --> 00:41:34,319
have to then get into

00:41:29,920 --> 00:41:34,319
docker and this is easier for us

00:41:34,400 --> 00:41:42,240
if you're talking about a cloud hosted

00:41:38,400 --> 00:41:44,640
provider so something like aks eks gke

00:41:42,240 --> 00:41:48,400
you can't do this they do not give you

00:41:44,640 --> 00:41:51,040
access to the api server flags

00:41:48,400 --> 00:41:53,359
excuse me i'll scratch the back of my

00:41:51,040 --> 00:41:53,359
throat

00:41:55,599 --> 00:41:59,520
um that's where you need to use

00:41:57,599 --> 00:42:03,520
something called impersonation

00:41:59,520 --> 00:42:07,520
we'll talk about that in a little bit um

00:42:03,520 --> 00:42:10,079
there was interestingly enough a um

00:42:07,520 --> 00:42:11,760
a cap which is a kind of a feature

00:42:10,079 --> 00:42:16,560
enhancement

00:42:11,760 --> 00:42:20,240
um that could be used um

00:42:16,560 --> 00:42:22,960
in kubernetes requests to to make this

00:42:20,240 --> 00:42:23,920
more of a object-based implementation

00:42:22,960 --> 00:42:25,920
rather than

00:42:23,920 --> 00:42:27,280
using api server flags but it was

00:42:25,920 --> 00:42:28,880
decided that because there are different

00:42:27,280 --> 00:42:31,040
ways that this could be handled by cloud

00:42:28,880 --> 00:42:33,440
vendors already today

00:42:31,040 --> 00:42:35,200
not to move forward with it so let's go

00:42:33,440 --> 00:42:38,160
ahead and

00:42:35,200 --> 00:42:40,720
update our configuration so i'm going to

00:42:38,160 --> 00:42:45,359
go ahead and get that again

00:42:40,720 --> 00:42:50,480
i'm going to copy

00:42:45,359 --> 00:42:50,480
oops yeah clear

00:42:54,800 --> 00:43:00,720
so i'm going to copy this

00:42:58,480 --> 00:43:00,720
and

00:43:06,319 --> 00:43:09,920
all right so this is where most people

00:43:08,720 --> 00:43:12,960
are going to get screwed up

00:43:09,920 --> 00:43:14,560
because yaml so

00:43:12,960 --> 00:43:18,079
we're going to go ahead and update here

00:43:14,560 --> 00:43:18,079
all the api server flags

00:43:19,680 --> 00:43:22,880
go ahead go to the end

00:43:25,280 --> 00:43:31,359
thankfully v didn't uh vi decided not to

00:43:28,800 --> 00:43:32,800
screw up the indenting but for each of

00:43:31,359 --> 00:43:33,839
these you're going to want to add a dash

00:43:32,800 --> 00:43:37,280
so you should have

00:43:33,839 --> 00:43:40,480
a dash a space

00:43:37,280 --> 00:43:44,079
and a d and then two dashes

00:43:40,480 --> 00:43:44,079
just like this

00:43:47,599 --> 00:43:53,680
so you should now have these additional

00:43:51,440 --> 00:43:55,440
five parameters those are the only ones

00:43:53,680 --> 00:43:59,520
we're going to touch for now

00:43:55,440 --> 00:44:02,319
and save it now cube adm

00:43:59,520 --> 00:44:04,079
will restart its container for the api

00:44:02,319 --> 00:44:09,119
server so if we do a ps

00:44:04,079 --> 00:44:12,880
into grep api

00:44:09,119 --> 00:44:12,880
we'll see that it's actually restarting

00:44:14,000 --> 00:44:18,000
oops so the api server is back up and

00:44:17,280 --> 00:44:21,040
running

00:44:18,000 --> 00:44:21,440
if we've done this correctly we can come

00:44:21,040 --> 00:44:24,880
back

00:44:21,440 --> 00:44:28,000
to our dashboard

00:44:24,880 --> 00:44:28,000
and do a quick refresh

00:44:29,040 --> 00:44:32,319
it says logged in with header uh oh

00:44:31,280 --> 00:44:34,480
that's why

00:44:32,319 --> 00:44:36,560
i take off once you get into an error in

00:44:34,480 --> 00:44:39,040
the dashboard yeah go back to the root

00:44:36,560 --> 00:44:41,760
and now you can see we have access to

00:44:39,040 --> 00:44:41,760
our dashboard

00:44:43,599 --> 00:44:48,000
let's go over to our node see how hard

00:44:45,280 --> 00:44:48,000
they're working

00:44:48,160 --> 00:44:51,920
now you can see all sorts of great

00:44:49,760 --> 00:44:54,800
information here so i love the dashboard

00:44:51,920 --> 00:44:54,800
i use it a lot

00:44:56,160 --> 00:44:59,839
it's a really great way to quickly get

00:44:58,800 --> 00:45:02,240
information

00:44:59,839 --> 00:45:04,319
um being able to get into so for

00:45:02,240 --> 00:45:08,079
instance i want to go one over here

00:45:04,319 --> 00:45:08,079
i want to debug something

00:45:09,839 --> 00:45:16,400
yeah yeah i have a terminal etc

00:45:14,000 --> 00:45:18,160
now that might throw some alarms to some

00:45:16,400 --> 00:45:18,800
people like oh my god you have this much

00:45:18,160 --> 00:45:20,560
power

00:45:18,800 --> 00:45:24,480
you have that much power coupe control

00:45:20,560 --> 00:45:26,880
too you just got to handle it properly

00:45:24,480 --> 00:45:29,200
so now that we know that the dashboard

00:45:26,880 --> 00:45:32,640
is integrated let's see what happens

00:45:29,200 --> 00:45:35,680
with our

00:45:32,640 --> 00:45:38,880
cube control so let's come back here

00:45:35,680 --> 00:45:39,599
so i am now on step five so first thing

00:45:38,880 --> 00:45:42,560
i'm going to do

00:45:39,599 --> 00:45:42,560
is remove

00:45:42,720 --> 00:45:47,839
my poop control context

00:45:49,200 --> 00:45:51,760
not her

00:45:52,960 --> 00:45:59,200
right nothing there could control get

00:45:56,560 --> 00:46:00,880
pods nothing there so when we talked

00:45:59,200 --> 00:46:02,800
about

00:46:00,880 --> 00:46:05,520
uh the authentication process we said we

00:46:02,800 --> 00:46:07,040
went to identity provider authenticated

00:46:05,520 --> 00:46:09,040
and then we had to get that information

00:46:07,040 --> 00:46:12,319
the id token the the

00:46:09,040 --> 00:46:14,480
um and the issuer uh

00:46:12,319 --> 00:46:15,599
in and the refresh token into our kube

00:46:14,480 --> 00:46:17,200
config file

00:46:15,599 --> 00:46:19,200
now a lot of different plugins that do

00:46:17,200 --> 00:46:20,960
that um open unison actually does have a

00:46:19,200 --> 00:46:25,359
plug-in now where you can do

00:46:20,960 --> 00:46:27,680
uh coupe control oh you login

00:46:25,359 --> 00:46:29,440
host equals whatever your host name is

00:46:27,680 --> 00:46:32,400
but you have to be on the

00:46:29,440 --> 00:46:34,079
the system that that it'll run on

00:46:32,400 --> 00:46:38,240
because it opens up your browser

00:46:34,079 --> 00:46:38,960
um other options uh there are some that

00:46:38,240 --> 00:46:42,319
will

00:46:38,960 --> 00:46:44,560
um uh that will uh um

00:46:42,319 --> 00:46:46,560
let you download a coupe control config

00:46:44,560 --> 00:46:47,599
file this part is really implementation

00:46:46,560 --> 00:46:50,160
specific

00:46:47,599 --> 00:46:52,160
uh there's also a coupe control plug-in

00:46:50,160 --> 00:46:54,839
that is more generic for open id connect

00:46:52,160 --> 00:46:56,960
it's not specific for any of the

00:46:54,839 --> 00:47:00,400
providers

00:46:56,960 --> 00:47:02,720
where you start with a generic um

00:47:00,400 --> 00:47:04,240
coupe control configuration file that

00:47:02,720 --> 00:47:06,319
has everything except your id and

00:47:04,240 --> 00:47:08,240
refresh token in it

00:47:06,319 --> 00:47:10,319
and then it goes ahead and does all the

00:47:08,240 --> 00:47:11,280
management for you

00:47:10,319 --> 00:47:13,760
we're going to do it a little bit

00:47:11,280 --> 00:47:13,760
differently

00:47:15,520 --> 00:47:22,160
where i'm going to come back here go

00:47:18,560 --> 00:47:24,160
ahead and refresh here for a second

00:47:22,160 --> 00:47:27,599
and you'll see this big key where it

00:47:24,160 --> 00:47:27,599
says kubernetes tokens

00:47:28,319 --> 00:47:34,319
so here is our token uh

00:47:31,520 --> 00:47:35,520
uh our for the coupe control it'll work

00:47:34,319 --> 00:47:40,400
on windows

00:47:35,520 --> 00:47:40,400
it'll work on linux and mac

00:47:41,920 --> 00:47:47,920
um if we need to we could download

00:47:45,440 --> 00:47:52,000
our certificates and i'm actually going

00:47:47,920 --> 00:47:55,200
to take a real quick second here

00:47:52,000 --> 00:48:00,079
to show you what the jwt looks like

00:47:55,200 --> 00:48:02,240
so jwc dot io great tool for debugging

00:48:00,079 --> 00:48:03,520
do not use it with production it does

00:48:02,240 --> 00:48:06,960
not send

00:48:03,520 --> 00:48:09,040
your tokens back to

00:48:06,960 --> 00:48:11,760
anybody but again these are bearer

00:48:09,040 --> 00:48:13,359
tokens it ain't worth the risk

00:48:11,760 --> 00:48:15,520
so i'm just going to drop this in and

00:48:13,359 --> 00:48:18,240
what's great is that this

00:48:15,520 --> 00:48:19,599
tool will kind of decode what the jwt

00:48:18,240 --> 00:48:21,760
looks like you have your header

00:48:19,599 --> 00:48:22,640
here in red or i guess that might be

00:48:21,760 --> 00:48:26,079
pink

00:48:22,640 --> 00:48:28,079
um excuse me purple

00:48:26,079 --> 00:48:29,359
is your payload and finally blue is your

00:48:28,079 --> 00:48:34,240
signature

00:48:29,359 --> 00:48:35,359
so this first part really just tells

00:48:34,240 --> 00:48:37,119
kubernetes hey

00:48:35,359 --> 00:48:39,280
this is the key to use out of the

00:48:37,119 --> 00:48:40,559
metadata

00:48:39,280 --> 00:48:43,119
the second part's really where the

00:48:40,559 --> 00:48:44,960
rubber hits the road here's the issuer

00:48:43,119 --> 00:48:46,400
it has to line up with the issuer inside

00:48:44,960 --> 00:48:47,920
of our parameter

00:48:46,400 --> 00:48:50,319
the audience is kubernetes that's going

00:48:47,920 --> 00:48:52,960
to be your client id your expiration

00:48:50,319 --> 00:48:56,160
this is the number of

00:48:52,960 --> 00:48:59,760
seconds since epoch so like

00:48:56,160 --> 00:49:03,599
january 1 1970 um

00:48:59,760 --> 00:49:05,119
until it expires your

00:49:03,599 --> 00:49:08,079
when it was initiated you can actually

00:49:05,119 --> 00:49:10,880
see it highlights

00:49:08,079 --> 00:49:11,680
the conversion for you and not before

00:49:10,880 --> 00:49:15,119
because you know

00:49:11,680 --> 00:49:16,640
clock skew can go both ways

00:49:15,119 --> 00:49:18,559
uh and then here's really where the

00:49:16,640 --> 00:49:20,319
rubber hits the road your sub now i'm

00:49:18,559 --> 00:49:22,800
breaking my own rule here

00:49:20,319 --> 00:49:23,520
to make things simple uh but at the end

00:49:22,800 --> 00:49:26,800
of the day

00:49:23,520 --> 00:49:30,079
please do as i say not as i do

00:49:26,800 --> 00:49:30,559
uh and then finally our groups so that

00:49:30,079 --> 00:49:31,920
that

00:49:30,559 --> 00:49:33,839
that's all the information that

00:49:31,920 --> 00:49:35,440
kubernetes really needs you can include

00:49:33,839 --> 00:49:38,880
other information in there

00:49:35,440 --> 00:49:41,839
um when we talk about uh opa and

00:49:38,880 --> 00:49:43,599
um other potential uh authorization

00:49:41,839 --> 00:49:45,839
mechanisms stuff like that might become

00:49:43,599 --> 00:49:45,839
handy

00:49:47,599 --> 00:49:51,040
so we now have to get this information

00:49:50,240 --> 00:49:53,359
into

00:49:51,040 --> 00:49:53,359
our

00:49:57,359 --> 00:50:01,599
context so that doesn't work so we're

00:50:00,400 --> 00:50:04,720
just going to paste that in

00:50:01,599 --> 00:50:07,680
and what that did is that actually got

00:50:04,720 --> 00:50:07,680
make sure that works

00:50:07,920 --> 00:50:27,839
let's try logging in logging out logging

00:50:10,000 --> 00:50:27,839
back in we're talking a little too much

00:50:36,000 --> 00:50:39,119
so now you can see i'm actually able to

00:50:37,839 --> 00:50:43,040
authenticate

00:50:39,119 --> 00:50:44,559
as the user before where no user existed

00:50:43,040 --> 00:50:46,880
now if we take a look here at what's

00:50:44,559 --> 00:50:49,200
actually happening that command that you

00:50:46,880 --> 00:50:52,800
just pasted in

00:50:49,200 --> 00:50:54,079
excuse me um that command that you just

00:50:52,800 --> 00:50:57,280
pasted in

00:50:54,079 --> 00:50:58,240
builds out your kubernetes file from

00:50:57,280 --> 00:51:00,480
scratch

00:50:58,240 --> 00:51:02,960
so let's go ahead and look at our coop

00:51:00,480 --> 00:51:02,960
config

00:51:04,240 --> 00:51:07,680
so it sets your certificate authority

00:51:05,920 --> 00:51:09,599
data so that's what

00:51:07,680 --> 00:51:12,400
the cost what control is using to

00:51:09,599 --> 00:51:14,480
actually talk to your api server

00:51:12,400 --> 00:51:16,160
set your server name set your contacts

00:51:14,480 --> 00:51:19,440
to the user is

00:51:16,160 --> 00:51:21,440
and then here's where it sets up

00:51:19,440 --> 00:51:23,520
your open id connect implementation

00:51:21,440 --> 00:51:24,720
information so your client id your id

00:51:23,520 --> 00:51:26,720
token

00:51:24,720 --> 00:51:28,720
again authority data for talking to the

00:51:26,720 --> 00:51:31,040
identity provider the issuer and the

00:51:28,720 --> 00:51:33,119
refresh token

00:51:31,040 --> 00:51:34,880
now here's where it becomes really

00:51:33,119 --> 00:51:38,800
important to have those short-lived

00:51:34,880 --> 00:51:38,800
tokens they're bearer tokens right

00:51:39,839 --> 00:51:45,839
so i'm going to go ahead and do coupe

00:51:42,400 --> 00:51:45,839
control get all name spaces

00:51:46,000 --> 00:51:50,400
so now i'm going to log out so this

00:51:48,319 --> 00:51:54,160
killed the session in the back end

00:51:50,400 --> 00:51:57,280
in open unison still works though

00:51:54,160 --> 00:51:58,400
right because that token is good for a

00:51:57,280 --> 00:52:01,520
couple of minutes

00:51:58,400 --> 00:52:03,680
so until that token expires coup control

00:52:01,520 --> 00:52:04,880
is not going to try and do a refresh

00:52:03,680 --> 00:52:07,359
we're going to go ahead and put a watch

00:52:04,880 --> 00:52:07,359
on here

00:52:10,640 --> 00:52:14,960
and we're going to see that it's going

00:52:11,839 --> 00:52:14,960
to take a couple of minutes

00:52:15,119 --> 00:52:18,800
now if you think about this in a real

00:52:16,400 --> 00:52:20,000
life scenario the amount of time it

00:52:18,800 --> 00:52:22,559
takes someone

00:52:20,000 --> 00:52:23,920
to get a hold of this token and then

00:52:22,559 --> 00:52:25,520
know what to do with it

00:52:23,920 --> 00:52:27,280
one to two minutes is probably going to

00:52:25,520 --> 00:52:29,280
be safe you know unless the attacker is

00:52:27,280 --> 00:52:31,200
literally on your desktop

00:52:29,280 --> 00:52:32,319
in which case you have much bigger

00:52:31,200 --> 00:52:34,960
problems than

00:52:32,319 --> 00:52:35,599
token and there you go failed to refresh

00:52:34,960 --> 00:52:37,520
couldn't

00:52:35,599 --> 00:52:39,680
couldn't get a new token anymore so

00:52:37,520 --> 00:52:40,640
you've now gone through that whole life

00:52:39,680 --> 00:52:43,920
cycle

00:52:40,640 --> 00:52:47,760
of being able to onboard a

00:52:43,920 --> 00:52:51,680
um uh onboard a user

00:52:47,760 --> 00:52:55,200
sso in log out and invalidate the token

00:52:51,680 --> 00:52:58,880
um so it is now 1153 so

00:52:55,200 --> 00:52:58,880
a little ahead of the halfway mark

00:52:59,200 --> 00:53:03,680
the other labs all depend on this so i'm

00:53:02,800 --> 00:53:06,800
gonna go ahead

00:53:03,680 --> 00:53:10,559
and say let's take a short break

00:53:06,800 --> 00:53:11,040
and come back at noon i will be watching

00:53:10,559 --> 00:53:14,559
the

00:53:11,040 --> 00:53:16,880
qa window so if anybody has a question

00:53:14,559 --> 00:53:17,839
please just put it there and i will be

00:53:16,880 --> 00:53:20,400
sure to

00:53:17,839 --> 00:53:20,400
answer it

00:53:24,559 --> 00:53:29,839
and i'm going to start talking again at

00:53:26,960 --> 00:53:29,839
the top of the hour

00:55:18,480 --> 00:55:21,920
if you hear yelling and screaming in the

00:55:20,160 --> 00:55:23,760
background because my mic's picking it

00:55:21,920 --> 00:55:25,040
up i promise you there are no torture

00:55:23,760 --> 00:55:30,720
session going on

00:55:25,040 --> 00:55:30,720
uh it's just my kindergartner at virtual

00:55:32,839 --> 00:55:35,839
school

00:55:53,440 --> 00:55:56,000
all right

00:55:59,920 --> 00:56:03,839
let's give this a try

00:56:28,839 --> 00:56:31,839
wow

00:56:32,000 --> 00:56:35,920
uh so i'm able to get in there i don't

00:56:34,960 --> 00:56:39,920
know

00:56:35,920 --> 00:56:45,839
uh if you are on like a corporate

00:56:39,920 --> 00:56:45,839
network maybe it's not allowing ssh out

00:56:54,880 --> 00:56:58,000
any command line to generate the token

00:56:56,720 --> 00:57:01,520
create the coop config

00:56:58,000 --> 00:57:02,559
file yes it won't work in this setup if

00:57:01,520 --> 00:57:05,599
you're ssh

00:57:02,559 --> 00:57:09,200
in but there is a

00:57:05,599 --> 00:57:09,200
cube plugin

00:57:09,920 --> 00:57:13,839
that you could use uh and i use and my

00:57:12,640 --> 00:57:16,160
customers use

00:57:13,839 --> 00:57:16,160
um

00:57:17,119 --> 00:57:26,640
uh crew plugins

00:57:22,240 --> 00:57:27,550
crew index i guess uh

00:57:26,640 --> 00:57:30,240
is it in here

00:57:27,550 --> 00:57:34,079
[Music]

00:57:30,240 --> 00:57:34,079
uh oh you login here we go

00:57:34,720 --> 00:57:41,839
uh so here you can use this crew

00:57:38,839 --> 00:57:41,839
login

00:57:44,559 --> 00:57:47,839
all right so uh

00:57:50,640 --> 00:57:58,079
so there is the url

00:57:54,640 --> 00:57:59,359
all right uh private pc cannot get putty

00:57:58,079 --> 00:58:02,480
to accept your

00:57:59,359 --> 00:58:02,480
key hmm

00:58:04,480 --> 00:58:08,240
let me do i don't think i have putty on

00:58:07,040 --> 00:58:12,640
this particular

00:58:08,240 --> 00:58:16,000
system double check here real quick

00:58:12,640 --> 00:58:23,839
do i no uh

00:58:16,000 --> 00:58:23,839
brew install putty maybe

00:58:28,720 --> 00:58:37,440
i did test putty beforehand um but

00:58:32,160 --> 00:58:37,440
sometimes best laid plans of

00:58:48,839 --> 00:58:51,839
developers

00:58:56,400 --> 00:59:00,720
all right so let's try uh putty

00:59:02,839 --> 00:59:05,839
oh

00:59:10,799 --> 00:59:17,440
here's our seller i always got this

00:59:15,119 --> 00:59:21,680
wrong

00:59:17,440 --> 00:59:21,680
now there we go now putty

00:59:30,839 --> 00:59:35,599
bin

00:59:32,480 --> 00:59:38,559
interesting that's not the gooey

00:59:35,599 --> 00:59:40,240
all right let me just double check here

00:59:38,559 --> 00:59:47,839
i've got putty running over here on a

00:59:40,240 --> 00:59:47,839
different laptop

00:59:57,440 --> 01:00:00,480
how we doing on time we got one more

00:59:59,839 --> 01:00:15,839
minute

01:00:00,480 --> 01:00:15,839
and we'll get started again

01:00:20,480 --> 01:00:24,640
i'm just gonna double check this real

01:00:22,400 --> 01:00:29,839
quick the

01:00:24,640 --> 01:00:29,839
putty key two dot ppk

01:00:55,599 --> 01:00:57,839


01:01:22,839 --> 01:01:25,839
uh

01:01:26,240 --> 01:01:31,119
all right when i pair you 157.

01:01:36,839 --> 01:01:39,839
230.86.19

01:01:46,559 --> 01:01:50,400
yeah that um that worked with putty i

01:01:48,799 --> 01:01:52,079
don't know maybe uh

01:01:50,400 --> 01:02:07,839
check to make sure maybe a character's

01:01:52,079 --> 01:02:07,839
not missing or something at the end

01:02:09,599 --> 01:02:14,160
okay so we are a couple minutes past

01:02:12,480 --> 01:02:17,520
break

01:02:14,160 --> 01:02:17,520
close my laptop here

01:02:18,000 --> 01:02:22,319
so hopefully you've been able to uh get

01:02:20,640 --> 01:02:23,599
this working if you haven't been able to

01:02:22,319 --> 01:02:27,119
get this working

01:02:23,599 --> 01:02:29,280
um typically this i'd be walking around

01:02:27,119 --> 01:02:31,760
to everybody to to try and help i do

01:02:29,280 --> 01:02:33,599
apologize it's a little hard to

01:02:31,760 --> 01:02:34,880
to to do that in this particular type of

01:02:33,599 --> 01:02:38,240
format

01:02:34,880 --> 01:02:40,799
so next up

01:02:38,240 --> 01:02:49,680
we'll dive back into it and let's talk

01:02:40,799 --> 01:02:51,359
about authorization

01:02:49,680 --> 01:02:53,280
uh actually i apologize first we're

01:02:51,359 --> 01:02:54,640
going to talk a little bit more about

01:02:53,280 --> 01:02:58,720
authentication

01:02:54,640 --> 01:02:58,720
um and and kind of the ins and outs

01:02:59,599 --> 01:03:05,760
so uh one of the great um

01:03:02,880 --> 01:03:07,119
tools in kubernetes is this concept of

01:03:05,760 --> 01:03:09,760
impersonation

01:03:07,119 --> 01:03:11,280
where instead of going through the

01:03:09,760 --> 01:03:14,559
process that we just did

01:03:11,280 --> 01:03:16,640
of sending the token directly to

01:03:14,559 --> 01:03:18,480
the api server you do what's called an

01:03:16,640 --> 01:03:21,599
impersonation where you have a reverse

01:03:18,480 --> 01:03:24,960
proxy authenticate the user

01:03:21,599 --> 01:03:27,200
send its session handle its

01:03:24,960 --> 01:03:28,240
identifier so it's the the identity of

01:03:27,200 --> 01:03:30,400
the proxy

01:03:28,240 --> 01:03:31,839
not the identity of the user plus a

01:03:30,400 --> 01:03:35,119
bunch of headers

01:03:31,839 --> 01:03:35,920
that will say hey instead of doing stuff

01:03:35,119 --> 01:03:38,720
on my

01:03:35,920 --> 01:03:40,559
behalf you know the reverse proxy do it

01:03:38,720 --> 01:03:42,559
on behalf of this user with this group

01:03:40,559 --> 01:03:45,839
identity

01:03:42,559 --> 01:03:48,240
uh so this works really really well for

01:03:45,839 --> 01:03:49,039
a lot of different use cases one of

01:03:48,240 --> 01:03:52,160
which is

01:03:49,039 --> 01:03:54,240
if you are running a

01:03:52,160 --> 01:03:55,920
cluster in the cloud or managed cluster

01:03:54,240 --> 01:03:57,119
where you don't have access to those api

01:03:55,920 --> 01:03:59,359
server flags

01:03:57,119 --> 01:04:00,799
you can use impersonation to use open id

01:03:59,359 --> 01:04:03,039
connect with those clusters now

01:04:00,799 --> 01:04:03,839
you might say well the cloud providers

01:04:03,039 --> 01:04:06,880
all provide

01:04:03,839 --> 01:04:10,400
some kind of token why not just

01:04:06,880 --> 01:04:13,520
use that token you might right i mean

01:04:10,400 --> 01:04:15,680
that's not necessarily a a bad thing

01:04:13,520 --> 01:04:17,520
um it's going to really depend on your

01:04:15,680 --> 01:04:18,480
organization how your organization is

01:04:17,520 --> 01:04:21,760
set up

01:04:18,480 --> 01:04:23,760
what i am finding is that customers who

01:04:21,760 --> 01:04:27,119
start off going that route

01:04:23,760 --> 01:04:30,240
start to want to move over to

01:04:27,119 --> 01:04:30,640
open id connect because that way they're

01:04:30,240 --> 01:04:32,799
not

01:04:30,640 --> 01:04:35,200
now in the middle of supporting user

01:04:32,799 --> 01:04:38,640
login process

01:04:35,200 --> 01:04:40,160
it just it scales much better

01:04:38,640 --> 01:04:42,000
so it's also good for really advanced

01:04:40,160 --> 01:04:45,440
use cases where uh

01:04:42,000 --> 01:04:47,359
you know like a managed system

01:04:45,440 --> 01:04:49,680
or the cloud doesn't work real well or

01:04:47,359 --> 01:04:51,680
where i'm sorry openid connect directly

01:04:49,680 --> 01:04:55,440
does not work real well

01:04:51,680 --> 01:04:56,799
um i also like to use it where i just

01:04:55,440 --> 01:04:58,319
don't want to go through the process of

01:04:56,799 --> 01:05:01,520
having to set up

01:04:58,319 --> 01:05:03,280
um all of the different uh uh api server

01:05:01,520 --> 01:05:04,720
flags so if i'm feeling lazy and i just

01:05:03,280 --> 01:05:07,839
want to get a cluster up and running

01:05:04,720 --> 01:05:10,400
i'll do impersonation there too um just

01:05:07,839 --> 01:05:12,240
as a kind of a point of note

01:05:10,400 --> 01:05:14,480
yes the open unison system that you're

01:05:12,240 --> 01:05:16,160
using now does support impersonation for

01:05:14,480 --> 01:05:19,359
both dashboard

01:05:16,160 --> 01:05:19,359
and for coupe control

01:05:19,520 --> 01:05:24,400
um like i said it works for the

01:05:22,400 --> 01:05:25,039
dashboard it'll be working with kiali

01:05:24,400 --> 01:05:27,200
soon

01:05:25,039 --> 01:05:28,400
uh just as soon as i have time to sit

01:05:27,200 --> 01:05:32,000
down and write it

01:05:28,400 --> 01:05:33,680
um but uh we have opened up a uh

01:05:32,000 --> 01:05:35,359
feature request and the maintainers have

01:05:33,680 --> 01:05:36,480
been gracious enough to say yes we will

01:05:35,359 --> 01:05:40,400
accept

01:05:36,480 --> 01:05:43,680
the pr once i go ahead and write it

01:05:40,400 --> 01:05:47,200
here's the trick with this this reverse

01:05:43,680 --> 01:05:51,280
proxy here is now

01:05:47,200 --> 01:05:55,440
a privileged account um

01:05:51,280 --> 01:05:57,839
and so in cluster use a service account

01:05:55,440 --> 01:06:00,079
just be really careful who has access to

01:05:57,839 --> 01:06:02,079
that service account

01:06:00,079 --> 01:06:03,680
add a cluster i would probably go with a

01:06:02,079 --> 01:06:05,760
certificate here

01:06:03,680 --> 01:06:06,720
i'm not a huge fan of certificates for

01:06:05,760 --> 01:06:09,039
users

01:06:06,720 --> 01:06:10,720
but when done correctly with devices

01:06:09,039 --> 01:06:13,200
they're very very powerful

01:06:10,720 --> 01:06:15,200
and this is one of those instances where

01:06:13,200 --> 01:06:16,480
you could properly generate a signed

01:06:15,200 --> 01:06:19,039
certificate

01:06:16,480 --> 01:06:20,559
that um you know never leaves your

01:06:19,039 --> 01:06:23,760
reverse proxy

01:06:20,559 --> 01:06:24,960
and that'll be a better approach than

01:06:23,760 --> 01:06:28,559
trying to take a service

01:06:24,960 --> 01:06:30,079
to account off of your cluster

01:06:28,559 --> 01:06:31,200
um and we'll get a little bit more into

01:06:30,079 --> 01:06:33,200
the mechanics of certificate

01:06:31,200 --> 01:06:35,440
authentication here in a second

01:06:33,200 --> 01:06:36,960
um but really you've got to lock that

01:06:35,440 --> 01:06:38,480
down because in theory what you could

01:06:36,960 --> 01:06:40,319
that reverse proxy you know you can

01:06:38,480 --> 01:06:44,079
limit this based on configuration

01:06:40,319 --> 01:06:46,720
most people generally don't in my uh um

01:06:44,079 --> 01:06:48,480
in in my experience because it's really

01:06:46,720 --> 01:06:50,880
hard to know that ahead of time

01:06:48,480 --> 01:06:53,119
but they say hey you know you know that

01:06:50,880 --> 01:06:57,039
reverse proxy can now

01:06:53,119 --> 01:07:00,160
potentially impersonate anybody

01:06:57,039 --> 01:07:03,039
that could be an issue um so you want to

01:07:00,160 --> 01:07:03,039
be careful of that

01:07:05,680 --> 01:07:10,559
i'm just gonna making sure the qa

01:07:08,400 --> 01:07:15,200
doesn't pop up oops

01:07:10,559 --> 01:07:17,359
um so let's talk about set what i call

01:07:15,200 --> 01:07:19,760
second-tier applications so you're

01:07:17,359 --> 01:07:22,319
talking about things like the dashboard

01:07:19,760 --> 01:07:23,119
i mentioned kiali uh which is a

01:07:22,319 --> 01:07:27,119
dashboard

01:07:23,119 --> 01:07:29,760
for um uh istio

01:07:27,119 --> 01:07:31,280
tekton has uh uh the beginnings of a

01:07:29,760 --> 01:07:32,400
dashboard oh lots of that we love our

01:07:31,280 --> 01:07:34,240
dashboards

01:07:32,400 --> 01:07:36,640
um we have a love-hate relationship with

01:07:34,240 --> 01:07:40,400
uis in in in this business

01:07:36,640 --> 01:07:41,440
uh and so yeah these second tier

01:07:40,400 --> 01:07:43,839
applications

01:07:41,440 --> 01:07:45,680
make up more of your cluster you know

01:07:43,839 --> 01:07:47,119
even when you're talking about

01:07:45,680 --> 01:07:48,559
um you know like you're looking at

01:07:47,119 --> 01:07:49,760
openshift right the open shift

01:07:48,559 --> 01:07:51,599
management system

01:07:49,760 --> 01:07:53,760
that that's kind of a second tier right

01:07:51,599 --> 01:07:56,480
that's an application in and of itself

01:07:53,760 --> 01:07:57,440
it's piggybacking off of your cluster

01:07:56,480 --> 01:08:00,480
api

01:07:57,440 --> 01:08:02,480
sort of but the point is is that

01:08:00,480 --> 01:08:04,160
your cluster is more than the kubernetes

01:08:02,480 --> 01:08:05,599
api

01:08:04,160 --> 01:08:07,920
you know you might also be talking about

01:08:05,599 --> 01:08:07,920
things

01:08:08,640 --> 01:08:11,680
like grafana you know or you know your

01:08:11,359 --> 01:08:13,280
your

01:08:11,680 --> 01:08:15,359
your monitoring dashboard your

01:08:13,280 --> 01:08:18,880
prometheus your award manager

01:08:15,359 --> 01:08:22,400
stuff like that um and so uh

01:08:18,880 --> 01:08:24,080
there is a tendency to try to do this as

01:08:22,400 --> 01:08:27,199
simply as possible

01:08:24,080 --> 01:08:29,120
um which can lead to a lot of heartburn

01:08:27,199 --> 01:08:31,120
uh one such you know going back to the

01:08:29,120 --> 01:08:34,319
dashboard uh

01:08:31,120 --> 01:08:35,839
tesla got dinged on this right they

01:08:34,319 --> 01:08:37,440
they left their dashboards open they

01:08:35,839 --> 01:08:38,799
gave their dashboard a privileged

01:08:37,440 --> 01:08:41,040
service account

01:08:38,799 --> 01:08:41,920
that you didn't have to log into and

01:08:41,040 --> 01:08:44,560
they just you know

01:08:41,920 --> 01:08:45,839
hidden urls somebody figured out what

01:08:44,560 --> 01:08:49,040
the url was

01:08:45,839 --> 01:08:50,319
went ahead and uh started running some

01:08:49,040 --> 01:08:51,279
bitmining

01:08:50,319 --> 01:08:53,600
ironically enough not on their

01:08:51,279 --> 01:08:56,080
kubernetes cluster but they're able to

01:08:53,600 --> 01:08:59,920
get aws keys and start watching

01:08:56,080 --> 01:09:01,920
some bit mining on their aws um

01:08:59,920 --> 01:09:03,759
you know some folks like to go with the

01:09:01,920 --> 01:09:07,359
uh port forwarding

01:09:03,759 --> 01:09:10,480
again really really bad idea

01:09:07,359 --> 01:09:12,960
um yeah

01:09:10,480 --> 01:09:14,400
your browser you know you can't go to a

01:09:12,960 --> 01:09:16,000
website that has

01:09:14,400 --> 01:09:18,400
you know some malicious code and

01:09:16,000 --> 01:09:21,600
javascript that from your browser

01:09:18,400 --> 01:09:25,359
can behind the scenes access uh

01:09:21,600 --> 01:09:27,359
those those open ports um

01:09:25,359 --> 01:09:29,520
because your browsers will stop it but

01:09:27,359 --> 01:09:30,080
you know you run a script oh look at

01:09:29,520 --> 01:09:34,799
this my

01:09:30,080 --> 01:09:39,040
my uh my dashboard hardening script

01:09:34,799 --> 01:09:39,040
uh goes ahead and starts deploying

01:09:39,120 --> 01:09:44,880
bitcoin miners um so you know

01:09:42,400 --> 01:09:46,319
plus you have no way to track it it's

01:09:44,880 --> 01:09:48,000
it's messy

01:09:46,319 --> 01:09:50,400
it's bad you don't want to do it

01:09:48,000 --> 01:09:53,759
especially not in production

01:09:50,400 --> 01:09:57,040
um in fact i think windows they they

01:09:53,759 --> 01:09:59,600
they turn back on it but uh

01:09:57,040 --> 01:10:00,960
i want to say it was two years ago maybe

01:09:59,600 --> 01:10:02,480
maybe it was

01:10:00,960 --> 01:10:04,480
sooner where they're actually planning

01:10:02,480 --> 01:10:07,920
on shutting down

01:10:04,480 --> 01:10:08,400
access to loopback um so you couldn't

01:10:07,920 --> 01:10:11,280
run

01:10:08,400 --> 01:10:11,760
something on one two seven zero zero one

01:10:11,280 --> 01:10:14,239
uh

01:10:11,760 --> 01:10:15,920
so they they reversed that because they

01:10:14,239 --> 01:10:16,480
realized how many problems that would

01:10:15,920 --> 01:10:18,960
cause

01:10:16,480 --> 01:10:20,159
but the point being that you know once

01:10:18,960 --> 01:10:22,080
you get beyond the

01:10:20,159 --> 01:10:24,080
oh i got this up and running and you're

01:10:22,080 --> 01:10:27,440
talking about a production rollout

01:10:24,080 --> 01:10:30,640
port forwarding is not a viable

01:10:27,440 --> 01:10:33,040
security solution you're asking for

01:10:30,640 --> 01:10:36,000
problems

01:10:33,040 --> 01:10:37,920
and so how do you properly do this well

01:10:36,000 --> 01:10:40,239
uh depends on the application

01:10:37,920 --> 01:10:41,760
um most of them will work really well

01:10:40,239 --> 01:10:44,080
with the reverse proxy

01:10:41,760 --> 01:10:45,679
dashboard is a great example of this you

01:10:44,080 --> 01:10:47,199
deploy the dashboard and this is the way

01:10:45,679 --> 01:10:49,040
it's deployed inside your cluster right

01:10:47,199 --> 01:10:50,800
now if you want to go explore it

01:10:49,040 --> 01:10:52,480
the dashboard itself has absolutely no

01:10:50,800 --> 01:10:53,520
privileges it's an unprivileged service

01:10:52,480 --> 01:10:55,760
account

01:10:53,520 --> 01:10:56,560
the reverse proxy in this case open

01:10:55,760 --> 01:10:59,120
unison

01:10:56,560 --> 01:11:00,080
authenticates the user injects a token

01:10:59,120 --> 01:11:02,159
for that user

01:11:00,080 --> 01:11:03,520
into each request that goes down to the

01:11:02,159 --> 01:11:05,679
api server

01:11:03,520 --> 01:11:07,360
or down to the dashboard the dashboard

01:11:05,679 --> 01:11:08,480
then takes that and sends it down to the

01:11:07,360 --> 01:11:10,800
api server

01:11:08,480 --> 01:11:12,000
so the dashboard doesn't actually know

01:11:10,800 --> 01:11:14,719
who you are

01:11:12,000 --> 01:11:15,360
it doesn't care only the api server

01:11:14,719 --> 01:11:18,080
cares

01:11:15,360 --> 01:11:19,760
so there there's nothing for an attacker

01:11:18,080 --> 01:11:21,360
to get a handle on now

01:11:19,760 --> 01:11:23,760
yes in theory they could be sniffing

01:11:21,360 --> 01:11:25,520
traffic but if they're at that level in

01:11:23,760 --> 01:11:28,159
there that's a whole other

01:11:25,520 --> 01:11:30,239
set of problems that you have um this

01:11:28,159 --> 01:11:32,000
gives you a lot of great advantages over

01:11:30,239 --> 01:11:34,239
a session over port forwarding

01:11:32,000 --> 01:11:37,520
you have session management uh you saw

01:11:34,239 --> 01:11:39,840
before how when i logged someone out

01:11:37,520 --> 01:11:42,480
you know when i logged out those

01:11:39,840 --> 01:11:45,679
sessions were no longer being generated

01:11:42,480 --> 01:11:48,159
you have log out capabilities you can

01:11:45,679 --> 01:11:51,840
track it so if you're piping your logs

01:11:48,159 --> 01:11:54,000
off to some kind of security

01:11:51,840 --> 01:11:55,280
system like splunk or graylog or

01:11:54,000 --> 01:11:57,679
something like that

01:11:55,280 --> 01:11:58,880
uh you know you're actually tracking

01:11:57,679 --> 01:12:00,400
who's doing what

01:11:58,880 --> 01:12:02,159
throughout your logs you can't do that

01:12:00,400 --> 01:12:04,080
with port forwarding you have to go back

01:12:02,159 --> 01:12:05,280
to the api server the api server logs

01:12:04,080 --> 01:12:09,120
can track that but

01:12:05,280 --> 01:12:10,880
it gets really messy

01:12:09,120 --> 01:12:13,360
more applications are supporting open id

01:12:10,880 --> 01:12:16,480
connect natively

01:12:13,360 --> 01:12:18,320
so uh for instance grifana now supports

01:12:16,480 --> 01:12:21,920
openid connect natively

01:12:18,320 --> 01:12:24,480
kiali supports openid connect natively

01:12:21,920 --> 01:12:25,440
which is really great in a lot of senses

01:12:24,480 --> 01:12:28,080
um

01:12:25,440 --> 01:12:29,840
you know when you deploy it especially

01:12:28,080 --> 01:12:32,159
if the application

01:12:29,840 --> 01:12:33,280
or if the application is going to uh

01:12:32,159 --> 01:12:35,679
interact with the api

01:12:33,280 --> 01:12:37,520
server um yeah i remember it's gotta

01:12:35,679 --> 01:12:39,760
have the same identity provider as case

01:12:37,520 --> 01:12:41,600
because it's just passing that token on

01:12:39,760 --> 01:12:43,120
uh where this can fall apart is

01:12:41,600 --> 01:12:44,880
especially on cloud managed clusters

01:12:43,120 --> 01:12:45,520
where you don't have access to open id

01:12:44,880 --> 01:12:48,159
connect

01:12:45,520 --> 01:12:49,679
so for instance with kiali you hand in

01:12:48,159 --> 01:12:53,280
open id connect token

01:12:49,679 --> 01:12:54,640
you're running on eks that token isn't

01:12:53,280 --> 01:12:57,920
going to work

01:12:54,640 --> 01:13:00,320
with eks so you need another solution

01:12:57,920 --> 01:13:00,320
for that

01:13:01,440 --> 01:13:05,760
so let's talk about certificates and why

01:13:03,840 --> 01:13:09,040
you should not be using them

01:13:05,760 --> 01:13:12,080
they're really easy to do wrong and

01:13:09,040 --> 01:13:14,320
very very hard to do correctly

01:13:12,080 --> 01:13:15,120
the power of the security of the

01:13:14,320 --> 01:13:18,560
certificate

01:13:15,120 --> 01:13:21,840
is in the idea that the private key

01:13:18,560 --> 01:13:25,440
never leaves your device like that's a

01:13:21,840 --> 01:13:27,840
huge part of the security of pki

01:13:25,440 --> 01:13:29,679
so i want to get a certificate to go to

01:13:27,840 --> 01:13:33,040
an api server

01:13:29,679 --> 01:13:34,960
excuse me supposed to generate

01:13:33,040 --> 01:13:36,880
a public key private key and then what's

01:13:34,960 --> 01:13:38,400
called certificate signing request

01:13:36,880 --> 01:13:40,320
and i hand that certificate signing

01:13:38,400 --> 01:13:42,080
request off to the ca

01:13:40,320 --> 01:13:44,239
you know that ca might be kubernetes

01:13:42,080 --> 01:13:46,480
itself it has a built-in ca depending on

01:13:44,239 --> 01:13:47,760
the implementation or it could be a

01:13:46,480 --> 01:13:50,159
third party ca

01:13:47,760 --> 01:13:51,280
that kubernetes said any any certificate

01:13:50,159 --> 01:13:54,400
from the ca

01:13:51,280 --> 01:13:57,440
is going to be a valid certificate

01:13:54,400 --> 01:14:00,159
get signed it comes back i install it

01:13:57,440 --> 01:14:02,239
at no point has the private key left my

01:14:00,159 --> 01:14:04,480
device

01:14:02,239 --> 01:14:05,679
this is really popular with hardware

01:14:04,480 --> 01:14:08,239
devices

01:14:05,679 --> 01:14:08,800
yeah i'm holding up my uh my yubikey

01:14:08,239 --> 01:14:10,640
here

01:14:08,800 --> 01:14:12,560
my little buddy that goes everywhere i

01:14:10,640 --> 01:14:15,760
go that could be

01:14:12,560 --> 01:14:17,440
your hardware device um you know anybody

01:14:15,760 --> 01:14:17,840
who's worked in the federal government

01:14:17,440 --> 01:14:20,960
with

01:14:17,840 --> 01:14:22,840
piv cards smart cards uh there are a lot

01:14:20,960 --> 01:14:26,880
of industries like smart cards

01:14:22,840 --> 01:14:29,600
pkcs11 very very strong credentials

01:14:26,880 --> 01:14:30,880
but you have to do it right otherwise

01:14:29,600 --> 01:14:32,719
it's just a

01:14:30,880 --> 01:14:34,320
password file it's just a really big

01:14:32,719 --> 01:14:35,199
giant password file that you're passing

01:14:34,320 --> 01:14:37,600
around

01:14:35,199 --> 01:14:38,320
so uh what most organizations end up

01:14:37,600 --> 01:14:40,800
doing

01:14:38,320 --> 01:14:42,320
is you know that master config file that

01:14:40,800 --> 01:14:43,040
was generated when you deployed your

01:14:42,320 --> 01:14:45,600
cluster

01:14:43,040 --> 01:14:47,440
here now you have access to the cluster

01:14:45,600 --> 01:14:48,320
can't track who has access to anything

01:14:47,440 --> 01:14:52,159
right

01:14:48,320 --> 01:14:53,040
um or because that process of installing

01:14:52,159 --> 01:14:57,440
and creating

01:14:53,040 --> 01:14:58,560
keys is really difficult um

01:14:57,440 --> 01:15:00,640
you know even for people who've been

01:14:58,560 --> 01:15:01,920
doing it for years uh

01:15:00,640 --> 01:15:03,679
you know they say okay we're just going

01:15:01,920 --> 01:15:05,199
to generate the file and hand it to you

01:15:03,679 --> 01:15:06,560
well now you've defeated a lot of the

01:15:05,199 --> 01:15:08,239
security

01:15:06,560 --> 01:15:10,159
you might be using something like vault

01:15:08,239 --> 01:15:11,840
to do that to get around that but at the

01:15:10,159 --> 01:15:13,920
end of the day you're now

01:15:11,840 --> 01:15:15,760
starting to implement a rudimentary

01:15:13,920 --> 01:15:18,239
token management system

01:15:15,760 --> 01:15:19,920
so why not just use the token management

01:15:18,239 --> 01:15:22,960
system that's designed to do it

01:15:19,920 --> 01:15:25,520
open id connect um and

01:15:22,960 --> 01:15:27,199
uh yeah so so that's the first like

01:15:25,520 --> 01:15:29,440
number one issue of certificates and why

01:15:27,199 --> 01:15:32,880
it's an anti-pattern for users

01:15:29,440 --> 01:15:36,080
um groups are almost unusable

01:15:32,880 --> 01:15:38,560
you can embed groups into a certificate

01:15:36,080 --> 01:15:40,400
however you have to do it in the subject

01:15:38,560 --> 01:15:41,600
of your distinguished name on the

01:15:40,400 --> 01:15:44,239
certificate of your

01:15:41,600 --> 01:15:44,719
so you know it's like cn equals mark

01:15:44,239 --> 01:15:47,440
comma

01:15:44,719 --> 01:15:48,320
o u equals group one comma o u equals

01:15:47,440 --> 01:15:52,400
group two

01:15:48,320 --> 01:15:53,840
right um now here's the problem is that

01:15:52,400 --> 01:15:56,640
the next bullet

01:15:53,840 --> 01:15:58,560
becomes there's no revocation support so

01:15:56,640 --> 01:16:00,880
certificates will generally live

01:15:58,560 --> 01:16:02,080
anywhere from like a couple of minutes

01:16:00,880 --> 01:16:05,280
sometimes

01:16:02,080 --> 01:16:07,840
to three years you know a piv

01:16:05,280 --> 01:16:09,360
certificate i think is actually good

01:16:07,840 --> 01:16:11,520
i think a piv certificate is good for

01:16:09,360 --> 01:16:14,560
like five years

01:16:11,520 --> 01:16:17,520
um and so uh you know

01:16:14,560 --> 01:16:20,320
certificate the the pki infrastructure

01:16:17,520 --> 01:16:22,239
relies upon this concept of revocation

01:16:20,320 --> 01:16:23,840
where there is literally just a giant

01:16:22,239 --> 01:16:25,360
list that says here are all the

01:16:23,840 --> 01:16:26,320
certificates that while their dates are

01:16:25,360 --> 01:16:28,880
still valid

01:16:26,320 --> 01:16:30,000
we have revoked them kubernetes doesn't

01:16:28,880 --> 01:16:31,760
know how to

01:16:30,000 --> 01:16:33,920
look at any of those lists it doesn't

01:16:31,760 --> 01:16:35,679
know how to pull it from an ldap server

01:16:33,920 --> 01:16:37,440
it doesn't know how to pull from file

01:16:35,679 --> 01:16:39,600
it doesn't know how to make a request to

01:16:37,440 --> 01:16:40,480
a oscp responder which is kind of a

01:16:39,600 --> 01:16:43,040
service

01:16:40,480 --> 01:16:44,640
to check if the certificate's valid um

01:16:43,040 --> 01:16:46,880
so once that certificate's been issued

01:16:44,640 --> 01:16:48,719
the only way to revoke it

01:16:46,880 --> 01:16:50,000
to make sure that it's never abused

01:16:48,719 --> 01:16:54,480
again

01:16:50,000 --> 01:16:56,880
is to re-key the entire cluster

01:16:54,480 --> 01:16:58,480
um cluster is a really important word in

01:16:56,880 --> 01:17:02,560
that aspect right

01:16:58,480 --> 01:17:05,199
um so you know that there is no way

01:17:02,560 --> 01:17:06,560
you know a lot of the scenarios that

01:17:05,199 --> 01:17:07,840
i've seen where people are like well i

01:17:06,560 --> 01:17:09,040
want to use certificates i want to use

01:17:07,840 --> 01:17:10,800
certificates

01:17:09,040 --> 01:17:12,640
um you know i'm going to generate this

01:17:10,800 --> 01:17:14,080
mechanism that will

01:17:12,640 --> 01:17:16,000
quickly generate a certificate could be

01:17:14,080 --> 01:17:18,880
short-lived okay

01:17:16,000 --> 01:17:20,080
you now have a token but nobody else has

01:17:18,880 --> 01:17:22,159
reviewed your protocol

01:17:20,080 --> 01:17:23,280
so let's go back to openid connect the

01:17:22,159 --> 01:17:24,080
other thing that's really important to

01:17:23,280 --> 01:17:27,520
understand

01:17:24,080 --> 01:17:28,880
is that for the really secure scenarios

01:17:27,520 --> 01:17:30,159
where you want to use hardware-based

01:17:28,880 --> 01:17:33,679
tokens

01:17:30,159 --> 01:17:37,760
like my friend here on my yuba key

01:17:33,679 --> 01:17:40,880
right that uses a protocol

01:17:37,760 --> 01:17:44,000
called pkcs11 to actually talk

01:17:40,880 --> 01:17:46,159
to the hardware control doesn't

01:17:44,000 --> 01:17:47,760
support that kuba the api server doesn't

01:17:46,159 --> 01:17:49,760
support i know there was somebody who's

01:17:47,760 --> 01:17:51,199
looking to implement it a while back

01:17:49,760 --> 01:17:54,960
maybe they have

01:17:51,199 --> 01:17:56,080
um but it just you're not getting any of

01:17:54,960 --> 01:17:57,840
the goodness

01:17:56,080 --> 01:17:59,120
as certificate authentication when it

01:17:57,840 --> 01:18:02,880
comes to kubernetes when you

01:17:59,120 --> 01:18:05,040
go that route um so it's good for

01:18:02,880 --> 01:18:06,640
great for break glass scenarios because

01:18:05,040 --> 01:18:08,000
it doesn't require a third-party

01:18:06,640 --> 01:18:11,040
identity provider

01:18:08,000 --> 01:18:12,480
the way open id connect does uh but for

01:18:11,040 --> 01:18:16,239
day-to-day usage

01:18:12,480 --> 01:18:18,239
it really is an anti-pattern if you have

01:18:16,239 --> 01:18:19,360
really strong certificates that you want

01:18:18,239 --> 01:18:23,199
to use

01:18:19,360 --> 01:18:24,840
guess what you can set up your open id

01:18:23,199 --> 01:18:27,199
connect

01:18:24,840 --> 01:18:27,920
provider to authenticate with

01:18:27,199 --> 01:18:29,840
certificates

01:18:27,920 --> 01:18:31,280
instead of a username password and you

01:18:29,840 --> 01:18:32,719
get the best of both worlds or you could

01:18:31,280 --> 01:18:35,360
use impersonation

01:18:32,719 --> 01:18:36,159
where you use a reverse proxy that knows

01:18:35,360 --> 01:18:37,600
how to do

01:18:36,159 --> 01:18:39,920
all those things with validating

01:18:37,600 --> 01:18:42,080
certificates looks up the user in a

01:18:39,920 --> 01:18:45,120
directory or database of some kind

01:18:42,080 --> 01:18:47,360
and then injects the headers so

01:18:45,120 --> 01:18:49,600
you can use certificates if you really

01:18:47,360 --> 01:18:52,080
really want to

01:18:49,600 --> 01:18:54,239
it's just don't use it directly with the

01:18:52,080 --> 01:18:55,199
api server use it either with openid

01:18:54,239 --> 01:18:58,239
connect

01:18:55,199 --> 01:19:00,000
or with impersonation i'll check here

01:18:58,239 --> 01:19:04,480
anybody in the q a

01:19:00,000 --> 01:19:04,480
no all right how are we doing on time

01:19:04,880 --> 01:19:08,880
all right we have talked a lot about

01:19:07,199 --> 01:19:11,520
identifying who you

01:19:08,880 --> 01:19:13,600
are now we're going to talk about our

01:19:11,520 --> 01:19:17,840
back

01:19:13,600 --> 01:19:20,640
and what you can do so

01:19:17,840 --> 01:19:21,440
the uh the concept here is you define a

01:19:20,640 --> 01:19:24,320
role

01:19:21,440 --> 01:19:26,480
and a role in kubernetes is a list of

01:19:24,320 --> 01:19:30,480
things that you can do

01:19:26,480 --> 01:19:34,000
with certain objects i can get list

01:19:30,480 --> 01:19:38,960
whatever a verb on a noun

01:19:34,000 --> 01:19:42,159
a pod set of pods secrets etc

01:19:38,960 --> 01:19:44,239
and then you associate that with

01:19:42,159 --> 01:19:45,600
namespaced objects then you have cluster

01:19:44,239 --> 01:19:48,400
roles which

01:19:45,600 --> 01:19:49,679
go for the entire cluster you then take

01:19:48,400 --> 01:19:51,840
that permission

01:19:49,679 --> 01:19:53,840
and you bind it to somebody hence role

01:19:51,840 --> 01:19:55,040
binding or cluster role binding

01:19:53,840 --> 01:19:57,199
so let's say you want to build a

01:19:55,040 --> 01:19:58,800
permission that lets a service account

01:19:57,199 --> 01:20:00,640
read your logs for

01:19:58,800 --> 01:20:02,080
whatever reason or something of that

01:20:00,640 --> 01:20:04,000
effect you would

01:20:02,080 --> 01:20:07,040
bind it to you would bind your

01:20:04,000 --> 01:20:09,120
permission to the service account

01:20:07,040 --> 01:20:10,239
you can cross the stream so you can go

01:20:09,120 --> 01:20:13,840
you can define a

01:20:10,239 --> 01:20:17,280
role binding that has

01:20:13,840 --> 01:20:20,639
a cluster role so a great ins

01:20:17,280 --> 01:20:23,440
uh um a great um example of this

01:20:20,639 --> 01:20:24,480
is the admin cluster role this is a

01:20:23,440 --> 01:20:26,880
namespace

01:20:24,480 --> 01:20:28,719
role cluster role all of the objects are

01:20:26,880 --> 01:20:32,239
inside of namespaces

01:20:28,719 --> 01:20:34,719
uh to say okay you this is your domain

01:20:32,239 --> 01:20:34,719
use it

01:20:35,040 --> 01:20:39,679
but you associate to it with a cluster

01:20:38,719 --> 01:20:43,360
role so this is why

01:20:39,679 --> 01:20:44,080
you're not defining a new role for every

01:20:43,360 --> 01:20:46,080
single name

01:20:44,080 --> 01:20:49,600
space that is an admin you're able to

01:20:46,080 --> 01:20:49,600
reuse that cluster rule

01:20:50,159 --> 01:20:53,360
so what are the things you can do with

01:20:51,360 --> 01:20:56,159
rbac api management

01:20:53,360 --> 01:20:57,760
api access and scope things at the name

01:20:56,159 --> 01:21:01,679
space level

01:20:57,760 --> 01:21:04,639
you can do custom r back verbs

01:21:01,679 --> 01:21:06,320
i'm not a huge fan of doing it unless

01:21:04,639 --> 01:21:10,159
you're talking about something specific

01:21:06,320 --> 01:21:13,600
to crs custom resources and operators

01:21:10,159 --> 01:21:15,360
our back is really good at what it does

01:21:13,600 --> 01:21:17,920
it falls apart quickly if you try to go

01:21:15,360 --> 01:21:20,400
outside of that area

01:21:17,920 --> 01:21:21,440
um i think pod security policies is a

01:21:20,400 --> 01:21:25,280
great example where

01:21:21,440 --> 01:21:26,400
our back um by using our back it kind of

01:21:25,280 --> 01:21:28,639
fell down a little bit that was one of

01:21:26,400 --> 01:21:31,120
the i think the downfalls of

01:21:28,639 --> 01:21:32,719
of pod security policies uh and we'll

01:21:31,120 --> 01:21:33,440
talk about pod security policies here in

01:21:32,719 --> 01:21:35,679
a bit

01:21:33,440 --> 01:21:36,560
um things that you cannot do with our

01:21:35,679 --> 01:21:40,080
back

01:21:36,560 --> 01:21:42,480
you cannot say everything except

01:21:40,080 --> 01:21:43,840
um this one comes up a lot i see this

01:21:42,480 --> 01:21:45,760
question all the time

01:21:43,840 --> 01:21:48,719
can i write a policy that gives access

01:21:45,760 --> 01:21:52,400
to everything except these two secrets

01:21:48,719 --> 01:21:54,400
no you have to enumerate every single

01:21:52,400 --> 01:21:56,080
thing you want to grant access to

01:21:54,400 --> 01:21:57,920
there are really good reasons for that

01:21:56,080 --> 01:21:58,560
one it makes for a simpler authorization

01:21:57,920 --> 01:22:00,239
engine

01:21:58,560 --> 01:22:02,239
simpler authorization engine means it's

01:22:00,239 --> 01:22:05,360
easier to keep track of easier to audit

01:22:02,239 --> 01:22:07,360
more secure but two

01:22:05,360 --> 01:22:09,360
uh the law of unattended consequences

01:22:07,360 --> 01:22:12,400
can really bite you in the rear

01:22:09,360 --> 01:22:13,199
with uh with our back so imagine for a

01:22:12,400 --> 01:22:14,880
second

01:22:13,199 --> 01:22:16,719
that you've deployed this cluster and

01:22:14,880 --> 01:22:19,280
you've designed a

01:22:16,719 --> 01:22:21,040
uh role binding that that lets you do

01:22:19,280 --> 01:22:24,320
everything except

01:22:21,040 --> 01:22:25,840
um you know edit these three secrets

01:22:24,320 --> 01:22:28,960
in the namespace because those secrets

01:22:25,840 --> 01:22:32,000
are important for your infrastructure

01:22:28,960 --> 01:22:33,840
well uh somebody says hey you know what

01:22:32,000 --> 01:22:34,719
i just found this great operator from

01:22:33,840 --> 01:22:37,600
amazon

01:22:34,719 --> 01:22:38,000
that lets me deploy amazon resources

01:22:37,600 --> 01:22:40,880
from a

01:22:38,000 --> 01:22:42,159
custom resource definition inside of

01:22:40,880 --> 01:22:44,000
kubernetes so i

01:22:42,159 --> 01:22:45,600
all of our users can just create some

01:22:44,000 --> 01:22:49,120
yaml

01:22:45,600 --> 01:22:50,320
and deploy an rds database or deploy a

01:22:49,120 --> 01:22:51,760
load balancer

01:22:50,320 --> 01:22:54,080
and now we don't have to worry about

01:22:51,760 --> 01:22:55,440
snow tickets awesome so you deploy it

01:22:54,080 --> 01:22:58,320
well guess what

01:22:55,440 --> 01:23:00,239
you have now authorized everybody to be

01:22:58,320 --> 01:23:02,719
able

01:23:00,239 --> 01:23:03,679
to deploy something to aws with whatever

01:23:02,719 --> 01:23:06,639
token you

01:23:03,679 --> 01:23:08,960
the you're now leveraging um so it's

01:23:06,639 --> 01:23:12,239
really really important if your

01:23:08,960 --> 01:23:15,520
security model relies on accept

01:23:12,239 --> 01:23:17,040
you know everything except this um

01:23:15,520 --> 01:23:19,520
you should probably really rethink your

01:23:17,040 --> 01:23:21,440
security model

01:23:19,520 --> 01:23:22,960
uh now our back does not handle

01:23:21,440 --> 01:23:24,239
everything there are some things that

01:23:22,960 --> 01:23:27,120
are back just won't do

01:23:24,239 --> 01:23:27,520
you can write custom authorization don't

01:23:27,120 --> 01:23:29,920
um

01:23:27,520 --> 01:23:31,280
kind of in that same boat as custom

01:23:29,920 --> 01:23:34,560
authentication

01:23:31,280 --> 01:23:37,120
uh you know chances are you're not going

01:23:34,560 --> 01:23:37,120
to do it right

01:23:37,360 --> 01:23:40,880
security is hard it's really easy to do

01:23:39,600 --> 01:23:42,719
it wrong

01:23:40,880 --> 01:23:44,000
you can also do admission web hooks now

01:23:42,719 --> 01:23:47,120
this is different than

01:23:44,000 --> 01:23:49,600
custom authorization you can define

01:23:47,120 --> 01:23:50,480
a custom web hook that goes on top of

01:23:49,600 --> 01:23:53,679
our back

01:23:50,480 --> 01:23:55,280
so you can say things like um if

01:23:53,679 --> 01:23:57,520
you know you can rely on our back as

01:23:55,280 --> 01:23:59,199
that first layer and then your admission

01:23:57,520 --> 01:24:01,520
web hook is a second layer

01:23:59,199 --> 01:24:04,560
um so you're now not creating the single

01:24:01,520 --> 01:24:04,560
point of failure

01:24:07,120 --> 01:24:13,679
no q a so let's take a look

01:24:10,719 --> 01:24:15,679
at what an rbac authorization looks like

01:24:13,679 --> 01:24:21,199
so i color coded it here

01:24:15,679 --> 01:24:22,960
try and map it to your url

01:24:21,199 --> 01:24:24,960
so here we're talking about that we

01:24:22,960 --> 01:24:27,280
wanted to make a

01:24:24,960 --> 01:24:28,320
cluster role around certificate signing

01:24:27,280 --> 01:24:31,440
quests

01:24:28,320 --> 01:24:32,800
so this red bit here matches down with

01:24:31,440 --> 01:24:36,080
the red bit here just

01:24:32,800 --> 01:24:37,760
the stuff right true of every object the

01:24:36,080 --> 01:24:39,679
kind metadata

01:24:37,760 --> 01:24:41,360
where it is doesn't really apply

01:24:39,679 --> 01:24:43,760
directly to this

01:24:41,360 --> 01:24:45,440
next the next bit the blue part the

01:24:43,760 --> 01:24:47,520
rules

01:24:45,440 --> 01:24:49,040
you can see here where things kind of

01:24:47,520 --> 01:24:52,880
sort of line up

01:24:49,040 --> 01:24:55,520
where this is what we want to apply

01:24:52,880 --> 01:24:56,960
to so our rule is going to apply to

01:24:55,520 --> 01:24:59,440
certificates our api

01:24:56,960 --> 01:25:00,000
is certificates dot io but notice how

01:24:59,440 --> 01:25:03,600
there's no

01:25:00,000 --> 01:25:04,880
beta here and you could include beta you

01:25:03,600 --> 01:25:07,679
don't have to

01:25:04,880 --> 01:25:10,239
it's not a one-to-one map and then

01:25:07,679 --> 01:25:13,040
finally your resources

01:25:10,239 --> 01:25:14,800
when you call a certificate signing

01:25:13,040 --> 01:25:17,679
request

01:25:14,800 --> 01:25:19,920
your resource is going to look like this

01:25:17,679 --> 01:25:22,000
right and then it's going to be slash

01:25:19,920 --> 01:25:24,080
the name of your certificate sign-in

01:25:22,000 --> 01:25:26,880
request and then there could be another

01:25:24,080 --> 01:25:28,480
request after that called approval but

01:25:26,880 --> 01:25:29,679
you'll see that that doesn't really line

01:25:28,480 --> 01:25:31,600
up here right you're not going to have

01:25:29,679 --> 01:25:34,480
certificate request slash approval

01:25:31,600 --> 01:25:35,280
slash item it's going to be slash item

01:25:34,480 --> 01:25:38,800
slash

01:25:35,280 --> 01:25:41,040
approval so it is not a one to one which

01:25:38,800 --> 01:25:43,040
is where debugging arbac can get really

01:25:41,040 --> 01:25:45,199
messy

01:25:43,040 --> 01:25:46,320
and then green here is the verbs there

01:25:45,199 --> 01:25:48,400
are no verbs here

01:25:46,320 --> 01:25:51,440
now the verbs are what you can actually

01:25:48,400 --> 01:25:55,840
do to this object

01:25:51,440 --> 01:25:57,000
there is a verb the verbs don't line up

01:25:55,840 --> 01:26:00,239
perfectly to

01:25:57,000 --> 01:26:03,679
http actions

01:26:00,239 --> 01:26:06,560
a get in a list are

01:26:03,679 --> 01:26:07,679
basically the same thing but you know

01:26:06,560 --> 01:26:10,880
there is not a

01:26:07,679 --> 01:26:13,920
get um you know a

01:26:10,880 --> 01:26:15,840
verb it's a it's a read verb right so

01:26:13,920 --> 01:26:17,600
it's not a one to one this is the first

01:26:15,840 --> 01:26:19,199
area where i think you could run into a

01:26:17,600 --> 01:26:23,840
lot of confusion

01:26:19,199 --> 01:26:23,840
into building r back i know i have

01:26:24,639 --> 01:26:29,679
no q a all right um so let's look at the

01:26:28,560 --> 01:26:31,360
role binding

01:26:29,679 --> 01:26:33,360
so this doesn't really map to the url

01:26:31,360 --> 01:26:37,280
right because the url

01:26:33,360 --> 01:26:40,159
we're referencing a role

01:26:37,280 --> 01:26:41,600
and so here's our role orchestra certs

01:26:40,159 --> 01:26:44,000
and here's our subject we have our

01:26:41,600 --> 01:26:46,000
service account

01:26:44,000 --> 01:26:47,199
the name of the account and the name

01:26:46,000 --> 01:26:48,960
space open usn

01:26:47,199 --> 01:26:50,719
now here's something to think about when

01:26:48,960 --> 01:26:54,239
you're designing your r back policies

01:26:50,719 --> 01:26:57,520
let's go back to authentication

01:26:54,239 --> 01:26:59,920
if you're going to reference every user

01:26:57,520 --> 01:27:01,280
inside of your our back policies one the

01:26:59,920 --> 01:27:04,400
subject list can get big

01:27:01,280 --> 01:27:06,800
kind of quick right but

01:27:04,400 --> 01:27:08,880
the other thing to point out is that

01:27:06,800 --> 01:27:11,520
when you're using open id connect

01:27:08,880 --> 01:27:12,239
your subject is not open yours and dash

01:27:11,520 --> 01:27:17,520
operator

01:27:12,239 --> 01:27:19,600
or like kate stash lab it's your issuer

01:27:17,520 --> 01:27:21,199
kate stash lab i think i have an example

01:27:19,600 --> 01:27:24,320
of that in

01:27:21,199 --> 01:27:26,800
a couple of slides so

01:27:24,320 --> 01:27:28,960
um if you move your identity provider

01:27:26,800 --> 01:27:30,719
you've got to change

01:27:28,960 --> 01:27:32,960
your entire ar all your our back

01:27:30,719 --> 01:27:36,880
bindings additionally you can't

01:27:32,960 --> 01:27:39,679
search and say who has access

01:27:36,880 --> 01:27:41,280
based on you know who what our back

01:27:39,679 --> 01:27:43,280
bindings does this user have

01:27:41,280 --> 01:27:44,480
you have to enumerate every single

01:27:43,280 --> 01:27:47,040
binding and

01:27:44,480 --> 01:27:48,880
figure out which one they're a member of

01:27:47,040 --> 01:27:51,280
that can get messy kind of quick

01:27:48,880 --> 01:27:52,639
um when you want to de-provision someone

01:27:51,280 --> 01:27:53,679
you know we always talk about onboarding

01:27:52,639 --> 01:27:57,600
onboarding onboarding

01:27:53,679 --> 01:28:00,560
about off-boarding right my job function

01:27:57,600 --> 01:28:03,520
changes i leave i get walked out right

01:28:00,560 --> 01:28:04,360
not a happy thought it happens how

01:28:03,520 --> 01:28:08,239
quickly can you

01:28:04,360 --> 01:28:08,800
deauthorize access um well if you gotta

01:28:08,239 --> 01:28:10,719
go through

01:28:08,800 --> 01:28:11,920
every single rbac binding to figure out

01:28:10,719 --> 01:28:14,960
where the user

01:28:11,920 --> 01:28:15,440
is that can be painful whereas if you're

01:28:14,960 --> 01:28:18,159
using

01:28:15,440 --> 01:28:19,760
groups and embedding those groups inside

01:28:18,159 --> 01:28:21,920
of your tokens

01:28:19,760 --> 01:28:24,560
you now have much cleaner our back

01:28:21,920 --> 01:28:24,560
policies

01:28:25,600 --> 01:28:29,679
um and we started to talk about the the

01:28:27,840 --> 01:28:32,159
subject type so service account

01:28:29,679 --> 01:28:35,360
it's scoped to a specific namespace user

01:28:32,159 --> 01:28:38,800
like i said for oidc you have to prepend

01:28:35,360 --> 01:28:40,560
with the issuer um you know group is

01:28:38,800 --> 01:28:41,920
really where you want to be

01:28:40,560 --> 01:28:43,440
unless you're doing service accounts

01:28:41,920 --> 01:28:44,719
because you can't add service accounts

01:28:43,440 --> 01:28:46,639
to groups

01:28:44,719 --> 01:28:48,320
there are some specific groups for

01:28:46,639 --> 01:28:49,199
service accounts but those get generated

01:28:48,320 --> 01:28:51,360
automatically

01:28:49,199 --> 01:28:52,960
you can't have arbitrary groups and

01:28:51,360 --> 01:28:55,679
service account memberships because

01:28:52,960 --> 01:28:56,639
there are no groups in kubernetes

01:28:55,679 --> 01:28:59,199
there's no group

01:28:56,639 --> 01:28:59,199
object

01:28:59,679 --> 01:29:07,040
so really the best practices down here

01:29:02,960 --> 01:29:07,040
using groups inside of your binding

01:29:07,520 --> 01:29:11,679
so lab two let's put some of this to the

01:29:10,880 --> 01:29:13,920
test so

01:29:11,679 --> 01:29:14,719
what we're gonna do now is a couple of

01:29:13,920 --> 01:29:17,360
things

01:29:14,719 --> 01:29:18,639
first thing we're gonna do is enable the

01:29:17,360 --> 01:29:21,679
um

01:29:18,639 --> 01:29:26,239
uh we're gonna go ahead and enable the

01:29:21,679 --> 01:29:27,679
um uh um audit log

01:29:26,239 --> 01:29:30,239
and then once we've enabled the audit

01:29:27,679 --> 01:29:34,239
log we're gonna go ahead and debug

01:29:30,239 --> 01:29:34,239
the process of um

01:29:34,400 --> 01:29:37,679
designing our back policy

01:29:37,760 --> 01:29:41,440
so just like before i'm going to go

01:29:39,199 --> 01:29:43,840
ahead and do this um

01:29:41,440 --> 01:29:46,639
as well and i'm going to go ahead and

01:29:43,840 --> 01:29:46,639
close this down

01:29:48,960 --> 01:29:54,560
and so on the training we are now on lab

01:29:52,080 --> 01:29:55,840
two step one so the first thing i'm

01:29:54,560 --> 01:29:58,000
gonna do is i'm gonna log

01:29:55,840 --> 01:29:58,000
in

01:30:05,199 --> 01:30:09,040
with this make an s user

01:30:09,280 --> 01:30:12,880
as an unprivileged user i don't have

01:30:11,280 --> 01:30:13,840
access to anything you see i don't have

01:30:12,880 --> 01:30:17,840
anything over here

01:30:13,840 --> 01:30:17,840
so let's go ahead and um

01:30:18,880 --> 01:30:24,320
of course i forgot to uh uh

01:30:21,920 --> 01:30:24,320
um

01:30:25,760 --> 01:30:32,480
i forgot to authorize user okay so

01:30:28,800 --> 01:30:35,760
um what we are then going to do

01:30:32,480 --> 01:30:37,280
is going to go request access i'm going

01:30:35,760 --> 01:30:38,880
to go name space here and we'll talk

01:30:37,280 --> 01:30:43,199
about this a little bit

01:30:38,880 --> 01:30:43,199
and just pick one and add to your card

01:30:46,840 --> 01:31:02,159
submit

01:30:49,040 --> 01:31:06,080
go ahead and log out

01:31:02,159 --> 01:31:06,080
in as our case lab user

01:31:09,120 --> 01:31:13,840
got this little open approval up here

01:31:11,199 --> 01:31:13,840
click review

01:31:15,199 --> 01:31:19,280
approve the request confirm approval

01:31:21,199 --> 01:31:27,600
all right so sorry about that

01:31:24,480 --> 01:31:31,840
hope you were able to follow that uh

01:31:27,600 --> 01:31:31,840
now i'm going to log in with make ns

01:31:33,440 --> 01:31:37,199
now you'll see i have kubernetes token

01:31:35,360 --> 01:31:39,840
access

01:31:37,199 --> 01:31:45,840
so i'm going to go ahead and log in with

01:31:39,840 --> 01:31:45,840
coop control

01:31:47,760 --> 01:31:51,199
so what's the name spaces

01:31:54,239 --> 01:32:00,000
so once i have that access now another

01:31:57,360 --> 01:32:03,520
way that you can go about doing that

01:32:00,000 --> 01:32:08,320
a little quicker where did

01:32:03,520 --> 01:32:08,320
okay there it is so login

01:32:09,440 --> 01:32:13,840
as kate's lab

01:32:15,679 --> 01:32:18,159
not now

01:32:19,440 --> 01:32:31,360
go ahead and click on operators console

01:32:27,600 --> 01:32:34,320
search pick that go to kubernetes

01:32:31,360 --> 01:32:34,320
namespace viewers

01:32:34,960 --> 01:32:37,280
run

01:32:39,120 --> 01:32:45,360
test temp pre-approval approved

01:32:42,960 --> 01:32:45,360
test

01:32:47,520 --> 01:32:54,880
and that will also go ahead and enable

01:32:49,679 --> 01:32:59,840
the user and then you can log out

01:32:54,880 --> 01:33:08,320
you can log out and then log in as

01:32:59,840 --> 01:33:11,280
make an s so

01:33:08,320 --> 01:33:11,280
grab tokens

01:33:11,840 --> 01:33:19,520
and same thing coup control get

01:33:16,639 --> 01:33:19,520
er i'm sorry

01:33:20,840 --> 01:33:26,560
pods

01:33:22,960 --> 01:33:30,000
namespaces there we go all right

01:33:26,560 --> 01:33:32,080
okay so um now we have a user that is

01:33:30,000 --> 01:33:36,000
not able to do a whole heck of

01:33:32,080 --> 01:33:40,639
a lot so um

01:33:36,000 --> 01:33:40,639
let's show off trying to create

01:33:44,159 --> 01:33:49,280
creating a namespace that did not work

01:33:46,080 --> 01:33:51,520
real well you can see

01:33:49,280 --> 01:33:52,400
bunch of information about what didn't

01:33:51,520 --> 01:33:57,600
work

01:33:52,400 --> 01:33:57,600
now you'll notice here this is the user

01:33:58,159 --> 01:34:04,159
identity provider hash

01:34:01,360 --> 01:34:07,040
make an s that can get really hard to

01:34:04,159 --> 01:34:09,760
manage when you do it at the user level

01:34:07,040 --> 01:34:11,360
um and the the messages have gotten a

01:34:09,760 --> 01:34:12,960
little better but this is

01:34:11,360 --> 01:34:14,639
this is still kind of difficult because

01:34:12,960 --> 01:34:18,239
when you look at this

01:34:14,639 --> 01:34:21,440
error message it doesn't line up

01:34:18,239 --> 01:34:26,960
directly to the information inside

01:34:21,440 --> 01:34:26,960
of the role binding

01:34:27,040 --> 01:34:30,480
so um what we're now going to do is go

01:34:29,920 --> 01:34:33,760
ahead and

01:34:30,480 --> 01:34:38,400
enable the audit log

01:34:33,760 --> 01:34:40,480
so i'm on step four now most

01:34:38,400 --> 01:34:41,679
modern when i say modern right because

01:34:40,480 --> 01:34:42,880
we've been doing this for what five

01:34:41,679 --> 01:34:47,040
years

01:34:42,880 --> 01:34:49,280
most modern kubernetes implementations

01:34:47,040 --> 01:34:51,440
the api server runs as a container

01:34:49,280 --> 01:34:56,239
what's called static container

01:34:51,440 --> 01:34:56,239
so like when we edited our um

01:34:56,320 --> 01:34:58,639
our

01:34:59,360 --> 01:35:05,360
api server configuration it was a a

01:35:02,719 --> 01:35:07,360
a container that had to restart so in

01:35:05,360 --> 01:35:08,080
order to enable the audit log in kube

01:35:07,360 --> 01:35:09,840
adm

01:35:08,080 --> 01:35:12,480
you need to make sure that there are

01:35:09,840 --> 01:35:14,800
places for it to get written to

01:35:12,480 --> 01:35:16,080
on your local system and then mount that

01:35:14,800 --> 01:35:18,080
into your

01:35:16,080 --> 01:35:19,119
uh api server so that's what we're gonna

01:35:18,080 --> 01:35:21,440
do here in step

01:35:19,119 --> 01:35:21,440
four

01:35:24,080 --> 01:35:31,679
so we're gonna create where the logs go

01:35:29,600 --> 01:35:34,639
we're going to create a place to store

01:35:31,679 --> 01:35:34,639
the configuration

01:35:35,119 --> 01:35:41,040
now we went ahead and put together a

01:35:36,960 --> 01:35:41,040
policy for you just to make life easy

01:35:41,520 --> 01:35:47,600
and then finally we're going to update

01:35:43,679 --> 01:35:47,600
our api server configuration

01:35:48,480 --> 01:35:52,480
now the first thing we're going to need

01:35:49,679 --> 01:35:57,840
to do is add our server flag so this is

01:35:52,480 --> 01:35:57,840
what's going to tell the api server

01:36:03,199 --> 01:36:05,600
oops

01:36:06,480 --> 01:36:11,840
jump the shark there

01:36:13,760 --> 01:36:18,560
so this is going to tell the api server

01:36:15,600 --> 01:36:22,239
hey generate an audit log

01:36:18,560 --> 01:36:22,719
and this is where next thing we need to

01:36:22,239 --> 01:36:28,239
do

01:36:22,719 --> 01:36:28,239
is go down to our volumes

01:36:29,840 --> 01:36:39,840
or volume mounts rather excuse me

01:36:32,960 --> 01:36:39,840
and we need to add this

01:36:41,119 --> 01:36:47,119
and of course because yaml

01:36:44,560 --> 01:36:53,840
we need to make sure that we get our

01:36:47,119 --> 01:36:53,840
spacing correct

01:36:57,440 --> 01:37:02,320
and then finally we come down to the

01:36:59,199 --> 01:37:05,600
volume section here

01:37:02,320 --> 01:37:10,320
and we add some host paths

01:37:05,600 --> 01:37:21,760
so that way we can go ahead and pull up

01:37:10,320 --> 01:37:35,840
or talk to our

01:37:21,760 --> 01:37:35,840
make sure everything lines up

01:37:36,480 --> 01:37:40,480
all right so if i've done everything

01:37:46,840 --> 01:37:52,480
correctly

01:37:49,440 --> 01:37:54,560
and we can see that the api server has

01:37:52,480 --> 01:37:58,159
restarted

01:37:54,560 --> 01:37:58,159
and we are up and running

01:37:58,320 --> 01:38:03,840
now let's go ahead and take a look at

01:37:59,600 --> 01:38:03,840
our logs

01:38:06,159 --> 01:38:09,520
and you can see we're generating a bunch

01:38:07,760 --> 01:38:11,040
of logs now these logs aren't json

01:38:09,520 --> 01:38:13,360
format

01:38:11,040 --> 01:38:15,520
i am not kiana reeves i cannot read this

01:38:13,360 --> 01:38:17,440
stuff as it scrolls by

01:38:15,520 --> 01:38:20,719
but we're going to try doing this again

01:38:17,440 --> 01:38:23,360
and this time on step 5

01:38:20,719 --> 01:38:25,440
we are going to see what happens so i'm

01:38:23,360 --> 01:38:28,639
going to

01:38:25,440 --> 01:38:28,639
go ahead and

01:38:29,280 --> 01:38:34,400
try creating my namespace still fails

01:38:32,560 --> 01:38:36,960
but this time let's see what happens in

01:38:34,400 --> 01:38:36,960
our logs

01:38:39,760 --> 01:38:45,600
so we actually have i'm to do this make

01:38:43,840 --> 01:38:48,800
it a little easier to read

01:38:45,600 --> 01:38:51,840
we have some status objects come through

01:38:48,800 --> 01:38:52,159
events that actually tell us everything

01:38:51,840 --> 01:38:58,880
we

01:38:52,159 --> 01:39:02,719
need to be able to authorize this access

01:38:58,880 --> 01:39:04,960
but here's the thing uh

01:39:02,719 --> 01:39:05,760
that's kind of tedious and difficult and

01:39:04,960 --> 01:39:07,280
i'm lazy

01:39:05,760 --> 01:39:09,280
so we're gonna use a great tool by

01:39:07,280 --> 01:39:12,400
naming a man named jordan liggett

01:39:09,280 --> 01:39:14,719
if you have ever asked a question on the

01:39:12,400 --> 01:39:16,000
slack channel he probably will be there

01:39:14,719 --> 01:39:19,760
to help answer it

01:39:16,000 --> 01:39:22,000
great guy called audit to our back

01:39:19,760 --> 01:39:23,840
and so what audit rbac will do is

01:39:22,000 --> 01:39:26,000
actually take this

01:39:23,840 --> 01:39:28,960
and generate a policy binding for you so

01:39:26,000 --> 01:39:28,960
let's go ahead and do that

01:39:31,600 --> 01:39:34,719
so i'm going to do this

01:39:34,880 --> 01:39:42,159
clear and then because our

01:39:38,880 --> 01:39:45,119
user is in there

01:39:42,159 --> 01:39:47,600
we want to make sure to update our ip

01:39:45,119 --> 01:39:47,600
address

01:39:49,119 --> 01:39:52,960
another reason why doing things directly

01:39:52,080 --> 01:39:55,280
by user

01:39:52,960 --> 01:39:56,480
is a terrible idea so now we have this

01:39:55,280 --> 01:39:59,760
new r back

01:39:56,480 --> 01:39:59,760
let's take a look at it real quick

01:40:00,000 --> 01:40:05,280
now there's a bunch of stuff here

01:40:03,520 --> 01:40:08,960
see if i can make it work a little bit

01:40:05,280 --> 01:40:12,560
more now all right

01:40:08,960 --> 01:40:12,560
oops don't want to make it that big

01:40:14,560 --> 01:40:19,280
um creates a cluster role

01:40:19,840 --> 01:40:25,360
for namespaces creates our role buying

01:40:23,440 --> 01:40:27,520
now of course this is a

01:40:25,360 --> 01:40:28,880
lot of really hard stuff to read because

01:40:27,520 --> 01:40:32,159
you can't put url

01:40:28,880 --> 01:40:35,360
you know full urls inside of uh

01:40:32,159 --> 01:40:36,320
inside of the yaml as annotations but

01:40:35,360 --> 01:40:41,199
this is now

01:40:36,320 --> 01:40:41,199
created a full policy binding for you

01:40:42,000 --> 01:40:45,280
so let's come back here

01:40:46,639 --> 01:40:53,119
uh where'd i go i'm running

01:40:50,880 --> 01:40:54,000
short on time so i'm going to go ahead

01:40:53,119 --> 01:40:57,280
and

01:40:54,000 --> 01:40:57,280
move through this kind of quick

01:40:57,520 --> 01:41:04,000
so i'm going to switch contexts here

01:41:00,080 --> 01:41:07,840
real quick

01:41:04,000 --> 01:41:11,600
and i'm going to now apply

01:41:07,840 --> 01:41:11,600
our our back

01:41:15,679 --> 01:41:19,840
and now

01:41:22,320 --> 01:41:27,360
i'm going to reset my cube config so now

01:41:24,639 --> 01:41:27,360
i'm back to

01:41:30,960 --> 01:41:37,199
i'm back to my original user and i'm

01:41:34,080 --> 01:41:37,199
going to try to

01:41:45,119 --> 01:41:51,360
we've now been able to actually debug uh

01:41:48,320 --> 01:41:53,040
our our back implementation i i swear by

01:41:51,360 --> 01:41:55,199
the audit to rbac tool

01:41:53,040 --> 01:41:57,280
um i will often use it as a starting

01:41:55,199 --> 01:41:59,119
point for trying to design because

01:41:57,280 --> 01:42:01,280
um there are just sometimes i will stare

01:41:59,119 --> 01:42:04,159
at our back bindings and feel like

01:42:01,280 --> 01:42:05,280
oh my god but this should just work and

01:42:04,159 --> 01:42:14,400
it doesn't

01:42:05,280 --> 01:42:17,520
um so what do we got with q a

01:42:14,400 --> 01:42:19,199
then apply permissions to the aid

01:42:17,520 --> 01:42:20,639
so you guys integrate with openshift

01:42:19,199 --> 01:42:21,440
user management or back it's a grind

01:42:20,639 --> 01:42:22,880
very cumbersome

01:42:21,440 --> 01:42:25,199
open shift do not understand why you

01:42:22,880 --> 01:42:28,400
have to log into the cluster first

01:42:25,199 --> 01:42:31,920
then apply permissions to the

01:42:28,400 --> 01:42:33,440
ad user um i think

01:42:31,920 --> 01:42:35,040
where some of the confusion is coming

01:42:33,440 --> 01:42:35,760
from and i haven't explained it real

01:42:35,040 --> 01:42:37,760
well

01:42:35,760 --> 01:42:39,920
is the permissions don't actually live

01:42:37,760 --> 01:42:43,199
in ad in this particular setup

01:42:39,920 --> 01:42:45,360
they're living in a database um and so

01:42:43,199 --> 01:42:47,280
uh we don't actually give you access to

01:42:45,360 --> 01:42:48,000
anything until you've been authorized to

01:42:47,280 --> 01:42:50,960
access

01:42:48,000 --> 01:42:52,159
something so that song and dance which i

01:42:50,960 --> 01:42:55,840
think is what you're

01:42:52,159 --> 01:42:59,360
referring to in the very beginning um

01:42:55,840 --> 01:42:59,360
where i actually had to log in

01:43:00,159 --> 01:43:03,360
oops come back here

01:43:03,840 --> 01:43:07,280
i actually had to log in and go and

01:43:05,920 --> 01:43:10,239
request access

01:43:07,280 --> 01:43:12,159
that's because none of these permissions

01:43:10,239 --> 01:43:15,360
exist inside of active directory

01:43:12,159 --> 01:43:16,800
we do have our login portal which will

01:43:15,360 --> 01:43:17,520
just take permissions from active

01:43:16,800 --> 01:43:20,400
directory

01:43:17,520 --> 01:43:23,600
and put them directly into and map them

01:43:20,400 --> 01:43:25,119
directly into our back bindings

01:43:23,600 --> 01:43:26,320
we didn't go with this one here because

01:43:25,119 --> 01:43:27,360
we wanted to show the power of

01:43:26,320 --> 01:43:28,719
automation

01:43:27,360 --> 01:43:32,000
uh which we're going to be talking about

01:43:28,719 --> 01:43:36,000
next with a best

01:43:32,000 --> 01:43:36,960
practice when it comes to authorization

01:43:36,000 --> 01:43:39,199
and so we're actually going to talk

01:43:36,960 --> 01:43:42,880
about that really really quick before we

01:43:39,199 --> 01:43:42,880
move on to pod security policies

01:43:44,080 --> 01:43:50,159
because we are running short on time um

01:43:48,080 --> 01:43:51,760
so we just went through all this this is

01:43:50,159 --> 01:43:52,560
the actual building out i'm not gonna

01:43:51,760 --> 01:43:55,679
repeat that

01:43:52,560 --> 01:43:57,600
automate automate automate um so when i

01:43:55,679 --> 01:43:59,360
say automate automate automate this is

01:43:57,600 --> 01:44:02,880
what i mean

01:43:59,360 --> 01:44:06,719
instead of creating a uh namespace then

01:44:02,880 --> 01:44:10,400
creating our back bindings um

01:44:06,719 --> 01:44:12,320
oh by openshift with itself um

01:44:10,400 --> 01:44:14,080
let's talk afterwards so i can make sure

01:44:12,320 --> 01:44:19,119
to answer your question

01:44:14,080 --> 01:44:21,679
correctly um

01:44:19,119 --> 01:44:23,360
so uh you know one of the keys without

01:44:21,679 --> 01:44:24,880
with kubernetes is automation

01:44:23,360 --> 01:44:26,400
you want to create a new namespace don't

01:44:24,880 --> 01:44:27,199
create the namespace with the groups and

01:44:26,400 --> 01:44:28,960
the roles all

01:44:27,199 --> 01:44:30,880
manually have something that does it for

01:44:28,960 --> 01:44:33,920
you example

01:44:30,880 --> 01:44:36,000
go to create a new namespace uh who am i

01:44:33,920 --> 01:44:37,600
logged in as

01:44:36,000 --> 01:44:40,960
make an s i'm just going to log out of

01:44:37,600 --> 01:44:40,960
this to make my life easier

01:44:43,600 --> 01:44:49,840
so i'm going to log in as my kate's lab

01:44:46,840 --> 01:44:49,840
user

01:44:50,320 --> 01:44:54,239
all right so you want to create a new

01:44:51,600 --> 01:44:54,239
namespace

01:44:54,639 --> 01:44:57,600
some new name

01:44:58,159 --> 01:45:04,639
some new namespace test submit the

01:45:02,400 --> 01:45:06,560
request

01:45:04,639 --> 01:45:08,480
you then need to somebody then needs to

01:45:06,560 --> 01:45:08,960
approve it obviously this wouldn't be

01:45:08,480 --> 01:45:11,119
you

01:45:08,960 --> 01:45:11,119
but

01:45:12,719 --> 01:45:17,280
and so you're going to give a reason

01:45:14,320 --> 01:45:18,719
test now you confirm that request gets

01:45:17,280 --> 01:45:21,119
created

01:45:18,719 --> 01:45:22,560
and now what's happening is that we're

01:45:21,119 --> 01:45:23,119
creating the namespace we're creating

01:45:22,560 --> 01:45:24,800
the cl

01:45:23,119 --> 01:45:26,480
the role bindings we're creating the

01:45:24,800 --> 01:45:28,880
groups inside the database

01:45:26,480 --> 01:45:30,159
so that uh moving forward if somebody

01:45:28,880 --> 01:45:32,239
wants to request access

01:45:30,159 --> 01:45:33,920
to that namespace they don't have to go

01:45:32,239 --> 01:45:36,080
through me as the it person

01:45:33,920 --> 01:45:38,480
they go to the owner of the namespace so

01:45:36,080 --> 01:45:40,639
you as the the owner get out of the loop

01:45:38,480 --> 01:45:42,320
that type of automation whether you do

01:45:40,639 --> 01:45:43,600
it through us or you do it through some

01:45:42,320 --> 01:45:45,920
other mechanism

01:45:43,600 --> 01:45:48,239
becomes really important because now all

01:45:45,920 --> 01:45:51,360
of your name spaces are created

01:45:48,239 --> 01:45:54,239
in a consistent way so like here's uh my

01:45:51,360 --> 01:45:55,920
some new name space right so it just

01:45:54,239 --> 01:45:58,080
that got created for you

01:45:55,920 --> 01:46:00,239
the role bindings are there for you to

01:45:58,080 --> 01:46:01,520
be able to start onboarding users into

01:46:00,239 --> 01:46:02,800
groups we create the groups in the

01:46:01,520 --> 01:46:06,800
database

01:46:02,800 --> 01:46:09,199
um and so that kind of repetition makes

01:46:06,800 --> 01:46:10,560
so much easier to manage and that's what

01:46:09,199 --> 01:46:13,840
i mean by automate

01:46:10,560 --> 01:46:13,840
automate automate

01:46:14,320 --> 01:46:19,199
use groups for user access again you saw

01:46:16,880 --> 01:46:20,719
that big gnarly user string

01:46:19,199 --> 01:46:22,159
if you use groups you're going to make

01:46:20,719 --> 01:46:23,760
your life so much easier the rbac

01:46:22,159 --> 01:46:25,199
bindings become so much simpler because

01:46:23,760 --> 01:46:27,199
now you can automate

01:46:25,199 --> 01:46:28,560
the creation of those bindings without

01:46:27,199 --> 01:46:31,280
having to

01:46:28,560 --> 01:46:32,719
update them all the time you could use

01:46:31,280 --> 01:46:37,360
things like git ops but

01:46:32,719 --> 01:46:37,360
again it just automate everything

01:46:38,000 --> 01:46:41,199
and then externalize service accounts

01:46:40,320 --> 01:46:45,360
where you can so

01:46:41,199 --> 01:46:48,000
where i say this saying here is

01:46:45,360 --> 01:46:49,840
not necessarily the word service account

01:46:48,000 --> 01:46:52,480
but service accounts so

01:46:49,840 --> 01:46:55,520
um i've got a lot of customers that use

01:46:52,480 --> 01:46:58,960
privileged access management

01:46:55,520 --> 01:47:03,280
systems and uh they would

01:46:58,960 --> 01:47:05,199
um they don't they didn't want to use

01:47:03,280 --> 01:47:06,560
service accounts for their ci cd they

01:47:05,199 --> 01:47:08,320
already had

01:47:06,560 --> 01:47:09,840
invested hundreds of thousands of

01:47:08,320 --> 01:47:11,760
dollars in this privileged access

01:47:09,840 --> 01:47:14,719
management system

01:47:11,760 --> 01:47:16,639
so we said okay um let's use that as

01:47:14,719 --> 01:47:18,639
your service accounts and they were much

01:47:16,639 --> 01:47:20,560
happier with it save them a lot of time

01:47:18,639 --> 01:47:21,920
so just look for things like that

01:47:20,560 --> 01:47:23,119
especially when you're in the enterprise

01:47:21,920 --> 01:47:25,840
world

01:47:23,119 --> 01:47:27,920
and then reuse cluster roles when

01:47:25,840 --> 01:47:30,480
possible

01:47:27,920 --> 01:47:32,639
and we talked about our main amp spaces

01:47:30,480 --> 01:47:34,239
so pod security policies i'm going to

01:47:32,639 --> 01:47:35,600
kind of run through this one really

01:47:34,239 --> 01:47:38,880
quick i want to be

01:47:35,600 --> 01:47:38,880
mindful of time

01:47:39,679 --> 01:47:42,880
your rbac protects your api server pod

01:47:42,080 --> 01:47:46,159
security

01:47:42,880 --> 01:47:49,040
policies protect the nodes so you know

01:47:46,159 --> 01:47:52,560
making sure that a node cannot array a

01:47:49,040 --> 01:47:54,080
pod cannot hurt a node um yeah

01:47:52,560 --> 01:47:55,600
all of us had our account information

01:47:54,080 --> 01:47:58,639
from equifax uh um

01:47:55,600 --> 01:48:01,119
uh was it equifax one of them um

01:47:58,639 --> 01:48:02,880
stolen right um that was because of a

01:48:01,119 --> 01:48:04,880
struts api vulnerability

01:48:02,880 --> 01:48:06,800
struts api vulnerability gets chained

01:48:04,880 --> 01:48:09,760
into a local code exploit

01:48:06,800 --> 01:48:13,040
all suddenly your java web app is now a

01:48:09,760 --> 01:48:15,119
vector to be able to infect your node

01:48:13,040 --> 01:48:17,360
um there's this concept that pod

01:48:15,119 --> 01:48:19,840
security policies are hard

01:48:17,360 --> 01:48:20,560
they're really not as hard as they may

01:48:19,840 --> 01:48:23,040
seem

01:48:20,560 --> 01:48:24,159
what makes them really hard is the fact

01:48:23,040 --> 01:48:26,560
that most people

01:48:24,159 --> 01:48:27,520
you know we spent 30 plus years saying

01:48:26,560 --> 01:48:30,320
don't use root

01:48:27,520 --> 01:48:31,600
right before we start with containers

01:48:30,320 --> 01:48:33,360
and then we start with content it's like

01:48:31,600 --> 01:48:36,080
no root for everybody

01:48:33,360 --> 01:48:37,600
um so what ends up happening is you

01:48:36,080 --> 01:48:39,920
start getting these containers

01:48:37,600 --> 01:48:41,760
that are from docker hub that run as

01:48:39,920 --> 01:48:44,880
root and won't run

01:48:41,760 --> 01:48:46,400
in pod security policy setup um so if

01:48:44,880 --> 01:48:47,440
you're familiar with openshift at all

01:48:46,400 --> 01:48:50,080
you'll know that

01:48:47,440 --> 01:48:51,679
they that red hat will produce a lot of

01:48:50,080 --> 01:48:53,760
the containers that

01:48:51,679 --> 01:48:54,960
the official docker containers have

01:48:53,760 --> 01:48:58,719
because those

01:48:54,960 --> 01:49:01,840
official docker containers run as root

01:48:58,719 --> 01:49:02,560
um now here's the problem for a lot of

01:49:01,840 --> 01:49:04,719
reasons

01:49:02,560 --> 01:49:06,000
uh pod security policies have been

01:49:04,719 --> 01:49:09,440
deprecated

01:49:06,000 --> 01:49:10,239
the original plan excuse me was not to

01:49:09,440 --> 01:49:14,239
remove them

01:49:10,239 --> 01:49:17,840
until a replacement was decided upon

01:49:14,239 --> 01:49:20,639
um starting in 1.19

01:49:17,840 --> 01:49:22,400
i think it was either 1.19 or 1.18 there

01:49:20,639 --> 01:49:23,920
was a blanket policy put in place for

01:49:22,400 --> 01:49:26,960
apis that says look

01:49:23,920 --> 01:49:28,000
an api does not move out of its current

01:49:26,960 --> 01:49:30,239
version

01:49:28,000 --> 01:49:32,320
towards ga so if it doesn't go from beta

01:49:30,239 --> 01:49:35,280
to alpha alpha to beta beta to

01:49:32,320 --> 01:49:36,639
you know with uh ga within three cycles

01:49:35,280 --> 01:49:38,560
it needs to be removed

01:49:36,639 --> 01:49:40,480
that's you know because nobody really

01:49:38,560 --> 01:49:42,880
wants ingress to stay in beta for five

01:49:40,480 --> 01:49:46,239
years again

01:49:42,880 --> 01:49:47,760
and since there will be no successor

01:49:46,239 --> 01:49:49,920
to pod security pilot or there will be

01:49:47,760 --> 01:49:52,159
no updates to pod security policies

01:49:49,920 --> 01:49:53,440
they will be removed in 1.22 so i guess

01:49:52,159 --> 01:49:54,480
that does put pressure on the rest of

01:49:53,440 --> 01:49:55,599
the industry to come up with a

01:49:54,480 --> 01:49:58,239
replacement

01:49:55,599 --> 01:49:59,440
i have not found a replacement that i

01:49:58,239 --> 01:50:02,560
really like yet

01:49:59,440 --> 01:50:05,040
um i still go a pod security policy

01:50:02,560 --> 01:50:08,840
so i'm looking forward to what the

01:50:05,040 --> 01:50:11,840
industry comes up with for replacing

01:50:08,840 --> 01:50:11,840
psps

01:50:13,679 --> 01:50:21,360
definition of pod security policy um

01:50:18,400 --> 01:50:23,199
really not that crazy uh you know what

01:50:21,360 --> 01:50:24,960
can you run ask

01:50:23,199 --> 01:50:26,719
what can you do what kind of volumes do

01:50:24,960 --> 01:50:29,520
you have access to

01:50:26,719 --> 01:50:30,080
um you know often what you'll end up

01:50:29,520 --> 01:50:33,920
seeing

01:50:30,080 --> 01:50:36,480
is uh um a lot of vendors are creating

01:50:33,920 --> 01:50:38,800
pod security policies so for instance

01:50:36,480 --> 01:50:40,960
um the ingress controller from engine x

01:50:38,800 --> 01:50:43,520
ships with a pod security policy that

01:50:40,960 --> 01:50:43,520
you can apply

01:50:44,960 --> 01:50:48,800
and then you apply it using a cost rule

01:50:47,040 --> 01:50:49,440
this to me is where i think a big part

01:50:48,800 --> 01:50:51,760
of the

01:50:49,440 --> 01:50:53,280
what's hard about pod security policies

01:50:51,760 --> 01:50:54,080
is because there's absolutely nothing

01:50:53,280 --> 01:50:57,360
intuitive

01:50:54,080 --> 01:50:58,800
about this design i get why they did it

01:50:57,360 --> 01:51:01,840
this way

01:50:58,800 --> 01:51:05,760
because you need to somehow tie

01:51:01,840 --> 01:51:07,840
your pod security policy to a pod

01:51:05,760 --> 01:51:09,119
and and figure out how which ones are

01:51:07,840 --> 01:51:12,320
potentially applicable

01:51:09,119 --> 01:51:14,159
applicable and ways to authorize it

01:51:12,320 --> 01:51:15,760
um but i think it was kind of a square

01:51:14,159 --> 01:51:20,480
peg round hole

01:51:15,760 --> 01:51:22,159
with our back

01:51:20,480 --> 01:51:24,159
so here's where things get really hero

01:51:22,159 --> 01:51:27,040
pod security policies

01:51:24,159 --> 01:51:30,239
is your pod security policy is

01:51:27,040 --> 01:51:32,880
authorized based on a union of the

01:51:30,239 --> 01:51:35,520
the identity that deployed it and the

01:51:32,880 --> 01:51:38,639
identity it runs as its service account

01:51:35,520 --> 01:51:41,040
but the identity that deploys the pod

01:51:38,639 --> 01:51:42,080
is not the person who created the

01:51:41,040 --> 01:51:44,320
deployment

01:51:42,080 --> 01:51:45,360
so we don't deploy pods anymore for the

01:51:44,320 --> 01:51:47,599
most part right

01:51:45,360 --> 01:51:49,360
we deploy higher level constructs

01:51:47,599 --> 01:51:52,960
deployments stateful sets

01:51:49,360 --> 01:51:55,440
jobs which then are

01:51:52,960 --> 01:51:56,400
intercepted by controllers or watched by

01:51:55,440 --> 01:51:59,119
controllers

01:51:56,400 --> 01:52:00,560
which then will set up your pod for you

01:51:59,119 --> 01:52:04,080
and control your pod

01:52:00,560 --> 01:52:06,000
well the identity of the creator

01:52:04,080 --> 01:52:08,239
is not the person who created the

01:52:06,000 --> 01:52:10,400
deployment it's the controller

01:52:08,239 --> 01:52:12,239
who created the pod and that's where

01:52:10,400 --> 01:52:16,560
things can really get hairy with your

01:52:12,239 --> 01:52:20,239
authorization process

01:52:16,560 --> 01:52:22,000
okay um lab three pod security policies

01:52:20,239 --> 01:52:23,760
do a quick time check here see if i can

01:52:22,000 --> 01:52:27,520
pull this off

01:52:23,760 --> 01:52:29,199
uh i think i can pull it off

01:52:27,520 --> 01:52:31,840
see here this is actually a really quick

01:52:29,199 --> 01:52:31,840
lab

01:52:37,440 --> 01:52:42,800
um you know i'm actually going to

01:52:40,480 --> 01:52:44,000
leave this one for another time because

01:52:42,800 --> 01:52:47,119
we still have some really good

01:52:44,000 --> 01:52:49,119
content to cover um i suspect that

01:52:47,119 --> 01:52:52,400
probably lost a lot of people

01:52:49,119 --> 01:52:54,719
unfortunately with the last lab so let's

01:52:52,400 --> 01:52:56,320
come back here

01:52:54,719 --> 01:52:57,760
anybody who wants to be able to do this

01:52:56,320 --> 01:52:59,440
afterwards just give me a shout we'll

01:52:57,760 --> 01:53:02,960
figure out a way to handle it

01:52:59,440 --> 01:53:04,000
um so best practices with pod security

01:53:02,960 --> 01:53:06,080
policies

01:53:04,000 --> 01:53:08,080
pressure your vendors for same defaults

01:53:06,080 --> 01:53:09,920
that's you know i'm getting

01:53:08,080 --> 01:53:11,520
so many props here to red hat they don't

01:53:09,920 --> 01:53:12,719
actually use pod security policies they

01:53:11,520 --> 01:53:14,080
have their own thing in open shift

01:53:12,719 --> 01:53:16,159
called sccs

01:53:14,080 --> 01:53:17,679
same concept though um slightly

01:53:16,159 --> 01:53:21,040
different implementation

01:53:17,679 --> 01:53:22,800
but they have sane defaults unless you

01:53:21,040 --> 01:53:25,119
need to interact with a host

01:53:22,800 --> 01:53:27,920
chances are your pod does not need

01:53:25,119 --> 01:53:30,560
privileged access

01:53:27,920 --> 01:53:31,920
uh and so if your your your vendor has

01:53:30,560 --> 01:53:34,000
some same defaults that will make your

01:53:31,920 --> 01:53:37,040
life a lot easier

01:53:34,000 --> 01:53:39,280
don't run your containers as root

01:53:37,040 --> 01:53:40,800
uh when in doubt you want to test

01:53:39,280 --> 01:53:42,639
something out see if it's going to work

01:53:40,800 --> 01:53:44,239
in most environments

01:53:42,639 --> 01:53:46,880
i'll give another shout out to red hat

01:53:44,239 --> 01:53:50,000
on this one go ahead and grab

01:53:46,880 --> 01:53:50,639
their openshift developer kit launch it

01:53:50,000 --> 01:53:53,119
on a

01:53:50,639 --> 01:53:54,400
who's what's on on a laptop you're good

01:53:53,119 --> 01:53:57,280
to go

01:53:54,400 --> 01:53:58,480
if it'll run on openshift it'll run on

01:53:57,280 --> 01:54:00,159
anything

01:53:58,480 --> 01:54:03,360
most constrained security environment

01:54:00,159 --> 01:54:06,320
out of the box that i've seen

01:54:03,360 --> 01:54:07,440
do not assign privileges to a default

01:54:06,320 --> 01:54:09,840
service account

01:54:07,440 --> 01:54:11,679
in the namespace you need your pod to

01:54:09,840 --> 01:54:13,040
run as a specific service account with

01:54:11,679 --> 01:54:14,719
specific privileges

01:54:13,040 --> 01:54:16,400
create the service account assign the

01:54:14,719 --> 01:54:17,119
privileges that will be much easier to

01:54:16,400 --> 01:54:18,960
audit

01:54:17,119 --> 01:54:20,480
and then just like before with with our

01:54:18,960 --> 01:54:23,840
back automate

01:54:20,480 --> 01:54:23,840
automate automate

01:54:24,159 --> 01:54:27,199
admission web hooks this lets you extend

01:54:26,239 --> 01:54:31,599
things

01:54:27,199 --> 01:54:33,040
um total five hour course on its own so

01:54:31,599 --> 01:54:33,520
many things you can do with open policy

01:54:33,040 --> 01:54:36,639
engine

01:54:33,520 --> 01:54:38,880
gatekeeper uh

01:54:36,639 --> 01:54:40,400
but like i said it passes in the

01:54:38,880 --> 01:54:41,199
identity of the requester which could be

01:54:40,400 --> 01:54:43,119
a controller

01:54:41,199 --> 01:54:44,800
so you gotta be careful about who you

01:54:43,119 --> 01:54:47,599
what you're writing authorization

01:54:44,800 --> 01:54:48,239
rules based off of and this is the exact

01:54:47,599 --> 01:54:52,000
same

01:54:48,239 --> 01:54:53,840
um scenario um

01:54:52,000 --> 01:54:55,840
real quick war story i've got a customer

01:54:53,840 --> 01:55:00,239
using okd and kerberos

01:54:55,840 --> 01:55:01,920
uh we ended up having to write um

01:55:00,239 --> 01:55:03,440
uh we ended up having to write custom

01:55:01,920 --> 01:55:05,599
control uh custom

01:55:03,440 --> 01:55:07,599
emission web hooks to be able to

01:55:05,599 --> 01:55:11,280
validate you know things like

01:55:07,599 --> 01:55:14,000
um a persistent volume was being claimed

01:55:11,280 --> 01:55:16,080
by the correct user not just any user

01:55:14,000 --> 01:55:17,119
that that was waiting for it

01:55:16,080 --> 01:55:18,880
because you could write a persistent

01:55:17,119 --> 01:55:20,719
volume claim that it just sits there and

01:55:18,880 --> 01:55:21,920
waits for a persistent volume to become

01:55:20,719 --> 01:55:24,960
available

01:55:21,920 --> 01:55:27,440
um and

01:55:24,960 --> 01:55:28,000
so we ran this became a big issue with

01:55:27,440 --> 01:55:30,080
us

01:55:28,000 --> 01:55:32,320
where the identity of the user that was

01:55:30,080 --> 01:55:35,360
passed in was the controller

01:55:32,320 --> 01:55:38,639
not the uh not the

01:55:35,360 --> 01:55:40,639
user openshift they have their own

01:55:38,639 --> 01:55:43,760
identity provider built in

01:55:40,639 --> 01:55:45,520
so even though i'm logged into the

01:55:43,760 --> 01:55:48,880
openshift identity provider

01:55:45,520 --> 01:55:51,360
the group information that or the the

01:55:48,880 --> 01:55:53,679
information about the user the auxiliary

01:55:51,360 --> 01:55:56,400
information that i might use

01:55:53,679 --> 01:55:57,440
to perform authorizations from doesn't

01:55:56,400 --> 01:55:59,199
actually make it in

01:55:57,440 --> 01:56:00,560
because i'm getting the identity from

01:55:59,199 --> 01:56:02,880
openshift's built-in

01:56:00,560 --> 01:56:03,840
identity so you can get a little hairy

01:56:02,880 --> 01:56:06,960
there too

01:56:03,840 --> 01:56:09,199
um all worked but you know a lot of

01:56:06,960 --> 01:56:11,440
intricate details you gotta be mindful

01:56:09,199 --> 01:56:11,440
of

01:56:13,360 --> 01:56:17,599
so um thank you very much um we've got a

01:56:16,080 --> 01:56:19,119
couple minutes left let's see if i can

01:56:17,599 --> 01:56:21,119
answer any questions real quick

01:56:19,119 --> 01:56:22,719
otherwise i'll make myself available

01:56:21,119 --> 01:56:24,320
after the fact um we'll

01:56:22,719 --> 01:56:26,159
figure out how that works i think

01:56:24,320 --> 01:56:28,560
there's a place we can go in the

01:56:26,159 --> 01:56:29,280
conference system um find me on the web

01:56:28,560 --> 01:56:32,000
and twitter

01:56:29,280 --> 01:56:32,639
uh all our stuff's on github including

01:56:32,000 --> 01:56:35,440
um

01:56:32,639 --> 01:56:36,719
we'll shoot out the link uh the lab for

01:56:35,440 --> 01:56:37,520
this so if you want to set up this lab

01:56:36,719 --> 01:56:39,760
at home

01:56:37,520 --> 01:56:40,639
you have a linux server you have active

01:56:39,760 --> 01:56:43,440
directory

01:56:40,639 --> 01:56:44,880
you can actually get this lab set up um

01:56:43,440 --> 01:56:46,159
at home it's just an ansible playbook

01:56:44,880 --> 01:56:48,159
you're up and running

01:56:46,159 --> 01:56:49,760
uh and then some really shameless

01:56:48,159 --> 01:56:52,080
self-promotion

01:56:49,760 --> 01:56:52,960
i have co-authored a book on kubernetes

01:56:52,080 --> 01:56:55,679
and docker

01:56:52,960 --> 01:56:57,599
for the enterprise so in addition to the

01:56:55,679 --> 01:57:01,040
deep dives of what we did today

01:56:57,599 --> 01:57:05,520
um you're talking about uh backups

01:57:01,040 --> 01:57:08,960
um uh uh backups log management

01:57:05,520 --> 01:57:11,040
um real deep dive on how to do uh how to

01:57:08,960 --> 01:57:13,760
write opa policies

01:57:11,040 --> 01:57:15,679
um yeah as you can tell we weren't able

01:57:13,760 --> 01:57:18,159
to get through two hours here

01:57:15,679 --> 01:57:19,440
um you know the the topics that we had

01:57:18,159 --> 01:57:21,040
so these are a lot of really great

01:57:19,440 --> 01:57:22,159
topics and it all culminates with

01:57:21,040 --> 01:57:25,119
provisioning

01:57:22,159 --> 01:57:26,239
a platform so integrating tecton open

01:57:25,119 --> 01:57:29,520
unison

01:57:26,239 --> 01:57:32,719
um uh

01:57:29,520 --> 01:57:33,599
argo cd and git lab to kind of build a

01:57:32,719 --> 01:57:35,440
automated

01:57:33,599 --> 01:57:36,800
platform you see all how all the objects

01:57:35,440 --> 01:57:37,679
relate to each other in the web hooks

01:57:36,800 --> 01:57:40,080
and whatnot

01:57:37,679 --> 01:57:42,639
so um that comes out on november 6

01:57:40,080 --> 01:57:45,280
available for pre-order now

01:57:42,639 --> 01:57:46,880
use that code right there 25 kubernetes

01:57:45,280 --> 01:57:49,360
for

01:57:46,880 --> 01:57:50,639
a 25 discount i think until november

01:57:49,360 --> 01:57:52,080
15th

01:57:50,639 --> 01:57:54,080
so with that i will see if there's

01:57:52,080 --> 01:57:54,719
anything in the q and a what do we got

01:57:54,080 --> 01:57:58,560
here

01:57:54,719 --> 01:58:00,880
uh yes i am going to do that right this

01:57:58,560 --> 01:58:00,880
second

01:58:02,159 --> 01:58:08,719
uh github.com

01:58:06,000 --> 01:58:08,719
tremolo

01:58:10,520 --> 01:58:15,920
security uh

01:58:13,280 --> 01:58:15,920
idm

01:58:18,480 --> 01:58:24,960
here we go so here is the

01:58:23,440 --> 01:58:27,840
i'm going to put this in the chat so

01:58:24,960 --> 01:58:27,840
everybody gets it

01:58:32,560 --> 01:58:36,639
all right and then um

01:58:39,679 --> 01:58:43,679
i will be that has a link to the slides

01:58:41,840 --> 01:58:45,520
i've actually updated the slides

01:58:43,679 --> 01:58:48,320
a bit um so i'm going to go ahead and

01:58:45,520 --> 01:58:51,440
post those to the slideshare

01:58:48,320 --> 01:58:53,440
uh any other questions

01:58:51,440 --> 01:58:55,119
i know we're coming right out down to

01:58:53,440 --> 01:58:58,960
the wire i like to leave a little more

01:58:55,119 --> 01:58:58,960
time for questions and answers

01:59:00,159 --> 01:59:03,840
i'm gonna go ahead and

01:59:04,560 --> 01:59:08,719
do just a little more shameless self

01:59:06,159 --> 01:59:13,119
promotion because why not right

01:59:08,719 --> 01:59:17,840
and then here is the discount code

01:59:13,119 --> 01:59:17,840
all right um

01:59:18,400 --> 01:59:28,159

YouTube URL: https://www.youtube.com/watch?v=i2jCISeKryg


