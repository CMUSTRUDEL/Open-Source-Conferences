Title: Understanding Distributed Systems with OpenTelemetry - Austin Parker & Liz Fong-Jones
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Austin Parker, LightStep & Liz Fong-Jones, Honeycomb
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: Microservices have broken monitoring tools and practices. Traditional methods of application logging and host-based metrics can’t provide accurate and timely signals for issues impacting production. OpenTelemetry solves this dilemma by providing a single set of APIs, SDKs, and automatic instrumentation tools that give you the ability to understand your distributed system and the performance of individual services within it.

In this workshop, you’ll learn about the history and theory behind OpenTelemetry and why it’s essential to developing and deploying modern software. We’ll learn by doing, taking an existing microservices application and instrumenting it for observability using the many tools OpenTelemetry provides. We’ll use open source tools, like Jaeger and Prometheus, to ingest this telemetry data and show how you can analyze it in order to understand the performance of the application and identify performance regressions in your software.

You’ll walk away from this workshop with an understanding of how OpenTelemetry works, how it benefits you, and how you can quickly instrument your own software for observability.
Captions: 
	00:00:04,960 --> 00:00:09,440
hello

00:00:06,160 --> 00:00:12,880
hello and hi

00:00:09,440 --> 00:00:16,400
jones and this is uh austin parker

00:00:12,880 --> 00:00:18,400
coming at you live from well i am in

00:00:16,400 --> 00:00:21,520
gorgeous upstate new york

00:00:18,400 --> 00:00:23,199
and i'm in vancouver bc in canada um

00:00:21,520 --> 00:00:25,199
i hope people are having a wonderful day

00:00:23,199 --> 00:00:26,560
wherever you're located um i know that

00:00:25,199 --> 00:00:28,400
it's getting a little late for those of

00:00:26,560 --> 00:00:30,080
you on the east coast

00:00:28,400 --> 00:00:31,920
so let's go ahead and get started with

00:00:30,080 --> 00:00:34,960
this workshop um this is a

00:00:31,920 --> 00:00:35,360
interactive 90-minute workshop um you

00:00:34,960 --> 00:00:37,200
should

00:00:35,360 --> 00:00:39,280
expect well i presume you know you have

00:00:37,200 --> 00:00:40,239
a laptop or computer because otherwise

00:00:39,280 --> 00:00:41,360
you wouldn't be watching the zoom

00:00:40,239 --> 00:00:44,239
webinar

00:00:41,360 --> 00:00:45,520
um so we're going to offer you the

00:00:44,239 --> 00:00:46,960
chance to interact with the open

00:00:45,520 --> 00:00:48,320
collaboratory project but first of all

00:00:46,960 --> 00:00:49,120
let's tell you a little bit about what

00:00:48,320 --> 00:00:50,640
is what's it

00:00:49,120 --> 00:00:52,239
what's it about and what are we going to

00:00:50,640 --> 00:00:53,920
cover today

00:00:52,239 --> 00:00:55,520
yes so we're going to start off and tell

00:00:53,920 --> 00:00:57,039
you a little bit about observability

00:00:55,520 --> 00:00:58,559
how what open telemetry is and how it

00:00:57,039 --> 00:01:00,239
relates to it

00:00:58,559 --> 00:01:02,079
a lot of the sort of core concepts that

00:01:00,239 --> 00:01:04,559
you need in order to understand

00:01:02,079 --> 00:01:05,360
open telemetry and then finally we'll

00:01:04,559 --> 00:01:06,799
get around to

00:01:05,360 --> 00:01:09,520
actually using it instrumenting some

00:01:06,799 --> 00:01:12,799
software and sending your data places

00:01:09,520 --> 00:01:14,799
so first off um i'd love we would love

00:01:12,799 --> 00:01:16,720
to hear from people in the chat

00:01:14,799 --> 00:01:18,640
so we're going to ask a couple questions

00:01:16,720 --> 00:01:20,400
um you can also raise your hand

00:01:18,640 --> 00:01:23,360
uh there's a virtual razor hand button

00:01:20,400 --> 00:01:25,439
in the zoom webinar um

00:01:23,360 --> 00:01:26,880
raise your hand if in the zoom webinar

00:01:25,439 --> 00:01:30,560
if you write software

00:01:26,880 --> 00:01:32,079
uh of any kind give people a couple

00:01:30,560 --> 00:01:36,240
minutes to find that button

00:01:32,079 --> 00:01:39,280
three four five it's creeping up

00:01:36,240 --> 00:01:43,840
six good good good good

00:01:39,280 --> 00:01:46,640
seven okay good chunk of people here

00:01:43,840 --> 00:01:47,119
yeah how about if you operate software

00:01:46,640 --> 00:01:49,360
are you

00:01:47,119 --> 00:01:50,799
kind of uh an obviously more of an opsi

00:01:49,360 --> 00:01:53,840
person

00:01:50,799 --> 00:01:55,840
you deploy things you you do builds

00:01:53,840 --> 00:01:58,640
maybe you do both maybe you're in devops

00:01:55,840 --> 00:01:58,640
or your sre

00:02:00,000 --> 00:02:03,280
okay fair number of people these amount

00:02:02,240 --> 00:02:06,479
yep

00:02:03,280 --> 00:02:08,319
all right next one who has used any kind

00:02:06,479 --> 00:02:11,599
of distributed tracing before

00:02:08,319 --> 00:02:11,599
uh zipkin or

00:02:12,959 --> 00:02:17,200
maybe a home brewed tracing system

00:02:19,680 --> 00:02:23,599
okay well that's more than i expected uh

00:02:22,080 --> 00:02:24,879
we usually get pretty low numbers like

00:02:23,599 --> 00:02:26,400
it's usually less than 10

00:02:24,879 --> 00:02:27,920
like usually we find that people are

00:02:26,400 --> 00:02:29,680
tracing newbies which is you know

00:02:27,920 --> 00:02:32,879
exciting but also

00:02:29,680 --> 00:02:37,840
yeah uh what about open census anyone

00:02:32,879 --> 00:02:37,840
any open census users in the audience

00:02:37,920 --> 00:02:40,640
couple folks

00:02:41,760 --> 00:02:48,080
finally open tracing any open tracing

00:02:45,200 --> 00:02:48,080
users out there

00:02:49,760 --> 00:02:56,400
okay two three okay

00:02:52,800 --> 00:02:58,959
all right well

00:02:56,400 --> 00:02:59,680
so uh good news some of the stuff will

00:02:58,959 --> 00:03:02,239
be review

00:02:59,680 --> 00:03:02,879
for those of you who are familiar with

00:03:02,239 --> 00:03:04,319
this

00:03:02,879 --> 00:03:05,920
so but for those of you who are brand

00:03:04,319 --> 00:03:07,920
new we're happy to cover all the

00:03:05,920 --> 00:03:09,840
materials that you don't wind up lost

00:03:07,920 --> 00:03:11,680
guys i'd love to teach people about

00:03:09,840 --> 00:03:14,720
tracing

00:03:11,680 --> 00:03:18,000
so we've gone ahead and

00:03:14,720 --> 00:03:21,599
made these slides public

00:03:18,000 --> 00:03:22,959
if you go to hotel.to forward slash ato

00:03:21,599 --> 00:03:25,040
dash workshop you should be able to get

00:03:22,959 --> 00:03:27,920
the slides

00:03:25,040 --> 00:03:28,640
and follow along and also if you want to

00:03:27,920 --> 00:03:29,920
like

00:03:28,640 --> 00:03:31,599
if we don't get everything you'll be

00:03:29,920 --> 00:03:33,440
able to kind of pick up and and walk

00:03:31,599 --> 00:03:36,640
through it we walk through the entire

00:03:33,440 --> 00:03:38,000
uh code sample later it's super useful

00:03:36,640 --> 00:03:39,599
because like there may be

00:03:38,000 --> 00:03:41,280
places where we ask you to cut paste

00:03:39,599 --> 00:03:42,720
code out of the slides and you really

00:03:41,280 --> 00:03:44,799
don't want to be retyping that off of

00:03:42,720 --> 00:03:47,040
what we're presenting to you so

00:03:44,799 --> 00:03:48,799
please go ahead and take a moment uh

00:03:47,040 --> 00:03:50,480
jenny

00:03:48,799 --> 00:03:51,840
or vincent would you mind uh our lovely

00:03:50,480 --> 00:03:53,920
tas would you mind uh

00:03:51,840 --> 00:03:55,599
typing the url into the chat that way

00:03:53,920 --> 00:03:57,920
people can have it in case they lose it

00:03:55,599 --> 00:03:59,439
yeah also just while we're on this topic

00:03:57,920 --> 00:04:04,319
a real quick question

00:03:59,439 --> 00:04:04,319
uh is who if you're familiar with go

00:04:04,640 --> 00:04:14,640
raise your hand because our our sample

00:04:08,000 --> 00:04:17,840
code is in go we have other options but

00:04:14,640 --> 00:04:17,840
[Music]

00:04:18,639 --> 00:04:22,720
all right if you have another language

00:04:20,079 --> 00:04:25,199
you'd like to use feel free to uh

00:04:22,720 --> 00:04:26,160
paste it into the uh paste into the chat

00:04:25,199 --> 00:04:28,639
into the chat

00:04:26,160 --> 00:04:29,840
yeah and we can try to get you settled

00:04:28,639 --> 00:04:31,440
with that but goes

00:04:29,840 --> 00:04:34,000
going to be our primary instructional

00:04:31,440 --> 00:04:36,720
language for today yeah

00:04:34,000 --> 00:04:37,759
so let's go ahead and uh get into this a

00:04:36,720 --> 00:04:40,000
little more

00:04:37,759 --> 00:04:41,280
so again i'm austin parker i'm a

00:04:40,000 --> 00:04:43,199
principal developer advocate at

00:04:41,280 --> 00:04:45,040
lightstep

00:04:43,199 --> 00:04:46,880
and i'm liz haan jones i'm a principal

00:04:45,040 --> 00:04:50,320
developer advocate at honeycomb

00:04:46,880 --> 00:04:50,960
so and we're in the car so interestingly

00:04:50,320 --> 00:04:52,479
enough i

00:04:50,960 --> 00:04:53,840
i just want to highlight austin and i

00:04:52,479 --> 00:04:55,040
work companies that compete with each

00:04:53,840 --> 00:04:57,600
other uh but we're

00:04:55,040 --> 00:04:58,240
all friends because we want you to use

00:04:57,600 --> 00:05:00,639
open

00:04:58,240 --> 00:05:01,520
tooling that you can use to write to any

00:05:00,639 --> 00:05:03,120
tool uh

00:05:01,520 --> 00:05:04,800
so this is kind of in the spirit of all

00:05:03,120 --> 00:05:06,400
things open yeah

00:05:04,800 --> 00:05:07,840
also every other tuesday you can catch

00:05:06,400 --> 00:05:09,759
liz and i on

00:05:07,840 --> 00:05:11,680
twitch.tv forward slash open telemetry

00:05:09,759 --> 00:05:12,960
for open telemetry tuesdays where we

00:05:11,680 --> 00:05:16,320
talk about the project

00:05:12,960 --> 00:05:17,840
it's very fun you should follow us so

00:05:16,320 --> 00:05:20,160
let's get into the basics of

00:05:17,840 --> 00:05:23,680
observability

00:05:20,160 --> 00:05:25,600
why do we need observability um i think

00:05:23,680 --> 00:05:27,039
there's there's obviously discussions

00:05:25,600 --> 00:05:28,400
about this right like this is a

00:05:27,039 --> 00:05:30,960
i don't want to say moving target but

00:05:28,400 --> 00:05:31,280
what we're i think to distill it what we

00:05:30,960 --> 00:05:34,880
see

00:05:31,280 --> 00:05:35,199
is if you think about how do i know if

00:05:34,880 --> 00:05:36,639
my

00:05:35,199 --> 00:05:38,960
things are working right how do i know

00:05:36,639 --> 00:05:40,400
my software is working you know

00:05:38,960 --> 00:05:42,160
as the complexity of our systems

00:05:40,400 --> 00:05:44,720
increase then the

00:05:42,160 --> 00:05:46,320
necessity to have a different mental

00:05:44,720 --> 00:05:47,680
model and a different way of thinking

00:05:46,320 --> 00:05:49,600
about

00:05:47,680 --> 00:05:51,039
you know what is what does it mean for

00:05:49,600 --> 00:05:52,960
software to work has actually kind of

00:05:51,039 --> 00:05:53,840
emerged when you have a lot of different

00:05:52,960 --> 00:05:54,880
services

00:05:53,840 --> 00:05:56,639
they're going to interact with each

00:05:54,880 --> 00:05:58,880
other in ways that maybe you didn't

00:05:56,639 --> 00:06:01,759
expect

00:05:58,880 --> 00:06:03,199
this is where austin uh austin and z

00:06:01,759 --> 00:06:04,000
folks over at lifestep have coined this

00:06:03,199 --> 00:06:06,319
term called

00:06:04,000 --> 00:06:07,759
deep systems right where you no longer

00:06:06,319 --> 00:06:10,080
know what's above and below you

00:06:07,759 --> 00:06:11,759
because it's just too many layers deep

00:06:10,080 --> 00:06:13,280
yeah a buddy of mine

00:06:11,759 --> 00:06:14,639
named fred has a really good blog post

00:06:13,280 --> 00:06:15,919
about this which just talks about like

00:06:14,639 --> 00:06:18,160
if you think about it as a house

00:06:15,919 --> 00:06:18,960
you can look into the windows of a house

00:06:18,160 --> 00:06:20,960
and you can see

00:06:18,960 --> 00:06:22,479
only kind of a sliver of what's going on

00:06:20,960 --> 00:06:24,880
and if you think about

00:06:22,479 --> 00:06:25,840
a you know a micro service based system

00:06:24,880 --> 00:06:27,199
is this big very

00:06:25,840 --> 00:06:28,880
complicated house a lot of different

00:06:27,199 --> 00:06:30,240
wings you know

00:06:28,880 --> 00:06:31,600
if you're on the outside you can only

00:06:30,240 --> 00:06:33,039
really see what is going on through

00:06:31,600 --> 00:06:34,639
these little windows and

00:06:33,039 --> 00:06:36,240
those little windows might not give you

00:06:34,639 --> 00:06:39,600
a picture of what's actually happening

00:06:36,240 --> 00:06:40,720
inside so the sort of problem this gives

00:06:39,600 --> 00:06:41,600
you is you know failures don't

00:06:40,720 --> 00:06:43,680
necessarily repeat

00:06:41,600 --> 00:06:44,800
a something that failed one way one day

00:06:43,680 --> 00:06:45,360
might fail in a different way the next

00:06:44,800 --> 00:06:46,639
day it's

00:06:45,360 --> 00:06:48,639
you know you don't have this sort of

00:06:46,639 --> 00:06:50,240
cyclical nature of just being able to

00:06:48,639 --> 00:06:51,599
like figure out how it broke and then

00:06:50,240 --> 00:06:52,639
keep pushing that button to break it

00:06:51,599 --> 00:06:54,479
again

00:06:52,639 --> 00:06:57,039
when you have multi-tenant systems or

00:06:54,479 --> 00:06:58,240
you have you know

00:06:57,039 --> 00:07:01,520
things with a lot of different layers of

00:06:58,240 --> 00:07:04,240
abstraction right i have cooper you know

00:07:01,520 --> 00:07:06,160
kubernetes and various cloud resources

00:07:04,240 --> 00:07:07,280
and api third-party apis and all this

00:07:06,160 --> 00:07:10,160
sort of stuff

00:07:07,280 --> 00:07:11,599
that it's painful to debug the

00:07:10,160 --> 00:07:13,520
interactions between those

00:07:11,599 --> 00:07:16,080
we need something more than just plain

00:07:13,520 --> 00:07:20,160
old you know dashboards with

00:07:16,080 --> 00:07:23,360
time series data and you know log search

00:07:20,160 --> 00:07:25,440
yeah in particular those things tend to

00:07:23,360 --> 00:07:27,120
be hard to answer with traditional tools

00:07:25,440 --> 00:07:27,919
right like traditional monitoring tools

00:07:27,120 --> 00:07:29,199
will tell you

00:07:27,919 --> 00:07:30,960
whether the thing broke in the exact

00:07:29,199 --> 00:07:32,479
same way it broke you know a month ago

00:07:30,960 --> 00:07:34,319
two months ago three months ago but

00:07:32,479 --> 00:07:35,039
ideally we as engineers are solving new

00:07:34,319 --> 00:07:37,280
problems right

00:07:35,039 --> 00:07:39,360
rather than living groundhog day over

00:07:37,280 --> 00:07:41,039
and over and over again

00:07:39,360 --> 00:07:42,160
so often there's kind of this problem so

00:07:41,039 --> 00:07:44,240
the problem that we try to solve with

00:07:42,160 --> 00:07:46,000
observability is being able to find

00:07:44,240 --> 00:07:47,280
commonalities in our systems right to

00:07:46,000 --> 00:07:49,120
try to figure out

00:07:47,280 --> 00:07:50,639
what's going on inside of our systems

00:07:49,120 --> 00:07:52,400
why are they doing that how do i make it

00:07:50,639 --> 00:07:53,840
stop how do i how do i change the bad

00:07:52,400 --> 00:07:55,680
behavior or how do i get more of the

00:07:53,840 --> 00:07:57,599
good behavior

00:07:55,680 --> 00:07:59,360
so it's really important to distinguish

00:07:57,599 --> 00:08:00,879
observability right like this

00:07:59,360 --> 00:08:02,479
practice of being able to solve

00:08:00,879 --> 00:08:05,840
questions iteratively

00:08:02,479 --> 00:08:07,280
from the instrumentation data itself so

00:08:05,840 --> 00:08:08,639
instrumentation is the thing that you

00:08:07,280 --> 00:08:09,919
insert into your code in order to

00:08:08,639 --> 00:08:12,160
produce data

00:08:09,919 --> 00:08:13,280
but data in and of itself isn't much use

00:08:12,160 --> 00:08:15,120
unless you can actually answer your

00:08:13,280 --> 00:08:17,919
questions with it

00:08:15,120 --> 00:08:19,759
yep so what we're going to talk about

00:08:17,919 --> 00:08:22,960
and really what open topic provides is

00:08:19,759 --> 00:08:22,960
that data source for you

00:08:23,840 --> 00:08:26,800
the telemetry data isn't the

00:08:25,120 --> 00:08:28,400
observability the observable

00:08:26,800 --> 00:08:30,160
observability is about really about

00:08:28,400 --> 00:08:31,039
process and practice is the cultural

00:08:30,160 --> 00:08:32,640
change almost

00:08:31,039 --> 00:08:34,320
in the same way that like devops is

00:08:32,640 --> 00:08:35,919
right it's it's less

00:08:34,320 --> 00:08:38,320
you can't buy devops and you can't

00:08:35,919 --> 00:08:40,159
necessarily buy observability

00:08:38,320 --> 00:08:41,760
you need to make the changes in your

00:08:40,159 --> 00:08:44,080
organization to

00:08:41,760 --> 00:08:46,000
allow for observability to take place

00:08:44,080 --> 00:08:47,440
but to get there you have to have this

00:08:46,000 --> 00:08:49,360
instrumentation code

00:08:47,440 --> 00:08:50,720
and that instrumentation code is going

00:08:49,360 --> 00:08:53,839
to be things that produce

00:08:50,720 --> 00:08:55,920
metrics logs traces other signals about

00:08:53,839 --> 00:08:57,360
what's going on in your software

00:08:55,920 --> 00:08:59,440
these are really all different views

00:08:57,360 --> 00:09:00,640
into the same thing that's going under

00:08:59,440 --> 00:09:02,480
you know it says here into the same

00:09:00,640 --> 00:09:03,680
underlying truth and in a lot of ways

00:09:02,480 --> 00:09:05,440
these are all convertible

00:09:03,680 --> 00:09:07,839
i can take traces and i can turn them

00:09:05,440 --> 00:09:09,440
into time series metric data i can take

00:09:07,839 --> 00:09:12,640
logs and turn them into

00:09:09,440 --> 00:09:14,080
um metrics i can take

00:09:12,640 --> 00:09:15,920
metrics and i can kind of go back into

00:09:14,080 --> 00:09:17,040
traces and maybe not go back to traces

00:09:15,920 --> 00:09:20,320
but you can certainly take metrics and

00:09:17,040 --> 00:09:20,320
turn them into logs right

00:09:20,399 --> 00:09:25,120
but what are these things you know we we

00:09:23,279 --> 00:09:26,800
talk about metrics logs and traces and

00:09:25,120 --> 00:09:29,760
well really what are they yeah

00:09:26,800 --> 00:09:31,519
unfortunately people have coined this uh

00:09:29,760 --> 00:09:33,200
unfortunately information at

00:09:31,519 --> 00:09:34,720
nomenclature called calling them the

00:09:33,200 --> 00:09:35,680
pillars of observability

00:09:34,720 --> 00:09:37,519
they're not right like they're just

00:09:35,680 --> 00:09:39,040
different data formats uh and you don't

00:09:37,519 --> 00:09:41,440
have to have all three of them

00:09:39,040 --> 00:09:42,959
but in case you do run into kind of any

00:09:41,440 --> 00:09:44,959
one of these three things uh this is

00:09:42,959 --> 00:09:46,880
kind of how you delineate which kind of

00:09:44,959 --> 00:09:49,360
data is which kind of data

00:09:46,880 --> 00:09:50,000
so metrics are kind of aggregated summer

00:09:49,360 --> 00:09:53,040
statistics

00:09:50,000 --> 00:09:55,360
like a count or a histogram or a

00:09:53,040 --> 00:09:57,200
uh right like anything that's like a num

00:09:55,360 --> 00:09:58,560
a number right so for instance how many

00:09:57,200 --> 00:10:00,640
times does the web service hit

00:09:58,560 --> 00:10:02,000
or what was the median latency of this

00:10:00,640 --> 00:10:03,760
service or

00:10:02,000 --> 00:10:05,680
even potentially like a shape like you

00:10:03,760 --> 00:10:07,600
know saying hey this is the

00:10:05,680 --> 00:10:08,959
buckets in which all of these uh

00:10:07,600 --> 00:10:11,440
different different type uh

00:10:08,959 --> 00:10:12,560
different latencies fall yeah and

00:10:11,440 --> 00:10:13,600
there's a lot of different types of

00:10:12,560 --> 00:10:16,640
metrics too

00:10:13,600 --> 00:10:18,240
um open telemetry actually has an

00:10:16,640 --> 00:10:19,680
interesting take on this that we won't

00:10:18,240 --> 00:10:21,839
get into

00:10:19,680 --> 00:10:24,240
due to time today but open telemetry is

00:10:21,839 --> 00:10:24,240
kind of a

00:10:24,320 --> 00:10:27,360
a new idea maybe a new way of doing a

00:10:26,880 --> 00:10:28,640
lot of

00:10:27,360 --> 00:10:29,760
the metrics that maybe you're familiar

00:10:28,640 --> 00:10:31,920
with if you're coming from like the

00:10:29,760 --> 00:10:34,000
prometheus or like the dog stats d

00:10:31,920 --> 00:10:36,000
world or the sassy world sorry i should

00:10:34,000 --> 00:10:37,440
say you know you might

00:10:36,000 --> 00:10:39,040
think about metrics in a certain way

00:10:37,440 --> 00:10:40,320
open telemetry might not necessarily

00:10:39,040 --> 00:10:42,800
correspond with that

00:10:40,320 --> 00:10:44,240
and over the next like couple months

00:10:42,800 --> 00:10:46,880
expect to see a lot of really

00:10:44,240 --> 00:10:48,800
interesting written content about what

00:10:46,880 --> 00:10:51,360
is different and why it's different

00:10:48,800 --> 00:10:52,720
so just kind of put that in the back of

00:10:51,360 --> 00:10:54,079
your mind and we'll get back to

00:10:52,720 --> 00:10:56,079
you know find us on twitter if you want

00:10:54,079 --> 00:10:56,480
to talk about it later so the second

00:10:56,079 --> 00:10:59,040
kind

00:10:56,480 --> 00:11:00,079
second big thing are logs right and also

00:10:59,040 --> 00:11:02,240
traces and we'll kind of actually

00:11:00,079 --> 00:11:04,560
combine these when i talk about them

00:11:02,240 --> 00:11:05,880
because a log is it's a log statement

00:11:04,560 --> 00:11:08,079
right it's anything from

00:11:05,880 --> 00:11:09,839
console.printline uh you know

00:11:08,079 --> 00:11:12,640
console.log hello world

00:11:09,839 --> 00:11:13,440
is a log but also some big fancy

00:11:12,640 --> 00:11:15,440
structured

00:11:13,440 --> 00:11:18,079
you know json blob that you're writing

00:11:15,440 --> 00:11:21,200
out to a file is also a log

00:11:18,079 --> 00:11:23,040
now traces are

00:11:21,200 --> 00:11:24,320
basically those structured logs except

00:11:23,040 --> 00:11:26,880
they have context

00:11:24,320 --> 00:11:28,800
they have the context of a request and

00:11:26,880 --> 00:11:30,079
because they have that request context

00:11:28,800 --> 00:11:32,160
because they know

00:11:30,079 --> 00:11:33,440
like what requests are part of and what

00:11:32,160 --> 00:11:36,079
came before me

00:11:33,440 --> 00:11:37,519
we can use them to gain insight into the

00:11:36,079 --> 00:11:39,200
entire life cycle

00:11:37,519 --> 00:11:40,880
of a request as it moves through our

00:11:39,200 --> 00:11:43,040
system so this

00:11:40,880 --> 00:11:44,560
lets us pinpoint failures it lets us

00:11:43,040 --> 00:11:46,079
pinpoint performance issues and it also

00:11:44,560 --> 00:11:48,800
lets us derive a lot of really

00:11:46,079 --> 00:11:51,279
interesting statistical and metric data

00:11:48,800 --> 00:11:52,639
out of those um structured log

00:11:51,279 --> 00:11:55,279
statements that we're creating

00:11:52,639 --> 00:11:56,000
as traces yeah for instance you could

00:11:55,279 --> 00:11:57,760
look at

00:11:56,000 --> 00:11:59,120
a structured event that has a number of

00:11:57,760 --> 00:12:02,639
fields and say

00:11:59,120 --> 00:12:03,920
show me a metric derived from how many

00:12:02,639 --> 00:12:05,680
of those things there are

00:12:03,920 --> 00:12:06,880
that have this particular set of tags

00:12:05,680 --> 00:12:08,720
right so that's kind of how you

00:12:06,880 --> 00:12:10,959
transmute them between each other

00:12:08,720 --> 00:12:13,200
yeah and kind of a primitive version of

00:12:10,959 --> 00:12:14,160
structure of vlogging that people tend

00:12:13,200 --> 00:12:16,800
to adopt

00:12:14,160 --> 00:12:18,959
that leads them into tracing is if you

00:12:16,800 --> 00:12:20,959
put a request id in every single log

00:12:18,959 --> 00:12:23,040
right then that inherently becomes this

00:12:20,959 --> 00:12:25,040
grouping that allows you to find all the

00:12:23,040 --> 00:12:26,800
log lines associated with the request

00:12:25,040 --> 00:12:28,240
so tracing is just taking that one step

00:12:26,800 --> 00:12:30,000
further and saying not only do you have

00:12:28,240 --> 00:12:32,560
a request id but you also know

00:12:30,000 --> 00:12:33,760
who called you before right so not just

00:12:32,560 --> 00:12:35,760
here's everything that happened but kind

00:12:33,760 --> 00:12:37,279
of here's a tree or a sequential order

00:12:35,760 --> 00:12:38,639
so we'll get into more details of how

00:12:37,279 --> 00:12:39,519
you might visualize that later in this

00:12:38,639 --> 00:12:43,200
workshop

00:12:39,519 --> 00:12:44,800
yeah so i don't want to dwell too much

00:12:43,200 --> 00:12:45,920
on the metrics concepts because again

00:12:44,800 --> 00:12:48,000
we're not going to cover yeah we only

00:12:45,920 --> 00:12:50,800
have 90 minutes we got to move faster

00:12:48,000 --> 00:12:51,920
yeah but there are you can really think

00:12:50,800 --> 00:12:53,360
of metrics in one of two ways their

00:12:51,920 --> 00:12:54,880
their counts are their gauges

00:12:53,360 --> 00:12:57,040
is a the simplest way to think about it

00:12:54,880 --> 00:13:00,959
an account is a number that goes up

00:12:57,040 --> 00:13:03,040
a gauge is you know like a fuel gauge or

00:13:00,959 --> 00:13:05,200
a speedometer

00:13:03,040 --> 00:13:06,720
so let's move past that and talk about

00:13:05,200 --> 00:13:09,680
tracing concepts so there's

00:13:06,720 --> 00:13:10,240
three main things to understand about

00:13:09,680 --> 00:13:12,800
tricks

00:13:10,240 --> 00:13:14,480
a trace is comprised of spans and a span

00:13:12,800 --> 00:13:16,880
is a single unit of work

00:13:14,480 --> 00:13:18,240
so this is how long for this one service

00:13:16,880 --> 00:13:21,519
did it take to handle this

00:13:18,240 --> 00:13:22,240
request this api call this database

00:13:21,519 --> 00:13:24,800
lookup

00:13:22,240 --> 00:13:26,240
so on and so forth a trace is a

00:13:24,800 --> 00:13:27,920
collection of those spans

00:13:26,240 --> 00:13:30,000
uh you can represent a trace as a

00:13:27,920 --> 00:13:32,079
directed acyclic graph

00:13:30,000 --> 00:13:35,360
so you know there's no loops a trace

00:13:32,079 --> 00:13:38,000
never loops back on itself

00:13:35,360 --> 00:13:39,120
the edges of these graph nodes these

00:13:38,000 --> 00:13:41,440
spans

00:13:39,120 --> 00:13:42,720
form parent and child relationships

00:13:41,440 --> 00:13:45,360
between

00:13:42,720 --> 00:13:47,120
work being done as part of the trace

00:13:45,360 --> 00:13:48,000
there's also a concept of you know

00:13:47,120 --> 00:13:50,399
asynchronous work

00:13:48,000 --> 00:13:51,680
right so i can have a multiple children

00:13:50,399 --> 00:13:53,040
with the same parent or i can have

00:13:51,680 --> 00:13:55,360
multiple operations that aren't

00:13:53,040 --> 00:13:57,839
necessarily dependent on each other

00:13:55,360 --> 00:13:58,959
and tracing systems will display these

00:13:57,839 --> 00:14:00,480
different ways

00:13:58,959 --> 00:14:03,279
to indicate the type of work being

00:14:00,480 --> 00:14:05,040
performed finally there's context and

00:14:03,279 --> 00:14:06,480
context is really the key to

00:14:05,040 --> 00:14:09,600
understanding how traces work because

00:14:06,480 --> 00:14:12,320
there's one type of context the word

00:14:09,600 --> 00:14:14,720
gets overloaded a lot

00:14:12,320 --> 00:14:15,440
but in general we're talking about

00:14:14,720 --> 00:14:17,519
context

00:14:15,440 --> 00:14:19,760
we're talking about things like a

00:14:17,519 --> 00:14:20,800
identifier for a trace identifier for a

00:14:19,760 --> 00:14:22,720
span

00:14:20,800 --> 00:14:25,040
a indicator for like what the parent

00:14:22,720 --> 00:14:26,480
span was and then optionally

00:14:25,040 --> 00:14:28,399
you can have something called baggage as

00:14:26,480 --> 00:14:31,600
part of that context which are

00:14:28,399 --> 00:14:34,480
key value pairs that can come from other

00:14:31,600 --> 00:14:34,480
parts of your system

00:14:38,320 --> 00:14:42,079
they're also kind of this notion of

00:14:39,760 --> 00:14:43,920
thinking about like how do your spams

00:14:42,079 --> 00:14:45,199
relate to your existing logs right

00:14:43,920 --> 00:14:46,800
because a span

00:14:45,199 --> 00:14:48,399
we've described like describes a unit of

00:14:46,800 --> 00:14:49,839
work which means it has a start time and

00:14:48,399 --> 00:14:50,720
an end time or a start 10 minute

00:14:49,839 --> 00:14:52,240
duration

00:14:50,720 --> 00:14:53,680
what about those point in time things

00:14:52,240 --> 00:14:55,760
right like where you have a log event

00:14:53,680 --> 00:14:57,839
that just says hey this happened

00:14:55,760 --> 00:14:59,040
so the answer is that a span event is

00:14:57,839 --> 00:15:02,079
kind of like a

00:14:59,040 --> 00:15:04,240
uh you know point in time log event log

00:15:02,079 --> 00:15:05,760
entry that you can attach to the unit of

00:15:04,240 --> 00:15:06,560
work in which it happened and that way

00:15:05,760 --> 00:15:08,160
you can kind of

00:15:06,560 --> 00:15:09,920
index those things together without

00:15:08,160 --> 00:15:12,399
necessarily paying the full overhead of

00:15:09,920 --> 00:15:14,639
an entire spare

00:15:12,399 --> 00:15:16,160
if you're coming from the open tracing

00:15:14,639 --> 00:15:17,680
worlds i remember several people raised

00:15:16,160 --> 00:15:20,800
their hand at the beginning

00:15:17,680 --> 00:15:27,440
a event in open telemetry

00:15:20,800 --> 00:15:30,320
is analogous to an open tracing log

00:15:27,440 --> 00:15:32,240
sorry every time i click over i have to

00:15:30,320 --> 00:15:33,759
reset my pointer

00:15:32,240 --> 00:15:35,360
so how do i implement all this well you

00:15:33,759 --> 00:15:36,639
need a way to

00:15:35,360 --> 00:15:37,839
instrument your software you need a

00:15:36,639 --> 00:15:40,000
place to send the data you need a place

00:15:37,839 --> 00:15:41,759
to visualize that data it's not worth

00:15:40,000 --> 00:15:43,279
a ton just instrumenting your code and

00:15:41,759 --> 00:15:45,040
then not having any way to kind of look

00:15:43,279 --> 00:15:46,639
at what you've done right

00:15:45,040 --> 00:15:48,800
and this is where open telemetry comes

00:15:46,639 --> 00:15:48,800
in

00:15:49,600 --> 00:15:52,959
so we'll start out with a brief history

00:15:51,120 --> 00:15:56,040
of how we got here

00:15:52,959 --> 00:16:00,160
open tracing was a project that

00:15:56,040 --> 00:16:02,399
2016-ish genesis maybe let's say

00:16:00,160 --> 00:16:04,240
and although i've been worked on before

00:16:02,399 --> 00:16:06,320
and it really bears a lot of

00:16:04,240 --> 00:16:08,639
debt to a project that google called

00:16:06,320 --> 00:16:11,920
dapper that they've been using

00:16:08,639 --> 00:16:13,519
since early 2000s mid-2000s

00:16:11,920 --> 00:16:15,120
one of the first large-scale production

00:16:13,519 --> 00:16:17,759
deployments of distributed tracing

00:16:15,120 --> 00:16:21,600
that's recorded at least

00:16:17,759 --> 00:16:24,880
so the idea of open tracing was hey we

00:16:21,600 --> 00:16:26,800
tracing is very useful but if you

00:16:24,880 --> 00:16:28,959
went and tried to do tracing in 2016

00:16:26,800 --> 00:16:30,639
2015 you would have to pick a vendor

00:16:28,959 --> 00:16:31,519
you'd have to say like well i want to

00:16:30,639 --> 00:16:33,279
use

00:16:31,519 --> 00:16:35,279
this one proprietary thing or maybe i

00:16:33,279 --> 00:16:38,639
want to use this other open source thing

00:16:35,279 --> 00:16:40,160
but i'm very tied into that one specific

00:16:38,639 --> 00:16:42,240
platform i can't easily

00:16:40,160 --> 00:16:43,759
migrate my tracing code and that made it

00:16:42,240 --> 00:16:45,440
difficult not only

00:16:43,759 --> 00:16:47,120
for you as like an end user to say well

00:16:45,440 --> 00:16:48,079
what about you know maybe i want to try

00:16:47,120 --> 00:16:50,079
this other thing out

00:16:48,079 --> 00:16:52,079
you'd have to go through and do a lot of

00:16:50,079 --> 00:16:53,759
work to re-implement tracing

00:16:52,079 --> 00:16:55,600
the other problem was it meant that

00:16:53,759 --> 00:16:58,000
someone else you know a

00:16:55,600 --> 00:16:58,880
a open source library author couldn't

00:16:58,000 --> 00:17:00,560
necessarily say

00:16:58,880 --> 00:17:02,320
well i want to add tracing support to my

00:17:00,560 --> 00:17:02,959
library that i'm going to give to other

00:17:02,320 --> 00:17:04,720
people

00:17:02,959 --> 00:17:06,799
because there wasn't a good open source

00:17:04,720 --> 00:17:08,240
you know api to code those traces

00:17:06,799 --> 00:17:10,720
against

00:17:08,240 --> 00:17:12,559
so that's the world open tracing came

00:17:10,720 --> 00:17:14,240
from open census

00:17:12,559 --> 00:17:16,839
was another google project that they

00:17:14,240 --> 00:17:19,839
open sourced in

00:17:16,839 --> 00:17:19,839
00:17:20,480 --> 00:17:24,000
open census was not only that api but it

00:17:22,559 --> 00:17:25,679
was also an implementation it was a

00:17:24,000 --> 00:17:27,760
reference sdk it was like

00:17:25,679 --> 00:17:29,280
okay here's the open source api but

00:17:27,760 --> 00:17:30,960
here's also how we're going to implement

00:17:29,280 --> 00:17:32,080
this and the api and the sdk are very

00:17:30,960 --> 00:17:35,200
tightly coupled

00:17:32,080 --> 00:17:38,480
so which was fine but

00:17:35,200 --> 00:17:39,760
there kind of was a big you know people

00:17:38,480 --> 00:17:41,600
i won't say people butting heads it was

00:17:39,760 --> 00:17:43,919
all very polite and nice

00:17:41,600 --> 00:17:45,919
but there were these two visions of how

00:17:43,919 --> 00:17:47,520
to do this and it seemed strange to a

00:17:45,919 --> 00:17:48,000
lot of people including the maintainers

00:17:47,520 --> 00:17:49,600
that hey

00:17:48,000 --> 00:17:51,200
there's why do we have these things

00:17:49,600 --> 00:17:54,080
where are they competing

00:17:51,200 --> 00:17:54,960
so long story short we brought all this

00:17:54,080 --> 00:17:56,960
stuff together

00:17:54,960 --> 00:17:58,400
and formed open telemetry as a merger of

00:17:56,960 --> 00:17:59,440
the open tracing and open census

00:17:58,400 --> 00:18:02,240
projects

00:17:59,440 --> 00:18:03,679
and we've been working on it for about

00:18:02,240 --> 00:18:05,679
two years now

00:18:03,679 --> 00:18:07,520
yep and we're very close to sun setting

00:18:05,679 --> 00:18:08,799
open tracing and open census which i am

00:18:07,520 --> 00:18:12,160
super excited about

00:18:08,799 --> 00:18:14,000
um so this is a

00:18:12,160 --> 00:18:15,760
collaboration between end users and

00:18:14,000 --> 00:18:18,000
vendors and open source projects uh

00:18:15,760 --> 00:18:18,799
still see folks from for instance uber

00:18:18,000 --> 00:18:20,640
working on this

00:18:18,799 --> 00:18:23,600
google uh as well as lightstep and

00:18:20,640 --> 00:18:23,600
honeycomb and so

00:18:24,000 --> 00:18:28,080
and also open telemetry expand kind of

00:18:26,480 --> 00:18:29,919
broadened the base a little bit so

00:18:28,080 --> 00:18:31,360
instead of just an api and a cake open

00:18:29,919 --> 00:18:34,320
symmetry also includes a lot of

00:18:31,360 --> 00:18:35,360
tools a lot of things to kind of ease

00:18:34,320 --> 00:18:38,080
your

00:18:35,360 --> 00:18:40,160
journey of observability instrumentation

00:18:38,080 --> 00:18:41,520
things like the open telemetry collector

00:18:40,160 --> 00:18:42,080
which we'll talk a little about later

00:18:41,520 --> 00:18:44,240
but also

00:18:42,080 --> 00:18:45,440
things like automatic instrumentation

00:18:44,240 --> 00:18:47,200
agents for

00:18:45,440 --> 00:18:48,720
languages and platforms that have them

00:18:47,200 --> 00:18:52,000
such as java

00:18:48,720 --> 00:18:52,480
python so it's a whole collection of

00:18:52,000 --> 00:18:54,840
things

00:18:52,480 --> 00:18:57,280
and a standard wire format so that you

00:18:54,840 --> 00:18:58,559
know everyone can kind of speak the same

00:18:57,280 --> 00:19:01,760
language when it comes to

00:18:58,559 --> 00:19:01,760
trace data metric data

00:19:03,840 --> 00:19:07,760
so we'll start with the api and this is

00:19:05,840 --> 00:19:08,640
the part that if you're instrumenting

00:19:07,760 --> 00:19:09,919
software

00:19:08,640 --> 00:19:12,320
uh it's a part you're going to become

00:19:09,919 --> 00:19:13,919
familiar with there's

00:19:12,320 --> 00:19:15,600
two basic primitives there's a tracer

00:19:13,919 --> 00:19:18,880
and a meter a tracer

00:19:15,600 --> 00:19:20,640
is responsible for managing access to a

00:19:18,880 --> 00:19:23,760
span managing spin creation

00:19:20,640 --> 00:19:25,520
life cycle and a meter is what

00:19:23,760 --> 00:19:27,039
accumulates statistics so it's uh you

00:19:25,520 --> 00:19:28,480
create a metric instrument off of a

00:19:27,039 --> 00:19:31,919
meter or you could use

00:19:28,480 --> 00:19:34,480
a you get a metric instrument

00:19:31,919 --> 00:19:36,160
and record you know counts or gauges or

00:19:34,480 --> 00:19:39,039
whatever against that

00:19:36,160 --> 00:19:40,559
you could have unique ones of these

00:19:39,039 --> 00:19:42,960
within the same process so i could have

00:19:40,559 --> 00:19:45,280
like multiple tracers in one process

00:19:42,960 --> 00:19:48,640
and this is done to help name space the

00:19:45,280 --> 00:19:48,640
telemetry data you're creating

00:19:51,120 --> 00:19:55,760
so so the deal with uh providers is that

00:19:53,840 --> 00:19:58,559
because you can have more than one

00:19:55,760 --> 00:20:00,160
uh you kind of have to tell the sdk

00:19:58,559 --> 00:20:02,159
which one is my default

00:20:00,160 --> 00:20:03,520
so in this case uh the standard

00:20:02,159 --> 00:20:04,799
boilerplate that most people wind up

00:20:03,520 --> 00:20:06,159
inserting at the top of

00:20:04,799 --> 00:20:08,480
every single one of their open telemetry

00:20:06,159 --> 00:20:09,200
programs is to say here's my tracer

00:20:08,480 --> 00:20:11,039
provider

00:20:09,200 --> 00:20:12,400
uh let's instantiate it with some

00:20:11,039 --> 00:20:14,559
potential parameters saying you know

00:20:12,400 --> 00:20:16,960
where am i outputting to and so forth

00:20:14,559 --> 00:20:17,679
and then you go ahead and instantiate it

00:20:16,960 --> 00:20:19,840
um

00:20:17,679 --> 00:20:20,960
and then you anytime you need a tracer

00:20:19,840 --> 00:20:22,880
you can say hey

00:20:20,960 --> 00:20:24,720
i need a tracer for the workshop main

00:20:22,880 --> 00:20:27,760
class or hey i need a tracer for this

00:20:24,720 --> 00:20:29,440
for this uh library so this is

00:20:27,760 --> 00:20:31,440
you know this code example is in go but

00:20:29,440 --> 00:20:33,200
the same pattern is present in every

00:20:31,440 --> 00:20:34,960
open telemetry library the theory

00:20:33,200 --> 00:20:36,559
regardless of language that you can be

00:20:34,960 --> 00:20:38,559
comfortable in any kind of

00:20:36,559 --> 00:20:40,400
uh any languages open telemetry code

00:20:38,559 --> 00:20:43,520
base

00:20:40,400 --> 00:20:45,039
yeah a high level i will say there's one

00:20:43,520 --> 00:20:47,440
notable exception to this and this is

00:20:45,039 --> 00:20:48,720
dot net.net open telemetry integrates

00:20:47,440 --> 00:20:51,919
very deeply with

00:20:48,720 --> 00:20:53,200
microsoft's system diagnostics uh

00:20:51,919 --> 00:20:56,480
library and if you are a

00:20:53,200 --> 00:20:57,760
net user interested in this then

00:20:56,480 --> 00:20:59,760
find me on twitter and we'll talk about

00:20:57,760 --> 00:21:01,039
it but uh there are also uh

00:20:59,760 --> 00:21:02,799
late stuff actually developed this

00:21:01,039 --> 00:21:04,799
really cool thing called the open

00:21:02,799 --> 00:21:06,480
telemetry launcher which basically

00:21:04,799 --> 00:21:08,400
simplifies a lot of that boilerplate and

00:21:06,480 --> 00:21:09,840
automatically sets it up for you so

00:21:08,400 --> 00:21:12,320
ask austin about it later you can also

00:21:09,840 --> 00:21:13,200
have some of these ah you know

00:21:12,320 --> 00:21:16,720
you don't have to ask me about

00:21:13,200 --> 00:21:19,039
everything um that's a lot of things i'm

00:21:16,720 --> 00:21:20,960
bad source on

00:21:19,039 --> 00:21:22,559
so when you have a tracer and you want

00:21:20,960 --> 00:21:24,080
to start a span you call spam you call

00:21:22,559 --> 00:21:26,720
start on the tracer and

00:21:24,080 --> 00:21:27,520
you pass in a go context the name of the

00:21:26,720 --> 00:21:29,440
span

00:21:27,520 --> 00:21:31,120
and then a bunch of ah there's a bunch

00:21:29,440 --> 00:21:32,799
of options you can pass in like setting

00:21:31,120 --> 00:21:33,360
the start or stop time one thing i will

00:21:32,799 --> 00:21:34,960
point out

00:21:33,360 --> 00:21:36,960
the name is very important so if you

00:21:34,960 --> 00:21:38,720
think about the name of a span is

00:21:36,960 --> 00:21:41,840
effectively the primary way you

00:21:38,720 --> 00:21:45,679
group spans together

00:21:41,840 --> 00:21:47,600
in an analysis system and you want to be

00:21:45,679 --> 00:21:49,600
careful about what you name things you

00:21:47,600 --> 00:21:50,720
want to avoid

00:21:49,600 --> 00:21:52,640
you basically want to make sure that you

00:21:50,720 --> 00:21:54,000
name things in a way that

00:21:52,640 --> 00:21:55,679
groups lodge things that should be

00:21:54,000 --> 00:21:57,520
together together

00:21:55,679 --> 00:21:59,280
so for instance instance if i have an

00:21:57,520 --> 00:22:02,559
api that has

00:21:59,280 --> 00:22:06,320
maybe get and post available

00:22:02,559 --> 00:22:10,480
a good practice might be to

00:22:06,320 --> 00:22:13,360
not have the name be get http

00:22:10,480 --> 00:22:15,440
and post http it might be to have the

00:22:13,360 --> 00:22:16,320
name of the span just be the api route

00:22:15,440 --> 00:22:19,039
so

00:22:16,320 --> 00:22:19,679
for a forward slash api slash v1 slash

00:22:19,039 --> 00:22:22,320
foo

00:22:19,679 --> 00:22:22,799
and then use what are called attributes

00:22:22,320 --> 00:22:24,840
which

00:22:22,799 --> 00:22:27,640
we'll talk about in a moment but our

00:22:24,840 --> 00:22:30,320
metadata to use an attribute of

00:22:27,640 --> 00:22:32,320
http.method to specify git or post and

00:22:30,320 --> 00:22:34,240
this way you can do interesting queries

00:22:32,320 --> 00:22:36,799
you can say like okay show me

00:22:34,240 --> 00:22:39,200
the ratio of gets versus posts in a way

00:22:36,799 --> 00:22:41,120
that if you had named the span with that

00:22:39,200 --> 00:22:42,799
important information you know data

00:22:41,120 --> 00:22:43,520
attached to it it'd be more difficult to

00:22:42,799 --> 00:22:46,240
do that kind of

00:22:43,520 --> 00:22:48,240
interesting group by query yeah because

00:22:46,240 --> 00:22:50,320
essentially you want to be able to find

00:22:48,240 --> 00:22:51,760
all similar queries that share that same

00:22:50,320 --> 00:22:53,120
route for instance

00:22:51,760 --> 00:22:54,799
are saying that you're the same route

00:22:53,120 --> 00:22:57,200
and service so kind of

00:22:54,799 --> 00:22:58,559
if you think about your schema early on

00:22:57,200 --> 00:23:00,080
it will really really help you but on

00:22:58,559 --> 00:23:01,679
the other hand you can also change it if

00:23:00,080 --> 00:23:02,640
it's not working for you this is kind of

00:23:01,679 --> 00:23:04,080
part of the magic

00:23:02,640 --> 00:23:05,360
is that your telemetry is not a fixed

00:23:04,080 --> 00:23:05,919
thing that someone has set up for you

00:23:05,360 --> 00:23:07,760
right

00:23:05,919 --> 00:23:09,600
instead you get to decide and if it's

00:23:07,760 --> 00:23:11,280
not working for you you get to change it

00:23:09,600 --> 00:23:12,880
yeah so the other operation that you

00:23:11,280 --> 00:23:16,080
need in addition to starting

00:23:12,880 --> 00:23:18,720
a uh traceband is sometimes someone has

00:23:16,080 --> 00:23:20,400
already started a traceband for you so

00:23:18,720 --> 00:23:22,080
for instance a lot of open telemetry's

00:23:20,400 --> 00:23:24,799
automatic instrumentation will

00:23:22,080 --> 00:23:26,880
create the uh the info and populate it

00:23:24,799 --> 00:23:28,640
into your go context object

00:23:26,880 --> 00:23:30,240
so span from context is a way of just

00:23:28,640 --> 00:23:30,559
saying hey tracer where am i right now

00:23:30,240 --> 00:23:33,840
so

00:23:30,559 --> 00:23:33,840
you can work with that span object

00:23:35,520 --> 00:23:39,520
there are three other things are really

00:23:37,840 --> 00:23:41,039
important one is add event so we talked

00:23:39,520 --> 00:23:43,360
about events before

00:23:41,039 --> 00:23:44,480
this lets you add structured annotations

00:23:43,360 --> 00:23:46,320
or logs

00:23:44,480 --> 00:23:47,840
about what's currently happening a good

00:23:46,320 --> 00:23:50,240
example of when you might use this

00:23:47,840 --> 00:23:52,720
and an interesting property of events in

00:23:50,240 --> 00:23:55,279
the context of spans

00:23:52,720 --> 00:23:56,080
is when you create an event on a span uh

00:23:55,279 --> 00:23:59,760
it records

00:23:56,080 --> 00:24:00,960
the time stamp as a diff or it records a

00:23:59,760 --> 00:24:02,960
timestamp but that timestamp is

00:24:00,960 --> 00:24:05,039
displayed as a

00:24:02,960 --> 00:24:06,080
time is the time elapsed from the start

00:24:05,039 --> 00:24:08,159
of the span

00:24:06,080 --> 00:24:10,799
so let's say you have some section of

00:24:08,159 --> 00:24:13,360
code where you're trying to get a lock

00:24:10,799 --> 00:24:14,240
you can create an event at the start of

00:24:13,360 --> 00:24:15,600
when you're trying to

00:24:14,240 --> 00:24:17,279
get that lock and then you can create

00:24:15,600 --> 00:24:18,240
another event you know after you've

00:24:17,279 --> 00:24:20,080
acquired it

00:24:18,240 --> 00:24:21,919
and then in your trace analyzer you'd be

00:24:20,080 --> 00:24:24,960
able to see these two events and

00:24:21,919 --> 00:24:26,480
say you know five nanoseconds or

00:24:24,960 --> 00:24:27,039
whatever after it started trying to get

00:24:26,480 --> 00:24:30,559
the lock

00:24:27,039 --> 00:24:32,400
cool 300 milliseconds got the lock so

00:24:30,559 --> 00:24:35,039
you can very easily say oh

00:24:32,400 --> 00:24:37,919
i spent a ton of time waiting to acquire

00:24:35,039 --> 00:24:37,919
the the mutex

00:24:39,360 --> 00:24:42,400
yep the other thing that's super handy

00:24:40,880 --> 00:24:44,159
that we talked about just a moment ago

00:24:42,400 --> 00:24:46,400
is the idea of an attribute

00:24:44,159 --> 00:24:48,159
so an attribute is a key value pair

00:24:46,400 --> 00:24:49,279
right it's like a super wide dictionary

00:24:48,159 --> 00:24:51,120
that you can append so if

00:24:49,279 --> 00:24:52,960
you've ever seen a structured event uh

00:24:51,120 --> 00:24:54,640
it's very very similar right it's just

00:24:52,960 --> 00:24:56,880
putting key value pairs and

00:24:54,640 --> 00:24:58,480
attaching it to your current span so

00:24:56,880 --> 00:25:00,400
difference from a structured log

00:24:58,480 --> 00:25:02,400
is that you might kind of assemble or

00:25:00,400 --> 00:25:04,080
emit many different ones of is that we

00:25:02,400 --> 00:25:04,640
collect up all of the attributes that

00:25:04,080 --> 00:25:06,400
are set

00:25:04,640 --> 00:25:08,159
and wait until the and wait until the

00:25:06,400 --> 00:25:09,440
event is done and then we send the

00:25:08,159 --> 00:25:11,600
entire span all at once

00:25:09,440 --> 00:25:12,559
with all the key value pairs so that's

00:25:11,600 --> 00:25:14,960
what end is for

00:25:12,559 --> 00:25:16,240
and kind of stops the timer says this is

00:25:14,960 --> 00:25:18,640
the total duration

00:25:16,240 --> 00:25:19,600
and attaches all of the uh attributes

00:25:18,640 --> 00:25:21,360
that you sent

00:25:19,600 --> 00:25:23,520
and passes them off so you can analyze

00:25:21,360 --> 00:25:23,520
them

00:25:24,159 --> 00:25:28,000
so starting and ending is fairly

00:25:26,520 --> 00:25:30,799
straightforward um

00:25:28,000 --> 00:25:31,279
and go especially it's very idiomatic to

00:25:30,799 --> 00:25:34,240
at

00:25:31,279 --> 00:25:36,320
kind of the start of your function to

00:25:34,240 --> 00:25:39,600
ask for a tracer

00:25:36,320 --> 00:25:42,640
get the tracer back

00:25:39,600 --> 00:25:43,360
create a span from that tracer so in

00:25:42,640 --> 00:25:46,880
this case

00:25:43,360 --> 00:25:49,600
it's going to be named persists

00:25:46,880 --> 00:25:50,640
and then immediately defer that span

00:25:49,600 --> 00:25:53,919
when

00:25:50,640 --> 00:25:56,640
this function goes out of scope or

00:25:53,919 --> 00:25:59,760
returns then that span will end and be

00:25:56,640 --> 00:25:59,760
sent off to be processed

00:26:01,360 --> 00:26:07,279
getting the current span again if

00:26:04,559 --> 00:26:09,039
you have a span because it's in the the

00:26:07,279 --> 00:26:11,039
context is being injected from automatic

00:26:09,039 --> 00:26:14,159
instrumentation or for whatever reason

00:26:11,039 --> 00:26:15,120
maybe you are instrumenting multiple

00:26:14,159 --> 00:26:19,200
functions in a

00:26:15,120 --> 00:26:21,120
program and you've added a span to

00:26:19,200 --> 00:26:22,840
you know your go context object and then

00:26:21,120 --> 00:26:24,000
pass the context object to a new

00:26:22,840 --> 00:26:27,279
function

00:26:24,000 --> 00:26:28,240
let's trace that span from context spans

00:26:27,279 --> 00:26:29,520
have

00:26:28,240 --> 00:26:31,440
there's a lot that we kind of are

00:26:29,520 --> 00:26:34,720
lighting here about

00:26:31,440 --> 00:26:36,240
spans as structured logs and you can

00:26:34,720 --> 00:26:37,360
read all this if you'd like

00:26:36,240 --> 00:26:38,799
and i would actually if this is

00:26:37,360 --> 00:26:40,320
interesting i would encourage you to

00:26:38,799 --> 00:26:41,919
kind of go look at the open telemetry

00:26:40,320 --> 00:26:45,360
specification on github

00:26:41,919 --> 00:26:47,039
and read up on this stuff but it's

00:26:45,360 --> 00:26:48,559
surprisingly readable like it's written

00:26:47,039 --> 00:26:50,320
in knockdown it's written like by

00:26:48,559 --> 00:26:53,120
engineers for engineers but not you know

00:26:50,320 --> 00:26:54,799
by standards committees yeah it's

00:26:53,120 --> 00:26:56,159
it's very readable and it also helps you

00:26:54,799 --> 00:26:57,360
understand i think a lot of the thinking

00:26:56,159 --> 00:27:00,000
that goes into this

00:26:57,360 --> 00:27:01,279
and like what is actually happening and

00:27:00,000 --> 00:27:04,720
why it's happening

00:27:01,279 --> 00:27:06,240
but spans have uh status codes and

00:27:04,720 --> 00:27:07,760
they have a lot of semantic information

00:27:06,240 --> 00:27:10,080
available to sort of indicate

00:27:07,760 --> 00:27:11,919
as a hint to some analysis system like

00:27:10,080 --> 00:27:14,400
what actually happened so

00:27:11,919 --> 00:27:16,240
one of these is this idea of span status

00:27:14,400 --> 00:27:18,640
now i believe there's some flux

00:27:16,240 --> 00:27:21,039
still on span status and what codes are

00:27:18,640 --> 00:27:26,640
acceptable but you can sort of map these

00:27:21,039 --> 00:27:29,919
to gear applications or grpc codes yeah

00:27:26,640 --> 00:27:31,360
adding an event is standard event and

00:27:29,919 --> 00:27:33,279
then setting attributes spanned outside

00:27:31,360 --> 00:27:35,600
attributes

00:27:33,279 --> 00:27:37,520
in general these are going to be pretty

00:27:35,600 --> 00:27:41,360
consistent across multiple languages

00:27:37,520 --> 00:27:42,080
so the exact details might be different

00:27:41,360 --> 00:27:44,880
from go

00:27:42,080 --> 00:27:46,799
but if you are in javascript you should

00:27:44,880 --> 00:27:48,080
expect to see very similar things if

00:27:46,799 --> 00:27:51,360
you're in python

00:27:48,080 --> 00:27:54,159
or java a fairly similar api

00:27:51,360 --> 00:27:55,279
there's now i will point out if

00:27:54,159 --> 00:27:57,039
especially if you came from the open

00:27:55,279 --> 00:27:57,840
telemetry work i'm sorry open tracing

00:27:57,039 --> 00:28:00,000
world

00:27:57,840 --> 00:28:00,880
where all the apis were extremely

00:28:00,000 --> 00:28:03,919
similar

00:28:00,880 --> 00:28:05,679
it's less like that in open telemetry

00:28:03,919 --> 00:28:09,120
each individual language has a lot more

00:28:05,679 --> 00:28:09,120
freedom to kind of adjust

00:28:11,039 --> 00:28:17,919
yeah you can be a bit more conventional

00:28:14,880 --> 00:28:19,279
we made the decision that basically

00:28:17,919 --> 00:28:22,159
people are gonna be more productive

00:28:19,279 --> 00:28:23,600
in the language that they if if this

00:28:22,159 --> 00:28:25,120
feels like it's another

00:28:23,600 --> 00:28:28,399
thing that they're used to rather than

00:28:25,120 --> 00:28:28,399
like it all feels like java

00:28:28,799 --> 00:28:31,919
so you want to i call context

00:28:30,640 --> 00:28:34,399
propagation sure i can talk about

00:28:31,919 --> 00:28:36,480
conic's propagation really quickly um

00:28:34,399 --> 00:28:38,000
so conics propagation sometimes known as

00:28:36,480 --> 00:28:41,039
baggage is this idea

00:28:38,000 --> 00:28:43,279
that we need to be able to pass along

00:28:41,039 --> 00:28:44,240
kind of key value pairs from process to

00:28:43,279 --> 00:28:46,480
process

00:28:44,240 --> 00:28:48,480
about the execution of the request the

00:28:46,480 --> 00:28:50,240
one mandatory key value pair

00:28:48,480 --> 00:28:51,919
is you have to have a trace id you have

00:28:50,240 --> 00:28:53,919
to have your parent span id

00:28:51,919 --> 00:28:55,120
everything else is kind of fungible but

00:28:53,919 --> 00:28:56,880
the core idea is

00:28:55,120 --> 00:28:58,480
you want tracing to not just be single

00:28:56,880 --> 00:28:59,440
process tracing but distributed tracing

00:28:58,480 --> 00:29:00,399
right this is the difference between

00:28:59,440 --> 00:29:01,760
traditional apm

00:29:00,399 --> 00:29:03,600
and distributed tracing is that it's

00:29:01,760 --> 00:29:05,440
distributed and

00:29:03,600 --> 00:29:07,520
it used to be that every vendor had its

00:29:05,440 --> 00:29:08,960
own standard um that open

00:29:07,520 --> 00:29:10,640
or that open tracing had a standard zip

00:29:08,960 --> 00:29:11,440
connected standard and so on and so

00:29:10,640 --> 00:29:14,480
forth

00:29:11,440 --> 00:29:16,080
but now there's a w3c standard and

00:29:14,480 --> 00:29:17,279
uh open telemetry is one of the

00:29:16,080 --> 00:29:19,679
reference implementations of that

00:29:17,279 --> 00:29:19,679
standard

00:29:19,919 --> 00:29:25,200
although i will point out uh openclearly

00:29:23,120 --> 00:29:26,000
supports not only that w3c standard but

00:29:25,200 --> 00:29:29,039
also supports

00:29:26,000 --> 00:29:29,440
the more traditional b3 standard which

00:29:29,039 --> 00:29:32,159
was

00:29:29,440 --> 00:29:33,840
uh um so actually one of the fun

00:29:32,159 --> 00:29:34,559
exercises we've been doing at honeycomb

00:29:33,840 --> 00:29:37,520
has been

00:29:34,559 --> 00:29:38,000
making our previous proprietary exporter

00:29:37,520 --> 00:29:40,240
have

00:29:38,000 --> 00:29:42,559
this notion of being able to pick up the

00:29:40,240 --> 00:29:44,799
w3c trace standard or to

00:29:42,559 --> 00:29:46,000
create the and send the w3c trace

00:29:44,799 --> 00:29:47,760
headers so

00:29:46,000 --> 00:29:49,039
you know there are migration paths for

00:29:47,760 --> 00:29:50,640
all these things which is great

00:29:49,039 --> 00:29:53,039
um because you don't want to be sending

00:29:50,640 --> 00:29:57,600
both sets of headers all the time

00:29:53,039 --> 00:30:01,120
yeah and right now like as of

00:29:57,600 --> 00:30:02,880
october 2020 b3 is more widely supported

00:30:01,120 --> 00:30:07,200
by a variety of tooling

00:30:02,880 --> 00:30:10,320
um notably things like envoy only top b3

00:30:07,200 --> 00:30:12,159
if they don't talk w3c yet but in 2021

00:30:10,320 --> 00:30:13,760
and beyond i would expect that we'll see

00:30:12,159 --> 00:30:16,799
a migration towards

00:30:13,760 --> 00:30:16,799
w3c everywhere

00:30:19,120 --> 00:30:22,720
so i mentioned it to jump but you have

00:30:21,039 --> 00:30:24,480
automatic instrumentation and this

00:30:22,720 --> 00:30:26,159
is one of the real benefits i think of

00:30:24,480 --> 00:30:28,399
open telemetry and of getting

00:30:26,159 --> 00:30:30,720
sort of this broad consensus across the

00:30:28,399 --> 00:30:32,159
different monitoring tracing apm vendors

00:30:30,720 --> 00:30:34,720
whatever

00:30:32,159 --> 00:30:37,679
because you have a huge variety of this

00:30:34,720 --> 00:30:39,919
and it makes your life so much simpler

00:30:37,679 --> 00:30:42,000
this example here is uh instrumenting

00:30:39,919 --> 00:30:45,200
the

00:30:42,000 --> 00:30:47,039
open telemetry using the net http

00:30:45,200 --> 00:30:48,640
instrumentation and go and this is

00:30:47,039 --> 00:30:52,320
really saying hey here's a

00:30:48,640 --> 00:30:52,559
http server and whenever i get a request

00:30:52,320 --> 00:30:55,360
in

00:30:52,559 --> 00:30:57,519
i'm wrapping my handler function in the

00:30:55,360 --> 00:30:59,840
hotel http instrumentation library

00:30:57,519 --> 00:31:00,799
and whenever a new request comes in

00:30:59,840 --> 00:31:04,559
it'll create a span

00:31:00,799 --> 00:31:07,039
and if there was a incoming

00:31:04,559 --> 00:31:07,840
if it was traced you know on the way

00:31:07,039 --> 00:31:10,399
into

00:31:07,840 --> 00:31:11,760
and so it sees hey i see a headers from

00:31:10,399 --> 00:31:13,919
a prior service

00:31:11,760 --> 00:31:15,519
that had tracing enabled then it's going

00:31:13,919 --> 00:31:18,240
to make this new one a

00:31:15,519 --> 00:31:19,200
child of that incoming request which is

00:31:18,240 --> 00:31:20,720
very handy yeah

00:31:19,200 --> 00:31:22,159
and in particular this is not

00:31:20,720 --> 00:31:24,000
necessarily true for go but it's true

00:31:22,159 --> 00:31:25,440
for a lot of other languages uh shout

00:31:24,000 --> 00:31:26,960
out to datadog for donating their

00:31:25,440 --> 00:31:28,080
integrations like we wouldn't have been

00:31:26,960 --> 00:31:29,440
able to get so many different

00:31:28,080 --> 00:31:30,799
integrations so quickly if datadog

00:31:29,440 --> 00:31:33,679
hadn't donated all of their

00:31:30,799 --> 00:31:35,679
instrumentation code yeah and also i

00:31:33,679 --> 00:31:37,360
believe new relic has also played as

00:31:35,679 --> 00:31:38,799
also donating their instrumentation

00:31:37,360 --> 00:31:40,480
and has open source to all their stuff

00:31:38,799 --> 00:31:44,159
so pretty great

00:31:40,480 --> 00:31:45,120
yeah there's a it's going to be really

00:31:44,159 --> 00:31:47,440
exciting

00:31:45,120 --> 00:31:49,360
uh over there like it's been two years

00:31:47,440 --> 00:31:50,159
of fun and now it's going to be another

00:31:49,360 --> 00:31:52,159
year of

00:31:50,159 --> 00:31:55,519
real fun as everyone kind of

00:31:52,159 --> 00:31:58,880
standardizes around this stuff

00:31:55,519 --> 00:32:00,799
so the rest of the rest of the picture

00:31:58,880 --> 00:32:03,360
the rest of the portrait

00:32:00,799 --> 00:32:05,519
gotta work on my analogies here so the

00:32:03,360 --> 00:32:06,960
sdk is actually underpins the api the

00:32:05,519 --> 00:32:09,440
sdk is what

00:32:06,960 --> 00:32:12,559
does all the stuff we just talked about

00:32:09,440 --> 00:32:15,120
as i mentioned at the jump

00:32:12,559 --> 00:32:16,399
the api and the sdk are decoupled so you

00:32:15,120 --> 00:32:17,679
can actually selectively

00:32:16,399 --> 00:32:19,360
re-implement a lot of what open

00:32:17,679 --> 00:32:20,159
telemetry does under the hood if you

00:32:19,360 --> 00:32:23,679
like

00:32:20,159 --> 00:32:26,840
and it's been designed with this in mind

00:32:23,679 --> 00:32:29,200
so if you don't like the particular way

00:32:26,840 --> 00:32:31,039
that you know the

00:32:29,200 --> 00:32:32,480
trace export pipeline works you could

00:32:31,039 --> 00:32:33,840
rewrite that if you wanted

00:32:32,480 --> 00:32:36,480
now what's more interesting is because

00:32:33,840 --> 00:32:38,000
it's decoupled it's also very extensible

00:32:36,480 --> 00:32:40,080
and you're able to write a lot of

00:32:38,000 --> 00:32:41,760
different sort of extensions to this and

00:32:40,080 --> 00:32:42,799
you're able to do a lot of custom stuff

00:32:41,760 --> 00:32:44,000
if you want to

00:32:42,799 --> 00:32:46,240
we'll talk about that more in the

00:32:44,000 --> 00:32:49,279
context of the collector but

00:32:46,240 --> 00:32:51,519
you can do everything from

00:32:49,279 --> 00:32:52,799
writing your own you know you know about

00:32:51,519 --> 00:32:54,240
the schema of your

00:32:52,799 --> 00:32:56,399
you know traces so you're going to write

00:32:54,240 --> 00:32:57,600
pii filters that you just kind of

00:32:56,399 --> 00:32:59,600
throw out everywhere in your own code

00:32:57,600 --> 00:33:01,440
base or you're going to do like geo

00:32:59,600 --> 00:33:03,600
lookups of ips

00:33:01,440 --> 00:33:06,640
you know whatever it is you can write a

00:33:03,600 --> 00:33:08,640
plugin for it in open telemetry

00:33:06,640 --> 00:33:10,000
the other important thing is this id of

00:33:08,640 --> 00:33:12,720
an exporter once you've created

00:33:10,000 --> 00:33:13,279
the telemetry has to go somewhere and

00:33:12,720 --> 00:33:14,960
i'm

00:33:13,279 --> 00:33:16,880
happy to say there's extremely broad

00:33:14,960 --> 00:33:17,600
support for open telemetry through these

00:33:16,880 --> 00:33:19,919
exporters

00:33:17,600 --> 00:33:21,600
both what's really cool especially is

00:33:19,919 --> 00:33:23,039
that like the open telemetry collector

00:33:21,600 --> 00:33:24,799
is like a swiss army knife it takes

00:33:23,039 --> 00:33:26,559
literally any trace or metrics format

00:33:24,799 --> 00:33:28,640
and outputs literally any tracer metrics

00:33:26,559 --> 00:33:30,880
format like you name it you can find it

00:33:28,640 --> 00:33:32,000
and ingest or egress for it it's pretty

00:33:30,880 --> 00:33:33,519
great

00:33:32,000 --> 00:33:34,799
and for a lot of languages you can also

00:33:33,519 --> 00:33:35,919
find sort of that native integration

00:33:34,799 --> 00:33:37,840
like the

00:33:35,919 --> 00:33:38,960
exporter for the language itself like i

00:33:37,840 --> 00:33:42,480
know in go

00:33:38,960 --> 00:33:44,000
honeycomb has a go exporter um

00:33:42,480 --> 00:33:46,000
i believe there's there's a bunch of

00:33:44,000 --> 00:33:47,760
others yep but in a lot of cases you

00:33:46,000 --> 00:33:49,679
don't even need a vendor-specific

00:33:47,760 --> 00:33:51,679
exporter because people have been doing

00:33:49,679 --> 00:33:53,039
work to ingest uh open telemetry's

00:33:51,679 --> 00:33:56,320
native wire format

00:33:53,039 --> 00:33:57,360
yeah so basically open home entry can be

00:33:56,320 --> 00:33:59,200
adapted to your needs

00:33:57,360 --> 00:34:00,960
uh so there's a lot of configuration

00:33:59,200 --> 00:34:01,440
knobs but we try at least to make it do

00:34:00,960 --> 00:34:04,640
the

00:34:01,440 --> 00:34:06,240
sensible thing out of the block yeah

00:34:04,640 --> 00:34:08,000
so there's three vendor neutral

00:34:06,240 --> 00:34:10,720
exporters that come out of the box

00:34:08,000 --> 00:34:11,359
uh sometimes four there's a jager

00:34:10,720 --> 00:34:12,480
exporter

00:34:11,359 --> 00:34:14,879
sometimes there's also a zip code

00:34:12,480 --> 00:34:16,960
exporter uh prometheus

00:34:14,879 --> 00:34:18,720
support exists for outputting metric

00:34:16,960 --> 00:34:20,159
data and then there's

00:34:18,720 --> 00:34:21,919
standardized standard error so you can

00:34:20,159 --> 00:34:23,440
actually writing writing text you can

00:34:21,919 --> 00:34:24,320
examine the json it's you know pretty

00:34:23,440 --> 00:34:25,119
handy when you're trying to figure out

00:34:24,320 --> 00:34:26,639
what's going on

00:34:25,119 --> 00:34:28,240
and then i guess the fifth one is the

00:34:26,639 --> 00:34:31,119
kind of native uh otlp

00:34:28,240 --> 00:34:32,480
format so yeah protobots that open

00:34:31,119 --> 00:34:36,200
telemetry wrote itself

00:34:32,480 --> 00:34:39,440
yeah incidentally otlp is o open

00:34:36,200 --> 00:34:42,560
telemetry o

00:34:39,440 --> 00:34:45,440
t and the l is the l in telemetry

00:34:42,560 --> 00:34:47,520
and p is protocol i've had i've gotten

00:34:45,440 --> 00:34:51,040
questions on that before

00:34:47,520 --> 00:34:52,240
i was also really confused about it so

00:34:51,040 --> 00:34:53,760
the collector actually has a lot of

00:34:52,240 --> 00:34:56,879
features other than just proxying your

00:34:53,760 --> 00:34:58,560
traces and metrics and exporting them

00:34:56,879 --> 00:35:00,320
like liz said it's a swiss army knife

00:34:58,560 --> 00:35:01,040
you can receive anything you can output

00:35:00,320 --> 00:35:03,040
anything

00:35:01,040 --> 00:35:04,800
and as long as you're using the same

00:35:03,040 --> 00:35:06,079
trace context propagation so if you're

00:35:04,800 --> 00:35:07,200
using b3 everywhere

00:35:06,079 --> 00:35:09,440
then it doesn't really even really

00:35:07,200 --> 00:35:11,359
matter how those traces are emitted so i

00:35:09,440 --> 00:35:13,200
can have zipkin traces coming in i can

00:35:11,359 --> 00:35:15,440
have otlp traces coming in

00:35:13,200 --> 00:35:16,480
and as long as they have the same ids

00:35:15,440 --> 00:35:19,280
because they were using

00:35:16,480 --> 00:35:20,560
the same context propagation format then

00:35:19,280 --> 00:35:22,320
it can output them

00:35:20,560 --> 00:35:24,640
in some other format entirely to

00:35:22,320 --> 00:35:28,160
wherever i want you can also add custom

00:35:24,640 --> 00:35:30,800
processors so you can do things like

00:35:28,160 --> 00:35:32,560
sampling or filtering or do a lot of

00:35:30,800 --> 00:35:33,200
transforms in your trace data or your

00:35:32,560 --> 00:35:35,119
metrics

00:35:33,200 --> 00:35:37,920
you can filter things out you can add

00:35:35,119 --> 00:35:39,760
things in like resources

00:35:37,920 --> 00:35:40,960
you can run the collector as either an

00:35:39,760 --> 00:35:43,280
agent

00:35:40,960 --> 00:35:44,880
alongside your code or as a sidecar or

00:35:43,280 --> 00:35:46,480
you can run it as a standalone mode you

00:35:44,880 --> 00:35:47,760
have a pool of these things collecting

00:35:46,480 --> 00:35:49,040
telemetry from a bunch of different

00:35:47,760 --> 00:35:50,320
services and then shipping it off

00:35:49,040 --> 00:35:51,839
somewhere else

00:35:50,320 --> 00:35:53,520
it gives you a nice separation of

00:35:51,839 --> 00:35:55,200
concerns between the people writing the

00:35:53,520 --> 00:35:58,880
code and the people having to get the

00:35:55,200 --> 00:36:02,880
telemetry out to places

00:35:58,880 --> 00:36:05,920
and it runs on windows too yup

00:36:02,880 --> 00:36:06,960
cool uh let's try to get to you at least

00:36:05,920 --> 00:36:09,440
through the

00:36:06,960 --> 00:36:10,560
uh setup instructions uh for the

00:36:09,440 --> 00:36:12,320
interactive part

00:36:10,560 --> 00:36:14,000
before the break and then after the

00:36:12,320 --> 00:36:15,440
break then we'll be available to help

00:36:14,000 --> 00:36:18,320
you work through the kind of

00:36:15,440 --> 00:36:21,200
hands-on material yeah so our

00:36:18,320 --> 00:36:21,200
interactive work today

00:36:24,320 --> 00:36:30,079
so if you go to can someone post this

00:36:27,359 --> 00:36:30,079
link in the chat

00:36:31,359 --> 00:36:34,000
because what we're doing

00:36:36,000 --> 00:36:40,079
uh we're gonna use a program a software

00:36:37,359 --> 00:36:43,839
called glitch which is a

00:36:40,079 --> 00:36:46,720
web-based uh ide plus

00:36:43,839 --> 00:36:49,040
code execution thing plus a lot of other

00:36:46,720 --> 00:36:51,040
stuff it's really cool check them out

00:36:49,040 --> 00:36:52,320
so you'll go to this project this open

00:36:51,040 --> 00:36:55,680
telemetry student project

00:36:52,320 --> 00:36:57,440
and you will click remix and this will

00:36:55,680 --> 00:37:00,640
give you your own container and your own

00:36:57,440 --> 00:37:00,640
copy of the code running

00:37:02,079 --> 00:37:06,800
you might have to create an account so

00:37:04,800 --> 00:37:10,800
we'll give people time to do that

00:37:06,800 --> 00:37:10,800
should i pop out of the slides and

00:37:14,079 --> 00:37:23,839
let me pop out the slides real quick to

00:37:15,520 --> 00:37:23,839
show folks

00:37:28,640 --> 00:37:32,960
and if you are having any trouble with

00:37:30,079 --> 00:37:36,240
this feel free to uh

00:37:32,960 --> 00:37:37,040
use the chat functionality here um and

00:37:36,240 --> 00:37:39,200
we will

00:37:37,040 --> 00:37:41,599
uh help you out as much as we can with

00:37:39,200 --> 00:37:44,000
debugging the issue

00:37:41,599 --> 00:37:44,800
all right i posted a link in the chat so

00:37:44,000 --> 00:37:48,480
once you're

00:37:44,800 --> 00:37:49,359
in there you should see this remix to

00:37:48,480 --> 00:37:52,320
edit

00:37:49,359 --> 00:37:52,320
in the upper right

00:37:55,680 --> 00:38:07,920
a bit too big looks good so you'll click

00:38:04,960 --> 00:38:07,920
remix to edit

00:38:08,960 --> 00:38:23,040
it got it

00:38:19,760 --> 00:38:24,560
and then it will take a few

00:38:23,040 --> 00:38:26,480
so while austin is doing that i'm going

00:38:24,560 --> 00:38:29,440
to describe what the example app does

00:38:26,480 --> 00:38:32,560
um austin want to pull up the source uh

00:38:29,440 --> 00:38:36,079
main.go folder

00:38:32,560 --> 00:38:37,680
so this app is simulating a microservice

00:38:36,079 --> 00:38:38,000
except for it's only one service but

00:38:37,680 --> 00:38:39,680
it's

00:38:38,000 --> 00:38:42,160
one service that recursively calls

00:38:39,680 --> 00:38:44,160
itself there's a function to calculate

00:38:42,160 --> 00:38:47,040
the fibonacci sequence

00:38:44,160 --> 00:38:48,480
so the fibonacci sequence is taken by

00:38:47,040 --> 00:38:49,680
taking the two previous values and

00:38:48,480 --> 00:38:54,160
adding them together

00:38:49,680 --> 00:38:55,520
so 1 1 2 3 5 8 13 and so forth or 13 was

00:38:54,160 --> 00:38:56,800
made by five plus eight

00:38:55,520 --> 00:38:58,880
so you can see how we might be able to

00:38:56,800 --> 00:38:59,520
construct a fancy distributed call graph

00:38:58,880 --> 00:39:02,079
that way

00:38:59,520 --> 00:39:03,040
we'll only have to instrument one place

00:39:02,079 --> 00:39:05,280
um

00:39:03,040 --> 00:39:06,960
there is a fib handler that takes care

00:39:05,280 --> 00:39:10,240
of doing the computation

00:39:06,960 --> 00:39:12,480
and there is a um and

00:39:10,240 --> 00:39:14,320
there is a main handler that will just

00:39:12,480 --> 00:39:16,160
print hello world um

00:39:14,320 --> 00:39:17,359
so this is the app in which we're going

00:39:16,160 --> 00:39:18,320
to be working for the rest of this

00:39:17,359 --> 00:39:19,839
afternoon

00:39:18,320 --> 00:39:21,599
and we're going to be instrumenting it

00:39:19,839 --> 00:39:23,599
so that you can visualize

00:39:21,599 --> 00:39:25,200
what's it doing uh where does it spend

00:39:23,599 --> 00:39:25,920
the time especially when you ask it to

00:39:25,200 --> 00:39:28,480
compute the

00:39:25,920 --> 00:39:30,400
6th 7th 8th or ninth fibonacci number

00:39:28,480 --> 00:39:31,920
where it gets really really slow

00:39:30,400 --> 00:39:33,440
so if you want to understand why is it

00:39:31,920 --> 00:39:38,640
slow and visualize it

00:39:33,440 --> 00:39:40,960
uh then stick around yeah

00:39:38,640 --> 00:39:43,119
should i go back to the slides yeah so i

00:39:40,960 --> 00:39:45,680
just want to

00:39:43,119 --> 00:39:46,880
you'll know you're good when you so

00:39:45,680 --> 00:39:48,079
you'll

00:39:46,880 --> 00:39:51,200
you'll know you're good when you can go

00:39:48,079 --> 00:39:52,640
into the tools down here under logs

00:39:51,200 --> 00:39:55,280
uh you'll see this initializing the

00:39:52,640 --> 00:39:59,280
server line

00:39:55,280 --> 00:39:59,280
and then you'll be you'll be solid

00:40:03,040 --> 00:40:08,640
uh there's also uh the team there's a

00:40:06,960 --> 00:40:10,160
team in glitch i couldn't figure out how

00:40:08,640 --> 00:40:13,200
to join the team it was weird

00:40:10,160 --> 00:40:13,599
i uh well then don't worry about them uh

00:40:13,200 --> 00:40:14,720
what you'll

00:40:13,599 --> 00:40:17,359
be able to do if you have a problem you

00:40:14,720 --> 00:40:18,000
can just drop a link to your project in

00:40:17,359 --> 00:40:19,359
the chat

00:40:18,000 --> 00:40:21,440
and yep if you drop a link to your

00:40:19,359 --> 00:40:23,839
product in the chat uh austin

00:40:21,440 --> 00:40:25,200
jenny or i will request to edit your

00:40:23,839 --> 00:40:26,720
project and then you can approve it and

00:40:25,200 --> 00:40:28,079
then we'll be able to see the same logs

00:40:26,720 --> 00:40:29,440
and code side by side with you which is

00:40:28,079 --> 00:40:31,200
kind of part of the advantage of why you

00:40:29,440 --> 00:40:34,319
do glitch for virtual workshop

00:40:31,200 --> 00:40:37,280
yeah so uh

00:40:34,319 --> 00:40:38,800
again not a ton going on here liz

00:40:37,280 --> 00:40:41,839
explained

00:40:38,800 --> 00:40:43,599
most of this really you have a root

00:40:41,839 --> 00:40:45,920
handler that prints hello world you have

00:40:43,599 --> 00:40:48,079
a fibonacci handler that will

00:40:45,920 --> 00:40:49,280
fibonacci sequence and you have quick

00:40:48,079 --> 00:40:50,880
quit which will

00:40:49,280 --> 00:40:52,480
we killed the quick quick it now

00:40:50,880 --> 00:40:54,640
automatically reloads you used to have

00:40:52,480 --> 00:40:56,000
to manually reload it but uh glitch now

00:40:54,640 --> 00:40:58,240
anytime you edit the go file or

00:40:56,000 --> 00:41:01,359
automatically recompile oh nice

00:40:58,240 --> 00:41:03,200
all right so ignore that

00:41:01,359 --> 00:41:05,040
so uh why don't we go ahead and take a

00:41:03,200 --> 00:41:08,240
15-minute break and we will see you

00:41:05,040 --> 00:41:11,520
at uh roughly uh

00:41:08,240 --> 00:41:15,040
4 55 5 pm uh eastern

00:41:11,520 --> 00:41:18,160
or 1 40 or 1 55 2 p.m

00:41:15,040 --> 00:41:19,520
pacific yep and

00:41:18,160 --> 00:41:20,960
if you are having trouble getting

00:41:19,520 --> 00:41:22,240
towards having the thing cloned we can

00:41:20,960 --> 00:41:23,839
help you during the break period we'll

00:41:22,240 --> 00:41:25,359
just be around with their video off uh

00:41:23,839 --> 00:41:27,200
so just paste a link if you're having

00:41:25,359 --> 00:41:30,960
trouble and we'll help you out

00:41:27,200 --> 00:41:35,119
yeah so we'll see you all back here

00:41:30,960 --> 00:41:36,960
in 15. and yeah if you want swag uh

00:41:35,119 --> 00:41:38,800
jenny will paste a link to get some

00:41:36,960 --> 00:41:40,160
honeycomb swag and i'm sure austin has a

00:41:38,800 --> 00:41:42,000
swag link as well

00:41:40,160 --> 00:41:43,440
yes actually if you would like a free

00:41:42,000 --> 00:41:45,440
copy of a

00:41:43,440 --> 00:41:48,480
book distributed tracing practice please

00:41:45,440 --> 00:41:51,359
follow the link i just posted

00:41:48,480 --> 00:41:51,760
all right i have seen their swag there

00:41:51,359 --> 00:41:54,560
are

00:41:51,760 --> 00:41:56,880
so cool i love to get them for myself so

00:41:54,560 --> 00:41:58,560
you better get this back now and

00:41:56,880 --> 00:42:00,319
see you in

00:41:58,560 --> 00:42:04,160
[Music]

00:42:00,319 --> 00:42:05,440
the 17 minutes yes go get the honeycomb

00:42:04,160 --> 00:42:08,960
swag now

00:42:05,440 --> 00:42:11,520
and you're gonna agree with me

00:42:08,960 --> 00:42:13,119
hello folks welcome back to part two of

00:42:11,520 --> 00:42:15,599
the open telemetry workshop

00:42:13,119 --> 00:42:16,319
uh if you're joining us again uh we'll

00:42:15,599 --> 00:42:21,119
get the

00:42:16,319 --> 00:42:21,119
slide link posted yeah

00:42:23,839 --> 00:42:27,760
and so for reference uh the first 45

00:42:26,560 --> 00:42:30,560
minutes was a lecture

00:42:27,760 --> 00:42:31,839
on the next 45 minutes are time for you

00:42:30,560 --> 00:42:32,800
to get your hands dirty with

00:42:31,839 --> 00:42:35,359
openflowmetry

00:42:32,800 --> 00:42:37,040
uh to actually go work with the code and

00:42:35,359 --> 00:42:40,160
instrument a sample application that

00:42:37,040 --> 00:42:40,160
we've put together for you

00:42:40,240 --> 00:42:48,560
so let's jump back

00:42:43,359 --> 00:42:48,560
in get my

00:42:48,640 --> 00:42:52,000
chat open sorry

00:42:53,599 --> 00:43:01,040
there we go all right so

00:42:58,400 --> 00:43:02,720
we want to instrument our service so how

00:43:01,040 --> 00:43:03,520
do we do that first we need to add some

00:43:02,720 --> 00:43:08,880
imports

00:43:03,520 --> 00:43:08,880
and set up our tracer provider so let's

00:43:10,480 --> 00:43:14,079
see what's the best way to do this

00:43:15,119 --> 00:43:18,000
i'll just kind of

00:43:18,800 --> 00:43:22,079
get both of these in here

00:43:22,319 --> 00:43:26,000
so that people understand why we're

00:43:24,160 --> 00:43:27,359
doing this uh in case they missed the

00:43:26,000 --> 00:43:28,960
first part of the session

00:43:27,359 --> 00:43:30,480
so as a reminder the reason we're doing

00:43:28,960 --> 00:43:31,920
this is because you need open

00:43:30,480 --> 00:43:34,000
telemetry's sdk

00:43:31,920 --> 00:43:35,520
initialized in order to be able to

00:43:34,000 --> 00:43:36,720
collect telemetry data which you're

00:43:35,520 --> 00:43:38,160
using in order to improve your

00:43:36,720 --> 00:43:41,040
observability

00:43:38,160 --> 00:43:41,520
so what austin is doing is importing the

00:43:41,040 --> 00:43:44,319
uh

00:43:41,520 --> 00:43:44,319
global api

00:43:45,520 --> 00:43:48,960
and the trace api uh or the the sdk

00:43:48,480 --> 00:43:52,079
trace

00:43:48,960 --> 00:43:55,839
and uh import so that we can uh

00:43:52,079 --> 00:43:55,839
go ahead and instantiate them

00:43:56,000 --> 00:43:58,319
yep

00:44:03,040 --> 00:44:05,839
and you can feel free to follow along

00:44:04,560 --> 00:44:07,440
with us if you run a little slower

00:44:05,839 --> 00:44:09,680
that's fine if you run a little faster

00:44:07,440 --> 00:44:11,200
also fine like uh feel free to speed up

00:44:09,680 --> 00:44:13,200
in chat and austin or i

00:44:11,200 --> 00:44:16,160
whomever is not actively typing will

00:44:13,200 --> 00:44:16,160
help will help you out

00:44:20,839 --> 00:44:26,560
yeah so

00:44:23,440 --> 00:44:27,839
again we're adding in our imports we're

00:44:26,560 --> 00:44:29,119
all right you should pop up in the tools

00:44:27,839 --> 00:44:30,400
pane so we can see what it looks like

00:44:29,119 --> 00:44:37,839
when it's recompiling

00:44:30,400 --> 00:44:37,839
yeah um

00:44:42,480 --> 00:44:50,240
does this comment out api trace for now

00:44:45,440 --> 00:44:52,079
because we're not using it yet all right

00:44:50,240 --> 00:44:53,920
and then the new tracer provider does

00:44:52,079 --> 00:44:55,920
not return error anymore

00:44:53,920 --> 00:44:57,920
uh that caught me off by surprise so we

00:44:55,920 --> 00:45:01,440
should uh edit that in the slides

00:44:57,920 --> 00:45:02,960
yep missed that one i thought i got

00:45:01,440 --> 00:45:05,839
everything

00:45:02,960 --> 00:45:05,839
i did not

00:45:08,079 --> 00:45:11,119
all right and there you go it says

00:45:09,359 --> 00:45:13,280
initializing so that means that we

00:45:11,119 --> 00:45:14,560
got it compiling so you should not

00:45:13,280 --> 00:45:15,760
expect to see anything yet right like

00:45:14,560 --> 00:45:17,599
this is just setting up all of the

00:45:15,760 --> 00:45:20,160
initialization and scaffolding

00:45:17,599 --> 00:45:21,680
yeah as a quick point of clarification

00:45:20,160 --> 00:45:23,839
this uh with config

00:45:21,680 --> 00:45:25,119
default sampler always sample this just

00:45:23,839 --> 00:45:28,160
makes sure that

00:45:25,119 --> 00:45:30,319
this samples or ops in or collects

00:45:28,160 --> 00:45:31,280
or generates i should say 100 of the

00:45:30,319 --> 00:45:34,400
traces

00:45:31,280 --> 00:45:36,640
and spans that your service generates

00:45:34,400 --> 00:45:38,000
sampling is a technique to reduce the

00:45:36,640 --> 00:45:40,400
amount of

00:45:38,000 --> 00:45:41,200
telemetry generated for a variety of

00:45:40,400 --> 00:45:44,560
reasons

00:45:41,200 --> 00:45:47,280
so our next step is going to be to add

00:45:44,560 --> 00:45:51,920
tracing spans to the logic

00:45:47,280 --> 00:45:51,920
we need to wrap our handlers in

00:45:53,280 --> 00:45:57,200
well we have two right we have the two

00:45:55,280 --> 00:45:57,599
routes we have the root span or the root

00:45:57,200 --> 00:46:00,000
route

00:45:57,599 --> 00:46:02,160
or the index route and then we have our

00:46:00,000 --> 00:46:05,680
fibonacci route so we want to wrap these

00:46:02,160 --> 00:46:07,760
in our automatic instrumentation

00:46:05,680 --> 00:46:09,760
that's provided by the open telemetry

00:46:07,760 --> 00:46:12,000
project

00:46:09,760 --> 00:46:13,760
we also want to be able to look at stuff

00:46:12,000 --> 00:46:15,040
for

00:46:13,760 --> 00:46:17,920
these internal functions right so we

00:46:15,040 --> 00:46:18,480
have this mock function this db handler

00:46:17,920 --> 00:46:20,240
that

00:46:18,480 --> 00:46:21,520
represents like oh something's happening

00:46:20,240 --> 00:46:24,000
i'm calling a database

00:46:21,520 --> 00:46:25,680
i have some blocking behavior so we want

00:46:24,000 --> 00:46:27,839
to add an internal span to

00:46:25,680 --> 00:46:30,800
view that and then we also want to add

00:46:27,839 --> 00:46:34,079
in parameters on our metadata i guess

00:46:30,800 --> 00:46:35,440
i should say about our fibonacci spans

00:46:34,079 --> 00:46:38,480
right so we want to say like

00:46:35,440 --> 00:46:40,000
not only have a span for the handler

00:46:38,480 --> 00:46:40,800
being invoked but we also want to see

00:46:40,000 --> 00:46:42,400
like

00:46:40,800 --> 00:46:45,599
you know what what's you know what's the

00:46:42,400 --> 00:46:48,400
value of n or

00:46:45,599 --> 00:46:49,839
at each uh iteration and we want to have

00:46:48,400 --> 00:46:51,280
spans for all those parallel client

00:46:49,839 --> 00:46:53,119
calls i'm going to propagate all that

00:46:51,280 --> 00:46:56,960
context downstream

00:46:53,119 --> 00:47:00,400
which is back into itself in this case

00:46:56,960 --> 00:47:03,599
so first let's add

00:47:00,400 --> 00:47:11,839
our root handler so we can get

00:47:03,599 --> 00:47:11,839
and see something

00:47:12,400 --> 00:47:26,400
so we need to

00:47:24,000 --> 00:47:28,000
once again this is using the the uh

00:47:26,400 --> 00:47:29,440
automatic instrumentation that we

00:47:28,000 --> 00:47:31,680
described earlier so the way that this

00:47:29,440 --> 00:47:33,119
works is that it implements the http

00:47:31,680 --> 00:47:35,040
handler interface and it just

00:47:33,119 --> 00:47:37,280
calls uh start span it reads the

00:47:35,040 --> 00:47:39,280
information out of the trace headers

00:47:37,280 --> 00:47:40,720
and so forth and then it calls it hooks

00:47:39,280 --> 00:47:41,680
into your existing handler so that's

00:47:40,720 --> 00:47:44,079
kind of part of the

00:47:41,680 --> 00:47:45,520
cool magic uh or i would say it's not

00:47:44,079 --> 00:47:47,440
really that magic to have wrappers and

00:47:45,520 --> 00:47:49,440
go but in other languages where there is

00:47:47,440 --> 00:47:49,920
the possibility to hook at the byte code

00:47:49,440 --> 00:47:53,119
or

00:47:49,920 --> 00:47:54,800
kind of override level so python java

00:47:53,119 --> 00:47:57,359
uh you literally you don't even have to

00:47:54,800 --> 00:48:07,839
do this it'll just automatically hook

00:47:57,359 --> 00:48:07,839
into your web framework

00:48:11,359 --> 00:48:15,200
yeah and

00:48:17,680 --> 00:48:20,960
string handler string what

00:48:25,599 --> 00:48:27,839
oh

00:48:33,599 --> 00:48:36,240
i put

00:48:36,720 --> 00:48:41,359
yeah there we go make sure you have your

00:48:38,559 --> 00:48:44,319
parentheses correct

00:48:41,359 --> 00:48:45,200
so let's also get our internal spans

00:48:44,319 --> 00:48:47,440
going here

00:48:45,200 --> 00:48:49,440
and propagate context inside the

00:48:47,440 --> 00:48:50,960
function so we have our so this is not

00:48:49,440 --> 00:48:52,400
for the fib function this is for the

00:48:50,960 --> 00:48:56,319
root function and the data

00:48:52,400 --> 00:48:59,520
fake database handler that we call yep

00:48:56,319 --> 00:49:00,880
so we've got our ctx and root handler we

00:48:59,520 --> 00:49:06,000
have db handler

00:49:00,880 --> 00:49:09,359
we need to oh we're already passing in

00:49:06,000 --> 00:49:12,559
the contacts so great so let's go down

00:49:09,359 --> 00:49:12,559
to db handler

00:49:12,720 --> 00:49:19,119
we need to get our tracer

00:49:16,720 --> 00:49:20,640
so we can do tracer provider tracer db

00:49:19,119 --> 00:49:24,559
handler and you can just kind of

00:49:20,640 --> 00:49:28,839
copy and paste this right over and then

00:49:24,559 --> 00:49:31,200
grab the rest of it so as we mentioned

00:49:28,839 --> 00:49:34,000
before

00:49:31,200 --> 00:49:35,359
we call we have a global provider or we

00:49:34,000 --> 00:49:36,720
have a global provider registered that

00:49:35,359 --> 00:49:37,680
was part of that boilerplate we did at

00:49:36,720 --> 00:49:40,240
the beginning

00:49:37,680 --> 00:49:41,839
so we can call the global func methods

00:49:40,240 --> 00:49:43,839
in open telemetry

00:49:41,839 --> 00:49:45,200
to say hey give us that tracer provided

00:49:43,839 --> 00:49:47,440
we registered earlier

00:49:45,200 --> 00:49:48,720
and then we can grab a tracer out of it

00:49:47,440 --> 00:49:50,720
named db handler

00:49:48,720 --> 00:49:52,800
and then we simply start a span off of

00:49:50,720 --> 00:49:59,520
that and tell it to end when

00:49:52,800 --> 00:50:01,680
this finishes

00:49:59,520 --> 00:50:03,280
and now we need to actually get all this

00:50:01,680 --> 00:50:04,559
stuff going somewhere

00:50:03,280 --> 00:50:06,319
because otherwise it's just

00:50:04,559 --> 00:50:07,599
instrumenting it and that's saying i

00:50:06,319 --> 00:50:09,359
don't know what to do with this i'm not

00:50:07,599 --> 00:50:10,880
going to send it anywhere but we want to

00:50:09,359 --> 00:50:12,079
be able to visualize what's going on and

00:50:10,880 --> 00:50:13,680
the simple specialization

00:50:12,079 --> 00:50:15,599
is just a little bit of json so that's

00:50:13,680 --> 00:50:19,680
what we're going to wire up next

00:50:15,599 --> 00:50:19,680
yep so we can just get

00:50:21,920 --> 00:50:27,520
a standard ad exporter and then we're

00:50:24,880 --> 00:50:30,720
going to add it

00:50:27,520 --> 00:50:33,440
to our trace provider a

00:50:30,720 --> 00:50:33,440
sinker

00:50:37,599 --> 00:50:41,839
clean this up a little bit

00:50:52,839 --> 00:50:55,839
uh

00:50:55,920 --> 00:51:09,839
did that import path change

00:51:11,520 --> 00:51:22,070
uh when in doubt can consult the

00:51:13,280 --> 00:51:25,119
instructor copy

00:51:22,070 --> 00:51:26,400
[Music]

00:51:25,119 --> 00:51:28,480
uh the other thing that's really nice

00:51:26,400 --> 00:51:29,440
about goling is that there is developer

00:51:28,480 --> 00:51:32,319
documentation

00:51:29,440 --> 00:51:33,440
uh if you go to go.opentelemetry.io uh

00:51:32,319 --> 00:51:35,440
it'll pull up the

00:51:33,440 --> 00:51:38,240
developer documentation including the

00:51:35,440 --> 00:51:38,240
api info

00:51:43,040 --> 00:51:47,839
uh it's just uh exporter exporters std

00:51:46,079 --> 00:51:49,599
out because that's not specific to

00:51:47,839 --> 00:51:51,599
tracing or metrics we just combine them

00:51:49,599 --> 00:51:52,800
into one exporter so it breaks from the

00:51:51,599 --> 00:51:55,920
uh

00:51:52,800 --> 00:51:56,800
yeah i know i know it's sorry no i mean

00:51:55,920 --> 00:52:00,079
it makes sense

00:51:56,800 --> 00:52:04,559
um all right 32 no

00:52:00,079 --> 00:52:08,319
new 44.

00:52:04,559 --> 00:52:10,160
so you'll probably get a error about

00:52:08,319 --> 00:52:13,280
shadowing

00:52:10,160 --> 00:52:17,119
the error variable

00:52:13,280 --> 00:52:18,559
32 oh and then

00:52:17,119 --> 00:52:21,040
you need to make sure you have your

00:52:18,559 --> 00:52:21,040
commas

00:52:21,680 --> 00:52:24,160
and then

00:52:25,599 --> 00:52:28,880
standard out that options

00:52:29,920 --> 00:52:47,839
what does it go in toronto

00:52:50,640 --> 00:52:52,880
nope

00:52:58,839 --> 00:53:01,839
okay

00:53:04,400 --> 00:53:09,200
config now because i'm gonna am i gonna

00:53:07,839 --> 00:53:11,680
go over here and find that it's been

00:53:09,200 --> 00:53:11,680
config

00:53:12,160 --> 00:53:15,839
or it was just simplified

00:53:30,400 --> 00:53:38,000
has been simplified all right

00:53:34,640 --> 00:53:43,200
so once you've done all that you have

00:53:38,000 --> 00:53:45,599
your standard out exporter

00:53:43,200 --> 00:53:47,680
let's update this but now we want to

00:53:45,599 --> 00:53:52,160
actually view it so let's go ahead

00:53:47,680 --> 00:53:54,319
and um if you look at the show button

00:53:52,160 --> 00:53:56,319
it'll let you preview the app uh next to

00:53:54,319 --> 00:53:58,400
the code or in a new window

00:53:56,319 --> 00:54:00,240
so you'll see hi this is a demo app and

00:53:58,400 --> 00:54:02,720
now you should indeed see

00:54:00,240 --> 00:54:03,760
a json representation of some tracing

00:54:02,720 --> 00:54:07,680
data

00:54:03,760 --> 00:54:10,960
yep and so there's several

00:54:07,680 --> 00:54:13,760
interesting things in

00:54:10,960 --> 00:54:15,359
in all of this uh one you'll notice a

00:54:13,760 --> 00:54:17,839
bunch of these attributes these

00:54:15,359 --> 00:54:18,640
are standard attributes that are being

00:54:17,839 --> 00:54:21,680
added in

00:54:18,640 --> 00:54:23,760
by that net http instrumentation

00:54:21,680 --> 00:54:25,200
and a lot of these are semantic

00:54:23,760 --> 00:54:27,839
following semantic conventions

00:54:25,200 --> 00:54:28,480
so you know across open telemetry you

00:54:27,839 --> 00:54:30,319
could have

00:54:28,480 --> 00:54:31,760
a different dozen different web servers

00:54:30,319 --> 00:54:33,359
running in a

00:54:31,760 --> 00:54:35,839
dozen languages as long as they follow

00:54:33,359 --> 00:54:38,160
the open telemetry standard conventions

00:54:35,839 --> 00:54:39,599
you know you'll see these same the same

00:54:38,160 --> 00:54:43,040
metadata you'll see

00:54:39,599 --> 00:54:45,280
net.transform you'll see net.hostname

00:54:43,040 --> 00:54:46,640
http method http target this stuff is

00:54:45,280 --> 00:54:48,960
all standardized and it's one of the

00:54:46,640 --> 00:54:50,880
real advantages to using open telemetry

00:54:48,960 --> 00:54:52,799
in the so that you can kind of compare

00:54:50,880 --> 00:54:54,000
things across different languages or

00:54:52,799 --> 00:54:56,240
platforms and it's going to

00:54:54,000 --> 00:54:57,680
have the same stuff there making your

00:54:56,240 --> 00:55:00,480
queries very

00:54:57,680 --> 00:55:00,480
you know robust

00:55:01,520 --> 00:55:03,839
and

00:55:05,040 --> 00:55:10,720
yeah there's a lot going on in these

00:55:08,480 --> 00:55:11,599
so if you're following along you don't

00:55:10,720 --> 00:55:15,040
see this

00:55:11,599 --> 00:55:18,160
can you drop us a line

00:55:15,040 --> 00:55:19,440
yep drop us a link in the chat um to

00:55:18,160 --> 00:55:21,200
your glitch.com

00:55:19,440 --> 00:55:23,599
edit link and then that will enable

00:55:21,200 --> 00:55:25,599
austin or me or jenny to reach uh

00:55:23,599 --> 00:55:29,040
to request access to your app to look at

00:55:25,599 --> 00:55:29,040
logs so we can code it alongside you

00:55:32,160 --> 00:55:35,280
in the meanwhile uh we do only have 45

00:55:34,240 --> 00:55:37,040
minutes we're

00:55:35,280 --> 00:55:38,960
15 minutes in let's just keep on plowing

00:55:37,040 --> 00:55:41,359
through um yeah

00:55:38,960 --> 00:55:42,960
so again message events attractions

00:55:41,359 --> 00:55:45,920
they're all in that json but let's

00:55:42,960 --> 00:55:47,520
go ahead and get into the yeah let's do

00:55:45,920 --> 00:55:48,000
the more interesting distributed tracing

00:55:47,520 --> 00:55:49,280
bit

00:55:48,000 --> 00:55:51,520
because i think that's what people came

00:55:49,280 --> 00:55:54,640
here for

00:55:51,520 --> 00:56:03,280
yep so we need to grab

00:55:54,640 --> 00:56:07,520
this key package

00:56:03,280 --> 00:56:07,520
we'll want to similar to what we did

00:56:14,839 --> 00:56:17,839
earlier

00:56:20,160 --> 00:56:30,319
call that fib and then in

00:56:23,920 --> 00:56:31,760
fib handler

00:56:30,319 --> 00:56:45,839
now we want to actually put these in

00:56:31,760 --> 00:56:45,839
different places

00:56:46,880 --> 00:56:58,960
we're going to put the result down here

00:56:50,000 --> 00:57:00,799
after we've calculated the result

00:56:58,960 --> 00:57:02,160
now we'll need information about the

00:57:00,799 --> 00:57:05,440
client so

00:57:02,160 --> 00:57:13,839
there might be some duplicates

00:57:05,440 --> 00:57:13,839
imports yeah

00:57:14,799 --> 00:57:21,280
so this is getting the actual outbound

00:57:18,240 --> 00:57:21,680
request uh instrumented as well it's

00:57:21,280 --> 00:57:27,839
this

00:57:21,680 --> 00:57:27,839
net http hotel http

00:57:28,160 --> 00:57:31,680
yep this is true in most languages that

00:57:29,920 --> 00:57:33,440
your hv server framework is not

00:57:31,680 --> 00:57:34,720
necessarily the same as your outbound

00:57:33,440 --> 00:57:37,359
http call

00:57:34,720 --> 00:57:38,720
uh calls it's helpful in a lot of cases

00:57:37,359 --> 00:57:40,319
to instrument both the client

00:57:38,720 --> 00:57:41,760
and the server so you can see you know

00:57:40,319 --> 00:57:44,400
how much latency is introduced by the

00:57:41,760 --> 00:57:47,200
network and how much is inside of the uh

00:57:44,400 --> 00:57:48,880
insect inside of the handlers uh the

00:57:47,200 --> 00:57:49,599
other circumstance that we find it to be

00:57:48,880 --> 00:57:51,680
very common

00:57:49,599 --> 00:57:52,960
is where you don't control the server on

00:57:51,680 --> 00:57:54,079
the other end where you definitely want

00:57:52,960 --> 00:57:55,760
that http call

00:57:54,079 --> 00:57:57,440
instrumentation uh because you're not

00:57:55,760 --> 00:57:59,200
getting those spams from the downstream

00:57:57,440 --> 00:58:01,359
server

00:57:59,200 --> 00:58:02,559
but if you have to drop one drop the

00:58:01,359 --> 00:58:05,920
client call because

00:58:02,559 --> 00:58:06,400
uh you know every single uh server spam

00:58:05,920 --> 00:58:07,760
needs

00:58:06,400 --> 00:58:10,559
you know it's going to need a server

00:58:07,760 --> 00:58:10,960
spam yeah so inside of our client call

00:58:10,559 --> 00:58:14,240
here

00:58:10,960 --> 00:58:17,839
we're starting a new context and then uh

00:58:14,240 --> 00:58:20,160
creating a span inside that called fib

00:58:17,839 --> 00:58:21,839
client

00:58:20,160 --> 00:58:26,480
just copying off the instructor one

00:58:21,839 --> 00:58:26,480
because less clicking back and forth

00:58:27,359 --> 00:58:30,640
so we're going to add some attributes

00:58:29,200 --> 00:58:33,760
and an event here

00:58:30,640 --> 00:58:37,680
um our attribute

00:58:33,760 --> 00:58:38,799
is the url and then the event is going

00:58:37,680 --> 00:58:41,760
to be

00:58:38,799 --> 00:58:50,799
the loop account so we need to make sure

00:58:41,760 --> 00:58:53,839
we do that after the url

00:58:50,799 --> 00:58:56,240
and then we have a couple more things

00:58:53,839 --> 00:58:56,240
we've got

00:58:57,119 --> 00:59:00,240
so before just to point out we had this

00:58:59,839 --> 00:59:02,000
new

00:59:00,240 --> 00:59:03,599
http new request and we actually want to

00:59:02,000 --> 00:59:04,000
get rid of that we want to do this new

00:59:03,599 --> 00:59:05,510
request

00:59:04,000 --> 00:59:08,160
with context

00:59:05,510 --> 00:59:11,119
[Music]

00:59:08,160 --> 00:59:12,960
then what we're saying is use w3c trace

00:59:11,119 --> 00:59:15,440
propagation

00:59:12,960 --> 00:59:17,760
and we're calling inject which actually

00:59:15,440 --> 00:59:20,319
adds the

00:59:17,760 --> 00:59:21,200
span context into the headers so that

00:59:20,319 --> 00:59:23,760
they will

00:59:21,200 --> 00:59:24,319
come back around and get picked up and

00:59:23,760 --> 00:59:29,839
then we

00:59:24,319 --> 00:59:29,839
call client.do which is our http client

00:59:31,040 --> 00:59:36,079
and now if you go and you

00:59:36,480 --> 00:59:39,200
preview this

00:59:40,480 --> 00:59:47,839
is it i equal

00:59:43,760 --> 00:59:47,839
four let's say

00:59:52,400 --> 00:59:55,760
i messed up another import

00:59:57,359 --> 01:00:01,839
oh it's label not key

01:00:18,559 --> 01:00:20,720
and

01:00:24,559 --> 01:00:32,400
wow i did not do

01:00:29,280 --> 01:00:34,960
great on this that i when updating the

01:00:32,400 --> 01:00:34,960
slides

01:00:38,480 --> 01:00:43,760
yep joys of a beta project um we are in

01:00:42,000 --> 01:00:44,880
the process of finalizing things for

01:00:43,760 --> 01:00:46,319
release but that means that there have

01:00:44,880 --> 01:00:48,000
been a couple of breaking

01:00:46,319 --> 01:00:49,680
uh changes that we've had to make both

01:00:48,000 --> 01:00:51,599
in the spec level as well as in each

01:00:49,680 --> 01:00:54,799
individual language sake

01:00:51,599 --> 01:00:54,799
it's getting better we promise

01:00:54,960 --> 01:00:59,839
and uh yeah and a lot of the boilerplate

01:00:58,160 --> 01:01:02,400
stuff here is

01:00:59,839 --> 01:01:03,599
significantly easier but especially in

01:01:02,400 --> 01:01:07,520
the go side of things

01:01:03,599 --> 01:01:07,520
using a distribution like the hotel

01:01:08,839 --> 01:01:14,720
launcher

01:01:11,440 --> 01:01:18,799
what am i missing here where is

01:01:14,720 --> 01:01:18,799
key set 78

01:01:22,839 --> 01:01:25,839
oh

01:01:31,839 --> 01:01:39,839
set attributes label that end

01:01:41,680 --> 01:01:45,200
and i

01:01:46,559 --> 01:01:49,920
need my tracer you want to just work on

01:01:48,640 --> 01:01:53,599
fixing the uh

01:01:49,920 --> 01:01:56,799
bloodshot while i fix the uh slides yeah

01:01:53,599 --> 01:01:58,400
great division of labor also um

01:01:56,799 --> 01:02:00,559
testing in production you can never

01:01:58,400 --> 01:02:04,240
fully catch these things uh

01:02:00,559 --> 01:02:07,039
that's true in your in your beta testing

01:02:04,240 --> 01:02:08,880
so also you can if for those in the

01:02:07,039 --> 01:02:11,039
audience that want to

01:02:08,880 --> 01:02:12,000
follow along i'll just post the link to

01:02:11,039 --> 01:02:14,559
the instructor one

01:02:12,000 --> 01:02:16,319
so the instructor one is the client one

01:02:14,559 --> 01:02:18,480
without the

01:02:16,319 --> 01:02:19,680
things in so you can also look at that

01:02:18,480 --> 01:02:20,000
yeah we've got two instructional ones

01:02:19,680 --> 01:02:21,280
right

01:02:20,000 --> 01:02:23,200
we've got the one that austin's working

01:02:21,280 --> 01:02:23,920
in and then there is a kind of canonical

01:02:23,200 --> 01:02:27,200
solution

01:02:23,920 --> 01:02:30,559
uh which i updated this morning so yeah

01:02:27,200 --> 01:02:30,559
this is the canonical one right

01:02:30,640 --> 01:02:49,839
yeah make sure

01:02:34,000 --> 01:02:49,839
i'm copying off the right things

01:02:51,520 --> 01:03:07,920
136 ah down here

01:03:02,640 --> 01:03:07,920
undefined key there we go

01:03:13,599 --> 01:03:17,839
so once you've fixed all the issues

01:03:21,599 --> 01:03:27,200
by going to you know fib i equals

01:03:25,440 --> 01:03:27,839
whatever i put in i equals 4 because

01:03:27,200 --> 01:03:30,960
it's

01:03:27,839 --> 01:03:34,640
pretty quick you can see

01:03:30,960 --> 01:03:36,960
a bunch of more spans in your output but

01:03:34,640 --> 01:03:38,079
these fans are not i mean they're

01:03:36,960 --> 01:03:40,240
interesting like

01:03:38,079 --> 01:03:41,440
this is if you took this and you unwound

01:03:40,240 --> 01:03:43,200
it you would actually see like the

01:03:41,440 --> 01:03:44,160
entire trace of how it calculated this

01:03:43,200 --> 01:03:46,640
and where it

01:03:44,160 --> 01:03:47,200
you know was hitting zero and you should

01:03:46,640 --> 01:03:50,160
actually see

01:03:47,200 --> 01:03:51,440
quite a few because recursive functions

01:03:50,160 --> 01:03:52,880
will generate quite a few spans like

01:03:51,440 --> 01:03:55,599
this

01:03:52,880 --> 01:03:57,520
but if we want to get this out slightly

01:03:55,599 --> 01:04:00,559
more usefully

01:03:57,520 --> 01:04:02,240
rather than just

01:04:00,559 --> 01:04:04,319
json and a log we want to put into some

01:04:02,240 --> 01:04:07,119
sort of trace analyzer

01:04:04,319 --> 01:04:09,839
so for that purpose we have a tool

01:04:07,119 --> 01:04:09,839
called the acre

01:04:10,720 --> 01:04:18,720
we set that up in gcp so

01:04:13,839 --> 01:04:18,720
if you go to slide 44 there's a

01:04:19,520 --> 01:04:26,000
thing here so you can

01:04:23,119 --> 01:04:26,559
copy and paste this year endpoint into

01:04:26,000 --> 01:04:29,440
your dot

01:04:26,559 --> 01:04:29,440
embed file

01:04:30,720 --> 01:04:33,359
and then

01:04:34,160 --> 01:04:40,640
we'll grab our jager exporter config

01:04:38,400 --> 01:04:42,880
put that up here near the standard out

01:04:40,640 --> 01:04:42,880
one

01:04:44,240 --> 01:04:55,839
make sure we import the your exporter

01:05:00,000 --> 01:05:08,880
and the final step is to add the

01:05:02,640 --> 01:05:11,760
exporter to

01:05:08,880 --> 01:05:11,760
our trace provider

01:05:12,160 --> 01:05:17,359
one thing to keep in mind you can have

01:05:14,000 --> 01:05:19,200
multiple um

01:05:17,359 --> 01:05:21,119
exporters on one provider so you can

01:05:19,200 --> 01:05:22,559
export from a single process to you know

01:05:21,119 --> 01:05:27,039
console to

01:05:22,559 --> 01:05:27,039
jager to honeycomb to whatever else

01:05:28,640 --> 01:05:32,160
this is part of why open elementary is

01:05:30,079 --> 01:05:34,240
cool right it's and this is actually one

01:05:32,160 --> 01:05:36,240
of the advantages over open tracing open

01:05:34,240 --> 01:05:39,200
tracing only lets you supply

01:05:36,240 --> 01:05:40,160
one single exporter right it only lets

01:05:39,200 --> 01:05:42,000
you provide one single

01:05:40,160 --> 01:05:44,000
sdk implementation whereas open

01:05:42,000 --> 01:05:45,200
telemetry lets you chain arbitrarily

01:05:44,000 --> 01:05:46,720
many together so

01:05:45,200 --> 01:05:48,559
you can dual right which means that you

01:05:46,720 --> 01:05:50,079
can kind of compare and we encourage you

01:05:48,559 --> 01:05:50,880
to comparison shop to see what you like

01:05:50,079 --> 01:05:53,280
better

01:05:50,880 --> 01:05:54,080
yeah also remember to uncomment the

01:05:53,280 --> 01:05:55,280
service name

01:05:54,080 --> 01:05:58,720
[Music]

01:05:55,280 --> 01:05:58,720
line at the top of this

01:06:01,599 --> 01:06:08,799
all right once you've done all that then

01:06:05,440 --> 01:06:08,799
nothing will have changed here

01:06:08,880 --> 01:06:15,119
however if you go to

01:06:12,559 --> 01:06:15,119
jaeger

01:06:16,640 --> 01:06:21,119
i'll put this link in the chat

01:06:21,599 --> 01:06:26,799
so you'll go to this jager instance

01:06:23,440 --> 01:06:29,039
we've got running and you'll be able to

01:06:26,799 --> 01:06:29,039
to

01:06:30,640 --> 01:06:35,760
look for your service so there we go

01:06:32,880 --> 01:06:39,680
chocolate funky make-make

01:06:35,760 --> 01:06:43,680
ta-da really good name

01:06:39,680 --> 01:06:43,680
really is it's pretty hilarious

01:06:45,440 --> 01:06:47,839
so

01:06:48,480 --> 01:06:52,319
oh austin uh you're missing the step we

01:06:50,559 --> 01:06:53,119
ran into this morning the uh configuring

01:06:52,319 --> 01:06:55,280
the propagators

01:06:53,119 --> 01:06:57,039
each uh individual client traces giving

01:06:55,280 --> 01:07:01,839
its own yeah

01:06:57,039 --> 01:07:01,839
okay let me fix that yeah um

01:07:02,319 --> 01:07:05,839
all right it's a global

01:07:06,480 --> 01:07:09,119
i thought i had

01:07:18,559 --> 01:07:21,839
another recent

01:07:22,400 --> 01:07:26,799
very recent actually this was what

01:07:27,520 --> 01:07:32,240
last release of i think load point 13.

01:07:34,319 --> 01:07:37,920
oh and now i need propagators i knew

01:07:36,079 --> 01:07:40,839
there was a reason that i had property

01:07:37,920 --> 01:07:43,839
i knew those reasons i had that in there

01:07:40,839 --> 01:07:43,839
but

01:07:50,079 --> 01:07:57,839
undefined hotel

01:08:00,960 --> 01:08:04,240
where's hotel coming from there we go

01:08:02,720 --> 01:08:11,839
slide updated

01:08:04,240 --> 01:08:11,839
all right i'll go i o hotel

01:08:19,120 --> 01:08:22,719
all right there we go it's working there

01:08:20,640 --> 01:08:24,400
we go

01:08:22,719 --> 01:08:25,759
so you'll need to add this uh set text

01:08:24,400 --> 01:08:27,440
map propagator you need to add this

01:08:25,759 --> 01:08:29,279
you'll need to tell the global tracer

01:08:27,440 --> 01:08:30,880
hey what our global

01:08:29,279 --> 01:08:32,799
configuration hey these are the

01:08:30,880 --> 01:08:38,640
propagators that you should use

01:08:32,799 --> 01:08:41,679
once you've done that

01:08:38,640 --> 01:08:44,560
you should see something that makes a

01:08:41,679 --> 01:08:44,560
little more sense

01:08:48,159 --> 01:08:53,839
i go say seven

01:08:54,239 --> 01:08:58,029
that should definitely get us a bigger

01:08:56,000 --> 01:09:01,219
trade seven that's bold

01:08:58,029 --> 01:09:01,219
[Music]

01:09:04,319 --> 01:09:08,560
i think it's the 437 millisecond one

01:09:12,880 --> 01:09:15,120
no

01:09:16,319 --> 01:09:22,640
i think something else is

01:09:20,239 --> 01:09:24,000
yeah we don't have i think propagation

01:09:22,640 --> 01:09:27,359
is still not working did you

01:09:24,000 --> 01:09:29,759
set uh did you set the propagator uh

01:09:27,359 --> 01:09:31,839
right after tracer provider yeah you did

01:09:29,759 --> 01:09:36,239
um

01:09:31,839 --> 01:09:36,239
trace context baggage huh

01:09:36,640 --> 01:09:42,159
that worked for me um

01:09:39,839 --> 01:09:42,880
oh did you uh did we do this correctly

01:09:42,159 --> 01:09:47,440
did we

01:09:42,880 --> 01:09:52,239
pass correctly down here oh

01:09:47,440 --> 01:09:52,239
inject w3c yeah that looks correct

01:09:58,719 --> 01:10:03,199
why don't we show them a trace from uh

01:10:01,280 --> 01:10:03,679
not from funky make make but instead

01:10:03,199 --> 01:10:07,199
from

01:10:03,679 --> 01:10:09,840
uh let me change

01:10:07,199 --> 01:10:10,480
the jager endpoint in the instructor

01:10:09,840 --> 01:10:12,800
code

01:10:10,480 --> 01:10:15,199
let's see if that works so the anchor

01:10:12,800 --> 01:10:20,239
endpoint for the instructor code

01:10:15,199 --> 01:10:31,840
is going to be 3474.

01:10:20,239 --> 01:10:31,840
great we'll change that over here

01:10:34,480 --> 01:10:40,960
all right i have now changed that um

01:10:37,520 --> 01:10:40,960
so now let's open

01:10:42,840 --> 01:10:45,840
that

01:10:47,280 --> 01:10:52,320
i equals five and then we should see

01:10:50,400 --> 01:10:54,159
not just chocolate funky but we should

01:10:52,320 --> 01:10:56,800
also see uh

01:10:54,159 --> 01:10:58,000
the instructor in the list yep there's

01:10:56,800 --> 01:11:01,600
open telemetry instructor

01:10:58,000 --> 01:11:03,760
so we can indeed see 97 spans okay

01:11:01,600 --> 01:11:05,520
so the code does work the instructor

01:11:03,760 --> 01:11:06,960
copy works we've just introduced some

01:11:05,520 --> 01:11:09,600
small delta which can be instructure

01:11:06,960 --> 01:11:11,920
copy and we copy austin's working

01:11:09,600 --> 01:11:12,800
yeah which is strange but to give you an

01:11:11,920 --> 01:11:15,840
example of what

01:11:12,800 --> 01:11:18,000
it looks like when it's done correctly

01:11:15,840 --> 01:11:19,760
yep that is the kind of classic tried

01:11:18,000 --> 01:11:21,679
and true trace waterfall view

01:11:19,760 --> 01:11:23,120
yeah now let's talk about the advantages

01:11:21,679 --> 01:11:25,360
and disadvantage of this

01:11:23,120 --> 01:11:27,280
the advantage is for one trace you can

01:11:25,360 --> 01:11:29,280
see how that one tree is executed

01:11:27,280 --> 01:11:30,880
you can even like ask jager to show you

01:11:29,280 --> 01:11:32,800
you know show me a trace from five

01:11:30,880 --> 01:11:34,640
seconds ago that had a latency of one

01:11:32,800 --> 01:11:36,880
second to two seconds

01:11:34,640 --> 01:11:38,480
but it cannot show you data like how

01:11:36,880 --> 01:11:40,239
many times did the span happen

01:11:38,480 --> 01:11:41,520
inside of this trace right you might

01:11:40,239 --> 01:11:43,840
have to manually count

01:11:41,520 --> 01:11:45,199
similarly it won't give you like data on

01:11:43,840 --> 01:11:47,360
how many different

01:11:45,199 --> 01:11:49,679
right like on properties of querying

01:11:47,360 --> 01:11:52,960
across more than one trace

01:11:49,679 --> 01:11:56,719
like asking what's the p50 of the

01:11:52,960 --> 01:11:59,600
net http call uh only when i equals five

01:11:56,719 --> 01:12:01,520
you can't do that in gator yeah so it's

01:11:59,600 --> 01:12:04,080
a useful starting place right it's far

01:12:01,520 --> 01:12:05,920
more informative than text json um but

01:12:04,080 --> 01:12:08,000
you kind of need to

01:12:05,920 --> 01:12:10,000
apply a little bit more tool seasoning i

01:12:08,000 --> 01:12:11,679
would say

01:12:10,000 --> 01:12:12,960
yeah and that's the great thing about

01:12:11,679 --> 01:12:15,120
complimentary is that it makes it very

01:12:12,960 --> 01:12:18,960
easy to kind of

01:12:15,120 --> 01:12:21,440
use newer tools use different tools use

01:12:18,960 --> 01:12:23,760
you know a variety of options to get at

01:12:21,440 --> 01:12:27,120
the data you want

01:12:23,760 --> 01:12:31,199
so you don't have

01:12:27,120 --> 01:12:37,840
neighbors oh is it this is it because we

01:12:31,199 --> 01:12:37,840
didn't do with public endpoint

01:12:39,760 --> 01:12:46,560
no that wouldn't be it wouldn't

01:12:42,960 --> 01:12:46,560
likely not yeah

01:12:47,120 --> 01:12:50,320
cool why don't we go ahead and keep on

01:12:48,640 --> 01:12:51,679
moving and

01:12:50,320 --> 01:12:53,600
get people down the direction sending

01:12:51,679 --> 01:12:55,360
their data to other tools excellent

01:12:53,600 --> 01:12:58,239
tools like lightstep

01:12:55,360 --> 01:12:59,760
yes like light stuff on honeycomb so for

01:12:58,239 --> 01:13:02,080
light step if you would like

01:12:59,760 --> 01:13:03,360
to try sending your data there lightsapp

01:13:02,080 --> 01:13:06,480
will accept

01:13:03,360 --> 01:13:07,600
the otlp the native protocol for open

01:13:06,480 --> 01:13:10,400
telemetry

01:13:07,600 --> 01:13:11,199
we'll just ingest that so you can sign

01:13:10,400 --> 01:13:18,000
up

01:13:11,199 --> 01:13:21,760
for a free account at this link

01:13:18,000 --> 01:13:21,760
you'll do once you've signed in

01:13:23,280 --> 01:13:29,920
is i want you signed up

01:13:26,800 --> 01:13:31,600
it doesn't take too long but you'll you

01:13:29,920 --> 01:13:32,000
go to settings and you'll have these

01:13:31,600 --> 01:13:34,880
access

01:13:32,000 --> 01:13:34,880
tokens down here

01:13:35,040 --> 01:13:39,040
these aren't really like api keys these

01:13:37,040 --> 01:13:44,080
are our routing tokens

01:13:39,040 --> 01:13:44,080
but i'm going to copy one

01:13:44,560 --> 01:13:51,040
and you'll set that in your dot m

01:13:48,320 --> 01:13:51,040
ls key

01:13:51,440 --> 01:13:54,320
so the next step

01:13:54,880 --> 01:14:01,840
so you need to do two things you'll need

01:13:56,159 --> 01:14:01,840
to bring in the otlp exporter

01:14:01,920 --> 01:14:14,800
and then you'll need to set up

01:14:06,400 --> 01:14:16,640
that exporter in here

01:14:14,800 --> 01:14:17,920
and you also have to like we did with

01:14:16,640 --> 01:14:21,120
the jaeger thing you have to add it to

01:14:17,920 --> 01:14:21,120
the tracer provider chain

01:14:26,840 --> 01:14:29,840
yes

01:14:34,400 --> 01:14:38,480
now one other thing you'll need to do

01:14:36,719 --> 01:14:42,960
for lights up to work is

01:14:38,480 --> 01:14:44,880
you'll need to uh add some

01:14:42,960 --> 01:14:47,600
more resources you'll need to have these

01:14:44,880 --> 01:14:49,840
semantic conventions uh which are

01:14:47,600 --> 01:14:51,120
we're going to there's two that we're

01:14:49,840 --> 01:14:55,360
going to set today

01:14:51,120 --> 01:14:58,320
um the service name and service version

01:14:55,360 --> 01:15:00,320
and we can do that any time before we

01:14:58,320 --> 01:15:03,360
configure our tracer provider

01:15:00,320 --> 01:15:07,440
and these resources

01:15:03,360 --> 01:15:09,199
are part of the

01:15:07,440 --> 01:15:10,880
again i was talking about how open 200

01:15:09,199 --> 01:15:12,159
standardizes some things so

01:15:10,880 --> 01:15:14,640
you should get in the habit of setting

01:15:12,159 --> 01:15:18,080
these service name service version

01:15:14,640 --> 01:15:18,080
resources on your

01:15:18,320 --> 01:15:21,760
services to begin with that you're

01:15:19,360 --> 01:15:24,080
instrumenting because trace analysis

01:15:21,760 --> 01:15:25,920
systems can use these to do interesting

01:15:24,080 --> 01:15:27,360
things i believe honeycomb has some

01:15:25,920 --> 01:15:29,199
features based around

01:15:27,360 --> 01:15:30,640
like service name if you mark it in the

01:15:29,199 --> 01:15:32,239
schema right

01:15:30,640 --> 01:15:33,679
yep that's exactly correct so it lets

01:15:32,239 --> 01:15:35,360
you differentiate you know when is it

01:15:33,679 --> 01:15:37,600
crossing a service boundary

01:15:35,360 --> 01:15:38,560
you know differentiate a span named uh

01:15:37,600 --> 01:15:40,320
slash

01:15:38,560 --> 01:15:42,560
you know the route name slash on service

01:15:40,320 --> 01:15:45,600
a versus service b so on and so forth

01:15:42,560 --> 01:15:48,640
yeah so attributes are

01:15:45,600 --> 01:15:50,080
uh are again resources are effectively

01:15:48,640 --> 01:15:53,679
special attributes that

01:15:50,080 --> 01:15:55,440
they i'm sorry about my cat she is being

01:15:53,679 --> 01:15:57,280
very demanding

01:15:55,440 --> 01:16:00,000
we all live the work from home life it's

01:15:57,280 --> 01:16:03,199
totally understandable

01:16:00,000 --> 01:16:06,159
yeah but so you'll for your

01:16:03,199 --> 01:16:08,159
attributes there's a whole slew of

01:16:06,159 --> 01:16:10,400
conventions that you can find

01:16:08,159 --> 01:16:12,320
um some of them are specified in this

01:16:10,400 --> 01:16:14,640
conventions package

01:16:12,320 --> 01:16:14,640
which

01:16:18,000 --> 01:16:22,800
i lost my place anyway like attribute

01:16:20,880 --> 01:16:23,840
service name attribute service version

01:16:22,800 --> 01:16:25,440
so we're gonna use a service name

01:16:23,840 --> 01:16:26,159
specified here we're gonna use a version

01:16:25,440 --> 01:16:28,159
number of

01:16:26,159 --> 01:16:31,120
whatever oh i use a version number

01:16:28,159 --> 01:16:31,120
without smart quotes

01:16:33,040 --> 01:16:37,280
and we're gonna look at our logs

01:16:38,000 --> 01:16:43,010
and we're gonna wait for things to

01:16:39,860 --> 01:16:43,010
[Music]

01:16:46,840 --> 01:16:49,840
download

01:16:51,280 --> 01:16:56,000
yeah it turns out when you uh import

01:16:53,840 --> 01:16:57,600
when you import otlp it has to download

01:16:56,000 --> 01:16:59,600
the protobuf stack which

01:16:57,600 --> 01:17:01,360
and the grpc stack which we hadn't

01:16:59,600 --> 01:17:03,120
previously needed to pull in

01:17:01,360 --> 01:17:04,480
the good news is modularism right like

01:17:03,120 --> 01:17:06,800
we didn't need it until we

01:17:04,480 --> 01:17:08,880
needed it on the other hand like now now

01:17:06,800 --> 01:17:11,360
this is taking slightly longer

01:17:08,880 --> 01:17:12,719
yeah uh while we do that uh let's

01:17:11,360 --> 01:17:14,800
briefly talk about

01:17:12,719 --> 01:17:16,480
uh honeycomb as well so if you look at

01:17:14,800 --> 01:17:17,920
the next slide um

01:17:16,480 --> 01:17:20,239
if you click that link i also paste it

01:17:17,920 --> 01:17:24,640
in the chat um you can go ahead

01:17:20,239 --> 01:17:26,800
and set up the honeycomb exporter um

01:17:24,640 --> 01:17:28,800
you don't have to do that now it's fine

01:17:26,800 --> 01:17:30,719
i trust people to figure it out um

01:17:28,800 --> 01:17:32,400
and then on the next slide there is

01:17:30,719 --> 01:17:34,400
information on how to set up the

01:17:32,400 --> 01:17:35,120
honeycomb exporter and similarly add it

01:17:34,400 --> 01:17:38,480
to the chain

01:17:35,120 --> 01:17:42,000
of exporters that you're using and i've

01:17:38,480 --> 01:17:42,000
tested it this morning and it works fine

01:17:42,840 --> 01:17:46,719
um

01:17:45,040 --> 01:17:48,159
so we can get that pasted in and then

01:17:46,719 --> 01:17:50,400
you can kind of have a look at the same

01:17:48,159 --> 01:17:51,440
data in jaeger and honeycomb and light

01:17:50,400 --> 01:17:53,120
stuff at the same time

01:17:51,440 --> 01:17:54,400
and see what insights you can get out of

01:17:53,120 --> 01:17:56,080
it and maybe answer some of those

01:17:54,400 --> 01:17:58,000
questions that we put earlier

01:17:56,080 --> 01:17:59,280
in the discussion about like you know

01:17:58,000 --> 01:18:00,080
hey can you figure out the number of

01:17:59,280 --> 01:18:03,440
times

01:18:00,080 --> 01:18:07,760
x is called when y is called or so forth

01:18:03,440 --> 01:18:07,760
yep all right and then

01:18:09,760 --> 01:18:13,840
h and y

01:18:17,440 --> 01:18:21,360
all right it's not honey clothes it's

01:18:20,040 --> 01:18:21,760
honeyshutdowncontext.background yeah i

01:18:21,360 --> 01:18:26,159
know

01:18:21,760 --> 01:18:29,120
i know i know oh yeah

01:18:26,159 --> 01:18:29,120
panel case like that

01:18:29,440 --> 01:18:36,400
yep no shutdown

01:18:32,520 --> 01:18:36,400
context.background oh oh

01:18:39,440 --> 01:18:43,520
yep precisely like that uh might require

01:18:43,199 --> 01:18:46,880
the

01:18:43,520 --> 01:18:49,280
context uh library i thought

01:18:46,880 --> 01:18:49,280
context

01:18:51,440 --> 01:18:55,199
yeah context oh it's there line 38 is

01:18:53,920 --> 01:18:57,920
erroring though

01:18:55,199 --> 01:18:57,920
oh uh

01:18:59,040 --> 01:19:04,719
38 unexpected

01:19:02,400 --> 01:19:04,719
oh

01:19:06,840 --> 01:19:14,000
wait

01:19:09,520 --> 01:19:17,520
uh is it oh i think it's

01:19:14,000 --> 01:19:23,840
no oh yeah that'd do it

01:19:17,520 --> 01:19:23,840
oh is it this is

01:19:32,640 --> 01:19:37,840
now what am i doing here

01:20:02,840 --> 01:20:07,280
so complaining that you have one too

01:20:05,280 --> 01:20:09,760
many brace

01:20:07,280 --> 01:20:11,679
uh you you uh you're failing to close a

01:20:09,760 --> 01:20:19,840
brace properly somewhere

01:20:11,679 --> 01:20:19,840
uh upstream there's that too

01:20:21,120 --> 01:20:25,760
i think i had some

01:20:24,159 --> 01:20:27,199
line breaks also get interpreted

01:20:25,760 --> 01:20:30,000
incorrectly

01:20:27,199 --> 01:20:33,840
uh multiple value in single way gosh i

01:20:30,000 --> 01:20:33,840
could have sworn that wasn't

01:20:39,920 --> 01:20:42,960
j exporter

01:20:43,520 --> 01:20:47,840
i think i've

01:20:48,000 --> 01:20:51,760
someone is asking about the google docs

01:20:49,600 --> 01:20:55,920
link uh let me go ahead and pull up the

01:20:51,760 --> 01:20:58,960
slides link again where is that ah

01:20:55,920 --> 01:21:02,400
uh hotel.2 hto workshop i'll

01:20:58,960 --> 01:21:06,800
paste it here there you go

01:21:02,400 --> 01:21:06,800
and i'll also paste it in here

01:21:09,600 --> 01:21:15,840
and someone's saying extra comma on the

01:21:11,920 --> 01:21:15,840
li end of line 37 question mark

01:21:16,159 --> 01:21:19,360
oh wait i don't think so i think i see

01:21:18,719 --> 01:21:22,080
the problem

01:21:19,360 --> 01:21:22,080
uh scroll down

01:21:22,560 --> 01:21:28,130
uh api key honey key nope

01:21:25,760 --> 01:21:31,319
that's correct that's fine

01:21:28,130 --> 01:21:31,319
[Music]

01:21:33,760 --> 01:21:37,360
grpc credential stuff

01:21:41,120 --> 01:21:44,400
yeah you're probably missing some

01:21:42,400 --> 01:21:45,280
imports these are things that you could

01:21:44,400 --> 01:21:47,360
you know figure out what the

01:21:45,280 --> 01:21:49,360
documentation and compiler but were

01:21:47,360 --> 01:21:52,560
unfortunately constrained to 45 minutes

01:21:49,360 --> 01:21:55,120
so yes i think rather than

01:21:52,560 --> 01:21:56,639
work through this on stream um why don't

01:21:55,120 --> 01:21:58,080
we give people the opportunity to ask us

01:21:56,639 --> 01:21:59,760
any questions they have

01:21:58,080 --> 01:22:11,840
yeah i would love to hear what kind of

01:21:59,760 --> 01:22:11,840
questions people have

01:22:17,679 --> 01:22:21,920
any questions at all yeah usually this

01:22:20,960 --> 01:22:26,320
goes

01:22:21,920 --> 01:22:26,320
um significantly more time

01:22:28,719 --> 01:22:42,320
kind of compressed it for the format

01:22:38,880 --> 01:22:42,320
and you can find

01:22:42,800 --> 01:22:53,840
where are my office hours

01:22:55,199 --> 01:22:58,639
how's the integration with frameworks

01:22:56,800 --> 01:22:59,679
and libraries work similar to the base

01:22:58,639 --> 01:23:03,199
language support

01:22:59,679 --> 01:23:03,199
uh like the integration for kafka

01:23:03,840 --> 01:23:08,159
yeah generally like do you mean kafka

01:23:07,600 --> 01:23:09,600
client

01:23:08,159 --> 01:23:11,440
or server because i don't know if

01:23:09,600 --> 01:23:13,920
there's a server integration

01:23:11,440 --> 01:23:15,440
maybe there are some slides that we

01:23:13,920 --> 01:23:17,520
actually cut from the slide deck

01:23:15,440 --> 01:23:19,679
um but that are in the template for this

01:23:17,520 --> 01:23:20,560
uh that cover how to serialize to plain

01:23:19,679 --> 01:23:22,239
text

01:23:20,560 --> 01:23:23,920
and then you can just embed that as part

01:23:22,239 --> 01:23:26,400
of your kafka um

01:23:23,920 --> 01:23:27,920
as part of your kafka metadata and and

01:23:26,400 --> 01:23:29,280
hire it on the other end

01:23:27,920 --> 01:23:31,040
so that's the current state of the kafka

01:23:29,280 --> 01:23:33,520
interpretation is there is no standard

01:23:31,040 --> 01:23:35,760
like w3c format for kafka and like there

01:23:33,520 --> 01:23:37,199
being a standard w3c format for http

01:23:35,760 --> 01:23:40,400
headers

01:23:37,199 --> 01:23:41,600
yeah i guess the other question is

01:23:40,400 --> 01:23:44,320
well the other question i would have is

01:23:41,600 --> 01:23:45,280
like do you mean propagating context

01:23:44,320 --> 01:23:47,600
across kafka

01:23:45,280 --> 01:23:49,280
or do you mean like actually observing

01:23:47,600 --> 01:23:50,000
usually people ask about propagating

01:23:49,280 --> 01:23:51,520
comics

01:23:50,000 --> 01:23:53,199
across path though but it definitely is

01:23:51,520 --> 01:23:55,120
true that i've had requests from the

01:23:53,199 --> 01:23:56,320
kafka team to actually start figuring

01:23:55,120 --> 01:23:59,199
out how to instrument

01:23:56,320 --> 01:24:01,520
uh kafka selfless hotel which is a

01:23:59,199 --> 01:24:04,080
entire other ball of wax i think

01:24:01,520 --> 01:24:05,360
that's better to uh do that at the kafka

01:24:04,080 --> 01:24:06,960
layer rather

01:24:05,360 --> 01:24:08,800
with instrumenting with open telemetry

01:24:06,960 --> 01:24:12,000
rather than jury rigging it yourself

01:24:08,800 --> 01:24:12,960
so yeah so here's a request yeah so the

01:24:12,000 --> 01:24:16,159
other

01:24:12,960 --> 01:24:17,360
thing is if you go to the if you

01:24:16,159 --> 01:24:19,440
actually there's a couple ways you can

01:24:17,360 --> 01:24:21,760
find out what integrations we have

01:24:19,440 --> 01:24:23,440
um on that open top tree website there's

01:24:21,760 --> 01:24:24,239
a registry where you can kind of search

01:24:23,440 --> 01:24:27,520
and sort

01:24:24,239 --> 01:24:30,800
uh you can also look at the github pages

01:24:27,520 --> 01:24:34,560
for the each language

01:24:30,800 --> 01:24:35,360
in general um java probably has like the

01:24:34,560 --> 01:24:38,320
most support

01:24:35,360 --> 01:24:38,320
for integrations

01:24:38,719 --> 01:24:45,440
uh to tim snyder yeah springs reboot so

01:24:42,560 --> 01:24:48,000
there is a uh integration for

01:24:45,440 --> 01:24:48,880
spring and spring boot um yeah it's

01:24:48,000 --> 01:24:51,440
pretty mature

01:24:48,880 --> 01:24:53,040
uh yeah actually it's actually descended

01:24:51,440 --> 01:24:53,840
it's descended directly from datadog's

01:24:53,040 --> 01:24:57,120
integration there

01:24:53,840 --> 01:24:58,880
so it's pretty well tested

01:24:57,120 --> 01:25:00,400
so if you go to the open subject github

01:24:58,880 --> 01:25:02,560
page and you look

01:25:00,400 --> 01:25:02,560
at

01:25:05,679 --> 01:25:09,040
there's open telemetry java

01:25:07,040 --> 01:25:12,080
instrumentation and this has

01:25:09,040 --> 01:25:13,600
all of the java stuff

01:25:12,080 --> 01:25:15,520
so it's actually really straightforward

01:25:13,600 --> 01:25:16,719
to use this i've done a lot of demos

01:25:15,520 --> 01:25:18,000
where you just bring this into your

01:25:16,719 --> 01:25:21,040
docker container or whatever you

01:25:18,000 --> 01:25:24,159
integrate it in as a jar

01:25:21,040 --> 01:25:26,480
you can output to multiple formats but

01:25:24,159 --> 01:25:27,280
down here at the bottom we have a whole

01:25:26,480 --> 01:25:29,600
big list

01:25:27,280 --> 01:25:30,400
of every java framework and library

01:25:29,600 --> 01:25:33,639
that's supported

01:25:30,400 --> 01:25:37,600
so everything from aws sdk

01:25:33,639 --> 01:25:41,840
elasticsearch google http grizzly grpc

01:25:37,600 --> 01:25:45,520
jetty the kafka client is supported

01:25:41,840 --> 01:25:49,520
kubernetes client supported spring

01:25:45,520 --> 01:25:54,719
webmvc spring data

01:25:49,520 --> 01:25:57,600
servlet it's all there

01:25:54,719 --> 01:25:59,520
yeah the in general the way the packages

01:25:57,600 --> 01:26:02,400
are laid out is like there's the

01:25:59,520 --> 01:26:03,520
core so like open temperature dash java

01:26:02,400 --> 01:26:07,280
or open telemetry s

01:26:03,520 --> 01:26:10,639
go go are sort of the core api sdk

01:26:07,280 --> 01:26:13,360
and then in a lot of cases

01:26:10,639 --> 01:26:13,840
like contributed things or things that

01:26:13,360 --> 01:26:15,679
move

01:26:13,840 --> 01:26:17,760
at a different cadence i would say than

01:26:15,679 --> 01:26:20,880
the main

01:26:17,760 --> 01:26:22,080
line are often like a trip repo or

01:26:20,880 --> 01:26:24,560
automatic instrumentation

01:26:22,080 --> 01:26:24,560
or whatever

01:26:27,920 --> 01:26:31,520
i know like if you if there's any

01:26:30,080 --> 01:26:37,840
rubyists in the crowd

01:26:31,520 --> 01:26:37,840
like a rails integrations in progress

01:26:38,400 --> 01:26:41,840
yeah right now ruby is not officially

01:26:40,400 --> 01:26:43,360
listed as one of the hotel beta

01:26:41,840 --> 01:26:45,040
languages we actually got some questions

01:26:43,360 --> 01:26:47,440
i think earlier this week

01:26:45,040 --> 01:26:48,960
about it but fear not uh it is it is

01:26:47,440 --> 01:26:50,639
coming towards maturity it just didn't

01:26:48,960 --> 01:26:51,120
make the initial list of five languages

01:26:50,639 --> 01:26:53,360
that we

01:26:51,120 --> 01:26:54,400
launched to beta with uh it will make it

01:26:53,360 --> 01:26:56,960
for ga

01:26:54,400 --> 01:26:58,000
yes so like if you want if you if for

01:26:56,960 --> 01:27:02,080
more go people

01:26:58,000 --> 01:27:04,080
there's like go contrib has

01:27:02,080 --> 01:27:07,040
here's the instrumentation packages for

01:27:04,080 --> 01:27:07,040
go so it's

01:27:07,760 --> 01:27:11,440
less than some other languages but also

01:27:09,360 --> 01:27:14,400
that's kind of go um

01:27:11,440 --> 01:27:16,960
there's just the third party ecosystem

01:27:14,400 --> 01:27:19,440
isn't quite what it is for say java

01:27:16,960 --> 01:27:21,360
yep and uh there are lightstep and

01:27:19,440 --> 01:27:22,639
honeycomb integrations for javascript so

01:27:21,360 --> 01:27:24,880
please do check those out

01:27:22,639 --> 01:27:26,000
thank you jason um and we are at the end

01:27:24,880 --> 01:27:27,920
of our time so i want to keep the

01:27:26,000 --> 01:27:30,000
converts moving on time so

01:27:27,920 --> 01:27:31,920
thank you very much for attending and

01:27:30,000 --> 01:27:33,280
you know again please hit up those swag

01:27:31,920 --> 01:27:34,560
links uh please

01:27:33,280 --> 01:27:36,480
feel free to check out the rest of the

01:27:34,560 --> 01:27:39,840
workshop um

01:27:36,480 --> 01:27:41,920
and uh enjoy the rest of your

01:27:39,840 --> 01:27:42,960
all things open yeah follow us on

01:27:41,920 --> 01:27:47,840
twitter i'm at austin

01:27:42,960 --> 01:27:47,840

YouTube URL: https://www.youtube.com/watch?v=0b_WVcGdhJ8


