Title: Building Cloud Native Web Applications with React and AWS Amplify - Nader Dabit
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Nader Dabit, Amazon Web Services
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: In this workshop we'll learn how to build cloud-enabled web applications with GraphQL, React, & AWS Amplify. AWS Amplify is an open source framework that provides an opinionated set of libraries, UI components, and a command line interface to build an app backend and integrate it with your iOS, Android, Web, and React Native apps. The Amplify Framework leverages a core set of AWS Cloud Services to offer capabilities including offline data, authentication, analytics, push notifications, and bots at high scale.

After attending this workshop you will have a good understanding of how to use AWS Amplify to build cloud native web applications and the architectural components. You will be able to use these as the basis for your own projects.

Attendees will need to have an AWS account to take part in this workshop, need a laptop/desktop with a modern web browser and connectivity to the internet.
Captions: 
	00:00:04,880 --> 00:00:07,839
i think we're ready to get going now so

00:00:06,879 --> 00:00:10,160
i apologize

00:00:07,839 --> 00:00:12,400
for the delay we can go ahead and get

00:00:10,160 --> 00:00:14,320
get started uh right now

00:00:12,400 --> 00:00:15,440
and we're going to be doing a couple of

00:00:14,320 --> 00:00:17,440
things

00:00:15,440 --> 00:00:18,800
this session is going to be you know

00:00:17,440 --> 00:00:21,760
workshop but i'm going to do

00:00:18,800 --> 00:00:23,119
a quick presentation to kind of give you

00:00:21,760 --> 00:00:24,480
an overview of what we're going to be

00:00:23,119 --> 00:00:26,560
building in the workshop

00:00:24,480 --> 00:00:27,760
and then i'm going to be jumping right

00:00:26,560 --> 00:00:31,279
into the workshop

00:00:27,760 --> 00:00:32,160
so go ahead and pull up the workshop

00:00:31,279 --> 00:00:36,239
here

00:00:32,160 --> 00:00:36,239
and go ahead and share my screen

00:00:38,800 --> 00:00:45,840
all right so um the the workshop

00:00:41,920 --> 00:00:48,480
is actually located um in my github

00:00:45,840 --> 00:00:49,680
but i'm going to go ahead and share a

00:00:48,480 --> 00:00:53,680
link to this

00:00:49,680 --> 00:00:58,079
it's going to be at github.com3

00:00:53,680 --> 00:00:59,840
photo amplified photo sharing workshop

00:00:58,079 --> 00:01:02,079
so let's go ahead and share the link to

00:00:59,840 --> 00:01:02,079
this

00:01:05,760 --> 00:01:09,200
okay so there's the link um and before

00:01:07,600 --> 00:01:11,840
we get into that we're going to be going

00:01:09,200 --> 00:01:12,799
through a quick overview of amplify so

00:01:11,840 --> 00:01:15,920
i'll go ahead and start

00:01:12,799 --> 00:01:15,920
this presentation real quick

00:01:17,520 --> 00:01:21,360
so thank you for coming to this and uh

00:01:20,080 --> 00:01:22,960
this is going to be about a 15 minute

00:01:21,360 --> 00:01:24,400
presentation and then we're going to be

00:01:22,960 --> 00:01:24,960
dabbing into the actual workshop

00:01:24,400 --> 00:01:26,400
material

00:01:24,960 --> 00:01:28,880
but before we get into that i kind of

00:01:26,400 --> 00:01:30,799
wanted to give an overview of amplify

00:01:28,880 --> 00:01:32,640
so my name is nader david i'm a senior

00:01:30,799 --> 00:01:33,680
developer advocate on the aws mobile

00:01:32,640 --> 00:01:36,159
team and i'm also

00:01:33,680 --> 00:01:36,799
a web and mobile engineer of about i

00:01:36,159 --> 00:01:38,479
guess

00:01:36,799 --> 00:01:41,040
nine years at this point i've been with

00:01:38,479 --> 00:01:42,799
aws for a little over two years

00:01:41,040 --> 00:01:44,240
and this is going to be an introduction

00:01:42,799 --> 00:01:45,759
to amplify which is

00:01:44,240 --> 00:01:47,280
going to be what we're using to kind of

00:01:45,759 --> 00:01:48,560
build our workshop with

00:01:47,280 --> 00:01:50,399
so i think it's good to kind of give an

00:01:48,560 --> 00:01:51,360
overview so when we're running into some

00:01:50,399 --> 00:01:52,000
of the things that we're going to be

00:01:51,360 --> 00:01:53,840
doing

00:01:52,000 --> 00:01:55,920
you have a good understanding of what

00:01:53,840 --> 00:01:58,320
that is

00:01:55,920 --> 00:01:59,439
so when people talk about amplify they

00:01:58,320 --> 00:02:01,360
hear two things

00:01:59,439 --> 00:02:02,880
aws amplify and then they also hear of

00:02:01,360 --> 00:02:04,399
the amplified framework and i think it's

00:02:02,880 --> 00:02:05,840
kind of confusing a little bit

00:02:04,399 --> 00:02:07,920
so i think what i'd like to do is go

00:02:05,840 --> 00:02:10,319
ahead and break apart what these two

00:02:07,920 --> 00:02:10,319
things are

00:02:10,399 --> 00:02:13,520
so the amplify framework is kind of the

00:02:12,800 --> 00:02:15,920
open source

00:02:13,520 --> 00:02:16,720
part of this it's also the tooling that

00:02:15,920 --> 00:02:19,840
kind of is

00:02:16,720 --> 00:02:21,680
the main part of amplify the things that

00:02:19,840 --> 00:02:24,800
amplify enables or just

00:02:21,680 --> 00:02:25,599
existing aws services amplify is kind of

00:02:24,800 --> 00:02:27,599
a framework that

00:02:25,599 --> 00:02:29,440
allows you to spin up these services and

00:02:27,599 --> 00:02:30,080
interact with them a lot easier than in

00:02:29,440 --> 00:02:33,040
the past

00:02:30,080 --> 00:02:34,879
with aws essentially a lower barrier to

00:02:33,040 --> 00:02:36,560
entry or just an easier way to kind of

00:02:34,879 --> 00:02:38,879
work with aws

00:02:36,560 --> 00:02:40,160
and then aws amplify is kind of the

00:02:38,879 --> 00:02:42,800
comprehensive term

00:02:40,160 --> 00:02:43,680
for the framework as well as the hosting

00:02:42,800 --> 00:02:46,319
service

00:02:43,680 --> 00:02:48,239
but the hosting service is only a small

00:02:46,319 --> 00:02:48,879
part of it most of actually what gets

00:02:48,239 --> 00:02:51,920
done

00:02:48,879 --> 00:02:54,239
in an amplified project is via the cli

00:02:51,920 --> 00:02:54,959
and the libraries which are part of the

00:02:54,239 --> 00:02:56,160
oss

00:02:54,959 --> 00:02:58,720
part and that's what we're going to be

00:02:56,160 --> 00:03:00,800
focusing on today

00:02:58,720 --> 00:03:02,959
so essentially you have these three main

00:03:00,800 --> 00:03:05,360
pieces you have

00:03:02,959 --> 00:03:06,720
the amplify cli you have the amplified

00:03:05,360 --> 00:03:07,840
libraries and you have the amplified

00:03:06,720 --> 00:03:10,239
hosting service

00:03:07,840 --> 00:03:11,120
the cli allows you to spin up aws

00:03:10,239 --> 00:03:12,959
services

00:03:11,120 --> 00:03:14,720
the client library allows you to then

00:03:12,959 --> 00:03:15,760
interact with those services from a web

00:03:14,720 --> 00:03:17,599
or mobile app

00:03:15,760 --> 00:03:19,599
and then the hosting service is kind of

00:03:17,599 --> 00:03:22,400
an aws service in and of itself

00:03:19,599 --> 00:03:24,080
that allows you to deploy static or

00:03:22,400 --> 00:03:26,560
dynamic websites

00:03:24,080 --> 00:03:28,720
and then the future ssr support as well

00:03:26,560 --> 00:03:32,159
for things like next to next

00:03:28,720 --> 00:03:33,040
so amplified cli is um you know you

00:03:32,159 --> 00:03:35,680
typically use it for

00:03:33,040 --> 00:03:37,599
for these four things initializing a new

00:03:35,680 --> 00:03:40,239
amplified project which is a

00:03:37,599 --> 00:03:42,080
kind of um boilerplate starter project

00:03:40,239 --> 00:03:44,000
for adding aws services

00:03:42,080 --> 00:03:45,920
once you've initialized your your

00:03:44,000 --> 00:03:47,519
project you can then start adding aws

00:03:45,920 --> 00:03:49,280
services via the cli

00:03:47,519 --> 00:03:51,200
you can also configure and update the

00:03:49,280 --> 00:03:53,680
existing aws services

00:03:51,200 --> 00:03:54,560
so let's say you create a rest api or

00:03:53,680 --> 00:03:56,319
lambda function

00:03:54,560 --> 00:03:58,480
you can modify your code locally and

00:03:56,319 --> 00:04:00,239
then use the cli to deploy that update

00:03:58,480 --> 00:04:02,480
and then as of this week you can also

00:04:00,239 --> 00:04:03,840
import existing aws services

00:04:02,480 --> 00:04:05,840
that's going to be a launch that we have

00:04:03,840 --> 00:04:07,040
in a couple of days and then also it

00:04:05,840 --> 00:04:10,720
does code generation

00:04:07,040 --> 00:04:14,080
so for instance graphql schema

00:04:10,720 --> 00:04:16,720
code introspection for generating local

00:04:14,080 --> 00:04:18,880
code based on your graphql schema it

00:04:16,720 --> 00:04:19,919
also does things like boilerplate code

00:04:18,880 --> 00:04:22,400
generation for

00:04:19,919 --> 00:04:24,639
popular types of lambda functions so for

00:04:22,400 --> 00:04:28,080
instance you might need a linda function

00:04:24,639 --> 00:04:30,800
that interacts with something like

00:04:28,080 --> 00:04:30,800
s3 or

00:04:31,280 --> 00:04:35,759
amazon cognito and you can use the um

00:04:34,320 --> 00:04:37,360
boilerplate that we create to kind of

00:04:35,759 --> 00:04:39,919
allow you to do that

00:04:37,360 --> 00:04:40,960
um the installation and configuration

00:04:39,919 --> 00:04:42,240
process this is something we're going to

00:04:40,960 --> 00:04:45,040
go over in the workshop

00:04:42,240 --> 00:04:46,479
you can install the npm and also another

00:04:45,040 --> 00:04:49,040
launch that we actually have

00:04:46,479 --> 00:04:50,320
um that's happening or i would say like

00:04:49,040 --> 00:04:53,199
a launch slash release

00:04:50,320 --> 00:04:54,960
slash update improvement is the ability

00:04:53,199 --> 00:04:56,720
to install using curl

00:04:54,960 --> 00:04:58,720
and actually that installation is six

00:04:56,720 --> 00:05:00,080
times faster than the npm installation

00:04:58,720 --> 00:05:00,880
so i'm really excited about that but

00:05:00,080 --> 00:05:03,360
anyway

00:05:00,880 --> 00:05:04,960
um today you would install it using npm

00:05:03,360 --> 00:05:06,720
npm install

00:05:04,960 --> 00:05:08,400
gives you the global and then you run

00:05:06,720 --> 00:05:10,160
the amplify

00:05:08,400 --> 00:05:12,720
keyword to kind of do different things

00:05:10,160 --> 00:05:15,199
via the cli

00:05:12,720 --> 00:05:16,880
once you've configured the amplify cli

00:05:15,199 --> 00:05:18,240
once you can then start using it for

00:05:16,880 --> 00:05:20,000
multiple projects

00:05:18,240 --> 00:05:21,759
you would initialize a new project by

00:05:20,000 --> 00:05:24,639
running the init command

00:05:21,759 --> 00:05:26,320
you would then update existing services

00:05:24,639 --> 00:05:28,160
using the update command

00:05:26,320 --> 00:05:29,840
you would add new services using the add

00:05:28,160 --> 00:05:32,000
command and then then you deploy

00:05:29,840 --> 00:05:33,360
updates using the push command we're

00:05:32,000 --> 00:05:33,680
going to be using pretty much all of

00:05:33,360 --> 00:05:37,120
these

00:05:33,680 --> 00:05:37,120
in our in our workshop

00:05:37,440 --> 00:05:42,560
so what you end up with is um this idea

00:05:40,639 --> 00:05:43,520
of a cloud formation stack which is

00:05:42,560 --> 00:05:45,440
essentially

00:05:43,520 --> 00:05:47,199
infrastructure as code that gets

00:05:45,440 --> 00:05:48,960
modified by the cli

00:05:47,199 --> 00:05:50,479
you get the aws services that are

00:05:48,960 --> 00:05:54,400
created for you

00:05:50,479 --> 00:05:57,600
you also have a local file called aws

00:05:54,400 --> 00:06:00,080
exports.js a local configuration file

00:05:57,600 --> 00:06:02,479
and uh that file is kept up for you by

00:06:00,080 --> 00:06:06,800
the cli so as you make updates

00:06:02,479 --> 00:06:08,479
you can um maybe basically you know

00:06:06,800 --> 00:06:09,919
add something update something remove

00:06:08,479 --> 00:06:10,560
something without having to actually

00:06:09,919 --> 00:06:12,160
touch

00:06:10,560 --> 00:06:14,160
the configuration file it kind of

00:06:12,160 --> 00:06:15,759
updates for you um and then you also

00:06:14,160 --> 00:06:17,840
have an amplify folder which is going to

00:06:15,759 --> 00:06:21,120
be where you have any code that you

00:06:17,840 --> 00:06:23,360
modify for your backend so for instance

00:06:21,120 --> 00:06:25,600
lambda function code graphql schema

00:06:23,360 --> 00:06:27,680
stuff like that

00:06:25,600 --> 00:06:29,440
and then once you've used the cli to

00:06:27,680 --> 00:06:31,199
deploy to deploy your services you'll

00:06:29,440 --> 00:06:31,840
use the client libraries to interact

00:06:31,199 --> 00:06:33,759
with them

00:06:31,840 --> 00:06:35,360
and all this all the client libraries

00:06:33,759 --> 00:06:37,520
are essentially

00:06:35,360 --> 00:06:39,520
really um easier ways to kind of

00:06:37,520 --> 00:06:41,680
interact with aws services than were

00:06:39,520 --> 00:06:43,360
available in the past so for instance

00:06:41,680 --> 00:06:45,440
you might have used the aws javascript

00:06:43,360 --> 00:06:47,039
sdk the amplify library is essentially

00:06:45,440 --> 00:06:48,800
like an abstraction on top of that that

00:06:47,039 --> 00:06:51,360
just makes that much easier and a lot

00:06:48,800 --> 00:06:54,080
more straightforward

00:06:51,360 --> 00:06:56,319
and it's it's also a lot of times easier

00:06:54,080 --> 00:06:57,680
to work with the cli and the amplified

00:06:56,319 --> 00:06:59,039
client together

00:06:57,680 --> 00:07:01,280
based on the configurations that are

00:06:59,039 --> 00:07:03,280
kind of created by the cli

00:07:01,280 --> 00:07:04,960
so the client libraries are platform

00:07:03,280 --> 00:07:07,120
specific libraries optimized for

00:07:04,960 --> 00:07:08,400
interacting with aws services from web

00:07:07,120 --> 00:07:11,759
and mobile apps

00:07:08,400 --> 00:07:15,039
so we have client library support for

00:07:11,759 --> 00:07:18,560
ios android and javascript

00:07:15,039 --> 00:07:18,560
as well as now flutter

00:07:18,639 --> 00:07:21,759
the usage looks something like this you

00:07:21,039 --> 00:07:24,639
install

00:07:21,759 --> 00:07:25,840
the client libraries this is web you

00:07:24,639 --> 00:07:28,880
then import

00:07:25,840 --> 00:07:30,720
some type of api from them so for in for

00:07:28,880 --> 00:07:33,120
instance in this example

00:07:30,720 --> 00:07:34,720
you can import the storage api to

00:07:33,120 --> 00:07:36,960
interact with s3

00:07:34,720 --> 00:07:37,919
and then you can then interact with the

00:07:36,960 --> 00:07:41,120
service using

00:07:37,919 --> 00:07:42,960
put get um and think or list

00:07:41,120 --> 00:07:45,039
so for instance you want to create a new

00:07:42,960 --> 00:07:47,199
item in s3 storage.put

00:07:45,039 --> 00:07:49,199
you want to get that item in storage.get

00:07:47,199 --> 00:07:52,319
you want to list everything in a bucket

00:07:49,199 --> 00:07:52,319
will be storage.list

00:07:52,479 --> 00:07:57,039
we also have framework custom framework

00:07:55,280 --> 00:08:00,400
ui support for

00:07:57,039 --> 00:08:01,759
angular ionic react and react native

00:08:00,400 --> 00:08:03,520
so one of the things that we're going to

00:08:01,759 --> 00:08:06,560
be using in the workshop today is

00:08:03,520 --> 00:08:07,680
a with authenticator flow for

00:08:06,560 --> 00:08:09,520
authentication

00:08:07,680 --> 00:08:10,960
and this is just a couple of lines of

00:08:09,520 --> 00:08:13,680
code that spins up

00:08:10,960 --> 00:08:14,240
an entire authentication flow using one

00:08:13,680 --> 00:08:16,240
of these

00:08:14,240 --> 00:08:17,280
uh frameworks and in our case it would

00:08:16,240 --> 00:08:18,879
be react

00:08:17,280 --> 00:08:22,080
but you can do other things with them as

00:08:18,879 --> 00:08:24,879
well they're essentially just really

00:08:22,080 --> 00:08:27,039
solid abstractions for popular types of

00:08:24,879 --> 00:08:28,000
functionality so in most apps you

00:08:27,039 --> 00:08:30,720
typically need

00:08:28,000 --> 00:08:32,479
a sign in and sign up flow for

00:08:30,720 --> 00:08:33,760
authentication purposes um if you know

00:08:32,479 --> 00:08:35,200
you need that you can just use this

00:08:33,760 --> 00:08:35,519
component and it will spin that up for

00:08:35,200 --> 00:08:37,839
you

00:08:35,519 --> 00:08:39,279
kind of saving you from repetitive code

00:08:37,839 --> 00:08:41,519
and then let's say you want to ship to

00:08:39,279 --> 00:08:44,480
production and you need to kind of

00:08:41,519 --> 00:08:46,080
really modify that to suit your purposes

00:08:44,480 --> 00:08:47,600
for your design you might need to kind

00:08:46,080 --> 00:08:49,600
of do some customization

00:08:47,600 --> 00:08:51,279
you can always then replace that with

00:08:49,600 --> 00:08:55,839
complete custom

00:08:51,279 --> 00:08:58,560
code that we also support

00:08:55,839 --> 00:08:59,920
the amplify ui libraries are a separate

00:08:58,560 --> 00:09:01,279
installation so it would look something

00:08:59,920 --> 00:09:04,800
like this for react you

00:09:01,279 --> 00:09:06,000
do npm install then the library itself

00:09:04,800 --> 00:09:08,399
for ui react

00:09:06,000 --> 00:09:09,600
which would be at aws amplify slash ui

00:09:08,399 --> 00:09:11,519
react

00:09:09,600 --> 00:09:13,519
and then you would import from that

00:09:11,519 --> 00:09:14,880
library in this example

00:09:13,519 --> 00:09:17,120
we're going to spin up an authentic

00:09:14,880 --> 00:09:19,760
authentication flow with just really

00:09:17,120 --> 00:09:21,360
one extra line of code the import and

00:09:19,760 --> 00:09:22,959
then we're just going to wrap the

00:09:21,360 --> 00:09:25,200
default export with that with

00:09:22,959 --> 00:09:26,080
authentication with authenticator

00:09:25,200 --> 00:09:27,760
utility

00:09:26,080 --> 00:09:29,519
and then what you get is something like

00:09:27,760 --> 00:09:31,440
this you get

00:09:29,519 --> 00:09:33,519
an entire authentication flow that is

00:09:31,440 --> 00:09:35,519
customizable to an extent

00:09:33,519 --> 00:09:37,279
so you can do stuff like change the

00:09:35,519 --> 00:09:39,120
theming change the font size

00:09:37,279 --> 00:09:41,680
change the form fields and stuff like

00:09:39,120 --> 00:09:41,680
that as well

00:09:42,000 --> 00:09:45,839
so some of the categories that are um

00:09:44,080 --> 00:09:47,040
you know currently supported we're going

00:09:45,839 --> 00:09:48,720
to go through all of them we're going to

00:09:47,040 --> 00:09:51,760
go through a couple real quick

00:09:48,720 --> 00:09:53,120
api allows you to create rest apis and

00:09:51,760 --> 00:09:56,480
graphql apis

00:09:53,120 --> 00:09:58,160
we're going to be focusing on graphql

00:09:56,480 --> 00:10:00,000
the rest api will look something like

00:09:58,160 --> 00:10:00,720
this where you basically spin up the

00:10:00,000 --> 00:10:03,200
service

00:10:00,720 --> 00:10:04,079
the cli creates a combination of a

00:10:03,200 --> 00:10:07,200
lambda function

00:10:04,079 --> 00:10:09,440
and an api endpoint using api gateway

00:10:07,200 --> 00:10:10,399
and then it also allows you the option

00:10:09,440 --> 00:10:12,560
to configure that

00:10:10,399 --> 00:10:14,079
with authentication as well so you can

00:10:12,560 --> 00:10:15,760
put an authenticated

00:10:14,079 --> 00:10:17,360
and authenticated mechanic

00:10:15,760 --> 00:10:18,800
authentication mechanism in front of

00:10:17,360 --> 00:10:20,880
your api endpoint

00:10:18,800 --> 00:10:22,480
for managing things like public and

00:10:20,880 --> 00:10:24,880
private access as well as

00:10:22,480 --> 00:10:26,000
passing in the user's identity into the

00:10:24,880 --> 00:10:28,079
function

00:10:26,000 --> 00:10:29,839
automatically so if you need to do any

00:10:28,079 --> 00:10:32,880
authorization in the lambda

00:10:29,839 --> 00:10:34,800
the identity will be automatically sent

00:10:32,880 --> 00:10:37,440
from the front end application in the

00:10:34,800 --> 00:10:41,200
headers processed via api gateway

00:10:37,440 --> 00:10:41,200
and then passed into the function event

00:10:41,760 --> 00:10:46,320
you can also do a full crud api with a

00:10:43,839 --> 00:10:48,880
dynamodb as a database

00:10:46,320 --> 00:10:50,800
and some of the different um you know

00:10:48,880 --> 00:10:53,640
rundowns that we currently support

00:10:50,800 --> 00:10:55,360
for amplify specifically or nodejs

00:10:53,640 --> 00:10:57,040
pythongo.net or java

00:10:55,360 --> 00:10:58,480
so when you're setting up your rest api

00:10:57,040 --> 00:11:00,880
you can kind of choose

00:10:58,480 --> 00:11:02,000
which run time you'd like to work with

00:11:00,880 --> 00:11:02,959
everything that we're doing in this

00:11:02,000 --> 00:11:05,440
workshop is

00:11:02,959 --> 00:11:07,200
javascript so um but if you're

00:11:05,440 --> 00:11:07,519
interested in python go or anything like

00:11:07,200 --> 00:11:10,880
that

00:11:07,519 --> 00:11:10,880
you can also choose this

00:11:11,600 --> 00:11:16,480
and the other category is graphql

00:11:15,040 --> 00:11:18,800
and that's the one we're going to be

00:11:16,480 --> 00:11:20,800
working with today and with graphql we

00:11:18,800 --> 00:11:21,600
have a managed graphql service called

00:11:20,800 --> 00:11:23,279
appsync

00:11:21,600 --> 00:11:24,880
and this allows you to interact with

00:11:23,279 --> 00:11:27,519
pretty much any data source

00:11:24,880 --> 00:11:28,320
so you can map directly to aws data

00:11:27,519 --> 00:11:31,519
sources

00:11:28,320 --> 00:11:32,560
like dynamodb or serverless aurora but

00:11:31,519 --> 00:11:34,480
you can also map

00:11:32,560 --> 00:11:36,079
into a lambda function as kind of the

00:11:34,480 --> 00:11:39,519
api gateway

00:11:36,079 --> 00:11:41,360
extension from appsync to map to mongodb

00:11:39,519 --> 00:11:42,560
or even firebase or really any data

00:11:41,360 --> 00:11:44,800
source that you'd like to

00:11:42,560 --> 00:11:47,040
so a lot of people are using appsync as

00:11:44,800 --> 00:11:49,600
the api layer for their microservice

00:11:47,040 --> 00:11:51,519
architecture

00:11:49,600 --> 00:11:53,120
um the cli also has additional

00:11:51,519 --> 00:11:54,959
functionality that we kind of group into

00:11:53,120 --> 00:11:56,959
this idea of a tool chain

00:11:54,959 --> 00:11:58,399
so i mentioned the graphql code

00:11:56,959 --> 00:12:00,320
generation there's also

00:11:58,399 --> 00:12:01,680
something called graphql transform that

00:12:00,320 --> 00:12:03,839
we're going to be using today

00:12:01,680 --> 00:12:04,800
that allows you to extend your graphql

00:12:03,839 --> 00:12:07,519
schema

00:12:04,800 --> 00:12:08,320
so you can add different graphql

00:12:07,519 --> 00:12:10,959
directives

00:12:08,320 --> 00:12:12,320
that we've created that allow you to add

00:12:10,959 --> 00:12:13,600
additional functionality

00:12:12,320 --> 00:12:15,920
the two things that we're going to be

00:12:13,600 --> 00:12:18,240
focusing on today are

00:12:15,920 --> 00:12:20,320
at connection which allow you to model

00:12:18,240 --> 00:12:21,920
one-to-many many-to-one relationships

00:12:20,320 --> 00:12:24,720
between your data types

00:12:21,920 --> 00:12:26,480
and then model which is a way to deploy

00:12:24,720 --> 00:12:29,680
an entire graphql

00:12:26,480 --> 00:12:30,320
api off of a single type which we'll

00:12:29,680 --> 00:12:33,680
look at

00:12:30,320 --> 00:12:34,399
uh now so for instance if you think of a

00:12:33,680 --> 00:12:36,800
typical

00:12:34,399 --> 00:12:38,959
graphql api you have to have your data

00:12:36,800 --> 00:12:40,800
sources you have to have your resolvers

00:12:38,959 --> 00:12:42,240
and you have to have the operations that

00:12:40,800 --> 00:12:44,720
map to the data sources

00:12:42,240 --> 00:12:45,839
via the resolvers so the add model data

00:12:44,720 --> 00:12:47,839
type will allow

00:12:45,839 --> 00:12:49,279
the app model directive will allow you

00:12:47,839 --> 00:12:50,959
to create a base type

00:12:49,279 --> 00:12:53,120
and then we'll create all of the crud

00:12:50,959 --> 00:12:54,000
operations so create read update delete

00:12:53,120 --> 00:12:55,920
and list

00:12:54,000 --> 00:12:58,000
we'll create all those operations all

00:12:55,920 --> 00:13:01,600
the resolvers and we'll create a

00:12:58,000 --> 00:13:03,279
dynamo db table for your to-do type

00:13:01,600 --> 00:13:05,120
so you get all of that just by using

00:13:03,279 --> 00:13:06,480
this single directive

00:13:05,120 --> 00:13:08,959
and then the other directive i want to

00:13:06,480 --> 00:13:10,320
call out is the ad connection directive

00:13:08,959 --> 00:13:12,240
and this just allows you to

00:13:10,320 --> 00:13:14,560
easily create relationships between

00:13:12,240 --> 00:13:15,360
types so for instance you might have a

00:13:14,560 --> 00:13:18,480
to-do app

00:13:15,360 --> 00:13:20,079
that has comments or maybe a blog app

00:13:18,480 --> 00:13:21,760
with posts that have comments

00:13:20,079 --> 00:13:23,920
using the ad connection you can define

00:13:21,760 --> 00:13:26,079
that relationship and therefore you can

00:13:23,920 --> 00:13:27,360
have additional data access patterns

00:13:26,079 --> 00:13:29,600
requiring to do's

00:13:27,360 --> 00:13:32,399
with the comments associated or you can

00:13:29,600 --> 00:13:33,839
just get comments by a to-do id

00:13:32,399 --> 00:13:35,760
and then when you create a comment you

00:13:33,839 --> 00:13:39,279
would just need to reference the id

00:13:35,760 --> 00:13:41,440
of the to-do that it's referencing um

00:13:39,279 --> 00:13:42,720
yes someone mentioned uh please take

00:13:41,440 --> 00:13:44,000
screenshots from the slides what i'm

00:13:42,720 --> 00:13:44,800
going to do is i'm going to share the

00:13:44,000 --> 00:13:46,959
slide deck

00:13:44,800 --> 00:13:48,399
on twitter afterwards or if there's a

00:13:46,959 --> 00:13:50,399
better way to share it i will but i

00:13:48,399 --> 00:13:52,160
think twitter is a good way i'm gonna

00:13:50,399 --> 00:13:53,680
upload the slide deck to dropbox and

00:13:52,160 --> 00:13:55,360
then share that right before i get off

00:13:53,680 --> 00:13:57,040
and i'll paste the link into the chat

00:13:55,360 --> 00:13:58,560
so feel free to take all of this and use

00:13:57,040 --> 00:14:00,560
it as you'd like

00:13:58,560 --> 00:14:02,240
um and that's it i wanted to try to make

00:14:00,560 --> 00:14:03,279
this as quick as possible because we

00:14:02,240 --> 00:14:04,320
have a lot of stuff to cover in the

00:14:03,279 --> 00:14:05,839
workshop

00:14:04,320 --> 00:14:08,240
and let's go ahead and jump to the

00:14:05,839 --> 00:14:10,720
workshop so i pasted a link to this

00:14:08,240 --> 00:14:14,000
workshop

00:14:10,720 --> 00:14:17,199
and i pasted it into the chat and

00:14:14,000 --> 00:14:20,079
what this basically is is it's

00:14:17,199 --> 00:14:21,440
an app that i think works really well

00:14:20,079 --> 00:14:23,920
when you're trying to

00:14:21,440 --> 00:14:25,440
um you know let me share also um i think

00:14:23,920 --> 00:14:28,480
i can share

00:14:25,440 --> 00:14:29,120
my video i think she said that they

00:14:28,480 --> 00:14:31,360
fixed that

00:14:29,120 --> 00:14:32,639
okay cool so i'm sharing my video so

00:14:31,360 --> 00:14:36,959
yeah hello everyone

00:14:32,639 --> 00:14:39,839
um basically when you're building an app

00:14:36,959 --> 00:14:41,680
there's a lot of things that are common

00:14:39,839 --> 00:14:45,040
things that you end up needing

00:14:41,680 --> 00:14:48,000
and i kind of built this workshop around

00:14:45,040 --> 00:14:48,480
what i think is a good introduction to

00:14:48,000 --> 00:14:50,800
kind of

00:14:48,480 --> 00:14:51,920
the general overview of all these things

00:14:50,800 --> 00:14:53,839
how they work together

00:14:51,920 --> 00:14:55,680
so you can then take those and build out

00:14:53,839 --> 00:14:57,760
different apps yourself

00:14:55,680 --> 00:14:59,199
maybe not this exact app but using a lot

00:14:57,760 --> 00:15:01,360
of the common scenarios

00:14:59,199 --> 00:15:02,880
so if you think of a lot of common apps

00:15:01,360 --> 00:15:04,880
today that are popular

00:15:02,880 --> 00:15:06,560
i like to list out the more popular ones

00:15:04,880 --> 00:15:07,839
because they kind of follow this flow

00:15:06,560 --> 00:15:10,399
that we're going to be going to there

00:15:07,839 --> 00:15:12,000
going over today uh one is like

00:15:10,399 --> 00:15:13,760
something like a twitter like up

00:15:12,000 --> 00:15:15,600
uh maybe something like instagram or

00:15:13,760 --> 00:15:16,880
something like a blog like medium or

00:15:15,600 --> 00:15:20,000
dev.2

00:15:16,880 --> 00:15:21,360
you have this idea of authenticated and

00:15:20,000 --> 00:15:23,760
unauthenticated

00:15:21,360 --> 00:15:25,519
access so that means if i am not signed

00:15:23,760 --> 00:15:26,240
into twitter i can go and i can view a

00:15:25,519 --> 00:15:29,279
feed

00:15:26,240 --> 00:15:32,560
of items probably but if i am

00:15:29,279 --> 00:15:32,880
signed in i can actually go and interact

00:15:32,560 --> 00:15:35,120
with

00:15:32,880 --> 00:15:36,800
the posts that i've created i can delete

00:15:35,120 --> 00:15:38,480
those but no one else can delete those

00:15:36,800 --> 00:15:39,360
right only only i can delete the posts

00:15:38,480 --> 00:15:41,120
that i've made

00:15:39,360 --> 00:15:43,120
or i might be able to update a blog post

00:15:41,120 --> 00:15:45,040
that i've made um

00:15:43,120 --> 00:15:46,160
when you look at that app like let's say

00:15:45,040 --> 00:15:48,880
for instance like twitter

00:15:46,160 --> 00:15:50,880
you have the ability to uh authenticate

00:15:48,880 --> 00:15:52,880
you have the ability to create posts and

00:15:50,880 --> 00:15:54,880
you have the ability to upload media

00:15:52,880 --> 00:15:56,160
so grouping all those together and how

00:15:54,880 --> 00:15:57,519
to make this all work i think is a

00:15:56,160 --> 00:15:58,320
really solid use case

00:15:57,519 --> 00:15:59,680
and that's what we're going to be

00:15:58,320 --> 00:16:01,199
building today we're going to be

00:15:59,680 --> 00:16:02,720
building like a really bare bones

00:16:01,199 --> 00:16:04,560
version of something like instagram that

00:16:02,720 --> 00:16:08,480
i call postagram

00:16:04,560 --> 00:16:09,920
now this is a self-paced workshop

00:16:08,480 --> 00:16:12,079
meaning that i'm going to be going

00:16:09,920 --> 00:16:12,399
through it at a pace that i feel is good

00:16:12,079 --> 00:16:15,519
for

00:16:12,399 --> 00:16:15,839
um for the average person but it might

00:16:15,519 --> 00:16:17,920
go

00:16:15,839 --> 00:16:19,279
faster or slower for you so if you feel

00:16:17,920 --> 00:16:21,600
like you're going faster

00:16:19,279 --> 00:16:23,279
then go ahead and jump ahead and then

00:16:21,600 --> 00:16:24,959
you can ask me questions either here or

00:16:23,279 --> 00:16:27,040
offline on twitter i'm going to share

00:16:24,959 --> 00:16:28,320
my my contact info there and i'll be

00:16:27,040 --> 00:16:30,959
available there

00:16:28,320 --> 00:16:32,240
but um at the end of this workshop we're

00:16:30,959 --> 00:16:33,519
going to be kind of putting all these

00:16:32,240 --> 00:16:36,560
pieces together to kind of

00:16:33,519 --> 00:16:38,480
add authentication data

00:16:36,560 --> 00:16:40,160
add authorization around the data and

00:16:38,480 --> 00:16:42,639
also add media

00:16:40,160 --> 00:16:43,199
um and this workshop isn't meant to

00:16:42,639 --> 00:16:45,680
clone

00:16:43,199 --> 00:16:46,959
like i have an example here of the

00:16:45,680 --> 00:16:49,440
finished app

00:16:46,959 --> 00:16:50,480
but really this is more of like a github

00:16:49,440 --> 00:16:52,160
readme that has

00:16:50,480 --> 00:16:54,160
evolved over the last few months because

00:16:52,160 --> 00:16:55,920
i've given a similar workshop to this

00:16:54,160 --> 00:16:58,480
i've gotten pull requests i've gotten

00:16:55,920 --> 00:16:59,680
issues and this has allowed me to kind

00:16:58,480 --> 00:17:01,279
of um

00:16:59,680 --> 00:17:03,040
evolve this workshop into something

00:17:01,279 --> 00:17:04,880
that's more useful based on

00:17:03,040 --> 00:17:06,880
actual feedback from people that have

00:17:04,880 --> 00:17:08,720
taken it now i've added a couple of new

00:17:06,880 --> 00:17:11,120
sections for for this event

00:17:08,720 --> 00:17:13,120
that we're going to go over today that

00:17:11,120 --> 00:17:14,640
kind of go into a little bit more on the

00:17:13,120 --> 00:17:15,839
media storage side because i think that

00:17:14,640 --> 00:17:18,160
was a little bit

00:17:15,839 --> 00:17:19,919
missing a little bit of depth there but

00:17:18,160 --> 00:17:21,120
uh but in general

00:17:19,919 --> 00:17:22,959
the way that this is gonna work it's

00:17:21,120 --> 00:17:24,959
gonna walk through three main

00:17:22,959 --> 00:17:27,199
steps the first step is kind of a

00:17:24,959 --> 00:17:29,679
general overview of how these

00:17:27,199 --> 00:17:31,280
different services work so we're gonna

00:17:29,679 --> 00:17:32,320
walk through adding an api

00:17:31,280 --> 00:17:34,480
we're going to walk through adding

00:17:32,320 --> 00:17:35,760
authentication we're going to add walk

00:17:34,480 --> 00:17:37,120
through adding storage

00:17:35,760 --> 00:17:39,280
but it's not all going to really fit

00:17:37,120 --> 00:17:40,480
together at first um and then what we're

00:17:39,280 --> 00:17:41,679
going to do is now that we have an

00:17:40,480 --> 00:17:43,360
understanding of how to add these

00:17:41,679 --> 00:17:44,480
services and interact with them

00:17:43,360 --> 00:17:46,240
we're going to start building something

00:17:44,480 --> 00:17:47,760
a little more sophisticated the actual

00:17:46,240 --> 00:17:50,640
photo sharing app

00:17:47,760 --> 00:17:52,320
that's kind of like step two and then

00:17:50,640 --> 00:17:54,400
after we've built that out

00:17:52,320 --> 00:17:56,240
i have kind of like an advanced section

00:17:54,400 --> 00:17:58,880
that goes into a little bit more

00:17:56,240 --> 00:18:00,400
advanced stuff so um what we're going to

00:17:58,880 --> 00:18:02,480
do in that advanced section

00:18:00,400 --> 00:18:04,080
is going to be doing stuff like adding

00:18:02,480 --> 00:18:05,840
more author authorization and

00:18:04,080 --> 00:18:08,880
fine-grained access control

00:18:05,840 --> 00:18:12,320
um having multiple types of

00:18:08,880 --> 00:18:14,400
authorization access so um i think

00:18:12,320 --> 00:18:16,080
for this next hour we're not going to

00:18:14,400 --> 00:18:17,440
get to that advanced part i think what

00:18:16,080 --> 00:18:19,760
we're going to get to

00:18:17,440 --> 00:18:21,600
is really the beginning part um kind of

00:18:19,760 --> 00:18:22,799
going through each of these services

00:18:21,600 --> 00:18:24,799
and i think that's going to set the

00:18:22,799 --> 00:18:27,280
foundation for you to continue

00:18:24,799 --> 00:18:28,880
um to actually build out the rest of

00:18:27,280 --> 00:18:30,480
this on your own time

00:18:28,880 --> 00:18:32,480
because um we do have such a short

00:18:30,480 --> 00:18:33,919
amount of time i'm thinking what we're

00:18:32,480 --> 00:18:35,280
going to be able to basically get

00:18:33,919 --> 00:18:38,559
through

00:18:35,280 --> 00:18:40,480
is uh about two right here where

00:18:38,559 --> 00:18:43,039
we get to actually um this part right

00:18:40,480 --> 00:18:43,440
here but everything that we cover above

00:18:43,039 --> 00:18:45,200
this

00:18:43,440 --> 00:18:46,640
will lay the groundwork for you to

00:18:45,200 --> 00:18:47,200
understand i think what is actually

00:18:46,640 --> 00:18:50,880
happening

00:18:47,200 --> 00:18:52,320
um for the next steps so

00:18:50,880 --> 00:18:53,919
i hope that's i hope that makes sense

00:18:52,320 --> 00:18:55,760
for everybody it seems to be

00:18:53,919 --> 00:18:57,360
working out pretty good for the few

00:18:55,760 --> 00:18:58,559
times that i've done this similar

00:18:57,360 --> 00:19:01,440
approach

00:18:58,559 --> 00:19:03,120
and um basically we're gonna walk

00:19:01,440 --> 00:19:04,799
through starting here from the overview

00:19:03,120 --> 00:19:06,720
and everything in here should be copy

00:19:04,799 --> 00:19:08,559
and paste so all this code

00:19:06,720 --> 00:19:10,000
should work really great for you without

00:19:08,559 --> 00:19:12,640
having to kind of really

00:19:10,000 --> 00:19:13,360
worry about um if you if you end up like

00:19:12,640 --> 00:19:14,799
wanting to

00:19:13,360 --> 00:19:16,160
type this yourself which you know i

00:19:14,799 --> 00:19:16,880
recommend if you feel like you have the

00:19:16,160 --> 00:19:19,679
time

00:19:16,880 --> 00:19:21,200
um and then you run into some error just

00:19:19,679 --> 00:19:22,880
being able to copy and paste and then

00:19:21,200 --> 00:19:24,559
walk through it should work for you

00:19:22,880 --> 00:19:26,799
so um that's kind of what i like to have

00:19:24,559 --> 00:19:28,559
is like a no-brainer approach where

00:19:26,799 --> 00:19:29,840
even if you kind of miss something you

00:19:28,559 --> 00:19:32,960
can always go back and copy

00:19:29,840 --> 00:19:34,320
paste and it should work so um if you

00:19:32,960 --> 00:19:35,440
look at the overview it tells you what

00:19:34,320 --> 00:19:36,640
we're going to do we're going to create

00:19:35,440 --> 00:19:39,360
a new react app

00:19:36,640 --> 00:19:40,960
from scratch we're going to then install

00:19:39,360 --> 00:19:43,200
the dependencies locally

00:19:40,960 --> 00:19:44,799
so npm install we're going to then

00:19:43,200 --> 00:19:46,320
initialize an amplify app and we're

00:19:44,799 --> 00:19:48,880
going to start adding features

00:19:46,320 --> 00:19:49,600
so i hope that sounds good for everybody

00:19:48,880 --> 00:19:53,280
and

00:19:49,600 --> 00:19:55,360
this workshop is open source so anybody

00:19:53,280 --> 00:19:57,679
that has any feedback

00:19:55,360 --> 00:19:58,640
open an issue i would love to help you

00:19:57,679 --> 00:20:00,720
answer your

00:19:58,640 --> 00:20:02,880
your feedback either in the form of an

00:20:00,720 --> 00:20:04,720
answer q a type style

00:20:02,880 --> 00:20:06,159
or in the form of a pull request or

00:20:04,720 --> 00:20:08,159
emerge on mayan or

00:20:06,159 --> 00:20:09,440
like an update from me to make this a

00:20:08,159 --> 00:20:12,880
better workshop for

00:20:09,440 --> 00:20:14,000
for future developers so

00:20:12,880 --> 00:20:16,240
what we're going to do is we're going to

00:20:14,000 --> 00:20:18,159
go ahead and install right here

00:20:16,240 --> 00:20:20,400
getting started and creating a new react

00:20:18,159 --> 00:20:22,799
app so i'm going to go ahead and

00:20:20,400 --> 00:20:25,039
take my screen and kind of bump it like

00:20:22,799 --> 00:20:25,039
this

00:20:25,919 --> 00:20:30,720
okay and i'm going to go ahead and

00:20:28,720 --> 00:20:32,720
create a new react app

00:20:30,720 --> 00:20:35,120
using npx so we're going to go ahead and

00:20:32,720 --> 00:20:36,880
start here npx create react app

00:20:35,120 --> 00:20:38,000
and from here we're going to change into

00:20:36,880 --> 00:20:42,240
the directory and install the

00:20:38,000 --> 00:20:42,240
dependencies using either npm or yarn

00:20:44,080 --> 00:20:48,320
and i might make my screen a little bit

00:20:46,840 --> 00:20:51,520
bigger

00:20:48,320 --> 00:20:51,520
or at least my text

00:20:54,000 --> 00:21:03,840
wanna make sure everybody can see

00:21:08,400 --> 00:21:12,240
yes so someone asked uh can i share the

00:21:10,400 --> 00:21:17,840
links because they started off late yes

00:21:12,240 --> 00:21:17,840
absolutely go ahead and

00:21:18,240 --> 00:21:31,840
share this one more time

00:21:44,559 --> 00:21:47,679
so some of the dependencies that we're

00:21:46,240 --> 00:21:50,880
going to be installing are

00:21:47,679 --> 00:21:52,480
aws amplify which is the javascript

00:21:50,880 --> 00:21:54,000
library for amplify

00:21:52,480 --> 00:21:55,679
emotion which is what we're going to be

00:21:54,000 --> 00:21:58,400
using for styling

00:21:55,679 --> 00:22:00,080
uuid is a library for creating unique

00:21:58,400 --> 00:22:03,360
identifiers

00:22:00,080 --> 00:22:06,720
react router dom is a library for doing

00:22:03,360 --> 00:22:10,240
client-side routing and then at aws

00:22:06,720 --> 00:22:13,679
dash amplify ui react is the

00:22:10,240 --> 00:22:16,080
ui component library for amplifier so

00:22:13,679 --> 00:22:18,640
we're going to install all of these next

00:22:16,080 --> 00:22:20,480
after we change into that new directory

00:22:18,640 --> 00:22:23,280
so i should be able to go ahead and see

00:22:20,480 --> 00:22:23,280
the histogram

00:22:23,600 --> 00:22:27,840
and from here should be in a blank react

00:22:26,559 --> 00:22:30,799
app

00:22:27,840 --> 00:22:32,640
and then i'll go ahead and just do yarn

00:22:30,799 --> 00:22:36,240
add or npm install

00:22:32,640 --> 00:22:36,240
and i'm just going to paste in all these

00:22:38,840 --> 00:22:41,840
dependencies

00:23:08,720 --> 00:23:14,480
okay so after that install

00:23:12,159 --> 00:23:15,440
install is done i'm gonna wait just a

00:23:14,480 --> 00:23:18,080
couple of seconds

00:23:15,440 --> 00:23:19,679
to make sure everyone is uh caught up

00:23:18,080 --> 00:23:22,559
because i know my computer

00:23:19,679 --> 00:23:23,600
is not the same speed as everyone else's

00:23:22,559 --> 00:23:25,520
and i'm going to go ahead

00:23:23,600 --> 00:23:27,679
and maybe upload my slot deck on this

00:23:25,520 --> 00:23:37,840
other window over here to dropbox

00:23:27,679 --> 00:23:37,840
and share it

00:23:59,600 --> 00:24:05,760
all right so while that is uploaded

00:24:03,279 --> 00:24:07,679
i'm uploading on a different screen um

00:24:05,760 --> 00:24:08,799
we've created our react app by running

00:24:07,679 --> 00:24:10,320
npx

00:24:08,799 --> 00:24:11,919
we've changed into the directory and

00:24:10,320 --> 00:24:14,960
we've installed the dependencies

00:24:11,919 --> 00:24:18,240
next is the amplify related stuff

00:24:14,960 --> 00:24:21,200
so um we are going to install the

00:24:18,240 --> 00:24:22,720
global dependency of the amplify cli by

00:24:21,200 --> 00:24:27,840
running npm install dash

00:24:22,720 --> 00:24:27,840
g at aws amplify

00:24:30,840 --> 00:24:33,840
cli

00:24:50,799 --> 00:25:03,360
and i'm pasting a link to the slaw deck

00:25:00,880 --> 00:25:05,200
um no i probably wouldn't i would

00:25:03,360 --> 00:25:06,960
probably recommend not using

00:25:05,200 --> 00:25:08,960
docker yeah just like you mentioned i

00:25:06,960 --> 00:25:15,840
would recommend using just vanilla

00:25:08,960 --> 00:25:15,840
linux should be good to go

00:25:19,120 --> 00:25:23,120
okay so after you install the cli you

00:25:22,080 --> 00:25:26,080
should get something like

00:25:23,120 --> 00:25:27,120
this successfully install the amplified

00:25:26,080 --> 00:25:28,960
cli

00:25:27,120 --> 00:25:30,960
and then you should be able to run just

00:25:28,960 --> 00:25:34,080
the amplify command

00:25:30,960 --> 00:25:34,720
and you might see this type of output

00:25:34,080 --> 00:25:36,720
here

00:25:34,720 --> 00:25:37,840
which basically means the cli has been

00:25:36,720 --> 00:25:41,279
installed

00:25:37,840 --> 00:25:43,600
and you're good to go um

00:25:41,279 --> 00:25:45,279
what we're going to be releasing uh you

00:25:43,600 --> 00:25:47,200
know this week actually i think or maybe

00:25:45,279 --> 00:25:50,640
early next week is a crawl command

00:25:47,200 --> 00:25:51,600
also so if you have any um reason to not

00:25:50,640 --> 00:25:53,279
use npm

00:25:51,600 --> 00:25:54,640
a lot of mobile developers actually

00:25:53,279 --> 00:25:57,760
we've noticed

00:25:54,640 --> 00:25:59,600
um are more interested in using curl the

00:25:57,760 --> 00:26:01,279
curl version for some reason is like six

00:25:59,600 --> 00:26:02,640
times faster anyway so i'm going to

00:26:01,279 --> 00:26:03,360
start recommending that when that comes

00:26:02,640 --> 00:26:06,080
out

00:26:03,360 --> 00:26:07,760
which is a really nice experience so now

00:26:06,080 --> 00:26:08,960
that we've installed the cli we've

00:26:07,760 --> 00:26:12,400
tested it out

00:26:08,960 --> 00:26:13,360
what we want to do is configure the cli

00:26:12,400 --> 00:26:15,360
with a user

00:26:13,360 --> 00:26:16,480
and you only have to do this once like

00:26:15,360 --> 00:26:18,000
ever so

00:26:16,480 --> 00:26:19,840
once you've done this you can create

00:26:18,000 --> 00:26:21,279
multiple amplify apps

00:26:19,840 --> 00:26:22,880
you don't have to keep doing this every

00:26:21,279 --> 00:26:23,440
time so this is like a one-time step

00:26:22,880 --> 00:26:25,600
really

00:26:23,440 --> 00:26:28,080
you just need to basically create a user

00:26:25,600 --> 00:26:30,000
locally that you're going to be

00:26:28,080 --> 00:26:31,760
using to create all of these different

00:26:30,000 --> 00:26:33,600
services so for instance

00:26:31,760 --> 00:26:35,200
if you log into your aws account right

00:26:33,600 --> 00:26:37,840
now and you create a new

00:26:35,200 --> 00:26:39,279
s3 bucket it's essentially us being like

00:26:37,840 --> 00:26:41,200
okay let's take that

00:26:39,279 --> 00:26:42,400
user authentication mechanism and move

00:26:41,200 --> 00:26:44,159
it down locally

00:26:42,400 --> 00:26:46,080
so we can then start doing that same

00:26:44,159 --> 00:26:48,720
thing from our cli as opposed to doing

00:26:46,080 --> 00:26:50,559
it from the console

00:26:48,720 --> 00:26:52,000
and to do that we're going to be running

00:26:50,559 --> 00:26:53,760
amplify configure and this

00:26:52,000 --> 00:26:56,159
is going to walk us through the steps

00:26:53,760 --> 00:26:57,600
necessary now this is probably the most

00:26:56,159 --> 00:26:58,400
confusing part of this workshop if

00:26:57,600 --> 00:27:02,880
you've never

00:26:58,400 --> 00:27:06,000
done this before so therefore

00:27:02,880 --> 00:27:08,320
i also have in the workshop a

00:27:06,000 --> 00:27:09,919
link to a video that allows you to kind

00:27:08,320 --> 00:27:12,080
of fast forward and walk through this

00:27:09,919 --> 00:27:13,919
process at your own pace

00:27:12,080 --> 00:27:15,679
but uh so i'll recommend if you get

00:27:13,919 --> 00:27:16,559
stuck here checking out this video it

00:27:15,679 --> 00:27:19,520
should be

00:27:16,559 --> 00:27:20,640
a lot more clear if if you get lost at

00:27:19,520 --> 00:27:22,720
some point

00:27:20,640 --> 00:27:23,919
but when we run amplify configure you're

00:27:22,720 --> 00:27:27,520
going to see that

00:27:23,919 --> 00:27:29,919
the terminal opens up the console of aws

00:27:27,520 --> 00:27:31,520
automatically it does this just to make

00:27:29,919 --> 00:27:33,279
sure that we're signed in because in the

00:27:31,520 --> 00:27:35,120
next step we're going to need to be

00:27:33,279 --> 00:27:36,399
signed in to create a user in the

00:27:35,120 --> 00:27:37,919
dashboard

00:27:36,399 --> 00:27:39,600
this is kind of the one step where you

00:27:37,919 --> 00:27:41,039
actually need to interact with the aws

00:27:39,600 --> 00:27:43,360
console because in the future

00:27:41,039 --> 00:27:44,960
we're not going to really be doing that

00:27:43,360 --> 00:27:46,480
so after we've done that we get to

00:27:44,960 --> 00:27:47,039
choose the region that we'd like to

00:27:46,480 --> 00:27:50,080
create

00:27:47,039 --> 00:27:51,679
the user in um

00:27:50,080 --> 00:27:53,600
can the amplified somebody ask a

00:27:51,679 --> 00:27:56,480
question can amplify cli

00:27:53,600 --> 00:27:58,720
use configured aws profiles yes so if

00:27:56,480 --> 00:28:00,880
you already have an aws profile locally

00:27:58,720 --> 00:28:02,559
using the aws sdk you can actually skip

00:28:00,880 --> 00:28:05,679
this part um good

00:28:02,559 --> 00:28:07,600
good call out there so um

00:28:05,679 --> 00:28:08,720
what we're doing is basically creating a

00:28:07,600 --> 00:28:12,720
local user

00:28:08,720 --> 00:28:16,559
um similar to the way the aws cli does

00:28:12,720 --> 00:28:18,000
so anyway back to these commands here

00:28:16,559 --> 00:28:19,919
i'm going to choose the region closest

00:28:18,000 --> 00:28:21,200
to me so for me i'm on the east coast

00:28:19,919 --> 00:28:22,640
kind of i'm in mississippi i'm going to

00:28:21,200 --> 00:28:25,440
choose usc 1.

00:28:22,640 --> 00:28:26,000
you can use the region that's closest to

00:28:25,440 --> 00:28:30,159
you

00:28:26,000 --> 00:28:30,799
so any of these will work fine i'll

00:28:30,159 --> 00:28:33,120
choose

00:28:30,799 --> 00:28:33,919
usc one and then i'm going to give the

00:28:33,120 --> 00:28:37,200
name for

00:28:33,919 --> 00:28:38,720
the iem user and this is going to be

00:28:37,200 --> 00:28:41,279
whatever you'd like it to be really but

00:28:38,720 --> 00:28:44,399
i have um kind of in the workshop

00:28:41,279 --> 00:28:47,919
a name that i'm going to use

00:28:44,399 --> 00:28:47,919
called amplify cli user

00:28:49,919 --> 00:28:53,120
and then what's going to happen now is

00:28:51,600 --> 00:28:55,279
the aws

00:28:53,120 --> 00:28:56,840
console is going to open back again and

00:28:55,279 --> 00:29:00,320
it's going to open up in

00:28:56,840 --> 00:29:01,840
this walk through for creating a new iam

00:29:00,320 --> 00:29:04,960
user which is basically

00:29:01,840 --> 00:29:06,399
short for identity access management and

00:29:04,960 --> 00:29:08,159
you can just accept all of these

00:29:06,399 --> 00:29:11,679
defaults

00:29:08,159 --> 00:29:12,960
um basically it's gonna give you

00:29:11,679 --> 00:29:14,240
the things that you that you need

00:29:12,960 --> 00:29:15,200
necessary and i'm going to actually

00:29:14,240 --> 00:29:18,080
change this

00:29:15,200 --> 00:29:20,640
user name here because i apparently have

00:29:18,080 --> 00:29:23,120
one already with the same name

00:29:20,640 --> 00:29:25,440
so you give the user a name you click

00:29:23,120 --> 00:29:25,440
next

00:29:25,520 --> 00:29:29,039
you click uh next in the permissions

00:29:28,559 --> 00:29:30,640
area

00:29:29,039 --> 00:29:32,960
essentially what we're doing here is

00:29:30,640 --> 00:29:34,960
we're we're saying we want to give admin

00:29:32,960 --> 00:29:37,200
uh privilege to this user because

00:29:34,960 --> 00:29:39,039
amplify cli actually interacts with

00:29:37,200 --> 00:29:40,880
dozens of aws services

00:29:39,039 --> 00:29:43,039
so we want to make sure that this user

00:29:40,880 --> 00:29:43,760
is configured to be able to do all the

00:29:43,039 --> 00:29:47,200
things that

00:29:43,760 --> 00:29:49,760
need to be done so we click next

00:29:47,200 --> 00:29:53,120
and then we don't need any tags so you

00:29:49,760 --> 00:29:54,480
can just click next review

00:29:53,120 --> 00:29:56,720
and then it's going to kind of give you

00:29:54,480 --> 00:29:57,200
an overview of the user that we're

00:29:56,720 --> 00:29:59,440
creating

00:29:57,200 --> 00:30:00,559
so it gives you the name it gives you

00:29:59,440 --> 00:30:02,720
the

00:30:00,559 --> 00:30:04,320
permissions which for us we're giving ad

00:30:02,720 --> 00:30:08,720
administrator access

00:30:04,320 --> 00:30:11,840
and then it says no tags were added

00:30:08,720 --> 00:30:14,159
um and then we can click create user and

00:30:11,840 --> 00:30:16,880
someone asked is the aws

00:30:14,159 --> 00:30:18,159
middle east region up i believe i

00:30:16,880 --> 00:30:20,720
believe they did launch

00:30:18,159 --> 00:30:21,360
that i don't know if aws amplify yet

00:30:20,720 --> 00:30:24,720
enables

00:30:21,360 --> 00:30:26,320
or supports that region yet but uh

00:30:24,720 --> 00:30:28,240
but i believe it did launch and then

00:30:26,320 --> 00:30:30,000
we're usually a few months behind

00:30:28,240 --> 00:30:31,279
as far as those sorts of things are

00:30:30,000 --> 00:30:37,440
concerned

00:30:31,279 --> 00:30:40,880
uh amplify at least

00:30:37,440 --> 00:30:41,919
oh i think i maybe um uploaded this

00:30:40,880 --> 00:30:46,320
slide deck

00:30:41,919 --> 00:30:48,840
to the wrong place let's see here

00:30:46,320 --> 00:30:50,159
there we go okay so once you create the

00:30:48,840 --> 00:30:51,840
user

00:30:50,159 --> 00:30:53,679
you should get an access key id and a

00:30:51,840 --> 00:30:55,279
secret access key

00:30:53,679 --> 00:30:56,480
the access key id of the secret access

00:30:55,279 --> 00:30:58,159
key is what we're going to need now on

00:30:56,480 --> 00:31:00,480
these next steps so

00:30:58,159 --> 00:31:02,399
don't close this out just yet go ahead

00:31:00,480 --> 00:31:03,440
and copy to your clipboard the access

00:31:02,399 --> 00:31:05,039
key id

00:31:03,440 --> 00:31:07,760
and then you would jump back to your

00:31:05,039 --> 00:31:11,120
command line to continue here

00:31:07,760 --> 00:31:11,120
i can minimize this a little bit

00:31:11,760 --> 00:31:16,000
so the access key id i can now just

00:31:13,679 --> 00:31:18,880
enter here i'm going to paste it here

00:31:16,000 --> 00:31:20,640
if you're on windows and you notice that

00:31:18,880 --> 00:31:23,679
it doesn't show up like this

00:31:20,640 --> 00:31:26,080
you may have to manually type this in or

00:31:23,679 --> 00:31:27,120
go some other route sometimes copy and

00:31:26,080 --> 00:31:30,240
paste works

00:31:27,120 --> 00:31:31,039
good on bash on windows sometimes i've

00:31:30,240 --> 00:31:33,279
noticed that

00:31:31,039 --> 00:31:35,120
people have issues with it but either

00:31:33,279 --> 00:31:36,159
way we need to basically give the access

00:31:35,120 --> 00:31:38,799
key id

00:31:36,159 --> 00:31:39,519
and then the secret access key here so

00:31:38,799 --> 00:31:40,720
i'm going to

00:31:39,519 --> 00:31:42,399
go ahead and show this because i'm going

00:31:40,720 --> 00:31:44,640
to delete this immediately after anyway

00:31:42,399 --> 00:31:47,039
so no one should be able to hack me

00:31:44,640 --> 00:31:47,760
go ahead and paste that there and now

00:31:47,039 --> 00:31:50,559
we've entered

00:31:47,760 --> 00:31:51,360
our secret access key and our access key

00:31:50,559 --> 00:31:53,279
id

00:31:51,360 --> 00:31:54,720
and this is the last thing we need to do

00:31:53,279 --> 00:31:57,279
is just give this a user

00:31:54,720 --> 00:31:57,840
so i usually copy the username that i've

00:31:57,279 --> 00:32:01,360
created

00:31:57,840 --> 00:32:03,919
in the aws console

00:32:01,360 --> 00:32:04,720
so i called this amplify cli user and i

00:32:03,919 --> 00:32:07,360
added dash

00:32:04,720 --> 00:32:10,960
test whatever you called yours you might

00:32:07,360 --> 00:32:10,960
want to just use the same user here

00:32:11,039 --> 00:32:15,039
and then once you've done that

00:32:13,200 --> 00:32:16,880
successfully it will say successfully

00:32:15,039 --> 00:32:20,640
set up the new user

00:32:16,880 --> 00:32:22,880
so i'm going to go ahead and open

00:32:20,640 --> 00:32:24,080
in a separate window my iam dashboard

00:32:22,880 --> 00:32:25,679
and delete this user

00:32:24,080 --> 00:32:26,480
because i don't need this user i was

00:32:25,679 --> 00:32:28,080
just kind of doing this for

00:32:26,480 --> 00:32:32,320
demonstration purposes

00:32:28,080 --> 00:32:33,760
and i'll also expose my credentials so

00:32:32,320 --> 00:32:43,840
that way i can go ahead and delete this

00:32:33,760 --> 00:32:43,840
and then continue on

00:32:55,200 --> 00:32:58,080
all right so

00:33:00,880 --> 00:33:04,720
now that i've created and configured the

00:33:03,279 --> 00:33:07,600
user

00:33:04,720 --> 00:33:09,919
we're done with this whole part here the

00:33:07,600 --> 00:33:12,640
configuration process is complete and

00:33:09,919 --> 00:33:14,000
now we can start using amplify

00:33:12,640 --> 00:33:17,840
so what we're going to do is initialize

00:33:14,000 --> 00:33:17,840
a new project by running amplifying it

00:33:21,679 --> 00:33:25,039
and this is going to walk us through the

00:33:23,200 --> 00:33:27,120
project creation phase

00:33:25,039 --> 00:33:28,720
so when you run amplify net you are

00:33:27,120 --> 00:33:31,679
going to be doing so

00:33:28,720 --> 00:33:33,840
from within and we have five minutes

00:33:31,679 --> 00:33:35,679
left before we're about to take a break

00:33:33,840 --> 00:33:37,919
um just fyi so we'll get through this

00:33:35,679 --> 00:33:39,600
this initial setup process and then

00:33:37,919 --> 00:33:40,640
we'll be ready to actually start writing

00:33:39,600 --> 00:33:42,880
some code which is a good

00:33:40,640 --> 00:33:44,559
breaking point anyway so when we run

00:33:42,880 --> 00:33:45,679
amplifying that we're initializing a new

00:33:44,559 --> 00:33:47,279
amplify project and

00:33:45,679 --> 00:33:49,519
like i mentioned this is typically done

00:33:47,279 --> 00:33:51,600
at the root of some

00:33:49,519 --> 00:33:53,120
client application it could be a web app

00:33:51,600 --> 00:33:55,039
it could be a mobile app it could be

00:33:53,120 --> 00:33:57,279
a react native app or next app or

00:33:55,039 --> 00:33:57,840
whatever but you run amplifying it and

00:33:57,279 --> 00:34:00,799
then this

00:33:57,840 --> 00:34:01,600
this code um that it that's generated

00:34:00,799 --> 00:34:03,360
it's uh

00:34:01,600 --> 00:34:05,039
needed kind of as a dependency within

00:34:03,360 --> 00:34:06,159
that that front end application so we're

00:34:05,039 --> 00:34:08,320
doing that

00:34:06,159 --> 00:34:10,159
in this case in front in our root of our

00:34:08,320 --> 00:34:11,200
postogram react app

00:34:10,159 --> 00:34:13,040
what we're going to do is give the

00:34:11,200 --> 00:34:14,079
project a name this can be whatever

00:34:13,040 --> 00:34:16,480
you'd like i'm going to call this

00:34:14,079 --> 00:34:18,800
postogram

00:34:16,480 --> 00:34:20,079
the name for the environment so you have

00:34:18,800 --> 00:34:21,679
like a base environment

00:34:20,079 --> 00:34:23,679
that we're going to use this this naming

00:34:21,679 --> 00:34:25,760
isn't that important now

00:34:23,679 --> 00:34:28,240
but in the future if you want to create

00:34:25,760 --> 00:34:30,159
um some testing environment for example

00:34:28,240 --> 00:34:31,760
you could then create a new environment

00:34:30,159 --> 00:34:33,040
based on this environment name

00:34:31,760 --> 00:34:34,960
so i'm just going to call the base

00:34:33,040 --> 00:34:37,359
environment named dev

00:34:34,960 --> 00:34:39,040
you can choose your default text editor

00:34:37,359 --> 00:34:41,359
or none if it's not listed here

00:34:39,040 --> 00:34:42,240
the reason that this is being asked is

00:34:41,359 --> 00:34:45,679
in the future

00:34:42,240 --> 00:34:48,639
as we're iterating on our back end

00:34:45,679 --> 00:34:49,040
we will sometimes need to edit code in

00:34:48,639 --> 00:34:52,079
in

00:34:49,040 --> 00:34:54,000
some cli process and these

00:34:52,079 --> 00:34:56,240
the terminal will automatically open up

00:34:54,000 --> 00:34:59,359
the code that needs to be edited for you

00:34:56,240 --> 00:35:01,440
by choosing this default editor

00:34:59,359 --> 00:35:03,280
so it's pretty nice to have but you can

00:35:01,440 --> 00:35:05,119
always just go in and kind of

00:35:03,280 --> 00:35:06,720
locate that code yourself and modify it

00:35:05,119 --> 00:35:08,720
when necessary so it's not

00:35:06,720 --> 00:35:10,240
it's not necessary it's just a nice

00:35:08,720 --> 00:35:12,079
extra to have

00:35:10,240 --> 00:35:13,599
so i'm going to choose vs code because

00:35:12,079 --> 00:35:15,599
that's what i'm using

00:35:13,599 --> 00:35:17,680
the next thing we're going to choose is

00:35:15,599 --> 00:35:20,560
the type of app that we're building

00:35:17,680 --> 00:35:21,920
for us that's going to be javascript and

00:35:20,560 --> 00:35:22,640
you're going to notice that at this

00:35:21,920 --> 00:35:25,280
point

00:35:22,640 --> 00:35:25,920
after answering this question that the

00:35:25,280 --> 00:35:27,520
cli

00:35:25,920 --> 00:35:29,280
is going to recognize that we're in a

00:35:27,520 --> 00:35:30,000
react application and it's going to

00:35:29,280 --> 00:35:32,000
actually auto

00:35:30,000 --> 00:35:33,680
detect all of these answers for us from

00:35:32,000 --> 00:35:35,200
now on so it knows we're in our

00:35:33,680 --> 00:35:37,920
javascript app

00:35:35,200 --> 00:35:39,040
it knows we're in a react app it

00:35:37,920 --> 00:35:41,920
understands our

00:35:39,040 --> 00:35:44,640
source directory as src it understands

00:35:41,920 --> 00:35:46,720
our distribution directory path is built

00:35:44,640 --> 00:35:48,160
and our build command is built and our

00:35:46,720 --> 00:35:49,839
start command is start

00:35:48,160 --> 00:35:51,599
so it kind of auto detects that so you

00:35:49,839 --> 00:35:54,000
can pretty much take all of the defaults

00:35:51,599 --> 00:35:56,320
after choosing visual studio code just

00:35:54,000 --> 00:35:57,359
by pressing enter

00:35:56,320 --> 00:35:59,599
and then the last thing we're going to

00:35:57,359 --> 00:36:02,000
do is choose our aws profile so we just

00:35:59,599 --> 00:36:05,680
created a new profile a second ago

00:36:02,000 --> 00:36:07,280
for you you should see a profile

00:36:05,680 --> 00:36:09,280
something like this whatever you just

00:36:07,280 --> 00:36:10,880
created for me i just created amplify

00:36:09,280 --> 00:36:12,400
cli user test

00:36:10,880 --> 00:36:14,320
so i could choose that profile but i

00:36:12,400 --> 00:36:16,640
just deleted that user in my account so

00:36:14,320 --> 00:36:19,200
i'm going to use default

00:36:16,640 --> 00:36:21,520
you can choose whatever profile you just

00:36:19,200 --> 00:36:25,040
you just created a second ago

00:36:21,520 --> 00:36:26,880
and that is it at this point the

00:36:25,040 --> 00:36:28,960
cli is going to go ahead and deploy the

00:36:26,880 --> 00:36:30,880
amplified project

00:36:28,960 --> 00:36:32,560
so if we go back to the github readme

00:36:30,880 --> 00:36:34,800
here um

00:36:32,560 --> 00:36:37,280
you're going to kind of see that the

00:36:34,800 --> 00:36:40,079
amplifi cli is initialized a new project

00:36:37,280 --> 00:36:41,800
you will see a new folder amplify a new

00:36:40,079 --> 00:36:44,880
file called aws

00:36:41,800 --> 00:36:47,040
exports.js so these are like two

00:36:44,880 --> 00:36:50,240
artifacts from the cli

00:36:47,040 --> 00:36:53,200
successfully deploying our back-end

00:36:50,240 --> 00:36:54,960
infrastructure and we can then start

00:36:53,200 --> 00:36:56,079
interacting with our project in two

00:36:54,960 --> 00:36:59,119
different ways

00:36:56,079 --> 00:36:59,599
we can look at the local configuration

00:36:59,119 --> 00:37:01,280
kind of

00:36:59,599 --> 00:37:03,040
seeing what's happening at any time by

00:37:01,280 --> 00:37:04,880
running amplify status

00:37:03,040 --> 00:37:06,160
this is kind of a local cli command

00:37:04,880 --> 00:37:08,640
that's going to kind of give us an

00:37:06,160 --> 00:37:10,560
overview of what's going on in our app

00:37:08,640 --> 00:37:12,160
and then we have the amplify console

00:37:10,560 --> 00:37:14,320
command that will actually open up

00:37:12,160 --> 00:37:17,119
the the new amplified project that we

00:37:14,320 --> 00:37:18,560
just created in our aws

00:37:17,119 --> 00:37:20,640
console so let's try that out and then

00:37:18,560 --> 00:37:22,880
we'll take a break so if i go here

00:37:20,640 --> 00:37:23,839
into my terminal i'll run amplify

00:37:22,880 --> 00:37:26,240
console

00:37:23,839 --> 00:37:28,880
we're just going to see that it opens up

00:37:26,240 --> 00:37:28,880
this new

00:37:28,960 --> 00:37:33,119
amplify project here and there's not a

00:37:31,680 --> 00:37:34,800
lot going on yet because we haven't

00:37:33,119 --> 00:37:36,000
really added anything but it gives you a

00:37:34,800 --> 00:37:38,640
nice overview

00:37:36,000 --> 00:37:40,079
in the future as we start adding

00:37:38,640 --> 00:37:42,240
functionality for you to

00:37:40,079 --> 00:37:43,359
view things like uh logging for your

00:37:42,240 --> 00:37:46,720
functions

00:37:43,359 --> 00:37:47,359
links to your s3 bucket links to your

00:37:46,720 --> 00:37:49,119
api

00:37:47,359 --> 00:37:50,480
and data sources that's associated with

00:37:49,119 --> 00:37:54,000
that api

00:37:50,480 --> 00:37:57,599
so um we are

00:37:54,000 --> 00:37:58,240
going to be uh taking a break now and i

00:37:57,599 --> 00:38:01,280
believe

00:37:58,240 --> 00:38:02,640
the break is over at uh 12 o'clock

00:38:01,280 --> 00:38:05,359
pacific time

00:38:02,640 --> 00:38:06,320
three o'clock eastern time right now it

00:38:05,359 --> 00:38:09,599
is

00:38:06,320 --> 00:38:11,200
um 11 45 a.m eastern

00:38:09,599 --> 00:38:12,800
time so we're gonna be i'm sorry it's 11

00:38:11,200 --> 00:38:14,880
45 a.m pacific time so we're gonna be

00:38:12,800 --> 00:38:17,040
starting back in 15 minutes essentially

00:38:14,880 --> 00:38:18,320
so um i'm gonna answer some questions uh

00:38:17,040 --> 00:38:21,200
during the break and

00:38:18,320 --> 00:38:23,040
i'll see you back here in 15 minutes all

00:38:21,200 --> 00:38:23,520
right so i think we are gonna go ahead

00:38:23,040 --> 00:38:27,280
and

00:38:23,520 --> 00:38:31,119
jump back into the workshop

00:38:27,280 --> 00:38:34,880
so i hope everyone had time to rest up

00:38:31,119 --> 00:38:37,760
and is ready to keep going

00:38:34,880 --> 00:38:38,960
so i'll go ahead and open up the chat so

00:38:37,760 --> 00:38:42,079
i can make sure i

00:38:38,960 --> 00:38:43,920
can see everything going on and

00:38:42,079 --> 00:38:47,040
i know a couple of people have questions

00:38:43,920 --> 00:38:49,119
um during the amplify

00:38:47,040 --> 00:38:50,320
init process after running amplify

00:38:49,119 --> 00:38:54,160
configure

00:38:50,320 --> 00:38:56,640
the errors were around

00:38:54,160 --> 00:38:57,440
the aws access key id needs a

00:38:56,640 --> 00:39:00,000
subscription

00:38:57,440 --> 00:39:02,560
for the service so that basically means

00:39:00,000 --> 00:39:06,480
like you know we created the iam user

00:39:02,560 --> 00:39:06,480
and the aws console

00:39:06,960 --> 00:39:10,560
and um essentially we were like in this

00:39:09,200 --> 00:39:13,359
area right here that i'm kind of going

00:39:10,560 --> 00:39:13,359
to navigate to

00:39:13,520 --> 00:39:20,480
and we created a user and

00:39:16,880 --> 00:39:22,720
during this setup process you know we um

00:39:20,480 --> 00:39:24,480
we kind of we gave the user a certain

00:39:22,720 --> 00:39:27,599
set of permissions

00:39:24,480 --> 00:39:30,240
and once you give you know the user

00:39:27,599 --> 00:39:30,240
permissions

00:39:34,240 --> 00:39:41,040
we go and um we kind of create this user

00:39:38,480 --> 00:39:43,680
and what you end up with is this access

00:39:41,040 --> 00:39:45,440
key id right so the access key id

00:39:43,680 --> 00:39:46,960
is being referenced in this error it's

00:39:45,440 --> 00:39:49,359
basically saying the access key id

00:39:46,960 --> 00:39:50,560
needs a subscription for the service um

00:39:49,359 --> 00:39:52,960
so usually that means

00:39:50,560 --> 00:39:54,800
one of two things well sometimes another

00:39:52,960 --> 00:39:57,119
thing it could be one thing

00:39:54,800 --> 00:39:58,640
that you are using maybe maybe you're

00:39:57,119 --> 00:40:01,920
signed into

00:39:58,640 --> 00:40:04,079
um a an account that is like

00:40:01,920 --> 00:40:06,000
in a work account maybe and the work

00:40:04,079 --> 00:40:06,880
account might have some scope down

00:40:06,000 --> 00:40:09,119
privileges

00:40:06,880 --> 00:40:10,079
that are not enabled for admin that's

00:40:09,119 --> 00:40:12,560
one that's one

00:40:10,079 --> 00:40:14,640
uh possibility the other possibility is

00:40:12,560 --> 00:40:16,560
if like you're a brand new aws user and

00:40:14,640 --> 00:40:19,920
you've signed up for your account

00:40:16,560 --> 00:40:21,440
um a lot of times you need to confirm

00:40:19,920 --> 00:40:23,680
that your account has been set up

00:40:21,440 --> 00:40:25,359
and i know that that is not the case for

00:40:23,680 --> 00:40:26,640
for the people i don't think in this

00:40:25,359 --> 00:40:27,359
chat because they say they've already

00:40:26,640 --> 00:40:29,200
used

00:40:27,359 --> 00:40:30,800
their account before but that could be a

00:40:29,200 --> 00:40:33,040
possibility uh

00:40:30,800 --> 00:40:34,319
and the last possibility is that you

00:40:33,040 --> 00:40:37,200
chose some other permission

00:40:34,319 --> 00:40:38,160
role other than admin um if that's the

00:40:37,200 --> 00:40:39,839
case

00:40:38,160 --> 00:40:41,440
then i would i would kind of go back and

00:40:39,839 --> 00:40:42,720
make sure that that was configured

00:40:41,440 --> 00:40:46,000
properly

00:40:42,720 --> 00:40:48,079
so um yeah

00:40:46,000 --> 00:40:49,599
but let's go ahead and and now move on

00:40:48,079 --> 00:40:51,599
to the next steps

00:40:49,599 --> 00:40:53,359
so um we've basically created the

00:40:51,599 --> 00:40:55,280
amplify project so now we want to start

00:40:53,359 --> 00:40:57,040
adding services and interacting with

00:40:55,280 --> 00:40:58,480
them from our react app

00:40:57,040 --> 00:41:00,880
so what we're going to do is we're going

00:40:58,480 --> 00:41:02,800
to create an api

00:41:00,880 --> 00:41:04,800
we're also going to enable

00:41:02,800 --> 00:41:06,319
authentication in just a moment

00:41:04,800 --> 00:41:07,680
and then we're going to add storage and

00:41:06,319 --> 00:41:08,960
we're going to also interact with each

00:41:07,680 --> 00:41:10,720
of those services

00:41:08,960 --> 00:41:12,319
so to get started we're going to create

00:41:10,720 --> 00:41:15,440
the graphql api for

00:41:12,319 --> 00:41:17,359
uh interacting with posts and the post

00:41:15,440 --> 00:41:18,000
is basically going to be kind of the app

00:41:17,359 --> 00:41:19,839
that we're building

00:41:18,000 --> 00:41:21,680
i mentioned what's called postogram

00:41:19,839 --> 00:41:23,920
basically we're going to be able to

00:41:21,680 --> 00:41:25,119
create a new post that has an image

00:41:23,920 --> 00:41:26,880
associated with it

00:41:25,119 --> 00:41:28,800
and then the main view of the app is

00:41:26,880 --> 00:41:29,839
going to have a list of all of the posts

00:41:28,800 --> 00:41:31,760
and then we're going to be able to click

00:41:29,839 --> 00:41:34,000
on an individual post and drill down

00:41:31,760 --> 00:41:36,800
into the post

00:41:34,000 --> 00:41:38,560
detail so i can detail view so the post

00:41:36,800 --> 00:41:41,280
is going to have a name a location

00:41:38,560 --> 00:41:43,200
a description and an image so you might

00:41:41,280 --> 00:41:46,560
think of an instagram post that has

00:41:43,200 --> 00:41:48,319
a an image a a location

00:41:46,560 --> 00:41:50,560
a geo location and maybe like some

00:41:48,319 --> 00:41:52,319
description so that's kind of going to

00:41:50,560 --> 00:41:54,079
be what we're doing here we don't really

00:41:52,319 --> 00:41:55,200
need the name field you know right if

00:41:54,079 --> 00:41:57,040
we're trying to recreate

00:41:55,200 --> 00:41:59,040
instagram it's just another way to

00:41:57,040 --> 00:42:01,359
demonstrate metadata on the post though

00:41:59,040 --> 00:42:02,560
so we're going to stick with that

00:42:01,359 --> 00:42:04,720
so i'm going to go here and i'm going to

00:42:02,560 --> 00:42:05,760
walk through these steps so amplify add

00:42:04,720 --> 00:42:09,200
api

00:42:05,760 --> 00:42:12,240
and i'll try to maybe

00:42:09,200 --> 00:42:14,640
show both of these screens at once if

00:42:12,240 --> 00:42:14,640
possible

00:42:14,880 --> 00:42:18,079
and then we're going to kind of answer

00:42:16,240 --> 00:42:19,599
these questions in this

00:42:18,079 --> 00:42:21,680
in this order so we're going to choose

00:42:19,599 --> 00:42:25,839
graphql as type of

00:42:21,680 --> 00:42:27,520
api we're going to give the

00:42:25,839 --> 00:42:28,800
api a name you can give this whatever

00:42:27,520 --> 00:42:29,599
your name you'd like i'm just going to

00:42:28,800 --> 00:42:32,079
call this

00:42:29,599 --> 00:42:35,119
postogram to kind of go along with the

00:42:32,079 --> 00:42:35,119
name of our app

00:42:35,520 --> 00:42:38,960
you can then choose a default

00:42:36,800 --> 00:42:41,200
authorizations type

00:42:38,960 --> 00:42:42,880
for now it's going to be a public

00:42:41,200 --> 00:42:44,319
authorization meaning anyone interacting

00:42:42,880 --> 00:42:46,160
with this api can

00:42:44,319 --> 00:42:47,680
do so as long as they pass in the api

00:42:46,160 --> 00:42:49,839
key and uh

00:42:47,680 --> 00:42:51,440
in the advanced section after we go a

00:42:49,839 --> 00:42:53,920
little further on we're going to upload

00:42:51,440 --> 00:42:56,000
upload i'm sorry update this to kind of

00:42:53,920 --> 00:42:57,280
have multiple authorization types

00:42:56,000 --> 00:42:58,880
so we're going to have a combination of

00:42:57,280 --> 00:42:59,280
public and private access which i think

00:42:58,880 --> 00:43:00,960
is

00:42:59,280 --> 00:43:02,880
very important for most modern

00:43:00,960 --> 00:43:04,800
applications but to start off we're just

00:43:02,880 --> 00:43:05,680
going to use public access which is api

00:43:04,800 --> 00:43:07,440
key

00:43:05,680 --> 00:43:09,839
we can now optionally enter a

00:43:07,440 --> 00:43:12,880
description for the api key

00:43:09,839 --> 00:43:14,240
so this can be whatever you'd like i'll

00:43:12,880 --> 00:43:17,280
call it public

00:43:14,240 --> 00:43:19,680
next we can choose an expiration date um

00:43:17,280 --> 00:43:21,119
and then as you modify and update your

00:43:19,680 --> 00:43:24,240
api you can continue

00:43:21,119 --> 00:43:26,560
to extend this expiration date

00:43:24,240 --> 00:43:28,319
or you can set a new expiration date but

00:43:26,560 --> 00:43:31,680
for now i will just set it to be

00:43:28,319 --> 00:43:33,119
like maybe one year from now next we can

00:43:31,680 --> 00:43:34,400
configure advanced settings if we would

00:43:33,119 --> 00:43:37,599
like to but we don't

00:43:34,400 --> 00:43:40,000
but let's say that we wanted to um

00:43:37,599 --> 00:43:40,880
do anything else related to this api

00:43:40,000 --> 00:43:44,400
some of that stuff

00:43:40,880 --> 00:43:46,160
might be adding a um

00:43:44,400 --> 00:43:47,440
a secondary authorization mode which

00:43:46,160 --> 00:43:49,359
we're going to do later

00:43:47,440 --> 00:43:50,960
another thing might be configuring

00:43:49,359 --> 00:43:52,000
conflict detection which we're not

00:43:50,960 --> 00:43:55,599
covering today

00:43:52,000 --> 00:43:56,000
but appsync and amplify enable offline

00:43:55,599 --> 00:43:57,920
uh

00:43:56,000 --> 00:43:59,440
um you know interactions as well so

00:43:57,920 --> 00:43:59,839
let's say you wanted to build an offline

00:43:59,440 --> 00:44:01,520
app

00:43:59,839 --> 00:44:03,040
you could actually do that by

00:44:01,520 --> 00:44:06,480
interacting with um

00:44:03,040 --> 00:44:08,160
the or extending the existing settings

00:44:06,480 --> 00:44:09,280
by going into the advanced settings

00:44:08,160 --> 00:44:10,720
but we're not going to do that now we're

00:44:09,280 --> 00:44:12,480
kind of starting off pretty basic so

00:44:10,720 --> 00:44:15,119
we'll just say no

00:44:12,480 --> 00:44:16,880
and then if we have an existing graphql

00:44:15,119 --> 00:44:18,640
schema that we'd like to use for our app

00:44:16,880 --> 00:44:21,440
we can choose that here but we do not

00:44:18,640 --> 00:44:22,800
so i'm going to choose no and then

00:44:21,440 --> 00:44:25,040
finally we're going to choose

00:44:22,800 --> 00:44:25,839
the schema template and this is

00:44:25,040 --> 00:44:27,440
basically just

00:44:25,839 --> 00:44:29,119
boilerplate so it's just going to kind

00:44:27,440 --> 00:44:31,359
of give us a graphql schema

00:44:29,119 --> 00:44:33,200
to start with and we can start with a

00:44:31,359 --> 00:44:34,400
single object with fields which is just

00:44:33,200 --> 00:44:36,400
a to-do app

00:44:34,400 --> 00:44:37,839
or a one-to-many relationship which is

00:44:36,400 --> 00:44:39,200
kind of like a blogging app

00:44:37,839 --> 00:44:41,119
uh either way it doesn't really matter

00:44:39,200 --> 00:44:44,240
because we're going to be overriding

00:44:41,119 --> 00:44:45,200
overwriting this entire schema anyway so

00:44:44,240 --> 00:44:48,319
i'll just choose

00:44:45,200 --> 00:44:49,760
the single object with fields so this is

00:44:48,319 --> 00:44:51,119
going to go ahead and generate your

00:44:49,760 --> 00:44:53,440
schema locally

00:44:51,119 --> 00:44:54,640
to start off with and then we have the

00:44:53,440 --> 00:44:57,280
option to

00:44:54,640 --> 00:44:59,440
edit the schema so it's basically saying

00:44:57,280 --> 00:45:01,839
do you want to edit the schema now

00:44:59,440 --> 00:45:04,079
i'm going to choose yes and this should

00:45:01,839 --> 00:45:06,800
now open up the schema in your

00:45:04,079 --> 00:45:06,800
text editor

00:45:13,760 --> 00:45:19,359
whoops so i'm going to go ahead and open

00:45:16,800 --> 00:45:21,440
up the entire project in my text editor

00:45:19,359 --> 00:45:23,520
but it should have opened up if you have

00:45:21,440 --> 00:45:27,440
chosen your text editor

00:45:23,520 --> 00:45:30,160
the schema located in

00:45:27,440 --> 00:45:33,440
the amplify folder so we'll go ahead and

00:45:30,160 --> 00:45:36,640
navigate to that so it'll be an amplify

00:45:33,440 --> 00:45:40,560
slash backend api

00:45:36,640 --> 00:45:41,359
schema so the schema that's created by

00:45:40,560 --> 00:45:43,839
the cli

00:45:41,359 --> 00:45:45,680
is this um yes so someone asked to link

00:45:43,839 --> 00:45:49,359
to the documentation

00:45:45,680 --> 00:45:49,359
i'll go ahead and link to that here

00:45:51,520 --> 00:45:55,359
that's the docs and again i'll paste in

00:45:53,440 --> 00:45:57,920
the workshop link one more time

00:45:55,359 --> 00:45:57,920
just in case

00:45:59,440 --> 00:46:02,720
um so the schema that we're working with

00:46:01,760 --> 00:46:05,040
is this one right here

00:46:02,720 --> 00:46:06,319
and um i'll paste it uh like uh or i'll

00:46:05,040 --> 00:46:09,200
put the

00:46:06,319 --> 00:46:11,680
file path here just to be sure if anyone

00:46:09,200 --> 00:46:14,160
was interested amplify slash back in

00:46:11,680 --> 00:46:15,520
slash api and then this is kind of the

00:46:14,160 --> 00:46:16,720
full path here

00:46:15,520 --> 00:46:17,760
this is the type that we're going to

00:46:16,720 --> 00:46:19,440
work with so i'm going to go ahead and

00:46:17,760 --> 00:46:22,240
copy and paste this

00:46:19,440 --> 00:46:23,040
the post is going to have a required id

00:46:22,240 --> 00:46:25,119
required

00:46:23,040 --> 00:46:26,079
name required location required

00:46:25,119 --> 00:46:28,960
description

00:46:26,079 --> 00:46:29,680
and an optional image because at first

00:46:28,960 --> 00:46:32,240
we're going to be

00:46:29,680 --> 00:46:33,440
creating um updates without an image and

00:46:32,240 --> 00:46:36,480
then later on when we

00:46:33,440 --> 00:46:38,000
um continue to iterate on our on our app

00:46:36,480 --> 00:46:38,880
we're going to add an image but starting

00:46:38,000 --> 00:46:43,839
off we just want to

00:46:38,880 --> 00:46:43,839
have a pretty base basic example run it

00:46:46,480 --> 00:46:51,440
so after we create that post and save

00:46:49,440 --> 00:46:54,319
our schema

00:46:51,440 --> 00:46:57,520
we can now go ahead and deploy this so

00:46:54,319 --> 00:47:00,319
we're going to run amplify push

00:46:57,520 --> 00:47:01,680
and someone asks if the session video

00:47:00,319 --> 00:47:03,920
will be uploaded

00:47:01,680 --> 00:47:04,800
afterwards i can check on that and i

00:47:03,920 --> 00:47:06,720
believe if you

00:47:04,800 --> 00:47:08,000
are an attendee here which you obviously

00:47:06,720 --> 00:47:09,760
are then yes

00:47:08,000 --> 00:47:10,960
you will be able to have access to this

00:47:09,760 --> 00:47:12,160
but i will make sure that that's the

00:47:10,960 --> 00:47:15,359
case

00:47:12,160 --> 00:47:16,880
and get back with you soon so

00:47:15,359 --> 00:47:19,119
to deploy we're going to run amplified

00:47:16,880 --> 00:47:19,119
push

00:47:23,599 --> 00:47:27,440
and this is going to um ask us if we'd

00:47:26,000 --> 00:47:28,960
like to go ahead and continue because

00:47:27,440 --> 00:47:29,920
it's kind of giving us an overview of

00:47:28,960 --> 00:47:32,400
what's about to happen

00:47:29,920 --> 00:47:33,119
it's going to go ahead and create the

00:47:32,400 --> 00:47:35,839
api

00:47:33,119 --> 00:47:38,240
with the name of postogram so yes i want

00:47:35,839 --> 00:47:40,319
to go ahead and continue and

00:47:38,240 --> 00:47:42,720
it's going to now give us a couple of

00:47:40,319 --> 00:47:45,520
options as well

00:47:42,720 --> 00:47:48,960
i kind of walked i kind of skipped that

00:47:45,520 --> 00:47:48,960
so let me let me try that again

00:47:50,839 --> 00:47:53,839
oops

00:47:55,440 --> 00:48:01,280
i'm jumping around here let's go back to

00:47:57,760 --> 00:48:01,280
where we left off look at right here

00:48:01,359 --> 00:48:07,839
so i'm gonna run amplify push

00:48:12,480 --> 00:48:16,880
i'm going to say yes to continue and

00:48:15,359 --> 00:48:17,440
it's going to now ask me do you want to

00:48:16,880 --> 00:48:20,240
generate

00:48:17,440 --> 00:48:21,520
code for your graphql api and i'm going

00:48:20,240 --> 00:48:23,319
to choose yes because this is kind of

00:48:21,520 --> 00:48:24,480
the cli doing the graphql code

00:48:23,319 --> 00:48:26,079
generation

00:48:24,480 --> 00:48:27,359
it's going to introspect our graphql

00:48:26,079 --> 00:48:28,079
schema i mean it's going to like walk

00:48:27,359 --> 00:48:29,440
through it

00:48:28,079 --> 00:48:30,319
and then it's going to create the local

00:48:29,440 --> 00:48:32,000
code that we're going to need to

00:48:30,319 --> 00:48:33,440
interact with it

00:48:32,000 --> 00:48:35,520
so i'm going to choose javascript as the

00:48:33,440 --> 00:48:37,359
language target

00:48:35,520 --> 00:48:39,040
i'm going to keep all of the defaults

00:48:37,359 --> 00:48:42,400
really so source

00:48:39,040 --> 00:48:45,359
graphql generate all

00:48:42,400 --> 00:48:46,079
possible operations and i will choose

00:48:45,359 --> 00:48:48,480
the default

00:48:46,079 --> 00:48:50,079
statement depth of 2. so this is going

00:48:48,480 --> 00:48:52,640
to go ahead and uh deploy

00:48:50,079 --> 00:48:53,680
the graphql api and this is going to

00:48:52,640 --> 00:48:57,040
basically create

00:48:53,680 --> 00:49:00,000
you know a an app sync api and appsync

00:48:57,040 --> 00:49:00,880
again is kind of aws manage graphql

00:49:00,000 --> 00:49:02,720
service

00:49:00,880 --> 00:49:04,240
so once this is deployed we can actually

00:49:02,720 --> 00:49:09,040
go into

00:49:04,240 --> 00:49:11,839
the amplify console here and test it out

00:49:09,040 --> 00:49:13,200
so that we will run amplified console

00:49:11,839 --> 00:49:16,480
api but we have to wait

00:49:13,200 --> 00:49:18,319
for this to deploy so

00:49:16,480 --> 00:49:19,520
to give a quick overview what's actually

00:49:18,319 --> 00:49:22,800
being deployed

00:49:19,520 --> 00:49:25,119
if we go back to our schema

00:49:22,800 --> 00:49:26,160
we notice that we have this at model

00:49:25,119 --> 00:49:28,319
directive

00:49:26,160 --> 00:49:29,599
and that means that we're getting the

00:49:28,319 --> 00:49:32,880
graphql

00:49:29,599 --> 00:49:35,200
schema the graphql resolvers and

00:49:32,880 --> 00:49:36,960
the database which in this case since we

00:49:35,200 --> 00:49:39,119
use the at model directive is going to

00:49:36,960 --> 00:49:40,640
be just the dynamodb table

00:49:39,119 --> 00:49:43,440
and it's going to be all configured

00:49:40,640 --> 00:49:45,440
correctly you know to work together

00:49:43,440 --> 00:49:47,200
so we're basically generating the api

00:49:45,440 --> 00:49:47,839
itself as well as a database so this

00:49:47,200 --> 00:49:50,480
takes

00:49:47,839 --> 00:49:52,319
you know usually about one minute or so

00:49:50,480 --> 00:49:55,119
and then after we've created that

00:49:52,319 --> 00:49:56,640
after we've deployed it we can start

00:49:55,119 --> 00:50:00,240
interacting with it either

00:49:56,640 --> 00:50:03,200
from our local react app

00:50:00,240 --> 00:50:04,319
or we can go directly into the aws

00:50:03,200 --> 00:50:07,760
console

00:50:04,319 --> 00:50:09,599
and go into api here

00:50:07,760 --> 00:50:11,280
which will then show a link to the

00:50:09,599 --> 00:50:14,559
appsync api

00:50:11,280 --> 00:50:17,119
and from the api dashboard we can start

00:50:14,559 --> 00:50:17,760
basically testing it out so we can run

00:50:17,119 --> 00:50:20,800
queries

00:50:17,760 --> 00:50:22,079
mutations and subscriptions directly

00:50:20,800 --> 00:50:24,800
from the api

00:50:22,079 --> 00:50:26,960
so if you've ever worked with a rest api

00:50:24,800 --> 00:50:30,000
you've probably been familiar

00:50:26,960 --> 00:50:33,599
with http verbs like get

00:50:30,000 --> 00:50:35,599
put post or delete so we might call

00:50:33,599 --> 00:50:38,319
something like fetch or use something

00:50:35,599 --> 00:50:41,280
like f vector axios

00:50:38,319 --> 00:50:42,559
and we might specify you know which http

00:50:41,280 --> 00:50:43,920
verb we're going to be interact you know

00:50:42,559 --> 00:50:46,880
using to interact with that

00:50:43,920 --> 00:50:47,839
rest api well with appsync we typically

00:50:46,880 --> 00:50:50,880
actually have

00:50:47,839 --> 00:50:53,760
um a little bit different way of

00:50:50,880 --> 00:50:55,440
with graphql you basically have a

00:50:53,760 --> 00:50:55,760
typically different way to interact with

00:50:55,440 --> 00:50:58,880
your

00:50:55,760 --> 00:51:00,480
your api but the operations map very

00:50:58,880 --> 00:51:04,240
similarly to these rest

00:51:00,480 --> 00:51:04,720
rest verbs so for a git operation in

00:51:04,240 --> 00:51:08,160
rest

00:51:04,720 --> 00:51:11,440
you will have a query in graphql for

00:51:08,160 --> 00:51:13,440
in post put patch or delete

00:51:11,440 --> 00:51:14,640
and rest you're going to be using a

00:51:13,440 --> 00:51:16,800
mutation

00:51:14,640 --> 00:51:18,160
so you have queries for fetching data

00:51:16,800 --> 00:51:20,880
mutations for

00:51:18,160 --> 00:51:22,319
you know uploading or updating or

00:51:20,880 --> 00:51:24,559
creating or deleting any

00:51:22,319 --> 00:51:26,640
any type of changes are going to happen

00:51:24,559 --> 00:51:28,640
with a mutation

00:51:26,640 --> 00:51:30,240
so queries for for retrieving data

00:51:28,640 --> 00:51:32,800
mutations for updating

00:51:30,240 --> 00:51:34,559
um and then you have the last operation

00:51:32,800 --> 00:51:38,720
which is a subscription

00:51:34,559 --> 00:51:42,240
and and graphql a subscription is the

00:51:38,720 --> 00:51:44,960
graphql spec specification for

00:51:42,240 --> 00:51:45,359
listening to updates in real time so in

00:51:44,960 --> 00:51:46,480
this

00:51:45,359 --> 00:51:48,400
app we're going to be implementing

00:51:46,480 --> 00:51:50,319
queries mutations and subscriptions

00:51:48,400 --> 00:51:53,599
right

00:51:50,319 --> 00:51:54,480
but what we're going to be doing now is

00:51:53,599 --> 00:51:57,440
only going to be

00:51:54,480 --> 00:51:58,960
testing out the queries um right here

00:51:57,440 --> 00:52:01,520
and the mutations here

00:51:58,960 --> 00:52:03,040
so once the um once this is done

00:52:01,520 --> 00:52:04,000
deploying we're going to be able to go

00:52:03,040 --> 00:52:06,960
ahead and

00:52:04,000 --> 00:52:07,680
go directly into the console and and use

00:52:06,960 --> 00:52:09,599
that

00:52:07,680 --> 00:52:19,839
so we'll wait a couple more seconds and

00:52:09,599 --> 00:52:19,839
once this is deployed we'll do that

00:52:58,839 --> 00:53:01,839
so

00:53:12,839 --> 00:53:17,280
so

00:53:14,960 --> 00:53:21,440
so once your api has been successfully

00:53:17,280 --> 00:53:24,000
created you'll get some output like this

00:53:21,440 --> 00:53:24,000
basically

00:53:25,359 --> 00:53:30,000
saying that the operations were

00:53:28,079 --> 00:53:33,520
successfully created locally

00:53:30,000 --> 00:53:35,200
at source graphql and the

00:53:33,520 --> 00:53:37,680
resources were updated in your in your

00:53:35,200 --> 00:53:38,880
account so we can run

00:53:37,680 --> 00:53:41,440
we know we can either look in the

00:53:38,880 --> 00:53:44,960
console now

00:53:41,440 --> 00:53:45,520
and we should see that under api we have

00:53:44,960 --> 00:53:48,640
a link

00:53:45,520 --> 00:53:50,800
to the actual app sync api here

00:53:48,640 --> 00:53:52,480
or if we'd like to we can also just go

00:53:50,800 --> 00:53:57,839
there directly by running amplify

00:53:52,480 --> 00:53:57,839
console api

00:54:06,800 --> 00:54:10,720
and from here we can start interacting

00:54:09,440 --> 00:54:14,160
with our

00:54:10,720 --> 00:54:15,760
our api so in this

00:54:14,160 --> 00:54:17,520
section here this is kind of our

00:54:15,760 --> 00:54:20,400
explorer i'm sorry this is the

00:54:17,520 --> 00:54:22,480
graphical editor um you can also open

00:54:20,400 --> 00:54:25,280
the explorer to auto auto populate

00:54:22,480 --> 00:54:26,880
the graphical editor but i've actually

00:54:25,280 --> 00:54:28,800
already listed out

00:54:26,880 --> 00:54:30,160
the copy and paste commands that you'll

00:54:28,800 --> 00:54:31,359
be using here so

00:54:30,160 --> 00:54:34,000
what we're going to do is we're going to

00:54:31,359 --> 00:54:34,319
create a new post using this mutation

00:54:34,000 --> 00:54:35,520
here

00:54:34,319 --> 00:54:37,760
and then we're going to query for the

00:54:35,520 --> 00:54:40,880
post using this query here

00:54:37,760 --> 00:54:40,880
so we can copy this

00:54:41,040 --> 00:54:46,640
and we can go over here

00:54:44,079 --> 00:54:46,640
paste it in

00:54:48,480 --> 00:54:53,839
so i'm gonna go ahead and create a

00:54:49,359 --> 00:54:53,839
couple of posts

00:55:13,359 --> 00:55:17,599
and i'll go ahead and create two posts

00:55:16,079 --> 00:55:18,400
and if the posts are successfully

00:55:17,599 --> 00:55:20,160
created

00:55:18,400 --> 00:55:21,839
then you should kind of see this output

00:55:20,160 --> 00:55:24,319
here and all this

00:55:21,839 --> 00:55:25,359
output really is is the return values

00:55:24,319 --> 00:55:27,839
from here

00:55:25,359 --> 00:55:30,160
so if you it only returned the name only

00:55:27,839 --> 00:55:32,240
the name would have shown up

00:55:30,160 --> 00:55:34,000
um anyway the next thing we'll do is

00:55:32,240 --> 00:55:37,440
we'll query for the data so we

00:55:34,000 --> 00:55:39,440
should running list posts see how

00:55:37,440 --> 00:55:41,680
many create post mutations have been

00:55:39,440 --> 00:55:45,520
created in our database

00:55:41,680 --> 00:55:49,280
so if i go over here to list posts

00:55:45,520 --> 00:55:51,520
i should see two items come back

00:55:49,280 --> 00:55:51,520
um

00:55:52,319 --> 00:55:56,480
let's see here there we go so you can

00:55:55,280 --> 00:55:58,079
see that we have

00:55:56,480 --> 00:56:00,240
an id a name a location and a

00:55:58,079 --> 00:56:02,160
description and then with graphql

00:56:00,240 --> 00:56:03,839
you can actually just ask for the data

00:56:02,160 --> 00:56:06,319
that you'd like to return

00:56:03,839 --> 00:56:07,359
and leave out everything else so maybe i

00:56:06,319 --> 00:56:10,079
only want

00:56:07,359 --> 00:56:10,480
like the name and the location for a

00:56:10,079 --> 00:56:13,040
different

00:56:10,480 --> 00:56:16,240
view or maybe i only want the name in

00:56:13,040 --> 00:56:18,240
the description

00:56:16,240 --> 00:56:19,680
you can uh just ask for whatever you

00:56:18,240 --> 00:56:20,559
whatever data you'd like and you can get

00:56:19,680 --> 00:56:22,720
that back

00:56:20,559 --> 00:56:23,760
but basically this is just to kind of

00:56:22,720 --> 00:56:26,720
demonstrate that

00:56:23,760 --> 00:56:28,240
you can interact and test out your api

00:56:26,720 --> 00:56:31,760
in the dashboard here

00:56:28,240 --> 00:56:32,640
and um from there we can now query it

00:56:31,760 --> 00:56:34,480
from our graph

00:56:32,640 --> 00:56:37,200
from our react app and that's kind of

00:56:34,480 --> 00:56:39,839
where we're at next so um

00:56:37,200 --> 00:56:40,880
now that we know the api works we're

00:56:39,839 --> 00:56:43,119
able to list posts

00:56:40,880 --> 00:56:45,040
we want to fetch the list of posts from

00:56:43,119 --> 00:56:46,319
our react app

00:56:45,040 --> 00:56:48,400
so we're going to go down here to

00:56:46,319 --> 00:56:50,400
configuring the react application and

00:56:48,400 --> 00:56:52,000
we're going to go ahead and do that so

00:56:50,400 --> 00:56:55,119
what i'm going to do is open up my text

00:56:52,000 --> 00:56:57,119
editor over here on the left hand panel

00:56:55,119 --> 00:56:58,400
and we're going to open up two files the

00:56:57,119 --> 00:57:04,000
first is

00:56:58,400 --> 00:57:04,000
src slash index.js is specified here

00:57:04,480 --> 00:57:10,559
and the other is in src slash app.js is

00:57:08,480 --> 00:57:13,359
specified here

00:57:10,559 --> 00:57:14,079
so open up those two files and we'll be

00:57:13,359 --> 00:57:17,440
able to

00:57:14,079 --> 00:57:17,760
to continue on so um when you're working

00:57:17,440 --> 00:57:20,160
with

00:57:17,760 --> 00:57:22,480
amplify in any environment whether it's

00:57:20,160 --> 00:57:24,319
a web app or a mobile app or any

00:57:22,480 --> 00:57:25,520
type of client application you

00:57:24,319 --> 00:57:28,079
essentially need to

00:57:25,520 --> 00:57:30,000
let the app know about your aws

00:57:28,079 --> 00:57:32,640
resources in some way

00:57:30,000 --> 00:57:34,240
and i mentioned the aws exports file

00:57:32,640 --> 00:57:36,480
that's created by the cli in the

00:57:34,240 --> 00:57:38,640
initial slides well this is that file

00:57:36,480 --> 00:57:40,880
here and all we need to do is basically

00:57:38,640 --> 00:57:41,680
you know import that somewhere in our in

00:57:40,880 --> 00:57:44,240
our um

00:57:41,680 --> 00:57:44,880
web app to you know recognize that those

00:57:44,240 --> 00:57:46,720
resources

00:57:44,880 --> 00:57:48,400
that are there we don't really need to

00:57:46,720 --> 00:57:50,319
ever edit this but you'll see

00:57:48,400 --> 00:57:52,319
that we have the app sync endpoint which

00:57:50,319 --> 00:57:55,839
is like the url uri

00:57:52,319 --> 00:57:56,559
for the api you have the authentication

00:57:55,839 --> 00:57:59,599
type the

00:57:56,559 --> 00:58:00,880
the api key and things like that

00:57:59,599 --> 00:58:02,960
so what we're going to do is we can just

00:58:00,880 --> 00:58:05,280
copy these three lines of code and drop

00:58:02,960 --> 00:58:06,720
them anywhere in index.js

00:58:05,280 --> 00:58:09,599
and what we're doing is we're importing

00:58:06,720 --> 00:58:11,359
the amplify library from aws amplify

00:58:09,599 --> 00:58:14,160
we're importing that configuration file

00:58:11,359 --> 00:58:16,240
that was created for you by the cli

00:58:14,160 --> 00:58:17,599
and then we're calling amplify.configure

00:58:16,240 --> 00:58:20,480
passing in the config

00:58:17,599 --> 00:58:21,040
and this is all we need to do to kind of

00:58:20,480 --> 00:58:23,760
configure

00:58:21,040 --> 00:58:25,760
the react up to recognize our resources

00:58:23,760 --> 00:58:27,839
and therefore we can start making api

00:58:25,760 --> 00:58:29,359
calls against all of these resources

00:58:27,839 --> 00:58:31,920
so once that's saved you're you're

00:58:29,359 --> 00:58:36,000
really ready to go as far as using

00:58:31,920 --> 00:58:38,000
the services in your client app

00:58:36,000 --> 00:58:39,760
next thing we'll do is we're going to go

00:58:38,000 --> 00:58:44,160
ahead and take a quick look at

00:58:39,760 --> 00:58:47,040
how the the interactions look

00:58:44,160 --> 00:58:48,480
when you're working with the graphql api

00:58:47,040 --> 00:58:50,720
so if you've ever used anything like

00:58:48,480 --> 00:58:51,280
axios or fetch you've done something

00:58:50,720 --> 00:58:54,319
like

00:58:51,280 --> 00:58:56,480
const data is equal to await fetch and

00:58:54,319 --> 00:58:58,640
then you pass in your url right

00:58:56,480 --> 00:59:00,480
um or maybe uh the same with axios and

00:58:58,640 --> 00:59:01,119
then you have like a json response or

00:59:00,480 --> 00:59:04,319
whatever

00:59:01,119 --> 00:59:07,040
well the the api that client from

00:59:04,319 --> 00:59:09,680
amplify is a very similar interface

00:59:07,040 --> 00:59:10,400
we basically are going to be returning a

00:59:09,680 --> 00:59:13,920
promise

00:59:10,400 --> 00:59:16,480
from api.graphql and

00:59:13,920 --> 00:59:18,319
when you pass in the query or the

00:59:16,480 --> 00:59:19,599
variables that kind of specifies which

00:59:18,319 --> 00:59:20,319
operation you're going to be working

00:59:19,599 --> 00:59:22,000
with

00:59:20,319 --> 00:59:24,880
so in this example we're basically going

00:59:22,000 --> 00:59:26,559
to say we want to call api.graphql

00:59:24,880 --> 00:59:29,119
and the query that we want to query for

00:59:26,559 --> 00:59:31,920
is the the list post query

00:59:29,119 --> 00:59:32,640
and that is the same query that we just

00:59:31,920 --> 00:59:34,480
ran here

00:59:32,640 --> 00:59:36,720
so we're going to be getting a piece of

00:59:34,480 --> 00:59:38,559
data that looks like this back where

00:59:36,720 --> 00:59:41,200
we're going to have a data object

00:59:38,559 --> 00:59:42,400
with a list post property and an items

00:59:41,200 --> 00:59:43,920
array

00:59:42,400 --> 00:59:46,000
and the reason that we have the items

00:59:43,920 --> 00:59:48,240
array is because you can also ask for a

00:59:46,000 --> 00:59:49,119
next token which is something we're not

00:59:48,240 --> 00:59:51,680
going to be doing

00:59:49,119 --> 00:59:53,040
just now but let's say you had the need

00:59:51,680 --> 00:59:54,960
for pagination

00:59:53,040 --> 00:59:56,720
you can ask for the next token and then

00:59:54,960 --> 00:59:59,040
pass that in

00:59:56,720 --> 01:00:00,480
as an argument here by saying okay the

00:59:59,040 --> 01:00:02,640
next token is like

01:00:00,480 --> 01:00:05,119
some token and this would give you the

01:00:02,640 --> 01:00:07,440
next uh selection set after that initial

01:00:05,119 --> 01:00:07,440
query

01:00:07,520 --> 01:00:11,680
but all we want to do is just use this

01:00:09,599 --> 01:00:13,359
right here and this is going to return

01:00:11,680 --> 01:00:15,440
some data and then we're going to be

01:00:13,359 --> 01:00:18,559
able to update our local react state

01:00:15,440 --> 01:00:19,920
to kind of share that data so um

01:00:18,559 --> 01:00:21,760
the thing that we're just going to be

01:00:19,920 --> 01:00:23,040
able to do is really just copy and paste

01:00:21,760 --> 01:00:26,880
this entire code

01:00:23,040 --> 01:00:29,839
block here and paste it into src

01:00:26,880 --> 01:00:29,839
app.js

01:00:31,280 --> 01:00:35,119
and i'll walk through kind of what's

01:00:32,799 --> 01:00:35,119
going on

01:00:38,880 --> 01:00:43,119
so we import the use state and use

01:00:41,920 --> 01:00:44,960
effect hooks from react

01:00:43,119 --> 01:00:46,640
use state allows us to manage local

01:00:44,960 --> 01:00:49,760
state use effect

01:00:46,640 --> 01:00:51,119
um is basically a way to make an um some

01:00:49,760 --> 01:00:54,079
type of asynchronous

01:00:51,119 --> 01:00:54,559
or any type of really operation or api

01:00:54,079 --> 01:00:56,799
call

01:00:54,559 --> 01:00:58,880
when the component loads so use effect

01:00:56,799 --> 01:01:00,079
is going to fire when this component is

01:00:58,880 --> 01:01:02,640
rendered

01:01:00,079 --> 01:01:03,760
um we import the api category from aws

01:01:02,640 --> 01:01:06,640
amplify

01:01:03,760 --> 01:01:07,520
and this is the way to make either rest

01:01:06,640 --> 01:01:12,000
or graphql

01:01:07,520 --> 01:01:14,400
api calls against an api and aws

01:01:12,000 --> 01:01:16,240
and then we import the list post query

01:01:14,400 --> 01:01:16,880
that was automatically generated by the

01:01:16,240 --> 01:01:20,319
cli

01:01:16,880 --> 01:01:22,480
so if we go to our file folder

01:01:20,319 --> 01:01:24,720
here you'll see that we have a folder

01:01:22,480 --> 01:01:26,000
called graphql and here we have our

01:01:24,720 --> 01:01:28,880
mutations

01:01:26,000 --> 01:01:30,000
our queries and our subscriptions and

01:01:28,880 --> 01:01:32,240
this was automatically

01:01:30,000 --> 01:01:34,400
generated for us by the cli so we're

01:01:32,240 --> 01:01:39,200
just utilizing the query

01:01:34,400 --> 01:01:43,119
of um of list posts

01:01:39,200 --> 01:01:44,960
so now that we have

01:01:43,119 --> 01:01:46,319
imported this query we can use it so

01:01:44,960 --> 01:01:47,599
we're going to create a function called

01:01:46,319 --> 01:01:49,599
fetch posts

01:01:47,599 --> 01:01:51,359
and fetch posts is going to be pretty

01:01:49,599 --> 01:01:53,680
simple we're just going to say

01:01:51,359 --> 01:01:55,200
we're going to call api.graphql passing

01:01:53,680 --> 01:01:56,160
in the query and we're going to get a

01:01:55,200 --> 01:01:57,839
data

01:01:56,160 --> 01:01:59,680
a piece of data called that we're going

01:01:57,839 --> 01:02:02,559
to be calling post data

01:01:59,680 --> 01:02:03,599
and then what we want to get is if again

01:02:02,559 --> 01:02:06,440
we look at

01:02:03,599 --> 01:02:08,000
this data structure here we have

01:02:06,440 --> 01:02:09,599
data.listpost.items

01:02:08,000 --> 01:02:11,359
this is the array that we're interested

01:02:09,599 --> 01:02:14,720
in we just want the array of

01:02:11,359 --> 01:02:17,520
posts so we're going to call

01:02:14,720 --> 01:02:19,200
setposts and it's going to go ahead and

01:02:17,520 --> 01:02:21,839
update the local state

01:02:19,200 --> 01:02:23,280
with the items returned from this query

01:02:21,839 --> 01:02:24,400
so this is just going to be our list of

01:02:23,280 --> 01:02:26,160
posts

01:02:24,400 --> 01:02:27,599
and the way that we set that is using

01:02:26,160 --> 01:02:30,240
that use state hook

01:02:27,599 --> 01:02:31,039
using uh react i'm sorry you state from

01:02:30,240 --> 01:02:32,880
react

01:02:31,039 --> 01:02:35,119
so the post array is going to be an

01:02:32,880 --> 01:02:37,119
empty array when the app loads

01:02:35,119 --> 01:02:39,680
so we're setting an empty array when the

01:02:37,119 --> 01:02:41,520
app loads we call fetch posts

01:02:39,680 --> 01:02:43,039
the fetch post function is going to

01:02:41,520 --> 01:02:44,559
update that list of posts

01:02:43,039 --> 01:02:46,720
with the new new array and then

01:02:44,559 --> 01:02:49,520
re-render this

01:02:46,720 --> 01:02:50,799
block right here and so when the app

01:02:49,520 --> 01:02:53,359
loads there will be an

01:02:50,799 --> 01:02:54,559
empty uh map so nothing is going to be

01:02:53,359 --> 01:02:55,520
rendered because there's going to be an

01:02:54,559 --> 01:02:57,839
empty array

01:02:55,520 --> 01:02:59,680
and then after the set post function

01:02:57,839 --> 01:03:00,960
calls or fires

01:02:59,680 --> 01:03:02,480
we're going to then re-render and we're

01:03:00,960 --> 01:03:04,000
going to have those posts there and

01:03:02,480 --> 01:03:07,520
we're just basically going to return the

01:03:04,000 --> 01:03:07,520
post name and the post location

01:03:09,599 --> 01:03:17,760
so what we can do now is run npm start

01:03:16,000 --> 01:03:19,599
and this is going to go ahead and open

01:03:17,760 --> 01:03:21,200
our app at localhost 3000. now

01:03:19,599 --> 01:03:23,039
and someone asked a question and i'll go

01:03:21,200 --> 01:03:24,559
ahead and answer that how does apollo

01:03:23,039 --> 01:03:28,480
fit in

01:03:24,559 --> 01:03:31,599
apollo is uh two things it's a client

01:03:28,480 --> 01:03:32,400
um you know a graphql client and then as

01:03:31,599 --> 01:03:35,440
a server

01:03:32,400 --> 01:03:36,160
and you can use one or the other or both

01:03:35,440 --> 01:03:38,079
together

01:03:36,160 --> 01:03:39,680
so you can use the apollo server to

01:03:38,079 --> 01:03:41,039
create your own server

01:03:39,680 --> 01:03:42,880
you can use the apollo client to

01:03:41,039 --> 01:03:45,520
interact with that server

01:03:42,880 --> 01:03:47,680
or you can use some other back-end like

01:03:45,520 --> 01:03:51,200
appsync and use the apollo client

01:03:47,680 --> 01:03:53,440
to interact with your server

01:03:51,200 --> 01:03:55,039
or vice versa you might use the apollo

01:03:53,440 --> 01:03:55,760
server and then some other graphql

01:03:55,039 --> 01:03:58,720
client

01:03:55,760 --> 01:03:58,960
well um basically what appsync is is in

01:03:58,720 --> 01:04:00,799
a

01:03:58,960 --> 01:04:02,640
it's kind of a replacement for an apollo

01:04:00,799 --> 01:04:04,640
server because when you're dealing with

01:04:02,640 --> 01:04:05,280
the graphql server you typically have to

01:04:04,640 --> 01:04:07,760
deal

01:04:05,280 --> 01:04:08,559
with things like security authentication

01:04:07,760 --> 01:04:11,200
authorization

01:04:08,559 --> 01:04:12,160
scalability things like managing your

01:04:11,200 --> 01:04:13,599
infrastructure

01:04:12,160 --> 01:04:15,760
making sure there's no downtime and all

01:04:13,599 --> 01:04:17,440
that stuff and appsync is essentially

01:04:15,760 --> 01:04:18,480
just a managed service to replace the

01:04:17,440 --> 01:04:20,720
backend part

01:04:18,480 --> 01:04:22,799
on the front end part you can still use

01:04:20,720 --> 01:04:24,319
the apollo client to fetch data from

01:04:22,799 --> 01:04:26,000
from appseek if you would like

01:04:24,319 --> 01:04:27,920
you could also use oracle you can use

01:04:26,000 --> 01:04:28,720
the apollo client you can use what we've

01:04:27,920 --> 01:04:30,480
used here

01:04:28,720 --> 01:04:32,000
which is the api category it doesn't

01:04:30,480 --> 01:04:32,640
matter so it's up to you if you would

01:04:32,000 --> 01:04:35,599
like to

01:04:32,640 --> 01:04:36,640
to kind of swap out that yeah okay cool

01:04:35,599 --> 01:04:38,319
yeah you can

01:04:36,640 --> 01:04:39,920
you can swap the apollo client out if

01:04:38,319 --> 01:04:40,799
that's what you'd like but i think the

01:04:39,920 --> 01:04:44,079
reason that

01:04:40,799 --> 01:04:47,599
we typically recommend using um

01:04:44,079 --> 01:04:48,960
the the amplifi libraries is because we

01:04:47,599 --> 01:04:52,319
have things that are built in

01:04:48,960 --> 01:04:53,760
for specifics for appsync for instance

01:04:52,319 --> 01:04:55,599
if you're making an authenticated

01:04:53,760 --> 01:04:57,599
request using the

01:04:55,599 --> 01:04:58,960
um amplify libraries we will

01:04:57,599 --> 01:05:02,000
automatically pass

01:04:58,960 --> 01:05:04,319
in the identity token and uh

01:05:02,000 --> 01:05:05,680
we will also if they're signed in using

01:05:04,319 --> 01:05:08,799
amplify we will keep

01:05:05,680 --> 01:05:10,559
up with the refresh token and the access

01:05:08,799 --> 01:05:12,880
token and all that stuff for you

01:05:10,559 --> 01:05:14,240
and then in the appsync resolver we will

01:05:12,880 --> 01:05:16,240
automatically

01:05:14,240 --> 01:05:17,760
then have the identity of the caller

01:05:16,240 --> 01:05:18,960
there for you to do any authorization

01:05:17,760 --> 01:05:21,520
that you'd like to do

01:05:18,960 --> 01:05:24,480
so um for instance you might want to

01:05:21,520 --> 01:05:24,880
find out if the user that made the api

01:05:24,480 --> 01:05:26,799
call

01:05:24,880 --> 01:05:28,880
is part of a certain group and then

01:05:26,799 --> 01:05:30,880
grant or deny them access to some

01:05:28,880 --> 01:05:32,559
piece of data you could do that and it

01:05:30,880 --> 01:05:33,839
kind of works automatically

01:05:32,559 --> 01:05:35,680
but um but yeah you can but you can

01:05:33,839 --> 01:05:38,079
really use either one

01:05:35,680 --> 01:05:39,039
so now when our uploads we should see

01:05:38,079 --> 01:05:41,920
that we have

01:05:39,039 --> 01:05:43,119
um the two posts my second post and my

01:05:41,920 --> 01:05:46,319
first post rendered

01:05:43,119 --> 01:05:49,599
along with like a hello world reading so

01:05:46,319 --> 01:05:53,200
that's kind of the same thing that

01:05:49,599 --> 01:05:55,440
you see here so we called list post

01:05:53,200 --> 01:05:57,039
we kind of saw that there oops so it

01:05:55,440 --> 01:05:57,760
looks like i have uh something that i

01:05:57,039 --> 01:06:00,720
need to

01:05:57,760 --> 01:06:00,720
remove oh yeah here

01:06:03,440 --> 01:06:07,359
um okay so um that's the the data

01:06:06,319 --> 01:06:08,799
fetching

01:06:07,359 --> 01:06:10,799
that's that's what we're gonna be using

01:06:08,799 --> 01:06:11,680
in in the photo sharing app once we get

01:06:10,799 --> 01:06:13,280
to that point

01:06:11,680 --> 01:06:14,559
but we still have to add a couple of

01:06:13,280 --> 01:06:16,160
other things we need to add

01:06:14,559 --> 01:06:19,200
authentication and we need to add

01:06:16,160 --> 01:06:20,559
uh image storage file search so

01:06:19,200 --> 01:06:21,839
let's go ahead and try to knock out

01:06:20,559 --> 01:06:24,880
authentication because we're kind of

01:06:21,839 --> 01:06:27,839
getting close to being there on time

01:06:24,880 --> 01:06:29,920
um looks like i'm in the wrong directory

01:06:27,839 --> 01:06:33,039
there

01:06:29,920 --> 01:06:34,799
what i'd like to do is run amplify

01:06:33,039 --> 01:06:36,880
off and we're going to go ahead and add

01:06:34,799 --> 01:06:38,880
authentication

01:06:36,880 --> 01:06:41,119
and for the configuration we're going to

01:06:38,880 --> 01:06:44,400
just choose the default configuration

01:06:41,119 --> 01:06:46,480
which is basically kind of like a set of

01:06:44,400 --> 01:06:48,400
smart defaults that you know work for

01:06:46,480 --> 01:06:50,559
for a lot of the circumstances

01:06:48,400 --> 01:06:51,599
you could also do and this is going to

01:06:50,559 --> 01:06:53,680
only enable like

01:06:51,599 --> 01:06:55,760
username and password sign in and sign

01:06:53,680 --> 01:06:57,200
up you can also do a combination of

01:06:55,760 --> 01:06:59,920
username password

01:06:57,200 --> 01:07:00,720
along with social providers like

01:06:59,920 --> 01:07:03,119
facebook

01:07:00,720 --> 01:07:04,880
google uh whatever other face uh social

01:07:03,119 --> 01:07:06,240
provider that you'd like to use

01:07:04,880 --> 01:07:08,559
um and then you can do a manual

01:07:06,240 --> 01:07:09,839
configuration which basically walks

01:07:08,559 --> 01:07:11,599
through every single step and kind of

01:07:09,839 --> 01:07:13,119
allows you to completely customize it

01:07:11,599 --> 01:07:14,799
but we're gonna use default for this

01:07:13,119 --> 01:07:17,039
because it makes a lot of sense this

01:07:14,799 --> 01:07:19,280
being a workshop

01:07:17,039 --> 01:07:21,839
what we want to now do is select the

01:07:19,280 --> 01:07:25,839
mechanism for the user to sign in

01:07:21,839 --> 01:07:28,000
yes apple id is supported absolutely

01:07:25,839 --> 01:07:29,920
you can use either username email or

01:07:28,000 --> 01:07:32,880
phone number

01:07:29,920 --> 01:07:34,160
i'm going to choose username and you can

01:07:32,880 --> 01:07:36,240
also

01:07:34,160 --> 01:07:37,760
configure those advanced settings again

01:07:36,240 --> 01:07:40,400
after you've set that stuff up but i

01:07:37,760 --> 01:07:42,559
don't want to do that

01:07:40,400 --> 01:07:44,240
so the two most popular ways that people

01:07:42,559 --> 01:07:46,480
you know are allowing users to sign

01:07:44,240 --> 01:07:48,160
and usually are either username or email

01:07:46,480 --> 01:07:49,680
and both of those are really easy to

01:07:48,160 --> 01:07:51,440
kind of set up here but we're just using

01:07:49,680 --> 01:07:52,880
username for this example

01:07:51,440 --> 01:07:56,240
so after we've done that we can run

01:07:52,880 --> 01:07:58,480
amplify status

01:07:56,240 --> 01:08:00,559
we should see now that we have two

01:07:58,480 --> 01:08:02,000
resources one for authentication and one

01:08:00,559 --> 01:08:06,000
for api

01:08:02,000 --> 01:08:08,240
the um the api has already been deployed

01:08:06,000 --> 01:08:09,440
and the auth category is set to create

01:08:08,240 --> 01:08:11,599
so to deploy that

01:08:09,440 --> 01:08:13,440
we'll just run amplify push and the only

01:08:11,599 --> 01:08:15,920
update that's going to happen is

01:08:13,440 --> 01:08:17,359
us creating this auth class nothing is

01:08:15,920 --> 01:08:25,839
going to change for our api

01:08:17,359 --> 01:08:25,839
as as kind of outlined here

01:08:32,560 --> 01:08:36,799
so that's going to go ahead and deploy

01:08:34,000 --> 01:08:39,759
the authentication service

01:08:36,799 --> 01:08:41,199
for us on the front end we want to now

01:08:39,759 --> 01:08:44,239
integrate our app with

01:08:41,199 --> 01:08:46,400
that um that service so what we're going

01:08:44,239 --> 01:08:47,600
to basically need to do is create a way

01:08:46,400 --> 01:08:51,199
for users to sign

01:08:47,600 --> 01:08:53,520
up sign in confirm sign in for

01:08:51,199 --> 01:08:54,719
mfa and also maybe reset their password

01:08:53,520 --> 01:08:56,400
all that stuff

01:08:54,719 --> 01:08:57,839
so what we're going to use is this this

01:08:56,400 --> 01:09:00,560
new component

01:08:57,839 --> 01:09:02,000
that's part of the amplify ui react

01:09:00,560 --> 01:09:03,600
called with authenticator

01:09:02,000 --> 01:09:05,440
and this allows you to kind of put an

01:09:03,600 --> 01:09:07,839
authentication flow in in front of any

01:09:05,440 --> 01:09:07,839
component

01:09:07,920 --> 01:09:12,960
so i'm going to go back to app.js

01:09:11,040 --> 01:09:14,319
and i'm going to minimize some of my

01:09:12,960 --> 01:09:15,839
code here so i'm just going to go ahead

01:09:14,319 --> 01:09:19,279
and delete

01:09:15,839 --> 01:09:23,600
these comments and

01:09:19,279 --> 01:09:25,040
uh minimize this this app block here

01:09:23,600 --> 01:09:29,040
and i'm gonna go ahead and import this

01:09:25,040 --> 01:09:29,040
new component called with authenticator

01:09:30,080 --> 01:09:34,400
so we have the width authenticator now

01:09:32,640 --> 01:09:37,600
and what i'd like to do

01:09:34,400 --> 01:09:39,839
is instead of exporting the function app

01:09:37,600 --> 01:09:41,520
as the default export

01:09:39,839 --> 01:09:43,120
i would like to instead create a new

01:09:41,520 --> 01:09:43,759
default export so i'm going to kind of

01:09:43,120 --> 01:09:46,640
remove

01:09:43,759 --> 01:09:48,000
those first two statements there and

01:09:46,640 --> 01:09:51,920
i'll say export

01:09:48,000 --> 01:09:55,440
default with authenticator and

01:09:51,920 --> 01:09:56,320
pass in the app component and i will

01:09:55,440 --> 01:10:01,040
save that

01:09:56,320 --> 01:10:04,159
and if i go back to my app and i refresh

01:10:01,040 --> 01:10:08,719
i see that now we have um

01:10:04,159 --> 01:10:08,719
a sign-in flow put in front of our app

01:10:09,600 --> 01:10:12,960
so now that that's done what we want to

01:10:12,000 --> 01:10:16,320
do is

01:10:12,960 --> 01:10:17,840
we want to go ahead and um

01:10:16,320 --> 01:10:19,360
see if our authentication service has

01:10:17,840 --> 01:10:20,960
been deployed because once the

01:10:19,360 --> 01:10:22,239
authentication service is deployed we

01:10:20,960 --> 01:10:25,840
can use that so

01:10:22,239 --> 01:10:25,840
we'll wait a second for this to finish

01:10:28,840 --> 01:10:31,840
deploying

01:10:50,719 --> 01:10:54,159
human do you need to manage the

01:10:52,239 --> 01:10:56,080
authentication state locally uh no

01:10:54,159 --> 01:10:58,159
the the amplified libraries will do that

01:10:56,080 --> 01:11:00,159
for you so um

01:10:58,159 --> 01:11:02,159
once you once you've signed in we will

01:11:00,159 --> 01:11:05,360
persist the user session

01:11:02,159 --> 01:11:07,520
we will continue managing the um the

01:11:05,360 --> 01:11:09,920
access token and the id token

01:11:07,520 --> 01:11:11,360
um and we will use we'll do so using a

01:11:09,920 --> 01:11:13,120
refresh token that is all

01:11:11,360 --> 01:11:15,040
configured for you so you don't ever

01:11:13,120 --> 01:11:16,320
have to worry about that expiring or

01:11:15,040 --> 01:11:19,520
anything like that

01:11:16,320 --> 01:11:21,120
um you can customize the token

01:11:19,520 --> 01:11:22,080
expirations though as well so if you

01:11:21,120 --> 01:11:24,320
want to have

01:11:22,080 --> 01:11:25,199
a shorter expiration or a longer

01:11:24,320 --> 01:11:28,080
expiration you can

01:11:25,199 --> 01:11:29,840
customize all of that stuff but we have

01:11:28,080 --> 01:11:32,560
kind of like defaults that we that we go

01:11:29,840 --> 01:11:34,320
by that work pretty well for most apps

01:11:32,560 --> 01:11:36,560
so um once this has been deployed you

01:11:34,320 --> 01:11:39,600
should see something like this

01:11:36,560 --> 01:11:40,880
and then we can go ahead and sign in or

01:11:39,600 --> 01:11:42,400
sign up so i don't have

01:11:40,880 --> 01:11:54,400
i haven't signed up yet so i'll go ahead

01:11:42,400 --> 01:11:56,800
and sign up by clicking create account

01:11:54,400 --> 01:11:58,640
so i'll go ahead and use my phone number

01:11:56,800 --> 01:12:01,360
there

01:11:58,640 --> 01:12:02,000
and this should send an mfa code to my

01:12:01,360 --> 01:12:09,840
email

01:12:02,000 --> 01:12:09,840
so go ahead and check my email

01:12:17,199 --> 01:12:20,840
let me check it in my web browser

01:12:19,280 --> 01:12:23,840
because my phone is having a hard time

01:12:20,840 --> 01:12:23,840
connecting

01:12:27,760 --> 01:12:31,600
so the verification code comes into your

01:12:30,000 --> 01:12:32,880
email you should be able to just like

01:12:31,600 --> 01:12:35,040
paste it in

01:12:32,880 --> 01:12:37,199
or put it in however and then once you

01:12:35,040 --> 01:12:40,480
confirm

01:12:37,199 --> 01:12:43,520
then the user is now signed in and um

01:12:40,480 --> 01:12:44,719
if we refresh we see that we're we stay

01:12:43,520 --> 01:12:47,840
signed in

01:12:44,719 --> 01:12:50,000
but you might wonder okay so like we

01:12:47,840 --> 01:12:51,840
have no visual

01:12:50,000 --> 01:12:53,360
understanding of that user being signed

01:12:51,840 --> 01:12:55,120
in so let's kind of now

01:12:53,360 --> 01:12:56,800
look at how we can access the user

01:12:55,120 --> 01:12:59,920
session

01:12:56,800 --> 01:13:03,600
the way that we can do that is using

01:12:59,920 --> 01:13:04,640
the auth.current authenticated user

01:13:03,600 --> 01:13:06,560
function that we're going to use down

01:13:04,640 --> 01:13:08,400
there but before we get to that let's

01:13:06,560 --> 01:13:10,800
actually go back up here

01:13:08,400 --> 01:13:12,159
and go to adding a sign out button which

01:13:10,800 --> 01:13:14,640
is kind of right below

01:13:12,159 --> 01:13:16,239
the npm start where we we tested it out

01:13:14,640 --> 01:13:16,880
here so we're going to go right below

01:13:16,239 --> 01:13:18,320
that

01:13:16,880 --> 01:13:20,159
we're gonna kind of skip over this part

01:13:18,320 --> 01:13:21,760
because uh you know we don't really have

01:13:20,159 --> 01:13:23,760
to visually see that just

01:13:21,760 --> 01:13:24,880
right now so it's not too important i

01:13:23,760 --> 01:13:26,480
think what's more important is

01:13:24,880 --> 01:13:27,280
understanding that now that the user is

01:13:26,480 --> 01:13:30,840
signed in

01:13:27,280 --> 01:13:32,960
like how can we um access that user

01:13:30,840 --> 01:13:35,199
metadata

01:13:32,960 --> 01:13:35,199
um

01:13:38,960 --> 01:13:42,320
okay so yeah someone's asking about if

01:13:40,480 --> 01:13:44,320
i'd like to manage the user

01:13:42,320 --> 01:13:45,600
state with redux navigation which

01:13:44,320 --> 01:13:47,199
variables would you use yeah let's take

01:13:45,600 --> 01:13:49,840
a look at that

01:13:47,199 --> 01:13:51,199
um first let's go ahead and first show a

01:13:49,840 --> 01:13:51,600
sign out button so we can kind of for

01:13:51,199 --> 01:13:53,120
sure

01:13:51,600 --> 01:13:55,040
sure that that user is signed in and

01:13:53,120 --> 01:13:55,360
allow them to sign out and you can do

01:13:55,040 --> 01:13:57,040
that

01:13:55,360 --> 01:13:59,520
you can create your own custom sign out

01:13:57,040 --> 01:14:02,800
button and you can do something like uh

01:13:59,520 --> 01:14:03,360
import the auth class from from amplify

01:14:02,800 --> 01:14:06,159
and call

01:14:03,360 --> 01:14:07,760
that sign out and that's fairly easy to

01:14:06,159 --> 01:14:08,719
do but you can also just make this a

01:14:07,760 --> 01:14:10,400
one-liner

01:14:08,719 --> 01:14:12,080
by importing this amplify sign out

01:14:10,400 --> 01:14:13,600
button

01:14:12,080 --> 01:14:16,560
and then we're gonna do is we're gonna

01:14:13,600 --> 01:14:20,159
um we're gonna drop this

01:14:16,560 --> 01:14:22,239
somewhere in here like this

01:14:20,159 --> 01:14:23,840
and then and then now when i refresh i

01:14:22,239 --> 01:14:24,880
should see like there's a sign up button

01:14:23,840 --> 01:14:26,800
that matches

01:14:24,880 --> 01:14:28,640
kind of the same flow that we had

01:14:26,800 --> 01:14:30,719
earlier so when i refresh

01:14:28,640 --> 01:14:33,360
i i see that and if i sign out then i

01:14:30,719 --> 01:14:34,320
don't see anything so we are indeed

01:14:33,360 --> 01:14:35,760
like you know working with an

01:14:34,320 --> 01:14:38,800
authenticated user so i'm gonna go ahead

01:14:35,760 --> 01:14:38,800
and sign back in there

01:14:41,520 --> 01:14:46,320
so we're summed in um we we used the

01:14:44,480 --> 01:14:48,719
sound out button to kind of show us

01:14:46,320 --> 01:14:49,760
button let's now update the styling a

01:14:48,719 --> 01:14:52,239
little bit to kind of

01:14:49,760 --> 01:14:53,679
make this match the blue color theme

01:14:52,239 --> 01:14:54,400
that we kind of want to go with for this

01:14:53,679 --> 01:14:55,840
app

01:14:54,400 --> 01:14:57,520
and to do that you can completely

01:14:55,840 --> 01:14:59,679
customize this without with

01:14:57,520 --> 01:15:00,560
this with authenticator and these ui

01:14:59,679 --> 01:15:03,360
components

01:15:00,560 --> 01:15:03,920
using css so you can um do all kinds of

01:15:03,360 --> 01:15:06,400
stuff

01:15:03,920 --> 01:15:08,239
with css around the kind of the the

01:15:06,400 --> 01:15:11,040
display and things like that

01:15:08,239 --> 01:15:12,480
you can also update the fields

01:15:11,040 --> 01:15:14,159
themselves and which fields you would

01:15:12,480 --> 01:15:15,679
like to show or hide so for instance you

01:15:14,159 --> 01:15:16,400
might not need to capture the user's

01:15:15,679 --> 01:15:18,239
phone number

01:15:16,400 --> 01:15:20,159
you can hide that you can do all kinds

01:15:18,239 --> 01:15:21,679
of stuff but in this example we're going

01:15:20,159 --> 01:15:22,239
to make it pretty basic and we just want

01:15:21,679 --> 01:15:25,520
to change

01:15:22,239 --> 01:15:27,520
the color scheme from this yellow to

01:15:25,520 --> 01:15:29,400
kind of like a blue color scheme

01:15:27,520 --> 01:15:31,600
so i'm going to go to source slash

01:15:29,400 --> 01:15:33,520
index.css

01:15:31,600 --> 01:15:35,199
and i'm going to go ahead and paste this

01:15:33,520 --> 01:15:38,320
here

01:15:35,199 --> 01:15:39,920
and then when i save the file i should

01:15:38,320 --> 01:15:43,120
see that we have now a blue

01:15:39,920 --> 01:15:44,400
a blue configuration

01:15:43,120 --> 01:15:47,360
so i like the blue a little better i'm

01:15:44,400 --> 01:15:47,360
going to keep it like that

01:15:47,600 --> 01:15:52,000
and we want to now access the user's

01:15:50,560 --> 01:15:55,520
metadata so we want to get

01:15:52,000 --> 01:15:56,000
stuff like their um their attributes so

01:15:55,520 --> 01:15:58,239
we can

01:15:56,000 --> 01:16:00,560
you know like someone mentioned earlier

01:15:58,239 --> 01:16:04,840
deal with that in local state

01:16:00,560 --> 01:16:06,000
so what we can do is we can go back to

01:16:04,840 --> 01:16:09,760
app.js

01:16:06,000 --> 01:16:11,520
and in our use effect hook

01:16:09,760 --> 01:16:13,280
we're going to create a new function

01:16:11,520 --> 01:16:13,679
called check user we're going to invoke

01:16:13,280 --> 01:16:16,320
a new

01:16:13,679 --> 01:16:17,520
function called check user and check

01:16:16,320 --> 01:16:20,960
user is going to be

01:16:17,520 --> 01:16:22,480
calling this method here

01:16:20,960 --> 01:16:24,400
we're going to be calling auth that

01:16:22,480 --> 01:16:26,880
current authenticated user

01:16:24,400 --> 01:16:27,520
and this gives us the user object which

01:16:26,880 --> 01:16:28,880
kind of has

01:16:27,520 --> 01:16:31,040
all of the information you would need

01:16:28,880 --> 01:16:33,280
for that user so it has their

01:16:31,040 --> 01:16:34,159
their id token their access token and

01:16:33,280 --> 01:16:36,480
their you know

01:16:34,159 --> 01:16:37,600
all the stuff that has to do with their

01:16:36,480 --> 01:16:39,280
their token for

01:16:37,600 --> 01:16:41,360
for the use and any headers that you'd

01:16:39,280 --> 01:16:42,960
like to send to another api

01:16:41,360 --> 01:16:45,199
it has their username it has their

01:16:42,960 --> 01:16:46,960
attributes it has all kinds of stuff

01:16:45,199 --> 01:16:49,360
so let's actually go ahead and look at

01:16:46,960 --> 01:16:50,239
that um oh yeah first of all we also

01:16:49,360 --> 01:16:53,120
need to import

01:16:50,239 --> 01:16:56,000
off from aws amplify which is something

01:16:53,120 --> 01:16:56,000
i forgot to do here

01:16:56,080 --> 01:16:59,360
so import off create the new check user

01:16:58,800 --> 01:17:01,679
function

01:16:59,360 --> 01:17:04,239
and then um you know and then invoke

01:17:01,679 --> 01:17:06,560
that function here

01:17:04,239 --> 01:17:09,040
so if i go back here i should be able to

01:17:06,560 --> 01:17:09,040
inspect

01:17:10,560 --> 01:17:16,800
and see that we have the user with all

01:17:13,679 --> 01:17:19,440
of this metadata here

01:17:16,800 --> 01:17:21,760
and we also have the user attributes

01:17:19,440 --> 01:17:24,159
which contain the email

01:17:21,760 --> 01:17:24,960
the phone number the sub which is their

01:17:24,159 --> 01:17:27,120
unique id

01:17:24,960 --> 01:17:29,120
so this is a completely globally unique

01:17:27,120 --> 01:17:30,480
id that will never be replicated

01:17:29,120 --> 01:17:32,480
so if you're looking for a unique

01:17:30,480 --> 01:17:35,440
identifier that's kind of where i'd go

01:17:32,480 --> 01:17:37,520
it's uh sub short for subject which is

01:17:35,440 --> 01:17:40,960
kind of an oid spec oidc

01:17:37,520 --> 01:17:43,920
specific name

01:17:40,960 --> 01:17:45,360
um someone mentioned like how do you use

01:17:43,920 --> 01:17:47,040
that user's name in your app so let's

01:17:45,360 --> 01:17:50,320
say you want to create a very

01:17:47,040 --> 01:17:52,400
basic use case is like a profile so you

01:17:50,320 --> 01:17:54,000
might do something like this

01:17:52,400 --> 01:17:57,040
i want to create a user profile here so

01:17:54,000 --> 01:18:00,640
i might say user and set user

01:17:57,040 --> 01:18:03,840
and the the default is set to like null

01:18:00,640 --> 01:18:04,800
but in this check user function you can

01:18:03,840 --> 01:18:09,440
now just call

01:18:04,800 --> 01:18:11,679
set user user.attributes

01:18:09,440 --> 01:18:13,679
or you might just pass in the whole user

01:18:11,679 --> 01:18:17,040
just passing the whole user

01:18:13,679 --> 01:18:18,080
and then in our app what we might do

01:18:17,040 --> 01:18:20,159
and this is what we're doing in our

01:18:18,080 --> 01:18:21,840
workshop actually you might have like a

01:18:20,159 --> 01:18:24,960
heading

01:18:21,840 --> 01:18:28,239
that uh that is below here maybe

01:18:24,960 --> 01:18:28,239
it says hello and then

01:18:28,280 --> 01:18:31,280
user.username

01:18:31,360 --> 01:18:35,840
and then when the app reloads

01:18:34,640 --> 01:18:40,719
you might want to actually do some

01:18:35,840 --> 01:18:42,719
conditional logic here

01:18:40,719 --> 01:18:44,159
that way we make sure the user is is

01:18:42,719 --> 01:18:45,360
there so we're going to say if there's a

01:18:44,159 --> 01:18:47,440
user

01:18:45,360 --> 01:18:48,560
yeah we're almost done not on time so i

01:18:47,440 --> 01:18:51,440
see that

01:18:48,560 --> 01:18:52,880
but anyway so um we're saying hello

01:18:51,440 --> 01:18:54,080
debit three because they know i'm

01:18:52,880 --> 01:18:56,320
signing as dive at three and this would

01:18:54,080 --> 01:18:58,400
be dynamic for any person that signs in

01:18:56,320 --> 01:19:00,400
it's a super simple way to create a

01:18:58,400 --> 01:19:02,800
profile uh just by using really

01:19:00,400 --> 01:19:04,640
the username as well as the attributes

01:19:02,800 --> 01:19:07,920
here

01:19:04,640 --> 01:19:08,800
so um we've done that the last thing we

01:19:07,920 --> 01:19:11,360
want to do is

01:19:08,800 --> 01:19:12,960
um upload images so i don't think we're

01:19:11,360 --> 01:19:13,920
going to have time for this because we

01:19:12,960 --> 01:19:15,120
only have three minutes left

01:19:13,920 --> 01:19:16,800
unfortunately but this is kind of the

01:19:15,120 --> 01:19:19,040
last part of the workshop

01:19:16,800 --> 01:19:20,159
so um you know it was one of the core

01:19:19,040 --> 01:19:22,239
pieces but i think

01:19:20,159 --> 01:19:23,760
it's pretty self-explanatory if you've

01:19:22,239 --> 01:19:24,480
gotten this far i think you'll you'll be

01:19:23,760 --> 01:19:25,920
able to

01:19:24,480 --> 01:19:28,000
to kind of manage this part pretty

01:19:25,920 --> 01:19:28,719
easily but um this section what we're

01:19:28,000 --> 01:19:30,239
doing

01:19:28,719 --> 01:19:31,840
is we're adding storage which is kind of

01:19:30,239 --> 01:19:32,480
like the new category we haven't done

01:19:31,840 --> 01:19:34,880
yet

01:19:32,480 --> 01:19:36,400
and this is this is using amazon s3

01:19:34,880 --> 01:19:39,440
which is a way to kind of upload

01:19:36,400 --> 01:19:39,920
images videos files pdfs whatever you'd

01:19:39,440 --> 01:19:41,199
like

01:19:39,920 --> 01:19:42,960
but for our example we're going to be

01:19:41,199 --> 01:19:46,159
using it for for images

01:19:42,960 --> 01:19:48,560
um and you would you know run

01:19:46,159 --> 01:19:49,199
this command walk through these steps

01:19:48,560 --> 01:19:51,679
and

01:19:49,199 --> 01:19:52,400
to implement this uh in the actual ui

01:19:51,679 --> 01:19:54,560
you would use

01:19:52,400 --> 01:19:56,320
this this code block here all this code

01:19:54,560 --> 01:19:57,280
here and just replace whatever is in

01:19:56,320 --> 01:19:59,280
app.js

01:19:57,280 --> 01:20:00,320
so if you want to try that out i

01:19:59,280 --> 01:20:01,920
encourage that

01:20:00,320 --> 01:20:03,360
and then the last thing uh that you

01:20:01,920 --> 01:20:04,800
would want to do um

01:20:03,360 --> 01:20:06,239
what we what we've done in this workshop

01:20:04,800 --> 01:20:08,000
is kind of go through all the pieces

01:20:06,239 --> 01:20:10,560
necessary to build this app

01:20:08,000 --> 01:20:11,360
and then starting here you can basically

01:20:10,560 --> 01:20:14,320
just like

01:20:11,360 --> 01:20:15,520
create these components here and then

01:20:14,320 --> 01:20:17,280
copy and paste really

01:20:15,520 --> 01:20:18,719
all this code that's below there to

01:20:17,280 --> 01:20:19,600
actually build out the app using these

01:20:18,719 --> 01:20:21,040
components

01:20:19,600 --> 01:20:22,639
and this will deepen your understanding

01:20:21,040 --> 01:20:24,719
of kind of how all these things

01:20:22,639 --> 01:20:26,000
work together because right now we've

01:20:24,719 --> 01:20:26,880
been using them separately like

01:20:26,000 --> 01:20:29,280
authentication

01:20:26,880 --> 01:20:30,400
separately from the api separately from

01:20:29,280 --> 01:20:31,600
the storage

01:20:30,400 --> 01:20:33,199
putting them all together kind of give

01:20:31,600 --> 01:20:35,199
you a better understanding of kind of

01:20:33,199 --> 01:20:37,600
how it all works together

01:20:35,199 --> 01:20:38,320
so um i appreciate all the great

01:20:37,600 --> 01:20:40,960
questions

01:20:38,320 --> 01:20:42,639
and i think that we've for an hour and

01:20:40,960 --> 01:20:43,199
30 minutes really is all we've had

01:20:42,639 --> 01:20:45,600
together

01:20:43,199 --> 01:20:46,960
i feel like we've covered a very solid

01:20:45,600 --> 01:20:49,040
amount of information

01:20:46,960 --> 01:20:50,560
so um i just you know appreciate

01:20:49,040 --> 01:20:52,000
everyone that's kind of taken part of

01:20:50,560 --> 01:20:54,639
this workshop

01:20:52,000 --> 01:20:55,360
and i want to just call out oops that

01:20:54,639 --> 01:20:58,239
you can

01:20:55,360 --> 01:20:58,560
also interact with me on twitter if i if

01:20:58,239 --> 01:21:00,480
we

01:20:58,560 --> 01:21:01,840
we finished this and you end up running

01:21:00,480 --> 01:21:05,199
into any questions

01:21:01,840 --> 01:21:06,560
um twitter.com david3 you can follow me

01:21:05,199 --> 01:21:09,600
there i'd be happy to

01:21:06,560 --> 01:21:11,679
to answer any questions so yeah that's

01:21:09,600 --> 01:21:12,800
it we're going to go ahead and um and

01:21:11,679 --> 01:21:14,560
call it quits

01:21:12,800 --> 01:21:16,480
so i appreciate everyone's time i hope

01:21:14,560 --> 01:21:18,239
you enjoyed the rest of the event

01:21:16,480 --> 01:21:19,760
and it was really fun being here and i

01:21:18,239 --> 01:21:21,760
really appreciate the honor

01:21:19,760 --> 01:21:23,520
to to be like speaking here in front of

01:21:21,760 --> 01:21:26,159
all these other amazing people and to be

01:21:23,520 --> 01:21:27,040
teaching you today so uh thanks for that

01:21:26,159 --> 01:21:29,199
and i'm gonna go ahead and

01:21:27,040 --> 01:21:36,560
step away now so have a great rest of

01:21:29,199 --> 01:21:36,560

YouTube URL: https://www.youtube.com/watch?v=LjPMb01tpjw


