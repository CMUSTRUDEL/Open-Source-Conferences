Title: Containers in Depth – Understanding how containers work to better work with them - Brent Laster
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Brent Laster, SAS
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: Containers are all the rage these days – from Docker to Kubernetes and everywhere in-between.  But to get the most out of them it can be helpful to understand how containers are constructed, how they depend and interact with the operating system, and what the differences and interactions are between layers, images, and containers.  Join R&D Director, Brent Laster as he does a quick, visual overview of how containers work and how applications such as Docker work with them.  Topics to be discussed include:

- What containers are and the benefits they provide
- How containers are constructed
- The differences between layers, images, and containers
- What does immutability really mean
- The core Linux functionalities that containers are based on
- How containers reuse code
- The differences between containers and VMs
- What Docker really does
- The Docker storage drivers
- How overlays work
- The Open Container Initiative
- A good analogy for understanding all of this
Captions: 
	00:00:04,960 --> 00:00:08,559
all right hello welcome everybody uh

00:00:07,120 --> 00:00:11,200
thanks for taking some time this

00:00:08,559 --> 00:00:12,719
afternoon to join us for this containers

00:00:11,200 --> 00:00:14,240
in-depth session i'll be your presenter

00:00:12,719 --> 00:00:16,080
today brent laster

00:00:14,240 --> 00:00:18,480
and so we're going to jump right into

00:00:16,080 --> 00:00:20,880
this uh we're going to talk today

00:00:18,480 --> 00:00:21,520
about how containers work and kind of

00:00:20,880 --> 00:00:23,840
the storage

00:00:21,520 --> 00:00:25,680
drivers and how they're put together for

00:00:23,840 --> 00:00:28,000
some of you who may have been in my uh

00:00:25,680 --> 00:00:29,439
previous workshop here uh some of this

00:00:28,000 --> 00:00:31,599
may be familiar but you'll get some

00:00:29,439 --> 00:00:33,360
new stuff out of it as well let me go

00:00:31,599 --> 00:00:36,719
ahead and share my screen here

00:00:33,360 --> 00:00:39,520
and jump into the presentation

00:00:36,719 --> 00:00:39,520
get that going

00:00:40,000 --> 00:00:45,200
so in here a little bit about me very

00:00:42,960 --> 00:00:46,800
briefly my day job is an r d director in

00:00:45,200 --> 00:00:48,079
a technology company here in north

00:00:46,800 --> 00:00:50,559
carolina

00:00:48,079 --> 00:00:51,760
i do bit of global training got some

00:00:50,559 --> 00:00:53,520
books out there

00:00:51,760 --> 00:00:54,800
uh there's information and connect with

00:00:53,520 --> 00:00:57,039
me on social media

00:00:54,800 --> 00:00:58,079
twitter handle is also at the bottom of

00:00:57,039 --> 00:00:59,440
the slides here

00:00:58,079 --> 00:01:01,600
if you're interested in hearing about

00:00:59,440 --> 00:01:02,000
any other of my workshops or things that

00:01:01,600 --> 00:01:05,199
i do

00:01:02,000 --> 00:01:07,360
on o'reilly or other platforms

00:01:05,199 --> 00:01:08,640
uh just connect with me on twitter and i

00:01:07,360 --> 00:01:12,159
i usually post

00:01:08,640 --> 00:01:14,400
what's coming up there we have uh whoops

00:01:12,159 --> 00:01:15,840
we have jumping to my linkedin there

00:01:14,400 --> 00:01:19,920
sorry about that

00:01:15,840 --> 00:01:21,840
let's go back to my presentation

00:01:19,920 --> 00:01:23,360
here i jumped jumped me to that you guys

00:01:21,840 --> 00:01:24,799
didn't have to didn't see that but it

00:01:23,360 --> 00:01:27,280
would take my linkedin

00:01:24,799 --> 00:01:27,840
location so books out there professional

00:01:27,280 --> 00:01:30,320
get

00:01:27,840 --> 00:01:31,680
uh good for advanced or new people to

00:01:30,320 --> 00:01:33,439
get if you're interested in that check

00:01:31,680 --> 00:01:35,360
it out on amazon

00:01:33,439 --> 00:01:37,040
uh jenkins 2 book if you're interested

00:01:35,360 --> 00:01:38,799
in jenkins up and running

00:01:37,040 --> 00:01:40,240
to being writing your pipelines as code

00:01:38,799 --> 00:01:42,000
if you know jenkins check that one out

00:01:40,240 --> 00:01:43,600
as well

00:01:42,000 --> 00:01:45,680
useful probably to get the electronic

00:01:43,600 --> 00:01:48,079
version of that as the screenshots

00:01:45,680 --> 00:01:49,360
are kind of washed out and some of the

00:01:48,079 --> 00:01:51,600
uh some of the print

00:01:49,360 --> 00:01:52,799
printed versions of that all right so

00:01:51,600 --> 00:01:55,759
jumping into our topics for

00:01:52,799 --> 00:01:57,840
the next 45 minutes our agenda what

00:01:55,759 --> 00:01:59,360
containers are the benefits they provide

00:01:57,840 --> 00:02:00,960
how containers are constructed we'll

00:01:59,360 --> 00:02:01,439
talk about the differences between

00:02:00,960 --> 00:02:04,079
layers

00:02:01,439 --> 00:02:05,360
images and containers what makes them up

00:02:04,079 --> 00:02:07,439
how they all relate

00:02:05,360 --> 00:02:09,119
what does immutability really mean the

00:02:07,439 --> 00:02:10,239
core linux functionality standards are

00:02:09,119 --> 00:02:12,160
based on

00:02:10,239 --> 00:02:13,280
how containers reuse code and we'll get

00:02:12,160 --> 00:02:15,599
in more detail

00:02:13,280 --> 00:02:17,440
one line here but it belies uh quite a

00:02:15,599 --> 00:02:18,160
bit of detail we go into with storage

00:02:17,440 --> 00:02:20,000
drivers

00:02:18,160 --> 00:02:21,280
and particularly the overlay 2 storage

00:02:20,000 --> 00:02:23,440
driver the most

00:02:21,280 --> 00:02:24,400
common default storage driver today and

00:02:23,440 --> 00:02:25,760
towards the end about the

00:02:24,400 --> 00:02:28,160
we'll talk about the open container

00:02:25,760 --> 00:02:28,959
initiative so what are containers again

00:02:28,160 --> 00:02:30,480
some of you who've been through the

00:02:28,959 --> 00:02:32,319
workshops may have seen this

00:02:30,480 --> 00:02:34,080
slide before essentially you can think

00:02:32,319 --> 00:02:36,080
of containers as being like a standard

00:02:34,080 --> 00:02:37,760
way of packaging up software

00:02:36,080 --> 00:02:39,280
a standard unit software much where your

00:02:37,760 --> 00:02:42,640
application uh

00:02:39,280 --> 00:02:43,680
feels like it has its own system to run

00:02:42,640 --> 00:02:45,760
on and that's the idea

00:02:43,680 --> 00:02:47,120
much like you had your own laptop with

00:02:45,760 --> 00:02:49,040
everything provisioned on it

00:02:47,120 --> 00:02:50,800
you can have things in a container like

00:02:49,040 --> 00:02:54,560
the app the run time

00:02:50,800 --> 00:02:55,519
the dependencies the settings the system

00:02:54,560 --> 00:02:57,040
libraries

00:02:55,519 --> 00:02:58,640
all the things the environment

00:02:57,040 --> 00:03:01,680
provisioned and configured

00:02:58,640 --> 00:03:03,200
in that container that you need to run

00:03:01,680 --> 00:03:04,560
your app so you can focus on running

00:03:03,200 --> 00:03:06,640
your app in there

00:03:04,560 --> 00:03:08,560
but a container isn't a vm it's

00:03:06,640 --> 00:03:09,920
leverages several features of the linux

00:03:08,560 --> 00:03:12,159
operating system

00:03:09,920 --> 00:03:13,519
to carve out a self-contained space to

00:03:12,159 --> 00:03:15,519
run in

00:03:13,519 --> 00:03:17,440
as opposed to a virtual machine where

00:03:15,519 --> 00:03:19,519
you are actually having to

00:03:17,440 --> 00:03:21,680
have some other thing like a virtual box

00:03:19,519 --> 00:03:23,760
or something as a hypervisor program

00:03:21,680 --> 00:03:25,920
to host that virtual machine running on

00:03:23,760 --> 00:03:26,400
there you instead can just have docker

00:03:25,920 --> 00:03:29,120
install

00:03:26,400 --> 00:03:29,680
and docker's able to carve out or grab

00:03:29,120 --> 00:03:31,920
part

00:03:29,680 --> 00:03:33,519
portions of the resources of the system

00:03:31,920 --> 00:03:34,799
to be able to give that container its

00:03:33,519 --> 00:03:36,239
own environment we'll talk about a

00:03:34,799 --> 00:03:38,400
little bit more about that

00:03:36,239 --> 00:03:39,760
later on so containers are running

00:03:38,400 --> 00:03:42,640
instances of images

00:03:39,760 --> 00:03:43,519
images uh define what goes into a

00:03:42,640 --> 00:03:45,840
container

00:03:43,519 --> 00:03:47,519
and containers are built up from images

00:03:45,840 --> 00:03:49,760
benefits of a container

00:03:47,519 --> 00:03:51,280
uh very briefly since they're

00:03:49,760 --> 00:03:53,840
self-contained they're

00:03:51,280 --> 00:03:55,760
easy to start up and spin up it's as if

00:03:53,840 --> 00:03:56,879
again somebody brought like a laptop or

00:03:55,760 --> 00:03:58,400
something with them

00:03:56,879 --> 00:04:00,080
and just open it up and fire it up the

00:03:58,400 --> 00:04:00,400
application is ready to go because it's

00:04:00,080 --> 00:04:02,720
all

00:04:00,400 --> 00:04:03,760
installed configured ready to run

00:04:02,720 --> 00:04:05,360
through that

00:04:03,760 --> 00:04:07,200
it also lends itself well to

00:04:05,360 --> 00:04:09,599
applications like

00:04:07,200 --> 00:04:12,640
having micro services these smaller

00:04:09,599 --> 00:04:14,799
services to define your app and running

00:04:12,640 --> 00:04:16,160
lots of microservices running them as

00:04:14,799 --> 00:04:17,359
individual containers

00:04:16,160 --> 00:04:19,600
you don't have to worry about trying to

00:04:17,359 --> 00:04:21,040
provision the systems every time

00:04:19,600 --> 00:04:22,720
for each instance or how many are

00:04:21,040 --> 00:04:23,600
running on there you have they all have

00:04:22,720 --> 00:04:25,919
their own

00:04:23,600 --> 00:04:28,000
individual environment and such on there

00:04:25,919 --> 00:04:28,960
so it makes it easier to have that sort

00:04:28,000 --> 00:04:31,520
of

00:04:28,960 --> 00:04:33,040
separation in there and to be ported

00:04:31,520 --> 00:04:36,320
across anything they can be

00:04:33,040 --> 00:04:38,800
run on anything that runs docker

00:04:36,320 --> 00:04:40,880
a container image is a read-only

00:04:38,800 --> 00:04:42,800
template used to create a container

00:04:40,880 --> 00:04:45,040
images are kind of like a snapshot of a

00:04:42,800 --> 00:04:46,720
container i tell people think of it as

00:04:45,040 --> 00:04:48,400
if you were provisioning

00:04:46,720 --> 00:04:50,160
a machine if you were installing

00:04:48,400 --> 00:04:51,759
software on a machine you would go

00:04:50,160 --> 00:04:52,240
through install all the software on

00:04:51,759 --> 00:04:53,919
there

00:04:52,240 --> 00:04:55,440
and then you have an image that you can

00:04:53,919 --> 00:04:56,560
work with you can provision other

00:04:55,440 --> 00:04:59,360
machines from it

00:04:56,560 --> 00:05:01,280
in there the same idea like images are

00:04:59,360 --> 00:05:02,800
stored in a registry which is like a

00:05:01,280 --> 00:05:04,479
repository for images

00:05:02,800 --> 00:05:06,320
and they're considered to be immutable

00:05:04,479 --> 00:05:06,800
that if you want to change something on

00:05:06,320 --> 00:05:08,720
them

00:05:06,800 --> 00:05:10,080
you would create a new version of the

00:05:08,720 --> 00:05:11,840
image you wouldn't

00:05:10,080 --> 00:05:13,199
change something in the existing image

00:05:11,840 --> 00:05:15,120
you create a new version

00:05:13,199 --> 00:05:17,039
of the image and that's important for

00:05:15,120 --> 00:05:19,039
reasons we'll see in just a moment

00:05:17,039 --> 00:05:21,120
the docker build command is used to

00:05:19,039 --> 00:05:24,400
create these to create

00:05:21,120 --> 00:05:26,960
an image from a docker file so

00:05:24,400 --> 00:05:27,919
a docker image is built up from a series

00:05:26,960 --> 00:05:30,160
of layers

00:05:27,919 --> 00:05:31,919
each layer results from an instruction

00:05:30,160 --> 00:05:34,000
in a docker file

00:05:31,919 --> 00:05:35,680
when we have a docker file think of that

00:05:34,000 --> 00:05:38,000
as the recipe

00:05:35,680 --> 00:05:39,680
or the script a set of instructions for

00:05:38,000 --> 00:05:41,840
how to create the image

00:05:39,680 --> 00:05:42,960
in other words i start with a basic

00:05:41,840 --> 00:05:44,960
operating system

00:05:42,960 --> 00:05:47,120
i may copy some things from locally from

00:05:44,960 --> 00:05:49,280
my operating system in there

00:05:47,120 --> 00:05:51,280
i may run some things to set up the

00:05:49,280 --> 00:05:52,960
environment or do configuration

00:05:51,280 --> 00:05:54,479
get some things the way i want it it's

00:05:52,960 --> 00:05:56,319
similar again to this idea of

00:05:54,479 --> 00:05:58,240
provisioning a new computer

00:05:56,319 --> 00:06:00,080
how do i get it all set up the way that

00:05:58,240 --> 00:06:03,120
i want it so that i can then

00:06:00,080 --> 00:06:06,400
use it and as we do this certain uh

00:06:03,120 --> 00:06:07,919
instructions will create new layers in

00:06:06,400 --> 00:06:09,759
the dock or in the image

00:06:07,919 --> 00:06:12,160
the layers get stacked on top of each

00:06:09,759 --> 00:06:15,680
other and each layer is only the set of

00:06:12,160 --> 00:06:18,000
differences from the one before

00:06:15,680 --> 00:06:18,720
these layers are all read only except

00:06:18,000 --> 00:06:21,120
for

00:06:18,720 --> 00:06:22,880
when we run a container we add one

00:06:21,120 --> 00:06:23,520
additional layer which is a read write

00:06:22,880 --> 00:06:25,280
layer

00:06:23,520 --> 00:06:27,280
think of it in the same way as we

00:06:25,280 --> 00:06:29,600
provision a computer

00:06:27,280 --> 00:06:31,759
then we actually create a user area

00:06:29,600 --> 00:06:34,479
where we can read and write and store

00:06:31,759 --> 00:06:36,000
information that is particular to that

00:06:34,479 --> 00:06:37,280
user or that instance

00:06:36,000 --> 00:06:39,360
in the same way when we create a

00:06:37,280 --> 00:06:40,319
container from an image we put a layer

00:06:39,360 --> 00:06:42,560
on top of it

00:06:40,319 --> 00:06:44,479
that we can read and write and use in

00:06:42,560 --> 00:06:46,240
there but we don't touch any of the

00:06:44,479 --> 00:06:48,800
other lower layers because

00:06:46,240 --> 00:06:50,240
they are read only there so container is

00:06:48,800 --> 00:06:53,520
just an image plus this thin

00:06:50,240 --> 00:06:55,120
read write layer spun up for us to use

00:06:53,520 --> 00:06:57,199
all changes that are made to the running

00:06:55,120 --> 00:06:59,680
container go in that read write layer

00:06:57,199 --> 00:07:00,800
now i won't go through uh we'll see an

00:06:59,680 --> 00:07:02,240
example here

00:07:00,800 --> 00:07:04,560
basically this is just an example of

00:07:02,240 --> 00:07:07,120
doing a docker build to pull down

00:07:04,560 --> 00:07:08,800
information uh to pull to build it get

00:07:07,120 --> 00:07:10,479
an image locally for us

00:07:08,800 --> 00:07:12,880
what it's doing in this context is going

00:07:10,479 --> 00:07:14,720
through each step in this docker file

00:07:12,880 --> 00:07:17,039
and executing in the first case it's

00:07:14,720 --> 00:07:21,120
saying get stuff from this mysql

00:07:17,039 --> 00:07:22,720
image that's out there version 5.5.45

00:07:21,120 --> 00:07:24,319
and it's pulling down the layers that

00:07:22,720 --> 00:07:26,639
were used to build that image

00:07:24,319 --> 00:07:27,520
so we can start our existing images with

00:07:26,639 --> 00:07:30,160
other images

00:07:27,520 --> 00:07:31,120
and those images in turn will be based

00:07:30,160 --> 00:07:33,520
on other images

00:07:31,120 --> 00:07:36,080
based on layers themselves so all the

00:07:33,520 --> 00:07:37,840
layers all the commands that went into

00:07:36,080 --> 00:07:39,520
making these layers and setting up the

00:07:37,840 --> 00:07:41,360
environment and

00:07:39,520 --> 00:07:42,960
provisioning this area of the software

00:07:41,360 --> 00:07:44,800
for this mysql image

00:07:42,960 --> 00:07:47,440
are getting pulled down in this first

00:07:44,800 --> 00:07:48,960
step here and actually after it's done

00:07:47,440 --> 00:07:51,120
then we'll go ahead and we'll start

00:07:48,960 --> 00:07:52,000
building our image by adding layers on

00:07:51,120 --> 00:07:54,160
top of that

00:07:52,000 --> 00:07:55,120
we'll be copying stuff over from our

00:07:54,160 --> 00:07:56,960
local area

00:07:55,120 --> 00:07:59,039
we'll be setting an entry point where we

00:07:56,960 --> 00:08:00,960
enter and start executing things

00:07:59,039 --> 00:08:02,160
for our container and also running the

00:08:00,960 --> 00:08:05,599
mysql daemon

00:08:02,160 --> 00:08:07,599
out there so as you can see

00:08:05,599 --> 00:08:09,599
even though the step one was just one

00:08:07,599 --> 00:08:11,440
step it brought down a bunch of layers

00:08:09,599 --> 00:08:13,520
that made up that base image for us

00:08:11,440 --> 00:08:14,479
that somebody else had put together and

00:08:13,520 --> 00:08:17,039
put out there to

00:08:14,479 --> 00:08:17,759
set up a mysql environment now if we

00:08:17,039 --> 00:08:21,759
were to

00:08:17,759 --> 00:08:23,759
map this through to from the docker file

00:08:21,759 --> 00:08:26,080
from running the steps we could also do

00:08:23,759 --> 00:08:28,160
a docker history a docker history would

00:08:26,080 --> 00:08:30,240
allow us to see all of the layers that

00:08:28,160 --> 00:08:31,840
went into building up this image

00:08:30,240 --> 00:08:33,839
the ones that are marked as missing

00:08:31,840 --> 00:08:35,440
there simply means that the layers were

00:08:33,839 --> 00:08:36,399
built on a different system and so we

00:08:35,440 --> 00:08:38,560
don't have

00:08:36,399 --> 00:08:40,240
them available locally but we can still

00:08:38,560 --> 00:08:42,000
see the pieces that went into it

00:08:40,240 --> 00:08:43,599
so you can see that these steps that we

00:08:42,000 --> 00:08:44,480
went through provisioning this image

00:08:43,599 --> 00:08:46,720
creating it

00:08:44,480 --> 00:08:49,600
all went into layers that then built up

00:08:46,720 --> 00:08:51,120
here and we have just gone through

00:08:49,600 --> 00:08:53,360
and as we executed the steps of the

00:08:51,120 --> 00:08:55,920
docker file we built up the layers of

00:08:53,360 --> 00:08:57,519
our own image here

00:08:55,920 --> 00:08:59,279
and so each one of the steps in the

00:08:57,519 --> 00:09:01,440
dockerfile in this case caused

00:08:59,279 --> 00:09:02,959
a instruction to happen to copy

00:09:01,440 --> 00:09:04,880
something to bring down an image

00:09:02,959 --> 00:09:06,399
or add something or spin something up

00:09:04,880 --> 00:09:09,200
which then ultimately

00:09:06,399 --> 00:09:09,920
creates our image here so our image here

00:09:09,200 --> 00:09:13,519
then

00:09:09,920 --> 00:09:15,040
is a read only basis to form a container

00:09:13,519 --> 00:09:17,839
in terms of up or intersect with the

00:09:15,040 --> 00:09:18,880
operating system we can think of layers

00:09:17,839 --> 00:09:21,519
as basically being like

00:09:18,880 --> 00:09:23,440
files to the operating system the image

00:09:21,519 --> 00:09:25,839
layers are read only immutable

00:09:23,440 --> 00:09:27,200
but we create a container again by doing

00:09:25,839 --> 00:09:28,320
something like a docker run if you're

00:09:27,200 --> 00:09:29,760
using docker there are other

00:09:28,320 --> 00:09:32,240
applications you can use

00:09:29,760 --> 00:09:34,160
but using docker run to actually say

00:09:32,240 --> 00:09:36,000
spin up a container which puts a read

00:09:34,160 --> 00:09:39,040
write layer on top of there

00:09:36,000 --> 00:09:40,959
that we can then make changes to

00:09:39,040 --> 00:09:43,040
so we have to use some operating system

00:09:40,959 --> 00:09:45,440
constructs here or some techniques

00:09:43,040 --> 00:09:46,080
to be able to make this all work for

00:09:45,440 --> 00:09:48,000
example

00:09:46,080 --> 00:09:50,560
to be able to find files throughout the

00:09:48,000 --> 00:09:51,279
layers here we have the union file

00:09:50,560 --> 00:09:52,720
system

00:09:51,279 --> 00:09:54,560
there are other approaches to this but

00:09:52,720 --> 00:09:55,040
the union file system is the most common

00:09:54,560 --> 00:09:56,880
one

00:09:55,040 --> 00:09:58,880
you'll see used and the union file

00:09:56,880 --> 00:09:59,760
system simply means that we can search

00:09:58,880 --> 00:10:02,320
through here

00:09:59,760 --> 00:10:03,040
and if we need to find a file we look

00:10:02,320 --> 00:10:04,640
kind of drill

00:10:03,040 --> 00:10:06,800
down through the different layers that

00:10:04,640 --> 00:10:07,920
make up our image until we find the file

00:10:06,800 --> 00:10:10,320
that we want

00:10:07,920 --> 00:10:11,920
it essentially allows us to stack these

00:10:10,320 --> 00:10:15,120
layers on top of each other

00:10:11,920 --> 00:10:16,959
and present it as one kind of unified

00:10:15,120 --> 00:10:19,360
directory out there being able to look

00:10:16,959 --> 00:10:20,959
down through it so the union file system

00:10:19,360 --> 00:10:22,320
is one aspect of that

00:10:20,959 --> 00:10:24,160
another thing though that comes into

00:10:22,320 --> 00:10:26,160
play here though is what happens if i

00:10:24,160 --> 00:10:28,480
need to actually change a file

00:10:26,160 --> 00:10:30,079
or modify a file we've said that the

00:10:28,480 --> 00:10:31,200
image layers themselves below the

00:10:30,079 --> 00:10:33,360
container layer

00:10:31,200 --> 00:10:34,800
are read only so if they are read only

00:10:33,360 --> 00:10:36,480
how do we change files

00:10:34,800 --> 00:10:38,160
well what happens if we use a technique

00:10:36,480 --> 00:10:41,120
called copy on write that this

00:10:38,160 --> 00:10:42,880
provided for us or cal so essentially

00:10:41,120 --> 00:10:45,200
when we want to modify a file

00:10:42,880 --> 00:10:46,079
in the local layers we simply bring a

00:10:45,200 --> 00:10:49,200
copy of it

00:10:46,079 --> 00:10:50,959
up to the upper layer to container layer

00:10:49,200 --> 00:10:53,200
and then from there we can make a copy

00:10:50,959 --> 00:10:55,040
of it there and because the union file

00:10:53,200 --> 00:10:57,360
system allows us to look from the top

00:10:55,040 --> 00:10:59,519
down we see that copy that we've made

00:10:57,360 --> 00:11:01,680
first and so we don't see the lower one

00:10:59,519 --> 00:11:03,040
so that kind of unified presentation of

00:11:01,680 --> 00:11:04,959
those layers together

00:11:03,040 --> 00:11:06,480
allows us to change things at the top

00:11:04,959 --> 00:11:08,959
level the container layer

00:11:06,480 --> 00:11:10,000
without having to modify things on at

00:11:08,959 --> 00:11:11,519
the lower layers

00:11:10,000 --> 00:11:13,360
you can kind of also think of it maybe

00:11:11,519 --> 00:11:14,560
like a path environment variable

00:11:13,360 --> 00:11:17,040
if you've ever looked at the path

00:11:14,560 --> 00:11:18,800
environment variable on your system

00:11:17,040 --> 00:11:20,240
you know the idea is we have the

00:11:18,800 --> 00:11:21,760
components of the path and we start at

00:11:20,240 --> 00:11:23,839
one if we don't find something there

00:11:21,760 --> 00:11:25,360
we look through to the next directory in

00:11:23,839 --> 00:11:25,839
it we find some look there if we don't

00:11:25,360 --> 00:11:27,360
find it

00:11:25,839 --> 00:11:29,440
through the next directory kind of the

00:11:27,360 --> 00:11:31,760
same idea and going through the layers

00:11:29,440 --> 00:11:33,760
other linux app facilities like things

00:11:31,760 --> 00:11:35,519
called c groups and name spaces

00:11:33,760 --> 00:11:37,200
which we'll talk about more in a moment

00:11:35,519 --> 00:11:38,640
keep our containers separate

00:11:37,200 --> 00:11:41,440
the nice thing about this sort of

00:11:38,640 --> 00:11:43,839
arrangement is that our containers then

00:11:41,440 --> 00:11:44,959
can have we can have multiple containers

00:11:43,839 --> 00:11:47,279
based on the same

00:11:44,959 --> 00:11:49,360
image it's very simple then because the

00:11:47,279 --> 00:11:52,000
containers are only a read write layer

00:11:49,360 --> 00:11:53,680
that points to the lower image the image

00:11:52,000 --> 00:11:56,240
stays the same

00:11:53,680 --> 00:11:57,680
read-only immutable across all the

00:11:56,240 --> 00:11:59,360
containers but we can have multiple

00:11:57,680 --> 00:12:00,240
containers layers still pointing and

00:11:59,360 --> 00:12:02,079
using an image

00:12:00,240 --> 00:12:04,079
they can use that union file system to

00:12:02,079 --> 00:12:06,160
get the file and the functionality

00:12:04,079 --> 00:12:08,160
and things that are set up in there so

00:12:06,160 --> 00:12:09,279
even if we multiple containers can share

00:12:08,160 --> 00:12:11,519
access to the same

00:12:09,279 --> 00:12:13,120
underlying image and it simplifies

00:12:11,519 --> 00:12:15,519
rebuilding things as well

00:12:13,120 --> 00:12:16,880
because we only have to have new layers

00:12:15,519 --> 00:12:18,560
if something's changed

00:12:16,880 --> 00:12:20,000
appropriate to that or something's

00:12:18,560 --> 00:12:20,560
changed that needs to be updated in

00:12:20,000 --> 00:12:22,320
there

00:12:20,560 --> 00:12:24,800
it also means that when we go to pull

00:12:22,320 --> 00:12:26,959
images out from a docker repository

00:12:24,800 --> 00:12:29,120
or a docker registry we don't have to

00:12:26,959 --> 00:12:31,200
re-pull layers that we already have

00:12:29,120 --> 00:12:33,120
the layers are stored on the file system

00:12:31,200 --> 00:12:33,760
in var live docker we'll talk more about

00:12:33,120 --> 00:12:35,440
that

00:12:33,760 --> 00:12:36,959
uh in just a few moments kind of get

00:12:35,440 --> 00:12:38,560
into more detail on that

00:12:36,959 --> 00:12:40,720
but essentially docker uses storage

00:12:38,560 --> 00:12:42,079
drivers then to manage the contents of

00:12:40,720 --> 00:12:44,800
the image layers

00:12:42,079 --> 00:12:45,279
and the writable layer so docker itself

00:12:44,800 --> 00:12:46,720
uh

00:12:45,279 --> 00:12:48,480
there's kind of the the public thing

00:12:46,720 --> 00:12:51,120
which is simply a distributed

00:12:48,480 --> 00:12:52,959
application for or an open platform

00:12:51,120 --> 00:12:53,920
tribute applications for developers and

00:12:52,959 --> 00:12:55,839
says admin

00:12:53,920 --> 00:12:57,920
what docker really is it was the first

00:12:55,839 --> 00:12:59,839
application to really wrap

00:12:57,920 --> 00:13:01,600
around the underlying linux container

00:12:59,839 --> 00:13:04,560
technologies linux has had

00:13:01,600 --> 00:13:06,880
containerizing technologies called lxc

00:13:04,560 --> 00:13:08,399
for a long time and docker was one of

00:13:06,880 --> 00:13:10,800
the main ones or the

00:13:08,399 --> 00:13:11,600
the uh probably the first or best ones

00:13:10,800 --> 00:13:13,279
to put

00:13:11,600 --> 00:13:15,279
these wrappers around it wrappers in

00:13:13,279 --> 00:13:15,680
terms of a rest interface that we could

00:13:15,279 --> 00:13:18,720
call

00:13:15,680 --> 00:13:19,760
into to do things a description format

00:13:18,720 --> 00:13:22,000
for containers

00:13:19,760 --> 00:13:23,680
an api for orchestrating things out

00:13:22,000 --> 00:13:26,480
there it kind of put a nice

00:13:23,680 --> 00:13:28,959
formal package around it that was easier

00:13:26,480 --> 00:13:31,839
to use and manage containers

00:13:28,959 --> 00:13:33,200
as we said it's really just leveraging

00:13:31,839 --> 00:13:33,760
three of these functionalities from

00:13:33,200 --> 00:13:35,760
linux

00:13:33,760 --> 00:13:36,959
the union file system the name spaces

00:13:35,760 --> 00:13:38,800
and the c groups

00:13:36,959 --> 00:13:40,880
we saw what the union file system was

00:13:38,800 --> 00:13:42,000
already so we know that kind of allows

00:13:40,880 --> 00:13:44,880
us to drill down

00:13:42,000 --> 00:13:47,440
c groups simply are processes for the

00:13:44,880 --> 00:13:50,399
purpose of system resource management

00:13:47,440 --> 00:13:52,639
so we're simply kind of uh leveraging

00:13:50,399 --> 00:13:53,519
these to share system resources among

00:13:52,639 --> 00:13:55,360
containers

00:13:53,519 --> 00:13:56,880
resources we're interested in would be

00:13:55,360 --> 00:13:59,839
things like cpu memory

00:13:56,880 --> 00:14:02,160
io networking and you can think of a c

00:13:59,839 --> 00:14:04,560
group as grabbing a part of this

00:14:02,160 --> 00:14:06,399
or grabbing a section of this for a

00:14:04,560 --> 00:14:07,519
particular container out there getting a

00:14:06,399 --> 00:14:10,160
section of

00:14:07,519 --> 00:14:10,720
the cpu the memory io the network for to

00:14:10,160 --> 00:14:12,639
use

00:14:10,720 --> 00:14:14,560
so it allows us to track isolate and

00:14:12,639 --> 00:14:15,600
limit resource usage for a set of

00:14:14,560 --> 00:14:17,360
processes

00:14:15,600 --> 00:14:19,199
and that's what we need to run the app

00:14:17,360 --> 00:14:19,600
in our container we need it to have its

00:14:19,199 --> 00:14:22,720
own

00:14:19,600 --> 00:14:24,079
share of those resources we talk about

00:14:22,720 --> 00:14:25,839
namespaces

00:14:24,079 --> 00:14:27,839
they provide isolated instance of a

00:14:25,839 --> 00:14:30,160
global resource out here

00:14:27,839 --> 00:14:32,160
such as a separate instances of it

00:14:30,160 --> 00:14:33,680
appears as a separate instance of these

00:14:32,160 --> 00:14:36,959
kinds of things within

00:14:33,680 --> 00:14:38,800
the namespace so we have ones for

00:14:36,959 --> 00:14:40,240
process ids allow process

00:14:38,800 --> 00:14:43,040
in different containers to have the same

00:14:40,240 --> 00:14:45,199
process id we have ones for

00:14:43,040 --> 00:14:46,880
networking networking interfaces to

00:14:45,199 --> 00:14:48,639
provide isolation of networking

00:14:46,880 --> 00:14:49,680
controllers system resource associated

00:14:48,639 --> 00:14:51,600
with networking

00:14:49,680 --> 00:14:54,160
the idea again of carving out portions

00:14:51,600 --> 00:14:57,760
of this for a container to work with

00:14:54,160 --> 00:14:59,519
a mount point isolates a set of file

00:14:57,760 --> 00:15:00,480
system mount points seen by grouper

00:14:59,519 --> 00:15:02,000
processes

00:15:00,480 --> 00:15:04,000
so they have different views of the

00:15:02,000 --> 00:15:06,079
system hierarchy for example each

00:15:04,000 --> 00:15:06,959
container can have its own temp or var

00:15:06,079 --> 00:15:10,560
directory

00:15:06,959 --> 00:15:12,079
ipc inter-process communication in there

00:15:10,560 --> 00:15:14,000
means that two containers can create

00:15:12,079 --> 00:15:14,880
shared memory segments and semi-fours

00:15:14,000 --> 00:15:16,560
the same name

00:15:14,880 --> 00:15:18,880
but not able to interact again it's kind

00:15:16,560 --> 00:15:21,519
of partitioning off or separating out

00:15:18,880 --> 00:15:23,120
of these kinds of resources the user

00:15:21,519 --> 00:15:26,320
area

00:15:23,120 --> 00:15:27,360
and also the uts or unix time sharing

00:15:26,320 --> 00:15:28,800
services in there

00:15:27,360 --> 00:15:30,880
allows his container to have his own

00:15:28,800 --> 00:15:32,720
host name and nis domain name

00:15:30,880 --> 00:15:34,639
so again the overall theme of this idea

00:15:32,720 --> 00:15:35,600
of carving out system resources and

00:15:34,639 --> 00:15:38,959
portions of it

00:15:35,600 --> 00:15:40,000
for containers to use we talked about a

00:15:38,959 --> 00:15:41,759
docker file as being

00:15:40,000 --> 00:15:44,160
the set of instructions that we want to

00:15:41,759 --> 00:15:46,639
use or tells us how to create the image

00:15:44,160 --> 00:15:47,920
from that we see some examples here has

00:15:46,639 --> 00:15:50,160
a format in there

00:15:47,920 --> 00:15:52,480
when we talk about chain taking a docker

00:15:50,160 --> 00:15:54,079
file creating an image to a container

00:15:52,480 --> 00:15:56,000
we essentially take the docker file the

00:15:54,079 --> 00:15:57,199
set of instructions run a docker build

00:15:56,000 --> 00:15:59,040
command through it

00:15:57,199 --> 00:16:01,759
it executes the instructions pulling

00:15:59,040 --> 00:16:03,519
down any layers that we need any pieces

00:16:01,759 --> 00:16:05,839
and then we can run it to produce that

00:16:03,519 --> 00:16:07,600
container which again just has that read

00:16:05,839 --> 00:16:09,680
writeable layer on it so that's the kind

00:16:07,600 --> 00:16:11,519
of overall flow

00:16:09,680 --> 00:16:13,680
docker commands lots of commands out

00:16:11,519 --> 00:16:15,920
here to build to build images to look at

00:16:13,680 --> 00:16:19,040
the images remove images pools

00:16:15,920 --> 00:16:20,880
things out of repositories and so on

00:16:19,040 --> 00:16:22,240
so how do we think about all this well

00:16:20,880 --> 00:16:23,680
i've alluded to it already

00:16:22,240 --> 00:16:25,360
think about the analogy of installing

00:16:23,680 --> 00:16:26,639
software on a machine than provisioning

00:16:25,360 --> 00:16:29,040
systems for users

00:16:26,639 --> 00:16:29,680
if we have a system and we install and

00:16:29,040 --> 00:16:31,360
we

00:16:29,680 --> 00:16:32,800
layers of software on the disk for

00:16:31,360 --> 00:16:35,360
example the operating system

00:16:32,800 --> 00:16:37,440
applications maybe anti-virus we have

00:16:35,360 --> 00:16:39,120
provisioned a disk image we created an

00:16:37,440 --> 00:16:40,720
image that has all the software

00:16:39,120 --> 00:16:42,560
provisioned and ready to use

00:16:40,720 --> 00:16:44,480
we could then take that and we could

00:16:42,560 --> 00:16:46,639
recreate it on a system

00:16:44,480 --> 00:16:48,399
by starting it by making a copy of that

00:16:46,639 --> 00:16:49,759
image or using that image

00:16:48,399 --> 00:16:52,240
and we could do it on another one as

00:16:49,759 --> 00:16:53,920
well now when we talk about

00:16:52,240 --> 00:16:55,920
provisioning a machine a lot of times

00:16:53,920 --> 00:16:57,839
we've set up the final thing we do

00:16:55,920 --> 00:16:59,600
is setting up the user space the user

00:16:57,839 --> 00:17:00,320
space where they write files change

00:16:59,600 --> 00:17:02,959
files

00:17:00,320 --> 00:17:04,079
and so on and then that simulates the

00:17:02,959 --> 00:17:06,240
kind of container

00:17:04,079 --> 00:17:07,919
layer out there the read write layer but

00:17:06,240 --> 00:17:11,199
we could also take that image again

00:17:07,919 --> 00:17:13,120
existing image and build another pc

00:17:11,199 --> 00:17:14,880
off of it with another user area out

00:17:13,120 --> 00:17:16,559
there so you might think of this image

00:17:14,880 --> 00:17:18,079
as kind of like a docker image

00:17:16,559 --> 00:17:20,480
that has that provisioned set of

00:17:18,079 --> 00:17:21,039
software configured and set up as we

00:17:20,480 --> 00:17:22,720
need it

00:17:21,039 --> 00:17:24,640
that we can use the basis and you might

00:17:22,720 --> 00:17:25,839
think of the container as being that

00:17:24,640 --> 00:17:28,160
system that then has

00:17:25,839 --> 00:17:30,400
the user area where we can read and

00:17:28,160 --> 00:17:32,160
write and things on top of that so if

00:17:30,400 --> 00:17:34,080
that's a useful analogy

00:17:32,160 --> 00:17:35,840
feel free to adopt it let's dive a

00:17:34,080 --> 00:17:37,280
little bit deeper into talking about

00:17:35,840 --> 00:17:39,360
layers because that's really key to

00:17:37,280 --> 00:17:43,200
understanding more of how

00:17:39,360 --> 00:17:44,960
docker works and how containers work

00:17:43,200 --> 00:17:46,960
containers can reuse layers as we

00:17:44,960 --> 00:17:49,039
mentioned so if they already exist in a

00:17:46,960 --> 00:17:51,039
docker file structure so when we bring

00:17:49,039 --> 00:17:52,640
something down we pull an image we get a

00:17:51,039 --> 00:17:53,919
set of layers down the layers that went

00:17:52,640 --> 00:17:56,320
into making that image

00:17:53,919 --> 00:17:57,440
if those layers happen to be used by

00:17:56,320 --> 00:17:59,919
another

00:17:57,440 --> 00:18:01,280
application we can actually do when we

00:17:59,919 --> 00:18:03,280
do a docker pull

00:18:01,280 --> 00:18:04,320
up here we'll see that the layer can

00:18:03,280 --> 00:18:06,320
already exist

00:18:04,320 --> 00:18:07,760
so docker is taking these layers storing

00:18:06,320 --> 00:18:09,600
them out in the file system

00:18:07,760 --> 00:18:10,799
and then if they need it be accessed if

00:18:09,600 --> 00:18:12,640
it already has it

00:18:10,799 --> 00:18:15,039
then it can just use the same layer

00:18:12,640 --> 00:18:15,520
again because the image is read only and

00:18:15,039 --> 00:18:18,000
the

00:18:15,520 --> 00:18:18,640
the containers just read right on top of

00:18:18,000 --> 00:18:21,120
that

00:18:18,640 --> 00:18:22,720
now before docker version 110 when we

00:18:21,120 --> 00:18:24,480
actually looked at the layers and the

00:18:22,720 --> 00:18:25,360
names of them and what was stored in the

00:18:24,480 --> 00:18:26,799
file system

00:18:25,360 --> 00:18:29,280
it was pretty much a one-to-one

00:18:26,799 --> 00:18:30,400
definition in fact what a layer is is

00:18:29,280 --> 00:18:32,720
simply a delta

00:18:30,400 --> 00:18:34,480
or diff that results with commands are

00:18:32,720 --> 00:18:36,160
running so when i run a command

00:18:34,480 --> 00:18:37,600
it's think of it almost like a separate

00:18:36,160 --> 00:18:39,200
directory over here

00:18:37,600 --> 00:18:40,880
that just has the changes that i

00:18:39,200 --> 00:18:42,960
executed in that step

00:18:40,880 --> 00:18:45,280
and then docker is keeping track of

00:18:42,960 --> 00:18:47,440
those directories as what we call

00:18:45,280 --> 00:18:49,120
layers in there you'll see the diff or

00:18:47,440 --> 00:18:49,919
what's changed what was done differently

00:18:49,120 --> 00:18:52,240
in that

00:18:49,919 --> 00:18:53,919
then prior to docker 110 the images and

00:18:52,240 --> 00:18:54,559
layers were synonymous what i mean by

00:18:53,919 --> 00:18:56,400
that

00:18:54,559 --> 00:18:58,720
is if i looked at the list of layers in

00:18:56,400 --> 00:18:59,120
an image i would see the same sort of

00:18:58,720 --> 00:19:01,039
thing

00:18:59,120 --> 00:19:03,440
out in the file system with the same

00:19:01,039 --> 00:19:04,160
names i would see the same set of pieces

00:19:03,440 --> 00:19:05,760
out there

00:19:04,160 --> 00:19:07,440
if i were to look at it with the docker

00:19:05,760 --> 00:19:08,320
inspect to see it i'd see the same

00:19:07,440 --> 00:19:11,520
things

00:19:08,320 --> 00:19:13,760
but after 110 they went moved to what's

00:19:11,520 --> 00:19:16,160
called a content addressable thing

00:19:13,760 --> 00:19:17,679
the idea here was that having those kind

00:19:16,160 --> 00:19:19,600
of one-to-one things

00:19:17,679 --> 00:19:21,039
was a little bit of a security risk it

00:19:19,600 --> 00:19:22,240
had challenges with

00:19:21,039 --> 00:19:24,080
how to tell if the image had been

00:19:22,240 --> 00:19:26,240
tampered with during push pull

00:19:24,080 --> 00:19:28,000
so the new approach and other problems

00:19:26,240 --> 00:19:30,640
but the new approach is called contra

00:19:28,000 --> 00:19:32,320
content addressable ids which is simply

00:19:30,640 --> 00:19:35,280
a fancy way of saying

00:19:32,320 --> 00:19:37,039
we have a different way of naming our

00:19:35,280 --> 00:19:38,960
layers

00:19:37,039 --> 00:19:40,640
layers don't have any affiliation or

00:19:38,960 --> 00:19:40,960
notion of an image if you look at what's

00:19:40,640 --> 00:19:44,240
in an

00:19:40,960 --> 00:19:44,559
image in there you have uh you would

00:19:44,240 --> 00:19:47,919
have

00:19:44,559 --> 00:19:50,480
information about the sha-256 in there

00:19:47,919 --> 00:19:51,120
layers are identified by the digest of

00:19:50,480 --> 00:19:53,919
the form

00:19:51,120 --> 00:19:55,280
algorithm hex value all that means is

00:19:53,919 --> 00:19:57,760
we're using a hash

00:19:55,280 --> 00:19:59,600
we're using a hash here the hex value is

00:19:57,760 --> 00:20:01,280
the string computed from applying an

00:19:59,600 --> 00:20:03,440
algorithm to the layer's contents

00:20:01,280 --> 00:20:05,280
we hash the contents of that remember

00:20:03,440 --> 00:20:06,320
that i said that what's in a layer is

00:20:05,280 --> 00:20:08,159
the difference

00:20:06,320 --> 00:20:10,559
between what was done between that and

00:20:08,159 --> 00:20:12,559
the previous layer if i added a file if

00:20:10,559 --> 00:20:14,159
i did it some other configuration

00:20:12,559 --> 00:20:16,320
that's stored in that directory that

00:20:14,159 --> 00:20:18,559
represents that layer we can then run a

00:20:16,320 --> 00:20:19,120
checksum or a hash computation against

00:20:18,559 --> 00:20:20,720
that

00:20:19,120 --> 00:20:22,159
there are different hash kinds of

00:20:20,720 --> 00:20:22,799
algorithms but what we're using right

00:20:22,159 --> 00:20:25,679
now

00:20:22,799 --> 00:20:28,240
is called sha-256 secure hashing

00:20:25,679 --> 00:20:31,039
algorithm one our secure hash algorithm

00:20:28,240 --> 00:20:31,919
256. if you've ever heard of a md5

00:20:31,039 --> 00:20:34,799
checksum

00:20:31,919 --> 00:20:37,200
it's a beyond that but same idea we do a

00:20:34,799 --> 00:20:39,919
checksum across the layers contents

00:20:37,200 --> 00:20:41,360
and then the sha 256 and then the

00:20:39,919 --> 00:20:44,480
checksum becomes

00:20:41,360 --> 00:20:45,760
an identifier in there for that

00:20:44,480 --> 00:20:48,480
particular layer

00:20:45,760 --> 00:20:49,360
so if we were to do a docker inspect now

00:20:48,480 --> 00:20:51,760
what we would see

00:20:49,360 --> 00:20:52,880
is this sort of digest representation in

00:20:51,760 --> 00:20:54,840
the layers section

00:20:52,880 --> 00:20:56,159
of the output of docker and spec the

00:20:54,840 --> 00:20:58,080
sha-256

00:20:56,159 --> 00:21:00,400
and then the digest of that because we

00:20:58,080 --> 00:21:02,080
have that checksum now that's computed

00:21:00,400 --> 00:21:04,080
it's very easy to see if something's

00:21:02,080 --> 00:21:06,000
changed or been tampered with or such

00:21:04,080 --> 00:21:07,919
as opposed to just the same identifier

00:21:06,000 --> 00:21:09,919
that we had before

00:21:07,919 --> 00:21:12,080
so a docker image also has a

00:21:09,919 --> 00:21:15,120
configuration object which includes a

00:21:12,080 --> 00:21:15,679
list of layer digest and the actual

00:21:15,120 --> 00:21:18,960
overall

00:21:15,679 --> 00:21:21,440
image id is the computed hash

00:21:18,960 --> 00:21:23,039
of that configuration object so a

00:21:21,440 --> 00:21:23,760
configuration object will list all the

00:21:23,039 --> 00:21:26,080
pieces

00:21:23,760 --> 00:21:27,280
they run a hash on that and that becomes

00:21:26,080 --> 00:21:30,240
the id

00:21:27,280 --> 00:21:32,480
of the image itself if you want to know

00:21:30,240 --> 00:21:34,000
more about what docker is doing kind of

00:21:32,480 --> 00:21:35,840
like where it's storing things what

00:21:34,000 --> 00:21:38,000
algorithm and such it's using

00:21:35,840 --> 00:21:39,919
you can look at docker info and it'll be

00:21:38,000 --> 00:21:41,200
two pieces of information in there

00:21:39,919 --> 00:21:44,159
in this case that we're particularly

00:21:41,200 --> 00:21:47,440
interested in the storage driver whoops

00:21:44,159 --> 00:21:49,039
sorry a storage driver which is we'll

00:21:47,440 --> 00:21:51,840
get into more a little bit

00:21:49,039 --> 00:21:53,760
called overlay 2 in this case the

00:21:51,840 --> 00:21:54,880
overlay 2 storage drivers one of several

00:21:53,760 --> 00:21:56,640
that are available

00:21:54,880 --> 00:21:58,400
and then notice down here we have the

00:21:56,640 --> 00:22:00,000
docker root directory which says where

00:21:58,400 --> 00:22:01,039
does it store the layers where does it

00:22:00,000 --> 00:22:03,520
do its work

00:22:01,039 --> 00:22:05,440
var live docker is going to be pretty

00:22:03,520 --> 00:22:07,440
much the place and everything unless you

00:22:05,440 --> 00:22:10,640
specifically do something to change it

00:22:07,440 --> 00:22:12,080
even on the mac in there and on windows

00:22:10,640 --> 00:22:14,880
you're typically using

00:22:12,080 --> 00:22:17,200
a virtual machine of some kind in there

00:22:14,880 --> 00:22:18,640
that's running and has a root into var

00:22:17,200 --> 00:22:20,640
live docker inside of the virtual

00:22:18,640 --> 00:22:22,080
machine there are multiple approaches on

00:22:20,640 --> 00:22:23,120
windows though you could have native

00:22:22,080 --> 00:22:24,720
windows container

00:22:23,120 --> 00:22:26,240
or you could do linux containers which

00:22:24,720 --> 00:22:29,280
would use again a hyper-v

00:22:26,240 --> 00:22:32,000
a virtualization mechanism um in there

00:22:29,280 --> 00:22:33,039
which uses the location like the var

00:22:32,000 --> 00:22:34,720
live docker

00:22:33,039 --> 00:22:35,919
now the root folder if you were to look

00:22:34,720 --> 00:22:37,440
out there what's under it you would see

00:22:35,919 --> 00:22:38,159
lots of subfolders things like

00:22:37,440 --> 00:22:41,440
containers

00:22:38,159 --> 00:22:42,960
images network uh overlay two plugins

00:22:41,440 --> 00:22:44,000
all this we wanna have time and this to

00:22:42,960 --> 00:22:45,520
go into all of it

00:22:44,000 --> 00:22:47,600
but you can explore more if you're

00:22:45,520 --> 00:22:49,200
interested in this you can get an idea

00:22:47,600 --> 00:22:50,000
of all the kinds of things that is

00:22:49,200 --> 00:22:52,159
tracking

00:22:50,000 --> 00:22:53,440
docker is tracking to keep up with how

00:22:52,159 --> 00:22:55,360
we put layers

00:22:53,440 --> 00:22:57,120
and images and containers together and

00:22:55,360 --> 00:22:59,360
how we keep track of them

00:22:57,120 --> 00:23:01,600
storage drivers also known uh

00:22:59,360 --> 00:23:04,080
traditionally kind of as graph drivers

00:23:01,600 --> 00:23:05,600
in there because uh the it kind of

00:23:04,080 --> 00:23:07,600
creates an image graph

00:23:05,600 --> 00:23:09,440
of this it's a local instance of a

00:23:07,600 --> 00:23:10,000
docker engine their local insta docker

00:23:09,440 --> 00:23:12,559
engine

00:23:10,000 --> 00:23:14,640
has a cache of image layers as we pull

00:23:12,559 --> 00:23:16,159
down these are done by from docker pool

00:23:14,640 --> 00:23:18,080
docker build etc

00:23:16,159 --> 00:23:19,919
it brings down these layers they're

00:23:18,080 --> 00:23:22,080
stored out there in var live docker for

00:23:19,919 --> 00:23:24,480
images to combine together

00:23:22,080 --> 00:23:26,720
to create images into using containers

00:23:24,480 --> 00:23:28,159
but we need a driver to manage all of

00:23:26,720 --> 00:23:29,039
these and advantage how they're put

00:23:28,159 --> 00:23:31,120
together

00:23:29,039 --> 00:23:32,960
how it looks how it uses that kind of

00:23:31,120 --> 00:23:34,880
union file system

00:23:32,960 --> 00:23:36,080
or other methods to kind of layer these

00:23:34,880 --> 00:23:38,880
things together

00:23:36,080 --> 00:23:40,880
so we need to have this driver to mount

00:23:38,880 --> 00:23:41,760
the layers into this consolidated root

00:23:40,880 --> 00:23:43,600
file system

00:23:41,760 --> 00:23:45,440
so we can get that unified view of these

00:23:43,600 --> 00:23:47,120
things stacked on each other

00:23:45,440 --> 00:23:48,400
and it creates a kind of an image graph

00:23:47,120 --> 00:23:49,760
if you think about it kind of weaving

00:23:48,400 --> 00:23:52,400
through the different layers

00:23:49,760 --> 00:23:52,880
so these were also called graph drivers

00:23:52,400 --> 00:23:55,520
in time

00:23:52,880 --> 00:23:56,640
past some storage driver examples very

00:23:55,520 --> 00:23:59,520
quickly here

00:23:56,640 --> 00:24:01,120
the main ones aufs another union file

00:23:59,520 --> 00:24:04,400
system are also called

00:24:01,120 --> 00:24:06,159
just union file system this is the otis

00:24:04,400 --> 00:24:07,039
the most mature one it's been around for

00:24:06,159 --> 00:24:09,360
a long time

00:24:07,039 --> 00:24:11,120
and prior to overlay and overlay 2 it

00:24:09,360 --> 00:24:13,440
was the one that was used

00:24:11,120 --> 00:24:14,559
it primarily worked on or was used on

00:24:13,440 --> 00:24:17,440
certain debian

00:24:14,559 --> 00:24:19,279
linux distros out there it's fast to

00:24:17,440 --> 00:24:21,520
start up efficient resources

00:24:19,279 --> 00:24:22,559
but it hasn't ever really been fully

00:24:21,520 --> 00:24:25,840
accepted never really

00:24:22,559 --> 00:24:27,200
merged into the mainline linux there

00:24:25,840 --> 00:24:28,640
but it's still around quite a bit

00:24:27,200 --> 00:24:30,159
especially if you're using i think it's

00:24:28,640 --> 00:24:32,799
before like uh

00:24:30,159 --> 00:24:33,760
ubuntu 1806 some particular versions of

00:24:32,799 --> 00:24:36,880
the older

00:24:33,760 --> 00:24:38,640
systems out there uh there's one called

00:24:36,880 --> 00:24:40,640
btrf this one is a b

00:24:38,640 --> 00:24:41,919
tree file system this one's a little

00:24:40,640 --> 00:24:42,880
different it doesn't really use the

00:24:41,919 --> 00:24:45,200
whole

00:24:42,880 --> 00:24:46,080
traditional union file system and stuff

00:24:45,200 --> 00:24:48,960
it uses what's called

00:24:46,080 --> 00:24:51,120
snapshots being able to take snapshots

00:24:48,960 --> 00:24:53,120
of the file system at a point in time

00:24:51,120 --> 00:24:54,320
this is one where the driver is really

00:24:53,120 --> 00:24:58,640
utilizing

00:24:54,320 --> 00:25:01,200
the operating systems or file systems

00:24:58,640 --> 00:25:03,279
functionality rather than things that

00:25:01,200 --> 00:25:05,200
sit on top of the file system

00:25:03,279 --> 00:25:06,320
so it has performance impact higher

00:25:05,200 --> 00:25:08,960
memory usage

00:25:06,320 --> 00:25:10,320
considered kind of buggy uh just

00:25:08,960 --> 00:25:12,799
mentioned here the one at the bottom i

00:25:10,320 --> 00:25:14,240
got these in alphabetical order but zfs

00:25:12,799 --> 00:25:16,960
similar kind of thing use those

00:25:14,240 --> 00:25:20,400
snapshots out there to manage things

00:25:16,960 --> 00:25:23,520
interesting one called device mapper

00:25:20,400 --> 00:25:25,120
device mapper operates on storage blocks

00:25:23,520 --> 00:25:27,760
or disk blocks out there at the

00:25:25,120 --> 00:25:29,840
the block level uh and so it kind of

00:25:27,760 --> 00:25:31,760
manages the blocks rather than files

00:25:29,840 --> 00:25:34,240
it's not file based

00:25:31,760 --> 00:25:36,880
it's former default for syntax centos

00:25:34,240 --> 00:25:39,360
and red hat linux before overlay 2.

00:25:36,880 --> 00:25:41,120
overlay and overlay 2 are use the

00:25:39,360 --> 00:25:44,159
overlay file system

00:25:41,120 --> 00:25:46,000
of kernel extension basically we'll talk

00:25:44,159 --> 00:25:47,039
more about overlay 2 in a few moments

00:25:46,000 --> 00:25:50,240
we'll go into it

00:25:47,039 --> 00:25:51,840
these are faster simpler than aufs

00:25:50,240 --> 00:25:53,830
the challenge with overlay why there's

00:25:51,840 --> 00:25:56,240
an overlay 2 overlay

00:25:53,830 --> 00:25:58,240
[Music]

00:25:56,240 --> 00:25:59,279
conditions where it ran out of inode's

00:25:58,240 --> 00:26:01,840
operating system

00:25:59,279 --> 00:26:03,919
an inode is a thing that contains

00:26:01,840 --> 00:26:05,600
metadata for each file on a system

00:26:03,919 --> 00:26:07,279
and the count of the i knows is hard

00:26:05,600 --> 00:26:09,440
coded in the operating system

00:26:07,279 --> 00:26:11,200
so because the way overlay 2 was done it

00:26:09,440 --> 00:26:13,120
was good but it would eventually

00:26:11,200 --> 00:26:14,320
have problems with i know say invented

00:26:13,120 --> 00:26:16,320
overlay 2

00:26:14,320 --> 00:26:18,159
which is a little nicer with that and

00:26:16,320 --> 00:26:20,080
finally there's one called vfs which you

00:26:18,159 --> 00:26:21,520
probably will never hear of but it's a

00:26:20,080 --> 00:26:24,480
simple approach

00:26:21,520 --> 00:26:25,279
for kind of more developing docker dev

00:26:24,480 --> 00:26:27,440
and testing

00:26:25,279 --> 00:26:28,799
it simply makes copies of everything it

00:26:27,440 --> 00:26:31,600
doesn't leverage

00:26:28,799 --> 00:26:33,120
uh the same images out there it simply

00:26:31,600 --> 00:26:33,600
makes a cut whenever something needs

00:26:33,120 --> 00:26:35,520
change

00:26:33,600 --> 00:26:37,200
doesn't do the copy on right it simply

00:26:35,520 --> 00:26:38,000
makes another copy of the layer so it's

00:26:37,200 --> 00:26:41,039
not

00:26:38,000 --> 00:26:42,400
very useful in most respects but it you

00:26:41,039 --> 00:26:44,799
know it's kind of the

00:26:42,400 --> 00:26:46,400
brute force method there useful for

00:26:44,799 --> 00:26:49,039
developing sometimes

00:26:46,400 --> 00:26:51,200
docker itself storage driver tech we've

00:26:49,039 --> 00:26:53,200
alluded to these the union file system

00:26:51,200 --> 00:26:55,039
is an overlay combines multiple mount

00:26:53,200 --> 00:26:55,919
points into one kind of layers things

00:26:55,039 --> 00:26:58,720
together

00:26:55,919 --> 00:26:59,360
in there snapshots are used by the file

00:26:58,720 --> 00:27:02,960
systems

00:26:59,360 --> 00:27:03,440
uh like the btrf and zfs they do a point

00:27:02,960 --> 00:27:05,840
in time

00:27:03,440 --> 00:27:08,240
copy of things they're created quite

00:27:05,840 --> 00:27:10,320
quickly but consume more space over time

00:27:08,240 --> 00:27:11,279
and then the odd one device mapper which

00:27:10,320 --> 00:27:14,400
actually uses

00:27:11,279 --> 00:27:16,400
uh mapping physical blocks on the disk

00:27:14,400 --> 00:27:17,520
the higher level virtual blocks which

00:27:16,400 --> 00:27:19,600
ends up kind of

00:27:17,520 --> 00:27:21,520
being a waste of some space because it

00:27:19,600 --> 00:27:23,840
tends to allocate blocks and it carries

00:27:21,520 --> 00:27:26,880
kind of sparse files out there

00:27:23,840 --> 00:27:28,799
uh looking at

00:27:26,880 --> 00:27:30,399
the a of a ufs model i'll just go

00:27:28,799 --> 00:27:31,360
through these very quickly again otis

00:27:30,399 --> 00:27:33,520
but most

00:27:31,360 --> 00:27:35,760
mature if you look on these diagrams

00:27:33,520 --> 00:27:37,520
this is the docker concepts on the right

00:27:35,760 --> 00:27:39,919
the image and base layers the container

00:27:37,520 --> 00:27:40,399
layer on the the on the left rather on

00:27:39,919 --> 00:27:43,200
the right

00:27:40,399 --> 00:27:44,880
is the particular file drivers uh

00:27:43,200 --> 00:27:47,039
concepts the au fs

00:27:44,880 --> 00:27:48,080
afs uses something called branches but

00:27:47,039 --> 00:27:50,559
it's essentially the same

00:27:48,080 --> 00:27:52,559
idea we find the files where they exist

00:27:50,559 --> 00:27:55,279
down there we have a container level

00:27:52,559 --> 00:27:56,000
where we have a mount point if we delete

00:27:55,279 --> 00:27:57,760
something

00:27:56,000 --> 00:27:59,760
it actually puts what's called a

00:27:57,760 --> 00:28:01,600
whiteout file

00:27:59,760 --> 00:28:03,279
in there or if it's a directory opaque

00:28:01,600 --> 00:28:04,799
it puts a block in there

00:28:03,279 --> 00:28:06,559
so that you don't see the lower one

00:28:04,799 --> 00:28:09,440
essentially it's a special file

00:28:06,559 --> 00:28:12,240
to indicate that the it obscures the

00:28:09,440 --> 00:28:14,799
view down lower to it

00:28:12,240 --> 00:28:16,399
overlay model has a single lower overlay

00:28:14,799 --> 00:28:19,600
when we talk about overlay

00:28:16,399 --> 00:28:21,600
we talk about essentially a lower

00:28:19,600 --> 00:28:23,039
directory an upper directory and a merge

00:28:21,600 --> 00:28:24,480
directory now you think about you say

00:28:23,039 --> 00:28:26,399
well how can i only have three layers in

00:28:24,480 --> 00:28:28,960
there

00:28:26,399 --> 00:28:30,159
well the way this works with overlay is

00:28:28,960 --> 00:28:32,960
the merged area

00:28:30,159 --> 00:28:33,840
again is the kind of common view into it

00:28:32,960 --> 00:28:36,399
upper dir

00:28:33,840 --> 00:28:38,000
is kind of like our uh container layer

00:28:36,399 --> 00:28:40,480
where we make changes and stuff

00:28:38,000 --> 00:28:41,760
then lower dirt is everything else but

00:28:40,480 --> 00:28:44,080
the overlay

00:28:41,760 --> 00:28:44,799
kernel piece there combines these three

00:28:44,080 --> 00:28:46,159
together

00:28:44,799 --> 00:28:48,000
but since there's only three what they

00:28:46,159 --> 00:28:48,640
had to do was they had to basically do

00:28:48,000 --> 00:28:51,760
what's called

00:28:48,640 --> 00:28:52,720
links hard links of directories into

00:28:51,760 --> 00:28:55,760
this lower dirt

00:28:52,720 --> 00:28:57,600
so this lower area here this layer gets

00:28:55,760 --> 00:28:59,120
hard linked out to a bunch of others

00:28:57,600 --> 00:29:00,960
which make up the layers

00:28:59,120 --> 00:29:03,200
and you can start to think about if i'm

00:29:00,960 --> 00:29:04,559
doing a bunch of hard links on the

00:29:03,200 --> 00:29:06,880
operating system

00:29:04,559 --> 00:29:09,679
that uses up those eye nodes and starts

00:29:06,880 --> 00:29:13,679
to get very messy over time

00:29:09,679 --> 00:29:15,200
so this was the overlay implementation

00:29:13,679 --> 00:29:16,799
overlay 2 which we'll talk about a

00:29:15,200 --> 00:29:19,200
little bit more detail

00:29:16,799 --> 00:29:21,120
here in the last part of the session uh

00:29:19,200 --> 00:29:22,000
fixed some of the problems by having

00:29:21,120 --> 00:29:24,480
support

00:29:22,000 --> 00:29:27,279
for this lower directory to essentially

00:29:24,480 --> 00:29:28,720
have up to 128 layers or to know about

00:29:27,279 --> 00:29:30,799
128 layers

00:29:28,720 --> 00:29:32,799
it uses shorter links to connect into

00:29:30,799 --> 00:29:33,679
that but the essential idea is kind of

00:29:32,799 --> 00:29:36,640
the same

00:29:33,679 --> 00:29:38,559
we have an upper directory and we have

00:29:36,640 --> 00:29:39,520
the container layer we have a lower

00:29:38,559 --> 00:29:41,679
layer here

00:29:39,520 --> 00:29:43,840
a couple lower layers and then we can

00:29:41,679 --> 00:29:45,600
have up to 128

00:29:43,840 --> 00:29:47,440
uh layers here that it knows how to

00:29:45,600 --> 00:29:48,080
natively manage they're not hard

00:29:47,440 --> 00:29:50,080
linkedin

00:29:48,080 --> 00:29:52,320
there are some linkedin they have links

00:29:50,080 --> 00:29:55,200
back to it so essentially uses like 100

00:29:52,320 --> 00:29:56,720
has support for up to 128 if you ever

00:29:55,200 --> 00:29:58,720
really gotten very

00:29:56,720 --> 00:30:00,960
big with docker and trying and hitting

00:29:58,720 --> 00:30:02,720
that you may have hit that 128 limits

00:30:00,960 --> 00:30:05,919
depending on the version you reuse

00:30:02,720 --> 00:30:07,440
128 layers and again if we have

00:30:05,919 --> 00:30:08,480
something that blocks out the file

00:30:07,440 --> 00:30:11,600
delete a file

00:30:08,480 --> 00:30:12,480
we just put a whiteout file there in

00:30:11,600 --> 00:30:14,240
place of it

00:30:12,480 --> 00:30:15,840
device mapper is the one we mentioned

00:30:14,240 --> 00:30:18,320
that uses the

00:30:15,840 --> 00:30:19,440
blocks on the device the blocks on disk

00:30:18,320 --> 00:30:21,440
there to manage it

00:30:19,440 --> 00:30:23,120
it takes blocks from different layers

00:30:21,440 --> 00:30:25,039
there for different snapshots these

00:30:23,120 --> 00:30:28,559
point in time copies of things

00:30:25,039 --> 00:30:32,320
and uses them to manage and then the bt

00:30:28,559 --> 00:30:35,520
rf or the b3 file system or the zfs

00:30:32,320 --> 00:30:36,960
model uses snapshots out there to

00:30:35,520 --> 00:30:38,399
implement the layers instead of

00:30:36,960 --> 00:30:39,440
directory so you're looking through

00:30:38,399 --> 00:30:41,520
snapshots

00:30:39,440 --> 00:30:44,320
but same kind of ideas different sub

00:30:41,520 --> 00:30:46,480
volumes snapshots out there

00:30:44,320 --> 00:30:48,320
all right so for the last part of the

00:30:46,480 --> 00:30:49,120
session let's dive a little deeper into

00:30:48,320 --> 00:30:52,640
overlay 2.

00:30:49,120 --> 00:30:53,760
overlay 2 has become now the favorite or

00:30:52,640 --> 00:30:56,559
the default

00:30:53,760 --> 00:30:58,640
uh storage driver that's used in newer

00:30:56,559 --> 00:31:01,600
versions of docker because it gets

00:30:58,640 --> 00:31:02,640
is faster than others better performance

00:31:01,600 --> 00:31:04,880
in general

00:31:02,640 --> 00:31:06,240
and does not suffer from the inode

00:31:04,880 --> 00:31:07,200
problem that we talked about with

00:31:06,240 --> 00:31:08,799
overlay

00:31:07,200 --> 00:31:10,640
so we talked about overlay file system

00:31:08,799 --> 00:31:13,039
directories we mentioned that

00:31:10,640 --> 00:31:14,960
we have lower dir which is our read-only

00:31:13,039 --> 00:31:18,159
image layers all the layers

00:31:14,960 --> 00:31:19,039
except for that upper level one then we

00:31:18,159 --> 00:31:21,120
have what's called

00:31:19,039 --> 00:31:22,720
upper dirt these are just little uh

00:31:21,120 --> 00:31:24,080
terms here

00:31:22,720 --> 00:31:26,000
read write layer where changes are

00:31:24,080 --> 00:31:27,840
written this is like our container layer

00:31:26,000 --> 00:31:30,720
then we have the merge dir if we think

00:31:27,840 --> 00:31:33,760
about these as directories out there

00:31:30,720 --> 00:31:35,679
a merged view of all the layers

00:31:33,760 --> 00:31:36,880
uh now when you look at the lower dire

00:31:35,679 --> 00:31:40,320
that's all the layers

00:31:36,880 --> 00:31:42,880
in that lower part of the image there

00:31:40,320 --> 00:31:44,559
they'll be listed out by separated by

00:31:42,880 --> 00:31:45,919
colon from the top most to the bottom

00:31:44,559 --> 00:31:46,720
most i'll show you some pictures in a

00:31:45,919 --> 00:31:48,000
moment

00:31:46,720 --> 00:31:51,039
the working director is just used

00:31:48,000 --> 00:31:52,960
specifically by the underlying linux

00:31:51,039 --> 00:31:54,320
extension here for the linux overlay

00:31:52,960 --> 00:31:56,240
file system

00:31:54,320 --> 00:31:57,919
and you could actually just to kind of

00:31:56,240 --> 00:32:00,000
give you a reference point

00:31:57,919 --> 00:32:03,039
if you were working in linux you could

00:32:00,000 --> 00:32:05,840
actually use overlay the overlay fs

00:32:03,039 --> 00:32:08,000
outside of docker itself for example i

00:32:05,840 --> 00:32:09,440
could do a mount and mount in an overlay

00:32:08,000 --> 00:32:11,120
directory

00:32:09,440 --> 00:32:13,440
specify a different directory a physical

00:32:11,120 --> 00:32:14,880
directory called base for the lower dir

00:32:13,440 --> 00:32:17,279
a directory called diff for the upper

00:32:14,880 --> 00:32:18,399
dir and so forth and i can actually then

00:32:17,279 --> 00:32:20,720
create my on

00:32:18,399 --> 00:32:22,559
my own overlay model overlay here

00:32:20,720 --> 00:32:24,240
meaning just stacking those together

00:32:22,559 --> 00:32:25,440
and being able to look through them so

00:32:24,240 --> 00:32:27,200
you can actually do that and then you

00:32:25,440 --> 00:32:29,200
can make changes in the upper dir

00:32:27,200 --> 00:32:31,039
and see it kind of block files through

00:32:29,200 --> 00:32:32,880
that or find files lower

00:32:31,039 --> 00:32:34,240
so all kinds of you can actually

00:32:32,880 --> 00:32:36,000
implement this yourself

00:32:34,240 --> 00:32:37,440
with a command like this using the

00:32:36,000 --> 00:32:39,440
overlay

00:32:37,440 --> 00:32:40,480
mounts type here that's really what

00:32:39,440 --> 00:32:42,799
docker is doing

00:32:40,480 --> 00:32:44,159
it's using that overlay mount or the

00:32:42,799 --> 00:32:45,840
overlay type there

00:32:44,159 --> 00:32:47,840
to be able to connect up these

00:32:45,840 --> 00:32:49,360
directories stack them on top and

00:32:47,840 --> 00:32:50,960
provide a unified view

00:32:49,360 --> 00:32:52,720
so when we pull an image we get

00:32:50,960 --> 00:32:54,880
different layers down

00:32:52,720 --> 00:32:55,919
like if we pull the ubuntu image if we

00:32:54,880 --> 00:32:58,799
were to look at

00:32:55,919 --> 00:33:00,480
inspecting that image that we got down

00:32:58,799 --> 00:33:03,440
and using this jq

00:33:00,480 --> 00:33:04,000
here to look at the the uh just pick out

00:33:03,440 --> 00:33:06,320
particular

00:33:04,000 --> 00:33:08,720
portions of the output we could see the

00:33:06,320 --> 00:33:11,360
layers here you would see

00:33:08,720 --> 00:33:12,399
we had three layers here we have three

00:33:11,360 --> 00:33:13,679
layers here

00:33:12,399 --> 00:33:15,279
now notice again this is not a

00:33:13,679 --> 00:33:16,640
one-to-one mapping because what we

00:33:15,279 --> 00:33:18,480
talked about before

00:33:16,640 --> 00:33:20,159
we have the digest here which is simply

00:33:18,480 --> 00:33:21,039
the algorithm that was used for the

00:33:20,159 --> 00:33:23,679
checksum

00:33:21,039 --> 00:33:24,720
and to check sum itself if i were then

00:33:23,679 --> 00:33:26,399
to do and

00:33:24,720 --> 00:33:27,760
if i do a docker inspect and look at a

00:33:26,399 --> 00:33:29,679
little different section

00:33:27,760 --> 00:33:31,120
you'll see that we can see what under

00:33:29,679 --> 00:33:33,360
graph driver data

00:33:31,120 --> 00:33:35,200
we see the actual directories under the

00:33:33,360 --> 00:33:37,279
var live docker area

00:33:35,200 --> 00:33:38,240
that are associated with this so we have

00:33:37,279 --> 00:33:40,559
lower dir

00:33:38,240 --> 00:33:41,519
merge sir upper during work dirt now

00:33:40,559 --> 00:33:43,840
remember that

00:33:41,519 --> 00:33:44,799
lower dir even though it's called lower

00:33:43,840 --> 00:33:47,360
directory

00:33:44,799 --> 00:33:48,960
it can have multiple directories you can

00:33:47,360 --> 00:33:52,000
see here if you look carefully

00:33:48,960 --> 00:33:55,039
on the lower dir that after this last

00:33:52,000 --> 00:33:56,880
diff diff being the directory where

00:33:55,039 --> 00:33:59,039
changes are stored as you make changes

00:33:56,880 --> 00:34:00,080
in a layer we have a colon and then we

00:33:59,039 --> 00:34:02,960
have another one

00:34:00,080 --> 00:34:04,840
so we can have up to 128 practically

00:34:02,960 --> 00:34:06,720
probably it's 125 because of some

00:34:04,840 --> 00:34:09,919
limitations but we have

00:34:06,720 --> 00:34:12,960
up to 128 or so of these directories

00:34:09,919 --> 00:34:14,800
that are all uh hooked together kind of

00:34:12,960 --> 00:34:16,879
like a path variable

00:34:14,800 --> 00:34:18,720
in your operating system you start in

00:34:16,879 --> 00:34:20,560
one place look for a file if it doesn't

00:34:18,720 --> 00:34:21,200
find that go to the next location in the

00:34:20,560 --> 00:34:23,040
path

00:34:21,200 --> 00:34:24,399
look for that does it find there go to

00:34:23,040 --> 00:34:26,079
next location and so on

00:34:24,399 --> 00:34:28,639
so think of this as kind of a set of

00:34:26,079 --> 00:34:30,800
directories arranged as a path here

00:34:28,639 --> 00:34:32,480
the merge dir and upper dir in this case

00:34:30,800 --> 00:34:34,240
are the same where we're going to make

00:34:32,480 --> 00:34:35,520
changes write changes and then the

00:34:34,240 --> 00:34:38,480
working directory is for

00:34:35,520 --> 00:34:40,480
internal use with overlay so what's out

00:34:38,480 --> 00:34:42,399
there in the overlay 2 directory

00:34:40,480 --> 00:34:45,599
a high level directory per layer for

00:34:42,399 --> 00:34:48,320
example if i were to look at overlay 2

00:34:45,599 --> 00:34:49,040
based on those those images that i just

00:34:48,320 --> 00:34:51,359
pulled

00:34:49,040 --> 00:34:53,359
uh they had three layers in it i could

00:34:51,359 --> 00:34:54,480
see my three layers out here this was

00:34:53,359 --> 00:34:57,520
the same thing i saw

00:34:54,480 --> 00:34:59,599
and the docker inspect there the lower

00:34:57,520 --> 00:35:02,480
dir the upper dir and the merge dirt

00:34:59,599 --> 00:35:03,200
you see in here are the directories for

00:35:02,480 --> 00:35:04,880
the image

00:35:03,200 --> 00:35:07,760
you see in here the directories

00:35:04,880 --> 00:35:08,560
themselves if i look down deeper into

00:35:07,760 --> 00:35:11,440
them

00:35:08,560 --> 00:35:12,400
you'll also see or in here i'll see an l

00:35:11,440 --> 00:35:15,359
directory

00:35:12,400 --> 00:35:16,000
l contains a shortened layer identifier

00:35:15,359 --> 00:35:18,560
basically

00:35:16,000 --> 00:35:20,480
a shortened link the reason we do that

00:35:18,560 --> 00:35:21,680
is to avoid that i know problem that

00:35:20,480 --> 00:35:24,079
overlay had

00:35:21,680 --> 00:35:24,960
it's simply a way to connect to that if

00:35:24,079 --> 00:35:27,920
i look at

00:35:24,960 --> 00:35:30,079
what's in the l directory then you can

00:35:27,920 --> 00:35:32,160
see that it actually links back

00:35:30,079 --> 00:35:34,160
this is just a shortened link to get to

00:35:32,160 --> 00:35:36,720
that longer directory

00:35:34,160 --> 00:35:38,400
and to the diff area diff is just simply

00:35:36,720 --> 00:35:41,680
that directory that's encompassing the

00:35:38,400 --> 00:35:41,680
changes made for a layer

00:35:41,920 --> 00:35:45,520
so if we look at these different layers

00:35:43,599 --> 00:35:48,320
here the lower directory

00:35:45,520 --> 00:35:50,400
has a lowest layer again a set of

00:35:48,320 --> 00:35:52,720
directories separated by a colon

00:35:50,400 --> 00:35:54,640
order from highest to lowest it contains

00:35:52,720 --> 00:35:56,000
a link to the main directory and the

00:35:54,640 --> 00:35:57,920
diff directory

00:35:56,000 --> 00:35:59,680
so if we look at this we have two

00:35:57,920 --> 00:36:02,720
directories listed here

00:35:59,680 --> 00:36:04,560
if i look at what's in the one directory

00:36:02,720 --> 00:36:07,040
this is in the overlay two

00:36:04,560 --> 00:36:08,880
look at the lowest one or look at sorry

00:36:07,040 --> 00:36:11,920
the um

00:36:08,880 --> 00:36:13,040
one here you'll see i have a diff and a

00:36:11,920 --> 00:36:14,960
link area

00:36:13,040 --> 00:36:16,640
the lowest one and here's the picture

00:36:14,960 --> 00:36:19,440
down here on the right hand side

00:36:16,640 --> 00:36:20,480
the image base layer lower directory two

00:36:19,440 --> 00:36:23,599
the lowest one

00:36:20,480 --> 00:36:25,119
has a set of files in it if i were to

00:36:23,599 --> 00:36:27,040
look at the diff

00:36:25,119 --> 00:36:28,800
that would be the actual files that you

00:36:27,040 --> 00:36:30,560
would see in the container

00:36:28,800 --> 00:36:31,920
if you were able just to look at that

00:36:30,560 --> 00:36:33,520
layer all

00:36:31,920 --> 00:36:34,800
you know ultimately this gets back to

00:36:33,520 --> 00:36:36,720
where the file store they go in the

00:36:34,800 --> 00:36:38,240
container this is where they're stored

00:36:36,720 --> 00:36:40,800
for this particular layer it's a

00:36:38,240 --> 00:36:41,680
directory with looks like operating

00:36:40,800 --> 00:36:43,920
system right has

00:36:41,680 --> 00:36:45,599
operating system files in it so i look

00:36:43,920 --> 00:36:47,760
in the diff area there i have a diff

00:36:45,599 --> 00:36:49,680
directory and i have a link area

00:36:47,760 --> 00:36:50,960
if i look at the link it's just a simple

00:36:49,680 --> 00:36:53,760
pointer back

00:36:50,960 --> 00:36:54,400
that layer so that's the lowest level if

00:36:53,760 --> 00:36:58,079
i go

00:36:54,400 --> 00:37:00,000
one above layer number two

00:36:58,079 --> 00:37:02,079
the first one in this lower directory

00:37:00,000 --> 00:37:05,119
list i have

00:37:02,079 --> 00:37:07,200
a diff link but i also have

00:37:05,119 --> 00:37:08,880
a lower directory and a work directory

00:37:07,200 --> 00:37:09,440
work is just where we do work if we need

00:37:08,880 --> 00:37:13,280
to

00:37:09,440 --> 00:37:14,160
or overlay does lower is actually used

00:37:13,280 --> 00:37:17,040
to point

00:37:14,160 --> 00:37:18,400
to the previous layer this is how they

00:37:17,040 --> 00:37:20,160
tie things together

00:37:18,400 --> 00:37:21,599
if you look at the second block in the

00:37:20,160 --> 00:37:24,720
picture down here

00:37:21,599 --> 00:37:25,839
the second lowest directory has a few

00:37:24,720 --> 00:37:28,240
changes in it

00:37:25,839 --> 00:37:30,320
if i were to look at the diff area where

00:37:28,240 --> 00:37:32,240
file system changes are stored

00:37:30,320 --> 00:37:34,079
i have a couple of changes i've made in

00:37:32,240 --> 00:37:36,000
here for etsy user var

00:37:34,079 --> 00:37:37,200
and then i have this lower i have my own

00:37:36,000 --> 00:37:39,440
link for that layer

00:37:37,200 --> 00:37:40,320
i have lower pointing back to the one

00:37:39,440 --> 00:37:42,320
below it

00:37:40,320 --> 00:37:44,079
so then i have the pointer back you can

00:37:42,320 --> 00:37:45,280
start to see how we can build up an

00:37:44,079 --> 00:37:48,079
image here

00:37:45,280 --> 00:37:49,680
finally if i look at the upper directory

00:37:48,079 --> 00:37:52,160
here

00:37:49,680 --> 00:37:53,040
i can look at that and uh you'll see

00:37:52,160 --> 00:37:56,160
that if i do

00:37:53,040 --> 00:37:57,119
an ls i have a diff area to contain the

00:37:56,160 --> 00:37:59,839
changes

00:37:57,119 --> 00:38:01,920
made for that layer the link area to

00:37:59,839 --> 00:38:04,079
point back to the previous one

00:38:01,920 --> 00:38:05,599
or the link area to point to this let

00:38:04,079 --> 00:38:07,599
this uh layer

00:38:05,599 --> 00:38:09,119
and then the shortened version of it and

00:38:07,599 --> 00:38:10,079
then the lower to point to the one

00:38:09,119 --> 00:38:12,640
before

00:38:10,079 --> 00:38:14,400
if you look at what's in this directory

00:38:12,640 --> 00:38:16,800
the only changes that were made

00:38:14,400 --> 00:38:18,560
through the docker file process in here

00:38:16,800 --> 00:38:19,680
would update something in the run

00:38:18,560 --> 00:38:22,400
directory

00:38:19,680 --> 00:38:22,720
now if i look at what's in lower lower

00:38:22,400 --> 00:38:25,280
is

00:38:22,720 --> 00:38:26,320
in this upper level points back to the

00:38:25,280 --> 00:38:28,000
one before

00:38:26,320 --> 00:38:30,079
which of course in the lower and the one

00:38:28,000 --> 00:38:31,839
after that points back to the other one

00:38:30,079 --> 00:38:33,359
so you get the idea just a bunch of

00:38:31,839 --> 00:38:35,040
pointers pointing in there

00:38:33,359 --> 00:38:36,720
and the diff directories which are

00:38:35,040 --> 00:38:37,680
subdirectories here contain the actual

00:38:36,720 --> 00:38:39,440
file changes

00:38:37,680 --> 00:38:41,119
for example in this case the diff thing

00:38:39,440 --> 00:38:44,839
contain the run

00:38:41,119 --> 00:38:47,440
now if i were to look at the docker

00:38:44,839 --> 00:38:50,160
history for this particular image

00:38:47,440 --> 00:38:50,880
what i would see is i would see a

00:38:50,160 --> 00:38:54,160
command

00:38:50,880 --> 00:38:57,359
in here that says make dir dash p

00:38:54,160 --> 00:38:59,920
run system d so that was a command

00:38:57,359 --> 00:39:01,520
that was run at some point on this image

00:38:59,920 --> 00:39:04,079
and it created a layer

00:39:01,520 --> 00:39:06,320
and so if i took the diff of the second

00:39:04,079 --> 00:39:08,320
layer if i looked at that layer

00:39:06,320 --> 00:39:10,240
guess what if i go back to that upper

00:39:08,320 --> 00:39:11,040
directory and i did a diff with the dif

00:39:10,240 --> 00:39:13,760
directory

00:39:11,040 --> 00:39:14,720
there's the run there's the system d so

00:39:13,760 --> 00:39:18,000
you can see

00:39:14,720 --> 00:39:18,800
how a command in a docker file gets

00:39:18,000 --> 00:39:21,040
translated

00:39:18,800 --> 00:39:22,240
into a layer which is in essence a

00:39:21,040 --> 00:39:24,960
directory

00:39:22,240 --> 00:39:25,599
under there a larger directory for the

00:39:24,960 --> 00:39:27,200
layer

00:39:25,599 --> 00:39:29,200
and then it has the subdirectory of the

00:39:27,200 --> 00:39:31,200
diff with the changes

00:39:29,200 --> 00:39:33,359
in stored in there in the file it

00:39:31,200 --> 00:39:33,920
ultimately all comes back to the file

00:39:33,359 --> 00:39:35,440
system

00:39:33,920 --> 00:39:37,599
the changes are stored out there as

00:39:35,440 --> 00:39:39,599
directories but they're just combined

00:39:37,599 --> 00:39:41,440
then

00:39:39,599 --> 00:39:43,920
with drivers through the things like the

00:39:41,440 --> 00:39:46,240
union mount and the file system there

00:39:43,920 --> 00:39:47,599
to build up the layers and that we use

00:39:46,240 --> 00:39:48,800
in the containers

00:39:47,599 --> 00:39:50,800
so what happens when we create a

00:39:48,800 --> 00:39:52,400
container well we use docker run to

00:39:50,800 --> 00:39:55,119
start a container

00:39:52,400 --> 00:39:56,160
we can actually if we go in there and do

00:39:55,119 --> 00:39:58,640
a docker run

00:39:56,160 --> 00:40:00,320
dash it ubuntu in fact what this means

00:39:58,640 --> 00:40:02,640
is we're just going to have it

00:40:00,320 --> 00:40:04,240
run for a little bit run ubuntu in there

00:40:02,640 --> 00:40:06,160
start up get a shell

00:40:04,240 --> 00:40:07,440
so it keeps running if we look in

00:40:06,160 --> 00:40:10,839
overlay 2

00:40:07,440 --> 00:40:12,319
we'll see a new uh layer in there the

00:40:10,839 --> 00:40:14,800
b506

00:40:12,319 --> 00:40:16,720
out there so we see a new layer that

00:40:14,800 --> 00:40:17,680
read write layer that got added for the

00:40:16,720 --> 00:40:19,359
container

00:40:17,680 --> 00:40:21,040
if we create a new file let's say that

00:40:19,359 --> 00:40:22,240
we're inside the container here we

00:40:21,040 --> 00:40:25,440
create a new file

00:40:22,240 --> 00:40:26,160
echo stuff greater than file one and

00:40:25,440 --> 00:40:29,520
then we go

00:40:26,160 --> 00:40:32,800
and look at that we'll look at the layer

00:40:29,520 --> 00:40:34,560
the diff will have

00:40:32,800 --> 00:40:36,880
the file that we put in there if we look

00:40:34,560 --> 00:40:37,520
at diff we'll have file one that file we

00:40:36,880 --> 00:40:39,280
just put

00:40:37,520 --> 00:40:41,599
because we just wrote it into that layer

00:40:39,280 --> 00:40:44,480
which ultimately got translated back

00:40:41,599 --> 00:40:45,839
to this directory at the diff area on

00:40:44,480 --> 00:40:48,400
the file system

00:40:45,839 --> 00:40:49,760
if we looked at the merged view we would

00:40:48,400 --> 00:40:51,760
see the merged view

00:40:49,760 --> 00:40:53,680
the kind of stacking in there we would

00:40:51,760 --> 00:40:55,520
see the things coming from that lowest

00:40:53,680 --> 00:40:57,119
layer that we saw before

00:40:55,520 --> 00:40:58,880
the all these kind of different areas

00:40:57,119 --> 00:41:00,240
operating system inc

00:40:58,880 --> 00:41:02,079
the things that came from the next

00:41:00,240 --> 00:41:04,720
lowest layer and the

00:41:02,079 --> 00:41:06,079
the run that we had out there and then

00:41:04,720 --> 00:41:08,960
the um

00:41:06,079 --> 00:41:09,839
or the system i'm not showing them all

00:41:08,960 --> 00:41:11,520
on here

00:41:09,839 --> 00:41:13,200
but then we have the file that we just

00:41:11,520 --> 00:41:15,440
created the file we just created which

00:41:13,200 --> 00:41:16,240
is layer on top to give this unified

00:41:15,440 --> 00:41:18,079
view

00:41:16,240 --> 00:41:20,079
so kind of cool this is the way it all

00:41:18,079 --> 00:41:22,880
works together you can start to see

00:41:20,079 --> 00:41:23,839
how the docker file ultimately executes

00:41:22,880 --> 00:41:26,160
instructions

00:41:23,839 --> 00:41:28,240
those instructions get stored in this

00:41:26,160 --> 00:41:29,119
diff directory under there if you create

00:41:28,240 --> 00:41:31,839
layers

00:41:29,119 --> 00:41:34,160
in there the layers themselves have this

00:41:31,839 --> 00:41:35,119
the overall sub directories uh the

00:41:34,160 --> 00:41:38,720
larger ones

00:41:35,119 --> 00:41:40,640
in the overlay 2 area have these files

00:41:38,720 --> 00:41:42,800
that point to links to the other layers

00:41:40,640 --> 00:41:44,319
so it all gets connected together and

00:41:42,800 --> 00:41:46,720
then docker presents it

00:41:44,319 --> 00:41:48,319
as that sort of uh we call content

00:41:46,720 --> 00:41:49,680
addressable which really just to check

00:41:48,319 --> 00:41:52,240
some of that

00:41:49,680 --> 00:41:54,400
out there so by that and there's the

00:41:52,240 --> 00:41:57,040
rest of it so by that you can see

00:41:54,400 --> 00:41:58,560
how this all stacks together and really

00:41:57,040 --> 00:41:59,680
it's not that mysterious once you

00:41:58,560 --> 00:42:02,400
understand

00:41:59,680 --> 00:42:04,160
that you have this area out there and

00:42:02,400 --> 00:42:05,119
you can figure out how to kind of decode

00:42:04,160 --> 00:42:07,520
what layers or

00:42:05,119 --> 00:42:11,200
what and then you can look at that and

00:42:07,520 --> 00:42:13,280
find the actual file changes in there

00:42:11,200 --> 00:42:14,720
the containers directory has a lot of

00:42:13,280 --> 00:42:15,599
other pieces in there

00:42:14,720 --> 00:42:17,760
we talked about some of the

00:42:15,599 --> 00:42:21,599
configuration files

00:42:17,760 --> 00:42:23,839
uh hostname mounts and so on uh as well

00:42:21,599 --> 00:42:25,599
that you can look at in there one more

00:42:23,839 --> 00:42:27,280
thing to mention very quickly here

00:42:25,599 --> 00:42:28,960
the open container initiative i said i

00:42:27,280 --> 00:42:31,599
would talk about that so

00:42:28,960 --> 00:42:32,560
docker was probably the first

00:42:31,599 --> 00:42:37,119
application to

00:42:32,560 --> 00:42:40,160
really get into the place where it uh

00:42:37,119 --> 00:42:41,359
was able to put this interfaces and

00:42:40,160 --> 00:42:44,000
structure

00:42:41,359 --> 00:42:45,920
and apis and stuff on top of containers

00:42:44,000 --> 00:42:48,000
in linux container technology

00:42:45,920 --> 00:42:48,960
but now it's partnered with the linux

00:42:48,000 --> 00:42:50,560
foundation

00:42:48,960 --> 00:42:53,040
to create the open container initiative

00:42:50,560 --> 00:42:55,200
which simply is a way to say

00:42:53,040 --> 00:42:57,839
we are standardizing all of these things

00:42:55,200 --> 00:43:00,400
the structure the interfaces the apis

00:42:57,839 --> 00:43:02,319
if you implement this as an application

00:43:00,400 --> 00:43:02,880
you can do the same things that docker

00:43:02,319 --> 00:43:05,280
does

00:43:02,880 --> 00:43:06,480
so there are other ones out there now of

00:43:05,280 --> 00:43:09,520
things like

00:43:06,480 --> 00:43:10,640
pod man build uh cryo rocket's been

00:43:09,520 --> 00:43:12,640
around for a long time

00:43:10,640 --> 00:43:14,240
other ones that you may see that being

00:43:12,640 --> 00:43:15,839
used instead of docker docker doesn't

00:43:14,240 --> 00:43:17,200
quite have the market share anymore but

00:43:15,839 --> 00:43:18,560
just to be aware of there are other

00:43:17,200 --> 00:43:20,880
applications out there

00:43:18,560 --> 00:43:22,880
that can do this all right i think we

00:43:20,880 --> 00:43:24,640
are just about maybe a minute or two

00:43:22,880 --> 00:43:25,599
ahead but we are pretty much done at

00:43:24,640 --> 00:43:27,599
this point

00:43:25,599 --> 00:43:30,160
so i know that was kind of a whirlwind

00:43:27,599 --> 00:43:31,119
tour but i hope it was useful to you and

00:43:30,160 --> 00:43:40,079
i hope it was

00:43:31,119 --> 00:43:40,079

YouTube URL: https://www.youtube.com/watch?v=6yycoCmx9Hc


