Title: Creating a Fast, Secure, Location Agnostic Mesh Network with Nebula - Ryan Huber
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Ryan Huber, Defined Networking, Inc
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: Nebula is a scalable overlay networking tool with a focus on performance, simplicity and security. It lets you seamlessly connect computers anywhere in the world. Nebula is portable, and runs on Linux, OSX, Windows, iOS, and Android. In this workshop, we will stand up a Nebula mesh (it really is quite easy), but also deep dive into performance, security, and general connectivity tuning, all while sharing anecdotes and lessons we have learned from running Nebula on 20,000+ servers at Slack, and on our own personal networks.
Captions: 
	00:00:05,040 --> 00:00:09,519
hi everyone

00:00:05,759 --> 00:00:10,480
so uh so today uh uh we're going to

00:00:09,519 --> 00:00:13,120
spend uh

00:00:10,480 --> 00:00:15,360
spend the first half of the talk really

00:00:13,120 --> 00:00:17,920
uh discussing nebula itself

00:00:15,360 --> 00:00:18,560
and then uh and then the latter half you

00:00:17,920 --> 00:00:20,160
know

00:00:18,560 --> 00:00:22,080
we're gonna we're gonna actually stand

00:00:20,160 --> 00:00:25,119
up a mesh network including

00:00:22,080 --> 00:00:26,560
a mobile device and and just show how

00:00:25,119 --> 00:00:28,320
how easy it actually is to do with

00:00:26,560 --> 00:00:31,519
nebula so um

00:00:28,320 --> 00:00:32,960
one one thing that uh that

00:00:31,519 --> 00:00:34,880
i'd like to do here is keep this as

00:00:32,960 --> 00:00:37,040
interactive as possible so

00:00:34,880 --> 00:00:38,480
um i've asked the moderator to you know

00:00:37,040 --> 00:00:40,480
interrupt me anytime there are any

00:00:38,480 --> 00:00:41,760
questions and i'm happy to dig in and

00:00:40,480 --> 00:00:45,120
explain those

00:00:41,760 --> 00:00:46,160
um and of course you know i always have

00:00:45,120 --> 00:00:48,239
to do something

00:00:46,160 --> 00:00:49,440
different for each talk so i actually

00:00:48,239 --> 00:00:51,280
have um

00:00:49,440 --> 00:00:52,480
i've set up my ipad as a kind of virtual

00:00:51,280 --> 00:00:54,399
whiteboard uh

00:00:52,480 --> 00:00:56,399
so that you know if we want to discuss

00:00:54,399 --> 00:00:58,239
something we can and and hopefully you

00:00:56,399 --> 00:01:00,480
know we tested this out and it works

00:00:58,239 --> 00:01:01,600
pretty well so you know just as an

00:01:00,480 --> 00:01:03,840
example um

00:01:01,600 --> 00:01:05,119
i can pop that up and and really dig

00:01:03,840 --> 00:01:06,479
into any of these topics

00:01:05,119 --> 00:01:09,200
that people might want more

00:01:06,479 --> 00:01:12,960
clarification on as we go

00:01:09,200 --> 00:01:16,080
um so thanks for joining uh who am i

00:01:12,960 --> 00:01:18,560
i think this tweet basically says it all

00:01:16,080 --> 00:01:19,840
so um you know i've been doing uh

00:01:18,560 --> 00:01:21,439
computer stuff since i grew

00:01:19,840 --> 00:01:23,840
i grew up in the middle of nowhere in

00:01:21,439 --> 00:01:24,400
rural illinois and had a computer and a

00:01:23,840 --> 00:01:26,880
modem

00:01:24,400 --> 00:01:28,240
from uh from age i don't know whatever

00:01:26,880 --> 00:01:30,880
it was 12.

00:01:28,240 --> 00:01:31,439
and uh and really got started on the

00:01:30,880 --> 00:01:34,240
internet

00:01:31,439 --> 00:01:35,520
very early and doing unix things and and

00:01:34,240 --> 00:01:37,759
um

00:01:35,520 --> 00:01:41,040
progressed through to uh to a job at

00:01:37,759 --> 00:01:41,520
orbitz.com that lasted 11 years which is

00:01:41,040 --> 00:01:44,720
kind of

00:01:41,520 --> 00:01:46,159
ridiculous in this day and age did have

00:01:44,720 --> 00:01:49,920
done a lot of security work

00:01:46,159 --> 00:01:53,360
and and eventually ended up at slack

00:01:49,920 --> 00:01:58,000
and so nebula was created at slack

00:01:53,360 --> 00:02:00,320
starting in it was the end of 2016

00:01:58,000 --> 00:02:02,719
uh but really the first code i think was

00:02:00,320 --> 00:02:04,640
in early 2017.

00:02:02,719 --> 00:02:05,840
at this point it's been so long ago that

00:02:04,640 --> 00:02:08,560
that i sometimes forget

00:02:05,840 --> 00:02:09,200
but yeah um i was pretty excited to get

00:02:08,560 --> 00:02:11,680
to work

00:02:09,200 --> 00:02:12,640
on what i thought was a pretty super

00:02:11,680 --> 00:02:16,959
advanced irc

00:02:12,640 --> 00:02:18,879
so here's our agenda for today

00:02:16,959 --> 00:02:20,319
uh we're going to talk about the open

00:02:18,879 --> 00:02:23,360
source release

00:02:20,319 --> 00:02:25,760
then go into a bit of history about

00:02:23,360 --> 00:02:27,760
why we created nebula and some of the

00:02:25,760 --> 00:02:29,760
considerations that were made

00:02:27,760 --> 00:02:32,480
in the in the process of developing

00:02:29,760 --> 00:02:34,400
nebula and

00:02:32,480 --> 00:02:37,040
one one thing to keep in mind is that

00:02:34,400 --> 00:02:37,760
nebula while it's new as an open source

00:02:37,040 --> 00:02:39,280
project

00:02:37,760 --> 00:02:40,800
has been around for actually quite a

00:02:39,280 --> 00:02:43,120
long time like i said

00:02:40,800 --> 00:02:44,640
early 2017 we started writing this so

00:02:43,120 --> 00:02:48,080
it's not brand new

00:02:44,640 --> 00:02:51,519
by any stretch um

00:02:48,080 --> 00:02:52,560
then uh we're going to get into uh some

00:02:51,519 --> 00:02:55,920
more detail about

00:02:52,560 --> 00:02:58,400
writing nebula itself and the uh

00:02:55,920 --> 00:02:59,599
the general architecture so why we made

00:02:58,400 --> 00:03:03,360
certain decisions about

00:02:59,599 --> 00:03:05,360
nebula and what uh what the outcome of

00:03:03,360 --> 00:03:07,120
those decisions has been

00:03:05,360 --> 00:03:09,040
um then we're going to do a technical

00:03:07,120 --> 00:03:10,480
oops sorry

00:03:09,040 --> 00:03:12,640
then we're going to do a technical deep

00:03:10,480 --> 00:03:16,640
dive so

00:03:12,640 --> 00:03:20,319
uh really going into pretty

00:03:16,640 --> 00:03:22,000
pretty good detail on each of the the um

00:03:20,319 --> 00:03:23,920
bits of nebula itself each of the

00:03:22,000 --> 00:03:25,599
components and talking about you know

00:03:23,920 --> 00:03:28,080
how they work and how to stand them up

00:03:25,599 --> 00:03:32,000
for resilient and performant uh

00:03:28,080 --> 00:03:34,480
operation then i think the second half

00:03:32,000 --> 00:03:36,640
so the the other 45 minutes after the

00:03:34,480 --> 00:03:40,000
break will be devoted to

00:03:36,640 --> 00:03:41,760
the workshop um depending on time that

00:03:40,000 --> 00:03:43,519
there may be a bit of overlap one way or

00:03:41,760 --> 00:03:45,280
the other but but we'll see but

00:03:43,519 --> 00:03:47,440
uh especially during the workshop i'm

00:03:45,280 --> 00:03:49,599
happy to answer any questions

00:03:47,440 --> 00:03:51,360
or you know basically what we're going

00:03:49,599 --> 00:03:52,560
to do is stand up an entire nebula

00:03:51,360 --> 00:03:55,200
network in aws

00:03:52,560 --> 00:03:57,040
from scratch um obviously it's you know

00:03:55,200 --> 00:03:59,120
i've ansibled it up ahead of time so

00:03:57,040 --> 00:04:00,560
like it's you know click here and it

00:03:59,120 --> 00:04:02,799
should kick off but

00:04:00,560 --> 00:04:04,799
let me know um let me know if there are

00:04:02,799 --> 00:04:06,319
any areas you want to dig into

00:04:04,799 --> 00:04:08,239
you can actually you know start thinking

00:04:06,319 --> 00:04:09,840
about that now and

00:04:08,239 --> 00:04:11,280
and be ready with questions during the

00:04:09,840 --> 00:04:12,640
workshop and then

00:04:11,280 --> 00:04:14,799
obviously at the end there will be a

00:04:12,640 --> 00:04:17,599
recap on on

00:04:14,799 --> 00:04:17,599
what we've discussed

00:04:18,320 --> 00:04:25,040
so we open sourced nebula in november

00:04:21,759 --> 00:04:27,840
of 2009 and at that point it had been

00:04:25,040 --> 00:04:29,759
been running at slack for in production

00:04:27,840 --> 00:04:31,520
for a couple of years maybe three years

00:04:29,759 --> 00:04:35,040
again the timelines escape me

00:04:31,520 --> 00:04:36,240
but um you know we we weren't sure

00:04:35,040 --> 00:04:38,160
what people were going to think of

00:04:36,240 --> 00:04:39,360
nebula we were we knew we were

00:04:38,160 --> 00:04:42,320
interested in it

00:04:39,360 --> 00:04:44,080
but we weren't sure if the general the

00:04:42,320 --> 00:04:45,520
general open source community would be

00:04:44,080 --> 00:04:47,360
as interested in this and

00:04:45,520 --> 00:04:49,199
especially coming at it from the

00:04:47,360 --> 00:04:50,160
infrastructure angle you know it can be

00:04:49,199 --> 00:04:53,199
hard to understand

00:04:50,160 --> 00:04:53,680
why nebula is useful for networks of any

00:04:53,199 --> 00:04:56,160
size

00:04:53,680 --> 00:04:59,680
but i think i think today we'll dig into

00:04:56,160 --> 00:04:59,680
uh just how useful it can be

00:05:00,000 --> 00:05:04,960
so we this is this is the tweet from uh

00:05:03,120 --> 00:05:06,320
the day we released it on the slack

00:05:04,960 --> 00:05:09,360
engineering blog you can

00:05:06,320 --> 00:05:11,759
i don't have a direct link but because

00:05:09,360 --> 00:05:13,280
they're they're super long medium style

00:05:11,759 --> 00:05:13,840
links with a bunch of funny characters

00:05:13,280 --> 00:05:15,360
so

00:05:13,840 --> 00:05:16,880
just go check out the slack engineering

00:05:15,360 --> 00:05:19,120
blog and uh

00:05:16,880 --> 00:05:20,320
and you can read about you can read the

00:05:19,120 --> 00:05:22,880
the initial

00:05:20,320 --> 00:05:24,720
release information so it was it's about

00:05:22,880 --> 00:05:25,759
a five minute read uh it's a it's a

00:05:24,720 --> 00:05:27,360
quick read but

00:05:25,759 --> 00:05:29,840
it gives a lot of background on nebula

00:05:27,360 --> 00:05:32,880
itself and sort of how we came at

00:05:29,840 --> 00:05:36,000
the problem of networking

00:05:32,880 --> 00:05:40,080
uh also this was this was such a

00:05:36,000 --> 00:05:43,919
lucky coincidence but we released nebula

00:05:40,080 --> 00:05:46,880
on november 19th to the public

00:05:43,919 --> 00:05:48,160
and then i think it was about three days

00:05:46,880 --> 00:05:51,440
later

00:05:48,160 --> 00:05:53,280
i had an inbound email from the folks at

00:05:51,440 --> 00:05:56,639
linux unplugged and

00:05:53,280 --> 00:05:59,360
they happen to be doing a podcast on

00:05:56,639 --> 00:06:00,880
uh mesh networks or or you know sort of

00:05:59,360 --> 00:06:02,720
um

00:06:00,880 --> 00:06:04,800
basically exactly what nebula was and

00:06:02,720 --> 00:06:05,919
they had this episode planned

00:06:04,800 --> 00:06:08,319
you know before even hearing about

00:06:05,919 --> 00:06:10,639
nebula so on short notice they reached

00:06:08,319 --> 00:06:12,880
out and and we recorded a segment and

00:06:10,639 --> 00:06:14,080
i can't say enough you know good about

00:06:12,880 --> 00:06:17,360
about that podcast

00:06:14,080 --> 00:06:19,520
because uh they

00:06:17,360 --> 00:06:21,199
you know they they dug into nebula they

00:06:19,520 --> 00:06:22,720
they understood it well and they asked

00:06:21,199 --> 00:06:25,280
very relevant questions

00:06:22,720 --> 00:06:26,080
and so this this podcast is is well

00:06:25,280 --> 00:06:28,880
worth a listen

00:06:26,080 --> 00:06:29,759
one one side note on the podcast itself

00:06:28,880 --> 00:06:32,479
is

00:06:29,759 --> 00:06:34,560
one of my favorite projects before using

00:06:32,479 --> 00:06:37,360
nebula is called tink tinc

00:06:34,560 --> 00:06:38,400
and i actually got to hear the author of

00:06:37,360 --> 00:06:40,080
tank speak so

00:06:38,400 --> 00:06:41,520
we we actually both appear on that

00:06:40,080 --> 00:06:43,199
podcast and

00:06:41,520 --> 00:06:44,880
you know it it also goes into more

00:06:43,199 --> 00:06:46,560
detail and probably some things i'll

00:06:44,880 --> 00:06:49,360
forget to cover here so

00:06:46,560 --> 00:06:52,080
definitely check it out linuxunplug.com

00:06:49,360 --> 00:06:52,080
329.

00:06:52,400 --> 00:06:56,240
jim salter who coincidentally is the

00:06:55,199 --> 00:06:58,800
person

00:06:56,240 --> 00:06:59,840
who reached out and said hey you should

00:06:58,800 --> 00:07:01,520
you should speak

00:06:59,840 --> 00:07:02,880
at the all things open conference it's

00:07:01,520 --> 00:07:04,720
it's a great one so i

00:07:02,880 --> 00:07:06,080
um you know i was happy that he he

00:07:04,720 --> 00:07:08,240
reached out let me know he's actually

00:07:06,080 --> 00:07:10,639
written a few articles on nebula

00:07:08,240 --> 00:07:12,880
and then uh jupiter broadcasting which

00:07:10,639 --> 00:07:15,360
does linux unplugged also did

00:07:12,880 --> 00:07:16,560
an episode of tech snap that was devoted

00:07:15,360 --> 00:07:18,800
to nebula so

00:07:16,560 --> 00:07:20,000
that's that's uh more of a technical

00:07:18,800 --> 00:07:22,319
discussion of nebula

00:07:20,000 --> 00:07:24,160
and and some of uh jim and wes's

00:07:22,319 --> 00:07:26,160
experience using it so

00:07:24,160 --> 00:07:27,280
check out jim on twitter he writes for

00:07:26,160 --> 00:07:31,360
arts technica

00:07:27,280 --> 00:07:34,639
and uh and he's great

00:07:31,360 --> 00:07:38,080
so the open source reliefs uh and the uh

00:07:34,639 --> 00:07:40,479
the mobile apps plus defined so

00:07:38,080 --> 00:07:42,319
just i've lost track of time at this

00:07:40,479 --> 00:07:45,599
point is that last week

00:07:42,319 --> 00:07:48,879
um on on october 8th

00:07:45,599 --> 00:07:51,280
we finally announced that we've uh

00:07:48,879 --> 00:07:52,639
we've released the mobile app so we

00:07:51,280 --> 00:07:54,639
spent

00:07:52,639 --> 00:07:55,840
we spent a good amount of time actually

00:07:54,639 --> 00:07:58,240
working on them we

00:07:55,840 --> 00:07:59,440
we started with prototypes at the end of

00:07:58,240 --> 00:08:00,720
last year

00:07:59,440 --> 00:08:02,960
but they were they were very much

00:08:00,720 --> 00:08:05,120
prototypes and then

00:08:02,960 --> 00:08:07,199
starting in january or february this

00:08:05,120 --> 00:08:08,800
year we we really started

00:08:07,199 --> 00:08:10,319
messing with that code actually it was

00:08:08,800 --> 00:08:12,639
in february

00:08:10,319 --> 00:08:14,479
and we saw that we could get really good

00:08:12,639 --> 00:08:17,440
performance on ios and android

00:08:14,479 --> 00:08:18,479
and so instead of rushing the release as

00:08:17,440 --> 00:08:20,720
as kind of a beta

00:08:18,479 --> 00:08:22,479
and and letting it you know letting

00:08:20,720 --> 00:08:24,840
letting the users feel the pain of

00:08:22,479 --> 00:08:26,319
of our programming mistakes we we

00:08:24,840 --> 00:08:29,599
actually

00:08:26,319 --> 00:08:31,680
used it for a period of many months and

00:08:29,599 --> 00:08:33,839
sort of sort of developed it internally

00:08:31,680 --> 00:08:34,719
and then shared it with the nebula oss

00:08:33,839 --> 00:08:37,519
community via

00:08:34,719 --> 00:08:40,719
the nebula oss slack uh you can find a

00:08:37,519 --> 00:08:43,279
link to that on our github page and

00:08:40,719 --> 00:08:44,240
i think the result of that was we've

00:08:43,279 --> 00:08:48,320
we've really

00:08:44,240 --> 00:08:49,120
created a very uh very polished for an

00:08:48,320 --> 00:08:50,880
early version

00:08:49,120 --> 00:08:52,320
mobile app and uh we're going to show

00:08:50,880 --> 00:08:54,000
that off today as well so

00:08:52,320 --> 00:08:56,399
when we stand up the mesh i'm actually

00:08:54,000 --> 00:08:59,360
going to to also stand up the mobile app

00:08:56,399 --> 00:09:03,120
on i haven't decided yet ipod ipad or

00:08:59,360 --> 00:09:03,120
iphone but but one of those devices

00:09:04,560 --> 00:09:09,120
so a bit of history about about why we

00:09:07,519 --> 00:09:11,360
why we made nebula i think is

00:09:09,120 --> 00:09:12,240
is useful and gives some context on

00:09:11,360 --> 00:09:16,160
things

00:09:12,240 --> 00:09:19,440
um and it starts with why i hate vpns

00:09:16,160 --> 00:09:21,600
uh and and as a side note

00:09:19,440 --> 00:09:23,279
if you go read the slack.engineering

00:09:21,600 --> 00:09:26,560
blog post

00:09:23,279 --> 00:09:28,399
you'll notice that vpn i i think i have

00:09:26,560 --> 00:09:32,480
this right i don't think vpn has

00:09:28,399 --> 00:09:33,760
is said once and i avoided saying vpn at

00:09:32,480 --> 00:09:36,000
all costs because

00:09:33,760 --> 00:09:37,360
well a couple of reasons one the term is

00:09:36,000 --> 00:09:39,360
overloaded now so people

00:09:37,360 --> 00:09:41,440
you know people think vpn historically

00:09:39,360 --> 00:09:43,120
it was how you

00:09:41,440 --> 00:09:44,640
connected to something like a corporate

00:09:43,120 --> 00:09:47,519
network right

00:09:44,640 --> 00:09:49,040
but uh more recently i think that the

00:09:47,519 --> 00:09:51,519
popularity of

00:09:49,040 --> 00:09:52,160
these sort of anonymizing type services

00:09:51,519 --> 00:09:54,240
or

00:09:52,160 --> 00:09:55,440
things that allow you to watch netflix

00:09:54,240 --> 00:09:56,800
in another country

00:09:55,440 --> 00:09:59,040
have kind of have kind of really

00:09:56,800 --> 00:10:01,519
overloaded the term and so

00:09:59,040 --> 00:10:03,360
that's not why i hate vpns but but you

00:10:01,519 --> 00:10:05,600
know it's a reason that that

00:10:03,360 --> 00:10:07,519
calling something a vpn can be confusing

00:10:05,600 --> 00:10:11,839
right out of the gate

00:10:07,519 --> 00:10:15,440
so uh this very artistic rendition

00:10:11,839 --> 00:10:16,079
of um of why i hate vpns gets to kind of

00:10:15,440 --> 00:10:17,519
the point and

00:10:16,079 --> 00:10:19,279
i'm going to try the virtual whiteboard

00:10:17,519 --> 00:10:21,839
version of this because i have

00:10:19,279 --> 00:10:23,440
my ipad all cued up here so let me see

00:10:21,839 --> 00:10:25,760
if i can present that

00:10:23,440 --> 00:10:27,120
oh hey while we're in here that's my

00:10:25,760 --> 00:10:30,320
co-founder nate

00:10:27,120 --> 00:10:32,000
um he uh he looks just like that in

00:10:30,320 --> 00:10:34,000
person well let me take these away

00:10:32,000 --> 00:10:35,519
so there you go there's nate he's he's

00:10:34,000 --> 00:10:37,839
fantastic um

00:10:35,519 --> 00:10:38,640
but i had to had to draw some funny

00:10:37,839 --> 00:10:42,079
stuff on him

00:10:38,640 --> 00:10:43,120
all right so let's go to uh why i hate

00:10:42,079 --> 00:10:46,240
vpn so

00:10:43,120 --> 00:10:51,040
i moved from here oops

00:10:46,240 --> 00:10:56,560
undo there we go i moved from here

00:10:51,040 --> 00:10:58,160
to here in 2006

00:10:56,560 --> 00:11:00,000
and i was still working for a company

00:10:58,160 --> 00:11:01,680
based in chicago at the time

00:11:00,000 --> 00:11:03,600
and one of the things that sucks about

00:11:01,680 --> 00:11:06,720
vpns if you if you've

00:11:03,600 --> 00:11:07,120
been in this situation is um if i wanted

00:11:06,720 --> 00:11:09,839
to

00:11:07,120 --> 00:11:11,040
say so barcelona great town i used to

00:11:09,839 --> 00:11:14,720
love to go there

00:11:11,040 --> 00:11:17,839
and uh you know before kovid and

00:11:14,720 --> 00:11:21,440
so what what would happen is

00:11:17,839 --> 00:11:23,440
if i connected to my vpn back in the u.s

00:11:21,440 --> 00:11:25,279
and went to say a website that was

00:11:23,440 --> 00:11:27,120
hosted in barcelona maybe i wanted to

00:11:25,279 --> 00:11:29,040
to rent out a vacation property

00:11:27,120 --> 00:11:29,360
something like that um you can see in

00:11:29,040 --> 00:11:32,240
this

00:11:29,360 --> 00:11:32,640
in this visual that like my traffic had

00:11:32,240 --> 00:11:36,560
to go

00:11:32,640 --> 00:11:38,000
back here to the us then to the website

00:11:36,560 --> 00:11:40,000
you know assuming it was actually hosted

00:11:38,000 --> 00:11:43,200
there and then back to the us

00:11:40,000 --> 00:11:44,320
and then back to here right and the the

00:11:43,200 --> 00:11:47,680
problem with that is

00:11:44,320 --> 00:11:50,399
that's a lot of added latency like that

00:11:47,680 --> 00:11:50,880
that makes the experience of using the

00:11:50,399 --> 00:11:53,680
internet

00:11:50,880 --> 00:11:54,880
pretty terrible um also by the way i

00:11:53,680 --> 00:11:57,120
just realized

00:11:54,880 --> 00:11:58,880
there's there's a technical or sorry

00:11:57,120 --> 00:12:00,480
there's a there's a

00:11:58,880 --> 00:12:02,480
is it acronistic there's a flaw with

00:12:00,480 --> 00:12:04,320
this which is i don't think that existed

00:12:02,480 --> 00:12:05,839
yet so we'll just pretend

00:12:04,320 --> 00:12:08,240
that iphones existed but i don't think

00:12:05,839 --> 00:12:10,480
they actually did yet um but yeah so

00:12:08,240 --> 00:12:11,600
so using vpns this way kind of sucked

00:12:10,480 --> 00:12:15,600
and

00:12:11,600 --> 00:12:18,320
um switch back to here

00:12:15,600 --> 00:12:18,800
so then i found out about tink and

00:12:18,320 --> 00:12:22,160
that's

00:12:18,800 --> 00:12:24,399
as i mentioned uh his name is actually

00:12:22,160 --> 00:12:25,279
i believe it's it's pronounced but uh he

00:12:24,399 --> 00:12:28,079
wrote uh

00:12:25,279 --> 00:12:30,320
tink starting in the late 90s i want to

00:12:28,079 --> 00:12:33,040
say 1998 or 99

00:12:30,320 --> 00:12:35,120
and what i love about tank is i mean it

00:12:33,040 --> 00:12:36,639
was very early in this but it allowed

00:12:35,120 --> 00:12:39,040
you to do

00:12:36,639 --> 00:12:39,839
really intelligent stuff with routing

00:12:39,040 --> 00:12:41,760
and standing up

00:12:39,839 --> 00:12:43,200
a mesh network before really anyone was

00:12:41,760 --> 00:12:44,160
talking about this which was pretty

00:12:43,200 --> 00:12:46,720
amazing

00:12:44,160 --> 00:12:49,200
and so let me show you what that looks

00:12:46,720 --> 00:12:49,200
like here

00:12:49,519 --> 00:12:53,839
so that one is

00:12:54,399 --> 00:13:00,320
right here so in in something like

00:12:57,600 --> 00:13:01,360
tank um instead of instead of routing

00:13:00,320 --> 00:13:03,040
all over the place to

00:13:01,360 --> 00:13:05,200
to connect to different computers what

00:13:03,040 --> 00:13:06,079
you can do is have have things route to

00:13:05,200 --> 00:13:08,880
other things and

00:13:06,079 --> 00:13:10,079
even route via other nodes so in this

00:13:08,880 --> 00:13:13,440
example you know

00:13:10,079 --> 00:13:15,519
my laptop here uh it it might be

00:13:13,440 --> 00:13:18,800
connecting to

00:13:15,519 --> 00:13:20,639
this server right this laptop and

00:13:18,800 --> 00:13:22,000
if they don't have a direct connection

00:13:20,639 --> 00:13:23,760
which in this case you know

00:13:22,000 --> 00:13:26,160
i there's not one right there's nothing

00:13:23,760 --> 00:13:27,360
there um tink is intelligent enough to

00:13:26,160 --> 00:13:28,639
actually route that

00:13:27,360 --> 00:13:30,399
and it could it can actually take

00:13:28,639 --> 00:13:32,560
multiple hops and do something like that

00:13:30,399 --> 00:13:35,120
so tink is tink is pretty great it

00:13:32,560 --> 00:13:36,560
actually what is it it uses uh

00:13:35,120 --> 00:13:39,120
i'm gonna get this wrong some kind of

00:13:36,560 --> 00:13:39,839
tree algorithm to determine how to reach

00:13:39,120 --> 00:13:42,480
the other nodes

00:13:39,839 --> 00:13:43,199
but it's it's really smartly written um

00:13:42,480 --> 00:13:46,720
and so

00:13:43,199 --> 00:13:47,279
i i think that tink has informed a lot

00:13:46,720 --> 00:13:49,360
of

00:13:47,279 --> 00:13:50,800
the development process of nebula over

00:13:49,360 --> 00:13:52,720
time um

00:13:50,800 --> 00:13:54,800
and i'm i'm just grateful that it was

00:13:52,720 --> 00:13:56,320
written i think it was a wonderful open

00:13:54,800 --> 00:13:58,639
source it is a wonderful open source

00:13:56,320 --> 00:14:00,800
project

00:13:58,639 --> 00:14:03,120
so that's why i hate vpns but a bit of

00:14:00,800 --> 00:14:05,519
history about

00:14:03,120 --> 00:14:06,480
why slack hated vpns and hated might be

00:14:05,519 --> 00:14:10,000
a strong word but

00:14:06,480 --> 00:14:11,360
you know it slack had had some bad

00:14:10,000 --> 00:14:13,760
experiences with vpns

00:14:11,360 --> 00:14:14,839
some of which were self self-inflicted

00:14:13,760 --> 00:14:18,320
but

00:14:14,839 --> 00:14:21,040
um this is

00:14:18,320 --> 00:14:23,519
so this is this is sort of what slack

00:14:21,040 --> 00:14:25,040
started to look like over time so

00:14:23,519 --> 00:14:26,800
you know a lot of people be familiar

00:14:25,040 --> 00:14:30,800
with this kind of layout where

00:14:26,800 --> 00:14:34,399
you have uh you have uh

00:14:30,800 --> 00:14:36,560
that all right so you have like

00:14:34,399 --> 00:14:37,760
everything over here in us east one the

00:14:36,560 --> 00:14:39,440
amazon region

00:14:37,760 --> 00:14:40,880
and then you start expanding to pops

00:14:39,440 --> 00:14:43,680
around the globe and

00:14:40,880 --> 00:14:44,399
the reason you do that is uh to get you

00:14:43,680 --> 00:14:47,360
know to put

00:14:44,399 --> 00:14:49,040
to put pops closer to your users so uh

00:14:47,360 --> 00:14:51,760
in this example here

00:14:49,040 --> 00:14:52,320
you can see like somebody using an

00:14:51,760 --> 00:14:55,440
iphone

00:14:52,320 --> 00:14:57,360
in this case in italy-ish um

00:14:55,440 --> 00:14:58,880
you know they could connect straight to

00:14:57,360 --> 00:15:01,120
us east one

00:14:58,880 --> 00:15:03,519
over the internet but it tends to be

00:15:01,120 --> 00:15:03,920
faster for them to connect to a local

00:15:03,519 --> 00:15:06,240
pop

00:15:03,920 --> 00:15:07,519
and then and the green lines you know

00:15:06,240 --> 00:15:10,959
signify this

00:15:07,519 --> 00:15:13,440
use a local pop to connect uh back to

00:15:10,959 --> 00:15:15,519
uh us east one over amazon's backbone it

00:15:13,440 --> 00:15:18,959
just tends to be more performant

00:15:15,519 --> 00:15:20,880
you know they they um they have

00:15:18,959 --> 00:15:23,360
you know internal slas about network

00:15:20,880 --> 00:15:24,959
availability and latency and all that so

00:15:23,360 --> 00:15:26,480
if you can you want to terminate your

00:15:24,959 --> 00:15:28,240
users connections as

00:15:26,480 --> 00:15:31,600
close to them as possible and then

00:15:28,240 --> 00:15:31,600
transit the traffic yourself

00:15:33,680 --> 00:15:37,120
so here's what it looked like when we

00:15:36,240 --> 00:15:40,079
when we stood up

00:15:37,120 --> 00:15:40,720
ipsec at slack and i'm actually going to

00:15:40,079 --> 00:15:42,880
go back

00:15:40,720 --> 00:15:44,560
and and draw on this this version of it

00:15:42,880 --> 00:15:48,480
again so

00:15:44,560 --> 00:15:52,320
um what we had was

00:15:48,480 --> 00:15:56,560
so this is this is like the uh eu west

00:15:52,320 --> 00:15:58,399
2 i believe pop right here and

00:15:56,560 --> 00:16:00,000
what we wanted to do is connect all of

00:15:58,399 --> 00:16:01,839
these sort of message servers and

00:16:00,000 --> 00:16:04,399
everything in europe

00:16:01,839 --> 00:16:05,360
back to the us and the way we ended up

00:16:04,399 --> 00:16:09,440
doing that was

00:16:05,360 --> 00:16:13,040
initially ipsec so these these ipsec

00:16:09,440 --> 00:16:15,040
boxes here those are actual

00:16:13,040 --> 00:16:16,240
ec2 instances that are forwarding

00:16:15,040 --> 00:16:18,480
traffic across

00:16:16,240 --> 00:16:19,519
now today there's there's something

00:16:18,480 --> 00:16:22,000
called

00:16:19,519 --> 00:16:23,680
uh cross region peering it didn't it

00:16:22,000 --> 00:16:25,360
didn't exist back when we started this

00:16:23,680 --> 00:16:27,279
so it wasn't an option

00:16:25,360 --> 00:16:28,800
um but we're going to go into why you

00:16:27,279 --> 00:16:30,079
know it's not a it's not a complete

00:16:28,800 --> 00:16:34,000
solution to select

00:16:30,079 --> 00:16:35,920
slack's needs uh even today so

00:16:34,000 --> 00:16:37,440
you know slack was using ipsec and

00:16:35,920 --> 00:16:40,959
initially it worked pretty well

00:16:37,440 --> 00:16:42,639
but um as these pops grew right as you

00:16:40,959 --> 00:16:45,759
add more of these servers

00:16:42,639 --> 00:16:49,040
um you also had to add more ipsechos

00:16:45,759 --> 00:16:51,279
and because of how you had to do routing

00:16:49,040 --> 00:16:52,720
you had these weird things you had

00:16:51,279 --> 00:16:53,920
asynchronous routing paths and so

00:16:52,720 --> 00:16:57,519
basically it meant like

00:16:53,920 --> 00:17:01,440
this host this host to talk to this host

00:16:57,519 --> 00:17:04,880
went through maybe you know this

00:17:01,440 --> 00:17:06,480
this box here to get to to get to that

00:17:04,880 --> 00:17:06,959
one to get to that one you know it's

00:17:06,480 --> 00:17:10,400
it's

00:17:06,959 --> 00:17:12,400
it's pretty messy and so um

00:17:10,400 --> 00:17:14,079
the issue with that and the the joke i

00:17:12,400 --> 00:17:16,240
used to make about that was

00:17:14,079 --> 00:17:17,520
it it basically turned our network into

00:17:16,240 --> 00:17:19,600
a raid zero

00:17:17,520 --> 00:17:20,640
network configuration and what i mean by

00:17:19,600 --> 00:17:22,319
that is um

00:17:20,640 --> 00:17:24,000
as you expand this and it just kept

00:17:22,319 --> 00:17:24,640
getting bigger i think at one point we

00:17:24,000 --> 00:17:28,079
had like

00:17:24,640 --> 00:17:31,600
50 of these ipsec hosts right

00:17:28,079 --> 00:17:32,240
as we as we built it out what that meant

00:17:31,600 --> 00:17:36,080
was

00:17:32,240 --> 00:17:39,120
any time you lost one of these hosts

00:17:36,080 --> 00:17:40,400
you lost routing to an unknowable number

00:17:39,120 --> 00:17:43,520
of other hosts

00:17:40,400 --> 00:17:45,360
and so the problem with that is um

00:17:43,520 --> 00:17:46,240
there's no real way to plan for it and

00:17:45,360 --> 00:17:49,360
basically

00:17:46,240 --> 00:17:52,160
if we lost one box just one box on

00:17:49,360 --> 00:17:53,200
on this side here or this side here we

00:17:52,160 --> 00:17:54,880
had to offline

00:17:53,200 --> 00:17:57,840
that entire region right we had to

00:17:54,880 --> 00:17:59,440
migrate millions of active users

00:17:57,840 --> 00:18:01,280
to a different region and that that's

00:17:59,440 --> 00:18:04,400
not a great user experience

00:18:01,280 --> 00:18:06,559
so um so we quickly started started

00:18:04,400 --> 00:18:11,440
looking for alternatives to this

00:18:06,559 --> 00:18:14,320
and uh um

00:18:11,440 --> 00:18:15,039
so we uh oh yeah and there's one other

00:18:14,320 --> 00:18:17,520
thing that

00:18:15,039 --> 00:18:18,320
that was a limitation here so as we

00:18:17,520 --> 00:18:23,840
built this

00:18:18,320 --> 00:18:23,840
out see if i can show this more clearly

00:18:24,640 --> 00:18:28,000
all right so i'm gonna do a quick thing

00:18:26,400 --> 00:18:30,240
on on security groups so

00:18:28,000 --> 00:18:31,360
um imagine this is all in us east one

00:18:30,240 --> 00:18:32,720
and you have some web servers and they

00:18:31,360 --> 00:18:33,600
want to talk to my sql servers there's

00:18:32,720 --> 00:18:36,080
this nice

00:18:33,600 --> 00:18:37,919
nice thing called security groups where

00:18:36,080 --> 00:18:41,840
you can say anything that's called

00:18:37,919 --> 00:18:41,840
dub dub dub um

00:18:42,000 --> 00:18:46,240
anything called dub dub dub um you can

00:18:44,320 --> 00:18:48,080
create a rule that says it can talk to

00:18:46,240 --> 00:18:48,880
anything in the group my sequel this is

00:18:48,080 --> 00:18:50,720
a logic

00:18:48,880 --> 00:18:52,320
logical grouping so you don't have to

00:18:50,720 --> 00:18:54,080
care what the ip addresses of any of

00:18:52,320 --> 00:18:55,360
these boxes are right it doesn't matter

00:18:54,080 --> 00:18:57,039
for this

00:18:55,360 --> 00:18:59,679
those logical groupings are great you

00:18:57,039 --> 00:19:00,720
you tend to you tend to depend on them

00:18:59,679 --> 00:19:02,640
over time

00:19:00,720 --> 00:19:04,160
and and really stop caring about ips

00:19:02,640 --> 00:19:05,919
which is the way it should be right

00:19:04,160 --> 00:19:08,000
um you should you shouldn't treat

00:19:05,919 --> 00:19:09,440
servers as as prized possessions

00:19:08,000 --> 00:19:12,960
especially when you have

00:19:09,440 --> 00:19:16,480
tens of thousands of them and so

00:19:12,960 --> 00:19:19,360
the issue comes in when

00:19:16,480 --> 00:19:20,080
you go across regions so as soon as we

00:19:19,360 --> 00:19:22,240
added

00:19:20,080 --> 00:19:24,000
another region and in this example i'm

00:19:22,240 --> 00:19:26,799
just that we had more than one other

00:19:24,000 --> 00:19:28,160
region but um say you wanna now talk

00:19:26,799 --> 00:19:31,520
from us east one

00:19:28,160 --> 00:19:33,600
to eu west to right um and now you wanna

00:19:31,520 --> 00:19:35,360
use your nice dub dub dub group and

00:19:33,600 --> 00:19:36,960
allow it to talk to your mysql group

00:19:35,360 --> 00:19:40,240
well you can't

00:19:36,960 --> 00:19:40,960
uh you that doesn't exist right so uh

00:19:40,240 --> 00:19:42,880
once you

00:19:40,960 --> 00:19:44,160
once you cross regions and this still to

00:19:42,880 --> 00:19:47,039
this day is true

00:19:44,160 --> 00:19:47,679
even with vpc peering once you cross

00:19:47,039 --> 00:19:49,440
regions

00:19:47,679 --> 00:19:50,799
you're now dealing with ip addresses

00:19:49,440 --> 00:19:53,039
again um

00:19:50,799 --> 00:19:53,840
which sucks because unless you've you

00:19:53,039 --> 00:19:55,760
know set up

00:19:53,840 --> 00:19:57,600
all kinds of subnetting ahead of time

00:19:55,760 --> 00:19:59,520
you probably weren't thinking about when

00:19:57,600 --> 00:20:02,159
you initially stood up your environment

00:19:59,520 --> 00:20:04,240
and so um it makes it makes segmentation

00:20:02,159 --> 00:20:07,840
of a network extremely difficult uh

00:20:04,240 --> 00:20:07,840
especially as as you're expanding

00:20:08,720 --> 00:20:14,880
so there's those again uh so

00:20:12,640 --> 00:20:16,080
what about ip second transport mode is

00:20:14,880 --> 00:20:18,799
uh is something that

00:20:16,080 --> 00:20:20,320
that people will have asked well um one

00:20:18,799 --> 00:20:22,240
fun anecdote there we brought

00:20:20,320 --> 00:20:24,000
so we we didn't start off wanting to

00:20:22,240 --> 00:20:26,880
write software to solve this problem

00:20:24,000 --> 00:20:28,240
right we we had we were the security so

00:20:26,880 --> 00:20:30,240
the people interested in this were the

00:20:28,240 --> 00:20:32,320
the ops and security teams and myself

00:20:30,240 --> 00:20:33,039
and nate who initially started on nebula

00:20:32,320 --> 00:20:35,280
we were in

00:20:33,039 --> 00:20:37,360
in the security department so you know

00:20:35,280 --> 00:20:39,200
this wasn't exactly a problem we were

00:20:37,360 --> 00:20:40,799
looking to solve especially

00:20:39,200 --> 00:20:42,880
not not spend a bunch of time writing

00:20:40,799 --> 00:20:45,360
software and uh

00:20:42,880 --> 00:20:46,640
so we we actually brought in vendors to

00:20:45,360 --> 00:20:49,760
to discuss

00:20:46,640 --> 00:20:52,640
uh options that existed and

00:20:49,760 --> 00:20:54,080
um one of the vendors we brought in said

00:20:52,640 --> 00:20:55,600
oh you know we can do ip second

00:20:54,080 --> 00:20:58,400
transport mode which

00:20:55,600 --> 00:21:02,370
uh the difference is so if you remember

00:20:58,400 --> 00:21:05,480
let's see let me pull this up again

00:21:02,370 --> 00:21:05,480
[Music]

00:21:09,919 --> 00:21:13,840
apologies on one sec

00:21:14,320 --> 00:21:17,600
that one all right so if you remember

00:21:16,640 --> 00:21:20,320
this uh

00:21:17,600 --> 00:21:20,960
this document so the difference is in

00:21:20,320 --> 00:21:23,039
this one

00:21:20,960 --> 00:21:24,640
you have these ipsec nodes that are

00:21:23,039 --> 00:21:27,360
separate ec2 instances

00:21:24,640 --> 00:21:28,799
in transport mode you can do you can

00:21:27,360 --> 00:21:29,440
have these boxes you can basically

00:21:28,799 --> 00:21:31,840
eliminate

00:21:29,440 --> 00:21:33,679
those and the difference is you don't

00:21:31,840 --> 00:21:34,559
encrypt the ip headers anymore you just

00:21:33,679 --> 00:21:36,400
encrypt the payload

00:21:34,559 --> 00:21:38,240
but it allows you know this box to talk

00:21:36,400 --> 00:21:40,400
straight to that box right which is

00:21:38,240 --> 00:21:42,240
which is an improvement over over the

00:21:40,400 --> 00:21:44,880
raid 0 network configuration

00:21:42,240 --> 00:21:46,640
um but you know during the discussion

00:21:44,880 --> 00:21:48,720
with this vendor

00:21:46,640 --> 00:21:50,320
they they brought up a very important

00:21:48,720 --> 00:21:51,280
question which is what is your fan out

00:21:50,320 --> 00:21:54,000
so

00:21:51,280 --> 00:21:56,720
you know what that means is how many um

00:21:54,000 --> 00:21:57,520
how many of your web server or sorry how

00:21:56,720 --> 00:21:59,520
many

00:21:57,520 --> 00:22:01,039
database servers will one of your web

00:21:59,520 --> 00:22:04,640
servers talk to

00:22:01,039 --> 00:22:05,440
and we said thousands right like one web

00:22:04,640 --> 00:22:07,360
server

00:22:05,440 --> 00:22:08,720
because of how we do did sharding one

00:22:07,360 --> 00:22:10,080
web server might talk to

00:22:08,720 --> 00:22:12,000
every database over the course of a

00:22:10,080 --> 00:22:14,320
minute and

00:22:12,000 --> 00:22:15,760
um obviously won't name the vendor but

00:22:14,320 --> 00:22:18,000
they they basically

00:22:15,760 --> 00:22:19,440
said don't use our product right like

00:22:18,000 --> 00:22:21,039
they said once you get to that kind of

00:22:19,440 --> 00:22:22,000
fan out you're not gonna have a good

00:22:21,039 --> 00:22:25,600
experience

00:22:22,000 --> 00:22:26,960
and so um so ipsec in transport mode

00:22:25,600 --> 00:22:28,640
really didn't fit our needs

00:22:26,960 --> 00:22:30,400
because we were already you know 10 000

00:22:28,640 --> 00:22:33,039
hosts something like that

00:22:30,400 --> 00:22:34,640
the other issue is ipsec even in

00:22:33,039 --> 00:22:38,000
transport mode doesn't solve

00:22:34,640 --> 00:22:38,960
security groups so even if we used ipsec

00:22:38,000 --> 00:22:41,120
we're just

00:22:38,960 --> 00:22:42,799
we actually if we used ipsec today we

00:22:41,120 --> 00:22:45,120
probably would just be using

00:22:42,799 --> 00:22:46,880
cross region peering because it it's a

00:22:45,120 --> 00:22:48,000
much better version of the same thing we

00:22:46,880 --> 00:22:50,880
were trying to achieve

00:22:48,000 --> 00:22:52,840
but they both lack security groups for

00:22:50,880 --> 00:22:54,000
for good network segmentation and

00:22:52,840 --> 00:22:56,799
isolation

00:22:54,000 --> 00:22:57,840
um another common question why didn't we

00:22:56,799 --> 00:23:00,480
use wireguard

00:22:57,840 --> 00:23:01,679
um basically it boils down to kind of

00:23:00,480 --> 00:23:03,679
the same thing so

00:23:01,679 --> 00:23:05,360
a couple of reasons back in 2016 i think

00:23:03,679 --> 00:23:05,919
wireguard's website even said like this

00:23:05,360 --> 00:23:08,000
is

00:23:05,919 --> 00:23:10,080
early stuff i don't know how early it

00:23:08,000 --> 00:23:11,280
was but it kind of said right on the wet

00:23:10,080 --> 00:23:12,320
main website don't use this in

00:23:11,280 --> 00:23:14,559
production so

00:23:12,320 --> 00:23:16,000
we didn't use it in production um wire

00:23:14,559 --> 00:23:17,039
guard's great like i have a lot of good

00:23:16,000 --> 00:23:20,840
things to say about it

00:23:17,039 --> 00:23:22,240
wiredart is is concerned with being a

00:23:20,840 --> 00:23:24,880
vpn

00:23:22,240 --> 00:23:26,400
not with being sort of this this mesh

00:23:24,880 --> 00:23:29,600
network right so

00:23:26,400 --> 00:23:32,960
um if we had if we'd use something like

00:23:29,600 --> 00:23:34,159
wire guard we we knew that we would have

00:23:32,960 --> 00:23:36,559
to pre-load

00:23:34,159 --> 00:23:38,559
the keys on every device in our network

00:23:36,559 --> 00:23:40,320
ahead of time to allow any

00:23:38,559 --> 00:23:41,760
particular pair to communicate with each

00:23:40,320 --> 00:23:44,000
other so

00:23:41,760 --> 00:23:45,200
wireguard has a really great

00:23:44,000 --> 00:23:48,960
architecture

00:23:45,200 --> 00:23:50,880
but at the scale we were trying to run

00:23:48,960 --> 00:23:52,000
we had this problem where you had to

00:23:50,880 --> 00:23:55,760
inform

00:23:52,000 --> 00:23:56,880
n minus one nodes of any new node that

00:23:55,760 --> 00:23:58,480
was joining

00:23:56,880 --> 00:24:00,400
before they could talk to each other

00:23:58,480 --> 00:24:02,960
right and so once you get to

00:24:00,400 --> 00:24:04,320
ten thousand nodes you know you it's a

00:24:02,960 --> 00:24:07,039
solvable problem

00:24:04,320 --> 00:24:08,720
but now you're talking about a lot of

00:24:07,039 --> 00:24:11,520
overhead traffic

00:24:08,720 --> 00:24:12,640
uh just to inform nodes about each other

00:24:11,520 --> 00:24:12,960
and then you have to deal with things

00:24:12,640 --> 00:24:16,080
like

00:24:12,960 --> 00:24:18,880
offline nodes and and uh

00:24:16,080 --> 00:24:20,159
um you know kind of keeping state and

00:24:18,880 --> 00:24:20,880
bringing them up to date when they come

00:24:20,159 --> 00:24:22,799
back so

00:24:20,880 --> 00:24:24,559
like i think wireguard's great it just

00:24:22,799 --> 00:24:25,039
wasn't wasn't what we needed and on top

00:24:24,559 --> 00:24:27,120
of it

00:24:25,039 --> 00:24:28,799
you know it didn't have the the security

00:24:27,120 --> 00:24:31,600
group functionality that was kind of

00:24:28,799 --> 00:24:32,480
a core piece of why we why we wanted to

00:24:31,600 --> 00:24:35,840
uh

00:24:32,480 --> 00:24:36,559
build nebula um zero tier we didn't

00:24:35,840 --> 00:24:39,360
really know about

00:24:36,559 --> 00:24:39,679
um but i'll i'll just say like briefly

00:24:39,360 --> 00:24:41,840
the

00:24:39,679 --> 00:24:43,120
the main issue the reason we probably

00:24:41,840 --> 00:24:46,080
still wouldn't have used zero tier

00:24:43,120 --> 00:24:47,919
and again it's a really cool project but

00:24:46,080 --> 00:24:50,000
um

00:24:47,919 --> 00:24:52,000
until very recently you couldn't host

00:24:50,000 --> 00:24:53,600
your own discovery servers so

00:24:52,000 --> 00:24:55,520
zero tier is similar to nebula in some

00:24:53,600 --> 00:24:57,440
ways but basically they

00:24:55,520 --> 00:24:58,640
host the network discovery you can think

00:24:57,440 --> 00:25:00,320
of it as dns

00:24:58,640 --> 00:25:02,159
effectively like how does a node reach

00:25:00,320 --> 00:25:03,919
another node and

00:25:02,159 --> 00:25:06,080
you know it was hard enough to convince

00:25:03,919 --> 00:25:06,720
slack to use something like nebula that

00:25:06,080 --> 00:25:09,120
we

00:25:06,720 --> 00:25:11,440
we owned all of the infrastructure for

00:25:09,120 --> 00:25:14,640
um i can't imagine

00:25:11,440 --> 00:25:18,159
convincing the operations team to

00:25:14,640 --> 00:25:21,120
trust the network availability for

00:25:18,159 --> 00:25:22,559
you know all of slack to a third party i

00:25:21,120 --> 00:25:24,400
that's not to say that

00:25:22,559 --> 00:25:26,480
you know i there's anything bad about

00:25:24,400 --> 00:25:29,039
them i don't know them but that that was

00:25:26,480 --> 00:25:29,840
part of the is i don't know enough about

00:25:29,039 --> 00:25:33,600
them

00:25:29,840 --> 00:25:36,400
and um and on top of it like they have a

00:25:33,600 --> 00:25:38,320
version of filtering but it wasn't

00:25:36,400 --> 00:25:41,520
exactly what we were looking for

00:25:38,320 --> 00:25:43,039
and so you know i and and

00:25:41,520 --> 00:25:44,640
the the real answer is we didn't know

00:25:43,039 --> 00:25:47,120
about zero tier until

00:25:44,640 --> 00:25:48,960
uh probably a year into writing nebula

00:25:47,120 --> 00:25:50,880
so that's the simpler answer but

00:25:48,960 --> 00:25:53,760
there's a reason we still probably

00:25:50,880 --> 00:25:53,760
wouldn't have used it

00:25:54,320 --> 00:26:00,720
um what about insert whatever um

00:25:58,159 --> 00:26:02,240
so there are some other projects that do

00:26:00,720 --> 00:26:05,039
things like key distribution

00:26:02,240 --> 00:26:06,720
but you know it it's still that n minus

00:26:05,039 --> 00:26:07,760
one problem like we wanted something

00:26:06,720 --> 00:26:10,480
that was

00:26:07,760 --> 00:26:11,520
um that was able to provide just-in-time

00:26:10,480 --> 00:26:13,520
connectivity

00:26:11,520 --> 00:26:14,640
without having to share a bunch of data

00:26:13,520 --> 00:26:17,039
around like

00:26:14,640 --> 00:26:18,080
any any two nodes should be able to

00:26:17,039 --> 00:26:19,600
connect without

00:26:18,080 --> 00:26:22,080
knowing anything about each other ahead

00:26:19,600 --> 00:26:25,120
of time and you know we did that via a

00:26:22,080 --> 00:26:25,440
route of trust so um i'm going to take a

00:26:25,120 --> 00:26:28,000
quick

00:26:25,440 --> 00:26:29,039
pause here and just ask if anyone has

00:26:28,000 --> 00:26:31,520
any questions

00:26:29,039 --> 00:26:34,400
on on any of that content before i move

00:26:31,520 --> 00:26:34,400
on to the next section

00:26:37,440 --> 00:26:43,440
and i'm just now pulling up the chat so

00:26:40,640 --> 00:26:43,440
let me see if i

00:26:44,480 --> 00:26:46,720
okay

00:26:51,120 --> 00:26:54,799
all right so let's move on

00:26:57,600 --> 00:27:01,279
so it does look like we have one

00:27:00,080 --> 00:27:07,200
question

00:27:01,279 --> 00:27:09,840
from great

00:27:07,200 --> 00:27:10,240
okay so can you go ah so can you see

00:27:09,840 --> 00:27:13,840
that

00:27:10,240 --> 00:27:15,520
question um i'm trying to find it in the

00:27:13,840 --> 00:27:21,520
interface honestly oh there you go

00:27:15,520 --> 00:27:24,159
chat i see it now um

00:27:21,520 --> 00:27:24,159
let's see

00:27:24,559 --> 00:27:28,080
yeah so what about so uh bruno is asking

00:27:27,120 --> 00:27:29,760
what about

00:27:28,080 --> 00:27:32,080
mesh services that are that are popping

00:27:29,760 --> 00:27:35,360
up now like istio linker d

00:27:32,080 --> 00:27:37,039
um and etcd um they're kind of solving a

00:27:35,360 --> 00:27:38,240
different problem than than what we were

00:27:37,039 --> 00:27:40,960
going for here so

00:27:38,240 --> 00:27:41,679
you know they they often provide transit

00:27:40,960 --> 00:27:43,919
uh

00:27:41,679 --> 00:27:44,880
capability like a good example slack

00:27:43,919 --> 00:27:47,360
uses envoy

00:27:44,880 --> 00:27:48,159
right but at least back when we started

00:27:47,360 --> 00:27:52,000
on this

00:27:48,159 --> 00:27:54,720
um envoys docs said uh

00:27:52,000 --> 00:27:55,360
if you want to connect things across uh

00:27:54,720 --> 00:27:57,840
across

00:27:55,360 --> 00:27:59,120
the internet uh you should probably use

00:27:57,840 --> 00:28:00,399
mutual tls

00:27:59,120 --> 00:28:02,640
and that was kind of the extent of it it

00:28:00,399 --> 00:28:06,480
was like okay go figure out mutual tls

00:28:02,640 --> 00:28:06,480
and and that was you know

00:28:06,799 --> 00:28:09,919
people treat mutual tls as though it is

00:28:09,039 --> 00:28:12,320
a

00:28:09,919 --> 00:28:13,279
an easily solvable obvious you know

00:28:12,320 --> 00:28:14,799
obvious solution

00:28:13,279 --> 00:28:16,640
and it's really not like running your

00:28:14,799 --> 00:28:18,399
own pki and doing this

00:28:16,640 --> 00:28:20,080
um people that work at google will say

00:28:18,399 --> 00:28:20,799
like oh it's super easy you know we just

00:28:20,080 --> 00:28:22,880
we just use

00:28:20,799 --> 00:28:24,640
uh alts everywhere and everything is

00:28:22,880 --> 00:28:26,000
authenticated everything but

00:28:24,640 --> 00:28:27,120
um there are a lot of reasons we

00:28:26,000 --> 00:28:28,960
couldn't do it there one of the one of

00:28:27,120 --> 00:28:29,600
the big ones was we were transiting udp

00:28:28,960 --> 00:28:31,679
traffic

00:28:29,600 --> 00:28:32,640
as well so like that's a whole other can

00:28:31,679 --> 00:28:34,799
of worms

00:28:32,640 --> 00:28:35,679
that we didn't solve but what nebula

00:28:34,799 --> 00:28:38,720
doesn't try to be

00:28:35,679 --> 00:28:41,200
is um is any kind of uh

00:28:38,720 --> 00:28:43,120
load balancer or synchronization service

00:28:41,200 --> 00:28:44,399
it's it's more concerned with providing

00:28:43,120 --> 00:28:47,679
the raw connectivity

00:28:44,399 --> 00:28:48,640
and so um i think those mess mesh

00:28:47,679 --> 00:28:50,399
services

00:28:48,640 --> 00:28:52,880
over nebula actually makes a lot of

00:28:50,399 --> 00:28:55,200
sense um using nebula as the the

00:28:52,880 --> 00:28:59,600
connectivity layer for other things

00:28:55,200 --> 00:29:01,600
so cool thank you for the question so

00:28:59,600 --> 00:29:03,360
um so i guess we're gonna write some

00:29:01,600 --> 00:29:06,159
software so we started

00:29:03,360 --> 00:29:07,840
in 2006-ish again i asked nate about

00:29:06,159 --> 00:29:10,799
this just a bit ago

00:29:07,840 --> 00:29:11,279
and he couldn't remember for sure either

00:29:10,799 --> 00:29:13,440
i do

00:29:11,279 --> 00:29:16,320
i do know that you know we were just

00:29:13,440 --> 00:29:19,360
chatting we were out walking around

00:29:16,320 --> 00:29:22,799
and the moment we decided to really

00:29:19,360 --> 00:29:23,360
write nebula was when we started talking

00:29:22,799 --> 00:29:25,120
about

00:29:23,360 --> 00:29:26,799
encapsulating security groups and nebula

00:29:25,120 --> 00:29:28,640
certificates like that was

00:29:26,799 --> 00:29:31,520
the killer feature that that just

00:29:28,640 --> 00:29:34,799
convinced us that this was worth doing

00:29:31,520 --> 00:29:37,039
um we did it in go right so nebula is

00:29:34,799 --> 00:29:38,960
written in goling and a lot of people

00:29:37,039 --> 00:29:40,880
have asked like why didn't you use rust

00:29:38,960 --> 00:29:42,240
why didn't you use

00:29:40,880 --> 00:29:44,799
you know whatever what like we didn't

00:29:42,240 --> 00:29:47,279
use cnc plus plus because

00:29:44,799 --> 00:29:47,840
memory safety right bumper like go lang

00:29:47,279 --> 00:29:50,000
is it's

00:29:47,840 --> 00:29:51,120
it's much harder to write things with

00:29:50,000 --> 00:29:53,760
buffer overflows and

00:29:51,120 --> 00:29:55,440
and simple exploitable stuff um and we

00:29:53,760 --> 00:29:55,919
were gonna be dealing with with a lot of

00:29:55,440 --> 00:29:57,520
uh

00:29:55,919 --> 00:29:59,600
network traffic so we didn't want to

00:29:57,520 --> 00:30:01,279
expose our code to the internet without

00:29:59,600 --> 00:30:03,679
having decent memory safety

00:30:01,279 --> 00:30:05,039
uh the reason we used go honestly was

00:30:03,679 --> 00:30:07,919
because

00:30:05,039 --> 00:30:09,679
we knew that we could probably find more

00:30:07,919 --> 00:30:11,840
developers who would know

00:30:09,679 --> 00:30:13,200
how to write go than than some of the

00:30:11,840 --> 00:30:15,279
other alternatives so

00:30:13,200 --> 00:30:16,559
that may not be true long term but but

00:30:15,279 --> 00:30:19,279
that helped and one thing

00:30:16,559 --> 00:30:20,000
go i think doesn't get enough credit for

00:30:19,279 --> 00:30:22,720
is

00:30:20,000 --> 00:30:23,760
the fact that you can if you if you

00:30:22,720 --> 00:30:25,840
optimize

00:30:23,760 --> 00:30:28,080
how you write go you can start to remove

00:30:25,840 --> 00:30:30,000
the garbage collector from relevance so

00:30:28,080 --> 00:30:31,600
go allow us to prototype things very

00:30:30,000 --> 00:30:33,360
quickly and then

00:30:31,600 --> 00:30:35,520
when we needed a more performant version

00:30:33,360 --> 00:30:37,520
to swap it out right so go was

00:30:35,520 --> 00:30:39,039
go is a choice that we made you know

00:30:37,520 --> 00:30:41,440
pretty pretty early on

00:30:39,039 --> 00:30:43,360
we'd written some other things in it and

00:30:41,440 --> 00:30:46,240
if i had it to do over again i think we

00:30:43,360 --> 00:30:48,640
would have made the same decision

00:30:46,240 --> 00:30:50,000
um a little bit of funny history uh

00:30:48,640 --> 00:30:52,559
early versions of nebula

00:30:50,000 --> 00:30:53,919
had distributed hash tables so when we

00:30:52,559 --> 00:30:54,960
were thinking about the problems of how

00:30:53,919 --> 00:30:57,120
to

00:30:54,960 --> 00:30:59,360
discover nodes you know we have this

00:30:57,120 --> 00:31:01,440
what it wouldn't it be cool if

00:30:59,360 --> 00:31:02,799
there was no central source of truth

00:31:01,440 --> 00:31:04,080
like what if they could

00:31:02,799 --> 00:31:07,039
talk amongst themselves and figure it

00:31:04,080 --> 00:31:07,760
out there was dhd code in the code base

00:31:07,039 --> 00:31:10,880
for a while i

00:31:07,760 --> 00:31:11,519
experimented with that for better than a

00:31:10,880 --> 00:31:14,640
month

00:31:11,519 --> 00:31:17,279
if i remember right let's just say

00:31:14,640 --> 00:31:17,679
it didn't go well probably a lot of that

00:31:17,279 --> 00:31:20,000
is

00:31:17,679 --> 00:31:20,880
me not understanding it well enough but

00:31:20,000 --> 00:31:22,480
but also like

00:31:20,880 --> 00:31:24,480
you know i think the solution we came to

00:31:22,480 --> 00:31:25,679
was was actually much better than

00:31:24,480 --> 00:31:28,080
than sort of the direction we were

00:31:25,679 --> 00:31:30,000
headed um

00:31:28,080 --> 00:31:31,519
we actually the open source version

00:31:30,000 --> 00:31:32,559
nebula doesn't doesn't reflect this

00:31:31,519 --> 00:31:34,640
because we

00:31:32,559 --> 00:31:35,679
cut the history when we when we put it

00:31:34,640 --> 00:31:37,679
out in public but

00:31:35,679 --> 00:31:39,600
we actually threw way more code than

00:31:37,679 --> 00:31:40,399
than is actually in the nebula repo

00:31:39,600 --> 00:31:42,000
today like there was

00:31:40,399 --> 00:31:44,159
there were so many experiments that in

00:31:42,000 --> 00:31:47,279
nebula

00:31:44,159 --> 00:31:50,320
but one of the early bits of code

00:31:47,279 --> 00:31:51,760
is actually almost unchanged from its

00:31:50,320 --> 00:31:54,559
early iteration so

00:31:51,760 --> 00:31:55,039
the uh the firewall code actually came

00:31:54,559 --> 00:31:58,320
first

00:31:55,039 --> 00:32:01,360
before we went down the this path nate

00:31:58,320 --> 00:32:03,519
who's amazing at performance uh

00:32:01,360 --> 00:32:05,200
tuning and just programming in general

00:32:03,519 --> 00:32:07,120
he wanted to make sure that that

00:32:05,200 --> 00:32:08,559
our internal firewall could be fast

00:32:07,120 --> 00:32:09,360
enough to do this if it was written and

00:32:08,559 --> 00:32:12,320
go so

00:32:09,360 --> 00:32:13,360
that so before we even wrote any of the

00:32:12,320 --> 00:32:16,960
transport layer

00:32:13,360 --> 00:32:19,760
the firewall code was was created

00:32:16,960 --> 00:32:20,399
um you know we we knew that it had to

00:32:19,760 --> 00:32:22,960
scale

00:32:20,399 --> 00:32:24,480
uh so this was this was kind of a unique

00:32:22,960 --> 00:32:26,000
advantage like if i if

00:32:24,480 --> 00:32:28,080
i had wanted to create something like

00:32:26,000 --> 00:32:29,200
nebula but wasn't working at slack i

00:32:28,080 --> 00:32:29,919
think we would have made different

00:32:29,200 --> 00:32:33,279
decisions

00:32:29,919 --> 00:32:36,000
and facing the prospect

00:32:33,279 --> 00:32:36,960
of releasing this internally at slack to

00:32:36,000 --> 00:32:40,000
you know to

00:32:36,960 --> 00:32:42,320
a very large infrastructure right away

00:32:40,000 --> 00:32:43,360
meant we had to had to think about how

00:32:42,320 --> 00:32:46,000
to do that

00:32:43,360 --> 00:32:47,039
um and maintain you know uptime and all

00:32:46,000 --> 00:32:51,039
the important stuff

00:32:47,039 --> 00:32:52,880
um so at slack uh this actually involved

00:32:51,039 --> 00:32:54,880
orchestration via chef

00:32:52,880 --> 00:32:56,559
and and of direct fault integration so

00:32:54,880 --> 00:33:00,320
at slack

00:32:56,559 --> 00:33:02,159
nodes can can authenticate to volt with

00:33:00,320 --> 00:33:04,000
their nebula credentials which

00:33:02,159 --> 00:33:05,840
you know i if you i don't want to go

00:33:04,000 --> 00:33:06,720
down this rabbit hole too far but if

00:33:05,840 --> 00:33:08,799
you've

00:33:06,720 --> 00:33:09,760
used vault that's a very nice property

00:33:08,799 --> 00:33:12,960
to have like

00:33:09,760 --> 00:33:15,919
the the way it works at slack is

00:33:12,960 --> 00:33:16,640
you chef a new box it has a provisional

00:33:15,919 --> 00:33:18,799
cert

00:33:16,640 --> 00:33:19,679
that provisional nebula cert can only

00:33:18,799 --> 00:33:21,679
talk to

00:33:19,679 --> 00:33:22,880
the provisioner instance and the

00:33:21,679 --> 00:33:26,080
lighthouses

00:33:22,880 --> 00:33:29,679
and then uh once once it

00:33:26,080 --> 00:33:33,200
uh asks for a cert from that that uh

00:33:29,679 --> 00:33:37,360
that ca basically the ca

00:33:33,200 --> 00:33:39,360
uses aws's back end to verify that it is

00:33:37,360 --> 00:33:40,799
actually one of the nodes that we trust

00:33:39,360 --> 00:33:42,720
before giving it so there's there's a

00:33:40,799 --> 00:33:44,640
sort of three leg authentication

00:33:42,720 --> 00:33:47,200
process that goes on behind the scenes

00:33:44,640 --> 00:33:48,960
um that's not open sourced yet it it

00:33:47,200 --> 00:33:50,799
is unlikely to be because it was it was

00:33:48,960 --> 00:33:52,640
quite custom so we open source the parts

00:33:50,799 --> 00:33:54,080
of nebula that you know we're less

00:33:52,640 --> 00:33:56,640
custom to slack's

00:33:54,080 --> 00:33:58,399
use but i think there's a need here and

00:33:56,640 --> 00:34:00,880
that's sort of what we're working on

00:33:58,399 --> 00:34:02,720
at the new company right is how to how

00:34:00,880 --> 00:34:06,240
to deploy this at scale

00:34:02,720 --> 00:34:08,800
if you're not slack um

00:34:06,240 --> 00:34:10,399
so yeah uh that's that section there's

00:34:08,800 --> 00:34:11,679
probably not a lot of a lot of questions

00:34:10,399 --> 00:34:12,399
out of that one so i'm just gonna carry

00:34:11,679 --> 00:34:15,599
on

00:34:12,399 --> 00:34:17,520
so um this is a bit about uh

00:34:15,599 --> 00:34:19,679
oh yeah how i learned to stop worrying

00:34:17,520 --> 00:34:20,159
and love udp the technical deep dive

00:34:19,679 --> 00:34:22,800
here

00:34:20,159 --> 00:34:24,399
so the the first thing to know is we

00:34:22,800 --> 00:34:25,119
used something called the noise protocol

00:34:24,399 --> 00:34:28,960
framework

00:34:25,119 --> 00:34:29,599
uh we this is this is instead of using

00:34:28,960 --> 00:34:32,639
something like

00:34:29,599 --> 00:34:35,919
tls or in the case of udp dtls uh

00:34:32,639 --> 00:34:39,359
datagram tls the reason we did that was

00:34:35,919 --> 00:34:41,919
there's just so much uh sort of

00:34:39,359 --> 00:34:44,320
legacy croft at this point in you know

00:34:41,919 --> 00:34:46,879
tls 1.3 i don't think was really

00:34:44,320 --> 00:34:48,320
out out there yet but but in tls 1.2 and

00:34:46,879 --> 00:34:51,520
prior there's a lot of craft

00:34:48,320 --> 00:34:53,760
there's you know x509 has its issues um

00:34:51,520 --> 00:34:55,520
handshakes can be multiple round trips

00:34:53,760 --> 00:34:57,280
noise the noise protocol framework has

00:34:55,520 --> 00:35:00,160
some really nice properties where

00:34:57,280 --> 00:35:02,160
and and we use one of these which is a

00:35:00,160 --> 00:35:04,320
single round trip handshake so

00:35:02,160 --> 00:35:06,160
to to complete a nebula handshake it's

00:35:04,320 --> 00:35:07,119
one pack it out from the initiating host

00:35:06,160 --> 00:35:09,280
one packet back

00:35:07,119 --> 00:35:10,320
and now now you've stood up a tunnel and

00:35:09,280 --> 00:35:12,880
in tls

00:35:10,320 --> 00:35:14,480
you know that can be that can be three

00:35:12,880 --> 00:35:16,640
round trips i think in kind of the

00:35:14,480 --> 00:35:19,200
common case

00:35:16,640 --> 00:35:21,280
so the nebula certificate format is not

00:35:19,200 --> 00:35:22,800
x509 it's protobufs

00:35:21,280 --> 00:35:24,800
you know some people would say well why

00:35:22,800 --> 00:35:27,680
didn't you just use x5.9 we did

00:35:24,800 --> 00:35:29,359
we actually used an early version in an

00:35:27,680 --> 00:35:31,200
early version nate wrote a complete

00:35:29,359 --> 00:35:33,920
elliptic curve

00:35:31,200 --> 00:35:35,760
x 509 implementation for go because i

00:35:33,920 --> 00:35:39,200
don't think it existed yet

00:35:35,760 --> 00:35:41,040
um within go and

00:35:39,200 --> 00:35:44,079
you know it worked i mean we got it

00:35:41,040 --> 00:35:47,280
working but the initial packet size

00:35:44,079 --> 00:35:48,720
was was a bit troubling so a lot the

00:35:47,280 --> 00:35:51,280
internet has something called the

00:35:48,720 --> 00:35:53,839
internet minimum mtu which historically

00:35:51,280 --> 00:35:56,720
is like 576 bytes

00:35:53,839 --> 00:35:57,920
and you know above that you're not

00:35:56,720 --> 00:35:59,040
guaranteed that your packet won't

00:35:57,920 --> 00:36:00,880
fragment and then

00:35:59,040 --> 00:36:02,000
across the internet some routers drop

00:36:00,880 --> 00:36:03,359
fragmented packets like there's all

00:36:02,000 --> 00:36:04,960
kinds of stuff going on so

00:36:03,359 --> 00:36:07,040
so the short version of this is we

00:36:04,960 --> 00:36:08,000
wanted our handshakes to be as small as

00:36:07,040 --> 00:36:09,200
possible

00:36:08,000 --> 00:36:11,359
so that the chance they would be

00:36:09,200 --> 00:36:13,920
fragmented was was limited

00:36:11,359 --> 00:36:15,359
um x509 also you know if you wanted to

00:36:13,920 --> 00:36:16,640
do something like nebula security groups

00:36:15,359 --> 00:36:20,079
you'd have to use

00:36:16,640 --> 00:36:21,040
um maybe custom attributes in x509 or

00:36:20,079 --> 00:36:21,680
you know there's a lot of ways you could

00:36:21,040 --> 00:36:23,440
do it

00:36:21,680 --> 00:36:25,280
but that kind of eliminates the

00:36:23,440 --> 00:36:28,000
advantage of x 509 because

00:36:25,280 --> 00:36:29,760
you know if my um vault server doesn't

00:36:28,000 --> 00:36:32,000
understand anything about

00:36:29,760 --> 00:36:33,680
the types of x 509 certs i'm generating

00:36:32,000 --> 00:36:35,040
with these custom fields then

00:36:33,680 --> 00:36:36,320
you know what's the point and so

00:36:35,040 --> 00:36:37,040
protobuf gave us a couple of things it

00:36:36,320 --> 00:36:40,079
gave us much

00:36:37,040 --> 00:36:41,520
smaller certificates like i think our

00:36:40,079 --> 00:36:45,040
minimum search size is

00:36:41,520 --> 00:36:47,760
is in the dozens of bytes uh

00:36:45,040 --> 00:36:48,800
and and allowed us to uh also be a bit

00:36:47,760 --> 00:36:50,960
more expressive and

00:36:48,800 --> 00:36:52,720
and so we used protobufs like we just we

00:36:50,960 --> 00:36:55,680
just encrypt protobufs to uh

00:36:52,720 --> 00:36:57,280
to do the certificates in nebula um

00:36:55,680 --> 00:36:58,720
security groups are first class part of

00:36:57,280 --> 00:36:59,839
it so they're they're encoded right in

00:36:58,720 --> 00:37:01,920
the cert and enforced

00:36:59,839 --> 00:37:03,359
by each node individually there's no

00:37:01,920 --> 00:37:04,160
central source of truth for security

00:37:03,359 --> 00:37:05,920
groups which

00:37:04,160 --> 00:37:07,200
which is important and the lighthouse

00:37:05,920 --> 00:37:10,320
architecture is also

00:37:07,200 --> 00:37:12,000
a pretty interesting uh

00:37:10,320 --> 00:37:13,920
you know we took a pretty interesting

00:37:12,000 --> 00:37:14,800
path to the to doing the lighthouse the

00:37:13,920 --> 00:37:18,160
way we did it

00:37:14,800 --> 00:37:19,839
early on i was doing stuff just playing

00:37:18,160 --> 00:37:21,599
around with console

00:37:19,839 --> 00:37:23,599
uh in early versions of the lighthouse

00:37:21,599 --> 00:37:25,359
and we

00:37:23,599 --> 00:37:27,520
you know i was getting everything synced

00:37:25,359 --> 00:37:29,920
up and and like okay cool we can have

00:37:27,520 --> 00:37:32,960
this shared set of hosts and

00:37:29,920 --> 00:37:33,680
you know whatever but um i'd already

00:37:32,960 --> 00:37:35,359
seen

00:37:33,680 --> 00:37:37,920
you know folks discuss issues they've

00:37:35,359 --> 00:37:40,000
had with with you know console

00:37:37,920 --> 00:37:41,599
i i'm sure that it can be run reliably

00:37:40,000 --> 00:37:43,119
but i'd already seen reports of it you

00:37:41,599 --> 00:37:44,560
know having hiccups here and there

00:37:43,119 --> 00:37:46,000
and we needed this to be highly

00:37:44,560 --> 00:37:46,960
available so we just didn't want to

00:37:46,000 --> 00:37:50,079
chance it

00:37:46,960 --> 00:37:52,640
and so um what we

00:37:50,079 --> 00:37:54,400
what we ended up doing was saying why

00:37:52,640 --> 00:37:55,839
deal with eventual consistency these

00:37:54,400 --> 00:37:58,000
sort of raft style things

00:37:55,839 --> 00:37:59,280
when you can have uh perpetual

00:37:58,000 --> 00:38:02,560
inconsistency

00:37:59,280 --> 00:38:03,599
so at slack there are something like six

00:38:02,560 --> 00:38:05,680
lighthouses

00:38:03,599 --> 00:38:06,720
i don't know if that's still accurate um

00:38:05,680 --> 00:38:08,400
but

00:38:06,720 --> 00:38:09,520
they're they're globally distributed

00:38:08,400 --> 00:38:09,839
they don't actually know about each

00:38:09,520 --> 00:38:13,520
other

00:38:09,839 --> 00:38:17,040
right so each node uh reports itself

00:38:13,520 --> 00:38:18,480
to every every lighthouse independently

00:38:17,040 --> 00:38:20,560
and also when it wants to reach another

00:38:18,480 --> 00:38:22,800
node it queries them all independently

00:38:20,560 --> 00:38:23,920
and it aggregates the results itself uh

00:38:22,800 --> 00:38:25,280
there's other limitations like a

00:38:23,920 --> 00:38:26,480
lighthouse can't give more than 10

00:38:25,280 --> 00:38:28,720
answers so it's hard to

00:38:26,480 --> 00:38:29,839
ddos answers but basically this all

00:38:28,720 --> 00:38:32,320
means that the

00:38:29,839 --> 00:38:33,359
uh the lighthouses are not they are

00:38:32,320 --> 00:38:35,599
explicitly not

00:38:33,359 --> 00:38:37,760
trusted like a compromised lighthouse

00:38:35,599 --> 00:38:39,599
can't compel a host to talk to another

00:38:37,760 --> 00:38:42,079
host it can't even compel a host to

00:38:39,599 --> 00:38:43,200
stop talking to another host it can give

00:38:42,079 --> 00:38:44,880
bad answers

00:38:43,200 --> 00:38:47,359
but in the case of something like six

00:38:44,880 --> 00:38:48,000
lighthouses you know as long as one of

00:38:47,359 --> 00:38:50,400
them

00:38:48,000 --> 00:38:51,440
is is functioning the network just

00:38:50,400 --> 00:38:54,320
continues to work

00:38:51,440 --> 00:38:55,599
um and so you know that's one thing that

00:38:54,320 --> 00:38:57,520
we've worked hard to avoid

00:38:55,599 --> 00:38:58,720
is trusting the lighthouse with any of

00:38:57,520 --> 00:38:59,440
this when we start talking about things

00:38:58,720 --> 00:39:02,640
like uh

00:38:59,440 --> 00:39:03,839
like uh blacklisting people often say

00:39:02,640 --> 00:39:04,240
like well the lighthouses could do it

00:39:03,839 --> 00:39:05,680
but

00:39:04,240 --> 00:39:08,240
but there are reasons we we really want

00:39:05,680 --> 00:39:12,480
to avoid that um

00:39:08,240 --> 00:39:15,680
so we used aes uh noise lets you use aes

00:39:12,480 --> 00:39:19,440
or cha cha poly as as the encryption so

00:39:15,680 --> 00:39:20,720
um it's aes gcm and then cha-cha poly is

00:39:19,440 --> 00:39:22,880
actually what wireguard uses

00:39:20,720 --> 00:39:24,000
the the important difference here the

00:39:22,880 --> 00:39:27,119
only thing to really

00:39:24,000 --> 00:39:29,599
know is um if you have aes ni

00:39:27,119 --> 00:39:30,480
instructions which most intel cpus do

00:39:29,599 --> 00:39:33,119
these days

00:39:30,480 --> 00:39:34,240
then aes sometimes is generally a bit

00:39:33,119 --> 00:39:36,720
faster

00:39:34,240 --> 00:39:37,920
but if you have devices that don't which

00:39:36,720 --> 00:39:39,760
the majority of

00:39:37,920 --> 00:39:41,359
mobile phones don't have you know sort

00:39:39,760 --> 00:39:43,599
of a sni acceleration

00:39:41,359 --> 00:39:44,480
then cha cha poly is actually a superior

00:39:43,599 --> 00:39:46,800
choice so

00:39:44,480 --> 00:39:48,560
we have we support both uh but you have

00:39:46,800 --> 00:39:50,880
to choose network wide

00:39:48,560 --> 00:39:52,320
hey ryan just wanted to let you have

00:39:50,880 --> 00:39:55,520
five more

00:39:52,320 --> 00:39:59,280
minutes left for this first one cool

00:39:55,520 --> 00:40:02,560
um we're right on schedule thank you um

00:39:59,280 --> 00:40:04,640
so uh the so as an example slack

00:40:02,560 --> 00:40:06,000
slack runs it in aes mode and the reason

00:40:04,640 --> 00:40:07,359
they do that is this is mostly

00:40:06,000 --> 00:40:09,680
servers talking to other servers that

00:40:07,359 --> 00:40:11,599
have that acceleration my home network

00:40:09,680 --> 00:40:12,720
i have a bunch of raspberry pi's i have

00:40:11,599 --> 00:40:15,520
mobile devices

00:40:12,720 --> 00:40:17,520
i run it in cha cha poly mode um the the

00:40:15,520 --> 00:40:19,599
performance you sacrifice by using

00:40:17,520 --> 00:40:22,400
cha-cha poly on intel devices

00:40:19,599 --> 00:40:24,240
is pretty negligible at this point but

00:40:22,400 --> 00:40:26,800
if you have something like an older atom

00:40:24,240 --> 00:40:28,160
cpu that maybe has asni there's still a

00:40:26,800 --> 00:40:29,920
bit of an advantage so

00:40:28,160 --> 00:40:31,839
it's worth supporting both but but again

00:40:29,920 --> 00:40:32,880
you can't run in mixed mode so you have

00:40:31,839 --> 00:40:34,560
to decide

00:40:32,880 --> 00:40:37,119
for each nebula network which way you

00:40:34,560 --> 00:40:39,200
run um because there's no

00:40:37,119 --> 00:40:40,960
uh what's called crypto agility and it's

00:40:39,200 --> 00:40:42,800
it's you can go read about crypto

00:40:40,960 --> 00:40:47,680
agility and why it has been

00:40:42,800 --> 00:40:50,800
a headache um for for

00:40:47,680 --> 00:40:52,160
the internet uh for many many years uh

00:40:50,800 --> 00:40:54,319
we do something called hole punching

00:40:52,160 --> 00:40:56,960
which i don't know if i'll have uh

00:40:54,319 --> 00:40:58,160
too much time to explain but here's

00:40:56,960 --> 00:41:00,319
here's the

00:40:58,160 --> 00:41:02,160
here's the i made all these uh these

00:41:00,319 --> 00:41:03,680
images myself so that's why they don't

00:41:02,160 --> 00:41:05,599
look that cool but

00:41:03,680 --> 00:41:06,800
basically the way hole punching works is

00:41:05,599 --> 00:41:09,839
you have these uh

00:41:06,800 --> 00:41:10,640
these two firewalls and say change this

00:41:09,839 --> 00:41:14,400
so say

00:41:10,640 --> 00:41:16,240
this laptop wants to talk to um

00:41:14,400 --> 00:41:18,720
say this laptop wants to talk to this

00:41:16,240 --> 00:41:20,000
server the way it does it say i have a

00:41:18,720 --> 00:41:23,839
normal firewall i hit that

00:41:20,000 --> 00:41:26,720
firewall and then let me do some

00:41:23,839 --> 00:41:28,319
no that one uh when i when i actually

00:41:26,720 --> 00:41:29,200
make an outbound connection a udp

00:41:28,319 --> 00:41:32,319
connection

00:41:29,200 --> 00:41:32,800
it goes like this and now anything that

00:41:32,319 --> 00:41:34,960
comes

00:41:32,800 --> 00:41:36,720
back this direction from from these

00:41:34,960 --> 00:41:37,280
hosts will go into that firewall no

00:41:36,720 --> 00:41:39,119
problem

00:41:37,280 --> 00:41:41,280
like that's the the root of how hole

00:41:39,119 --> 00:41:41,920
punching works but when i send that

00:41:41,280 --> 00:41:44,800
packet

00:41:41,920 --> 00:41:45,920
this firewall this one here doesn't know

00:41:44,800 --> 00:41:51,520
anything about me

00:41:45,920 --> 00:41:51,520
right and so um let me clear that out

00:41:52,160 --> 00:41:59,520
so you know so i've sent this great

00:41:55,520 --> 00:42:02,000
um sorry bear with me

00:41:59,520 --> 00:42:02,560
um so i've sent that out but this one

00:42:02,000 --> 00:42:03,760
this one

00:42:02,560 --> 00:42:06,480
it just hits this firewall and doesn't

00:42:03,760 --> 00:42:08,960
go anywhere what udp hole punching does

00:42:06,480 --> 00:42:12,160
is in our case we use uh we use the

00:42:08,960 --> 00:42:12,160
lighthouses to do this

00:42:13,680 --> 00:42:20,560
that one nope oh

00:42:17,280 --> 00:42:22,480
get back apologies it was this one

00:42:20,560 --> 00:42:24,079
oh yeah the one that i drew grass on

00:42:22,480 --> 00:42:25,920
great so

00:42:24,079 --> 00:42:28,839
um so in this case if we want to do hole

00:42:25,920 --> 00:42:30,800
punching what we do

00:42:28,839 --> 00:42:34,319
is

00:42:30,800 --> 00:42:37,200
there we go we send

00:42:34,319 --> 00:42:38,160
we send actually uh we actually connect

00:42:37,200 --> 00:42:40,400
to this lighthouse

00:42:38,160 --> 00:42:41,520
and this lighthouse can help us discover

00:42:40,400 --> 00:42:43,359
the the right

00:42:41,520 --> 00:42:44,640
port combination that will allow us to

00:42:43,359 --> 00:42:46,480
talk to these nodes

00:42:44,640 --> 00:42:48,079
and what will happen is you know we make

00:42:46,480 --> 00:42:49,680
this outbound connection one of these

00:42:48,079 --> 00:42:52,079
packets is still going to fail

00:42:49,680 --> 00:42:53,839
but then the via the lighthouse a signal

00:42:52,079 --> 00:42:56,240
will reach this node saying hey

00:42:53,839 --> 00:42:57,200
you need to actually go this direction

00:42:56,240 --> 00:42:59,839
and open

00:42:57,200 --> 00:43:00,480
the equivalent hole the other direct the

00:42:59,839 --> 00:43:03,839
other

00:43:00,480 --> 00:43:05,839
the other way and so um so what ends up

00:43:03,839 --> 00:43:06,880
happening is via this this third party

00:43:05,839 --> 00:43:09,920
here the lighthouse

00:43:06,880 --> 00:43:10,800
you can actually signal out and even if

00:43:09,920 --> 00:43:12,720
you don't change

00:43:10,800 --> 00:43:14,640
any of these firewall configs you can

00:43:12,720 --> 00:43:16,400
have these two boxes talk directly to

00:43:14,640 --> 00:43:19,839
each other so hole punching is

00:43:16,400 --> 00:43:22,480
it's like a whole exercise in um

00:43:19,839 --> 00:43:25,359
in working around limitations of nap but

00:43:22,480 --> 00:43:28,400
it's it's pretty interesting

00:43:25,359 --> 00:43:30,800
um cool so wow

00:43:28,400 --> 00:43:31,599
uh one minute remaining in the first

00:43:30,800 --> 00:43:34,319
section

00:43:31,599 --> 00:43:35,599
before we go to the workshop so pretty

00:43:34,319 --> 00:43:37,680
on time here

00:43:35,599 --> 00:43:39,760
um i'm gonna pull up this picture of

00:43:37,680 --> 00:43:40,160
nate again so we can look at that while

00:43:39,760 --> 00:43:42,400
we

00:43:40,160 --> 00:43:44,079
while we hang out i'm sure he'll love

00:43:42,400 --> 00:43:45,839
that when he sees this later

00:43:44,079 --> 00:43:47,359
and uh yeah does anyone have any other

00:43:45,839 --> 00:43:50,240
quick questions before we take the

00:43:47,359 --> 00:43:50,240
15-minute break

00:43:53,119 --> 00:43:56,400
and just so you know when we come back

00:43:54,960 --> 00:43:58,079
so we're actually going to be sort of in

00:43:56,400 --> 00:43:59,359
a terminal looking at aws and we're

00:43:58,079 --> 00:44:02,720
going to stand up a

00:43:59,359 --> 00:44:04,240
nebula network and then uh also connect

00:44:02,720 --> 00:44:05,440
a mobile device to it and just sort of

00:44:04,240 --> 00:44:08,720
step through that so

00:44:05,440 --> 00:44:10,240
um you know we'll be back in uh in about

00:44:08,720 --> 00:44:11,760
15 minutes and

00:44:10,240 --> 00:44:15,119
i'll uh i'll turn it back over to the

00:44:11,760 --> 00:44:17,680
moderator and let me know if there are

00:44:15,119 --> 00:44:19,119
any questions uh that come up i'll still

00:44:17,680 --> 00:44:21,760
have my headphones in

00:44:19,119 --> 00:44:23,760
alright so um with that we're gonna dig

00:44:21,760 --> 00:44:26,800
into the workshop a bit

00:44:23,760 --> 00:44:29,920
and a lot of this is going to take place

00:44:26,800 --> 00:44:32,480
in um well not much of it will take

00:44:29,920 --> 00:44:33,920
place in the ec2 console thankfully

00:44:32,480 --> 00:44:35,520
but a lot of it will take place in a

00:44:33,920 --> 00:44:38,480
terminal and uh

00:44:35,520 --> 00:44:40,079
i'm actually going to start off so this

00:44:38,480 --> 00:44:43,359
this aws account is just a

00:44:40,079 --> 00:44:44,960
this just a test one and uh you can see

00:44:43,359 --> 00:44:46,560
i've actually terminated some instances

00:44:44,960 --> 00:44:48,560
so i'm filtering out

00:44:46,560 --> 00:44:50,319
uh to just show the running instances

00:44:48,560 --> 00:44:53,760
right now and that there are none

00:44:50,319 --> 00:44:55,359
in use in this region and

00:44:53,760 --> 00:44:57,599
what i'm going to do is actually just

00:44:55,359 --> 00:45:00,720
kick off

00:44:57,599 --> 00:45:03,520
kick off this ansible job that

00:45:00,720 --> 00:45:04,079
i'll let go in the background here and

00:45:03,520 --> 00:45:07,680
we should

00:45:04,079 --> 00:45:10,319
see some some instances pop up oh

00:45:07,680 --> 00:45:10,720
i might have left it at six well that's

00:45:10,319 --> 00:45:15,040
fine

00:45:10,720 --> 00:45:17,760
um luckily we have a little

00:45:15,040 --> 00:45:19,280
vc money to pay these bills now uh yeah

00:45:17,760 --> 00:45:22,960
i think i'm launching six of them

00:45:19,280 --> 00:45:25,520
um but we're just launching uh some c5

00:45:22,960 --> 00:45:26,079
2x larges in aws uh so that we can show

00:45:25,520 --> 00:45:27,359
this off

00:45:26,079 --> 00:45:29,280
and what's gonna happen here is it's

00:45:27,359 --> 00:45:31,280
gonna launch uh

00:45:29,280 --> 00:45:32,720
six fresh nodes and it's just going to

00:45:31,280 --> 00:45:33,680
randomly choose one to make the

00:45:32,720 --> 00:45:36,160
lighthouse so

00:45:33,680 --> 00:45:36,880
this this ansible script i wrote is

00:45:36,160 --> 00:45:39,839
actually

00:45:36,880 --> 00:45:41,280
a benchmarking kind of tool but it's

00:45:39,839 --> 00:45:42,560
it's useful because it'll stand up the

00:45:41,280 --> 00:45:43,440
network and then what we can do from

00:45:42,560 --> 00:45:45,440
there is

00:45:43,440 --> 00:45:46,960
kind of show what nebula looks like show

00:45:45,440 --> 00:45:48,560
some of the features of nebula

00:45:46,960 --> 00:45:50,720
and also we're going to connect a mobile

00:45:48,560 --> 00:45:54,079
device to to this infrastructure

00:45:50,720 --> 00:45:56,319
so um if i refresh this now

00:45:54,079 --> 00:45:57,920
yep i started oh they're four oh good

00:45:56,319 --> 00:46:00,880
those are more expensive we've started

00:45:57,920 --> 00:46:03,359
c5 forex largest so uh

00:46:00,880 --> 00:46:04,800
cool i'll talk fast so we can we can

00:46:03,359 --> 00:46:08,000
stop these quickly

00:46:04,800 --> 00:46:11,119
um let's see

00:46:08,000 --> 00:46:12,240
so um so one one funny side note like

00:46:11,119 --> 00:46:13,280
there are all these anecdotes about

00:46:12,240 --> 00:46:15,530
running nebula

00:46:13,280 --> 00:46:17,520
um one of the one of the

00:46:15,530 --> 00:46:19,040
[Music]

00:46:17,520 --> 00:46:21,599
funny things that happened recently is

00:46:19,040 --> 00:46:23,280
somebody showed up in

00:46:21,599 --> 00:46:24,880
i think it was the slack it might have

00:46:23,280 --> 00:46:28,240
been it

00:46:24,880 --> 00:46:30,160
might have been a github

00:46:28,240 --> 00:46:31,359
post but somebody somebody casually

00:46:30,160 --> 00:46:33,440
mentioned that

00:46:31,359 --> 00:46:35,200
hey we're running like they had they had

00:46:33,440 --> 00:46:36,720
an issue but they're like hey but

00:46:35,200 --> 00:46:38,160
but on the thousands of nodes where

00:46:36,720 --> 00:46:38,640
we're running nebula it's working fine

00:46:38,160 --> 00:46:40,240
and

00:46:38,640 --> 00:46:42,400
you know it's always it's always great

00:46:40,240 --> 00:46:43,760
to hear from folks who are already using

00:46:42,400 --> 00:46:45,760
it at scale because

00:46:43,760 --> 00:46:47,520
i've told people when we created this we

00:46:45,760 --> 00:46:49,359
knew we were super into it but we didn't

00:46:47,520 --> 00:46:52,319
know if anyone else would care

00:46:49,359 --> 00:46:52,640
and so it's been really nice uh to see

00:46:52,319 --> 00:46:54,560
the

00:46:52,640 --> 00:46:55,760
the community adoption and i think we're

00:46:54,560 --> 00:46:57,680
i think we've crossed the threshold

00:46:55,760 --> 00:47:00,079
we're at six thousand github stars in

00:46:57,680 --> 00:47:01,359
uh just just a bit under a year which

00:47:00,079 --> 00:47:04,000
which is great i mean

00:47:01,359 --> 00:47:05,440
it's a it's solving you know problems

00:47:04,000 --> 00:47:08,880
that people actually have and

00:47:05,440 --> 00:47:12,240
and i use it personally every day

00:47:08,880 --> 00:47:14,240
uh it's it's how i run my

00:47:12,240 --> 00:47:15,599
my entire personal network and one of

00:47:14,240 --> 00:47:19,040
the nice things about nebula is

00:47:15,599 --> 00:47:20,800
um you know you you stop caring about

00:47:19,040 --> 00:47:21,760
what ip a device has anywhere in the

00:47:20,800 --> 00:47:22,880
world so

00:47:21,760 --> 00:47:24,800
i like to call it you know sort of

00:47:22,880 --> 00:47:27,520
location agnostic connectivity like

00:47:24,800 --> 00:47:28,880
i have 3d printers here in the house um

00:47:27,520 --> 00:47:32,079
i have

00:47:28,880 --> 00:47:34,559
things at my office i have uh things

00:47:32,079 --> 00:47:35,599
back you know where i'm from at my at my

00:47:34,559 --> 00:47:37,599
mom's place

00:47:35,599 --> 00:47:39,359
and all those things are on one seamless

00:47:37,599 --> 00:47:40,000
network and what's what's funny about it

00:47:39,359 --> 00:47:41,680
is

00:47:40,000 --> 00:47:44,079
once you get used to nebula you actually

00:47:41,680 --> 00:47:46,160
forget where some of your devices are

00:47:44,079 --> 00:47:48,000
like i've actually i've had this happen

00:47:46,160 --> 00:47:49,760
where more than once i've had to you

00:47:48,000 --> 00:47:52,960
know go back and

00:47:49,760 --> 00:47:56,000
look up uh like like

00:47:52,960 --> 00:47:56,559
do an ip look up like you know have a

00:47:56,000 --> 00:47:59,359
box

00:47:56,559 --> 00:48:00,720
curl what is my ip or one of those uh

00:47:59,359 --> 00:48:02,960
just so i know where it is

00:48:00,720 --> 00:48:04,960
because um you you really start to

00:48:02,960 --> 00:48:07,920
forget that when you get the the nice

00:48:04,960 --> 00:48:09,200
connectivity that that nebula brings um

00:48:07,920 --> 00:48:10,720
so what i'm going to do is i'm just

00:48:09,200 --> 00:48:11,359
going to randomly pick one of these

00:48:10,720 --> 00:48:15,520
hosts

00:48:11,359 --> 00:48:17,839
and we'll see if i can ssh in

00:48:15,520 --> 00:48:18,640
uh yeah it should be at the point where

00:48:17,839 --> 00:48:20,960
i can

00:48:18,640 --> 00:48:23,680
um it's installing a good number of

00:48:20,960 --> 00:48:26,880
tools oh cool my user's already created

00:48:23,680 --> 00:48:29,760
um so i'm starting tmux into tmox

00:48:26,880 --> 00:48:30,720
exhibit would be very happy about this

00:48:29,760 --> 00:48:33,040
and then i have

00:48:30,720 --> 00:48:34,559
i have a tmux file set up so i can just

00:48:33,040 --> 00:48:35,680
do a hotkey here

00:48:34,559 --> 00:48:38,079
and it's going to launch a bunch of

00:48:35,680 --> 00:48:41,520
windows with bunch of information

00:48:38,079 --> 00:48:44,000
and let's see

00:48:41,520 --> 00:48:45,520
i don't have a nebula ip quite yet so

00:48:44,000 --> 00:48:48,480
that's the last step

00:48:45,520 --> 00:48:49,760
in here but oh we're copying the nebula

00:48:48,480 --> 00:48:53,040
certs and binaries

00:48:49,760 --> 00:48:56,480
and again this um this

00:48:53,040 --> 00:48:59,839
this is six nodes but if i change

00:48:56,480 --> 00:49:01,280
one variable in this ansible script it

00:48:59,839 --> 00:49:04,160
could be a hundred right like it

00:49:01,280 --> 00:49:06,079
it really doesn't matter and because of

00:49:04,160 --> 00:49:09,440
that just-in-time provisioning

00:49:06,079 --> 00:49:12,160
i can just add i could go back and add

00:49:09,440 --> 00:49:14,240
you know 50 more nodes and not tell

00:49:12,160 --> 00:49:14,559
these initial nodes anything about them

00:49:14,240 --> 00:49:16,240
and

00:49:14,559 --> 00:49:17,680
and still they'll they'll discover each

00:49:16,240 --> 00:49:18,640
other via the light houses and they'll

00:49:17,680 --> 00:49:21,680
have connectivity

00:49:18,640 --> 00:49:25,200
so uh just to give you a little tour of

00:49:21,680 --> 00:49:27,440
what we're looking at here um so

00:49:25,200 --> 00:49:28,640
h top just to look at you know sort of

00:49:27,440 --> 00:49:32,240
cpu and

00:49:28,640 --> 00:49:34,640
memory we have uh iftop

00:49:32,240 --> 00:49:36,640
which is just so we can see packet flows

00:49:34,640 --> 00:49:40,559
right under there

00:49:36,640 --> 00:49:43,520
let me see eq so number number two is

00:49:40,559 --> 00:49:45,359
uh is h top three is if top uh at the

00:49:43,520 --> 00:49:48,720
bottom is just the nebula log

00:49:45,359 --> 00:49:50,800
output um i

00:49:48,720 --> 00:49:52,240
find it funny that one of the ways to

00:49:50,800 --> 00:49:55,760
follow logs

00:49:52,240 --> 00:49:55,760
i this is the syntax i know

00:49:56,079 --> 00:50:01,280
is dash fu nebula um which

00:49:59,280 --> 00:50:02,480
i don't know i chuckle every time i type

00:50:01,280 --> 00:50:04,000
that uh

00:50:02,480 --> 00:50:05,920
but like that's what's that's what's

00:50:04,000 --> 00:50:07,599
down here is just uh

00:50:05,920 --> 00:50:10,880
the nebula log file so that i can show

00:50:07,599 --> 00:50:16,160
you some things in regards to nebula and

00:50:10,880 --> 00:50:16,160
yep and we're all done so um

00:50:16,800 --> 00:50:22,000
back here cool so we have

00:50:20,160 --> 00:50:24,079
actually a bunch of interfaces stood up

00:50:22,000 --> 00:50:26,000
uh if you hadn't noticed there were only

00:50:24,079 --> 00:50:28,559
a couple at the start uh you may

00:50:26,000 --> 00:50:31,760
recognize what some of those are

00:50:28,559 --> 00:50:32,240
but off the bat um so one of the things

00:50:31,760 --> 00:50:33,920
that

00:50:32,240 --> 00:50:35,440
that you know i think is is really

00:50:33,920 --> 00:50:39,119
important to know

00:50:35,440 --> 00:50:42,240
about about nebula is it's designed for

00:50:39,119 --> 00:50:44,319
use in a devops environment where maybe

00:50:42,240 --> 00:50:46,400
you know so each host has a lot of

00:50:44,319 --> 00:50:49,920
tunnels and maybe you don't want to

00:50:46,400 --> 00:50:52,319
restart the the tunnels every time

00:50:49,920 --> 00:50:53,280
you uh you make a change to something

00:50:52,319 --> 00:50:56,319
like the firewall

00:50:53,280 --> 00:50:58,640
right so um let's see nebula

00:50:56,319 --> 00:50:59,760
config so this is where the config lives

00:50:58,640 --> 00:51:01,359
for this particular host

00:50:59,760 --> 00:51:04,400
and yeah you can go and steal the

00:51:01,359 --> 00:51:06,880
private key um that's fine

00:51:04,400 --> 00:51:08,400
if you if you get there in the next 40

00:51:06,880 --> 00:51:11,680
32 minutes

00:51:08,400 --> 00:51:15,680
uh more power to you um

00:51:11,680 --> 00:51:17,440
so let me go through this so

00:51:15,680 --> 00:51:19,040
down at the bottom here is the simple

00:51:17,440 --> 00:51:19,920
firewall config i have set up on this

00:51:19,040 --> 00:51:22,400
box so

00:51:19,920 --> 00:51:23,359
you know we we actually can filter based

00:51:22,400 --> 00:51:25,520
on a number of

00:51:23,359 --> 00:51:27,040
a number of uh certificate identifiers

00:51:25,520 --> 00:51:30,400
for each host like you can do

00:51:27,040 --> 00:51:33,599
uh this one is host um

00:51:30,400 --> 00:51:35,440
you might recognize 5201 as the iperf

00:51:33,599 --> 00:51:37,200
we just allow anything on this nebula

00:51:35,440 --> 00:51:40,079
network to connect to it

00:51:37,200 --> 00:51:41,119
and then in this group um one one

00:51:40,079 --> 00:51:43,200
example i like to

00:51:41,119 --> 00:51:44,400
to show people is with something like

00:51:43,200 --> 00:51:47,440
like

00:51:44,400 --> 00:51:49,200
uh ssh if you want to prevent lateral

00:51:47,440 --> 00:51:51,520
movement within a network what you can

00:51:49,200 --> 00:51:52,240
do is just give your bastians a group

00:51:51,520 --> 00:51:55,760
like uh

00:51:52,240 --> 00:51:57,040
bastian and only allow them to ssh to

00:51:55,760 --> 00:51:58,559
things right like that's a that's a

00:51:57,040 --> 00:52:02,000
pretty powerful construct

00:51:58,559 --> 00:52:04,079
and one thing that i i'd love to see

00:52:02,000 --> 00:52:05,680
in the in the future is people actually

00:52:04,079 --> 00:52:08,079
alerting on

00:52:05,680 --> 00:52:09,200
uh nebula firewall misses like you know

00:52:08,079 --> 00:52:10,800
generally you won't

00:52:09,200 --> 00:52:12,480
like generally you ignore your firewall

00:52:10,800 --> 00:52:13,200
logs because they're just riddled with

00:52:12,480 --> 00:52:15,839
nonsense

00:52:13,200 --> 00:52:16,559
but to actually attempt an ssh

00:52:15,839 --> 00:52:18,079
connection

00:52:16,559 --> 00:52:20,480
on a nebula network you have to be

00:52:18,079 --> 00:52:21,760
authenticated so the signal value is

00:52:20,480 --> 00:52:24,480
actually very high

00:52:21,760 --> 00:52:25,920
uh for things like why is this box

00:52:24,480 --> 00:52:27,839
connecting to

00:52:25,920 --> 00:52:29,280
a thousand ports that that it doesn't

00:52:27,839 --> 00:52:31,760
have access to like

00:52:29,280 --> 00:52:33,280
you know you'd never put that rule in in

00:52:31,760 --> 00:52:34,640
any kind of a learning pipeline

00:52:33,280 --> 00:52:36,480
for a host that's just on the internet

00:52:34,640 --> 00:52:37,520
but on a nebula network it's actually

00:52:36,480 --> 00:52:40,559
quite interesting

00:52:37,520 --> 00:52:40,960
the way i like to explain it is at in in

00:52:40,559 --> 00:52:42,400
the

00:52:40,960 --> 00:52:44,079
non-nefarious case it's a it's a

00:52:42,400 --> 00:52:46,240
misconfiguration and in the nefarious

00:52:44,079 --> 00:52:48,960
case like it might be somebody that is

00:52:46,240 --> 00:52:50,640
now accessing one of your hosts and and

00:52:48,960 --> 00:52:54,800
you'd like to know about that

00:52:50,640 --> 00:52:58,880
um so let me show you

00:52:54,800 --> 00:52:58,880
what a nebula certificate looks like uh

00:52:59,119 --> 00:53:04,000
temp is that where i put them yeah

00:53:02,160 --> 00:53:05,760
nebula so there's there's two main

00:53:04,000 --> 00:53:08,319
there's two uh binaries

00:53:05,760 --> 00:53:09,680
if you build nebula i think i've like

00:53:08,319 --> 00:53:10,319
here i'll just make it for every

00:53:09,680 --> 00:53:14,720
platform

00:53:10,319 --> 00:53:17,359
um so make all

00:53:14,720 --> 00:53:18,640
so you know that's one other nice thing

00:53:17,359 --> 00:53:19,760
by the way about using go is you can

00:53:18,640 --> 00:53:22,079
just compile it for all these

00:53:19,760 --> 00:53:22,880
platforms including mips it runs on my

00:53:22,079 --> 00:53:25,680
ubiquity

00:53:22,880 --> 00:53:26,839
router somehow um not fast but it does

00:53:25,680 --> 00:53:30,240
work

00:53:26,839 --> 00:53:32,160
um so you know you have nebula nebula

00:53:30,240 --> 00:53:35,760
cert and nebula cert you can do

00:53:32,160 --> 00:53:35,760
introspection like uh

00:53:36,480 --> 00:53:40,240
insert print dash path

00:53:40,400 --> 00:53:47,280
define that root dot ca

00:53:43,599 --> 00:53:48,720
dot um so that's that's actually what

00:53:47,280 --> 00:53:52,160
the protobuf

00:53:48,720 --> 00:53:52,559
uh shows for this one so uh the name

00:53:52,160 --> 00:53:56,319
isn't

00:53:52,559 --> 00:53:57,040
very good uh it expires in over 100

00:53:56,319 --> 00:53:59,680
years

00:53:57,040 --> 00:54:01,200
so that's probably don't do that but hey

00:53:59,680 --> 00:54:03,520
this is this is okay

00:54:01,200 --> 00:54:04,800
um and then you can see that this is a

00:54:03,520 --> 00:54:06,400
ca certificate so

00:54:04,800 --> 00:54:08,480
that means this certificate can be used

00:54:06,400 --> 00:54:09,920
to sign other certificates

00:54:08,480 --> 00:54:11,680
uh and then you have some some

00:54:09,920 --> 00:54:13,040
fingerprints one other thing to know

00:54:11,680 --> 00:54:14,960
about

00:54:13,040 --> 00:54:16,559
uh those firewall rules is you can

00:54:14,960 --> 00:54:18,960
actually bind to

00:54:16,559 --> 00:54:19,599
a ca so i don't want to spend too much

00:54:18,960 --> 00:54:22,000
time on this

00:54:19,599 --> 00:54:23,040
but what it means is like you can have

00:54:22,000 --> 00:54:25,760
multiple routes

00:54:23,040 --> 00:54:27,359
in your in your trusted ca list and then

00:54:25,760 --> 00:54:29,040
you can have different firewall rules

00:54:27,359 --> 00:54:31,119
based on which ca

00:54:29,040 --> 00:54:33,520
uh somebody's certificate belongs to

00:54:31,119 --> 00:54:36,640
which is which is also quite powerful

00:54:33,520 --> 00:54:39,839
um so yeah so let me

00:54:36,640 --> 00:54:39,839
pick another host here

00:54:39,920 --> 00:54:45,520
and see

00:54:43,680 --> 00:54:46,720
of course i cleared my screen because i

00:54:45,520 --> 00:54:50,000
do that

00:54:46,720 --> 00:54:50,559
way too often and we'll go back here and

00:54:50,000 --> 00:54:54,720
sh

00:54:50,559 --> 00:54:58,000
that one tmox that

00:54:54,720 --> 00:55:01,119
all right which one has this

00:54:58,000 --> 00:55:04,160
this is 3.5

00:55:01,119 --> 00:55:05,599
and this is oh wow

00:55:04,160 --> 00:55:07,359
all right so i am on the on the

00:55:05,599 --> 00:55:11,119
lighthouse and so

00:55:07,359 --> 00:55:12,640
um what i'm going to do here is just

00:55:11,119 --> 00:55:14,799
demonstrate what it looks like to use

00:55:12,640 --> 00:55:18,000
the security group so i'm going to do

00:55:14,799 --> 00:55:21,040
install telnet that'll be funny dash

00:55:18,000 --> 00:55:24,160
l i'm just setting up

00:55:21,040 --> 00:55:28,799
l p i don't know 8 1 2

00:55:24,160 --> 00:55:28,799
2. of course i didn't

00:55:30,000 --> 00:55:35,599
there we go all right so i'm just

00:55:33,200 --> 00:55:37,040
setting up a normal uh tcp listener on

00:55:35,599 --> 00:55:39,200
this host i don't remember what my

00:55:37,040 --> 00:55:44,799
nebula rules are so this may just work

00:55:39,200 --> 00:55:44,799
um and what i'm going to do is telnet to

00:55:45,640 --> 00:55:48,079
100.64.0. and by the way you can pick

00:55:47,520 --> 00:55:51,520
whatever

00:55:48,079 --> 00:55:55,200
address scheme you want for nebula 64.5

00:55:51,520 --> 00:55:58,079
on port 8122

00:55:55,200 --> 00:55:58,079
all right so

00:55:58,319 --> 00:56:03,839
there we go yeah so i did allow it right

00:56:01,599 --> 00:56:05,680
so i have this port open oops i didn't

00:56:03,839 --> 00:56:08,160
mean to what do i do about that

00:56:05,680 --> 00:56:08,799
well in nebula all of the rules are

00:56:08,160 --> 00:56:11,599
enforced

00:56:08,799 --> 00:56:12,799
on the receiver side so on this host

00:56:11,599 --> 00:56:16,160
what i'll do is go into

00:56:12,799 --> 00:56:16,160
etsy nebula

00:56:18,720 --> 00:56:22,559
and there's probably yeah there's so

00:56:20,319 --> 00:56:24,400
there's so don't do this by the way like

00:56:22,559 --> 00:56:26,400
this is this is kind of the cautionary

00:56:24,400 --> 00:56:27,520
tale anything in my nebula network can

00:56:26,400 --> 00:56:29,200
talk to anything else

00:56:27,520 --> 00:56:30,960
that's obviously one way you can run it

00:56:29,200 --> 00:56:33,839
but but i really do recommend

00:56:30,960 --> 00:56:35,040
trying to segment when possible so what

00:56:33,839 --> 00:56:35,680
we're going to do is just get rid of

00:56:35,040 --> 00:56:38,319
this

00:56:35,680 --> 00:56:39,119
rule that allows everything to talk to

00:56:38,319 --> 00:56:42,960
everything

00:56:39,119 --> 00:56:44,480
and instead of restarting nebula

00:56:42,960 --> 00:56:47,599
which you know you might be inclined to

00:56:44,480 --> 00:56:50,720
do um

00:56:47,599 --> 00:56:51,359
let's look for the nebula process all

00:56:50,720 --> 00:56:55,119
right

00:56:51,359 --> 00:56:58,960
it is one two three four six just missed

00:56:55,119 --> 00:57:00,319
all right so sudo

00:56:58,960 --> 00:57:03,119
and by the way we should see that

00:57:00,319 --> 00:57:06,319
reflected down here i believe

00:57:03,119 --> 00:57:06,640
uh one two three four six yep there you

00:57:06,319 --> 00:57:09,040
go

00:57:06,640 --> 00:57:09,680
so uh what happened there is i didn't

00:57:09,040 --> 00:57:12,400
even kill

00:57:09,680 --> 00:57:15,200
any of the existing tunnels and this has

00:57:12,400 --> 00:57:17,200
reloaded its firewall config

00:57:15,200 --> 00:57:18,240
refreshed its certificate in case a new

00:57:17,200 --> 00:57:20,400
one popped up

00:57:18,240 --> 00:57:21,839
uh all without starting the proc without

00:57:20,400 --> 00:57:23,119
restarting the process

00:57:21,839 --> 00:57:25,200
especially in a production environment

00:57:23,119 --> 00:57:27,119
that's really handy and so now

00:57:25,200 --> 00:57:28,559
you can see all right cool i can't

00:57:27,119 --> 00:57:30,559
connect to it anymore right

00:57:28,559 --> 00:57:31,839
um if you tcp dump the nebula interface

00:57:30,559 --> 00:57:33,280
you won't even see the the traffic

00:57:31,839 --> 00:57:34,960
attempting to come in because

00:57:33,280 --> 00:57:36,559
it's it's happening at the nebula layer

00:57:34,960 --> 00:57:37,119
so the the traffic is just no longer

00:57:36,559 --> 00:57:38,480
allowed

00:57:37,119 --> 00:57:40,960
and again you know that's one of the

00:57:38,480 --> 00:57:43,359
differences that nebula has versus

00:57:40,960 --> 00:57:45,599
uh sort of traditional vpns is we we do

00:57:43,359 --> 00:57:49,040
all of the firewall stuff internally

00:57:45,599 --> 00:57:51,760
most most sort of vpn solutions don't

00:57:49,040 --> 00:57:52,640
don't do that some do but we we really

00:57:51,760 --> 00:57:54,319
felt like the

00:57:52,640 --> 00:57:56,319
the performance we were getting out of

00:57:54,319 --> 00:57:57,920
this was was more than sufficient

00:57:56,319 --> 00:57:59,520
and we're we're really happy with the

00:57:57,920 --> 00:58:02,960
implementation and

00:57:59,520 --> 00:58:05,520
let me just do um let's see

00:58:02,960 --> 00:58:06,000
one or two so this is the classic iperf

00:58:05,520 --> 00:58:07,839
test

00:58:06,000 --> 00:58:09,280
and i'm going to do oh let's do eyebrow

00:58:07,839 --> 00:58:10,640
three actually

00:58:09,280 --> 00:58:12,319
and i'm gonna i'm gonna show you

00:58:10,640 --> 00:58:16,160
something about iperf

00:58:12,319 --> 00:58:18,640
uh that that i think leads people astray

00:58:16,160 --> 00:58:19,839
a bit when they're thinking about uh

00:58:18,640 --> 00:58:23,440
sort of performance

00:58:19,839 --> 00:58:25,839
right um a lot of people will go

00:58:23,440 --> 00:58:27,200
hop on a box run iperf and say oh well

00:58:25,839 --> 00:58:29,359
that's how fast something is

00:58:27,200 --> 00:58:30,960
but but it it can hide some of the

00:58:29,359 --> 00:58:33,040
underlying reasons

00:58:30,960 --> 00:58:34,720
in in really important ways so in this

00:58:33,040 --> 00:58:38,000
case let me connect to

00:58:34,720 --> 00:58:41,359
this nebula ip uh it was five i think

00:58:38,000 --> 00:58:43,520
um dash t100 oh

00:58:41,359 --> 00:58:45,119
and i want to point so this is the first

00:58:43,520 --> 00:58:46,240
this should be the first time

00:58:45,119 --> 00:58:49,040
no it won't be the first time those

00:58:46,240 --> 00:58:52,240
boxes are talking actually um

00:58:49,040 --> 00:58:53,760
let me restart oops i did it on the

00:58:52,240 --> 00:58:57,280
wrong one

00:58:53,760 --> 00:58:59,359
nothing like the live demo uh somebody

00:58:57,280 --> 00:59:00,480
is asking which ubiquity router i have i

00:58:59,359 --> 00:59:02,559
have the

00:59:00,480 --> 00:59:03,839
unifi security gateway so just like the

00:59:02,559 --> 00:59:06,240
usg

00:59:03,839 --> 00:59:08,160
it's it's the slowest mip cpu i think i

00:59:06,240 --> 00:59:10,799
get a solid 20 megabit

00:59:08,160 --> 00:59:12,720
uh out of nebula um but it is handy

00:59:10,799 --> 00:59:15,359
because i can connect back to it

00:59:12,720 --> 00:59:15,839
without knowing that ip so yeah i

00:59:15,359 --> 00:59:18,960
actually

00:59:15,839 --> 00:59:22,240
looked at a question off the side

00:59:18,960 --> 00:59:24,480
all right so

00:59:22,240 --> 00:59:26,319
let me just restart nebula so service

00:59:24,480 --> 00:59:28,079
and the reason i'm doing this is to

00:59:26,319 --> 00:59:30,839
get rid of the existing tunnel because i

00:59:28,079 --> 00:59:33,520
want to show you something important

00:59:30,839 --> 00:59:36,000
here

00:59:33,520 --> 00:59:37,520
all right so if i go back to this host

00:59:36,000 --> 00:59:41,680
you'll see

00:59:37,520 --> 00:59:43,440
uh close tunnel received uh

00:59:41,680 --> 00:59:44,799
and they did handshake again oh right

00:59:43,440 --> 00:59:46,160
because i'm on the lighthouse so it's

00:59:44,799 --> 00:59:46,640
reporting itself to lighthouse all the

00:59:46,160 --> 00:59:50,480
time

00:59:46,640 --> 00:59:51,359
um so that's fine they have a handshake

00:59:50,480 --> 00:59:53,200
but they've barely

00:59:51,359 --> 01:00:00,400
they've exchanged only a few packets so

00:59:53,200 --> 01:00:02,799
now let's go up here

01:00:00,400 --> 01:00:04,480
that and what i'm going to do is start

01:00:02,799 --> 01:00:06,079
an iperf test and this is just going to

01:00:04,480 --> 01:00:06,400
send a bunch of tcp traffic to the other

01:00:06,079 --> 01:00:10,319
one

01:00:06,400 --> 01:00:12,559
what i want you to watch here is um

01:00:10,319 --> 01:00:14,720
this third pane so the one that's kind

01:00:12,559 --> 01:00:15,680
of highlighted in green right now

01:00:14,720 --> 01:00:18,079
you're going to see something

01:00:15,680 --> 01:00:19,119
interesting here and i'll explain why in

01:00:18,079 --> 01:00:20,880
a minute

01:00:19,119 --> 01:00:22,720
let's do let's actually just do a short

01:00:20,880 --> 01:00:25,760
test

01:00:22,720 --> 01:00:28,160
so that's not very fast right

01:00:25,760 --> 01:00:28,799
like you see that oh wait what's

01:00:28,160 --> 01:00:32,000
happening now

01:00:28,799 --> 01:00:34,480
now it's really fast um and

01:00:32,000 --> 01:00:35,920
and so blink and you would miss it but

01:00:34,480 --> 01:00:39,440
what has happened here

01:00:35,920 --> 01:00:42,640
is nebula started off by

01:00:39,440 --> 01:00:43,839
handshaking with uh let me highlight it

01:00:42,640 --> 01:00:47,119
here

01:00:43,839 --> 01:00:49,040
is that the one that's not me yeah

01:00:47,119 --> 01:00:52,079
so that's that's the host that i was

01:00:49,040 --> 01:00:53,520
just uh sending the iperf stream to

01:00:52,079 --> 01:00:55,119
and it did a handshake with that and it

01:00:53,520 --> 01:00:57,599
was working fine but what

01:00:55,119 --> 01:00:59,680
what we actually do inside of nebula is

01:00:57,599 --> 01:01:02,079
uh we have a packet based

01:00:59,680 --> 01:01:03,920
uh counter that says okay if there's a

01:01:02,079 --> 01:01:05,839
lot of traffic going between these hosts

01:01:03,920 --> 01:01:07,520
we should we should ask the lighthouse

01:01:05,839 --> 01:01:09,680
like pretty regularly

01:01:07,520 --> 01:01:11,200
if there's a better path and so that's

01:01:09,680 --> 01:01:13,680
what you can see here so

01:01:11,200 --> 01:01:15,599
so like up here you'll see that uh you

01:01:13,680 --> 01:01:18,319
know we were going really slow

01:01:15,599 --> 01:01:19,040
like 10 megabit uh just for a few

01:01:18,319 --> 01:01:21,200
seconds

01:01:19,040 --> 01:01:22,319
and then suddenly we're going 7.3

01:01:21,200 --> 01:01:25,520
gigabit right

01:01:22,319 --> 01:01:28,000
and the reason that happened is because

01:01:25,520 --> 01:01:28,559
uh this host asks the lighthouse hey do

01:01:28,000 --> 01:01:30,960
you have any

01:01:28,559 --> 01:01:32,240
other answers that i could try and it

01:01:30,960 --> 01:01:34,480
actually upgraded

01:01:32,240 --> 01:01:36,240
and so instead of using this to connect

01:01:34,480 --> 01:01:38,160
which is the routable ip

01:01:36,240 --> 01:01:39,520
it used this to connect which is the

01:01:38,160 --> 01:01:41,520
local ip right

01:01:39,520 --> 01:01:43,200
and that's when we saw this upgrade to

01:01:41,520 --> 01:01:45,359
7.3

01:01:43,200 --> 01:01:46,799
ish gigabit um one of the other nice

01:01:45,359 --> 01:01:48,240
things is uh

01:01:46,799 --> 01:01:50,160
you know you don't get a lot of packet

01:01:48,240 --> 01:01:51,440
retransmits in nebula once you have a

01:01:50,160 --> 01:01:53,680
nice tunnel set up

01:01:51,440 --> 01:01:55,440
um but this also leads to another

01:01:53,680 --> 01:01:58,799
question hey ryan

01:01:55,440 --> 01:02:01,200
why why was nebula going so slow here

01:01:58,799 --> 01:02:02,160
uh that was an interesting discovery

01:02:01,200 --> 01:02:04,640
early on

01:02:02,160 --> 01:02:08,079
and the reason is because in this

01:02:04,640 --> 01:02:08,079
particular instance um

01:02:08,400 --> 01:02:14,880
we are ipa there we go

01:02:11,680 --> 01:02:18,160
we are running nebula uh

01:02:14,880 --> 01:02:21,359
with a uh an mtu of 8600.

01:02:18,160 --> 01:02:22,000
um the reason it goes slow is because

01:02:21,359 --> 01:02:26,079
amazon

01:02:22,000 --> 01:02:29,200
hates ip fragments if you use a jumbo

01:02:26,079 --> 01:02:31,680
mtu and send traffic uh

01:02:29,200 --> 01:02:33,359
across even even between two aws

01:02:31,680 --> 01:02:35,520
instances but across the internet

01:02:33,359 --> 01:02:36,799
right so that was that was a routable ip

01:02:35,520 --> 01:02:39,760
that we saw before

01:02:36,799 --> 01:02:40,960
they they severely limit your your

01:02:39,760 --> 01:02:42,799
bandwidth right like

01:02:40,960 --> 01:02:44,880
they knock you down pretty quickly to

01:02:42,799 --> 01:02:46,880
that that 10 megabit number

01:02:44,880 --> 01:02:48,240
um and it's consistently 10 megabit it's

01:02:46,880 --> 01:02:49,280
just part of what their software defined

01:02:48,240 --> 01:02:50,799
network does

01:02:49,280 --> 01:02:52,319
and and the reason for that is if you

01:02:50,799 --> 01:02:54,079
have a lot of ip fragments those

01:02:52,319 --> 01:02:54,640
fragments take up memory on routers and

01:02:54,079 --> 01:02:56,400
like

01:02:54,640 --> 01:02:57,839
it's a vector for denial of service so

01:02:56,400 --> 01:03:00,799
it's entirely defensible

01:02:57,839 --> 01:03:01,200
for them to do it um but it means that

01:03:00,799 --> 01:03:03,520
that

01:03:01,200 --> 01:03:05,200
you have to be aware of of your routes

01:03:03,520 --> 01:03:06,720
and so nebula actually allows you to set

01:03:05,200 --> 01:03:08,799
per route mtus

01:03:06,720 --> 01:03:10,240
uh to avoid things like that and you you

01:03:08,799 --> 01:03:12,400
wouldn't use it in aws but

01:03:10,240 --> 01:03:14,720
but it's a useful feature if you know

01:03:12,400 --> 01:03:17,599
that like you can use jumbo mtu

01:03:14,720 --> 01:03:19,359
jumbo frames locally but you know some

01:03:17,599 --> 01:03:21,760
remote things can't so you can do that

01:03:19,359 --> 01:03:26,079
per route which is which is quite handy

01:03:21,760 --> 01:03:26,960
um so so yeah there you go there's iperf

01:03:26,079 --> 01:03:31,039
running and

01:03:26,960 --> 01:03:33,599
i think we'll do that but

01:03:31,039 --> 01:03:34,480
here's the here's the thing about using

01:03:33,599 --> 01:03:38,000
uh

01:03:34,480 --> 01:03:40,799
iperf if you're using jumbo mtus

01:03:38,000 --> 01:03:42,240
you're kind of cheating and a lot of

01:03:40,799 --> 01:03:43,920
people

01:03:42,240 --> 01:03:46,000
will benchmark things and use different

01:03:43,920 --> 01:03:48,799
mtu's so one of the things that

01:03:46,000 --> 01:03:49,200
is the great equalizer is uh just to do

01:03:48,799 --> 01:03:51,920
dash

01:03:49,200 --> 01:03:52,559
m100 which does i think it's mss

01:03:51,920 --> 01:03:55,520
clamping

01:03:52,559 --> 01:03:56,480
but basically that's not now saying um

01:03:55,520 --> 01:04:00,799
i'm gonna send

01:03:56,480 --> 01:04:01,839
hundred byte packets not 8600 byte

01:04:00,799 --> 01:04:05,200
packets

01:04:01,839 --> 01:04:07,039
and um and kind of

01:04:05,200 --> 01:04:08,640
so i'm short on time a little bit but

01:04:07,039 --> 01:04:09,839
basically you know if you really want to

01:04:08,640 --> 01:04:12,079
compare things

01:04:09,839 --> 01:04:13,440
uh i highly recommend doing iperf with

01:04:12,079 --> 01:04:16,799
packets per second

01:04:13,440 --> 01:04:19,119
and you can see over in this side um

01:04:16,799 --> 01:04:20,160
i have packets per second printed every

01:04:19,119 --> 01:04:22,079
every second for

01:04:20,160 --> 01:04:23,440
all these different interfaces because

01:04:22,079 --> 01:04:25,920
that's actually going to tell you way

01:04:23,440 --> 01:04:27,440
more about performance than just the raw

01:04:25,920 --> 01:04:29,520
you know sort of iperf number

01:04:27,440 --> 01:04:31,280
um and and the reason that matters is

01:04:29,520 --> 01:04:32,319
like if you're doing bulk transfer

01:04:31,280 --> 01:04:34,240
you're going to hit that you're going to

01:04:32,319 --> 01:04:34,799
use big packets right like it's probably

01:04:34,240 --> 01:04:36,720
going to be

01:04:34,799 --> 01:04:38,559
nicely optimized but if you're doing

01:04:36,720 --> 01:04:40,319
like high interactivity stuff

01:04:38,559 --> 01:04:42,400
an example would be like every keystroke

01:04:40,319 --> 01:04:44,000
you send off send on slack

01:04:42,400 --> 01:04:46,000
you know ends up as a packet over a

01:04:44,000 --> 01:04:46,799
websocket right that's a lot of small

01:04:46,000 --> 01:04:48,160
packets and

01:04:46,799 --> 01:04:49,839
and that's actually where you're going

01:04:48,160 --> 01:04:51,440
to hit performance limits in almost

01:04:49,839 --> 01:04:52,640
every type of networking so

01:04:51,440 --> 01:04:53,920
again i just want to call that out as

01:04:52,640 --> 01:04:55,599
something that you should be aware of

01:04:53,920 --> 01:04:58,160
when you're when you're thinking about

01:04:55,599 --> 01:04:59,039
performance so here's another feature

01:04:58,160 --> 01:05:02,799
that slack

01:04:59,039 --> 01:05:04,799
doesn't use but that that i find quite

01:05:02,799 --> 01:05:08,000
handy for my own network which is

01:05:04,799 --> 01:05:11,920
we have a built-in dns server so

01:05:08,000 --> 01:05:13,359
um it's normally bound to port 53 but

01:05:11,920 --> 01:05:16,240
this box has something bound to it so i

01:05:13,359 --> 01:05:20,839
set it up to to do something else

01:05:16,240 --> 01:05:24,480
27 not and then

01:05:20,839 --> 01:05:29,280
64.0.5 that didn't work

01:05:24,480 --> 01:05:29,280
what am i doing wrong um

01:05:29,520 --> 01:05:33,039
i don't remember

01:05:33,280 --> 01:05:39,119
let's see

01:05:36,640 --> 01:05:41,280
live demos i decided to do a 45 my

01:05:39,119 --> 01:05:44,160
minute live demo so this is on me

01:05:41,280 --> 01:05:44,160
um big

01:05:44,480 --> 01:05:51,839
dash no that's right

01:05:48,240 --> 01:05:51,839
at 100.64

01:05:52,000 --> 01:06:00,480
and then uh 100.64.0.5

01:05:58,559 --> 01:06:02,559
and i can't talk to it because i did

01:06:00,480 --> 01:06:05,839
something wrong okay

01:06:02,559 --> 01:06:05,839
that's no fun

01:06:06,319 --> 01:06:10,880
oh you know what it might be it might

01:06:07,599 --> 01:06:10,880
not be bound to that interface

01:06:11,280 --> 01:06:14,000
there now

01:06:17,359 --> 01:06:21,680
three i promise i'll give up in a sec if

01:06:19,039 --> 01:06:21,680
i don't get this

01:06:25,280 --> 01:06:31,119
one and we'll do

01:06:28,319 --> 01:06:31,119
01:06:32,400 --> 01:06:38,000
there we go that's more useful okay so

01:06:36,079 --> 01:06:39,760
this is this is one of the handy little

01:06:38,000 --> 01:06:41,920
features of nebula

01:06:39,760 --> 01:06:42,799
now i remember what i did wrong okay so

01:06:41,920 --> 01:06:44,079
but basically

01:06:42,799 --> 01:06:45,520
uh you can turn on this dns

01:06:44,079 --> 01:06:47,920
functionality slack doesn't use it at

01:06:45,520 --> 01:06:50,799
all um they didn't need to

01:06:47,920 --> 01:06:51,920
uh they didn't need to do dns this way

01:06:50,799 --> 01:06:52,720
they did they had their own stuff

01:06:51,920 --> 01:06:55,039
already set up

01:06:52,720 --> 01:06:56,799
but i wanted this sort of dynamic dns

01:06:55,039 --> 01:06:59,680
functionality so we added this where

01:06:56,799 --> 01:07:01,280
when you connect to nebula um to a

01:06:59,680 --> 01:07:02,319
lighthouse the lighthouse can be a dns

01:07:01,280 --> 01:07:04,640
server uh

01:07:02,319 --> 01:07:06,240
you know caveat here is don't like

01:07:04,640 --> 01:07:07,920
trusting lighthouses for everything so

01:07:06,240 --> 01:07:09,680
don't use this for like

01:07:07,920 --> 01:07:11,680
super sensitive stuff unless you're

01:07:09,680 --> 01:07:12,000
you're really trusting your lighthouses

01:07:11,680 --> 01:07:14,240
but

01:07:12,000 --> 01:07:16,000
but it is a handy feature and so if you

01:07:14,240 --> 01:07:18,559
do a txt query for

01:07:16,000 --> 01:07:21,440
to the lighthouse in this case this this

01:07:18,559 --> 01:07:22,640
0.1 is the lighthouse and 0.5 is the ip

01:07:21,440 --> 01:07:24,960
i'm asking it about

01:07:22,640 --> 01:07:25,839
and i did a txt query what i actually

01:07:24,960 --> 01:07:28,400
get back is

01:07:25,839 --> 01:07:28,880
the cert information for that node and

01:07:28,400 --> 01:07:30,160
so

01:07:28,880 --> 01:07:33,039
what i did wrong in the first query by

01:07:30,160 --> 01:07:35,440
the way is i was asking it an ip address

01:07:33,039 --> 01:07:36,720
that's not actually what this is for if

01:07:35,440 --> 01:07:39,920
you do a non-text query

01:07:36,720 --> 01:07:39,920
it's so that you can do this

01:07:40,839 --> 01:07:45,119
node5.nebula.defined.com

01:07:43,520 --> 01:07:46,799
and there you go and now i got that

01:07:45,119 --> 01:07:47,680
answer and what's really cool is you can

01:07:46,799 --> 01:07:50,720
actually delegate

01:07:47,680 --> 01:07:52,000
this lighthouse dns server as a real on

01:07:50,720 --> 01:07:54,240
the internet dns server if you don't

01:07:52,000 --> 01:07:57,039
mind exposing internal ip addresses like

01:07:54,240 --> 01:07:58,559
that's that's entirely up to you but um

01:07:57,039 --> 01:07:59,359
but this dns functionality is nice and

01:07:58,559 --> 01:08:01,520
it means that

01:07:59,359 --> 01:08:03,599
whatever name you put into a certificate

01:08:01,520 --> 01:08:04,880
uh is is automatically kind of

01:08:03,599 --> 01:08:06,880
dynamically resolved

01:08:04,880 --> 01:08:09,119
um i'm just looking at i see a question

01:08:06,880 --> 01:08:09,119
here

01:08:09,280 --> 01:08:12,720
let's see sometimes when you kill an

01:08:11,039 --> 01:08:13,839
instance of nebula on a working tunnel

01:08:12,720 --> 01:08:16,239
it seems that

01:08:13,839 --> 01:08:17,679
uh some packets locally are resumed once

01:08:16,239 --> 01:08:20,239
you

01:08:17,679 --> 01:08:21,520
once you run the instance again yeah

01:08:20,239 --> 01:08:24,400
okay so why

01:08:21,520 --> 01:08:25,759
so why does nebula cute packets um let

01:08:24,400 --> 01:08:27,520
me actually you'll see that

01:08:25,759 --> 01:08:28,880
if i if i can get the mobile demo done

01:08:27,520 --> 01:08:30,880
you'll see why basically

01:08:28,880 --> 01:08:32,960
when when you try to connect to another

01:08:30,880 --> 01:08:35,120
nebula node what what happens is it

01:08:32,960 --> 01:08:37,440
looks up the real ip and port to use

01:08:35,120 --> 01:08:39,520
and then it handshakes but it'll cache

01:08:37,440 --> 01:08:41,279
the first 100 or so packets that you

01:08:39,520 --> 01:08:42,880
send to that that node

01:08:41,279 --> 01:08:44,319
and as soon as the handshake completes

01:08:42,880 --> 01:08:46,719
it'll actually send those through so

01:08:44,319 --> 01:08:47,600
uh it it's limited to 100 just to ensure

01:08:46,719 --> 01:08:50,239
that like

01:08:47,600 --> 01:08:52,239
you can't dos it by simply sending a

01:08:50,239 --> 01:08:53,759
bunch of outbound traffic to a an ip

01:08:52,239 --> 01:08:56,239
that will never handshake but

01:08:53,759 --> 01:08:58,640
um but it's handy because that way you

01:08:56,239 --> 01:09:01,120
know like your initial ssh

01:08:58,640 --> 01:09:01,759
handshake is delayed but not just

01:09:01,120 --> 01:09:03,199
dropped

01:09:01,759 --> 01:09:05,520
even though an existing tunnel doesn't

01:09:03,199 --> 01:09:06,799
exist so it'll be reflected as sort of

01:09:05,520 --> 01:09:08,880
long ping times

01:09:06,799 --> 01:09:10,239
um and and again that's just because we

01:09:08,880 --> 01:09:13,120
hold about 100

01:09:10,239 --> 01:09:14,480
uh packets uh right off the bat and we

01:09:13,120 --> 01:09:15,839
expire those quickly like we did a bunch

01:09:14,480 --> 01:09:18,799
of testing to make sure that

01:09:15,839 --> 01:09:20,319
if you don't handshake it um where does

01:09:18,799 --> 01:09:22,080
it store it since this is skilled

01:09:20,319 --> 01:09:24,239
there's there's not a capability to do

01:09:22,080 --> 01:09:26,000
that so i'll we'll let's connect on

01:09:24,239 --> 01:09:27,199
slack afterward because i'm curious the

01:09:26,000 --> 01:09:29,040
the case you're seeing

01:09:27,199 --> 01:09:31,440
um but it shouldn't it shouldn't hold on

01:09:29,040 --> 01:09:33,600
to packets after the fact so i'm not

01:09:31,440 --> 01:09:37,120
i'm not sure why why that's happening

01:09:33,600 --> 01:09:40,400
but happy to chat about it after

01:09:37,120 --> 01:09:48,319
so um

01:09:40,400 --> 01:09:51,839
one other thing oh sorry go ahead

01:09:48,319 --> 01:09:53,679
i heard someone on okay so uh one other

01:09:51,839 --> 01:09:56,960
thing to note here by the way

01:09:53,679 --> 01:09:57,520
is uh a lot of people will do this style

01:09:56,960 --> 01:10:00,800
of

01:09:57,520 --> 01:10:03,920
um of pki where you like

01:10:00,800 --> 01:10:05,760
do these certs as files you can also

01:10:03,920 --> 01:10:07,520
we added this at some point where you

01:10:05,760 --> 01:10:08,159
can actually inline the search so this

01:10:07,520 --> 01:10:10,080
is

01:10:08,159 --> 01:10:12,080
of course the super confusing yaml

01:10:10,080 --> 01:10:15,120
syntax is you do space

01:10:12,080 --> 01:10:17,520
pipe indent

01:10:15,120 --> 01:10:18,480
but the nice thing about this is uh if

01:10:17,520 --> 01:10:20,159
you want to push out

01:10:18,480 --> 01:10:21,840
config files you can actually put

01:10:20,159 --> 01:10:22,560
everything you need for nebula in one

01:10:21,840 --> 01:10:26,239
file

01:10:22,560 --> 01:10:27,679
um so i think on this host

01:10:26,239 --> 01:10:29,520
yeah there's only there's only the

01:10:27,679 --> 01:10:30,400
config file so one other thing to be

01:10:29,520 --> 01:10:33,360
aware of there

01:10:30,400 --> 01:10:34,239
um unsafe routes is also uh kind of

01:10:33,360 --> 01:10:35,600
interesting it's what i was talking

01:10:34,239 --> 01:10:36,480
about where you can talk to non-nebula

01:10:35,600 --> 01:10:37,920
devices but

01:10:36,480 --> 01:10:40,239
basically what it means is you can stand

01:10:37,920 --> 01:10:41,840
up a route to through nebula to things

01:10:40,239 --> 01:10:43,120
that don't speak nebula which is also

01:10:41,840 --> 01:10:46,159
quite handy

01:10:43,120 --> 01:10:46,800
all right so here's the livest of live

01:10:46,159 --> 01:10:51,679
demos

01:10:46,800 --> 01:10:55,199
um let me switch over to uh

01:10:51,679 --> 01:10:56,000
to this also i learned a very valuable

01:10:55,199 --> 01:11:00,960
thing one of my

01:10:56,000 --> 01:11:03,520
one of my co-workers brian kelly uh

01:11:00,960 --> 01:11:05,120
taught me that quicktime is actually a

01:11:03,520 --> 01:11:08,480
pretty good way

01:11:05,120 --> 01:11:11,600
to uh to show

01:11:08,480 --> 01:11:16,400
uh like ipads and and

01:11:11,600 --> 01:11:18,640
iphones and so this is

01:11:16,400 --> 01:11:20,000
and i put it on do not disturb um

01:11:18,640 --> 01:11:22,400
because

01:11:20,000 --> 01:11:23,040
that wouldn't be fun um so so this is

01:11:22,400 --> 01:11:25,840
actually my

01:11:23,040 --> 01:11:27,040
my current connection to nebula from old

01:11:25,840 --> 01:11:29,600
mobile device

01:11:27,040 --> 01:11:30,400
and uh i just leave this running all the

01:11:29,600 --> 01:11:32,480
time by the way

01:11:30,400 --> 01:11:34,159
so uh i want to show you a couple things

01:11:32,480 --> 01:11:35,040
in here though so i'm gonna disconnect

01:11:34,159 --> 01:11:37,760
real quick

01:11:35,040 --> 01:11:39,360
and ryan it looks like we have a

01:11:37,760 --> 01:11:40,239
question i don't know if you wanted to

01:11:39,360 --> 01:11:43,120
take that now

01:11:40,239 --> 01:11:44,080
or wait yeah i'm happy to what's the

01:11:43,120 --> 01:11:47,520
what's the question

01:11:44,080 --> 01:11:51,679
uh it's does nebulous support um

01:11:47,520 --> 01:11:55,360
ipv6 and if not currently is it on the

01:11:51,679 --> 01:11:57,280
roadmap uh so it currently does not

01:11:55,360 --> 01:11:59,440
support ipv6 um

01:11:57,280 --> 01:12:00,960
the it's on the roadmap especially

01:11:59,440 --> 01:12:01,760
because there's uh there's someone now

01:12:00,960 --> 01:12:04,800
that

01:12:01,760 --> 01:12:06,159
uh that works at slack that has a keen

01:12:04,800 --> 01:12:09,440
interest in doing it because

01:12:06,159 --> 01:12:12,239
their isp is ipv6 centric

01:12:09,440 --> 01:12:13,440
um the the one thing that that we're not

01:12:12,239 --> 01:12:16,239
decided on yet

01:12:13,440 --> 01:12:18,640
is whether we're going to use whether

01:12:16,239 --> 01:12:22,080
we're going to do ipv6 for internal

01:12:18,640 --> 01:12:23,120
nebula addressing uh as as soon as we do

01:12:22,080 --> 01:12:25,679
it for external so

01:12:23,120 --> 01:12:27,120
using ipv6 to negotiate nebula tunnel

01:12:25,679 --> 01:12:29,679
like for the the layer

01:12:27,120 --> 01:12:32,159
higher uh makes a lot of sense it may

01:12:29,679 --> 01:12:34,000
make some sense to use ipv6 internally

01:12:32,159 --> 01:12:37,199
with nebula but we just haven't

01:12:34,000 --> 01:12:37,760
haven't decided yet um because you know

01:12:37,199 --> 01:12:39,120
there

01:12:37,760 --> 01:12:40,560
there are pros and cons to doing it one

01:12:39,120 --> 01:12:42,400
of the cons is um you're you're

01:12:40,560 --> 01:12:46,239
increasing the packet size a bit like

01:12:42,400 --> 01:12:48,480
there's just it's not free um but

01:12:46,239 --> 01:12:50,480
it is on the roadmap to add external

01:12:48,480 --> 01:12:53,040
ipv6 so that if i'm

01:12:50,480 --> 01:12:54,320
on you know something like an ipv6 only

01:12:53,040 --> 01:12:55,679
isp i can still

01:12:54,320 --> 01:12:57,679
use nebula and handshake with other

01:12:55,679 --> 01:12:58,159
things today you cannot do that right so

01:12:57,679 --> 01:12:59,600
that

01:12:58,159 --> 01:13:01,920
that is definitely an area we want to

01:12:59,600 --> 01:13:03,600
improve um and and we could probably

01:13:01,920 --> 01:13:05,280
blame google cloud for that because i

01:13:03,600 --> 01:13:06,159
don't think they supported ipv6 until

01:13:05,280 --> 01:13:09,440
well after we

01:13:06,159 --> 01:13:12,480
i'm just kidding um they but ipv6

01:13:09,440 --> 01:13:14,239
uh support externally facing is

01:13:12,480 --> 01:13:16,000
something that that we think will be

01:13:14,239 --> 01:13:19,840
important

01:13:16,000 --> 01:13:23,120
um cool so here is uh

01:13:19,840 --> 01:13:23,120
here's the the uh

01:13:23,760 --> 01:13:29,840
right how is the clock on that

01:13:26,800 --> 01:13:29,840
so incorrect

01:13:30,080 --> 01:13:33,760
okay good i'm not one minute away from

01:13:32,480 --> 01:13:37,040
four minutes away from being done

01:13:33,760 --> 01:13:40,719
somehow my iphone thinks it's 9 41. um

01:13:37,040 --> 01:13:43,920
all right so if i connect nebula

01:13:40,719 --> 01:13:45,520
right and and by the way the nebula app

01:13:43,920 --> 01:13:48,239
another thing to be aware of is it's

01:13:45,520 --> 01:13:49,760
pulled a refresh the reason for that is

01:13:48,239 --> 01:13:51,920
if you're if you're dealing with stuff

01:13:49,760 --> 01:13:55,280
like tunnels like you know

01:13:51,920 --> 01:13:56,560
this um and they change underneath you

01:13:55,280 --> 01:13:57,679
while you're trying to debug something

01:13:56,560 --> 01:13:59,840
it can be annoying so

01:13:57,679 --> 01:14:01,600
we kind of decided that you should pull

01:13:59,840 --> 01:14:03,440
the refresh we might make that more

01:14:01,600 --> 01:14:05,040
apparent but a lot of these screens

01:14:03,440 --> 01:14:06,719
including like the active tunnels these

01:14:05,040 --> 01:14:09,760
are all polar refresh

01:14:06,719 --> 01:14:10,880
so i've started up nebula uh here's the

01:14:09,760 --> 01:14:14,719
log file

01:14:10,880 --> 01:14:17,120
and um i'm not talking to anything yet

01:14:14,719 --> 01:14:18,880
like i have no tunnels why is that oh no

01:14:17,120 --> 01:14:22,159
now i do have two tunnels

01:14:18,880 --> 01:14:24,080
so by default nebula doesn't actually

01:14:22,159 --> 01:14:26,159
connect outbound to anything

01:14:24,080 --> 01:14:27,600
right and the reason for that is simply

01:14:26,159 --> 01:14:29,600
battery life so it just does a

01:14:27,600 --> 01:14:31,280
just-in-time connection including to the

01:14:29,600 --> 01:14:34,800
lighthouse um

01:14:31,280 --> 01:14:36,400
and let me ping

01:14:34,800 --> 01:14:38,199
let me ping this is my own personal

01:14:36,400 --> 01:14:40,880
nebula network so

01:14:38,199 --> 01:14:42,800
2.168. um and i think you'll see what

01:14:40,880 --> 01:14:45,840
bruno asked about in a second

01:14:42,800 --> 01:14:48,400
so i'm gonna ping that so that first

01:14:45,840 --> 01:14:51,760
ping was a little slower like an extra

01:14:48,400 --> 01:14:54,719
extra 180 whatever milliseconds that was

01:14:51,760 --> 01:14:57,360
because that that icmp packet was cached

01:14:54,719 --> 01:14:58,080
and then if i go back here and look at

01:14:57,360 --> 01:14:59,440
tunnels

01:14:58,080 --> 01:15:01,600
this is the one that i just did the

01:14:59,440 --> 01:15:03,440
handshake with um you can see that cash

01:15:01,600 --> 01:15:04,719
packets is now zero but for a period of

01:15:03,440 --> 01:15:06,239
time it was much more

01:15:04,719 --> 01:15:08,000
nate did a great job on this mobile app

01:15:06,239 --> 01:15:08,480
by the way like there's the the mobile

01:15:08,000 --> 01:15:11,120
app is

01:15:08,480 --> 01:15:12,640
is certainly more user friendly than uh

01:15:11,120 --> 01:15:14,560
than the

01:15:12,640 --> 01:15:16,239
uh command line version that's something

01:15:14,560 --> 01:15:17,840
we're working to improve with

01:15:16,239 --> 01:15:19,840
nebula we're going to you know have

01:15:17,840 --> 01:15:20,320
proper proper applications that you can

01:15:19,840 --> 01:15:23,520
run

01:15:20,320 --> 01:15:25,040
uh right now it's it's command line only

01:15:23,520 --> 01:15:26,560
um but what's what's cool about the

01:15:25,040 --> 01:15:27,840
mobile app is too like i can look at

01:15:26,560 --> 01:15:30,080
stuff like the certificate

01:15:27,840 --> 01:15:31,840
on my phone and get all of that detail

01:15:30,080 --> 01:15:34,640
that i printed with nebula

01:15:31,840 --> 01:15:36,239
cert um you know right there which is

01:15:34,640 --> 01:15:39,360
pretty cool

01:15:36,239 --> 01:15:40,560
ca you can add multiple cas so you can

01:15:39,360 --> 01:15:42,400
the thing i was talking about where you

01:15:40,560 --> 01:15:44,719
can trust multiples that's great

01:15:42,400 --> 01:15:45,920
and then um one thing to call out in

01:15:44,719 --> 01:15:47,440
relation to what i was just showing you

01:15:45,920 --> 01:15:50,560
is this lighthouse interval

01:15:47,440 --> 01:15:52,800
so the way nodes

01:15:50,560 --> 01:15:55,280
report themselves to lighthouse in non

01:15:52,800 --> 01:15:56,800
on non-mobile devices is you set this to

01:15:55,280 --> 01:15:58,719
something like 60 seconds and then every

01:15:56,800 --> 01:16:01,040
60 seconds your

01:15:58,719 --> 01:16:01,760
your computers your servers whatever

01:16:01,040 --> 01:16:03,360
they'll

01:16:01,760 --> 01:16:05,760
look at their local interface list and

01:16:03,360 --> 01:16:07,440
they'll tell the

01:16:05,760 --> 01:16:08,960
the lighthouse about everything they

01:16:07,440 --> 01:16:12,000
have that's how they can discover

01:16:08,960 --> 01:16:12,640
sort of local ips um with the with a

01:16:12,000 --> 01:16:14,880
phone

01:16:12,640 --> 01:16:16,239
we made the decision to set this to zero

01:16:14,880 --> 01:16:18,840
by default which means

01:16:16,239 --> 01:16:20,560
the phone doesn't even reach out to the

01:16:18,840 --> 01:16:22,320
lighthouse uh

01:16:20,560 --> 01:16:24,400
when you start nebula so when you click

01:16:22,320 --> 01:16:26,080
connect on the mobile app

01:16:24,400 --> 01:16:27,840
other than starting the nebula process

01:16:26,080 --> 01:16:28,400
nothing happens and the reason for that

01:16:27,840 --> 01:16:31,440
is

01:16:28,400 --> 01:16:33,600
um is simply that it's it's a much more

01:16:31,440 --> 01:16:34,239
rare use case outside of testing that

01:16:33,600 --> 01:16:35,920
you

01:16:34,239 --> 01:16:37,679
are trying to connect to a mobile device

01:16:35,920 --> 01:16:40,159
like usually you're doing outbound

01:16:37,679 --> 01:16:41,280
from a mobile device and so the reason

01:16:40,159 --> 01:16:43,360
that's the reason for this

01:16:41,280 --> 01:16:45,520
uh lighthouse interval being set to zero

01:16:43,360 --> 01:16:48,400
but if you do have

01:16:45,520 --> 01:16:50,320
the need to connect to uh two mobile

01:16:48,400 --> 01:16:53,920
devices like an ipad or an iphone

01:16:50,320 --> 01:16:56,640
and you know and and you want them to uh

01:16:53,920 --> 01:16:57,840
um to be reachable even if they haven't

01:16:56,640 --> 01:16:58,480
tried to talk to something else on

01:16:57,840 --> 01:17:00,480
nebula

01:16:58,480 --> 01:17:02,400
you can you can just change this this

01:17:00,480 --> 01:17:03,679
interval you know you can make it 60

01:17:02,400 --> 01:17:05,679
seconds or

01:17:03,679 --> 01:17:07,440
600 seconds and it'll start

01:17:05,679 --> 01:17:08,800
self-reporting to the lighthouse and and

01:17:07,440 --> 01:17:09,600
then this phone would be reachable from

01:17:08,800 --> 01:17:11,760
wherever

01:17:09,600 --> 01:17:12,640
so just a just a handy thing to know

01:17:11,760 --> 01:17:16,080
about

01:17:12,640 --> 01:17:18,400
um let's see

01:17:16,080 --> 01:17:20,800
you can you can set the listen port

01:17:18,400 --> 01:17:23,600
explicitly you can set the mtu

01:17:20,800 --> 01:17:24,880
uh cipher log verbosity and then this is

01:17:23,600 --> 01:17:26,640
kind of cool you can actually see the

01:17:24,880 --> 01:17:29,440
rendered configuration so

01:17:26,640 --> 01:17:30,320
um this is much like what i showed you

01:17:29,440 --> 01:17:32,800
on that host

01:17:30,320 --> 01:17:34,239
one one major differences you can't see

01:17:32,800 --> 01:17:36,239
um i'll use my mouse here

01:17:34,239 --> 01:17:37,440
this this the key is hidden it's

01:17:36,239 --> 01:17:40,719
actually stored

01:17:37,440 --> 01:17:42,560
uh within the keychain on the device so

01:17:40,719 --> 01:17:44,560
uh the workflow is slightly different

01:17:42,560 --> 01:17:45,280
i'm gonna try i only have 10 minutes so

01:17:44,560 --> 01:17:48,480
i'm going to

01:17:45,280 --> 01:17:50,400
try and as a last step here i'm going to

01:17:48,480 --> 01:17:51,920
try and stand up a fresh nebula network

01:17:50,400 --> 01:17:54,320
and we'll see how this goes because

01:17:51,920 --> 01:17:55,679
that is that is going to be a bit of a

01:17:54,320 --> 01:17:58,719
challenge okay

01:17:55,679 --> 01:18:00,159
so i'm a new site let's call it

01:17:58,719 --> 01:18:02,080
test and basically what i'm doing here

01:18:00,159 --> 01:18:03,040
is i'm just gonna stand up a new nebula

01:18:02,080 --> 01:18:06,000
network

01:18:03,040 --> 01:18:07,120
that uh can talk to all those aws hosts

01:18:06,000 --> 01:18:10,239
i just launched

01:18:07,120 --> 01:18:12,800
so on my phone and i just realized it's

01:18:10,239 --> 01:18:14,159
blocked there now you can see it so all

01:18:12,800 --> 01:18:16,640
i've done so far is type test

01:18:14,159 --> 01:18:17,920
certificate generate keys so this is a

01:18:16,640 --> 01:18:22,560
this is a public key

01:18:17,920 --> 01:18:26,960
um i'm going to share it uh with

01:18:22,560 --> 01:18:30,000
signal oops and share it there

01:18:26,960 --> 01:18:32,159
and and the reason i'm doing this by the

01:18:30,000 --> 01:18:34,640
way is just

01:18:32,159 --> 01:18:35,840
to uh i think i shared it at the wrong

01:18:34,640 --> 01:18:38,640
place

01:18:35,840 --> 01:18:40,560
that's fine um the reason i'm doing that

01:18:38,640 --> 01:18:40,960
is just because i have signal running on

01:18:40,560 --> 01:18:44,320
my

01:18:40,960 --> 01:18:47,120
on my computer and so that way i can

01:18:44,320 --> 01:18:48,880
i can pull up the uh the public key on

01:18:47,120 --> 01:18:50,640
the computer for the next step

01:18:48,880 --> 01:18:52,960
all right so i've copied that that

01:18:50,640 --> 01:18:55,440
public key

01:18:52,960 --> 01:18:56,719
now you can't see this but it's off to

01:18:55,440 --> 01:18:59,520
the side right now

01:18:56,719 --> 01:19:01,360
all right so here's this window there's

01:18:59,520 --> 01:19:03,280
the public key from the phone

01:19:01,360 --> 01:19:04,640
um and and by the way the reason this

01:19:03,280 --> 01:19:07,760
this flow happens is

01:19:04,640 --> 01:19:09,360
right now we don't allow you to put a

01:19:07,760 --> 01:19:09,679
public key on a phone like we kind of

01:19:09,360 --> 01:19:11,840
said

01:19:09,679 --> 01:19:13,760
you know they have they they can be used

01:19:11,840 --> 01:19:16,400
as a bit more trustworthy devices so

01:19:13,760 --> 01:19:17,760
you can't generate a private key off of

01:19:16,400 --> 01:19:18,239
the phone and put it onto the phone

01:19:17,760 --> 01:19:20,080
right now

01:19:18,239 --> 01:19:21,280
onto a mobile device in general all

01:19:20,080 --> 01:19:24,400
right so

01:19:21,280 --> 01:19:26,080
i've got that public key now uh i'm on

01:19:24,400 --> 01:19:30,960
my lighthouse and i'm going to do

01:19:26,080 --> 01:19:30,960
uh phone.pub

01:19:32,000 --> 01:19:38,320
yep did the right thing and

01:19:36,000 --> 01:19:39,679
now i'm going to sign a certificate for

01:19:38,320 --> 01:19:41,360
that phone so

01:19:39,679 --> 01:19:42,880
what i'm going to do here is maybe i'll

01:19:41,360 --> 01:19:46,880
cert

01:19:42,880 --> 01:19:50,000
uh sign and i the the help in here is

01:19:46,880 --> 01:19:52,880
is pretty pretty uh pretty good so

01:19:50,000 --> 01:19:54,320
dash in pub so this is this is what's

01:19:52,880 --> 01:19:56,000
different to the documentation you'll

01:19:54,320 --> 01:19:57,760
find on the github site

01:19:56,000 --> 01:19:59,760
uh on the github site it's about how to

01:19:57,760 --> 01:20:01,840
generate keys without this sort of

01:19:59,760 --> 01:20:03,920
uh intermediary step where you where you

01:20:01,840 --> 01:20:04,239
sign it off host and and never expose

01:20:03,920 --> 01:20:05,920
the

01:20:04,239 --> 01:20:07,840
private key but this is actually the way

01:20:05,920 --> 01:20:12,719
you should run nebula in general

01:20:07,840 --> 01:20:15,360
um so sign dash in pub

01:20:12,719 --> 01:20:16,239
oops what was it called phone dot key

01:20:15,360 --> 01:20:19,840
and then

01:20:16,239 --> 01:20:28,880
dash name phone dot my

01:20:19,840 --> 01:20:28,880
phone whatever uh dash ip100.64.0.100.24

01:20:29,520 --> 01:20:33,760
sure that looks good to me it's not

01:20:32,800 --> 01:20:37,040
though

01:20:33,760 --> 01:20:41,679
oh um dash ca

01:20:37,040 --> 01:20:44,400
cert is and it has default uh names for

01:20:41,679 --> 01:20:45,199
um certificates but the files are named

01:20:44,400 --> 01:20:48,560
something different

01:20:45,199 --> 01:20:52,000
so define that root dot cert

01:20:48,560 --> 01:20:53,520
dash ca minus key to find that

01:20:52,000 --> 01:20:55,040
and by the way like these aren't the

01:20:53,520 --> 01:20:58,400
real company root

01:20:55,040 --> 01:21:01,840
cert and key so like we're not

01:20:58,400 --> 01:21:05,360
we're not that silly um there

01:21:01,840 --> 01:21:08,320
all right all right so

01:21:05,360 --> 01:21:10,000
phone dot pub and then phone dot search

01:21:08,320 --> 01:21:15,840
so cat phone dot

01:21:10,000 --> 01:21:15,840
let me open a new terminal

01:21:18,400 --> 01:21:23,360
of course there we go all right so what

01:21:21,440 --> 01:21:26,560
i've done now is use the ca

01:21:23,360 --> 01:21:29,440
that signed all of the the keys

01:21:26,560 --> 01:21:31,199
uh used on all of the other devices and

01:21:29,440 --> 01:21:34,560
uh

01:21:31,199 --> 01:21:35,679
um i've created generated a device cert

01:21:34,560 --> 01:21:38,800
that i now can send

01:21:35,679 --> 01:21:39,920
back to that device so i'm just gonna

01:21:38,800 --> 01:21:42,960
actually highlight

01:21:39,920 --> 01:21:44,960
highlight this cert go back to

01:21:42,960 --> 01:21:46,159
you can't see this that's fine going

01:21:44,960 --> 01:21:48,800
back to signal

01:21:46,159 --> 01:21:50,080
i'm going to message it to myself and

01:21:48,800 --> 01:21:53,120
then

01:21:50,080 --> 01:21:57,600
in oops

01:21:53,120 --> 01:21:59,600
in signal i'm in the

01:21:57,600 --> 01:22:01,199
bring this back up i'm in note to self

01:21:59,600 --> 01:22:03,600
so there you go so there's the cert that

01:22:01,199 --> 01:22:08,880
i generated off host

01:22:03,600 --> 01:22:10,400
um and then i paste the contents in here

01:22:08,880 --> 01:22:12,400
i hope i'm not boring the heck out of

01:22:10,400 --> 01:22:15,840
everyone um

01:22:12,400 --> 01:22:16,960
but there's that all right load

01:22:15,840 --> 01:22:19,840
certificate so

01:22:16,960 --> 01:22:20,639
now i have this there's my asserted ip

01:22:19,840 --> 01:22:22,400
validity

01:22:20,639 --> 01:22:24,400
it's about for over a hundred years

01:22:22,400 --> 01:22:27,679
again don't ever do that please

01:22:24,400 --> 01:22:30,719
um i need to share the ca

01:22:27,679 --> 01:22:35,360
and again the ca uh that i used here

01:22:30,719 --> 01:22:38,639
uh i think was dynamic so um

01:22:35,360 --> 01:22:42,560
so like these these aren't you know

01:22:38,639 --> 01:22:44,960
these aren't long lived for any useful

01:22:42,560 --> 01:22:46,400
any useful purpose like you they they'll

01:22:44,960 --> 01:22:48,960
cease to be useful

01:22:46,400 --> 01:22:50,239
uh as soon as i stop these instances so

01:22:48,960 --> 01:22:52,159
sending myself the root

01:22:50,239 --> 01:22:53,520
cert you can load it as like a file you

01:22:52,159 --> 01:22:55,600
can do a number of things but i'm

01:22:53,520 --> 01:22:56,800
i just find it easy to use signal and

01:22:55,600 --> 01:22:58,960
cut and paste

01:22:56,800 --> 01:23:00,080
so there we go oh we're getting right up

01:22:58,960 --> 01:23:01,679
to the time limit right

01:23:00,080 --> 01:23:03,199
yeah i just wanted to let you know we've

01:23:01,679 --> 01:23:05,199
got five

01:23:03,199 --> 01:23:06,880
minutes left and also i'm hearing from

01:23:05,199 --> 01:23:09,720
people chat

01:23:06,880 --> 01:23:11,360
is not working so

01:23:09,720 --> 01:23:13,040
[Music]

01:23:11,360 --> 01:23:15,040
everyone just type something into chat

01:23:13,040 --> 01:23:18,960
just to make sure that if

01:23:15,040 --> 01:23:22,400
if that um if it's at 8 10 10 d

01:23:18,960 --> 01:23:25,440
okay seems to be going all right so

01:23:22,400 --> 01:23:28,719
anyway cool um and by the way like

01:23:25,440 --> 01:23:30,159
the uh slack hq's nebula repo has a link

01:23:28,719 --> 01:23:33,679
to our uh

01:23:30,159 --> 01:23:35,920
um sorry go to github uh

01:23:33,679 --> 01:23:37,199
look at the nebula repo and hop into the

01:23:35,920 --> 01:23:40,159
nebula oss

01:23:37,199 --> 01:23:42,000
slack group and i'm happy to to have

01:23:40,159 --> 01:23:45,040
more discussions offline after

01:23:42,000 --> 01:23:48,400
so um yeah let me see

01:23:45,040 --> 01:23:53,199
so let me go here and

01:23:48,400 --> 01:23:55,679
do this and the next step is

01:23:53,199 --> 01:23:57,360
i'm gonna go here of course i waited

01:23:55,679 --> 01:23:59,480
till the last minute and gave myself 10

01:23:57,360 --> 01:24:03,679
minutes to do this

01:23:59,480 --> 01:24:06,000
100.64. zero dot

01:24:03,679 --> 01:24:07,600
one is the lighthouse so i'm turning on

01:24:06,000 --> 01:24:11,040
is a lighthouse

01:24:07,600 --> 01:24:15,679
the public ip is one eight dot

01:24:11,040 --> 01:24:19,280
one nine one dot one two six

01:24:15,679 --> 01:24:23,120
dot and it's on port 4242

01:24:19,280 --> 01:24:26,800
save save and

01:24:23,120 --> 01:24:30,320
i think that's it it's gonna work

01:24:26,800 --> 01:24:32,000
what do you think i'm nervous

01:24:30,320 --> 01:24:33,520
i mean that doesn't mean anything right

01:24:32,000 --> 01:24:35,679
i already told you so

01:24:33,520 --> 01:24:36,800
um all right so let's watch this

01:24:35,679 --> 01:24:40,639
terminal here

01:24:36,800 --> 01:24:40,639
and i'll do a quick ping

01:24:41,760 --> 01:24:52,400
and we'll do 100.64.0.1

01:24:48,560 --> 01:24:54,080
go yay cool so uh so i just actually

01:24:52,400 --> 01:24:58,000
connected my phone

01:24:54,080 --> 01:24:59,679
to um to that nebula network and uh yeah

01:24:58,000 --> 01:25:01,199
it's just now a member of the network

01:24:59,679 --> 01:25:04,400
which is which is uh

01:25:01,199 --> 01:25:05,760
which is super fun um one other one

01:25:04,400 --> 01:25:06,400
other cool feature i'm going to show off

01:25:05,760 --> 01:25:08,159
real quick

01:25:06,400 --> 01:25:11,120
is i'm going to swipe down here and i'm

01:25:08,159 --> 01:25:15,679
just going to turn off my wi-fi network

01:25:11,120 --> 01:25:18,480
and you're gonna see that

01:25:15,679 --> 01:25:19,040
it just uh it just roamed right so this

01:25:18,480 --> 01:25:20,560
is another

01:25:19,040 --> 01:25:23,120
nice feature it missed a couple of pink

01:25:20,560 --> 01:25:25,199
packets but like the the idea here is

01:25:23,120 --> 01:25:26,560
i just turned off well that was weird i

01:25:25,199 --> 01:25:28,080
turned it off and the icon's still there

01:25:26,560 --> 01:25:30,239
and my bar says 941

01:25:28,080 --> 01:25:31,760
so thanks apple um but i promise you the

01:25:30,239 --> 01:25:35,440
wi-fi did turn off because

01:25:31,760 --> 01:25:37,120
it roamed to an att ip and then if i go

01:25:35,440 --> 01:25:39,600
back and turn my wi-fi on

01:25:37,120 --> 01:25:41,199
it will eventually yeah there it is it

01:25:39,600 --> 01:25:41,920
roamed right back to the other key so

01:25:41,199 --> 01:25:44,400
there you go

01:25:41,920 --> 01:25:46,239
um i'm really happy that demo actually

01:25:44,400 --> 01:25:47,520
worked out despite my best efforts to

01:25:46,239 --> 01:25:51,199
self-sabotage

01:25:47,520 --> 01:25:54,639
and uh let me just hop back over to

01:25:51,199 --> 01:25:56,880
this um did all that in the terminal so

01:25:54,639 --> 01:25:58,320
recap let's summarize 90 minutes in two

01:25:56,880 --> 01:25:59,679
seconds two minutes

01:25:58,320 --> 01:26:02,080
um i don't think nebula could have been

01:25:59,679 --> 01:26:02,719
born outside of slack the tlbr on this

01:26:02,080 --> 01:26:04,960
is

01:26:02,719 --> 01:26:05,760
uh we did years of experimentation to

01:26:04,960 --> 01:26:08,000
make it this good

01:26:05,760 --> 01:26:09,679
and let it run it at the scale it does

01:26:08,000 --> 01:26:11,679
um it would have been hard to convince

01:26:09,679 --> 01:26:14,480
anyone to give us money to work on this

01:26:11,679 --> 01:26:15,040
uh and and but as a result like it's it

01:26:14,480 --> 01:26:17,040
is

01:26:15,040 --> 01:26:18,400
truly production ready like it is it's

01:26:17,040 --> 01:26:21,440
not just used for

01:26:18,400 --> 01:26:22,960
like between regions individual hosts

01:26:21,440 --> 01:26:24,400
that slack that might be sitting next to

01:26:22,960 --> 01:26:26,320
each other even running on the same

01:26:24,400 --> 01:26:27,760
hypervisor they use nebula to talk to

01:26:26,320 --> 01:26:28,880
each other like it is the fabric of the

01:26:27,760 --> 01:26:31,600
entire network

01:26:28,880 --> 01:26:33,440
um the future ipv6 all kinds of stuff

01:26:31,600 --> 01:26:37,040
gonna just breeze right past this

01:26:33,440 --> 01:26:40,080
that is the repo go check out github.com

01:26:37,040 --> 01:26:42,159
hq nebula go add a star to it

01:26:40,080 --> 01:26:43,360
that's that's always a nice thing to do

01:26:42,159 --> 01:26:46,560
um

01:26:43,360 --> 01:26:48,639
and uh and come work with us so we

01:26:46,560 --> 01:26:50,239
transitioned to doing nebula full-time

01:26:48,639 --> 01:26:52,639
in february of this year

01:26:50,239 --> 01:26:54,239
we are an entirely remote team and and

01:26:52,639 --> 01:26:55,920
we have some job openings and

01:26:54,239 --> 01:26:58,000
you know we're we're excited to make

01:26:55,920 --> 01:27:00,159
networking that is that is much

01:26:58,000 --> 01:27:01,920
easier to use while being secure and

01:27:00,159 --> 01:27:03,920
performant and all the things we love so

01:27:01,920 --> 01:27:05,120
uh thank you thank you everyone that

01:27:03,920 --> 01:27:08,239
that attended and

01:27:05,120 --> 01:27:09,440
and uh i hope that that that wasn't too

01:27:08,239 --> 01:27:12,400
haphazard uh

01:27:09,440 --> 01:27:13,679
come on by again you know check out uh

01:27:12,400 --> 01:27:16,800
check out that link

01:27:13,679 --> 01:27:19,040
uh slack hq slash nebula i didn't

01:27:16,800 --> 01:27:21,440
type yeah i did type uh and and there's

01:27:19,040 --> 01:27:22,800
a there's a link to the slack discussion

01:27:21,440 --> 01:27:24,080
group where you can ask more questions

01:27:22,800 --> 01:27:29,199
and with that

01:27:24,080 --> 01:27:29,199
uh thank you very much uh i am i'm all

01:27:30,840 --> 01:27:34,560
done

01:27:32,480 --> 01:27:34,560

YouTube URL: https://www.youtube.com/watch?v=qy2cgqglt3o


