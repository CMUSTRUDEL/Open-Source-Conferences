Title: All Things Containers - Docker, Kubernetes, Helm, Istio, GitOps and more - Brent Laster
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Brent Laster, SAS
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: In this workshop, students will get a quick overview of what containers are and why they form the basis for many of the key technologies that we use today in cloud environments.

We’ll explore what makes up a container and how they are managed and leveraged in key industry tooling including Docker, Kubernetes, Helm, and Istio. You’ll also learn the basics of these technologies, what they are used for, and see some simple examples of how to use them.

This workshop will include hands-on labs where you will get experience:

- Building container images, running them as containers, and tagging and pushing them into a Docker repository.
- Creating deployments, services, and pods for containers and instantiating and running those in Kubernetes.
- Working with Helm to leverage templates for Kubernetes objects and managing releases in Kubernetes.
- Working with Istio to do traffic shaping between multiple versions of your app, fault and delay injection for testing and validation in Kubernetes.
- We’ll also briefly cover GitOps – the recommended Git-based way to manage infrastructure like your Kubernetes cluster.

Prerequisites (Please have this ready before the talk)

- The virtual machine image (ova file – around 5 gigs) is at https://www.dropbox.com/s/bwk4v05il0j4uq5/ato-ws2.ova?dl=0 (Secondary image if first link is not working: https://bclconf.s3-us-west-2.amazonaws.com/ato-ws2.ova)
- To run this, you will need the Virtual Box application installed on their machine. It is available from virtualbox.org.
- To help in getting the image into Virtual Box and running it there, there is a setup doc at https://github.com/brentlaster/conf/blob/master/ato2020/cws-setup.pdf
- If you run into problems with running Virtual Box or the image, there is a troubleshooting doc that may help you out with the most common problems at https://github.com/brentlaster/conf/blob/master/vbtroubleshoot.pdf.
Captions: 
	00:00:05,040 --> 00:00:09,679
so welcome everybody i really appreciate

00:00:07,440 --> 00:00:11,599
you joining in and i know this uh

00:00:09,679 --> 00:00:13,840
looks like a daunting kind of a long

00:00:11,599 --> 00:00:15,679
time to be spending on any particular

00:00:13,840 --> 00:00:16,960
kind of topics here but i will share

00:00:15,679 --> 00:00:18,800
with you that we are going to cover a

00:00:16,960 --> 00:00:21,279
number of topics in this

00:00:18,800 --> 00:00:22,720
uh from containers to kubernetes to

00:00:21,279 --> 00:00:25,760
istio

00:00:22,720 --> 00:00:27,599
to uh operators to all kinds of stuff in

00:00:25,760 --> 00:00:29,679
there so this is really

00:00:27,599 --> 00:00:31,359
a session i've done it a couple of times

00:00:29,679 --> 00:00:32,160
but it's intended to give you an

00:00:31,359 --> 00:00:34,480
exposure

00:00:32,160 --> 00:00:36,079
and kind of build from the ground up to

00:00:34,480 --> 00:00:37,760
help you understand

00:00:36,079 --> 00:00:39,760
and relate to what containers and

00:00:37,760 --> 00:00:41,200
kubernetes and all these kind of uh

00:00:39,760 --> 00:00:43,200
buzzwords that you no doubt have heard

00:00:41,200 --> 00:00:46,320
about or probably maybe even be

00:00:43,200 --> 00:00:48,399
using or exposed to could do uh and how

00:00:46,320 --> 00:00:49,840
they work and how to use them

00:00:48,399 --> 00:00:52,160
so a couple of things i wanted to note

00:00:49,840 --> 00:00:54,719
up front uh let me go ahead

00:00:52,160 --> 00:00:58,239
and share my screen here share the

00:00:54,719 --> 00:01:01,440
powerpoint presentation

00:00:58,239 --> 00:01:05,199
so uh this is a uh this

00:01:01,440 --> 00:01:08,479
class is done using a virtual machine

00:01:05,199 --> 00:01:10,960
a vm that you can download and

00:01:08,479 --> 00:01:12,159
in the resources or in the chat we had

00:01:10,960 --> 00:01:14,080
put in there

00:01:12,159 --> 00:01:15,360
a couple of places to download it

00:01:14,080 --> 00:01:19,040
hopefully you also found it

00:01:15,360 --> 00:01:21,200
in the page about the the session itself

00:01:19,040 --> 00:01:22,799
but uh we're using a virtual machine

00:01:21,200 --> 00:01:23,920
because i we want to have something

00:01:22,799 --> 00:01:25,200
that's already set up with all the

00:01:23,920 --> 00:01:26,880
applications for you to

00:01:25,200 --> 00:01:28,880
use in other words we don't want to

00:01:26,880 --> 00:01:31,680
spend our time in here trying to install

00:01:28,880 --> 00:01:32,799
and set up docker and kubernetes and

00:01:31,680 --> 00:01:34,240
istio

00:01:32,799 --> 00:01:36,000
and all these different things that

00:01:34,240 --> 00:01:36,960
we're going to use we want to be able to

00:01:36,000 --> 00:01:39,040
work with them

00:01:36,960 --> 00:01:40,479
out of the gate ready to go so that's

00:01:39,040 --> 00:01:42,000
why we have this huge virtual machine

00:01:40,479 --> 00:01:45,119
that we're downloading and using

00:01:42,000 --> 00:01:46,240
uh on this slide here as well as on the

00:01:45,119 --> 00:01:48,399
page for the session

00:01:46,240 --> 00:01:49,840
and in the chat you should see a couple

00:01:48,399 --> 00:01:52,799
of links to download

00:01:49,840 --> 00:01:54,320
uh this ova file and it is about five

00:01:52,799 --> 00:01:56,240
gig it's it's large

00:01:54,320 --> 00:01:57,439
but there's one from dropbox and there's

00:01:56,240 --> 00:02:00,079
also one uh

00:01:57,439 --> 00:02:01,200
in the link uh and on the page or in the

00:02:00,079 --> 00:02:03,759
chat and the page

00:02:01,200 --> 00:02:05,200
for uh s3 and amazon location so if you

00:02:03,759 --> 00:02:07,040
have trouble with one try the other one

00:02:05,200 --> 00:02:08,479
if you haven't already downloaded it

00:02:07,040 --> 00:02:11,039
please do go ahead and download it you

00:02:08,479 --> 00:02:12,480
will need a fairly modern machine of

00:02:11,039 --> 00:02:14,879
desktop or laptop

00:02:12,480 --> 00:02:15,599
to be able to run this system on and

00:02:14,879 --> 00:02:17,440
there is

00:02:15,599 --> 00:02:19,360
uh there's links there to download it

00:02:17,440 --> 00:02:20,640
it's that oh.oba file

00:02:19,360 --> 00:02:22,959
this is intended to run through

00:02:20,640 --> 00:02:24,319
virtualbox virtualbox is an application

00:02:22,959 --> 00:02:26,400
that allows us to run

00:02:24,319 --> 00:02:28,239
and host these virtual machines on your

00:02:26,400 --> 00:02:30,319
system it's available for macs available

00:02:28,239 --> 00:02:32,720
for linux available for pcs

00:02:30,319 --> 00:02:34,319
windows any of those platforms but this

00:02:32,720 --> 00:02:36,239
will allow us to host that

00:02:34,319 --> 00:02:38,239
image on there so everybody's working

00:02:36,239 --> 00:02:38,959
from the same machine the same platform

00:02:38,239 --> 00:02:42,239
there

00:02:38,959 --> 00:02:44,560
and in addition to that

00:02:42,239 --> 00:02:46,959
there are some workshop docs now the

00:02:44,560 --> 00:02:48,560
docs are in the github.com

00:02:46,959 --> 00:02:50,160
uh github.com if you're not familiar

00:02:48,560 --> 00:02:52,720
with it is public hosting website

00:02:50,160 --> 00:02:54,879
out there for git repositories but i

00:02:52,720 --> 00:02:57,040
have a repository out there

00:02:54,879 --> 00:02:58,720
under my first and last name together

00:02:57,040 --> 00:03:01,599
brent laster b-r-e-n-t

00:02:58,720 --> 00:03:02,319
l-a-s-t-e-r and then there's a comp area

00:03:01,599 --> 00:03:05,599
c-o-n-f

00:03:02,319 --> 00:03:09,680
for conferences and then ato 2020

00:03:05,599 --> 00:03:10,840
under that will be a cws setup container

00:03:09,680 --> 00:03:13,920
workshops

00:03:10,840 --> 00:03:15,120
setup.pdf that's intended to help guide

00:03:13,920 --> 00:03:18,560
you through

00:03:15,120 --> 00:03:19,760
in loading in the image into virtualbox

00:03:18,560 --> 00:03:21,200
if you need that if you're familiar with

00:03:19,760 --> 00:03:22,159
virtualbox you can just import the

00:03:21,200 --> 00:03:23,920
appliance

00:03:22,159 --> 00:03:25,200
and go on your way if you need help we

00:03:23,920 --> 00:03:28,720
can go ahead and do that

00:03:25,200 --> 00:03:32,480
then there's also the labs document

00:03:28,720 --> 00:03:35,519
then out there the cws-labs.pdf

00:03:32,480 --> 00:03:36,879
that labs document has the hands-on labs

00:03:35,519 --> 00:03:38,319
that we do in the class

00:03:36,879 --> 00:03:39,760
the class is going to be organized or

00:03:38,319 --> 00:03:41,280
the container the workshops can be

00:03:39,760 --> 00:03:43,280
organized as

00:03:41,280 --> 00:03:45,440
me talking for a while introducing the

00:03:43,280 --> 00:03:47,440
concept showing you some animations

00:03:45,440 --> 00:03:49,360
various slides and give introduce you to

00:03:47,440 --> 00:03:51,040
ideas and explaining them

00:03:49,360 --> 00:03:52,799
and then giving you a chance to actually

00:03:51,040 --> 00:03:55,200
work on these hands-on labs

00:03:52,799 --> 00:03:56,879
the labs themselves are pretty handheld

00:03:55,200 --> 00:03:58,319
hopefully they'll be able to

00:03:56,879 --> 00:04:00,720
follow through pretty easily but we've

00:03:58,319 --> 00:04:01,519
got uh colin logan to help out if needed

00:04:00,720 --> 00:04:04,560
with that

00:04:01,519 --> 00:04:06,720
i also uh wanted to mention

00:04:04,560 --> 00:04:08,000
that the virtual but there is a

00:04:06,720 --> 00:04:10,799
troubleshooting dock

00:04:08,000 --> 00:04:12,879
that is a collection of information

00:04:10,799 --> 00:04:15,439
that's been collected from people

00:04:12,879 --> 00:04:17,440
on and websites and stuff to try to help

00:04:15,439 --> 00:04:18,000
if you encounter problems with a virtual

00:04:17,440 --> 00:04:19,199
box

00:04:18,000 --> 00:04:20,639
most commonly if you're encountering

00:04:19,199 --> 00:04:22,000
problems in virtualbox they fall into a

00:04:20,639 --> 00:04:22,720
couple of categories just so you're

00:04:22,000 --> 00:04:26,000
aware

00:04:22,720 --> 00:04:28,400
uh one would be if you

00:04:26,000 --> 00:04:29,680
have hyper v or docker for windows

00:04:28,400 --> 00:04:31,199
you're using windows installed in there

00:04:29,680 --> 00:04:31,680
you may have temporarily disable it

00:04:31,199 --> 00:04:33,680
although i

00:04:31,680 --> 00:04:36,479
understand latest version doesn't

00:04:33,680 --> 00:04:38,160
require you to do that

00:04:36,479 --> 00:04:39,840
there's information that doc about how

00:04:38,160 --> 00:04:41,520
to do that another one that comes up a

00:04:39,840 --> 00:04:45,120
lot is sometimes people will

00:04:41,520 --> 00:04:46,720
have not have uh the virtualization

00:04:45,120 --> 00:04:47,360
setting turned on in the bios of their

00:04:46,720 --> 00:04:48,960
machine

00:04:47,360 --> 00:04:50,960
so it may be a bios setting that you

00:04:48,960 --> 00:04:52,880
have to go and tweak for that

00:04:50,960 --> 00:04:54,320
so i would encourage you if you haven't

00:04:52,880 --> 00:04:56,240
already make sure you've got

00:04:54,320 --> 00:04:58,320
these things available to you make sure

00:04:56,240 --> 00:05:00,000
you start downloading the doc

00:04:58,320 --> 00:05:01,840
make sure you get the labs document

00:05:00,000 --> 00:05:04,400
there the labs document's useful

00:05:01,840 --> 00:05:04,880
as well for being able to copy and paste

00:05:04,400 --> 00:05:07,600
from

00:05:04,880 --> 00:05:09,440
this isn't a typing class but there may

00:05:07,600 --> 00:05:10,720
be some things throughout the the course

00:05:09,440 --> 00:05:12,240
of the labs that it may be easier to

00:05:10,720 --> 00:05:14,560
copy and paste from

00:05:12,240 --> 00:05:16,160
from the pdf there if you do copy and

00:05:14,560 --> 00:05:16,639
paste one thing while i'm thinking about

00:05:16,160 --> 00:05:18,240
it

00:05:16,639 --> 00:05:20,160
be aware that sometimes when you copy

00:05:18,240 --> 00:05:22,080
and paste it doesn't always include

00:05:20,160 --> 00:05:24,479
uh the spaces through there it doesn't

00:05:22,080 --> 00:05:24,880
always capture the spaces just right so

00:05:24,479 --> 00:05:26,479
if

00:05:24,880 --> 00:05:28,320
you copy and paste and something runs

00:05:26,479 --> 00:05:29,840
and it gives you an error double check

00:05:28,320 --> 00:05:32,320
that it copy and paste it as

00:05:29,840 --> 00:05:33,680
as expected there so if you get those

00:05:32,320 --> 00:05:35,600
documents i get the

00:05:33,680 --> 00:05:36,960
ova file get it running virtualbox you

00:05:35,600 --> 00:05:38,880
should be good to go and you'll be ready

00:05:36,960 --> 00:05:41,360
for the hands-on labs in there

00:05:38,880 --> 00:05:42,720
a couple other quick notes here uh as

00:05:41,360 --> 00:05:44,639
far as breaks

00:05:42,720 --> 00:05:46,240
i tend to i know we kind of have this

00:05:44,639 --> 00:05:47,600
scheduled in 45-minute sessions

00:05:46,240 --> 00:05:50,560
15-minute breaks

00:05:47,600 --> 00:05:51,680
um the the folks at ato2 2020 have

00:05:50,560 --> 00:05:53,039
allowed us to kind of have some

00:05:51,680 --> 00:05:54,960
discretion in that

00:05:53,039 --> 00:05:57,199
what i find usually works well is to go

00:05:54,960 --> 00:05:58,800
through a section of the presentation

00:05:57,199 --> 00:06:00,880
be able to go through that section of

00:05:58,800 --> 00:06:03,199
concepts and then i'll give you a break

00:06:00,880 --> 00:06:04,240
with time to work on the labs and time

00:06:03,199 --> 00:06:06,080
to

00:06:04,240 --> 00:06:07,440
be able to take a little bio break if

00:06:06,080 --> 00:06:08,720
you need it get up and stretch your legs

00:06:07,440 --> 00:06:11,520
that sort of thing

00:06:08,720 --> 00:06:13,440
and that way they're not so much

00:06:11,520 --> 00:06:14,960
schedule but they are at logical points

00:06:13,440 --> 00:06:17,120
in the presentation

00:06:14,960 --> 00:06:18,479
and once we've done with that uh or once

00:06:17,120 --> 00:06:18,800
we're done with the break then i'll come

00:06:18,479 --> 00:06:21,199
back

00:06:18,800 --> 00:06:21,840
and answer any questions in there i

00:06:21,199 --> 00:06:24,240
typically

00:06:21,840 --> 00:06:26,639
like to answer questions when we come

00:06:24,240 --> 00:06:30,000
back from break for a couple of reasons

00:06:26,639 --> 00:06:30,720
one is that it allows us to not break up

00:06:30,000 --> 00:06:33,600
the flow

00:06:30,720 --> 00:06:34,880
of the class that is rather than kind of

00:06:33,600 --> 00:06:36,080
interrupting the flow and going

00:06:34,880 --> 00:06:38,160
answering questions

00:06:36,080 --> 00:06:40,160
uh it works a little better i found out

00:06:38,160 --> 00:06:42,319
to kind of try to just run through them

00:06:40,160 --> 00:06:43,199
and oftentimes too sometimes people will

00:06:42,319 --> 00:06:45,120
have already

00:06:43,199 --> 00:06:46,639
uh found the answers to questions or

00:06:45,120 --> 00:06:47,600
something by the time we get to that

00:06:46,639 --> 00:06:49,199
point as well

00:06:47,600 --> 00:06:50,960
so if you could put your questions in

00:06:49,199 --> 00:06:53,360
the q a that'll help me

00:06:50,960 --> 00:06:55,440
uh i'm sure colin and logan will help us

00:06:53,360 --> 00:06:56,400
with keeping track of things in the chat

00:06:55,440 --> 00:06:58,400
as well

00:06:56,400 --> 00:06:59,919
and interrupt me as needed in case

00:06:58,400 --> 00:07:01,840
something comes up so

00:06:59,919 --> 00:07:03,120
appreciate again them helping so again

00:07:01,840 --> 00:07:05,360
real quickly just make sure you have the

00:07:03,120 --> 00:07:07,199
ova file downloaded get virtualbox

00:07:05,360 --> 00:07:09,759
the setup document is there if you need

00:07:07,199 --> 00:07:11,039
it and the labs document you will need

00:07:09,759 --> 00:07:13,680
for the class and then there's a

00:07:11,039 --> 00:07:17,120
virtualbox uh vb troubleshooting

00:07:13,680 --> 00:07:19,199
document as well so

00:07:17,120 --> 00:07:21,520
is it the same ova file that was used in

00:07:19,199 --> 00:07:23,680
open source session previously

00:07:21,520 --> 00:07:24,639
um i think it's actually so i saw a

00:07:23,680 --> 00:07:28,400
question there

00:07:24,639 --> 00:07:30,400
um this one actually is

00:07:28,400 --> 00:07:32,479
updated i think the other one that one

00:07:30,400 --> 00:07:34,400
of the certificates ran out

00:07:32,479 --> 00:07:36,319
and so i had to kind of redo a couple of

00:07:34,400 --> 00:07:37,919
things in it to make sure that mini cube

00:07:36,319 --> 00:07:39,840
worked in there but it's basically the

00:07:37,919 --> 00:07:41,680
same stuff i'm just not sure the version

00:07:39,840 --> 00:07:44,479
that we had of a

00:07:41,680 --> 00:07:46,800
mini cube in there was working all right

00:07:44,479 --> 00:07:49,680
so let's go ahead and jump into our

00:07:46,800 --> 00:07:53,120
presentation and get started

00:07:49,680 --> 00:07:54,639
so a little bit about me uh i am an r d

00:07:53,120 --> 00:07:55,840
director i'm not the head of r d sounds

00:07:54,639 --> 00:07:58,319
my r d director

00:07:55,840 --> 00:07:59,520
there uh working in a devops

00:07:58,319 --> 00:08:01,680
organization

00:07:59,520 --> 00:08:03,199
do some training and stuff on the side

00:08:01,680 --> 00:08:06,080
various things c i c d

00:08:03,199 --> 00:08:07,919
cube kubernetes get jenkins gradle can't

00:08:06,080 --> 00:08:10,240
spell garrett right apparently but

00:08:07,919 --> 00:08:11,199
aside from that aside from spelling do

00:08:10,240 --> 00:08:13,319
some writing

00:08:11,199 --> 00:08:15,280
a couple of things i've written

00:08:13,319 --> 00:08:16,560
opensource.com there's stuff out there

00:08:15,280 --> 00:08:18,080
professional gift books things on

00:08:16,560 --> 00:08:21,199
o'reilly's platform

00:08:18,080 --> 00:08:23,440
jenkins 2 book kind of jumping ahead oh

00:08:21,199 --> 00:08:24,960
sorry one more thing to mention here at

00:08:23,440 --> 00:08:26,720
the bottom of this

00:08:24,960 --> 00:08:28,240
slide you'll see some information if

00:08:26,720 --> 00:08:30,960
you're interested in connecting with me

00:08:28,240 --> 00:08:32,880
either on twitter or linkedin feel free

00:08:30,960 --> 00:08:36,320
always happy to get a chance to connect

00:08:32,880 --> 00:08:36,320
with people on social media

00:08:36,479 --> 00:08:40,320
and the professional git book if you're

00:08:38,560 --> 00:08:42,000
interested in learning about git or

00:08:40,320 --> 00:08:42,959
interest either for the beginner or

00:08:42,000 --> 00:08:45,360
whether um

00:08:42,959 --> 00:08:46,480
at the advanced level i think you'll

00:08:45,360 --> 00:08:48,959
find something in here

00:08:46,480 --> 00:08:50,880
for you that might be interesting check

00:08:48,959 --> 00:08:51,519
it out on amazon if you're interested in

00:08:50,880 --> 00:08:54,800
that

00:08:51,519 --> 00:08:56,640
there's also a book here on jenkins2

00:08:54,800 --> 00:08:57,839
this is the pipelines as code if you're

00:08:56,640 --> 00:08:59,519
familiar with jenkins

00:08:57,839 --> 00:09:01,680
the idea of the overall workflow

00:08:59,519 --> 00:09:04,480
management orchestration of things

00:09:01,680 --> 00:09:05,519
and how do we write those as a code as

00:09:04,480 --> 00:09:07,839
opposed to the

00:09:05,519 --> 00:09:09,120
traditional sort of web interfaces we

00:09:07,839 --> 00:09:11,360
worked with in jenkins

00:09:09,120 --> 00:09:12,720
check those out on the amazon if you get

00:09:11,360 --> 00:09:14,240
the jenkins 2 book just quick

00:09:12,720 --> 00:09:16,800
note recommend that you get the

00:09:14,240 --> 00:09:17,440
electronic version printed version has

00:09:16,800 --> 00:09:20,560
some

00:09:17,440 --> 00:09:21,839
kind of faded screenshots not so clear

00:09:20,560 --> 00:09:24,000
in there so the printed version works a

00:09:21,839 --> 00:09:26,000
little bit better with that

00:09:24,000 --> 00:09:27,360
okay uh jenkins xbook which is in

00:09:26,000 --> 00:09:29,440
progress there's some early release

00:09:27,360 --> 00:09:30,320
chapters out on o'reilly jenkins x is

00:09:29,440 --> 00:09:32,640
working with

00:09:30,320 --> 00:09:33,839
uh creating cloud ready kubernetes

00:09:32,640 --> 00:09:35,040
pipelines out there

00:09:33,839 --> 00:09:36,640
this one's probably going to be delayed

00:09:35,040 --> 00:09:38,320
a bit because they keep evolving the

00:09:36,640 --> 00:09:39,600
product and stuff so probably more into

00:09:38,320 --> 00:09:41,839
next year but

00:09:39,600 --> 00:09:43,120
interesting nonetheless and trying to

00:09:41,839 --> 00:09:45,839
automatically

00:09:43,120 --> 00:09:47,200
spin up cicd pipelines in cloud

00:09:45,839 --> 00:09:49,600
environments

00:09:47,200 --> 00:09:51,760
so our agenda today talk about

00:09:49,600 --> 00:09:53,680
containers images and layers give you a

00:09:51,760 --> 00:09:54,240
foundation about what these are how they

00:09:53,680 --> 00:09:56,399
work

00:09:54,240 --> 00:09:58,640
how they fit together and things to be

00:09:56,399 --> 00:10:01,360
aware of with that we'll talk about

00:09:58,640 --> 00:10:01,760
docker as an application for working

00:10:01,360 --> 00:10:03,760
with

00:10:01,760 --> 00:10:05,920
containers images and layers and give

00:10:03,760 --> 00:10:08,320
you an explanation about that

00:10:05,920 --> 00:10:10,240
by the way i'll just mention i think at

00:10:08,320 --> 00:10:12,000
four o'clock this afternoon

00:10:10,240 --> 00:10:13,519
there's a session i'm doing called

00:10:12,000 --> 00:10:15,920
containers in depth

00:10:13,519 --> 00:10:18,240
which will go into even more detail if

00:10:15,920 --> 00:10:18,800
you're interested on how containers work

00:10:18,240 --> 00:10:20,240
and

00:10:18,800 --> 00:10:21,920
some more about things like storage

00:10:20,240 --> 00:10:22,880
drivers and such for containers how that

00:10:21,920 --> 00:10:24,640
all fits together

00:10:22,880 --> 00:10:26,480
so if you're interested check that out

00:10:24,640 --> 00:10:28,240
it's only a 45 minute session

00:10:26,480 --> 00:10:29,519
and then we have kubernetes we'll talk

00:10:28,240 --> 00:10:30,399
about kubernetes we'll introduce

00:10:29,519 --> 00:10:31,839
kubernetes

00:10:30,399 --> 00:10:33,920
as it relates to containers as the

00:10:31,839 --> 00:10:35,360
orchestration system the way to manage

00:10:33,920 --> 00:10:37,360
lots of containers you probably have

00:10:35,360 --> 00:10:38,800
heard all the buzz about kubernetes

00:10:37,360 --> 00:10:40,640
but what does really mean how does it

00:10:38,800 --> 00:10:41,680
work what are kubernetes clusters of

00:10:40,640 --> 00:10:43,519
different objects

00:10:41,680 --> 00:10:45,440
what kind of behavior does it exhibit

00:10:43,519 --> 00:10:46,000
and how even do we do a little bit of

00:10:45,440 --> 00:10:48,480
debugging

00:10:46,000 --> 00:10:49,200
we'll see some of that in the labs as

00:10:48,480 --> 00:10:52,160
well

00:10:49,200 --> 00:10:54,560
we'll talk about helm as a way to deploy

00:10:52,160 --> 00:10:56,560
kubernetes charts to manage these

00:10:54,560 --> 00:10:57,920
sets of objects that go in to make up

00:10:56,560 --> 00:11:00,880
something into kubernetes

00:10:57,920 --> 00:11:02,240
and to help you reuse those uh manifest

00:11:00,880 --> 00:11:04,000
files as we call them

00:11:02,240 --> 00:11:06,560
be able to reuse them be able to

00:11:04,000 --> 00:11:09,200
substitute in values be able to get

00:11:06,560 --> 00:11:10,399
more mileage out of things uh helm is

00:11:09,200 --> 00:11:12,240
very popular out there another one

00:11:10,399 --> 00:11:13,200
called customize but helm still kind of

00:11:12,240 --> 00:11:15,760
has the uh

00:11:13,200 --> 00:11:16,240
the lion's share of that space we'll

00:11:15,760 --> 00:11:18,079
look at

00:11:16,240 --> 00:11:20,480
istio as an example what we call a

00:11:18,079 --> 00:11:23,680
service mesh that is being able

00:11:20,480 --> 00:11:26,399
to add in a set of containers

00:11:23,680 --> 00:11:28,079
into each of our kubernetes areas that

00:11:26,399 --> 00:11:32,079
can do things like encryption

00:11:28,079 --> 00:11:33,839
traffic shaping um fault generation for

00:11:32,079 --> 00:11:36,079
testing those kinds of things

00:11:33,839 --> 00:11:38,800
and all tied and coordinated as a unit

00:11:36,079 --> 00:11:40,640
but yet setting inside each of our

00:11:38,800 --> 00:11:42,880
kubernetes units these are called pods

00:11:40,640 --> 00:11:44,399
in there we'll talk about a service mesh

00:11:42,880 --> 00:11:46,240
and in the labs you'll actually get to

00:11:44,399 --> 00:11:48,000
go through and run istio

00:11:46,240 --> 00:11:50,160
and see how to do some of these things

00:11:48,000 --> 00:11:51,839
like traffic shaping by that i mean

00:11:50,160 --> 00:11:53,760
being able to direct portions of your

00:11:51,839 --> 00:11:55,680
traffic for example to

00:11:53,760 --> 00:11:57,440
a new version of your app running out

00:11:55,680 --> 00:11:58,720
there while reducing the amount of

00:11:57,440 --> 00:12:00,320
traffic you're sending to the old one to

00:11:58,720 --> 00:12:02,000
see if your new one can handle it and

00:12:00,320 --> 00:12:03,040
gradually increasing that we'll see how

00:12:02,000 --> 00:12:04,959
to do that

00:12:03,040 --> 00:12:07,200
uh if time allows towards the end we may

00:12:04,959 --> 00:12:09,920
start running into time and if time will

00:12:07,200 --> 00:12:12,079
if time gets tight towards the end what

00:12:09,920 --> 00:12:13,120
i'll probably do is just make sure i go

00:12:12,079 --> 00:12:15,920
through

00:12:13,120 --> 00:12:17,839
the slides for you in the presentation

00:12:15,920 --> 00:12:19,440
and explain the labs and we even if we

00:12:17,839 --> 00:12:21,360
don't take time to do the labs

00:12:19,440 --> 00:12:23,760
you can do those on your own afterwards

00:12:21,360 --> 00:12:26,720
but at least you'll have that context

00:12:23,760 --> 00:12:28,399
and that information going in uh

00:12:26,720 --> 00:12:30,560
question i see came in and said pal

00:12:28,399 --> 00:12:32,800
will the powerpoint slides be available

00:12:30,560 --> 00:12:35,279
uh yes they will be

00:12:32,800 --> 00:12:35,839
afterwards i'll make them available uh

00:12:35,279 --> 00:12:38,880
to

00:12:35,839 --> 00:12:40,320
uh to the the ato group and they'll put

00:12:38,880 --> 00:12:41,200
them out there i think usually on slide

00:12:40,320 --> 00:12:43,040
share

00:12:41,200 --> 00:12:45,120
so if we get time we'll talk about get

00:12:43,040 --> 00:12:48,399
ups get ops is an approach

00:12:45,120 --> 00:12:49,600
which allows us to be able to manage

00:12:48,399 --> 00:12:51,360
kubernetes through

00:12:49,600 --> 00:12:52,720
files and git as opposed to running a

00:12:51,360 --> 00:12:54,399
command line utility

00:12:52,720 --> 00:12:56,959
has a number of advantages and has

00:12:54,399 --> 00:12:59,120
become a popular

00:12:56,959 --> 00:13:00,079
tool for doing that and finally we'll

00:12:59,120 --> 00:13:02,000
get into

00:13:00,079 --> 00:13:03,920
monitoring as time allows so you can see

00:13:02,000 --> 00:13:05,519
we have a lot of material here

00:13:03,920 --> 00:13:07,040
and what i want to do is we're going to

00:13:05,519 --> 00:13:10,079
weave through a

00:13:07,040 --> 00:13:12,800
an application a simple little java

00:13:10,079 --> 00:13:15,200
application that i wrote a long time ago

00:13:12,800 --> 00:13:15,839
which has a web app and has a database

00:13:15,200 --> 00:13:17,440
piece

00:13:15,839 --> 00:13:19,440
and we're going to take that through

00:13:17,440 --> 00:13:22,079
from creating containers for it

00:13:19,440 --> 00:13:24,320
to running into kubernetes to exercising

00:13:22,079 --> 00:13:26,480
to building the helm charts for it

00:13:24,320 --> 00:13:28,160
to uh working with it as a service mesh

00:13:26,480 --> 00:13:29,440
and istio

00:13:28,160 --> 00:13:31,920
through the whole thing so we'll get to

00:13:29,440 --> 00:13:33,519
see examples of those all along the way

00:13:31,920 --> 00:13:35,360
to kind of cure you from the beginning

00:13:33,519 --> 00:13:37,040
kind of see how it all fits together

00:13:35,360 --> 00:13:38,399
so with that i'm excited let's go ahead

00:13:37,040 --> 00:13:39,839
and get started

00:13:38,399 --> 00:13:41,440
uh so let's start out talking about

00:13:39,839 --> 00:13:43,360
water containers a couple of different

00:13:41,440 --> 00:13:44,560
ways to define a container a container

00:13:43,360 --> 00:13:47,199
can be thought of as

00:13:44,560 --> 00:13:48,800
a standard unit of software that really

00:13:47,199 --> 00:13:50,880
functions like a fully

00:13:48,800 --> 00:13:52,320
uh provisioned machine provisioned

00:13:50,880 --> 00:13:54,560
meaning has all the things

00:13:52,320 --> 00:13:56,320
on it that it needs to run the operating

00:13:54,560 --> 00:13:58,880
system the other software

00:13:56,320 --> 00:14:00,399
uh the configuration all those pieces so

00:13:58,880 --> 00:14:02,160
we talk about containers as being kind

00:14:00,399 --> 00:14:02,959
of like the standard way of talking

00:14:02,160 --> 00:14:04,639
about

00:14:02,959 --> 00:14:07,120
a set of software that has this

00:14:04,639 --> 00:14:08,880
environment out there that it can run on

00:14:07,120 --> 00:14:10,079
itself kind of the way you might think

00:14:08,880 --> 00:14:11,600
of like a laptop if you had an

00:14:10,079 --> 00:14:12,560
application specifically tied to a

00:14:11,600 --> 00:14:15,279
laptop for example

00:14:12,560 --> 00:14:17,839
you're carrying that around with you i

00:14:15,279 --> 00:14:19,760
it's also a way of packaging software

00:14:17,839 --> 00:14:21,519
so that you have that self-contained

00:14:19,760 --> 00:14:22,959
environment there and it's kind of

00:14:21,519 --> 00:14:26,000
insulated from the

00:14:22,959 --> 00:14:27,040
the host os by host os we mean the

00:14:26,000 --> 00:14:29,519
application where

00:14:27,040 --> 00:14:30,800
docker for example or whatever container

00:14:29,519 --> 00:14:32,720
engineer you're using

00:14:30,800 --> 00:14:34,240
is actually running so we have it

00:14:32,720 --> 00:14:35,600
insulated from that

00:14:34,240 --> 00:14:37,199
but it's easily ported to other

00:14:35,600 --> 00:14:37,519
environments because anywhere you can

00:14:37,199 --> 00:14:39,760
run

00:14:37,519 --> 00:14:40,639
docker or run those other docker-like

00:14:39,760 --> 00:14:42,560
applications

00:14:40,639 --> 00:14:44,240
you can actually run your container so

00:14:42,560 --> 00:14:46,399
it makes it very portable to carry

00:14:44,240 --> 00:14:47,760
around

00:14:46,399 --> 00:14:49,279
anytime you talk about containers you're

00:14:47,760 --> 00:14:51,199
going to see a picture of the obligatory

00:14:49,279 --> 00:14:53,279
container cargo ship out there

00:14:51,199 --> 00:14:54,959
that cargo ship has the containers on it

00:14:53,279 --> 00:14:56,000
the physical containers that have things

00:14:54,959 --> 00:14:58,560
inside of them

00:14:56,000 --> 00:15:00,399
so what's in our software container well

00:14:58,560 --> 00:15:02,480
if we think of it like one of these uh

00:15:00,399 --> 00:15:04,320
cargo containers here might think of

00:15:02,480 --> 00:15:05,920
things like the app itself the

00:15:04,320 --> 00:15:08,000
application that we're running

00:15:05,920 --> 00:15:09,360
the runtime environment that we need the

00:15:08,000 --> 00:15:13,360
dependencies

00:15:09,360 --> 00:15:15,120
in there the settings any kind of system

00:15:13,360 --> 00:15:16,639
libraries

00:15:15,120 --> 00:15:19,279
those kinds of things that go in there

00:15:16,639 --> 00:15:21,120
system tools all packaged up are all

00:15:19,279 --> 00:15:22,160
included in a container and the symbol

00:15:21,120 --> 00:15:24,399
for docker there

00:15:22,160 --> 00:15:25,600
is that whale with the sort of

00:15:24,399 --> 00:15:28,320
containers uh

00:15:25,600 --> 00:15:30,079
carried on its back there so when we

00:15:28,320 --> 00:15:32,800
talk about containers though a container

00:15:30,079 --> 00:15:34,639
is not a vm a vm being a virtual machine

00:15:32,800 --> 00:15:36,560
a virtual machine is like this ova file

00:15:34,639 --> 00:15:39,360
as you downloaded for the workshop

00:15:36,560 --> 00:15:41,040
it's different from a vm it leverages a

00:15:39,360 --> 00:15:42,720
number of features of the linux

00:15:41,040 --> 00:15:45,040
operating system to carve out

00:15:42,720 --> 00:15:46,079
a self-contained space to run in again

00:15:45,040 --> 00:15:46,959
if you're interested in a lot more

00:15:46,079 --> 00:15:49,040
detail about that

00:15:46,959 --> 00:15:50,240
check out the session this afternoon on

00:15:49,040 --> 00:15:52,320
containers

00:15:50,240 --> 00:15:55,920
in depth containers are running

00:15:52,320 --> 00:15:58,639
instances of images so images define

00:15:55,920 --> 00:16:00,480
or provision what goes into a container

00:15:58,639 --> 00:16:01,920
and then the container is a running

00:16:00,480 --> 00:16:03,759
instance of an image and i'll give you

00:16:01,920 --> 00:16:06,000
some analogies along the way

00:16:03,759 --> 00:16:07,839
to help you think about that images to

00:16:06,000 --> 00:16:08,720
find what goes into container containers

00:16:07,839 --> 00:16:12,480
are built from

00:16:08,720 --> 00:16:13,120
images and the benefits of containers

00:16:12,480 --> 00:16:14,800
probably

00:16:13,120 --> 00:16:16,800
a lot of these you may have heard before

00:16:14,800 --> 00:16:18,480
lots of words on the slide

00:16:16,800 --> 00:16:19,920
basically they're easy to create they're

00:16:18,480 --> 00:16:21,600
portable

00:16:19,920 --> 00:16:23,199
they allow us because they are so

00:16:21,600 --> 00:16:25,920
self-contained to

00:16:23,199 --> 00:16:26,560
really kind of zero in on these best

00:16:25,920 --> 00:16:28,639
practices

00:16:26,560 --> 00:16:30,959
continuous deployment integration and so

00:16:28,639 --> 00:16:31,759
on because we can simply spin up a

00:16:30,959 --> 00:16:34,000
container

00:16:31,759 --> 00:16:35,360
it has everything that it needs to run

00:16:34,000 --> 00:16:37,440
and use in there

00:16:35,360 --> 00:16:38,880
it's almost as if we had like a laptop

00:16:37,440 --> 00:16:40,399
that we were turning on

00:16:38,880 --> 00:16:42,560
and when we get done with it we turn it

00:16:40,399 --> 00:16:44,240
off it goes away so that sort of

00:16:42,560 --> 00:16:45,920
portability that we talked about that

00:16:44,240 --> 00:16:47,040
packaging up of applications with

00:16:45,920 --> 00:16:49,920
everything they need

00:16:47,040 --> 00:16:52,000
makes it easy to combine things in a

00:16:49,920 --> 00:16:53,440
devops way or continuous development

00:16:52,000 --> 00:16:56,480
integration out there

00:16:53,440 --> 00:16:58,720
portable across the os or cloud

00:16:56,480 --> 00:16:59,519
you but some of the key parts of this

00:16:58,720 --> 00:17:01,120
really

00:16:59,519 --> 00:17:02,839
kind of the third bullet from the bottom

00:17:01,120 --> 00:17:04,880
manage the application instead of the

00:17:02,839 --> 00:17:07,199
infrastructure once you have

00:17:04,880 --> 00:17:09,199
that infrastructure or that provisioning

00:17:07,199 --> 00:17:10,640
done in the container image

00:17:09,199 --> 00:17:12,959
then when you work on the container you

00:17:10,640 --> 00:17:14,400
can focus on developing your application

00:17:12,959 --> 00:17:15,839
because you've got the environment

00:17:14,400 --> 00:17:17,600
you've got everything you need there

00:17:15,839 --> 00:17:19,039
so it allows us when we're worried when

00:17:17,600 --> 00:17:20,720
we're trying to do something that's

00:17:19,039 --> 00:17:22,559
going to be portable across a number of

00:17:20,720 --> 00:17:24,160
operating systems for example

00:17:22,559 --> 00:17:26,079
the container can run anywhere that

00:17:24,160 --> 00:17:27,120
docker or other applications like docker

00:17:26,079 --> 00:17:29,760
can run

00:17:27,120 --> 00:17:30,720
then we can focus more on just doing the

00:17:29,760 --> 00:17:32,240
application

00:17:30,720 --> 00:17:34,400
that's running in that containerized

00:17:32,240 --> 00:17:36,559
environment and that container then

00:17:34,400 --> 00:17:38,960
is insulated from all the worries we'd

00:17:36,559 --> 00:17:41,039
have about trying to port it to this os

00:17:38,960 --> 00:17:42,960
or put it on that system there so it

00:17:41,039 --> 00:17:45,600
allows us to focus more

00:17:42,960 --> 00:17:46,640
on these kinds of uh environments so

00:17:45,600 --> 00:17:48,880
these kinds of

00:17:46,640 --> 00:17:50,640
portability out there works great in a

00:17:48,880 --> 00:17:51,760
microservice type of environment where

00:17:50,640 --> 00:17:54,400
you have

00:17:51,760 --> 00:17:56,559
the smaller units and you can have like

00:17:54,400 --> 00:17:58,880
one or a couple maybe however it fits

00:17:56,559 --> 00:18:00,000
for a particular container and then you

00:17:58,880 --> 00:18:02,160
have multiple containers

00:18:00,000 --> 00:18:03,679
out there you can key off of the same

00:18:02,160 --> 00:18:05,120
environment stuff but have your app

00:18:03,679 --> 00:18:08,880
running in its own

00:18:05,120 --> 00:18:10,559
isolated environment container image

00:18:08,880 --> 00:18:12,480
again is a read-only template used to

00:18:10,559 --> 00:18:14,160
create a container it's like a snapshot

00:18:12,480 --> 00:18:16,400
of a container

00:18:14,160 --> 00:18:17,840
can images are stored in a registry

00:18:16,400 --> 00:18:20,320
we'll see this we actually will have a

00:18:17,840 --> 00:18:22,080
registry running on our vm

00:18:20,320 --> 00:18:23,840
and images are generally considered to

00:18:22,080 --> 00:18:26,640
be immutable we talk about

00:18:23,840 --> 00:18:27,679
this immutability all that means is that

00:18:26,640 --> 00:18:29,120
they are not

00:18:27,679 --> 00:18:31,120
changeable they can't be changed and

00:18:29,120 --> 00:18:33,200
we'll explain more about why this is

00:18:31,120 --> 00:18:35,280
important and what it means in just a

00:18:33,200 --> 00:18:38,240
moment but the idea here

00:18:35,280 --> 00:18:39,280
is that the images are like the software

00:18:38,240 --> 00:18:41,840
you would install

00:18:39,280 --> 00:18:43,520
on a laptop or a desktop you would

00:18:41,840 --> 00:18:45,600
provision it on there

00:18:43,520 --> 00:18:47,360
set it up generally when we're working

00:18:45,600 --> 00:18:49,440
on a computer we're not going out and

00:18:47,360 --> 00:18:51,120
changing things about the software that

00:18:49,440 --> 00:18:53,280
is already configured on there

00:18:51,120 --> 00:18:54,320
it's installed it's ready for us to use

00:18:53,280 --> 00:18:55,919
it's set up

00:18:54,320 --> 00:18:58,320
we are going to be changing things in

00:18:55,919 --> 00:18:59,440
our user area or an area that we can

00:18:58,320 --> 00:19:00,640
write to we're not going out and

00:18:59,440 --> 00:19:02,000
tweaking things

00:19:00,640 --> 00:19:03,679
on the operating system unless we're

00:19:02,000 --> 00:19:05,679
installing new software but it's the

00:19:03,679 --> 00:19:06,880
same idea with an image an image once

00:19:05,679 --> 00:19:08,559
you've got it provisioned once you've

00:19:06,880 --> 00:19:10,799
got it set up the way you want it with

00:19:08,559 --> 00:19:13,760
all the things we saw that go into

00:19:10,799 --> 00:19:15,200
that container there are then you that

00:19:13,760 --> 00:19:17,440
part is immutable

00:19:15,200 --> 00:19:19,280
now when you start running a container

00:19:17,440 --> 00:19:20,480
that can be changed and we'll talk about

00:19:19,280 --> 00:19:22,160
how that works as well

00:19:20,480 --> 00:19:23,679
then you have a space similar to how you

00:19:22,160 --> 00:19:27,360
might have a space for

00:19:23,679 --> 00:19:29,120
a user to work in on a laptop or desktop

00:19:27,360 --> 00:19:31,280
to be able to create things to be able

00:19:29,120 --> 00:19:33,440
to write things but if we are changing

00:19:31,280 --> 00:19:35,120
something about an image the practice is

00:19:33,440 --> 00:19:37,039
that we create a brand new image and

00:19:35,120 --> 00:19:39,440
we'll talk about some of the reasons why

00:19:37,039 --> 00:19:40,960
in a moment so immutability does not

00:19:39,440 --> 00:19:43,440
imply that containers

00:19:40,960 --> 00:19:46,080
can't be changed containers are built up

00:19:43,440 --> 00:19:47,840
from layers and the docker build command

00:19:46,080 --> 00:19:49,600
is used to create images

00:19:47,840 --> 00:19:52,799
so let's get some pictures in here to

00:19:49,600 --> 00:19:55,360
talk about how this all fits together

00:19:52,799 --> 00:19:57,039
so an image again is that basic thing

00:19:55,360 --> 00:19:58,160
for a container it's like the provision

00:19:57,039 --> 00:20:01,200
set of software

00:19:58,160 --> 00:20:01,600
out there and it's built up from what we

00:20:01,200 --> 00:20:03,840
call

00:20:01,600 --> 00:20:06,080
layers each layer results from an

00:20:03,840 --> 00:20:06,720
instruction modification and the docker

00:20:06,080 --> 00:20:08,880
file

00:20:06,720 --> 00:20:10,559
a docker file is kind of like a recipe

00:20:08,880 --> 00:20:13,760
or a script

00:20:10,559 --> 00:20:15,600
that we follow to build up the image

00:20:13,760 --> 00:20:17,440
if you were to think of it like if you

00:20:15,600 --> 00:20:20,720
were going to install

00:20:17,440 --> 00:20:23,840
software on a family member or

00:20:20,720 --> 00:20:26,320
a laptop or a desktop or perhaps

00:20:23,840 --> 00:20:28,000
one at your work you might have a script

00:20:26,320 --> 00:20:28,799
there or a sheet of paper with a

00:20:28,000 --> 00:20:30,240
checklist

00:20:28,799 --> 00:20:31,840
that you would go through and say i need

00:20:30,240 --> 00:20:33,919
to install the operating system

00:20:31,840 --> 00:20:35,520
i need to install anti-virus i need to

00:20:33,919 --> 00:20:37,600
install office apps

00:20:35,520 --> 00:20:39,919
kind of that same idea it's kind of the

00:20:37,600 --> 00:20:42,400
idea of a docker file specifies

00:20:39,919 --> 00:20:44,559
how the software how the configuration

00:20:42,400 --> 00:20:47,200
how that gets provisioned or done

00:20:44,559 --> 00:20:48,000
to create this image now not all

00:20:47,200 --> 00:20:50,799
instructions

00:20:48,000 --> 00:20:52,400
in a docker file will create a new layer

00:20:50,799 --> 00:20:53,840
that used to be the case but actually

00:20:52,400 --> 00:20:55,039
now not all of them do it's a little bit

00:20:53,840 --> 00:20:56,320
more efficient in there

00:20:55,039 --> 00:20:58,400
but as we're going through making

00:20:56,320 --> 00:20:59,600
changes that are from the steps in the

00:20:58,400 --> 00:21:02,080
docker file

00:20:59,600 --> 00:21:02,960
they are stacked on top of we create

00:21:02,080 --> 00:21:05,039
these layers

00:21:02,960 --> 00:21:06,400
and they're effectively stacked on top

00:21:05,039 --> 00:21:07,840
of the ones before

00:21:06,400 --> 00:21:09,600
so the instructions that make a new

00:21:07,840 --> 00:21:11,039
layer create this new layer and that

00:21:09,600 --> 00:21:12,960
builds up our image

00:21:11,039 --> 00:21:14,880
now each layer is only the set of

00:21:12,960 --> 00:21:17,039
differences from the last one so if we

00:21:14,880 --> 00:21:18,640
add a directory if we modify something

00:21:17,039 --> 00:21:20,480
set a configuration value

00:21:18,640 --> 00:21:21,840
it's the differences from the last one

00:21:20,480 --> 00:21:22,880
so the whole thing then becomes a

00:21:21,840 --> 00:21:26,400
cumulative

00:21:22,880 --> 00:21:28,159
uh set of conf provisioned software

00:21:26,400 --> 00:21:29,760
think of a base layer as being an os

00:21:28,159 --> 00:21:31,360
image typically it's going to be the

00:21:29,760 --> 00:21:32,000
bottom layer the first one we get is

00:21:31,360 --> 00:21:34,159
going to be an

00:21:32,000 --> 00:21:35,120
operating system image or it might be

00:21:34,159 --> 00:21:37,840
some

00:21:35,120 --> 00:21:39,679
some application that is already set up

00:21:37,840 --> 00:21:40,880
and configured to run on an operating

00:21:39,679 --> 00:21:44,000
system image

00:21:40,880 --> 00:21:46,799
then as we go along and we build up the

00:21:44,000 --> 00:21:48,480
image when we get to actually creating a

00:21:46,799 --> 00:21:51,280
container out of that

00:21:48,480 --> 00:21:52,400
the container simply adds a read write

00:21:51,280 --> 00:21:54,720
layer on top

00:21:52,400 --> 00:21:55,440
of the image so it gives you this place

00:21:54,720 --> 00:21:57,120
to work

00:21:55,440 --> 00:21:59,039
again i tell people kind of think of it

00:21:57,120 --> 00:22:01,280
like if i have a

00:21:59,039 --> 00:22:03,039
laptop desktop some kind of machine that

00:22:01,280 --> 00:22:04,640
i have provisioned with all the software

00:22:03,039 --> 00:22:05,679
maybe for a family member or something

00:22:04,640 --> 00:22:07,360
like that

00:22:05,679 --> 00:22:09,360
when i get ready one of the final steps

00:22:07,360 --> 00:22:11,120
i do right is i create a user area a

00:22:09,360 --> 00:22:12,000
user for them to write their files and

00:22:11,120 --> 00:22:14,559
work with their files

00:22:12,000 --> 00:22:15,840
and stuff that is on top of or in

00:22:14,559 --> 00:22:17,760
addition to

00:22:15,840 --> 00:22:19,039
those already provisioned software same

00:22:17,760 --> 00:22:20,960
idea with containers

00:22:19,039 --> 00:22:22,559
the container layer the thing that makes

00:22:20,960 --> 00:22:24,559
an image into a container

00:22:22,559 --> 00:22:26,799
is simply this read write layer which is

00:22:24,559 --> 00:22:28,080
a place where i can make modifications i

00:22:26,799 --> 00:22:31,280
can write changes

00:22:28,080 --> 00:22:32,960
write files in there so all changes are

00:22:31,280 --> 00:22:35,600
made to the running container go

00:22:32,960 --> 00:22:37,440
into that layer that's why we say that

00:22:35,600 --> 00:22:40,159
the image itself

00:22:37,440 --> 00:22:41,760
is read only so it's read-only but then

00:22:40,159 --> 00:22:43,120
if you need to modify something it goes

00:22:41,760 --> 00:22:45,039
into the container layer

00:22:43,120 --> 00:22:46,720
so let's see if this will actually uh

00:22:45,039 --> 00:22:50,799
work here what we're going to do

00:22:46,720 --> 00:22:52,840
showing here is how we go about creating

00:22:50,799 --> 00:22:54,400
an image out there the docker build

00:22:52,840 --> 00:22:56,400
command

00:22:54,400 --> 00:22:57,600
is a way to do this it's a way of taking

00:22:56,400 --> 00:22:59,360
that docker file

00:22:57,600 --> 00:23:00,880
that you see on the left there in the

00:22:59,360 --> 00:23:03,440
white background

00:23:00,880 --> 00:23:05,840
instead of instructions there and on the

00:23:03,440 --> 00:23:07,679
screen here you can see the actual build

00:23:05,840 --> 00:23:09,120
running here and you can tell what it's

00:23:07,679 --> 00:23:11,120
doing kind of get an idea

00:23:09,120 --> 00:23:12,400
the first step refers to step one in the

00:23:11,120 --> 00:23:15,440
docker file says i'm

00:23:12,400 --> 00:23:16,000
downloading from mysql a certain version

00:23:15,440 --> 00:23:17,760
of that

00:23:16,000 --> 00:23:19,039
so that means i'm going out to the

00:23:17,760 --> 00:23:21,840
public docker hub

00:23:19,039 --> 00:23:22,880
the public registry or repository for

00:23:21,840 --> 00:23:24,880
docker images

00:23:22,880 --> 00:23:26,720
and i'm getting a mysql image out of

00:23:24,880 --> 00:23:27,919
there somebody in the past has already

00:23:26,720 --> 00:23:29,760
set up this image

00:23:27,919 --> 00:23:31,480
and made it available and they put this

00:23:29,760 --> 00:23:33,600
version identifier that's what the

00:23:31,480 --> 00:23:35,919
5.5.45 is on there

00:23:33,600 --> 00:23:38,000
and it's pulling it down that image

00:23:35,919 --> 00:23:39,520
itself is made up of layers at some

00:23:38,000 --> 00:23:40,720
point in the past somebody has done a

00:23:39,520 --> 00:23:42,960
number of steps

00:23:40,720 --> 00:23:44,400
in a docker file that created this

00:23:42,960 --> 00:23:46,320
saying this single

00:23:44,400 --> 00:23:48,159
image out there so what you see in the

00:23:46,320 --> 00:23:50,080
first pull part there is going out and

00:23:48,159 --> 00:23:52,000
getting all of the images all of the

00:23:50,080 --> 00:23:54,799
layers associated with that

00:23:52,000 --> 00:23:56,960
now then after that we go through uh

00:23:54,799 --> 00:23:58,320
digest is basically uh kind of like a

00:23:56,960 --> 00:24:00,240
check sum of this

00:23:58,320 --> 00:24:02,159
uh again talk more about that in the

00:24:00,240 --> 00:24:03,360
latest in the session this afternoon

00:24:02,159 --> 00:24:04,960
if you want to go into that but

00:24:03,360 --> 00:24:06,480
basically you can see it downloaded an

00:24:04,960 --> 00:24:07,760
image out there downloaded an image that

00:24:06,480 --> 00:24:10,400
somebody had created

00:24:07,760 --> 00:24:12,159
of this mysql database application

00:24:10,400 --> 00:24:12,880
already configured on an operating

00:24:12,159 --> 00:24:15,120
system

00:24:12,880 --> 00:24:17,120
then it copied in some stuff step two of

00:24:15,120 --> 00:24:17,760
four the copy command means copy in some

00:24:17,120 --> 00:24:20,880
stuff

00:24:17,760 --> 00:24:22,480
from my local area into my image i want

00:24:20,880 --> 00:24:24,640
to add some more stuff into the image

00:24:22,480 --> 00:24:26,640
that i have on my local disk here

00:24:24,640 --> 00:24:28,640
we set an entry point as a place to

00:24:26,640 --> 00:24:31,279
start when that container spins up

00:24:28,640 --> 00:24:32,000
and we also make sure the mysql daemon

00:24:31,279 --> 00:24:33,919
is running that

00:24:32,000 --> 00:24:35,440
process is going to run so all these

00:24:33,919 --> 00:24:36,960
things that are being put into that

00:24:35,440 --> 00:24:38,000
image to create the image that we're

00:24:36,960 --> 00:24:40,159
going to

00:24:38,000 --> 00:24:42,159
base our containers off of and to have

00:24:40,159 --> 00:24:43,840
an image that's based off of mysql with

00:24:42,159 --> 00:24:47,039
our own customizations

00:24:43,840 --> 00:24:50,159
if we dig into this a little deeper

00:24:47,039 --> 00:24:52,000
here we look at

00:24:50,159 --> 00:24:53,840
how this all relates together one of the

00:24:52,000 --> 00:24:56,000
tools that docker provides for us

00:24:53,840 --> 00:24:57,039
is a history command a history allows us

00:24:56,000 --> 00:24:58,960
to be able

00:24:57,039 --> 00:25:00,480
to look at the history of what went into

00:24:58,960 --> 00:25:02,480
an image and you can see

00:25:00,480 --> 00:25:04,320
there's a lot of steps that have gone

00:25:02,480 --> 00:25:06,320
into creating this image

00:25:04,320 --> 00:25:07,840
now at the ones that are missing there

00:25:06,320 --> 00:25:09,360
simply means that

00:25:07,840 --> 00:25:11,120
those are layers that were done on

00:25:09,360 --> 00:25:13,200
another system when whoever put this

00:25:11,120 --> 00:25:15,120
mysql base image together

00:25:13,200 --> 00:25:16,559
they used a lot of steps as you can see

00:25:15,120 --> 00:25:19,600
on the right hand side

00:25:16,559 --> 00:25:21,039
of that bottom uh screenshot there you

00:25:19,600 --> 00:25:22,159
see a lot of things went into building

00:25:21,039 --> 00:25:24,159
up that mysql

00:25:22,159 --> 00:25:25,520
image we don't have all of the layers

00:25:24,159 --> 00:25:26,960
and all the ids there

00:25:25,520 --> 00:25:29,120
so but the history just showed that's

00:25:26,960 --> 00:25:30,799
why it says missing when we go to map

00:25:29,120 --> 00:25:35,279
this though we can think of mapping

00:25:30,799 --> 00:25:37,039
the mysql step here

00:25:35,279 --> 00:25:38,880
as going in when we actually do the

00:25:37,039 --> 00:25:41,440
build command going in

00:25:38,880 --> 00:25:42,080
bringing down that piece and creating

00:25:41,440 --> 00:25:45,200
the first

00:25:42,080 --> 00:25:45,760
layer the bottom layer of our container

00:25:45,200 --> 00:25:48,480
image

00:25:45,760 --> 00:25:50,400
of our image there when we go through

00:25:48,480 --> 00:25:52,320
and by the way the hexadecimal value

00:25:50,400 --> 00:25:53,440
here is just a way of identifying that

00:25:52,320 --> 00:25:55,200
particular layer

00:25:53,440 --> 00:25:57,279
all the things that went into that layer

00:25:55,200 --> 00:25:59,120
in blue here were things that went into

00:25:57,279 --> 00:26:02,559
that to build up that mysql

00:25:59,120 --> 00:26:04,159
uh setup then we have the next one where

00:26:02,559 --> 00:26:06,320
we copy and stuff locally when we

00:26:04,159 --> 00:26:08,799
execute it you can see it being executed

00:26:06,320 --> 00:26:09,360
that created yet another layer into our

00:26:08,799 --> 00:26:11,279
image

00:26:09,360 --> 00:26:12,960
and then so on with the other ones as we

00:26:11,279 --> 00:26:14,320
did the entry point say where do we

00:26:12,960 --> 00:26:17,039
start in here

00:26:14,320 --> 00:26:17,600
and then we also had the mysql daemon

00:26:17,039 --> 00:26:19,520
running

00:26:17,600 --> 00:26:22,000
so all that goes into building up those

00:26:19,520 --> 00:26:25,279
layers that then go into an image

00:26:22,000 --> 00:26:27,840
that image itself

00:26:25,279 --> 00:26:29,120
it is a what the operating system is

00:26:27,840 --> 00:26:31,440
storing out there

00:26:29,120 --> 00:26:33,039
um in the docker area and is managed by

00:26:31,440 --> 00:26:35,679
the docker storage drivers to

00:26:33,039 --> 00:26:37,039
weave all that together uh to make sure

00:26:35,679 --> 00:26:39,200
that we have all the pieces

00:26:37,039 --> 00:26:41,039
so we have that in the terms the

00:26:39,200 --> 00:26:41,360
operating system the layers are kind of

00:26:41,039 --> 00:26:44,000
like

00:26:41,360 --> 00:26:45,600
files the image layers are read only

00:26:44,000 --> 00:26:48,080
immutable not changeable

00:26:45,600 --> 00:26:49,520
and we create a container again by

00:26:48,080 --> 00:26:51,760
actually adding on a read

00:26:49,520 --> 00:26:53,120
write layer in docker the command that

00:26:51,760 --> 00:26:55,600
we use to turn

00:26:53,120 --> 00:26:56,400
an image into a container is the run

00:26:55,600 --> 00:26:58,480
command

00:26:56,400 --> 00:27:00,559
we run it and we pass in we may pass in

00:26:58,480 --> 00:27:02,240
some environment variables and such

00:27:00,559 --> 00:27:03,679
and when we do that we then have this

00:27:02,240 --> 00:27:06,320
thin read write layer

00:27:03,679 --> 00:27:06,960
on top of it the read layer is another

00:27:06,320 --> 00:27:09,039
layer

00:27:06,960 --> 00:27:12,720
it's just for us to use to put stuff

00:27:09,039 --> 00:27:14,480
into now a couple of technologies here

00:27:12,720 --> 00:27:16,080
and once you do that the docker ps

00:27:14,480 --> 00:27:17,279
command shows you the container out

00:27:16,080 --> 00:27:19,200
there running

00:27:17,279 --> 00:27:20,559
but the couple of technologies here

00:27:19,200 --> 00:27:23,840
allow us to

00:27:20,559 --> 00:27:25,440
actually use the layers here to work

00:27:23,840 --> 00:27:27,440
with containers

00:27:25,440 --> 00:27:29,200
the first one we'll talk about is a

00:27:27,440 --> 00:27:32,480
union file system not all

00:27:29,200 --> 00:27:34,960
docker drivers use union file system but

00:27:32,480 --> 00:27:36,799
it is the default one now it is the one

00:27:34,960 --> 00:27:39,440
pretty much that everything uses

00:27:36,799 --> 00:27:40,480
but the union file system here is built

00:27:39,440 --> 00:27:42,799
into linux

00:27:40,480 --> 00:27:44,960
and the idea is simply this if i have

00:27:42,799 --> 00:27:47,279
files scattered around these different

00:27:44,960 --> 00:27:48,159
layers here remember that layers get

00:27:47,279 --> 00:27:50,159
created

00:27:48,159 --> 00:27:51,760
as we are executing those commands in a

00:27:50,159 --> 00:27:53,840
docker file so they are

00:27:51,760 --> 00:27:55,840
copying in things or they're bringing

00:27:53,840 --> 00:28:00,159
other layers those kinds of things

00:27:55,840 --> 00:28:03,679
so with there and so if we have

00:28:00,159 --> 00:28:05,520
uh an actual layer here

00:28:03,679 --> 00:28:07,120
with different files in it one of the

00:28:05,520 --> 00:28:09,120
questions that comes up is well how do i

00:28:07,120 --> 00:28:11,120
get to those different files

00:28:09,120 --> 00:28:12,559
so if i get to those files here the

00:28:11,120 --> 00:28:15,279
union file system

00:28:12,559 --> 00:28:16,240
can go down and can actually look

00:28:15,279 --> 00:28:18,240
through this

00:28:16,240 --> 00:28:20,000
it can actually look from the top down

00:28:18,240 --> 00:28:21,600
to find files that it needs

00:28:20,000 --> 00:28:24,000
one way i tell people to think about

00:28:21,600 --> 00:28:26,159
this if you've ever set up the path

00:28:24,000 --> 00:28:27,840
environment variable either on your on

00:28:26,159 --> 00:28:28,480
your machine out there you've seen the

00:28:27,840 --> 00:28:30,559
path

00:28:28,480 --> 00:28:32,240
you know that the idea behind a path is

00:28:30,559 --> 00:28:34,159
look in one area

00:28:32,240 --> 00:28:35,440
and then if i can't find it look in a

00:28:34,159 --> 00:28:36,799
different directory and if i can't find

00:28:35,440 --> 00:28:38,559
it look in a different directory

00:28:36,799 --> 00:28:40,720
there's a sequence here of things that

00:28:38,559 --> 00:28:42,640
we are drilling through to find it

00:28:40,720 --> 00:28:44,960
that's what the union file system really

00:28:42,640 --> 00:28:47,120
does for you it allows you to layer

00:28:44,960 --> 00:28:48,080
things on top or directories on top of

00:28:47,120 --> 00:28:50,720
each other

00:28:48,080 --> 00:28:52,240
so that you look it presents a unified

00:28:50,720 --> 00:28:52,640
view and you're looking kind of from the

00:28:52,240 --> 00:28:55,440
top

00:28:52,640 --> 00:28:57,440
down to find things so this is how we

00:28:55,440 --> 00:29:00,960
can find files that are in the lower

00:28:57,440 --> 00:29:03,279
layers here in the lower image

00:29:00,960 --> 00:29:05,039
when we go through and look at that then

00:29:03,279 --> 00:29:07,440
one of the questions that comes up

00:29:05,039 --> 00:29:09,679
is well okay great i can find these

00:29:07,440 --> 00:29:11,279
files i can look through the layers

00:29:09,679 --> 00:29:13,200
kind of look through there much like i'm

00:29:11,279 --> 00:29:16,000
looking through a path of things

00:29:13,200 --> 00:29:17,039
a path uh setting in there to find

00:29:16,000 --> 00:29:18,640
something

00:29:17,039 --> 00:29:20,480
and but what happens when i actually

00:29:18,640 --> 00:29:21,840
need to change it because we have said

00:29:20,480 --> 00:29:24,159
that the lower levels here

00:29:21,840 --> 00:29:25,760
layers of the image are read only they

00:29:24,159 --> 00:29:28,080
are not modifiable here

00:29:25,760 --> 00:29:29,120
so how do i do it if i change something

00:29:28,080 --> 00:29:31,919
well that's where we get

00:29:29,120 --> 00:29:32,559
uh this process called copy on right is

00:29:31,919 --> 00:29:34,320
used

00:29:32,559 --> 00:29:36,720
nerd cal if you want to think of it that

00:29:34,320 --> 00:29:40,720
way the idea with the copy on

00:29:36,720 --> 00:29:42,880
right is to be able to actually

00:29:40,720 --> 00:29:44,799
grab the file find the file locally and

00:29:42,880 --> 00:29:47,840
if i need to modify it

00:29:44,799 --> 00:29:48,559
i actually can copy it when i need to

00:29:47,840 --> 00:29:50,480
write to it

00:29:48,559 --> 00:29:52,000
up into the container layer and you

00:29:50,480 --> 00:29:52,960
think about this because the way it

00:29:52,000 --> 00:29:54,640
works is

00:29:52,960 --> 00:29:56,159
we know that we can do that sort of

00:29:54,640 --> 00:29:56,960
union file system allows us to look

00:29:56,159 --> 00:29:59,039
through

00:29:56,960 --> 00:30:00,240
so if i get a copy at the top level

00:29:59,039 --> 00:30:02,399
that's modified

00:30:00,240 --> 00:30:04,640
i see that copy first before i would see

00:30:02,399 --> 00:30:06,480
the the one that was down below

00:30:04,640 --> 00:30:08,080
so in this way with that copy on write

00:30:06,480 --> 00:30:08,799
at the time that i need to modify the

00:30:08,080 --> 00:30:10,960
file

00:30:08,799 --> 00:30:11,919
i can go down and it can grab a copy of

00:30:10,960 --> 00:30:14,159
the file

00:30:11,919 --> 00:30:15,760
copy it up to the top level layer where

00:30:14,159 --> 00:30:17,760
we can do read writes

00:30:15,760 --> 00:30:19,760
and modify it there and i still don't

00:30:17,760 --> 00:30:21,919
have to change the underlying

00:30:19,760 --> 00:30:23,120
layers so the union file system and they

00:30:21,919 --> 00:30:24,799
copy on write

00:30:23,120 --> 00:30:26,559
in conjunction with a couple of other

00:30:24,799 --> 00:30:27,520
container technologies or linux

00:30:26,559 --> 00:30:30,799
technologies

00:30:27,520 --> 00:30:32,640
uh name spaces and control groups allow

00:30:30,799 --> 00:30:35,279
us to really be able to

00:30:32,640 --> 00:30:36,320
implement this uh functionality around

00:30:35,279 --> 00:30:37,600
containers

00:30:36,320 --> 00:30:39,440
a couple of other points about

00:30:37,600 --> 00:30:40,399
containers

00:30:39,440 --> 00:30:42,240
the major difference between the

00:30:40,399 --> 00:30:42,960
containers we said is a top writable

00:30:42,240 --> 00:30:45,120
layer

00:30:42,960 --> 00:30:46,000
all rights are stored in that so that

00:30:45,120 --> 00:30:47,919
means this

00:30:46,000 --> 00:30:50,240
is a cool part that you can actually

00:30:47,919 --> 00:30:53,360
have multiple containers that

00:30:50,240 --> 00:30:54,720
use the same underlying image so

00:30:53,360 --> 00:30:57,039
when you're actually doing using the

00:30:54,720 --> 00:30:58,640
same underlying image there

00:30:57,039 --> 00:31:00,399
you can share it because the image

00:30:58,640 --> 00:31:03,279
layers are immutable right

00:31:00,399 --> 00:31:03,760
they are not changeable so if they're in

00:31:03,279 --> 00:31:06,640
if they're

00:31:03,760 --> 00:31:09,120
immutable then you can use that thin

00:31:06,640 --> 00:31:10,960
layer on top the containers up there

00:31:09,120 --> 00:31:12,240
to be able to point to that because you

00:31:10,960 --> 00:31:15,120
can have multiple

00:31:12,240 --> 00:31:15,679
layers or multiple of those read write

00:31:15,120 --> 00:31:18,880
layers

00:31:15,679 --> 00:31:19,840
which all point to the same set of read

00:31:18,880 --> 00:31:21,200
only layers

00:31:19,840 --> 00:31:23,120
which means you can get a lot of

00:31:21,200 --> 00:31:24,480
efficiency and a lot of reuse

00:31:23,120 --> 00:31:26,720
out of those layers that are stored

00:31:24,480 --> 00:31:28,080
already in there if you look at the

00:31:26,720 --> 00:31:29,919
bottom screenshot here it may be a

00:31:28,080 --> 00:31:30,799
little hard to read small print sorry

00:31:29,919 --> 00:31:32,720
about that

00:31:30,799 --> 00:31:34,320
but you can see i do a docker pull

00:31:32,720 --> 00:31:36,559
debian so docker pool

00:31:34,320 --> 00:31:37,519
means get stuff from a registry get us

00:31:36,559 --> 00:31:38,960
get the images

00:31:37,519 --> 00:31:40,640
get the layers like you saw in the

00:31:38,960 --> 00:31:42,320
animation where we had the uh

00:31:40,640 --> 00:31:44,720
i did the docker build command and it

00:31:42,320 --> 00:31:46,480
pulled stuff down same idea

00:31:44,720 --> 00:31:48,080
we get to pull the debian down we get a

00:31:46,480 --> 00:31:49,120
couple of layers there that's what those

00:31:48,080 --> 00:31:51,200
hexadecimal are

00:31:49,120 --> 00:31:52,720
different layers if i do then debbie and

00:31:51,200 --> 00:31:54,080
jesse are slightly very a slight

00:31:52,720 --> 00:31:56,159
variation of that

00:31:54,080 --> 00:31:58,080
of this operating system then it pulls

00:31:56,159 --> 00:32:00,880
down it says those already exist

00:31:58,080 --> 00:32:03,600
so if layers already exist out there

00:32:00,880 --> 00:32:06,399
then we can go ahead

00:32:03,600 --> 00:32:08,080
and pull them down uh i do see somebody

00:32:06,399 --> 00:32:11,360
says they're working on virtualbox

00:32:08,080 --> 00:32:14,640
6114 ova file crash

00:32:11,360 --> 00:32:15,279
uh is there a specific version not sure

00:32:14,640 --> 00:32:16,880
if

00:32:15,279 --> 00:32:19,279
colin or logan you've already answered

00:32:16,880 --> 00:32:21,279
that uh again look at that vb

00:32:19,279 --> 00:32:22,640
troubleshooting dock depending on the

00:32:21,279 --> 00:32:25,919
situation you may

00:32:22,640 --> 00:32:28,559
want to if it's like if it is a mac

00:32:25,919 --> 00:32:30,080
system then you can there's a weird

00:32:28,559 --> 00:32:32,080
thing sometimes we have to disable the

00:32:30,080 --> 00:32:33,600
audio or reduce the amount of memory

00:32:32,080 --> 00:32:35,279
and that will get it going sometimes but

00:32:33,600 --> 00:32:35,679
please check out that bb troubleshooting

00:32:35,279 --> 00:32:38,159
dock

00:32:35,679 --> 00:32:38,880
we posted the link back to that into the

00:32:38,159 --> 00:32:40,960
uh

00:32:38,880 --> 00:32:42,720
the chat previously that has some good

00:32:40,960 --> 00:32:44,559
pointers in it

00:32:42,720 --> 00:32:46,240
so multiple containers can share access

00:32:44,559 --> 00:32:47,760
to the same underlying image and yet

00:32:46,240 --> 00:32:49,760
have their own data because they have

00:32:47,760 --> 00:32:50,480
this separate their own rewrite layers

00:32:49,760 --> 00:32:52,080
up there

00:32:50,480 --> 00:32:54,000
but they can share that so nice

00:32:52,080 --> 00:32:56,559
efficiency there that we gain

00:32:54,000 --> 00:32:58,320
from that functionality you know it also

00:32:56,559 --> 00:32:59,279
implies that only layers that need to be

00:32:58,320 --> 00:33:01,440
changed that change

00:32:59,279 --> 00:33:03,279
need to be updated so if i'm using the

00:33:01,440 --> 00:33:04,559
same set of layers or most of the same

00:33:03,279 --> 00:33:05,200
set of layers i just need to change

00:33:04,559 --> 00:33:07,039
something

00:33:05,200 --> 00:33:08,640
i don't have to recreate all the layers

00:33:07,039 --> 00:33:09,600
i can pull them they're stored in the

00:33:08,640 --> 00:33:11,519
operating system

00:33:09,600 --> 00:33:13,519
and i can pull them up and just modify

00:33:11,519 --> 00:33:15,760
the ones that i actually want to change

00:33:13,519 --> 00:33:18,320
here

00:33:15,760 --> 00:33:20,480
simplifies things layers usually stored

00:33:18,320 --> 00:33:22,720
on disk usually in var live docker

00:33:20,480 --> 00:33:23,679
the area out there docker uses storage

00:33:22,720 --> 00:33:25,519
drivers

00:33:23,679 --> 00:33:27,120
to manage the contents of the image

00:33:25,519 --> 00:33:29,200
layers and the writable layer again if

00:33:27,120 --> 00:33:31,279
you're interested in more gory details

00:33:29,200 --> 00:33:33,200
check out the session this afternoon so

00:33:31,279 --> 00:33:34,399
docker what is it there's a pr sort of

00:33:33,200 --> 00:33:36,640
aspect here

00:33:34,399 --> 00:33:38,559
the s uh it's an open platform for

00:33:36,640 --> 00:33:39,840
distributed applications for developers

00:33:38,559 --> 00:33:42,480
and sys admins

00:33:39,840 --> 00:33:43,279
really what docker is about is it was

00:33:42,480 --> 00:33:46,720
the first

00:33:43,279 --> 00:33:49,760
one of of note the first way

00:33:46,720 --> 00:33:50,960
to really put wrappers to put interfaces

00:33:49,760 --> 00:33:53,600
to put a storage

00:33:50,960 --> 00:33:55,919
model a description around these

00:33:53,600 --> 00:33:58,000
existing container technologies

00:33:55,919 --> 00:33:59,760
so linux for a long time has had these

00:33:58,000 --> 00:34:00,880
container technologies this thing called

00:33:59,760 --> 00:34:03,440
lxc

00:34:00,880 --> 00:34:04,000
linux container technologies out there

00:34:03,440 --> 00:34:05,919
and

00:34:04,000 --> 00:34:07,279
again the union file system the name

00:34:05,919 --> 00:34:08,879
spaces the c groups

00:34:07,279 --> 00:34:10,240
these have been in linux for a long time

00:34:08,879 --> 00:34:11,200
but docker was the first one to really

00:34:10,240 --> 00:34:14,320
come along

00:34:11,200 --> 00:34:15,599
and uh in a in a profound way put around

00:34:14,320 --> 00:34:18,079
the things like a rest

00:34:15,599 --> 00:34:20,079
interface a way to invoke different

00:34:18,079 --> 00:34:22,639
functionalities and add commands

00:34:20,079 --> 00:34:24,159
like the build and the pool and kind of

00:34:22,639 --> 00:34:26,399
manage these functionalities

00:34:24,159 --> 00:34:27,520
into a way for people to usually work

00:34:26,399 --> 00:34:28,960
with containers

00:34:27,520 --> 00:34:30,960
provide description format for

00:34:28,960 --> 00:34:32,639
containers provide an api it's not the

00:34:30,960 --> 00:34:35,040
only one anymore but it was one that

00:34:32,639 --> 00:34:37,200
first really did this well

00:34:35,040 --> 00:34:38,399
uh containers from docker differ from a

00:34:37,200 --> 00:34:41,359
vm well vm

00:34:38,399 --> 00:34:43,599
is like what we have on our systems here

00:34:41,359 --> 00:34:46,960
that we're running

00:34:43,599 --> 00:34:48,320
the virtual box here so when we do that

00:34:46,960 --> 00:34:51,520
we're running the vm

00:34:48,320 --> 00:34:54,079
we're actually our uh on on a

00:34:51,520 --> 00:34:56,240
virtualbox then we have a hypervisor a

00:34:54,079 --> 00:34:59,119
hypervisor is the system

00:34:56,240 --> 00:35:00,400
that's actually going to go through and

00:34:59,119 --> 00:35:02,400
run and host

00:35:00,400 --> 00:35:03,760
our virtual machine so we have the

00:35:02,400 --> 00:35:06,480
virtual machine there

00:35:03,760 --> 00:35:08,079
that has the guest os in our case we

00:35:06,480 --> 00:35:11,680
have

00:35:08,079 --> 00:35:14,000
uh in our case we have

00:35:11,680 --> 00:35:16,000
uh a ubuntu it's a version called x

00:35:14,000 --> 00:35:17,599
ubuntu a smaller version of ubuntu

00:35:16,000 --> 00:35:19,440
that is the operating system that is

00:35:17,599 --> 00:35:21,119
hosting our applications and running in

00:35:19,440 --> 00:35:22,960
our virtual machine here

00:35:21,119 --> 00:35:25,119
docker uses linux container technologies

00:35:22,960 --> 00:35:27,680
to run processes in separate spaces

00:35:25,119 --> 00:35:29,440
in the os so docker is an application

00:35:27,680 --> 00:35:31,200
that installed on your system

00:35:29,440 --> 00:35:32,720
and then it takes care of partitioning

00:35:31,200 --> 00:35:34,400
out the parts or partitioning out the

00:35:32,720 --> 00:35:36,960
operating system resources

00:35:34,400 --> 00:35:37,599
to allow your applications to think or

00:35:36,960 --> 00:35:40,000
to

00:35:37,599 --> 00:35:40,640
seem as if to them as if they're running

00:35:40,000 --> 00:35:43,280
in their own

00:35:40,640 --> 00:35:45,599
isolated machine docker is partitioning

00:35:43,280 --> 00:35:47,520
out those resources and giving those all

00:35:45,599 --> 00:35:49,760
those those apps their own resources out

00:35:47,520 --> 00:35:51,119
there to use because it doesn't require

00:35:49,760 --> 00:35:52,240
the hypervisor the things like

00:35:51,119 --> 00:35:54,400
virtualbox

00:35:52,240 --> 00:35:55,680
or uh the guest os docker is going to be

00:35:54,400 --> 00:35:57,520
faster to start up

00:35:55,680 --> 00:35:58,720
more portable and could run across

00:35:57,520 --> 00:36:00,560
different

00:35:58,720 --> 00:36:01,920
unchanged environments so you see here

00:36:00,560 --> 00:36:02,880
on the screen a little bit of

00:36:01,920 --> 00:36:05,359
representation

00:36:02,880 --> 00:36:05,920
of how this kind of looks differently

00:36:05,359 --> 00:36:08,880
here

00:36:05,920 --> 00:36:10,160
docker is at carving out the resources

00:36:08,880 --> 00:36:12,079
virtual machines are dependent on

00:36:10,160 --> 00:36:12,400
another application to be able to host

00:36:12,079 --> 00:36:15,200
them

00:36:12,400 --> 00:36:17,280
on a system a dockerfile we saw examples

00:36:15,200 --> 00:36:17,920
of this earlier think of it as a plan or

00:36:17,280 --> 00:36:20,240
recipe

00:36:17,920 --> 00:36:21,760
a script a way to create or provision

00:36:20,240 --> 00:36:23,920
the systems out there

00:36:21,760 --> 00:36:25,280
so we could for example and the ones we

00:36:23,920 --> 00:36:26,880
have here

00:36:25,280 --> 00:36:28,240
yes we're using kind of old versions of

00:36:26,880 --> 00:36:29,599
software i've had this application

00:36:28,240 --> 00:36:31,599
around for a long time

00:36:29,599 --> 00:36:33,040
but from tomcat that means start with

00:36:31,599 --> 00:36:35,280
that as the base image

00:36:33,040 --> 00:36:37,040
be able to pull down tomcat for the web

00:36:35,280 --> 00:36:39,200
hosting the web serving there

00:36:37,040 --> 00:36:41,040
we can pass in then a file that we've

00:36:39,200 --> 00:36:41,920
created an application which is a war

00:36:41,040 --> 00:36:44,320
file

00:36:41,920 --> 00:36:45,680
and then we can run the actual command

00:36:44,320 --> 00:36:46,800
to run tomcat in there

00:36:45,680 --> 00:36:48,720
the one on the bottom is for our

00:36:46,800 --> 00:36:51,359
database piece or where our application

00:36:48,720 --> 00:36:53,520
here is a web app with a database

00:36:51,359 --> 00:36:55,520
back in so we'll start out with mysql

00:36:53,520 --> 00:36:57,280
and you saw this executing when you saw

00:36:55,520 --> 00:36:59,280
it running in that screen where i showed

00:36:57,280 --> 00:37:01,359
you the docker build command

00:36:59,280 --> 00:37:03,359
docker files have a specific format and

00:37:01,359 --> 00:37:05,359
a structure certain commands in there

00:37:03,359 --> 00:37:06,720
each instruction docker file can create

00:37:05,359 --> 00:37:08,880
a read-only layer

00:37:06,720 --> 00:37:09,920
uh not all of them do but some of them

00:37:08,880 --> 00:37:12,400
but they can if

00:37:09,920 --> 00:37:13,440
depending on the particular action that

00:37:12,400 --> 00:37:16,480
is happening

00:37:13,440 --> 00:37:18,000
in that instruction so from docker file

00:37:16,480 --> 00:37:20,400
starting with the docker file over here

00:37:18,000 --> 00:37:22,800
for example to build a node application

00:37:20,400 --> 00:37:23,839
we run the docker build command which

00:37:22,800 --> 00:37:25,680
then creates

00:37:23,839 --> 00:37:27,040
or goes through and executes the steps

00:37:25,680 --> 00:37:29,920
of the docker file

00:37:27,040 --> 00:37:31,359
bring things down copy in files uh do

00:37:29,920 --> 00:37:33,599
configuration

00:37:31,359 --> 00:37:35,599
run something again think of it almost

00:37:33,599 --> 00:37:37,920
like provisioning those uh

00:37:35,599 --> 00:37:39,200
a machine then we have the run command

00:37:37,920 --> 00:37:41,359
which takes that

00:37:39,200 --> 00:37:43,680
and actually creates a writable or makes

00:37:41,359 --> 00:37:45,920
a container out of it by putting on

00:37:43,680 --> 00:37:47,680
that top level read write layer and of

00:37:45,920 --> 00:37:49,760
course we have the history command

00:37:47,680 --> 00:37:52,240
we can look at the history of what went

00:37:49,760 --> 00:37:54,079
into it

00:37:52,240 --> 00:37:55,680
sets of docker commands we have sets of

00:37:54,079 --> 00:37:58,000
docker commands here

00:37:55,680 --> 00:37:59,599
for building for shipping for running

00:37:58,000 --> 00:38:02,960
out there

00:37:59,599 --> 00:38:04,000
we have a docker build at docker images

00:38:02,960 --> 00:38:06,640
to list the images

00:38:04,000 --> 00:38:07,680
rmi to remove an image docker pool to

00:38:06,640 --> 00:38:11,119
pull an existing

00:38:07,680 --> 00:38:13,040
image down log into a registry now

00:38:11,119 --> 00:38:14,160
so registries we'll talk more about this

00:38:13,040 --> 00:38:16,640
they can be uh

00:38:14,160 --> 00:38:18,400
secure insecure registries are

00:38:16,640 --> 00:38:21,119
repositories of images

00:38:18,400 --> 00:38:22,720
not of containers but of images so we

00:38:21,119 --> 00:38:24,880
are creating images

00:38:22,720 --> 00:38:26,400
the images form the basis for creating

00:38:24,880 --> 00:38:27,520
the containers they have all the

00:38:26,400 --> 00:38:29,440
software there

00:38:27,520 --> 00:38:31,359
and create the containers for that then

00:38:29,440 --> 00:38:32,560
the docker run actually allows us to

00:38:31,359 --> 00:38:34,160
create the container

00:38:32,560 --> 00:38:35,680
and you see some other commands here

00:38:34,160 --> 00:38:36,079
lots of commands we'll cover some of

00:38:35,680 --> 00:38:38,720
these

00:38:36,079 --> 00:38:40,079
as we go along quite a number of them

00:38:38,720 --> 00:38:41,839
actually as we go along through about

00:38:40,079 --> 00:38:44,400
the first three labs before we get into

00:38:41,839 --> 00:38:47,520
kubernetes

00:38:44,400 --> 00:38:48,160
let's talk about docker tags so docker

00:38:47,520 --> 00:38:51,200
tags

00:38:48,160 --> 00:38:53,599
are a way to put a user-friendly alias

00:38:51,200 --> 00:38:55,599
for the hex ids of generated images

00:38:53,599 --> 00:38:56,640
you may recall when we looked at things

00:38:55,599 --> 00:38:59,359
before

00:38:56,640 --> 00:39:01,359
that when we looked at things that were

00:38:59,359 --> 00:39:03,200
out there

00:39:01,359 --> 00:39:05,839
uh with them we saw that there were

00:39:03,200 --> 00:39:07,359
image ids hexadecimals those characters

00:39:05,839 --> 00:39:09,760
in the the one that had the multicolored

00:39:07,359 --> 00:39:12,320
images and you saw a hex id on there

00:39:09,760 --> 00:39:13,760
so that's an image id docker keeps track

00:39:12,320 --> 00:39:15,920
of image ids

00:39:13,760 --> 00:39:18,000
with the string of characters however

00:39:15,920 --> 00:39:18,800
that isn't very friendly from a user

00:39:18,000 --> 00:39:20,560
standpoint

00:39:18,800 --> 00:39:22,240
if you're trying to figure out what an

00:39:20,560 --> 00:39:24,160
image is here

00:39:22,240 --> 00:39:25,680
how do we deal with it so we have this

00:39:24,160 --> 00:39:27,599
thing of attack

00:39:25,680 --> 00:39:29,200
now a tag is a way of referring to an

00:39:27,599 --> 00:39:31,839
image and if you've ever used git

00:39:29,200 --> 00:39:34,000
kind of like how you can put human

00:39:31,839 --> 00:39:36,720
readable user-friendly tags on

00:39:34,000 --> 00:39:37,520
git commits two ways in general to

00:39:36,720 --> 00:39:39,920
create a tag

00:39:37,520 --> 00:39:42,079
via a docker build now in my opinion the

00:39:39,920 --> 00:39:42,800
word tag is overused a bit here with

00:39:42,079 --> 00:39:45,359
docker

00:39:42,800 --> 00:39:46,880
so we have the the tag we talk about it

00:39:45,359 --> 00:39:47,520
when we're talking about putting it on

00:39:46,880 --> 00:39:50,800
there

00:39:47,520 --> 00:39:51,520
as being the image name a name and then

00:39:50,800 --> 00:39:54,079
a tag

00:39:51,520 --> 00:39:54,960
portion the tag portion is generally

00:39:54,079 --> 00:39:57,359
generally

00:39:54,960 --> 00:39:59,040
for a revision or a version number

00:39:57,359 --> 00:39:59,680
you'll see in that little screenshot

00:39:59,040 --> 00:40:02,880
there

00:39:59,680 --> 00:40:03,280
uh v1s or one two zero and stuff we

00:40:02,880 --> 00:40:05,119
actually

00:40:03,280 --> 00:40:07,200
uh there's a process called semantic

00:40:05,119 --> 00:40:07,520
versioning which really ties in nicely

00:40:07,200 --> 00:40:09,680
to

00:40:07,520 --> 00:40:11,760
how you version things but really we're

00:40:09,680 --> 00:40:15,119
talking about using that tag

00:40:11,760 --> 00:40:18,640
portion of the larger sort of tag name

00:40:15,119 --> 00:40:21,680
there to indicate the revision typically

00:40:18,640 --> 00:40:23,119
so we say docker build dash t the t is a

00:40:21,680 --> 00:40:24,400
way to tag these

00:40:23,119 --> 00:40:27,040
what are we doing we're putting on a

00:40:24,400 --> 00:40:29,599
name here so i can tag docker build

00:40:27,040 --> 00:40:30,480
an image and i can give it a name of raw

00:40:29,599 --> 00:40:32,960
db

00:40:30,480 --> 00:40:34,240
in this case roar is our little

00:40:32,960 --> 00:40:35,680
application we're going to be working

00:40:34,240 --> 00:40:38,160
with throughout the day

00:40:35,680 --> 00:40:40,560
and the db is for the database part then

00:40:38,160 --> 00:40:43,839
version one

00:40:40,560 --> 00:40:46,079
when i do the docker tag here of image i

00:40:43,839 --> 00:40:47,839
can do a docker tag command itself

00:40:46,079 --> 00:40:50,319
which allows me to apply one of these

00:40:47,839 --> 00:40:53,920
tags to another existing image

00:40:50,319 --> 00:40:55,760
so i can have multiple tags if i need to

00:40:53,920 --> 00:40:58,240
to the same image think of them kind of

00:40:55,760 --> 00:41:00,560
like pointers they're pointing to that

00:40:58,240 --> 00:41:02,319
they're still at the lowest level in

00:41:00,560 --> 00:41:03,680
docker being referenced by their

00:41:02,319 --> 00:41:05,920
internal ids

00:41:03,680 --> 00:41:07,280
but the tag names in image names and

00:41:05,920 --> 00:41:08,400
stuff attacks give you a way to

00:41:07,280 --> 00:41:10,400
reference that

00:41:08,400 --> 00:41:12,640
that is more uh that is human readable

00:41:10,400 --> 00:41:15,599
more friendly easier to use there

00:41:12,640 --> 00:41:17,200
so i can tag existing images for example

00:41:15,599 --> 00:41:20,400
i could tag the hex

00:41:17,200 --> 00:41:22,960
id of an image with an actual

00:41:20,400 --> 00:41:24,880
user-friendly name or i could tag one

00:41:22,960 --> 00:41:28,800
that already has a different one

00:41:24,880 --> 00:41:30,480
with a different uh name there

00:41:28,800 --> 00:41:32,000
and with the for example prod or

00:41:30,480 --> 00:41:34,480
something on that way

00:41:32,000 --> 00:41:35,599
so tagging for private registries when i

00:41:34,480 --> 00:41:38,720
tag for private

00:41:35,599 --> 00:41:39,200
registries what do we mean by this all

00:41:38,720 --> 00:41:40,880
right

00:41:39,200 --> 00:41:42,720
and by the way i realized we were kind

00:41:40,880 --> 00:41:44,480
of going through things here fast but we

00:41:42,720 --> 00:41:45,200
will reinforce these things as we go

00:41:44,480 --> 00:41:46,480
along

00:41:45,200 --> 00:41:48,960
one of the things i wanted to mention

00:41:46,480 --> 00:41:49,599
about the workshop it is not intended

00:41:48,960 --> 00:41:50,960
that you

00:41:49,599 --> 00:41:52,319
grok everything you immediately

00:41:50,960 --> 00:41:53,440
understand everything we're going to

00:41:52,319 --> 00:41:55,599
cover today

00:41:53,440 --> 00:41:57,200
this will expose you to the concepts

00:41:55,599 --> 00:41:59,119
when you get into the labs that'll give

00:41:57,200 --> 00:42:01,040
you hands-on practice as well

00:41:59,119 --> 00:42:02,160
but don't feel like you have to

00:42:01,040 --> 00:42:05,119
immediately understand

00:42:02,160 --> 00:42:06,480
everything uh that's why we're going

00:42:05,119 --> 00:42:09,920
through this and we'll have again

00:42:06,480 --> 00:42:13,520
get to reinforce it as we go along here

00:42:09,920 --> 00:42:16,880
so as we're going along we're looking at

00:42:13,520 --> 00:42:18,720
uh we talk about registries a registry

00:42:16,880 --> 00:42:21,839
is a repository

00:42:18,720 --> 00:42:24,000
for docker images if you think about git

00:42:21,839 --> 00:42:25,920
if you've ever worked with git git is a

00:42:24,000 --> 00:42:27,599
repository for source code

00:42:25,920 --> 00:42:29,440
it's a way to put your source code in

00:42:27,599 --> 00:42:30,560
and track it and keep track of versions

00:42:29,440 --> 00:42:32,960
and so forth

00:42:30,560 --> 00:42:35,359
uh any similar way docker is a

00:42:32,960 --> 00:42:36,079
repository for the images your docker

00:42:35,359 --> 00:42:39,040
registry

00:42:36,079 --> 00:42:40,000
is a repository for the images that you

00:42:39,040 --> 00:42:42,880
create

00:42:40,000 --> 00:42:44,800
or someone else creates so when we work

00:42:42,880 --> 00:42:46,720
with docker by default

00:42:44,800 --> 00:42:48,000
it's going to try to go to what we call

00:42:46,720 --> 00:42:51,839
the docker hub

00:42:48,000 --> 00:42:54,000
the docker hub is the public repository

00:42:51,839 --> 00:42:56,720
it means that by default there's a

00:42:54,000 --> 00:43:00,079
public repository the hubdocker.com

00:42:56,720 --> 00:43:00,560
out there that is where images will be

00:43:00,079 --> 00:43:03,359
put

00:43:00,560 --> 00:43:05,440
and that's the default place the default

00:43:03,359 --> 00:43:08,079
registry to go and look for things

00:43:05,440 --> 00:43:08,720
when we work with a registry that is not

00:43:08,079 --> 00:43:11,440
the

00:43:08,720 --> 00:43:13,359
docker hub not the public one then we

00:43:11,440 --> 00:43:18,079
need to put an identifier

00:43:13,359 --> 00:43:20,800
into the image name so that it

00:43:18,079 --> 00:43:22,560
so that it actually goes through and

00:43:20,800 --> 00:43:24,000
identifies that it should go into a

00:43:22,560 --> 00:43:26,400
different registry

00:43:24,000 --> 00:43:28,079
we have to make the name of the image

00:43:26,400 --> 00:43:30,000
have the registry in it

00:43:28,079 --> 00:43:31,440
so that it can actually go into that

00:43:30,000 --> 00:43:33,119
different registry

00:43:31,440 --> 00:43:34,960
so that's what we mean by a private

00:43:33,119 --> 00:43:37,200
registry it might be a registry at your

00:43:34,960 --> 00:43:39,119
company for your company's docker images

00:43:37,200 --> 00:43:40,960
it might be the simplest one is one we

00:43:39,119 --> 00:43:44,000
have running on your image here the

00:43:40,960 --> 00:43:45,040
on the virtualbox image with a registry

00:43:44,000 --> 00:43:48,720
already in there

00:43:45,040 --> 00:43:51,440
so when we do that whoops wrong screen

00:43:48,720 --> 00:43:52,560
uh when we do that we are going to go

00:43:51,440 --> 00:43:55,839
ahead and

00:43:52,560 --> 00:43:58,160
tag it for a private repository that is

00:43:55,839 --> 00:43:58,800
run on a local on a private registry

00:43:58,160 --> 00:44:01,040
here

00:43:58,800 --> 00:44:02,000
so for example by default if you run a

00:44:01,040 --> 00:44:03,680
registry on

00:44:02,000 --> 00:44:05,520
uh on your own machine if you were to

00:44:03,680 --> 00:44:09,040
host a docker regional machine

00:44:05,520 --> 00:44:12,079
as we are for this class then we can

00:44:09,040 --> 00:44:14,480
tag it with the registry host info for

00:44:12,079 --> 00:44:17,359
example this gives docker tag

00:44:14,480 --> 00:44:19,200
the image tag the registry host the user

00:44:17,359 --> 00:44:21,680
name and so on out there

00:44:19,200 --> 00:44:23,920
basically what this looks like instead

00:44:21,680 --> 00:44:25,920
of just tagging it like with raw dv

00:44:23,920 --> 00:44:29,200
and then a version number we put

00:44:25,920 --> 00:44:31,440
localhost colon 5000 in front of that

00:44:29,200 --> 00:44:33,599
that then will tell docker when we do

00:44:31,440 --> 00:44:34,960
the push or the pool commands oh

00:44:33,599 --> 00:44:37,680
i'm supposed to go to work with the

00:44:34,960 --> 00:44:39,280
registry that's on localhost 5000.

00:44:37,680 --> 00:44:41,280
seems a little odd but that's the way

00:44:39,280 --> 00:44:44,160
that it's done we put the registry

00:44:41,280 --> 00:44:44,640
in the name there now one other point

00:44:44,160 --> 00:44:47,440
about

00:44:44,640 --> 00:44:48,480
tags there is a tag in docker called

00:44:47,440 --> 00:44:51,680
latest

00:44:48,480 --> 00:44:54,480
latest is dangerous just to be uh

00:44:51,680 --> 00:44:55,280
upfront about this the reason because of

00:44:54,480 --> 00:44:58,319
that

00:44:55,280 --> 00:45:01,680
is that latest makes you think

00:44:58,319 --> 00:45:03,760
of always having the latest

00:45:01,680 --> 00:45:05,520
image out there the latest version of

00:45:03,760 --> 00:45:07,040
something that i'm going to get if i get

00:45:05,520 --> 00:45:09,520
latest i'm going to get the

00:45:07,040 --> 00:45:10,400
most recent the most recently updated

00:45:09,520 --> 00:45:12,480
one

00:45:10,400 --> 00:45:14,319
that's not necessarily the case and the

00:45:12,480 --> 00:45:16,800
reason is because

00:45:14,319 --> 00:45:18,640
latest doesn't really imply that it

00:45:16,800 --> 00:45:20,720
docker is always going to keep track of

00:45:18,640 --> 00:45:24,319
the most recent one for you

00:45:20,720 --> 00:45:26,240
what latest is is it's a default to that

00:45:24,319 --> 00:45:27,599
revision number to that version number

00:45:26,240 --> 00:45:31,040
part of the tag

00:45:27,599 --> 00:45:32,000
it simply means if i don't put a v1 or

00:45:31,040 --> 00:45:34,079
a120 or

00:45:32,000 --> 00:45:35,040
something after that colon when i'm

00:45:34,079 --> 00:45:36,880
tagging it

00:45:35,040 --> 00:45:38,560
it's going to default to putting it to

00:45:36,880 --> 00:45:40,800
marking it as latest

00:45:38,560 --> 00:45:42,319
which at that particular moment when you

00:45:40,800 --> 00:45:44,240
run the operation

00:45:42,319 --> 00:45:46,000
it will be the most recent it will be

00:45:44,240 --> 00:45:48,720
the latest but the problem

00:45:46,000 --> 00:45:51,200
comes in because after that if i make

00:45:48,720 --> 00:45:51,200
updates

00:45:51,359 --> 00:45:55,760
then it is no longer the latest but it

00:45:53,680 --> 00:45:59,280
still has that latest tag attached to it

00:45:55,760 --> 00:46:01,280
so if i am today at 11 o'clock making an

00:45:59,280 --> 00:46:02,560
image and tagging it out there and i

00:46:01,280 --> 00:46:04,480
don't supply

00:46:02,560 --> 00:46:06,480
that tag portion that portion after the

00:46:04,480 --> 00:46:07,760
colon it's going to automatically put

00:46:06,480 --> 00:46:10,480
latest on there

00:46:07,760 --> 00:46:11,520
if i then at one o'clock today go and

00:46:10,480 --> 00:46:14,880
make an update and

00:46:11,520 --> 00:46:15,680
say this is version 1.2.0 then the

00:46:14,880 --> 00:46:18,000
latest one

00:46:15,680 --> 00:46:19,440
is going to be the previous one the one

00:46:18,000 --> 00:46:22,000
i did back at

00:46:19,440 --> 00:46:23,599
at 11 o'clock today so you see the

00:46:22,000 --> 00:46:24,960
latest kind of gets to get stuck with it

00:46:23,599 --> 00:46:25,760
so as soon as you make a more recent

00:46:24,960 --> 00:46:28,079
update

00:46:25,760 --> 00:46:30,560
latest is out of date so the best

00:46:28,079 --> 00:46:32,880
practice here is just really to avoid

00:46:30,560 --> 00:46:34,319
using latest and just use meaningful

00:46:32,880 --> 00:46:35,839
tags instead

00:46:34,319 --> 00:46:37,359
so how do we think about all this we've

00:46:35,839 --> 00:46:38,720
talked about a number of things with

00:46:37,359 --> 00:46:40,640
containers here

00:46:38,720 --> 00:46:42,560
and i've used this analogy already quite

00:46:40,640 --> 00:46:43,280
a bit but we'll just kind of formalize

00:46:42,560 --> 00:46:44,880
it here

00:46:43,280 --> 00:46:46,720
one way that i think helps people to

00:46:44,880 --> 00:46:49,280
think about this is to consider the

00:46:46,720 --> 00:46:51,359
analogy installing software on a machine

00:46:49,280 --> 00:46:52,720
and then provisioning users for it for

00:46:51,359 --> 00:46:54,319
example if i am

00:46:52,720 --> 00:46:56,400
installing a new computer installing

00:46:54,319 --> 00:46:57,599
software for it maybe again it's for a

00:46:56,400 --> 00:47:00,640
relative

00:46:57,599 --> 00:47:01,839
or for a friend or for work whatever the

00:47:00,640 --> 00:47:03,680
case may be

00:47:01,839 --> 00:47:05,680
typically i'm going to start layering

00:47:03,680 --> 00:47:07,839
software on there right i'm going to put

00:47:05,680 --> 00:47:10,880
on the base operating system

00:47:07,839 --> 00:47:12,560
i'm going to put in maybe some office

00:47:10,880 --> 00:47:13,280
applications some other pieces that i

00:47:12,560 --> 00:47:15,839
need

00:47:13,280 --> 00:47:17,520
maybe anti-virus those kinds of things

00:47:15,839 --> 00:47:19,440
but i'm building up these layers of

00:47:17,520 --> 00:47:20,400
software i'm layering on the software as

00:47:19,440 --> 00:47:22,079
i go along

00:47:20,400 --> 00:47:23,760
now it's not the same thing as the union

00:47:22,079 --> 00:47:24,000
file system but again you think about it

00:47:23,760 --> 00:47:26,240
from

00:47:24,000 --> 00:47:28,160
a path standpoint kind of an analogy

00:47:26,240 --> 00:47:30,559
there but i'm going through a process

00:47:28,160 --> 00:47:31,760
of adding more and more software into

00:47:30,559 --> 00:47:34,800
the system here

00:47:31,760 --> 00:47:37,119
at some point that then can become if i

00:47:34,800 --> 00:47:38,960
had multiple computers to provision

00:47:37,119 --> 00:47:40,800
that becomes a set of software that i

00:47:38,960 --> 00:47:42,720
could then use to provision

00:47:40,800 --> 00:47:44,880
another machine i could use it to

00:47:42,720 --> 00:47:46,800
provision this machine set the image on

00:47:44,880 --> 00:47:48,960
there say grab all the software

00:47:46,800 --> 00:47:51,119
that i've stored off in this disk image

00:47:48,960 --> 00:47:53,839
out here

00:47:51,119 --> 00:47:55,760
and then if i wanted to set up space for

00:47:53,839 --> 00:47:56,960
a person to work here

00:47:55,760 --> 00:47:58,640
usually you're going to be creating a

00:47:56,960 --> 00:47:59,119
profile you're going to have a user

00:47:58,640 --> 00:48:01,520
space

00:47:59,119 --> 00:48:02,960
area there um in the same way if i'm

00:48:01,520 --> 00:48:04,559
setting up another machine i can use

00:48:02,960 --> 00:48:07,119
that same image

00:48:04,559 --> 00:48:09,040
with the software i can create another

00:48:07,119 --> 00:48:10,880
user profile on that machine

00:48:09,040 --> 00:48:12,480
and spin it up so in one way you can

00:48:10,880 --> 00:48:14,880
think of this provisioned set of

00:48:12,480 --> 00:48:16,720
software with all the configuration

00:48:14,880 --> 00:48:19,040
all of the pieces that i need out there

00:48:16,720 --> 00:48:20,720
in the image as like a docker image a

00:48:19,040 --> 00:48:21,359
docker image has everything already

00:48:20,720 --> 00:48:24,400
provisioned

00:48:21,359 --> 00:48:24,880
installed if you will into that then

00:48:24,400 --> 00:48:26,640
when i'm

00:48:24,880 --> 00:48:28,480
thinking about containers you might

00:48:26,640 --> 00:48:29,920
think about a container as being similar

00:48:28,480 --> 00:48:32,800
to actually

00:48:29,920 --> 00:48:34,240
defining a user area a user profile area

00:48:32,800 --> 00:48:36,000
for a person to work with

00:48:34,240 --> 00:48:37,680
so they have a place to read and write

00:48:36,000 --> 00:48:39,520
in there they can still

00:48:37,680 --> 00:48:41,200
even if we have two different users even

00:48:39,520 --> 00:48:42,800
we have used from different machines

00:48:41,200 --> 00:48:44,800
they can still utilize the same

00:48:42,800 --> 00:48:46,720
underlying image that we started with

00:48:44,800 --> 00:48:48,160
right the same set of software

00:48:46,720 --> 00:48:50,400
but they're working in their own user

00:48:48,160 --> 00:48:53,040
space kind of the same way we could have

00:48:50,400 --> 00:48:54,720
multiple containers working against

00:48:53,040 --> 00:48:56,960
existing images there

00:48:54,720 --> 00:48:59,280
so that gives you kind of a way to

00:48:56,960 --> 00:49:01,440
perhaps think about this

00:48:59,280 --> 00:49:02,400
now one of the other things is to

00:49:01,440 --> 00:49:03,440
mention that

00:49:02,400 --> 00:49:05,839
if you think about it from the

00:49:03,440 --> 00:49:06,960
standpoint of even if the computer's

00:49:05,839 --> 00:49:08,800
turned off

00:49:06,960 --> 00:49:10,559
the image is still there the software is

00:49:08,800 --> 00:49:12,319
still there right so even if you have

00:49:10,559 --> 00:49:14,160
the image stored out somewhere

00:49:12,319 --> 00:49:15,680
once you turn it on fire it back up have

00:49:14,160 --> 00:49:17,200
the user place it kind of like spinning

00:49:15,680 --> 00:49:19,200
up a container from an image

00:49:17,200 --> 00:49:21,119
the image is still there regardless even

00:49:19,200 --> 00:49:23,280
if it's not actually being used

00:49:21,119 --> 00:49:24,400
so if this again if this analogy is

00:49:23,280 --> 00:49:26,720
useful to you

00:49:24,400 --> 00:49:28,559
feel free to adopt it if not perhaps you

00:49:26,720 --> 00:49:28,960
can come up with your own analogy but

00:49:28,559 --> 00:49:30,880
this

00:49:28,960 --> 00:49:32,720
way kind of helped me and it may help

00:49:30,880 --> 00:49:34,319
you to kind of think about it

00:49:32,720 --> 00:49:36,400
docker commands docker build we've

00:49:34,319 --> 00:49:37,040
talked about docker images to be able to

00:49:36,400 --> 00:49:38,880
see it

00:49:37,040 --> 00:49:41,440
and that's going to bring us up to lab

00:49:38,880 --> 00:49:44,720
one here so what i want to do

00:49:41,440 --> 00:49:47,760
is uh stop sharing my slide for a minute

00:49:44,720 --> 00:49:48,640
whoops and i'm going to go back and

00:49:47,760 --> 00:49:52,480
let's go back

00:49:48,640 --> 00:49:54,640
and let's actually share let me share

00:49:52,480 --> 00:49:56,400
the labs here now this will be in that

00:49:54,640 --> 00:50:01,119
lab stock again this is out

00:49:56,400 --> 00:50:01,119
on the github space let me share this

00:50:02,079 --> 00:50:05,920
uh sorry one moment

00:50:07,040 --> 00:50:11,119
okay hopefully you can see the image the

00:50:09,760 --> 00:50:14,160
lab dock there

00:50:11,119 --> 00:50:15,920
so again this is up on

00:50:14,160 --> 00:50:18,880
github.com if you look at the line at

00:50:15,920 --> 00:50:22,240
the top here and it is on brent laster

00:50:18,880 --> 00:50:24,800
my first and last names together then

00:50:22,240 --> 00:50:26,559
you can look in there under conf conf

00:50:24,800 --> 00:50:29,119
this is a pathway look under conf you'll

00:50:26,559 --> 00:50:33,920
find an ato 2020 directory

00:50:29,119 --> 00:50:35,839
for all things open 2020 cws-labs.pdf

00:50:33,920 --> 00:50:37,440
uh those links again were posted in the

00:50:35,839 --> 00:50:38,720
chat earlier

00:50:37,440 --> 00:50:40,800
there and i'll post them again in a

00:50:38,720 --> 00:50:42,160
minute or maybe colin can post it there

00:50:40,800 --> 00:50:46,000
as well

00:50:42,160 --> 00:50:49,440
so when we do this the

00:50:46,000 --> 00:50:51,920
the labs here

00:50:49,440 --> 00:50:54,079
you can download them if you want to to

00:50:51,920 --> 00:50:56,400
have a pdf version to look at that may

00:50:54,079 --> 00:50:57,920
be easier for you to copy and paste from

00:50:56,400 --> 00:51:00,319
but again this assumes that you've done

00:50:57,920 --> 00:51:01,920
the prerequisites of having a virtual

00:51:00,319 --> 00:51:03,359
box up and running and you've got the

00:51:01,920 --> 00:51:05,359
system up and running there

00:51:03,359 --> 00:51:06,480
in lab number one we're going to build

00:51:05,359 --> 00:51:08,319
docker images

00:51:06,480 --> 00:51:09,920
so the point of this lab is to see how

00:51:08,319 --> 00:51:11,280
to build docker images from docker files

00:51:09,920 --> 00:51:12,000
get you some hands-on experience with

00:51:11,280 --> 00:51:14,160
this

00:51:12,000 --> 00:51:16,000
so open a terminal session by a terminal

00:51:14,160 --> 00:51:16,640
session we mean like a command prompt

00:51:16,000 --> 00:51:18,800
there

00:51:16,640 --> 00:51:20,720
and on the labs in labs i will try to

00:51:18,800 --> 00:51:21,760
show you screenshots of how things look

00:51:20,720 --> 00:51:23,920
if i think something

00:51:21,760 --> 00:51:26,400
may have trouble with it but up in the

00:51:23,920 --> 00:51:28,400
upper left corner of your

00:51:26,400 --> 00:51:30,400
desktop in your virtual machine you'll

00:51:28,400 --> 00:51:32,800
have a little mouse head icon

00:51:30,400 --> 00:51:34,400
you click on the mouse head and drop

00:51:32,800 --> 00:51:36,079
down there's a terminal emulator there's

00:51:34,400 --> 00:51:37,280
also a web browser you'll be you can

00:51:36,079 --> 00:51:38,800
bring up a web browser

00:51:37,280 --> 00:51:41,119
a little terminal emulator i also have

00:51:38,800 --> 00:51:42,720
some shortcuts on the desktop there

00:51:41,119 --> 00:51:44,880
uh for at least one i think a terminal

00:51:42,720 --> 00:51:46,880
emulator command prompt in there just a

00:51:44,880 --> 00:51:48,480
place where you can type commands in

00:51:46,880 --> 00:51:51,680
so you can open up one from there we'll

00:51:48,480 --> 00:51:53,880
go in and then in that terminal emulator

00:51:51,680 --> 00:51:55,359
we'll go into this directory step two

00:51:53,880 --> 00:51:59,119
atows

00:51:55,359 --> 00:52:01,920
so the structure here is ato dash ws

00:51:59,119 --> 00:52:02,960
is a high level directory for our

00:52:01,920 --> 00:52:05,119
workshop

00:52:02,960 --> 00:52:06,640
inside of there i have subdirectories

00:52:05,119 --> 00:52:08,079
for the different parts

00:52:06,640 --> 00:52:11,119
the roar again is just the name of our

00:52:08,079 --> 00:52:12,559
application doc roar docker is a docker

00:52:11,119 --> 00:52:14,640
section so we're going to go into that

00:52:12,559 --> 00:52:16,400
particular subdirectory

00:52:14,640 --> 00:52:19,040
we're going to take a quick look at some

00:52:16,400 --> 00:52:19,440
docker files now by default the docker

00:52:19,040 --> 00:52:21,520
files

00:52:19,440 --> 00:52:23,599
docker will look for one named docker

00:52:21,520 --> 00:52:25,680
file literal word docker file

00:52:23,599 --> 00:52:27,680
because we have different images out

00:52:25,680 --> 00:52:28,319
here we have a database piece and a web

00:52:27,680 --> 00:52:30,000
piece

00:52:28,319 --> 00:52:32,160
we have two different docker files you

00:52:30,000 --> 00:52:34,240
can look at them just with cat command

00:52:32,160 --> 00:52:35,839
and then do the docker build now i want

00:52:34,240 --> 00:52:38,000
to emphasize something here in steps

00:52:35,839 --> 00:52:39,839
five and six it's very important

00:52:38,000 --> 00:52:41,119
what we're doing here is we are taking

00:52:39,839 --> 00:52:43,680
and building we're

00:52:41,119 --> 00:52:45,280
using docker build to create an image

00:52:43,680 --> 00:52:47,119
from the docker files doing that set of

00:52:45,280 --> 00:52:48,880
instructions executing them out there

00:52:47,119 --> 00:52:51,280
when you do this please please please

00:52:48,880 --> 00:52:52,079
make sure that you are paying attention

00:52:51,280 --> 00:52:55,200
to

00:52:52,079 --> 00:52:56,400
using the db image docker file to create

00:52:55,200 --> 00:52:59,440
the db

00:52:56,400 --> 00:53:00,160
image and likewise in step 6 six you're

00:52:59,440 --> 00:53:03,520
using the

00:53:00,160 --> 00:53:06,559
web image docker file to create the

00:53:03,520 --> 00:53:08,480
web image here if you get these mixed up

00:53:06,559 --> 00:53:09,760
it'll be very confusing later on because

00:53:08,480 --> 00:53:11,760
you'll be trying to

00:53:09,760 --> 00:53:13,200
reference something in a database image

00:53:11,760 --> 00:53:16,240
or container that looks like

00:53:13,200 --> 00:53:17,920
a web app or vice versa so make sure

00:53:16,240 --> 00:53:19,520
that you follow that you follow these

00:53:17,920 --> 00:53:21,440
now again you should be able

00:53:19,520 --> 00:53:22,720
i think to copy and paste these if you

00:53:21,440 --> 00:53:25,760
want to

00:53:22,720 --> 00:53:28,079
step 6 kind of spans multiple lines

00:53:25,760 --> 00:53:29,760
if you do that if you do copy and paste

00:53:28,079 --> 00:53:31,040
make sure the spaces show up where

00:53:29,760 --> 00:53:33,680
they're expected

00:53:31,040 --> 00:53:35,760
the dot on the end is important as well

00:53:33,680 --> 00:53:37,359
dot is a context think of that as where

00:53:35,760 --> 00:53:39,520
to get the files from

00:53:37,359 --> 00:53:41,839
uh it's the context it is important to

00:53:39,520 --> 00:53:43,839
have that so in steps five and six we're

00:53:41,839 --> 00:53:45,200
building our respective database images

00:53:43,839 --> 00:53:46,880
and web images again

00:53:45,200 --> 00:53:49,599
take care to make sure you're using the

00:53:46,880 --> 00:53:51,359
database uh docker file

00:53:49,599 --> 00:53:52,880
and creating a database image if you

00:53:51,359 --> 00:53:54,079
just repeat the command you'll need to

00:53:52,880 --> 00:53:55,599
make sure you change it

00:53:54,079 --> 00:53:57,440
to have the web and add the build

00:53:55,599 --> 00:54:00,079
argument stuff in here the build

00:53:57,440 --> 00:54:01,680
argument step six is simply pulling in

00:54:00,079 --> 00:54:03,680
the application we've already built for

00:54:01,680 --> 00:54:04,720
you out there then in step seven we're

00:54:03,680 --> 00:54:06,720
going to tag

00:54:04,720 --> 00:54:08,720
again make sure this is another key

00:54:06,720 --> 00:54:12,000
place make sure you're tagging

00:54:08,720 --> 00:54:14,319
the web image with the new web tag and

00:54:12,000 --> 00:54:16,319
the database image with the database tag

00:54:14,319 --> 00:54:18,079
to simplify things later on and then

00:54:16,319 --> 00:54:19,839
finally we'll look at docker images and

00:54:18,079 --> 00:54:20,400
do a grip just to see your images out

00:54:19,839 --> 00:54:22,480
there

00:54:20,400 --> 00:54:24,800
all right so let's take about a 15

00:54:22,480 --> 00:54:26,319
minute break at this point

00:54:24,800 --> 00:54:28,079
i'm pretty close to the top of the hour

00:54:26,319 --> 00:54:29,119
here uh during my time and give you a

00:54:28,079 --> 00:54:30,240
little bit of break for this

00:54:29,119 --> 00:54:31,440
i don't think this will take you too

00:54:30,240 --> 00:54:33,920
long but maybe it'll give you a few

00:54:31,440 --> 00:54:35,359
extra minutes for a quick bio break in

00:54:33,920 --> 00:54:37,040
there or such as well but let's take

00:54:35,359 --> 00:54:39,440
about 15 minutes

00:54:37,040 --> 00:54:41,760
and work on lab number one just lab

00:54:39,440 --> 00:54:43,680
number one you can stop after that one

00:54:41,760 --> 00:54:46,400
and uh while this is going on i'll

00:54:43,680 --> 00:54:48,480
probably be uh mostly silent here

00:54:46,400 --> 00:54:49,680
just kind of monitoring things uh if you

00:54:48,480 --> 00:54:51,760
don't hear me that's okay

00:54:49,680 --> 00:54:54,720
this is giving you time to focus on the

00:54:51,760 --> 00:54:57,520
lab and we'll come back in 15 minutes

00:54:54,720 --> 00:54:58,000
i'll bring us back in and answer any

00:54:57,520 --> 00:55:00,480
other

00:54:58,000 --> 00:55:01,599
any questions that we have go through

00:55:00,480 --> 00:55:03,359
there okay

00:55:01,599 --> 00:55:05,440
so take 15 minutes work on lab number

00:55:03,359 --> 00:55:08,240
one and i'll talk to you then

00:55:05,440 --> 00:55:09,599
hey everyone we're back so uh thanks

00:55:08,240 --> 00:55:10,559
again to the guys at chromeware for

00:55:09,599 --> 00:55:12,319
helping to

00:55:10,559 --> 00:55:14,480
answer all these questions and deal with

00:55:12,319 --> 00:55:15,040
the issues some things people running

00:55:14,480 --> 00:55:17,680
into

00:55:15,040 --> 00:55:18,960
um these kinds of things yeah that can

00:55:17,680 --> 00:55:20,720
be challenging to

00:55:18,960 --> 00:55:22,960
deal with if your system isn't

00:55:20,720 --> 00:55:24,640
responding the way you think it is

00:55:22,960 --> 00:55:26,559
some of the things on here typical sorts

00:55:24,640 --> 00:55:28,960
of things you may need to enable

00:55:26,559 --> 00:55:30,559
the virtualization the bios if you're

00:55:28,960 --> 00:55:32,160
running behind a corporate network or

00:55:30,559 --> 00:55:35,280
something that can sometimes cause

00:55:32,160 --> 00:55:38,240
issues with different things uh sorry

00:55:35,280 --> 00:55:40,160
it's challenging when we have so many

00:55:38,240 --> 00:55:42,079
participants and we're trying to

00:55:40,160 --> 00:55:43,599
uh make sure everything is working for

00:55:42,079 --> 00:55:44,799
everybody i wish there was something we

00:55:43,599 --> 00:55:46,480
could always guarantee is going to work

00:55:44,799 --> 00:55:47,520
for everyone that's not the case

00:55:46,480 --> 00:55:48,960
so please again check the

00:55:47,520 --> 00:55:49,520
troubleshooting document i know some of

00:55:48,960 --> 00:55:52,720
you have

00:55:49,520 --> 00:55:55,119
and uh colin and it will be helping

00:55:52,720 --> 00:55:56,880
trying to help others with that as well

00:55:55,119 --> 00:55:58,319
um

00:55:56,880 --> 00:56:00,000
also if you have another machine

00:55:58,319 --> 00:56:01,280
sometimes or something that isn't behind

00:56:00,000 --> 00:56:02,079
a corporate network or something you can

00:56:01,280 --> 00:56:05,280
do

00:56:02,079 --> 00:56:06,960
that can work as well but hopefully

00:56:05,280 --> 00:56:08,640
we'll be able to help get it figured out

00:56:06,960 --> 00:56:10,319
here so you can do the labs

00:56:08,640 --> 00:56:12,720
i did see one question to come in that

00:56:10,319 --> 00:56:16,240
wasn't related to

00:56:12,720 --> 00:56:18,400
um wasn't related to sort of

00:56:16,240 --> 00:56:20,160
issues with machines why is a

00:56:18,400 --> 00:56:20,880
presentation workshop based on using

00:56:20,160 --> 00:56:22,480
docker

00:56:20,880 --> 00:56:24,799
why not do everything with the open

00:56:22,480 --> 00:56:25,200
source tool pod man redman's podman can

00:56:24,799 --> 00:56:26,480
run

00:56:25,200 --> 00:56:28,640
rootless without having a demon

00:56:26,480 --> 00:56:29,200
installed at all uh certainly there

00:56:28,640 --> 00:56:30,559
there so

00:56:29,200 --> 00:56:31,680
podman for those of you who are not

00:56:30,559 --> 00:56:33,359
familiar i'll mention this a little bit

00:56:31,680 --> 00:56:36,400
later on the presentation

00:56:33,359 --> 00:56:38,960
is another option to docker docker

00:56:36,400 --> 00:56:40,319
used to be pretty much the only player

00:56:38,960 --> 00:56:41,920
in this space there were a couple of

00:56:40,319 --> 00:56:44,960
others rocket and such there

00:56:41,920 --> 00:56:46,319
but uh the pod ones build up

00:56:44,960 --> 00:56:48,160
odd man different ones have come out

00:56:46,319 --> 00:56:49,280
recently that can do the same kinds of

00:56:48,160 --> 00:56:50,640
things as docker

00:56:49,280 --> 00:56:52,240
uh the reason we're not using something

00:56:50,640 --> 00:56:52,720
like that is honestly because most

00:56:52,240 --> 00:56:53,839
people

00:56:52,720 --> 00:56:55,839
have heard of docker they're more

00:56:53,839 --> 00:56:57,599
familiar with docker and from a

00:56:55,839 --> 00:56:59,760
starting point when you're first

00:56:57,599 --> 00:57:02,480
learning about it i think it's more it's

00:56:59,760 --> 00:57:04,880
it's easier to use something which is

00:57:02,480 --> 00:57:06,559
more familiar to the majority of people

00:57:04,880 --> 00:57:08,160
and understanding it because most people

00:57:06,559 --> 00:57:09,760
have heard of docker are using it so

00:57:08,160 --> 00:57:12,160
that's kind of the

00:57:09,760 --> 00:57:13,359
it's the more general tool uh the one

00:57:12,160 --> 00:57:13,680
that's been around for a while so

00:57:13,359 --> 00:57:16,559
there's

00:57:13,680 --> 00:57:17,359
likely to be more um if you learn about

00:57:16,559 --> 00:57:20,720
it

00:57:17,359 --> 00:57:21,920
more people more um experienced people

00:57:20,720 --> 00:57:23,920
will have had with it

00:57:21,920 --> 00:57:25,200
and more of a of a regular context

00:57:23,920 --> 00:57:28,160
people will know what it is and

00:57:25,200 --> 00:57:29,119
and know what it's about so that's the

00:57:28,160 --> 00:57:31,359
answer to

00:57:29,119 --> 00:57:33,119
that one uh i think the rest of them are

00:57:31,359 --> 00:57:33,520
all around maybe getting the sessions or

00:57:33,119 --> 00:57:35,760
getting

00:57:33,520 --> 00:57:37,920
system issues worked out with machines

00:57:35,760 --> 00:57:39,920
so hopefully

00:57:37,920 --> 00:57:41,599
again those will be worked out through

00:57:39,920 --> 00:57:42,400
some of the troubleshooting efforts

00:57:41,599 --> 00:57:43,520
going on

00:57:42,400 --> 00:57:45,280
i'm going to jump back into our

00:57:43,520 --> 00:57:47,599
presentation let me share my screen

00:57:45,280 --> 00:57:47,599
again

00:57:47,760 --> 00:57:51,760
so we've talked about what containers

00:57:50,240 --> 00:57:53,680
are and how we work with containers and

00:57:51,760 --> 00:57:56,160
hopefully have a better idea now of what

00:57:53,680 --> 00:57:57,119
how they're made up and how they are put

00:57:56,160 --> 00:57:58,799
together

00:57:57,119 --> 00:58:01,119
um so the question comes up how do we

00:57:58,799 --> 00:58:03,359
work with multiple containers and really

00:58:01,119 --> 00:58:05,119
if you think about it not many options

00:58:03,359 --> 00:58:05,440
not many you can probably imagine that

00:58:05,119 --> 00:58:07,839
not

00:58:05,440 --> 00:58:09,440
many applications these days would be

00:58:07,839 --> 00:58:11,200
single container

00:58:09,440 --> 00:58:12,640
applications for an entire product now

00:58:11,200 --> 00:58:13,920
you might have what's uh considered a

00:58:12,640 --> 00:58:16,319
micro service

00:58:13,920 --> 00:58:18,720
one little part of an application or of

00:58:16,319 --> 00:58:20,880
a product that is in its own container

00:58:18,720 --> 00:58:23,440
but most applications these days are

00:58:20,880 --> 00:58:25,760
going to be many containers out there

00:58:23,440 --> 00:58:26,960
uh even can be up into the hundreds

00:58:25,760 --> 00:58:28,960
that's kind of a

00:58:26,960 --> 00:58:30,799
rare but it can be huge depending on how

00:58:28,960 --> 00:58:32,240
many micro services you have how many

00:58:30,799 --> 00:58:33,680
parts your application

00:58:32,240 --> 00:58:36,400
you know you might even you might have a

00:58:33,680 --> 00:58:38,319
front end a back end a database

00:58:36,400 --> 00:58:39,440
a user interface piece whatever the case

00:58:38,319 --> 00:58:41,440
may be you're

00:58:39,440 --> 00:58:43,359
typically not going to have just a

00:58:41,440 --> 00:58:46,480
single container

00:58:43,359 --> 00:58:47,440
or running so we need to think about how

00:58:46,480 --> 00:58:49,599
do we work with

00:58:47,440 --> 00:58:51,520
multiple containers how do we get how do

00:58:49,599 --> 00:58:54,240
we make things work together

00:58:51,520 --> 00:58:56,480
well the sort of typical way that's been

00:58:54,240 --> 00:58:59,680
used in the past as far as docker

00:58:56,480 --> 00:59:02,000
is the docker compose tool docker dash

00:58:59,680 --> 00:59:03,920
compose

00:59:02,000 --> 00:59:06,000
essentially it uses a yaml file

00:59:03,920 --> 00:59:08,000
specification and a yaml file if you're

00:59:06,000 --> 00:59:09,119
not familiar with that you will be

00:59:08,000 --> 00:59:10,720
by the time we get done with the

00:59:09,119 --> 00:59:11,440
workshop because we have a lot of that

00:59:10,720 --> 00:59:14,720
that happens

00:59:11,440 --> 00:59:16,400
in the kubernetes space yaml is yet

00:59:14,720 --> 00:59:18,480
another markup language or

00:59:16,400 --> 00:59:20,559
yet another messy layout or depending on

00:59:18,480 --> 00:59:22,559
what your your tack is on it

00:59:20,559 --> 00:59:24,799
uh it's basically this kind of format

00:59:22,559 --> 00:59:26,559
that you see on the screen in this file

00:59:24,799 --> 00:59:28,799
where indentation signifies

00:59:26,559 --> 00:59:30,400
relationships in other words the parts

00:59:28,799 --> 00:59:31,200
that are indented belong to the parts

00:59:30,400 --> 00:59:33,200
above

00:59:31,200 --> 00:59:34,720
that aren't indented there and so forth

00:59:33,200 --> 00:59:38,799
and as you indent more

00:59:34,720 --> 00:59:41,760
those are subsections of the parts above

00:59:38,799 --> 00:59:43,440
so yaml files uh you can specify in a

00:59:41,760 --> 00:59:46,079
docker compose yaml

00:59:43,440 --> 00:59:48,559
how to start up multiple containers and

00:59:46,079 --> 00:59:51,520
how to run them together

00:59:48,559 --> 00:59:52,799
how to use them so if you for example in

00:59:51,520 --> 00:59:55,839
the case here

00:59:52,799 --> 00:59:58,319
we have our web container at the top and

00:59:55,839 --> 01:00:01,119
our rdb container at the bottom

00:59:58,319 --> 01:00:03,359
so we need our web interface to be able

01:00:01,119 --> 01:00:04,319
to pull information from our database to

01:00:03,359 --> 01:00:06,480
display

01:00:04,319 --> 01:00:08,559
in the web app so this is saying

01:00:06,480 --> 01:00:10,160
essentially that we're going to use the

01:00:08,559 --> 01:00:12,720
image we created

01:00:10,160 --> 01:00:14,720
for our web up there we have ports that

01:00:12,720 --> 01:00:17,200
are going to be exposed from the image

01:00:14,720 --> 01:00:19,440
out onto a port that we can access and

01:00:17,200 --> 01:00:21,920
we're going to link in or connect to

01:00:19,440 --> 01:00:24,160
another database container or another

01:00:21,920 --> 01:00:26,480
container there the one for the database

01:00:24,160 --> 01:00:28,319
which we defined further down below the

01:00:26,480 --> 01:00:31,920
database container the mysql

01:00:28,319 --> 01:00:33,760
service on that link container

01:00:31,920 --> 01:00:35,599
now we have the raw db image for that

01:00:33,760 --> 01:00:37,599
one we have some ports to expose

01:00:35,599 --> 01:00:39,680
we have environment variables so one of

01:00:37,599 --> 01:00:41,680
the things when you're working with

01:00:39,680 --> 01:00:43,920
an image that has been put together by

01:00:41,680 --> 01:00:46,079
somebody else like the mysql image

01:00:43,920 --> 01:00:48,400
recall that we actually downloaded the

01:00:46,079 --> 01:00:50,400
base image that had mysql on it

01:00:48,400 --> 01:00:51,520
when people put these images together

01:00:50,400 --> 01:00:53,920
they need a way for

01:00:51,520 --> 01:00:54,799
you or some other people to be able to

01:00:53,920 --> 01:00:56,799
run them

01:00:54,799 --> 01:00:58,480
in a customized way meaning being able

01:00:56,799 --> 01:01:01,599
to pass in the values

01:00:58,480 --> 01:01:02,640
mysql image isn't very useful if i only

01:01:01,599 --> 01:01:05,520
hard-coded

01:01:02,640 --> 01:01:06,480
a database name a username a password

01:01:05,520 --> 01:01:08,160
that sort of thing

01:01:06,480 --> 01:01:09,680
i can only use it if i use that exact

01:01:08,160 --> 01:01:11,040
same information it wouldn't be as

01:01:09,680 --> 01:01:14,400
secure either

01:01:11,040 --> 01:01:15,040
so typically one of the ways that image

01:01:14,400 --> 01:01:18,240
creators

01:01:15,040 --> 01:01:21,040
allow you to pass information to an

01:01:18,240 --> 01:01:21,680
image to use it in the way you intend is

01:01:21,040 --> 01:01:23,200
by

01:01:21,680 --> 01:01:25,599
allowing you to set environment

01:01:23,200 --> 01:01:26,799
variables that image then when it runs

01:01:25,599 --> 01:01:28,640
as a container

01:01:26,799 --> 01:01:30,480
will look at those environment variables

01:01:28,640 --> 01:01:32,880
and get the values you pass

01:01:30,480 --> 01:01:34,799
in from that so environment variables

01:01:32,880 --> 01:01:36,960
are kind of a universal way

01:01:34,799 --> 01:01:38,720
to set information that an image or

01:01:36,960 --> 01:01:40,160
container can use and pull in

01:01:38,720 --> 01:01:41,920
you can see down here at the bottom we

01:01:40,160 --> 01:01:44,720
have an environment mysql

01:01:41,920 --> 01:01:46,400
user password database root password now

01:01:44,720 --> 01:01:48,319
of course it's not secure to put all

01:01:46,400 --> 01:01:50,079
this stuff in open text like this

01:01:48,319 --> 01:01:52,240
and when we get into kubernetes we'll

01:01:50,079 --> 01:01:54,240
talk about other ways to secure

01:01:52,240 --> 01:01:56,160
things and do it but typically when

01:01:54,240 --> 01:01:58,240
you're working with images this is one

01:01:56,160 --> 01:01:59,200
kind of universal way to allow you to

01:01:58,240 --> 01:02:01,520
pass things in

01:01:59,200 --> 01:02:02,319
is through by is via setting environment

01:02:01,520 --> 01:02:04,000
variables

01:02:02,319 --> 01:02:05,839
that the container can then run when

01:02:04,000 --> 01:02:06,480
it's when air can then read when it's

01:02:05,839 --> 01:02:08,720
running

01:02:06,480 --> 01:02:10,160
to pull information out composing

01:02:08,720 --> 01:02:10,799
containers together is essentially a

01:02:10,160 --> 01:02:12,240
three-step

01:02:10,799 --> 01:02:13,920
process if you're using this docker

01:02:12,240 --> 01:02:15,440
compose approach

01:02:13,920 --> 01:02:17,839
you create new docker files for each

01:02:15,440 --> 01:02:19,520
part of the app you define services that

01:02:17,839 --> 01:02:20,480
make up the app and a docker compose

01:02:19,520 --> 01:02:24,079
yaml file

01:02:20,480 --> 01:02:26,799
like we have the mysql service here

01:02:24,079 --> 01:02:28,160
and we do a docker run docker run is

01:02:26,799 --> 01:02:30,960
what spins up

01:02:28,160 --> 01:02:32,000
the images uh i'm sorry i'm jumping

01:02:30,960 --> 01:02:34,880
ahead a little bit

01:02:32,000 --> 01:02:36,720
run docker compose up that's the command

01:02:34,880 --> 01:02:39,359
docker dash compose is the tool

01:02:36,720 --> 01:02:40,799
up is a command from that and it starts

01:02:39,359 --> 01:02:42,880
and runs our app

01:02:40,799 --> 01:02:44,559
so that's the compose approach using

01:02:42,880 --> 01:02:45,680
docker compose to run multiple

01:02:44,559 --> 01:02:47,200
containers

01:02:45,680 --> 01:02:49,280
another approach to running multiple

01:02:47,200 --> 01:02:53,280
containers is using docker run

01:02:49,280 --> 01:02:55,440
itself docker run has a dash dash link

01:02:53,280 --> 01:02:57,680
option now this is being deprecated so

01:02:55,440 --> 01:03:00,240
it's not as much use anymore

01:02:57,680 --> 01:03:00,960
but it allows you to run an image and

01:03:00,240 --> 01:03:03,200
link it to

01:03:00,960 --> 01:03:04,960
another image out there or another

01:03:03,200 --> 01:03:07,039
container run one container

01:03:04,960 --> 01:03:08,960
and link it to another container the

01:03:07,039 --> 01:03:10,079
syntax gets a little bit complicated so

01:03:08,960 --> 01:03:11,520
it's harder to

01:03:10,079 --> 01:03:14,079
manage and as i said it's getting

01:03:11,520 --> 01:03:14,799
deprecated there's also a docker stack

01:03:14,079 --> 01:03:16,480
command

01:03:14,799 --> 01:03:18,880
the docker stack command is something

01:03:16,480 --> 01:03:21,760
that comes with the docker cli cli

01:03:18,880 --> 01:03:24,240
is command line interface and it lets us

01:03:21,760 --> 01:03:26,960
manage a cluster of containers via swarm

01:03:24,240 --> 01:03:27,520
if you haven't heard of swarm swarm was

01:03:26,960 --> 01:03:30,640
a

01:03:27,520 --> 01:03:34,319
competitor to kubernetes it was docker's

01:03:30,640 --> 01:03:37,359
uh docker's use case or docker's

01:03:34,319 --> 01:03:38,559
implementation for being able to manage

01:03:37,359 --> 01:03:40,720
and orchestrate

01:03:38,559 --> 01:03:42,799
large numbers of containers together

01:03:40,720 --> 01:03:45,280
actually had it actually was probably

01:03:42,799 --> 01:03:47,119
arguably a little bit easier to use in

01:03:45,280 --> 01:03:48,240
some respects but kubernetes has

01:03:47,119 --> 01:03:51,359
effectively

01:03:48,240 --> 01:03:53,520
won the war in terms of orchestration uh

01:03:51,359 --> 01:03:54,960
containerization managed managing large

01:03:53,520 --> 01:03:56,799
numbers of containers

01:03:54,960 --> 01:03:58,799
so docker stack is another approach you

01:03:56,799 --> 01:04:00,640
could use

01:03:58,799 --> 01:04:02,079
and finally kubernetes or kubernetes

01:04:00,640 --> 01:04:04,319
environments as we'll talk about

01:04:02,079 --> 01:04:07,039
in the workshop kubernetes is designed

01:04:04,319 --> 01:04:09,599
to be able to orchestrate and manage

01:04:07,039 --> 01:04:11,200
uh large numbers of containers overall

01:04:09,599 --> 01:04:12,079
docker flows just kind of give you the

01:04:11,200 --> 01:04:14,640
picture here

01:04:12,079 --> 01:04:15,200
if we have docker installed locally and

01:04:14,640 --> 01:04:17,760
we have an

01:04:15,200 --> 01:04:19,119
image out there already in the os we

01:04:17,760 --> 01:04:20,880
might create another image the

01:04:19,119 --> 01:04:22,000
dockerfile describes how to create a new

01:04:20,880 --> 01:04:24,319
image

01:04:22,000 --> 01:04:25,440
docker goes out to a registry gets

01:04:24,319 --> 01:04:27,839
images down

01:04:25,440 --> 01:04:29,680
constructs these layers for us to build

01:04:27,839 --> 01:04:32,000
things into a new image

01:04:29,680 --> 01:04:33,520
we create a container from an image by

01:04:32,000 --> 01:04:36,640
adding that read write layer

01:04:33,520 --> 01:04:38,240
and a docker compose file then describes

01:04:36,640 --> 01:04:39,760
how to create containers and link

01:04:38,240 --> 01:04:41,920
multiple ones together

01:04:39,760 --> 01:04:43,359
docker compose executes compose files

01:04:41,920 --> 01:04:45,200
and runs it

01:04:43,359 --> 01:04:46,640
so our example app that we'll be using

01:04:45,200 --> 01:04:49,119
throughout the

01:04:46,640 --> 01:04:50,640
workshop today is called roar registry

01:04:49,119 --> 01:04:52,240
of animal responders this is a little

01:04:50,640 --> 01:04:54,799
silly app that i wrote

01:04:52,240 --> 01:04:56,880
years ago with a web app on the front of

01:04:54,799 --> 01:04:57,839
mysql database in the backend written in

01:04:56,880 --> 01:05:01,039
java

01:04:57,839 --> 01:05:03,280
has a way to call it via a rest api

01:05:01,039 --> 01:05:05,200
as we'll see when we work with istio it

01:05:03,280 --> 01:05:05,760
has a war file this war file was what

01:05:05,200 --> 01:05:09,680
you

01:05:05,760 --> 01:05:11,599
copied in uh it's the java

01:05:09,680 --> 01:05:13,200
binary there that you copied in when we

01:05:11,599 --> 01:05:16,640
we actually built

01:05:13,200 --> 01:05:18,880
the uh we actually built the image

01:05:16,640 --> 01:05:20,720
for we did that dash arg we had the

01:05:18,880 --> 01:05:22,400
argument in there to be able to pull it

01:05:20,720 --> 01:05:23,680
in that's what we're pulling in

01:05:22,400 --> 01:05:26,160
the war file that contains the

01:05:23,680 --> 01:05:29,119
application managed in tomcat

01:05:26,160 --> 01:05:30,799
and if you've uh been a fan of cartoons

01:05:29,119 --> 01:05:32,079
at any point you probably recognize some

01:05:30,799 --> 01:05:35,280
of these

01:05:32,079 --> 01:05:36,000
characters here we're using for data now

01:05:35,280 --> 01:05:39,039
we'll go through

01:05:36,000 --> 01:05:40,160
here and a couple other commands docker

01:05:39,039 --> 01:05:43,039
inspect

01:05:40,160 --> 01:05:44,240
docker ps docker run so docker inspect

01:05:43,039 --> 01:05:47,119
is a way to get

01:05:44,240 --> 01:05:49,200
information on an image uh get

01:05:47,119 --> 01:05:51,280
information about it like metadata

01:05:49,200 --> 01:05:53,440
so an image itself if you think about it

01:05:51,280 --> 01:05:56,000
is a way of combining layers together

01:05:53,440 --> 01:05:58,079
applications all sorts of stuff so you

01:05:56,000 --> 01:06:01,520
may have things like

01:05:58,079 --> 01:06:03,280
the host name or the domain or

01:06:01,520 --> 01:06:05,440
when it was created those kinds of

01:06:03,280 --> 01:06:06,960
things about it docker inspect lets you

01:06:05,440 --> 01:06:09,280
see that kind of information

01:06:06,960 --> 01:06:10,319
docker ps allows us to see running

01:06:09,280 --> 01:06:12,240
containers

01:06:10,319 --> 01:06:14,000
and we can also stop containers we can

01:06:12,240 --> 01:06:15,359
stop containers from executing

01:06:14,000 --> 01:06:18,000
if we want to see those we can see

01:06:15,359 --> 01:06:22,160
docker ps dash a or run docker ps

01:06:18,000 --> 01:06:23,200
a docker run is then creating as we said

01:06:22,160 --> 01:06:27,119
taking the

01:06:23,200 --> 01:06:27,119
image and making a container out of it

01:06:27,839 --> 01:06:30,960
one of the other things i wanted to

01:06:29,440 --> 01:06:33,839
mention about the

01:06:30,960 --> 01:06:35,520
uh about containers we talked about

01:06:33,839 --> 01:06:37,359
somebody asked the question about podman

01:06:35,520 --> 01:06:39,359
is a good segue into this

01:06:37,359 --> 01:06:41,680
there is docker used to be mainly the

01:06:39,359 --> 01:06:44,160
only game in town

01:06:41,680 --> 01:06:46,240
uh in large in large part it had a lot

01:06:44,160 --> 01:06:48,720
of the market share out there

01:06:46,240 --> 01:06:49,839
however in recent years they've created

01:06:48,720 --> 01:06:52,799
they have worked with

01:06:49,839 --> 01:06:54,079
the linux foundation which is all about

01:06:52,799 --> 01:06:56,240
open sourcing

01:06:54,079 --> 01:06:57,119
software to create this open container

01:06:56,240 --> 01:07:00,240
initiative

01:06:57,119 --> 01:07:04,079
so the open container initiative or oci

01:07:00,240 --> 01:07:07,520
is an open sharing of the structure

01:07:04,079 --> 01:07:08,720
and the interfaces for working with

01:07:07,520 --> 01:07:11,440
containers its

01:07:08,720 --> 01:07:12,160
intent is to have a common way to do

01:07:11,440 --> 01:07:15,280
this

01:07:12,160 --> 01:07:16,799
so that other applications uh can other

01:07:15,280 --> 01:07:19,520
tools can be created

01:07:16,799 --> 01:07:20,640
and used to be able to do the same thing

01:07:19,520 --> 01:07:23,119
the basic idea

01:07:20,640 --> 01:07:24,480
is if you follow these uh structures the

01:07:23,119 --> 01:07:26,400
way things are structured

01:07:24,480 --> 01:07:28,160
if you support these same kind of

01:07:26,400 --> 01:07:30,720
interfaces then you too

01:07:28,160 --> 01:07:31,839
can do what docker does which in turn

01:07:30,720 --> 01:07:34,000
has led to

01:07:31,839 --> 01:07:35,760
other players in the container space i

01:07:34,000 --> 01:07:38,240
mentioned pod man already

01:07:35,760 --> 01:07:39,359
build a rockets one has been around for

01:07:38,240 --> 01:07:42,480
a long time

01:07:39,359 --> 01:07:44,000
cryo container runtime initiative run c

01:07:42,480 --> 01:07:46,160
all these kinds of things having to do

01:07:44,000 --> 01:07:49,119
with containers out there

01:07:46,160 --> 01:07:51,440
in fact it's been red hat rail 8 i think

01:07:49,119 --> 01:07:53,760
it was doesn't even include

01:07:51,440 --> 01:07:55,440
docker anymore it comes up with pod man

01:07:53,760 --> 01:07:57,039
i think build a as well

01:07:55,440 --> 01:07:58,880
so just realize there are other players

01:07:57,039 --> 01:08:00,480
in the container space again we're using

01:07:58,880 --> 01:08:02,400
docker in this class

01:08:00,480 --> 01:08:04,960
in this workshop because it's still the

01:08:02,400 --> 01:08:06,720
most common arguably it's still the one

01:08:04,960 --> 01:08:08,839
that most people familiar with

01:08:06,720 --> 01:08:10,240
and it kind of provides that sort of

01:08:08,839 --> 01:08:12,480
baseline

01:08:10,240 --> 01:08:13,839
terminology and such to to talk with

01:08:12,480 --> 01:08:16,719
other people about it so

01:08:13,839 --> 01:08:17,520
i thought it was a good choice for this

01:08:16,719 --> 01:08:19,359
all right

01:08:17,520 --> 01:08:21,600
not much time in between there but we're

01:08:19,359 --> 01:08:23,440
going to do a look at lab number two i'm

01:08:21,600 --> 01:08:27,839
going to stop my share here

01:08:23,440 --> 01:08:33,440
on the slides and jump over to sharing

01:08:27,839 --> 01:08:33,440
the uh the labs let me get there

01:08:35,440 --> 01:08:39,279
okay so let me bring this up a little

01:08:38,080 --> 01:08:41,839
bit here

01:08:39,279 --> 01:08:43,839
so i can finish reading it all right so

01:08:41,839 --> 01:08:46,000
we ended up at lab number one

01:08:43,839 --> 01:08:48,080
as having a set of docker images or a

01:08:46,000 --> 01:08:53,520
couple docker images that we built

01:08:48,080 --> 01:08:54,560
out there um and then we have

01:08:53,520 --> 01:08:56,719
now we're going to look at how to

01:08:54,560 --> 01:08:58,159
compose images together using the docker

01:08:56,719 --> 01:08:59,120
compose so we can really look at our

01:08:58,159 --> 01:09:01,279
application

01:08:59,120 --> 01:09:02,960
and see how we can run multiple images

01:09:01,279 --> 01:09:04,960
together

01:09:02,960 --> 01:09:07,359
so we take a look at the docker compose

01:09:04,960 --> 01:09:09,120
yaml file and by the way docker dash

01:09:07,359 --> 01:09:11,199
compose is a separate tool

01:09:09,120 --> 01:09:12,560
it's not a compose option to docker it's

01:09:11,199 --> 01:09:14,040
a separate tool

01:09:12,560 --> 01:09:16,719
out there but we have our

01:09:14,040 --> 01:09:19,359
dockercompose.yaml file yml file

01:09:16,719 --> 01:09:20,960
we'll then run it docker dash compose up

01:09:19,359 --> 01:09:22,480
and you'll see the different processes

01:09:20,960 --> 01:09:23,520
running to create the containers and

01:09:22,480 --> 01:09:26,400
starting it

01:09:23,520 --> 01:09:28,719
after that we're going to take a look at

01:09:26,400 --> 01:09:30,880
the running containers that were

01:09:28,719 --> 01:09:33,120
resulted from this command and so we're

01:09:30,880 --> 01:09:35,120
going to do some things like

01:09:33,120 --> 01:09:36,560
stopping them and such eventually so

01:09:35,120 --> 01:09:37,759
we're going to create open up a second

01:09:36,560 --> 01:09:39,520
terminal emulator

01:09:37,759 --> 01:09:40,799
remember that i showed you at the first

01:09:39,520 --> 01:09:42,640
thing in the first lab

01:09:40,799 --> 01:09:44,319
you could go to that mouse head icon up

01:09:42,640 --> 01:09:47,199
in the upper left of your

01:09:44,319 --> 01:09:48,000
of your screen of your virtual machine

01:09:47,199 --> 01:09:49,199
desktop

01:09:48,000 --> 01:09:50,400
and you can open that and create a

01:09:49,199 --> 01:09:51,759
different and go down and select a

01:09:50,400 --> 01:09:52,960
different terminal emulator

01:09:51,759 --> 01:09:54,880
so we're going to open up a second

01:09:52,960 --> 01:09:55,920
terminal emulator and enter the docker

01:09:54,880 --> 01:09:59,360
command below

01:09:55,920 --> 01:10:01,760
docker ps grep roar docker ps says show

01:09:59,360 --> 01:10:03,440
me the running containers out there

01:10:01,760 --> 01:10:05,520
now i did the grab roar because there

01:10:03,440 --> 01:10:07,120
are a lot of other containers running

01:10:05,520 --> 01:10:09,360
here's one of the things that you may

01:10:07,120 --> 01:10:11,920
not have realized

01:10:09,360 --> 01:10:13,600
things like kubernetes things like istio

01:10:11,920 --> 01:10:14,960
those are actually running container

01:10:13,600 --> 01:10:16,719
images as well

01:10:14,960 --> 01:10:18,400
so everything that's running or pretty

01:10:16,719 --> 01:10:19,920
much every all the main applications

01:10:18,400 --> 01:10:22,400
we're using here

01:10:19,920 --> 01:10:24,000
on this virtual box are all running

01:10:22,400 --> 01:10:25,280
containers of their own

01:10:24,000 --> 01:10:26,800
through kubernetes so there are

01:10:25,280 --> 01:10:28,880
containers out there so if we did just

01:10:26,800 --> 01:10:30,719
docker ps you're welcome to do it

01:10:28,880 --> 01:10:32,239
you'll see a lot more containers out

01:10:30,719 --> 01:10:34,080
there running on your system

01:10:32,239 --> 01:10:35,520
the grip roar just allows us to just

01:10:34,080 --> 01:10:36,800
filter out the ones that we're most

01:10:35,520 --> 01:10:38,640
interested in

01:10:36,800 --> 01:10:40,480
now for some of the operations that we

01:10:38,640 --> 01:10:42,719
do with containers

01:10:40,480 --> 01:10:43,520
we're still going to use part of the hex

01:10:42,719 --> 01:10:46,880
uh

01:10:43,520 --> 01:10:47,920
a hex id out there so we're going to

01:10:46,880 --> 01:10:51,040
take a look at

01:10:47,920 --> 01:10:53,360
the two containers we have the ones for

01:10:51,040 --> 01:10:54,400
the web and the ones for database

01:10:53,360 --> 01:10:56,560
and we're actually going to work with

01:10:54,400 --> 01:10:58,800
the one for the web first we're going to

01:10:56,560 --> 01:10:59,280
grab the first three or four characters

01:10:58,800 --> 01:11:01,600
of it

01:10:59,280 --> 01:11:03,760
of the container id so when i do docker

01:11:01,600 --> 01:11:06,400
ps i'm returned a list

01:11:03,760 --> 01:11:07,920
of my containers from that list i can

01:11:06,400 --> 01:11:09,520
grab the first three or four characters

01:11:07,920 --> 01:11:13,040
you see them in bold here

01:11:09,520 --> 01:11:15,840
on step five we're going to make an

01:11:13,040 --> 01:11:16,800
and then we're going to actually run

01:11:15,840 --> 01:11:19,840
this command

01:11:16,800 --> 01:11:21,280
in step 5 and substitute in those three

01:11:19,840 --> 01:11:23,440
or four characters

01:11:21,280 --> 01:11:25,440
into that container id so where

01:11:23,440 --> 01:11:27,040
container id is there in brackets

01:11:25,440 --> 01:11:28,480
you would substitute in the first couple

01:11:27,040 --> 01:11:31,760
of characters of the

01:11:28,480 --> 01:11:34,000
web containers container id

01:11:31,760 --> 01:11:34,880
and then grep ip address what are we

01:11:34,000 --> 01:11:36,159
doing here

01:11:34,880 --> 01:11:38,640
we want to be able to look at our

01:11:36,159 --> 01:11:40,000
application running so we're going to

01:11:38,640 --> 01:11:40,640
ask docker we're going to get the

01:11:40,000 --> 01:11:42,560
metadata

01:11:40,640 --> 01:11:44,640
about that container and we're going to

01:11:42,560 --> 01:11:45,840
find the ip address where that will be

01:11:44,640 --> 01:11:48,880
running at

01:11:45,840 --> 01:11:49,440
so will docker inspect container id web

01:11:48,880 --> 01:11:53,199
ip

01:11:49,440 --> 01:11:55,840
or grep ip address open a web browser

01:11:53,199 --> 01:11:56,320
you can bring up firefox on there and

01:11:55,840 --> 01:11:58,880
then

01:11:56,320 --> 01:12:00,880
step seven we'll substitute in the ip

01:11:58,880 --> 01:12:03,199
address the ip address comes is the

01:12:00,880 --> 01:12:07,520
output of the command to step five

01:12:03,199 --> 01:12:08,400
that'll be a dot like 172.1703 or

01:12:07,520 --> 01:12:10,000
something

01:12:08,400 --> 01:12:12,360
and you plug that in so it should be

01:12:10,000 --> 01:12:15,760
like http

01:12:12,360 --> 01:12:18,239
172.1703 colon 8080 that's support

01:12:15,760 --> 01:12:19,760
and then the application name roar and

01:12:18,239 --> 01:12:21,440
you'll see something like this running

01:12:19,760 --> 01:12:23,679
on your screen

01:12:21,440 --> 01:12:25,199
all right so let's do lab number two i

01:12:23,679 --> 01:12:28,320
don't think this one will take

01:12:25,199 --> 01:12:30,159
too long on there let's take about just

01:12:28,320 --> 01:12:30,960
about a five minute break since we just

01:12:30,159 --> 01:12:32,960
had one

01:12:30,960 --> 01:12:35,120
i think this will go fairly quickly but

01:12:32,960 --> 01:12:37,520
take five minutes and work on lab number

01:12:35,120 --> 01:12:38,960
two and then we'll come back and we'll

01:12:37,520 --> 01:12:39,520
talk a little bit more about how to

01:12:38,960 --> 01:12:42,800
debug

01:12:39,520 --> 01:12:44,239
images out there working with uh gets

01:12:42,800 --> 01:12:46,320
looking at images a little bit closer

01:12:44,239 --> 01:12:48,560
how to uh exec

01:12:46,320 --> 01:12:50,800
into them inspect them and so on all

01:12:48,560 --> 01:12:52,159
right so five minutes for lab number two

01:12:50,800 --> 01:12:54,400
and we'll pick up after that

01:12:52,159 --> 01:12:55,760
okay folks we're back uh if you're still

01:12:54,400 --> 01:12:57,199
working on that feel free to finish it

01:12:55,760 --> 01:12:58,880
up of course hopefully it doesn't take

01:12:57,199 --> 01:13:01,280
too long there but i felt like that one

01:12:58,880 --> 01:13:04,719
was uh pretty quick to do

01:13:01,280 --> 01:13:07,679
just kind of spinning up the application

01:13:04,719 --> 01:13:09,920
and so with at that point you should be

01:13:07,679 --> 01:13:11,360
able to see the application running

01:13:09,920 --> 01:13:13,360
with the web app there showing

01:13:11,360 --> 01:13:13,920
information from the database layer as

01:13:13,360 --> 01:13:16,159
well

01:13:13,920 --> 01:13:18,239
i did have one question here we are

01:13:16,159 --> 01:13:19,040
passing a file as an arg to the web

01:13:18,239 --> 01:13:21,840
image

01:13:19,040 --> 01:13:22,560
is this arg file stored in the image yes

01:13:21,840 --> 01:13:25,199
it is

01:13:22,560 --> 01:13:25,679
can this war file be changed afterwards

01:13:25,199 --> 01:13:29,520
uh

01:13:25,679 --> 01:13:31,440
not easily uh because again we're

01:13:29,520 --> 01:13:32,800
you're storing it in the image images

01:13:31,440 --> 01:13:35,360
are immutable

01:13:32,800 --> 01:13:36,719
so it's in there the only the only way

01:13:35,360 --> 01:13:38,400
you could really do it would be if

01:13:36,719 --> 01:13:40,239
you're running the container

01:13:38,400 --> 01:13:42,159
you could you could go into it for about

01:13:40,239 --> 01:13:44,320
talk about you could actually um

01:13:42,159 --> 01:13:46,080
kind of use that copy on right thing it

01:13:44,320 --> 01:13:47,520
could put one in the container

01:13:46,080 --> 01:13:49,120
level but that would not change in the

01:13:47,520 --> 01:13:50,800
image and that's by design right because

01:13:49,120 --> 01:13:53,360
the images are considered to be

01:13:50,800 --> 01:13:54,960
immutable so you wouldn't be changing it

01:13:53,360 --> 01:13:56,719
in the image itself you'd be changing

01:13:54,960 --> 01:13:58,640
the container layer there

01:13:56,719 --> 01:14:01,199
or you could rebuild you could build

01:13:58,640 --> 01:14:02,320
another image and update the revision of

01:14:01,199 --> 01:14:05,360
it

01:14:02,320 --> 01:14:08,000
and then pull that one in from there

01:14:05,360 --> 01:14:09,840
okay all right let's go ahead and jump

01:14:08,000 --> 01:14:15,840
back to the presentation let me

01:14:09,840 --> 01:14:15,840
share screen here

01:14:17,600 --> 01:14:21,840
all right so debugging docker containers

01:14:19,840 --> 01:14:22,400
we're talking about if something goes

01:14:21,840 --> 01:14:25,440
wrong

01:14:22,400 --> 01:14:26,960
and inevitably it will go wrong uh

01:14:25,440 --> 01:14:28,239
the approach we're taking here is to

01:14:26,960 --> 01:14:29,600
help you understand a little bit more

01:14:28,239 --> 01:14:30,320
about some tips and tricks that you can

01:14:29,600 --> 01:14:32,239
use

01:14:30,320 --> 01:14:33,520
as you're running in there so how to

01:14:32,239 --> 01:14:35,360
tell what's going on

01:14:33,520 --> 01:14:37,360
how to what's going wrong one approach

01:14:35,360 --> 01:14:38,960
here identify the container that's a

01:14:37,360 --> 01:14:40,880
problem now that may sound a little

01:14:38,960 --> 01:14:43,440
flippant in there or a little bit

01:14:40,880 --> 01:14:45,760
uh you know wow well if it was that easy

01:14:43,440 --> 01:14:47,600
but the sort of idea here is if you look

01:14:45,760 --> 01:14:49,120
at the functionality that you're seeing

01:14:47,600 --> 01:14:51,280
or the problem that you're

01:14:49,120 --> 01:14:52,880
uh experiencing that may give you a clue

01:14:51,280 --> 01:14:54,560
as to which container it is

01:14:52,880 --> 01:14:56,000
for example with our own application

01:14:54,560 --> 01:14:56,960
here with the web app and with the

01:14:56,000 --> 01:14:59,520
database

01:14:56,960 --> 01:15:00,480
if i am seeing the web app but no data

01:14:59,520 --> 01:15:02,719
in there

01:15:00,480 --> 01:15:04,159
chances are that is the problem is with

01:15:02,719 --> 01:15:06,480
the database container

01:15:04,159 --> 01:15:08,000
if it's not even coming up at all then

01:15:06,480 --> 01:15:10,000
perhaps if i'm getting a

01:15:08,000 --> 01:15:11,520
an error that says i can't access the

01:15:10,000 --> 01:15:13,760
web page there

01:15:11,520 --> 01:15:15,520
then chances are it may be with the web

01:15:13,760 --> 01:15:16,480
app itself in there so you can kind of

01:15:15,520 --> 01:15:18,159
figure out

01:15:16,480 --> 01:15:19,600
based on observation and based on the

01:15:18,159 --> 01:15:20,400
functionality the problem that you're

01:15:19,600 --> 01:15:22,480
seeing

01:15:20,400 --> 01:15:23,760
an idea maybe a pointer to which one

01:15:22,480 --> 01:15:26,400
it's actually

01:15:23,760 --> 01:15:28,000
is an issue gather information about the

01:15:26,400 --> 01:15:29,600
state docker and spec we talked about

01:15:28,000 --> 01:15:30,000
docker inspect we've already seen it

01:15:29,600 --> 01:15:32,320
once

01:15:30,000 --> 01:15:34,000
we did the grep for the ip address there

01:15:32,320 --> 01:15:36,880
is a lot more information

01:15:34,000 --> 01:15:39,040
in about the container metadata about it

01:15:36,880 --> 01:15:39,679
about the state of the container out

01:15:39,040 --> 01:15:41,840
there

01:15:39,679 --> 01:15:44,080
of the information the values that it's

01:15:41,840 --> 01:15:45,920
using that you can get from there

01:15:44,080 --> 01:15:47,920
gather information about what's happened

01:15:45,920 --> 01:15:49,679
so far with the docker logs

01:15:47,920 --> 01:15:51,600
so whereas the inspect talks about kind

01:15:49,679 --> 01:15:53,760
of like the state of the container

01:15:51,600 --> 01:15:55,520
the logs think about that as being the

01:15:53,760 --> 01:15:57,840
logs of the main application

01:15:55,520 --> 01:15:59,520
running in the container if in our case

01:15:57,840 --> 01:16:02,000
for like the

01:15:59,520 --> 01:16:03,120
web one think of it as the the logs for

01:16:02,000 --> 01:16:05,120
tomcat

01:16:03,120 --> 01:16:07,280
in for the database one the logs of

01:16:05,120 --> 01:16:09,520
mysql

01:16:07,280 --> 01:16:11,760
verify assumptions is what as for

01:16:09,520 --> 01:16:12,560
example what ports are exposed via doc

01:16:11,760 --> 01:16:14,320
report

01:16:12,560 --> 01:16:16,159
always check your assumptions with this

01:16:14,320 --> 01:16:17,600
am i looking trying to access this on

01:16:16,159 --> 01:16:20,159
port 8080

01:16:17,600 --> 01:16:22,320
but when i ran my docker compose file or

01:16:20,159 --> 01:16:26,000
when i started it up i told it to go

01:16:22,320 --> 01:16:28,400
to port 8081 or 8082 or something

01:16:26,000 --> 01:16:30,320
so just checking those kinds of things

01:16:28,400 --> 01:16:31,120
see what's gone into an image docker

01:16:30,320 --> 01:16:32,800
history

01:16:31,120 --> 01:16:34,320
um you know at some point if you're

01:16:32,800 --> 01:16:36,320
running functionality you may

01:16:34,320 --> 01:16:37,600
and you're running your container you

01:16:36,320 --> 01:16:39,120
may be you may be

01:16:37,600 --> 01:16:41,840
seeing something you don't it looks a

01:16:39,120 --> 01:16:43,360
little odd or off it may be useful to go

01:16:41,840 --> 01:16:44,960
back and look at the docker history to

01:16:43,360 --> 01:16:46,640
make sure it actually

01:16:44,960 --> 01:16:48,239
pulled in what you needed to make sure

01:16:46,640 --> 01:16:49,600
it actually was running the commands

01:16:48,239 --> 01:16:52,400
that you needed to

01:16:49,600 --> 01:16:53,440
of it uh for example if you had mixed

01:16:52,400 --> 01:16:56,080
database and then

01:16:53,440 --> 01:16:57,840
and the web things there the docker

01:16:56,080 --> 01:16:59,120
history would show you that maybe on

01:16:57,840 --> 01:17:00,719
your uh

01:16:59,120 --> 01:17:02,159
database ones it was executing the

01:17:00,719 --> 01:17:04,640
commands from the

01:17:02,159 --> 01:17:05,679
the web docker file there so those kinds

01:17:04,640 --> 01:17:08,400
of things you can get some

01:17:05,679 --> 01:17:09,440
some insights from that sometimes and

01:17:08,400 --> 01:17:11,040
finally they actually

01:17:09,440 --> 01:17:13,679
actually connect into the containers

01:17:11,040 --> 01:17:15,760
file system via docker exec

01:17:13,679 --> 01:17:17,360
what we mean by this is it actually

01:17:15,760 --> 01:17:19,360
going in and

01:17:17,360 --> 01:17:21,600
almost like logging into a remote

01:17:19,360 --> 01:17:24,880
machine you can exec

01:17:21,600 --> 01:17:26,640
into the actual container

01:17:24,880 --> 01:17:28,480
and you can get to the containers file

01:17:26,640 --> 01:17:31,040
system where you can look around

01:17:28,480 --> 01:17:33,120
see what's going on take a look at uh

01:17:31,040 --> 01:17:35,840
what values are there maybe even tweak

01:17:33,120 --> 01:17:36,719
a thing or two at the container layer if

01:17:35,840 --> 01:17:38,400
you need to

01:17:36,719 --> 01:17:39,920
play with it and work with that too so

01:17:38,400 --> 01:17:40,880
just kind of like logging into remote

01:17:39,920 --> 01:17:44,239
machine

01:17:40,880 --> 01:17:46,159
now the one caveat with this though is

01:17:44,239 --> 01:17:49,040
let me go back up here a little bit the

01:17:46,159 --> 01:17:52,560
one caveat with the docker exec though

01:17:49,040 --> 01:17:54,400
is that option uh to log in and

01:17:52,560 --> 01:17:56,560
get to a shell meaning an operating

01:17:54,400 --> 01:17:59,920
system prompt where you can do things

01:17:56,560 --> 01:18:02,320
may not always be there uh exec isn't

01:17:59,920 --> 01:18:03,199
to use exec you run a command that you

01:18:02,320 --> 01:18:05,520
pass in

01:18:03,199 --> 01:18:06,960
you say log into this container or

01:18:05,520 --> 01:18:09,600
connect into this container

01:18:06,960 --> 01:18:11,120
and run this command most commonly the

01:18:09,600 --> 01:18:12,159
general purpose kind of thing would be

01:18:11,120 --> 01:18:15,040
to run

01:18:12,159 --> 01:18:16,320
bash or to run sh for shell something

01:18:15,040 --> 01:18:18,400
that's going to allow you to have a

01:18:16,320 --> 01:18:21,120
shell into the operating system

01:18:18,400 --> 01:18:22,320
in those there are some containers that

01:18:21,120 --> 01:18:25,120
are based on

01:18:22,320 --> 01:18:27,040
very very lightweight images there are

01:18:25,120 --> 01:18:29,840
things that their operating system

01:18:27,040 --> 01:18:31,520
in particular out there the images that

01:18:29,840 --> 01:18:33,520
you can use as base images

01:18:31,520 --> 01:18:34,640
that are very stripped down they're very

01:18:33,520 --> 01:18:37,440
lightweight

01:18:34,640 --> 01:18:39,120
uh as you build bigger and bigger images

01:18:37,440 --> 01:18:40,080
you have bigger and bigger containers

01:18:39,120 --> 01:18:42,320
uses up more and more

01:18:40,080 --> 01:18:43,760
system resources that for example you

01:18:42,320 --> 01:18:46,080
pay for in the cloud

01:18:43,760 --> 01:18:47,440
so there's this this idea that you can

01:18:46,080 --> 01:18:50,000
have very

01:18:47,440 --> 01:18:52,400
minimal images and some operating

01:18:50,000 --> 01:18:54,719
systems like alpine is one

01:18:52,400 --> 01:18:56,960
have very minimal images that may not

01:18:54,719 --> 01:18:59,199
have a shell executable in it

01:18:56,960 --> 01:19:00,000
so if you try to run sh or bash or

01:18:59,199 --> 01:19:01,760
something

01:19:00,000 --> 01:19:03,040
and the operating the image does not

01:19:01,760 --> 01:19:05,280
have that command

01:19:03,040 --> 01:19:07,360
installed then that won't be available

01:19:05,280 --> 01:19:08,960
to you but in general you can probably

01:19:07,360 --> 01:19:09,760
you can run something else you might be

01:19:08,960 --> 01:19:12,880
able to run

01:19:09,760 --> 01:19:14,080
a uh uh you know cataphile or doing

01:19:12,880 --> 01:19:15,440
something like that

01:19:14,080 --> 01:19:17,199
doing some other command that would give

01:19:15,440 --> 01:19:19,600
you some insight but it

01:19:17,199 --> 01:19:20,400
just if you are trying to run a bash

01:19:19,600 --> 01:19:22,640
shell

01:19:20,400 --> 01:19:23,440
or a shell script or a shell or

01:19:22,640 --> 01:19:25,440
something like that

01:19:23,440 --> 01:19:26,640
just realize that may not be present in

01:19:25,440 --> 01:19:29,760
that particular image

01:19:26,640 --> 01:19:31,840
for some very minimal images docker

01:19:29,760 --> 01:19:34,640
inspect

01:19:31,840 --> 01:19:36,400
allows us to get information about this

01:19:34,640 --> 01:19:39,280
you can see on about the

01:19:36,400 --> 01:19:40,719
about the image and you can see in there

01:19:39,280 --> 01:19:43,840
that we have

01:19:40,719 --> 01:19:45,920
uh the instances mac address on the

01:19:43,840 --> 01:19:47,760
right hand side

01:19:45,920 --> 01:19:49,520
docker inspect and you can see we're

01:19:47,760 --> 01:19:52,560
looking at for information

01:19:49,520 --> 01:19:54,719
you can get very precise about

01:19:52,560 --> 01:19:56,400
looking for things by using this

01:19:54,719 --> 01:19:59,920
javascript object notation

01:19:56,400 --> 01:20:02,960
called json it's a way of specifying

01:19:59,920 --> 01:20:03,520
a particular element that comes from the

01:20:02,960 --> 01:20:06,080
inspect

01:20:03,520 --> 01:20:07,840
output to pull out it's a very surgical

01:20:06,080 --> 01:20:10,159
process to go in and pull it out

01:20:07,840 --> 01:20:11,679
you can get very surgical about this and

01:20:10,159 --> 01:20:14,239
get that particular item

01:20:11,679 --> 01:20:15,600
out or you can do what i did which is

01:20:14,239 --> 01:20:17,360
kind of the lazy way

01:20:15,600 --> 01:20:19,120
do docker and spec and grep for what

01:20:17,360 --> 01:20:20,639
you're interested in if you were doing

01:20:19,120 --> 01:20:22,560
it programmatically and you needed to

01:20:20,639 --> 01:20:24,800
use the value you were getting back

01:20:22,560 --> 01:20:27,120
in a program or script you might use the

01:20:24,800 --> 01:20:27,679
json notation to get just that value

01:20:27,120 --> 01:20:29,120
back

01:20:27,679 --> 01:20:32,239
as opposed to the grip which might give

01:20:29,120 --> 01:20:34,480
you other information as well

01:20:32,239 --> 01:20:38,400
docker log shows you the logs of a

01:20:34,480 --> 01:20:40,560
particular application running in there

01:20:38,400 --> 01:20:41,520
docker port allows you to see all the

01:20:40,560 --> 01:20:43,280
mapped ports

01:20:41,520 --> 01:20:44,800
so ports here meaning like the ports

01:20:43,280 --> 01:20:47,199
that we connect into

01:20:44,800 --> 01:20:48,960
uh is it's going you know it may be one

01:20:47,199 --> 01:20:50,639
port that the

01:20:48,960 --> 01:20:53,040
image is intended to serve up or the

01:20:50,639 --> 01:20:54,880
container and you may want to then

01:20:53,040 --> 01:20:56,239
route it or map it to a different port

01:20:54,880 --> 01:20:58,480
that you're going to access

01:20:56,239 --> 01:21:00,080
in there so ports can be mapped from one

01:20:58,480 --> 01:21:01,760
to the other in there so

01:21:00,080 --> 01:21:03,679
look at the ports command to see the

01:21:01,760 --> 01:21:05,280
ports you're running docker history

01:21:03,679 --> 01:21:08,159
we've talked about seeing what went

01:21:05,280 --> 01:21:09,040
into the image and docker exec and the

01:21:08,159 --> 01:21:12,000
most common

01:21:09,040 --> 01:21:12,480
sort of form of docker exec here is the

01:21:12,000 --> 01:21:15,520
one

01:21:12,480 --> 01:21:18,800
probably uh the last example

01:21:15,520 --> 01:21:22,560
there or the next to the last

01:21:18,800 --> 01:21:24,639
out there and on the right hand side

01:21:22,560 --> 01:21:25,920
you see the one in the sort of gray box

01:21:24,639 --> 01:21:29,440
the second one from the bottom

01:21:25,920 --> 01:21:32,159
says docker exec dash i t ubuntu bash

01:21:29,440 --> 01:21:34,080
and then bash so this is the syntax we

01:21:32,159 --> 01:21:35,920
do docker exec

01:21:34,080 --> 01:21:38,159
which is going to tell it to run a

01:21:35,920 --> 01:21:41,199
particular command

01:21:38,159 --> 01:21:44,239
in that container the dash i t there

01:21:41,199 --> 01:21:45,840
stands for interactive and tty and

01:21:44,239 --> 01:21:49,120
basically this you can think of this

01:21:45,840 --> 01:21:50,960
as um send the output get to an

01:21:49,120 --> 01:21:53,440
interactive one

01:21:50,960 --> 01:21:54,080
session and send the output back to my

01:21:53,440 --> 01:21:56,159
terminal

01:21:54,080 --> 01:21:57,120
okay so think of like interactive

01:21:56,159 --> 01:21:58,639
terminal

01:21:57,120 --> 01:22:00,400
in there send the output back to my

01:21:58,639 --> 01:22:02,800
terminal and then we have

01:22:00,400 --> 01:22:03,760
the bash command on the end the bash

01:22:02,800 --> 01:22:06,639
command on the

01:22:03,760 --> 01:22:08,719
end is the command to run so docker exec

01:22:06,639 --> 01:22:10,560
is telling it to run a command

01:22:08,719 --> 01:22:12,320
in that container in this case we're

01:22:10,560 --> 01:22:13,840
running bash we're saying interactive

01:22:12,320 --> 01:22:16,639
so that will give me a shell then that i

01:22:13,840 --> 01:22:16,639
can type into

01:22:16,719 --> 01:22:20,560
so docker registry we talked about what

01:22:18,639 --> 01:22:23,280
a registry is already

01:22:20,560 --> 01:22:24,400
it's a set of images out there or if

01:22:23,280 --> 01:22:26,880
docker

01:22:24,400 --> 01:22:28,880
placed a repository of docker images you

01:22:26,880 --> 01:22:31,199
can push or pull from them meaning i can

01:22:28,880 --> 01:22:33,679
push to put images into registry

01:22:31,199 --> 01:22:35,360
pull to get images out of it can be

01:22:33,679 --> 01:22:36,480
public or private it can be public like

01:22:35,360 --> 01:22:39,040
the docker hub

01:22:36,480 --> 01:22:40,480
where everybody can get to it it can be

01:22:39,040 --> 01:22:42,880
private like if you have one

01:22:40,480 --> 01:22:44,400
on your own uh inside your company or

01:22:42,880 --> 01:22:45,040
perhaps you have one like we're using

01:22:44,400 --> 01:22:47,520
here

01:22:45,040 --> 01:22:49,199
inside the virtual machine and you see

01:22:47,520 --> 01:22:51,600
an example here of things from the

01:22:49,199 --> 01:22:54,400
docker hub the public docker hub

01:22:51,600 --> 01:22:55,360
lots of examples here of different

01:22:54,400 --> 01:22:58,880
images

01:22:55,360 --> 01:22:59,760
in this case it's for jenkins pieces

01:22:58,880 --> 01:23:02,480
jenkins

01:22:59,760 --> 01:23:04,400
items out here and we have ones that

01:23:02,480 --> 01:23:06,320
have the stars people rate them

01:23:04,400 --> 01:23:07,760
the number of pools they've received and

01:23:06,320 --> 01:23:10,159
so on

01:23:07,760 --> 01:23:12,080
they can be secure or insecure this

01:23:10,159 --> 01:23:13,520
means do they require authentication to

01:23:12,080 --> 01:23:15,280
use or not

01:23:13,520 --> 01:23:18,159
if they require authentication like a

01:23:15,280 --> 01:23:20,080
username or password or something ssh

01:23:18,159 --> 01:23:21,920
they're secure if they don't they're

01:23:20,080 --> 01:23:24,239
insecure the one that we're running on

01:23:21,920 --> 01:23:27,440
our image here is actually insecure

01:23:24,239 --> 01:23:28,880
just for expediency and efficiency

01:23:27,440 --> 01:23:31,280
the public doctor registry is the

01:23:28,880 --> 01:23:33,199
default hub.docker.com

01:23:31,280 --> 01:23:34,400
private registries are hosted at some

01:23:33,199 --> 01:23:36,159
path and port

01:23:34,400 --> 01:23:38,000
and require things to be tagged with

01:23:36,159 --> 01:23:39,040
that which as we talked about we did in

01:23:38,000 --> 01:23:41,520
the first lab

01:23:39,040 --> 01:23:43,199
in order to tell docker that when we

01:23:41,520 --> 01:23:44,719
push or pull one of our images it's

01:23:43,199 --> 01:23:46,400
supposed to go to the registry running

01:23:44,719 --> 01:23:49,440
on localhost 5000

01:23:46,400 --> 01:23:50,159
did you need to have localhost 5000 in

01:23:49,440 --> 01:23:54,400
the name

01:23:50,159 --> 01:23:56,719
of the image docker stop

01:23:54,400 --> 01:23:58,000
is a command to stop the container from

01:23:56,719 --> 01:24:01,520
running

01:23:58,000 --> 01:24:05,040
you can also force it if you need to

01:24:01,520 --> 01:24:08,800
there is docker rm docker rm removes

01:24:05,040 --> 01:24:11,520
containers then there is docker rmi

01:24:08,800 --> 01:24:12,400
the i means images so rm is remove

01:24:11,520 --> 01:24:16,000
containers

01:24:12,400 --> 01:24:17,920
rmi is remove images so that brings us

01:24:16,000 --> 01:24:19,520
up to lab number three debugging docker

01:24:17,920 --> 01:24:21,040
containers as we go through the day

01:24:19,520 --> 01:24:22,080
we'll have periods where we'll kind of

01:24:21,040 --> 01:24:24,800
talk for longer

01:24:22,080 --> 01:24:26,480
have longer periods between the labs and

01:24:24,800 --> 01:24:27,679
periods we have shorter between the labs

01:24:26,480 --> 01:24:31,040
as we get more

01:24:27,679 --> 01:24:32,400
into a particular uh topic so lab number

01:24:31,040 --> 01:24:35,440
three

01:24:32,400 --> 01:24:38,719
switch this to the sharing

01:24:35,440 --> 01:24:38,719
and let's look at

01:24:39,199 --> 01:24:42,400
lab number three

01:24:43,120 --> 01:24:46,960
sorry it's going to scroll down here

01:24:50,719 --> 01:24:54,080
one moment folks

01:24:55,120 --> 01:25:02,400
looking for my here we are

01:24:58,159 --> 01:25:06,800
okay all right lab number three

01:25:02,400 --> 01:25:06,800
sorry too many screens open

01:25:08,080 --> 01:25:12,159
okay so in lab number three here and

01:25:10,800 --> 01:25:14,560
hopefully you can see that

01:25:12,159 --> 01:25:16,080
instead of sharing it all right so in

01:25:14,560 --> 01:25:18,400
lab number three

01:25:16,080 --> 01:25:20,000
we're actually going to go and be

01:25:18,400 --> 01:25:21,360
debugging docker containers

01:25:20,000 --> 01:25:23,679
so if you take a look at lab number

01:25:21,360 --> 01:25:23,679
three

01:25:23,920 --> 01:25:28,239
uh the while the app runs well app is

01:25:26,719 --> 01:25:30,239
running okay here

01:25:28,239 --> 01:25:31,679
we're actually going to do some of these

01:25:30,239 --> 01:25:32,080
commands just to take a look at things

01:25:31,679 --> 01:25:33,360
so we

01:25:32,080 --> 01:25:34,880
don't actually have anything broken

01:25:33,360 --> 01:25:35,920
right now we're just going to run

01:25:34,880 --> 01:25:36,880
through some of these commands to see

01:25:35,920 --> 01:25:38,320
how they work

01:25:36,880 --> 01:25:40,960
we'll take a moment just to do a docker

01:25:38,320 --> 01:25:43,600
inspect inspect the container id

01:25:40,960 --> 01:25:45,360
now this is talking when we say id we're

01:25:43,600 --> 01:25:47,199
talking about the three characters that

01:25:45,360 --> 01:25:49,679
you used in the last lab

01:25:47,199 --> 01:25:51,920
remember when we did that output uh for

01:25:49,679 --> 01:25:54,000
the containers docker ps and we saw the

01:25:51,920 --> 01:25:55,040
took the first three characters of that

01:25:54,000 --> 01:25:56,960
web container

01:25:55,040 --> 01:25:58,080
same thing here this time we should we

01:25:56,960 --> 01:25:59,440
don't grep for any

01:25:58,080 --> 01:26:01,199
ip address we're just going to show you

01:25:59,440 --> 01:26:03,520
all the stuff that's in there we'll do

01:26:01,199 --> 01:26:04,159
docker logs to see the output from the

01:26:03,520 --> 01:26:06,639
tomcat

01:26:04,159 --> 01:26:07,679
piece running we'll do docker history a

01:26:06,639 --> 01:26:10,639
docker ps

01:26:07,679 --> 01:26:12,159
to look to get the one for the raw db so

01:26:10,639 --> 01:26:13,920
we're going to switch now from using the

01:26:12,159 --> 01:26:14,880
web container to using the database

01:26:13,920 --> 01:26:18,239
container

01:26:14,880 --> 01:26:20,480
so do a docker ps prep for the raw db

01:26:18,239 --> 01:26:22,159
and you'll get that hex id again take

01:26:20,480 --> 01:26:23,120
the first three characters of that hex

01:26:22,159 --> 01:26:26,320
id

01:26:23,120 --> 01:26:29,360
and plug it in in step six docker exec

01:26:26,320 --> 01:26:32,560
dash i t the first three characters of

01:26:29,360 --> 01:26:34,080
the database container bash so we're

01:26:32,560 --> 01:26:36,639
actually going to go into

01:26:34,080 --> 01:26:38,239
inside that container in the shell when

01:26:36,639 --> 01:26:38,719
we get in there will be see we'll look

01:26:38,239 --> 01:26:40,960
at

01:26:38,719 --> 01:26:42,480
root at container id in other words

01:26:40,960 --> 01:26:44,560
you'll be logged in as root

01:26:42,480 --> 01:26:46,320
container id in that container we'll

01:26:44,560 --> 01:26:49,199
look at the current directory

01:26:46,320 --> 01:26:50,080
and then we'll start up our mysql so

01:26:49,199 --> 01:26:51,600
this would be the thing

01:26:50,080 --> 01:26:53,280
if we wanted to kind of look at our

01:26:51,600 --> 01:26:57,840
database say for example

01:26:53,280 --> 01:26:59,679
and we realized that we didn't have uh

01:26:57,840 --> 01:27:01,440
check chat window correct window is not

01:26:59,679 --> 01:27:04,000
being shown okay

01:27:01,440 --> 01:27:07,040
let me see if i can stop the share here

01:27:04,000 --> 01:27:07,040
and share this again

01:27:08,639 --> 01:27:11,840
let's try this one

01:27:12,000 --> 01:27:15,120
all right hopefully that fixed it sorry

01:27:13,520 --> 01:27:17,920
about that

01:27:15,120 --> 01:27:19,760
all right so so we went through we got

01:27:17,920 --> 01:27:20,800
into did a brand new inspect the logs

01:27:19,760 --> 01:27:23,920
the history

01:27:20,800 --> 01:27:26,719
and then we did a docker ps to get the

01:27:23,920 --> 01:27:28,800
id of the database container we'll plug

01:27:26,719 --> 01:27:29,520
that in the exec that'll put us into a

01:27:28,800 --> 01:27:32,239
shell

01:27:29,520 --> 01:27:34,000
we'll be root on the container id now

01:27:32,239 --> 01:27:35,360
this step here mysql

01:27:34,000 --> 01:27:37,040
that's actually just connecting to a

01:27:35,360 --> 01:27:38,080
database obviously this is not secure

01:27:37,040 --> 01:27:41,199
but we're doing dash

01:27:38,080 --> 01:27:41,840
user admin password of admin this would

01:27:41,199 --> 01:27:44,560
be

01:27:41,840 --> 01:27:45,679
if i wanted to look at data that i was

01:27:44,560 --> 01:27:46,800
going to be using or work with the

01:27:45,679 --> 01:27:48,800
database

01:27:46,800 --> 01:27:50,239
in my container i could go in and do it

01:27:48,800 --> 01:27:52,000
through the docker exec

01:27:50,239 --> 01:27:53,520
the docker exec doesn't have to run a

01:27:52,000 --> 01:27:54,560
bash shell as we said before it can run

01:27:53,520 --> 01:27:56,639
any command

01:27:54,560 --> 01:27:58,719
that's installed on the container out

01:27:56,639 --> 01:28:00,560
there it could run inside of there

01:27:58,719 --> 01:28:02,320
so then we'll be at the mysql prompt

01:28:00,560 --> 01:28:03,840
because we're connecting up to mysql

01:28:02,320 --> 01:28:04,800
we're inside the container

01:28:03,840 --> 01:28:06,880
we're going to do a couple quick

01:28:04,800 --> 01:28:07,920
commands to show the tables select

01:28:06,880 --> 01:28:10,719
something uh

01:28:07,920 --> 01:28:12,159
run sql command to look at the rows from

01:28:10,719 --> 01:28:14,800
the agents table

01:28:12,159 --> 01:28:16,560
then we'll exit out of mysql we'll exit

01:28:14,800 --> 01:28:17,920
out of the container

01:28:16,560 --> 01:28:19,600
and then we'll go ahead and push our

01:28:17,920 --> 01:28:21,360
images over to registry

01:28:19,600 --> 01:28:23,120
so they'll be ready for kubernetes to

01:28:21,360 --> 01:28:24,320
use so remember i said we're going to

01:28:23,120 --> 01:28:27,040
take this thing from

01:28:24,320 --> 01:28:29,120
building containers to kubernetes cister

01:28:27,040 --> 01:28:31,199
to the whole through the whole path here

01:28:29,120 --> 01:28:32,960
so now what we're going to do is we're

01:28:31,199 --> 01:28:35,199
going to take the images that we have

01:28:32,960 --> 01:28:38,000
built locally

01:28:35,199 --> 01:28:39,840
and push them over into our registry so

01:28:38,000 --> 01:28:41,360
that kubernetes will be able to find

01:28:39,840 --> 01:28:43,199
then we get to the kubernetes part

01:28:41,360 --> 01:28:45,040
that's all we're doing is step 10.

01:28:43,199 --> 01:28:47,280
but again make sure that you are pushing

01:28:45,040 --> 01:28:48,080
over of course the web then database

01:28:47,280 --> 01:28:49,440
once

01:28:48,080 --> 01:28:51,280
and then we're going to go through and

01:28:49,440 --> 01:28:52,320
just stop them just get some practice

01:28:51,280 --> 01:28:54,880
those commands

01:28:52,320 --> 01:28:56,080
stop the running containers remove the

01:28:54,880 --> 01:28:58,639
containers and remove

01:28:56,080 --> 01:29:00,480
the images we can remove the images

01:28:58,639 --> 01:29:02,320
because they're already pushed out there

01:29:00,480 --> 01:29:04,480
now this one

01:29:02,320 --> 01:29:05,760
important point here make sure your push

01:29:04,480 --> 01:29:07,120
goes through before you remove the

01:29:05,760 --> 01:29:08,000
images you want to make sure the images

01:29:07,120 --> 01:29:09,840
are there

01:29:08,000 --> 01:29:11,280
for kubernetes to use so make sure your

01:29:09,840 --> 01:29:13,520
push command works

01:29:11,280 --> 01:29:15,520
then go through and you can do the stop

01:29:13,520 --> 01:29:16,320
the remove and the rmi to remove the

01:29:15,520 --> 01:29:18,159
images

01:29:16,320 --> 01:29:19,600
all right so that's going to be lab

01:29:18,159 --> 01:29:22,239
number three

01:29:19,600 --> 01:29:23,600
uh again a pretty easy little piece here

01:29:22,239 --> 01:29:27,040
i think

01:29:23,600 --> 01:29:30,400
but let's go ahead and take about

01:29:27,040 --> 01:29:32,400
i don't know um we could probably

01:29:30,400 --> 01:29:33,679
take about 10 minutes for this one just

01:29:32,400 --> 01:29:35,280
because you've got to run a couple of

01:29:33,679 --> 01:29:36,480
extra commands in there and stuff

01:29:35,280 --> 01:29:38,400
to give you a little break since we're

01:29:36,480 --> 01:29:39,280
at the top of the hour here let's take

01:29:38,400 --> 01:29:43,040
about uh

01:29:39,280 --> 01:29:45,120
10 minutes here work on lab number

01:29:43,040 --> 01:29:47,120
uh three and then we'll come back and

01:29:45,120 --> 01:29:48,560
pick up with talking about kubernetes

01:29:47,120 --> 01:29:50,560
all right so i'll talk to you in 10.

01:29:48,560 --> 01:29:52,400
we're back folks and thanks colin for

01:29:50,560 --> 01:29:53,840
the pointers there too i mentioned in

01:29:52,400 --> 01:29:55,520
the chat there is a

01:29:53,840 --> 01:29:58,400
setup dock there you can just go to the

01:29:55,520 --> 01:30:00,000
settings uh in virtualbox you can scale

01:29:58,400 --> 01:30:00,960
back the amount of memory the machine's

01:30:00,000 --> 01:30:03,840
taking

01:30:00,960 --> 01:30:04,159
uh cpu and those kinds of things if that

01:30:03,840 --> 01:30:06,480
will

01:30:04,159 --> 01:30:07,920
help with that it is such a probably

01:30:06,480 --> 01:30:09,360
high level because of all the

01:30:07,920 --> 01:30:11,840
applications you're running it

01:30:09,360 --> 01:30:13,440
in it that's also as colin's alluding to

01:30:11,840 --> 01:30:15,440
the reason i haven't done it inside of a

01:30:13,440 --> 01:30:17,679
docker thing there's a lot of

01:30:15,440 --> 01:30:18,800
things going on in there and until

01:30:17,679 --> 01:30:21,920
recently like the

01:30:18,800 --> 01:30:23,360
kind stuff kubernetes and docker and k3s

01:30:21,920 --> 01:30:26,320
and those kinds of things

01:30:23,360 --> 01:30:28,239
hasn't really been a a great option for

01:30:26,320 --> 01:30:31,360
that and i haven't

01:30:28,239 --> 01:30:32,719
spent a lot of time looking at that

01:30:31,360 --> 01:30:35,280
option in there but it may be something

01:30:32,719 --> 01:30:38,080
to consider for the future depending on

01:30:35,280 --> 01:30:39,040
how big and how complex these things are

01:30:38,080 --> 01:30:41,520
from what i've read

01:30:39,040 --> 01:30:43,920
is that some of these docker solutions

01:30:41,520 --> 01:30:45,760
can take even more space

01:30:43,920 --> 01:30:47,679
in some cases than other things it's

01:30:45,760 --> 01:30:50,960
possible but anyway

01:30:47,679 --> 01:30:52,320
let's we'll go ahead and jump back into

01:30:50,960 --> 01:30:54,880
oh let's see i do have a couple

01:30:52,320 --> 01:30:57,120
questions here

01:30:54,880 --> 01:30:59,040
uh timestamp shown in docker logs isn't

01:30:57,120 --> 01:31:02,960
close to current time

01:30:59,040 --> 01:31:05,600
uh start up at 437

01:31:02,960 --> 01:31:07,600
data source attempting to use jdbc uh

01:31:05,600 --> 01:31:10,639
the time settings i think this one may

01:31:07,600 --> 01:31:13,360
be actually on a different time zone

01:31:10,639 --> 01:31:14,800
than what i had here for the others and

01:31:13,360 --> 01:31:16,080
time zone settings

01:31:14,800 --> 01:31:17,760
may be different inside of the

01:31:16,080 --> 01:31:18,880
containers as well we have to have to

01:31:17,760 --> 01:31:21,600
look at that

01:31:18,880 --> 01:31:23,040
and see what the time zone settings are

01:31:21,600 --> 01:31:25,199
for

01:31:23,040 --> 01:31:26,639
in there i had an issue with lab3 where

01:31:25,199 --> 01:31:28,080
the local docker retreat wasn't running

01:31:26,639 --> 01:31:30,320
for whatever reason fixed it by running

01:31:28,080 --> 01:31:32,000
sudo mini cube update context

01:31:30,320 --> 01:31:34,080
mini cube start not sure if this is the

01:31:32,000 --> 01:31:37,120
right thing to do but it seemed to work

01:31:34,080 --> 01:31:37,920
yeah you can restart so you should have

01:31:37,120 --> 01:31:40,480
when you're logged in

01:31:37,920 --> 01:31:42,560
sudo access this machine inside the

01:31:40,480 --> 01:31:43,679
troubleshooting dock itself there is a

01:31:42,560 --> 01:31:45,510
command

01:31:43,679 --> 01:31:47,120
to restart

01:31:45,510 --> 01:31:49,199
[Music]

01:31:47,120 --> 01:31:50,480
to restart minicube if you have problems

01:31:49,199 --> 01:31:52,239
with that

01:31:50,480 --> 01:31:53,920
there's also if you want to do docker

01:31:52,239 --> 01:31:57,360
you should be able to

01:31:53,920 --> 01:31:59,760
do sudo via system start docker

01:31:57,360 --> 01:32:01,199
to restart to start docker or demon from

01:31:59,760 --> 01:32:01,840
running on there if something happens

01:32:01,199 --> 01:32:03,600
with that

01:32:01,840 --> 01:32:05,120
so you should have pseudo access inside

01:32:03,600 --> 01:32:06,880
of the vm to

01:32:05,120 --> 01:32:08,800
restart anything that you need to in

01:32:06,880 --> 01:32:11,040
there um

01:32:08,800 --> 01:32:12,000
getting a docker push command push

01:32:11,040 --> 01:32:16,639
reverse repository

01:32:12,000 --> 01:32:20,080
local host 5000 ror web

01:32:16,639 --> 01:32:22,960
v1 get v2

01:32:20,080 --> 01:32:25,120
connection refused uh ben you might need

01:32:22,960 --> 01:32:28,080
to check and make sure you still got

01:32:25,120 --> 01:32:29,840
the internet connectivity there there is

01:32:28,080 --> 01:32:30,719
a little icon up and down arrow up and

01:32:29,840 --> 01:32:33,840
down arrows

01:32:30,719 --> 01:32:37,120
up on the right hand side of

01:32:33,840 --> 01:32:38,239
the desktop that has that you can click

01:32:37,120 --> 01:32:40,320
to

01:32:38,239 --> 01:32:41,679
reconnect if you need to there's also

01:32:40,320 --> 01:32:43,760
information about that in the

01:32:41,679 --> 01:32:46,960
troubleshooting dock but probably

01:32:43,760 --> 01:32:48,880
uh that might be either because the

01:32:46,960 --> 01:32:50,560
registry isn't running or because of

01:32:48,880 --> 01:32:52,800
internet connectivity in there

01:32:50,560 --> 01:32:55,040
again there's commands to restart

01:32:52,800 --> 01:32:57,199
kubernetes if you need to

01:32:55,040 --> 01:33:00,239
uh in there but maybe try to make sure

01:32:57,199 --> 01:33:01,840
you've got the connectivity first

01:33:00,239 --> 01:33:03,360
yeah let's see i'll go ahead and it was

01:33:01,840 --> 01:33:04,960
tough

01:33:03,360 --> 01:33:06,239
that happens a lot when the doctor damon

01:33:04,960 --> 01:33:07,920
isn't running that's usually the first

01:33:06,239 --> 01:33:09,120
step to check sometimes the damage can

01:33:07,920 --> 01:33:10,480
crash

01:33:09,120 --> 01:33:11,600
but if the damage is not running then it

01:33:10,480 --> 01:33:12,560
won't be able to access the local

01:33:11,600 --> 01:33:14,239
registry either

01:33:12,560 --> 01:33:16,320
but that's the first thing i'd check on

01:33:14,239 --> 01:33:18,880
that but ben's been having

01:33:16,320 --> 01:33:20,000
trouble in particular with i think he

01:33:18,880 --> 01:33:22,719
started a new terminal

01:33:20,000 --> 01:33:23,120
and then was able to connect to docker

01:33:22,719 --> 01:33:25,120
after

01:33:23,120 --> 01:33:27,360
running okay so it might be related to

01:33:25,120 --> 01:33:29,600
that okay

01:33:27,360 --> 01:33:32,320
uh crystal says when i give the password

01:33:29,600 --> 01:33:35,600
and user of my sql it says access denied

01:33:32,320 --> 01:33:37,840
that's you admin pman

01:33:35,600 --> 01:33:41,360
crystal if that's the exact command you

01:33:37,840 --> 01:33:43,600
tried uh i think we've got

01:33:41,360 --> 01:33:45,520
registry spelled wrong in there so maybe

01:33:43,600 --> 01:33:47,360
double check the spelling of registry

01:33:45,520 --> 01:33:50,719
i think there's an extra s in there in

01:33:47,360 --> 01:33:53,199
the front

01:33:50,719 --> 01:33:54,560
okay uh all right i think that's good i

01:33:53,199 --> 01:33:56,000
think that's the questions i see right

01:33:54,560 --> 01:34:00,639
now let's go ahead

01:33:56,000 --> 01:34:00,639
and jump back into our presentation

01:34:03,600 --> 01:34:08,639
all right so we've talked about docker

01:34:06,400 --> 01:34:11,040
containers and you probably your your

01:34:08,639 --> 01:34:14,239
brain may be full at this point of uh

01:34:11,040 --> 01:34:16,639
container stuff trying to

01:34:14,239 --> 01:34:19,120
keep all of that straight but let's move

01:34:16,639 --> 01:34:21,679
on to talking about kubernetes now

01:34:19,120 --> 01:34:23,440
so as we said it's rare that you have an

01:34:21,679 --> 01:34:25,840
application it's a single container or

01:34:23,440 --> 01:34:28,960
even just a few containers these days

01:34:25,840 --> 01:34:32,080
so you really need some way to manage

01:34:28,960 --> 01:34:32,960
large groups of containers and not only

01:34:32,080 --> 01:34:35,360
manage them

01:34:32,960 --> 01:34:36,800
um in terms of deploying them but also

01:34:35,360 --> 01:34:39,120
over life cycles

01:34:36,800 --> 01:34:40,960
like being able to restart them if

01:34:39,120 --> 01:34:42,080
needed or being able to scale them

01:34:40,960 --> 01:34:44,080
expand more

01:34:42,080 --> 01:34:46,080
and so forth so this is where kubernetes

01:34:44,080 --> 01:34:48,000
comes in kubernetes

01:34:46,080 --> 01:34:49,840
is a portable extensible platform for

01:34:48,000 --> 01:34:50,639
managing containerized workloads and

01:34:49,840 --> 01:34:52,480
services

01:34:50,639 --> 01:34:55,040
basically it's a cluster orchestration

01:34:52,480 --> 01:34:57,040
system it comes the name comes from

01:34:55,040 --> 01:34:58,560
greek for helmsman thus the icon the

01:34:57,040 --> 01:35:01,920
shipped will out there

01:34:58,560 --> 01:35:04,159
frequently abbreviated as kate's or k8s

01:35:01,920 --> 01:35:05,280
the eight standing for the eight letters

01:35:04,159 --> 01:35:07,760
between the k

01:35:05,280 --> 01:35:09,600
and s this seems to be a bit of a trend

01:35:07,760 --> 01:35:10,320
uh in some of the open source circles

01:35:09,600 --> 01:35:12,840
now

01:35:10,320 --> 01:35:15,760
uh with thing it seemed like a large one

01:35:12,840 --> 01:35:18,960
internationalization is i 18n

01:35:15,760 --> 01:35:20,639
localization elton in uh my favorite one

01:35:18,960 --> 01:35:23,760
has been

01:35:20,639 --> 01:35:25,440
observability abbreviated as o11y or

01:35:23,760 --> 01:35:27,199
ollie as they call it

01:35:25,440 --> 01:35:29,199
so oh it looks like a o l o y that's

01:35:27,199 --> 01:35:31,679
0-11 why so kate's just sometimes your

01:35:29,199 --> 01:35:34,960
kubernetes referred to as kate's

01:35:31,679 --> 01:35:37,280
because of the k-8s formerly known as

01:35:34,960 --> 01:35:38,239
borg star track reference there for

01:35:37,280 --> 01:35:40,560
anybody's watch that

01:35:38,239 --> 01:35:42,320
an internal google project kubernetes

01:35:40,560 --> 01:35:44,320
was a google project before it was open

01:35:42,320 --> 01:35:45,920
source of 2014

01:35:44,320 --> 01:35:47,920
and what it does it groups containers

01:35:45,920 --> 01:35:51,440
that make up applications

01:35:47,920 --> 01:35:54,960
into logical units for easy management

01:35:51,440 --> 01:35:57,119
over life cycles and discovery

01:35:54,960 --> 01:35:58,480
its goal is to provide a robust platform

01:35:57,119 --> 01:36:00,560
for running many containers

01:35:58,480 --> 01:36:02,400
automation deployment automates

01:36:00,560 --> 01:36:05,119
deployment scaling

01:36:02,400 --> 01:36:06,960
uh provides you the framework takes care

01:36:05,119 --> 01:36:08,400
of scaling requirements failover

01:36:06,960 --> 01:36:09,840
deployment patterns

01:36:08,400 --> 01:36:12,080
so how do we think about this kind of

01:36:09,840 --> 01:36:13,199
another analogy that may or may not be

01:36:12,080 --> 01:36:15,199
useful to you

01:36:13,199 --> 01:36:17,520
that i use for people is talking about

01:36:15,199 --> 01:36:19,679
as a data center for containers

01:36:17,520 --> 01:36:21,679
if you think about what a function of a

01:36:19,679 --> 01:36:22,480
data center is maybe a data center at

01:36:21,679 --> 01:36:25,199
your company

01:36:22,480 --> 01:36:26,800
or even some of the data centers around

01:36:25,199 --> 01:36:29,679
the world for things like google and

01:36:26,800 --> 01:36:29,679
amazon and such

01:36:30,159 --> 01:36:33,840
we think of images containers as being

01:36:31,840 --> 01:36:35,440
like computers that we stage and use we

01:36:33,840 --> 01:36:36,960
can think of kubernetes

01:36:35,440 --> 01:36:38,480
as being like a data center for those

01:36:36,960 --> 01:36:40,560
containers because

01:36:38,480 --> 01:36:42,719
the main jobs of a data center are

01:36:40,560 --> 01:36:43,360
things like providing systems to service

01:36:42,719 --> 01:36:45,760
needs

01:36:43,360 --> 01:36:47,600
regardless of the applications all right

01:36:45,760 --> 01:36:48,320
then we produce containers to service

01:36:47,600 --> 01:36:51,199
things

01:36:48,320 --> 01:36:52,719
out there keep systems up and running if

01:36:51,199 --> 01:36:54,800
if a com

01:36:52,719 --> 01:36:56,400
a system in a data center goes down

01:36:54,800 --> 01:36:57,280
there's an operator typically or

01:36:56,400 --> 01:36:59,920
somebody

01:36:57,280 --> 01:37:01,679
who is support who will come and check

01:36:59,920 --> 01:37:02,159
on that system and may just replace it

01:37:01,679 --> 01:37:04,480
or fix

01:37:02,159 --> 01:37:06,960
it add more systems remove systems

01:37:04,480 --> 01:37:08,400
depending on load the typical example

01:37:06,960 --> 01:37:10,639
for this kind of thing

01:37:08,400 --> 01:37:12,000
is if you are a retail company retail

01:37:10,639 --> 01:37:15,520
store for example

01:37:12,000 --> 01:37:17,920
and you are heading into the holiday

01:37:15,520 --> 01:37:19,199
season the christmas season for example

01:37:17,920 --> 01:37:21,440
and you know people are going to be

01:37:19,199 --> 01:37:24,080
buying more you might scale up you might

01:37:21,440 --> 01:37:26,719
add more systems to handle the load

01:37:24,080 --> 01:37:28,000
coming in there and then when you get

01:37:26,719 --> 01:37:30,000
past the holidays

01:37:28,000 --> 01:37:31,760
you may want to remove some systems

01:37:30,000 --> 01:37:33,199
because you don't need that much anymore

01:37:31,760 --> 01:37:36,320
and also you don't want to have to pay

01:37:33,199 --> 01:37:37,280
for all the resources those systems are

01:37:36,320 --> 01:37:39,040
using

01:37:37,280 --> 01:37:40,719
so the other function is to deal with

01:37:39,040 --> 01:37:42,320
systems that are having problems like we

01:37:40,719 --> 01:37:44,080
said keeping them up and running

01:37:42,320 --> 01:37:46,080
deploying new systems when needed you

01:37:44,080 --> 01:37:48,080
have a new application you want to put

01:37:46,080 --> 01:37:50,239
new systems out there to handle it and

01:37:48,080 --> 01:37:52,639
also providing simple access to pools of

01:37:50,239 --> 01:37:54,560
systems you think of like a login server

01:37:52,639 --> 01:37:56,000
to log in and check any of the machines

01:37:54,560 --> 01:37:56,560
out there they don't all have a front

01:37:56,000 --> 01:37:58,239
end

01:37:56,560 --> 01:37:59,600
but typically there is some front end

01:37:58,239 --> 01:38:01,600
somewhere where you can connect to

01:37:59,600 --> 01:38:04,800
different ones on the back end

01:38:01,600 --> 01:38:07,119
so that same idea can apply to uh

01:38:04,800 --> 01:38:08,880
using containers within kubernetes and

01:38:07,119 --> 01:38:11,440
we'll explore more of that

01:38:08,880 --> 01:38:13,440
a bit later but kubernetes is everywhere

01:38:11,440 --> 01:38:14,800
these days it's effectively won the war

01:38:13,440 --> 01:38:16,400
over other competitors things like

01:38:14,800 --> 01:38:17,600
docker swarm we mentioned before

01:38:16,400 --> 01:38:20,400
docker's

01:38:17,600 --> 01:38:22,480
foray into managing lots of containers

01:38:20,400 --> 01:38:23,840
mesos was another one that was popular

01:38:22,480 --> 01:38:26,000
for a while

01:38:23,840 --> 01:38:27,679
cloud providers all endorse kubernetes

01:38:26,000 --> 01:38:29,360
and provide ways to get a kubernetes

01:38:27,679 --> 01:38:32,800
cluster what we mean by that

01:38:29,360 --> 01:38:33,600
is that if you go to google or amazon or

01:38:32,800 --> 01:38:35,600
azure

01:38:33,600 --> 01:38:37,520
you will have a kubernetes service as

01:38:35,600 --> 01:38:39,040
one of the kinds of options or services

01:38:37,520 --> 01:38:41,199
you can get

01:38:39,040 --> 01:38:42,960
amazon's is the elastic kubernetes

01:38:41,199 --> 01:38:45,040
service your eks

01:38:42,960 --> 01:38:46,400
google's is the google kubernetes engine

01:38:45,040 --> 01:38:49,280
or gke

01:38:46,400 --> 01:38:50,320
azure's is the aks or azure kubernetes

01:38:49,280 --> 01:38:52,080
service so

01:38:50,320 --> 01:38:53,440
you'll have each one of the main cloud

01:38:52,080 --> 01:38:56,840
vendors uh

01:38:53,440 --> 01:38:59,280
recognizes and provides a ready-made or

01:38:56,840 --> 01:39:02,000
configurable kubernetes environments

01:38:59,280 --> 01:39:04,000
for you to use as well things like

01:39:02,000 --> 01:39:06,159
enterprise level things that run inside

01:39:04,000 --> 01:39:08,320
the enterprise inside your company

01:39:06,159 --> 01:39:10,719
using things like red hat open shift

01:39:08,320 --> 01:39:14,400
open shift is red hat's

01:39:10,719 --> 01:39:16,560
offering in here it is kubernetes

01:39:14,400 --> 01:39:18,880
their kubernetes version with some added

01:39:16,560 --> 01:39:20,639
functionality from them

01:39:18,880 --> 01:39:22,159
kubernetes features we've mentioned a

01:39:20,639 --> 01:39:23,920
couple of these self-disservice

01:39:22,159 --> 01:39:26,560
discovery load balancing

01:39:23,920 --> 01:39:27,440
rollouts and rollbacks automated storage

01:39:26,560 --> 01:39:30,320
orchestration

01:39:27,440 --> 01:39:32,320
batch execution self-healing if

01:39:30,320 --> 01:39:34,480
something goes bad it goes down it can

01:39:32,320 --> 01:39:36,159
restart it it can bring up another one

01:39:34,480 --> 01:39:38,400
secrets and configuration management

01:39:36,159 --> 01:39:40,960
we'll talk about secrets and configures

01:39:38,400 --> 01:39:42,400
configuration or config maps as types of

01:39:40,960 --> 01:39:45,440
kubernetes objects

01:39:42,400 --> 01:39:47,040
really these are ways to uh separate out

01:39:45,440 --> 01:39:48,480
things like the environment variables

01:39:47,040 --> 01:39:51,280
that we saw earlier

01:39:48,480 --> 01:39:53,040
in that definition for mysql separate

01:39:51,280 --> 01:39:55,920
them out into their own objects

01:39:53,040 --> 01:39:58,880
uh config maps are holding you know key

01:39:55,920 --> 01:40:02,159
value stores or setting values in there

01:39:58,880 --> 01:40:02,480
secrets are obfuscating kind of hiding

01:40:02,159 --> 01:40:04,560
the

01:40:02,480 --> 01:40:05,760
pla keeping things from being shown in

01:40:04,560 --> 01:40:07,520
plain text

01:40:05,760 --> 01:40:09,760
and horizontal scaling being able to

01:40:07,520 --> 01:40:11,600
scale based on the desired amount of cpu

01:40:09,760 --> 01:40:13,760
usage those kinds of things

01:40:11,600 --> 01:40:14,960
automatic bin packing bin packing here

01:40:13,760 --> 01:40:17,040
refers to

01:40:14,960 --> 01:40:19,119
how do we fit the containers onto the

01:40:17,040 --> 01:40:21,520
kubernetes nodes that are running them

01:40:19,119 --> 01:40:23,040
how do we best uh the best kind of fit

01:40:21,520 --> 01:40:26,320
the puzzle pieces together

01:40:23,040 --> 01:40:28,080
to make things fit onto the system so we

01:40:26,320 --> 01:40:29,679
have a number of features in there and

01:40:28,080 --> 01:40:31,040
then we have terminology that we need to

01:40:29,679 --> 01:40:32,000
start to get familiar with around

01:40:31,040 --> 01:40:34,719
kubernetes

01:40:32,000 --> 01:40:36,480
a cluster is an h a set of computers

01:40:34,719 --> 01:40:37,280
coordinated by kubernetes to work as a

01:40:36,480 --> 01:40:39,199
unit

01:40:37,280 --> 01:40:40,480
what we mean by that aha here is high

01:40:39,199 --> 01:40:42,480
availability

01:40:40,480 --> 01:40:44,000
typically meaning it has failover it has

01:40:42,480 --> 01:40:46,560
some kind of recovery

01:40:44,000 --> 01:40:48,400
if something goes down instead of

01:40:46,560 --> 01:40:50,719
computers that could simply be either

01:40:48,400 --> 01:40:52,560
virtual machines like we're using in the

01:40:50,719 --> 01:40:53,679
class it could be physical machines out

01:40:52,560 --> 01:40:55,199
there

01:40:53,679 --> 01:40:56,880
these they're just a set of machines

01:40:55,199 --> 01:40:57,840
coordinated by kubernetes to work

01:40:56,880 --> 01:41:00,080
together

01:40:57,840 --> 01:41:01,920
typically there is a master node or a

01:41:00,080 --> 01:41:03,920
main node and then there's the worker

01:41:01,920 --> 01:41:06,719
nodes that help it out

01:41:03,920 --> 01:41:07,679
there are there are pods and kubernetes

01:41:06,719 --> 01:41:09,440
pods are

01:41:07,679 --> 01:41:11,520
objects that contain and manage one or

01:41:09,440 --> 01:41:13,040
more containers any attached volumes

01:41:11,520 --> 01:41:14,639
so we've been talking about things at

01:41:13,040 --> 01:41:16,400
the level of containers we talked about

01:41:14,639 --> 01:41:19,600
the mysql container

01:41:16,400 --> 01:41:21,760
and the the web container out there

01:41:19,600 --> 01:41:23,679
but in kubernetes pretty much the lowest

01:41:21,760 --> 01:41:25,040
level that it concerns itself with is

01:41:23,679 --> 01:41:27,440
something called a pod

01:41:25,040 --> 01:41:28,400
and a pod wraps around one or more

01:41:27,440 --> 01:41:30,000
containers

01:41:28,400 --> 01:41:31,600
it can also have a container it could

01:41:30,000 --> 01:41:34,239
have attached storage

01:41:31,600 --> 01:41:34,960
that the containers can share out there

01:41:34,239 --> 01:41:37,280
so can

01:41:34,960 --> 01:41:38,560
pods are wrapping around containers now

01:41:37,280 --> 01:41:40,320
if you think about it

01:41:38,560 --> 01:41:42,000
kind of from the terminology standpoint

01:41:40,320 --> 01:41:44,639
one way to help you remember it

01:41:42,000 --> 01:41:45,679
we saw that the uh the mascot or the

01:41:44,639 --> 01:41:48,400
emblem for

01:41:45,679 --> 01:41:50,000
a docker container was that whale well

01:41:48,400 --> 01:41:53,119
what's a group of whales called

01:41:50,000 --> 01:41:55,440
a pod right so a pod a group of wells or

01:41:53,119 --> 01:41:58,639
a group of containers in there

01:41:55,440 --> 01:42:00,000
service is a way to group together pods

01:41:58,639 --> 01:42:02,800
and provide a single

01:42:00,000 --> 01:42:04,960
interface to them kind of like the idea

01:42:02,800 --> 01:42:06,400
of the login system we mentioned where

01:42:04,960 --> 01:42:08,719
you're able to go in through

01:42:06,400 --> 01:42:10,719
one interface and get to a number of

01:42:08,719 --> 01:42:14,239
things on the back end

01:42:10,719 --> 01:42:16,960
deployment defines a pod and also

01:42:14,239 --> 01:42:18,800
a number of replicas by replicas we mean

01:42:16,960 --> 01:42:21,119
how many of these should we have

01:42:18,800 --> 01:42:22,320
do we need two of these or do we need

01:42:21,119 --> 01:42:24,320
five of these

01:42:22,320 --> 01:42:26,400
a pod being a wraparound container how

01:42:24,320 --> 01:42:28,320
many pods do we need out there

01:42:26,400 --> 01:42:30,560
an ingress is just a resource that lets

01:42:28,320 --> 01:42:32,639
the cluster applications be exposed

01:42:30,560 --> 01:42:34,960
to the external traffic and then

01:42:32,639 --> 01:42:36,400
namespace is just a logical way to group

01:42:34,960 --> 01:42:37,600
these things together

01:42:36,400 --> 01:42:39,600
we're going to get more familiar with

01:42:37,600 --> 01:42:42,239
these as we go along but that's the kind

01:42:39,600 --> 01:42:44,080
of the basic uh

01:42:42,239 --> 01:42:46,080
functionality or the basic terms we need

01:42:44,080 --> 01:42:48,880
to be familiar with

01:42:46,080 --> 01:42:50,560
so back up a little bit here talking

01:42:48,880 --> 01:42:52,480
about the clusters a little bit more in

01:42:50,560 --> 01:42:54,560
depth of that again a cluster is a high

01:42:52,480 --> 01:42:56,880
availability set of computers

01:42:54,560 --> 01:42:58,560
virtual machines or physical machines

01:42:56,880 --> 01:43:00,320
that are coordinated by kubernetes to

01:42:58,560 --> 01:43:02,960
work together

01:43:00,320 --> 01:43:05,679
we can deploy things onto the cluster

01:43:02,960 --> 01:43:07,520
without tying them to specific host

01:43:05,679 --> 01:43:09,440
we can actually have the cluster take

01:43:07,520 --> 01:43:10,000
care of deciding where to deploy these

01:43:09,440 --> 01:43:12,960
how to run

01:43:10,000 --> 01:43:14,719
them those kinds of things kubernetes

01:43:12,960 --> 01:43:16,639
automates distribution and scheduling of

01:43:14,719 --> 01:43:17,840
containers across the cluster the most

01:43:16,639 --> 01:43:19,679
efficient way

01:43:17,840 --> 01:43:21,040
you have the master which coordinates

01:43:19,679 --> 01:43:22,239
the work and the nodes to run the

01:43:21,040 --> 01:43:25,119
application

01:43:22,239 --> 01:43:26,960
the simplest kind of a what is example

01:43:25,119 --> 01:43:28,719
is a one-node cluster

01:43:26,960 --> 01:43:30,560
such as minicube which is what we're

01:43:28,719 --> 01:43:32,639
using in this workshop

01:43:30,560 --> 01:43:35,679
minicube's just a simple program which

01:43:32,639 --> 01:43:37,679
is simply a one node kubernetes cluster

01:43:35,679 --> 01:43:38,880
creates a vm local machine deploys a

01:43:37,679 --> 01:43:40,960
cluster in

01:43:38,880 --> 01:43:43,040
out there with one node has a command

01:43:40,960 --> 01:43:43,840
line interface for minicube itself to

01:43:43,040 --> 01:43:45,920
start and stop

01:43:43,840 --> 01:43:49,040
it otherwise it behaves like standard

01:43:45,920 --> 01:43:50,400
kubernetes it's a great learning tool

01:43:49,040 --> 01:43:52,719
if you want to take a look at what's in

01:43:50,400 --> 01:43:54,560
a cluster here's a visual on the screen

01:43:52,719 --> 01:43:56,560
showing the different elements of it to

01:43:54,560 --> 01:43:58,960
kind of give you the overall picture

01:43:56,560 --> 01:44:00,800
of how a cluster is organized as we said

01:43:58,960 --> 01:44:02,239
we have the master node to coordinate

01:44:00,800 --> 01:44:03,520
things and we have the worker nodes

01:44:02,239 --> 01:44:06,800
which help

01:44:03,520 --> 01:44:09,920
with the work itself so we have then in

01:44:06,800 --> 01:44:11,280
the master node whoops

01:44:09,920 --> 01:44:14,880
sorry i'm kind of going a little bit

01:44:11,280 --> 01:44:17,360
ahead here we have an api server

01:44:14,880 --> 01:44:18,560
so kubernetes is you're working with

01:44:17,360 --> 01:44:21,920
kubernetes

01:44:18,560 --> 01:44:24,239
at other than like the command line face

01:44:21,920 --> 01:44:26,000
it's all going through apis there's api

01:44:24,239 --> 01:44:28,639
interface to do that there's api

01:44:26,000 --> 01:44:30,560
versions you specify in the files that

01:44:28,639 --> 01:44:31,600
you give it to tell it what api version

01:44:30,560 --> 01:44:34,320
you want to work with

01:44:31,600 --> 01:44:36,080
but there's an api server then there is

01:44:34,320 --> 01:44:39,760
the command line interface

01:44:36,080 --> 01:44:41,360
the command line interface is cube ctl

01:44:39,760 --> 01:44:43,520
for cube control or i've heard it

01:44:41,360 --> 01:44:46,880
pronounced cube cuttle like with the t

01:44:43,520 --> 01:44:48,400
or cube cuddle with a d uh but his cube

01:44:46,880 --> 01:44:50,320
cuddle is typically the way i hear it a

01:44:48,400 --> 01:44:51,040
lot so we'll use that you can pick one

01:44:50,320 --> 01:44:53,600
of them

01:44:51,040 --> 01:44:55,040
uh cube control but basically it's a

01:44:53,600 --> 01:44:57,440
command line interface

01:44:55,040 --> 01:44:58,320
that command line interface then needs

01:44:57,440 --> 01:45:00,880
to know

01:44:58,320 --> 01:45:02,000
which cluster to work with the way it

01:45:00,880 --> 01:45:04,719
knows which cluster to work

01:45:02,000 --> 01:45:07,199
with is by a cube config file the cube

01:45:04,719 --> 01:45:08,480
config file specifies information and

01:45:07,199 --> 01:45:10,080
settings to tell it

01:45:08,480 --> 01:45:12,159
which cluster to work with and some

01:45:10,080 --> 01:45:14,080
other information so the command line

01:45:12,159 --> 01:45:16,480
looks at the cube control file until

01:45:14,080 --> 01:45:19,360
it's to work with that particular

01:45:16,480 --> 01:45:20,320
kubernetes uh cluster and that api

01:45:19,360 --> 01:45:21,840
interface

01:45:20,320 --> 01:45:23,920
so when you're working as a user you

01:45:21,840 --> 01:45:26,239
work through cube control

01:45:23,920 --> 01:45:27,440
uh and then talk to the kubernetes uh

01:45:26,239 --> 01:45:29,760
api enter

01:45:27,440 --> 01:45:30,480
cube control talks or cube cuddle talks

01:45:29,760 --> 01:45:33,679
to the api

01:45:30,480 --> 01:45:35,920
interface or api server in the cluster

01:45:33,679 --> 01:45:37,119
now you can if you were programming if

01:45:35,920 --> 01:45:38,560
you're writing programs

01:45:37,119 --> 01:45:40,639
you can write programs and talk to the

01:45:38,560 --> 01:45:42,400
api directly most the time you're going

01:45:40,639 --> 01:45:44,320
to be working through the cube cuddle

01:45:42,400 --> 01:45:46,560
command line

01:45:44,320 --> 01:45:50,000
on the worker node you have the cubelet

01:45:46,560 --> 01:45:52,080
cubelet think of it as the agent program

01:45:50,000 --> 01:45:53,040
that is going to allow it to talk back

01:45:52,080 --> 01:45:56,239
to the api

01:45:53,040 --> 01:45:58,719
server and carry out things on behalf of

01:45:56,239 --> 01:46:00,400
the master node there so the cubelet is

01:45:58,719 --> 01:46:02,800
the agent on there

01:46:00,400 --> 01:46:04,719
we have a component called scds which is

01:46:02,800 --> 01:46:05,600
basically a key value store keeping

01:46:04,719 --> 01:46:07,840
track of

01:46:05,600 --> 01:46:08,800
some information keys and values for it

01:46:07,840 --> 01:46:10,320
then we have what's called the

01:46:08,800 --> 01:46:13,600
controller manager

01:46:10,320 --> 01:46:15,520
so kubernetes uses controllers to help

01:46:13,600 --> 01:46:17,520
make sure that what you ask for what you

01:46:15,520 --> 01:46:19,679
tell it you want is what you get

01:46:17,520 --> 01:46:21,520
in the cluster and we'll look more at

01:46:19,679 --> 01:46:22,560
examples of these as we go along but the

01:46:21,520 --> 01:46:26,000
basic idea

01:46:22,560 --> 01:46:29,280
is i'm supplying asking for what i

01:46:26,000 --> 01:46:32,320
want in terms of the

01:46:29,280 --> 01:46:34,080
yaml files in there that i supply in and

01:46:32,320 --> 01:46:38,000
then i will go ahead

01:46:34,080 --> 01:46:39,280
and tell it what i want and kubernetes

01:46:38,000 --> 01:46:40,159
will run this control this

01:46:39,280 --> 01:46:42,560
reconciliation

01:46:40,159 --> 01:46:44,320
loop we call it to say you asked me for

01:46:42,560 --> 01:46:46,239
one of these it looks like this

01:46:44,320 --> 01:46:48,480
all right i'm going to go create one in

01:46:46,239 --> 01:46:50,000
the cluster for you

01:46:48,480 --> 01:46:51,679
so when we look at this then we have a

01:46:50,000 --> 01:46:54,480
scheduler we have a scheduler which is

01:46:51,679 --> 01:46:57,119
responsible for scheduling the

01:46:54,480 --> 01:46:58,000
uh things to run on the various worker

01:46:57,119 --> 01:47:00,639
nodes

01:46:58,000 --> 01:47:01,520
we have then docker or some other

01:47:00,639 --> 01:47:03,920
application

01:47:01,520 --> 01:47:05,840
that can create images and spin up

01:47:03,920 --> 01:47:06,800
container that can spin up containers i

01:47:05,840 --> 01:47:09,440
should say

01:47:06,800 --> 01:47:11,440
from the images so even though we are

01:47:09,440 --> 01:47:11,760
working at kubernetes here kubernetes is

01:47:11,440 --> 01:47:14,159
about

01:47:11,760 --> 01:47:14,880
managing containers running containers

01:47:14,159 --> 01:47:17,119
for us

01:47:14,880 --> 01:47:19,440
so docker or something like docker has

01:47:17,119 --> 01:47:21,760
to be able to be there to create

01:47:19,440 --> 01:47:22,800
the images from it and just as we did in

01:47:21,760 --> 01:47:24,960
our class regard

01:47:22,800 --> 01:47:27,840
earlier we go to the image registry we

01:47:24,960 --> 01:47:30,639
get the image we spin up a container

01:47:27,840 --> 01:47:32,719
the containers themselves are stored in

01:47:30,639 --> 01:47:34,239
pods or managed in pods

01:47:32,719 --> 01:47:36,080
pods again think of that like kind of

01:47:34,239 --> 01:47:36,560
like the group of whales where a well is

01:47:36,080 --> 01:47:39,520
like

01:47:36,560 --> 01:47:39,920
the symbol for a container and then pods

01:47:39,520 --> 01:47:41,679
have

01:47:39,920 --> 01:47:43,280
storage they can have a little storage

01:47:41,679 --> 01:47:44,880
pieces you could have one or more

01:47:43,280 --> 01:47:46,880
containers per pod

01:47:44,880 --> 01:47:48,560
so worker knows would be running things

01:47:46,880 --> 01:47:50,560
on the applications inside the

01:47:48,560 --> 01:47:52,960
containers inside pods

01:47:50,560 --> 01:47:54,400
the other piece we have on a worker node

01:47:52,960 --> 01:47:56,000
is a cube proxy

01:47:54,400 --> 01:47:57,679
which is simply a way anytime you hear

01:47:56,000 --> 01:47:58,880
proxy you think about communication or

01:47:57,679 --> 01:48:00,960
traffic

01:47:58,880 --> 01:48:02,719
coming into it this is simply a way to

01:48:00,960 --> 01:48:05,199
let us talk to

01:48:02,719 --> 01:48:06,960
applications or get to applications on

01:48:05,199 --> 01:48:09,920
running on the worker nodes

01:48:06,960 --> 01:48:11,760
so cube proxy finally we have the

01:48:09,920 --> 01:48:12,560
container network interface the thing

01:48:11,760 --> 01:48:15,760
that allows

01:48:12,560 --> 01:48:17,679
it to the cluster to talk kind of across

01:48:15,760 --> 01:48:19,360
different things across the network and

01:48:17,679 --> 01:48:21,280
communicate in there

01:48:19,360 --> 01:48:22,480
that is the container network interface

01:48:21,280 --> 01:48:26,000
or the c and

01:48:22,480 --> 01:48:29,440
i if you look at the

01:48:26,000 --> 01:48:32,480
these there have sort of

01:48:29,440 --> 01:48:33,760
the different fabric kinds of names they

01:48:32,480 --> 01:48:36,560
have calico

01:48:33,760 --> 01:48:39,040
flannel weave different ones out there

01:48:36,560 --> 01:48:40,880
but they're all about being able to do

01:48:39,040 --> 01:48:42,480
the networking that's necessary within

01:48:40,880 --> 01:48:44,800
the cluster itself

01:48:42,480 --> 01:48:46,480
so that's kind of the overall picture of

01:48:44,800 --> 01:48:47,679
what the cluster is and the different

01:48:46,480 --> 01:48:50,400
components to it

01:48:47,679 --> 01:48:51,040
at its core though it's still going out

01:48:50,400 --> 01:48:53,600
running

01:48:51,040 --> 01:48:54,880
a creating containers running containers

01:48:53,600 --> 01:48:56,880
managing containers

01:48:54,880 --> 01:48:58,880
running out there the rest of it is just

01:48:56,880 --> 01:49:00,080
to let the cluster communicate and work

01:48:58,880 --> 01:49:02,400
and schedule

01:49:00,080 --> 01:49:03,600
things out there at based on what you've

01:49:02,400 --> 01:49:04,960
asked for

01:49:03,600 --> 01:49:07,360
how are containers organized on

01:49:04,960 --> 01:49:08,639
kubernetes well kubernetes clusters have

01:49:07,360 --> 01:49:11,840
nodes

01:49:08,639 --> 01:49:13,280
and nodes run pods pods group one or

01:49:11,840 --> 01:49:16,400
more containers

01:49:13,280 --> 01:49:18,480
pods get front-ended by services and

01:49:16,400 --> 01:49:19,679
pods are scaled or replicated by

01:49:18,480 --> 01:49:21,920
deployments

01:49:19,679 --> 01:49:24,960
so then namespaces group objects like

01:49:21,920 --> 01:49:27,119
pods services and deployments together

01:49:24,960 --> 01:49:28,159
a pod is again the smallest deployable

01:49:27,119 --> 01:49:29,920
unit in kubernetes

01:49:28,159 --> 01:49:31,760
we talk about containers and kubernetes

01:49:29,920 --> 01:49:34,400
he talks about pods

01:49:31,760 --> 01:49:36,560
pod wrap represents a group for one or

01:49:34,400 --> 01:49:38,400
more containers any shared resources

01:49:36,560 --> 01:49:41,679
such as disk volumes

01:49:38,400 --> 01:49:44,000
or an ip address pods are scheduled on

01:49:41,679 --> 01:49:45,040
nodes usually automatically by the

01:49:44,000 --> 01:49:46,960
master

01:49:45,040 --> 01:49:48,159
and they can specify nodes to run on

01:49:46,960 --> 01:49:50,239
with a selector

01:49:48,159 --> 01:49:51,679
what do we mean by that well we'll talk

01:49:50,239 --> 01:49:54,560
about selectors more

01:49:51,679 --> 01:49:55,599
in a few moments selectors are labels or

01:49:54,560 --> 01:49:58,639
identifiers

01:49:55,599 --> 01:49:59,440
ways of putting an identifying name on

01:49:58,639 --> 01:50:02,159
there kind of like

01:49:59,440 --> 01:50:03,040
we did with tags in containers one

01:50:02,159 --> 01:50:05,119
example

01:50:03,040 --> 01:50:08,400
when i was working on a project a couple

01:50:05,119 --> 01:50:10,560
years back with kubernetes

01:50:08,400 --> 01:50:11,679
we had some things that needed to run on

01:50:10,560 --> 01:50:14,960
a system

01:50:11,679 --> 01:50:17,280
that would have a lot of memory um so i

01:50:14,960 --> 01:50:18,080
put a label on there like node equals

01:50:17,280 --> 01:50:20,960
biggest

01:50:18,080 --> 01:50:22,400
and then i was able to specify these

01:50:20,960 --> 01:50:25,119
applications should run

01:50:22,400 --> 01:50:26,480
on this node which has the most disk

01:50:25,119 --> 01:50:28,320
space out there

01:50:26,480 --> 01:50:30,239
labels use the selectors to kind of

01:50:28,320 --> 01:50:32,480
identify things within

01:50:30,239 --> 01:50:34,400
the cluster so then scheduling takes

01:50:32,480 --> 01:50:37,199
into account the node's resources so

01:50:34,400 --> 01:50:39,040
kubernetes is smart enough to say

01:50:37,199 --> 01:50:40,400
you need x amount of memory you told me

01:50:39,040 --> 01:50:41,679
the x amount of memory or x amount of

01:50:40,400 --> 01:50:43,119
cpu

01:50:41,679 --> 01:50:45,199
i don't have it on this note but i have

01:50:43,119 --> 01:50:46,480
it on a different node i'll put you on

01:50:45,199 --> 01:50:48,000
there

01:50:46,480 --> 01:50:50,159
when you're talking about wrapping

01:50:48,000 --> 01:50:51,760
multiple containers in a pod

01:50:50,159 --> 01:50:53,280
they should only be scheduled together

01:50:51,760 --> 01:50:55,360
if they're tightly coupled and need to

01:50:53,280 --> 01:50:57,360
share resources such as disk

01:50:55,360 --> 01:50:59,199
there are advantages to putting multiple

01:50:57,360 --> 01:51:00,960
containers within the same pod

01:50:59,199 --> 01:51:02,960
for example they can talk to each other

01:51:00,960 --> 01:51:04,400
over local hosts instead of a lot of

01:51:02,960 --> 01:51:07,119
networking going on

01:51:04,400 --> 01:51:09,679
they can share disk volumes and so on

01:51:07,119 --> 01:51:12,320
but the pod gets scheduled and then runs

01:51:09,679 --> 01:51:15,119
on the node

01:51:12,320 --> 01:51:16,719
name spaces name spaces are simply this

01:51:15,119 --> 01:51:19,440
working area within a cluster

01:51:16,719 --> 01:51:20,560
it's a way to separate out resources if

01:51:19,440 --> 01:51:22,480
you have

01:51:20,560 --> 01:51:24,560
most multiple applications you're

01:51:22,480 --> 01:51:26,239
running you might choose to put them in

01:51:24,560 --> 01:51:28,400
different name spaces

01:51:26,239 --> 01:51:29,920
you this allows you to name space as

01:51:28,400 --> 01:51:33,599
part of the naming

01:51:29,920 --> 01:51:35,760
of that item pod foo for example

01:51:33,599 --> 01:51:37,040
would be in namespace a would be

01:51:35,760 --> 01:51:39,920
different from podfu

01:51:37,040 --> 01:51:42,000
in namespace b so namespaces just allow

01:51:39,920 --> 01:51:44,719
you to group things together within

01:51:42,000 --> 01:51:46,560
this named region all resources and

01:51:44,719 --> 01:51:47,599
namespace have to have unique names

01:51:46,560 --> 01:51:50,560
kubernetes has

01:51:47,599 --> 01:51:51,440
actually have quotas in there by

01:51:50,560 --> 01:51:54,480
definition

01:51:51,440 --> 01:51:55,119
by default the namespace you get is

01:51:54,480 --> 01:51:57,840
called

01:51:55,119 --> 01:52:00,480
the actual word default that's the

01:51:57,840 --> 01:52:03,440
default namespace

01:52:00,480 --> 01:52:05,440
the name the abbreviation if the object

01:52:03,440 --> 01:52:07,760
if you're creating one for example

01:52:05,440 --> 01:52:09,840
would be an ns kubernetes is big on

01:52:07,760 --> 01:52:12,159
abbreviations it has abbreviations

01:52:09,840 --> 01:52:14,400
for all the types of objects if i'm

01:52:12,159 --> 01:52:15,360
selecting a namespace to run in if i'm

01:52:14,400 --> 01:52:18,159
saying go

01:52:15,360 --> 01:52:19,199
do this action in this namespace instead

01:52:18,159 --> 01:52:22,080
of this other one

01:52:19,199 --> 01:52:23,920
the dash n is the option ns is the

01:52:22,080 --> 01:52:24,639
abbreviation if i'm working with the

01:52:23,920 --> 01:52:27,119
thing

01:52:24,639 --> 01:52:27,760
dash n is to select one to do something

01:52:27,119 --> 01:52:29,840
in

01:52:27,760 --> 01:52:31,760
and you can set a context to change the

01:52:29,840 --> 01:52:35,599
default one from default

01:52:31,760 --> 01:52:36,159
to something else cube cuddle as we've

01:52:35,599 --> 01:52:39,040
mentioned

01:52:36,159 --> 01:52:40,960
is the command line interface has the

01:52:39,040 --> 01:52:41,679
cube config file to tell it pronounced

01:52:40,960 --> 01:52:44,159
different ways

01:52:41,679 --> 01:52:46,320
fcq config file to help it understand

01:52:44,159 --> 01:52:48,159
which cluster to work against

01:52:46,320 --> 01:52:50,960
the basic syntax here is going to be

01:52:48,159 --> 01:52:52,960
cubecuttle and some command so commands

01:52:50,960 --> 01:52:56,159
like examples at the bottom

01:52:52,960 --> 01:52:58,080
git apply create describe delete we'll

01:52:56,159 --> 01:53:00,080
look at those in more detail in a minute

01:52:58,080 --> 01:53:01,360
but the command and then the type of

01:53:00,080 --> 01:53:03,199
object uh

01:53:01,360 --> 01:53:04,480
the type of object going to be the type

01:53:03,199 --> 01:53:07,280
of kubernetes object

01:53:04,480 --> 01:53:08,400
is it a deployment is it a service is it

01:53:07,280 --> 01:53:11,119
a pod

01:53:08,400 --> 01:53:12,400
and then the name being the name of the

01:53:11,119 --> 01:53:14,480
object

01:53:12,400 --> 01:53:16,480
and any kinds of flags so you'll see

01:53:14,480 --> 01:53:17,760
examples as we go along so again

01:53:16,480 --> 01:53:19,360
this is just kind of exposing the

01:53:17,760 --> 01:53:20,880
material but you'll see examples as we

01:53:19,360 --> 01:53:22,320
get into the labs and stuff

01:53:20,880 --> 01:53:24,639
that'll help make this a lot more

01:53:22,320 --> 01:53:26,960
concrete looking at the bottom though

01:53:24,639 --> 01:53:29,199
some examples here cube cuddle get

01:53:26,960 --> 01:53:31,199
get basic information about existence of

01:53:29,199 --> 01:53:32,960
objects i tell people think of this as a

01:53:31,199 --> 01:53:36,719
cube cuddle think of this as a

01:53:32,960 --> 01:53:38,880
list command list out the items i have

01:53:36,719 --> 01:53:41,199
instead of cube cuddle get pods list

01:53:38,880 --> 01:53:42,880
pods list isn't an official command but

01:53:41,199 --> 01:53:45,280
that's how i tend to think of the get

01:53:42,880 --> 01:53:46,800
get information about it or list it out

01:53:45,280 --> 01:53:50,000
cube cuddle apply

01:53:46,800 --> 01:53:53,040
so apply is used a lot in kubernetes

01:53:50,000 --> 01:53:55,119
what apply does for us is to say

01:53:53,040 --> 01:53:57,760
i am telling you what i want in this

01:53:55,119 --> 01:54:00,639
yaml file and it's what we call manifest

01:53:57,760 --> 01:54:02,239
i want a pod that has this container

01:54:00,639 --> 01:54:04,159
this much storage in it

01:54:02,239 --> 01:54:05,920
i want three of these as a replica i

01:54:04,159 --> 01:54:07,280
want a service that looks like this with

01:54:05,920 --> 01:54:09,679
these ports exposed

01:54:07,280 --> 01:54:11,599
you put all that into yaml file then you

01:54:09,679 --> 01:54:13,920
do cube cuddle apply

01:54:11,599 --> 01:54:15,440
and that takes that specification and

01:54:13,920 --> 01:54:17,760
tells kubernetes

01:54:15,440 --> 01:54:19,679
look at this and go make me some of

01:54:17,760 --> 01:54:20,639
these go make what go make these in the

01:54:19,679 --> 01:54:21,840
cluster

01:54:20,639 --> 01:54:24,080
all right go make it and that's what

01:54:21,840 --> 01:54:26,000
keep cuddle apply does cube cuddle

01:54:24,080 --> 01:54:27,760
create allows you to create an object i

01:54:26,000 --> 01:54:29,440
could say create a namespace

01:54:27,760 --> 01:54:31,199
similar to how apply is but you don't

01:54:29,440 --> 01:54:34,000
have to specify

01:54:31,199 --> 01:54:36,159
the actual yaml specification this is

01:54:34,000 --> 01:54:38,400
really mainly useful in very simple

01:54:36,159 --> 01:54:40,960
objects like a namespace which doesn't

01:54:38,400 --> 01:54:43,280
have much other information about it

01:54:40,960 --> 01:54:44,320
cubecut will describe get detailed info

01:54:43,280 --> 01:54:48,320
kind of like the

01:54:44,320 --> 01:54:51,599
uh docker inspect and keep cuddle delete

01:54:48,320 --> 01:54:53,520
to delete an object

01:54:51,599 --> 01:54:56,000
so command line syntax a quick note

01:54:53,520 --> 01:54:58,560
about this if you look in the screenshot

01:54:56,000 --> 01:54:59,199
on the right hand side you'll see that

01:54:58,560 --> 01:55:01,679
we have

01:54:59,199 --> 01:55:02,960
cube cuddle the command get which again

01:55:01,679 --> 01:55:04,719
is like a list

01:55:02,960 --> 01:55:07,119
we're asking for things that are of the

01:55:04,719 --> 01:55:08,560
service type tell me all the services

01:55:07,119 --> 01:55:11,920
that are in the namespace

01:55:08,560 --> 01:55:14,560
roar2 the dashen selects the namespace

01:55:11,920 --> 01:55:16,560
so you list all the services that are

01:55:14,560 --> 01:55:18,159
available in the roar2 namespace

01:55:16,560 --> 01:55:20,000
notice that it comes back and it gives

01:55:18,159 --> 01:55:22,080
you the name of the services

01:55:20,000 --> 01:55:23,199
likewise i can switch things up and that

01:55:22,080 --> 01:55:25,599
second element

01:55:23,199 --> 01:55:26,760
cube cuddle dash n go to the roar2

01:55:25,599 --> 01:55:30,400
namespace

01:55:26,760 --> 01:55:32,800
getsvc svc is just the abbreviation for

01:55:30,400 --> 01:55:35,280
service again list those out now if i

01:55:32,800 --> 01:55:38,639
say in the last example cube cuddle git

01:55:35,280 --> 01:55:40,080
dash n roar2 namespace ward2 get all of

01:55:38,639 --> 01:55:42,239
the objects

01:55:40,080 --> 01:55:43,520
and grab look for services notice that

01:55:42,239 --> 01:55:46,960
it prefaces the

01:55:43,520 --> 01:55:48,880
list back with service in red there

01:55:46,960 --> 01:55:50,000
simply showing that if you just ask for

01:55:48,880 --> 01:55:52,480
all the things

01:55:50,000 --> 01:55:54,960
it defines the type as well if you

01:55:52,480 --> 01:55:58,880
specify the type in the command

01:55:54,960 --> 01:56:01,599
as we did with the first two then

01:55:58,880 --> 01:56:02,800
you will actually if you specify the

01:56:01,599 --> 01:56:05,280
type of the first two

01:56:02,800 --> 01:56:06,480
it will give you back the names because

01:56:05,280 --> 01:56:07,760
you already know you already know what

01:56:06,480 --> 01:56:09,760
type you're talking about because you

01:56:07,760 --> 01:56:11,520
asked for it

01:56:09,760 --> 01:56:13,360
so resources can be referred to with a

01:56:11,520 --> 01:56:16,239
separate resource in the name

01:56:13,360 --> 01:56:18,239
such as pod mypod or they can be

01:56:16,239 --> 01:56:19,520
referred to with resource slash name

01:56:18,239 --> 01:56:21,840
such as pod

01:56:19,520 --> 01:56:23,599
slash mypod it may seem like a subtle

01:56:21,840 --> 01:56:24,960
difference and it really is it's just

01:56:23,599 --> 01:56:28,639
showing that you can

01:56:24,960 --> 01:56:29,119
either specify the type of object you

01:56:28,639 --> 01:56:31,040
want

01:56:29,119 --> 01:56:33,520
or you can just specify a name with the

01:56:31,040 --> 01:56:36,320
type in in front of it as well

01:56:33,520 --> 01:56:38,000
as part of the name operation compd

01:56:36,320 --> 01:56:39,679
options can be in different locations

01:56:38,000 --> 01:56:40,320
you can use different types of resource

01:56:39,679 --> 01:56:43,360
name

01:56:40,320 --> 01:56:44,239
again kubernetes objects will have types

01:56:43,360 --> 01:56:46,560
that are

01:56:44,239 --> 01:56:48,000
singular pearl abbreviations you can use

01:56:46,560 --> 01:56:51,520
pretty much any of them

01:56:48,000 --> 01:56:52,400
pod or pods or po abbreviations exist

01:56:51,520 --> 01:56:55,280
for most of them

01:56:52,400 --> 01:56:56,400
po is for pod svc for service deploy for

01:56:55,280 --> 01:56:58,560
deployment

01:56:56,400 --> 01:57:00,400
and so on i will show you some

01:56:58,560 --> 01:57:01,840
animations in a bit that will give you

01:57:00,400 --> 01:57:03,520
better examples

01:57:01,840 --> 01:57:06,320
uh to show you how to think about these

01:57:03,520 --> 01:57:07,920
things talking about yaml and kubernetes

01:57:06,320 --> 01:57:08,880
specifications we've mentioned the ammo

01:57:07,920 --> 01:57:11,119
before

01:57:08,880 --> 01:57:13,360
it's a type of language you write these

01:57:11,119 --> 01:57:17,280
specs in

01:57:13,360 --> 01:57:19,840
stored and as dot yaml extensions or yml

01:57:17,280 --> 01:57:21,760
and basically cube cuddle can apply can

01:57:19,840 --> 01:57:23,920
take such a files input

01:57:21,760 --> 01:57:25,840
and update the cluster based on this to

01:57:23,920 --> 01:57:27,520
say give me one of these or give me

01:57:25,840 --> 01:57:28,639
one of these it looks like this when

01:57:27,520 --> 01:57:29,840
you're talking about yaml though a

01:57:28,639 --> 01:57:31,360
couple of things to know if you're not

01:57:29,840 --> 01:57:34,239
familiar with yaml

01:57:31,360 --> 01:57:34,880
if you have a new item or new block in

01:57:34,239 --> 01:57:37,840
there

01:57:34,880 --> 01:57:39,920
use a hyphen and a space to start it

01:57:37,840 --> 01:57:40,880
keys are separated from values by a

01:57:39,920 --> 01:57:42,719
colon plus

01:57:40,880 --> 01:57:44,320
space this may sound kind of ridiculous

01:57:42,719 --> 01:57:47,280
but it is gamble

01:57:44,320 --> 01:57:48,960
is very syntax specific very picky about

01:57:47,280 --> 01:57:52,080
spaces and indenting

01:57:48,960 --> 01:57:54,320
it's all about being very structured

01:57:52,080 --> 01:57:56,000
in the way that you write it here and by

01:57:54,320 --> 01:57:58,719
the way you can write your kubernetes

01:57:56,000 --> 01:58:01,199
specs in javascript object notation

01:57:58,719 --> 01:58:02,960
if you knew that however that's not any

01:58:01,199 --> 01:58:05,440
less complex probably

01:58:02,960 --> 01:58:06,880
uh what the cube cutout command line

01:58:05,440 --> 01:58:10,719
actually takes your

01:58:06,880 --> 01:58:13,840
yaml and converts it into uh json

01:58:10,719 --> 01:58:15,760
for the api to consume strings don't

01:58:13,840 --> 01:58:18,719
generally require quotation marks

01:58:15,760 --> 01:58:20,159
um data structure is maintained by

01:58:18,719 --> 01:58:22,239
outline indentation

01:58:20,159 --> 01:58:23,520
the last part is just saying when you

01:58:22,239 --> 01:58:27,280
indent something that

01:58:23,520 --> 01:58:29,520
implies that it is a child or

01:58:27,280 --> 01:58:31,840
owned by the thing above it that was

01:58:29,520 --> 01:58:34,000
indent the indentation level above

01:58:31,840 --> 01:58:35,119
so indentation levels indicate a

01:58:34,000 --> 01:58:38,400
hierarchy

01:58:35,119 --> 01:58:38,400
within the yaml file

01:58:38,560 --> 01:58:42,080
to work with kubernetes objects you use

01:58:40,320 --> 01:58:44,000
the kubernetes api

01:58:42,080 --> 01:58:45,280
command line tool makes the calls to the

01:58:44,000 --> 01:58:47,599
api for you

01:58:45,280 --> 01:58:49,679
or you could write if you're programming

01:58:47,599 --> 01:58:51,440
use api client libraries

01:58:49,679 --> 01:58:53,760
kubernetes objects are persistent

01:58:51,440 --> 01:58:56,880
entities in the kubernetes system

01:58:53,760 --> 01:58:57,599
meaning that once you ask for a pod or a

01:58:56,880 --> 01:59:00,560
service

01:58:57,599 --> 01:59:02,320
or a deployment you get one spun up and

01:59:00,560 --> 01:59:05,840
running and persisting

01:59:02,320 --> 01:59:07,360
in the cluster they can

01:59:05,840 --> 01:59:08,960
the state of the cluster can be what

01:59:07,360 --> 01:59:11,679
applications are running

01:59:08,960 --> 01:59:14,719
resources available policies around it a

01:59:11,679 --> 01:59:16,239
kubernetes object is a record of intent

01:59:14,719 --> 01:59:17,920
kubernetes will work to ensure the

01:59:16,239 --> 01:59:19,599
object exists

01:59:17,920 --> 01:59:22,719
create an object declares what you want

01:59:19,599 --> 01:59:25,280
to look like known as the desired state

01:59:22,719 --> 01:59:26,560
meaning a what are you asking for tell

01:59:25,280 --> 01:59:28,159
me what you're asking for

01:59:26,560 --> 01:59:30,000
and i'll make sure i get one of these

01:59:28,159 --> 01:59:32,560
set up for you it's an example

01:59:30,000 --> 01:59:34,639
of declarative versus imperative now we

01:59:32,560 --> 01:59:36,560
talk about declarative versus imperative

01:59:34,639 --> 01:59:39,599
it's worth spending just a moment

01:59:36,560 --> 01:59:40,719
to clarify that the example i usually

01:59:39,599 --> 01:59:42,239
use for people

01:59:40,719 --> 01:59:44,960
talking about declarative versus

01:59:42,239 --> 01:59:47,119
imperative is

01:59:44,960 --> 01:59:48,159
if you were going to feed your family

01:59:47,119 --> 01:59:52,080
dinner let's say

01:59:48,159 --> 01:59:54,639
uh tonight or uh and you're going to

01:59:52,080 --> 01:59:55,520
need to get dinner for them you might

01:59:54,639 --> 01:59:57,679
choose to

01:59:55,520 --> 01:59:59,440
make it yourself most of us do in the

01:59:57,679 --> 02:00:02,320
time of the virus probably but

01:59:59,440 --> 02:00:02,320
make it yourself

02:00:03,040 --> 02:00:06,400
and cook it and so you go through the

02:00:04,639 --> 02:00:07,599
steps you get the ingredients you get

02:00:06,400 --> 02:00:10,560
the

02:00:07,599 --> 02:00:11,440
recipe out you go through and you get

02:00:10,560 --> 02:00:13,679
the

02:00:11,440 --> 02:00:14,480
ingredients prepared you mix it all up

02:00:13,679 --> 02:00:16,320
you cook it

02:00:14,480 --> 02:00:19,040
you follow a set of steps there's a set

02:00:16,320 --> 02:00:21,360
of steps and process outlying exactly

02:00:19,040 --> 02:00:23,040
how you get from point a to point b

02:00:21,360 --> 02:00:24,840
from the ingredients to the meal that

02:00:23,040 --> 02:00:26,000
you serve the family that's an

02:00:24,840 --> 02:00:28,239
imperative

02:00:26,000 --> 02:00:29,920
that's imperative is that programming or

02:00:28,239 --> 02:00:32,000
those steps to go through there

02:00:29,920 --> 02:00:34,400
on the other hand if you decided that

02:00:32,000 --> 02:00:36,480
you know what we want to

02:00:34,400 --> 02:00:38,960
order something maybe from doordash or

02:00:36,480 --> 02:00:41,760
something delivery like that

02:00:38,960 --> 02:00:42,960
you could go on your phone or or your

02:00:41,760 --> 02:00:45,440
and order that

02:00:42,960 --> 02:00:47,199
you specify what you want you specify i

02:00:45,440 --> 02:00:48,800
want a pizza that looks like this it has

02:00:47,199 --> 02:00:52,000
these toppings and stuff

02:00:48,800 --> 02:00:54,320
and you send that order in

02:00:52,000 --> 02:00:56,000
and the restaurant or prepares it and

02:00:54,320 --> 02:00:58,400
delivers it to you

02:00:56,000 --> 02:00:59,679
that's the declarative model i declare

02:00:58,400 --> 02:01:02,000
what i want

02:00:59,679 --> 02:01:02,719
how it should look how many of them i

02:01:02,000 --> 02:01:05,840
want

02:01:02,719 --> 02:01:08,320
and then i send that off and the system

02:01:05,840 --> 02:01:08,880
comes back and says okay here you go now

02:01:08,320 --> 02:01:10,480
you've got

02:01:08,880 --> 02:01:12,719
these things that look like this and how

02:01:10,480 --> 02:01:14,800
many of them so imperative is

02:01:12,719 --> 02:01:17,440
going step by step and giving the steps

02:01:14,800 --> 02:01:19,679
to do it whereas declarative is saying

02:01:17,440 --> 02:01:21,360
this is what i want from my end result

02:01:19,679 --> 02:01:23,280
and then the system goes off and creates

02:01:21,360 --> 02:01:25,440
that for you

02:01:23,280 --> 02:01:26,560
in kubernetes the user supplies the

02:01:25,440 --> 02:01:28,719
desired state

02:01:26,560 --> 02:01:29,920
via declaring it in manifest those yaml

02:01:28,719 --> 02:01:32,400
files

02:01:29,920 --> 02:01:33,920
the user then passes on the desired

02:01:32,400 --> 02:01:36,159
state to kubernetes

02:01:33,920 --> 02:01:38,320
kubernetes then works to balance the

02:01:36,159 --> 02:01:40,159
current state in the desired state

02:01:38,320 --> 02:01:41,760
so it says you've asked for this i've

02:01:40,159 --> 02:01:42,719
got these things and need to make it

02:01:41,760 --> 02:01:44,320
look like this

02:01:42,719 --> 02:01:45,760
so kubernetes runs what we call this

02:01:44,320 --> 02:01:47,199
reconciliation loop

02:01:45,760 --> 02:01:49,280
which simply means it looks at the

02:01:47,199 --> 02:01:52,080
manifest the things you've asked for

02:01:49,280 --> 02:01:53,440
and then creates those objects in the

02:01:52,080 --> 02:01:55,040
cluster for you

02:01:53,440 --> 02:01:57,280
so that's the declarative you give it

02:01:55,040 --> 02:01:58,480
your order and then it goes to fill the

02:01:57,280 --> 02:02:01,679
order it's the kitchen

02:01:58,480 --> 02:02:01,679
if you will or the restaurant

02:02:02,320 --> 02:02:06,719
so when we define a kubernetes object

02:02:04,400 --> 02:02:09,920
when we define these yaml files to pass

02:02:06,719 --> 02:02:11,440
into kubernetes to tell it what we want

02:02:09,920 --> 02:02:13,280
there's a certain format that we

02:02:11,440 --> 02:02:16,080
typically follow for these

02:02:13,280 --> 02:02:18,320
uh creating object kubernetes we provide

02:02:16,080 --> 02:02:21,920
an object specification

02:02:18,320 --> 02:02:22,800
to describe the desired state basic info

02:02:21,920 --> 02:02:24,639
out there

02:02:22,800 --> 02:02:26,639
kubernetes object when you're looking at

02:02:24,639 --> 02:02:28,960
them if you look on the right hand side

02:02:26,639 --> 02:02:30,719
this is two objects in one yaml file

02:02:28,960 --> 02:02:32,880
separated by those uh

02:02:30,719 --> 02:02:34,560
three dashes there you'll see there's an

02:02:32,880 --> 02:02:37,599
api version

02:02:34,560 --> 02:02:39,040
which is the if not the top thing always

02:02:37,599 --> 02:02:40,800
near the top that you define in

02:02:39,040 --> 02:02:41,760
kubernetes the version of the kubernetes

02:02:40,800 --> 02:02:43,679
api

02:02:41,760 --> 02:02:46,159
that you are working with or compatible

02:02:43,679 --> 02:02:48,880
with the kind of object the kind

02:02:46,159 --> 02:02:49,679
is one of the kubernetes objects type

02:02:48,880 --> 02:02:52,719
deployment

02:02:49,679 --> 02:02:54,960
or service or even down in the pod level

02:02:52,719 --> 02:02:57,440
you go that way and then you have

02:02:54,960 --> 02:02:58,320
metadata objects have metadata so api

02:02:57,440 --> 02:03:00,800
version

02:02:58,320 --> 02:03:03,440
the kind of object metadata metadata

02:03:00,800 --> 02:03:05,440
being things like the name of the object

02:03:03,440 --> 02:03:06,960
any kind of labels that we put in and

02:03:05,440 --> 02:03:08,880
we'll talk about labels more

02:03:06,960 --> 02:03:11,199
in a moment labels are selectors we

02:03:08,880 --> 02:03:14,239
revert them earlier

02:03:11,199 --> 02:03:16,239
and also then namespace if you wanted to

02:03:14,239 --> 02:03:17,679
that's optional this but you usually

02:03:16,239 --> 02:03:20,400
need to at least have the name

02:03:17,679 --> 02:03:21,679
part there and after that after the

02:03:20,400 --> 02:03:24,800
metadata we have

02:03:21,679 --> 02:03:26,639
a specification this is where we say

02:03:24,800 --> 02:03:28,320
what this particular kind of object or

02:03:26,639 --> 02:03:30,639
instance should look like

02:03:28,320 --> 02:03:32,960
what characteristics you should have now

02:03:30,639 --> 02:03:33,920
in this case we have a deployment object

02:03:32,960 --> 02:03:35,360
at the top

02:03:33,920 --> 02:03:38,080
deployment tests two main

02:03:35,360 --> 02:03:39,840
characteristics it defines the pods

02:03:38,080 --> 02:03:41,199
pods wrap containers it defines what the

02:03:39,840 --> 02:03:43,280
pod should look like

02:03:41,199 --> 02:03:45,199
and it defines how many of them the

02:03:43,280 --> 02:03:46,320
replicas how many replicas we should

02:03:45,199 --> 02:03:48,000
have of that

02:03:46,320 --> 02:03:50,400
so if you look at the specification

02:03:48,000 --> 02:03:52,639
you'll see it says i want one of these

02:03:50,400 --> 02:03:54,719
one replica

02:03:52,639 --> 02:03:56,639
and within this spec i can have a name

02:03:54,719 --> 02:03:57,119
out there with the labels or i can have

02:03:56,639 --> 02:03:59,760
a

02:03:57,119 --> 02:04:01,599
metadata rather with a label in there

02:03:59,760 --> 02:04:02,800
and then further down there's a second

02:04:01,599 --> 02:04:06,079
spec and you can tell

02:04:02,800 --> 02:04:07,840
that it is a child of the first spec

02:04:06,079 --> 02:04:10,719
because of the indentation

02:04:07,840 --> 02:04:12,800
so the second spec says containers these

02:04:10,719 --> 02:04:14,560
are the kind of containers i want

02:04:12,800 --> 02:04:15,920
so what does this mean this is what goes

02:04:14,560 --> 02:04:18,400
into the pod

02:04:15,920 --> 02:04:20,000
this is my pod definition i want to have

02:04:18,400 --> 02:04:22,400
within my pod

02:04:20,000 --> 02:04:24,000
an instance of the raw web container

02:04:22,400 --> 02:04:26,239
notice the image definition

02:04:24,000 --> 02:04:28,239
there that's the thing that we built and

02:04:26,239 --> 02:04:29,520
pushed in our earlier collapse we built

02:04:28,239 --> 02:04:31,280
and pushed up

02:04:29,520 --> 02:04:32,880
the image this is how we tie it back

02:04:31,280 --> 02:04:35,199
from our image to

02:04:32,880 --> 02:04:37,199
a kubernetes instance so when we create

02:04:35,199 --> 02:04:38,960
a deployment we have a pod

02:04:37,199 --> 02:04:40,800
that wraps around the container the

02:04:38,960 --> 02:04:42,239
container is just an instance of our

02:04:40,800 --> 02:04:44,239
image that we pull and spin

02:04:42,239 --> 02:04:45,840
up and we have information there about

02:04:44,239 --> 02:04:47,040
the port that we want exposed and how

02:04:45,840 --> 02:04:49,280
many we want

02:04:47,040 --> 02:04:50,560
at the bottom you'll see under the three

02:04:49,280 --> 02:04:52,560
dashed lines

02:04:50,560 --> 02:04:54,800
you'll see we have a specification for a

02:04:52,560 --> 02:04:55,599
service note again we have an api

02:04:54,800 --> 02:04:57,760
version

02:04:55,599 --> 02:04:59,599
a kind and a metadata section the

02:04:57,760 --> 02:05:00,639
metadata section again has a name for

02:04:59,599 --> 02:05:03,760
the object

02:05:00,639 --> 02:05:04,800
labels that we can use to to select it

02:05:03,760 --> 02:05:06,960
or identify it

02:05:04,800 --> 02:05:08,719
and a namespace optionally and then we

02:05:06,960 --> 02:05:10,480
have a spec for the service

02:05:08,719 --> 02:05:11,760
the specification for a service looks

02:05:10,480 --> 02:05:12,560
very different from the one for

02:05:11,760 --> 02:05:14,480
deployment

02:05:12,560 --> 02:05:15,599
the deployment one has the replicas and

02:05:14,480 --> 02:05:18,000
the pod spec

02:05:15,599 --> 02:05:18,880
the service has just a simple type of

02:05:18,000 --> 02:05:21,599
service

02:05:18,880 --> 02:05:22,639
and a port to expose or to go to traffic

02:05:21,599 --> 02:05:24,800
go into

02:05:22,639 --> 02:05:26,719
so we're creating kubernetes at optic

02:05:24,800 --> 02:05:29,360
kubernetes enter yaml file

02:05:26,719 --> 02:05:30,239
we have the object spec the metadata out

02:05:29,360 --> 02:05:32,960
there

02:05:30,239 --> 02:05:34,159
uh as well the basic pieces like api

02:05:32,960 --> 02:05:38,400
version and so forth

02:05:34,159 --> 02:05:39,679
in there once we have the object created

02:05:38,400 --> 02:05:42,239
in the kubernetes

02:05:39,679 --> 02:05:43,599
kubernetes augments or adds to this

02:05:42,239 --> 02:05:46,400
specification

02:05:43,599 --> 02:05:48,400
with status information by that we mean

02:05:46,400 --> 02:05:49,119
that it talks it puts information in

02:05:48,400 --> 02:05:51,520
there

02:05:49,119 --> 02:05:52,480
about the actual state of the object as

02:05:51,520 --> 02:05:54,320
it's running

02:05:52,480 --> 02:05:56,800
remember that these objects persist in

02:05:54,320 --> 02:05:59,280
kubernetes we declare what we want

02:05:56,800 --> 02:06:00,400
kubernetes spins them up kubernetes then

02:05:59,280 --> 02:06:02,880
updates it along the way

02:06:00,400 --> 02:06:04,719
to say the last time we ran a probe the

02:06:02,880 --> 02:06:06,239
last transition time you can see some of

02:06:04,719 --> 02:06:08,719
the items over there

02:06:06,239 --> 02:06:10,560
the container statuses and such you can

02:06:08,719 --> 02:06:11,920
see some of the information over there

02:06:10,560 --> 02:06:14,960
on the right hand side

02:06:11,920 --> 02:06:18,079
so kubernetes augments or adds to

02:06:14,960 --> 02:06:18,719
our specification with the state of the

02:06:18,079 --> 02:06:21,199
things

02:06:18,719 --> 02:06:22,000
okay so it's kind of like if you were

02:06:21,199 --> 02:06:23,840
saying uh

02:06:22,000 --> 02:06:25,360
you know i want to order a pizza from

02:06:23,840 --> 02:06:26,239
the restaurant the restaurant would send

02:06:25,360 --> 02:06:28,400
you information

02:06:26,239 --> 02:06:30,960
saying your pizza is being cooked your

02:06:28,400 --> 02:06:32,639
pizza is uh you know

02:06:30,960 --> 02:06:35,040
done or pizza is being topped whatever

02:06:32,639 --> 02:06:37,040
the case is it's information about

02:06:35,040 --> 02:06:39,040
the state of the object at that point in

02:06:37,040 --> 02:06:41,760
time

02:06:39,040 --> 02:06:43,440
let's talk about selectors or labels in

02:06:41,760 --> 02:06:45,119
kubernetes i realize we're getting into

02:06:43,440 --> 02:06:46,239
a lot of stuff and we'll get to a break

02:06:45,119 --> 02:06:48,239
in a little bit

02:06:46,239 --> 02:06:49,360
but there's an uh quite a bit of

02:06:48,239 --> 02:06:51,599
information to kind of

02:06:49,360 --> 02:06:53,360
get us in our consciousness up front

02:06:51,599 --> 02:06:57,119
about kubernetes here

02:06:53,360 --> 02:06:59,440
first selectors and labels so

02:06:57,119 --> 02:07:00,960
labels are mechanisms we use to organize

02:06:59,440 --> 02:07:03,599
kubernetes objects

02:07:00,960 --> 02:07:04,800
as you can imagine there can be a lot of

02:07:03,599 --> 02:07:07,119
pods a lot of

02:07:04,800 --> 02:07:09,040
services a lot of deployments out there

02:07:07,119 --> 02:07:09,840
and from time to time we may need to

02:07:09,040 --> 02:07:12,960
select a

02:07:09,840 --> 02:07:13,199
set of them or select key ones labels

02:07:12,960 --> 02:07:15,520
are

02:07:13,199 --> 02:07:17,199
one way to do that much the same way as

02:07:15,520 --> 02:07:19,679
you might use like a tag

02:07:17,199 --> 02:07:20,960
in git or something to identify a

02:07:19,679 --> 02:07:23,040
particular item

02:07:20,960 --> 02:07:24,639
but in kubernetes a label is actually

02:07:23,040 --> 02:07:27,760
two parts it's a key

02:07:24,639 --> 02:07:29,520
and a value so we can have a key and a

02:07:27,760 --> 02:07:31,360
value if you look at the red circled

02:07:29,520 --> 02:07:34,000
items on the screenshots

02:07:31,360 --> 02:07:34,400
you'll see that we have labels that says

02:07:34,000 --> 02:07:36,400
the

02:07:34,400 --> 02:07:37,840
environment development and environment

02:07:36,400 --> 02:07:40,159
production and owner

02:07:37,840 --> 02:07:41,920
michael there these are all two parts

02:07:40,159 --> 02:07:43,520
the key and the value each one of those

02:07:41,920 --> 02:07:45,760
makes up a label

02:07:43,520 --> 02:07:47,760
when we have labels we can use the show

02:07:45,760 --> 02:07:48,400
labels option the bullet third bullet

02:07:47,760 --> 02:07:50,639
here

02:07:48,400 --> 02:07:52,159
to show labels from the objects we can

02:07:50,639 --> 02:07:53,840
add a label to

02:07:52,159 --> 02:07:56,400
an item with the cube cuddle label

02:07:53,840 --> 02:07:57,280
command and then we can filter based on

02:07:56,400 --> 02:08:00,159
a label so

02:07:57,280 --> 02:08:00,639
dash dash selector is the long form of

02:08:00,159 --> 02:08:03,760
that

02:08:00,639 --> 02:08:06,880
or dash l is the short form the label

02:08:03,760 --> 02:08:08,159
then says we're asking for items that

02:08:06,880 --> 02:08:11,599
match this particular

02:08:08,159 --> 02:08:13,520
key and value that we're looking for

02:08:11,599 --> 02:08:15,760
kubernetes objects you can do things

02:08:13,520 --> 02:08:17,920
like say find me ones where a label is

02:08:15,760 --> 02:08:20,079
equal to this or not equal to that

02:08:17,920 --> 02:08:21,040
but you can also do things like based on

02:08:20,079 --> 02:08:24,239
a set

02:08:21,040 --> 02:08:26,960
if you look at that first white box

02:08:24,239 --> 02:08:28,320
on the left hand side after about the

02:08:26,960 --> 02:08:30,239
sixth bullet down

02:08:28,320 --> 02:08:31,840
it says most kubernetes objects support

02:08:30,239 --> 02:08:33,920
set based selectors

02:08:31,840 --> 02:08:34,880
look at the example there cube cuddle

02:08:33,920 --> 02:08:37,920
get pods

02:08:34,880 --> 02:08:40,880
dash l e and v in production

02:08:37,920 --> 02:08:41,280
or development simply put this means to

02:08:40,880 --> 02:08:43,440
list

02:08:41,280 --> 02:08:44,480
think of the get commands like a list

02:08:43,440 --> 02:08:47,119
the pods

02:08:44,480 --> 02:08:48,880
that have a label where e and v is

02:08:47,119 --> 02:08:51,599
either production or development

02:08:48,880 --> 02:08:54,159
where it's one of these two now you can

02:08:51,599 --> 02:08:55,920
see if there are both of our items are

02:08:54,159 --> 02:08:57,199
one has environment development one has

02:08:55,920 --> 02:09:00,239
environment production

02:08:57,199 --> 02:09:03,679
so we can then list the pods that are

02:09:00,239 --> 02:09:04,000
available to there whoops so labels can

02:09:03,679 --> 02:09:06,079
be

02:09:04,000 --> 02:09:07,760
it can apply to other objects such as

02:09:06,079 --> 02:09:08,800
nodes and services i mentioned the

02:09:07,760 --> 02:09:11,760
example

02:09:08,800 --> 02:09:13,440
earlier where i had said uh we we had a

02:09:11,760 --> 02:09:14,079
node and the application i was working

02:09:13,440 --> 02:09:15,760
on

02:09:14,079 --> 02:09:17,599
that had a lot more disk space we needed

02:09:15,760 --> 02:09:18,159
to label we needed to run things on

02:09:17,599 --> 02:09:19,760
there

02:09:18,159 --> 02:09:21,440
so i was able to put a label on there

02:09:19,760 --> 02:09:22,079
node equals biggest or something like

02:09:21,440 --> 02:09:24,239
that

02:09:22,079 --> 02:09:25,119
and then use that as a selector to say

02:09:24,239 --> 02:09:29,199
schedule

02:09:25,119 --> 02:09:29,199
these items on that node

02:09:29,520 --> 02:09:32,639
deployments we're going to get into some

02:09:30,880 --> 02:09:34,719
pictures in just a few moments here

02:09:32,639 --> 02:09:35,840
to show you more about how this works

02:09:34,719 --> 02:09:38,880
but deployments

02:09:35,840 --> 02:09:40,960
are spinning up pods it can be thought

02:09:38,880 --> 02:09:42,639
of as a supervisor for pods it's the

02:09:40,960 --> 02:09:45,599
idea that i have

02:09:42,639 --> 02:09:47,520
pods which contain these containers and

02:09:45,599 --> 02:09:49,199
then i wanted to have this many of them

02:09:47,520 --> 02:09:51,440
the replicas

02:09:49,199 --> 02:09:52,639
when you deploy a pod as we looked at

02:09:51,440 --> 02:09:54,960
before you can see the spec

02:09:52,639 --> 02:09:57,119
up here we have the basic deployment

02:09:54,960 --> 02:09:59,040
information the metadata with the name

02:09:57,119 --> 02:10:01,280
then we have the spec for how many of

02:09:59,040 --> 02:10:01,760
these to run and then we have underneath

02:10:01,280 --> 02:10:04,400
that

02:10:01,760 --> 02:10:06,639
the spec for what our pod should look

02:10:04,400 --> 02:10:08,480
like pulling our containers down

02:10:06,639 --> 02:10:10,400
once deployed you can see the deployment

02:10:08,480 --> 02:10:12,400
the replica set and the pod

02:10:10,400 --> 02:10:14,320
so a deployment actually spins up

02:10:12,400 --> 02:10:16,639
multiple objects in kubernetes

02:10:14,320 --> 02:10:17,679
it spins up a deployment object if you

02:10:16,639 --> 02:10:21,119
look at the bottom

02:10:17,679 --> 02:10:23,599
white box here the sis deploy

02:10:21,119 --> 02:10:25,599
and then if you look in cube cuddle get

02:10:23,599 --> 02:10:27,599
replica sets rs is the abbreviation for

02:10:25,599 --> 02:10:28,719
replica sets how many of these things do

02:10:27,599 --> 02:10:30,560
we need to manage

02:10:28,719 --> 02:10:33,040
the replica set is saying i need this

02:10:30,560 --> 02:10:35,520
many keep this many going

02:10:33,040 --> 02:10:36,719
so then the replica set name becomes the

02:10:35,520 --> 02:10:39,599
deployment name

02:10:36,719 --> 02:10:41,119
plus an identifier identifier for unique

02:10:39,599 --> 02:10:43,520
for the replica set

02:10:41,119 --> 02:10:44,880
and then for pods pods are contained in

02:10:43,520 --> 02:10:47,599
replica sets

02:10:44,880 --> 02:10:49,199
i have pods and then i have unique the

02:10:47,599 --> 02:10:52,239
replica set name

02:10:49,199 --> 02:10:54,639
plus a unique identifier for each pod we

02:10:52,239 --> 02:10:56,400
have to have a unique identifier for

02:10:54,639 --> 02:10:58,719
each item each a

02:10:56,400 --> 02:11:00,800
unique name for each type of object in

02:10:58,719 --> 02:11:03,599
there in the name space

02:11:00,800 --> 02:11:05,840
so for pods if i have multiple pods

02:11:03,599 --> 02:11:08,400
kubernetes is going to put this

02:11:05,840 --> 02:11:09,599
sort of random five character identifier

02:11:08,400 --> 02:11:12,320
on the end

02:11:09,599 --> 02:11:13,440
to identify that pod so each one will

02:11:12,320 --> 02:11:16,079
have a different

02:11:13,440 --> 02:11:18,400
ending part there to identify it once in

02:11:16,079 --> 02:11:21,199
the other

02:11:18,400 --> 02:11:22,480
if i update pods in kubernetes if i

02:11:21,199 --> 02:11:25,599
change something

02:11:22,480 --> 02:11:27,360
then kubernetes is going to go and kill

02:11:25,599 --> 02:11:29,599
off the existence pods

02:11:27,360 --> 02:11:30,560
delete them and then start up new

02:11:29,599 --> 02:11:34,719
instances

02:11:30,560 --> 02:11:38,320
so this is an important point about

02:11:34,719 --> 02:11:39,840
how kubernetes manages things the basic

02:11:38,320 --> 02:11:42,639
way that kubernetes does

02:11:39,840 --> 02:11:44,000
updates or new versions of things and

02:11:42,639 --> 02:11:47,040
deploys it

02:11:44,000 --> 02:11:48,960
is by doing killing off the existing

02:11:47,040 --> 02:11:51,840
ones and starting new ones

02:11:48,960 --> 02:11:53,920
so if i go and apply make it dif make a

02:11:51,840 --> 02:11:58,000
change to my specification

02:11:53,920 --> 02:12:01,360
and then i go off and apply that

02:11:58,000 --> 02:12:04,880
and i go off and apply it and then i can

02:12:01,360 --> 02:12:06,239
see kubernetes says oh

02:12:04,880 --> 02:12:08,560
you told me something new the

02:12:06,239 --> 02:12:10,079
specifications has changed for this item

02:12:08,560 --> 02:12:11,679
so i need to go and get rid of the

02:12:10,079 --> 02:12:13,280
existing ones which have the o which are

02:12:11,679 --> 02:12:15,199
based on the old spec

02:12:13,280 --> 02:12:17,920
and start up new ones which are based on

02:12:15,199 --> 02:12:19,599
this spec so kubernetes basically gets

02:12:17,920 --> 02:12:20,480
rid of the old ones and starts up the

02:12:19,599 --> 02:12:22,400
new ones

02:12:20,480 --> 02:12:24,000
now this brings up the important point

02:12:22,400 --> 02:12:26,719
about your application

02:12:24,000 --> 02:12:27,840
your application has to be able to

02:12:26,719 --> 02:12:30,320
survive

02:12:27,840 --> 02:12:32,000
and recover from being killed off and

02:12:30,320 --> 02:12:34,079
started up again

02:12:32,000 --> 02:12:35,760
what do i mean by that well think about

02:12:34,079 --> 02:12:36,719
something that's using a database for

02:12:35,760 --> 02:12:39,119
example

02:12:36,719 --> 02:12:41,440
if my application is using a database

02:12:39,119 --> 02:12:44,239
and i'm only storing data within

02:12:41,440 --> 02:12:45,119
my container then if that container goes

02:12:44,239 --> 02:12:48,719
away

02:12:45,119 --> 02:12:51,679
any data stored in there goes away so

02:12:48,719 --> 02:12:53,119
at any point in time because of either a

02:12:51,679 --> 02:12:55,440
new version coming out

02:12:53,119 --> 02:12:56,880
or running out of system resources

02:12:55,440 --> 02:12:59,760
different scenarios

02:12:56,880 --> 02:13:00,480
kubernetes may choose to actually go off

02:12:59,760 --> 02:13:03,599
and

02:13:00,480 --> 02:13:04,560
delete your pod in order to start up a

02:13:03,599 --> 02:13:06,639
new one

02:13:04,560 --> 02:13:08,400
and so if i have just the information

02:13:06,639 --> 02:13:09,760
contained within the container

02:13:08,400 --> 02:13:11,440
that information goes away when the

02:13:09,760 --> 02:13:12,239
container goes away and the pod goes

02:13:11,440 --> 02:13:15,040
away

02:13:12,239 --> 02:13:17,040
so what would i need to do that's i need

02:13:15,040 --> 02:13:18,320
to make sure that my application is

02:13:17,040 --> 02:13:21,119
stateless

02:13:18,320 --> 02:13:23,040
stateless means that it can be stopped

02:13:21,119 --> 02:13:25,840
and restarted and recover

02:13:23,040 --> 02:13:27,520
in the case of a database example we

02:13:25,840 --> 02:13:29,440
might have a database

02:13:27,520 --> 02:13:32,239
that writes its data to an external

02:13:29,440 --> 02:13:33,040
volume to an external disk location out

02:13:32,239 --> 02:13:35,440
there

02:13:33,040 --> 02:13:37,520
and that way if it goes away it's

02:13:35,440 --> 02:13:39,360
programmed to when it starts up

02:13:37,520 --> 02:13:41,920
look at a particular location and read

02:13:39,360 --> 02:13:42,880
the data in so if one instance of your

02:13:41,920 --> 02:13:45,119
application

02:13:42,880 --> 02:13:47,360
writes data out there and then it goes

02:13:45,119 --> 02:13:49,520
away a new instance can be started up

02:13:47,360 --> 02:13:51,599
and automatically look for its data

02:13:49,520 --> 02:13:53,760
read the data in and not lose any

02:13:51,599 --> 02:13:55,440
records so that's one of the key things

02:13:53,760 --> 02:13:56,480
you have to think about when running in

02:13:55,440 --> 02:13:58,560
kubernetes

02:13:56,480 --> 02:13:59,599
if i application is stateless or

02:13:58,560 --> 02:14:02,239
stateful

02:13:59,599 --> 02:14:02,960
stateful means it keeps the information

02:14:02,239 --> 02:14:04,960
with it

02:14:02,960 --> 02:14:06,480
and if the container goes away or the

02:14:04,960 --> 02:14:08,239
application goes away

02:14:06,480 --> 02:14:09,520
you're going to lose data you're not

02:14:08,239 --> 02:14:12,560
going to be able to recover

02:14:09,520 --> 02:14:15,599
stateless means that i am

02:14:12,560 --> 02:14:16,560
programmed created storing things in

02:14:15,599 --> 02:14:18,480
such a way

02:14:16,560 --> 02:14:20,320
that if an app instance goes away

02:14:18,480 --> 02:14:22,000
another instance comes up it can pick up

02:14:20,320 --> 02:14:23,840
where the other one left off

02:14:22,000 --> 02:14:25,599
that's a key part of it now there are

02:14:23,840 --> 02:14:26,639
things called kubernetes operators which

02:14:25,599 --> 02:14:28,960
can help

02:14:26,639 --> 02:14:30,320
to mitigate that but if your application

02:14:28,960 --> 02:14:34,159
is running in kubernetes

02:14:30,320 --> 02:14:36,239
it should be designed to be stateless

02:14:34,159 --> 02:14:38,639
so deployments without versus pods all

02:14:36,239 --> 02:14:41,119
right we'll get into some animations now

02:14:38,639 --> 02:14:41,920
to show you in picture form how these

02:14:41,119 --> 02:14:43,840
things work

02:14:41,920 --> 02:14:45,440
so bear with me a little bit longer and

02:14:43,840 --> 02:14:49,119
we'll get to a break but

02:14:45,440 --> 02:14:52,000
let's take a quick look here at what

02:14:49,119 --> 02:14:54,320
pods look like without deployments

02:14:52,000 --> 02:14:56,400
suppose that as a user

02:14:54,320 --> 02:14:58,320
i am here running with kubernetes we

02:14:56,400 --> 02:15:00,880
know that objects run within a node

02:14:58,320 --> 02:15:01,760
and a namespace so the outer loop here

02:15:00,880 --> 02:15:04,800
is the node

02:15:01,760 --> 02:15:07,520
the intersp loop is a namespace

02:15:04,800 --> 02:15:08,639
and as a user i'm going to have a pod

02:15:07,520 --> 02:15:10,560
definition

02:15:08,639 --> 02:15:12,800
now in most cases you would not see a

02:15:10,560 --> 02:15:15,840
pod definition by itself

02:15:12,800 --> 02:15:16,880
pods are almost always wrapped by

02:15:15,840 --> 02:15:18,639
deployments

02:15:16,880 --> 02:15:19,840
so you can see here the pod that we it

02:15:18,639 --> 02:15:21,360
is possible to have just a pod

02:15:19,840 --> 02:15:22,800
definition but you can see here we have

02:15:21,360 --> 02:15:25,520
the pod definition

02:15:22,800 --> 02:15:27,920
the api version the kind the metadata

02:15:25,520 --> 02:15:29,520
the spec

02:15:27,920 --> 02:15:31,440
and by the way the information in the

02:15:29,520 --> 02:15:33,040
spec should look pretty familiar from

02:15:31,440 --> 02:15:35,040
the stuff we worked on earlier in the

02:15:33,040 --> 02:15:36,880
day early class

02:15:35,040 --> 02:15:38,159
so objects run within there so if the

02:15:36,880 --> 02:15:42,960
user supplies

02:15:38,159 --> 02:15:45,599
this doesn't apply through cube cuddle

02:15:42,960 --> 02:15:47,520
pod goes out there the spec runs

02:15:45,599 --> 02:15:50,000
kubernetes says you've asked me for

02:15:47,520 --> 02:15:51,679
one of these i will create a pod for you

02:15:50,000 --> 02:15:53,599
with your container and i'll expose it

02:15:51,679 --> 02:15:56,400
on port 8080

02:15:53,599 --> 02:15:57,199
great now i can connect directly to it

02:15:56,400 --> 02:16:00,880
over an ip

02:15:57,199 --> 02:16:04,239
address in there assuming i have access

02:16:00,880 --> 02:16:05,599
but if it goes away then i still need to

02:16:04,239 --> 02:16:08,079
manually start a new one

02:16:05,599 --> 02:16:09,040
right kubernetes doesn't buy me anything

02:16:08,079 --> 02:16:11,119
in that case

02:16:09,040 --> 02:16:12,800
because i just told it to create a pod

02:16:11,119 --> 02:16:15,440
so if the pod goes away if your

02:16:12,800 --> 02:16:18,880
application becomes unstable or crashes

02:16:15,440 --> 02:16:21,520
i have to go spin up a different one

02:16:18,880 --> 02:16:22,000
by doing an apply again after kubernetes

02:16:21,520 --> 02:16:24,320
up

02:16:22,000 --> 02:16:26,239
mine went away give me another one at

02:16:24,320 --> 02:16:28,960
that point i can connect to it

02:16:26,239 --> 02:16:30,400
probably a different ip address so i'd

02:16:28,960 --> 02:16:32,000
have to figure that out and connect to

02:16:30,400 --> 02:16:35,040
it that way

02:16:32,000 --> 02:16:36,319
with the deployment deployments include

02:16:35,040 --> 02:16:39,359
both a replica set

02:16:36,319 --> 02:16:41,920
and a pods so we have specs for both the

02:16:39,359 --> 02:16:42,639
deployment has a spec for the deployment

02:16:41,920 --> 02:16:45,439
itself

02:16:42,639 --> 02:16:46,960
the replica sets out there and the pi

02:16:45,439 --> 02:16:50,399
and the containers

02:16:46,960 --> 02:16:50,399
so with a deployment

02:16:50,960 --> 02:16:57,040
i apply the manifest kubernetes says

02:16:54,319 --> 02:16:58,719
oh okay i will give you a deployment so

02:16:57,040 --> 02:17:00,719
all you said you want one of these so

02:16:58,719 --> 02:17:04,000
i'll set up a replica set

02:17:00,719 --> 02:17:05,840
and i'll create a pod for you great

02:17:04,000 --> 02:17:07,359
you can go in and connect to it you can

02:17:05,840 --> 02:17:10,319
talk to it work with it

02:17:07,359 --> 02:17:12,399
now if something happens to the pod and

02:17:10,319 --> 02:17:15,599
it goes away

02:17:12,399 --> 02:17:17,439
crashes whatever kubernetes says

02:17:15,599 --> 02:17:18,800
oh wait a minute you're supposed to have

02:17:17,439 --> 02:17:20,080
one of these i'm supposed to be make

02:17:18,800 --> 02:17:23,519
sure you have one of these

02:17:20,080 --> 02:17:26,800
replica set i just noticed that you have

02:17:23,519 --> 02:17:29,040
zero of these now we're out of sync

02:17:26,800 --> 02:17:31,040
so i will go and create another one so

02:17:29,040 --> 02:17:32,639
you have one like you asked me to

02:17:31,040 --> 02:17:34,080
so that's what a deployment does it says

02:17:32,639 --> 02:17:37,359
oh one's gone away

02:17:34,080 --> 02:17:38,880
i'll create another one for you

02:17:37,359 --> 02:17:40,840
and now you can talk to that one but

02:17:38,880 --> 02:17:44,160
again you may have a different ip

02:17:40,840 --> 02:17:47,040
address kubernetes services provide that

02:17:44,160 --> 02:17:49,599
front end for pods on the back end

02:17:47,040 --> 02:17:51,120
pods can go away you could have problems

02:17:49,599 --> 02:17:52,639
if you're connected to one you still

02:17:51,120 --> 02:17:54,399
have to figure out how to connect to

02:17:52,639 --> 02:17:56,080
the new one what's the iep address and

02:17:54,399 --> 02:17:58,080
so forth

02:17:56,080 --> 02:17:59,519
the way the service works is it sits in

02:17:58,080 --> 02:18:02,160
front of a bunch of pods

02:17:59,519 --> 02:18:04,479
and gives you a virtual ip it's not a

02:18:02,160 --> 02:18:05,280
real ip address it is an ip address

02:18:04,479 --> 02:18:08,639
though

02:18:05,280 --> 02:18:10,960
that allows you to talk to a set of pods

02:18:08,639 --> 02:18:13,679
in there going through the service

02:18:10,960 --> 02:18:15,200
pods select the or the pods that are

02:18:13,679 --> 02:18:18,639
used by a service are

02:18:15,200 --> 02:18:21,040
used by selected by labels and so the

02:18:18,639 --> 02:18:22,000
service simply uses the cue proxy

02:18:21,040 --> 02:18:24,080
process

02:18:22,000 --> 02:18:26,000
to keep everything up to date and the

02:18:24,080 --> 02:18:29,120
service that allows you to go through it

02:18:26,000 --> 02:18:30,240
to put it in a picture format without a

02:18:29,120 --> 02:18:32,000
service

02:18:30,240 --> 02:18:34,800
let's say we had two pods out there or

02:18:32,000 --> 02:18:34,800
two replicas

02:18:34,960 --> 02:18:39,559
we could connect individual pods if they

02:18:36,800 --> 02:18:43,040
had one had the ip address of 172

02:18:39,559 --> 02:18:45,599
17021 one had 17 or 22.

02:18:43,040 --> 02:18:47,200
i might connect up to 22 here talk to it

02:18:45,599 --> 02:18:48,960
do my work

02:18:47,200 --> 02:18:51,120
and we're in a deployment the pod goes

02:18:48,960 --> 02:18:54,160
away we lose access to that pod

02:18:51,120 --> 02:18:55,519
at that point the replica set says wait

02:18:54,160 --> 02:18:56,559
a minute you're supposed to have two of

02:18:55,519 --> 02:18:57,920
these

02:18:56,559 --> 02:18:59,760
the deployment is supposed to have two

02:18:57,920 --> 02:19:02,719
of these so i will go

02:18:59,760 --> 02:19:04,559
and create another one for you and you

02:19:02,719 --> 02:19:06,000
get a new one which has a different ip

02:19:04,559 --> 02:19:08,880
address and once you figure that

02:19:06,000 --> 02:19:09,359
out you can talk to it but initially

02:19:08,880 --> 02:19:11,280
again

02:19:09,359 --> 02:19:12,719
you don't you can't use the same ip

02:19:11,280 --> 02:19:14,319
address to talk to it

02:19:12,719 --> 02:19:16,800
i could go and talk to the other one out

02:19:14,319 --> 02:19:21,760
there if a pod becomes unusable

02:19:16,800 --> 02:19:23,519
unstable it's looping or whatever

02:19:21,760 --> 02:19:25,200
then even though you have other pods you

02:19:23,519 --> 02:19:27,120
don't really have a good way to discover

02:19:25,200 --> 02:19:28,800
or connect automatically

02:19:27,120 --> 02:19:31,439
you kind of have to go and figure it out

02:19:28,800 --> 02:19:32,319
and talk to it if i have a service on

02:19:31,439 --> 02:19:34,880
the front end

02:19:32,319 --> 02:19:36,399
instead i can have the service

02:19:34,880 --> 02:19:39,679
definition you'll see the spec

02:19:36,399 --> 02:19:42,880
up there we have a service of type

02:19:39,679 --> 02:19:45,679
node port we have a port have several

02:19:42,880 --> 02:19:46,800
different ports in there 8089 8080 31

02:19:45,679 --> 02:19:48,240
02:19:46,800 --> 02:19:50,240
we'll talk about what those are in just

02:19:48,240 --> 02:19:53,760
a moment

02:19:50,240 --> 02:19:55,920
i get a service in front of it

02:19:53,760 --> 02:19:57,359
the service then says these are the pods

02:19:55,920 --> 02:20:00,240
i can talk to

02:19:57,359 --> 02:20:01,359
based on my selector you can see in the

02:20:00,240 --> 02:20:04,160
pod boxes there

02:20:01,359 --> 02:20:05,120
name equals roar web that's a label or a

02:20:04,160 --> 02:20:06,960
selector

02:20:05,120 --> 02:20:08,240
and you can see up at the top in the

02:20:06,960 --> 02:20:10,479
specification

02:20:08,240 --> 02:20:11,439
for the service it says selector name

02:20:10,479 --> 02:20:13,680
roar web

02:20:11,439 --> 02:20:14,880
that means this service can talk to pods

02:20:13,680 --> 02:20:18,240
on the back end

02:20:14,880 --> 02:20:22,080
that match this selector or this label

02:20:18,240 --> 02:20:25,359
the service sits there then as a user

02:20:22,080 --> 02:20:27,200
i can simply connect into that

02:20:25,359 --> 02:20:30,399
and by the way the end point here are

02:20:27,200 --> 02:20:33,520
simply the ip addresses of the pod

02:20:30,399 --> 02:20:35,280
so i have a port if this is a node port

02:20:33,520 --> 02:20:38,000
type of service

02:20:35,280 --> 02:20:39,120
it is a port that's open on the node

02:20:38,000 --> 02:20:41,920
itself

02:20:39,120 --> 02:20:42,560
if it's open on the node itself then i

02:20:41,920 --> 02:20:45,600
can talk

02:20:42,560 --> 02:20:46,319
into that particular node port on the

02:20:45,600 --> 02:20:49,680
node

02:20:46,319 --> 02:20:51,920
which can talk to the service port

02:20:49,680 --> 02:20:52,720
or just the port in the specification

02:20:51,920 --> 02:20:56,000
which can then

02:20:52,720 --> 02:20:57,359
talk to the port on the back end to one

02:20:56,000 --> 02:21:00,640
of the pods

02:20:57,359 --> 02:21:03,359
and that would be the target port

02:21:00,640 --> 02:21:05,359
so here you can see as a user i talk to

02:21:03,359 --> 02:21:07,120
the port that's open on the node

02:21:05,359 --> 02:21:09,359
and then that talks to the port of the

02:21:07,120 --> 02:21:10,240
service out there so the nice thing is

02:21:09,359 --> 02:21:13,920
then

02:21:10,240 --> 02:21:15,600
that if i have a problem if a pod goes

02:21:13,920 --> 02:21:17,439
down in this case

02:21:15,600 --> 02:21:19,920
the service can automatically connect me

02:21:17,439 --> 02:21:21,840
to another one from my standpoint

02:21:19,920 --> 02:21:23,840
i don't observe any problem maybe

02:21:21,840 --> 02:21:26,000
there's a momentary downtime

02:21:23,840 --> 02:21:27,280
but i don't i don't have to go back in

02:21:26,000 --> 02:21:29,120
and figure it out

02:21:27,280 --> 02:21:30,479
and connect and figure back out what the

02:21:29,120 --> 02:21:33,920
ip address is

02:21:30,479 --> 02:21:34,720
i can actually just go in or go through

02:21:33,920 --> 02:21:36,240
the service

02:21:34,720 --> 02:21:38,000
and i can still talk and carry on

02:21:36,240 --> 02:21:40,319
because i just talked to this port

02:21:38,000 --> 02:21:41,200
the node port the port that's open on

02:21:40,319 --> 02:21:43,040
the node

02:21:41,200 --> 02:21:44,560
any on the back end can switch to a

02:21:43,040 --> 02:21:46,880
different pod

02:21:44,560 --> 02:21:47,840
the replica set will eventually notice

02:21:46,880 --> 02:21:50,479
that

02:21:47,840 --> 02:21:52,479
i'm down a pod now it'll spin up another

02:21:50,479 --> 02:21:54,399
one because it's supposed to have two

02:21:52,479 --> 02:21:56,240
and it's got a different ip address but

02:21:54,399 --> 02:21:59,120
it automatically gets picked up because

02:21:56,240 --> 02:22:02,160
it manages it matches the selector

02:21:59,120 --> 02:22:04,080
that we specified in the service when

02:22:02,160 --> 02:22:05,760
it's specified in there then it connects

02:22:04,080 --> 02:22:07,760
me up

02:22:05,760 --> 02:22:09,760
and then if the other pod goes down the

02:22:07,760 --> 02:22:12,000
service can just connect me over to this

02:22:09,760 --> 02:22:14,720
one

02:22:12,000 --> 02:22:17,040
and the spec is shown up there as well

02:22:14,720 --> 02:22:18,720
all right so services allow us to keep a

02:22:17,040 --> 02:22:21,280
connection always

02:22:18,720 --> 02:22:22,640
based and talk to a pod on the back end

02:22:21,280 --> 02:22:25,600
types of services

02:22:22,640 --> 02:22:27,600
really quickly cluster ip kubernetes has

02:22:25,600 --> 02:22:31,040
different types of services

02:22:27,600 --> 02:22:33,600
you'll encounter cluster ip is

02:22:31,040 --> 02:22:34,160
basically used to talk within the

02:22:33,600 --> 02:22:37,120
cluster

02:22:34,160 --> 02:22:39,040
internal traffic it's not really meant

02:22:37,120 --> 02:22:40,640
to expose external traffic there is a

02:22:39,040 --> 02:22:42,240
way to do it with a proxy

02:22:40,640 --> 02:22:44,399
but generally it's used for traffic

02:22:42,240 --> 02:22:48,160
within the cluster

02:22:44,399 --> 02:22:50,240
node port is what we saw before

02:22:48,160 --> 02:22:51,920
we have the external traffic going into

02:22:50,240 --> 02:22:53,200
the node port which talks to the port

02:22:51,920 --> 02:22:56,000
talks to the service

02:22:53,200 --> 02:22:57,120
node ports are typically in the range or

02:22:56,000 --> 02:23:01,200
will be in the range of 30

02:22:57,120 --> 02:23:02,720
000 to 32 767. it uses the nodes ip

02:23:01,200 --> 02:23:03,439
address so when you connect to a node

02:23:02,720 --> 02:23:05,680
port

02:23:03,439 --> 02:23:07,520
the node itself has an ip address this

02:23:05,680 --> 02:23:08,240
is the kubernetes node that part of the

02:23:07,520 --> 02:23:10,240
cluster

02:23:08,240 --> 02:23:12,560
that machine in the cluster load

02:23:10,240 --> 02:23:15,040
balancer is more for a cloud environment

02:23:12,560 --> 02:23:18,800
it gives you a load balancer

02:23:15,040 --> 02:23:21,840
a way to distribute traffic in there

02:23:18,800 --> 02:23:23,680
it has it has a cost factor on the cloud

02:23:21,840 --> 02:23:25,600
and there's one called an external name

02:23:23,680 --> 02:23:28,560
which maps a

02:23:25,600 --> 02:23:30,479
service to an external name field so

02:23:28,560 --> 02:23:32,000
tying this all back together before we

02:23:30,479 --> 02:23:34,000
go to our lab

02:23:32,000 --> 02:23:36,800
functions and data center analogy here

02:23:34,000 --> 02:23:38,640
for kubernetes uptime scaling redundancy

02:23:36,800 --> 02:23:40,399
if you think about the containers in a

02:23:38,640 --> 02:23:40,960
pod they can be compared to like the

02:23:40,399 --> 02:23:45,200
servers

02:23:40,960 --> 02:23:47,040
in a data center rack we have

02:23:45,200 --> 02:23:49,040
a container which is like an individual

02:23:47,040 --> 02:23:50,160
machine kind of in a bracket server as a

02:23:49,040 --> 02:23:53,280
data center

02:23:50,160 --> 02:23:55,920
there's a group of pods together or

02:23:53,280 --> 02:23:57,439
a pod is like a rack of servers in there

02:23:55,920 --> 02:23:58,960
you have a rack that has a lot of

02:23:57,439 --> 02:24:00,479
machines in there you have a pod that

02:23:58,960 --> 02:24:02,240
has a lot of containers

02:24:00,479 --> 02:24:03,760
deployment might be multiple racks you

02:24:02,240 --> 02:24:05,600
have multiple racks maybe to handle the

02:24:03,760 --> 02:24:08,160
load of the business there

02:24:05,600 --> 02:24:09,439
so you have multiple pods and then a

02:24:08,160 --> 02:24:11,359
service can be thought of like that

02:24:09,439 --> 02:24:13,200
central kind of login server

02:24:11,359 --> 02:24:14,880
that we can log in to look at the status

02:24:13,200 --> 02:24:16,080
of other machines or get to a pool of

02:24:14,880 --> 02:24:17,840
machines

02:24:16,080 --> 02:24:19,359
and then a namespace is kind of like the

02:24:17,840 --> 02:24:21,600
server room where you group everything

02:24:19,359 --> 02:24:24,960
together

02:24:21,600 --> 02:24:27,040
other kubernetes objects in there whoops

02:24:24,960 --> 02:24:28,880
config maps and secrets let me see how

02:24:27,040 --> 02:24:30,319
long we get to a break here

02:24:28,880 --> 02:24:32,080
i tell you what we have been going

02:24:30,319 --> 02:24:34,000
strong here for a little bit

02:24:32,080 --> 02:24:36,080
let's take about a five minute break at

02:24:34,000 --> 02:24:38,000
least to let you get a breather in here

02:24:36,080 --> 02:24:40,240
and then we'll come back and talk about

02:24:38,000 --> 02:24:40,800
uh the couple other kubernetes objects

02:24:40,240 --> 02:24:42,800
okay

02:24:40,800 --> 02:24:44,080
let's take about a five minute break let

02:24:42,800 --> 02:24:44,800
you get up stretch your legs take a

02:24:44,080 --> 02:24:47,359
break from

02:24:44,800 --> 02:24:48,800
all my uh talking here and then we'll

02:24:47,359 --> 02:24:50,640
come back and talk about

02:24:48,800 --> 02:24:52,240
some of the other objects all right so

02:24:50,640 --> 02:24:54,479
take five minutes and i'll talk to you

02:24:52,240 --> 02:24:54,479
then

02:24:54,560 --> 02:24:58,640
okay folks we're back just wanted to

02:24:56,800 --> 02:25:00,319
give you a little bit of a

02:24:58,640 --> 02:25:01,600
brain break there something dumping so

02:25:00,319 --> 02:25:02,319
much information we're gonna get a few

02:25:01,600 --> 02:25:04,319
more

02:25:02,319 --> 02:25:05,600
topics to talk about to the next lab we

02:25:04,319 --> 02:25:07,359
do have a couple questions here this is

02:25:05,600 --> 02:25:08,880
a good time to look at them

02:25:07,359 --> 02:25:13,120
uh let's see what happens when an

02:25:08,880 --> 02:25:15,680
offline service comes back to online

02:25:13,120 --> 02:25:16,319
i'm guessing maybe you're talking about

02:25:15,680 --> 02:25:18,880
the

02:25:16,319 --> 02:25:20,000
fact where a pod that goes away behind a

02:25:18,880 --> 02:25:22,240
service

02:25:20,000 --> 02:25:24,640
goes away and comes back well so

02:25:22,240 --> 02:25:26,560
basically that's a new instance of

02:25:24,640 --> 02:25:28,880
the pod a new pod that's created the old

02:25:26,560 --> 02:25:30,880
one's been gone away or deleted

02:25:28,880 --> 02:25:32,479
uh unless it was a case like if the pod

02:25:30,880 --> 02:25:33,600
became unstable and then was quick

02:25:32,479 --> 02:25:35,040
enough to come back

02:25:33,600 --> 02:25:37,520
but most times it's going to be the the

02:25:35,040 --> 02:25:39,359
old pod has gone away

02:25:37,520 --> 02:25:41,840
they've been deleted or got because they

02:25:39,359 --> 02:25:43,120
had issues and a new one's been created

02:25:41,840 --> 02:25:44,880
so again that's the case where you'd

02:25:43,120 --> 02:25:48,720
want to make sure your app

02:25:44,880 --> 02:25:51,680
has a way to actually be able to uh

02:25:48,720 --> 02:25:52,720
start back up and recover where the old

02:25:51,680 --> 02:25:54,560
one left off

02:25:52,720 --> 02:25:56,319
in there so it's essentially as if you

02:25:54,560 --> 02:25:58,000
just created a new instance

02:25:56,319 --> 02:25:59,680
and it came back on and it needs to do

02:25:58,000 --> 02:26:01,359
whatever it has to recover

02:25:59,680 --> 02:26:03,359
in the meantime the service itself

02:26:01,359 --> 02:26:05,359
should be redirecting to another pod

02:26:03,359 --> 02:26:06,399
assuming you have multiple instances out

02:26:05,359 --> 02:26:08,640
there

02:26:06,399 --> 02:26:09,680
uh question what happens if a kubernetes

02:26:08,640 --> 02:26:12,399
node goes down

02:26:09,680 --> 02:26:13,680
are the pods recreated on different node

02:26:12,399 --> 02:26:16,080
how does the user get

02:26:13,680 --> 02:26:17,040
to the ip port of the new node in that

02:26:16,080 --> 02:26:18,720
case well

02:26:17,040 --> 02:26:20,640
um in order to kind of answer the last

02:26:18,720 --> 02:26:24,960
question first

02:26:20,640 --> 02:26:27,520
but or basically overall there is a

02:26:24,960 --> 02:26:29,600
node controller part of the system the

02:26:27,520 --> 02:26:30,479
no controller is responsible for doing

02:26:29,600 --> 02:26:32,319
things

02:26:30,479 --> 02:26:33,840
like basically monitoring the node to

02:26:32,319 --> 02:26:34,960
make sure it's still responding it's

02:26:33,840 --> 02:26:37,439
still

02:26:34,960 --> 02:26:38,640
it has resources still doing what it

02:26:37,439 --> 02:26:40,960
needs to do

02:26:38,640 --> 02:26:43,280
out there to run things if it doesn't

02:26:40,960 --> 02:26:44,880
then it can eventually start evicting

02:26:43,280 --> 02:26:45,680
pods that's a whole other topic but

02:26:44,880 --> 02:26:47,280
basically

02:26:45,680 --> 02:26:49,359
if the node for example is running low

02:26:47,280 --> 02:26:50,880
on memory or running low on resources

02:26:49,359 --> 02:26:53,359
it could start evicting things off there

02:26:50,880 --> 02:26:55,200
if it goes down kubernetes should notice

02:26:53,359 --> 02:26:56,160
that eventually and try to reschedule

02:26:55,200 --> 02:26:59,520
that the time

02:26:56,160 --> 02:27:01,280
in there can depend it could be like

02:26:59,520 --> 02:27:02,880
five minutes or so

02:27:01,280 --> 02:27:05,040
but you know it should be able to

02:27:02,880 --> 02:27:07,680
reschedule with the exception now

02:27:05,040 --> 02:27:09,200
if it's the master node that goes down

02:27:07,680 --> 02:27:11,359
versus the worker node

02:27:09,200 --> 02:27:13,600
if it was a masternode then the

02:27:11,359 --> 02:27:15,040
masternode wouldn't be able to send apis

02:27:13,600 --> 02:27:16,160
and stuff to the worker knows

02:27:15,040 --> 02:27:18,240
the jobs in that case should

02:27:16,160 --> 02:27:19,200
theoretically still keep running

02:27:18,240 --> 02:27:20,560
because they've been scheduled and

02:27:19,200 --> 02:27:22,399
running on the worker nodes but the

02:27:20,560 --> 02:27:25,359
masternode wouldn't be available

02:27:22,399 --> 02:27:26,479
to send a to send api request and to

02:27:25,359 --> 02:27:27,920
manage that

02:27:26,479 --> 02:27:29,600
otherwise yeah it should try to

02:27:27,920 --> 02:27:32,880
reschedule them all right

02:27:29,600 --> 02:27:34,479
let's go ahead and go back into our

02:27:32,880 --> 02:27:38,560
presentation here

02:27:34,479 --> 02:27:38,560
and get towards the next lab here

02:27:39,120 --> 02:27:43,680
so we have compared the different parts

02:27:42,319 --> 02:27:45,680
of this

02:27:43,680 --> 02:27:47,680
to the different kinds of our our data

02:27:45,680 --> 02:27:50,800
center analogy

02:27:47,680 --> 02:27:54,560
the other things other objects in their

02:27:50,800 --> 02:27:56,319
config maps config maps are really a way

02:27:54,560 --> 02:27:58,080
to

02:27:56,319 --> 02:27:59,920
separate out things like the environment

02:27:58,080 --> 02:28:01,200
variables the settings

02:27:59,920 --> 02:28:03,359
that we would that we would normally

02:28:01,200 --> 02:28:05,520
need to pass into our containers

02:28:03,359 --> 02:28:06,479
we put them into a config map object in

02:28:05,520 --> 02:28:08,640
kubernetes

02:28:06,479 --> 02:28:10,240
so they can be split out and they can be

02:28:08,640 --> 02:28:12,560
shared out there

02:28:10,240 --> 02:28:13,439
the reason for that is so we don't have

02:28:12,560 --> 02:28:15,840
to

02:28:13,439 --> 02:28:16,640
hard code changes if we have multiple

02:28:15,840 --> 02:28:18,160
ones

02:28:16,640 --> 02:28:20,640
that need to use the same thing we don't

02:28:18,160 --> 02:28:23,200
have to hard code values across

02:28:20,640 --> 02:28:24,080
manifest files we can separate these out

02:28:23,200 --> 02:28:26,080
into their own

02:28:24,080 --> 02:28:28,160
kubernetes objects that have the

02:28:26,080 --> 02:28:31,040
information in the settings

02:28:28,160 --> 02:28:32,800
to and otherwise if you had if you just

02:28:31,040 --> 02:28:34,160
use environment variables you'd have to

02:28:32,800 --> 02:28:37,120
modify them

02:28:34,160 --> 02:28:38,880
change them in every manifest and this

02:28:37,120 --> 02:28:41,439
avoids us having to do the data move the

02:28:38,880 --> 02:28:43,280
data across the objects

02:28:41,439 --> 02:28:45,680
the other thing we can use besides

02:28:43,280 --> 02:28:49,280
config maps is something called secrets

02:28:45,680 --> 02:28:50,960
secrets are intended to hide or

02:28:49,280 --> 02:28:53,120
obfuscate

02:28:50,960 --> 02:28:54,960
sensitive data now i'm using that word

02:28:53,120 --> 02:28:57,840
selectively obfuscate

02:28:54,960 --> 02:28:58,399
or hide meaning that they do a very

02:28:57,840 --> 02:29:01,520
minimal

02:28:58,399 --> 02:29:02,080
encoding by default it's like base64

02:29:01,520 --> 02:29:04,960
encoding

02:29:02,080 --> 02:29:06,640
which is just a very simple encoding but

02:29:04,960 --> 02:29:07,359
at least they don't show things in clear

02:29:06,640 --> 02:29:10,720
text

02:29:07,359 --> 02:29:14,000
so you have secrets then that can store

02:29:10,720 --> 02:29:14,399
settings or values like the database

02:29:14,000 --> 02:29:17,120
name

02:29:14,399 --> 02:29:19,359
or database passwords and stuff that are

02:29:17,120 --> 02:29:22,399
not in clear text and stored out there

02:29:19,359 --> 02:29:25,520
config maps could be used to

02:29:22,399 --> 02:29:27,439
store things that were values

02:29:25,520 --> 02:29:31,520
now when we talk about config maps and

02:29:27,439 --> 02:29:31,520
secrets there's two aspects to this

02:29:31,600 --> 02:29:36,560
we need to create the actual config maps

02:29:34,240 --> 02:29:39,280
the actual secrets as the objects

02:29:36,560 --> 02:29:40,880
that have the values in them and then we

02:29:39,280 --> 02:29:42,080
need to change the things that are

02:29:40,880 --> 02:29:43,680
consuming them

02:29:42,080 --> 02:29:45,600
so if we had a deployment that was

02:29:43,680 --> 02:29:47,680
looking at using environment variables

02:29:45,600 --> 02:29:49,520
and we pulled those values out into a

02:29:47,680 --> 02:29:51,439
config map or a secret

02:29:49,520 --> 02:29:53,920
we would need to go back and change the

02:29:51,439 --> 02:29:55,120
deployment to pick things up now from

02:29:53,920 --> 02:29:56,880
the config map

02:29:55,120 --> 02:29:59,280
if i pull something out into a separate

02:29:56,880 --> 02:30:01,439
file i need to change the original thing

02:29:59,280 --> 02:30:02,080
to reference that file to get the data

02:30:01,439 --> 02:30:04,880
now

02:30:02,080 --> 02:30:06,800
instead of having it hard coded so

02:30:04,880 --> 02:30:09,280
environment values

02:30:06,800 --> 02:30:09,840
variables can be set up in a can be in a

02:30:09,280 --> 02:30:12,240
spec

02:30:09,840 --> 02:30:13,040
as we see at the top here the top

02:30:12,240 --> 02:30:16,080
example of

02:30:13,040 --> 02:30:18,080
the white box on the right

02:30:16,080 --> 02:30:20,720
you see containers you see environment

02:30:18,080 --> 02:30:22,960
variables set up there to use

02:30:20,720 --> 02:30:24,960
we could specify you could create a

02:30:22,960 --> 02:30:28,240
secret for the api key

02:30:24,960 --> 02:30:30,640
and create a config map for the language

02:30:28,240 --> 02:30:32,960
and then we can change the original

02:30:30,640 --> 02:30:34,880
consuming object to consume them

02:30:32,960 --> 02:30:36,160
basically if you look at the bottom

02:30:34,880 --> 02:30:38,319
we're using the cube cuddle create

02:30:36,160 --> 02:30:41,359
command because this is simple enough

02:30:38,319 --> 02:30:42,720
to create a secret for the api key

02:30:41,359 --> 02:30:45,040
you can probably kind of guess the way

02:30:42,720 --> 02:30:48,080
it's working here we create a secret

02:30:45,040 --> 02:30:49,359
ape called api key from literal from

02:30:48,080 --> 02:30:51,680
this value here

02:30:49,359 --> 02:30:53,040
we also create a config map from the

02:30:51,680 --> 02:30:55,120
literal for english

02:30:53,040 --> 02:30:56,960
so we create separate kubernetes objects

02:30:55,120 --> 02:30:57,760
config map and secret containing these

02:30:56,960 --> 02:31:01,520
values

02:30:57,760 --> 02:31:04,000
we then can pull them in we change the

02:31:01,520 --> 02:31:05,600
spec in the original item notice that

02:31:04,000 --> 02:31:07,280
where we had environment before our

02:31:05,600 --> 02:31:10,640
environment now says

02:31:07,280 --> 02:31:14,000
value from in the lower right value from

02:31:10,640 --> 02:31:17,200
config map key ref and

02:31:14,000 --> 02:31:18,960
language a value from secret key ref so

02:31:17,200 --> 02:31:22,240
it goes out to the object we created and

02:31:18,960 --> 02:31:22,240
pulls the values from there

02:31:22,640 --> 02:31:26,880
one other point we want to mention is

02:31:24,720 --> 02:31:28,640
disk storage this storage comes into

02:31:26,880 --> 02:31:31,280
play with kubernetes

02:31:28,640 --> 02:31:32,319
and how do we get this external storage

02:31:31,280 --> 02:31:34,720
so

02:31:32,319 --> 02:31:35,600
if you think about a container the

02:31:34,720 --> 02:31:38,479
container

02:31:35,600 --> 02:31:40,560
contains a file system when we created

02:31:38,479 --> 02:31:43,200
our container we went in and looked at

02:31:40,560 --> 02:31:45,200
did the docker exec earlier and we went

02:31:43,200 --> 02:31:47,760
into the database piece

02:31:45,200 --> 02:31:49,439
and we actually went inside of there ran

02:31:47,760 --> 02:31:50,960
the mysql commands

02:31:49,439 --> 02:31:52,800
looked around that was a file system

02:31:50,960 --> 02:31:54,640
right there was a file system there

02:31:52,800 --> 02:31:56,479
so there was a disk inside the container

02:31:54,640 --> 02:31:58,479
where we could store stuff

02:31:56,479 --> 02:32:00,240
but it is ephemeral meaning if the

02:31:58,479 --> 02:32:02,560
container goes away

02:32:00,240 --> 02:32:04,399
any changes that we made while it's

02:32:02,560 --> 02:32:06,720
running are lost

02:32:04,399 --> 02:32:07,680
so we need we can have a volume in our

02:32:06,720 --> 02:32:09,680
pod

02:32:07,680 --> 02:32:10,960
which is a volume there that is shared

02:32:09,680 --> 02:32:12,960
among the containers

02:32:10,960 --> 02:32:14,160
which kind of moves the problem out one

02:32:12,960 --> 02:32:15,600
level

02:32:14,160 --> 02:32:17,439
it can preserve data across the

02:32:15,600 --> 02:32:18,880
containers crashes because it's separate

02:32:17,439 --> 02:32:20,080
it's in the pod but it's a separate

02:32:18,880 --> 02:32:23,359
storage space

02:32:20,080 --> 02:32:24,960
within the pod but if the pod goes away

02:32:23,359 --> 02:32:27,520
we have the same problem with

02:32:24,960 --> 02:32:28,399
with the containers then the data is

02:32:27,520 --> 02:32:29,680
gone

02:32:28,399 --> 02:32:32,319
so what we really need are these

02:32:29,680 --> 02:32:34,800
persistent volumes or disk storage

02:32:32,319 --> 02:32:36,640
that is outside of the container and

02:32:34,800 --> 02:32:39,120
outside of the pod

02:32:36,640 --> 02:32:40,720
that could be uh has a life cycle

02:32:39,120 --> 02:32:41,840
independent of any pod meaning it

02:32:40,720 --> 02:32:43,840
doesn't it's not

02:32:41,840 --> 02:32:46,240
going to go away if the pod goes away

02:32:43,840 --> 02:32:47,840
it's stored somewhere else

02:32:46,240 --> 02:32:49,439
that's called a persistent volume it

02:32:47,840 --> 02:32:51,040
could be out on the network it could be

02:32:49,439 --> 02:32:52,000
out on the cloud it could be anywhere

02:32:51,040 --> 02:32:55,200
that's away from the

02:32:52,000 --> 02:32:56,880
potter's outside of the pod

02:32:55,200 --> 02:32:58,880
in kubernetes we have a thing called a

02:32:56,880 --> 02:33:00,800
persistent volume claim

02:32:58,880 --> 02:33:02,560
think of a claim as like a claim check

02:33:00,800 --> 02:33:03,840
if you've ever been to a party or a

02:33:02,560 --> 02:33:06,000
restaurant or something

02:33:03,840 --> 02:33:06,880
where you gave somebody your coat or

02:33:06,000 --> 02:33:08,880
your hat

02:33:06,880 --> 02:33:10,080
and then later on you had a claim check

02:33:08,880 --> 02:33:11,120
and you took it back and they gave it

02:33:10,080 --> 02:33:14,000
back to you

02:33:11,120 --> 02:33:14,399
kind of the idea here of the claim we

02:33:14,000 --> 02:33:17,200
have

02:33:14,399 --> 02:33:18,319
a persistent volume claim which is a way

02:33:17,200 --> 02:33:21,200
of saying

02:33:18,319 --> 02:33:23,920
i need storage that looks like this

02:33:21,200 --> 02:33:25,600
maybe storage that has a certain size or

02:33:23,920 --> 02:33:28,000
storage that has a certain

02:33:25,600 --> 02:33:29,040
uh quality of service or a certain

02:33:28,000 --> 02:33:32,080
uptime

02:33:29,040 --> 02:33:33,920
so you can define different storage

02:33:32,080 --> 02:33:34,640
areas with different characteristics out

02:33:33,920 --> 02:33:37,359
there for your

02:33:34,640 --> 02:33:39,040
objects and kubernetes and then you can

02:33:37,359 --> 02:33:39,760
define a persistent volume claim that

02:33:39,040 --> 02:33:41,439
says

02:33:39,760 --> 02:33:43,359
i need something that looks like this

02:33:41,439 --> 02:33:48,160
storage looks like that and kubernetes

02:33:43,359 --> 02:33:50,720
will try to match it and give it to you

02:33:48,160 --> 02:33:52,800
so the persistent volume claim defines

02:33:50,720 --> 02:33:55,840
an amount of storage is looking at

02:33:52,800 --> 02:33:57,520
looking for access modes uh

02:33:55,840 --> 02:33:59,680
and kubernetes will often try to find a

02:33:57,520 --> 02:34:01,439
persistent volume and match it to it

02:33:59,680 --> 02:34:03,439
persistent volume claims have different

02:34:01,439 --> 02:34:05,840
access modes out there

02:34:03,439 --> 02:34:07,840
meaning can pods read access can pods

02:34:05,840 --> 02:34:09,359
have read write access and so on

02:34:07,840 --> 02:34:11,600
if you look on the right hand side of

02:34:09,359 --> 02:34:16,319
this slide there's examples there

02:34:11,600 --> 02:34:19,680
you can see that if we look

02:34:16,319 --> 02:34:21,120
down persistent volume claim is a kind

02:34:19,680 --> 02:34:23,359
up there and you can see that we are

02:34:21,120 --> 02:34:26,880
asking for a certain type of storage

02:34:23,359 --> 02:34:29,920
uh 128 meg here storage class

02:34:26,880 --> 02:34:32,000
and then we also have deployments here

02:34:29,920 --> 02:34:32,880
we have container amounts we have all

02:34:32,000 --> 02:34:35,520
kinds of things

02:34:32,880 --> 02:34:37,439
so we're asking for persistent volumes

02:34:35,520 --> 02:34:40,479
out there persistent volume claim to get

02:34:37,439 --> 02:34:40,479
that kind of storage

02:34:40,880 --> 02:34:44,319
that brings us up to lab number four a

02:34:42,960 --> 02:34:45,840
lot of material about

02:34:44,319 --> 02:34:47,120
the lab number four is going to give you

02:34:45,840 --> 02:34:48,720
a chance to actually get your hands

02:34:47,120 --> 02:34:51,680
dirty with kubernetes

02:34:48,720 --> 02:34:53,359
so let's take a look at lab number four

02:34:51,680 --> 02:34:56,000
let me stop sharing the

02:34:53,359 --> 02:34:56,000
slides

02:34:56,640 --> 02:35:01,680
and let's go ahead and share the labs

02:34:59,200 --> 02:35:01,680
document

02:35:06,880 --> 02:35:11,359
so lab number three we left off we went

02:35:09,760 --> 02:35:12,160
in and looked around a little bit and

02:35:11,359 --> 02:35:15,280
played with it

02:35:12,160 --> 02:35:17,120
and uh looked at containers

02:35:15,280 --> 02:35:18,399
we pushed our containers up right we

02:35:17,120 --> 02:35:21,120
pushed our images up

02:35:18,399 --> 02:35:22,240
into the registry the local registry now

02:35:21,120 --> 02:35:25,600
we're going to get to play with

02:35:22,240 --> 02:35:27,200
kubernetes so lab number four

02:35:25,600 --> 02:35:28,800
we're going to switch back into a

02:35:27,200 --> 02:35:30,640
directory for kubernetes so we're going

02:35:28,800 --> 02:35:33,920
to switch from

02:35:30,640 --> 02:35:35,520
the atows dock roar docker to the raw

02:35:33,920 --> 02:35:37,760
kubernetes directory

02:35:35,520 --> 02:35:39,359
in there there's a single manifest file

02:35:37,760 --> 02:35:42,240
one big manifest file

02:35:39,359 --> 02:35:43,280
which has all the objects that we need

02:35:42,240 --> 02:35:46,640
for

02:35:43,280 --> 02:35:49,680
our ror specification for the database

02:35:46,640 --> 02:35:50,640
and the web app we're going to go ahead

02:35:49,680 --> 02:35:54,000
and create a name

02:35:50,640 --> 02:35:56,399
or get it get a namespace

02:35:54,000 --> 02:35:58,000
let's see what namespaces are out there

02:35:56,399 --> 02:35:59,280
and then we're going to create a

02:35:58,000 --> 02:36:00,319
namespace we're going to create our own

02:35:59,280 --> 02:36:03,359
namespace called

02:36:00,319 --> 02:36:05,439
ror in step 2 then we'll just do an

02:36:03,359 --> 02:36:06,960
apply remember that an apply is going to

02:36:05,439 --> 02:36:10,000
take our yaml file

02:36:06,960 --> 02:36:11,680
and tell kubernetes to go off and create

02:36:10,000 --> 02:36:13,439
these objects for us kind of like the

02:36:11,680 --> 02:36:14,240
idea of giving your order to a waiter an

02:36:13,439 --> 02:36:16,640
order

02:36:14,240 --> 02:36:18,479
ordering online to get what you want

02:36:16,640 --> 02:36:20,319
tell it gives kubernetes so here's my

02:36:18,479 --> 02:36:21,760
order go fill it

02:36:20,319 --> 02:36:23,439
after that we'll see some objects

02:36:21,760 --> 02:36:25,840
created we'll get

02:36:23,439 --> 02:36:26,640
pods and then we'll get a lovely error

02:36:25,840 --> 02:36:29,280
message so

02:36:26,640 --> 02:36:29,920
this is a heads up to you in step number

02:36:29,280 --> 02:36:32,160
four

02:36:29,920 --> 02:36:34,240
you will see an error message you will

02:36:32,160 --> 02:36:36,880
see pods sitting there saying

02:36:34,240 --> 02:36:38,479
image pull back off or error image pool

02:36:36,880 --> 02:36:40,160
depending on when you get to it

02:36:38,479 --> 02:36:41,920
i'd rather you run into this kind of

02:36:40,160 --> 02:36:44,720
thing in the workshop

02:36:41,920 --> 02:36:46,479
than instead of actually hitting it in

02:36:44,720 --> 02:36:48,399
the real world so you have an idea

02:36:46,479 --> 02:36:50,479
so the image pull back off or area image

02:36:48,399 --> 02:36:51,200
pool is not an uncommon one basically it

02:36:50,479 --> 02:36:52,800
means

02:36:51,200 --> 02:36:54,960
there was something that the pod

02:36:52,800 --> 02:36:57,600
couldn't start because of some reason

02:36:54,960 --> 02:36:59,040
so the pod can't start we need to figure

02:36:57,600 --> 02:37:00,479
out what it is

02:36:59,040 --> 02:37:03,439
the next couple of steps will kind of

02:37:00,479 --> 02:37:06,000
guide you through that

02:37:03,439 --> 02:37:07,120
looking at it and basically it's because

02:37:06,000 --> 02:37:10,160
our special

02:37:07,120 --> 02:37:12,160
yaml file has a typo in it

02:37:10,160 --> 02:37:14,399
so the ammo file will go through and

02:37:12,160 --> 02:37:17,359
then in step number 10

02:37:14,399 --> 02:37:19,120
we'll actually edit the yaml file now

02:37:17,359 --> 02:37:20,560
you may see some errors come up on the

02:37:19,120 --> 02:37:22,240
screen when you use the editor don't

02:37:20,560 --> 02:37:24,319
worry about that it's just the way the

02:37:22,240 --> 02:37:26,240
editor interacts with the os

02:37:24,319 --> 02:37:30,000
and then what we'll change a couple will

02:37:26,240 --> 02:37:31,840
change lines in step 10 to make it work

02:37:30,000 --> 02:37:33,920
we'll get the pods we'll start up a

02:37:31,840 --> 02:37:34,240
watch so in step 11 we're going to open

02:37:33,920 --> 02:37:37,040
up

02:37:34,240 --> 02:37:38,160
our another terminal or go to another

02:37:37,040 --> 02:37:40,640
terminal window

02:37:38,160 --> 02:37:41,680
and add do a get pods remember that gets

02:37:40,640 --> 02:37:43,600
like a list

02:37:41,680 --> 02:37:45,120
the dash w just means watch means kind

02:37:43,600 --> 02:37:46,319
of keep an eye on it kind of show me

02:37:45,120 --> 02:37:48,960
what's going on

02:37:46,319 --> 02:37:50,000
all the way around we'll reapply our

02:37:48,960 --> 02:37:52,000
changes

02:37:50,000 --> 02:37:53,280
you'll see then in the watch window as

02:37:52,000 --> 02:37:54,000
you see in the screenshot here in step

02:37:53,280 --> 02:37:56,319
02:37:54,000 --> 02:37:58,479
you'll see pods terminating kubernetes

02:37:56,319 --> 02:38:00,080
says you've given me a new spec

02:37:58,479 --> 02:38:01,520
i'm going to kill off the old ones and

02:38:00,080 --> 02:38:04,240
i'm going to start things create new

02:38:01,520 --> 02:38:05,840
ones based on the spec

02:38:04,240 --> 02:38:07,520
then we'll look at our deployment we'll

02:38:05,840 --> 02:38:09,600
get the service and then we should be

02:38:07,520 --> 02:38:12,399
able to actually open it up

02:38:09,600 --> 02:38:12,720
all right let's take about a 15-minute

02:38:12,399 --> 02:38:14,000
uh

02:38:12,720 --> 02:38:16,000
break here i know we just had a break

02:38:14,000 --> 02:38:18,000
but this one's a little bit longer uh

02:38:16,000 --> 02:38:19,920
this lab a little bit longer let's take

02:38:18,000 --> 02:38:20,880
about a 15-minute break here to give you

02:38:19,920 --> 02:38:24,240
a chance to work

02:38:20,880 --> 02:38:24,640
on lab number four and then we'll come

02:38:24,240 --> 02:38:27,760
back

02:38:24,640 --> 02:38:30,720
and go into using talking about helm

02:38:27,760 --> 02:38:31,280
all right work through lab number four

02:38:30,720 --> 02:38:32,960
and

02:38:31,280 --> 02:38:34,319
go ahead and post any questions you have

02:38:32,960 --> 02:38:35,200
just kind of follow through again

02:38:34,319 --> 02:38:37,439
remember

02:38:35,200 --> 02:38:38,399
that on that initial deployment you will

02:38:37,439 --> 02:38:40,160
have errors

02:38:38,399 --> 02:38:42,080
you will see that error image pool air

02:38:40,160 --> 02:38:43,760
image backup again i'd rather you see

02:38:42,080 --> 02:38:45,359
that in this kind of environment

02:38:43,760 --> 02:38:46,960
then kind of be surprised by it when you

02:38:45,359 --> 02:38:47,760
go into real worlds i'll show you how to

02:38:46,960 --> 02:38:50,160
fix that

02:38:47,760 --> 02:38:51,520
in this case all right take 15 minutes

02:38:50,160 --> 02:38:54,960
work on lab number four and then we'll

02:38:51,520 --> 02:38:54,960
come back and talk about helm

02:38:55,359 --> 02:38:58,080
hey everyone we're back so hopefully

02:38:56,720 --> 02:39:00,160
that gave you time to work through the

02:38:58,080 --> 02:39:02,640
kubernetes exercise

02:39:00,160 --> 02:39:04,240
in there uh donald i appreciated your

02:39:02,640 --> 02:39:05,840
comment about film

02:39:04,240 --> 02:39:07,359
there too depend you can use whatever

02:39:05,840 --> 02:39:08,319
editor you want i should have said that

02:39:07,359 --> 02:39:09,840
before but

02:39:08,319 --> 02:39:12,800
i just put g edit in here because it's

02:39:09,840 --> 02:39:16,640
fairly easy to use i think on this

02:39:12,800 --> 02:39:19,120
in this kind of environment um

02:39:16,640 --> 02:39:20,800
let's go ahead see one q a is docker

02:39:19,120 --> 02:39:22,479
composed ever used in tandem with

02:39:20,800 --> 02:39:23,280
kubernetes or is kubernetes meant to

02:39:22,479 --> 02:39:24,560
replace

02:39:23,280 --> 02:39:27,280
docker compose in sort of a more

02:39:24,560 --> 02:39:27,600
scalable way i don't know that you would

02:39:27,280 --> 02:39:30,160
ever

02:39:27,600 --> 02:39:31,680
use docker compose uh with kubernetes

02:39:30,160 --> 02:39:32,800
two different sorts of systems there

02:39:31,680 --> 02:39:35,920
kubernetes

02:39:32,800 --> 02:39:37,439
is its own ecosystem its own system

02:39:35,920 --> 02:39:39,359
designed to manage containers in there

02:39:37,439 --> 02:39:42,240
docker composer be used

02:39:39,359 --> 02:39:44,160
uh you know on a much smaller scale

02:39:42,240 --> 02:39:46,000
where you didn't need a cluster

02:39:44,160 --> 02:39:47,520
orchestration system like kubernetes

02:39:46,000 --> 02:39:48,240
there so no i don't think they would

02:39:47,520 --> 02:39:50,560
ever

02:39:48,240 --> 02:39:52,000
uh be used together there because it

02:39:50,560 --> 02:39:54,800
wouldn't kubernetes

02:39:52,000 --> 02:39:56,240
wouldn't need other tools that could run

02:39:54,800 --> 02:39:59,040
multiple containers if

02:39:56,240 --> 02:40:00,479
that's what it's designed for there so i

02:39:59,040 --> 02:40:02,479
wouldn't see it ever used together but

02:40:00,479 --> 02:40:05,680
it does kind of to your point

02:40:02,479 --> 02:40:07,439
does kind of scale up the functionality

02:40:05,680 --> 02:40:09,920
similar to what docker compose does in

02:40:07,439 --> 02:40:13,040
terms of running things together

02:40:09,920 --> 02:40:16,319
at a much more huge way

02:40:13,040 --> 02:40:18,560
all right uh let's go ahead and uh

02:40:16,319 --> 02:40:20,080
take a look well let's talk a little bit

02:40:18,560 --> 02:40:22,160
about where we've come from good news

02:40:20,080 --> 02:40:24,240
is only about an hour left to go so

02:40:22,160 --> 02:40:26,319
thank you everybody for hanging in there

02:40:24,240 --> 02:40:28,160
i'm hoping this is being this is useful

02:40:26,319 --> 02:40:29,279
to you but if you think about where we

02:40:28,160 --> 02:40:33,520
come from

02:40:29,279 --> 02:40:35,200
now um in terms of where we started we

02:40:33,520 --> 02:40:36,160
started out with showing the doctor

02:40:35,200 --> 02:40:39,359
files

02:40:36,160 --> 02:40:40,080
that created instructions to create the

02:40:39,359 --> 02:40:41,840
images

02:40:40,080 --> 02:40:43,520
then that would like to provision

02:40:41,840 --> 02:40:45,760
software on a system

02:40:43,520 --> 02:40:48,240
then we add the container layer in there

02:40:45,760 --> 02:40:51,200
to have the place to read write in there

02:40:48,240 --> 02:40:52,720
those images then become the basis for

02:40:51,200 --> 02:40:55,120
the containers that we

02:40:52,720 --> 02:40:56,399
uh run throughout and as we scale up the

02:40:55,120 --> 02:40:57,840
number of containers

02:40:56,399 --> 02:40:59,439
and we need to do those kind of

02:40:57,840 --> 02:41:00,560
functionalities like we talked about the

02:40:59,439 --> 02:41:03,920
data center

02:41:00,560 --> 02:41:05,359
uh scaling uh restarting them

02:41:03,920 --> 02:41:07,439
making sure they're up and running

02:41:05,359 --> 02:41:09,840
that's where kubernetes comes into play

02:41:07,439 --> 02:41:11,680
kubernetes wraps a lot of metadata

02:41:09,840 --> 02:41:13,920
around it so we can tell what we want

02:41:11,680 --> 02:41:15,760
that idea again of giving specifying our

02:41:13,920 --> 02:41:16,560
order i want something that looks like

02:41:15,760 --> 02:41:19,359
this

02:41:16,560 --> 02:41:22,640
declarative mode in there and notice

02:41:19,359 --> 02:41:24,479
here that now with kubernetes

02:41:22,640 --> 02:41:26,080
once you have the kubernetes running

02:41:24,479 --> 02:41:28,080
your containers for you

02:41:26,080 --> 02:41:29,200
running your application you're not

02:41:28,080 --> 02:41:31,600
having to sit there

02:41:29,200 --> 02:41:32,479
or have someone sit there and monitor it

02:41:31,600 --> 02:41:33,760
all the time

02:41:32,479 --> 02:41:35,359
you're not having to have someone sit

02:41:33,760 --> 02:41:35,760
there and say oops my application went

02:41:35,359 --> 02:41:38,399
down

02:41:35,760 --> 02:41:39,760
or get a you know a warning alert

02:41:38,399 --> 02:41:41,359
message and then you have to go out

02:41:39,760 --> 02:41:43,520
there and start it up again

02:41:41,359 --> 02:41:44,800
uh to do those kinds of things so you're

02:41:43,520 --> 02:41:47,359
not having to go through

02:41:44,800 --> 02:41:50,240
and manage that and worry about the

02:41:47,359 --> 02:41:52,319
deployment and worry about the

02:41:50,240 --> 02:41:53,520
scaling and stuff automatically i mean

02:41:52,319 --> 02:41:55,200
or having it

02:41:53,520 --> 02:41:57,200
scaled up or down now you can use

02:41:55,200 --> 02:41:59,520
kubernetes to scale it up or down

02:41:57,200 --> 02:42:00,800
through the interface there but you

02:41:59,520 --> 02:42:03,359
could also set it up to be

02:42:00,800 --> 02:42:04,000
what we call horizontally auto scale

02:42:03,359 --> 02:42:05,439
there

02:42:04,000 --> 02:42:07,120
so all those kinds of things don't

02:42:05,439 --> 02:42:08,240
require you to have your attention

02:42:07,120 --> 02:42:11,200
focused on that

02:42:08,240 --> 02:42:12,080
kind of that same idea with docker that

02:42:11,200 --> 02:42:14,479
you get to focus

02:42:12,080 --> 02:42:16,240
more on the application you get to focus

02:42:14,479 --> 02:42:18,960
more on the application

02:42:16,240 --> 02:42:19,680
and the environment the scalability the

02:42:18,960 --> 02:42:22,640
deployment

02:42:19,680 --> 02:42:24,160
all those once you've defined what you

02:42:22,640 --> 02:42:26,319
want and declare what you want

02:42:24,160 --> 02:42:27,840
kubernetes takes care of and manages for

02:42:26,319 --> 02:42:29,520
you of course it's not always that

02:42:27,840 --> 02:42:31,520
simple but that's the idea out there

02:42:29,520 --> 02:42:34,160
that's the basic idea with it

02:42:31,520 --> 02:42:36,479
so let's go ahead and jump back into our

02:42:34,160 --> 02:42:40,800
presentation and talk about

02:42:36,479 --> 02:42:44,640
uh talk about helm

02:42:40,800 --> 02:42:46,080
so kubernetes is very powerful

02:42:44,640 --> 02:42:47,760
can do a lot of things for us as we've

02:42:46,080 --> 02:42:49,279
seen and

02:42:47,760 --> 02:42:51,520
and by the way i hope you're all able to

02:42:49,279 --> 02:42:52,000
get past the uh the image pool and those

02:42:51,520 --> 02:42:54,160
kinds of

02:42:52,000 --> 02:42:56,319
errors in there too again it can be a

02:42:54,160 --> 02:42:57,200
little disconcerting when you first see

02:42:56,319 --> 02:42:59,840
that

02:42:57,200 --> 02:43:00,880
but what i wanted to share with you was

02:42:59,840 --> 02:43:03,040
to kind of

02:43:00,880 --> 02:43:04,800
be able to see that and figure out okay

02:43:03,040 --> 02:43:07,439
what's really going on here

02:43:04,800 --> 02:43:08,000
in this case it was as simple as we had

02:43:07,439 --> 02:43:10,720
a typo

02:43:08,000 --> 02:43:11,359
in the ammo file in other cases it could

02:43:10,720 --> 02:43:12,960
be

02:43:11,359 --> 02:43:15,120
you know something more complex but you

02:43:12,960 --> 02:43:16,800
can still use the same kinds of tools

02:43:15,120 --> 02:43:18,640
and processes

02:43:16,800 --> 02:43:19,840
and looking around at the logs and those

02:43:18,640 --> 02:43:21,600
kinds of things

02:43:19,840 --> 02:43:23,439
there to figure out what's going on so

02:43:21,600 --> 02:43:25,439
let's give you the basic idea

02:43:23,439 --> 02:43:27,120
so kubernetes though when we go to

02:43:25,439 --> 02:43:29,200
deploy something out there

02:43:27,120 --> 02:43:30,319
we can have a number of different types

02:43:29,200 --> 02:43:32,240
of objects

02:43:30,319 --> 02:43:33,359
we can have deployments we can have

02:43:32,240 --> 02:43:36,640
services we could have

02:43:33,359 --> 02:43:38,319
ingresses we could have um whatever out

02:43:36,640 --> 02:43:39,840
there different types of objects

02:43:38,319 --> 02:43:41,920
and we could have a lot of those and we

02:43:39,840 --> 02:43:45,120
could have a lot of the one

02:43:41,920 --> 02:43:48,080
those kinds of specifications manifest

02:43:45,120 --> 02:43:49,200
for each of the items that we have if we

02:43:48,080 --> 02:43:51,279
have

02:43:49,200 --> 02:43:53,359
you know 30 different microservices each

02:43:51,279 --> 02:43:56,960
one of them could have a deployment

02:43:53,359 --> 02:43:59,920
and a service and so on in there

02:43:56,960 --> 02:44:01,359
so the number of manifests the number of

02:43:59,920 --> 02:44:04,399
the specifications

02:44:01,359 --> 02:44:04,960
that we are having to manage to just do

02:44:04,399 --> 02:44:07,760
a

02:44:04,960 --> 02:44:08,640
application can mushroom very quickly

02:44:07,760 --> 02:44:10,880
that's where

02:44:08,640 --> 02:44:12,319
the helm comes in helm is a package

02:44:10,880 --> 02:44:13,279
manager life cycle manager for

02:44:12,319 --> 02:44:15,040
kubernetes

02:44:13,279 --> 02:44:17,359
you can think of it kind of like yum or

02:44:15,040 --> 02:44:20,720
apt one of these package managers for

02:44:17,359 --> 02:44:23,279
an os its main

02:44:20,720 --> 02:44:25,200
job is it bundles related manifest such

02:44:23,279 --> 02:44:26,319
as deployment email service yaml etc

02:44:25,200 --> 02:44:28,560
into a chart

02:44:26,319 --> 02:44:29,520
now a chart is just a unit that helm

02:44:28,560 --> 02:44:31,439
deals with

02:44:29,520 --> 02:44:33,279
which essentially encompasses all of

02:44:31,439 --> 02:44:35,439
these manifest together

02:44:33,279 --> 02:44:37,600
and tracks them as a unit when we

02:44:35,439 --> 02:44:39,040
actually install a chart we take that

02:44:37,600 --> 02:44:41,200
set of manifest

02:44:39,040 --> 02:44:42,240
and we tell and we apply it into

02:44:41,200 --> 02:44:44,960
kubernetes

02:44:42,240 --> 02:44:46,160
then it becomes a release a release is a

02:44:44,960 --> 02:44:48,319
chart that's been deployed

02:44:46,160 --> 02:44:49,920
into kubernetes it allows us to do

02:44:48,319 --> 02:44:51,040
things like lifecycle management

02:44:49,920 --> 02:44:55,200
operations create

02:44:51,040 --> 02:44:57,120
install upgrade version roll back delete

02:44:55,200 --> 02:44:58,240
get status of things running in

02:44:57,120 --> 02:45:01,120
kubernetes

02:44:58,240 --> 02:45:02,640
the benefits it provides templating one

02:45:01,120 --> 02:45:06,479
of the things with helm

02:45:02,640 --> 02:45:09,200
is it provides a way to reuse manifest

02:45:06,479 --> 02:45:10,479
and it provides a way to customize them

02:45:09,200 --> 02:45:12,720
from

02:45:10,479 --> 02:45:14,000
run to running kubernetes if you think

02:45:12,720 --> 02:45:16,399
about what we've seen so far

02:45:14,000 --> 02:45:18,160
deployment yaml service yamls everything

02:45:16,399 --> 02:45:20,160
is hard coded in there now some stuff we

02:45:18,160 --> 02:45:20,800
can move out to config maps and secrets

02:45:20,160 --> 02:45:22,640
and such

02:45:20,800 --> 02:45:24,800
but we still have very hard-coded values

02:45:22,640 --> 02:45:26,479
in there and that's fine if we're just

02:45:24,800 --> 02:45:28,240
running like one instance of it that's

02:45:26,479 --> 02:45:30,080
always the same where multiple instances

02:45:28,240 --> 02:45:31,920
are always always the same

02:45:30,080 --> 02:45:33,520
what happens though if we need to

02:45:31,920 --> 02:45:34,240
customize something let's say we need to

02:45:33,520 --> 02:45:36,319
have

02:45:34,240 --> 02:45:37,840
one instance running with port 8080

02:45:36,319 --> 02:45:41,520
another one with port

02:45:37,840 --> 02:45:43,359
9090 or we need to have a one that pulls

02:45:41,520 --> 02:45:44,880
down version one of our image

02:45:43,359 --> 02:45:46,960
in the container another one pulls down

02:45:44,880 --> 02:45:49,279
the newer version version two

02:45:46,960 --> 02:45:50,479
of our application in there we would

02:45:49,279 --> 02:45:53,279
have to make

02:45:50,479 --> 02:45:54,800
new copies of those manifest and have

02:45:53,279 --> 02:45:56,960
multiple copies out there

02:45:54,800 --> 02:45:58,319
what helm does for us is allow us to put

02:45:56,960 --> 02:46:01,200
placeholders

02:45:58,319 --> 02:46:02,000
into these yaml files they become

02:46:01,200 --> 02:46:03,840
templates

02:46:02,000 --> 02:46:06,880
templates meaning they have placeholders

02:46:03,840 --> 02:46:08,640
for values and values get filled in

02:46:06,880 --> 02:46:11,359
and that then becomes what we give to

02:46:08,640 --> 02:46:13,600
kubernetes to give it the fully rendered

02:46:11,359 --> 02:46:16,080
manifest

02:46:13,600 --> 02:46:17,920
so templeton repeatability uh

02:46:16,080 --> 02:46:20,399
reliability in multiple environments

02:46:17,920 --> 02:46:21,840
we'll look at all of those but again why

02:46:20,399 --> 02:46:24,479
do we need something like this well

02:46:21,840 --> 02:46:25,920
simple scale and complexity as we get

02:46:24,479 --> 02:46:29,920
into working with

02:46:25,920 --> 02:46:31,439
multiple pods across kubernetes multiple

02:46:29,920 --> 02:46:32,080
applications running their containers

02:46:31,439 --> 02:46:34,000
there

02:46:32,080 --> 02:46:35,600
for example we set a microservice it can

02:46:34,000 --> 02:46:37,680
be a pod plus a deployment plus a

02:46:35,600 --> 02:46:39,600
replication set plus an ingress

02:46:37,680 --> 02:46:41,520
plus a service multiplied by the number

02:46:39,600 --> 02:46:43,840
of times we have microservices

02:46:41,520 --> 02:46:45,600
so the duplication of values can across

02:46:43,840 --> 02:46:47,200
objects get really

02:46:45,600 --> 02:46:48,960
excessive if we're trying to create

02:46:47,200 --> 02:46:51,120
multiple instances of that

02:46:48,960 --> 02:46:53,680
can be hard to override values instead

02:46:51,120 --> 02:46:55,120
of being able to parameterize it

02:46:53,680 --> 02:46:57,040
managing all the life cycle is

02:46:55,120 --> 02:46:59,600
challenging for example

02:46:57,040 --> 02:47:01,040
if i were doing a simple uh application

02:46:59,600 --> 02:47:02,160
which had a front and a back in a

02:47:01,040 --> 02:47:03,680
database

02:47:02,160 --> 02:47:05,200
you can imagine for the front end i'd

02:47:03,680 --> 02:47:08,000
have deployments

02:47:05,200 --> 02:47:08,560
config maps secrets ingress services

02:47:08,000 --> 02:47:10,560
back-end

02:47:08,560 --> 02:47:12,000
same sort of deal out there maybe a

02:47:10,560 --> 02:47:16,080
couple deployments

02:47:12,000 --> 02:47:16,800
database different couple config maps

02:47:16,080 --> 02:47:19,040
out there

02:47:16,800 --> 02:47:20,479
you can see the number of individual

02:47:19,040 --> 02:47:23,840
things that we treat as

02:47:20,479 --> 02:47:24,960
these files becomes very overwhelming

02:47:23,840 --> 02:47:27,439
very quickly

02:47:24,960 --> 02:47:28,800
and requires a lot of synchronization so

02:47:27,439 --> 02:47:31,279
in that case we'd have to do

02:47:28,800 --> 02:47:33,279
cube cuddle applies now you could do

02:47:31,279 --> 02:47:35,279
multiple files

02:47:33,279 --> 02:47:37,120
or wild carding even with an apply but

02:47:35,279 --> 02:47:38,800
this is kind of illustrate the point

02:47:37,120 --> 02:47:41,120
you're still going to have to multiple

02:47:38,800 --> 02:47:43,120
app apply commands to get that out there

02:47:41,120 --> 02:47:44,720
so how does helm simplify things well

02:47:43,120 --> 02:47:46,479
traditional deployments done with cube

02:47:44,720 --> 02:47:48,399
cuddle across files

02:47:46,479 --> 02:47:49,520
separately managed items but helm

02:47:48,399 --> 02:47:51,840
deploys units called

02:47:49,520 --> 02:47:52,880
charts so traditional kubernetes we

02:47:51,840 --> 02:47:55,359
would do an apply

02:47:52,880 --> 02:47:56,000
of a yaml of a service and an ingress in

02:47:55,359 --> 02:47:58,240
there

02:47:56,000 --> 02:47:59,439
in the helm world we group those files

02:47:58,240 --> 02:48:02,880
together under this

02:47:59,439 --> 02:48:03,920
uh umbrella or this abstraction called a

02:48:02,880 --> 02:48:07,120
chart

02:48:03,920 --> 02:48:08,240
and we also add a value gml file values

02:48:07,120 --> 02:48:11,120
yaml file

02:48:08,240 --> 02:48:12,000
is simply a set of values that we can

02:48:11,120 --> 02:48:14,560
substitute

02:48:12,000 --> 02:48:16,479
in to our templates so we kind of pull

02:48:14,560 --> 02:48:17,439
out the values the hard-coded values are

02:48:16,479 --> 02:48:19,600
the templates

02:48:17,439 --> 02:48:21,520
put them in our own separate file and

02:48:19,600 --> 02:48:23,439
then we can change the values in there

02:48:21,520 --> 02:48:25,200
and reuse the templates

02:48:23,439 --> 02:48:27,760
we just change the key values or the

02:48:25,200 --> 02:48:28,880
defined values and those get substituted

02:48:27,760 --> 02:48:31,120
into those other tip

02:48:28,880 --> 02:48:33,600
files and we can also have different

02:48:31,120 --> 02:48:35,760
values yaml files to use and so on

02:48:33,600 --> 02:48:38,240
so in this case if we're running with

02:48:35,760 --> 02:48:40,080
helm from a user standpoint we just do a

02:48:38,240 --> 02:48:42,479
helm install

02:48:40,080 --> 02:48:43,760
and it takes it and it actually takes

02:48:42,479 --> 02:48:44,000
the values and i went through a little

02:48:43,760 --> 02:48:47,439
bit

02:48:44,000 --> 02:48:50,240
fast because it takes the values

02:48:47,439 --> 02:48:51,279
fills in the different files the

02:48:50,240 --> 02:48:54,160
templates

02:48:51,279 --> 02:48:54,640
to produce yaml files that we can then

02:48:54,160 --> 02:48:56,800
deploy

02:48:54,640 --> 02:48:58,000
into the kubernetes cluster and then we

02:48:56,800 --> 02:49:00,160
get a release

02:48:58,000 --> 02:49:01,120
from that we get a running instance of

02:49:00,160 --> 02:49:04,720
that

02:49:01,120 --> 02:49:06,880
thing specified by that chart

02:49:04,720 --> 02:49:08,640
the actual formats of the charts what is

02:49:06,880 --> 02:49:11,200
a chart well it's just a collection of

02:49:08,640 --> 02:49:13,439
resource definition files with templates

02:49:11,200 --> 02:49:14,960
in there you can see on the right hand

02:49:13,439 --> 02:49:16,560
side i have a

02:49:14,960 --> 02:49:18,319
couple of charts i have one for the

02:49:16,560 --> 02:49:20,319
database and one for the web

02:49:18,319 --> 02:49:22,080
there's a chart.yaml file which is

02:49:20,319 --> 02:49:24,240
essentially sort of a metadata file has

02:49:22,080 --> 02:49:26,160
things like the name of the chart

02:49:24,240 --> 02:49:27,359
those things any other requirements

02:49:26,160 --> 02:49:30,240
required charts

02:49:27,359 --> 02:49:32,399
we get into the templates we have

02:49:30,240 --> 02:49:34,160
deployment yaml service yaml

02:49:32,399 --> 02:49:36,640
these are the one the files with

02:49:34,160 --> 02:49:38,960
placeholders and the helpers tpl

02:49:36,640 --> 02:49:40,000
under bar is to define additional

02:49:38,960 --> 02:49:42,479
functions

02:49:40,000 --> 02:49:44,960
that we can use and so on so we can

02:49:42,479 --> 02:49:47,120
deploy simple and complex applications

02:49:44,960 --> 02:49:48,720
and we can get the values from values

02:49:47,120 --> 02:49:51,760
yaml or you can override them with the

02:49:48,720 --> 02:49:54,800
command line as well

02:49:51,760 --> 02:49:56,720
so a helm topology we talk about

02:49:54,800 --> 02:49:57,840
the words or the terms that we use to

02:49:56,720 --> 02:49:59,840
talk about helm

02:49:57,840 --> 02:50:01,920
a chart is a package it's a bundle of

02:49:59,840 --> 02:50:03,840
kubernetes resources

02:50:01,920 --> 02:50:05,840
with the values file with the template

02:50:03,840 --> 02:50:07,680
files with the placeholders in them

02:50:05,840 --> 02:50:09,840
a release is simply an instance of a

02:50:07,680 --> 02:50:12,399
chart that we loaded into kubernetes

02:50:09,840 --> 02:50:14,000
that spins up these objects and the same

02:50:12,399 --> 02:50:15,840
chart can be installed several times

02:50:14,000 --> 02:50:19,200
each chart will have its own release

02:50:15,840 --> 02:50:21,200
a repository it's just a grouping of a

02:50:19,200 --> 02:50:24,000
published chart or a place to store the

02:50:21,200 --> 02:50:26,160
charts and a template file

02:50:24,000 --> 02:50:28,240
is a kubernetes configuration file mixed

02:50:26,160 --> 02:50:30,240
with go or sprig templates

02:50:28,240 --> 02:50:31,279
what go and spread goes a programming

02:50:30,240 --> 02:50:33,279
language

02:50:31,279 --> 02:50:35,600
and sprig is a library basically these

02:50:33,279 --> 02:50:37,840
are or a set of templates

02:50:35,600 --> 02:50:39,279
um things would say you know a value

02:50:37,840 --> 02:50:41,439
that can go here

02:50:39,279 --> 02:50:43,120
a function you can add due to it we'll

02:50:41,439 --> 02:50:45,279
talk about that a little bit more

02:50:43,120 --> 02:50:47,760
in a moment if you were to look at

02:50:45,279 --> 02:50:48,319
what's out on your own system on the vm

02:50:47,760 --> 02:50:50,000
there

02:50:48,319 --> 02:50:51,680
you'd see several releases that we've

02:50:50,000 --> 02:50:54,560
been that have deployed

02:50:51,680 --> 02:50:55,680
this is the effect of a helm status and

02:50:54,560 --> 02:50:57,840
you can see for example

02:50:55,680 --> 02:51:00,000
istio when i put this on the machine i

02:50:57,840 --> 02:51:02,240
used a helm chart to deploy it

02:51:00,000 --> 02:51:03,120
so one of the things about helm is that

02:51:02,240 --> 02:51:06,560
it's become

02:51:03,120 --> 02:51:08,880
a largely sort of standard way

02:51:06,560 --> 02:51:10,960
of deploying kubernetes charts when

02:51:08,880 --> 02:51:12,960
these things get very large

02:51:10,960 --> 02:51:14,080
typically applications will create a

02:51:12,960 --> 02:51:16,160
helm chart

02:51:14,080 --> 02:51:18,160
to deploy it and helm helps you to

02:51:16,160 --> 02:51:21,359
manage that so there was a helm chart

02:51:18,160 --> 02:51:24,080
for istio for example

02:51:21,359 --> 02:51:24,399
that i took and deployed out there on

02:51:24,080 --> 02:51:26,240
this

02:51:24,399 --> 02:51:27,920
you can see the chart out there that was

02:51:26,240 --> 02:51:30,399
used the app version

02:51:27,920 --> 02:51:31,680
and the revision out there the release

02:51:30,399 --> 02:51:33,600
that's run as well

02:51:31,680 --> 02:51:35,200
so helm has become a way of good way of

02:51:33,600 --> 02:51:36,880
packaging up these charts

02:51:35,200 --> 02:51:38,720
and giving you a way through changing

02:51:36,880 --> 02:51:41,200
things like the value gml file

02:51:38,720 --> 02:51:43,439
or supplying values on the command line

02:51:41,200 --> 02:51:45,359
to put your own values into the chart

02:51:43,439 --> 02:51:49,279
and reuse these templates

02:51:45,359 --> 02:51:49,279
lots of operations out here

02:51:49,920 --> 02:51:55,520
to look at helm operations we get into

02:51:53,520 --> 02:51:58,160
i won't go through all of these now

02:51:55,520 --> 02:52:00,720
installing a chart listing releases

02:51:58,160 --> 02:52:04,960
looking at the repo searching showing

02:52:00,720 --> 02:52:04,960
information the chart version and so on

02:52:05,200 --> 02:52:08,240
now helm charts to kind of clarify this

02:52:06,960 --> 02:52:10,240
a bit more

02:52:08,240 --> 02:52:12,240
they look the template files look like

02:52:10,240 --> 02:52:13,359
kubernetes manifest because ultimately

02:52:12,240 --> 02:52:16,000
when they get value

02:52:13,359 --> 02:52:16,560
substituted in they will produce or

02:52:16,000 --> 02:52:19,680
render

02:52:16,560 --> 02:52:21,040
helm or render a usable kubernetes

02:52:19,680 --> 02:52:23,920
manifest that can then be

02:52:21,040 --> 02:52:24,560
passed to kubernetes but they use this

02:52:23,920 --> 02:52:26,160
thing called the go

02:52:24,560 --> 02:52:28,240
templating language and these are some

02:52:26,160 --> 02:52:31,680
examples off of the helm

02:52:28,240 --> 02:52:35,200
site itself if you look at

02:52:31,680 --> 02:52:36,880
the template file the middle screenshot

02:52:35,200 --> 02:52:39,680
there on the right hand side

02:52:36,880 --> 02:52:40,080
you can see api version v1 kind config

02:52:39,680 --> 02:52:42,880
map

02:52:40,080 --> 02:52:44,880
metadata data looks a lot like a

02:52:42,880 --> 02:52:46,080
template again it is just without value

02:52:44,880 --> 02:52:47,600
substituted in

02:52:46,080 --> 02:52:49,520
then notice we have some things that

02:52:47,600 --> 02:52:50,560
begin and end with the open and closing

02:52:49,520 --> 02:52:52,240
curly brace

02:52:50,560 --> 02:52:54,800
when you see these in helm charts these

02:52:52,240 --> 02:52:58,319
are places where values are expected

02:52:54,800 --> 02:53:02,080
to be substituted in to provide a fully

02:52:58,319 --> 02:53:03,359
rendered or usable kubernetes manifest

02:53:02,080 --> 02:53:04,880
you can see the values file

02:53:03,359 --> 02:53:06,720
representation at the top there just

02:53:04,880 --> 02:53:10,319
says we have a favorite drink its name

02:53:06,720 --> 02:53:12,240
favorite drink is called coffee and so

02:53:10,319 --> 02:53:14,000
at the bottom when we do a helm install

02:53:12,240 --> 02:53:16,160
and in this case we're just doing a dry

02:53:14,000 --> 02:53:18,240
run i mean show us what you would do but

02:53:16,160 --> 02:53:19,920
don't actually put it in kubernetes

02:53:18,240 --> 02:53:22,240
you can see down below there it actually

02:53:19,920 --> 02:53:24,479
renders that template file

02:53:22,240 --> 02:53:25,520
with values in it we have a value in the

02:53:24,479 --> 02:53:28,000
name field

02:53:25,520 --> 02:53:29,040
we have drink filled in for coffee now

02:53:28,000 --> 02:53:31,840
some values in

02:53:29,040 --> 02:53:33,840
helm like the release name and so forth

02:53:31,840 --> 02:53:35,040
those are actually built in so it will

02:53:33,840 --> 02:53:37,120
actually pick up

02:53:35,040 --> 02:53:38,560
information or produce information for

02:53:37,120 --> 02:53:40,479
you you don't have to have that one

02:53:38,560 --> 02:53:42,080
but notice that the coffee got filled in

02:53:40,479 --> 02:53:43,680
from the values file

02:53:42,080 --> 02:53:45,520
the syntax here when we have those

02:53:43,680 --> 02:53:47,439
things between the curly braces like

02:53:45,520 --> 02:53:48,720
release name or values dot favorite

02:53:47,439 --> 02:53:50,319
drink

02:53:48,720 --> 02:53:52,000
those are hierarchy kind of the

02:53:50,319 --> 02:53:54,160
hierarchy we might see in a yaml file

02:53:52,000 --> 02:53:56,160
but just expressed on a single line for

02:53:54,160 --> 02:53:58,800
example values.favoritedrink

02:53:56,160 --> 02:54:01,439
means go to the values file find the

02:53:58,800 --> 02:54:03,279
favorite drink value and plug it in here

02:54:01,439 --> 02:54:04,640
release says go to the release section

02:54:03,279 --> 02:54:06,880
get the name and plug that

02:54:04,640 --> 02:54:09,040
in here so start at the top of the

02:54:06,880 --> 02:54:11,600
namespace look for release object

02:54:09,040 --> 02:54:14,800
find the name element inside of it and

02:54:11,600 --> 02:54:16,399
some of these are built in as we said

02:54:14,800 --> 02:54:19,040
when we do templating of charts it

02:54:16,399 --> 02:54:22,240
allows us to override values easily

02:54:19,040 --> 02:54:25,359
values or overrides meaning other than

02:54:22,240 --> 02:54:28,640
if we want to change what is actually

02:54:25,359 --> 02:54:31,359
being used in the values file we can

02:54:28,640 --> 02:54:33,439
we have values coming from child charts

02:54:31,359 --> 02:54:36,560
additional values files i could have a

02:54:33,439 --> 02:54:38,880
foo dot values or food.yaml or something

02:54:36,560 --> 02:54:40,319
that i pass in on the command line or i

02:54:38,880 --> 02:54:43,439
can use the command line

02:54:40,319 --> 02:54:45,359
set option to set it and override it

02:54:43,439 --> 02:54:47,120
that's what the example on the right is

02:54:45,359 --> 02:54:49,680
showing notice we have helm install

02:54:47,120 --> 02:54:51,520
dash that's dry run that set favorite

02:54:49,680 --> 02:54:52,880
drink equals slurm

02:54:51,520 --> 02:54:55,200
if you're not familiar with slurm it's

02:54:52,880 --> 02:54:57,520
an obscure reference to a

02:54:55,200 --> 02:54:59,120
cartoon futurama there was a swarm drink

02:54:57,520 --> 02:55:01,439
on there but basically

02:54:59,120 --> 02:55:02,160
well we haven't changed the values file

02:55:01,439 --> 02:55:04,960
the setting

02:55:02,160 --> 02:55:07,040
on the command line overrides it so that

02:55:04,960 --> 02:55:10,319
when we actually render it as shown in

02:55:07,040 --> 02:55:12,240
that top blue box there you see that the

02:55:10,319 --> 02:55:14,319
drink is slurm instead of copy because

02:55:12,240 --> 02:55:16,319
we overrode it on the command line

02:55:14,319 --> 02:55:17,600
so it just gives us ways to override

02:55:16,319 --> 02:55:20,800
what's in

02:55:17,600 --> 02:55:22,720
the chart as a default values now the

02:55:20,800 --> 02:55:23,760
other thing that we can do with helm is

02:55:22,720 --> 02:55:26,080
we can actually

02:55:23,760 --> 02:55:27,520
use functions and pipelines we can

02:55:26,080 --> 02:55:30,479
actually have functions

02:55:27,520 --> 02:55:31,840
that do certain things on the text in

02:55:30,479 --> 02:55:33,439
our template files

02:55:31,840 --> 02:55:36,319
and you might wonder why would you want

02:55:33,439 --> 02:55:39,120
to do this well

02:55:36,319 --> 02:55:40,720
the simple cases are things like putting

02:55:39,120 --> 02:55:42,479
stuff in quotes when you get a value

02:55:40,720 --> 02:55:44,160
substituted in

02:55:42,479 --> 02:55:46,399
repeating things you can see here an

02:55:44,160 --> 02:55:48,560
example we have a values file

02:55:46,399 --> 02:55:50,720
favorite drink is coffee favorite food

02:55:48,560 --> 02:55:52,000
is pizza notice the hierarchy drink and

02:55:50,720 --> 02:55:54,720
food or indented under

02:55:52,000 --> 02:55:56,000
under favorite and then inside the

02:55:54,720 --> 02:55:58,319
templates file

02:55:56,000 --> 02:55:59,600
we have dot values meaning go to the

02:55:58,319 --> 02:56:01,520
values file

02:55:59,600 --> 02:56:03,120
find the favorite section favorite

02:56:01,520 --> 02:56:05,520
section find the drink

02:56:03,120 --> 02:56:07,200
value coffee and the food value pizza

02:56:05,520 --> 02:56:09,120
and then notice after that

02:56:07,200 --> 02:56:10,240
we use this pipeline character this

02:56:09,120 --> 02:56:12,160
vertical bar

02:56:10,240 --> 02:56:13,920
the vertical bar simply means to

02:56:12,160 --> 02:56:14,640
evaluate the expression in front of it

02:56:13,920 --> 02:56:17,120
or take the

02:56:14,640 --> 02:56:18,240
evaluation of the expression in front of

02:56:17,120 --> 02:56:21,120
it the output

02:56:18,240 --> 02:56:22,880
and pass it to the next function so take

02:56:21,120 --> 02:56:23,680
the output and pass it on to the next

02:56:22,880 --> 02:56:25,600
function

02:56:23,680 --> 02:56:26,800
so in this case in the templates file we

02:56:25,600 --> 02:56:29,439
take the favorite drink

02:56:26,800 --> 02:56:31,680
value that we find in our values file we

02:56:29,439 --> 02:56:34,399
repeat it five times and we quote it

02:56:31,680 --> 02:56:36,080
for the food we get the food value we

02:56:34,399 --> 02:56:37,840
uppercase it and we quote it

02:56:36,080 --> 02:56:39,600
so that way you can end up you can

02:56:37,840 --> 02:56:43,120
actually kind of

02:56:39,600 --> 02:56:43,600
almost program in your template files

02:56:43,120 --> 02:56:45,920
here

02:56:43,600 --> 02:56:47,439
so the render file would then be drink

02:56:45,920 --> 02:56:49,439
coffee coffee coffee coffee which is

02:56:47,439 --> 02:56:50,800
repeated five times and put in quotes

02:56:49,439 --> 02:56:53,120
and the food would be pizza for

02:56:50,800 --> 02:56:54,399
uppercase and quotes so you have basic

02:56:53,120 --> 02:56:56,240
functions like upper

02:56:54,399 --> 02:56:58,319
and quote and stuff that are available

02:56:56,240 --> 02:56:58,960
to you in this templating language with

02:56:58,319 --> 02:57:00,960
helm

02:56:58,960 --> 02:57:02,880
in case you need to take values and

02:57:00,960 --> 02:57:04,240
change them so when the rendered

02:57:02,880 --> 02:57:06,880
manifest before you give it to

02:57:04,240 --> 02:57:07,520
kubernetes you can make it like you want

02:57:06,880 --> 02:57:08,800
it

02:57:07,520 --> 02:57:10,399
now there are other things you could do

02:57:08,800 --> 02:57:11,840
as well you can write your own functions

02:57:10,399 --> 02:57:14,000
in helm for example one of the

02:57:11,840 --> 02:57:15,920
applications i used to work with

02:57:14,000 --> 02:57:17,600
i had like i don't know five or six

02:57:15,920 --> 02:57:18,720
different applications that were part of

02:57:17,600 --> 02:57:21,040
this product

02:57:18,720 --> 02:57:22,880
and i needed to spin them up but have

02:57:21,040 --> 02:57:25,279
them running on different ports

02:57:22,880 --> 02:57:26,640
every time and i needed and multiple

02:57:25,279 --> 02:57:29,680
people needed to use this

02:57:26,640 --> 02:57:30,399
so we wanted to try to not have to

02:57:29,680 --> 02:57:32,960
specify

02:57:30,399 --> 02:57:34,960
six different ports every time and you

02:57:32,960 --> 02:57:37,439
know try to

02:57:34,960 --> 02:57:38,640
have even have starting ports that were

02:57:37,439 --> 02:57:40,479
different for every person

02:57:38,640 --> 02:57:42,080
that sort of thing so what i did was i

02:57:40,479 --> 02:57:43,200
wrote a function that basically would

02:57:42,080 --> 02:57:45,680
take a

02:57:43,200 --> 02:57:46,399
value i passed into helm as a starting

02:57:45,680 --> 02:57:48,880
port

02:57:46,399 --> 02:57:50,240
add a certain offset to it for each one

02:57:48,880 --> 02:57:52,880
and then start the application

02:57:50,240 --> 02:57:53,680
on that port plus the offset there and

02:57:52,880 --> 02:57:55,040
that way

02:57:53,680 --> 02:57:56,399
anybody using that could pick a

02:57:55,040 --> 02:57:57,359
different starting port that was far

02:57:56,399 --> 02:57:58,800
enough apart

02:57:57,359 --> 02:58:00,000
and the application would start up

02:57:58,800 --> 02:58:00,960
running with different pieces and

02:58:00,000 --> 02:58:02,399
different ports there

02:58:00,960 --> 02:58:04,080
so that's just one example but i did

02:58:02,399 --> 02:58:06,000
some simple arithmetic there

02:58:04,080 --> 02:58:07,680
to say add an offset and you can do that

02:58:06,000 --> 02:58:12,399
sort of thing in helm

02:58:07,680 --> 02:58:14,800
functions when helm installs the chart

02:58:12,399 --> 02:58:15,920
then it goes to the api server and it

02:58:14,800 --> 02:58:18,960
basically goes

02:58:15,920 --> 02:58:19,359
and runs in starts a service in service

02:58:18,960 --> 02:58:22,240
a

02:58:19,359 --> 02:58:24,000
or deployment aid ingress a there inside

02:58:22,240 --> 02:58:26,080
the cluster

02:58:24,000 --> 02:58:28,240
and begins it comes and creates a new

02:58:26,080 --> 02:58:29,200
release of that chart the files in the

02:58:28,240 --> 02:58:32,319
chart

02:58:29,200 --> 02:58:33,120
when we go to helm upgrade let's say we

02:58:32,319 --> 02:58:35,040
want to

02:58:33,120 --> 02:58:37,760
use set to override the values maybe i

02:58:35,040 --> 02:58:39,760
have a different deployment in this case

02:58:37,760 --> 02:58:41,760
i can get a separate deployment and that

02:58:39,760 --> 02:58:43,439
becomes a new release of the software

02:58:41,760 --> 02:58:45,920
running there a new revision

02:58:43,439 --> 02:58:47,680
release number two if i were to do a

02:58:45,920 --> 02:58:50,319
roll back i can do a rollback function

02:58:47,680 --> 02:58:53,680
in helm to go back to the previous

02:58:50,319 --> 02:58:56,479
incarnations of these things

02:58:53,680 --> 02:59:00,479
i could do service a service b jump bump

02:58:56,479 --> 02:59:02,240
it back to deployment a uh

02:59:00,479 --> 02:59:03,920
back to the and the ingress is back the

02:59:02,240 --> 02:59:06,160
same basically going back to the same

02:59:03,920 --> 02:59:08,240
versions of these kubernetes items

02:59:06,160 --> 02:59:09,840
that i had before but note that even

02:59:08,240 --> 02:59:11,840
though i went back to the same version

02:59:09,840 --> 02:59:14,080
it's still considered a new release

02:59:11,840 --> 02:59:15,920
releases always increase so even though

02:59:14,080 --> 02:59:16,640
i go back to the previous versions of

02:59:15,920 --> 02:59:18,800
objects

02:59:16,640 --> 02:59:20,000
it's a new release the new instance of

02:59:18,800 --> 02:59:21,760
things running in there

02:59:20,000 --> 02:59:24,080
even though it may be the old things in

02:59:21,760 --> 02:59:24,560
there that brings us up to lab number

02:59:24,080 --> 02:59:26,160
five

02:59:24,560 --> 02:59:27,520
using helm let's take a look at what

02:59:26,160 --> 02:59:28,640
we're going to do with that i'll stop

02:59:27,520 --> 02:59:32,080
sharing this

02:59:28,640 --> 02:59:35,600
and go back to sharing

02:59:32,080 --> 02:59:35,600
uh the screen capture here

02:59:35,760 --> 02:59:40,880
or the lab sorry go back to sharing the

02:59:38,479 --> 02:59:40,880
labs

02:59:41,200 --> 02:59:44,800
let me find the labs here

02:59:47,120 --> 02:59:52,800
right here so if we look at the labs

02:59:53,840 --> 02:59:57,760
in lab number five we're actually going

02:59:56,240 --> 03:00:01,200
to go into a different area

02:59:57,760 --> 03:00:02,720
top level atows section we'll do a tree

03:00:01,200 --> 03:00:04,080
tree is just going to give us a print

03:00:02,720 --> 03:00:05,279
out of the structure to kind of let you

03:00:04,080 --> 03:00:07,279
see the chart

03:00:05,279 --> 03:00:09,040
in there we'll take a look at the

03:00:07,279 --> 03:00:10,000
service file and again i suggest maybe

03:00:09,040 --> 03:00:11,760
copying and pasting

03:00:10,000 --> 03:00:13,279
these these are some fairly long

03:00:11,760 --> 03:00:14,560
commands and they're not meant for you

03:00:13,279 --> 03:00:15,200
to have like i said it's not a typing

03:00:14,560 --> 03:00:16,479
class

03:00:15,200 --> 03:00:18,640
so if you want to copy and paste just

03:00:16,479 --> 03:00:20,640
again check when you copy and paste

03:00:18,640 --> 03:00:22,560
uh that it actually captured the spaces

03:00:20,640 --> 03:00:24,800
i've noticed sometimes it doesn't always

03:00:22,560 --> 03:00:25,920
get the spaces between things but we're

03:00:24,800 --> 03:00:27,520
going to step two we're just taking a

03:00:25,920 --> 03:00:28,960
look at the service yaml and then we're

03:00:27,520 --> 03:00:29,680
actually going to use the helm template

03:00:28,960 --> 03:00:31,680
command

03:00:29,680 --> 03:00:34,240
what the helm template command will do

03:00:31,680 --> 03:00:36,000
is it will dump out to the screen

03:00:34,240 --> 03:00:37,279
what the template looks like with the

03:00:36,000 --> 03:00:39,040
values inserted

03:00:37,279 --> 03:00:40,800
so we can see essentially what the

03:00:39,040 --> 03:00:42,160
rendered thing is that we would hand to

03:00:40,800 --> 03:00:43,760
kubernetes

03:00:42,160 --> 03:00:45,520
we'll look at the values in there the

03:00:43,760 --> 03:00:47,120
values we have it we're to create a

03:00:45,520 --> 03:00:50,560
namespace then

03:00:47,120 --> 03:00:53,680
roar2 and we're just go and we have that

03:00:50,560 --> 03:00:55,520
helm specification in here the helm

03:00:53,680 --> 03:00:57,520
charts in the charts

03:00:55,520 --> 03:00:59,120
we have a helm chart for our application

03:00:57,520 --> 03:01:01,760
so we're just going to install it

03:00:59,120 --> 03:01:04,160
we give it a name we give it uh there

03:01:01,760 --> 03:01:05,840
the chart we want to use

03:01:04,160 --> 03:01:07,200
and we deploy it out there release name

03:01:05,840 --> 03:01:09,040
chart want to use

03:01:07,200 --> 03:01:11,600
and then we'll get a list of existing

03:01:09,040 --> 03:01:13,279
helm deployments and the status of that

03:01:11,600 --> 03:01:14,960
we'll then go and look at our app

03:01:13,279 --> 03:01:16,000
running in the helm deployment to get

03:01:14,960 --> 03:01:18,479
the

03:01:16,000 --> 03:01:21,439
node info being a kubernetes so we

03:01:18,479 --> 03:01:23,840
deploy it using a helm chart

03:01:21,439 --> 03:01:25,439
go to the url for the web app open it up

03:01:23,840 --> 03:01:28,319
now when you open it up you'll see

03:01:25,439 --> 03:01:30,399
that again a problem has occurred

03:01:28,319 --> 03:01:31,680
basically there's no data in the table

03:01:30,399 --> 03:01:33,120
so what do we do

03:01:31,680 --> 03:01:35,120
well we're going to take a look the

03:01:33,120 --> 03:01:36,640
difference that comes in because the

03:01:35,120 --> 03:01:38,399
service name

03:01:36,640 --> 03:01:39,600
in one is different from the service

03:01:38,399 --> 03:01:41,200
name and the other in other words we

03:01:39,600 --> 03:01:42,399
know that it worked in this old

03:01:41,200 --> 03:01:44,720
namespace

03:01:42,399 --> 03:01:46,160
roar the one we used previously and it's

03:01:44,720 --> 03:01:48,000
not working in our new one so we'll take

03:01:46,160 --> 03:01:50,479
a look at what's different

03:01:48,000 --> 03:01:53,359
and basically it is the name of the

03:01:50,479 --> 03:01:55,200
service the mysql service

03:01:53,359 --> 03:01:57,520
then i guide you through putting in a

03:01:55,200 --> 03:01:58,880
change to the values yaml file

03:01:57,520 --> 03:02:00,640
it's a very simple change but make sure

03:01:58,880 --> 03:02:03,600
it all lines up here it's one line

03:02:00,640 --> 03:02:05,359
step 11. to override the name to get the

03:02:03,600 --> 03:02:06,800
name of the service we want again just

03:02:05,359 --> 03:02:07,279
kind of getting you through this sort of

03:02:06,800 --> 03:02:09,680
uh

03:02:07,279 --> 03:02:11,760
running into a problem fixing it save

03:02:09,680 --> 03:02:16,000
your changes quit the editor

03:02:11,760 --> 03:02:17,920
do an upgrade to recreate the pods

03:02:16,000 --> 03:02:19,359
and then we'll get ahold of we'll take a

03:02:17,920 --> 03:02:20,960
look at the service

03:02:19,359 --> 03:02:22,399
and at that point we do upgrade we'll

03:02:20,960 --> 03:02:24,160
bump up the release

03:02:22,399 --> 03:02:25,680
we'll go ahead and bump up the re that

03:02:24,160 --> 03:02:26,560
will bump up the release for us you'll

03:02:25,680 --> 03:02:29,439
get an example

03:02:26,560 --> 03:02:30,720
of how to update a release out there to

03:02:29,439 --> 03:02:33,200
fix the problem

03:02:30,720 --> 03:02:34,640
after that you can refresh the browser

03:02:33,200 --> 03:02:36,479
and you actually may need to do an

03:02:34,640 --> 03:02:38,160
actual refresh on it

03:02:36,479 --> 03:02:39,840
with like an f5 or something and you can

03:02:38,160 --> 03:02:40,640
see the list of helm releases out there

03:02:39,840 --> 03:02:44,000
running

03:02:40,640 --> 03:02:46,000
all right let's take about 10 minutes

03:02:44,000 --> 03:02:47,520
and work on this one i don't think it'll

03:02:46,000 --> 03:02:48,880
take too long but i want to make sure we

03:02:47,520 --> 03:02:51,760
leave time to cover

03:02:48,880 --> 03:02:52,800
istio in here again you can copy and

03:02:51,760 --> 03:02:54,319
paste

03:02:52,800 --> 03:02:57,439
on a lot of this stuff so let's take

03:02:54,319 --> 03:03:00,479
about 10 minutes work on lab number five

03:02:57,439 --> 03:03:01,760
and then we'll move on to our last major

03:03:00,479 --> 03:03:03,760
topic of the day

03:03:01,760 --> 03:03:05,120
uh talking about istio and service

03:03:03,760 --> 03:03:08,399
meshes all right

03:03:05,120 --> 03:03:11,520
so i'll talk to you in 10.

03:03:08,399 --> 03:03:12,399
hey everybody we're back so let's get a

03:03:11,520 --> 03:03:14,000
question here

03:03:12,399 --> 03:03:16,399
someone asked uh steve asked will you

03:03:14,000 --> 03:03:19,200
discuss customize with a k

03:03:16,399 --> 03:03:20,000
or diff with helm so customize is

03:03:19,200 --> 03:03:22,800
another

03:03:20,000 --> 03:03:24,840
way of actually deploying charts into

03:03:22,800 --> 03:03:27,600
kubernetes and creating

03:03:24,840 --> 03:03:30,399
manifest the difference with customize

03:03:27,600 --> 03:03:32,640
is a difference kind of in philosophy

03:03:30,399 --> 03:03:33,439
here whereas helm allows you all this

03:03:32,640 --> 03:03:35,439
templating

03:03:33,439 --> 03:03:36,800
and writing functions and pipelines all

03:03:35,439 --> 03:03:39,439
kinds of stuff in there

03:03:36,800 --> 03:03:39,840
it's it's good in a way but it also then

03:03:39,439 --> 03:03:43,200
gets

03:03:39,840 --> 03:03:45,439
into a couple of issues one you've kind

03:03:43,200 --> 03:03:45,760
of lost the original manifest there it's

03:03:45,439 --> 03:03:48,160
not

03:03:45,760 --> 03:03:49,520
usable the templates aren't usable in

03:03:48,160 --> 03:03:50,640
their current form

03:03:49,520 --> 03:03:52,640
they have to have all these other

03:03:50,640 --> 03:03:54,240
supporting pieces on them

03:03:52,640 --> 03:03:55,439
they're not usable in that current form

03:03:54,240 --> 03:03:56,720
it almost gets into kind of like

03:03:55,439 --> 03:03:58,560
programming

03:03:56,720 --> 03:04:00,240
in the templating language there

03:03:58,560 --> 03:04:02,399
customize takes a different approach

03:04:00,240 --> 03:04:04,640
customize with a k

03:04:02,399 --> 03:04:05,439
takes an approach of actually making

03:04:04,640 --> 03:04:08,160
sure to

03:04:05,439 --> 03:04:10,319
preserve the original manifest that can

03:04:08,160 --> 03:04:12,640
always be used and the way they were

03:04:10,319 --> 03:04:14,080
and doing what's called having overlays

03:04:12,640 --> 03:04:17,200
on top of them

03:04:14,080 --> 03:04:20,240
essentially slight

03:04:17,200 --> 03:04:21,920
sections or pieces of the manifest

03:04:20,240 --> 03:04:23,520
that might change an image name for

03:04:21,920 --> 03:04:26,000
example or a

03:04:23,520 --> 03:04:26,800
port or something that are in a separate

03:04:26,000 --> 03:04:28,880
file

03:04:26,800 --> 03:04:30,240
and then those overlays get combined

03:04:28,880 --> 03:04:32,160
with the original

03:04:30,240 --> 03:04:34,800
to make the new manifest or when at the

03:04:32,160 --> 03:04:36,880
time that customize run does customize

03:04:34,800 --> 03:04:37,920
build command and essentially taking the

03:04:36,880 --> 03:04:40,880
original

03:04:37,920 --> 03:04:42,720
of adding on to it but not modifying the

03:04:40,880 --> 03:04:44,319
original manifest file

03:04:42,720 --> 03:04:46,640
you don't you can still use original

03:04:44,319 --> 03:04:49,359
manifest in their form they were

03:04:46,640 --> 03:04:51,680
it just takes overlays into build time

03:04:49,359 --> 03:04:54,160
uh combines them and it produces a

03:04:51,680 --> 03:04:56,160
combined output there

03:04:54,160 --> 03:04:57,439
that's the gist of it there's more to

03:04:56,160 --> 03:04:59,279
the functionality stuff but it has like

03:04:57,439 --> 03:05:02,080
things called bases and overlays

03:04:59,279 --> 03:05:03,680
and the overlays are kind of like uh

03:05:02,080 --> 03:05:05,279
changes or patches

03:05:03,680 --> 03:05:07,760
there's patches introduced that the

03:05:05,279 --> 03:05:10,800
patch the original yaml

03:05:07,760 --> 03:05:12,880
as opposed to actually modifying the

03:05:10,800 --> 03:05:14,960
original yaml and turn it into parameter

03:05:12,880 --> 03:05:15,920
a parameterized thing that's what helm

03:05:14,960 --> 03:05:17,920
does

03:05:15,920 --> 03:05:19,760
customize has been adopted within

03:05:17,920 --> 03:05:22,960
kubernetes there's a

03:05:19,760 --> 03:05:23,279
i think it's a dash k option in there to

03:05:22,960 --> 03:05:26,800
run

03:05:23,279 --> 03:05:28,479
custom customize with it it's gained

03:05:26,800 --> 03:05:30,960
some popularity

03:05:28,479 --> 03:05:32,080
not as much as helm but it has some

03:05:30,960 --> 03:05:34,080
values in there especially

03:05:32,080 --> 03:05:36,479
if you don't want to have to modify the

03:05:34,080 --> 03:05:37,120
original kubernetes manifest and go into

03:05:36,479 --> 03:05:40,319
all that

03:05:37,120 --> 03:05:43,439
so uh let's go ahead

03:05:40,319 --> 03:05:46,479
and talk about our last

03:05:43,439 --> 03:05:50,399
topic the last main topic in here which

03:05:46,479 --> 03:05:53,680
is talking about

03:05:50,399 --> 03:05:55,439
istio and what is histio so istio

03:05:53,680 --> 03:05:57,920
we talked a lot about so far we talked

03:05:55,439 --> 03:05:59,279
about containers into kubernetes and

03:05:57,920 --> 03:06:01,680
using helm to

03:05:59,279 --> 03:06:02,560
do stuff out there but there's things

03:06:01,680 --> 03:06:05,760
called

03:06:02,560 --> 03:06:05,760
a service mesh

03:06:06,160 --> 03:06:09,120
and before we talk about service mesh

03:06:07,760 --> 03:06:10,560
it's worth mentioning this it seems like

03:06:09,120 --> 03:06:12,240
a good place to throw it in

03:06:10,560 --> 03:06:13,920
for reasons you'll see in a minute there

03:06:12,240 --> 03:06:15,920
is a thing called a nick containers this

03:06:13,920 --> 03:06:17,840
is not specific to istio

03:06:15,920 --> 03:06:19,760
but the idea of a nick container is a

03:06:17,840 --> 03:06:23,279
container that you can say

03:06:19,760 --> 03:06:25,840
this has to run and complete before

03:06:23,279 --> 03:06:27,279
other things run in the pod so this

03:06:25,840 --> 03:06:29,200
gives us a way to

03:06:27,279 --> 03:06:31,439
say we need something to run at startup

03:06:29,200 --> 03:06:35,279
maybe to set an environment

03:06:31,439 --> 03:06:37,279
uh to check some condition or something

03:06:35,279 --> 03:06:38,560
something at the time that we start off

03:06:37,279 --> 03:06:40,800
the pod in their

03:06:38,560 --> 03:06:42,880
init container by definition

03:06:40,800 --> 03:06:45,040
initialization container and it

03:06:42,880 --> 03:06:46,399
has to run and complete through there

03:06:45,040 --> 03:06:47,680
and go through and and

03:06:46,399 --> 03:06:49,920
finish what it needs to do before the

03:06:47,680 --> 03:06:52,800
rest of the stuff runs

03:06:49,920 --> 03:06:53,920
so istio is in is a service mesh what's

03:06:52,800 --> 03:06:56,080
a service mesh

03:06:53,920 --> 03:06:57,600
open platform to connect monitor secure

03:06:56,080 --> 03:06:59,520
microservices

03:06:57,600 --> 03:07:01,200
what is it really doing here let's talk

03:06:59,520 --> 03:07:01,840
about let's say what we're really doing

03:07:01,200 --> 03:07:04,880
here

03:07:01,840 --> 03:07:07,200
is we are adding containers into every

03:07:04,880 --> 03:07:09,600
pod or into most of the pods

03:07:07,200 --> 03:07:10,720
in a kubernetes deployment and putting

03:07:09,600 --> 03:07:12,319
them in front

03:07:10,720 --> 03:07:14,640
of the others so we're adding containers

03:07:12,319 --> 03:07:16,720
on the front and these containers are

03:07:14,640 --> 03:07:19,680
all configured or controlled

03:07:16,720 --> 03:07:20,640
by a central function istio in this case

03:07:19,680 --> 03:07:22,720
so every

03:07:20,640 --> 03:07:24,000
pod or most pods will get a separate

03:07:22,720 --> 03:07:26,720
container added in front

03:07:24,000 --> 03:07:27,760
of them and they intercept network

03:07:26,720 --> 03:07:29,200
traffic

03:07:27,760 --> 03:07:31,520
coming into them so intercept the

03:07:29,200 --> 03:07:32,160
network traffic and they can do things

03:07:31,520 --> 03:07:35,439
then

03:07:32,160 --> 03:07:36,880
before they pass it on to the other pod

03:07:35,439 --> 03:07:38,960
they can do things like what we call

03:07:36,880 --> 03:07:41,200
traffic shaping or traffic shifting

03:07:38,960 --> 03:07:43,359
uh directing it to one version of our

03:07:41,200 --> 03:07:46,000
app versus another version of our app

03:07:43,359 --> 03:07:46,560
they can uh use the functions you see on

03:07:46,000 --> 03:07:48,160
here

03:07:46,560 --> 03:07:50,479
discovery load balancing failure

03:07:48,160 --> 03:07:51,920
recovery metrics monitoring

03:07:50,479 --> 03:07:54,960
all these kinds of things if you're not

03:07:51,920 --> 03:07:57,120
familiar with all those that's okay

03:07:54,960 --> 03:07:58,560
the nice thing about it though is with

03:07:57,120 --> 03:08:00,720
the service mesh

03:07:58,560 --> 03:08:02,560
because we have these sitting in front

03:08:00,720 --> 03:08:04,000
of the other containers

03:08:02,560 --> 03:08:06,399
basically traffic going through them

03:08:04,000 --> 03:08:08,080
first the other containers the

03:08:06,399 --> 03:08:09,200
applications in the other containers on

03:08:08,080 --> 03:08:11,600
the back end

03:08:09,200 --> 03:08:13,439
don't have to do these functions the

03:08:11,600 --> 03:08:14,479
service meshes container does these

03:08:13,439 --> 03:08:16,800
functions for us

03:08:14,479 --> 03:08:18,800
it intercepts the traffic it is it can

03:08:16,800 --> 03:08:20,960
be handy it can be configured

03:08:18,800 --> 03:08:21,920
to do these functions on behalf of the

03:08:20,960 --> 03:08:23,439
other container

03:08:21,920 --> 03:08:25,040
and then it can pass on the traffic to

03:08:23,439 --> 03:08:27,200
the other container in the back end so

03:08:25,040 --> 03:08:27,680
we don't have to write our applications

03:08:27,200 --> 03:08:30,160
to do

03:08:27,680 --> 03:08:32,640
discovery load balancing metrics uh

03:08:30,160 --> 03:08:33,920
encryption all those kinds of things

03:08:32,640 --> 03:08:36,000
if we were in a position to use a

03:08:33,920 --> 03:08:37,840
service mesh we put a service mesh out

03:08:36,000 --> 03:08:40,080
there it puts the container in front

03:08:37,840 --> 03:08:41,840
centrally configures and sends out

03:08:40,080 --> 03:08:43,040
configuration to all of these into

03:08:41,840 --> 03:08:45,040
different pods

03:08:43,040 --> 03:08:47,040
and then we're able to leverage all the

03:08:45,040 --> 03:08:51,200
functionality it can give us there

03:08:47,040 --> 03:08:53,520
so that's kind of the basic idea of that

03:08:51,200 --> 03:08:54,479
uh how does this deal work it deploys a

03:08:53,520 --> 03:08:56,479
proxy

03:08:54,479 --> 03:08:57,600
meaning uh something that intercepts the

03:08:56,479 --> 03:08:59,520
traffic

03:08:57,600 --> 03:09:01,920
containers types of traffic it's called

03:08:59,520 --> 03:09:03,359
an istio sidecar there's a side card

03:09:01,920 --> 03:09:05,279
pattern in kubernetes

03:09:03,359 --> 03:09:06,960
which means we add a container off to

03:09:05,279 --> 03:09:07,680
the side this kind of idea of being in

03:09:06,960 --> 03:09:10,240
front of it

03:09:07,680 --> 03:09:11,200
add it to the side next to each micro

03:09:10,240 --> 03:09:13,680
service now when we say

03:09:11,200 --> 03:09:15,279
service here we mean a micro service not

03:09:13,680 --> 03:09:17,520
a kubernetes service

03:09:15,279 --> 03:09:19,439
so the traffic comes into the proxy the

03:09:17,520 --> 03:09:22,239
proxy then has this central

03:09:19,439 --> 03:09:23,840
piece istio that is controlling it

03:09:22,239 --> 03:09:24,880
telling it what how to configure and

03:09:23,840 --> 03:09:26,640
what to do

03:09:24,880 --> 03:09:28,239
it can then decide how and when that

03:09:26,640 --> 03:09:29,680
traffic should be moved on to the

03:09:28,239 --> 03:09:32,640
service

03:09:29,680 --> 03:09:32,640
the whoops

03:09:33,120 --> 03:09:38,160
it can then use sorry i'm going the

03:09:35,680 --> 03:09:38,160
wrong way

03:09:39,279 --> 03:09:43,439
it runs that sidecar in front of the

03:09:41,520 --> 03:09:47,279
other ones in there

03:09:43,439 --> 03:09:49,520
the istio architecture has a proxy

03:09:47,279 --> 03:09:51,200
called envoy envoy was actually created

03:09:49,520 --> 03:09:53,760
the version original version of it

03:09:51,200 --> 03:09:55,680
by lyft the car the car company is part

03:09:53,760 --> 03:09:58,160
of some stuff they were programming

03:09:55,680 --> 03:09:59,439
but it's the part the envoy proxy is the

03:09:58,160 --> 03:10:00,720
part that sits in front of the other

03:09:59,439 --> 03:10:02,720
container

03:10:00,720 --> 03:10:04,720
it catches the traffic coming in and

03:10:02,720 --> 03:10:07,600
does what it's told to do with it

03:10:04,720 --> 03:10:09,680
uh these are all then controlled through

03:10:07,600 --> 03:10:11,439
microservice along with mixer

03:10:09,680 --> 03:10:12,960
a general purpose telemetry hub and

03:10:11,439 --> 03:10:14,640
there's a control plane

03:10:12,960 --> 03:10:16,479
so that's all the data pieces that's the

03:10:14,640 --> 03:10:18,399
actual pieces that do the work

03:10:16,479 --> 03:10:20,560
but what controls them what configures

03:10:18,399 --> 03:10:22,000
them is what's called the control plane

03:10:20,560 --> 03:10:24,239
and sdo

03:10:22,000 --> 03:10:26,000
to kind of give you a visual of this the

03:10:24,239 --> 03:10:28,479
service let's say we have our cluster

03:10:26,000 --> 03:10:29,279
out here we have a set of microservices

03:10:28,479 --> 03:10:32,800
running in

03:10:29,279 --> 03:10:34,239
these various pods and we have paused in

03:10:32,800 --> 03:10:36,239
a cluster and normally the network

03:10:34,239 --> 03:10:39,760
traffic goes between them

03:10:36,239 --> 03:10:40,479
or to them directly when we place the

03:10:39,760 --> 03:10:43,040
sidecar

03:10:40,479 --> 03:10:44,800
in the envoy sidecar it becomes another

03:10:43,040 --> 03:10:46,960
container sitting in front of that

03:10:44,800 --> 03:10:48,800
then all the network traffic goes

03:10:46,960 --> 03:10:50,720
through the sidecar first

03:10:48,800 --> 03:10:52,399
as far as the pod is concerned all it

03:10:50,720 --> 03:10:53,279
sees is the traffic coming through the

03:10:52,399 --> 03:10:55,279
sidecar

03:10:53,279 --> 03:10:57,520
the sidecar can be configured then to

03:10:55,279 --> 03:11:00,720
manage the traffic in different ways

03:10:57,520 --> 03:11:03,600
do different functionality

03:11:00,720 --> 03:11:05,600
so distributed network across there now

03:11:03,600 --> 03:11:07,359
what is envoy it's a high performance

03:11:05,600 --> 03:11:09,359
proxy we

03:11:07,359 --> 03:11:10,479
developed to merge all inbound outbound

03:11:09,359 --> 03:11:12,640
traffic

03:11:10,479 --> 03:11:13,760
and it does the functionality the data

03:11:12,640 --> 03:11:16,960
plane then

03:11:13,760 --> 03:11:20,000
is all of these envoy sidecar containers

03:11:16,960 --> 03:11:22,239
connected together through mixer it has

03:11:20,000 --> 03:11:23,680
various plugins there for

03:11:22,239 --> 03:11:26,720
interfacing with other hosts and

03:11:23,680 --> 03:11:30,479
back-ends but mixer kind of ties all the

03:11:26,720 --> 03:11:32,319
side cars together that's the data plane

03:11:30,479 --> 03:11:35,359
public provides service discovery

03:11:32,319 --> 03:11:39,439
authorization identification

03:11:35,359 --> 03:11:41,200
routing load balancing observability

03:11:39,439 --> 03:11:43,760
all kinds of good stuff in there

03:11:41,200 --> 03:11:45,439
basically on behalf of the micro

03:11:43,760 --> 03:11:47,040
services then so they don't have to

03:11:45,439 --> 03:11:48,319
implement that it's all controlled and

03:11:47,040 --> 03:11:51,200
managed through that

03:11:48,319 --> 03:11:52,640
the control plane is the part that

03:11:51,200 --> 03:11:56,560
essentially

03:11:52,640 --> 03:11:58,479
tells the side cars and what to do

03:11:56,560 --> 03:12:00,640
it's the basic takes the group of

03:11:58,479 --> 03:12:03,520
individuals stateless sidecar proxies

03:12:00,640 --> 03:12:05,200
creates a distributed system from them

03:12:03,520 --> 03:12:07,359
does like metrics log

03:12:05,200 --> 03:12:08,239
service to service communication

03:12:07,359 --> 03:12:11,040
configuration

03:12:08,239 --> 03:12:13,279
traffic control has pilot which

03:12:11,040 --> 03:12:16,479
configures all the proxies so all these

03:12:13,279 --> 03:12:18,080
proxies these envoy sidecar containers

03:12:16,479 --> 03:12:20,000
are out there in front of these other

03:12:18,080 --> 03:12:21,600
microservices

03:12:20,000 --> 03:12:23,840
but they need to be configured and kind

03:12:21,600 --> 03:12:27,200
of told what to do in there

03:12:23,840 --> 03:12:27,200
that's the java pilot

03:12:27,359 --> 03:12:31,120
right service discovery core component

03:12:29,760 --> 03:12:32,880
galleys distribution

03:12:31,120 --> 03:12:35,120
configuration management helps with the

03:12:32,880 --> 03:12:39,040
configuration out there

03:12:35,120 --> 03:12:42,080
citadel is the end-to-end authentication

03:12:39,040 --> 03:12:44,720
authentication between services

03:12:42,080 --> 03:12:46,720
and so then we have all these pieces

03:12:44,720 --> 03:12:49,120
basically we have the control plane

03:12:46,720 --> 03:12:50,880
that then talks to mixer and then that

03:12:49,120 --> 03:12:52,080
configures the sidecars to say here's

03:12:50,880 --> 03:12:54,800
what we want to do

03:12:52,080 --> 03:12:55,279
so that's how we call the service mesh a

03:12:54,800 --> 03:12:58,640
mesh

03:12:55,279 --> 03:12:59,680
of these sidecar containers in front of

03:12:58,640 --> 03:13:01,520
or alongside

03:12:59,680 --> 03:13:04,239
of as a side card pattern the services

03:13:01,520 --> 03:13:06,720
that we're using

03:13:04,239 --> 03:13:07,680
that's the control plane and the data

03:13:06,720 --> 03:13:10,479
plane

03:13:07,680 --> 03:13:12,720
when we talk about istio objects in

03:13:10,479 --> 03:13:14,239
kubernetes istio can have its own kind

03:13:12,720 --> 03:13:15,120
of set of objects that we generally

03:13:14,239 --> 03:13:18,239
associate with

03:13:15,120 --> 03:13:21,439
it one is a gateway

03:13:18,239 --> 03:13:23,279
gateway is just a load balancer at the

03:13:21,439 --> 03:13:25,040
edge of the mesh receiving incoming

03:13:23,279 --> 03:13:27,600
traffic or connections

03:13:25,040 --> 03:13:28,399
and it describes what kind of support

03:13:27,600 --> 03:13:31,600
should be used

03:13:28,399 --> 03:13:33,520
configuration for the load balancer etc

03:13:31,600 --> 03:13:34,640
now all this don't let this get to don't

03:13:33,520 --> 03:13:36,000
want this worried with all the

03:13:34,640 --> 03:13:39,120
terminology here

03:13:36,000 --> 03:13:41,600
basically a way to intercept traffic or

03:13:39,120 --> 03:13:45,120
traffic coming in to let traffic come in

03:13:41,600 --> 03:13:46,000
through the gateway when you look down

03:13:45,120 --> 03:13:47,920
through the spec

03:13:46,000 --> 03:13:50,640
on the right-hand side a couple of

03:13:47,920 --> 03:13:54,160
things you can see it's looking for http

03:13:50,640 --> 03:13:55,520
traffic coming in it has a host out

03:13:54,160 --> 03:13:58,399
there as well it

03:13:55,520 --> 03:13:58,880
looks at those kinds of things so it's a

03:13:58,399 --> 03:14:01,359
way to

03:13:58,880 --> 03:14:03,760
have traffic coming in then after the

03:14:01,359 --> 03:14:06,000
gateway you can have a virtual service

03:14:03,760 --> 03:14:07,279
a virtual service just has a set of

03:14:06,000 --> 03:14:10,720
rules to say

03:14:07,279 --> 03:14:13,359
route some traffic to this

03:14:10,720 --> 03:14:15,040
service in kubernetes and route some to

03:14:13,359 --> 03:14:18,319
this service basically

03:14:15,040 --> 03:14:21,120
if you look at the spec over here

03:14:18,319 --> 03:14:22,000
you can see the name notice here under

03:14:21,120 --> 03:14:25,640
host

03:14:22,000 --> 03:14:27,120
under host in this spec you see

03:14:25,640 --> 03:14:29,600
reviews.prod.service.cluster.local

03:14:27,120 --> 03:14:30,880
this is actually a way to talk to

03:14:29,600 --> 03:14:34,080
specify

03:14:30,880 --> 03:14:37,520
a kubernetes service this

03:14:34,080 --> 03:14:40,160
dot svc svc is a service abbreviation

03:14:37,520 --> 03:14:41,760
cluster local the service in our local

03:14:40,160 --> 03:14:42,560
cluster it's kind of the long name of a

03:14:41,760 --> 03:14:45,200
service

03:14:42,560 --> 03:14:47,359
so the host that we're sending this to

03:14:45,200 --> 03:14:48,720
is a service in our cluster

03:14:47,359 --> 03:14:50,640
and here we're just saying if the

03:14:48,720 --> 03:14:53,600
traffic has this

03:14:50,640 --> 03:14:55,279
part in the text here this piece of it

03:14:53,600 --> 03:14:58,160
then we're going to send it

03:14:55,279 --> 03:15:00,080
some of it's going to go to version 1 of

03:14:58,160 --> 03:15:01,600
our app some is going to version a

03:15:00,080 --> 03:15:03,760
associated service associated with

03:15:01,600 --> 03:15:06,479
version 1 of our app running kubernetes

03:15:03,760 --> 03:15:08,080
and some associated with version two a

03:15:06,479 --> 03:15:09,040
service associated with version two of

03:15:08,080 --> 03:15:11,359
kubernetes

03:15:09,040 --> 03:15:13,200
so we can have multiple instances of our

03:15:11,359 --> 03:15:15,840
application running in kubernetes

03:15:13,200 --> 03:15:16,800
it's just containers right we can

03:15:15,840 --> 03:15:18,479
version them

03:15:16,800 --> 03:15:20,000
we can have multiple instances running

03:15:18,479 --> 03:15:22,080
out there and so this

03:15:20,000 --> 03:15:23,760
says direct some traffic to version one

03:15:22,080 --> 03:15:24,960
of our after extend traffic to version

03:15:23,760 --> 03:15:28,800
two of our app

03:15:24,960 --> 03:15:32,160
the service here is the service

03:15:28,800 --> 03:15:33,359
specification in kubernetes when we talk

03:15:32,160 --> 03:15:35,520
about

03:15:33,359 --> 03:15:37,040
the splitting the traffic out the

03:15:35,520 --> 03:15:39,680
virtual service tells it

03:15:37,040 --> 03:15:40,319
how to split out but what actually then

03:15:39,680 --> 03:15:41,600
maps it

03:15:40,319 --> 03:15:43,840
to a particular version of our

03:15:41,600 --> 03:15:45,439
application running is something called

03:15:43,840 --> 03:15:47,760
a destination rule

03:15:45,439 --> 03:15:49,040
a destination rule is another type of

03:15:47,760 --> 03:15:51,040
object in kubernetes

03:15:49,040 --> 03:15:52,560
you'll see the same pattern here api

03:15:51,040 --> 03:15:54,560
version kind

03:15:52,560 --> 03:15:56,239
metadata and spec looks just like any

03:15:54,560 --> 03:15:58,720
other kubernetes object

03:15:56,239 --> 03:15:59,439
in terms of the general structure here

03:15:58,720 --> 03:16:02,239
we have

03:15:59,439 --> 03:16:04,000
saying that this service the service

03:16:02,239 --> 03:16:06,160
name is going to be the same

03:16:04,000 --> 03:16:08,000
but in some cases we're going to direct

03:16:06,160 --> 03:16:10,560
it to version one of our app

03:16:08,000 --> 03:16:11,760
in some cases version two of our app

03:16:10,560 --> 03:16:13,439
what distinguishes

03:16:11,760 --> 03:16:15,359
which thing is running which one is

03:16:13,439 --> 03:16:18,319
version one which thing's version two

03:16:15,359 --> 03:16:19,040
a label or a selector we can have a

03:16:18,319 --> 03:16:21,760
label or

03:16:19,040 --> 03:16:22,960
selector on different versions of the

03:16:21,760 --> 03:16:24,880
pods

03:16:22,960 --> 03:16:26,319
things running the service stuff running

03:16:24,880 --> 03:16:28,000
in our kubernetes

03:16:26,319 --> 03:16:30,160
i can spin up a new kubernetes

03:16:28,000 --> 03:16:32,720
deployment with version one

03:16:30,160 --> 03:16:33,680
of my app it'll have a service it'll be

03:16:32,720 --> 03:16:35,760
that name

03:16:33,680 --> 03:16:37,120
i can spin up a instance of my app

03:16:35,760 --> 03:16:39,120
running in kubernetes

03:16:37,120 --> 03:16:40,640
that has the same service but it's

03:16:39,120 --> 03:16:42,960
attached to version two

03:16:40,640 --> 03:16:44,160
labels on those kubernetes objects allow

03:16:42,960 --> 03:16:46,160
it to select

03:16:44,160 --> 03:16:48,319
so the gateway lets the traffic in says

03:16:46,160 --> 03:16:50,800
what traffic are we interested in

03:16:48,319 --> 03:16:51,600
the virtual service then allows us to

03:16:50,800 --> 03:16:53,840
split it

03:16:51,600 --> 03:16:55,120
if we want to or do other things rewrite

03:16:53,840 --> 03:16:58,160
pieces in there

03:16:55,120 --> 03:16:58,880
and then the destination rule says this

03:16:58,160 --> 03:17:02,479
is how i

03:16:58,880 --> 03:17:04,720
map that split from the virtual service

03:17:02,479 --> 03:17:07,200
to things running in kubernetes through

03:17:04,720 --> 03:17:09,120
the labels here

03:17:07,200 --> 03:17:10,960
so we can set up virtual services in

03:17:09,120 --> 03:17:12,479
different ways here's another variation

03:17:10,960 --> 03:17:15,200
of a virtual service

03:17:12,479 --> 03:17:16,800
this one says that if you look closely

03:17:15,200 --> 03:17:18,080
here they can probably kind of get kind

03:17:16,800 --> 03:17:20,720
of figured out

03:17:18,080 --> 03:17:22,560
for this service traffic coming to here

03:17:20,720 --> 03:17:25,600
we are going to

03:17:22,560 --> 03:17:27,359
return a 400 error code for one out of

03:17:25,600 --> 03:17:30,080
every 1000 requests

03:17:27,359 --> 03:17:31,279
so here's the service in our cluster

03:17:30,080 --> 03:17:33,439
local again that's a

03:17:31,279 --> 03:17:34,560
kubernetes service here's the

03:17:33,439 --> 03:17:37,840
destination

03:17:34,560 --> 03:17:38,239
in here version one okay that would map

03:17:37,840 --> 03:17:41,359
to

03:17:38,239 --> 03:17:44,319
a in the destination rule to

03:17:41,359 --> 03:17:45,680
verse our app it says inject a fault an

03:17:44,319 --> 03:17:48,720
abort fault

03:17:45,680 --> 03:17:49,439
in one out of every 1000 requests in

03:17:48,720 --> 03:17:51,520
there

03:17:49,439 --> 03:17:53,520
and make it a status 400. why would you

03:17:51,520 --> 03:17:55,120
do this well think about testing think

03:17:53,520 --> 03:17:56,800
about you want to test a new version of

03:17:55,120 --> 03:17:58,640
your service before you release it

03:17:56,800 --> 03:18:01,359
you want to see how it responds to that

03:17:58,640 --> 03:18:04,800
you might use this kind of functionality

03:18:01,359 --> 03:18:05,520
if we look at a delay here here's a

03:18:04,800 --> 03:18:07,200
delay

03:18:05,520 --> 03:18:09,359
same kind of thing this produces a five

03:18:07,200 --> 03:18:10,800
second delay one out of every one

03:18:09,359 --> 03:18:13,279
thousand requests to the

03:18:10,800 --> 03:18:14,399
v1 version of our service again you get

03:18:13,279 --> 03:18:17,120
the same idea

03:18:14,399 --> 03:18:18,160
the virtual service defines how we split

03:18:17,120 --> 03:18:19,840
the traffic

03:18:18,160 --> 03:18:21,920
the gateway says what traffic we're

03:18:19,840 --> 03:18:23,600
interested in virtual service says how

03:18:21,920 --> 03:18:25,359
to split that if we want to

03:18:23,600 --> 03:18:26,960
the destination rules say how to map

03:18:25,359 --> 03:18:28,880
that to uh

03:18:26,960 --> 03:18:30,720
versions of our app so if we were to

03:18:28,880 --> 03:18:31,040
look at this in terms of a big picture

03:18:30,720 --> 03:18:34,080
in

03:18:31,040 --> 03:18:36,000
kubernetes here we have istio extends

03:18:34,080 --> 03:18:38,640
the functionality of kubernetes

03:18:36,000 --> 03:18:39,920
we have the control plane running down

03:18:38,640 --> 03:18:43,439
here the stuff that configures

03:18:39,920 --> 03:18:45,279
istio we have the various pods up here

03:18:43,439 --> 03:18:47,200
and i have two versions of my service i

03:18:45,279 --> 03:18:50,319
have an app current deployment

03:18:47,200 --> 03:18:51,920
and an app new deployment okay so i have

03:18:50,319 --> 03:18:53,200
here labels version news

03:18:51,920 --> 03:18:55,840
kind of hard to see but in the blue and

03:18:53,200 --> 03:18:56,960
yellow version current have two versions

03:18:55,840 --> 03:18:58,560
of my service run

03:18:56,960 --> 03:19:00,239
of my application there maybe i'm

03:18:58,560 --> 03:19:00,640
getting ready to roll out a new version

03:19:00,239 --> 03:19:02,800
of it

03:19:00,640 --> 03:19:05,279
and i want to try it out so the control

03:19:02,800 --> 03:19:06,880
plane we have a gateway

03:19:05,279 --> 03:19:08,880
here we not the control plane but the

03:19:06,880 --> 03:19:10,640
other piece have gateway

03:19:08,880 --> 03:19:12,880
we have a virtual service that tells how

03:19:10,640 --> 03:19:15,359
to split it we have a destination rule

03:19:12,880 --> 03:19:16,560
that says how to map it to our

03:19:15,359 --> 03:19:18,560
implementer versions running in

03:19:16,560 --> 03:19:20,880
kubernetes so essentially

03:19:18,560 --> 03:19:22,479
we have the app namespace step the

03:19:20,880 --> 03:19:24,000
applications namespace

03:19:22,479 --> 03:19:26,319
and then we have the istio system

03:19:24,000 --> 03:19:27,760
namespace and things running in sdo

03:19:26,319 --> 03:19:30,000
to kind of give you a visual of how this

03:19:27,760 --> 03:19:32,239
might look let's say that we are sending

03:19:30,000 --> 03:19:33,680
traffic into the gateway

03:19:32,239 --> 03:19:35,680
and then we're using the traffic

03:19:33,680 --> 03:19:38,160
shifting uh paradigm here

03:19:35,680 --> 03:19:39,680
we might send 90 percent of our traffic

03:19:38,160 --> 03:19:41,920
by the big yellow area

03:19:39,680 --> 03:19:43,600
arrow to the current version of our

03:19:41,920 --> 03:19:45,200
deployment and the new version we're

03:19:43,600 --> 03:19:46,160
getting ready to release we might send

03:19:45,200 --> 03:19:48,160
10 version

03:19:46,160 --> 03:19:49,680
then we could tweak the values in that

03:19:48,160 --> 03:19:51,920
virtual service

03:19:49,680 --> 03:19:52,800
and we could say okay now send that work

03:19:51,920 --> 03:19:55,439
send 80

03:19:52,800 --> 03:19:55,840
there or 70 and 30 percent to the new

03:19:55,439 --> 03:19:57,439
one

03:19:55,840 --> 03:19:59,840
we could tweak the values in the virtual

03:19:57,439 --> 03:20:01,200
service again get down to maybe it's

03:19:59,840 --> 03:20:03,680
twenty percent to the

03:20:01,200 --> 03:20:05,040
old one and eighty percent a new one

03:20:03,680 --> 03:20:06,800
until we eventually get to the point

03:20:05,040 --> 03:20:07,680
where we can send all of our traffic to

03:20:06,800 --> 03:20:10,000
the new one

03:20:07,680 --> 03:20:10,880
that's traffic shifting or shifting or

03:20:10,000 --> 03:20:12,479
shaping

03:20:10,880 --> 03:20:14,000
we could do something like the fault we

03:20:12,479 --> 03:20:15,120
could say we're going to send this and

03:20:14,000 --> 03:20:16,640
every so often

03:20:15,120 --> 03:20:18,800
we're going to send a fault to our

03:20:16,640 --> 03:20:20,960
service to make sure or to our

03:20:18,800 --> 03:20:22,720
app to make sure it handles it likewise

03:20:20,960 --> 03:20:24,399
we could send stuff and make sure that

03:20:22,720 --> 03:20:28,080
it periodically

03:20:24,399 --> 03:20:30,479
handles a delay in there

03:20:28,080 --> 03:20:32,239
as well so you get the idea because

03:20:30,479 --> 03:20:33,439
these side cars are sitting in front of

03:20:32,239 --> 03:20:35,120
these containers

03:20:33,439 --> 03:20:37,279
they can map things to it they can

03:20:35,120 --> 03:20:39,439
handle these things and seo

03:20:37,279 --> 03:20:40,560
can control or configure these to do

03:20:39,439 --> 03:20:42,960
these kinds of

03:20:40,560 --> 03:20:45,680
of techniques that we want to use to try

03:20:42,960 --> 03:20:45,680
our apps out

03:20:46,800 --> 03:20:52,720
so let's go to lab number six

03:20:50,000 --> 03:20:55,520
working with sdo see if we can squeeze

03:20:52,720 --> 03:20:55,520
that one in here

03:20:55,840 --> 03:21:00,880
we'll go back to our labs document here

03:21:01,760 --> 03:21:06,560
so we're talking through in live six

03:21:03,920 --> 03:21:07,520
here working with side cars and istio

03:21:06,560 --> 03:21:09,040
basically the first thing you're going

03:21:07,520 --> 03:21:10,000
to do is just set a little value on the

03:21:09,040 --> 03:21:12,080
mini cube system here

03:21:10,000 --> 03:21:13,520
to reduce some noise uh there's a little

03:21:12,080 --> 03:21:14,880
bit of noise that comes on if you should

03:21:13,520 --> 03:21:17,040
be deaf sorry that should be

03:21:14,880 --> 03:21:18,720
notification apparently i spelled one

03:21:17,040 --> 03:21:21,279
update notification

03:21:18,720 --> 03:21:22,000
wrong there should be c a t i o n sorry

03:21:21,279 --> 03:21:24,720
about that

03:21:22,000 --> 03:21:25,120
but you want update notification false

03:21:24,720 --> 03:21:28,239
you can

03:21:25,120 --> 03:21:29,520
see a tion on the end of that uh take a

03:21:28,239 --> 03:21:30,560
look at the pods running out in the

03:21:29,520 --> 03:21:33,760
system

03:21:30,560 --> 03:21:35,840
we can create a namespace now this these

03:21:33,760 --> 03:21:38,720
couple steps in step two here

03:21:35,840 --> 03:21:39,920
config set context that tells us to set

03:21:38,720 --> 03:21:42,399
the default

03:21:39,920 --> 03:21:43,200
namespace to be istio 1 instead of

03:21:42,399 --> 03:21:44,640
default

03:21:43,200 --> 03:21:46,399
that means if i don't specify a

03:21:44,640 --> 03:21:47,600
namespace on the command it will use

03:21:46,399 --> 03:21:49,439
sdo1

03:21:47,600 --> 03:21:50,720
the second command or the third command

03:21:49,439 --> 03:21:54,319
here in step 2

03:21:50,720 --> 03:21:58,080
simply says always inject the side cars

03:21:54,319 --> 03:22:00,720
this is a way of specifying through

03:21:58,080 --> 03:22:02,319
uh lay putting a label on there that

03:22:00,720 --> 03:22:05,040
then tells istio

03:22:02,319 --> 03:22:07,600
in this particular namespace always put

03:22:05,040 --> 03:22:09,600
those side cars into the containers

03:22:07,600 --> 03:22:11,040
we'll go into the roar istio we'll do a

03:22:09,600 --> 03:22:14,479
helm install

03:22:11,040 --> 03:22:15,520
of our istio chart of our chart here

03:22:14,479 --> 03:22:18,080
basically

03:22:15,520 --> 03:22:19,279
and then we'll go ahead and take a look

03:22:18,080 --> 03:22:20,800
at the pods

03:22:19,279 --> 03:22:22,399
we'll take a look at the pods we'll see

03:22:20,800 --> 03:22:23,760
that we have multiple containers

03:22:22,399 --> 03:22:25,279
and then we kind of get to the fun part

03:22:23,760 --> 03:22:26,960
at least what i think is the fun part

03:22:25,279 --> 03:22:27,760
and you can kind of skip over some of

03:22:26,960 --> 03:22:29,840
these

03:22:27,760 --> 03:22:31,439
uh like step seven step seven is just

03:22:29,840 --> 03:22:33,840
kind of looking at

03:22:31,439 --> 03:22:35,279
some of these things uh in more detail

03:22:33,840 --> 03:22:36,000
i'd say skip that now for the sake of

03:22:35,279 --> 03:22:37,279
time

03:22:36,000 --> 03:22:38,640
step eight we're actually going to run a

03:22:37,279 --> 03:22:39,200
little program that i have in there

03:22:38,640 --> 03:22:41,680
called

03:22:39,200 --> 03:22:42,720
uh load roar which is going to do a

03:22:41,680 --> 03:22:46,399
little simple case

03:22:42,720 --> 03:22:48,479
of actually sending traffic to the app

03:22:46,399 --> 03:22:50,160
and it will initially send traffic and

03:22:48,479 --> 03:22:50,960
because we have the virtual service

03:22:50,160 --> 03:22:52,720
configured

03:22:50,960 --> 03:22:54,640
it will essentially send 80 of the

03:22:52,720 --> 03:22:56,160
traffic to the first version

03:22:54,640 --> 03:22:58,080
we have two instances of our pod running

03:22:56,160 --> 03:23:00,640
80 there 20

03:22:58,080 --> 03:23:02,399
to the other version then we'll swap it

03:23:00,640 --> 03:23:06,160
in we'll copy a file

03:23:02,399 --> 03:23:07,520
we'll go ahead and do an upgrade we'll

03:23:06,160 --> 03:23:08,880
switch it we'll swap in a different

03:23:07,520 --> 03:23:12,000
virtual service

03:23:08,880 --> 03:23:13,680
that will do the load uh

03:23:12,000 --> 03:23:16,000
in there and then we'll go ahead and

03:23:13,680 --> 03:23:17,359
upgrade to get that we'll run it again

03:23:16,000 --> 03:23:19,359
and we'll be in the place where we can

03:23:17,359 --> 03:23:20,880
see a demonstration of the fault

03:23:19,359 --> 03:23:22,399
and then finally we'll swap in a

03:23:20,880 --> 03:23:25,520
different virtual service

03:23:22,399 --> 03:23:26,479
and see it running uh a different one of

03:23:25,520 --> 03:23:29,279
the delay

03:23:26,479 --> 03:23:30,319
okay so go ahead and run take let's take

03:23:29,279 --> 03:23:32,080
about

03:23:30,319 --> 03:23:33,359
uh oh let's take about 10 minutes to

03:23:32,080 --> 03:23:34,800
work on this one we'll come back and

03:23:33,359 --> 03:23:36,720
finish up i'll run you through

03:23:34,800 --> 03:23:38,479
talk you through the rest of the pieces

03:23:36,720 --> 03:23:40,319
in there we'll try to best get it here

03:23:38,479 --> 03:23:42,560
at 3 45 on time

03:23:40,319 --> 03:23:44,640
all right so take 10 minutes work on lab

03:23:42,560 --> 03:23:45,840
this last or this last main lab number

03:23:44,640 --> 03:23:48,319
six for istio

03:23:45,840 --> 03:23:49,279
and i'll talk to you after that hey

03:23:48,319 --> 03:23:50,880
everybody we're back

03:23:49,279 --> 03:23:52,720
i know you may not have had time to

03:23:50,880 --> 03:23:54,399
finish up that lab if not

03:23:52,720 --> 03:23:56,399
feel free to go and finish up or maybe

03:23:54,399 --> 03:23:58,000
after we're done here but we are

03:23:56,399 --> 03:24:00,239
scheduled into 3 45 i think

03:23:58,000 --> 03:24:02,479
and i want to make sure i just briefly

03:24:00,239 --> 03:24:03,279
cover the last couple of quick topics

03:24:02,479 --> 03:24:05,359
here

03:24:03,279 --> 03:24:06,720
in the slides and be respectful of your

03:24:05,359 --> 03:24:09,120
time um

03:24:06,720 --> 03:24:10,960
so really quickly here we'll share the

03:24:09,120 --> 03:24:12,479
screen again going back to your slide

03:24:10,960 --> 03:24:15,680
presentation

03:24:12,479 --> 03:24:18,080
um so istio as you can see gives you

03:24:15,680 --> 03:24:19,920
a lot of versatility that idea of having

03:24:18,080 --> 03:24:23,600
that service mesh that

03:24:19,920 --> 03:24:24,000
distributed oops let's try to make sure

03:24:23,600 --> 03:24:25,520
i

03:24:24,000 --> 03:24:27,120
actually share it there we go

03:24:25,520 --> 03:24:28,880
distributed service mesh that is

03:24:27,120 --> 03:24:29,600
centrally managed and configured out

03:24:28,880 --> 03:24:31,040
there

03:24:29,600 --> 03:24:32,160
can do a lot of things for you you can

03:24:31,040 --> 03:24:34,080
have a lot of fun with the virtual

03:24:32,160 --> 03:24:36,239
services and things in there

03:24:34,080 --> 03:24:38,080
well uh one of our last topics today is

03:24:36,239 --> 03:24:38,880
going to be git ops i mentioned get off

03:24:38,080 --> 03:24:40,479
before

03:24:38,880 --> 03:24:43,279
uh to try to talk through this really

03:24:40,479 --> 03:24:45,840
quickly the idea of get ops is

03:24:43,279 --> 03:24:47,600
using is putting your manifest those

03:24:45,840 --> 03:24:50,800
yaml files and stuff

03:24:47,600 --> 03:24:51,760
into a git repository and having

03:24:50,800 --> 03:24:54,319
something

03:24:51,760 --> 03:24:55,040
a process that watches those and when

03:24:54,319 --> 03:24:56,720
they change

03:24:55,040 --> 03:24:58,479
automatically takes them and applies

03:24:56,720 --> 03:25:00,720
them to your kubernetes cluster

03:24:58,479 --> 03:25:02,399
so in other words uh much like you might

03:25:00,720 --> 03:25:03,200
do continuous integration and source

03:25:02,399 --> 03:25:05,200
control

03:25:03,200 --> 03:25:07,200
when you make a change in a file and get

03:25:05,200 --> 03:25:09,439
source control file push it out there

03:25:07,200 --> 03:25:11,040
and something notices that it's files

03:25:09,439 --> 03:25:12,479
change and grabs it and builds it

03:25:11,040 --> 03:25:14,239
in this case something notices that a

03:25:12,479 --> 03:25:16,080
manifest has changed and goes and

03:25:14,239 --> 03:25:18,000
applies it to kubernetes cluster

03:25:16,080 --> 03:25:19,760
you say well why would i want to do that

03:25:18,000 --> 03:25:23,120
other than having automation

03:25:19,760 --> 03:25:25,120
in there think of it this way

03:25:23,120 --> 03:25:27,359
when you talk about putting things in

03:25:25,120 --> 03:25:29,040
git you have the advantages of storing

03:25:27,359 --> 03:25:30,000
things and get of tracking them over

03:25:29,040 --> 03:25:31,840
time

03:25:30,000 --> 03:25:33,279
being able to see who's made changes and

03:25:31,840 --> 03:25:35,040
being able to implement processes in

03:25:33,279 --> 03:25:37,040
front of it code reviews

03:25:35,040 --> 03:25:39,760
those kinds of things so if you uh

03:25:37,040 --> 03:25:41,680
here's a potential sort of use case

03:25:39,760 --> 03:25:43,760
uh i think illustrates the utility of

03:25:41,680 --> 03:25:45,200
this when you talk about for example if

03:25:43,760 --> 03:25:46,960
you have an engineer or somebody a

03:25:45,200 --> 03:25:47,920
kubernetes admin who's responsible for

03:25:46,960 --> 03:25:50,000
your cluster

03:25:47,920 --> 03:25:51,120
and let's say that they want to make a

03:25:50,000 --> 03:25:52,479
change to

03:25:51,120 --> 03:25:53,840
do something to your cluster and they do

03:25:52,479 --> 03:25:55,439
it on a friday before they leave and

03:25:53,840 --> 03:25:57,600
they go off on vacation for a week

03:25:55,439 --> 03:25:58,960
they do it by running cube cuddle and

03:25:57,600 --> 03:26:01,200
then whatever apply

03:25:58,960 --> 03:26:02,800
out there and then doing that and so

03:26:01,200 --> 03:26:04,399
they've used the command line they've

03:26:02,800 --> 03:26:06,239
got their

03:26:04,399 --> 03:26:07,680
yaml files on their own local machine

03:26:06,239 --> 03:26:09,680
they go off vacation

03:26:07,680 --> 03:26:11,359
and monday people come in and find the

03:26:09,680 --> 03:26:13,920
cluster is not working right

03:26:11,359 --> 03:26:15,279
or worse it's down our services are down

03:26:13,920 --> 03:26:16,640
we're not able to do what we need to do

03:26:15,279 --> 03:26:18,160
for our customers

03:26:16,640 --> 03:26:19,760
pretty challenging then or could be

03:26:18,160 --> 03:26:21,760
challenging then to

03:26:19,760 --> 03:26:23,359
figure out what exactly was changed if

03:26:21,760 --> 03:26:24,160
you don't have access to original yaml

03:26:23,359 --> 03:26:26,080
files

03:26:24,160 --> 03:26:27,439
uh figuring out what you need to undo to

03:26:26,080 --> 03:26:29,200
do it that sort of thing

03:26:27,439 --> 03:26:31,439
in there on the other hand if you were

03:26:29,200 --> 03:26:33,040
using a git repository to manage those

03:26:31,439 --> 03:26:36,479
kind of repository

03:26:33,040 --> 03:26:39,520
yaml files in there and the same cube

03:26:36,479 --> 03:26:40,239
uh kubernetes admin pushed a change out

03:26:39,520 --> 03:26:42,239
to get

03:26:40,239 --> 03:26:43,600
and then that was automatically deployed

03:26:42,239 --> 03:26:44,880
into the cluster

03:26:43,600 --> 03:26:46,720
if you came in on monday and found that

03:26:44,880 --> 03:26:48,720
things weren't working you'd be able to

03:26:46,720 --> 03:26:49,120
go back and look and get and see the

03:26:48,720 --> 03:26:51,520
diff

03:26:49,120 --> 03:26:54,239
between the files the files that were

03:26:51,520 --> 03:26:56,479
current before that change was made

03:26:54,239 --> 03:26:58,560
in there and see what was changed and we

03:26:56,479 --> 03:26:59,520
have have a clear indication of what was

03:26:58,560 --> 03:27:04,319
changed in there

03:26:59,520 --> 03:27:06,080
and then as well you would be able to

03:27:04,319 --> 03:27:08,080
to roll back easier right you could

03:27:06,080 --> 03:27:09,200
always grab the version of the files

03:27:08,080 --> 03:27:12,720
that was current

03:27:09,200 --> 03:27:15,040
before the admin made their changes

03:27:12,720 --> 03:27:16,800
and just push them out there again and

03:27:15,040 --> 03:27:19,439
hopefully get your cluster

03:27:16,800 --> 03:27:21,600
uh up and running very quickly so that's

03:27:19,439 --> 03:27:23,279
the basic idea about get ops any change

03:27:21,600 --> 03:27:24,479
to production must be committed in

03:27:23,279 --> 03:27:26,800
source control

03:27:24,479 --> 03:27:28,000
before it's applied to a cluster so

03:27:26,800 --> 03:27:28,960
ideally you do this through if you're

03:27:28,000 --> 03:27:31,520
familiar with like

03:27:28,960 --> 03:27:32,640
get lab or github through a pull request

03:27:31,520 --> 03:27:35,359
or a merge request

03:27:32,640 --> 03:27:37,040
out there and roll back is via git all

03:27:35,359 --> 03:27:38,319
the infrastructure can be recreated from

03:27:37,040 --> 03:27:40,720
source control

03:27:38,319 --> 03:27:42,080
uh it's a powerful idea takes a little

03:27:40,720 --> 03:27:43,680
bit to implement it

03:27:42,080 --> 03:27:45,359
in there so what do you need with it you

03:27:43,680 --> 03:27:47,359
need a git repository your workload

03:27:45,359 --> 03:27:49,120
definitions in yaml format

03:27:47,359 --> 03:27:51,520
a helm chart or something like that

03:27:49,120 --> 03:27:52,720
something that you can track your yaml

03:27:51,520 --> 03:27:55,200
files with

03:27:52,720 --> 03:27:57,120
uh in there and get system of course a

03:27:55,200 --> 03:27:58,720
container registry where your ci system

03:27:57,120 --> 03:28:00,640
pushes immutable images

03:27:58,720 --> 03:28:02,000
so think about it from the standpoint of

03:28:00,640 --> 03:28:02,880
when i have my manifest

03:28:02,000 --> 03:28:04,800
part of what i'm doing when i do

03:28:02,880 --> 03:28:05,840
deployments for example is pulling a

03:28:04,800 --> 03:28:07,359
specific image

03:28:05,840 --> 03:28:10,319
so if i'm making a change and it

03:28:07,359 --> 03:28:13,359
requires a new image i need to have a

03:28:10,319 --> 03:28:15,040
repository uh for my images that i can

03:28:13,359 --> 03:28:17,200
go and grab from as well

03:28:15,040 --> 03:28:18,640
and then an operator we operator is kind

03:28:17,200 --> 03:28:20,479
of a way to do custom

03:28:18,640 --> 03:28:21,920
processing in kubernetes but you need

03:28:20,479 --> 03:28:22,640
some sort of process that's sitting

03:28:21,920 --> 03:28:24,880
there

03:28:22,640 --> 03:28:26,720
watching the git repository and when you

03:28:24,880 --> 03:28:27,520
see the change it goes and grabs and

03:28:26,720 --> 03:28:30,160
updates the

03:28:27,520 --> 03:28:31,520
uh cluster pulls and makes any new

03:28:30,160 --> 03:28:33,359
images available

03:28:31,520 --> 03:28:34,800
that sort of thing so it kind of watches

03:28:33,359 --> 03:28:35,600
for changes and applies them to your

03:28:34,800 --> 03:28:39,040
cluster

03:28:35,600 --> 03:28:42,319
here's a visual real quick of different

03:28:39,040 --> 03:28:44,399
example we have our push out to any kind

03:28:42,319 --> 03:28:47,520
of images to a docker registry

03:28:44,399 --> 03:28:49,200
we have a commit into git below that we

03:28:47,520 --> 03:28:51,439
then have this thing called weave flux

03:28:49,200 --> 03:28:52,080
reflux is one implementation of git ops

03:28:51,439 --> 03:28:54,960
there are plenty

03:28:52,080 --> 03:28:57,439
there are several others but basically

03:28:54,960 --> 03:29:00,560
it notices when something has changed

03:28:57,439 --> 03:29:01,120
and then goes and applies any kind of

03:29:00,560 --> 03:29:02,960
help

03:29:01,120 --> 03:29:04,640
custom helm resources if we're using

03:29:02,960 --> 03:29:06,399
helm out there

03:29:04,640 --> 03:29:08,160
uh going through the helm process and

03:29:06,399 --> 03:29:10,000
making a deployment in there

03:29:08,160 --> 03:29:11,760
that's kind of uh it's it shows a couple

03:29:10,000 --> 03:29:13,439
of extra steps that may not have

03:29:11,760 --> 03:29:14,960
but that probably the idea is the same

03:29:13,439 --> 03:29:16,399
we have a process running

03:29:14,960 --> 03:29:18,560
watching your changes and going through

03:29:16,399 --> 03:29:20,080
there real quickly couple of uh

03:29:18,560 --> 03:29:23,200
last minute and when somebody asked

03:29:20,080 --> 03:29:26,319
about uh securing get ops or

03:29:23,200 --> 03:29:27,760
secrets encrypt uh you can tie in things

03:29:26,319 --> 03:29:29,120
by the way in kubernetes you could tie

03:29:27,760 --> 03:29:30,000
in a vault vault is another one from

03:29:29,120 --> 03:29:31,760
hashicorp

03:29:30,000 --> 03:29:34,239
you can tie in with that and better

03:29:31,760 --> 03:29:36,080
manage those kinds of things

03:29:34,239 --> 03:29:37,520
quickly kubernetes dashboard you can

03:29:36,080 --> 03:29:40,800
spin up a dashboard

03:29:37,520 --> 03:29:44,800
to look at your different uh items your

03:29:40,800 --> 03:29:45,760
pods your services all those kinds of

03:29:44,800 --> 03:29:47,520
things in there

03:29:45,760 --> 03:29:49,200
there's another monitoring tool called

03:29:47,520 --> 03:29:51,760
prometheus which is kind of a time

03:29:49,200 --> 03:29:53,760
series based as events come in over time

03:29:51,760 --> 03:29:54,160
it allows us to track that and kind of

03:29:53,760 --> 03:29:57,279
see

03:29:54,160 --> 03:29:58,399
the changes over time grafana is one

03:29:57,279 --> 03:30:00,319
that allows you to

03:29:58,399 --> 03:30:02,800
build some very nice dashboards and

03:30:00,319 --> 03:30:04,319
graphs and panels together in there

03:30:02,800 --> 03:30:05,640
and in the bonus lab i won't take the

03:30:04,319 --> 03:30:06,800
time to go through it now it's pretty

03:30:05,640 --> 03:30:08,720
self-explanatory

03:30:06,800 --> 03:30:10,720
there's a bonus lab in your labs where

03:30:08,720 --> 03:30:11,840
you spin up the kubernetes dashboard in

03:30:10,720 --> 03:30:14,399
a mini cube

03:30:11,840 --> 03:30:15,760
it also guides you through an example of

03:30:14,399 --> 03:30:17,840
using prometheus

03:30:15,760 --> 03:30:19,680
an example of using grafana those are

03:30:17,840 --> 03:30:20,239
kind of some common tools you might run

03:30:19,680 --> 03:30:22,479
into

03:30:20,239 --> 03:30:24,479
to today all right looks like we're at

03:30:22,479 --> 03:30:25,920
right at 3 45

03:30:24,479 --> 03:30:28,239
so i'm going to finish on time again be

03:30:25,920 --> 03:30:29,359
respectful of your time i do want to say

03:30:28,239 --> 03:30:32,319
a a

03:30:29,359 --> 03:30:34,399
huge thank you to uh colin logan for

03:30:32,319 --> 03:30:36,880
helping out from chromeware and being uh

03:30:34,399 --> 03:30:38,239
great at helping to help people who are

03:30:36,880 --> 03:30:40,080
running the problems really appreciate

03:30:38,239 --> 03:30:42,319
it really makes a difference and makes

03:30:40,080 --> 03:30:43,600
uh my part of it easier by having them

03:30:42,319 --> 03:30:45,520
to help out everybody

03:30:43,600 --> 03:30:47,840
and also a huge thank you to all of you

03:30:45,520 --> 03:30:49,439
who hung in here

03:30:47,840 --> 03:30:51,920
throughout this i know this was a long

03:30:49,439 --> 03:30:54,080
workshop i do hope it was useful to you

03:30:51,920 --> 03:30:55,520
and that you got some value out of it

03:30:54,080 --> 03:30:57,200
would love to hear feedback i'm sure

03:30:55,520 --> 03:31:00,239
we'll have some kind of a

03:30:57,200 --> 03:31:02,399
feedback forms or something out there um

03:31:00,239 --> 03:31:04,399
feel free to connect with me on twitter

03:31:02,399 --> 03:31:07,600
if you're interested in any other

03:31:04,399 --> 03:31:09,040
workshops i do i do a lot on o'reilly i

03:31:07,600 --> 03:31:11,439
have a couple of others coming up

03:31:09,040 --> 03:31:12,479
throughout this year next but uh

03:31:11,439 --> 03:31:14,319
hopefully i'll get to talk to you in the

03:31:12,479 --> 03:31:16,800
future workshop or get to

03:31:14,319 --> 03:31:18,560
be with get to uh meet you sometime in

03:31:16,800 --> 03:31:19,040
person once we're all past the virus

03:31:18,560 --> 03:31:21,359
here

03:31:19,040 --> 03:31:27,840
really appreciate it and uh thanks again

03:31:21,359 --> 03:31:27,840
for your attention and any feedback

03:31:28,080 --> 03:31:30,160

YouTube URL: https://www.youtube.com/watch?v=_9ppmg9NF80


