Title: Your Applications are Under Attack: Protecting each step of the development lifecycle - Maury Cupitt
Publication date: 2020-12-04
Playlist: All Things Open 2020 - Extended Session Tracks
Description: 
	Presented by: Maury Cupitt, Sonatype
Presented at All Things Open 2020 - Extended Sessions Tracks

Abstract: Your developer supply chain is constantly under attack, from the download of vulnerable components, to the licensing and governance of those components, all the way through monitoring their use in the production environment. In this workshop/lecture, Maury Cupitt will look at each phase of the development lifecycle and show how to protect each of those phases using the Nexus Platform.
Captions: 
	00:00:04,960 --> 00:00:08,000
thank you very much

00:00:05,839 --> 00:00:09,599
yeah that's a long title for uh a

00:00:08,000 --> 00:00:10,719
two-hour workshop i think we're gonna

00:00:09,599 --> 00:00:11,519
we're gonna touch on a lot of things

00:00:10,719 --> 00:00:14,240
today

00:00:11,519 --> 00:00:15,519
um i wanna welcome uh arena arena is

00:00:14,240 --> 00:00:19,520
gonna be helping me uh

00:00:15,519 --> 00:00:22,080
she and our co-workers at um at sonotype

00:00:19,520 --> 00:00:22,560
and we'll just we'll get right into it

00:00:22,080 --> 00:00:24,560
um

00:00:22,560 --> 00:00:26,560
i think a lot like a lot of folks in

00:00:24,560 --> 00:00:27,680
technology i uh have lots of hobbies

00:00:26,560 --> 00:00:30,000
i've been doing

00:00:27,680 --> 00:00:31,279
this for over 25 years now i have an

00:00:30,000 --> 00:00:33,520
arts background but

00:00:31,279 --> 00:00:35,520
i've been lucky enough to work for some

00:00:33,520 --> 00:00:39,120
great internet based companies

00:00:35,520 --> 00:00:41,440
starting in the mid 90s so

00:00:39,120 --> 00:00:42,559
i'm just glad to be here i love this

00:00:41,440 --> 00:00:45,440
conference because it's right down the

00:00:42,559 --> 00:00:47,840
road for me i'm in durham north carolina

00:00:45,440 --> 00:00:49,760
and typically it's in in raleigh i miss

00:00:47,840 --> 00:00:51,760
the whole t-shirt drive thing i

00:00:49,760 --> 00:00:53,280
i wish i had paid more attention to the

00:00:51,760 --> 00:00:55,840
emails on that

00:00:53,280 --> 00:00:57,440
but um what i want to do is and kind of

00:00:55,840 --> 00:00:59,680
do a quick review of

00:00:57,440 --> 00:01:01,359
why we're doing the workshop what um

00:00:59,680 --> 00:01:04,479
what we're really trying to cover

00:01:01,359 --> 00:01:06,479
and then and then look at some of the

00:01:04,479 --> 00:01:08,799
the types of vulnerabilities some of the

00:01:06,479 --> 00:01:12,320
tools and open source tools that are

00:01:08,799 --> 00:01:13,040
used uh to help protect uh you from

00:01:12,320 --> 00:01:15,040
those and then

00:01:13,040 --> 00:01:17,119
look at some of the more uh enterprise

00:01:15,040 --> 00:01:19,840
tools that we provide as well

00:01:17,119 --> 00:01:20,960
we will take a break at uh uh an hour we

00:01:19,840 --> 00:01:24,080
may take breaks in

00:01:20,960 --> 00:01:25,840
in between um but uh

00:01:24,080 --> 00:01:27,280
uh one of one of the things when we go

00:01:25,840 --> 00:01:30,799
through the workshop piece of it

00:01:27,280 --> 00:01:33,119
uh we're gonna do it step by step but um

00:01:30,799 --> 00:01:33,840
uh don't worry about keeping up we'll

00:01:33,119 --> 00:01:35,840
we'll record

00:01:33,840 --> 00:01:37,119
and keep going but um why are we here

00:01:35,840 --> 00:01:39,200
why are we building software and

00:01:37,119 --> 00:01:40,560
why are we at a devops uh conference

00:01:39,200 --> 00:01:42,880
right

00:01:40,560 --> 00:01:44,000
we used to have a number of slides that

00:01:42,880 --> 00:01:46,560
edward

00:01:44,000 --> 00:01:47,840
edwards deming quoted around software

00:01:46,560 --> 00:01:51,040
supply chain

00:01:47,840 --> 00:01:52,000
and kind of a month or two into the

00:01:51,040 --> 00:01:53,360
pandemic here

00:01:52,000 --> 00:01:55,680
started reading some of the other ones

00:01:53,360 --> 00:01:57,360
and and one of these desired outcomes is

00:01:55,680 --> 00:01:58,719
all right create a consistency of

00:01:57,360 --> 00:01:59,680
purpose and dedication to the

00:01:58,719 --> 00:02:01,439
improvement

00:01:59,680 --> 00:02:03,200
of competitive position to keep the

00:02:01,439 --> 00:02:04,240
company alive and to provide jobs for

00:02:03,200 --> 00:02:06,640
their employees

00:02:04,240 --> 00:02:08,720
um i don't know about you and and your

00:02:06,640 --> 00:02:11,200
companies are your work um

00:02:08,720 --> 00:02:12,560
but me and my customers we're really

00:02:11,200 --> 00:02:14,080
really trying to keep the company alive

00:02:12,560 --> 00:02:16,400
and provide jobs for us

00:02:14,080 --> 00:02:17,440
uh so when we start to look at the big

00:02:16,400 --> 00:02:20,400
picture here

00:02:17,440 --> 00:02:22,160
right it's about this this notion of uh

00:02:20,400 --> 00:02:23,599
providing competitive position which

00:02:22,160 --> 00:02:24,480
provides value to our customers that's

00:02:23,599 --> 00:02:27,120
the whole

00:02:24,480 --> 00:02:27,760
reason we're we're doing devops right

00:02:27,120 --> 00:02:29,200
and

00:02:27,760 --> 00:02:31,440
the consensus that we've gotten to is

00:02:29,200 --> 00:02:32,400
that faster is better right so how do we

00:02:31,440 --> 00:02:33,920
get faster

00:02:32,400 --> 00:02:35,519
it's been the digital transformation

00:02:33,920 --> 00:02:37,680
nothing has changed that

00:02:35,519 --> 00:02:38,720
i've been on a couple of panels lately

00:02:37,680 --> 00:02:40,480
where

00:02:38,720 --> 00:02:41,680
the conversation has been about speed

00:02:40,480 --> 00:02:42,560
and have been about digital

00:02:41,680 --> 00:02:44,800
transformation

00:02:42,560 --> 00:02:46,000
and we've been sitting in this limbo for

00:02:44,800 --> 00:02:49,280
years

00:02:46,000 --> 00:02:51,840
with devops and agile where people were

00:02:49,280 --> 00:02:54,879
kind of half on board not half on board

00:02:51,840 --> 00:02:56,400
and you start to look at well what

00:02:54,879 --> 00:02:58,560
what's kind of kickstarted and really

00:02:56,400 --> 00:03:01,920
the pandemic has helped kick start that

00:02:58,560 --> 00:03:03,680
um for better for worse right but

00:03:01,920 --> 00:03:07,040
it's one of those things where we're now

00:03:03,680 --> 00:03:08,239
really starting to see the promise of

00:03:07,040 --> 00:03:10,800
what we've been working on on the

00:03:08,239 --> 00:03:13,840
digital transformation for years now

00:03:10,800 --> 00:03:17,519
and uh it digital transformation for us

00:03:13,840 --> 00:03:19,599
is agile devops devsecops ci cd

00:03:17,519 --> 00:03:20,879
we know that speed is the most important

00:03:19,599 --> 00:03:22,560
thing doesn't matter

00:03:20,879 --> 00:03:24,319
what book you're reading it's all about

00:03:22,560 --> 00:03:26,400
reducing lead time delivering

00:03:24,319 --> 00:03:27,519
secure features faster and valuable to

00:03:26,400 --> 00:03:30,959
our customers

00:03:27,519 --> 00:03:33,599
and when we look at that the benefits um

00:03:30,959 --> 00:03:34,319
are quantifiable right we do more

00:03:33,599 --> 00:03:37,280
frequent

00:03:34,319 --> 00:03:37,920
code deployments we have a faster lead

00:03:37,280 --> 00:03:39,519
time

00:03:37,920 --> 00:03:41,760
we have a faster time to recover from

00:03:39,519 --> 00:03:42,720
incidents and we have lower change

00:03:41,760 --> 00:03:45,760
failure rates

00:03:42,720 --> 00:03:46,480
right oh this company this company

00:03:45,760 --> 00:03:48,720
releases

00:03:46,480 --> 00:03:49,840
you know weekly well sometimes maybe

00:03:48,720 --> 00:03:52,959
it's weekly because

00:03:49,840 --> 00:03:54,799
not such great software but that notion

00:03:52,959 --> 00:03:57,519
of let me let me get fast

00:03:54,799 --> 00:03:59,840
let me deliver value let me fail fast

00:03:57,519 --> 00:04:02,000
right so i can build the business up

00:03:59,840 --> 00:04:02,879
now fast is good so what could go wrong

00:04:02,000 --> 00:04:06,480
in this

00:04:02,879 --> 00:04:08,560
and for me uh getting seeing this quote

00:04:06,480 --> 00:04:09,519
around proxies the whole notion of the

00:04:08,560 --> 00:04:11,439
process

00:04:09,519 --> 00:04:13,040
um really brought out the last couple of

00:04:11,439 --> 00:04:15,920
years i think sometimes we're

00:04:13,040 --> 00:04:16,880
we're caught up in uh the process of

00:04:15,920 --> 00:04:19,919
devops

00:04:16,880 --> 00:04:21,199
the the actions the steps the tools uh

00:04:19,919 --> 00:04:23,919
the procedures

00:04:21,199 --> 00:04:25,759
and and still really not focusing on

00:04:23,919 --> 00:04:27,600
what the most important thing is and

00:04:25,759 --> 00:04:29,360
now we're forced to focus on the most

00:04:27,600 --> 00:04:30,080
important thing i think that's really

00:04:29,360 --> 00:04:32,639
brought

00:04:30,080 --> 00:04:33,919
some things into view around what we

00:04:32,639 --> 00:04:35,759
need to do

00:04:33,919 --> 00:04:37,280
to actually deliver value faster and

00:04:35,759 --> 00:04:38,000
deliver innovation faster to our

00:04:37,280 --> 00:04:41,280
customers

00:04:38,000 --> 00:04:42,960
right and that i'm going to oversimplify

00:04:41,280 --> 00:04:44,560
is that improvement of the competitive

00:04:42,960 --> 00:04:46,320
position to keep the company alive and

00:04:44,560 --> 00:04:48,800
provide jobs for the employees

00:04:46,320 --> 00:04:50,400
if if you ask anybody what what they do

00:04:48,800 --> 00:04:52,720
at a

00:04:50,400 --> 00:04:54,560
company this this should be the answer i

00:04:52,720 --> 00:04:56,479
do it through selling software

00:04:54,560 --> 00:04:59,280
my engineers develop software that i can

00:04:56,479 --> 00:05:03,120
sell right that's how the business works

00:04:59,280 --> 00:05:04,960
um so to put that in motion

00:05:03,120 --> 00:05:06,880
howard develops getting fast developers

00:05:04,960 --> 00:05:07,520
getting faster well they're using open

00:05:06,880 --> 00:05:10,160
source

00:05:07,520 --> 00:05:10,880
software right and this is no secret to

00:05:10,160 --> 00:05:14,000
the folks on

00:05:10,880 --> 00:05:16,080
in this uh in this session uh but

00:05:14,000 --> 00:05:17,440
the amount of open source that a typical

00:05:16,080 --> 00:05:19,600
application is using

00:05:17,440 --> 00:05:20,560
uh surprises somebody keeps going up

00:05:19,600 --> 00:05:23,520
it's 90

00:05:20,560 --> 00:05:25,360
now right when you start to look at the

00:05:23,520 --> 00:05:26,080
application how do we get faster well we

00:05:25,360 --> 00:05:27,520
get faster

00:05:26,080 --> 00:05:29,759
using the package app so we can just

00:05:27,520 --> 00:05:30,639
focus on uh the code and the hard

00:05:29,759 --> 00:05:32,400
business of

00:05:30,639 --> 00:05:33,759
uh developing innovation around our

00:05:32,400 --> 00:05:35,520
business right

00:05:33,759 --> 00:05:38,080
and it's not just one language that

00:05:35,520 --> 00:05:40,320
we're we're using anymore right um

00:05:38,080 --> 00:05:42,400
we're using java for the traditional uh

00:05:40,320 --> 00:05:44,479
pieces we're using npm we're using nuget

00:05:42,400 --> 00:05:46,639
we're using python for the data

00:05:44,479 --> 00:05:48,080
piece of it infrastructure as code right

00:05:46,639 --> 00:05:49,520
now we're using all these open source

00:05:48,080 --> 00:05:51,520
components to even drive

00:05:49,520 --> 00:05:53,600
the uh the open source components that

00:05:51,520 --> 00:05:54,960
we're using to build our software

00:05:53,600 --> 00:05:57,120
and it's just becoming more and more

00:05:54,960 --> 00:05:58,800
complex right when you're when you're in

00:05:57,120 --> 00:05:59,840
the trillions of downloads for these

00:05:58,800 --> 00:06:03,039
open source components

00:05:59,840 --> 00:06:05,120
it becomes hard to to manage and

00:06:03,039 --> 00:06:06,960
you know the typical uh the typical

00:06:05,120 --> 00:06:07,360
company just in java components is it's

00:06:06,960 --> 00:06:10,080
around

00:06:07,360 --> 00:06:10,960
380 000 components annually that are

00:06:10,080 --> 00:06:12,400
delivered

00:06:10,960 --> 00:06:14,880
now some of these metrics that you'll

00:06:12,400 --> 00:06:16,479
see sonatype is the creators and the

00:06:14,880 --> 00:06:18,639
stewards of maven central it's the

00:06:16,479 --> 00:06:20,080
largest open source repository so

00:06:18,639 --> 00:06:21,840
we know a little bit about scale and we

00:06:20,080 --> 00:06:23,680
know a little bit about the components

00:06:21,840 --> 00:06:24,479
that flow through there and we partner

00:06:23,680 --> 00:06:27,440
with the other

00:06:24,479 --> 00:06:28,400
uh package manager company so we'll

00:06:27,440 --> 00:06:30,319
we'll take a look at

00:06:28,400 --> 00:06:32,800
some open source products and

00:06:30,319 --> 00:06:36,000
vulnerabilities as we keep going through

00:06:32,800 --> 00:06:39,120
a lot of what what we're trying to to

00:06:36,000 --> 00:06:40,880
get customers to do for us is how do how

00:06:39,120 --> 00:06:42,000
do they manage their dependencies really

00:06:40,880 --> 00:06:44,800
getting them to

00:06:42,000 --> 00:06:45,840
understand that a manual process um or

00:06:44,800 --> 00:06:49,680
any process at all

00:06:45,840 --> 00:06:51,680
is better than nothing and a lot of

00:06:49,680 --> 00:06:53,520
a lot of companies are recognizing that

00:06:51,680 --> 00:06:55,759
they really don't have a process

00:06:53,520 --> 00:06:57,919
and if that manual process exists it's

00:06:55,759 --> 00:06:59,440
typically six to eight weeks to approve

00:06:57,919 --> 00:07:01,360
a component i mentioned in north

00:06:59,440 --> 00:07:02,400
carolina there's my insurance company is

00:07:01,360 --> 00:07:04,000
here

00:07:02,400 --> 00:07:06,080
they were able to save three full-time

00:07:04,000 --> 00:07:07,440
employees uh re-task them they were

00:07:06,080 --> 00:07:10,240
called librarians

00:07:07,440 --> 00:07:11,120
and they automated that delivery of the

00:07:10,240 --> 00:07:14,000
the open source

00:07:11,120 --> 00:07:15,440
uh components through policy right so

00:07:14,000 --> 00:07:16,319
having a way to manage these

00:07:15,440 --> 00:07:17,919
dependencies

00:07:16,319 --> 00:07:19,599
part of this workshop is we'll take a

00:07:17,919 --> 00:07:21,919
look at that um

00:07:19,599 --> 00:07:24,319
because when we when we think about this

00:07:21,919 --> 00:07:26,080
it becomes so critical that we have

00:07:24,319 --> 00:07:27,840
some sort of visibility into the open

00:07:26,080 --> 00:07:29,919
source components that we're using

00:07:27,840 --> 00:07:31,599
and we'll see a lot of different ways to

00:07:29,919 --> 00:07:32,720
uh to get that visibility today and

00:07:31,599 --> 00:07:34,639
which ones are better than

00:07:32,720 --> 00:07:36,400
than the others but we don't want to be

00:07:34,639 --> 00:07:37,919
one of these statistics right

00:07:36,400 --> 00:07:40,160
we know that one in 10 open source

00:07:37,919 --> 00:07:42,720
components has a security vulnerability

00:07:40,160 --> 00:07:44,560
we know people are are having data

00:07:42,720 --> 00:07:48,000
breaches and it's not just data breaches

00:07:44,560 --> 00:07:49,039
it's using our build cpus to to mine

00:07:48,000 --> 00:07:52,080
bitcoin right

00:07:49,039 --> 00:07:54,240
um it's not again uh the

00:07:52,080 --> 00:07:55,199
the uh cyber crime trade is bigger than

00:07:54,240 --> 00:07:57,680
the drug trade

00:07:55,199 --> 00:07:58,479
right a couple years ago we said we

00:07:57,680 --> 00:08:01,280
would be able to say

00:07:58,479 --> 00:08:02,800
it's going to be it is bigger right so

00:08:01,280 --> 00:08:04,800
and significantly bigger so there's a

00:08:02,800 --> 00:08:07,440
lot of money involved in this

00:08:04,800 --> 00:08:08,879
and it becomes complex i mentioned that

00:08:07,440 --> 00:08:11,759
380 000

00:08:08,879 --> 00:08:13,680
uh 380 000 java components downloaded

00:08:11,759 --> 00:08:17,120
well when you do that one in 10 roughly

00:08:13,680 --> 00:08:18,560
you end up with 30 000 components with

00:08:17,120 --> 00:08:20,479
known vulnerabilities right how do you

00:08:18,560 --> 00:08:23,039
manage that how do you even know what's

00:08:20,479 --> 00:08:24,080
what's in that world and again we'll

00:08:23,039 --> 00:08:26,560
take a look at

00:08:24,080 --> 00:08:28,000
a couple of these because the the open

00:08:26,560 --> 00:08:30,720
source components that we're using

00:08:28,000 --> 00:08:31,120
are the foundations of our applications

00:08:30,720 --> 00:08:34,320
um

00:08:31,120 --> 00:08:36,320
i love this we got this

00:08:34,320 --> 00:08:38,240
um i saw this one a couple weeks ago and

00:08:36,320 --> 00:08:39,360
then uh just on a whim in the slack

00:08:38,240 --> 00:08:40,320
channel i was like oh

00:08:39,360 --> 00:08:42,800
i think i want to do an entire

00:08:40,320 --> 00:08:45,920
presentation uh just on these

00:08:42,800 --> 00:08:46,640
um just on these comics and uh there

00:08:45,920 --> 00:08:48,880
were quite a

00:08:46,640 --> 00:08:49,680
quite a few that that fit the whole open

00:08:48,880 --> 00:08:52,959
sourced

00:08:49,680 --> 00:08:56,880
uh open source um realm

00:08:52,959 --> 00:08:59,600
so um well enough of the overview

00:08:56,880 --> 00:09:00,160
uh and i see chat stuff going by it's

00:08:59,600 --> 00:09:03,920
hard to

00:09:00,160 --> 00:09:07,200
to see all right perfect um

00:09:03,920 --> 00:09:10,240
now uh the workshop part right uh

00:09:07,200 --> 00:09:12,160
i will get the slides somehow and and

00:09:10,240 --> 00:09:13,920
and powerpoint and maybe android

00:09:12,160 --> 00:09:16,320
recording so um

00:09:13,920 --> 00:09:18,000
i will i will screw things up here uh as

00:09:16,320 --> 00:09:18,480
we do it live but i think it's important

00:09:18,000 --> 00:09:19,839
that we

00:09:18,480 --> 00:09:22,160
when we actually go through the the

00:09:19,839 --> 00:09:24,000
process but um what we're gonna

00:09:22,160 --> 00:09:25,120
really do is i mean if you're following

00:09:24,000 --> 00:09:26,560
along we're really just gonna follow

00:09:25,120 --> 00:09:28,160
along on part one of two and then

00:09:26,560 --> 00:09:29,839
maybe a little bit of part three you

00:09:28,160 --> 00:09:31,279
need a github account you need docker

00:09:29,839 --> 00:09:33,839
installed on your local machine

00:09:31,279 --> 00:09:35,120
we're gonna use visual code uh there's

00:09:33,839 --> 00:09:36,720
some

00:09:35,120 --> 00:09:38,480
assumptions made like maybe you have

00:09:36,720 --> 00:09:38,959
maven if you have a mac it's probably a

00:09:38,480 --> 00:09:41,279
little bit

00:09:38,959 --> 00:09:42,720
a little bit easier but we'll step

00:09:41,279 --> 00:09:45,120
through this right now

00:09:42,720 --> 00:09:46,080
again if you have questions um feel free

00:09:45,120 --> 00:09:49,120
to

00:09:46,080 --> 00:09:50,240
put them in the the chat window but what

00:09:49,120 --> 00:09:51,360
we're going to do is we're going to take

00:09:50,240 --> 00:09:54,160
a look at the anatomy

00:09:51,360 --> 00:09:55,440
really of an application with a with a

00:09:54,160 --> 00:09:56,399
vulnerability and then we're going to

00:09:55,440 --> 00:09:59,120
look at some of the

00:09:56,399 --> 00:10:00,880
tools that are available to understand

00:09:59,120 --> 00:10:02,320
what open source components were using

00:10:00,880 --> 00:10:04,480
what are the vulnerabilities there

00:10:02,320 --> 00:10:05,360
and really do they match up to what we

00:10:04,480 --> 00:10:08,720
just saw

00:10:05,360 --> 00:10:10,240
uh run and um how we're going to do that

00:10:08,720 --> 00:10:11,760
is the first thing we're going to do is

00:10:10,240 --> 00:10:13,920
we're going to fork a github

00:10:11,760 --> 00:10:16,160
project that we have over at the

00:10:13,920 --> 00:10:19,040
sonotype nexus community github site

00:10:16,160 --> 00:10:19,920
it's the struts2 rce we forked it from

00:10:19,040 --> 00:10:23,360
somebody else

00:10:19,920 --> 00:10:24,480
but um we're going to fork that and then

00:10:23,360 --> 00:10:25,839
we're going to add some additional

00:10:24,480 --> 00:10:27,120
features to the repo when they're going

00:10:25,839 --> 00:10:28,160
to clone the project into our

00:10:27,120 --> 00:10:29,680
workstation

00:10:28,160 --> 00:10:32,399
we'll build and run the docker image and

00:10:29,680 --> 00:10:35,200
then see the exploit in action

00:10:32,399 --> 00:10:35,839
um so let's go ahead and do that right

00:10:35,200 --> 00:10:39,360
um

00:10:35,839 --> 00:10:40,240
if we take a look at uh sonotype nexus

00:10:39,360 --> 00:10:43,519
community if you

00:10:40,240 --> 00:10:46,560
if you could just go to go github.com

00:10:43,519 --> 00:10:48,880
type nexus community you can then find a

00:10:46,560 --> 00:10:53,600
repository

00:10:48,880 --> 00:10:53,600
and we'll do struts to rce here

00:10:53,839 --> 00:10:57,839
one of the things that you may may or

00:10:56,720 --> 00:10:59,440
may not know

00:10:57,839 --> 00:11:01,839
i'm going to add a new tab to the right

00:10:59,440 --> 00:11:04,880
here and i'm just gonna go into github

00:11:01,839 --> 00:11:07,600
um sometimes if you want to uh

00:11:04,880 --> 00:11:08,640
or if you're using multiple repositories

00:11:07,600 --> 00:11:10,399
um

00:11:08,640 --> 00:11:12,160
you can create organizations that are

00:11:10,399 --> 00:11:12,560
really just organizations to you right

00:11:12,160 --> 00:11:15,760
so i

00:11:12,560 --> 00:11:18,800
had created an organization um for

00:11:15,760 --> 00:11:20,800
uh my repo right so if i

00:11:18,800 --> 00:11:22,480
come into organizations and i want to

00:11:20,800 --> 00:11:25,680
create a new organization

00:11:22,480 --> 00:11:29,600
um we'll use the free one right and

00:11:25,680 --> 00:11:32,160
we'll just call this um 2020 dash

00:11:29,600 --> 00:11:32,160
ato

00:11:33,480 --> 00:11:39,760
struts2 and we'll put our email in here

00:11:37,200 --> 00:11:39,760
maury at

00:11:41,279 --> 00:11:45,760
dot sonotype.com and i want this to be

00:11:43,760 --> 00:11:48,560
part of my personal account

00:11:45,760 --> 00:11:50,320
and then we just click next and now i've

00:11:48,560 --> 00:11:52,240
got an organization

00:11:50,320 --> 00:11:53,839
right so we'll skip this it's just going

00:11:52,240 --> 00:11:56,160
to be me where

00:11:53,839 --> 00:11:57,360
we got to answer some questions i kind

00:11:56,160 --> 00:12:00,800
of want to

00:11:57,360 --> 00:12:02,720
i know it's an open source project

00:12:00,800 --> 00:12:05,120
we're going to manage some code maybe

00:12:02,720 --> 00:12:07,440
set up some ci cd

00:12:05,120 --> 00:12:08,720
we already have an existing repository

00:12:07,440 --> 00:12:11,600
it's this one

00:12:08,720 --> 00:12:12,560
and we will submit right so now i have

00:12:11,600 --> 00:12:15,200
no

00:12:12,560 --> 00:12:16,240
repositories so let's go back to our

00:12:15,200 --> 00:12:18,480
clone

00:12:16,240 --> 00:12:19,680
our fork so we're going to fork struts

00:12:18,480 --> 00:12:21,360
to

00:12:19,680 --> 00:12:23,040
rce so i'm going to come over to the top

00:12:21,360 --> 00:12:25,040
right i'm going to click fork

00:12:23,040 --> 00:12:26,959
and you see i've forked it already and

00:12:25,040 --> 00:12:28,560
it's one of the reasons

00:12:26,959 --> 00:12:30,320
um i needed to create another

00:12:28,560 --> 00:12:32,320
organization

00:12:30,320 --> 00:12:34,880
one that lets me organize things a great

00:12:32,320 --> 00:12:36,720
name the second is i just can't for

00:12:34,880 --> 00:12:38,800
the same project into the same

00:12:36,720 --> 00:12:39,440
organization so created my organization

00:12:38,800 --> 00:12:42,240
here

00:12:39,440 --> 00:12:44,320
uh we'll fork it into uh into that and

00:12:42,240 --> 00:12:46,959
wait a couple of seconds and

00:12:44,320 --> 00:12:49,600
we will get a new repository source code

00:12:46,959 --> 00:12:51,760
repository

00:12:49,600 --> 00:12:53,920
so what did we just download what did we

00:12:51,760 --> 00:12:55,120
just for well we forked the struts to

00:12:53,920 --> 00:12:58,480
reference

00:12:55,120 --> 00:13:01,200
uh the reference application

00:12:58,480 --> 00:13:02,560
uh with the exploit uh for specific

00:13:01,200 --> 00:13:05,839
vulnerability

00:13:02,560 --> 00:13:06,720
right so um this is you know a realistic

00:13:05,839 --> 00:13:09,200
scenario

00:13:06,720 --> 00:13:10,480
uh uh where the reference project now

00:13:09,200 --> 00:13:12,959
the reference project is

00:13:10,480 --> 00:13:14,240
the thing that was deployed uh you could

00:13:12,959 --> 00:13:17,040
actually download

00:13:14,240 --> 00:13:18,320
the the full project itself and it had

00:13:17,040 --> 00:13:21,600
the vulnerability

00:13:18,320 --> 00:13:23,760
built in so um we'll use this

00:13:21,600 --> 00:13:24,959
uh we'll go on the command line we'll

00:13:23,760 --> 00:13:27,519
we'll uh

00:13:24,959 --> 00:13:28,639
uh we'll clone it we'll build it uh and

00:13:27,519 --> 00:13:29,920
this will be a little bit fun because

00:13:28,639 --> 00:13:31,519
we'll get to use some of the docker

00:13:29,920 --> 00:13:34,720
we'll use some python we'll

00:13:31,519 --> 00:13:35,600
we'll look at um actually how nasty some

00:13:34,720 --> 00:13:37,360
of these

00:13:35,600 --> 00:13:39,120
vulnerabilities can be and then we'll

00:13:37,360 --> 00:13:41,120
then we'll go from there

00:13:39,120 --> 00:13:43,199
so before we do that there are a couple

00:13:41,120 --> 00:13:44,720
of steps uh that we need to do we're

00:13:43,199 --> 00:13:46,639
going to enable the issues we're going

00:13:44,720 --> 00:13:48,720
to enable dependency

00:13:46,639 --> 00:13:49,839
graph because we want to see what github

00:13:48,720 --> 00:13:53,440
actually says

00:13:49,839 --> 00:13:54,160
uh about our projects um from a security

00:13:53,440 --> 00:13:56,000
standpoint

00:13:54,160 --> 00:13:57,600
uh i actually dropped the part where we

00:13:56,000 --> 00:13:58,639
need the issue so we don't necessarily

00:13:57,600 --> 00:14:01,839
need to enable

00:13:58,639 --> 00:14:02,959
the issues but we might as well so we'll

00:14:01,839 --> 00:14:04,480
come over to

00:14:02,959 --> 00:14:06,639
our settings let me make sure i'm in the

00:14:04,480 --> 00:14:08,320
right one over here we'll come into our

00:14:06,639 --> 00:14:09,600
settings we'll scroll down

00:14:08,320 --> 00:14:12,000
i always think i'm in the wrong place

00:14:09,600 --> 00:14:14,480
because this big template here but

00:14:12,000 --> 00:14:16,079
if you scroll down your new projects

00:14:14,480 --> 00:14:17,920
don't get forked with the the issue

00:14:16,079 --> 00:14:19,120
so we'll just check the issue box you

00:14:17,920 --> 00:14:22,240
don't have to save anything you'll see

00:14:19,120 --> 00:14:24,480
the little check box there

00:14:22,240 --> 00:14:26,560
my dog just came back from his walk the

00:14:24,480 --> 00:14:29,680
joys of working from home

00:14:26,560 --> 00:14:30,800
so as we come through we'll also come to

00:14:29,680 --> 00:14:32,399
our insights here

00:14:30,800 --> 00:14:34,000
and we're going to look at the

00:14:32,399 --> 00:14:37,360
dependency graphs and we'll

00:14:34,000 --> 00:14:40,480
enable the dependency graphs here

00:14:37,360 --> 00:14:42,320
all right um let's enable the

00:14:40,480 --> 00:14:42,639
dependenbot too so we can see everything

00:14:42,320 --> 00:14:46,079
that's

00:14:42,639 --> 00:14:48,560
that's happening in our world um

00:14:46,079 --> 00:14:49,360
security so you can set up security

00:14:48,560 --> 00:14:51,920
policies

00:14:49,360 --> 00:14:53,680
uh when you're when you're looking at uh

00:14:51,920 --> 00:14:56,480
security policies of

00:14:53,680 --> 00:14:57,519
uh of repos this really is the policy of

00:14:56,480 --> 00:14:59,040
the project so

00:14:57,519 --> 00:15:00,880
a lot of the things that you'll see

00:14:59,040 --> 00:15:01,440
within github aren't necessarily the

00:15:00,880 --> 00:15:03,920
same

00:15:01,440 --> 00:15:04,800
is kind of the use of github enterprise

00:15:03,920 --> 00:15:07,519
for example

00:15:04,800 --> 00:15:08,000
where uh almost all of the the open

00:15:07,519 --> 00:15:11,440
source

00:15:08,000 --> 00:15:12,880
components are project-based in github

00:15:11,440 --> 00:15:14,560
where you start thinking about well what

00:15:12,880 --> 00:15:16,160
is the security policy of this thing

00:15:14,560 --> 00:15:18,000
that i'm delivering to

00:15:16,160 --> 00:15:19,440
customers what security advisories am i

00:15:18,000 --> 00:15:22,720
publishing for my

00:15:19,440 --> 00:15:25,600
users of this of this component

00:15:22,720 --> 00:15:26,399
all right so um we've got our we've got

00:15:25,600 --> 00:15:28,160
our repo

00:15:26,399 --> 00:15:29,680
we're going to clone the project to our

00:15:28,160 --> 00:15:32,240
workstation uh

00:15:29,680 --> 00:15:33,279
now so let's come back over here and

00:15:32,240 --> 00:15:35,519
right away when we

00:15:33,279 --> 00:15:37,440
when we did our dependable and our uh

00:15:35,519 --> 00:15:40,320
dependency graph

00:15:37,440 --> 00:15:41,120
the github found a couple of security

00:15:40,320 --> 00:15:43,759
vulnerabilities

00:15:41,120 --> 00:15:44,160
in our dependencies right uh we can

00:15:43,759 --> 00:15:46,399
actually

00:15:44,160 --> 00:15:47,519
come back and see what they are it's in

00:15:46,399 --> 00:15:49,519
log for j

00:15:47,519 --> 00:15:50,880
uh we'll we'll take a break from this

00:15:49,519 --> 00:15:52,320
for a second and but we'll we'll come

00:15:50,880 --> 00:15:53,600
back to it and see what that

00:15:52,320 --> 00:15:55,920
what that really means and what are they

00:15:53,600 --> 00:15:59,040
actually seeing there so we can get a

00:15:55,920 --> 00:16:00,560
get a good sense of um is that adequate

00:15:59,040 --> 00:16:03,920
or not right

00:16:00,560 --> 00:16:04,959
so let's go back to my code here and uh

00:16:03,920 --> 00:16:06,320
arena if you

00:16:04,959 --> 00:16:08,079
if i'm not paying attention and you're

00:16:06,320 --> 00:16:08,720
asking questions feel free to text me

00:16:08,079 --> 00:16:12,160
and

00:16:08,720 --> 00:16:13,279
my phone can ring so uh next thing is

00:16:12,160 --> 00:16:14,160
we're going to clone it

00:16:13,279 --> 00:16:16,079
all right we're going to bring it down

00:16:14,160 --> 00:16:16,720
to our our workstation we're going to

00:16:16,079 --> 00:16:20,240
build it with

00:16:16,720 --> 00:16:22,320
um with docker desktop

00:16:20,240 --> 00:16:23,279
if you haven't already uh take a look at

00:16:22,320 --> 00:16:26,320
the github uh

00:16:23,279 --> 00:16:28,800
cli uh it was easy to install

00:16:26,320 --> 00:16:29,519
it's easy to get the um get everything

00:16:28,800 --> 00:16:31,920
done i

00:16:29,519 --> 00:16:32,639
have to remember to not type get clone

00:16:31,920 --> 00:16:36,079
and then

00:16:32,639 --> 00:16:39,600
uh paste this here um but let's uh

00:16:36,079 --> 00:16:43,600
let's jump right into into it

00:16:39,600 --> 00:16:44,800
so i end up creating a 2020 ato

00:16:43,600 --> 00:16:47,920
directory

00:16:44,800 --> 00:16:51,360
and you can see i've already cloned or

00:16:47,920 --> 00:16:55,440
cloned forked and cloned this before

00:16:51,360 --> 00:17:00,240
but i'm going to um

00:16:55,440 --> 00:17:00,240
we'll see we'll actually make there a

00:17:00,560 --> 00:17:06,959
real one so let's pee in there

00:17:04,400 --> 00:17:06,959
now we'll

00:17:08,000 --> 00:17:11,600
now we'll come back and

00:17:12,559 --> 00:17:16,640
i don't know about you but anytime i can

00:17:14,240 --> 00:17:19,839
copy and paste i do because

00:17:16,640 --> 00:17:21,439
i fat finger things so

00:17:19,839 --> 00:17:23,120
pretty awesome once you authenticate and

00:17:21,439 --> 00:17:26,480
put all your your data in

00:17:23,120 --> 00:17:30,640
it really is just gh repo clone blah

00:17:26,480 --> 00:17:32,400
now uh i end up with uh a struts 2 rce

00:17:30,640 --> 00:17:34,080
so i just created the real one because

00:17:32,400 --> 00:17:36,799
again i had two

00:17:34,080 --> 00:17:37,120
um two different repos at that point

00:17:36,799 --> 00:17:40,400
right

00:17:37,120 --> 00:17:43,440
two different forked ones and um

00:17:40,400 --> 00:17:45,280
uh there there we go so let me make this

00:17:43,440 --> 00:17:47,520
a little bit bigger

00:17:45,280 --> 00:17:49,039
i'd be remiss if i uh didn't mention

00:17:47,520 --> 00:17:51,840
fish here in starship

00:17:49,039 --> 00:17:52,240
uh if you're looking for new shells on

00:17:51,840 --> 00:17:54,559
the

00:17:52,240 --> 00:17:56,240
on the mac and others um it knows i'm

00:17:54,559 --> 00:17:59,440
gonna get repository and

00:17:56,240 --> 00:18:03,120
uh knows i've got python and um it knows

00:17:59,440 --> 00:18:05,760
that uh um what branch i'm on

00:18:03,120 --> 00:18:06,880
arena is uh laughing because i've made

00:18:05,760 --> 00:18:09,919
everybody on our team

00:18:06,880 --> 00:18:12,240
try to switch at least so uh

00:18:09,919 --> 00:18:14,000
let's take a look pretty simple um

00:18:12,240 --> 00:18:17,200
pretty simple directory i've got a

00:18:14,000 --> 00:18:17,919
source there's a palm.xml file so it is

00:18:17,200 --> 00:18:21,840
a

00:18:17,919 --> 00:18:23,840
uh a java application and then there's a

00:18:21,840 --> 00:18:25,360
an exploit.python so when we actually

00:18:23,840 --> 00:18:25,840
build it we're going to run this python

00:18:25,360 --> 00:18:27,360
file

00:18:25,840 --> 00:18:29,039
and it's going to do the heavy lifting

00:18:27,360 --> 00:18:32,320
of um of

00:18:29,039 --> 00:18:34,799
the the exploit itself and then

00:18:32,320 --> 00:18:35,919
um yeah we'll take a look at what it

00:18:34,799 --> 00:18:39,840
does so

00:18:35,919 --> 00:18:41,919
let me um go to our next

00:18:39,840 --> 00:18:43,760
slide here so what we're going to do is

00:18:41,919 --> 00:18:47,039
we're going to clean and package this is

00:18:43,760 --> 00:18:49,200
maven w it's a buggled

00:18:47,039 --> 00:18:50,799
maven script what the clean's going to

00:18:49,200 --> 00:18:52,480
do is clean the the build directory and

00:18:50,799 --> 00:18:55,679
it's going to package it up

00:18:52,480 --> 00:18:58,080
now when it packages it up i actually

00:18:55,679 --> 00:19:01,520
i'm gonna make one other change here

00:18:58,080 --> 00:19:04,799
um this is a maven project

00:19:01,520 --> 00:19:07,840
right uh sometimes you used to

00:19:04,799 --> 00:19:09,919
be nicknamed the uh the maven company or

00:19:07,840 --> 00:19:12,240
our co-founder was one of he contributed

00:19:09,919 --> 00:19:15,840
early in the the maven project again

00:19:12,240 --> 00:19:16,960
uh uh stewards of maven central so a lot

00:19:15,840 --> 00:19:19,280
of what i end up doing

00:19:16,960 --> 00:19:20,960
is uh is maven in the background so but

00:19:19,280 --> 00:19:22,960
this is a maven project

00:19:20,960 --> 00:19:25,039
and so for more than 10 years we've been

00:19:22,960 --> 00:19:27,200
trying to accelerate

00:19:25,039 --> 00:19:28,960
project delivery and value to the

00:19:27,200 --> 00:19:31,600
customers through

00:19:28,960 --> 00:19:32,320
through project management here but what

00:19:31,600 --> 00:19:34,640
i'm going to do

00:19:32,320 --> 00:19:38,880
is i've got to come over here and you

00:19:34,640 --> 00:19:42,000
may not have to do this

00:19:38,880 --> 00:19:44,160
some of um

00:19:42,000 --> 00:19:46,080
google cd into the right place and well

00:19:44,160 --> 00:19:49,280
the m2 directory in maven

00:19:46,080 --> 00:19:52,000
is where your settings file

00:19:49,280 --> 00:19:54,160
uh are you can put settings in palm

00:19:52,000 --> 00:19:54,799
files and other places but this is also

00:19:54,160 --> 00:19:57,280
where the

00:19:54,799 --> 00:19:59,440
the components are cached and right now

00:19:57,280 --> 00:20:01,919
my settings file points to

00:19:59,440 --> 00:20:03,520
a repository manager on my machine that

00:20:01,919 --> 00:20:04,640
has one of our other products installed

00:20:03,520 --> 00:20:07,440
called a firewall

00:20:04,640 --> 00:20:09,440
which automatically blocks uh bad

00:20:07,440 --> 00:20:11,600
components based on policy

00:20:09,440 --> 00:20:13,280
and i have that set so that would not be

00:20:11,600 --> 00:20:14,000
a good thing to run to try to build this

00:20:13,280 --> 00:20:18,240
because

00:20:14,000 --> 00:20:20,240
we know this is a struts two there's a

00:20:18,240 --> 00:20:21,840
known vulnerability with it um my

00:20:20,240 --> 00:20:24,880
repository manager wouldn't even

00:20:21,840 --> 00:20:27,840
actually allow me to build that so i'm

00:20:24,880 --> 00:20:29,679
just going to remove the settings.xml

00:20:27,840 --> 00:20:31,919
and the settings.xml if you don't have

00:20:29,679 --> 00:20:34,559
one in the maven directory

00:20:31,919 --> 00:20:35,760
it just defaults to maven so if you ever

00:20:34,559 --> 00:20:38,159
get your maven

00:20:35,760 --> 00:20:40,000
messed up and you've been pointing to to

00:20:38,159 --> 00:20:40,960
custom places and and not really sure

00:20:40,000 --> 00:20:43,280
what's going on

00:20:40,960 --> 00:20:44,080
you can just delete the the settings.xml

00:20:43,280 --> 00:20:47,440
and have it

00:20:44,080 --> 00:20:49,840
uh have it go to the um the defaults

00:20:47,440 --> 00:20:52,320
all right so let me come back over here

00:20:49,840 --> 00:20:58,320
um and then i'm just going to do

00:20:52,320 --> 00:20:58,320
an mv mbmw clean package

00:21:00,080 --> 00:21:03,440
so it downloads all the maven components

00:21:02,080 --> 00:21:04,880
it needs it's going to download

00:21:03,440 --> 00:21:06,559
download all the components and you can

00:21:04,880 --> 00:21:09,039
see it's downloaded from central if i

00:21:06,559 --> 00:21:10,880
hadn't moved remove that settings.xml

00:21:09,039 --> 00:21:12,720
it would have tried to download those

00:21:10,880 --> 00:21:16,640
from um

00:21:12,720 --> 00:21:20,320
from somewhere else trying to download

00:21:16,640 --> 00:21:20,320
them locally from my repository manager

00:21:22,559 --> 00:21:26,240
all right so we have a successful

00:21:24,240 --> 00:21:28,159
successful build uh if i look at my

00:21:26,240 --> 00:21:31,840
directory now i have a target directory

00:21:28,159 --> 00:21:31,840
with a cd into this target directory

00:21:32,240 --> 00:21:38,960
and when i do that and we do it another

00:21:35,919 --> 00:21:42,480
ls right it's built the war

00:21:38,960 --> 00:21:45,200
it's built a sources file so we haven't

00:21:42,480 --> 00:21:46,000
changed anything the the the project has

00:21:45,200 --> 00:21:48,000
built this

00:21:46,000 --> 00:21:49,520
uh just on his own as it was released

00:21:48,000 --> 00:21:51,840
and we're gonna

00:21:49,520 --> 00:21:53,919
again build the docker and then then

00:21:51,840 --> 00:21:57,440
then exploit it

00:21:53,919 --> 00:21:59,360
so now we have that up and running and

00:21:57,440 --> 00:22:00,720
we have our docker file here if we want

00:21:59,360 --> 00:22:03,600
we can take a look at

00:22:00,720 --> 00:22:05,840
what it uh what it does right it's from

00:22:03,600 --> 00:22:09,039
tomcat7

00:22:05,840 --> 00:22:13,520
it really is just gonna grab the

00:22:09,039 --> 00:22:16,400
um the web app and put it into

00:22:13,520 --> 00:22:17,840
um the web apps uh directory so here you

00:22:16,400 --> 00:22:20,960
can see it's grabbing the target

00:22:17,840 --> 00:22:24,960
and it's gonna expose 8080 pretty

00:22:20,960 --> 00:22:28,159
straightforward now i already have a

00:22:24,960 --> 00:22:29,280
image called hackme so we're going to

00:22:28,159 --> 00:22:33,679
actually

00:22:29,280 --> 00:22:37,840
hear the steps here just everybody sees

00:22:33,679 --> 00:22:40,240
there we go so

00:22:37,840 --> 00:22:42,320
a couple of things let's look at what i

00:22:40,240 --> 00:22:45,840
actually have running already

00:22:42,320 --> 00:22:48,880
uh i already have um

00:22:45,840 --> 00:22:52,000
this running so see

00:22:48,880 --> 00:22:53,840
it's always complicated by trial runs

00:22:52,000 --> 00:22:55,679
arena it's good that if we don't ever do

00:22:53,840 --> 00:22:56,720
a trial run then i'll have to back this

00:22:55,679 --> 00:22:59,919
stuff out

00:22:56,720 --> 00:23:05,280
um and just

00:22:59,919 --> 00:23:05,280
docker stop me right

00:23:06,000 --> 00:23:15,360
no you know what i can do

00:23:10,480 --> 00:23:15,360
we will uh do this the fun way

00:23:15,840 --> 00:23:20,159
if you haven't used um visual studio

00:23:18,960 --> 00:23:21,600
code and if you're on this call you

00:23:20,159 --> 00:23:24,159
probably have used it

00:23:21,600 --> 00:23:26,480
right so um we can come over and

00:23:24,159 --> 00:23:28,159
actually use some of the plugins

00:23:26,480 --> 00:23:30,559
and extensions and envious code one of

00:23:28,159 --> 00:23:32,960
those is a docker one so in one view you

00:23:30,559 --> 00:23:37,840
can see the images the containers

00:23:32,960 --> 00:23:37,840
i can start to see the

00:23:38,080 --> 00:23:41,120
the volumes that i'm using the networks

00:23:40,080 --> 00:23:44,240
that i'm uh

00:23:41,120 --> 00:23:45,760
that i've created right so

00:23:44,240 --> 00:23:47,840
as we come through now the reason i'm

00:23:45,760 --> 00:23:50,320
stopping this is um

00:23:47,840 --> 00:23:51,120
i wanted to port right uh i'd already

00:23:50,320 --> 00:23:53,440
started it

00:23:51,120 --> 00:23:55,279
uh one of the things when we when we go

00:23:53,440 --> 00:23:58,320
through and build the

00:23:55,279 --> 00:24:00,159
uh the the or run the image

00:23:58,320 --> 00:24:01,520
i'm gonna ask it to run on a port and i

00:24:00,159 --> 00:24:03,520
kind of wanna that port so i don't have

00:24:01,520 --> 00:24:06,640
to change everything

00:24:03,520 --> 00:24:09,679
so let's go ahead

00:24:06,640 --> 00:24:11,919
and we'll build

00:24:09,679 --> 00:24:11,919
this

00:24:13,440 --> 00:24:18,640
and i'm just going to change this to

00:24:17,039 --> 00:24:21,279
ato and somebody remind me i've done

00:24:18,640 --> 00:24:23,440
that so i've already downloaded it so

00:24:21,279 --> 00:24:25,520
it's reading some of the cache component

00:24:23,440 --> 00:24:27,679
cache layers of my

00:24:25,520 --> 00:24:33,840
my image and now i'm just going to do a

00:24:27,679 --> 00:24:33,840
docker run

00:24:34,559 --> 00:24:40,559
there we go and

00:24:37,919 --> 00:24:41,440
i remember where i just named it ato

00:24:40,559 --> 00:24:44,960
there we go

00:24:41,440 --> 00:24:49,600
so we get back a uh

00:24:44,960 --> 00:24:49,600
an id if i now go to uh

00:24:50,159 --> 00:24:57,120
see this refresh there's my hack me ato

00:24:53,679 --> 00:24:59,520
um i know about you guys but uh

00:24:57,120 --> 00:25:01,360
love docker changes some uh things

00:24:59,520 --> 00:25:03,200
occasionally

00:25:01,360 --> 00:25:06,320
you could also view that view this

00:25:03,200 --> 00:25:06,320
through the dashboard here

00:25:09,840 --> 00:25:17,120
and see that it's actually running

00:25:14,080 --> 00:25:18,480
and while i do this i'm going to blow

00:25:17,120 --> 00:25:20,880
this away i probably shouldn't do this

00:25:18,480 --> 00:25:20,880
arena

00:25:20,960 --> 00:25:26,000
but there's my hackney and here in the

00:25:24,240 --> 00:25:27,600
background

00:25:26,000 --> 00:25:29,200
what's really happened is we started up

00:25:27,600 --> 00:25:31,120
a tomcat instance

00:25:29,200 --> 00:25:32,960
uh loaded the application it's listening

00:25:31,120 --> 00:25:35,440
on port 8080 internally

00:25:32,960 --> 00:25:36,320
and uh now we're gonna test it see if we

00:25:35,440 --> 00:25:39,520
can actually

00:25:36,320 --> 00:25:43,039
uh see anything here so we should just

00:25:39,520 --> 00:25:46,320
be able to go to

00:25:43,039 --> 00:25:48,159
localhost 9080 so

00:25:46,320 --> 00:25:50,000
remember in docker run the first port

00:25:48,159 --> 00:25:51,120
that i specified is the port that i'm

00:25:50,000 --> 00:25:52,559
going to expose

00:25:51,120 --> 00:25:54,720
that's what my local machine is going to

00:25:52,559 --> 00:25:56,080
see the second board is the internal

00:25:54,720 --> 00:25:58,640
what am i going to map that internally

00:25:56,080 --> 00:25:59,520
to so now i should have my orders that's

00:25:58,640 --> 00:26:01,760
fine

00:25:59,520 --> 00:26:02,960
i really just wanted to see that was up

00:26:01,760 --> 00:26:05,679
and running

00:26:02,960 --> 00:26:06,559
now so i've got a docker container

00:26:05,679 --> 00:26:07,919
that's up and running it's got my

00:26:06,559 --> 00:26:11,200
application loaded i've built

00:26:07,919 --> 00:26:14,000
i've built my application and

00:26:11,200 --> 00:26:14,000
what we'll do

00:26:14,400 --> 00:26:18,400
what we'll do next is we'll actually run

00:26:16,880 --> 00:26:20,400
the exploit so we'll take a look at what

00:26:18,400 --> 00:26:22,880
the exploit looks like

00:26:20,400 --> 00:26:24,000
and then see what the results of that

00:26:22,880 --> 00:26:27,679
results of that exploit

00:26:24,000 --> 00:26:32,159
are so as we come through

00:26:27,679 --> 00:26:39,840
let's take a look at uh let's get my

00:26:32,159 --> 00:26:39,840
cell here

00:26:41,440 --> 00:26:46,880
all right so um simple uh python script

00:26:45,520 --> 00:26:48,960
not simple but this is it's gonna

00:26:46,880 --> 00:26:49,520
generate a payload and it's gonna pass

00:26:48,960 --> 00:26:53,120
that pa

00:26:49,520 --> 00:26:56,480
pass that payload uh i think this

00:26:53,120 --> 00:26:59,279
is in the context of the

00:26:56,480 --> 00:27:00,320
the post that it's going to do and then

00:26:59,279 --> 00:27:02,159
uh it's going to

00:27:00,320 --> 00:27:03,919
execute the the command with that

00:27:02,159 --> 00:27:06,400
payload and the

00:27:03,919 --> 00:27:07,679
the parameters that pass the payload are

00:27:06,400 --> 00:27:10,559
actually going to be executed

00:27:07,679 --> 00:27:11,679
on the the host system right the

00:27:10,559 --> 00:27:13,279
exploited system

00:27:11,679 --> 00:27:14,960
so let's take a look at that actually

00:27:13,279 --> 00:27:18,480
happening

00:27:14,960 --> 00:27:22,159
and so

00:27:18,480 --> 00:27:24,399
i'm going to say python exploit

00:27:22,159 --> 00:27:24,399
the

00:27:26,640 --> 00:27:33,200
the url that's exploitable

00:27:29,840 --> 00:27:35,760
and i'm passing the command pwd right so

00:27:33,200 --> 00:27:38,559
what returned was the present working

00:27:35,760 --> 00:27:41,360
directory of the process that is running

00:27:38,559 --> 00:27:42,799
the exploit in the background right so i

00:27:41,360 --> 00:27:46,720
can pretty much do

00:27:42,799 --> 00:27:49,520
anything also because this

00:27:46,720 --> 00:27:51,440
container's running is root right so if

00:27:49,520 --> 00:27:54,880
i wanted to come in now and do

00:27:51,440 --> 00:27:57,279
ls dash l forward slash

00:27:54,880 --> 00:27:58,000
if i wanted to remove minus rf star

00:27:57,279 --> 00:28:00,799
right

00:27:58,000 --> 00:28:01,600
i put that in there and forward slash

00:28:00,799 --> 00:28:03,200
and

00:28:01,600 --> 00:28:05,039
we won't do that because we still want

00:28:03,200 --> 00:28:08,000
this so

00:28:05,039 --> 00:28:09,279
we've got an exploitable uh instance uh

00:28:08,000 --> 00:28:12,240
it's a well-known

00:28:09,279 --> 00:28:13,200
um uh it's a well-known vulnerability

00:28:12,240 --> 00:28:15,919
but this is

00:28:13,200 --> 00:28:18,159
this is really how easy it is to to

00:28:15,919 --> 00:28:20,480
start to understand these exploits and

00:28:18,159 --> 00:28:22,240
and have a look and be able to test uh

00:28:20,480 --> 00:28:24,880
in these environments if you've done

00:28:22,240 --> 00:28:26,080
uh any type of of testing around open

00:28:24,880 --> 00:28:27,520
source vulnerabilities you know that

00:28:26,080 --> 00:28:30,640
there are a lot of resources that

00:28:27,520 --> 00:28:31,039
out there that allow you to understand

00:28:30,640 --> 00:28:32,799
them

00:28:31,039 --> 00:28:35,200
uh better and and actually run them and

00:28:32,799 --> 00:28:39,039
then in reality search for them as well

00:28:35,200 --> 00:28:40,640
right so so good um so now we're gonna

00:28:39,039 --> 00:28:42,080
we're gonna take a look at well how do

00:28:40,640 --> 00:28:44,000
how would i have known that

00:28:42,080 --> 00:28:45,279
um that i was vulnerable how could how

00:28:44,000 --> 00:28:46,799
could i have tested this

00:28:45,279 --> 00:28:48,320
we're going to take a look over the next

00:28:46,799 --> 00:28:48,559
hour and a half and and look at some of

00:28:48,320 --> 00:28:51,279
the

00:28:48,559 --> 00:28:52,399
things like uh shifting left how can i

00:28:51,279 --> 00:28:54,240
as a developer

00:28:52,399 --> 00:28:56,320
understand earlier am i using good

00:28:54,240 --> 00:28:57,919
components in the process

00:28:56,320 --> 00:28:59,360
all right so we'll use the latest tools

00:28:57,919 --> 00:29:02,480
from a variety of sources

00:28:59,360 --> 00:29:03,200
um and we'll see that the way that we're

00:29:02,480 --> 00:29:05,760
using them

00:29:03,200 --> 00:29:07,840
is a little bit late uh in the pipeline

00:29:05,760 --> 00:29:09,360
uh if we were just waiting to

00:29:07,840 --> 00:29:11,679
we're actually gonna scan the container

00:29:09,360 --> 00:29:12,880
that gets built a lot of times security

00:29:11,679 --> 00:29:14,880
teams

00:29:12,880 --> 00:29:16,159
don't have access to the source code or

00:29:14,880 --> 00:29:16,720
they don't want to be in the build

00:29:16,159 --> 00:29:19,039
process

00:29:16,720 --> 00:29:20,000
but they have this thing this this thing

00:29:19,039 --> 00:29:21,600
in application

00:29:20,000 --> 00:29:23,840
and we'll just call it a you know a

00:29:21,600 --> 00:29:25,679
docker container that's going to run

00:29:23,840 --> 00:29:26,880
and then they do the scans against those

00:29:25,679 --> 00:29:30,159
and use some of the tools

00:29:26,880 --> 00:29:32,720
that are built into the the processes

00:29:30,159 --> 00:29:33,200
that allow them to have that visibility

00:29:32,720 --> 00:29:34,960
uh

00:29:33,200 --> 00:29:36,799
spoiler alert we know that the

00:29:34,960 --> 00:29:38,159
application's vulnerable because we just

00:29:36,799 --> 00:29:41,200
saw that it was

00:29:38,159 --> 00:29:44,159
uh vulnerable right and

00:29:41,200 --> 00:29:45,360
um and you know it's great to say that

00:29:44,159 --> 00:29:47,279
yep we're vulnerable

00:29:45,360 --> 00:29:49,440
it's horrible it's you know but this is

00:29:47,279 --> 00:29:50,880
only a workshop it doesn't really apply

00:29:49,440 --> 00:29:53,679
well i mentioned those resources that

00:29:50,880 --> 00:29:56,080
are out there that allow you to find

00:29:53,679 --> 00:29:57,120
resources like this right google lets

00:29:56,080 --> 00:29:59,840
you find

00:29:57,120 --> 00:30:00,880
in url or type action equals dot do

00:29:59,840 --> 00:30:03,919
which is a common

00:30:00,880 --> 00:30:04,880
uh file extension for for struts great

00:30:03,919 --> 00:30:06,720
framework

00:30:04,880 --> 00:30:08,080
there are good versions of struts to be

00:30:06,720 --> 00:30:10,480
used and we'll see that

00:30:08,080 --> 00:30:11,279
a little bit later on but this isn't

00:30:10,480 --> 00:30:13,440
just a workshop

00:30:11,279 --> 00:30:14,640
right uh with the number of open source

00:30:13,440 --> 00:30:16,720
components that we're using

00:30:14,640 --> 00:30:18,960
with the new vulnerabilities that exist

00:30:16,720 --> 00:30:21,360
with the new types of attacks that are

00:30:18,960 --> 00:30:22,000
uh that we're seeing in the field where

00:30:21,360 --> 00:30:24,159
uh

00:30:22,000 --> 00:30:25,279
it's it's gone a little bit beyond typo

00:30:24,159 --> 00:30:27,039
squatting right

00:30:25,279 --> 00:30:28,720
where we're starting to use the power of

00:30:27,039 --> 00:30:30,080
open source and the bad guys using the

00:30:28,720 --> 00:30:32,159
power of open source

00:30:30,080 --> 00:30:34,080
uh to inject vulnerabilities right we're

00:30:32,159 --> 00:30:37,120
not waiting for the typical

00:30:34,080 --> 00:30:39,840
uh notification disclosure process

00:30:37,120 --> 00:30:40,720
of a known vulnerability if i can get a

00:30:39,840 --> 00:30:43,279
vulnerability

00:30:40,720 --> 00:30:44,080
inserted into a javascript package that

00:30:43,279 --> 00:30:47,679
supports

00:30:44,080 --> 00:30:50,480
50 000 other packages you know a slight

00:30:47,679 --> 00:30:51,279
only a slight exact exaggeration on that

00:30:50,480 --> 00:30:54,880
i think the the

00:30:51,279 --> 00:30:57,120
the numbers are um uh 50

00:30:54,880 --> 00:30:59,279
of the most influential people uh have

00:30:57,120 --> 00:31:01,519
an impact on 85 percent of the

00:30:59,279 --> 00:31:03,120
packages um just in terms of the the

00:31:01,519 --> 00:31:05,120
dependencies

00:31:03,120 --> 00:31:06,640
if you've installed react you know the

00:31:05,120 --> 00:31:08,000
react installs over a thousand

00:31:06,640 --> 00:31:10,159
dependencies

00:31:08,000 --> 00:31:11,519
right so we need to have this under

00:31:10,159 --> 00:31:12,960
control we have need to have this

00:31:11,519 --> 00:31:15,519
visibility

00:31:12,960 --> 00:31:16,960
so what are some of the tools that we

00:31:15,519 --> 00:31:19,919
can use to evaluate

00:31:16,960 --> 00:31:20,399
evaluate risk well whenever github says

00:31:19,919 --> 00:31:23,200
something

00:31:20,399 --> 00:31:24,000
uh people listen um do they listen 100

00:31:23,200 --> 00:31:27,200
of the time

00:31:24,000 --> 00:31:28,880
uh and completely uh no but

00:31:27,200 --> 00:31:30,320
github does a really great job microsoft

00:31:28,880 --> 00:31:31,679
does a really great job on

00:31:30,320 --> 00:31:33,440
on really trying to understand what the

00:31:31,679 --> 00:31:36,480
developers want

00:31:33,440 --> 00:31:39,679
and um and understand you know what

00:31:36,480 --> 00:31:40,399
what they can provide at um at a free

00:31:39,679 --> 00:31:43,200
level to the

00:31:40,399 --> 00:31:44,960
the their primary users which are the

00:31:43,200 --> 00:31:47,120
the projects themselves

00:31:44,960 --> 00:31:48,320
as well as the enterprise right so what

00:31:47,120 --> 00:31:50,880
does github say well

00:31:48,320 --> 00:31:52,720
we looked at it earlier let's go back to

00:31:50,880 --> 00:31:55,360
our repo

00:31:52,720 --> 00:31:56,399
so we built this application uh from our

00:31:55,360 --> 00:31:59,919
repo

00:31:56,399 --> 00:32:01,760
our our source code repo and it did tell

00:31:59,919 --> 00:32:03,440
us that we have two

00:32:01,760 --> 00:32:04,880
security vulnerabilities in our

00:32:03,440 --> 00:32:07,279
dependencies

00:32:04,880 --> 00:32:08,960
so we wanted to come over and look at

00:32:07,279 --> 00:32:11,840
what those are

00:32:08,960 --> 00:32:12,640
right well it they mentioned that

00:32:11,840 --> 00:32:14,720
there's some

00:32:12,640 --> 00:32:16,480
security vulnerabilities and log for j

00:32:14,720 --> 00:32:19,760
core and they'll give us this

00:32:16,480 --> 00:32:22,080
data this is uh really just pulled

00:32:19,760 --> 00:32:23,760
straight from the the nvd

00:32:22,080 --> 00:32:25,679
they also give us a recommendation right

00:32:23,760 --> 00:32:30,320
they give us a recommendation that

00:32:25,679 --> 00:32:32,880
they can use that at 2.13 0.2 or later

00:32:30,320 --> 00:32:34,799
but this has nothing to do with the the

00:32:32,880 --> 00:32:37,279
vulnerability that just allowed us to

00:32:34,799 --> 00:32:40,080
take control of that system right

00:32:37,279 --> 00:32:41,440
so even even visibility at the manifest

00:32:40,080 --> 00:32:44,960
level right this is

00:32:41,440 --> 00:32:47,840
this is what we call manifest scanning

00:32:44,960 --> 00:32:49,679
is because github doesn't really know

00:32:47,840 --> 00:32:51,600
what ended up on the other side it knows

00:32:49,679 --> 00:32:53,120
that there's a docker file there

00:32:51,600 --> 00:32:55,039
right it knows that there's a jenkins

00:32:53,120 --> 00:32:57,279
file there it knows that

00:32:55,039 --> 00:32:59,360
there's a palm file there and that palm

00:32:57,279 --> 00:33:01,679
file is the manifest

00:32:59,360 --> 00:33:03,919
so if i come back to my insights and i

00:33:01,679 --> 00:33:05,519
look at this dependency graph

00:33:03,919 --> 00:33:08,559
what's going to happen is they're going

00:33:05,519 --> 00:33:10,159
to look at that palm file and tell me

00:33:08,559 --> 00:33:11,600
what components that i'm using and are

00:33:10,159 --> 00:33:14,000
there known vulnerabilities

00:33:11,600 --> 00:33:14,960
great place to start we have a product

00:33:14,000 --> 00:33:17,039
called dept shield

00:33:14,960 --> 00:33:18,240
uh that's free for users that does the

00:33:17,039 --> 00:33:21,039
same thing

00:33:18,240 --> 00:33:21,840
um but the reality is this this is

00:33:21,039 --> 00:33:24,559
limiting

00:33:21,840 --> 00:33:25,760
a little bit because it doesn't know uh

00:33:24,559 --> 00:33:27,519
things like

00:33:25,760 --> 00:33:29,039
uh which version of struts that i'm

00:33:27,519 --> 00:33:30,960
using right

00:33:29,039 --> 00:33:32,399
um it should know which version of

00:33:30,960 --> 00:33:34,480
struts that i'm using

00:33:32,399 --> 00:33:36,240
um but it can't just because the way

00:33:34,480 --> 00:33:39,120
that the palm file is working

00:33:36,240 --> 00:33:40,559
um it's it's getting its version from uh

00:33:39,120 --> 00:33:41,840
from somewhere else and that's why you

00:33:40,559 --> 00:33:43,279
see some of these are blank and don't

00:33:41,840 --> 00:33:44,559
have a version number so it really can't

00:33:43,279 --> 00:33:46,880
do an evaluation

00:33:44,559 --> 00:33:47,760
but again it's a great place to start um

00:33:46,880 --> 00:33:49,679
i encourage you

00:33:47,760 --> 00:33:51,200
on all of your projects to enable the

00:33:49,679 --> 00:33:53,919
dependency graph enable the

00:33:51,200 --> 00:33:54,799
the security settings so you can at

00:33:53,919 --> 00:33:57,840
least have

00:33:54,799 --> 00:34:00,880
some visibility and we'll actually see

00:33:57,840 --> 00:34:04,640
uh a little bit later on if we have time

00:34:00,880 --> 00:34:07,919
that what's in your manifest file

00:34:04,640 --> 00:34:11,599
isn't always what gets delivered and one

00:34:07,919 --> 00:34:11,599
spoiler alert it's this itext

00:34:12,079 --> 00:34:16,639
package here in our pom file we ask for

00:34:14,960 --> 00:34:18,639
4.2.2

00:34:16,639 --> 00:34:20,079
github says that's what we have almost

00:34:18,639 --> 00:34:21,760
anybody that reads a manifest

00:34:20,079 --> 00:34:23,679
file will say that what we have that's

00:34:21,760 --> 00:34:25,040
what we have what happens on the back

00:34:23,679 --> 00:34:26,480
end when we actually went and did that

00:34:25,040 --> 00:34:28,399
clean package earlier

00:34:26,480 --> 00:34:31,040
it downloaded the newest version that

00:34:28,399 --> 00:34:32,879
has a new name and a new version number

00:34:31,040 --> 00:34:35,200
so we don't from this perspective really

00:34:32,879 --> 00:34:37,359
know what actually got into production

00:34:35,200 --> 00:34:38,800
uh we don't know what version of really

00:34:37,359 --> 00:34:39,839
anything that that got in production

00:34:38,800 --> 00:34:42,879
from this point of view

00:34:39,839 --> 00:34:43,839
we're not even sure if if we built it at

00:34:42,879 --> 00:34:46,320
this point right

00:34:43,839 --> 00:34:46,879
does it really exist if it's not built

00:34:46,320 --> 00:34:48,879
um

00:34:46,879 --> 00:34:50,879
but this this is this gives you some

00:34:48,879 --> 00:34:53,760
visibility into

00:34:50,879 --> 00:34:54,079
um into that component manifest scanning

00:34:53,760 --> 00:34:55,520
so

00:34:54,079 --> 00:34:57,440
a lot of the tools out of the box we'll

00:34:55,520 --> 00:34:58,880
look at manifest scanning um

00:34:57,440 --> 00:35:01,040
again they're a great it's a great way

00:34:58,880 --> 00:35:02,640
to start the os dependency check is one

00:35:01,040 --> 00:35:05,359
of them

00:35:02,640 --> 00:35:06,640
that data goes against our free data

00:35:05,359 --> 00:35:07,440
we'll take a look at that a little bit

00:35:06,640 --> 00:35:09,520
as well

00:35:07,440 --> 00:35:10,480
so that that first way to to understand

00:35:09,520 --> 00:35:12,640
am i

00:35:10,480 --> 00:35:14,400
vulnerable again is the the github at

00:35:12,640 --> 00:35:17,359
the repository level

00:35:14,400 --> 00:35:19,200
and it's missing a couple of the well

00:35:17,359 --> 00:35:20,560
it's missing some big things right

00:35:19,200 --> 00:35:23,280
on the vulnerability side just because

00:35:20,560 --> 00:35:23,280
we don't know the version

00:35:23,440 --> 00:35:29,200
so let's take a look at um

00:35:27,200 --> 00:35:31,040
what what has been more of a trend

00:35:29,200 --> 00:35:33,119
lately is well

00:35:31,040 --> 00:35:35,440
if i know that this is going to become

00:35:33,119 --> 00:35:37,119
something later why don't i just

00:35:35,440 --> 00:35:40,480
look at and scan the thing that it

00:35:37,119 --> 00:35:43,599
became later right the docker container

00:35:40,480 --> 00:35:46,800
there's been a lot of talk about

00:35:43,599 --> 00:35:48,400
the ability to to scan the

00:35:46,800 --> 00:35:50,160
container as it goes into production or

00:35:48,400 --> 00:35:53,119
the container into production and

00:35:50,160 --> 00:35:53,760
um you know arena i spend every day all

00:35:53,119 --> 00:35:56,160
day

00:35:53,760 --> 00:35:57,599
really talking to people about you know

00:35:56,160 --> 00:35:59,119
that notion of shifting laugh that

00:35:57,599 --> 00:36:00,240
notion of well if i'm scanning the

00:35:59,119 --> 00:36:01,520
container i'm telling you there's a

00:36:00,240 --> 00:36:02,960
vulnerability in production in the

00:36:01,520 --> 00:36:04,320
container in the production

00:36:02,960 --> 00:36:06,160
guess what there's a vulnerability in

00:36:04,320 --> 00:36:08,480
production right so where can you start

00:36:06,160 --> 00:36:12,000
to look at some of this and and move

00:36:08,480 --> 00:36:13,839
um the the fixing of the problem

00:36:12,000 --> 00:36:15,599
the identification of the problem uh

00:36:13,839 --> 00:36:17,599
further to the left

00:36:15,599 --> 00:36:19,119
so um what we're going to do is we're

00:36:17,599 --> 00:36:21,119
going to take um

00:36:19,119 --> 00:36:22,480
the container we're going to scan it

00:36:21,119 --> 00:36:24,160
we're going to scan with claire

00:36:22,480 --> 00:36:26,480
then we're also going to look at some of

00:36:24,160 --> 00:36:29,119
the other tools that

00:36:26,480 --> 00:36:31,040
that the cloud providers are using to

00:36:29,119 --> 00:36:32,800
scan automatically when

00:36:31,040 --> 00:36:34,720
you potentially put it into something

00:36:32,800 --> 00:36:37,839
like amazon's ecr

00:36:34,720 --> 00:36:42,400
all right so let's take a look at this

00:36:37,839 --> 00:36:44,720
claire i won't do the full install here

00:36:42,400 --> 00:36:45,599
um i am running it and i've made the

00:36:44,720 --> 00:36:47,040
configuration

00:36:45,599 --> 00:36:50,640
uh but you what you're going to do is go

00:36:47,040 --> 00:36:54,320
to github.com quer forward slash quay

00:36:50,640 --> 00:36:56,320
quay forward slash claire and then

00:36:54,320 --> 00:36:57,520
we need to make a directory clear

00:36:56,320 --> 00:36:58,800
underscore config

00:36:57,520 --> 00:37:00,560
then we're going to pull the sample

00:36:58,800 --> 00:37:01,440
config down and put it in our clear

00:37:00,560 --> 00:37:04,240
config

00:37:01,440 --> 00:37:04,720
then we're going to edit the config.yml

00:37:04,240 --> 00:37:06,880
um

00:37:04,720 --> 00:37:08,000
and it's a different config.yaml we want

00:37:06,880 --> 00:37:10,880
that this

00:37:08,000 --> 00:37:11,440
forward slash config well not forward

00:37:10,880 --> 00:37:13,440
slash

00:37:11,440 --> 00:37:15,200
there but uh it'll be forward slash once

00:37:13,440 --> 00:37:19,280
it gets in the container

00:37:15,200 --> 00:37:22,160
um we want to add a password just for

00:37:19,280 --> 00:37:24,640
the database and then we're going to

00:37:22,160 --> 00:37:27,520
create a

00:37:24,640 --> 00:37:29,920
a network and then we're going to run

00:37:27,520 --> 00:37:32,800
the database and then we're going to run

00:37:29,920 --> 00:37:34,480
the clearpiece now the other day thing

00:37:32,800 --> 00:37:37,599
that area and i

00:37:34,480 --> 00:37:38,320
do all day every day is um kind of moan

00:37:37,599 --> 00:37:40,240
about

00:37:38,320 --> 00:37:41,359
right how many people are having to

00:37:40,240 --> 00:37:43,040
actually update

00:37:41,359 --> 00:37:44,720
databases and keep their database up to

00:37:43,040 --> 00:37:45,280
date and run a database separate just

00:37:44,720 --> 00:37:46,960
for

00:37:45,280 --> 00:37:48,720
uh the vulnerability so we'll see some

00:37:46,960 --> 00:37:50,480
limitations here

00:37:48,720 --> 00:37:52,480
on that but once we get everything

00:37:50,480 --> 00:37:54,000
running we'll have a nice way to look at

00:37:52,480 --> 00:37:57,839
the the config of

00:37:54,000 --> 00:38:01,200
of my uh clear incense so i will

00:37:57,839 --> 00:38:04,320
remember which way i'm going here now

00:38:01,200 --> 00:38:07,359
um if i do a docker ps here

00:38:04,320 --> 00:38:08,320
we'll see that i've got my image there

00:38:07,359 --> 00:38:11,520
running

00:38:08,320 --> 00:38:12,960
and i'm going to go up to my claire

00:38:11,520 --> 00:38:14,800
instance

00:38:12,960 --> 00:38:17,280
and i probably shouldn't have killed it

00:38:14,800 --> 00:38:19,440
right so we might as well just

00:38:17,280 --> 00:38:20,400
redo it here so what we're going to do

00:38:19,440 --> 00:38:24,400
is

00:38:20,400 --> 00:38:24,400
we're going to do our docker run

00:38:28,480 --> 00:38:33,839
do our docker run

00:38:32,340 --> 00:38:38,000
[Music]

00:38:33,839 --> 00:38:42,480
there we go so that's the

00:38:38,000 --> 00:38:46,320
that's the server instance

00:38:42,480 --> 00:38:47,200
let me that was the clarinet that's a

00:38:46,320 --> 00:38:50,480
server instance

00:38:47,200 --> 00:38:50,480
i probably need to run the

00:38:56,400 --> 00:39:00,640
run that one first probably the database

00:38:59,599 --> 00:39:03,920
one

00:39:00,640 --> 00:39:07,359
um let's see what it does

00:39:03,920 --> 00:39:07,359
see if it complains at all

00:39:08,000 --> 00:39:15,839
so come back to our docker

00:39:11,040 --> 00:39:15,839
desktop yep

00:39:21,280 --> 00:39:26,079
and how to load the configuration

00:39:27,760 --> 00:39:33,040
we will come back let's just delete this

00:39:33,599 --> 00:39:38,240
fun stuff going through commands that

00:39:36,880 --> 00:39:43,839
you already

00:39:38,240 --> 00:39:43,839
have done oh docker run

00:39:57,760 --> 00:40:03,520
and we'll just double check here's our

00:40:00,240 --> 00:40:03,520
clear config

00:40:06,960 --> 00:40:11,839
clear underscore config

00:40:12,960 --> 00:40:18,800
and i told you i shouldn't have killed

00:40:22,839 --> 00:40:25,839
it

00:40:31,920 --> 00:40:34,720
let's see what

00:40:37,040 --> 00:40:41,119
so we'll just we know we've done it

00:40:38,800 --> 00:40:41,119
before

00:40:41,280 --> 00:40:45,599
worse comes to worse we'll show you what

00:40:42,800 --> 00:40:45,599
the picture looks like

00:40:51,119 --> 00:41:07,839
all right claire config

00:41:16,400 --> 00:41:21,839
always one thing that goes not quite

00:41:18,800 --> 00:41:21,839
right right

00:41:23,440 --> 00:41:25,920
come back

00:41:29,599 --> 00:41:35,839
definition of insanity is doing the same

00:41:32,000 --> 00:41:35,839
thing over and over

00:41:36,800 --> 00:41:40,640
tomorrow you have five minutes before

00:41:38,400 --> 00:41:44,400
the break oh

00:41:40,640 --> 00:41:47,760
five minutes before the break okay

00:41:44,400 --> 00:41:49,119
all right well let's take a look at um

00:41:47,760 --> 00:41:52,000
we may come back to

00:41:49,119 --> 00:41:53,839
we'll come back to this and figure out

00:41:52,000 --> 00:41:56,960
what

00:41:53,839 --> 00:41:56,960
command iran

00:42:00,240 --> 00:42:03,839
lost my mouse

00:42:10,480 --> 00:42:13,520
all right we'll come back to that and

00:42:11,680 --> 00:42:16,640
fix that during the break um

00:42:13,520 --> 00:42:19,119
so what claire is going to do for us is

00:42:16,640 --> 00:42:20,720
take a look at the powerpoint it's going

00:42:19,119 --> 00:42:23,440
to give us

00:42:20,720 --> 00:42:25,040
a listing of all the vulnerabilities

00:42:23,440 --> 00:42:28,079
into

00:42:25,040 --> 00:42:29,359
eclair one command line and then it's

00:42:28,079 --> 00:42:30,480
going to put it into a json file so

00:42:29,359 --> 00:42:31,520
let's take a look at the one that i did

00:42:30,480 --> 00:42:33,520
earlier

00:42:31,520 --> 00:42:34,880
just to prove that we've actually made

00:42:33,520 --> 00:42:38,240
it work

00:42:34,880 --> 00:42:45,839
before here

00:42:38,240 --> 00:42:45,839
so we'll go back into the one

00:42:54,160 --> 00:43:01,359
you tell me

00:42:59,280 --> 00:43:02,319
so we'll look at the claire scanner

00:43:01,359 --> 00:43:13,520
output

00:43:02,319 --> 00:43:14,880
so we point the claire scanner at

00:43:13,520 --> 00:43:16,960
we pointed the clay scanner at the

00:43:14,880 --> 00:43:18,880
container and

00:43:16,960 --> 00:43:20,720
we had it run against that uh that

00:43:18,880 --> 00:43:23,760
instance and then we

00:43:20,720 --> 00:43:27,200
got an output file that is going to list

00:43:23,760 --> 00:43:28,319
all of the cdes now cbe is the

00:43:27,200 --> 00:43:30,240
vulnerabilities and known

00:43:28,319 --> 00:43:33,280
vulnerabilities that exist

00:43:30,240 --> 00:43:34,720
in that container so it points it to the

00:43:33,280 --> 00:43:37,440
container it breaks it open

00:43:34,720 --> 00:43:39,119
and it looks at the install components

00:43:37,440 --> 00:43:41,359
and then it evaluates those against that

00:43:39,119 --> 00:43:42,960
database that we have installed

00:43:41,359 --> 00:43:44,960
just a second ago so lots of

00:43:42,960 --> 00:43:45,839
vulnerabilities now one of the things i

00:43:44,960 --> 00:43:49,119
wanted to point out

00:43:45,839 --> 00:43:49,839
is the vulnerabilities in in claire in

00:43:49,119 --> 00:43:52,160
this instance

00:43:49,839 --> 00:43:53,440
they're looking at the os level and not

00:43:52,160 --> 00:43:55,440
the application level

00:43:53,440 --> 00:43:58,480
so a lot of these almost well all of

00:43:55,440 --> 00:44:00,880
these uh revolve around

00:43:58,480 --> 00:44:02,000
the open source components inside that

00:44:00,880 --> 00:44:04,960
base image

00:44:02,000 --> 00:44:05,920
right where i don't know how many i have

00:44:04,960 --> 00:44:07,520
here over 100

00:44:05,920 --> 00:44:09,200
vulnerabilities that don't relate to my

00:44:07,520 --> 00:44:11,359
application at all uh

00:44:09,200 --> 00:44:12,800
but i really can't change this i could

00:44:11,359 --> 00:44:16,720
change the base image

00:44:12,800 --> 00:44:19,520
but this is what we see often in

00:44:16,720 --> 00:44:21,520
in systems that are uh looking at the

00:44:19,520 --> 00:44:23,200
container late in the process right

00:44:21,520 --> 00:44:25,119
they're breaking open the container they

00:44:23,200 --> 00:44:26,000
either see an application layer only or

00:44:25,119 --> 00:44:29,359
they see

00:44:26,000 --> 00:44:31,040
uh the base layer and the os layer only

00:44:29,359 --> 00:44:33,040
now if as a developer i had to go

00:44:31,040 --> 00:44:35,040
through all of these individual

00:44:33,040 --> 00:44:36,079
vulnerabilities i'm gonna have a hard

00:44:35,040 --> 00:44:37,359
time because it

00:44:36,079 --> 00:44:39,520
i i still don't know whether i'm

00:44:37,359 --> 00:44:41,040
vulnerable to that

00:44:39,520 --> 00:44:43,520
that struts vulnerability that we know

00:44:41,040 --> 00:44:46,560
we're vulnerable to we don't actually

00:44:43,520 --> 00:44:48,400
um we don't actually have it

00:44:46,560 --> 00:44:51,040
in here at all there's no reference to

00:44:48,400 --> 00:44:54,640
the application at all and

00:44:51,040 --> 00:44:58,079
this is true also of

00:44:54,640 --> 00:45:01,280
the way that a company like or a

00:44:58,079 --> 00:45:02,319
solution like amazon where when we

00:45:01,280 --> 00:45:04,560
upload

00:45:02,319 --> 00:45:05,839
our container into the repository and it

00:45:04,560 --> 00:45:08,640
does a scan

00:45:05,839 --> 00:45:09,040
uh it's going to be looking at that os

00:45:08,640 --> 00:45:10,480
level

00:45:09,040 --> 00:45:12,480
as well so i'm going to miss something

00:45:10,480 --> 00:45:13,280
right i'm missing that application that

00:45:12,480 --> 00:45:15,920
i built and

00:45:13,280 --> 00:45:17,599
put on there right so if we wanted to

00:45:15,920 --> 00:45:21,440
take a look at what that

00:45:17,599 --> 00:45:24,319
what that looks like right we could um

00:45:21,440 --> 00:45:26,240
come up here to ecr so um this is the

00:45:24,319 --> 00:45:29,440
hack me this is my container i had

00:45:26,240 --> 00:45:31,760
published it to amazon's ecr

00:45:29,440 --> 00:45:33,760
same thing i've got a list and it's

00:45:31,760 --> 00:45:36,720
gonna be pretty close to the list that

00:45:33,760 --> 00:45:37,520
that claire provided uh but it's all the

00:45:36,720 --> 00:45:40,720
os level

00:45:37,520 --> 00:45:41,520
stuff we know that there's tomcat in

00:45:40,720 --> 00:45:43,520
here right it's

00:45:41,520 --> 00:45:45,280
at the os level but we know that there's

00:45:43,520 --> 00:45:46,480
struts components we know all the java

00:45:45,280 --> 00:45:48,800
dependencies

00:45:46,480 --> 00:45:50,560
that are in there right so we're missing

00:45:48,800 --> 00:45:51,599
the application layer and that's a big

00:45:50,560 --> 00:45:53,920
part it's 100

00:45:51,599 --> 00:45:54,960
in our opinion it's 100 of the part it's

00:45:53,920 --> 00:45:57,359
great that i can

00:45:54,960 --> 00:45:58,400
know the vulnerabilities but i'm not

00:45:57,359 --> 00:46:02,000
going to go in and update

00:45:58,400 --> 00:46:04,000
the the base layer uh os

00:46:02,000 --> 00:46:05,920
at all right but a lot of companies need

00:46:04,000 --> 00:46:09,200
to have a full bill of materials

00:46:05,920 --> 00:46:10,800
uh for the risk so when we come back um

00:46:09,200 --> 00:46:12,240
what we'll do is we'll take a look at

00:46:10,800 --> 00:46:15,040
well how can i see

00:46:12,240 --> 00:46:15,599
the application layer as well what what

00:46:15,040 --> 00:46:17,200
um

00:46:15,599 --> 00:46:18,880
what bill of materials what does the

00:46:17,200 --> 00:46:21,200
developer use

00:46:18,880 --> 00:46:22,240
so that they can fix the application

00:46:21,200 --> 00:46:23,760
level problem which is where the

00:46:22,240 --> 00:46:26,960
vulnerability exists

00:46:23,760 --> 00:46:30,079
early in that process right

00:46:26,960 --> 00:46:32,319
well we're on part two of it um so

00:46:30,079 --> 00:46:33,280
uh i welcome back to the folks that

00:46:32,319 --> 00:46:35,440
stuck in there

00:46:33,280 --> 00:46:37,280
uh at the end uh we're gonna go back and

00:46:35,440 --> 00:46:40,079
redeem ourselves here real quick

00:46:37,280 --> 00:46:40,839
um if you remember i was trying to run

00:46:40,079 --> 00:46:43,520
uh

00:46:40,839 --> 00:46:45,599
claire um a little

00:46:43,520 --> 00:46:46,800
troubleshooting 101 uh remember to read

00:46:45,599 --> 00:46:48,240
the error message

00:46:46,800 --> 00:46:50,079
um i think the error message said it

00:46:48,240 --> 00:46:51,440
couldn't find the file uh if you can't

00:46:50,079 --> 00:46:53,440
find the file then

00:46:51,440 --> 00:46:54,480
can't find the file so i was actually in

00:46:53,440 --> 00:46:58,160
the wrong directory

00:46:54,480 --> 00:46:59,200
um when i ran it so just to wrap up on

00:46:58,160 --> 00:47:01,839
what we did

00:46:59,200 --> 00:47:04,240
we had the claire installed and then um

00:47:01,839 --> 00:47:09,280
i'm running a claire scanner

00:47:04,240 --> 00:47:11,280
and the ip is host.internal

00:47:09,280 --> 00:47:13,280
because i'm running docker and then the

00:47:11,280 --> 00:47:15,760
output and then i pass

00:47:13,280 --> 00:47:16,640
the the name of the running image and

00:47:15,760 --> 00:47:20,880
then you get this

00:47:16,640 --> 00:47:25,119
nice big list of um

00:47:20,880 --> 00:47:27,680
put this out here

00:47:25,119 --> 00:47:27,680
clears

00:47:30,960 --> 00:47:38,559
output oops

00:47:34,000 --> 00:47:40,880
let me do that just did it

00:47:38,559 --> 00:47:42,240
and then it'll start the scanner so you

00:47:40,880 --> 00:47:44,960
can see how companies can

00:47:42,240 --> 00:47:46,960
um and folks can incorporate something

00:47:44,960 --> 00:47:48,720
simple like this scanner into their

00:47:46,960 --> 00:47:50,400
their build processes or their release

00:47:48,720 --> 00:47:53,280
processes um

00:47:50,400 --> 00:47:54,160
and then they'll get a a list of again

00:47:53,280 --> 00:47:56,559
all of the

00:47:54,160 --> 00:47:57,680
um really the os level components that

00:47:56,559 --> 00:48:00,800
were there so

00:47:57,680 --> 00:48:02,000
uh really easy to set up when you're in

00:48:00,800 --> 00:48:02,960
the right direction when you're in the

00:48:02,000 --> 00:48:06,640
right directory

00:48:02,960 --> 00:48:08,240
uh so um yeah so let's take a look at

00:48:06,640 --> 00:48:09,839
uh let's take a look at what we were

00:48:08,240 --> 00:48:12,160
talking about and and

00:48:09,839 --> 00:48:12,880
and look at the application from from an

00:48:12,160 --> 00:48:15,599
application

00:48:12,880 --> 00:48:16,880
view and because that's the open source

00:48:15,599 --> 00:48:18,960
components

00:48:16,880 --> 00:48:20,000
um that have the the vulnerability that

00:48:18,960 --> 00:48:22,480
we're that we're looking

00:48:20,000 --> 00:48:23,440
at so we're going to really try to focus

00:48:22,480 --> 00:48:26,319
this on

00:48:23,440 --> 00:48:27,680
uh fixing the application earlier in the

00:48:26,319 --> 00:48:28,559
the software development life cycle

00:48:27,680 --> 00:48:30,240
right

00:48:28,559 --> 00:48:31,760
if i can upgrade the component i want to

00:48:30,240 --> 00:48:33,520
upgrade the component i want the

00:48:31,760 --> 00:48:35,440
developer to be able to do that i want

00:48:33,520 --> 00:48:38,240
the developer to be able to see

00:48:35,440 --> 00:48:39,359
um the versions uh you know the

00:48:38,240 --> 00:48:40,400
developer in the end is going to be the

00:48:39,359 --> 00:48:42,480
only one who knows

00:48:40,400 --> 00:48:44,400
is this version does it have the the

00:48:42,480 --> 00:48:46,079
functionality that i have does it pass

00:48:44,400 --> 00:48:48,000
my local unit test

00:48:46,079 --> 00:48:49,200
um right and then and then go ahead and

00:48:48,000 --> 00:48:50,960
upgrade that version

00:48:49,200 --> 00:48:52,559
uh most of these vulnerabilities can be

00:48:50,960 --> 00:48:54,240
solved by upgrading um

00:48:52,559 --> 00:48:55,839
if they can't just knowing that it's

00:48:54,240 --> 00:48:56,880
there and being able to to make sure

00:48:55,839 --> 00:48:58,559
that you've coded or

00:48:56,880 --> 00:49:00,079
remediated in a different way around

00:48:58,559 --> 00:49:02,160
that becomes important

00:49:00,079 --> 00:49:03,359
so we're going to use um we're going to

00:49:02,160 --> 00:49:04,880
use uh

00:49:03,359 --> 00:49:06,800
vs code so if you don't have it go ahead

00:49:04,880 --> 00:49:10,240
and install it and if you would

00:49:06,800 --> 00:49:12,960
install the nexus iq extension

00:49:10,240 --> 00:49:14,160
for vs code is the name of it in the

00:49:12,960 --> 00:49:15,920
marketplace

00:49:14,160 --> 00:49:17,760
and then um we'll go from there i've got

00:49:15,920 --> 00:49:18,400
a couple of overview overview slides and

00:49:17,760 --> 00:49:19,839
then we'll

00:49:18,400 --> 00:49:21,680
uh we'll dive into seeing what that

00:49:19,839 --> 00:49:24,400
application looks like

00:49:21,680 --> 00:49:25,599
so devops conference uh we're gonna call

00:49:24,400 --> 00:49:28,000
it devsecops right

00:49:25,599 --> 00:49:28,880
we want to incorporate security early in

00:49:28,000 --> 00:49:30,720
the process

00:49:28,880 --> 00:49:32,640
uh we want to incorporate it everywhere

00:49:30,720 --> 00:49:34,079
in the life cycle in the pipeline

00:49:32,640 --> 00:49:36,160
and we want to do it at scale if we're

00:49:34,079 --> 00:49:38,640
working for a large company

00:49:36,160 --> 00:49:39,359
and again if we go back to the whole

00:49:38,640 --> 00:49:41,599
point of

00:49:39,359 --> 00:49:42,800
of everything that we're doing uh it's

00:49:41,599 --> 00:49:46,000
to increase revenue

00:49:42,800 --> 00:49:47,520
and improve increased revenue through

00:49:46,000 --> 00:49:49,200
faster releases and better quality

00:49:47,520 --> 00:49:49,920
applications so we can keep the company

00:49:49,200 --> 00:49:52,240
alive

00:49:49,920 --> 00:49:53,839
and we can all have jobs because that in

00:49:52,240 --> 00:49:57,520
the end that's what we're doing at some

00:49:53,839 --> 00:49:59,119
at some level and ideally

00:49:57,520 --> 00:50:00,800
uh we'd like to be able to do this if

00:49:59,119 --> 00:50:03,280
we're in an enterprise

00:50:00,800 --> 00:50:04,240
uh across the entire enterprise and have

00:50:03,280 --> 00:50:06,559
a plan

00:50:04,240 --> 00:50:07,280
for uh open source governance that

00:50:06,559 --> 00:50:10,480
includes

00:50:07,280 --> 00:50:11,520
security legal and architecture right uh

00:50:10,480 --> 00:50:13,760
we want to

00:50:11,520 --> 00:50:15,440
to know the health of our components and

00:50:13,760 --> 00:50:17,359
really have policies in place

00:50:15,440 --> 00:50:19,520
that let me automatically get the best

00:50:17,359 --> 00:50:21,040
of the best open source components

00:50:19,520 --> 00:50:22,960
uh and prevent me from getting the worst

00:50:21,040 --> 00:50:24,160
of the worst and again i want to do it

00:50:22,960 --> 00:50:26,640
in an automated way

00:50:24,160 --> 00:50:28,400
and i that what that really leads to is

00:50:26,640 --> 00:50:30,319
is apsec is spending less time on

00:50:28,400 --> 00:50:32,880
managing the components and doing

00:50:30,319 --> 00:50:33,440
uh enforcement around something that

00:50:32,880 --> 00:50:35,440
they don't

00:50:33,440 --> 00:50:37,599
really do anything with right they just

00:50:35,440 --> 00:50:38,720
have some rules around it and some lists

00:50:37,599 --> 00:50:40,559
about what's in it

00:50:38,720 --> 00:50:41,920
but the the folks that are doing the

00:50:40,559 --> 00:50:42,559
development are the ones that they're

00:50:41,920 --> 00:50:44,480
actually

00:50:42,559 --> 00:50:45,599
on the hook for that work that needs to

00:50:44,480 --> 00:50:48,079
be done so

00:50:45,599 --> 00:50:49,599
uh ideally will we enforce some policy

00:50:48,079 --> 00:50:51,280
if we um

00:50:49,599 --> 00:50:53,200
later on on the enterprise the pay

00:50:51,280 --> 00:50:54,160
version side of it policy plays a huge

00:50:53,200 --> 00:50:56,319
role

00:50:54,160 --> 00:50:57,920
in what we do and how we look at that

00:50:56,319 --> 00:50:59,680
we'll see a little bit of it here in a

00:50:57,920 --> 00:51:02,720
second

00:50:59,680 --> 00:51:05,920
so early shifting left

00:51:02,720 --> 00:51:08,160
it is the only way to do this easily and

00:51:05,920 --> 00:51:09,520
cheaply and quickly right and we want to

00:51:08,160 --> 00:51:11,760
reduce the amount of time

00:51:09,520 --> 00:51:13,200
the developers are having to research

00:51:11,760 --> 00:51:16,319
and getting the approval

00:51:13,200 --> 00:51:17,440
uh and downloading uh the components

00:51:16,319 --> 00:51:19,680
themselves

00:51:17,440 --> 00:51:21,839
when they find bad components or or

00:51:19,680 --> 00:51:23,599
their vulnerabilities

00:51:21,839 --> 00:51:24,960
that have been identified we want to

00:51:23,599 --> 00:51:26,079
reduce the amount of time it takes to

00:51:24,960 --> 00:51:27,920
remediate

00:51:26,079 --> 00:51:29,520
and do the rework on that we want to

00:51:27,920 --> 00:51:31,280
improve the quality and we want to

00:51:29,520 --> 00:51:33,520
improve it as quickly as we can

00:51:31,280 --> 00:51:34,720
this is a software supply chain we're

00:51:33,520 --> 00:51:37,280
we're trying to improve at

00:51:34,720 --> 00:51:38,240
every step of this and um if you if

00:51:37,280 --> 00:51:40,240
you're reading

00:51:38,240 --> 00:51:43,200
i think probably everybody here's read

00:51:40,240 --> 00:51:46,800
gene kim's books and and accelerate and

00:51:43,200 --> 00:51:49,599
uh mick kirsten's project product

00:51:46,800 --> 00:51:50,079
uh it's all about understanding the the

00:51:49,599 --> 00:51:51,920
flow

00:51:50,079 --> 00:51:53,760
of the software supply chain reducing

00:51:51,920 --> 00:51:56,640
lead time everywhere i can

00:51:53,760 --> 00:51:57,520
and if i can do this successfully our

00:51:56,640 --> 00:51:59,280
companies

00:51:57,520 --> 00:52:01,359
our customers are just seeing the

00:51:59,280 --> 00:52:02,559
reduction in rework you know close to 40

00:52:01,359 --> 00:52:05,200
to 50 percent

00:52:02,559 --> 00:52:06,640
uh on the rework just automating the

00:52:05,200 --> 00:52:10,480
procurement

00:52:06,640 --> 00:52:13,359
process by 80 right going from

00:52:10,480 --> 00:52:14,800
uh six to eight weeks again to minutes

00:52:13,359 --> 00:52:18,800
by automating

00:52:14,800 --> 00:52:21,200
so um what we've done is we've really

00:52:18,800 --> 00:52:22,800
embraced this notion of developers need

00:52:21,200 --> 00:52:24,480
to be able to see

00:52:22,800 --> 00:52:26,880
the vulnerabilities that exist within

00:52:24,480 --> 00:52:29,520
their environment so if you go to

00:52:26,880 --> 00:52:31,440
sonotype.com forward slash product

00:52:29,520 --> 00:52:33,040
products dash dev dash tools

00:52:31,440 --> 00:52:34,960
irene if you throw that in the chat for

00:52:33,040 --> 00:52:35,920
me we have a number of tools that are

00:52:34,960 --> 00:52:38,000
based on

00:52:35,920 --> 00:52:39,359
uh the programming languages languages

00:52:38,000 --> 00:52:42,480
that fit into

00:52:39,359 --> 00:52:45,599
uh the developer process right so

00:52:42,480 --> 00:52:48,640
uh auditjs is an example of

00:52:45,599 --> 00:52:50,480
of one that uses our open source or

00:52:48,640 --> 00:52:53,200
oss index product which is also a free

00:52:50,480 --> 00:52:55,599
data product so these tools combined

00:52:53,200 --> 00:52:56,720
can fit into the process do an

00:52:55,599 --> 00:52:58,800
evaluation

00:52:56,720 --> 00:52:59,760
identify vulnerabilities in the

00:52:58,800 --> 00:53:01,520
application

00:52:59,760 --> 00:53:02,880
let the developer know early in the

00:53:01,520 --> 00:53:03,839
process and then be able to make those

00:53:02,880 --> 00:53:05,680
changes

00:53:03,839 --> 00:53:07,520
without automated pr requests without

00:53:05,680 --> 00:53:12,319
all the automation that just generates

00:53:07,520 --> 00:53:14,480
work my team's tired of me

00:53:12,319 --> 00:53:15,839
bad mouthing automated prs but i'm

00:53:14,480 --> 00:53:18,079
beginning to i know

00:53:15,839 --> 00:53:19,599
now that they they're just generators of

00:53:18,079 --> 00:53:21,440
unplanned work

00:53:19,599 --> 00:53:23,760
uh there's a manual process that happens

00:53:21,440 --> 00:53:26,160
has to happen behind it so we've got um

00:53:23,760 --> 00:53:27,760
we've got developer tools for uh the os

00:53:26,160 --> 00:53:30,800
level for python for

00:53:27,760 --> 00:53:34,000
rust for uh you name it we've got it

00:53:30,800 --> 00:53:36,640
um and then and then more right so

00:53:34,000 --> 00:53:38,559
we're really invested in the developer

00:53:36,640 --> 00:53:39,839
community what we want the developers to

00:53:38,559 --> 00:53:41,920
be able to build

00:53:39,839 --> 00:53:43,920
uh projects and open source components

00:53:41,920 --> 00:53:46,240
that we can then use as a company

00:53:43,920 --> 00:53:47,920
uh we can then use as uh product

00:53:46,240 --> 00:53:49,200
developers because the better

00:53:47,920 --> 00:53:51,359
the better the components that we're

00:53:49,200 --> 00:53:52,880
using right the open source components

00:53:51,359 --> 00:53:53,599
that we're using the better our product

00:53:52,880 --> 00:53:56,640
is gonna be

00:53:53,599 --> 00:53:58,240
uh that we deliver to our customers so

00:53:56,640 --> 00:54:00,559
take a look at that we'll see a couple

00:53:58,240 --> 00:54:03,359
of these uh used right now with

00:54:00,559 --> 00:54:04,079
specifically the the vs code one and

00:54:03,359 --> 00:54:07,200
then

00:54:04,079 --> 00:54:09,200
we'll talk about oss index oss index is

00:54:07,200 --> 00:54:10,720
our free data service

00:54:09,200 --> 00:54:12,640
all the tools that you just saw there

00:54:10,720 --> 00:54:14,960
and then a whole nother set

00:54:12,640 --> 00:54:15,839
including a wasp dependency check and

00:54:14,960 --> 00:54:20,400
and other tools

00:54:15,839 --> 00:54:23,040
use the data within within the oss index

00:54:20,400 --> 00:54:25,040
to understand what vulnerabilities and

00:54:23,040 --> 00:54:26,800
what components um are good and how

00:54:25,040 --> 00:54:29,280
that's all integrated in so we'll

00:54:26,800 --> 00:54:30,480
we'll see those uh together uh again the

00:54:29,280 --> 00:54:32,240
oss index

00:54:30,480 --> 00:54:34,160
um i didn't write this i'm not so

00:54:32,240 --> 00:54:35,839
awesomey um

00:54:34,160 --> 00:54:37,200
jeffrey hessey one of brilliant

00:54:35,839 --> 00:54:39,359
brilliant brilliant

00:54:37,200 --> 00:54:41,040
developers and advocates has built a

00:54:39,359 --> 00:54:41,599
majority of the the tools that we have

00:54:41,040 --> 00:54:42,880
here

00:54:41,599 --> 00:54:44,960
so they're free they can be used

00:54:42,880 --> 00:54:48,000
anonymously um

00:54:44,960 --> 00:54:49,200
and in general just the the commitment

00:54:48,000 --> 00:54:51,040
that our company has to

00:54:49,200 --> 00:54:53,359
to helping develop these tools i i think

00:54:51,040 --> 00:54:55,680
is it makes it a great place to work

00:54:53,359 --> 00:54:56,559
so um let's get on with it vs code we're

00:54:55,680 --> 00:55:00,240
going to install

00:54:56,559 --> 00:55:01,920
the the extension and and once

00:55:00,240 --> 00:55:03,599
we've done that so you should be able to

00:55:01,920 --> 00:55:06,640
go to extensions uh

00:55:03,599 --> 00:55:07,760
search in the marketplace for the some

00:55:06,640 --> 00:55:10,400
type extension

00:55:07,760 --> 00:55:11,680
and then really shouldn't have to do

00:55:10,400 --> 00:55:15,680
anything else on the

00:55:11,680 --> 00:55:17,119
the configuration so um i did come over

00:55:15,680 --> 00:55:20,960
and went to file

00:55:17,119 --> 00:55:24,559
open and i opened up my directory

00:55:20,960 --> 00:55:27,280
uh where i checked out or cloned my repo

00:55:24,559 --> 00:55:28,960
remember i had 2020 ato real one struts

00:55:27,280 --> 00:55:32,319
to rce

00:55:28,960 --> 00:55:35,359
and uh and now i've got my source code

00:55:32,319 --> 00:55:36,720
here i can build my application

00:55:35,359 --> 00:55:38,160
uh i could actually do all the docker

00:55:36,720 --> 00:55:39,599
stuff from it so all the stuff on the

00:55:38,160 --> 00:55:40,400
command line i can do through visual

00:55:39,599 --> 00:55:42,960
code

00:55:40,400 --> 00:55:44,400
um i'm just an old guy in the on the

00:55:42,960 --> 00:55:47,680
command line quite a bit

00:55:44,400 --> 00:55:50,480
um but this is about uh

00:55:47,680 --> 00:55:53,040
what components am i am i using right we

00:55:50,480 --> 00:55:54,960
mentioned the palm.xml file

00:55:53,040 --> 00:55:57,440
if i didn't have a tool like we're about

00:55:54,960 --> 00:55:59,920
to see i might have to go into the palm

00:55:57,440 --> 00:56:05,760
and read the dependencies

00:55:59,920 --> 00:56:08,079
here there's our our low g i text 4.2.2

00:56:05,760 --> 00:56:10,160
and what we really want to do is give

00:56:08,079 --> 00:56:11,599
the the developers this ability to say

00:56:10,160 --> 00:56:13,520
okay am i picking the right components

00:56:11,599 --> 00:56:17,280
do i have that visibility

00:56:13,520 --> 00:56:19,440
so what um the sonotype plugin is doing

00:56:17,280 --> 00:56:20,880
the extension is it's looking at that

00:56:19,440 --> 00:56:21,760
palm file just like everybody else we

00:56:20,880 --> 00:56:22,960
have a different

00:56:21,760 --> 00:56:25,040
product that does it a little bit more

00:56:22,960 --> 00:56:28,160
intelligently but

00:56:25,040 --> 00:56:30,160
it's it's pointing out um the components

00:56:28,160 --> 00:56:33,440
versions that i'm using and

00:56:30,160 --> 00:56:33,839
whether they're passing or failing and

00:56:33,440 --> 00:56:37,280
the

00:56:33,839 --> 00:56:39,280
the criticality of um the policy

00:56:37,280 --> 00:56:40,480
violation and it's a single policy with

00:56:39,280 --> 00:56:43,200
the free tools

00:56:40,480 --> 00:56:44,400
uh that we provide but what we're trying

00:56:43,200 --> 00:56:46,640
to do is

00:56:44,400 --> 00:56:47,520
give the developers the information that

00:56:46,640 --> 00:56:50,160
they need again

00:56:47,520 --> 00:56:50,799
fixed find and fix the problem fast

00:56:50,160 --> 00:56:53,359
right

00:56:50,799 --> 00:56:54,640
we should know straight ahead that

00:56:53,359 --> 00:56:58,799
struts 2 core

00:56:54,640 --> 00:56:59,680
2.5.10 is bad right um and i can click

00:56:58,799 --> 00:57:01,920
on it here

00:56:59,680 --> 00:57:03,680
now before i go any further i want to

00:57:01,920 --> 00:57:05,839
pause and compare it to the

00:57:03,680 --> 00:57:07,040
the list that we had here the thing that

00:57:05,839 --> 00:57:09,119
we want to focus on

00:57:07,040 --> 00:57:10,960
is managing these dependencies and and

00:57:09,119 --> 00:57:12,559
the versions don't want to manage

00:57:10,960 --> 00:57:14,799
vulnerabilities

00:57:12,559 --> 00:57:16,480
right i don't want to manage lists of

00:57:14,799 --> 00:57:19,359
lists and lists of vulnerabilities

00:57:16,480 --> 00:57:20,799
because that that's not that's not what

00:57:19,359 --> 00:57:22,960
me as a developer

00:57:20,799 --> 00:57:24,480
is thinking about right a security

00:57:22,960 --> 00:57:26,079
person might be thinking about this but

00:57:24,480 --> 00:57:27,280
if you give me a list of vulnerabilities

00:57:26,079 --> 00:57:28,160
and i've got to go through that list of

00:57:27,280 --> 00:57:30,799
vulnerabilities

00:57:28,160 --> 00:57:31,280
i'm going to have a hard time trying to

00:57:30,799 --> 00:57:33,680
understand

00:57:31,280 --> 00:57:36,160
what i need to prioritize so giving me a

00:57:33,680 --> 00:57:39,040
list of the components that i'm using

00:57:36,160 --> 00:57:41,040
getting that visibility right here in

00:57:39,040 --> 00:57:41,839
the workspace and then comparing that

00:57:41,040 --> 00:57:44,799
against

00:57:41,839 --> 00:57:46,640
a well-known data source of um of

00:57:44,799 --> 00:57:48,240
security and policy violations

00:57:46,640 --> 00:57:49,920
that really helped me understand it and

00:57:48,240 --> 00:57:54,319
focus my work

00:57:49,920 --> 00:57:55,839
so um when we click on struts 2 core

00:57:54,319 --> 00:57:58,640
i've got the package information the

00:57:55,839 --> 00:58:00,880
description again i can give you a list

00:57:58,640 --> 00:58:02,480
of all the vulnerabilities but do we

00:58:00,880 --> 00:58:05,119
want to manage this

00:58:02,480 --> 00:58:07,200
right through vulnerabilities and

00:58:05,119 --> 00:58:09,359
looking at vulnerabilities right

00:58:07,200 --> 00:58:11,839
or do we want to to find a version that

00:58:09,359 --> 00:58:14,000
that's going to be a good version

00:58:11,839 --> 00:58:15,680
all of our all of our tools actually

00:58:14,000 --> 00:58:18,960
have an upgrade path

00:58:15,680 --> 00:58:21,599
just like our oss version of repository

00:58:18,960 --> 00:58:23,599
manager they have an upgrade path into

00:58:21,599 --> 00:58:25,680
into our paid version that have premium

00:58:23,599 --> 00:58:27,040
data and better policy control

00:58:25,680 --> 00:58:28,799
so that's what these policy and

00:58:27,040 --> 00:58:30,400
licensing uh pieces

00:58:28,799 --> 00:58:32,319
uh tabs here so i can look at the the

00:58:30,400 --> 00:58:32,720
vulnerabilities or i can start to go

00:58:32,319 --> 00:58:35,440
okay

00:58:32,720 --> 00:58:37,440
well this is the stretch core 2.5 there

00:58:35,440 --> 00:58:41,200
are a number of vulnerabilities

00:58:37,440 --> 00:58:43,040
how can i see if if there's data around

00:58:41,200 --> 00:58:44,079
that that that'll help me pick the right

00:58:43,040 --> 00:58:47,119
component

00:58:44,079 --> 00:58:48,880
right so again we can see

00:58:47,119 --> 00:58:50,319
all the components that are being used

00:58:48,880 --> 00:58:51,119
direct dependencies transitive

00:58:50,319 --> 00:58:52,559
dependencies

00:58:51,119 --> 00:58:54,559
i'm going to want to focus on the direct

00:58:52,559 --> 00:58:56,799
dependencies the things that uh

00:58:54,559 --> 00:59:00,000
the things that i can control but again

00:58:56,799 --> 00:59:03,359
i'm bringing this visibility into

00:59:00,000 --> 00:59:04,720
into the the ide and remember this is at

00:59:03,359 --> 00:59:06,720
the application level you don't see any

00:59:04,720 --> 00:59:08,400
of the oss level components because

00:59:06,720 --> 00:59:10,079
the container that i scanned earlier

00:59:08,400 --> 00:59:12,559
which we see a lot of

00:59:10,079 --> 00:59:13,200
uh security teams uh scanning later in

00:59:12,559 --> 00:59:16,559
the process

00:59:13,200 --> 00:59:19,520
isn't even created yet right so

00:59:16,559 --> 00:59:21,200
i don't really care about the the um the

00:59:19,520 --> 00:59:22,319
oss level components i care about the

00:59:21,200 --> 00:59:24,720
application level

00:59:22,319 --> 00:59:26,960
and remember the the two other scans

00:59:24,720 --> 00:59:29,440
that we did didn't show any of this data

00:59:26,960 --> 00:59:31,119
here the application level uh data which

00:59:29,440 --> 00:59:33,440
is really where those vulnerabilities

00:59:31,119 --> 00:59:37,440
existed

00:59:33,440 --> 00:59:39,520
so i've got the the list of components

00:59:37,440 --> 00:59:40,880
and how can i how can i extend that and

00:59:39,520 --> 00:59:44,160
how does

00:59:40,880 --> 00:59:46,319
really the oss index help me find some

00:59:44,160 --> 00:59:48,400
find some good components well we can go

00:59:46,319 --> 00:59:51,440
beyond this and actually integrate

00:59:48,400 --> 00:59:52,480
in with um our products on the on the

00:59:51,440 --> 00:59:55,520
web as well

00:59:52,480 --> 00:59:58,880
so um if we were to take a look at

00:59:55,520 --> 01:00:00,359
uh for example we'll go to 2.5.10 we

00:59:58,880 --> 01:00:04,480
know that

01:00:00,359 --> 01:00:06,880
2.5.10 is the one that we were using

01:00:04,480 --> 01:00:08,160
now if i'm picking components here and

01:00:06,880 --> 01:00:11,200
i'm coming to

01:00:08,160 --> 01:00:13,599
um maven central for example

01:00:11,200 --> 01:00:14,799
and i've got 2.5.0 we'll talk about with

01:00:13,599 --> 01:00:17,040
this little excellent

01:00:14,799 --> 01:00:18,640
exclamation point here um we have a

01:00:17,040 --> 01:00:20,079
component research plug-in that we'll

01:00:18,640 --> 01:00:22,079
save that for a little bit later but

01:00:20,079 --> 01:00:23,599
there's a view on oss index tab so we're

01:00:22,079 --> 01:00:27,119
integrated in with

01:00:23,599 --> 01:00:27,680
oss index at the at the maven central

01:00:27,119 --> 01:00:29,680
level

01:00:27,680 --> 01:00:31,599
right so if i want to see a little bit

01:00:29,680 --> 01:00:34,000
more detail on 2.5.10

01:00:31,599 --> 01:00:35,119
outside of that um i can see oh they're

01:00:34,000 --> 01:00:38,240
five critical and

01:00:35,119 --> 01:00:43,839
and one severe and i can remember to

01:00:38,240 --> 01:00:43,839
sign in hopefully

01:00:44,480 --> 01:00:49,119
um whoa stop

01:00:54,839 --> 01:00:59,599
cool

01:00:56,480 --> 01:00:59,599
maybe i won't sign in

01:01:01,920 --> 01:01:08,240
i also got a new laptop last week and

01:01:04,880 --> 01:01:08,240
none of my passwords are saved

01:01:08,480 --> 01:01:11,839
and i can't type

01:01:16,240 --> 01:01:22,079
all right so there we can go back to

01:01:23,440 --> 01:01:26,880
go back to my

01:01:27,440 --> 01:01:34,400
struct piece of it and then the

01:01:31,359 --> 01:01:35,280
from the uh from maven central i can

01:01:34,400 --> 01:01:38,480
view on uh

01:01:35,280 --> 01:01:39,839
oss index the data is the same um

01:01:38,480 --> 01:01:41,440
i just need to figure out what my

01:01:39,839 --> 01:01:42,880
username and password is you can see i

01:01:41,440 --> 01:01:44,160
didn't go that far

01:01:42,880 --> 01:01:46,160
but this gives you all the data that

01:01:44,160 --> 01:01:49,520
you'll the that you'll need to

01:01:46,160 --> 01:01:52,480
to run that uh to view the data so

01:01:49,520 --> 01:01:53,119
um let's take a let's go a step further

01:01:52,480 --> 01:01:55,440
here

01:01:53,119 --> 01:01:56,720
um as we start to look at this you know

01:01:55,440 --> 01:01:57,280
there are lots of different versions

01:01:56,720 --> 01:01:59,119
that

01:01:57,280 --> 01:02:01,280
um that i can pick if we go back and

01:01:59,119 --> 01:02:04,400
pick the latest version

01:02:01,280 --> 01:02:06,400
uh and view here right i can actually

01:02:04,400 --> 01:02:06,880
get to a version that doesn't have any

01:02:06,400 --> 01:02:10,160
known

01:02:06,880 --> 01:02:11,920
vulnerabilities so uh even

01:02:10,160 --> 01:02:13,920
without having to log in and provide

01:02:11,920 --> 01:02:15,680
this is one of jeffrey's like

01:02:13,920 --> 01:02:17,520
key things here is i shouldn't have to

01:02:15,680 --> 01:02:19,200
log in uh to get that data

01:02:17,520 --> 01:02:20,640
but we can go back and look at different

01:02:19,200 --> 01:02:24,319
versions

01:02:20,640 --> 01:02:26,400
and see which ones can i use now

01:02:24,319 --> 01:02:28,000
this is important because you know

01:02:26,400 --> 01:02:29,039
sometimes you get to build an

01:02:28,000 --> 01:02:31,039
application

01:02:29,039 --> 01:02:33,039
straight from scratch and you're getting

01:02:31,039 --> 01:02:34,640
to pick the the right versions but

01:02:33,039 --> 01:02:36,720
i want to get to a version that i know

01:02:34,640 --> 01:02:38,880
is going to work that has no

01:02:36,720 --> 01:02:39,920
known vulnerabilities so that i can

01:02:38,880 --> 01:02:43,680
upgrade that

01:02:39,920 --> 01:02:46,319
and then rerun my rerun my scan

01:02:43,680 --> 01:02:47,599
and that visibility into my app and it's

01:02:46,319 --> 01:02:50,000
probably going to take care

01:02:47,599 --> 01:02:51,680
of a number another number of uh

01:02:50,000 --> 01:02:55,680
vulnerabilities that exist

01:02:51,680 --> 01:02:58,319
right so um having this visibility

01:02:55,680 --> 01:02:59,920
into the components that i'm using and

01:02:58,319 --> 01:03:02,240
then being able to understand

01:02:59,920 --> 01:03:04,000
which versions i can upgrade to and

01:03:02,240 --> 01:03:05,440
fixing them here so i could just update

01:03:04,000 --> 01:03:08,559
the palm file

01:03:05,440 --> 01:03:09,920
and go from there right um let's let's

01:03:08,559 --> 01:03:14,160
actually do that so

01:03:09,920 --> 01:03:17,039
as we're coming in we'll do that 2.5.10

01:03:14,160 --> 01:03:19,760
we actually want to change this up here

01:03:17,039 --> 01:03:24,640
to 22

01:03:19,760 --> 01:03:26,960
and well we rerun this

01:03:24,640 --> 01:03:29,200
again i have control over the the direct

01:03:26,960 --> 01:03:32,559
dependencies that uh that i'm using

01:03:29,200 --> 01:03:33,599
and well behold we get down to a full

01:03:32,559 --> 01:03:36,559
list of

01:03:33,599 --> 01:03:38,319
uh the components but now it's starting

01:03:36,559 --> 01:03:40,960
to look a little bit more like

01:03:38,319 --> 01:03:43,119
what right this was the this was the

01:03:40,960 --> 01:03:46,240
view that github gave us too

01:03:43,119 --> 01:03:48,400
right so github couldn't tell us what

01:03:46,240 --> 01:03:50,079
versions of struts were there so it

01:03:48,400 --> 01:03:51,119
couldn't actually compare it against its

01:03:50,079 --> 01:03:52,160
data

01:03:51,119 --> 01:03:54,160
just because the way that the

01:03:52,160 --> 01:03:55,680
application was structured but i make

01:03:54,160 --> 01:03:56,880
one change i don't need an automatic

01:03:55,680 --> 01:03:59,839
pull request i can

01:03:56,880 --> 01:04:01,119
make this change two characters uh i can

01:03:59,839 --> 01:04:03,119
run my unit test

01:04:01,119 --> 01:04:04,880
then i can commit then i can have it

01:04:03,119 --> 01:04:06,160
merge somebody's gonna have to do the

01:04:04,880 --> 01:04:09,039
merge eventually so

01:04:06,160 --> 01:04:10,000
um let me you know let me fix this as we

01:04:09,039 --> 01:04:12,400
come through and

01:04:10,000 --> 01:04:13,520
and upgrade right um so whether you want

01:04:12,400 --> 01:04:15,680
to use

01:04:13,520 --> 01:04:17,359
github to get the version or start to

01:04:15,680 --> 01:04:20,480
look at different versions

01:04:17,359 --> 01:04:24,160
on um on maven central

01:04:20,480 --> 01:04:26,960
right you have this visibility so

01:04:24,160 --> 01:04:28,559
um again this second part is going to be

01:04:26,960 --> 01:04:29,039
a little bit quicker than than the first

01:04:28,559 --> 01:04:30,400
so if

01:04:29,039 --> 01:04:33,280
you've got questions just let me know

01:04:30,400 --> 01:04:35,440
but again you want to use

01:04:33,280 --> 01:04:37,359
tools that leverage the best data and

01:04:35,440 --> 01:04:39,760
right now oss index

01:04:37,359 --> 01:04:40,400
and the open source tools that that run

01:04:39,760 --> 01:04:42,400
against it

01:04:40,400 --> 01:04:43,520
are providing the the best set of data

01:04:42,400 --> 01:04:45,599
for uh

01:04:43,520 --> 01:04:47,440
the components themselves so if we take

01:04:45,599 --> 01:04:50,319
a look here real quick

01:04:47,440 --> 01:04:52,000
remember which directory we're here

01:04:50,319 --> 01:04:55,119
let's go back to oss index

01:04:52,000 --> 01:04:55,680
what are some of the other um uh other

01:04:55,119 --> 01:04:57,200
tools

01:04:55,680 --> 01:04:59,359
that are supported or the other

01:04:57,200 --> 01:05:01,119
ecosystems um

01:04:59,359 --> 01:05:02,799
anything that you're probably using yes

01:05:01,119 --> 01:05:03,280
people on this call will pick something

01:05:02,799 --> 01:05:05,760
that

01:05:03,280 --> 01:05:07,359
isn't in the list but um if it's not on

01:05:05,760 --> 01:05:10,480
this list it's not real

01:05:07,359 --> 01:05:11,760
that's not true but you get it and then

01:05:10,480 --> 01:05:12,799
what about the integrations

01:05:11,760 --> 01:05:14,880
right what are what are some of the

01:05:12,799 --> 01:05:16,480
applications so it's not just our uh

01:05:14,880 --> 01:05:18,640
applications you have dependency check

01:05:16,480 --> 01:05:22,240
and dependency track

01:05:18,640 --> 01:05:24,960
so anybody who wants to build against

01:05:22,240 --> 01:05:26,240
the oss index can um you can use the

01:05:24,960 --> 01:05:28,240
apis against it

01:05:26,240 --> 01:05:29,920
right so again it's a free service that

01:05:28,240 --> 01:05:32,640
we provide that gives you visibility

01:05:29,920 --> 01:05:34,160
into that application layer i want to

01:05:32,640 --> 01:05:37,200
combine those

01:05:34,160 --> 01:05:40,720
so let's take a look um

01:05:37,200 --> 01:05:44,640
real quick at our slides we'll finish

01:05:40,720 --> 01:05:46,720
up um and

01:05:44,640 --> 01:05:47,920
the uh the other piece of this you know

01:05:46,720 --> 01:05:51,039
we mentioned earlier

01:05:47,920 --> 01:05:54,240
uh the everywhere piece uh one of the uh

01:05:51,039 --> 01:05:58,160
one of the tools that we're providing um

01:05:54,240 --> 01:06:00,559
on the um on the cicd side

01:05:58,160 --> 01:06:02,079
uh for users in the cloud is on the

01:06:00,559 --> 01:06:04,799
azure devops side right

01:06:02,079 --> 01:06:05,440
so if we can start to incorporate this

01:06:04,799 --> 01:06:08,319
in

01:06:05,440 --> 01:06:09,839
uh into the build process in ways that i

01:06:08,319 --> 01:06:13,280
can still see

01:06:09,839 --> 01:06:16,000
the application layer and not just

01:06:13,280 --> 01:06:16,880
uh the finished docker container and the

01:06:16,000 --> 01:06:19,280
os level

01:06:16,880 --> 01:06:20,240
i want to do that right i want to reduce

01:06:19,280 --> 01:06:22,079
the amount of time that

01:06:20,240 --> 01:06:24,480
that app second qa are reviewing the

01:06:22,079 --> 01:06:26,559
releases because if i just gave them the

01:06:24,480 --> 01:06:28,000
the file from claire they're reviewing

01:06:26,559 --> 01:06:29,680
stuff that doesn't matter

01:06:28,000 --> 01:06:31,680
on the application side somebody may

01:06:29,680 --> 01:06:32,000
care about the uh the doctor we're gonna

01:06:31,680 --> 01:06:35,119
have that

01:06:32,000 --> 01:06:36,799
discussion uh later but um this focus on

01:06:35,119 --> 01:06:39,119
on the container and the os level uh

01:06:36,799 --> 01:06:41,839
containers really on the wrong thing

01:06:39,119 --> 01:06:43,200
um and we wanna actually reduce the the

01:06:41,839 --> 01:06:45,039
probability of a breach

01:06:43,200 --> 01:06:46,319
because we know where these open source

01:06:45,039 --> 01:06:47,920
components and the

01:06:46,319 --> 01:06:49,440
that we're using which versions are we

01:06:47,920 --> 01:06:52,799
using and are they

01:06:49,440 --> 01:06:57,039
vulnerable or not so quickly um

01:06:52,799 --> 01:06:59,119
on the uh on the

01:06:57,039 --> 01:07:00,079
azure devops side right i can

01:06:59,119 --> 01:07:03,119
incorporate my

01:07:00,079 --> 01:07:04,000
scans into the pipelines into the the

01:07:03,119 --> 01:07:06,720
releases

01:07:04,000 --> 01:07:08,480
and get the visibility into the open

01:07:06,720 --> 01:07:10,079
source components that are there

01:07:08,480 --> 01:07:11,920
which ones can be upgraded are there

01:07:10,079 --> 01:07:12,720
security issues are there licensing

01:07:11,920 --> 01:07:15,200
issues

01:07:12,720 --> 01:07:16,480
right what are those components and

01:07:15,200 --> 01:07:20,559
drill down again

01:07:16,480 --> 01:07:23,599
uh focused on the uh the application

01:07:20,559 --> 01:07:25,440
uh layer itself so

01:07:23,599 --> 01:07:27,280
um again again another one of those

01:07:25,440 --> 01:07:30,799
tools that's that's leveraging

01:07:27,280 --> 01:07:33,200
um the data that we provide

01:07:30,799 --> 01:07:33,839
now we'll take this a step further and

01:07:33,200 --> 01:07:36,960
and we

01:07:33,839 --> 01:07:40,720
we looked at the the os level data

01:07:36,960 --> 01:07:42,160
we looked at the application level data

01:07:40,720 --> 01:07:43,920
and really really encourage you no

01:07:42,160 --> 01:07:45,599
matter what what you're doing and what

01:07:43,920 --> 01:07:48,640
what tools you're using if you're

01:07:45,599 --> 01:07:49,839
using um javascript and python and the

01:07:48,640 --> 01:07:52,720
command tools

01:07:49,839 --> 01:07:54,400
uh take a look at those free tools and

01:07:52,720 --> 01:07:57,839
incorporate them into your

01:07:54,400 --> 01:07:57,839
uh into your process

01:08:00,000 --> 01:08:05,760
all right so

01:08:03,039 --> 01:08:06,559
the um the next thing we'll look at is

01:08:05,760 --> 01:08:08,960
well

01:08:06,559 --> 01:08:10,640
as an enterprise how can i extend this

01:08:08,960 --> 01:08:12,640
even further how can i get

01:08:10,640 --> 01:08:14,400
even better visibility and speed this

01:08:12,640 --> 01:08:17,120
process up right

01:08:14,400 --> 01:08:17,920
so um with the nexus platform we build

01:08:17,120 --> 01:08:19,759
on

01:08:17,920 --> 01:08:21,359
the tools that that we provided for the

01:08:19,759 --> 01:08:25,040
community

01:08:21,359 --> 01:08:26,319
we have human curated data source

01:08:25,040 --> 01:08:28,480
we're the first company to have a human

01:08:26,319 --> 01:08:30,319
curated data source um

01:08:28,480 --> 01:08:31,839
the you know ninety percent of the data

01:08:30,319 --> 01:08:34,880
that we have in in our

01:08:31,839 --> 01:08:37,199
uh our catalog is unique to uh to us

01:08:34,880 --> 01:08:38,960
again we have unique visibilities into a

01:08:37,199 --> 01:08:40,400
lot of the frameworks themselves so

01:08:38,960 --> 01:08:42,719
what does that really end up looking

01:08:40,400 --> 01:08:45,520
like for the the enterprise

01:08:42,719 --> 01:08:47,679
and it's uh again it follows what we've

01:08:45,520 --> 01:08:51,679
been doing on the open source side

01:08:47,679 --> 01:08:55,120
but let's take a look at an example here

01:08:51,679 --> 01:08:56,960
in um uh in eclipse right so

01:08:55,120 --> 01:08:59,600
from here i'm actually using the nexus

01:08:56,960 --> 01:09:00,400
platform similar tools to the the vs

01:08:59,600 --> 01:09:04,480
code

01:09:00,400 --> 01:09:07,600
but i'm evaluating this against a a um

01:09:04,480 --> 01:09:08,319
a custom set of policies right um i'm

01:09:07,600 --> 01:09:11,520
looking at the

01:09:08,319 --> 01:09:13,440
these policies in relation to uh

01:09:11,520 --> 01:09:14,560
the the application and application

01:09:13,440 --> 01:09:16,080
categories and we'll take a look at

01:09:14,560 --> 01:09:18,319
those here in a second

01:09:16,080 --> 01:09:19,600
but what i'm going to do now is say okay

01:09:18,319 --> 01:09:21,120
from an enterprise point of view

01:09:19,600 --> 01:09:22,719
what are some of the tools and the path

01:09:21,120 --> 01:09:24,400
that we can use and what

01:09:22,719 --> 01:09:26,159
what's the data source the first thing

01:09:24,400 --> 01:09:28,480
is all the colors you see here

01:09:26,159 --> 01:09:30,080
uh what does it really mean again we're

01:09:28,480 --> 01:09:31,279
we're based on policy let's take a look

01:09:30,080 --> 01:09:35,520
at that real quick

01:09:31,279 --> 01:09:37,839
when i um when i talk about policy

01:09:35,520 --> 01:09:39,199
i want to have a set of policies that

01:09:37,839 --> 01:09:41,520
work for

01:09:39,199 --> 01:09:43,120
all of my applications uh all of my

01:09:41,520 --> 01:09:44,560
languages

01:09:43,120 --> 01:09:46,880
all of the things that i care about

01:09:44,560 --> 01:09:50,000
security legal

01:09:46,880 --> 01:09:52,000
architecture project hygiene it isn't

01:09:50,000 --> 01:09:54,400
just about cves

01:09:52,000 --> 01:09:55,280
it's also understanding that

01:09:54,400 --> 01:09:58,320
applications have

01:09:55,280 --> 01:09:59,760
different requirements uh for the

01:09:58,320 --> 01:10:02,080
licensing that they have for the

01:09:59,760 --> 01:10:02,880
components for the level of risk for

01:10:02,080 --> 01:10:05,760
example

01:10:02,880 --> 01:10:07,040
the the copy left licenses you know if

01:10:05,760 --> 01:10:09,679
it's not distributed

01:10:07,040 --> 01:10:11,360
uh the copy left doesn't come into play

01:10:09,679 --> 01:10:11,840
again we'll see that within the pdf

01:10:11,360 --> 01:10:14,960
piece

01:10:11,840 --> 01:10:16,080
so i can take a hierarchical view of my

01:10:14,960 --> 01:10:17,520
organization my

01:10:16,080 --> 01:10:20,080
teams within my organization the

01:10:17,520 --> 01:10:20,880
applications and provide policy at each

01:10:20,080 --> 01:10:23,520
of the levels

01:10:20,880 --> 01:10:25,520
but really inheriting the most uh

01:10:23,520 --> 01:10:27,840
critical pieces of the policy

01:10:25,520 --> 01:10:29,199
and down here i've defined a number of

01:10:27,840 --> 01:10:31,040
policies these are actually out of the

01:10:29,199 --> 01:10:33,280
box policies

01:10:31,040 --> 01:10:34,560
and they cover security legal and

01:10:33,280 --> 01:10:36,719
architecture and

01:10:34,560 --> 01:10:39,040
malicious code but if we take a look at

01:10:36,719 --> 01:10:41,280
the one of the policies here

01:10:39,040 --> 01:10:43,120
i start to look at again this happens to

01:10:41,280 --> 01:10:44,400
be a security policy so we'll make it

01:10:43,120 --> 01:10:45,920
super simple and we're

01:10:44,400 --> 01:10:48,320
looking at a security vulnerability

01:10:45,920 --> 01:10:50,239
greater than 9.8

01:10:48,320 --> 01:10:52,159
but i can actually assign separate

01:10:50,239 --> 01:10:52,719
threat level to the organization so this

01:10:52,159 --> 01:10:55,199
is

01:10:52,719 --> 01:10:56,560
the the importance of the work that

01:10:55,199 --> 01:10:59,120
occurs

01:10:56,560 --> 01:10:59,679
in the the ides right so in the catalog

01:10:59,120 --> 01:11:01,600
and

01:10:59,679 --> 01:11:03,199
any reports that i have i'm gonna look

01:11:01,600 --> 01:11:04,080
at the the biggest threat to my

01:11:03,199 --> 01:11:06,239
organization

01:11:04,080 --> 01:11:08,400
first uh sorted that way and i'm gonna

01:11:06,239 --> 01:11:09,280
look at it against all my applications

01:11:08,400 --> 01:11:11,840
and and all the

01:11:09,280 --> 01:11:12,480
application categories um as you might

01:11:11,840 --> 01:11:14,800
imagine

01:11:12,480 --> 01:11:15,840
we've got a pretty robust set of uh

01:11:14,800 --> 01:11:18,080
conditions

01:11:15,840 --> 01:11:19,120
again not just about cbe but it's about

01:11:18,080 --> 01:11:21,520
popularity

01:11:19,120 --> 01:11:22,400
uh it's about the project hygiene rating

01:11:21,520 --> 01:11:24,320
right we

01:11:22,400 --> 01:11:26,080
look at the 2020 state of the software

01:11:24,320 --> 01:11:29,120
supply chain we um

01:11:26,080 --> 01:11:31,520
we evaluated hundreds and hundreds of

01:11:29,120 --> 01:11:33,760
projects on a core set of criteria

01:11:31,520 --> 01:11:34,719
that i'll show in a second that allows

01:11:33,760 --> 01:11:36,640
me to look at

01:11:34,719 --> 01:11:38,480
the project hygiene rating is this an

01:11:36,640 --> 01:11:40,000
exemplary project is it a laggard

01:11:38,480 --> 01:11:43,520
project

01:11:40,000 --> 01:11:44,159
the the key here is to create this list

01:11:43,520 --> 01:11:46,080
of

01:11:44,159 --> 01:11:48,880
policy for open source components and

01:11:46,080 --> 01:11:51,120
managing the dependencies that i have

01:11:48,880 --> 01:11:52,560
and not just managing a list of

01:11:51,120 --> 01:11:54,640
vulnerabilities

01:11:52,560 --> 01:11:55,600
and something unique to us that really

01:11:54,640 --> 01:11:57,360
makes this work

01:11:55,600 --> 01:11:59,600
in an enterprise across the the life

01:11:57,360 --> 01:12:01,440
cycle is

01:11:59,600 --> 01:12:02,880
we've talked about early in the process

01:12:01,440 --> 01:12:05,120
the build process the

01:12:02,880 --> 01:12:06,640
staging the release process well i don't

01:12:05,120 --> 01:12:09,440
necessarily want to take the same

01:12:06,640 --> 01:12:10,239
action at each of those uh each of those

01:12:09,440 --> 01:12:13,440
stages

01:12:10,239 --> 01:12:16,560
right the stages that i have here

01:12:13,440 --> 01:12:17,679
proxy is my firewall this is when when i

01:12:16,560 --> 01:12:20,480
connect

01:12:17,679 --> 01:12:22,239
the nexus platform to my repository

01:12:20,480 --> 01:12:25,199
manager whether it's artifactory or

01:12:22,239 --> 01:12:26,800
nexus repository manager i can have

01:12:25,199 --> 01:12:29,920
every component that's downloaded

01:12:26,800 --> 01:12:31,280
evaluated against my policies and decide

01:12:29,920 --> 01:12:33,920
whether i want to warn on that

01:12:31,280 --> 01:12:36,000
or fail it or quarantine it right so i'm

01:12:33,920 --> 01:12:38,000
actually shifting as far left as i can

01:12:36,000 --> 01:12:40,480
and blocking those components from

01:12:38,000 --> 01:12:43,360
coming in so that's why this first stage

01:12:40,480 --> 01:12:45,280
is fail if i don't have it already well

01:12:43,360 --> 01:12:47,920
don't let me get it if it's bad

01:12:45,280 --> 01:12:49,280
yes i can wave yes i can release it from

01:12:47,920 --> 01:12:51,360
quarantine

01:12:49,280 --> 01:12:52,960
and then i switch back to warren here in

01:12:51,360 --> 01:12:53,920
the develop and the build stage

01:12:52,960 --> 01:12:56,480
because i don't want to stop

01:12:53,920 --> 01:12:58,800
productivity right i want to be able to

01:12:56,480 --> 01:13:00,080
to have the development teams know that

01:12:58,800 --> 01:13:02,320
there's a problem

01:13:00,080 --> 01:13:03,120
be able to create a plan for remediating

01:13:02,320 --> 01:13:05,679
the problem

01:13:03,120 --> 01:13:06,480
and continue to work on valuable

01:13:05,679 --> 01:13:08,960
features

01:13:06,480 --> 01:13:10,719
right for my customers without having

01:13:08,960 --> 01:13:12,880
everything come to a grinding halt

01:13:10,719 --> 01:13:14,159
but if i start to get further down that

01:13:12,880 --> 01:13:16,239
release cycle and i'm

01:13:14,159 --> 01:13:18,159
in the release stage and i'm releasing

01:13:16,239 --> 01:13:20,000
something with a known vulnerability

01:13:18,159 --> 01:13:21,360
in it i may want to stop that process

01:13:20,000 --> 01:13:24,239
automatically

01:13:21,360 --> 01:13:25,360
right so um automating that process

01:13:24,239 --> 01:13:27,280
automating faster

01:13:25,360 --> 01:13:29,520
than evil so i can get these releases

01:13:27,280 --> 01:13:30,560
out as quickly as possible so i can

01:13:29,520 --> 01:13:32,960
identify

01:13:30,560 --> 01:13:34,320
the vulnerabilities that exist the other

01:13:32,960 --> 01:13:36,800
piece of that is

01:13:34,320 --> 01:13:37,679
not everybody is involved in every stage

01:13:36,800 --> 01:13:39,520
of

01:13:37,679 --> 01:13:40,960
the life cycle right the people that run

01:13:39,520 --> 01:13:41,520
the repository manager are different

01:13:40,960 --> 01:13:43,920
than

01:13:41,520 --> 01:13:44,640
the people that potentially run in

01:13:43,920 --> 01:13:46,880
production

01:13:44,640 --> 01:13:47,679
and do continuous monitoring on the itsm

01:13:46,880 --> 01:13:50,800
side

01:13:47,679 --> 01:13:53,760
right maybe the system on build is in

01:13:50,800 --> 01:13:56,560
jira stage and release is in service now

01:13:53,760 --> 01:13:58,480
so you want to have the ability to to

01:13:56,560 --> 01:14:00,960
integrate and notify

01:13:58,480 --> 01:14:01,840
different teams at different stages and

01:14:00,960 --> 01:14:04,960
you don't want to have

01:14:01,840 --> 01:14:06,400
multiple um you don't want to have

01:14:04,960 --> 01:14:06,800
multiple policies for each one of these

01:14:06,400 --> 01:14:08,560
so

01:14:06,800 --> 01:14:10,640
single policy identifying what we

01:14:08,560 --> 01:14:13,199
consider to be a threat

01:14:10,640 --> 01:14:15,679
and then applying that to um to the

01:14:13,199 --> 01:14:18,880
policy and then all the policy gets

01:14:15,679 --> 01:14:20,320
uh used in uh in the tools right so

01:14:18,880 --> 01:14:21,679
we'll see those in reports and and the

01:14:20,320 --> 01:14:25,040
ides

01:14:21,679 --> 01:14:27,920
that policy that we saw in vs code

01:14:25,040 --> 01:14:29,920
right vs codes talking to oss index and

01:14:27,920 --> 01:14:31,280
providing a default set of policies

01:14:29,920 --> 01:14:34,159
similar to this

01:14:31,280 --> 01:14:34,800
um and ranking that policy high medium

01:14:34,159 --> 01:14:38,080
or low

01:14:34,800 --> 01:14:39,840
and and providing um the developer

01:14:38,080 --> 01:14:41,360
the the notion of what do i work on next

01:14:39,840 --> 01:14:44,239
what's the most important thing

01:14:41,360 --> 01:14:45,600
to work on so let's see some of this

01:14:44,239 --> 01:14:49,040
policy in action real quick

01:14:45,600 --> 01:14:52,800
uh we saw it briefly in the ide itself

01:14:49,040 --> 01:14:54,320
right so within ide i'm listing

01:14:52,800 --> 01:14:57,199
direct dependencies transitor

01:14:54,320 --> 01:14:59,280
dependencies right now it's ordered by

01:14:57,199 --> 01:15:01,199
risk to the organization that the

01:14:59,280 --> 01:15:04,080
policies themselves

01:15:01,199 --> 01:15:06,400
it's the same application right so it

01:15:04,080 --> 01:15:09,280
there it is struts 2.5.10

01:15:06,400 --> 01:15:10,000
now uh some of the benefits that you see

01:15:09,280 --> 01:15:11,600
here is

01:15:10,000 --> 01:15:13,280
i don't really have to actually go ahead

01:15:11,600 --> 01:15:15,280
and pick and find

01:15:13,280 --> 01:15:16,800
a version that's going to work i want

01:15:15,280 --> 01:15:19,520
something that's going to tell me

01:15:16,800 --> 01:15:20,880
exactly which version i need to go to to

01:15:19,520 --> 01:15:24,159
match

01:15:20,880 --> 01:15:26,960
and meet my policy not security issues

01:15:24,159 --> 01:15:28,560
but policy as a whole i i don't want i

01:15:26,960 --> 01:15:29,760
don't want to have unpopular components

01:15:28,560 --> 01:15:31,760
i don't want to have old components

01:15:29,760 --> 01:15:33,120
so look at the policy look at security

01:15:31,760 --> 01:15:35,679
license and quality

01:15:33,120 --> 01:15:36,640
and then be able to provide me with uh

01:15:35,679 --> 01:15:39,760
the right version

01:15:36,640 --> 01:15:41,840
i can then click on the version migrate

01:15:39,760 --> 01:15:44,000
to that again same thing i did before

01:15:41,840 --> 01:15:44,880
solve a ton of the problems with just

01:15:44,000 --> 01:15:47,120
really

01:15:44,880 --> 01:15:48,560
a single upgrade yes i've got all this

01:15:47,120 --> 01:15:50,640
detail around

01:15:48,560 --> 01:15:52,080
the vulnerabilities exist and we'll see

01:15:50,640 --> 01:15:54,159
that uh as well

01:15:52,080 --> 01:15:56,239
but do i need do i need to dive into any

01:15:54,159 --> 01:16:00,320
of that if there is actually a version

01:15:56,239 --> 01:16:02,400
um that i can use uh itself here

01:16:00,320 --> 01:16:04,239
one of the things um we'll go back to

01:16:02,400 --> 01:16:07,280
our our log for j here

01:16:04,239 --> 01:16:10,400
um the uh

01:16:07,280 --> 01:16:12,320
both github and oss index and and

01:16:10,400 --> 01:16:13,679
the nexus platform say that uh the

01:16:12,320 --> 01:16:15,920
version of log4j

01:16:13,679 --> 01:16:16,800
core that we're using is bad we do

01:16:15,920 --> 01:16:19,679
recommend

01:16:16,800 --> 01:16:20,960
uh another version uh you'll see here in

01:16:19,679 --> 01:16:23,920
this version graph

01:16:20,960 --> 01:16:27,040
i've got popularity across the top so

01:16:23,920 --> 01:16:29,199
the most popular is 2.11.12

01:16:27,040 --> 01:16:31,120
but the one that's actually going to

01:16:29,199 --> 01:16:34,640
pass with no policy violations is going

01:16:31,120 --> 01:16:36,560
to be 2.13.12.

01:16:34,640 --> 01:16:38,719
we have a new version of our product

01:16:36,560 --> 01:16:40,400
called transit of solver that

01:16:38,719 --> 01:16:43,360
looks at this component and its

01:16:40,400 --> 01:16:45,360
dependencies and finds the next version

01:16:43,360 --> 01:16:48,719
uh or provides you the next version

01:16:45,360 --> 01:16:51,199
where the direct dependency and the um

01:16:48,719 --> 01:16:52,000
the transit dependencies uh are clean

01:16:51,199 --> 01:16:54,800
right um

01:16:52,000 --> 01:16:56,080
don't uh fail any policies the other

01:16:54,800 --> 01:17:00,239
piece of this is

01:16:56,080 --> 01:17:02,000
um great more you can tell me 2.13.12

01:17:00,239 --> 01:17:03,360
but you know what does that really mean

01:17:02,000 --> 01:17:04,719
for the developer how much work is going

01:17:03,360 --> 01:17:06,640
to be involved

01:17:04,719 --> 01:17:08,800
so we've incorporated a breaking changes

01:17:06,640 --> 01:17:11,120
where we're looking at the structure of

01:17:08,800 --> 01:17:12,239
the public apis of these open source

01:17:11,120 --> 01:17:15,440
components

01:17:12,239 --> 01:17:17,440
and looking at

01:17:15,440 --> 01:17:18,560
the number of changes between versions

01:17:17,440 --> 01:17:20,560
to really

01:17:18,560 --> 01:17:22,719
not tell you that it's going to break or

01:17:20,560 --> 01:17:24,719
not but how significant are those

01:17:22,719 --> 01:17:26,719
changes how how close are they

01:17:24,719 --> 01:17:27,920
uh to potentially breaking just in terms

01:17:26,719 --> 01:17:30,080
of the number

01:17:27,920 --> 01:17:31,199
um as you imagine the hundreds of

01:17:30,080 --> 01:17:31,760
thousands of components that we're

01:17:31,199 --> 01:17:32,960
looking at

01:17:31,760 --> 01:17:34,800
we're really just looking at those

01:17:32,960 --> 01:17:35,760
signatures looking at the changes in

01:17:34,800 --> 01:17:37,760
those signatures

01:17:35,760 --> 01:17:39,040
again to give the development team the

01:17:37,760 --> 01:17:42,159
ability to

01:17:39,040 --> 01:17:45,360
uh to weigh the cost of that upgrade

01:17:42,159 --> 01:17:48,400
right if i look at 2.13.2

01:17:45,360 --> 01:17:49,040
and um right now there's you know three

01:17:48,400 --> 01:17:52,080
or more

01:17:49,040 --> 01:17:52,560
um api changes in there i'm going to

01:17:52,080 --> 01:17:54,400
have to

01:17:52,560 --> 01:17:58,320
look at it a little bit longer than just

01:17:54,400 --> 01:18:00,080
say hey let me go to 2.13.2 because i

01:17:58,320 --> 01:18:01,600
don't have any policy violations

01:18:00,080 --> 01:18:03,199
i also want to see what's what's the

01:18:01,600 --> 01:18:06,000
work involved

01:18:03,199 --> 01:18:06,880
in that and you know as you start to

01:18:06,000 --> 01:18:08,880
look at

01:18:06,880 --> 01:18:10,640
different versions of the products how

01:18:08,880 --> 01:18:13,040
do they change between that version

01:18:10,640 --> 01:18:15,120
and the next version right so breaking

01:18:13,040 --> 01:18:18,640
changes don't just happen across

01:18:15,120 --> 01:18:20,560
major major version numbers

01:18:18,640 --> 01:18:22,320
right you want to know when those when

01:18:20,560 --> 01:18:24,640
those changes are happening so

01:18:22,320 --> 01:18:25,360
um including that so that the developer

01:18:24,640 --> 01:18:27,199
here

01:18:25,360 --> 01:18:28,800
can make those decisions again they're

01:18:27,199 --> 01:18:31,440
going to be the most intimate with the

01:18:28,800 --> 01:18:32,800
the product they're right here in the

01:18:31,440 --> 01:18:35,679
product that can actually

01:18:32,800 --> 01:18:36,400
uh look at the code um and follow the

01:18:35,679 --> 01:18:40,159
paths

01:18:36,400 --> 01:18:41,920
uh through it so all of the all the data

01:18:40,159 --> 01:18:44,480
here is really pushing me towards

01:18:41,920 --> 01:18:46,239
solving the problem quickly uh on the

01:18:44,480 --> 01:18:47,840
developer side again don't

01:18:46,239 --> 01:18:49,360
worry about yes i can do automated pull

01:18:47,840 --> 01:18:52,960
requests yes um

01:18:49,360 --> 01:18:54,880
i can have um the systems recommend

01:18:52,960 --> 01:18:56,159
certain versions again automated pull

01:18:54,880 --> 01:18:56,560
requests and those things aren't going

01:18:56,159 --> 01:18:57,679
to see

01:18:56,560 --> 01:19:00,400
they're going to see the exact same

01:18:57,679 --> 01:19:02,159
thing that um that github saw

01:19:00,400 --> 01:19:03,840
and actually aren't going to recommend

01:19:02,159 --> 01:19:04,400
upgrading the struts component which is

01:19:03,840 --> 01:19:07,520
the

01:19:04,400 --> 01:19:10,560
the most important component here

01:19:07,520 --> 01:19:10,960
so um just like we did before we could

01:19:10,560 --> 01:19:14,960
say

01:19:10,960 --> 01:19:19,440
we could upgrade this go to

01:19:14,960 --> 01:19:19,440
another version and have it

01:19:20,080 --> 01:19:23,920
have it show the the updated uh

01:19:22,560 --> 01:19:27,199
components

01:19:23,920 --> 01:19:28,080
all right now uh before i do that a

01:19:27,199 --> 01:19:31,280
couple of other

01:19:28,080 --> 01:19:32,560
things in this list the way that um

01:19:31,280 --> 01:19:35,280
the way that you're looking at the

01:19:32,560 --> 01:19:37,920
components changes as well right so

01:19:35,280 --> 01:19:39,440
for a number of the systems that we

01:19:37,920 --> 01:19:42,640
support

01:19:39,440 --> 01:19:44,560
we do binary identification of the

01:19:42,640 --> 01:19:47,679
components so it's not just

01:19:44,560 --> 01:19:48,960
the uh the the palm file yes we can see

01:19:47,679 --> 01:19:52,560
the palm file remember

01:19:48,960 --> 01:19:54,400
here's my palm file uh here's my low g i

01:19:52,560 --> 01:19:56,080
text 4.2.2

01:19:54,400 --> 01:19:57,760
dependency management's harder than this

01:19:56,080 --> 01:20:00,880
right we know

01:19:57,760 --> 01:20:01,520
that um i used maven to download this i

01:20:00,880 --> 01:20:04,880
used maven

01:20:01,520 --> 01:20:05,600
to build this project as i start to look

01:20:04,880 --> 01:20:08,719
at it

01:20:05,600 --> 01:20:10,320
right here's itex pdf 5.5.6 and if i

01:20:08,719 --> 01:20:13,760
were to look through this list

01:20:10,320 --> 01:20:16,000
i wouldn't see itex 4.2.2 here

01:20:13,760 --> 01:20:16,960
right the reason that itexpdf is in this

01:20:16,000 --> 01:20:18,960
list

01:20:16,960 --> 01:20:20,480
is because it's got a set of security

01:20:18,960 --> 01:20:22,480
vulnerabilities but also

01:20:20,480 --> 01:20:24,719
a license vulnerability right it's it's

01:20:22,480 --> 01:20:28,639
a copy left it's distributed

01:20:24,719 --> 01:20:30,560
um why don't i see 4.2.2 well

01:20:28,639 --> 01:20:33,199
the nature of these the package

01:20:30,560 --> 01:20:34,719
management systems is if this company

01:20:33,199 --> 01:20:37,040
wants to change its name and change its

01:20:34,719 --> 01:20:38,320
version number it can and this is what

01:20:37,040 --> 01:20:40,000
they want to do they have new vp of

01:20:38,320 --> 01:20:43,679
sales and they want to make money

01:20:40,000 --> 01:20:46,880
uh it's used i see it almost at

01:20:43,679 --> 01:20:48,239
every customer uh at some level but when

01:20:46,880 --> 01:20:51,920
you're building the tool

01:20:48,239 --> 01:20:54,159
uh and as i built my tool the

01:20:51,920 --> 01:20:55,920
as i built the the application here we

01:20:54,159 --> 01:20:58,800
can look at the the output

01:20:55,920 --> 01:21:00,239
and what what's happening is and we'll

01:20:58,800 --> 01:21:02,719
do it here in a second

01:21:00,239 --> 01:21:04,320
i'm pulling these components from my

01:21:02,719 --> 01:21:07,679
open source repository

01:21:04,320 --> 01:21:11,280
and it actually switches um to use

01:21:07,679 --> 01:21:15,679
uh the itex pdf instead of the

01:21:11,280 --> 01:21:18,880
um the low g4 4.4.2

01:21:15,679 --> 01:21:20,320
but the application um knows this right

01:21:18,880 --> 01:21:21,760
the nexus platform knows this

01:21:20,320 --> 01:21:24,080
it's going to provide me the information

01:21:21,760 --> 01:21:26,480
around the component that i'm using

01:21:24,080 --> 01:21:27,600
so one of the the things that we really

01:21:26,480 --> 01:21:30,000
really care about is

01:21:27,600 --> 01:21:31,120
being able to fix this early and fix it

01:21:30,000 --> 01:21:32,560
with the components that we know

01:21:31,120 --> 01:21:34,560
are going to be put into the the

01:21:32,560 --> 01:21:35,760
application and later on in the process

01:21:34,560 --> 01:21:36,960
we'll see how we break those

01:21:35,760 --> 01:21:39,440
applications apart

01:21:36,960 --> 01:21:41,600
and view the contents of um of those

01:21:39,440 --> 01:21:43,360
applications

01:21:41,600 --> 01:21:44,719
if i want to solve this problem even

01:21:43,360 --> 01:21:46,960
further left remember i

01:21:44,719 --> 01:21:49,840
i had to build the application first so

01:21:46,960 --> 01:21:52,960
i actually needed to

01:21:49,840 --> 01:21:52,960
to remove my

01:21:53,520 --> 01:21:59,920
i had to remove my settings file

01:21:56,560 --> 01:22:03,760
so i'm actually going to copy over my

01:21:59,920 --> 01:22:11,840
settings so that

01:22:03,760 --> 01:22:11,840
this nexus um

01:22:13,760 --> 01:22:16,400
settings

01:22:20,400 --> 01:22:28,560
xml xml all right

01:22:25,120 --> 01:22:30,080
so um as you're as you're doing this and

01:22:28,560 --> 01:22:33,120
building the applications

01:22:30,080 --> 01:22:35,360
when i do that and i build against um

01:22:33,120 --> 01:22:36,239
that settings.xml file you'll see the

01:22:35,360 --> 01:22:38,719
results here

01:22:36,239 --> 01:22:40,400
right it actually downloaded or went to

01:22:38,719 --> 01:22:41,120
my repository manager pulled down the

01:22:40,400 --> 01:22:43,040
components

01:22:41,120 --> 01:22:44,480
but i actually couldn't finish building

01:22:43,040 --> 01:22:47,520
the the component

01:22:44,480 --> 01:22:49,120
the project because i couldn't get the

01:22:47,520 --> 01:22:50,960
components i needed

01:22:49,120 --> 01:22:53,040
to finish the build which components

01:22:50,960 --> 01:22:54,880
could i get well i couldn't get the log

01:22:53,040 --> 01:22:56,480
for j which everybody said was bad and i

01:22:54,880 --> 01:22:59,199
couldn't get for the struts

01:22:56,480 --> 01:23:00,719
uh two core jar um which was bad so

01:22:59,199 --> 01:23:02,239
we've quarantined those and then there's

01:23:00,719 --> 01:23:02,960
this other rich faces core that's been

01:23:02,239 --> 01:23:05,440
quarantined

01:23:02,960 --> 01:23:06,000
so this is it this is an example where

01:23:05,440 --> 01:23:09,679
based on

01:23:06,000 --> 01:23:14,159
that policy that we had right

01:23:09,679 --> 01:23:15,840
in my um in my nexus platform

01:23:14,159 --> 01:23:17,120
i quarantined those components and

01:23:15,840 --> 01:23:17,840
blocked those components from being

01:23:17,120 --> 01:23:19,600
downloaded

01:23:17,840 --> 01:23:21,280
preventing the the application from

01:23:19,600 --> 01:23:24,000
being being built

01:23:21,280 --> 01:23:26,000
this is important when um i've got you

01:23:24,000 --> 01:23:26,800
know a thousand engineers or 500

01:23:26,000 --> 01:23:28,719
engineers and

01:23:26,800 --> 01:23:31,199
and i want to automate this process

01:23:28,719 --> 01:23:33,520
right i don't want every developer from

01:23:31,199 --> 01:23:35,040
their home office going to the public

01:23:33,520 --> 01:23:36,800
internet and downloading those i want to

01:23:35,040 --> 01:23:38,400
be able to control that

01:23:36,800 --> 01:23:39,600
and give them the best components or

01:23:38,400 --> 01:23:40,320
block the best components and you can

01:23:39,600 --> 01:23:44,080
see that

01:23:40,320 --> 01:23:45,679
uh see that actually happening here uh

01:23:44,080 --> 01:23:47,120
a little time check so just a couple

01:23:45,679 --> 01:23:50,639
more minutes at the end

01:23:47,120 --> 01:23:54,159
we looked at early early in the ide

01:23:50,639 --> 01:23:58,239
the um we come back to

01:23:54,159 --> 01:24:00,159
looking at this org.apache.struts

01:23:58,239 --> 01:24:02,719
when we start to look at how can i find

01:24:00,159 --> 01:24:04,320
out which version i want to use

01:24:02,719 --> 01:24:05,760
we have a component research plug-in

01:24:04,320 --> 01:24:09,280
that allows me to

01:24:05,760 --> 01:24:12,320
know where i'm looking at in any of the

01:24:09,280 --> 01:24:14,239
the product or the

01:24:12,320 --> 01:24:15,679
dependency management systems and say

01:24:14,239 --> 01:24:17,840
okay i'm in maven central

01:24:15,679 --> 01:24:20,880
i notice that you're trying to look at

01:24:17,840 --> 01:24:23,360
actually 2.5.10

01:24:20,880 --> 01:24:25,760
all right we'll go back to 2.5. well any

01:24:23,360 --> 01:24:28,000
of these 2.5.12 2.5.10.

01:24:25,760 --> 01:24:29,440
you see the exclamation point i can then

01:24:28,000 --> 01:24:31,920
come over

01:24:29,440 --> 01:24:32,719
i can view the details i can view the

01:24:31,920 --> 01:24:34,159
security

01:24:32,719 --> 01:24:36,239
and i really don't care about the

01:24:34,159 --> 01:24:37,679
security pieces if i can click on the

01:24:36,239 --> 01:24:40,639
remediation tab

01:24:37,679 --> 01:24:42,239
and select a version and not ever having

01:24:40,639 --> 01:24:43,440
to bring that bad component into my

01:24:42,239 --> 01:24:47,520
environment

01:24:43,440 --> 01:24:50,880
right on the on the build system side

01:24:47,520 --> 01:24:52,159
if we want to take a look at um the the

01:24:50,880 --> 01:24:55,360
results of a

01:24:52,159 --> 01:24:58,159
build itself right so in my pipeline

01:24:55,360 --> 01:24:59,440
being able to see the results of those

01:24:58,159 --> 01:25:02,800
policy violations

01:24:59,440 --> 01:25:04,560
being able to launch a report

01:25:02,800 --> 01:25:06,719
similar to what the developer seen in

01:25:04,560 --> 01:25:09,040
there and giving them all the detail

01:25:06,719 --> 01:25:10,880
i want to be able to we'll come in and

01:25:09,040 --> 01:25:13,280
view this here

01:25:10,880 --> 01:25:14,639
all of my applications here we'll look

01:25:13,280 --> 01:25:17,920
at

01:25:14,639 --> 01:25:20,159
um my application here i

01:25:17,920 --> 01:25:21,760
actually have uh that same list that

01:25:20,159 --> 01:25:23,840
same bill of materials here i can see

01:25:21,760 --> 01:25:25,920
what's direct and what's transitive

01:25:23,840 --> 01:25:27,679
i can see the policy violation right

01:25:25,920 --> 01:25:30,320
here's the itex pdf that's

01:25:27,679 --> 01:25:31,040
sitting right there at the top but

01:25:30,320 --> 01:25:34,320
here's my

01:25:31,040 --> 01:25:35,840
struts2 core here i get a little bit

01:25:34,320 --> 01:25:38,320
more information

01:25:35,840 --> 01:25:39,120
what actually brought this component in

01:25:38,320 --> 01:25:41,440
are there any

01:25:39,120 --> 01:25:42,480
versions of this that don't break uh my

01:25:41,440 --> 01:25:44,639
build

01:25:42,480 --> 01:25:45,920
what policies are there again i can

01:25:44,639 --> 01:25:48,480
drill into

01:25:45,920 --> 01:25:49,520
uh the vulnerabilities themselves right

01:25:48,480 --> 01:25:52,480
and get the deep

01:25:49,520 --> 01:25:53,280
level uh insight that our data team

01:25:52,480 --> 01:25:56,320
provides

01:25:53,280 --> 01:25:58,320
right the whole goal here is to remove

01:25:56,320 --> 01:26:00,639
uh false positives and false negatives

01:25:58,320 --> 01:26:04,000
so looking at the changes that are made

01:26:00,639 --> 01:26:05,600
updating the the root cause for example

01:26:04,000 --> 01:26:08,480
if i do my scan and i don't see this

01:26:05,600 --> 01:26:11,679
component been in this version range

01:26:08,480 --> 01:26:13,440
that i'm not gonna um i'm not gonna flag

01:26:11,679 --> 01:26:16,560
that

01:26:13,440 --> 01:26:18,239
that vulnerability now interesting here

01:26:16,560 --> 01:26:20,000
this is the same list that we have over

01:26:18,239 --> 01:26:21,920
in our ide but we're gonna take a look

01:26:20,000 --> 01:26:24,800
at something we're gonna look at

01:26:21,920 --> 01:26:25,920
the uh we'll take a look at the stretch

01:26:24,800 --> 01:26:26,639
2 core again

01:26:25,920 --> 01:26:29,360
and we're going to look at the

01:26:26,639 --> 01:26:31,360
occurrences here now

01:26:29,360 --> 01:26:33,440
the currency says it's a jar file

01:26:31,360 --> 01:26:34,960
located in the war file

01:26:33,440 --> 01:26:36,639
right in the lib directory and this is

01:26:34,960 --> 01:26:37,040
where java applications actually store

01:26:36,639 --> 01:26:39,199
their

01:26:37,040 --> 01:26:41,440
their jar file so this version of the

01:26:39,199 --> 01:26:43,440
report was generated by breaking open

01:26:41,440 --> 01:26:47,120
that war file during the build process

01:26:43,440 --> 01:26:49,840
identifying all the binary archives

01:26:47,120 --> 01:26:50,560
taking a hash of that and identifying

01:26:49,840 --> 01:26:54,639
this

01:26:50,560 --> 01:26:56,159
uh this file as struts core 2.5.10

01:26:54,639 --> 01:26:58,639
so in some of the other languages we'll

01:26:56,159 --> 01:26:59,600
compare that with the the manifest file

01:26:58,639 --> 01:27:02,880
and and give a

01:26:59,600 --> 01:27:04,320
a more robust view and confirming yep

01:27:02,880 --> 01:27:07,120
the same things in the manifest file

01:27:04,320 --> 01:27:09,440
that's in the uh the application itself

01:27:07,120 --> 01:27:10,320
but the goal here is again this is

01:27:09,440 --> 01:27:12,719
what's actually

01:27:10,320 --> 01:27:14,560
in the application this is the thing

01:27:12,719 --> 01:27:15,840
that's going to get added to my docker

01:27:14,560 --> 01:27:17,920
container

01:27:15,840 --> 01:27:20,159
and if i scan my docker container which

01:27:17,920 --> 01:27:21,840
i can i break it open and find all the

01:27:20,159 --> 01:27:22,800
the chart i'm going to see the same jar

01:27:21,840 --> 01:27:25,199
and i'm going to generate

01:27:22,800 --> 01:27:27,360
essentially the same report from the the

01:27:25,199 --> 01:27:30,719
application at the container level

01:27:27,360 --> 01:27:33,120
right the benefits to this are i could

01:27:30,719 --> 01:27:34,320
change the name of this file that gets

01:27:33,120 --> 01:27:36,239
deployed

01:27:34,320 --> 01:27:37,600
but the nexus platform is still going to

01:27:36,239 --> 01:27:38,960
say oh hey by the way we

01:27:37,600 --> 01:27:41,520
really think this is stretch 2 core

01:27:38,960 --> 01:27:43,280
because the hash is exactly the same

01:27:41,520 --> 01:27:44,960
if hashes are similar we'll actually

01:27:43,280 --> 01:27:48,159
identify that as well

01:27:44,960 --> 01:27:49,280
so again bringing this level of

01:27:48,159 --> 01:27:50,719
visibility

01:27:49,280 --> 01:27:52,719
everywhere in the software development

01:27:50,719 --> 01:27:53,920
life cycle right so the developers have

01:27:52,719 --> 01:27:56,880
it in their ides

01:27:53,920 --> 01:27:58,639
i can have this report straight from the

01:27:56,880 --> 01:28:00,639
the build process

01:27:58,639 --> 01:28:02,239
right inside my jenkins and have those

01:28:00,639 --> 01:28:05,280
reports associated with

01:28:02,239 --> 01:28:07,280
uh the builds and knowing the the

01:28:05,280 --> 01:28:09,360
visibility that i have is about

01:28:07,280 --> 01:28:10,719
uh the application that that has been

01:28:09,360 --> 01:28:12,639
built right

01:28:10,719 --> 01:28:14,960
and giving me all the details i need to

01:28:12,639 --> 01:28:16,880
actually fix the problem

01:28:14,960 --> 01:28:19,199
uh in the last three in the last three

01:28:16,880 --> 01:28:21,360
minutes we'll talk about scale

01:28:19,199 --> 01:28:23,040
if i'm if i'm doing this and i'm using

01:28:21,360 --> 01:28:25,360
components across

01:28:23,040 --> 01:28:27,199
the same applications in my organization

01:28:25,360 --> 01:28:29,280
i really probably want to be able to

01:28:27,199 --> 01:28:32,000
manage dependencies and manage

01:28:29,280 --> 01:28:33,760
vulnerabilities and policy violations

01:28:32,000 --> 01:28:35,679
across my applications

01:28:33,760 --> 01:28:37,120
because i don't want to just handle each

01:28:35,679 --> 01:28:39,760
one of these as a one-off

01:28:37,120 --> 01:28:40,320
so coming up to the dashboard i can look

01:28:39,760 --> 01:28:41,920
at

01:28:40,320 --> 01:28:43,679
what are the riskiest components in my

01:28:41,920 --> 01:28:46,400
organization right

01:28:43,679 --> 01:28:47,360
struts 2.5.10 i have a lot of them that

01:28:46,400 --> 01:28:50,320
means the risk

01:28:47,360 --> 01:28:52,320
goes up but with a single click i can

01:28:50,320 --> 01:28:55,360
find every place i found

01:28:52,320 --> 01:28:57,280
that that version of struts what

01:28:55,360 --> 01:28:58,960
application what version of the build

01:28:57,280 --> 01:29:00,719
so i can start to look at the risk to

01:28:58,960 --> 01:29:02,560
the organization but more important

01:29:00,719 --> 01:29:03,920
importantly i can start to look at

01:29:02,560 --> 01:29:05,840
remediation paths

01:29:03,920 --> 01:29:07,600
that involve all of the applications and

01:29:05,840 --> 01:29:10,400
not just individual

01:29:07,600 --> 01:29:11,840
applications and one-offs and the the

01:29:10,400 --> 01:29:13,600
last thing

01:29:11,840 --> 01:29:15,199
as we start to look at digital

01:29:13,600 --> 01:29:16,400
transformation we've been doing it for a

01:29:15,199 --> 01:29:18,880
while now

01:29:16,400 --> 01:29:21,040
but executives are starting to look at

01:29:18,880 --> 01:29:24,080
digital transformation in terms of

01:29:21,040 --> 01:29:26,560
compliance adoption quality

01:29:24,080 --> 01:29:28,159
and performance right how many of my

01:29:26,560 --> 01:29:29,760
teams are actually doing digital

01:29:28,159 --> 01:29:31,440
transformation how many are actually

01:29:29,760 --> 01:29:33,440
adopting the best practice

01:29:31,440 --> 01:29:35,840
right so i want to be able to look at an

01:29:33,440 --> 01:29:39,199
application view and start to see

01:29:35,840 --> 01:29:39,840
our teams looking at their bill of

01:29:39,199 --> 01:29:41,199
materials

01:29:39,840 --> 01:29:42,880
their open source components are they

01:29:41,199 --> 01:29:44,639
managing their dependencies are they

01:29:42,880 --> 01:29:46,560
looking at the same application

01:29:44,639 --> 01:29:48,400
in different stages of the life cycle

01:29:46,560 --> 01:29:51,600
because yes open source components

01:29:48,400 --> 01:29:55,440
can be added to your application right

01:29:51,600 --> 01:29:58,560
i put my war file in my docker file

01:29:55,440 --> 01:30:00,800
well what if i were to um um

01:29:58,560 --> 01:30:02,159
dump a new relic agent in there as well

01:30:00,800 --> 01:30:04,239
don't i want to know

01:30:02,159 --> 01:30:05,840
the the contents of the new relic

01:30:04,239 --> 01:30:08,960
package and the open source risk

01:30:05,840 --> 01:30:11,440
absolutely so adoption is uh

01:30:08,960 --> 01:30:13,199
all of my applications all of the the

01:30:11,440 --> 01:30:14,159
stages of my applications are really

01:30:13,199 --> 01:30:15,679
starting to see

01:30:14,159 --> 01:30:18,719
quality and performance get better i

01:30:15,679 --> 01:30:21,840
should be able to get faster resolving

01:30:18,719 --> 01:30:22,320
and remediating and my quality needs to

01:30:21,840 --> 01:30:24,239
be

01:30:22,320 --> 01:30:26,080
better right am i reducing the mean time

01:30:24,239 --> 01:30:28,159
to resolution mean time to repair

01:30:26,080 --> 01:30:30,239
and then i'm looking at this again uh

01:30:28,159 --> 01:30:32,480
holistically across the environment

01:30:30,239 --> 01:30:34,320
and the last thing i'll end with is uh

01:30:32,480 --> 01:30:36,960
the continuous monitoring piece

01:30:34,320 --> 01:30:39,199
right if i look at my reports here uh

01:30:36,960 --> 01:30:42,800
i've got a bunch of reports that don't

01:30:39,199 --> 01:30:43,199
um that don't uh build all the time

01:30:42,800 --> 01:30:44,719
right

01:30:43,199 --> 01:30:46,480
so if i've got applications that are in

01:30:44,719 --> 01:30:48,239
maintenance mode for example i still

01:30:46,480 --> 01:30:49,120
want to have the ability to continuously

01:30:48,239 --> 01:30:52,400
monitor them

01:30:49,120 --> 01:30:54,480
so a system like nexus platform can be

01:30:52,400 --> 01:30:57,360
set up to look at a specific stage

01:30:54,480 --> 01:30:57,760
and every scan that's ever been done

01:30:57,360 --> 01:30:59,679
right

01:30:57,760 --> 01:31:02,159
that latest scan can be evaluated

01:30:59,679 --> 01:31:03,440
against uh the latest data every night

01:31:02,159 --> 01:31:04,639
without having to go through the build

01:31:03,440 --> 01:31:05,600
process right we have a bill of

01:31:04,639 --> 01:31:07,520
materials

01:31:05,600 --> 01:31:09,280
we compare that bill of materials to the

01:31:07,520 --> 01:31:12,719
the newest data

01:31:09,280 --> 01:31:14,800
that newest data again human curated

01:31:12,719 --> 01:31:16,159
and so every night you know you've got

01:31:14,800 --> 01:31:18,800
the most recent data

01:31:16,159 --> 01:31:20,719
and the most uh up-to-date vulnerability

01:31:18,800 --> 01:31:24,080
information and policy information

01:31:20,719 --> 01:31:26,480
against all of the applications so uh

01:31:24,080 --> 01:31:27,840
let me stop there um it was great

01:31:26,480 --> 01:31:28,960
spending two hours with you i'll give

01:31:27,840 --> 01:31:30,719
this back to

01:31:28,960 --> 01:31:32,400
katie i know they're doing 15 minute

01:31:30,719 --> 01:31:40,480
breaks in between and

01:31:32,400 --> 01:31:40,480

YouTube URL: https://www.youtube.com/watch?v=FBRF957J9PY


