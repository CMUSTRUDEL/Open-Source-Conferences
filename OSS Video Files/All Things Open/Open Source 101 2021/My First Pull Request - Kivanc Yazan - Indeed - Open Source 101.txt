Title: My First Pull Request - Kivanc Yazan - Indeed - Open Source 101
Publication date: 2021-04-10
Playlist: Open Source 101 2021
Description: 
	Kivanc Yazan, Software Engineer at Indeed, delivered the talk "My First Pull Request" at the Open Source 101 conference on Tuesday, March 30, 2021.

Abstract:
This beginner-friendly talk will introduce the audience to the world of Open Source, git, and pull requests.

A pull request is usually a patch of the test, code, or documentation. It is usually submitted with a description and sometimes comes with a discussion. While many projects prefer using platforms like GitHub and GitLab, some are sharing patches via email.

The talk will include a demo of a pull request being submitted and merged. It will end with pointing users into finding the first project to contribute to.

Kivanc on the internets:
Twitter: https://twitter.com/kyznorg
LinkedIn: https://www.linkedin.com/in/kivancyazan/
GitHub: https://github.com/kyzn
Personal website: https://kyzn.org/
Captions: 
	00:00:04,880 --> 00:00:09,360
hi everyone uh

00:00:06,000 --> 00:00:11,920
thanks for joining um this is kievan

00:00:09,360 --> 00:00:12,799
today i'm going to talk about my first

00:00:11,920 --> 00:00:15,200
request

00:00:12,799 --> 00:00:17,680
and this is really uh going to be a talk

00:00:15,200 --> 00:00:20,080
about um you know introduction to

00:00:17,680 --> 00:00:20,800
the world of open source uh introduction

00:00:20,080 --> 00:00:24,320
to git

00:00:20,800 --> 00:00:27,680
and and pull requests and whatnot

00:00:24,320 --> 00:00:30,400
so if you consider yourself a beginner

00:00:27,680 --> 00:00:31,439
i hope you will find a lot of useful

00:00:30,400 --> 00:00:34,800
stuff

00:00:31,439 --> 00:00:36,320
in this presentation and if you consider

00:00:34,800 --> 00:00:39,200
yourself an experienced

00:00:36,320 --> 00:00:40,480
seasoned developer i still hope you will

00:00:39,200 --> 00:00:44,640
find

00:00:40,480 --> 00:00:48,399
some stuff that you find useful

00:00:44,640 --> 00:00:51,680
slides are already available at this url

00:00:48,399 --> 00:00:51,680
and let's get started

00:00:52,160 --> 00:00:58,960
so i want to start with actually

00:00:55,280 --> 00:01:01,199
showing my first pro request to give you

00:00:58,960 --> 00:01:04,479
a little bit of background

00:01:01,199 --> 00:01:07,040
i was still a student in college i had

00:01:04,479 --> 00:01:09,840
no professional experience whatsoever

00:01:07,040 --> 00:01:11,600
so i had no self-confidence in

00:01:09,840 --> 00:01:13,520
contributing to

00:01:11,600 --> 00:01:15,759
an already established open source

00:01:13,520 --> 00:01:18,320
project

00:01:15,759 --> 00:01:19,759
but i still wanted to do something and

00:01:18,320 --> 00:01:22,960
one day i realized

00:01:19,759 --> 00:01:24,479
one of the applications i was using was

00:01:22,960 --> 00:01:27,520
an open source project

00:01:24,479 --> 00:01:29,680
that's available uh on github.com and it

00:01:27,520 --> 00:01:31,040
was accepting uh merge requests uh pull

00:01:29,680 --> 00:01:34,960
requests

00:01:31,040 --> 00:01:37,280
um and i i realized that the application

00:01:34,960 --> 00:01:38,960
was translated it was already translated

00:01:37,280 --> 00:01:42,240
to multiple languages

00:01:38,960 --> 00:01:43,759
but turkish my first language was not

00:01:42,240 --> 00:01:46,079
there yet so i figured okay

00:01:43,759 --> 00:01:48,159
this is this is a good chance for me uh

00:01:46,079 --> 00:01:50,159
i should give this a try

00:01:48,159 --> 00:01:51,680
and what i did was i translated the app

00:01:50,159 --> 00:01:54,479
into turkish it was only

00:01:51,680 --> 00:01:55,600
a number of strings anyway but it was a

00:01:54,479 --> 00:01:58,560
great experience for me

00:01:55,600 --> 00:02:00,880
um and i submitted a pull request and

00:01:58,560 --> 00:02:04,079
the pull request got merged and i

00:02:00,880 --> 00:02:05,200
got a message from the maintainer saying

00:02:04,079 --> 00:02:08,239
thank you

00:02:05,200 --> 00:02:08,959
so that was a great experience for me i

00:02:08,239 --> 00:02:12,959
felt like a

00:02:08,959 --> 00:02:15,840
like a happiness i felt super happy

00:02:12,959 --> 00:02:16,239
because the the patch that i had written

00:02:15,840 --> 00:02:18,480
uh

00:02:16,239 --> 00:02:19,920
is now shipped to the people who are

00:02:18,480 --> 00:02:21,599
using this app

00:02:19,920 --> 00:02:23,120
i don't really know how many people

00:02:21,599 --> 00:02:25,040
ended up using

00:02:23,120 --> 00:02:26,400
this particular application in turkish

00:02:25,040 --> 00:02:29,520
honestly

00:02:26,400 --> 00:02:31,440
but i it still felt great and i um

00:02:29,520 --> 00:02:33,120
i kept doing it i kept submitting

00:02:31,440 --> 00:02:35,200
requests to

00:02:33,120 --> 00:02:37,440
other applications as well so the whole

00:02:35,200 --> 00:02:39,360
point of this presentation is kind of

00:02:37,440 --> 00:02:40,959
give you the motivation uh the

00:02:39,360 --> 00:02:44,480
encouragement

00:02:40,959 --> 00:02:46,560
and give you the basics of the tools uh

00:02:44,480 --> 00:02:48,640
for you to do it as well so i want you

00:02:46,560 --> 00:02:50,720
to give this a try as well

00:02:48,640 --> 00:02:53,680
and see if you like it and if you like

00:02:50,720 --> 00:02:53,680
it you can keep doing

00:02:54,080 --> 00:02:57,120
this is the outline of the talk i will

00:02:56,480 --> 00:03:00,720
talk

00:02:57,120 --> 00:03:01,920
a little about basics of open source and

00:03:00,720 --> 00:03:04,000
licenses

00:03:01,920 --> 00:03:06,400
uh i'll talk a little about source

00:03:04,000 --> 00:03:08,640
control uh pull requests

00:03:06,400 --> 00:03:09,519
uh and then i'll do a demo and then i'll

00:03:08,640 --> 00:03:13,040
close with

00:03:09,519 --> 00:03:15,040
um some notes as well um

00:03:13,040 --> 00:03:16,879
unfortunately i think this presentation

00:03:15,040 --> 00:03:19,680
will take

00:03:16,879 --> 00:03:21,200
pretty much the entire allocated time so

00:03:19,680 --> 00:03:21,840
if you have any questions i will leave

00:03:21,200 --> 00:03:25,599
my

00:03:21,840 --> 00:03:27,599
email address in the chat of the zoom

00:03:25,599 --> 00:03:29,680
feel free to connect with me there or

00:03:27,599 --> 00:03:31,680
you can also submit you can also

00:03:29,680 --> 00:03:33,840
chat with me in the conference lobby as

00:03:31,680 --> 00:03:33,840
well

00:03:34,000 --> 00:03:39,840
before i go into the

00:03:37,040 --> 00:03:41,519
definition of open source and and the

00:03:39,840 --> 00:03:43,760
details about licenses i

00:03:41,519 --> 00:03:45,440
want to tell you that i'm not a lawyer

00:03:43,760 --> 00:03:48,400
and this is not a legal advice

00:03:45,440 --> 00:03:48,959
so if you are looking for professional

00:03:48,400 --> 00:03:50,720
help

00:03:48,959 --> 00:03:53,120
with regards to licenses you should

00:03:50,720 --> 00:03:56,239
probably get it from a professional

00:03:53,120 --> 00:03:58,840
uh with that out of the way let me start

00:03:56,239 --> 00:04:01,519
with terminology

00:03:58,840 --> 00:04:02,319
what um so these are some of the things

00:04:01,519 --> 00:04:04,720
that i found

00:04:02,319 --> 00:04:06,400
are worth highlighting uh for this

00:04:04,720 --> 00:04:08,239
introductory talk

00:04:06,400 --> 00:04:10,239
and these are some of the things that i

00:04:08,239 --> 00:04:13,439
had a little hard time

00:04:10,239 --> 00:04:14,239
understanding differentiating i had some

00:04:13,439 --> 00:04:17,199
misconceptions

00:04:14,239 --> 00:04:18,959
about so for example open source what

00:04:17,199 --> 00:04:20,160
does an open source mean what does it

00:04:18,959 --> 00:04:22,720
mean for a project

00:04:20,160 --> 00:04:24,639
to be an open source project can you

00:04:22,720 --> 00:04:27,520
call a project an open source project

00:04:24,639 --> 00:04:28,800
if you put the code online well that's

00:04:27,520 --> 00:04:31,680
not entirely true

00:04:28,800 --> 00:04:34,000
if you if you publish your project's

00:04:31,680 --> 00:04:35,120
code online that only makes it source

00:04:34,000 --> 00:04:37,280
available

00:04:35,120 --> 00:04:40,160
uh doesn't make it necessarily open

00:04:37,280 --> 00:04:42,479
source um if you attended uh keynote you

00:04:40,160 --> 00:04:46,080
might have

00:04:42,479 --> 00:04:50,960
seen josh's talk about the technical

00:04:46,080 --> 00:04:54,080
requirement for an open source project

00:04:50,960 --> 00:04:54,960
it technically the the open source term

00:04:54,080 --> 00:04:56,720
is

00:04:54,960 --> 00:04:58,400
it usually is associated with open

00:04:56,720 --> 00:04:59,360
source initiative and free software

00:04:58,400 --> 00:05:01,360
foundation

00:04:59,360 --> 00:05:02,800
is usually associated with uh free

00:05:01,360 --> 00:05:04,960
software

00:05:02,800 --> 00:05:06,960
and they have each a set of rules so

00:05:04,960 --> 00:05:08,880
open source initiative has its

00:05:06,960 --> 00:05:10,000
uh list of rules and free software

00:05:08,880 --> 00:05:14,000
foundation has its lists

00:05:10,000 --> 00:05:16,080
of freedoms and they go through

00:05:14,000 --> 00:05:17,199
publicly available licenses and they

00:05:16,080 --> 00:05:19,360
approve

00:05:17,199 --> 00:05:20,720
some of those licenses saying okay this

00:05:19,360 --> 00:05:24,000
license

00:05:20,720 --> 00:05:26,800
fits our rules so

00:05:24,000 --> 00:05:29,120
in order to be uh in order for your

00:05:26,800 --> 00:05:31,520
project to be an open source project

00:05:29,120 --> 00:05:32,880
uh you need to publish your code and

00:05:31,520 --> 00:05:36,479
your project

00:05:32,880 --> 00:05:38,720
need to have that uh to have a license

00:05:36,479 --> 00:05:39,520
that is approved by uh open source

00:05:38,720 --> 00:05:41,680
initiative

00:05:39,520 --> 00:05:43,440
for example for you to be able to call

00:05:41,680 --> 00:05:46,160
it an open source project

00:05:43,440 --> 00:05:47,520
and uh i was also confused between uh

00:05:46,160 --> 00:05:50,560
difference

00:05:47,520 --> 00:05:53,199
of open source and free software

00:05:50,560 --> 00:05:54,240
and while there are very similar things

00:05:53,199 --> 00:05:57,840
i think a minor

00:05:54,240 --> 00:06:01,440
difference is uh free software

00:05:57,840 --> 00:06:02,319
tries to make sure a software stays free

00:06:01,440 --> 00:06:05,360
forever and

00:06:02,319 --> 00:06:06,000
free here doesn't mean free as in it

00:06:05,360 --> 00:06:09,199
doesn't cost

00:06:06,000 --> 00:06:12,479
any money it means free as in freedom it

00:06:09,199 --> 00:06:14,400
free as in liberty while open source

00:06:12,479 --> 00:06:15,520
is a little more permissive with that

00:06:14,400 --> 00:06:18,160
aspect

00:06:15,520 --> 00:06:19,280
but you may see those two terms used

00:06:18,160 --> 00:06:22,240
interchangeably

00:06:19,280 --> 00:06:22,560
you can also see those terms shortened

00:06:22,240 --> 00:06:24,720
like

00:06:22,560 --> 00:06:26,080
false stands for free open source

00:06:24,720 --> 00:06:28,560
software

00:06:26,080 --> 00:06:29,360
and flow stands for free library open

00:06:28,560 --> 00:06:32,840
software so

00:06:29,360 --> 00:06:36,400
you can see all those terms around

00:06:32,840 --> 00:06:39,600
um and with regards to licenses

00:06:36,400 --> 00:06:41,440
so there are some files that um usually

00:06:39,600 --> 00:06:44,400
go into these projects

00:06:41,440 --> 00:06:46,080
and license license is one of those

00:06:44,400 --> 00:06:50,479
files

00:06:46,080 --> 00:06:53,599
so license is attached to the project

00:06:50,479 --> 00:06:55,039
it tells other people what they can do

00:06:53,599 --> 00:06:56,639
with the project

00:06:55,039 --> 00:06:58,880
if there is no license in the project

00:06:56,639 --> 00:06:59,680
they have no idea whether they can copy

00:06:58,880 --> 00:07:01,120
the code

00:06:59,680 --> 00:07:02,960
whether they can contribute to code

00:07:01,120 --> 00:07:04,560
whether they can modify it and

00:07:02,960 --> 00:07:05,599
distribute the modified code they have

00:07:04,560 --> 00:07:08,400
no idea

00:07:05,599 --> 00:07:09,759
but if you have a license that's clear

00:07:08,400 --> 00:07:12,639
and

00:07:09,759 --> 00:07:14,720
it it seems that there's two main groups

00:07:12,639 --> 00:07:18,000
of licenses that are

00:07:14,720 --> 00:07:21,120
permissive and copyleft and

00:07:18,000 --> 00:07:22,240
like i already mentioned permissive the

00:07:21,120 --> 00:07:24,080
difference is

00:07:22,240 --> 00:07:26,160
the copper left is trying to make sure

00:07:24,080 --> 00:07:28,080
that it stays free forever

00:07:26,160 --> 00:07:30,400
while permissive is a little more

00:07:28,080 --> 00:07:32,479
permissive but again this is

00:07:30,400 --> 00:07:34,000
this is an oversimplification of how it

00:07:32,479 --> 00:07:35,680
is this is

00:07:34,000 --> 00:07:38,319
a an oversimplification of

00:07:35,680 --> 00:07:40,479
generalization um so this is just enough

00:07:38,319 --> 00:07:42,479
to get you started

00:07:40,479 --> 00:07:45,840
um you should probably read more about

00:07:42,479 --> 00:07:45,840
licenses if you're interested

00:07:46,080 --> 00:07:51,599
and just to give an example the mit

00:07:49,520 --> 00:07:54,560
license is a common permissive license

00:07:51,599 --> 00:07:58,000
that's been used and gpl version 3

00:07:54,560 --> 00:08:01,520
is a as a copyleft license

00:07:58,000 --> 00:08:05,199
okay um with that

00:08:01,520 --> 00:08:07,840
said um i want to move to source control

00:08:05,199 --> 00:08:10,080
and specifically i want to talk about

00:08:07,840 --> 00:08:10,080
git

00:08:10,160 --> 00:08:13,520
git is a piece of software that helps

00:08:12,639 --> 00:08:15,919
you

00:08:13,520 --> 00:08:17,680
track the progress of your software

00:08:15,919 --> 00:08:21,039
development so

00:08:17,680 --> 00:08:22,080
the way it works is you for example

00:08:21,039 --> 00:08:24,479
write some code

00:08:22,080 --> 00:08:26,240
and you create a checkpoint and then you

00:08:24,479 --> 00:08:27,599
write some more code and then you create

00:08:26,240 --> 00:08:30,639
another checkpoint

00:08:27,599 --> 00:08:34,000
so by doing that you create

00:08:30,639 --> 00:08:36,800
a a source tree you create a tree

00:08:34,000 --> 00:08:39,279
where you can refer back to the previous

00:08:36,800 --> 00:08:43,839
versions of your source code

00:08:39,279 --> 00:08:48,000
um this is this is really useful

00:08:43,839 --> 00:08:50,640
um just to give one example

00:08:48,000 --> 00:08:51,200
for example you notice the bug in your

00:08:50,640 --> 00:08:54,320
code

00:08:51,200 --> 00:08:57,200
you found the line that is

00:08:54,320 --> 00:08:59,040
causing the bug and you want to find out

00:08:57,200 --> 00:09:01,519
why this line is added

00:08:59,040 --> 00:09:02,480
so you can go to your git history and

00:09:01,519 --> 00:09:06,160
find out

00:09:02,480 --> 00:09:08,959
uh what what is who added that line

00:09:06,160 --> 00:09:09,680
and why did they add that line and they

00:09:08,959 --> 00:09:12,560
you can

00:09:09,680 --> 00:09:13,920
understand the reasoning at the time and

00:09:12,560 --> 00:09:16,399
uh you can look at the

00:09:13,920 --> 00:09:17,839
you know details of what was happening

00:09:16,399 --> 00:09:19,920
at the time

00:09:17,839 --> 00:09:23,920
um there are other softwares that

00:09:19,920 --> 00:09:25,440
achieve the same goal like svn and cvs

00:09:23,920 --> 00:09:28,000
but today i'm only going to talk about

00:09:25,440 --> 00:09:31,440
it and when introducing it

00:09:28,000 --> 00:09:35,839
i want to introduce only some

00:09:31,440 --> 00:09:38,959
keywords only some key concepts

00:09:35,839 --> 00:09:39,440
the first one is repository uh this is

00:09:38,959 --> 00:09:42,480
also

00:09:39,440 --> 00:09:45,360
referred to as a shortened repo

00:09:42,480 --> 00:09:46,640
a repository is it's it's like it's just

00:09:45,360 --> 00:09:50,080
like a storage

00:09:46,640 --> 00:09:52,160
for your uh for your project think of it

00:09:50,080 --> 00:09:54,399
for example if it's on your local

00:09:52,160 --> 00:09:56,560
computer think of it as a directory

00:09:54,399 --> 00:09:59,200
it's a folder that has all your project

00:09:56,560 --> 00:09:59,200
files in it

00:09:59,440 --> 00:10:04,959
a repository where you create your

00:10:01,680 --> 00:10:08,240
comments a repository

00:10:04,959 --> 00:10:09,360
where you have your branches so the next

00:10:08,240 --> 00:10:11,839
the next is

00:10:09,360 --> 00:10:13,360
the comment comments are actually

00:10:11,839 --> 00:10:17,839
checkpoints

00:10:13,360 --> 00:10:19,360
um when you have your git repository uh

00:10:17,839 --> 00:10:22,240
when you make some changes

00:10:19,360 --> 00:10:23,519
uh like i already described a minute ago

00:10:22,240 --> 00:10:24,640
you create checkpoints and these

00:10:23,519 --> 00:10:27,440
checkpoints are called

00:10:24,640 --> 00:10:28,720
comments you you create a comment and

00:10:27,440 --> 00:10:32,079
then you just move that

00:10:28,720 --> 00:10:35,120
commit around to for example share your

00:10:32,079 --> 00:10:35,120
code with other people

00:10:35,279 --> 00:10:38,720
um there is also branches since we are

00:10:37,519 --> 00:10:42,720
talking about trees

00:10:38,720 --> 00:10:45,200
um branches uh is also

00:10:42,720 --> 00:10:47,839
easy to visualize if you think about

00:10:45,200 --> 00:10:47,839
trees

00:10:48,000 --> 00:10:51,040
we talked about you know adding comments

00:10:49,760 --> 00:10:53,600
adding checkpoints

00:10:51,040 --> 00:10:55,440
but where do you add those comments

00:10:53,600 --> 00:10:59,200
there is a default branch

00:10:55,440 --> 00:11:00,800
of the tree that by default you're

00:10:59,200 --> 00:11:03,279
adding your comments there

00:11:00,800 --> 00:11:05,839
and this default branch can be named a

00:11:03,279 --> 00:11:08,880
can be named main it can be named master

00:11:05,839 --> 00:11:11,360
camera name default stable latest uh

00:11:08,880 --> 00:11:14,320
trunk depending on the repository

00:11:11,360 --> 00:11:15,839
um so as you keep adding comments to

00:11:14,320 --> 00:11:18,959
your main branch

00:11:15,839 --> 00:11:22,079
that's where you grow your repository

00:11:18,959 --> 00:11:25,279
um there's there's also well

00:11:22,079 --> 00:11:28,079
you know you you don't have to use

00:11:25,279 --> 00:11:28,959
default branch for everything you're

00:11:28,079 --> 00:11:30,959
free to use

00:11:28,959 --> 00:11:32,880
feature branches you're free to use

00:11:30,959 --> 00:11:36,000
multiple branches

00:11:32,880 --> 00:11:37,680
for other things you want to do for

00:11:36,000 --> 00:11:41,760
example if you're on a

00:11:37,680 --> 00:11:44,480
10 people development team you can have

00:11:41,760 --> 00:11:45,839
all of your developers work on their own

00:11:44,480 --> 00:11:48,399
feature branches

00:11:45,839 --> 00:11:49,760
and then maybe have them merge their

00:11:48,399 --> 00:11:52,240
branches back to

00:11:49,760 --> 00:11:52,240
default

00:11:53,040 --> 00:11:56,079
another nice thing about feature

00:11:55,519 --> 00:12:00,000
branches

00:11:56,079 --> 00:12:02,880
could be that you know if you want to

00:12:00,000 --> 00:12:03,920
submit multiple patches multiple pull

00:12:02,880 --> 00:12:07,920
requests

00:12:03,920 --> 00:12:10,480
to a repository um you can

00:12:07,920 --> 00:12:11,279
create multiple feature branches and

00:12:10,480 --> 00:12:13,040
then submit

00:12:11,279 --> 00:12:14,959
pull requests for each of those feature

00:12:13,040 --> 00:12:16,800
branches

00:12:14,959 --> 00:12:19,120
so feature branches are really useful

00:12:16,800 --> 00:12:21,279
and it's it's used a lot

00:12:19,120 --> 00:12:23,279
but i'm not going to go into any more

00:12:21,279 --> 00:12:26,399
details about feature branches

00:12:23,279 --> 00:12:29,040
i won't be showing showing it in my

00:12:26,399 --> 00:12:32,320
examples i won't be showing it in demo

00:12:29,040 --> 00:12:32,320
but you should still know about it

00:12:33,519 --> 00:12:37,760
the the last item i have here is

00:12:35,839 --> 00:12:41,040
optional remote

00:12:37,760 --> 00:12:43,680
and let's let's let's think about it i

00:12:41,040 --> 00:12:45,040
was describing repository as a directory

00:12:43,680 --> 00:12:48,079
as a folder in your

00:12:45,040 --> 00:12:50,320
your personal computer right

00:12:48,079 --> 00:12:52,720
well you can start a git repository on

00:12:50,320 --> 00:12:54,560
your laptop for example

00:12:52,720 --> 00:12:56,560
and then just keep working on keep work

00:12:54,560 --> 00:12:58,560
on that keep working on there

00:12:56,560 --> 00:12:59,680
you don't have to push it anywhere you

00:12:58,560 --> 00:13:03,200
don't have to

00:12:59,680 --> 00:13:06,480
have it talk to outside world but

00:13:03,200 --> 00:13:08,560
optionally you can designate a remote

00:13:06,480 --> 00:13:11,519
you can host that remote by yourself

00:13:08,560 --> 00:13:12,639
or you can use a git service like github

00:13:11,519 --> 00:13:13,920
or gitlab or

00:13:12,639 --> 00:13:17,760
you know any other service that's

00:13:13,920 --> 00:13:20,560
available once you have a remote

00:13:17,760 --> 00:13:21,279
that makes things much easier for

00:13:20,560 --> 00:13:26,000
example

00:13:21,279 --> 00:13:28,560
for teams with multiple people

00:13:26,000 --> 00:13:30,720
if we go back to that example of a team

00:13:28,560 --> 00:13:34,079
of time developers

00:13:30,720 --> 00:13:35,279
if you have a github.com remote for

00:13:34,079 --> 00:13:36,959
example

00:13:35,279 --> 00:13:39,600
and if you have 10 people working on

00:13:36,959 --> 00:13:42,000
their own their own laptops

00:13:39,600 --> 00:13:43,440
they can push their changes they can

00:13:42,000 --> 00:13:46,720
push their work

00:13:43,440 --> 00:13:49,920
back to this central github

00:13:46,720 --> 00:13:50,720
remote and they can pull changes of

00:13:49,920 --> 00:13:53,360
other people

00:13:50,720 --> 00:13:54,639
from that remote as well so this kind of

00:13:53,360 --> 00:13:57,120
becomes like

00:13:54,639 --> 00:13:57,920
the source of truth for uh for a

00:13:57,120 --> 00:14:02,000
multiple

00:13:57,920 --> 00:14:04,880
for team with multiple developers

00:14:02,000 --> 00:14:07,440
um it also helps like if you're using a

00:14:04,880 --> 00:14:10,480
common git service like github or gitlab

00:14:07,440 --> 00:14:13,279
it also helps other people

00:14:10,480 --> 00:14:15,120
to discover your repository discover

00:14:13,279 --> 00:14:18,480
your project

00:14:15,120 --> 00:14:20,480
and they can once they discover about

00:14:18,480 --> 00:14:23,600
once it once they see your project

00:14:20,480 --> 00:14:25,600
they're uh able to contribute to it

00:14:23,600 --> 00:14:28,320
however if you have your project only on

00:14:25,600 --> 00:14:31,360
your local machine that's

00:14:28,320 --> 00:14:34,639
that's a little hard

00:14:31,360 --> 00:14:37,680
okay um here i'm going to show you

00:14:34,639 --> 00:14:41,279
what i described um

00:14:37,680 --> 00:14:44,480
in an example we talked about you know

00:14:41,279 --> 00:14:45,040
branches we talked about comments and i

00:14:44,480 --> 00:14:47,360
will

00:14:45,040 --> 00:14:48,480
i will show you i'll show those to you

00:14:47,360 --> 00:14:49,920
with an example

00:14:48,480 --> 00:14:52,320
and i'll also introduce some git

00:14:49,920 --> 00:14:53,680
comments uh while working through the

00:14:52,320 --> 00:14:57,040
example

00:14:53,680 --> 00:14:57,040
so here i'm showing this a

00:14:57,279 --> 00:15:03,279
circle this i'm using a circle

00:15:01,440 --> 00:15:04,880
to refer to a comment so think about

00:15:03,279 --> 00:15:07,040
this circle as a comment

00:15:04,880 --> 00:15:09,680
and this comment is named a so it's a

00:15:07,040 --> 00:15:09,680
comment a

00:15:10,839 --> 00:15:14,639
um and also assume that this is

00:15:13,920 --> 00:15:17,920
happening

00:15:14,639 --> 00:15:21,519
on remote so for example this is a

00:15:17,920 --> 00:15:25,279
repository that lives on github.com

00:15:21,519 --> 00:15:27,760
it has only one comment in it

00:15:25,279 --> 00:15:28,480
and this is its main branch the default

00:15:27,760 --> 00:15:31,279
branch

00:15:28,480 --> 00:15:32,800
the main branch is pointing towards this

00:15:31,279 --> 00:15:35,279
commit a

00:15:32,800 --> 00:15:36,240
another thing i should have mentioned is

00:15:35,279 --> 00:15:40,079
these

00:15:36,240 --> 00:15:43,440
branches are really pointers to comments

00:15:40,079 --> 00:15:46,000
so when when you say my main branch is

00:15:43,440 --> 00:15:46,959
uh at commit a what i actually mean is

00:15:46,000 --> 00:15:50,320
my main branch

00:15:46,959 --> 00:15:50,320
is pointing to commit a

00:15:50,880 --> 00:15:55,600
so that's that's the remote repository

00:15:54,320 --> 00:15:58,880
with one branch

00:15:55,600 --> 00:16:02,560
uh one comment if

00:15:58,880 --> 00:16:06,000
i want to i want to have a copy

00:16:02,560 --> 00:16:08,000
of this repository in my local machine

00:16:06,000 --> 00:16:09,440
so this lives on github.com and i want

00:16:08,000 --> 00:16:12,320
to have a copy of this

00:16:09,440 --> 00:16:14,160
in my laptop as well what i do is i run

00:16:12,320 --> 00:16:17,360
git clone

00:16:14,160 --> 00:16:20,240
and it brings the exact same repository

00:16:17,360 --> 00:16:21,120
to my local machine so now i have two

00:16:20,240 --> 00:16:23,839
copies

00:16:21,120 --> 00:16:23,839
that are the same

00:16:24,560 --> 00:16:27,680
just for sake of example assume someone

00:16:26,800 --> 00:16:30,880
else

00:16:27,680 --> 00:16:34,000
pushed a commit to this remote

00:16:30,880 --> 00:16:35,040
so its main branch is now ahead one

00:16:34,000 --> 00:16:38,639
comment

00:16:35,040 --> 00:16:41,040
compared to my local main branch

00:16:38,639 --> 00:16:42,480
and you see you'll see that the the

00:16:41,040 --> 00:16:44,800
order of the comments

00:16:42,480 --> 00:16:46,480
the first initial comment is still there

00:16:44,800 --> 00:16:49,600
and there's an additional comment b

00:16:46,480 --> 00:16:50,560
that is added afterwards so i want to

00:16:49,600 --> 00:16:53,680
make these

00:16:50,560 --> 00:16:54,880
even i want to have the change that is

00:16:53,680 --> 00:16:57,920
in the remote

00:16:54,880 --> 00:16:58,720
to appear in my local machine and what i

00:16:57,920 --> 00:17:01,199
do

00:16:58,720 --> 00:17:03,680
is i run git pull that means pull

00:17:01,199 --> 00:17:05,839
changes from remote

00:17:03,680 --> 00:17:07,439
and that makes them even and if it was

00:17:05,839 --> 00:17:10,640
the other way around

00:17:07,439 --> 00:17:11,360
meaning i had an extra comment in my

00:17:10,640 --> 00:17:14,720
local

00:17:11,360 --> 00:17:17,760
brand a local copy i would

00:17:14,720 --> 00:17:18,079
be able to make remote and local even

00:17:17,760 --> 00:17:20,640
with

00:17:18,079 --> 00:17:21,120
it push so if i run git push it pushes

00:17:20,640 --> 00:17:25,039
this

00:17:21,120 --> 00:17:28,240
c commit c back to remote

00:17:25,039 --> 00:17:31,760
so that's just one example this is

00:17:28,240 --> 00:17:33,760
another way to show how things work

00:17:31,760 --> 00:17:35,679
assume again this is remote and this is

00:17:33,760 --> 00:17:37,760
my local machine

00:17:35,679 --> 00:17:38,720
you can also assume this is github.com

00:17:37,760 --> 00:17:41,679
and this is

00:17:38,720 --> 00:17:41,679
this is my laptop

00:17:41,840 --> 00:17:48,160
we looked at pool which

00:17:45,039 --> 00:17:51,200
brings changes in remote back to my

00:17:48,160 --> 00:17:54,480
my own computer and we talked about push

00:17:51,200 --> 00:17:57,600
which pushes the changes in my local

00:17:54,480 --> 00:18:00,000
back to github but

00:17:57,600 --> 00:18:02,320
think about this you make a change to a

00:18:00,000 --> 00:18:04,559
file and then you run git push

00:18:02,320 --> 00:18:06,720
um git will give you an error message

00:18:04,559 --> 00:18:09,200
because git has no idea

00:18:06,720 --> 00:18:12,160
what you are trying to push you can't

00:18:09,200 --> 00:18:15,679
just make changes and expect you to

00:18:12,160 --> 00:18:17,440
figure out of those changes which ones

00:18:15,679 --> 00:18:20,960
you want to push

00:18:17,440 --> 00:18:22,640
git can't push differences uh you can't

00:18:20,960 --> 00:18:25,120
push those changes

00:18:22,640 --> 00:18:26,400
forget to be able to push you need to

00:18:25,120 --> 00:18:27,679
create comments you need to create

00:18:26,400 --> 00:18:29,919
checkpoints

00:18:27,679 --> 00:18:33,120
so if you have that commit c for example

00:18:29,919 --> 00:18:33,120
you can push that comment c

00:18:33,440 --> 00:18:36,640
so you need to go through this commit

00:18:35,679 --> 00:18:40,000
command

00:18:36,640 --> 00:18:42,240
before you do a push command

00:18:40,000 --> 00:18:43,120
and again assume you have made some

00:18:42,240 --> 00:18:45,520
changes

00:18:43,120 --> 00:18:47,600
in your files and then you run git

00:18:45,520 --> 00:18:49,520
commit to create a comment

00:18:47,600 --> 00:18:51,280
it will give you an error again because

00:18:49,520 --> 00:18:53,679
it can't figure out

00:18:51,280 --> 00:18:56,320
which of those changes you want to be

00:18:53,679 --> 00:18:59,120
included in the upcoming comment

00:18:56,320 --> 00:18:59,520
so there's an extra area called stage

00:18:59,120 --> 00:19:03,360
and

00:18:59,520 --> 00:19:07,440
what git comet does takes the stage

00:19:03,360 --> 00:19:10,640
and makes it into a checkpoint

00:19:07,440 --> 00:19:12,080
so once you have your changes in your

00:19:10,640 --> 00:19:14,559
working directory

00:19:12,080 --> 00:19:15,600
you need to run another command that's

00:19:14,559 --> 00:19:18,160
that's uh

00:19:15,600 --> 00:19:18,640
that's called add so you need to run git

00:19:18,160 --> 00:19:21,760
add

00:19:18,640 --> 00:19:22,559
and specify the changes you want to be

00:19:21,760 --> 00:19:25,840
included

00:19:22,559 --> 00:19:28,240
in the upcoming comment once you do that

00:19:25,840 --> 00:19:29,919
you have your changes in stage you can

00:19:28,240 --> 00:19:32,160
run git comment and once you have

00:19:29,919 --> 00:19:33,919
run git comment you have your new

00:19:32,160 --> 00:19:35,760
checkpoint that you can push back to

00:19:33,919 --> 00:19:38,240
remote

00:19:35,760 --> 00:19:39,919
some other useful git commands that i

00:19:38,240 --> 00:19:42,400
often use

00:19:39,919 --> 00:19:44,720
and then i will and i will use in the

00:19:42,400 --> 00:19:47,679
demonstration

00:19:44,720 --> 00:19:50,160
is its status and log once you run git

00:19:47,679 --> 00:19:53,440
status it will tell you

00:19:50,160 --> 00:19:54,559
whether your local is ahead or even with

00:19:53,440 --> 00:19:58,000
remote

00:19:54,559 --> 00:19:59,600
uh it will tell you about the changes in

00:19:58,000 --> 00:20:00,960
working directory it will tell you about

00:19:59,600 --> 00:20:04,320
the changes in

00:20:00,960 --> 00:20:06,480
uh stage um and if you have if you have

00:20:04,320 --> 00:20:10,080
a comment i'll tell you that too

00:20:06,480 --> 00:20:10,080
and git log will just list you

00:20:10,400 --> 00:20:13,760
it log will list you the

00:20:15,200 --> 00:20:18,400
the comments in your branch

00:20:19,120 --> 00:20:24,159
let's talk a little about uh requests

00:20:24,960 --> 00:20:28,480
uh and i know that talks about pull

00:20:26,720 --> 00:20:30,559
requests mainly

00:20:28,480 --> 00:20:32,159
but i want to tell you that requests are

00:20:30,559 --> 00:20:34,799
not the only way to contribute to an

00:20:32,159 --> 00:20:36,880
open source project you can go ahead and

00:20:34,799 --> 00:20:37,840
submit you know bug reports or verify

00:20:36,880 --> 00:20:40,480
bug reports

00:20:37,840 --> 00:20:42,000
among many other things that you can do

00:20:40,480 --> 00:20:43,840
but just wanted to

00:20:42,000 --> 00:20:45,120
get this out of the way requests are not

00:20:43,840 --> 00:20:48,159
the only way

00:20:45,120 --> 00:20:50,400
and prequest is actually a patch that is

00:20:48,159 --> 00:20:52,960
submitted to a repository

00:20:50,400 --> 00:20:54,559
we talked about making creating a

00:20:52,960 --> 00:20:56,720
comment creating a checkpoint

00:20:54,559 --> 00:20:58,559
we just take your checkpoint and go back

00:20:56,720 --> 00:21:00,799
to the maintainer of the

00:20:58,559 --> 00:21:02,480
repository that you want to contribute

00:21:00,799 --> 00:21:04,880
to and tell them

00:21:02,480 --> 00:21:06,640
hey i made this page would you be

00:21:04,880 --> 00:21:09,760
interested in it

00:21:06,640 --> 00:21:10,000
um these are also called merge requests

00:21:09,760 --> 00:21:12,799
and

00:21:10,000 --> 00:21:14,840
change requests in different platforms

00:21:12,799 --> 00:21:17,120
you can send a pull request on github

00:21:14,840 --> 00:21:19,360
gitlab

00:21:17,120 --> 00:21:20,320
an email still so some projects actually

00:21:19,360 --> 00:21:23,600
prefer

00:21:20,320 --> 00:21:24,000
uh sharing patches with emails instead

00:21:23,600 --> 00:21:26,480
of

00:21:24,000 --> 00:21:29,200
you know using platforms like github and

00:21:26,480 --> 00:21:30,880
some projects you will find out

00:21:29,200 --> 00:21:33,280
even though they have a mirror on github

00:21:30,880 --> 00:21:35,360
or gitlab they still prefer you to

00:21:33,280 --> 00:21:39,039
submit a patch via email

00:21:35,360 --> 00:21:42,880
so um i talked a little about the

00:21:39,039 --> 00:21:45,360
little tiny files in project

00:21:42,880 --> 00:21:47,360
trajectory license was one of them

00:21:45,360 --> 00:21:49,679
readme file is another one

00:21:47,360 --> 00:21:50,400
so you should probably check readme file

00:21:49,679 --> 00:21:52,080
before

00:21:50,400 --> 00:21:53,440
contributing to a project they might

00:21:52,080 --> 00:21:56,880
have a clue on

00:21:53,440 --> 00:21:58,480
how they accept patches you can

00:21:56,880 --> 00:22:00,880
you should also check if there's a

00:21:58,480 --> 00:22:04,080
contributing dot md file

00:22:00,880 --> 00:22:07,520
um that contributing file usually

00:22:04,080 --> 00:22:10,960
describes how they accept patches

00:22:07,520 --> 00:22:13,919
so pull requests usually come with a

00:22:10,960 --> 00:22:15,200
description so as a contributor for

00:22:13,919 --> 00:22:17,840
example if you're submitting a

00:22:15,200 --> 00:22:19,679
request you often go and say this is my

00:22:17,840 --> 00:22:22,559
reasoning in building this

00:22:19,679 --> 00:22:25,039
request if you are interested please

00:22:22,559 --> 00:22:28,559
merge it etc

00:22:25,039 --> 00:22:30,400
um and sometimes maintainers reply to

00:22:28,559 --> 00:22:33,679
you saying like saying things like

00:22:30,400 --> 00:22:35,760
um uh you know they

00:22:33,679 --> 00:22:36,799
ask you to clarify some stuff they ask

00:22:35,760 --> 00:22:40,000
you to change some stuff

00:22:36,799 --> 00:22:41,919
etc so that's a nice thing that is

00:22:40,000 --> 00:22:44,320
attached to a pull request

00:22:41,919 --> 00:22:45,919
pull requests can include code changes

00:22:44,320 --> 00:22:48,159
it can include adding a new test

00:22:45,919 --> 00:22:49,280
you know removing a test that doesn't

00:22:48,159 --> 00:22:51,840
that is not needed

00:22:49,280 --> 00:22:53,360
needed or fixing a broken test you know

00:22:51,840 --> 00:22:54,720
adding some design adding some

00:22:53,360 --> 00:22:57,280
documentation

00:22:54,720 --> 00:22:59,120
updating some documentation documenting

00:22:57,280 --> 00:23:00,880
a feature that was not documented before

00:22:59,120 --> 00:23:03,200
adding a translation so anything goes

00:23:00,880 --> 00:23:03,200
really

00:23:04,400 --> 00:23:12,320
okay here is an example

00:23:08,640 --> 00:23:15,200
of a pull request being submitted now

00:23:12,320 --> 00:23:16,960
this is my code here it prints first

00:23:15,200 --> 00:23:17,520
names of people it just prints first

00:23:16,960 --> 00:23:21,280
name that's

00:23:17,520 --> 00:23:23,280
that's all it does this project

00:23:21,280 --> 00:23:24,640
is called maintainer slash nameprint so

00:23:23,280 --> 00:23:26,880
the name of the project is actually

00:23:24,640 --> 00:23:29,520
nameprint

00:23:26,880 --> 00:23:31,520
and it's under maintainer's namespace so

00:23:29,520 --> 00:23:34,559
this person called maintainer

00:23:31,520 --> 00:23:38,960
is maintaining this nameprint project

00:23:34,559 --> 00:23:42,080
so if someone else named contributor

00:23:38,960 --> 00:23:44,720
comes across this repository they

00:23:42,080 --> 00:23:46,640
can't directly push to it because it's

00:23:44,720 --> 00:23:48,480
someone else's repository it's not their

00:23:46,640 --> 00:23:51,360
own positive

00:23:48,480 --> 00:23:51,919
and here what's happening is called uh

00:23:51,360 --> 00:23:55,120
as a

00:23:51,919 --> 00:23:57,840
as a fork uh they're forking uh

00:23:55,120 --> 00:23:59,600
maintainer slash name print into their

00:23:57,840 --> 00:24:02,640
own account so they're

00:23:59,600 --> 00:24:04,080
they have the same copy they have the

00:24:02,640 --> 00:24:07,760
same repository

00:24:04,080 --> 00:24:10,320
under their namespace now and once they

00:24:07,760 --> 00:24:11,840
do that once they have a copy they can

00:24:10,320 --> 00:24:14,320
make any change

00:24:11,840 --> 00:24:15,919
they want so for example instead of

00:24:14,320 --> 00:24:18,559
printing first names

00:24:15,919 --> 00:24:20,240
they can go with printing full names and

00:24:18,559 --> 00:24:22,159
once they've made their changes they can

00:24:20,240 --> 00:24:24,400
go back to maintainer and say

00:24:22,159 --> 00:24:26,000
hey would you be interested in these

00:24:24,400 --> 00:24:29,200
changes that i made

00:24:26,000 --> 00:24:31,360
and that's the pu request if it's merged

00:24:29,200 --> 00:24:32,240
the original project maintainer slash

00:24:31,360 --> 00:24:36,240
name print

00:24:32,240 --> 00:24:36,240
now prints full names as well

00:24:36,559 --> 00:24:40,880
let's look at the same example on a

00:24:38,240 --> 00:24:40,880
different level

00:24:41,039 --> 00:24:45,360
this is maintainers account on

00:24:43,520 --> 00:24:47,840
github.com

00:24:45,360 --> 00:24:48,400
and this is its initial comment uh the

00:24:47,840 --> 00:24:50,559
main

00:24:48,400 --> 00:24:51,679
branch is pointing to this initial

00:24:50,559 --> 00:24:54,000
comment

00:24:51,679 --> 00:24:56,159
they push a second comment that says add

00:24:54,000 --> 00:24:56,559
print.ui which is the file that prints

00:24:56,159 --> 00:24:58,480
the

00:24:56,559 --> 00:25:00,559
first names and the main branch is

00:24:58,480 --> 00:25:02,720
pointing to that

00:25:00,559 --> 00:25:04,720
so contributor comes along finds this

00:25:02,720 --> 00:25:06,480
repository on github.com

00:25:04,720 --> 00:25:09,440
and they want to fork this repository

00:25:06,480 --> 00:25:09,440
into their own account

00:25:10,480 --> 00:25:15,919
once they do that they have a copy of

00:25:13,039 --> 00:25:18,240
the repository a fork of the repository

00:25:15,919 --> 00:25:20,080
under their own namespace and once they

00:25:18,240 --> 00:25:23,520
have this copy on github

00:25:20,080 --> 00:25:27,360
they can clone this into

00:25:23,520 --> 00:25:29,600
their for example laptops

00:25:27,360 --> 00:25:30,400
if they do that they have a third copy

00:25:29,600 --> 00:25:34,000
that lives

00:25:30,400 --> 00:25:35,840
on the on the local computer

00:25:34,000 --> 00:25:38,480
now it's easier to add a comment so they

00:25:35,840 --> 00:25:40,720
add they make some changes

00:25:38,480 --> 00:25:41,520
instead of printing first names it

00:25:40,720 --> 00:25:45,360
prints

00:25:41,520 --> 00:25:47,120
full names instead and the main branch

00:25:45,360 --> 00:25:51,200
as you can see is ahead

00:25:47,120 --> 00:25:54,480
by one comment compared to its remote

00:25:51,200 --> 00:25:56,559
they they run a git push so that

00:25:54,480 --> 00:25:58,880
this change is pushed back to here

00:25:56,559 --> 00:26:00,240
remember since this is under maintainers

00:25:58,880 --> 00:26:03,840
namespace they can't

00:26:00,240 --> 00:26:06,240
push here they have no permission

00:26:03,840 --> 00:26:07,440
so once this is pushed the only step

00:26:06,240 --> 00:26:10,480
that's left is

00:26:07,440 --> 00:26:14,000
the submitting the pull request

00:26:10,480 --> 00:26:14,000
once they submit the request

00:26:14,240 --> 00:26:19,840
the maintainer can decide whether or not

00:26:17,840 --> 00:26:21,279
to merge it

00:26:19,840 --> 00:26:22,880
and once it's merged you will see the

00:26:21,279 --> 00:26:26,320
maintainers remote

00:26:22,880 --> 00:26:29,679
has this third comment useful name

00:26:26,320 --> 00:26:32,159
from contributor so

00:26:29,679 --> 00:26:34,640
that's the example i had and that's what

00:26:32,159 --> 00:26:38,080
i'm going to

00:26:34,640 --> 00:26:40,880
demo so i have um

00:26:38,080 --> 00:26:42,400
for the purposes of this demo i have

00:26:40,880 --> 00:26:45,600
prepared

00:26:42,400 --> 00:26:48,480
uh two github accounts

00:26:45,600 --> 00:26:49,360
um and please feel free to stop me if

00:26:48,480 --> 00:26:52,640
you can't see

00:26:49,360 --> 00:26:55,840
my uh my browser the first account

00:26:52,640 --> 00:26:58,240
is os contributor

00:26:55,840 --> 00:26:59,279
that i will use for contributor and the

00:26:58,240 --> 00:27:01,360
second account i

00:26:59,279 --> 00:27:03,919
have is called os maintainer that i will

00:27:01,360 --> 00:27:05,039
use for maintainer

00:27:03,919 --> 00:27:06,799
so for the purposes of this

00:27:05,039 --> 00:27:08,240
demonstration i'll be wearing different

00:27:06,799 --> 00:27:10,720
uh two different hats

00:27:08,240 --> 00:27:11,440
quite literally um and i'll start with

00:27:10,720 --> 00:27:14,240
wearing my

00:27:11,440 --> 00:27:14,240
maintainer hat

00:27:14,480 --> 00:27:18,240
the first thing i will do is i will

00:27:16,400 --> 00:27:21,360
click this plus button here

00:27:18,240 --> 00:27:23,120
and then click new repository that's the

00:27:21,360 --> 00:27:24,720
first way to

00:27:23,120 --> 00:27:27,200
that's an easy way to create a

00:27:24,720 --> 00:27:30,640
repository on github

00:27:27,200 --> 00:27:34,880
i'm going to name it nameprint

00:27:30,640 --> 00:27:37,520
i'm going to add a quick description

00:27:34,880 --> 00:27:39,200
print names of people i want to make

00:27:37,520 --> 00:27:42,480
this repository public

00:27:39,200 --> 00:27:46,159
so other contributors will be able to

00:27:42,480 --> 00:27:48,880
find it online i want to add a readme

00:27:46,159 --> 00:27:51,919
file remember this is one of those files

00:27:48,880 --> 00:27:53,760
that helps other people understand what

00:27:51,919 --> 00:27:55,440
this project is about

00:27:53,760 --> 00:27:57,120
and i want to choose a license from the

00:27:55,440 --> 00:28:00,960
very beginning

00:27:57,120 --> 00:28:03,279
for example i want to use mit license

00:28:00,960 --> 00:28:05,919
uh and as soon as i click create

00:28:03,279 --> 00:28:09,679
repository it creates a repository

00:28:05,919 --> 00:28:13,520
and sometimes i need to refresh here

00:28:09,679 --> 00:28:16,480
but you will see this is my

00:28:13,520 --> 00:28:17,600
maintainers remote repository it's uh

00:28:16,480 --> 00:28:20,399
it's named

00:28:17,600 --> 00:28:21,120
it's it's in the maintainer's namespace

00:28:20,399 --> 00:28:24,320
it has

00:28:21,120 --> 00:28:26,559
one branch and the branch is called main

00:28:24,320 --> 00:28:28,159
and it has one commit it's called

00:28:26,559 --> 00:28:30,240
initial comment

00:28:28,159 --> 00:28:33,840
i have two files license and readme and

00:28:30,240 --> 00:28:33,840
readme is visible here as well

00:28:34,399 --> 00:28:39,440
um here i'll uh

00:28:37,440 --> 00:28:41,520
the the next step i want to do is i want

00:28:39,440 --> 00:28:43,520
to add print.qi

00:28:41,520 --> 00:28:46,640
to this file so i i want to click the

00:28:43,520 --> 00:28:49,919
screen download code button

00:28:46,640 --> 00:28:52,320
and copy the ssh address

00:28:49,919 --> 00:28:53,919
and i will go to my terminal and if you

00:28:52,320 --> 00:28:55,440
can't see my terminal please feel free

00:28:53,919 --> 00:28:58,799
to stop me

00:28:55,440 --> 00:29:00,559
i have made this demo directory

00:28:58,799 --> 00:29:02,320
under which i have two separate

00:29:00,559 --> 00:29:03,039
directories contributor and maintainer

00:29:02,320 --> 00:29:05,039
so when i'm

00:29:03,039 --> 00:29:06,399
acting as a maintainer i'll be in

00:29:05,039 --> 00:29:08,240
maintain trajectory

00:29:06,399 --> 00:29:10,399
and when i'm viewing my contributor head

00:29:08,240 --> 00:29:12,880
i'll be contributor directed

00:29:10,399 --> 00:29:14,880
so let's look at what's inside here

00:29:12,880 --> 00:29:19,600
there's nothing here

00:29:14,880 --> 00:29:19,600
i'll go ahead and clone this repository

00:29:21,279 --> 00:29:28,240
uh looks like it's here now so let's uh

00:29:24,880 --> 00:29:30,480
go in and look at the files inside

00:29:28,240 --> 00:29:31,600
i have exactly two files license and

00:29:30,480 --> 00:29:34,720
readme

00:29:31,600 --> 00:29:35,360
the ones i saw online if i run a git

00:29:34,720 --> 00:29:37,600
status

00:29:35,360 --> 00:29:39,760
it will tell me i'm on branch main and

00:29:37,600 --> 00:29:41,919
it's up to date with origin main

00:29:39,760 --> 00:29:44,080
and working tree clean so everything's

00:29:41,919 --> 00:29:45,840
good here if i do a good log

00:29:44,080 --> 00:29:48,000
it'll show me the only comment that i

00:29:45,840 --> 00:29:49,840
have

00:29:48,000 --> 00:29:51,200
and that's from maintainer called

00:29:49,840 --> 00:29:53,520
initial comment

00:29:51,200 --> 00:29:56,399
so the next thing i want to do i want to

00:29:53,520 --> 00:29:58,480
bring this print dot py file here

00:29:56,399 --> 00:29:59,440
i just copied it if you do a list you

00:29:58,480 --> 00:30:02,640
will see that

00:29:59,440 --> 00:30:03,919
right here it's contents let me show you

00:30:02,640 --> 00:30:06,480
its contents

00:30:03,919 --> 00:30:07,760
it's a it's a tiny python script it asks

00:30:06,480 --> 00:30:10,799
for your full name

00:30:07,760 --> 00:30:12,000
and makes a guess that you know by makes

00:30:10,799 --> 00:30:13,840
a guess

00:30:12,000 --> 00:30:16,559
your first name by separating uh

00:30:13,840 --> 00:30:18,559
separating it by spaces

00:30:16,559 --> 00:30:19,840
and then prints it back so if you want

00:30:18,559 --> 00:30:22,799
to give it a try

00:30:19,840 --> 00:30:25,520
for example if i put my full name here

00:30:22,799 --> 00:30:28,240
it prints my first name back

00:30:25,520 --> 00:30:29,360
and now now the file is in directory but

00:30:28,240 --> 00:30:32,320
remember i cannot

00:30:29,360 --> 00:30:34,000
run git push just yet if i do a git

00:30:32,320 --> 00:30:35,760
status

00:30:34,000 --> 00:30:37,760
it tells me there are untracked files

00:30:35,760 --> 00:30:41,919
and i need to run git add

00:30:37,760 --> 00:30:44,320
to include this file to be

00:30:41,919 --> 00:30:45,919
in in upcoming comments so if i do git

00:30:44,320 --> 00:30:48,399
add print.py

00:30:45,919 --> 00:30:50,480
and run git status again now it says

00:30:48,399 --> 00:30:52,880
okay this isn't stage now

00:30:50,480 --> 00:30:55,840
and it's a it's a change to be committed

00:30:52,880 --> 00:30:57,760
and the next step is

00:30:55,840 --> 00:31:00,640
creating the actual commit so i'll do a

00:30:57,760 --> 00:31:04,080
git comment by slash message

00:31:00,640 --> 00:31:07,279
add print that

00:31:04,080 --> 00:31:10,080
now it status will tell me

00:31:07,279 --> 00:31:10,880
my branch is ahead of origin and origin

00:31:10,080 --> 00:31:17,919
here the first

00:31:10,880 --> 00:31:19,600
github the next step is running it push

00:31:17,919 --> 00:31:23,200
and as a maintainer

00:31:19,600 --> 00:31:24,960
i should be able to refresh this page

00:31:23,200 --> 00:31:27,120
and see two comments now and the latest

00:31:24,960 --> 00:31:30,240
comment is called add print dot py

00:31:27,120 --> 00:31:33,279
and the print dot ky file is here

00:31:30,240 --> 00:31:37,039
so next thing i will do is i'll

00:31:33,279 --> 00:31:41,200
switch to being a contributor now

00:31:37,039 --> 00:31:43,519
and uh magically i will come across

00:31:41,200 --> 00:31:44,320
this project that i want to contribute

00:31:43,519 --> 00:31:46,000
to

00:31:44,320 --> 00:31:48,240
but remember this isn't someone else's

00:31:46,000 --> 00:31:52,799
namespace so i can't contribute to it

00:31:48,240 --> 00:31:52,799
so i'll click this four button up here

00:31:53,120 --> 00:31:56,159
and once it's working once it's done

00:31:55,279 --> 00:31:58,559
with working

00:31:56,159 --> 00:32:00,080
now you'll see that the the resulting

00:31:58,559 --> 00:32:02,960
repository is under

00:32:00,080 --> 00:32:04,720
my namespace now it's not a maintainer's

00:32:02,960 --> 00:32:06,480
repository anymore well it's it's forked

00:32:04,720 --> 00:32:08,559
from maintenance yesterday

00:32:06,480 --> 00:32:11,039
but it's under my namespace now so i can

00:32:08,559 --> 00:32:12,960
commit my changes to it

00:32:11,039 --> 00:32:14,480
i will do the same thing i'll copy the

00:32:12,960 --> 00:32:16,880
address here

00:32:14,480 --> 00:32:18,799
go back to terminal let's actually move

00:32:16,880 --> 00:32:21,760
out of maintainer directory and move

00:32:18,799 --> 00:32:23,360
into contributor directory this time

00:32:21,760 --> 00:32:28,080
there's nothing here yet

00:32:23,360 --> 00:32:31,279
i will clone this repository

00:32:28,080 --> 00:32:33,919
um and uh

00:32:31,279 --> 00:32:35,200
let's look at what's in there let's go

00:32:33,919 --> 00:32:37,760
in

00:32:35,200 --> 00:32:38,640
if i do an ls you will see the print.py

00:32:37,760 --> 00:32:41,039
is here

00:32:38,640 --> 00:32:43,200
if i do a git status it's up to date if

00:32:41,039 --> 00:32:46,399
i do a blog i see two comments

00:32:43,200 --> 00:32:48,480
both from os maintainer

00:32:46,399 --> 00:32:49,919
now as contributor the change i want to

00:32:48,480 --> 00:32:54,640
do

00:32:49,919 --> 00:32:57,919
is um updating printout qi

00:32:54,640 --> 00:33:00,960
instead of getting first names

00:32:57,919 --> 00:33:03,840
printing first names i want to print

00:33:00,960 --> 00:33:03,840
full names instead

00:33:05,919 --> 00:33:11,440
so if you look at the new print.py

00:33:09,200 --> 00:33:12,799
it just asks for full name and prints

00:33:11,440 --> 00:33:15,760
the full name

00:33:12,799 --> 00:33:16,720
and if we give this a try if i print my

00:33:15,760 --> 00:33:18,960
full name here

00:33:16,720 --> 00:33:20,640
it will print it back to me but this is

00:33:18,960 --> 00:33:24,320
the change i want to make

00:33:20,640 --> 00:33:26,000
if i run a git status it's going to say

00:33:24,320 --> 00:33:28,960
okay there are some changes

00:33:26,000 --> 00:33:30,159
but they're not staged for the committee

00:33:28,960 --> 00:33:33,360
the thing i need to do

00:33:30,159 --> 00:33:33,360
here is hit add

00:33:33,440 --> 00:33:37,279
so i did say this again it says okay you

00:33:36,159 --> 00:33:39,519
made some changes

00:33:37,279 --> 00:33:41,200
and those changes are in stage so these

00:33:39,519 --> 00:33:43,760
are ready to be committed

00:33:41,200 --> 00:33:46,159
the next step is creating a comment

00:33:43,760 --> 00:33:46,159
message

00:33:46,240 --> 00:33:52,960
print full names

00:33:49,600 --> 00:33:56,480
and once you do that

00:33:52,960 --> 00:33:59,279
now i have a branch main on my local

00:33:56,480 --> 00:34:01,120
that is head of origin main by one

00:33:59,279 --> 00:34:03,600
comment

00:34:01,120 --> 00:34:05,200
and if i do a git log this time you will

00:34:03,600 --> 00:34:07,279
see three comments

00:34:05,200 --> 00:34:08,480
first two from maintainer and the third

00:34:07,279 --> 00:34:11,520
one from

00:34:08,480 --> 00:34:13,200
contributor called printful names

00:34:11,520 --> 00:34:15,520
the national next step is running the

00:34:13,200 --> 00:34:15,520
push

00:34:17,200 --> 00:34:22,800
and let's go back to github

00:34:20,240 --> 00:34:24,399
if i refresh you will see now there's

00:34:22,800 --> 00:34:26,639
three comments and the last one is

00:34:24,399 --> 00:34:28,720
called printful names

00:34:26,639 --> 00:34:31,040
and if you go into print.py you'll see

00:34:28,720 --> 00:34:34,399
it's only two lines now

00:34:31,040 --> 00:34:36,720
let's go back and notice

00:34:34,399 --> 00:34:37,839
this banner that says this branch is one

00:34:36,720 --> 00:34:41,119
commit ahead

00:34:37,839 --> 00:34:42,399
of os maintainers me so this is exactly

00:34:41,119 --> 00:34:44,320
what i want to do

00:34:42,399 --> 00:34:47,359
it brings me a prequest button if i

00:34:44,320 --> 00:34:50,879
click that pull request button

00:34:47,359 --> 00:34:54,079
um it's going to show me i want to merge

00:34:50,879 --> 00:34:56,480
contributors name print main branch

00:34:54,079 --> 00:34:57,280
back into maintainer's name print main

00:34:56,480 --> 00:34:59,920
branch

00:34:57,280 --> 00:35:01,359
and if i click create pre-request it's

00:34:59,920 --> 00:35:02,560
going to give me a space to add

00:35:01,359 --> 00:35:06,079
something nice

00:35:02,560 --> 00:35:08,800
you know say something nice maybe add

00:35:06,079 --> 00:35:08,800
reasoning to

00:35:09,040 --> 00:35:13,119
um and click create request as soon as

00:35:12,480 --> 00:35:15,280
you create

00:35:13,119 --> 00:35:17,040
you click that button your request is

00:35:15,280 --> 00:35:20,240
ready it's open

00:35:17,040 --> 00:35:23,520
submitted and there

00:35:20,240 --> 00:35:26,560
next step is switching back

00:35:23,520 --> 00:35:28,480
to maintainer's hat

00:35:26,560 --> 00:35:30,000
and you see the the previous state of

00:35:28,480 --> 00:35:32,320
the page didn't have any

00:35:30,000 --> 00:35:34,320
pull requests here if i refresh you'll

00:35:32,320 --> 00:35:38,960
notice a one

00:35:34,320 --> 00:35:43,760
pull request and if i go in here

00:35:38,960 --> 00:35:46,960
i can add like a reaction and then like

00:35:43,760 --> 00:35:48,640
i can't see the changes here

00:35:46,960 --> 00:35:50,560
i can look at the comments that cause

00:35:48,640 --> 00:35:54,000
those changes

00:35:50,560 --> 00:35:56,400
or i can leave a comment maybe saying

00:35:54,000 --> 00:35:56,400
thank you

00:35:57,599 --> 00:36:03,839
and merging the request is easy as

00:36:00,160 --> 00:36:03,839
clicking this button confirm merge

00:36:04,000 --> 00:36:09,040
if i go back to repository it will show

00:36:07,040 --> 00:36:12,560
me

00:36:09,040 --> 00:36:14,720
now we have four comments and

00:36:12,560 --> 00:36:16,079
first two are from maintainer a third

00:36:14,720 --> 00:36:18,640
one from contributor

00:36:16,079 --> 00:36:20,960
that changes print first names into

00:36:18,640 --> 00:36:24,839
print full names

00:36:20,960 --> 00:36:26,480
and an emerge comment created by create

00:36:24,839 --> 00:36:29,270
automatically

00:36:26,480 --> 00:36:31,119
that's that's the demo um and

00:36:29,270 --> 00:36:35,280
[Music]

00:36:31,119 --> 00:36:39,040
i hope it was useful uh before

00:36:35,280 --> 00:36:41,119
going away i i just had

00:36:39,040 --> 00:36:42,720
some closing notes where to go from here

00:36:41,119 --> 00:36:44,800
you know how do you find

00:36:42,720 --> 00:36:46,240
your first open source project to

00:36:44,800 --> 00:36:49,599
contribute to

00:36:46,240 --> 00:36:51,280
um the first thing people always say is

00:36:49,599 --> 00:36:53,200
you should take a look at applications

00:36:51,280 --> 00:36:56,240
you're already using because

00:36:53,200 --> 00:36:58,400
you are a uh

00:36:56,240 --> 00:37:00,160
a potential contributor to those

00:36:58,400 --> 00:37:00,480
applications you already know what they

00:37:00,160 --> 00:37:02,240
do

00:37:00,480 --> 00:37:04,160
you're already familiar with user

00:37:02,240 --> 00:37:06,000
interface etc

00:37:04,160 --> 00:37:08,320
so take a look at those maybe some of

00:37:06,000 --> 00:37:10,240
those are open source

00:37:08,320 --> 00:37:12,560
and some of those may be looking for

00:37:10,240 --> 00:37:15,359
help

00:37:12,560 --> 00:37:16,079
so that's that's one idea since this is

00:37:15,359 --> 00:37:18,480
a

00:37:16,079 --> 00:37:19,599
conference i would also recommend

00:37:18,480 --> 00:37:22,240
looking going to

00:37:19,599 --> 00:37:24,160
talks and maybe find people who are

00:37:22,240 --> 00:37:27,200
looking for help with their projects

00:37:24,160 --> 00:37:30,240
uh also exhibit hall is a great idea uh

00:37:27,200 --> 00:37:31,920
both in uh in-person conferences and and

00:37:30,240 --> 00:37:33,280
this conference as well

00:37:31,920 --> 00:37:35,200
even though it's an online conference

00:37:33,280 --> 00:37:36,400
there's an exhibit hall that you can

00:37:35,200 --> 00:37:39,839
visit

00:37:36,400 --> 00:37:43,040
and ask people if they you know

00:37:39,839 --> 00:37:44,320
are welcoming beginners

00:37:43,040 --> 00:37:46,320
there are some challenges like

00:37:44,320 --> 00:37:47,359
hacktoberfest it's a challenge that

00:37:46,320 --> 00:37:50,960
happens

00:37:47,359 --> 00:37:55,680
uh during the month of october

00:37:50,960 --> 00:37:59,200
it wants you to submit

00:37:55,680 --> 00:38:03,119
a decided amount of requests

00:37:59,200 --> 00:38:05,680
to projects that are opted

00:38:03,119 --> 00:38:07,599
in to hacktoberfest so you can't just go

00:38:05,680 --> 00:38:11,680
ahead and submit anything

00:38:07,599 --> 00:38:14,320
um but it's a it's a fun uh challenge

00:38:11,680 --> 00:38:16,560
and you can get uh swag as well you can

00:38:14,320 --> 00:38:19,680
get my free t-shirt

00:38:16,560 --> 00:38:20,320
uh request.club is a is a website i'm

00:38:19,680 --> 00:38:23,680
running

00:38:20,320 --> 00:38:25,920
uh where i'm trying to match maintainers

00:38:23,680 --> 00:38:28,960
to contributors

00:38:25,920 --> 00:38:31,359
um so maintainers sign up and they they

00:38:28,960 --> 00:38:35,280
just select some of their repositories

00:38:31,359 --> 00:38:37,440
which are added to the assignment pool

00:38:35,280 --> 00:38:38,720
and contributors sign up and they get

00:38:37,440 --> 00:38:41,520
random assignments

00:38:38,720 --> 00:38:42,400
from assignment pool each month the

00:38:41,520 --> 00:38:45,359
assignment is

00:38:42,400 --> 00:38:46,240
to submit one per request so it's fun if

00:38:45,359 --> 00:38:49,599
you're

00:38:46,240 --> 00:38:52,000
if that sounds interesting to you um

00:38:49,599 --> 00:38:54,000
sorry to interrupt just to remind you we

00:38:52,000 --> 00:38:58,560
have five minutes for me

00:38:54,000 --> 00:39:01,240
okay thank you um another

00:38:58,560 --> 00:39:03,359
challenge i can recommend is called

00:39:01,240 --> 00:39:05,119
pearlweeklychallenge.org

00:39:03,359 --> 00:39:07,680
and even though the the pearl is in the

00:39:05,119 --> 00:39:10,960
name i think it accepts

00:39:07,680 --> 00:39:14,079
um answers from other

00:39:10,960 --> 00:39:16,640
programming languages as well

00:39:14,079 --> 00:39:18,400
the way it works is each at the

00:39:16,640 --> 00:39:20,079
beginning of each week i think they

00:39:18,400 --> 00:39:21,680
release some questions

00:39:20,079 --> 00:39:24,720
that kind of look like interview

00:39:21,680 --> 00:39:27,040
questions so you get to

00:39:24,720 --> 00:39:28,640
both exercise with your interview

00:39:27,040 --> 00:39:31,280
questions skills

00:39:28,640 --> 00:39:33,040
and also with your uh request keep

00:39:31,280 --> 00:39:35,200
skills because they want you to

00:39:33,040 --> 00:39:36,320
submit your answers um through pull

00:39:35,200 --> 00:39:38,400
requests to

00:39:36,320 --> 00:39:39,359
uh to their github repositories so

00:39:38,400 --> 00:39:42,800
that's also

00:39:39,359 --> 00:39:45,200
something i can recommend

00:39:42,800 --> 00:39:46,480
i want to close with two book

00:39:45,200 --> 00:39:48,560
recommendations

00:39:46,480 --> 00:39:49,599
the first one is forge your future with

00:39:48,560 --> 00:39:52,560
open source by

00:39:49,599 --> 00:39:55,200
vm pressure who is a speaker at this

00:39:52,560 --> 00:39:57,440
very conference

00:39:55,200 --> 00:39:58,720
this book is a great movie it will i

00:39:57,440 --> 00:40:02,079
think it'll take you from

00:39:58,720 --> 00:40:03,839
zero to 100 gives you pretty much like

00:40:02,079 --> 00:40:06,720
everything you need to know

00:40:03,839 --> 00:40:08,240
about open source before uh joining a

00:40:06,720 --> 00:40:11,680
project before starting to

00:40:08,240 --> 00:40:13,599
you know contribute to a project

00:40:11,680 --> 00:40:16,079
and the second book i want to recommend

00:40:13,599 --> 00:40:17,839
is called how open source eight software

00:40:16,079 --> 00:40:21,359
by gordon half

00:40:17,839 --> 00:40:24,160
and that book will give you the

00:40:21,359 --> 00:40:25,040
historical aspect it will tell you how

00:40:24,160 --> 00:40:27,359
open source

00:40:25,040 --> 00:40:28,960
and you know free software became what

00:40:27,359 --> 00:40:32,319
they are today

00:40:28,960 --> 00:40:36,079
so that's a really fun book to read

00:40:32,319 --> 00:40:38,800
like that said i think that's all i have

00:40:36,079 --> 00:40:40,640
i'll go ahead and leave my email in zoom

00:40:38,800 --> 00:40:43,440
chat so if you have any questions feel

00:40:40,640 --> 00:40:43,440
free to contact

00:40:43,520 --> 00:40:51,119

YouTube URL: https://www.youtube.com/watch?v=Y7SWV8F1M-c


