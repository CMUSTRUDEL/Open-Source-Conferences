Title: Open Source Governance 101 - Nell Shamrell-Harrington - Microsoft - Open Source 101
Publication date: 2021-04-12
Playlist: Open Source 101 2021
Description: 
	Nell Shamrell-Harrington, Principal Software Engineer at Microsoft, delivered the "Open Source Governance 101" talk at the Open Source 101 conference on Tuesday, March 30, 2021.

Abstract:
It is one thing to put a project up on GitHub and call it “Open Source.” It is quite another to commit to growing and governing a project developed and maintained by contributors across the world. Both technical and community skills must be practiced simultaneously – a project cannot be successful with only one or the other. Come to this talk to learn about the critical duties of open source governance – including making it easy to contribute, troubleshooting, and managing contributions. Each concept will be accompanied by examples from real-life open source projects. Learn how to deal with upstream issues, how to say no in a constructive and empathetic way, and more!

Nell on the internets:
Twitter: https://twitter.com/nellshamrell?lang=en
Personal website: http://www.nellshamrell.com/
Captions: 
	00:00:05,200 --> 00:00:07,600
i'd like to

00:00:06,000 --> 00:00:09,280
start off this presentation with a

00:00:07,600 --> 00:00:12,320
question

00:00:09,280 --> 00:00:12,320
and that is

00:00:13,920 --> 00:00:17,920
what do you think of when you hear the

00:00:15,679 --> 00:00:19,840
words open source

00:00:17,920 --> 00:00:20,960
well if you're at a conference like this

00:00:19,840 --> 00:00:22,800
one i'm pretty sure

00:00:20,960 --> 00:00:24,880
there are words that are positive things

00:00:22,800 --> 00:00:26,000
like altruism free software and

00:00:24,880 --> 00:00:28,640
community

00:00:26,000 --> 00:00:30,880
we have all these warm fuzzy feelings

00:00:28,640 --> 00:00:33,200
around the idea of open source

00:00:30,880 --> 00:00:36,320
but the implementation of these ideas

00:00:33,200 --> 00:00:36,320
can be very different

00:00:36,640 --> 00:00:41,040
and that brings us to this question what

00:00:38,480 --> 00:00:43,360
makes a project open source

00:00:41,040 --> 00:00:45,600
i think for some people they believe

00:00:43,360 --> 00:00:47,360
that a project becomes open source when

00:00:45,600 --> 00:00:49,600
it is uploaded here

00:00:47,360 --> 00:00:51,680
to github it's public now so it must be

00:00:49,600 --> 00:00:54,399
open source right

00:00:51,680 --> 00:00:56,079
in my experience projects that stop here

00:00:54,399 --> 00:00:59,039
after being uploaded to github

00:00:56,079 --> 00:01:00,800
those projects tend to die sure someone

00:00:59,039 --> 00:01:01,359
somewhere might use it and i certainly

00:01:00,800 --> 00:01:03,359
do not

00:01:01,359 --> 00:01:04,479
want to discourage anyone from sharing

00:01:03,359 --> 00:01:06,400
code on github

00:01:04,479 --> 00:01:08,479
or gitlab or wherever you prefer to

00:01:06,400 --> 00:01:11,200
share it but

00:01:08,479 --> 00:01:11,760
it is one thing to upload a project to

00:01:11,200 --> 00:01:15,040
github

00:01:11,760 --> 00:01:15,759
and call it open source it is quite

00:01:15,040 --> 00:01:18,080
another

00:01:15,759 --> 00:01:19,520
to commit to governing a community of

00:01:18,080 --> 00:01:21,680
users and contributors

00:01:19,520 --> 00:01:23,200
to shepherding that project through its

00:01:21,680 --> 00:01:24,960
lifespan

00:01:23,200 --> 00:01:26,720
it almost goes without saying that open

00:01:24,960 --> 00:01:28,240
source governance can be hard

00:01:26,720 --> 00:01:30,079
that's probably why you're sitting here

00:01:28,240 --> 00:01:32,880
listening to a talk on it

00:01:30,079 --> 00:01:34,000
the reason it can be hard is because in

00:01:32,880 --> 00:01:35,840
open source governance

00:01:34,000 --> 00:01:37,840
technical skills and communication

00:01:35,840 --> 00:01:39,920
skills are intertwined

00:01:37,840 --> 00:01:42,479
you cannot have a successful open source

00:01:39,920 --> 00:01:46,799
project a project with lasting value

00:01:42,479 --> 00:01:46,799
with only one or the other

00:01:47,040 --> 00:01:50,479
the hardest parts of open source are not

00:01:49,200 --> 00:01:52,000
the technical parts

00:01:50,479 --> 00:01:53,759
nor are they necessarily the

00:01:52,000 --> 00:01:55,759
communication parts

00:01:53,759 --> 00:01:58,000
the hardest parts of open source are the

00:01:55,759 --> 00:02:01,040
places that technology and humanity

00:01:58,000 --> 00:02:02,880
intersect and even though these might be

00:02:01,040 --> 00:02:05,840
the hardest parts

00:02:02,880 --> 00:02:07,840
they are also the most vital they are

00:02:05,840 --> 00:02:10,160
what separate a successful project

00:02:07,840 --> 00:02:12,080
a project which evolves and grows and

00:02:10,160 --> 00:02:14,239
continues to expand its value

00:02:12,080 --> 00:02:15,440
from an unsuc successful project which

00:02:14,239 --> 00:02:18,239
is shared to github

00:02:15,440 --> 00:02:18,239
and then dies

00:02:18,560 --> 00:02:22,879
governing an open source project can

00:02:20,480 --> 00:02:24,959
sometimes seem like an impossible job

00:02:22,879 --> 00:02:26,319
even though i can't tell you it will

00:02:24,959 --> 00:02:28,640
ever be easy

00:02:26,319 --> 00:02:30,400
i can tell you successful open source

00:02:28,640 --> 00:02:32,480
governance as possible

00:02:30,400 --> 00:02:34,480
the reason i'm here today is because i

00:02:32,480 --> 00:02:36,879
have seen the success myself

00:02:34,480 --> 00:02:38,000
and i want to help you be successful in

00:02:36,879 --> 00:02:41,120
governing your own

00:02:38,000 --> 00:02:42,720
open source projects

00:02:41,120 --> 00:02:44,800
and with that let's pause a little bit

00:02:42,720 --> 00:02:46,720
about me i'm nell shamrell-harrington

00:02:44,800 --> 00:02:47,920
i'm a principal software engineer at

00:02:46,720 --> 00:02:50,400
microsoft

00:02:47,920 --> 00:02:51,599
i'm also a board member of the new rust

00:02:50,400 --> 00:02:54,000
foundation

00:02:51,599 --> 00:02:56,800
long time open source contributor to the

00:02:54,000 --> 00:02:59,360
chef projects to the rust projects

00:02:56,800 --> 00:03:00,959
to microsoft projects and many more and

00:02:59,360 --> 00:03:02,840
feel free to tweet at me at

00:03:00,959 --> 00:03:05,840
nell shamrell if you want to get in

00:03:02,840 --> 00:03:05,840
touch

00:03:06,319 --> 00:03:10,640
in my experience in open source as a

00:03:08,480 --> 00:03:12,000
user contributor and maintainer of

00:03:10,640 --> 00:03:13,760
multiple projects

00:03:12,000 --> 00:03:16,560
i found that the hardest parts can be

00:03:13,760 --> 00:03:18,800
condensed into three main categories

00:03:16,560 --> 00:03:21,120
i call these the three duties of open

00:03:18,800 --> 00:03:22,560
source governance

00:03:21,120 --> 00:03:25,280
and the first is to make it easy to

00:03:22,560 --> 00:03:27,200
contribute that might sound simple but

00:03:25,280 --> 00:03:28,640
it's not simple when you realize how

00:03:27,200 --> 00:03:31,280
many different types of development

00:03:28,640 --> 00:03:33,440
environments are out there

00:03:31,280 --> 00:03:34,480
the second duty is to assist users of

00:03:33,440 --> 00:03:36,400
the project

00:03:34,480 --> 00:03:39,840
as the maintainer you are on the front

00:03:36,400 --> 00:03:41,720
lines of answering requests for help

00:03:39,840 --> 00:03:44,319
and the third duty is to manage

00:03:41,720 --> 00:03:46,080
contributions to the project

00:03:44,319 --> 00:03:47,920
now these might sound pretty obvious and

00:03:46,080 --> 00:03:49,680
the ideas of them certainly are

00:03:47,920 --> 00:03:51,840
but when you get into the nitty-gritty

00:03:49,680 --> 00:03:54,080
of implementing these ideas in the real

00:03:51,840 --> 00:03:56,239
world it's anything but obvious

00:03:54,080 --> 00:03:57,920
and that's what this talk is about the

00:03:56,239 --> 00:03:59,200
things that come up in the real world

00:03:57,920 --> 00:04:00,000
when you're involved in open source

00:03:59,200 --> 00:04:03,760
governance

00:04:00,000 --> 00:04:05,120
and how to make it work

00:04:03,760 --> 00:04:07,120
with that let's start with the first

00:04:05,120 --> 00:04:08,480
duty of governance making it easy to

00:04:07,120 --> 00:04:10,879
contribute

00:04:08,480 --> 00:04:12,480
when we're experiencing those warm fuzzy

00:04:10,879 --> 00:04:13,040
feelings around contributing to open

00:04:12,480 --> 00:04:16,400
source

00:04:13,040 --> 00:04:18,639
we tend to think it involves two things

00:04:16,400 --> 00:04:19,680
the first is finding a project on github

00:04:18,639 --> 00:04:22,639
then forking it

00:04:19,680 --> 00:04:24,160
then making changes within that fork and

00:04:22,639 --> 00:04:25,440
then submitting those changes in a pull

00:04:24,160 --> 00:04:27,759
request

00:04:25,440 --> 00:04:28,960
this seems amazingly simple from the

00:04:27,759 --> 00:04:33,040
outside

00:04:28,960 --> 00:04:34,479
but there is a lot that happens in

00:04:33,040 --> 00:04:36,320
between these two steps

00:04:34,479 --> 00:04:37,600
of forking a project and submitting a

00:04:36,320 --> 00:04:39,280
pull request

00:04:37,600 --> 00:04:42,160
a lot of things that we don't always

00:04:39,280 --> 00:04:43,680
think about in particular

00:04:42,160 --> 00:04:45,600
one of the hardest parts of contributing

00:04:43,680 --> 00:04:47,199
to open source is just getting any

00:04:45,600 --> 00:04:49,520
development environment set up

00:04:47,199 --> 00:04:52,400
at all let alone one that is consistent

00:04:49,520 --> 00:04:53,919
with other contributors

00:04:52,400 --> 00:04:55,919
furthermore once you have set up the

00:04:53,919 --> 00:04:58,080
development environment and made changes

00:04:55,919 --> 00:04:59,199
you then have to test those changes

00:04:58,080 --> 00:05:00,479
and if setting up development

00:04:59,199 --> 00:05:01,840
environments on inconsistent

00:05:00,479 --> 00:05:03,280
workstations is hard

00:05:01,840 --> 00:05:06,639
running tests on inconsistent

00:05:03,280 --> 00:05:08,720
workstations is even worse

00:05:06,639 --> 00:05:10,160
some projects try to get around this by

00:05:08,720 --> 00:05:11,600
only supporting certain types of

00:05:10,160 --> 00:05:13,600
workstations

00:05:11,600 --> 00:05:14,880
and while this might help mask the

00:05:13,600 --> 00:05:15,680
problem of different development

00:05:14,880 --> 00:05:18,080
environments

00:05:15,680 --> 00:05:19,680
it also significantly narrows down the

00:05:18,080 --> 00:05:22,240
list of potential contributors

00:05:19,680 --> 00:05:24,880
and hinders this first duty of making it

00:05:22,240 --> 00:05:26,720
easy to contribute

00:05:24,880 --> 00:05:28,320
one solution which i have seen very

00:05:26,720 --> 00:05:29,280
effective is creating virtual

00:05:28,320 --> 00:05:31,120
workstations

00:05:29,280 --> 00:05:33,680
that a contributor can spin up on their

00:05:31,120 --> 00:05:35,759
local machine

00:05:33,680 --> 00:05:37,520
this is a project called clearly defined

00:05:35,759 --> 00:05:38,960
it's one of the main projects i work on

00:05:37,520 --> 00:05:41,199
at microsoft

00:05:38,960 --> 00:05:43,039
it scrapes various package repositories

00:05:41,199 --> 00:05:44,720
and open source repositories

00:05:43,039 --> 00:05:48,400
and gathers together licensing

00:05:44,720 --> 00:05:51,280
information for open source software

00:05:48,400 --> 00:05:53,360
and how this project is set up is it set

00:05:51,280 --> 00:05:55,280
up as a series of microservices

00:05:53,360 --> 00:05:56,560
we have our front end ui which is

00:05:55,280 --> 00:05:58,400
written in react

00:05:56,560 --> 00:05:59,600
we have our back end api which is

00:05:58,400 --> 00:06:01,840
written in node

00:05:59,600 --> 00:06:03,600
and then we have a crawler the crawler

00:06:01,840 --> 00:06:05,600
is also written in node and that's what

00:06:03,600 --> 00:06:08,720
crawls package repositories like

00:06:05,600 --> 00:06:11,840
npm like rubygems like crates.io

00:06:08,720 --> 00:06:14,400
and gathers that license information

00:06:11,840 --> 00:06:16,319
so that we can make a determination of

00:06:14,400 --> 00:06:20,319
what the license is most likely to

00:06:16,319 --> 00:06:22,400
be and serve that up to the user when i

00:06:20,319 --> 00:06:23,919
started at microsoft it took me a little

00:06:22,400 --> 00:06:25,280
over two weeks to get my development

00:06:23,919 --> 00:06:27,199
environment set up so

00:06:25,280 --> 00:06:28,639
i knew there had to be a better way and

00:06:27,199 --> 00:06:30,000
i knew if i was having trouble an

00:06:28,639 --> 00:06:32,000
external contributor was going to have

00:06:30,000 --> 00:06:36,240
even more trouble

00:06:32,000 --> 00:06:38,479
so what i did was created a dockerized

00:06:36,240 --> 00:06:40,479
development environment anyone who can

00:06:38,479 --> 00:06:42,240
run docker can use the same development

00:06:40,479 --> 00:06:44,240
environment as all the other maintainers

00:06:42,240 --> 00:06:45,840
through using docker compose

00:06:44,240 --> 00:06:47,600
they can choose to spin up only one of

00:06:45,840 --> 00:06:48,479
the microservices or they can choose to

00:06:47,600 --> 00:06:51,440
spin up

00:06:48,479 --> 00:06:52,800
any number or all of them to test how

00:06:51,440 --> 00:06:55,840
the different services

00:06:52,800 --> 00:06:57,759
interact and how they work together this

00:06:55,840 --> 00:06:59,440
works no matter what operating system

00:06:57,759 --> 00:07:02,160
someone is using it can be mac

00:06:59,440 --> 00:07:03,840
it can be linux it can be pc it probably

00:07:02,160 --> 00:07:05,680
can even be something like freebsd

00:07:03,840 --> 00:07:07,919
though i'm not 100 sure on that

00:07:05,680 --> 00:07:11,199
anything that can run docker can run

00:07:07,919 --> 00:07:11,199
this development environment

00:07:11,440 --> 00:07:15,759
the key thing to making this successful

00:07:14,160 --> 00:07:16,880
is to commit to supporting the

00:07:15,759 --> 00:07:19,280
development environment

00:07:16,880 --> 00:07:20,880
along with the rest of the project if

00:07:19,280 --> 00:07:23,039
the development environment breaks

00:07:20,880 --> 00:07:24,960
that means the project is broken and the

00:07:23,039 --> 00:07:26,479
first priority the maintainers needs to

00:07:24,960 --> 00:07:28,639
be to fix it

00:07:26,479 --> 00:07:30,639
in order to fulfill this first duty the

00:07:28,639 --> 00:07:31,280
maintainers need to keep the development

00:07:30,639 --> 00:07:35,039
environment

00:07:31,280 --> 00:07:35,039
functional at all times

00:07:35,919 --> 00:07:38,960
once someone has their development

00:07:37,280 --> 00:07:40,720
environment set up and has made changes

00:07:38,960 --> 00:07:42,880
to the code

00:07:40,720 --> 00:07:44,160
they then have to test those changes and

00:07:42,880 --> 00:07:45,520
if dealing with different development

00:07:44,160 --> 00:07:47,120
environments is a challenge

00:07:45,520 --> 00:07:50,960
trying to run tests in different

00:07:47,120 --> 00:07:52,560
environments is nearly impossible

00:07:50,960 --> 00:07:54,479
one way to help with this is to use a

00:07:52,560 --> 00:07:55,599
continuous integration service something

00:07:54,479 --> 00:07:58,639
like travis ci

00:07:55,599 --> 00:08:00,240
or circle ci or github actions

00:07:58,639 --> 00:08:01,919
these allow contributors to run

00:08:00,240 --> 00:08:02,720
automated tests in a consistent

00:08:01,919 --> 00:08:04,639
environment

00:08:02,720 --> 00:08:06,639
and avoids those problems where a test

00:08:04,639 --> 00:08:10,560
passes on one mach person's machine

00:08:06,639 --> 00:08:10,560
but fails on another person's machine

00:08:10,639 --> 00:08:15,759
this is crates.io the community software

00:08:13,520 --> 00:08:17,440
sharing site for the rust language

00:08:15,759 --> 00:08:19,280
in this project we have github actions

00:08:17,440 --> 00:08:20,960
set up so that every time someone opens

00:08:19,280 --> 00:08:23,120
a pull request

00:08:20,960 --> 00:08:25,039
it automatically kicks off a test run in

00:08:23,120 --> 00:08:26,960
several different environments

00:08:25,039 --> 00:08:28,960
once that test run is complete the

00:08:26,960 --> 00:08:32,159
results display in the pull request

00:08:28,960 --> 00:08:34,800
itself it returns consistent results

00:08:32,159 --> 00:08:37,120
and open source consistency consistency

00:08:34,800 --> 00:08:38,959
it can be uncommon but it's a beautiful

00:08:37,120 --> 00:08:40,640
thing when it happens

00:08:38,959 --> 00:08:42,800
even if someone has an environment where

00:08:40,640 --> 00:08:44,880
running the test locally is difficult

00:08:42,800 --> 00:08:46,640
they still have the option of to run

00:08:44,880 --> 00:08:49,279
them through opening a pull request

00:08:46,640 --> 00:08:49,680
and seeing the results it also makes

00:08:49,279 --> 00:08:51,279
things

00:08:49,680 --> 00:08:52,880
much easier for the maintainers when

00:08:51,279 --> 00:08:54,720
they are reviewing the pull request

00:08:52,880 --> 00:08:58,080
they can instantly see whether those

00:08:54,720 --> 00:08:58,080
automated tests pass

00:08:58,480 --> 00:09:02,080
there's certainly more to making

00:09:00,240 --> 00:09:03,920
contributing to a project easy

00:09:02,080 --> 00:09:05,360
but these two parts setting up the

00:09:03,920 --> 00:09:06,720
development environment and testing

00:09:05,360 --> 00:09:09,839
changes these are the ones that have

00:09:06,720 --> 00:09:11,519
given me the most grief historically

00:09:09,839 --> 00:09:13,600
luckily as we just saw there are

00:09:11,519 --> 00:09:15,600
solutions that make them easier

00:09:13,600 --> 00:09:17,040
maintaining those consistent development

00:09:15,600 --> 00:09:18,880
and testing environments it won't

00:09:17,040 --> 00:09:21,920
necessarily ever be easy

00:09:18,880 --> 00:09:23,440
but these solutions make it possible

00:09:21,920 --> 00:09:24,880
that's the first duty of open source

00:09:23,440 --> 00:09:26,640
governance making it easy on the

00:09:24,880 --> 00:09:30,240
contributors side even if it is not

00:09:26,640 --> 00:09:31,920
always easy on the maintainer side

00:09:30,240 --> 00:09:34,080
let's move on to the second duty

00:09:31,920 --> 00:09:36,000
assisting users with the project

00:09:34,080 --> 00:09:38,000
as an open source maintainer you are on

00:09:36,000 --> 00:09:40,560
the front lines of answering requests

00:09:38,000 --> 00:09:42,800
for help

00:09:40,560 --> 00:09:44,399
most requests for help come to an open

00:09:42,800 --> 00:09:44,959
source project come through a github

00:09:44,399 --> 00:09:46,640
issue

00:09:44,959 --> 00:09:48,320
these may be bug reports they may be

00:09:46,640 --> 00:09:50,000
feature requests or sometimes their

00:09:48,320 --> 00:09:53,120
combination of both

00:09:50,000 --> 00:09:55,600
when the issue is a bug report the hard

00:09:53,120 --> 00:09:57,519
part is often replicating the issue

00:09:55,600 --> 00:09:59,440
especially when your project has many

00:09:57,519 --> 00:10:02,640
dependencies and is used in many

00:09:59,440 --> 00:10:04,959
different types of environments

00:10:02,640 --> 00:10:06,959
sometimes the issue actually isn't in

00:10:04,959 --> 00:10:08,640
your project at all but it's an upstream

00:10:06,959 --> 00:10:09,600
it's in an upstream dependency of your

00:10:08,640 --> 00:10:11,760
project

00:10:09,600 --> 00:10:14,480
this is also a hard part and we'll cover

00:10:11,760 --> 00:10:16,480
how to deal with that in just a moment

00:10:14,480 --> 00:10:18,480
but first let's concentrate on

00:10:16,480 --> 00:10:20,640
replicating an issue

00:10:18,480 --> 00:10:22,320
it is especially hard to do this when

00:10:20,640 --> 00:10:23,920
the person who filed the issue

00:10:22,320 --> 00:10:26,079
is using the project in a different

00:10:23,920 --> 00:10:27,920
environment than you as the maintainer

00:10:26,079 --> 00:10:30,640
they may be seeing a bug that only shows

00:10:27,920 --> 00:10:32,240
up in very specific conditions

00:10:30,640 --> 00:10:33,839
well it's never going to be easy but

00:10:32,240 --> 00:10:36,240
there are things you can do to make

00:10:33,839 --> 00:10:37,279
replicating an issue faster and more

00:10:36,240 --> 00:10:40,240
effective

00:10:37,279 --> 00:10:42,800
let's look at a real example this is the

00:10:40,240 --> 00:10:45,040
repository for vs code it's an editor

00:10:42,800 --> 00:10:46,800
a lot of you are probably familiar with

00:10:45,040 --> 00:10:48,240
people use vs code on many different

00:10:46,800 --> 00:10:51,120
workstations to create

00:10:48,240 --> 00:10:52,079
many different types of applications

00:10:51,120 --> 00:10:53,600
this means the

00:10:52,079 --> 00:10:55,440
number of potentially different

00:10:53,600 --> 00:10:58,560
conditions where someone might see a bug

00:10:55,440 --> 00:11:00,000
is quite high when a user sees a bug we

00:10:58,560 --> 00:11:04,000
need to know exactly how they are

00:11:00,000 --> 00:11:06,320
running vs code in order to diagnose it

00:11:04,000 --> 00:11:07,440
to help with this vs code uses a

00:11:06,320 --> 00:11:09,440
built-in template that

00:11:07,440 --> 00:11:10,720
auto-populates whenever someone opens up

00:11:09,440 --> 00:11:12,240
a github issue

00:11:10,720 --> 00:11:13,839
this lays out exactly what the

00:11:12,240 --> 00:11:16,399
maintainers need to know about a user's

00:11:13,839 --> 00:11:18,959
environment and tells them upfront what

00:11:16,399 --> 00:11:20,640
information they need to provide

00:11:18,959 --> 00:11:22,560
it's very hard to miss that you need to

00:11:20,640 --> 00:11:24,480
provide certain information or certain

00:11:22,560 --> 00:11:25,279
environmental details when the template

00:11:24,480 --> 00:11:28,240
appears

00:11:25,279 --> 00:11:30,240
anytime you file an issue templates are

00:11:28,240 --> 00:11:33,360
one of the most helpful things you can

00:11:30,240 --> 00:11:33,360
implement in your project

00:11:33,760 --> 00:11:37,279
remember what might be obvious to the

00:11:35,519 --> 00:11:40,160
maintainer of an open source project

00:11:37,279 --> 00:11:41,839
is not always obvious to a user it saves

00:11:40,160 --> 00:11:43,839
a lot of time and a lot of back and

00:11:41,839 --> 00:11:44,880
forth by stating exactly what you need

00:11:43,839 --> 00:11:48,720
up front

00:11:44,880 --> 00:11:48,720
where the user cannot miss it

00:11:49,440 --> 00:11:53,760
after reproducing a bug it's not

00:11:51,680 --> 00:11:55,600
uncommon for it to be due to an upstream

00:11:53,760 --> 00:11:58,240
dependency of the project

00:11:55,600 --> 00:11:59,760
rather than the project itself in cases

00:11:58,240 --> 00:12:02,000
like these it can be tempting to close

00:11:59,760 --> 00:12:05,040
an issue as not my problem

00:12:02,000 --> 00:12:07,120
but if the problem manifests

00:12:05,040 --> 00:12:08,639
in your project even if it's due to an

00:12:07,120 --> 00:12:12,399
external dependency

00:12:08,639 --> 00:12:12,399
it is your problem

00:12:12,720 --> 00:12:15,920
as a maintainer it is your

00:12:14,320 --> 00:12:17,760
responsibility to one

00:12:15,920 --> 00:12:19,760
communicate the issue to the maintainers

00:12:17,760 --> 00:12:22,480
of the upstream project

00:12:19,760 --> 00:12:23,440
and two communicate to the person or

00:12:22,480 --> 00:12:26,320
persons who file

00:12:23,440 --> 00:12:28,240
the issue in your project and three

00:12:26,320 --> 00:12:30,399
update the issue in your project

00:12:28,240 --> 00:12:32,480
regularly with the progress of the

00:12:30,399 --> 00:12:34,720
upstream issue being fixed

00:12:32,480 --> 00:12:35,839
it is your responsibility to keep your

00:12:34,720 --> 00:12:38,000
users informed

00:12:35,839 --> 00:12:40,399
and to let them know when the issue is

00:12:38,000 --> 00:12:40,399
fixed

00:12:41,200 --> 00:12:45,440
if the upstream maintainer is ultimately

00:12:43,440 --> 00:12:46,800
not able to fix the issue and i

00:12:45,440 --> 00:12:48,399
recommend giving them at least a day to

00:12:46,800 --> 00:12:49,920
respond and sometimes a little more than

00:12:48,399 --> 00:12:51,680
that to get the fix in

00:12:49,920 --> 00:12:53,440
but if you still cannot get a response

00:12:51,680 --> 00:12:55,279
from them you will need to consider

00:12:53,440 --> 00:12:57,279
changing the dependency

00:12:55,279 --> 00:12:58,639
sometimes a maintainer will go dark it

00:12:57,279 --> 00:13:00,800
definitely happens

00:12:58,639 --> 00:13:03,360
as an open source maintainer you need to

00:13:00,800 --> 00:13:07,200
prep be prepared to change dependencies

00:13:03,360 --> 00:13:08,800
when needed

00:13:07,200 --> 00:13:10,560
there are certainly more parts to

00:13:08,800 --> 00:13:11,200
assisting with open source project but

00:13:10,560 --> 00:13:12,800
these two

00:13:11,200 --> 00:13:14,959
replicating issues and dealing with

00:13:12,800 --> 00:13:16,800
upstream issues are among the most

00:13:14,959 --> 00:13:18,800
frequent that come up

00:13:16,800 --> 00:13:20,639
dealing with them can be hard but it is

00:13:18,800 --> 00:13:22,399
certainly possible

00:13:20,639 --> 00:13:24,399
and that covers the second duty of open

00:13:22,399 --> 00:13:27,279
source governance so

00:13:24,399 --> 00:13:29,600
let's talk about the third duty managing

00:13:27,279 --> 00:13:31,440
contributions to the project

00:13:29,600 --> 00:13:33,120
there are two main parts to managing

00:13:31,440 --> 00:13:35,839
contributions when you are an open

00:13:33,120 --> 00:13:35,839
source maintainer

00:13:35,920 --> 00:13:39,680
the first is determining whether

00:13:37,440 --> 00:13:40,959
contribution adds value to the project

00:13:39,680 --> 00:13:44,079
we'll go a little more in depth on

00:13:40,959 --> 00:13:45,760
exactly how to do that shortly

00:13:44,079 --> 00:13:47,760
and the other is when a contribution

00:13:45,760 --> 00:13:49,839
ultimately does not add value

00:13:47,760 --> 00:13:51,279
saying no in a way which still can

00:13:49,839 --> 00:13:54,000
supports the contributor

00:13:51,279 --> 00:13:54,720
and treats both them and their work with

00:13:54,000 --> 00:13:57,519
empathy

00:13:54,720 --> 00:13:57,519
and respect

00:13:58,240 --> 00:14:04,079
first let's go over a few things that

00:14:00,079 --> 00:14:05,519
definitely add value to a project

00:14:04,079 --> 00:14:08,000
and the first one i want to highlight is

00:14:05,519 --> 00:14:10,480
documentation this is by far

00:14:08,000 --> 00:14:12,320
the most useful contribution to receive

00:14:10,480 --> 00:14:13,440
especially as there is no better

00:14:12,320 --> 00:14:15,040
documentation

00:14:13,440 --> 00:14:17,279
than what comes from someone who is

00:14:15,040 --> 00:14:19,279
actively using the project

00:14:17,279 --> 00:14:21,120
when i maintain an open source project i

00:14:19,279 --> 00:14:22,160
become so used to looking at it and

00:14:21,120 --> 00:14:24,320
understanding it

00:14:22,160 --> 00:14:26,320
that is easy for me to lose sight of

00:14:24,320 --> 00:14:28,639
what someone using the project without

00:14:26,320 --> 00:14:30,079
my perspective experiences

00:14:28,639 --> 00:14:31,839
any contributions which make that

00:14:30,079 --> 00:14:36,000
experience easier are very

00:14:31,839 --> 00:14:37,920
valuable and the next is typo fixes

00:14:36,000 --> 00:14:39,839
occasionally typos do sneak into

00:14:37,920 --> 00:14:41,440
projects hopefully not in the actual

00:14:39,839 --> 00:14:41,920
code that executes though i have seen

00:14:41,440 --> 00:14:43,600
that

00:14:41,920 --> 00:14:46,240
but also in other aspects like

00:14:43,600 --> 00:14:48,320
documentation and instructions

00:14:46,240 --> 00:14:49,839
at best they make the pro typos make the

00:14:48,320 --> 00:14:51,360
project look unprofessional

00:14:49,839 --> 00:14:54,160
and at worst they can be outright

00:14:51,360 --> 00:14:55,760
misleading as a maintainer i have often

00:14:54,160 --> 00:14:57,279
been staring at the code and

00:14:55,760 --> 00:15:00,560
documentation for so long

00:14:57,279 --> 00:15:02,480
that my eyes just glaze over small typos

00:15:00,560 --> 00:15:04,399
too many typos makes a project hard to

00:15:02,480 --> 00:15:05,760
understand and corrections to those

00:15:04,399 --> 00:15:10,000
typos are very

00:15:05,760 --> 00:15:12,560
valuable small bug fixes are another

00:15:10,000 --> 00:15:14,000
major thing that add value to a project

00:15:12,560 --> 00:15:15,839
one of my absolute favorite types of

00:15:14,000 --> 00:15:17,199
pull requests to receive is when someone

00:15:15,839 --> 00:15:18,880
has found a minor bug

00:15:17,199 --> 00:15:21,120
and reported it by fixing it and

00:15:18,880 --> 00:15:23,199
submitting a pull request

00:15:21,120 --> 00:15:24,800
whenever a pull request fits into one of

00:15:23,199 --> 00:15:27,600
these categories things which

00:15:24,800 --> 00:15:28,800
which definitely add value i often merge

00:15:27,600 --> 00:15:31,440
them that same day

00:15:28,800 --> 00:15:35,360
sometimes within the same hour because

00:15:31,440 --> 00:15:35,360
the value they add is immediate

00:15:36,160 --> 00:15:40,000
now let's talk about the flip side there

00:15:38,480 --> 00:15:43,519
are a few things that definitely

00:15:40,000 --> 00:15:46,720
do not add value to a project

00:15:43,519 --> 00:15:48,399
and this includes white space changes

00:15:46,720 --> 00:15:51,519
this comes up more often than you would

00:15:48,399 --> 00:15:53,839
think unless a project has a style guide

00:15:51,519 --> 00:15:56,320
and you are correcting a violation to it

00:15:53,839 --> 00:15:57,600
white space changes do not add value to

00:15:56,320 --> 00:15:59,920
a project

00:15:57,600 --> 00:16:02,079
my guiding rule is that if it if the

00:15:59,920 --> 00:16:04,959
pull requests changing white space

00:16:02,079 --> 00:16:06,800
does not viola my guiding rule is that

00:16:04,959 --> 00:16:07,600
if it does not violate an established

00:16:06,800 --> 00:16:10,800
style guide

00:16:07,600 --> 00:16:12,240
leave it alone white space changes just

00:16:10,800 --> 00:16:13,759
for the sake of white space

00:16:12,240 --> 00:16:15,839
white space changes cause merge

00:16:13,759 --> 00:16:17,040
conflicts and the value add is

00:16:15,839 --> 00:16:18,800
negligible

00:16:17,040 --> 00:16:20,720
if i as a maintainer receive a pull

00:16:18,800 --> 00:16:22,639
request that only changes white space

00:16:20,720 --> 00:16:25,199
and it's not related to

00:16:22,639 --> 00:16:28,000
uh established style convention i will

00:16:25,199 --> 00:16:28,000
not merge it

00:16:28,959 --> 00:16:33,199
the other thing that does not add value

00:16:30,880 --> 00:16:33,839
to a project is big features i'm talking

00:16:33,199 --> 00:16:36,880
more than a

00:16:33,839 --> 00:16:38,480
hundred lines of non-test code when the

00:16:36,880 --> 00:16:40,079
contributor has not talked to the

00:16:38,480 --> 00:16:42,480
maintainer first

00:16:40,079 --> 00:16:43,839
this is because it may not fit in with

00:16:42,480 --> 00:16:45,199
the plan for the project

00:16:43,839 --> 00:16:47,759
or it may be something that is already

00:16:45,199 --> 00:16:49,920
in the works but not yet public

00:16:47,759 --> 00:16:51,600
it is truly heartbreaking to have

00:16:49,920 --> 00:16:52,320
someone spend a ton of time on a new

00:16:51,600 --> 00:16:54,560
feature

00:16:52,320 --> 00:16:56,560
only to have to close their pull request

00:16:54,560 --> 00:16:58,320
without merging it

00:16:56,560 --> 00:16:59,680
large features when a contributor has

00:16:58,320 --> 00:17:02,720
not talked to the maintainer

00:16:59,680 --> 00:17:04,240
first do not add value

00:17:02,720 --> 00:17:06,160
so now we've covered a few things that

00:17:04,240 --> 00:17:07,919
definitely add value and a few things

00:17:06,160 --> 00:17:08,640
that definitely do not add value to a

00:17:07,919 --> 00:17:10,559
project

00:17:08,640 --> 00:17:12,720
and it certainly would be really nice if

00:17:10,559 --> 00:17:15,839
all pull requests were this clear

00:17:12,720 --> 00:17:16,799
but more often than not pull requests

00:17:15,839 --> 00:17:21,039
are for things that

00:17:16,799 --> 00:17:21,039
sometimes add value to a project

00:17:21,280 --> 00:17:24,799
the first is small features something

00:17:23,520 --> 00:17:27,280
that is not a bug fix

00:17:24,799 --> 00:17:29,120
but adds new behavior i consider a

00:17:27,280 --> 00:17:30,880
feature small when it is less than a

00:17:29,120 --> 00:17:34,960
hundred lines of non-test

00:17:30,880 --> 00:17:36,080
code and sometimes even large features

00:17:34,960 --> 00:17:37,919
add value

00:17:36,080 --> 00:17:39,440
but only if the person opening the pull

00:17:37,919 --> 00:17:40,880
request has talked to the maintainer

00:17:39,440 --> 00:17:42,720
beforehand

00:17:40,880 --> 00:17:44,240
again it is heartbreaking when someone

00:17:42,720 --> 00:17:45,600
has clearly spent a ton of time and

00:17:44,240 --> 00:17:47,600
effort on a pull request

00:17:45,600 --> 00:17:49,120
but as a maintainer i have to reject it

00:17:47,600 --> 00:17:52,960
because it just is not

00:17:49,120 --> 00:17:52,960
right for the project at that time

00:17:53,600 --> 00:17:57,120
so if these sometimes add value and

00:17:55,440 --> 00:17:59,280
sometimes do not have value

00:17:57,120 --> 00:18:01,360
how do you determine which is the case

00:17:59,280 --> 00:18:02,960
at any given time

00:18:01,360 --> 00:18:05,039
when a pull request comes in and you're

00:18:02,960 --> 00:18:07,440
not sure of the value it helps to ask a

00:18:05,039 --> 00:18:10,559
few key questions

00:18:07,440 --> 00:18:12,400
one does it fix an existing issue

00:18:10,559 --> 00:18:14,559
when a pull request fixes an existing

00:18:12,400 --> 00:18:15,360
issue or fulfills an existing feature

00:18:14,559 --> 00:18:17,520
request

00:18:15,360 --> 00:18:19,440
there is often value in that especially

00:18:17,520 --> 00:18:21,360
if multiple people have requested the

00:18:19,440 --> 00:18:22,960
same thing

00:18:21,360 --> 00:18:24,720
the second thing to consider is if the

00:18:22,960 --> 00:18:25,600
pull request replicates work that has

00:18:24,720 --> 00:18:28,000
already been done

00:18:25,600 --> 00:18:29,600
elsewhere occasionally multiple people

00:18:28,000 --> 00:18:30,559
will submit pull requests that fix the

00:18:29,600 --> 00:18:32,160
same issue

00:18:30,559 --> 00:18:34,080
and you as the maintainer then have to

00:18:32,160 --> 00:18:35,200
compare them to determine which might

00:18:34,080 --> 00:18:37,120
solve the issue

00:18:35,200 --> 00:18:40,080
in the best way for the project at that

00:18:37,120 --> 00:18:40,080
particular time

00:18:40,320 --> 00:18:43,679
and the final key question is whether a

00:18:42,799 --> 00:18:46,480
pull request

00:18:43,679 --> 00:18:47,760
affects in progress work if it is

00:18:46,480 --> 00:18:49,520
something that will potentially cause

00:18:47,760 --> 00:18:51,120
nasty merge conflicts with development

00:18:49,520 --> 00:18:53,120
that is already in flight

00:18:51,120 --> 00:18:55,440
the value of that pull request might be

00:18:53,120 --> 00:18:56,000
negative at least until the in-flight

00:18:55,440 --> 00:19:00,080
work is

00:18:56,000 --> 00:19:02,000
complete the biggest thing to remember

00:19:00,080 --> 00:19:03,440
is that a contribution returns negative

00:19:02,000 --> 00:19:06,720
value when it makes

00:19:03,440 --> 00:19:08,240
other contributions harder even if it is

00:19:06,720 --> 00:19:10,400
something that might actually be the

00:19:08,240 --> 00:19:11,440
superior option purely from a technical

00:19:10,400 --> 00:19:13,200
standpoint

00:19:11,440 --> 00:19:15,440
if it makes contributions from others

00:19:13,200 --> 00:19:17,919
harder it does not add value to the

00:19:15,440 --> 00:19:17,919
project

00:19:18,400 --> 00:19:22,400
when something ultimately does not end

00:19:20,400 --> 00:19:25,360
up adding value it is crucial

00:19:22,400 --> 00:19:26,400
to one communicate it and two

00:19:25,360 --> 00:19:29,760
communicate it

00:19:26,400 --> 00:19:31,919
in a supportive way

00:19:29,760 --> 00:19:33,360
open source projects live and die by

00:19:31,919 --> 00:19:34,799
community engagement

00:19:33,360 --> 00:19:37,039
if someone's first experience with your

00:19:34,799 --> 00:19:38,240
project is awful chances are they are

00:19:37,039 --> 00:19:40,400
not going to come back

00:19:38,240 --> 00:19:43,280
and they might warn others to stay away

00:19:40,400 --> 00:19:43,280
from your project

00:19:43,520 --> 00:19:48,960
always always always say thank you

00:19:47,120 --> 00:19:50,320
even if the pull request is something i

00:19:48,960 --> 00:19:52,720
as a maintainer cannot

00:19:50,320 --> 00:19:54,320
ultimately use i need to recognize that

00:19:52,720 --> 00:19:56,320
someone went through the time and effort

00:19:54,320 --> 00:19:57,280
to put together that pull request and

00:19:56,320 --> 00:19:58,640
submit it

00:19:57,280 --> 00:20:00,559
that the person who opened the poll

00:19:58,640 --> 00:20:01,280
request is most likely a well-meaning

00:20:00,559 --> 00:20:03,919
human being

00:20:01,280 --> 00:20:07,520
who has taken an interest in my project

00:20:03,919 --> 00:20:09,120
in addition to saying thank you

00:20:07,520 --> 00:20:10,880
if you do not end up merging a pull

00:20:09,120 --> 00:20:13,679
request always always

00:20:10,880 --> 00:20:15,440
always say why there is little more

00:20:13,679 --> 00:20:17,039
frustrating for a contributor to spend a

00:20:15,440 --> 00:20:18,240
lot of time on a pull request

00:20:17,039 --> 00:20:19,440
even if it's something they really

00:20:18,240 --> 00:20:20,559
should have talked to the maintainer

00:20:19,440 --> 00:20:22,559
about first

00:20:20,559 --> 00:20:25,120
and then have it just be closed without

00:20:22,559 --> 00:20:26,480
any explanation of why

00:20:25,120 --> 00:20:28,240
sometimes it's because of a technical

00:20:26,480 --> 00:20:29,760
reason sometimes it's because it

00:20:28,240 --> 00:20:32,080
conflicts with in-flight work

00:20:29,760 --> 00:20:33,280
and sometimes it just isn't the right

00:20:32,080 --> 00:20:36,799
thing for the project

00:20:33,280 --> 00:20:38,640
at that time regardless of the reason

00:20:36,799 --> 00:20:40,480
always at least give your contributors

00:20:38,640 --> 00:20:41,760
the benefit of knowing why their work

00:20:40,480 --> 00:20:44,640
was not merged

00:20:41,760 --> 00:20:48,240
it's frankly just cruel to live them to

00:20:44,640 --> 00:20:50,320
leave them in limbo

00:20:48,240 --> 00:20:51,600
these parts are managing contributions

00:20:50,320 --> 00:20:53,280
determining the value

00:20:51,600 --> 00:20:55,039
and communicating the decision on the

00:20:53,280 --> 00:20:56,400
value these are some of the hardest

00:20:55,039 --> 00:20:59,919
parts of open source

00:20:56,400 --> 00:21:00,480
because they more than perhaps anything

00:20:59,919 --> 00:21:02,480
else

00:21:00,480 --> 00:21:03,520
touch on that intersection of technology

00:21:02,480 --> 00:21:05,760
and humanity

00:21:03,520 --> 00:21:08,320
both the humans using the technology and

00:21:05,760 --> 00:21:10,799
the humans creating the technology

00:21:08,320 --> 00:21:13,120
even though these parts are the hardest

00:21:10,799 --> 00:21:14,640
again they are the most vital

00:21:13,120 --> 00:21:16,720
they are what separate a successful

00:21:14,640 --> 00:21:18,240
project a project with which lives and

00:21:16,720 --> 00:21:20,480
evolves and grows

00:21:18,240 --> 00:21:22,320
that people stay engaged in from an

00:21:20,480 --> 00:21:26,320
unsuccessful project where engagement

00:21:22,320 --> 00:21:26,320
tapers off and the project dies

00:21:26,559 --> 00:21:30,159
open source governance can sometimes

00:21:28,480 --> 00:21:31,679
seem like an impossible job

00:21:30,159 --> 00:21:33,600
but what i hope you take away from this

00:21:31,679 --> 00:21:34,320
talk is that even though it may not be

00:21:33,600 --> 00:21:38,320
easy

00:21:34,320 --> 00:21:40,720
it is possible to be successful with it

00:21:38,320 --> 00:21:40,720
thank you

00:21:42,080 --> 00:21:46,880
and with that i'm going to go ahead and

00:21:44,000 --> 00:21:46,880
unshare my screen

00:21:47,360 --> 00:21:51,840
and i believe we have time for some

00:21:49,360 --> 00:21:54,960
questions

00:21:51,840 --> 00:21:56,320
so i'm not seeing any in the q a now

00:21:54,960 --> 00:21:59,840
if you have any questions please feel

00:21:56,320 --> 00:21:59,840
free to put them in there

00:22:21,919 --> 00:22:25,520
i know asking the first question is

00:22:23,679 --> 00:22:26,640
always a little bit uh

00:22:25,520 --> 00:22:28,559
difficult especially when you're a

00:22:26,640 --> 00:22:30,880
little bit shy like i am uh

00:22:28,559 --> 00:22:32,240
so don't be shy feel free to ask

00:22:30,880 --> 00:22:33,840
anything you've always wanted to know

00:22:32,240 --> 00:22:35,039
about open source or anything

00:22:33,840 --> 00:22:37,840
you want to know about open source

00:22:35,039 --> 00:22:40,159
governance oh there's a question

00:22:37,840 --> 00:22:42,000
is it embarrassing for a project to only

00:22:40,159 --> 00:22:44,960
have one contributor

00:22:42,000 --> 00:22:46,640
i it depends on the project if it's a

00:22:44,960 --> 00:22:50,000
project that let's say it's

00:22:46,640 --> 00:22:53,280
a you an mpm package

00:22:50,000 --> 00:22:54,720
a very small npm package that

00:22:53,280 --> 00:22:56,400
only does a specific thing for a

00:22:54,720 --> 00:22:58,799
specific use case

00:22:56,400 --> 00:22:59,760
that might be okay for it to only have

00:22:58,799 --> 00:23:01,919
one contributor

00:22:59,760 --> 00:23:03,360
but if it has one contributor you still

00:23:01,919 --> 00:23:05,679
want to make it

00:23:03,360 --> 00:23:06,960
able to be contributed to by more people

00:23:05,679 --> 00:23:08,080
so you still want things like a

00:23:06,960 --> 00:23:11,840
contribution file

00:23:08,080 --> 00:23:14,480
you still want that uh cia cd set up

00:23:11,840 --> 00:23:14,880
so is it embarrassing i don't think so

00:23:14,480 --> 00:23:16,799
where

00:23:14,880 --> 00:23:17,919
would not usually but where it would be

00:23:16,799 --> 00:23:20,320
embarrassing if

00:23:17,919 --> 00:23:22,159
it's a major corporation that has said

00:23:20,320 --> 00:23:23,840
we are going open source

00:23:22,159 --> 00:23:25,440
and then the only contributors after the

00:23:23,840 --> 00:23:26,000
project has been open source for a year

00:23:25,440 --> 00:23:28,720
or two

00:23:26,000 --> 00:23:30,159
are employees of that company that does

00:23:28,720 --> 00:23:32,640
happen a lot and

00:23:30,159 --> 00:23:34,559
that might be an open code project but

00:23:32,640 --> 00:23:36,000
if there's not a community around it i

00:23:34,559 --> 00:23:39,919
don't personally identify that

00:23:36,000 --> 00:23:40,320
as an open source project so it depends

00:23:39,919 --> 00:23:42,080
is

00:23:40,320 --> 00:23:45,279
like so many so many questions that

00:23:42,080 --> 00:23:45,279
that's the answer it depends

00:23:45,600 --> 00:23:49,039
uh cool another question other than

00:23:47,279 --> 00:23:50,640
github what are where are other good

00:23:49,039 --> 00:23:53,360
places to share projects

00:23:50,640 --> 00:23:53,679
uh gitlab uh is one i there's a number

00:23:53,360 --> 00:23:57,360
of

00:23:53,679 --> 00:24:00,320
uh open source projects there um

00:23:57,360 --> 00:24:01,919
there there's some for if you if you

00:24:00,320 --> 00:24:04,159
don't use git if you use something like

00:24:01,919 --> 00:24:06,000
svn or other places those also have

00:24:04,159 --> 00:24:09,039
places to share projects

00:24:06,000 --> 00:24:10,960
so github git lab a source repository

00:24:09,039 --> 00:24:12,640
any kind of source repository is a good

00:24:10,960 --> 00:24:15,200
place to share projects

00:24:12,640 --> 00:24:15,760
i would say for sharing the code at

00:24:15,200 --> 00:24:18,240
least

00:24:15,760 --> 00:24:19,200
i would say for sharing the you know

00:24:18,240 --> 00:24:21,840
executable

00:24:19,200 --> 00:24:23,039
build of the project something like npm

00:24:21,840 --> 00:24:26,159
if it's a no project

00:24:23,039 --> 00:24:33,840
crates.i o if it's rust crate one of the

00:24:26,159 --> 00:24:33,840
major community sharing sites

00:24:40,640 --> 00:24:47,840
waiting on some other questions

00:25:09,360 --> 00:25:13,840
anonymous attendee asks how to make

00:25:12,320 --> 00:25:15,039
money by open source

00:25:13,840 --> 00:25:17,440
unfortunately i couldn't attend the

00:25:15,039 --> 00:25:18,640
meeting with that title uh well i would

00:25:17,440 --> 00:25:21,360
definitely uh

00:25:18,640 --> 00:25:23,200
look at the recording uh for that one

00:25:21,360 --> 00:25:24,320
but if you're talking i mean the best

00:25:23,200 --> 00:25:26,080
thing

00:25:24,320 --> 00:25:27,600
i've best way i've found to make money

00:25:26,080 --> 00:25:30,159
doing open source is to

00:25:27,600 --> 00:25:31,760
join a company that is already producing

00:25:30,159 --> 00:25:32,480
some of his products in an open source

00:25:31,760 --> 00:25:34,480
fashion

00:25:32,480 --> 00:25:36,400
uh before i worked at microsoft i worked

00:25:34,480 --> 00:25:37,360
at mozilla a lot of their products are

00:25:36,400 --> 00:25:39,200
open source

00:25:37,360 --> 00:25:40,960
they are a profitable company before

00:25:39,200 --> 00:25:41,520
that i worked at chef a lot of their

00:25:40,960 --> 00:25:44,640
products

00:25:41,520 --> 00:25:45,520
are open sourced uh what chef did is

00:25:44,640 --> 00:25:47,840
they

00:25:45,520 --> 00:25:49,039
made a change where the code for all

00:25:47,840 --> 00:25:51,840
their major products was

00:25:49,039 --> 00:25:53,679
open source but the binary builds they

00:25:51,840 --> 00:25:55,600
created from that code

00:25:53,679 --> 00:25:57,120
those required a license that required

00:25:55,600 --> 00:25:58,480
people to pay for them

00:25:57,120 --> 00:25:59,919
it was a pretty it was kind of a

00:25:58,480 --> 00:26:01,760
controversial change it was very

00:25:59,919 --> 00:26:02,320
interesting but that is one way they do

00:26:01,760 --> 00:26:04,080
it

00:26:02,320 --> 00:26:05,360
if you're an independent developer

00:26:04,080 --> 00:26:08,640
github sponsors

00:26:05,360 --> 00:26:10,000
can be a possibility uh you can have a

00:26:08,640 --> 00:26:12,240
project uploaded to github

00:26:10,000 --> 00:26:13,840
sponsors and ask people to help support

00:26:12,240 --> 00:26:14,480
you doing it by sponsoring you through

00:26:13,840 --> 00:26:16,799
that

00:26:14,480 --> 00:26:18,000
i've seen people use patreon and there's

00:26:16,799 --> 00:26:19,600
a few others

00:26:18,000 --> 00:26:21,360
so it depends on whether you want to

00:26:19,600 --> 00:26:22,240
work for a major corporation or whether

00:26:21,360 --> 00:26:25,840
you want to be an

00:26:22,240 --> 00:26:25,840
independent developer

00:26:32,480 --> 00:26:39,840
any other questions

00:27:17,840 --> 00:27:21,760
i guess i can oh go ahead uh james

00:27:20,880 --> 00:27:23,440
mitchell asks

00:27:21,760 --> 00:27:25,279
what are the criteria to you to

00:27:23,440 --> 00:27:26,480
determine whether an open source project

00:27:25,279 --> 00:27:29,440
is healthy or not

00:27:26,480 --> 00:27:29,760
that's a good question what i often look

00:27:29,440 --> 00:27:31,600
at

00:27:29,760 --> 00:27:33,120
is the if i look at looking at project

00:27:31,600 --> 00:27:35,679
in github i'll look

00:27:33,120 --> 00:27:37,039
at the issues that are open it's not

00:27:35,679 --> 00:27:38,880
necessarily a bad thing if there's a

00:27:37,039 --> 00:27:40,320
high number of issues open with a big

00:27:38,880 --> 00:27:42,320
project like rails

00:27:40,320 --> 00:27:43,919
or the rust project it's common for

00:27:42,320 --> 00:27:47,520
there to be a lot of issues open

00:27:43,919 --> 00:27:48,000
but i i sort them by uh last responded

00:27:47,520 --> 00:27:50,960
to

00:27:48,000 --> 00:27:52,799
or most recently responded to and see

00:27:50,960 --> 00:27:54,159
when the last activity happened on one

00:27:52,799 --> 00:27:54,960
of those issues is the same thing with

00:27:54,159 --> 00:27:56,559
pull requests

00:27:54,960 --> 00:27:57,760
if they're a bunch of open pull requests

00:27:56,559 --> 00:27:59,120
again that's not neces doesn't

00:27:57,760 --> 00:27:59,919
necessarily mean the project isn't

00:27:59,120 --> 00:28:02,320
healthy

00:27:59,919 --> 00:28:04,320
but i sort by last responded to and see

00:28:02,320 --> 00:28:05,679
if the maintainer has been responding to

00:28:04,320 --> 00:28:07,279
those pull requests

00:28:05,679 --> 00:28:08,960
uh you know they might have a variety of

00:28:07,279 --> 00:28:10,880
reasons they aren't able to merge it in

00:28:08,960 --> 00:28:13,360
right away those are certainly valid

00:28:10,880 --> 00:28:16,159
but i see whether the maintainer is

00:28:13,360 --> 00:28:17,919
communicating on issues or maintainers

00:28:16,159 --> 00:28:20,720
are communicating on issues and pull

00:28:17,919 --> 00:28:22,880
requests in a fairly timely fashion

00:28:20,720 --> 00:28:24,480
another if you're looking for a project

00:28:22,880 --> 00:28:26,240
to contribute to

00:28:24,480 --> 00:28:28,080
i look for projects that when you look

00:28:26,240 --> 00:28:31,200
at the issues there's labels like good

00:28:28,080 --> 00:28:32,880
first issue or help available that shows

00:28:31,200 --> 00:28:35,440
the maintainers the project

00:28:32,880 --> 00:28:37,120
are committed to helping onboard new

00:28:35,440 --> 00:28:39,679
contributors

00:28:37,120 --> 00:28:41,200
and are probably going to provide a more

00:28:39,679 --> 00:28:42,240
supportive environment for new

00:28:41,200 --> 00:28:44,080
contributors

00:28:42,240 --> 00:28:46,799
i mean opening your first pull request

00:28:44,080 --> 00:28:49,200
is scary it was certainly scary for me

00:28:46,799 --> 00:28:50,799
but there are ways to tell whether a

00:28:49,200 --> 00:28:51,600
project is likely to be a supportive

00:28:50,799 --> 00:28:53,520
environment

00:28:51,600 --> 00:28:55,679
or whether it might be a toxic

00:28:53,520 --> 00:28:57,039
environment and a lot of that is through

00:28:55,679 --> 00:28:58,799
observing the interactions the

00:28:57,039 --> 00:28:59,440
maintainers have with users of the

00:28:58,799 --> 00:29:01,200
project

00:28:59,440 --> 00:29:13,840
or others contributor contributors to

00:29:01,200 --> 00:29:13,840
the project

00:29:20,799 --> 00:29:23,840
just going to grab a quick drink of

00:29:24,840 --> 00:29:28,720
water

00:29:26,320 --> 00:29:30,399
i see someone just put in chat i

00:29:28,720 --> 00:29:32,080
appreciate the shout out to typo fixers

00:29:30,399 --> 00:29:35,279
and folks who write documentation

00:29:32,080 --> 00:29:37,440
absolutely i if you release a project

00:29:35,279 --> 00:29:39,840
and people can't tell how to use it

00:29:37,440 --> 00:29:41,919
that project's gonna die there needs to

00:29:39,840 --> 00:29:42,960
be documentation that shows people how

00:29:41,919 --> 00:29:46,159
to use it

00:29:42,960 --> 00:29:47,520
and you know 10 15 years ago in the open

00:29:46,159 --> 00:29:49,679
source community i was just getting

00:29:47,520 --> 00:29:51,440
started in open source at that point

00:29:49,679 --> 00:29:53,279
people would say well you know users

00:29:51,440 --> 00:29:54,720
should just be able to look at the code

00:29:53,279 --> 00:29:55,679
and understand it and figure out how to

00:29:54,720 --> 00:29:57,600
use the project

00:29:55,679 --> 00:29:59,919
that's not the case anymore the thing

00:29:57,600 --> 00:30:00,320
with open source is you know the goals

00:29:59,919 --> 00:30:03,919
of

00:30:00,320 --> 00:30:07,200
20 10 20 years ago to have every

00:30:03,919 --> 00:30:08,799
uh every company on the planet every

00:30:07,200 --> 00:30:09,919
government on the planet using open

00:30:08,799 --> 00:30:11,840
source software

00:30:09,919 --> 00:30:12,960
well we won that battle that that has

00:30:11,840 --> 00:30:15,520
come to pass

00:30:12,960 --> 00:30:16,240
um but part of that means even more

00:30:15,520 --> 00:30:18,640
people are

00:30:16,240 --> 00:30:20,080
using uh open source than ever and they

00:30:18,640 --> 00:30:22,000
need to know how to

00:30:20,080 --> 00:30:23,520
and it's not only coders who are using

00:30:22,000 --> 00:30:25,440
open source

00:30:23,520 --> 00:30:26,799
uh all right anonymous attendee says is

00:30:25,440 --> 00:30:29,520
there any reason why

00:30:26,799 --> 00:30:31,279
not to join open source foundations well

00:30:29,520 --> 00:30:35,120
it depends on the foundation

00:30:31,279 --> 00:30:37,679
uh i i the reason

00:30:35,120 --> 00:30:38,720
we put together the rust foundation was

00:30:37,679 --> 00:30:41,360
so that there would be an

00:30:38,720 --> 00:30:42,399
independent entity where various

00:30:41,360 --> 00:30:45,039
companies could

00:30:42,399 --> 00:30:45,520
donate to support the project and that

00:30:45,039 --> 00:30:47,919
would

00:30:45,520 --> 00:30:50,799
steward the project so that is a good

00:30:47,919 --> 00:30:52,480
reason to join an open source foundation

00:30:50,799 --> 00:30:53,840
a reason not to join an open source

00:30:52,480 --> 00:30:56,399
foundation i

00:30:53,840 --> 00:30:57,200
you know see what they're it depends i

00:30:56,399 --> 00:30:58,960
mean

00:30:57,200 --> 00:31:00,320
something like the linux foundation

00:30:58,960 --> 00:31:02,960
something like uh

00:31:00,320 --> 00:31:04,640
the software freedom conservancy i would

00:31:02,960 --> 00:31:07,519
talk to other people who are

00:31:04,640 --> 00:31:08,640
in the foundation and or who are who are

00:31:07,519 --> 00:31:10,960
members of the foundation

00:31:08,640 --> 00:31:12,080
and ask them what it's like uh you know

00:31:10,960 --> 00:31:14,399
if it's an environment

00:31:12,080 --> 00:31:16,559
where you know ant questions are not

00:31:14,399 --> 00:31:18,480
being answered in a timely fashion

00:31:16,559 --> 00:31:20,559
uh that might show that the foundation

00:31:18,480 --> 00:31:22,720
is over committed and under resourced

00:31:20,559 --> 00:31:24,960
so that might not be one you as a

00:31:22,720 --> 00:31:26,640
maintainer want to join necessarily

00:31:24,960 --> 00:31:28,320
but if you're going to donate those are

00:31:26,640 --> 00:31:30,559
great ones to donate to

00:31:28,320 --> 00:31:32,240
so it depends on the foundation is there

00:31:30,559 --> 00:31:34,799
any reason why not to join open source

00:31:32,240 --> 00:31:37,039
foundations

00:31:34,799 --> 00:31:38,480
and then another question is there such

00:31:37,039 --> 00:31:40,000
thing as over documented

00:31:38,480 --> 00:31:42,559
i've written more documentation than

00:31:40,000 --> 00:31:44,960
code before uh i have never seen an over

00:31:42,559 --> 00:31:47,840
documented project

00:31:44,960 --> 00:31:49,840
and it's important to remember that lots

00:31:47,840 --> 00:31:50,399
of people who use projects have very

00:31:49,840 --> 00:31:52,720
different

00:31:50,399 --> 00:31:53,919
skill levels so i've seen some people

00:31:52,720 --> 00:31:55,039
say well i don't want to document this

00:31:53,919 --> 00:31:55,840
because this should be obvious to

00:31:55,039 --> 00:31:58,559
everyone

00:31:55,840 --> 00:31:59,600
it's not it's not even people who are

00:31:58,559 --> 00:32:01,760
experienced

00:31:59,600 --> 00:32:14,399
so no i have never seen an over

00:32:01,760 --> 00:32:17,200
documented project yet

00:32:14,399 --> 00:32:17,200
other questions

00:32:25,280 --> 00:32:28,559
[Laughter]

00:32:27,039 --> 00:32:30,320
james mitchell says the future you may

00:32:28,559 --> 00:32:33,120
even thank you for documentation

00:32:30,320 --> 00:32:34,399
yes uh it's fun i've been doing uh

00:32:33,120 --> 00:32:37,760
technical talks for

00:32:34,399 --> 00:32:39,840
a very long time now and i have

00:32:37,760 --> 00:32:40,880
sometimes gone back to my talks a few

00:32:39,840 --> 00:32:43,360
years later

00:32:40,880 --> 00:32:45,039
uh to remember how i explained how to do

00:32:43,360 --> 00:32:46,399
something so that i could remember how i

00:32:45,039 --> 00:32:48,080
was doing something so i was

00:32:46,399 --> 00:32:49,600
explaining to my future self in that

00:32:48,080 --> 00:32:50,640
talk even though i didn't realize it at

00:32:49,600 --> 00:32:57,840
the time

00:32:50,640 --> 00:32:57,840
so yes always document

00:33:03,120 --> 00:33:08,080
ah cool uh gerardo asks

00:33:06,399 --> 00:33:10,640
what are some strategies to work with

00:33:08,080 --> 00:33:13,360
unofficial forks and documentation

00:33:10,640 --> 00:33:15,039
that's a good question uh i have seen

00:33:13,360 --> 00:33:17,039
you know projects be forked

00:33:15,039 --> 00:33:18,240
by an organization uh because that

00:33:17,039 --> 00:33:19,360
organization wants to take it in a

00:33:18,240 --> 00:33:22,880
different direction

00:33:19,360 --> 00:33:25,039
than the or apparent organization of the

00:33:22,880 --> 00:33:26,480
project that they forked uh that is

00:33:25,039 --> 00:33:28,559
certainly an option it is a

00:33:26,480 --> 00:33:30,480
absolutely always an option to fork a

00:33:28,559 --> 00:33:32,320
project in open source

00:33:30,480 --> 00:33:34,080
uh strategies to work with unofficial

00:33:32,320 --> 00:33:35,840
forks

00:33:34,080 --> 00:33:37,120
it's similar to working with the

00:33:35,840 --> 00:33:40,720
official forks

00:33:37,120 --> 00:33:42,799
um if you find something

00:33:40,720 --> 00:33:44,720
in the unofficial fork that is also a

00:33:42,799 --> 00:33:47,039
problem in the official fork

00:33:44,720 --> 00:33:49,519
i would document in the unofficial fork

00:33:47,039 --> 00:33:49,760
and also submit that documentation to

00:33:49,519 --> 00:33:51,519
the

00:33:49,760 --> 00:33:53,600
well it's not the official fork but to

00:33:51,519 --> 00:33:56,240
the original repository

00:33:53,600 --> 00:33:58,080
i it's hard because i mean there's

00:33:56,240 --> 00:33:59,679
there's users who are using both of them

00:33:58,080 --> 00:34:00,480
and they might be running into the same

00:33:59,679 --> 00:34:02,799
problems

00:34:00,480 --> 00:34:04,480
i would submit it to both uh i consider

00:34:02,799 --> 00:34:06,480
that you know just being a good

00:34:04,480 --> 00:34:09,040
open source citizen now if there are

00:34:06,480 --> 00:34:10,639
differences with the unofficial fork

00:34:09,040 --> 00:34:12,720
i would only submit that documentation

00:34:10,639 --> 00:34:14,480
to the unofficial fork people who use

00:34:12,720 --> 00:34:16,079
that fork are probably using it for

00:34:14,480 --> 00:34:20,720
slightly different reasons than they

00:34:16,079 --> 00:34:23,839
would use the parent repository

00:34:20,720 --> 00:34:24,720
uh all right uh next question anonymous

00:34:23,839 --> 00:34:26,639
tenney says

00:34:24,720 --> 00:34:28,560
should early stage projects be concerned

00:34:26,639 --> 00:34:30,960
about forking in order to attract

00:34:28,560 --> 00:34:32,480
rival community or attention or be

00:34:30,960 --> 00:34:34,720
closed source initially

00:34:32,480 --> 00:34:35,599
perhaps grateful for any thoughts great

00:34:34,720 --> 00:34:38,079
question

00:34:35,599 --> 00:34:39,919
uh when i'm working on a new project i

00:34:38,079 --> 00:34:41,919
do keep it closed

00:34:39,919 --> 00:34:43,280
for at least a few weeks sometimes a few

00:34:41,919 --> 00:34:45,520
months when i'm

00:34:43,280 --> 00:34:48,159
figuring out what the project is and

00:34:45,520 --> 00:34:50,399
getting together the first iteration

00:34:48,159 --> 00:34:52,079
the reason i do that is when i release

00:34:50,399 --> 00:34:53,280
it as open source i want it to be

00:34:52,079 --> 00:34:55,760
something that

00:34:53,280 --> 00:34:56,800
where there is already a cohesive design

00:34:55,760 --> 00:34:59,200
to it

00:34:56,800 --> 00:35:00,160
before i open it up for comments

00:34:59,200 --> 00:35:02,800
contributions

00:35:00,160 --> 00:35:04,480
etc from the world and that is because

00:35:02,800 --> 00:35:06,240
it can be easy when you have a lot of

00:35:04,480 --> 00:35:08,800
people with a lot of opinions

00:35:06,240 --> 00:35:11,200
on the project to kind of lose that

00:35:08,800 --> 00:35:13,040
cohesive to it to lose that purpose that

00:35:11,200 --> 00:35:15,920
it was going that it was going to do

00:35:13,040 --> 00:35:18,079
at first so uh they often have it close

00:35:15,920 --> 00:35:20,320
source at least initially until i get

00:35:18,079 --> 00:35:22,000
that cohesive vision established and at

00:35:20,320 --> 00:35:24,160
least somewhat implemented

00:35:22,000 --> 00:35:26,480
as for concern about forking in order to

00:35:24,160 --> 00:35:29,040
attract rival community or attention

00:35:26,480 --> 00:35:30,240
uh i have seen people use forks

00:35:29,040 --> 00:35:32,240
maliciously

00:35:30,240 --> 00:35:33,520
where they said well this project isn't

00:35:32,240 --> 00:35:36,000
we're doing what we're

00:35:33,520 --> 00:35:37,920
wanting it to do so we are going to fork

00:35:36,000 --> 00:35:39,440
it and we are going to steal

00:35:37,920 --> 00:35:41,200
all of the community and bring it over

00:35:39,440 --> 00:35:42,240
to our fork and then we're going to be

00:35:41,200 --> 00:35:45,040
the default

00:35:42,240 --> 00:35:47,280
iteration for what people use i have

00:35:45,040 --> 00:35:49,520
rarely seen that work

00:35:47,280 --> 00:35:51,920
in part because it is obvious to the

00:35:49,520 --> 00:35:54,240
community that it's something that's

00:35:51,920 --> 00:35:55,839
being done as a way you know as kind of

00:35:54,240 --> 00:35:56,560
you know it's forking for a revenge

00:35:55,839 --> 00:35:59,119
purpose

00:35:56,560 --> 00:36:00,800
and that doesn't mean that the project

00:35:59,119 --> 00:36:02,800
is going to be maintained

00:36:00,800 --> 00:36:04,640
uh if someone forks it and often those

00:36:02,800 --> 00:36:06,800
forks eventually die

00:36:04,640 --> 00:36:08,320
so i would say you know if you have a

00:36:06,800 --> 00:36:09,119
community member who's threatening to

00:36:08,320 --> 00:36:12,880
fork

00:36:09,119 --> 00:36:14,640
uh ask them why uh see if you can if you

00:36:12,880 --> 00:36:16,480
can address their concerns

00:36:14,640 --> 00:36:18,000
if you can't they are certainly welcome

00:36:16,480 --> 00:36:21,119
to fork the project

00:36:18,000 --> 00:36:23,680
uh but that doesn't mean that it's going

00:36:21,119 --> 00:36:25,359
to kill your project if someone forks it

00:36:23,680 --> 00:36:27,040
if your project already has some

00:36:25,359 --> 00:36:28,400
momentum around it already has some

00:36:27,040 --> 00:36:31,440
community around it

00:36:28,400 --> 00:36:34,640
uh it's difficult for a fork to to

00:36:31,440 --> 00:36:37,119
in my experience to steal if you will

00:36:34,640 --> 00:36:39,599
a significant portion of that community

00:36:37,119 --> 00:36:42,160
especially if it's a healthy community

00:36:39,599 --> 00:36:43,599
where empathy is practiced uh some

00:36:42,160 --> 00:36:45,040
people i know there's a stereotype of

00:36:43,599 --> 00:36:45,839
open source communities as being really

00:36:45,040 --> 00:36:48,240
toxic

00:36:45,839 --> 00:36:48,880
they aren't all like that uh they really

00:36:48,240 --> 00:36:51,040
really aren't

00:36:48,880 --> 00:36:52,480
rust community is very healthy chef

00:36:51,040 --> 00:36:53,280
community when i was there was very

00:36:52,480 --> 00:36:56,480
healthy

00:36:53,280 --> 00:36:58,400
there are good communities out there so

00:36:56,480 --> 00:37:00,000
as for being concerned about a fork if

00:36:58,400 --> 00:37:01,040
someone says they're going to fork i

00:37:00,000 --> 00:37:02,640
would always ask why

00:37:01,040 --> 00:37:04,960
see if there's a way you can address

00:37:02,640 --> 00:37:06,880
their concerns if not

00:37:04,960 --> 00:37:08,000
they might go ahead and fork and you

00:37:06,880 --> 00:37:10,079
should kind of monitor

00:37:08,000 --> 00:37:13,520
that fork but that doesn't mean that

00:37:10,079 --> 00:37:13,520
your project is going to die

00:37:17,920 --> 00:37:23,839
uh other questions any follow-ups to the

00:37:21,119 --> 00:37:23,839
questions i've answered

00:38:02,800 --> 00:38:08,079
all right well i think we're coming

00:38:04,640 --> 00:38:08,079
toward the end of time

00:38:08,160 --> 00:38:12,800
uh any other final questions before we

00:38:10,400 --> 00:38:12,800
wrap up

00:38:14,880 --> 00:38:18,240
i guess one last thing i'd like to say

00:38:16,800 --> 00:38:20,800
is uh

00:38:18,240 --> 00:38:22,320
i have found when i'm working for a

00:38:20,800 --> 00:38:23,440
company and we're trying to recruit

00:38:22,320 --> 00:38:25,760
other people

00:38:23,440 --> 00:38:27,359
if i make a very welcoming contributor

00:38:25,760 --> 00:38:28,880
set up a very healthy government

00:38:27,359 --> 00:38:31,040
governed project

00:38:28,880 --> 00:38:32,800
when people contribute and contribute

00:38:31,040 --> 00:38:33,760
significant work that is one of the best

00:38:32,800 --> 00:38:36,240
ways to

00:38:33,760 --> 00:38:37,359
find potential employees because i've

00:38:36,240 --> 00:38:38,720
worked with them on the open source

00:38:37,359 --> 00:38:40,640
project i already have an idea of how

00:38:38,720 --> 00:38:43,760
they work how they communicate

00:38:40,640 --> 00:38:46,240
uh that is one of the best uh

00:38:43,760 --> 00:38:47,839
best ways to do it uh so i mean open

00:38:46,240 --> 00:38:49,119
source is not free labor no matter what

00:38:47,839 --> 00:38:50,960
people say because there is labor

00:38:49,119 --> 00:38:52,880
involved er there is work involved in

00:38:50,960 --> 00:38:54,480
evaluating pull requests and

00:38:52,880 --> 00:38:56,160
figuring out whether to merge them but

00:38:54,480 --> 00:38:57,839
it's one of the best ways to

00:38:56,160 --> 00:38:59,440
find people interested in your project

00:38:57,839 --> 00:39:00,320
who might be interested in working on it

00:38:59,440 --> 00:39:02,400
full time

00:39:00,320 --> 00:39:03,359
if you are a company that is doing open

00:39:02,400 --> 00:39:06,560
source

00:39:03,359 --> 00:39:09,359
uh oh well you're very welcome uh martin

00:39:06,560 --> 00:39:10,960
i glad glad to share my share my

00:39:09,359 --> 00:39:11,760
experience and a little bit of my battle

00:39:10,960 --> 00:39:15,839
scars

00:39:11,760 --> 00:39:15,839

YouTube URL: https://www.youtube.com/watch?v=ETZ0Mcjw98Q


