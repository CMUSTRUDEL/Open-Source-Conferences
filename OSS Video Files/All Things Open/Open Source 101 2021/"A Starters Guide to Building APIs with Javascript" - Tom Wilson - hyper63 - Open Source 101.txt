Title: "A Starters Guide to Building APIs with Javascript" - Tom Wilson - hyper63 - Open Source 101
Publication date: 2021-04-07
Playlist: Open Source 101 2021
Description: 
	Tom Wilson, CEO & Founder of hyper63 delivered the talk "A Starters Guide to Building APIs with Javascript" at Open Source 101 on Tuesday, March 30, 2021.

Abstract:
APIs (Application Program Interfaces) are how programs can talk with other programs and is a design consideration for many products. Letâ€™s discuss: Why you should build an application with an API? What are the top 5 requirements of designing an API with examples? Some open-source Javascript frameworks can help you design and build your API.

In order to get the most out of this talk, you should have a good understanding of HTTP REST protocol and general application development. Familiarity with javascript and technologies like NodeJS and Express would be a plus.

In this talk, you should come away with a good understanding of why you should consider building an API in your application, key good practices every API should include, and how you could implement an API using Javascript.

Find Tom on the internets:
Twitter: https://twitter.com/twilson63
LinkedIn: https://www.linkedin.com/in/twilson63/
GitHub: https://github.com/twilson63
Captions: 
	00:00:04,799 --> 00:00:09,920
hello everyone

00:00:05,920 --> 00:00:12,160
uh thank you for uh joining this talk

00:00:09,920 --> 00:00:13,360
i'm looking forward to spending a few

00:00:12,160 --> 00:00:16,880
minutes talking

00:00:13,360 --> 00:00:20,400
about apis apis is very much a

00:00:16,880 --> 00:00:21,439
passion of mine and i'm excited to share

00:00:20,400 --> 00:00:24,880
with you

00:00:21,439 --> 00:00:24,880
a couple of of key

00:00:24,960 --> 00:00:29,039
non-functional requirements that i think

00:00:27,279 --> 00:00:32,399
will

00:00:29,039 --> 00:00:34,880
give you a good baseline on

00:00:32,399 --> 00:00:36,000
our checklist if you will as you go to

00:00:34,880 --> 00:00:40,640
build your products

00:00:36,000 --> 00:00:44,079
and apis as part of that

00:00:40,640 --> 00:00:47,200
apis are everywhere you may

00:00:44,079 --> 00:00:50,480
have uh recognized apis

00:00:47,200 --> 00:00:51,440
uh in using tools like twitter or

00:00:50,480 --> 00:00:54,640
dropbox

00:00:51,440 --> 00:00:57,520
or youtube also

00:00:54,640 --> 00:00:58,480
i would say that you know using the

00:00:57,520 --> 00:01:01,760
cloud

00:00:58,480 --> 00:01:05,840
if you've used the cloud with aws

00:01:01,760 --> 00:01:09,280
or azure or gcp these products would not

00:01:05,840 --> 00:01:13,360
exist if it wasn't for api so um

00:01:09,280 --> 00:01:16,799
apis are everywhere

00:01:13,360 --> 00:01:19,360
there are actually companies that

00:01:16,799 --> 00:01:21,520
actually their whole product is an api

00:01:19,360 --> 00:01:24,720
if you've worked with stripe

00:01:21,520 --> 00:01:28,240
or twilio both of those

00:01:24,720 --> 00:01:30,880
use apis as their product

00:01:28,240 --> 00:01:32,000
and then there's also companies that

00:01:30,880 --> 00:01:35,040
actually

00:01:32,000 --> 00:01:36,079
connect apis and and that's their

00:01:35,040 --> 00:01:39,439
product is this

00:01:36,079 --> 00:01:42,159
integration between them so you know

00:01:39,439 --> 00:01:42,560
much of the internet today has to do

00:01:42,159 --> 00:01:45,759
with

00:01:42,560 --> 00:01:48,560
with apis um so uh

00:01:45,759 --> 00:01:49,119
i imagine if you are starting a project

00:01:48,560 --> 00:01:51,360
that

00:01:49,119 --> 00:01:52,479
you will either need to interact with an

00:01:51,360 --> 00:01:55,520
api or

00:01:52,479 --> 00:01:59,360
think about making an api part

00:01:55,520 --> 00:02:02,960
of your product um

00:01:59,360 --> 00:02:04,320
so one of the things to think about or

00:02:02,960 --> 00:02:07,520
what i think about when

00:02:04,320 --> 00:02:10,399
thinking about apis is

00:02:07,520 --> 00:02:12,239
apis kind of describe the functionality

00:02:10,399 --> 00:02:15,040
of your application

00:02:12,239 --> 00:02:17,040
to have a well-designed api is to have a

00:02:15,040 --> 00:02:20,080
well-defined application

00:02:17,040 --> 00:02:22,000
so not only do apis help

00:02:20,080 --> 00:02:24,080
other applications talk to your

00:02:22,000 --> 00:02:27,120
application but i think it really

00:02:24,080 --> 00:02:30,560
serves as a guide or a

00:02:27,120 --> 00:02:33,599
structure of in the boundary

00:02:30,560 --> 00:02:38,000
of how your application is defined

00:02:33,599 --> 00:02:40,959
and how it should work in the world

00:02:38,000 --> 00:02:41,440
a common high level architecture is

00:02:40,959 --> 00:02:44,319
client

00:02:41,440 --> 00:02:45,040
server so client server you may have a

00:02:44,319 --> 00:02:48,400
browser

00:02:45,040 --> 00:02:48,959
or a mobile application and then you may

00:02:48,400 --> 00:02:52,000
have

00:02:48,959 --> 00:02:52,959
a server or servers in the cloud or

00:02:52,000 --> 00:02:55,519
serverless

00:02:52,959 --> 00:02:57,200
but this is the typical architecture of

00:02:55,519 --> 00:02:59,200
many many applications

00:02:57,200 --> 00:03:00,480
so we'll use this kind of to talk

00:02:59,200 --> 00:03:02,800
through today

00:03:00,480 --> 00:03:04,480
and one of the things that you find out

00:03:02,800 --> 00:03:08,640
is that when you

00:03:04,480 --> 00:03:11,920
unpack kind of this server side

00:03:08,640 --> 00:03:14,640
you will traditionally kind of break

00:03:11,920 --> 00:03:15,360
branch into two layers at a very high

00:03:14,640 --> 00:03:18,480
level

00:03:15,360 --> 00:03:19,519
you have kind of the api and your

00:03:18,480 --> 00:03:22,319
business logic

00:03:19,519 --> 00:03:24,480
in in one layer and then you have all of

00:03:22,319 --> 00:03:29,440
your services which may be

00:03:24,480 --> 00:03:32,879
databases maybe storage maybe caching

00:03:29,440 --> 00:03:35,200
sms emails all of those things those are

00:03:32,879 --> 00:03:37,840
kind of the implementation details that

00:03:35,200 --> 00:03:39,760
you need to use for your product but all

00:03:37,840 --> 00:03:41,840
the kind of special

00:03:39,760 --> 00:03:44,560
sauce that goes into your product that

00:03:41,840 --> 00:03:47,680
makes it different is really within this

00:03:44,560 --> 00:03:50,080
api application kind of layer and the

00:03:47,680 --> 00:03:53,439
application is the front end to that

00:03:50,080 --> 00:03:56,319
now that's just a very generalistic

00:03:53,439 --> 00:03:58,239
pattern you can get much more detailed

00:03:56,319 --> 00:04:02,480
than that but that's what we're gonna

00:03:58,239 --> 00:04:05,680
talk through today and we really want to

00:04:02,480 --> 00:04:08,000
talk about uh five requirements

00:04:05,680 --> 00:04:09,760
and i call them kind of non-functional

00:04:08,000 --> 00:04:12,000
requirements because they're not

00:04:09,760 --> 00:04:13,040
specific to the functionality of your

00:04:12,000 --> 00:04:15,519
application

00:04:13,040 --> 00:04:16,799
but these requirements actually do have

00:04:15,519 --> 00:04:20,000
a huge

00:04:16,799 --> 00:04:22,560
impact on the success of your api

00:04:20,000 --> 00:04:24,800
and your application the first one we'll

00:04:22,560 --> 00:04:26,840
talk about today is security

00:04:24,800 --> 00:04:28,160
and then we'll spend some time on

00:04:26,840 --> 00:04:30,800
documentation

00:04:28,160 --> 00:04:32,720
and then we'll move to validation which

00:04:30,800 --> 00:04:34,720
is something that's not

00:04:32,720 --> 00:04:36,720
talked about too often but i'm going to

00:04:34,720 --> 00:04:38,960
really try to emphasize validation

00:04:36,720 --> 00:04:42,479
because i think it's a huge

00:04:38,960 --> 00:04:46,160
important piece and then testing

00:04:42,479 --> 00:04:49,520
um testing is common practice now

00:04:46,160 --> 00:04:50,080
in 2021 you want to write tests but i'll

00:04:49,520 --> 00:04:52,560
try to

00:04:50,080 --> 00:04:54,240
provide some insight on you know how you

00:04:52,560 --> 00:04:56,960
might want to approach that

00:04:54,240 --> 00:04:57,280
with apis and then finally monitoring

00:04:56,960 --> 00:05:00,720
right

00:04:57,280 --> 00:05:02,880
being able to observe how

00:05:00,720 --> 00:05:03,840
your application and your api is

00:05:02,880 --> 00:05:06,560
performing

00:05:03,840 --> 00:05:07,520
being able to make tweaks or

00:05:06,560 --> 00:05:09,840
enhancements

00:05:07,520 --> 00:05:10,560
and determine if that's enhancing the

00:05:09,840 --> 00:05:13,919
performance

00:05:10,560 --> 00:05:15,919
or actually causing problems or

00:05:13,919 --> 00:05:17,680
really being able to attract migrations

00:05:15,919 --> 00:05:19,520
if you're moving from one

00:05:17,680 --> 00:05:22,560
you know implementation detail to

00:05:19,520 --> 00:05:25,680
another monitoring plays a huge role

00:05:22,560 --> 00:05:28,560
in that and for this talk

00:05:25,680 --> 00:05:29,840
we'll be mainly talking around rest json

00:05:28,560 --> 00:05:33,840
apis they're

00:05:29,840 --> 00:05:37,520
the most common apis out there

00:05:33,840 --> 00:05:40,800
but these requirements can really

00:05:37,520 --> 00:05:43,039
be used regardless of what kind of

00:05:40,800 --> 00:05:43,919
api implementation you use whether it's

00:05:43,039 --> 00:05:48,400
rest or

00:05:43,919 --> 00:05:51,840
soap or grpc

00:05:48,400 --> 00:05:52,880
or graphql all of these requirements

00:05:51,840 --> 00:05:54,639
hold true

00:05:52,880 --> 00:05:55,919
for all of them but we'll just talk in

00:05:54,639 --> 00:05:59,360
the context of

00:05:55,919 --> 00:06:02,319
rest great

00:05:59,360 --> 00:06:02,880
so we'll go ahead and just jump on in

00:06:02,319 --> 00:06:06,560
because

00:06:02,880 --> 00:06:09,840
i'm really short on time and um and and

00:06:06,560 --> 00:06:11,600
for this talk is is um probably not

00:06:09,840 --> 00:06:14,880
going to be as entertaining

00:06:11,600 --> 00:06:17,759
as um i would like it to be i'm not

00:06:14,880 --> 00:06:20,160
super funny but it will be informative

00:06:17,759 --> 00:06:24,000
so we're going to cover a lot of ground

00:06:20,160 --> 00:06:27,199
and just to let you know that i'll have

00:06:24,000 --> 00:06:30,880
at the end of the talk a whole

00:06:27,199 --> 00:06:31,919
slide with a link to resources that can

00:06:30,880 --> 00:06:33,680
allow you to drive

00:06:31,919 --> 00:06:35,759
further into each one of these topics

00:06:33,680 --> 00:06:36,720
because we're going to hit them at a

00:06:35,759 --> 00:06:39,520
high level

00:06:36,720 --> 00:06:41,520
and not necessarily be able to go deep

00:06:39,520 --> 00:06:43,600
into every one of them

00:06:41,520 --> 00:06:45,600
but i'll give you some links which will

00:06:43,600 --> 00:06:49,440
allow you to get there

00:06:45,600 --> 00:06:52,240
so the first topic is security security

00:06:49,440 --> 00:06:54,160
covers a lot of pieces but some of the

00:06:52,240 --> 00:06:57,520
things we want to touch on is

00:06:54,160 --> 00:06:59,599
encryption cores authentication and

00:06:57,520 --> 00:07:02,800
authorization

00:06:59,599 --> 00:07:06,960
obviously security is is super important

00:07:02,800 --> 00:07:09,280
in um in the world of software

00:07:06,960 --> 00:07:10,960
especially when you're building software

00:07:09,280 --> 00:07:13,199
on the internet

00:07:10,960 --> 00:07:14,479
you need to make sure that all of your

00:07:13,199 --> 00:07:17,520
api endpoints

00:07:14,479 --> 00:07:19,840
are https using ssl

00:07:17,520 --> 00:07:21,039
certificates and there's a great

00:07:19,840 --> 00:07:24,080
non-profit

00:07:21,039 --> 00:07:26,080
called letsancrypt.org

00:07:24,080 --> 00:07:27,440
that can really help you through that

00:07:26,080 --> 00:07:30,639
process

00:07:27,440 --> 00:07:32,880
before let's encrypt ssl certificates

00:07:30,639 --> 00:07:34,000
and you can still buy them but you would

00:07:32,880 --> 00:07:37,360
have to pay

00:07:34,000 --> 00:07:40,639
um with let's encrypt you can actually

00:07:37,360 --> 00:07:43,840
register uh ssl certificates and

00:07:40,639 --> 00:07:47,199
and configure them for your server

00:07:43,840 --> 00:07:51,039
for for free now there is

00:07:47,199 --> 00:07:54,639
a another thing called cores or cross

00:07:51,039 --> 00:07:56,960
origin resource sharing and

00:07:54,639 --> 00:07:58,879
this is when you're using browsers

00:07:56,960 --> 00:08:01,840
primarily as your client

00:07:58,879 --> 00:08:03,120
and if your api is not of the same

00:08:01,840 --> 00:08:06,319
domain or the same

00:08:03,120 --> 00:08:09,280
origin then the browser will

00:08:06,319 --> 00:08:10,319
ask your server for a policy to

00:08:09,280 --> 00:08:13,360
determine if

00:08:10,319 --> 00:08:16,479
if this client-side

00:08:13,360 --> 00:08:19,680
domain has the right to access your

00:08:16,479 --> 00:08:22,560
api and it's a very good

00:08:19,680 --> 00:08:23,680
policy sometimes it's a painful one to

00:08:22,560 --> 00:08:26,000
deal with

00:08:23,680 --> 00:08:27,680
because it's not enforced when you're

00:08:26,000 --> 00:08:31,120
going server to server

00:08:27,680 --> 00:08:34,719
but primarily browser to server and um

00:08:31,120 --> 00:08:38,159
there's in in many frameworks there's a

00:08:34,719 --> 00:08:40,640
concept of middleware and um they have

00:08:38,159 --> 00:08:41,279
this coors middleware that you can plug

00:08:40,640 --> 00:08:45,120
in

00:08:41,279 --> 00:08:48,000
to set your policy

00:08:45,120 --> 00:08:48,880
for sharing and it is pretty

00:08:48,000 --> 00:08:50,720
straightforward

00:08:48,880 --> 00:08:52,160
and there's some great documentation on

00:08:50,720 --> 00:08:55,519
that but

00:08:52,160 --> 00:08:57,839
one of the things of recent note in

00:08:55,519 --> 00:08:59,680
security is authentication

00:08:57,839 --> 00:09:02,240
authentication between

00:08:59,680 --> 00:09:03,120
this you know kind of unsecured land of

00:09:02,240 --> 00:09:05,760
the internet

00:09:03,120 --> 00:09:06,480
into your very secured server has been a

00:09:05,760 --> 00:09:08,959
topic for

00:09:06,480 --> 00:09:10,080
for many years and one of the things i

00:09:08,959 --> 00:09:12,320
want to highlight is

00:09:10,080 --> 00:09:13,279
an option called a json web token for

00:09:12,320 --> 00:09:16,399
you to really

00:09:13,279 --> 00:09:20,399
consider a json web token

00:09:16,399 --> 00:09:24,560
is a base 64 encoded token

00:09:20,399 --> 00:09:27,120
consisting of three parts

00:09:24,560 --> 00:09:27,920
part one is a header and the header kind

00:09:27,120 --> 00:09:31,760
of tells you

00:09:27,920 --> 00:09:34,720
what kind of signature

00:09:31,760 --> 00:09:36,080
encryption is used to sign and what type

00:09:34,720 --> 00:09:38,320
it is and just

00:09:36,080 --> 00:09:39,200
you know some basic information of the

00:09:38,320 --> 00:09:41,920
token

00:09:39,200 --> 00:09:43,040
and then the payload is the middle piece

00:09:41,920 --> 00:09:46,160
the payload

00:09:43,040 --> 00:09:48,959
uh gives you the data that your identity

00:09:46,160 --> 00:09:50,480
management server provides so that you

00:09:48,959 --> 00:09:53,519
can

00:09:50,480 --> 00:09:54,000
you know use that data to control how

00:09:53,519 --> 00:09:57,120
your

00:09:54,000 --> 00:09:58,000
api responds and then finally the

00:09:57,120 --> 00:10:01,680
signature

00:09:58,000 --> 00:10:04,800
and the signature of the token

00:10:01,680 --> 00:10:08,079
is the algorithm that that

00:10:04,800 --> 00:10:11,440
encrypts uh that um and

00:10:08,079 --> 00:10:14,560
it's not encrypted it's base64 encoded

00:10:11,440 --> 00:10:14,959
but the signature signs that so when you

00:10:14,560 --> 00:10:18,320
go

00:10:14,959 --> 00:10:19,040
on the server in your api to validate a

00:10:18,320 --> 00:10:22,079
json

00:10:19,040 --> 00:10:23,519
web token you can verify it based on

00:10:22,079 --> 00:10:27,120
that signature

00:10:23,519 --> 00:10:29,440
and if it is true

00:10:27,120 --> 00:10:32,079
then you know the contents of that token

00:10:29,440 --> 00:10:34,959
has not been changed since it was signed

00:10:32,079 --> 00:10:35,760
and it's important for your application

00:10:34,959 --> 00:10:39,120
to

00:10:35,760 --> 00:10:43,120
sign those when

00:10:39,120 --> 00:10:43,839
uh when you're in a secure environment

00:10:43,120 --> 00:10:47,519
so so

00:10:43,839 --> 00:10:48,079
your authentication server can sign that

00:10:47,519 --> 00:10:50,399
token

00:10:48,079 --> 00:10:51,519
send it to an unsecure environment like

00:10:50,399 --> 00:10:55,120
the browser

00:10:51,519 --> 00:10:56,399
and then you your client can send that

00:10:55,120 --> 00:10:58,959
with the request

00:10:56,399 --> 00:11:00,399
and your server can validate that

00:10:58,959 --> 00:11:03,760
request

00:11:00,399 --> 00:11:06,959
by checking your

00:11:03,760 --> 00:11:11,279
against either a secret or a public key

00:11:06,959 --> 00:11:12,959
etc so it's a really good way to

00:11:11,279 --> 00:11:14,720
make sure that the data that you're

00:11:12,959 --> 00:11:18,079
getting is the data

00:11:14,720 --> 00:11:21,360
that you're expecting another

00:11:18,079 --> 00:11:23,040
note on that is that you want anything

00:11:21,360 --> 00:11:26,079
in your payload

00:11:23,040 --> 00:11:28,880
to be okay to be viewed in public

00:11:26,079 --> 00:11:29,360
you you don't want to put secrets in

00:11:28,880 --> 00:11:33,360
here

00:11:29,360 --> 00:11:35,040
um because if anyone is in the middle

00:11:33,360 --> 00:11:37,600
of your transactions they could

00:11:35,040 --> 00:11:41,519
potentially see that information

00:11:37,600 --> 00:11:44,160
um so so that's kind of authentication

00:11:41,519 --> 00:11:45,760
and there's another side of security is

00:11:44,160 --> 00:11:48,320
called authorization

00:11:45,760 --> 00:11:51,680
and with authorization now that you've

00:11:48,320 --> 00:11:54,079
determined the identity of the request

00:11:51,680 --> 00:11:55,760
and verified that that identity is who

00:11:54,079 --> 00:11:58,240
they say they are

00:11:55,760 --> 00:11:59,760
authorization determines if they're

00:11:58,240 --> 00:12:02,880
allowed to

00:11:59,760 --> 00:12:04,560
perform your api request or not and that

00:12:02,880 --> 00:12:09,040
really comes in

00:12:04,560 --> 00:12:14,079
to fruition using scopes

00:12:09,040 --> 00:12:14,079
scopes are a way to define

00:12:14,160 --> 00:12:22,560
for a given resource in a given action

00:12:18,560 --> 00:12:23,519
if this particular request has the

00:12:22,560 --> 00:12:26,160
authority

00:12:23,519 --> 00:12:27,040
to execute right so you can break these

00:12:26,160 --> 00:12:29,680
scopes down

00:12:27,040 --> 00:12:30,720
with a resource followed by some sort of

00:12:29,680 --> 00:12:34,240
delimiter

00:12:30,720 --> 00:12:37,279
um most use colons to delimit

00:12:34,240 --> 00:12:40,959
these and then then an action so

00:12:37,279 --> 00:12:44,880
for example if i did um

00:12:40,959 --> 00:12:48,240
an asterisk colon asterisk basically

00:12:44,880 --> 00:12:51,839
if that is in my token then

00:12:48,240 --> 00:12:52,480
this uh request has access to kind of

00:12:51,839 --> 00:12:55,760
everything

00:12:52,480 --> 00:12:58,480
so you can think of the asterisks as all

00:12:55,760 --> 00:12:59,360
resources and the other asterisks is all

00:12:58,480 --> 00:13:01,680
actions

00:12:59,360 --> 00:13:03,760
but you can be very specific right so

00:13:01,680 --> 00:13:06,800
that would be maybe a super user

00:13:03,760 --> 00:13:09,200
but a traditional user may have you know

00:13:06,800 --> 00:13:12,320
this kind of

00:13:09,200 --> 00:13:15,040
space delimited string of

00:13:12,320 --> 00:13:15,920
resources and action combinations in

00:13:15,040 --> 00:13:18,720
this case

00:13:15,920 --> 00:13:19,680
let's suppose a movie reviewer

00:13:18,720 --> 00:13:22,240
application

00:13:19,680 --> 00:13:23,120
and in the movie reviewer application

00:13:22,240 --> 00:13:25,839
you have

00:13:23,120 --> 00:13:26,639
a movie colon read and that means the

00:13:25,839 --> 00:13:28,880
user

00:13:26,639 --> 00:13:30,320
can actually you know maybe search

00:13:28,880 --> 00:13:33,360
movies

00:13:30,320 --> 00:13:35,360
list movies view a particular movie and

00:13:33,360 --> 00:13:38,320
then you have a resource review

00:13:35,360 --> 00:13:39,440
and write and maybe that means the user

00:13:38,320 --> 00:13:42,399
can actually

00:13:39,440 --> 00:13:43,680
write a review or create a review or

00:13:42,399 --> 00:13:46,160
update a review

00:13:43,680 --> 00:13:48,160
and then comment delete maybe they can't

00:13:46,160 --> 00:13:51,199
create comments but they can actually

00:13:48,160 --> 00:13:52,320
delete comments so that would be a way

00:13:51,199 --> 00:13:55,760
to specify

00:13:52,320 --> 00:13:57,279
scopes and why it's important to think

00:13:55,760 --> 00:14:00,079
in scopes

00:13:57,279 --> 00:14:01,199
is to really determine how they

00:14:00,079 --> 00:14:03,680
associate

00:14:01,199 --> 00:14:05,360
with your users and in your permission

00:14:03,680 --> 00:14:08,480
permission system

00:14:05,360 --> 00:14:10,880
and here's just a couple of more scopes

00:14:08,480 --> 00:14:12,880
kind of grafted in a table where you

00:14:10,880 --> 00:14:15,040
have your resource

00:14:12,880 --> 00:14:16,959
and then you have your actions and then

00:14:15,040 --> 00:14:18,720
you have kind of a description of what

00:14:16,959 --> 00:14:21,600
all of these things do

00:14:18,720 --> 00:14:23,440
and when you're implementing your api

00:14:21,600 --> 00:14:26,560
then as you check and make sure

00:14:23,440 --> 00:14:28,000
your token is valid then you look in the

00:14:26,560 --> 00:14:31,760
contents of the token

00:14:28,000 --> 00:14:32,720
and see a scope property and that scope

00:14:31,760 --> 00:14:35,680
property would have

00:14:32,720 --> 00:14:36,959
all of these scopes that that particular

00:14:35,680 --> 00:14:39,760
request has

00:14:36,959 --> 00:14:41,519
the ability to do and then you can

00:14:39,760 --> 00:14:43,680
determine that with your endpoint

00:14:41,519 --> 00:14:44,800
if they're requesting to list movies

00:14:43,680 --> 00:14:47,600
then they should have

00:14:44,800 --> 00:14:49,360
movie read in their scope if they're

00:14:47,600 --> 00:14:50,000
wanting to delete a comment they should

00:14:49,360 --> 00:14:52,800
have

00:14:50,000 --> 00:14:53,279
comment colon delete and this allows

00:14:52,800 --> 00:14:57,120
your

00:14:53,279 --> 00:15:00,240
api to focus on functionality

00:14:57,120 --> 00:15:03,760
versus permissions management

00:15:00,240 --> 00:15:05,440
that can be handled uh by a identity

00:15:03,760 --> 00:15:07,519
management platform

00:15:05,440 --> 00:15:09,040
and and the way that kind of works is

00:15:07,519 --> 00:15:12,240
you associate

00:15:09,040 --> 00:15:14,240
a given role with

00:15:12,240 --> 00:15:15,760
a set of scopes and you could have

00:15:14,240 --> 00:15:19,120
multiple roles

00:15:15,760 --> 00:15:19,760
and multiple scopes connected to those

00:15:19,120 --> 00:15:22,240
roles

00:15:19,760 --> 00:15:22,800
and here we have this movie reviewer

00:15:22,240 --> 00:15:25,279
role

00:15:22,800 --> 00:15:26,320
so i can apply my user to this movie

00:15:25,279 --> 00:15:29,040
reviewer role

00:15:26,320 --> 00:15:29,920
and they immediately get access to these

00:15:29,040 --> 00:15:33,600
scopes

00:15:29,920 --> 00:15:36,000
which my api doesn't have to worry about

00:15:33,600 --> 00:15:36,880
knowing what a role is or what a user is

00:15:36,000 --> 00:15:39,199
per se

00:15:36,880 --> 00:15:40,560
they just have to worry about what these

00:15:39,199 --> 00:15:44,000
scopes are

00:15:40,560 --> 00:15:47,440
and for another example

00:15:44,000 --> 00:15:50,720
we have review consumer and that role

00:15:47,440 --> 00:15:54,399
may have like review read and comment

00:15:50,720 --> 00:15:57,199
create so that's really

00:15:54,399 --> 00:15:57,600
what i wanted to touch on with security

00:15:57,199 --> 00:16:00,000
um

00:15:57,600 --> 00:16:02,000
there's a lot more and there's a lot of

00:16:00,000 --> 00:16:02,639
resources like i said in the links that

00:16:02,000 --> 00:16:05,199
can

00:16:02,639 --> 00:16:05,759
kind of drill into that but let's move

00:16:05,199 --> 00:16:08,880
to

00:16:05,759 --> 00:16:11,199
documentation and documentation there's

00:16:08,880 --> 00:16:14,240
three highlights that i want to hit

00:16:11,199 --> 00:16:17,360
and think of these as

00:16:14,240 --> 00:16:20,480
kind of different points of view

00:16:17,360 --> 00:16:24,000
so with documentation you have

00:16:20,480 --> 00:16:26,720
kind of a readme and the readme

00:16:24,000 --> 00:16:29,360
is kind of the point of the view of the

00:16:26,720 --> 00:16:31,680
contributor someone who wants to

00:16:29,360 --> 00:16:32,800
maybe use your app but also may want to

00:16:31,680 --> 00:16:35,120
contribute so

00:16:32,800 --> 00:16:36,320
with your readme you know describe your

00:16:35,120 --> 00:16:39,759
api

00:16:36,320 --> 00:16:40,560
link to the documentation but also

00:16:39,759 --> 00:16:42,800
provide

00:16:40,560 --> 00:16:44,240
how to set up as a developer how to

00:16:42,800 --> 00:16:46,639
deploy

00:16:44,240 --> 00:16:47,839
any dependencies and how to manage those

00:16:46,639 --> 00:16:50,560
dependencies

00:16:47,839 --> 00:16:52,560
a contribution guide maybe link to a

00:16:50,560 --> 00:16:55,680
guide on how to do that

00:16:52,560 --> 00:16:58,480
a license a code of conduct and

00:16:55,680 --> 00:16:59,759
gratitude always say thanks as as we

00:16:58,480 --> 00:17:02,160
heard this morning

00:16:59,759 --> 00:17:03,440
in the keynotes you know um thinking

00:17:02,160 --> 00:17:06,160
your community

00:17:03,440 --> 00:17:07,280
is huge and the readme is a great place

00:17:06,160 --> 00:17:08,640
to do that

00:17:07,280 --> 00:17:10,640
and then there's another type of

00:17:08,640 --> 00:17:12,319
documentation which

00:17:10,640 --> 00:17:14,559
you know kind of is your reference

00:17:12,319 --> 00:17:17,360
documentation or specifications

00:17:14,559 --> 00:17:18,799
and this gets into the technical aspects

00:17:17,360 --> 00:17:22,720
of your api

00:17:18,799 --> 00:17:25,839
how do i call it how do i authenticate

00:17:22,720 --> 00:17:28,000
um how what are the server urls what are

00:17:25,839 --> 00:17:31,120
the names of the endpoints

00:17:28,000 --> 00:17:32,559
etc and there's a specification out

00:17:31,120 --> 00:17:35,440
there called open

00:17:32,559 --> 00:17:37,840
api and there's a link in the resources

00:17:35,440 --> 00:17:40,000
about that but that has really become

00:17:37,840 --> 00:17:43,039
you know kind of the standard of rest

00:17:40,000 --> 00:17:46,400
apis it used to be called swagger

00:17:43,039 --> 00:17:48,720
but now it's uh open api and there's a

00:17:46,400 --> 00:17:49,919
full open source initiative around that

00:17:48,720 --> 00:17:52,799
specification

00:17:49,919 --> 00:17:53,520
and it's really neat you can also

00:17:52,799 --> 00:17:56,960
provide

00:17:53,520 --> 00:17:57,679
examples in there and specify your your

00:17:56,960 --> 00:18:00,960
models

00:17:57,679 --> 00:18:01,280
so so this specification really drives

00:18:00,960 --> 00:18:03,600
you

00:18:01,280 --> 00:18:04,720
to make sure you document all the

00:18:03,600 --> 00:18:08,160
technical bits

00:18:04,720 --> 00:18:11,520
of your api and here's an example

00:18:08,160 --> 00:18:12,960
of what you could generate from that

00:18:11,520 --> 00:18:16,000
because the

00:18:12,960 --> 00:18:20,480
specification is in either json

00:18:16,000 --> 00:18:23,840
or yaml but then you can run it through

00:18:20,480 --> 00:18:25,520
this web application and it can generate

00:18:23,840 --> 00:18:29,039
this really

00:18:25,520 --> 00:18:30,720
nice way to allow users to explore your

00:18:29,039 --> 00:18:34,720
api they can come in

00:18:30,720 --> 00:18:37,520
and authorize their

00:18:34,720 --> 00:18:39,520
credentials and then click on one of

00:18:37,520 --> 00:18:43,760
these actions and actually

00:18:39,520 --> 00:18:47,600
execute it in in this interface which is

00:18:43,760 --> 00:18:48,240
is really handy so that's one that

00:18:47,600 --> 00:18:51,360
that's an

00:18:48,240 --> 00:18:54,400
absolute must for apis you have to

00:18:51,360 --> 00:18:56,000
have specifications to help developers

00:18:54,400 --> 00:18:59,520
who may want to interface

00:18:56,000 --> 00:19:01,520
with your product and then lastly

00:18:59,520 --> 00:19:04,080
but just as important in terms of

00:19:01,520 --> 00:19:06,559
documentation is getting started guides

00:19:04,080 --> 00:19:07,840
you know introduce your audience and

00:19:06,559 --> 00:19:10,640
this is for

00:19:07,840 --> 00:19:11,600
all of your audiences to to know what

00:19:10,640 --> 00:19:14,960
your api

00:19:11,600 --> 00:19:18,240
is what it's trying to do etc so

00:19:14,960 --> 00:19:21,440
introduce it i can't tell you

00:19:18,240 --> 00:19:23,440
every time you go to an api um

00:19:21,440 --> 00:19:26,000
i think it is pretty much the standard

00:19:23,440 --> 00:19:27,679
now that you see a getting started guide

00:19:26,000 --> 00:19:29,760
you know getting started is probably the

00:19:27,679 --> 00:19:32,720
most important thing for apis

00:19:29,760 --> 00:19:33,919
because usually someone is trying to

00:19:32,720 --> 00:19:36,480
solve a problem

00:19:33,919 --> 00:19:37,120
and they're trying to look at if your

00:19:36,480 --> 00:19:39,600
api

00:19:37,120 --> 00:19:40,400
fits that so a getting started guide

00:19:39,600 --> 00:19:43,520
where they can

00:19:40,400 --> 00:19:45,200
kind of kick the tires of your api in

00:19:43,520 --> 00:19:48,240
the first five minutes

00:19:45,200 --> 00:19:51,440
is huge and the last is

00:19:48,240 --> 00:19:53,440
guides and use cases guides and use

00:19:51,440 --> 00:19:56,480
cases that kind of lump together but

00:19:53,440 --> 00:19:58,080
most of the time when um outside

00:19:56,480 --> 00:20:00,000
developers are trying to

00:19:58,080 --> 00:20:01,520
interface with your api they have a

00:20:00,000 --> 00:20:04,640
specific use case

00:20:01,520 --> 00:20:07,600
and having guides walk the user

00:20:04,640 --> 00:20:08,799
through that is is huge to show them how

00:20:07,600 --> 00:20:12,960
to interact with your

00:20:08,799 --> 00:20:17,039
api i've got a couple of examples from

00:20:12,960 --> 00:20:19,039
twilio one example here is a quick start

00:20:17,039 --> 00:20:20,320
so this would be kind of the equivalent

00:20:19,039 --> 00:20:22,080
of getting started

00:20:20,320 --> 00:20:23,520
here's the steps you need to do and

00:20:22,080 --> 00:20:26,640
it'll walk you through

00:20:23,520 --> 00:20:27,440
how to do that which is really cool and

00:20:26,640 --> 00:20:31,840
then an

00:20:27,440 --> 00:20:35,520
example of a guide or reference here's a

00:20:31,840 --> 00:20:37,600
guide on how to you know build a server

00:20:35,520 --> 00:20:39,679
how to build server notifications with

00:20:37,600 --> 00:20:43,679
twilio's sms

00:20:39,679 --> 00:20:45,919
again a nice tutorial that could walk

00:20:43,679 --> 00:20:47,600
someone through how to do that step by

00:20:45,919 --> 00:20:50,240
step

00:20:47,600 --> 00:20:51,120
which is great so those are kind of the

00:20:50,240 --> 00:20:54,240
key points

00:20:51,120 --> 00:20:58,000
of documentation that's what we

00:20:54,240 --> 00:21:01,120
we want to to use as our baseline

00:20:58,000 --> 00:21:04,240
for apis and then the next piece

00:21:01,120 --> 00:21:07,600
i want to talk about is validation and

00:21:04,240 --> 00:21:11,919
validation um really isn't mentioned

00:21:07,600 --> 00:21:14,799
a lot and and maybe it's just assumed

00:21:11,919 --> 00:21:16,720
which would be great but but i want to

00:21:14,799 --> 00:21:19,840
emphasize it because

00:21:16,720 --> 00:21:23,360
a lot of times you don't see things in

00:21:19,840 --> 00:21:26,960
learning materials when building

00:21:23,360 --> 00:21:29,120
servers and apis you don't see a lot out

00:21:26,960 --> 00:21:32,240
there about validation because

00:21:29,120 --> 00:21:35,280
again it's not super entertaining

00:21:32,240 --> 00:21:36,000
and it does take a lot of time to think

00:21:35,280 --> 00:21:39,039
through

00:21:36,000 --> 00:21:41,919
getting your right models you know

00:21:39,039 --> 00:21:43,280
put together so that you can create a

00:21:41,919 --> 00:21:46,480
valid schema

00:21:43,280 --> 00:21:50,320
but when you think about it

00:21:46,480 --> 00:21:54,240
you're moving from the browser or

00:21:50,320 --> 00:21:56,840
mobile phone over an https

00:21:54,240 --> 00:21:58,320
protocol so you're moving from this

00:21:56,840 --> 00:22:01,919
unsecured kind of

00:21:58,320 --> 00:22:06,080
area to a very secure

00:22:01,919 --> 00:22:10,400
area and what you want to do

00:22:06,080 --> 00:22:12,880
is as soon as data gets into your

00:22:10,400 --> 00:22:14,000
secure area and you've validated the

00:22:12,880 --> 00:22:17,200
user

00:22:14,000 --> 00:22:18,799
you've uh validated the scopes you want

00:22:17,200 --> 00:22:20,799
to validate the data

00:22:18,799 --> 00:22:23,520
do not trust the data coming from the

00:22:20,799 --> 00:22:26,000
client and do not wait until you

00:22:23,520 --> 00:22:26,640
try to put it into your database to

00:22:26,000 --> 00:22:31,039
trust

00:22:26,640 --> 00:22:34,240
it coming in it just doesn't

00:22:31,039 --> 00:22:35,760
it it can cause some challenges from a

00:22:34,240 --> 00:22:39,120
security perspective

00:22:35,760 --> 00:22:40,000
but but it also can cause a huge

00:22:39,120 --> 00:22:42,640
challenge with

00:22:40,000 --> 00:22:44,480
troubleshooting right um because you're

00:22:42,640 --> 00:22:47,760
assuming that the data is gonna be

00:22:44,480 --> 00:22:50,880
x and y and it's uh z and

00:22:47,760 --> 00:22:54,320
f you know um

00:22:50,880 --> 00:22:56,640
the other thing is is to do that

00:22:54,320 --> 00:22:58,480
you know take advantage of some open

00:22:56,640 --> 00:23:01,679
source validation libraries

00:22:58,480 --> 00:23:04,720
um these libraries allow you to be

00:23:01,679 --> 00:23:07,840
super concise and they're very

00:23:04,720 --> 00:23:09,840
easy to use um there's a structure

00:23:07,840 --> 00:23:12,400
called json schema

00:23:09,840 --> 00:23:13,760
that is more language agnostic but if

00:23:12,400 --> 00:23:15,840
you're using javascript

00:23:13,760 --> 00:23:17,280
i would recommend checking out some of

00:23:15,840 --> 00:23:21,039
these examples

00:23:17,280 --> 00:23:23,840
zod is fairly new but it integrates with

00:23:21,039 --> 00:23:26,320
javascript and typescript and and gives

00:23:23,840 --> 00:23:27,360
you a way to not only create validations

00:23:26,320 --> 00:23:30,559
but also

00:23:27,360 --> 00:23:34,159
create types joy is a little bit

00:23:30,559 --> 00:23:37,360
older it originated from the happy

00:23:34,159 --> 00:23:41,120
project but it's very robust and

00:23:37,360 --> 00:23:44,799
has been a mainstay in node

00:23:41,120 --> 00:23:47,760
finally there is uh yup and

00:23:44,799 --> 00:23:48,559
yup works for both the browser and the

00:23:47,760 --> 00:23:51,919
server

00:23:48,559 --> 00:23:55,039
so that may be something that

00:23:51,919 --> 00:23:58,159
you want to review

00:23:55,039 --> 00:24:00,159
if you need to share your schema between

00:23:58,159 --> 00:24:02,640
your browser and server and you only

00:24:00,159 --> 00:24:05,039
want to do it once

00:24:02,640 --> 00:24:06,320
there's also some cool tools that will

00:24:05,039 --> 00:24:09,520
actually

00:24:06,320 --> 00:24:12,000
uh generate documentation from your

00:24:09,520 --> 00:24:15,360
schema validation so you can actually

00:24:12,000 --> 00:24:15,679
put your schema and and have it generate

00:24:15,360 --> 00:24:18,880
the

00:24:15,679 --> 00:24:21,440
swagger docs um so that

00:24:18,880 --> 00:24:22,320
when you change it you're changing it in

00:24:21,440 --> 00:24:24,480
one place

00:24:22,320 --> 00:24:27,520
and you're keeping everything up to date

00:24:24,480 --> 00:24:30,880
which is really cool

00:24:27,520 --> 00:24:34,480
here's a little example of a

00:24:30,880 --> 00:24:36,559
zod schema and hopefully it's pretty

00:24:34,480 --> 00:24:37,840
straightforward to follow but basically

00:24:36,559 --> 00:24:41,679
we have this

00:24:37,840 --> 00:24:43,440
movie schema and it's an object

00:24:41,679 --> 00:24:45,039
and then within that object there's

00:24:43,440 --> 00:24:49,039
three properties title

00:24:45,039 --> 00:24:51,919
description and year and with the title

00:24:49,039 --> 00:24:54,240
what we're doing is we're narrowing the

00:24:51,919 --> 00:24:57,360
the validation to say you know what

00:24:54,240 --> 00:25:00,640
the title can't be greater than 200

00:24:57,360 --> 00:25:02,640
and we can add modifiers on here to say

00:25:00,640 --> 00:25:06,080
that it has to all be upper case

00:25:02,640 --> 00:25:08,880
or it could have some custom regex

00:25:06,080 --> 00:25:09,520
so we can with a schema we can really

00:25:08,880 --> 00:25:11,760
get

00:25:09,520 --> 00:25:13,520
narrow with what our data should

00:25:11,760 --> 00:25:16,480
represent and and the more

00:25:13,520 --> 00:25:17,520
narrow we can get without you know

00:25:16,480 --> 00:25:20,559
causing

00:25:17,520 --> 00:25:24,000
um uh

00:25:20,559 --> 00:25:28,000
unexpected pushback is is huge right so

00:25:24,000 --> 00:25:32,000
for example a year a year we could say

00:25:28,000 --> 00:25:35,279
it's a string but it might need to be

00:25:32,000 --> 00:25:38,799
numbers in that string and it may

00:25:35,279 --> 00:25:41,039
only can be either a minimum of four and

00:25:38,799 --> 00:25:43,760
a maximum of four so it can only be

00:25:41,039 --> 00:25:45,360
four numbers and with that you can

00:25:43,760 --> 00:25:48,559
really

00:25:45,360 --> 00:25:51,360
prevent bad data from getting

00:25:48,559 --> 00:25:52,720
into your database or your cache or

00:25:51,360 --> 00:25:55,679
whatever and

00:25:52,720 --> 00:25:58,640
you still want to be specific on those

00:25:55,679 --> 00:26:01,039
areas but when it's coming into your api

00:25:58,640 --> 00:26:02,720
and you might be doing calculations on

00:26:01,039 --> 00:26:03,760
these things before you get to your

00:26:02,720 --> 00:26:06,480
database

00:26:03,760 --> 00:26:06,880
um you want to make sure that you just

00:26:06,480 --> 00:26:09,279
don't

00:26:06,880 --> 00:26:10,240
trust the data and if it's not what you

00:26:09,279 --> 00:26:14,480
want it to be

00:26:10,240 --> 00:26:17,760
you kick it out and you give that um

00:26:14,480 --> 00:26:19,919
out and um and then

00:26:17,760 --> 00:26:21,360
at the end here when when we're

00:26:19,919 --> 00:26:24,720
validating it we just call

00:26:21,360 --> 00:26:28,080
safe parse and pass in our data

00:26:24,720 --> 00:26:29,679
and if it's success the success variable

00:26:28,080 --> 00:26:32,720
will be true

00:26:29,679 --> 00:26:35,840
data will be set if it's a failure

00:26:32,720 --> 00:26:37,360
the error value will have all the arrows

00:26:35,840 --> 00:26:40,720
listed in it

00:26:37,360 --> 00:26:44,080
so it's very easy to check

00:26:40,720 --> 00:26:47,120
and then we have a another

00:26:44,080 --> 00:26:50,799
topic that's not talked about

00:26:47,120 --> 00:26:55,120
very much is validate output

00:26:50,799 --> 00:26:58,320
validate output is um

00:26:55,120 --> 00:27:00,640
something that i think if

00:26:58,320 --> 00:27:02,400
if you're able to to validate your

00:27:00,640 --> 00:27:05,520
output from moving from your

00:27:02,400 --> 00:27:08,960
api to the client you're going to get a

00:27:05,520 --> 00:27:12,080
lot more signal when things go wrong

00:27:08,960 --> 00:27:15,840
and you'll be able to

00:27:12,080 --> 00:27:18,960
find the problem quickly

00:27:15,840 --> 00:27:20,960
oftentimes with boundaries right when

00:27:18,960 --> 00:27:21,760
you have a boundary between one or the

00:27:20,960 --> 00:27:23,760
other

00:27:21,760 --> 00:27:24,799
and a problem occurs it may not

00:27:23,760 --> 00:27:28,399
necessarily be

00:27:24,799 --> 00:27:31,760
super obvious where it occurred so

00:27:28,399 --> 00:27:34,960
by providing validation on

00:27:31,760 --> 00:27:36,159
output you can get quickly you can

00:27:34,960 --> 00:27:38,399
quickly drill down

00:27:36,159 --> 00:27:39,200
to eliminate certain boundaries like

00:27:38,399 --> 00:27:42,559
this is not

00:27:39,200 --> 00:27:44,799
happening in my presentation layer

00:27:42,559 --> 00:27:46,799
it must be happening from my application

00:27:44,799 --> 00:27:49,200
layer to my service layer

00:27:46,799 --> 00:27:52,000
and i can quickly identify and and

00:27:49,200 --> 00:27:55,679
reproduce it

00:27:52,000 --> 00:28:00,640
so um watching the q a

00:27:55,679 --> 00:28:03,760
and george has asked about

00:28:00,640 --> 00:28:07,840
an example of a well-written api project

00:28:03,760 --> 00:28:10,640
and and there there are many um

00:28:07,840 --> 00:28:12,399
you know if you're looking at products i

00:28:10,640 --> 00:28:16,399
would look at stripe

00:28:12,399 --> 00:28:19,919
um twilio um are great products

00:28:16,399 --> 00:28:23,360
and then as far as open source projects

00:28:19,919 --> 00:28:26,880
um you know i would look

00:28:23,360 --> 00:28:29,600
at um and i think

00:28:26,880 --> 00:28:31,279
i'll come back to that um i don't want

00:28:29,600 --> 00:28:34,240
to plug my own project

00:28:31,279 --> 00:28:34,559
hyper 63 but that's one you could look

00:28:34,240 --> 00:28:36,720
at

00:28:34,559 --> 00:28:38,399
and ask questions it's not perfect but

00:28:36,720 --> 00:28:40,960
we're we're trying

00:28:38,399 --> 00:28:42,000
um and i'd be happy to talk to you um

00:28:40,960 --> 00:28:44,720
about that

00:28:42,000 --> 00:28:46,320
but um there's there's several open

00:28:44,720 --> 00:28:49,840
source projects out there

00:28:46,320 --> 00:28:50,159
um that that do a really good job i

00:28:49,840 --> 00:28:53,200
think

00:28:50,159 --> 00:28:56,480
express js is one worth looking at

00:28:53,200 --> 00:29:00,320
um a server framework with an api

00:28:56,480 --> 00:29:02,799
and um i'll mention some more later

00:29:00,320 --> 00:29:04,159
um so with that we're jumping into

00:29:02,799 --> 00:29:07,440
testing

00:29:04,159 --> 00:29:10,000
and uh testing is is very important

00:29:07,440 --> 00:29:12,159
uh i think everyone should understand

00:29:10,000 --> 00:29:15,360
the benefits of testing

00:29:12,159 --> 00:29:19,120
if you're able to get

00:29:15,360 --> 00:29:22,000
data to uh to catch bugs before they

00:29:19,120 --> 00:29:26,080
reach your end users that's a good thing

00:29:22,000 --> 00:29:29,279
in terms of an api testing will

00:29:26,080 --> 00:29:30,000
talk about integration testing and and i

00:29:29,279 --> 00:29:32,799
i kind of

00:29:30,000 --> 00:29:33,600
loop testing into three common buckets

00:29:32,799 --> 00:29:35,360
you have

00:29:33,600 --> 00:29:37,760
kind of unit testing where you're

00:29:35,360 --> 00:29:41,200
testing the pacific

00:29:37,760 --> 00:29:42,720
code and you don't want to test anything

00:29:41,200 --> 00:29:46,000
else but that code

00:29:42,720 --> 00:29:48,480
and and then you have um

00:29:46,000 --> 00:29:50,159
end-to-end testing where you're

00:29:48,480 --> 00:29:52,480
simulating a user

00:29:50,159 --> 00:29:54,080
and you're actually pretending to be a

00:29:52,480 --> 00:29:57,279
user and you log in

00:29:54,080 --> 00:29:58,720
you click on this screen and it takes

00:29:57,279 --> 00:29:59,840
you to the next screen and then you

00:29:58,720 --> 00:30:02,559
click on that

00:29:59,840 --> 00:30:04,720
takes you to a form and then you key in

00:30:02,559 --> 00:30:08,000
elements of the form and then you submit

00:30:04,720 --> 00:30:11,760
so end to end testing is testing

00:30:08,000 --> 00:30:14,480
um from a simulated user

00:30:11,760 --> 00:30:15,360
all the way to to your service

00:30:14,480 --> 00:30:18,480
integration

00:30:15,360 --> 00:30:21,039
testing is a little different and one of

00:30:18,480 --> 00:30:24,080
the things about end-to-end testing is

00:30:21,039 --> 00:30:26,320
is it can be um brittle

00:30:24,080 --> 00:30:27,919
it can break if there's a lot of changes

00:30:26,320 --> 00:30:31,600
to your application

00:30:27,919 --> 00:30:33,120
and it can be you know kind of

00:30:31,600 --> 00:30:35,279
even though they're getting better it

00:30:33,120 --> 00:30:38,720
can be a challenge to get set up

00:30:35,279 --> 00:30:40,720
and and run whereas integration testing

00:30:38,720 --> 00:30:41,360
kind of meets in the middle so instead

00:30:40,720 --> 00:30:44,320
of

00:30:41,360 --> 00:30:46,000
a unit test or an end-to-end test you're

00:30:44,320 --> 00:30:48,799
kind of

00:30:46,000 --> 00:30:49,679
capturing the test process at the

00:30:48,799 --> 00:30:52,799
request

00:30:49,679 --> 00:30:53,600
level and you're you're going to the

00:30:52,799 --> 00:30:56,559
input

00:30:53,600 --> 00:30:57,519
but then and this is kind of an optional

00:30:56,559 --> 00:31:00,640
you can actually

00:30:57,519 --> 00:31:03,679
go to a test service or you can actually

00:31:00,640 --> 00:31:06,880
mock between your api

00:31:03,679 --> 00:31:09,200
to your service layer and by mocking

00:31:06,880 --> 00:31:11,360
between your api and service layer that

00:31:09,200 --> 00:31:13,039
means that when you run these tests in

00:31:11,360 --> 00:31:14,640
an automated way they can run

00:31:13,039 --> 00:31:16,240
much faster because they're not having

00:31:14,640 --> 00:31:19,360
to build up

00:31:16,240 --> 00:31:20,480
the services and tear down the services

00:31:19,360 --> 00:31:22,960
when they're done

00:31:20,480 --> 00:31:23,919
so an integration test kind of creates

00:31:22,960 --> 00:31:27,279
this bridge

00:31:23,919 --> 00:31:30,320
between the actual request and

00:31:27,279 --> 00:31:31,440
this mock on the end where you actually

00:31:30,320 --> 00:31:35,440
return

00:31:31,440 --> 00:31:37,279
what the service would say and

00:31:35,440 --> 00:31:39,279
there's a lot of benefits to doing all

00:31:37,279 --> 00:31:42,320
the testing but i've found that

00:31:39,279 --> 00:31:44,320
integration testing really can hit a lot

00:31:42,320 --> 00:31:47,440
of pain points very quickly

00:31:44,320 --> 00:31:50,559
and here's an example

00:31:47,440 --> 00:31:53,039
of a test server

00:31:50,559 --> 00:31:55,600
and what we're doing is spinning up this

00:31:53,039 --> 00:31:59,039
test server and we're attaching our app

00:31:55,600 --> 00:32:02,000
to it here and

00:31:59,039 --> 00:32:04,480
when we do that behind the scenes um

00:32:02,000 --> 00:32:07,760
we're actually launching a web server

00:32:04,480 --> 00:32:10,640
that serves that app on a

00:32:07,760 --> 00:32:11,440
dynamic port and then when we make our

00:32:10,640 --> 00:32:13,559
test call

00:32:11,440 --> 00:32:15,919
where we're doing a fetch we just call

00:32:13,559 --> 00:32:16,720
server.url and that will be the url in

00:32:15,919 --> 00:32:19,200
the port

00:32:16,720 --> 00:32:21,200
and that allows me to run multiple tests

00:32:19,200 --> 00:32:23,120
in isolation so they're not

00:32:21,200 --> 00:32:25,120
stepping on each other or sharing the

00:32:23,120 --> 00:32:28,240
same code they're actually running

00:32:25,120 --> 00:32:31,440
independent threads and that gives you

00:32:28,240 --> 00:32:32,799
high signal so when something breaks you

00:32:31,440 --> 00:32:36,080
know it's very

00:32:32,799 --> 00:32:38,799
specific and then

00:32:36,080 --> 00:32:40,640
on the mocking side here's some code to

00:32:38,799 --> 00:32:44,399
kind of

00:32:40,640 --> 00:32:47,919
show an example of that um when you

00:32:44,399 --> 00:32:50,080
mock um a back-end in this case we're

00:32:47,919 --> 00:32:52,320
mocking an http service

00:32:50,080 --> 00:32:54,880
um and we're using a tool called fetch

00:32:52,320 --> 00:32:56,320
mock and and basically what it does is

00:32:54,880 --> 00:33:00,960
it

00:32:56,320 --> 00:33:04,080
replaces the current fetch api for api

00:33:00,960 --> 00:33:06,880
but then we create this mock call

00:33:04,080 --> 00:33:08,320
and say okay when you call example.com

00:33:06,880 --> 00:33:10,720
just return a 200.

00:33:08,320 --> 00:33:11,440
so that when your test runs it doesn't

00:33:10,720 --> 00:33:14,559
actually

00:33:11,440 --> 00:33:16,640
go out but all your code thinks it did

00:33:14,559 --> 00:33:19,919
go out and actually return

00:33:16,640 --> 00:33:23,519
and you can test from your

00:33:19,919 --> 00:33:25,840
you know test server to your mock

00:33:23,519 --> 00:33:27,200
all the code that's integrated within

00:33:25,840 --> 00:33:30,000
your application

00:33:27,200 --> 00:33:31,760
to make sure that it works well and then

00:33:30,000 --> 00:33:32,720
when you're done you can just restore

00:33:31,760 --> 00:33:35,440
and that'll

00:33:32,720 --> 00:33:36,960
switch it back to regular fetch so that

00:33:35,440 --> 00:33:39,840
you can have a highly

00:33:36,960 --> 00:33:41,519
isolated environment which is pretty

00:33:39,840 --> 00:33:44,880
cool

00:33:41,519 --> 00:33:47,760
and then the last piece about testing is

00:33:44,880 --> 00:33:48,799
automate your test i believe there's a

00:33:47,760 --> 00:33:52,960
talk on github

00:33:48,799 --> 00:33:55,440
actions today and git lab has a ci

00:33:52,960 --> 00:33:56,320
there's all kinds of continuous

00:33:55,440 --> 00:33:59,440
integrations

00:33:56,320 --> 00:34:02,880
and continuous delivery solutions find

00:33:59,440 --> 00:34:06,720
one and and use it because it will

00:34:02,880 --> 00:34:10,320
keep you it will keep you up at night

00:34:06,720 --> 00:34:14,560
if your code when someone checks it in

00:34:10,320 --> 00:34:19,200
is not running test and it hasn't been

00:34:14,560 --> 00:34:23,040
easier to add ci cd to projects today

00:34:19,200 --> 00:34:25,760
this is an example of a github action

00:34:23,040 --> 00:34:28,399
and um you can see that it's you know

00:34:25,760 --> 00:34:31,200
probably about 15 lines of yaml

00:34:28,399 --> 00:34:32,159
and you're you know checking out your

00:34:31,200 --> 00:34:35,200
code

00:34:32,159 --> 00:34:36,480
you're pulling a ubuntu instance of

00:34:35,200 --> 00:34:38,960
node.js

00:34:36,480 --> 00:34:39,919
and then you're you're running your

00:34:38,960 --> 00:34:42,800
application

00:34:39,919 --> 00:34:44,159
using a command yarn to install all your

00:34:42,800 --> 00:34:47,359
dependencies

00:34:44,159 --> 00:34:51,200
and then yarn test and that could be npm

00:34:47,359 --> 00:34:54,399
install and npm test as well

00:34:51,200 --> 00:34:55,599
but um putting this in your project as

00:34:54,399 --> 00:34:59,680
soon as possible

00:34:55,599 --> 00:34:59,680
will will save you a lot of time

00:35:00,480 --> 00:35:04,160
okay so the last topic we want to talk

00:35:03,520 --> 00:35:07,280
about

00:35:04,160 --> 00:35:11,280
is monitoring and

00:35:07,280 --> 00:35:14,839
monitoring is one of those things that

00:35:11,280 --> 00:35:18,320
um you you

00:35:14,839 --> 00:35:20,960
really need especially when you're

00:35:18,320 --> 00:35:23,920
trying to troubleshoot or trying to see

00:35:20,960 --> 00:35:23,920
what's going on

00:35:24,000 --> 00:35:27,280
earlier in my career

00:35:28,079 --> 00:35:31,599
it really saved us from spending a lot

00:35:30,720 --> 00:35:34,480
of time of

00:35:31,599 --> 00:35:35,280
trying to identify issues we couldn't

00:35:34,480 --> 00:35:37,760
control

00:35:35,280 --> 00:35:39,680
like um in the embassy of the internet

00:35:37,760 --> 00:35:42,720
there was a lot of latency

00:35:39,680 --> 00:35:46,880
or sometimes certain regions would go

00:35:42,720 --> 00:35:49,040
down and and we would have users call us

00:35:46,880 --> 00:35:51,280
up and say that your site is slow

00:35:49,040 --> 00:35:52,240
and we would be able to look at these

00:35:51,280 --> 00:35:54,240
monitoring tools

00:35:52,240 --> 00:35:55,599
and see that the bottleneck was not

00:35:54,240 --> 00:35:59,280
actually with our

00:35:55,599 --> 00:36:03,200
servers it was actually with their

00:35:59,280 --> 00:36:06,240
um isp or with a particular challenge

00:36:03,200 --> 00:36:07,119
in the the region um so so that's super

00:36:06,240 --> 00:36:11,200
helpful

00:36:07,119 --> 00:36:14,720
having the ability to observe or monitor

00:36:11,200 --> 00:36:16,960
in your application can really

00:36:14,720 --> 00:36:18,880
make good use of your time when you're

00:36:16,960 --> 00:36:21,599
trying to track down problems

00:36:18,880 --> 00:36:22,640
and there's two you know general areas

00:36:21,599 --> 00:36:25,760
of

00:36:22,640 --> 00:36:28,400
monitoring and that's apms

00:36:25,760 --> 00:36:28,800
or application performance management

00:36:28,400 --> 00:36:32,400
and

00:36:28,800 --> 00:36:35,680
and that's where you actually download

00:36:32,400 --> 00:36:38,800
a little module in your application

00:36:35,680 --> 00:36:41,040
or and inject it into your application

00:36:38,800 --> 00:36:42,240
usually in the form of middleware or

00:36:41,040 --> 00:36:45,680
something like that

00:36:42,240 --> 00:36:48,880
and and it will run in your application

00:36:45,680 --> 00:36:51,839
alongside and record

00:36:48,880 --> 00:36:52,720
the processes that are going through

00:36:51,839 --> 00:36:55,599
like how much

00:36:52,720 --> 00:36:56,640
memory each call is using or how much

00:36:55,599 --> 00:36:59,200
cpu

00:36:56,640 --> 00:37:00,480
or what's the response time and those

00:36:59,200 --> 00:37:02,720
are kind of the core

00:37:00,480 --> 00:37:04,000
metrics but then you can also create

00:37:02,720 --> 00:37:06,400
custom metrics

00:37:04,000 --> 00:37:07,520
with application performance management

00:37:06,400 --> 00:37:11,119
and it will give you

00:37:07,520 --> 00:37:13,680
a nice dashboard um one

00:37:11,119 --> 00:37:14,640
uh example that i mentioned in the

00:37:13,680 --> 00:37:18,240
resources

00:37:14,640 --> 00:37:20,960
is prometheus prometheus is a great

00:37:18,240 --> 00:37:22,000
tool that's open source that allows you

00:37:20,960 --> 00:37:25,200
to do this and when you

00:37:22,000 --> 00:37:26,000
pair it with grafana then you get and

00:37:25,200 --> 00:37:28,320
grafana

00:37:26,000 --> 00:37:29,359
is a visualization tool so you're able

00:37:28,320 --> 00:37:33,440
to get a

00:37:29,359 --> 00:37:35,520
good visualization of what's going on

00:37:33,440 --> 00:37:36,960
and those are some great open source

00:37:35,520 --> 00:37:41,440
projects um

00:37:36,960 --> 00:37:45,040
also elastic the company behind alaska

00:37:41,440 --> 00:37:46,960
search has an application performance

00:37:45,040 --> 00:37:49,200
management product and then there's

00:37:46,960 --> 00:37:53,359
several commercial products out there

00:37:49,200 --> 00:37:57,359
like um century is super popular and

00:37:53,359 --> 00:38:00,560
um new relic or log rocket

00:37:57,359 --> 00:38:02,960
um and others so so

00:38:00,560 --> 00:38:04,079
application performance management is

00:38:02,960 --> 00:38:06,400
pretty easy

00:38:04,079 --> 00:38:07,760
to to put into your code you may spend a

00:38:06,400 --> 00:38:10,000
little time

00:38:07,760 --> 00:38:11,680
you know kind of configuring prometheus

00:38:10,000 --> 00:38:13,440
and setting up grafana

00:38:11,680 --> 00:38:15,520
but there's some great tutorials on how

00:38:13,440 --> 00:38:18,880
to do that and then the other one

00:38:15,520 --> 00:38:22,320
is uh log aggregation so

00:38:18,880 --> 00:38:25,680
every uh api

00:38:22,320 --> 00:38:28,400
has the ability to log to log to

00:38:25,680 --> 00:38:29,599
the standard out and then you can

00:38:28,400 --> 00:38:32,480
actually

00:38:29,599 --> 00:38:34,640
aggregate those logs and throw them into

00:38:32,480 --> 00:38:37,680
a data store

00:38:34,640 --> 00:38:38,000
and elastic has a great product called

00:38:37,680 --> 00:38:40,320
the

00:38:38,000 --> 00:38:41,200
elk stack which stands for elastic

00:38:40,320 --> 00:38:44,400
search

00:38:41,200 --> 00:38:48,079
logsdash and kibana and

00:38:44,400 --> 00:38:50,720
you can load the elp stack

00:38:48,079 --> 00:38:52,800
in your data center and and then it can

00:38:50,720 --> 00:38:56,480
go and pull these logs

00:38:52,800 --> 00:38:59,839
um from an aggregate process

00:38:56,480 --> 00:39:02,000
and generate these uh

00:38:59,839 --> 00:39:03,200
dashboard displays that can give you a

00:39:02,000 --> 00:39:06,000
lot of insight

00:39:03,200 --> 00:39:07,520
in to your application from the the

00:39:06,000 --> 00:39:10,720
logging aspect

00:39:07,520 --> 00:39:12,720
and and what's nice about this

00:39:10,720 --> 00:39:14,800
is you could have let's say you have a

00:39:12,720 --> 00:39:15,200
microservice architecture where you may

00:39:14,800 --> 00:39:20,240
have

00:39:15,200 --> 00:39:20,240
several apis all running in different

00:39:20,720 --> 00:39:24,400
in different kind of servers and you can

00:39:22,960 --> 00:39:27,599
pull them all together

00:39:24,400 --> 00:39:28,000
and see them under one nice view and and

00:39:27,599 --> 00:39:31,680
run

00:39:28,000 --> 00:39:34,800
some analytics on it um even apply

00:39:31,680 --> 00:39:35,440
some ai to identify patterns and things

00:39:34,800 --> 00:39:38,640
like that

00:39:35,440 --> 00:39:41,359
so logging is is huge

00:39:38,640 --> 00:39:42,000
there is an open source library i

00:39:41,359 --> 00:39:45,040
mentioned

00:39:42,000 --> 00:39:48,720
for javascript that's

00:39:45,040 --> 00:39:52,000
really really nice called

00:39:48,720 --> 00:39:54,839
pino p-i-n-o and

00:39:52,000 --> 00:39:56,240
it gives you kind of the ability to

00:39:54,839 --> 00:39:59,680
blog.info

00:39:56,240 --> 00:40:02,160
or log.air etc and you can

00:39:59,680 --> 00:40:03,200
you know kind of fine tune what you want

00:40:02,160 --> 00:40:06,000
to show

00:40:03,200 --> 00:40:07,920
in each environment like show me all the

00:40:06,000 --> 00:40:12,079
debug statements or show me

00:40:07,920 --> 00:40:15,040
just errors etc so that's kind of cool

00:40:12,079 --> 00:40:16,640
um tom i just wanted to give you a

00:40:15,040 --> 00:40:18,160
friendly reminder you have about two

00:40:16,640 --> 00:40:21,280
minutes left

00:40:18,160 --> 00:40:25,119
thanks perfect timing

00:40:21,280 --> 00:40:28,640
so um looks like time's up

00:40:25,119 --> 00:40:29,599
uh and and i know i probably went pretty

00:40:28,640 --> 00:40:33,200
fast but

00:40:29,599 --> 00:40:37,440
i wanted to cover all of these things

00:40:33,200 --> 00:40:39,599
um so i'll wrap up just a recap

00:40:37,440 --> 00:40:41,119
again there's five important things to

00:40:39,599 --> 00:40:43,760
think about when you're

00:40:41,119 --> 00:40:44,960
you know building an api and that's

00:40:43,760 --> 00:40:48,240
security

00:40:44,960 --> 00:40:50,839
uh https ssl certificates

00:40:48,240 --> 00:40:52,240
authentication authorization

00:40:50,839 --> 00:40:55,640
documentation

00:40:52,240 --> 00:40:57,040
your readme your technical

00:40:55,640 --> 00:41:00,480
specifications

00:40:57,040 --> 00:41:05,599
with swagger docs and getting started

00:41:00,480 --> 00:41:08,960
and guides and use cases then validation

00:41:05,599 --> 00:41:10,480
validate at your points or your

00:41:08,960 --> 00:41:12,880
boundaries right so

00:41:10,480 --> 00:41:13,839
a boundary is between your client and

00:41:12,880 --> 00:41:17,040
your server

00:41:13,839 --> 00:41:20,319
between your server and your services

00:41:17,040 --> 00:41:24,960
do the validation there both in and out

00:41:20,319 --> 00:41:27,760
and it will save you a lot of pain

00:41:24,960 --> 00:41:28,800
trust me i speak from experience and

00:41:27,760 --> 00:41:31,839
testing

00:41:28,800 --> 00:41:35,359
testing is huge it's easier to test

00:41:31,839 --> 00:41:38,640
now more than ever before use ci

00:41:35,359 --> 00:41:39,359
to test and automate your test and then

00:41:38,640 --> 00:41:42,640
finally

00:41:39,359 --> 00:41:43,359
monitoring right use application

00:41:42,640 --> 00:41:46,319
performance

00:41:43,359 --> 00:41:47,680
monitoring it's your friend some other

00:41:46,319 --> 00:41:50,800
things to look at

00:41:47,680 --> 00:41:52,079
quickly is versioning once you hit these

00:41:50,800 --> 00:41:55,280
five requirements you may

00:41:52,079 --> 00:41:58,800
want to have a strategy on versioning

00:41:55,280 --> 00:42:01,119
again that can get kind of

00:41:58,800 --> 00:42:02,079
challenging but but when you do versions

00:42:01,119 --> 00:42:04,560
you have to commit

00:42:02,079 --> 00:42:05,359
to having multiple versions in

00:42:04,560 --> 00:42:07,359
production

00:42:05,359 --> 00:42:08,480
and you want to manage that properly and

00:42:07,359 --> 00:42:11,440
appropriately

00:42:08,480 --> 00:42:12,480
api management if you want to monetize

00:42:11,440 --> 00:42:15,119
apis

00:42:12,480 --> 00:42:16,240
definitely take a look at api management

00:42:15,119 --> 00:42:18,560
and finally

00:42:16,240 --> 00:42:21,200
microservice management those are some

00:42:18,560 --> 00:42:24,720
great things as well

00:42:21,200 --> 00:42:28,160
and so here is a link to

00:42:24,720 --> 00:42:30,480
some resources in a gist and this is a

00:42:28,160 --> 00:42:34,319
short code link

00:42:30,480 --> 00:42:36,480
and i'll be posting the slides for where

00:42:34,319 --> 00:42:37,599
jennifer tells me so these slides will

00:42:36,480 --> 00:42:41,839
be available

00:42:37,599 --> 00:42:46,319
today but if you want i can

00:42:41,839 --> 00:42:49,760
paste this link i think in the chat

00:42:46,319 --> 00:42:51,760
and do i have any time for questions

00:42:49,760 --> 00:42:56,400
jennifer

00:42:51,760 --> 00:42:59,599
we are unfortunately out of time um

00:42:56,400 --> 00:43:03,040
so i will be around um

00:42:59,599 --> 00:43:03,680
at the hyper 63 booth if anyone has any

00:43:03,040 --> 00:43:07,680
questions

00:43:03,680 --> 00:43:10,880
and my uh twitter is um

00:43:07,680 --> 00:43:14,240
t wilson 63

00:43:10,880 --> 00:43:26,560
so please send me a tweet or

00:43:14,240 --> 00:43:26,560

YouTube URL: https://www.youtube.com/watch?v=MF4ZysgThbw


