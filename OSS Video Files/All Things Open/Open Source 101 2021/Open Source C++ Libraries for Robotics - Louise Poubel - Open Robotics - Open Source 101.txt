Title: Open Source C++ Libraries for Robotics - Louise Poubel - Open Robotics - Open Source 101
Publication date: 2021-04-10
Playlist: Open Source 101 2021
Description: 
	Louise Poubel, Ignition Technical Lead at Open Robotics, delivered the talk "Open Source C++ Libraries for Robotics" at the Open Source 101 conference on Tuesday, March 30, 2021.

Abstract:
Gazebo is a widely-used open source robot simulator developed in 2002. Over the past 2 decades, Gazebo has accumulated a lot of code that’s useful to robotics and C++ development in general. For the past few years, the team at Open Robotics has been refactoring Gazebo from a monolithic application to a collection of loosely coupled libraries, called Ignition. These libraries can be used together to build Gazebo’s next-generation, Ignition Gazebo, and they can also be used as part of other C++ projects, especially ones in robotics. This talk will go over the Ignition libraries and what they can bring to other C++ projects.

Louise on the internets:
Twitter: https://twitter.com/chapulinaBR
GitHub: https://github.com/chapulina/
Personal website: https://louise.world/
Captions: 
	00:00:04,960 --> 00:00:08,000
okay let's start

00:00:06,240 --> 00:00:09,760
uh thank you for everybody who's here

00:00:08,000 --> 00:00:11,519
today i'll be talking about

00:00:09,760 --> 00:00:13,679
open source c plus plus libraries for

00:00:11,519 --> 00:00:14,880
robotics um

00:00:13,679 --> 00:00:16,960
hopefully this is going to be

00:00:14,880 --> 00:00:20,000
interesting for people who

00:00:16,960 --> 00:00:22,000
are working on c plus projects that are

00:00:20,000 --> 00:00:23,600
open source or not and you want to use

00:00:22,000 --> 00:00:26,240
some some of our libraries

00:00:23,600 --> 00:00:27,920
um i hope that they are useful to you

00:00:26,240 --> 00:00:29,760
whether your project is

00:00:27,920 --> 00:00:31,119
robotics related or not of course if

00:00:29,760 --> 00:00:32,000
it's robotics i think they're going to

00:00:31,119 --> 00:00:34,559
fit

00:00:32,000 --> 00:00:35,520
better for your projects so let's get

00:00:34,559 --> 00:00:38,719
started

00:00:35,520 --> 00:00:40,960
um first i'd like to

00:00:38,719 --> 00:00:42,800
introduce myself my name is luis pobel

00:00:40,960 --> 00:00:45,120
i'm the ignition tech lead at open

00:00:42,800 --> 00:00:46,800
robotics where we develop open source

00:00:45,120 --> 00:00:48,960
software for robotics

00:00:46,800 --> 00:00:50,320
so people may be familiar with the robot

00:00:48,960 --> 00:00:52,320
operating system

00:00:50,320 --> 00:00:54,000
or the gazebo simulator which is what

00:00:52,320 --> 00:00:55,440
i'm using here now

00:00:54,000 --> 00:00:57,120
also the ignition libraries that i'm

00:00:55,440 --> 00:00:58,320
going to be talking about that are part

00:00:57,120 --> 00:01:00,800
of gazebo

00:00:58,320 --> 00:01:02,000
um and i should mention that you know

00:01:00,800 --> 00:01:04,239
this is not the work

00:01:02,000 --> 00:01:05,680
that just i did right we have a large

00:01:04,239 --> 00:01:07,280
team as you can see here

00:01:05,680 --> 00:01:09,760
um there's a lot of people in various

00:01:07,280 --> 00:01:11,439
places in the us there's a lot of people

00:01:09,760 --> 00:01:12,799
in singapore there are people in europe

00:01:11,439 --> 00:01:14,720
in japan

00:01:12,799 --> 00:01:15,920
so we are all over the place and of

00:01:14,720 --> 00:01:19,200
course we have

00:01:15,920 --> 00:01:21,520
the whole open source community um

00:01:19,200 --> 00:01:22,560
you know helping us and collaborating

00:01:21,520 --> 00:01:25,920
and

00:01:22,560 --> 00:01:28,479
contributing to to our software as well

00:01:25,920 --> 00:01:29,920
so let's get started so today i'll be

00:01:28,479 --> 00:01:30,960
talking about gazebo which is the

00:01:29,920 --> 00:01:33,439
simulator here

00:01:30,960 --> 00:01:35,119
i'm doing this presentation um inside

00:01:33,439 --> 00:01:37,360
the simulator

00:01:35,119 --> 00:01:38,799
so you know this this here is running a

00:01:37,360 --> 00:01:40,560
robot simulation

00:01:38,799 --> 00:01:42,320
live and i just have like these lights

00:01:40,560 --> 00:01:43,439
floating around just to make things a

00:01:42,320 --> 00:01:45,920
little bit more

00:01:43,439 --> 00:01:47,200
interesting um gazebo is a simulator

00:01:45,920 --> 00:01:49,520
with a long history

00:01:47,200 --> 00:01:50,479
it's been developed for around two

00:01:49,520 --> 00:01:53,439
decades

00:01:50,479 --> 00:01:54,640
and it's seen various versions various

00:01:53,439 --> 00:01:57,520
releases

00:01:54,640 --> 00:01:58,079
and uh the one that i'm presenting to

00:01:57,520 --> 00:02:00,960
you now

00:01:58,079 --> 00:02:03,600
is the latest generation of gazebo which

00:02:00,960 --> 00:02:07,119
is called ignition gazebo and it's based

00:02:03,600 --> 00:02:10,479
on a lot of ignition libraries so

00:02:07,119 --> 00:02:11,120
um over the years we noticed that gazebo

00:02:10,479 --> 00:02:13,280
was

00:02:11,120 --> 00:02:14,239
the the what we are calling is evil

00:02:13,280 --> 00:02:17,440
classic

00:02:14,239 --> 00:02:21,680
um it used to be a very monolithic

00:02:17,440 --> 00:02:22,000
project with um all of the code like in

00:02:21,680 --> 00:02:24,720
one

00:02:22,000 --> 00:02:25,599
repository all like very dependent on

00:02:24,720 --> 00:02:28,800
each other

00:02:25,599 --> 00:02:30,239
uh very tightly coupled and uh

00:02:28,800 --> 00:02:32,879
over the years we realized that there

00:02:30,239 --> 00:02:34,879
was a lot of functionality inside

00:02:32,879 --> 00:02:36,720
the gazebo code base that could be

00:02:34,879 --> 00:02:38,560
useful for other projects and people

00:02:36,720 --> 00:02:41,120
were trying to use them

00:02:38,560 --> 00:02:42,800
but they couldn't you know just easily

00:02:41,120 --> 00:02:44,000
take it out of the simulator to use it

00:02:42,800 --> 00:02:46,959
in their project

00:02:44,000 --> 00:02:48,959
so we started breaking gazebo apart into

00:02:46,959 --> 00:02:51,519
several libraries that could be reused

00:02:48,959 --> 00:02:52,480
and we package them and we release them

00:02:51,519 --> 00:02:54,959
independently

00:02:52,480 --> 00:02:56,640
we version them independently so they

00:02:54,959 --> 00:02:59,760
are independent projects

00:02:56,640 --> 00:03:01,599
that are in the end used to uh

00:02:59,760 --> 00:03:03,280
build the new simulator which is called

00:03:01,599 --> 00:03:05,360
ignition gazebo

00:03:03,280 --> 00:03:06,959
so today i'll be talking about all of

00:03:05,360 --> 00:03:09,760
these ignition libraries

00:03:06,959 --> 00:03:11,519
that make the the simulator and the

00:03:09,760 --> 00:03:13,360
simulator itself is one of the

00:03:11,519 --> 00:03:15,680
these 16 libraries as well as you're

00:03:13,360 --> 00:03:18,800
going to see

00:03:15,680 --> 00:03:21,519
so um a summary of of what

00:03:18,800 --> 00:03:22,560
the ignition project has so we have 16

00:03:21,519 --> 00:03:25,200
libraries

00:03:22,560 --> 00:03:26,720
uh with various purposes i'm going to go

00:03:25,200 --> 00:03:30,879
over every single one of them

00:03:26,720 --> 00:03:34,239
uh with you now uh we use c plus plus 17

00:03:30,879 --> 00:03:36,640
as our sql split standard that we use

00:03:34,239 --> 00:03:39,360
everything is apache 2 license so you're

00:03:36,640 --> 00:03:40,560
welcome to use it in your project

00:03:39,360 --> 00:03:42,720
most of the libraries are in the

00:03:40,560 --> 00:03:45,040
ignition robotics github organization so

00:03:42,720 --> 00:03:46,799
you can go there and just get the code

00:03:45,040 --> 00:03:48,480
and and see a lot of instructions there

00:03:46,799 --> 00:03:51,519
as well we

00:03:48,480 --> 00:03:53,599
support three platforms primarily which

00:03:51,519 --> 00:03:55,360
is linux mac and windows

00:03:53,599 --> 00:03:57,680
for linux which is the our best

00:03:55,360 --> 00:04:00,959
supported platform uh we release the

00:03:57,680 --> 00:04:04,159
devian packages dabs

00:04:00,959 --> 00:04:07,680
for for linux we focus mainly on

00:04:04,159 --> 00:04:10,159
ubuntu linux um and for mac os we have

00:04:07,680 --> 00:04:13,280
homebrew bottles the mac os support

00:04:10,159 --> 00:04:14,879
is almost like the same as linux but we

00:04:13,280 --> 00:04:17,919
have some differences when it comes to

00:04:14,879 --> 00:04:19,440
command line tools into

00:04:17,919 --> 00:04:20,959
the graphical interface the interface

00:04:19,440 --> 00:04:23,280
that you're seeing here that i'm using

00:04:20,959 --> 00:04:24,880
it doesn't work as well on mac as it

00:04:23,280 --> 00:04:28,160
works on

00:04:24,880 --> 00:04:29,840
linux the same thing goes for windows uh

00:04:28,160 --> 00:04:32,639
we've been doing a big push

00:04:29,840 --> 00:04:33,120
uh for windows support in the past

00:04:32,639 --> 00:04:36,160
months

00:04:33,120 --> 00:04:38,160
maybe the past year and a lot of the

00:04:36,160 --> 00:04:39,520
stack just works well on windows

00:04:38,160 --> 00:04:40,880
especially the lower level libraries

00:04:39,520 --> 00:04:42,960
that i'm going to show you

00:04:40,880 --> 00:04:44,000
and the higher level libraries are the

00:04:42,960 --> 00:04:45,919
ones that we're still

00:04:44,000 --> 00:04:47,199
uh it's a work in progress to work well

00:04:45,919 --> 00:04:49,520
on windows

00:04:47,199 --> 00:04:51,120
we've had a great community effort that

00:04:49,520 --> 00:04:53,120
is still going to

00:04:51,120 --> 00:04:54,479
package all of the ignition libraries

00:04:53,120 --> 00:04:57,120
for conda forge

00:04:54,479 --> 00:04:58,560
uh in the of forge package uh package

00:04:57,120 --> 00:05:01,840
repository and

00:04:58,560 --> 00:05:04,000
uh that that works on windows

00:05:01,840 --> 00:05:05,600
so if you're interested if your project

00:05:04,000 --> 00:05:07,199
supports these platforms

00:05:05,600 --> 00:05:08,840
it there's a high chance that these

00:05:07,199 --> 00:05:10,639
ignition libraries could be useful to

00:05:08,840 --> 00:05:13,520
you

00:05:10,639 --> 00:05:14,960
so here's a map of the ignition

00:05:13,520 --> 00:05:16,160
libraries that we're going to be looking

00:05:14,960 --> 00:05:18,400
at today

00:05:16,160 --> 00:05:19,680
so you can see here that they are very

00:05:18,400 --> 00:05:22,240
tightly coupled

00:05:19,680 --> 00:05:24,560
uh well not not so tightly coupled there

00:05:22,240 --> 00:05:26,400
is a hierarchy it's a little bit messy

00:05:24,560 --> 00:05:27,759
of course there's like 16 libraries kind

00:05:26,400 --> 00:05:29,440
of depending on each other

00:05:27,759 --> 00:05:31,120
but we can kind of see some clusters for

00:05:29,440 --> 00:05:32,240
example ignition cmake is here at the

00:05:31,120 --> 00:05:35,039
bottom and pretty much

00:05:32,240 --> 00:05:36,720
everything depends on it uh and ignition

00:05:35,039 --> 00:05:38,960
gazebo on the other hand is almost a

00:05:36,720 --> 00:05:40,160
leaf package it's here and it depends on

00:05:38,960 --> 00:05:42,720
pretty much everything that is

00:05:40,160 --> 00:05:44,560
under here uh while we have ignition

00:05:42,720 --> 00:05:45,360
launch that is on top of the ignition

00:05:44,560 --> 00:05:47,680
gazebo

00:05:45,360 --> 00:05:49,440
the ignition gazebo doesn't depend on it

00:05:47,680 --> 00:05:50,160
um but ignition launch depends on

00:05:49,440 --> 00:05:52,240
ignition gaze

00:05:50,160 --> 00:05:53,840
it's the leaf most package and the

00:05:52,240 --> 00:05:55,680
entire ecosystem

00:05:53,840 --> 00:05:56,880
and you can see that we have libraries

00:05:55,680 --> 00:05:59,919
for for

00:05:56,880 --> 00:06:03,360
rendering and for physics and sensor

00:05:59,919 --> 00:06:05,520
simulation and uh like registering and

00:06:03,360 --> 00:06:07,120
loading plugins at runtime there is a

00:06:05,520 --> 00:06:09,440
math library

00:06:07,120 --> 00:06:12,080
there is a library for describing your

00:06:09,440 --> 00:06:14,800
world there is a format that we use

00:06:12,080 --> 00:06:15,440
there is a transport that supports

00:06:14,800 --> 00:06:17,759
publisher

00:06:15,440 --> 00:06:18,880
subscriber and request and response kind

00:06:17,759 --> 00:06:22,479
of

00:06:18,880 --> 00:06:24,800
uh kind of mechanisms for transport

00:06:22,479 --> 00:06:25,680
so i'm going to go over every single one

00:06:24,800 --> 00:06:27,360
of these libraries

00:06:25,680 --> 00:06:29,440
kind of give you an overview of what it

00:06:27,360 --> 00:06:30,080
provides and hopefully a few of them

00:06:29,440 --> 00:06:32,160
will be

00:06:30,080 --> 00:06:33,600
useful to your project or if you're

00:06:32,160 --> 00:06:36,880
looking into code

00:06:33,600 --> 00:06:37,919
using gazebo itself i i hope this is

00:06:36,880 --> 00:06:39,280
going to be helpful for you to

00:06:37,919 --> 00:06:41,520
understand a little bit better how

00:06:39,280 --> 00:06:44,560
gazebo works

00:06:41,520 --> 00:06:45,360
so let's get started with um ignition

00:06:44,560 --> 00:06:47,520
cmake

00:06:45,360 --> 00:06:49,360
which is the the root so i'm going to

00:06:47,520 --> 00:06:51,280
kind of like make my way up

00:06:49,360 --> 00:06:52,639
through this presentation so let's start

00:06:51,280 --> 00:06:56,160
with ignition cmake

00:06:52,639 --> 00:06:59,680
um cmake is a build system that helps us

00:06:56,160 --> 00:07:01,759
kind of like build everything and

00:06:59,680 --> 00:07:03,360
build things in order link everything

00:07:01,759 --> 00:07:05,360
correctly and so on

00:07:03,360 --> 00:07:06,400
and we have the ignition cmake library

00:07:05,360 --> 00:07:08,800
which helps us

00:07:06,400 --> 00:07:09,599
make this uh easy for all of the other

00:07:08,800 --> 00:07:14,319
libraries

00:07:09,599 --> 00:07:16,960
so um it provides modules and functions

00:07:14,319 --> 00:07:19,199
there are cmake models and functions and

00:07:16,960 --> 00:07:22,319
it helps us to find dependencies across

00:07:19,199 --> 00:07:23,520
all platforms in a uniform way so uh you

00:07:22,319 --> 00:07:25,039
know if multiple

00:07:23,520 --> 00:07:27,120
of our libraries for example need to

00:07:25,039 --> 00:07:29,520
find protobuf and

00:07:27,120 --> 00:07:31,360
uh the code for finding protobuf can get

00:07:29,520 --> 00:07:32,880
quite extensive if you want to make sure

00:07:31,360 --> 00:07:35,520
that you find it on

00:07:32,880 --> 00:07:36,400
linux mac and windows correctly in cmake

00:07:35,520 --> 00:07:38,479
so we just provide

00:07:36,400 --> 00:07:40,000
that module inside the ignition cmake

00:07:38,479 --> 00:07:40,800
and all of the other libraries can use

00:07:40,000 --> 00:07:43,759
it

00:07:40,800 --> 00:07:45,599
it also provides some helpful

00:07:43,759 --> 00:07:48,720
functionality for testing so

00:07:45,599 --> 00:07:49,680
for generating the tests for all of the

00:07:48,720 --> 00:07:52,160
other libraries

00:07:49,680 --> 00:07:53,120
we have some very convenient functions

00:07:52,160 --> 00:07:55,840
uh in here

00:07:53,120 --> 00:07:57,759
it also generates test coverage uh using

00:07:55,840 --> 00:07:59,360
elkov very easily

00:07:57,759 --> 00:08:01,520
it generates all of our lives

00:07:59,360 --> 00:08:02,240
documentation that we have like api

00:08:01,520 --> 00:08:05,520
documentation

00:08:02,240 --> 00:08:07,520
and tutorials is generated using doxygen

00:08:05,520 --> 00:08:09,199
and that's generated using functions

00:08:07,520 --> 00:08:10,720
that are inside ignition cmx so we don't

00:08:09,199 --> 00:08:11,599
need to repeat that for all of the

00:08:10,720 --> 00:08:13,360
libraries

00:08:11,599 --> 00:08:14,639
i don't think ignition cmake is super

00:08:13,360 --> 00:08:16,960
helpful for

00:08:14,639 --> 00:08:17,680
other projects that are not ignition

00:08:16,960 --> 00:08:20,639
libraries

00:08:17,680 --> 00:08:21,680
maybe you can use um as examples like

00:08:20,639 --> 00:08:24,879
the find

00:08:21,680 --> 00:08:26,319
uh functions are are probably very

00:08:24,879 --> 00:08:26,639
helpful for people who are trying to

00:08:26,319 --> 00:08:29,520
find

00:08:26,639 --> 00:08:30,400
those specific libraries in their uh

00:08:29,520 --> 00:08:32,719
systems

00:08:30,400 --> 00:08:34,719
um but but pretty much the all of the

00:08:32,719 --> 00:08:36,320
rest is structured in a way that

00:08:34,719 --> 00:08:38,800
expects everything to be ignition

00:08:36,320 --> 00:08:42,000
ignition name spaces and so on

00:08:38,800 --> 00:08:44,560
so uh this is not

00:08:42,000 --> 00:08:46,000
the most helpful uh library for other

00:08:44,560 --> 00:08:48,880
people but i think that it

00:08:46,000 --> 00:08:51,200
um it serves as a good reference and it

00:08:48,880 --> 00:08:52,800
is the root of all of the other ignition

00:08:51,200 --> 00:08:54,240
libraries if you're going to use any of

00:08:52,800 --> 00:08:54,800
the other libraries this one is going to

00:08:54,240 --> 00:08:58,480
come

00:08:54,800 --> 00:08:59,839
as a dependency of it and and here for

00:08:58,480 --> 00:09:00,720
all of the libraries i'm going to put

00:08:59,839 --> 00:09:03,680
their path

00:09:00,720 --> 00:09:06,480
uh on github down here so you can you

00:09:03,680 --> 00:09:08,800
can check it out if you want

00:09:06,480 --> 00:09:09,519
so okay so that was cma so let's go to

00:09:08,800 --> 00:09:11,519
another

00:09:09,519 --> 00:09:12,560
very low level library which is ignition

00:09:11,519 --> 00:09:14,720
math

00:09:12,560 --> 00:09:16,640
um and you can see that math only

00:09:14,720 --> 00:09:18,720
depends on c make and pretty much

00:09:16,640 --> 00:09:20,240
everything else depends on

00:09:18,720 --> 00:09:23,040
math like everything that does some

00:09:20,240 --> 00:09:24,399
calculation is using our math library in

00:09:23,040 --> 00:09:27,680
here and this one i think

00:09:24,399 --> 00:09:29,920
is very useful for other projects so

00:09:27,680 --> 00:09:31,200
um it provides like a lot of the

00:09:29,920 --> 00:09:32,399
computations that you need for for

00:09:31,200 --> 00:09:34,480
example

00:09:32,399 --> 00:09:36,320
poses matrices quaternions everything

00:09:34,480 --> 00:09:39,360
like in this 3d world

00:09:36,320 --> 00:09:41,440
the way that it moves the way that it

00:09:39,360 --> 00:09:43,200
moves the way that the things like when

00:09:41,440 --> 00:09:45,360
i move this camera when i

00:09:43,200 --> 00:09:48,080
position objects everything here is

00:09:45,360 --> 00:09:49,600
described using ignition math types

00:09:48,080 --> 00:09:51,839
we also have a lot of helper functions

00:09:49,600 --> 00:09:54,320
to calculate like volume density

00:09:51,839 --> 00:09:55,440
inertial properties which can be really

00:09:54,320 --> 00:09:58,800
tough to compute

00:09:55,440 --> 00:10:01,839
like um you know the moments of inertia

00:09:58,800 --> 00:10:04,880
based on the mass and density of uh

00:10:01,839 --> 00:10:06,800
of a shape so all of these things

00:10:04,880 --> 00:10:09,920
uh are provided here there's like

00:10:06,800 --> 00:10:11,760
helpers for temperature so you know

00:10:09,920 --> 00:10:13,440
we we support inside the simulation

00:10:11,760 --> 00:10:16,079
there are thermal cameras

00:10:13,440 --> 00:10:16,640
there are uh temperature variations that

00:10:16,079 --> 00:10:19,279
change

00:10:16,640 --> 00:10:20,240
air density that affects drones so all

00:10:19,279 --> 00:10:22,720
of these things

00:10:20,240 --> 00:10:24,880
are needed for the robot simulation and

00:10:22,720 --> 00:10:27,680
we provide types in ignition math

00:10:24,880 --> 00:10:30,240
pid controllers odometry helpers for you

00:10:27,680 --> 00:10:33,040
to get odometry for differential drive

00:10:30,240 --> 00:10:34,959
vehicles like the speed limiter there is

00:10:33,040 --> 00:10:36,320
filtering their spline so there is a lot

00:10:34,959 --> 00:10:39,440
of functionality that is

00:10:36,320 --> 00:10:42,240
uh very useful to robotics in general

00:10:39,440 --> 00:10:44,160
and is not specific to a simulator and

00:10:42,240 --> 00:10:44,880
we also provide of course conversions to

00:10:44,160 --> 00:10:48,000
eigen

00:10:44,880 --> 00:10:48,640
which is a very popular math library but

00:10:48,000 --> 00:10:51,279
it isn't

00:10:48,640 --> 00:10:53,519
specific to robotics so a lot of

00:10:51,279 --> 00:10:56,160
projects are using eigen but maybe

00:10:53,519 --> 00:10:56,560
they don't provide uh the the reason why

00:10:56,160 --> 00:10:58,320
we

00:10:56,560 --> 00:11:00,399
don't just use eigen and we have our own

00:10:58,320 --> 00:11:02,320
math library it's because we

00:11:00,399 --> 00:11:03,920
need to do some computation that is very

00:11:02,320 --> 00:11:06,399
specific to

00:11:03,920 --> 00:11:07,440
uh robotics and that eigen and other

00:11:06,399 --> 00:11:10,240
libraries

00:11:07,440 --> 00:11:10,560
that we looked at didn't really provide

00:11:10,240 --> 00:11:13,279
so

00:11:10,560 --> 00:11:14,640
ignition math is is this one here and i

00:11:13,279 --> 00:11:15,600
really recommend that you check it out

00:11:14,640 --> 00:11:19,040
it's one of our

00:11:15,600 --> 00:11:22,160
most uh well documented and well

00:11:19,040 --> 00:11:24,959
tested libraries it has 99 test coverage

00:11:22,160 --> 00:11:27,360
so we're really confident uh in the

00:11:24,959 --> 00:11:29,519
quality of the code here in this library

00:11:27,360 --> 00:11:30,720
because really it is a core to

00:11:29,519 --> 00:11:32,720
everything that we're doing

00:11:30,720 --> 00:11:35,279
uh in the simulation right like our math

00:11:32,720 --> 00:11:38,800
needs to be right

00:11:35,279 --> 00:11:39,680
so okay so we saw math now let's take a

00:11:38,800 --> 00:11:42,160
look

00:11:39,680 --> 00:11:43,839
here at another root package so you can

00:11:42,160 --> 00:11:46,000
see ignition tools is the only one that

00:11:43,839 --> 00:11:48,640
doesn't depend on ignition c make

00:11:46,000 --> 00:11:51,279
it of the entire ecosystem and it is a

00:11:48,640 --> 00:11:53,279
special snowflake so let's talk about it

00:11:51,279 --> 00:11:54,880
it i put a door here because it is

00:11:53,279 --> 00:11:58,320
really the entry point

00:11:54,880 --> 00:12:01,200
for a lot of the other libraries so

00:11:58,320 --> 00:12:02,880
um ignition tools provides our cli right

00:12:01,200 --> 00:12:06,320
cli is that the command line

00:12:02,880 --> 00:12:10,079
uh interface so you type ign and

00:12:06,320 --> 00:12:13,040
another verb command and you can uh

00:12:10,079 --> 00:12:14,560
execute commands in the simulation the

00:12:13,040 --> 00:12:15,120
main difference from the other libraries

00:12:14,560 --> 00:12:18,079
is that it

00:12:15,120 --> 00:12:20,800
has a dependency on ruby so the

00:12:18,079 --> 00:12:23,120
executable itself is a ruby executable

00:12:20,800 --> 00:12:24,000
and it loads the c plus libraries

00:12:23,120 --> 00:12:27,440
internally

00:12:24,000 --> 00:12:30,880
from from that ruby uh script

00:12:27,440 --> 00:12:33,760
so for example it provides uh

00:12:30,880 --> 00:12:34,639
uh commands like this like ign space

00:12:33,760 --> 00:12:37,680
gazebo

00:12:34,639 --> 00:12:38,399
and you pass the file uh the the address

00:12:37,680 --> 00:12:40,800
to a file

00:12:38,399 --> 00:12:41,440
with and you can load gazebo like i have

00:12:40,800 --> 00:12:44,880
here

00:12:41,440 --> 00:12:47,519
in this presentation uh with uh

00:12:44,880 --> 00:12:48,639
you know the specific uh worlds that

00:12:47,519 --> 00:12:50,800
you're trying to load

00:12:48,639 --> 00:12:52,880
in your simulation it provides like an

00:12:50,800 --> 00:12:54,560
ign topic echo

00:12:52,880 --> 00:12:56,399
this topic so this one is for the

00:12:54,560 --> 00:12:57,440
transport layer that we're going to talk

00:12:56,399 --> 00:12:59,120
about later

00:12:57,440 --> 00:13:00,560
it also provides an interface to

00:12:59,120 --> 00:13:04,000
ignition fuel which i'll

00:13:00,560 --> 00:13:07,200
show you soon as well and um

00:13:04,000 --> 00:13:10,160
this lets you ignition fuse a online

00:13:07,200 --> 00:13:10,880
repository uh model repository so you

00:13:10,160 --> 00:13:13,440
can

00:13:10,880 --> 00:13:15,519
download models and upload models and

00:13:13,440 --> 00:13:17,360
list models that are online

00:13:15,519 --> 00:13:19,519
uh all using this command line so when

00:13:17,360 --> 00:13:23,120
there are many other

00:13:19,519 --> 00:13:26,320
many other functionalities as well like

00:13:23,120 --> 00:13:28,560
launching a gui uh launching like

00:13:26,320 --> 00:13:29,839
ignition launch files and so on like

00:13:28,560 --> 00:13:32,480
inspecting plugins

00:13:29,839 --> 00:13:34,399
there's there's a lot that you can do

00:13:32,480 --> 00:13:35,920
but this one is another one that i think

00:13:34,399 --> 00:13:38,959
is very specific to

00:13:35,920 --> 00:13:41,040
ignition because it provides the ign cli

00:13:38,959 --> 00:13:42,800
right so uh everyone is welcome to

00:13:41,040 --> 00:13:44,959
create their own ignition libraries and

00:13:42,800 --> 00:13:47,199
and use the ign3 if they want

00:13:44,959 --> 00:13:49,199
uh but i i'm guessing that most of the

00:13:47,199 --> 00:13:51,920
other projects they would want to use

00:13:49,199 --> 00:13:53,600
a different uh entry point for their

00:13:51,920 --> 00:13:55,199
command line tools but i have to mention

00:13:53,600 --> 00:13:56,639
because it's part of the stack and a lot

00:13:55,199 --> 00:13:58,160
of things are going to pull this

00:13:56,639 --> 00:14:00,000
as a dependency and you're going to have

00:13:58,160 --> 00:14:01,600
to interact with it if you're using a

00:14:00,000 --> 00:14:04,160
lot of the other

00:14:01,600 --> 00:14:04,160
libraries

00:14:04,639 --> 00:14:08,560
okay so we checked tools which is kind

00:14:06,639 --> 00:14:11,120
of like this entry point here

00:14:08,560 --> 00:14:13,120
let's go to this other very thin library

00:14:11,120 --> 00:14:14,959
that only depends on ignitions he make

00:14:13,120 --> 00:14:16,240
and nothing else inside the ecosystem

00:14:14,959 --> 00:14:20,079
which is ignition

00:14:16,240 --> 00:14:23,120
utils that provides a lot of tools

00:14:20,079 --> 00:14:26,880
so ignition utils is actually a very

00:14:23,120 --> 00:14:29,920
new uh young library we

00:14:26,880 --> 00:14:31,279
actually its first stable version 1.0 is

00:14:29,920 --> 00:14:33,040
going to be released tomorrow

00:14:31,279 --> 00:14:34,639
i'm going to talk about this soon but

00:14:33,040 --> 00:14:36,560
like we have uh

00:14:34,639 --> 00:14:38,160
a major release coming up tomorrow what

00:14:36,560 --> 00:14:39,199
i'm running here is actually i'm using

00:14:38,160 --> 00:14:40,480
the pre-release

00:14:39,199 --> 00:14:43,440
of the release that we're going to make

00:14:40,480 --> 00:14:46,240
stable tomorrow so

00:14:43,440 --> 00:14:48,000
this library here is new and we created

00:14:46,240 --> 00:14:49,440
it to be really light on dependencies as

00:14:48,000 --> 00:14:50,160
you can see it only depends on ignitions

00:14:49,440 --> 00:14:52,480
you make and

00:14:50,160 --> 00:14:54,000
no it doesn't bring a lot of big

00:14:52,480 --> 00:14:55,839
external dependencies

00:14:54,000 --> 00:14:57,120
uh and it provides tools and utility so

00:14:55,839 --> 00:14:59,120
some of the things that are already

00:14:57,120 --> 00:15:00,079
there is for example a helper pimple

00:14:59,120 --> 00:15:02,000
class

00:15:00,079 --> 00:15:03,760
people who do c plus plus uh may be

00:15:02,000 --> 00:15:06,079
familiar with the pimple pattern that

00:15:03,760 --> 00:15:09,760
it's a pattern that helps us keep

00:15:06,079 --> 00:15:12,399
libraries avi stable making changes to

00:15:09,760 --> 00:15:15,519
them while keeping them avi stable

00:15:12,399 --> 00:15:17,519
um which um you know i should have

00:15:15,519 --> 00:15:19,600
mentioned like all of our libraries we

00:15:17,519 --> 00:15:20,560
use semantic versioning and we make sure

00:15:19,600 --> 00:15:23,839
that we don't break

00:15:20,560 --> 00:15:26,160
api api in within a major version

00:15:23,839 --> 00:15:27,279
so you can be sure that like if you're

00:15:26,160 --> 00:15:29,120
getting an upgrade

00:15:27,279 --> 00:15:31,040
you're only getting new backwards

00:15:29,120 --> 00:15:33,839
compatible features and bug fixes

00:15:31,040 --> 00:15:34,560
so the pimple pattern is really helpful

00:15:33,839 --> 00:15:37,839
with that

00:15:34,560 --> 00:15:40,880
and ignition utils provides a helper to

00:15:37,839 --> 00:15:42,639
that implements this for us there's also

00:15:40,880 --> 00:15:44,560
like a lot of macros to suppress

00:15:42,639 --> 00:15:46,079
warnings so suppressing warnings

00:15:44,560 --> 00:15:47,920
is very important when you have such a

00:15:46,079 --> 00:15:49,040
large code base and

00:15:47,920 --> 00:15:51,440
if you want to do this in a

00:15:49,040 --> 00:15:52,639
cross-platform compatible way you end up

00:15:51,440 --> 00:15:55,920
with like a lot of

00:15:52,639 --> 00:15:56,560
pragmas and like if depths and like it

00:15:55,920 --> 00:16:00,240
can become

00:15:56,560 --> 00:16:02,000
a huge block of text just like a

00:16:00,240 --> 00:16:04,560
boilerplate for you to suppress a

00:16:02,000 --> 00:16:05,440
warning so we provide like macros that

00:16:04,560 --> 00:16:07,600
make this much

00:16:05,440 --> 00:16:09,440
shorter and more convenient to use

00:16:07,600 --> 00:16:11,360
there's also like some command line

00:16:09,440 --> 00:16:15,199
argument parsing that we are wrapping

00:16:11,360 --> 00:16:17,680
another open source library called cli11

00:16:15,199 --> 00:16:18,320
so for now this is mostly what it what

00:16:17,680 --> 00:16:20,079
it has

00:16:18,320 --> 00:16:21,519
but since it's a young library we're

00:16:20,079 --> 00:16:23,600
really planning on putting

00:16:21,519 --> 00:16:24,800
everything that is generally useful to

00:16:23,600 --> 00:16:28,079
all of the other libraries

00:16:24,800 --> 00:16:28,959
and doesn't have any dependencies and

00:16:28,079 --> 00:16:30,959
it's

00:16:28,959 --> 00:16:32,240
supposed to be very stable so we're not

00:16:30,959 --> 00:16:34,959
going to be

00:16:32,240 --> 00:16:36,000
increasing the major version very often

00:16:34,959 --> 00:16:39,199
that's going to land here

00:16:36,000 --> 00:16:40,560
in ignition utils so this is one that i

00:16:39,199 --> 00:16:43,199
think that people should really

00:16:40,560 --> 00:16:44,639
look into because it may currently

00:16:43,199 --> 00:16:46,240
already have things that are useful to

00:16:44,639 --> 00:16:50,160
your projects and we may be adding more

00:16:46,240 --> 00:16:51,360
stuff that would be useful as well okay

00:16:50,160 --> 00:16:53,600
so this is utils

00:16:51,360 --> 00:16:54,800
so i couldn't talk about utils and not

00:16:53,600 --> 00:16:57,600
talk straight

00:16:54,800 --> 00:17:00,240
uh about straight after about uh

00:16:57,600 --> 00:17:02,480
ignition common which is

00:17:00,240 --> 00:17:03,680
prim in many ways the grandfather of

00:17:02,480 --> 00:17:05,919
ignition newtons

00:17:03,680 --> 00:17:08,319
it is the first library where we used to

00:17:05,919 --> 00:17:09,360
put all of these miscellaneous generally

00:17:08,319 --> 00:17:11,039
useful things

00:17:09,360 --> 00:17:12,799
that can be helpful for all of the

00:17:11,039 --> 00:17:16,319
libraries

00:17:12,799 --> 00:17:19,280
so um we started doing this

00:17:16,319 --> 00:17:20,799
with ignition common and we uh it

00:17:19,280 --> 00:17:24,400
provides a lot of

00:17:20,799 --> 00:17:26,799
various like functionality like audio uh

00:17:24,400 --> 00:17:27,760
video it provides like graphics

00:17:26,799 --> 00:17:30,480
interfaces

00:17:27,760 --> 00:17:33,520
it provides uh you know graphics like to

00:17:30,480 --> 00:17:36,320
load meshes and this kind of stuff

00:17:33,520 --> 00:17:36,960
it has events it has a profiler it has

00:17:36,320 --> 00:17:39,039
console

00:17:36,960 --> 00:17:40,160
logging all of the libraries that that

00:17:39,039 --> 00:17:42,559
use console logging

00:17:40,160 --> 00:17:43,440
use the one from ignition common it has

00:17:42,559 --> 00:17:46,000
a thread ball

00:17:43,440 --> 00:17:46,720
it has like string utilities it has much

00:17:46,000 --> 00:17:49,360
more

00:17:46,720 --> 00:17:51,760
uh we really put a lot there when we

00:17:49,360 --> 00:17:53,280
took gazebo classic which was a monolith

00:17:51,760 --> 00:17:55,440
and we took all of the parts that really

00:17:53,280 --> 00:17:57,200
didn't fit in any of the other libraries

00:17:55,440 --> 00:17:58,799
we kind of put in ignition common

00:17:57,200 --> 00:18:00,720
and what happens is that it became a

00:17:58,799 --> 00:18:03,120
little bit bloated uh

00:18:00,720 --> 00:18:04,640
when we package it for depending on each

00:18:03,120 --> 00:18:06,320
one of the the packaging systems that

00:18:04,640 --> 00:18:08,240
we're using we managed to keep them

00:18:06,320 --> 00:18:11,600
separate for example av

00:18:08,240 --> 00:18:13,840
brings a lot of heavy dependencies

00:18:11,600 --> 00:18:16,080
that people who are using a profiler

00:18:13,840 --> 00:18:17,760
maybe not be interested to like download

00:18:16,080 --> 00:18:20,080
and bring those dependencies to their

00:18:17,760 --> 00:18:21,360
to their system so we keep them in

00:18:20,080 --> 00:18:22,400
separate components and if you're

00:18:21,360 --> 00:18:25,120
installing a dead

00:18:22,400 --> 00:18:27,440
you can install them separately but it's

00:18:25,120 --> 00:18:29,840
not possible to keep that separation in

00:18:27,440 --> 00:18:31,120
uh in every packaging system for example

00:18:29,840 --> 00:18:34,160
for homebrew bottles it's

00:18:31,120 --> 00:18:36,240
it's kind of hard to do this and uh

00:18:34,160 --> 00:18:38,160
so so this this proved to be a little

00:18:36,240 --> 00:18:39,280
bit inconvenient another thing that is

00:18:38,160 --> 00:18:42,000
inconvenient about this

00:18:39,280 --> 00:18:43,200
is if we need to make an api breaking

00:18:42,000 --> 00:18:44,880
change to av

00:18:43,200 --> 00:18:46,160
we need to bump the major version for

00:18:44,880 --> 00:18:48,080
all of the other ones because they are

00:18:46,160 --> 00:18:48,799
the same library and and they are bumped

00:18:48,080 --> 00:18:50,960
together

00:18:48,799 --> 00:18:52,799
so we are making like new major releases

00:18:50,960 --> 00:18:53,120
of the profiler even though no changes

00:18:52,799 --> 00:18:55,520
are

00:18:53,120 --> 00:18:57,440
really there in the code and users

00:18:55,520 --> 00:18:58,799
downstream users will need to bump that

00:18:57,440 --> 00:19:00,240
version that dependency

00:18:58,799 --> 00:19:02,160
even though they don't need to change

00:19:00,240 --> 00:19:04,559
anything so

00:19:02,160 --> 00:19:06,400
uh that's why that's what motivated us

00:19:04,559 --> 00:19:08,480
to create ignition utils

00:19:06,400 --> 00:19:10,480
and we are slowly kind of going to be

00:19:08,480 --> 00:19:12,080
moving some of these things there

00:19:10,480 --> 00:19:14,480
uh things like the profiler which are

00:19:12,080 --> 00:19:16,160
meant to be super stable and are not

00:19:14,480 --> 00:19:18,000
going to be changing often and don't

00:19:16,160 --> 00:19:20,559
bring any external dependencies

00:19:18,000 --> 00:19:22,240
could just be there and be very stable

00:19:20,559 --> 00:19:25,360
and people can count on them and then

00:19:22,240 --> 00:19:29,120
ignition common would keep the heavier

00:19:25,360 --> 00:19:32,160
items like audio and graphics

00:19:29,120 --> 00:19:32,720
and so on so even though i said all this

00:19:32,160 --> 00:19:35,280
like that

00:19:32,720 --> 00:19:36,960
it it is a bulky library it it is bulky

00:19:35,280 --> 00:19:38,240
because it has a lot of functionality

00:19:36,960 --> 00:19:40,240
and it's very useful

00:19:38,240 --> 00:19:41,280
right so i think that ignition common

00:19:40,240 --> 00:19:42,000
has a lot of things that could be

00:19:41,280 --> 00:19:43,679
helpful for

00:19:42,000 --> 00:19:46,559
a lot of other projects like if you're

00:19:43,679 --> 00:19:49,280
loading 3d meshes for example we have a

00:19:46,559 --> 00:19:52,720
lot of interfaces if you're

00:19:49,280 --> 00:19:55,679
loading audio files to play in

00:19:52,720 --> 00:19:59,440
a 3d environment and so on um you can

00:19:55,679 --> 00:20:02,640
find these things inside ignition comma

00:19:59,440 --> 00:20:05,280
okay so from common

00:20:02,640 --> 00:20:06,880
uh we go a little bit here to plug-in

00:20:05,280 --> 00:20:08,320
which is a library that used to be

00:20:06,880 --> 00:20:12,080
inside the ignition common

00:20:08,320 --> 00:20:12,960
and we took it out and made it into its

00:20:12,080 --> 00:20:16,159
own library

00:20:12,960 --> 00:20:17,919
a while back and

00:20:16,159 --> 00:20:20,159
you can see that it depends on ignitions

00:20:17,919 --> 00:20:21,840
you make and it depends here on ignition

00:20:20,159 --> 00:20:24,000
tools it has a command line tool which

00:20:21,840 --> 00:20:26,000
is optional for you to inspect plugins

00:20:24,000 --> 00:20:28,240
but it's not really necessary for you

00:20:26,000 --> 00:20:29,679
to bring ignition tools as a dependency

00:20:28,240 --> 00:20:31,039
so let's see what ignition plugin is

00:20:29,679 --> 00:20:33,120
about

00:20:31,039 --> 00:20:34,880
um it lets you register libraries and

00:20:33,120 --> 00:20:35,520
load them at runtime and this happens to

00:20:34,880 --> 00:20:37,840
be

00:20:35,520 --> 00:20:39,440
core functionality for the simulator

00:20:37,840 --> 00:20:41,440
because as you're going to see

00:20:39,440 --> 00:20:42,720
a lot of the libraries higher up in

00:20:41,440 --> 00:20:45,600
stack really rely

00:20:42,720 --> 00:20:48,080
on this plugin loading at runtime to be

00:20:45,600 --> 00:20:50,880
configurable and to be really

00:20:48,080 --> 00:20:52,400
flexible so you can like load different

00:20:50,880 --> 00:20:54,480
physics engines different rendering

00:20:52,400 --> 00:20:55,600
engines different plug-ins to con to

00:20:54,480 --> 00:20:57,919
create your ui

00:20:55,600 --> 00:20:58,960
to create the functionality of your

00:20:57,919 --> 00:21:01,360
simulation

00:20:58,960 --> 00:21:02,240
to customize everything everything's

00:21:01,360 --> 00:21:04,640
customizable

00:21:02,240 --> 00:21:05,919
through plugins so this this library is

00:21:04,640 --> 00:21:09,760
very central

00:21:05,919 --> 00:21:12,960
um as i i think it is very useful for

00:21:09,760 --> 00:21:15,440
other projects as well because it

00:21:12,960 --> 00:21:16,960
provides just a generic way of loading

00:21:15,440 --> 00:21:18,320
plugins that is cross-platform

00:21:16,960 --> 00:21:20,640
compatible

00:21:18,320 --> 00:21:21,440
and it uh has like it has very good

00:21:20,640 --> 00:21:23,840
support for

00:21:21,440 --> 00:21:24,720
templated classes so you can instantiate

00:21:23,840 --> 00:21:26,720
plugins

00:21:24,720 --> 00:21:28,400
uh for templates of the different

00:21:26,720 --> 00:21:31,919
interfaces that you want

00:21:28,400 --> 00:21:33,280
uh to use so uh check out the ignition

00:21:31,919 --> 00:21:34,640
plug-in if you're having a hard time

00:21:33,280 --> 00:21:36,799
like finding a library

00:21:34,640 --> 00:21:38,480
that helps you just do this kind of

00:21:36,799 --> 00:21:43,120
loading at runtime

00:21:38,480 --> 00:21:43,120
uh of shared libraries pretty much

00:21:43,360 --> 00:21:48,880
okay so this was ignition plug-in now

00:21:46,880 --> 00:21:50,960
let's hop over common because we already

00:21:48,880 --> 00:21:53,600
talked about it and let's take a look at

00:21:50,960 --> 00:21:54,400
sd format which is pretty much here in

00:21:53,600 --> 00:21:58,559
the heart

00:21:54,400 --> 00:22:01,120
of the of our schematics here um

00:21:58,559 --> 00:22:02,480
not a lot of things depend directly on

00:22:01,120 --> 00:22:05,600
it but it is really

00:22:02,480 --> 00:22:07,600
um a core functionality that that's

00:22:05,600 --> 00:22:09,600
how the entire simulation starts it

00:22:07,600 --> 00:22:13,120
starts from an sd format

00:22:09,600 --> 00:22:16,080
file so let's see uh sdf

00:22:13,120 --> 00:22:16,880
stands for simulation description format

00:22:16,080 --> 00:22:20,320
it is

00:22:16,880 --> 00:22:22,640
both an xml spec

00:22:20,320 --> 00:22:25,120
for describing this environment the

00:22:22,640 --> 00:22:27,520
simulation environment like this one

00:22:25,120 --> 00:22:29,200
so it allows you to describe for example

00:22:27,520 --> 00:22:32,240
there is a

00:22:29,200 --> 00:22:35,600
door here in this position and there is

00:22:32,240 --> 00:22:36,080
um you know there is a robot there is a

00:22:35,600 --> 00:22:38,880
slide

00:22:36,080 --> 00:22:40,640
put it here there is a robot put it here

00:22:38,880 --> 00:22:42,720
and this robot is going to have

00:22:40,640 --> 00:22:43,919
a plug-in that you're going to load from

00:22:42,720 --> 00:22:46,159
this path

00:22:43,919 --> 00:22:48,159
and there will be a light position in a

00:22:46,159 --> 00:22:51,200
specific place there will be a sky

00:22:48,159 --> 00:22:52,320
outside uh that you're going to get from

00:22:51,200 --> 00:22:55,520
a specific place

00:22:52,320 --> 00:22:57,360
so format really allows you to describe

00:22:55,520 --> 00:23:00,320
this entire scene so it has this

00:22:57,360 --> 00:23:02,480
xml specification and it also has a

00:23:00,320 --> 00:23:04,480
reference parser in simplest plus

00:23:02,480 --> 00:23:06,960
that you're welcome to use but you can

00:23:04,480 --> 00:23:09,840
use also your own parser

00:23:06,960 --> 00:23:10,559
um it is the only library that it is

00:23:09,840 --> 00:23:13,679
part of the

00:23:10,559 --> 00:23:16,640
ignition ecosystem but it isn't in the

00:23:13,679 --> 00:23:17,520
it isn't in the ignition robotics uh

00:23:16,640 --> 00:23:19,679
github org

00:23:17,520 --> 00:23:20,960
it is in the osrf org just because it's

00:23:19,679 --> 00:23:22,799
a

00:23:20,960 --> 00:23:24,240
older library that has been around for a

00:23:22,799 --> 00:23:26,480
long time and

00:23:24,240 --> 00:23:28,000
uh we didn't want to just like you know

00:23:26,480 --> 00:23:28,640
make a lot of changes to it because it

00:23:28,000 --> 00:23:31,120
works

00:23:28,640 --> 00:23:32,640
very well the way it does so it is in

00:23:31,120 --> 00:23:35,360
this old

00:23:32,640 --> 00:23:36,880
uh in this other organization but it is

00:23:35,360 --> 00:23:38,480
released at the same time as the other

00:23:36,880 --> 00:23:40,320
libraries it is used by the other

00:23:38,480 --> 00:23:43,840
libraries and so on

00:23:40,320 --> 00:23:46,559
um so yeah so this is how

00:23:43,840 --> 00:23:47,840
how everything in the world uh starts it

00:23:46,559 --> 00:23:49,679
starts from sdf

00:23:47,840 --> 00:23:51,760
and one thing that i should point out is

00:23:49,679 --> 00:23:53,279
that it's not only used by gazebo this

00:23:51,760 --> 00:23:55,840
is one of our libraries that is

00:23:53,279 --> 00:23:57,279
widely used by other simulators for

00:23:55,840 --> 00:23:57,760
example so there are like at least a

00:23:57,279 --> 00:23:59,840
couple of

00:23:57,760 --> 00:24:01,440
like at least three simulators i can

00:23:59,840 --> 00:24:04,240
think of that do use

00:24:01,440 --> 00:24:05,279
um sd format as their description format

00:24:04,240 --> 00:24:08,480
besides gazebo

00:24:05,279 --> 00:24:10,960
besides ignition gazebo um and so

00:24:08,480 --> 00:24:12,080
it it goes to show that it is really a

00:24:10,960 --> 00:24:14,720
general purpose

00:24:12,080 --> 00:24:16,840
uh description format not meant just for

00:24:14,720 --> 00:24:19,200
this

00:24:16,840 --> 00:24:19,840
simulator i i should also mention that

00:24:19,200 --> 00:24:23,039
like there are

00:24:19,840 --> 00:24:25,840
um other formats of course uh

00:24:23,039 --> 00:24:27,840
in many formats some of them focus on

00:24:25,840 --> 00:24:29,520
just for example one robot and described

00:24:27,840 --> 00:24:31,120
very well one robot but they don't

00:24:29,520 --> 00:24:33,600
describe the entire environment

00:24:31,120 --> 00:24:34,240
around it for example urdf it's another

00:24:33,600 --> 00:24:36,720
format

00:24:34,240 --> 00:24:38,240
or there are formats that describe uh

00:24:36,720 --> 00:24:40,720
that are not focused on

00:24:38,240 --> 00:24:42,799
robotics like formats that describe an

00:24:40,720 --> 00:24:45,600
entire scene but maybe they focus on

00:24:42,799 --> 00:24:46,880
visual effects and and different uh

00:24:45,600 --> 00:24:50,080
visual effects for for

00:24:46,880 --> 00:24:51,520
animations or for for movies for example

00:24:50,080 --> 00:24:54,080
that are not really the focus of

00:24:51,520 --> 00:24:56,080
simulation uh the main the key

00:24:54,080 --> 00:24:58,159
special thing about sd format is that it

00:24:56,080 --> 00:24:58,880
is focused on robotics so it provides a

00:24:58,159 --> 00:25:02,080
lot of

00:24:58,880 --> 00:25:03,200
robotics interfaces a lot of like the

00:25:02,080 --> 00:25:04,960
properties that you would

00:25:03,200 --> 00:25:06,720
need for your robot to interact with the

00:25:04,960 --> 00:25:07,600
world the the properties that you would

00:25:06,720 --> 00:25:09,679
need to

00:25:07,600 --> 00:25:10,799
make a visual scene for your robots the

00:25:09,679 --> 00:25:12,799
sensors

00:25:10,799 --> 00:25:14,960
uh that you you're gonna put on your

00:25:12,799 --> 00:25:17,440
rubber like lidars cameras

00:25:14,960 --> 00:25:18,400
gps all of these things can be described

00:25:17,440 --> 00:25:22,400
in detail

00:25:18,400 --> 00:25:22,400
through uh sd format

00:25:22,559 --> 00:25:26,840
okay so we came to the sd format let's

00:25:24,320 --> 00:25:31,279
keep going this way and go to ignition

00:25:26,840 --> 00:25:31,279
messages which is

00:25:32,000 --> 00:25:35,360
a package that provides a lot of message

00:25:33,919 --> 00:25:38,559
descriptions uh

00:25:35,360 --> 00:25:39,919
for us and it is also one of our lowest

00:25:38,559 --> 00:25:41,600
level packages and a lot of things

00:25:39,919 --> 00:25:43,679
depend on it it has more

00:25:41,600 --> 00:25:44,960
more packages above it than below it so

00:25:43,679 --> 00:25:46,799
that's it

00:25:44,960 --> 00:25:48,720
so ignition messages really just

00:25:46,799 --> 00:25:51,360
provides um a lot of

00:25:48,720 --> 00:25:53,120
protobuf message descriptions it has

00:25:51,360 --> 00:25:55,919
some

00:25:53,120 --> 00:25:58,320
some like a c plus plus factory for you

00:25:55,919 --> 00:26:00,480
to create messages

00:25:58,320 --> 00:26:02,400
but it doesn't do much more than that

00:26:00,480 --> 00:26:04,320
the real value of ignition messages is

00:26:02,400 --> 00:26:07,279
providing these

00:26:04,320 --> 00:26:08,400
message descriptions in protobuf we

00:26:07,279 --> 00:26:10,320
don't

00:26:08,400 --> 00:26:11,919
install just the proto files for the

00:26:10,320 --> 00:26:13,600
messages but we also

00:26:11,919 --> 00:26:15,440
uh when you install ignition messages

00:26:13,600 --> 00:26:18,159
you install the generated c

00:26:15,440 --> 00:26:18,480
plus plus code for all of those messages

00:26:18,159 --> 00:26:21,200
so

00:26:18,480 --> 00:26:22,240
it's ready for you to use uh and link

00:26:21,200 --> 00:26:26,080
against and

00:26:22,240 --> 00:26:28,799
include those uh files directly on your

00:26:26,080 --> 00:26:30,559
on your downstream uh libraries or

00:26:28,799 --> 00:26:33,679
applications

00:26:30,559 --> 00:26:34,880
um so not much to say about ignition

00:26:33,679 --> 00:26:37,200
messages just that

00:26:34,880 --> 00:26:38,159
it provides you know these message

00:26:37,200 --> 00:26:41,440
descriptions

00:26:38,159 --> 00:26:44,880
um that are useful especially when doing

00:26:41,440 --> 00:26:46,240
uh inter-process communication uh

00:26:44,880 --> 00:26:50,159
between different parts of the

00:26:46,240 --> 00:26:51,520
simulation and external programs

00:26:50,159 --> 00:26:53,360
and all of the messages that are

00:26:51,520 --> 00:26:54,640
described there of course are very

00:26:53,360 --> 00:26:57,840
relevant to

00:26:54,640 --> 00:26:59,919
robot so you have like poses and sensor

00:26:57,840 --> 00:27:01,919
descriptions and the descriptions of

00:26:59,919 --> 00:27:05,679
what's changing in the scene

00:27:01,919 --> 00:27:08,720
and you know descriptions of um

00:27:05,679 --> 00:27:12,000
of a lot of other uh different

00:27:08,720 --> 00:27:13,919
robotics things so let's see um

00:27:12,000 --> 00:27:15,679
what really uses how do you use these

00:27:13,919 --> 00:27:16,559
messages and that's where ignition

00:27:15,679 --> 00:27:19,600
transport

00:27:16,559 --> 00:27:20,000
comes in uh let's see let's go to

00:27:19,600 --> 00:27:22,399
ignition

00:27:20,000 --> 00:27:23,919
transport so ignition transport builds

00:27:22,399 --> 00:27:27,360
on top of zero and q

00:27:23,919 --> 00:27:29,840
uh which is a transport library uh but

00:27:27,360 --> 00:27:32,159
but it implements a publisher subscriber

00:27:29,840 --> 00:27:34,080
uh interface on top of that and it also

00:27:32,159 --> 00:27:36,000
has a request and response

00:27:34,080 --> 00:27:37,440
kind of communication on top of that so

00:27:36,000 --> 00:27:39,440
publisher subscriber is

00:27:37,440 --> 00:27:41,440
from one to many there is one publishing

00:27:39,440 --> 00:27:42,720
and multiple subscribers can be

00:27:41,440 --> 00:27:45,360
listening to that right

00:27:42,720 --> 00:27:47,279
while request response you have uh

00:27:45,360 --> 00:27:48,399
someone asking someone responding and

00:27:47,279 --> 00:27:50,320
then the one who s

00:27:48,399 --> 00:27:52,320
waits for this response to come back so

00:27:50,320 --> 00:27:55,120
it's a two-way communication between

00:27:52,320 --> 00:27:56,320
two nodes uh well of course many

00:27:55,120 --> 00:27:59,279
multiple nodes can can

00:27:56,320 --> 00:28:01,520
request a response from the same node on

00:27:59,279 --> 00:28:04,320
top of zero mq we provide discovery

00:28:01,520 --> 00:28:04,720
we also provide logging so you can log

00:28:04,320 --> 00:28:06,399
uh

00:28:04,720 --> 00:28:08,480
all of the messages that are flying

00:28:06,399 --> 00:28:09,840
around in your simulation and this is

00:28:08,480 --> 00:28:12,799
actually how we playback

00:28:09,840 --> 00:28:13,520
uh a simulation in the ignition gazebo

00:28:12,799 --> 00:28:15,440
so

00:28:13,520 --> 00:28:17,600
what i'm doing here like to you know

00:28:15,440 --> 00:28:19,120
simulate there are things moving

00:28:17,600 --> 00:28:21,360
um everything that is happening in the

00:28:19,120 --> 00:28:23,679
simulation can be logged using ignitions

00:28:21,360 --> 00:28:24,559
transports logging system and then when

00:28:23,679 --> 00:28:25,919
you play

00:28:24,559 --> 00:28:27,600
that back you can play back the

00:28:25,919 --> 00:28:29,760
simulation as if uh

00:28:27,600 --> 00:28:32,000
it was happening now and you can scroll

00:28:29,760 --> 00:28:34,159
back and forth

00:28:32,000 --> 00:28:35,200
you can filter messages and so on it's

00:28:34,159 --> 00:28:38,320
it's very

00:28:35,200 --> 00:28:40,399
useful um so i should mention that like

00:28:38,320 --> 00:28:41,760
we use ignition transport for inter

00:28:40,399 --> 00:28:43,679
process communication

00:28:41,760 --> 00:28:45,120
so for example right now i'm running the

00:28:43,679 --> 00:28:46,640
simulation it's running two separate

00:28:45,120 --> 00:28:47,440
processes there's a server and there's a

00:28:46,640 --> 00:28:48,880
client

00:28:47,440 --> 00:28:50,720
and they talk to each other using

00:28:48,880 --> 00:28:52,080
ignition transport so it goes across

00:28:50,720 --> 00:28:55,039
this process boundary

00:28:52,080 --> 00:28:56,720
uh but it also provides intra-process

00:28:55,039 --> 00:28:58,159
communication that is very fast it

00:28:56,720 --> 00:29:01,760
doesn't serialize

00:28:58,159 --> 00:29:02,720
um so it's smart like this to know that

00:29:01,760 --> 00:29:05,919
it's that it's using

00:29:02,720 --> 00:29:06,480
uh intra process communication so this

00:29:05,919 --> 00:29:09,679
library

00:29:06,480 --> 00:29:11,919
can be useful very useful outside of

00:29:09,679 --> 00:29:14,799
simulation it can be useful for other

00:29:11,919 --> 00:29:17,120
further things as well

00:29:14,799 --> 00:29:19,200
so do check it out if you're looking for

00:29:17,120 --> 00:29:20,080
a transport library that uses publisher

00:29:19,200 --> 00:29:22,399
and subscriber

00:29:20,080 --> 00:29:24,080
it it can publish custom messages as

00:29:22,399 --> 00:29:26,399
well you're not limited to just the

00:29:24,080 --> 00:29:28,559
message descriptions that we put on

00:29:26,399 --> 00:29:31,440
ignition messages you can publish your

00:29:28,559 --> 00:29:32,960
own custom protobuf messages as well

00:29:31,440 --> 00:29:34,640
so do check it out if you're looking for

00:29:32,960 --> 00:29:38,640
a transport

00:29:34,640 --> 00:29:42,240
library okay so we came to transport

00:29:38,640 --> 00:29:43,679
let's go here to ignition fuel tools

00:29:42,240 --> 00:29:45,279
and by the emoji that i chose to

00:29:43,679 --> 00:29:46,799
represent it you probably think that

00:29:45,279 --> 00:29:49,679
it's a library to

00:29:46,799 --> 00:29:51,600
uh save things to floppy disk well it's

00:29:49,679 --> 00:29:52,640
not quite a floppy disk it's more like a

00:29:51,600 --> 00:29:55,120
server in the cloud

00:29:52,640 --> 00:29:56,799
but you know this is funnier so let's

00:29:55,120 --> 00:30:00,480
take a look at what field tools is

00:29:56,799 --> 00:30:02,720
um actually let me show you

00:30:00,480 --> 00:30:04,480
fuel uh first so you can understand

00:30:02,720 --> 00:30:06,880
field tools so this is ignition fuel

00:30:04,480 --> 00:30:10,000
it's a website i'm on a browser here

00:30:06,880 --> 00:30:12,320
and it provides models and worlds

00:30:10,000 --> 00:30:14,799
for simulation everything here is

00:30:12,320 --> 00:30:17,440
described in the sd format format that i

00:30:14,799 --> 00:30:17,840
that i showed you before so you can see

00:30:17,440 --> 00:30:20,640
here

00:30:17,840 --> 00:30:22,240
um for example the latest models that

00:30:20,640 --> 00:30:24,399
anyone in the world can just create an

00:30:22,240 --> 00:30:26,960
account and upload them

00:30:24,399 --> 00:30:28,240
and make them available to to other

00:30:26,960 --> 00:30:30,399
people so you can see that there are

00:30:28,240 --> 00:30:33,440
robots they're

00:30:30,399 --> 00:30:36,159
like just static things to be

00:30:33,440 --> 00:30:37,760
to work as a scenario for for your

00:30:36,159 --> 00:30:40,080
worlds

00:30:37,760 --> 00:30:40,799
uh inside simulation so everything here

00:30:40,080 --> 00:30:43,279
is free

00:30:40,799 --> 00:30:44,240
and it's ready to be used in simulation

00:30:43,279 --> 00:30:47,360
so

00:30:44,240 --> 00:30:49,200
uh i should show as well like here there

00:30:47,360 --> 00:30:50,720
is a world so the worlds that i'm

00:30:49,200 --> 00:30:52,720
showing you here during this

00:30:50,720 --> 00:30:54,960
presentation um

00:30:52,720 --> 00:30:56,240
you can just download it from ignition

00:30:54,960 --> 00:30:57,919
fuel and just run it like you do

00:30:56,240 --> 00:31:01,120
ignition gazebo and you pass

00:30:57,919 --> 00:31:05,039
the url and gazebo is going to

00:31:01,120 --> 00:31:06,799
go go on and load that for you so

00:31:05,039 --> 00:31:08,799
this is ignition fuel so what is

00:31:06,799 --> 00:31:11,120
ignition fuel tools

00:31:08,799 --> 00:31:11,919
ignition fuel tools provides a c plus

00:31:11,120 --> 00:31:13,840
plus api

00:31:11,919 --> 00:31:15,760
and a cli that interacts with that

00:31:13,840 --> 00:31:18,880
website in that server

00:31:15,760 --> 00:31:19,279
right so fuel is the online database

00:31:18,880 --> 00:31:22,240
fuel

00:31:19,279 --> 00:31:24,559
tools provides the plus plus api and cli

00:31:22,240 --> 00:31:25,120
so for example when i loaded this world

00:31:24,559 --> 00:31:28,399
here

00:31:25,120 --> 00:31:31,519
um i u the ignition gazebo internally

00:31:28,399 --> 00:31:32,559
used fuels uh c plus plus api to fetch

00:31:31,519 --> 00:31:35,120
those models

00:31:32,559 --> 00:31:36,880
store them in a cache inside my computer

00:31:35,120 --> 00:31:39,760
and load them

00:31:36,880 --> 00:31:40,480
but i can also use the cli to do ign

00:31:39,760 --> 00:31:43,600
fuel

00:31:40,480 --> 00:31:46,880
download and download models or upload

00:31:43,600 --> 00:31:47,760
them even passing a private token and so

00:31:46,880 --> 00:31:50,240
on

00:31:47,760 --> 00:31:50,799
so anything to interact with fuel is

00:31:50,240 --> 00:31:54,159
here

00:31:50,799 --> 00:31:56,320
and um this is not

00:31:54,159 --> 00:31:57,200
exclusive to ignition gazebo any other

00:31:56,320 --> 00:32:00,159
simulator

00:31:57,200 --> 00:32:00,720
any other application that is using sdf

00:32:00,159 --> 00:32:03,679
uh

00:32:00,720 --> 00:32:04,480
files and could would want to load them

00:32:03,679 --> 00:32:06,960
from the

00:32:04,480 --> 00:32:07,679
fuel online database could use this

00:32:06,960 --> 00:32:09,679
library

00:32:07,679 --> 00:32:12,000
to interface with it and they don't need

00:32:09,679 --> 00:32:12,559
to bring like all of the ignition gazebo

00:32:12,000 --> 00:32:14,480
with them

00:32:12,559 --> 00:32:16,720
they can just use this library if they

00:32:14,480 --> 00:32:16,720
want

00:32:16,880 --> 00:32:21,120
let's see so this was fuel tools i came

00:32:19,279 --> 00:32:24,000
from that side so now i'm going to

00:32:21,120 --> 00:32:26,159
physics that's like really the core of

00:32:24,000 --> 00:32:28,080
simulation this is what people think of

00:32:26,159 --> 00:32:29,840
uh when they think of simulation right

00:32:28,080 --> 00:32:32,880
like physics

00:32:29,840 --> 00:32:34,640
so let's see what ignition physics is

00:32:32,880 --> 00:32:36,159
um remember that i told you that

00:32:34,640 --> 00:32:37,360
everything in gazebo is configurable

00:32:36,159 --> 00:32:39,919
everything is a plug-in

00:32:37,360 --> 00:32:42,080
well ignition physics is not a physics

00:32:39,919 --> 00:32:45,440
engine it is an abstraction layer

00:32:42,080 --> 00:32:46,880
to physics engines so it provides a

00:32:45,440 --> 00:32:49,760
plug-in interface where

00:32:46,880 --> 00:32:51,120
um different physics engines can just

00:32:49,760 --> 00:32:53,279
implement their

00:32:51,120 --> 00:32:55,279
interface to ignition physics and then

00:32:53,279 --> 00:32:57,679
ignition gazebo on top of that

00:32:55,279 --> 00:32:58,799
can use ignition physics and not know

00:32:57,679 --> 00:33:02,320
anything specific

00:32:58,799 --> 00:33:04,000
about the other uh physics engines

00:33:02,320 --> 00:33:05,519
so for example here we have a plugin for

00:33:04,000 --> 00:33:07,919
dart what i'm running

00:33:05,519 --> 00:33:09,360
right now in this presentation is dart

00:33:07,919 --> 00:33:12,080
so you can see for example

00:33:09,360 --> 00:33:14,240
this vehicle in the back i'm operating

00:33:12,080 --> 00:33:17,440
it with my keyboard

00:33:14,240 --> 00:33:20,399
it's a mechanim wheel vehicle

00:33:17,440 --> 00:33:22,080
mechanic drive so this is all being

00:33:20,399 --> 00:33:25,840
computed using dart

00:33:22,080 --> 00:33:28,240
but from ignition gazebo i i didn't

00:33:25,840 --> 00:33:29,440
need to write any dart specific code for

00:33:28,240 --> 00:33:31,679
that i just wrote

00:33:29,440 --> 00:33:33,760
ignition gazebo and at runtime i can

00:33:31,679 --> 00:33:35,600
close the simulation and reopen it with

00:33:33,760 --> 00:33:37,919
one of the other physics engines so

00:33:35,600 --> 00:33:38,880
tpe for example is the trivial physics

00:33:37,919 --> 00:33:41,279
engine it's a

00:33:38,880 --> 00:33:42,399
engine that we created in-house that

00:33:41,279 --> 00:33:46,080
does very

00:33:42,399 --> 00:33:47,279
fast lightweight uh simulations that

00:33:46,080 --> 00:33:50,720
don't do dynamics

00:33:47,279 --> 00:33:52,320
for example so the the wheels here if i

00:33:50,720 --> 00:33:54,559
simulated with db they wouldn't have

00:33:52,320 --> 00:33:56,000
joined the the vehicle would just like

00:33:54,559 --> 00:33:58,159
kind of like float around

00:33:56,000 --> 00:33:59,919
and this is uh very useful when you have

00:33:58,159 --> 00:34:01,679
like hundreds of robots

00:33:59,919 --> 00:34:03,519
in a simulation and you don't really

00:34:01,679 --> 00:34:04,799
care about like the joints and the angle

00:34:03,519 --> 00:34:06,080
of the wheel of each one of them you

00:34:04,799 --> 00:34:08,399
just want to know where the robot

00:34:06,080 --> 00:34:11,040
is and you need that to be very fast and

00:34:08,399 --> 00:34:13,440
you need to do lots of robots at once

00:34:11,040 --> 00:34:14,480
we also have initial support for bullet

00:34:13,440 --> 00:34:16,320
we

00:34:14,480 --> 00:34:17,760
are should be completing it within the

00:34:16,320 --> 00:34:19,359
the next month and

00:34:17,760 --> 00:34:20,800
and make that available to everyone

00:34:19,359 --> 00:34:22,079
there is a pull request open if people

00:34:20,800 --> 00:34:25,359
want to look at it

00:34:22,079 --> 00:34:26,800
right now so yeah this is ignition

00:34:25,359 --> 00:34:29,040
physics to check it out

00:34:26,800 --> 00:34:30,560
and you know it's a recurring thing but

00:34:29,040 --> 00:34:33,200
i i should mention again

00:34:30,560 --> 00:34:35,200
this is not exclusive to ignition gazebo

00:34:33,200 --> 00:34:37,760
this is not exclusive to simulation

00:34:35,200 --> 00:34:39,119
like if you're working with controllers

00:34:37,760 --> 00:34:40,960
for example and

00:34:39,119 --> 00:34:43,359
or like teaching the robot to do

00:34:40,960 --> 00:34:45,040
something and you need a physics engine

00:34:43,359 --> 00:34:46,800
but you haven't decided which physics

00:34:45,040 --> 00:34:47,280
engine you want to use or you want to

00:34:46,800 --> 00:34:49,440
use

00:34:47,280 --> 00:34:51,119
one sometimes in the other one sometimes

00:34:49,440 --> 00:34:52,079
and you want the flexibility of changing

00:34:51,119 --> 00:34:53,919
physics engines

00:34:52,079 --> 00:34:56,000
ignition physics is probably your friend

00:34:53,919 --> 00:34:57,680
there it's a nice abstraction layer that

00:34:56,000 --> 00:35:00,640
should help

00:34:57,680 --> 00:35:01,440
so let's go on a little bit faster so

00:35:00,640 --> 00:35:03,680
rendering

00:35:01,440 --> 00:35:05,599
which is another abstraction layer that

00:35:03,680 --> 00:35:07,440
we have but it does the same thing that

00:35:05,599 --> 00:35:09,280
physics does but for the rendering side

00:35:07,440 --> 00:35:12,400
so you can see here that this

00:35:09,280 --> 00:35:13,200
3d window that we are looking at this is

00:35:12,400 --> 00:35:15,599
all using

00:35:13,200 --> 00:35:17,040
a rendering engine in the back end but

00:35:15,599 --> 00:35:19,119
we the same thing that we

00:35:17,040 --> 00:35:20,880
the same way that we don't commit to a

00:35:19,119 --> 00:35:23,200
physics engine we also don't commit

00:35:20,880 --> 00:35:24,079
to a rendering engine so you can choose

00:35:23,200 --> 00:35:27,119
at runtime which

00:35:24,079 --> 00:35:29,119
engine you're going to use so we have

00:35:27,119 --> 00:35:30,880
uh support for auger one and two it's

00:35:29,119 --> 00:35:33,280
pretty good support for both of them

00:35:30,880 --> 00:35:35,280
uh ogre ii is the one that i'm using now

00:35:33,280 --> 00:35:37,680
it has support for pbr materials

00:35:35,280 --> 00:35:38,720
it's it's much more modern than over one

00:35:37,680 --> 00:35:41,200
but some systems

00:35:38,720 --> 00:35:42,560
it still require over one so we also

00:35:41,200 --> 00:35:44,240
support that

00:35:42,560 --> 00:35:46,320
we have initial support for nvidia

00:35:44,240 --> 00:35:48,320
optics um

00:35:46,320 --> 00:35:49,839
and you know anyone can just like add a

00:35:48,320 --> 00:35:51,119
plugin with their own rendering engine

00:35:49,839 --> 00:35:53,520
and they don't need to tell us anything

00:35:51,119 --> 00:35:57,200
about it you can just load it at runtime

00:35:53,520 --> 00:35:59,119
so uh you know the same thing as physics

00:35:57,200 --> 00:36:01,440
it's not limited to simulation you can

00:35:59,119 --> 00:36:04,480
use it in other applications as well

00:36:01,440 --> 00:36:06,720
and i'm going to tell you soon about it

00:36:04,480 --> 00:36:08,160
a couple of applications that use that

00:36:06,720 --> 00:36:11,440
let's take a look at ignition

00:36:08,160 --> 00:36:13,440
sensors so robots as you know they

00:36:11,440 --> 00:36:14,640
move around the world and they sense the

00:36:13,440 --> 00:36:16,320
world around them so

00:36:14,640 --> 00:36:17,920
uh ignition sensors just provides a

00:36:16,320 --> 00:36:19,760
bunch of these different sensory models

00:36:17,920 --> 00:36:22,720
for you like a camera lighter

00:36:19,760 --> 00:36:24,160
imus magnetometer uh there are lots of

00:36:22,720 --> 00:36:25,200
other sensors there now i don't know

00:36:24,160 --> 00:36:27,760
like there's

00:36:25,200 --> 00:36:29,280
over 15 maybe 20 sensors right now that

00:36:27,760 --> 00:36:31,200
is provided

00:36:29,280 --> 00:36:33,119
by ignition sensors the cool thing is

00:36:31,200 --> 00:36:35,920
that we have like a way for you to add

00:36:33,119 --> 00:36:36,960
noise to to any of them in a in a very

00:36:35,920 --> 00:36:38,880
common way

00:36:36,960 --> 00:36:40,000
um and there's a common api for all of

00:36:38,880 --> 00:36:42,400
these sensors

00:36:40,000 --> 00:36:44,160
so this may be like we're starting to

00:36:42,400 --> 00:36:47,599
get into territory that is a little bit

00:36:44,160 --> 00:36:48,640
too specific to to simulation but you

00:36:47,599 --> 00:36:50,640
could have

00:36:48,640 --> 00:36:51,839
some other application that may be

00:36:50,640 --> 00:36:54,800
interested in using like

00:36:51,839 --> 00:36:55,520
cameras with noise and that is not

00:36:54,800 --> 00:36:57,599
necessarily

00:36:55,520 --> 00:37:00,560
uh simulation so you could take take a

00:36:57,599 --> 00:37:04,000
look at ignition sensors

00:37:00,560 --> 00:37:06,880
let's go to ignition gui gui which

00:37:04,000 --> 00:37:08,800
uh provides this process sorry to

00:37:06,880 --> 00:37:10,720
interrupt so you have like

00:37:08,800 --> 00:37:13,440
uh like eight more minutes and you have

00:37:10,720 --> 00:37:17,200
like yeah and a couple of questions

00:37:13,440 --> 00:37:19,200
yeah yeah yeah i'll rush

00:37:17,200 --> 00:37:21,200
i'll wrap up soon so let's see what

00:37:19,200 --> 00:37:23,119
ignition guide is

00:37:21,200 --> 00:37:24,560
ignition gui provides this graphical

00:37:23,119 --> 00:37:27,839
interface here that you have

00:37:24,560 --> 00:37:29,839
you can load like plugins at runtime uh

00:37:27,839 --> 00:37:31,440
you know that do different things inside

00:37:29,839 --> 00:37:32,960
the simulation so for example like a

00:37:31,440 --> 00:37:34,880
screenshot plugin that

00:37:32,960 --> 00:37:36,079
you can take screenshots of a running

00:37:34,880 --> 00:37:38,079
simulation

00:37:36,079 --> 00:37:39,599
um all of these items here in the

00:37:38,079 --> 00:37:40,400
simulation are plugins loaded by

00:37:39,599 --> 00:37:44,320
ignition

00:37:40,400 --> 00:37:46,000
gui and uh and it uses material design

00:37:44,320 --> 00:37:50,240
so it uses qml it

00:37:46,000 --> 00:37:52,640
provides this modern uh field for the

00:37:50,240 --> 00:37:53,280
for the application in general and this

00:37:52,640 --> 00:37:55,280
library

00:37:53,280 --> 00:37:56,800
uh combined with ignition rendering and

00:37:55,280 --> 00:37:57,599
a lot and all of the lower level

00:37:56,800 --> 00:37:59,680
libraries

00:37:57,599 --> 00:38:01,760
uh are used by other projects that are

00:37:59,680 --> 00:38:05,040
not ignition gazebos so there is like

00:38:01,760 --> 00:38:06,800
uh tesseract ignition which is a robot

00:38:05,040 --> 00:38:08,079
path planning tool that is using

00:38:06,800 --> 00:38:10,720
ignition gui

00:38:08,079 --> 00:38:12,960
uh to load the robot and see it in 3d

00:38:10,720 --> 00:38:13,359
and interact with it with buttons and

00:38:12,960 --> 00:38:15,200
stuff

00:38:13,359 --> 00:38:16,480
and it's not a simulator and you can use

00:38:15,200 --> 00:38:18,640
this the same

00:38:16,480 --> 00:38:19,839
library there's also ignition arvis

00:38:18,640 --> 00:38:22,560
which one of our

00:38:19,839 --> 00:38:24,079
interns did which visualizes live data

00:38:22,560 --> 00:38:27,119
coming from a robot

00:38:24,079 --> 00:38:28,720
uh in 3d and uses the ignition

00:38:27,119 --> 00:38:31,280
is uses the ignition rendering it's not

00:38:28,720 --> 00:38:33,119
a simulator so i think that this part of

00:38:31,280 --> 00:38:35,440
the stack can be very useful to

00:38:33,119 --> 00:38:36,480
a wide range of different applications

00:38:35,440 --> 00:38:39,119
if you're looking for

00:38:36,480 --> 00:38:40,880
for uh you know quickly getting started

00:38:39,119 --> 00:38:42,800
and loading plugins and

00:38:40,880 --> 00:38:44,720
and providing material design interface

00:38:42,800 --> 00:38:47,520
and so on

00:38:44,720 --> 00:38:48,720
finally we got to gazebo the big star

00:38:47,520 --> 00:38:50,560
that kind of like

00:38:48,720 --> 00:38:51,760
the reason for all of the other things

00:38:50,560 --> 00:38:54,880
to exist

00:38:51,760 --> 00:38:56,800
so what is gazebo you know uh it's a

00:38:54,880 --> 00:38:58,320
multi-robot simulator it can simulate

00:38:56,800 --> 00:39:00,320
multiple robots at the same time it

00:38:58,320 --> 00:39:03,839
provides an entity component system

00:39:00,320 --> 00:39:05,359
architecture which is different from

00:39:03,839 --> 00:39:07,119
gazebo classic which is the older

00:39:05,359 --> 00:39:09,040
version of gazebo that doesn't use this

00:39:07,119 --> 00:39:12,400
kind of architecture

00:39:09,040 --> 00:39:12,400
it has a server client

00:39:13,119 --> 00:39:16,880
arrangements so right now i'm using two

00:39:15,040 --> 00:39:18,640
processes as i said there's a server in

00:39:16,880 --> 00:39:19,760
the backend in the clients which is this

00:39:18,640 --> 00:39:21,520
graphical interface

00:39:19,760 --> 00:39:22,880
and they can be run independently so for

00:39:21,520 --> 00:39:24,320
example if you run a simulation on the

00:39:22,880 --> 00:39:25,680
cloud you only run the server but you

00:39:24,320 --> 00:39:28,560
don't run the client

00:39:25,680 --> 00:39:29,599
uh and as i've been mentioning with all

00:39:28,560 --> 00:39:32,400
of the libraries

00:39:29,599 --> 00:39:33,200
it's highly configurable you can plug in

00:39:32,400 --> 00:39:36,320
and plug out

00:39:33,200 --> 00:39:37,839
all of the functionality even like uh i

00:39:36,320 --> 00:39:39,839
i think that ignition gazebo can be

00:39:37,839 --> 00:39:43,599
useful just at score even for

00:39:39,839 --> 00:39:45,599
applications that are not simulation um

00:39:43,599 --> 00:39:47,280
for ex just for its entity component

00:39:45,599 --> 00:39:48,880
system like you can you can take off

00:39:47,280 --> 00:39:50,720
physics you can take out sensors

00:39:48,880 --> 00:39:52,880
and you can do something else with the

00:39:50,720 --> 00:39:56,240
entity component system that is there

00:39:52,880 --> 00:39:58,240
that's also also allowed so

00:39:56,240 --> 00:39:59,680
as i said it's very configurable so

00:39:58,240 --> 00:40:00,240
check it out if you're looking for this

00:39:59,680 --> 00:40:03,920
kind of

00:40:00,240 --> 00:40:05,440
like um you know management uh

00:40:03,920 --> 00:40:07,119
this kind of architecture for your own

00:40:05,440 --> 00:40:09,680
applications

00:40:07,119 --> 00:40:11,839
and finally let's wrap up with ignition

00:40:09,680 --> 00:40:12,400
launch which is the leaf most package

00:40:11,839 --> 00:40:15,280
here

00:40:12,400 --> 00:40:15,680
and kind of like uh can can be used

00:40:15,280 --> 00:40:18,480
above

00:40:15,680 --> 00:40:19,760
all of them and it's a it's a convenient

00:40:18,480 --> 00:40:22,800
application to run

00:40:19,760 --> 00:40:24,640
programs in and in

00:40:22,800 --> 00:40:26,400
like you you can launch different

00:40:24,640 --> 00:40:27,440
programs uh at the same time so for

00:40:26,400 --> 00:40:29,280
example you can launch

00:40:27,440 --> 00:40:31,040
ignition gazebo and a joystick

00:40:29,280 --> 00:40:32,880
controller and they can talk to each

00:40:31,040 --> 00:40:34,400
other using ignition transport but

00:40:32,880 --> 00:40:35,920
the joystick is not a plug-in to

00:40:34,400 --> 00:40:36,560
ignition gazebo it's just a separate

00:40:35,920 --> 00:40:38,000
program

00:40:36,560 --> 00:40:40,160
that is talking to you to it over

00:40:38,000 --> 00:40:43,040
transport there is a websocket

00:40:40,160 --> 00:40:43,599
interface that allows ignition gazebo to

00:40:43,040 --> 00:40:47,040
be

00:40:43,599 --> 00:40:48,720
visualized on a web browser uh and and

00:40:47,040 --> 00:40:50,560
a lot of other things like this that are

00:40:48,720 --> 00:40:51,280
useful to run with simulation but are

00:40:50,560 --> 00:40:53,520
not

00:40:51,280 --> 00:40:55,440
useful from inside the simulator itself

00:40:53,520 --> 00:40:56,640
are brought to ignition launch which is

00:40:55,440 --> 00:40:58,960
kind of like

00:40:56,640 --> 00:41:00,319
up there on the top managing uh various

00:40:58,960 --> 00:41:03,119
processes

00:41:00,319 --> 00:41:03,839
so uh this is the the all of the

00:41:03,119 --> 00:41:05,280
libraries

00:41:03,839 --> 00:41:07,359
i just wanted to mention that we have

00:41:05,280 --> 00:41:09,680
multiple versions we've released them

00:41:07,359 --> 00:41:10,640
uh in a schedule that i'm going to show

00:41:09,680 --> 00:41:13,200
you and they

00:41:10,640 --> 00:41:15,040
uh we follow like alphabetical order for

00:41:13,200 --> 00:41:16,960
the versions of blueprint citadel dom

00:41:15,040 --> 00:41:20,000
the one that i'm running here is edifice

00:41:16,960 --> 00:41:21,440
which is going to be released tomorrow

00:41:20,000 --> 00:41:23,280
and this is the release schedule so you

00:41:21,440 --> 00:41:23,920
can see that we're today like one day

00:41:23,280 --> 00:41:27,040
before

00:41:23,920 --> 00:41:29,200
the edifice release citadel is our lts

00:41:27,040 --> 00:41:30,960
with five year support dome is already

00:41:29,200 --> 00:41:33,040
halfway through its life and we have

00:41:30,960 --> 00:41:34,880
ignition fortress coming up september

00:41:33,040 --> 00:41:38,000
this year which is going to be our next

00:41:34,880 --> 00:41:39,440
lts um

00:41:38,000 --> 00:41:41,920
if you're using ross i should also

00:41:39,440 --> 00:41:43,440
mention that different ignition versions

00:41:41,920 --> 00:41:44,000
pair very well with different ros

00:41:43,440 --> 00:41:45,520
versions

00:41:44,000 --> 00:41:46,960
you can mix and match as you want but

00:41:45,520 --> 00:41:48,000
these are the ones that we recommend and

00:41:46,960 --> 00:41:50,400
they're supported from

00:41:48,000 --> 00:41:52,880
debian packages so you can use ross no

00:41:50,400 --> 00:41:55,119
hectic with citadel foxy with citadel

00:41:52,880 --> 00:41:56,880
and galactic with edifice and this one

00:41:55,119 --> 00:41:58,240
is the next ross2 release that's coming

00:41:56,880 --> 00:42:00,079
up in may and that's going to be using

00:41:58,240 --> 00:42:01,680
edifice what i'm using here right now

00:42:00,079 --> 00:42:04,800
so we kind of skipped dome because the

00:42:01,680 --> 00:42:08,000
the release hackle was just way too fast

00:42:04,800 --> 00:42:09,440
and this is it thank you everybody i had

00:42:08,000 --> 00:42:09,920
to rush a little bit in the end let's

00:42:09,440 --> 00:42:13,119
see

00:42:09,920 --> 00:42:14,640
let me answer some questions so okay

00:42:13,119 --> 00:42:16,640
what are the downstream users of

00:42:14,640 --> 00:42:18,640
ignition robotics library i've seen as

00:42:16,640 --> 00:42:21,760
they have used in the past

00:42:18,640 --> 00:42:23,520
um what consumer of this project have

00:42:21,760 --> 00:42:25,280
you noticed so yeah like i mentioned

00:42:23,520 --> 00:42:27,359
uh i've seen people using the gui

00:42:25,280 --> 00:42:31,200
interface for their own

00:42:27,359 --> 00:42:33,920
3d graphical interfaces um

00:42:31,200 --> 00:42:34,720
so yeah like in in path planning tools

00:42:33,920 --> 00:42:36,880
and and

00:42:34,720 --> 00:42:37,920
robot visualizer tools and anything that

00:42:36,880 --> 00:42:40,079
you want to do that is

00:42:37,920 --> 00:42:42,160
tied to robotics and you need a 3d view

00:42:40,079 --> 00:42:43,359
um i think it ignition gui makes it very

00:42:42,160 --> 00:42:45,599
convenient

00:42:43,359 --> 00:42:47,520
i haven't seen any uses of the ignition

00:42:45,599 --> 00:42:49,520
physics yet but i think that has a high

00:42:47,520 --> 00:42:51,680
a very good potential for the use for

00:42:49,520 --> 00:42:53,839
being used outside of ignition gazebo

00:42:51,680 --> 00:42:55,040
um and you know as i said like sd app

00:42:53,839 --> 00:42:56,880
like ignition math

00:42:55,040 --> 00:42:58,560
ignition transport i've seen projects

00:42:56,880 --> 00:42:59,839
using it there are people like bridging

00:42:58,560 --> 00:43:02,400
it to python to

00:42:59,839 --> 00:43:03,920
to use it with a python interface and so

00:43:02,400 --> 00:43:06,960
on

00:43:03,920 --> 00:43:07,680
um let's see is it using the latest

00:43:06,960 --> 00:43:09,599
bullet lit

00:43:07,680 --> 00:43:11,520
version are you going to keep updating

00:43:09,599 --> 00:43:13,280
mage based on major upgrades

00:43:11,520 --> 00:43:14,720
honestly i don't know what bullet

00:43:13,280 --> 00:43:17,280
version they are

00:43:14,720 --> 00:43:17,839
using right now i would guess that it is

00:43:17,280 --> 00:43:19,839
whatever

00:43:17,839 --> 00:43:21,200
so the way that we limit ourselves is

00:43:19,839 --> 00:43:24,400
whatever is available

00:43:21,200 --> 00:43:25,920
upstream uh from the bim packages

00:43:24,400 --> 00:43:27,599
so whatever version is there is a

00:43:25,920 --> 00:43:30,480
version that we're going to use

00:43:27,599 --> 00:43:32,240
unless uh we really need something that

00:43:30,480 --> 00:43:34,160
is not available from the vm packages

00:43:32,240 --> 00:43:35,760
for example dart

00:43:34,160 --> 00:43:37,119
we are packaging the art ourselves

00:43:35,760 --> 00:43:38,160
because it provides some functionality

00:43:37,119 --> 00:43:40,720
that we couldn't find

00:43:38,160 --> 00:43:43,200
in another already packaged uh things

00:43:40,720 --> 00:43:44,960
but bullet in bullets case i think we're

00:43:43,200 --> 00:43:47,440
we're not doing the packaging yourself

00:43:44,960 --> 00:43:51,440
so whatever is already in all of the

00:43:47,440 --> 00:43:53,359
uh upstream um package managers that's

00:43:51,440 --> 00:43:55,280
the version that we're using

00:43:53,359 --> 00:43:56,800
i've missed this is this work load

00:43:55,280 --> 00:43:57,599
running all in the clouds or on local

00:43:56,800 --> 00:43:59,280
machine

00:43:57,599 --> 00:44:00,880
oh this is all running on my local

00:43:59,280 --> 00:44:04,560
machine in a docker container

00:44:00,880 --> 00:44:06,079
um right now so i am on an ubuntu focal

00:44:04,560 --> 00:44:06,880
machine and i'm running a container on

00:44:06,079 --> 00:44:08,319
bionic

00:44:06,880 --> 00:44:11,200
just because it's the container that i

00:44:08,319 --> 00:44:13,599
had here running

00:44:11,200 --> 00:44:14,800
okay one more minute for more questions

00:44:13,599 --> 00:44:17,680
any other

00:44:14,800 --> 00:44:17,680
any other questions

00:44:20,839 --> 00:44:27,040
um if there aren't any other questions

00:44:24,079 --> 00:44:27,440
uh i'd just like to let people know like

00:44:27,040 --> 00:44:30,560
um

00:44:27,440 --> 00:44:32,720
you know the the the sim slides here

00:44:30,560 --> 00:44:34,960
is the name of the the package that i

00:44:32,720 --> 00:44:37,760
have that provides this plug-in to

00:44:34,960 --> 00:44:38,319
you have one more question sorry what do

00:44:37,760 --> 00:44:42,319
i get

00:44:38,319 --> 00:44:44,240
yeah it's okay where do i get a robot

00:44:42,319 --> 00:44:45,839
yeah well virtual robots are free you

00:44:44,240 --> 00:44:47,359
can just go and download ignition and

00:44:45,839 --> 00:44:49,680
get them from the

00:44:47,359 --> 00:44:51,200
from the ignition website here if you

00:44:49,680 --> 00:44:54,079
search for a robot

00:44:51,200 --> 00:44:54,480
there may there are many robots here um

00:44:54,079 --> 00:44:56,079
if you

00:44:54,480 --> 00:44:58,000
if people have more questions after this

00:44:56,079 --> 00:45:01,680
i'm on uh

00:44:58,000 --> 00:45:02,720
on twitter japolinabr uh just hit me up

00:45:01,680 --> 00:45:04,400
and let me know but yeah there are

00:45:02,720 --> 00:45:05,040
multiple robots here you can check them

00:45:04,400 --> 00:45:08,720
out

00:45:05,040 --> 00:45:08,720
and try them in the simulation by

00:45:12,119 --> 00:45:15,119

YouTube URL: https://www.youtube.com/watch?v=VHffp5kYLEg


