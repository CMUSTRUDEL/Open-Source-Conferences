Title: Improve Your Git Commits in Two Easy Steps - Rose Judge - VMware - Open Source 101
Publication date: 2021-04-10
Playlist: Open Source 101 2021
Description: 
	Rose Judge, Open Source Engineer at VMware delivered the talk "Improve Your Git Commits in Two Easy Steps" at the Open Source 101 conference on Tuesday, March 30, 2021.

Abstract:
Committing code and opening pull requests is a standard workflow in open source, but, have you ever stopped to consider the quality and importance of your commit messages? If you discovered a bug in your code that was a year old, would your git commit messages be useful to you? Can you easily backport new commits to older stable releases? Do your commit messages contain the right information? If you answered no or youâ€™re unsure, this talk is for you. While the act of writing git commits may seem trivial and straightforward, the majority of open-source projects and the developers who work on them tend to overlook this step in the development process. Whether you are an experienced open source contributor or are just getting started, this talk will provide actionable steps you can put into practice right now to improve your git commits (and why you should!). After attending this talk, participants will be able to more confidently organize and write git commits that have the ability to improve the health and longevity of any project they interact with.

Rose on the internets:
Twitter: https://twitter.com/rosejudge5
LinkedIn: https://www.linkedin.com/in/rose-judge-05914959/
GitHub: https://github.com/rnjudge
Captions: 
	00:00:05,359 --> 00:00:08,080
uh

00:00:05,759 --> 00:00:09,519
good afternoon uh thank you all for

00:00:08,080 --> 00:00:12,000
joining me today

00:00:09,519 --> 00:00:13,759
my name is rose judge and i'm an open

00:00:12,000 --> 00:00:15,519
source engineer at vmware

00:00:13,759 --> 00:00:16,800
uh today i'm going to talk you talk to

00:00:15,519 --> 00:00:17,920
you about how you can improve your git

00:00:16,800 --> 00:00:21,119
commits in two

00:00:17,920 --> 00:00:22,800
easy steps so a little bit about me as i

00:00:21,119 --> 00:00:23,600
mentioned i'm an open source engineer at

00:00:22,800 --> 00:00:25,439
vmware

00:00:23,600 --> 00:00:27,359
and in my role as an open source

00:00:25,439 --> 00:00:28,400
engineer i wear a couple of different

00:00:27,359 --> 00:00:30,080
hats

00:00:28,400 --> 00:00:31,840
primarily i'm an open source project

00:00:30,080 --> 00:00:34,480
maintainer for a project called

00:00:31,840 --> 00:00:35,680
turn turn is a software composition

00:00:34,480 --> 00:00:37,600
analysis tool

00:00:35,680 --> 00:00:39,520
that's written in python that will

00:00:37,600 --> 00:00:41,200
generate a software build materials for

00:00:39,520 --> 00:00:43,600
your container images

00:00:41,200 --> 00:00:45,680
and as a maintainer i'm responsible for

00:00:43,600 --> 00:00:47,600
moving the project forward with features

00:00:45,680 --> 00:00:50,160
and bug fixes and really building a

00:00:47,600 --> 00:00:51,920
community around that project

00:00:50,160 --> 00:00:53,360
and then my other role as an open source

00:00:51,920 --> 00:00:55,520
engineer is to grow

00:00:53,360 --> 00:00:56,879
open source impact within vmware and

00:00:55,520 --> 00:00:59,039
part of the way i do that

00:00:56,879 --> 00:01:01,199
is by advocating for better open source

00:00:59,039 --> 00:01:03,440
practices within the company

00:01:01,199 --> 00:01:05,840
and some of what i've observed in this

00:01:03,440 --> 00:01:08,320
aspect of my role is what inspired me to

00:01:05,840 --> 00:01:09,360
give this talk today so i'm excited to

00:01:08,320 --> 00:01:12,240
share

00:01:09,360 --> 00:01:15,119
um with you all today i'm also a dog mom

00:01:12,240 --> 00:01:16,640
and a tiny human mom

00:01:15,119 --> 00:01:18,320
okay so you may have seen this talk

00:01:16,640 --> 00:01:20,240
advertised and thought

00:01:18,320 --> 00:01:22,080
get commits what on earth is she gonna

00:01:20,240 --> 00:01:22,960
talk about for 45 minutes about get

00:01:22,080 --> 00:01:26,000
commits i mean

00:01:22,960 --> 00:01:28,159
how hard can those be um

00:01:26,000 --> 00:01:30,079
and maybe you really want to learn about

00:01:28,159 --> 00:01:32,560
how you can get started on your journey

00:01:30,079 --> 00:01:34,079
to contributing to open source or

00:01:32,560 --> 00:01:36,159
you know really getting that first pull

00:01:34,079 --> 00:01:38,799
request merged and

00:01:36,159 --> 00:01:40,000
to that i'd like to say that for any

00:01:38,799 --> 00:01:42,399
successful open source

00:01:40,000 --> 00:01:44,479
project um the quality of your git

00:01:42,399 --> 00:01:46,079
commits will be equally as important as

00:01:44,479 --> 00:01:48,240
the code that you write

00:01:46,079 --> 00:01:49,200
in fact in most projects without a

00:01:48,240 --> 00:01:51,119
quality git commit

00:01:49,200 --> 00:01:53,520
you can't get the code that you write

00:01:51,119 --> 00:01:54,320
merged so understanding how to create

00:01:53,520 --> 00:01:56,640
and write

00:01:54,320 --> 00:01:58,799
really quality get commits is going to

00:01:56,640 --> 00:02:02,399
be your first step towards getting

00:01:58,799 --> 00:02:03,920
um your changes merged to a project and

00:02:02,399 --> 00:02:05,600
um that's one of the reasons that i

00:02:03,920 --> 00:02:06,320
really wanted to give this talk um it's

00:02:05,600 --> 00:02:08,080
something

00:02:06,320 --> 00:02:09,920
that i think gets overlooked a lot the

00:02:08,080 --> 00:02:12,239
power of good commits and

00:02:09,920 --> 00:02:13,599
commit messages is something that i feel

00:02:12,239 --> 00:02:15,760
very strongly about

00:02:13,599 --> 00:02:16,959
um it's a hill that i'm willing to die

00:02:15,760 --> 00:02:18,800
on and

00:02:16,959 --> 00:02:20,160
that's what you see here in this slide

00:02:18,800 --> 00:02:23,760
is me atop the hill

00:02:20,160 --> 00:02:25,680
that i will die on um and i think

00:02:23,760 --> 00:02:26,959
it's even more than a theoretical best

00:02:25,680 --> 00:02:29,520
practice it's something

00:02:26,959 --> 00:02:31,680
i use every day and i've relied heavily

00:02:29,520 --> 00:02:35,040
on in my work in open source

00:02:31,680 --> 00:02:37,040
even before um i worked on open source

00:02:35,040 --> 00:02:39,519
when i was working on proprietary code i

00:02:37,040 --> 00:02:40,720
relied heavily on quality git commits um

00:02:39,519 --> 00:02:42,480
i've also been impr

00:02:40,720 --> 00:02:43,760
involved with projects where the commits

00:02:42,480 --> 00:02:45,599
are maybe not so good

00:02:43,760 --> 00:02:47,360
and i've witnessed how that can really

00:02:45,599 --> 00:02:50,239
be a disservice to the long-term

00:02:47,360 --> 00:02:52,959
prosperity of a project um

00:02:50,239 --> 00:02:54,160
working in open source definitely forces

00:02:52,959 --> 00:02:55,519
this mentality

00:02:54,160 --> 00:02:57,920
you're working with people from all over

00:02:55,519 --> 00:03:00,159
the globe people are coming and going

00:02:57,920 --> 00:03:01,840
um that your commits have to be good in

00:03:00,159 --> 00:03:03,040
order for anyone to understand what's

00:03:01,840 --> 00:03:05,519
going on

00:03:03,040 --> 00:03:07,920
um but sometimes we can lose sight of

00:03:05,519 --> 00:03:08,640
that when we're hyper focused on just

00:03:07,920 --> 00:03:11,360
the code

00:03:08,640 --> 00:03:11,680
um or we're working on projects that are

00:03:11,360 --> 00:03:14,159
not

00:03:11,680 --> 00:03:15,440
open source and i know this conference

00:03:14,159 --> 00:03:17,440
is geared towards the open source

00:03:15,440 --> 00:03:18,640
community but i truly believe that this

00:03:17,440 --> 00:03:21,519
talk is applicable

00:03:18,640 --> 00:03:23,519
to anyone working with git um so if you

00:03:21,519 --> 00:03:24,720
work on proprietary code and you just

00:03:23,519 --> 00:03:26,640
dabble in open source

00:03:24,720 --> 00:03:28,400
or you're an experienced developer or

00:03:26,640 --> 00:03:30,080
otherwise i've seen

00:03:28,400 --> 00:03:31,440
extraordinary programmers who write

00:03:30,080 --> 00:03:34,000
horrible commit messages

00:03:31,440 --> 00:03:35,519
so um i hope that this presentation

00:03:34,000 --> 00:03:37,519
resonates with you no matter where

00:03:35,519 --> 00:03:39,040
you're at as a developer

00:03:37,519 --> 00:03:41,040
okay before i dive into the heart of

00:03:39,040 --> 00:03:42,959
this presentation i want to make sure

00:03:41,040 --> 00:03:44,879
we're all on the same page about some

00:03:42,959 --> 00:03:45,920
common vocabulary that you might hear me

00:03:44,879 --> 00:03:47,680
use

00:03:45,920 --> 00:03:49,280
i know that there's different kinds of

00:03:47,680 --> 00:03:51,280
version control software out there

00:03:49,280 --> 00:03:53,040
some of you might use git lab or

00:03:51,280 --> 00:03:54,480
mercurial or perforce but

00:03:53,040 --> 00:03:56,720
for the purpose of this talk i'm going

00:03:54,480 --> 00:03:58,080
to assume that we're all working with

00:03:56,720 --> 00:04:00,080
github workflows

00:03:58,080 --> 00:04:01,840
i think that github is the most widely

00:04:00,080 --> 00:04:03,840
used especially for open source

00:04:01,840 --> 00:04:05,200
um and other version control software

00:04:03,840 --> 00:04:07,360
will have similar

00:04:05,200 --> 00:04:08,480
workflows that this talk can be applied

00:04:07,360 --> 00:04:09,760
to

00:04:08,480 --> 00:04:11,360
um but throughout the presentation

00:04:09,760 --> 00:04:13,120
you'll hear me use the phrasing commit

00:04:11,360 --> 00:04:14,799
and commit message and i just wanted to

00:04:13,120 --> 00:04:16,479
make a quick point to differentiate

00:04:14,799 --> 00:04:18,160
these two terms when i say commit

00:04:16,479 --> 00:04:20,320
in general i'm talking about the change

00:04:18,160 --> 00:04:23,440
set in the code so the actual

00:04:20,320 --> 00:04:26,240
diffs that you're changing in the code

00:04:23,440 --> 00:04:27,680
um and that would be that box on the

00:04:26,240 --> 00:04:29,600
right in green

00:04:27,680 --> 00:04:32,000
the commit message is the summary

00:04:29,600 --> 00:04:34,000
explaining what your commit does

00:04:32,000 --> 00:04:35,520
which is that purple box on the top and

00:04:34,000 --> 00:04:37,919
then the pull request is what

00:04:35,520 --> 00:04:39,919
encapsulates both of these concepts

00:04:37,919 --> 00:04:41,680
where you'll have one or more commits

00:04:39,919 --> 00:04:42,080
each of those one or more commits will

00:04:41,680 --> 00:04:44,720
have

00:04:42,080 --> 00:04:46,479
a corresponding commit message and when

00:04:44,720 --> 00:04:48,320
you bundle them all together you open

00:04:46,479 --> 00:04:48,639
what github calls a pull request which

00:04:48,320 --> 00:04:50,720
is

00:04:48,639 --> 00:04:52,400
your submission of these changes to the

00:04:50,720 --> 00:04:53,919
actual open source project

00:04:52,400 --> 00:04:57,280
which looks something like the image on

00:04:53,919 --> 00:04:59,040
the left with no box around it

00:04:57,280 --> 00:05:00,880
so now that we're all on the same page

00:04:59,040 --> 00:05:03,520
when i say git commit or

00:05:00,880 --> 00:05:04,160
get connect message what comes to mind

00:05:03,520 --> 00:05:06,080
for you

00:05:04,160 --> 00:05:07,520
um or what do you think of when i say

00:05:06,080 --> 00:05:10,560
that for some of us

00:05:07,520 --> 00:05:12,400
it may be this xkcd comic or something

00:05:10,560 --> 00:05:14,160
similar

00:05:12,400 --> 00:05:16,800
there's lots of jokes where your commit

00:05:14,160 --> 00:05:18,960
messages are depicted as just kind of

00:05:16,800 --> 00:05:20,479
nonchalant simple descriptions about

00:05:18,960 --> 00:05:22,479
your changes

00:05:20,479 --> 00:05:23,919
that may even deteriorate into

00:05:22,479 --> 00:05:25,919
descriptions that have nothing to do

00:05:23,919 --> 00:05:26,320
with your code and instead just reflect

00:05:25,919 --> 00:05:28,880
your

00:05:26,320 --> 00:05:30,320
general general sentiment at the moment

00:05:28,880 --> 00:05:31,360
um especially if you're working in a

00:05:30,320 --> 00:05:33,840
repository

00:05:31,360 --> 00:05:35,360
that no one else works in or a private

00:05:33,840 --> 00:05:38,880
fork that you're planning to clean up

00:05:35,360 --> 00:05:41,759
later your commit messages may um

00:05:38,880 --> 00:05:43,680
may be interesting um and well of course

00:05:41,759 --> 00:05:44,000
i've been guilty of this type of commit

00:05:43,680 --> 00:05:46,560
i

00:05:44,000 --> 00:05:48,560
i cringe just a little bit when i see

00:05:46,560 --> 00:05:50,000
comics or jokes like this because i feel

00:05:48,560 --> 00:05:51,120
like it kind of perpetuates the

00:05:50,000 --> 00:05:53,199
stereotype that

00:05:51,120 --> 00:05:54,479
commits are just trivial meaningless

00:05:53,199 --> 00:05:57,600
words or like

00:05:54,479 --> 00:05:58,639
a purposeless exercise um that just has

00:05:57,600 --> 00:06:00,479
to be done and

00:05:58,639 --> 00:06:02,400
the box has to be checked before merging

00:06:00,479 --> 00:06:04,720
changes to a repository

00:06:02,400 --> 00:06:06,160
but i think good commits are so much

00:06:04,720 --> 00:06:07,680
more than that they really have the

00:06:06,160 --> 00:06:10,160
power to transform a project

00:06:07,680 --> 00:06:12,800
and i hope you will be convinced of that

00:06:10,160 --> 00:06:15,520
by the end of this presentation so

00:06:12,800 --> 00:06:16,080
um let's let's dive in what makes a good

00:06:15,520 --> 00:06:18,319
commit

00:06:16,080 --> 00:06:20,160
if you've ever committed code or

00:06:18,319 --> 00:06:21,919
documentation or otherwise

00:06:20,160 --> 00:06:23,440
to a project you've likely been through

00:06:21,919 --> 00:06:25,039
the process of

00:06:23,440 --> 00:06:27,039
structuring your commits and writing a

00:06:25,039 --> 00:06:28,479
commit message for them

00:06:27,039 --> 00:06:30,720
and depending on the project you're

00:06:28,479 --> 00:06:32,319
working on there may be requirements for

00:06:30,720 --> 00:06:33,919
what your commit message should look

00:06:32,319 --> 00:06:34,800
like in terms of length or structure but

00:06:33,919 --> 00:06:36,800
when it comes

00:06:34,800 --> 00:06:38,560
really to how we break up our commits

00:06:36,800 --> 00:06:41,280
and what we write about them

00:06:38,560 --> 00:06:43,440
what is the best practice i know before

00:06:41,280 --> 00:06:45,680
i started working in open source

00:06:43,440 --> 00:06:47,520
full time my commits were always kind of

00:06:45,680 --> 00:06:49,680
an afterthought

00:06:47,520 --> 00:06:51,520
they sometimes looked like that comic on

00:06:49,680 --> 00:06:53,520
the previous slide and you may have had

00:06:51,520 --> 00:06:55,280
this experience before too where

00:06:53,520 --> 00:06:56,800
you've worked so hard just to get the

00:06:55,280 --> 00:06:58,880
code to work

00:06:56,800 --> 00:07:00,319
that committing the code is just a

00:06:58,880 --> 00:07:01,360
complete afterthought and it's just

00:07:00,319 --> 00:07:02,960
you know you're like okay i just want to

00:07:01,360 --> 00:07:04,080
get it done and get this thing submitted

00:07:02,960 --> 00:07:05,520
and off my plate

00:07:04,080 --> 00:07:07,120
um and maybe it doesn't always get the

00:07:05,520 --> 00:07:09,280
attention it deserves so

00:07:07,120 --> 00:07:10,560
in order to change that experience the

00:07:09,280 --> 00:07:12,080
next time you go to structure your

00:07:10,560 --> 00:07:12,400
commits and write commit messages for

00:07:12,080 --> 00:07:14,080
them

00:07:12,400 --> 00:07:15,840
i would like to offer these two simple

00:07:14,080 --> 00:07:16,319
criteria that you can keep in your back

00:07:15,840 --> 00:07:18,240
pocket

00:07:16,319 --> 00:07:20,479
to make sure that your commits are

00:07:18,240 --> 00:07:21,840
excellent and the first is that each

00:07:20,479 --> 00:07:23,919
commit does only one thing

00:07:21,840 --> 00:07:24,880
the second is that each commit message

00:07:23,919 --> 00:07:28,000
should be its own

00:07:24,880 --> 00:07:30,000
self-contained story so what exactly do

00:07:28,000 --> 00:07:31,199
i mean when i say each commit must only

00:07:30,000 --> 00:07:34,560
do one thing

00:07:31,199 --> 00:07:36,560
um often times code is very complicated

00:07:34,560 --> 00:07:38,240
you're changing lots of functions lots

00:07:36,560 --> 00:07:39,680
of files they all kind of rely on each

00:07:38,240 --> 00:07:42,319
other you're working towards some

00:07:39,680 --> 00:07:43,680
common goal so naturally it feels like

00:07:42,319 --> 00:07:45,039
all of those changes should be grouped

00:07:43,680 --> 00:07:47,440
into one

00:07:45,039 --> 00:07:48,720
but then here i am telling you that it

00:07:47,440 --> 00:07:50,319
should only do one thing so

00:07:48,720 --> 00:07:52,479
where do we start when we want to

00:07:50,319 --> 00:07:55,680
separate our commits so that they're

00:07:52,479 --> 00:07:57,520
each their own standalone story

00:07:55,680 --> 00:07:59,039
at a high level i want you to think of

00:07:57,520 --> 00:08:00,800
your commit like a recipe

00:07:59,039 --> 00:08:02,560
so if i were to show you this picture of

00:08:00,800 --> 00:08:03,440
a carrot cake and say here are all the

00:08:02,560 --> 00:08:05,039
ingredients

00:08:03,440 --> 00:08:06,800
on the left i want you to go make this

00:08:05,039 --> 00:08:07,520
cake and i want it to look like on the

00:08:06,800 --> 00:08:09,280
right

00:08:07,520 --> 00:08:11,120
would you know where to start and for

00:08:09,280 --> 00:08:13,039
most of us the answer is probably no

00:08:11,120 --> 00:08:14,960
without some sort of recipe that gives

00:08:13,039 --> 00:08:17,680
us directions about how to do it

00:08:14,960 --> 00:08:20,400
so think of your pull request which is

00:08:17,680 --> 00:08:22,080
that sum of all your commits as the cake

00:08:20,400 --> 00:08:24,240
you would not expect someone to look at

00:08:22,080 --> 00:08:25,840
your pr and know what you did without a

00:08:24,240 --> 00:08:27,840
recipe

00:08:25,840 --> 00:08:30,240
and that recipe will explain each step

00:08:27,840 --> 00:08:33,680
of how you got to that final cake

00:08:30,240 --> 00:08:36,479
and in this analogy um think of

00:08:33,680 --> 00:08:37,360
each of your commits as like one step of

00:08:36,479 --> 00:08:39,680
that recipe

00:08:37,360 --> 00:08:41,440
so crack the eggs would be one commit

00:08:39,680 --> 00:08:43,519
add the sugar would be one commit mix

00:08:41,440 --> 00:08:44,640
the wet ingredients another commit

00:08:43,519 --> 00:08:46,880
i don't know if you've ever tried to

00:08:44,640 --> 00:08:48,080
follow a recipe where all the directions

00:08:46,880 --> 00:08:50,720
are crammed into like

00:08:48,080 --> 00:08:52,160
two paragraph long steps um but if you

00:08:50,720 --> 00:08:54,480
have you know how hard

00:08:52,160 --> 00:08:56,160
that can be to follow along and the same

00:08:54,480 --> 00:08:56,720
goes for your commits if you submit a

00:08:56,160 --> 00:08:59,279
change

00:08:56,720 --> 00:09:00,480
with just one big commit of changes and

00:08:59,279 --> 00:09:03,120
it's you know

00:09:00,480 --> 00:09:03,680
5000 lines of code or even 30 lines of

00:09:03,120 --> 00:09:05,360
code

00:09:03,680 --> 00:09:07,680
it can be really hard for the reviewer

00:09:05,360 --> 00:09:11,279
to understand what's actually going on

00:09:07,680 --> 00:09:12,959
in that change or to give you one more

00:09:11,279 --> 00:09:15,040
cake analogy maybe you want to make this

00:09:12,959 --> 00:09:16,240
cake but you're allergic to walnuts so

00:09:15,040 --> 00:09:18,240
you want to remake it

00:09:16,240 --> 00:09:19,680
without the walnuts the recipe is going

00:09:18,240 --> 00:09:20,399
to give you the blueprint of how to do

00:09:19,680 --> 00:09:22,399
that

00:09:20,399 --> 00:09:24,080
having each step separated and each

00:09:22,399 --> 00:09:25,920
ingredient separated out

00:09:24,080 --> 00:09:27,760
you could look through that recipe and

00:09:25,920 --> 00:09:28,640
trace back to find the step that adds

00:09:27,760 --> 00:09:30,320
the walnuts

00:09:28,640 --> 00:09:32,399
and then leave it out when you make the

00:09:30,320 --> 00:09:34,160
cake the second time around

00:09:32,399 --> 00:09:35,760
and the same is true for your commits if

00:09:34,160 --> 00:09:36,720
you encounter an issue with a set of

00:09:35,760 --> 00:09:38,480
changes

00:09:36,720 --> 00:09:40,480
your commits are a list of steps that

00:09:38,480 --> 00:09:42,399
you can take to trace back to see

00:09:40,480 --> 00:09:43,600
where the problem was introduced so

00:09:42,399 --> 00:09:46,080
think of a bug

00:09:43,600 --> 00:09:47,920
as a walnut in this case one big commit

00:09:46,080 --> 00:09:49,360
would be like one of those cake mixes

00:09:47,920 --> 00:09:50,880
you get where all the ingredients are

00:09:49,360 --> 00:09:52,240
already mixed together

00:09:50,880 --> 00:09:54,640
and if that's what your commit looks

00:09:52,240 --> 00:09:57,680
like you'd have to sift through

00:09:54,640 --> 00:09:59,279
that cake mix to get the walnuts out and

00:09:57,680 --> 00:10:01,279
pull them out yourself

00:09:59,279 --> 00:10:03,680
same thing if you're trying to trace

00:10:01,279 --> 00:10:05,200
back through one giant commit to find an

00:10:03,680 --> 00:10:07,200
error right you're going to have to

00:10:05,200 --> 00:10:10,720
painfully sift through all of those

00:10:07,200 --> 00:10:12,560
big hunks of change to find that

00:10:10,720 --> 00:10:13,839
one line of code that may be causing the

00:10:12,560 --> 00:10:16,000
error

00:10:13,839 --> 00:10:17,519
and you might be thinking well you know

00:10:16,000 --> 00:10:19,279
sifting out wellness is not that hard

00:10:17,519 --> 00:10:20,560
from a cake mix like i just get a sifter

00:10:19,279 --> 00:10:22,000
and then the walnuts are big and don't

00:10:20,560 --> 00:10:24,079
go through the sister but

00:10:22,000 --> 00:10:25,920
as your project scales those walnuts are

00:10:24,079 --> 00:10:27,200
going to shrink to the size of poppy

00:10:25,920 --> 00:10:30,880
seeds which are going to be

00:10:27,200 --> 00:10:32,880
much harder to sift out so

00:10:30,880 --> 00:10:33,920
this is why it's important to keep your

00:10:32,880 --> 00:10:35,830
commit small

00:10:33,920 --> 00:10:36,959
and only doing one thing

00:10:35,830 --> 00:10:39,120
[Music]

00:10:36,959 --> 00:10:41,279
but enough about cake if we want to

00:10:39,120 --> 00:10:42,320
avoid sifting through large change sets

00:10:41,279 --> 00:10:44,480
in order to find

00:10:42,320 --> 00:10:46,000
specific code that may have been

00:10:44,480 --> 00:10:47,360
introduced as a bug

00:10:46,000 --> 00:10:49,680
how do we break up our commits to

00:10:47,360 --> 00:10:51,519
facilitate this let's assume you have

00:10:49,680 --> 00:10:53,760
all your changes ready to go and you're

00:10:51,519 --> 00:10:55,680
ready to open that pull request

00:10:53,760 --> 00:10:58,079
so when you start to break up your

00:10:55,680 --> 00:11:00,640
commits think of writing that recipe

00:10:58,079 --> 00:11:01,279
each step each commit is going to do one

00:11:00,640 --> 00:11:03,120
thing

00:11:01,279 --> 00:11:05,760
and all the steps put together are going

00:11:03,120 --> 00:11:07,120
to tell a story of how to make your cake

00:11:05,760 --> 00:11:08,800
so looking at this list i don't want you

00:11:07,120 --> 00:11:10,160
to worry too much about memorizing it

00:11:08,800 --> 00:11:12,160
these points are not

00:11:10,160 --> 00:11:14,160
like step-by-step requirements in any

00:11:12,160 --> 00:11:15,600
particular order they're all very high

00:11:14,160 --> 00:11:16,880
level and we'll get into what some

00:11:15,600 --> 00:11:19,360
examples for each of them

00:11:16,880 --> 00:11:21,519
might look like so when you go about

00:11:19,360 --> 00:11:24,079
breaking up your commits

00:11:21,519 --> 00:11:25,839
you might start by isolating your

00:11:24,079 --> 00:11:27,920
non-functional changes

00:11:25,839 --> 00:11:29,839
maybe you're updating documentation or

00:11:27,920 --> 00:11:31,279
maybe you're copying and pasting code

00:11:29,839 --> 00:11:32,800
from one file to another

00:11:31,279 --> 00:11:34,800
those would both qualify as

00:11:32,800 --> 00:11:38,240
non-functional right things where

00:11:34,800 --> 00:11:41,519
no code is actually changed um

00:11:38,240 --> 00:11:43,440
and so for example like you might remove

00:11:41,519 --> 00:11:45,760
trailing white spaces from

00:11:43,440 --> 00:11:46,720
a file or you might update the readme

00:11:45,760 --> 00:11:49,760
like each of those

00:11:46,720 --> 00:11:51,760
are non-functional changes

00:11:49,760 --> 00:11:53,519
next you could look at your functional

00:11:51,760 --> 00:11:54,800
changes maybe you're adding a new

00:11:53,519 --> 00:11:57,519
function

00:11:54,800 --> 00:11:57,920
let me move my box here there we go um

00:11:57,519 --> 00:11:59,680
that

00:11:57,920 --> 00:12:01,440
new function definition might be one

00:11:59,680 --> 00:12:03,600
command or if you're

00:12:01,440 --> 00:12:05,200
renaming a function maybe changing the

00:12:03,600 --> 00:12:06,720
name of the function throughout the code

00:12:05,200 --> 00:12:09,040
is one commit

00:12:06,720 --> 00:12:10,000
another example might be making changes

00:12:09,040 --> 00:12:11,839
to an api

00:12:10,000 --> 00:12:13,600
and let's say that you're adding a

00:12:11,839 --> 00:12:15,440
function parameter instead of

00:12:13,600 --> 00:12:17,519
adding the parameter and changing it at

00:12:15,440 --> 00:12:19,680
the same time you might separate those

00:12:17,519 --> 00:12:23,279
two commits since they're each doing

00:12:19,680 --> 00:12:25,200
one thing and then if any part of your

00:12:23,279 --> 00:12:27,040
changes are related to code cleanup

00:12:25,200 --> 00:12:30,000
each cleanup step should get its own

00:12:27,040 --> 00:12:30,399
commit um oftentimes code cleanup will

00:12:30,000 --> 00:12:33,839
occur

00:12:30,399 --> 00:12:36,000
in parallel with new functionality um

00:12:33,839 --> 00:12:36,880
but you'll still want to separate the

00:12:36,000 --> 00:12:40,240
code cleanup

00:12:36,880 --> 00:12:42,240
from the new feature

00:12:40,240 --> 00:12:44,000
so let's take a look at an example of

00:12:42,240 --> 00:12:45,519
how this might be done let's say that

00:12:44,000 --> 00:12:47,440
you were tasked with implementing a new

00:12:45,519 --> 00:12:47,920
feature and as you're building out this

00:12:47,440 --> 00:12:50,000
feature

00:12:47,920 --> 00:12:52,399
you realize that there's some duplicated

00:12:50,000 --> 00:12:54,240
code in two separate files

00:12:52,399 --> 00:12:55,920
and as part of your code cleanup you're

00:12:54,240 --> 00:12:57,279
going to replace this duplicated code

00:12:55,920 --> 00:12:58,959
with a new helper function

00:12:57,279 --> 00:13:00,399
and then within that helper function is

00:12:58,959 --> 00:13:03,600
where you're actually going to

00:13:00,399 --> 00:13:05,839
implement your new feature so while it

00:13:03,600 --> 00:13:06,959
might seem reasonable to combine all of

00:13:05,839 --> 00:13:08,880
this into one commit

00:13:06,959 --> 00:13:10,720
since all the changes are working

00:13:08,880 --> 00:13:13,760
towards that one feature

00:13:10,720 --> 00:13:14,480
combining them all into one large commit

00:13:13,760 --> 00:13:16,480
would be

00:13:14,480 --> 00:13:18,399
misleading in the change log if someone

00:13:16,480 --> 00:13:21,120
looked at your commit and just saw

00:13:18,399 --> 00:13:23,200
add new feature x they would have no

00:13:21,120 --> 00:13:25,519
idea about the helper function and code

00:13:23,200 --> 00:13:28,639
cleanup that also took place

00:13:25,519 --> 00:13:31,920
additionally if the new helper function

00:13:28,639 --> 00:13:33,279
was combined with a new feature say in

00:13:31,920 --> 00:13:35,040
the future you wanted to go and

00:13:33,279 --> 00:13:36,720
deprecate the new feature

00:13:35,040 --> 00:13:38,240
well that would be really easy if the

00:13:36,720 --> 00:13:40,560
new feature was its own

00:13:38,240 --> 00:13:41,760
patch you could just revert that patch

00:13:40,560 --> 00:13:44,560
but if it's combined

00:13:41,760 --> 00:13:45,440
with this new helper function in this

00:13:44,560 --> 00:13:46,880
code cleanup

00:13:45,440 --> 00:13:48,480
you're going to end up reverting all of

00:13:46,880 --> 00:13:52,000
that which could have a lot of

00:13:48,480 --> 00:13:54,160
unintended consequences in the future so

00:13:52,000 --> 00:13:55,680
instead if we separate the code cleanup

00:13:54,160 --> 00:13:57,440
from the functional changes we can

00:13:55,680 --> 00:13:59,760
create two commits that each do

00:13:57,440 --> 00:14:00,800
one thing that make the code a lot

00:13:59,760 --> 00:14:03,839
easier to maintain

00:14:00,800 --> 00:14:03,839
and debug in the future

00:14:04,160 --> 00:14:07,440
and then my last note about breaking up

00:14:06,079 --> 00:14:09,040
your commits is that none of your

00:14:07,440 --> 00:14:11,760
commits should break the build

00:14:09,040 --> 00:14:12,880
which means that at each commit the code

00:14:11,760 --> 00:14:15,519
should compile so

00:14:12,880 --> 00:14:17,279
in your development what that means is

00:14:15,519 --> 00:14:19,279
if you were introducing a new function

00:14:17,279 --> 00:14:20,959
in your changes you wouldn't make a call

00:14:19,279 --> 00:14:22,560
to that function before

00:14:20,959 --> 00:14:24,800
a commit that actually defined the

00:14:22,560 --> 00:14:26,079
function um because

00:14:24,800 --> 00:14:28,000
you would get an area that says like i

00:14:26,079 --> 00:14:29,680
don't know what this function is so

00:14:28,000 --> 00:14:32,639
keep your commits ordered in a way that

00:14:29,680 --> 00:14:32,639
they don't break the build

00:14:32,800 --> 00:14:36,480
and then now seems like a good time to

00:14:34,639 --> 00:14:38,399
also differentiate between development

00:14:36,480 --> 00:14:39,199
and the actual act of committing your

00:14:38,399 --> 00:14:41,279
code

00:14:39,199 --> 00:14:43,600
when you're developing it's perfectly

00:14:41,279 --> 00:14:46,399
okay to write all of your changes as

00:14:43,600 --> 00:14:48,079
one big change set right i think a lot

00:14:46,399 --> 00:14:48,639
of us do it this way you don't need to

00:14:48,079 --> 00:14:50,079
develop

00:14:48,639 --> 00:14:53,199
in the same way that you eventually

00:14:50,079 --> 00:14:54,959
organize your commit messages

00:14:53,199 --> 00:14:56,560
in fact when you're breaking up your

00:14:54,959 --> 00:14:58,480
commits

00:14:56,560 --> 00:15:00,160
to do only one thing git has several

00:14:58,480 --> 00:15:02,639
commands that can help you

00:15:00,160 --> 00:15:04,320
break up your changes personally i like

00:15:02,639 --> 00:15:06,320
to commit early and often when i'm

00:15:04,320 --> 00:15:09,040
developing and this helps me just

00:15:06,320 --> 00:15:11,279
organize my code better and then makes

00:15:09,040 --> 00:15:12,800
the commit process easier for me

00:15:11,279 --> 00:15:14,560
when i'm getting ready to open a pull

00:15:12,800 --> 00:15:15,760
request but if you just like to write

00:15:14,560 --> 00:15:17,760
out all your code

00:15:15,760 --> 00:15:19,199
at first and then think of how you want

00:15:17,760 --> 00:15:19,600
to organize it and break it up at the

00:15:19,199 --> 00:15:22,399
end

00:15:19,600 --> 00:15:24,000
that works too i have a co-worker he's a

00:15:22,399 --> 00:15:25,680
linux kernel maintainer

00:15:24,000 --> 00:15:27,199
and he's a big fan of like writing all

00:15:25,680 --> 00:15:29,040
of his changes and then

00:15:27,199 --> 00:15:30,880
mirroring them in the order he wants to

00:15:29,040 --> 00:15:32,480
commit on a new branch once he's ready

00:15:30,880 --> 00:15:34,959
to open a pull request so

00:15:32,480 --> 00:15:36,079
that works for him it may work for you

00:15:34,959 --> 00:15:39,040
you may have your own

00:15:36,079 --> 00:15:40,880
way of doing this um but git commit dash

00:15:39,040 --> 00:15:42,639
p can be really helpful

00:15:40,880 --> 00:15:44,480
if you do like to write all your changes

00:15:42,639 --> 00:15:46,720
and then break them up at the end

00:15:44,480 --> 00:15:49,199
um it allows you to commit just hunks of

00:15:46,720 --> 00:15:51,600
a change so if you have multiple hunks

00:15:49,199 --> 00:15:53,040
um of changes in a single file you can

00:15:51,600 --> 00:15:53,920
pick and choose which hunk you want to

00:15:53,040 --> 00:15:57,120
associate with

00:15:53,920 --> 00:15:57,920
with which commit and that can be really

00:15:57,120 --> 00:16:00,399
helpful

00:15:57,920 --> 00:16:01,680
um breaking one big change into smaller

00:16:00,399 --> 00:16:03,920
steps

00:16:01,680 --> 00:16:05,600
git rebase i is also really helpful for

00:16:03,920 --> 00:16:08,240
going back and editing your commits or

00:16:05,600 --> 00:16:11,600
editing your commit messages and

00:16:08,240 --> 00:16:15,120
um while github is really powerful

00:16:11,600 --> 00:16:16,880
in helping you structure your commits

00:16:15,120 --> 00:16:18,800
so that they're each doing one thing it

00:16:16,880 --> 00:16:19,519
also has tools like get squash which can

00:16:18,800 --> 00:16:22,000
make this

00:16:19,519 --> 00:16:23,440
task harder to do successfully get

00:16:22,000 --> 00:16:26,079
squash is a command

00:16:23,440 --> 00:16:28,000
that will muddle smaller commits into

00:16:26,079 --> 00:16:29,680
one big commit so it will like combine

00:16:28,000 --> 00:16:33,120
those recipe steps into

00:16:29,680 --> 00:16:35,360
just one big step

00:16:33,120 --> 00:16:37,360
and at times this may be completely

00:16:35,360 --> 00:16:38,000
appropriate you may even be asked to do

00:16:37,360 --> 00:16:39,920
this like

00:16:38,000 --> 00:16:41,920
say you went overboard separating your

00:16:39,920 --> 00:16:42,880
commits and the maintainers like hey can

00:16:41,920 --> 00:16:45,199
you squash these two

00:16:42,880 --> 00:16:47,279
that may be appropriate but um in

00:16:45,199 --> 00:16:47,759
general and for the scope of this talk i

00:16:47,279 --> 00:16:49,680
would

00:16:47,759 --> 00:16:51,199
advise against using git squash to

00:16:49,680 --> 00:16:54,639
create giant

00:16:51,199 --> 00:16:57,519
hunks of change remember that

00:16:54,639 --> 00:16:57,920
each pull request will be will have

00:16:57,519 --> 00:17:00,639
those

00:16:57,920 --> 00:17:03,360
separated out steps that are the recipe

00:17:00,639 --> 00:17:03,360
to your cake

00:17:03,600 --> 00:17:07,199
okay once you've separated out your

00:17:05,039 --> 00:17:07,919
commits so that each is only doing one

00:17:07,199 --> 00:17:09,600
thing

00:17:07,919 --> 00:17:11,199
using some of those criteria we just

00:17:09,600 --> 00:17:13,039
discussed the second step

00:17:11,199 --> 00:17:15,600
um to improving your git commits is

00:17:13,039 --> 00:17:18,880
writing an informative commit message

00:17:15,600 --> 00:17:22,000
and this is what i see a lot of people

00:17:18,880 --> 00:17:23,120
um struggling with um i think it's

00:17:22,000 --> 00:17:24,880
really easy to just

00:17:23,120 --> 00:17:26,400
you know write a really simple commit

00:17:24,880 --> 00:17:28,880
title but

00:17:26,400 --> 00:17:30,960
the commit message is should really be

00:17:28,880 --> 00:17:31,440
its own self-contained story and contain

00:17:30,960 --> 00:17:34,160
all the

00:17:31,440 --> 00:17:35,200
necessary information so i learned best

00:17:34,160 --> 00:17:37,120
with an example

00:17:35,200 --> 00:17:38,240
let's start with this diff i don't want

00:17:37,120 --> 00:17:39,840
you to worry about

00:17:38,240 --> 00:17:42,320
reading this patch or even trying to

00:17:39,840 --> 00:17:44,000
understand the code i know i don't

00:17:42,320 --> 00:17:46,000
but let's take a look at the commit

00:17:44,000 --> 00:17:47,919
message because any good commit

00:17:46,000 --> 00:17:49,760
message should be able to tell me what's

00:17:47,919 --> 00:17:51,679
happening without actually having to

00:17:49,760 --> 00:17:52,960
read the code so here's the commit

00:17:51,679 --> 00:17:55,760
message

00:17:52,960 --> 00:17:57,600
it says removes removes the need to

00:17:55,760 --> 00:18:00,720
clear along with the races

00:17:57,600 --> 00:18:02,960
okay i have no idea what that means so

00:18:00,720 --> 00:18:04,720
even if this commit is properly doing

00:18:02,960 --> 00:18:05,760
only one thing and it's broken up

00:18:04,720 --> 00:18:07,679
correctly

00:18:05,760 --> 00:18:09,360
um the commit message tells us nothing

00:18:07,679 --> 00:18:12,080
and it leaves the reader very confused

00:18:09,360 --> 00:18:13,440
with what's going on

00:18:12,080 --> 00:18:15,120
and then if we look at this one again

00:18:13,440 --> 00:18:16,720
don't worry about the code but let's say

00:18:15,120 --> 00:18:18,400
i have a forked version

00:18:16,720 --> 00:18:20,080
of the kernel that i'm using and i'm

00:18:18,400 --> 00:18:21,840
trying to find a potential bug fix

00:18:20,080 --> 00:18:23,280
patch by looking through the change log

00:18:21,840 --> 00:18:24,640
if i get to this commit

00:18:23,280 --> 00:18:27,039
maybe i look at the code and i think

00:18:24,640 --> 00:18:28,720
like okay this seems reasonable this

00:18:27,039 --> 00:18:29,200
might be a fix i want to pull in this

00:18:28,720 --> 00:18:30,559
patch

00:18:29,200 --> 00:18:33,200
let me look at the commit message and

00:18:30,559 --> 00:18:36,000
see if i can find any more information

00:18:33,200 --> 00:18:37,600
all it says is no instances left so now

00:18:36,000 --> 00:18:38,400
i'm sad because i'm going to have to do

00:18:37,600 --> 00:18:40,799
a bunch more

00:18:38,400 --> 00:18:45,039
manual digging and testing to try to

00:18:40,799 --> 00:18:47,360
find my a potential bug fix patch

00:18:45,039 --> 00:18:48,640
so those two examples are cases where

00:18:47,360 --> 00:18:50,400
there wasn't enough info

00:18:48,640 --> 00:18:51,679
information or context in the commit

00:18:50,400 --> 00:18:53,360
message so

00:18:51,679 --> 00:18:55,760
what should a good commit message look

00:18:53,360 --> 00:18:57,520
like and in general when you're writing

00:18:55,760 --> 00:18:59,679
your commit message i want you to keep

00:18:57,520 --> 00:19:01,760
the reviewer in mind

00:18:59,679 --> 00:19:03,520
um you should assume that the reviewer

00:19:01,760 --> 00:19:06,000
has never seen the code

00:19:03,520 --> 00:19:08,000
you're adding or removing before and i

00:19:06,000 --> 00:19:09,120
know when i say that it sounds a little

00:19:08,000 --> 00:19:10,720
crazy like

00:19:09,120 --> 00:19:12,240
if they're the maintainer of a project

00:19:10,720 --> 00:19:14,480
shouldn't they know all

00:19:12,240 --> 00:19:16,080
about the code in that project shouldn't

00:19:14,480 --> 00:19:18,400
they know what's changing or like

00:19:16,080 --> 00:19:20,080
understand it just by looking at it and

00:19:18,400 --> 00:19:22,880
in a perfect world the answer would be

00:19:20,080 --> 00:19:25,200
yes but in reality the maintainer a

00:19:22,880 --> 00:19:27,280
reviewer of your pull request is a human

00:19:25,200 --> 00:19:28,320
um they have other things going on they

00:19:27,280 --> 00:19:30,880
may be looking at

00:19:28,320 --> 00:19:33,520
you know 20 pull requests a day or even

00:19:30,880 --> 00:19:35,360
five poll requests a day is a lot

00:19:33,520 --> 00:19:37,200
you as someone opening a pull request

00:19:35,360 --> 00:19:40,320
have likely been working on the issue

00:19:37,200 --> 00:19:42,240
for at least a day in some cases maybe

00:19:40,320 --> 00:19:44,320
you're implementing a new feature

00:19:42,240 --> 00:19:46,240
you've been working on it for three

00:19:44,320 --> 00:19:47,840
weeks or three months and so you're

00:19:46,240 --> 00:19:50,160
zoned in on your changes

00:19:47,840 --> 00:19:52,240
you have tunnel vision looking at those

00:19:50,160 --> 00:19:54,400
changes you know exactly what's going on

00:19:52,240 --> 00:19:57,520
with them

00:19:54,400 --> 00:19:59,520
the reviewer doesn't have that benefit

00:19:57,520 --> 00:20:00,960
they might may not have ever looked at

00:19:59,520 --> 00:20:02,159
this part of the code if the project's

00:20:00,960 --> 00:20:04,640
big enough

00:20:02,159 --> 00:20:06,320
so your commit message should assume

00:20:04,640 --> 00:20:08,080
that they've never seen the code

00:20:06,320 --> 00:20:09,600
and if it provides enough context then

00:20:08,080 --> 00:20:11,679
the reviewer can jump right in

00:20:09,600 --> 00:20:13,520
ultimately getting your pull request

00:20:11,679 --> 00:20:15,679
merge faster

00:20:13,520 --> 00:20:17,280
and then similarly your commit message

00:20:15,679 --> 00:20:18,240
should assume the reviewer has no

00:20:17,280 --> 00:20:20,480
context about

00:20:18,240 --> 00:20:22,159
why the change is being made maybe your

00:20:20,480 --> 00:20:24,960
pr is fixing an issue

00:20:22,159 --> 00:20:26,640
that the reviewer hasn't seen or didn't

00:20:24,960 --> 00:20:28,320
even know was a bug

00:20:26,640 --> 00:20:29,840
sometimes there's multiple maintainers

00:20:28,320 --> 00:20:31,039
for a project and maybe you had a

00:20:29,840 --> 00:20:32,559
discussion with one of them

00:20:31,039 --> 00:20:34,159
about oh i'm going to open a pull

00:20:32,559 --> 00:20:35,200
request for this change but the one

00:20:34,159 --> 00:20:37,520
who's reviewing it

00:20:35,200 --> 00:20:38,320
didn't know about that conversation make

00:20:37,520 --> 00:20:40,799
sure you include

00:20:38,320 --> 00:20:42,640
context in your commit message as to why

00:20:40,799 --> 00:20:45,679
you're making these changes versus

00:20:42,640 --> 00:20:47,440
how you're making them your commit

00:20:45,679 --> 00:20:48,960
message should also be clear enough that

00:20:47,440 --> 00:20:51,120
the newcomer to the project

00:20:48,960 --> 00:20:53,120
could understand what's going on and

00:20:51,120 --> 00:20:53,840
this is really important for the

00:20:53,120 --> 00:20:57,200
sustained

00:20:53,840 --> 00:20:58,320
longevity of a project eventually the

00:20:57,200 --> 00:20:59,840
maintainers of today

00:20:58,320 --> 00:21:02,240
will become maintainers of the past

00:20:59,840 --> 00:21:04,240
they'll move on to other projects

00:21:02,240 --> 00:21:06,799
and the people who are newcomers today

00:21:04,240 --> 00:21:09,919
may become maintainers of the future so

00:21:06,799 --> 00:21:13,120
it's important that your commit be clear

00:21:09,919 --> 00:21:15,120
to both of these people and this is

00:21:13,120 --> 00:21:17,039
really important if in the future

00:21:15,120 --> 00:21:18,880
they're trying to trace a bug back to

00:21:17,039 --> 00:21:20,960
your commit um

00:21:18,880 --> 00:21:22,480
having the context in the commit message

00:21:20,960 --> 00:21:24,960
is gonna allow

00:21:22,480 --> 00:21:25,600
them to do that a lot faster if the

00:21:24,960 --> 00:21:28,640
readers

00:21:25,600 --> 00:21:30,799
know what's going on and then finally a

00:21:28,640 --> 00:21:33,679
good commit message will be concise

00:21:30,799 --> 00:21:34,080
and consistent so you might hear me say

00:21:33,679 --> 00:21:35,520
like

00:21:34,080 --> 00:21:37,280
your commit message has to contain

00:21:35,520 --> 00:21:38,960
enough information that a newcomer knows

00:21:37,280 --> 00:21:41,200
what's going on and think like

00:21:38,960 --> 00:21:42,799
well that means that i'm gonna be

00:21:41,200 --> 00:21:46,080
writing a commit message that's

00:21:42,799 --> 00:21:47,919
like a novel um so no i'm not saying

00:21:46,080 --> 00:21:50,559
that you need to write a 20

00:21:47,919 --> 00:21:53,039
page or 20 paragraph origin story about

00:21:50,559 --> 00:21:56,080
how your commit came to be

00:21:53,039 --> 00:21:58,240
providing enough context and information

00:21:56,080 --> 00:21:59,840
can be done in a concise manner and the

00:21:58,240 --> 00:22:02,240
more you practice it

00:21:59,840 --> 00:22:03,840
the better it's going to be the more

00:22:02,240 --> 00:22:06,720
consistent the more concise your commit

00:22:03,840 --> 00:22:06,720
messages are going to be

00:22:07,360 --> 00:22:10,840
okay so what type of information

00:22:08,880 --> 00:22:12,080
specifically should your commit message

00:22:10,840 --> 00:22:14,640
contain

00:22:12,080 --> 00:22:15,360
um when you write a good commit message

00:22:14,640 --> 00:22:17,120
in general

00:22:15,360 --> 00:22:19,200
a good way to test if you have enough

00:22:17,120 --> 00:22:20,880
information in there is to ask yourself

00:22:19,200 --> 00:22:22,640
like would i be able to understand

00:22:20,880 --> 00:22:24,320
what's going on in this commit

00:22:22,640 --> 00:22:26,240
a year from now when i've completely

00:22:24,320 --> 00:22:28,720
moved on to another project

00:22:26,240 --> 00:22:30,320
i think sometimes when we're writing

00:22:28,720 --> 00:22:32,159
commit messages we think well

00:22:30,320 --> 00:22:33,520
i wrote this commit like if anyone has

00:22:32,159 --> 00:22:35,200
questions they'll just come and ask me

00:22:33,520 --> 00:22:38,320
and i'll tell them what's going on but

00:22:35,200 --> 00:22:39,039
this is not um particularly practical in

00:22:38,320 --> 00:22:41,280
open source

00:22:39,039 --> 00:22:42,159
when you're working across numerous time

00:22:41,280 --> 00:22:44,799
zones

00:22:42,159 --> 00:22:46,240
or you're at a company like vmware where

00:22:44,799 --> 00:22:47,600
everyone's working remote

00:22:46,240 --> 00:22:49,280
and you can't just walk over to

00:22:47,600 --> 00:22:50,159
someone's cube and ask them to explain

00:22:49,280 --> 00:22:52,559
their code

00:22:50,159 --> 00:22:54,559
or explain the changes that they made we

00:22:52,559 --> 00:22:56,559
need to really be able to rely on the

00:22:54,559 --> 00:22:58,240
commit messages

00:22:56,559 --> 00:23:00,720
and then when you're writing your commit

00:22:58,240 --> 00:23:02,720
message um you're gonna start with

00:23:00,720 --> 00:23:04,159
that subject line and in that subject

00:23:02,720 --> 00:23:06,720
line you're gonna summarize

00:23:04,159 --> 00:23:08,159
um the change of your commit so this

00:23:06,720 --> 00:23:09,760
should be descriptive enough that

00:23:08,159 --> 00:23:10,880
someone reading it would have a general

00:23:09,760 --> 00:23:14,000
idea of what

00:23:10,880 --> 00:23:14,799
you're doing so um for example like move

00:23:14,000 --> 00:23:17,520
function a

00:23:14,799 --> 00:23:19,360
from file a to file b like something

00:23:17,520 --> 00:23:21,200
that's just clear and to the point

00:23:19,360 --> 00:23:22,799
um the body of your commit message will

00:23:21,200 --> 00:23:25,840
be your explanation of

00:23:22,799 --> 00:23:27,520
why you're making the change in that

00:23:25,840 --> 00:23:30,640
body explanation your goal

00:23:27,520 --> 00:23:31,840
is to summarize any and all relevant

00:23:30,640 --> 00:23:33,520
information

00:23:31,840 --> 00:23:35,840
and then at the end of the summary you

00:23:33,520 --> 00:23:36,400
might also include links to relevant

00:23:35,840 --> 00:23:38,559
outside

00:23:36,400 --> 00:23:40,559
references like a related discussion on

00:23:38,559 --> 00:23:42,480
a mailing list or a forum

00:23:40,559 --> 00:23:45,760
it might be a reference to a github

00:23:42,480 --> 00:23:49,120
issue or links to a ticket or bug report

00:23:45,760 --> 00:23:51,840
github actually makes referencing issues

00:23:49,120 --> 00:23:53,440
or other pull requests very easy and it

00:23:51,840 --> 00:23:56,720
looks very pretty in the web ui

00:23:53,440 --> 00:23:58,000
so use that to your advantage just to

00:23:56,720 --> 00:24:00,799
know if you are

00:23:58,000 --> 00:24:01,440
including any type of url or link it's

00:24:00,799 --> 00:24:04,159
important

00:24:01,440 --> 00:24:06,159
that enough context exists in the commit

00:24:04,159 --> 00:24:08,320
message itself that the reader doesn't

00:24:06,159 --> 00:24:09,840
have to click on the link to understand

00:24:08,320 --> 00:24:12,480
your changes

00:24:09,840 --> 00:24:14,080
um and there's a few reasons for this

00:24:12,480 --> 00:24:15,760
one is that the person reading your

00:24:14,080 --> 00:24:17,600
commit message might not have time to

00:24:15,760 --> 00:24:19,600
click through all the links and like

00:24:17,600 --> 00:24:20,880
piece together how they relate to each

00:24:19,600 --> 00:24:22,880
other and two

00:24:20,880 --> 00:24:24,640
is that um it is the internet and that

00:24:22,880 --> 00:24:27,360
link may not exist forever

00:24:24,640 --> 00:24:28,159
so your description should make sense on

00:24:27,360 --> 00:24:31,200
its own

00:24:28,159 --> 00:24:33,200
without having to click on the link

00:24:31,200 --> 00:24:35,360
if your commit is related to a bug fix

00:24:33,200 --> 00:24:37,200
be sure to include any error messages

00:24:35,360 --> 00:24:39,200
that your code might be fixing

00:24:37,200 --> 00:24:41,440
this is really helpful later down the

00:24:39,200 --> 00:24:43,360
line making your change log searchable

00:24:41,440 --> 00:24:45,039
if someone hits that same error message

00:24:43,360 --> 00:24:46,480
and tries to search in the changelog for

00:24:45,039 --> 00:24:49,120
a fix they'll be

00:24:46,480 --> 00:24:50,559
brought right to your right to your

00:24:49,120 --> 00:24:52,960
commit

00:24:50,559 --> 00:24:53,919
and then the last thing i put here is

00:24:52,960 --> 00:24:55,440
nice to have

00:24:53,919 --> 00:24:58,159
like mention how you arrived at your

00:24:55,440 --> 00:25:00,400
change i added this because

00:24:58,159 --> 00:25:02,480
if you spend a bunch of time working on

00:25:00,400 --> 00:25:04,080
a change and maybe you tried a few

00:25:02,480 --> 00:25:06,400
iterations

00:25:04,080 --> 00:25:08,159
of the implementation and your commit is

00:25:06,400 --> 00:25:10,480
the final version of it if someone goes

00:25:08,159 --> 00:25:12,080
back to look at your commit they can see

00:25:10,480 --> 00:25:13,919
why you did it that way and that you've

00:25:12,080 --> 00:25:15,760
already done the work exploring other

00:25:13,919 --> 00:25:18,559
implementation methods

00:25:15,760 --> 00:25:20,559
and they don't need to redo that work so

00:25:18,559 --> 00:25:22,320
your thoughtful commit message

00:25:20,559 --> 00:25:23,760
might save someone time down the line

00:25:22,320 --> 00:25:24,320
and that person might even be you if

00:25:23,760 --> 00:25:25,679
you're like

00:25:24,320 --> 00:25:27,360
someone's like why did you implement it

00:25:25,679 --> 00:25:28,080
this way you can go back to your commit

00:25:27,360 --> 00:25:31,679
message and say

00:25:28,080 --> 00:25:33,760
oh yeah that's why i did it that way um

00:25:31,679 --> 00:25:36,480
when it's you know six months later and

00:25:33,760 --> 00:25:36,480
nine months later

00:25:36,880 --> 00:25:40,320
and then once you've written your commit

00:25:38,559 --> 00:25:41,840
message and it contains all of the

00:25:40,320 --> 00:25:42,400
information it needs to have i have a

00:25:41,840 --> 00:25:44,559
few

00:25:42,400 --> 00:25:46,159
formatting pointers here they're all

00:25:44,559 --> 00:25:49,360
pretty straightforward

00:25:46,159 --> 00:25:52,000
and will help with the overall aesthetic

00:25:49,360 --> 00:25:53,279
prettiness factor of your commit which

00:25:52,000 --> 00:25:53,840
doesn't seem like it should be important

00:25:53,279 --> 00:25:55,440
but when

00:25:53,840 --> 00:25:57,360
a reviewer is looking through lots of

00:25:55,440 --> 00:25:59,679
changes

00:25:57,360 --> 00:26:00,559
the readability factor of your commit is

00:25:59,679 --> 00:26:03,360
important so

00:26:00,559 --> 00:26:05,200
for the title which is that section in

00:26:03,360 --> 00:26:07,600
blue

00:26:05,200 --> 00:26:08,480
you should wrap your title at 50

00:26:07,600 --> 00:26:10,159
characters

00:26:08,480 --> 00:26:12,640
and this helps your change log look

00:26:10,159 --> 00:26:14,480
clean when you do a git log dash

00:26:12,640 --> 00:26:16,159
one line it keeps the title fully

00:26:14,480 --> 00:26:18,320
visible in that log

00:26:16,159 --> 00:26:19,279
um if you're having a hard time

00:26:18,320 --> 00:26:21,520
summarizing

00:26:19,279 --> 00:26:23,600
what is happening in the change in 50

00:26:21,520 --> 00:26:26,000
characters you might be committing too

00:26:23,600 --> 00:26:28,080
many changes and maybe you revisit

00:26:26,000 --> 00:26:30,480
um and make sure that your commit really

00:26:28,080 --> 00:26:33,120
is only doing one thing

00:26:30,480 --> 00:26:33,520
um you might prefix your subject line

00:26:33,120 --> 00:26:35,679
with

00:26:33,520 --> 00:26:38,559
a one word category and this won't

00:26:35,679 --> 00:26:40,559
always be applicable or necessary

00:26:38,559 --> 00:26:41,919
but sometimes it will so maybe you

00:26:40,559 --> 00:26:45,039
prefix it with bug fix

00:26:41,919 --> 00:26:46,880
or doc or tests words that describe

00:26:45,039 --> 00:26:48,720
where the changes are taking place or

00:26:46,880 --> 00:26:50,320
what they're related to

00:26:48,720 --> 00:26:52,799
sometimes if you're trying to meet that

00:26:50,320 --> 00:26:55,679
50 character limit in the title this

00:26:52,799 --> 00:26:58,480
isn't always feasible but again it makes

00:26:55,679 --> 00:27:00,559
your change a lot more searchable

00:26:58,480 --> 00:27:02,480
capitalize the subject line just like

00:27:00,559 --> 00:27:03,919
you would if you were writing a sentence

00:27:02,480 --> 00:27:05,440
except with a sentence you would put a

00:27:03,919 --> 00:27:07,039
period at the end and for your commit

00:27:05,440 --> 00:27:09,279
titles you're going to ditch the period

00:27:07,039 --> 00:27:12,000
you don't need it it also saves you a

00:27:09,279 --> 00:27:14,400
character in that 50 character limit

00:27:12,000 --> 00:27:16,559
and then lastly for the commit subject

00:27:14,400 --> 00:27:20,000
you want to use the imperative mood

00:27:16,559 --> 00:27:21,840
so imperative is spoken or written

00:27:20,000 --> 00:27:23,120
as giving a command or instruction so

00:27:21,840 --> 00:27:26,480
you would say

00:27:23,120 --> 00:27:31,039
refactor test code instead of refactored

00:27:26,480 --> 00:27:34,080
past tense or refactoring like current

00:27:31,039 --> 00:27:36,240
remove deprecate

00:27:34,080 --> 00:27:37,279
uh a good way to check that you're using

00:27:36,240 --> 00:27:40,159
the imperative mood

00:27:37,279 --> 00:27:41,679
is adding if applied this commit will to

00:27:40,159 --> 00:27:44,320
the beginning of your commit message

00:27:41,679 --> 00:27:45,279
so if applied this commit will refactor

00:27:44,320 --> 00:27:46,960
test code

00:27:45,279 --> 00:27:48,720
and that sentence should grammatically

00:27:46,960 --> 00:27:50,399
make sense

00:27:48,720 --> 00:27:51,919
for the body of your commit message you

00:27:50,399 --> 00:27:54,480
want to make sure that there's a blank

00:27:51,919 --> 00:27:57,440
line between the title and the body

00:27:54,480 --> 00:27:58,640
you'll also want to wrap the lines at 72

00:27:57,440 --> 00:28:00,720
characters

00:27:58,640 --> 00:28:02,320
in terms of formatting you can use

00:28:00,720 --> 00:28:04,240
paragraphs you can use bullet points you

00:28:02,320 --> 00:28:06,960
can use a mix of the two but

00:28:04,240 --> 00:28:08,080
try to avoid having one super long

00:28:06,960 --> 00:28:11,039
paragraph or like

00:28:08,080 --> 00:28:12,320
50 bullet points use your best judgment

00:28:11,039 --> 00:28:15,360
here

00:28:12,320 --> 00:28:17,679
make sure it's readable and

00:28:15,360 --> 00:28:19,200
again think of the reviewers as your

00:28:17,679 --> 00:28:20,960
opening or as you're writing these

00:28:19,200 --> 00:28:22,799
commit messages we're just going for

00:28:20,960 --> 00:28:24,640
readability

00:28:22,799 --> 00:28:26,159
if you're referencing a github issue

00:28:24,640 --> 00:28:27,600
using keywords

00:28:26,159 --> 00:28:29,520
like you would see at the bottom like

00:28:27,600 --> 00:28:31,760
resolves or see also

00:28:29,520 --> 00:28:33,279
in general summarize these at the end

00:28:31,760 --> 00:28:36,080
before you're signed off

00:28:33,279 --> 00:28:37,200
before the signed offline by the signed

00:28:36,080 --> 00:28:39,520
off by line

00:28:37,200 --> 00:28:40,480
so you would have um you know the body

00:28:39,520 --> 00:28:42,799
you would have a space

00:28:40,480 --> 00:28:44,240
resolves the number a blank line and

00:28:42,799 --> 00:28:47,600
then um

00:28:44,240 --> 00:28:47,600
signed off by your name

00:28:48,559 --> 00:28:52,399
okay and then this slide is just a quick

00:28:50,159 --> 00:28:53,039
pulse pulse check with some references

00:28:52,399 --> 00:28:55,760
of other

00:28:53,039 --> 00:28:57,600
industry-wide best practices similar to

00:28:55,760 --> 00:28:59,120
what i've mentioned up until this point

00:28:57,600 --> 00:29:00,880
so if you're interested in reading more

00:28:59,120 --> 00:29:03,120
about what i've discussed

00:29:00,880 --> 00:29:05,520
or you just aren't convinced or don't

00:29:03,120 --> 00:29:09,279
believe me there's some links here

00:29:05,520 --> 00:29:11,279
that you can look check out

00:29:09,279 --> 00:29:12,960
so a good commit message really boils

00:29:11,279 --> 00:29:14,880
down to a good story

00:29:12,960 --> 00:29:16,799
it has a beginning a middle and an end

00:29:14,880 --> 00:29:17,760
it has all the relevant details clearly

00:29:16,799 --> 00:29:19,679
summarized

00:29:17,760 --> 00:29:21,120
so that no one finishes reading your

00:29:19,679 --> 00:29:23,919
change log and thinks

00:29:21,120 --> 00:29:24,960
i'm confused why they did that now of

00:29:23,919 --> 00:29:26,880
course if you've

00:29:24,960 --> 00:29:28,000
properly broken up your changes so that

00:29:26,880 --> 00:29:31,039
each really only does

00:29:28,000 --> 00:29:31,760
one thing commit a in a series may rely

00:29:31,039 --> 00:29:33,919
on commit

00:29:31,760 --> 00:29:36,720
b in some way and you might want to

00:29:33,919 --> 00:29:38,559
communicate that in your commit message

00:29:36,720 --> 00:29:40,000
what i mean by self-contained here is

00:29:38,559 --> 00:29:40,880
basically to make sure that you're

00:29:40,000 --> 00:29:42,960
explaining

00:29:40,880 --> 00:29:44,480
any assumptions related to future or

00:29:42,960 --> 00:29:46,799
past commits

00:29:44,480 --> 00:29:47,840
um so i've seen like a series of commits

00:29:46,799 --> 00:29:49,679
where where

00:29:47,840 --> 00:29:51,600
a commit says something like see next

00:29:49,679 --> 00:29:53,120
patch for more information

00:29:51,600 --> 00:29:55,200
and the trouble with that phrasing is

00:29:53,120 --> 00:29:58,320
that the next patch may not actually be

00:29:55,200 --> 00:30:00,559
what you think it is once it gets merged

00:29:58,320 --> 00:30:01,760
so instead of saying see next commit you

00:30:00,559 --> 00:30:04,000
might say something like

00:30:01,760 --> 00:30:05,919
in order to enable x future

00:30:04,000 --> 00:30:08,240
functionality we first have to add

00:30:05,919 --> 00:30:10,000
y function in this commit like something

00:30:08,240 --> 00:30:12,880
that's a little more descriptive

00:30:10,000 --> 00:30:12,880
and contextual

00:30:13,520 --> 00:30:17,679
so if you remember way back to this

00:30:15,120 --> 00:30:20,000
example of what not to do from earlier

00:30:17,679 --> 00:30:22,080
i wanted to resurface this again as a

00:30:20,000 --> 00:30:25,279
good example of why a self-contained

00:30:22,080 --> 00:30:26,640
story is so important the context behind

00:30:25,279 --> 00:30:28,320
this commit is that this was actually

00:30:26,640 --> 00:30:30,159
the end of a patch series where

00:30:28,320 --> 00:30:31,840
all the previous commits in the series

00:30:30,159 --> 00:30:33,760
removed all the instances

00:30:31,840 --> 00:30:35,919
but we would have no idea how this

00:30:33,760 --> 00:30:36,880
commit related to the previous ones just

00:30:35,919 --> 00:30:39,440
by looking

00:30:36,880 --> 00:30:41,279
at this commit message so on its own

00:30:39,440 --> 00:30:42,880
it's fairly confusing so

00:30:41,279 --> 00:30:45,200
i'm not saying that your commits can't

00:30:42,880 --> 00:30:47,279
be dependent on other commit messages

00:30:45,200 --> 00:30:49,279
they likely will if you're making

00:30:47,279 --> 00:30:50,080
complex changes but you should put any

00:30:49,279 --> 00:30:52,640
reference of

00:30:50,080 --> 00:30:55,360
previous related commits in context to

00:30:52,640 --> 00:30:55,360
make it more clear

00:30:55,760 --> 00:30:59,919
and to really um hammer this idea home i

00:30:58,240 --> 00:31:02,320
wanted to finish with a good example

00:30:59,919 --> 00:31:03,840
of a good commit message so this is a

00:31:02,320 --> 00:31:06,159
small change

00:31:03,840 --> 00:31:08,399
it's broken up to only do one thing and

00:31:06,159 --> 00:31:10,480
then if we look at the commit message

00:31:08,399 --> 00:31:11,519
it might be a little longer a little

00:31:10,480 --> 00:31:13,279
more

00:31:11,519 --> 00:31:16,240
thorough than you would expect right and

00:31:13,279 --> 00:31:18,720
you don't need to read all of this text

00:31:16,240 --> 00:31:20,240
but i like this example because it shows

00:31:18,720 --> 00:31:22,720
that your code changes

00:31:20,240 --> 00:31:23,440
don't have to be big in order to warrant

00:31:22,720 --> 00:31:25,760
a thorough

00:31:23,440 --> 00:31:26,640
commit message sometimes the smallest

00:31:25,760 --> 00:31:28,640
changes fix

00:31:26,640 --> 00:31:30,240
bugs that need to be a little more

00:31:28,640 --> 00:31:32,080
verbosely explained

00:31:30,240 --> 00:31:33,360
in the changelog and in your commit

00:31:32,080 --> 00:31:35,519
message so

00:31:33,360 --> 00:31:37,519
in this example we clearly understand

00:31:35,519 --> 00:31:39,279
what the commit is doing from the title

00:31:37,519 --> 00:31:41,279
and then if we read the commit message

00:31:39,279 --> 00:31:42,960
we see references to other commits

00:31:41,279 --> 00:31:44,640
there's an explanation of why the change

00:31:42,960 --> 00:31:47,440
was made and what

00:31:44,640 --> 00:31:48,640
bug it's fixing so there's context there

00:31:47,440 --> 00:31:51,919
it's self-contained

00:31:48,640 --> 00:31:52,960
and it's reader friendly okay so i've

00:31:51,919 --> 00:31:54,960
been talking for

00:31:52,960 --> 00:31:56,399
30-ish minutes about how to break up and

00:31:54,960 --> 00:31:59,519
write good commits

00:31:56,399 --> 00:32:01,519
some of you might be thinking like well

00:31:59,519 --> 00:32:03,440
i can see why this is important for a

00:32:01,519 --> 00:32:04,159
project like the kernel or kubernetes

00:32:03,440 --> 00:32:06,159
like some

00:32:04,159 --> 00:32:07,760
giant project with thousands of

00:32:06,159 --> 00:32:08,880
contributors but i work on an open

00:32:07,760 --> 00:32:10,320
source project with one other

00:32:08,880 --> 00:32:12,080
contributor or

00:32:10,320 --> 00:32:13,679
maybe i don't even work in open source

00:32:12,080 --> 00:32:16,320
um

00:32:13,679 --> 00:32:17,919
and i work it on proprietary code and i

00:32:16,320 --> 00:32:20,000
know everyone on the team so this

00:32:17,919 --> 00:32:21,600
doesn't apply to us and regardless of

00:32:20,000 --> 00:32:22,559
whether your project is open or closed

00:32:21,600 --> 00:32:24,399
sourced

00:32:22,559 --> 00:32:26,720
good commits will follow these two

00:32:24,399 --> 00:32:27,679
principles of each commit does one thing

00:32:26,720 --> 00:32:30,880
and each command

00:32:27,679 --> 00:32:33,279
commit message is a self-contained story

00:32:30,880 --> 00:32:35,279
um separating your commits and writing

00:32:33,279 --> 00:32:35,600
detailed commit messages it may seem

00:32:35,279 --> 00:32:37,840
like

00:32:35,600 --> 00:32:39,360
a lot of work especially if you're not

00:32:37,840 --> 00:32:39,840
used to writing commit messages like

00:32:39,360 --> 00:32:42,880
that

00:32:39,840 --> 00:32:46,080
like this um but

00:32:42,880 --> 00:32:46,399
i promise it's worth it and i'll go into

00:32:46,080 --> 00:32:49,519
why

00:32:46,399 --> 00:32:52,880
in a few slides okay so

00:32:49,519 --> 00:32:54,559
good commits enable support for

00:32:52,880 --> 00:32:57,279
a downstream stable version of the

00:32:54,559 --> 00:32:59,200
project and i think a kernel the kernel

00:32:57,279 --> 00:33:01,440
is a really good example of this

00:32:59,200 --> 00:33:02,799
let's say that you have a stable branch

00:33:01,440 --> 00:33:04,559
that only pulls in

00:33:02,799 --> 00:33:07,120
certain features from a development

00:33:04,559 --> 00:33:09,120
branch if you break up your commits so

00:33:07,120 --> 00:33:12,320
that they're each only doing one thing

00:33:09,120 --> 00:33:13,200
it makes the downstream stable version

00:33:12,320 --> 00:33:15,120
of the project

00:33:13,200 --> 00:33:16,559
possible right it makes it possible for

00:33:15,120 --> 00:33:18,880
you to only pull in

00:33:16,559 --> 00:33:20,640
certain features without having to pull

00:33:18,880 --> 00:33:23,120
in a bunch of unnecessary code that

00:33:20,640 --> 00:33:25,039
needs to be tested and maintained

00:33:23,120 --> 00:33:27,279
and this is what would happen if you

00:33:25,039 --> 00:33:28,240
submitted like giant hunks of a change

00:33:27,279 --> 00:33:29,760
you would have no choice

00:33:28,240 --> 00:33:31,760
but to pull in the whole thing even if

00:33:29,760 --> 00:33:34,640
you wanted just one little feature in

00:33:31,760 --> 00:33:36,880
that giant hunk

00:33:34,640 --> 00:33:39,120
good commits also make future debugging

00:33:36,880 --> 00:33:40,399
easier so if you encounter regression in

00:33:39,120 --> 00:33:41,919
the future and you need to figure out

00:33:40,399 --> 00:33:43,519
what caused the problem

00:33:41,919 --> 00:33:46,159
working with smaller commits that only

00:33:43,519 --> 00:33:48,240
do one thing makes it possible to find

00:33:46,159 --> 00:33:49,279
that exact point in time where something

00:33:48,240 --> 00:33:51,760
went wrong

00:33:49,279 --> 00:33:53,279
if your commits are each doing 10 things

00:33:51,760 --> 00:33:55,360
there's no way to test

00:33:53,279 --> 00:33:56,799
exactly which part of the change broke

00:33:55,360 --> 00:33:59,279
the build right you just have to pull

00:33:56,799 --> 00:34:01,760
out the whole thing

00:33:59,279 --> 00:34:03,440
and hope that it works so think back to

00:34:01,760 --> 00:34:05,039
that cake example if you want to take

00:34:03,440 --> 00:34:06,480
out walnuts from your recipe

00:34:05,039 --> 00:34:08,079
it's going to be easier to do this when

00:34:06,480 --> 00:34:08,960
the walnuts are separate from the other

00:34:08,079 --> 00:34:10,320
ingredients

00:34:08,960 --> 00:34:12,639
versus having that cake mix where

00:34:10,320 --> 00:34:14,879
they're already mixed in

00:34:12,639 --> 00:34:16,639
and then in any long running project

00:34:14,879 --> 00:34:18,480
there will come a time when code cleanup

00:34:16,639 --> 00:34:20,639
is required and good commits help

00:34:18,480 --> 00:34:22,639
facilitate this cleanup

00:34:20,639 --> 00:34:24,800
for example if you write in your commit

00:34:22,639 --> 00:34:26,000
message this change was made to support

00:34:24,800 --> 00:34:27,760
x feature

00:34:26,000 --> 00:34:30,320
and a year from now you deprecate

00:34:27,760 --> 00:34:30,960
feature x you know that you can safely

00:34:30,320 --> 00:34:34,399
remove

00:34:30,960 --> 00:34:35,280
that commit um that was there to support

00:34:34,399 --> 00:34:38,560
feature x

00:34:35,280 --> 00:34:40,480
without any regressions so in this way

00:34:38,560 --> 00:34:43,280
good commit messages help keep the code

00:34:40,480 --> 00:34:46,079
lean and maintainable

00:34:43,280 --> 00:34:48,240
good commits are also like an easy and

00:34:46,079 --> 00:34:48,960
very cheap insurance policy against your

00:34:48,240 --> 00:34:51,440
project

00:34:48,960 --> 00:34:52,800
or against attrition in your project um

00:34:51,440 --> 00:34:53,760
and this is true for closed source

00:34:52,800 --> 00:34:55,919
projects as well

00:34:53,760 --> 00:34:58,000
if any contributor to your project

00:34:55,919 --> 00:34:59,599
suddenly leaves the community

00:34:58,000 --> 00:35:01,040
or leaves the company or wins the

00:34:59,599 --> 00:35:02,720
lottery and decides they're never going

00:35:01,040 --> 00:35:03,440
to write a line of code in their life

00:35:02,720 --> 00:35:05,040
again

00:35:03,440 --> 00:35:08,480
good commits make it possible for the

00:35:05,040 --> 00:35:12,160
project to continue without them

00:35:08,480 --> 00:35:14,240
and then let's see i have um

00:35:12,160 --> 00:35:15,520
it helps facilitate working with folks

00:35:14,240 --> 00:35:17,040
in different time zones so if you've

00:35:15,520 --> 00:35:20,000
ever worked with folks from

00:35:17,040 --> 00:35:21,440
across the globe um good commits will

00:35:20,000 --> 00:35:22,400
enable the development process to

00:35:21,440 --> 00:35:25,359
continue

00:35:22,400 --> 00:35:26,400
even while some contributors sleep so i

00:35:25,359 --> 00:35:28,960
just had a baby

00:35:26,400 --> 00:35:30,400
the idea the notion of sleep is very

00:35:28,960 --> 00:35:33,280
foreign to me but

00:35:30,400 --> 00:35:35,119
um for those who do like to sleep um

00:35:33,280 --> 00:35:36,720
good commits will enable

00:35:35,119 --> 00:35:39,040
one person a different time zone to keep

00:35:36,720 --> 00:35:40,640
working even when they have

00:35:39,040 --> 00:35:42,320
questions about why the change was made

00:35:40,640 --> 00:35:45,040
they can just turn to the commit message

00:35:42,320 --> 00:35:46,960
instead of having to go ask the person

00:35:45,040 --> 00:35:49,119
who wrote it on slack

00:35:46,960 --> 00:35:50,880
and then lastly you can think of good

00:35:49,119 --> 00:35:52,880
commits commit messages

00:35:50,880 --> 00:35:54,400
for your commits like the same way you

00:35:52,880 --> 00:35:56,320
would think of good documentation for

00:35:54,400 --> 00:35:58,240
your open source project

00:35:56,320 --> 00:36:00,000
if they are detailed and organized new

00:35:58,240 --> 00:36:02,000
contributors are able to

00:36:00,000 --> 00:36:03,119
look into the project and get an idea of

00:36:02,000 --> 00:36:04,960
what's going on

00:36:03,119 --> 00:36:07,119
they can just jump right in and know

00:36:04,960 --> 00:36:08,160
what's happening without having to ask a

00:36:07,119 --> 00:36:10,839
bunch of questions

00:36:08,160 --> 00:36:13,599
um which just creates more work for

00:36:10,839 --> 00:36:15,280
everyone

00:36:13,599 --> 00:36:16,880
okay so if at any point in this

00:36:15,280 --> 00:36:19,119
presentation you

00:36:16,880 --> 00:36:20,880
thought to yourself like okay maybe i'm

00:36:19,119 --> 00:36:23,200
kind of convinced i can see why

00:36:20,880 --> 00:36:24,400
good structured detailed commit messages

00:36:23,200 --> 00:36:26,880
are useful

00:36:24,400 --> 00:36:28,720
and maybe i have room to improve like

00:36:26,880 --> 00:36:31,839
let's be honest we all do

00:36:28,720 --> 00:36:33,839
um how can you start to put these

00:36:31,839 --> 00:36:36,079
changes into practice

00:36:33,839 --> 00:36:38,160
and i really encourage you to just start

00:36:36,079 --> 00:36:40,800
today like plain and simple

00:36:38,160 --> 00:36:42,560
even if your project is a year old and

00:36:40,800 --> 00:36:43,440
you haven't ever focused on commits in

00:36:42,560 --> 00:36:45,359
the past

00:36:43,440 --> 00:36:47,040
like you can start making your commits

00:36:45,359 --> 00:36:48,800
better today

00:36:47,040 --> 00:36:50,720
breaking up your commits so they only do

00:36:48,800 --> 00:36:51,680
one thing and then writing that detailed

00:36:50,720 --> 00:36:55,119
commit message

00:36:51,680 --> 00:36:56,720
for that one thing after that

00:36:55,119 --> 00:36:58,320
put your commit requirements and

00:36:56,720 --> 00:36:59,680
expectations in your project

00:36:58,320 --> 00:37:01,760
documentation

00:36:59,680 --> 00:37:03,599
and if you're a contributor to a project

00:37:01,760 --> 00:37:04,400
that doesn't have these expectations

00:37:03,599 --> 00:37:07,680
laid out

00:37:04,400 --> 00:37:09,760
open a bug or open a pull request

00:37:07,680 --> 00:37:11,520
to encourage the project maintainers to

00:37:09,760 --> 00:37:13,440
write out their expectations

00:37:11,520 --> 00:37:14,800
in that contributing file or in the

00:37:13,440 --> 00:37:16,560
readme

00:37:14,800 --> 00:37:18,400
especially if you're a maintainer of a

00:37:16,560 --> 00:37:20,560
project whether it's an open source

00:37:18,400 --> 00:37:22,640
project or a closed source project

00:37:20,560 --> 00:37:24,000
having your commit requirements laid out

00:37:22,640 --> 00:37:25,760
save you time

00:37:24,000 --> 00:37:27,599
when you get a new contributor to your

00:37:25,760 --> 00:37:31,040
project who opens a pull request

00:37:27,599 --> 00:37:31,839
with a subpar commit message instead of

00:37:31,040 --> 00:37:34,000
having to

00:37:31,839 --> 00:37:36,000
seem biased or like giving them a

00:37:34,000 --> 00:37:37,920
long-winded explanation of what you're

00:37:36,000 --> 00:37:39,359
looking for you have something concrete

00:37:37,920 --> 00:37:40,000
you can just point to contributing and

00:37:39,359 --> 00:37:42,240
say like

00:37:40,000 --> 00:37:44,000
i need you to revise your pull request

00:37:42,240 --> 00:37:46,480
or your commit message in accordance

00:37:44,000 --> 00:37:48,800
with these standards

00:37:46,480 --> 00:37:51,040
and then when you're writing your code

00:37:48,800 --> 00:37:52,240
lead by example like no matter who you

00:37:51,040 --> 00:37:54,320
are on the project

00:37:52,240 --> 00:37:55,440
write the commit message break up your

00:37:54,320 --> 00:37:58,160
commits

00:37:55,440 --> 00:37:59,599
um in a way that you want to read a year

00:37:58,160 --> 00:38:02,400
from now

00:37:59,599 --> 00:38:03,200
if you had to debug something in your

00:38:02,400 --> 00:38:05,200
code

00:38:03,200 --> 00:38:06,880
like break up your commits in a way that

00:38:05,200 --> 00:38:08,640
would make it easy to do that and

00:38:06,880 --> 00:38:10,000
painless to do that

00:38:08,640 --> 00:38:11,599
and you wouldn't be left scratching your

00:38:10,000 --> 00:38:13,520
head or kicking yourself and wishing

00:38:11,599 --> 00:38:15,760
that you had in the future

00:38:13,520 --> 00:38:18,400
small changes that do one thing will

00:38:15,760 --> 00:38:21,839
make any future debugging a lot

00:38:18,400 --> 00:38:25,920
less painless a lot more painless

00:38:21,839 --> 00:38:27,440
less pain and then um by that same token

00:38:25,920 --> 00:38:28,960
it's important to hold others

00:38:27,440 --> 00:38:31,839
accountable for their commits

00:38:28,960 --> 00:38:33,040
and this can be really hard it

00:38:31,839 --> 00:38:36,240
definitely takes practice

00:38:33,040 --> 00:38:37,440
when you have maybe a super productive

00:38:36,240 --> 00:38:40,160
developer on your team

00:38:37,440 --> 00:38:41,680
and they write amazing code and you

00:38:40,160 --> 00:38:42,000
really appreciate the code that they

00:38:41,680 --> 00:38:43,760
write

00:38:42,000 --> 00:38:45,359
but then they write a really sloppy

00:38:43,760 --> 00:38:46,640
commit message with it sometimes the

00:38:45,359 --> 00:38:49,200
last thing you want to say

00:38:46,640 --> 00:38:51,280
is like please fix your commits i cannot

00:38:49,200 --> 00:38:55,040
merge this until your commits are better

00:38:51,280 --> 00:38:56,560
um if you're working towards a milestone

00:38:55,040 --> 00:38:57,599
too and you're like crunched for time

00:38:56,560 --> 00:38:59,440
you're like okay i'm just going to merge

00:38:57,599 --> 00:39:00,800
this and then i'm i'm all worried about

00:38:59,440 --> 00:39:02,000
the commitment messages later like it

00:39:00,800 --> 00:39:04,880
can be really hard

00:39:02,000 --> 00:39:06,720
to hold others accountable but know that

00:39:04,880 --> 00:39:07,440
by holding others accountable to these

00:39:06,720 --> 00:39:09,280
standards

00:39:07,440 --> 00:39:11,440
it creates a culture of continuous

00:39:09,280 --> 00:39:13,760
improvement which makes your project

00:39:11,440 --> 00:39:16,480
and the engineers who work on it better

00:39:13,760 --> 00:39:18,240
and more accessible

00:39:16,480 --> 00:39:19,760
so with that i want to thank you for

00:39:18,240 --> 00:39:22,480
your time today

00:39:19,760 --> 00:39:23,920
i think we have like seven or eight-ish

00:39:22,480 --> 00:39:24,880
minutes i'd be happy to answer any

00:39:23,920 --> 00:39:27,040
questions

00:39:24,880 --> 00:39:29,200
um and if not you can find me on twitter

00:39:27,040 --> 00:39:37,520
or you can check out turn on github or

00:39:29,200 --> 00:39:37,520

YouTube URL: https://www.youtube.com/watch?v=6gWSEKESYJw


