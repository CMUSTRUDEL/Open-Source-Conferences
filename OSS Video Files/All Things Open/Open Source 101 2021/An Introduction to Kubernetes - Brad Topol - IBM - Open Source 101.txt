Title: An Introduction to Kubernetes - Brad Topol - IBM - Open Source 101
Publication date: 2021-04-12
Playlist: Open Source 101 2021
Description: 
	Brad Topol, Distinguished Engineer at IBM, delivered the talk "An Introduction to Kubernetes" at Open Source 101 on Tuesday, March 30, 2021.

Abstract:
Kubernetes is a cloud infrastructure that provides for the deployment and orchestration of containerized applications. Kubernetes has established itself as the de facto platform of choice for the creation of cloud native computing applications. In this talk, we provide an overview of the fundamentals of Kubernetes. We begin with a short introduction to the concept of containers and describe the Kubernetes architecture. We then present several core features provided by Kubernetes such as Pods, ReplicaSets, Deployments, Service objects, and autoscaling capabilities. We conclude with a discussion of Kubernetes continuous delivery fundamentals, including how to do small batch changes, source control, and developer access to production-like environments.

Find Brad on the internets:
Twitter: https://twitter.com/bradtopol
LinkedIn: https://www.linkedin.com/in/brad-topol-6273536/
GitHub: https://github.com/bradtopol
Captions: 
	00:00:04,960 --> 00:00:09,920
so hi everyone

00:00:06,080 --> 00:00:12,240
um i'm brad topel um i'm

00:00:09,920 --> 00:00:14,880
ibm's distinguished engineer for open

00:00:12,240 --> 00:00:18,000
technology and developer advocacy

00:00:14,880 --> 00:00:20,400
um i'm also a kubernetes contributor

00:00:18,000 --> 00:00:21,680
a doc maintainer and i'm the kubernetes

00:00:20,400 --> 00:00:25,119
sig docs

00:00:21,680 --> 00:00:25,599
localization work group chair and today

00:00:25,119 --> 00:00:28,960
at

00:00:25,599 --> 00:00:31,359
open source 101 i'm here to give a nice

00:00:28,960 --> 00:00:32,880
introduction to kubernetes so this is

00:00:31,359 --> 00:00:36,320
great 101 material

00:00:32,880 --> 00:00:38,719
um thank you all for joining um

00:00:36,320 --> 00:00:40,559
i have things set up so if you want to

00:00:38,719 --> 00:00:42,160
enter a question while i talk

00:00:40,559 --> 00:00:44,879
uh you can actually do that and i'll be

00:00:42,160 --> 00:00:46,000
able to see it on my ipad so i can take

00:00:44,879 --> 00:00:46,879
questions while i'm doing the

00:00:46,000 --> 00:00:49,200
presentation

00:00:46,879 --> 00:00:49,920
and i don't mind doing it um it usually

00:00:49,200 --> 00:00:53,440
makes it for

00:00:49,920 --> 00:00:56,000
a better presentation

00:00:53,440 --> 00:00:56,879
so we're going to talk about kubernetes

00:00:56,000 --> 00:01:00,239
which is a

00:00:56,879 --> 00:01:02,879
a platform that that does management of

00:01:00,239 --> 00:01:05,360
containers and container orchestration

00:01:02,879 --> 00:01:06,880
but before we get into kubernetes we

00:01:05,360 --> 00:01:08,320
really need to understand what a

00:01:06,880 --> 00:01:10,000
container is

00:01:08,320 --> 00:01:12,080
so we're going to spend a few minutes on

00:01:10,000 --> 00:01:14,799
that and so the best

00:01:12,080 --> 00:01:16,159
way to do that is we're going to go in

00:01:14,799 --> 00:01:19,200
the wayback machine

00:01:16,159 --> 00:01:22,880
to around 2012.

00:01:19,200 --> 00:01:23,680
so in 2012 when folks like myself were

00:01:22,880 --> 00:01:26,240
working in

00:01:23,680 --> 00:01:27,439
cloud environments cloud platform

00:01:26,240 --> 00:01:29,920
environments

00:01:27,439 --> 00:01:30,640
um what we were using in the cloud

00:01:29,920 --> 00:01:33,040
platform

00:01:30,640 --> 00:01:35,200
environments were virtual machines and

00:01:33,040 --> 00:01:36,479
so the cloud platforms would be

00:01:35,200 --> 00:01:39,520
responsible for getting

00:01:36,479 --> 00:01:42,720
the virtual machines up and running

00:01:39,520 --> 00:01:45,680
and and life was pretty good uh

00:01:42,720 --> 00:01:47,759
you know how could life get any better

00:01:45,680 --> 00:01:51,520
well in 2013

00:01:47,759 --> 00:01:52,320
at pycon a gentleman named solomon hike

00:01:51,520 --> 00:01:54,320
showed up

00:01:52,320 --> 00:01:56,079
and while the rest of us were doing

00:01:54,320 --> 00:01:58,399
things with virtual machines which were

00:01:56,079 --> 00:02:00,640
really pretty big and heavy weight

00:01:58,399 --> 00:02:02,159
he gave a presentation where he

00:02:00,640 --> 00:02:04,320
basically said

00:02:02,159 --> 00:02:05,520
hey all you folks that are using virtual

00:02:04,320 --> 00:02:08,879
machines

00:02:05,520 --> 00:02:10,800
let me show you a different approach

00:02:08,879 --> 00:02:12,000
i have an approach where i can provision

00:02:10,800 --> 00:02:15,040
my applications

00:02:12,000 --> 00:02:16,239
in an environment where unlike a virtual

00:02:15,040 --> 00:02:18,160
machine

00:02:16,239 --> 00:02:19,360
i can actually do things where i

00:02:18,160 --> 00:02:21,200
provision

00:02:19,360 --> 00:02:22,640
applications that are based on linux

00:02:21,200 --> 00:02:25,280
processes

00:02:22,640 --> 00:02:25,680
because the security and linux has

00:02:25,280 --> 00:02:27,840
gotten

00:02:25,680 --> 00:02:30,080
much much better and i can take

00:02:27,840 --> 00:02:31,120
advantage of all these advanced security

00:02:30,080 --> 00:02:33,680
features

00:02:31,120 --> 00:02:35,440
so that i can take the processes and i

00:02:33,680 --> 00:02:37,120
can isolate them

00:02:35,440 --> 00:02:38,879
and they can have their own little file

00:02:37,120 --> 00:02:42,239
system and their

00:02:38,879 --> 00:02:44,640
cpu resources and memory resources and

00:02:42,239 --> 00:02:46,560
it'll look and act as if it's like a

00:02:44,640 --> 00:02:49,280
mini virtual machine

00:02:46,560 --> 00:02:50,080
but it's really just a process so it's

00:02:49,280 --> 00:02:53,760
much lighter

00:02:50,080 --> 00:02:56,560
weight and we can put a lot more of them

00:02:53,760 --> 00:02:57,519
on a machine and we can start them up

00:02:56,560 --> 00:03:00,000
real fast

00:02:57,519 --> 00:03:01,840
so here was the rest of us doing things

00:03:00,000 --> 00:03:03,519
with virtual machines and when we wanted

00:03:01,840 --> 00:03:05,920
to start up the virtual machine

00:03:03,519 --> 00:03:08,159
it took a while and we want when we

00:03:05,920 --> 00:03:11,040
wanted to snapshot the virtual machine

00:03:08,159 --> 00:03:11,840
it took a while maybe you know orders of

00:03:11,040 --> 00:03:14,319
minutes

00:03:11,840 --> 00:03:15,200
and here comes solomon at pycon showing

00:03:14,319 --> 00:03:18,239
us an approach

00:03:15,200 --> 00:03:20,159
that provides similar features you could

00:03:18,239 --> 00:03:22,879
snapshot images

00:03:20,159 --> 00:03:24,480
um but it was process-based and so it

00:03:22,879 --> 00:03:25,920
would start up in a couple of seconds

00:03:24,480 --> 00:03:26,799
whereas we were used to starting up in a

00:03:25,920 --> 00:03:29,840
couple of minutes

00:03:26,799 --> 00:03:30,879
and it was much lighter weight and he

00:03:29,840 --> 00:03:33,040
built it so that

00:03:30,879 --> 00:03:35,519
it was based on a file system approach

00:03:33,040 --> 00:03:38,239
that was a layered file system

00:03:35,519 --> 00:03:40,400
so when he when when when he showed how

00:03:38,239 --> 00:03:41,200
to snapshot the image and snapshot the

00:03:40,400 --> 00:03:42,879
progress

00:03:41,200 --> 00:03:44,799
it all it had to do with snapshot the

00:03:42,879 --> 00:03:47,360
differences between what was new

00:03:44,799 --> 00:03:49,120
in the file system and so his snapshots

00:03:47,360 --> 00:03:50,879
were really really fast

00:03:49,120 --> 00:03:52,720
and compared to when you snapshot a

00:03:50,879 --> 00:03:54,400
virtual machine you have to snapshot the

00:03:52,720 --> 00:03:57,280
whole machine

00:03:54,400 --> 00:03:58,959
so it was an incredible demonstration of

00:03:57,280 --> 00:04:00,640
capabilities

00:03:58,959 --> 00:04:03,840
and he said he was going to make this

00:04:00,640 --> 00:04:06,720
all available and he called it docker

00:04:03,840 --> 00:04:07,680
and what he called that process with the

00:04:06,720 --> 00:04:10,799
the security

00:04:07,680 --> 00:04:11,599
and its own resources isolated with its

00:04:10,799 --> 00:04:13,680
own cpu

00:04:11,599 --> 00:04:15,360
memory file system he called that

00:04:13,680 --> 00:04:17,199
containers

00:04:15,360 --> 00:04:18,959
the other nice feature he showed is the

00:04:17,199 --> 00:04:20,479
containers would package up all the

00:04:18,959 --> 00:04:22,560
libraries they needed

00:04:20,479 --> 00:04:24,080
all the code the process needed to run

00:04:22,560 --> 00:04:26,320
were packaged up

00:04:24,080 --> 00:04:27,759
and whenever the container would run on

00:04:26,320 --> 00:04:30,320
a different machine

00:04:27,759 --> 00:04:32,400
it had everything it needed so it wasn't

00:04:30,320 --> 00:04:34,960
relying on the host machine

00:04:32,400 --> 00:04:36,639
to to have the libraries it needed which

00:04:34,960 --> 00:04:39,120
could potentially be a different version

00:04:36,639 --> 00:04:42,000
which could potentially have problems

00:04:39,120 --> 00:04:43,600
so it was really incredible what

00:04:42,000 --> 00:04:46,000
happened in 2013

00:04:43,600 --> 00:04:49,360
and the world of containers and docker

00:04:46,000 --> 00:04:49,360
uh became about

00:04:49,600 --> 00:04:53,120
so looking at this picture you can see

00:04:51,840 --> 00:04:55,440
the difference between

00:04:53,120 --> 00:04:56,800
running a on a linux server with a lot

00:04:55,440 --> 00:04:58,880
of containers

00:04:56,800 --> 00:04:59,840
compared to running on say a linux

00:04:58,880 --> 00:05:02,400
server with uh

00:04:59,840 --> 00:05:03,520
with virtual machines the first thing

00:05:02,400 --> 00:05:05,120
you'll notice is the

00:05:03,520 --> 00:05:06,960
virtual machines they have their own

00:05:05,120 --> 00:05:09,680
application but then they have their own

00:05:06,960 --> 00:05:10,560
virtualized linux kernel so if you look

00:05:09,680 --> 00:05:12,560
at how

00:05:10,560 --> 00:05:14,160
the applications run they got a call

00:05:12,560 --> 00:05:16,800
through the virtualized linux kernel and

00:05:14,160 --> 00:05:19,440
then go to the actual linux kernel

00:05:16,800 --> 00:05:20,000
and so each one is carrying a lot of

00:05:19,440 --> 00:05:21,840
stuff

00:05:20,000 --> 00:05:23,840
so on a server you can only get say a

00:05:21,840 --> 00:05:25,360
few of these because they they waste a

00:05:23,840 --> 00:05:27,120
lot of resources

00:05:25,360 --> 00:05:29,199
but if you look at the container-based

00:05:27,120 --> 00:05:30,960
approach

00:05:29,199 --> 00:05:33,199
the containers have their application

00:05:30,960 --> 00:05:35,919
and their libraries

00:05:33,199 --> 00:05:36,479
but they all share the same linux kernel

00:05:35,919 --> 00:05:37,600
and so

00:05:36,479 --> 00:05:39,600
they're not going through a virtual

00:05:37,600 --> 00:05:41,360
kernel and going and then to the real

00:05:39,600 --> 00:05:43,039
linux kernel on the server

00:05:41,360 --> 00:05:44,800
they're they're just using the actual

00:05:43,039 --> 00:05:46,639
linux kernel and so

00:05:44,800 --> 00:05:48,560
this results in approach where there's

00:05:46,639 --> 00:05:50,720
not as much waste right you can store a

00:05:48,560 --> 00:05:53,039
lot more containers on the server

00:05:50,720 --> 00:05:55,039
um they don't have they don't each all

00:05:53,039 --> 00:05:56,880
have their own virtualized linux kernel

00:05:55,039 --> 00:05:58,479
so there's not all that waste there and

00:05:56,880 --> 00:05:59,120
you can really get a more efficient

00:05:58,479 --> 00:06:01,759
approach

00:05:59,120 --> 00:06:03,919
to provision the applications and and

00:06:01,759 --> 00:06:07,120
and getting things up and running

00:06:03,919 --> 00:06:09,919
so this was a huge step forward

00:06:07,120 --> 00:06:10,400
so now that we have the concept of of of

00:06:09,919 --> 00:06:13,199
of

00:06:10,400 --> 00:06:13,680
containers now we need a way to manage

00:06:13,199 --> 00:06:15,520
them

00:06:13,680 --> 00:06:19,280
we need to provision them across a

00:06:15,520 --> 00:06:21,840
cluster we want to be able to scale them

00:06:19,280 --> 00:06:22,400
so many features that we want to do to

00:06:21,840 --> 00:06:26,240
actually

00:06:22,400 --> 00:06:26,720
run this as a cloud-based platform that

00:06:26,240 --> 00:06:29,680
can run

00:06:26,720 --> 00:06:31,520
containers and and something needs to

00:06:29,680 --> 00:06:33,360
manage all those resources

00:06:31,520 --> 00:06:35,360
and docker that company that was started

00:06:33,360 --> 00:06:38,080
by solomon well it had its approach

00:06:35,360 --> 00:06:38,720
and it was called docker swarm but

00:06:38,080 --> 00:06:41,759
google

00:06:38,720 --> 00:06:43,199
had actually used a similar approach for

00:06:41,759 --> 00:06:45,199
a large number of years

00:06:43,199 --> 00:06:46,880
uh similar to their sort of

00:06:45,199 --> 00:06:49,520
container-based approach

00:06:46,880 --> 00:06:50,240
so they had figured out those same ideas

00:06:49,520 --> 00:06:53,199
and

00:06:50,240 --> 00:06:54,080
they had already built systems to manage

00:06:53,199 --> 00:06:56,960
containers

00:06:54,080 --> 00:06:58,160
they built multiple um generations of

00:06:56,960 --> 00:06:59,680
systems

00:06:58,160 --> 00:07:01,120
they had one called borg one called

00:06:59,680 --> 00:07:03,280
omega and then they had a newer one

00:07:01,120 --> 00:07:06,000
called kubernetes

00:07:03,280 --> 00:07:06,479
and and so believe it or not even back

00:07:06,000 --> 00:07:08,319
when

00:07:06,479 --> 00:07:10,000
on google let's say you had google mail

00:07:08,319 --> 00:07:11,680
or whatever google

00:07:10,000 --> 00:07:13,840
application you were using those all ran

00:07:11,680 --> 00:07:15,360
as containers in their infrastructure

00:07:13,840 --> 00:07:18,000
and they worried about manage them

00:07:15,360 --> 00:07:20,400
scaling them what have you

00:07:18,000 --> 00:07:21,199
and so google decided well you know what

00:07:20,400 --> 00:07:23,440
we should take

00:07:21,199 --> 00:07:26,240
our platform which was called kubernetes

00:07:23,440 --> 00:07:29,120
and we should make it open source

00:07:26,240 --> 00:07:30,479
and um so this was now a platform that

00:07:29,120 --> 00:07:32,800
was available

00:07:30,479 --> 00:07:34,240
that that would manage your resources

00:07:32,800 --> 00:07:36,000
manage your volumes

00:07:34,240 --> 00:07:38,000
manage your network manage your

00:07:36,000 --> 00:07:39,840
configuration secrets

00:07:38,000 --> 00:07:41,840
and it had what was called a declarative

00:07:39,840 --> 00:07:42,800
model we'll get more into what that

00:07:41,840 --> 00:07:45,680
means

00:07:42,800 --> 00:07:48,080
but it basically enables you to say i

00:07:45,680 --> 00:07:50,560
want to declare what i want to happen

00:07:48,080 --> 00:07:52,240
and kubernetes will make it happen i

00:07:50,560 --> 00:07:54,080
describe what i want

00:07:52,240 --> 00:07:55,440
and kubernetes will figure out how to

00:07:54,080 --> 00:07:59,039
give me this

00:07:55,440 --> 00:08:01,440
the desired state that i want

00:07:59,039 --> 00:08:03,520
and so what happened is google made

00:08:01,440 --> 00:08:05,280
kubernetes open source

00:08:03,520 --> 00:08:07,039
but what happens with open source

00:08:05,280 --> 00:08:09,120
projects is if you really want to get a

00:08:07,039 --> 00:08:11,599
lot of traction and adoption

00:08:09,120 --> 00:08:13,759
people are a little nervous about what

00:08:11,599 --> 00:08:15,759
we call single vendor open source

00:08:13,759 --> 00:08:18,160
so they want an open source project that

00:08:15,759 --> 00:08:18,879
has a lot of vendors that contribute to

00:08:18,160 --> 00:08:20,879
it

00:08:18,879 --> 00:08:22,160
and they also want an open source

00:08:20,879 --> 00:08:24,720
project that

00:08:22,160 --> 00:08:26,080
ideally has a foundation behind it that

00:08:24,720 --> 00:08:28,160
can provide some governance

00:08:26,080 --> 00:08:29,840
and can provide a level playing field

00:08:28,160 --> 00:08:32,240
for contribution

00:08:29,840 --> 00:08:33,599
which means anybody that contributes a

00:08:32,240 --> 00:08:35,519
lot to the project

00:08:33,599 --> 00:08:36,719
should ideally grow and have the

00:08:35,519 --> 00:08:38,640
opportunity to have

00:08:36,719 --> 00:08:40,000
influence on the project and influence

00:08:38,640 --> 00:08:42,399
on on what

00:08:40,000 --> 00:08:44,159
the project's direction will be and what

00:08:42,399 --> 00:08:47,120
features it'll support

00:08:44,159 --> 00:08:48,640
and that's what happened so there a

00:08:47,120 --> 00:08:50,080
large number of companies got together

00:08:48,640 --> 00:08:52,720
created what was called the cloud native

00:08:50,080 --> 00:08:54,800
computing foundation

00:08:52,720 --> 00:08:57,600
kubernetes was donated by google to be

00:08:54,800 --> 00:09:00,800
the seed technology for the cncf

00:08:57,600 --> 00:09:01,519
and that drove the huge amount of

00:09:00,800 --> 00:09:03,920
adoption

00:09:01,519 --> 00:09:04,560
and growth of kubernetes by a large

00:09:03,920 --> 00:09:07,120
number of

00:09:04,560 --> 00:09:09,760
companies and so the cncf has actually

00:09:07,120 --> 00:09:12,720
grown to having 440

00:09:09,760 --> 00:09:14,240
member companies it now hosts 26 open

00:09:12,720 --> 00:09:16,160
source projects that are all somehow

00:09:14,240 --> 00:09:17,279
related to kubernetes in one form or

00:09:16,160 --> 00:09:19,760
another

00:09:17,279 --> 00:09:22,000
and they do conformance certification

00:09:19,760 --> 00:09:24,880
and so over 100 vendor distributions

00:09:22,000 --> 00:09:27,360
of kubernetes um have passed conformance

00:09:24,880 --> 00:09:30,720
certification tests

00:09:27,360 --> 00:09:32,080
so thanks to having a a great platform

00:09:30,720 --> 00:09:34,959
with great features

00:09:32,080 --> 00:09:37,279
and having a great open source

00:09:34,959 --> 00:09:38,399
multi-vendor approach with a foundation

00:09:37,279 --> 00:09:40,480
behind it

00:09:38,399 --> 00:09:41,600
this is sort of a winning formula for a

00:09:40,480 --> 00:09:44,080
very successful

00:09:41,600 --> 00:09:47,360
open source ecosystem which is

00:09:44,080 --> 00:09:49,680
surrounded now kubernetes

00:09:47,360 --> 00:09:52,399
so let's start taking a look at the

00:09:49,680 --> 00:09:54,399
kubernetes architecture

00:09:52,399 --> 00:09:56,959
basically what kubernetes does is it

00:09:54,399 --> 00:09:59,839
runs across a cluster of servers

00:09:56,959 --> 00:10:00,959
and it's going to enable you to run your

00:09:59,839 --> 00:10:04,000
containers

00:10:00,959 --> 00:10:06,720
across that cluster of servers

00:10:04,000 --> 00:10:08,320
now looking at the architecture chart

00:10:06,720 --> 00:10:09,680
you'll see that there's a master node

00:10:08,320 --> 00:10:12,800
and you can interact with that node

00:10:09,680 --> 00:10:14,880
through a user interface or a rest api

00:10:12,800 --> 00:10:16,320
or a command line interface called kube

00:10:14,880 --> 00:10:19,760
control

00:10:16,320 --> 00:10:22,000
and you can use that to get your

00:10:19,760 --> 00:10:24,480
containers up and running on a large

00:10:22,000 --> 00:10:28,800
number of worker nodes

00:10:24,480 --> 00:10:31,519
now what what what google had learned by

00:10:28,800 --> 00:10:32,959
its platform for managing containers is

00:10:31,519 --> 00:10:36,800
typically

00:10:32,959 --> 00:10:39,120
um you want to manage containers

00:10:36,800 --> 00:10:40,720
in pairs or more than one container

00:10:39,120 --> 00:10:41,200
certain containers are related and they

00:10:40,720 --> 00:10:43,120
should

00:10:41,200 --> 00:10:45,440
all be managed together maybe they all

00:10:43,120 --> 00:10:47,440
run on the same server what have you

00:10:45,440 --> 00:10:48,959
so what kubernetes decided is the

00:10:47,440 --> 00:10:51,680
container should not be

00:10:48,959 --> 00:10:53,040
the smallest deployable unit it came up

00:10:51,680 --> 00:10:56,560
with a new concept

00:10:53,040 --> 00:10:59,839
called a pod and the

00:10:56,560 --> 00:11:02,240
pod would contain one or more

00:10:59,839 --> 00:11:03,920
containers and that would be the unit

00:11:02,240 --> 00:11:04,880
that kubernetes would worry about

00:11:03,920 --> 00:11:06,240
managing

00:11:04,880 --> 00:11:08,000
so if you look in this architecture

00:11:06,240 --> 00:11:11,120
picture what you can see

00:11:08,000 --> 00:11:14,320
is we've got two worker nodes and

00:11:11,120 --> 00:11:16,480
each worker node has multiple pods on it

00:11:14,320 --> 00:11:17,519
and each pod can have one or more

00:11:16,480 --> 00:11:21,920
containers

00:11:17,519 --> 00:11:24,959
inside of of the pod

00:11:21,920 --> 00:11:25,360
now if we look at what a pod let's

00:11:24,959 --> 00:11:27,279
really

00:11:25,360 --> 00:11:29,920
learn a little more about it again it's

00:11:27,279 --> 00:11:32,880
a collection of application containers

00:11:29,920 --> 00:11:34,720
and it can include their volumes and

00:11:32,880 --> 00:11:36,079
they all run in the same execution

00:11:34,720 --> 00:11:38,160
environment

00:11:36,079 --> 00:11:41,600
and these pods are the smallest

00:11:38,160 --> 00:11:43,680
deployable unit of a kubernetes cluster

00:11:41,600 --> 00:11:47,360
and so the way you should think about it

00:11:43,680 --> 00:11:50,399
is applications that are in the same pod

00:11:47,360 --> 00:11:52,639
they actually share

00:11:50,399 --> 00:11:53,440
an ip address and they share a port

00:11:52,639 --> 00:11:56,079
space

00:11:53,440 --> 00:11:58,160
they share the same host name those

00:11:56,079 --> 00:12:00,160
containers inside the pod can actually

00:11:58,160 --> 00:12:00,959
communicate with each other using native

00:12:00,160 --> 00:12:03,760
inner process

00:12:00,959 --> 00:12:05,760
communication and they can also share

00:12:03,760 --> 00:12:06,959
mounted storage

00:12:05,760 --> 00:12:08,399
now if you have two container

00:12:06,959 --> 00:12:10,160
applications and you put them in

00:12:08,399 --> 00:12:12,480
different pods

00:12:10,160 --> 00:12:14,399
well they're going to for sure have

00:12:12,480 --> 00:12:16,160
different ip addresses

00:12:14,399 --> 00:12:18,720
they're going to have different host

00:12:16,160 --> 00:12:21,440
names and it's going to be

00:12:18,720 --> 00:12:22,000
as if they they really are running on

00:12:21,440 --> 00:12:25,360
different

00:12:22,000 --> 00:12:27,600
servers so when you design your pods the

00:12:25,360 --> 00:12:29,600
big question you need to ask yourself is

00:12:27,600 --> 00:12:32,480
will these containers work correctly if

00:12:29,600 --> 00:12:35,920
they land on different machines

00:12:32,480 --> 00:12:37,760
and if the answer is yes they'll be fine

00:12:35,920 --> 00:12:38,639
if they land on different machines and

00:12:37,760 --> 00:12:40,480
work correctly

00:12:38,639 --> 00:12:43,120
then they really should be in different

00:12:40,480 --> 00:12:43,120
pods

00:12:44,240 --> 00:12:49,040
another great example of mapping of well

00:12:47,040 --> 00:12:50,639
do you put things in the same pod or put

00:12:49,040 --> 00:12:53,120
things in different pods

00:12:50,639 --> 00:12:54,720
i think if you have a simple simple

00:12:53,120 --> 00:12:55,279
web-based application where you have

00:12:54,720 --> 00:12:57,920
your

00:12:55,279 --> 00:12:59,040
web server and a database so one of the

00:12:57,920 --> 00:13:00,800
questions we would ask

00:12:59,040 --> 00:13:03,120
is well do you put the web server in the

00:13:00,800 --> 00:13:05,120
database and the same pod or put them in

00:13:03,120 --> 00:13:06,560
different pods

00:13:05,120 --> 00:13:08,320
well really you want to put them on

00:13:06,560 --> 00:13:09,920
different pods because

00:13:08,320 --> 00:13:11,600
one of the things that kubernetes gives

00:13:09,920 --> 00:13:14,639
you is scalability

00:13:11,600 --> 00:13:17,279
and you typically want to scale your

00:13:14,639 --> 00:13:18,880
web servers up to a higher number than

00:13:17,279 --> 00:13:20,560
say your databases

00:13:18,880 --> 00:13:22,720
and so by breaking them into different

00:13:20,560 --> 00:13:24,800
pods you can control the scaling

00:13:22,720 --> 00:13:25,760
the number of of copies of the

00:13:24,800 --> 00:13:27,760
application

00:13:25,760 --> 00:13:29,440
so that's a good example of where you

00:13:27,760 --> 00:13:33,600
would would design

00:13:29,440 --> 00:13:36,639
putting the containers in different pods

00:13:33,600 --> 00:13:40,079
so let's talk about the features of

00:13:36,639 --> 00:13:41,920
of kubernetes pods um

00:13:40,079 --> 00:13:43,199
basically kubernetes is going to give

00:13:41,920 --> 00:13:46,639
you the ability to create

00:13:43,199 --> 00:13:48,959
pods list pods delete pods

00:13:46,639 --> 00:13:50,720
and allow you to run commands in your

00:13:48,959 --> 00:13:53,920
pod containers

00:13:50,720 --> 00:13:56,880
it allows you to copy files to and from

00:13:53,920 --> 00:13:57,279
the containers in your pods and allow

00:13:56,880 --> 00:14:00,399
you

00:13:57,279 --> 00:14:01,440
to test and connect to your from your

00:14:00,399 --> 00:14:03,360
local machine

00:14:01,440 --> 00:14:05,120
to your pods that are running inside

00:14:03,360 --> 00:14:07,360
kubernetes

00:14:05,120 --> 00:14:09,519
and it also has what are called liveness

00:14:07,360 --> 00:14:12,639
and readiness probes

00:14:09,519 --> 00:14:14,800
so one of the key reasons people love

00:14:12,639 --> 00:14:18,240
kubernetes so much

00:14:14,800 --> 00:14:21,279
is unlike previous cloud platforms

00:14:18,240 --> 00:14:22,079
kubernetes put a lot of effort right

00:14:21,279 --> 00:14:24,720
into

00:14:22,079 --> 00:14:26,480
to the default capabilities of being

00:14:24,720 --> 00:14:28,160
able to do things like

00:14:26,480 --> 00:14:31,199
i'm going to worry about running large

00:14:28,160 --> 00:14:33,120
numbers of copies of your application

00:14:31,199 --> 00:14:35,199
and so i'm going to be very good at

00:14:33,120 --> 00:14:37,440
scaling and i'm going to worry about

00:14:35,199 --> 00:14:40,079
whether some copies of your application

00:14:37,440 --> 00:14:41,839
fail or not so i'm going to be checking

00:14:40,079 --> 00:14:43,440
to make sure that let's say you have

00:14:41,839 --> 00:14:45,440
five copies of your application and you

00:14:43,440 --> 00:14:47,040
want five copies running

00:14:45,440 --> 00:14:48,720
i'm gonna keep track that there's five

00:14:47,040 --> 00:14:49,519
copies running and if i notice one or

00:14:48,720 --> 00:14:52,720
two crash

00:14:49,519 --> 00:14:54,079
i'm gonna actually start more up and

00:14:52,720 --> 00:14:56,160
similarly if i

00:14:54,079 --> 00:14:58,399
notice that your copies of your

00:14:56,160 --> 00:15:00,959
application are getting overloaded

00:14:58,399 --> 00:15:03,440
i have built in auto scaling so i'm

00:15:00,959 --> 00:15:06,800
going to be able to scale more copies up

00:15:03,440 --> 00:15:10,399
if your system gets overloaded so why do

00:15:06,800 --> 00:15:13,040
um your cloud platform operations folks

00:15:10,399 --> 00:15:15,279
love these features because if they get

00:15:13,040 --> 00:15:18,720
their applications up and running

00:15:15,279 --> 00:15:21,440
and maybe it's um

00:15:18,720 --> 00:15:22,079
you know the holidays and the sales are

00:15:21,440 --> 00:15:23,760
gonna

00:15:22,079 --> 00:15:26,079
really ramp up and so you gotta worry

00:15:23,760 --> 00:15:28,399
about excessive load

00:15:26,079 --> 00:15:29,839
well kubernetes is going to handle that

00:15:28,399 --> 00:15:31,920
and also maybe

00:15:29,839 --> 00:15:33,279
part of your applications crash maybe a

00:15:31,920 --> 00:15:35,360
server crashes

00:15:33,279 --> 00:15:37,519
kubernetes is going to handle starting

00:15:35,360 --> 00:15:39,279
up new copies on different servers

00:15:37,519 --> 00:15:40,959
instead of your page you're going off in

00:15:39,279 --> 00:15:42,959
the middle of the night

00:15:40,959 --> 00:15:45,199
so kubernetes is going to take care of a

00:15:42,959 --> 00:15:47,519
lot of features that you need

00:15:45,199 --> 00:15:49,279
and that's why people in operations love

00:15:47,519 --> 00:15:51,199
it so much

00:15:49,279 --> 00:15:54,720
now if you remember earlier i mentioned

00:15:51,199 --> 00:15:57,759
that kubernetes is a declarative model

00:15:54,720 --> 00:16:00,000
so you get to declare what you want and

00:15:57,759 --> 00:16:01,279
kubernetes has to figure out how to make

00:16:00,000 --> 00:16:03,759
it happen

00:16:01,279 --> 00:16:06,000
and the declarative model that it uses

00:16:03,759 --> 00:16:08,160
is a yaml file based specific

00:16:06,000 --> 00:16:09,199
specification approach and we can see a

00:16:08,160 --> 00:16:12,639
simple one here

00:16:09,199 --> 00:16:16,480
over over here on the right um

00:16:12,639 --> 00:16:18,639
what we're seeing is a yaml file

00:16:16,480 --> 00:16:21,120
and the the first thing we put in it is

00:16:18,639 --> 00:16:24,560
we declare the api version that we use

00:16:21,120 --> 00:16:26,639
v1 is fine kubernetes is always changing

00:16:24,560 --> 00:16:28,720
over time new features so

00:16:26,639 --> 00:16:33,440
you know newer features come you you

00:16:28,720 --> 00:16:33,440
pick the the api version that you need

00:16:33,600 --> 00:16:37,680
the other thing is it has different

00:16:35,360 --> 00:16:40,880
resources that it manages

00:16:37,680 --> 00:16:44,079
and the um

00:16:40,880 --> 00:16:45,680
the the the version that the the

00:16:44,079 --> 00:16:46,399
simplest resource that it has that we're

00:16:45,680 --> 00:16:49,120
going to talk about

00:16:46,399 --> 00:16:50,959
first is that is the pod resource and so

00:16:49,120 --> 00:16:53,680
we give it a kind

00:16:50,959 --> 00:16:53,680
um

00:16:54,240 --> 00:16:57,920
and i'm going to stop just take a quick

00:16:55,600 --> 00:16:58,959
question from grant great question are

00:16:57,920 --> 00:17:00,880
zorn aws

00:16:58,959 --> 00:17:02,880
copying the success of kubernetes are

00:17:00,880 --> 00:17:06,319
they different in a significant way

00:17:02,880 --> 00:17:08,880
no the beauty of kubernetes is it is

00:17:06,319 --> 00:17:10,079
running and available on both azure and

00:17:08,880 --> 00:17:13,360
aws

00:17:10,079 --> 00:17:15,919
and ibm cloud and google cloud

00:17:13,360 --> 00:17:16,880
so they they aren't really copying the

00:17:15,919 --> 00:17:19,039
success

00:17:16,880 --> 00:17:20,720
they're all running kubernetes and

00:17:19,039 --> 00:17:22,880
remember how i talked about

00:17:20,720 --> 00:17:25,439
um how we have all these conformance

00:17:22,880 --> 00:17:28,000
tests well that helps to make sure

00:17:25,439 --> 00:17:29,760
that your workloads are portable so you

00:17:28,000 --> 00:17:31,520
could start on one platform

00:17:29,760 --> 00:17:33,360
and if for some reason you don't like it

00:17:31,520 --> 00:17:34,400
you could move to a to a different

00:17:33,360 --> 00:17:36,960
platform

00:17:34,400 --> 00:17:38,799
and you can actually we call it hybrid

00:17:36,960 --> 00:17:40,080
cloud you can run on multiple cloud

00:17:38,799 --> 00:17:41,840
platforms

00:17:40,080 --> 00:17:44,840
and that's happening more and more as

00:17:41,840 --> 00:17:46,880
well so so kubernetes because it's so

00:17:44,840 --> 00:17:49,919
portable um

00:17:46,880 --> 00:17:50,480
it's now available as a as as something

00:17:49,919 --> 00:17:52,799
you

00:17:50,480 --> 00:17:53,600
are available on all those different uh

00:17:52,799 --> 00:17:55,679
cloud uh

00:17:53,600 --> 00:17:57,600
platforms grant hopefully that answers

00:17:55,679 --> 00:18:00,880
your question

00:17:57,600 --> 00:18:02,799
so going back to the example here

00:18:00,880 --> 00:18:04,400
again the simplest resource that we have

00:18:02,799 --> 00:18:07,039
is a pod

00:18:04,400 --> 00:18:07,840
we give it a name so this is what we

00:18:07,039 --> 00:18:09,840
want

00:18:07,840 --> 00:18:11,200
and then we give a specification what do

00:18:09,840 --> 00:18:13,919
we want to run

00:18:11,200 --> 00:18:15,200
what's running in our pod and what we

00:18:13,919 --> 00:18:18,240
want to run in the pod

00:18:15,200 --> 00:18:21,440
is a container we give it a name nginx

00:18:18,240 --> 00:18:22,960
and then we give it a docker image so

00:18:21,440 --> 00:18:24,240
what's the image that we want to run as

00:18:22,960 --> 00:18:26,400
part of the container we're going to run

00:18:24,240 --> 00:18:29,360
nginx version 1.79

00:18:26,400 --> 00:18:29,840
and it's gonna need to be have exposed

00:18:29,360 --> 00:18:32,160
um

00:18:29,840 --> 00:18:33,760
the container port of 80 because that's

00:18:32,160 --> 00:18:36,400
the port it runs on

00:18:33,760 --> 00:18:38,240
and so we take this specification and we

00:18:36,400 --> 00:18:39,520
run this cube control command at the

00:18:38,240 --> 00:18:41,520
bottom here

00:18:39,520 --> 00:18:42,799
and this specification gets fed into

00:18:41,520 --> 00:18:45,200
kubernetes

00:18:42,799 --> 00:18:46,240
and kubernetes goes oh i see you want to

00:18:45,200 --> 00:18:48,080
run a pod

00:18:46,240 --> 00:18:49,840
i see you wanted to run the container

00:18:48,080 --> 00:18:52,160
engine x i see which

00:18:49,840 --> 00:18:53,360
uh version of nginx which container

00:18:52,160 --> 00:18:56,240
image you want

00:18:53,360 --> 00:18:57,520
i'll go make this happen for you so the

00:18:56,240 --> 00:19:00,000
declarative model

00:18:57,520 --> 00:19:01,440
is is what happens and you just you just

00:19:00,000 --> 00:19:04,559
give the specification

00:19:01,440 --> 00:19:06,160
here's what i want go make it happen and

00:19:04,559 --> 00:19:08,320
so this is a simple one

00:19:06,160 --> 00:19:11,840
but let's look at one that's um a little

00:19:08,320 --> 00:19:11,840
more powerful

00:19:13,679 --> 00:19:16,880
again i talked about kubernetes being

00:19:16,240 --> 00:19:19,919
willing

00:19:16,880 --> 00:19:23,039
to worry about creating and

00:19:19,919 --> 00:19:26,880
managing and checking on the health

00:19:23,039 --> 00:19:30,240
of multiple copies of your application

00:19:26,880 --> 00:19:32,320
and so the way it does that it's its new

00:19:30,240 --> 00:19:33,840
its resource for doing that is called a

00:19:32,320 --> 00:19:35,840
replica set

00:19:33,840 --> 00:19:37,200
and so a replica set runs across the

00:19:35,840 --> 00:19:39,600
cluster

00:19:37,200 --> 00:19:40,400
and you you can see it in red here you

00:19:39,600 --> 00:19:42,640
get to say what

00:19:40,400 --> 00:19:43,679
number the number of copies of your

00:19:42,640 --> 00:19:45,440
application

00:19:43,679 --> 00:19:47,039
basically the number of copies of pods

00:19:45,440 --> 00:19:48,640
that run your container application to

00:19:47,039 --> 00:19:51,679
be specific

00:19:48,640 --> 00:19:52,640
but you get to tell it how many copies

00:19:51,679 --> 00:19:55,200
you want

00:19:52,640 --> 00:19:57,039
and the replica set is what we call a

00:19:55,200 --> 00:19:59,520
controller that is going to manage

00:19:57,039 --> 00:20:02,880
and make sure that it starts up the

00:19:59,520 --> 00:20:07,280
number of copies of your application

00:20:02,880 --> 00:20:09,280
and it's going if if any of them fail

00:20:07,280 --> 00:20:10,480
it knows you want three copies it's

00:20:09,280 --> 00:20:11,520
going to make sure there's always three

00:20:10,480 --> 00:20:14,159
running so it's always going to be

00:20:11,520 --> 00:20:15,760
checking on the health of those as well

00:20:14,159 --> 00:20:17,360
and so you can see visually what this

00:20:15,760 --> 00:20:19,200
looks like a replica set is going to

00:20:17,360 --> 00:20:21,360
have three of the same pods

00:20:19,200 --> 00:20:22,960
and the pods each have say the same

00:20:21,360 --> 00:20:24,480
containers inside of them and the same

00:20:22,960 --> 00:20:26,640
volume mounts

00:20:24,480 --> 00:20:27,760
and so let's look at how we do our

00:20:26,640 --> 00:20:29,919
description again

00:20:27,760 --> 00:20:31,120
declarative model we're going to write a

00:20:29,919 --> 00:20:34,799
yaml that declares

00:20:31,120 --> 00:20:35,440
what we want and kubernetes will make it

00:20:34,799 --> 00:20:38,880
happen

00:20:35,440 --> 00:20:39,280
and so what we want is a resource of

00:20:38,880 --> 00:20:41,600
type

00:20:39,280 --> 00:20:42,640
replica set we're going to give it a

00:20:41,600 --> 00:20:46,159
name

00:20:42,640 --> 00:20:48,240
the name is um frontend

00:20:46,159 --> 00:20:50,240
and we're going to use labels labels are

00:20:48,240 --> 00:20:53,440
just key value pairs

00:20:50,240 --> 00:20:57,280
and amazingly with kubernetes so much

00:20:53,440 --> 00:21:00,720
work is done by key value pairs labeling

00:20:57,280 --> 00:21:01,679
because um again kubernetes always

00:21:00,720 --> 00:21:04,080
assumes that

00:21:01,679 --> 00:21:05,760
problems are going to occur your your

00:21:04,080 --> 00:21:08,320
pods are going to crash

00:21:05,760 --> 00:21:10,240
and so it may start with three pods but

00:21:08,320 --> 00:21:10,880
maybe there's not always three pods it's

00:21:10,240 --> 00:21:13,520
going to assume

00:21:10,880 --> 00:21:15,039
bad things can happen and so it uses

00:21:13,520 --> 00:21:17,120
these labels

00:21:15,039 --> 00:21:18,880
and your pods get labels and so a

00:21:17,120 --> 00:21:21,919
replica set knows

00:21:18,880 --> 00:21:24,720
which pods it manages by

00:21:21,919 --> 00:21:26,080
by what labels are out there on the pods

00:21:24,720 --> 00:21:28,559
and it says hey i'm

00:21:26,080 --> 00:21:29,360
i'm managing the pods that have certain

00:21:28,559 --> 00:21:31,360
labels

00:21:29,360 --> 00:21:33,840
and we can actually see this in the in

00:21:31,360 --> 00:21:36,799
the in the specification here

00:21:33,840 --> 00:21:37,919
so for example the first thing we see is

00:21:36,799 --> 00:21:40,159
that it's going to say

00:21:37,919 --> 00:21:42,159
there's going to be three replicas so we

00:21:40,159 --> 00:21:44,880
know it wants three copies of whatever

00:21:42,159 --> 00:21:47,039
the pods are and then it's going to say

00:21:44,880 --> 00:21:50,400
well which pods do i match

00:21:47,039 --> 00:21:52,720
and i'm going to match uh

00:21:50,400 --> 00:21:54,320
for the key tier that has a value of

00:21:52,720 --> 00:21:57,120
front end

00:21:54,320 --> 00:21:58,559
okay so we know what it wants to match

00:21:57,120 --> 00:22:02,640
but we got to make sure those

00:21:58,559 --> 00:22:04,080
those those labels get into our pod

00:22:02,640 --> 00:22:06,400
so what's nice is in the same

00:22:04,080 --> 00:22:08,240
specification of what the replica set is

00:22:06,400 --> 00:22:11,120
it also gets to describe

00:22:08,240 --> 00:22:12,400
the pods that it's going to manage and

00:22:11,120 --> 00:22:15,039
so it makes sure

00:22:12,400 --> 00:22:16,960
down here under template now we're

00:22:15,039 --> 00:22:18,880
describing the actual pods that are

00:22:16,960 --> 00:22:20,559
managed by the replica set

00:22:18,880 --> 00:22:22,799
and here we get to say well it's going

00:22:20,559 --> 00:22:26,240
to have the labels of guest book

00:22:22,799 --> 00:22:28,000
and uh app the key is app and the value

00:22:26,240 --> 00:22:30,880
is guest book and the tier

00:22:28,000 --> 00:22:32,559
key has a value of front end and those

00:22:30,880 --> 00:22:34,640
are important because if you look

00:22:32,559 --> 00:22:35,919
that's what it's going to look for pods

00:22:34,640 --> 00:22:37,520
with those labels

00:22:35,919 --> 00:22:39,360
so you might might as well make sure

00:22:37,520 --> 00:22:40,720
those get get applied

00:22:39,360 --> 00:22:42,640
and then down here under the

00:22:40,720 --> 00:22:43,679
specification you get to give the name

00:22:42,640 --> 00:22:45,520
of the container

00:22:43,679 --> 00:22:47,520
and you get to give the actual image of

00:22:45,520 --> 00:22:49,919
the container and again you get to say

00:22:47,520 --> 00:22:51,039
what port is exposed by the container

00:22:49,919 --> 00:22:54,159
image

00:22:51,039 --> 00:22:54,559
so in this single specification we're

00:22:54,159 --> 00:22:57,520
able

00:22:54,559 --> 00:22:59,679
for replica set we're able to say we got

00:22:57,520 --> 00:23:01,520
to have three replicas and we get to say

00:22:59,679 --> 00:23:03,039
what's in the actual pods

00:23:01,520 --> 00:23:05,200
that are going to be managed by the

00:23:03,039 --> 00:23:06,960
replica set and then we have our

00:23:05,200 --> 00:23:09,600
favorite command here at the bottom

00:23:06,960 --> 00:23:10,960
the kube control create passing in that

00:23:09,600 --> 00:23:14,320
yaml file

00:23:10,960 --> 00:23:17,600
we pass in that that specification

00:23:14,320 --> 00:23:20,000
kubernetes is going to say oh brad wants

00:23:17,600 --> 00:23:22,320
three replicas here are the labels that

00:23:20,000 --> 00:23:23,760
should be on each of the pods here's the

00:23:22,320 --> 00:23:25,600
image that should be running as part of

00:23:23,760 --> 00:23:28,240
the container in each of the pods

00:23:25,600 --> 00:23:30,000
i better go make this happen for brad so

00:23:28,240 --> 00:23:31,600
thanks kubernetes for doing all the hard

00:23:30,000 --> 00:23:34,960
work i just give the

00:23:31,600 --> 00:23:39,200
desire of what i want

00:23:34,960 --> 00:23:41,039
so if we go into uh the replica set

00:23:39,200 --> 00:23:42,240
we had our first specification that i

00:23:41,039 --> 00:23:45,679
showed you

00:23:42,240 --> 00:23:48,480
but the beauty of it is we can update

00:23:45,679 --> 00:23:50,159
that specification so we started with

00:23:48,480 --> 00:23:53,760
three replicas

00:23:50,159 --> 00:23:56,559
and now we can uh

00:23:53,760 --> 00:23:58,799
update the value to six we're going to

00:23:56,559 --> 00:24:01,440
leave everything else the same

00:23:58,799 --> 00:24:03,120
and if you look at the bottom we can use

00:24:01,440 --> 00:24:07,039
the kube control apply

00:24:03,120 --> 00:24:10,320
command and what that allows us to do

00:24:07,039 --> 00:24:12,559
is update the kubernetes with this new

00:24:10,320 --> 00:24:13,760
version of the specification

00:24:12,559 --> 00:24:16,080
and with the new version of the

00:24:13,760 --> 00:24:16,840
specification we tell it we want six

00:24:16,080 --> 00:24:20,159
replica

00:24:16,840 --> 00:24:20,960
replicas and so guess what kubernetes

00:24:20,159 --> 00:24:24,000
knows it has

00:24:20,960 --> 00:24:26,240
three running but now i said i want six

00:24:24,000 --> 00:24:27,840
can anybody guess what kubernetes is

00:24:26,240 --> 00:24:30,080
gonna do now that we've sent it the

00:24:27,840 --> 00:24:32,799
value of six

00:24:30,080 --> 00:24:34,320
um i'm gonna answer for you because i

00:24:32,799 --> 00:24:36,159
know you know the answer but it's gonna

00:24:34,320 --> 00:24:38,240
scale it up from three copies of your

00:24:36,159 --> 00:24:41,760
application container images

00:24:38,240 --> 00:24:43,279
to six which is really cool and so

00:24:41,760 --> 00:24:45,279
replica sets have some built-in

00:24:43,279 --> 00:24:46,880
functions they're easy to delete

00:24:45,279 --> 00:24:48,400
they can also delete the containers that

00:24:46,880 --> 00:24:50,559
they manage

00:24:48,400 --> 00:24:52,400
but the really cool feature is down here

00:24:50,559 --> 00:24:55,440
at the bottom

00:24:52,400 --> 00:24:56,240
the replica sets have built-in support

00:24:55,440 --> 00:24:59,520
for what we call

00:24:56,240 --> 00:25:00,640
horizontal pod auto scaling so if we

00:24:59,520 --> 00:25:04,320
look down here

00:25:00,640 --> 00:25:08,240
let me interpret this for you um

00:25:04,320 --> 00:25:08,880
we can say listen we want you to auto

00:25:08,240 --> 00:25:11,840
scale

00:25:08,880 --> 00:25:13,120
start from three go up to as many as

00:25:11,840 --> 00:25:14,880
seven copies

00:25:13,120 --> 00:25:17,520
and do it when the cpu percent

00:25:14,880 --> 00:25:19,840
utilization hits eighty percent

00:25:17,520 --> 00:25:21,279
this is a wonderful feature because if

00:25:19,840 --> 00:25:24,400
you've ever seen any of the cloud

00:25:21,279 --> 00:25:26,240
platforms that existed before kubernetes

00:25:24,400 --> 00:25:28,159
anytime you wanted to do auto scaling

00:25:26,240 --> 00:25:30,720
you were typically building your own

00:25:28,159 --> 00:25:32,480
auto scaling capabilities or building

00:25:30,720 --> 00:25:35,200
your own fault tolerant

00:25:32,480 --> 00:25:37,279
robustness capabilities the beauty of

00:25:35,200 --> 00:25:39,760
kubernetes is it's all built in

00:25:37,279 --> 00:25:42,559
you don't have to roll your own and so

00:25:39,760 --> 00:25:44,640
this is incredibly powerful

00:25:42,559 --> 00:25:46,159
now you think replica sets are great i'm

00:25:44,640 --> 00:25:47,760
going to use those a lot

00:25:46,159 --> 00:25:49,600
brad just showed me the power i can't

00:25:47,760 --> 00:25:51,919
wait to use replica sets

00:25:49,600 --> 00:25:52,640
the truth is you're never going to use

00:25:51,919 --> 00:25:54,559
them

00:25:52,640 --> 00:25:56,159
well why am i not going to use them they

00:25:54,559 --> 00:25:58,159
seem really powerful

00:25:56,159 --> 00:26:00,720
well the beauty is is there is another

00:25:58,159 --> 00:26:03,440
type of resource that kubernetes has

00:26:00,720 --> 00:26:05,440
that's just like a replica set and does

00:26:03,440 --> 00:26:05,760
all the work that a replica set does for

00:26:05,440 --> 00:26:08,720
you

00:26:05,760 --> 00:26:10,080
managing multiple copies of your pods

00:26:08,720 --> 00:26:13,520
but it also gives you

00:26:10,080 --> 00:26:16,320
great support for managing the release

00:26:13,520 --> 00:26:17,679
of new versions of your container

00:26:16,320 --> 00:26:20,159
application

00:26:17,679 --> 00:26:22,720
so right remember life cycles aren't

00:26:20,159 --> 00:26:25,919
just we we get things deployed once

00:26:22,720 --> 00:26:28,480
we're typically having to deploy new

00:26:25,919 --> 00:26:29,279
copies of things right new versions of

00:26:28,480 --> 00:26:31,120
things

00:26:29,279 --> 00:26:33,279
and so that's what the deployment

00:26:31,120 --> 00:26:36,000
resource allows us to do

00:26:33,279 --> 00:26:38,240
in fact we can look at the the visual

00:26:36,000 --> 00:26:38,799
over here in the bottom left really you

00:26:38,240 --> 00:26:42,159
can see

00:26:38,799 --> 00:26:44,880
with the deployment we've got actual

00:26:42,159 --> 00:26:45,600
multiple replica sets where there's

00:26:44,880 --> 00:26:48,720
different

00:26:45,600 --> 00:26:50,720
versions of our application running and

00:26:48,720 --> 00:26:53,600
we get to worry about

00:26:50,720 --> 00:26:55,360
how we deploy the new version right so

00:26:53,600 --> 00:26:57,840
we can deploy it slowly

00:26:55,360 --> 00:26:59,520
we can maybe just put one new pod out

00:26:57,840 --> 00:27:00,480
there and while all the old pods are

00:26:59,520 --> 00:27:03,600
still running

00:27:00,480 --> 00:27:05,600
and see if anything breaks or we can do

00:27:03,600 --> 00:27:06,559
what's called a blue green deployment

00:27:05,600 --> 00:27:08,880
where

00:27:06,559 --> 00:27:10,240
let's say we've got three copies of the

00:27:08,880 --> 00:27:12,559
old version

00:27:10,240 --> 00:27:13,840
and we're going to first bring up three

00:27:12,559 --> 00:27:16,640
whole new copies

00:27:13,840 --> 00:27:18,080
of the new version before we get rid of

00:27:16,640 --> 00:27:19,200
the old one that's called a blue green

00:27:18,080 --> 00:27:21,440
deployment

00:27:19,200 --> 00:27:22,640
the kubernetes deployment capabilities

00:27:21,440 --> 00:27:25,440
allows us

00:27:22,640 --> 00:27:26,480
to do all of that and through a simple

00:27:25,440 --> 00:27:29,200
declaration

00:27:26,480 --> 00:27:31,520
and and we'll go through this and what

00:27:29,200 --> 00:27:34,480
this looks like

00:27:31,520 --> 00:27:34,799
again just to show you we can still do

00:27:34,480 --> 00:27:36,559
it

00:27:34,799 --> 00:27:39,440
we can change the number of replicas

00:27:36,559 --> 00:27:42,640
from say three to six that still works

00:27:39,440 --> 00:27:43,760
um and you know at the bottom here

00:27:42,640 --> 00:27:46,720
you'll see that we still

00:27:43,760 --> 00:27:48,080
are able to like a replica set describe

00:27:46,720 --> 00:27:50,000
what our containers are

00:27:48,080 --> 00:27:52,880
and what their labels are so we do all

00:27:50,000 --> 00:27:54,240
that and our deployment has its labels

00:27:52,880 --> 00:27:56,720
as well

00:27:54,240 --> 00:27:58,559
so all that's still good but now we've

00:27:56,720 --> 00:28:02,320
got some new values

00:27:58,559 --> 00:28:05,600
um how to do our rolling updates so

00:28:02,320 --> 00:28:08,559
we get to tell it our surge value

00:28:05,600 --> 00:28:11,360
and what can be unavailable and so a

00:28:08,559 --> 00:28:14,799
surge value tells us things like

00:28:11,360 --> 00:28:18,080
okay well we started with say

00:28:14,799 --> 00:28:20,240
let's say we've got six copies um and we

00:28:18,080 --> 00:28:24,080
want to update all six

00:28:20,240 --> 00:28:26,159
well we could also have surge value of

00:28:24,080 --> 00:28:27,840
here's some extra copies that make it

00:28:26,159 --> 00:28:30,799
easier to upgrade

00:28:27,840 --> 00:28:31,840
so i don't have to sort of only have a

00:28:30,799 --> 00:28:34,640
total of six

00:28:31,840 --> 00:28:36,880
let's say my surge value is two i can

00:28:34,640 --> 00:28:40,080
have now a total of eight copies

00:28:36,880 --> 00:28:41,760
where say at any given time you know

00:28:40,080 --> 00:28:43,200
more and more of those eight copies are

00:28:41,760 --> 00:28:46,080
the newer version

00:28:43,200 --> 00:28:47,919
compared to the old version i also can

00:28:46,080 --> 00:28:50,000
say how many are unavailable

00:28:47,919 --> 00:28:51,600
and so if i want to be i can tell

00:28:50,000 --> 00:28:53,360
kubernetes listen you can't make too

00:28:51,600 --> 00:28:54,559
many of these copies unavailable while

00:28:53,360 --> 00:28:55,279
you're trying to roll out the new

00:28:54,559 --> 00:28:56,480
version

00:28:55,279 --> 00:28:58,960
because that's really going to hurt my

00:28:56,480 --> 00:29:01,279
performance so

00:28:58,960 --> 00:29:03,279
i get to say listen maybe at most one

00:29:01,279 --> 00:29:06,080
copy should be unavailable

00:29:03,279 --> 00:29:07,679
and between those tools and then some

00:29:06,080 --> 00:29:09,919
deployment commands

00:29:07,679 --> 00:29:11,919
you have a lot of power and flexibility

00:29:09,919 --> 00:29:13,440
of how you deploy the new version of

00:29:11,919 --> 00:29:14,240
your application and get it up and

00:29:13,440 --> 00:29:17,039
running

00:29:14,240 --> 00:29:19,120
so if you look at the bottom here i can

00:29:17,039 --> 00:29:21,120
i can pause the deployment

00:29:19,120 --> 00:29:22,799
i can resume the deployment i can check

00:29:21,120 --> 00:29:24,000
the history of how it's deploying the

00:29:22,799 --> 00:29:26,240
new copies

00:29:24,000 --> 00:29:27,840
so there's an amazing a lot of power in

00:29:26,240 --> 00:29:30,960
what's going on there

00:29:27,840 --> 00:29:32,320
and as it rolls out new versions using

00:29:30,960 --> 00:29:36,000
the deployment

00:29:32,320 --> 00:29:38,480
constraint resource

00:29:36,000 --> 00:29:41,039
um so now we've shown that we have some

00:29:38,480 --> 00:29:43,760
great kubernetes capabilities to

00:29:41,039 --> 00:29:46,240
manage multiple copies of my application

00:29:43,760 --> 00:29:49,279
it can also worry about

00:29:46,240 --> 00:29:51,520
deploying new versions of my application

00:29:49,279 --> 00:29:53,520
but it's also got what's called a is a

00:29:51,520 --> 00:29:55,360
kubernetes service object

00:29:53,520 --> 00:29:57,760
and basically it's got a built-in load

00:29:55,360 --> 00:29:59,200
balancer and you might ask yourself

00:29:57,760 --> 00:30:01,120
why does it need a built-in load

00:29:59,200 --> 00:30:02,240
balancer there's a lot of load balancers

00:30:01,120 --> 00:30:04,720
out there

00:30:02,240 --> 00:30:05,360
well again remember kubernetes always

00:30:04,720 --> 00:30:07,440
assume

00:30:05,360 --> 00:30:08,399
already assumes that your pods will be

00:30:07,440 --> 00:30:10,399
up and running

00:30:08,399 --> 00:30:12,080
and then they're probably going to crash

00:30:10,399 --> 00:30:13,760
or even a server is going to crash that

00:30:12,080 --> 00:30:15,600
the pod runs on

00:30:13,760 --> 00:30:17,279
and it's going to be responsible for

00:30:15,600 --> 00:30:20,399
starting up new copies

00:30:17,279 --> 00:30:22,000
of your pods of your application on

00:30:20,399 --> 00:30:24,799
different server nodes

00:30:22,000 --> 00:30:25,120
and so it needs to keep track of really

00:30:24,799 --> 00:30:26,799
where

00:30:25,120 --> 00:30:28,960
your pods are running because where they

00:30:26,799 --> 00:30:30,880
run over time is going to change

00:30:28,960 --> 00:30:32,240
and a standard load balancer doesn't

00:30:30,880 --> 00:30:34,080
know how to do that

00:30:32,240 --> 00:30:36,080
stated loan balancer doesn't worry about

00:30:34,080 --> 00:30:38,559
those issues so kubernetes

00:30:36,080 --> 00:30:39,600
provides a built-in one called a service

00:30:38,559 --> 00:30:42,480
object

00:30:39,600 --> 00:30:44,240
it's um assigned a virtual ip address

00:30:42,480 --> 00:30:47,440
called a cluster ip

00:30:44,240 --> 00:30:50,480
and through that ip address um

00:30:47,440 --> 00:30:52,720
you can get to any one of the copies of

00:30:50,480 --> 00:30:55,600
your application pods

00:30:52,720 --> 00:30:57,279
and um that cluster ip address is stable

00:30:55,600 --> 00:30:58,000
enough you can actually hand it over to

00:30:57,279 --> 00:31:00,880
a real

00:30:58,000 --> 00:31:01,360
load balancer a real one and so you get

00:31:00,880 --> 00:31:03,679
all

00:31:01,360 --> 00:31:05,519
you know you know a dns service can

00:31:03,679 --> 00:31:08,159
expose your pods

00:31:05,519 --> 00:31:08,880
again the readiness checks are built in

00:31:08,159 --> 00:31:11,120
so

00:31:08,880 --> 00:31:13,200
um it's smart enough through its load

00:31:11,120 --> 00:31:15,360
balancer to only send traffic to the

00:31:13,200 --> 00:31:18,159
pods that are up and running

00:31:15,360 --> 00:31:19,760
um and it's really simple to use again

00:31:18,159 --> 00:31:22,880
here's a simple command to create

00:31:19,760 --> 00:31:23,840
an nginx deployment with three replicas

00:31:22,880 --> 00:31:26,000
and so we're going to create a

00:31:23,840 --> 00:31:27,200
deployment and one real simple command

00:31:26,000 --> 00:31:29,360
here

00:31:27,200 --> 00:31:30,399
and then we can create a service for

00:31:29,360 --> 00:31:32,960
that deployment

00:31:30,399 --> 00:31:34,320
and we can even say the load balancers

00:31:32,960 --> 00:31:36,080
running on port 80

00:31:34,320 --> 00:31:37,600
and connecting to the containers that

00:31:36,080 --> 00:31:40,559
run on port 8000

00:31:37,600 --> 00:31:43,600
by doing a kube control expose command

00:31:40,559 --> 00:31:45,440
which will expose the deployment

00:31:43,600 --> 00:31:47,600
and expose and create that service

00:31:45,440 --> 00:31:50,080
object for all our pods

00:31:47,600 --> 00:31:50,799
so kubernetes service objects are very

00:31:50,080 --> 00:31:54,080
powerful

00:31:50,799 --> 00:31:54,080
and they help us do that

00:31:54,559 --> 00:31:58,320
one of the great things about kubernetes

00:31:56,320 --> 00:32:01,679
is that declarative model

00:31:58,320 --> 00:32:04,799
so so so what happens is

00:32:01,679 --> 00:32:06,480
the yaml files are declarative and

00:32:04,799 --> 00:32:08,480
if you're used to using containers and

00:32:06,480 --> 00:32:11,200
docker files well the docker files

00:32:08,480 --> 00:32:12,960
describe how to build your docker images

00:32:11,200 --> 00:32:14,799
your container images

00:32:12,960 --> 00:32:16,720
and so next thing you realize is pretty

00:32:14,799 --> 00:32:19,039
much everything you have

00:32:16,720 --> 00:32:20,799
you can describe in configuration or

00:32:19,039 --> 00:32:21,919
declarative files whether it's the

00:32:20,799 --> 00:32:25,279
docker

00:32:21,919 --> 00:32:26,159
file or the kubernetes declarative yaml

00:32:25,279 --> 00:32:29,200
files

00:32:26,159 --> 00:32:31,039
so what does that mean it means now you

00:32:29,200 --> 00:32:31,840
can control all your configuration

00:32:31,039 --> 00:32:34,559
changes

00:32:31,840 --> 00:32:36,240
you can put all that in a source control

00:32:34,559 --> 00:32:39,200
right you can put that all in a repo

00:32:36,240 --> 00:32:39,519
or what have you and now you can you can

00:32:39,200 --> 00:32:42,320
do

00:32:39,519 --> 00:32:43,039
continuous delivery because you can push

00:32:42,320 --> 00:32:44,480
changes to

00:32:43,039 --> 00:32:46,080
repo that are not only for your

00:32:44,480 --> 00:32:48,080
application but

00:32:46,080 --> 00:32:49,840
that also describe how your application

00:32:48,080 --> 00:32:50,640
is configured and deployed through the

00:32:49,840 --> 00:32:54,080
docker com

00:32:50,640 --> 00:32:56,000
docker files and the yaml files and now

00:32:54,080 --> 00:32:59,200
we've got a model where we can really do

00:32:56,000 --> 00:33:00,720
continuous delivery um

00:32:59,200 --> 00:33:02,720
continuous integration and continuous

00:33:00,720 --> 00:33:04,240
delivery and this is really powerful

00:33:02,720 --> 00:33:06,399
it's one of the neatest features that

00:33:04,240 --> 00:33:07,679
you get by moving from

00:33:06,399 --> 00:33:10,240
you know how we used to do it in the

00:33:07,679 --> 00:33:12,159
olden days the old days we would use

00:33:10,240 --> 00:33:13,519
say you know you had your virtual

00:33:12,159 --> 00:33:15,279
machines maybe you were running

00:33:13,519 --> 00:33:16,080
openstack and you were using chef or

00:33:15,279 --> 00:33:18,880
puffit

00:33:16,080 --> 00:33:20,720
puppet and you had all these scripts and

00:33:18,880 --> 00:33:21,600
so you'd have to go read the scripts to

00:33:20,720 --> 00:33:24,080
really understand

00:33:21,600 --> 00:33:26,000
how things were working here now you can

00:33:24,080 --> 00:33:28,080
just go read the declarative files

00:33:26,000 --> 00:33:29,679
and they're all stored and you can see

00:33:28,080 --> 00:33:31,440
what changes are made

00:33:29,679 --> 00:33:33,120
and so now we can look at continuous

00:33:31,440 --> 00:33:35,279
delivery capabilities where we're going

00:33:33,120 --> 00:33:37,440
to have small batch changes

00:33:35,279 --> 00:33:40,240
we're going to source control all these

00:33:37,440 --> 00:33:42,559
code and configuration files

00:33:40,240 --> 00:33:44,720
and as a result of all this the

00:33:42,559 --> 00:33:46,720
developers are going to have access to

00:33:44,720 --> 00:33:48,720
production-like environments

00:33:46,720 --> 00:33:50,640
thanks to the containers bringing all

00:33:48,720 --> 00:33:53,039
the libraries with them

00:33:50,640 --> 00:33:54,240
and we can expose early on in the

00:33:53,039 --> 00:33:57,200
development process

00:33:54,240 --> 00:33:58,399
logging and change management and do a

00:33:57,200 --> 00:33:59,039
continuous integration of all the

00:33:58,399 --> 00:34:01,519
changes

00:33:59,039 --> 00:34:04,080
and the result of all of this is you

00:34:01,519 --> 00:34:07,360
really can start talking about devops

00:34:04,080 --> 00:34:08,800
and doing continuous delivery um and you

00:34:07,360 --> 00:34:11,040
know that's not for this

00:34:08,800 --> 00:34:13,599
this this presentation but just to

00:34:11,040 --> 00:34:15,760
understand that this now becomes capable

00:34:13,599 --> 00:34:16,800
because we've gone to this declarative

00:34:15,760 --> 00:34:18,639
model

00:34:16,800 --> 00:34:20,000
um so a lot to learn on those

00:34:18,639 --> 00:34:23,520
capabilities and

00:34:20,000 --> 00:34:23,520
it makes life really interesting

00:34:24,000 --> 00:34:30,240
again kubernetes one of the key features

00:34:27,440 --> 00:34:30,560
is auto scaling there's some simple code

00:34:30,240 --> 00:34:32,800
here

00:34:30,560 --> 00:34:34,159
on the right where we get our

00:34:32,800 --> 00:34:37,520
application up and running

00:34:34,159 --> 00:34:39,679
we expose the service we then declare

00:34:37,520 --> 00:34:41,280
the auto scaling that we want we're

00:34:39,679 --> 00:34:43,839
going to start with one node

00:34:41,280 --> 00:34:46,000
a minimum go up to 10 if cpu percent

00:34:43,839 --> 00:34:47,520
utilization hits 80 percent

00:34:46,000 --> 00:34:50,560
and then the bottom here is a little

00:34:47,520 --> 00:34:52,320
command to generate some artificial load

00:34:50,560 --> 00:34:54,159
and you could actually run this and you

00:34:52,320 --> 00:34:56,159
can see kubernetes over time will

00:34:54,159 --> 00:34:58,240
respond to the load and start up new

00:34:56,159 --> 00:35:02,000
copies of your application

00:34:58,240 --> 00:35:04,160
um to to to support the auto scaling

00:35:02,000 --> 00:35:05,920
and so that's the the horizontal auto

00:35:04,160 --> 00:35:07,920
scaling there's other ways to scale as

00:35:05,920 --> 00:35:10,000
well but sort of beyond this came uh

00:35:07,920 --> 00:35:12,640
beyond this presentation but again a

00:35:10,000 --> 00:35:12,640
great feature

00:35:12,880 --> 00:35:19,839
and um we're getting close to time here

00:35:16,240 --> 00:35:23,440
we'll get a little bit of time um but

00:35:19,839 --> 00:35:26,800
um we've also got free material

00:35:23,440 --> 00:35:29,200
um free material on on

00:35:26,800 --> 00:35:31,359
how to learn uh kubernetes and so we

00:35:29,200 --> 00:35:33,200
have some free courses available

00:35:31,359 --> 00:35:34,480
so these are courses you can take you

00:35:33,200 --> 00:35:38,000
can earn a badge

00:35:34,480 --> 00:35:39,040
you can can learn about um what's going

00:35:38,000 --> 00:35:42,960
on

00:35:39,040 --> 00:35:44,240
and go earn your badge um

00:35:42,960 --> 00:35:46,320
now let's say you also want to go a

00:35:44,240 --> 00:35:47,280
little bit farther maybe you've learned

00:35:46,320 --> 00:35:48,240
kubernetes

00:35:47,280 --> 00:35:50,320
and maybe you want to become a

00:35:48,240 --> 00:35:51,839
kubernetes contributor

00:35:50,320 --> 00:35:54,800
so now you want to learn how to be an

00:35:51,839 --> 00:35:58,240
open source contributor for kubernetes

00:35:54,800 --> 00:36:01,520
um we actually ibm provide a

00:35:58,240 --> 00:36:04,320
free digital developer conference

00:36:01,520 --> 00:36:05,599
course that is available at the link

00:36:04,320 --> 00:36:09,280
below

00:36:05,599 --> 00:36:12,400
and what we did is

00:36:09,280 --> 00:36:15,040
we went and had an initiative where we

00:36:12,400 --> 00:36:15,680
wanted to train a large number of ibmers

00:36:15,040 --> 00:36:18,880
to become

00:36:15,680 --> 00:36:20,880
open source uh kubernetes contributors

00:36:18,880 --> 00:36:22,960
and become influential contributors

00:36:20,880 --> 00:36:24,720
become kubernetes maintainers

00:36:22,960 --> 00:36:26,000
and so we have what was called the dojo

00:36:24,720 --> 00:36:30,079
training course

00:36:26,000 --> 00:36:33,359
that we used to fly around all the labs

00:36:30,079 --> 00:36:35,520
and train uh ibm's on how to

00:36:33,359 --> 00:36:37,520
become a kubernetes open source

00:36:35,520 --> 00:36:40,560
contributor

00:36:37,520 --> 00:36:44,880
and these are very skills and and

00:36:40,560 --> 00:36:46,800
demand um and yeah i see we will make

00:36:44,880 --> 00:36:47,599
sure i'll get this whole presentation

00:36:46,800 --> 00:36:51,359
shared

00:36:47,599 --> 00:36:54,240
so um you'll get all the links uh javier

00:36:51,359 --> 00:36:55,920
javier uh from from the presentation um

00:36:54,240 --> 00:36:57,520
i'll i'll work with the moderator to

00:36:55,920 --> 00:36:58,800
make sure we get the whole presentation

00:36:57,520 --> 00:37:01,280
shared um

00:36:58,800 --> 00:37:02,800
you can also just take a quick snapshot

00:37:01,280 --> 00:37:03,680
for the few urls if you're really

00:37:02,800 --> 00:37:06,240
interested there's a

00:37:03,680 --> 00:37:08,560
few key ones but um so feel free to take

00:37:06,240 --> 00:37:10,640
a snapshot um

00:37:08,560 --> 00:37:12,800
and again why this is great so we were

00:37:10,640 --> 00:37:15,119
we were going to go travel the world

00:37:12,800 --> 00:37:16,800
and go go to each lab we'd spend a week

00:37:15,119 --> 00:37:19,200
training with our with our top

00:37:16,800 --> 00:37:20,640
experts fly them in but guess what

00:37:19,200 --> 00:37:22,800
happened covid hit

00:37:20,640 --> 00:37:24,000
and so that original plan had to be

00:37:22,800 --> 00:37:25,839
scrapped

00:37:24,000 --> 00:37:27,520
and so what we did is well we can't

00:37:25,839 --> 00:37:28,160
travel everywhere but we still need to

00:37:27,520 --> 00:37:30,560
ramp up

00:37:28,160 --> 00:37:32,800
our kubernetes contributors let's make

00:37:30,560 --> 00:37:36,000
this a digital conference

00:37:32,800 --> 00:37:38,400
and we actually recorded all our top

00:37:36,000 --> 00:37:39,839
contributors for the top areas of

00:37:38,400 --> 00:37:42,560
kubernetes

00:37:39,839 --> 00:37:44,560
giving educational presentations for a

00:37:42,560 --> 00:37:46,880
variety of topics

00:37:44,560 --> 00:37:48,560
and we actually did it live so there's

00:37:46,880 --> 00:37:51,040
actually people in the audience

00:37:48,560 --> 00:37:52,960
of the virtual audience and asking the

00:37:51,040 --> 00:37:54,320
questions so you can go through the same

00:37:52,960 --> 00:37:57,599
digital course

00:37:54,320 --> 00:38:00,720
and it starts out with things like

00:37:57,599 --> 00:38:03,119
an overview of kubernetes it then talks

00:38:00,720 --> 00:38:05,760
about the kubernetes community and the

00:38:03,119 --> 00:38:07,760
contributor resources you can find there

00:38:05,760 --> 00:38:08,800
we also teach you how to do git and

00:38:07,760 --> 00:38:11,200
github

00:38:08,800 --> 00:38:12,320
so you know some people are different

00:38:11,200 --> 00:38:13,920
levels in their journey

00:38:12,320 --> 00:38:15,599
if you're not really good at git and

00:38:13,920 --> 00:38:16,880
github and how to use it we teach you

00:38:15,599 --> 00:38:19,119
how to do that

00:38:16,880 --> 00:38:22,240
we also show you how to set up a

00:38:19,119 --> 00:38:24,079
kubernetes development environment

00:38:22,240 --> 00:38:26,800
and then we'll walk you through actually

00:38:24,079 --> 00:38:28,079
many of the kubernetes main repositories

00:38:26,800 --> 00:38:29,760
we'll show you how the kubernetes

00:38:28,079 --> 00:38:31,119
community does their pull request

00:38:29,760 --> 00:38:32,400
workflow

00:38:31,119 --> 00:38:34,800
we're going to teach you how to do test

00:38:32,400 --> 00:38:36,960
driven development we'll teach you

00:38:34,800 --> 00:38:38,560
how to grow your eminence right so we'll

00:38:36,960 --> 00:38:39,920
teach you things how to behave in an

00:38:38,560 --> 00:38:42,000
open source community

00:38:39,920 --> 00:38:43,680
a lot of it comes down to don't be a

00:38:42,000 --> 00:38:46,160
jerk be nice to people

00:38:43,680 --> 00:38:47,680
be healthful try and do things in the

00:38:46,160 --> 00:38:49,200
community that aren't necessarily

00:38:47,680 --> 00:38:52,160
glamorous jobs

00:38:49,200 --> 00:38:54,880
but how to do things that that that

00:38:52,160 --> 00:38:57,359
people find valuable like bug triage

00:38:54,880 --> 00:38:58,720
or fixing documentation we like to call

00:38:57,359 --> 00:39:01,359
that chopping wood

00:38:58,720 --> 00:39:03,520
and carrying water so we talk about how

00:39:01,359 --> 00:39:05,280
to be a great contributor

00:39:03,520 --> 00:39:06,640
these are all videos under videos that

00:39:05,280 --> 00:39:08,640
you can go watch

00:39:06,640 --> 00:39:10,160
we show you how to do the pull request

00:39:08,640 --> 00:39:11,440
and then on the last day we've got all

00:39:10,160 --> 00:39:12,720
the advanced stuff

00:39:11,440 --> 00:39:15,359
if you want to learn everything you want

00:39:12,720 --> 00:39:18,000
to learn about kubernetes schedulers

00:39:15,359 --> 00:39:20,160
kubernetes networking kubernetes storage

00:39:18,000 --> 00:39:25,200
kubernetes extensibility

00:39:20,160 --> 00:39:29,200
all of that is is available and

00:39:25,200 --> 00:39:31,359
capable for for how to do things

00:39:29,200 --> 00:39:34,320
so uh feel free to check this out if you

00:39:31,359 --> 00:39:37,599
want to be an open source contributor

00:39:34,320 --> 00:39:40,800
um i also have a free book available

00:39:37,599 --> 00:39:42,800
so um in the before time

00:39:40,800 --> 00:39:44,960
and hopefully we get back to it soon but

00:39:42,800 --> 00:39:46,000
i you know i've been a frequent uh

00:39:44,960 --> 00:39:49,200
presenter

00:39:46,000 --> 00:39:50,960
at the um the all things open family of

00:39:49,200 --> 00:39:52,480
conferences whether it's all things open

00:39:50,960 --> 00:39:55,359
or open source 101

00:39:52,480 --> 00:39:57,920
and next year hopefully when we uh get

00:39:55,359 --> 00:40:00,560
to be doing these in person

00:39:57,920 --> 00:40:02,400
we typically hand out typically do a

00:40:00,560 --> 00:40:05,440
book sign and hand out free copies

00:40:02,400 --> 00:40:08,480
of my kubernetes book

00:40:05,440 --> 00:40:11,040
and it is available online

00:40:08,480 --> 00:40:12,400
so you can at least get it there and

00:40:11,040 --> 00:40:14,400
hopefully next year

00:40:12,400 --> 00:40:16,800
we'll have copies to hand out and we'll

00:40:14,400 --> 00:40:18,800
be able to do signing copies as well

00:40:16,800 --> 00:40:20,880
but um a lot of what i've covered this

00:40:18,800 --> 00:40:23,920
presentation is covered in this book

00:40:20,880 --> 00:40:25,680
it's available complements of ibm um

00:40:23,920 --> 00:40:28,319
also got a new book coming out

00:40:25,680 --> 00:40:28,720
um on advanced kubernetes uh the red hat

00:40:28,319 --> 00:40:31,599
the

00:40:28,720 --> 00:40:33,599
version of kubernetes that's enterprise

00:40:31,599 --> 00:40:34,640
and very secure called openshift but

00:40:33,599 --> 00:40:36,240
that's uh

00:40:34,640 --> 00:40:38,800
you know a couple months away so i'm not

00:40:36,240 --> 00:40:40,880
going to highlight that here

00:40:38,800 --> 00:40:42,800
so we'll make sure we get all of this

00:40:40,880 --> 00:40:46,880
out and available

00:40:42,800 --> 00:40:49,760
and you know in summary

00:40:46,880 --> 00:40:51,359
again kubernetes has become the de facto

00:40:49,760 --> 00:40:52,880
standard for orchestration and

00:40:51,359 --> 00:40:53,839
management of container-based

00:40:52,880 --> 00:40:57,040
cloud-native

00:40:53,839 --> 00:40:57,680
computing applications it continues to

00:40:57,040 --> 00:41:00,319
experience

00:40:57,680 --> 00:41:01,760
rapid growth and adoption it's got this

00:41:00,319 --> 00:41:03,920
declarative model

00:41:01,760 --> 00:41:05,680
that we talked about it's got built-in

00:41:03,920 --> 00:41:09,119
support for auto scaling

00:41:05,680 --> 00:41:10,800
it's got a fantastic networking model so

00:41:09,119 --> 00:41:13,280
that was one of the key advantages that

00:41:10,800 --> 00:41:15,359
kubernetes had is each pod has its own

00:41:13,280 --> 00:41:16,880
ip address and that model worked really

00:41:15,359 --> 00:41:18,880
well for people

00:41:16,880 --> 00:41:20,240
again health check support great open

00:41:18,880 --> 00:41:23,520
governance and

00:41:20,240 --> 00:41:23,920
some great links you can go try um lots

00:41:23,520 --> 00:41:26,160
of

00:41:23,920 --> 00:41:27,359
lots of places give you free access to

00:41:26,160 --> 00:41:29,599
kubernetes

00:41:27,359 --> 00:41:32,000
um the ibm cloud will give you a free

00:41:29,599 --> 00:41:32,880
trial kubernetes a onenote cluster you

00:41:32,000 --> 00:41:35,280
can register

00:41:32,880 --> 00:41:36,319
and and kick the tires and try all these

00:41:35,280 --> 00:41:38,880
commands

00:41:36,319 --> 00:41:40,800
um and then we showed you um the courses

00:41:38,880 --> 00:41:42,480
that are uh provide you in a test

00:41:40,800 --> 00:41:45,520
environment as well

00:41:42,480 --> 00:41:48,319
um so that's uh

00:41:45,520 --> 00:41:51,440
pretty much it for our 101 material um

00:41:48,319 --> 00:41:54,000
we've covered a lot of the basics

00:41:51,440 --> 00:41:55,040
and this is really a good time for

00:41:54,000 --> 00:41:56,160
questions

00:41:55,040 --> 00:41:58,640
just got a few minutes left for

00:41:56,160 --> 00:41:58,640
questions

00:41:59,119 --> 00:42:03,119
thank you brad that is and super

00:42:01,839 --> 00:42:05,119
interesting one

00:42:03,119 --> 00:42:06,400
yep and maybe everyone would be more

00:42:05,119 --> 00:42:09,839
interested in

00:42:06,400 --> 00:42:13,359
getting the book and uh studying it

00:42:09,839 --> 00:42:15,920
running some examples from that yeah

00:42:13,359 --> 00:42:16,480
and and and so i need to work with you

00:42:15,920 --> 00:42:19,680
on

00:42:16,480 --> 00:42:22,400
how we get the the presentation

00:42:19,680 --> 00:42:22,880
um the other um and once we figure that

00:42:22,400 --> 00:42:25,839
out i

00:42:22,880 --> 00:42:27,520
i am available on twitter at brad topple

00:42:25,839 --> 00:42:29,359
and i'll be happy to tweet that out as

00:42:27,520 --> 00:42:30,160
well but ota do you know how we are able

00:42:29,359 --> 00:42:32,079
to

00:42:30,160 --> 00:42:33,599
uh get what's the best way we're making

00:42:32,079 --> 00:42:34,720
the presentations available for the

00:42:33,599 --> 00:42:38,000
conference

00:42:34,720 --> 00:42:42,240
yeah maybe the chair uh would

00:42:38,000 --> 00:42:43,520
email you asking uh to share and then

00:42:42,240 --> 00:42:45,280
somebody will just post it on the

00:42:43,520 --> 00:42:48,640
website for the

00:42:45,280 --> 00:42:51,440
attendees to get it from there right

00:42:48,640 --> 00:42:52,640
so we'll make sure to um get that

00:42:51,440 --> 00:42:55,760
available

00:42:52,640 --> 00:42:57,599
and um the other thing is

00:42:55,760 --> 00:42:59,920
if you want to follow me on if you want

00:42:57,599 --> 00:43:04,040
to contact me on twitter

00:42:59,920 --> 00:43:07,040
or i'm available at btopel

00:43:04,040 --> 00:43:07,040
us.ibm.com

00:43:08,440 --> 00:43:13,440
btopol.us.ibm.com

00:43:10,000 --> 00:43:14,960
and if you want to connect uh you

00:43:13,440 --> 00:43:17,040
or you just click me on twitter i'll we

00:43:14,960 --> 00:43:19,200
can dm each other i'll i'll be happy

00:43:17,040 --> 00:43:20,400
to get your email address and i can you

00:43:19,200 --> 00:43:21,920
know i can

00:43:20,400 --> 00:43:24,400
be happy to email people copy the

00:43:21,920 --> 00:43:26,160
presentation as well so again available

00:43:24,400 --> 00:43:28,560
on twitter

00:43:26,160 --> 00:43:29,520
at brad topple is an easy way to get a

00:43:28,560 --> 00:43:32,400
hold of me i'm

00:43:29,520 --> 00:43:34,079
i'm very easy to get a hold of in fact

00:43:32,400 --> 00:43:35,920
you know i should have done this i'll

00:43:34,079 --> 00:43:38,839
type this in here too

00:43:35,920 --> 00:43:41,839
my bad folks so we'll do this in real

00:43:38,839 --> 00:43:41,839
time

00:43:43,040 --> 00:43:52,480
oh no horrible be tuple us.ibm.com

00:43:49,119 --> 00:43:54,079
and how's that so you can reach me

00:43:52,480 --> 00:43:54,480
either of those two ways and we'll make

00:43:54,079 --> 00:43:56,319
sure

00:43:54,480 --> 00:43:58,000
folks can get access one way or the

00:43:56,319 --> 00:43:59,359
other presentation always happy to share

00:43:58,000 --> 00:44:02,880
it

00:43:59,359 --> 00:44:04,720
okay uh we have last

00:44:02,880 --> 00:44:08,079
three minutes or a couple of more

00:44:04,720 --> 00:44:08,079
minutes to let's see

00:44:11,200 --> 00:44:15,200
someone was asking how agnostic is open

00:44:13,520 --> 00:44:17,680
shift in terms of what kubernetes just

00:44:15,200 --> 00:44:20,079
try to run it on

00:44:17,680 --> 00:44:21,200
okay so i see some questions here

00:44:20,079 --> 00:44:24,960
awesome

00:44:21,200 --> 00:44:28,079
so if a cluster is a collection of nodes

00:44:24,960 --> 00:44:30,079
what makes for a one node cluster

00:44:28,079 --> 00:44:32,000
a one node cluster is going to be

00:44:30,079 --> 00:44:34,240
essentially two servers

00:44:32,000 --> 00:44:36,160
two nodes one node you're running the

00:44:34,240 --> 00:44:37,839
master code um

00:44:36,160 --> 00:44:39,200
and we can talk about what that is that

00:44:37,839 --> 00:44:41,040
runs what's called the api

00:44:39,200 --> 00:44:42,480
server and then one and then one node's

00:44:41,040 --> 00:44:44,560
going to be the one node cluster is

00:44:42,480 --> 00:44:46,800
going to be the actual worker node

00:44:44,560 --> 00:44:48,480
and let me go to the architecture chart

00:44:46,800 --> 00:44:52,240
and we'll show the architecture chart

00:44:48,480 --> 00:44:53,119
so you a a a uh one node cluster would

00:44:52,240 --> 00:44:55,200
actually be

00:44:53,119 --> 00:44:56,240
the two clusters where we've got the

00:44:55,200 --> 00:44:59,440
master node

00:44:56,240 --> 00:45:02,480
and we've got the one worker node

00:44:59,440 --> 00:45:03,200
and um different parts of kubernetes run

00:45:02,480 --> 00:45:05,839
on each

00:45:03,200 --> 00:45:05,839
piece

00:45:06,240 --> 00:45:14,160
so what happens is is that

00:45:10,560 --> 00:45:16,000
the um the that yaml we talked about

00:45:14,160 --> 00:45:16,839
comes into the masternode and runs on

00:45:16,000 --> 00:45:20,000
the api

00:45:16,839 --> 00:45:23,520
server and the server then

00:45:20,000 --> 00:45:25,119
interprets it and what will happen is

00:45:23,520 --> 00:45:26,640
eventually you get down to the scheduler

00:45:25,119 --> 00:45:27,920
the scheduler is going to worry about

00:45:26,640 --> 00:45:30,800
which of the worker nodes

00:45:27,920 --> 00:45:32,000
the pods should run on and then over on

00:45:30,800 --> 00:45:33,920
the worker nodes there's a

00:45:32,000 --> 00:45:35,280
kubelet and that's a piece that actually

00:45:33,920 --> 00:45:36,560
is responsible for running those

00:45:35,280 --> 00:45:38,880
containers

00:45:36,560 --> 00:45:39,680
so um that's what makes for a one node

00:45:38,880 --> 00:45:42,960
cluster

00:45:39,680 --> 00:45:45,599
um anonymous attendee that would be one

00:45:42,960 --> 00:45:48,720
worker node and the masternode i hope

00:45:45,599 --> 00:45:48,720
that answers that question

00:45:49,119 --> 00:45:53,440
um okay how agnostic is openshift in

00:45:51,520 --> 00:45:54,560
terms of what kubernetes distro to run

00:45:53,440 --> 00:45:58,000
it on

00:45:54,560 --> 00:46:02,160
um so the beauty of openshift

00:45:58,000 --> 00:46:03,520
is it also like like kubernetes runs on

00:46:02,160 --> 00:46:06,480
all the platforms

00:46:03,520 --> 00:46:07,040
so openshift runs on azure openshift

00:46:06,480 --> 00:46:12,319
runs

00:46:07,040 --> 00:46:16,240
on um uh amazon openstuff runs on google

00:46:12,319 --> 00:46:19,440
openshift runs on ibm cloud

00:46:16,240 --> 00:46:23,200
so um what's nice about that

00:46:19,440 --> 00:46:26,319
is it gives you an even more advanced

00:46:23,200 --> 00:46:29,760
version of of

00:46:26,319 --> 00:46:31,119
what we'd call portability workload

00:46:29,760 --> 00:46:33,359
portability

00:46:31,119 --> 00:46:35,440
because you're guaranteed not only to

00:46:33,359 --> 00:46:39,040
have the same kubernetes environment

00:46:35,440 --> 00:46:41,520
but you're also guaranteed to have

00:46:39,040 --> 00:46:43,920
the same tools the same tools for

00:46:41,520 --> 00:46:46,400
continuous delivery

00:46:43,920 --> 00:46:48,000
and what have you now what openshift

00:46:46,400 --> 00:46:51,440
does it's a little bit different

00:46:48,000 --> 00:46:54,640
is a couple of things one openshift

00:46:51,440 --> 00:46:57,119
is gonna run a very secure

00:46:54,640 --> 00:46:59,200
kubernetes environment so if you run an

00:46:57,119 --> 00:47:02,000
enterprise if you run

00:46:59,200 --> 00:47:05,200
a bank if you run an insurance company

00:47:02,000 --> 00:47:07,520
and you need a very secure environment

00:47:05,200 --> 00:47:08,720
openshift is going to force your

00:47:07,520 --> 00:47:10,800
environment to be

00:47:08,720 --> 00:47:12,480
it's going gonna it is a kubernetes but

00:47:10,800 --> 00:47:15,359
it's kubernetes that out of the

00:47:12,480 --> 00:47:16,800
out of the um out of the box provides

00:47:15,359 --> 00:47:19,760
guard rails

00:47:16,800 --> 00:47:21,119
so it's gonna keep you from doing

00:47:19,760 --> 00:47:22,720
something that you're really gonna

00:47:21,119 --> 00:47:25,920
regret in the future

00:47:22,720 --> 00:47:27,760
so for example um

00:47:25,920 --> 00:47:30,640
kubernetes out of the box will let you

00:47:27,760 --> 00:47:32,240
run everything as a privileged container

00:47:30,640 --> 00:47:34,160
it doesn't care and if you want to run

00:47:32,240 --> 00:47:36,880
your containers as root

00:47:34,160 --> 00:47:38,079
and somehow the system gets compromised

00:47:36,880 --> 00:47:41,119
and somebody gets access

00:47:38,079 --> 00:47:44,000
to its application running route well

00:47:41,119 --> 00:47:45,680
that's kind of your problem

00:47:44,000 --> 00:47:47,280
open shift out of the box is going to

00:47:45,680 --> 00:47:48,480
say no i'm not going to let you do that

00:47:47,280 --> 00:47:49,839
i'm not going to let you down i'm going

00:47:48,480 --> 00:47:50,880
to make sure your developers are running

00:47:49,839 --> 00:47:54,079
containers that run

00:47:50,880 --> 00:47:56,480
non-privileged and so

00:47:54,079 --> 00:47:58,319
openshift is going to worry much more

00:47:56,480 --> 00:48:01,599
about making sure

00:47:58,319 --> 00:48:04,880
your your uh your your your

00:48:01,599 --> 00:48:07,040
kubernetes environment is very secure

00:48:04,880 --> 00:48:08,160
and if you do things that are kind of

00:48:07,040 --> 00:48:10,880
not what you do

00:48:08,160 --> 00:48:12,480
i say things that you're going to regret

00:48:10,880 --> 00:48:12,800
it's going to prevent you from doing

00:48:12,480 --> 00:48:14,559
that

00:48:12,800 --> 00:48:16,640
and your stuff's all going to run very

00:48:14,559 --> 00:48:17,200
secure the other thing that openshift

00:48:16,640 --> 00:48:20,160
gives you

00:48:17,200 --> 00:48:21,680
is is is a lot of tooling for folks that

00:48:20,160 --> 00:48:22,640
aren't really good with say docker

00:48:21,680 --> 00:48:24,079
commands

00:48:22,640 --> 00:48:26,240
people who don't know a lot about

00:48:24,079 --> 00:48:27,920
containers it's got what's called source

00:48:26,240 --> 00:48:30,160
to image and it's going to allow say

00:48:27,920 --> 00:48:33,200
like a java programmer or a jt

00:48:30,160 --> 00:48:34,079
j2e application programmer to get up and

00:48:33,200 --> 00:48:37,359
running

00:48:34,079 --> 00:48:39,920
and get their their code into a

00:48:37,359 --> 00:48:41,520
container and deployed much faster than

00:48:39,920 --> 00:48:44,240
if they got to learn all

00:48:41,520 --> 00:48:44,960
the deployment stuff themselves and and

00:48:44,240 --> 00:48:47,599
and not be

00:48:44,960 --> 00:48:48,079
in how to build an image and find a base

00:48:47,599 --> 00:48:50,960
image

00:48:48,079 --> 00:48:53,040
add their code merge it into a new image

00:48:50,960 --> 00:48:54,640
put it into a registry

00:48:53,040 --> 00:48:56,640
openshift is going to take care of all

00:48:54,640 --> 00:48:59,599
those details for you where vanilla

00:48:56,640 --> 00:49:01,760
kubernetes doesn't

00:48:59,599 --> 00:49:03,760
uh hopefully that answers that question

00:49:01,760 --> 00:49:08,000
how are we doing on time

00:49:03,760 --> 00:49:11,359
yeah uh we are done uh we're done oh wow

00:49:08,000 --> 00:49:14,640
and yeah we are right on time all right

00:49:11,359 --> 00:49:17,839
thank you everyone for attending this

00:49:14,640 --> 00:49:18,720
second uh in the row for technologies to

00:49:17,839 --> 00:49:22,079
track

00:49:18,720 --> 00:49:25,760
um the next session starts

00:49:22,079 --> 00:49:27,599
uh 2 45. thanks brad for the wonderful

00:49:25,760 --> 00:49:29,359
talk introducing kubernetes for all and

00:49:27,599 --> 00:49:32,480
we have a follow-up

00:49:29,359 --> 00:49:34,079
accumulative session by brent uh after

00:49:32,480 --> 00:49:36,240
this

00:49:34,079 --> 00:49:37,839
great yep and thank you everyone for

00:49:36,240 --> 00:49:39,520
attending feel free to connect with me

00:49:37,839 --> 00:49:41,520
by email or by twitter

00:49:39,520 --> 00:49:43,760
um if you have follow-up questions we'll

00:49:41,520 --> 00:49:45,520
happily point you to all the right uh

00:49:43,760 --> 00:49:46,960
you know the courses the free courses

00:49:45,520 --> 00:49:50,079
the free training

00:49:46,960 --> 00:49:51,599
and educational environments to get you

00:49:50,079 --> 00:49:59,359
up and running with kubernetes so thank

00:49:51,599 --> 00:49:59,359

YouTube URL: https://www.youtube.com/watch?v=TbpVg3JO86Y


