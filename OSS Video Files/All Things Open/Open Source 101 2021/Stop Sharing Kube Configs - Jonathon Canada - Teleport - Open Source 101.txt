Title: Stop Sharing Kube Configs - Jonathon Canada - Teleport - Open Source 101
Publication date: 2021-04-10
Playlist: Open Source 101 2021
Description: 
	Jonathon Canada, Solutions Engineer and Army Cyber Officer at Teleport, delivered the talk "Stop Sharing Kube Configs" at the Open Source 101 conference on Tuesday, March 30, 2021.

Abstract:
Stop sharing Kube configs! This talk will focus on how developers can use single sign-on (SSO) to receive a unique short-lived Kube config that is mapped to Kubernetes groups and/or Kubernetes users. The technologies that will be used and discussed include open-source Teleport, GitHub SSO, and native Kubernetes RBAC capabilities.

Jonathon on the internets:
Twitter: https://twitter.com/jondubc
LinkedIn: https://www.linkedin.com/in/jonathoncanada/
Captions: 
	00:00:05,120 --> 00:00:10,480
all right

00:00:07,600 --> 00:00:11,519
cool um yeah thank you for that

00:00:10,480 --> 00:00:14,559
introduction i'm

00:00:11,519 --> 00:00:17,440
i'm very excited to be talking about how

00:00:14,559 --> 00:00:20,560
to stop sharing cube configs

00:00:17,440 --> 00:00:23,439
right so uh it's it's very common you'll

00:00:20,560 --> 00:00:23,439
see it all the time

00:00:23,600 --> 00:00:28,000
many people or across a whole

00:00:26,400 --> 00:00:30,160
engineering team

00:00:28,000 --> 00:00:31,439
they might all be sharing the same cube

00:00:30,160 --> 00:00:34,559
config that

00:00:31,439 --> 00:00:36,559
does not expire everyone has access to

00:00:34,559 --> 00:00:40,320
be part of the system masters group

00:00:36,559 --> 00:00:42,559
or some kind of admin group not a lot of

00:00:40,320 --> 00:00:43,680
native kubernetes role-based access

00:00:42,559 --> 00:00:46,239
controls

00:00:43,680 --> 00:00:47,840
that are being used so what i'll be

00:00:46,239 --> 00:00:51,280
talking about is

00:00:47,840 --> 00:00:54,879
how you can use open source teleport to

00:00:51,280 --> 00:00:58,079
stop sharing cube configs and

00:00:54,879 --> 00:01:01,280
with teleport teleport will actually

00:00:58,079 --> 00:01:04,320
issue short-lived cube configs that

00:01:01,280 --> 00:01:05,199
are based on the role that you have

00:01:04,320 --> 00:01:08,080
within

00:01:05,199 --> 00:01:10,640
your organization also be talking about

00:01:08,080 --> 00:01:14,000
just in general best practices

00:01:10,640 --> 00:01:15,680
for securing kubernetes clusters and

00:01:14,000 --> 00:01:17,439
everything i'll be discussing is

00:01:15,680 --> 00:01:20,000
completely open source

00:01:17,439 --> 00:01:20,720
so every capability i show in teleport

00:01:20,000 --> 00:01:25,360
every

00:01:20,720 --> 00:01:27,759
tool i show is all fully open source

00:01:25,360 --> 00:01:29,280
so the agenda for what i'll be

00:01:27,759 --> 00:01:32,159
discussing today

00:01:29,280 --> 00:01:34,320
um i'm gonna start with just a very high

00:01:32,159 --> 00:01:38,000
level overview of security

00:01:34,320 --> 00:01:41,920
discussing things like attack surfaces

00:01:38,000 --> 00:01:44,159
security zero trust concepts

00:01:41,920 --> 00:01:46,560
i'll then move into speaking about using

00:01:44,159 --> 00:01:49,040
a unified access plane

00:01:46,560 --> 00:01:50,560
um or an access gateway for accessing

00:01:49,040 --> 00:01:53,439
infrastructure

00:01:50,560 --> 00:01:55,680
then i'll move into talking about data

00:01:53,439 --> 00:01:58,399
native our back capabilities

00:01:55,680 --> 00:02:00,320
within kubernetes i'll then provide an

00:01:58,399 --> 00:02:03,280
overview of my demo environment

00:02:00,320 --> 00:02:05,119
followed by a demo and lastly i will

00:02:03,280 --> 00:02:06,479
answer any questions that have been

00:02:05,119 --> 00:02:09,440
added to

00:02:06,479 --> 00:02:10,879
the q a portion of this zoom so we're

00:02:09,440 --> 00:02:11,599
going to start with some theory move

00:02:10,879 --> 00:02:14,319
into

00:02:11,599 --> 00:02:15,599
you know some architecture and then

00:02:14,319 --> 00:02:19,599
hopefully a cool

00:02:15,599 --> 00:02:22,720
cool demo putting it all together

00:02:19,599 --> 00:02:23,440
so um in this section i'm going to

00:02:22,720 --> 00:02:26,800
define

00:02:23,440 --> 00:02:29,200
a few key security concepts so that we

00:02:26,800 --> 00:02:31,440
have a common set of definitions to work

00:02:29,200 --> 00:02:34,080
from

00:02:31,440 --> 00:02:36,319
so attack surface the this is the the

00:02:34,080 --> 00:02:39,440
first definition

00:02:36,319 --> 00:02:41,280
according to nist an attack surface

00:02:39,440 --> 00:02:42,640
is the set of points on the boundary of

00:02:41,280 --> 00:02:45,200
a system

00:02:42,640 --> 00:02:47,360
a system element or an environment where

00:02:45,200 --> 00:02:50,400
an attacker can try to enter

00:02:47,360 --> 00:02:52,720
cause and effect on or extract data from

00:02:50,400 --> 00:02:54,400
that system system element or

00:02:52,720 --> 00:02:56,400
environment

00:02:54,400 --> 00:02:57,519
so in other words an attack surface

00:02:56,400 --> 00:02:59,360
describes

00:02:57,519 --> 00:03:02,159
all the potential vectors for

00:02:59,360 --> 00:03:02,159
exploitation

00:03:03,360 --> 00:03:07,040
and in this slide i'm going to be

00:03:05,360 --> 00:03:09,519
discussing the different

00:03:07,040 --> 00:03:11,680
technology layers that you'll typically

00:03:09,519 --> 00:03:14,080
find within an organization

00:03:11,680 --> 00:03:15,280
and as you look at each layer you'll

00:03:14,080 --> 00:03:18,560
want to perform

00:03:15,280 --> 00:03:21,599
one of those attack surface analysis

00:03:18,560 --> 00:03:23,760
analyses for each one so the first

00:03:21,599 --> 00:03:26,560
networks and infrastructure

00:03:23,760 --> 00:03:29,519
some questions to ask around this are

00:03:26,560 --> 00:03:32,959
how are users and devices accessing

00:03:29,519 --> 00:03:34,319
your networks and servers is ssh being

00:03:32,959 --> 00:03:36,959
used

00:03:34,319 --> 00:03:38,640
applications what applications are

00:03:36,959 --> 00:03:41,280
running in your network

00:03:38,640 --> 00:03:43,519
who has access to those how are those

00:03:41,280 --> 00:03:46,720
being secured as well as the underlying

00:03:43,519 --> 00:03:48,480
operating system and host how is data

00:03:46,720 --> 00:03:50,799
being protected

00:03:48,480 --> 00:03:52,640
end points how do you control which

00:03:50,799 --> 00:03:54,319
users are authorized

00:03:52,640 --> 00:03:56,879
to access different parts of your

00:03:54,319 --> 00:04:00,319
environment and your network

00:03:56,879 --> 00:04:01,599
and then cloud are there open s3 buckets

00:04:00,319 --> 00:04:05,200
or api keys

00:04:01,599 --> 00:04:07,760
being shared or not rotated and

00:04:05,200 --> 00:04:09,680
when we're talking about kubernetes a

00:04:07,760 --> 00:04:12,159
kubernetes deployment can cover

00:04:09,680 --> 00:04:14,000
all of these layers so it's really

00:04:12,159 --> 00:04:17,040
critical to think about how you can

00:04:14,000 --> 00:04:18,160
properly secure your kubernetes server

00:04:17,040 --> 00:04:20,639
api

00:04:18,160 --> 00:04:21,919
the applications running in your

00:04:20,639 --> 00:04:23,680
clusters

00:04:21,919 --> 00:04:26,880
the infrastructure the clusters are

00:04:23,680 --> 00:04:29,120
running on and the endpoints your users

00:04:26,880 --> 00:04:31,440
are accessing the kubernetes clusters

00:04:29,120 --> 00:04:31,440
from

00:04:32,479 --> 00:04:36,000
the last high-level security concept

00:04:34,639 --> 00:04:39,680
i'll mention is

00:04:36,000 --> 00:04:42,240
xero trust so zero trust is a model that

00:04:39,680 --> 00:04:44,320
was developed in response to

00:04:42,240 --> 00:04:46,000
nist's request for feedback to a

00:04:44,320 --> 00:04:48,000
document called

00:04:46,000 --> 00:04:49,280
developing a framework to improve

00:04:48,000 --> 00:04:51,520
critical infrastructure

00:04:49,280 --> 00:04:52,320
cyber security and according to the

00:04:51,520 --> 00:04:55,440
analysts

00:04:52,320 --> 00:04:56,240
at forrester the three main concepts of

00:04:55,440 --> 00:04:58,720
zero trust

00:04:56,240 --> 00:05:00,240
are see them here one ensure all

00:04:58,720 --> 00:05:02,320
resources

00:05:00,240 --> 00:05:03,840
are accessed securely regardless of

00:05:02,320 --> 00:05:06,560
location

00:05:03,840 --> 00:05:09,280
two adopt a least privileged strategy

00:05:06,560 --> 00:05:12,160
and strictly enforce access control

00:05:09,280 --> 00:05:13,840
and then lastly inspect and log all

00:05:12,160 --> 00:05:15,919
traffic

00:05:13,840 --> 00:05:16,880
and so how teleport can help fulfill

00:05:15,919 --> 00:05:19,360
each of these

00:05:16,880 --> 00:05:21,120
concepts at a very high level is

00:05:19,360 --> 00:05:24,240
teleports using end-to-end

00:05:21,120 --> 00:05:24,880
tls encryption it's using certificate

00:05:24,240 --> 00:05:28,400
based

00:05:24,880 --> 00:05:31,440
authentication for every component

00:05:28,400 --> 00:05:32,479
open source teleport can map github

00:05:31,440 --> 00:05:35,600
teams

00:05:32,479 --> 00:05:38,320
to groups and users that exist

00:05:35,600 --> 00:05:40,240
within the kubernetes clusters so within

00:05:38,320 --> 00:05:42,400
the the rbac that you've set up within

00:05:40,240 --> 00:05:45,520
your kubernetes clusters

00:05:42,400 --> 00:05:46,960
and then all coupe ctl requests are

00:05:45,520 --> 00:05:49,919
actually logged

00:05:46,960 --> 00:05:50,800
and all cube ctl exec sessions are even

00:05:49,919 --> 00:05:54,080
recorded

00:05:50,800 --> 00:05:55,360
by teleport and so when we get into the

00:05:54,080 --> 00:05:59,039
demo i'll be

00:05:55,360 --> 00:06:00,960
showing some of that so now i'm going to

00:05:59,039 --> 00:06:04,560
discuss using a unified

00:06:00,960 --> 00:06:07,280
access plane and

00:06:04,560 --> 00:06:08,080
when you talk about kubernetes the odds

00:06:07,280 --> 00:06:09,840
are

00:06:08,080 --> 00:06:11,199
is that you will end up with multiple

00:06:09,840 --> 00:06:13,280
clusters

00:06:11,199 --> 00:06:16,560
so you might have your development your

00:06:13,280 --> 00:06:20,319
staging your production clusters etc

00:06:16,560 --> 00:06:22,160
or maybe you have multiple clusters per

00:06:20,319 --> 00:06:24,880
region

00:06:22,160 --> 00:06:25,199
but in order to deal with all of those

00:06:24,880 --> 00:06:28,560
you

00:06:25,199 --> 00:06:31,360
really want to centralize the access

00:06:28,560 --> 00:06:35,440
so you want to avoid having multiple

00:06:31,360 --> 00:06:39,919
back doors multiple ways of accessing

00:06:35,440 --> 00:06:41,919
different clusters so you really want to

00:06:39,919 --> 00:06:43,759
pipe all of your developer access to

00:06:41,919 --> 00:06:45,759
your clusters through

00:06:43,759 --> 00:06:47,039
a single choke point so that you can

00:06:45,759 --> 00:06:50,000
enforce your

00:06:47,039 --> 00:06:52,560
security policies on that point so you

00:06:50,000 --> 00:06:56,400
can think of this as a gateway

00:06:52,560 --> 00:06:59,360
and so that gateway is a great place to

00:06:56,400 --> 00:07:02,880
attach to your sso identities

00:06:59,360 --> 00:07:04,639
any requests and any modifications

00:07:02,880 --> 00:07:06,080
so that any action that's occurring

00:07:04,639 --> 00:07:07,520
across your network across your

00:07:06,080 --> 00:07:09,919
kubernetes stacks

00:07:07,520 --> 00:07:11,039
that's all actually being tied to

00:07:09,919 --> 00:07:14,840
somebody's specific

00:07:11,039 --> 00:07:16,960
identity as it is within sso within your

00:07:14,840 --> 00:07:20,400
idp

00:07:16,960 --> 00:07:22,639
and so that way you get accountability

00:07:20,400 --> 00:07:24,080
and user attribution from everyone in

00:07:22,639 --> 00:07:28,560
your organization

00:07:24,080 --> 00:07:30,160
about who is doing what when from where

00:07:28,560 --> 00:07:32,720
and in what environment they're they're

00:07:30,160 --> 00:07:34,000
doing those actions as well

00:07:32,720 --> 00:07:36,080
and you really want to make sure that

00:07:34,000 --> 00:07:39,120
the gateway is only allowing

00:07:36,080 --> 00:07:39,840
sso users through and records their

00:07:39,120 --> 00:07:42,000
identity

00:07:39,840 --> 00:07:43,199
with their requests so that's again

00:07:42,000 --> 00:07:45,520
avoiding that

00:07:43,199 --> 00:07:46,639
you know different all these different

00:07:45,520 --> 00:07:49,039
you know shadow i.t

00:07:46,639 --> 00:07:49,840
accessing different means of accessing

00:07:49,039 --> 00:07:52,240
infrastructure

00:07:49,840 --> 00:07:53,440
that you know the it or security teams

00:07:52,240 --> 00:07:56,720
might not even

00:07:53,440 --> 00:07:59,360
be aware is there um

00:07:56,720 --> 00:08:01,280
and so the the other thing is even

00:07:59,360 --> 00:08:03,680
though you're using kubernetes

00:08:01,280 --> 00:08:05,759
and it is hiding a lot of the underlying

00:08:03,680 --> 00:08:08,080
hardware and infrastructure

00:08:05,759 --> 00:08:10,560
especially if you know maybe you're in

00:08:08,080 --> 00:08:11,199
gcp google cloud platform you're using

00:08:10,560 --> 00:08:16,720
the

00:08:11,199 --> 00:08:20,000
gke a lot of it is maybe hidden from you

00:08:16,720 --> 00:08:22,560
in in some respects but it really is

00:08:20,000 --> 00:08:23,360
all still there the servers are still

00:08:22,560 --> 00:08:25,199
there

00:08:23,360 --> 00:08:26,720
you have applications running in your

00:08:25,199 --> 00:08:29,840
clusters there are still

00:08:26,720 --> 00:08:31,759
operating systems on those servers and

00:08:29,840 --> 00:08:34,880
most likely you still will manage

00:08:31,759 --> 00:08:37,440
everything under kubernetes via ssh

00:08:34,880 --> 00:08:38,880
or something similar so you really don't

00:08:37,440 --> 00:08:41,919
want to forget about those

00:08:38,880 --> 00:08:43,360
other access aspects

00:08:41,919 --> 00:08:45,440
so you really want to make sure you do

00:08:43,360 --> 00:08:47,040
all of the same enforcement that you do

00:08:45,440 --> 00:08:50,000
for kubernetes

00:08:47,040 --> 00:08:52,560
so attaching sso identities to all of

00:08:50,000 --> 00:08:54,399
your access control

00:08:52,560 --> 00:08:56,000
so don't forget about ssh or any

00:08:54,399 --> 00:08:56,560
internal applications that you have

00:08:56,000 --> 00:09:00,720
running

00:08:56,560 --> 00:09:03,920
databases etc and when using

00:09:00,720 --> 00:09:06,720
your sso identities make sure that you

00:09:03,920 --> 00:09:07,920
map users and groups that exist within

00:09:06,720 --> 00:09:10,560
your idp

00:09:07,920 --> 00:09:12,399
within your identity provider to users

00:09:10,560 --> 00:09:14,720
and groups that you create within your

00:09:12,399 --> 00:09:16,800
kubernetes clusters

00:09:14,720 --> 00:09:19,600
and those groups and users within

00:09:16,800 --> 00:09:21,440
kubernetes they can be created using

00:09:19,600 --> 00:09:23,120
native kubernetes role-based access

00:09:21,440 --> 00:09:25,760
control which is what i'll be

00:09:23,120 --> 00:09:27,920
moving into next and as far as setting

00:09:25,760 --> 00:09:31,360
up that mapping of

00:09:27,920 --> 00:09:32,640
groups and users within sso to groups

00:09:31,360 --> 00:09:34,880
users that exist

00:09:32,640 --> 00:09:36,000
within kubernetes clusters i'll be

00:09:34,880 --> 00:09:40,000
showing how you can use

00:09:36,000 --> 00:09:40,000
teleport to set up that mapping

00:09:40,320 --> 00:09:45,040
and so this is where we get into really

00:09:42,959 --> 00:09:47,839
how to stop sharing cube configs by

00:09:45,040 --> 00:09:50,080
implementing role-based access control

00:09:47,839 --> 00:09:51,680
so another definition here just make

00:09:50,080 --> 00:09:54,800
sure we're all on the same page

00:09:51,680 --> 00:09:57,120
um role-based access control or rbac

00:09:54,800 --> 00:09:58,000
is a method of regulating access to

00:09:57,120 --> 00:10:00,800
computer

00:09:58,000 --> 00:10:02,839
or network resources based on the roles

00:10:00,800 --> 00:10:04,560
of individual users within your

00:10:02,839 --> 00:10:06,880
organization

00:10:04,560 --> 00:10:07,920
so really use least privilege and grant

00:10:06,880 --> 00:10:10,000
access

00:10:07,920 --> 00:10:12,720
based off of a user's role within your

00:10:10,000 --> 00:10:12,720
organization

00:10:13,360 --> 00:10:16,640
now this slide discusses the differences

00:10:15,519 --> 00:10:20,000
between

00:10:16,640 --> 00:10:22,399
roles and cluster roles in kubernetes

00:10:20,000 --> 00:10:23,680
so again a couple more definitions and

00:10:22,399 --> 00:10:27,600
then we'll get into the fun stuff

00:10:23,680 --> 00:10:31,040
the demo but kubernetes are back role

00:10:27,600 --> 00:10:34,160
or cluster role they contain rules

00:10:31,040 --> 00:10:36,399
that represent a set of permissions

00:10:34,160 --> 00:10:37,920
and those permissions are purely

00:10:36,399 --> 00:10:41,440
additive so there aren't any

00:10:37,920 --> 00:10:42,480
deny rules within those and a role in

00:10:41,440 --> 00:10:44,399
kubernetes

00:10:42,480 --> 00:10:46,560
always sets permissions within a

00:10:44,399 --> 00:10:48,000
particular namespace

00:10:46,560 --> 00:10:50,160
so when you create a role you have to

00:10:48,000 --> 00:10:51,680
specify the namespace that that role

00:10:50,160 --> 00:10:54,240
belongs in

00:10:51,680 --> 00:10:56,880
then a cluster role on the other hand is

00:10:54,240 --> 00:10:58,560
a non-namespace resource

00:10:56,880 --> 00:11:01,200
and the resources they have different

00:10:58,560 --> 00:11:04,320
names role and cluster role

00:11:01,200 --> 00:11:05,600
because a kubernetes object either has

00:11:04,320 --> 00:11:07,920
well it always has to be

00:11:05,600 --> 00:11:09,680
either name spaced or not namespaced it

00:11:07,920 --> 00:11:11,839
can't be both

00:11:09,680 --> 00:11:12,880
so if you wanted to find a role within a

00:11:11,839 --> 00:11:14,959
namespace

00:11:12,880 --> 00:11:17,120
you should use a role and if you want to

00:11:14,959 --> 00:11:19,040
define a role cluster wide you should

00:11:17,120 --> 00:11:21,760
use a cluster rule

00:11:19,040 --> 00:11:23,200
and in my demo i'll demonstrate using a

00:11:21,760 --> 00:11:26,560
kubernetes role

00:11:23,200 --> 00:11:30,560
to limit a group to a single name space

00:11:26,560 --> 00:11:30,560
rather than using a cluster role

00:11:31,200 --> 00:11:36,720
so now into an overview of what my demo

00:11:33,360 --> 00:11:40,640
environment actually looks like

00:11:36,720 --> 00:11:43,440
so what i've done is within

00:11:40,640 --> 00:11:45,600
github i've created an organization that

00:11:43,440 --> 00:11:48,800
i've called kubernetes org

00:11:45,600 --> 00:11:51,040
i've then created two github users

00:11:48,800 --> 00:11:52,480
one that's an admin user one that's a

00:11:51,040 --> 00:11:54,560
dev user

00:11:52,480 --> 00:11:57,440
and i've created two teams within my

00:11:54,560 --> 00:11:59,360
github organization

00:11:57,440 --> 00:12:00,720
my user is going to be a member of both

00:11:59,360 --> 00:12:03,519
the admin team

00:12:00,720 --> 00:12:04,720
and the dev team whereas my dev user

00:12:03,519 --> 00:12:07,680
that i've created

00:12:04,720 --> 00:12:09,120
is only going to be a member of the dev

00:12:07,680 --> 00:12:13,120
team

00:12:09,120 --> 00:12:16,320
and how i've set up the mapping of of uh

00:12:13,120 --> 00:12:18,639
teleport roles to uh

00:12:16,320 --> 00:12:20,399
to this dev group that i created in my

00:12:18,639 --> 00:12:22,959
kubernetes clusters

00:12:20,399 --> 00:12:25,279
is that my dev team is going to be

00:12:22,959 --> 00:12:28,240
limited to the dev namespace

00:12:25,279 --> 00:12:28,800
within my kubernetes clusters and i've

00:12:28,240 --> 00:12:31,920
set up

00:12:28,800 --> 00:12:34,959
two kubernetes clusters behind my

00:12:31,920 --> 00:12:37,040
my teleport cluster as well as two

00:12:34,959 --> 00:12:40,320
internal applications

00:12:37,040 --> 00:12:42,000
and i've enabled ssh on one of my

00:12:40,320 --> 00:12:45,120
kubernetes clusters

00:12:42,000 --> 00:12:47,680
but only the admin user has

00:12:45,120 --> 00:12:48,720
the ability to ssh into that kubernetes

00:12:47,680 --> 00:12:52,079
cluster

00:12:48,720 --> 00:12:55,680
and then lastly i'm using let's encrypt

00:12:52,079 --> 00:12:58,880
for signed https certificates

00:12:55,680 --> 00:13:00,240
so from these users perspectives what it

00:12:58,880 --> 00:13:02,639
what it will look like is

00:13:00,240 --> 00:13:05,040
they want access to you know some piece

00:13:02,639 --> 00:13:08,959
of infrastructure down here

00:13:05,040 --> 00:13:08,959
i'll focus on kubernetes

00:13:09,279 --> 00:13:15,040
but these components they are in

00:13:12,399 --> 00:13:16,959
completely private subnets these users

00:13:15,040 --> 00:13:18,079
do not have direct access to any of

00:13:16,959 --> 00:13:19,600
these

00:13:18,079 --> 00:13:22,399
from their perspective they will

00:13:19,600 --> 00:13:23,519
actually go through this teleport proxy

00:13:22,399 --> 00:13:26,000
to access these

00:13:23,519 --> 00:13:26,720
items down here and the tools that they

00:13:26,000 --> 00:13:30,480
can use

00:13:26,720 --> 00:13:31,760
are they can use tsh which is a cli tool

00:13:30,480 --> 00:13:34,399
from teleport

00:13:31,760 --> 00:13:35,040
they can use regular kubectl they can

00:13:34,399 --> 00:13:38,240
also use

00:13:35,040 --> 00:13:40,560
a ui that's being served from this proxy

00:13:38,240 --> 00:13:42,240
so regardless of which tool they use to

00:13:40,560 --> 00:13:45,199
access something down here

00:13:42,240 --> 00:13:46,720
it is always through this proxy the

00:13:45,199 --> 00:13:49,680
other component

00:13:46,720 --> 00:13:52,000
and um these two components this proxy

00:13:49,680 --> 00:13:54,560
and auth they are on one single ec2

00:13:52,000 --> 00:13:55,920
instance that i have in aws

00:13:54,560 --> 00:13:57,920
the other component is this

00:13:55,920 --> 00:14:00,800
authentication

00:13:57,920 --> 00:14:02,079
this is the where um my certificate

00:14:00,800 --> 00:14:03,839
authority lives

00:14:02,079 --> 00:14:05,839
this is the thing that is signing and

00:14:03,839 --> 00:14:08,959
issuing short-lived

00:14:05,839 --> 00:14:09,279
certificates um this is also where all

00:14:08,959 --> 00:14:11,360
the

00:14:09,279 --> 00:14:12,560
the robust audit logs are going to go by

00:14:11,360 --> 00:14:15,040
default

00:14:12,560 --> 00:14:16,079
and from here i can easily send them to

00:14:15,040 --> 00:14:18,720
some kind of sim

00:14:16,079 --> 00:14:20,639
or other log server that i might have

00:14:18,720 --> 00:14:22,399
but from these users perspectives the

00:14:20,639 --> 00:14:23,040
first thing they do is they go to this

00:14:22,399 --> 00:14:26,079
proxy

00:14:23,040 --> 00:14:28,639
and they do an sso login

00:14:26,079 --> 00:14:29,199
so back to my point earlier they're not

00:14:28,639 --> 00:14:32,079
using

00:14:29,199 --> 00:14:33,120
yet another means of authentication

00:14:32,079 --> 00:14:36,399
they're going to use

00:14:33,120 --> 00:14:37,600
the same sso login that they use for

00:14:36,399 --> 00:14:39,760
everything else within their

00:14:37,600 --> 00:14:41,920
organization

00:14:39,760 --> 00:14:44,000
and so based off of their team

00:14:41,920 --> 00:14:46,800
membership they're going to receive

00:14:44,000 --> 00:14:48,560
some role from teleport and it's within

00:14:46,800 --> 00:14:49,760
that teleport role that it's going to

00:14:48,560 --> 00:14:52,079
specify

00:14:49,760 --> 00:14:53,360
how long their access is good for and

00:14:52,079 --> 00:14:56,880
what they are allowed

00:14:53,360 --> 00:15:00,000
or not allowed to access and

00:14:56,880 --> 00:15:03,040
they receive short-lived certificates

00:15:00,000 --> 00:15:05,440
in the case of kubernetes they will

00:15:03,040 --> 00:15:07,360
actually receive an updated context and

00:15:05,440 --> 00:15:10,720
an updated cubeconfig

00:15:07,360 --> 00:15:13,519
that is mapping them to a specific group

00:15:10,720 --> 00:15:15,519
or user within kubernetes clusters and

00:15:13,519 --> 00:15:17,680
that's of course configurable if you

00:15:15,519 --> 00:15:18,560
wanted to map multiple groups and users

00:15:17,680 --> 00:15:20,959
to

00:15:18,560 --> 00:15:23,120
uh to some user but for the purposes of

00:15:20,959 --> 00:15:26,160
this demo i'm keeping it very

00:15:23,120 --> 00:15:28,800
very simple so to

00:15:26,160 --> 00:15:30,480
move into the actual demo environment

00:15:28,800 --> 00:15:33,199
let me switch over

00:15:30,480 --> 00:15:35,199
so i have two web browsers that i'll be

00:15:33,199 --> 00:15:38,560
primarily working from

00:15:35,199 --> 00:15:42,000
so in this safari web browser this is

00:15:38,560 --> 00:15:44,320
where i'm logged in as a dev user

00:15:42,000 --> 00:15:45,680
so here logged in as the dev user named

00:15:44,320 --> 00:15:48,480
dev account dev

00:15:45,680 --> 00:15:48,880
nice and straightforward and you can see

00:15:48,480 --> 00:15:51,759
that

00:15:48,880 --> 00:15:53,040
this user is a member of kubernetes

00:15:51,759 --> 00:15:55,600
organization

00:15:53,040 --> 00:15:56,639
and their team membership in github is

00:15:55,600 --> 00:16:00,880
this team called

00:15:56,639 --> 00:16:03,360
devs if i go over to my firefox browser

00:16:00,880 --> 00:16:06,160
this is where i'm logged in as my admin

00:16:03,360 --> 00:16:07,839
user named admin account admin

00:16:06,160 --> 00:16:09,920
and you can see also a member of the

00:16:07,839 --> 00:16:12,639
kubernetes organization

00:16:09,920 --> 00:16:13,120
and their team membership within github

00:16:12,639 --> 00:16:16,800
is

00:16:13,120 --> 00:16:18,000
this team called admins so if i switch

00:16:16,800 --> 00:16:21,680
over to

00:16:18,000 --> 00:16:25,600
my teleport proxy this is its url

00:16:21,680 --> 00:16:28,000
i've set up a an oauth application

00:16:25,600 --> 00:16:29,839
so that i can use my github credentials

00:16:28,000 --> 00:16:32,639
to access

00:16:29,839 --> 00:16:34,160
my infrastructure so since i'm in this

00:16:32,639 --> 00:16:36,880
firefox browser

00:16:34,160 --> 00:16:37,360
where i'm logged in as my admin user if

00:16:36,880 --> 00:16:40,079
i

00:16:37,360 --> 00:16:40,800
click this github login it's going to

00:16:40,079 --> 00:16:44,079
log me in

00:16:40,800 --> 00:16:47,920
as you can see admin account admin

00:16:44,079 --> 00:16:50,399
so what i see now is i can see

00:16:47,920 --> 00:16:51,600
two ssh servers i can see host name

00:16:50,399 --> 00:16:54,399
information

00:16:51,600 --> 00:16:56,880
i can see labels and where labels come

00:16:54,399 --> 00:16:59,920
into play is you can specify

00:16:56,880 --> 00:17:01,839
within a teleport role that in a given

00:16:59,920 --> 00:17:04,559
role somebody can

00:17:01,839 --> 00:17:07,280
access or not access a piece of

00:17:04,559 --> 00:17:09,120
infrastructure based off the labels

00:17:07,280 --> 00:17:10,880
that you associate with your

00:17:09,120 --> 00:17:13,199
infrastructure

00:17:10,880 --> 00:17:15,280
and then over here this connect button

00:17:13,199 --> 00:17:18,319
this is a drop down of the os

00:17:15,280 --> 00:17:22,160
users that i can ssh as

00:17:18,319 --> 00:17:23,760
into these two servers and this is also

00:17:22,160 --> 00:17:26,240
coming from the role

00:17:23,760 --> 00:17:27,280
that i received when i authenticated and

00:17:26,240 --> 00:17:30,960
logged into this

00:17:27,280 --> 00:17:33,120
teleport proxy so to

00:17:30,960 --> 00:17:35,120
just to to show you very quickly how i

00:17:33,120 --> 00:17:38,480
actually set up the mapping

00:17:35,120 --> 00:17:41,039
of my github teams to

00:17:38,480 --> 00:17:42,080
um teleport roles let me go here into

00:17:41,039 --> 00:17:44,720
teams

00:17:42,080 --> 00:17:46,400
off connector so this is the github

00:17:44,720 --> 00:17:49,360
connector that i set up

00:17:46,400 --> 00:17:50,160
and the part to focus on is this so what

00:17:49,360 --> 00:17:53,360
this is saying

00:17:50,160 --> 00:17:54,640
here this is mapping roles to teams that

00:17:53,360 --> 00:17:57,679
exist within my

00:17:54,640 --> 00:17:58,840
github organization so this one says

00:17:57,679 --> 00:18:01,440
here

00:17:58,840 --> 00:18:03,280
that if somebody comes along they

00:18:01,440 --> 00:18:04,799
authenticate against this github

00:18:03,280 --> 00:18:06,799
connector

00:18:04,799 --> 00:18:08,720
they're in this organization they're in

00:18:06,799 --> 00:18:10,799
this admins team

00:18:08,720 --> 00:18:13,360
they are going to receive this teleport

00:18:10,799 --> 00:18:16,160
role called admin

00:18:13,360 --> 00:18:18,000
likewise somebody else comes along and

00:18:16,160 --> 00:18:19,840
their team membership within the github

00:18:18,000 --> 00:18:21,840
org is devs

00:18:19,840 --> 00:18:25,360
they are going to receive this teleport

00:18:21,840 --> 00:18:25,360
role called devs

00:18:26,480 --> 00:18:30,160
so i'll leave that up just for a second

00:18:28,080 --> 00:18:32,320
so again this is how you map

00:18:30,160 --> 00:18:34,000
teams in github to any roles that you

00:18:32,320 --> 00:18:35,679
create within teleport

00:18:34,000 --> 00:18:37,200
and it's within the teleport roles

00:18:35,679 --> 00:18:38,799
that's where it's specified

00:18:37,200 --> 00:18:41,520
what somebody is allowed to do not

00:18:38,799 --> 00:18:42,000
allowed to do what users they can ssh as

00:18:41,520 --> 00:18:45,360
all that

00:18:42,000 --> 00:18:47,440
stuff so

00:18:45,360 --> 00:18:48,400
again here if you look at my servers you

00:18:47,440 --> 00:18:50,320
recall

00:18:48,400 --> 00:18:52,160
there are these three os users that i

00:18:50,320 --> 00:18:55,280
can ssh as

00:18:52,160 --> 00:18:55,760
and because i'm in the admin team again

00:18:55,280 --> 00:18:58,080
i'm in the

00:18:55,760 --> 00:18:59,360
this admins team so i get this role

00:18:58,080 --> 00:19:01,440
called admin

00:18:59,360 --> 00:19:03,120
if i take a look at that role called

00:19:01,440 --> 00:19:06,880
admin

00:19:03,120 --> 00:19:09,360
view this so there's a lot of star star

00:19:06,880 --> 00:19:12,320
so it's an admin role i've set it up to

00:19:09,360 --> 00:19:15,039
have a lot of permissions

00:19:12,320 --> 00:19:17,280
but in here you can see that when i'm

00:19:15,039 --> 00:19:19,600
interacting with my kubernetes clusters

00:19:17,280 --> 00:19:22,160
i get to be part of the system masters

00:19:19,600 --> 00:19:24,799
group as this admin role

00:19:22,160 --> 00:19:27,200
i can access all kubernetes labels i can

00:19:24,799 --> 00:19:30,720
access all ssh servers

00:19:27,200 --> 00:19:33,600
and this is actually where those three

00:19:30,720 --> 00:19:35,360
ssh user logins were coming from so i've

00:19:33,600 --> 00:19:38,400
hard coded these two

00:19:35,360 --> 00:19:41,520
but i can also use this variable

00:19:38,400 --> 00:19:44,240
so this is how i'm able to ssh as my

00:19:41,520 --> 00:19:46,240
github user

00:19:44,240 --> 00:19:49,120
and then down here one other thing i'll

00:19:46,240 --> 00:19:52,480
highlight this is the time to live

00:19:49,120 --> 00:19:53,360
so when i authenticate as this admin

00:19:52,480 --> 00:19:55,679
user

00:19:53,360 --> 00:19:57,679
i will receive ssh certificates that are

00:19:55,679 --> 00:20:00,000
valid for 12 hours

00:19:57,679 --> 00:20:03,280
i will also receive a cube config that's

00:20:00,000 --> 00:20:03,280
valid for 12 hours

00:20:04,000 --> 00:20:07,360
and just to do a very quick

00:20:05,760 --> 00:20:09,120
demonstration of

00:20:07,360 --> 00:20:11,520
some of the logging capabilities that i

00:20:09,120 --> 00:20:15,440
get in here if i do a quick

00:20:11,520 --> 00:20:18,559
ssh into this server that i have here

00:20:15,440 --> 00:20:21,280
um i'll just ssh is root

00:20:18,559 --> 00:20:23,360
right do whatever kind of sys admin fun

00:20:21,280 --> 00:20:29,039
stuff i want to do in here

00:20:23,360 --> 00:20:29,039
um and then if i exit out of here

00:20:29,120 --> 00:20:37,360
and if i go to look in my audit logs

00:20:34,159 --> 00:20:37,840
so i can see at a high level starting

00:20:37,360 --> 00:20:41,919
with

00:20:37,840 --> 00:20:43,440
this sso login so again every action is

00:20:41,919 --> 00:20:45,440
going to be tied to

00:20:43,440 --> 00:20:47,120
this user's identity everything that

00:20:45,440 --> 00:20:49,280
they're doing

00:20:47,120 --> 00:20:51,760
i can see that they are you know

00:20:49,280 --> 00:20:54,320
starting ssh sessions

00:20:51,760 --> 00:20:56,640
but not only can i see that they are ssh

00:20:54,320 --> 00:20:57,280
as root but i can see their ip address i

00:20:56,640 --> 00:21:00,000
can see

00:20:57,280 --> 00:21:00,880
time and it's all tied back to their

00:21:00,000 --> 00:21:04,640
identity

00:21:00,880 --> 00:21:07,039
as it is within sso so one of the other

00:21:04,640 --> 00:21:10,159
hats that i wear outside of teleport

00:21:07,039 --> 00:21:12,080
is i'm a cyber operations officer in the

00:21:10,159 --> 00:21:14,159
army national guard

00:21:12,080 --> 00:21:16,240
so i primarily deal with a lot of

00:21:14,159 --> 00:21:18,799
incident response uh

00:21:16,240 --> 00:21:20,880
missions in that role and the thing

00:21:18,799 --> 00:21:24,400
that's extremely difficult for us

00:21:20,880 --> 00:21:27,039
is attribution so figuring out um

00:21:24,400 --> 00:21:28,159
you know who actually has access who who

00:21:27,039 --> 00:21:31,760
has access to

00:21:28,159 --> 00:21:32,320
logging in as root who is sharing ssh

00:21:31,760 --> 00:21:34,480
keys

00:21:32,320 --> 00:21:37,280
where are public keys located across

00:21:34,480 --> 00:21:37,280
infrastructure

00:21:37,600 --> 00:21:43,360
who's sharing passwords etc so

00:21:40,960 --> 00:21:44,000
it would make my life so much easier to

00:21:43,360 --> 00:21:46,480
have something

00:21:44,000 --> 00:21:48,320
like this where i can see not only is

00:21:46,480 --> 00:21:50,400
somebody logging in as root

00:21:48,320 --> 00:21:52,799
but here's the specific identity on on

00:21:50,400 --> 00:21:56,720
who's doing that

00:21:52,799 --> 00:21:59,440
and if i go here into session recordings

00:21:56,720 --> 00:22:01,039
this is where we're you know capturing

00:21:59,440 --> 00:22:03,280
and storing

00:22:01,039 --> 00:22:04,799
all of these these sessions so this is

00:22:03,280 --> 00:22:07,600
the one that i just

00:22:04,799 --> 00:22:10,840
was in um i can pause scroll around i

00:22:07,600 --> 00:22:13,840
can also play this back in the cli

00:22:10,840 --> 00:22:14,960
um and i mean this is great for audits

00:22:13,840 --> 00:22:17,520
if you're trying to achieve

00:22:14,960 --> 00:22:19,039
sock 2 compliance this is even really

00:22:17,520 --> 00:22:21,360
helpful if you want to

00:22:19,039 --> 00:22:23,760
share how you configured something

00:22:21,360 --> 00:22:27,840
because you can come in here and just

00:22:23,760 --> 00:22:30,799
copy from this paste it somewhere else

00:22:27,840 --> 00:22:31,919
and in addition to capturing these ssh

00:22:30,799 --> 00:22:35,679
sessions

00:22:31,919 --> 00:22:36,480
you can see down in here i was cube ctl

00:22:35,679 --> 00:22:39,919
exec

00:22:36,480 --> 00:22:42,000
into this class this kubernetes cluster

00:22:39,919 --> 00:22:43,440
into the default namespace and this was

00:22:42,000 --> 00:22:47,440
the actual pod

00:22:43,440 --> 00:22:50,799
that i exec into so we're even capturing

00:22:47,440 --> 00:22:53,280
everything you do in a pod

00:22:50,799 --> 00:22:54,080
same idea too you can copy paste scroll

00:22:53,280 --> 00:22:56,640
around

00:22:54,080 --> 00:22:56,640
do all that

00:22:57,840 --> 00:23:03,039
so what i'll do now is i will actually

00:23:00,880 --> 00:23:04,559
show you using coop ctl and what happens

00:23:03,039 --> 00:23:07,600
when i

00:23:04,559 --> 00:23:08,400
you know log in on the cli so let me go

00:23:07,600 --> 00:23:10,960
into my

00:23:08,400 --> 00:23:12,000
terminal window here and before i

00:23:10,960 --> 00:23:14,880
actually

00:23:12,000 --> 00:23:16,320
log into my proxy in the cli let me just

00:23:14,880 --> 00:23:19,039
do a cube ctl

00:23:16,320 --> 00:23:20,000
get pods and i'll show you it's it's

00:23:19,039 --> 00:23:22,159
telling me

00:23:20,000 --> 00:23:23,840
something's wrong you can't access this

00:23:22,159 --> 00:23:26,080
so i'm not logged in

00:23:23,840 --> 00:23:27,520
to a teleport proxy so i do not

00:23:26,080 --> 00:23:30,480
currently have

00:23:27,520 --> 00:23:33,360
a context with something that allows me

00:23:30,480 --> 00:23:37,360
to interact with kubernetes clusters

00:23:33,360 --> 00:23:40,559
um but if i go back to this login so

00:23:37,360 --> 00:23:43,360
again tsh is teleport's cli tool

00:23:40,559 --> 00:23:45,440
i can log into this teleport proxy if

00:23:43,360 --> 00:23:48,240
you notice it's the same url

00:23:45,440 --> 00:23:50,240
i was interacting with back in here in

00:23:48,240 --> 00:23:54,159
the ui

00:23:50,240 --> 00:23:54,640
um browser none by default tsh is going

00:23:54,159 --> 00:23:57,679
to

00:23:54,640 --> 00:24:01,279
open my default browser and initiate sso

00:23:57,679 --> 00:24:03,039
login that way but since i'm showing

00:24:01,279 --> 00:24:05,440
two different browsers i don't want that

00:24:03,039 --> 00:24:06,960
behavior i'm just going to suppress the

00:24:05,440 --> 00:24:10,640
automatic browser opening

00:24:06,960 --> 00:24:13,440
just get this url i'm going to copy

00:24:10,640 --> 00:24:14,880
paste this into this same browser where

00:24:13,440 --> 00:24:18,320
i'm logged in as this

00:24:14,880 --> 00:24:21,039
admin user i have a successful login

00:24:18,320 --> 00:24:21,600
so if i return to the cli you can see

00:24:21,039 --> 00:24:23,360
again

00:24:21,600 --> 00:24:25,679
i've logged in as this admin account

00:24:23,360 --> 00:24:29,600
admin user this cluster

00:24:25,679 --> 00:24:32,640
um these are the the roles

00:24:29,600 --> 00:24:35,279
that the teleport rules that i receive

00:24:32,640 --> 00:24:37,279
these are the same three os logins that

00:24:35,279 --> 00:24:40,559
i can ssh has

00:24:37,279 --> 00:24:41,919
and i'm currently logged into this

00:24:40,559 --> 00:24:44,000
kubernetes

00:24:41,919 --> 00:24:46,400
cluster these are the groups i get to be

00:24:44,000 --> 00:24:48,960
a part of in my kubernetes cluster

00:24:46,400 --> 00:24:50,480
and my access is valid for about eight

00:24:48,960 --> 00:24:53,200
hours

00:24:50,480 --> 00:24:54,880
so to see all the kubernetes clusters

00:24:53,200 --> 00:24:57,919
that i have behind

00:24:54,880 --> 00:25:00,960
my teleport deployment i can do tsh

00:24:57,919 --> 00:25:03,360
cube ls and i can see i have this

00:25:00,960 --> 00:25:05,200
current context that is being pointed to

00:25:03,360 --> 00:25:07,200
i can easily switch to this other

00:25:05,200 --> 00:25:10,960
cluster if i need to

00:25:07,200 --> 00:25:14,240
but now if i do a coupe ctl

00:25:10,960 --> 00:25:14,880
get pods it's actually going to return

00:25:14,240 --> 00:25:18,000
stuff

00:25:14,880 --> 00:25:21,200
for me and now all of my coop ctl

00:25:18,000 --> 00:25:22,880
actions that i take are being logged by

00:25:21,200 --> 00:25:26,640
teleport so if i go back

00:25:22,880 --> 00:25:27,840
into the ui take a look at audit logs

00:25:26,640 --> 00:25:30,320
you can see that now there are these

00:25:27,840 --> 00:25:33,760
kubernetes requests that have occurred

00:25:30,320 --> 00:25:34,080
i view details um you know information

00:25:33,760 --> 00:25:37,279
it's

00:25:34,080 --> 00:25:42,720
this was a get pods uh

00:25:37,279 --> 00:25:46,320
yeah this was the namespace etc

00:25:42,720 --> 00:25:47,919
so so far i've showed you everything as

00:25:46,320 --> 00:25:52,640
this admin user

00:25:47,919 --> 00:25:52,640
what i'll switch to now is that dev user

00:25:52,720 --> 00:25:57,840
so i'm going to do tsh log out

00:25:59,840 --> 00:26:05,440
and let me switch to my firefox

00:26:03,360 --> 00:26:08,720
excuse me my safari browser which is

00:26:05,440 --> 00:26:12,000
where i'm logged in as this dev user

00:26:08,720 --> 00:26:15,120
and so if i go to the same ui

00:26:12,000 --> 00:26:18,960
and log in as using this github

00:26:15,120 --> 00:26:22,000
connector so you can see i've logged in

00:26:18,960 --> 00:26:24,720
as this dev user and

00:26:22,000 --> 00:26:25,600
in this case i can only see this one

00:26:24,720 --> 00:26:27,279
server

00:26:25,600 --> 00:26:28,799
whereas if you recall when i was logged

00:26:27,279 --> 00:26:31,679
in as this admin user

00:26:28,799 --> 00:26:33,760
there are these two servers in addition

00:26:31,679 --> 00:26:37,200
if i were to click this connect button

00:26:33,760 --> 00:26:39,760
i can only ssh as this one user

00:26:37,200 --> 00:26:41,600
whereas my admin user they have all

00:26:39,760 --> 00:26:44,080
three of these logins and

00:26:41,600 --> 00:26:44,720
where that's coming from is from the

00:26:44,080 --> 00:26:46,880
role

00:26:44,720 --> 00:26:48,640
that i received when i logged in as this

00:26:46,880 --> 00:26:51,600
dev user

00:26:48,640 --> 00:26:53,600
so again very quickly if i show you this

00:26:51,600 --> 00:26:56,720
off connector

00:26:53,600 --> 00:26:58,240
dev user there in this dev team they get

00:26:56,720 --> 00:27:01,360
a role called devs

00:26:58,240 --> 00:27:05,120
so let's look at that role called devs

00:27:01,360 --> 00:27:08,480
dev's role let's take a look

00:27:05,120 --> 00:27:08,880
and what i can see here is this dev's

00:27:08,480 --> 00:27:10,799
role

00:27:08,880 --> 00:27:13,039
it's a little more restrictive this

00:27:10,799 --> 00:27:17,520
person is only allowed to ssh

00:27:13,039 --> 00:27:21,360
into servers that have this one label

00:27:17,520 --> 00:27:23,679
they also can only ssh as this one user

00:27:21,360 --> 00:27:26,480
again this is a variable that becomes

00:27:23,679 --> 00:27:28,799
their github username

00:27:26,480 --> 00:27:31,279
so let me go back into my safari browser

00:27:28,799 --> 00:27:34,720
where i'm logged in as the dev user

00:27:31,279 --> 00:27:37,200
right only see this one node because

00:27:34,720 --> 00:27:38,640
i can only see nodes that have this one

00:27:37,200 --> 00:27:41,840
label here

00:27:38,640 --> 00:27:43,039
and i can only ssh as this one user so

00:27:41,840 --> 00:27:48,320
if i now

00:27:43,039 --> 00:27:50,799
come back in here and i do a login

00:27:48,320 --> 00:27:54,159
but i use my safari browser where i'm

00:27:50,799 --> 00:27:54,159
logged in as this dev user

00:27:56,799 --> 00:28:03,840
let me go into my safari browser

00:28:00,000 --> 00:28:03,840
put that in here

00:28:03,919 --> 00:28:08,480
successful authentication so i can see

00:28:07,520 --> 00:28:11,120
now

00:28:08,480 --> 00:28:12,399
i've logged in as the dev user the role

00:28:11,120 --> 00:28:16,640
that i received is

00:28:12,399 --> 00:28:18,640
devs can only ssh is this user

00:28:16,640 --> 00:28:20,640
i've received a cube config also valid

00:28:18,640 --> 00:28:22,720
for about eight hours

00:28:20,640 --> 00:28:25,200
but the only kubernetes group i'm a part

00:28:22,720 --> 00:28:27,520
of is this group called devs

00:28:25,200 --> 00:28:28,240
so if i were to do just cube ctl get

00:28:27,520 --> 00:28:30,799
pods

00:28:28,240 --> 00:28:32,399
this is in the default namespace it's

00:28:30,799 --> 00:28:35,520
going to fail for me

00:28:32,399 --> 00:28:36,640
because that's not permitted for the

00:28:35,520 --> 00:28:39,760
devs

00:28:36,640 --> 00:28:41,520
kubernetes group and if i show you how i

00:28:39,760 --> 00:28:43,279
actually created that devs group within

00:28:41,520 --> 00:28:46,240
my kubernetes cluster

00:28:43,279 --> 00:28:49,200
i'll show you my role that i created and

00:28:46,240 --> 00:28:49,200
my role binding

00:28:51,360 --> 00:28:58,559
so here is my role

00:28:55,840 --> 00:29:00,080
this role is saying that uh let's call

00:28:58,559 --> 00:29:03,520
dev's access

00:29:00,080 --> 00:29:06,480
and it can only do these actions

00:29:03,520 --> 00:29:07,520
these verbs on you know these resources

00:29:06,480 --> 00:29:10,960
in this one

00:29:07,520 --> 00:29:13,440
dev name space and then where i actually

00:29:10,960 --> 00:29:13,919
bind this role to a particular group is

00:29:13,440 --> 00:29:17,440
in this

00:29:13,919 --> 00:29:20,320
role binding so you can see that

00:29:17,440 --> 00:29:22,240
here i've created this group called devs

00:29:20,320 --> 00:29:23,919
and this is where i'm referencing this

00:29:22,240 --> 00:29:26,000
role up above

00:29:23,919 --> 00:29:27,200
you can see that i'm referencing this

00:29:26,000 --> 00:29:31,279
role dev's access

00:29:27,200 --> 00:29:33,760
that's the role so this group devs

00:29:31,279 --> 00:29:34,480
is only going to be able to do these

00:29:33,760 --> 00:29:38,840
rules

00:29:34,480 --> 00:29:41,919
in this dev namespace so if i now

00:29:38,840 --> 00:29:45,840
add namespace of

00:29:41,919 --> 00:29:49,039
dev so now i can actually do stuff so

00:29:45,840 --> 00:29:52,240
um that's again because

00:29:49,039 --> 00:29:54,080
i've set up a mapping of teleport roles

00:29:52,240 --> 00:29:55,279
to teams that exist in my github

00:29:54,080 --> 00:29:57,200
organization

00:29:55,279 --> 00:29:58,960
and it's within the teleport roles that

00:29:57,200 --> 00:30:01,360
it's going to specify

00:29:58,960 --> 00:30:02,640
what kubernetes groups i can be what

00:30:01,360 --> 00:30:05,600
labels i can access

00:30:02,640 --> 00:30:05,600
all that kind of stuff

00:30:06,880 --> 00:30:14,000
so that concludes at a very high level

00:30:10,720 --> 00:30:17,120
um using teleport to get

00:30:14,000 --> 00:30:20,559
you know robust audit logs all mapped to

00:30:17,120 --> 00:30:21,840
a user as it is within sso as well as

00:30:20,559 --> 00:30:26,559
how to

00:30:21,840 --> 00:30:29,279
restrict users to particular groups or

00:30:26,559 --> 00:30:32,240
users within kubernetes clusters

00:30:29,279 --> 00:30:34,399
and again when i authenticate when i log

00:30:32,240 --> 00:30:37,760
in to teleport in the cli

00:30:34,399 --> 00:30:41,360
i am getting a short-lived cube config

00:30:37,760 --> 00:30:42,320
and so when i do a tsh log out this is

00:30:41,360 --> 00:30:44,880
the same as

00:30:42,320 --> 00:30:45,919
my session expiring my certificate's

00:30:44,880 --> 00:30:49,039
expiring

00:30:45,919 --> 00:30:50,880
if i try to do this coupe ctl again it's

00:30:49,039 --> 00:30:53,120
it's not going to work it's failing for

00:30:50,880 --> 00:30:53,120
me

00:30:53,360 --> 00:31:00,000
so let me switch back

00:30:56,399 --> 00:31:05,360
over to my slides

00:31:00,000 --> 00:31:08,080
my chrome browser here

00:31:05,360 --> 00:31:08,720
so to summarize what was covered um

00:31:08,080 --> 00:31:11,840
remember that

00:31:08,720 --> 00:31:13,440
kubernetes expands the attack surface of

00:31:11,840 --> 00:31:16,080
your environment

00:31:13,440 --> 00:31:16,559
so if you introduce a new layer you have

00:31:16,080 --> 00:31:19,760
to make

00:31:16,559 --> 00:31:22,320
some other layer less relevant

00:31:19,760 --> 00:31:23,120
so that includes turning out yes turning

00:31:22,320 --> 00:31:24,960
ssh

00:31:23,120 --> 00:31:27,120
off for the majority of your engineering

00:31:24,960 --> 00:31:29,039
team

00:31:27,120 --> 00:31:30,640
really limit who who has that kind of

00:31:29,039 --> 00:31:32,559
access

00:31:30,640 --> 00:31:34,320
because having both present can increase

00:31:32,559 --> 00:31:35,519
the probability of you getting

00:31:34,320 --> 00:31:38,640
compromised

00:31:35,519 --> 00:31:40,960
but if you do have ssh access enabled

00:31:38,640 --> 00:31:43,519
in your kubernetes cluster be sure to

00:31:40,960 --> 00:31:46,080
apply role-based access controls

00:31:43,519 --> 00:31:49,120
like was discussed in that demo and then

00:31:46,080 --> 00:31:51,039
synchronize the two so that

00:31:49,120 --> 00:31:53,519
everyone in your organization has the

00:31:51,039 --> 00:31:55,360
same authentication gateway and the same

00:31:53,519 --> 00:31:57,360
access gateway

00:31:55,360 --> 00:31:58,840
so again that means not introducing new

00:31:57,360 --> 00:32:00,000
means of authenticating into

00:31:58,840 --> 00:32:02,480
infrastructure

00:32:00,000 --> 00:32:03,679
means using the same authentication that

00:32:02,480 --> 00:32:08,559
everyone

00:32:03,679 --> 00:32:08,559
is is used to so the same sso login

00:32:09,039 --> 00:32:12,399
and then access to all of your different

00:32:11,440 --> 00:32:15,840
environments

00:32:12,399 --> 00:32:17,039
dev prod etc should all be controlled

00:32:15,840 --> 00:32:20,320
through that same gateway

00:32:17,039 --> 00:32:23,279
and rule based access control

00:32:20,320 --> 00:32:24,399
uh tied to your sso identities should be

00:32:23,279 --> 00:32:28,399
used

00:32:24,399 --> 00:32:31,600
and also be sure to regularly inspect

00:32:28,399 --> 00:32:33,200
and audit all access and lastly kind of

00:32:31,600 --> 00:32:36,720
the point of all this is

00:32:33,200 --> 00:32:39,919
please stop sharing cube configs

00:32:36,720 --> 00:32:40,720
create groups users use kubernetes

00:32:39,919 --> 00:32:44,720
native

00:32:40,720 --> 00:32:47,200
access controls and ideally you can use

00:32:44,720 --> 00:32:50,799
a tool like teleport to give you

00:32:47,200 --> 00:32:54,000
short-lived cube configs that will

00:32:50,799 --> 00:32:57,840
map yourself to the groups within

00:32:54,000 --> 00:33:00,240
kubernetes that you set up

00:32:57,840 --> 00:33:01,039
so some recommended stat next steps if

00:33:00,240 --> 00:33:02,799
you want to learn

00:33:01,039 --> 00:33:04,240
you know more about best practices for

00:33:02,799 --> 00:33:07,840
auditing auditing

00:33:04,240 --> 00:33:11,679
kubernetes we have this on youtube

00:33:07,840 --> 00:33:14,159
please also check us out on github and

00:33:11,679 --> 00:33:15,600
also you know we are hiring we would

00:33:14,159 --> 00:33:17,679
love to have you join us if you're

00:33:15,600 --> 00:33:20,559
excited about open source

00:33:17,679 --> 00:33:21,200
technologies kubernetes databases all

00:33:20,559 --> 00:33:23,279
that

00:33:21,200 --> 00:33:25,840
fun stuff please please check out our

00:33:23,279 --> 00:33:25,840
openings here

00:33:26,799 --> 00:33:30,480
and so this this concludes my my

00:33:29,600 --> 00:33:34,080
presentation

00:33:30,480 --> 00:33:37,360
so now let me take a look at the q a

00:33:34,080 --> 00:33:41,440
section see if there's anything in there

00:33:37,360 --> 00:33:44,880
take a peek done hello thank you

00:33:41,440 --> 00:33:44,880
yeah thank you for that session

00:33:45,279 --> 00:33:52,080
don't think i see any questions

00:33:49,679 --> 00:33:56,399
please if you have any questions for

00:33:52,080 --> 00:33:56,399
jonathan please put it up in the qrt

00:34:03,519 --> 00:34:07,519
so something that i do get asked kind of

00:34:06,159 --> 00:34:09,839
frequently is

00:34:07,519 --> 00:34:12,159
is how do you actually deploy teleport

00:34:09,839 --> 00:34:14,639
into kubernetes clusters

00:34:12,159 --> 00:34:15,839
um there's a few ways of doing that but

00:34:14,639 --> 00:34:17,520
the

00:34:15,839 --> 00:34:19,359
the one i recommend in the most common

00:34:17,520 --> 00:34:22,560
way easiest way

00:34:19,359 --> 00:34:25,359
is we have a helm chart that will

00:34:22,560 --> 00:34:27,520
essentially deploy teleport pods into

00:34:25,359 --> 00:34:30,399
your kubernetes clusters

00:34:27,520 --> 00:34:32,639
and then those teleport pods will

00:34:30,399 --> 00:34:36,000
establish a reverse tunnel

00:34:32,639 --> 00:34:37,599
back to your teleport proxy so

00:34:36,000 --> 00:34:39,679
essentially all of your coupe ctl

00:34:37,599 --> 00:34:40,800
requests will be through that reverse

00:34:39,679 --> 00:34:42,879
tunnel

00:34:40,800 --> 00:34:43,919
and that's how you can actually have a

00:34:42,879 --> 00:34:47,200
question

00:34:43,919 --> 00:34:50,159
here um i have a question of or

00:34:47,200 --> 00:34:50,960
said you mentioned databases what um

00:34:50,159 --> 00:34:54,560
database

00:34:50,960 --> 00:34:59,520
those teleports work with

00:34:54,560 --> 00:35:02,640
so currently postgres and mysql

00:34:59,520 --> 00:35:04,000
and that includes rds within aws so

00:35:02,640 --> 00:35:08,160
aurora

00:35:04,000 --> 00:35:10,960
and on our roadmap we are working on

00:35:08,160 --> 00:35:13,440
a lot more mongodbs is going to be our

00:35:10,960 --> 00:35:13,440
next one

00:35:13,680 --> 00:35:18,880
database access became available i think

00:35:16,160 --> 00:35:22,160
this month in our 6.0 release so

00:35:18,880 --> 00:35:31,680
yeah definitely excited to

00:35:22,160 --> 00:35:35,359
for people to try that out

00:35:31,680 --> 00:35:35,359
any other questions i can answer

00:35:36,400 --> 00:35:47,599
i do not see any other questions awesome

00:35:44,480 --> 00:35:50,800
well if there are no more questions

00:35:47,599 --> 00:35:51,520
um i'll hand it back over to you and if

00:35:50,800 --> 00:35:53,760
anybody if

00:35:51,520 --> 00:35:54,800
you think of questions outside of this

00:35:53,760 --> 00:35:57,119
uh

00:35:54,800 --> 00:35:58,640
you know feel free to reach out to me

00:35:57,119 --> 00:36:01,200
twitter linkedin

00:35:58,640 --> 00:36:03,599
email whatever i'm happy to answer what

00:36:01,200 --> 00:36:06,160
i can answer and we do have a vibrant

00:36:03,599 --> 00:36:08,079
open source community so feel free to

00:36:06,160 --> 00:36:13,839
join our slack channel and participate

00:36:08,079 --> 00:36:13,839
in that as well

00:36:14,640 --> 00:36:16,720

YouTube URL: https://www.youtube.com/watch?v=6auCFMMZgYE


