Title: Practical Security for Web Applications (extended session) - Chris Holland - TriNet - OS101
Publication date: 2021-04-10
Playlist: Open Source 101 2021
Description: 
	Chris Holland, Director of Engineering at TriNet, delivered the extended (90 minutes) talk "Practical Security for Web Applications" at Open Source 101 on Tuesday, March 30, 2021.

Abstract:
Explore effective methods to identify & avoid the most common and devastating security pitfalls in Web Applications.

When it comes to an enterprise’s exposure to security vulnerabilities, one could easily argue that its web presence is by far its greatest threat. There are many ways to build vulnerable applications and a few effective ways to “build them right”. We’ll instrument you to stay on the right side of this equation.

Basic Resources and Tooling
—————————–
We’ll look at the OWASP Top 10
Open-Source Code Analysis for your CI/CD
Open-Source Security Scanning
Low-level Threat Avoidance
—————————-
Avoiding SQL Injections
Dangers of not properly using an ORM
NoSQL injections
Avoiding CSRF
Avoiding XSS
Data Scrubbing
Data Rendering
Application Threat Avoidance
—————————–
User Authentication / Password Hashing
OAuth Security
Resource Access
Multi-Tenancy: Users & Companies

Chris on the internets:
Twitter: https://twitter.com/chrisholland
LinkedIn: https://www.linkedin.com/in/chrisholland
GitHub: https://github.com/elchris/hashtuner
Captions: 
	00:00:04,880 --> 00:00:09,679
so welcome to practical security for

00:00:07,120 --> 00:00:11,440
web applications uh we're going to cover

00:00:09,679 --> 00:00:15,200
a lot of topics

00:00:11,440 --> 00:00:18,400
uh and uh you can go to this bitly

00:00:15,200 --> 00:00:19,279
right here bitly security slides and it

00:00:18,400 --> 00:00:22,480
will download

00:00:19,279 --> 00:00:24,160
a pdf of the entire presentation with

00:00:22,480 --> 00:00:25,599
all of the links in there and all the

00:00:24,160 --> 00:00:26,720
information that i reference so you

00:00:25,599 --> 00:00:28,400
don't have to feel pressure

00:00:26,720 --> 00:00:30,400
to take pictures you know during the

00:00:28,400 --> 00:00:32,160
presentation or screenshots

00:00:30,400 --> 00:00:35,200
you will have all the information in

00:00:32,160 --> 00:00:35,200
there um

00:00:35,680 --> 00:00:39,440
and uh so this talk i will cover a lot

00:00:39,200 --> 00:00:42,320
of

00:00:39,440 --> 00:00:42,640
introductory topics um there are a lot

00:00:42,320 --> 00:00:44,399
of

00:00:42,640 --> 00:00:46,239
amazing folks getting into web

00:00:44,399 --> 00:00:50,160
application development

00:00:46,239 --> 00:00:51,120
and uh there there are some topics when

00:00:50,160 --> 00:00:53,520
it comes to

00:00:51,120 --> 00:00:54,320
best practices for for security which

00:00:53,520 --> 00:00:58,239
have been around

00:00:54,320 --> 00:00:59,840
for a while and um a lot a lot of folks

00:00:58,239 --> 00:01:01,359
have not yet had a chance to acquaint

00:00:59,840 --> 00:01:03,199
themselves uh with with

00:01:01,359 --> 00:01:05,360
a lot of these topics and so we're going

00:01:03,199 --> 00:01:06,080
to cover them um many of these topics

00:01:05,360 --> 00:01:08,960
will

00:01:06,080 --> 00:01:09,840
seem very familiar to a lot of you uh i

00:01:08,960 --> 00:01:12,479
do add

00:01:09,840 --> 00:01:13,040
some different angles based on my

00:01:12,479 --> 00:01:16,400
experience

00:01:13,040 --> 00:01:17,360
on some of these topics so um that'll be

00:01:16,400 --> 00:01:20,880
that

00:01:17,360 --> 00:01:22,320
and uh so let's uh let's get started

00:01:20,880 --> 00:01:24,840
this is me on twitter so feel free to

00:01:22,320 --> 00:01:26,720
connect with me and uh you know ask me

00:01:24,840 --> 00:01:30,079
questions

00:01:26,720 --> 00:01:33,920
okay so i'm based in austin texas so

00:01:30,079 --> 00:01:35,840
hello um so here's a little bit about me

00:01:33,920 --> 00:01:37,680
there's me on twitter i have a link to

00:01:35,840 --> 00:01:39,360
the different talks i give and some

00:01:37,680 --> 00:01:41,200
background about about me

00:01:39,360 --> 00:01:43,119
i've done a uh some open source

00:01:41,200 --> 00:01:45,119
contributions uh this hash tuner is an

00:01:43,119 --> 00:01:47,439
open source project i started uh

00:01:45,119 --> 00:01:49,280
last year uh it's very small and we'll

00:01:47,439 --> 00:01:52,000
cover that a little bit later

00:01:49,280 --> 00:01:53,920
i've contributed some things to some

00:01:52,000 --> 00:01:57,439
projects as well so

00:01:53,920 --> 00:01:59,439
there's that uh and again the slides you

00:01:57,439 --> 00:02:03,280
can download them at this url

00:01:59,439 --> 00:02:04,000
okay so uh first let's look at a high

00:02:03,280 --> 00:02:06,320
level

00:02:04,000 --> 00:02:09,360
software is everywhere you know if you

00:02:06,320 --> 00:02:11,599
look at banking healthcare finance

00:02:09,360 --> 00:02:13,360
travel entertainment communications home

00:02:11,599 --> 00:02:16,080
automation alarm systems

00:02:13,360 --> 00:02:17,040
fire detection surveillance military

00:02:16,080 --> 00:02:20,720
aerospace

00:02:17,040 --> 00:02:22,720
and you often all see you will also see

00:02:20,720 --> 00:02:24,800
a lot of software in the cars that we

00:02:22,720 --> 00:02:26,400
drive every day

00:02:24,800 --> 00:02:27,760
and tesla for example has done some

00:02:26,400 --> 00:02:29,040
really cool things with kind of

00:02:27,760 --> 00:02:31,599
autonomous cars that

00:02:29,040 --> 00:02:33,280
you know they're trying out so you might

00:02:31,599 --> 00:02:34,560
ask yourself what could possibly go

00:02:33,280 --> 00:02:38,239
wrong

00:02:34,560 --> 00:02:40,239
obviously this right um it's uh

00:02:38,239 --> 00:02:41,920
you know there are a lot of uh there's

00:02:40,239 --> 00:02:43,920
been a lot of security issues in cars

00:02:41,920 --> 00:02:45,440
for example where hackers could remotely

00:02:43,920 --> 00:02:46,720
kill a jeep on the highway you know that

00:02:45,440 --> 00:02:49,519
was pretty creepy

00:02:46,720 --> 00:02:50,480
uh that was a 2015 article uh and then a

00:02:49,519 --> 00:02:52,800
couple years later

00:02:50,480 --> 00:02:54,319
they came back actually in 2016 they

00:02:52,800 --> 00:02:57,200
came back and did it again

00:02:54,319 --> 00:02:57,840
so uh you know there's a lot of security

00:02:57,200 --> 00:03:01,200
flaws in

00:02:57,840 --> 00:03:03,200
any software um and uh

00:03:01,200 --> 00:03:05,200
you know i think it's it's mindful it's

00:03:03,200 --> 00:03:05,680
it's helpful to keep in mind what is

00:03:05,200 --> 00:03:08,720
your

00:03:05,680 --> 00:03:10,800
your exposure to a lot of these security

00:03:08,720 --> 00:03:12,720
flaws if you look at your company and if

00:03:10,800 --> 00:03:16,080
you look at your business data

00:03:12,720 --> 00:03:18,000
um most often your business data will

00:03:16,080 --> 00:03:19,200
live in some kind of you know your on

00:03:18,000 --> 00:03:20,959
your ig network

00:03:19,200 --> 00:03:23,680
or on your private cloud or your public

00:03:20,959 --> 00:03:26,319
cloud and you might interface with

00:03:23,680 --> 00:03:27,200
your business data through a crm system

00:03:26,319 --> 00:03:28,799
for example an

00:03:27,200 --> 00:03:31,200
inventory management system which are

00:03:28,799 --> 00:03:33,200
kind of employee facing

00:03:31,200 --> 00:03:36,239
kind of back-end applications that are

00:03:33,200 --> 00:03:38,319
not kind of outward-facing

00:03:36,239 --> 00:03:41,519
and then you might require your

00:03:38,319 --> 00:03:44,560
employees to get on a vpn network

00:03:41,519 --> 00:03:46,239
to interact with these kind of back-end

00:03:44,560 --> 00:03:49,200
systems systems

00:03:46,239 --> 00:03:49,599
at the same time though you're going to

00:03:49,200 --> 00:03:51,599
have

00:03:49,599 --> 00:03:54,560
public facing aspects to your business

00:03:51,599 --> 00:03:56,560
data you might expose some of it through

00:03:54,560 --> 00:03:58,239
through your your website which has some

00:03:56,560 --> 00:04:00,799
content on there or

00:03:58,239 --> 00:04:01,680
your software as a service application

00:04:00,799 --> 00:04:03,840
um

00:04:01,680 --> 00:04:04,959
or your api right so these could be

00:04:03,840 --> 00:04:08,400
outward facing

00:04:04,959 --> 00:04:12,319
um uh exposures to your business data

00:04:08,400 --> 00:04:14,879
uh and often this data will be exposed

00:04:12,319 --> 00:04:16,239
over ports 80 and 443 which are

00:04:14,879 --> 00:04:19,759
basically your

00:04:16,239 --> 00:04:21,120
web ports so

00:04:19,759 --> 00:04:23,120
one of the things that attackers will

00:04:21,120 --> 00:04:24,479
try to do is they will try to compromise

00:04:23,120 --> 00:04:27,600
your employees

00:04:24,479 --> 00:04:31,040
so they can compromise an employee's

00:04:27,600 --> 00:04:33,360
work computer to get onto their vpn um

00:04:31,040 --> 00:04:35,280
to try to um attack your bit to

00:04:33,360 --> 00:04:38,000
exfiltrate your business data from

00:04:35,280 --> 00:04:38,880
uh from within another thing they're

00:04:38,000 --> 00:04:42,000
going to try to do

00:04:38,880 --> 00:04:45,520
is try to get your business data

00:04:42,000 --> 00:04:48,240
through its public facing aspect of it

00:04:45,520 --> 00:04:49,680
um and this is what we're going to focus

00:04:48,240 --> 00:04:52,720
on on this presentation

00:04:49,680 --> 00:04:54,080
today uh this is really uh

00:04:52,720 --> 00:04:56,160
you know we're not going to touch on

00:04:54,080 --> 00:04:57,600
malware and how your employees can get

00:04:56,160 --> 00:04:58,960
infected with malware

00:04:57,600 --> 00:05:00,479
and the kind of best practices for all

00:04:58,960 --> 00:05:01,199
these things we're not going to look at

00:05:00,479 --> 00:05:04,639
that

00:05:01,199 --> 00:05:07,680
we're going to look at the existing

00:05:04,639 --> 00:05:10,880
public facing aspects

00:05:07,680 --> 00:05:12,960
um to to your business data through your

00:05:10,880 --> 00:05:14,720
web applications

00:05:12,960 --> 00:05:17,440
so uh if you start looking at the

00:05:14,720 --> 00:05:19,280
business risks uh when it comes to

00:05:17,440 --> 00:05:20,800
your data getting compromised you know

00:05:19,280 --> 00:05:22,720
you have data ex filtration

00:05:20,800 --> 00:05:24,160
with uh sensitive customer data you have

00:05:22,720 --> 00:05:27,440
intellectual property

00:05:24,160 --> 00:05:28,720
you have unauthorized operations such as

00:05:27,440 --> 00:05:31,520
financial crime

00:05:28,720 --> 00:05:33,280
uh competitive business disruption uh

00:05:31,520 --> 00:05:34,479
establishing advanced persistent threats

00:05:33,280 --> 00:05:35,919
you know these are

00:05:34,479 --> 00:05:38,160
you know some of the many things that

00:05:35,919 --> 00:05:39,840
can happen when when you're

00:05:38,160 --> 00:05:41,600
when your data gets compromised and

00:05:39,840 --> 00:05:42,800
there's been a lot of high profile

00:05:41,600 --> 00:05:44,560
security breaches

00:05:42,800 --> 00:05:46,320
uh so when you download the pdf you'll

00:05:44,560 --> 00:05:49,199
be able to just click on these uh

00:05:46,320 --> 00:05:50,479
links which have uh you know which are

00:05:49,199 --> 00:05:54,000
numerous articles

00:05:50,479 --> 00:05:55,919
on different high-profile

00:05:54,000 --> 00:05:58,160
data breaches and there are you know

00:05:55,919 --> 00:06:01,199
constantly new ones every day so

00:05:58,160 --> 00:06:03,120
you know you can go check those out

00:06:01,199 --> 00:06:04,720
here in the united states we've had a

00:06:03,120 --> 00:06:08,000
number of high-profile ones

00:06:04,720 --> 00:06:10,800
yahoo had some issues the

00:06:08,000 --> 00:06:11,600
the government office of personal

00:06:10,800 --> 00:06:15,039
personnel

00:06:11,600 --> 00:06:17,039
management the opm uh had

00:06:15,039 --> 00:06:18,880
some uh issues with nine million

00:06:17,039 --> 00:06:20,800
government employee records got stolen

00:06:18,880 --> 00:06:22,960
so that's always uncomfortable

00:06:20,800 --> 00:06:25,440
um equifax it's a credit reporting

00:06:22,960 --> 00:06:27,120
agency here in the united states

00:06:25,440 --> 00:06:28,560
uh they got compromised as well that was

00:06:27,120 --> 00:06:30,800
pretty bad uh

00:06:28,560 --> 00:06:32,479
so you know there are a lot of articles

00:06:30,800 --> 00:06:36,160
uh you know about all of these

00:06:32,479 --> 00:06:38,160
um and so this kind of brings us to

00:06:36,160 --> 00:06:39,600
web applications because there are some

00:06:38,160 --> 00:06:41,360
interesting

00:06:39,600 --> 00:06:43,440
aspects of web applications that make

00:06:41,360 --> 00:06:45,759
them um especially

00:06:43,440 --> 00:06:47,680
uh compromisable first of all there are

00:06:45,759 --> 00:06:48,960
millions of websites and applications

00:06:47,680 --> 00:06:51,919
out there

00:06:48,960 --> 00:06:52,880
and it's very easy to automate the

00:06:51,919 --> 00:06:54,720
scanning of

00:06:52,880 --> 00:06:58,400
all of these websites and all of these

00:06:54,720 --> 00:07:00,400
web applications using automated tools

00:06:58,400 --> 00:07:02,000
there is a lot of sensitive information

00:07:00,400 --> 00:07:04,720
behind those

00:07:02,000 --> 00:07:06,720
those web applications they also present

00:07:04,720 --> 00:07:08,319
a very large attack surface with a ton

00:07:06,720 --> 00:07:09,280
of attack vectors which you know we're

00:07:08,319 --> 00:07:11,919
going to look at

00:07:09,280 --> 00:07:13,440
later on the presentation and also there

00:07:11,919 --> 00:07:14,400
are things like denial service you know

00:07:13,440 --> 00:07:15,759
we're not going to really

00:07:14,400 --> 00:07:17,520
talk about this i have a separate talk

00:07:15,759 --> 00:07:19,520
on that topic um but it's

00:07:17,520 --> 00:07:21,360
it's another big nightmare it's when

00:07:19,520 --> 00:07:25,280
people try to take your application down

00:07:21,360 --> 00:07:26,880
um because they can so um

00:07:25,280 --> 00:07:28,319
so today we're gonna look at some

00:07:26,880 --> 00:07:31,520
strategies uh

00:07:28,319 --> 00:07:33,280
uh you know for improving our security

00:07:31,520 --> 00:07:35,039
posture and i want to set expectation

00:07:33,280 --> 00:07:37,120
that you know in my opinion

00:07:35,039 --> 00:07:38,240
uh and it's also the prevalent industry

00:07:37,120 --> 00:07:40,560
opinion is that you know

00:07:38,240 --> 00:07:41,440
there's no such thing as a security in

00:07:40,560 --> 00:07:44,160
absolute

00:07:41,440 --> 00:07:45,360
terms right the best we can do is make

00:07:44,160 --> 00:07:48,319
ourselves

00:07:45,360 --> 00:07:49,680
less insecure and by having you know

00:07:48,319 --> 00:07:52,639
just kind of

00:07:49,680 --> 00:07:54,240
um many layers to to kind of improve our

00:07:52,639 --> 00:07:55,680
security posture so

00:07:54,240 --> 00:07:58,560
uh one of the first thing we want to do

00:07:55,680 --> 00:08:02,319
is to educate humans

00:07:58,560 --> 00:08:03,759
and when we do that we're going to

00:08:02,319 --> 00:08:05,440
discuss a little bit about you know code

00:08:03,759 --> 00:08:08,560
reviews and what happens when the

00:08:05,440 --> 00:08:11,120
things are pull requested

00:08:08,560 --> 00:08:13,440
the next step is to look at kind of our

00:08:11,120 --> 00:08:16,800
our

00:08:13,440 --> 00:08:20,000
ci pipeline look at different tools for

00:08:16,800 --> 00:08:20,400
automated code scanning then we'll we'll

00:08:20,000 --> 00:08:23,360
look

00:08:20,400 --> 00:08:25,280
at different tools for dependency

00:08:23,360 --> 00:08:27,759
vulnerability checks

00:08:25,280 --> 00:08:30,000
because part of a winning strategy is to

00:08:27,759 --> 00:08:31,039
first of all educate humans but you know

00:08:30,000 --> 00:08:33,680
we're not going to

00:08:31,039 --> 00:08:35,519
catch everything at all times and having

00:08:33,680 --> 00:08:37,360
tools to kind of help us out

00:08:35,519 --> 00:08:39,599
to catch additional things that we may

00:08:37,360 --> 00:08:41,599
miss will help us out so

00:08:39,599 --> 00:08:43,839
code scanning is part of it uh

00:08:41,599 --> 00:08:46,240
dependency vulnerability checks so

00:08:43,839 --> 00:08:47,360
uh here this is an open source it's a

00:08:46,240 --> 00:08:50,080
conference about

00:08:47,360 --> 00:08:52,399
open source software and we use hundreds

00:08:50,080 --> 00:08:53,360
of libraries that are open source on any

00:08:52,399 --> 00:08:55,519
project

00:08:53,360 --> 00:08:57,279
and if you look if you know if you look

00:08:55,519 --> 00:08:58,800
at urimah's talk and

00:08:57,279 --> 00:09:01,920
jennifer's talk if you look at all the

00:08:58,800 --> 00:09:03,760
things that it takes to make a

00:09:01,920 --> 00:09:05,360
open source project successful there are

00:09:03,760 --> 00:09:06,480
many things that can go wrong where

00:09:05,360 --> 00:09:09,120
security

00:09:06,480 --> 00:09:09,839
flaws could get introduced in those

00:09:09,120 --> 00:09:13,120
projects

00:09:09,839 --> 00:09:15,120
and having tools to stay aware of

00:09:13,120 --> 00:09:16,160
these security vulnerabilities and kind

00:09:15,120 --> 00:09:19,360
of notify you and

00:09:16,160 --> 00:09:21,200
allow you to upgrade them

00:09:19,360 --> 00:09:22,959
automatically or so might automatically

00:09:21,200 --> 00:09:24,880
will definitely improve your security

00:09:22,959 --> 00:09:26,320
posture

00:09:24,880 --> 00:09:28,160
then we'll touch on automated

00:09:26,320 --> 00:09:29,760
penetration tests uh

00:09:28,160 --> 00:09:31,600
we'll look at web application firewalls

00:09:29,760 --> 00:09:32,880
and when all else fails you know we'll

00:09:31,600 --> 00:09:36,240
mention logging

00:09:32,880 --> 00:09:37,360
um so so the the bolded topics are the

00:09:36,240 --> 00:09:39,920
topics that we're gonna

00:09:37,360 --> 00:09:40,800
you know look at today and below this

00:09:39,920 --> 00:09:43,360
red line

00:09:40,800 --> 00:09:46,399
you know i i i like to call out the

00:09:43,360 --> 00:09:48,800
importance of trying to catch security

00:09:46,399 --> 00:09:49,440
flaws above this red line because when

00:09:48,800 --> 00:09:52,560
you

00:09:49,440 --> 00:09:55,760
catch security flaws below the red line

00:09:52,560 --> 00:09:57,680
um then the the cost kind of goes up

00:09:55,760 --> 00:09:59,200
pretty dramatically um because it kind

00:09:57,680 --> 00:09:59,760
of means that your code is already in

00:09:59,200 --> 00:10:03,440
the wild

00:09:59,760 --> 00:10:05,600
so um so at the top

00:10:03,440 --> 00:10:06,880
of this pyramid overhead this at the top

00:10:05,600 --> 00:10:09,440
of this waterfall here

00:10:06,880 --> 00:10:10,079
uh at the top left we're going to talk

00:10:09,440 --> 00:10:12,399
about

00:10:10,079 --> 00:10:13,440
educate humans because this is the thing

00:10:12,399 --> 00:10:16,640
that

00:10:13,440 --> 00:10:19,920
uh it is the first line of defense

00:10:16,640 --> 00:10:23,200
that is critically important so

00:10:19,920 --> 00:10:24,079
to educate humans um i like to reference

00:10:23,200 --> 00:10:25,680
owasp

00:10:24,079 --> 00:10:27,600
it's an organization that's been around

00:10:25,680 --> 00:10:29,360
for a long time i highly recommend

00:10:27,600 --> 00:10:30,320
anybody who works in web application

00:10:29,360 --> 00:10:32,720
development

00:10:30,320 --> 00:10:34,480
to spend a lot of time on owasp.org

00:10:32,720 --> 00:10:37,279
we're going to reference their work

00:10:34,480 --> 00:10:39,200
heavily throughout this presentation so

00:10:37,279 --> 00:10:43,600
i highly recommend them

00:10:39,200 --> 00:10:47,839
um so uh the thing about owasp is

00:10:43,600 --> 00:10:47,839
uh they advocate

00:10:52,480 --> 00:10:58,399
okay so um all right so uh the

00:10:56,000 --> 00:11:00,000
the advocate approaching application

00:10:58,399 --> 00:11:02,320
security as people process

00:11:00,000 --> 00:11:04,000
and technology um and i think it's it's

00:11:02,320 --> 00:11:07,120
a really good way to look at it

00:11:04,000 --> 00:11:08,000
uh they uh they regularly publish their

00:11:07,120 --> 00:11:10,000
owasp

00:11:08,000 --> 00:11:11,680
top ten which is a list of top top ten

00:11:10,000 --> 00:11:13,279
vulnerabilities and in this presentation

00:11:11,680 --> 00:11:14,720
we're gonna touch on some of those top

00:11:13,279 --> 00:11:16,480
10 vulnerabilities

00:11:14,720 --> 00:11:17,920
as far as the things that i've seen out

00:11:16,480 --> 00:11:19,680
there in the wild that have been you

00:11:17,920 --> 00:11:21,279
know pretty impactful on applications

00:11:19,680 --> 00:11:24,880
that you know that i've worked on

00:11:21,279 --> 00:11:28,160
uh since the you know mid 90s um

00:11:24,880 --> 00:11:30,959
so here's the url to the os

00:11:28,160 --> 00:11:32,320
top 10 so definitely spend some time on

00:11:30,959 --> 00:11:34,399
it

00:11:32,320 --> 00:11:35,760
so that's kind of to educate humans and

00:11:34,399 --> 00:11:37,279
we're going to come back to these

00:11:35,760 --> 00:11:37,680
vulnerabilities but now i want to touch

00:11:37,279 --> 00:11:40,079
on

00:11:37,680 --> 00:11:42,320
tooling right because as we just talked

00:11:40,079 --> 00:11:44,800
about tooling is an important aspect to

00:11:42,320 --> 00:11:47,279
supplement our security posture

00:11:44,800 --> 00:11:48,160
and first off let's look at ci

00:11:47,279 --> 00:11:50,320
continuous

00:11:48,160 --> 00:11:52,079
integration and how you can weave

00:11:50,320 --> 00:11:55,200
tooling into your overall

00:11:52,079 --> 00:11:58,000
ci strategy so there are a lot of ci

00:11:55,200 --> 00:12:00,800
frameworks and i believe later on today

00:11:58,000 --> 00:12:02,399
there is an in-depth section on github

00:12:00,800 --> 00:12:03,760
actions so i highly recommend that you

00:12:02,399 --> 00:12:08,079
check it out

00:12:03,760 --> 00:12:10,000
but i've worked with a circle ci as well

00:12:08,079 --> 00:12:11,680
and i use it on my open source project

00:12:10,000 --> 00:12:13,440
uh on some other projects i've

00:12:11,680 --> 00:12:15,600
i've worked with travis ci it works

00:12:13,440 --> 00:12:16,959
really well as well uh you got jenkins

00:12:15,600 --> 00:12:18,800
you got team city i mean there's you

00:12:16,959 --> 00:12:21,440
know there's a bunch of ecosystems

00:12:18,800 --> 00:12:22,639
uh to build ci pipelines and you know

00:12:21,440 --> 00:12:24,240
whatever works for your project you

00:12:22,639 --> 00:12:27,279
should check it out

00:12:24,240 --> 00:12:31,440
so yeah so i've worked with these um

00:12:27,279 --> 00:12:34,800
in jenkins as well so

00:12:31,440 --> 00:12:37,360
uh if uh if

00:12:34,800 --> 00:12:38,480
if you look at you know different

00:12:37,360 --> 00:12:41,600
security tools

00:12:38,480 --> 00:12:44,560
um as part of your ci

00:12:41,600 --> 00:12:44,560
you're going to have a

00:12:44,639 --> 00:12:50,720
static code analysis of your source code

00:12:47,760 --> 00:12:52,639
from a security standpoint also what

00:12:50,720 --> 00:12:57,200
you're going to try to add in your

00:12:52,639 --> 00:13:00,560
ci pipeline are dependency vulnerability

00:12:57,200 --> 00:13:04,800
checks so these things happen

00:13:00,560 --> 00:13:06,560
while your code is is moving around

00:13:04,800 --> 00:13:09,839
once your code has been deployed let's

00:13:06,560 --> 00:13:13,519
say on a development or staging server

00:13:09,839 --> 00:13:15,360
um you you it's a good idea to look at

00:13:13,519 --> 00:13:18,560
automated penetration tests

00:13:15,360 --> 00:13:19,920
um it's it's you want to have a lot of

00:13:18,560 --> 00:13:21,519
these automated pension

00:13:19,920 --> 00:13:23,600
penetration tests happen on your

00:13:21,519 --> 00:13:25,839
development and staging servers

00:13:23,600 --> 00:13:27,760
uh because once your code is in the wild

00:13:25,839 --> 00:13:29,600
you get penetration tests for free

00:13:27,760 --> 00:13:31,120
because hackers are always you know

00:13:29,600 --> 00:13:32,560
trying to compromise your application

00:13:31,120 --> 00:13:35,680
right if you tell your logs

00:13:32,560 --> 00:13:36,160
on any application that is live you will

00:13:35,680 --> 00:13:38,560
see

00:13:36,160 --> 00:13:40,240
constant attempts from automated tools

00:13:38,560 --> 00:13:42,320
to try to break into your application i

00:13:40,240 --> 00:13:45,360
mean so you get penetration tests

00:13:42,320 --> 00:13:46,800
for free in the wild in production

00:13:45,360 --> 00:13:48,800
but that's you want to make sure you

00:13:46,800 --> 00:13:51,279
cash issues long before that

00:13:48,800 --> 00:13:52,160
right so uh so i'm going to show you

00:13:51,279 --> 00:13:55,360
kind of a

00:13:52,160 --> 00:13:57,760
a possible way to set up a ci pipeline

00:13:55,360 --> 00:13:58,880
uh there are different ways of doing it

00:13:57,760 --> 00:14:00,639
these are some of the things that you

00:13:58,880 --> 00:14:03,839
know i've done with my teams

00:14:00,639 --> 00:14:05,519
so uh when there's a uh

00:14:03,839 --> 00:14:06,959
when you push a code change you may have

00:14:05,519 --> 00:14:09,360
a git hook

00:14:06,959 --> 00:14:10,800
that might trigger your uh continuous

00:14:09,360 --> 00:14:12,800
integration pipeline

00:14:10,800 --> 00:14:15,680
um on which you might run your unit

00:14:12,800 --> 00:14:18,320
tests as well as your integration tests

00:14:15,680 --> 00:14:18,720
and then you you might start your static

00:14:18,320 --> 00:14:20,639
code

00:14:18,720 --> 00:14:22,320
analysis uh where you're going to

00:14:20,639 --> 00:14:25,360
analyze your code using

00:14:22,320 --> 00:14:27,519
automated tools which will analyze your

00:14:25,360 --> 00:14:30,720
code from two standpoints

00:14:27,519 --> 00:14:34,240
first from a quality standpoint

00:14:30,720 --> 00:14:37,519
and also from a security standpoint

00:14:34,240 --> 00:14:39,519
so quality is kind of a lot of

00:14:37,519 --> 00:14:40,959
smell tests to figure out how

00:14:39,519 --> 00:14:42,480
maintainable your code is and then

00:14:40,959 --> 00:14:44,399
security that's kind of the main topic

00:14:42,480 --> 00:14:46,240
of this presentation

00:14:44,399 --> 00:14:47,519
and then once you've done your static

00:14:46,240 --> 00:14:49,360
code analysis

00:14:47,519 --> 00:14:51,120
that's when you're also going to fire up

00:14:49,360 --> 00:14:54,079
your dependency

00:14:51,120 --> 00:14:55,199
vulnerability checks again that's to

00:14:54,079 --> 00:14:58,160
detect

00:14:55,199 --> 00:14:59,680
uh which of the open source software

00:14:58,160 --> 00:15:00,720
packages you're using in your

00:14:59,680 --> 00:15:04,240
application

00:15:00,720 --> 00:15:07,680
um are have known vulnerabilities

00:15:04,240 --> 00:15:09,680
um so let's say you pass all those

00:15:07,680 --> 00:15:11,600
checks that's when you might deploy your

00:15:09,680 --> 00:15:13,760
code to a server it could be development

00:15:11,600 --> 00:15:15,600
could be staging for example

00:15:13,760 --> 00:15:18,079
and then that's when it's a good idea to

00:15:15,600 --> 00:15:21,120
start doing um

00:15:18,079 --> 00:15:22,959
automated penetration tests uh against

00:15:21,120 --> 00:15:25,199
the code that is deployed

00:15:22,959 --> 00:15:26,560
so that's kind of a you know one way of

00:15:25,199 --> 00:15:28,240
doing things uh you know

00:15:26,560 --> 00:15:29,759
different teams do things slightly

00:15:28,240 --> 00:15:31,279
differently so i just kind of wanted to

00:15:29,759 --> 00:15:33,040
call out all these moving parts so you

00:15:31,279 --> 00:15:33,839
can make your own educated decision as

00:15:33,040 --> 00:15:35,759
to

00:15:33,839 --> 00:15:37,600
you know defining a winning strategy for

00:15:35,759 --> 00:15:40,959
yourself

00:15:37,600 --> 00:15:43,759
okay so uh so now we're gonna

00:15:40,959 --> 00:15:44,320
going to look at some of these tools uh

00:15:43,759 --> 00:15:46,560
in

00:15:44,320 --> 00:15:47,519
uh a little bit of depth so i've kind of

00:15:46,560 --> 00:15:50,800
harvested

00:15:47,519 --> 00:15:54,160
uh a number of open source tools uh

00:15:50,800 --> 00:15:55,440
in for every category

00:15:54,160 --> 00:15:57,360
and there are also a lot of good

00:15:55,440 --> 00:15:58,800
commercial tools but i try to avoid

00:15:57,360 --> 00:16:00,160
plug-in commercial tools because then it

00:15:58,800 --> 00:16:01,680
kind of becomes uh

00:16:00,160 --> 00:16:03,839
you know more contentious so right now

00:16:01,680 --> 00:16:04,800
i'm just going to try to stick to free

00:16:03,839 --> 00:16:08,160
open source tools

00:16:04,800 --> 00:16:12,079
so first let's look at automated code

00:16:08,160 --> 00:16:16,000
scanning tools so

00:16:12,079 --> 00:16:18,320
here we go also known as static analysis

00:16:16,000 --> 00:16:19,440
and the goal of these tools is to find

00:16:18,320 --> 00:16:23,920
vulnerabilities

00:16:19,440 --> 00:16:27,680
in your code in the code that you wrote

00:16:23,920 --> 00:16:30,800
okay so um o wasp has a list

00:16:27,680 --> 00:16:32,720
of source code analysis tools so

00:16:30,800 --> 00:16:35,360
you know i highly recommend recommend

00:16:32,720 --> 00:16:35,360
checking it out

00:16:35,600 --> 00:16:41,440
i've used uh sonar cube um

00:16:38,720 --> 00:16:42,000
so the nice thing about sonar cube is

00:16:41,440 --> 00:16:44,399
it's a

00:16:42,000 --> 00:16:46,000
plugable architecture and they have

00:16:44,399 --> 00:16:48,839
plugins for

00:16:46,000 --> 00:16:50,480
pretty much every every language out

00:16:48,839 --> 00:16:53,360
there

00:16:50,480 --> 00:16:54,720
so if you're trying to scan code in a

00:16:53,360 --> 00:16:58,000
php application

00:16:54,720 --> 00:17:00,240
i've used the sonar php plugin for sonar

00:16:58,000 --> 00:17:02,160
cube and that's worked really well

00:17:00,240 --> 00:17:03,519
but there's also some other programs you

00:17:02,160 --> 00:17:07,439
can use there's a proc

00:17:03,519 --> 00:17:10,400
palette you got phpcs security audit

00:17:07,439 --> 00:17:11,439
um if you're working with javascript you

00:17:10,400 --> 00:17:15,199
can do

00:17:11,439 --> 00:17:18,880
you can use sonar cube's sonar js

00:17:15,199 --> 00:17:21,520
plug-in to analyze your javascript code

00:17:18,880 --> 00:17:24,319
if you're working on csharp.net uh there

00:17:21,520 --> 00:17:26,559
is a project called security code scan

00:17:24,319 --> 00:17:28,799
uh if you're working in java there's a

00:17:26,559 --> 00:17:30,840
findset bugs

00:17:28,799 --> 00:17:34,240
spot bugs and then if you're working in

00:17:30,840 --> 00:17:37,760
ruby uh you got brickman scanner

00:17:34,240 --> 00:17:41,120
um uh

00:17:37,760 --> 00:17:46,720
uh ruby gems uh you got bundler audit

00:17:41,120 --> 00:17:46,720
dawn scanner uh sonar ruby as well

00:17:48,720 --> 00:17:52,880
so yeah there you go again you have all

00:17:50,720 --> 00:17:55,039
these links available in the pdf

00:17:52,880 --> 00:17:56,320
um so you can you know check all those

00:17:55,039 --> 00:17:59,520
out and then for python

00:17:56,320 --> 00:18:02,559
you have bandit

00:17:59,520 --> 00:18:03,280
and sonar oh sorry i skipped sonar

00:18:02,559 --> 00:18:07,520
python

00:18:03,280 --> 00:18:09,600
python as well okay so that was for

00:18:07,520 --> 00:18:11,360
code scanning again finding

00:18:09,600 --> 00:18:13,520
vulnerabilities in your code now we're

00:18:11,360 --> 00:18:15,600
going to look at dependency

00:18:13,520 --> 00:18:17,280
vulnerability checks and that's to find

00:18:15,600 --> 00:18:20,160
vulnerabilities

00:18:17,280 --> 00:18:20,960
in the open source libraries which your

00:18:20,160 --> 00:18:24,480
project

00:18:20,960 --> 00:18:24,480
may be referencing

00:18:25,840 --> 00:18:28,880
so it's vulnerabilities in third-party

00:18:27,600 --> 00:18:32,320
code

00:18:28,880 --> 00:18:35,679
all right so if you're looking at a

00:18:32,320 --> 00:18:40,880
multi-language framework owasp has built

00:18:35,679 --> 00:18:40,880
a tool called the oas dependency trek

00:18:41,120 --> 00:18:47,120
if you operate in php uh there's

00:18:44,559 --> 00:18:49,280
uh row security advisories uh which

00:18:47,120 --> 00:18:51,520
works really well for for new packages

00:18:49,280 --> 00:18:52,320
uh so anytime you introduce a new

00:18:51,520 --> 00:18:56,160
package

00:18:52,320 --> 00:18:58,480
uh to your composer uh it will uh

00:18:56,160 --> 00:18:59,280
autom or anytime you update one uh it

00:18:58,480 --> 00:19:01,679
will

00:18:59,280 --> 00:19:02,720
uh automatically find any security

00:19:01,679 --> 00:19:05,520
issues and

00:19:02,720 --> 00:19:07,840
encourage you to upgrade it um and then

00:19:05,520 --> 00:19:10,000
frank the friends of php project has a

00:19:07,840 --> 00:19:11,120
uh another package called security

00:19:10,000 --> 00:19:14,080
advisories

00:19:11,120 --> 00:19:14,559
um and so this will do a full end-to-end

00:19:14,080 --> 00:19:17,919
uh

00:19:14,559 --> 00:19:19,440
uh inspection of your composer.log file

00:19:17,919 --> 00:19:21,120
so it's a bit slower but it's it's

00:19:19,440 --> 00:19:23,200
comprehensive

00:19:21,120 --> 00:19:25,679
and then you have uh in javascript

00:19:23,200 --> 00:19:28,320
there's a tool called retire.js

00:19:25,679 --> 00:19:29,360
you know kind of a play on require.js

00:19:28,320 --> 00:19:31,440
what you require

00:19:29,360 --> 00:19:33,760
might need to get retired later right so

00:19:31,440 --> 00:19:37,039
retire.js

00:19:33,760 --> 00:19:40,799
okay and then in ruby

00:19:37,039 --> 00:19:42,320
you have a gemsurance you have bundler

00:19:40,799 --> 00:19:46,000
audit

00:19:42,320 --> 00:19:49,120
and then you have rubyadvisorydb

00:19:46,000 --> 00:19:51,200
okay so these are the ones that i could

00:19:49,120 --> 00:19:52,799
find so far

00:19:51,200 --> 00:19:54,480
you know whichever language you happen

00:19:52,799 --> 00:19:55,360
to operate in i highly recommend that

00:19:54,480 --> 00:19:57,919
you try to look

00:19:55,360 --> 00:19:58,559
for similar tools as well right i try to

00:19:57,919 --> 00:20:00,080
find

00:19:58,559 --> 00:20:02,000
i try to list the tools that i could

00:20:00,080 --> 00:20:05,440
find

00:20:02,000 --> 00:20:06,159
okay so so that that was for dependency

00:20:05,440 --> 00:20:08,240
vulnerability

00:20:06,159 --> 00:20:10,240
vulnerability checks so now let's move

00:20:08,240 --> 00:20:14,960
below the red line

00:20:10,240 --> 00:20:14,960
and look at automated penetration tests

00:20:15,120 --> 00:20:21,919
um so um owasp

00:20:19,039 --> 00:20:22,320
has created a penetration testing tool

00:20:21,919 --> 00:20:26,000
called

00:20:22,320 --> 00:20:28,080
owtf which does not stand for what you

00:20:26,000 --> 00:20:30,640
might think it stands for

00:20:28,080 --> 00:20:33,200
it actually stands for offensive web

00:20:30,640 --> 00:20:35,679
testing framework

00:20:33,200 --> 00:20:36,400
they've also made uh another project

00:20:35,679 --> 00:20:39,600
called the

00:20:36,400 --> 00:20:42,640
zed attack proxy uh and and so this one

00:20:39,600 --> 00:20:45,440
uh you you kind of combine it with uh

00:20:42,640 --> 00:20:46,320
uh you know web browsing and then it'll

00:20:45,440 --> 00:20:48,480
it'll

00:20:46,320 --> 00:20:50,480
help find vulnerabilities in your

00:20:48,480 --> 00:20:53,520
project as well

00:20:50,480 --> 00:20:56,400
there's also uh the age-old metasploit

00:20:53,520 --> 00:20:58,240
so metasploit is a very comprehensive

00:20:56,400 --> 00:21:01,200
penetration testing framework

00:20:58,240 --> 00:21:04,559
which which was designed to do far more

00:21:01,200 --> 00:21:04,559
than just web applications

00:21:04,799 --> 00:21:11,280
but it it is still a very good tool

00:21:08,400 --> 00:21:13,360
to find web application vulnerabilities

00:21:11,280 --> 00:21:16,880
as well

00:21:13,360 --> 00:21:19,440
so metasploit is still there

00:21:16,880 --> 00:21:20,720
okay so that was for automated

00:21:19,440 --> 00:21:25,760
penetration tests

00:21:20,720 --> 00:21:25,760
let's touch briefly on uh

00:21:27,440 --> 00:21:31,919
so um i'm seeing in the chat meg was

00:21:31,120 --> 00:21:35,280
asking for

00:21:31,919 --> 00:21:35,919
uh uh sharing the slides uh yes i have a

00:21:35,280 --> 00:21:37,440
url

00:21:35,919 --> 00:21:39,440
to get the pdf so i will i will be

00:21:37,440 --> 00:21:42,960
sending you the pdf to the slides um

00:21:39,440 --> 00:21:44,720
so okay

00:21:42,960 --> 00:21:46,080
there you go somebody pasted it thank

00:21:44,720 --> 00:21:48,640
you

00:21:46,080 --> 00:21:51,120
okay so let's look briefly at web

00:21:48,640 --> 00:21:53,360
application firewalls

00:21:51,120 --> 00:21:53,360
um

00:21:55,039 --> 00:22:00,159
so i always advise a lot of cautions

00:21:58,159 --> 00:22:03,520
with web application firewalls uh

00:22:00,159 --> 00:22:04,480
the goal of a web application firewall

00:22:03,520 --> 00:22:06,559
is something that you put

00:22:04,480 --> 00:22:07,600
in front of your web application and

00:22:06,559 --> 00:22:10,559
it's supposed to

00:22:07,600 --> 00:22:12,320
catch uh data exfiltration attempts you

00:22:10,559 --> 00:22:13,280
know hacking attempts and it's supposed

00:22:12,320 --> 00:22:16,640
to recognize

00:22:13,280 --> 00:22:19,919
patterns um uh and

00:22:16,640 --> 00:22:22,240
and block them however you know false

00:22:19,919 --> 00:22:23,760
positives are a thing and it's a big

00:22:22,240 --> 00:22:25,440
problem uh you've also

00:22:23,760 --> 00:22:28,080
you know you've got false positives and

00:22:25,440 --> 00:22:30,480
false negatives so false positives is

00:22:28,080 --> 00:22:31,919
um when your firewall thinks that

00:22:30,480 --> 00:22:33,760
somebody is trying to hack you

00:22:31,919 --> 00:22:36,400
but it's just you're running a forum and

00:22:33,760 --> 00:22:38,720
somebody is you know putting a post

00:22:36,400 --> 00:22:40,480
a harmless post in your forum but that

00:22:38,720 --> 00:22:42,240
your firewall blocked it because it

00:22:40,480 --> 00:22:43,520
thought that it was a hacking attempt

00:22:42,240 --> 00:22:45,760
right

00:22:43,520 --> 00:22:46,640
and then you have false negatives where

00:22:45,760 --> 00:22:49,280
people are

00:22:46,640 --> 00:22:51,280
in fact actually trying to hack you and

00:22:49,280 --> 00:22:54,320
then the firewall just you know

00:22:51,280 --> 00:22:56,960
doesn't find it uh so uh

00:22:54,320 --> 00:22:57,360
and i found in my experience to be i

00:22:56,960 --> 00:23:01,039
found

00:22:57,360 --> 00:23:02,799
false positives to be a big issue on

00:23:01,039 --> 00:23:04,799
applications where you have a lot of

00:23:02,799 --> 00:23:06,640
user generated content like

00:23:04,799 --> 00:23:08,480
forum sites right where people write a

00:23:06,640 --> 00:23:12,080
lot of comments which can have almost

00:23:08,480 --> 00:23:14,240
anything in them so

00:23:12,080 --> 00:23:15,440
it's something to be mindful of very

00:23:14,240 --> 00:23:19,280
often

00:23:15,440 --> 00:23:22,559
yeah script very often

00:23:19,280 --> 00:23:23,840
they do need proper tuning and uh but so

00:23:22,559 --> 00:23:27,280
there are some open source

00:23:23,840 --> 00:23:29,919
wafts out there you got mod security uh

00:23:27,280 --> 00:23:31,760
there's a nginx plugin called the lua

00:23:29,919 --> 00:23:34,840
rusty web application firewall

00:23:31,760 --> 00:23:36,320
uh there's another one called the naxi

00:23:34,840 --> 00:23:39,520
plugin uh

00:23:36,320 --> 00:23:41,120
so i've used other firewalls uh there

00:23:39,520 --> 00:23:43,200
were commercial solutions

00:23:41,120 --> 00:23:44,559
that were well supported and i found a

00:23:43,200 --> 00:23:46,720
lot of flaws in those

00:23:44,559 --> 00:23:48,000
uh i have not worked directly with with

00:23:46,720 --> 00:23:50,880
these open source ones

00:23:48,000 --> 00:23:52,720
so again just be mindful do a lot of

00:23:50,880 --> 00:23:54,799
testing

00:23:52,720 --> 00:23:56,640
so whether it's a commercial solution or

00:23:54,799 --> 00:23:59,360
an open source solution

00:23:56,640 --> 00:23:59,760
make sure you do a lot of testing and

00:23:59,360 --> 00:24:04,320
and

00:23:59,760 --> 00:24:06,799
expect a good amount of tuning to happen

00:24:04,320 --> 00:24:07,919
okay oh yeah and then a shadow demon as

00:24:06,799 --> 00:24:10,960
well

00:24:07,919 --> 00:24:13,360
all right so you know

00:24:10,960 --> 00:24:15,600
again you know look at this as sort of a

00:24:13,360 --> 00:24:18,720
waterfall right you want to try

00:24:15,600 --> 00:24:20,960
to catch issues at the top left of this

00:24:18,720 --> 00:24:24,000
waterfall right you want to

00:24:20,960 --> 00:24:26,159
you want as few issues to happen in

00:24:24,000 --> 00:24:28,000
at the lower layers as possible you want

00:24:26,159 --> 00:24:30,960
to you want your humans

00:24:28,000 --> 00:24:32,880
to be educated well enough to be mindful

00:24:30,960 --> 00:24:33,760
of as many issues as possible want to

00:24:32,880 --> 00:24:36,880
cache them

00:24:33,760 --> 00:24:38,480
upstream but if if the person writing

00:24:36,880 --> 00:24:38,880
the code doesn't catch an issue then you

00:24:38,480 --> 00:24:41,440
hope

00:24:38,880 --> 00:24:43,600
that when the pull request happens one

00:24:41,440 --> 00:24:45,279
of their peers can find the issue and

00:24:43,600 --> 00:24:47,120
if the peers don't find the issue then

00:24:45,279 --> 00:24:48,080
you hope that the automated code

00:24:47,120 --> 00:24:49,840
scanning

00:24:48,080 --> 00:24:51,760
can find the issue and then that doesn't

00:24:49,840 --> 00:24:53,039
work you hope that your dependency

00:24:51,760 --> 00:24:56,080
vulnerability checks you know

00:24:53,039 --> 00:24:57,840
that's kind of how it works right um

00:24:56,080 --> 00:25:00,960
so it's kind of putting as many layers

00:24:57,840 --> 00:25:04,640
as possible to put yourself

00:25:00,960 --> 00:25:06,080
in a position to succeed to answer your

00:25:04,640 --> 00:25:08,240
question proper tuning

00:25:06,080 --> 00:25:09,760
many for web application firewalls the

00:25:08,240 --> 00:25:11,279
question is what does

00:25:09,760 --> 00:25:13,200
proper tuning of web application

00:25:11,279 --> 00:25:16,320
firewalls mean

00:25:13,200 --> 00:25:19,039
they have virtually

00:25:16,320 --> 00:25:20,000
all web application firewalls operate

00:25:19,039 --> 00:25:23,120
based on

00:25:20,000 --> 00:25:25,679
a library of patterns for known

00:25:23,120 --> 00:25:27,840
hacking attempts these are patterns that

00:25:25,679 --> 00:25:29,760
you will see in a request

00:25:27,840 --> 00:25:31,200
and and those patterns look a little bit

00:25:29,760 --> 00:25:34,480
like regular expressions

00:25:31,200 --> 00:25:37,840
uh kind of string patterns and so

00:25:34,480 --> 00:25:39,840
sometimes you can modify uh

00:25:37,840 --> 00:25:41,120
those patterns yourself you can add your

00:25:39,840 --> 00:25:42,799
own right and that's kind of where the

00:25:41,120 --> 00:25:43,279
tuning process kind of comes as part of

00:25:42,799 --> 00:25:47,279
this

00:25:43,279 --> 00:25:50,000
so all right let's keep moving

00:25:47,279 --> 00:25:51,440
uh so this concludes the tool section uh

00:25:50,000 --> 00:25:54,799
now we're gonna start

00:25:51,440 --> 00:25:57,360
jumping back into educating humans

00:25:54,799 --> 00:25:58,880
and we're going to going back to trying

00:25:57,360 --> 00:26:01,520
to understand

00:25:58,880 --> 00:26:02,720
vulnerabilities and in the world of

00:26:01,520 --> 00:26:05,440
vulnerabilities

00:26:02,720 --> 00:26:06,400
i like to look at two major buckets one

00:26:05,440 --> 00:26:09,520
are

00:26:06,400 --> 00:26:10,159
low level vulnerabilities and another

00:26:09,520 --> 00:26:13,360
one are

00:26:10,159 --> 00:26:15,440
application vulnerabilities and and i'm

00:26:13,360 --> 00:26:17,600
we're gonna get into those so first

00:26:15,440 --> 00:26:20,159
let's jump into

00:26:17,600 --> 00:26:21,279
what i'm call what i'm calling low-level

00:26:20,159 --> 00:26:24,400
vulnerabilities

00:26:21,279 --> 00:26:26,799
um and among those um

00:26:24,400 --> 00:26:27,440
you've got injection vulnerabilities

00:26:26,799 --> 00:26:30,640
such as

00:26:27,440 --> 00:26:33,039
sql injection and and nosql injections

00:26:30,640 --> 00:26:33,840
because yes those are possible in nosql

00:26:33,039 --> 00:26:35,440
as well

00:26:33,840 --> 00:26:37,200
you have cross-site scripting

00:26:35,440 --> 00:26:40,720
vulnerabilities you have

00:26:37,200 --> 00:26:43,279
site request forgery vulnerabilities

00:26:40,720 --> 00:26:45,039
um so so these are some of the very

00:26:43,279 --> 00:26:46,640
common low-level vulnerabilities which

00:26:45,039 --> 00:26:47,520
i've seen impact a lot of web

00:26:46,640 --> 00:26:51,360
applications

00:26:47,520 --> 00:26:52,799
um so let's start digging into them

00:26:51,360 --> 00:26:56,320
first let's look at

00:26:52,799 --> 00:26:56,799
sql injection um so for those of you

00:26:56,320 --> 00:27:00,080
who've

00:26:56,799 --> 00:27:03,679
been around for a while um

00:27:00,080 --> 00:27:06,880
there's this old school ak xkcd comics

00:27:03,679 --> 00:27:09,760
um it's called bobby tables

00:27:06,880 --> 00:27:09,760
uh i'll

00:27:10,159 --> 00:27:13,679
i'll spare you it but you know you you

00:27:12,559 --> 00:27:18,559
can look at it later

00:27:13,679 --> 00:27:22,960
um the old bobby tables joke

00:27:18,559 --> 00:27:26,559
so um the impact of an sql injection

00:27:22,960 --> 00:27:29,360
is you can leak destroy override or

00:27:26,559 --> 00:27:29,360
insert data

00:27:30,320 --> 00:27:34,080
you can escalate user privileges there

00:27:32,640 --> 00:27:35,679
are a lot of things that you can do and

00:27:34,080 --> 00:27:38,720
and the vector is very simple

00:27:35,679 --> 00:27:42,159
um uh an sql string

00:27:38,720 --> 00:27:45,840
is a database query and so

00:27:42,159 --> 00:27:50,880
most often we need to insert a variable

00:27:45,840 --> 00:27:54,159
as part of a database query and

00:27:50,880 --> 00:27:56,559
where the vector of vernal belly is is

00:27:54,159 --> 00:27:57,600
when somebody whichever language you

00:27:56,559 --> 00:28:00,080
operate in

00:27:57,600 --> 00:28:01,120
you just blindly insert a variable

00:28:00,080 --> 00:28:04,000
reference

00:28:01,120 --> 00:28:06,159
inside of your sql string so here's an

00:28:04,000 --> 00:28:08,159
example in php you've got your sql

00:28:06,159 --> 00:28:08,559
statement select star from users where

00:28:08,159 --> 00:28:11,600
id

00:28:08,559 --> 00:28:12,480
equals and then you just put dollar sign

00:28:11,600 --> 00:28:15,120
user id

00:28:12,480 --> 00:28:17,120
and you retrieve your user id from the

00:28:15,120 --> 00:28:20,799
request and you just blindly

00:28:17,120 --> 00:28:21,520
plugged it this allows an attacker to

00:28:20,799 --> 00:28:25,279
actually

00:28:21,520 --> 00:28:28,000
modify your sql statement and make it do

00:28:25,279 --> 00:28:29,440
things you did not intend to do so

00:28:28,000 --> 00:28:32,880
that's the basic vulnerability

00:28:29,440 --> 00:28:36,559
um and so people

00:28:32,880 --> 00:28:40,799
talk about sanitizing your inputs

00:28:36,559 --> 00:28:44,399
and i say no sanitizing inputs is not

00:28:40,799 --> 00:28:46,640
a solution to preventing sql injection

00:28:44,399 --> 00:28:47,840
there is one solution that is effective

00:28:46,640 --> 00:28:50,320
and it's using

00:28:47,840 --> 00:28:51,200
prepared statements uh with name

00:28:50,320 --> 00:28:54,559
parameter

00:28:51,200 --> 00:28:55,919
binding um yes it is a good idea to

00:28:54,559 --> 00:28:58,000
sanitize your inputs

00:28:55,919 --> 00:28:59,360
when it makes sense if you're expecting

00:28:58,000 --> 00:29:02,080
to have an integer

00:28:59,360 --> 00:29:02,799
in your viable uh make sure that it is a

00:29:02,080 --> 00:29:05,600
manager

00:29:02,799 --> 00:29:06,399
okay fine but sometimes you know you're

00:29:05,600 --> 00:29:08,720
expecting

00:29:06,399 --> 00:29:10,799
uh user-generated content again you're

00:29:08,720 --> 00:29:12,480
running a forum site where people are

00:29:10,799 --> 00:29:15,600
expected to

00:29:12,480 --> 00:29:19,600
enter a freeform text there's only

00:29:15,600 --> 00:29:22,080
so much sanitation that you can do there

00:29:19,600 --> 00:29:23,760
and also the thing about input

00:29:22,080 --> 00:29:24,799
sanitation is in the end is going to be

00:29:23,760 --> 00:29:27,039
brittle so

00:29:24,799 --> 00:29:27,919
if you want to use input sanitation

00:29:27,039 --> 00:29:30,159
definitely

00:29:27,919 --> 00:29:31,760
do it it's fine just know that that's

00:29:30,159 --> 00:29:33,840
not going to make you secure

00:29:31,760 --> 00:29:36,240
what is going to make you secure is to

00:29:33,840 --> 00:29:40,159
use prepared statements because

00:29:36,240 --> 00:29:41,679
uh you you basically cannot inject a

00:29:40,159 --> 00:29:43,600
prepared statement so this is kind of

00:29:41,679 --> 00:29:46,399
what a little bit what it looks like

00:29:43,600 --> 00:29:48,640
um you go select star from users from

00:29:46,399 --> 00:29:51,760
users where id equals and then you go

00:29:48,640 --> 00:29:54,399
colon id and then colon id is

00:29:51,760 --> 00:29:55,360
the name of the variable another way to

00:29:54,399 --> 00:29:57,200
do it is

00:29:55,360 --> 00:29:59,200
is with question marks so sometimes you

00:29:57,200 --> 00:30:00,080
will see select star from users or id

00:29:59,200 --> 00:30:03,520
equals

00:30:00,080 --> 00:30:03,840
question mark that's fine too i like to

00:30:03,520 --> 00:30:06,080
do

00:30:03,840 --> 00:30:08,559
named parameter binding like this using

00:30:06,080 --> 00:30:10,720
using colon id because it makes

00:30:08,559 --> 00:30:11,840
things more human readable i kind of

00:30:10,720 --> 00:30:14,559
like looking

00:30:11,840 --> 00:30:15,360
knowing what i'm looking at right so um

00:30:14,559 --> 00:30:18,080
that's it

00:30:15,360 --> 00:30:20,240
uh o wasp has a cheat sheet on this a

00:30:18,080 --> 00:30:22,399
query parameterization cheat sheet and

00:30:20,240 --> 00:30:24,880
it shows you how to do it in

00:30:22,399 --> 00:30:26,000
every language with every platform it's

00:30:24,880 --> 00:30:27,919
really easy to do

00:30:26,000 --> 00:30:29,600
so as i mentioned earlier input

00:30:27,919 --> 00:30:32,000
sanitation is okay but it's

00:30:29,600 --> 00:30:32,640
brittle and it's not sufficient if you

00:30:32,000 --> 00:30:35,440
do input

00:30:32,640 --> 00:30:36,000
sanitation just know that it is not

00:30:35,440 --> 00:30:38,240
enough

00:30:36,000 --> 00:30:39,840
make sure that you use prepared

00:30:38,240 --> 00:30:40,720
statements if you remember one thing of

00:30:39,840 --> 00:30:43,039
this presentation

00:30:40,720 --> 00:30:45,120
is use prepared statements when

00:30:43,039 --> 00:30:47,520
interacting with your database

00:30:45,120 --> 00:30:49,600
so a prepared statement is pretty simple

00:30:47,520 --> 00:30:52,240
i'll show you an example earlier

00:30:49,600 --> 00:30:53,200
and whichever language you happen to to

00:30:52,240 --> 00:30:54,960
work with

00:30:53,200 --> 00:30:56,640
there's going to be a function or a

00:30:54,960 --> 00:30:59,679
method that you can use

00:30:56,640 --> 00:31:04,000
to bind the the variable named

00:30:59,679 --> 00:31:05,360
id colon id uh to an actual value and

00:31:04,000 --> 00:31:09,679
when you do that even

00:31:05,360 --> 00:31:12,080
if you do no sanitation on past user id

00:31:09,679 --> 00:31:13,039
um you're still not going to get

00:31:12,080 --> 00:31:15,840
injected

00:31:13,039 --> 00:31:17,760
because you with this mechanism you're

00:31:15,840 --> 00:31:20,799
making your

00:31:17,760 --> 00:31:22,960
rdbms look at things differently

00:31:20,799 --> 00:31:24,640
it looks at the the query and it looks

00:31:22,960 --> 00:31:26,960
like arguments to the query and

00:31:24,640 --> 00:31:29,840
they're two very different things so

00:31:26,960 --> 00:31:34,480
here's an example on how to do it in php

00:31:29,840 --> 00:31:34,480
using pdo that's one way to do it

00:31:34,640 --> 00:31:41,760
but so now let's look a little bit at

00:31:39,279 --> 00:31:43,039
object object relational mapper most

00:31:41,760 --> 00:31:46,159
often

00:31:43,039 --> 00:31:50,559
in our web application code

00:31:46,159 --> 00:31:52,399
we we don't always issue raw sql queries

00:31:50,559 --> 00:31:53,600
we tend to work with a layer of

00:31:52,399 --> 00:31:56,320
abstraction over

00:31:53,600 --> 00:31:56,880
our data layer and this is where a no rm

00:31:56,320 --> 00:32:00,559
comes

00:31:56,880 --> 00:32:03,200
into play and those

00:32:00,559 --> 00:32:05,039
can be sql injected under the right

00:32:03,200 --> 00:32:08,799
circumstances and so we need to be

00:32:05,039 --> 00:32:09,760
careful um in in on the java platform a

00:32:08,799 --> 00:32:12,399
while back

00:32:09,760 --> 00:32:14,799
uh using the hibernate query language uh

00:32:12,399 --> 00:32:16,960
there was an injection uh that was found

00:32:14,799 --> 00:32:18,480
and documented in into this incident so

00:32:16,960 --> 00:32:21,279
you can you know read it

00:32:18,480 --> 00:32:22,000
um so in php have you i've used doctrine

00:32:21,279 --> 00:32:25,279
orm

00:32:22,000 --> 00:32:29,120
which follows a lot of very same apis

00:32:25,279 --> 00:32:32,640
as java's hibernate as well so

00:32:29,120 --> 00:32:37,519
that made me mindful of that so the

00:32:32,640 --> 00:32:40,720
o-wasp again owasp has a page dedicated

00:32:37,519 --> 00:32:43,919
to testing for orm injection

00:32:40,720 --> 00:32:48,320
patterns so you know make sure you

00:32:43,919 --> 00:32:50,559
you check this out so

00:32:48,320 --> 00:32:52,799
if you work with orms there are many

00:32:50,559 --> 00:32:53,600
types of orms but in my experience i've

00:32:52,799 --> 00:32:56,960
come across

00:32:53,600 --> 00:32:59,360
two prevalent types of rm one

00:32:56,960 --> 00:33:00,640
are active record pattern orms so if you

00:32:59,360 --> 00:33:02,480
work in ruby

00:33:00,640 --> 00:33:04,480
you have the ruby active record if you

00:33:02,480 --> 00:33:06,640
work with laravel and php you have the

00:33:04,480 --> 00:33:11,360
eloquent

00:33:06,640 --> 00:33:14,000
orm as well i work most with data mapper

00:33:11,360 --> 00:33:15,200
pattern orms so uh in java i've worked

00:33:14,000 --> 00:33:18,559
with

00:33:15,200 --> 00:33:21,039
the java persistence api api

00:33:18,559 --> 00:33:22,399
jpa of which hibernate is a reference

00:33:21,039 --> 00:33:25,200
implementation of it

00:33:22,399 --> 00:33:27,919
um the doctrine orm in php and then in

00:33:25,200 --> 00:33:30,000
dotnet i've also worked with uh

00:33:27,919 --> 00:33:31,760
with entity framework that's microsoft's

00:33:30,000 --> 00:33:34,000
excellent wiring framework so

00:33:31,760 --> 00:33:35,760
um so these are some of the orms out

00:33:34,000 --> 00:33:39,120
there so you got

00:33:35,760 --> 00:33:39,760
activerecord and datamapper so let's

00:33:39,120 --> 00:33:43,120
look at

00:33:39,760 --> 00:33:43,120
data mapper orms

00:33:44,159 --> 00:33:47,760
one thing to keep in mind is if you're

00:33:45,600 --> 00:33:49,039
using data mapper orm at some point

00:33:47,760 --> 00:33:52,960
you're going to make

00:33:49,039 --> 00:33:56,799
a query from an object uh select

00:33:52,960 --> 00:33:59,440
from the ride object uh with

00:33:56,799 --> 00:34:00,399
where the destination properties id

00:33:59,440 --> 00:34:03,760
property

00:34:00,399 --> 00:34:07,039
equals uh a past destination id

00:34:03,760 --> 00:34:09,200
so if you do this you are

00:34:07,039 --> 00:34:10,800
offering an opportunity for somebody to

00:34:09,200 --> 00:34:13,839
pass

00:34:10,800 --> 00:34:15,839
a nefarious value to the right

00:34:13,839 --> 00:34:20,000
destination id

00:34:15,839 --> 00:34:23,679
parameter which could allow somebody

00:34:20,000 --> 00:34:27,040
to alter the makings of your dql

00:34:23,679 --> 00:34:28,480
string which would which could

00:34:27,040 --> 00:34:32,879
conceivably

00:34:28,480 --> 00:34:35,040
expose a vulnerability to kind of also

00:34:32,879 --> 00:34:36,560
hack the underlying sql that gets

00:34:35,040 --> 00:34:39,119
generated from your dql

00:34:36,560 --> 00:34:40,960
so uh a better way to do this so again

00:34:39,119 --> 00:34:43,280
you want to avoid concatenating

00:34:40,960 --> 00:34:44,000
concatenating strings like this a better

00:34:43,280 --> 00:34:47,520
way to do it

00:34:44,000 --> 00:34:48,720
is um you just kind of reference objects

00:34:47,520 --> 00:34:52,079
right

00:34:48,720 --> 00:34:54,000
select your ride where the ride's

00:34:52,079 --> 00:34:56,079
destination property equals the

00:34:54,000 --> 00:34:58,639
destination object and so that's nice

00:34:56,079 --> 00:34:58,639
thing with

00:34:59,440 --> 00:35:05,520
a data mapper query language

00:35:02,480 --> 00:35:07,680
is you can actually reference entire

00:35:05,520 --> 00:35:09,280
objects behind the scenes that the data

00:35:07,680 --> 00:35:11,760
mapper engine is going to

00:35:09,280 --> 00:35:13,440
know to compare the id attributes of

00:35:11,760 --> 00:35:16,720
your respective objects

00:35:13,440 --> 00:35:17,839
um so so then once you have colon

00:35:16,720 --> 00:35:21,920
destination

00:35:17,839 --> 00:35:25,680
as a variable referenced in your

00:35:21,920 --> 00:35:27,280
data mapper string you can bind this

00:35:25,680 --> 00:35:29,599
parameter

00:35:27,280 --> 00:35:30,400
to an object very similarly to how you

00:35:29,599 --> 00:35:33,680
do it with

00:35:30,400 --> 00:35:37,119
a good old sql string so

00:35:33,680 --> 00:35:40,240
um that was an example on php

00:35:37,119 --> 00:35:42,960
uh so say so this is

00:35:40,240 --> 00:35:44,000
wait sorry it looks like i had the same

00:35:42,960 --> 00:35:47,280
slide twice okay

00:35:44,000 --> 00:35:49,200
so anyway um if you are working uh in

00:35:47,280 --> 00:35:51,839
the microsoft entity framework uh

00:35:49,200 --> 00:35:53,599
i have a link here uh to their security

00:35:51,839 --> 00:35:54,960
cons they have an entire page dedicated

00:35:53,599 --> 00:35:57,200
to security considerations

00:35:54,960 --> 00:35:58,880
so if you operate in.net uh check out

00:35:57,200 --> 00:36:00,960
this url

00:35:58,880 --> 00:36:02,640
so that was for data mapper now i want

00:36:00,960 --> 00:36:07,599
to briefly touch on

00:36:02,640 --> 00:36:12,880
uh active record so some active record

00:36:07,599 --> 00:36:16,000
engines such as eloquent in php have

00:36:12,880 --> 00:36:19,520
uh raw methods so if you have an object

00:36:16,000 --> 00:36:22,800
user where raw um and and that's where

00:36:19,520 --> 00:36:22,800
you can put kind of a

00:36:22,880 --> 00:36:26,960
a query snippet where you can inject a

00:36:25,440 --> 00:36:27,680
variable that just came straight from

00:36:26,960 --> 00:36:29,440
the request

00:36:27,680 --> 00:36:31,680
right it provides an opportunity for you

00:36:29,440 --> 00:36:32,320
to do this and so if you want to use

00:36:31,680 --> 00:36:34,880
this where

00:36:32,320 --> 00:36:36,800
raw method make sure that you don't do

00:36:34,880 --> 00:36:38,160
what i'm showing you here on the screen

00:36:36,800 --> 00:36:39,599
where you're just kind of injecting a

00:36:38,160 --> 00:36:40,960
variable in the middle of it because if

00:36:39,599 --> 00:36:44,480
you do that again

00:36:40,960 --> 00:36:47,760
you provide an opportunity to alter

00:36:44,480 --> 00:36:50,960
uh the the logic

00:36:47,760 --> 00:36:51,440
of of the statement a better way to do

00:36:50,960 --> 00:36:54,079
this

00:36:51,440 --> 00:36:54,560
is to stick you know to stay away from

00:36:54,079 --> 00:36:57,359
the

00:36:54,560 --> 00:36:58,320
to the from the raw methods and and to

00:36:57,359 --> 00:37:01,680
leverage

00:36:58,320 --> 00:37:04,720
your active record engines um

00:37:01,680 --> 00:37:08,000
where constructs where all of these are

00:37:04,720 --> 00:37:11,760
separate arguments that are nicely

00:37:08,000 --> 00:37:15,280
separated so these won't be injectable

00:37:11,760 --> 00:37:17,359
so that's that if you

00:37:15,280 --> 00:37:18,880
operate in ruby on rails there's an

00:37:17,359 --> 00:37:23,760
entire

00:37:18,880 --> 00:37:26,880
site dedicated to learning about um

00:37:23,760 --> 00:37:30,000
ruby on rails sql injections so

00:37:26,880 --> 00:37:32,400
i highly recommend that okay

00:37:30,000 --> 00:37:33,839
so the point about orms is they do

00:37:32,400 --> 00:37:36,560
provide you with a very

00:37:33,839 --> 00:37:37,359
expressive vocabulary to interact with

00:37:36,560 --> 00:37:39,680
your data

00:37:37,359 --> 00:37:41,119
they make the safe way convenient

00:37:39,680 --> 00:37:43,200
however

00:37:41,119 --> 00:37:45,040
you can and you will still get owned if

00:37:43,200 --> 00:37:46,240
you don't use them as intended right i

00:37:45,040 --> 00:37:50,640
mean that's the thing about

00:37:46,240 --> 00:37:54,320
that that you know technology so um

00:37:50,640 --> 00:37:55,040
all right so now let's look at uh nosql

00:37:54,320 --> 00:37:58,000
injections

00:37:55,040 --> 00:37:58,720
uh because yes uh nosql can also get

00:37:58,000 --> 00:38:01,839
injected

00:37:58,720 --> 00:38:04,160
uh in in some exotic ways um

00:38:01,839 --> 00:38:05,680
so i have a link here uh again to

00:38:04,160 --> 00:38:07,520
another os resource for

00:38:05,680 --> 00:38:08,960
testing for a nosql injection so when

00:38:07,520 --> 00:38:09,359
you get the pdf you can just click on

00:38:08,960 --> 00:38:11,920
that

00:38:09,359 --> 00:38:12,960
and you will go to awasps excellent site

00:38:11,920 --> 00:38:14,960
on that

00:38:12,960 --> 00:38:17,040
i have an article here about hacking

00:38:14,960 --> 00:38:19,440
node.js and mogodb

00:38:17,040 --> 00:38:20,480
so you can check it out as well so i'm

00:38:19,440 --> 00:38:21,680
going to show you a little bit of an

00:38:20,480 --> 00:38:25,839
example

00:38:21,680 --> 00:38:29,040
of a vulnerability pattern so

00:38:25,839 --> 00:38:29,520
you may have like a collection against

00:38:29,040 --> 00:38:34,160
which

00:38:29,520 --> 00:38:34,160
you're doing a find and then

00:38:34,480 --> 00:38:39,839
at some point you're comparing two

00:38:36,240 --> 00:38:44,240
values uh you know being less than zero

00:38:39,839 --> 00:38:44,240
but now instead of this zero variable

00:38:44,800 --> 00:38:48,400
you're gonna you're gonna put user input

00:38:48,000 --> 00:38:51,040
there

00:38:48,400 --> 00:38:52,800
right so instead of comparing to the uh

00:38:51,040 --> 00:38:54,079
a hard coded zero you're going to

00:38:52,800 --> 00:38:55,920
compare to a

00:38:54,079 --> 00:38:57,760
variable called you know user input

00:38:55,920 --> 00:38:59,119
which has some user that came

00:38:57,760 --> 00:39:01,359
which has some data that came from the

00:38:59,119 --> 00:39:05,040
user well if somebody

00:39:01,359 --> 00:39:06,000
were to pass as the value of user input

00:39:05,040 --> 00:39:09,760
if somebody

00:39:06,000 --> 00:39:13,359
were to pass this big old value here

00:39:09,760 --> 00:39:16,240
well what that's going to do is

00:39:13,359 --> 00:39:16,960
that's that's gonna uh cause a denial of

00:39:16,240 --> 00:39:20,240
service

00:39:16,960 --> 00:39:20,880
uh on your cpu where your cpu will max

00:39:20,240 --> 00:39:23,760
out

00:39:20,880 --> 00:39:24,079
uh for a hundred percent for ten seconds

00:39:23,760 --> 00:39:26,240
uh

00:39:24,079 --> 00:39:28,400
so that would be uncomfortable right and

00:39:26,240 --> 00:39:31,680
so that's one example of how people can

00:39:28,400 --> 00:39:36,000
mess with you using uh nosql injections

00:39:31,680 --> 00:39:38,560
uh so there are some uh better practices

00:39:36,000 --> 00:39:41,520
to mitigate against that so i have an

00:39:38,560 --> 00:39:43,920
article here from d-zone on how to do it

00:39:41,520 --> 00:39:45,359
they recommend to cast query arguments

00:39:43,920 --> 00:39:48,720
to string

00:39:45,359 --> 00:39:50,480
so if you have a username you

00:39:48,720 --> 00:39:52,160
you cast it to a string you have a

00:39:50,480 --> 00:39:52,880
password you cast it you cast it to a

00:39:52,160 --> 00:39:54,800
string

00:39:52,880 --> 00:39:56,160
however please don't store passwords and

00:39:54,800 --> 00:39:57,359
plain text in your

00:39:56,160 --> 00:39:58,480
data store please don't do that and

00:39:57,359 --> 00:40:00,400
we're going to touch on that at the end

00:39:58,480 --> 00:40:03,599
of the presentation

00:40:00,400 --> 00:40:08,560
so so that's that that's

00:40:03,599 --> 00:40:08,560
the exciting world of no sql injection

00:40:08,720 --> 00:40:14,160
okay so now uh in the realm of low level

00:40:12,720 --> 00:40:15,599
vulnerabilities now we

00:40:14,160 --> 00:40:17,760
we've just looked at injection

00:40:15,599 --> 00:40:21,520
vulnerabilities so now we're going to

00:40:17,760 --> 00:40:23,520
look at um also in

00:40:21,520 --> 00:40:24,880
injection vulnerabilities it's called

00:40:23,520 --> 00:40:27,920
cross-site

00:40:24,880 --> 00:40:29,839
scripting so most of you have come

00:40:27,920 --> 00:40:31,599
across this

00:40:29,839 --> 00:40:33,359
but it's always good to have a refresher

00:40:31,599 --> 00:40:34,720
so in in the

00:40:33,359 --> 00:40:37,040
world of cross-site scripting

00:40:34,720 --> 00:40:39,200
vulnerabilities um

00:40:37,040 --> 00:40:40,720
the impact could be any number of things

00:40:39,200 --> 00:40:44,000
right could be credential theft

00:40:40,720 --> 00:40:47,040
unauthorized operations data leak set

00:40:44,000 --> 00:40:48,640
session hijacking um there's a lot of

00:40:47,040 --> 00:40:51,359
bad things that could happen there so

00:40:48,640 --> 00:40:53,040
the vector is very simple

00:40:51,359 --> 00:40:54,800
there's two types of vectors one is

00:40:53,040 --> 00:40:56,560
called reflected

00:40:54,800 --> 00:40:58,000
imagine your search results page right

00:40:56,560 --> 00:41:01,280
when you go to google

00:40:58,000 --> 00:41:03,119
and you search for something and then

00:41:01,280 --> 00:41:04,720
you know you search for flowers in

00:41:03,119 --> 00:41:06,319
google and then

00:41:04,720 --> 00:41:08,400
when you hit return you get to the

00:41:06,319 --> 00:41:09,280
search results page and on that search

00:41:08,400 --> 00:41:11,119
results page

00:41:09,280 --> 00:41:13,359
it shows you the term that you search

00:41:11,119 --> 00:41:15,680
for right um

00:41:13,359 --> 00:41:17,760
so if instead of flowers you put a

00:41:15,680 --> 00:41:20,079
script tag in there

00:41:17,760 --> 00:41:22,079
well then that wouldn't be good right so

00:41:20,079 --> 00:41:24,000
this is what a reflected attack looks

00:41:22,079 --> 00:41:25,920
like right you have google.com

00:41:24,000 --> 00:41:27,440
search q equals and instead of flowers

00:41:25,920 --> 00:41:31,280
you put script alert point

00:41:27,440 --> 00:41:33,599
right that's one way to do it um and so

00:41:31,280 --> 00:41:34,640
in the html document that is served back

00:41:33,599 --> 00:41:37,280
to the end user

00:41:34,640 --> 00:41:38,560
now you have you know it says here are

00:41:37,280 --> 00:41:40,800
your results for

00:41:38,560 --> 00:41:42,319
and then you're just going to blindly

00:41:40,800 --> 00:41:45,920
outputting the value

00:41:42,319 --> 00:41:48,720
of the queue parameter that is sent

00:41:45,920 --> 00:41:49,920
in your get argument right and then if

00:41:48,720 --> 00:41:51,599
you do that

00:41:49,920 --> 00:41:53,280
then an alert is going to pop in the

00:41:51,599 --> 00:41:55,680
user and so that's

00:41:53,280 --> 00:41:56,880
a very simple reflected vulnerability

00:41:55,680 --> 00:42:00,079
and then there's

00:41:56,880 --> 00:42:02,800
what's called stored xss

00:42:00,079 --> 00:42:03,200
cross-site scripting vulnerability is um

00:42:02,800 --> 00:42:04,880
when

00:42:03,200 --> 00:42:07,920
somebody let's say you're running a

00:42:04,880 --> 00:42:11,119
forum web application and so somebody

00:42:07,920 --> 00:42:13,040
makes a post on your forum um

00:42:11,119 --> 00:42:14,640
where they put a script tag in there and

00:42:13,040 --> 00:42:16,000
then that post gets saved to the

00:42:14,640 --> 00:42:19,440
database and then when

00:42:16,000 --> 00:42:23,119
users load the forum

00:42:19,440 --> 00:42:25,119
thread your post gets re-ecode

00:42:23,119 --> 00:42:26,240
with whatever they put in there right so

00:42:25,119 --> 00:42:30,079
this is them

00:42:26,240 --> 00:42:32,640
putting a bad script in whatever they

00:42:30,079 --> 00:42:33,680
save and then this is this is the forum

00:42:32,640 --> 00:42:36,400
in a div

00:42:33,680 --> 00:42:38,079
re-echoing that back uh to all the users

00:42:36,400 --> 00:42:39,280
of the forum right so then they can all

00:42:38,079 --> 00:42:42,720
get owned

00:42:39,280 --> 00:42:46,880
so that's a stored xss

00:42:42,720 --> 00:42:49,119
you know at all at a very basic level

00:42:46,880 --> 00:42:51,599
so let's look at mitigation strategies

00:42:49,119 --> 00:42:52,240
and uh most of you probably have heard

00:42:51,599 --> 00:42:56,319
of

00:42:52,240 --> 00:42:58,319
um escaping or encoding and here

00:42:56,319 --> 00:42:59,520
you can pretty much use escaping and

00:42:58,319 --> 00:43:03,200
then coding kind of

00:42:59,520 --> 00:43:05,760
as the same meaning so

00:43:03,200 --> 00:43:07,280
the the basic mechanism for escaping and

00:43:05,760 --> 00:43:10,319
encoding is to be

00:43:07,280 --> 00:43:12,079
to convert characters which are risky

00:43:10,319 --> 00:43:15,119
which are risky for a specific

00:43:12,079 --> 00:43:16,480
medium to an encoded version right so

00:43:15,119 --> 00:43:20,720
here's an example

00:43:16,480 --> 00:43:23,760
i have a script tag that says alert hi

00:43:20,720 --> 00:43:26,880
so if i am going to take this

00:43:23,760 --> 00:43:29,359
and show it in an html page

00:43:26,880 --> 00:43:31,040
then i'm going to try to html encode or

00:43:29,359 --> 00:43:32,720
html escape it

00:43:31,040 --> 00:43:34,560
and this is what the string might look

00:43:32,720 --> 00:43:38,480
like

00:43:34,560 --> 00:43:40,960
let's say i am operating an api like a

00:43:38,480 --> 00:43:43,520
json api

00:43:40,960 --> 00:43:45,680
then this is what it would look like

00:43:43,520 --> 00:43:47,760
right in json we don't care about

00:43:45,680 --> 00:43:49,200
angle brackets but we do care about

00:43:47,760 --> 00:43:51,440
double quotes right right so

00:43:49,200 --> 00:43:53,680
the json encoding mechanism puts

00:43:51,440 --> 00:43:56,800
backslashes in from the double quotes

00:43:53,680 --> 00:44:00,400
right away you can see that

00:43:56,800 --> 00:44:02,880
from one medium html to another json

00:44:00,400 --> 00:44:04,400
each medium cares about different things

00:44:02,880 --> 00:44:07,359
as to what it knows to be

00:44:04,400 --> 00:44:08,319
nefarious and this leads me to the

00:44:07,359 --> 00:44:11,839
questions

00:44:08,319 --> 00:44:14,160
when should we escape um and so

00:44:11,839 --> 00:44:15,520
should we escape when we render things

00:44:14,160 --> 00:44:19,119
and my answer to this is

00:44:15,520 --> 00:44:21,520
yes every time um your

00:44:19,119 --> 00:44:22,880
your html rendering engine should

00:44:21,520 --> 00:44:26,480
protect itself

00:44:22,880 --> 00:44:28,480
your json output engine should protect

00:44:26,480 --> 00:44:30,560
itself from data it should never trust

00:44:28,480 --> 00:44:32,960
any data that comes

00:44:30,560 --> 00:44:35,359
to it even that uh that it believes to

00:44:32,960 --> 00:44:37,359
be all to have already been escaped

00:44:35,359 --> 00:44:38,800
this is your last line of defense when

00:44:37,359 --> 00:44:40,560
you render

00:44:38,800 --> 00:44:41,920
when you stream your data out and you

00:44:40,560 --> 00:44:44,160
got to make sure that whichever medium

00:44:41,920 --> 00:44:47,680
by which you stream your data out

00:44:44,160 --> 00:44:50,720
whether it's json or html or csv

00:44:47,680 --> 00:44:51,359
output anything you make sure that each

00:44:50,720 --> 00:44:53,599
medium

00:44:51,359 --> 00:44:55,200
knows how to protect itself never trust

00:44:53,599 --> 00:44:58,240
data

00:44:55,200 --> 00:44:58,560
so then the question comes where you

00:44:58,240 --> 00:45:01,200
know

00:44:58,560 --> 00:45:02,960
should we try to escape things just

00:45:01,200 --> 00:45:05,200
before storing information right if

00:45:02,960 --> 00:45:06,319
information enters our system and we

00:45:05,200 --> 00:45:08,720
store it somewhere

00:45:06,319 --> 00:45:10,079
should we try to escape it before we

00:45:08,720 --> 00:45:13,599
store it

00:45:10,079 --> 00:45:15,359
and my guidance there is

00:45:13,599 --> 00:45:17,040
i would avoid doing that because there

00:45:15,359 --> 00:45:20,079
are a number of problems

00:45:17,040 --> 00:45:20,880
for one as we just saw an encoding

00:45:20,079 --> 00:45:23,599
scheme

00:45:20,880 --> 00:45:24,240
is always specifically targeted to a

00:45:23,599 --> 00:45:26,800
given

00:45:24,240 --> 00:45:27,839
medium right the way you escape things

00:45:26,800 --> 00:45:29,599
for html

00:45:27,839 --> 00:45:31,119
is are very different for how you would

00:45:29,599 --> 00:45:33,760
escape things from for

00:45:31,119 --> 00:45:34,319
json which is very different for how you

00:45:33,760 --> 00:45:38,000
would escape

00:45:34,319 --> 00:45:41,040
things for csv for example um so

00:45:38,000 --> 00:45:43,839
uh and you never know which medium

00:45:41,040 --> 00:45:45,200
your data is going to be sent to right i

00:45:43,839 --> 00:45:46,240
mean you're storing your data in your

00:45:45,200 --> 00:45:48,079
database but

00:45:46,240 --> 00:45:51,680
your data could be sent to any number of

00:45:48,079 --> 00:45:54,480
mediums so to try to escape this data

00:45:51,680 --> 00:45:55,440
is to me kind of a losing proposition

00:45:54,480 --> 00:45:58,079
because

00:45:55,440 --> 00:45:58,800
there's really no single encoding scheme

00:45:58,079 --> 00:46:03,040
that is

00:45:58,800 --> 00:46:03,040
safe and usable for all mediums

00:46:04,240 --> 00:46:09,440
and because your stored information is

00:46:07,280 --> 00:46:10,160
never bound to a single medium it could

00:46:09,440 --> 00:46:12,240
appear on

00:46:10,160 --> 00:46:14,240
any medium and then the other thing that

00:46:12,240 --> 00:46:14,640
you can run into our double encoding

00:46:14,240 --> 00:46:17,280
issue

00:46:14,640 --> 00:46:18,160
right because as we talked about you

00:46:17,280 --> 00:46:21,920
always want

00:46:18,160 --> 00:46:24,319
your um a rendering engine

00:46:21,920 --> 00:46:25,200
to protect itself to never trust what's

00:46:24,319 --> 00:46:28,480
coming uh

00:46:25,200 --> 00:46:30,160
from downstream of it so you're always

00:46:28,480 --> 00:46:33,440
going to have encoding

00:46:30,160 --> 00:46:35,359
on your front end but if you also

00:46:33,440 --> 00:46:37,839
encode when you store the data you could

00:46:35,359 --> 00:46:40,640
run into double encoding issues right

00:46:37,839 --> 00:46:42,720
and to visually represent that imagine

00:46:40,640 --> 00:46:44,960
you have user input and that goes to

00:46:42,720 --> 00:46:49,280
your rendering engine which could be

00:46:44,960 --> 00:46:51,040
output html json csv

00:46:49,280 --> 00:46:53,440
and so your rendering engine is going to

00:46:51,040 --> 00:46:55,200
protect itself it's going to html encode

00:46:53,440 --> 00:46:56,000
things before streaming to html it's

00:46:55,200 --> 00:46:58,160
going to json

00:46:56,000 --> 00:46:59,040
encode things to output to json and it's

00:46:58,160 --> 00:47:02,640
going to csv

00:46:59,040 --> 00:47:04,800
encode things before outputting csv

00:47:02,640 --> 00:47:06,319
but then your user input so that's when

00:47:04,800 --> 00:47:08,319
your user input goes

00:47:06,319 --> 00:47:10,000
straight uh you know through like a

00:47:08,319 --> 00:47:13,440
reflected mechanism it goes

00:47:10,000 --> 00:47:16,240
from user input you know

00:47:13,440 --> 00:47:17,280
straight to your rendering engine but

00:47:16,240 --> 00:47:19,760
most often

00:47:17,280 --> 00:47:21,359
your user input gets to your data

00:47:19,760 --> 00:47:24,160
storage

00:47:21,359 --> 00:47:26,559
and and then it goes into your rendering

00:47:24,160 --> 00:47:29,280
engine right so this is where i'm saying

00:47:26,559 --> 00:47:30,720
avoid encoding here okay because of the

00:47:29,280 --> 00:47:31,440
reasons we talked about in the previous

00:47:30,720 --> 00:47:33,680
slide

00:47:31,440 --> 00:47:35,200
um and also as i mentioned at the end of

00:47:33,680 --> 00:47:38,000
the previous slide

00:47:35,200 --> 00:47:39,200
by avoiding to encode here since you're

00:47:38,000 --> 00:47:41,760
already encoding

00:47:39,200 --> 00:47:43,119
on the right side here you can avoid

00:47:41,760 --> 00:47:46,800
double encoding so

00:47:43,119 --> 00:47:50,000
there you go so now the question is

00:47:46,800 --> 00:47:52,000
if we are storing data

00:47:50,000 --> 00:47:54,079
is there anything that we can do to

00:47:52,000 --> 00:47:55,119
harden the stored information can we

00:47:54,079 --> 00:47:57,760
still make it

00:47:55,119 --> 00:47:59,599
relatively safer than it used to be and

00:47:57,760 --> 00:48:02,160
my answer to this is absolutely yes

00:47:59,599 --> 00:48:04,240
in many instances you can but instead of

00:48:02,160 --> 00:48:06,960
escaping or encoding things

00:48:04,240 --> 00:48:08,240
try to focus on stripping things where

00:48:06,960 --> 00:48:11,440
you actually

00:48:08,240 --> 00:48:13,440
remove information you remove

00:48:11,440 --> 00:48:14,720
characters that do not need to be there

00:48:13,440 --> 00:48:17,359
for your use cases

00:48:14,720 --> 00:48:18,640
you can't always do it but if there are

00:48:17,359 --> 00:48:20,720
opportunities to do it

00:48:18,640 --> 00:48:22,640
try to delete things that should not be

00:48:20,720 --> 00:48:24,640
there for example

00:48:22,640 --> 00:48:25,760
you could try to strip all html tags

00:48:24,640 --> 00:48:27,280
that's pretty

00:48:25,760 --> 00:48:29,040
trivial to do in virtually any

00:48:27,280 --> 00:48:31,599
technology stack if if

00:48:29,040 --> 00:48:34,079
you do not expect people to be

00:48:31,599 --> 00:48:36,240
contributing html content

00:48:34,079 --> 00:48:37,760
then strip all that stuff that's like

00:48:36,240 --> 00:48:39,520
one less thing to worry about that you

00:48:37,760 --> 00:48:43,040
don't have to encode or escape

00:48:39,520 --> 00:48:44,800
later on but also look at how you store

00:48:43,040 --> 00:48:47,520
your data in your data schema

00:48:44,800 --> 00:48:49,200
right so if you're using numbers don't

00:48:47,520 --> 00:48:52,640
store them as characters

00:48:49,200 --> 00:48:52,960
um you know if for example if you have

00:48:52,640 --> 00:48:55,760
like

00:48:52,960 --> 00:48:57,200
the concept of uh you know 10 pixels you

00:48:55,760 --> 00:49:00,079
know 10px

00:48:57,200 --> 00:49:01,440
you might store the integer value as 10

00:49:00,079 --> 00:49:04,559
and then reference

00:49:01,440 --> 00:49:07,359
a unit uh you know pixel

00:49:04,559 --> 00:49:07,839
is a uni is a foreign key to the unit

00:49:07,359 --> 00:49:10,240
table

00:49:07,839 --> 00:49:12,319
uh of unit id one for example right

00:49:10,240 --> 00:49:15,200
that's one way to do it

00:49:12,319 --> 00:49:16,000
so like i said before uh is escaping and

00:49:15,200 --> 00:49:18,559
rendering should only

00:49:16,000 --> 00:49:20,160
be done escaping or encoding should only

00:49:18,559 --> 00:49:21,599
be done in rendering so you can avoid

00:49:20,160 --> 00:49:25,119
double encoding so

00:49:21,599 --> 00:49:28,240
um there you go um so

00:49:25,119 --> 00:49:31,040
i have more content here about uh

00:49:28,240 --> 00:49:32,319
escaping at rendering for cross-site

00:49:31,040 --> 00:49:35,760
scripting vulnerabilities

00:49:32,319 --> 00:49:38,800
um uh again o wasp has

00:49:35,760 --> 00:49:41,119
a cheat sheet about this so check it out

00:49:38,800 --> 00:49:43,200
i have a little bit of a tldr to follow

00:49:41,119 --> 00:49:44,400
but seriously please read that page it

00:49:43,200 --> 00:49:48,079
is really good

00:49:44,400 --> 00:49:52,800
um so um you know they mentioned

00:49:48,079 --> 00:49:53,680
if uh if you're building an html page uh

00:49:52,800 --> 00:49:56,559
never put

00:49:53,680 --> 00:49:58,079
uh and never put data that could have a

00:49:56,559 --> 00:50:00,240
user input in there like

00:49:58,079 --> 00:50:01,200
which is basically untrusted data in

00:50:00,240 --> 00:50:04,400
script blocks

00:50:01,200 --> 00:50:07,280
or an html comment an html attribute

00:50:04,400 --> 00:50:09,280
name the html attribute value is okay

00:50:07,280 --> 00:50:13,119
but the html attribute name

00:50:09,280 --> 00:50:16,240
is not good an html tag name

00:50:13,119 --> 00:50:17,920
css blocks because in those areas of

00:50:16,240 --> 00:50:20,880
your html document

00:50:17,920 --> 00:50:24,000
there basically is not there isn't an

00:50:20,880 --> 00:50:27,760
escaping or encoding mechanism

00:50:24,000 --> 00:50:30,240
that is reliable so don't do it um

00:50:27,760 --> 00:50:31,200
if you are operating an api that is

00:50:30,240 --> 00:50:34,480
supposed

00:50:31,200 --> 00:50:37,119
to output json content most often

00:50:34,480 --> 00:50:37,920
when people interact with your api uh

00:50:37,119 --> 00:50:40,559
they interact

00:50:37,920 --> 00:50:42,640
in it you know in a web browser just so

00:50:40,559 --> 00:50:46,079
just so they can test it

00:50:42,640 --> 00:50:49,520
well um if you're outputting

00:50:46,079 --> 00:50:51,839
um json but your content type is of text

00:50:49,520 --> 00:50:54,000
html your web browser is going to be

00:50:51,839 --> 00:50:55,680
like oh this is not a json output this

00:50:54,000 --> 00:50:57,280
is actually an html document

00:50:55,680 --> 00:50:59,200
and your web browser is going to see

00:50:57,280 --> 00:51:02,480
this um

00:50:59,200 --> 00:51:05,760
this script alert tag here and it's

00:51:02,480 --> 00:51:08,160
going to pop an alert right so

00:51:05,760 --> 00:51:08,880
make sure that you set the proper mime

00:51:08,160 --> 00:51:11,599
type

00:51:08,880 --> 00:51:12,800
on the content type header on your json

00:51:11,599 --> 00:51:14,480
api

00:51:12,800 --> 00:51:16,559
so here's an example of what it should

00:51:14,480 --> 00:51:19,760
be content type application

00:51:16,559 --> 00:51:22,079
json that is good

00:51:19,760 --> 00:51:22,079
okay

00:51:23,040 --> 00:51:26,319
all right so inside an html document you

00:51:25,760 --> 00:51:30,480
can

00:51:26,319 --> 00:51:32,559
use html entity escaping of everything

00:51:30,480 --> 00:51:33,760
if you put some javascript blobs in your

00:51:32,559 --> 00:51:37,599
html you can use

00:51:33,760 --> 00:51:40,319
the yahoo's javascript serializer

00:51:37,599 --> 00:51:42,319
if you have urls you can escape url

00:51:40,319 --> 00:51:44,880
fragments

00:51:42,319 --> 00:51:45,920
if you operate in php in the symfony and

00:51:44,880 --> 00:51:48,079
level frameworks

00:51:45,920 --> 00:51:50,480
you get a lot of things for free using

00:51:48,079 --> 00:51:51,760
the twig templating engine uh so that's

00:51:50,480 --> 00:51:52,079
gonna you know what it looks like you

00:51:51,760 --> 00:51:54,559
just

00:51:52,079 --> 00:51:56,319
reference the variable and then it the

00:51:54,559 --> 00:51:56,640
data will be automatically escaped for

00:51:56,319 --> 00:51:59,680
you

00:51:56,640 --> 00:52:02,240
so if you operate in

00:51:59,680 --> 00:52:03,440
net the razer engine also has your back

00:52:02,240 --> 00:52:07,040
in there

00:52:03,440 --> 00:52:07,040
so here's an example of it

00:52:08,079 --> 00:52:12,960
so yeah all right so now let's look at

00:52:11,040 --> 00:52:18,240
cross site request forgery

00:52:12,960 --> 00:52:20,640
so this one is a good amount of fun

00:52:18,240 --> 00:52:21,440
the impact of crosstalk records forgery

00:52:20,640 --> 00:52:24,240
are um

00:52:21,440 --> 00:52:26,640
unauthorized operations uh unpre

00:52:24,240 --> 00:52:29,200
unprotected transactional operations

00:52:26,640 --> 00:52:30,240
um sorry the impact is unauthorized

00:52:29,200 --> 00:52:34,079
operations and then

00:52:30,240 --> 00:52:36,480
the vectors is unprotected transactional

00:52:34,079 --> 00:52:39,599
operations so here's what it looks like

00:52:36,480 --> 00:52:41,040
let's say you are a web application like

00:52:39,599 --> 00:52:43,520
you are a social

00:52:41,040 --> 00:52:45,200
bookmarking website and and you are

00:52:43,520 --> 00:52:46,880
called victimsci.com because you are

00:52:45,200 --> 00:52:49,920
going to be the victim

00:52:46,880 --> 00:52:53,119
so you put a form which allows

00:52:49,920 --> 00:52:55,119
allows a user to save a new bookmark

00:52:53,119 --> 00:52:57,680
to their list of bookmarks right so you

00:52:55,119 --> 00:53:00,640
have like an action of bookmark slash ad

00:52:57,680 --> 00:53:02,319
it's a post you have two parameters

00:53:00,640 --> 00:53:04,800
that's the bookmark title the bookmark

00:53:02,319 --> 00:53:07,440
url and then you have a submit right so

00:53:04,800 --> 00:53:08,480
if the user is logged into their account

00:53:07,440 --> 00:53:10,480
they can click

00:53:08,480 --> 00:53:12,640
save bookmark and it's going to save the

00:53:10,480 --> 00:53:15,760
bookmark to their bookmarks right

00:53:12,640 --> 00:53:19,280
very easy to do now if your form

00:53:15,760 --> 00:53:22,000
if if this is what your form looks like

00:53:19,280 --> 00:53:22,720
um an attacker could do this they could

00:53:22,000 --> 00:53:26,640
create an

00:53:22,720 --> 00:53:29,920
attacker site and they could attract

00:53:26,640 --> 00:53:30,559
people uh to their website and behind

00:53:29,920 --> 00:53:33,760
the scenes

00:53:30,559 --> 00:53:36,480
they could make a hidden a hidden form

00:53:33,760 --> 00:53:38,079
um that it it's a form that is hidden

00:53:36,480 --> 00:53:40,079
and it directly

00:53:38,079 --> 00:53:42,000
references your website you know its

00:53:40,079 --> 00:53:45,440
action is actually

00:53:42,000 --> 00:53:47,119
it's post action is actually the full

00:53:45,440 --> 00:53:50,640
url to your website

00:53:47,119 --> 00:53:52,800
victimsite.com bookmark slash ad

00:53:50,640 --> 00:53:54,800
with a hidden input parameter that is

00:53:52,800 --> 00:53:56,960
hardcoded to a value that they want

00:53:54,800 --> 00:53:58,640
for the name for the title and same

00:53:56,960 --> 00:54:00,480
thing for the url right so this whole

00:53:58,640 --> 00:54:03,760
form is completely hidden

00:54:00,480 --> 00:54:08,400
and a user cannot see it so

00:54:03,760 --> 00:54:10,880
when a user visits attackersite.com

00:54:08,400 --> 00:54:11,599
this form is going to be in scope and

00:54:10,880 --> 00:54:14,160
then

00:54:11,599 --> 00:54:14,800
this little script here is going to

00:54:14,160 --> 00:54:17,280
execute

00:54:14,800 --> 00:54:18,480
automatically which is going to submit

00:54:17,280 --> 00:54:20,720
this form

00:54:18,480 --> 00:54:22,640
um automatically behind the scenes on

00:54:20,720 --> 00:54:25,200
behalf of the user visiting you

00:54:22,640 --> 00:54:26,880
so what happens is if the user happens

00:54:25,200 --> 00:54:30,000
to be logged

00:54:26,880 --> 00:54:33,200
into their account on victimsite.com

00:54:30,000 --> 00:54:36,000
then the the user

00:54:33,200 --> 00:54:37,839
will have some site added to their list

00:54:36,000 --> 00:54:39,040
of bookmarks that they did not intend to

00:54:37,839 --> 00:54:40,079
put in there and they're like how did

00:54:39,040 --> 00:54:41,680
that get here

00:54:40,079 --> 00:54:43,680
uh on bit unbeknownst to them they

00:54:41,680 --> 00:54:45,280
visited attackersite.com and that's

00:54:43,680 --> 00:54:46,880
attackerside.com did that behind the

00:54:45,280 --> 00:54:49,119
scenes so that's

00:54:46,880 --> 00:54:51,200
one of many examples what i used here

00:54:49,119 --> 00:54:54,880
was um

00:54:51,200 --> 00:54:58,319
uh was a very simple example uh

00:54:54,880 --> 00:55:00,880
innocuous example um so to mitigate it

00:54:58,319 --> 00:55:02,319
you can use a unique token in all

00:55:00,880 --> 00:55:05,359
transactional forms

00:55:02,319 --> 00:55:06,160
um leverage your mvc framework to build

00:55:05,359 --> 00:55:08,079
a form

00:55:06,160 --> 00:55:09,200
make sure that csrf protection is

00:55:08,079 --> 00:55:11,520
enabled in there

00:55:09,200 --> 00:55:12,960
and most frameworks automatically handle

00:55:11,520 --> 00:55:15,200
this validation

00:55:12,960 --> 00:55:17,440
for you so you do not have to reinvent

00:55:15,200 --> 00:55:18,160
it but if you want to see what it looks

00:55:17,440 --> 00:55:21,040
like

00:55:18,160 --> 00:55:21,520
uh it's it's very simple uh what you do

00:55:21,040 --> 00:55:24,160
is you

00:55:21,520 --> 00:55:26,079
add this extra hidden token to the to

00:55:24,160 --> 00:55:26,880
your form and that's a non-guessable

00:55:26,079 --> 00:55:28,480
token

00:55:26,880 --> 00:55:30,319
so that when the attacker's site tries

00:55:28,480 --> 00:55:31,920
to replicate uh your form

00:55:30,319 --> 00:55:34,000
uh they're not gonna be able to

00:55:31,920 --> 00:55:38,000
replicate what that token is and that's

00:55:34,000 --> 00:55:40,799
kind of the basic gist of it so um

00:55:38,000 --> 00:55:42,000
in php uh so if you work in symfony or

00:55:40,799 --> 00:55:45,200
laravel

00:55:42,000 --> 00:55:48,559
they each have articles on how to use

00:55:45,200 --> 00:55:48,960
csrf so it's pretty simple if you work

00:55:48,559 --> 00:55:52,160
in

00:55:48,960 --> 00:55:55,760
net they have an article as well

00:55:52,160 --> 00:55:58,640
so you know you can check that out um

00:55:55,760 --> 00:56:00,640
there's examples of it in the wild i've

00:55:58,640 --> 00:56:03,920
had a bit of fun with that in the past

00:56:00,640 --> 00:56:06,160
but i'm not going to get into that okay

00:56:03,920 --> 00:56:07,680
so that was for low level

00:56:06,160 --> 00:56:11,839
vulnerabilities now let's look at

00:56:07,680 --> 00:56:11,839
application level vulnerabilities

00:56:13,440 --> 00:56:16,960
and we're going to look at three things

00:56:15,680 --> 00:56:18,240
we're going to look at user

00:56:16,960 --> 00:56:20,720
authentication

00:56:18,240 --> 00:56:22,720
we're going to look at oauth security

00:56:20,720 --> 00:56:26,000
and then access controls and

00:56:22,720 --> 00:56:27,680
multi-tenancy all right let's first dive

00:56:26,000 --> 00:56:29,040
into user authentication one of my

00:56:27,680 --> 00:56:31,040
favorite topics

00:56:29,040 --> 00:56:33,599
so this is you know what to do anytime

00:56:31,040 --> 00:56:35,280
you have user registration and login and

00:56:33,599 --> 00:56:36,559
password verification kind of you know

00:56:35,280 --> 00:56:39,680
how to deal with all this stuff

00:56:36,559 --> 00:56:42,160
right so um

00:56:39,680 --> 00:56:44,240
again owasp has a handy dandy cheat

00:56:42,160 --> 00:56:46,160
sheet so i have a link to that here so

00:56:44,240 --> 00:56:50,000
go and check it out

00:56:46,160 --> 00:56:52,640
and i've compiled

00:56:50,000 --> 00:56:54,240
some better practices here peppered with

00:56:52,640 --> 00:56:56,079
some of my own experience as well

00:56:54,240 --> 00:56:58,319
so we're going to look at a bunch of

00:56:56,079 --> 00:56:59,119
topics we're going to look at failure

00:56:58,319 --> 00:57:00,720
messaging

00:56:59,119 --> 00:57:02,720
failure handling multi-factor

00:57:00,720 --> 00:57:05,280
authentication account recovery

00:57:02,720 --> 00:57:06,880
password policies password hashing i

00:57:05,280 --> 00:57:09,200
actually have a talk

00:57:06,880 --> 00:57:10,160
a 30-minute talk dedicated to password

00:57:09,200 --> 00:57:12,880
hashing alone

00:57:10,160 --> 00:57:14,160
and but we're just going to fly fly

00:57:12,880 --> 00:57:16,240
through it really fast

00:57:14,160 --> 00:57:17,520
it's like whoo hello all right password

00:57:16,240 --> 00:57:18,880
transport session duration

00:57:17,520 --> 00:57:20,559
re-authentication

00:57:18,880 --> 00:57:22,559
uh what happens when there's a

00:57:20,559 --> 00:57:24,079
compromise account so

00:57:22,559 --> 00:57:26,160
let's dive right now into failure

00:57:24,079 --> 00:57:28,480
messaging so we're going to touch in on

00:57:26,160 --> 00:57:31,520
all these topics really rapid fire so

00:57:28,480 --> 00:57:32,799
first off sell your messaging um

00:57:31,520 --> 00:57:35,040
it's basically what happens when

00:57:32,799 --> 00:57:37,440
somebody types a username and a password

00:57:35,040 --> 00:57:38,640
and they entered the wrong information

00:57:37,440 --> 00:57:40,880
my point here is

00:57:38,640 --> 00:57:42,240
don't give away intelligence as to the

00:57:40,880 --> 00:57:44,000
existence of an account

00:57:42,240 --> 00:57:45,680
you want to keep the error messaging

00:57:44,000 --> 00:57:48,559
generic and vague

00:57:45,680 --> 00:57:50,160
for all failure modes do not say any of

00:57:48,559 --> 00:57:53,359
these things do not say

00:57:50,160 --> 00:57:55,359
wrong password like hey buddy you gave

00:57:53,359 --> 00:57:57,200
me the right user id but the password is

00:57:55,359 --> 00:57:58,480
not quite right uh you know

00:57:57,200 --> 00:57:59,359
can you give me another password right

00:57:58,480 --> 00:58:00,640
you don't want to say that you don't

00:57:59,359 --> 00:58:02,160
want to help them

00:58:00,640 --> 00:58:03,599
you don't want to say wrong user id

00:58:02,160 --> 00:58:05,359
because now you're telling them that

00:58:03,599 --> 00:58:06,880
this user does not exist in your system

00:58:05,359 --> 00:58:08,000
so that's intelligence that you're

00:58:06,880 --> 00:58:09,599
giving them

00:58:08,000 --> 00:58:11,520
you don't want to say account disabled

00:58:09,599 --> 00:58:13,440
it's like oh yeah yeah no this account

00:58:11,520 --> 00:58:14,880
totally exists in the system but look

00:58:13,440 --> 00:58:16,640
they haven't paid their bill so

00:58:14,880 --> 00:58:18,640
you know they're disabled you don't want

00:58:16,640 --> 00:58:21,760
to give that information

00:58:18,640 --> 00:58:24,880
so you want to keep it as generic

00:58:21,760 --> 00:58:29,040
and vague as possible and here's

00:58:24,880 --> 00:58:30,079
an example login failed invalid user id

00:58:29,040 --> 00:58:32,480
or password

00:58:30,079 --> 00:58:33,920
that's good that's nice and vague you do

00:58:32,480 --> 00:58:35,440
not give the attacker too much

00:58:33,920 --> 00:58:37,599
intelligence

00:58:35,440 --> 00:58:40,240
um okay so now let's look at failure

00:58:37,599 --> 00:58:43,440
handling and it's basically

00:58:40,240 --> 00:58:46,640
how do you handle repeated attempts

00:58:43,440 --> 00:58:48,480
at you know brute force uh logging in

00:58:46,640 --> 00:58:50,799
right how to mitigate brute force

00:58:48,480 --> 00:58:54,559
logging attempts and that's

00:58:50,799 --> 00:58:56,960
difficult um you know you might consider

00:58:54,559 --> 00:58:58,480
limiting failures by ip address right if

00:58:56,960 --> 00:58:59,839
a given app address gives you more than

00:58:58,480 --> 00:59:01,760
10 failures

00:58:59,839 --> 00:59:03,839
then you know just kind of block them

00:59:01,760 --> 00:59:04,640
for a while with this said a lot of

00:59:03,839 --> 00:59:07,599
folks

00:59:04,640 --> 00:59:08,160
are behind uh you know shared networks

00:59:07,599 --> 00:59:10,799
and

00:59:08,160 --> 00:59:12,480
um that you know you could be blocking

00:59:10,799 --> 00:59:15,280
people you don't intend to block so

00:59:12,480 --> 00:59:16,799
uh that can be tricky uh you might

00:59:15,280 --> 00:59:18,480
consider putting captra

00:59:16,799 --> 00:59:21,359
you know those uh you know show me how

00:59:18,480 --> 00:59:23,760
many bikes are in this picture right

00:59:21,359 --> 00:59:25,280
to mitigate scripted attempts at brute

00:59:23,760 --> 00:59:28,160
force logins

00:59:25,280 --> 00:59:29,520
but that's a really good way to alienate

00:59:28,160 --> 00:59:32,400
users very quickly

00:59:29,520 --> 00:59:33,440
so um again that's really not a great

00:59:32,400 --> 00:59:37,599
solution either

00:59:33,440 --> 00:59:39,680
um what you might do though is to at

00:59:37,599 --> 00:59:42,000
least at the very least you can log

00:59:39,680 --> 00:59:43,920
all failures uh you could log the

00:59:42,000 --> 00:59:46,160
attempted user id

00:59:43,920 --> 00:59:47,520
timestamp and the ip address of the

00:59:46,160 --> 00:59:51,599
person

00:59:47,520 --> 00:59:54,000
you might also trying to consider log

00:59:51,599 --> 00:59:55,040
login successes with the same fields

00:59:54,000 --> 00:59:57,200
because

00:59:55,040 --> 00:59:58,880
sometimes accounts get compromised and

00:59:57,200 --> 01:00:00,480
so you may want to capture this this

00:59:58,880 --> 01:00:02,880
forensic information as well

01:00:00,480 --> 01:00:03,760
so all right so that was for failure

01:00:02,880 --> 01:00:07,040
handling

01:00:03,760 --> 01:00:11,280
uh here's multi-factor authentication so

01:00:07,040 --> 01:00:15,119
um i have an article on wikipedia that

01:00:11,280 --> 01:00:17,359
explains that you know that's when

01:00:15,119 --> 01:00:18,559
you use like a a phone or an external

01:00:17,359 --> 01:00:22,640
device to

01:00:18,559 --> 01:00:25,920
uh enter a code for example right

01:00:22,640 --> 01:00:28,079
sms be careful of sms

01:00:25,920 --> 01:00:31,359
you know i use it i like it but

01:00:28,079 --> 01:00:34,960
sometimes phones do get lost or stolen

01:00:31,359 --> 01:00:36,480
also uh carrier accounts get hijacked i

01:00:34,960 --> 01:00:37,359
have an article here that kind of

01:00:36,480 --> 01:00:40,640
chronicles

01:00:37,359 --> 01:00:43,680
uh different aspects of a sim cloning

01:00:40,640 --> 01:00:45,920
where you know phone accounts get cloned

01:00:43,680 --> 01:00:46,880
so that's always something to keep in

01:00:45,920 --> 01:00:50,480
mind

01:00:46,880 --> 01:00:51,680
now if you send sms verification text

01:00:50,480 --> 01:00:55,119
messages

01:00:51,680 --> 01:00:56,079
um don't disclose your website in your

01:00:55,119 --> 01:00:58,640
sms

01:00:56,079 --> 01:00:59,520
text message don't say you know your

01:00:58,640 --> 01:01:02,559
site.com

01:00:59,520 --> 01:01:05,440
in the uh you know here's your

01:01:02,559 --> 01:01:07,680
here's your code verification for you

01:01:05,440 --> 01:01:09,440
know your site.com don't mention your

01:01:07,680 --> 01:01:12,880
site.com because if

01:01:09,440 --> 01:01:14,079
a person's phone gets stolen now you're

01:01:12,880 --> 01:01:16,720
giving the thief

01:01:14,079 --> 01:01:18,319
kind of uh some intelligence as to the

01:01:16,720 --> 01:01:19,839
fact that they've been using your site

01:01:18,319 --> 01:01:23,200
to do things on it right

01:01:19,839 --> 01:01:24,799
so uh you know the phone is lost don't

01:01:23,200 --> 01:01:28,000
give its finder any idea

01:01:24,799 --> 01:01:32,240
okay so that was for multi-factor

01:01:28,000 --> 01:01:35,119
uh let's look at account recovery um

01:01:32,240 --> 01:01:36,319
again a cheat sheet here from owasp on

01:01:35,119 --> 01:01:40,000
what to do with uh

01:01:36,319 --> 01:01:41,119
uh what to do in in cases of uh forgot

01:01:40,000 --> 01:01:43,440
password

01:01:41,119 --> 01:01:43,440
um

01:01:44,160 --> 01:01:47,520
i have an article here on dealing with

01:01:46,000 --> 01:01:51,760
security questions

01:01:47,520 --> 01:01:54,799
um where you know security questions

01:01:51,760 --> 01:01:56,160
answers should be hashed

01:01:54,799 --> 01:01:58,079
and we're going to look at password

01:01:56,160 --> 01:01:59,760
hashing but

01:01:58,079 --> 01:02:01,599
what scares me is there are a lot of

01:01:59,760 --> 01:02:03,359
applications out there

01:02:01,599 --> 01:02:05,520
you know when they ask you your mother's

01:02:03,359 --> 01:02:06,319
middle name for example they store this

01:02:05,520 --> 01:02:08,799
information

01:02:06,319 --> 01:02:09,920
in clear text they don't hash this

01:02:08,799 --> 01:02:11,920
information

01:02:09,920 --> 01:02:13,039
which means is if their database gets

01:02:11,920 --> 01:02:14,960
compromised

01:02:13,039 --> 01:02:16,720
to me it's even worse than your password

01:02:14,960 --> 01:02:18,079
being compromised because now what gets

01:02:16,720 --> 01:02:21,440
compromised is very

01:02:18,079 --> 01:02:25,200
personal information about you um

01:02:21,440 --> 01:02:27,760
so if you're using security questions um

01:02:25,200 --> 01:02:29,200
make sure these get hashed and we're

01:02:27,760 --> 01:02:30,960
gonna look at what kind of hashing later

01:02:29,200 --> 01:02:32,240
on but you should be hashing them

01:02:30,960 --> 01:02:35,839
similarly to how you would hash

01:02:32,240 --> 01:02:35,839
passwords um

01:02:36,400 --> 01:02:41,440
uh a pretty decent way to do password

01:02:39,680 --> 01:02:42,480
recovery is an email with a one time

01:02:41,440 --> 01:02:46,480
reset token

01:02:42,480 --> 01:02:49,039
however try to not let the the token

01:02:46,480 --> 01:02:51,039
url linger in the web browser try to

01:02:49,039 --> 01:02:53,119
redirect right away right so

01:02:51,039 --> 01:02:55,680
in the email that you send there's a url

01:02:53,119 --> 01:02:58,720
with a token embedded in it

01:02:55,680 --> 01:03:02,480
um when they click on that link

01:02:58,720 --> 01:03:02,480
and they arrive at that link

01:03:02,720 --> 01:03:09,680
try to redirect away from the

01:03:06,160 --> 01:03:11,680
the token in the url because

01:03:09,680 --> 01:03:14,079
if the token stays in the url and the

01:03:11,680 --> 01:03:14,079
person

01:03:14,559 --> 01:03:20,240
but then the person uh clicks

01:03:18,240 --> 01:03:21,760
to another to another website on your

01:03:20,240 --> 01:03:23,760
site's navigation for example

01:03:21,760 --> 01:03:25,039
then that token is gonna show up in the

01:03:23,760 --> 01:03:28,000
http referrer

01:03:25,039 --> 01:03:29,520
so uh just try to be mindful of that um

01:03:28,000 --> 01:03:30,000
try to expire the token quickly no

01:03:29,520 --> 01:03:32,480
longer than

01:03:30,000 --> 01:03:34,319
24 hours and also to remember that email

01:03:32,480 --> 01:03:36,240
accounts do get compromised right so

01:03:34,319 --> 01:03:40,079
it's not a foolproof way to do things

01:03:36,240 --> 01:03:43,280
um also beyond email recovery

01:03:40,079 --> 01:03:45,039
one-time code over an sms

01:03:43,280 --> 01:03:46,319
or some other side channel works but

01:03:45,039 --> 01:03:48,960
again remember that

01:03:46,319 --> 01:03:50,480
phones do get stolen lost and then sims

01:03:48,960 --> 01:03:53,599
get cloned so

01:03:50,480 --> 01:03:54,319
um when an account does recover to make

01:03:53,599 --> 01:03:58,480
sure that you

01:03:54,319 --> 01:04:01,039
invalidate all existing sessions

01:03:58,480 --> 01:04:02,799
okay so if if there's if if the user

01:04:01,039 --> 01:04:05,280
appears to be logged in anywhere

01:04:02,799 --> 01:04:06,319
but an account recovery just happened

01:04:05,280 --> 01:04:08,799
make sure that

01:04:06,319 --> 01:04:10,160
you log out all the other sessions that

01:04:08,799 --> 01:04:13,520
this user may have

01:04:10,160 --> 01:04:16,880
at the time that they completely uh

01:04:13,520 --> 01:04:18,319
successfully complete the recovery

01:04:16,880 --> 01:04:20,240
all right so now let's look at password

01:04:18,319 --> 01:04:22,000
policies uh so

01:04:20,240 --> 01:04:23,359
it's kind of you know what what should

01:04:22,000 --> 01:04:26,160
the password look like

01:04:23,359 --> 01:04:26,880
first off you should forbid users from

01:04:26,160 --> 01:04:29,680
entering

01:04:26,880 --> 01:04:29,680
a password

01:04:30,160 --> 01:04:36,720
that is from a list of known passwords

01:04:33,920 --> 01:04:38,960
so there are open source lists of known

01:04:36,720 --> 01:04:39,680
passwords these passwords were gathered

01:04:38,960 --> 01:04:42,240
from

01:04:39,680 --> 01:04:43,920
uh sites that have been hacked and

01:04:42,240 --> 01:04:46,240
cracked in the past

01:04:43,920 --> 01:04:48,960
so i have a link to a small list i have

01:04:46,240 --> 01:04:50,559
a list a link to a big list of known

01:04:48,960 --> 01:04:53,359
password maintained by

01:04:50,559 --> 01:04:55,119
daniel measler so this is on his github

01:04:53,359 --> 01:04:57,680
so you should check it out

01:04:55,119 --> 01:04:59,440
so you should try to weave these lists

01:04:57,680 --> 01:05:01,200
in your application and if a user

01:04:59,440 --> 01:05:02,799
creates a password that matches anything

01:05:01,200 --> 01:05:06,720
on those lists you should tell them nope

01:05:02,799 --> 01:05:08,720
sorry you should

01:05:06,720 --> 01:05:10,799
if you you should track the user's

01:05:08,720 --> 01:05:12,079
passwords and try to forbid them from

01:05:10,799 --> 01:05:16,480
entering a password

01:05:12,079 --> 01:05:19,599
from their last five passwords um

01:05:16,480 --> 01:05:20,480
you should uh try to have passwords

01:05:19,599 --> 01:05:24,079
whose length

01:05:20,480 --> 01:05:26,400
is 10 characters or more and we're gonna

01:05:24,079 --> 01:05:28,000
we're gonna look at that a little bit

01:05:26,400 --> 01:05:29,359
later on

01:05:28,000 --> 01:05:32,319
the password should not contain the

01:05:29,359 --> 01:05:35,359
user's username

01:05:32,319 --> 01:05:38,480
and it should try to have at least three

01:05:35,359 --> 01:05:42,079
of the four available character types

01:05:38,480 --> 01:05:44,240
so lowercase uppercase number symbols

01:05:42,079 --> 01:05:45,119
you might consider making users chant

01:05:44,240 --> 01:05:48,319
passwords

01:05:45,119 --> 01:05:51,280
every three months however

01:05:48,319 --> 01:05:53,119
this practice has been debated so i have

01:05:51,280 --> 01:05:56,240
an article here to the discussions

01:05:53,119 --> 01:05:59,200
um uh windows 10

01:05:56,240 --> 01:06:01,200
server apparently is dropping um their

01:05:59,200 --> 01:06:05,839
password expiry so

01:06:01,200 --> 01:06:05,839
that's something to keep in mind

01:06:06,559 --> 01:06:11,359
so uh let's look at password hashing so

01:06:09,280 --> 01:06:13,680
password hashing

01:06:11,359 --> 01:06:14,799
and again i have an entire 30-minute

01:06:13,680 --> 01:06:16,960
talk

01:06:14,799 --> 01:06:19,280
covering this so we're going to stay at

01:06:16,960 --> 01:06:22,400
the surface

01:06:19,280 --> 01:06:25,359
but basically you you should assume

01:06:22,400 --> 01:06:26,720
that your user database has been stolen

01:06:25,359 --> 01:06:29,839
by hackers

01:06:26,720 --> 01:06:32,000
and you don't want those hackers to have

01:06:29,839 --> 01:06:33,520
to know the passwords that your users

01:06:32,000 --> 01:06:35,119
put in there because chances are your

01:06:33,520 --> 01:06:37,599
users are using the same password on

01:06:35,119 --> 01:06:40,720
multiple sites that's just uh

01:06:37,599 --> 01:06:42,559
you know a lot of what happens um

01:06:40,720 --> 01:06:45,760
so you don't want to give them that

01:06:42,559 --> 01:06:50,000
intelligence and so password hashing

01:06:45,760 --> 01:06:52,640
makes it very difficult impossible

01:06:50,000 --> 01:06:54,640
for hackers to know your users passwords

01:06:52,640 --> 01:06:56,319
so when they get your your database all

01:06:54,640 --> 01:06:56,960
they see are hashes and they can't do

01:06:56,319 --> 01:07:00,160
anything

01:06:56,960 --> 01:07:03,200
with those hashes um so um

01:07:00,160 --> 01:07:04,400
hashing is a big field um hashing was

01:07:03,200 --> 01:07:07,680
actually

01:07:04,400 --> 01:07:08,960
used as a message the concept of hashing

01:07:07,680 --> 01:07:12,400
was introduced

01:07:08,960 --> 01:07:15,920
as a what's called a message digest

01:07:12,400 --> 01:07:18,400
it is hashing was invented to determine

01:07:15,920 --> 01:07:19,520
the integrity of a message to verify

01:07:18,400 --> 01:07:22,960
that a message

01:07:19,520 --> 01:07:24,559
was not modified between its origin and

01:07:22,960 --> 01:07:26,480
its destination

01:07:24,559 --> 01:07:28,400
and that's what a message digest was

01:07:26,480 --> 01:07:29,920
originally made for

01:07:28,400 --> 01:07:32,480
and that's why the early hashing

01:07:29,920 --> 01:07:34,640
algorithms were developed

01:07:32,480 --> 01:07:36,319
these hashing algorithms were not

01:07:34,640 --> 01:07:38,480
developed or designed for

01:07:36,319 --> 01:07:40,880
password hashing right so you have

01:07:38,480 --> 01:07:41,599
hashing and password hashing is a subset

01:07:40,880 --> 01:07:45,440
of hashing

01:07:41,599 --> 01:07:48,799
with a lot more stringent requirements

01:07:45,440 --> 01:07:51,119
and while you have some good uh password

01:07:48,799 --> 01:07:52,799
while you have some good hashing

01:07:51,119 --> 01:07:53,520
frameworks like you know the sha

01:07:52,799 --> 01:07:56,799
variants

01:07:53,520 --> 01:07:59,200
uh that are good for message

01:07:56,799 --> 01:08:01,280
integrity they're not good they're not

01:07:59,200 --> 01:08:03,680
designed for password hashing they're

01:08:01,280 --> 01:08:05,680
two very different use cases

01:08:03,680 --> 01:08:06,960
so if you are doing password hashing you

01:08:05,680 --> 01:08:09,760
should be using an

01:08:06,960 --> 01:08:10,640
industry standard hashing framework

01:08:09,760 --> 01:08:13,680
which was

01:08:10,640 --> 01:08:14,319
specifically designed for password

01:08:13,680 --> 01:08:17,920
hashing

01:08:14,319 --> 01:08:21,279
and some of its features should be

01:08:17,920 --> 01:08:24,159
it's a multi-pass which algorithm

01:08:21,279 --> 01:08:26,319
which will put a lot of strain on cpu a

01:08:24,159 --> 01:08:28,560
lot of strain on on memory

01:08:26,319 --> 01:08:30,159
it should have a unique salt bake into

01:08:28,560 --> 01:08:33,120
the hash

01:08:30,159 --> 01:08:34,799
so bcrypt has been an industry standard

01:08:33,120 --> 01:08:37,440
for a long time and it's still

01:08:34,799 --> 01:08:39,199
okay people are building rigs dedicated

01:08:37,440 --> 01:08:41,120
to b cracking with this said

01:08:39,199 --> 01:08:42,880
uh they're still very not practical and

01:08:41,120 --> 01:08:46,480
i'm going to show you an example of it

01:08:42,880 --> 01:08:49,520
um trying to anticipate filter

01:08:46,480 --> 01:08:49,520
filter um

01:08:50,400 --> 01:08:54,319
trying to anticipate future

01:08:52,080 --> 01:08:56,080
vulnerabilities in bcrypt uh there was a

01:08:54,319 --> 01:08:59,440
password hashing competition

01:08:56,080 --> 01:09:00,239
uh that was completed in 2015 and a new

01:08:59,440 --> 01:09:02,880
algorithm

01:09:00,239 --> 01:09:03,920
emerged out of this competition called

01:09:02,880 --> 01:09:07,600
argon

01:09:03,920 --> 01:09:09,040
2. uh

01:09:07,600 --> 01:09:10,960
there are some questions though and

01:09:09,040 --> 01:09:13,120
we're going to touch on that but

01:09:10,960 --> 01:09:14,799
argon 2 is supposed to be the latest and

01:09:13,120 --> 01:09:15,279
greatest in password hashing with this

01:09:14,799 --> 01:09:16,880
said

01:09:15,279 --> 01:09:17,920
uh there are things to be mindful of so

01:09:16,880 --> 01:09:19,600
we're going to touch on those in a

01:09:17,920 --> 01:09:22,239
little bit

01:09:19,600 --> 01:09:22,880
so there's a great article here by david

01:09:22,239 --> 01:09:25,199
whitlock

01:09:22,880 --> 01:09:26,000
that compares these different hashing

01:09:25,199 --> 01:09:29,040
algorithm

01:09:26,000 --> 01:09:31,440
um and so for now bcrypt is still good

01:09:29,040 --> 01:09:32,799
all right so i highly recommend

01:09:31,440 --> 01:09:35,040
following

01:09:32,799 --> 01:09:36,000
a company on twitter called terra hash

01:09:35,040 --> 01:09:38,239
corp

01:09:36,000 --> 01:09:39,839
so i have a slide here that you see it's

01:09:38,239 --> 01:09:40,960
going to be difficult to see the slides

01:09:39,839 --> 01:09:43,679
i'm going to read it

01:09:40,960 --> 01:09:45,759
out to you but if you can see at the top

01:09:43,679 --> 01:09:48,640
here this twitter url it says

01:09:45,759 --> 01:09:49,359
terra hash corp so you should check out

01:09:48,640 --> 01:09:52,080
terra

01:09:49,359 --> 01:09:53,199
corp on twitter they put out a lot of

01:09:52,080 --> 01:09:57,040
research so

01:09:53,199 --> 01:10:00,159
what this company has done is they have

01:09:57,040 --> 01:10:03,679
built super high performance

01:10:00,159 --> 01:10:06,320
clusters of like password hashing

01:10:03,679 --> 01:10:07,440
password cracking rigs and they offer

01:10:06,320 --> 01:10:10,080
password

01:10:07,440 --> 01:10:10,880
cracking as a service and every once in

01:10:10,080 --> 01:10:15,120
a while

01:10:10,880 --> 01:10:17,440
they publish um uh

01:10:15,120 --> 01:10:18,560
how long it takes for their rigs to

01:10:17,440 --> 01:10:21,280
crack passwords

01:10:18,560 --> 01:10:22,560
based on different hashing algorithms so

01:10:21,280 --> 01:10:24,880
at the top

01:10:22,560 --> 01:10:26,400
are the weakest hashing algorithms and

01:10:24,880 --> 01:10:28,480
then at the bottom

01:10:26,400 --> 01:10:30,239
are the strongest hashing algorithms

01:10:28,480 --> 01:10:33,520
right so it goes from

01:10:30,239 --> 01:10:34,960
weakest to strongest so

01:10:33,520 --> 01:10:36,960
if you look at the second line here

01:10:34,960 --> 01:10:39,679
where it says md5

01:10:36,960 --> 01:10:40,400
it shows you that even with a password

01:10:39,679 --> 01:10:43,440
of nine

01:10:40,400 --> 01:10:44,480
characters they can crack that in nine

01:10:43,440 --> 01:10:48,480
hours

01:10:44,480 --> 01:10:49,120
even with md5 right even a password of

01:10:48,480 --> 01:10:53,040
length

01:10:49,120 --> 01:10:55,360
10 uh they can crack that in one month

01:10:53,040 --> 01:10:57,920
with md5 right that's why i'm saying

01:10:55,360 --> 01:11:00,080
don't use md5

01:10:57,920 --> 01:11:02,400
with the sha variants right if you if

01:11:00,080 --> 01:11:05,520
you go a few lines down

01:11:02,400 --> 01:11:07,840
for a shot to 512

01:11:05,520 --> 01:11:09,520
it will take them two years and four

01:11:07,840 --> 01:11:13,360
months to crack

01:11:09,520 --> 01:11:15,760
a password of length 10 on their rig

01:11:13,360 --> 01:11:16,480
now if you go all the way to the bottom

01:11:15,760 --> 01:11:19,280
though

01:11:16,480 --> 01:11:21,280
to bcrypt which is the you know has been

01:11:19,280 --> 01:11:23,880
an industry standard

01:11:21,280 --> 01:11:26,719
a password of length 10 will take them

01:11:23,880 --> 01:11:29,760
167 million years million

01:11:26,719 --> 01:11:32,960
cures a password of length nine with b

01:11:29,760 --> 01:11:35,520
crit will take them 1.8 million

01:11:32,960 --> 01:11:36,159
years right so you can see the relative

01:11:35,520 --> 01:11:40,800
strength

01:11:36,159 --> 01:11:42,480
um but one thing is for sure though

01:11:40,800 --> 01:11:44,560
one of the most significant things you

01:11:42,480 --> 01:11:48,000
can do to improve

01:11:44,560 --> 01:11:50,480
your security posture is

01:11:48,000 --> 01:11:51,920
to increase the number of characters in

01:11:50,480 --> 01:11:54,960
your users passwords

01:11:51,920 --> 01:11:58,719
right because if you go to 13 characters

01:11:54,960 --> 01:12:01,360
um it will take them even with ntlm or

01:11:58,719 --> 01:12:04,159
md5 right at 13 characters

01:12:01,360 --> 01:12:05,760
with md5 it will take them 91 million

01:12:04,159 --> 01:12:08,320
million years to

01:12:05,760 --> 01:12:09,600
to crack your password so you know

01:12:08,320 --> 01:12:11,440
having a lot of characters in the

01:12:09,600 --> 01:12:14,000
password you know 13 or more

01:12:11,440 --> 01:12:15,840
is definitely very impactful with this

01:12:14,000 --> 01:12:18,239
said though make sure you pick a

01:12:15,840 --> 01:12:19,920
good hashing algorithm and bcrypt is

01:12:18,239 --> 01:12:23,440
there so as you can see

01:12:19,920 --> 01:12:23,920
on this chart argon 2 is nowhere to be

01:12:23,440 --> 01:12:26,960
found

01:12:23,920 --> 01:12:30,320
right so why did they not list argon 2

01:12:26,960 --> 01:12:31,199
on on their research and so somebody

01:12:30,320 --> 01:12:37,840
actually

01:12:31,199 --> 01:12:37,840
oh whoa

01:12:38,400 --> 01:12:51,840
i died

01:12:54,239 --> 01:12:57,360
uh am i here

01:12:57,920 --> 01:13:01,440
oh okay yeah i am here sorry looks like

01:13:01,199 --> 01:13:04,800
i

01:13:01,440 --> 01:13:06,400
accidentally oh yeah okay i

01:13:04,800 --> 01:13:08,640
accidentally got out of presenter mode

01:13:06,400 --> 01:13:08,640
okay

01:13:09,199 --> 01:13:13,679
okay sorry uh i'm back anyway uh yeah

01:13:11,679 --> 01:13:16,719
because i clicked the image

01:13:13,679 --> 01:13:18,159
um so as you can see argon 2

01:13:16,719 --> 01:13:20,080
is nowhere to be found on their charts

01:13:18,159 --> 01:13:21,120
so somebody actually asked them about

01:13:20,080 --> 01:13:23,120
that

01:13:21,120 --> 01:13:25,120
in this twitter thread so again it's

01:13:23,120 --> 01:13:26,880
difficult to read on the screen

01:13:25,120 --> 01:13:30,320
but you will see it in the pdf but

01:13:26,880 --> 01:13:30,320
somebody asked about argon 2

01:13:30,560 --> 01:13:36,719
and they ended up saying that uh

01:13:33,600 --> 01:13:37,520
um some of the folks who worked at terra

01:13:36,719 --> 01:13:40,640
hash uh

01:13:37,520 --> 01:13:44,000
jm gosney were actually part of this uh

01:13:40,640 --> 01:13:46,159
password um uh

01:13:44,000 --> 01:13:48,080
this password hashing competition in

01:13:46,159 --> 01:13:48,880
2015 they were kind of on the judging

01:13:48,080 --> 01:13:51,600
panel

01:13:48,880 --> 01:13:52,000
um and they realized after the fact that

01:13:51,600 --> 01:13:55,199
uh

01:13:52,000 --> 01:13:56,320
it was not a good uh password hashing

01:13:55,199 --> 01:13:59,520
algorithm

01:13:56,320 --> 01:14:00,560
um and so they they don't recommend it

01:13:59,520 --> 01:14:04,480
um

01:14:00,560 --> 01:14:06,800
i don't quite understand why um

01:14:04,480 --> 01:14:08,320
but this is the thread here uh so for

01:14:06,800 --> 01:14:11,679
transparency so

01:14:08,320 --> 01:14:14,719
um for now i would say

01:14:11,679 --> 01:14:15,360
uh bcrypt is still good it is still

01:14:14,719 --> 01:14:18,239
strong

01:14:15,360 --> 01:14:19,840
so i would recommend using that and if

01:14:18,239 --> 01:14:22,239
you want to use argon 2 that's

01:14:19,840 --> 01:14:22,880
probably okay but try to you know do

01:14:22,239 --> 01:14:24,560
your

01:14:22,880 --> 01:14:26,560
a little bit of research there and so

01:14:24,560 --> 01:14:28,400
you can start with those links that i

01:14:26,560 --> 01:14:32,080
posted right here

01:14:28,400 --> 01:14:36,159
okay if you're interested in

01:14:32,080 --> 01:14:38,400
working with argon 2id

01:14:36,159 --> 01:14:39,280
i created an open source project called

01:14:38,400 --> 01:14:41,040
hash tuner

01:14:39,280 --> 01:14:42,719
because the thing about argon 2id is you

01:14:41,040 --> 01:14:46,640
have to tune it properly

01:14:42,719 --> 01:14:49,120
for like memory and cpu and threads

01:14:46,640 --> 01:14:49,679
so this open source project can kind of

01:14:49,120 --> 01:14:54,159
help you

01:14:49,679 --> 01:14:55,920
with that there's a great article

01:14:54,159 --> 01:14:57,440
about password hashing in the symfony

01:14:55,920 --> 01:15:00,480
framework which is in php

01:14:57,440 --> 01:15:02,560
uh there's another one about uh for

01:15:00,480 --> 01:15:06,080
doing it in laravel

01:15:02,560 --> 01:15:07,199
um uh there's a another great article by

01:15:06,080 --> 01:15:09,120
nicholas grecus

01:15:07,199 --> 01:15:10,320
that is kind of technology agnostic

01:15:09,120 --> 01:15:12,320
really on on

01:15:10,320 --> 01:15:14,800
hashing in general and kind of the

01:15:12,320 --> 01:15:17,840
tensions between having proper

01:15:14,800 --> 01:15:21,360
password hashing methodologies

01:15:17,840 --> 01:15:24,320
and not bringing down your server right

01:15:21,360 --> 01:15:25,600
so he'll touch on different resiliency

01:15:24,320 --> 01:15:28,000
and scalability pad

01:15:25,600 --> 01:15:28,880
patterns uh so it's it's it's definitely

01:15:28,000 --> 01:15:31,679
a good

01:15:28,880 --> 01:15:32,880
read uh if you operate in the means on

01:15:31,679 --> 01:15:36,239
the mean stack

01:15:32,880 --> 01:15:38,880
um you know with with and

01:15:36,239 --> 01:15:39,679
node.js on the server i have an article

01:15:38,880 --> 01:15:41,760
here on doing

01:15:39,679 --> 01:15:43,600
a password hashing on that stack as well

01:15:41,760 --> 01:15:47,679
so you should check it out

01:15:43,600 --> 01:15:48,719
all right so now password transport you

01:15:47,679 --> 01:15:50,320
should basically

01:15:48,719 --> 01:15:52,400
obviously you should use tls for

01:15:50,320 --> 01:15:54,320
everything tls me

01:15:52,400 --> 01:15:56,400
it used to be called ssl but the you

01:15:54,320 --> 01:15:57,280
know we call it you know tls now for

01:15:56,400 --> 01:16:00,640
some time

01:15:57,280 --> 01:16:03,360
uh so uh make uh

01:16:00,640 --> 01:16:04,640
now you can get uh tls certificates for

01:16:03,360 --> 01:16:06,640
your website for free

01:16:04,640 --> 01:16:08,000
right for some time you is you've been

01:16:06,640 --> 01:16:11,840
able to do that using

01:16:08,000 --> 01:16:14,239
let's encrypt.org so

01:16:11,840 --> 01:16:15,600
the best practice is to use tls for all

01:16:14,239 --> 01:16:18,560
of your web application

01:16:15,600 --> 01:16:20,080
for everything but if you don't want to

01:16:18,560 --> 01:16:22,000
use it for everything definitely use it

01:16:20,080 --> 01:16:23,760
for login registration and

01:16:22,000 --> 01:16:25,199
and password recovery right so anytime

01:16:23,760 --> 01:16:26,000
sensitive data is traveling over the

01:16:25,199 --> 01:16:28,000
network

01:16:26,000 --> 01:16:30,719
make sure that it is over an encrypted

01:16:28,000 --> 01:16:35,199
transport um and that's what tls is for

01:16:30,719 --> 01:16:38,880
so i'll skip over that um

01:16:35,199 --> 01:16:41,600
okay so uh another thing to look at

01:16:38,880 --> 01:16:42,800
is session length and re-authentication

01:16:41,600 --> 01:16:45,199
so when a user

01:16:42,800 --> 01:16:46,640
logs into your application they are

01:16:45,199 --> 01:16:48,239
logged in right but then

01:16:46,640 --> 01:16:50,000
ask yourself how long should they be

01:16:48,239 --> 01:16:53,120
logged in right so

01:16:50,000 --> 01:16:54,960
for example if i go to amazon.com i'm

01:16:53,120 --> 01:16:55,440
always logged in right they never log me

01:16:54,960 --> 01:16:59,679
out

01:16:55,440 --> 01:17:02,640
however when i'm about when i add

01:16:59,679 --> 01:17:04,640
when i have uh when i have added things

01:17:02,640 --> 01:17:05,760
to my shopping cart and i am about to

01:17:04,640 --> 01:17:08,640
check out

01:17:05,760 --> 01:17:10,000
most often amazon requires me to

01:17:08,640 --> 01:17:12,560
re-enter my password

01:17:10,000 --> 01:17:14,239
for safety reasons right so these are

01:17:12,560 --> 01:17:16,239
things worth keeping in mind

01:17:14,239 --> 01:17:17,600
you should be able to identify things

01:17:16,239 --> 01:17:20,800
which are

01:17:17,600 --> 01:17:23,760
safe to stay logged in forever right um

01:17:20,800 --> 01:17:25,040
it's basically browsing content adding

01:17:23,760 --> 01:17:27,840
things to a shopping cart

01:17:25,040 --> 01:17:29,199
that's safe but if you start entering

01:17:27,840 --> 01:17:32,320
into transactional

01:17:29,199 --> 01:17:34,880
use cases like doing a stock trade or

01:17:32,320 --> 01:17:36,000
actually purchasing items from the

01:17:34,880 --> 01:17:38,640
shopping cart

01:17:36,000 --> 01:17:40,000
that's when you should consider asking

01:17:38,640 --> 01:17:42,239
your users to

01:17:40,000 --> 01:17:43,520
re-authenticate to make sure that they

01:17:42,239 --> 01:17:46,480
are who they say they are

01:17:43,520 --> 01:17:49,360
right so that's kind of uh you know some

01:17:46,480 --> 01:17:52,719
of those better practices

01:17:49,360 --> 01:17:56,400
um all right now what happens when

01:17:52,719 --> 01:17:59,280
you have a compromise account so um

01:17:56,400 --> 01:18:01,040
you know it's it's difficult um it's

01:17:59,280 --> 01:18:04,239
it's a good idea to have

01:18:01,040 --> 01:18:07,760
an event log in your system um

01:18:04,239 --> 01:18:10,320
uh to to log all events in your system

01:18:07,760 --> 01:18:11,600
um preferably to a separate data store a

01:18:10,320 --> 01:18:12,880
data store that is separate from your

01:18:11,600 --> 01:18:14,960
main application

01:18:12,880 --> 01:18:17,199
so that you don't bog down your main

01:18:14,960 --> 01:18:18,400
application with all of these activity

01:18:17,199 --> 01:18:21,120
event logs

01:18:18,400 --> 01:18:23,360
um and for this event log you could use

01:18:21,120 --> 01:18:25,280
an sql or a nosql solution

01:18:23,360 --> 01:18:26,719
a nosql solution may make a lot of sense

01:18:25,280 --> 01:18:27,360
because you would have like a lot of

01:18:26,719 --> 01:18:28,880
events you

01:18:27,360 --> 01:18:30,960
you know you could accumulate millions

01:18:28,880 --> 01:18:33,679
of events per day and and so

01:18:30,960 --> 01:18:35,120
trying to scale that and then rdbms uh

01:18:33,679 --> 01:18:36,000
is going to be a lot more difficult than

01:18:35,120 --> 01:18:38,719
trying to scale that

01:18:36,000 --> 01:18:40,719
uh in a nosql solution so that's one

01:18:38,719 --> 01:18:42,640
thing you could do uh so you could use a

01:18:40,719 --> 01:18:45,520
separate data store to do this with

01:18:42,640 --> 01:18:46,239
separate screen credentials so you could

01:18:45,520 --> 01:18:48,000
scale it

01:18:46,239 --> 01:18:50,239
independently and here you would try to

01:18:48,000 --> 01:18:52,719
gather as much forensic evidence

01:18:50,239 --> 01:18:54,080
as practical as people use your

01:18:52,719 --> 01:18:56,640
application such that

01:18:54,080 --> 01:18:58,640
if an account does get compromised you

01:18:56,640 --> 01:19:00,800
can try and track as much activity as

01:18:58,640 --> 01:19:01,440
possible starting with the original ip

01:19:00,800 --> 01:19:03,120
address

01:19:01,440 --> 01:19:05,679
through which the user originally logged

01:19:03,120 --> 01:19:09,440
in right so user id ip address

01:19:05,679 --> 01:19:10,800
timestamp and whatever operation however

01:19:09,440 --> 01:19:13,120
if you do all these things you should

01:19:10,800 --> 01:19:15,760
keep in mind this thing

01:19:13,120 --> 01:19:18,640
called gdpr right the global data

01:19:15,760 --> 01:19:20,719
privacy regulation

01:19:18,640 --> 01:19:21,679
because to be compliant with this

01:19:20,719 --> 01:19:23,520
whenever you log

01:19:21,679 --> 01:19:25,920
information about users you need to

01:19:23,520 --> 01:19:27,760
disclose this information

01:19:25,920 --> 01:19:29,440
to your users you need to disclose the

01:19:27,760 --> 01:19:31,040
fact that you log all this information

01:19:29,440 --> 01:19:32,480
about them and you need to obtain their

01:19:31,040 --> 01:19:35,760
informed

01:19:32,480 --> 01:19:37,840
consent yes and as meg just pointed out

01:19:35,760 --> 01:19:40,960
uh ccpa as well right so

01:19:37,840 --> 01:19:43,199
whichever your um jurisdiction um

01:19:40,960 --> 01:19:45,360
you know there are regulatory

01:19:43,199 --> 01:19:47,840
considerations to always be mindful of

01:19:45,360 --> 01:19:48,480
whenever you collect user data right and

01:19:47,840 --> 01:19:50,080
and you often

01:19:48,480 --> 01:19:51,679
have to kind of keep that in mind all

01:19:50,080 --> 01:19:54,159
right

01:19:51,679 --> 01:19:56,480
okay so that was a lot here's a picture

01:19:54,159 --> 01:20:01,040
of my pupper he's a mini golden doodle

01:19:56,480 --> 01:20:04,400
his name is archer okay

01:20:01,040 --> 01:20:06,000
now let's look at oauth

01:20:04,400 --> 01:20:07,440
we're gonna dive a little bit into what

01:20:06,000 --> 01:20:10,400
oauth is

01:20:07,440 --> 01:20:13,199
uh and how it's used and some and some

01:20:10,400 --> 01:20:13,199
better practices

01:20:13,679 --> 01:20:16,880
okay so uh there are two things to keep

01:20:16,400 --> 01:20:19,760
in mind

01:20:16,880 --> 01:20:20,320
one is authentication authentication

01:20:19,760 --> 01:20:24,000
means

01:20:20,320 --> 01:20:27,120
who am i i am chris

01:20:24,000 --> 01:20:27,760
uh then there's authorization what am i

01:20:27,120 --> 01:20:31,040
allowed

01:20:27,760 --> 01:20:32,159
to you to do i am allowed to use this

01:20:31,040 --> 01:20:34,480
application i am

01:20:32,159 --> 01:20:36,239
you i am allowed to add items to a

01:20:34,480 --> 01:20:38,960
shopping cart right these are

01:20:36,239 --> 01:20:41,120
authorization considerations so when the

01:20:38,960 --> 01:20:44,639
oauth standard first came out

01:20:41,120 --> 01:20:46,880
i was called and evolved into auth 2.0

01:20:44,639 --> 01:20:48,719
it really focused on authorization it

01:20:46,880 --> 01:20:52,480
really focused on

01:20:48,719 --> 01:20:52,480
what people were allowed to do

01:20:53,600 --> 01:20:58,159
and it did not have any specific

01:20:56,800 --> 01:21:00,400
provisions

01:20:58,159 --> 01:21:02,000
as to what to do with authentication it

01:21:00,400 --> 01:21:05,679
didn't tell you what to do to

01:21:02,000 --> 01:21:07,520
specifically identify users um so that's

01:21:05,679 --> 01:21:08,960
kind of what it lacked uh authentication

01:21:07,520 --> 01:21:12,480
and other specific

01:21:08,960 --> 01:21:14,080
so to address this limitation um open id

01:21:12,480 --> 01:21:17,120
connect

01:21:14,080 --> 01:21:18,400
came to the scene um it's also known as

01:21:17,120 --> 01:21:22,320
oidc

01:21:18,400 --> 01:21:24,480
and oidc is a specialization of oauth

01:21:22,320 --> 01:21:28,080
2.0 right oidc

01:21:24,480 --> 01:21:31,840
fits entirely within the oauth 2.0

01:21:28,080 --> 01:21:35,280
spec and it adds specifics

01:21:31,840 --> 01:21:37,280
uh to the authentication areas of oauth2

01:21:35,280 --> 01:21:38,000
which oauth2 says you know you figure it

01:21:37,280 --> 01:21:41,440
out right

01:21:38,000 --> 01:21:43,600
so oidc figures out what to do there

01:21:41,440 --> 01:21:44,719
so it has authentication which makes it

01:21:43,600 --> 01:21:48,159
possible

01:21:44,719 --> 01:21:50,719
to say who a user is so that's used

01:21:48,159 --> 01:21:52,320
all over the place by social media sites

01:21:50,719 --> 01:21:54,800
and many web applications

01:21:52,320 --> 01:21:56,080
anytime you have a phone app that needs

01:21:54,800 --> 01:21:58,960
to authenticate

01:21:56,080 --> 01:22:01,440
uh with your account uh chances are it

01:21:58,960 --> 01:22:02,880
will be using oidc as the most secure

01:22:01,440 --> 01:22:05,920
way to do things

01:22:02,880 --> 01:22:08,560
uh so anytime you know you are

01:22:05,920 --> 01:22:08,960
logging into a phone app for example and

01:22:08,560 --> 01:22:11,120
it

01:22:08,960 --> 01:22:13,199
says you know log in with your twitter

01:22:11,120 --> 01:22:14,639
account and so it takes you to twitter

01:22:13,199 --> 01:22:16,000
and then it says you know twitter asks

01:22:14,639 --> 01:22:17,920
you are you sure you want to allow this

01:22:16,000 --> 01:22:19,360
application to you know use all your

01:22:17,920 --> 01:22:21,199
stuff and you say yes okay and then

01:22:19,360 --> 01:22:23,600
redirects you do some handshaking

01:22:21,199 --> 01:22:24,719
a token get exchanged and now you're

01:22:23,600 --> 01:22:27,760
able to use

01:22:24,719 --> 01:22:30,960
the app with your

01:22:27,760 --> 01:22:33,280
twitter user okay

01:22:30,960 --> 01:22:34,880
so oigc supports four grand types you

01:22:33,280 --> 01:22:37,520
have off code

01:22:34,880 --> 01:22:38,880
it's used to support implicit uh but

01:22:37,520 --> 01:22:40,960
then that got kind of uh

01:22:38,880 --> 01:22:42,400
augmented with what's called uh auth

01:22:40,960 --> 01:22:46,560
code plus a pkc

01:22:42,400 --> 01:22:48,320
workflow i have a link to it um

01:22:46,560 --> 01:22:49,840
there's resource owner password you get

01:22:48,320 --> 01:22:52,080
client credential

01:22:49,840 --> 01:22:53,120
um so i'm not gonna go into all of these

01:22:52,080 --> 01:22:55,520
uh there's if you

01:22:53,120 --> 01:22:57,280
want to learn more about these i got an

01:22:55,520 --> 01:22:59,840
article here by keith casey

01:22:57,280 --> 01:23:00,560
uh that kind of goes into all all of

01:22:59,840 --> 01:23:02,719
these

01:23:00,560 --> 01:23:03,760
um but we're going to look at one of

01:23:02,719 --> 01:23:07,120
them which is the

01:23:03,760 --> 01:23:10,159
implicit uh flow um

01:23:07,120 --> 01:23:12,400
but again it's it's no longer implicit

01:23:10,159 --> 01:23:15,199
uh it's basically you're using auth code

01:23:12,400 --> 01:23:18,239
plus pkce instead um

01:23:15,199 --> 01:23:18,719
functionally it's it's it's very similar

01:23:18,239 --> 01:23:21,040
but

01:23:18,719 --> 01:23:22,560
uh it's it's a lot more secure way to do

01:23:21,040 --> 01:23:23,840
this so i have a link to it so you can

01:23:22,560 --> 01:23:27,040
learn more about it

01:23:23,840 --> 01:23:29,520
i'm not going to dig deeply into it um

01:23:27,040 --> 01:23:31,120
but but this off code with pkc is best

01:23:29,520 --> 01:23:33,760
fit for most web applications

01:23:31,120 --> 01:23:36,639
you know for example you have um a

01:23:33,760 --> 01:23:38,719
restful api or you have a graphql api

01:23:36,639 --> 01:23:40,239
that is consumed by a single page

01:23:38,719 --> 01:23:43,360
application

01:23:40,239 --> 01:23:45,520
or phone applications and and the point

01:23:43,360 --> 01:23:48,400
is you don't want the user login

01:23:45,520 --> 01:23:50,080
or password to be persisted on the

01:23:48,400 --> 01:23:52,320
single page application

01:23:50,080 --> 01:23:55,600
you don't want it to be persisted on the

01:23:52,320 --> 01:23:59,199
phone application either

01:23:55,600 --> 01:24:00,320
so the way it works at a very high level

01:23:59,199 --> 01:24:03,840
you have your user

01:24:00,320 --> 01:24:03,840
that may open the phone app

01:24:04,159 --> 01:24:08,159
and when the app opens up it redirects

01:24:07,120 --> 01:24:11,440
the user into

01:24:08,159 --> 01:24:13,760
web browser to the

01:24:11,440 --> 01:24:15,840
openid connect provider which gives them

01:24:13,760 --> 01:24:16,800
an html page that says hey do you want

01:24:15,840 --> 01:24:19,600
to authorize

01:24:16,800 --> 01:24:21,280
this application to use all your things

01:24:19,600 --> 01:24:22,080
and if you say yes it's going to send

01:24:21,280 --> 01:24:26,080
back

01:24:22,080 --> 01:24:28,719
an id token using redirected mechanism

01:24:26,080 --> 01:24:30,159
back to the application and then the

01:24:28,719 --> 01:24:32,880
application will take

01:24:30,159 --> 01:24:33,920
this id token and then send it to your

01:24:32,880 --> 01:24:37,280
api

01:24:33,920 --> 01:24:38,080
uh the api is going to validate your id

01:24:37,280 --> 01:24:40,880
token

01:24:38,080 --> 01:24:43,280
uh based on a set of shared secrets with

01:24:40,880 --> 01:24:46,960
your oidc provider

01:24:43,280 --> 01:24:49,040
so in most cases the areas in pink

01:24:46,960 --> 01:24:50,320
are your code right your application and

01:24:49,040 --> 01:24:52,400
your api

01:24:50,320 --> 01:24:53,360
your phone app is your code and your api

01:24:52,400 --> 01:24:56,480
is your code

01:24:53,360 --> 01:25:00,880
and most often you're using a

01:24:56,480 --> 01:25:00,880
third-party oidc provider

01:25:01,120 --> 01:25:06,880
okay so if you're working with oigc

01:25:04,880 --> 01:25:08,880
there are some kind of high-level better

01:25:06,880 --> 01:25:10,400
practices

01:25:08,880 --> 01:25:13,840
ensure you're using tls for all

01:25:10,400 --> 01:25:13,840
communication channels

01:25:14,320 --> 01:25:18,400
if you're working with an oidc server

01:25:16,159 --> 01:25:21,920
make sure you register the proper

01:25:18,400 --> 01:25:23,840
redirect urls there

01:25:21,920 --> 01:25:25,840
i have a link here to ensuring proper

01:25:23,840 --> 01:25:29,520
token validation

01:25:25,840 --> 01:25:32,320
there are jwt talk tokens pronounced

01:25:29,520 --> 01:25:34,080
tokens um there are some better

01:25:32,320 --> 01:25:35,679
practices there as well

01:25:34,080 --> 01:25:38,159
don't include sensitive information in

01:25:35,679 --> 01:25:41,040
your job token if you store this drop

01:25:38,159 --> 01:25:42,320
token as a cookie then try to make it

01:25:41,040 --> 01:25:45,120
only http

01:25:42,320 --> 01:25:46,480
only and secure so that it's harder to

01:25:45,120 --> 01:25:48,159
exfiltrate through

01:25:46,480 --> 01:25:49,520
through javascript so that if you have a

01:25:48,159 --> 01:25:51,040
cross-site scripting vulnerability then

01:25:49,520 --> 01:25:54,080
it's harder for the hacker to

01:25:51,040 --> 01:25:57,520
exfiltrate your jaw token

01:25:54,080 --> 01:26:00,400
um try to use well-tested oidc

01:25:57,520 --> 01:26:03,120
client libraries as well uh and

01:26:00,400 --> 01:26:05,760
well-tested oydc servers

01:26:03,120 --> 01:26:06,880
okay so uh there are some open source

01:26:05,760 --> 01:26:09,679
ydc servers

01:26:06,880 --> 01:26:10,639
in php i actually contributed to a

01:26:09,679 --> 01:26:12,880
symfony bundle

01:26:10,639 --> 01:26:13,840
called oauth 2 bundle i helped migrate

01:26:12,880 --> 01:26:19,280
them to

01:26:13,840 --> 01:26:21,760
symphony 4.4 and 75 that was last year

01:26:19,280 --> 01:26:23,199
and then on friends and symphony i also

01:26:21,760 --> 01:26:25,600
contributed to pull requests

01:26:23,199 --> 01:26:27,040
and uh those were sitting dormant for a

01:26:25,600 --> 01:26:29,520
while and then uh

01:26:27,040 --> 01:26:31,120
that got all picked up and now this uh

01:26:29,520 --> 01:26:31,760
there is new life in this project as

01:26:31,120 --> 01:26:33,280
well

01:26:31,760 --> 01:26:37,679
um so you can check this out this

01:26:33,280 --> 01:26:39,679
project as a server as well

01:26:37,679 --> 01:26:42,000
there are some uh open source client

01:26:39,679 --> 01:26:44,639
middleware libraries you got passport.js

01:26:42,000 --> 01:26:47,760
you got oidc client.js so you should you

01:26:44,639 --> 01:26:51,440
know check this out as well

01:26:47,760 --> 01:26:55,520
in.net there's a great um

01:26:51,440 --> 01:26:58,320
oigc server called uh

01:26:55,520 --> 01:27:00,880
identity server four yes if you search

01:26:58,320 --> 01:27:04,560
for identityserver4in.net

01:27:00,880 --> 01:27:06,960
that's an open source uh

01:27:04,560 --> 01:27:08,880
oidc server which is great so highly

01:27:06,960 --> 01:27:10,639
recommend it

01:27:08,880 --> 01:27:12,560
i had a slide where i plugged them and

01:27:10,639 --> 01:27:13,760
then i i know i lost that slide so i

01:27:12,560 --> 01:27:17,040
have to put them back

01:27:13,760 --> 01:27:18,800
okay so lastly let's look at resource

01:27:17,040 --> 01:27:22,239
access and multi-tenancy we're almost

01:27:18,800 --> 01:27:22,239
done so

01:27:23,360 --> 01:27:28,320
there is uh if you look at this article

01:27:26,400 --> 01:27:29,840
owasp broken access controls i highly

01:27:28,320 --> 01:27:33,040
recommend it

01:27:29,840 --> 01:27:34,960
it's it's a very simple concept

01:27:33,040 --> 01:27:36,880
your app let's say your application

01:27:34,960 --> 01:27:39,120
shows a user's report

01:27:36,880 --> 01:27:40,719
right so at some point a user has their

01:27:39,120 --> 01:27:42,239
own reports and they navigate to their

01:27:40,719 --> 01:27:43,120
report and they look at their report

01:27:42,239 --> 01:27:45,679
detail right

01:27:43,120 --> 01:27:47,440
and so they click on the link that takes

01:27:45,679 --> 01:27:50,719
them to their report with id

01:27:47,440 --> 01:27:52,560
4 8 15 16 23 42 if i don't know if

01:27:50,719 --> 01:27:56,159
anybody recognizes those numbers

01:27:52,560 --> 01:27:59,520
um but so the

01:27:56,159 --> 01:28:01,280
what happens so if i look at this report

01:27:59,520 --> 01:28:02,639
and i'm logged into my account there you

01:28:01,280 --> 01:28:06,239
go mark

01:28:02,639 --> 01:28:06,480
if i look at my account um i know this

01:28:06,239 --> 01:28:10,320
is

01:28:06,480 --> 01:28:12,480
my report it has this id right but now

01:28:10,320 --> 01:28:14,480
what happens if i change the numbers

01:28:12,480 --> 01:28:15,040
right if i increment the number by one

01:28:14,480 --> 01:28:16,719
or ten

01:28:15,040 --> 01:28:19,040
whatever am i going to see somebody

01:28:16,719 --> 01:28:21,600
else's report right and this is

01:28:19,040 --> 01:28:24,239
this is where multi-tenancy comes in uh

01:28:21,600 --> 01:28:26,000
any time you access a resource by id

01:28:24,239 --> 01:28:28,080
you have to validate that the person

01:28:26,000 --> 01:28:30,159
accessing this resource by id

01:28:28,080 --> 01:28:31,360
is actually entitled to seeing this

01:28:30,159 --> 01:28:33,520
resource right and that's

01:28:31,360 --> 01:28:34,480
business logic that you have to put into

01:28:33,520 --> 01:28:36,800
your code

01:28:34,480 --> 01:28:38,960
and i can guarantee you you all have an

01:28:36,800 --> 01:28:41,920
application right now that is vulnerable

01:28:38,960 --> 01:28:44,239
to this um think of anything that you

01:28:41,920 --> 01:28:47,360
you are accessing by id

01:28:44,239 --> 01:28:47,760
um what happens if somebody puts another

01:28:47,360 --> 01:28:51,120
id

01:28:47,760 --> 01:28:53,360
in the url um so some folks have said

01:28:51,120 --> 01:28:54,960
well you know we could be using uuids

01:28:53,360 --> 01:28:56,400
yeah there you go show card card equals

01:28:54,960 --> 01:28:58,480
34 absolutely

01:28:56,400 --> 01:29:00,080
um you could be using uuids those are

01:28:58,480 --> 01:29:03,280
non-guessable yes but that's

01:29:00,080 --> 01:29:05,920
security through obscurity and also if

01:29:03,280 --> 01:29:07,600
uuids are in a url they're going to show

01:29:05,920 --> 01:29:09,280
up in the http refer

01:29:07,600 --> 01:29:10,880
headers as people navigate to other

01:29:09,280 --> 01:29:12,560
sites from your site and they click on

01:29:10,880 --> 01:29:13,280
another site from your site for example

01:29:12,560 --> 01:29:15,840
right there's

01:29:13,280 --> 01:29:18,159
there are always ways where identifiers

01:29:15,840 --> 01:29:20,320
can escape they can leak out

01:29:18,159 --> 01:29:22,400
um and so you always have to protect

01:29:20,320 --> 01:29:23,120
resources and that's what broken access

01:29:22,400 --> 01:29:25,760
controls

01:29:23,120 --> 01:29:26,719
are and there's really no magic bullet

01:29:25,760 --> 01:29:29,040
here this is all

01:29:26,719 --> 01:29:30,800
business logic that you have to put in

01:29:29,040 --> 01:29:31,920
your application and you have to check

01:29:30,800 --> 01:29:35,040
for those things

01:29:31,920 --> 01:29:39,120
um and these things and this always

01:29:35,040 --> 01:29:41,360
scares the daylights out of me because

01:29:39,120 --> 01:29:42,560
these issues creep up in the life cycle

01:29:41,360 --> 01:29:44,639
of your application you build your

01:29:42,560 --> 01:29:48,159
application at first and you're like oh

01:29:44,639 --> 01:29:49,600
okay you remember to do it and then

01:29:48,159 --> 01:29:51,040
three months later you add another

01:29:49,600 --> 01:29:52,719
feature where you get a resource id and

01:29:51,040 --> 01:29:55,920
you forget to do it and then it's it's

01:29:52,719 --> 01:29:59,840
uh super bad so anyway um

01:29:55,920 --> 01:30:02,400
uh and it's bad enough when you have um

01:29:59,840 --> 01:30:03,920
you know because uh sas products

01:30:02,400 --> 01:30:05,600
software service products support

01:30:03,920 --> 01:30:07,280
multiple companies with multiple users

01:30:05,600 --> 01:30:07,920
right so it's bad enough to have a user

01:30:07,280 --> 01:30:09,679
access

01:30:07,920 --> 01:30:11,920
know your another user information but

01:30:09,679 --> 01:30:13,440
it's even worse when a user accesses

01:30:11,920 --> 01:30:15,040
another user information

01:30:13,440 --> 01:30:17,280
from another company that's in your

01:30:15,040 --> 01:30:18,800
system right it's it's a real nightmare

01:30:17,280 --> 01:30:21,520
so that that kind of keeps me up at

01:30:18,800 --> 01:30:24,960
night anyway so that was for

01:30:21,520 --> 01:30:27,280
um notable vulnerabilities so

01:30:24,960 --> 01:30:28,320
i'd like to finish with architectural uh

01:30:27,280 --> 01:30:30,400
considerations

01:30:28,320 --> 01:30:32,639
um and i just want to look at securing

01:30:30,400 --> 01:30:36,159
data stores because

01:30:32,639 --> 01:30:39,280
there is you do not whether it's sql

01:30:36,159 --> 01:30:41,199
or not nosql you do not want to expose

01:30:39,280 --> 01:30:43,520
any data store to the open internet

01:30:41,199 --> 01:30:45,920
there should not be a publicly routable

01:30:43,520 --> 01:30:47,440
ip address to your data store those

01:30:45,920 --> 01:30:48,560
should live on a private network with

01:30:47,440 --> 01:30:49,840
the web server

01:30:48,560 --> 01:30:51,520
only the web server should be able to

01:30:49,840 --> 01:30:53,120
connect to your data store whether it's

01:30:51,520 --> 01:30:54,639
sql or nosql

01:30:53,120 --> 01:30:56,880
you should definitely set passwords and

01:30:54,639 --> 01:30:59,760
use encryption keys if available

01:30:56,880 --> 01:31:00,560
but this is how there are thousands of

01:30:59,760 --> 01:31:02,400
mongodb

01:31:00,560 --> 01:31:04,159
database compromise it's really not

01:31:02,400 --> 01:31:06,880
mongodb's fault here

01:31:04,159 --> 01:31:09,520
um you know with mysql servers you know

01:31:06,880 --> 01:31:12,480
i would never think to put a

01:31:09,520 --> 01:31:13,280
mysql server on an open network but uh

01:31:12,480 --> 01:31:15,199
and

01:31:13,280 --> 01:31:16,960
biological don't do that but people do

01:31:15,199 --> 01:31:18,400
that with mongodbs for example you know

01:31:16,960 --> 01:31:18,880
for some reason people like to do that

01:31:18,400 --> 01:31:21,520
with

01:31:18,880 --> 01:31:23,040
with mongodb and it's and it's bad again

01:31:21,520 --> 01:31:24,800
it's not mongodb's fault you should just

01:31:23,040 --> 01:31:27,199
not it's just a data store that should

01:31:24,800 --> 01:31:29,840
you should never put on an open network

01:31:27,199 --> 01:31:30,800
um so also if you work with any kind of

01:31:29,840 --> 01:31:32,880
data store

01:31:30,800 --> 01:31:35,280
you should use the least privilege

01:31:32,880 --> 01:31:38,719
principle

01:31:35,280 --> 01:31:39,520
if possible whichever user your web

01:31:38,719 --> 01:31:41,600
application

01:31:39,520 --> 01:31:43,440
uses to interact with your data store

01:31:41,600 --> 01:31:44,800
that user should have very restricted

01:31:43,440 --> 01:31:46,639
privileges

01:31:44,800 --> 01:31:48,320
you should only allow them to select

01:31:46,639 --> 01:31:50,159
insert and update record

01:31:48,320 --> 01:31:51,600
records should you even allow them to

01:31:50,159 --> 01:31:53,280
delete records because do you ever

01:31:51,600 --> 01:31:53,840
actually delete records or do you

01:31:53,280 --> 01:31:56,159
actually do

01:31:53,840 --> 01:31:57,600
soft deletes and if you have to delete

01:31:56,159 --> 01:31:58,159
records can you just do that as an

01:31:57,600 --> 01:32:00,080
offline

01:31:58,159 --> 01:32:01,360
process with kind of dedicated

01:32:00,080 --> 01:32:02,320
credentials so that's something to keep

01:32:01,360 --> 01:32:03,840
in mind right at least

01:32:02,320 --> 01:32:06,480
least privileged principle kind of helps

01:32:03,840 --> 01:32:08,480
mitigate the impact of getting owned

01:32:06,480 --> 01:32:09,840
or views yes database use you know works

01:32:08,480 --> 01:32:11,520
as well so

01:32:09,840 --> 01:32:13,120
try to create multiple users to mitigate

01:32:11,520 --> 01:32:13,600
the impact of hacks you could have a

01:32:13,120 --> 01:32:16,239
read

01:32:13,600 --> 01:32:18,000
user that can only do selects and you

01:32:16,239 --> 01:32:20,800
could have a right user that can only do

01:32:18,000 --> 01:32:24,480
inserts and updates for example

01:32:20,800 --> 01:32:26,639
and then you know when you think through

01:32:24,480 --> 01:32:28,480
network system and design remember that

01:32:26,639 --> 01:32:29,120
for each machine that you put on the

01:32:28,480 --> 01:32:31,199
internet

01:32:29,120 --> 01:32:32,560
there is an operating system on top of

01:32:31,199 --> 01:32:34,400
which you have

01:32:32,560 --> 01:32:36,080
low level services called demons that

01:32:34,400 --> 01:32:38,239
run on top of it which could be a

01:32:36,080 --> 01:32:39,280
ssh nginx mysql these are low

01:32:38,239 --> 01:32:41,360
level services

01:32:39,280 --> 01:32:43,440
on top of which applications run like

01:32:41,360 --> 01:32:46,560
node symphony rails django

01:32:43,440 --> 01:32:49,440
on top of which you have framework

01:32:46,560 --> 01:32:50,639
plugins installed through composer gem

01:32:49,440 --> 01:32:52,880
or npm

01:32:50,639 --> 01:32:54,000
on top of which finally your code runs

01:32:52,880 --> 01:32:56,800
so anytime you

01:32:54,000 --> 01:32:58,320
put a machine on an open network the

01:32:56,800 --> 01:33:01,520
very first thing that's going to happen

01:32:58,320 --> 01:33:03,920
is you're going to get an onslaught of

01:33:01,520 --> 01:33:05,840
brute force credential attempts against

01:33:03,920 --> 01:33:09,679
any open demon that is

01:33:05,840 --> 01:33:10,400
open on any port as well as low level

01:33:09,679 --> 01:33:12,480
hacks like

01:33:10,400 --> 01:33:14,960
buffer overflow attacks on any of those

01:33:12,480 --> 01:33:16,960
demons and when those are successful

01:33:14,960 --> 01:33:19,120
then they can compromise the the entire

01:33:16,960 --> 01:33:21,760
operating system which then allows them

01:33:19,120 --> 01:33:22,239
to compromise your entire application

01:33:21,760 --> 01:33:24,080
stack

01:33:22,239 --> 01:33:25,760
including exfiltrating user information

01:33:24,080 --> 01:33:27,760
from your web application

01:33:25,760 --> 01:33:29,280
so that's one angle anytime you put a

01:33:27,760 --> 01:33:31,840
machine on the internet these things

01:33:29,280 --> 01:33:31,840
will happen

01:33:32,719 --> 01:33:38,960
now if you've reasonably secured things

01:33:36,159 --> 01:33:40,159
uh you know attackers are still going to

01:33:38,960 --> 01:33:42,320
come through at you

01:33:40,159 --> 01:33:44,159
through those oas packs right everything

01:33:42,320 --> 01:33:46,320
we looked at at this presentation

01:33:44,159 --> 01:33:47,440
are web application hacks they're going

01:33:46,320 --> 01:33:48,800
to try to

01:33:47,440 --> 01:33:50,719
infiltrate your application through

01:33:48,800 --> 01:33:51,920
those oas packs and then

01:33:50,719 --> 01:33:54,239
they're going to try to compromise

01:33:51,920 --> 01:33:55,920
everything so um

01:33:54,239 --> 01:33:57,840
when you think about a network system

01:33:55,920 --> 01:33:59,920
and design you want to reduce uh

01:33:57,840 --> 01:34:02,080
cross-contamination to isolate e-shares

01:33:59,920 --> 01:34:03,840
on its own machine

01:34:02,080 --> 01:34:05,199
each you know whether it's a container

01:34:03,840 --> 01:34:08,320
vm or hardware

01:34:05,199 --> 01:34:09,360
uh uh you want to have each service on

01:34:08,320 --> 01:34:12,080
its own machine

01:34:09,360 --> 01:34:12,800
do not run unnecessary services try to

01:34:12,080 --> 01:34:15,040
keep things

01:34:12,800 --> 01:34:16,480
securely patched try to have strict

01:34:15,040 --> 01:34:19,520
network restrictions on

01:34:16,480 --> 01:34:21,040
cross machine notification um

01:34:19,520 --> 01:34:22,639
and nothing can connect to your data

01:34:21,040 --> 01:34:24,800
store beside the web server

01:34:22,639 --> 01:34:26,960
so just to show you a an example of a

01:34:24,800 --> 01:34:28,800
wildly insecure setup

01:34:26,960 --> 01:34:30,320
this is what happens every day today

01:34:28,800 --> 01:34:32,080
right people put a data store

01:34:30,320 --> 01:34:34,000
on the open internet like their

01:34:32,080 --> 01:34:35,040
database and then they put web servers

01:34:34,000 --> 01:34:37,920
in front of them

01:34:35,040 --> 01:34:38,480
uh again on the open internet uh they do

01:34:37,920 --> 01:34:41,119
that

01:34:38,480 --> 01:34:42,480
and then they put a load balancer in

01:34:41,119 --> 01:34:43,600
front of all of it

01:34:42,480 --> 01:34:46,480
and then they do the same thing with

01:34:43,600 --> 01:34:49,040
another application right so

01:34:46,480 --> 01:34:49,840
attackers now look at your load bouncer

01:34:49,040 --> 01:34:52,000
and they're like

01:34:49,840 --> 01:34:53,360
well that's a cool load balancer bro and

01:34:52,000 --> 01:34:55,440
they're going to go around it

01:34:53,360 --> 01:34:56,560
and they're going to start attacking all

01:34:55,440 --> 01:34:58,400
your web servers

01:34:56,560 --> 01:34:59,600
through level low level hacks and high

01:34:58,400 --> 01:35:00,000
level hacks and i'm going to start

01:34:59,600 --> 01:35:01,600
attacking

01:35:00,000 --> 01:35:03,280
your data stores through all those

01:35:01,600 --> 01:35:05,600
vectors as well right

01:35:03,280 --> 01:35:06,880
so that's why it's always dangerous to

01:35:05,600 --> 01:35:09,199
put all those things on

01:35:06,880 --> 01:35:11,360
open internet networks um and they're

01:35:09,199 --> 01:35:12,560
going to attack you on a full stack

01:35:11,360 --> 01:35:14,560
basis with both

01:35:12,560 --> 01:35:15,920
low-level buffer overflow low level

01:35:14,560 --> 01:35:18,480
credential brute force

01:35:15,920 --> 01:35:20,719
as well as the oas packs right so you

01:35:18,480 --> 01:35:21,440
want to try to confine attackers to oas

01:35:20,719 --> 01:35:23,840
packs

01:35:21,440 --> 01:35:25,040
so a more secure way to look at it would

01:35:23,840 --> 01:35:26,719
be to kind of have

01:35:25,040 --> 01:35:27,679
a bit of network segmentation where you

01:35:26,719 --> 01:35:28,800
have a network for your first

01:35:27,679 --> 01:35:30,639
application and work for your second

01:35:28,800 --> 01:35:33,440
application you get your data store

01:35:30,639 --> 01:35:35,199
you get your web servers and you put a

01:35:33,440 --> 01:35:37,199
firewall between the two so only the web

01:35:35,199 --> 01:35:39,119
server can talk to the data store

01:35:37,199 --> 01:35:40,880
um and then you have a firewall in front

01:35:39,119 --> 01:35:42,159
of the each network

01:35:40,880 --> 01:35:44,239
and then you have your load balancer

01:35:42,159 --> 01:35:45,840
that can only communicate uh

01:35:44,239 --> 01:35:47,840
very specifically through the firewall

01:35:45,840 --> 01:35:50,320
through the layers below it

01:35:47,840 --> 01:35:52,080
uh you might have a vpn network for your

01:35:50,320 --> 01:35:53,679
first application another one another

01:35:52,080 --> 01:35:54,800
vpn for your second application so your

01:35:53,679 --> 01:35:57,440
devops folks can

01:35:54,800 --> 01:35:59,040
go in and do their things so if you do

01:35:57,440 --> 01:36:00,639
something like this for example that's

01:35:59,040 --> 01:36:03,920
one way to do it

01:36:00,639 --> 01:36:05,840
now you are confining attackers to owasp

01:36:03,920 --> 01:36:06,400
only attack vectors and that's a much

01:36:05,840 --> 01:36:08,960
better

01:36:06,400 --> 01:36:10,159
posture to have so that's kind of the

01:36:08,960 --> 01:36:13,199
benefits of all of this

01:36:10,159 --> 01:36:14,320
so all right uh finally if you're using

01:36:13,199 --> 01:36:17,360
credentials

01:36:14,320 --> 01:36:18,960
uh never check credentials into get

01:36:17,360 --> 01:36:20,800
in your source control system you do not

01:36:18,960 --> 01:36:22,400
want to put any password any keys or

01:36:20,800 --> 01:36:23,600
things like that that includes

01:36:22,400 --> 01:36:25,440
you know so do not ever check

01:36:23,600 --> 01:36:27,600
credentials into your git repo whether

01:36:25,440 --> 01:36:30,239
it's data store credential for like sql

01:36:27,600 --> 01:36:32,159
 or your amazon aws

01:36:30,239 --> 01:36:33,840
keys you know third-party api

01:36:32,159 --> 01:36:35,440
credentials you never want to store

01:36:33,840 --> 01:36:38,159
these things and to get

01:36:35,440 --> 01:36:39,840
if you ever do the only thing the only

01:36:38,159 --> 01:36:42,800
safe thing that you can do because git

01:36:39,840 --> 01:36:45,360
never forgets is to expire everything

01:36:42,800 --> 01:36:47,199
immediately and generate new credentials

01:36:45,360 --> 01:36:49,440
so to store credentials you should look

01:36:47,199 --> 01:36:50,639
at dot end files i have links on how to

01:36:49,440 --> 01:36:53,600
use those in php

01:36:50,639 --> 01:36:56,080
node ruby um if you're using ansible and

01:36:53,600 --> 01:36:58,159
you want to encrypt credentials

01:36:56,080 --> 01:36:59,280
you might consider ansible vault i have

01:36:58,159 --> 01:37:00,880
a link to that as well that's a good

01:36:59,280 --> 01:37:04,320
thing to you know to keep in mind

01:37:00,880 --> 01:37:04,560
so um all right i'm almost that time i'm

01:37:04,320 --> 01:37:06,480
sure

01:37:04,560 --> 01:37:08,320
i'm past time so anyway infosec is a

01:37:06,480 --> 01:37:10,000
mindset uh it is our collective

01:37:08,320 --> 01:37:11,840
responsibility from executives manager

01:37:10,000 --> 01:37:13,520
software engineers devops engineers

01:37:11,840 --> 01:37:15,360
um try to subscribe to a number of

01:37:13,520 --> 01:37:17,440
infosec mailing lists i have them

01:37:15,360 --> 01:37:19,119
here uh there are a lot more but these

01:37:17,440 --> 01:37:21,280
are some of the few that i subscribe to

01:37:19,119 --> 01:37:23,760
and when someone gets owned do not laugh

01:37:21,280 --> 01:37:27,280
at them because it could very well be us

01:37:23,760 --> 01:37:30,080
so um that's that and um

01:37:27,280 --> 01:37:30,880
yes thank you uh here are the slides um

01:37:30,080 --> 01:37:35,840
sorry for

01:37:30,880 --> 01:37:35,840
going over um

01:37:40,239 --> 01:37:44,560
thank you everyone really appreciate it

01:37:42,080 --> 01:37:46,159
all right um i will be offline you can

01:37:44,560 --> 01:37:47,199
find me in the chat thank you ask me

01:37:46,159 --> 01:37:48,719
questions uh

01:37:47,199 --> 01:37:50,800
on the chat feel free to you know send

01:37:48,719 --> 01:37:52,719
me messages i will be sticking around

01:37:50,800 --> 01:37:55,280
because like we're way beyond time so

01:37:52,719 --> 01:37:55,280
thank you everyone

01:37:59,199 --> 01:38:02,400
thank you so much for the presentation

01:38:00,719 --> 01:38:03,280
chris you actually have about four

01:38:02,400 --> 01:38:04,719
minutes

01:38:03,280 --> 01:38:05,760
before your session is up you can go

01:38:04,719 --> 01:38:07,600
ahead and take any questions in that

01:38:05,760 --> 01:38:09,440
time if you'd like to oh

01:38:07,600 --> 01:38:11,040
okay cool all right so i am reading the

01:38:09,440 --> 01:38:14,560
chat right now uh

01:38:11,040 --> 01:38:15,760
so uh again feel free to go to this

01:38:14,560 --> 01:38:18,400
bitly url

01:38:15,760 --> 01:38:19,199
to download the pdf which is going to

01:38:18,400 --> 01:38:21,280
have

01:38:19,199 --> 01:38:22,320
all those links you know it's a pdf with

01:38:21,280 --> 01:38:25,760
clickable links

01:38:22,320 --> 01:38:26,560
so you can get all that and if you have

01:38:25,760 --> 01:38:28,880
questions

01:38:26,560 --> 01:38:29,840
i am looking at the chat right now um oh

01:38:28,880 --> 01:38:34,400
let me see if the q

01:38:29,840 --> 01:38:37,600
a had um the q a window had some things

01:38:34,400 --> 01:38:40,159
um okay so uh

01:38:37,600 --> 01:38:44,960
meg had a question about the slide so

01:38:40,159 --> 01:38:47,199
yes uh we're good there um

01:38:44,960 --> 01:38:49,600
yes garrett mentioned i've had a ton of

01:38:47,199 --> 01:38:51,280
false positives evaluating a static code

01:38:49,600 --> 01:38:51,600
analysis tools almost to the point of

01:38:51,280 --> 01:38:54,159
being

01:38:51,600 --> 01:38:56,560
unusable my favorite was it complaining

01:38:54,159 --> 01:38:58,320
every time i had to check the date

01:38:56,560 --> 01:39:00,960
in business software how do you decide

01:38:58,320 --> 01:39:04,560
what threshold should be for proceeding

01:39:00,960 --> 01:39:05,199
uh or our tools better now yeah so i've

01:39:04,560 --> 01:39:09,280
run of that

01:39:05,199 --> 01:39:12,639
with uh into that with a sonar cube um

01:39:09,280 --> 01:39:15,600
uh and uh

01:39:12,639 --> 01:39:17,040
there are there are thresholds that you

01:39:15,600 --> 01:39:20,719
can configure in there

01:39:17,040 --> 01:39:22,159
so we kind of did that um most tools are

01:39:20,719 --> 01:39:25,280
pretty configurable

01:39:22,159 --> 01:39:26,000
um and you can make exclusions and then

01:39:25,280 --> 01:39:27,760
like for example

01:39:26,000 --> 01:39:29,440
i couldn't put comments in the code

01:39:27,760 --> 01:39:31,199
because it kept flagging things in my

01:39:29,440 --> 01:39:33,440
css and i was like

01:39:31,199 --> 01:39:34,400
okay i get it but no right and so you

01:39:33,440 --> 01:39:38,719
would put like

01:39:34,400 --> 01:39:40,960
at no sonar uh in a comment in your code

01:39:38,719 --> 01:39:42,800
it's not great because you're kind of

01:39:40,960 --> 01:39:44,719
littering your code with like no sonar

01:39:42,800 --> 01:39:46,080
and it's kind of not great so

01:39:44,719 --> 01:39:47,760
um but yeah gary that's a really good

01:39:46,080 --> 01:39:48,960
point like sometimes static code

01:39:47,760 --> 01:39:52,080
analysis

01:39:48,960 --> 01:39:54,800
tools can have some um

01:39:52,080 --> 01:39:56,639
false positives um i i would kind of

01:39:54,800 --> 01:39:58,560
recommend giving this another try though

01:39:56,639 --> 01:40:00,400
see what it feels to you uh what it

01:39:58,560 --> 01:40:02,400
feels like to you um

01:40:00,400 --> 01:40:05,040
you know because they do evolve pretty

01:40:02,400 --> 01:40:06,880
well um

01:40:05,040 --> 01:40:08,480
and keep is keeping a record of several

01:40:06,880 --> 01:40:11,679
old passwords for every user

01:40:08,480 --> 01:40:14,560
not an additional security risk uh yes

01:40:11,679 --> 01:40:14,560
really good question

01:40:14,639 --> 01:40:21,920
obviously so the way i've done it

01:40:18,719 --> 01:40:22,639
is remember you're only ever hashing

01:40:21,920 --> 01:40:25,679
passwords

01:40:22,639 --> 01:40:29,119
so what you do is you don't

01:40:25,679 --> 01:40:30,080
keep records of the actual passwords in

01:40:29,119 --> 01:40:33,119
plain text

01:40:30,080 --> 01:40:36,480
um you remember their old

01:40:33,119 --> 01:40:39,520
hashes and so if they enter a

01:40:36,480 --> 01:40:40,159
new password uh you run that new

01:40:39,520 --> 01:40:43,840
password

01:40:40,159 --> 01:40:45,600
against the last five old hashes

01:40:43,840 --> 01:40:47,360
uh and if there's a match then you tell

01:40:45,600 --> 01:40:48,080
them oh nope sorry you've used the same

01:40:47,360 --> 01:40:51,199
password

01:40:48,080 --> 01:40:53,119
right uh that's kind of the

01:40:51,199 --> 01:40:54,480
what you can do there uh and and it

01:40:53,119 --> 01:40:57,840
works well

01:40:54,480 --> 01:41:00,960
uh and so it it's not really

01:40:57,840 --> 01:41:02,719
a uh as far as i know at least

01:41:00,960 --> 01:41:04,639
it's not an additional security risk as

01:41:02,719 --> 01:41:06,960
long as you do never store passwords in

01:41:04,639 --> 01:41:10,239
plain text and you're actually using

01:41:06,960 --> 01:41:12,800
something like bcrypt right um

01:41:10,239 --> 01:41:13,840
so and then the next question by uh kuan

01:41:12,800 --> 01:41:17,760
chen

01:41:13,840 --> 01:41:20,000
um having to wipe password before

01:41:17,760 --> 01:41:21,840
pushing is tedious any way to automate

01:41:20,000 --> 01:41:24,639
that process

01:41:21,840 --> 01:41:26,400
so kuan chen i think you're referencing

01:41:24,639 --> 01:41:30,239
um

01:41:26,400 --> 01:41:33,520
uh about uh having passwords

01:41:30,239 --> 01:41:35,679
in your source code right and um okay

01:41:33,520 --> 01:41:36,800
and looks like we are at time so anyway

01:41:35,679 --> 01:41:39,199
um

01:41:36,800 --> 01:41:40,960
really you really do not want to have

01:41:39,199 --> 01:41:42,400
passwords in your source code so check

01:41:40,960 --> 01:41:45,440
out dot end files right

01:41:42,400 --> 01:41:49,440
um i have a link to to

01:41:45,440 --> 01:41:51,600
how to use dot and files and it will

01:41:49,440 --> 01:41:53,520
make things uh easy for you to work with

01:41:51,600 --> 01:41:56,239
okay cool so it looks like we're at time

01:41:53,520 --> 01:41:58,400
uh i'll be around online so feel free to

01:41:56,239 --> 01:41:59,280
send me direct messages uh in the six

01:41:58,400 --> 01:42:08,080
connects

01:41:59,280 --> 01:42:08,080

YouTube URL: https://www.youtube.com/watch?v=UyHxezwC3QU


