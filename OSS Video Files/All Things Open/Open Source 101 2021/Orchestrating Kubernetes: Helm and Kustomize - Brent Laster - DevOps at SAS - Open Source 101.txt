Title: Orchestrating Kubernetes: Helm and Kustomize - Brent Laster - DevOps at SAS - Open Source 101
Publication date: 2021-04-12
Playlist: Open Source 101 2021
Description: 
	Brent Laster, R&D Director, DevOps at SAS, delivered the talk "Orchestrating Kubernetes: Helm and Kustomize" at Open Source 101 on Tuesday, March 30, 2021

Abstract:
This talk is intended for those who already have some basic Kubernetes knowledge or have taken the Kubernetes: Beginner session.

In this session, we’ll cover two of the most popular tools for orchestrating and managing all of the pieces that go into Kubernetes to manage a containerized workload. We’ll explore how they work with the specs for Kubernetes objects (manifests) and how they support reuse and customization of manifests. We’ll look at the advantages and disadvantages of each and use visuals to help convey the most important concepts and workflows with them.

Find Brent on the internets:
Twitter: https://twitter.com/BrentCLaster
LinkedIn: https://www.linkedin.com/in/brentlaster/
GitHub: https://github.com/brentlaster
Captions: 
	00:00:05,120 --> 00:00:09,120
welcome everyone

00:00:06,560 --> 00:00:10,080
um great to be with you today virtually

00:00:09,120 --> 00:00:11,840
like i said i was

00:00:10,080 --> 00:00:13,040
saying i missed the days when we

00:00:11,840 --> 00:00:14,719
actually could do these kinds of

00:00:13,040 --> 00:00:15,519
conferences in person you probably do

00:00:14,719 --> 00:00:16,560
too

00:00:15,519 --> 00:00:19,760
for those of you who would be close

00:00:16,560 --> 00:00:22,080
enough to attend todd and the folks at

00:00:19,760 --> 00:00:23,840
all things open open source 101 do a

00:00:22,080 --> 00:00:27,439
fantastic job

00:00:23,840 --> 00:00:29,359
with um putting these things together

00:00:27,439 --> 00:00:30,640
and getting together the speakers and

00:00:29,359 --> 00:00:33,280
the content

00:00:30,640 --> 00:00:33,920
uh for people who really want to learn

00:00:33,280 --> 00:00:36,079
so

00:00:33,920 --> 00:00:37,280
always happy to be a part of it uh my

00:00:36,079 --> 00:00:39,440
name is brent laster and i'm gonna be

00:00:37,280 --> 00:00:40,879
talking to you today about uh helm and

00:00:39,440 --> 00:00:42,160
customize how we orchestrate some stuff

00:00:40,879 --> 00:00:44,719
around kubernetes

00:00:42,160 --> 00:00:46,960
really quickly about me uh my day job as

00:00:44,719 --> 00:00:49,120
an r d director at uh sas

00:00:46,960 --> 00:00:50,399
uh software company here in kerry north

00:00:49,120 --> 00:00:52,000
carolina where i'm based

00:00:50,399 --> 00:00:53,440
um shout out to sas for always

00:00:52,000 --> 00:00:55,680
supporting um

00:00:53,440 --> 00:00:56,800
us doing these kinds of presentations

00:00:55,680 --> 00:00:59,520
and sharing back with

00:00:56,800 --> 00:01:01,120
uh the open source community here do a

00:00:59,520 --> 00:01:03,760
lot of global training too

00:01:01,120 --> 00:01:04,159
uh in addition to that a couple of

00:01:03,760 --> 00:01:05,519
author

00:01:04,159 --> 00:01:06,799
books and things that are written

00:01:05,519 --> 00:01:08,000
information at the bottom here if you're

00:01:06,799 --> 00:01:09,520
interested in connecting with me on

00:01:08,000 --> 00:01:11,119
social media

00:01:09,520 --> 00:01:12,560
when i do to other training courses i

00:01:11,119 --> 00:01:14,799
try to put it on twitter so

00:01:12,560 --> 00:01:16,159
feel free to reach out there if you want

00:01:14,799 --> 00:01:17,680
to

00:01:16,159 --> 00:01:20,159
really quickly a couple of books if

00:01:17,680 --> 00:01:22,640
you're interested in learning more about

00:01:20,159 --> 00:01:24,240
git um in the past when we've done these

00:01:22,640 --> 00:01:25,759
kinds of things in person we've given

00:01:24,240 --> 00:01:26,000
copies these out unfortunately we don't

00:01:25,759 --> 00:01:28,080
have

00:01:26,000 --> 00:01:29,280
this this time but if you want to learn

00:01:28,080 --> 00:01:31,840
more about git

00:01:29,280 --> 00:01:33,439
uh i'm a bit biased but the professional

00:01:31,840 --> 00:01:35,439
git is one of the books i've written

00:01:33,439 --> 00:01:37,600
another one is jenkins2 and this goes

00:01:35,439 --> 00:01:40,400
into ci cd

00:01:37,600 --> 00:01:42,399
pipelines as code and such i will say if

00:01:40,400 --> 00:01:43,840
you get this one to maybe just uh check

00:01:42,399 --> 00:01:45,439
out the electronic version

00:01:43,840 --> 00:01:47,119
um the screenshots in the printed

00:01:45,439 --> 00:01:49,200
version are a little bit uh

00:01:47,119 --> 00:01:50,720
hard to see more than a little bit in

00:01:49,200 --> 00:01:52,560
some cases the printing just didn't work

00:01:50,720 --> 00:01:54,159
out electronic version should be fine

00:01:52,560 --> 00:01:56,159
so interesting learning about gator

00:01:54,159 --> 00:01:58,799
jenkins check those out

00:01:56,159 --> 00:02:00,399
um also i do quite a bit of training for

00:01:58,799 --> 00:02:01,920
o'reilly too

00:02:00,399 --> 00:02:04,159
just to mention i don't mention that to

00:02:01,920 --> 00:02:06,159
put in a plug for my courses but

00:02:04,159 --> 00:02:07,920
o'reilly has a lot of courses out there

00:02:06,159 --> 00:02:10,239
as well

00:02:07,920 --> 00:02:11,120
and do a lot of different things on

00:02:10,239 --> 00:02:14,720
there with

00:02:11,120 --> 00:02:16,720
git kubernetes um

00:02:14,720 --> 00:02:18,560
pipeline jenkins 2 those kinds of things

00:02:16,720 --> 00:02:19,280
so just uh if you're interested search

00:02:18,560 --> 00:02:21,040
for my name

00:02:19,280 --> 00:02:22,480
out there and you'll find that all right

00:02:21,040 --> 00:02:23,840
enough about me

00:02:22,480 --> 00:02:26,080
let's talk about a couple quick things

00:02:23,840 --> 00:02:27,599
here i know you if you are on this track

00:02:26,080 --> 00:02:29,520
you've probably been

00:02:27,599 --> 00:02:31,120
through some of the other things with

00:02:29,520 --> 00:02:34,160
containers or

00:02:31,120 --> 00:02:36,319
and brad's talk on kubernetes

00:02:34,160 --> 00:02:38,160
so really quickly here just do a really

00:02:36,319 --> 00:02:39,280
quick kubernetes refresh because i never

00:02:38,160 --> 00:02:41,360
want to assume

00:02:39,280 --> 00:02:42,560
the point everybody's starting from but

00:02:41,360 --> 00:02:43,440
if you're coming to this and you don't

00:02:42,560 --> 00:02:45,599
have this

00:02:43,440 --> 00:02:47,599
fundamental grounding kubernetes very

00:02:45,599 --> 00:02:49,760
briefly we'll just talk about what it

00:02:47,599 --> 00:02:51,920
is and kind of a way to think about it

00:02:49,760 --> 00:02:53,760
so in you know a

00:02:51,920 --> 00:02:55,360
the pr kind of form of this is

00:02:53,760 --> 00:02:57,120
kubernetes is a portable extensible

00:02:55,360 --> 00:02:58,959
platform for managing containerized

00:02:57,120 --> 00:03:01,120
workloads and services

00:02:58,959 --> 00:03:02,560
really what it's about it's a way to run

00:03:01,120 --> 00:03:06,239
multiple containers

00:03:02,560 --> 00:03:07,760
um and to automate them keeping going

00:03:06,239 --> 00:03:10,879
making sure they're always running

00:03:07,760 --> 00:03:12,640
making sure they scale as they need to

00:03:10,879 --> 00:03:14,959
ensuring that you're not having to sit

00:03:12,640 --> 00:03:17,599
there and monitor your containerized

00:03:14,959 --> 00:03:19,360
applications and workloads over and over

00:03:17,599 --> 00:03:20,879
again and making sure you know always

00:03:19,360 --> 00:03:23,040
watching them uh

00:03:20,879 --> 00:03:25,120
to see if they're okay or not it's

00:03:23,040 --> 00:03:27,360
really about being able to run

00:03:25,120 --> 00:03:29,680
these large sets of containers because

00:03:27,360 --> 00:03:31,280
as you probably gathered today

00:03:29,680 --> 00:03:33,120
these days when we're talking about

00:03:31,280 --> 00:03:36,239
running in the cloud running in

00:03:33,120 --> 00:03:39,120
kubernetes we are talking about uh

00:03:36,239 --> 00:03:41,040
being able to spin up things on the fly

00:03:39,120 --> 00:03:43,280
with our application running in there

00:03:41,040 --> 00:03:45,519
container as you probably gathered is a

00:03:43,280 --> 00:03:47,840
simple little way of

00:03:45,519 --> 00:03:49,440
simple a way of sort of isolating an

00:03:47,840 --> 00:03:50,640
application isolating some of the

00:03:49,440 --> 00:03:53,920
resources

00:03:50,640 --> 00:03:55,200
on a operating system and then giving an

00:03:53,920 --> 00:03:57,200
application

00:03:55,200 --> 00:03:58,879
the perspective that is running within

00:03:57,200 --> 00:04:00,959
its own system's own box

00:03:58,879 --> 00:04:03,200
we take portions of the operating system

00:04:00,959 --> 00:04:04,080
resources we carve them out and we give

00:04:03,200 --> 00:04:06,159
that to container

00:04:04,080 --> 00:04:07,920
but most applications require more than

00:04:06,159 --> 00:04:10,239
just one container to run

00:04:07,920 --> 00:04:12,480
you may have various microservices

00:04:10,239 --> 00:04:14,000
databases back-ends front-ends and so on

00:04:12,480 --> 00:04:16,479
so you really need something to help

00:04:14,000 --> 00:04:18,079
automate running all of those things so

00:04:16,479 --> 00:04:20,320
that your application

00:04:18,079 --> 00:04:21,359
is up and it can scale and it can keep

00:04:20,320 --> 00:04:23,440
going

00:04:21,359 --> 00:04:25,600
no matter what happens in an automated

00:04:23,440 --> 00:04:28,720
way so kubernetes makes that

00:04:25,600 --> 00:04:31,840
a lot easier and groups containers up

00:04:28,720 --> 00:04:33,199
in this way with service on the front so

00:04:31,840 --> 00:04:36,240
you can connect to things

00:04:33,199 --> 00:04:38,080
in your applications uh deployments to

00:04:36,240 --> 00:04:40,160
make sure it's always up and running

00:04:38,080 --> 00:04:42,720
those kinds of pieces a robust platform

00:04:40,160 --> 00:04:44,479
for running containers

00:04:42,720 --> 00:04:47,280
really is about automating deployment

00:04:44,479 --> 00:04:49,040
scaling managing these workloads

00:04:47,280 --> 00:04:50,240
and doing it in a resilient way so it

00:04:49,040 --> 00:04:51,360
takes care of things like scaling

00:04:50,240 --> 00:04:54,080
requirements

00:04:51,360 --> 00:04:55,840
failover deployment patterns all these

00:04:54,080 --> 00:04:56,320
kinds of things that you can imagine if

00:04:55,840 --> 00:04:59,919
you are

00:04:56,320 --> 00:05:01,840
if you are supporting an application

00:04:59,919 --> 00:05:03,199
you want these things to be handled for

00:05:01,840 --> 00:05:04,240
you especially if it's running in the

00:05:03,199 --> 00:05:05,680
cloud

00:05:04,240 --> 00:05:07,280
you know one of the examples we talk

00:05:05,680 --> 00:05:09,120
about with

00:05:07,280 --> 00:05:10,720
scaling up and scaling down raising

00:05:09,120 --> 00:05:12,479
containers it's like if you're a retail

00:05:10,720 --> 00:05:13,199
establishment and you get to the holiday

00:05:12,479 --> 00:05:15,440
season

00:05:13,199 --> 00:05:16,560
and you need to scale up your number of

00:05:15,440 --> 00:05:18,080
containers

00:05:16,560 --> 00:05:20,639
that you're running to handle the

00:05:18,080 --> 00:05:22,880
workload you may have a front-end piece

00:05:20,639 --> 00:05:25,039
you may have multiples of those pods in

00:05:22,880 --> 00:05:26,080
kubernetes to be able to handle the load

00:05:25,039 --> 00:05:28,000
then later on you need to be able to

00:05:26,080 --> 00:05:28,320
scale it down after the holiday season

00:05:28,000 --> 00:05:30,080
so

00:05:28,320 --> 00:05:32,960
you're not incurring the cloud costs

00:05:30,080 --> 00:05:35,120
those kinds of operations being able to

00:05:32,960 --> 00:05:36,960
quickly quickly spin up more and

00:05:35,120 --> 00:05:37,600
resiliently scale them up scale them

00:05:36,960 --> 00:05:39,280
down

00:05:37,600 --> 00:05:41,280
that's why we do containers in the first

00:05:39,280 --> 00:05:44,000
place and that's why we have kubernetes

00:05:41,280 --> 00:05:45,039
to help manage all these kinds of things

00:05:44,000 --> 00:05:46,880
out there for us

00:05:45,039 --> 00:05:49,199
so how do we think about this and i like

00:05:46,880 --> 00:05:50,960
to use analogies when i'm doing teaching

00:05:49,199 --> 00:05:52,240
and one of the ways that i think about

00:05:50,960 --> 00:05:54,479
kubernetes

00:05:52,240 --> 00:05:56,080
in terms of how it relates to containers

00:05:54,479 --> 00:05:57,520
it's the same way that you might think

00:05:56,080 --> 00:06:00,000
about

00:05:57,520 --> 00:06:00,720
uh the same jobs that a data center

00:06:00,000 --> 00:06:02,880
would do

00:06:00,720 --> 00:06:04,639
um everybody is probably seeing a data

00:06:02,880 --> 00:06:07,039
center either at uh you know

00:06:04,639 --> 00:06:07,759
you're going to school with college or

00:06:07,039 --> 00:06:09,520
you know about

00:06:07,759 --> 00:06:10,960
larger data centers that we have for

00:06:09,520 --> 00:06:12,240
google and different around the country

00:06:10,960 --> 00:06:14,240
or in any kind of

00:06:12,240 --> 00:06:16,479
uh large business if they still do stuff

00:06:14,240 --> 00:06:18,000
on site and if we think of

00:06:16,479 --> 00:06:20,319
images or containers as being like

00:06:18,000 --> 00:06:21,680
computers that we stage and use

00:06:20,319 --> 00:06:23,360
uh one of the ways i tell people

00:06:21,680 --> 00:06:25,440
thinking about a container

00:06:23,360 --> 00:06:27,120
and the image that goes into it we are

00:06:25,440 --> 00:06:29,840
layering on software

00:06:27,120 --> 00:06:31,039
much like you might install a system for

00:06:29,840 --> 00:06:33,039
your

00:06:31,039 --> 00:06:34,479
friend or co-worker at your work you're

00:06:33,039 --> 00:06:36,479
putting on the software

00:06:34,479 --> 00:06:37,919
putting all the operating system and the

00:06:36,479 --> 00:06:40,400
applications and stuff

00:06:37,919 --> 00:06:42,000
into that image on that system and then

00:06:40,400 --> 00:06:43,840
you turn that image to turn that system

00:06:42,000 --> 00:06:46,080
on and you've got a running computer

00:06:43,840 --> 00:06:47,759
kind of the same idea with containers so

00:06:46,080 --> 00:06:49,440
in a data center model what we data

00:06:47,759 --> 00:06:51,680
center does for containers

00:06:49,440 --> 00:06:53,280
is a couple of things it thinks about

00:06:51,680 --> 00:06:56,240
the main jobs being to provide

00:06:53,280 --> 00:06:57,759
systems to service the needs you have

00:06:56,240 --> 00:06:59,520
these systems that you set up

00:06:57,759 --> 00:07:01,599
to handle a particular application

00:06:59,520 --> 00:07:03,280
running keep the systems up and running

00:07:01,599 --> 00:07:05,599
if something goes down

00:07:03,280 --> 00:07:07,680
in there there's a data center operator

00:07:05,599 --> 00:07:08,319
that actually takes care of making sure

00:07:07,680 --> 00:07:11,039
to go

00:07:08,319 --> 00:07:13,840
and check on that system uh and to

00:07:11,039 --> 00:07:15,360
replace it if needed add more systems

00:07:13,840 --> 00:07:16,960
remove systems depending on the load

00:07:15,360 --> 00:07:19,120
that kind of scaling thing

00:07:16,960 --> 00:07:20,720
if again you get to the retail if you're

00:07:19,120 --> 00:07:21,680
a retail establishment you have your own

00:07:20,720 --> 00:07:23,919
data center

00:07:21,680 --> 00:07:25,520
you might be adding more computers in

00:07:23,919 --> 00:07:27,680
the old way of doing this to

00:07:25,520 --> 00:07:28,960
to handle the load same kind of idea

00:07:27,680 --> 00:07:30,400
with scaling in there

00:07:28,960 --> 00:07:32,400
deal with the systems that are having

00:07:30,400 --> 00:07:33,199
the problems deploy new systems when

00:07:32,400 --> 00:07:35,599
needed

00:07:33,199 --> 00:07:36,880
and simple access to pools of systems so

00:07:35,599 --> 00:07:39,360
all these things that we

00:07:36,880 --> 00:07:40,400
traditionally would do with actual

00:07:39,360 --> 00:07:43,360
computers uh

00:07:40,400 --> 00:07:45,440
individual machines or individual cards

00:07:43,360 --> 00:07:46,720
uh with cpus and stuff on them

00:07:45,440 --> 00:07:48,639
in a data center and we would have

00:07:46,720 --> 00:07:50,879
people doing those kinds of things

00:07:48,639 --> 00:07:52,319
that's the same kind of thing that

00:07:50,879 --> 00:07:54,560
kubernetes does

00:07:52,319 --> 00:07:56,720
for containers uh just to go over some

00:07:54,560 --> 00:07:58,800
quick terminology things again

00:07:56,720 --> 00:08:00,800
uh if we talk about kubernetes we're

00:07:58,800 --> 00:08:02,720
talking about kubernetes cluster

00:08:00,800 --> 00:08:05,120
as being the set of machines that runs

00:08:02,720 --> 00:08:06,000
kubernetes the set of high availability

00:08:05,120 --> 00:08:08,240
computers

00:08:06,000 --> 00:08:09,680
uh you have the kubernetes master and

00:08:08,240 --> 00:08:11,360
then the worker nodes

00:08:09,680 --> 00:08:12,879
and it can be virtual machines it could

00:08:11,360 --> 00:08:13,840
be physical machines but they're all

00:08:12,879 --> 00:08:15,440
coordinated

00:08:13,840 --> 00:08:18,160
to make up the set of machines that

00:08:15,440 --> 00:08:20,400
could run your containerized workloads

00:08:18,160 --> 00:08:22,479
a pod is simply an object in kubernetes

00:08:20,400 --> 00:08:24,160
that wraps around waterboard containers

00:08:22,479 --> 00:08:26,240
and any kind of attached storage they

00:08:24,160 --> 00:08:27,759
have so at the lowest level kubernetes

00:08:26,240 --> 00:08:29,440
is dealing with the idea of pods but

00:08:27,759 --> 00:08:32,399
pods just encapsulate

00:08:29,440 --> 00:08:34,800
the containers a service a kubernetes

00:08:32,399 --> 00:08:37,519
service as opposed to a microservice

00:08:34,800 --> 00:08:38,399
is simply a way to have this virtual

00:08:37,519 --> 00:08:40,719
address

00:08:38,399 --> 00:08:42,399
to be able to get to your pods to be

00:08:40,719 --> 00:08:45,600
able to get to your application

00:08:42,399 --> 00:08:47,040
and a deployment simply says i want this

00:08:45,600 --> 00:08:49,839
kind of a pod spun

00:08:47,040 --> 00:08:51,600
up with this from this container with

00:08:49,839 --> 00:08:53,040
this kind of storage or whatever the

00:08:51,600 --> 00:08:54,640
case may be there

00:08:53,040 --> 00:08:56,640
these kind of ports open whatever the

00:08:54,640 --> 00:08:58,959
case is and then i

00:08:56,640 --> 00:09:01,440
want x number of them and so it tells

00:08:58,959 --> 00:09:02,000
kubernetes i need always have three of

00:09:01,440 --> 00:09:04,480
these

00:09:02,000 --> 00:09:07,040
so if one goes away kubernetes then has

00:09:04,480 --> 00:09:08,720
a job to say whoops you asked for three

00:09:07,040 --> 00:09:10,080
and you've got two running i will spin

00:09:08,720 --> 00:09:11,920
up another one for you

00:09:10,080 --> 00:09:14,399
so deployment says how many of these do

00:09:11,920 --> 00:09:15,120
we have ingress is a simple resource

00:09:14,399 --> 00:09:17,600
that left cluster

00:09:15,120 --> 00:09:19,920
applications expose the traffic and then

00:09:17,600 --> 00:09:20,480
the name space is a logical grouping of

00:09:19,920 --> 00:09:21,920
them

00:09:20,480 --> 00:09:23,839
so just to kind of reiterate the sorts

00:09:21,920 --> 00:09:26,240
of objects we have to deal

00:09:23,839 --> 00:09:29,600
with in kubernetes so if you want to

00:09:26,240 --> 00:09:31,279
think about our data center analogy here

00:09:29,600 --> 00:09:33,839
think about like a container being in a

00:09:31,279 --> 00:09:35,200
pod as being like the servers in a rack

00:09:33,839 --> 00:09:37,040
in the data center

00:09:35,200 --> 00:09:39,760
if we think about a container being that

00:09:37,040 --> 00:09:42,880
self-contained environment there

00:09:39,760 --> 00:09:43,920
much like we have a box or a system in

00:09:42,880 --> 00:09:46,399
the data center

00:09:43,920 --> 00:09:47,440
which has a application and set up to

00:09:46,399 --> 00:09:50,160
run for that

00:09:47,440 --> 00:09:51,760
to support that if we put a container

00:09:50,160 --> 00:09:53,040
being in there like a server in a rack

00:09:51,760 --> 00:09:54,640
then we might say

00:09:53,040 --> 00:09:56,560
that a pod which is a group of

00:09:54,640 --> 00:09:57,600
containers or can be more containers it

00:09:56,560 --> 00:09:59,360
could be just one

00:09:57,600 --> 00:10:01,760
it could be like a rack of servers those

00:09:59,360 --> 00:10:03,440
hosts those whole systems that need to

00:10:01,760 --> 00:10:05,440
be in close proximity

00:10:03,440 --> 00:10:07,680
they need to be able to easily talk to

00:10:05,440 --> 00:10:09,600
each other and share the same storage

00:10:07,680 --> 00:10:11,839
maybe on the back end those kinds of

00:10:09,600 --> 00:10:13,360
things if we talk about deployment we

00:10:11,839 --> 00:10:15,040
can think of that as being

00:10:13,360 --> 00:10:17,360
how many of these racks do i need to

00:10:15,040 --> 00:10:19,360
service a load here

00:10:17,360 --> 00:10:21,760
the service a kubernetes service is a

00:10:19,360 --> 00:10:24,800
central controller access point

00:10:21,760 --> 00:10:27,519
uh if you've ever logged into a set of

00:10:24,800 --> 00:10:29,040
systems and machines you log in and then

00:10:27,519 --> 00:10:32,000
you get to a particular machine

00:10:29,040 --> 00:10:34,240
assigned to you to work with remotely

00:10:32,000 --> 00:10:35,279
same kind of idea the service is sitting

00:10:34,240 --> 00:10:36,959
on the front end

00:10:35,279 --> 00:10:38,800
and can talk to different pods running

00:10:36,959 --> 00:10:40,320
your application on the back end

00:10:38,800 --> 00:10:42,000
and then we might think of the name

00:10:40,320 --> 00:10:43,519
space as being like the server room

00:10:42,000 --> 00:10:44,240
where all these things are grouped

00:10:43,519 --> 00:10:46,000
together

00:10:44,240 --> 00:10:47,680
so that's just one way to think about it

00:10:46,000 --> 00:10:48,880
kind of a very quick analogy but

00:10:47,680 --> 00:10:51,440
sometimes i find that

00:10:48,880 --> 00:10:52,560
using uh these sorts of analogies is

00:10:51,440 --> 00:10:54,079
helpful to people

00:10:52,560 --> 00:10:56,399
to kind of wrap their head around some

00:10:54,079 --> 00:10:58,640
of these uh newer concepts

00:10:56,399 --> 00:11:00,560
um that you may just be getting into one

00:10:58,640 --> 00:11:03,200
of the key things about kubernetes

00:11:00,560 --> 00:11:04,560
is that it is the desired state system

00:11:03,200 --> 00:11:07,680
simply means that

00:11:04,560 --> 00:11:10,399
we are supplying our desired state

00:11:07,680 --> 00:11:11,360
by generally passing it through what we

00:11:10,399 --> 00:11:14,560
call manifest

00:11:11,360 --> 00:11:17,600
a manifest is nothing more than a

00:11:14,560 --> 00:11:21,440
yaml format yaml is a type of

00:11:17,600 --> 00:11:23,839
of scripting stands for markup language

00:11:21,440 --> 00:11:26,000
with a specific format and we can

00:11:23,839 --> 00:11:27,040
describe the kinds of objects we want to

00:11:26,000 --> 00:11:29,120
kubernetes

00:11:27,040 --> 00:11:31,760
and we can hand with the kubernetes and

00:11:29,120 --> 00:11:33,839
kubernetes has the task then

00:11:31,760 --> 00:11:35,040
of working to say here's what you've

00:11:33,839 --> 00:11:36,800
asked me for

00:11:35,040 --> 00:11:38,800
you've asked me for a pod that looks

00:11:36,800 --> 00:11:41,040
like this you've asked me for a service

00:11:38,800 --> 00:11:42,880
that looks like whatever and i'm going

00:11:41,040 --> 00:11:46,240
to ensure that you get that spun

00:11:42,880 --> 00:11:48,480
up so kubernetes job then is to say

00:11:46,240 --> 00:11:49,600
based on what you've asked for then go

00:11:48,480 --> 00:11:51,600
ahead and

00:11:49,600 --> 00:11:53,040
spin that up in the cluster now this is

00:11:51,600 --> 00:11:56,320
called what this is what we call

00:11:53,040 --> 00:12:00,079
a declarative way of doing things

00:11:56,320 --> 00:12:01,920
as opposed to the imperative

00:12:00,079 --> 00:12:03,519
um imperative and declarative you'll

00:12:01,920 --> 00:12:05,200
hear those terms sometimes

00:12:03,519 --> 00:12:07,519
and the way i typically tell people one

00:12:05,200 --> 00:12:10,160
way to think about that if you consider

00:12:07,519 --> 00:12:10,639
uh you know that and i use a little joke

00:12:10,160 --> 00:12:11,920
here

00:12:10,639 --> 00:12:13,600
when you go to feed your family in the

00:12:11,920 --> 00:12:15,920
evening or if you're feeding yourself

00:12:13,600 --> 00:12:17,920
it's imperative that you have dinner

00:12:15,920 --> 00:12:19,360
um imperative would be you're getting

00:12:17,920 --> 00:12:20,560
the recipe you're getting the

00:12:19,360 --> 00:12:22,079
ingredients you're going through and

00:12:20,560 --> 00:12:22,880
doing the steps to cook it all up

00:12:22,079 --> 00:12:24,639
yourself

00:12:22,880 --> 00:12:26,800
and you are doing that so that you end

00:12:24,639 --> 00:12:29,120
up with what you've asked for

00:12:26,800 --> 00:12:29,920
but you have had to either do it

00:12:29,120 --> 00:12:32,480
yourself

00:12:29,920 --> 00:12:34,560
or tell somebody perhaps if you're you

00:12:32,480 --> 00:12:36,560
know helping your kids cook or something

00:12:34,560 --> 00:12:38,240
um telling them exactly what they need

00:12:36,560 --> 00:12:40,480
to do that's an imperative thing

00:12:38,240 --> 00:12:41,600
declarative would be when you know the

00:12:40,480 --> 00:12:43,279
pandemic allows

00:12:41,600 --> 00:12:46,079
uh you're able to go out to restaurants

00:12:43,279 --> 00:12:48,000
again and you get a menu and you say i

00:12:46,079 --> 00:12:49,760
want one of these and one of those and i

00:12:48,000 --> 00:12:52,240
want something like this looks like this

00:12:49,760 --> 00:12:54,240
and you tell that to the waiter and then

00:12:52,240 --> 00:12:54,959
you have given them your order your

00:12:54,240 --> 00:12:56,880
desired

00:12:54,959 --> 00:12:58,160
set of things you want and then waiter

00:12:56,880 --> 00:12:58,959
takes it back to the kitchen and the

00:12:58,160 --> 00:13:01,279
kitchen

00:12:58,959 --> 00:13:03,120
uh crew will go through and prepare it

00:13:01,279 --> 00:13:04,959
and give you back the things that you've

00:13:03,120 --> 00:13:07,040
asked for how many have asked for

00:13:04,959 --> 00:13:08,639
you know two of these or one of this or

00:13:07,040 --> 00:13:11,120
well done however it is

00:13:08,639 --> 00:13:12,480
so the declarative state is we declare

00:13:11,120 --> 00:13:15,200
two kubernetes

00:13:12,480 --> 00:13:16,880
in these yaml files this is what we want

00:13:15,200 --> 00:13:18,959
our service to be like these are the

00:13:16,880 --> 00:13:20,560
ports we want to open on our service

00:13:18,959 --> 00:13:22,399
this is what our deployment should look

00:13:20,560 --> 00:13:24,000
like we want a deployment that has

00:13:22,399 --> 00:13:26,320
running this container

00:13:24,000 --> 00:13:28,079
using this image that we had this docker

00:13:26,320 --> 00:13:29,920
image to build a container out of

00:13:28,079 --> 00:13:31,519
with things expose there and we need two

00:13:29,920 --> 00:13:32,639
or three or four of them whatever the

00:13:31,519 --> 00:13:34,639
case may be

00:13:32,639 --> 00:13:37,040
so we hand that to kubernetes and

00:13:34,639 --> 00:13:39,839
kubernetes runs this what we call

00:13:37,040 --> 00:13:40,720
uh con reconciliation to say you've

00:13:39,839 --> 00:13:42,399
asked for this

00:13:40,720 --> 00:13:44,240
i want to make sure you have this and if

00:13:42,399 --> 00:13:45,440
at some point something crashes

00:13:44,240 --> 00:13:47,839
something goes away

00:13:45,440 --> 00:13:49,680
kubernetes job is to spin up another one

00:13:47,839 --> 00:13:51,760
to meet the desired state

00:13:49,680 --> 00:13:52,800
so that desired state then is what we

00:13:51,760 --> 00:13:55,839
express in

00:13:52,800 --> 00:13:57,199
a yaml file in text generally now of

00:13:55,839 --> 00:14:00,160
course you can

00:13:57,199 --> 00:14:01,600
interact with the kubernetes api there

00:14:00,160 --> 00:14:03,680
are libraries and stuff

00:14:01,600 --> 00:14:05,360
but in most cases you're really talking

00:14:03,680 --> 00:14:07,279
about when you're having applications

00:14:05,360 --> 00:14:09,199
that you're deploying into kubernetes

00:14:07,279 --> 00:14:11,519
you have these sets of specs or these

00:14:09,199 --> 00:14:13,519
manifest and i won't go through all this

00:14:11,519 --> 00:14:14,959
now but if you look at the screenshot on

00:14:13,519 --> 00:14:18,079
the right-hand side

00:14:14,959 --> 00:14:20,160
of this slide you'll see that there is a

00:14:18,079 --> 00:14:22,000
specific kind of format here

00:14:20,160 --> 00:14:23,920
um and for each kind of kubernetes

00:14:22,000 --> 00:14:26,000
object we get into talking about

00:14:23,920 --> 00:14:27,920
what api version is it using which

00:14:26,000 --> 00:14:30,320
kubernetes api version

00:14:27,920 --> 00:14:31,199
is supporting what we're asking for the

00:14:30,320 --> 00:14:32,959
kind of object

00:14:31,199 --> 00:14:35,760
is it a deployment is it a kubernetes

00:14:32,959 --> 00:14:36,639
service is it just a pod definition or

00:14:35,760 --> 00:14:37,920
an ingress

00:14:36,639 --> 00:14:40,079
there are lots of different kinds of

00:14:37,920 --> 00:14:40,720
kubernetes objects and then we get into

00:14:40,079 --> 00:14:43,440
things like

00:14:40,720 --> 00:14:45,360
name and namespace and so on and then

00:14:43,440 --> 00:14:46,560
after that common that sort of section

00:14:45,360 --> 00:14:49,600
at the top

00:14:46,560 --> 00:14:51,839
is all common to any object you have to

00:14:49,600 --> 00:14:55,040
have the api and the kind and so on

00:14:51,839 --> 00:14:56,639
then the rest of this varies depending

00:14:55,040 --> 00:14:57,519
on the type of object you have in

00:14:56,639 --> 00:14:59,600
kubernetes

00:14:57,519 --> 00:15:02,079
for example the spec when we get down to

00:14:59,600 --> 00:15:02,800
the spec the spec for the deployment at

00:15:02,079 --> 00:15:04,720
the top

00:15:02,800 --> 00:15:06,720
talks about how many of these do we want

00:15:04,720 --> 00:15:08,320
how many replicas and so on

00:15:06,720 --> 00:15:10,480
what kind of containers do we want to

00:15:08,320 --> 00:15:12,320
have what images should they run

00:15:10,480 --> 00:15:13,760
and then the service at the bottom has a

00:15:12,320 --> 00:15:16,399
different kind of spec

00:15:13,760 --> 00:15:18,800
so we take these kinds of specifications

00:15:16,399 --> 00:15:20,639
put them in this syntax this format that

00:15:18,800 --> 00:15:22,959
kubernetes is expecting

00:15:20,639 --> 00:15:24,560
and then we can feed that to kubernetes

00:15:22,959 --> 00:15:27,279
to spin up what we want

00:15:24,560 --> 00:15:28,000
so that's a very sort of quick uh

00:15:27,279 --> 00:15:30,959
run-through

00:15:28,000 --> 00:15:31,680
of kubernetes to kind of uh get us to

00:15:30,959 --> 00:15:34,880
the point where we

00:15:31,680 --> 00:15:37,839
start talking about helm so what is helm

00:15:34,880 --> 00:15:40,720
helm is kind of a package manager and

00:15:37,839 --> 00:15:42,720
life cycle manager for kubernetes

00:15:40,720 --> 00:15:44,160
it's kind of like yum or app if you've

00:15:42,720 --> 00:15:45,120
used those other kinds of package

00:15:44,160 --> 00:15:47,920
managers

00:15:45,120 --> 00:15:49,920
on some of the linux operating systems

00:15:47,920 --> 00:15:51,920
and what it does is it takes these

00:15:49,920 --> 00:15:52,639
different kind of specifications that we

00:15:51,920 --> 00:15:54,720
would have

00:15:52,639 --> 00:15:56,720
for the objects in kubernetes the

00:15:54,720 --> 00:15:58,959
deployments the service

00:15:56,720 --> 00:15:59,759
the ingress whatever and for a

00:15:58,959 --> 00:16:01,839
particular

00:15:59,759 --> 00:16:02,880
all the things that we need to run a

00:16:01,839 --> 00:16:06,000
particular

00:16:02,880 --> 00:16:07,920
uh product or application it bundles

00:16:06,000 --> 00:16:08,560
them together into this thing called a

00:16:07,920 --> 00:16:11,360
chart

00:16:08,560 --> 00:16:12,320
so helm helps us to keep track of and

00:16:11,360 --> 00:16:16,079
manage

00:16:12,320 --> 00:16:18,240
and use and reuse these specifications

00:16:16,079 --> 00:16:20,079
that we're putting into kubernetes

00:16:18,240 --> 00:16:22,079
when installing chart helm creates a

00:16:20,079 --> 00:16:24,639
release that is we take the chart

00:16:22,079 --> 00:16:25,920
the set of those specifications we hand

00:16:24,639 --> 00:16:29,199
them to kubernetes

00:16:25,920 --> 00:16:30,639
and kubernetes then with helm when spins

00:16:29,199 --> 00:16:33,360
up what we call release

00:16:30,639 --> 00:16:35,040
a release is an instance of all of those

00:16:33,360 --> 00:16:37,440
charts or whatever's in the chart

00:16:35,040 --> 00:16:39,279
all those things spun up into kubernetes

00:16:37,440 --> 00:16:40,720
and we can treat it as a unit

00:16:39,279 --> 00:16:42,639
okay you'll see more what i mean in a

00:16:40,720 --> 00:16:44,399
moment we'll go through a couple of

00:16:42,639 --> 00:16:46,560
animations here to help you understand

00:16:44,399 --> 00:16:48,560
it helm is about life cycle management

00:16:46,560 --> 00:16:51,360
doing things like being able to create

00:16:48,560 --> 00:16:52,399
install upgrade roll back delete status

00:16:51,360 --> 00:16:55,519
and versioning

00:16:52,399 --> 00:16:57,440
at the application or the product level

00:16:55,519 --> 00:16:58,880
so rather than always having to keep

00:16:57,440 --> 00:17:00,720
track of

00:16:58,880 --> 00:17:02,480
every little detail and having to make

00:17:00,720 --> 00:17:04,319
sure that i upgrade

00:17:02,480 --> 00:17:06,160
the service and upgrade to deployment

00:17:04,319 --> 00:17:06,720
and upgrade the ingress if that's the

00:17:06,160 --> 00:17:09,839
case

00:17:06,720 --> 00:17:11,679
i can use helm to batch those up or to

00:17:09,839 --> 00:17:14,720
manage those for me

00:17:11,679 --> 00:17:16,079
so the benefits that we get from this

00:17:14,720 --> 00:17:18,720
the benefits that we get

00:17:16,079 --> 00:17:19,839
are things like templating repeatability

00:17:18,720 --> 00:17:21,839
reliability

00:17:19,839 --> 00:17:23,760
ease of collaboration we'll talk about

00:17:21,839 --> 00:17:26,480
templating but one of the other features

00:17:23,760 --> 00:17:27,839
of helm is that it allows us to put

00:17:26,480 --> 00:17:30,640
placeholders

00:17:27,839 --> 00:17:33,360
in these files and to substitute values

00:17:30,640 --> 00:17:36,480
in for it so we can reuse these things

00:17:33,360 --> 00:17:38,240
we can make them reusable and be able to

00:17:36,480 --> 00:17:40,320
have placeholders in them so you could

00:17:38,240 --> 00:17:42,559
use them and run the application

00:17:40,320 --> 00:17:45,280
on port 30 000 and i could use it and

00:17:42,559 --> 00:17:47,280
run the application on port 3001

00:17:45,280 --> 00:17:50,880
we're still using the same files we're

00:17:47,280 --> 00:17:52,320
just supplying different values to them

00:17:50,880 --> 00:17:54,000
so why do we need something like this

00:17:52,320 --> 00:17:56,720
we've alluded to it already but

00:17:54,000 --> 00:17:58,559
really when you start talking about all

00:17:56,720 --> 00:18:00,799
of the different containers

00:17:58,559 --> 00:18:02,080
you can have and all the different

00:18:00,799 --> 00:18:06,080
applications

00:18:02,080 --> 00:18:07,039
uh or pods and deployments and such you

00:18:06,080 --> 00:18:10,080
can have

00:18:07,039 --> 00:18:12,320
to have an application in kubernetes it

00:18:10,080 --> 00:18:14,400
can get really out of hand really quick

00:18:12,320 --> 00:18:15,360
for example if we have a simple micro

00:18:14,400 --> 00:18:17,600
service uh

00:18:15,360 --> 00:18:19,280
set of micro services here one micro

00:18:17,600 --> 00:18:20,559
service to have to handle the front end

00:18:19,280 --> 00:18:22,160
of our application

00:18:20,559 --> 00:18:23,840
one to handle the back end processing

00:18:22,160 --> 00:18:26,160
one to handle the database

00:18:23,840 --> 00:18:27,120
each one of those to make it run in

00:18:26,160 --> 00:18:29,039
kubernetes

00:18:27,120 --> 00:18:32,080
would need a deployment they might need

00:18:29,039 --> 00:18:34,640
a config map config map is a way to

00:18:32,080 --> 00:18:36,480
uh sort of set values uh kind of like

00:18:34,640 --> 00:18:38,160
you would do is environment variables

00:18:36,480 --> 00:18:41,200
kind of thing setting and storing values

00:18:38,160 --> 00:18:45,200
configuration ingresses secrets

00:18:41,200 --> 00:18:46,960
uh services and so on so these kinds of

00:18:45,200 --> 00:18:48,640
things

00:18:46,960 --> 00:18:50,080
will come in and you might have a bunch

00:18:48,640 --> 00:18:51,360
of these and by the way i apologize i

00:18:50,080 --> 00:18:53,760
should have said up front

00:18:51,360 --> 00:18:54,960
um i want we have quite a bit of

00:18:53,760 --> 00:18:56,640
material to cover

00:18:54,960 --> 00:18:58,000
so i'll make sure to try to get to some

00:18:56,640 --> 00:19:00,640
questions at the end

00:18:58,000 --> 00:19:01,520
but i'm going to try not necessarily to

00:19:00,640 --> 00:19:03,919
uh

00:19:01,520 --> 00:19:04,960
to try to answer questions right now

00:19:03,919 --> 00:19:06,160
because

00:19:04,960 --> 00:19:07,360
there's a lot of material to cover i

00:19:06,160 --> 00:19:08,880
want to make sure we get that and

00:19:07,360 --> 00:19:10,640
sometimes i think if you

00:19:08,880 --> 00:19:12,559
as we go through the process go through

00:19:10,640 --> 00:19:13,679
the slides a lot of the answers will

00:19:12,559 --> 00:19:15,919
come

00:19:13,679 --> 00:19:17,120
at the presentation as we go along but

00:19:15,919 --> 00:19:19,520
certainly if you have

00:19:17,120 --> 00:19:20,799
questions i'll try to make sure i cover

00:19:19,520 --> 00:19:21,919
some of those at the end of the

00:19:20,799 --> 00:19:23,440
presentation

00:19:21,919 --> 00:19:25,520
so if we have a bunch of these

00:19:23,440 --> 00:19:27,039
microservices running and they all need

00:19:25,520 --> 00:19:30,240
these kinds of specs

00:19:27,039 --> 00:19:31,919
to tell kubernetes how to spin them up

00:19:30,240 --> 00:19:32,799
and how to work with them and what ports

00:19:31,919 --> 00:19:35,039
are open

00:19:32,799 --> 00:19:36,160
you can see we can start to get into

00:19:35,039 --> 00:19:38,559
some really

00:19:36,160 --> 00:19:40,000
a lot of kubernetes operations typically

00:19:38,559 --> 00:19:42,559
we take a yaml file we do

00:19:40,000 --> 00:19:43,600
cube cuddle or kubernetes command line

00:19:42,559 --> 00:19:46,640
cube ctl

00:19:43,600 --> 00:19:48,640
apply to get these into kubernetes so we

00:19:46,640 --> 00:19:51,280
would do an apply now you can apply

00:19:48,640 --> 00:19:52,400
at a directory level so you can simplify

00:19:51,280 --> 00:19:55,039
this somewhat

00:19:52,400 --> 00:19:55,520
but still if you get something even a

00:19:55,039 --> 00:19:58,640
basic

00:19:55,520 --> 00:19:59,840
application might have uh you know 10

00:19:58,640 --> 00:20:01,360
different

00:19:59,840 --> 00:20:03,039
microservices or something that you're

00:20:01,360 --> 00:20:04,880
working on depending on what it is

00:20:03,039 --> 00:20:07,440
so it can get very complicated very

00:20:04,880 --> 00:20:08,400
quickly in traditional kubernetes if we

00:20:07,440 --> 00:20:10,559
did a cube cuddle

00:20:08,400 --> 00:20:12,400
if we had a deployment a service and an

00:20:10,559 --> 00:20:14,320
ingress for our particular

00:20:12,400 --> 00:20:16,080
micro service order we're trying to run

00:20:14,320 --> 00:20:17,600
we could do a deployment we could do a

00:20:16,080 --> 00:20:19,600
service and an ingress

00:20:17,600 --> 00:20:21,760
three separate applies things that we're

00:20:19,600 --> 00:20:23,280
maintaining if we need to upgrade it we

00:20:21,760 --> 00:20:25,200
go back and do those again

00:20:23,280 --> 00:20:27,120
upgrade each file in there too when we

00:20:25,200 --> 00:20:29,440
talk about using helm

00:20:27,120 --> 00:20:30,720
we have these applications or these

00:20:29,440 --> 00:20:33,840
pieces rather

00:20:30,720 --> 00:20:34,480
put into a single entity called a chart

00:20:33,840 --> 00:20:36,640
a chart

00:20:34,480 --> 00:20:37,679
is the way that helm groups these things

00:20:36,640 --> 00:20:39,360
together

00:20:37,679 --> 00:20:41,360
and we'll talk more about the structure

00:20:39,360 --> 00:20:43,440
of that but really what you have

00:20:41,360 --> 00:20:45,600
is the deployment the service and the

00:20:43,440 --> 00:20:47,440
ingress become these

00:20:45,600 --> 00:20:49,200
look like a lot like the yaml charts the

00:20:47,440 --> 00:20:51,520
typical kubernetes

00:20:49,200 --> 00:20:53,039
yaml files are manifest with

00:20:51,520 --> 00:20:55,760
placeholders in them

00:20:53,039 --> 00:20:56,400
with placeholders to put values in and

00:20:55,760 --> 00:20:58,880
you have

00:20:56,400 --> 00:21:01,200
your values then at the highest level

00:20:58,880 --> 00:21:03,840
that you want to be able to plug into

00:21:01,200 --> 00:21:06,000
that in this values yaml file

00:21:03,840 --> 00:21:07,840
so what happens with a helm chart is you

00:21:06,000 --> 00:21:09,600
have your templates

00:21:07,840 --> 00:21:12,320
these are the kubernetes manifest with

00:21:09,600 --> 00:21:13,520
the placeholders you have then a values

00:21:12,320 --> 00:21:15,520
yaml file

00:21:13,520 --> 00:21:16,640
or other ways you can specify the values

00:21:15,520 --> 00:21:19,679
and if i do a helm

00:21:16,640 --> 00:21:21,120
install helm will take and put take the

00:21:19,679 --> 00:21:23,840
values from that

00:21:21,120 --> 00:21:25,520
instantiate each of those templates to

00:21:23,840 --> 00:21:26,799
create something that kubernetes can

00:21:25,520 --> 00:21:29,600
understand

00:21:26,799 --> 00:21:30,480
and then install that into the cluster

00:21:29,600 --> 00:21:33,840
that's what we call

00:21:30,480 --> 00:21:35,919
a release so it's a simple one operation

00:21:33,840 --> 00:21:38,240
and i get to manage the entire set of

00:21:35,919 --> 00:21:40,640
things that i need from a microservice

00:21:38,240 --> 00:21:42,320
as a group as a unit with the chart

00:21:40,640 --> 00:21:44,320
there

00:21:42,320 --> 00:21:45,919
what are the advantages of using helm

00:21:44,320 --> 00:21:48,000
well saves having to deploy

00:21:45,919 --> 00:21:49,840
multiple individual manifests for

00:21:48,000 --> 00:21:50,799
multiple kubernetes objects as we've

00:21:49,840 --> 00:21:53,559
talked about

00:21:50,799 --> 00:21:54,720
it allows for reuse versus via parameter

00:21:53,559 --> 00:21:56,080
parameterizing

00:21:54,720 --> 00:21:58,000
we're going to talk more about that in

00:21:56,080 --> 00:22:01,039
just a moment it allows you to

00:21:58,000 --> 00:22:02,880
manage as releases of helm packages helm

00:22:01,039 --> 00:22:04,000
packages are where we take these and we

00:22:02,880 --> 00:22:06,720
can press them

00:22:04,000 --> 00:22:08,640
and we can store them in a repository

00:22:06,720 --> 00:22:11,280
one of the key things

00:22:08,640 --> 00:22:12,080
that helm also provides is an easy way

00:22:11,280 --> 00:22:14,559
to install

00:22:12,080 --> 00:22:16,320
applications in kubernetes if you're

00:22:14,559 --> 00:22:17,679
looking for something

00:22:16,320 --> 00:22:19,120
application that's going to run in

00:22:17,679 --> 00:22:20,000
kubernetes that somebody else has

00:22:19,120 --> 00:22:22,240
created

00:22:20,000 --> 00:22:23,919
they may have created a helm chart for

00:22:22,240 --> 00:22:26,799
it and that makes it very

00:22:23,919 --> 00:22:28,799
easy then to get the helm package that

00:22:26,799 --> 00:22:31,840
compressed version of the chart

00:22:28,799 --> 00:22:34,640
out of a repository a helm repository

00:22:31,840 --> 00:22:35,760
pull it down and do a helm install into

00:22:34,640 --> 00:22:38,159
kubernetes

00:22:35,760 --> 00:22:40,080
and you're up and running very quickly

00:22:38,159 --> 00:22:41,760
as opposed to having to do something

00:22:40,080 --> 00:22:43,760
like copying it out of a

00:22:41,760 --> 00:22:45,039
uh all of the files for a deployment a

00:22:43,760 --> 00:22:46,720
service etc

00:22:45,039 --> 00:22:48,000
out of like a github project and then

00:22:46,720 --> 00:22:48,799
going through and doing cube cuddle

00:22:48,000 --> 00:22:50,720
applies

00:22:48,799 --> 00:22:52,000
and trying to make sure everything is in

00:22:50,720 --> 00:22:54,720
there you need

00:22:52,000 --> 00:22:56,480
helm allows us to package those up and

00:22:54,720 --> 00:22:59,039
it's become it's become

00:22:56,480 --> 00:23:00,080
one of the common ways that people

00:22:59,039 --> 00:23:02,640
deliver

00:23:00,080 --> 00:23:05,280
software applications for kubernetes

00:23:02,640 --> 00:23:07,120
through a helm chart these set of files

00:23:05,280 --> 00:23:08,960
that describe everything that needs to

00:23:07,120 --> 00:23:09,760
go into it all the types of kubernetes

00:23:08,960 --> 00:23:12,480
objects

00:23:09,760 --> 00:23:13,919
packaged up so it makes it easier to

00:23:12,480 --> 00:23:15,840
share

00:23:13,919 --> 00:23:18,640
when we talk about some of the

00:23:15,840 --> 00:23:20,480
terminology or topology of helm

00:23:18,640 --> 00:23:22,320
a chart is simply a bundle of these

00:23:20,480 --> 00:23:24,559
kubernetes resources

00:23:22,320 --> 00:23:25,360
a release then is these kubernetes

00:23:24,559 --> 00:23:28,480
resources

00:23:25,360 --> 00:23:29,200
actually deployed or put into and

00:23:28,480 --> 00:23:31,520
started up

00:23:29,200 --> 00:23:34,000
in kubernetes the same chart can be

00:23:31,520 --> 00:23:36,960
installed several times the same cluster

00:23:34,000 --> 00:23:38,240
with its own release a repository in

00:23:36,960 --> 00:23:41,039
terms of helm

00:23:38,240 --> 00:23:42,080
is a repository of charts so i take my

00:23:41,039 --> 00:23:44,960
application

00:23:42,080 --> 00:23:46,640
i would take like if i create a service

00:23:44,960 --> 00:23:49,360
and a deployment spec

00:23:46,640 --> 00:23:50,480
in there and i could put those packages

00:23:49,360 --> 00:23:52,080
up with helm

00:23:50,480 --> 00:23:53,600
and then i could share them out with

00:23:52,080 --> 00:23:54,960
other people i could package them up as

00:23:53,600 --> 00:23:56,559
a helm package

00:23:54,960 --> 00:23:58,720
somebody else could then take my helm

00:23:56,559 --> 00:24:00,799
package from the repository

00:23:58,720 --> 00:24:02,960
and get it out of the chart and then

00:24:00,799 --> 00:24:04,799
install it into their kubernetes

00:24:02,960 --> 00:24:06,559
and a template is simply a kubernetes

00:24:04,799 --> 00:24:08,559
configuration file

00:24:06,559 --> 00:24:10,080
with some templating we talk about go

00:24:08,559 --> 00:24:11,600
and sprig

00:24:10,080 --> 00:24:13,200
probably everybody's heard of the go

00:24:11,600 --> 00:24:15,600
programming language

00:24:13,200 --> 00:24:19,440
sprig is a set of templates these are

00:24:15,600 --> 00:24:22,320
things that allow you to do things

00:24:19,440 --> 00:24:23,919
in there to have place holders to put

00:24:22,320 --> 00:24:25,919
material to put things in

00:24:23,919 --> 00:24:27,200
as well as functions functions that can

00:24:25,919 --> 00:24:29,360
do things like

00:24:27,200 --> 00:24:30,320
upper case something or put quotes

00:24:29,360 --> 00:24:32,240
around something

00:24:30,320 --> 00:24:34,480
since we're dealing with yaml what you

00:24:32,240 --> 00:24:36,240
see on the screen here

00:24:34,480 --> 00:24:37,600
is one of the things i use in one some

00:24:36,240 --> 00:24:38,880
of the classes i teach

00:24:37,600 --> 00:24:41,520
you can see there's a product called

00:24:38,880 --> 00:24:44,000
istio and then there's the jenkins x

00:24:41,520 --> 00:24:44,640
and a couple of other things here which

00:24:44,000 --> 00:24:46,640
are actually

00:24:44,640 --> 00:24:47,760
installed and running in the cluster as

00:24:46,640 --> 00:24:49,520
these helm

00:24:47,760 --> 00:24:51,200
releases there was a helm chart

00:24:49,520 --> 00:24:53,440
specified all the things

00:24:51,200 --> 00:24:54,640
that were needed for istio or for

00:24:53,440 --> 00:24:57,200
jenkins x

00:24:54,640 --> 00:24:59,440
and it's deployed in there and so when i

00:24:57,200 --> 00:25:01,679
and this is the version of the chart

00:24:59,440 --> 00:25:03,360
the chart being that collection of files

00:25:01,679 --> 00:25:04,240
and then you can update these you can

00:25:03,360 --> 00:25:06,400
roll them back

00:25:04,240 --> 00:25:07,919
and so on so let's talk a little bit

00:25:06,400 --> 00:25:11,440
more about what a chart

00:25:07,919 --> 00:25:12,880
is in helm a chart is simply a packaging

00:25:11,440 --> 00:25:14,400
format for helm

00:25:12,880 --> 00:25:16,640
by the way i do realize we are going

00:25:14,400 --> 00:25:19,600
through a lot of content here

00:25:16,640 --> 00:25:20,400
uh uh again 45 minutes in this kind of

00:25:19,600 --> 00:25:22,159
environment

00:25:20,400 --> 00:25:24,559
it's really about exposing you to the

00:25:22,159 --> 00:25:27,039
content to give you the big ideas

00:25:24,559 --> 00:25:28,000
in there um certainly don't feel you

00:25:27,039 --> 00:25:30,480
know overwhelmed

00:25:28,000 --> 00:25:31,679
by it or that you're not grasping

00:25:30,480 --> 00:25:34,080
everything that's it's not

00:25:31,679 --> 00:25:35,840
it's not in the time frame we have

00:25:34,080 --> 00:25:37,840
that's challenging to do

00:25:35,840 --> 00:25:39,840
but i want to at least expose you to the

00:25:37,840 --> 00:25:41,279
ideas kind of give you an idea of how

00:25:39,840 --> 00:25:43,039
things are work so if you're interested

00:25:41,279 --> 00:25:45,279
you can go up then

00:25:43,039 --> 00:25:46,080
and explore other kinds of information

00:25:45,279 --> 00:25:48,720
about it

00:25:46,080 --> 00:25:49,520
so a chart in helm is simply a packaging

00:25:48,720 --> 00:25:51,039
format

00:25:49,520 --> 00:25:52,720
for all of the things that we're going

00:25:51,039 --> 00:25:56,799
to need to have running

00:25:52,720 --> 00:25:59,200
in kubernetes for our application

00:25:56,799 --> 00:26:00,720
it is a deployable unit that is it is

00:25:59,200 --> 00:26:04,080
something that we can treat

00:26:00,720 --> 00:26:06,799
as say deploy this into kubernetes

00:26:04,080 --> 00:26:08,960
regardless of what's in the chart helm

00:26:06,799 --> 00:26:10,240
go install this and then expect it to be

00:26:08,960 --> 00:26:13,360
up and running

00:26:10,240 --> 00:26:15,279
it is a way of kind of having like our

00:26:13,360 --> 00:26:16,559
source code for our specification going

00:26:15,279 --> 00:26:19,279
to kubernetes

00:26:16,559 --> 00:26:21,039
we can uh track these we version them

00:26:19,279 --> 00:26:22,000
you can have versions of charts and

00:26:21,039 --> 00:26:24,240
versions

00:26:22,000 --> 00:26:25,679
of even different versions of charts

00:26:24,240 --> 00:26:26,720
relate to different versions of your

00:26:25,679 --> 00:26:28,640
application

00:26:26,720 --> 00:26:30,320
and charts can also include other charts

00:26:28,640 --> 00:26:32,720
as dependencies

00:26:30,320 --> 00:26:34,559
so to give you a quick idea of what's in

00:26:32,720 --> 00:26:36,400
a helm chart here

00:26:34,559 --> 00:26:37,679
typically you would have a chart that is

00:26:36,400 --> 00:26:40,720
a directory

00:26:37,679 --> 00:26:42,960
you would have a chart.yaml chart.yaml

00:26:40,720 --> 00:26:45,279
is simply this high level description of

00:26:42,960 --> 00:26:48,480
a chart might have things like the name

00:26:45,279 --> 00:26:49,440
in there it could also have listings of

00:26:48,480 --> 00:26:52,000
dependencies

00:26:49,440 --> 00:26:53,760
other charts in there and specifications

00:26:52,000 --> 00:26:55,279
about what versions of kubernetes hit

00:26:53,760 --> 00:26:57,400
would be compatible with

00:26:55,279 --> 00:26:59,120
those kinds of things there's a

00:26:57,400 --> 00:27:02,559
values.yaml file

00:26:59,120 --> 00:27:05,679
the values.yaml file

00:27:02,559 --> 00:27:06,480
is where we can separate out the default

00:27:05,679 --> 00:27:09,200
values

00:27:06,480 --> 00:27:10,799
we can say these are the default values

00:27:09,200 --> 00:27:13,600
that you plug into

00:27:10,799 --> 00:27:14,880
those placeholders in the files to be

00:27:13,600 --> 00:27:16,400
able to actually

00:27:14,880 --> 00:27:18,320
get then the rendered things for

00:27:16,400 --> 00:27:21,360
kubernetes that work with that

00:27:18,320 --> 00:27:23,600
so this is a set of default values but

00:27:21,360 --> 00:27:25,279
this is also a place where someone else

00:27:23,600 --> 00:27:28,399
who needs to have a different value

00:27:25,279 --> 00:27:30,720
can go and simply update their copy of

00:27:28,399 --> 00:27:33,039
the values yaml file

00:27:30,720 --> 00:27:33,760
and then run the application with their

00:27:33,039 --> 00:27:36,159
settings

00:27:33,760 --> 00:27:37,840
so instead of having to go in to each of

00:27:36,159 --> 00:27:40,480
the files deployment

00:27:37,840 --> 00:27:41,120
service or whatever and make copies of

00:27:40,480 --> 00:27:43,919
that

00:27:41,120 --> 00:27:44,960
and then hard code values in there in

00:27:43,919 --> 00:27:46,720
that way

00:27:44,960 --> 00:27:48,240
i simply can change the values in the

00:27:46,720 --> 00:27:51,200
values yaml file

00:27:48,240 --> 00:27:52,880
that's how we promote reuse with this if

00:27:51,200 --> 00:27:54,640
i didn't do something like helm

00:27:52,880 --> 00:27:56,080
i would have to go in and make a copy of

00:27:54,640 --> 00:27:57,840
somebody else's chart

00:27:56,080 --> 00:28:00,320
or somebody else's files like the

00:27:57,840 --> 00:28:01,600
deployments yaml the service yaml and so

00:28:00,320 --> 00:28:04,559
on

00:28:01,600 --> 00:28:05,919
card code values keep that somewhere

00:28:04,559 --> 00:28:07,520
worry about if the

00:28:05,919 --> 00:28:09,600
uh you know if somebody made changes to

00:28:07,520 --> 00:28:10,159
the other one get a new copy and hard

00:28:09,600 --> 00:28:13,039
code it

00:28:10,159 --> 00:28:13,919
whereas with this i can simply just

00:28:13,039 --> 00:28:15,760
replace

00:28:13,919 --> 00:28:17,760
the default values with the values i

00:28:15,760 --> 00:28:20,159
want you can also supply values from the

00:28:17,760 --> 00:28:22,480
command line to overwrite it as well

00:28:20,159 --> 00:28:24,559
then we have a template subdirectory and

00:28:22,480 --> 00:28:26,799
this is where we put those files that

00:28:24,559 --> 00:28:28,480
look uh very much like standard

00:28:26,799 --> 00:28:30,720
kubernetes manifest but with the

00:28:28,480 --> 00:28:32,559
placeholders in them where values can be

00:28:30,720 --> 00:28:34,799
plugged in

00:28:32,559 --> 00:28:36,480
here's an example of the chart.yaml as i

00:28:34,799 --> 00:28:39,520
said basically

00:28:36,480 --> 00:28:41,279
just some very simple case here the api

00:28:39,520 --> 00:28:43,600
version the description the name

00:28:41,279 --> 00:28:44,880
the version of the chart and so on

00:28:43,600 --> 00:28:47,679
values yaml

00:28:44,880 --> 00:28:48,799
you can see this is a yaml format and

00:28:47,679 --> 00:28:51,120
yaml again

00:28:48,799 --> 00:28:53,919
if you're not familiar with that is a

00:28:51,120 --> 00:28:56,159
way of structuring data

00:28:53,919 --> 00:28:57,440
and the idea with the ammo the key thing

00:28:56,159 --> 00:28:59,679
to know about yaml

00:28:57,440 --> 00:29:00,960
is that the indentation matters the

00:28:59,679 --> 00:29:03,360
white space there

00:29:00,960 --> 00:29:04,960
because the top level things things that

00:29:03,360 --> 00:29:07,039
are indented under that

00:29:04,960 --> 00:29:08,960
belong to the thing above and things

00:29:07,039 --> 00:29:10,159
that are indented to that belong to that

00:29:08,960 --> 00:29:12,399
thing and so on

00:29:10,159 --> 00:29:14,559
so the indentation represents

00:29:12,399 --> 00:29:16,720
effectively like a hierarchy that you're

00:29:14,559 --> 00:29:19,120
going to go through to get the value

00:29:16,720 --> 00:29:20,320
so for example here if you look at line

00:29:19,120 --> 00:29:22,799
00:29:20,320 --> 00:29:25,039
this is saying that our deployment for

00:29:22,799 --> 00:29:28,000
our deployment spec for kubernetes

00:29:25,039 --> 00:29:29,520
the ports area we have a port name to

00:29:28,000 --> 00:29:32,480
mysql

00:29:29,520 --> 00:29:34,000
there and so that's on 3306 or we have

00:29:32,480 --> 00:29:37,039
an environment variable

00:29:34,000 --> 00:29:39,600
down along line 10 that are defined

00:29:37,039 --> 00:29:41,120
for our kubernetes deployment and you

00:29:39,600 --> 00:29:42,640
can see at the bottom then we have

00:29:41,120 --> 00:29:44,399
started line 15

00:29:42,640 --> 00:29:46,640
things that are default values for the

00:29:44,399 --> 00:29:48,640
service so again instead of having to go

00:29:46,640 --> 00:29:51,360
into those things and hard code files

00:29:48,640 --> 00:29:53,360
we can change we can extract them out

00:29:51,360 --> 00:29:56,240
and put them into the values yaml

00:29:53,360 --> 00:29:57,120
when we get to this helper tpl file very

00:29:56,240 --> 00:29:59,919
quickly

00:29:57,120 --> 00:30:01,919
this looks really kind of a funky syntax

00:29:59,919 --> 00:30:03,440
it's really a way of actually writing

00:30:01,919 --> 00:30:06,559
helper functions

00:30:03,440 --> 00:30:07,520
and it won't go into it here but

00:30:06,559 --> 00:30:09,840
essentially

00:30:07,520 --> 00:30:11,840
it is a way of writing little routines

00:30:09,840 --> 00:30:14,720
or little processes to say

00:30:11,840 --> 00:30:16,320
if i give you information um give me it

00:30:14,720 --> 00:30:18,960
back in this form maybe i

00:30:16,320 --> 00:30:20,000
say what's the long name of the chart or

00:30:18,960 --> 00:30:22,159
the short name

00:30:20,000 --> 00:30:24,159
or maybe i do some basic addition maybe

00:30:22,159 --> 00:30:26,799
i expect you to go through and say

00:30:24,159 --> 00:30:29,200
if i give you a value here for a port

00:30:26,799 --> 00:30:30,240
add one to it so i can pass that back to

00:30:29,200 --> 00:30:32,080
something else

00:30:30,240 --> 00:30:33,679
that kind of thing you can write helper

00:30:32,080 --> 00:30:36,080
functions in there

00:30:33,679 --> 00:30:38,080
then the service yaml this looks a lot

00:30:36,080 --> 00:30:39,840
like a standard kubernetes service if

00:30:38,080 --> 00:30:41,520
you've seen any of those today or if you

00:30:39,840 --> 00:30:43,360
work for kubernetes

00:30:41,520 --> 00:30:44,880
again at the top you'll see things that

00:30:43,360 --> 00:30:46,960
look much like we did

00:30:44,880 --> 00:30:49,520
in that one slide we have the api

00:30:46,960 --> 00:30:50,399
version for kubernetes we have the kind

00:30:49,520 --> 00:30:54,000
of object

00:30:50,399 --> 00:30:55,600
we have metadata name labels and so on

00:30:54,000 --> 00:30:57,120
but then you see these kind of funny

00:30:55,600 --> 00:30:59,519
characters on here

00:30:57,120 --> 00:31:01,360
that look like these double open braces

00:30:59,519 --> 00:31:04,159
and double closing braces

00:31:01,360 --> 00:31:06,000
what this is is these are placeholders

00:31:04,159 --> 00:31:08,720
this is where values will be filled

00:31:06,000 --> 00:31:10,000
in at the time you do an install or an

00:31:08,720 --> 00:31:12,720
update or something

00:31:10,000 --> 00:31:14,480
values can come either from running

00:31:12,720 --> 00:31:16,559
template functions like functions help

00:31:14,480 --> 00:31:20,080
defined in the helper's tpl

00:31:16,559 --> 00:31:21,840
or values can come from this values

00:31:20,080 --> 00:31:24,159
file when you see dot values it means

00:31:21,840 --> 00:31:26,799
get the values out of the values file

00:31:24,159 --> 00:31:27,919
or they can be built in like a release

00:31:26,799 --> 00:31:31,039
name and such

00:31:27,919 --> 00:31:33,039
so any place that you see

00:31:31,039 --> 00:31:35,120
these kind of double braces opening and

00:31:33,039 --> 00:31:36,000
closing that's a place that we are

00:31:35,120 --> 00:31:39,200
putting in

00:31:36,000 --> 00:31:41,120
a placeholder and we are saying

00:31:39,200 --> 00:31:43,600
this is how you find the value we want

00:31:41,120 --> 00:31:45,600
to use for this go to the values file go

00:31:43,600 --> 00:31:47,919
to the service section go to

00:31:45,600 --> 00:31:48,799
find the port name and the same thing

00:31:47,919 --> 00:31:51,200
for a deployment

00:31:48,799 --> 00:31:53,600
same sort of idea it's a standard sort

00:31:51,200 --> 00:31:56,559
of structure for a kubernetes manifest

00:31:53,600 --> 00:31:58,080
but it is simply uh just with

00:31:56,559 --> 00:32:00,960
placeholders in there

00:31:58,080 --> 00:32:02,640
so a chart repository that's what a

00:32:00,960 --> 00:32:03,519
chart is like a chart is that collection

00:32:02,640 --> 00:32:06,000
of templates

00:32:03,519 --> 00:32:07,600
and values and data there a chart

00:32:06,000 --> 00:32:11,039
repository

00:32:07,600 --> 00:32:14,159
is a helm repository in other words

00:32:11,039 --> 00:32:16,399
we can just very quickly hear

00:32:14,159 --> 00:32:18,240
we can have different places where we

00:32:16,399 --> 00:32:20,399
package up these charts

00:32:18,240 --> 00:32:21,600
and we actually then store them in the

00:32:20,399 --> 00:32:23,679
repository

00:32:21,600 --> 00:32:25,200
and then other people can get to them

00:32:23,679 --> 00:32:28,720
and helm allows you

00:32:25,200 --> 00:32:29,120
to actually add charts and references to

00:32:28,720 --> 00:32:31,039
them

00:32:29,120 --> 00:32:32,720
so we might have a stable chart which

00:32:31,039 --> 00:32:35,360
goes out to

00:32:32,720 --> 00:32:36,080
one of the places where store where

00:32:35,360 --> 00:32:40,640
google

00:32:36,080 --> 00:32:43,600
stores some charts we might also have a

00:32:40,640 --> 00:32:45,600
local place here where we have a local

00:32:43,600 --> 00:32:47,519
place on your own machine for example or

00:32:45,600 --> 00:32:49,279
even a company within your company

00:32:47,519 --> 00:32:51,039
you might have your own helm chart where

00:32:49,279 --> 00:32:52,559
you package up applications

00:32:51,039 --> 00:32:54,720
and make them available for other people

00:32:52,559 --> 00:32:55,760
to consume if you're wondering how that

00:32:54,720 --> 00:32:57,679
works

00:32:55,760 --> 00:32:59,519
very quickly we'll just show you if

00:32:57,679 --> 00:33:01,120
normally if i have an application that

00:32:59,519 --> 00:33:03,760
i've developed for kubernetes

00:33:01,120 --> 00:33:04,720
when i'm ready to put it into helm i can

00:33:03,760 --> 00:33:06,880
simply take it

00:33:04,720 --> 00:33:08,559
and turn it into a chart which means i

00:33:06,880 --> 00:33:10,720
extract values out

00:33:08,559 --> 00:33:12,080
i templatize that or you might start

00:33:10,720 --> 00:33:15,440
with an existing chart

00:33:12,080 --> 00:33:17,279
and modify it for your needs i can then

00:33:15,440 --> 00:33:19,279
use the helm package command and it

00:33:17,279 --> 00:33:21,760
compresses it into this single

00:33:19,279 --> 00:33:23,360
compressed file that we can store in a

00:33:21,760 --> 00:33:25,440
helm chart repo

00:33:23,360 --> 00:33:27,279
and a helm repo there are all kinds of

00:33:25,440 --> 00:33:29,600
things there's one called chart museum

00:33:27,279 --> 00:33:30,880
which is a very simple one to to do

00:33:29,600 --> 00:33:32,640
github uh

00:33:30,880 --> 00:33:34,480
has its own place where you can store

00:33:32,640 --> 00:33:37,039
charts there are other ones out there

00:33:34,480 --> 00:33:38,960
there used to be a helm hub a main one

00:33:37,039 --> 00:33:40,720
but they got kind of tired of trying to

00:33:38,960 --> 00:33:42,320
manage that and compare it all so now

00:33:40,720 --> 00:33:44,720
they've kind of gone and said

00:33:42,320 --> 00:33:46,159
everybody do your own your own repos out

00:33:44,720 --> 00:33:48,399
there there are still some

00:33:46,159 --> 00:33:50,080
larger central ones but that package

00:33:48,399 --> 00:33:52,799
then can be packaged up

00:33:50,080 --> 00:33:55,200
and put into a helm repository somebody

00:33:52,799 --> 00:33:57,279
else then could take you that package

00:33:55,200 --> 00:33:58,480
do a helm pool or otherwise get it out

00:33:57,279 --> 00:33:59,760
of there you can also just do like a

00:33:58,480 --> 00:34:01,679
curl command

00:33:59,760 --> 00:34:02,880
and do an install and they could be

00:34:01,679 --> 00:34:05,200
running the applications

00:34:02,880 --> 00:34:07,039
in their kubernetes system and they have

00:34:05,200 --> 00:34:10,159
a release of the chart

00:34:07,039 --> 00:34:12,399
here's some chart repositories here

00:34:10,159 --> 00:34:13,679
um some standard ones there's a

00:34:12,399 --> 00:34:14,960
deprecation notice here where they

00:34:13,679 --> 00:34:16,639
deprecated the main one

00:34:14,960 --> 00:34:18,720
but you can see there's chart museum

00:34:16,639 --> 00:34:21,280
here there is an artifact hub

00:34:18,720 --> 00:34:23,280
out so you can go find helm charts out

00:34:21,280 --> 00:34:24,399
there so you have lots of things in the

00:34:23,280 --> 00:34:26,879
helm itself

00:34:24,399 --> 00:34:27,919
you can connect up to a repo you can add

00:34:26,879 --> 00:34:29,440
a repo

00:34:27,919 --> 00:34:31,200
and give it a reference name like

00:34:29,440 --> 00:34:32,240
calling the stable points to this

00:34:31,200 --> 00:34:35,440
location

00:34:32,240 --> 00:34:39,280
you can search repositories you can

00:34:35,440 --> 00:34:40,800
um add references to it and so on list

00:34:39,280 --> 00:34:43,440
out the repositories

00:34:40,800 --> 00:34:45,679
so you connect up to repositories if

00:34:43,440 --> 00:34:46,399
you're going to get an existing helm

00:34:45,679 --> 00:34:48,560
chart

00:34:46,399 --> 00:34:49,760
that's stored in that then you can grab

00:34:48,560 --> 00:34:51,919
that helm chart

00:34:49,760 --> 00:34:53,200
bring it down and use helm to install it

00:34:51,919 --> 00:34:55,440
into kubernetes

00:34:53,200 --> 00:34:56,879
and get the different applications lots

00:34:55,440 --> 00:34:58,960
of helm operations here

00:34:56,879 --> 00:35:00,839
you can see i won't go through all these

00:34:58,960 --> 00:35:02,079
most common ones you might install a

00:35:00,839 --> 00:35:05,280
chart

00:35:02,079 --> 00:35:06,320
add repos search those kinds of things

00:35:05,280 --> 00:35:07,680
when you're starting out

00:35:06,320 --> 00:35:10,800
but you can see you also have things

00:35:07,680 --> 00:35:11,520
like uninstall upgrade or release and so

00:35:10,800 --> 00:35:13,760
on

00:35:11,520 --> 00:35:15,760
so to give you a visualization of this

00:35:13,760 --> 00:35:17,599
at a kind of a high level

00:35:15,760 --> 00:35:19,359
imagine that we are working with helm

00:35:17,599 --> 00:35:21,920
and we want to install

00:35:19,359 --> 00:35:23,760
a chart so we have a helm install of a

00:35:21,920 --> 00:35:24,560
chart with a particular name say the

00:35:23,760 --> 00:35:26,000
name

00:35:24,560 --> 00:35:27,680
we're going to have for the release in

00:35:26,000 --> 00:35:30,880
there then the helm

00:35:27,680 --> 00:35:32,800
command or the helms client talks to the

00:35:30,880 --> 00:35:34,640
kubernetes api server

00:35:32,800 --> 00:35:36,400
and what that does it says hey take this

00:35:34,640 --> 00:35:38,640
chart and all the pieces in it

00:35:36,400 --> 00:35:40,240
go ahead and get those up and running so

00:35:38,640 --> 00:35:40,800
if the chart has a definition for a

00:35:40,240 --> 00:35:43,119
service

00:35:40,800 --> 00:35:45,359
a deployment an ingress it starts it up

00:35:43,119 --> 00:35:47,520
and running that becomes a release

00:35:45,359 --> 00:35:50,480
within kubernetes

00:35:47,520 --> 00:35:52,640
it becomes release one if i want to get

00:35:50,480 --> 00:35:55,040
information about releases then

00:35:52,640 --> 00:35:56,320
i can do a helm list a helm status

00:35:55,040 --> 00:35:58,880
history and so on

00:35:56,320 --> 00:36:00,480
so somehow commands work with charts and

00:35:58,880 --> 00:36:02,560
some work with releases

00:36:00,480 --> 00:36:03,680
the release is simply an instance of the

00:36:02,560 --> 00:36:06,560
helm chart

00:36:03,680 --> 00:36:07,760
running in kubernetes when we upgrade a

00:36:06,560 --> 00:36:09,520
chart if i want to give if i

00:36:07,760 --> 00:36:11,040
say make a make a change to a chart

00:36:09,520 --> 00:36:14,320
maybe update a value

00:36:11,040 --> 00:36:16,320
maybe i uh add a new piece to it

00:36:14,320 --> 00:36:18,240
maybe update a deployment in that

00:36:16,320 --> 00:36:20,079
scenario if i still got release one

00:36:18,240 --> 00:36:22,000
running here in kubernetes and i say

00:36:20,079 --> 00:36:23,359
i've got a new version of food that i

00:36:22,000 --> 00:36:26,640
want to upgrade

00:36:23,359 --> 00:36:27,040
i talk to the api server and it goes

00:36:26,640 --> 00:36:29,200
through

00:36:27,040 --> 00:36:30,320
and maybe puts out a new version of the

00:36:29,200 --> 00:36:32,720
deployment there

00:36:30,320 --> 00:36:33,839
so i get an automatic upgrade and that

00:36:32,720 --> 00:36:36,160
becomes release

00:36:33,839 --> 00:36:36,880
two of food before we have release one

00:36:36,160 --> 00:36:39,680
now we've done an

00:36:36,880 --> 00:36:41,760
upgrade release two so you can start to

00:36:39,680 --> 00:36:44,320
see how the life cycle pieces work from

00:36:41,760 --> 00:36:46,640
installing to upgrading and so on

00:36:44,320 --> 00:36:48,800
with rollback i can even roll back let's

00:36:46,640 --> 00:36:50,640
say i tried release 2

00:36:48,800 --> 00:36:52,160
it didn't do what i needed to or it

00:36:50,640 --> 00:36:54,320
broke there's a problem

00:36:52,160 --> 00:36:55,680
i want to go back to what i had before

00:36:54,320 --> 00:36:59,040
so i can say helm

00:36:55,680 --> 00:37:00,800
roll back to release one roll back to

00:36:59,040 --> 00:37:02,960
the first release that i had

00:37:00,800 --> 00:37:04,880
in the kubernetes system talks to the

00:37:02,960 --> 00:37:07,599
api server and says okay

00:37:04,880 --> 00:37:08,240
i'm putting deployment a back which is

00:37:07,599 --> 00:37:10,640
what

00:37:08,240 --> 00:37:12,560
now you're at release one all right now

00:37:10,640 --> 00:37:14,880
you're at version one of that thing

00:37:12,560 --> 00:37:17,040
but notice that it's a release three so

00:37:14,880 --> 00:37:20,160
even if you roll back to a previous

00:37:17,040 --> 00:37:21,520
set of content for your release that's

00:37:20,160 --> 00:37:22,000
installed in there everybody's home

00:37:21,520 --> 00:37:24,560
chart

00:37:22,000 --> 00:37:26,079
it still creates a new release version

00:37:24,560 --> 00:37:28,160
in kubernetes

00:37:26,079 --> 00:37:29,440
so we roll back to the one that was the

00:37:28,160 --> 00:37:31,599
original content

00:37:29,440 --> 00:37:34,320
but it still created an updated set of

00:37:31,599 --> 00:37:35,520
things or updated release in kubernetes

00:37:34,320 --> 00:37:37,839
one more quick point that's worth

00:37:35,520 --> 00:37:39,200
mentioning you may this is what we were

00:37:37,839 --> 00:37:40,640
talking about so far

00:37:39,200 --> 00:37:42,560
and the examples we've been using are

00:37:40,640 --> 00:37:44,800
talking about helm three

00:37:42,560 --> 00:37:46,720
helm three is the latest and greatest

00:37:44,800 --> 00:37:49,599
you may still encounter an older version

00:37:46,720 --> 00:37:52,800
of helm called helm2

00:37:49,599 --> 00:37:55,440
uh relied on uh had some problems

00:37:52,800 --> 00:37:58,240
uh put it plain and simple and it had a

00:37:55,440 --> 00:38:00,720
lot of bad press primarily because

00:37:58,240 --> 00:38:02,000
it actually required us to have a thing

00:38:00,720 --> 00:38:04,320
called tiller

00:38:02,000 --> 00:38:06,560
running in the kubernetes cluster and

00:38:04,320 --> 00:38:07,200
tiller was sort of the server side of

00:38:06,560 --> 00:38:09,040
helm

00:38:07,200 --> 00:38:11,280
and so instead of just talking to the

00:38:09,040 --> 00:38:12,480
api server when we did a helm install

00:38:11,280 --> 00:38:14,560
with version 2

00:38:12,480 --> 00:38:16,079
it would talk to tiller tiller would

00:38:14,560 --> 00:38:17,520
talk to the api server

00:38:16,079 --> 00:38:19,280
they might say why is that problematic

00:38:17,520 --> 00:38:20,240
the reason it was problematic was

00:38:19,280 --> 00:38:22,160
because

00:38:20,240 --> 00:38:23,520
tiller this help was created at a time

00:38:22,160 --> 00:38:26,240
before kubernetes

00:38:23,520 --> 00:38:26,640
was really locked down and had uh what

00:38:26,240 --> 00:38:28,800
we call

00:38:26,640 --> 00:38:29,760
our back role-based access controls and

00:38:28,800 --> 00:38:32,160
permissions

00:38:29,760 --> 00:38:33,280
and tiller was very hard when they

00:38:32,160 --> 00:38:35,680
started adding that

00:38:33,280 --> 00:38:37,760
to really lock it down because it had to

00:38:35,680 --> 00:38:39,839
have permissions to do things

00:38:37,760 --> 00:38:42,240
uh to the api server and to make things

00:38:39,839 --> 00:38:43,359
happen so it became really a sore spot

00:38:42,240 --> 00:38:45,839
with a lot of people

00:38:43,359 --> 00:38:47,359
in version three they got rid of tiller

00:38:45,839 --> 00:38:48,880
and just started talking to the api

00:38:47,359 --> 00:38:52,320
server

00:38:48,880 --> 00:38:53,680
but just fyi if you do use version two

00:38:52,320 --> 00:38:55,520
some things are different about it

00:38:53,680 --> 00:38:56,320
there'll be a tiller component and so on

00:38:55,520 --> 00:38:58,000
in there

00:38:56,320 --> 00:38:59,680
really quickly here let's take a look at

00:38:58,000 --> 00:39:02,000
what a traditional

00:38:59,680 --> 00:39:02,800
kubernetes yaml file versus a helm

00:39:02,000 --> 00:39:04,960
template

00:39:02,800 --> 00:39:06,800
so a lot of parts of this may look the

00:39:04,960 --> 00:39:08,960
same if we're looking at this

00:39:06,800 --> 00:39:11,119
we may have the parts in yellow there

00:39:08,960 --> 00:39:13,040
all just the same structure

00:39:11,119 --> 00:39:14,400
we may then have additional things where

00:39:13,040 --> 00:39:16,720
we choose to take

00:39:14,400 --> 00:39:18,079
values that would normally be hard-coded

00:39:16,720 --> 00:39:20,160
put them into

00:39:18,079 --> 00:39:21,359
a place where we can call a function to

00:39:20,160 --> 00:39:24,800
get a value

00:39:21,359 --> 00:39:26,640
or we can get a value out of the values

00:39:24,800 --> 00:39:28,320
file there we can get values

00:39:26,640 --> 00:39:30,160
out of that values yaml file we can

00:39:28,320 --> 00:39:31,599
override it so we can create these

00:39:30,160 --> 00:39:33,200
placeholders in there

00:39:31,599 --> 00:39:34,720
and some things may be built in that's

00:39:33,200 --> 00:39:36,800
what the green part is

00:39:34,720 --> 00:39:38,079
so you can see it's basically it's the

00:39:36,800 --> 00:39:41,119
same structure

00:39:38,079 --> 00:39:42,720
it's just that when we take this helm we

00:39:41,119 --> 00:39:43,599
have the template we fill it in with

00:39:42,720 --> 00:39:45,520
values

00:39:43,599 --> 00:39:47,760
that becomes a file that we can actually

00:39:45,520 --> 00:39:48,640
use to give you an idea of how values

00:39:47,760 --> 00:39:52,240
get resolved

00:39:48,640 --> 00:39:54,720
in helm when we do we have a value

00:39:52,240 --> 00:39:55,520
example file and a deployment yaml file

00:39:54,720 --> 00:39:57,680
here

00:39:55,520 --> 00:39:59,920
let's take a look at the deployment yaml

00:39:57,680 --> 00:40:01,680
so let's take a look at this string

00:39:59,920 --> 00:40:03,200
it says in order to figure out what the

00:40:01,680 --> 00:40:05,440
container port is

00:40:03,200 --> 00:40:08,000
use values deployment ports container

00:40:05,440 --> 00:40:10,560
port so that says go back to the values

00:40:08,000 --> 00:40:13,200
file to put the dot values to start says

00:40:10,560 --> 00:40:13,760
look up the deployment section look up

00:40:13,200 --> 00:40:16,000
then

00:40:13,760 --> 00:40:17,359
the ports section under that look up the

00:40:16,000 --> 00:40:19,760
container port

00:40:17,359 --> 00:40:21,359
and then plug that in so then when i

00:40:19,760 --> 00:40:22,160
actually render this when i actually

00:40:21,359 --> 00:40:25,200
install it

00:40:22,160 --> 00:40:27,839
into kubernetes it comes out as

00:40:25,200 --> 00:40:29,359
this container port in here has that

00:40:27,839 --> 00:40:30,800
3306 value

00:40:29,359 --> 00:40:33,119
so you can see how it's actually

00:40:30,800 --> 00:40:34,400
resolved in there template functions

00:40:33,119 --> 00:40:37,440
kubernetes also

00:40:34,400 --> 00:40:39,520
helm brother also has functions that we

00:40:37,440 --> 00:40:41,440
can do

00:40:39,520 --> 00:40:44,160
there's a set of like 60 functions that

00:40:41,440 --> 00:40:46,480
are provided things like uppercase

00:40:44,160 --> 00:40:48,400
quoting even doing simple kinds of

00:40:46,480 --> 00:40:50,079
arithmetic one of the examples i did

00:40:48,400 --> 00:40:50,960
when i was originally using helm with

00:40:50,079 --> 00:40:53,920
kubernetes

00:40:50,960 --> 00:40:54,319
i had an application and i wanted it to

00:40:53,920 --> 00:40:56,240
be

00:40:54,319 --> 00:40:58,000
able different people to be able to run

00:40:56,240 --> 00:40:58,800
it but i didn't want to hard code a

00:40:58,000 --> 00:41:00,640
starting port

00:40:58,800 --> 00:41:02,880
it needed a certain network port to be

00:41:00,640 --> 00:41:03,839
able to use so i used a helm chart but

00:41:02,880 --> 00:41:06,000
helm chart in there

00:41:03,839 --> 00:41:07,839
and wrote a simple function that would

00:41:06,000 --> 00:41:09,680
always had an offset to it so the

00:41:07,839 --> 00:41:11,280
different parts of it would start up

00:41:09,680 --> 00:41:12,880
that way people could just supply a

00:41:11,280 --> 00:41:14,960
starting port

00:41:12,880 --> 00:41:16,079
on the helm command line and the

00:41:14,960 --> 00:41:17,599
function would add an

00:41:16,079 --> 00:41:19,599
offset to it and start up different

00:41:17,599 --> 00:41:21,280
applications so as long as everybody

00:41:19,599 --> 00:41:22,960
used a different starting port

00:41:21,280 --> 00:41:24,880
the rest of it was handled just to give

00:41:22,960 --> 00:41:27,119
you an idea so you can do some pretty

00:41:24,880 --> 00:41:30,160
sophisticated things with functions

00:41:27,119 --> 00:41:31,040
uh pipelines in helm are not like ci cd

00:41:30,160 --> 00:41:32,880
pipelines

00:41:31,040 --> 00:41:34,160
it's the idea of stringing functions

00:41:32,880 --> 00:41:36,000
together so

00:41:34,160 --> 00:41:38,319
quickly look at the bottom function here

00:41:36,000 --> 00:41:40,720
you can see if i wanted to have

00:41:38,319 --> 00:41:42,560
a name value that i pulled out of there

00:41:40,720 --> 00:41:43,680
i wanted to ensure that it was uppercase

00:41:42,560 --> 00:41:45,280
and it was quoted

00:41:43,680 --> 00:41:46,800
i could say to get the value from the

00:41:45,280 --> 00:41:50,319
value xml file

00:41:46,800 --> 00:41:53,599
of user.name uppercase it and quote it

00:41:50,319 --> 00:41:54,480
just passing it through there all right

00:41:53,599 --> 00:41:57,599
so

00:41:54,480 --> 00:41:59,520
reuse from customization this is fine

00:41:57,599 --> 00:42:01,359
for a lot of use cases it's been around

00:41:59,520 --> 00:42:02,880
for a long time however it does have

00:42:01,359 --> 00:42:05,280
certain drawbacks

00:42:02,880 --> 00:42:06,720
uh when you talk about using helm you're

00:42:05,280 --> 00:42:08,720
really almost getting into kind of a

00:42:06,720 --> 00:42:11,040
kind of programming of things

00:42:08,720 --> 00:42:13,119
and you're really getting into having

00:42:11,040 --> 00:42:14,800
divergence from original source files

00:42:13,119 --> 00:42:16,960
meaning i can't just take those helm

00:42:14,800 --> 00:42:19,359
files and apply them

00:42:16,960 --> 00:42:20,640
i have to do this through helm i have to

00:42:19,359 --> 00:42:22,960
actually use helm

00:42:20,640 --> 00:42:24,960
to interact with kubernetes not just to

00:42:22,960 --> 00:42:26,400
run and i can use uh there's a way just

00:42:24,960 --> 00:42:28,240
to render the files

00:42:26,400 --> 00:42:30,000
but i can't take the files they are

00:42:28,240 --> 00:42:32,880
we're changing the original

00:42:30,000 --> 00:42:33,599
specs and then editing them so this

00:42:32,880 --> 00:42:35,680
becomes

00:42:33,599 --> 00:42:36,800
a challenge i mean the other way to do

00:42:35,680 --> 00:42:39,839
reuse

00:42:36,800 --> 00:42:41,040
is to simply modify the original one and

00:42:39,839 --> 00:42:42,960
i apologize we're going to go a few

00:42:41,040 --> 00:42:44,079
minutes over here talk about customize

00:42:42,960 --> 00:42:46,319
really quickly

00:42:44,079 --> 00:42:48,480
but we'll but another way to do it is

00:42:46,319 --> 00:42:52,000
simply to say

00:42:48,480 --> 00:42:53,440
that we could copy files and we could

00:42:52,000 --> 00:42:57,440
actually go through

00:42:53,440 --> 00:42:59,280
and make copies of them hard code them

00:42:57,440 --> 00:43:01,760
becomes hard to keep up to date and

00:42:59,280 --> 00:43:03,040
stuff but the challenges with helm again

00:43:01,760 --> 00:43:05,200
are that you have to understand the

00:43:03,040 --> 00:43:06,800
templating um it is

00:43:05,200 --> 00:43:08,400
more kind of like programming in some

00:43:06,800 --> 00:43:09,599
respects depending on how complex you

00:43:08,400 --> 00:43:11,200
get

00:43:09,599 --> 00:43:13,359
many things become parameters for

00:43:11,200 --> 00:43:14,960
different users maybe i've got things in

00:43:13,359 --> 00:43:16,720
the values yaml file

00:43:14,960 --> 00:43:18,160
that are important to me you come along

00:43:16,720 --> 00:43:19,920
and say you know what brent

00:43:18,160 --> 00:43:22,160
i need to add this this and this as a

00:43:19,920 --> 00:43:23,599
value in there so eventually your value

00:43:22,160 --> 00:43:26,880
jammels can get pretty

00:43:23,599 --> 00:43:28,400
uh massive on their own and it counters

00:43:26,880 --> 00:43:30,079
a typical ghost of reuse to keep

00:43:28,400 --> 00:43:30,960
differences between the specs small and

00:43:30,079 --> 00:43:33,280
simple

00:43:30,960 --> 00:43:34,640
so another option for this is a tool

00:43:33,280 --> 00:43:37,599
called customize

00:43:34,640 --> 00:43:38,640
and what customize with a k does is it's

00:43:37,599 --> 00:43:42,480
another way

00:43:38,640 --> 00:43:44,800
of creating specialized yaml files or

00:43:42,480 --> 00:43:47,119
manifest to feed into kubernetes

00:43:44,800 --> 00:43:49,839
but it takes a different approach what

00:43:47,119 --> 00:43:52,720
customize does is it takes a

00:43:49,839 --> 00:43:54,160
basic set of yaml files and if it needs

00:43:52,720 --> 00:43:56,240
if you need to make changes

00:43:54,160 --> 00:43:57,200
it creates other things that overlay

00:43:56,240 --> 00:44:00,319
parts of those

00:43:57,200 --> 00:44:02,400
or add on top of it so there's a file

00:44:00,319 --> 00:44:03,200
typically called a customization.yaml

00:44:02,400 --> 00:44:05,520
file

00:44:03,200 --> 00:44:06,400
which is a sort of a metadata file for

00:44:05,520 --> 00:44:09,359
customize

00:44:06,400 --> 00:44:11,440
that says grab these specs over here

00:44:09,359 --> 00:44:14,800
these resources these kubernetes

00:44:11,440 --> 00:44:16,880
specifications make some simple

00:44:14,800 --> 00:44:18,560
modifications but not to the original

00:44:16,880 --> 00:44:21,280
file instead

00:44:18,560 --> 00:44:22,640
produce a new file that is a result of

00:44:21,280 --> 00:44:24,960
the original ones

00:44:22,640 --> 00:44:26,960
plus the modifications so rather than

00:44:24,960 --> 00:44:27,520
having to go and hard code placeholders

00:44:26,960 --> 00:44:29,839
and stuff

00:44:27,520 --> 00:44:31,520
in the original specs what the approach

00:44:29,839 --> 00:44:32,960
that customize takes it says take the

00:44:31,520 --> 00:44:35,760
original files

00:44:32,960 --> 00:44:36,160
let's then layer some other stuff on and

00:44:35,760 --> 00:44:38,160
then

00:44:36,160 --> 00:44:39,200
i'll render a new version of the file

00:44:38,160 --> 00:44:41,040
with that in it

00:44:39,200 --> 00:44:43,599
let me give you the idea here trans it's

00:44:41,040 --> 00:44:45,760
called the idea of transformers

00:44:43,599 --> 00:44:47,119
to be able to do that as a very simple

00:44:45,760 --> 00:44:49,280
example

00:44:47,119 --> 00:44:50,800
suppose that i have in my directory a

00:44:49,280 --> 00:44:54,079
deploy

00:44:50,800 --> 00:44:56,480
file a service file and

00:44:54,079 --> 00:44:58,400
a then customization yaml and that

00:44:56,480 --> 00:44:59,440
customization let's say a deployment

00:44:58,400 --> 00:45:01,200
file

00:44:59,440 --> 00:45:02,960
looks like just a standard thing these

00:45:01,200 --> 00:45:04,400
are things these are files i could take

00:45:02,960 --> 00:45:07,440
and i could apply

00:45:04,400 --> 00:45:08,880
to kubernetes as they are i don't want

00:45:07,440 --> 00:45:10,079
to modify that i still want to be able

00:45:08,880 --> 00:45:14,160
to use them that way

00:45:10,079 --> 00:45:15,839
the customization yaml file then says

00:45:14,160 --> 00:45:17,760
pull in if you look at the bottom part

00:45:15,839 --> 00:45:19,839
here the resources

00:45:17,760 --> 00:45:21,280
pull in the deployment file and the

00:45:19,839 --> 00:45:24,000
service file

00:45:21,280 --> 00:45:24,800
and then apply this thing called common

00:45:24,000 --> 00:45:27,200
labels

00:45:24,800 --> 00:45:28,480
this is one of the customized features

00:45:27,200 --> 00:45:31,200
that says

00:45:28,480 --> 00:45:33,280
i want to put a common label on these so

00:45:31,200 --> 00:45:34,319
what happens then i use the function

00:45:33,280 --> 00:45:36,880
called customize

00:45:34,319 --> 00:45:38,480
build customize build says take the

00:45:36,880 --> 00:45:40,560
original files

00:45:38,480 --> 00:45:41,760
layer on any other changes that i've

00:45:40,560 --> 00:45:44,560
specified

00:45:41,760 --> 00:45:46,000
and then produce an output that i can

00:45:44,560 --> 00:45:47,760
feed into kubernetes

00:45:46,000 --> 00:45:49,280
so it doesn't change the original files

00:45:47,760 --> 00:45:52,880
instead what it does

00:45:49,280 --> 00:45:55,520
it produces new files it produces one

00:45:52,880 --> 00:45:57,119
for example if you look here you'll see

00:45:55,520 --> 00:46:00,560
now that it's added in

00:45:57,119 --> 00:46:01,359
a label into the service definition for

00:46:00,560 --> 00:46:03,839
test

00:46:01,359 --> 00:46:05,280
and a label into the deployment

00:46:03,839 --> 00:46:08,079
definition for tests

00:46:05,280 --> 00:46:10,079
so common labels so you get the idea the

00:46:08,079 --> 00:46:12,560
original files are still there

00:46:10,079 --> 00:46:14,560
we're doing some modifications but we

00:46:12,560 --> 00:46:16,000
are then producing a separate file

00:46:14,560 --> 00:46:17,440
through customized build

00:46:16,000 --> 00:46:19,680
and then we could take this file and

00:46:17,440 --> 00:46:22,000
just do a standard cube cuddle apply

00:46:19,680 --> 00:46:22,800
so customize doesn't manage releases and

00:46:22,000 --> 00:46:25,280
stuff for us

00:46:22,800 --> 00:46:27,040
in there but if you are concerned or if

00:46:25,280 --> 00:46:29,680
you want to

00:46:27,040 --> 00:46:31,839
modify things without having to modify

00:46:29,680 --> 00:46:32,960
the original files and having to keep up

00:46:31,839 --> 00:46:35,200
with

00:46:32,960 --> 00:46:36,800
using templates and all kinds of things

00:46:35,200 --> 00:46:38,480
it can be a good choice

00:46:36,800 --> 00:46:40,880
some common changes you can do you can

00:46:38,480 --> 00:46:43,520
add a label you can add an annotation

00:46:40,880 --> 00:46:45,119
you can add a prefix for example here's

00:46:43,520 --> 00:46:47,040
a common annotation

00:46:45,119 --> 00:46:48,160
annotation just identifying information

00:46:47,040 --> 00:46:51,040
to an object

00:46:48,160 --> 00:46:52,079
we have a customization yaml file here

00:46:51,040 --> 00:46:54,160
which says

00:46:52,079 --> 00:46:56,000
uh com put these annotations build

00:46:54,160 --> 00:46:59,920
latest and branch master

00:46:56,000 --> 00:47:05,280
onto this if i do a customized build

00:46:59,920 --> 00:47:07,440
i get an annotation and i get a

00:47:05,280 --> 00:47:09,280
annotation there with that and then we

00:47:07,440 --> 00:47:11,200
get the prefix here

00:47:09,280 --> 00:47:13,040
it would get it's pretty similar

00:47:11,200 --> 00:47:15,680
customize build in there

00:47:13,040 --> 00:47:16,240
all right so i think we are about out of

00:47:15,680 --> 00:47:19,440
time

00:47:16,240 --> 00:47:22,800
here uh being told that we've uh time

00:47:19,440 --> 00:47:24,720
um let me let's see

00:47:22,800 --> 00:47:27,040
a couple other things about customize

00:47:24,720 --> 00:47:28,960
but we'll skip that for now

00:47:27,040 --> 00:47:30,079
there is certainly more to tell about

00:47:28,960 --> 00:47:32,960
that

00:47:30,079 --> 00:47:34,240
customize we call bases and overlays

00:47:32,960 --> 00:47:36,559
essentially we have

00:47:34,240 --> 00:47:37,520
a set of bases which are the core pieces

00:47:36,559 --> 00:47:39,760
as they are

00:47:37,520 --> 00:47:41,200
and then overlays that we can apply on

00:47:39,760 --> 00:47:43,200
top of them

00:47:41,200 --> 00:47:45,920
and we can do that at a directory level

00:47:43,200 --> 00:47:47,200
as well so i won't get into all of that

00:47:45,920 --> 00:47:49,040
now for the sake of time

00:47:47,200 --> 00:47:51,200
we can also do patches we can patch

00:47:49,040 --> 00:47:53,599
things in there

00:47:51,200 --> 00:47:56,160
and update files that way we can go back

00:47:53,599 --> 00:47:58,800
and find things in the original files

00:47:56,160 --> 00:47:59,520
and then we can actually patch them up

00:47:58,800 --> 00:48:02,720
and produce

00:47:59,520 --> 00:48:04,400
output that way so we have again the

00:48:02,720 --> 00:48:05,599
same idea we're producing things in

00:48:04,400 --> 00:48:06,720
there so i'm just going to quickly go

00:48:05,599 --> 00:48:09,200
through this

00:48:06,720 --> 00:48:11,599
uh you get the idea the customization

00:48:09,200 --> 00:48:12,559
yaml describes kind of customizing we're

00:48:11,599 --> 00:48:14,960
doing to it

00:48:12,559 --> 00:48:16,480
it then the customized build produces

00:48:14,960 --> 00:48:19,040
the file with that

00:48:16,480 --> 00:48:20,079
customize has a lot of features to it

00:48:19,040 --> 00:48:23,440
different things you can

00:48:20,079 --> 00:48:25,280
do and it's also built into kubernetes

00:48:23,440 --> 00:48:26,640
uh at least some of it not always the

00:48:25,280 --> 00:48:29,440
most recent version

00:48:26,640 --> 00:48:31,200
so that's it for helm and customize i

00:48:29,440 --> 00:48:32,000
apologize arranged a little bit short on

00:48:31,200 --> 00:48:35,119
time there

00:48:32,000 --> 00:48:37,119
but i hope you get the basic idea with

00:48:35,119 --> 00:48:39,119
when you start working with kubernetes

00:48:37,119 --> 00:48:40,880
you get into this situation where you

00:48:39,119 --> 00:48:41,839
have a lot of things you're trying to

00:48:40,880 --> 00:48:43,760
manage with

00:48:41,839 --> 00:48:45,280
keeping deployment straight and all that

00:48:43,760 --> 00:48:47,520
and you really do

00:48:45,280 --> 00:48:49,520
need some way to sort of start

00:48:47,520 --> 00:48:49,920
collecting these things up and managing

00:48:49,520 --> 00:48:53,119
them

00:48:49,920 --> 00:48:53,839
as units and automatically customizing

00:48:53,119 --> 00:48:56,880
them

00:48:53,839 --> 00:48:59,599
with a c customizing them either through

00:48:56,880 --> 00:49:01,839
templating with like helm or through the

00:48:59,599 --> 00:49:03,599
customization yaml instructions that you

00:49:01,839 --> 00:49:06,240
have through customize

00:49:03,599 --> 00:49:06,720
there so you can run them in there all

00:49:06,240 --> 00:49:09,760
right

00:49:06,720 --> 00:49:12,559
uh let's make sure let's see if we get

00:49:09,760 --> 00:49:16,319
some questions here

00:49:12,559 --> 00:49:18,640
yes i will make sure uh that we get

00:49:16,319 --> 00:49:20,319
quit that would i share a copy of the uh

00:49:18,640 --> 00:49:23,040
the pdf of the slides

00:49:20,319 --> 00:49:24,400
uh with the uh the open with the all

00:49:23,040 --> 00:49:27,280
things open 101

00:49:24,400 --> 00:49:28,800
or open source 101 uh folks here and

00:49:27,280 --> 00:49:30,880
they usually put them out on slideshare

00:49:28,800 --> 00:49:35,040
i think so we'll do that

00:49:30,880 --> 00:49:39,200
uh let's see any other

00:49:35,040 --> 00:49:42,400
questions coming in have i completely

00:49:39,200 --> 00:49:44,240
um you know as far as i cartoon excuse

00:49:42,400 --> 00:49:46,000
me my brain is full here this is kind of

00:49:44,240 --> 00:49:46,400
a lot to dump on you but i hope that

00:49:46,000 --> 00:49:48,960
that's

00:49:46,400 --> 00:49:51,280
actually uh giving you some information

00:49:48,960 --> 00:49:53,839
any other questions

00:49:51,280 --> 00:49:55,280
yeah that's really helpful i think um i

00:49:53,839 --> 00:49:57,760
don't see

00:49:55,280 --> 00:49:59,200
any more questions though but yeah

00:49:57,760 --> 00:50:00,880
people would want to

00:49:59,200 --> 00:50:02,480
maybe go through the slides again if

00:50:00,880 --> 00:50:05,520
you're going to share with

00:50:02,480 --> 00:50:06,559
yeah absolutely um and i'll just mention

00:50:05,520 --> 00:50:07,839
if you are

00:50:06,559 --> 00:50:10,160
not putting in a plug for this but if

00:50:07,839 --> 00:50:13,280
you are interested there is a

00:50:10,160 --> 00:50:13,599
hands-on helm course i do in o'reilly as

00:50:13,280 --> 00:50:14,559
well

00:50:13,599 --> 00:50:16,000
if you want to learn more of course

00:50:14,559 --> 00:50:23,839
there's lots of other resources out of

00:50:16,000 --> 00:50:23,839

YouTube URL: https://www.youtube.com/watch?v=kYvbVg2zdNY


