Title: Sass: 2020 And Beyond - Hampton Catlin
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Design UI UX Track
Description: 
	Presented by: Hampton Catlin, Veue
Presented at All Things Open 2020 - Design/UI/UX Track

Abstract: Since it's initial release in 2006, Sass has continued to evolve carefully and slowly in a way that has made it a de-facto standard for CSS development. We'll talk about recent changes and feature releases of Sass and how it's implementations will be managed into the future, and give an overview of some powerful features that most Sass developers are unaware of!
Captions: 
	00:00:04,960 --> 00:00:09,599
yeah so i was struggling with what to

00:00:06,560 --> 00:00:12,320
call this talk um because

00:00:09,599 --> 00:00:13,920
um you know it kind of promises a lot

00:00:12,320 --> 00:00:16,720
with the and beyond

00:00:13,920 --> 00:00:18,400
um part but you know i really kind of

00:00:16,720 --> 00:00:19,039
wanted to take some time i hadn't talked

00:00:18,400 --> 00:00:21,199
about

00:00:19,039 --> 00:00:23,199
sas publicly and quite a while honestly

00:00:21,199 --> 00:00:24,160
actually actually and there's been a lot

00:00:23,199 --> 00:00:25,920
of really

00:00:24,160 --> 00:00:27,199
awesome new features that i think the

00:00:25,920 --> 00:00:29,039
majority of the

00:00:27,199 --> 00:00:30,240
community and users don't actually know

00:00:29,039 --> 00:00:33,280
about um

00:00:30,240 --> 00:00:34,399
so if you're super up on everything in

00:00:33,280 --> 00:00:37,680
sas land

00:00:34,399 --> 00:00:39,600
um then actually

00:00:37,680 --> 00:00:41,280
i i really feel like uh a lot of the

00:00:39,600 --> 00:00:42,879
stuff is gonna be new for people but

00:00:41,280 --> 00:00:44,160
maybe if you're really in the repos all

00:00:42,879 --> 00:00:45,120
the time you're aware of some of those

00:00:44,160 --> 00:00:45,920
but i think there's gonna be some really

00:00:45,120 --> 00:00:49,120
interesting stuff

00:00:45,920 --> 00:00:52,640
especially if your company um uses sas

00:00:49,120 --> 00:00:52,960
which um i think a lot of companies do

00:00:52,640 --> 00:00:55,680
now

00:00:52,960 --> 00:00:57,039
all right uh let me introduce myself uh

00:00:55,680 --> 00:01:00,239
my name is hampton londor

00:00:57,039 --> 00:01:02,320
catlin um for my day job i'm ceo

00:01:00,239 --> 00:01:03,680
of a new startup i just founded called

00:01:02,320 --> 00:01:06,240
vue um

00:01:03,680 --> 00:01:07,840
you can't find out all that much about

00:01:06,240 --> 00:01:08,159
it because there isn't a lot that we put

00:01:07,840 --> 00:01:10,640
up

00:01:08,159 --> 00:01:12,880
out there um but you know stay tuned in

00:01:10,640 --> 00:01:15,920
the future i've got a lot to say there

00:01:12,880 --> 00:01:18,400
um i also sort of on the side have

00:01:15,920 --> 00:01:20,240
uh invented a lot of different

00:01:18,400 --> 00:01:23,600
technologies um

00:01:20,240 --> 00:01:24,960
i yeah i created sas a language called

00:01:23,600 --> 00:01:26,320
hamel

00:01:24,960 --> 00:01:29,040
one of the first mobile sites in the

00:01:26,320 --> 00:01:30,640
world uh m.wikipedia so if you use

00:01:29,040 --> 00:01:34,159
wikipedia on your phone

00:01:30,640 --> 00:01:35,280
um iphone games bunch of ruby libraries

00:01:34,159 --> 00:01:38,320
just all sorts of

00:01:35,280 --> 00:01:41,600
random stuff i can't stop myself from

00:01:38,320 --> 00:01:43,439
just making new stuff um

00:01:41,600 --> 00:01:45,119
but my actual job is in you know

00:01:43,439 --> 00:01:47,119
technical leadership

00:01:45,119 --> 00:01:48,720
um so i was just most recently at rent

00:01:47,119 --> 00:01:52,000
the runway uh

00:01:48,720 --> 00:01:53,680
and i did a startup called wordset and i

00:01:52,000 --> 00:01:54,000
was cto of a company called move web

00:01:53,680 --> 00:01:56,159
that did

00:01:54,000 --> 00:01:57,439
a ton of mobile websites for a lot of

00:01:56,159 --> 00:02:00,560
really big companies

00:01:57,439 --> 00:02:03,520
um and yeah so that's about me

00:02:00,560 --> 00:02:05,360
um i'm gonna start with a little bit of

00:02:03,520 --> 00:02:09,119
history about what

00:02:05,360 --> 00:02:10,640
like how sas came to be as a language um

00:02:09,119 --> 00:02:12,560
and if you use it today you're probably

00:02:10,640 --> 00:02:15,280
not aware that it started as this

00:02:12,560 --> 00:02:16,720
uh as a subproject of a language called

00:02:15,280 --> 00:02:20,480
hamel that is a

00:02:16,720 --> 00:02:23,840
sort of very short white space sensitive

00:02:20,480 --> 00:02:26,800
minimalist way to write semantic html

00:02:23,840 --> 00:02:28,560
um and hamill remains pretty popular in

00:02:26,800 --> 00:02:31,680
the rails community

00:02:28,560 --> 00:02:35,200
it's pretty it's gotten ported

00:02:31,680 --> 00:02:37,599
to a lot of different languages but sas

00:02:35,200 --> 00:02:38,319
was its uh kind of little sister and the

00:02:37,599 --> 00:02:40,239
original team

00:02:38,319 --> 00:02:41,840
it was actually the same repository for

00:02:40,239 --> 00:02:45,280
first two years of of sas

00:02:41,840 --> 00:02:47,760
existing um but obviously its younger

00:02:45,280 --> 00:02:51,840
sister has definitely grown up to be

00:02:47,760 --> 00:02:53,760
far bigger um than its older brother um

00:02:51,840 --> 00:02:56,400
and you know the story you know starts

00:02:53,760 --> 00:02:58,640
in 2006 where i was running a small

00:02:56,400 --> 00:03:01,040
development shop and i worked with some

00:02:58,640 --> 00:03:03,200
really great css developers where

00:03:01,040 --> 00:03:04,879
at the time i think it's important to

00:03:03,200 --> 00:03:07,680
kind of mention like

00:03:04,879 --> 00:03:08,640
there weren't preprocessor like babel

00:03:07,680 --> 00:03:10,879
wasn't a thing

00:03:08,640 --> 00:03:13,360
um the idea that there was a process

00:03:10,879 --> 00:03:14,879
that happened to your javascript and css

00:03:13,360 --> 00:03:17,920
before it got to the browser

00:03:14,879 --> 00:03:19,280
even just combining files wasn't popular

00:03:17,920 --> 00:03:21,120
in 2006 uh

00:03:19,280 --> 00:03:22,720
some companies had their own internal

00:03:21,120 --> 00:03:25,519
sort of solution for this

00:03:22,720 --> 00:03:27,120
um but you know bundling minimizing

00:03:25,519 --> 00:03:28,159
there was a couple libraries that did

00:03:27,120 --> 00:03:30,720
that

00:03:28,159 --> 00:03:32,640
but the idea of actually having a build

00:03:30,720 --> 00:03:35,360
pipeline for your web assets

00:03:32,640 --> 00:03:36,239
didn't exist so um sas was definitely

00:03:35,360 --> 00:03:38,959
the first

00:03:36,239 --> 00:03:39,840
technology and actually uh so when i

00:03:38,959 --> 00:03:42,239
first

00:03:39,840 --> 00:03:43,280
was you know promoting sas a lot of

00:03:42,239 --> 00:03:45,360
people

00:03:43,280 --> 00:03:46,480
thought it was for sort of dynamic

00:03:45,360 --> 00:03:48,319
themes they thought it was going to

00:03:46,480 --> 00:03:48,720
replace css in the browser there was

00:03:48,319 --> 00:03:50,159
actually

00:03:48,720 --> 00:03:52,080
something like a javascript

00:03:50,159 --> 00:03:52,560
implementation of of the way the browser

00:03:52,080 --> 00:03:54,000
works

00:03:52,560 --> 00:03:56,159
but we sort of took this like very

00:03:54,000 --> 00:03:58,239
strong design decision that it actually

00:03:56,159 --> 00:04:00,480
generates css and that we don't want to

00:03:58,239 --> 00:04:02,000
mess with css and it's a great standard

00:04:00,480 --> 00:04:03,760
or good enough standard it's gotten much

00:04:02,000 --> 00:04:05,519
better over the years um

00:04:03,760 --> 00:04:07,920
but then you know we want to leave it

00:04:05,519 --> 00:04:10,959
sort of as is and and have our own

00:04:07,920 --> 00:04:13,599
um and you know it's really important to

00:04:10,959 --> 00:04:14,239
technically i i did have the idea for

00:04:13,599 --> 00:04:19,079
this but

00:04:14,239 --> 00:04:22,400
um natalie weisenbaum all credit for

00:04:19,079 --> 00:04:23,440
99.99 of the amazingness that is in sash

00:04:22,400 --> 00:04:26,880
she has been working

00:04:23,440 --> 00:04:30,320
since 2006 so 2006 we're in railsconf

00:04:26,880 --> 00:04:33,360
um and uh she was

00:04:30,320 --> 00:04:35,600
uh get this 16 and came down

00:04:33,360 --> 00:04:36,479
and she'd been the main sort of person

00:04:35,600 --> 00:04:37,840
working on hamel

00:04:36,479 --> 00:04:39,680
and i grabbed her we went to a

00:04:37,840 --> 00:04:41,280
conference room and i we started

00:04:39,680 --> 00:04:43,280
i kind of proposed my idea to do this

00:04:41,280 --> 00:04:47,199
for css and what it would look like

00:04:43,280 --> 00:04:48,320
um and by the time we were done with

00:04:47,199 --> 00:04:50,639
railsconf

00:04:48,320 --> 00:04:51,360
she took a plane back home and then by

00:04:50,639 --> 00:04:53,520
the time

00:04:51,360 --> 00:04:56,320
she landed she'd written the original

00:04:53,520 --> 00:04:59,040
working prototype for sas so um

00:04:56,320 --> 00:04:59,680
and natalie works at google now and is

00:04:59,040 --> 00:05:03,360
full-time

00:04:59,680 --> 00:05:05,199
working on um sas uh as a language

00:05:03,360 --> 00:05:07,520
um sponsored by basically google for

00:05:05,199 --> 00:05:10,960
that so thanks google

00:05:07,520 --> 00:05:13,280
but i also want to say so it's not

00:05:10,960 --> 00:05:14,400
just natalie there's a core team of us

00:05:13,280 --> 00:05:17,199
um then this

00:05:14,400 --> 00:05:18,479
is not even ex like totally everybody

00:05:17,199 --> 00:05:20,800
because this is just who

00:05:18,479 --> 00:05:21,600
kind of the leadership team for the

00:05:20,800 --> 00:05:23,280
language

00:05:21,600 --> 00:05:24,720
each of the sub projects has tons of

00:05:23,280 --> 00:05:26,160
maintainers and different people but

00:05:24,720 --> 00:05:29,360
gina miriam michael

00:05:26,160 --> 00:05:30,560
myself and obviously natalie so it takes

00:05:29,360 --> 00:05:33,840
a village

00:05:30,560 --> 00:05:36,080
um and you know sas like

00:05:33,840 --> 00:05:37,280
i'll certainly say without natalie this

00:05:36,080 --> 00:05:40,080
language would not

00:05:37,280 --> 00:05:41,199
be as popular as it is but we've also

00:05:40,080 --> 00:05:44,400
had to

00:05:41,199 --> 00:05:48,000
pivot a couple times in order to

00:05:44,400 --> 00:05:49,440
keep that true um and so you know even

00:05:48,000 --> 00:05:52,240
originally sas was

00:05:49,440 --> 00:05:54,080
like camel white space sensitive um it

00:05:52,240 --> 00:05:55,120
mostly looked like css we didn't go too

00:05:54,080 --> 00:05:57,759
crazy but

00:05:55,120 --> 00:05:58,960
um it was sort of since it was a sub

00:05:57,759 --> 00:06:02,319
project we wanted to do

00:05:58,960 --> 00:06:03,039
kind of hammel for css and that's how it

00:06:02,319 --> 00:06:05,280
existed for

00:06:03,039 --> 00:06:06,560
quite a while and then we ended up

00:06:05,280 --> 00:06:08,800
moving over

00:06:06,560 --> 00:06:10,400
um you know inspired by some of the

00:06:08,800 --> 00:06:11,120
competition and looking at what was

00:06:10,400 --> 00:06:14,319
happening

00:06:11,120 --> 00:06:17,440
uh to a sort of css compatible

00:06:14,319 --> 00:06:19,440
version or a superset uh syntax uh some

00:06:17,440 --> 00:06:22,800
people get really confused

00:06:19,440 --> 00:06:26,000
with the language here because um

00:06:22,800 --> 00:06:27,840
both these syntaxes are called sas the

00:06:26,000 --> 00:06:29,120
we call one indented sas which is the

00:06:27,840 --> 00:06:31,600
original syntax

00:06:29,120 --> 00:06:32,319
um and the ending is s-css but we don't

00:06:31,600 --> 00:06:33,680
tend to

00:06:32,319 --> 00:06:36,800
it's the same parser it's the same

00:06:33,680 --> 00:06:39,199
language um and that is the primary

00:06:36,800 --> 00:06:40,240
style so uh it can be a little confusing

00:06:39,199 --> 00:06:41,919
like what is sas

00:06:40,240 --> 00:06:43,600
um but tell us when we talk about sounds

00:06:41,919 --> 00:06:44,479
we're actually talking about scss for

00:06:43,600 --> 00:06:48,000
the most part

00:06:44,479 --> 00:06:50,400
um and you know the real

00:06:48,000 --> 00:06:52,639
unlock there was um obviously the code i

00:06:50,400 --> 00:06:54,800
have on the right here is using mix-ins

00:06:52,639 --> 00:06:56,720
but you know when you have a different

00:06:54,800 --> 00:06:57,680
syntax if you work at a small company

00:06:56,720 --> 00:07:01,199
even if it's

00:06:57,680 --> 00:07:02,160
pretty you know small team you basically

00:07:01,199 --> 00:07:03,759
by putting in the

00:07:02,160 --> 00:07:06,000
old syntax we're saying hey we're no

00:07:03,759 --> 00:07:07,919
longer writing css you have to go learn

00:07:06,000 --> 00:07:09,440
you have to go learn something co-worker

00:07:07,919 --> 00:07:11,360
i changed our repo

00:07:09,440 --> 00:07:12,560
if you do it so it's css compatible you

00:07:11,360 --> 00:07:13,680
can basically install it in your

00:07:12,560 --> 00:07:17,120
repository

00:07:13,680 --> 00:07:18,800
and your co-workers can

00:07:17,120 --> 00:07:21,039
use features at will if they want they

00:07:18,800 --> 00:07:23,599
cannot use a single feature if they want

00:07:21,039 --> 00:07:25,520
um and so that like it makes it opt-in

00:07:23,599 --> 00:07:30,000
as a language and that was just

00:07:25,520 --> 00:07:31,919
sort of a super game-changer um

00:07:30,000 --> 00:07:34,160
also you know sas was originally written

00:07:31,919 --> 00:07:34,560
in ruby which is a language i i still

00:07:34,160 --> 00:07:38,319
use

00:07:34,560 --> 00:07:40,639
um and at the time you know we had only

00:07:38,319 --> 00:07:42,080
we were only had more to go so we were

00:07:40,639 --> 00:07:42,720
in the rails community it was growing

00:07:42,080 --> 00:07:45,840
there was

00:07:42,720 --> 00:07:48,160
tons of people and

00:07:45,840 --> 00:07:49,440
you know i think there's a lot of like

00:07:48,160 --> 00:07:51,199
obviously the ruby

00:07:49,440 --> 00:07:53,840
ecosystem isn't as large as it used to

00:07:51,199 --> 00:07:57,280
be um it is still doing really well

00:07:53,840 --> 00:07:59,280
that's a whole other top topic um but

00:07:57,280 --> 00:08:00,479
uh it just you know strategically

00:07:59,280 --> 00:08:02,639
speaking the fact that

00:08:00,479 --> 00:08:04,879
you only like our thing was written in

00:08:02,639 --> 00:08:06,319
ruby so if you're using php it was very

00:08:04,879 --> 00:08:08,000
difficult to use sas and like

00:08:06,319 --> 00:08:09,599
specifically if you wanted to use sas

00:08:08,000 --> 00:08:10,479
and a lot of people did in their php

00:08:09,599 --> 00:08:12,639
projects

00:08:10,479 --> 00:08:14,319
yeah you're you know you're developers

00:08:12,639 --> 00:08:16,560
you're like hey can you configure your

00:08:14,319 --> 00:08:17,840
ruby environment okay it's a gem install

00:08:16,560 --> 00:08:18,240
and they're like what's a gem and you're

00:08:17,840 --> 00:08:21,120
like

00:08:18,240 --> 00:08:21,520
you know it made it really difficult um

00:08:21,120 --> 00:08:25,520
and

00:08:21,520 --> 00:08:28,000
you know shortly after so it was 2012

00:08:25,520 --> 00:08:29,199
when the project was only six years old

00:08:28,000 --> 00:08:32,479
uh

00:08:29,199 --> 00:08:35,279
uh less here's 23 of the market um

00:08:32,479 --> 00:08:37,120
it had it was over 50 of people who were

00:08:35,279 --> 00:08:40,399
using preprocessors and less

00:08:37,120 --> 00:08:41,680
was a actually started as a ruby project

00:08:40,399 --> 00:08:42,479
funny enough and it was supposed to be

00:08:41,680 --> 00:08:45,279
less

00:08:42,479 --> 00:08:46,320
complicated than scss um and they

00:08:45,279 --> 00:08:48,320
pioneered a couple

00:08:46,320 --> 00:08:50,720
things uh the they were the first ones

00:08:48,320 --> 00:08:53,120
to do a css compatible syntax

00:08:50,720 --> 00:08:54,240
and uh also they originally were in ruby

00:08:53,120 --> 00:08:57,680
for a short time

00:08:54,240 --> 00:09:01,440
and then the node ecosystem took off

00:08:57,680 --> 00:09:04,880
and they sort of took off with that um

00:09:01,440 --> 00:09:07,440
and you know at that point like

00:09:04,880 --> 00:09:09,440
why wouldn't you just go use less like

00:09:07,440 --> 00:09:11,279
you everybody had javascript and node

00:09:09,440 --> 00:09:12,560
even a ruby developer will have that on

00:09:11,279 --> 00:09:15,279
their computer so

00:09:12,560 --> 00:09:16,880
um and you know i really don't mean like

00:09:15,279 --> 00:09:17,600
we knew the compatible thing we could

00:09:16,880 --> 00:09:19,360
fix that

00:09:17,600 --> 00:09:21,360
but you know node had taken off and

00:09:19,360 --> 00:09:21,760
their choice of implementing javascript

00:09:21,360 --> 00:09:24,880
was

00:09:21,760 --> 00:09:26,480
was really um smart because it just did

00:09:24,880 --> 00:09:30,240
fit right in with the trend of

00:09:26,480 --> 00:09:32,320
everybody going to node uh around 2012

00:09:30,240 --> 00:09:33,600
or that being the most popular sort of

00:09:32,320 --> 00:09:35,200
language and obviously now like

00:09:33,600 --> 00:09:37,600
there isn't a web framework that's not

00:09:35,200 --> 00:09:40,959
using um some sort of node-based

00:09:37,600 --> 00:09:43,200
compilation pipeline so we could have

00:09:40,959 --> 00:09:46,399
gone and re-implemented into javascript

00:09:43,200 --> 00:09:47,760
but that didn't to me what i wanted was

00:09:46,399 --> 00:09:51,040
i was worried about speed

00:09:47,760 --> 00:09:53,680
and i wanted more portability um so

00:09:51,040 --> 00:09:54,880
i in a side project not officially

00:09:53,680 --> 00:09:58,000
originally

00:09:54,880 --> 00:10:01,360
approved by my uh the rest of the team

00:09:58,000 --> 00:10:04,560
uh started a project called lib sas um

00:10:01,360 --> 00:10:06,720
uh in 2012 to

00:10:04,560 --> 00:10:07,600
basically mimic the ruby library at the

00:10:06,720 --> 00:10:09,279
time um

00:10:07,600 --> 00:10:11,040
and try to build a spec around how

00:10:09,279 --> 00:10:14,399
things function

00:10:11,040 --> 00:10:16,800
and one of the great parts about c

00:10:14,399 --> 00:10:18,240
is that it's facts and por sorry c plus

00:10:16,800 --> 00:10:20,640
it's fast and portable

00:10:18,240 --> 00:10:21,839
um so we could get great compilation

00:10:20,640 --> 00:10:24,720
times and then i knew

00:10:21,839 --> 00:10:26,240
you can embed c plus code into things

00:10:24,720 --> 00:10:28,640
and people never know that there's c

00:10:26,240 --> 00:10:29,279
plus plus code there um and so for

00:10:28,640 --> 00:10:32,320
instance

00:10:29,279 --> 00:10:35,519
uh today if you use node sas which is uh

00:10:32,320 --> 00:10:37,360
by far the most popular um

00:10:35,519 --> 00:10:39,680
version of sat or like sas

00:10:37,360 --> 00:10:42,640
implementation uh

00:10:39,680 --> 00:10:44,560
that or sas c rails is the one that kind

00:10:42,640 --> 00:10:46,320
of replaced the original ruby sas

00:10:44,560 --> 00:10:48,240
both of those are actually wrappers

00:10:46,320 --> 00:10:50,560
around lipsas so a lot of people don't

00:10:48,240 --> 00:10:52,399
even know the name libsas but node sas

00:10:50,560 --> 00:10:53,680
and sassy rails and all the variants if

00:10:52,399 --> 00:10:55,680
you're using python and you're using

00:10:53,680 --> 00:10:58,399
like pi sas

00:10:55,680 --> 00:10:59,760
that one is wrapping lip sass inside so

00:10:58,399 --> 00:11:00,079
it's these guts that we could kind of go

00:10:59,760 --> 00:11:02,240
to

00:11:00,079 --> 00:11:03,519
every community um and that was the sort

00:11:02,240 --> 00:11:05,040
of thing like how do you beat

00:11:03,519 --> 00:11:06,560
going to the largest one right you try

00:11:05,040 --> 00:11:09,440
to go to every single one of them

00:11:06,560 --> 00:11:10,000
um and you know i'll say like i that

00:11:09,440 --> 00:11:12,240
worked

00:11:10,000 --> 00:11:13,040
that that approach worked libsas has

00:11:12,240 --> 00:11:15,920
made

00:11:13,040 --> 00:11:16,640
um i think is you know plus i mean

00:11:15,920 --> 00:11:18,160
obviously the

00:11:16,640 --> 00:11:19,519
the great work natalie and team have

00:11:18,160 --> 00:11:21,120
done on designing the language and

00:11:19,519 --> 00:11:24,880
improving it over the years but

00:11:21,120 --> 00:11:27,680
um you know node sas is sort of

00:11:24,880 --> 00:11:28,399
the standard now um it's kind of crazy

00:11:27,680 --> 00:11:31,200
how

00:11:28,399 --> 00:11:32,800
quickly over the last six years that i

00:11:31,200 --> 00:11:34,959
couldn't actually find i need to

00:11:32,800 --> 00:11:36,000
go to a survey i couldn't find a survey

00:11:34,959 --> 00:11:38,079
um i was just

00:11:36,000 --> 00:11:39,120
you know comparing github files you know

00:11:38,079 --> 00:11:41,920
we're

00:11:39,120 --> 00:11:42,720
three four five six times the number the

00:11:41,920 --> 00:11:45,040
less is

00:11:42,720 --> 00:11:46,560
um and you know no hard they they

00:11:45,040 --> 00:11:47,680
pioneered a lot of great stuff so that's

00:11:46,560 --> 00:11:49,040
not you know i don't

00:11:47,680 --> 00:11:51,279
consider any of this like negative

00:11:49,040 --> 00:11:53,040
competition um

00:11:51,279 --> 00:11:54,480
and uh but yeah like all these big

00:11:53,040 --> 00:11:55,440
companies are now using it which is kind

00:11:54,480 --> 00:11:57,600
of crazy

00:11:55,440 --> 00:11:58,560
um that you know but in 2012 like it

00:11:57,600 --> 00:12:00,079
looked like we were

00:11:58,560 --> 00:12:02,639
going to be you know i don't think if

00:12:00,079 --> 00:12:05,600
we'd me i think we stayed the course

00:12:02,639 --> 00:12:07,519
with just a ruby implementation we i

00:12:05,600 --> 00:12:10,560
wouldn't be here giving this talk

00:12:07,519 --> 00:12:11,440
um but there's some downsides with lip

00:12:10,560 --> 00:12:13,760
sass

00:12:11,440 --> 00:12:14,800
um c plus plus is a notoriously

00:12:13,760 --> 00:12:18,480
difficult language

00:12:14,800 --> 00:12:19,360
to code in and the venn diagram of

00:12:18,480 --> 00:12:22,399
people who

00:12:19,360 --> 00:12:25,040
care about css or css related projects

00:12:22,399 --> 00:12:28,079
and the venn diagram of people who

00:12:25,040 --> 00:12:30,720
enjoy writing c plus as a very small

00:12:28,079 --> 00:12:31,200
overlap specifically like three people

00:12:30,720 --> 00:12:32,720
um

00:12:31,200 --> 00:12:34,639
and so there's very few like we get a

00:12:32,720 --> 00:12:37,680
lot of contributions in a lot of

00:12:34,639 --> 00:12:38,720
the side projects and stuff but node sas

00:12:37,680 --> 00:12:41,440
uh sorry libsas

00:12:38,720 --> 00:12:42,240
is very hard and we've never actually

00:12:41,440 --> 00:12:45,440
had a corporate

00:12:42,240 --> 00:12:48,720
sponsor on it at all so um

00:12:45,440 --> 00:12:49,680
marcel greeter and michael misfood and

00:12:48,720 --> 00:12:52,480
aaron leung

00:12:49,680 --> 00:12:53,360
um they plus some other people i'm sure

00:12:52,480 --> 00:12:54,959
missing but like

00:12:53,360 --> 00:12:56,639
they've done just a lot of really hard

00:12:54,959 --> 00:12:58,880
work that's sort of

00:12:56,639 --> 00:13:00,480
thankless about a project that you don't

00:12:58,880 --> 00:13:04,079
even know the name of because

00:13:00,480 --> 00:13:06,160
uh it's actually behind the scenes um

00:13:04,079 --> 00:13:07,600
and so but you know part of that that it

00:13:06,160 --> 00:13:10,320
being a small team is like

00:13:07,600 --> 00:13:11,120
the new features are just not coming i

00:13:10,320 --> 00:13:12,880
mean like it's

00:13:11,120 --> 00:13:14,320
it is there's a lot of edge cases that

00:13:12,880 --> 00:13:15,519
aren't covered it's very difficult to

00:13:14,320 --> 00:13:18,160
solve all of them

00:13:15,519 --> 00:13:18,800
um the language makes it more difficult

00:13:18,160 --> 00:13:21,200
um

00:13:18,800 --> 00:13:22,560
and you know as such at the moment like

00:13:21,200 --> 00:13:23,279
if you use node sas you're definitely

00:13:22,560 --> 00:13:24,959
not getting

00:13:23,279 --> 00:13:26,480
all of the new stuff which i'll talk a

00:13:24,959 --> 00:13:27,360
little bit later about what your other

00:13:26,480 --> 00:13:28,959
options are

00:13:27,360 --> 00:13:30,720
um so as much as it's been a success

00:13:28,959 --> 00:13:32,160
it's almost a victim of our own success

00:13:30,720 --> 00:13:35,200
because it works it's just

00:13:32,160 --> 00:13:38,079
the downsides of um it being

00:13:35,200 --> 00:13:39,440
very hard to maintain um and probably

00:13:38,079 --> 00:13:40,959
people unless you're

00:13:39,440 --> 00:13:42,560
using it and if it works for you it

00:13:40,959 --> 00:13:43,600
works for you so don't listen to me but

00:13:42,560 --> 00:13:44,959
let me i'm going to talk about some of

00:13:43,600 --> 00:13:48,000
the new features now

00:13:44,959 --> 00:13:50,959
um because dart sass started in 2017

00:13:48,000 --> 00:13:51,680
where natalie uh worked full-time on the

00:13:50,959 --> 00:13:55,040
dart team

00:13:51,680 --> 00:13:57,199
worked on their standard lib um and

00:13:55,040 --> 00:13:58,240
she decided like hey why am i writing in

00:13:57,199 --> 00:14:00,079
ruby

00:13:58,240 --> 00:14:01,279
we're not even like nobody's using this

00:14:00,079 --> 00:14:03,120
implementation

00:14:01,279 --> 00:14:04,959
so she went to her favorite language

00:14:03,120 --> 00:14:08,160
which a plus was dart

00:14:04,959 --> 00:14:11,760
and um you know dart can target

00:14:08,160 --> 00:14:14,959
javascript and many other um

00:14:11,760 --> 00:14:16,800
languages as a compiled target um and so

00:14:14,959 --> 00:14:18,880
sort of this is when google sort of

00:14:16,800 --> 00:14:21,680
after about a year this kind of took on

00:14:18,880 --> 00:14:22,560
building sas in dart as sort of an

00:14:21,680 --> 00:14:25,760
official

00:14:22,560 --> 00:14:27,279
project um not owned by them though so

00:14:25,760 --> 00:14:28,320
not like that we still got it and so

00:14:27,279 --> 00:14:30,240
this is kind of like the timeline of

00:14:28,320 --> 00:14:32,160
when we sort of like shut down ruby

00:14:30,240 --> 00:14:33,360
um development of libsas we came towards

00:14:32,160 --> 00:14:35,680
the end and then dart

00:14:33,360 --> 00:14:36,959
is now the reference implementation for

00:14:35,680 --> 00:14:40,399
new features

00:14:36,959 --> 00:14:43,199
um and i'll point out uh this

00:14:40,399 --> 00:14:45,040
folder um let's be flipping to my actual

00:14:43,199 --> 00:14:46,079
browser um

00:14:45,040 --> 00:14:49,519
these are not actual security

00:14:46,079 --> 00:14:51,920
vulnerabilities it's just the website um

00:14:49,519 --> 00:14:53,680
not the website the compiler um but we

00:14:51,920 --> 00:14:55,360
have proposals here we have like a

00:14:53,680 --> 00:14:56,160
formalized method for how we talk about

00:14:55,360 --> 00:14:58,880
changes

00:14:56,160 --> 00:14:59,440
um so if you are a total sas nerd coming

00:14:58,880 --> 00:15:01,600
here there's

00:14:59,440 --> 00:15:03,040
tons of interesting information on what

00:15:01,600 --> 00:15:05,920
people are thinking about

00:15:03,040 --> 00:15:06,800
um and especially the accepted um stuff

00:15:05,920 --> 00:15:09,760
i learned a ton

00:15:06,800 --> 00:15:11,680
in here um but i'm going to talk about

00:15:09,760 --> 00:15:14,639
um

00:15:11,680 --> 00:15:15,519
some of the features that you might not

00:15:14,639 --> 00:15:17,279
be aware of

00:15:15,519 --> 00:15:19,360
and some of the polish that we've been

00:15:17,279 --> 00:15:21,839
having to do with the language so

00:15:19,360 --> 00:15:23,440
when we first started um we wanted to

00:15:21,839 --> 00:15:26,480
add in math functions so

00:15:23,440 --> 00:15:29,120
something like min where given a list

00:15:26,480 --> 00:15:31,360
um fun fact everything in sas is

00:15:29,120 --> 00:15:34,079
technically a list even a single value

00:15:31,360 --> 00:15:35,839
so it's one of those languages um so

00:15:34,079 --> 00:15:37,519
it's just a fun fact you can use that at

00:15:35,839 --> 00:15:40,720
parties and stuff people think it's

00:15:37,519 --> 00:15:43,120
very interesting but uh the

00:15:40,720 --> 00:15:44,800
men function takes a list and it'll pick

00:15:43,120 --> 00:15:47,600
the lowest value

00:15:44,800 --> 00:15:48,720
and you know we do this at pre-processor

00:15:47,600 --> 00:15:50,399
time so the va

00:15:48,720 --> 00:15:52,160
the point of men it's not you you've

00:15:50,399 --> 00:15:53,759
probably never used it unless you're

00:15:52,160 --> 00:15:55,360
crafting a library or you're

00:15:53,759 --> 00:15:57,279
auto-generating something really fancy

00:15:55,360 --> 00:15:58,160
or looping or doing something

00:15:57,279 --> 00:15:59,600
really interesting but you know we

00:15:58,160 --> 00:16:00,880
wanted to add these powers to the

00:15:59,600 --> 00:16:03,600
preprocessor

00:16:00,880 --> 00:16:04,480
um and so you know here i have an

00:16:03,600 --> 00:16:06,079
example

00:16:04,480 --> 00:16:08,320
given that padding 300 it's going to

00:16:06,079 --> 00:16:11,519
pick 20 will compile into

00:16:08,320 --> 00:16:13,360
20 because min was the sas function we

00:16:11,519 --> 00:16:16,639
put in place

00:16:13,360 --> 00:16:20,000
and then css added a min function

00:16:16,639 --> 00:16:21,920
whoops you know we

00:16:20,000 --> 00:16:23,519
natalie especially works really hard we

00:16:21,920 --> 00:16:25,279
work with the w3c

00:16:23,519 --> 00:16:26,560
directly actually um in their working

00:16:25,279 --> 00:16:28,240
groups a lot of the

00:16:26,560 --> 00:16:30,480
miriam's on a ton of the working groups

00:16:28,240 --> 00:16:31,839
um and to make sure that

00:16:30,480 --> 00:16:33,519
the two are compatible because at this

00:16:31,839 --> 00:16:36,160
point it's you know

00:16:33,519 --> 00:16:37,199
a lot of users basically but you know

00:16:36,160 --> 00:16:39,440
they added min

00:16:37,199 --> 00:16:40,720
and as is the right we were in a name

00:16:39,440 --> 00:16:41,440
space that we probably shouldn't have

00:16:40,720 --> 00:16:44,000
been in

00:16:41,440 --> 00:16:45,120
um and you know this is a question i get

00:16:44,000 --> 00:16:48,000
all the time which is like

00:16:45,120 --> 00:16:48,480
hey css added variables and calculations

00:16:48,000 --> 00:16:51,519
you know

00:16:48,480 --> 00:16:55,600
does this supplant something like sass

00:16:51,519 --> 00:16:58,560
um and the answer is no because they are

00:16:55,600 --> 00:17:00,560
subtle but different things so sas is

00:16:58,560 --> 00:17:02,399
good when you want to generate css

00:17:00,560 --> 00:17:05,679
that's what we're doing

00:17:02,399 --> 00:17:07,520
the existence of variables in css is and

00:17:05,679 --> 00:17:10,000
and especially the min function they're

00:17:07,520 --> 00:17:11,919
fundamentally a little different because

00:17:10,000 --> 00:17:13,120
the min function in css is never

00:17:11,919 --> 00:17:14,720
resolved for you it's

00:17:13,120 --> 00:17:16,640
live calculated you're actually when you

00:17:14,720 --> 00:17:18,079
put min you're putting in a rule

00:17:16,640 --> 00:17:19,520
um you're not doing an imperative

00:17:18,079 --> 00:17:20,640
statement to actually do something right

00:17:19,520 --> 00:17:23,120
then

00:17:20,640 --> 00:17:23,839
so sas says before you get to the

00:17:23,120 --> 00:17:25,839
browser

00:17:23,839 --> 00:17:27,120
and there very well may be you might

00:17:25,839 --> 00:17:30,559
even use men

00:17:27,120 --> 00:17:33,520
inside of a sas men function inside of a

00:17:30,559 --> 00:17:35,120
css min function that's possible i don't

00:17:33,520 --> 00:17:36,559
know what you're doing but

00:17:35,120 --> 00:17:38,480
you might actually want to kind of

00:17:36,559 --> 00:17:40,640
generate out some min values for some

00:17:38,480 --> 00:17:43,679
different classes or something like that

00:17:40,640 --> 00:17:45,360
and that's totally valid css functions

00:17:43,679 --> 00:17:46,480
are actually supposed to be continuously

00:17:45,360 --> 00:17:48,160
evaluated

00:17:46,480 --> 00:17:50,000
they're really much more like rule sets

00:17:48,160 --> 00:17:50,799
than sort of a calculation that you're

00:17:50,000 --> 00:17:53,600
asking

00:17:50,799 --> 00:17:54,320
um so like for instance we have this

00:17:53,600 --> 00:17:56,080
example i

00:17:54,320 --> 00:17:58,880
kind of expanded out the original one

00:17:56,080 --> 00:18:00,960
the first one margin

00:17:58,880 --> 00:18:02,160
we're doing the minimum of 20 pixels and

00:18:00,960 --> 00:18:05,039
300 pixels

00:18:02,160 --> 00:18:06,320
honestly obviously this one isn't a good

00:18:05,039 --> 00:18:06,880
real life example but i'm going to show

00:18:06,320 --> 00:18:08,880
you what

00:18:06,880 --> 00:18:10,559
how sass thinks about this and how we've

00:18:08,880 --> 00:18:11,600
had to have like a little bit of a dance

00:18:10,559 --> 00:18:14,799
with how

00:18:11,600 --> 00:18:17,200
css works um but um

00:18:14,799 --> 00:18:18,720
sorry the second line is saying the

00:18:17,200 --> 00:18:20,960
minimum of 20 pixels

00:18:18,720 --> 00:18:21,760
or a variable that i have that's 300

00:18:20,960 --> 00:18:23,919
pixels

00:18:21,760 --> 00:18:25,200
and then the third one is actually

00:18:23,919 --> 00:18:27,600
something you might

00:18:25,200 --> 00:18:29,679
want to do in css which actually shows

00:18:27,600 --> 00:18:31,520
off what the power of men is in css

00:18:29,679 --> 00:18:35,120
syntax which is that i'm saying

00:18:31,520 --> 00:18:37,919
take 20 of the total height of the page

00:18:35,120 --> 00:18:39,760
and if that is that smaller than the

00:18:37,919 --> 00:18:43,280
current 20 pixels

00:18:39,760 --> 00:18:45,760
um so that will never let

00:18:43,280 --> 00:18:47,200
it get bigger than 20 pixels i don't

00:18:45,760 --> 00:18:50,240
know why you do that but

00:18:47,200 --> 00:18:51,039
um like if you were really small it goes

00:18:50,240 --> 00:18:52,240
smaller

00:18:51,039 --> 00:18:54,799
um and so it's really great for

00:18:52,240 --> 00:18:56,799
responsive designs vh and min

00:18:54,799 --> 00:18:58,720
and css you can do some really great

00:18:56,799 --> 00:19:00,400
responsive fluid designs

00:18:58,720 --> 00:19:01,919
um but the intention there's a little

00:19:00,400 --> 00:19:03,679
different and that last one padding is

00:19:01,919 --> 00:19:06,080
like i said the only one that i think is

00:19:03,679 --> 00:19:07,840
sort of what the whole point of this css

00:19:06,080 --> 00:19:10,400
meant function it's not supposed to be a

00:19:07,840 --> 00:19:12,240
preprocessor or something that you

00:19:10,400 --> 00:19:14,080
know the answer to so that first one is

00:19:12,240 --> 00:19:14,559
a great example of there's no reason to

00:19:14,080 --> 00:19:18,720
really

00:19:14,559 --> 00:19:18,720
do that you should just put 20 pixels

00:19:18,960 --> 00:19:24,080
and then so the output of this is

00:19:20,720 --> 00:19:25,440
actually this is dart size as output um

00:19:24,080 --> 00:19:27,120
the first line we actually just leave

00:19:25,440 --> 00:19:28,880
alone because you didn't

00:19:27,120 --> 00:19:30,720
use anything dynamic in there and so we

00:19:28,880 --> 00:19:32,960
say if you don't want anything dynamic

00:19:30,720 --> 00:19:34,559
you're clearly not trying to use sas now

00:19:32,960 --> 00:19:35,760
it doesn't make a ton of sense but we

00:19:34,559 --> 00:19:37,600
just leave it b

00:19:35,760 --> 00:19:39,120
the second one we see that you're using

00:19:37,600 --> 00:19:40,720
padding and

00:19:39,120 --> 00:19:42,000
there are ways to escape it so this

00:19:40,720 --> 00:19:42,640
wouldn't happen but if you use that

00:19:42,000 --> 00:19:45,600
variable

00:19:42,640 --> 00:19:47,120
just raw we assume okay you're actually

00:19:45,600 --> 00:19:48,400
going to do math here you're asking me

00:19:47,120 --> 00:19:50,080
to do math

00:19:48,400 --> 00:19:52,000
and then in the third example obviously

00:19:50,080 --> 00:19:52,880
there's no variables but we figured out

00:19:52,000 --> 00:19:56,400
that that is

00:19:52,880 --> 00:19:57,760
actually a css function that you're

00:19:56,400 --> 00:19:58,240
looking for because you're using mixed

00:19:57,760 --> 00:20:00,799
units

00:19:58,240 --> 00:20:02,960
is a really good sign because we can't

00:20:00,799 --> 00:20:04,640
do a preprocessor math actually

00:20:02,960 --> 00:20:06,320
if you want to get if if you're a good

00:20:04,640 --> 00:20:07,280
sas nerd you really want to like reading

00:20:06,320 --> 00:20:10,400
the stuff around

00:20:07,280 --> 00:20:12,480
units is you know mind-bendingly

00:20:10,400 --> 00:20:13,600
complicated which are actual fixed units

00:20:12,480 --> 00:20:15,760
which are relative

00:20:13,600 --> 00:20:17,520
and how we can actually deal with them

00:20:15,760 --> 00:20:20,000
um color math too

00:20:17,520 --> 00:20:21,679
it gets really really complicated but we

00:20:20,000 --> 00:20:23,440
hope you don't have to think about it

00:20:21,679 --> 00:20:25,600
i tried to use this example to compile

00:20:23,440 --> 00:20:29,440
it uh on codepen

00:20:25,600 --> 00:20:31,840
but you'll see libsas i believe is what

00:20:29,440 --> 00:20:32,880
chris is using behind the scenes and it

00:20:31,840 --> 00:20:36,080
actually won't let you

00:20:32,880 --> 00:20:38,480
use the proper css min function

00:20:36,080 --> 00:20:39,280
uh which isn't good and a great example

00:20:38,480 --> 00:20:40,880
of why

00:20:39,280 --> 00:20:42,960
we're kind of encouraging people and

00:20:40,880 --> 00:20:44,240
like you know this is i'm sure in the

00:20:42,960 --> 00:20:46,480
backlog of stuff that

00:20:44,240 --> 00:20:48,960
our volunteers are doing the best to do

00:20:46,480 --> 00:20:50,320
their best to fix um

00:20:48,960 --> 00:20:52,159
yeah the line should be perfectly valid

00:20:50,320 --> 00:20:54,480
but it breaks um

00:20:52,159 --> 00:20:56,960
so buyer beware okay let's talk about

00:20:54,480 --> 00:20:58,159
new features that

00:20:56,960 --> 00:20:59,919
because i want to said like a little

00:20:58,159 --> 00:21:00,400
backdrop on a lot of the work a lot of

00:20:59,919 --> 00:21:02,240
those

00:21:00,400 --> 00:21:03,600
rules are around some of the subtleties

00:21:02,240 --> 00:21:04,720
here and trying to get good backwards

00:21:03,600 --> 00:21:08,240
compatibility

00:21:04,720 --> 00:21:09,600
um but uh to kick off sort of the

00:21:08,240 --> 00:21:12,880
biggest thing i'm talking about

00:21:09,600 --> 00:21:14,720
yeah people want import once so uh

00:21:12,880 --> 00:21:16,880
that has been it wasn't something that

00:21:14,720 --> 00:21:19,280
was in a library called compass that was

00:21:16,880 --> 00:21:20,720
very popular early in sas's life but

00:21:19,280 --> 00:21:22,400
doesn't exist in any of the new

00:21:20,720 --> 00:21:23,600
implementations and compass has been

00:21:22,400 --> 00:21:25,840
long deprecated

00:21:23,600 --> 00:21:26,960
but you know the the problem is

00:21:25,840 --> 00:21:30,000
basically that

00:21:26,960 --> 00:21:32,000
import we overrode the meaning of it

00:21:30,000 --> 00:21:34,960
um we make some guesses around what you

00:21:32,000 --> 00:21:37,919
mean when you say add import

00:21:34,960 --> 00:21:39,840
and it's basically what i'm going to

00:21:37,919 --> 00:21:41,919
call it textual include so

00:21:39,840 --> 00:21:43,440
you could copy and paste the files every

00:21:41,919 --> 00:21:45,120
time you see an import until it's just

00:21:43,440 --> 00:21:48,240
one giant file

00:21:45,120 --> 00:21:50,159
and then we kind of compile on that so

00:21:48,240 --> 00:21:51,840
order really matters and you absolutely

00:21:50,159 --> 00:21:55,360
can do it twice

00:21:51,840 --> 00:21:57,200
so here if i were to import margins in

00:21:55,360 --> 00:21:59,919
both my header and footer file

00:21:57,200 --> 00:22:01,120
i will end up with duplicated uh css

00:21:59,919 --> 00:22:04,640
output if margins

00:22:01,120 --> 00:22:07,679
is generating css um and like

00:22:04,640 --> 00:22:08,559
this doesn't happen a ton a ton but you

00:22:07,679 --> 00:22:09,120
know it's something that people are just

00:22:08,559 --> 00:22:10,799
like hey

00:22:09,120 --> 00:22:12,480
look i definitely only want this one's

00:22:10,799 --> 00:22:13,440
like it's a header i only want it once

00:22:12,480 --> 00:22:16,960
like held me out

00:22:13,440 --> 00:22:19,039
um and you know natalie

00:22:16,960 --> 00:22:20,400
uh there's a thread of an open issue

00:22:19,039 --> 00:22:23,520
that had been opened for

00:22:20,400 --> 00:22:24,880
i mean my gosh seven years um of

00:22:23,520 --> 00:22:27,200
us just saying we're not gonna put in

00:22:24,880 --> 00:22:28,720
that feature and it's because we've been

00:22:27,200 --> 00:22:29,039
working on and natalie have been working

00:22:28,720 --> 00:22:32,320
on

00:22:29,039 --> 00:22:33,760
designing a module system because import

00:22:32,320 --> 00:22:36,880
once while

00:22:33,760 --> 00:22:38,880
it's kind of a hack it the order of

00:22:36,880 --> 00:22:40,559
inclusion starts to matter where things

00:22:38,880 --> 00:22:41,919
are placed and then we need

00:22:40,559 --> 00:22:43,760
deterministic rules on

00:22:41,919 --> 00:22:45,280
when all this happens and it's just part

00:22:43,760 --> 00:22:46,159
of a bigger design problem that we were

00:22:45,280 --> 00:22:48,960
facing

00:22:46,159 --> 00:22:49,760
um and so uh let me talk about how we

00:22:48,960 --> 00:22:52,320
solved it

00:22:49,760 --> 00:22:54,080
because i am thrilled i think this is

00:22:52,320 --> 00:22:56,799
natalie's design and i think it's

00:22:54,080 --> 00:22:57,600
one of the best module systems out there

00:22:56,799 --> 00:23:02,159
so

00:22:57,600 --> 00:23:03,520
um yeah imports since they're textual

00:23:02,159 --> 00:23:05,679
and this is probably the way a lot of

00:23:03,520 --> 00:23:09,280
your code works out there um

00:23:05,679 --> 00:23:11,520
is that the colors like you would import

00:23:09,280 --> 00:23:14,080
variables first files with variables or

00:23:11,520 --> 00:23:15,440
settings or mixins and then you kind of

00:23:14,080 --> 00:23:16,640
get to your files that are actually

00:23:15,440 --> 00:23:18,240
producing content

00:23:16,640 --> 00:23:20,400
and you can see here that footer is

00:23:18,240 --> 00:23:23,520
actually um

00:23:20,400 --> 00:23:26,720
we can do pointer that's kind of cool um

00:23:23,520 --> 00:23:28,320
primary is from here goes up

00:23:26,720 --> 00:23:29,600
through the include and then comes back

00:23:28,320 --> 00:23:30,559
down so if you want to figure out where

00:23:29,600 --> 00:23:32,080
primary is

00:23:30,559 --> 00:23:34,000
it could be very difficult and there

00:23:32,080 --> 00:23:35,039
might be multiple files if another

00:23:34,000 --> 00:23:37,280
import happened

00:23:35,039 --> 00:23:38,799
somewhere in between that used a primary

00:23:37,280 --> 00:23:40,320
set of variable called primary it's a

00:23:38,799 --> 00:23:42,080
global scope so

00:23:40,320 --> 00:23:44,240
you could have all sorts of terrible

00:23:42,080 --> 00:23:46,960
side effects

00:23:44,240 --> 00:23:47,520
and you know usually we we solve this by

00:23:46,960 --> 00:23:49,200
using

00:23:47,520 --> 00:23:51,200
you know variable names that are longer

00:23:49,200 --> 00:23:54,400
or harder to guess or

00:23:51,200 --> 00:23:56,240
scope somehow but you know this makes

00:23:54,400 --> 00:23:58,240
optimization very difficult too because

00:23:56,240 --> 00:24:01,760
every time i'm evaluating footer

00:23:58,240 --> 00:24:02,320
i actually need to keep in memory every

00:24:01,760 --> 00:24:04,080
single

00:24:02,320 --> 00:24:05,840
variable in mixin that has ever been

00:24:04,080 --> 00:24:07,760
seen in the project so for very large

00:24:05,840 --> 00:24:09,120
projects this means optimization can be

00:24:07,760 --> 00:24:10,400
very difficult because we have to

00:24:09,120 --> 00:24:12,000
evaluate as if

00:24:10,400 --> 00:24:13,600
it is all in one place or it's much

00:24:12,000 --> 00:24:15,200
easier to evaluate hey i know what i

00:24:13,600 --> 00:24:16,960
need to know and i can just focus on

00:24:15,200 --> 00:24:19,919
that

00:24:16,960 --> 00:24:21,760
so let's talk about the modules um so

00:24:19,919 --> 00:24:24,159
here's uh

00:24:21,760 --> 00:24:25,120
an example so i make a file called color

00:24:24,159 --> 00:24:27,679
scss

00:24:25,120 --> 00:24:28,559
um we automatically you can always start

00:24:27,679 --> 00:24:29,679
with an underscore and we'll

00:24:28,559 --> 00:24:31,520
automatically

00:24:29,679 --> 00:24:32,880
you can reference them that way to say

00:24:31,520 --> 00:24:35,039
that this is a file that i'm not

00:24:32,880 --> 00:24:37,760
intending to have textual output

00:24:35,039 --> 00:24:38,400
um and then here in footer we say at use

00:24:37,760 --> 00:24:40,960
color

00:24:38,400 --> 00:24:41,840
now that does a couple things um i'll

00:24:40,960 --> 00:24:43,520
note it

00:24:41,840 --> 00:24:46,080
if there was textual content it

00:24:43,520 --> 00:24:48,480
functions as an import once um

00:24:46,080 --> 00:24:49,919
but what it also does is any variables

00:24:48,480 --> 00:24:52,960
or

00:24:49,919 --> 00:24:53,279
mix-ins inside of that file are brought

00:24:52,960 --> 00:24:55,760
in

00:24:53,279 --> 00:24:57,279
under a prefix so i have declared that i

00:24:55,760 --> 00:24:58,840
want color to come in

00:24:57,279 --> 00:25:00,960
i'm going to use color and then

00:24:58,840 --> 00:25:04,000
color.primary

00:25:00,960 --> 00:25:06,640
is automatically there um

00:25:04,000 --> 00:25:07,840
and i personally love this because my

00:25:06,640 --> 00:25:08,480
code i feel like it's so much more

00:25:07,840 --> 00:25:10,720
readable

00:25:08,480 --> 00:25:12,640
like this where before all my things

00:25:10,720 --> 00:25:14,240
would be dollar sign color primary or

00:25:12,640 --> 00:25:16,080
primary dash color

00:25:14,240 --> 00:25:17,679
but now there's sort of like nice

00:25:16,080 --> 00:25:19,679
textural elements to it

00:25:17,679 --> 00:25:21,760
also if you use a good editor the

00:25:19,679 --> 00:25:24,559
autocomplete will work perfect

00:25:21,760 --> 00:25:25,760
and it's very easy for ides to know what

00:25:24,559 --> 00:25:26,960
color has in it

00:25:25,760 --> 00:25:29,840
so you don't have to open the file

00:25:26,960 --> 00:25:31,600
yourself it'll auto-complete um

00:25:29,840 --> 00:25:33,520
and so like but just here's an example

00:25:31,600 --> 00:25:36,960
of the structure is that you know index

00:25:33,520 --> 00:25:39,360
would use footer instead of import

00:25:36,960 --> 00:25:40,320
and this because this isn't exporting

00:25:39,360 --> 00:25:41,760
anything this has no

00:25:40,320 --> 00:25:43,679
side effects but it will actually

00:25:41,760 --> 00:25:47,200
include the body here

00:25:43,679 --> 00:25:47,600
um and then oh i i'm gonna put a use

00:25:47,200 --> 00:25:49,440
here

00:25:47,600 --> 00:25:51,200
they should say at use color and then i

00:25:49,440 --> 00:25:52,880
can use primary so

00:25:51,200 --> 00:25:55,120
you're actually referencing back to

00:25:52,880 --> 00:25:57,120
files but since they don't have side

00:25:55,120 --> 00:26:00,480
effects that's okay and actually as much

00:25:57,120 --> 00:26:02,400
as much better for our memory use um

00:26:00,480 --> 00:26:03,840
and here's a couple other ways to use

00:26:02,400 --> 00:26:06,960
that use function

00:26:03,840 --> 00:26:07,760
um you can put use as palette for

00:26:06,960 --> 00:26:10,400
instance

00:26:07,760 --> 00:26:11,679
and then that overrides the automatic

00:26:10,400 --> 00:26:13,120
naming so if you don't want to call it

00:26:11,679 --> 00:26:14,240
color in your particular file or if you

00:26:13,120 --> 00:26:16,159
have a lot of code in there

00:26:14,240 --> 00:26:17,520
you can say as palette this is very

00:26:16,159 --> 00:26:21,520
similar to

00:26:17,520 --> 00:26:23,840
es6 imports if you've used javascript

00:26:21,520 --> 00:26:25,039
there's also use as star and what

00:26:23,840 --> 00:26:27,679
that'll do is that will

00:26:25,039 --> 00:26:29,440
populate your kind of global name space

00:26:27,679 --> 00:26:30,559
temporarily but only for this file

00:26:29,440 --> 00:26:33,120
because you're saying hey

00:26:30,559 --> 00:26:33,600
i want to bring this thing in like let

00:26:33,120 --> 00:26:35,200
me like

00:26:33,600 --> 00:26:37,440
i'm bringing it but i'm doing this on

00:26:35,200 --> 00:26:38,320
purpose so this you can for backwards

00:26:37,440 --> 00:26:40,320
compatibility

00:26:38,320 --> 00:26:42,320
um if you don't want to change your code

00:26:40,320 --> 00:26:43,919
at all and change your variable names

00:26:42,320 --> 00:26:45,919
um this will make it so you can

00:26:43,919 --> 00:26:47,760
basically import on any file

00:26:45,919 --> 00:26:49,279
um and this will functionally kind of

00:26:47,760 --> 00:26:52,000
act like before so if you had

00:26:49,279 --> 00:26:53,760
dollar sign color dash primary um this

00:26:52,000 --> 00:26:55,520
will work just fine

00:26:53,760 --> 00:26:57,360
but we don't really like this is

00:26:55,520 --> 00:26:59,200
definitely how i

00:26:57,360 --> 00:27:00,480
and the team think you should be

00:26:59,200 --> 00:27:02,240
probably writing your code

00:27:00,480 --> 00:27:04,000
um so it's a little more logical and and

00:27:02,240 --> 00:27:07,919
semantic in its naming

00:27:04,000 --> 00:27:08,799
um so here's uh oh yeah this is an

00:27:07,919 --> 00:27:12,799
example from

00:27:08,799 --> 00:27:16,080
vue my company uh we we use sas surprise

00:27:12,799 --> 00:27:17,279
um uh you if you're css experts out

00:27:16,080 --> 00:27:19,039
there i'm sure you're all judging me i'm

00:27:17,279 --> 00:27:22,000
sure i did something horrible here but

00:27:19,039 --> 00:27:23,039
um this is i have a font file and a

00:27:22,000 --> 00:27:26,080
color file

00:27:23,039 --> 00:27:27,840
and so font is ninito and the colors i

00:27:26,080 --> 00:27:28,559
have all the auto prefixes so this is

00:27:27,840 --> 00:27:30,480
just what our

00:27:28,559 --> 00:27:32,880
layout uh or i think it's the global

00:27:30,480 --> 00:27:34,720
file um what it does to set some

00:27:32,880 --> 00:27:37,200
standards so like this

00:27:34,720 --> 00:27:38,480
we're it's used in production um all

00:27:37,200 --> 00:27:41,919
over the place

00:27:38,480 --> 00:27:43,919
um and yeah it's

00:27:41,919 --> 00:27:45,520
just to mention it it is basically also

00:27:43,919 --> 00:27:48,720
import once uh so

00:27:45,520 --> 00:27:50,320
you got you got your import once um

00:27:48,720 --> 00:27:52,080
we talk a little bit about forward which

00:27:50,320 --> 00:27:54,240
is something else it's a little more

00:27:52,080 --> 00:27:55,919
edge casey but it's a nice superpower

00:27:54,240 --> 00:27:59,039
that we added in

00:27:55,919 --> 00:28:02,240
forward will when

00:27:59,039 --> 00:28:07,120
your file uses forward anybody who

00:28:02,240 --> 00:28:09,840
uses your file um will get

00:28:07,120 --> 00:28:10,640
values sent to them so for instance like

00:28:09,840 --> 00:28:13,279
let's say i just have

00:28:10,640 --> 00:28:14,880
one big utils file and i don't like to

00:28:13,279 --> 00:28:16,399
handle imports for some reason or maybe

00:28:14,880 --> 00:28:18,399
this is a library there's a lot of these

00:28:16,399 --> 00:28:20,480
are very useful for libraries

00:28:18,399 --> 00:28:21,440
and if i forward color that means

00:28:20,480 --> 00:28:23,960
anytime anybody

00:28:21,440 --> 00:28:25,840
uses utils then they'll get

00:28:23,960 --> 00:28:28,559
utils.primary

00:28:25,840 --> 00:28:29,120
because that was from our original uh

00:28:28,559 --> 00:28:32,159
color

00:28:29,120 --> 00:28:32,640
file um so sort of utils is getting all

00:28:32,159 --> 00:28:34,240
these

00:28:32,640 --> 00:28:35,919
features forwarded on it or sorry

00:28:34,240 --> 00:28:39,200
forwarded on to the next

00:28:35,919 --> 00:28:42,640
um caller and

00:28:39,200 --> 00:28:45,679
i if you i don't love that pattern

00:28:42,640 --> 00:28:48,159
um i personally am not as convinced

00:28:45,679 --> 00:28:49,679
i'm sure there's some good use cases but

00:28:48,159 --> 00:28:50,960
i'm going to say if you want to do this

00:28:49,679 --> 00:28:53,039
and make one utils

00:28:50,960 --> 00:28:55,600
use this feature there's an auto prefix

00:28:53,039 --> 00:28:58,240
feature so you can say forward color as

00:28:55,600 --> 00:29:00,880
color star and this will basically make

00:28:58,240 --> 00:29:03,919
every variable and mix in that came from

00:29:00,880 --> 00:29:03,919
that original color

00:29:04,159 --> 00:29:07,760
sorry color module it'll prefix it so at

00:29:06,559 --> 00:29:09,919
least you're not

00:29:07,760 --> 00:29:11,200
just having like primary and the namings

00:29:09,919 --> 00:29:12,159
kind of get off at least that's a little

00:29:11,200 --> 00:29:15,600
nicer then so i

00:29:12,159 --> 00:29:17,600
highly recommend that um and

00:29:15,600 --> 00:29:18,799
uh also i'm gonna mention use with we

00:29:17,600 --> 00:29:20,320
have a with argument

00:29:18,799 --> 00:29:22,000
that's possible on use it's also

00:29:20,320 --> 00:29:23,600
possible in forward um

00:29:22,000 --> 00:29:26,159
i think i don't know if that's released

00:29:23,600 --> 00:29:27,919
yet but it was recently um

00:29:26,159 --> 00:29:31,440
sort of approved is uh one of those

00:29:27,919 --> 00:29:33,120
specs but here's how it works so

00:29:31,440 --> 00:29:34,960
this is totally contrived you should

00:29:33,120 --> 00:29:38,080
never do this in production but

00:29:34,960 --> 00:29:39,520
once again good for libraries um i set a

00:29:38,080 --> 00:29:42,080
value here for color

00:29:39,520 --> 00:29:43,440
and i say color and get it from the my

00:29:42,080 --> 00:29:45,679
colors file so i'm

00:29:43,440 --> 00:29:47,600
there's a button scss file and then i

00:29:45,679 --> 00:29:50,559
annotate it with this default

00:29:47,600 --> 00:29:52,399
note on the end by doing that i'm

00:29:50,559 --> 00:29:55,520
basically declaring an api

00:29:52,399 --> 00:29:56,320
i'm saying this button module you can

00:29:55,520 --> 00:29:59,200
override

00:29:56,320 --> 00:30:00,880
color if you like color um and so here i

00:29:59,200 --> 00:30:02,720
use that variable so we're sort of

00:30:00,880 --> 00:30:04,559
building the ability to customize

00:30:02,720 --> 00:30:08,080
something in this module

00:30:04,559 --> 00:30:11,440
um so this is how you would

00:30:08,080 --> 00:30:13,520
use that um use button with

00:30:11,440 --> 00:30:15,360
and then color blue so now what'll

00:30:13,520 --> 00:30:17,039
happen is this file right here will

00:30:15,360 --> 00:30:20,399
actually generate css

00:30:17,039 --> 00:30:24,159
with the color blue now

00:30:20,399 --> 00:30:26,320
super big note here this

00:30:24,159 --> 00:30:28,159
what i just wrote with button uh would

00:30:26,320 --> 00:30:30,320
be much better as a mix-in

00:30:28,159 --> 00:30:32,159
uh the downside with this and why i said

00:30:30,320 --> 00:30:33,760
it's only really for libraries or

00:30:32,159 --> 00:30:37,039
backwards compatibility

00:30:33,760 --> 00:30:37,919
um is like sorry because there's a lot

00:30:37,039 --> 00:30:40,399
of libraries that

00:30:37,919 --> 00:30:41,760
have you set variables ahead of time um

00:30:40,399 --> 00:30:44,960
but

00:30:41,760 --> 00:30:46,720
uh you can only call this once

00:30:44,960 --> 00:30:48,240
so if you want more than just the color

00:30:46,720 --> 00:30:50,320
blue like

00:30:48,240 --> 00:30:52,080
you're out of luck you can't do a red

00:30:50,320 --> 00:30:52,559
after this because this is import one

00:30:52,080 --> 00:30:54,399
space

00:30:52,559 --> 00:30:56,399
you know functionally and this isn't

00:30:54,399 --> 00:30:57,919
meant to be called over and over

00:30:56,399 --> 00:30:59,679
mixins will do that for you we've had

00:30:57,919 --> 00:31:00,880
them forever go learn about nixon's if

00:30:59,679 --> 00:31:02,159
you don't know about mixins

00:31:00,880 --> 00:31:04,640
that's something you can do to sort of

00:31:02,159 --> 00:31:06,399
just grab some of these values and

00:31:04,640 --> 00:31:10,159
override them or do

00:31:06,399 --> 00:31:12,880
custom functions so custom selectors

00:31:10,159 --> 00:31:13,360
uh so that's definitely the better

00:31:12,880 --> 00:31:14,880
approach

00:31:13,360 --> 00:31:16,480
but here it's just to demonstrate the

00:31:14,880 --> 00:31:17,200
idea that if you're thinking about a

00:31:16,480 --> 00:31:19,200
theming

00:31:17,200 --> 00:31:20,399
or like let's think a library like what

00:31:19,200 --> 00:31:22,880
if this was actually a

00:31:20,399 --> 00:31:24,640
button library i was building um and i

00:31:22,880 --> 00:31:25,519
might change the total width i want that

00:31:24,640 --> 00:31:27,279
on every button

00:31:25,519 --> 00:31:29,039
ever and it's a full thematic change

00:31:27,279 --> 00:31:30,720
that i really truly want everywhere

00:31:29,039 --> 00:31:32,559
that's when this stuff is really super

00:31:30,720 --> 00:31:33,919
useful and very powerful because

00:31:32,559 --> 00:31:36,159
you know unlike before it was sort of

00:31:33,919 --> 00:31:37,679
implicit with the variable global scope

00:31:36,159 --> 00:31:39,200
that you were overwriting certain things

00:31:37,679 --> 00:31:39,600
and that's just not very scalable and

00:31:39,200 --> 00:31:41,200
here

00:31:39,600 --> 00:31:42,960
you can be really clear about what your

00:31:41,200 --> 00:31:45,840
library makes available

00:31:42,960 --> 00:31:46,640
um once again i mean there's so much

00:31:45,840 --> 00:31:49,919
more going on

00:31:46,640 --> 00:31:51,679
especially if you're into colors um

00:31:49,919 --> 00:31:53,760
and and figure out a lot of those edge

00:31:51,679 --> 00:31:56,399
cases with the new features coming out

00:31:53,760 --> 00:31:56,880
in css to make sure that dance continues

00:31:56,399 --> 00:32:01,360
there's just

00:31:56,880 --> 00:32:02,880
absolutely a ton to learn um and

00:32:01,360 --> 00:32:04,159
you know sort of the question of like

00:32:02,880 --> 00:32:05,600
what's next and i've sort of been

00:32:04,159 --> 00:32:07,200
alluding to this i mean

00:32:05,600 --> 00:32:09,519
obviously there's just continuing to

00:32:07,200 --> 00:32:11,840
polish the language but um

00:32:09,519 --> 00:32:13,200
the features are that i just talked

00:32:11,840 --> 00:32:15,200
about um

00:32:13,200 --> 00:32:17,039
and the well-thought-through way that it

00:32:15,200 --> 00:32:20,480
reacts to some of those edge cases are

00:32:17,039 --> 00:32:22,080
only really covered in dart sass

00:32:20,480 --> 00:32:24,399
obviously if you're using something in

00:32:22,080 --> 00:32:25,600
the dart ecosystem

00:32:24,399 --> 00:32:28,159
you're probably already using this

00:32:25,600 --> 00:32:29,919
because it's the easier way to do things

00:32:28,159 --> 00:32:31,440
um but most of us i think most the

00:32:29,919 --> 00:32:33,600
industry at this point are sort of using

00:32:31,440 --> 00:32:36,000
a node.js

00:32:33,600 --> 00:32:36,960
webpack base build maybe grant maybe

00:32:36,000 --> 00:32:41,519
something else but like

00:32:36,960 --> 00:32:45,279
you're kind of in the npm uh universe

00:32:41,519 --> 00:32:48,159
and like the issue

00:32:45,279 --> 00:32:48,880
it is dark test is available to node

00:32:48,159 --> 00:32:50,559
people

00:32:48,880 --> 00:32:53,440
so actually i'm just going to skip to

00:32:50,559 --> 00:32:53,760
this if in your package.json file you

00:32:53,440 --> 00:32:55,919
have

00:32:53,760 --> 00:32:57,519
node sas you can just delete the word

00:32:55,919 --> 00:33:00,640
node and just put in sas

00:32:57,519 --> 00:33:01,519
and you will get a version that has all

00:33:00,640 --> 00:33:03,919
the features i

00:33:01,519 --> 00:33:06,159
just talked about the downside is it's a

00:33:03,919 --> 00:33:08,640
compilation of the dart code

00:33:06,159 --> 00:33:09,600
into javascript and it is not as

00:33:08,640 --> 00:33:12,320
efficient

00:33:09,600 --> 00:33:14,080
it is slower than so node sas is

00:33:12,320 --> 00:33:15,039
actually slower than dart size dart sas

00:33:14,080 --> 00:33:17,200
natively compiled

00:33:15,039 --> 00:33:18,480
is faster than node sas and has all the

00:33:17,200 --> 00:33:21,200
nice features

00:33:18,480 --> 00:33:21,760
so good work dart but when you transpile

00:33:21,200 --> 00:33:23,519
dart

00:33:21,760 --> 00:33:24,880
into i know who started this transpiler

00:33:23,519 --> 00:33:25,919
thing when you transpile dart into

00:33:24,880 --> 00:33:28,080
javascript

00:33:25,919 --> 00:33:29,760
uh the performance comes down a lot like

00:33:28,080 --> 00:33:32,559
significantly about five times

00:33:29,760 --> 00:33:33,039
slower um based on some recent tests i

00:33:32,559 --> 00:33:36,559
saw

00:33:33,039 --> 00:33:38,480
um we are going to address that uh

00:33:36,559 --> 00:33:40,399
dart has added on a lot of features to

00:33:38,480 --> 00:33:41,679
make it embeddable just like how c plus

00:33:40,399 --> 00:33:44,640
plus is embeddable

00:33:41,679 --> 00:33:45,360
um so we will be moving to an embedded

00:33:44,640 --> 00:33:48,480
dart

00:33:45,360 --> 00:33:50,960
um sort of based version

00:33:48,480 --> 00:33:52,080
and if you have a very large like here's

00:33:50,960 --> 00:33:56,000
the way you should make the decision

00:33:52,080 --> 00:34:00,159
for your particular point if

00:33:56,000 --> 00:34:03,279
you have a very large single css

00:34:00,159 --> 00:34:06,480
you know output file so you're just

00:34:03,279 --> 00:34:09,040
throwing a ton of stuff in um

00:34:06,480 --> 00:34:11,280
it takes a while to compile as is uh i

00:34:09,040 --> 00:34:12,480
would not recommend changing to dart s

00:34:11,280 --> 00:34:15,280
uh you're gonna have to wait for those

00:34:12,480 --> 00:34:18,000
features um if you're using sas

00:34:15,280 --> 00:34:20,879
like where you know like let's say react

00:34:18,000 --> 00:34:21,919
components you can just put a scss file

00:34:20,879 --> 00:34:23,280
next to your

00:34:21,919 --> 00:34:25,200
you know you like import it in your

00:34:23,280 --> 00:34:27,280
component or whatever using javascript

00:34:25,200 --> 00:34:28,240
imports and like they're relatively

00:34:27,280 --> 00:34:30,079
granular

00:34:28,240 --> 00:34:32,000
uh you should probably upgrade in a

00:34:30,079 --> 00:34:33,839
simple small refactor

00:34:32,000 --> 00:34:35,200
even if it was slow it might speed it up

00:34:33,839 --> 00:34:37,520
because we can compile

00:34:35,200 --> 00:34:38,560
single files very quickly um the only

00:34:37,520 --> 00:34:41,679
thing that's really slow

00:34:38,560 --> 00:34:44,399
is the very large at imports everywhere

00:34:41,679 --> 00:34:45,440
project so um yeah if your compile time

00:34:44,399 --> 00:34:48,399
is you know around

00:34:45,440 --> 00:34:50,399
10 seconds right now or six seconds um

00:34:48,399 --> 00:34:53,520
after every change

00:34:50,399 --> 00:34:54,800
probably a problem um but once you get a

00:34:53,520 --> 00:34:56,720
relatively small project

00:34:54,800 --> 00:34:58,560
we're using a view we don't have that

00:34:56,720 --> 00:35:00,320
much maybe like

00:34:58,560 --> 00:35:02,160
20 000 lines of code something like that

00:35:00,320 --> 00:35:04,079
and i i don't even notice the com i mean

00:35:02,160 --> 00:35:07,440
i've never noticed it was compiling

00:35:04,079 --> 00:35:09,920
um just reloads with webpack um so

00:35:07,440 --> 00:35:11,680
you know and i i think the trade-offs on

00:35:09,920 --> 00:35:12,480
our code organization and how we're able

00:35:11,680 --> 00:35:16,160
to do things

00:35:12,480 --> 00:35:17,520
uh is is just well well worth it um but

00:35:16,160 --> 00:35:20,880
yeah it's as simple as a quick

00:35:17,520 --> 00:35:24,240
uh package change um and

00:35:20,880 --> 00:35:27,200
yeah so i mean that's that's the end of

00:35:24,240 --> 00:35:27,680
my slides um we've got 10 minutes left

00:35:27,200 --> 00:35:31,440
and i'm

00:35:27,680 --> 00:35:33,680
happy to answer questions if people have

00:35:31,440 --> 00:35:33,680
them

00:35:36,320 --> 00:35:39,839
would you recommend the upgrade for

00:35:38,000 --> 00:35:42,960
custom theme material design

00:35:39,839 --> 00:35:47,440
project um i

00:35:42,960 --> 00:35:50,880
wait answer live oh hey um

00:35:47,440 --> 00:35:54,160
oh oh it gives you audio doesn't it

00:35:50,880 --> 00:35:59,200
um do you mean just based off the the

00:35:54,160 --> 00:36:02,240
like github or sorry the google project

00:35:59,200 --> 00:36:03,359
claire um i mean i guess i'm gonna say

00:36:02,240 --> 00:36:05,520
i'm not actually the answer

00:36:03,359 --> 00:36:06,640
i'm not the expert on material design or

00:36:05,520 --> 00:36:10,800
how they're using

00:36:06,640 --> 00:36:13,119
scss to be honest um but

00:36:10,800 --> 00:36:16,079
that's my my answer is i'm not the

00:36:13,119 --> 00:36:19,040
expert on that one sorry

00:36:16,079 --> 00:36:19,040
i'd love to know the answer

00:36:20,000 --> 00:36:23,200
i'm gonna count that as answered i plead

00:36:22,079 --> 00:36:26,560
the fifth

00:36:23,200 --> 00:36:28,960
um any other questions you can ask me

00:36:26,560 --> 00:36:31,839
about anything

00:36:28,960 --> 00:36:31,839
favorite restaurant

00:36:32,480 --> 00:36:37,280
um all right well i'm gonna actually i'm

00:36:34,960 --> 00:36:39,040
i'm gonna end with one note at the end

00:36:37,280 --> 00:36:42,079
uh which is normally a question i get so

00:36:39,040 --> 00:36:43,520
i was getting ready for it

00:36:42,079 --> 00:36:45,599
which people always want to know about

00:36:43,520 --> 00:36:47,359
post css

00:36:45,599 --> 00:36:48,800
post css if you don't know is a

00:36:47,359 --> 00:36:52,000
javascript based

00:36:48,800 --> 00:36:55,359
sort of post processor for css and its

00:36:52,000 --> 00:36:57,760
name it's got a good name for that uh

00:36:55,359 --> 00:36:59,040
it is very quick and very powerful it

00:36:57,760 --> 00:37:01,599
has lots of

00:36:59,040 --> 00:37:04,160
um i'll go into that one in a second uh

00:37:01,599 --> 00:37:08,000
it has lots of cool features and you can

00:37:04,160 --> 00:37:08,480
add in sas like features as sort of you

00:37:08,000 --> 00:37:10,640
can

00:37:08,480 --> 00:37:12,560
add on and jam on whatever you want

00:37:10,640 --> 00:37:15,920
honestly it's like a lego bricks

00:37:12,560 --> 00:37:18,160
um and like we don't have we

00:37:15,920 --> 00:37:19,440
for some reason cs post css seems to

00:37:18,160 --> 00:37:21,760
have a beef with us we have no

00:37:19,440 --> 00:37:23,359
beef with it it's great for prefixing

00:37:21,760 --> 00:37:26,400
like sas is not built for

00:37:23,359 --> 00:37:29,119
you know prefixing everything um

00:37:26,400 --> 00:37:30,000
like it it has lots of things that it's

00:37:29,119 --> 00:37:31,680
really good at like

00:37:30,000 --> 00:37:33,359
backwards compatibility a couple other

00:37:31,680 --> 00:37:36,480
things um and so

00:37:33,359 --> 00:37:38,480
you know i use both to be honest um but

00:37:36,480 --> 00:37:40,800
we really consider sas a language

00:37:38,480 --> 00:37:41,680
and we we think every little different

00:37:40,800 --> 00:37:43,680
like the the

00:37:41,680 --> 00:37:45,440
having a common language that everybody

00:37:43,680 --> 00:37:46,720
uses and had a lot of compatibility has

00:37:45,440 --> 00:37:49,040
value in itself

00:37:46,720 --> 00:37:50,720
um and yeah as taran just said yeah i

00:37:49,040 --> 00:37:52,960
mean so do i so

00:37:50,720 --> 00:37:53,760
we i there's no there's no b from our

00:37:52,960 --> 00:37:56,000
side like

00:37:53,760 --> 00:37:57,760
we think it's a really cool tech um but

00:37:56,000 --> 00:38:00,079
it's not it isn't a language

00:37:57,760 --> 00:38:00,880
um what's our latest quarantine hobby oh

00:38:00,079 --> 00:38:03,200
latest

00:38:00,880 --> 00:38:04,720
uh is playing universal paper clips uh

00:38:03,200 --> 00:38:08,480
which is an online game

00:38:04,720 --> 00:38:10,400
um and you should check it out uh

00:38:08,480 --> 00:38:11,839
yeah it's like free and it's very

00:38:10,400 --> 00:38:14,240
addicting um

00:38:11,839 --> 00:38:15,839
what what's a sas feature that people

00:38:14,240 --> 00:38:18,240
don't know about as much as they could

00:38:15,839 --> 00:38:19,920
i think color math that's one that's

00:38:18,240 --> 00:38:22,880
been there forever and i'm

00:38:19,920 --> 00:38:23,599
in love i remain in love with it because

00:38:22,880 --> 00:38:25,599
you can do

00:38:23,599 --> 00:38:27,599
there's so many powerful things that you

00:38:25,599 --> 00:38:29,200
can do with with colors

00:38:27,599 --> 00:38:31,200
um and we have an extremely

00:38:29,200 --> 00:38:32,320
sophisticated internal engine for

00:38:31,200 --> 00:38:35,359
dealing with color

00:38:32,320 --> 00:38:35,839
um and i mean i also just think like

00:38:35,359 --> 00:38:39,040
people

00:38:35,839 --> 00:38:42,800
generally don't use the new units in css

00:38:39,040 --> 00:38:43,920
are very powerful um like vh and some of

00:38:42,800 --> 00:38:45,599
those and

00:38:43,920 --> 00:38:47,200
i think most projects i've seen people

00:38:45,599 --> 00:38:50,240
just tend to use pixels and then

00:38:47,200 --> 00:38:52,400
maybe a rem here or there um but there's

00:38:50,240 --> 00:38:56,320
some really cool things out there that

00:38:52,400 --> 00:38:57,359
um are are good jennifer foo what about

00:38:56,320 --> 00:39:01,760
style components

00:38:57,359 --> 00:39:03,359
i would sell components um i think

00:39:01,760 --> 00:39:05,040
you know it's there's obviously like the

00:39:03,359 --> 00:39:07,119
react universe there's sort of the web

00:39:05,040 --> 00:39:10,960
component stuff that's going on

00:39:07,119 --> 00:39:11,839
um yeah i mean i for i mean i would say

00:39:10,960 --> 00:39:13,599
maybe

00:39:11,839 --> 00:39:15,119
it's based on the ecosystem you're in i

00:39:13,599 --> 00:39:17,119
definitely have projects where i did not

00:39:15,119 --> 00:39:19,440
use sas at all and i just

00:39:17,119 --> 00:39:21,920
like put inline styles basically like

00:39:19,440 --> 00:39:25,359
into indirect stuff and like it's fine

00:39:21,920 --> 00:39:26,960
um i don't know

00:39:25,359 --> 00:39:28,960
like if you're really doing strict

00:39:26,960 --> 00:39:31,359
component stuff and you're already

00:39:28,960 --> 00:39:32,720
going down the rabbit hole and like you

00:39:31,359 --> 00:39:34,640
don't want to use

00:39:32,720 --> 00:39:37,359
sophisticated styling i feel like style

00:39:34,640 --> 00:39:39,520
component starts to

00:39:37,359 --> 00:39:40,480
i have trouble when it gets complex so

00:39:39,520 --> 00:39:42,079
like in

00:39:40,480 --> 00:39:43,520
view right now we're doing some really

00:39:42,079 --> 00:39:44,079
interesting stuff in the browser with

00:39:43,520 --> 00:39:46,640
how

00:39:44,079 --> 00:39:47,440
like using cutting edge css features and

00:39:46,640 --> 00:39:48,960
stuff like that

00:39:47,440 --> 00:39:51,359
and for some reason to me components

00:39:48,960 --> 00:39:52,880
like it kind of ignores the fact that

00:39:51,359 --> 00:39:54,240
you're in a wider universe of

00:39:52,880 --> 00:39:55,599
interactions like

00:39:54,240 --> 00:39:57,440
flexbox and other things and you're

00:39:55,599 --> 00:39:58,400
flipping between files and so you know i

00:39:57,440 --> 00:40:01,760
think

00:39:58,400 --> 00:40:03,200
there is some like truth

00:40:01,760 --> 00:40:05,520
that i think for this like for this

00:40:03,200 --> 00:40:06,560
project i'm back to using sas again for

00:40:05,520 --> 00:40:08,240
those reasons

00:40:06,560 --> 00:40:09,680
um but like i don't think that there's

00:40:08,240 --> 00:40:10,960
anything like if you're doing relatively

00:40:09,680 --> 00:40:12,560
straightforward styling and you're not

00:40:10,960 --> 00:40:14,880
really trying to like

00:40:12,560 --> 00:40:16,319
do anything too complicated like just

00:40:14,880 --> 00:40:17,599
style in line or

00:40:16,319 --> 00:40:19,040
and i actually don't know what you mean

00:40:17,599 --> 00:40:20,560
style components because there's there's

00:40:19,040 --> 00:40:22,079
like three different

00:40:20,560 --> 00:40:23,200
versions that i'm aware of of style

00:40:22,079 --> 00:40:24,319
components that i'll kind of call

00:40:23,200 --> 00:40:26,560
themselves that so

00:40:24,319 --> 00:40:27,839
i mean there's a whole bunch of them and

00:40:26,560 --> 00:40:29,280
i think my answer to all of them is

00:40:27,839 --> 00:40:33,680
pretty much the same

00:40:29,280 --> 00:40:33,680
um yeah

00:40:35,040 --> 00:40:42,960
ooh what inspires me

00:40:39,760 --> 00:40:45,680
i'm i i know

00:40:42,960 --> 00:40:46,640
that i'm supposed to say a person or

00:40:45,680 --> 00:40:50,720
something

00:40:46,640 --> 00:40:53,520
uh i i get inspiration

00:40:50,720 --> 00:40:54,560
when i see an opportunity to help

00:40:53,520 --> 00:40:56,079
somebody

00:40:54,560 --> 00:40:58,880
um and when i have the opportunity to

00:40:56,079 --> 00:41:00,960
like improve something structural or

00:40:58,880 --> 00:41:03,280
like something that's just kind of not

00:41:00,960 --> 00:41:07,280
ideal and like

00:41:03,280 --> 00:41:09,280
that just is my thing that like i'll get

00:41:07,280 --> 00:41:11,520
so excited if i see an opportunity for

00:41:09,280 --> 00:41:14,240
something that nobody else is thinking

00:41:11,520 --> 00:41:16,000
um and so i kind of get like that's a

00:41:14,240 --> 00:41:20,000
meta answer versus like

00:41:16,000 --> 00:41:23,040
you know the children um

00:41:20,000 --> 00:41:23,040
it's kind of a concept

00:41:24,079 --> 00:41:27,359
i'm telling you you have about four

00:41:25,119 --> 00:41:30,560
minutes remaining yeah

00:41:27,359 --> 00:41:32,960
um i mean

00:41:30,560 --> 00:41:33,920
i'm i'm pretty i'm i'm pretty much good

00:41:32,960 --> 00:41:36,880
unless other people

00:41:33,920 --> 00:41:39,319
follow me on twitter at hcatlin um if

00:41:36,880 --> 00:41:41,359
you go to view live

00:41:39,319 --> 00:41:42,960
v-e-u-e-live.com um

00:41:41,359 --> 00:41:44,800
you can sign up for when we're doing our

00:41:42,960 --> 00:41:48,160
live tests coming up soon

00:41:44,800 --> 00:41:50,800
um and it's gonna be fun

00:41:48,160 --> 00:41:52,160
it's basically kind of like twitch but

00:41:50,800 --> 00:41:54,000
for everybody else

00:41:52,160 --> 00:41:55,280
and uh i mean that goes into the

00:41:54,000 --> 00:41:57,839
inspiring i love all

00:41:55,280 --> 00:42:00,240
i love creators like i just i think

00:41:57,839 --> 00:42:03,040
they're so cool and like i'm not

00:42:00,240 --> 00:42:04,319
i'm not the best at css like i'm not i'm

00:42:03,040 --> 00:42:06,560
all right but like you know

00:42:04,319 --> 00:42:08,240
i don't know everything about it like

00:42:06,560 --> 00:42:09,119
there's miriam and natalie you know way

00:42:08,240 --> 00:42:12,319
more than me

00:42:09,119 --> 00:42:15,760
um and uh it's gonna meet youtuber yeah

00:42:12,319 --> 00:42:17,280
uh yeah so it's uh

00:42:15,760 --> 00:42:18,640
i love that there are people who are

00:42:17,280 --> 00:42:19,760
fantastic at this stuff and they make

00:42:18,640 --> 00:42:21,119
beautiful designs and they make

00:42:19,760 --> 00:42:22,800
beautiful things happen and they

00:42:21,119 --> 00:42:24,480
give people experiences across the world

00:42:22,800 --> 00:42:27,520
that i just i love that

00:42:24,480 --> 00:42:30,560
um all right well uh thank you everybody

00:42:27,520 --> 00:42:33,280
like i said i'm at h catlin

00:42:30,560 --> 00:42:34,160
view check it out sas check it out go to

00:42:33,280 --> 00:42:45,839
that repo

00:42:34,160 --> 00:42:45,839

YouTube URL: https://www.youtube.com/watch?v=ua0FW1V83Jw


