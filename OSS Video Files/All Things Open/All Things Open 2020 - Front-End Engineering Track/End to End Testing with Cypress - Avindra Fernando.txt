Title: End to End Testing with Cypress - Avindra Fernando
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Engineering Track
Description: 
	Presented by: Avindra Fernando, Balance Innovations, a Brink's Division
Presented at All Things Open 2020 - Front-End Engineering Track

Abstract: Lots of companies are investing in end to end testing to release high quality software and remain competitive in todayâ€™s market. But, end to end testing also come with a set of challenges that we have to overcome. Setting up, writing, running, and debugging these tests could be challenging and tedious. Now with Cypress, end to end testing has become very intuitive and a whole lot of fun.

Cypress is a blazing fast testing library that integrates well with your favorite front end frameworks like React, Vue, or Angular. With Cypress, you do not need to install various other tools and libraries to write and run your end to end tests. Since Cypress tests are so easy to work with, developers as well as QA engineers will enjoy it a lot.

In this session, we will explore Cypress and look at how you can integrate it with your web application. This end to end testing experience will enable you to release high quality software to your clients.
Captions: 
	00:00:05,279 --> 00:00:08,319
well let's get started

00:00:08,320 --> 00:00:13,679
going the conference this year

00:00:11,679 --> 00:00:14,799
this is one of my favorite conferences

00:00:13,679 --> 00:00:16,560
in the united states

00:00:14,799 --> 00:00:18,480
and i'd love to be a part of the

00:00:16,560 --> 00:00:22,240
community and i'd love to be

00:00:18,480 --> 00:00:23,119
a part of all things open 2020 as a

00:00:22,240 --> 00:00:26,320
speaker

00:00:23,119 --> 00:00:27,519
this year i would also like to thank the

00:00:26,320 --> 00:00:30,560
organizers

00:00:27,519 --> 00:00:34,480
for putting up such a great show

00:00:30,560 --> 00:00:37,680
and also the sponsors for helping us out

00:00:34,480 --> 00:00:41,760
to put such a amazing

00:00:37,680 --> 00:00:45,600
conference this year end-to-end testing

00:00:41,760 --> 00:00:48,719
with cyprus this

00:00:45,600 --> 00:00:52,000
is you this is me

00:00:48,719 --> 00:00:53,520
this is our team and we're really really

00:00:52,000 --> 00:00:56,879
happy right now

00:00:53,520 --> 00:01:00,399
and why are we happy because

00:00:56,879 --> 00:01:02,800
we just got the requirements for

00:01:00,399 --> 00:01:04,080
one of our brand new projects that we're

00:01:02,800 --> 00:01:06,400
gonna go do

00:01:04,080 --> 00:01:07,119
and the reason why we're really happy is

00:01:06,400 --> 00:01:09,439
we know

00:01:07,119 --> 00:01:10,479
that this means we get to choose the

00:01:09,439 --> 00:01:13,439
technologies

00:01:10,479 --> 00:01:14,880
we're gonna choose the team members we

00:01:13,439 --> 00:01:18,799
get to choose

00:01:14,880 --> 00:01:20,720
the processes around this brand new

00:01:18,799 --> 00:01:23,920
green field project

00:01:20,720 --> 00:01:24,799
so we're all pumped up and now we're

00:01:23,920 --> 00:01:28,000
gonna go

00:01:24,799 --> 00:01:30,159
implement features so what do we do

00:01:28,000 --> 00:01:31,759
we get the requirements from our clients

00:01:30,159 --> 00:01:34,799
and deliver value

00:01:31,759 --> 00:01:35,520
piece by piece and we start with

00:01:34,799 --> 00:01:38,400
delivering

00:01:35,520 --> 00:01:39,280
these small features which then add up

00:01:38,400 --> 00:01:43,680
to

00:01:39,280 --> 00:01:47,360
a bigger feature of our project

00:01:43,680 --> 00:01:50,720
now over time a project

00:01:47,360 --> 00:01:52,960
becomes bigger and bigger

00:01:50,720 --> 00:01:53,759
we add more and more features to our

00:01:52,960 --> 00:01:55,680
project

00:01:53,759 --> 00:01:57,439
it's still very exciting because we get

00:01:55,680 --> 00:01:59,200
a lot of feedback from the clients

00:01:57,439 --> 00:02:02,320
and they're really happy about what

00:01:59,200 --> 00:02:06,079
we've delivered to them so far

00:02:02,320 --> 00:02:10,879
this keeps going this keeps going until

00:02:06,079 --> 00:02:14,000
the greenfield project slowly turns into

00:02:10,879 --> 00:02:18,959
a brownfield project we start

00:02:14,000 --> 00:02:18,959
seeing a lot of things like this

00:02:20,000 --> 00:02:24,879
we fix one bug and a different bug

00:02:23,599 --> 00:02:27,360
appears

00:02:24,879 --> 00:02:28,239
we fixed that bug and the same bug that

00:02:27,360 --> 00:02:32,080
we fixed

00:02:28,239 --> 00:02:35,760
earlier appears again and this could be

00:02:32,080 --> 00:02:40,319
frustrating the initial excitement

00:02:35,760 --> 00:02:40,319
the initial enthusiasm that we all had

00:02:40,400 --> 00:02:43,519
is not there anymore

00:02:44,640 --> 00:02:48,640
and that could be a little

00:02:48,840 --> 00:02:54,959
frustrating so what do we do

00:02:52,640 --> 00:02:58,800
that's when someone comes and talks to

00:02:54,959 --> 00:02:58,800
us about the testing pyramid

00:02:59,200 --> 00:03:04,239
so with the testing pyramid we had no

00:03:02,080 --> 00:03:07,519
idea about the testing pyramid before so

00:03:04,239 --> 00:03:09,840
now we do and we're enthusiastic again

00:03:07,519 --> 00:03:11,920
so we know all right let's go try to

00:03:09,840 --> 00:03:14,800
automate all our tests

00:03:11,920 --> 00:03:16,319
and let's start with automating the

00:03:14,800 --> 00:03:19,200
bottom most layer

00:03:16,319 --> 00:03:20,800
of writing a lot of unit tests that we

00:03:19,200 --> 00:03:22,640
can run much faster

00:03:20,800 --> 00:03:24,720
which is going to give us faster

00:03:22,640 --> 00:03:26,640
feedback uh

00:03:24,720 --> 00:03:30,080
faster feedback throughout our

00:03:26,640 --> 00:03:33,920
technologies so we invest a lot of time

00:03:30,080 --> 00:03:38,879
into writing a lot of unit tests

00:03:33,920 --> 00:03:42,239
and then we figure out

00:03:38,879 --> 00:03:44,879
our units work really well individually

00:03:42,239 --> 00:03:47,040
but when you put them together they

00:03:44,879 --> 00:03:50,159
don't really work

00:03:47,040 --> 00:03:51,760
so what do we do we say okay let's go

00:03:50,159 --> 00:03:53,200
try to invest a little more in our

00:03:51,760 --> 00:03:56,000
service level

00:03:53,200 --> 00:03:57,519
and also into an end-to-end testing

00:03:56,000 --> 00:04:00,560
solution

00:03:57,519 --> 00:04:03,760
so we get enthusiastic once more

00:04:00,560 --> 00:04:07,920
and we go and execute on writing

00:04:03,760 --> 00:04:09,280
uh automated end-to-end tests

00:04:07,920 --> 00:04:10,959
now as we're working through this

00:04:09,280 --> 00:04:13,680
process

00:04:10,959 --> 00:04:14,000
someone from the upper management comes

00:04:13,680 --> 00:04:17,120
to us

00:04:14,000 --> 00:04:17,359
and says hey i think we got to hurry

00:04:17,120 --> 00:04:20,720
this

00:04:17,359 --> 00:04:22,079
up the deadline's approaching we got to

00:04:20,720 --> 00:04:25,199
deliver value

00:04:22,079 --> 00:04:28,320
and these end-to-end testing efforts

00:04:25,199 --> 00:04:29,199
are taking a longer time so we gotta

00:04:28,320 --> 00:04:32,800
hire this up

00:04:29,199 --> 00:04:35,520
and deliver things faster

00:04:32,800 --> 00:04:37,440
that's when we start feeling like this

00:04:35,520 --> 00:04:40,639
again

00:04:37,440 --> 00:04:40,639
it could be frustrating

00:04:41,759 --> 00:04:44,720
sounds familiar

00:04:46,160 --> 00:04:52,320
who am i my name is avendra fernando

00:04:49,440 --> 00:04:53,120
i'm a software engineer based in kansas

00:04:52,320 --> 00:04:55,759
city

00:04:53,120 --> 00:04:57,840
and i work for a company called balanced

00:04:55,759 --> 00:05:00,880
innovations we're part of

00:04:57,840 --> 00:05:01,360
where it brings division and focus on

00:05:00,880 --> 00:05:05,280
building

00:05:01,360 --> 00:05:07,280
web applications and also focusing on

00:05:05,280 --> 00:05:10,320
driving some of the testing efforts at

00:05:07,280 --> 00:05:12,560
my current place

00:05:10,320 --> 00:05:13,520
so you can follow me that's my twitter

00:05:12,560 --> 00:05:19,039
handle uh

00:05:13,520 --> 00:05:19,039
my medium and my github handle as well

00:05:20,479 --> 00:05:28,080
setting up an end-to-end testing

00:05:24,080 --> 00:05:29,840
solution can sometimes be challenging

00:05:28,080 --> 00:05:31,600
if you're someone who's driving the

00:05:29,840 --> 00:05:35,520
initiative

00:05:31,600 --> 00:05:37,120
to sell this idea to management

00:05:35,520 --> 00:05:40,639
you're going to run through some

00:05:37,120 --> 00:05:44,320
challenges that you'll have to overcome

00:05:40,639 --> 00:05:48,240
because we know with our current

00:05:44,320 --> 00:05:51,600
end-to-end testing solutions we run into

00:05:48,240 --> 00:05:55,120
a certain set of challenges

00:05:51,600 --> 00:05:58,720
the first one i would like to highlight

00:05:55,120 --> 00:06:00,800
is flaky tests

00:05:58,720 --> 00:06:03,039
these are tests which pass most of the

00:06:00,800 --> 00:06:04,400
time but when it's very critical when

00:06:03,039 --> 00:06:07,440
it's very crucial

00:06:04,400 --> 00:06:11,440
when we want to release that one hotfix

00:06:07,440 --> 00:06:14,639
this has failed and what do we do

00:06:11,440 --> 00:06:15,520
we have no choice but to disable that

00:06:14,639 --> 00:06:18,840
test

00:06:15,520 --> 00:06:20,000
in order for us to release our code to

00:06:18,840 --> 00:06:22,720
production

00:06:20,000 --> 00:06:25,440
we see this happening to another test

00:06:22,720 --> 00:06:28,880
and we ended up disabling that

00:06:25,440 --> 00:06:32,639
and this unpredictable flaky behavior

00:06:28,880 --> 00:06:34,160
is gonna cause us to lose confidence

00:06:32,639 --> 00:06:35,840
and for upper management to lose

00:06:34,160 --> 00:06:39,280
confidence in

00:06:35,840 --> 00:06:42,880
our end-to-end testing solutions

00:06:39,280 --> 00:06:45,280
the second challenge is

00:06:42,880 --> 00:06:47,520
end-to-end testing solutions usually

00:06:45,280 --> 00:06:50,000
take a long time

00:06:47,520 --> 00:06:51,360
compared to other testing solutions out

00:06:50,000 --> 00:06:55,120
there

00:06:51,360 --> 00:06:59,520
i've worked at places where the feedback

00:06:55,120 --> 00:07:02,639
loop i've coded a feature

00:06:59,520 --> 00:07:04,880
and by the time i heard back any

00:07:02,639 --> 00:07:08,160
feedback related to that feature

00:07:04,880 --> 00:07:08,160
it was months after

00:07:08,479 --> 00:07:12,479
and most companies have gotten really

00:07:10,240 --> 00:07:13,280
better at this now the feedback loop is

00:07:12,479 --> 00:07:16,400
not

00:07:13,280 --> 00:07:19,520
not months but the point is

00:07:16,400 --> 00:07:21,919
that a developer once they

00:07:19,520 --> 00:07:23,520
finish implementing a feature they only

00:07:21,919 --> 00:07:26,479
get feedback after a while

00:07:23,520 --> 00:07:29,120
because some of these tests take a long

00:07:26,479 --> 00:07:31,360
long time to run

00:07:29,120 --> 00:07:32,639
so what you'll have to do is you'll have

00:07:31,360 --> 00:07:35,440
to contact switch

00:07:32,639 --> 00:07:37,440
and stop what you're doing go back and

00:07:35,440 --> 00:07:40,560
investigate

00:07:37,440 --> 00:07:42,240
that bug that you worked on and that

00:07:40,560 --> 00:07:45,039
possibly even involves you

00:07:42,240 --> 00:07:45,919
resetting the environment to a certain

00:07:45,039 --> 00:07:48,400
state

00:07:45,919 --> 00:07:50,080
so a lot of context switching and i

00:07:48,400 --> 00:07:53,120
think a lot of loss of

00:07:50,080 --> 00:07:57,039
productivity at that point

00:07:53,120 --> 00:08:00,800
and finally i think we're familiar with

00:07:57,039 --> 00:08:04,319
sleeps weights so we expect

00:08:00,800 --> 00:08:06,800
our apis to give back response

00:08:04,319 --> 00:08:08,639
within a certain number of seconds but

00:08:06,800 --> 00:08:11,680
that one fine day

00:08:08,639 --> 00:08:14,160
that api takes two minutes

00:08:11,680 --> 00:08:15,599
so what do we do we increase our timeout

00:08:14,160 --> 00:08:18,639
we increase our sleep

00:08:15,599 --> 00:08:21,759
to two minutes and now we're

00:08:18,639 --> 00:08:22,639
90 of the time we're just wasting a lot

00:08:21,759 --> 00:08:25,599
of time

00:08:22,639 --> 00:08:26,000
arbitrarily waiting for api requests or

00:08:25,599 --> 00:08:29,120
network

00:08:26,000 --> 00:08:30,160
requests to come back and that could be

00:08:29,120 --> 00:08:33,039
very costly

00:08:30,160 --> 00:08:33,039
in terms of time

00:08:34,719 --> 00:08:39,440
if you're someone who is driving the

00:08:37,440 --> 00:08:43,279
initiative

00:08:39,440 --> 00:08:44,640
to implement an end-to-end testing

00:08:43,279 --> 00:08:47,839
solution

00:08:44,640 --> 00:08:49,519
an end-to-end testing effort within your

00:08:47,839 --> 00:08:51,600
company

00:08:49,519 --> 00:08:52,640
it gets really tricky when you have to

00:08:51,600 --> 00:08:56,320
justify

00:08:52,640 --> 00:08:59,440
the time spent versus the cost incurred

00:08:56,320 --> 00:09:01,360
to the company so this is a long-term

00:08:59,440 --> 00:09:04,240
investment

00:09:01,360 --> 00:09:04,880
so it's very critical the current tools

00:09:04,240 --> 00:09:07,600
the current

00:09:04,880 --> 00:09:09,040
software out there provides us a lot of

00:09:07,600 --> 00:09:11,440
value

00:09:09,040 --> 00:09:13,040
so that when we try to justify these

00:09:11,440 --> 00:09:17,600
requirements

00:09:13,040 --> 00:09:20,399
to the business it's much more seamless

00:09:17,600 --> 00:09:20,399
and that's when

00:09:20,800 --> 00:09:24,000
you thought you were just falling off a

00:09:23,120 --> 00:09:26,320
cliff

00:09:24,000 --> 00:09:27,440
cyprus comes to your rescue and says

00:09:26,320 --> 00:09:30,320
don't worry

00:09:27,440 --> 00:09:30,320
i got you back

00:09:30,560 --> 00:09:37,519
most of us today are involved in

00:09:34,560 --> 00:09:38,640
working on web applications and cyprus

00:09:37,519 --> 00:09:41,839
is a perfect

00:09:38,640 --> 00:09:45,760
end-to-end solution for

00:09:41,839 --> 00:09:45,760
working with web applications

00:09:45,920 --> 00:09:55,920
so i wanted to highlight why cyprus

00:09:51,360 --> 00:09:59,920
prior to cyprus if we were

00:09:55,920 --> 00:10:03,120
choosing an end-to-end testing solution

00:09:59,920 --> 00:10:05,680
it was not one solution which solves all

00:10:03,120 --> 00:10:10,160
of it we had to choose different

00:10:05,680 --> 00:10:11,839
frameworks things like what style of

00:10:10,160 --> 00:10:14,240
tests are we going to write mocha

00:10:11,839 --> 00:10:15,839
jasmine karma

00:10:14,240 --> 00:10:17,600
what's the assertion library that we're

00:10:15,839 --> 00:10:18,480
going to use we have to make a choice on

00:10:17,600 --> 00:10:23,200
that

00:10:18,480 --> 00:10:25,040
and then it's still a very popular

00:10:23,200 --> 00:10:26,560
end-to-end testing solution out there is

00:10:25,040 --> 00:10:29,279
selenium which looks at

00:10:26,560 --> 00:10:30,399
our application from the outside and

00:10:29,279 --> 00:10:33,440
helps us make

00:10:30,399 --> 00:10:35,600
certain requests

00:10:33,440 --> 00:10:37,600
and if we select selenium then we need

00:10:35,600 --> 00:10:39,279
to select an implementation or a

00:10:37,600 --> 00:10:42,160
selenium wrapper

00:10:39,279 --> 00:10:44,160
popular ones being webdriver nightwatch

00:10:42,160 --> 00:10:45,839
and protractor

00:10:44,160 --> 00:10:47,440
now we may also need some additional

00:10:45,839 --> 00:10:51,600
libraries like cyano

00:10:47,440 --> 00:10:51,600
or test double for mocking

00:10:51,680 --> 00:10:58,079
a lot of design short decisions

00:10:55,120 --> 00:10:59,920
a lot of choices that we have to go make

00:10:58,079 --> 00:11:02,880
with cyprus

00:10:59,920 --> 00:11:03,760
all of this legwork has been taken care

00:11:02,880 --> 00:11:07,600
of

00:11:03,760 --> 00:11:11,200
it's a all-in-one testing framework

00:11:07,600 --> 00:11:15,839
that provides us all of these abilities

00:11:11,200 --> 00:11:15,839
and all without using selenium

00:11:16,560 --> 00:11:21,040
cypress has some really cool features

00:11:19,120 --> 00:11:24,160
that i wanted to highlight

00:11:21,040 --> 00:11:28,000
the first one is time

00:11:24,160 --> 00:11:29,920
travel and debugging so one thing i want

00:11:28,000 --> 00:11:33,680
to give kudos to cyprus

00:11:29,920 --> 00:11:36,800
what i love about cyprus is its ui

00:11:33,680 --> 00:11:37,760
it is amazing ui that you can interact

00:11:36,800 --> 00:11:40,480
with

00:11:37,760 --> 00:11:42,240
and get a lot of feedback get a lot of

00:11:40,480 --> 00:11:44,399
meaningful information

00:11:42,240 --> 00:11:46,240
when you are working with cypress tests

00:11:44,399 --> 00:11:50,000
and when you're debugging

00:11:46,240 --> 00:11:50,480
cypress tests so here we see a cypress

00:11:50,000 --> 00:11:52,639
test

00:11:50,480 --> 00:11:53,680
on the left hand side and we see the

00:11:52,639 --> 00:11:56,240
cypress runner

00:11:53,680 --> 00:11:58,240
on the right hand side so what i can do

00:11:56,240 --> 00:12:01,519
is i can add something like psi dot

00:11:58,240 --> 00:12:04,399
pause and when i run the test

00:12:01,519 --> 00:12:05,760
it actually pauses at that point and

00:12:04,399 --> 00:12:08,160
helps us debug

00:12:05,760 --> 00:12:08,880
step by step into what this test is

00:12:08,160 --> 00:12:11,279
doing

00:12:08,880 --> 00:12:12,079
and what the current state is when the

00:12:11,279 --> 00:12:16,880
test is

00:12:12,079 --> 00:12:20,880
running at each step it's really cool

00:12:16,880 --> 00:12:24,480
the second thing the second feature

00:12:20,880 --> 00:12:26,959
is really amazing and in today's web

00:12:24,480 --> 00:12:28,800
development world i don't think we can

00:12:26,959 --> 00:12:31,680
ever live without

00:12:28,800 --> 00:12:33,440
real-time reloads we write the code we

00:12:31,680 --> 00:12:35,920
expect

00:12:33,440 --> 00:12:37,200
our application to refresh and display

00:12:35,920 --> 00:12:40,079
those changes

00:12:37,200 --> 00:12:42,399
real time cyprus has the same ability as

00:12:40,079 --> 00:12:44,079
you're working through a test

00:12:42,399 --> 00:12:48,399
you can get feedback on the cypress

00:12:44,079 --> 00:12:48,399
runner real time which is amazing

00:12:51,440 --> 00:12:59,680
third feature is automatic weighting

00:12:56,240 --> 00:13:01,600
i mentioned in a previous example about

00:12:59,680 --> 00:13:02,959
waiting for an arbitrary amount of

00:13:01,600 --> 00:13:07,360
seconds

00:13:02,959 --> 00:13:11,360
this results in a lot of time wait stage

00:13:07,360 --> 00:13:13,519
so cyprus actually knows

00:13:11,360 --> 00:13:15,200
how much to wait and when your network

00:13:13,519 --> 00:13:16,800
requests come back

00:13:15,200 --> 00:13:18,560
and this is because of the internal

00:13:16,800 --> 00:13:22,079
architecture of cyprus

00:13:18,560 --> 00:13:23,839
it can track when you are making a

00:13:22,079 --> 00:13:25,120
network request and when the response

00:13:23,839 --> 00:13:27,440
comes back

00:13:25,120 --> 00:13:30,320
and because it knows this information it

00:13:27,440 --> 00:13:33,760
knows exactly how long to wait

00:13:30,320 --> 00:13:35,760
so you don't have to keep guessing

00:13:33,760 --> 00:13:37,360
when an api is going to return its

00:13:35,760 --> 00:13:40,880
response

00:13:37,360 --> 00:13:40,880
so really cool feature

00:13:42,000 --> 00:13:45,680
network traffic control a few things

00:13:44,079 --> 00:13:48,240
that we can do

00:13:45,680 --> 00:13:49,279
to monitor and track our network

00:13:48,240 --> 00:13:51,760
requests

00:13:49,279 --> 00:13:52,880
the first thing is you can spy on those

00:13:51,760 --> 00:13:55,519
requests

00:13:52,880 --> 00:13:57,279
so with spying what you're really doing

00:13:55,519 --> 00:14:00,800
is you actually make the network call

00:13:57,279 --> 00:14:00,800
you actually make the api call

00:14:00,839 --> 00:14:05,680
but you can listen in

00:14:03,680 --> 00:14:08,959
on what request was made and what

00:14:05,680 --> 00:14:08,959
response is coming back

00:14:09,120 --> 00:14:12,639
now if you want to make things a little

00:14:10,560 --> 00:14:13,199
easier and faster and you can go to the

00:14:12,639 --> 00:14:15,920
next step

00:14:13,199 --> 00:14:16,800
and do stubbing with stubbing what

00:14:15,920 --> 00:14:19,360
you're doing

00:14:16,800 --> 00:14:21,199
is you're basically mocking the api

00:14:19,360 --> 00:14:23,600
response and for some scenarios

00:14:21,199 --> 00:14:25,600
i think this is really valuable so that

00:14:23,600 --> 00:14:26,880
way you know the contract you know the

00:14:25,600 --> 00:14:29,040
shape of the api

00:14:26,880 --> 00:14:30,000
you know the shape of the data which was

00:14:29,040 --> 00:14:32,560
supposed to come back

00:14:30,000 --> 00:14:33,199
and you can mock all of that and instead

00:14:32,560 --> 00:14:36,560
of making

00:14:33,199 --> 00:14:37,839
a real api network request you can make

00:14:36,560 --> 00:14:41,360
a stub request

00:14:37,839 --> 00:14:44,480
using cypress finally

00:14:41,360 --> 00:14:47,040
cyprus has the ability to fast forward

00:14:44,480 --> 00:14:49,360
time and they call that clocks

00:14:47,040 --> 00:14:50,160
so for example in your code for some

00:14:49,360 --> 00:14:52,320
reason

00:14:50,160 --> 00:14:54,639
let's say you have a set timeout which

00:14:52,320 --> 00:14:56,639
where you have to wait for a few seconds

00:14:54,639 --> 00:14:59,199
what you can do when your test runs is

00:14:56,639 --> 00:15:01,680
you can fast forward time

00:14:59,199 --> 00:15:02,399
using the cypress clocks so they call it

00:15:01,680 --> 00:15:05,440
ticking

00:15:02,399 --> 00:15:05,440
the cypress clock

00:15:06,320 --> 00:15:11,120
cypress also comes with a lot of bundle

00:15:09,199 --> 00:15:14,399
tools

00:15:11,120 --> 00:15:16,320
it comes with moment it comes with

00:15:14,399 --> 00:15:19,600
sign on it comes with low dash out of

00:15:16,320 --> 00:15:22,880
the box and also comes with jquery style

00:15:19,600 --> 00:15:25,120
querying to access elements

00:15:22,880 --> 00:15:26,480
so a lot of these these tools come out

00:15:25,120 --> 00:15:27,040
of the box so we don't have to worry

00:15:26,480 --> 00:15:30,639
about

00:15:27,040 --> 00:15:30,639
adding them to our ecosystem

00:15:32,240 --> 00:15:38,880
screenshots and videos really cool

00:15:35,519 --> 00:15:40,720
when it comes to debugging our tests

00:15:38,880 --> 00:15:43,360
cyprus you can configure it to take

00:15:40,720 --> 00:15:45,839
screenshots at every single step

00:15:43,360 --> 00:15:47,920
of your tests and also generate videos

00:15:45,839 --> 00:15:52,639
that we can go review

00:15:47,920 --> 00:15:55,199
as the tests run so this is a huge

00:15:52,639 --> 00:15:56,000
feature that i really love about when we

00:15:55,199 --> 00:15:59,360
try to

00:15:56,000 --> 00:16:02,560
execute these tests and when we

00:15:59,360 --> 00:16:04,560
debug these tests and

00:16:02,560 --> 00:16:06,480
these are you can turn them off you can

00:16:04,560 --> 00:16:07,279
turn them on if you need the videos you

00:16:06,480 --> 00:16:08,959
can have them

00:16:07,279 --> 00:16:11,519
or otherwise you can you can turn off

00:16:08,959 --> 00:16:11,519
that setting

00:16:12,000 --> 00:16:16,320
so how do we get started

00:16:17,839 --> 00:16:24,160
npm install cypress and you save it

00:16:21,759 --> 00:16:25,680
and that's going to get us started with

00:16:24,160 --> 00:16:27,519
cypress

00:16:25,680 --> 00:16:28,720
what you'll see is when you add this to

00:16:27,519 --> 00:16:32,800
your project

00:16:28,720 --> 00:16:35,360
you will see a folder called cypress

00:16:32,800 --> 00:16:36,720
with these files and subfolders the

00:16:35,360 --> 00:16:38,800
first one you're going to see

00:16:36,720 --> 00:16:39,759
is a cypress json file this file

00:16:38,800 --> 00:16:44,720
contains

00:16:39,759 --> 00:16:46,959
all of the settings related to cypress

00:16:44,720 --> 00:16:48,800
the second folder you're going to see is

00:16:46,959 --> 00:16:50,160
the integration folder

00:16:48,800 --> 00:16:53,040
and this is where you're going to be

00:16:50,160 --> 00:16:55,920
putting all of your

00:16:53,040 --> 00:16:57,279
spec files or test files that you're

00:16:55,920 --> 00:16:58,560
going to be running

00:16:57,279 --> 00:17:01,360
you're going to be writing for

00:16:58,560 --> 00:17:01,360
end-to-end tests

00:17:01,519 --> 00:17:04,959
there's another folder called fixtures

00:17:03,680 --> 00:17:05,600
fixtures is where you're going to be

00:17:04,959 --> 00:17:07,760
storing

00:17:05,600 --> 00:17:08,959
all of your mocked data and mocked

00:17:07,760 --> 00:17:11,760
implementations

00:17:08,959 --> 00:17:11,760
for apis

00:17:12,160 --> 00:17:16,240
plugins is if you want to extend the

00:17:15,199 --> 00:17:19,439
functionality of

00:17:16,240 --> 00:17:21,280
cypress then you can do that ability

00:17:19,439 --> 00:17:22,480
and then all of those custom plugins

00:17:21,280 --> 00:17:24,559
that you'll be writing

00:17:22,480 --> 00:17:25,520
that you'll be consuming you can put

00:17:24,559 --> 00:17:28,559
them inside

00:17:25,520 --> 00:17:30,480
of the plugins folder under cypress and

00:17:28,559 --> 00:17:33,200
finally

00:17:30,480 --> 00:17:34,640
under the support folder uh you can put

00:17:33,200 --> 00:17:36,799
a lot of the shared commands and

00:17:34,640 --> 00:17:40,080
utilities that you'll be needing

00:17:36,799 --> 00:17:41,360
um for these tests so for example you'll

00:17:40,080 --> 00:17:42,720
you'll start to realize as you're

00:17:41,360 --> 00:17:44,160
writing these cyprus tests

00:17:42,720 --> 00:17:45,520
there's going to be a lot of repeated

00:17:44,160 --> 00:17:46,640
functionality there's gonna be a lot of

00:17:45,520 --> 00:17:48,880
repeated code

00:17:46,640 --> 00:17:50,720
so it'll be nice if you can abstract it

00:17:48,880 --> 00:17:51,919
out and put it in a common place put in

00:17:50,720 --> 00:17:54,320
a common util

00:17:51,919 --> 00:17:55,760
that cyprus can consume or make it into

00:17:54,320 --> 00:17:58,960
a shared command

00:17:55,760 --> 00:18:00,640
that cyprus can execute so you can do

00:17:58,960 --> 00:18:02,880
all of that and you'll be storing

00:18:00,640 --> 00:18:04,960
all of those inside of the support

00:18:02,880 --> 00:18:08,640
folder

00:18:04,960 --> 00:18:11,280
once you get it set up

00:18:08,640 --> 00:18:12,640
you can run it using the executable or

00:18:11,280 --> 00:18:16,240
you can run it using

00:18:12,640 --> 00:18:17,919
nps npx cypress open

00:18:16,240 --> 00:18:21,840
and what this is going to do is this is

00:18:17,919 --> 00:18:21,840
going to open up your cypress runner

00:18:22,080 --> 00:18:25,120
which is going to show you a list of the

00:18:23,840 --> 00:18:28,240
tests

00:18:25,120 --> 00:18:30,240
that you have if you are running this in

00:18:28,240 --> 00:18:32,880
a ci environment

00:18:30,240 --> 00:18:33,840
you can use npx cypress run and that's

00:18:32,880 --> 00:18:35,760
going to run it

00:18:33,840 --> 00:18:37,200
in your command line tool or your

00:18:35,760 --> 00:18:40,840
terminal

00:18:37,200 --> 00:18:42,160
agnostic of a visual tool that you can

00:18:40,840 --> 00:18:44,640
see

00:18:42,160 --> 00:18:46,080
so once you do cyprus open when you

00:18:44,640 --> 00:18:47,280
first get started this is a screen that

00:18:46,080 --> 00:18:49,039
you're going to see

00:18:47,280 --> 00:18:52,240
basically shows the structure of the

00:18:49,039 --> 00:18:55,919
folders that i was talking to you about

00:18:52,240 --> 00:18:57,520
and it's going to show you the list of

00:18:55,919 --> 00:18:59,760
tests that you have

00:18:57,520 --> 00:19:01,520
and you can step through each one and

00:18:59,760 --> 00:19:02,480
run them individually or you can run

00:19:01,520 --> 00:19:10,720
them

00:19:02,480 --> 00:19:14,720
as a as a batch

00:19:10,720 --> 00:19:16,960
is everyone ready to get started okay

00:19:14,720 --> 00:19:18,960
so what we're going to do today is we're

00:19:16,960 --> 00:19:22,000
going to go look at an application

00:19:18,960 --> 00:19:24,000
which is a simple to use application

00:19:22,000 --> 00:19:25,039
what it allows you to do is create a

00:19:24,000 --> 00:19:27,520
to-do item

00:19:25,039 --> 00:19:29,039
mark an item as completed and mark an

00:19:27,520 --> 00:19:32,160
item as deleted

00:19:29,039 --> 00:19:33,280
once it's complete and then we're going

00:19:32,160 --> 00:19:36,000
to use cyprus

00:19:33,280 --> 00:19:37,679
to run some tests against that

00:19:36,000 --> 00:19:40,320
application

00:19:37,679 --> 00:19:41,840
so along with all of you i want to

00:19:40,320 --> 00:19:44,559
invite

00:19:41,840 --> 00:19:45,200
the minions to come along to take a

00:19:44,559 --> 00:19:49,200
journey

00:19:45,200 --> 00:19:49,200
to go look at this application

00:19:50,160 --> 00:19:56,559
so what we'll do

00:19:53,280 --> 00:19:57,520
is fire up our application so this

00:19:56,559 --> 00:20:01,919
application

00:19:57,520 --> 00:20:05,679
allows me to create two new items

00:20:01,919 --> 00:20:09,520
so i can create item number two

00:20:05,679 --> 00:20:12,640
item number three mark the first one

00:20:09,520 --> 00:20:15,679
as completed or

00:20:12,640 --> 00:20:16,720
deleted uh i can mark the second one as

00:20:15,679 --> 00:20:21,039
completed

00:20:16,720 --> 00:20:24,480
and i can delete other items as well

00:20:21,039 --> 00:20:27,919
so a pretty simple to-do application

00:20:24,480 --> 00:20:31,200
so now let's go ahead and run cyprus

00:20:27,919 --> 00:20:35,600
against this application

00:20:31,200 --> 00:20:39,520
so i've fired up

00:20:35,600 --> 00:20:43,200
cyprus here let me bring it over

00:20:39,520 --> 00:20:44,320
to this window so what you do is using

00:20:43,200 --> 00:20:47,520
npx cypress

00:20:44,320 --> 00:20:48,000
open you're going to fire up your

00:20:47,520 --> 00:20:50,400
cypress

00:20:48,000 --> 00:20:52,799
runner so this is how your cypress

00:20:50,400 --> 00:20:54,799
runner is going to look

00:20:52,799 --> 00:20:56,960
uh basically is going to show you the

00:20:54,799 --> 00:20:59,919
list of tests that you have

00:20:56,960 --> 00:21:00,400
and you can run them individually or you

00:20:59,919 --> 00:21:03,039
can run

00:21:00,400 --> 00:21:04,640
all of them at once so i'm going to

00:21:03,039 --> 00:21:07,840
still i'm going to select

00:21:04,640 --> 00:21:08,799
let's run all of them and see what it

00:21:07,840 --> 00:21:13,200
does

00:21:08,799 --> 00:21:17,200
so then it opens up a chrome window

00:21:13,200 --> 00:21:19,760
and we can see it doing its magic

00:21:17,200 --> 00:21:20,960
so each and every step that you see on

00:21:19,760 --> 00:21:24,320
the left hand side

00:21:20,960 --> 00:21:26,720
are steps of the tests so

00:21:24,320 --> 00:21:28,640
it's creating elements it's marking them

00:21:26,720 --> 00:21:31,520
as completed it's deleting them

00:21:28,640 --> 00:21:32,480
it's resetting the state it's doing a

00:21:31,520 --> 00:21:36,400
whole

00:21:32,480 --> 00:21:37,679
a bunch of things for our tests so

00:21:36,400 --> 00:21:39,760
what i can do once the tests are

00:21:37,679 --> 00:21:40,400
completed i can see that it took 22

00:21:39,760 --> 00:21:42,880
seconds

00:21:40,400 --> 00:21:45,360
so there's quite a few tests here and

00:21:42,880 --> 00:21:47,760
then i can hover over each one

00:21:45,360 --> 00:21:51,120
and this is a really cool part about

00:21:47,760 --> 00:21:55,919
cypress so let me zoom in

00:21:51,120 --> 00:21:55,919
here so

00:21:56,000 --> 00:22:00,799
here's a before each hook which is

00:21:58,720 --> 00:22:02,240
visiting a reset page so it's making

00:22:00,799 --> 00:22:06,000
sure it's starting

00:22:02,240 --> 00:22:10,799
off with a blank slate then it visits

00:22:06,000 --> 00:22:14,000
the home page then it waits for a second

00:22:10,799 --> 00:22:18,720
and then it checks to see

00:22:14,000 --> 00:22:18,720
what the heading of this to do item is

00:22:19,120 --> 00:22:25,919
so uh one more test

00:22:22,880 --> 00:22:26,320
so we can look at what that's doing so

00:22:25,919 --> 00:22:28,960
it's

00:22:26,320 --> 00:22:30,240
really cool and uh so this is a state

00:22:28,960 --> 00:22:33,840
where it's loading

00:22:30,240 --> 00:22:35,679
and i can see that my loading data it's

00:22:33,840 --> 00:22:37,120
in a loading data status so i can see a

00:22:35,679 --> 00:22:40,080
snapshots

00:22:37,120 --> 00:22:41,520
for each step as i click through on what

00:22:40,080 --> 00:22:44,960
cyprus is doing

00:22:41,520 --> 00:22:44,960
as it runs these tests

00:22:46,000 --> 00:22:55,840
so let's dig in

00:22:49,200 --> 00:22:55,840
uh further so let's go back to

00:22:57,919 --> 00:23:09,840
our tests and look at each one uh step

00:23:01,440 --> 00:23:09,840
by step

00:23:14,320 --> 00:23:16,720
all right

00:23:17,679 --> 00:23:21,440
so our first test so if you're writing

00:23:21,120 --> 00:23:25,280
your

00:23:21,440 --> 00:23:27,520
very first cyprus test one thing to be

00:23:25,280 --> 00:23:28,320
one thing to note it's gonna look very

00:23:27,520 --> 00:23:31,760
familiar

00:23:28,320 --> 00:23:33,280
familiar to some javascript tests that

00:23:31,760 --> 00:23:36,960
you've already written

00:23:33,280 --> 00:23:40,080
uh in the past so the syntax here

00:23:36,960 --> 00:23:42,480
is the first step is you define your

00:23:40,080 --> 00:23:43,919
test suite and that's so i've decided to

00:23:42,480 --> 00:23:47,520
call it my first test

00:23:43,919 --> 00:23:49,840
and you wrap it using a describe block

00:23:47,520 --> 00:23:50,960
and then your test comes inside of that

00:23:49,840 --> 00:23:53,039
so it starts with

00:23:50,960 --> 00:23:54,080
the word keyword it or you can start

00:23:53,039 --> 00:23:56,880
with the keyword

00:23:54,080 --> 00:23:57,760
test uh either one whichever you prefer

00:23:56,880 --> 00:24:01,039
to use

00:23:57,760 --> 00:24:05,279
you give it a name and then a function

00:24:01,039 --> 00:24:08,880
that it invokes uh as a part of the test

00:24:05,279 --> 00:24:12,159
so the first thing cyprus does

00:24:08,880 --> 00:24:15,679
is it goes and visits your homepage or

00:24:12,159 --> 00:24:18,720
the url that you provide

00:24:15,679 --> 00:24:20,159
so that it can go visit it so one more

00:24:18,720 --> 00:24:23,760
thing that you'll see

00:24:20,159 --> 00:24:26,960
in cyprus tests are the sai

00:24:23,760 --> 00:24:29,760
global object so that's what cyprus uses

00:24:26,960 --> 00:24:31,200
to execute these commands so anything

00:24:29,760 --> 00:24:32,720
that you see you'll see a lot of these

00:24:31,200 --> 00:24:35,520
psi dot

00:24:32,720 --> 00:24:36,080
global global that you're going to be

00:24:35,520 --> 00:24:39,200
using

00:24:36,080 --> 00:24:42,640
as you run write and

00:24:39,200 --> 00:24:45,360
invoke these cypress tests

00:24:42,640 --> 00:24:47,360
so if you remember in my application

00:24:45,360 --> 00:24:48,159
there was a big giant heading called to

00:24:47,360 --> 00:24:49,919
dose

00:24:48,159 --> 00:24:52,720
so what i want to do is i want to

00:24:49,919 --> 00:24:55,919
validate when my application loads

00:24:52,720 --> 00:24:56,799
it's showing that heading so what i can

00:24:55,919 --> 00:25:00,240
do

00:24:56,799 --> 00:25:01,679
is i can use the side.contains and grab

00:25:00,240 --> 00:25:05,279
an html element

00:25:01,679 --> 00:25:09,520
and check for its value or text

00:25:05,279 --> 00:25:12,720
so here it's saying psi dot contains

00:25:09,520 --> 00:25:14,000
h1 which is the html element check to

00:25:12,720 --> 00:25:17,919
see if it has a value

00:25:14,000 --> 00:25:19,679
to use and it does in this case so it's

00:25:17,919 --> 00:25:21,200
going to pass

00:25:19,679 --> 00:25:22,799
there's another way of writing the same

00:25:21,200 --> 00:25:25,679
exact thing uh

00:25:22,799 --> 00:25:26,880
instead of using a string you can use a

00:25:25,679 --> 00:25:29,200
regular expression

00:25:26,880 --> 00:25:31,520
to check for partial matches and things

00:25:29,200 --> 00:25:35,120
like that

00:25:31,520 --> 00:25:38,640
now there is a slight

00:25:35,120 --> 00:25:40,720
issue in this test this is a very good

00:25:38,640 --> 00:25:44,480
first test

00:25:40,720 --> 00:25:47,840
but what i'm seeing here is i'm having

00:25:44,480 --> 00:25:50,880
cyprus grab my h

00:25:47,840 --> 00:25:52,320
very first h1 now the issue is if i do

00:25:50,880 --> 00:25:56,240
add another h1

00:25:52,320 --> 00:25:58,000
to my page then as long as this is the

00:25:56,240 --> 00:25:58,799
very first one it's going to work but if

00:25:58,000 --> 00:26:01,520
i add

00:25:58,799 --> 00:26:02,640
something on top of that then it may

00:26:01,520 --> 00:26:05,679
continue to

00:26:02,640 --> 00:26:06,799
it it's not going to continue to work so

00:26:05,679 --> 00:26:09,440
what we can do

00:26:06,799 --> 00:26:12,080
is it's good practice to ensure that you

00:26:09,440 --> 00:26:13,200
give a unique identifier to your html

00:26:12,080 --> 00:26:14,480
element

00:26:13,200 --> 00:26:17,200
so what you can do is you can give a

00:26:14,480 --> 00:26:20,640
data attribute in this example

00:26:17,200 --> 00:26:24,400
we're calling it data hyphen

00:26:20,640 --> 00:26:26,880
psi and then you give it a unique name

00:26:24,400 --> 00:26:28,559
and then you can query by that so here

00:26:26,880 --> 00:26:31,120
it's essentially

00:26:28,559 --> 00:26:31,760
still using the site that contains but

00:26:31,120 --> 00:26:33,520
instead of

00:26:31,760 --> 00:26:35,760
h1 it's actually using the unique

00:26:33,520 --> 00:26:38,720
identifier that you gave your element

00:26:35,760 --> 00:26:41,200
and then checking for its value call

00:26:38,720 --> 00:26:41,200
today's

00:26:42,159 --> 00:26:47,840
so let's take this a step further

00:26:45,279 --> 00:26:49,440
let's try to add some items to our

00:26:47,840 --> 00:26:52,640
to-do's application

00:26:49,440 --> 00:26:54,400
using cypress so i start my test

00:26:52,640 --> 00:26:56,080
the first thing i'm going to do is i'm

00:26:54,400 --> 00:26:59,279
going to visit the home page

00:26:56,080 --> 00:27:02,159
using site.visit the next thing

00:26:59,279 --> 00:27:03,360
is i did see in my application an input

00:27:02,159 --> 00:27:04,960
box

00:27:03,360 --> 00:27:06,640
so what i want to do is i want to gain

00:27:04,960 --> 00:27:09,440
access to that input box

00:27:06,640 --> 00:27:11,440
type something in it press the enter key

00:27:09,440 --> 00:27:14,559
so we have to mimic all of that

00:27:11,440 --> 00:27:18,399
using cyprus so you can do all of that

00:27:14,559 --> 00:27:19,440
using this step to gain access to the

00:27:18,399 --> 00:27:22,559
element

00:27:19,440 --> 00:27:24,399
you can use psi dot get and using its

00:27:22,559 --> 00:27:28,000
class name or its

00:27:24,399 --> 00:27:29,919
id you can get that element and then

00:27:28,000 --> 00:27:32,880
you can cyprus has a function called dot

00:27:29,919 --> 00:27:35,600
type which you can use the type

00:27:32,880 --> 00:27:36,480
any text and then you can invoke

00:27:35,600 --> 00:27:40,000
keyboard

00:27:36,480 --> 00:27:41,919
keyboard events so here

00:27:40,000 --> 00:27:43,600
uh what i've done is i've typed the word

00:27:41,919 --> 00:27:47,039
first item and then

00:27:43,600 --> 00:27:50,320
the enter key is being pressed

00:27:47,039 --> 00:27:51,919
so once i do that i do expect the item

00:27:50,320 --> 00:27:55,120
to get added to the list

00:27:51,919 --> 00:27:55,919
so then i can run my assertion so i can

00:27:55,120 --> 00:27:59,600
say

00:27:55,919 --> 00:28:02,399
psi dot contains find the to-do

00:27:59,600 --> 00:28:05,279
item that i just added check whether

00:28:02,399 --> 00:28:08,480
it's value is first item

00:28:05,279 --> 00:28:11,360
then i can go a step further not only

00:28:08,480 --> 00:28:13,440
that its value is that but can you also

00:28:11,360 --> 00:28:16,159
make sure that it's visible to the user

00:28:13,440 --> 00:28:17,360
so you can use the shoot directive and

00:28:16,159 --> 00:28:20,320
then

00:28:17,360 --> 00:28:21,600
be visible it's essentially checking if

00:28:20,320 --> 00:28:25,039
it in a visible state

00:28:21,600 --> 00:28:27,760
so meaning it's not have a

00:28:25,039 --> 00:28:28,799
css property called display none or

00:28:27,760 --> 00:28:31,840
visibility hidden

00:28:28,799 --> 00:28:32,960
it's actually visible to the user on the

00:28:31,840 --> 00:28:35,440
screen

00:28:32,960 --> 00:28:37,360
so second one i can do it one more time

00:28:35,440 --> 00:28:38,320
i can add another element called second

00:28:37,360 --> 00:28:40,799
item

00:28:38,320 --> 00:28:42,000
using psi.get to gain control of the

00:28:40,799 --> 00:28:46,080
input

00:28:42,000 --> 00:28:49,360
dot type to type the value press enter

00:28:46,080 --> 00:28:52,080
and then psi dot contains uh

00:28:49,360 --> 00:28:53,360
using uh gain access to where the item

00:28:52,080 --> 00:28:56,840
would have got created

00:28:53,360 --> 00:28:59,039
check its value and also check if it's

00:28:56,840 --> 00:29:02,720
visible

00:28:59,039 --> 00:29:05,520
now i do have a refactoring opportunity

00:29:02,720 --> 00:29:06,559
if you notice in each of my tests i am

00:29:05,520 --> 00:29:09,039
visiting

00:29:06,559 --> 00:29:10,320
a url now why do i have to repeat that

00:29:09,039 --> 00:29:12,480
every single time

00:29:10,320 --> 00:29:13,840
so the good news is you can use the

00:29:12,480 --> 00:29:17,600
before each hook

00:29:13,840 --> 00:29:19,200
and you can put side.visit

00:29:17,600 --> 00:29:21,600
in there so essentially what this is

00:29:19,200 --> 00:29:24,720
doing is before each test

00:29:21,600 --> 00:29:27,679
it makes sure that we are

00:29:24,720 --> 00:29:28,399
cyprus is visiting that url that he

00:29:27,679 --> 00:29:32,480
provided

00:29:28,399 --> 00:29:33,919
and then run the tests okay

00:29:32,480 --> 00:29:36,000
so we're going to see all of this in

00:29:33,919 --> 00:29:38,720
action

00:29:36,000 --> 00:29:41,120
so here in this video it ran really fast

00:29:38,720 --> 00:29:42,960
so what i've done is i took the video

00:29:41,120 --> 00:29:46,000
that cyprus generated

00:29:42,960 --> 00:29:47,520
and i've slowed it down so that i can i

00:29:46,000 --> 00:29:51,120
can show all of you

00:29:47,520 --> 00:29:54,559
how this how this works so let's go back

00:29:51,120 --> 00:29:56,880
and play it pretty slowly

00:29:54,559 --> 00:29:59,120
to see what cyprus is doing when it's

00:29:56,880 --> 00:30:02,960
running this test so first thing

00:29:59,120 --> 00:30:06,240
um it visits the home page

00:30:02,960 --> 00:30:06,880
and we can see that it's now starting to

00:30:06,240 --> 00:30:09,279
type

00:30:06,880 --> 00:30:10,960
first item and it presses the enter key

00:30:09,279 --> 00:30:14,080
gets added to the list

00:30:10,960 --> 00:30:15,840
and then it adds a second item and then

00:30:14,080 --> 00:30:17,679
it gets added to the list and my

00:30:15,840 --> 00:30:18,960
assertions run to check whether they're

00:30:17,679 --> 00:30:21,520
visible

00:30:18,960 --> 00:30:23,840
and uh we should be we should be good

00:30:21,520 --> 00:30:23,840
there

00:30:24,960 --> 00:30:28,720
there's another refractoring opportunity

00:30:27,120 --> 00:30:29,760
in this case i'll be adding a lot of

00:30:28,720 --> 00:30:33,679
items

00:30:29,760 --> 00:30:36,399
even if i want to test a remove scenario

00:30:33,679 --> 00:30:36,960
so i can attract that code out to a

00:30:36,399 --> 00:30:40,159
function

00:30:36,960 --> 00:30:42,080
call it that item and then basically

00:30:40,159 --> 00:30:45,520
have that psi dot get new to do

00:30:42,080 --> 00:30:48,559
type and have my text be dynamic

00:30:45,520 --> 00:30:52,480
so then if i'm running a test

00:30:48,559 --> 00:30:54,240
to remove items what i can do

00:30:52,480 --> 00:30:56,159
is instead of typing out all those

00:30:54,240 --> 00:30:56,960
statements over and over again now i can

00:30:56,159 --> 00:30:59,600
simply use

00:30:56,960 --> 00:31:00,159
add item so i'm adding an item called

00:30:59,600 --> 00:31:04,000
simple

00:31:00,159 --> 00:31:07,039
i'm adding an item called hard and then

00:31:04,000 --> 00:31:10,240
i first check if the item simple exists

00:31:07,039 --> 00:31:13,600
and then i find the destroy

00:31:10,240 --> 00:31:15,600
element which in my case was

00:31:13,600 --> 00:31:17,519
if you remember if you hover over you

00:31:15,600 --> 00:31:18,960
have the red x which appears

00:31:17,519 --> 00:31:21,679
and then you find that element and then

00:31:18,960 --> 00:31:23,360
you click on it we're using force equals

00:31:21,679 --> 00:31:26,080
true here

00:31:23,360 --> 00:31:27,120
because i just don't necessarily want to

00:31:26,080 --> 00:31:28,559
hover over

00:31:27,120 --> 00:31:30,320
when i'm running this test i want to

00:31:28,559 --> 00:31:31,279
make sure i found the element and i

00:31:30,320 --> 00:31:34,159
click it

00:31:31,279 --> 00:31:35,840
because if you remember in this case

00:31:34,159 --> 00:31:37,440
that the x only appeared when you hover

00:31:35,840 --> 00:31:40,799
over

00:31:37,440 --> 00:31:43,360
uh the element so

00:31:40,799 --> 00:31:44,320
now i can run two more assertions i can

00:31:43,360 --> 00:31:47,600
check

00:31:44,320 --> 00:31:50,399
if the item simple is

00:31:47,600 --> 00:31:50,720
not there anymore because i deleted it

00:31:50,399 --> 00:31:53,600
and

00:31:50,720 --> 00:31:56,000
if the item hard still exists because i

00:31:53,600 --> 00:32:01,039
didn't i didn't touch that one

00:31:56,000 --> 00:32:04,080
so now let's see these in action

00:32:01,039 --> 00:32:06,720
so cypress ran pretty fast i'm gonna go

00:32:04,080 --> 00:32:06,720
slow it down

00:32:11,679 --> 00:32:15,919
so it first creates an item called

00:32:13,760 --> 00:32:18,399
simple

00:32:15,919 --> 00:32:19,120
this then creates an item called hard

00:32:18,399 --> 00:32:21,519
and then

00:32:19,120 --> 00:32:22,880
deletes the item simple and you're left

00:32:21,519 --> 00:32:25,600
with

00:32:22,880 --> 00:32:26,840
the item which is hard and all my

00:32:25,600 --> 00:32:29,600
assertions

00:32:26,840 --> 00:32:31,440
pass

00:32:29,600 --> 00:32:32,799
i do have another refactoring

00:32:31,440 --> 00:32:36,480
opportunity

00:32:32,799 --> 00:32:36,480
in this refactoring opportunity

00:32:36,640 --> 00:32:40,960
what we're going to do is we're going to

00:32:38,000 --> 00:32:42,799
abstract out the home page url

00:32:40,960 --> 00:32:44,640
that i've been visiting before every

00:32:42,799 --> 00:32:47,039
test so

00:32:44,640 --> 00:32:50,000
then what i can do is in my before each

00:32:47,039 --> 00:32:52,399
hook i can just run relative paths

00:32:50,000 --> 00:32:53,360
so we know our application's base url in

00:32:52,399 --> 00:32:56,480
this case

00:32:53,360 --> 00:32:59,559
is localhost 3000 so

00:32:56,480 --> 00:33:01,600
i can abstract that out put it onto my

00:32:59,559 --> 00:33:04,080
cypress.json file which

00:33:01,600 --> 00:33:04,960
is housing a lot of configurations and

00:33:04,080 --> 00:33:08,799
now

00:33:04,960 --> 00:33:12,080
in my test i can have my beforehand hook

00:33:08,799 --> 00:33:13,360
just visit root and then i can visit

00:33:12,080 --> 00:33:16,640
relative paths

00:33:13,360 --> 00:33:21,600
relative to the route

00:33:16,640 --> 00:33:21,600
so another cool refactoring opportunity

00:33:21,679 --> 00:33:27,360
so what about network requests

00:33:24,720 --> 00:33:30,080
we can take care of that too no problem

00:33:27,360 --> 00:33:31,600
cyprus got you covered

00:33:30,080 --> 00:33:33,679
so the first thing is i want to

00:33:31,600 --> 00:33:34,080
illustrate what we would traditionally

00:33:33,679 --> 00:33:36,559
do

00:33:34,080 --> 00:33:38,480
using another framework so when you're

00:33:36,559 --> 00:33:40,320
making an api call

00:33:38,480 --> 00:33:42,559
you most likely would not know when the

00:33:40,320 --> 00:33:44,640
api call would return data back

00:33:42,559 --> 00:33:45,919
so what you wanted to do is you added an

00:33:44,640 --> 00:33:49,039
arbitrary weight

00:33:45,919 --> 00:33:51,600
you can still do that using cyprus so

00:33:49,039 --> 00:33:54,720
you first visit the page

00:33:51,600 --> 00:33:58,399
then you wait for a second

00:33:54,720 --> 00:34:02,399
and then you check uh you assert

00:33:58,399 --> 00:34:04,480
of what your expected values are but

00:34:02,399 --> 00:34:05,519
this is not ideal there's got to be a

00:34:04,480 --> 00:34:08,560
better way

00:34:05,519 --> 00:34:10,079
and with cyprus you do have that better

00:34:08,560 --> 00:34:13,760
way

00:34:10,079 --> 00:34:16,399
because cyprus runs a browser inside of

00:34:13,760 --> 00:34:17,359
its own electron app it's able to take

00:34:16,399 --> 00:34:20,159
control

00:34:17,359 --> 00:34:22,000
over the network requests which are

00:34:20,159 --> 00:34:23,200
leaving your application and coming into

00:34:22,000 --> 00:34:25,119
your application

00:34:23,200 --> 00:34:27,280
so what we can do is we can use

00:34:25,119 --> 00:34:29,760
something called spy

00:34:27,280 --> 00:34:30,399
so essentially using spies you can look

00:34:29,760 --> 00:34:32,720
at

00:34:30,399 --> 00:34:33,679
the network request which is going out

00:34:32,720 --> 00:34:35,919
of your

00:34:33,679 --> 00:34:37,359
application and coming into your

00:34:35,919 --> 00:34:42,800
application so

00:34:37,359 --> 00:34:42,800
what we want to do in this case

00:34:42,960 --> 00:34:49,440
first you uh

00:34:46,159 --> 00:34:53,119
initiate the cyprus network server using

00:34:49,440 --> 00:34:55,200
psi.server and then you can

00:34:53,119 --> 00:34:56,480
basically tell cyprus to look out for

00:34:55,200 --> 00:34:58,560
this url

00:34:56,480 --> 00:34:59,680
so in my application the to-do's

00:34:58,560 --> 00:35:03,200
application

00:34:59,680 --> 00:35:05,359
we saw that when i visit

00:35:03,200 --> 00:35:07,680
the to-do's page it's actually making a

00:35:05,359 --> 00:35:09,520
call to an endpoint called to-do's

00:35:07,680 --> 00:35:11,760
to retrieve a list of to-do's so you can

00:35:09,520 --> 00:35:14,880
pre-load them

00:35:11,760 --> 00:35:16,400
in in our case it was an empty array so

00:35:14,880 --> 00:35:17,119
that's essentially what it's doing so

00:35:16,400 --> 00:35:19,440
here

00:35:17,119 --> 00:35:21,200
you're going to tell cyprus that keep an

00:35:19,440 --> 00:35:23,920
eye out for that url

00:35:21,200 --> 00:35:24,560
and then you give it an alias uh call to

00:35:23,920 --> 00:35:27,359
use

00:35:24,560 --> 00:35:28,640
just so that you can keep track of that

00:35:27,359 --> 00:35:32,160
at a later time

00:35:28,640 --> 00:35:35,599
so now when you visit the home page

00:35:32,160 --> 00:35:38,000
then you can tell cyprus wait for

00:35:35,599 --> 00:35:39,040
that network request to finish so in

00:35:38,000 --> 00:35:41,599
this case it's

00:35:39,040 --> 00:35:42,079
you give the directive at and to do's

00:35:41,599 --> 00:35:43,760
which is

00:35:42,079 --> 00:35:45,119
essentially the alias that you call that

00:35:43,760 --> 00:35:48,480
request

00:35:45,119 --> 00:35:52,400
and then you can check when it completes

00:35:48,480 --> 00:35:54,480
what is it is response body hat so here

00:35:52,400 --> 00:35:57,280
in this case we were expecting an empty

00:35:54,480 --> 00:35:59,440
array to come back so i'm checking

00:35:57,280 --> 00:36:01,040
if the response body has a length of

00:35:59,440 --> 00:36:03,760
zero

00:36:01,040 --> 00:36:04,800
and then no uh items got populated so

00:36:03,760 --> 00:36:08,480
the very end we can see

00:36:04,800 --> 00:36:10,560
psi dot get uh the to do items

00:36:08,480 --> 00:36:12,960
and then you check if it has the length

00:36:10,560 --> 00:36:15,359
of zero

00:36:12,960 --> 00:36:18,320
so this is how you would spy on network

00:36:15,359 --> 00:36:20,079
requests and take control over it

00:36:18,320 --> 00:36:21,599
you could also do one more thing you can

00:36:20,079 --> 00:36:23,200
use stubbing

00:36:21,599 --> 00:36:25,680
stubbing is when you take it a step

00:36:23,200 --> 00:36:28,400
further instead of making

00:36:25,680 --> 00:36:29,599
the actual network requests what if you

00:36:28,400 --> 00:36:32,000
could

00:36:29,599 --> 00:36:32,880
basically mock him and you can have that

00:36:32,000 --> 00:36:35,440
ability

00:36:32,880 --> 00:36:37,520
using cyprus it's gonna look very

00:36:35,440 --> 00:36:38,880
similar to how you did the spies

00:36:37,520 --> 00:36:40,640
the only difference being you're

00:36:38,880 --> 00:36:41,760
actually going to provide a return value

00:36:40,640 --> 00:36:44,480
here

00:36:41,760 --> 00:36:46,400
so here you can see psi dot route and

00:36:44,480 --> 00:36:49,119
what's a request type which is get

00:36:46,400 --> 00:36:50,880
the path is slash to do's and the return

00:36:49,119 --> 00:36:53,599
value is going to be an empty array so

00:36:50,880 --> 00:36:55,839
here if you stop the request cyprus is

00:36:53,599 --> 00:36:57,599
not going to make the actual

00:36:55,839 --> 00:37:00,160
network call instead it's just going to

00:36:57,599 --> 00:37:02,400
return the mock response that you told

00:37:00,160 --> 00:37:06,320
the return when it encounters a call

00:37:02,400 --> 00:37:06,320
to this specific endpoint

00:37:06,560 --> 00:37:12,560
so um the mock data could get

00:37:10,160 --> 00:37:13,440
uh pretty large so what you can do is

00:37:12,560 --> 00:37:16,480
you can put

00:37:13,440 --> 00:37:17,040
your mock data in a in the folder called

00:37:16,480 --> 00:37:19,599
fixture

00:37:17,040 --> 00:37:20,400
fixtures and then you can reference it

00:37:19,599 --> 00:37:23,680
uh

00:37:20,400 --> 00:37:24,960
like um this way so essentially what

00:37:23,680 --> 00:37:26,000
you're saying here is you're telling

00:37:24,960 --> 00:37:29,119
cyprus

00:37:26,000 --> 00:37:29,760
that find the response to this network

00:37:29,119 --> 00:37:32,560
call

00:37:29,760 --> 00:37:33,599
in the fixtures folder and i've named it

00:37:32,560 --> 00:37:36,720
the file name is

00:37:33,599 --> 00:37:38,880
empty hyphen list

00:37:36,720 --> 00:37:40,880
and then you prefix it with fixture

00:37:38,880 --> 00:37:41,760
colon so you're saying when you

00:37:40,880 --> 00:37:45,359
encounter

00:37:41,760 --> 00:37:49,280
the network call to the endpoint

00:37:45,359 --> 00:37:51,839
to do's then return the contents of

00:37:49,280 --> 00:37:53,280
the file empty list which can be found

00:37:51,839 --> 00:37:56,880
in the fixtures

00:37:53,280 --> 00:37:59,200
folder all right so let's run this and

00:37:56,880 --> 00:38:01,200
see let's run all these tests

00:37:59,200 --> 00:38:05,839
so here i want to point out something

00:38:01,200 --> 00:38:05,839
very interesting

00:38:07,440 --> 00:38:21,760
so we can see

00:38:19,200 --> 00:38:23,040
my very first test is actually the very

00:38:21,760 --> 00:38:24,800
the slowest one

00:38:23,040 --> 00:38:27,119
the reason for that is we that's the

00:38:24,800 --> 00:38:29,680
test we put in

00:38:27,119 --> 00:38:33,359
an arbitrary weight of one second so it

00:38:29,680 --> 00:38:35,280
still hasn't completed and

00:38:33,359 --> 00:38:37,200
there you go it just completed the other

00:38:35,280 --> 00:38:37,839
ones run much faster the spies and the

00:38:37,200 --> 00:38:42,400
stubs

00:38:37,839 --> 00:38:42,400
that we did run much faster

00:38:45,040 --> 00:38:50,720
okay how do i take control of a request

00:38:48,880 --> 00:38:53,920
which is going

00:38:50,720 --> 00:38:56,000
out of my application so

00:38:53,920 --> 00:38:57,680
you can also do that you can if you are

00:38:56,000 --> 00:39:00,800
posting

00:38:57,680 --> 00:39:01,680
if you're hitting a post endpoint then

00:39:00,800 --> 00:39:04,960
you can check

00:39:01,680 --> 00:39:05,440
what request got sent to the server so

00:39:04,960 --> 00:39:08,000
here

00:39:05,440 --> 00:39:09,119
very similar to what we did with spying

00:39:08,000 --> 00:39:11,760
now we're going to say

00:39:09,119 --> 00:39:12,880
psi dot route it's a post request to an

00:39:11,760 --> 00:39:15,839
end point called

00:39:12,880 --> 00:39:17,040
slash to do's and we give it an alias

00:39:15,839 --> 00:39:20,160
and then

00:39:17,040 --> 00:39:22,240
once we we know this gets invoked

00:39:20,160 --> 00:39:23,839
when i type something in the input box

00:39:22,240 --> 00:39:26,160
and press the enter key

00:39:23,839 --> 00:39:26,960
so i do all of those actions and then i

00:39:26,160 --> 00:39:30,000
can do psi

00:39:26,960 --> 00:39:31,440
dot weight and i give i reference the

00:39:30,000 --> 00:39:34,880
alias which is new item

00:39:31,440 --> 00:39:37,760
and i check its request body to

00:39:34,880 --> 00:39:38,800
contain a certain structure so should

00:39:37,760 --> 00:39:41,280
have contained

00:39:38,800 --> 00:39:42,240
and structure of the object that i sent

00:39:41,280 --> 00:39:44,560
to the server

00:39:42,240 --> 00:39:45,680
and i can also validate that the

00:39:44,560 --> 00:39:48,000
response came back

00:39:45,680 --> 00:39:49,200
in this case the response also is the

00:39:48,000 --> 00:39:52,079
exact same

00:39:49,200 --> 00:39:52,400
so i'm just validating if the response

00:39:52,079 --> 00:39:56,800
uh

00:39:52,400 --> 00:40:00,079
came back from our server

00:39:56,800 --> 00:40:05,359
so we can see that in action here

00:40:00,079 --> 00:40:05,359
if we slow things down we can see

00:40:06,960 --> 00:40:12,560
that when it posts to a new item it type

00:40:09,839 --> 00:40:14,560
the word test api

00:40:12,560 --> 00:40:16,000
and then it did the assertion which is

00:40:14,560 --> 00:40:19,040
essentially checking

00:40:16,000 --> 00:40:20,720
what the flavor of the the data object

00:40:19,040 --> 00:40:23,200
that you sent to the server is

00:40:20,720 --> 00:40:24,400
and then it's also checking for the

00:40:23,200 --> 00:40:27,200
response back

00:40:24,400 --> 00:40:27,200
from the server

00:40:27,920 --> 00:40:31,359
one of the other common things that we

00:40:30,000 --> 00:40:33,760
we would like to test

00:40:31,359 --> 00:40:35,200
is the ability to test the loading

00:40:33,760 --> 00:40:38,240
elements

00:40:35,200 --> 00:40:39,520
with cyprus you can do that as well so

00:40:38,240 --> 00:40:41,680
here what you will do

00:40:39,520 --> 00:40:43,200
is because the test runs so fast it's

00:40:41,680 --> 00:40:43,839
really hard to get a hold of the loading

00:40:43,200 --> 00:40:46,480
element

00:40:43,839 --> 00:40:47,440
to validate that it was once present in

00:40:46,480 --> 00:40:48,720
the dom

00:40:47,440 --> 00:40:52,480
so what you'll have to do is you're

00:40:48,720 --> 00:40:54,880
gonna have to purposely add a delay so

00:40:52,480 --> 00:40:57,040
you can do that here using the

00:40:54,880 --> 00:40:59,359
side.route command

00:40:57,040 --> 00:41:01,200
and you actually configure a delay in

00:40:59,359 --> 00:41:04,960
here so here in this example

00:41:01,200 --> 00:41:06,720
we've given it a delay of two seconds

00:41:04,960 --> 00:41:08,960
and we've marked the response so it's a

00:41:06,720 --> 00:41:12,480
stubbed response of the empty array

00:41:08,960 --> 00:41:15,599
so when cyprus encounters

00:41:12,480 --> 00:41:16,880
a request to this endpoint then it's

00:41:15,599 --> 00:41:20,079
going to on purpose

00:41:16,880 --> 00:41:21,920
delay that call by two seconds

00:41:20,079 --> 00:41:23,280
so that you can actually see the loading

00:41:21,920 --> 00:41:25,760
element and then

00:41:23,280 --> 00:41:27,200
it responds back after two seconds with

00:41:25,760 --> 00:41:29,359
an empty array that you

00:41:27,200 --> 00:41:31,839
you've mocked so then we can run our

00:41:29,359 --> 00:41:34,000
assertions so in line number 13

00:41:31,839 --> 00:41:36,160
we can we can see that we're checking if

00:41:34,000 --> 00:41:39,040
the loading element is visible

00:41:36,160 --> 00:41:39,839
and then we wait for our loading request

00:41:39,040 --> 00:41:42,079
to complete

00:41:39,839 --> 00:41:43,200
and then finally in line number 19 here

00:41:42,079 --> 00:41:45,200
you can see

00:41:43,200 --> 00:41:46,839
that we're we're checking if the loading

00:41:45,200 --> 00:41:52,240
elements not visible

00:41:46,839 --> 00:41:52,240
anymore so if i run this using cyprus

00:41:52,960 --> 00:41:57,040
you can see here real quick once the

00:41:56,319 --> 00:42:00,319
request

00:41:57,040 --> 00:42:05,359
is invoked so it's still going

00:42:00,319 --> 00:42:05,359
and i can see the loading data

00:42:05,599 --> 00:42:11,839
label uh over here so that's essentially

00:42:08,800 --> 00:42:13,920
uh our loading element

00:42:11,839 --> 00:42:15,280
and then once the request comes back

00:42:13,920 --> 00:42:19,200
that's gonna go

00:42:15,280 --> 00:42:19,200
away after two seconds

00:42:19,920 --> 00:42:24,079
and then my test would be completed

00:42:27,200 --> 00:42:31,359
all right so all this stuff is great so

00:42:29,359 --> 00:42:33,920
who's using cyprus

00:42:31,359 --> 00:42:36,640
so what i did was i went to the i went

00:42:33,920 --> 00:42:41,200
to npm and checked for downloads

00:42:36,640 --> 00:42:44,400
and i saw over the period

00:42:41,200 --> 00:42:47,760
of since when cyprus got released

00:42:44,400 --> 00:42:50,720
that we started seeing a linear increase

00:42:47,760 --> 00:42:51,920
in the cyprus download so it's gotten a

00:42:50,720 --> 00:42:53,839
lot of adoption

00:42:51,920 --> 00:42:55,440
and i can tell a lot of more and more

00:42:53,839 --> 00:42:56,880
companies have started adopting this

00:42:55,440 --> 00:42:59,839
technology

00:42:56,880 --> 00:43:01,680
as their end-to-end testing solution for

00:42:59,839 --> 00:43:05,280
their web applications so over

00:43:01,680 --> 00:43:09,599
6.5 million downloads uh as of

00:43:05,280 --> 00:43:14,240
as of today since uh weight started

00:43:09,599 --> 00:43:14,240
way back way back a couple of years ago

00:43:14,640 --> 00:43:19,040
so i didn't stop there i actually went

00:43:16,960 --> 00:43:22,319
to the github repo

00:43:19,040 --> 00:43:24,640
and i checked for activity i checked

00:43:22,319 --> 00:43:25,359
the number of stars how many people have

00:43:24,640 --> 00:43:27,119
forked it

00:43:25,359 --> 00:43:29,200
how many pull requests are out there and

00:43:27,119 --> 00:43:32,400
the number of contributors and i can see

00:43:29,200 --> 00:43:35,119
it's a very active repo in the community

00:43:32,400 --> 00:43:36,560
which is which is a great sign so that

00:43:35,119 --> 00:43:39,040
gives me a lot of confidence

00:43:36,560 --> 00:43:40,079
in if i want to adopt a technology like

00:43:39,040 --> 00:43:44,000
this

00:43:40,079 --> 00:43:44,000
for my end-to-end testing needs

00:43:50,319 --> 00:43:55,040
so i want to leave everyone with a quote

00:43:52,560 --> 00:43:58,960
which is dear to my heart

00:43:55,040 --> 00:44:01,040
when it comes to testing quality means

00:43:58,960 --> 00:44:02,640
doing it right even when no one is

00:44:01,040 --> 00:44:05,520
looking

00:44:02,640 --> 00:44:07,280
this quote inspired me a lot to drive

00:44:05,520 --> 00:44:11,440
some testing initiatives

00:44:07,280 --> 00:44:13,520
in the places i've worked at so far

00:44:11,440 --> 00:44:14,720
thank you so much my name is avendro

00:44:13,520 --> 00:44:17,359
fernando

00:44:14,720 --> 00:44:18,000
and hope you enjoyed the session and i

00:44:17,359 --> 00:44:21,440
would love

00:44:18,000 --> 00:44:23,680
feedback so please provide some feedback

00:44:21,440 --> 00:44:27,839
and i hope you find a lot of value in

00:44:23,680 --> 00:44:37,839
adapting cyprus for your testing needs

00:44:27,839 --> 00:44:37,839
thank you

00:44:38,000 --> 00:44:41,599
i hope uh all of you enjoyed it uh if

00:44:40,480 --> 00:44:44,640
you have any questions

00:44:41,599 --> 00:44:48,160
please post them on chat

00:44:44,640 --> 00:44:50,000
uh or q a uh and i'm gonna be posting

00:44:48,160 --> 00:44:52,240
the slides right now

00:44:50,000 --> 00:44:53,839
on the chat and i'll also post the

00:44:52,240 --> 00:44:57,359
slides on twitter

00:44:53,839 --> 00:44:57,359
for your reference in the future

00:45:02,160 --> 00:45:05,839
so yeah there's a question um for

00:45:05,200 --> 00:45:07,920
end-to-end

00:45:05,839 --> 00:45:10,240
testing specifically was it is it better

00:45:07,920 --> 00:45:14,079
to run against a real live server

00:45:10,240 --> 00:45:16,480
or uh mocking i think

00:45:14,079 --> 00:45:17,599
i think my recommendation is it it

00:45:16,480 --> 00:45:20,000
really depends

00:45:17,599 --> 00:45:21,040
i would recommend the critical scenarios

00:45:20,000 --> 00:45:23,040
or

00:45:21,040 --> 00:45:25,680
the smoke test type of scenarios uh

00:45:23,040 --> 00:45:27,280
running against a real live server

00:45:25,680 --> 00:45:29,839
uh but then some of them i think we can

00:45:27,280 --> 00:45:32,319
afford to do it uh by mocking them so

00:45:29,839 --> 00:45:33,040
i would i would recommend using spying

00:45:32,319 --> 00:45:35,040
and

00:45:33,040 --> 00:45:38,640
stubbing and using a mix and match

00:45:35,040 --> 00:45:38,640
approach for your application

00:45:44,960 --> 00:45:48,560
uh i see one more question in q a uh how

00:45:48,000 --> 00:45:51,599
would you

00:45:48,560 --> 00:45:54,880
uh compare cyprus to other leading

00:45:51,599 --> 00:45:56,880
javascript test runners i haven't um

00:45:54,880 --> 00:45:59,280
really seen an end-to-end testing

00:45:56,880 --> 00:46:02,720
specific javascript

00:45:59,280 --> 00:46:04,160
testrunner so i

00:46:02,720 --> 00:46:06,480
i don't really have a good comparison

00:46:04,160 --> 00:46:08,400
there but i think if we were to compare

00:46:06,480 --> 00:46:10,640
cyprus to technologies like

00:46:08,400 --> 00:46:12,560
selenium then i think for web

00:46:10,640 --> 00:46:14,640
applications cyprus is providing a lot

00:46:12,560 --> 00:46:28,960
of value and it's able to run

00:46:14,640 --> 00:46:32,560
run much faster

00:46:28,960 --> 00:46:33,359
all right um yep seems like that's all

00:46:32,560 --> 00:46:34,880
the

00:46:33,359 --> 00:46:37,119
all the questions i'll go post the

00:46:34,880 --> 00:46:38,960
slides and uh thank you all for

00:46:37,119 --> 00:46:43,839
for attending and i hope you enjoy the

00:46:38,960 --> 00:46:43,839
rest of the conference

00:46:45,040 --> 00:46:47,119

YouTube URL: https://www.youtube.com/watch?v=nBeKoMw0z8c


