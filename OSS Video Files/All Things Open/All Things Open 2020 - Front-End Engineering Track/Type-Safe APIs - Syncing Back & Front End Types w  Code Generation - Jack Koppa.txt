Title: Type-Safe APIs - Syncing Back & Front End Types w  Code Generation - Jack Koppa
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Engineering Track
Description: 
	Presented by: Jack Koppa, POLITICO
Presented at All Things Open 2020 - Front-End Engineering Track

Abstract: The same thing that makes SPAs great for large apps (separation of concerns & resources) also makes them really frustrating in one particular way: consistency between models & definitions, between back & front end code. The answer: code generation tools, to take API definitions & output usable TypeScript. We'll discuss how we can go from the most frustrating part of any SPA development workflow, to what can become the most satisfying. We'll focus primarily on Open API & Swagger, 2 potential API definition standards, while referencing tools for other cases (even a bit of GraphQL). We'll talk about making use of generated interfaces to reduce code duplication & increase type safety across our apps. We'll look at code organization patterns in front-end frameworks, to minimize the hassle of referencing generated TypeScript files in the first place. And we'll talk briefly about CI & NPM versioning patterns we use @ POLITICO to automate this process in quite useful ways.
Captions: 
	00:00:05,120 --> 00:00:07,279
all right so hopefully everyone's seeing

00:00:06,799 --> 00:00:09,920
this

00:00:07,279 --> 00:00:11,120
title slide here of type safe apis what

00:00:09,920 --> 00:00:14,960
we're talking about is

00:00:11,120 --> 00:00:15,599
uh a way to sync back and front end

00:00:14,960 --> 00:00:18,880
types

00:00:15,599 --> 00:00:22,160
and also just api calls in general

00:00:18,880 --> 00:00:25,359
using code generation and the idea here

00:00:22,160 --> 00:00:26,560
is that as applications have gotten more

00:00:25,359 --> 00:00:30,240
complex

00:00:26,560 --> 00:00:32,399
obviously a consistent aspect of

00:00:30,240 --> 00:00:34,399
software development is complexity

00:00:32,399 --> 00:00:36,079
but as some of that complexity has moved

00:00:34,399 --> 00:00:37,520
more towards the front end and we get

00:00:36,079 --> 00:00:41,440
things like react and

00:00:37,520 --> 00:00:43,680
angular view and spelt these

00:00:41,440 --> 00:00:44,480
frameworks where a decent amount of the

00:00:43,680 --> 00:00:46,559
complexity

00:00:44,480 --> 00:00:49,440
of software development now lives in the

00:00:46,559 --> 00:00:53,039
browser on the client side

00:00:49,440 --> 00:00:54,879
we run into issues of

00:00:53,039 --> 00:00:57,680
keeping consistency between back-end

00:00:54,879 --> 00:01:00,239
code what runs on the server and perhaps

00:00:57,680 --> 00:01:00,879
informs apis that then our clients need

00:01:00,239 --> 00:01:03,359
to call

00:01:00,879 --> 00:01:04,400
we run into issues of keeping those two

00:01:03,359 --> 00:01:07,439
things consistent

00:01:04,400 --> 00:01:09,040
and knowing exactly what one

00:01:07,439 --> 00:01:10,560
and one knowing exactly what the other

00:01:09,040 --> 00:01:12,479
is expecting

00:01:10,560 --> 00:01:14,479
we struggled with this a bit a bit at

00:01:12,479 --> 00:01:16,080
politico as we moved more towards these

00:01:14,479 --> 00:01:17,040
single page applications for

00:01:16,080 --> 00:01:19,119
architecture

00:01:17,040 --> 00:01:20,240
and then over the past uh year or two

00:01:19,119 --> 00:01:22,720
we're pretty happy with

00:01:20,240 --> 00:01:24,080
um the solutions that we've come across

00:01:22,720 --> 00:01:24,960
uh which is what we're going to talk to

00:01:24,080 --> 00:01:26,400
you

00:01:24,960 --> 00:01:28,400
or what i'm going to talk with you about

00:01:26,400 --> 00:01:30,479
today my name is jack kopp i'm a lead

00:01:28,400 --> 00:01:32,079
front end developer at politico

00:01:30,479 --> 00:01:34,400
we happen to use vue as our front end

00:01:32,079 --> 00:01:36,640
framework we use a lot of typescript

00:01:34,400 --> 00:01:38,000
do some shared components i really enjoy

00:01:36,640 --> 00:01:40,079
working on front-end

00:01:38,000 --> 00:01:41,119
engineering or front-end devops type of

00:01:40,079 --> 00:01:43,360
work

00:01:41,119 --> 00:01:45,600
which is where a topic like this comes

00:01:43,360 --> 00:01:45,600
from

00:01:45,759 --> 00:01:49,680
a rough timeline of uh what we're going

00:01:48,000 --> 00:01:51,439
to go through today

00:01:49,680 --> 00:01:53,520
and like was mentioned at the beginning

00:01:51,439 --> 00:01:54,000
uh please feel free to ask questions

00:01:53,520 --> 00:01:56,159
throughout

00:01:54,000 --> 00:01:57,759
and i'll try to take some moments to

00:01:56,159 --> 00:02:00,479
pause throughout to just

00:01:57,759 --> 00:02:01,119
peruse give you a break from listening

00:02:00,479 --> 00:02:03,759
to

00:02:01,119 --> 00:02:05,280
listening to my voice and see if there's

00:02:03,759 --> 00:02:06,240
any questions that have come up so i can

00:02:05,280 --> 00:02:08,640
answer those

00:02:06,240 --> 00:02:09,840
so i think roughly we'll be doing like

00:02:08,640 --> 00:02:11,120
10 minutes of content

00:02:09,840 --> 00:02:13,599
i'll stop and peruse see if there are

00:02:11,120 --> 00:02:15,360
any questions and then we'll continue

00:02:13,599 --> 00:02:16,640
we're going to start with a background a

00:02:15,360 --> 00:02:18,720
little bit of uh

00:02:16,640 --> 00:02:19,760
how we got to where we are with

00:02:18,720 --> 00:02:22,879
data-driven

00:02:19,760 --> 00:02:23,360
single-page applications or spas being a

00:02:22,879 --> 00:02:24,720
common

00:02:23,360 --> 00:02:26,720
architectural practice for web

00:02:24,720 --> 00:02:28,959
applications and what pain points

00:02:26,720 --> 00:02:30,239
that causes then we're going to talk a

00:02:28,959 --> 00:02:32,560
little bit about the remedy

00:02:30,239 --> 00:02:34,160
which is this type sharing and how that

00:02:32,560 --> 00:02:36,640
can work with code generation

00:02:34,160 --> 00:02:37,440
and then we want to show uh we want to

00:02:36,640 --> 00:02:39,760
show some code

00:02:37,440 --> 00:02:40,640
and see what this looks like in practice

00:02:39,760 --> 00:02:42,800
uh in an

00:02:40,640 --> 00:02:44,560
enterprise or pseudo-enterprise

00:02:42,800 --> 00:02:45,519
environment something to keep in mind is

00:02:44,560 --> 00:02:48,000
this uh

00:02:45,519 --> 00:02:49,040
this is not required for everyone for

00:02:48,000 --> 00:02:51,360
example if you

00:02:49,040 --> 00:02:52,560
have um say you have a single page

00:02:51,360 --> 00:02:54,000
application

00:02:52,560 --> 00:02:56,000
but it's relatively straightforward

00:02:54,000 --> 00:02:58,159
maybe it's just displaying one or two

00:02:56,000 --> 00:02:59,599
different uis and you only have

00:02:58,159 --> 00:03:01,599
one or two different endpoints that you

00:02:59,599 --> 00:03:05,440
need to worry about uh

00:03:01,599 --> 00:03:07,680
the overhead of of generating types to

00:03:05,440 --> 00:03:10,560
describe those apis or generating

00:03:07,680 --> 00:03:12,159
methods it may not be worth it

00:03:10,560 --> 00:03:13,840
especially if you never find yourself

00:03:12,159 --> 00:03:15,360
being concerned about the front end

00:03:13,840 --> 00:03:16,640
knowing what the back end is doing and

00:03:15,360 --> 00:03:18,159
them getting out of sync if that's not

00:03:16,640 --> 00:03:21,040
an issue for you

00:03:18,159 --> 00:03:22,239
then certainly no need to no need to

00:03:21,040 --> 00:03:24,879
worry about this i'm

00:03:22,239 --> 00:03:26,000
i'd be honored if you continue listening

00:03:24,879 --> 00:03:27,680
but uh

00:03:26,000 --> 00:03:29,519
uh it's definitely not required for

00:03:27,680 --> 00:03:30,319
everyone but as soon as there's a

00:03:29,519 --> 00:03:32,560
certain scale

00:03:30,319 --> 00:03:34,400
of perhaps calling multiple apis

00:03:32,560 --> 00:03:35,599
multiple different applications or many

00:03:34,400 --> 00:03:38,000
different endpoints

00:03:35,599 --> 00:03:38,959
and or having many different clients

00:03:38,000 --> 00:03:41,280
trying to call

00:03:38,959 --> 00:03:42,159
the same api and if you ever find

00:03:41,280 --> 00:03:45,040
yourself thinking

00:03:42,159 --> 00:03:46,879
i work on the front end code and i i

00:03:45,040 --> 00:03:48,080
know my back end developers but i don't

00:03:46,879 --> 00:03:50,080
typically work on the back end

00:03:48,080 --> 00:03:51,280
and i often run into something where

00:03:50,080 --> 00:03:52,319
they've changed something and i wasn't

00:03:51,280 --> 00:03:54,159
expecting it

00:03:52,319 --> 00:03:55,599
or i wanted to change something and they

00:03:54,159 --> 00:03:56,959
didn't know that i needed an update to

00:03:55,599 --> 00:03:58,560
the api

00:03:56,959 --> 00:04:00,480
uh if you run into those types of

00:03:58,560 --> 00:04:04,080
questions then that's where

00:04:00,480 --> 00:04:06,080
this remedy section might be useful

00:04:04,080 --> 00:04:08,159
let's start with the background and

00:04:06,080 --> 00:04:09,519
we're going to do it as a as a pseudo

00:04:08,159 --> 00:04:12,319
poll

00:04:09,519 --> 00:04:13,040
i have a couple questions and would love

00:04:12,319 --> 00:04:15,120
for those

00:04:13,040 --> 00:04:16,160
uh interested in responding to uh just

00:04:15,120 --> 00:04:18,639
take some time to

00:04:16,160 --> 00:04:20,479
add quick answers into uh into the chat

00:04:18,639 --> 00:04:22,560
and i'll take a look at those in a bit

00:04:20,479 --> 00:04:24,080
so the first is have you worked with

00:04:22,560 --> 00:04:26,240
server rendered apps before

00:04:24,080 --> 00:04:28,720
um so some examples what that might be

00:04:26,240 --> 00:04:32,160
uh rails

00:04:28,720 --> 00:04:34,720
laravel spring boot for java um

00:04:32,160 --> 00:04:36,320
even something like uh like wordpress is

00:04:34,720 --> 00:04:37,360
also you know php in the same way that

00:04:36,320 --> 00:04:40,560
laravel is

00:04:37,360 --> 00:04:43,840
where uh this was often the standard for

00:04:40,560 --> 00:04:43,840
web application development

00:04:44,560 --> 00:04:49,120
up to somewhat recently where if you

00:04:46,960 --> 00:04:51,199
needed a web application ui

00:04:49,120 --> 00:04:52,160
you would have a back-end framework

00:04:51,199 --> 00:04:54,000
running code

00:04:52,160 --> 00:04:55,440
someone requests a page and the back-end

00:04:54,000 --> 00:04:57,919
would render that thing

00:04:55,440 --> 00:04:59,440
what that meant was that the the ui code

00:04:57,919 --> 00:05:00,720
lived with the back end code it was

00:04:59,440 --> 00:05:04,320
right next to each other they were

00:05:00,720 --> 00:05:04,880
mashed together um and uh and that meant

00:05:04,320 --> 00:05:06,160
that

00:05:04,880 --> 00:05:08,000
anytime you were changing things about

00:05:06,160 --> 00:05:10,800
complex data types you know

00:05:08,000 --> 00:05:11,840
those things live together so that's

00:05:10,800 --> 00:05:13,840
question number one

00:05:11,840 --> 00:05:15,199
you know what what what type of uh

00:05:13,840 --> 00:05:16,960
server rendered frameworks

00:05:15,199 --> 00:05:18,639
uh or server render applications have

00:05:16,960 --> 00:05:20,960
you worked on in the past

00:05:18,639 --> 00:05:21,680
and then number two are you now or have

00:05:20,960 --> 00:05:23,440
you recently

00:05:21,680 --> 00:05:25,120
worked instead with a single page

00:05:23,440 --> 00:05:27,680
applications um so

00:05:25,120 --> 00:05:28,720
obviously react being the big one or

00:05:27,680 --> 00:05:32,400
angular spell

00:05:28,720 --> 00:05:32,400
view ember

00:05:32,639 --> 00:05:37,280
yeah and then three are you at all

00:05:35,919 --> 00:05:38,800
and this is a bit of a leading question

00:05:37,280 --> 00:05:40,160
but i'd be interested if you haven't had

00:05:38,800 --> 00:05:43,360
this experience as well

00:05:40,160 --> 00:05:46,080
at all frustrated by having moved from

00:05:43,360 --> 00:05:46,960
a you know a server rendered application

00:05:46,080 --> 00:05:50,160
uh environment

00:05:46,960 --> 00:05:52,560
to now perhaps a single page application

00:05:50,160 --> 00:05:53,600
uh frustrated by the handling of data so

00:05:52,560 --> 00:05:56,800
uh getting

00:05:53,600 --> 00:05:58,560
data posting data uh typing the

00:05:56,800 --> 00:06:00,080
complex objects that might be involved

00:05:58,560 --> 00:06:02,000
maintaining complex objects

00:06:00,080 --> 00:06:03,759
trying to keep track of when i'm making

00:06:02,000 --> 00:06:04,800
this request does my object look like

00:06:03,759 --> 00:06:06,479
this there's an array

00:06:04,800 --> 00:06:07,840
that type of thing so a sample response

00:06:06,479 --> 00:06:08,639
in chat could look like this i've worked

00:06:07,840 --> 00:06:10,800
with dot net

00:06:08,639 --> 00:06:11,680
um you know now i'm in react and i feel

00:06:10,800 --> 00:06:15,120
happy i feel

00:06:11,680 --> 00:06:17,440
meh or i feel sad about the experience

00:06:15,120 --> 00:06:19,440
i'll take a look at that in a bit the

00:06:17,440 --> 00:06:22,800
political background here is that

00:06:19,440 --> 00:06:24,800
previously most of the political

00:06:22,800 --> 00:06:27,280
applications were

00:06:24,800 --> 00:06:28,880
java applications that rendered jsps so

00:06:27,280 --> 00:06:32,800
a java

00:06:28,880 --> 00:06:34,800
file where you took bits of data

00:06:32,800 --> 00:06:36,400
and on the server decided okay here i

00:06:34,800 --> 00:06:38,240
want this dynamic data to go in the

00:06:36,400 --> 00:06:40,000
header and here i want this dynamic data

00:06:38,240 --> 00:06:42,479
to go into sidebar

00:06:40,000 --> 00:06:44,319
whereas now uh most of our or all of our

00:06:42,479 --> 00:06:45,440
new applications are single page apps so

00:06:44,319 --> 00:06:47,039
they call

00:06:45,440 --> 00:06:48,880
java applications but they call them

00:06:47,039 --> 00:06:51,919
through apis and

00:06:48,880 --> 00:06:53,360
we're using vue on our front end and the

00:06:51,919 --> 00:06:55,199
leading question for number three

00:06:53,360 --> 00:06:56,960
we were certainly a little frustrated

00:06:55,199 --> 00:06:57,759
with this experience as things got more

00:06:56,960 --> 00:06:59,280
complex

00:06:57,759 --> 00:07:02,479
more complex with kind of a micro

00:06:59,280 --> 00:07:04,880
services architecture

00:07:02,479 --> 00:07:05,840
let's actually pause i want to take a

00:07:04,880 --> 00:07:11,440
quick look at

00:07:05,840 --> 00:07:11,440
chat just to make sure

00:07:13,599 --> 00:07:17,120
awesome thanks for the responses from

00:07:15,039 --> 00:07:19,599
everyone all right so we see

00:07:17,120 --> 00:07:20,160
um some yes yes having worked with these

00:07:19,599 --> 00:07:23,120
before

00:07:20,160 --> 00:07:24,160
some spring boot some meh with the

00:07:23,120 --> 00:07:27,759
experience of

00:07:24,160 --> 00:07:30,880
data between uh oh nice i have used

00:07:27,759 --> 00:07:32,479
uh swagger uh generation that's great

00:07:30,880 --> 00:07:35,520
that's gonna be relevant here

00:07:32,479 --> 00:07:38,560
um and then from mark very

00:07:35,520 --> 00:07:42,240
uh a little little frustrated perhaps

00:07:38,560 --> 00:07:45,680
uh some tears okay cool um

00:07:42,240 --> 00:07:47,120
so this is great uh asp.net and react uh

00:07:45,680 --> 00:07:48,960
from katie that's great that's very

00:07:47,120 --> 00:07:51,599
relevant here cool so

00:07:48,960 --> 00:07:52,240
at least for uh some of you this is

00:07:51,599 --> 00:07:55,680
gonna be

00:07:52,240 --> 00:07:57,440
hopefully helpful so when we think about

00:07:55,680 --> 00:07:59,120
being in this single page application

00:07:57,440 --> 00:08:00,479
environment um

00:07:59,120 --> 00:08:02,240
we're thinking about where does our data

00:08:00,479 --> 00:08:04,160
come from now

00:08:02,240 --> 00:08:05,599
and then we're thinking about how is it

00:08:04,160 --> 00:08:08,960
documented so

00:08:05,599 --> 00:08:12,240
who are who's responsible sorry

00:08:08,960 --> 00:08:15,680
which uh which application or which

00:08:12,240 --> 00:08:17,120
um uh which repo which people which

00:08:15,680 --> 00:08:18,160
developers are responsible for the

00:08:17,120 --> 00:08:21,199
source of truth of

00:08:18,160 --> 00:08:23,440
your data and so again uh if if

00:08:21,199 --> 00:08:24,720
your data in your application is maybe

00:08:23,440 --> 00:08:25,440
just an object with one or two

00:08:24,720 --> 00:08:27,039
properties

00:08:25,440 --> 00:08:28,319
uh often you don't need to worry about

00:08:27,039 --> 00:08:29,199
this because it's pretty easy to keep it

00:08:28,319 --> 00:08:32,240
in your head

00:08:29,199 --> 00:08:33,599
um that when i call this endpoint this

00:08:32,240 --> 00:08:34,800
is the thing that i'm going to get but

00:08:33,599 --> 00:08:36,240
what happens when

00:08:34,800 --> 00:08:37,919
when you call an endpoint you get an

00:08:36,240 --> 00:08:39,919
array of customers and in that

00:08:37,919 --> 00:08:41,760
is an array of addresses and next to

00:08:39,919 --> 00:08:42,880
that is an array of users associated

00:08:41,760 --> 00:08:44,560
with those customers

00:08:42,880 --> 00:08:46,640
and next to that is the things that they

00:08:44,560 --> 00:08:48,720
subscribe to and how do you access those

00:08:46,640 --> 00:08:50,480
so uh given that this is kind of a

00:08:48,720 --> 00:08:52,839
front-end engineering talk what we're

00:08:50,480 --> 00:08:54,000
interested here in is the the pain point

00:08:52,839 --> 00:08:56,000
of

00:08:54,000 --> 00:08:57,519
i'm trying to interact with my data in

00:08:56,000 --> 00:09:01,200
my single page application and

00:08:57,519 --> 00:09:02,080
i lose track of how to interact with it

00:09:01,200 --> 00:09:03,839
i lose track of

00:09:02,080 --> 00:09:05,760
what the most recent state of it is and

00:09:03,839 --> 00:09:07,200
i don't know if it's my job to keep

00:09:05,760 --> 00:09:08,080
track of that or if it's the back end's

00:09:07,200 --> 00:09:09,200
job or

00:09:08,080 --> 00:09:11,120
i think what happens in a lot of

00:09:09,200 --> 00:09:12,080
organizations is uh you have it

00:09:11,120 --> 00:09:14,000
duplicated

00:09:12,080 --> 00:09:15,519
so like what happens when it changes for

00:09:14,000 --> 00:09:16,480
example the back end is now sending

00:09:15,519 --> 00:09:18,640
something different

00:09:16,480 --> 00:09:20,320
um but the front end was not aware that

00:09:18,640 --> 00:09:21,680
that happens often the answer to this

00:09:20,320 --> 00:09:22,720
question of what happens when it changes

00:09:21,680 --> 00:09:24,560
is it just breaks

00:09:22,720 --> 00:09:26,240
and you know we don't know about it

00:09:24,560 --> 00:09:27,200
until a user sees that a page isn't

00:09:26,240 --> 00:09:28,640
working so that's

00:09:27,200 --> 00:09:31,519
that's a huge part of what we're trying

00:09:28,640 --> 00:09:35,279
to address at politico

00:09:31,519 --> 00:09:35,680
um the reason that uh the reason that

00:09:35,279 --> 00:09:37,440
some

00:09:35,680 --> 00:09:39,279
some of this transition has occurred is

00:09:37,440 --> 00:09:42,320
that uh

00:09:39,279 --> 00:09:44,320
when when server uh when server rendered

00:09:42,320 --> 00:09:45,120
applications were the more popular

00:09:44,320 --> 00:09:47,680
approach

00:09:45,120 --> 00:09:48,480
uh or or the standard approach is that

00:09:47,680 --> 00:09:50,480
um

00:09:48,480 --> 00:09:52,959
you needed the resources of a server in

00:09:50,480 --> 00:09:55,200
order to render your application

00:09:52,959 --> 00:09:56,880
so it meant that uh if you were using

00:09:55,200 --> 00:09:57,440
the server to render your application

00:09:56,880 --> 00:10:00,240
that

00:09:57,440 --> 00:10:01,839
uh all the things involved with that

00:10:00,240 --> 00:10:05,200
data management lived right next to each

00:10:01,839 --> 00:10:07,040
other they all lived on the server

00:10:05,200 --> 00:10:08,800
then some things happened and and the

00:10:07,040 --> 00:10:10,880
biggest one is just that browsers got

00:10:08,800 --> 00:10:12,640
more processing power uh and so

00:10:10,880 --> 00:10:13,920
obviously computers

00:10:12,640 --> 00:10:16,240
computers do that thing where they get

00:10:13,920 --> 00:10:18,240
more powerful over time what that meant

00:10:16,240 --> 00:10:21,440
was that all of a sudden you had

00:10:18,240 --> 00:10:23,120
on a client side your user their browser

00:10:21,440 --> 00:10:24,399
had processing power that could actually

00:10:23,120 --> 00:10:25,360
do things for your application you

00:10:24,399 --> 00:10:27,200
didn't need to

00:10:25,360 --> 00:10:28,560
um you didn't need to every time they

00:10:27,200 --> 00:10:30,480
landed on a new page

00:10:28,560 --> 00:10:31,760
for you to for your server to do the

00:10:30,480 --> 00:10:33,680
work of

00:10:31,760 --> 00:10:35,200
rendering for example a user's profile

00:10:33,680 --> 00:10:38,399
page or

00:10:35,200 --> 00:10:40,079
a customer's set of addresses or things

00:10:38,399 --> 00:10:42,640
like that

00:10:40,079 --> 00:10:43,920
it was possible for uh it became

00:10:42,640 --> 00:10:46,160
possible for

00:10:43,920 --> 00:10:46,959
browsers clients to start doing some of

00:10:46,160 --> 00:10:49,760
the heavy lifting

00:10:46,959 --> 00:10:50,880
obviously javascript and and so we end

00:10:49,760 --> 00:10:53,920
up with things like

00:10:50,880 --> 00:10:56,959
angular and react that

00:10:53,920 --> 00:10:59,040
that can now put the logic behind a web

00:10:56,959 --> 00:11:01,120
application experience

00:10:59,040 --> 00:11:03,680
into or some of yeah some of the

00:11:01,120 --> 00:11:06,079
programming work into the front end

00:11:03,680 --> 00:11:07,279
um so that's that's this single page

00:11:06,079 --> 00:11:10,399
application where

00:11:07,279 --> 00:11:12,399
uh you don't need to reload a page

00:11:10,399 --> 00:11:13,680
uh you get to stay on a page it looks

00:11:12,399 --> 00:11:14,399
like you're all on one page things

00:11:13,680 --> 00:11:17,760
happen

00:11:14,399 --> 00:11:20,399
quickly um and this has also been

00:11:17,760 --> 00:11:21,839
really convenient for team breakdowns uh

00:11:20,399 --> 00:11:23,839
for some specialization

00:11:21,839 --> 00:11:25,040
at least on our end at politico we have

00:11:23,839 --> 00:11:27,279
um

00:11:25,040 --> 00:11:28,079
uh you know it's a slightly fuzzy line

00:11:27,279 --> 00:11:30,160
but we have a

00:11:28,079 --> 00:11:31,760
we have a line between our back-end

00:11:30,160 --> 00:11:33,200
developers who work on our apis and our

00:11:31,760 --> 00:11:34,160
front-end developers who work typically

00:11:33,200 --> 00:11:36,800
in a vue

00:11:34,160 --> 00:11:37,519
javascript typescript code base this is

00:11:36,800 --> 00:11:38,959
great for

00:11:37,519 --> 00:11:41,120
specialization and being able to move

00:11:38,959 --> 00:11:43,920
quickly it's less convenient for knowing

00:11:41,120 --> 00:11:46,480
who's responsible for what happens when

00:11:43,920 --> 00:11:49,680
something changes

00:11:46,480 --> 00:11:52,880
uh i love uh

00:11:49,680 --> 00:11:55,680
like anyone uh love xkcd and so this is

00:11:52,880 --> 00:11:57,839
uh this diagram here is tenuously

00:11:55,680 --> 00:12:00,560
related to what we're talking about but

00:11:57,839 --> 00:12:02,399
uh it shows the it does show a little

00:12:00,560 --> 00:12:03,279
bit of the pain point that we run into

00:12:02,399 --> 00:12:06,639
so

00:12:03,279 --> 00:12:10,079
let's call this this thing uh there

00:12:06,639 --> 00:12:12,399
that lots of things are interconnected

00:12:10,079 --> 00:12:14,240
it's very easy to create connections

00:12:12,399 --> 00:12:16,639
between those things

00:12:14,240 --> 00:12:17,360
but let's call it a let's call it a

00:12:16,639 --> 00:12:19,440
server

00:12:17,360 --> 00:12:20,720
monolith where everything lives together

00:12:19,440 --> 00:12:22,480
and it would be really nice

00:12:20,720 --> 00:12:24,079
like i mentioned with the breakdown of

00:12:22,480 --> 00:12:25,040
teams it would be nice if the back end

00:12:24,079 --> 00:12:28,320
team could move

00:12:25,040 --> 00:12:30,160
separately from the front end team

00:12:28,320 --> 00:12:31,360
so we end up with something instead that

00:12:30,160 --> 00:12:32,720
looks like this like

00:12:31,360 --> 00:12:35,519
single page applications with

00:12:32,720 --> 00:12:37,279
microservices so that

00:12:35,519 --> 00:12:39,200
our front-end team can make a change to

00:12:37,279 --> 00:12:41,120
the view code without having to

00:12:39,200 --> 00:12:42,800
worry about what the back end team is

00:12:41,120 --> 00:12:44,240
doing or or

00:12:42,800 --> 00:12:46,720
you know how those two things are going

00:12:44,240 --> 00:12:49,040
to be deployed and the back-end team can

00:12:46,720 --> 00:12:50,000
make changes before we even need to

00:12:49,040 --> 00:12:51,360
consume them

00:12:50,000 --> 00:12:54,160
they can say all right i'm preparing

00:12:51,360 --> 00:12:56,639
this api for you in advance

00:12:54,160 --> 00:12:58,240
so uh that's the benefit of the

00:12:56,639 --> 00:12:59,920
microservices and so

00:12:58,240 --> 00:13:01,360
what we're talking about today is kind

00:12:59,920 --> 00:13:04,399
of in this

00:13:01,360 --> 00:13:08,160
in this ideal area here where

00:13:04,399 --> 00:13:11,519
we want to we want the benefits

00:13:08,160 --> 00:13:12,240
of a a microservices architecture where

00:13:11,519 --> 00:13:15,920
things are

00:13:12,240 --> 00:13:17,760
separated easy to have differing uh

00:13:15,920 --> 00:13:19,519
areas of expertise and people to work

00:13:17,760 --> 00:13:22,240
independently of one another but

00:13:19,519 --> 00:13:23,279
to not struggle so much when we make

00:13:22,240 --> 00:13:24,959
changes

00:13:23,279 --> 00:13:26,639
separately from one another and and

00:13:24,959 --> 00:13:29,200
don't know what the implications of

00:13:26,639 --> 00:13:31,839
those things are going to be

00:13:29,200 --> 00:13:32,639
so we're looking for ways to keep our

00:13:31,839 --> 00:13:35,839
back end

00:13:32,639 --> 00:13:37,760
uh code in sync with our front-end code

00:13:35,839 --> 00:13:39,839
we'd like to do this while still getting

00:13:37,760 --> 00:13:42,000
the benefits of these single page

00:13:39,839 --> 00:13:43,760
application architectures we're looking

00:13:42,000 --> 00:13:45,760
for ways to reduce the amount of

00:13:43,760 --> 00:13:47,120
duplication we have to make things more

00:13:45,760 --> 00:13:49,519
dry in a sense

00:13:47,120 --> 00:13:50,800
if someone if someone's application is

00:13:49,519 --> 00:13:52,639
complex enough that they need to

00:13:50,800 --> 00:13:54,079
annotate

00:13:52,639 --> 00:13:55,920
when i have a customer object it has an

00:13:54,079 --> 00:13:57,519
address and uh

00:13:55,920 --> 00:13:59,279
it has a payment type and it has a set

00:13:57,519 --> 00:14:00,959
of users associated with that

00:13:59,279 --> 00:14:02,880
if they need to annotate that and

00:14:00,959 --> 00:14:04,320
they're doing it in both their back end

00:14:02,880 --> 00:14:04,720
code whatever's on the server and in

00:14:04,320 --> 00:14:07,360
their

00:14:04,720 --> 00:14:09,440
uh front end application then that

00:14:07,360 --> 00:14:12,240
quickly creates problems as soon as

00:14:09,440 --> 00:14:13,120
you need to update things and finally we

00:14:12,240 --> 00:14:15,440
want to know

00:14:13,120 --> 00:14:16,639
when things change is something going to

00:14:15,440 --> 00:14:18,240
break

00:14:16,639 --> 00:14:19,839
we want to know what should i change

00:14:18,240 --> 00:14:22,240
when back-end code has

00:14:19,839 --> 00:14:24,079
changed or uh which new method should i

00:14:22,240 --> 00:14:24,800
use now that i'm updating my front-end

00:14:24,079 --> 00:14:27,199
code

00:14:24,800 --> 00:14:28,800
um and we want to know this if possible

00:14:27,199 --> 00:14:30,800
in an ideal world we would know this

00:14:28,800 --> 00:14:34,399
before something breaks for our users

00:14:30,800 --> 00:14:36,959
i would say that's something that uh

00:14:34,399 --> 00:14:37,519
you can of course the the goal is to

00:14:36,959 --> 00:14:39,120
have

00:14:37,519 --> 00:14:40,800
you know the testing pyramid in place

00:14:39,120 --> 00:14:43,199
for something like this

00:14:40,800 --> 00:14:44,000
but what if um what if there's a way to

00:14:43,199 --> 00:14:46,639
catch some of these

00:14:44,000 --> 00:14:47,440
issues maybe even a lot of them uh

00:14:46,639 --> 00:14:49,920
before

00:14:47,440 --> 00:14:50,959
the code ever makes it to the user so

00:14:49,920 --> 00:14:52,720
that's where we're

00:14:50,959 --> 00:14:54,079
at here with this remedy type sharing

00:14:52,720 --> 00:14:55,920
with code generation

00:14:54,079 --> 00:14:58,079
um i'm gonna pause briefly and take a

00:14:55,920 --> 00:15:00,320
look i don't think there's been

00:14:58,079 --> 00:15:03,040
uh further questions in the chat for now

00:15:00,320 --> 00:15:03,040
and i also

00:15:04,000 --> 00:15:08,800
uh let's see

00:15:07,040 --> 00:15:10,480
i don't think i see any raised hands at

00:15:08,800 --> 00:15:12,000
the moment so i think we're good for now

00:15:10,480 --> 00:15:15,279
so i'm gonna go ahead and keep going

00:15:12,000 --> 00:15:17,680
um but please uh uh please

00:15:15,279 --> 00:15:18,800
flag things in chat um and i'll try to

00:15:17,680 --> 00:15:21,839
pause to uh

00:15:18,800 --> 00:15:21,839
to catch those as we go

00:15:23,760 --> 00:15:30,320
what we're gonna talk about is a

00:15:26,880 --> 00:15:32,079
series of tools built to or designed to

00:15:30,320 --> 00:15:34,800
help solve this problem

00:15:32,079 --> 00:15:35,519
and the first part of that tool chain is

00:15:34,800 --> 00:15:40,160
an api

00:15:35,519 --> 00:15:43,759
specification we have a few different

00:15:40,160 --> 00:15:45,120
versions of what that might mean uh so

00:15:43,759 --> 00:15:47,040
you may have heard of some of these i

00:15:45,120 --> 00:15:50,639
think i saw in chat someone mentioned

00:15:47,040 --> 00:15:54,000
um angular swagger generation

00:15:50,639 --> 00:15:57,440
so uh there's a spec called open api

00:15:54,000 --> 00:16:00,480
and it's a it's a specification

00:15:57,440 --> 00:16:03,040
like uh like many others it's uh

00:16:00,480 --> 00:16:04,000
it takes the form of a json or yaml file

00:16:03,040 --> 00:16:07,199
that says

00:16:04,000 --> 00:16:08,560
for this api here are its endpoints here

00:16:07,199 --> 00:16:10,240
is where you can post things here's

00:16:08,560 --> 00:16:11,839
where you can get things and here are

00:16:10,240 --> 00:16:12,720
the types of objects involved with that

00:16:11,839 --> 00:16:16,000
api

00:16:12,720 --> 00:16:16,800
um uh you know you can get back customer

00:16:16,000 --> 00:16:18,240
you can

00:16:16,800 --> 00:16:20,000
input an address these are the

00:16:18,240 --> 00:16:21,680
properties available on it there's a

00:16:20,000 --> 00:16:23,199
couple of different specifications

00:16:21,680 --> 00:16:24,720
that describe something like this

00:16:23,199 --> 00:16:27,600
there's open api there's

00:16:24,720 --> 00:16:28,000
swagger which is closely intertwined

00:16:27,600 --> 00:16:30,959
with

00:16:28,000 --> 00:16:32,880
uh open api heavily related there's

00:16:30,959 --> 00:16:35,120
blueprint there's raml

00:16:32,880 --> 00:16:36,399
today we're just going to be focusing on

00:16:35,120 --> 00:16:39,040
open api

00:16:36,399 --> 00:16:40,720
and the tool set associated with that

00:16:39,040 --> 00:16:41,600
but if you come away from this talk

00:16:40,720 --> 00:16:43,440
thinking that

00:16:41,600 --> 00:16:45,120
it's interesting that the tools

00:16:43,440 --> 00:16:47,120
discussed here and the workflows

00:16:45,120 --> 00:16:49,920
discussed here might be useful

00:16:47,120 --> 00:16:51,759
um at your organization or on your team

00:16:49,920 --> 00:16:53,360
know that you know there are options out

00:16:51,759 --> 00:16:55,440
there for you

00:16:53,360 --> 00:16:58,639
we happen to have enjoyed the tool chain

00:16:55,440 --> 00:17:01,360
associated with the open api spec

00:16:58,639 --> 00:17:02,880
but uh yeah there are options so it's

00:17:01,360 --> 00:17:04,640
this api specification

00:17:02,880 --> 00:17:06,319
and it describes the endpoints and and

00:17:04,640 --> 00:17:09,199
the parameters and the responses

00:17:06,319 --> 00:17:10,799
um it's useful for many things uh what

00:17:09,199 --> 00:17:13,199
we're particularly interested in

00:17:10,799 --> 00:17:14,000
in this front end engineering track

00:17:13,199 --> 00:17:17,199
we're interested

00:17:14,000 --> 00:17:18,079
in how we can use it to keep our front

00:17:17,199 --> 00:17:19,439
end code

00:17:18,079 --> 00:17:21,280
in sync with our back end code when

00:17:19,439 --> 00:17:23,360
we're making http calls

00:17:21,280 --> 00:17:25,439
but there are other things uh that this

00:17:23,360 --> 00:17:28,160
can be used for outside of http

00:17:25,439 --> 00:17:29,200
if you have two microservices that need

00:17:28,160 --> 00:17:31,120
to communicate

00:17:29,200 --> 00:17:33,120
uh with each other maybe it's not over

00:17:31,120 --> 00:17:35,039
http it's in some sec

00:17:33,120 --> 00:17:36,480
separate environment it's in kubernetes

00:17:35,039 --> 00:17:38,799
and they there are

00:17:36,480 --> 00:17:40,080
ways for those two nodes to communicate

00:17:38,799 --> 00:17:42,080
but they still need to know

00:17:40,080 --> 00:17:43,120
which endpoints they expose to each

00:17:42,080 --> 00:17:45,039
other um

00:17:43,120 --> 00:17:46,880
you can use this specification for

00:17:45,039 --> 00:17:50,559
things like that

00:17:46,880 --> 00:17:52,640
uh in our case um we

00:17:50,559 --> 00:17:54,960
we lucked into this a little bit which

00:17:52,640 --> 00:17:57,280
is that we're feeling this frustration

00:17:54,960 --> 00:17:58,880
front end communicating to back end and

00:17:57,280 --> 00:18:00,559
while looking for solutions realized

00:17:58,880 --> 00:18:03,600
that our spring boot applications

00:18:00,559 --> 00:18:04,640
so our java applications uh we're

00:18:03,600 --> 00:18:08,400
already using

00:18:04,640 --> 00:18:11,200
a we're already using

00:18:08,400 --> 00:18:12,240
a tool that generated their open api

00:18:11,200 --> 00:18:13,919
specification

00:18:12,240 --> 00:18:15,840
so in the case of spring boot it's

00:18:13,919 --> 00:18:17,440
called spring fox it's just responsible

00:18:15,840 --> 00:18:19,360
for generating this spec

00:18:17,440 --> 00:18:22,080
but what's important to keep in mind and

00:18:19,360 --> 00:18:24,880
maybe a way to gauge how easy this

00:18:22,080 --> 00:18:26,080
uh would be to implement on your team is

00:18:24,880 --> 00:18:28,480
thinking about one

00:18:26,080 --> 00:18:29,440
um your backend team uh whether it's you

00:18:28,480 --> 00:18:31,440
or or

00:18:29,440 --> 00:18:32,880
other other team members are they using

00:18:31,440 --> 00:18:35,360
a strongly typed language

00:18:32,880 --> 00:18:36,720
so we've got c sharp we've got java um

00:18:35,360 --> 00:18:40,320
we've got plenty of others

00:18:36,720 --> 00:18:41,919
uh if so this is likely pretty easy um

00:18:40,320 --> 00:18:43,679
and if even if they're not using a

00:18:41,919 --> 00:18:45,120
strongly typed language are they already

00:18:43,679 --> 00:18:47,919
describing their api

00:18:45,120 --> 00:18:48,720
in some way uh are they do they already

00:18:47,919 --> 00:18:51,919
have a use

00:18:48,720 --> 00:18:54,880
for having a specification like this

00:18:51,919 --> 00:18:56,320
where they're generating uh as as code

00:18:54,880 --> 00:18:58,080
updates maybe it's on

00:18:56,320 --> 00:18:59,520
continuous integration pipelines maybe

00:18:58,080 --> 00:19:01,440
they're doing it manually but are they

00:18:59,520 --> 00:19:04,880
already generating a spec file

00:19:01,440 --> 00:19:07,760
like this um and so for a lot of

00:19:04,880 --> 00:19:08,640
uh for a lot of uh back end frameworks

00:19:07,760 --> 00:19:11,039
there will be

00:19:08,640 --> 00:19:11,760
tooling already in place to use the

00:19:11,039 --> 00:19:13,440
types

00:19:11,760 --> 00:19:15,440
associated with the language or just use

00:19:13,440 --> 00:19:18,240
annotations and describe

00:19:15,440 --> 00:19:19,039
here's what a get method is for this api

00:19:18,240 --> 00:19:22,240
here's

00:19:19,039 --> 00:19:22,240
here's this type of response

00:19:23,200 --> 00:19:27,760
the idea then is that uh we no longer

00:19:26,000 --> 00:19:28,799
have to worry about duplication because

00:19:27,760 --> 00:19:30,080
the back end code

00:19:28,799 --> 00:19:32,640
whatever lives in the back end is the

00:19:30,080 --> 00:19:34,240
source of truth for both the endpoints

00:19:32,640 --> 00:19:36,840
that are available and the types

00:19:34,240 --> 00:19:38,320
that those endpoints will expect and

00:19:36,840 --> 00:19:41,280
return

00:19:38,320 --> 00:19:42,640
so we use this back-end specification to

00:19:41,280 --> 00:19:44,160
then generate

00:19:42,640 --> 00:19:46,720
in our case again what we're interested

00:19:44,160 --> 00:19:50,320
in is clients to call the apis

00:19:46,720 --> 00:19:53,679
and those clients in this case will

00:19:50,320 --> 00:19:55,120
be written in uh they'll be written in

00:19:53,679 --> 00:19:57,760
typescript

00:19:55,120 --> 00:19:59,520
but very importantly here kind of you

00:19:57,760 --> 00:20:02,720
know to flag this right away

00:19:59,520 --> 00:20:04,240
um they will you'll benefit the most

00:20:02,720 --> 00:20:06,880
from these in an environment

00:20:04,240 --> 00:20:08,559
like vs code for example which has a lot

00:20:06,880 --> 00:20:10,640
of typescript tooling in place

00:20:08,559 --> 00:20:11,840
you don't need a project that's using

00:20:10,640 --> 00:20:13,919
typescript at all

00:20:11,840 --> 00:20:15,280
you can be using pure javascript in

00:20:13,919 --> 00:20:16,960
whatever your framework is

00:20:15,280 --> 00:20:18,640
and just by virtue of being in an

00:20:16,960 --> 00:20:19,120
environment that understands typescript

00:20:18,640 --> 00:20:20,720
types

00:20:19,120 --> 00:20:22,320
i'm sure a lot of us are already

00:20:20,720 --> 00:20:25,440
familiar with how this works

00:20:22,320 --> 00:20:26,159
um you get the uh for example ide

00:20:25,440 --> 00:20:28,080
assistance

00:20:26,159 --> 00:20:29,919
um that i'm gonna be demoing during the

00:20:28,080 --> 00:20:32,799
during the demo portion

00:20:29,919 --> 00:20:33,919
um so it's important to note uh this

00:20:32,799 --> 00:20:34,960
because we're interested in front end

00:20:33,919 --> 00:20:37,360
code it's going to be

00:20:34,960 --> 00:20:38,640
generating in typescript but there are

00:20:37,360 --> 00:20:40,880
other generators available

00:20:38,640 --> 00:20:43,520
and very importantly while you might get

00:20:40,880 --> 00:20:44,799
more benefit if you're in a

00:20:43,520 --> 00:20:46,159
typescript code base there's no

00:20:44,799 --> 00:20:48,080
requirement there and you will still get

00:20:46,159 --> 00:20:50,320
a benefit

00:20:48,080 --> 00:20:52,000
and so that becomes the single source of

00:20:50,320 --> 00:20:54,640
truth for our front-end clients

00:20:52,000 --> 00:20:55,360
that call the apis we're going to take a

00:20:54,640 --> 00:20:57,360
quick look

00:20:55,360 --> 00:20:58,480
um at some of the some of what this

00:20:57,360 --> 00:21:00,240
tooling is

00:20:58,480 --> 00:21:01,810
and obviously you know these links will

00:21:00,240 --> 00:21:03,280
be available

00:21:01,810 --> 00:21:05,600
[Music]

00:21:03,280 --> 00:21:06,720
with the published presentation we're

00:21:05,600 --> 00:21:07,919
going to take a quick look at these

00:21:06,720 --> 00:21:11,280
before i click into them

00:21:07,919 --> 00:21:14,640
i want to make sure i think we're

00:21:11,280 --> 00:21:16,960
good on both chat and raised hands

00:21:14,640 --> 00:21:18,159
cool so i'm going to oops i'm going to

00:21:16,960 --> 00:21:21,840
click into

00:21:18,159 --> 00:21:24,880
first the open api tools um

00:21:21,840 --> 00:21:27,360
repo uh

00:21:24,880 --> 00:21:30,320
mention this just because it's a really

00:21:27,360 --> 00:21:32,240
excellent example of a

00:21:30,320 --> 00:21:33,440
really excellent example of an open

00:21:32,240 --> 00:21:36,880
source community

00:21:33,440 --> 00:21:39,120
that has uh that has benefited

00:21:36,880 --> 00:21:41,039
many many different developers and is

00:21:39,120 --> 00:21:42,480
managing a ton of different interests

00:21:41,039 --> 00:21:44,480
to try to create something that works

00:21:42,480 --> 00:21:48,799
for all of them

00:21:44,480 --> 00:21:51,360
the the key thing here is in this repo

00:21:48,799 --> 00:21:51,840
there are a ton of different generators

00:21:51,360 --> 00:21:54,559
so

00:21:51,840 --> 00:21:55,440
generators being i'm going to take one

00:21:54,559 --> 00:21:58,480
specification

00:21:55,440 --> 00:22:00,720
the open api spec it's json or ammo

00:21:58,480 --> 00:22:02,480
and i can choose to generate whatever

00:22:00,720 --> 00:22:03,679
type of client i want

00:22:02,480 --> 00:22:05,200
we're interested in the front-end ones

00:22:03,679 --> 00:22:07,200
but you can also generate c-sharp

00:22:05,200 --> 00:22:08,240
clients to call the api or java clients

00:22:07,200 --> 00:22:10,320
to call the api

00:22:08,240 --> 00:22:13,919
and then from just the front-end one you

00:22:10,320 --> 00:22:13,919
can choose an angular specific

00:22:14,400 --> 00:22:17,919
you can use an angular specific

00:22:15,919 --> 00:22:20,640
generator you can use a

00:22:17,919 --> 00:22:22,720
fetch like native window fetch generator

00:22:20,640 --> 00:22:24,400
in our case we use an axios one because

00:22:22,720 --> 00:22:25,840
axios was something that we're used to

00:22:24,400 --> 00:22:28,640
and enjoyed

00:22:25,840 --> 00:22:30,240
has good internet explorer support but

00:22:28,640 --> 00:22:32,799
there are all these different

00:22:30,240 --> 00:22:34,240
generators that are managed here that

00:22:32,799 --> 00:22:36,080
just by virtue of other people

00:22:34,240 --> 00:22:38,480
obviously the wonderful way that open

00:22:36,080 --> 00:22:40,720
source works other people using similar

00:22:38,480 --> 00:22:41,919
tool chains can be bundled together here

00:22:40,720 --> 00:22:44,000
um just

00:22:41,919 --> 00:22:46,080
uh which which gives us a lot of

00:22:44,000 --> 00:22:47,360
flexibility options regular updates uh

00:22:46,080 --> 00:22:49,600
we really appreciate

00:22:47,360 --> 00:22:51,440
um how this project has worked and been

00:22:49,600 --> 00:22:53,679
managed

00:22:51,440 --> 00:22:55,919
and then one more thing i see mentioned

00:22:53,679 --> 00:22:56,799
the open api generator.techlink that's

00:22:55,919 --> 00:23:00,240
great

00:22:56,799 --> 00:23:03,200
feel free to check that out

00:23:00,240 --> 00:23:03,760
this any api site i really like as well

00:23:03,200 --> 00:23:07,600
because

00:23:03,760 --> 00:23:08,000
it's covering public apis that follow an

00:23:07,600 --> 00:23:10,640
api

00:23:08,000 --> 00:23:11,200
specification and it's a great example

00:23:10,640 --> 00:23:13,919
of

00:23:11,200 --> 00:23:14,720
this is you know just by using tooling

00:23:13,919 --> 00:23:16,159
available

00:23:14,720 --> 00:23:17,840
obviously you don't have to make your

00:23:16,159 --> 00:23:19,520
api public but you can see what that

00:23:17,840 --> 00:23:22,799
looks like

00:23:19,520 --> 00:23:27,520
for uh uh for

00:23:22,799 --> 00:23:27,520
what you know how how specific it's

00:23:27,679 --> 00:23:31,039
uh it's possible to be extremely

00:23:29,280 --> 00:23:32,400
specific about what you're making

00:23:31,039 --> 00:23:34,480
available to consumers

00:23:32,400 --> 00:23:36,320
so just as an example for the new york

00:23:34,480 --> 00:23:37,919
times they provide some api endpoints

00:23:36,320 --> 00:23:39,440
here you can see what the endpoints are

00:23:37,919 --> 00:23:43,440
and then you can click into them

00:23:39,440 --> 00:23:46,880
and this is you know a ui version of

00:23:43,440 --> 00:23:47,279
uh of their spec file and so you see

00:23:46,880 --> 00:23:49,360
that

00:23:47,279 --> 00:23:51,279
when i'm making a request in this case

00:23:49,360 --> 00:23:52,480
to a content api i have to tell it

00:23:51,279 --> 00:23:56,000
eliminating an offset

00:23:52,480 --> 00:23:58,320
and then this is what i get back and so

00:23:56,000 --> 00:23:59,840
so what we're about to look at in code

00:23:58,320 --> 00:24:01,840
demo is

00:23:59,840 --> 00:24:03,600
the result of having this much

00:24:01,840 --> 00:24:05,760
information about

00:24:03,600 --> 00:24:07,440
what an api is providing to its

00:24:05,760 --> 00:24:08,320
consumers i can see that there's going

00:24:07,440 --> 00:24:10,480
to be

00:24:08,320 --> 00:24:11,679
an object with results on that there's

00:24:10,480 --> 00:24:13,520
going to be an abstract there's going to

00:24:11,679 --> 00:24:16,559
be some multimedia that's going to be an

00:24:13,520 --> 00:24:19,840
array of objects a multimedia object has

00:24:16,559 --> 00:24:22,640
a caption and a copyright and a format

00:24:19,840 --> 00:24:24,559
so that's really what makes this tooling

00:24:22,640 --> 00:24:28,000
possible

00:24:24,559 --> 00:24:31,039
okay we're about to get into

00:24:28,000 --> 00:24:33,440
some code and so i

00:24:31,039 --> 00:24:34,640
think we're still good on the questions

00:24:33,440 --> 00:24:37,440
front

00:24:34,640 --> 00:24:39,279
thank you again to stan for linking the

00:24:37,440 --> 00:24:41,919
documentation site

00:24:39,279 --> 00:24:47,120
and let's just go ahead and let's let's

00:24:41,919 --> 00:24:50,400
pull this out

00:24:47,120 --> 00:24:51,440
so um a lot of the

00:24:50,400 --> 00:24:54,400
or at least some of the code we're going

00:24:51,440 --> 00:24:57,760
to be looking at here happens to be vue

00:24:54,400 --> 00:24:58,720
um but uh it's really what we're

00:24:57,760 --> 00:25:00,960
interested in is

00:24:58,720 --> 00:25:01,919
is just the the javascript associated

00:25:00,960 --> 00:25:04,240
with it

00:25:01,919 --> 00:25:05,679
so you can imagine any front-end code

00:25:04,240 --> 00:25:10,559
here where you can run javascript

00:25:05,679 --> 00:25:12,480
um is is where this applies

00:25:10,559 --> 00:25:17,600
let's take a look at my very bad demo

00:25:12,480 --> 00:25:17,600
app first see what it's providing for us

00:25:17,840 --> 00:25:22,720
um so just the this is just a base

00:25:20,880 --> 00:25:24,480
like create view app and i have two

00:25:22,720 --> 00:25:24,880
different uh types of apis that i'm

00:25:24,480 --> 00:25:26,640
calling

00:25:24,880 --> 00:25:29,440
one is one of those publicly available

00:25:26,640 --> 00:25:31,360
apis from that any api site

00:25:29,440 --> 00:25:32,799
and so it's getting new york times movie

00:25:31,360 --> 00:25:35,520
reviews

00:25:32,799 --> 00:25:36,799
let's take a look at what this does

00:25:35,520 --> 00:25:40,480
let's go ahead and

00:25:36,799 --> 00:25:42,799
search for the irishman

00:25:40,480 --> 00:25:44,159
and there we have some results so it's

00:25:42,799 --> 00:25:46,960
making just to get requests

00:25:44,159 --> 00:25:49,039
and it ends up looking like this so here

00:25:46,960 --> 00:25:50,799
honestly is is what most of this talk

00:25:49,039 --> 00:25:53,679
comes down to it's

00:25:50,799 --> 00:25:54,559
how did this request get generated um

00:25:53,679 --> 00:25:56,960
and

00:25:54,559 --> 00:25:58,159
if the new york times if for example if

00:25:56,960 --> 00:26:01,200
it's their team

00:25:58,159 --> 00:26:02,400
uh if the if the back end team decided

00:26:01,200 --> 00:26:05,360
that they wanted this

00:26:02,400 --> 00:26:05,600
api to have a new option or to deprecate

00:26:05,360 --> 00:26:08,559
an

00:26:05,600 --> 00:26:09,520
old option or to change you know change

00:26:08,559 --> 00:26:12,559
the path here be

00:26:09,520 --> 00:26:15,679
to make it more consistent um

00:26:12,559 --> 00:26:18,799
how do we make this

00:26:15,679 --> 00:26:20,320
make this request to get uh to to get

00:26:18,799 --> 00:26:22,080
this information how do we make that as

00:26:20,320 --> 00:26:24,320
maintainable as possible

00:26:22,080 --> 00:26:25,440
so if we were uh if we were working

00:26:24,320 --> 00:26:29,279
outside the context of

00:26:25,440 --> 00:26:32,640
this talk uh and we um

00:26:29,279 --> 00:26:35,279
uh and we just wanted um

00:26:32,640 --> 00:26:36,840
we just wanted a way to to fetch some

00:26:35,279 --> 00:26:39,600
fetch some data

00:26:36,840 --> 00:26:43,039
uh i wonder if this is going to work

00:26:39,600 --> 00:26:45,440
actually um we would probably

00:26:43,039 --> 00:26:46,640
do something oops we'd probably do

00:26:45,440 --> 00:26:49,840
something like that

00:26:46,640 --> 00:26:53,039
and it would uh do cost response equals

00:26:49,840 --> 00:26:53,360
fetch we'd probably type something like

00:26:53,039 --> 00:26:56,480
this

00:26:53,360 --> 00:27:00,320
in our code uh and

00:26:56,480 --> 00:27:03,200
if i can do response.json oops maybe not

00:27:00,320 --> 00:27:04,960
um but we'd we'd have something like

00:27:03,200 --> 00:27:06,000
fetch and then we'd have this hard coded

00:27:04,960 --> 00:27:07,679
url or you know

00:27:06,000 --> 00:27:09,679
maybe it'd be a little dynamic we'd say

00:27:07,679 --> 00:27:12,720
like whatever the user typed here

00:27:09,679 --> 00:27:13,679
put it in this spot uh but we would just

00:27:12,720 --> 00:27:15,679
be

00:27:13,679 --> 00:27:16,960
typing out the string of this is where

00:27:15,679 --> 00:27:18,480
it is right now

00:27:16,960 --> 00:27:20,320
but what happens if that changes in the

00:27:18,480 --> 00:27:23,360
future um

00:27:20,320 --> 00:27:24,960
as it stands uh i'll just demo what this

00:27:23,360 --> 00:27:28,000
code looks like

00:27:24,960 --> 00:27:32,159
uh here instead

00:27:28,000 --> 00:27:32,159
and what it's providing to us

00:27:32,320 --> 00:27:35,840
kind of the outcome here of this tooling

00:27:34,559 --> 00:27:36,480
that we're talking about which is that

00:27:35,840 --> 00:27:40,159
instead of

00:27:36,480 --> 00:27:40,159
writing here um

00:27:41,039 --> 00:27:43,360
oops

00:27:44,640 --> 00:27:48,640
um instead of writing this counts

00:27:47,440 --> 00:27:51,919
response

00:27:48,640 --> 00:27:51,919
equals await

00:27:52,159 --> 00:27:58,240
await fetch and then the url

00:27:55,760 --> 00:27:59,600
you know it would be something like that

00:27:58,240 --> 00:28:02,720
instead of writing that

00:27:59,600 --> 00:28:04,399
um i have this next line which looks

00:28:02,720 --> 00:28:07,360
like this

00:28:04,399 --> 00:28:09,120
there's no there's no string here

00:28:07,360 --> 00:28:10,880
there's no magic string about what the

00:28:09,120 --> 00:28:13,760
api endpoint is instead

00:28:10,880 --> 00:28:16,720
we have this wonderful uh constant here

00:28:13,760 --> 00:28:20,559
which is the times movie api

00:28:16,720 --> 00:28:23,919
and when we when we're

00:28:20,559 --> 00:28:26,080
doing a call to the times movie api

00:28:23,919 --> 00:28:27,679
and i type dot i want to see what

00:28:26,080 --> 00:28:28,880
methods are available i can see

00:28:27,679 --> 00:28:32,240
all the endpoints that are made

00:28:28,880 --> 00:28:35,600
available on the movie api

00:28:32,240 --> 00:28:38,960
okay and i can select one of them

00:28:35,600 --> 00:28:40,799
and when i call it i get to see what

00:28:38,960 --> 00:28:42,399
that endpoint has made available

00:28:40,799 --> 00:28:44,080
including this wonderful

00:28:42,399 --> 00:28:46,960
aspect that i also get to see the

00:28:44,080 --> 00:28:49,039
description that the times has provided

00:28:46,960 --> 00:28:50,080
i get to see them describe what this api

00:28:49,039 --> 00:28:52,240
endpoint does

00:28:50,080 --> 00:28:54,000
and i get to see okay it looks like it

00:28:52,240 --> 00:28:55,520
wants a query first

00:28:54,000 --> 00:28:57,520
then it wants potentially some other

00:28:55,520 --> 00:28:59,120
information i'm seeing uh

00:28:57,520 --> 00:29:00,880
this syntax here which in typescript

00:28:59,120 --> 00:29:03,600
tells me that those are all optional

00:29:00,880 --> 00:29:05,679
so i know that now i'm gonna start

00:29:03,600 --> 00:29:08,240
typing and all i need to worry about is

00:29:05,679 --> 00:29:10,559
passing in some kind of a query

00:29:08,240 --> 00:29:12,080
um so this is this is sort of the the

00:29:10,559 --> 00:29:15,360
magic here which is that

00:29:12,080 --> 00:29:16,159
this code this reviews uh review search

00:29:15,360 --> 00:29:19,520
json

00:29:16,159 --> 00:29:20,880
um is not uh it's not something i need

00:29:19,520 --> 00:29:23,039
to manually update

00:29:20,880 --> 00:29:24,399
it is provided because of the tooling

00:29:23,039 --> 00:29:28,159
that we have involved

00:29:24,399 --> 00:29:28,960
um let's do um pausing making sure we're

00:29:28,159 --> 00:29:32,000
looking good

00:29:28,960 --> 00:29:36,240
oh i actually uh i'm gonna pause briefly

00:29:32,000 --> 00:29:38,640
for a question from justin um

00:29:36,240 --> 00:29:41,679
let's see if i should have more

00:29:38,640 --> 00:29:46,080
experience with this um

00:29:41,679 --> 00:29:49,360
to shoot to try to unmute justin

00:29:46,080 --> 00:29:50,640
um oh perfect thank you so much um

00:29:49,360 --> 00:29:55,840
justin do you did you have a question

00:29:50,640 --> 00:29:55,840
you wanted to ask now

00:29:56,080 --> 00:29:59,200
no okay

00:30:00,480 --> 00:30:03,120
thanks i appreciate the help with that

00:30:01,760 --> 00:30:03,679
uh we'll come back and see if justin has

00:30:03,120 --> 00:30:06,720
a

00:30:03,679 --> 00:30:09,039
question upcoming um so this

00:30:06,720 --> 00:30:11,120
is the this is this is the magic here

00:30:09,039 --> 00:30:13,520
and uh in vs code um

00:30:11,120 --> 00:30:15,679
we have uh we have a nice uh shortcut

00:30:13,520 --> 00:30:18,320
here i'm just gonna do f12

00:30:15,679 --> 00:30:20,000
and that's going to navigate me to uh

00:30:18,320 --> 00:30:23,039
where this is defined

00:30:20,000 --> 00:30:24,240
and we see this crazy looking file uh

00:30:23,039 --> 00:30:24,960
which you can tell it's generated

00:30:24,240 --> 00:30:27,840
because no one

00:30:24,960 --> 00:30:28,960
would ever write uh code that's this uh

00:30:27,840 --> 00:30:31,200
this verbose and this

00:30:28,960 --> 00:30:32,000
well documented and this well defined

00:30:31,200 --> 00:30:35,039
this lives

00:30:32,000 --> 00:30:37,760
in an api file uh a

00:30:35,039 --> 00:30:39,760
uh it's a you know a default api and

00:30:37,760 --> 00:30:40,960
it's got this method reviews search json

00:30:39,760 --> 00:30:43,039
get

00:30:40,960 --> 00:30:44,480
this is the code that's generated by the

00:30:43,039 --> 00:30:46,960
open api tooling

00:30:44,480 --> 00:30:47,760
uh so let's go ahead i'm gonna i'm gonna

00:30:46,960 --> 00:30:51,039
real quick

00:30:47,760 --> 00:30:52,320
i'm gonna delete that code let's let's

00:30:51,039 --> 00:30:55,360
move that to trash

00:30:52,320 --> 00:31:00,799
and i'm going to run a command

00:30:55,360 --> 00:31:00,799
which is responsible for generating

00:31:01,039 --> 00:31:04,559
it's responsible for generating these

00:31:02,640 --> 00:31:05,840
clients and we'll we'll take a look at

00:31:04,559 --> 00:31:08,799
where that code runs

00:31:05,840 --> 00:31:09,840
so it's generating an api client for my

00:31:08,799 --> 00:31:12,480
custom

00:31:09,840 --> 00:31:14,240
api uh which is a candidate api which

00:31:12,480 --> 00:31:15,760
we'll take a look at in a bit

00:31:14,240 --> 00:31:17,600
and then it's going to go ahead and it's

00:31:15,760 --> 00:31:20,320
going to generate the api uh

00:31:17,600 --> 00:31:22,480
for the uh it's going to generate the

00:31:20,320 --> 00:31:23,440
api client for this new york times api

00:31:22,480 --> 00:31:27,360
as well

00:31:23,440 --> 00:31:29,519
um the uh the reason it's stumbling is

00:31:27,360 --> 00:31:32,320
because my candidate api is a free

00:31:29,519 --> 00:31:33,120
heroku app that often needs time to spin

00:31:32,320 --> 00:31:38,320
up

00:31:33,120 --> 00:31:42,080
um in fact let's verify

00:31:38,320 --> 00:31:43,200
that it is let's give it another shot

00:31:42,080 --> 00:31:45,440
there

00:31:43,200 --> 00:31:46,880
um there we go and so now it's

00:31:45,440 --> 00:31:47,519
generating the api client for times

00:31:46,880 --> 00:31:50,000
movies

00:31:47,519 --> 00:31:50,640
so we have times movies back and we can

00:31:50,000 --> 00:31:53,039
tell

00:31:50,640 --> 00:31:54,559
again uh this is generated code and this

00:31:53,039 --> 00:31:55,519
is made possible because the times

00:31:54,559 --> 00:31:58,840
publishes

00:31:55,519 --> 00:32:00,240
um the spec of this api as an open api

00:31:58,840 --> 00:32:03,440
specification

00:32:00,240 --> 00:32:07,039
this is uh this is the code that

00:32:03,440 --> 00:32:07,519
um that runs the generation and it looks

00:32:07,039 --> 00:32:11,200
pretty much

00:32:07,519 --> 00:32:14,320
just like this um and so a takeaway here

00:32:11,200 --> 00:32:14,720
um from this presentation if anything is

00:32:14,320 --> 00:32:17,919
that

00:32:14,720 --> 00:32:19,279
if uh if you know npm tools are

00:32:17,919 --> 00:32:20,480
something you're comfortable with or

00:32:19,279 --> 00:32:24,399
typically work with

00:32:20,480 --> 00:32:27,600
open api the tools they export this

00:32:24,399 --> 00:32:29,840
generator package which

00:32:27,600 --> 00:32:31,279
is extremely simple to run and all you

00:32:29,840 --> 00:32:32,799
need to do is point at some

00:32:31,279 --> 00:32:36,240
specification file

00:32:32,799 --> 00:32:37,679
uh some swagger.json in our case

00:32:36,240 --> 00:32:39,519
and tell it where it should output the

00:32:37,679 --> 00:32:41,200
results you also tell it

00:32:39,519 --> 00:32:42,640
this is the type of generator that i'm

00:32:41,200 --> 00:32:43,840
interested in so

00:32:42,640 --> 00:32:46,159
that's all we're doing here is we're

00:32:43,840 --> 00:32:48,480
pointing at the new york times spec file

00:32:46,159 --> 00:32:51,519
we can actually find it right here let's

00:32:48,480 --> 00:32:56,080
see what that json looks like

00:32:51,519 --> 00:32:58,799
it's going to be a little bit crazy

00:32:56,080 --> 00:32:59,919
there's some json for you so this is the

00:32:58,799 --> 00:33:02,159
spec file

00:32:59,919 --> 00:33:03,519
but all the tool needs to know is i'm

00:33:02,159 --> 00:33:04,159
going to point at that spec file and i

00:33:03,519 --> 00:33:07,679
am going to

00:33:04,159 --> 00:33:10,159
output code that will

00:33:07,679 --> 00:33:10,880
that will allow anyone to call that api

00:33:10,159 --> 00:33:12,799
and do so

00:33:10,880 --> 00:33:13,919
in a typesafe way know things about the

00:33:12,799 --> 00:33:17,039
request and

00:33:13,919 --> 00:33:18,080
know things about the response now that

00:33:17,039 --> 00:33:19,919
we've

00:33:18,080 --> 00:33:21,200
shown that running let's serve this

00:33:19,919 --> 00:33:25,760
again

00:33:21,200 --> 00:33:28,399
let's get back to our initial state here

00:33:25,760 --> 00:33:29,600
and let's see what happens uh so so we

00:33:28,399 --> 00:33:32,320
know we're calling

00:33:29,600 --> 00:33:34,000
the movie api and we know we're getting

00:33:32,320 --> 00:33:37,760
a reviews response

00:33:34,000 --> 00:33:41,039
but what in our case so if we imagined

00:33:37,760 --> 00:33:43,200
we're doing things in this fetch way um

00:33:41,039 --> 00:33:45,679
we would also have to totally guess uh

00:33:43,200 --> 00:33:49,039
what the response looks like

00:33:45,679 --> 00:33:51,919
whereas in this case

00:33:49,039 --> 00:33:52,399
we can do it's not movies equals and we

00:33:51,919 --> 00:33:55,279
can do

00:33:52,399 --> 00:33:56,480
reviews response dot and we get to see

00:33:55,279 --> 00:33:59,039
okay this is what

00:33:56,480 --> 00:34:00,799
uh this is the the structure of in our

00:33:59,039 --> 00:34:01,360
case the axios response so we want the

00:34:00,799 --> 00:34:03,200
data

00:34:01,360 --> 00:34:05,600
and then we get to see what the new york

00:34:03,200 --> 00:34:06,799
times has said a response for them is

00:34:05,600 --> 00:34:08,720
going to look like

00:34:06,799 --> 00:34:10,480
uh and so we can see that there's

00:34:08,720 --> 00:34:11,760
something like copyright

00:34:10,480 --> 00:34:14,240
number of results that's not what we

00:34:11,760 --> 00:34:17,280
want we actually just want the results

00:34:14,240 --> 00:34:20,320
um and uh and and then we see

00:34:17,280 --> 00:34:21,040
oh uh this isn't quite what we wanted

00:34:20,320 --> 00:34:22,960
for types

00:34:21,040 --> 00:34:24,480
because this is possibly undefined

00:34:22,960 --> 00:34:27,520
another wonderful example

00:34:24,480 --> 00:34:29,599
of uh having these uh typescript

00:34:27,520 --> 00:34:31,200
types in place as you're interacting

00:34:29,599 --> 00:34:34,320
with your apis is you know

00:34:31,200 --> 00:34:36,560
um that uh um

00:34:34,320 --> 00:34:37,839
that i need to handle the case of what

00:34:36,560 --> 00:34:39,520
if it comes back and there are no

00:34:37,839 --> 00:34:41,359
results and so then i'm just gonna set

00:34:39,520 --> 00:34:44,159
it to be an empty array

00:34:41,359 --> 00:34:45,520
um so this is what we've found at

00:34:44,159 --> 00:34:48,960
politico to be

00:34:45,520 --> 00:34:50,240
a huge win for us is that we no longer

00:34:48,960 --> 00:34:53,119
need to guess or

00:34:50,240 --> 00:34:53,839
maintain separately the documentation

00:34:53,119 --> 00:34:58,079
for

00:34:53,839 --> 00:34:59,680
um uh oh yes sorry i just noticed in the

00:34:58,079 --> 00:35:03,839
chat the um

00:34:59,680 --> 00:35:06,560
request for the github repo so let me

00:35:03,839 --> 00:35:06,560
sorry about that

00:35:07,440 --> 00:35:14,079
yeah please feel free to click around um

00:35:11,359 --> 00:35:14,880
we no longer need to guess what the uh

00:35:14,079 --> 00:35:16,960
what the shape

00:35:14,880 --> 00:35:18,640
of our response is going to be we can

00:35:16,960 --> 00:35:21,680
know what it's going to be because

00:35:18,640 --> 00:35:23,599
we have this uh specification file

00:35:21,680 --> 00:35:25,119
that's telling us exactly what the

00:35:23,599 --> 00:35:26,800
request needs to accept

00:35:25,119 --> 00:35:29,680
and what the response is going to look

00:35:26,800 --> 00:35:31,520
like um

00:35:29,680 --> 00:35:33,280
taking a look for any questions i want

00:35:31,520 --> 00:35:35,920
to jump into real quick

00:35:33,280 --> 00:35:37,760
the custom api um that we're looking at

00:35:35,920 --> 00:35:42,240
that does a similar thing

00:35:37,760 --> 00:35:42,240
so uh let's take a quick look at that as

00:35:42,839 --> 00:35:45,839
well

00:35:45,920 --> 00:35:52,480
oh sorry thank you

00:35:49,920 --> 00:35:53,760
totally right stephen appreciate it need

00:35:52,480 --> 00:35:56,400
to check my defaults

00:35:53,760 --> 00:35:58,400
uh there's the link now to all attendees

00:35:56,400 --> 00:36:01,839
appreciate it um

00:35:58,400 --> 00:36:03,760
this uh this is a bit of a

00:36:01,839 --> 00:36:05,119
bit of nostalgia that i left alone which

00:36:03,760 --> 00:36:06,720
is that the

00:36:05,119 --> 00:36:08,320
the last time i talked about a similar

00:36:06,720 --> 00:36:11,359
topic was

00:36:08,320 --> 00:36:12,960
march and

00:36:11,359 --> 00:36:14,800
given that everything has felt a little

00:36:12,960 --> 00:36:15,920
bit frozen in time i've just left the

00:36:14,800 --> 00:36:18,960
data alone here

00:36:15,920 --> 00:36:20,960
uh for a lot of this just total dummy

00:36:18,960 --> 00:36:24,960
data but given that i work at politico

00:36:20,960 --> 00:36:28,480
um felt like it made sense for a uh

00:36:24,960 --> 00:36:30,960
um for a campaign related uh api

00:36:28,480 --> 00:36:31,920
and so all this does is it allows you to

00:36:30,960 --> 00:36:35,280
save information

00:36:31,920 --> 00:36:36,800
about some candidate um and uh

00:36:35,280 --> 00:36:38,720
and then view the information that has

00:36:36,800 --> 00:36:42,000
been saved and also

00:36:38,720 --> 00:36:43,520
um also uh remove the ones that you no

00:36:42,000 --> 00:36:45,359
longer want to be displayed

00:36:43,520 --> 00:36:46,880
and it's a it's a spring boot

00:36:45,359 --> 00:36:47,440
application so there's a database back

00:36:46,880 --> 00:36:49,599
there so

00:36:47,440 --> 00:36:51,520
i've deleted it and it's gone and let's

00:36:49,599 --> 00:36:54,960
create another sample

00:36:51,520 --> 00:36:56,640
person um

00:36:54,960 --> 00:36:58,960
and we're going to add them and now

00:36:56,640 --> 00:37:00,800
they're added so

00:36:58,960 --> 00:37:03,040
again if we were creating this app

00:37:00,800 --> 00:37:03,680
without any uh infrastructure in place

00:37:03,040 --> 00:37:06,560
for

00:37:03,680 --> 00:37:08,960
uh syncing back end and front-end types

00:37:06,560 --> 00:37:09,440
we would need to know uh how do i create

00:37:08,960 --> 00:37:11,920
a new

00:37:09,440 --> 00:37:12,800
person and what's expected uh when i

00:37:11,920 --> 00:37:15,119
create a person

00:37:12,800 --> 00:37:16,960
and then also when i want to get people

00:37:15,119 --> 00:37:19,440
what is the shape of them is it is it

00:37:16,960 --> 00:37:20,240
just a is it just a string that says the

00:37:19,440 --> 00:37:22,079
person's name

00:37:20,240 --> 00:37:24,079
or do they have a name and they also

00:37:22,079 --> 00:37:26,640
have a party and they have

00:37:24,079 --> 00:37:27,680
an election cycle is it first name last

00:37:26,640 --> 00:37:31,359
name or

00:37:27,680 --> 00:37:32,320
all one field and so uh in a similar way

00:37:31,359 --> 00:37:36,720
to what we would have done

00:37:32,320 --> 00:37:39,359
with the times api we would have had to

00:37:36,720 --> 00:37:40,160
guess uh we would have had to guess

00:37:39,359 --> 00:37:43,359
previously

00:37:40,160 --> 00:37:45,680
when we're calling the api um what the

00:37:43,359 --> 00:37:47,599
what the shape of it should be instead

00:37:45,680 --> 00:37:51,200
now we can

00:37:47,599 --> 00:37:53,680
uh import a candidate api so it looks

00:37:51,200 --> 00:37:54,960
kind of like this we're just doing new

00:37:53,680 --> 00:37:58,320
candidate api and

00:37:54,960 --> 00:38:00,880
here is our generated code so

00:37:58,320 --> 00:38:02,160
yep as always uh once it once you can

00:38:00,880 --> 00:38:03,520
tell that it looks like a ton of effort

00:38:02,160 --> 00:38:05,200
was put into it then you know that

00:38:03,520 --> 00:38:08,079
that's not code that i wrote

00:38:05,200 --> 00:38:09,599
um and we can call the api to do things

00:38:08,079 --> 00:38:12,960
like add a candidate

00:38:09,599 --> 00:38:14,400
uh and here is where so so up to this

00:38:12,960 --> 00:38:15,839
point everything that we've been seeing

00:38:14,400 --> 00:38:18,720
in the ide

00:38:15,839 --> 00:38:20,480
um so in vs code works equally well in a

00:38:18,720 --> 00:38:22,480
javascript project and in a typescript

00:38:20,480 --> 00:38:24,000
project you know it'll tell you

00:38:22,480 --> 00:38:25,920
uh it'll tell you things like this

00:38:24,000 --> 00:38:28,960
because there are typescript definitions

00:38:25,920 --> 00:38:33,200
but what's really wonderful is if i

00:38:28,960 --> 00:38:35,040
do say uh say what it had originally

00:38:33,200 --> 00:38:37,119
been when i was defining a candidate is

00:38:35,040 --> 00:38:40,240
that instead of first name last name

00:38:37,119 --> 00:38:43,359
um instead it was just name

00:38:40,240 --> 00:38:45,280
and it was you know the default was was

00:38:43,359 --> 00:38:48,400
an empty string

00:38:45,280 --> 00:38:50,000
if this had been the original and the

00:38:48,400 --> 00:38:50,400
back end decided that in order to keep

00:38:50,000 --> 00:38:53,200
this

00:38:50,400 --> 00:38:54,640
in sync with our other objects uh we

00:38:53,200 --> 00:38:55,760
really need to split it out to a first

00:38:54,640 --> 00:38:56,480
name and the last name and they made

00:38:55,760 --> 00:38:58,160
that change

00:38:56,480 --> 00:39:00,240
but they made that change separately

00:38:58,160 --> 00:39:01,599
from us it was on another project

00:39:00,240 --> 00:39:03,280
they're trying to keep things consistent

00:39:01,599 --> 00:39:05,200
we're trying to update our code the

00:39:03,280 --> 00:39:06,560
ability to move quickly and separately

00:39:05,200 --> 00:39:08,079
is great

00:39:06,560 --> 00:39:10,560
but they made the change of we never

00:39:08,079 --> 00:39:12,480
heard about it what would happen is

00:39:10,560 --> 00:39:14,240
you would deploy your application the

00:39:12,480 --> 00:39:15,280
backend would deploy their application

00:39:14,240 --> 00:39:17,520
and the first time that you would know

00:39:15,280 --> 00:39:18,240
something's wrong is that the page no

00:39:17,520 --> 00:39:20,079
longer loaded

00:39:18,240 --> 00:39:22,320
perhaps you have tests in place to catch

00:39:20,079 --> 00:39:23,599
this or perhaps it's just manual testing

00:39:22,320 --> 00:39:24,800
and that a user is going to tell you

00:39:23,599 --> 00:39:26,960
that something broke

00:39:24,800 --> 00:39:29,200
but here's where having typescript in

00:39:26,960 --> 00:39:30,960
your pipeline uh becomes really nice

00:39:29,200 --> 00:39:32,240
which is that when i press save on this

00:39:30,960 --> 00:39:35,599
file

00:39:32,240 --> 00:39:40,000
um and uh and let's see

00:39:35,599 --> 00:39:44,560
here uh i need

00:39:40,000 --> 00:39:44,560
oh let's go ahead and restart this

00:39:44,720 --> 00:39:48,400
uh when i press save on this file i am

00:39:46,880 --> 00:39:51,200
going to get yelled at

00:39:48,400 --> 00:39:52,000
um and that is the part that this tool

00:39:51,200 --> 00:39:55,599
chain

00:39:52,000 --> 00:39:58,640
uh as integrated into our infrastructure

00:39:55,599 --> 00:40:01,839
at politico has really helped us because

00:39:58,640 --> 00:40:04,800
as soon as i run a command to update

00:40:01,839 --> 00:40:05,520
um and get the latest api clients i'm

00:40:04,800 --> 00:40:08,160
going to

00:40:05,520 --> 00:40:10,240
get whatever the latest objects are

00:40:08,160 --> 00:40:13,520
whatever the latest expectations are

00:40:10,240 --> 00:40:15,839
and if they if back end has changed from

00:40:13,520 --> 00:40:17,520
name to first name last name i'm gonna

00:40:15,839 --> 00:40:19,440
get yelled at and it's going to fail

00:40:17,520 --> 00:40:22,079
before it finishes building

00:40:19,440 --> 00:40:22,800
and so that um you know i'm sure you've

00:40:22,079 --> 00:40:24,960
heard

00:40:22,800 --> 00:40:26,160
that lesson of typescript in in other

00:40:24,960 --> 00:40:28,319
talks and this is

00:40:26,160 --> 00:40:29,760
essentially just extrapolating that

00:40:28,319 --> 00:40:31,760
lesson of typescript to

00:40:29,760 --> 00:40:33,119
data management by sharing types between

00:40:31,760 --> 00:40:37,359
front-end and back-end

00:40:33,119 --> 00:40:38,000
um but that you'll get failure messages

00:40:37,359 --> 00:40:40,079
like this

00:40:38,000 --> 00:40:41,440
before your code ever gets deployed

00:40:40,079 --> 00:40:43,200
before it gets deployed to a qa

00:40:41,440 --> 00:40:43,920
environment or a staging environment or

00:40:43,200 --> 00:40:45,440
to prod

00:40:43,920 --> 00:40:47,119
because the build will just fail and

00:40:45,440 --> 00:40:48,640
it'll tell you this expectation that you

00:40:47,119 --> 00:40:49,280
previously had about how this was going

00:40:48,640 --> 00:40:52,400
to work

00:40:49,280 --> 00:40:54,640
is no longer true and so you then

00:40:52,400 --> 00:40:56,160
go ahead and fix it and say ah it's

00:40:54,640 --> 00:40:58,720
first name last name now

00:40:56,160 --> 00:41:00,319
you know i can see that by investigating

00:40:58,720 --> 00:41:01,359
if i want to see what the type of

00:41:00,319 --> 00:41:04,079
candidate is i can

00:41:01,359 --> 00:41:05,599
see that you know i can see that it has

00:41:04,079 --> 00:41:08,000
a first name and a last name

00:41:05,599 --> 00:41:10,079
and then as you make that change then

00:41:08,000 --> 00:41:12,960
your build will be allowed to succeed

00:41:10,079 --> 00:41:15,200
and you'll you'll be able to make those

00:41:12,960 --> 00:41:18,240
requests to add a new person

00:41:15,200 --> 00:41:21,680
for example um

00:41:18,240 --> 00:41:22,240
that is primarily uh the lesson that

00:41:21,680 --> 00:41:24,960
we've learned

00:41:22,240 --> 00:41:25,599
at politico is this this um approach

00:41:24,960 --> 00:41:29,839
that

00:41:25,599 --> 00:41:32,880
uh no longer do we need to manually

00:41:29,839 --> 00:41:35,680
sync our front end code both

00:41:32,880 --> 00:41:36,400
the the destinations of our apa api

00:41:35,680 --> 00:41:38,160
endpoints

00:41:36,400 --> 00:41:39,760
the types of requests that they accept

00:41:38,160 --> 00:41:41,040
and the responses

00:41:39,760 --> 00:41:42,960
to be able to interact with these

00:41:41,040 --> 00:41:44,240
complex objects no longer do we need to

00:41:42,960 --> 00:41:45,520
maintain those separately in two

00:41:44,240 --> 00:41:47,520
different places

00:41:45,520 --> 00:41:48,960
we can instead have the back end be a

00:41:47,520 --> 00:41:51,200
single source of truth

00:41:48,960 --> 00:41:52,720
uh which is wonderful i want to cover

00:41:51,200 --> 00:41:57,040
one thing real quick

00:41:52,720 --> 00:41:59,839
um which is how we do the generation

00:41:57,040 --> 00:41:59,839
which is that

00:42:00,160 --> 00:42:04,400
which is that the simplest way to get

00:42:03,040 --> 00:42:05,760
started with this if any of this has

00:42:04,400 --> 00:42:07,280
sounded interesting to you

00:42:05,760 --> 00:42:08,800
it's that you have a you have a client

00:42:07,280 --> 00:42:10,720
and it's calling an api

00:42:08,800 --> 00:42:12,319
and you've worked with your backend team

00:42:10,720 --> 00:42:14,000
uh to enable and

00:42:12,319 --> 00:42:15,280
perhaps if you know if they're using a

00:42:14,000 --> 00:42:16,720
framework there's a good chance their

00:42:15,280 --> 00:42:17,839
specification already exists

00:42:16,720 --> 00:42:19,680
but you've worked with them to enable

00:42:17,839 --> 00:42:21,440
the specification how do you get this

00:42:19,680 --> 00:42:22,480
typescript code

00:42:21,440 --> 00:42:24,000
the answer is that if you're just

00:42:22,480 --> 00:42:24,960
calling one api and you want to try this

00:42:24,000 --> 00:42:26,640
out on one client

00:42:24,960 --> 00:42:28,880
in the client you'll go ahead and run a

00:42:26,640 --> 00:42:31,200
command like this and again these

00:42:28,880 --> 00:42:32,560
these slides will be available you'll

00:42:31,200 --> 00:42:35,200
run a command that looks like this

00:42:32,560 --> 00:42:35,920
uh open api generator npm package

00:42:35,200 --> 00:42:38,560
generate

00:42:35,920 --> 00:42:39,760
and point at the api swagger json uh

00:42:38,560 --> 00:42:42,160
that's what we're doing

00:42:39,760 --> 00:42:44,400
um in this demo project we're running in

00:42:42,160 --> 00:42:47,359
the view app we're generating the

00:42:44,400 --> 00:42:48,240
the api files um and we're committing

00:42:47,359 --> 00:42:51,839
those so that

00:42:48,240 --> 00:42:53,920
um then when uh um when we

00:42:51,839 --> 00:42:56,240
when we build and deploy these it can

00:42:53,920 --> 00:42:58,800
call those api files

00:42:56,240 --> 00:42:59,440
as you grow and try out and experiment

00:42:58,800 --> 00:43:02,160
um

00:42:59,440 --> 00:43:03,520
with this workflow in other places you

00:43:02,160 --> 00:43:04,319
might end up in a situation that looks

00:43:03,520 --> 00:43:06,480
more like this

00:43:04,319 --> 00:43:07,920
and you have multiple clients calling

00:43:06,480 --> 00:43:10,079
one api or

00:43:07,920 --> 00:43:11,119
you have a client calling multiple apis

00:43:10,079 --> 00:43:13,680
or or you

00:43:11,119 --> 00:43:14,720
have a combination of the two like we do

00:43:13,680 --> 00:43:16,640
at politico where we have

00:43:14,720 --> 00:43:18,079
many apis and many clients and they're

00:43:16,640 --> 00:43:20,079
calling in different ways so they can

00:43:18,079 --> 00:43:20,880
get the benefit of uh being developed in

00:43:20,079 --> 00:43:22,640
isolation

00:43:20,880 --> 00:43:24,880
in this case it's going to become

00:43:22,640 --> 00:43:26,800
frustrating for client one to run a

00:43:24,880 --> 00:43:27,760
generation command and client two to run

00:43:26,800 --> 00:43:29,280
a generation command

00:43:27,760 --> 00:43:30,880
and client three to run a generation

00:43:29,280 --> 00:43:33,359
command and for them to each be

00:43:30,880 --> 00:43:34,319
committing this generated code uh as we

00:43:33,359 --> 00:43:36,079
know it's kind of a code

00:43:34,319 --> 00:43:38,319
smell and so i just wanted to point out

00:43:36,079 --> 00:43:39,839
that what we've discovered as

00:43:38,319 --> 00:43:41,920
as this workflow has developed for

00:43:39,839 --> 00:43:44,400
politico is that we run

00:43:41,920 --> 00:43:46,960
in the api we generate it locally and

00:43:44,400 --> 00:43:48,800
then we publish it as an npm package

00:43:46,960 --> 00:43:52,000
and i'm really happy to you know reach

00:43:48,800 --> 00:43:54,160
out uh please reach out to me

00:43:52,000 --> 00:43:55,680
here in the chat or on twitter really

00:43:54,160 --> 00:43:57,040
happy to discuss what this workflow

00:43:55,680 --> 00:44:00,079
looks like for us but this

00:43:57,040 --> 00:44:02,240
is really what's allowed us to

00:44:00,079 --> 00:44:03,760
scale this to our various micro services

00:44:02,240 --> 00:44:06,160
in our various applications

00:44:03,760 --> 00:44:07,599
because each api now publishes every

00:44:06,160 --> 00:44:09,680
time it runs on ci

00:44:07,599 --> 00:44:11,520
if there's updates it publishes an npm

00:44:09,680 --> 00:44:12,720
package so that client one and client

00:44:11,520 --> 00:44:14,240
two and client three they can just

00:44:12,720 --> 00:44:17,520
install

00:44:14,240 --> 00:44:20,000
you know api typescript package um

00:44:17,520 --> 00:44:21,920
and that's a way to have this single

00:44:20,000 --> 00:44:23,359
source of truth improved even further i

00:44:21,920 --> 00:44:26,720
would say

00:44:23,359 --> 00:44:28,880
um that was a lot i think uh

00:44:26,720 --> 00:44:30,079
i think we're good in terms of questions

00:44:28,880 --> 00:44:31,520
um the

00:44:30,079 --> 00:44:33,440
obviously the presentation will be

00:44:31,520 --> 00:44:37,200
shared and the the repos in the chat

00:44:33,440 --> 00:44:40,079
please reach out to me um uh

00:44:37,200 --> 00:44:40,720
on twitter um jack p kappa there by me

00:44:40,079 --> 00:44:42,400
on github

00:44:40,720 --> 00:44:44,000
i'm really happy to discuss this we've

00:44:42,400 --> 00:44:46,400
really enjoyed having this workflow

00:44:44,000 --> 00:44:47,040
in place at politico and we hope it can

00:44:46,400 --> 00:44:50,240
be useful

00:44:47,040 --> 00:44:58,400
for your organization as well thank you

00:44:50,240 --> 00:44:58,400

YouTube URL: https://www.youtube.com/watch?v=c9x4SSJEu20


