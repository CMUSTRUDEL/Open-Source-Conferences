Title: Git Workflow Etiquette: Repository Organization for Clean Codebases - Jolene Langlinais
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Engineering Track
Description: 
	Presented by: Jolene Langlinais, Clause
Presented at All Things Open 2020 - Front-End Engineering Track

Abstract: Version control with git provides for powerful collaboration, whether it be a tight-knit tech team or a distributed network in an open source format. Still, proper care must be taken. Good quality software consists of, among other things, code which is robust, resilient, secure, and performant. These attributes are achievable by maintaining a foundation of good quality code and a solid history of documentation. Anyone should be able to join the process and easily figure out and track the status of the project.
Captions: 
	00:00:04,960 --> 00:00:08,880
i'm gonna be talking about

00:00:06,319 --> 00:00:09,519
uh get workflow etiquette as was already

00:00:08,880 --> 00:00:13,280
mentioned

00:00:09,519 --> 00:00:14,799
um this is kind of uh i would describe

00:00:13,280 --> 00:00:18,240
it as kind of a blend

00:00:14,799 --> 00:00:20,880
in intro and intermediate to

00:00:18,240 --> 00:00:22,160
get concepts um because a lot of this

00:00:20,880 --> 00:00:25,039
you might already have seen

00:00:22,160 --> 00:00:26,000
and some of it you haven't or vice versa

00:00:25,039 --> 00:00:28,720
um

00:00:26,000 --> 00:00:29,439
and it's gonna kind of talk a little bit

00:00:28,720 --> 00:00:32,160
about

00:00:29,439 --> 00:00:33,120
the the methodology that i've kind of

00:00:32,160 --> 00:00:36,160
accumulated

00:00:33,120 --> 00:00:39,600
while being a maintainer for uh

00:00:36,160 --> 00:00:42,879
a relatively large open source project

00:00:39,600 --> 00:00:45,120
so um to kind of go first in

00:00:42,879 --> 00:00:47,520
is to go with the agenda so i'm going to

00:00:45,120 --> 00:00:49,920
give a little bit of context about me

00:00:47,520 --> 00:00:51,520
um a little bit of context about git if

00:00:49,920 --> 00:00:54,399
you're not as familiar with it

00:00:51,520 --> 00:00:55,920
and maybe some parts that you might not

00:00:54,399 --> 00:00:58,160
have

00:00:55,920 --> 00:00:59,920
totally acknowledged i'm talking a

00:00:58,160 --> 00:01:04,559
little bit about branches versus

00:00:59,920 --> 00:01:07,119
forks in git rebasing versus merging

00:01:04,559 --> 00:01:08,479
commit messages pull requests and

00:01:07,119 --> 00:01:11,600
reviews

00:01:08,479 --> 00:01:12,320
github issues and open source in general

00:01:11,600 --> 00:01:15,520
um

00:01:12,320 --> 00:01:18,000
so as you can see that this is a little

00:01:15,520 --> 00:01:20,400
bit more skewed towards

00:01:18,000 --> 00:01:22,000
github in particular i haven't

00:01:20,400 --> 00:01:24,240
personally worked with gitlab or

00:01:22,000 --> 00:01:25,280
bitbucket but i would imagine that the

00:01:24,240 --> 00:01:29,360
concepts are

00:01:25,280 --> 00:01:33,200
relatively the same um so about me

00:01:29,360 --> 00:01:34,880
uh there's there's my um website and

00:01:33,200 --> 00:01:37,520
twitter handle if you're interested in

00:01:34,880 --> 00:01:41,680
reaching out to me feel free to

00:01:37,520 --> 00:01:44,159
through my website you can find my email

00:01:41,680 --> 00:01:44,799
and i'm a maintainer for the accord

00:01:44,159 --> 00:01:47,920
project

00:01:44,799 --> 00:01:49,840
which is a linux foundation project that

00:01:47,920 --> 00:01:52,720
deals with

00:01:49,840 --> 00:01:54,720
smart legal contracts and i'm a full

00:01:52,720 --> 00:01:56,320
stack engineer at claws which

00:01:54,720 --> 00:01:58,240
is built on top of that open source

00:01:56,320 --> 00:02:01,280
stack i've been

00:01:58,240 --> 00:02:03,439
in the industry for a couple years now

00:02:01,280 --> 00:02:04,960
and i come from a non-traditional path

00:02:03,439 --> 00:02:06,000
uh to give a little bit more context

00:02:04,960 --> 00:02:08,640
about me i've

00:02:06,000 --> 00:02:09,520
changed careers i think five different

00:02:08,640 --> 00:02:12,879
times

00:02:09,520 --> 00:02:15,280
so hopefully this is the last one um

00:02:12,879 --> 00:02:16,560
and i found myself particularly

00:02:15,280 --> 00:02:19,760
passionate about

00:02:16,560 --> 00:02:22,319
these uh kind of mundane things about

00:02:19,760 --> 00:02:24,000
git and good workflow and how can help

00:02:22,319 --> 00:02:26,239
kind of provide

00:02:24,000 --> 00:02:27,360
lower cognitive load on people who are

00:02:26,239 --> 00:02:30,319
trying to get into

00:02:27,360 --> 00:02:32,080
an open source repository and follow

00:02:30,319 --> 00:02:34,879
what's happening

00:02:32,080 --> 00:02:36,000
and um and also can kind of provide

00:02:34,879 --> 00:02:39,040
better transparency

00:02:36,000 --> 00:02:40,160
for what's happening so a little bit

00:02:39,040 --> 00:02:44,319
about get

00:02:40,160 --> 00:02:46,160
is sorry um

00:02:44,319 --> 00:02:48,640
git is specifically used for version

00:02:46,160 --> 00:02:50,720
control and collaboration

00:02:48,640 --> 00:02:52,239
it's one of the more widely used version

00:02:50,720 --> 00:02:55,519
control systems

00:02:52,239 --> 00:02:57,760
um it provides uh

00:02:55,519 --> 00:02:59,680
powerful collaboration tools for either

00:02:57,760 --> 00:03:01,040
tight-knit tech teams or distributed

00:02:59,680 --> 00:03:03,760
networks

00:03:01,040 --> 00:03:05,360
so open source communities is a great

00:03:03,760 --> 00:03:08,640
fit for that

00:03:05,360 --> 00:03:12,239
um whoops wrong one

00:03:08,640 --> 00:03:15,440
there we go some of the benefits of git

00:03:12,239 --> 00:03:17,920
are that allows you to branch your work

00:03:15,440 --> 00:03:20,560
which makes merging easy it makes your

00:03:17,920 --> 00:03:22,319
work very lightweight

00:03:20,560 --> 00:03:24,080
it also allows you to work offline

00:03:22,319 --> 00:03:27,120
because of those

00:03:24,080 --> 00:03:29,200
local branches that you work off of it

00:03:27,120 --> 00:03:31,920
tracks content rather than files

00:03:29,200 --> 00:03:34,159
which is a lot more efficient with

00:03:31,920 --> 00:03:36,720
version control

00:03:34,159 --> 00:03:39,519
it doesn't impose any workflow on you so

00:03:36,720 --> 00:03:43,280
you're free to make your own workflow

00:03:39,519 --> 00:03:43,280
and um it's

00:03:43,599 --> 00:03:47,519
kind of piggybacking off of the tracking

00:03:46,000 --> 00:03:50,400
content rather than files

00:03:47,519 --> 00:03:51,680
it's repositories are very small in file

00:03:50,400 --> 00:03:55,439
size

00:03:51,680 --> 00:03:55,439
it also has the capacity for

00:03:55,519 --> 00:03:59,280
staging your work before you actually

00:03:58,239 --> 00:04:03,120
merge it into

00:03:59,280 --> 00:04:06,239
a main branch and uh you're also

00:04:03,120 --> 00:04:08,799
able to stash work which

00:04:06,239 --> 00:04:09,920
is comes in in handy and is invaluable

00:04:08,799 --> 00:04:13,040
when you do kind of

00:04:09,920 --> 00:04:15,680
chaotic development

00:04:13,040 --> 00:04:17,840
uh and then the last part is you can

00:04:15,680 --> 00:04:20,880
rewrite rewrite the history

00:04:17,840 --> 00:04:24,079
which is great for preparing batch sets

00:04:20,880 --> 00:04:24,079
and fixing your mistakes

00:04:25,280 --> 00:04:29,759
so the first concept i want to kind of

00:04:27,680 --> 00:04:32,960
go over is the differentiation between

00:04:29,759 --> 00:04:34,479
branching and forking i found that that

00:04:32,960 --> 00:04:35,360
was a confusing part for me at the

00:04:34,479 --> 00:04:37,120
beginning and

00:04:35,360 --> 00:04:38,479
i come across a lot of people that are

00:04:37,120 --> 00:04:43,199
still

00:04:38,479 --> 00:04:44,400
relatively not clear what it means so

00:04:43,199 --> 00:04:47,120
when you're branching there's the

00:04:44,400 --> 00:04:49,040
original main trunk of the source code

00:04:47,120 --> 00:04:52,160
which is denoted here in the green

00:04:49,040 --> 00:04:53,040
the the green dots and you branch off of

00:04:52,160 --> 00:04:56,240
it

00:04:53,040 --> 00:04:58,320
in little bug fixes or features

00:04:56,240 --> 00:04:59,680
but everything is right off of that main

00:04:58,320 --> 00:05:02,880
branch

00:04:59,680 --> 00:05:03,600
and forking is where you copy that

00:05:02,880 --> 00:05:06,479
branch

00:05:03,600 --> 00:05:08,880
or that whole entire trunk and now you

00:05:06,479 --> 00:05:11,919
have a duplicate that's pointing towards

00:05:08,880 --> 00:05:15,039
the original trunk source code

00:05:11,919 --> 00:05:18,320
so you have your own micro branches

00:05:15,039 --> 00:05:20,720
that are a part of your individual fork

00:05:18,320 --> 00:05:22,160
and not a part of the original source

00:05:20,720 --> 00:05:24,400
code

00:05:22,160 --> 00:05:25,440
so branching uh all the work is

00:05:24,400 --> 00:05:27,919
centralized and

00:05:25,440 --> 00:05:29,680
it's easy to collaborate and there's a

00:05:27,919 --> 00:05:31,759
single remote to handle

00:05:29,680 --> 00:05:34,160
but in forking there's increased

00:05:31,759 --> 00:05:37,680
separation between user branches

00:05:34,160 --> 00:05:41,440
and uh the primary primary repository is

00:05:37,680 --> 00:05:43,520
kept a lot cleaner so

00:05:41,440 --> 00:05:46,080
i think i've already kind of put it on

00:05:43,520 --> 00:05:48,479
this uh so branching keeps everything

00:05:46,080 --> 00:05:50,400
more centralized but it can be rather

00:05:48,479 --> 00:05:53,520
quick and messy because there can be

00:05:50,400 --> 00:05:55,440
a whole bunch of branches off of one

00:05:53,520 --> 00:05:57,440
source code if you're working with a

00:05:55,440 --> 00:05:59,120
large team or an open source community

00:05:57,440 --> 00:06:01,919
[Music]

00:05:59,120 --> 00:06:04,080
whereas forking the incentive it's more

00:06:01,919 --> 00:06:06,319
incentivized to keep things clean

00:06:04,080 --> 00:06:07,759
in the the main repository and

00:06:06,319 --> 00:06:10,160
everybody's forks

00:06:07,759 --> 00:06:10,960
everybody's responsible for their own

00:06:10,160 --> 00:06:14,000
and uh

00:06:10,960 --> 00:06:15,520
no and the masters though the masters

00:06:14,000 --> 00:06:18,800
still need to be synced

00:06:15,520 --> 00:06:20,800
um while they're going through that

00:06:18,800 --> 00:06:23,039
so to kind of get into a little bit of

00:06:20,800 --> 00:06:26,400
conventions that i started to adopt

00:06:23,039 --> 00:06:29,600
um that i recommend for uh

00:06:26,400 --> 00:06:30,240
providing some sort of clear repeatable

00:06:29,600 --> 00:06:32,080
pattern

00:06:30,240 --> 00:06:34,080
for people to have better

00:06:32,080 --> 00:06:36,400
approachability to your project

00:06:34,080 --> 00:06:37,600
um i've i start off with kind of a

00:06:36,400 --> 00:06:41,199
naming convention

00:06:37,600 --> 00:06:42,800
that uh allows at every level

00:06:41,199 --> 00:06:45,360
this this will permeate through the rest

00:06:42,800 --> 00:06:48,400
of the talk with the naming convention

00:06:45,360 --> 00:06:49,199
is similar to git commit messages in

00:06:48,400 --> 00:06:52,400
that

00:06:49,199 --> 00:06:54,080
at first glance a user especially a new

00:06:52,400 --> 00:06:54,720
user to your open source platform should

00:06:54,080 --> 00:06:58,000
be able to

00:06:54,720 --> 00:06:59,199
relatively figure out what it exactly is

00:06:58,000 --> 00:07:02,319
that you're doing

00:06:59,199 --> 00:07:04,720
so as as i'm showing here

00:07:02,319 --> 00:07:06,639
um there's the uh the branch name would

00:07:04,720 --> 00:07:07,599
be name forward slash issue tracker

00:07:06,639 --> 00:07:10,800
forward slash

00:07:07,599 --> 00:07:13,520
short description so the

00:07:10,800 --> 00:07:14,639
name being your your get username so we

00:07:13,520 --> 00:07:16,720
can already tell

00:07:14,639 --> 00:07:18,800
who's making this who's in charge of

00:07:16,720 --> 00:07:21,520
this branch the issue tracker is

00:07:18,800 --> 00:07:22,560
which github issue it's referencing and

00:07:21,520 --> 00:07:26,080
a short description

00:07:22,560 --> 00:07:27,919
is just that be able to uh concisely

00:07:26,080 --> 00:07:28,960
describe what's what's happening in this

00:07:27,919 --> 00:07:32,160
branch

00:07:28,960 --> 00:07:34,479
so some examples to further illustrate

00:07:32,160 --> 00:07:36,400
why i think this is a relatively

00:07:34,479 --> 00:07:39,440
important paradigm to adopt

00:07:36,400 --> 00:07:40,080
is if i'm working on a routing service

00:07:39,440 --> 00:07:43,199
which is

00:07:40,080 --> 00:07:45,120
described in issue 14 then my branch

00:07:43,199 --> 00:07:48,639
would be named iron mark

00:07:45,120 --> 00:07:50,000
uh i14 routing service and right there

00:07:48,639 --> 00:07:52,479
you already have

00:07:50,000 --> 00:07:53,599
relatively all the information you need

00:07:52,479 --> 00:07:55,759
to

00:07:53,599 --> 00:07:58,319
very very high level understand what

00:07:55,759 --> 00:07:59,680
this branch is referring to uh if you

00:07:58,319 --> 00:08:00,560
don't have the issue tracking number

00:07:59,680 --> 00:08:02,560
there

00:08:00,560 --> 00:08:04,479
then you might have to do a lot more

00:08:02,560 --> 00:08:07,039
investigative detective work

00:08:04,479 --> 00:08:08,000
to figure out where this branch is

00:08:07,039 --> 00:08:12,240
coming from

00:08:08,000 --> 00:08:15,520
why it's even in existence

00:08:12,240 --> 00:08:19,039
um and so to get uh to another

00:08:15,520 --> 00:08:22,160
relatively uh confusing concept i think

00:08:19,039 --> 00:08:24,160
in git is rebasing versus merging

00:08:22,160 --> 00:08:25,520
i've found that a lot of people prefer

00:08:24,160 --> 00:08:28,720
to use merging

00:08:25,520 --> 00:08:31,280
and i think that rebasing should be

00:08:28,720 --> 00:08:32,560
more of the norm and you should embrace

00:08:31,280 --> 00:08:33,919
the

00:08:32,560 --> 00:08:36,320
the pain of it until you're more

00:08:33,919 --> 00:08:40,080
comfortable with it

00:08:36,320 --> 00:08:42,080
so uh going back to this branches

00:08:40,080 --> 00:08:43,839
concept you have the main source code

00:08:42,080 --> 00:08:46,240
and when you uh

00:08:43,839 --> 00:08:48,160
are working on something to incorporate

00:08:46,240 --> 00:08:50,959
into that you branch off of it

00:08:48,160 --> 00:08:52,959
and that's this blue uh this blue line

00:08:50,959 --> 00:08:54,800
of circles

00:08:52,959 --> 00:08:56,080
when you're rebasing you're basically

00:08:54,800 --> 00:08:58,640
taking that work

00:08:56,080 --> 00:09:01,120
and putting it all the way on to the end

00:08:58,640 --> 00:09:03,200
the the front end of the source code

00:09:01,120 --> 00:09:05,279
so it's as if you were working off of

00:09:03,200 --> 00:09:07,519
the source code all along

00:09:05,279 --> 00:09:09,200
um it's just a seamless transition from

00:09:07,519 --> 00:09:11,360
where the source code ended and then

00:09:09,200 --> 00:09:13,200
your changes

00:09:11,360 --> 00:09:14,480
whereas if you're merging you're

00:09:13,200 --> 00:09:17,519
creating a new

00:09:14,480 --> 00:09:20,080
commit to the source code

00:09:17,519 --> 00:09:21,040
and that is combining the source code to

00:09:20,080 --> 00:09:23,600
your branch

00:09:21,040 --> 00:09:25,519
or maybe it's a reverse of that sorry

00:09:23,600 --> 00:09:28,080
the branch to your source code

00:09:25,519 --> 00:09:29,040
but that creates a whole new commit and

00:09:28,080 --> 00:09:31,440
you'll see that

00:09:29,040 --> 00:09:32,720
in the git log which i'll get to in a

00:09:31,440 --> 00:09:36,000
little bit

00:09:32,720 --> 00:09:38,959
and it doesn't it's not as seamless as a

00:09:36,000 --> 00:09:40,160
of a transition because there's each one

00:09:38,959 --> 00:09:43,680
of these green

00:09:40,160 --> 00:09:46,160
nodes could or could not be the merging

00:09:43,680 --> 00:09:49,279
of a branch

00:09:46,160 --> 00:09:50,320
so rebasing allows the reduction of

00:09:49,279 --> 00:09:53,839
clutter

00:09:50,320 --> 00:09:55,920
both in uh commit messages and

00:09:53,839 --> 00:09:57,360
um other things that you're gonna find

00:09:55,920 --> 00:10:00,080
on github

00:09:57,360 --> 00:10:01,680
and it maintains a readable git log so

00:10:00,080 --> 00:10:03,120
anyone who wants to come into your

00:10:01,680 --> 00:10:04,079
repository and figure out what's been

00:10:03,120 --> 00:10:06,320
going on

00:10:04,079 --> 00:10:07,680
they can log all the git commits and

00:10:06,320 --> 00:10:09,680
it's a much more

00:10:07,680 --> 00:10:11,360
straightforward chronological series of

00:10:09,680 --> 00:10:13,920
events that they can read and figure out

00:10:11,360 --> 00:10:13,920
what's happening

00:10:14,000 --> 00:10:20,399
i would advocate for rebasing locally

00:10:17,360 --> 00:10:24,399
and not rebasing once you get into

00:10:20,399 --> 00:10:27,600
a a platform like github

00:10:24,399 --> 00:10:29,279
and to use rebase to merge in

00:10:27,600 --> 00:10:31,120
when you're in github so at the bottom

00:10:29,279 --> 00:10:32,959
of a pull request

00:10:31,120 --> 00:10:34,480
once it's approved you'll see that you

00:10:32,959 --> 00:10:37,839
can usually

00:10:34,480 --> 00:10:39,519
either merge squash or rebase

00:10:37,839 --> 00:10:41,279
in order to merge in i would recommend

00:10:39,519 --> 00:10:44,560
rebasing again for these

00:10:41,279 --> 00:10:47,519
same concepts and i would advise against

00:10:44,560 --> 00:10:49,600
squashing because

00:10:47,519 --> 00:10:52,000
when you squash locally you're getting

00:10:49,600 --> 00:10:54,320
rid of

00:10:52,000 --> 00:10:55,600
you're getting rid of valuable history

00:10:54,320 --> 00:10:58,160
of what it is you did

00:10:55,600 --> 00:10:59,440
because you're kind of not accurately

00:10:58,160 --> 00:11:02,000
representing

00:10:59,440 --> 00:11:03,680
what this series of events were for the

00:11:02,000 --> 00:11:06,000
code that you did

00:11:03,680 --> 00:11:06,959
and i would also recommend to not squash

00:11:06,000 --> 00:11:09,519
in github

00:11:06,959 --> 00:11:11,920
either unless uh i don't know certain

00:11:09,519 --> 00:11:11,920
cases

00:11:12,240 --> 00:11:18,720
so um the interactive rebase

00:11:15,440 --> 00:11:20,399
is something that i think is

00:11:18,720 --> 00:11:22,480
still intimidating to me even though i

00:11:20,399 --> 00:11:24,320
use it all the time i would imagine it's

00:11:22,480 --> 00:11:26,079
intimidating people more senior than me

00:11:24,320 --> 00:11:27,600
and i am pretty confident it's more

00:11:26,079 --> 00:11:30,720
intimidating to

00:11:27,600 --> 00:11:33,120
people junior than me um

00:11:30,720 --> 00:11:35,360
you can interactive rebase on an entire

00:11:33,120 --> 00:11:37,200
branch you can rebase to a specific

00:11:35,360 --> 00:11:41,440
commit that's this

00:11:37,200 --> 00:11:41,440
head to the nth commit

00:11:41,760 --> 00:11:49,360
for uh one example of rebasing

00:11:45,440 --> 00:11:52,000
um would be to amend for a sign off

00:11:49,360 --> 00:11:53,040
so there's a concept in open source i

00:11:52,000 --> 00:11:54,959
think

00:11:53,040 --> 00:11:56,160
a lot of people are probably going to be

00:11:54,959 --> 00:11:57,760
familiar with uh

00:11:56,160 --> 00:12:00,160
in our core project because we're a part

00:11:57,760 --> 00:12:03,680
of a linux foundation we need to do

00:12:00,160 --> 00:12:05,120
a developer certificate of uh

00:12:03,680 --> 00:12:06,720
oh crap now i can't remember what it's

00:12:05,120 --> 00:12:08,959
called um

00:12:06,720 --> 00:12:09,760
origin i think it's basically saying

00:12:08,959 --> 00:12:12,240
that i

00:12:09,760 --> 00:12:14,560
verified that i made this code and you

00:12:12,240 --> 00:12:16,399
have to do it on each commit

00:12:14,560 --> 00:12:18,320
and a lot of people forget that so you

00:12:16,399 --> 00:12:21,440
can rebase and go back

00:12:18,320 --> 00:12:23,279
and add that dco sign off to each commit

00:12:21,440 --> 00:12:24,959
that you forgot it on

00:12:23,279 --> 00:12:27,680
and that's a great use case for

00:12:24,959 --> 00:12:30,880
interactive rebasing

00:12:27,680 --> 00:12:33,120
um a note that

00:12:30,880 --> 00:12:33,920
when you are interactive rebasing you're

00:12:33,120 --> 00:12:37,120
almost

00:12:33,920 --> 00:12:40,320
you're you're more likely to need to

00:12:37,120 --> 00:12:42,880
force push to override uh

00:12:40,320 --> 00:12:44,079
the commit history that's up on github

00:12:42,880 --> 00:12:47,200
or wherever

00:12:44,079 --> 00:12:49,440
and uh so you just need to

00:12:47,200 --> 00:12:50,959
be careful and cautious whenever you are

00:12:49,440 --> 00:12:52,079
force pushing especially if you're

00:12:50,959 --> 00:12:55,680
working

00:12:52,079 --> 00:12:58,480
on a remote branch that other people are

00:12:55,680 --> 00:12:58,480
also working on

00:13:00,079 --> 00:13:06,000
so that's just reiterating the last

00:13:04,839 --> 00:13:08,320
slide

00:13:06,000 --> 00:13:09,200
and yeah so i would i would recommend to

00:13:08,320 --> 00:13:11,519
people to

00:13:09,200 --> 00:13:12,240
get familiar with rebasing i think that

00:13:11,519 --> 00:13:15,200
there's

00:13:12,240 --> 00:13:16,720
a tendency to lean away from it and lean

00:13:15,200 --> 00:13:18,000
more towards merging because it's more

00:13:16,720 --> 00:13:20,800
straightforward

00:13:18,000 --> 00:13:21,120
it's uh a lot more approachable but i

00:13:20,800 --> 00:13:24,560
think

00:13:21,120 --> 00:13:25,440
it it in the long run is uh less

00:13:24,560 --> 00:13:29,760
conducive to

00:13:25,440 --> 00:13:33,440
a kind of user-friendly

00:13:29,760 --> 00:13:35,839
uh documentation or or uh open source

00:13:33,440 --> 00:13:37,279
uh breadcrumb trail of what's going on

00:13:35,839 --> 00:13:38,800
and uh

00:13:37,279 --> 00:13:40,800
and i think that that adds to the

00:13:38,800 --> 00:13:43,519
cognitive load that is a barrier to

00:13:40,800 --> 00:13:46,959
entry for a lot of people in open source

00:13:43,519 --> 00:13:49,120
um but if you uh lean into it and

00:13:46,959 --> 00:13:50,160
and get more comfortable with it i think

00:13:49,120 --> 00:13:53,279
that it uh

00:13:50,160 --> 00:13:55,199
it will pay off so

00:13:53,279 --> 00:13:56,639
uh going back to kind of my workflow

00:13:55,199 --> 00:13:59,760
that i've that i've

00:13:56,639 --> 00:14:01,279
been uh adopting in a court project that

00:13:59,760 --> 00:14:04,560
i think is

00:14:01,279 --> 00:14:07,839
uh has served really well um in this

00:14:04,560 --> 00:14:09,040
in this fashion is that uh each time

00:14:07,839 --> 00:14:12,880
that i'm working

00:14:09,040 --> 00:14:16,560
on my on a branch in my own fork

00:14:12,880 --> 00:14:19,680
i go through this uh series of

00:14:16,560 --> 00:14:22,399
uh bash commands so

00:14:19,680 --> 00:14:23,760
you i think that i've adapted this i

00:14:22,399 --> 00:14:25,839
don't know

00:14:23,760 --> 00:14:27,199
if this has actually taken effect in

00:14:25,839 --> 00:14:28,240
github but i know that they're changing

00:14:27,199 --> 00:14:30,880
master to main

00:14:28,240 --> 00:14:32,959
so i've adapted this to be maine so if

00:14:30,880 --> 00:14:36,000
this isn't as familiar it's because

00:14:32,959 --> 00:14:37,440
github is committed to changing the the

00:14:36,000 --> 00:14:40,720
terminology master

00:14:37,440 --> 00:14:44,240
to maine so check out maine

00:14:40,720 --> 00:14:47,279
fetch everything from the uh the

00:14:44,240 --> 00:14:49,760
root source and print it

00:14:47,279 --> 00:14:50,560
and then you rebase it onto your

00:14:49,760 --> 00:14:52,720
upstream

00:14:50,560 --> 00:14:53,680
and then you push it up to your origin

00:14:52,720 --> 00:14:56,560
so that that

00:14:53,680 --> 00:14:57,760
kind of puts you up into sync with uh

00:14:56,560 --> 00:15:01,279
the work that

00:14:57,760 --> 00:15:02,560
is in the the origin uh well i'm getting

00:15:01,279 --> 00:15:04,480
the terms mixed up

00:15:02,560 --> 00:15:05,760
but it's uh if i'm working off of a

00:15:04,480 --> 00:15:08,079
chord project and i have a

00:15:05,760 --> 00:15:08,880
uh the fork of it then i'm getting up to

00:15:08,079 --> 00:15:12,480
date with

00:15:08,880 --> 00:15:15,440
a court project on my iron work

00:15:12,480 --> 00:15:15,440
uh fork

00:15:15,760 --> 00:15:20,320
and then i'll go into my own branch

00:15:18,399 --> 00:15:21,040
which goes with that naming convention

00:15:20,320 --> 00:15:24,079
that i

00:15:21,040 --> 00:15:24,079
had described earlier

00:15:24,320 --> 00:15:31,279
i'm going to rebase again

00:15:27,920 --> 00:15:32,959
or sorry i'm doing my work i i forgot my

00:15:31,279 --> 00:15:34,800
speaker's notes on this

00:15:32,959 --> 00:15:36,800
so the workflow is is i create a new

00:15:34,800 --> 00:15:38,720
branch i do the work

00:15:36,800 --> 00:15:41,199
when i'm about to ready when i'm ready

00:15:38,720 --> 00:15:43,920
to commit it i rebase

00:15:41,199 --> 00:15:46,720
and then i push up to that branch name

00:15:43,920 --> 00:15:48,240
so i've done all the work in react hooks

00:15:46,720 --> 00:15:51,839
something where i'm doing where i'm

00:15:48,240 --> 00:15:54,959
adapting react components to react hooks

00:15:51,839 --> 00:15:58,880
and uh once i rebase i'll need to

00:15:54,959 --> 00:16:01,440
force push to go back up and

00:15:58,880 --> 00:16:02,800
then once i'm i have that merged in i

00:16:01,440 --> 00:16:04,959
want to make sure that i delete

00:16:02,800 --> 00:16:08,560
that branch from my fork to kind of keep

00:16:04,959 --> 00:16:12,000
things tidy

00:16:08,560 --> 00:16:14,000
uh a note on merging which i've already

00:16:12,000 --> 00:16:17,600
said i think people should kind of avoid

00:16:14,000 --> 00:16:20,720
but it is non-destructive

00:16:17,600 --> 00:16:22,079
but it easily pollutes the log and i

00:16:20,720 --> 00:16:26,000
think that that is my

00:16:22,079 --> 00:16:29,199
one of the next slides yeah

00:16:26,000 --> 00:16:31,519
um oh yes so

00:16:29,199 --> 00:16:33,600
a couple things that people might not be

00:16:31,519 --> 00:16:36,720
as familiar with with git commands

00:16:33,600 --> 00:16:40,240
um one is uh git

00:16:36,720 --> 00:16:41,920
diff so when you do you can use

00:16:40,240 --> 00:16:43,759
git status to figure out what are all

00:16:41,920 --> 00:16:46,800
the changes that you have locally

00:16:43,759 --> 00:16:48,639
and you can do git diff for each file or

00:16:46,800 --> 00:16:50,160
for all of them just without specifying

00:16:48,639 --> 00:16:53,600
a file and see

00:16:50,160 --> 00:16:54,959
the exact difference in uh in code

00:16:53,600 --> 00:16:57,920
changes that you have

00:16:54,959 --> 00:16:59,199
from your local to your branch and it's

00:16:57,920 --> 00:17:02,880
the same as if in your

00:16:59,199 --> 00:17:05,679
in github what you see in a pull request

00:17:02,880 --> 00:17:07,120
is like the red versus green um you can

00:17:05,679 --> 00:17:09,360
see that locally before you can make

00:17:07,120 --> 00:17:12,720
code up this is a great way to catch

00:17:09,360 --> 00:17:14,880
uh unintended console logs or

00:17:12,720 --> 00:17:16,640
comments that you didn't mean to push up

00:17:14,880 --> 00:17:21,199
to the source code

00:17:16,640 --> 00:17:24,720
in github and then yes so to get log

00:17:21,199 --> 00:17:27,919
this is a great way to view

00:17:24,720 --> 00:17:30,160
all the commits in the repository

00:17:27,919 --> 00:17:32,400
i would recommend checking this out

00:17:30,160 --> 00:17:32,960
whenever you come to a new repository

00:17:32,400 --> 00:17:35,679
that you're

00:17:32,960 --> 00:17:36,880
interested in getting involved in or

00:17:35,679 --> 00:17:39,360
using

00:17:36,880 --> 00:17:41,840
just to see how it looks and it's rather

00:17:39,360 --> 00:17:41,840
interesting

00:17:42,320 --> 00:17:49,520
um and then there's uh get blame

00:17:45,600 --> 00:17:49,520
which will show you

00:17:49,600 --> 00:17:54,320
basically line per line what why the

00:17:52,640 --> 00:17:55,520
code that you're seeing is there who put

00:17:54,320 --> 00:17:56,720
that code there and what was it

00:17:55,520 --> 00:18:00,720
beforehand

00:17:56,720 --> 00:18:03,760
um and it's really interesting to

00:18:00,720 --> 00:18:05,760
to constantly use i personally use nvs

00:18:03,760 --> 00:18:09,200
code i use an extension called git

00:18:05,760 --> 00:18:12,240
lens and uh inline it'll show you

00:18:09,200 --> 00:18:14,000
who the last commit was on that line and

00:18:12,240 --> 00:18:17,039
i'll frequently find myself

00:18:14,000 --> 00:18:19,440
being the culprit for why bad code

00:18:17,039 --> 00:18:20,240
is in what i'm looking at who wrote this

00:18:19,440 --> 00:18:23,280
bad code well

00:18:20,240 --> 00:18:25,200
turns out it was me um

00:18:23,280 --> 00:18:26,320
and then so to get back into the

00:18:25,200 --> 00:18:29,760
convention that i

00:18:26,320 --> 00:18:34,000
kind of adhere to and would recommend

00:18:29,760 --> 00:18:37,200
is git commit message uh

00:18:34,000 --> 00:18:39,760
syntax so commits

00:18:37,200 --> 00:18:42,000
are are there for capturing a single

00:18:39,760 --> 00:18:45,120
logical change in code

00:18:42,000 --> 00:18:48,640
so you these should be

00:18:45,120 --> 00:18:52,320
very often and very short in iteration

00:18:48,640 --> 00:18:54,480
so if you make a function you

00:18:52,320 --> 00:18:56,240
would rather commit then rather than

00:18:54,480 --> 00:18:57,679
creating a whole bunch of functions and

00:18:56,240 --> 00:18:58,799
a whole bunch of functionality and a

00:18:57,679 --> 00:19:02,000
whole bunch of features and then

00:18:58,799 --> 00:19:03,600
committing it all in one commit

00:19:02,000 --> 00:19:05,760
and it it should really show a

00:19:03,600 --> 00:19:08,240
chronological uh

00:19:05,760 --> 00:19:09,520
history of the work that you did in

00:19:08,240 --> 00:19:11,440
whatever branch or

00:19:09,520 --> 00:19:13,520
feature or bug fix that you're working

00:19:11,440 --> 00:19:16,240
on

00:19:13,520 --> 00:19:16,880
and i think uh i would really advocate

00:19:16,240 --> 00:19:20,000
for people

00:19:16,880 --> 00:19:21,919
to slow down when they

00:19:20,000 --> 00:19:25,440
are doing anything relating to git but

00:19:21,919 --> 00:19:27,440
especially commit messages because

00:19:25,440 --> 00:19:29,600
this is literally documenting the

00:19:27,440 --> 00:19:32,400
history of what it is that you did

00:19:29,600 --> 00:19:34,160
and makes it that much easier for people

00:19:32,400 --> 00:19:36,240
who weren't there for when you did it

00:19:34,160 --> 00:19:37,360
to be understand to be able to

00:19:36,240 --> 00:19:38,880
understand

00:19:37,360 --> 00:19:40,640
what it is that you did and why you did

00:19:38,880 --> 00:19:44,720
it um so

00:19:40,640 --> 00:19:47,760
it again lowers that cognitive uh

00:19:44,720 --> 00:19:50,559
cognitive barrier to entry for

00:19:47,760 --> 00:19:52,400
newer developers either to the field or

00:19:50,559 --> 00:19:55,600
to your open source repository

00:19:52,400 --> 00:19:58,320
or community um so yeah i would

00:19:55,600 --> 00:20:01,440
take take the time provide uh issue

00:19:58,320 --> 00:20:04,720
references which i'll get to in a second

00:20:01,440 --> 00:20:05,520
and uh write it out as if the way that

00:20:04,720 --> 00:20:07,039
you would want

00:20:05,520 --> 00:20:09,760
it to be written if you were trying to

00:20:07,039 --> 00:20:12,400
figure out what was going on

00:20:09,760 --> 00:20:13,360
so the the commit message formatting

00:20:12,400 --> 00:20:16,640
that i have

00:20:13,360 --> 00:20:17,360
uh adopted is uh type scope subject

00:20:16,640 --> 00:20:20,640
footer

00:20:17,360 --> 00:20:22,960
so this is how all my commits look um

00:20:20,640 --> 00:20:23,919
unless i am specifically not working off

00:20:22,960 --> 00:20:26,320
of

00:20:23,919 --> 00:20:28,640
uh an issue in github which i'll show in

00:20:26,320 --> 00:20:28,640
a second

00:20:28,720 --> 00:20:32,880
so there are this is not an exhaustive

00:20:31,200 --> 00:20:35,200
list but there's a number of different

00:20:32,880 --> 00:20:36,640
types that you could categorize a change

00:20:35,200 --> 00:20:39,360
to code being

00:20:36,640 --> 00:20:40,400
you're creating a new feature you're

00:20:39,360 --> 00:20:44,480
doing a bug fix

00:20:40,400 --> 00:20:44,480
documentation refactoring so on

00:20:44,880 --> 00:20:48,000
the scope would be kind of the focal

00:20:46,640 --> 00:20:49,919
point for where this

00:20:48,000 --> 00:20:51,120
commit message the code that is being

00:20:49,919 --> 00:20:55,440
changed

00:20:51,120 --> 00:20:56,320
uh exists and and provides some context

00:20:55,440 --> 00:20:59,440
for whoever is

00:20:56,320 --> 00:21:02,400
reading the git commit message

00:20:59,440 --> 00:21:02,799
the subject is an imperative description

00:21:02,400 --> 00:21:06,640
of

00:21:02,799 --> 00:21:09,039
the changes so very short succinct uh

00:21:06,640 --> 00:21:10,640
description of what that change is and

00:21:09,039 --> 00:21:13,440
then the footer being

00:21:10,640 --> 00:21:16,559
the issue reference so in my case github

00:21:13,440 --> 00:21:18,640
but that could be gitlab or whatever

00:21:16,559 --> 00:21:20,000
which was going to correspond to the

00:21:18,640 --> 00:21:23,520
branch where it has

00:21:20,000 --> 00:21:26,640
name issue tracker and then

00:21:23,520 --> 00:21:28,240
description so some examples

00:21:26,640 --> 00:21:30,159
to illustrate why i think this is

00:21:28,240 --> 00:21:33,200
important is

00:21:30,159 --> 00:21:34,000
um i can i can read a commit message

00:21:33,200 --> 00:21:37,360
that says

00:21:34,000 --> 00:21:39,039
feature in utilities include optional

00:21:37,360 --> 00:21:43,120
state for test utility

00:21:39,039 --> 00:21:44,880
at issue 22. i as a complete outsider

00:21:43,120 --> 00:21:47,440
can figure out exactly what

00:21:44,880 --> 00:21:49,200
that commit is doing by reading just

00:21:47,440 --> 00:21:52,240
that it doesn't say

00:21:49,200 --> 00:21:55,280
uh optional state or

00:21:52,240 --> 00:21:57,679
new feature or test utility

00:21:55,280 --> 00:21:59,440
it provides all the context and i can go

00:21:57,679 --> 00:22:03,280
to issue 22

00:21:59,440 --> 00:22:05,600
and see more context same for the rest

00:22:03,280 --> 00:22:05,600
of these

00:22:09,280 --> 00:22:14,799
so that commit message kind of syntax i

00:22:13,120 --> 00:22:19,840
carry over into

00:22:14,799 --> 00:22:24,159
pull requests in github um

00:22:19,840 --> 00:22:26,480
so pull requests are an opportunity to

00:22:24,159 --> 00:22:27,840
uh get peer reviews on the code that

00:22:26,480 --> 00:22:29,919
you're trying to commit to

00:22:27,840 --> 00:22:31,280
the main source code to share

00:22:29,919 --> 00:22:33,280
information and

00:22:31,280 --> 00:22:35,360
do knowledge sharing so you're not the

00:22:33,280 --> 00:22:36,880
only person who knew

00:22:35,360 --> 00:22:39,280
what the code it is that you're adding

00:22:36,880 --> 00:22:40,720
in does and it provides some level of

00:22:39,280 --> 00:22:44,320
accountability to the code

00:22:40,720 --> 00:22:44,320
that is being added in

00:22:44,400 --> 00:22:51,840
um pull request also uh

00:22:48,240 --> 00:22:54,799
should be a complete and uh

00:22:51,840 --> 00:22:56,240
fully autonomous code addition to the

00:22:54,799 --> 00:22:59,039
main source code

00:22:56,240 --> 00:23:00,240
so you really shouldn't think of so

00:22:59,039 --> 00:23:02,960
commits can be

00:23:00,240 --> 00:23:04,559
incremental but pull requests shouldn't

00:23:02,960 --> 00:23:08,559
be as incremental they should be

00:23:04,559 --> 00:23:11,840
a fully autonomous an independent

00:23:08,559 --> 00:23:14,400
addition to the source code and i think

00:23:11,840 --> 00:23:15,520
that this is an important aspect is the

00:23:14,400 --> 00:23:17,840
title should

00:23:15,520 --> 00:23:19,360
follow the exact same format as the git

00:23:17,840 --> 00:23:22,880
commit messages

00:23:19,360 --> 00:23:26,000
so going back

00:23:22,880 --> 00:23:28,159
if i am in github i can also see

00:23:26,000 --> 00:23:29,600
in pull requests if there are 30 pull

00:23:28,159 --> 00:23:34,000
requests i can see

00:23:29,600 --> 00:23:36,559
what exactly each pull request is um

00:23:34,000 --> 00:23:37,520
is doing or describing by reading the

00:23:36,559 --> 00:23:39,520
titles

00:23:37,520 --> 00:23:40,720
if it follows this format i can go to

00:23:39,520 --> 00:23:43,679
issue 22

00:23:40,720 --> 00:23:44,960
i can see that this is a test added to

00:23:43,679 --> 00:23:48,000
sagas

00:23:44,960 --> 00:23:48,000
and so on and so forth

00:23:48,840 --> 00:23:53,760
and um

00:23:51,360 --> 00:23:53,760
let's see

00:23:54,559 --> 00:24:02,320
yeah so the the pull request um

00:23:58,000 --> 00:24:05,520
correlates to get let's see where am i

00:24:02,320 --> 00:24:07,600
trying to bring up my notes there we go

00:24:05,520 --> 00:24:09,039
um yeah so pull requests correlate to

00:24:07,600 --> 00:24:11,120
get in the same way that

00:24:09,039 --> 00:24:14,240
they should be small and incremental but

00:24:11,120 --> 00:24:19,039
they should be fully encapsulated

00:24:14,240 --> 00:24:22,720
the title maps to get and oops

00:24:19,039 --> 00:24:26,000
um prs also map to issues

00:24:22,720 --> 00:24:26,000
and that um

00:24:26,320 --> 00:24:31,440
they should read like a git log in

00:24:28,720 --> 00:24:33,679
chronological order all the merged prs

00:24:31,440 --> 00:24:34,559
and they all correspond to issues there

00:24:33,679 --> 00:24:37,760
should be

00:24:34,559 --> 00:24:39,360
some level of uh clarity when someone

00:24:37,760 --> 00:24:40,960
can come into your get

00:24:39,360 --> 00:24:43,360
your github repository for an open

00:24:40,960 --> 00:24:46,880
source organization or community

00:24:43,360 --> 00:24:47,279
and go through either the git log or go

00:24:46,880 --> 00:24:50,080
through

00:24:47,279 --> 00:24:50,960
all the closed and merged pull requests

00:24:50,080 --> 00:24:52,640
and see

00:24:50,960 --> 00:24:54,880
chronologically all the things that were

00:24:52,640 --> 00:24:54,880
done

00:24:56,000 --> 00:25:02,320
i also use a relative format

00:24:59,120 --> 00:25:06,080
for pull requests to again give

00:25:02,320 --> 00:25:06,960
some structure to the changes that are

00:25:06,080 --> 00:25:09,520
being proposed

00:25:06,960 --> 00:25:10,559
so that anyone who comes into the the

00:25:09,520 --> 00:25:13,600
code base

00:25:10,559 --> 00:25:15,520
who's new to it can have an easier time

00:25:13,600 --> 00:25:17,679
of figuring out what's happening

00:25:15,520 --> 00:25:19,360
so the issue number at the top is going

00:25:17,679 --> 00:25:22,400
to correspond with

00:25:19,360 --> 00:25:23,039
the footer in all the commit messages in

00:25:22,400 --> 00:25:26,159
the pr

00:25:23,039 --> 00:25:27,200
title and that will point you to the

00:25:26,159 --> 00:25:30,400
issue to provide

00:25:27,200 --> 00:25:33,279
more context you can provide

00:25:30,400 --> 00:25:34,240
related issues you can provide flags of

00:25:33,279 --> 00:25:37,200
like

00:25:34,240 --> 00:25:38,320
note that you need to add something when

00:25:37,200 --> 00:25:41,919
you're running tests

00:25:38,320 --> 00:25:43,200
i don't know but then these changes

00:25:41,919 --> 00:25:46,799
which are bulleted

00:25:43,200 --> 00:25:49,840
this should theoretically be just

00:25:46,799 --> 00:25:50,880
line for line a list of all the commit

00:25:49,840 --> 00:25:54,000
messages

00:25:50,880 --> 00:25:56,400
in the pr because if each commit

00:25:54,000 --> 00:25:57,600
is self-containing and it's well

00:25:56,400 --> 00:26:00,000
described

00:25:57,600 --> 00:26:01,520
then really you should be able to just

00:26:00,000 --> 00:26:04,480
copy and paste all that

00:26:01,520 --> 00:26:05,600
into the changes and that gives you a

00:26:04,480 --> 00:26:11,600
good succinct

00:26:05,600 --> 00:26:14,880
uh story for what the changes are

00:26:11,600 --> 00:26:18,240
okay so i think i have five more minutes

00:26:14,880 --> 00:26:21,279
until q a so

00:26:18,240 --> 00:26:23,840
um what are you doing a pull request uh

00:26:21,279 --> 00:26:24,880
i going back to kind of the commit

00:26:23,840 --> 00:26:27,360
message

00:26:24,880 --> 00:26:29,360
concept of how i'm wanting to advise

00:26:27,360 --> 00:26:32,960
people to take their time more

00:26:29,360 --> 00:26:35,279
i think that um there should be more

00:26:32,960 --> 00:26:40,080
emphasis and deliberation put on

00:26:35,279 --> 00:26:42,080
uh on providing context for people who

00:26:40,080 --> 00:26:44,320
aren't you basically that don't know

00:26:42,080 --> 00:26:46,000
exactly what is going on with this code

00:26:44,320 --> 00:26:49,679
that you wrote

00:26:46,000 --> 00:26:52,480
in solitude so providing context of

00:26:49,679 --> 00:26:54,720
what changes in this pull request

00:26:52,480 --> 00:26:56,799
address the issue that it's relating to

00:26:54,720 --> 00:26:58,640
what are the side effects why is this

00:26:56,799 --> 00:27:02,000
pull request necessary

00:26:58,640 --> 00:27:02,960
um i think that pull requests should be

00:27:02,000 --> 00:27:04,799
a fully

00:27:02,960 --> 00:27:06,880
self-contained anyone should be able to

00:27:04,799 --> 00:27:08,000
go into it and get all the context that

00:27:06,880 --> 00:27:11,919
they need

00:27:08,000 --> 00:27:14,320
um i think that again this is a layer of

00:27:11,919 --> 00:27:16,240
in my opinion of low accessibility to

00:27:14,320 --> 00:27:18,840
open source in general

00:27:16,240 --> 00:27:20,320
is that there's very little

00:27:18,840 --> 00:27:22,960
consideration

00:27:20,320 --> 00:27:24,080
put to context when it comes to issues

00:27:22,960 --> 00:27:27,200
or

00:27:24,080 --> 00:27:28,000
documentation or or any of these

00:27:27,200 --> 00:27:32,000
standardized

00:27:28,000 --> 00:27:34,080
ways of operating that that provides a

00:27:32,000 --> 00:27:35,200
too much of a barrier for new people to

00:27:34,080 --> 00:27:37,600
get involved

00:27:35,200 --> 00:27:39,279
and i think everyone probably has some

00:27:37,600 --> 00:27:40,960
experience of people saying that i'm too

00:27:39,279 --> 00:27:42,399
intimidated to

00:27:40,960 --> 00:27:44,000
contribute to open source and i think

00:27:42,399 --> 00:27:47,360
that this is one of those things that

00:27:44,000 --> 00:27:50,960
adds into that intimidation

00:27:47,360 --> 00:27:54,480
so be thorough when you're uh doing prs

00:27:50,960 --> 00:27:57,360
and review npr's and think of yourself

00:27:54,480 --> 00:27:57,760
as when you're reviewing a pull request

00:27:57,360 --> 00:27:59,760
as

00:27:57,760 --> 00:28:02,000
like a guardian of the git history a

00:27:59,760 --> 00:28:06,640
guardian of the source code

00:28:02,000 --> 00:28:09,440
and the keeper for code quality so um

00:28:06,640 --> 00:28:10,640
just trying to keep everything up to the

00:28:09,440 --> 00:28:13,279
standardized

00:28:10,640 --> 00:28:15,120
way of doing things within that open

00:28:13,279 --> 00:28:17,600
source community is a really good

00:28:15,120 --> 00:28:19,600
responsibility

00:28:17,600 --> 00:28:20,880
and remember that what's obvious now is

00:28:19,600 --> 00:28:22,640
not obvious later again

00:28:20,880 --> 00:28:23,919
what's obvious to you when you wrote the

00:28:22,640 --> 00:28:26,159
code

00:28:23,919 --> 00:28:27,919
or to you when you spoke directly to the

00:28:26,159 --> 00:28:29,200
person who wrote the code

00:28:27,919 --> 00:28:31,679
isn't going to be obvious to someone

00:28:29,200 --> 00:28:34,399
later and

00:28:31,679 --> 00:28:35,840
having better quality code is better

00:28:34,399 --> 00:28:39,279
than

00:28:35,840 --> 00:28:42,320
more quickly finishing a feature um

00:28:39,279 --> 00:28:43,760
but it isn't always the trunk card

00:28:42,320 --> 00:28:48,399
so you don't want to block things just

00:28:43,760 --> 00:28:52,720
to make the syntax all perfect

00:28:48,399 --> 00:28:55,840
um i think also i wanted to speak on

00:28:52,720 --> 00:28:56,399
uh there is probably a conflict of

00:28:55,840 --> 00:28:58,799
interest

00:28:56,399 --> 00:29:00,559
if you're one of the co-contributors you

00:28:58,799 --> 00:29:03,120
shouldn't necessarily be reviewing your

00:29:00,559 --> 00:29:03,120
own code

00:29:04,000 --> 00:29:08,399
and then a word on github issues is

00:29:08,799 --> 00:29:15,520
that i think of these as

00:29:12,480 --> 00:29:17,360
almost like threads in a forum uh

00:29:15,520 --> 00:29:19,600
they're they're easily maintained and

00:29:17,360 --> 00:29:22,399
you can use them very liberally to just

00:29:19,600 --> 00:29:23,679
start discussions or ask questions um

00:29:22,399 --> 00:29:26,480
the foundations for

00:29:23,679 --> 00:29:28,080
conversations and you shouldn't be uh

00:29:26,480 --> 00:29:31,440
worried about

00:29:28,080 --> 00:29:31,440
you know using uh

00:29:31,679 --> 00:29:35,919
taking up space by opening up a github

00:29:33,760 --> 00:29:38,799
issue just ask a question i think that

00:29:35,919 --> 00:29:40,080
participation is better than the perfect

00:29:38,799 --> 00:29:43,120
question or

00:29:40,080 --> 00:29:46,880
um already being uh

00:29:43,120 --> 00:29:46,880
knowledgeable about the source code

00:29:47,600 --> 00:29:52,320
but at the same time you don't want to

00:29:50,000 --> 00:29:54,960
be rushing answers or responses

00:29:52,320 --> 00:29:56,559
you don't want to gloss over context

00:29:54,960 --> 00:29:59,440
because you're just rushing

00:29:56,559 --> 00:30:01,200
i think people should slow down and be

00:29:59,440 --> 00:30:04,559
more deliberate with

00:30:01,200 --> 00:30:04,559
open source contributions

00:30:04,720 --> 00:30:11,760
so um this is kind of

00:30:09,200 --> 00:30:12,960
uh an overview of my kind of approach

00:30:11,760 --> 00:30:16,159
through my experience of

00:30:12,960 --> 00:30:19,440
at a core project uh for commits

00:30:16,159 --> 00:30:22,399
prs issues labels projects

00:30:19,440 --> 00:30:24,640
and how to track these things and

00:30:22,399 --> 00:30:25,440
provide a good transparent breadcrumb

00:30:24,640 --> 00:30:27,919
trail

00:30:25,440 --> 00:30:28,559
for people to have an easier way of

00:30:27,919 --> 00:30:31,200
approaching

00:30:28,559 --> 00:30:32,880
the the source code or or the open

00:30:31,200 --> 00:30:35,760
source community

00:30:32,880 --> 00:30:38,080
and to be to foster more collaboration

00:30:35,760 --> 00:30:42,240
in an open atmosphere

00:30:38,080 --> 00:30:44,080
and uh again so more context on

00:30:42,240 --> 00:30:46,159
the court project is that you can find

00:30:44,080 --> 00:30:47,919
more information about that project

00:30:46,159 --> 00:30:49,840
which i'd be really happy if anyone came

00:30:47,919 --> 00:30:51,039
in can buy and said high or ask

00:30:49,840 --> 00:30:54,640
questions

00:30:51,039 --> 00:30:55,919
at these two links um especially now

00:30:54,640 --> 00:30:57,919
it is a little bit late in the game but

00:30:55,919 --> 00:30:59,519
we are participating in hacktoberfest so

00:30:57,919 --> 00:31:03,120
if you're interested in that

00:30:59,519 --> 00:31:08,080
there you go okay so um

00:31:03,120 --> 00:31:08,080
i'm going to switch over to q a and

00:31:08,159 --> 00:31:13,360
pull this over i already have three

00:31:10,720 --> 00:31:13,360
questions

00:31:13,519 --> 00:31:18,000
so let's see the the commit message

00:31:16,320 --> 00:31:18,640
formatting seems really close to the

00:31:18,000 --> 00:31:21,360
convention

00:31:18,640 --> 00:31:23,200
conventional commits specification is

00:31:21,360 --> 00:31:25,039
there a reason you have not adopted that

00:31:23,200 --> 00:31:28,880
standard

00:31:25,039 --> 00:31:33,440
uh no there is not to be super succinct

00:31:28,880 --> 00:31:36,640
i am not aware of that convention uh

00:31:33,440 --> 00:31:37,120
i i'm i am interested in looking that

00:31:36,640 --> 00:31:39,919
over

00:31:37,120 --> 00:31:41,840
after this talk um but no there isn't

00:31:39,919 --> 00:31:46,799
any specific reason other than just

00:31:41,840 --> 00:31:49,840
ignorance uh another question

00:31:46,799 --> 00:31:50,960
uh was the comment below the commit

00:31:49,840 --> 00:31:54,000
message

00:31:50,960 --> 00:31:54,960
slash slash part of the commit message

00:31:54,000 --> 00:31:58,159
or just explaining

00:31:54,960 --> 00:32:00,799
oh yes so uh let me go back to one of

00:31:58,159 --> 00:32:03,760
these examples

00:32:00,799 --> 00:32:04,559
these double slash these comments are

00:32:03,760 --> 00:32:07,120
just a

00:32:04,559 --> 00:32:08,159
description these aren't a part of the

00:32:07,120 --> 00:32:11,440
commit

00:32:08,159 --> 00:32:15,679
this is just to kind of provide context

00:32:11,440 --> 00:32:18,720
i should have said that earlier yes

00:32:15,679 --> 00:32:21,840
um so this is just for the presentation

00:32:18,720 --> 00:32:23,840
okay so related to that that question

00:32:21,840 --> 00:32:25,279
do your commit messages contain more

00:32:23,840 --> 00:32:28,880
than what is in the subject

00:32:25,279 --> 00:32:32,640
i.e do they have a body

00:32:28,880 --> 00:32:33,919
no i don't have strong comments about

00:32:32,640 --> 00:32:36,159
that but i just avoid

00:32:33,919 --> 00:32:38,480
having uh commit messages where you have

00:32:36,159 --> 00:32:41,600
the the subject and then a whole body

00:32:38,480 --> 00:32:42,000
i think that that information um is

00:32:41,600 --> 00:32:44,640
probably

00:32:42,000 --> 00:32:45,840
better provided in a pull request or in

00:32:44,640 --> 00:32:49,120
an issue

00:32:45,840 --> 00:32:52,320
um rather than trying to shove that into

00:32:49,120 --> 00:32:54,159
commits um i just don't

00:32:52,320 --> 00:32:56,159
feel like that's the appropriate way

00:32:54,159 --> 00:32:58,720
appropriate place to

00:32:56,159 --> 00:33:02,159
fit that much information but you know

00:32:58,720 --> 00:33:02,159
that's just my preference i guess

00:33:04,720 --> 00:33:08,240
another question as a maintainer i find

00:33:07,840 --> 00:33:11,360
that

00:33:08,240 --> 00:33:13,279
i want to take time when doing

00:33:11,360 --> 00:33:14,799
pull request reviews and responding to

00:33:13,279 --> 00:33:16,640
issue comments

00:33:14,799 --> 00:33:19,120
i sometimes want to take a few days to

00:33:16,640 --> 00:33:20,799
think about the change and

00:33:19,120 --> 00:33:22,720
my response but there seems to be an

00:33:20,799 --> 00:33:24,559
assumption from most people

00:33:22,720 --> 00:33:26,240
that there will be a response within a

00:33:24,559 --> 00:33:28,080
day or two i'm finding

00:33:26,240 --> 00:33:30,640
that really stressful any suggestions

00:33:28,080 --> 00:33:33,120
for me yeah so

00:33:30,640 --> 00:33:35,200
i've experienced that specifically i

00:33:33,120 --> 00:33:38,399
think in hacktoberfest most of all

00:33:35,200 --> 00:33:41,840
but um

00:33:38,399 --> 00:33:43,440
i think uh i used to

00:33:41,840 --> 00:33:45,840
so i used to work in culinary and i

00:33:43,440 --> 00:33:49,760
always use food metaphors

00:33:45,840 --> 00:33:52,799
i think think of it as um

00:33:49,760 --> 00:33:55,600
you're a waiter at a restaurant and

00:33:52,799 --> 00:33:56,559
a customer comes in you don't if you if

00:33:55,600 --> 00:33:58,159
you're not ready to

00:33:56,559 --> 00:34:00,960
talk to them yet you don't just avoid

00:33:58,159 --> 00:34:03,360
them you at least go over and say

00:34:00,960 --> 00:34:05,120
i you know i'm busy at the moment i'll

00:34:03,360 --> 00:34:06,880
be right back in a minute

00:34:05,120 --> 00:34:08,480
and then you can wait 15 minutes and

00:34:06,880 --> 00:34:10,159
they're not upset because

00:34:08,480 --> 00:34:12,399
you've acknowledged their existence or

00:34:10,159 --> 00:34:14,720
their presence so i think

00:34:12,399 --> 00:34:17,040
my suggestion would be if you're not

00:34:14,720 --> 00:34:18,800
ready to review yet

00:34:17,040 --> 00:34:20,320
leave a comment and say like looking

00:34:18,800 --> 00:34:22,159
into this

00:34:20,320 --> 00:34:23,919
will shouldn't get back to you in a few

00:34:22,159 --> 00:34:24,800
days or whatever

00:34:23,919 --> 00:34:27,280
because i think that that

00:34:24,800 --> 00:34:30,000
acknowledgement is really

00:34:27,280 --> 00:34:32,560
what we're looking for if you've been a

00:34:30,000 --> 00:34:34,000
customer at a restaurant or at a store

00:34:32,560 --> 00:34:36,320
even if they don't get to you that

00:34:34,000 --> 00:34:39,440
quickly as long as they say you know

00:34:36,320 --> 00:34:40,399
i'm i'm about to get to you then that's

00:34:39,440 --> 00:34:43,599
uh that

00:34:40,399 --> 00:34:43,599
usually satiates people

00:34:44,960 --> 00:34:51,119
okay so yeah if anyone else is not

00:34:48,240 --> 00:34:51,919
um familiar with this i didn't even

00:34:51,119 --> 00:34:55,599
explain

00:34:51,919 --> 00:34:58,400
there is a q a feature within zoom

00:34:55,599 --> 00:35:00,400
where you can submit questions i have

00:34:58,400 --> 00:35:03,760
not looked at

00:35:00,400 --> 00:35:07,280
the chat let's see

00:35:03,760 --> 00:35:09,680
if i stop sharing then i can see the

00:35:07,280 --> 00:35:09,680
chat

00:35:11,620 --> 00:35:14,830
[Music]

00:35:14,839 --> 00:35:17,839
um

00:35:18,480 --> 00:35:22,800
see if there's any questions in the chat

00:35:20,560 --> 00:35:22,800
uh

00:35:29,119 --> 00:35:32,560
i don't see any questions in the chat

00:35:30,800 --> 00:35:35,920
okay cool so

00:35:32,560 --> 00:35:38,160
um i will kind of reiterate if you want

00:35:35,920 --> 00:35:38,800
to follow up and ask any other questions

00:35:38,160 --> 00:35:41,280
of me

00:35:38,800 --> 00:35:43,440
uh my contact information i'll share in

00:35:41,280 --> 00:35:48,480
the chat right now

00:35:43,440 --> 00:35:48,480
and feel free to do that at any time

00:35:50,400 --> 00:35:55,680
and that's

00:35:53,680 --> 00:35:57,599
basically it unless there are more

00:35:55,680 --> 00:36:00,000
questions then

00:35:57,599 --> 00:36:00,720
i'll just hang out for the next about 10

00:36:00,000 --> 00:36:04,720
minutes

00:36:00,720 --> 00:36:04,720
and see if anyone else comes up with any

00:36:10,839 --> 00:36:13,839
questions

00:36:18,079 --> 00:36:27,839
oh there's a conversation around rebates

00:36:20,079 --> 00:36:27,839
versus merge at the top of the chat

00:36:28,320 --> 00:36:34,640
uh not sure where this starts

00:36:34,720 --> 00:36:41,839
oh i see

00:37:14,720 --> 00:37:20,079
another question um

00:37:17,920 --> 00:37:21,440
you mentioned or i mentioned the ability

00:37:20,079 --> 00:37:26,000
to stage my

00:37:21,440 --> 00:37:28,160
code and get what do people use it for

00:37:26,000 --> 00:37:29,200
go to the stage code and get what do

00:37:28,160 --> 00:37:30,560
people use it for

00:37:29,200 --> 00:37:32,720
when we see people stage and then

00:37:30,560 --> 00:37:34,160
immediately commit um

00:37:32,720 --> 00:37:37,760
that's going to be the extent of my

00:37:34,160 --> 00:37:41,359
knowledge of it as well um

00:37:37,760 --> 00:37:43,119
i i have never done anything other than

00:37:41,359 --> 00:37:43,680
immediately commit something once i

00:37:43,119 --> 00:37:46,000
stage it

00:37:43,680 --> 00:37:51,839
so sorry i don't i honestly just don't

00:37:46,000 --> 00:37:51,839
know a better answer to that

00:38:43,680 --> 00:38:47,359
still reading through this conversation

00:38:46,640 --> 00:38:50,640
about

00:38:47,359 --> 00:38:50,640
rebase versus merge

00:38:52,960 --> 00:39:01,839
some valid points about where was it

00:39:07,680 --> 00:39:11,599
rebase approach requires developers to

00:39:09,760 --> 00:39:13,920
rewrite their

00:39:11,599 --> 00:39:14,880
branch history to squash it to a single

00:39:13,920 --> 00:39:17,200
revision or

00:39:14,880 --> 00:39:18,320
ensure every intermediate step is fully

00:39:17,200 --> 00:39:20,880
functional

00:39:18,320 --> 00:39:23,280
instead of showing accurate deployment

00:39:20,880 --> 00:39:26,400
or development history

00:39:23,280 --> 00:39:27,520
point rebasing makes the revision graph

00:39:26,400 --> 00:39:30,160
narrower

00:39:27,520 --> 00:39:32,160
but also meant much harder to determine

00:39:30,160 --> 00:39:34,160
which groups of revisions are part of a

00:39:32,160 --> 00:39:37,359
logical set

00:39:34,160 --> 00:39:40,720
good point i guess

00:39:37,359 --> 00:39:40,720
my approach to that one would be

00:39:40,960 --> 00:39:47,040
that the commit messages

00:39:44,320 --> 00:39:47,680
uh the footer points to an issue so it's

00:39:47,040 --> 00:39:49,920
really

00:39:47,680 --> 00:39:51,920
focusing on the issue rather than the

00:39:49,920 --> 00:39:55,280
commits for the source of truth of

00:39:51,920 --> 00:39:58,960
of the logical sense but

00:39:55,280 --> 00:39:58,960
then yeah that puts onus on

00:39:59,520 --> 00:40:06,560
maintaining the issues as uh

00:40:02,640 --> 00:40:11,839
again as a source of truth for like

00:40:06,560 --> 00:40:11,839
what's actually happening

00:40:23,920 --> 00:40:28,880
let's let me get based on branching

00:40:26,400 --> 00:40:30,400
workflows

00:40:28,880 --> 00:40:32,480
and admittedly even with this

00:40:30,400 --> 00:40:34,160
explanation an additional resource i

00:40:32,480 --> 00:40:38,000
don't quite understand the

00:40:34,160 --> 00:40:40,880
process-wise what the difference is

00:40:38,000 --> 00:40:40,880
keep researching

00:40:44,800 --> 00:40:49,119
when i'm done with the feature branch

00:40:47,440 --> 00:40:53,839
what's the difference between rebasing

00:40:49,119 --> 00:40:53,839
and merging

00:40:53,920 --> 00:40:57,119
what's the difference potentially trying

00:40:55,599 --> 00:40:58,240
to do the same thing at the same time

00:40:57,119 --> 00:40:59,520
other people are trying to do the same

00:40:58,240 --> 00:41:01,280
thing at the same time hopefully this

00:40:59,520 --> 00:41:05,839
person is still in here

00:41:01,280 --> 00:41:07,280
uh yes it looks like they are um

00:41:05,839 --> 00:41:09,280
think the the same thing that's going to

00:41:07,280 --> 00:41:11,200
happen if multiple people are going to

00:41:09,280 --> 00:41:14,800
do the same thing to the same

00:41:11,200 --> 00:41:17,920
source code um rebasing

00:41:14,800 --> 00:41:17,920
is uh

00:41:18,079 --> 00:41:24,240
locally versus merging locally is

00:41:21,920 --> 00:41:25,440
the same thing like if multiple people

00:41:24,240 --> 00:41:26,079
are doing it at the same time it doesn't

00:41:25,440 --> 00:41:28,800
matter it's

00:41:26,079 --> 00:41:30,079
it's when you do a pull request and then

00:41:28,800 --> 00:41:32,160
you merge it

00:41:30,079 --> 00:41:34,079
uh to the source code through something

00:41:32,160 --> 00:41:37,200
like github

00:41:34,079 --> 00:41:38,400
is where you're actually doing things

00:41:37,200 --> 00:41:40,560
chronologically so if

00:41:38,400 --> 00:41:42,319
two people merge at the exact same time

00:41:40,560 --> 00:41:44,400
on github well that's

00:41:42,319 --> 00:41:45,760
not really an issue of merging versus

00:41:44,400 --> 00:41:48,800
rebasing that's more of

00:41:45,760 --> 00:41:53,119
github's issue but the difference

00:41:48,800 --> 00:41:56,480
is that you're creating a new commit

00:41:53,119 --> 00:41:59,520
locally when you're on your branch

00:41:56,480 --> 00:42:02,160
uh a new commit that is merging

00:41:59,520 --> 00:42:03,920
the mass of the master of the name into

00:42:02,160 --> 00:42:06,240
your branch

00:42:03,920 --> 00:42:09,520
whereas rebasing is basically taking

00:42:06,240 --> 00:42:12,880
your branch and putting it on the top

00:42:09,520 --> 00:42:13,200
if it's chronologically going up on the

00:42:12,880 --> 00:42:16,240
tip

00:42:13,200 --> 00:42:20,720
of the main uh trunk

00:42:16,240 --> 00:42:20,720
source code i don't know if that helps

00:42:25,359 --> 00:42:29,839
uh so more context on the staging

00:42:27,680 --> 00:42:32,560
someone provided staging differential

00:42:29,839 --> 00:42:33,359
differentiates gets get from previous

00:42:32,560 --> 00:42:36,880
systems like

00:42:33,359 --> 00:42:40,319
svn you can organize your small commits

00:42:36,880 --> 00:42:42,560
using git add then see the difference

00:42:40,319 --> 00:42:44,480
from what is staged and not staged to

00:42:42,560 --> 00:42:45,200
know exactly what your commit is going

00:42:44,480 --> 00:42:49,200
to have

00:42:45,200 --> 00:42:49,200
in it um

00:42:51,040 --> 00:42:55,520
yeah i'm not i don't know that's that

00:42:53,839 --> 00:42:58,079
doesn't provide super

00:42:55,520 --> 00:42:59,839
more clarity to me personally but uh you

00:42:58,079 --> 00:43:03,599
can see that through git diff

00:42:59,839 --> 00:43:03,599
on different files before you add them

00:43:04,960 --> 00:43:08,319
okay so another question do you use

00:43:07,520 --> 00:43:11,200
cherry pick

00:43:08,319 --> 00:43:13,280
uh advantage slash disadvantage compared

00:43:11,200 --> 00:43:15,119
to rebase

00:43:13,280 --> 00:43:16,640
when do you use one versus the other i

00:43:15,119 --> 00:43:20,000
have not used that

00:43:16,640 --> 00:43:22,480
so i honestly can't weigh in on that i

00:43:20,000 --> 00:43:25,680
don't know anything about it

00:43:22,480 --> 00:43:27,839
um so good question but i cannot answer

00:43:25,680 --> 00:43:27,839
sorry

00:43:30,480 --> 00:43:33,839
someone says i'm a junior developer who

00:43:32,720 --> 00:43:36,800
learned get through

00:43:33,839 --> 00:43:38,240
a gui so maybe that's making it more

00:43:36,800 --> 00:43:39,599
difficult to conceptualize the

00:43:38,240 --> 00:43:41,440
difference for me

00:43:39,599 --> 00:43:43,119
thanks for the answer that helps yeah i

00:43:41,440 --> 00:43:45,119
think um

00:43:43,119 --> 00:43:46,960
what i would recommend what i've tried

00:43:45,119 --> 00:43:48,720
to do with people and i don't really

00:43:46,960 --> 00:43:51,520
have time to do it here

00:43:48,720 --> 00:43:52,560
is asking someone who is more familiar

00:43:51,520 --> 00:43:54,800
to

00:43:52,560 --> 00:43:55,760
to draw it out or to map it out on like

00:43:54,800 --> 00:43:58,640
a

00:43:55,760 --> 00:44:01,040
draw.io or something i think having a

00:43:58,640 --> 00:44:04,800
visualization of

00:44:01,040 --> 00:44:07,119
of how this is working would help um

00:44:04,800 --> 00:44:08,560
even if you are coming from a ghillie

00:44:07,119 --> 00:44:13,200
experience

00:44:08,560 --> 00:44:13,200
for me visualizing it in my brain helps

00:44:19,839 --> 00:44:23,520
all right one more minute until this is

00:44:22,720 --> 00:44:27,119
closed so

00:44:23,520 --> 00:44:27,119
any last questions

00:44:32,880 --> 00:44:37,599
yeah definitely um i think also on top

00:44:36,400 --> 00:44:40,800
of visualizing it

00:44:37,599 --> 00:44:42,640
i would recommend i don't know creating

00:44:40,800 --> 00:44:44,319
a new repository that you don't

00:44:42,640 --> 00:44:46,319
i think one of the the biggest fears

00:44:44,319 --> 00:44:47,520
initially for me was feeling like i was

00:44:46,319 --> 00:44:49,680
going to

00:44:47,520 --> 00:44:51,760
screw up the source code so if you make

00:44:49,680 --> 00:44:53,520
a new repository or clone one or

00:44:51,760 --> 00:44:55,359
whatever and this is your throwaway one

00:44:53,520 --> 00:44:55,839
so you can do anything to it mess it all

00:44:55,359 --> 00:44:58,160
up

00:44:55,839 --> 00:44:59,760
and start trying to rebase in there

00:44:58,160 --> 00:45:05,839
without fear of like

00:44:59,760 --> 00:45:05,839
i'm gonna break something

00:45:19,680 --> 00:45:23,119
cool all right well thanks everybody for

00:45:22,000 --> 00:45:26,800
joining and

00:45:23,119 --> 00:45:26,800
hope you enjoy the rest of all things

00:45:29,319 --> 00:45:32,319

YouTube URL: https://www.youtube.com/watch?v=8HH_BtA9L5U


