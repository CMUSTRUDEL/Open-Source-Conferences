Title: Angular in the Jamstack - Tara Z. Manicsic
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Engineering Track
Description: 
	Presented by: Tara Z. Manicsic, Netlify
Presented at All Things Open 2020 - Front-End Engineering Track

Abstract: The Jamstack is a recent trend in application architecture that allows developers to leverage their JavaScript, serverless, and API skills to deliver faster, safer and more reliable sites. The Jamstack is popular with both React and Vue but Angular is just starting to take hold of the benefits it has to offer. Weâ€™ll dig into creating a Jamstack site using Angular in this session from pre-rendering pages, using serverless functions to grab data, and serving from a CDN. See for yourself what we can do with this new approach to application architecture.
Captions: 
	00:00:05,040 --> 00:00:07,440
welcome

00:00:05,680 --> 00:00:08,800
i hope everybody's having a very good

00:00:07,440 --> 00:00:10,960
virtual conference

00:00:08,800 --> 00:00:12,880
i'm a big fan of all things open so

00:00:10,960 --> 00:00:14,160
excited to do the virtual version as

00:00:12,880 --> 00:00:15,599
well

00:00:14,160 --> 00:00:17,199
let's go ahead and get this slide

00:00:15,599 --> 00:00:19,439
started um

00:00:17,199 --> 00:00:20,400
so today we are talking about angular in

00:00:19,439 --> 00:00:23,519
the jam stack

00:00:20,400 --> 00:00:26,480
um so this is basically

00:00:23,519 --> 00:00:27,920
we're talking about what this is what it

00:00:26,480 --> 00:00:31,199
does and then we'll talk about

00:00:27,920 --> 00:00:32,000
how we do it so the person talking at

00:00:31,199 --> 00:00:35,360
you right now

00:00:32,000 --> 00:00:38,480
is me tara manixek uh i'm a senior

00:00:35,360 --> 00:00:39,600
devex engineer at netlify uh basically

00:00:38,480 --> 00:00:42,640
the devex team

00:00:39,600 --> 00:00:44,640
works on you the developers experience

00:00:42,640 --> 00:00:46,239
um and how we can make it better how we

00:00:44,640 --> 00:00:49,200
can improve our product

00:00:46,239 --> 00:00:52,239
um i'm also a angular google developer

00:00:49,200 --> 00:00:54,480
expert and a self-proclaimed nerdy mom

00:00:52,239 --> 00:00:55,840
with a two-year-old and one on the way

00:00:54,480 --> 00:00:59,039
so

00:00:55,840 --> 00:01:00,079
that's enough about me let's talk about

00:00:59,039 --> 00:01:03,280
what we're going to

00:01:00,079 --> 00:01:04,799
cover today so as i said earlier we want

00:01:03,280 --> 00:01:07,439
to kind of delve into

00:01:04,799 --> 00:01:08,400
what is this uh the jamstack is a bit of

00:01:07,439 --> 00:01:12,720
a

00:01:08,400 --> 00:01:14,159
new um technology and or new

00:01:12,720 --> 00:01:17,119
architecture i should say

00:01:14,159 --> 00:01:19,439
and so with things like that we kind of

00:01:17,119 --> 00:01:22,400
have

00:01:19,439 --> 00:01:24,000
there can tend to be a little bit of um

00:01:22,400 --> 00:01:28,720
what we call fud

00:01:24,000 --> 00:01:30,560
um and it's basically the the um

00:01:28,720 --> 00:01:32,159
having a little bit of misrepresentation

00:01:30,560 --> 00:01:35,040
out there a little bit of confusion

00:01:32,159 --> 00:01:35,920
and things where uh we want to make sure

00:01:35,040 --> 00:01:37,680
we clear it up and

00:01:35,920 --> 00:01:38,960
understand what we're dealing with uh

00:01:37,680 --> 00:01:40,079
there is another talk about the jam

00:01:38,960 --> 00:01:42,399
statue day i think

00:01:40,079 --> 00:01:43,360
neil's giving it this one is more

00:01:42,399 --> 00:01:47,119
focused on

00:01:43,360 --> 00:01:47,920
how angular uh works inside of the jam

00:01:47,119 --> 00:01:49,520
stack

00:01:47,920 --> 00:01:51,040
so um we're gonna be talking about what

00:01:49,520 --> 00:01:53,680
this is we're gonna talk about why

00:01:51,040 --> 00:01:55,600
even bother using the jam stack um and

00:01:53,680 --> 00:01:58,159
then we'll look into how we do it

00:01:55,600 --> 00:01:59,439
we'll touch base on some code and also

00:01:58,159 --> 00:02:00,880
look at some examples

00:01:59,439 --> 00:02:02,960
i'm going to give you a lot of

00:02:00,880 --> 00:02:05,200
information today so i'm also going to

00:02:02,960 --> 00:02:07,680
give you a lot of resources

00:02:05,200 --> 00:02:08,640
as we go along i'll mention words that

00:02:07,680 --> 00:02:10,319
you may

00:02:08,640 --> 00:02:12,560
may not be the most familiar and the

00:02:10,319 --> 00:02:13,440
ones that stick out to me as being a

00:02:12,560 --> 00:02:16,640
kind of more

00:02:13,440 --> 00:02:18,560
jam stacky in terms i will go over what

00:02:16,640 --> 00:02:20,319
that means as we go through but again i

00:02:18,560 --> 00:02:22,400
will give you lots of resources

00:02:20,319 --> 00:02:24,239
feel free to ask any questions in the

00:02:22,400 --> 00:02:27,280
chat i have my eye on the chat

00:02:24,239 --> 00:02:28,160
um and at ha at the half time um at

00:02:27,280 --> 00:02:31,200
about the

00:02:28,160 --> 00:02:34,160
like 15 minute mark i'll go ahead uh

00:02:31,200 --> 00:02:35,680
50 minute to the hour i'll go ahead and

00:02:34,160 --> 00:02:36,000
check to see if i need to catch up on

00:02:35,680 --> 00:02:38,239
any

00:02:36,000 --> 00:02:40,319
questions um but always feel free to

00:02:38,239 --> 00:02:44,000
ping me inside there

00:02:40,319 --> 00:02:47,440
um so what is this what is the jam stack

00:02:44,000 --> 00:02:49,280
there are a few ways to kind of

00:02:47,440 --> 00:02:50,720
wrap your mind around the jam stack but

00:02:49,280 --> 00:02:54,560
these are the

00:02:50,720 --> 00:02:56,000
hi sorry i'm

00:02:54,560 --> 00:02:57,760
sorry my phone just went off i'm using

00:02:56,000 --> 00:02:58,879
my phone as a if you don't know this you

00:02:57,760 --> 00:03:00,400
can use keynote

00:02:58,879 --> 00:03:02,319
and have a full screen and then have

00:03:00,400 --> 00:03:04,400
your notes on a phone or ipad

00:03:02,319 --> 00:03:06,239
but i'm also moving my house today so

00:03:04,400 --> 00:03:08,159
the movers just called me

00:03:06,239 --> 00:03:09,680
um so apologies if you heard that ring

00:03:08,159 --> 00:03:13,840
come through my speaker

00:03:09,680 --> 00:03:15,440
um so uh some of the top level things

00:03:13,840 --> 00:03:16,159
that stick out about the jam stack

00:03:15,440 --> 00:03:19,200
architecture

00:03:16,159 --> 00:03:22,480
is you're going to be using uh

00:03:19,200 --> 00:03:23,040
generated cachable static assets um and

00:03:22,480 --> 00:03:24,879
this

00:03:23,040 --> 00:03:26,239
we're going to delve into all of these

00:03:24,879 --> 00:03:28,319
in depth but i wanted to give you a high

00:03:26,239 --> 00:03:31,360
level of what is this

00:03:28,319 --> 00:03:33,120
so uh generating cachable

00:03:31,360 --> 00:03:34,560
static assets then we're going to be

00:03:33,120 --> 00:03:37,200
deploying to a cdn

00:03:34,560 --> 00:03:37,840
or a content delivery network and we're

00:03:37,200 --> 00:03:39,760
going to be

00:03:37,840 --> 00:03:41,840
using client-side javascript to utilize

00:03:39,760 --> 00:03:42,959
third-party apis and server list

00:03:41,840 --> 00:03:45,120
functions

00:03:42,959 --> 00:03:46,400
and also the jam stack is able to help

00:03:45,120 --> 00:03:48,080
you create a better

00:03:46,400 --> 00:03:49,599
development experience through automated

00:03:48,080 --> 00:03:51,599
workflow

00:03:49,599 --> 00:03:53,040
one thing that may stick out to you is

00:03:51,599 --> 00:03:56,560
that these are all things

00:03:53,040 --> 00:03:59,120
that currently exist that we use inside

00:03:56,560 --> 00:04:02,640
of a lot of different ecosystems

00:03:59,120 --> 00:04:05,840
maybe cdn's not as much um but

00:04:02,640 --> 00:04:08,959
what is a cdn so i wanted to

00:04:05,840 --> 00:04:10,959
make sure that i covered this term

00:04:08,959 --> 00:04:12,640
content delivery networks used to be

00:04:10,959 --> 00:04:16,799
just used by

00:04:12,640 --> 00:04:18,639
bigger companies like cnn and new york

00:04:16,799 --> 00:04:19,919
times it's more of a redundancy thing

00:04:18,639 --> 00:04:22,560
because they have a less

00:04:19,919 --> 00:04:25,040
they have a lower failure rate their

00:04:22,560 --> 00:04:27,120
geographically distributed edge nodes

00:04:25,040 --> 00:04:28,080
that hold the deliverable assets sent

00:04:27,120 --> 00:04:31,120
from the origin

00:04:28,080 --> 00:04:33,120
server and served as close as possible

00:04:31,120 --> 00:04:35,520
to the user that's requesting them

00:04:33,120 --> 00:04:37,680
and it's basically a dump server so it

00:04:35,520 --> 00:04:39,199
has this redirect knowledge which allows

00:04:37,680 --> 00:04:42,000
them to send deliverables

00:04:39,199 --> 00:04:42,560
to the nearby nodes if there anything

00:04:42,000 --> 00:04:45,040
happens

00:04:42,560 --> 00:04:46,320
with the current node that is uh the one

00:04:45,040 --> 00:04:48,880
closest to the user

00:04:46,320 --> 00:04:50,720
so it makes them more reliable um and

00:04:48,880 --> 00:04:52,160
like netlify has netlify edge that

00:04:50,720 --> 00:04:55,360
actually uses multiple

00:04:52,160 --> 00:04:57,199
cloud providers so if uh you know these

00:04:55,360 --> 00:05:00,400
are unprecedented times so

00:04:57,199 --> 00:05:02,000
not that you will ever you rarely see

00:05:00,400 --> 00:05:04,000
uh an infrastructure a whole

00:05:02,000 --> 00:05:06,720
infrastructure provider gone down like

00:05:04,000 --> 00:05:08,720
um this happened i've seen this only

00:05:06,720 --> 00:05:12,160
happen twice in my career

00:05:08,720 --> 00:05:14,800
in the past uh what what year are we in

00:05:12,160 --> 00:05:15,440
in the past six years that i've seen you

00:05:14,800 --> 00:05:17,199
know an

00:05:15,440 --> 00:05:18,639
actual infrastructure provider all of

00:05:17,199 --> 00:05:21,360
their servers go down

00:05:18,639 --> 00:05:23,199
but if that did happen uh when you have

00:05:21,360 --> 00:05:25,039
multiple cloud providers you're able to

00:05:23,199 --> 00:05:26,720
have that redirect knowledge redirect it

00:05:25,039 --> 00:05:27,520
to a node on a whole different cloud

00:05:26,720 --> 00:05:29,919
provider

00:05:27,520 --> 00:05:32,160
so it gives you this like really great

00:05:29,919 --> 00:05:32,160
um

00:05:33,639 --> 00:05:38,720
reliability with its redundancy

00:05:37,199 --> 00:05:40,960
so it's basically a dumb server with

00:05:38,720 --> 00:05:42,800
redirect knowledge um

00:05:40,960 --> 00:05:44,960
and they're actually doing a lot more

00:05:42,800 --> 00:05:48,080
like uh with redirect knowledge now

00:05:44,960 --> 00:05:49,759
with things like uh netlify has um sorry

00:05:48,080 --> 00:05:53,840
netlify

00:05:49,759 --> 00:05:56,160
has netlify um edge handlers

00:05:53,840 --> 00:05:57,840
uh cloudflares cloudflare workers where

00:05:56,160 --> 00:05:59,440
they take that redirect knowledge team

00:05:57,840 --> 00:06:00,319
it up with javascript functions and

00:05:59,440 --> 00:06:01,840
allow you to do

00:06:00,319 --> 00:06:03,520
have more functionality and more

00:06:01,840 --> 00:06:04,960
computing on that edge node

00:06:03,520 --> 00:06:06,720
never having to go back and hit that

00:06:04,960 --> 00:06:08,000
origin server so

00:06:06,720 --> 00:06:11,199
it's basically we're giving something

00:06:08,000 --> 00:06:12,720
dumb a lot of power which is

00:06:11,199 --> 00:06:16,000
usually scary but in this case it's

00:06:12,720 --> 00:06:18,560
extremely helpful so that's one big term

00:06:16,000 --> 00:06:19,120
one big aspect of the jam stack are

00:06:18,560 --> 00:06:23,600
those

00:06:19,120 --> 00:06:26,160
the content delivery networks um

00:06:23,600 --> 00:06:27,199
so then with that in mind of what the

00:06:26,160 --> 00:06:30,400
jam stack is

00:06:27,199 --> 00:06:32,240
what is angular in the jam stack so

00:06:30,400 --> 00:06:34,319
it's a lot of the same things the only

00:06:32,240 --> 00:06:38,800
part that we're really touching

00:06:34,319 --> 00:06:42,000
uh with angular is this pre-rendering

00:06:38,800 --> 00:06:43,039
and so this is basically we want to do

00:06:42,000 --> 00:06:46,800
this so that we

00:06:43,039 --> 00:06:49,039
have a small size as assets as possible

00:06:46,800 --> 00:06:51,039
and also it's really a lot more secure

00:06:49,039 --> 00:06:53,039
it's a lot easier to hack into moving

00:06:51,039 --> 00:06:54,000
pieces of a website than it is to hack

00:06:53,039 --> 00:06:57,599
into

00:06:54,000 --> 00:06:58,720
html and css not as much damage can be

00:06:57,599 --> 00:07:01,599
done there

00:06:58,720 --> 00:07:02,960
so with angular we're using either the

00:07:01,599 --> 00:07:05,680
static site generator

00:07:02,960 --> 00:07:06,240
angular um finally has one which will

00:07:05,680 --> 00:07:08,960
discuss

00:07:06,240 --> 00:07:11,280
um scully or you can actually pre-render

00:07:08,960 --> 00:07:14,160
with angular universal

00:07:11,280 --> 00:07:16,160
um so with that aspect that's the part

00:07:14,160 --> 00:07:18,800
that we're really uh

00:07:16,160 --> 00:07:20,479
honing in with our with coding our

00:07:18,800 --> 00:07:22,479
angular so we're basically

00:07:20,479 --> 00:07:24,319
using angular as we've always used it

00:07:22,479 --> 00:07:27,520
and then we're actually pre-rendering

00:07:24,319 --> 00:07:28,400
with angular but then with uh beyond

00:07:27,520 --> 00:07:30,479
that step

00:07:28,400 --> 00:07:31,759
you're still putting those assets on an

00:07:30,479 --> 00:07:33,919
edge node

00:07:31,759 --> 00:07:34,880
closest to the user requesting that load

00:07:33,919 --> 00:07:36,960
to make it

00:07:34,880 --> 00:07:39,039
fast because you know you can't get rid

00:07:36,960 --> 00:07:40,800
of latency but you can lower latency by

00:07:39,039 --> 00:07:41,759
being as close to the user requesting it

00:07:40,800 --> 00:07:43,759
as possible

00:07:41,759 --> 00:07:45,280
and having very small package sizes that

00:07:43,759 --> 00:07:47,199
you're sending to the users with that

00:07:45,280 --> 00:07:49,199
pre-rendered content

00:07:47,199 --> 00:07:51,759
and then you're still dynamically

00:07:49,199 --> 00:07:54,960
grabbing data from apis or by

00:07:51,759 --> 00:07:56,720
triggering serverless functions um

00:07:54,960 --> 00:07:58,160
so this is something that may be

00:07:56,720 --> 00:08:01,759
different than the architecture

00:07:58,160 --> 00:08:05,120
used to with building angular sites

00:08:01,759 --> 00:08:08,400
this is a more this is a more kind of

00:08:05,120 --> 00:08:10,080
micro service-esque architecture to what

00:08:08,400 --> 00:08:11,840
you might be used to

00:08:10,080 --> 00:08:13,759
with building on angular applications

00:08:11,840 --> 00:08:16,800
but um it helps to

00:08:13,759 --> 00:08:18,720
have um less integrations for

00:08:16,800 --> 00:08:20,000
you know one thing bringing the whole

00:08:18,720 --> 00:08:22,080
thing down um

00:08:20,000 --> 00:08:23,440
instead you can kind of pull these

00:08:22,080 --> 00:08:27,280
services apart and just

00:08:23,440 --> 00:08:30,080
talk to apis and kind of delegate

00:08:27,280 --> 00:08:31,120
the data the grabbing of data that

00:08:30,080 --> 00:08:34,080
you're doing

00:08:31,120 --> 00:08:34,719
and then at the end and the beginning

00:08:34,080 --> 00:08:36,479
really

00:08:34,719 --> 00:08:38,560
you're decoupling and modularizing the

00:08:36,479 --> 00:08:40,880
development process

00:08:38,560 --> 00:08:42,399
by using git workflows for automation

00:08:40,880 --> 00:08:45,200
and this is basically

00:08:42,399 --> 00:08:45,920
uh how you get a very streamlined

00:08:45,200 --> 00:08:49,120
workflow

00:08:45,920 --> 00:08:51,120
and make your developer experience uh

00:08:49,120 --> 00:08:53,200
even better so we're gonna talk about

00:08:51,120 --> 00:08:54,399
all of these things in detail as we go

00:08:53,200 --> 00:08:56,480
on

00:08:54,399 --> 00:08:57,600
but i wanted to touch on one thing that

00:08:56,480 --> 00:08:59,440
was uh

00:08:57,600 --> 00:09:01,440
brought new to the table on that last

00:08:59,440 --> 00:09:03,279
slide and that is talking about how you

00:09:01,440 --> 00:09:04,560
pre-render with angular

00:09:03,279 --> 00:09:05,920
we're going to touch on this just a

00:09:04,560 --> 00:09:07,600
little bit because at the end we'll

00:09:05,920 --> 00:09:08,000
actually look at some code and walk

00:09:07,600 --> 00:09:11,200
through

00:09:08,000 --> 00:09:12,560
doing this but one way to do this

00:09:11,200 --> 00:09:14,399
that has been around for a while is

00:09:12,560 --> 00:09:16,880
actually angular universal

00:09:14,399 --> 00:09:18,240
angular universal is typically talked

00:09:16,880 --> 00:09:19,600
about when it comes to server-side

00:09:18,240 --> 00:09:22,080
rendering and we will not be doing

00:09:19,600 --> 00:09:24,000
server-side rendering in the jam stack

00:09:22,080 --> 00:09:26,160
but it gives you the capabilities of

00:09:24,000 --> 00:09:28,080
using the pre-render functionality from

00:09:26,160 --> 00:09:31,839
angular universal

00:09:28,080 --> 00:09:34,240
so there's actually a plug-in uh made by

00:09:31,839 --> 00:09:35,680
chris gutendon and it's angular

00:09:34,240 --> 00:09:38,320
pre-render

00:09:35,680 --> 00:09:38,959
and the usage is basically you go

00:09:38,320 --> 00:09:41,680
through

00:09:38,959 --> 00:09:42,959
and you make out your routing you use

00:09:41,680 --> 00:09:45,279
the cli

00:09:42,959 --> 00:09:46,959
to make out a new project with routing

00:09:45,279 --> 00:09:47,680
you change into that project you

00:09:46,959 --> 00:09:51,200
generate

00:09:47,680 --> 00:09:54,080
uh as a client project

00:09:51,200 --> 00:09:54,480
um using universe and then you install

00:09:54,080 --> 00:09:57,760
this

00:09:54,480 --> 00:09:59,920
angular pre-render plug-in run build

00:09:57,760 --> 00:10:01,760
and then you can run angular pre-render

00:09:59,920 --> 00:10:04,480
it which will pre-render your project

00:10:01,760 --> 00:10:05,920
for you using that plug-in so it's kind

00:10:04,480 --> 00:10:09,279
of it's not exactly

00:10:05,920 --> 00:10:12,160
uh there are ways to do it through you

00:10:09,279 --> 00:10:13,519
angry universal this is a little like a

00:10:12,160 --> 00:10:15,200
handholding

00:10:13,519 --> 00:10:16,640
way for you to use angular universal

00:10:15,200 --> 00:10:20,800
pre-render but

00:10:16,640 --> 00:10:24,160
um earlier this month

00:10:20,800 --> 00:10:25,839
maybe about the end of last month um oh

00:10:24,160 --> 00:10:27,279
we got a static site generator

00:10:25,839 --> 00:10:29,200
specifically for uh

00:10:27,279 --> 00:10:31,680
angular it was released at the end of

00:10:29,200 --> 00:10:32,079
last year as beta but we got the v1 of

00:10:31,680 --> 00:10:34,480
it

00:10:32,079 --> 00:10:36,240
and just to be clear on what static site

00:10:34,480 --> 00:10:38,399
generators are

00:10:36,240 --> 00:10:41,120
so satisfied generators will generate

00:10:38,399 --> 00:10:43,920
all of your pages of your site at once

00:10:41,120 --> 00:10:44,720
um and it does you can do this every

00:10:43,920 --> 00:10:48,399
time

00:10:44,720 --> 00:10:49,040
or anytime there is a change made to the

00:10:48,399 --> 00:10:51,440
site

00:10:49,040 --> 00:10:52,160
so you would basically build out the

00:10:51,440 --> 00:10:54,720
site

00:10:52,160 --> 00:10:56,079
using angular run the static site

00:10:54,720 --> 00:10:57,920
generator and it will

00:10:56,079 --> 00:10:59,040
pre-render all of your applications so

00:10:57,920 --> 00:11:00,000
that means that there are no moving

00:10:59,040 --> 00:11:02,079
parts on the deployed

00:11:00,000 --> 00:11:03,920
site just the generated content that the

00:11:02,079 --> 00:11:06,800
static site generator

00:11:03,920 --> 00:11:07,680
generates for you and it makes it a lot

00:11:06,800 --> 00:11:10,160
easier to cache

00:11:07,680 --> 00:11:11,440
harder to hack and it gets to the user

00:11:10,160 --> 00:11:12,959
faster because again we have that

00:11:11,440 --> 00:11:15,760
smaller file size

00:11:12,959 --> 00:11:17,600
um and all the work is done bef like

00:11:15,760 --> 00:11:19,440
before they even request it it's just

00:11:17,600 --> 00:11:20,079
there waiting for to hand it over to

00:11:19,440 --> 00:11:22,000
them

00:11:20,079 --> 00:11:23,200
every major framework and language has

00:11:22,000 --> 00:11:26,880
one angular

00:11:23,200 --> 00:11:27,360
uh was the last major framework to have

00:11:26,880 --> 00:11:30,079
one

00:11:27,360 --> 00:11:32,320
um but we're very excited that we do

00:11:30,079 --> 00:11:34,560
finally have v1 of scully

00:11:32,320 --> 00:11:35,440
you can see their information at

00:11:34,560 --> 00:11:39,360
scholarly

00:11:35,440 --> 00:11:40,880
dot io we'll we'll talk about the steps

00:11:39,360 --> 00:11:43,600
and i'll give you some resources

00:11:40,880 --> 00:11:44,480
on a few walkthroughs i have of this as

00:11:43,600 --> 00:11:47,680
well

00:11:44,480 --> 00:11:51,440
but um so this is angular's first

00:11:47,680 --> 00:11:54,720
number one static site generator uh

00:11:51,440 --> 00:11:58,000
from the hero devs team

00:11:54,720 --> 00:12:00,639
and on top of just being able to

00:11:58,000 --> 00:12:02,480
um pre-render your content there are a

00:12:00,639 --> 00:12:05,440
lot of other aspects they give you

00:12:02,480 --> 00:12:06,000
um like being able to create a blog

00:12:05,440 --> 00:12:08,800
easily

00:12:06,000 --> 00:12:10,480
through an ng generate command uh where

00:12:08,800 --> 00:12:12,639
it looks at your routes even if it's

00:12:10,480 --> 00:12:13,680
nested routes it basically goes in there

00:12:12,639 --> 00:12:16,639
and it reads

00:12:13,680 --> 00:12:19,120
your file structure for um from your

00:12:16,639 --> 00:12:21,760
configuration for your angular project

00:12:19,120 --> 00:12:22,399
and kind of just trails down finds all

00:12:21,760 --> 00:12:25,519
the routes

00:12:22,399 --> 00:12:27,120
renders everything as the html page each

00:12:25,519 --> 00:12:29,519
different route will have a folder

00:12:27,120 --> 00:12:30,959
so then if you have a route a dash and

00:12:29,519 --> 00:12:32,800
then a wrap dash

00:12:30,959 --> 00:12:34,399
it'll have a folder inside that folder

00:12:32,800 --> 00:12:38,240
that will then lead to

00:12:34,399 --> 00:12:40,959
that html page for that site um

00:12:38,240 --> 00:12:41,279
and i'll show you um a site that i made

00:12:40,959 --> 00:12:42,959
out

00:12:41,279 --> 00:12:44,399
using scholarly with a blog and

00:12:42,959 --> 00:12:46,079
everything so you can see how it works

00:12:44,399 --> 00:12:46,959
and doesn't even need javascript enabled

00:12:46,079 --> 00:12:49,279
for it to work

00:12:46,959 --> 00:12:50,959
but it also means that you can um

00:12:49,279 --> 00:12:51,519
scholarly will process your markdown for

00:12:50,959 --> 00:12:53,519
you

00:12:51,519 --> 00:12:55,680
so you can make a blog with markdown

00:12:53,519 --> 00:12:56,399
files all in angular you never have to

00:12:55,680 --> 00:12:59,760
learn

00:12:56,399 --> 00:13:02,800
like learn skully it's just using um

00:12:59,760 --> 00:13:04,959
ng add and ng generate commands

00:13:02,800 --> 00:13:06,639
so you're just still using angular it's

00:13:04,959 --> 00:13:08,880
my favorite part about it is that

00:13:06,639 --> 00:13:10,000
you're still just writing angular you do

00:13:08,880 --> 00:13:12,160
not have to learn

00:13:10,000 --> 00:13:13,040
anything new any new language i should

00:13:12,160 --> 00:13:16,320
say

00:13:13,040 --> 00:13:18,160
um so uh

00:13:16,320 --> 00:13:20,079
if you want to learn a little bit more

00:13:18,160 --> 00:13:22,800
about this there on thinkster there is

00:13:20,079 --> 00:13:23,279
a skully webinar i'm pretty sure it's

00:13:22,800 --> 00:13:25,120
free

00:13:23,279 --> 00:13:27,760
at least the start of it from aaron

00:13:25,120 --> 00:13:30,720
frost who is the

00:13:27,760 --> 00:13:31,839
ceo of hero devs and the co-creator of

00:13:30,720 --> 00:13:34,959
scully

00:13:31,839 --> 00:13:35,680
um and then also you can see they on

00:13:34,959 --> 00:13:37,839
youtube

00:13:35,680 --> 00:13:39,360
um sorry i think i actually cut off the

00:13:37,839 --> 00:13:41,440
description part of this

00:13:39,360 --> 00:13:43,360
but it's the um it's called the v1

00:13:41,440 --> 00:13:45,279
release of scully and this is the core

00:13:43,360 --> 00:13:47,920
team from scully talking about

00:13:45,279 --> 00:13:51,920
the new additions that uh scully brought

00:13:47,920 --> 00:13:55,360
in with that first initial v1 release

00:13:51,920 --> 00:13:56,240
um so just to i'm trying to make jam

00:13:55,360 --> 00:13:58,800
dealer happen

00:13:56,240 --> 00:14:00,160
jambular is my idea of angular in the

00:13:58,800 --> 00:14:03,279
jam stack but

00:14:00,160 --> 00:14:06,399
um so just to kind of like

00:14:03,279 --> 00:14:09,199
reiterate what this is because again

00:14:06,399 --> 00:14:10,399
kind of a new concept um we're

00:14:09,199 --> 00:14:13,440
pre-rendering

00:14:10,399 --> 00:14:15,120
angular the angular project that we make

00:14:13,440 --> 00:14:17,600
so we're pre-rendering

00:14:15,120 --> 00:14:20,079
each of those pages uh either

00:14:17,600 --> 00:14:21,120
pre-rendering with angular ng-universal

00:14:20,079 --> 00:14:23,519
angular universal

00:14:21,120 --> 00:14:24,560
or using the static site generator

00:14:23,519 --> 00:14:26,079
scully

00:14:24,560 --> 00:14:28,160
we're using those content delivery

00:14:26,079 --> 00:14:30,720
networks which are these uh

00:14:28,160 --> 00:14:31,519
much easier much more reliable much

00:14:30,720 --> 00:14:33,760
easier to set up

00:14:31,519 --> 00:14:35,760
much more reliable much more redundant

00:14:33,760 --> 00:14:38,240
um

00:14:35,760 --> 00:14:40,480
servers uh content delivery networks

00:14:38,240 --> 00:14:42,240
edge nodes closest to the user

00:14:40,480 --> 00:14:44,480
then we're getting our data and we're

00:14:42,240 --> 00:14:45,680
making it dynamic by using data from

00:14:44,480 --> 00:14:49,760
apis

00:14:45,680 --> 00:14:53,920
and grabbing that via server's functions

00:14:49,760 --> 00:14:53,920
and then we're also making

00:14:54,000 --> 00:14:57,199
making it easier to iterate for the

00:14:55,839 --> 00:14:58,959
developers and

00:14:57,199 --> 00:15:00,959
more inclusive of different technology

00:14:58,959 --> 00:15:04,000
level levels for developers

00:15:00,959 --> 00:15:08,000
uh by adding things like a get workflow

00:15:04,000 --> 00:15:11,360
so uh if you're still like wait

00:15:08,000 --> 00:15:14,480
what is the jam stack um i have three

00:15:11,360 --> 00:15:16,639
three resources uh that go by

00:15:14,480 --> 00:15:17,519
how much time you have i thought this

00:15:16,639 --> 00:15:20,639
would help

00:15:17,519 --> 00:15:21,120
um so the first one is a really great

00:15:20,639 --> 00:15:23,680
thorough

00:15:21,120 --> 00:15:25,040
article uh from my co-worker jason

00:15:23,680 --> 00:15:27,519
langsdorff i almost called him

00:15:25,040 --> 00:15:28,079
my co-worker learn with jason but it's

00:15:27,519 --> 00:15:30,079
from

00:15:28,079 --> 00:15:31,440
uh if you go to the learn with jason

00:15:30,079 --> 00:15:33,279
site there's a ton

00:15:31,440 --> 00:15:35,199
of really great resources and one that

00:15:33,279 --> 00:15:38,079
i'm a big fan of is this

00:15:35,199 --> 00:15:39,040
wtf is the jam stack because it is kind

00:15:38,079 --> 00:15:40,720
of a goofy name

00:15:39,040 --> 00:15:42,639
which uh we know the people that named

00:15:40,720 --> 00:15:44,000
it so we say that with the utmost

00:15:42,639 --> 00:15:46,240
respect

00:15:44,000 --> 00:15:48,000
um we also really like saying jam stack

00:15:46,240 --> 00:15:50,560
so but it's a

00:15:48,000 --> 00:15:51,360
goofy name for a great web architecture

00:15:50,560 --> 00:15:52,639
um

00:15:51,360 --> 00:15:54,880
and it kind of gives you a really great

00:15:52,639 --> 00:15:57,040
high level overview on that top part

00:15:54,880 --> 00:15:58,480
of what the jam stack is and then talks

00:15:57,040 --> 00:16:01,680
to you

00:15:58,480 --> 00:16:03,519
more about like what it does for you as

00:16:01,680 --> 00:16:03,839
a developer what it does for your team

00:16:03,519 --> 00:16:06,240
and

00:16:03,839 --> 00:16:07,600
what the technology is surrounding it so

00:16:06,240 --> 00:16:11,600
that's a pretty nice quick

00:16:07,600 --> 00:16:14,079
read um and if you want to go

00:16:11,600 --> 00:16:15,759
even more in depth uh my other co-worker

00:16:14,079 --> 00:16:19,759
david tatashian has

00:16:15,759 --> 00:16:21,839
uh transformed january into january

00:16:19,759 --> 00:16:23,839
uh we'll see if we need another january

00:16:21,839 --> 00:16:26,320
this year in a couple months but

00:16:23,839 --> 00:16:28,720
uh so at the beginning of this year she

00:16:26,320 --> 00:16:33,120
did a blog post for every day of

00:16:28,720 --> 00:16:36,079
january to help um

00:16:33,120 --> 00:16:37,040
kind of give you a clear insight to a

00:16:36,079 --> 00:16:39,120
lot of the jam

00:16:37,040 --> 00:16:40,480
stack unknowns or things that people had

00:16:39,120 --> 00:16:43,759
questions about so

00:16:40,480 --> 00:16:45,839
you can go to dev2 and just look up uh

00:16:43,759 --> 00:16:47,279
divia she might be on here as short dim

00:16:45,839 --> 00:16:49,519
maybe tag-tachian

00:16:47,279 --> 00:16:51,360
but if you look at the january tag you

00:16:49,519 --> 00:16:53,759
can see a lot of great articles and

00:16:51,360 --> 00:16:54,480
most of them are from her where she

00:16:53,759 --> 00:16:59,120
talks about

00:16:54,480 --> 00:17:00,800
not only different things with the uh

00:16:59,120 --> 00:17:03,120
with the jam stack architecture in

00:17:00,800 --> 00:17:05,919
general but the surrounding ecosystem

00:17:03,120 --> 00:17:06,160
that helps clear up some any confusion

00:17:05,919 --> 00:17:10,160
or

00:17:06,160 --> 00:17:13,199
unknowns uh finally last but not

00:17:10,160 --> 00:17:16,640
definitely not least is uh

00:17:13,199 --> 00:17:18,319
this three and a half hour really great

00:17:16,640 --> 00:17:19,360
thorough course of an introduction to

00:17:18,319 --> 00:17:22,079
the jam stack

00:17:19,360 --> 00:17:24,240
if you're unfamiliar with free code camp

00:17:22,079 --> 00:17:28,000
they do these three and a half hour

00:17:24,240 --> 00:17:29,039
like in-depth dells into a bunch of

00:17:28,000 --> 00:17:32,000
technologies

00:17:29,039 --> 00:17:32,559
and they were lucky enough to get the

00:17:32,000 --> 00:17:34,559
great phil

00:17:32,559 --> 00:17:36,000
hawksworth um another one of my

00:17:34,559 --> 00:17:38,480
co-workers

00:17:36,000 --> 00:17:39,919
who is been using the jam stack for a

00:17:38,480 --> 00:17:42,400
long time

00:17:39,919 --> 00:17:43,039
and has really seen the stage of it go

00:17:42,400 --> 00:17:44,720
from

00:17:43,039 --> 00:17:46,720
you know just being something people

00:17:44,720 --> 00:17:50,240
related to static websites

00:17:46,720 --> 00:17:53,600
into this dynamic um

00:17:50,240 --> 00:17:57,039
uh dynamic

00:17:53,600 --> 00:17:59,120
way to create sites that were a lot more

00:17:57,039 --> 00:18:01,280
robust and did a lot more

00:17:59,120 --> 00:18:02,480
and that's a lot of that has to do with

00:18:01,280 --> 00:18:05,760
how huge the

00:18:02,480 --> 00:18:07,600
ecosystem has grown and how much more

00:18:05,760 --> 00:18:10,880
companies you know either with

00:18:07,600 --> 00:18:12,240
uh microsoft has uh oh it just slipped

00:18:10,880 --> 00:18:14,880
my mind because i keep

00:18:12,240 --> 00:18:15,760
static web applications i always think

00:18:14,880 --> 00:18:18,720
of pwa

00:18:15,760 --> 00:18:20,320
swa but um and you know we're seeing a

00:18:18,720 --> 00:18:21,840
lot of different companies kind of jump

00:18:20,320 --> 00:18:24,160
into this realm of like

00:18:21,840 --> 00:18:25,760
how are we evolving like what is this

00:18:24,160 --> 00:18:27,760
new way of evolving

00:18:25,760 --> 00:18:29,440
uh this kind of static architecture to

00:18:27,760 --> 00:18:31,760
make it be more dynamic

00:18:29,440 --> 00:18:33,280
so this course really gets you a lot of

00:18:31,760 --> 00:18:36,000
information in there

00:18:33,280 --> 00:18:37,360
um okay so i see that stephen has a

00:18:36,000 --> 00:18:39,440
question any thoughts on how to

00:18:37,360 --> 00:18:41,120
pre-render when content is dynamic based

00:18:39,440 --> 00:18:43,360
on the current logged in user

00:18:41,120 --> 00:18:45,520
it seems you need static data or content

00:18:43,360 --> 00:18:47,360
to get the most benefit from pre-render

00:18:45,520 --> 00:18:49,919
static site generation

00:18:47,360 --> 00:18:50,880
so as far as a logged in user we'll talk

00:18:49,919 --> 00:18:54,160
about identity

00:18:50,880 --> 00:18:56,559
in a bit when we go into the demo but

00:18:54,160 --> 00:18:57,280
a lot of state and identity is actually

00:18:56,559 --> 00:19:00,559
handled with

00:18:57,280 --> 00:19:03,679
jwt's json web tokens um

00:19:00,559 --> 00:19:05,360
and so we so like a project that we're

00:19:03,679 --> 00:19:08,480
working on now

00:19:05,360 --> 00:19:12,320
um you're able to have

00:19:08,480 --> 00:19:15,600
uh so like we have it where uh users can

00:19:12,320 --> 00:19:16,080
watch videos and we just log at certain

00:19:15,600 --> 00:19:19,200
times

00:19:16,080 --> 00:19:21,120
how far they have um gotten in or like

00:19:19,200 --> 00:19:21,760
which videos of the series have they

00:19:21,120 --> 00:19:24,799
watched

00:19:21,760 --> 00:19:27,760
and we have that saved inside of our um

00:19:24,799 --> 00:19:29,039
do we have it in etcetera there's a lot

00:19:27,760 --> 00:19:31,919
of places that you can hold

00:19:29,039 --> 00:19:34,320
data and use serverless functions and

00:19:31,919 --> 00:19:35,360
web hooks to grab that data in that way

00:19:34,320 --> 00:19:37,760
it makes it more

00:19:35,360 --> 00:19:39,600
seemingly it makes it more dynamic not

00:19:37,760 --> 00:19:43,679
seeming the dynamic is dynamic

00:19:39,600 --> 00:19:47,440
so it's not you're able to have uh

00:19:43,679 --> 00:19:50,000
that static content um as your base

00:19:47,440 --> 00:19:50,880
but able to grab through serverless

00:19:50,000 --> 00:19:53,280
functions

00:19:50,880 --> 00:19:53,919
that dynamic data that you would get and

00:19:53,280 --> 00:19:55,840
like get

00:19:53,919 --> 00:19:58,960
authentication so you would get the

00:19:55,840 --> 00:20:00,640
authentication for jwts for your user

00:19:58,960 --> 00:20:02,159
and then get things like that dynamic

00:20:00,640 --> 00:20:03,039
data through serverless functions that

00:20:02,159 --> 00:20:05,840
will populate

00:20:03,039 --> 00:20:07,600
your static page that you have um and

00:20:05,840 --> 00:20:10,000
you can also

00:20:07,600 --> 00:20:12,480
you can also actually cache certain

00:20:10,000 --> 00:20:13,679
things have things updated with dynamic

00:20:12,480 --> 00:20:15,919
data when it changes

00:20:13,679 --> 00:20:18,799
have that rendered like uh the cdns on

00:20:15,919 --> 00:20:21,760
netlife will do pre-rendering for you

00:20:18,799 --> 00:20:23,520
so you can you can have that rendered

00:20:21,760 --> 00:20:26,400
and then served statically

00:20:23,520 --> 00:20:26,799
when that information changes so it's

00:20:26,400 --> 00:20:30,400
not

00:20:26,799 --> 00:20:33,120
ideal for like us a stock price ticker

00:20:30,400 --> 00:20:34,400
where it's changing constantly uh we

00:20:33,120 --> 00:20:37,679
actually have phil

00:20:34,400 --> 00:20:39,840
hawksworth did a demo of a clock

00:20:37,679 --> 00:20:42,000
so it changed every minute so every

00:20:39,840 --> 00:20:43,200
minute it re-rendered the whole site and

00:20:42,000 --> 00:20:46,559
pushed it up

00:20:43,200 --> 00:20:49,760
um and build times

00:20:46,559 --> 00:20:52,159
are something that uh would have

00:20:49,760 --> 00:20:52,799
been a deterrent for things like that

00:20:52,159 --> 00:20:54,559
but with

00:20:52,799 --> 00:20:56,640
we with hugo which has been around

00:20:54,559 --> 00:20:57,600
forever and eleventy they're so much

00:20:56,640 --> 00:21:00,240
faster that

00:20:57,600 --> 00:21:00,640
you're able to cut down your build times

00:21:00,240 --> 00:21:02,400
um

00:21:00,640 --> 00:21:03,760
i'm i feel like i'm going off on a

00:21:02,400 --> 00:21:07,280
little bit of a tangent

00:21:03,760 --> 00:21:09,440
um but uh

00:21:07,280 --> 00:21:10,320
the they're the way the ecosystem is

00:21:09,440 --> 00:21:12,159
growing

00:21:10,320 --> 00:21:13,760
we're seeing it's basically like we're

00:21:12,159 --> 00:21:15,200
seeing these blockers in the way

00:21:13,760 --> 00:21:16,880
like build time and we're finding ways

00:21:15,200 --> 00:21:18,159
to knock it down with things like build

00:21:16,880 --> 00:21:19,840
plugins to help you cache

00:21:18,159 --> 00:21:21,200
information so you're not rebuilding

00:21:19,840 --> 00:21:23,039
everything and

00:21:21,200 --> 00:21:25,120
uh with the edge handlers we talked

00:21:23,039 --> 00:21:28,320
about where say you wanted

00:21:25,120 --> 00:21:30,480
um say you have the user logged in

00:21:28,320 --> 00:21:32,240
you can use it with redirects to say

00:21:30,480 --> 00:21:32,799
this is the kind of gated content they

00:21:32,240 --> 00:21:36,240
should see

00:21:32,799 --> 00:21:38,000
if this load user has this role um

00:21:36,240 --> 00:21:39,679
i could give you another resource for

00:21:38,000 --> 00:21:42,159
that uh jason linkster if i

00:21:39,679 --> 00:21:44,480
did a whole blog post on how to do gated

00:21:42,159 --> 00:21:47,760
content with serverless functions

00:21:44,480 --> 00:21:50,640
uh doing it the jam stack way um so

00:21:47,760 --> 00:21:50,640
it's a it's a

00:21:50,799 --> 00:21:56,159
um so we're able to do that with

00:21:54,159 --> 00:21:56,880
redirects and now that we're able to do

00:21:56,159 --> 00:21:59,200
computing

00:21:56,880 --> 00:22:00,880
on the edge with edge handlers we're

00:21:59,200 --> 00:22:02,559
able to do like localization

00:22:00,880 --> 00:22:06,159
customization where

00:22:02,559 --> 00:22:08,559
we understand that the user um based on

00:22:06,159 --> 00:22:10,240
their headers their user is asking for

00:22:08,559 --> 00:22:12,799
something from san francisco

00:22:10,240 --> 00:22:15,120
okay send them the pre-generated page

00:22:12,799 --> 00:22:18,159
that we have for san francisco

00:22:15,120 --> 00:22:20,400
so there are ways like that um

00:22:18,159 --> 00:22:21,919
so based on the current login user so

00:22:20,400 --> 00:22:24,640
that's how we would do

00:22:21,919 --> 00:22:26,240
authorization and roles with logged in

00:22:24,640 --> 00:22:30,080
users is with

00:22:26,240 --> 00:22:31,919
um the json web token

00:22:30,080 --> 00:22:34,000
static data or content to get the most

00:22:31,919 --> 00:22:37,679
benefit from the pre-rendered site

00:22:34,000 --> 00:22:40,799
so definitely the

00:22:37,679 --> 00:22:44,400
most most benefit possible is

00:22:40,799 --> 00:22:47,280
a static site with just static resources

00:22:44,400 --> 00:22:47,919
um because if you're thinking time wise

00:22:47,280 --> 00:22:51,360
if you're thinking

00:22:47,919 --> 00:22:54,640
like uh this the load time

00:22:51,360 --> 00:22:56,880
but as far as in general uh

00:22:54,640 --> 00:22:57,919
there's a lot more benefit that we'll

00:22:56,880 --> 00:23:01,120
talk about too

00:22:57,919 --> 00:23:05,440
uh with the developer experience

00:23:01,120 --> 00:23:07,360
and with um kind of iteration time

00:23:05,440 --> 00:23:09,120
and then just costs i don't touch on

00:23:07,360 --> 00:23:11,120
this too much but costs are on

00:23:09,120 --> 00:23:12,640
traditional service compared to cdns

00:23:11,120 --> 00:23:14,799
will save you a bit as well as

00:23:12,640 --> 00:23:17,840
delegation of work compared to

00:23:14,799 --> 00:23:20,480
um having engineering hours

00:23:17,840 --> 00:23:22,000
but we'll touch on that a little bit all

00:23:20,480 --> 00:23:23,760
our content comes from cms and it's

00:23:22,000 --> 00:23:26,320
customizable per person

00:23:23,760 --> 00:23:26,799
company oh i talk about headless cms uh

00:23:26,320 --> 00:23:28,640
has

00:23:26,799 --> 00:23:30,080
headless cmss as well and how we get

00:23:28,640 --> 00:23:32,720
information from that but

00:23:30,080 --> 00:23:34,559
that's a good point um and i would love

00:23:32,720 --> 00:23:36,320
to talk to you more about this uh

00:23:34,559 --> 00:23:38,640
after you can find me at tz mannix it's

00:23:36,320 --> 00:23:41,200
on there and twitter but um

00:23:38,640 --> 00:23:42,159
do not uh apologize for derailing the

00:23:41,200 --> 00:23:44,799
talk i think

00:23:42,159 --> 00:23:46,240
this everybody uh i think this is

00:23:44,799 --> 00:23:48,240
important information too

00:23:46,240 --> 00:23:49,440
so hopefully you all enjoyed that as

00:23:48,240 --> 00:23:52,559
well but yes please

00:23:49,440 --> 00:23:53,679
uh keep the questions coming and um

00:23:52,559 --> 00:23:55,600
yeah i'd love to further the

00:23:53,679 --> 00:23:57,360
conversation later so

00:23:55,600 --> 00:23:58,799
so why bother so we kind of talked about

00:23:57,360 --> 00:24:02,000
this a little bit just now

00:23:58,799 --> 00:24:02,400
but um so i just wanted to show you a

00:24:02,000 --> 00:24:04,720
few of

00:24:02,400 --> 00:24:06,720
these like snippets and these are a

00:24:04,720 --> 00:24:07,679
little bit dated actually we've actually

00:24:06,720 --> 00:24:09,840
done a lot

00:24:07,679 --> 00:24:10,799
more progression inside of the ecosystem

00:24:09,840 --> 00:24:14,240
than this

00:24:10,799 --> 00:24:14,640
but um so like smashing magazine their

00:24:14,240 --> 00:24:16,799
first

00:24:14,640 --> 00:24:19,120
load they did this huge migration they

00:24:16,799 --> 00:24:21,760
had a book i'll share at the end

00:24:19,120 --> 00:24:23,760
is uh the jam sex book i just uh we're

00:24:21,760 --> 00:24:26,880
releasing it soon as audiobook

00:24:23,760 --> 00:24:28,799
um if you know because it's just easier

00:24:26,880 --> 00:24:32,640
when you don't have to use your eyes

00:24:28,799 --> 00:24:35,600
um but um so we talked about

00:24:32,640 --> 00:24:36,720
uh they just had this content and

00:24:35,600 --> 00:24:39,279
e-commerce and

00:24:36,720 --> 00:24:41,200
their conference sites um and it was

00:24:39,279 --> 00:24:42,799
like on wordpress and then there were a

00:24:41,200 --> 00:24:45,520
few things on others so it was

00:24:42,799 --> 00:24:46,000
quite separated so they switch it over

00:24:45,520 --> 00:24:47,600
to a more

00:24:46,000 --> 00:24:50,480
jam sack architecture and watch their

00:24:47,600 --> 00:24:51,760
first load uh go from 800 milliseconds

00:24:50,480 --> 00:24:53,919
to 80.

00:24:51,760 --> 00:24:54,799
um and i mostly pulled the really big

00:24:53,919 --> 00:24:58,559
numbers that i found

00:24:54,799 --> 00:25:01,120
extremely impressive um so like perfect

00:24:58,559 --> 00:25:03,600
keto they actually saw it go from 6.2

00:25:01,120 --> 00:25:04,480
seconds of the page load time to 750

00:25:03,600 --> 00:25:07,200
milliseconds

00:25:04,480 --> 00:25:08,640
so that's six times faster um and that's

00:25:07,200 --> 00:25:10,960
when they're using because

00:25:08,640 --> 00:25:11,679
um there's been a lot of talk in the

00:25:10,960 --> 00:25:14,720
community

00:25:11,679 --> 00:25:16,159
about like wordpress verse jam stack

00:25:14,720 --> 00:25:18,080
and my biggest thing that i want to

00:25:16,159 --> 00:25:18,480
remind people is that these things can

00:25:18,080 --> 00:25:20,559
be

00:25:18,480 --> 00:25:22,159
used together really because you can use

00:25:20,559 --> 00:25:24,080
the headless wordpress

00:25:22,159 --> 00:25:25,279
um and i'll talk about headless cmss a

00:25:24,080 --> 00:25:28,480
little bit later

00:25:25,279 --> 00:25:30,159
um but you can still use uh something

00:25:28,480 --> 00:25:31,760
that's very familiar to a lot of your

00:25:30,159 --> 00:25:34,480
users and developers

00:25:31,760 --> 00:25:36,799
um but use it with this new concept of

00:25:34,480 --> 00:25:40,080
the jamstack architecture

00:25:36,799 --> 00:25:43,279
um and then cornerstone so they

00:25:40,080 --> 00:25:46,559
uh they delivered their web projects

00:25:43,279 --> 00:25:48,159
30 faster um

00:25:46,559 --> 00:25:50,880
again they were on this kind of like

00:25:48,159 --> 00:25:54,080
outdated monolithic cms architecture

00:25:50,880 --> 00:25:56,960
um and they changed uh how they did

00:25:54,080 --> 00:25:58,320
their architecture in in communicating

00:25:56,960 --> 00:26:00,080
with their cms

00:25:58,320 --> 00:26:01,440
and how they did their cms and their

00:26:00,080 --> 00:26:04,000
pages were 25

00:26:01,440 --> 00:26:05,360
faster and the time to market for new

00:26:04,000 --> 00:26:08,960
pages and content

00:26:05,360 --> 00:26:11,360
was 30 percent faster

00:26:08,960 --> 00:26:12,880
and by the way if you we have all of

00:26:11,360 --> 00:26:16,400
these um

00:26:12,880 --> 00:26:18,159
on the network uh page as well where

00:26:16,400 --> 00:26:19,600
we go into more detail about what they

00:26:18,159 --> 00:26:21,440
did and how they did it and

00:26:19,600 --> 00:26:22,640
conversations with them we have case

00:26:21,440 --> 00:26:24,960
studies on all of these

00:26:22,640 --> 00:26:25,679
um if you're just like yeah nice numbers

00:26:24,960 --> 00:26:27,279
but

00:26:25,679 --> 00:26:29,279
show me the information to back it up

00:26:27,279 --> 00:26:31,120
which i completely understand

00:26:29,279 --> 00:26:32,559
um and so this is what i was talking

00:26:31,120 --> 00:26:35,120
about one of the costs

00:26:32,559 --> 00:26:35,600
where it's not where you would usually

00:26:35,120 --> 00:26:38,720
see

00:26:35,600 --> 00:26:41,120
like a line item but um they had

00:26:38,720 --> 00:26:42,080
this huge documentation migration at

00:26:41,120 --> 00:26:45,200
citrix

00:26:42,080 --> 00:26:47,360
and they actually went ahead of schedule

00:26:45,200 --> 00:26:48,720
this to me is like when you have like a

00:26:47,360 --> 00:26:50,400
contractor in your house and they're

00:26:48,720 --> 00:26:52,159
like i told you we would be done in two

00:26:50,400 --> 00:26:53,120
weeks but i just finished it last week

00:26:52,159 --> 00:26:55,279
and it's like

00:26:53,120 --> 00:26:57,279
when do you ever see this happen with

00:26:55,279 --> 00:26:59,919
tech projects like

00:26:57,279 --> 00:27:00,640
i know i never have but so they were

00:26:59,919 --> 00:27:02,400
able to

00:27:00,640 --> 00:27:04,000
go ahead of schedule and that resulted

00:27:02,400 --> 00:27:06,960
in 65 percent um

00:27:04,000 --> 00:27:08,159
savings um and a significantly better

00:27:06,960 --> 00:27:11,360
user experience for

00:27:08,159 --> 00:27:13,840
their documentation site um

00:27:11,360 --> 00:27:15,120
so that kind of like brings me into

00:27:13,840 --> 00:27:17,919
talking about

00:27:15,120 --> 00:27:18,480
this uh developer experience aspect of

00:27:17,919 --> 00:27:21,279
it

00:27:18,480 --> 00:27:23,360
uh i really feel like a lot of times we

00:27:21,279 --> 00:27:24,720
don't talk about developer experience

00:27:23,360 --> 00:27:27,520
enough and one of my

00:27:24,720 --> 00:27:28,480
my favorite parts i totally i will admit

00:27:27,520 --> 00:27:30,399
that like

00:27:28,480 --> 00:27:32,559
before i even joined netlify i had

00:27:30,399 --> 00:27:35,440
started drinking the jamstack kool-aid

00:27:32,559 --> 00:27:37,039
because of the developer experience um

00:27:35,440 --> 00:27:40,480
which i'll delve into a bit

00:27:37,039 --> 00:27:41,279
but um so uh loblaw also blah blah

00:27:40,480 --> 00:27:44,320
digital

00:27:41,279 --> 00:27:45,919
uh we have a whole white paper on

00:27:44,320 --> 00:27:46,960
um the advancements they made with

00:27:45,919 --> 00:27:48,159
switching over the jam stack

00:27:46,960 --> 00:27:49,679
architecture but

00:27:48,159 --> 00:27:51,919
i really like what justin watts says

00:27:49,679 --> 00:27:53,840
here of uh it empowers our engineering

00:27:51,919 --> 00:27:54,640
teams to launch websites and campaigns

00:27:53,840 --> 00:27:57,840
in minutes

00:27:54,640 --> 00:28:00,320
with no ops uh a goal that has often

00:27:57,840 --> 00:28:03,360
been a pipe dream in our industry

00:28:00,320 --> 00:28:07,120
i that just resonates with me so much

00:28:03,360 --> 00:28:08,159
um and uh so tom preston warner also

00:28:07,120 --> 00:28:10,480
talks about

00:28:08,159 --> 00:28:12,880
uh he's actually on the like uh

00:28:10,480 --> 00:28:14,880
disclaimer he's on like the netlify

00:28:12,880 --> 00:28:16,960
board but i think it's because he likes

00:28:14,880 --> 00:28:18,159
the dx so much of it jam stack

00:28:16,960 --> 00:28:20,799
experience

00:28:18,159 --> 00:28:22,080
but um he there's this article where he

00:28:20,799 --> 00:28:23,679
talks about the importance of dev

00:28:22,080 --> 00:28:26,320
experience

00:28:23,679 --> 00:28:27,840
and the quote that he has here the only

00:28:26,320 --> 00:28:29,600
thing that matters to me when it comes

00:28:27,840 --> 00:28:31,440
to developer experience is this can i

00:28:29,600 --> 00:28:34,080
turn what's in my mind into a finished

00:28:31,440 --> 00:28:37,520
product quickly and easily or not

00:28:34,080 --> 00:28:38,640
uh i think that we as developers in

00:28:37,520 --> 00:28:42,559
general

00:28:38,640 --> 00:28:45,600
we often think about that a lot um

00:28:42,559 --> 00:28:48,559
so excuse me

00:28:45,600 --> 00:28:49,919
so what is this get workflow um it's

00:28:48,559 --> 00:28:53,200
basically utilizing

00:28:49,919 --> 00:28:55,039
repos and functionality like cloning

00:28:53,200 --> 00:28:57,919
forking having pull requests

00:28:55,039 --> 00:28:59,039
merge checks and more and it basically

00:28:57,919 --> 00:29:03,039
helps you create this

00:28:59,039 --> 00:29:06,080
easily distributed um easily checked

00:29:03,039 --> 00:29:07,760
a quick interaction development process

00:29:06,080 --> 00:29:10,240
it's using get to organize and check

00:29:07,760 --> 00:29:13,679
code for many devs

00:29:10,240 --> 00:29:16,000
um and so i like to give the example

00:29:13,679 --> 00:29:16,880
uh i actually have multiple projects

00:29:16,000 --> 00:29:20,000
that i work in

00:29:16,880 --> 00:29:23,039
both um uh

00:29:20,000 --> 00:29:27,120
on my team and off uh in

00:29:23,039 --> 00:29:30,320
um uh my scion work

00:29:27,120 --> 00:29:33,520
that i use the get workflow and so

00:29:30,320 --> 00:29:36,720
i'm on projects where one person is

00:29:33,520 --> 00:29:38,080
is here i am in cincinnati ohio and then

00:29:36,720 --> 00:29:40,559
another person

00:29:38,080 --> 00:29:42,000
is in montreal another person in london

00:29:40,559 --> 00:29:43,760
like we're going to see this a lot now

00:29:42,000 --> 00:29:44,480
right a lot of distributed teams out

00:29:43,760 --> 00:29:46,399
there

00:29:44,480 --> 00:29:48,080
the way that we have our projects set up

00:29:46,399 --> 00:29:51,120
it's all encapsulated

00:29:48,080 --> 00:29:53,919
in that get workflow it's in get repost

00:29:51,120 --> 00:29:57,360
so we're able to pull down a project

00:29:53,919 --> 00:30:00,240
i know that my settings are set up for

00:29:57,360 --> 00:30:01,520
deploying on netlify and that's all in

00:30:00,240 --> 00:30:04,640
one codebase

00:30:01,520 --> 00:30:06,320
or in one dashboard for us to work with

00:30:04,640 --> 00:30:08,640
so we can look at our dashboard we can

00:30:06,320 --> 00:30:10,640
work at our repos

00:30:08,640 --> 00:30:11,919
we can basically do all our

00:30:10,640 --> 00:30:13,760
communication there

00:30:11,919 --> 00:30:15,360
and one of my biggest favorite things

00:30:13,760 --> 00:30:17,919
are these checks

00:30:15,360 --> 00:30:18,559
so this is like the checks that we have

00:30:17,919 --> 00:30:21,520
uh

00:30:18,559 --> 00:30:23,200
for when we create blog posts um on the

00:30:21,520 --> 00:30:26,880
netflix application

00:30:23,200 --> 00:30:29,919
uh so we can set all of these emotions

00:30:26,880 --> 00:30:30,640
with github that say like does it at

00:30:29,919 --> 00:30:33,600
least have

00:30:30,640 --> 00:30:35,279
one reviewer um here are the checks that

00:30:33,600 --> 00:30:37,840
we want to make sure it has

00:30:35,279 --> 00:30:41,360
are the redirect rules in place do we

00:30:37,840 --> 00:30:43,679
have the pr labels so we understand that

00:30:41,360 --> 00:30:44,799
this is what this issued or this pull

00:30:43,679 --> 00:30:47,039
request does

00:30:44,799 --> 00:30:48,159
it basically lets you standardize a lot

00:30:47,039 --> 00:30:50,480
of things to

00:30:48,159 --> 00:30:52,240
get rid of too many questions and too

00:30:50,480 --> 00:30:55,279
many conversations

00:30:52,240 --> 00:30:58,480
um and it lets you do these iterations

00:30:55,279 --> 00:31:00,559
very quickly um on top of that

00:30:58,480 --> 00:31:02,240
a big stan big thing in the jam stack

00:31:00,559 --> 00:31:04,240
architecture are these automated builds

00:31:02,240 --> 00:31:06,159
and atomic deploys so

00:31:04,240 --> 00:31:08,159
automated builds will basically every

00:31:06,159 --> 00:31:10,080
time you push new information

00:31:08,159 --> 00:31:12,080
or new content to your site either from

00:31:10,080 --> 00:31:14,159
you or from a web hook

00:31:12,080 --> 00:31:17,039
it will rebuild the site automatically

00:31:14,159 --> 00:31:20,640
for you um and then you can also

00:31:17,039 --> 00:31:23,519
uh have it like do the build and then

00:31:20,640 --> 00:31:24,559
uh once that builds good you deploy it

00:31:23,519 --> 00:31:27,440
as soon as that

00:31:24,559 --> 00:31:28,720
that build is done it gets deployed so

00:31:27,440 --> 00:31:30,880
um

00:31:28,720 --> 00:31:32,240
some people will do commenting this way

00:31:30,880 --> 00:31:34,640
where uh

00:31:32,240 --> 00:31:36,080
the a comment will be submitted through

00:31:34,640 --> 00:31:38,000
a serverless function

00:31:36,080 --> 00:31:39,760
comment yes comment comment it's a

00:31:38,000 --> 00:31:42,640
commit and comment just like

00:31:39,760 --> 00:31:43,440
switched up in my green a comment

00:31:42,640 --> 00:31:47,279
comment

00:31:43,440 --> 00:31:49,679
will be submitted from a from a user

00:31:47,279 --> 00:31:50,399
through a serverless function that then

00:31:49,679 --> 00:31:53,840
triggers

00:31:50,399 --> 00:31:54,720
uh through a webhook um a addition to

00:31:53,840 --> 00:31:56,640
the markdown

00:31:54,720 --> 00:31:59,279
inside of github that will make a new

00:31:56,640 --> 00:32:03,120
commit a new pull request and a new

00:31:59,279 --> 00:32:06,559
build that build will then uh update

00:32:03,120 --> 00:32:09,600
and you have these atomic deploys where

00:32:06,559 --> 00:32:12,960
everything uh everything

00:32:09,600 --> 00:32:15,919
changes at once

00:32:12,960 --> 00:32:17,200
so it blows everything away and puts new

00:32:15,919 --> 00:32:18,799
content so i don't know

00:32:17,200 --> 00:32:20,320
if you've been here but i can't tell you

00:32:18,799 --> 00:32:24,159
how many times it's like did you hit

00:32:20,320 --> 00:32:27,519
refresh is it a hard refresh so

00:32:24,159 --> 00:32:29,919
um this is a really great opportunity

00:32:27,519 --> 00:32:31,200
to have stuff go through but you also

00:32:29,919 --> 00:32:34,399
have

00:32:31,200 --> 00:32:36,960
immutable builds so it will

00:32:34,399 --> 00:32:39,600
if something happened where a build

00:32:36,960 --> 00:32:42,880
broke you can immediately roll back

00:32:39,600 --> 00:32:44,240
to the last build um and that makes for

00:32:42,880 --> 00:32:46,240
really confident

00:32:44,240 --> 00:32:47,919
fast iterations so that if you mess

00:32:46,240 --> 00:32:48,640
something up you know you can go back

00:32:47,919 --> 00:32:51,519
like

00:32:48,640 --> 00:32:53,200
you there's a there's finally a control

00:32:51,519 --> 00:32:56,000
or a command z

00:32:53,200 --> 00:32:57,840
for uh for your deploys so that just

00:32:56,000 --> 00:33:01,120
make gives a lot of confidence to

00:32:57,840 --> 00:33:01,919
the developers um to be able to iterate

00:33:01,120 --> 00:33:05,679
often

00:33:01,919 --> 00:33:07,919
um and i talk about uh or sarah talks

00:33:05,679 --> 00:33:10,480
about in her blog post sarah drazner

00:33:07,919 --> 00:33:12,000
um automating potential deploys with

00:33:10,480 --> 00:33:13,600
netflix web hooks

00:33:12,000 --> 00:33:15,200
um so this is where we kind of talk

00:33:13,600 --> 00:33:18,240
about how that process

00:33:15,200 --> 00:33:21,279
works and also just like

00:33:18,240 --> 00:33:23,519
contentful using potential for uh

00:33:21,279 --> 00:33:25,760
as a headless cms i want to touch on

00:33:23,519 --> 00:33:29,120
what the term headless cms is

00:33:25,760 --> 00:33:31,200
um these were new to me and i it just

00:33:29,120 --> 00:33:34,640
made me think like why didn't this exist

00:33:31,200 --> 00:33:36,640
so much longer ago so this is basically

00:33:34,640 --> 00:33:39,679
back-end only content management systems

00:33:36,640 --> 00:33:41,760
um and a lot of the major cmss have

00:33:39,679 --> 00:33:43,760
headless versions of the cms like we

00:33:41,760 --> 00:33:48,080
talked about earlier wordpress has it

00:33:43,760 --> 00:33:51,519
uh there's strappy um there is sanity io

00:33:48,080 --> 00:33:55,039
um and it's basically detaching

00:33:51,519 --> 00:33:57,679
the ui the head from the api

00:33:55,039 --> 00:34:00,080
and this is basically you get you get

00:33:57,679 --> 00:34:02,799
that ui you get that gui that

00:34:00,080 --> 00:34:05,679
users are used to using um and this is

00:34:02,799 --> 00:34:07,760
something that helps with that

00:34:05,679 --> 00:34:09,440
accessibility for all levels of

00:34:07,760 --> 00:34:11,440
technology users

00:34:09,440 --> 00:34:13,440
um but it basically gives you the

00:34:11,440 --> 00:34:14,000
ability to see that ui that you used to

00:34:13,440 --> 00:34:17,040
get that

00:34:14,000 --> 00:34:17,760
but then the people who are using that

00:34:17,040 --> 00:34:19,440
data

00:34:17,760 --> 00:34:21,040
this headless cms does not care what you

00:34:19,440 --> 00:34:23,040
do with that data they're like i put in

00:34:21,040 --> 00:34:24,480
this data whatever you do with it cool

00:34:23,040 --> 00:34:26,480
you can use it whichever way you want

00:34:24,480 --> 00:34:27,599
with whatever technology you want i'm

00:34:26,480 --> 00:34:31,200
separated i'm

00:34:27,599 --> 00:34:33,440
decoupled from that um so

00:34:31,200 --> 00:34:34,399
this is the one that i use for one of my

00:34:33,440 --> 00:34:38,000
side projects

00:34:34,399 --> 00:34:40,320
where we have content creators

00:34:38,000 --> 00:34:41,440
and they come in and they see this ui

00:34:40,320 --> 00:34:44,159
and strappy

00:34:41,440 --> 00:34:46,639
and are able to understand okay i just

00:34:44,159 --> 00:34:47,679
know i need to add a restaurant and i

00:34:46,639 --> 00:34:49,119
put the name in and i put the

00:34:47,679 --> 00:34:52,000
description in

00:34:49,119 --> 00:34:53,760
um and these are all of the content

00:34:52,000 --> 00:34:56,480
fields the content types that

00:34:53,760 --> 00:34:57,119
you know i can add for that and then i

00:34:56,480 --> 00:35:00,720
see

00:34:57,119 --> 00:35:01,520
on uh in the repo what's coming through

00:35:00,720 --> 00:35:04,400
and i can

00:35:01,520 --> 00:35:05,440
i can edit this both ways so they can

00:35:04,400 --> 00:35:07,119
bring in and say

00:35:05,440 --> 00:35:08,800
oh you know what we're going to add this

00:35:07,119 --> 00:35:11,440
new attribute that's a

00:35:08,800 --> 00:35:13,200
main image and i say okay that's great

00:35:11,440 --> 00:35:15,040
i'm actually going to change and get rid

00:35:13,200 --> 00:35:16,079
of that video file type i can do that

00:35:15,040 --> 00:35:18,079
through github

00:35:16,079 --> 00:35:19,680
they can do it to the ui so it's a

00:35:18,079 --> 00:35:22,800
really great way for

00:35:19,680 --> 00:35:23,680
teams to work together no matter like i

00:35:22,800 --> 00:35:26,000
only want to work

00:35:23,680 --> 00:35:27,119
in the command line with git and they

00:35:26,000 --> 00:35:29,599
only want to work

00:35:27,119 --> 00:35:30,720
on the ui so it's a really great way to

00:35:29,599 --> 00:35:34,079
do that

00:35:30,720 --> 00:35:35,839
so let's look at how we do this um

00:35:34,079 --> 00:35:38,560
no questions if you have questions

00:35:35,839 --> 00:35:42,480
please feel free to put them in there

00:35:38,560 --> 00:35:45,760
um i'm trying to think we started it

00:35:42,480 --> 00:35:48,560
at what 11 30

00:35:45,760 --> 00:35:49,119
30 30. so is it 10 more minutes we have

00:35:48,560 --> 00:35:51,440
left

00:35:49,119 --> 00:35:53,920
is that right i should have kept track

00:35:51,440 --> 00:35:53,920
of the time

00:35:55,760 --> 00:36:01,520
yeah you have 10 minutes left okay

00:35:59,359 --> 00:36:02,480
so uh with that and i'm going to switch

00:36:01,520 --> 00:36:04,960
over and

00:36:02,480 --> 00:36:07,040
show you the demo oh we're really great

00:36:04,960 --> 00:36:09,280
on time i'm very happy about that

00:36:07,040 --> 00:36:11,440
um so i wanted to show you real quickly

00:36:09,280 --> 00:36:15,040
um with scully

00:36:11,440 --> 00:36:18,720
again we're just using angular so here

00:36:15,040 --> 00:36:22,240
we see um that

00:36:18,720 --> 00:36:24,640
uh we're saying uh

00:36:22,240 --> 00:36:26,000
i have i have a full project that's an

00:36:24,640 --> 00:36:29,280
angular project and we want

00:36:26,000 --> 00:36:31,280
to ng add scully um and then

00:36:29,280 --> 00:36:33,520
you always have to build because scully

00:36:31,280 --> 00:36:37,280
is going to look at that folder

00:36:33,520 --> 00:36:39,359
your distributor your dist folder and

00:36:37,280 --> 00:36:41,280
see what has been built out and read

00:36:39,359 --> 00:36:43,119
from there so you always have to build

00:36:41,280 --> 00:36:43,920
and then you just run scully and then it

00:36:43,119 --> 00:36:47,359
goes through

00:36:43,920 --> 00:36:49,839
and it's going to render all of those

00:36:47,359 --> 00:36:51,200
pages for you and then shove that out

00:36:49,839 --> 00:36:54,400
into a disk static

00:36:51,200 --> 00:36:55,920
file for you um i didn't want to go

00:36:54,400 --> 00:36:58,960
through the whole process of like

00:36:55,920 --> 00:37:01,520
showing you a fool uh

00:36:58,960 --> 00:37:02,400
having to make an angular project and go

00:37:01,520 --> 00:37:04,800
from there

00:37:02,400 --> 00:37:06,079
so i wanted to point out that i actually

00:37:04,800 --> 00:37:08,480
have um

00:37:06,079 --> 00:37:10,160
if you go to again learn with jason we

00:37:08,480 --> 00:37:13,440
did a whole episode

00:37:10,160 --> 00:37:15,119
on using skully um and you see here

00:37:13,440 --> 00:37:17,200
we built out a project with a bunch of

00:37:15,119 --> 00:37:20,400
different routes we

00:37:17,200 --> 00:37:23,359
added scully um and we

00:37:20,400 --> 00:37:23,760
actually go through and by the end we

00:37:23,359 --> 00:37:27,200
make

00:37:23,760 --> 00:37:28,400
uh we go ahead and let me see if i can

00:37:27,200 --> 00:37:31,280
get it

00:37:28,400 --> 00:37:31,839
page of it but we go through and we make

00:37:31,280 --> 00:37:34,480
a thing that

00:37:31,839 --> 00:37:35,520
go ahead and uses scully to show all the

00:37:34,480 --> 00:37:37,520
routes that we have

00:37:35,520 --> 00:37:38,640
make them into links and see that

00:37:37,520 --> 00:37:41,839
pre-rendered

00:37:38,640 --> 00:37:46,400
information that we had and what i

00:37:41,839 --> 00:37:49,200
highly recommend learn with jason for

00:37:46,400 --> 00:37:50,000
anything you want to learn i'm very

00:37:49,200 --> 00:37:52,320
lucky to have him

00:37:50,000 --> 00:37:53,920
on my team and i basically like any time

00:37:52,320 --> 00:37:55,599
i pair code with him it feels like a

00:37:53,920 --> 00:37:57,280
learn with jason episode

00:37:55,599 --> 00:37:58,640
but what's nice about this is i'm

00:37:57,280 --> 00:38:01,119
basically walking him

00:37:58,640 --> 00:38:02,320
through the process of setting this all

00:38:01,119 --> 00:38:03,839
up and he

00:38:02,320 --> 00:38:05,520
has never worked with scholarly i don't

00:38:03,839 --> 00:38:08,320
know if he's actually ever

00:38:05,520 --> 00:38:09,119
worked that much with uh angular either

00:38:08,320 --> 00:38:12,000
um

00:38:09,119 --> 00:38:13,760
but um you know let me look this up real

00:38:12,000 --> 00:38:14,960
quick so i have that but then there's

00:38:13,760 --> 00:38:19,839
also

00:38:14,960 --> 00:38:19,839
i can find this uh

00:38:21,280 --> 00:38:27,920
i also worked with

00:38:24,640 --> 00:38:29,599
chris uh yeah here so if you watch that

00:38:27,920 --> 00:38:32,640
learn with jason when you can see

00:38:29,599 --> 00:38:33,920
where we take uh that information and

00:38:32,640 --> 00:38:36,640
make the list

00:38:33,920 --> 00:38:37,599
and then uh recently i worked with chris

00:38:36,640 --> 00:38:40,560
coyer

00:38:37,599 --> 00:38:42,320
or hung out with chris coyer i worked

00:38:40,560 --> 00:38:44,240
loosely because we had a lot of fun but

00:38:42,320 --> 00:38:46,640
we did accomplish a lot um

00:38:44,240 --> 00:38:48,880
and we went and did the blog process of

00:38:46,640 --> 00:38:51,440
using skull hd blog process so

00:38:48,880 --> 00:38:53,920
if you want to see each of those steps

00:38:51,440 --> 00:38:56,720
um you can go through that process

00:38:53,920 --> 00:38:57,760
but then i wanted to show you this is a

00:38:56,720 --> 00:39:01,520
site um

00:38:57,760 --> 00:39:01,520
let me go ahead and i'll put this thing

00:39:01,599 --> 00:39:07,920
that has uh

00:39:05,040 --> 00:39:10,160
a lot more of the functionality of what

00:39:07,920 --> 00:39:14,079
you would see with the jam stack site

00:39:10,160 --> 00:39:16,000
so um so this is basically

00:39:14,079 --> 00:39:17,839
this front page it's just a pre-rendered

00:39:16,000 --> 00:39:21,040
page that is using

00:39:17,839 --> 00:39:24,000
um cloudenary to have

00:39:21,040 --> 00:39:25,119
your resources built on uh or your

00:39:24,000 --> 00:39:26,800
research is stored

00:39:25,119 --> 00:39:28,800
somewhere else so that you're just like

00:39:26,800 --> 00:39:30,079
pulling things in and building as fast

00:39:28,800 --> 00:39:33,280
as possible

00:39:30,079 --> 00:39:34,960
um but uh we also have a blog on here

00:39:33,280 --> 00:39:39,520
but first i actually want to show you

00:39:34,960 --> 00:39:42,240
uh let's go ahead and disable javascript

00:39:39,520 --> 00:39:44,240
because like as you know with jam stack

00:39:42,240 --> 00:39:46,400
or with angular sites you can't

00:39:44,240 --> 00:39:47,599
disable javascript and have your site

00:39:46,400 --> 00:39:49,599
continue to work

00:39:47,599 --> 00:39:51,359
um so i just want to show you uh so we

00:39:49,599 --> 00:39:53,920
have this site working

00:39:51,359 --> 00:39:55,760
everything loading oh because i

00:39:53,920 --> 00:39:57,839
refreshed it doesn't disable javascript

00:39:55,760 --> 00:40:01,359
and does it

00:39:57,839 --> 00:40:03,920
um now it's there and then

00:40:01,359 --> 00:40:04,880
if we go to the blog the blog still

00:40:03,920 --> 00:40:07,359
works because

00:40:04,880 --> 00:40:09,119
we have pre-rendered everything and we

00:40:07,359 --> 00:40:11,599
made the blog with markdown but we can

00:40:09,119 --> 00:40:13,760
go inside even with javascript still

00:40:11,599 --> 00:40:15,520
not working we have all the content

00:40:13,760 --> 00:40:16,880
coming through because again it's

00:40:15,520 --> 00:40:18,720
pre-rendered

00:40:16,880 --> 00:40:21,680
um because we processed it but then we

00:40:18,720 --> 00:40:25,599
also have things like being able to

00:40:21,680 --> 00:40:29,839
um i know we have five minutes uh

00:40:25,599 --> 00:40:29,839
do a contact form uh

00:40:31,280 --> 00:40:34,800
uh and this is all using serverless

00:40:33,119 --> 00:40:37,440
functions um

00:40:34,800 --> 00:40:38,880
and then uh using serverless functions

00:40:37,440 --> 00:40:42,000
and networkify forms

00:40:38,880 --> 00:40:45,359
to actually submit a form um which

00:40:42,000 --> 00:40:48,079
if you go to the forms section

00:40:45,359 --> 00:40:48,560
i have a contact form and that just came

00:40:48,079 --> 00:40:51,839
through

00:40:48,560 --> 00:40:53,119
using serverless functions um i have

00:40:51,839 --> 00:40:54,880
blog posts on

00:40:53,119 --> 00:40:56,800
walking you through all the code for

00:40:54,880 --> 00:40:59,119
each of these steps too

00:40:56,800 --> 00:41:00,880
at the netlify blog but one other thing

00:40:59,119 --> 00:41:02,240
i want to show you over here is that we

00:41:00,880 --> 00:41:05,520
also have the ability

00:41:02,240 --> 00:41:08,720
to um be able to

00:41:05,520 --> 00:41:10,800
log in with third-party uh

00:41:08,720 --> 00:41:12,119
providers and this is actually being

00:41:10,800 --> 00:41:15,280
done again with

00:41:12,119 --> 00:41:18,880
jwt's and serverless functions

00:41:15,280 --> 00:41:18,880
um and that looks like

00:41:18,960 --> 00:41:25,440
uh oh and then that

00:41:22,000 --> 00:41:28,560
i'm gonna show you real quick

00:41:25,440 --> 00:41:31,680
that that lives here and i just

00:41:28,560 --> 00:41:32,880
pulled myself in here uh oh that's 12

00:41:31,680 --> 00:41:35,280
hours ago

00:41:32,880 --> 00:41:36,400
oh because i already existed there but

00:41:35,280 --> 00:41:39,440
then you can see

00:41:36,400 --> 00:41:42,560
you're also able to apply roles

00:41:39,440 --> 00:41:46,400
uh manually or you can do it with

00:41:42,560 --> 00:41:48,640
um again another server

00:41:46,400 --> 00:41:50,800
that's another serverless function to be

00:41:48,640 --> 00:41:51,839
able to redirect knowledge to not only

00:41:50,800 --> 00:41:55,599
apply roles

00:41:51,839 --> 00:42:00,480
but also to um send them to

00:41:55,599 --> 00:42:00,480
gated content or specific content or um

00:42:00,839 --> 00:42:03,839
uh

00:42:03,920 --> 00:42:08,240
basically like uh customized content

00:42:07,119 --> 00:42:11,760
couldn't get that word

00:42:08,240 --> 00:42:13,520
into my head um so does jam sad scale

00:42:11,760 --> 00:42:15,920
the hundreds of pages

00:42:13,520 --> 00:42:16,720
and 50 plus teams each owning a section

00:42:15,920 --> 00:42:18,640
of the site

00:42:16,720 --> 00:42:20,640
seems like lazy loaded modules can help

00:42:18,640 --> 00:42:22,720
with separation of concerns performance

00:42:20,640 --> 00:42:24,800
but any change to lazy loaded route

00:42:22,720 --> 00:42:26,480
would require rebuild redeploy an entire

00:42:24,800 --> 00:42:27,920
app uh

00:42:26,480 --> 00:42:30,400
the backfire the microphone is to the

00:42:27,920 --> 00:42:30,880
rescue yeah but there are also different

00:42:30,400 --> 00:42:33,200
ways

00:42:30,880 --> 00:42:34,800
um one of the biggest things i think uh

00:42:33,200 --> 00:42:35,920
in switching to the jam stack

00:42:34,800 --> 00:42:37,599
architecture is

00:42:35,920 --> 00:42:39,040
like uh the more you know about the

00:42:37,599 --> 00:42:40,880
ecosystem and the more you know about

00:42:39,040 --> 00:42:41,200
the architecture in general it actually

00:42:40,880 --> 00:42:43,280
like

00:42:41,200 --> 00:42:45,119
sheds light on the different strategies

00:42:43,280 --> 00:42:46,640
i'm so sorry train's going by i hope you

00:42:45,119 --> 00:42:48,240
can still hear me okay

00:42:46,640 --> 00:42:50,400
different strategies of how to make

00:42:48,240 --> 00:42:54,319
things like this work hundreds of pages

00:42:50,400 --> 00:42:57,599
yeah thousands hundreds of thousands

00:42:54,319 --> 00:43:00,880
that's when it gets into uh how

00:42:57,599 --> 00:43:04,880
how the site is being built um so

00:43:00,880 --> 00:43:05,680
are you um are you doing incremental

00:43:04,880 --> 00:43:07,680
builds based

00:43:05,680 --> 00:43:09,680
are you being able to cache things so

00:43:07,680 --> 00:43:12,960
there are different strategies around

00:43:09,680 --> 00:43:15,119
making that work uh with honestly like

00:43:12,960 --> 00:43:17,680
with the 50 plus teams and stuff

00:43:15,119 --> 00:43:18,240
using jwts and that kind of identity

00:43:17,680 --> 00:43:19,839
features

00:43:18,240 --> 00:43:21,520
a lot of times you can delegate a lot of

00:43:19,839 --> 00:43:24,560
your auth and a lot of your identity to

00:43:21,520 --> 00:43:28,880
things like netflix identity and auth0

00:43:24,560 --> 00:43:31,040
to manage a lot of the

00:43:28,880 --> 00:43:32,800
a lot of that kind of authentication for

00:43:31,040 --> 00:43:36,160
you which is really nice

00:43:32,800 --> 00:43:37,680
um but again it's like uh

00:43:36,160 --> 00:43:39,200
let me give you some more resources

00:43:37,680 --> 00:43:42,880
because i think that might help

00:43:39,200 --> 00:43:46,480
um with all of the cases

00:43:42,880 --> 00:43:50,000
with all of these kinds of cases um

00:43:46,480 --> 00:43:53,280
and just in particular uh

00:43:50,000 --> 00:43:54,400
i think with uh we have these build

00:43:53,280 --> 00:43:56,400
plugins where

00:43:54,400 --> 00:43:58,079
you're able to like we have a bunch that

00:43:56,400 --> 00:44:01,520
have to do with caching

00:43:58,079 --> 00:44:02,319
um but you can build your own build

00:44:01,520 --> 00:44:04,800
plugin

00:44:02,319 --> 00:44:06,319
and it kind of being you're able to

00:44:04,800 --> 00:44:08,000
build your own blog in an hour

00:44:06,319 --> 00:44:10,240
starting to have the ability to build

00:44:08,000 --> 00:44:12,079
your own edge handlers which is that

00:44:10,240 --> 00:44:14,960
computing on the edge node

00:44:12,079 --> 00:44:16,720
uh so it makes the possibilities of how

00:44:14,960 --> 00:44:19,920
to solve these problems

00:44:16,720 --> 00:44:24,079
quite uh quite large

00:44:19,920 --> 00:44:26,160
in quite fast because

00:44:24,079 --> 00:44:27,680
if you think about the process you're

00:44:26,160 --> 00:44:30,319
able to

00:44:27,680 --> 00:44:32,079
use serverless functions and web hooks

00:44:30,319 --> 00:44:34,240
and different apis

00:44:32,079 --> 00:44:35,680
to hook up to different places where you

00:44:34,240 --> 00:44:38,960
can delegate services

00:44:35,680 --> 00:44:42,160
like authorization and you have

00:44:38,960 --> 00:44:44,640
ways that you can customize

00:44:42,160 --> 00:44:46,160
what is served based on passing a

00:44:44,640 --> 00:44:48,880
javascript function

00:44:46,160 --> 00:44:50,560
to the redirect knowledge of a server on

00:44:48,880 --> 00:44:54,319
an edge node

00:44:50,560 --> 00:44:56,480
um so there's a lot of possibilities oh

00:44:54,319 --> 00:44:57,440
i have one minute so i'm gonna head back

00:44:56,480 --> 00:45:00,079
real quick

00:44:57,440 --> 00:45:02,240
um this is the authenticating users with

00:45:00,079 --> 00:45:03,440
angular and netlify blog post that i

00:45:02,240 --> 00:45:05,119
have

00:45:03,440 --> 00:45:07,760
where i just talk about it's basically

00:45:05,119 --> 00:45:10,960
changing two lines in your angular code

00:45:07,760 --> 00:45:12,800
um and then going into that section that

00:45:10,960 --> 00:45:14,400
i showed you so i won't go through this

00:45:12,800 --> 00:45:17,440
whole little setup

00:45:14,400 --> 00:45:20,640
um but definitely check that out

00:45:17,440 --> 00:45:21,839
at uh at what i'll show you now which

00:45:20,640 --> 00:45:23,680
are some reasons for the road that i

00:45:21,839 --> 00:45:27,280
will wrap up in one minute

00:45:23,680 --> 00:45:30,640
um csstrix has this great services

00:45:27,280 --> 00:45:31,760
page that talks about also like a lot of

00:45:30,640 --> 00:45:34,880
serverless

00:45:31,760 --> 00:45:35,440
server services uh resources when it

00:45:34,880 --> 00:45:38,960
comes to

00:45:35,440 --> 00:45:39,520
cms's hosting auths um a lot that will

00:45:38,960 --> 00:45:41,680
answer

00:45:39,520 --> 00:45:43,680
like it's all these puzzles pieces that

00:45:41,680 --> 00:45:45,839
fit together really well

00:45:43,680 --> 00:45:47,760
and help delegate things away from

00:45:45,839 --> 00:45:48,160
engineering hours that you may not have

00:45:47,760 --> 00:45:51,200
to

00:45:48,160 --> 00:45:52,160
a team that is focused purely on you

00:45:51,200 --> 00:45:54,880
know doing

00:45:52,160 --> 00:45:56,000
secure doing um yeah security and

00:45:54,880 --> 00:45:58,480
authorization

00:45:56,000 --> 00:46:00,400
and you know media handling we also have

00:45:58,480 --> 00:46:03,200
a bunch of different um

00:46:00,400 --> 00:46:04,800
articles on the network blog post um i

00:46:03,200 --> 00:46:06,400
do most of the angular work but then we

00:46:04,800 --> 00:46:08,400
have people who are talking about jam

00:46:06,400 --> 00:46:10,800
stack architecture in general

00:46:08,400 --> 00:46:12,720
uh and then you know react and view

00:46:10,800 --> 00:46:15,200
whatever your flavor is

00:46:12,720 --> 00:46:16,640
um then we also have jamstack.org uh

00:46:15,200 --> 00:46:17,680
take this page with a green assault

00:46:16,640 --> 00:46:20,079
because i think they're actually

00:46:17,680 --> 00:46:23,359
redesigning and sending that out soon

00:46:20,079 --> 00:46:26,640
um sounds more like web posters

00:46:23,359 --> 00:46:27,599
yes um and then uh this is the book i

00:46:26,640 --> 00:46:30,319
was talking about

00:46:27,599 --> 00:46:31,920
yeah sorry just web hooks and like

00:46:30,319 --> 00:46:33,839
serverless functions

00:46:31,920 --> 00:46:36,319
they just there's just so much that they

00:46:33,839 --> 00:46:37,680
could do for making your site dynamic

00:46:36,319 --> 00:46:39,839
um that's why they're such a huge part

00:46:37,680 --> 00:46:41,599
of the jam stack um and you know web

00:46:39,839 --> 00:46:43,520
development in general

00:46:41,599 --> 00:46:45,520
but uh modern web development on the jam

00:46:43,520 --> 00:46:46,400
stack we're releasing audio books soon

00:46:45,520 --> 00:46:50,079
and i highly recommend

00:46:46,400 --> 00:46:52,000
really interesting our um our podcast so

00:46:50,079 --> 00:46:53,920
uh check all that out sorry for going a

00:46:52,000 --> 00:46:55,440
minute over and thank you so much for

00:46:53,920 --> 00:46:57,200
joining me today i

00:46:55,440 --> 00:46:59,040
really had a great time and appreciate

00:46:57,200 --> 00:47:01,599
you being here so

00:46:59,040 --> 00:47:02,960
feel free to reach out to me and uh oh

00:47:01,599 --> 00:47:03,760
yeah i'm glad you're going to try out

00:47:02,960 --> 00:47:05,359
skully so

00:47:03,760 --> 00:47:11,280
thank you all very much and thank you

00:47:05,359 --> 00:47:13,359
all things open

00:47:11,280 --> 00:47:13,359

YouTube URL: https://www.youtube.com/watch?v=S6RvBlxVzOM


