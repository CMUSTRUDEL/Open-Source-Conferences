Title: Making Docker & Python Play Nicely and Securely for Machine Learning & Data Science - Tania Allard
Publication date: 2020-12-11
Playlist: All Things Open 2020 - Big Data Track
Description: 
	Presented by: Tania Allard, PhD, Microsoft
Presented at All Things Open 2020 - Big Data Track

Abstract: Docker has become a standard tool for developers around the world to deploy applications in a reproducible and robust manner. The existence of Docker and Docker compose have reduced the time needed to set up new software and implementing complex technology stacks for our applications.

Now, six years after the initial release of Docker, we can say with confidence that containers and containers orchestration have become some of the defaults in the current technology stacks.

There are thousands of tutorials and getting started documents for those wanting to adopt Docker for apps deployment. However, if you are a Data Scientist, a researcher or someone working on scientific computing wanting to adopt Docker, the story is quite different. There are very few tutorials (in comparison to app/web) and documents focused on Docker best practices for DS and scientific computing. If you are working on DS, ML or scientific computing, this talk is for you. We'll cover best practices when building Docker containers for data-intensive applications, from optimising your image build, to ensuring your containers are secure and efficient deployment workflows. We will talk about the most common problems faced while using Docker with data-intensive applications and how you can overcome most of them. Finally, I'll give some practical and useful tips for you to improve your Docker workflows and practises.

Attendees will leave the talk feeling confident about adopting Docker across a range of DS, ML and research projects.
Captions: 
	00:00:04,960 --> 00:00:09,840
hello everyone

00:00:06,080 --> 00:00:12,160
i am very delighted to be joining

00:00:09,840 --> 00:00:13,519
all things open and i'm going to start

00:00:12,160 --> 00:00:16,880
sharing my slides

00:00:13,519 --> 00:00:19,199
and they should be working straight away

00:00:16,880 --> 00:00:21,039
and as i've been introduced already i'm

00:00:19,199 --> 00:00:23,519
going to be talking about

00:00:21,039 --> 00:00:24,480
python and docker and how you can make

00:00:23,519 --> 00:00:26,720
them work

00:00:24,480 --> 00:00:27,840
for machine learning data science

00:00:26,720 --> 00:00:31,760
context

00:00:27,840 --> 00:00:34,559
or data science content

00:00:31,760 --> 00:00:36,079
so throughout this presentation there

00:00:34,559 --> 00:00:38,719
are a couple of things that i

00:00:36,079 --> 00:00:40,960
am going to be talking about first and

00:00:38,719 --> 00:00:43,600
i'm going to give an introduction about

00:00:40,960 --> 00:00:44,079
the whole python machine learning scene

00:00:43,600 --> 00:00:47,520
as

00:00:44,079 --> 00:00:48,480
of now like 2020 then i'm going to move

00:00:47,520 --> 00:00:50,559
on to

00:00:48,480 --> 00:00:52,960
docker for machine learning and data

00:00:50,559 --> 00:00:53,680
science and how this might be different

00:00:52,960 --> 00:00:56,840
from

00:00:53,680 --> 00:00:59,680
using docker for other things like web

00:00:56,840 --> 00:01:02,239
applications and such

00:00:59,680 --> 00:01:04,559
and final well i'm gonna then move on to

00:01:02,239 --> 00:01:07,200
giving you some best practices giving

00:01:04,559 --> 00:01:08,320
you some tips and advice on how you can

00:01:07,200 --> 00:01:11,439
make the most of

00:01:08,320 --> 00:01:12,720
docker when you're working with machine

00:01:11,439 --> 00:01:15,119
learning deep learning

00:01:12,720 --> 00:01:16,720
data science or data intensive

00:01:15,119 --> 00:01:19,119
applications

00:01:16,720 --> 00:01:20,320
and to close up i'm going to summarize

00:01:19,119 --> 00:01:23,520
all of this give you

00:01:20,320 --> 00:01:23,840
my top tips and that i've been curating

00:01:23,520 --> 00:01:26,640
and

00:01:23,840 --> 00:01:27,680
accumulating basically from working with

00:01:26,640 --> 00:01:31,119
machine learning

00:01:27,680 --> 00:01:34,560
for for a few years now

00:01:31,119 --> 00:01:35,759
so what are you going to take away i've

00:01:34,560 --> 00:01:36,479
already mentioned what i'm going to be

00:01:35,759 --> 00:01:38,799
covering

00:01:36,479 --> 00:01:40,560
and so if you're a beginner if you're

00:01:38,799 --> 00:01:43,439
only dabbing into

00:01:40,560 --> 00:01:45,360
machine learning or docker this

00:01:43,439 --> 00:01:47,280
presentation will give you

00:01:45,360 --> 00:01:48,479
an idea on why you might want to

00:01:47,280 --> 00:01:50,520
integrate docker

00:01:48,479 --> 00:01:51,840
and machine learning if you're

00:01:50,520 --> 00:01:53,520
intermediate

00:01:51,840 --> 00:01:55,280
in either of these technologies whether

00:01:53,520 --> 00:01:57,360
python docker machine learning

00:01:55,280 --> 00:01:58,399
and you're going to take away some best

00:01:57,360 --> 00:02:00,719
practices for

00:01:58,399 --> 00:02:02,799
working with all of this tool together

00:02:00,719 --> 00:02:04,960
and if you're in advance i'm also going

00:02:02,799 --> 00:02:05,920
to be covering some advanced techniques

00:02:04,960 --> 00:02:08,239
for you to

00:02:05,920 --> 00:02:09,039
optimize your docker images and optimize

00:02:08,239 --> 00:02:13,760
your

00:02:09,039 --> 00:02:15,840
workflows for your development

00:02:13,760 --> 00:02:16,959
and before i move over to the bulk of

00:02:15,840 --> 00:02:19,920
the presentation

00:02:16,959 --> 00:02:20,560
let me introduce myself for those of you

00:02:19,920 --> 00:02:23,200
that don't

00:02:20,560 --> 00:02:24,000
know me i think this is my second all

00:02:23,200 --> 00:02:26,480
things open

00:02:24,000 --> 00:02:27,200
and i loved it last year that i was

00:02:26,480 --> 00:02:30,319
there

00:02:27,200 --> 00:02:31,599
um so just a bit of background on myself

00:02:30,319 --> 00:02:33,760
i love open source

00:02:31,599 --> 00:02:35,280
and all things data i've been working

00:02:33,760 --> 00:02:38,239
with data for

00:02:35,280 --> 00:02:39,680
over 10 years now i'm gonna say like

00:02:38,239 --> 00:02:40,480
data science machine learning all of

00:02:39,680 --> 00:02:42,480
that

00:02:40,480 --> 00:02:44,480
and at the moment i'm working as a

00:02:42,480 --> 00:02:45,840
senior developer advocate at microsoft

00:02:44,480 --> 00:02:48,000
where i specialize in all things

00:02:45,840 --> 00:02:50,720
scientific computing machine learning

00:02:48,000 --> 00:02:52,319
um but within machine learning i mostly

00:02:50,720 --> 00:02:55,120
focus on end-to-end

00:02:52,319 --> 00:02:55,920
machine learning which is applying uh

00:02:55,120 --> 00:02:59,280
stuff into

00:02:55,920 --> 00:03:03,599
production doing r d so basically all of

00:02:59,280 --> 00:03:04,319
all of the spectrum i'm also obsessed

00:03:03,599 --> 00:03:08,480
with

00:03:04,319 --> 00:03:10,000
uh outrun um aesthetics you can tell

00:03:08,480 --> 00:03:13,120
from my avatar

00:03:10,000 --> 00:03:14,239
and i love mechanical keyboards also if

00:03:13,120 --> 00:03:16,800
any of you want to

00:03:14,239 --> 00:03:18,680
reach out later after the presentation

00:03:16,800 --> 00:03:20,239
or anything you can find me at

00:03:18,680 --> 00:03:23,360
trellard.gov

00:03:20,239 --> 00:03:25,760
and just um a disclaimer

00:03:23,360 --> 00:03:27,599
my dog loves barking while i'm giving

00:03:25,760 --> 00:03:30,799
talks i always try to distract her

00:03:27,599 --> 00:03:32,959
with toys but i don't think it works and

00:03:30,799 --> 00:03:34,000
this is that little creature for those

00:03:32,959 --> 00:03:36,720
of you that are

00:03:34,000 --> 00:03:36,720
dog people

00:03:37,760 --> 00:03:42,400
these slides are all released by with

00:03:41,040 --> 00:03:45,360
assisi by license

00:03:42,400 --> 00:03:47,280
so that means that you are free to mix

00:03:45,360 --> 00:03:50,239
remix reuse and share

00:03:47,280 --> 00:03:51,040
and you'll be able to find them at this

00:03:50,239 --> 00:03:52,799
url

00:03:51,040 --> 00:03:54,239
you can download them or check them

00:03:52,799 --> 00:03:56,799
online

00:03:54,239 --> 00:03:57,439
so let's move on into the introduction

00:03:56,799 --> 00:04:00,720
section

00:03:57,439 --> 00:04:03,920
of this presentation

00:04:00,720 --> 00:04:05,760
and i specifically said that this

00:04:03,920 --> 00:04:08,159
presentation is going to be focusing on

00:04:05,760 --> 00:04:12,080
integrating docker and python together

00:04:08,159 --> 00:04:12,480
but why private um to start with python

00:04:12,080 --> 00:04:14,640
is

00:04:12,480 --> 00:04:17,120
a programming language that has been

00:04:14,640 --> 00:04:18,160
gaining popularity for years and years

00:04:17,120 --> 00:04:21,840
and years

00:04:18,160 --> 00:04:25,360
and i like this graph from the octobers

00:04:21,840 --> 00:04:28,639
it's like 2019 and you can see that this

00:04:25,360 --> 00:04:30,960
python has just been growing steadily

00:04:28,639 --> 00:04:31,840
over the last few years now python is

00:04:30,960 --> 00:04:35,440
the second

00:04:31,840 --> 00:04:39,840
most popular programming language

00:04:35,440 --> 00:04:42,960
and when we dive a bit deeper into

00:04:39,840 --> 00:04:46,000
what people are using python for we

00:04:42,960 --> 00:04:48,160
see a massive growth in all

00:04:46,000 --> 00:04:49,600
things that are data science data

00:04:48,160 --> 00:04:52,160
analysis

00:04:49,600 --> 00:04:53,360
machine learning and deep learning and a

00:04:52,160 --> 00:04:57,040
very good indicator

00:04:53,360 --> 00:04:58,720
of this is increased numbers

00:04:57,040 --> 00:05:01,360
of different health books that you are

00:04:58,720 --> 00:05:05,280
seeing now everywhere whether it is

00:05:01,360 --> 00:05:08,479
github kid lab and now a lot of

00:05:05,280 --> 00:05:11,440
publishers for machine learning or

00:05:08,479 --> 00:05:11,840
science in general open science and also

00:05:11,440 --> 00:05:14,639
allow

00:05:11,840 --> 00:05:18,080
folks to provide their code and jupiter

00:05:14,639 --> 00:05:21,600
notebooks to supplement their research

00:05:18,080 --> 00:05:24,000
and this this has been um

00:05:21,600 --> 00:05:25,120
a continuous trend or like rather an

00:05:24,000 --> 00:05:28,320
exponential trend

00:05:25,120 --> 00:05:29,919
over the last few years and

00:05:28,320 --> 00:05:33,680
every year the python software

00:05:29,919 --> 00:05:36,800
foundation runs this

00:05:33,680 --> 00:05:38,160
python community survey to better

00:05:36,800 --> 00:05:40,800
understand how

00:05:38,160 --> 00:05:41,199
folks are using python what tools they

00:05:40,800 --> 00:05:43,919
use

00:05:41,199 --> 00:05:45,919
with it and how like just to get a

00:05:43,919 --> 00:05:47,440
picture of the community and the whole

00:05:45,919 --> 00:05:51,039
programming language

00:05:47,440 --> 00:05:55,280
uh as a whole um within

00:05:51,039 --> 00:05:57,759
last years it is 2019 the 2020 survey

00:05:55,280 --> 00:06:00,560
is taking place right now so if you use

00:05:57,759 --> 00:06:04,240
python i recommend you go and fill it in

00:06:00,560 --> 00:06:06,160
um but within the last uh survey we can

00:06:04,240 --> 00:06:07,039
see that data analysis and machine

00:06:06,160 --> 00:06:11,280
learning

00:06:07,039 --> 00:06:13,360
are within the top three uses for python

00:06:11,280 --> 00:06:15,039
to have data analysis first machine

00:06:13,360 --> 00:06:16,639
learning and third and then we have

00:06:15,039 --> 00:06:21,120
different other reuse

00:06:16,639 --> 00:06:23,600
uses um this python is such a versatile

00:06:21,120 --> 00:06:25,360
programming language and it's very very

00:06:23,600 --> 00:06:27,759
easy to use i absolutely

00:06:25,360 --> 00:06:29,680
absolutely love it because you can use

00:06:27,759 --> 00:06:32,639
it for a variety of things

00:06:29,680 --> 00:06:34,160
and nothing that is both a blessing that

00:06:32,639 --> 00:06:36,160
occurs because also

00:06:34,160 --> 00:06:37,360
a lot of the problems that we face

00:06:36,160 --> 00:06:40,400
within

00:06:37,360 --> 00:06:42,560
managing reproducible or deterministic

00:06:40,400 --> 00:06:44,479
environments within

00:06:42,560 --> 00:06:45,759
the data science community or data

00:06:44,479 --> 00:06:48,880
science context

00:06:45,759 --> 00:06:51,919
derive from this

00:06:48,880 --> 00:06:55,280
and it is no surprise that

00:06:51,919 --> 00:06:55,919
um we have a lot of issues when it comes

00:06:55,280 --> 00:06:57,919
to

00:06:55,919 --> 00:07:01,280
to managing our dependencies managing

00:06:57,919 --> 00:07:04,479
our environments our all of our installs

00:07:01,280 --> 00:07:07,759
um it is there

00:07:04,479 --> 00:07:08,800
is this xkcd comic uh the pretty much

00:07:07,759 --> 00:07:12,400
reflects

00:07:08,800 --> 00:07:16,000
um the state of a lot of our

00:07:12,400 --> 00:07:19,360
um installs so

00:07:16,000 --> 00:07:20,400
there is now one single canonical way to

00:07:19,360 --> 00:07:23,520
install

00:07:20,400 --> 00:07:24,240
python packages or libraries and there

00:07:23,520 --> 00:07:27,840
is not

00:07:24,240 --> 00:07:29,599
one single or economical way either

00:07:27,840 --> 00:07:32,240
to manage your environments or your

00:07:29,599 --> 00:07:32,240
dependencies

00:07:33,919 --> 00:07:40,000
so if we if we dive a bit deeper into

00:07:37,520 --> 00:07:41,919
this whole installation in rabbit hole

00:07:40,000 --> 00:07:42,479
and i'm not planning to do it because

00:07:41,919 --> 00:07:45,120
that is a

00:07:42,479 --> 00:07:46,400
whole different presentation and a whole

00:07:45,120 --> 00:07:49,680
different

00:07:46,400 --> 00:07:53,280
topic on itself also from

00:07:49,680 --> 00:07:55,039
the psf um survey we see that a lot of

00:07:53,280 --> 00:07:57,680
folks use

00:07:55,039 --> 00:07:59,919
the os provided python whether they're

00:07:57,680 --> 00:08:02,479
using it on windows linux

00:07:59,919 --> 00:08:03,360
uh or mac os they're using things like

00:08:02,479 --> 00:08:06,639
apt-get

00:08:03,360 --> 00:08:09,680
gym homebrew and some a folks rick

00:08:06,639 --> 00:08:13,360
installer from python they use anaconda

00:08:09,680 --> 00:08:16,400
or or they use docker containers

00:08:13,360 --> 00:08:19,199
um i particularly like

00:08:16,400 --> 00:08:20,240
the bottom optionary where it says well

00:08:19,199 --> 00:08:23,520
i just simply don't

00:08:20,240 --> 00:08:25,199
update my python version um because

00:08:23,520 --> 00:08:26,479
probably some folks don't even bother

00:08:25,199 --> 00:08:28,479
about updating and

00:08:26,479 --> 00:08:31,360
that is a massive problem especially now

00:08:28,479 --> 00:08:34,159
that python 2.7 has been

00:08:31,360 --> 00:08:35,440
completely uh basically what has been

00:08:34,159 --> 00:08:37,039
killed and

00:08:35,440 --> 00:08:41,360
people have all the products have to

00:08:37,039 --> 00:08:44,240
migrate to python 3.

00:08:41,360 --> 00:08:46,480
um now if we look a bit more into the

00:08:44,240 --> 00:08:47,839
machine learning or the scientific

00:08:46,480 --> 00:08:51,360
python ecosystem

00:08:47,839 --> 00:08:53,519
uh it's very very vast again

00:08:51,360 --> 00:08:55,360
it follows the tradition of python that

00:08:53,519 --> 00:08:58,480
is a very versatile

00:08:55,360 --> 00:08:59,440
programming language and so is a

00:08:58,480 --> 00:09:02,560
scientific

00:08:59,440 --> 00:09:02,560
python ecosystem

00:09:02,640 --> 00:09:09,279
some of the most commonly or most

00:09:05,760 --> 00:09:12,959
used scientific python libraries are

00:09:09,279 --> 00:09:17,360
numpy pandas map live tensorflow

00:09:12,959 --> 00:09:19,519
and numpa is basically this

00:09:17,360 --> 00:09:20,640
library or this package that holds

00:09:19,519 --> 00:09:23,920
together

00:09:20,640 --> 00:09:25,040
a lot of the other entire and all of the

00:09:23,920 --> 00:09:27,040
entire

00:09:25,040 --> 00:09:28,480
python scientific ecosystem and this is

00:09:27,040 --> 00:09:31,600
because numpy

00:09:28,480 --> 00:09:34,640
was basically tries to integrate

00:09:31,600 --> 00:09:36,320
the array data structure

00:09:34,640 --> 00:09:37,839
and allows us to do amazing things with

00:09:36,320 --> 00:09:41,600
tensors um

00:09:37,839 --> 00:09:44,800
in multiple well tensorous matrices

00:09:41,600 --> 00:09:47,519
across multiple dimensions um

00:09:44,800 --> 00:09:48,160
but if you go into the documentation for

00:09:47,519 --> 00:09:51,600
numpy

00:09:48,160 --> 00:09:52,560
or deep dive depth into its code you're

00:09:51,600 --> 00:09:56,240
gonna find

00:09:52,560 --> 00:09:59,279
that um numpy uses open blast

00:09:56,240 --> 00:10:02,720
and intel mkl and

00:09:59,279 --> 00:10:03,279
um this brings certain difficulties

00:10:02,720 --> 00:10:05,440
later

00:10:03,279 --> 00:10:06,800
when we're working with with other

00:10:05,440 --> 00:10:09,360
libraries

00:10:06,800 --> 00:10:10,399
it's great and but that's what it allows

00:10:09,360 --> 00:10:13,279
numpy

00:10:10,399 --> 00:10:15,920
to handle all of this complex data

00:10:13,279 --> 00:10:15,920
structures

00:10:16,079 --> 00:10:23,440
and since we have now

00:10:19,600 --> 00:10:25,360
learned that this environment management

00:10:23,440 --> 00:10:28,000
libraries management dependencies

00:10:25,360 --> 00:10:31,279
inversion can be a nightmare in python

00:10:28,000 --> 00:10:34,320
um folks do tend to go

00:10:31,279 --> 00:10:36,560
to different tools and alternatives to

00:10:34,320 --> 00:10:39,279
isolate their environment

00:10:36,560 --> 00:10:40,800
based on a pair of project basis based

00:10:39,279 --> 00:10:42,560
on

00:10:40,800 --> 00:10:43,839
the environment that they're working on

00:10:42,560 --> 00:10:46,160
whether it's their

00:10:43,839 --> 00:10:48,959
personal computer the cloud the

00:10:46,160 --> 00:10:52,240
production environment or staging

00:10:48,959 --> 00:10:55,360
the most popular is virtual amp but

00:10:52,240 --> 00:10:57,920
docker has been steadily gained momentum

00:10:55,360 --> 00:10:59,360
over the years so at least well for the

00:10:57,920 --> 00:11:01,600
last six years

00:10:59,360 --> 00:11:02,720
and the docker has been an option out

00:11:01,600 --> 00:11:05,200
there for

00:11:02,720 --> 00:11:07,920
everyone more and more folks are

00:11:05,200 --> 00:11:10,720
starting to use it

00:11:07,920 --> 00:11:11,200
and the reason why this happens is

00:11:10,720 --> 00:11:14,720
because

00:11:11,200 --> 00:11:17,519
docker basically allows you to

00:11:14,720 --> 00:11:19,200
create or develop deploy and run your

00:11:17,519 --> 00:11:22,560
applications

00:11:19,200 --> 00:11:24,320
using containers and throughout this

00:11:22,560 --> 00:11:25,120
presentation i'm going to use this

00:11:24,320 --> 00:11:28,720
little image

00:11:25,120 --> 00:11:31,440
to identify or signal when i'm talking

00:11:28,720 --> 00:11:31,440
about a container

00:11:32,399 --> 00:11:38,000
and the ultimate goal of containerizing

00:11:35,920 --> 00:11:39,279
your code or your application is to

00:11:38,000 --> 00:11:41,519
provide your solution

00:11:39,279 --> 00:11:43,600
on how to get your software from one

00:11:41,519 --> 00:11:46,000
environment into another

00:11:43,600 --> 00:11:48,079
so solving this issue is where you need

00:11:46,000 --> 00:11:48,959
to develop on your laptop you need to

00:11:48,079 --> 00:11:51,200
move on to

00:11:48,959 --> 00:11:52,240
a test staging or production environment

00:11:51,200 --> 00:11:53,839
or simply

00:11:52,240 --> 00:11:55,519
to share your project with your

00:11:53,839 --> 00:11:58,399
colleagues or with your

00:11:55,519 --> 00:12:00,000
or the rest of the company um is where

00:11:58,399 --> 00:12:02,880
containers allows

00:12:00,000 --> 00:12:06,160
you to have a more um a more

00:12:02,880 --> 00:12:10,320
reproducible environment

00:12:06,160 --> 00:12:12,240
is how many times have we had this

00:12:10,320 --> 00:12:14,959
problem where you're developing

00:12:12,240 --> 00:12:17,839
a piece of code or an app and then it

00:12:14,959 --> 00:12:22,079
turns out that it works on your laptop

00:12:17,839 --> 00:12:23,360
um but when you try and share with other

00:12:22,079 --> 00:12:26,399
folks within or

00:12:23,360 --> 00:12:27,120
outside your organization you end up

00:12:26,399 --> 00:12:29,760
having

00:12:27,120 --> 00:12:32,320
issues like this where a certain module

00:12:29,760 --> 00:12:36,160
or package is not

00:12:32,320 --> 00:12:37,680
available and if you just ship your

00:12:36,160 --> 00:12:41,040
application or your

00:12:37,680 --> 00:12:43,200
code by itself how are folks um

00:12:41,040 --> 00:12:45,920
meant to know what dependencies they

00:12:43,200 --> 00:12:48,320
need and that just falls into a bubble

00:12:45,920 --> 00:12:50,000
um what about different runtime

00:12:48,320 --> 00:12:51,760
environments what about

00:12:50,000 --> 00:12:55,360
those folks that are working on

00:12:51,760 --> 00:12:58,160
different linux distributions

00:12:55,360 --> 00:12:59,200
and even when working with things like

00:12:58,160 --> 00:13:03,200
virtualenv

00:12:59,200 --> 00:13:05,600
or anaconda or poetry or pipim

00:13:03,200 --> 00:13:07,279
there are commonly used tools in the

00:13:05,600 --> 00:13:10,320
python ecosystem

00:13:07,279 --> 00:13:13,160
we still have issues where

00:13:10,320 --> 00:13:15,519
um she seems to have sorted your

00:13:13,160 --> 00:13:19,600
installation your environment

00:13:15,519 --> 00:13:22,160
and you have imported errors

00:13:19,600 --> 00:13:24,639
and and packages like this this snippet

00:13:22,160 --> 00:13:26,320
that i have here is directly from the

00:13:24,639 --> 00:13:29,120
numpy library

00:13:26,320 --> 00:13:30,959
uh where where they actually walk you

00:13:29,120 --> 00:13:33,279
through and how you can solve these

00:13:30,959 --> 00:13:35,440
problems because it's so common

00:13:33,279 --> 00:13:37,200
so the principle on working with

00:13:35,440 --> 00:13:40,079
containers is that you're not only

00:13:37,200 --> 00:13:42,480
shipping your application but

00:13:40,079 --> 00:13:43,680
a lightweight standalone executable

00:13:42,480 --> 00:13:46,399
package

00:13:43,680 --> 00:13:47,600
that includes the libraries dependencies

00:13:46,399 --> 00:13:50,240
runtime environment

00:13:47,600 --> 00:13:51,279
and all the configuration files that you

00:13:50,240 --> 00:13:54,079
need

00:13:51,279 --> 00:13:56,639
to execute whatever is a durative um

00:13:54,079 --> 00:13:56,639
developing

00:13:57,040 --> 00:14:02,160
so diesel sounds like bliss right it

00:13:59,920 --> 00:14:05,600
sounds like a magical

00:14:02,160 --> 00:14:10,079
thing that helps with our problems

00:14:05,600 --> 00:14:13,040
and from development to production

00:14:10,079 --> 00:14:16,000
but are they really the one stop

00:14:13,040 --> 00:14:19,839
solution for all of these problems

00:14:16,000 --> 00:14:22,240
um i'm going to say maybe but there is

00:14:19,839 --> 00:14:23,440
still a lot of cultures there's still a

00:14:22,240 --> 00:14:25,279
lot of caveats

00:14:23,440 --> 00:14:26,959
there is still a lot of issues that you

00:14:25,279 --> 00:14:29,680
will encounter

00:14:26,959 --> 00:14:33,040
when working with docker especially for

00:14:29,680 --> 00:14:35,600
machine learning and data science

00:14:33,040 --> 00:14:36,240
so the good thing as i've mentioned

00:14:35,600 --> 00:14:39,040
before

00:14:36,240 --> 00:14:42,000
is that um it gives you a very good

00:14:39,040 --> 00:14:45,440
level of isolation all of the isolation

00:14:42,000 --> 00:14:46,560
happens at the app level as opposed to

00:14:45,440 --> 00:14:49,600
virtual machines

00:14:46,560 --> 00:14:50,959
where the abstractions happen more at a

00:14:49,600 --> 00:14:53,680
hardware level

00:14:50,959 --> 00:14:55,440
um and this allows you to have to not

00:14:53,680 --> 00:14:57,839
mess up with your local environment

00:14:55,440 --> 00:14:59,040
environment if you're working with

00:14:57,839 --> 00:15:00,880
different dependencies different

00:14:59,040 --> 00:15:02,639
versions of python different versions of

00:15:00,880 --> 00:15:05,199
libraries

00:15:02,639 --> 00:15:07,199
um and probably the best thing is that

00:15:05,199 --> 00:15:11,120
you can't and this is especially

00:15:07,199 --> 00:15:13,920
for production and for reproducibility

00:15:11,120 --> 00:15:14,800
it allows you to keep everything also

00:15:13,920 --> 00:15:17,279
your environment

00:15:14,800 --> 00:15:18,160
tagged and keep first control of the

00:15:17,279 --> 00:15:19,519
versions

00:15:18,160 --> 00:15:22,480
that you're also that you're using

00:15:19,519 --> 00:15:22,480
within your environment

00:15:22,800 --> 00:15:26,360
because all of the abstraction and the

00:15:25,199 --> 00:15:28,959
containerization

00:15:26,360 --> 00:15:29,920
containerization happens at the app

00:15:28,959 --> 00:15:31,839
level

00:15:29,920 --> 00:15:33,440
that means that you can have a docker

00:15:31,839 --> 00:15:36,560
image and spin

00:15:33,440 --> 00:15:36,880
multiple containers out of this to do

00:15:36,560 --> 00:15:39,120
the

00:15:36,880 --> 00:15:41,199
um through the development to mount

00:15:39,120 --> 00:15:43,600
different volumes

00:15:41,199 --> 00:15:46,000
without messing with the base docker

00:15:43,600 --> 00:15:46,000
image

00:15:46,560 --> 00:15:52,399
the path is unfortunately um

00:15:49,680 --> 00:15:54,160
docker has a very steep learning curve

00:15:52,399 --> 00:15:57,600
if you want to get into

00:15:54,160 --> 00:15:59,680
some of the most um advanced things that

00:15:57,600 --> 00:16:00,800
will allow you to really optimize your

00:15:59,680 --> 00:16:04,240
workflows

00:16:00,800 --> 00:16:06,800
and and also

00:16:04,240 --> 00:16:08,000
there are not many tutorials out there

00:16:06,800 --> 00:16:10,720
focused on ml or

00:16:08,000 --> 00:16:12,000
machine learning if you go and do a

00:16:10,720 --> 00:16:15,199
search on the internet

00:16:12,000 --> 00:16:17,680
for python and docker a lot of the

00:16:15,199 --> 00:16:20,839
tutorials or demos that are out there

00:16:17,680 --> 00:16:22,800
focus a lot on other applications for

00:16:20,839 --> 00:16:25,040
python

00:16:22,800 --> 00:16:26,880
now this becomes even a bit more

00:16:25,040 --> 00:16:30,399
complicated as you see

00:16:26,880 --> 00:16:31,920
that the python ecosystem the scientific

00:16:30,399 --> 00:16:35,600
python ecosystem is very

00:16:31,920 --> 00:16:38,720
very fast and it's built in a kind of

00:16:35,600 --> 00:16:41,920
onion structure it's layered and

00:16:38,720 --> 00:16:44,560
so let's say if you are struggling to

00:16:41,920 --> 00:16:45,519
get the base components like non-pisces

00:16:44,560 --> 00:16:48,480
python

00:16:45,519 --> 00:16:49,199
and python working you're going to have

00:16:48,480 --> 00:16:51,519
a lot of

00:16:49,199 --> 00:16:54,399
other issues with other libraries that

00:16:51,519 --> 00:16:58,320
are further down in the hierarchical

00:16:54,399 --> 00:16:59,839
structure and this becomes a bit more

00:16:58,320 --> 00:17:02,399
complicated because

00:16:59,839 --> 00:17:04,720
sometimes we need to to access gpu

00:17:02,399 --> 00:17:06,240
sometimes we only have access to cpus

00:17:04,720 --> 00:17:08,079
we're working across multiple

00:17:06,240 --> 00:17:12,079
architectures multiple

00:17:08,079 --> 00:17:15,600
operating systems python versions and

00:17:12,079 --> 00:17:18,480
diplomatics are also extremely familiar

00:17:15,600 --> 00:17:22,319
commonly used in machine learning and

00:17:18,480 --> 00:17:25,600
that brings another set of caveats

00:17:22,319 --> 00:17:28,880
we rely heavily on data visualization or

00:17:25,600 --> 00:17:32,000
on creating dashboards to

00:17:28,880 --> 00:17:34,880
share our insights with others and we

00:17:32,000 --> 00:17:36,160
also build apis to expose models

00:17:34,880 --> 00:17:38,960
sometimes

00:17:36,160 --> 00:17:39,600
um so if you think about all of the

00:17:38,960 --> 00:17:42,320
tools

00:17:39,600 --> 00:17:44,160
and all of the resources that a data

00:17:42,320 --> 00:17:46,080
scientist or a machine learner has to

00:17:44,160 --> 00:17:48,480
use at a given time

00:17:46,080 --> 00:17:51,039
these systems are can become very very

00:17:48,480 --> 00:17:51,039
complex

00:17:51,600 --> 00:17:59,200
so some of the most common pain points

00:17:54,799 --> 00:18:01,280
for us are we have a complex setup we

00:17:59,200 --> 00:18:04,640
have complex dependencies

00:18:01,280 --> 00:18:06,400
we might need access to gpus sometimes

00:18:04,640 --> 00:18:08,320
based on the kind of data that we're

00:18:06,400 --> 00:18:11,840
using the approaches that we're using we

00:18:08,320 --> 00:18:14,240
might need to parallelize code and i use

00:18:11,840 --> 00:18:18,080
high performance libraries like tasks

00:18:14,240 --> 00:18:21,200
for example we need to optimize our code

00:18:18,080 --> 00:18:22,960
also there is also a lot of folks still

00:18:21,200 --> 00:18:25,440
when you say machine learning they

00:18:22,960 --> 00:18:26,799
straight away think that the output is

00:18:25,440 --> 00:18:29,039
going to be a model

00:18:26,799 --> 00:18:30,960
and that is not always the case and even

00:18:29,039 --> 00:18:33,919
if it's a model that everything can be

00:18:30,960 --> 00:18:36,640
exposed as an api

00:18:33,919 --> 00:18:37,360
we have a very very big high reliance on

00:18:36,640 --> 00:18:40,480
data

00:18:37,360 --> 00:18:44,000
databases that is our

00:18:40,480 --> 00:18:47,679
base that is our prime um

00:18:44,000 --> 00:18:50,960
our our prime material for us to do

00:18:47,679 --> 00:18:54,480
our job also

00:18:50,960 --> 00:18:56,320
our projects evolve very very fast

00:18:54,480 --> 00:18:58,480
uh during the research and development

00:18:56,320 --> 00:19:00,000
process when we are trying different

00:18:58,480 --> 00:19:01,840
techniques when we are trying to

00:19:00,000 --> 00:19:05,280
optimize our models

00:19:01,840 --> 00:19:07,520
um based on certain accuracy measure

00:19:05,280 --> 00:19:11,280
measures that we care about

00:19:07,520 --> 00:19:13,120
and we also try a lot we also sometimes

00:19:11,280 --> 00:19:16,160
try a lot of libraries

00:19:13,120 --> 00:19:17,200
um during that r d so also being able to

00:19:16,160 --> 00:19:19,280
update

00:19:17,200 --> 00:19:23,280
uh those libraries add new libraries

00:19:19,280 --> 00:19:26,400
remove unused libraries is essential

00:19:23,280 --> 00:19:29,440
and again jogger is complex and

00:19:26,400 --> 00:19:30,559
there is some like for for many years

00:19:29,440 --> 00:19:33,840
folks have

00:19:30,559 --> 00:19:36,000
um seen the data scientists or machine

00:19:33,840 --> 00:19:37,200
learners as a unicorn that knows how to

00:19:36,000 --> 00:19:40,880
do everything

00:19:37,200 --> 00:19:41,760
and um there is a trend where a lot of

00:19:40,880 --> 00:19:44,000
folks are

00:19:41,760 --> 00:19:46,080
generalists and these folks are very

00:19:44,000 --> 00:19:47,520
very useful especially in end-to-end

00:19:46,080 --> 00:19:50,160
case scenarios

00:19:47,520 --> 00:19:50,799
but again it's very very hard to be to

00:19:50,160 --> 00:19:53,840
master

00:19:50,799 --> 00:19:53,840
every single tool

00:19:55,200 --> 00:19:59,200
and again depending on the kind of data

00:19:57,679 --> 00:20:02,320
that you're working on

00:19:59,200 --> 00:20:02,880
the the industry that you belong to you

00:20:02,320 --> 00:20:06,240
might have

00:20:02,880 --> 00:20:08,720
even concerns about um securing

00:20:06,240 --> 00:20:10,000
lifeless for your data or your model or

00:20:08,720 --> 00:20:13,120
your algorithm

00:20:10,000 --> 00:20:16,960
for example now that we are dealing with

00:20:13,120 --> 00:20:17,919
covet 19 and tracing a very important

00:20:16,960 --> 00:20:20,480
concern

00:20:17,919 --> 00:20:22,799
is how do you actually handle a data

00:20:20,480 --> 00:20:26,000
confidentiality how do you make sure

00:20:22,799 --> 00:20:29,200
that data is only used for

00:20:26,000 --> 00:20:31,280
the purpose that is collected and

00:20:29,200 --> 00:20:33,200
we don't have malicious intense or

00:20:31,280 --> 00:20:36,720
malicious

00:20:33,200 --> 00:20:36,720
consequences down the line

00:20:39,360 --> 00:20:45,120
so again we have although the whole

00:20:43,280 --> 00:20:47,919
python ecosystem has

00:20:45,120 --> 00:20:49,440
a big problem when it comes to

00:20:47,919 --> 00:20:52,240
environment managing

00:20:49,440 --> 00:20:53,600
and dependencies managing uh it gets a

00:20:52,240 --> 00:20:57,280
bit worse

00:20:53,600 --> 00:20:59,520
for machine learning it is a bit worse

00:20:57,280 --> 00:21:03,120
when you have to deal with

00:20:59,520 --> 00:21:06,400
a lot of numerical

00:21:03,120 --> 00:21:07,440
specific tools and there are many many

00:21:06,400 --> 00:21:09,679
many threads

00:21:07,440 --> 00:21:12,320
on the phone about the folks the work

00:21:09,679 --> 00:21:14,080
and in trying to solve these issues with

00:21:12,320 --> 00:21:17,679
conda for example

00:21:14,080 --> 00:21:21,200
um about this like when do we decide

00:21:17,679 --> 00:21:21,840
um or or how we can make this easier or

00:21:21,200 --> 00:21:24,640
faster

00:21:21,840 --> 00:21:27,520
and and work better for the whole

00:21:24,640 --> 00:21:27,520
ecosystem

00:21:27,600 --> 00:21:31,200
again i mentioned that a lot of

00:21:30,080 --> 00:21:34,080
tutorials out there

00:21:31,200 --> 00:21:36,559
are very focused on other applications

00:21:34,080 --> 00:21:39,039
of python for example web apps

00:21:36,559 --> 00:21:40,960
again in machine learning not every

00:21:39,039 --> 00:21:43,120
deliverable is enough

00:21:40,960 --> 00:21:44,799
we not always have something that folks

00:21:43,120 --> 00:21:49,360
can install for example

00:21:44,799 --> 00:21:52,320
like google maps or such

00:21:49,360 --> 00:21:54,320
and again not every deliverable out of

00:21:52,320 --> 00:21:56,400
machine learning projects is a model

00:21:54,320 --> 00:21:59,679
either

00:21:56,400 --> 00:22:01,760
we heavily rely on data and we see data

00:21:59,679 --> 00:22:04,960
from a very different perspective

00:22:01,760 --> 00:22:08,559
from folks to work on creating

00:22:04,960 --> 00:22:11,280
databases for for customers or for

00:22:08,559 --> 00:22:12,799
businesses and retail businesses for

00:22:11,280 --> 00:22:14,480
example

00:22:12,799 --> 00:22:16,080
the way we see data and the way we

00:22:14,480 --> 00:22:19,440
manipulate data is

00:22:16,080 --> 00:22:19,440
fundamentally different

00:22:19,760 --> 00:22:23,520
we have a mixture of wheels and compiled

00:22:22,400 --> 00:22:27,440
packages and

00:22:23,520 --> 00:22:30,480
the reason is that many of our libraries

00:22:27,440 --> 00:22:33,679
that work with arrays

00:22:30,480 --> 00:22:37,360
and complex data structures

00:22:33,679 --> 00:22:40,880
use fortran underneath usc

00:22:37,360 --> 00:22:43,679
um use python you see use fortran

00:22:40,880 --> 00:22:44,960
and this also happens in other program

00:22:43,679 --> 00:22:49,120
languages like r

00:22:44,960 --> 00:22:49,120
where some of the most popular

00:22:49,200 --> 00:22:53,120
scientific computing libraries also have

00:22:52,080 --> 00:22:55,840
underlying

00:22:53,120 --> 00:22:55,840
fortran code

00:22:56,240 --> 00:22:59,600
again depending on the kind of data that

00:22:58,080 --> 00:23:03,120
you work with depending

00:22:59,600 --> 00:23:05,600
on where your team is you have different

00:23:03,120 --> 00:23:08,480
security access levels for both

00:23:05,600 --> 00:23:09,520
data and software because you don't want

00:23:08,480 --> 00:23:12,240
bad agents

00:23:09,520 --> 00:23:15,520
access confidential or highly

00:23:12,240 --> 00:23:15,520
identifiable data

00:23:15,760 --> 00:23:21,039
because the subjects and the objects of

00:23:17,840 --> 00:23:24,960
machine learning applications

00:23:21,039 --> 00:23:28,960
can be humans and when you don't trade

00:23:24,960 --> 00:23:29,679
that human with enough security and

00:23:28,960 --> 00:23:33,440
privacy

00:23:29,679 --> 00:23:37,360
very very bad things can happen

00:23:33,440 --> 00:23:37,840
and it's very rare that to have context

00:23:37,360 --> 00:23:40,400
in which

00:23:37,840 --> 00:23:40,960
data scientists knows absolutely

00:23:40,400 --> 00:23:44,640
everything

00:23:40,960 --> 00:23:47,919
from the research and development to um

00:23:44,640 --> 00:23:48,480
the predict productizing the the results

00:23:47,919 --> 00:23:50,880
or whatever

00:23:48,480 --> 00:23:53,279
putting it into the world and doing

00:23:50,880 --> 00:23:54,960
monitoring doing devops it's very very

00:23:53,279 --> 00:23:55,760
hard to find a context where it is

00:23:54,960 --> 00:23:58,640
happening

00:23:55,760 --> 00:23:59,279
and we normally have a lot of folks

00:23:58,640 --> 00:24:02,559
working

00:23:59,279 --> 00:24:06,720
on the machine learning product

00:24:02,559 --> 00:24:10,400
um at a very different steps of

00:24:06,720 --> 00:24:10,400
of of the infrastructure

00:24:12,559 --> 00:24:18,720
and this is because um as i said before

00:24:15,679 --> 00:24:20,480
multiple times machine learning is more

00:24:18,720 --> 00:24:22,559
than a model it's more than just a code

00:24:20,480 --> 00:24:23,520
there are a lot of different things that

00:24:22,559 --> 00:24:27,360
play into

00:24:23,520 --> 00:24:29,360
into it but for us to be able to

00:24:27,360 --> 00:24:30,640
have reproducibility and this is very

00:24:29,360 --> 00:24:34,559
very important

00:24:30,640 --> 00:24:36,720
and also for transparency

00:24:34,559 --> 00:24:38,400
we have to remember that in data science

00:24:36,720 --> 00:24:41,120
or machine learning context

00:24:38,400 --> 00:24:43,760
if one of these three pillars whether

00:24:41,120 --> 00:24:47,520
data code or environment changes

00:24:43,760 --> 00:24:49,200
everything changes um actually i know

00:24:47,520 --> 00:24:51,120
that other folks that work in different

00:24:49,200 --> 00:24:54,640
areas of development will say well

00:24:51,120 --> 00:24:58,159
that is exactly the same for us

00:24:54,640 --> 00:25:01,440
um but our data

00:24:58,159 --> 00:25:04,720
and our code is so directly linked

00:25:01,440 --> 00:25:07,520
um that the reproducibility implications

00:25:04,720 --> 00:25:08,320
of not tracing either of these three

00:25:07,520 --> 00:25:12,400
pillars

00:25:08,320 --> 00:25:15,440
can be disastrous and this is why docker

00:25:12,400 --> 00:25:18,320
gives us a very very good opportunity

00:25:15,440 --> 00:25:19,360
and the way we we build docker in a book

00:25:18,320 --> 00:25:22,720
docker images

00:25:19,360 --> 00:25:23,200
is using a file called docker files

00:25:22,720 --> 00:25:25,200
where

00:25:23,200 --> 00:25:26,559
we are basically providing a set of

00:25:25,200 --> 00:25:29,360
instructions to

00:25:26,559 --> 00:25:31,120
install software to configuration past

00:25:29,360 --> 00:25:31,760
environment variables is very very

00:25:31,120 --> 00:25:34,480
similar

00:25:31,760 --> 00:25:35,200
to what you would do if you're using the

00:25:34,480 --> 00:25:38,799
shell

00:25:35,200 --> 00:25:38,799
shell scripting or bash

00:25:39,760 --> 00:25:44,960
i am showing an example of a docker file

00:25:42,720 --> 00:25:47,840
that you're going to find in a lot of

00:25:44,960 --> 00:25:49,840
tutorials out there in the wild

00:25:47,840 --> 00:25:52,799
and it's a bad example and i'm going to

00:25:49,840 --> 00:25:57,200
be telling you why it is a bad example

00:25:52,799 --> 00:26:00,320
um in the next slides

00:25:57,200 --> 00:26:01,600
but let's first understand every docker

00:26:00,320 --> 00:26:06,320
image

00:26:01,600 --> 00:26:06,320
diverts or builds on another

00:26:06,720 --> 00:26:10,000
another image basically this is what it

00:26:09,600 --> 00:26:12,720
tells

00:26:10,000 --> 00:26:14,080
you what will have as a fold whether

00:26:12,720 --> 00:26:17,360
it's based on

00:26:14,080 --> 00:26:20,480
a certain flavor of linux for example

00:26:17,360 --> 00:26:22,400
ubuntu based debian alpine then to

00:26:20,480 --> 00:26:24,240
provide a set of instructions that is

00:26:22,400 --> 00:26:26,320
actually going to install the different

00:26:24,240 --> 00:26:28,400
libraries dependencies configure

00:26:26,320 --> 00:26:30,240
your environment and you provide an

00:26:28,400 --> 00:26:31,520
entry command that is

00:26:30,240 --> 00:26:34,400
specifically what is going to be

00:26:31,520 --> 00:26:38,000
executed when your container

00:26:34,400 --> 00:26:41,200
is started

00:26:38,000 --> 00:26:42,400
another the important thing to keep here

00:26:41,200 --> 00:26:45,360
in mind is

00:26:42,400 --> 00:26:46,720
we have all of these instructions um but

00:26:45,360 --> 00:26:49,440
every time we provide an

00:26:46,720 --> 00:26:50,400
instruction to your docker under docker

00:26:49,440 --> 00:26:52,880
file

00:26:50,400 --> 00:26:53,440
it creates a layer and it's pretty much

00:26:52,880 --> 00:26:56,720
like

00:26:53,440 --> 00:26:58,960
an onion and where the base base image

00:26:56,720 --> 00:27:01,440
lies at its core and every instruction

00:26:58,960 --> 00:27:03,200
wraps around it so the more instructions

00:27:01,440 --> 00:27:05,520
you provide

00:27:03,200 --> 00:27:07,919
the bigger and more bloated your image

00:27:05,520 --> 00:27:07,919
is going to be

00:27:08,159 --> 00:27:13,200
there are no ways to remove those

00:27:10,640 --> 00:27:16,720
intermediate layers because

00:27:13,200 --> 00:27:21,840
they are fundamentally inside your

00:27:16,720 --> 00:27:24,640
docker image so keeping this in mind is

00:27:21,840 --> 00:27:26,799
going to be very very important because

00:27:24,640 --> 00:27:29,039
also one of the great tools or

00:27:26,799 --> 00:27:32,880
advantages that docker has

00:27:29,039 --> 00:27:35,120
is the ability to leverage its cache

00:27:32,880 --> 00:27:37,679
and for that we have to be very very

00:27:35,120 --> 00:27:39,840
smart on how we are

00:27:37,679 --> 00:27:41,279
passing this instructions how we're

00:27:39,840 --> 00:27:44,399
installing dependencies

00:27:41,279 --> 00:27:47,760
and the what the way we move things

00:27:44,399 --> 00:27:50,000
from our local environment onto the

00:27:47,760 --> 00:27:51,200
image and install things is going to

00:27:50,000 --> 00:27:53,679
have a very very high

00:27:51,200 --> 00:27:55,919
impact on how we're hitting this cache

00:27:53,679 --> 00:27:58,080
and how bloated our images are going to

00:27:55,919 --> 00:27:58,080
be

00:27:58,799 --> 00:28:02,240
and probably one of the most crucial

00:28:00,720 --> 00:28:05,279
things when it comes

00:28:02,240 --> 00:28:07,679
to creating your docker image is

00:28:05,279 --> 00:28:09,120
choosing the best base image

00:28:07,679 --> 00:28:10,720
i always recommend you if you're

00:28:09,120 --> 00:28:12,399
building from scratch if you're going to

00:28:10,720 --> 00:28:15,679
be able to a docker image from scratch

00:28:12,399 --> 00:28:18,640
always use the official python images

00:28:15,679 --> 00:28:20,000
if if we just look here at this this

00:28:18,640 --> 00:28:23,200
part and then

00:28:20,000 --> 00:28:26,240
uh in my image you're gonna see

00:28:23,200 --> 00:28:28,559
that these images

00:28:26,240 --> 00:28:30,159
have very very different sizes you're

00:28:28,559 --> 00:28:32,240
gonna a lot of people

00:28:30,159 --> 00:28:33,520
are gonna tell you to use alpine because

00:28:32,240 --> 00:28:36,240
it's very lightweight

00:28:33,520 --> 00:28:37,840
and it is significantly smaller than all

00:28:36,240 --> 00:28:40,559
of the other images

00:28:37,840 --> 00:28:41,840
but i'm gonna tell you the pain uh it's

00:28:40,559 --> 00:28:45,039
not worth it

00:28:41,840 --> 00:28:49,679
the reason why it's so slim is because

00:28:45,039 --> 00:28:51,919
a lot of stuff is missing

00:28:49,679 --> 00:28:52,799
and you're gonna spend a lot of time

00:28:51,919 --> 00:28:56,080
getting

00:28:52,799 --> 00:28:58,960
your environment ready to work

00:28:56,080 --> 00:28:59,760
i recommend using slim stretch slim

00:28:58,960 --> 00:29:03,279
buster

00:28:59,760 --> 00:29:05,279
um because that gives you a nice

00:29:03,279 --> 00:29:07,279
compromise between

00:29:05,279 --> 00:29:08,480
enough libraries enough work that you

00:29:07,279 --> 00:29:12,480
have to do

00:29:08,480 --> 00:29:14,000
and as it is now those are going to have

00:29:12,480 --> 00:29:16,480
very very long time

00:29:14,000 --> 00:29:17,520
support from linux so which means so

00:29:16,480 --> 00:29:18,399
that means that you're going to be

00:29:17,520 --> 00:29:21,039
having

00:29:18,399 --> 00:29:22,000
security patches and performance patches

00:29:21,039 --> 00:29:25,440
coming in

00:29:22,000 --> 00:29:25,440
and frequently

00:29:25,520 --> 00:29:30,640
if if you really don't need to build

00:29:28,320 --> 00:29:33,440
your image from scratch which is

00:29:30,640 --> 00:29:34,960
i'm going to say most of the case most

00:29:33,440 --> 00:29:38,240
of the case you don't have to build

00:29:34,960 --> 00:29:38,799
everything from a white canvas use the

00:29:38,240 --> 00:29:40,480
jupiter

00:29:38,799 --> 00:29:43,120
talker stacks if you're going to be

00:29:40,480 --> 00:29:45,600
using some of the most commonly

00:29:43,120 --> 00:29:46,640
used frameworks or scientific python

00:29:45,600 --> 00:29:49,360
libraries

00:29:46,640 --> 00:29:50,000
uh try using the jupiter docker stacks

00:29:49,360 --> 00:29:52,960
because

00:29:50,000 --> 00:29:54,640
um i don't know i lost i lost sound on

00:29:52,960 --> 00:29:57,120
all of uh

00:29:54,640 --> 00:29:58,640
things cool yeah i couldn't hear

00:29:57,120 --> 00:30:02,240
anything on either side

00:29:58,640 --> 00:30:02,799
um fab so i don't know how much you

00:30:02,240 --> 00:30:05,919
missed of

00:30:02,799 --> 00:30:08,080
that it was probably the last two the

00:30:05,919 --> 00:30:11,279
last two slides

00:30:08,080 --> 00:30:12,480
but i was saying one i think it's it's

00:30:11,279 --> 00:30:15,679
easy to follow from those

00:30:12,480 --> 00:30:19,919
slides be very smart about your cash

00:30:15,679 --> 00:30:22,559
um make sure that your

00:30:19,919 --> 00:30:23,279
butt mounts that that you're not moving

00:30:22,559 --> 00:30:27,600
your data

00:30:23,279 --> 00:30:30,320
onto your container but also um

00:30:27,600 --> 00:30:32,399
make the most of binding mounts to your

00:30:30,320 --> 00:30:34,000
directories if you want to

00:30:32,399 --> 00:30:36,159
if you need to access data from your

00:30:34,000 --> 00:30:39,360
container you can do that

00:30:36,159 --> 00:30:42,200
without having to move it over and

00:30:39,360 --> 00:30:43,679
again always make sure that you have a

00:30:42,200 --> 00:30:46,960
non-reducer

00:30:43,679 --> 00:30:48,559
one of the um good and bad things of

00:30:46,960 --> 00:30:51,760
docker

00:30:48,559 --> 00:30:54,720
is that um by default

00:30:51,760 --> 00:30:56,240
you are a super user and this is so that

00:30:54,720 --> 00:30:58,240
you can install

00:30:56,240 --> 00:30:59,600
system libraries using things like

00:30:58,240 --> 00:31:02,799
apt-get

00:30:59,600 --> 00:31:03,120
um but this is not what you want when

00:31:02,799 --> 00:31:05,600
you

00:31:03,120 --> 00:31:07,279
working in a production environment or

00:31:05,600 --> 00:31:09,600
working with data so always make sure

00:31:07,279 --> 00:31:12,880
that you have a non-invert user

00:31:09,600 --> 00:31:16,240
to do all of your

00:31:12,880 --> 00:31:19,039
all of your stuff and

00:31:16,240 --> 00:31:19,919
advanced technique is using multi-stage

00:31:19,039 --> 00:31:22,960
builds

00:31:19,919 --> 00:31:23,760
and i normally use this when i have a

00:31:22,960 --> 00:31:27,760
mixture

00:31:23,760 --> 00:31:30,159
of wheels and compile from source

00:31:27,760 --> 00:31:32,080
libraries in the scientific python

00:31:30,159 --> 00:31:37,279
ecosystem

00:31:32,080 --> 00:31:37,279
and i normally split it into um

00:31:38,000 --> 00:31:41,200
into two images one that is going to

00:31:40,640 --> 00:31:44,799
have

00:31:41,200 --> 00:31:46,480
my compiled libraries and then the other

00:31:44,799 --> 00:31:50,320
one that is gonna have

00:31:46,480 --> 00:31:53,039
um everything that i need to run my code

00:31:50,320 --> 00:31:55,360
and this means that in general and my

00:31:53,039 --> 00:31:58,240
images are gonna be small but also

00:31:55,360 --> 00:31:59,279
docker is gonna be faster when it comes

00:31:58,240 --> 00:32:03,760
to

00:31:59,279 --> 00:32:03,760
building my bill and my images

00:32:05,039 --> 00:32:08,960
so basically from this docker file that

00:32:07,679 --> 00:32:10,799
i have on screen

00:32:08,960 --> 00:32:12,399
i would use the same command that i

00:32:10,799 --> 00:32:15,600
normally use to

00:32:12,399 --> 00:32:17,120
to build my image uh with the difference

00:32:15,600 --> 00:32:18,399
at first it's going to create this

00:32:17,120 --> 00:32:21,919
compiled image

00:32:18,399 --> 00:32:24,799
compile all of my dependencies

00:32:21,919 --> 00:32:25,440
and then move or copy the virtual

00:32:24,799 --> 00:32:28,640
environment

00:32:25,440 --> 00:32:30,399
into my final virtual and my final

00:32:28,640 --> 00:32:33,039
docker image which is my runtime

00:32:30,399 --> 00:32:34,399
image but it's not going to be named

00:32:33,039 --> 00:32:39,440
like so

00:32:34,399 --> 00:32:39,440
um the image is going to be tagged as

00:32:40,080 --> 00:32:45,760
with the the docker tag that i specified

00:32:43,760 --> 00:32:46,880
and this is a very very useful

00:32:45,760 --> 00:32:50,080
especially

00:32:46,880 --> 00:32:52,720
if you need to to use um

00:32:50,080 --> 00:32:54,840
geofortron or gcc for any of the

00:32:52,720 --> 00:32:57,840
libraries that you're installing at any

00:32:54,840 --> 00:33:00,880
point

00:32:57,840 --> 00:33:01,600
again i've mentioned some things that

00:33:00,880 --> 00:33:04,000
you can do

00:33:01,600 --> 00:33:05,130
to optimize your images and make them a

00:33:04,000 --> 00:33:06,640
bit more ready for

00:33:05,130 --> 00:33:09,679
[Music]

00:33:06,640 --> 00:33:12,000
machine learning but uh

00:33:09,679 --> 00:33:13,840
don't for invent well again if you don't

00:33:12,000 --> 00:33:17,440
need to build everything from scratch

00:33:13,840 --> 00:33:19,840
use the jupiter. defaults are amazing

00:33:17,440 --> 00:33:20,720
but there are also tools like repo to

00:33:19,840 --> 00:33:23,360
docker

00:33:20,720 --> 00:33:25,360
um that if you already have your content

00:33:23,360 --> 00:33:26,480
environment file or your requirement

00:33:25,360 --> 00:33:30,080
text or your

00:33:26,480 --> 00:33:30,320
ppm file and are you working with dulia

00:33:30,080 --> 00:33:33,760
or

00:33:30,320 --> 00:33:35,519
our i think you can have other

00:33:33,760 --> 00:33:37,360
languages i can't remember but if you

00:33:35,519 --> 00:33:40,480
already have those

00:33:37,360 --> 00:33:43,760
files or configurations for

00:33:40,480 --> 00:33:45,120
your runtime environments it makes it

00:33:43,760 --> 00:33:48,720
very easy to create

00:33:45,120 --> 00:33:50,559
a readily usable docker container

00:33:48,720 --> 00:33:52,640
out of it and you don't have to worry

00:33:50,559 --> 00:33:55,039
about the docker file you don't have to

00:33:52,640 --> 00:33:58,000
worry about

00:33:55,039 --> 00:33:59,120
doing multi-stage builds or making sure

00:33:58,000 --> 00:34:02,480
that you're not a

00:33:59,120 --> 00:34:02,960
root user repo to docker dose all of

00:34:02,480 --> 00:34:07,200
this

00:34:02,960 --> 00:34:10,079
for you and it's amazing

00:34:07,200 --> 00:34:11,280
again if you are continuously using

00:34:10,079 --> 00:34:13,520
docker images

00:34:11,280 --> 00:34:14,960
and or containers and you're using it

00:34:13,520 --> 00:34:18,839
all the time

00:34:14,960 --> 00:34:20,079
i always recommend building your images

00:34:18,839 --> 00:34:22,159
frequently

00:34:20,079 --> 00:34:23,599
but nobody wants to do this manually

00:34:22,159 --> 00:34:26,480
nobody wants to say

00:34:23,599 --> 00:34:28,480
to kind of remember to update everything

00:34:26,480 --> 00:34:30,480
or upgrade every month

00:34:28,480 --> 00:34:31,599
um so delegate to your continuous

00:34:30,480 --> 00:34:33,599
integration tool

00:34:31,599 --> 00:34:36,079
that way you only have to do it once if

00:34:33,599 --> 00:34:39,359
you need them to upgrade for example

00:34:36,079 --> 00:34:41,359
um every sunday or

00:34:39,359 --> 00:34:43,040
build and target a new image every

00:34:41,359 --> 00:34:46,960
sunday at two o'clock in the morning

00:34:43,040 --> 00:34:49,359
uh you can do that and make sure that

00:34:46,960 --> 00:34:50,800
that doesn't have to be a manual process

00:34:49,359 --> 00:34:52,879
but i'll give enough

00:34:50,800 --> 00:34:55,280
context with the labels that i met that

00:34:52,879 --> 00:34:57,520
i've mentioned before so that folks know

00:34:55,280 --> 00:34:59,920
who is still responsible if anything

00:34:57,520 --> 00:35:03,520
breaks down the line

00:34:59,920 --> 00:35:05,839
so this workflow will will blend in

00:35:03,520 --> 00:35:06,800
with other existing workflows for

00:35:05,839 --> 00:35:08,560
example where

00:35:06,800 --> 00:35:09,839
you're already using version control for

00:35:08,560 --> 00:35:11,839
your code

00:35:09,839 --> 00:35:12,960
so when you create a new tag of your

00:35:11,839 --> 00:35:16,079
product or your

00:35:12,960 --> 00:35:19,839
application then that

00:35:16,079 --> 00:35:21,520
also can uh trigger the continuous

00:35:19,839 --> 00:35:23,599
integration for your docker images but

00:35:21,520 --> 00:35:25,040
again if you need to schedule a trigger

00:35:23,599 --> 00:35:27,599
as i said every monday eight o'clock in

00:35:25,040 --> 00:35:30,240
the morning because i don't know why

00:35:27,599 --> 00:35:32,800
you can also do that so then your image

00:35:30,240 --> 00:35:35,119
is going to be built

00:35:32,800 --> 00:35:36,640
based on automatically will be tagged

00:35:35,119 --> 00:35:39,680
and then you can pull

00:35:36,640 --> 00:35:43,119
you can deploy you can ship your code um

00:35:39,680 --> 00:35:45,760
pretty much seamlessly and these

00:35:43,119 --> 00:35:46,560
uh this integrates with all all of the

00:35:45,760 --> 00:35:50,720
envelopes

00:35:46,560 --> 00:35:53,760
or data obs practices

00:35:50,720 --> 00:35:54,320
so just to finish off um i'm gonna give

00:35:53,760 --> 00:35:59,839
you

00:35:54,320 --> 00:35:59,839
my top tips

00:36:00,800 --> 00:36:07,200
uh my top tips which is

00:36:05,200 --> 00:36:08,800
rebuild your images frequently if you

00:36:07,200 --> 00:36:10,880
are using them

00:36:08,800 --> 00:36:12,320
on a regular basis make sure that you're

00:36:10,880 --> 00:36:14,560
rebuilding them

00:36:12,320 --> 00:36:16,800
so you can also get not all not only

00:36:14,560 --> 00:36:18,560
upgrade the libraries as you upgrade

00:36:16,800 --> 00:36:21,359
locally but also you get security

00:36:18,560 --> 00:36:24,240
updates for system packages

00:36:21,359 --> 00:36:25,839
never work is read minimize privileges

00:36:24,240 --> 00:36:27,680
you always want to minimize the

00:36:25,839 --> 00:36:29,440
privileges especially when it comes to

00:36:27,680 --> 00:36:30,560
network access if you're working with

00:36:29,440 --> 00:36:34,240
highly

00:36:30,560 --> 00:36:34,800
sensitive data don't don't use alpine

00:36:34,240 --> 00:36:39,359
linux

00:36:34,800 --> 00:36:41,520
don't use the alpine docker-based image

00:36:39,359 --> 00:36:42,480
always know what you're expecting pin

00:36:41,520 --> 00:36:45,920
absolutely

00:36:42,480 --> 00:36:49,359
everything um use docker

00:36:45,920 --> 00:36:51,520
in conjunction with uh other tools like

00:36:49,359 --> 00:36:53,520
pip tools conduct poetry or pipim

00:36:51,520 --> 00:36:55,119
to always know what what you're

00:36:53,520 --> 00:36:59,280
expecting

00:36:55,119 --> 00:37:01,440
leverage the build cache one docker file

00:36:59,280 --> 00:37:03,359
one project sometimes we feel the need

00:37:01,440 --> 00:37:05,119
to create a massive docker file that

00:37:03,359 --> 00:37:06,720
will have all of the dependencies and

00:37:05,119 --> 00:37:09,599
everything that we might ever need in

00:37:06,720 --> 00:37:12,560
any of our projects

00:37:09,599 --> 00:37:14,240
no use one docker file per project that

00:37:12,560 --> 00:37:15,359
also allows you to have a very good

00:37:14,240 --> 00:37:17,440
granularity

00:37:15,359 --> 00:37:20,720
on environment variables especially when

00:37:17,440 --> 00:37:20,720
you want to deploy things

00:37:21,760 --> 00:37:24,960
if you have very complex setups or

00:37:24,160 --> 00:37:27,440
dependencies

00:37:24,960 --> 00:37:29,200
if you need to compile code if your

00:37:27,440 --> 00:37:31,359
image is very bloated

00:37:29,200 --> 00:37:36,960
if you are moving into more complex uh

00:37:31,359 --> 00:37:39,119
docker workflows use multi-stage builds

00:37:36,960 --> 00:37:40,079
make your images identifiable and this

00:37:39,119 --> 00:37:43,760
is a practice

00:37:40,079 --> 00:37:46,800
that um i took a few years ago

00:37:43,760 --> 00:37:49,359
and it makes a huge difference not only

00:37:46,800 --> 00:37:50,160
make sure that you are tagging with um

00:37:49,359 --> 00:37:52,800
whatever

00:37:50,160 --> 00:37:54,000
version of the docker image but also if

00:37:52,800 --> 00:37:57,680
you talk with

00:37:54,000 --> 00:38:01,119
um let's say if it's based on buster

00:37:57,680 --> 00:38:04,400
uh provide context there um and

00:38:01,119 --> 00:38:06,880
if it's ready for test or production

00:38:04,400 --> 00:38:08,560
as well add labels make sure that you

00:38:06,880 --> 00:38:10,320
are using appropriate

00:38:08,560 --> 00:38:12,000
environment and build variables so you

00:38:10,320 --> 00:38:15,040
can differentiate

00:38:12,000 --> 00:38:18,079
um the environment in which that is

00:38:15,040 --> 00:38:20,800
being used

00:38:18,079 --> 00:38:21,920
did not reinvent well again if you don't

00:38:20,800 --> 00:38:25,119
need

00:38:21,920 --> 00:38:26,079
a very fine green tune docker images and

00:38:25,119 --> 00:38:30,640
setups

00:38:26,079 --> 00:38:30,640
use repo to docker or the jupiter stack

00:38:30,839 --> 00:38:37,359
automate um automate as much as possible

00:38:34,160 --> 00:38:38,960
once you have a a setup that works for

00:38:37,359 --> 00:38:41,520
you

00:38:38,960 --> 00:38:44,400
delegate to whatever your continuous

00:38:41,520 --> 00:38:48,320
integration and delivery tool is

00:38:44,400 --> 00:38:50,480
and usel enter most ides

00:38:48,320 --> 00:38:51,839
will allow you to use a linter for

00:38:50,480 --> 00:38:55,040
docker

00:38:51,839 --> 00:39:00,640
i can tell you how many times having a

00:38:55,040 --> 00:39:03,680
lender has actually saved my life

00:39:00,640 --> 00:39:06,720
so thank you very much i am sorry

00:39:03,680 --> 00:39:09,200
for the loss of um

00:39:06,720 --> 00:39:10,240
sound for a couple of slides i i lost it

00:39:09,200 --> 00:39:13,280
both ways

00:39:10,240 --> 00:39:17,440
but thank you very much i think we have

00:39:13,280 --> 00:39:20,320
um time for questions or so

00:39:17,440 --> 00:39:20,320
maybe four minutes

00:39:24,640 --> 00:39:29,839
i think you have a question in the q and

00:39:26,839 --> 00:39:29,839
a

00:39:31,839 --> 00:39:34,320
i still

00:39:36,160 --> 00:39:42,560
cannot hear can you hear me now

00:39:40,320 --> 00:39:46,400
oh i can hear you now yes yeah i was

00:39:42,560 --> 00:39:49,520
saying you have a question in q a

00:39:46,400 --> 00:39:51,280
yes i have a question is

00:39:49,520 --> 00:39:53,760
how should machine learning developers

00:39:51,280 --> 00:39:55,760
approach topics like ci and cd and the

00:39:53,760 --> 00:39:57,599
difference between development staging

00:39:55,760 --> 00:40:00,720
and production environments

00:39:57,599 --> 00:40:02,320
i touched a bit on that on the under

00:40:00,720 --> 00:40:04,319
presentation

00:40:02,320 --> 00:40:06,160
so sometimes we need different

00:40:04,319 --> 00:40:08,079
environment variables to be able to

00:40:06,160 --> 00:40:09,520
access to different databases or

00:40:08,079 --> 00:40:12,960
different environments

00:40:09,520 --> 00:40:16,000
make sure that you are using that within

00:40:12,960 --> 00:40:18,880
your docker images

00:40:16,000 --> 00:40:20,400
when it comes to continuous integration

00:40:18,880 --> 00:40:24,000
and continuous delivery

00:40:20,400 --> 00:40:27,280
there is you can use devops principles

00:40:24,000 --> 00:40:30,000
for machine learning and envelopes and

00:40:27,280 --> 00:40:30,720
as much as you can automate for for

00:40:30,000 --> 00:40:34,800
deployment

00:40:30,720 --> 00:40:35,760
tagging testing those are always going

00:40:34,800 --> 00:40:38,079
to be worth it

00:40:35,760 --> 00:40:39,760
in the long run when you need to deploy

00:40:38,079 --> 00:40:44,720
stuff or put anything

00:40:39,760 --> 00:40:44,720
in production um

00:40:44,880 --> 00:40:50,319
oh yes

00:40:48,079 --> 00:40:52,480
oh that's tricky and if your development

00:40:50,319 --> 00:40:55,520
does not have gpu but production

00:40:52,480 --> 00:40:57,440
always does have gpu

00:40:55,520 --> 00:40:58,720
you're gonna still need to have access

00:40:57,440 --> 00:41:02,400
to to

00:40:58,720 --> 00:41:04,319
a gpu and if you're using

00:41:02,400 --> 00:41:06,880
for example things like tensorflow i

00:41:04,319 --> 00:41:10,319
recommend you go and check

00:41:06,880 --> 00:41:12,079
their docker images they have

00:41:10,319 --> 00:41:14,480
different architectures and different

00:41:12,079 --> 00:41:16,400
gpus um

00:41:14,480 --> 00:41:18,319
i can't remember it it should be in

00:41:16,400 --> 00:41:21,440
tensorflow darker

00:41:18,319 --> 00:41:24,240
images or docker samples have a look and

00:41:21,440 --> 00:41:27,200
how they approach that

00:41:24,240 --> 00:41:29,280
and i think and i just have one last one

00:41:27,200 --> 00:41:31,440
that is recommended mechanical keyboards

00:41:29,280 --> 00:41:32,800
any keywords it depends on you that's

00:41:31,440 --> 00:41:35,359
another rabbit hole

00:41:32,800 --> 00:41:36,000
but i'll i'm always happy to talk about

00:41:35,359 --> 00:41:39,440
that

00:41:36,000 --> 00:41:43,200
um thank you very much everyone i

00:41:39,440 --> 00:41:44,720
hope you enjoyed this presentation i

00:41:43,200 --> 00:41:47,440
hope you enjoyed the talk

00:41:44,720 --> 00:41:48,160
and thank you all thanks open for having

00:41:47,440 --> 00:41:56,720
me

00:41:48,160 --> 00:41:56,720

YouTube URL: https://www.youtube.com/watch?v=X6a_-mb5AKg


