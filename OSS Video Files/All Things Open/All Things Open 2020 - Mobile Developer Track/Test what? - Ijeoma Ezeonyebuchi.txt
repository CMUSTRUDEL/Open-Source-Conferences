Title: Test what? - Ijeoma Ezeonyebuchi
Publication date: 2020-12-16
Playlist: All Things Open 2020 - Mobile Developer Track
Description: 
	Presented by: Ijeoma Ezeonyebuchi, NPR
Presented at All Things Open 2020 - Mobile Developer Track

Abstract: How will we know it works? Just test it? Test what? it?

When working in tech it's common to hear  that "we should test things", "we don't want bugs", and ever more common "just automate it". Though what is "it"? How does one decide what is worth testing and what is not and what conditions to test under. In this talk we'll walk through what makes a good test and how to determine what is worth testing to drive value and achieve the high quality software we all aim to deliver. 

Whether you're a product manager, developer, qa/test engineer this talk is for you.
Captions: 
	00:00:04,960 --> 00:00:07,919
thanks everyone for joining

00:00:06,160 --> 00:00:09,200
i will reference and say this is my

00:00:07,919 --> 00:00:12,080
first um

00:00:09,200 --> 00:00:12,480
conference i'm doing virtually so i i

00:00:12,080 --> 00:00:14,320
think

00:00:12,480 --> 00:00:16,880
i hope i do okay but if i don't or you

00:00:14,320 --> 00:00:19,279
can't hear me anytime of course i'm

00:00:16,880 --> 00:00:20,000
i have a i'm watching the chat window so

00:00:19,279 --> 00:00:22,640
you know ask

00:00:20,000 --> 00:00:25,279
questions um and i'll kind of like

00:00:22,640 --> 00:00:27,039
respond as quickly as i can

00:00:25,279 --> 00:00:30,320
um so with that i'm just kind of gonna

00:00:27,039 --> 00:00:34,160
get started

00:00:30,320 --> 00:00:36,880
um all right so

00:00:34,160 --> 00:00:37,360
um my name is just to kind of give you a

00:00:36,880 --> 00:00:38,960
little bit

00:00:37,360 --> 00:00:41,040
information about me i briefed it

00:00:38,960 --> 00:00:43,200
earlier um my name is ijoma and

00:00:41,040 --> 00:00:44,640
yapuchi i have my phonetics on the

00:00:43,200 --> 00:00:46,640
slides

00:00:44,640 --> 00:00:48,079
i currently work as a test engineer so

00:00:46,640 --> 00:00:49,280
that means i'm primarily focused on

00:00:48,079 --> 00:00:50,800
automation

00:00:49,280 --> 00:00:52,559
um right now i'm working on our api

00:00:50,800 --> 00:00:54,239
services team previously i worked on

00:00:52,559 --> 00:00:55,760
mobile applications and enterprise

00:00:54,239 --> 00:00:57,199
software as well

00:00:55,760 --> 00:00:59,199
so i'm kind of transitioning from

00:00:57,199 --> 00:01:02,079
customer facing software

00:00:59,199 --> 00:01:03,359
to more um i guess back end facing

00:01:02,079 --> 00:01:06,240
software

00:01:03,359 --> 00:01:06,640
but um it's still very useful stuff and

00:01:06,240 --> 00:01:08,320
i think

00:01:06,640 --> 00:01:09,439
a lot of lessons i kind of learned kind

00:01:08,320 --> 00:01:11,520
of focusing on more things that

00:01:09,439 --> 00:01:13,360
consumers see such as websites

00:01:11,520 --> 00:01:14,960
and mobile applications i think are very

00:01:13,360 --> 00:01:16,880
useful to everyone so i'm just going to

00:01:14,960 --> 00:01:19,439
share a couple of those tips

00:01:16,880 --> 00:01:20,960
the talk is very informal and there is

00:01:19,439 --> 00:01:23,200
an opportunity to participate so i do

00:01:20,960 --> 00:01:25,360
encourage you to use the chat

00:01:23,200 --> 00:01:27,040
again if there are any questions or

00:01:25,360 --> 00:01:30,880
you're lost at any point please let me

00:01:27,040 --> 00:01:30,880
know and then i'll be sure to adjust

00:01:31,759 --> 00:01:37,680
all right so it all starts with kind of

00:01:34,079 --> 00:01:37,680
a testing realization story

00:01:39,360 --> 00:01:43,360
um a few years ago

00:01:44,720 --> 00:01:47,680
uh a few

00:01:50,799 --> 00:01:57,040
a few years ago i

00:01:54,079 --> 00:01:59,119
presented a talk called break things to

00:01:57,040 --> 00:02:01,759
fix things

00:01:59,119 --> 00:02:02,240
the talk kind of focused on a few topics

00:02:01,759 --> 00:02:05,439
so

00:02:02,240 --> 00:02:06,159
a lot it talked a lot about how testing

00:02:05,439 --> 00:02:09,440
can be used

00:02:06,159 --> 00:02:13,200
as part of the

00:02:09,440 --> 00:02:15,520
um testing workflow

00:02:13,200 --> 00:02:17,440
and what i mean by that um it talked

00:02:15,520 --> 00:02:18,959
about on a typical agile workflow you'll

00:02:17,440 --> 00:02:20,319
have like a planning phase where you're

00:02:18,959 --> 00:02:22,239
kind of deciding

00:02:20,319 --> 00:02:23,840
what you're going to build um you'll

00:02:22,239 --> 00:02:26,480
have a development phase where you're

00:02:23,840 --> 00:02:28,080
writing code um some type of testing or

00:02:26,480 --> 00:02:29,840
qa uat phase

00:02:28,080 --> 00:02:31,680
and then if everything looks great

00:02:29,840 --> 00:02:34,160
you'll kind of go ahead and release

00:02:31,680 --> 00:02:35,599
that is like in terms of my practice and

00:02:34,160 --> 00:02:39,040
what i've worked on this is what i

00:02:35,599 --> 00:02:40,319
typically tend to see um but in terms of

00:02:39,040 --> 00:02:42,080
what might be a better

00:02:40,319 --> 00:02:43,760
way to kind of do this process is that

00:02:42,080 --> 00:02:45,440
like what i found with this previous

00:02:43,760 --> 00:02:47,120
process is that like kind of waiting

00:02:45,440 --> 00:02:48,160
till everything is built and trying to

00:02:47,120 --> 00:02:49,840
figure out

00:02:48,160 --> 00:02:51,519
what you're testing how it should work

00:02:49,840 --> 00:02:54,239
and if you have enough coverage

00:02:51,519 --> 00:02:56,319
is a lot harder and it's actually a lot

00:02:54,239 --> 00:02:58,080
easier to kind of start

00:02:56,319 --> 00:03:00,159
at this initial phase of thinking how

00:02:58,080 --> 00:03:03,040
can i make qa part of the entire process

00:03:00,159 --> 00:03:04,480
so can you ask questions during planning

00:03:03,040 --> 00:03:06,640
to kind of determine like what you're

00:03:04,480 --> 00:03:08,959
supposed to build and how it should look

00:03:06,640 --> 00:03:10,640
um when you're doing development can you

00:03:08,959 --> 00:03:12,000
start writing unit tests there or can

00:03:10,640 --> 00:03:13,440
you even ask yourself am i

00:03:12,000 --> 00:03:16,239
writing code for something that could

00:03:13,440 --> 00:03:18,879
actually can be tested

00:03:16,239 --> 00:03:20,400
in terms of testing phase uh what i've

00:03:18,879 --> 00:03:21,760
actually learned is that while we write

00:03:20,400 --> 00:03:23,519
a lot of we write manual tests and

00:03:21,760 --> 00:03:25,840
automation tests at npr

00:03:23,519 --> 00:03:27,760
what i found is as we kind of go through

00:03:25,840 --> 00:03:28,080
like typically our manual tests that we

00:03:27,760 --> 00:03:29,519
have

00:03:28,080 --> 00:03:30,840
automated tests like when we get close

00:03:29,519 --> 00:03:32,000
to release we find that they're very

00:03:30,840 --> 00:03:33,680
stable

00:03:32,000 --> 00:03:35,440
but kind of like introducing exploratory

00:03:33,680 --> 00:03:35,840
testing so that's more just kind of like

00:03:35,440 --> 00:03:37,519
you know

00:03:35,840 --> 00:03:39,200
testing around random things seeing what

00:03:37,519 --> 00:03:40,239
works what doesn't without any specific

00:03:39,200 --> 00:03:42,000
goal in mind

00:03:40,239 --> 00:03:43,280
we find a lot of bugs and things that we

00:03:42,000 --> 00:03:45,920
don't initially plan for

00:03:43,280 --> 00:03:47,920
so keeping opportunity or room inside of

00:03:45,920 --> 00:03:49,920
your testing practice to allow

00:03:47,920 --> 00:03:50,959
for everything not to be so standard we

00:03:49,920 --> 00:03:52,319
actually learned

00:03:50,959 --> 00:03:55,680
a lot more things that we were not

00:03:52,319 --> 00:03:58,319
focusing on earlier in the process

00:03:55,680 --> 00:03:59,120
and then um the last kind of part of the

00:03:58,319 --> 00:04:01,200
process was like

00:03:59,120 --> 00:04:03,120
everything looks good released being

00:04:01,200 --> 00:04:04,959
ship quality things

00:04:03,120 --> 00:04:06,560
so kind of asking ourselves the question

00:04:04,959 --> 00:04:08,400
when we release is like when i finally

00:04:06,560 --> 00:04:10,000
release this out into the wild

00:04:08,400 --> 00:04:11,760
is it that i'm just kind of releasing it

00:04:10,000 --> 00:04:12,720
and letting it go or is there more fall

00:04:11,760 --> 00:04:13,840
up needed

00:04:12,720 --> 00:04:15,439
you know i think this is actually the

00:04:13,840 --> 00:04:17,040
most important part especially if you're

00:04:15,439 --> 00:04:17,680
working on automation if you put tests

00:04:17,040 --> 00:04:19,040
out there

00:04:17,680 --> 00:04:21,840
like how do you ensure it's kind of

00:04:19,040 --> 00:04:24,320
working consistently

00:04:21,840 --> 00:04:25,680
um as i presented this talk those are

00:04:24,320 --> 00:04:26,720
actually just a few slides and a few

00:04:25,680 --> 00:04:28,240
snippets

00:04:26,720 --> 00:04:30,080
there are a few questions that i got

00:04:28,240 --> 00:04:32,720
very often

00:04:30,080 --> 00:04:33,840
um one being um how do i prove the value

00:04:32,720 --> 00:04:35,280
of testing

00:04:33,840 --> 00:04:36,880
people didn't seem to have an issue

00:04:35,280 --> 00:04:38,560
agreeing that it is important to have

00:04:36,880 --> 00:04:40,479
testing in your practice somewhere and

00:04:38,560 --> 00:04:41,919
this seems to resonate of course with qa

00:04:40,479 --> 00:04:44,560
but also with products

00:04:41,919 --> 00:04:46,720
and developers who i spoke to and

00:04:44,560 --> 00:04:49,600
sometimes also hearing stories such as

00:04:46,720 --> 00:04:51,040
you know we no longer have a qa team um

00:04:49,600 --> 00:04:51,840
and developers are responsible for all

00:04:51,040 --> 00:04:53,680
the testing

00:04:51,840 --> 00:04:55,360
what do i do which i actually kind of

00:04:53,680 --> 00:04:56,160
find interesting um we do have a

00:04:55,360 --> 00:04:57,919
dedicated

00:04:56,160 --> 00:04:59,520
qa resources where i work right now but

00:04:57,919 --> 00:05:00,880
i know that's not always the case

00:04:59,520 --> 00:05:02,639
and so there are cases where developers

00:05:00,880 --> 00:05:06,479
are responsible to do

00:05:02,639 --> 00:05:09,039
all testing then

00:05:06,479 --> 00:05:09,600
this kind of led to the sad realization

00:05:09,039 --> 00:05:12,240
um

00:05:09,600 --> 00:05:13,919
i don't even know what i'm testing which

00:05:12,240 --> 00:05:15,199
is probably surprising you might think

00:05:13,919 --> 00:05:17,199
that if you're coming from more of a

00:05:15,199 --> 00:05:18,320
developer or devops background maybe you

00:05:17,199 --> 00:05:21,680
built it so you have

00:05:18,320 --> 00:05:23,280
knowledge about what it is like whatever

00:05:21,680 --> 00:05:24,800
you built so you should know how to

00:05:23,280 --> 00:05:26,960
write a test

00:05:24,800 --> 00:05:28,479
but in my experience just in terms of

00:05:26,960 --> 00:05:29,840
writing apps for fun that were not

00:05:28,479 --> 00:05:32,000
necessarily for work

00:05:29,840 --> 00:05:33,600
i might you know write code to build

00:05:32,000 --> 00:05:35,919
something just so i can build something

00:05:33,600 --> 00:05:38,240
but not be focusing so much on like

00:05:35,919 --> 00:05:39,759
what i'm trying to focus on testing

00:05:38,240 --> 00:05:42,000
afterwards so it's a little bit harder

00:05:39,759 --> 00:05:43,840
to go full circle

00:05:42,000 --> 00:05:45,280
so this question i don't even know what

00:05:43,840 --> 00:05:48,080
i'm testing is kind of what i'm looking

00:05:45,280 --> 00:05:48,080
to explore today

00:05:50,080 --> 00:05:53,199
so in kind of a process to kind of

00:05:52,160 --> 00:05:54,960
figure out could i

00:05:53,199 --> 00:05:56,720
better answer this question i kind of

00:05:54,960 --> 00:05:58,160
did two parts i kind of as i attended

00:05:56,720 --> 00:05:58,479
these different conferences i looked to

00:05:58,160 --> 00:06:01,120
see

00:05:58,479 --> 00:06:02,960
what topics people were bringing forward

00:06:01,120 --> 00:06:04,400
in terms of things to consider and

00:06:02,960 --> 00:06:06,000
what are some important other teams in

00:06:04,400 --> 00:06:07,199
other companies but also i looked

00:06:06,000 --> 00:06:09,120
internally to see like

00:06:07,199 --> 00:06:12,800
what i'm doing at work to kind of answer

00:06:09,120 --> 00:06:12,800
these questions on a day-to-day basis

00:06:14,240 --> 00:06:18,479
um some of the things i heard i'm kind

00:06:16,560 --> 00:06:20,240
of keeping a reference that i'm more

00:06:18,479 --> 00:06:20,479
working on the automation testing side

00:06:20,240 --> 00:06:23,039
is

00:06:20,479 --> 00:06:24,319
automation is the future and manual

00:06:23,039 --> 00:06:26,639
testing is slow

00:06:24,319 --> 00:06:28,400
um and in my experience i will tell you

00:06:26,639 --> 00:06:29,840
even working more in terms of automation

00:06:28,400 --> 00:06:30,720
i don't have a preference in terms of

00:06:29,840 --> 00:06:32,240
like testing

00:06:30,720 --> 00:06:34,880
like automation is the best or real

00:06:32,240 --> 00:06:36,639
testing is terrible i personally believe

00:06:34,880 --> 00:06:39,600
whatever works for your situation is

00:06:36,639 --> 00:06:42,800
what works for your situation

00:06:39,600 --> 00:06:43,840
but the issue here was or i would also

00:06:42,800 --> 00:06:46,479
even hear this

00:06:43,840 --> 00:06:47,840
how to use blank testing framework to

00:06:46,479 --> 00:06:49,520
improve your testing efforts and i've

00:06:47,840 --> 00:06:50,880
also done talks about different testing

00:06:49,520 --> 00:06:52,479
frameworks so when i give you this

00:06:50,880 --> 00:06:53,520
information i'm not saying excluding

00:06:52,479 --> 00:06:55,280
myself

00:06:53,520 --> 00:06:56,560
from the one who gives similar talks and

00:06:55,280 --> 00:06:59,759
topics

00:06:56,560 --> 00:07:02,240
and i want to reference that this is

00:06:59,759 --> 00:07:04,400
to talk about is is actually a bad thing

00:07:02,240 --> 00:07:05,919
is it bad to talk about automation being

00:07:04,400 --> 00:07:08,639
the future or the state of

00:07:05,919 --> 00:07:10,479
manual auto testing or how to improve

00:07:08,639 --> 00:07:13,039
via testing framework

00:07:10,479 --> 00:07:15,039
i mean not necessarily it's not a bad

00:07:13,039 --> 00:07:18,240
thing to talk about automation

00:07:15,039 --> 00:07:18,240
frameworks or tools

00:07:19,360 --> 00:07:22,560
it's more about the fact that it's kind

00:07:21,199 --> 00:07:25,680
of the wrong question

00:07:22,560 --> 00:07:25,680
to be asking

00:07:26,639 --> 00:07:31,840
the fact about automation is the future

00:07:29,919 --> 00:07:35,120
or male testing

00:07:31,840 --> 00:07:36,000
is sorry these slides um it's not a bad

00:07:35,120 --> 00:07:39,199
thing it's just that

00:07:36,000 --> 00:07:40,960
these don't answer the correct questions

00:07:39,199 --> 00:07:42,880
so automation being the future of manual

00:07:40,960 --> 00:07:43,840
testing don't answer the original

00:07:42,880 --> 00:07:45,840
questions i pose

00:07:43,840 --> 00:07:47,039
and that is how do you prove the value

00:07:45,840 --> 00:07:49,120
of testing

00:07:47,039 --> 00:07:51,440
and kind of how to determine what to

00:07:49,120 --> 00:07:51,440
test

00:07:52,160 --> 00:07:54,960
i mean when you look out there you can

00:07:53,520 --> 00:07:56,240
see so many different tools i can kind

00:07:54,960 --> 00:07:58,560
of use for testing

00:07:56,240 --> 00:08:00,000
kind of talking in more of like a mobile

00:07:58,560 --> 00:08:01,039
trend these are from the ones i've used

00:08:00,000 --> 00:08:04,479
or heard of

00:08:01,039 --> 00:08:07,280
um appium selenium espresso

00:08:04,479 --> 00:08:08,639
xc test um postman if you're doing api

00:08:07,280 --> 00:08:10,479
testing

00:08:08,639 --> 00:08:12,479
excel sheet just for writing test cases

00:08:10,479 --> 00:08:13,840
and maybe a manual test tracker i kind

00:08:12,479 --> 00:08:15,759
of want to influence here that when i

00:08:13,840 --> 00:08:17,520
say

00:08:15,759 --> 00:08:20,720
a tool i pretty much just mean anything

00:08:17,520 --> 00:08:22,960
that kind of allows you to write a test

00:08:20,720 --> 00:08:24,240
and further on that kind of leads me to

00:08:22,960 --> 00:08:26,160
my first lesson

00:08:24,240 --> 00:08:27,919
and that is tools do not dictate what

00:08:26,160 --> 00:08:29,680
you test they just make it possible for

00:08:27,919 --> 00:08:31,680
you to write tests

00:08:29,680 --> 00:08:33,360
so the reason i want to emphasize this

00:08:31,680 --> 00:08:35,120
point is a lot of times as

00:08:33,360 --> 00:08:36,719
we are you know creating a new feature

00:08:35,120 --> 00:08:37,919
or we're creating something new we

00:08:36,719 --> 00:08:39,360
like someone asked maybe a product

00:08:37,919 --> 00:08:40,719
manager says how would we test that like

00:08:39,360 --> 00:08:43,120
what will we test

00:08:40,719 --> 00:08:44,159
if they asked about the high how you can

00:08:43,120 --> 00:08:45,839
of course you can mention

00:08:44,159 --> 00:08:47,839
a framework you can mention a testing

00:08:45,839 --> 00:08:49,120
tool if they ask about the what the

00:08:47,839 --> 00:08:50,959
answer is never going to be

00:08:49,120 --> 00:08:52,240
an automation framework an automation

00:08:50,959 --> 00:08:54,399
framework is exactly that it's a

00:08:52,240 --> 00:08:56,959
framework that allows you to write tests

00:08:54,399 --> 00:08:57,440
but will never dictate what you can

00:08:56,959 --> 00:08:58,880
actually

00:08:57,440 --> 00:09:01,519
it will never dictate what's important

00:08:58,880 --> 00:09:01,519
for testing

00:09:03,279 --> 00:09:07,519
and so like with that kind of said um i

00:09:06,240 --> 00:09:09,519
want to kind of walk us through

00:09:07,519 --> 00:09:11,360
two examples of trying to determine a

00:09:09,519 --> 00:09:12,800
good test in terms of like what i might

00:09:11,360 --> 00:09:13,920
consider internally

00:09:12,800 --> 00:09:15,920
and these could apply to your

00:09:13,920 --> 00:09:18,320
applications as well

00:09:15,920 --> 00:09:19,200
uh so here we go so here i have a

00:09:18,320 --> 00:09:24,320
product case

00:09:19,200 --> 00:09:26,160
um i want to build a sign-in form

00:09:24,320 --> 00:09:27,519
so imagine a product manager project

00:09:26,160 --> 00:09:28,880
manager comes to you as

00:09:27,519 --> 00:09:30,160
like a tech professional or someone

00:09:28,880 --> 00:09:30,959
who's designing or building something

00:09:30,160 --> 00:09:34,959
and says

00:09:30,959 --> 00:09:36,640
i really want to build something right

00:09:34,959 --> 00:09:39,200
the question i have for you and i'd like

00:09:36,640 --> 00:09:42,640
you to kind of answer with the chat

00:09:39,200 --> 00:09:43,440
is uh what are some test cases that you

00:09:42,640 --> 00:09:45,920
might write

00:09:43,440 --> 00:09:47,360
given this um given this product case

00:09:45,920 --> 00:09:47,680
and i'll give you like maybe a minute or

00:09:47,360 --> 00:09:49,760
two

00:09:47,680 --> 00:10:05,839
kind of like type a couple of possible

00:09:49,760 --> 00:10:05,839
answers in the chat

00:10:14,800 --> 00:10:18,079
all right i've got i've given a few

00:10:16,399 --> 00:10:21,839
maybe you know 10 to 15 more

00:10:18,079 --> 00:10:21,839
seconds to maybe get a few more

00:10:28,959 --> 00:10:35,519
all right so kind of reading

00:10:32,240 --> 00:10:37,920
a few of the comments that have been

00:10:35,519 --> 00:10:39,440
answered that have been given to me i've

00:10:37,920 --> 00:10:41,760
gotten things such as

00:10:39,440 --> 00:10:44,640
validating the form checking which

00:10:41,760 --> 00:10:44,640
fields are active

00:10:45,200 --> 00:10:52,000
testing that the user field um

00:10:49,440 --> 00:10:53,360
user fills in the correct email and

00:10:52,000 --> 00:10:54,800
password

00:10:53,360 --> 00:10:56,720
um what characters are allowed and

00:10:54,800 --> 00:10:57,760
disallowed and these are all great

00:10:56,720 --> 00:10:58,880
answers

00:10:57,760 --> 00:11:00,640
that they are things that you want to

00:10:58,880 --> 00:11:02,480
test they're testing things about the

00:11:00,640 --> 00:11:05,760
sign-in form

00:11:02,480 --> 00:11:07,519
but i was i would say this i said

00:11:05,760 --> 00:11:09,760
essentially a lot of those cases stem

00:11:07,519 --> 00:11:09,760
from

00:11:11,839 --> 00:11:15,760
uh the specific case the most important

00:11:14,720 --> 00:11:18,480
case to test

00:11:15,760 --> 00:11:20,560
right is that a user can actually sign

00:11:18,480 --> 00:11:22,079
in like that is the purpose of a sign-in

00:11:20,560 --> 00:11:23,839
form that you want to make sure that the

00:11:22,079 --> 00:11:25,680
user can actually sign in

00:11:23,839 --> 00:11:26,959
and a lot of the cases that you gave

00:11:25,680 --> 00:11:28,800
that you presented such as

00:11:26,959 --> 00:11:30,560
validating fills and developing

00:11:28,800 --> 00:11:33,040
different input fields

00:11:30,560 --> 00:11:34,320
making sure that you know passwords work

00:11:33,040 --> 00:11:37,040
um checking the

00:11:34,320 --> 00:11:38,720
character links they kind of all go into

00:11:37,040 --> 00:11:40,000
kind of reinforce that

00:11:38,720 --> 00:11:42,160
so when you're thinking about how to

00:11:40,000 --> 00:11:43,920
stem your test case where how to

00:11:42,160 --> 00:11:45,120
create your test or where they're kind

00:11:43,920 --> 00:11:46,240
of coming from you should really be

00:11:45,120 --> 00:11:47,839
thinking about like

00:11:46,240 --> 00:11:49,279
what is the product value that you're

00:11:47,839 --> 00:11:50,880
trying to deliver

00:11:49,279 --> 00:11:52,639
and the reason i enforce this is because

00:11:50,880 --> 00:11:54,079
i think i find sometimes especially kind

00:11:52,639 --> 00:11:56,320
of working more with apis

00:11:54,079 --> 00:11:58,320
i can kind of get stuck in a world of

00:11:56,320 --> 00:12:00,079
trying to make sure i test every single

00:11:58,320 --> 00:12:01,519
make sure we get 100 test coverage make

00:12:00,079 --> 00:12:03,360
sure everything has

00:12:01,519 --> 00:12:04,639
um everything is tested and that we

00:12:03,360 --> 00:12:06,079
encounter everything but at the end of

00:12:04,639 --> 00:12:08,880
the day

00:12:06,079 --> 00:12:10,560
the most important thing to uh you know

00:12:08,880 --> 00:12:11,200
validate is ensuring that you can

00:12:10,560 --> 00:12:13,120
actually

00:12:11,200 --> 00:12:14,639
do what you like you can do the main

00:12:13,120 --> 00:12:16,800
function that the application is built

00:12:14,639 --> 00:12:16,800
for

00:12:16,880 --> 00:12:20,560
um with that in mind i think i have

00:12:22,839 --> 00:12:27,279
uh so i have one more case um

00:12:26,240 --> 00:12:29,519
i think you might have just seen the

00:12:27,279 --> 00:12:32,480
answer um but

00:12:29,519 --> 00:12:33,839
um so the next case i have is um i want

00:12:32,480 --> 00:12:36,560
to display the weather

00:12:33,839 --> 00:12:38,000
and so maybe with that again um if you

00:12:36,560 --> 00:12:39,760
can kind of give me a few

00:12:38,000 --> 00:12:41,120
uh based off kind of the previous answer

00:12:39,760 --> 00:12:41,519
like what you think the most important

00:12:41,120 --> 00:12:53,839
case

00:12:41,519 --> 00:12:53,839
might be for this product case

00:13:04,839 --> 00:13:07,839
uh

00:13:10,160 --> 00:13:13,519
yeah so i'm getting a couple of answers

00:13:12,399 --> 00:13:14,079
that roll and they're kind of what i

00:13:13,519 --> 00:13:16,079
expect

00:13:14,079 --> 00:13:17,760
right so i would say that if i was

00:13:16,079 --> 00:13:18,880
thinking about a high level use case i'm

00:13:17,760 --> 00:13:21,839
trying to meet

00:13:18,880 --> 00:13:21,839
it would be um

00:13:23,440 --> 00:13:26,800
that user can view the weather and these

00:13:25,600 --> 00:13:28,079
ones kind of uh

00:13:26,800 --> 00:13:30,160
most of the answers i think most of the

00:13:28,079 --> 00:13:32,160
answers i got are all about like

00:13:30,160 --> 00:13:33,360
around the same thing i'm saying that um

00:13:32,160 --> 00:13:34,240
you all are saying that

00:13:33,360 --> 00:13:36,399
you want to make sure that you can find

00:13:34,240 --> 00:13:37,760
today's weather and that you can make

00:13:36,399 --> 00:13:38,480
sure the correct weather is displayed

00:13:37,760 --> 00:13:41,040
and you're correct

00:13:38,480 --> 00:13:41,519
right so like when this kind of brings

00:13:41,040 --> 00:13:45,360
me to

00:13:41,519 --> 00:13:45,360
the second case i kind of want to

00:13:45,760 --> 00:13:50,399
emphasize and that is good test cases

00:13:48,639 --> 00:13:52,240
are centered around the user

00:13:50,399 --> 00:13:53,839
and what i mean by that is that the

00:13:52,240 --> 00:13:55,519
examples that you've given are

00:13:53,839 --> 00:13:57,680
are all largely based off what you want

00:13:55,519 --> 00:13:59,360
a user to be able to do

00:13:57,680 --> 00:14:00,800
right you want usually like if you're

00:13:59,360 --> 00:14:02,320
creating an application

00:14:00,800 --> 00:14:04,320
that's about showing the weather you

00:14:02,320 --> 00:14:05,519
want to make sure that you can actually

00:14:04,320 --> 00:14:06,800
view the weather if you're creating a

00:14:05,519 --> 00:14:07,920
sight informing you wants to make sure

00:14:06,800 --> 00:14:10,399
user can

00:14:07,920 --> 00:14:10,399
sign in

00:14:12,880 --> 00:14:16,000
and then that probably brings me to the

00:14:14,399 --> 00:14:17,920
next thing i this is some that i see

00:14:16,000 --> 00:14:19,519
very often about the testing pyramid but

00:14:17,920 --> 00:14:22,320
what about something like this

00:14:19,519 --> 00:14:23,600
right like um you have to have you know

00:14:22,320 --> 00:14:25,040
this talks a lot about how you should

00:14:23,600 --> 00:14:26,079
break out your tests so this is more of

00:14:25,040 --> 00:14:27,920
a mobile example

00:14:26,079 --> 00:14:29,279
right about you want to have a small

00:14:27,920 --> 00:14:31,279
amount of ui tests

00:14:29,279 --> 00:14:32,800
um like the middle layer being

00:14:31,279 --> 00:14:34,560
integration and a large amount of unit

00:14:32,800 --> 00:14:36,240
tests and how does this kind of apply to

00:14:34,560 --> 00:14:38,480
the previous lesson

00:14:36,240 --> 00:14:39,600
well i think it actually still applies

00:14:38,480 --> 00:14:41,040
in this case it's just

00:14:39,600 --> 00:14:42,720
like this is more about a framework

00:14:41,040 --> 00:14:44,079
example right so like i think a lot of

00:14:42,720 --> 00:14:45,920
times people might say when they're

00:14:44,079 --> 00:14:47,199
talking about testing strategy

00:14:45,920 --> 00:14:48,560
let's make sure we have really great

00:14:47,199 --> 00:14:49,920
unit coverage let's make sure we have

00:14:48,560 --> 00:14:51,279
good integration coverage we don't want

00:14:49,920 --> 00:14:52,880
to spend a lot of time on ui tests maybe

00:14:51,279 --> 00:14:54,399
they're not influential like whatever

00:14:52,880 --> 00:14:55,760
you might kind of come up with as an

00:14:54,399 --> 00:14:57,440
example about

00:14:55,760 --> 00:14:58,880
should you be focusing on this is it

00:14:57,440 --> 00:15:00,320
actually important is it really

00:14:58,880 --> 00:15:02,399
impactful

00:15:00,320 --> 00:15:04,720
the reality is that this all still holds

00:15:02,399 --> 00:15:06,320
true this just kind of gives you focus

00:15:04,720 --> 00:15:08,800
right looking at the previous case of

00:15:06,320 --> 00:15:11,199
like you know you want to use to display

00:15:08,800 --> 00:15:13,120
the weather um and look at this pyramid

00:15:11,199 --> 00:15:15,440
you might kind of say

00:15:13,120 --> 00:15:17,680
for you are testing that might be an uh

00:15:15,440 --> 00:15:18,959
uh you know appian or selenium test i'm

00:15:17,680 --> 00:15:20,480
not trying to be prescriptive where you

00:15:18,959 --> 00:15:22,800
kind of just say that like

00:15:20,480 --> 00:15:24,000
i want to verify that there is a field

00:15:22,800 --> 00:15:26,160
that shows weather

00:15:24,000 --> 00:15:27,519
right for an integration test you might

00:15:26,160 --> 00:15:31,199
want to verify that

00:15:27,519 --> 00:15:32,720
given um the specific response

00:15:31,199 --> 00:15:34,000
like you kind of get this piece of data

00:15:32,720 --> 00:15:35,519
and for a unit test you might just want

00:15:34,000 --> 00:15:38,560
to verify that like

00:15:35,519 --> 00:15:40,639
um if i like does a specific

00:15:38,560 --> 00:15:42,160
you know function or method that kind of

00:15:40,639 --> 00:15:43,839
like verifies that

00:15:42,160 --> 00:15:45,360
you can give an output of whether it

00:15:43,839 --> 00:15:46,480
even exists does it work does it

00:15:45,360 --> 00:15:48,160
actually give an output

00:15:46,480 --> 00:15:50,240
right so in that case you can kind of

00:15:48,160 --> 00:15:51,199
like put your test cases in the frame of

00:15:50,240 --> 00:15:53,440
saying that

00:15:51,199 --> 00:15:55,040
you can still insure and still assume

00:15:53,440 --> 00:15:56,480
that you can actually get there you can

00:15:55,040 --> 00:15:59,040
still make sure that your

00:15:56,480 --> 00:16:00,240
tests are user driven and so i know at

00:15:59,040 --> 00:16:01,600
this point some people might be thinking

00:16:00,240 --> 00:16:03,519
about what what about 100

00:16:01,600 --> 00:16:05,519
test coverage like i do agree great test

00:16:03,519 --> 00:16:09,759
coverage is important but i think

00:16:05,519 --> 00:16:11,120
focus for your test is important as well

00:16:09,759 --> 00:16:12,880
what are some other ways to kind of

00:16:11,120 --> 00:16:15,120
verify or look to see like where you

00:16:12,880 --> 00:16:18,320
should be kind of getting data about

00:16:15,120 --> 00:16:19,920
what your test cases should be so kind

00:16:18,320 --> 00:16:21,440
of looking at the data i would say look

00:16:19,920 --> 00:16:23,120
at things like analytics if you have

00:16:21,440 --> 00:16:23,600
analytics available to you about a

00:16:23,120 --> 00:16:25,040
product

00:16:23,600 --> 00:16:26,880
i would say look at analytics and see

00:16:25,040 --> 00:16:28,560
what your user actually doing

00:16:26,880 --> 00:16:30,800
i often find that when i look at

00:16:28,560 --> 00:16:33,600
analytics or

00:16:30,800 --> 00:16:35,360
if i've looked at app reviews or

00:16:33,600 --> 00:16:36,399
comments on the websites for instance

00:16:35,360 --> 00:16:37,920
and

00:16:36,399 --> 00:16:39,120
previously employer like we could

00:16:37,920 --> 00:16:40,320
actually just ask our client because i

00:16:39,120 --> 00:16:41,839
worked as a consultant

00:16:40,320 --> 00:16:43,600
like do you have analytics around the

00:16:41,839 --> 00:16:45,279
ability to um

00:16:43,600 --> 00:16:46,800
take some of these actions and then they

00:16:45,279 --> 00:16:48,399
would tell us like we see this most

00:16:46,800 --> 00:16:49,600
often not most often

00:16:48,399 --> 00:16:51,120
and those are things that you want to

00:16:49,600 --> 00:16:52,560
test because they have high product

00:16:51,120 --> 00:16:55,120
value

00:16:52,560 --> 00:16:56,720
um things like app reviews i think i

00:16:55,120 --> 00:16:58,320
have seen a tendency kind of like while

00:16:56,720 --> 00:16:59,440
i was working on the mobile teams and i

00:16:58,320 --> 00:17:00,880
would review

00:16:59,440 --> 00:17:02,480
the comments on the app store in the

00:17:00,880 --> 00:17:03,839
play store is that when things are not

00:17:02,480 --> 00:17:05,120
working or when there are issues around

00:17:03,839 --> 00:17:07,600
a specific

00:17:05,120 --> 00:17:09,679
um specific module or specific feature

00:17:07,600 --> 00:17:10,959
that users are not shy to comment about

00:17:09,679 --> 00:17:11,760
how they do not like something not

00:17:10,959 --> 00:17:13,919
working

00:17:11,760 --> 00:17:15,360
so if you see a trend of reviews saying

00:17:13,919 --> 00:17:16,880
that something is not working

00:17:15,360 --> 00:17:18,880
that is not only that doesn't only

00:17:16,880 --> 00:17:20,880
indicate an issue of like

00:17:18,880 --> 00:17:22,319
um this is not working that can also

00:17:20,880 --> 00:17:24,079
indicate an issue of

00:17:22,319 --> 00:17:25,360
maybe just maybe that you don't have

00:17:24,079 --> 00:17:26,160
great test coverage around a specific

00:17:25,360 --> 00:17:27,760
feature

00:17:26,160 --> 00:17:29,520
so one practice that we kind of take at

00:17:27,760 --> 00:17:30,480
heart here is that if we see that like

00:17:29,520 --> 00:17:32,320
there are consistent

00:17:30,480 --> 00:17:34,080
feedback around a specific feature not

00:17:32,320 --> 00:17:36,559
working as expected and this is more

00:17:34,080 --> 00:17:37,600
of another case of products and user

00:17:36,559 --> 00:17:38,480
experience with more of the cases like

00:17:37,600 --> 00:17:41,520
we literally just

00:17:38,480 --> 00:17:42,400
something just fails all the time in

00:17:41,520 --> 00:17:44,080
that case

00:17:42,400 --> 00:17:46,400
we'll actually use us an example to say

00:17:44,080 --> 00:17:48,400
like you know we see that this specific

00:17:46,400 --> 00:17:50,000
module is really not working for some

00:17:48,400 --> 00:17:51,679
reason and we don't know why

00:17:50,000 --> 00:17:53,600
but people consistently say it's not

00:17:51,679 --> 00:17:55,360
working so like we need increased test

00:17:53,600 --> 00:17:57,120
coverage and making sure that the and

00:17:55,360 --> 00:17:59,280
um those end use cases that the user is

00:17:57,120 --> 00:18:01,840
experiencing are actually being covered

00:17:59,280 --> 00:18:01,840
somewhere

00:18:02,240 --> 00:18:05,679
um and the thing is like why does it

00:18:03,919 --> 00:18:08,160
matter um

00:18:05,679 --> 00:18:09,520
i think it matters because one thing i

00:18:08,160 --> 00:18:10,799
see and this is probably more practice

00:18:09,520 --> 00:18:13,280
of automation but i've also seen

00:18:10,799 --> 00:18:14,640
manual testing as well is that with

00:18:13,280 --> 00:18:16,160
testing i think that there's a strong

00:18:14,640 --> 00:18:17,280
desire to cover everything and i

00:18:16,160 --> 00:18:19,360
inherently kind of have the strong

00:18:17,280 --> 00:18:21,039
desire to cover everything but i think

00:18:19,360 --> 00:18:21,520
sometimes that can lead to unreliable

00:18:21,039 --> 00:18:23,200
tests

00:18:21,520 --> 00:18:24,880
i've seen more times than i would like

00:18:23,200 --> 00:18:25,600
the experience of where maybe a test

00:18:24,880 --> 00:18:26,799
fails

00:18:25,600 --> 00:18:28,720
right and the response is like let's

00:18:26,799 --> 00:18:30,480
just rerun it

00:18:28,720 --> 00:18:32,240
or if we're testing if we're in a manual

00:18:30,480 --> 00:18:33,679
testing session i might test something

00:18:32,240 --> 00:18:35,039
someone else might test something and we

00:18:33,679 --> 00:18:36,480
have different responses and then we'll

00:18:35,039 --> 00:18:37,120
have like a third person test it and

00:18:36,480 --> 00:18:38,960
then

00:18:37,120 --> 00:18:40,640
the response of what they see is kind of

00:18:38,960 --> 00:18:42,000
like okay well you know they tested it

00:18:40,640 --> 00:18:43,520
and it kind of works for more of them

00:18:42,000 --> 00:18:44,640
like we think we're good we have great

00:18:43,520 --> 00:18:46,320
coverage

00:18:44,640 --> 00:18:47,840
so like we kind of think that maybe this

00:18:46,320 --> 00:18:49,760
is a blip and like the reality is that

00:18:47,840 --> 00:18:50,880
that lists these two unreliable tests

00:18:49,760 --> 00:18:52,320
and we don't believe something is

00:18:50,880 --> 00:18:54,000
actually going to

00:18:52,320 --> 00:18:55,360
be carried out the thought about

00:18:54,000 --> 00:18:57,440
stressing the wrong things

00:18:55,360 --> 00:18:58,480
i can it can be can be very easy if

00:18:57,440 --> 00:19:00,320
you're the one who works in the

00:18:58,480 --> 00:19:02,400
implementation to

00:19:00,320 --> 00:19:03,760
focus into much deeply on like every

00:19:02,400 --> 00:19:05,120
single button has to be checked

00:19:03,760 --> 00:19:06,960
everything needs to be working if that's

00:19:05,120 --> 00:19:09,840
not something that a user will foresee

00:19:06,960 --> 00:19:11,280
or has high product value then maybe um

00:19:09,840 --> 00:19:13,520
focusing more on where the higher

00:19:11,280 --> 00:19:16,960
product values to the users is better

00:19:13,520 --> 00:19:17,520
overall and also it's easier to advocate

00:19:16,960 --> 00:19:19,760
for

00:19:17,520 --> 00:19:21,280
long-term value so i've seen a lot of

00:19:19,760 --> 00:19:22,640
times where it seems that there's a

00:19:21,280 --> 00:19:24,320
disconnect between

00:19:22,640 --> 00:19:25,679
development and product and so when

00:19:24,320 --> 00:19:27,200
there is that disconnect

00:19:25,679 --> 00:19:28,559
um i think one way to kind of go about

00:19:27,200 --> 00:19:29,280
it is saying like if you think about the

00:19:28,559 --> 00:19:31,760
user

00:19:29,280 --> 00:19:32,799
the earlier use case about the ability

00:19:31,760 --> 00:19:35,440
to uh

00:19:32,799 --> 00:19:36,559
write tests um for a sign-in form like

00:19:35,440 --> 00:19:38,480
it's very easy to kind of

00:19:36,559 --> 00:19:39,600
talk to a product or project manager and

00:19:38,480 --> 00:19:42,880
kind of say that

00:19:39,600 --> 00:19:44,559
i i'm very sure that we have i'm very

00:19:42,880 --> 00:19:46,160
sure that the sign-in functionality

00:19:44,559 --> 00:19:47,520
works because we have a test that we can

00:19:46,160 --> 00:19:50,000
see repeatedly works

00:19:47,520 --> 00:19:51,440
that test is the ability to sign in so

00:19:50,000 --> 00:19:52,000
it delivers that value that we were

00:19:51,440 --> 00:19:56,240
talking about

00:19:52,000 --> 00:19:58,799
earlier and kind of more into a recap

00:19:56,240 --> 00:19:59,280
um how do i prove the value of testing

00:19:58,799 --> 00:20:01,280
tie

00:19:59,280 --> 00:20:02,960
you can prove the value of testing by

00:20:01,280 --> 00:20:06,480
again tying it to a business

00:20:02,960 --> 00:20:08,640
goal or a use case um and then how do

00:20:06,480 --> 00:20:10,559
you determine what to test

00:20:08,640 --> 00:20:12,799
um kind of you determine what's a test

00:20:10,559 --> 00:20:14,320
by um kind of picking the test cases

00:20:12,799 --> 00:20:15,840
from that use case

00:20:14,320 --> 00:20:17,919
and so and i also do want to stress that

00:20:15,840 --> 00:20:19,919
this doesn't mean that we're not testing

00:20:17,919 --> 00:20:22,080
the bare minimum like you know like i

00:20:19,919 --> 00:20:23,840
would also say a use case might be

00:20:22,080 --> 00:20:25,440
you know if you have if you're an api

00:20:23,840 --> 00:20:26,880
that's being consumed by a client i

00:20:25,440 --> 00:20:28,480
would say a use case is ensuring that

00:20:26,880 --> 00:20:30,240
that client contract is working like

00:20:28,480 --> 00:20:31,520
that is very important use case if not

00:20:30,240 --> 00:20:32,640
like you're not delivering the value

00:20:31,520 --> 00:20:34,000
that was promised

00:20:32,640 --> 00:20:35,760
if you're working more in the services

00:20:34,000 --> 00:20:38,720
side so let's say in that case

00:20:35,760 --> 00:20:39,120
ensuring that every single um that might

00:20:38,720 --> 00:20:40,799
be

00:20:39,120 --> 00:20:42,559
verifying that a client receives

00:20:40,799 --> 00:20:43,600
expected fields that is a use case

00:20:42,559 --> 00:20:45,360
that's important because that is

00:20:43,600 --> 00:20:47,520
actually part of the business contract

00:20:45,360 --> 00:20:48,880
and i see that more in terms of apis so

00:20:47,520 --> 00:20:50,320
just kind of recap of like how to

00:20:48,880 --> 00:20:51,840
approve overall value is making sure

00:20:50,320 --> 00:20:53,600
that everything is kind of tied back to

00:20:51,840 --> 00:20:55,120
a specific purpose and value

00:20:53,600 --> 00:20:56,320
and if you find yourself in a case where

00:20:55,120 --> 00:20:56,880
you're writing a test case and you're

00:20:56,320 --> 00:20:58,480
saying

00:20:56,880 --> 00:21:00,240
i don't even know why i'm doing this or

00:20:58,480 --> 00:21:01,520
what i really want it to do

00:21:00,240 --> 00:21:02,960
then i always encourage you to kind of

00:21:01,520 --> 00:21:04,400
go back to like what is the original

00:21:02,960 --> 00:21:05,360
thing i'm trying to build and how does

00:21:04,400 --> 00:21:08,240
writing those tests

00:21:05,360 --> 00:21:08,240
add value to that

00:21:10,720 --> 00:21:14,480
i think that actually might be it and so

00:21:13,120 --> 00:21:18,559
i think with that i'll just

00:21:14,480 --> 00:21:18,559
kind of open it up for questions

00:21:27,280 --> 00:21:31,760
thank you

00:21:30,320 --> 00:21:35,039
any questions you can post your

00:21:31,760 --> 00:21:35,039
questions in q and a section

00:21:36,240 --> 00:21:39,440
and i think everybody can associate with

00:21:37,919 --> 00:21:42,400
the importance of testing

00:21:39,440 --> 00:21:42,400
particularly now

00:21:43,600 --> 00:21:46,720
that pyramid i think was very

00:21:44,960 --> 00:21:49,600
interesting because that determines

00:21:46,720 --> 00:21:51,280
how multi-layered the testing is because

00:21:49,600 --> 00:21:54,720
you're testing for different

00:21:51,280 --> 00:21:56,159
areas different parts yeah i think i

00:21:54,720 --> 00:21:58,000
found the pyramid interesting because i

00:21:56,159 --> 00:22:00,000
see it presented very often in testing

00:21:58,000 --> 00:22:01,039
clocks as in terms of like this is what

00:22:00,000 --> 00:22:03,039
you should have but now how you

00:22:01,039 --> 00:22:04,640
determine what's on every layer

00:22:03,039 --> 00:22:06,320
so i think that kind of the breaking it

00:22:04,640 --> 00:22:07,280
out by just kind of like saying like how

00:22:06,320 --> 00:22:09,280
does each layer

00:22:07,280 --> 00:22:10,720
you know add value to a specific use

00:22:09,280 --> 00:22:13,360
case kind of can give you

00:22:10,720 --> 00:22:14,960
like a rough guideline so you're not

00:22:13,360 --> 00:22:26,320
over or under testing what you're trying

00:22:14,960 --> 00:22:29,440
to deliver

00:22:26,320 --> 00:22:30,799
there is one question in q a uh new to

00:22:29,440 --> 00:22:32,880
testing

00:22:30,799 --> 00:22:34,000
any tips on reading or videos to get a

00:22:32,880 --> 00:22:36,799
handle on basis

00:22:34,000 --> 00:22:36,799
basics of this

00:22:38,880 --> 00:22:43,679
oh i was actually seeing my questions

00:22:40,880 --> 00:22:43,679
now um

00:22:46,240 --> 00:22:52,240
um i can't so i actually

00:22:49,679 --> 00:22:54,320
didn't really go through any formal kind

00:22:52,240 --> 00:22:56,400
of testing training i think it's more of

00:22:54,320 --> 00:22:57,760
uh i've learned every kind of company

00:22:56,400 --> 00:22:59,760
has their own

00:22:57,760 --> 00:23:01,520
practice um in terms of what i might

00:22:59,760 --> 00:23:03,200
recommend and i also but i would say

00:23:01,520 --> 00:23:04,240
that versus when i started versus now

00:23:03,200 --> 00:23:06,480
there's actually just a lot more

00:23:04,240 --> 00:23:08,559
information out there online

00:23:06,480 --> 00:23:10,320
so in terms of what i might recommend i

00:23:08,559 --> 00:23:12,320
will say it depends on whether or not

00:23:10,320 --> 00:23:15,200
you are trying to get into

00:23:12,320 --> 00:23:18,720
more of like the manual side of testing

00:23:15,200 --> 00:23:20,080
or the automation side of testing

00:23:18,720 --> 00:23:22,640
and i will say if you're trying to get

00:23:20,080 --> 00:23:24,799
to more of the male step testing my best

00:23:22,640 --> 00:23:26,640
recommendations would actually be to

00:23:24,799 --> 00:23:28,720
just kind of download a whole bunch of

00:23:26,640 --> 00:23:31,039
different apps and actually

00:23:28,720 --> 00:23:32,000
kind of like walk through the entire

00:23:31,039 --> 00:23:34,000
application

00:23:32,000 --> 00:23:36,080
like pay attention to details and add

00:23:34,000 --> 00:23:36,559
and like note note take like what you

00:23:36,080 --> 00:23:38,080
notice

00:23:36,559 --> 00:23:40,720
working what you know it's not working

00:23:38,080 --> 00:23:42,159
because that is actually a large part of

00:23:40,720 --> 00:23:44,480
manual testing it is being

00:23:42,159 --> 00:23:46,000
is having a strong attention to detail

00:23:44,480 --> 00:23:47,520
now applies to automation testing as

00:23:46,000 --> 00:23:48,559
well but if you don't have the strong

00:23:47,520 --> 00:23:50,640
attention to like

00:23:48,559 --> 00:23:52,080
looking into the service or asking

00:23:50,640 --> 00:23:54,000
questions about why

00:23:52,080 --> 00:23:55,600
that's hard um it's going to be harder

00:23:54,000 --> 00:23:56,880
for you to kind of like grow in that

00:23:55,600 --> 00:23:58,960
field

00:23:56,880 --> 00:24:01,600
number two i would say is never be

00:23:58,960 --> 00:24:04,000
afraid to ask questions in qa

00:24:01,600 --> 00:24:05,760
i ask questions to practically everyone

00:24:04,000 --> 00:24:07,760
and that means whether you're a product

00:24:05,760 --> 00:24:09,440
you're a devops you are a developer like

00:24:07,760 --> 00:24:11,200
i will ask questions to everyone because

00:24:09,440 --> 00:24:13,760
what i find a lot of times is that by

00:24:11,200 --> 00:24:16,640
asking questions we usually find bugs

00:24:13,760 --> 00:24:18,880
right so ask questions early and often

00:24:16,640 --> 00:24:20,240
um and so in terms of

00:24:18,880 --> 00:24:21,919
so yeah i haven't really done a lot of

00:24:20,240 --> 00:24:23,760
readings i think i just kind of like

00:24:21,919 --> 00:24:25,200
google in terms of like resources in

00:24:23,760 --> 00:24:27,360
terms of videos

00:24:25,200 --> 00:24:29,039
um i would recommend um i've gone

00:24:27,360 --> 00:24:31,200
through part of like there's a linda

00:24:29,039 --> 00:24:32,480
um learning path on like being a qa

00:24:31,200 --> 00:24:33,360
engineer that i thought had some pretty

00:24:32,480 --> 00:24:36,240
good tips

00:24:33,360 --> 00:24:37,840
and so if you are in the us most public

00:24:36,240 --> 00:24:40,000
libraries have access to lynda for free

00:24:37,840 --> 00:24:43,120
so that is like a free resource

00:24:40,000 --> 00:24:45,200
i would also recommend looking into

00:24:43,120 --> 00:24:46,960
tesla automation university it's like a

00:24:45,200 --> 00:24:48,640
course a whole bunch of video courses

00:24:46,960 --> 00:24:49,840
short courses on different tools and

00:24:48,640 --> 00:24:51,039
technologies that are kind of relevant

00:24:49,840 --> 00:24:53,919
today

00:24:51,039 --> 00:24:54,400
um and if you're also looking to um

00:24:53,919 --> 00:24:57,760
focus

00:24:54,400 --> 00:24:59,200
more on the um how would i say it

00:24:57,760 --> 00:25:00,960
if you're looking to focus more on the

00:24:59,200 --> 00:25:03,440
automation side of things

00:25:00,960 --> 00:25:04,799
i would just say familiarity in like one

00:25:03,440 --> 00:25:07,440
programming language

00:25:04,799 --> 00:25:09,279
is okay um and i just mean basic

00:25:07,440 --> 00:25:11,679
familiarity so like that could be

00:25:09,279 --> 00:25:13,760
javascript that could be java

00:25:11,679 --> 00:25:14,960
or python one of those three are most

00:25:13,760 --> 00:25:16,400
likely what you're going to be using to

00:25:14,960 --> 00:25:18,720
write to be writing tests

00:25:16,400 --> 00:25:20,320
so that would be my recommendation so i

00:25:18,720 --> 00:25:21,600
would say for male side of it like

00:25:20,320 --> 00:25:23,440
just kind of going through and testing a

00:25:21,600 --> 00:25:23,679
lot of apps and just kind of like having

00:25:23,440 --> 00:25:26,159
a

00:25:23,679 --> 00:25:27,600
keen attention to detail in terms of the

00:25:26,159 --> 00:25:29,919
automation side looking at things like

00:25:27,600 --> 00:25:32,240
test automation and linda they have like

00:25:29,919 --> 00:25:33,760
um paths of data so you can kind of just

00:25:32,240 --> 00:25:35,520
follow those video courses to kind of

00:25:33,760 --> 00:25:38,000
get a good sense of where to kind of go

00:25:35,520 --> 00:25:38,000
from there

00:25:39,600 --> 00:25:43,200
there was a question from nikolai did

00:25:41,039 --> 00:25:44,799
you answer the one i i read it but i

00:25:43,200 --> 00:25:45,520
realized that i got disconnected for a

00:25:44,799 --> 00:25:47,360
second

00:25:45,520 --> 00:25:49,039
yep i'm gonna read the next one so the

00:25:47,360 --> 00:25:50,720
next one is do you think

00:25:49,039 --> 00:25:52,559
that testing is useful in a project

00:25:50,720 --> 00:25:55,440
phase where things are largely

00:25:52,559 --> 00:25:56,640
undefined and prone to change um that's

00:25:55,440 --> 00:25:58,880
actually kind of like the

00:25:56,640 --> 00:26:00,320
the previous project i worked on mobile

00:25:58,880 --> 00:26:01,039
team like me four years ago that's kind

00:26:00,320 --> 00:26:03,120
of a lot

00:26:01,039 --> 00:26:06,159
where that's kind of where we were at

00:26:03,120 --> 00:26:08,400
like things were very largely undefined

00:26:06,159 --> 00:26:10,799
and i want to say yes in different ways

00:26:08,400 --> 00:26:13,120
so i think um

00:26:10,799 --> 00:26:14,559
we did like a lot of like kind of ad hoc

00:26:13,120 --> 00:26:16,960
random testing

00:26:14,559 --> 00:26:18,720
and i think it is important because i

00:26:16,960 --> 00:26:20,559
think you learn more about your project

00:26:18,720 --> 00:26:21,760
and how to incorporate it later

00:26:20,559 --> 00:26:23,679
i think what you're going to find in the

00:26:21,760 --> 00:26:24,320
early project phase is that it's a lot

00:26:23,679 --> 00:26:26,799
harder

00:26:24,320 --> 00:26:27,840
to have a specific amount of time we can

00:26:26,799 --> 00:26:30,640
kind of just like

00:26:27,840 --> 00:26:31,039
sit down and like do full testing all

00:26:30,640 --> 00:26:32,480
day

00:26:31,039 --> 00:26:34,320
or like make sure all things work and

00:26:32,480 --> 00:26:36,320
get approval like that typically

00:26:34,320 --> 00:26:38,000
if you're in the environment of like

00:26:36,320 --> 00:26:39,919
i've done non-profit work so like

00:26:38,000 --> 00:26:41,600
helping like um volunteering to help

00:26:39,919 --> 00:26:43,679
nonprofits and such it's a lot harder to

00:26:41,600 --> 00:26:46,240
kind of get that in stone

00:26:43,679 --> 00:26:47,520
but i do believe that like you should

00:26:46,240 --> 00:26:48,720
still do testing and testing doesn't

00:26:47,520 --> 00:26:50,000
necessarily need to mean that you are

00:26:48,720 --> 00:26:51,360
writing automated tests or

00:26:50,000 --> 00:26:53,120
manually going through an application

00:26:51,360 --> 00:26:54,080
and testing it it might literally just

00:26:53,120 --> 00:26:55,200
mean that you can ask for more

00:26:54,080 --> 00:26:56,480
clarification

00:26:55,200 --> 00:26:58,720
during discovery so if you're in the

00:26:56,480 --> 00:27:01,520
early project phase i found a lot of

00:26:58,720 --> 00:27:02,799
times asking questions such as

00:27:01,520 --> 00:27:05,039
you know where are we going to put that

00:27:02,799 --> 00:27:07,440
code you know for instance

00:27:05,039 --> 00:27:09,360
is helpful because sometimes we we learn

00:27:07,440 --> 00:27:10,159
that like if we develop in a specific

00:27:09,360 --> 00:27:12,880
way

00:27:10,159 --> 00:27:14,640
that it will hinder other teams right so

00:27:12,880 --> 00:27:16,720
for example at work like

00:27:14,640 --> 00:27:18,480
a few years ago we wanted to create a

00:27:16,720 --> 00:27:21,200
pilot feature and we wanted to

00:27:18,480 --> 00:27:22,559
put it in our back end services um but

00:27:21,200 --> 00:27:23,919
if we put in our background services

00:27:22,559 --> 00:27:25,279
every client would have consumed the

00:27:23,919 --> 00:27:28,399
information and it would have caused

00:27:25,279 --> 00:27:30,720
bugs across like four or five you know

00:27:28,399 --> 00:27:32,320
like live clients out in production so

00:27:30,720 --> 00:27:33,360
like that's a case where like

00:27:32,320 --> 00:27:34,880
even though what we were building at

00:27:33,360 --> 00:27:36,159
that time was largely undefined simply

00:27:34,880 --> 00:27:36,960
asking questions about what it's

00:27:36,159 --> 00:27:39,039
supposed to do

00:27:36,960 --> 00:27:40,799
can kind of help reduce the amount of

00:27:39,039 --> 00:27:42,240
bugs that you see out there

00:27:40,799 --> 00:27:44,000
um in public which i think is really

00:27:42,240 --> 00:27:46,640
important um

00:27:44,000 --> 00:27:48,720
and prone to change so i think the

00:27:46,640 --> 00:27:50,480
points of change more applies to like

00:27:48,720 --> 00:27:52,080
things such as like writing tests

00:27:50,480 --> 00:27:53,440
whether that's male tests or automation

00:27:52,080 --> 00:27:56,960
tests

00:27:53,440 --> 00:27:58,000
um i would say that it's the same thing

00:27:56,960 --> 00:27:58,880
about has to be a different

00:27:58,000 --> 00:28:02,000
implementation

00:27:58,880 --> 00:28:03,840
so what i mean by that is that when

00:28:02,000 --> 00:28:05,679
you're writing manual tests

00:28:03,840 --> 00:28:07,919
i would say keep them kind of rough if

00:28:05,679 --> 00:28:09,600
you know your project is prone to change

00:28:07,919 --> 00:28:11,520
and even though that's not the maybe the

00:28:09,600 --> 00:28:13,120
best answer is i find that like in the

00:28:11,520 --> 00:28:14,880
cases where things are prone to change i

00:28:13,120 --> 00:28:17,440
would find myself updating test cases

00:28:14,880 --> 00:28:18,880
very frequently all the time but i feel

00:28:17,440 --> 00:28:20,480
like if we are iterating to

00:28:18,880 --> 00:28:22,240
make things kind of somewhat open to

00:28:20,480 --> 00:28:23,679
interpretation but still within the

00:28:22,240 --> 00:28:24,640
reason of like what you're trying to

00:28:23,679 --> 00:28:26,159
test

00:28:24,640 --> 00:28:27,279
because what i found is that gives me

00:28:26,159 --> 00:28:29,200
two values it gives me like the

00:28:27,279 --> 00:28:30,399
exploratory side of it so people kind of

00:28:29,200 --> 00:28:31,600
doing things that we're not necessarily

00:28:30,399 --> 00:28:33,200
predicting for

00:28:31,600 --> 00:28:34,960
but still testing the checks of what we

00:28:33,200 --> 00:28:35,600
want to and then as as things are more

00:28:34,960 --> 00:28:37,039
refined

00:28:35,600 --> 00:28:40,799
that's when i'll have the test cases

00:28:37,039 --> 00:28:44,880
more find and automation testing as well

00:28:40,799 --> 00:28:47,440
all right um

00:28:44,880 --> 00:28:48,480
so um the next question for connor was

00:28:47,440 --> 00:28:50,640
in what ways

00:28:48,480 --> 00:28:54,480
is mobile testing different or even more

00:28:50,640 --> 00:28:54,480
challenging than other kind of testing

00:28:55,279 --> 00:29:00,720
i would say

00:28:58,720 --> 00:29:04,320
it's different in many ways and

00:29:00,720 --> 00:29:04,320
challenging because i find um

00:29:05,039 --> 00:29:08,720
so the first thing i found with mobile

00:29:07,120 --> 00:29:10,399
testing is that

00:29:08,720 --> 00:29:13,600
it's a lot more predictable now but

00:29:10,399 --> 00:29:15,520
previously it was not very predictable

00:29:13,600 --> 00:29:17,200
um i think when i first started using

00:29:15,520 --> 00:29:18,640
appium there were a lot of like things

00:29:17,200 --> 00:29:20,799
that were not so great about it

00:29:18,640 --> 00:29:22,559
sometimes it couldn't necessarily access

00:29:20,799 --> 00:29:24,159
certain elements in the screen

00:29:22,559 --> 00:29:25,520
um and also and i would not only say

00:29:24,159 --> 00:29:27,279
this about appian i would say that was

00:29:25,520 --> 00:29:28,080
true of every testing framework and this

00:29:27,279 --> 00:29:31,440
was maybe around

00:29:28,080 --> 00:29:32,880
2015 2016. that like the testing

00:29:31,440 --> 00:29:34,880
frameworks that were meant to be there

00:29:32,880 --> 00:29:36,960
for testing like were not

00:29:34,880 --> 00:29:38,240
the greatest ones to be using because

00:29:36,960 --> 00:29:39,440
they didn't always seem to be very

00:29:38,240 --> 00:29:41,600
reliable

00:29:39,440 --> 00:29:42,720
i also found that there's also the cases

00:29:41,600 --> 00:29:44,799
of like

00:29:42,720 --> 00:29:46,640
versus like when i did web previously is

00:29:44,799 --> 00:29:47,600
that for mobile development there is a

00:29:46,640 --> 00:29:50,640
new os

00:29:47,600 --> 00:29:52,080
update every single year like that is

00:29:50,640 --> 00:29:54,000
guaranteed and i know it's different for

00:29:52,080 --> 00:29:55,520
what but like what it literally means

00:29:54,000 --> 00:29:57,200
for mobile is that that can either

00:29:55,520 --> 00:29:59,600
change implementation

00:29:57,200 --> 00:30:02,480
or deprecate apis pretty immediately and

00:29:59,600 --> 00:30:05,120
it is and i think the difference is

00:30:02,480 --> 00:30:06,320
you might have a legacy system in in web

00:30:05,120 --> 00:30:08,320
or with the background service that you

00:30:06,320 --> 00:30:09,200
can probably keep version at a specific

00:30:08,320 --> 00:30:10,559
version

00:30:09,200 --> 00:30:11,679
for a long amount of time but the

00:30:10,559 --> 00:30:13,120
difference with mobile is that you don't

00:30:11,679 --> 00:30:14,399
really have that ability to kind of just

00:30:13,120 --> 00:30:15,600
say that we're going to use an old

00:30:14,399 --> 00:30:18,799
version of this api

00:30:15,600 --> 00:30:20,640
infinitely because for instance on ios

00:30:18,799 --> 00:30:22,159
every single year that is like a new

00:30:20,640 --> 00:30:23,520
upgrade for a new system

00:30:22,159 --> 00:30:25,520
so you have to update to be using the

00:30:23,520 --> 00:30:27,200
latest things and for android why is

00:30:25,520 --> 00:30:28,720
slower that is also very important so

00:30:27,200 --> 00:30:30,240
like one thing i found

00:30:28,720 --> 00:30:31,919
hardest with mobile testing is kind of

00:30:30,240 --> 00:30:33,279
keeping up to date

00:30:31,919 --> 00:30:35,120
also the fact with mobile is that

00:30:33,279 --> 00:30:36,000
they're just more parameters of things

00:30:35,120 --> 00:30:38,720
that people could be

00:30:36,000 --> 00:30:39,679
doing that you're not planning for right

00:30:38,720 --> 00:30:41,440
like we

00:30:39,679 --> 00:30:44,159
i think i remember us trying to test a

00:30:41,440 --> 00:30:44,880
bug not to do with when another app was

00:30:44,159 --> 00:30:46,080
opened

00:30:44,880 --> 00:30:47,600
like there was some issue with our

00:30:46,080 --> 00:30:49,200
application and it was just hard to

00:30:47,600 --> 00:30:50,880
replicate so we were just kind of like

00:30:49,200 --> 00:30:52,159
me and uh lead dev just were just

00:30:50,880 --> 00:30:53,440
walking around the building

00:30:52,159 --> 00:30:56,000
trying to figure out if you could get

00:30:53,440 --> 00:30:57,840
like a a dead spot to kind of test the

00:30:56,000 --> 00:30:59,120
scenarios like you're more likely to

00:30:57,840 --> 00:31:00,159
come across things that you would

00:30:59,120 --> 00:31:01,440
probably never experience on your own

00:31:00,159 --> 00:31:02,720
mobile device when you're doing mobile

00:31:01,440 --> 00:31:04,480
testing

00:31:02,720 --> 00:31:06,399
and depending on the severity of those

00:31:04,480 --> 00:31:08,720
things it can lead to a very positive or

00:31:06,399 --> 00:31:10,080
pretty negative user experience

00:31:08,720 --> 00:31:11,760
um and also the fact that mobile

00:31:10,080 --> 00:31:13,120
interacts with many things so mobile

00:31:11,760 --> 00:31:14,640
testing could be a mobile app it could

00:31:13,120 --> 00:31:16,480
mean mobile web it could mean a

00:31:14,640 --> 00:31:18,159
progressive web app

00:31:16,480 --> 00:31:20,399
and depending on the technology you have

00:31:18,159 --> 00:31:20,960
different constraints and maybe you have

00:31:20,399 --> 00:31:22,640
like

00:31:20,960 --> 00:31:24,320
um an external part like for instance

00:31:22,640 --> 00:31:26,559
sometimes there's a place to have like

00:31:24,320 --> 00:31:27,840
an android extension or you could have

00:31:26,559 --> 00:31:30,240
like um

00:31:27,840 --> 00:31:31,519
a smartwatch app so that's also part of

00:31:30,240 --> 00:31:32,559
your mobile testing platform something

00:31:31,519 --> 00:31:34,159
you need to add

00:31:32,559 --> 00:31:35,760
so the biggest thing i would say is the

00:31:34,159 --> 00:31:36,960
fact the biggest the biggest struggle

00:31:35,760 --> 00:31:37,919
with mobile testing i would say is

00:31:36,960 --> 00:31:39,519
keeping up

00:31:37,919 --> 00:31:40,960
so the technology has advanced and i

00:31:39,519 --> 00:31:42,880
think that if you're using app bm or

00:31:40,960 --> 00:31:44,480
espresso or xc test that will get you a

00:31:42,880 --> 00:31:46,080
large a large amount of way in terms of

00:31:44,480 --> 00:31:47,440
like automated testing

00:31:46,080 --> 00:31:49,039
in terms of manual testing there's a lot

00:31:47,440 --> 00:31:50,159
of cloud devices out there for instance

00:31:49,039 --> 00:31:51,679
i know like one thing that

00:31:50,159 --> 00:31:52,880
i've used in the past the browser stack

00:31:51,679 --> 00:31:54,000
is good if you just kind of want to like

00:31:52,880 --> 00:31:56,240
test other devices

00:31:54,000 --> 00:31:57,600
actually having other devices so there

00:31:56,240 --> 00:31:58,640
are a lot of tools and technologies out

00:31:57,600 --> 00:32:00,559
there to help you

00:31:58,640 --> 00:32:01,760
but i think like the largest thing that

00:32:00,559 --> 00:32:03,360
you're going to find is that there's a

00:32:01,760 --> 00:32:04,960
lot of scenarios so this is a case where

00:32:03,360 --> 00:32:06,320
i would kind of say work with

00:32:04,960 --> 00:32:08,240
work with your product manager if you

00:32:06,320 --> 00:32:09,440
have a data team if not and you can if

00:32:08,240 --> 00:32:10,320
you're doing mobile i would say just

00:32:09,440 --> 00:32:11,679
kind of check

00:32:10,320 --> 00:32:13,519
your app store and place your comments

00:32:11,679 --> 00:32:14,000
to see what people are doing and kind of

00:32:13,519 --> 00:32:15,679
use that

00:32:14,000 --> 00:32:18,159
to inform where you focus your testing

00:32:15,679 --> 00:32:18,159
efforts

00:32:19,039 --> 00:32:26,080
all right and i want to go

00:32:22,159 --> 00:32:27,360
to the last question i think i've gotten

00:32:26,080 --> 00:32:29,919
here

00:32:27,360 --> 00:32:32,240
was are there any specific things to pay

00:32:29,919 --> 00:32:35,120
attention when testing apis

00:32:32,240 --> 00:32:37,360
how to identify api issues other than

00:32:35,120 --> 00:32:39,360
testing work like http success or

00:32:37,360 --> 00:32:40,480
failure codes

00:32:39,360 --> 00:32:41,679
that's actually a good question and

00:32:40,480 --> 00:32:42,960
that's something i've been working on a

00:32:41,679 --> 00:32:44,960
lot recently

00:32:42,960 --> 00:32:47,760
um so i think initially first year i was

00:32:44,960 --> 00:32:50,000
mostly just testing success or failures

00:32:47,760 --> 00:32:51,840
um and i think one guiding principle

00:32:50,000 --> 00:32:53,120
i've kind of had in terms of more of the

00:32:51,840 --> 00:32:56,559
functional side of it

00:32:53,120 --> 00:32:58,320
is you know like um

00:32:56,559 --> 00:32:59,760
other than testing like status codes

00:32:58,320 --> 00:33:00,640
i've also started just kind of testing

00:32:59,760 --> 00:33:02,399
you know like

00:33:00,640 --> 00:33:04,159
for instance if it's an api and you're

00:33:02,399 --> 00:33:06,000
testing a query for a service i'll kind

00:33:04,159 --> 00:33:07,760
of ask myself you know

00:33:06,000 --> 00:33:10,000
like what are the most important you

00:33:07,760 --> 00:33:11,840
know attributes and this response

00:33:10,000 --> 00:33:13,679
and that just might mean like maybe

00:33:11,840 --> 00:33:15,760
you're searching on google

00:33:13,679 --> 00:33:16,880
right and like for instance you need to

00:33:15,760 --> 00:33:19,200
make sure and you want to

00:33:16,880 --> 00:33:20,720
maybe a google search result returns 20

00:33:19,200 --> 00:33:24,480
responses right

00:33:20,720 --> 00:33:26,399
so like you could set you know

00:33:24,480 --> 00:33:27,760
a test where you kind of just say like

00:33:26,399 --> 00:33:29,840
ensure that you get 20

00:33:27,760 --> 00:33:31,440
thing you know ensure that you know you

00:33:29,840 --> 00:33:32,159
have a valid response when you hit this

00:33:31,440 --> 00:33:33,919
end point

00:33:32,159 --> 00:33:35,440
if you're using something like postman i

00:33:33,919 --> 00:33:36,720
think it's good to maybe even just write

00:33:35,440 --> 00:33:38,000
a test that says like

00:33:36,720 --> 00:33:40,399
verify that there are actually 20

00:33:38,000 --> 00:33:42,240
elements of the response so i mean

00:33:40,399 --> 00:33:43,760
in theory like you'll have unit coverage

00:33:42,240 --> 00:33:45,279
and you'll have like maybe some type of

00:33:43,760 --> 00:33:46,799
integration coverage elsewhere that will

00:33:45,279 --> 00:33:48,320
cover these things but i think the

00:33:46,799 --> 00:33:49,760
difference there is that

00:33:48,320 --> 00:33:51,440
say for you if you're using it to like

00:33:49,760 --> 00:33:52,720
postman or if you i've also used things

00:33:51,440 --> 00:33:56,480
like sub ui

00:33:52,720 --> 00:33:57,760
or um jmeter in the past as well and

00:33:56,480 --> 00:33:58,880
those are kind of like work with

00:33:57,760 --> 00:34:00,240
interfacing like

00:33:58,880 --> 00:34:02,240
verify that when you make actual

00:34:00,240 --> 00:34:03,519
connections to like what you want like

00:34:02,240 --> 00:34:04,720
your actual service whether it's on a

00:34:03,519 --> 00:34:06,080
staging environment

00:34:04,720 --> 00:34:08,079
i prefer it to be on stage environment

00:34:06,080 --> 00:34:10,320
not production obviously that you get

00:34:08,079 --> 00:34:11,839
back what you expect in more detail

00:34:10,320 --> 00:34:13,760
so right like i think i would and that's

00:34:11,839 --> 00:34:15,040
the case where i kind of ask yourself

00:34:13,760 --> 00:34:17,200
what is the purpose that this query is

00:34:15,040 --> 00:34:18,720
supposed to deliver so i think and

00:34:17,200 --> 00:34:21,200
rather than just saying for me for

00:34:18,720 --> 00:34:23,679
instance like i make a role

00:34:21,200 --> 00:34:24,480
that always tests above status codes but

00:34:23,679 --> 00:34:27,280
below func

00:34:24,480 --> 00:34:28,399
but below full end functionality so for

00:34:27,280 --> 00:34:30,879
instance if it was

00:34:28,399 --> 00:34:32,079
the idea of the exciting form i might i

00:34:30,879 --> 00:34:33,359
may and it was just like

00:34:32,079 --> 00:34:35,599
hitting some end point and verifying

00:34:33,359 --> 00:34:39,040
that there's response i might

00:34:35,599 --> 00:34:40,079
say like you know test that you put this

00:34:39,040 --> 00:34:41,919
response

00:34:40,079 --> 00:34:43,520
verify that these two fields like with

00:34:41,919 --> 00:34:45,599
this data and verify that these two

00:34:43,520 --> 00:34:47,679
fields like an email and password feel

00:34:45,599 --> 00:34:49,599
are filled out i might not necessarily

00:34:47,679 --> 00:34:51,040
say specifically you know like email

00:34:49,599 --> 00:34:52,320
value has to equal our password value

00:34:51,040 --> 00:34:53,280
has to equal this because i've also

00:34:52,320 --> 00:34:55,280
found that that leases

00:34:53,280 --> 00:34:56,800
failures pretty easily especially if

00:34:55,280 --> 00:34:57,680
you're depending on test data which can

00:34:56,800 --> 00:35:00,400
be kind of like

00:34:57,680 --> 00:35:00,960
fuzzy and not guaranteed but i would say

00:35:00,400 --> 00:35:02,240
like

00:35:00,960 --> 00:35:04,400
think about the business case of the

00:35:02,240 --> 00:35:05,119
endpoint that you're hitting and so like

00:35:04,400 --> 00:35:07,599
always go

00:35:05,119 --> 00:35:08,320
above status codes um but like kind of

00:35:07,599 --> 00:35:10,079
like below

00:35:08,320 --> 00:35:11,920
end to end functionality and kind of

00:35:10,079 --> 00:35:13,599
like find a good middle ground

00:35:11,920 --> 00:35:15,359
um it's kind of where i've got in terms

00:35:13,599 --> 00:35:16,480
of like useful testing because even if

00:35:15,359 --> 00:35:19,520
you have end-to-end

00:35:16,480 --> 00:35:20,560
ui tests ui tests can sometimes be flaky

00:35:19,520 --> 00:35:22,000
but when it comes to more of the

00:35:20,560 --> 00:35:23,599
debugging purpose like that's

00:35:22,000 --> 00:35:24,960
another product case that you might have

00:35:23,599 --> 00:35:25,760
like we don't want to have a large

00:35:24,960 --> 00:35:27,920
amount of maintenance

00:35:25,760 --> 00:35:29,599
is another use case you could have right

00:35:27,920 --> 00:35:32,240
so like you might say that like

00:35:29,599 --> 00:35:32,800
it's easier for you to run you know i

00:35:32,240 --> 00:35:34,640
like

00:35:32,800 --> 00:35:36,079
like these uh api tests on a more

00:35:34,640 --> 00:35:37,680
consistent basis and they take a short

00:35:36,079 --> 00:35:39,760
amount of time to verify

00:35:37,680 --> 00:35:41,680
a component of like a larger end to end

00:35:39,760 --> 00:35:43,040
flow so that's the case where i would

00:35:41,680 --> 00:35:43,599
actually kind of be focusing on just

00:35:43,040 --> 00:35:45,920
like

00:35:43,599 --> 00:35:47,599
what is this like endpoint supposed to

00:35:45,920 --> 00:35:48,880
do what is the value supposed to be here

00:35:47,599 --> 00:35:50,160
and like see if you can just write a

00:35:48,880 --> 00:35:51,680
case for that

00:35:50,160 --> 00:35:54,640
um so that's kind of like where i would

00:35:51,680 --> 00:35:54,640
kind of focus on there

00:35:54,960 --> 00:35:59,920
um are there any questions or if there

00:35:58,000 --> 00:36:01,599
are there anything that i've said that

00:35:59,920 --> 00:36:03,040
should be more clarified

00:36:01,599 --> 00:36:05,040
would you have one more question from

00:36:03,040 --> 00:36:06,480
connor uh what kinds of things would be

00:36:05,040 --> 00:36:10,720
manually tested rather than

00:36:06,480 --> 00:36:12,800
automatically and vice versa um

00:36:10,720 --> 00:36:14,800
all right i guess for me i would say

00:36:12,800 --> 00:36:18,079
that like

00:36:14,800 --> 00:36:19,520
for autumn for uh for

00:36:18,079 --> 00:36:21,839
when i'm choosing between mango and i

00:36:19,520 --> 00:36:24,480
made a test i would say that like

00:36:21,839 --> 00:36:26,320
i think about that like like the value

00:36:24,480 --> 00:36:28,560
the value the test will bring

00:36:26,320 --> 00:36:30,640
and also like the overall focus so what

00:36:28,560 --> 00:36:31,599
i mean by that is like safe as a case of

00:36:30,640 --> 00:36:34,560
mobile

00:36:31,599 --> 00:36:35,280
right and i might want to test um the

00:36:34,560 --> 00:36:37,920
ability

00:36:35,280 --> 00:36:38,640
for i guess voice frameworks is the

00:36:37,920 --> 00:36:40,320
thing that's

00:36:38,640 --> 00:36:41,680
not new new but it's like definitely

00:36:40,320 --> 00:36:43,599
getting a lot more trash in the past few

00:36:41,680 --> 00:36:45,280
years so maybe you're testing

00:36:43,599 --> 00:36:47,119
the ability to use siri in your app or

00:36:45,280 --> 00:36:52,320
the ability to use

00:36:47,119 --> 00:36:53,280
um or the ability to use uh

00:36:52,320 --> 00:36:54,640
the google one i don't know what i'm

00:36:53,280 --> 00:36:56,000
thinking but but you're testing the

00:36:54,640 --> 00:36:58,240
blades you're kind of a google assistant

00:36:56,000 --> 00:37:00,800
is what you're testing ability for right

00:36:58,240 --> 00:37:02,480
so that might be a case where you know i

00:37:00,800 --> 00:37:04,000
think i think as of now

00:37:02,480 --> 00:37:05,520
um the testing frameworks are more

00:37:04,000 --> 00:37:06,400
mature for both of those for the place

00:37:05,520 --> 00:37:08,240
to use voice

00:37:06,400 --> 00:37:09,599
right but think about the fact that the

00:37:08,240 --> 00:37:11,040
user case of this thing

00:37:09,599 --> 00:37:12,720
i would say that that might be a case

00:37:11,040 --> 00:37:16,000
where i could say that i might have

00:37:12,720 --> 00:37:18,880
a bare minimum you know amount of

00:37:16,000 --> 00:37:20,240
uh like uh automated test coverage

00:37:18,880 --> 00:37:22,880
because maybe you're testing like

00:37:20,240 --> 00:37:24,960
given this query that you know you get

00:37:22,880 --> 00:37:25,760
some response but the reality is one

00:37:24,960 --> 00:37:27,440
thing i know

00:37:25,760 --> 00:37:28,640
like in my experience from using like

00:37:27,440 --> 00:37:29,520
you know just the google home in my

00:37:28,640 --> 00:37:31,520
house right

00:37:29,520 --> 00:37:33,280
that sometimes if i'm asking for music

00:37:31,520 --> 00:37:34,800
and it's not you know us music so let's

00:37:33,280 --> 00:37:36,320
say if i'm asking for nigerian music and

00:37:34,800 --> 00:37:38,320
it can't find the artist

00:37:36,320 --> 00:37:39,760
i find that kind of very hard to like

00:37:38,320 --> 00:37:41,280
use as a user

00:37:39,760 --> 00:37:43,760
so that's the case where i might

00:37:41,280 --> 00:37:45,440
advocate for more manual testing

00:37:43,760 --> 00:37:46,880
um and there also are services that will

00:37:45,440 --> 00:37:48,160
allow you to kind of like expand on

00:37:46,880 --> 00:37:50,320
manual testing so if you need to

00:37:48,160 --> 00:37:52,320
outsource it i think that is okay

00:37:50,320 --> 00:37:55,040
but i would say like for like for

00:37:52,320 --> 00:37:58,240
automated stuff i would say

00:37:55,040 --> 00:38:00,079
automate what you can that is an easy

00:37:58,240 --> 00:38:01,359
that is an easy check so you can focus

00:38:00,079 --> 00:38:02,880
on other things

00:38:01,359 --> 00:38:05,839
right so in the case the question

00:38:02,880 --> 00:38:07,599
earlier when they talked about apis

00:38:05,839 --> 00:38:09,040
i would automate checking your error

00:38:07,599 --> 00:38:11,920
responses right because

00:38:09,040 --> 00:38:13,440
i don't think that like because i feel

00:38:11,920 --> 00:38:15,119
like that is an easy check like you

00:38:13,440 --> 00:38:15,599
don't need a client to verify that you

00:38:15,119 --> 00:38:17,599
know

00:38:15,599 --> 00:38:19,520
give give this you know maybe you're

00:38:17,599 --> 00:38:20,320
giving like an endpoint or an api bad

00:38:19,520 --> 00:38:22,160
data

00:38:20,320 --> 00:38:23,440
you should get some arrow back maybe the

00:38:22,160 --> 00:38:25,920
error is just you know

00:38:23,440 --> 00:38:27,359
500 and that's fine like that's a very

00:38:25,920 --> 00:38:28,880
simple error so i would say automate the

00:38:27,359 --> 00:38:31,599
easy stuff that still

00:38:28,880 --> 00:38:32,960
that gives end value and then what you

00:38:31,599 --> 00:38:33,760
manually test is i feel like if you're

00:38:32,960 --> 00:38:35,359
spending more time

00:38:33,760 --> 00:38:37,920
trying to maybe test the thing that you

00:38:35,359 --> 00:38:41,599
want to deliver versus actually

00:38:37,920 --> 00:38:43,760
um i guess a better way to phrase it is

00:38:41,599 --> 00:38:46,160
if you're spending more time trying to

00:38:43,760 --> 00:38:48,000
automate a manual test

00:38:46,160 --> 00:38:49,440
that might not be run on a consistent

00:38:48,000 --> 00:38:51,680
basis i recommend

00:38:49,440 --> 00:38:53,920
do that manually to begin with and then

00:38:51,680 --> 00:38:56,079
based off your data kind of revisit

00:38:53,920 --> 00:38:57,520
so i would say that for manual tests for

00:38:56,079 --> 00:38:59,040
me if i if i look

00:38:57,520 --> 00:39:01,119
you know at different testing frameworks

00:38:59,040 --> 00:39:02,560
or tools technologies are available

00:39:01,119 --> 00:39:04,560
and there is not an easy way for me to

00:39:02,560 --> 00:39:07,280
write a test that's gonna involve me

00:39:04,560 --> 00:39:08,640
doing two to three days of like you know

00:39:07,280 --> 00:39:10,079
figuring out how to write the tests

00:39:08,640 --> 00:39:12,240
i always should just kind of be on the

00:39:10,079 --> 00:39:13,520
side of saying that like as of right now

00:39:12,240 --> 00:39:16,240
i want to make sure that we can

00:39:13,520 --> 00:39:18,000
get as much test coverage as possible

00:39:16,240 --> 00:39:20,640
for what gives the most value

00:39:18,000 --> 00:39:21,920
so like i will focus on doing that and

00:39:20,640 --> 00:39:23,440
then i will

00:39:21,920 --> 00:39:25,760
then fall up and say like these two to

00:39:23,440 --> 00:39:28,400
three cases is really hard to automate

00:39:25,760 --> 00:39:30,320
right so i will just mainly test those

00:39:28,400 --> 00:39:31,520
and then maybe a free like i will work

00:39:30,320 --> 00:39:33,200
in um

00:39:31,520 --> 00:39:34,560
sprint so there may be a previous sprint

00:39:33,200 --> 00:39:35,440
like maybe the sprint usually the sprint

00:39:34,560 --> 00:39:37,040
right after

00:39:35,440 --> 00:39:39,200
um i will kind of go back and look and

00:39:37,040 --> 00:39:41,040
say like all right like you know we did

00:39:39,200 --> 00:39:42,000
manual testing we verified we put that

00:39:41,040 --> 00:39:44,480
out there

00:39:42,000 --> 00:39:45,839
like but this specific functionality

00:39:44,480 --> 00:39:48,400
like i really just cannot

00:39:45,839 --> 00:39:50,000
for instance um sometimes with sign in

00:39:48,400 --> 00:39:51,359
there are there's captcha

00:39:50,000 --> 00:39:52,480
so like you might have you might run

00:39:51,359 --> 00:39:53,920
into an issue that if you're using an

00:39:52,480 --> 00:39:55,599
automated testing framework

00:39:53,920 --> 00:39:56,960
you can't really get around the fact

00:39:55,599 --> 00:39:58,560
that it kind of recognizes that

00:39:56,960 --> 00:40:00,640
it's like a robot testing versus an

00:39:58,560 --> 00:40:02,079
actual person so in that case i might

00:40:00,640 --> 00:40:03,040
literally just say that like you know as

00:40:02,079 --> 00:40:04,560
of right now

00:40:03,040 --> 00:40:07,200
my test is just going to validate that

00:40:04,560 --> 00:40:08,720
there are input fields on the screen

00:40:07,200 --> 00:40:10,160
and then i will validate that actually

00:40:08,720 --> 00:40:11,920
clicking the button and then i will come

00:40:10,160 --> 00:40:14,480
back and like look at it again

00:40:11,920 --> 00:40:15,520
so i would say that like i've seen a lot

00:40:14,480 --> 00:40:17,359
of cases where

00:40:15,520 --> 00:40:20,160
you know developers or q engineers try

00:40:17,359 --> 00:40:22,319
to like write automated tests or things

00:40:20,160 --> 00:40:23,680
um and it takes a very long time and the

00:40:22,319 --> 00:40:24,720
tests are really faulty and they're not

00:40:23,680 --> 00:40:26,480
reliable

00:40:24,720 --> 00:40:27,760
so i say if you see that pattern that is

00:40:26,480 --> 00:40:28,640
something you want to put as a manual

00:40:27,760 --> 00:40:30,319
test case

00:40:28,640 --> 00:40:32,240
and if the technology is not there for

00:40:30,319 --> 00:40:35,280
you to actually make it automated

00:40:32,240 --> 00:40:36,720
then that is also a good case for a

00:40:35,280 --> 00:40:39,119
manual case so like you might

00:40:36,720 --> 00:40:39,760
say an example for mobile might be um

00:40:39,119 --> 00:40:42,800
also

00:40:39,760 --> 00:40:44,079
using like android auto or carplay it

00:40:42,800 --> 00:40:45,440
might be an example maybe you just have

00:40:44,079 --> 00:40:46,720
a really hard time accessing that part

00:40:45,440 --> 00:40:48,720
of the code base

00:40:46,720 --> 00:40:49,760
or you can't get an emulator or similar

00:40:48,720 --> 00:40:51,280
up with that screen

00:40:49,760 --> 00:40:53,440
so in that case like if you have access

00:40:51,280 --> 00:40:56,480
to a car i feel it's a lot easier

00:40:53,440 --> 00:40:57,119
to um just in that case kind of say like

00:40:56,480 --> 00:40:58,960
hey

00:40:57,119 --> 00:41:01,280
you know like this is a lot harder for

00:40:58,960 --> 00:41:01,920
us to kind of get a similar emulator set

00:41:01,280 --> 00:41:03,440
up

00:41:01,920 --> 00:41:05,280
but like i know locally that i have

00:41:03,440 --> 00:41:08,480
access to the emulator

00:41:05,280 --> 00:41:09,440
for um uh the dev environment for under

00:41:08,480 --> 00:41:11,200
auto or carplay which

00:41:09,440 --> 00:41:12,960
there is a dev environment for both so

00:41:11,200 --> 00:41:15,599
then i would just do that manually

00:41:12,960 --> 00:41:16,160
on your own computer versus like relying

00:41:15,599 --> 00:41:18,000
on

00:41:16,160 --> 00:41:19,359
doing that automated so i guess what i

00:41:18,000 --> 00:41:20,960
guess to kind of like

00:41:19,359 --> 00:41:22,160
round that i would say that if it takes

00:41:20,960 --> 00:41:23,599
you a very long time to write an

00:41:22,160 --> 00:41:25,280
automated test and then you look back

00:41:23,599 --> 00:41:27,200
and you know just to provide value

00:41:25,280 --> 00:41:28,400
make that's a manual test but all but

00:41:27,200 --> 00:41:29,599
always revisit

00:41:28,400 --> 00:41:31,359
so like that's the point that i don't

00:41:29,599 --> 00:41:32,800
think i i should cover in this in the

00:41:31,359 --> 00:41:34,720
presentation but like

00:41:32,800 --> 00:41:36,319
uh one thing i find useful is i i do

00:41:34,720 --> 00:41:37,599
every six months three months or four

00:41:36,319 --> 00:41:39,040
months might be used for use but kind of

00:41:37,599 --> 00:41:40,400
like revisit your tests

00:41:39,040 --> 00:41:42,000
by revisit i don't understand when you

00:41:40,400 --> 00:41:43,599
have to go through every single test but

00:41:42,000 --> 00:41:44,880
if you see there is a case of a test

00:41:43,599 --> 00:41:46,319
that has been filling

00:41:44,880 --> 00:41:48,000
over and over and over again it's

00:41:46,319 --> 00:41:49,520
unreliable i'm i'm

00:41:48,000 --> 00:41:51,920
i'm more the practice of just deleting

00:41:49,520 --> 00:41:54,319
the test because it's been failing over

00:41:51,920 --> 00:41:56,079
and over it's unreliable and no one has

00:41:54,319 --> 00:41:58,079
pushed up enough to fix it so it

00:41:56,079 --> 00:42:00,880
probably is not providing you as much

00:41:58,079 --> 00:42:01,680
value as you might like so you can

00:42:00,880 --> 00:42:04,079
probably just

00:42:01,680 --> 00:42:05,440
not proceed with that test but you can

00:42:04,079 --> 00:42:07,680
also decide that like

00:42:05,440 --> 00:42:09,760
this is providing us value but at this

00:42:07,680 --> 00:42:11,040
time like we just need to rewrite like

00:42:09,760 --> 00:42:12,880
what it's really meant to do

00:42:11,040 --> 00:42:14,079
so then rewrite it and if not delete it

00:42:12,880 --> 00:42:16,319
because

00:42:14,079 --> 00:42:17,520
in a sense what that typically leads to

00:42:16,319 --> 00:42:18,800
is that

00:42:17,520 --> 00:42:21,200
there's a lot of test maintenance on the

00:42:18,800 --> 00:42:22,560
road and then people become they

00:42:21,200 --> 00:42:23,839
like the tests that you have in place

00:42:22,560 --> 00:42:24,960
for automated tests will become

00:42:23,839 --> 00:42:26,560
unreliable

00:42:24,960 --> 00:42:28,000
if the manual test the manual test is

00:42:26,560 --> 00:42:29,760
wrong like that as

00:42:28,000 --> 00:42:31,359
that also kind of gives user confusion

00:42:29,760 --> 00:42:33,040
so if someone like say

00:42:31,359 --> 00:42:34,560
for instance it could be a designer or

00:42:33,040 --> 00:42:36,160
we've had people from other teams

00:42:34,560 --> 00:42:37,839
test our application as well and there's

00:42:36,160 --> 00:42:38,720
manual tests if the mail test is out of

00:42:37,839 --> 00:42:40,800
date like

00:42:38,720 --> 00:42:42,720
that the manual test becomes unreliable

00:42:40,800 --> 00:42:43,280
so i would say that also revisiting your

00:42:42,720 --> 00:42:45,760
tests

00:42:43,280 --> 00:42:47,280
every like some some cycle that works

00:42:45,760 --> 00:42:48,800
with your team so it could be every few

00:42:47,280 --> 00:42:51,200
months it could be

00:42:48,800 --> 00:42:52,480
twice a year whatever that is um it's

00:42:51,200 --> 00:42:53,839
actually a good way to kind of like kind

00:42:52,480 --> 00:42:55,040
of keep that in check

00:42:53,839 --> 00:42:56,640
because if you see that something that

00:42:55,040 --> 00:42:57,839
you automated is just not reliable

00:42:56,640 --> 00:42:59,760
you're like this might just need to be a

00:42:57,839 --> 00:43:02,880
real test that we kind of run

00:42:59,760 --> 00:43:04,560
every few months or something

00:43:02,880 --> 00:43:06,160
so basically to summarize it it would

00:43:04,560 --> 00:43:08,079
depend on what you're testing

00:43:06,160 --> 00:43:10,800
and also with the methodology to make

00:43:08,079 --> 00:43:13,200
sure it still applies and that works

00:43:10,800 --> 00:43:14,480
yeah so so yeah it's a in a nutshell

00:43:13,200 --> 00:43:16,240
like it depends on what you're testing

00:43:14,480 --> 00:43:18,400
and i would say that like

00:43:16,240 --> 00:43:19,680
um i would i would encourage you to if

00:43:18,400 --> 00:43:20,560
there's a way to automate and automate

00:43:19,680 --> 00:43:21,760
doesn't have to be

00:43:20,560 --> 00:43:23,359
through code it could be automate

00:43:21,760 --> 00:43:25,040
through there are other tools that we

00:43:23,359 --> 00:43:28,079
view like rainforest

00:43:25,040 --> 00:43:30,319
or um sourcing out testing

00:43:28,079 --> 00:43:31,680
or even having teams internally or just

00:43:30,319 --> 00:43:33,280
times where we just do it regardless of

00:43:31,680 --> 00:43:34,720
whoever is testing

00:43:33,280 --> 00:43:36,480
right my thought is that like anything

00:43:34,720 --> 00:43:38,000
that is easy to do that provides value

00:43:36,480 --> 00:43:39,280
automate that first and then focus on

00:43:38,000 --> 00:43:40,640
the manual testing

00:43:39,280 --> 00:43:42,480
and what you learned from the automated

00:43:40,640 --> 00:43:43,680
testing should inform your

00:43:42,480 --> 00:43:45,680
what you learned from manual testing

00:43:43,680 --> 00:43:47,119
should inform your menu

00:43:45,680 --> 00:43:48,880
what you learned from your testing

00:43:47,119 --> 00:43:49,839
should inform your automated tests so if

00:43:48,880 --> 00:43:50,880
you find that

00:43:49,839 --> 00:43:52,480
there are more cases that come out of

00:43:50,880 --> 00:43:55,119
manual testing that easy to put in put

00:43:52,480 --> 00:43:57,200
it in if not then just make a time

00:43:55,119 --> 00:43:58,640
on your team or interval where you think

00:43:57,200 --> 00:43:59,440
makes sense to kind of do that manual

00:43:58,640 --> 00:44:01,359
testing

00:43:59,440 --> 00:44:03,359
and as technology matures or is there

00:44:01,359 --> 00:44:04,960
more tools that made available to do it

00:44:03,359 --> 00:44:09,839
easier then kind of use those tools to

00:44:04,960 --> 00:44:09,839

YouTube URL: https://www.youtube.com/watch?v=E6XbYbRH-j4


