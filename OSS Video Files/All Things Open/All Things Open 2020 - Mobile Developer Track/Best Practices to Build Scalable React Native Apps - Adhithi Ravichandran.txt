Title: Best Practices to Build Scalable React Native Apps - Adhithi Ravichandran
Publication date: 2020-12-16
Playlist: All Things Open 2020 - Mobile Developer Track
Description: 
	Presented by: Adhithi Ravichandran, Surya Consulting, Inc.
Presented at All Things Open 2020 - Mobile Developer Track

Abstract: React Native has evolved over the years, and has become a stable framework for building native mobile applications on both iOS and Android. It is one thing to build a simple working app, versus building a scalable app with potentially millions of users.

In this session, I will share my experiences in building React Native apps, and we will learn about the best practices to follow in building scalable, production ready apps. We will explore best practices in building components, styling, third party library integrations, internationalization, performance considerations, deployment, and much more.

By the end of this talk, you will be ready apply these best practices to scale your React Native apps with confidence.
Captions: 
	00:00:05,680 --> 00:00:09,679
hello everyone

00:00:07,680 --> 00:00:12,160
today i'm going to be talking about best

00:00:09,679 --> 00:00:13,679
practices to build scalable react native

00:00:12,160 --> 00:00:16,160
applications

00:00:13,679 --> 00:00:17,680
i'd like to first thank all things open

00:00:16,160 --> 00:00:20,080
for organizing

00:00:17,680 --> 00:00:21,840
this amazing event although it's online

00:00:20,080 --> 00:00:22,960
it takes a lot of effort to put up a

00:00:21,840 --> 00:00:24,640
show like this

00:00:22,960 --> 00:00:27,840
thank you all things open for inviting

00:00:24,640 --> 00:00:30,000
me here to speak and also for organizing

00:00:27,840 --> 00:00:31,359
a remote event like this amidst the

00:00:30,000 --> 00:00:34,399
pandemic it's

00:00:31,359 --> 00:00:36,640
it's great thank you who am i

00:00:34,399 --> 00:00:38,960
i'm aditi ravichandran i'm a software

00:00:36,640 --> 00:00:41,200
consultant based in kansas city

00:00:38,960 --> 00:00:42,399
i primarily work on building react

00:00:41,200 --> 00:00:45,120
native apps

00:00:42,399 --> 00:00:46,000
react apps and i use graphql a lot as

00:00:45,120 --> 00:00:48,399
well

00:00:46,000 --> 00:00:50,360
you can find me on twitter at adhiravi

00:00:48,399 --> 00:00:52,000
or you can visit my website

00:00:50,360 --> 00:00:54,399
aduteravichandrun.com to learn more

00:00:52,000 --> 00:00:54,399
about me

00:00:56,320 --> 00:01:00,719
we all know that react native is used to

00:00:58,800 --> 00:01:04,400
build native cross-platform

00:01:00,719 --> 00:01:07,040
apps primarily on ios and android

00:01:04,400 --> 00:01:08,560
and it uses javascript and react to do

00:01:07,040 --> 00:01:10,240
that

00:01:08,560 --> 00:01:12,320
in this talk i'm going to address some

00:01:10,240 --> 00:01:15,119
lessons concerns

00:01:12,320 --> 00:01:17,439
and just tips that you can use to build

00:01:15,119 --> 00:01:19,119
your react native apps that i've learned

00:01:17,439 --> 00:01:20,560
while building react nato apps in the

00:01:19,119 --> 00:01:23,920
last four years

00:01:20,560 --> 00:01:25,520
let's jump right in the first topic that

00:01:23,920 --> 00:01:28,720
i want to talk about

00:01:25,520 --> 00:01:30,799
is ios versus android

00:01:28,720 --> 00:01:32,479
you see here that these two carton

00:01:30,799 --> 00:01:35,920
characters are fighting

00:01:32,479 --> 00:01:37,840
between ios versus android and

00:01:35,920 --> 00:01:39,119
i'd like to talk about the differences

00:01:37,840 --> 00:01:42,079
that you'll notice

00:01:39,119 --> 00:01:43,840
while building react native apps between

00:01:42,079 --> 00:01:45,759
ios and android

00:01:43,840 --> 00:01:47,360
so we know that we've picked react

00:01:45,759 --> 00:01:49,280
native because we want to build

00:01:47,360 --> 00:01:54,000
cross-platform native apps

00:01:49,280 --> 00:01:56,560
and have the maximum code reuse

00:01:54,000 --> 00:01:58,079
can vouch for the code reuse part of it

00:01:56,560 --> 00:01:59,840
and in the last four years

00:01:58,079 --> 00:02:01,600
with building react native apps i've

00:01:59,840 --> 00:02:05,280
noticed about 90

00:02:01,600 --> 00:02:08,319
code is reused between the two platforms

00:02:05,280 --> 00:02:09,360
this is actually a pretty high number if

00:02:08,319 --> 00:02:11,760
you think about it

00:02:09,360 --> 00:02:12,879
all of your code is entirely written in

00:02:11,760 --> 00:02:15,440
javascript

00:02:12,879 --> 00:02:16,000
using react and you're building android

00:02:15,440 --> 00:02:18,879
apps

00:02:16,000 --> 00:02:20,560
and ios apps and if you're going to get

00:02:18,879 --> 00:02:23,520
between 85 to 90 percent

00:02:20,560 --> 00:02:24,560
of code reuse i think that's a big win

00:02:23,520 --> 00:02:26,800
for us

00:02:24,560 --> 00:02:27,599
and react native is pretty good at that

00:02:26,800 --> 00:02:30,959
which is why

00:02:27,599 --> 00:02:33,120
it is probably popular too but there are

00:02:30,959 --> 00:02:34,800
some challenges that you will see which

00:02:33,120 --> 00:02:38,239
are platform specific

00:02:34,800 --> 00:02:40,000
while developing react native apps

00:02:38,239 --> 00:02:42,239
the first thing you'll notice is the

00:02:40,000 --> 00:02:44,400
tool set if you're not building your

00:02:42,239 --> 00:02:46,560
react native apps using expo

00:02:44,400 --> 00:02:47,599
and if you're using react native cli to

00:02:46,560 --> 00:02:50,239
build your app

00:02:47,599 --> 00:02:52,160
then you'll have a vast variety of tools

00:02:50,239 --> 00:02:54,560
that you have to be familiar with as a

00:02:52,160 --> 00:02:57,519
developer

00:02:54,560 --> 00:02:59,680
while using ios you're going to be

00:02:57,519 --> 00:03:01,519
dealing with xcode a lot

00:02:59,680 --> 00:03:04,159
and while building android apps you're

00:03:01,519 --> 00:03:06,239
going to be using the android studio you

00:03:04,159 --> 00:03:08,319
can't really get away from these tools

00:03:06,239 --> 00:03:11,360
because we need these tools to start up

00:03:08,319 --> 00:03:13,760
our emulators deploy our code and things

00:03:11,360 --> 00:03:13,760
like that

00:03:14,080 --> 00:03:18,080
this is quite a learning curve for

00:03:16,400 --> 00:03:19,280
developers who don't have mobile

00:03:18,080 --> 00:03:21,040
background

00:03:19,280 --> 00:03:22,959
but there are courses that you can take

00:03:21,040 --> 00:03:24,480
on xcode and android studio and

00:03:22,959 --> 00:03:26,159
familiarize yourself

00:03:24,480 --> 00:03:28,400
with them before you start building your

00:03:26,159 --> 00:03:28,400
app

00:03:28,799 --> 00:03:32,560
the next big difference that you'll

00:03:30,239 --> 00:03:34,560
notice while building react native apps

00:03:32,560 --> 00:03:35,920
is that some of the native components

00:03:34,560 --> 00:03:40,080
look very different

00:03:35,920 --> 00:03:41,840
across platform an example on this would

00:03:40,080 --> 00:03:43,840
be the calendar component

00:03:41,840 --> 00:03:47,280
the calendar component would look like

00:03:43,840 --> 00:03:51,040
this on ios and completely different

00:03:47,280 --> 00:03:51,599
on android the strategy that you need to

00:03:51,040 --> 00:03:54,640
use

00:03:51,599 --> 00:03:55,519
is to respect this difference and go

00:03:54,640 --> 00:03:57,920
with it

00:03:55,519 --> 00:04:00,319
because react native is essentially a

00:03:57,920 --> 00:04:01,840
wrapper that's translating the code into

00:04:00,319 --> 00:04:03,360
native components

00:04:01,840 --> 00:04:05,439
so when the native components are

00:04:03,360 --> 00:04:06,879
translated they look different across

00:04:05,439 --> 00:04:09,840
different devices

00:04:06,879 --> 00:04:11,360
because ios and android have different

00:04:09,840 --> 00:04:14,000
design paradigms

00:04:11,360 --> 00:04:16,720
so we want to respect these differences

00:04:14,000 --> 00:04:18,720
and keep them consistent

00:04:16,720 --> 00:04:21,120
you may have clients who may not like

00:04:18,720 --> 00:04:24,000
these differences and may not understand

00:04:21,120 --> 00:04:26,479
that these native components could look

00:04:24,000 --> 00:04:29,680
different across different devices

00:04:26,479 --> 00:04:31,759
the advice is not to try and make an

00:04:29,680 --> 00:04:33,759
ios component look like an android

00:04:31,759 --> 00:04:35,440
component or the vice versa

00:04:33,759 --> 00:04:37,440
because by doing that we're defeating

00:04:35,440 --> 00:04:39,440
the purpose of code reuse

00:04:37,440 --> 00:04:41,600
and that kind of code becomes hard to

00:04:39,440 --> 00:04:42,080
maintain and the performance may not be

00:04:41,600 --> 00:04:43,759
as good

00:04:42,080 --> 00:04:46,000
because they're not native components

00:04:43,759 --> 00:04:48,240
anymore so

00:04:46,000 --> 00:04:49,840
we probably need some kind of education

00:04:48,240 --> 00:04:52,320
for clients who don't understand

00:04:49,840 --> 00:04:52,960
that native components look different on

00:04:52,320 --> 00:04:55,840
different

00:04:52,960 --> 00:04:56,240
platforms and that's just what it comes

00:04:55,840 --> 00:04:58,000
with

00:04:56,240 --> 00:04:59,440
and we also need to explain to them the

00:04:58,000 --> 00:05:01,680
cost that could come

00:04:59,440 --> 00:05:04,320
when we have to make these components

00:05:01,680 --> 00:05:05,759
look very similar across devices

00:05:04,320 --> 00:05:09,840
so this is something that you'll have to

00:05:05,759 --> 00:05:12,000
deal with when you do react native

00:05:09,840 --> 00:05:13,039
other difference that you'll see between

00:05:12,000 --> 00:05:16,639
ios and

00:05:13,039 --> 00:05:18,880
android is the release process for ios

00:05:16,639 --> 00:05:20,880
we would use the apple store for our

00:05:18,880 --> 00:05:21,919
release process and that's usually more

00:05:20,880 --> 00:05:24,560
stringent

00:05:21,919 --> 00:05:25,280
and the review with app store takes a

00:05:24,560 --> 00:05:28,080
few days

00:05:25,280 --> 00:05:29,199
because a physical person is actually

00:05:28,080 --> 00:05:31,120
reviewing your

00:05:29,199 --> 00:05:32,479
app making sure that all the checks and

00:05:31,120 --> 00:05:34,000
balances are there

00:05:32,479 --> 00:05:36,240
whereas when you're gonna release an

00:05:34,000 --> 00:05:38,400
android app it goes through google play

00:05:36,240 --> 00:05:41,120
and it's usually automated and

00:05:38,400 --> 00:05:41,120
very fast

00:05:41,919 --> 00:05:45,199
when we get into the nitty gritty

00:05:43,360 --> 00:05:47,520
details of the code

00:05:45,199 --> 00:05:48,240
there are platform specific styles that

00:05:47,520 --> 00:05:50,960
you could use

00:05:48,240 --> 00:05:53,440
and i find this really useful there's

00:05:50,960 --> 00:05:55,840
what's called the platform dot select

00:05:53,440 --> 00:05:57,520
and i use it a lot to have platform

00:05:55,840 --> 00:05:59,600
specific styles

00:05:57,520 --> 00:06:00,880
if you look at this code snippet here we

00:05:59,600 --> 00:06:02,880
import platform

00:06:00,880 --> 00:06:04,240
an api that comes out of the box with

00:06:02,880 --> 00:06:08,120
react native

00:06:04,240 --> 00:06:09,360
and in my container style here i'm using

00:06:08,120 --> 00:06:12,880
platform.select

00:06:09,360 --> 00:06:13,120
and i'm selecting um ios as a platform

00:06:12,880 --> 00:06:15,280
and

00:06:13,120 --> 00:06:17,600
android as the other platform and i'm

00:06:15,280 --> 00:06:21,440
setting two different background colors

00:06:17,600 --> 00:06:23,759
depending on which platform it is

00:06:21,440 --> 00:06:25,680
code snippets like this are very common

00:06:23,759 --> 00:06:26,319
and you would use them a lot in react

00:06:25,680 --> 00:06:27,919
native

00:06:26,319 --> 00:06:29,680
to deal with some differences that you

00:06:27,919 --> 00:06:32,240
want to tackle between your

00:06:29,680 --> 00:06:35,199
different platforms you could also have

00:06:32,240 --> 00:06:39,280
a platform for your tv and your windows

00:06:35,199 --> 00:06:39,759
as well another feature that you could

00:06:39,280 --> 00:06:42,319
use

00:06:39,759 --> 00:06:43,440
with react native is platform specific

00:06:42,319 --> 00:06:45,759
files

00:06:43,440 --> 00:06:48,039
for instance if you have an extension of

00:06:45,759 --> 00:06:49,520
your file that says my

00:06:48,039 --> 00:06:52,000
mycomponent.ios.js

00:06:49,520 --> 00:06:53,840
that's going to have platform specific

00:06:52,000 --> 00:06:56,520
details for ios

00:06:53,840 --> 00:06:58,240
and a component that says

00:06:56,520 --> 00:06:59,680
mycomponent.android.js is going to be

00:06:58,240 --> 00:07:02,319
your platform

00:06:59,680 --> 00:07:04,400
specific file for android so react

00:07:02,319 --> 00:07:05,759
native is smart enough to detect which

00:07:04,400 --> 00:07:07,680
component to render

00:07:05,759 --> 00:07:09,199
because it can detect the device that

00:07:07,680 --> 00:07:11,120
you're using and if you're using an

00:07:09,199 --> 00:07:11,680
android device it would render the my

00:07:11,120 --> 00:07:14,400
component

00:07:11,680 --> 00:07:14,880
with android.js extension and if you're

00:07:14,400 --> 00:07:17,680
using

00:07:14,880 --> 00:07:18,400
an ios device it would detect it and

00:07:17,680 --> 00:07:21,919
render the

00:07:18,400 --> 00:07:23,440
file appropriately this is a feature

00:07:21,919 --> 00:07:24,960
i've used very rarely

00:07:23,440 --> 00:07:27,120
and some of the developers probably

00:07:24,960 --> 00:07:28,160
never even use this feature but it's out

00:07:27,120 --> 00:07:29,919
there to help you

00:07:28,160 --> 00:07:31,280
if you want some custom code that needs

00:07:29,919 --> 00:07:34,639
to be separated out

00:07:31,280 --> 00:07:34,639
across different files

00:07:36,080 --> 00:07:39,120
some challenges that you would notice

00:07:38,479 --> 00:07:43,199
building

00:07:39,120 --> 00:07:46,160
react native apps cross platform is that

00:07:43,199 --> 00:07:48,160
as developers we're inclined to test on

00:07:46,160 --> 00:07:50,160
our personal devices

00:07:48,160 --> 00:07:51,759
so what ends up happening is if you have

00:07:50,160 --> 00:07:52,560
an iphone you're going to test more on

00:07:51,759 --> 00:07:53,919
iphone

00:07:52,560 --> 00:07:55,840
if you have an android device you're

00:07:53,919 --> 00:07:58,160
going to test more on android device

00:07:55,840 --> 00:07:58,960
leaving the other device to be kind of

00:07:58,160 --> 00:08:01,280
like a

00:07:58,960 --> 00:08:02,479
you know lagging behind so we want to

00:08:01,280 --> 00:08:04,720
avoid that

00:08:02,479 --> 00:08:07,120
and another thing you'll notice is that

00:08:04,720 --> 00:08:08,800
developers run only one emulator at a

00:08:07,120 --> 00:08:11,599
time and that's usually the

00:08:08,800 --> 00:08:12,000
iphone emulator because to run the

00:08:11,599 --> 00:08:14,639
android

00:08:12,000 --> 00:08:15,520
emulator does take up more memory for

00:08:14,639 --> 00:08:18,000
some reason

00:08:15,520 --> 00:08:20,000
and things get slower so we usually just

00:08:18,000 --> 00:08:22,240
run one emulator at a time

00:08:20,000 --> 00:08:24,479
so bugs that come up which you would

00:08:22,240 --> 00:08:28,400
have caught otherwise while development

00:08:24,479 --> 00:08:30,080
are caught later on after deployment

00:08:28,400 --> 00:08:31,520
so some of the strategies that we can

00:08:30,080 --> 00:08:33,599
use to overcome these

00:08:31,520 --> 00:08:35,200
challenges include developing with both

00:08:33,599 --> 00:08:38,479
ios and android

00:08:35,200 --> 00:08:41,120
emulators it's easier said than done

00:08:38,479 --> 00:08:43,360
so what we can do is maybe have few

00:08:41,120 --> 00:08:45,200
developers use ios emulators

00:08:43,360 --> 00:08:47,600
for a week and the other set of

00:08:45,200 --> 00:08:49,760
developers use android emulators

00:08:47,600 --> 00:08:51,040
and then after a week they rotate and

00:08:49,760 --> 00:08:53,200
switch around

00:08:51,040 --> 00:08:54,640
this is just to make sure that we catch

00:08:53,200 --> 00:08:56,880
our issues

00:08:54,640 --> 00:08:58,399
as we could which is the best time to

00:08:56,880 --> 00:09:00,560
catch them and fix them

00:08:58,399 --> 00:09:02,560
instead of having deployed and then

00:09:00,560 --> 00:09:05,839
testing it on a physical device and then

00:09:02,560 --> 00:09:07,920
finding out there's a problem

00:09:05,839 --> 00:09:10,240
the other thing that i highly recommend

00:09:07,920 --> 00:09:13,519
is automating both your android and

00:09:10,240 --> 00:09:14,880
ios releases this would take a huge

00:09:13,519 --> 00:09:17,279
burden away from

00:09:14,880 --> 00:09:18,320
the developer to physically come and try

00:09:17,279 --> 00:09:21,120
to release these things

00:09:18,320 --> 00:09:22,080
instead if all of your release processes

00:09:21,120 --> 00:09:24,080
are automated

00:09:22,080 --> 00:09:27,040
things go by pretty quickly and testing

00:09:24,080 --> 00:09:27,040
is more frequent

00:09:28,160 --> 00:09:32,480
the other tip would be to maximize the

00:09:30,240 --> 00:09:35,360
devices make sure that you get a hold

00:09:32,480 --> 00:09:37,040
of as many different devices as possible

00:09:35,360 --> 00:09:39,360
across different platforms

00:09:37,040 --> 00:09:41,440
different devices of different screen

00:09:39,360 --> 00:09:43,839
widths and heights and so on

00:09:41,440 --> 00:09:45,680
to catch your bugs across different

00:09:43,839 --> 00:09:48,880
devices

00:09:45,680 --> 00:09:51,360
also the rule of thumb is to test early

00:09:48,880 --> 00:09:53,760
and often

00:09:51,360 --> 00:09:54,720
the point i'm trying to make here is

00:09:53,760 --> 00:09:57,760
basically treat

00:09:54,720 --> 00:10:00,000
android and ios as equals and don't try

00:09:57,760 --> 00:10:01,040
to differ testing one or the other based

00:10:00,000 --> 00:10:03,440
on your preference

00:10:01,040 --> 00:10:04,560
because when we do that and find bugs

00:10:03,440 --> 00:10:06,800
later on

00:10:04,560 --> 00:10:07,839
it becomes hard and the turnaround time

00:10:06,800 --> 00:10:10,959
to fix them

00:10:07,839 --> 00:10:10,959
is also pretty slow

00:10:12,079 --> 00:10:15,440
all right so the next topic that i want

00:10:14,240 --> 00:10:18,959
to touch here

00:10:15,440 --> 00:10:21,519
is organizing our styles react native is

00:10:18,959 --> 00:10:24,480
a framework that's heavy on the ui

00:10:21,519 --> 00:10:27,279
and styling is an important piece of

00:10:24,480 --> 00:10:27,279
react native

00:10:27,360 --> 00:10:33,519
let's take a look at this code snippet

00:10:29,200 --> 00:10:36,320
here which does in-line styling

00:10:33,519 --> 00:10:37,519
i have a component called my component

00:10:36,320 --> 00:10:39,440
and i have a

00:10:37,519 --> 00:10:41,120
view and within the view i have some

00:10:39,440 --> 00:10:43,279
text that's getting displayed

00:10:41,120 --> 00:10:45,440
but if you look at this it's not really

00:10:43,279 --> 00:10:46,399
readable there's a lot of stuff going on

00:10:45,440 --> 00:10:49,440
in here

00:10:46,399 --> 00:10:51,680
my view style has been set my textile

00:10:49,440 --> 00:10:53,680
has been set and the style involves a

00:10:51,680 --> 00:10:56,399
lot of stuff like i have flex

00:10:53,680 --> 00:10:58,399
i have a padding a background color fun

00:10:56,399 --> 00:11:00,560
font size and so on

00:10:58,399 --> 00:11:02,160
it's gonna be pretty hard to maintain

00:11:00,560 --> 00:11:04,800
code that looks like this

00:11:02,160 --> 00:11:05,920
because number one it's hard to read and

00:11:04,800 --> 00:11:07,360
number two

00:11:05,920 --> 00:11:09,519
it's going to take me a long time to

00:11:07,360 --> 00:11:10,399
figure out where an issue is and change

00:11:09,519 --> 00:11:14,880
the style

00:11:10,399 --> 00:11:16,800
and this doesn't look reusable at all

00:11:14,880 --> 00:11:18,480
an alternative to this would be to

00:11:16,800 --> 00:11:21,120
organize your styles

00:11:18,480 --> 00:11:23,399
instead of using inline styles in react

00:11:21,120 --> 00:11:24,880
native we use something called

00:11:23,399 --> 00:11:27,040
stylesheet.createmethod

00:11:24,880 --> 00:11:30,160
and on the left side you can see i have

00:11:27,040 --> 00:11:33,839
a separate file called appstyle.js

00:11:30,160 --> 00:11:36,720
and i put all my styles in that file

00:11:33,839 --> 00:11:37,040
and within a component on the right side

00:11:36,720 --> 00:11:39,680
i

00:11:37,040 --> 00:11:40,560
import that style so i'm importing

00:11:39,680 --> 00:11:42,959
styles from

00:11:40,560 --> 00:11:44,240
app style which is a file and i'm

00:11:42,959 --> 00:11:47,200
passing that style

00:11:44,240 --> 00:11:48,240
to my prop style this is a much better

00:11:47,200 --> 00:11:50,720
and cleaner way

00:11:48,240 --> 00:11:51,519
to style your components and keeping

00:11:50,720 --> 00:11:52,880
them separate

00:11:51,519 --> 00:11:54,880
is really cool because then you can

00:11:52,880 --> 00:11:56,160
reuse the style across several

00:11:54,880 --> 00:11:57,519
components and

00:11:56,160 --> 00:11:59,600
if you're reusing them if you're going

00:11:57,519 --> 00:12:00,639
to make one change that change is going

00:11:59,600 --> 00:12:03,600
to reflect upon

00:12:00,639 --> 00:12:04,639
on all the components that you set style

00:12:03,600 --> 00:12:08,639
this is cleaner

00:12:04,639 --> 00:12:10,959
easier to maintain and reusable as well

00:12:08,639 --> 00:12:13,279
let me show a quick example of this in

00:12:10,959 --> 00:12:13,279
action

00:12:18,800 --> 00:12:24,880
notice here that i have a component

00:12:22,240 --> 00:12:26,480
and i displace three boxes box one box

00:12:24,880 --> 00:12:28,160
two and box three

00:12:26,480 --> 00:12:31,120
and notice here that all of the styles

00:12:28,160 --> 00:12:32,720
are passed as a prop to these components

00:12:31,120 --> 00:12:35,120
and they come from a different file

00:12:32,720 --> 00:12:37,839
there's no styling in this file at all

00:12:35,120 --> 00:12:38,880
so if i open appstyle.js you can see all

00:12:37,839 --> 00:12:41,360
of the styling

00:12:38,880 --> 00:12:44,240
for that component being defined here

00:12:41,360 --> 00:12:46,399
within the stylesheet.create method

00:12:44,240 --> 00:12:48,160
this is very consistent with how we

00:12:46,399 --> 00:12:51,200
style react native components

00:12:48,160 --> 00:12:52,880
and you can have several components

00:12:51,200 --> 00:12:57,200
and styles corresponding to those

00:12:52,880 --> 00:12:57,200
components placed in a different file

00:12:57,279 --> 00:13:00,800
to recap organizing your style has

00:12:59,839 --> 00:13:02,480
several perks

00:13:00,800 --> 00:13:05,120
you can reuse your style across

00:13:02,480 --> 00:13:07,440
components write maintainable code

00:13:05,120 --> 00:13:09,760
and one more thing is this kind of code

00:13:07,440 --> 00:13:14,079
is easier to test as well

00:13:09,760 --> 00:13:14,560
all right the next topic that i want to

00:13:14,079 --> 00:13:18,320
touch

00:13:14,560 --> 00:13:20,720
is the one with hooks as you all know

00:13:18,320 --> 00:13:23,040
react has introduced hoax and it's being

00:13:20,720 --> 00:13:25,120
used in react native as well

00:13:23,040 --> 00:13:27,360
these days i've been writing all my

00:13:25,120 --> 00:13:28,320
components as functional components that

00:13:27,360 --> 00:13:30,560
use hooks

00:13:28,320 --> 00:13:33,360
rather than class components it

00:13:30,560 --> 00:13:36,560
definitely makes our code a lot more

00:13:33,360 --> 00:13:38,639
easier to you know read

00:13:36,560 --> 00:13:40,000
and it gets rid of all those life cycle

00:13:38,639 --> 00:13:43,279
methods that we used to use

00:13:40,000 --> 00:13:45,040
previously in class components and

00:13:43,279 --> 00:13:47,279
probably most of us didn't understand

00:13:45,040 --> 00:13:50,399
the life cycle methods very well

00:13:47,279 --> 00:13:52,160
also having the ability to access state

00:13:50,399 --> 00:13:55,760
within a functional component

00:13:52,160 --> 00:13:58,399
using hooks is a big win in my opinion

00:13:55,760 --> 00:14:00,880
and we also definitely see some amount

00:13:58,399 --> 00:14:02,959
of performance improvements with using

00:14:00,880 --> 00:14:04,320
functional components rather than class

00:14:02,959 --> 00:14:06,560
components

00:14:04,320 --> 00:14:07,680
in this section i just wanted to show

00:14:06,560 --> 00:14:09,760
some react

00:14:07,680 --> 00:14:11,600
native specific books that you can

00:14:09,760 --> 00:14:15,519
utilize in your project

00:14:11,600 --> 00:14:17,760
which would be very handy and helpful

00:14:15,519 --> 00:14:19,279
the most common hook that i use is the

00:14:17,760 --> 00:14:20,720
used keyboard hook

00:14:19,279 --> 00:14:22,880
this comes with the react native

00:14:20,720 --> 00:14:23,920
community there is a community repo

00:14:22,880 --> 00:14:26,000
called hooks

00:14:23,920 --> 00:14:28,639
and that has a whole bunch of hooks that

00:14:26,000 --> 00:14:30,480
i use for my react native projects

00:14:28,639 --> 00:14:33,199
the used keyboard hook is one of the

00:14:30,480 --> 00:14:35,120
most frequently used hooks by me

00:14:33,199 --> 00:14:36,959
and that really helps you in telling you

00:14:35,120 --> 00:14:37,920
whether a keyboard is currently

00:14:36,959 --> 00:14:39,680
displayed

00:14:37,920 --> 00:14:42,079
the height of the keyboard and the

00:14:39,680 --> 00:14:44,480
coordinates you know that the mobile has

00:14:42,079 --> 00:14:46,800
very limited real estate and every time

00:14:44,480 --> 00:14:49,199
our virtual keyboard comes up we need to

00:14:46,800 --> 00:14:51,839
account for you know how much space is

00:14:49,199 --> 00:14:54,320
it occupying are other texts visible

00:14:51,839 --> 00:14:55,920
in spite of the keyboard being shown do

00:14:54,320 --> 00:14:57,920
i have to scroll up a little bit

00:14:55,920 --> 00:14:59,360
and things like that every time the

00:14:57,920 --> 00:15:01,279
keyboard is shown the hook is going to

00:14:59,360 --> 00:15:02,160
get updated and the boolean value would

00:15:01,279 --> 00:15:04,399
be true

00:15:02,160 --> 00:15:05,279
and if it's not shown anymore it's going

00:15:04,399 --> 00:15:07,839
to be updated

00:15:05,279 --> 00:15:08,880
and you don't need any event handling

00:15:07,839 --> 00:15:11,120
code

00:15:08,880 --> 00:15:12,000
to figure out those things because

00:15:11,120 --> 00:15:14,800
they're done behind

00:15:12,000 --> 00:15:15,440
the scenes and it definitely makes your

00:15:14,800 --> 00:15:18,480
code less

00:15:15,440 --> 00:15:20,639
verbose the least to say

00:15:18,480 --> 00:15:22,560
the other hook that is very similar to

00:15:20,639 --> 00:15:23,199
the used keyboard is a used dimensions

00:15:22,560 --> 00:15:25,120
hook

00:15:23,199 --> 00:15:27,120
and this would be also from the react

00:15:25,120 --> 00:15:30,399
native community and it can tell you

00:15:27,120 --> 00:15:32,240
your width and height of your window as

00:15:30,399 --> 00:15:34,639
well as the width and height of

00:15:32,240 --> 00:15:36,000
your screen again if the if there are

00:15:34,639 --> 00:15:37,680
any changes

00:15:36,000 --> 00:15:41,440
it's going to account for that and there

00:15:37,680 --> 00:15:43,600
won't be any kind of

00:15:41,440 --> 00:15:45,519
handling that you need to do and because

00:15:43,600 --> 00:15:47,920
these hooks do the event handling behind

00:15:45,519 --> 00:15:47,920
the scene

00:15:48,880 --> 00:15:52,240
the other useful hook is to know the app

00:15:51,360 --> 00:15:54,000
state

00:15:52,240 --> 00:15:56,320
it will tell you whether your app is

00:15:54,000 --> 00:15:57,040
inactive active or backgrounded

00:15:56,320 --> 00:15:58,959
currently

00:15:57,040 --> 00:16:02,720
and the status changes based on the

00:15:58,959 --> 00:16:04,399
user's interaction with the app

00:16:02,720 --> 00:16:06,560
another one that i like to use is the

00:16:04,399 --> 00:16:08,399
use color scheme and this comes out of

00:16:06,560 --> 00:16:09,440
the box with react native this is not

00:16:08,399 --> 00:16:11,360
from the community

00:16:09,440 --> 00:16:13,440
and this tells you whether the current

00:16:11,360 --> 00:16:15,759
color scheme of the user's device

00:16:13,440 --> 00:16:17,680
is on light mode or dark mode and

00:16:15,759 --> 00:16:19,920
depending on that mode you can probably

00:16:17,680 --> 00:16:22,320
make some styling changes for your app

00:16:19,920 --> 00:16:23,600
so this is quite useful um if your users

00:16:22,320 --> 00:16:25,680
really like the dark mode

00:16:23,600 --> 00:16:27,759
and would like your app to correspond to

00:16:25,680 --> 00:16:27,759
it

00:16:28,880 --> 00:16:34,480
another useful one is on accessibility

00:16:32,480 --> 00:16:37,120
info which comes from the community as

00:16:34,480 --> 00:16:39,120
well it's called the use accessibility

00:16:37,120 --> 00:16:42,720
info and it gives you information

00:16:39,120 --> 00:16:45,279
on whether the device has accessibility

00:16:42,720 --> 00:16:47,600
features turned on or off you can see if

00:16:45,279 --> 00:16:48,959
the reduce motion is enabled if a screen

00:16:47,600 --> 00:16:51,600
reader is enabled

00:16:48,959 --> 00:16:53,759
and it also keeps track of when it's

00:16:51,600 --> 00:16:56,720
turned off and when it's turned on

00:16:53,759 --> 00:16:57,920
so you can have your app you can have

00:16:56,720 --> 00:17:00,560
your app act

00:16:57,920 --> 00:17:00,560
accordingly

00:17:03,279 --> 00:17:07,439
if your app responds to the device

00:17:05,679 --> 00:17:09,360
orientation changes

00:17:07,439 --> 00:17:11,199
then this hook is very useful called the

00:17:09,360 --> 00:17:14,400
used device orientation

00:17:11,199 --> 00:17:16,959
so you can identify if the user's device

00:17:14,400 --> 00:17:19,439
is currently with a portrait orientation

00:17:16,959 --> 00:17:21,439
or whether it's switched to landscape

00:17:19,439 --> 00:17:25,839
and again depending on whether your app

00:17:21,439 --> 00:17:25,839
reacts to those you can use this book

00:17:28,559 --> 00:17:32,799
the next topic that i'd like to touch is

00:17:30,880 --> 00:17:35,679
the performance

00:17:32,799 --> 00:17:37,280
mobile apps have to perform really well

00:17:35,679 --> 00:17:37,840
in fact i think mobile apps have to

00:17:37,280 --> 00:17:40,160
perform

00:17:37,840 --> 00:17:42,320
better than websites because when you're

00:17:40,160 --> 00:17:44,000
a mobile user your patient's level is

00:17:42,320 --> 00:17:45,679
probably a little bit lesser

00:17:44,000 --> 00:17:47,840
because you're using your app in your

00:17:45,679 --> 00:17:50,000
personal device most likely

00:17:47,840 --> 00:17:51,120
and you want that app not to be slowing

00:17:50,000 --> 00:17:52,720
down your

00:17:51,120 --> 00:17:54,559
general work because your mobile is used

00:17:52,720 --> 00:17:56,240
for so many other personal things

00:17:54,559 --> 00:17:58,240
you don't want an app that performs

00:17:56,240 --> 00:17:58,799
slowly the first thing you're going to

00:17:58,240 --> 00:18:00,559
notice

00:17:58,799 --> 00:18:02,559
is the size of the app and the

00:18:00,559 --> 00:18:04,240
performance and as an end user

00:18:02,559 --> 00:18:06,400
if you think it's not doing well in

00:18:04,240 --> 00:18:08,160
terms of performance and eating up the

00:18:06,400 --> 00:18:09,760
memory of your phone you're just gonna

00:18:08,160 --> 00:18:12,320
uninstall that app

00:18:09,760 --> 00:18:14,400
so performance is huge on mobile apps

00:18:12,320 --> 00:18:14,960
and could be a big turn off for end

00:18:14,400 --> 00:18:16,960
users

00:18:14,960 --> 00:18:18,240
if it doesn't perform well so i'd like

00:18:16,960 --> 00:18:22,320
to touch some topics

00:18:18,240 --> 00:18:22,320
related to performance with react native

00:18:22,720 --> 00:18:29,120
first things first use hermes

00:18:26,720 --> 00:18:32,000
hermes is a javascript engine optimized

00:18:29,120 --> 00:18:34,400
for running react native apps on android

00:18:32,000 --> 00:18:35,200
this is fairly new and was released last

00:18:34,400 --> 00:18:38,000
year

00:18:35,200 --> 00:18:39,360
until hermes was introduced a lot of

00:18:38,000 --> 00:18:42,000
react native

00:18:39,360 --> 00:18:42,720
developers and end users have noticed

00:18:42,000 --> 00:18:46,160
that

00:18:42,720 --> 00:18:49,120
the performance on android especially

00:18:46,160 --> 00:18:50,880
has not been that great and hermes

00:18:49,120 --> 00:18:53,840
solves this problem for us

00:18:50,880 --> 00:18:56,080
and the facebook team created a

00:18:53,840 --> 00:18:58,480
completely new javascript engine

00:18:56,080 --> 00:19:00,640
that was highly optimized and performed

00:18:58,480 --> 00:19:02,880
very well for android

00:19:00,640 --> 00:19:04,799
so please make sure that you use fermis

00:19:02,880 --> 00:19:05,760
because a lot of the performance related

00:19:04,799 --> 00:19:07,600
problems

00:19:05,760 --> 00:19:09,600
that you see on android can be

00:19:07,600 --> 00:19:12,960
completely changed and solved

00:19:09,600 --> 00:19:14,000
if you use the hermes engine it improves

00:19:12,960 --> 00:19:16,720
the start time

00:19:14,000 --> 00:19:18,480
of your android app it decreases the

00:19:16,720 --> 00:19:21,520
memory usage

00:19:18,480 --> 00:19:24,960
and the overall bundle or the app size

00:19:21,520 --> 00:19:26,960
is smaller as well keep in mind that

00:19:24,960 --> 00:19:29,360
hermes is available for react native

00:19:26,960 --> 00:19:29,360
version

00:19:29,799 --> 00:19:34,360
0.60.4 or more

00:19:32,160 --> 00:19:36,880
so if you're on a version lower than

00:19:34,360 --> 00:19:38,160
0.60.4 then you don't have access to use

00:19:36,880 --> 00:19:40,320
hermes

00:19:38,160 --> 00:19:42,160
so maybe it's worthwhile to upgrade to

00:19:40,320 --> 00:19:44,640
the latest version of react native

00:19:42,160 --> 00:19:46,080
so you can utilize the benefits of the

00:19:44,640 --> 00:19:48,160
hermes engine

00:19:46,080 --> 00:19:49,520
again hermes is optional so make sure

00:19:48,160 --> 00:19:50,880
that you go through the react native

00:19:49,520 --> 00:19:53,280
documentation

00:19:50,880 --> 00:19:56,320
to understand how to enable hermes for

00:19:53,280 --> 00:19:56,320
your android devices

00:19:57,120 --> 00:20:00,640
some little things that you can do in

00:19:58,799 --> 00:20:02,320
your code to make sure that the

00:20:00,640 --> 00:20:05,039
performance is pretty good

00:20:02,320 --> 00:20:06,000
is making sure that you run animations

00:20:05,039 --> 00:20:08,640
on the native

00:20:06,000 --> 00:20:11,280
driver take a look at this code sample

00:20:08,640 --> 00:20:14,159
here where i use the animated api

00:20:11,280 --> 00:20:14,799
and i've added a prop called use native

00:20:14,159 --> 00:20:16,720
driver

00:20:14,799 --> 00:20:18,640
and i've set the value of that prop to

00:20:16,720 --> 00:20:21,200
true make sure you do this

00:20:18,640 --> 00:20:22,559
anytime you use animations because as

00:20:21,200 --> 00:20:24,400
the name suggests

00:20:22,559 --> 00:20:25,679
it's going to run your animations on the

00:20:24,400 --> 00:20:27,440
native driver

00:20:25,679 --> 00:20:29,520
if you don't set this prop it's going to

00:20:27,440 --> 00:20:30,400
run them on the javascript side making

00:20:29,520 --> 00:20:32,480
things slow

00:20:30,400 --> 00:20:34,000
it took me a while to realize this was

00:20:32,480 --> 00:20:36,159
happening but when i

00:20:34,000 --> 00:20:37,440
simply made this switch and added this

00:20:36,159 --> 00:20:39,280
prop

00:20:37,440 --> 00:20:41,360
a lot of my animation problems and

00:20:39,280 --> 00:20:43,520
performance issues were just gone

00:20:41,360 --> 00:20:48,080
so make sure that you add that prop for

00:20:43,520 --> 00:20:51,440
your animations as well

00:20:48,080 --> 00:20:53,760
almost always use flat list

00:20:51,440 --> 00:20:55,520
or section list for any of your list

00:20:53,760 --> 00:20:56,640
components if you have a huge list that

00:20:55,520 --> 00:20:58,320
you want to render

00:20:56,640 --> 00:21:00,240
use either one of them depending on your

00:20:58,320 --> 00:21:01,360
use case if you have sections that you

00:21:00,240 --> 00:21:03,120
need to display

00:21:01,360 --> 00:21:04,480
with your list make sure you use section

00:21:03,120 --> 00:21:07,200
list if you don't need

00:21:04,480 --> 00:21:08,720
sectional um support just make sure you

00:21:07,200 --> 00:21:10,720
use the flat list

00:21:08,720 --> 00:21:12,559
this is the performant list that's used

00:21:10,720 --> 00:21:14,480
in react native and

00:21:12,559 --> 00:21:17,840
if you're still using list view make

00:21:14,480 --> 00:21:17,840
sure you get away from it

00:21:19,280 --> 00:21:22,400
this point is applicable for react as

00:21:21,760 --> 00:21:24,400
well

00:21:22,400 --> 00:21:26,559
and since react native uses react it's

00:21:24,400 --> 00:21:29,840
the same concept make sure that you use

00:21:26,559 --> 00:21:32,080
key attributes on list items take a look

00:21:29,840 --> 00:21:35,280
at this code snippet here we have

00:21:32,080 --> 00:21:38,480
a my component class

00:21:35,280 --> 00:21:40,880
and you can notice here that i have a

00:21:38,480 --> 00:21:42,960
list of text that i am displaying

00:21:40,880 --> 00:21:44,080
since it is a list i am making sure that

00:21:42,960 --> 00:21:46,400
i set a key

00:21:44,080 --> 00:21:47,200
and this key is a unique id that we need

00:21:46,400 --> 00:21:49,440
to set

00:21:47,200 --> 00:21:51,679
and every time you have a list of items

00:21:49,440 --> 00:21:54,960
you almost always have to have

00:21:51,679 --> 00:21:56,400
a key for it this is because without a

00:21:54,960 --> 00:21:58,960
unique key for each

00:21:56,400 --> 00:22:00,480
item react will re-render every time you

00:21:58,960 --> 00:22:02,000
add or remove an item

00:22:00,480 --> 00:22:03,840
and we don't want that because that's

00:22:02,000 --> 00:22:05,840
going to be a severe hit

00:22:03,840 --> 00:22:07,440
on your performance this is something

00:22:05,840 --> 00:22:09,600
you may forget

00:22:07,440 --> 00:22:11,679
the react does give you warnings and if

00:22:09,600 --> 00:22:13,520
you have eslint enabled

00:22:11,679 --> 00:22:15,039
you can see these warnings come up as

00:22:13,520 --> 00:22:17,440
well so make sure that

00:22:15,039 --> 00:22:20,640
you provide a key for list items to

00:22:17,440 --> 00:22:20,640
enhance your performance

00:22:21,440 --> 00:22:27,520
something quite new in the react native

00:22:24,720 --> 00:22:29,120
world is the pressable component the

00:22:27,520 --> 00:22:31,200
pressable component

00:22:29,120 --> 00:22:32,799
is basically something similar to the

00:22:31,200 --> 00:22:33,679
touchable components like touchable

00:22:32,799 --> 00:22:36,720
opacity

00:22:33,679 --> 00:22:37,919
and touchable highlight and so on just

00:22:36,720 --> 00:22:40,799
that it's

00:22:37,919 --> 00:22:42,240
better so make sure that you use the

00:22:40,799 --> 00:22:44,320
pressable component

00:22:42,240 --> 00:22:46,880
going forward instead of detachable ones

00:22:44,320 --> 00:22:50,159
because react nato says it's

00:22:46,880 --> 00:22:52,960
way more performant and it also

00:22:50,159 --> 00:22:54,080
supports things like on long press for

00:22:52,960 --> 00:22:55,760
example

00:22:54,080 --> 00:22:57,280
you're gonna some have a user that's

00:22:55,760 --> 00:23:00,080
gonna press

00:22:57,280 --> 00:23:01,120
you know maybe a few milliseconds longer

00:23:00,080 --> 00:23:03,520
than usual

00:23:01,120 --> 00:23:05,440
it's gonna account for that it's also

00:23:03,520 --> 00:23:07,760
gonna capture touches outside of

00:23:05,440 --> 00:23:09,440
pressable areas because sometimes

00:23:07,760 --> 00:23:11,679
you know there's only so much area and

00:23:09,440 --> 00:23:12,559
you could accidentally slip away and

00:23:11,679 --> 00:23:14,159
press

00:23:12,559 --> 00:23:16,240
right next to a button and you think you

00:23:14,159 --> 00:23:16,960
already pressed it so the pressable

00:23:16,240 --> 00:23:19,360
component

00:23:16,960 --> 00:23:20,159
has options where it can be smart enough

00:23:19,360 --> 00:23:23,120
to

00:23:20,159 --> 00:23:25,760
recognize that the user did touch that

00:23:23,120 --> 00:23:27,520
area but just slightly outside

00:23:25,760 --> 00:23:29,520
and it also supports things like the

00:23:27,520 --> 00:23:33,039
ripple effect with android

00:23:29,520 --> 00:23:33,760
so it's significantly better extensible

00:23:33,039 --> 00:23:36,000
with more

00:23:33,760 --> 00:23:36,960
features compared to the touchable

00:23:36,000 --> 00:23:39,120
components

00:23:36,960 --> 00:23:41,600
and definitely use them in future

00:23:39,120 --> 00:23:41,600
projects

00:23:42,720 --> 00:23:47,520
there's also documentation which is

00:23:45,600 --> 00:23:49,360
quite extensive on different things

00:23:47,520 --> 00:23:50,559
techniques you can use to improve your

00:23:49,360 --> 00:23:52,960
performance

00:23:50,559 --> 00:23:53,679
and also debug performance related

00:23:52,960 --> 00:23:55,600
issues

00:23:53,679 --> 00:23:58,640
so make sure you check out this link to

00:23:55,600 --> 00:23:58,640
learn more about them

00:23:58,880 --> 00:24:04,080
the next controversial topic in react

00:24:01,600 --> 00:24:06,480
native is really navigation

00:24:04,080 --> 00:24:08,320
navigation is basically moving from a

00:24:06,480 --> 00:24:10,480
screen to another screen

00:24:08,320 --> 00:24:12,400
and this is an important decision that

00:24:10,480 --> 00:24:14,320
you take before you start developing

00:24:12,400 --> 00:24:17,440
your react native app you have to pick

00:24:14,320 --> 00:24:19,520
a navigation library because

00:24:17,440 --> 00:24:21,840
rest assured your app is going to have a

00:24:19,520 --> 00:24:24,480
lot of screens and needs a navigation

00:24:21,840 --> 00:24:26,080
methodology a little history on

00:24:24,480 --> 00:24:28,159
navigation

00:24:26,080 --> 00:24:30,080
yep take a look at that that's the

00:24:28,159 --> 00:24:31,440
number of libraries that are available

00:24:30,080 --> 00:24:35,840
for you to pick from

00:24:31,440 --> 00:24:39,200
and that's an overwhelmingly large list

00:24:35,840 --> 00:24:41,840
so what do we do now so um

00:24:39,200 --> 00:24:44,840
i have used a bunch of libraries like

00:24:41,840 --> 00:24:48,000
the navigation experimental

00:24:44,840 --> 00:24:52,080
navigator navigation ios

00:24:48,000 --> 00:24:53,840
native navigation and finally i'm using

00:24:52,080 --> 00:24:55,840
react navigation now

00:24:53,840 --> 00:24:57,600
as you can see i've striked out each one

00:24:55,840 --> 00:24:59,679
of them because they didn't work

00:24:57,600 --> 00:25:00,640
they didn't work for me or they were not

00:24:59,679 --> 00:25:02,880
desirable

00:25:00,640 --> 00:25:04,640
if you're starting with react native now

00:25:02,880 --> 00:25:06,000
you're at a much better space because

00:25:04,640 --> 00:25:08,480
you don't need to try out all these

00:25:06,000 --> 00:25:09,600
experimental navigation libraries

00:25:08,480 --> 00:25:11,600
you don't need to write your own

00:25:09,600 --> 00:25:14,320
navigation library

00:25:11,600 --> 00:25:14,880
the best bet for you would be using

00:25:14,320 --> 00:25:18,480
react

00:25:14,880 --> 00:25:18,880
navigation so react navigation is the

00:25:18,480 --> 00:25:21,679
most

00:25:18,880 --> 00:25:22,640
used navigation library for react native

00:25:21,679 --> 00:25:25,840
it's in version

00:25:22,640 --> 00:25:27,919
5 it's stable and it's definitely

00:25:25,840 --> 00:25:29,200
customizable and works very well with

00:25:27,919 --> 00:25:33,039
both ios

00:25:29,200 --> 00:25:34,799
and android so skip away all the

00:25:33,039 --> 00:25:36,640
experimental stuff and go right into

00:25:34,799 --> 00:25:39,200
react navigation

00:25:36,640 --> 00:25:41,440
and if you really want something that is

00:25:39,200 --> 00:25:42,000
more native you want a 100 native

00:25:41,440 --> 00:25:44,960
platform

00:25:42,000 --> 00:25:45,440
navigation for both ios and android then

00:25:44,960 --> 00:25:47,520
there's an

00:25:45,440 --> 00:25:48,480
alternative called react native

00:25:47,520 --> 00:25:50,960
navigation

00:25:48,480 --> 00:25:52,320
which is by wix and that's a really good

00:25:50,960 --> 00:25:54,400
library as well

00:25:52,320 --> 00:25:56,080
i haven't used it personally but i know

00:25:54,400 --> 00:25:58,640
a lot of folks use it

00:25:56,080 --> 00:26:00,240
and would be definitely worth a try so

00:25:58,640 --> 00:26:01,279
you have two options if you're using

00:26:00,240 --> 00:26:03,840
navigation

00:26:01,279 --> 00:26:05,200
it's either react navigation or react

00:26:03,840 --> 00:26:06,880
native navigation

00:26:05,200 --> 00:26:11,279
and these are both safe bets for you if

00:26:06,880 --> 00:26:13,120
you're starting today

00:26:11,279 --> 00:26:15,200
all right so the next topic i want to

00:26:13,120 --> 00:26:19,279
touch is

00:26:15,200 --> 00:26:21,600
third-party libraries we really don't

00:26:19,279 --> 00:26:23,200
want to reinvent the wheel on every

00:26:21,600 --> 00:26:24,640
single thing when we build our react

00:26:23,200 --> 00:26:26,080
native applications

00:26:24,640 --> 00:26:28,320
there are plenty of third-party

00:26:26,080 --> 00:26:31,520
libraries in the community

00:26:28,320 --> 00:26:34,559
that you can use and solve the problems

00:26:31,520 --> 00:26:34,559
that you're trying to solve

00:26:34,720 --> 00:26:42,240
so the react native community is a huge

00:26:38,080 --> 00:26:44,000
repo of plenty of resources

00:26:42,240 --> 00:26:47,200
the react native community as you can

00:26:44,000 --> 00:26:50,240
see here is got about 14 repositories

00:26:47,200 --> 00:26:51,919
and it is managed by the co-contributors

00:26:50,240 --> 00:26:53,440
of react native and some active

00:26:51,919 --> 00:26:54,559
participants in the react native

00:26:53,440 --> 00:26:56,240
community

00:26:54,559 --> 00:26:57,600
i'm gonna go check out some of these

00:26:56,240 --> 00:26:59,760
repositories here

00:26:57,600 --> 00:27:01,360
you can see um there is a react native

00:26:59,760 --> 00:27:03,919
device info there's one

00:27:01,360 --> 00:27:06,000
on model there's one on hooks which i

00:27:03,919 --> 00:27:07,840
was just talking to you about previously

00:27:06,000 --> 00:27:09,760
there's also the react native camera

00:27:07,840 --> 00:27:11,919
which is an awesome camera component for

00:27:09,760 --> 00:27:13,840
react native and i use it

00:27:11,919 --> 00:27:14,960
on any projects that need a camera

00:27:13,840 --> 00:27:17,360
support

00:27:14,960 --> 00:27:18,799
there's also cool things like react

00:27:17,360 --> 00:27:21,600
native net info

00:27:18,799 --> 00:27:22,799
there is the upgrade support react

00:27:21,600 --> 00:27:25,760
native svg

00:27:22,799 --> 00:27:28,159
which is basically a library of react

00:27:25,760 --> 00:27:31,360
native react native web and plain react

00:27:28,159 --> 00:27:34,880
projects with svg icons

00:27:31,360 --> 00:27:35,840
there is also things like react native

00:27:34,880 --> 00:27:37,520
geolocation

00:27:35,840 --> 00:27:40,000
these are complex problems you don't

00:27:37,520 --> 00:27:42,080
want to reinvent the wheel to

00:27:40,000 --> 00:27:44,000
solve these things because we have

00:27:42,080 --> 00:27:45,600
wetted libraries that are available

00:27:44,000 --> 00:27:47,440
that integrate well with your react

00:27:45,600 --> 00:27:49,279
native projects

00:27:47,440 --> 00:27:50,720
there's also things like react native

00:27:49,279 --> 00:27:53,840
videos sound

00:27:50,720 --> 00:27:54,240
and so on so so make sure that you come

00:27:53,840 --> 00:27:55,919
here

00:27:54,240 --> 00:27:57,919
and check out the repositories that are

00:27:55,919 --> 00:28:00,159
available in the community

00:27:57,919 --> 00:28:02,000
before you decide to code a humongous

00:28:00,159 --> 00:28:03,600
project that needs a feature that's

00:28:02,000 --> 00:28:08,159
probably already figured out

00:28:03,600 --> 00:28:08,159
and solved and ready for you to use

00:28:09,760 --> 00:28:14,399
as we talk about utilizing third-party

00:28:12,080 --> 00:28:15,360
libraries it's also a responsibility to

00:28:14,399 --> 00:28:17,520
make sure

00:28:15,360 --> 00:28:20,080
that we open source our work to help the

00:28:17,520 --> 00:28:22,240
community as well

00:28:20,080 --> 00:28:24,159
react creative is hugely dependent on

00:28:22,240 --> 00:28:27,039
the community collaborations

00:28:24,159 --> 00:28:28,399
and helping the community is absolutely

00:28:27,039 --> 00:28:31,279
important

00:28:28,399 --> 00:28:32,559
if you do have a cool project or a cool

00:28:31,279 --> 00:28:35,039
problem you've solved

00:28:32,559 --> 00:28:35,679
for react native consider making it open

00:28:35,039 --> 00:28:37,360
source

00:28:35,679 --> 00:28:44,240
so that the rest of the community can

00:28:37,360 --> 00:28:46,799
benefit from it as well

00:28:44,240 --> 00:28:48,159
the next topic i want to touch which is

00:28:46,799 --> 00:28:51,600
very close to my heart

00:28:48,159 --> 00:28:55,039
is building accessible applications

00:28:51,600 --> 00:28:56,960
as a software developer it's our moral

00:28:55,039 --> 00:29:00,240
responsibility to build

00:28:56,960 --> 00:29:01,840
accessible applications and

00:29:00,240 --> 00:29:04,159
we know that a lot of people in the

00:29:01,840 --> 00:29:06,960
world have different kinds of disability

00:29:04,159 --> 00:29:08,399
and if they were to use our app and we

00:29:06,960 --> 00:29:11,120
could support

00:29:08,399 --> 00:29:13,039
some amount of accessibility for our end

00:29:11,120 --> 00:29:16,080
users with disability

00:29:13,039 --> 00:29:18,240
i think it's a big win for us so let's

00:29:16,080 --> 00:29:20,480
take a look at what react native can do

00:29:18,240 --> 00:29:21,200
in terms of providing accessibility

00:29:20,480 --> 00:29:25,520
options

00:29:21,200 --> 00:29:25,520
how we can utilize that as a developer

00:29:25,600 --> 00:29:29,919
on ios there's something called the

00:29:28,000 --> 00:29:32,640
screen reader that's available

00:29:29,919 --> 00:29:34,320
so if you go into the settings and click

00:29:32,640 --> 00:29:37,360
on accessibility

00:29:34,320 --> 00:29:39,840
we have a voice over app

00:29:37,360 --> 00:29:41,279
and enabling that is going to make sure

00:29:39,840 --> 00:29:43,520
that

00:29:41,279 --> 00:29:44,480
whenever there's accessibility features

00:29:43,520 --> 00:29:46,960
in your app

00:29:44,480 --> 00:29:49,200
the voiceover would read out those to

00:29:46,960 --> 00:29:51,520
the end user

00:29:49,200 --> 00:29:52,799
on android the screen reader is called

00:29:51,520 --> 00:29:54,640
talk back

00:29:52,799 --> 00:29:57,120
again you can go into settings and click

00:29:54,640 --> 00:29:59,360
on accessibility and turn on the talk

00:29:57,120 --> 00:30:01,279
back so once you have your screen

00:29:59,360 --> 00:30:02,480
readers enabled and then code for

00:30:01,279 --> 00:30:04,159
accessibility

00:30:02,480 --> 00:30:06,000
you can test them and make sure that the

00:30:04,159 --> 00:30:06,559
screen reader is actually capturing

00:30:06,000 --> 00:30:09,840
those

00:30:06,559 --> 00:30:09,840
and reading it out to you

00:30:12,320 --> 00:30:16,240
the first thing you would do is detect

00:30:14,240 --> 00:30:17,120
the state of the device and make sure

00:30:16,240 --> 00:30:19,360
that

00:30:17,120 --> 00:30:21,600
the end user's device does have

00:30:19,360 --> 00:30:23,360
accessibility features turned on

00:30:21,600 --> 00:30:24,799
as we talked about earlier to do that

00:30:23,360 --> 00:30:26,960
we're going to use the use

00:30:24,799 --> 00:30:28,880
accessibility info hook that comes with

00:30:26,960 --> 00:30:31,279
the react native community

00:30:28,880 --> 00:30:31,919
and it can detect things like whether

00:30:31,279 --> 00:30:34,799
reduced

00:30:31,919 --> 00:30:36,080
motion is enabled if a screen reader

00:30:34,799 --> 00:30:38,799
just like we saw earlier

00:30:36,080 --> 00:30:41,200
is enabled on the device and depending

00:30:38,799 --> 00:30:42,960
on whether those are enabled or disabled

00:30:41,200 --> 00:30:44,399
the accessibility features in your code

00:30:42,960 --> 00:30:47,600
can be turned on as well

00:30:44,399 --> 00:30:49,520
so this is a hugely important step where

00:30:47,600 --> 00:30:52,320
you first detect the state of your end

00:30:49,520 --> 00:30:54,720
user's device

00:30:52,320 --> 00:30:55,360
here is an example of an accessible

00:30:54,720 --> 00:30:59,279
component

00:30:55,360 --> 00:31:01,840
it's simple but it conveys the idea here

00:30:59,279 --> 00:31:03,120
take a look at our touchable opacity i

00:31:01,840 --> 00:31:05,200
have a prop

00:31:03,120 --> 00:31:06,159
called accessible and i'm setting that

00:31:05,200 --> 00:31:08,080
to true

00:31:06,159 --> 00:31:10,240
this is the very first step you would do

00:31:08,080 --> 00:31:13,440
in saying that that component

00:31:10,240 --> 00:31:16,080
is accessible and i'm also giving it an

00:31:13,440 --> 00:31:18,799
accessibility label that says go back

00:31:16,080 --> 00:31:19,360
so when the end user clicks on that

00:31:18,799 --> 00:31:21,039
button

00:31:19,360 --> 00:31:23,279
it's going to read out the screen reader

00:31:21,039 --> 00:31:26,039
would read out saying go back

00:31:23,279 --> 00:31:28,640
and i'm also providing an additional

00:31:26,039 --> 00:31:29,440
accessibility prop called accessibility

00:31:28,640 --> 00:31:30,960
hint

00:31:29,440 --> 00:31:32,640
and that's going to say something

00:31:30,960 --> 00:31:33,519
further it's going to say something more

00:31:32,640 --> 00:31:36,559
than the label

00:31:33,519 --> 00:31:38,960
it says navigates to the previous screen

00:31:36,559 --> 00:31:41,360
so the label is good enough and the hint

00:31:38,960 --> 00:31:43,840
gives you a little bit more context

00:31:41,360 --> 00:31:45,200
after reading out the labels so you have

00:31:43,840 --> 00:31:47,519
to make a judgment

00:31:45,200 --> 00:31:49,600
on what you need to add and what is

00:31:47,519 --> 00:31:51,279
whether a hint is necessary or not

00:31:49,600 --> 00:31:53,039
but these are all the features that are

00:31:51,279 --> 00:31:54,080
available to you out of the box with

00:31:53,039 --> 00:31:56,559
react native

00:31:54,080 --> 00:31:57,919
and would be hugely beneficial if you

00:31:56,559 --> 00:32:00,399
have them set up

00:31:57,919 --> 00:32:03,120
so that somebody with a screen reader

00:32:00,399 --> 00:32:05,840
can actually hear these

00:32:03,120 --> 00:32:07,519
there's also another prop that we used

00:32:05,840 --> 00:32:09,120
here within our view component called

00:32:07,519 --> 00:32:11,519
accessibility rule

00:32:09,120 --> 00:32:12,240
that tells us what that component is

00:32:11,519 --> 00:32:15,360
acting like

00:32:12,240 --> 00:32:16,880
its role is to be basically a button you

00:32:15,360 --> 00:32:19,840
get the idea

00:32:16,880 --> 00:32:21,120
let's go into our accessibility api and

00:32:19,840 --> 00:32:23,440
there is a lot more

00:32:21,120 --> 00:32:25,120
props and features that you can utilize

00:32:23,440 --> 00:32:28,960
while developing your react native

00:32:25,120 --> 00:32:31,600
code here we are with the official

00:32:28,960 --> 00:32:34,000
accessibility api documentation and you

00:32:31,600 --> 00:32:34,000
can see

00:32:35,039 --> 00:32:43,840
here on the right it all

00:32:51,340 --> 00:32:57,840
[Music]

00:32:54,840 --> 00:32:57,840
oh

00:33:08,880 --> 00:33:12,320
all of the stuff which is other

00:33:10,159 --> 00:33:13,840
interesting ones for example it does is

00:33:12,320 --> 00:33:15,760
it describes the current sound

00:33:13,840 --> 00:33:25,840
we also have platform for example for

00:33:15,760 --> 00:33:25,840
our simulation

00:33:29,919 --> 00:33:34,080
so keep that in mind when you're

00:33:31,760 --> 00:33:36,320
developing your react native apps

00:33:34,080 --> 00:33:37,279
so the next topic that i like to touch

00:33:36,320 --> 00:33:39,840
is

00:33:37,279 --> 00:33:39,840
testing

00:33:41,360 --> 00:33:45,120
quality means doing it right even when

00:33:43,519 --> 00:33:48,240
no one is looking

00:33:45,120 --> 00:33:50,159
this is a quote by henry ford and

00:33:48,240 --> 00:33:51,279
i think this rings a bell to me as a

00:33:50,159 --> 00:33:53,360
software developer

00:33:51,279 --> 00:33:55,760
and this quote is applicable to our

00:33:53,360 --> 00:33:57,440
software developers too

00:33:55,760 --> 00:33:59,120
quality is something we need to care

00:33:57,440 --> 00:34:01,360
about in our software

00:33:59,120 --> 00:34:04,559
not wait until like a buck shows up or

00:34:01,360 --> 00:34:07,519
somebody asks us for a status for qa

00:34:04,559 --> 00:34:11,119
but testing needs to be an integral part

00:34:07,519 --> 00:34:11,119
of our development process

00:34:11,919 --> 00:34:15,280
for react native apps you could do unit

00:34:14,560 --> 00:34:17,839
testing

00:34:15,280 --> 00:34:19,119
component testing integration testing

00:34:17,839 --> 00:34:21,119
and so on

00:34:19,119 --> 00:34:23,200
the unit testing framework you could use

00:34:21,119 --> 00:34:24,480
for react native is similar to whatever

00:34:23,200 --> 00:34:26,960
you would use for react

00:34:24,480 --> 00:34:29,040
something like just would work perfectly

00:34:26,960 --> 00:34:31,200
fine

00:34:29,040 --> 00:34:33,200
i've been using detox tests for

00:34:31,200 --> 00:34:36,399
integration tests which are basically

00:34:33,200 --> 00:34:38,560
end-to-end tests and detox tests your

00:34:36,399 --> 00:34:40,879
mobile app while it's running in a real

00:34:38,560 --> 00:34:42,800
device or your simulator

00:34:40,879 --> 00:34:44,960
and it interacts with it just like a

00:34:42,800 --> 00:34:46,800
real user

00:34:44,960 --> 00:34:48,079
you can think of detox tests as

00:34:46,800 --> 00:34:51,200
something very similar

00:34:48,079 --> 00:34:53,839
to cypress if you've used it for the web

00:34:51,200 --> 00:34:56,560
it basically runs these end-to-end tests

00:34:53,839 --> 00:34:59,040
and tests your application as a whole

00:34:56,560 --> 00:35:01,200
and these tests are really helpful and

00:34:59,040 --> 00:35:03,119
also makes a lot of sense for

00:35:01,200 --> 00:35:04,960
the qas and everybody else in the

00:35:03,119 --> 00:35:06,480
company who's not a developer

00:35:04,960 --> 00:35:09,359
because they can literally see this

00:35:06,480 --> 00:35:11,680
happen this automated test running

00:35:09,359 --> 00:35:13,280
on your device or emulator like a robot

00:35:11,680 --> 00:35:15,119
basically so instead of somebody

00:35:13,280 --> 00:35:16,960
clicking through all these things

00:35:15,119 --> 00:35:18,320
manually we have an automated test that

00:35:16,960 --> 00:35:20,640
takes care of it

00:35:18,320 --> 00:35:21,599
and runs an end-to-end test so this is

00:35:20,640 --> 00:35:24,000
absolutely

00:35:21,599 --> 00:35:25,599
important and useful so i highly

00:35:24,000 --> 00:35:26,000
recommend checking out an end-to-end

00:35:25,599 --> 00:35:28,839
test

00:35:26,000 --> 00:35:31,839
framework like detox for react native

00:35:28,839 --> 00:35:31,839
apps

00:35:32,320 --> 00:35:37,760
as we talked about detox testing

00:35:34,720 --> 00:35:40,160
emulates a user testing experience

00:35:37,760 --> 00:35:41,040
and they like to call themselves a gray

00:35:40,160 --> 00:35:43,200
box test

00:35:41,040 --> 00:35:45,280
not a black box test because there's

00:35:43,200 --> 00:35:48,720
some amount of monitoring your app

00:35:45,280 --> 00:35:50,960
from within the app itself and

00:35:48,720 --> 00:35:52,400
it definitely automates a lot of your

00:35:50,960 --> 00:35:55,440
manual qa process

00:35:52,400 --> 00:35:59,200
and your qas will really appreciate

00:35:55,440 --> 00:36:01,760
you including tests like these and

00:35:59,200 --> 00:36:03,599
detox tests are simple to write and

00:36:01,760 --> 00:36:07,280
they're written entirely in javascript

00:36:03,599 --> 00:36:10,079
so it's easy to read and write

00:36:07,280 --> 00:36:10,880
this is an example of a simple detox

00:36:10,079 --> 00:36:12,720
test

00:36:10,880 --> 00:36:15,040
let's look at how the structure of a

00:36:12,720 --> 00:36:17,440
detox test looks

00:36:15,040 --> 00:36:19,200
some of these keywords like describe

00:36:17,440 --> 00:36:22,000
before each and

00:36:19,200 --> 00:36:23,760
it these are keywords you may have seen

00:36:22,000 --> 00:36:26,880
in other testing frameworks

00:36:23,760 --> 00:36:29,119
and detox utilizes the same as well

00:36:26,880 --> 00:36:30,000
describe is used to give a name for your

00:36:29,119 --> 00:36:34,400
test suite

00:36:30,000 --> 00:36:36,640
and it gives a name for each test

00:36:34,400 --> 00:36:37,839
as you can guess before each is a

00:36:36,640 --> 00:36:40,960
snippet that runs

00:36:37,839 --> 00:36:42,240
before running your test and it is where

00:36:40,960 --> 00:36:44,640
your test is being

00:36:42,240 --> 00:36:46,960
running so we have a test that says

00:36:44,640 --> 00:36:49,359
should have welcome screen

00:36:46,960 --> 00:36:50,400
and it's having an async await option

00:36:49,359 --> 00:36:53,200
that expects an

00:36:50,400 --> 00:36:54,000
element and that element's id has to be

00:36:53,200 --> 00:36:57,280
welcome

00:36:54,000 --> 00:36:58,880
and it checks if it is visible so if you

00:36:57,280 --> 00:37:01,359
read through these you can realize

00:36:58,880 --> 00:37:02,400
that a lot of these really look like

00:37:01,359 --> 00:37:03,920
simple english

00:37:02,400 --> 00:37:06,320
if you take a look at the second one

00:37:03,920 --> 00:37:08,079
it's having an async await again and

00:37:06,320 --> 00:37:10,160
we're waiting for the hello button

00:37:08,079 --> 00:37:11,280
and when it appears we tap it which

00:37:10,160 --> 00:37:13,200
probably means

00:37:11,280 --> 00:37:16,400
our detox test is going to automate a

00:37:13,200 --> 00:37:19,599
tab and once it's tapped it's expecting

00:37:16,400 --> 00:37:22,960
an element of text hello

00:37:19,599 --> 00:37:24,720
to be visible so the idea is there is a

00:37:22,960 --> 00:37:26,560
hello button and you're going to tap it

00:37:24,720 --> 00:37:28,160
and once it's tapped it's going to say

00:37:26,560 --> 00:37:30,960
hello

00:37:28,160 --> 00:37:32,880
it's pretty intuitive and even qas can

00:37:30,960 --> 00:37:33,680
get involved and write some detox tests

00:37:32,880 --> 00:37:36,480
and

00:37:33,680 --> 00:37:38,480
developers should absolutely write some

00:37:36,480 --> 00:37:39,359
so i highly recommend testing your

00:37:38,480 --> 00:37:42,320
application

00:37:39,359 --> 00:37:44,880
thoroughly in terms of unit tests

00:37:42,320 --> 00:37:47,119
component tests and integration tests

00:37:44,880 --> 00:37:49,359
and all of these is going to do quite a

00:37:47,119 --> 00:37:52,320
lot of sanity check for your application

00:37:49,359 --> 00:37:52,320
before they're released

00:37:53,359 --> 00:37:56,960
after all testing makes you ship code

00:37:56,000 --> 00:37:58,800
with confidence

00:37:56,960 --> 00:38:01,040
and that's what we're really aiming for

00:37:58,800 --> 00:38:01,040
here

00:38:02,160 --> 00:38:07,119
the final topic that i'd like to touch

00:38:04,160 --> 00:38:08,480
here is continuous delivery

00:38:07,119 --> 00:38:10,640
we're developing these mobile

00:38:08,480 --> 00:38:12,720
applications and we want to deliver them

00:38:10,640 --> 00:38:15,440
to our clients our testers

00:38:12,720 --> 00:38:17,520
continuously as we develop we don't want

00:38:15,440 --> 00:38:18,560
to wait for five months or six months

00:38:17,520 --> 00:38:21,040
until we develop

00:38:18,560 --> 00:38:22,000
and send these applications to our

00:38:21,040 --> 00:38:24,960
clients

00:38:22,000 --> 00:38:25,359
to do that with react native i found

00:38:24,960 --> 00:38:27,599
that

00:38:25,359 --> 00:38:29,359
fastlane is one of the fastest and

00:38:27,599 --> 00:38:30,720
easiest methods to automate your

00:38:29,359 --> 00:38:33,040
deployments

00:38:30,720 --> 00:38:36,000
you can automate both beta deployments

00:38:33,040 --> 00:38:38,160
and releases with fastlane

00:38:36,000 --> 00:38:40,160
the things that fastlane does for you is

00:38:38,160 --> 00:38:41,280
all the frustrating stuff that mobile

00:38:40,160 --> 00:38:43,760
developers

00:38:41,280 --> 00:38:44,480
face when they release an app things

00:38:43,760 --> 00:38:47,520
like

00:38:44,480 --> 00:38:50,320
generating screenshots code signing

00:38:47,520 --> 00:38:52,240
releasing your application and with

00:38:50,320 --> 00:38:54,800
respect to beta deployments too

00:38:52,240 --> 00:38:56,240
fastlane is super useful and for beta

00:38:54,800 --> 00:38:59,520
deployments i use

00:38:56,240 --> 00:39:00,640
test flight for ios and google play for

00:38:59,520 --> 00:39:02,800
android

00:39:00,640 --> 00:39:04,480
test flight is basically an application

00:39:02,800 --> 00:39:06,720
where you can include

00:39:04,480 --> 00:39:08,400
tons of beta testers and release your

00:39:06,720 --> 00:39:10,400
app to test flight

00:39:08,400 --> 00:39:12,320
and the beta testers can download the

00:39:10,400 --> 00:39:14,640
latest version of your beta app from

00:39:12,320 --> 00:39:15,920
test flight and basically utilize your

00:39:14,640 --> 00:39:18,400
latest and greatest

00:39:15,920 --> 00:39:20,640
and send feedback to you you can do the

00:39:18,400 --> 00:39:23,040
same concept with google play as well

00:39:20,640 --> 00:39:24,720
and build and develop a beta version of

00:39:23,040 --> 00:39:27,200
your app on google

00:39:24,720 --> 00:39:29,119
send feedback to you you can do the same

00:39:27,200 --> 00:39:31,520
concept with google play as well

00:39:29,119 --> 00:39:33,040
and build and develop a better version

00:39:31,520 --> 00:39:34,960
of your app on google play

00:39:33,040 --> 00:39:36,240
that your android beta testers can

00:39:34,960 --> 00:39:39,359
utilize

00:39:36,240 --> 00:39:41,920
the reason beta testing is important

00:39:39,359 --> 00:39:43,839
is making sure that your app is in the

00:39:41,920 --> 00:39:46,400
hands of plenty of beta testers

00:39:43,839 --> 00:39:48,400
thoroughly battle tested before you can

00:39:46,400 --> 00:39:51,440
release it to prod

00:39:48,400 --> 00:39:54,400
and this is how your test flight looks

00:39:51,440 --> 00:39:56,000
on for ios you can notice that we have

00:39:54,400 --> 00:39:58,800
the builds different versions

00:39:56,000 --> 00:40:00,640
you also have like the external testers

00:39:58,800 --> 00:40:02,640
and a group of internal testers you can

00:40:00,640 --> 00:40:04,800
add so highly recommend

00:40:02,640 --> 00:40:07,200
this workflow where you have fast lane

00:40:04,800 --> 00:40:10,400
setup on all your developers machines

00:40:07,200 --> 00:40:13,280
so you can release frequently without

00:40:10,400 --> 00:40:15,119
any pain and i also recommend using beta

00:40:13,280 --> 00:40:17,359
deployments using things like test

00:40:15,119 --> 00:40:20,079
flight and google play and get your apps

00:40:17,359 --> 00:40:22,480
tested before you release them through

00:40:20,079 --> 00:40:22,480
prague

00:40:22,960 --> 00:40:27,359
i'd like to conclude by saying it's a

00:40:24,800 --> 00:40:28,960
great time to be working on react native

00:40:27,359 --> 00:40:30,400
building react native apps are

00:40:28,960 --> 00:40:32,319
absolutely fun

00:40:30,400 --> 00:40:34,000
at the same time it comes with a lot of

00:40:32,319 --> 00:40:35,520
challenges if you're aiming to build

00:40:34,000 --> 00:40:37,760
scalable applications

00:40:35,520 --> 00:40:39,040
with react native definitely consider

00:40:37,760 --> 00:40:42,240
the things we talked about

00:40:39,040 --> 00:40:45,599
in this talk things like performance

00:40:42,240 --> 00:40:49,040
accessibility navigation

00:40:45,599 --> 00:40:50,880
testing just to name a few i'd like to

00:40:49,040 --> 00:40:53,440
answer any questions you have right now

00:40:50,880 --> 00:40:54,720
in the chat or you can ping me at aditi

00:40:53,440 --> 00:40:56,319
ravi on twitter

00:40:54,720 --> 00:40:57,839
and i'm available to answer any

00:40:56,319 --> 00:40:58,960
questions you may have about react

00:40:57,839 --> 00:41:00,960
native

00:40:58,960 --> 00:41:02,079
again i'd really like to thank all

00:41:00,960 --> 00:41:04,480
things open

00:41:02,079 --> 00:41:06,240
for organizing such a wonderful event

00:41:04,480 --> 00:41:07,359
although it's remote it's been a great

00:41:06,240 --> 00:41:09,520
experience for me

00:41:07,359 --> 00:41:10,640
participating in it and i look forward

00:41:09,520 --> 00:41:11,920
to the rest of the talks in the

00:41:10,640 --> 00:41:13,920
conference too

00:41:11,920 --> 00:41:14,960
it's been one of my favorite conferences

00:41:13,920 --> 00:41:16,720
that i've been going to

00:41:14,960 --> 00:41:19,280
and unfortunately with the pandemic

00:41:16,720 --> 00:41:21,440
going on this is the best we can do

00:41:19,280 --> 00:41:22,720
hopefully next year we can make it to

00:41:21,440 --> 00:41:24,640
north carolina

00:41:22,720 --> 00:41:27,359
thank you again all things open for

00:41:24,640 --> 00:41:29,040
having me here and it's been a pleasure

00:41:27,359 --> 00:41:31,040
definitely ask me any questions you'd

00:41:29,040 --> 00:41:35,839
like and i'll be happy to answer

00:41:31,040 --> 00:41:35,839
thank you

00:41:36,560 --> 00:41:41,440
hey everyone um i'm here for questions

00:41:38,960 --> 00:41:44,240
if you have anything

00:41:41,440 --> 00:41:44,240
thank you dc

00:41:46,160 --> 00:41:50,560
do i have questions do you have any

00:41:47,839 --> 00:41:53,839
security tips for react native

00:41:50,560 --> 00:41:54,800
uh with respect to security there is

00:41:53,839 --> 00:41:57,040
like things like key

00:41:54,800 --> 00:41:58,160
chain that i use as a librarical

00:41:57,040 --> 00:42:01,599
reactive

00:41:58,160 --> 00:42:03,920
key chain and a lot of the um

00:42:01,599 --> 00:42:04,800
security aspects are also handled on the

00:42:03,920 --> 00:42:06,880
server side

00:42:04,800 --> 00:42:08,160
um in terms of tokens and things like

00:42:06,880 --> 00:42:11,760
that so

00:42:08,160 --> 00:42:15,599
yep i hope that answered that how often

00:42:11,760 --> 00:42:19,280
do you have to drop into native code um

00:42:15,599 --> 00:42:21,280
very uh infrequently on my end um

00:42:19,280 --> 00:42:24,880
probably maybe five percent

00:42:21,280 --> 00:42:27,440
of the time for both android and ios

00:42:24,880 --> 00:42:28,720
we try to do some custom coding on the

00:42:27,440 --> 00:42:33,200
native side

00:42:28,720 --> 00:42:35,359
but we do have a ton of code close to 90

00:42:33,200 --> 00:42:38,800
shared so i don't do a lot of native

00:42:35,359 --> 00:42:38,800
coding and didn't have to

00:42:40,720 --> 00:42:45,839
any other questions

00:42:50,000 --> 00:42:56,319
um expo what do you think of expo

00:42:53,359 --> 00:42:57,280
i really love expo um i've used it on

00:42:56,319 --> 00:43:00,240
few projects

00:42:57,280 --> 00:43:00,560
and expo is great if you don't want to

00:43:00,240 --> 00:43:03,359
do

00:43:00,560 --> 00:43:04,079
any native coding as we talked about

00:43:03,359 --> 00:43:07,280
previously

00:43:04,079 --> 00:43:08,800
and it is it is super easy to set up and

00:43:07,280 --> 00:43:11,359
get going but

00:43:08,800 --> 00:43:12,480
i do notice that if you want your app on

00:43:11,359 --> 00:43:15,359
the app store

00:43:12,480 --> 00:43:17,440
and want a lot of flexibility in general

00:43:15,359 --> 00:43:19,200
um you probably don't want to go explore

00:43:17,440 --> 00:43:21,440
out if you like native coding if you

00:43:19,200 --> 00:43:23,200
want to have you know

00:43:21,440 --> 00:43:25,200
a lot of native developers on your team

00:43:23,200 --> 00:43:26,720
who like it then you probably want to

00:43:25,200 --> 00:43:28,880
leverage that because

00:43:26,720 --> 00:43:30,400
when you use expo you can't really do

00:43:28,880 --> 00:43:33,200
any native coding at all

00:43:30,400 --> 00:43:34,720
so kind of adds an abstraction on top of

00:43:33,200 --> 00:43:37,280
react native

00:43:34,720 --> 00:43:38,880
it's good for those who want quick uh

00:43:37,280 --> 00:43:40,800
projects and they want to finish things

00:43:38,880 --> 00:43:43,760
up pretty quick and the turnaround time

00:43:40,800 --> 00:43:45,760
with expose really fast

00:43:43,760 --> 00:43:46,960
but if you want way more flexibility and

00:43:45,760 --> 00:43:49,040
want to customize

00:43:46,960 --> 00:43:55,839
probably expose not the way it just

00:43:49,040 --> 00:43:55,839
depends on your use case

00:43:57,119 --> 00:44:00,400
yeah a lot of people are actually not

00:43:58,960 --> 00:44:03,599
aware of these

00:44:00,400 --> 00:44:06,400
extensions is what i uh heard because um

00:44:03,599 --> 00:44:08,160
i also rarely use it but i did find that

00:44:06,400 --> 00:44:10,079
on the documentation

00:44:08,160 --> 00:44:11,520
some time ago and started using it for

00:44:10,079 --> 00:44:20,880
some

00:44:11,520 --> 00:44:20,880

YouTube URL: https://www.youtube.com/watch?v=QWa38RXjN5Q


