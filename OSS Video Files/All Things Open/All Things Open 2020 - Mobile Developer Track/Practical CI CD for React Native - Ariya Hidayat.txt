Title: Practical CI CD for React Native - Ariya Hidayat
Publication date: 2020-12-16
Playlist: All Things Open 2020 - Mobile Developer Track
Description: 
	Presented by: Ariya Hidayat
Presented at All Things Open 2020 - Mobile Developer Track

Abstract: React Native emerges as a popular solution to build Android and iOS applications from a single code base written in JavaScript/TypeScript. For teams just starting to embrace React Native, the best practices to ensure rock-solid development and deployment are not widely covered yet. In this talk, we will discuss practical CI/CD techniques that allow your team to accelerate the process towards the development of world-class, high-quality React Native apps:

- Automated build and verification for every single revision
- Continuous check for code quality metrics
- Easy deployment to the QA/QE/Verification team
Captions: 
	00:00:05,120 --> 00:00:07,759
hello everyone thank you for being here

00:00:06,720 --> 00:00:09,840
with me

00:00:07,759 --> 00:00:11,920
thank you elena and thank you all things

00:00:09,840 --> 00:00:13,759
open for giving me the opportunity to

00:00:11,920 --> 00:00:14,160
share some of the experience that i've

00:00:13,759 --> 00:00:16,160
done

00:00:14,160 --> 00:00:18,240
in the last couple of years trying to

00:00:16,160 --> 00:00:21,760
deal with a few notable

00:00:18,240 --> 00:00:23,199
react native amps now as the title

00:00:21,760 --> 00:00:26,160
implies

00:00:23,199 --> 00:00:28,000
this involves a certain technology

00:00:26,160 --> 00:00:30,560
referred to as continuous integration

00:00:28,000 --> 00:00:35,120
and continuous deployment or delivery

00:00:30,560 --> 00:00:37,680
and usually when we mention cincd

00:00:35,120 --> 00:00:39,760
this relates to a lot of practices that

00:00:37,680 --> 00:00:42,840
people adopted for instance

00:00:39,760 --> 00:00:45,760
whether they want to adopt the agile

00:00:42,840 --> 00:00:48,640
practice maybe deploy certain dev ops

00:00:45,760 --> 00:00:50,000
cultures and so on and so forth or just

00:00:48,640 --> 00:00:53,039
wants to get into the

00:00:50,000 --> 00:00:56,079
much more frequent release of cycles

00:00:53,039 --> 00:00:57,039
from the way i look at it at the end of

00:00:56,079 --> 00:00:59,280
the day this is

00:00:57,039 --> 00:01:01,199
designed to answer a simple question and

00:00:59,280 --> 00:01:03,920
something that very often happens

00:01:01,199 --> 00:01:05,199
within any kind of development system

00:01:03,920 --> 00:01:07,920
engineers often

00:01:05,199 --> 00:01:08,560
discuss why certain things don't work

00:01:07,920 --> 00:01:11,760
with

00:01:08,560 --> 00:01:13,840
their stakeholders and it was done to

00:01:11,760 --> 00:01:16,640
one particular situation that

00:01:13,840 --> 00:01:17,680
occurs almost on a daily or even weekly

00:01:16,640 --> 00:01:20,159
basis

00:01:17,680 --> 00:01:21,920
whatever is being worked on apparently

00:01:20,159 --> 00:01:22,400
doesn't work in different systems or

00:01:21,920 --> 00:01:24,799
different

00:01:22,400 --> 00:01:25,439
laptops or different developer machines

00:01:24,799 --> 00:01:29,119
but

00:01:25,439 --> 00:01:31,600
hey it works on my machine now the half

00:01:29,119 --> 00:01:33,200
joking solution to this will be to just

00:01:31,600 --> 00:01:35,840
pack your machine and we send it to

00:01:33,200 --> 00:01:38,720
production and of course

00:01:35,840 --> 00:01:40,240
this can apply to certain technology but

00:01:38,720 --> 00:01:43,200
doesn't necessarily always

00:01:40,240 --> 00:01:44,560
apply to in our context react native

00:01:43,200 --> 00:01:46,640
apps because

00:01:44,560 --> 00:01:48,079
if it works on my setup and i'm working

00:01:46,640 --> 00:01:49,040
on android it works on my android

00:01:48,079 --> 00:01:51,360
emulator

00:01:49,040 --> 00:01:53,200
it doesn't mean that i can i can ship

00:01:51,360 --> 00:01:56,320
this this code to

00:01:53,200 --> 00:01:57,920
all the android users now

00:01:56,320 --> 00:02:00,079
um this is the first problem that we

00:01:57,920 --> 00:02:00,479
want to tackle the other problem would

00:02:00,079 --> 00:02:02,880
be

00:02:00,479 --> 00:02:03,680
this uh battle back and forth between

00:02:02,880 --> 00:02:06,840
let's say

00:02:03,680 --> 00:02:08,399
your development team and your testers

00:02:06,840 --> 00:02:12,319
um

00:02:08,399 --> 00:02:14,000
exchanging apks because for instance

00:02:12,319 --> 00:02:17,360
certain bugs have been fixed and

00:02:14,000 --> 00:02:19,760
therefore the testers need to

00:02:17,360 --> 00:02:20,800
install a different set of apps and

00:02:19,760 --> 00:02:22,959
launch the app again

00:02:20,800 --> 00:02:23,920
and very fine that oh no it wasn't fixed

00:02:22,959 --> 00:02:26,160
yet and then

00:02:23,920 --> 00:02:28,000
the tester realized that oh i installed

00:02:26,160 --> 00:02:30,080
the wrong version or the wrong

00:02:28,000 --> 00:02:31,519
build and so on and so forth and this

00:02:30,080 --> 00:02:32,400
keeps becoming a problem because it's

00:02:31,519 --> 00:02:35,920
hard to track

00:02:32,400 --> 00:02:36,800
which apps is being tested manually

00:02:35,920 --> 00:02:39,920
right now and

00:02:36,800 --> 00:02:41,760
it's also hard to go back to let's say

00:02:39,920 --> 00:02:43,280
uh the person that works the day before

00:02:41,760 --> 00:02:46,720
the week before the month before

00:02:43,280 --> 00:02:48,800
unless an extensive history and archive

00:02:46,720 --> 00:02:50,319
is being taken care of which is usually

00:02:48,800 --> 00:02:52,080
not the case

00:02:50,319 --> 00:02:54,000
now it's probably useful to refer back

00:02:52,080 --> 00:02:57,040
to the article

00:02:54,000 --> 00:02:59,040
written by martin follow a few years ago

00:02:57,040 --> 00:03:00,480
and it's a long statement but what i

00:02:59,040 --> 00:03:01,120
want to highlight here at the end of the

00:03:00,480 --> 00:03:03,280
day

00:03:01,120 --> 00:03:04,400
continuous integration is a question of

00:03:03,280 --> 00:03:07,200
practice

00:03:04,400 --> 00:03:07,840
and the key points of this practice will

00:03:07,200 --> 00:03:12,400
be

00:03:07,840 --> 00:03:12,400
one it has to be a frequent integration

00:03:13,200 --> 00:03:16,959
in other words if if some developers

00:03:15,599 --> 00:03:19,840
decided to go in a cave

00:03:16,959 --> 00:03:21,040
and then decided to come with features

00:03:19,840 --> 00:03:23,120
and then work on it

00:03:21,040 --> 00:03:24,159
for three months and come back and get

00:03:23,120 --> 00:03:25,040
out of the cave and then try to

00:03:24,159 --> 00:03:27,200
integrate them

00:03:25,040 --> 00:03:28,560
that doesn't necessarily confirm uh with

00:03:27,200 --> 00:03:30,640
continuous aggression when there's

00:03:28,560 --> 00:03:32,239
continuous aspect of this integration

00:03:30,640 --> 00:03:35,360
that's one thing

00:03:32,239 --> 00:03:36,080
in order to shift this logically or

00:03:35,360 --> 00:03:38,000
emotionally

00:03:36,080 --> 00:03:40,159
there has to be some ways to be able to

00:03:38,000 --> 00:03:42,480
integrate all these

00:03:40,159 --> 00:03:44,879
features or bug fixes anything that each

00:03:42,480 --> 00:03:47,200
developer

00:03:44,879 --> 00:03:48,000
work on in an automated fashion and

00:03:47,200 --> 00:03:50,560
therefore it

00:03:48,000 --> 00:03:52,640
implies that tests and automated build

00:03:50,560 --> 00:03:55,599
needs to exist

00:03:52,640 --> 00:03:57,760
so in the ci space there's a lot of

00:03:55,599 --> 00:04:01,040
solutions from do it do it yourself

00:03:57,760 --> 00:04:02,239
such as jenkins to many ci as the

00:04:01,040 --> 00:04:04,560
surface from trifis

00:04:02,239 --> 00:04:05,280
upware circle ci as republic and a few

00:04:04,560 --> 00:04:07,760
others

00:04:05,280 --> 00:04:09,040
and we're not going to cover all of them

00:04:07,760 --> 00:04:10,000
i'm just going to give an example of

00:04:09,040 --> 00:04:12,480
something that

00:04:10,000 --> 00:04:13,200
i think a bit more suitable for react

00:04:12,480 --> 00:04:16,400
native

00:04:13,200 --> 00:04:17,280
for ios and android development and just

00:04:16,400 --> 00:04:18,639
to

00:04:17,280 --> 00:04:20,959
make sure that everyone understand this

00:04:18,639 --> 00:04:23,199
a full disclaimer i work

00:04:20,959 --> 00:04:24,960
i don't work for any of the companies

00:04:23,199 --> 00:04:27,840
this is not a paid endorsement

00:04:24,960 --> 00:04:28,320
i'm just happy customers and eager to

00:04:27,840 --> 00:04:31,680
share

00:04:28,320 --> 00:04:33,199
the experience that i've done

00:04:31,680 --> 00:04:35,680
all right let's start with the ci part

00:04:33,199 --> 00:04:37,440
and this is this should be easy

00:04:35,680 --> 00:04:38,880
um let's take a look at typical

00:04:37,440 --> 00:04:42,800
development process

00:04:38,880 --> 00:04:45,120
there's a main branch of master branch

00:04:42,800 --> 00:04:46,400
where for instance a lot of work happen

00:04:45,120 --> 00:04:48,400
and then usually

00:04:46,400 --> 00:04:50,479
follows a typical style of creating

00:04:48,400 --> 00:04:52,160
feature brands for small features or big

00:04:50,479 --> 00:04:54,479
features

00:04:52,160 --> 00:04:55,199
the aspect of ci mandates that at some

00:04:54,479 --> 00:04:57,199
point

00:04:55,199 --> 00:04:58,639
this can be integrated back into the

00:04:57,199 --> 00:05:00,880
main branch

00:04:58,639 --> 00:05:02,479
again ideally as frequently as possible

00:05:00,880 --> 00:05:04,960
multiple times a day

00:05:02,479 --> 00:05:06,400
and also automated nobody needs to do

00:05:04,960 --> 00:05:10,240
the manual merge

00:05:06,400 --> 00:05:12,320
by hand in order to see if this

00:05:10,240 --> 00:05:14,880
the important aspect of this would be

00:05:12,320 --> 00:05:16,720
well how do we build

00:05:14,880 --> 00:05:19,440
the react native apps for android and

00:05:16,720 --> 00:05:21,360
ios in such a way that

00:05:19,440 --> 00:05:22,639
it can be built automatically it doesn't

00:05:21,360 --> 00:05:24,160
require someone to

00:05:22,639 --> 00:05:26,400
check out on a laptop that has the

00:05:24,160 --> 00:05:28,400
android sdk and ios sdk and all the

00:05:26,400 --> 00:05:31,600
development tools

00:05:28,400 --> 00:05:34,000
um for this presentation i'm going to

00:05:31,600 --> 00:05:36,639
give an example of using github actions

00:05:34,000 --> 00:05:38,080
this is part of github workflow if you

00:05:36,639 --> 00:05:42,160
want to follow along

00:05:38,080 --> 00:05:44,960
there is a sample project github.com

00:05:42,160 --> 00:05:46,160
hello dance reactors native this is the

00:05:44,960 --> 00:05:48,880
most simplest

00:05:46,160 --> 00:05:50,800
react native apps possible it does

00:05:48,880 --> 00:05:53,039
nothing but the display hello world

00:05:50,800 --> 00:05:55,199
and it's intended to be like that so

00:05:53,039 --> 00:05:57,120
that we can just pay attention to

00:05:55,199 --> 00:05:58,319
how the entire ci and cd for this

00:05:57,120 --> 00:06:00,800
particular project

00:05:58,319 --> 00:06:02,319
they're being developed github actions

00:06:00,800 --> 00:06:04,000
is the features that have been available

00:06:02,319 --> 00:06:04,479
for github for a while as part of the

00:06:04,000 --> 00:06:07,280
github

00:06:04,479 --> 00:06:08,560
workflows and then the advantage of

00:06:07,280 --> 00:06:12,400
github action is that

00:06:08,560 --> 00:06:14,560
it's very well integrated into github

00:06:12,400 --> 00:06:15,840
compared to other third-party ci such as

00:06:14,560 --> 00:06:19,360
traffic or

00:06:15,840 --> 00:06:21,520
app fair or azure pipelines now

00:06:19,360 --> 00:06:22,560
in order to come up with github

00:06:21,520 --> 00:06:25,440
workflows

00:06:22,560 --> 00:06:26,800
with certain actions it's very simple uh

00:06:25,440 --> 00:06:28,880
all we need to do is to

00:06:26,800 --> 00:06:29,840
create the directory for github slash

00:06:28,880 --> 00:06:31,919
workflows

00:06:29,840 --> 00:06:33,440
and inside this directory we're gonna

00:06:31,919 --> 00:06:36,639
put a couple of yaml

00:06:33,440 --> 00:06:36,639
files that

00:06:36,880 --> 00:06:40,479
defines the type of actions that we want

00:06:39,120 --> 00:06:42,000
to

00:06:40,479 --> 00:06:43,919
that that we want github to execute as

00:06:42,000 --> 00:06:46,000
part of the workflow now

00:06:43,919 --> 00:06:47,600
you could definitely compress this or

00:06:46,000 --> 00:06:50,800
com compact this

00:06:47,600 --> 00:06:52,800
or put it together in one yemo file but

00:06:50,800 --> 00:06:54,720
based on my experience is usually very

00:06:52,800 --> 00:06:55,840
useful to split this into multiple

00:06:54,720 --> 00:06:57,680
different actions

00:06:55,840 --> 00:06:59,599
depending on what the action is doing

00:06:57,680 --> 00:07:02,240
for instance in these examples

00:06:59,599 --> 00:07:04,319
i have one yama funnel for android build

00:07:02,240 --> 00:07:04,880
and the other one for ios and a separate

00:07:04,319 --> 00:07:08,560
file

00:07:04,880 --> 00:07:10,639
just for checking the code quality now

00:07:08,560 --> 00:07:11,919
once this three files are checking in or

00:07:10,639 --> 00:07:13,759
how many uh how

00:07:11,919 --> 00:07:15,039
how many yama files you want to have

00:07:13,759 --> 00:07:18,479
i'll check in

00:07:15,039 --> 00:07:20,240
into the repo every time you push

00:07:18,479 --> 00:07:22,080
to the repo or whenever there's a pull

00:07:20,240 --> 00:07:25,280
request then

00:07:22,080 --> 00:07:26,800
this um whatever action

00:07:25,280 --> 00:07:29,120
defined in the xml file will be executed

00:07:26,800 --> 00:07:31,199
by github and this is also manifested in

00:07:29,120 --> 00:07:32,319
the status for everything commit for

00:07:31,199 --> 00:07:35,840
instance

00:07:32,319 --> 00:07:38,240
we have the commit history view

00:07:35,840 --> 00:07:39,039
from this hello react native projects

00:07:38,240 --> 00:07:42,160
and you can see

00:07:39,039 --> 00:07:44,240
the green check marks on every commits

00:07:42,160 --> 00:07:46,000
and that indicates that all the checks

00:07:44,240 --> 00:07:48,479
aka the github actions

00:07:46,000 --> 00:07:49,360
have been executed and they pass with in

00:07:48,479 --> 00:07:52,479
this case

00:07:49,360 --> 00:07:55,360
uh success so there's no problems

00:07:52,479 --> 00:07:56,400
and you can see the names of those

00:07:55,360 --> 00:07:58,080
actions android

00:07:56,400 --> 00:08:00,160
code quality in ios corresponding to

00:07:58,080 --> 00:08:02,160
each of the ammo files

00:08:00,160 --> 00:08:03,360
this is fantastic because whenever

00:08:02,160 --> 00:08:05,039
there's some problems

00:08:03,360 --> 00:08:06,479
we can go back and look at the history

00:08:05,039 --> 00:08:09,199
of the commit history

00:08:06,479 --> 00:08:10,879
from the web interface of github and

00:08:09,199 --> 00:08:12,960
demonstrate that oh yeah

00:08:10,879 --> 00:08:14,080
you know the build breaks at certain

00:08:12,960 --> 00:08:16,879
points

00:08:14,080 --> 00:08:17,759
on these commits for instance ideally of

00:08:16,879 --> 00:08:18,879
course this shouldn't happen

00:08:17,759 --> 00:08:21,199
this is the purpose of continuous

00:08:18,879 --> 00:08:22,240
integration so let's start with simple

00:08:21,199 --> 00:08:25,039
yaml file

00:08:22,240 --> 00:08:26,000
this is just called quality yaml it is a

00:08:25,039 --> 00:08:30,639
react native project

00:08:26,000 --> 00:08:30,639
and therefore it carries a lot of uh

00:08:32,640 --> 00:08:39,360
uniqueness regarding the node.js project

00:08:36,159 --> 00:08:41,519
for instance this yaml file is

00:08:39,360 --> 00:08:42,479
so small but it does a lot of things

00:08:41,519 --> 00:08:44,560
that

00:08:42,479 --> 00:08:45,920
a developer normally needs to do

00:08:44,560 --> 00:08:48,399
whenever they want to

00:08:45,920 --> 00:08:49,120
work on new react net projects so just

00:08:48,399 --> 00:08:51,680
check it out

00:08:49,120 --> 00:08:52,160
make a phone of git clone and then

00:08:51,680 --> 00:08:54,240
install

00:08:52,160 --> 00:08:56,240
node we can choose the node version here

00:08:54,240 --> 00:08:59,360
and then run npmci

00:08:56,240 --> 00:09:01,279
the ci control part of npm install

00:08:59,360 --> 00:09:02,399
and pmci just install packages from

00:09:01,279 --> 00:09:05,440
package log

00:09:02,399 --> 00:09:07,279
and then run npm test which

00:09:05,440 --> 00:09:09,519
should run some of your tests that you

00:09:07,279 --> 00:09:13,760
have now

00:09:09,519 --> 00:09:15,839
uh if we have this files every time

00:09:13,760 --> 00:09:17,519
and on i forgot to mention in second

00:09:15,839 --> 00:09:18,240
line there's a set of push and pull

00:09:17,519 --> 00:09:20,000
requests

00:09:18,240 --> 00:09:22,160
this indicates that this action needs to

00:09:20,000 --> 00:09:24,320
be executed

00:09:22,160 --> 00:09:25,519
whenever there's a push to any kind of

00:09:24,320 --> 00:09:27,360
branch and whenever there's a pull

00:09:25,519 --> 00:09:30,240
request which could be handy and i'll

00:09:27,360 --> 00:09:34,080
show you in a minute

00:09:30,240 --> 00:09:34,080
when that happens then

00:09:34,320 --> 00:09:38,560
for every single push or every single

00:09:36,640 --> 00:09:40,399
request there's a report

00:09:38,560 --> 00:09:41,839
that describes all the things that you

00:09:40,399 --> 00:09:44,800
do on

00:09:41,839 --> 00:09:45,360
npm tests and you can put a lot of tests

00:09:44,800 --> 00:09:47,440
there

00:09:45,360 --> 00:09:49,040
generally speaking there's two big

00:09:47,440 --> 00:09:52,080
categories of tests

00:09:49,040 --> 00:09:53,600
for a unit test and integration test

00:09:52,080 --> 00:09:55,279
and the first one is static analyzer

00:09:53,600 --> 00:09:56,959
this is where for instance you run your

00:09:55,279 --> 00:09:58,080
linter or security scanners and

00:09:56,959 --> 00:10:01,200
dependency check

00:09:58,080 --> 00:10:03,279
or even checking for other code metrics

00:10:01,200 --> 00:10:05,279
such as cyclomatic complexity

00:10:03,279 --> 00:10:07,519
and then the category will be a dynamic

00:10:05,279 --> 00:10:10,640
analysis or dynamic analyzer

00:10:07,519 --> 00:10:12,160
which needs to run your code so that can

00:10:10,640 --> 00:10:13,440
also just look at the code and then

00:10:12,160 --> 00:10:15,839
infers a matrix

00:10:13,440 --> 00:10:17,440
in the case of dynamic analysis the test

00:10:15,839 --> 00:10:19,040
itself needs to run the code

00:10:17,440 --> 00:10:20,880
and this is manifested for instance in

00:10:19,040 --> 00:10:21,760
the unit test and with unitas sometimes

00:10:20,880 --> 00:10:23,519
we also try to

00:10:21,760 --> 00:10:24,959
try to track the coverage as illustrated

00:10:23,519 --> 00:10:27,920
in these examples

00:10:24,959 --> 00:10:28,959
of course i only have one test here but

00:10:27,920 --> 00:10:31,839
that has

00:10:28,959 --> 00:10:33,519
demonstrated that it gives the nice

00:10:31,839 --> 00:10:34,560
coverage on the statement and function

00:10:33,519 --> 00:10:37,120
and lines and just

00:10:34,560 --> 00:10:37,680
half of the coverage of the branch it

00:10:37,120 --> 00:10:40,480
may

00:10:37,680 --> 00:10:42,000
or may not be what you wanted feel free

00:10:40,480 --> 00:10:43,519
to adjust it accordingly

00:10:42,000 --> 00:10:45,760
the point here is that any kind of test

00:10:43,519 --> 00:10:48,480
that you you specify the

00:10:45,760 --> 00:10:49,279
yaml file will be displayed for every

00:10:48,480 --> 00:10:52,399
single commit

00:10:49,279 --> 00:10:55,920
in every single request now

00:10:52,399 --> 00:10:58,880
um let's take a look at the android demo

00:10:55,920 --> 00:10:59,360
this is intended to run debug build as

00:10:58,880 --> 00:11:01,360
if

00:10:59,360 --> 00:11:03,200
a developer will have check out the

00:11:01,360 --> 00:11:04,800
source code and run the debug

00:11:03,200 --> 00:11:06,320
the nice thing about github actions is

00:11:04,800 --> 00:11:07,040
because it runs in the so-called virtual

00:11:06,320 --> 00:11:08,800
environments

00:11:07,040 --> 00:11:10,800
and this virtual environment is not a

00:11:08,800 --> 00:11:11,839
generic let's say a docker container

00:11:10,800 --> 00:11:13,839
where you can craft

00:11:11,839 --> 00:11:16,160
or compose a number of different

00:11:13,839 --> 00:11:18,000
surfaces and tie them together

00:11:16,160 --> 00:11:20,399
it is really intended as the name

00:11:18,000 --> 00:11:23,200
implies of course to run actions

00:11:20,399 --> 00:11:23,200
that is typically

00:11:23,519 --> 00:11:27,200
used to build application and and

00:11:26,800 --> 00:11:30,800
there's

00:11:27,200 --> 00:11:32,480
many different uh ready to use

00:11:30,800 --> 00:11:33,839
sdk for instance you don't need to

00:11:32,480 --> 00:11:34,880
install anything if you want to build

00:11:33,839 --> 00:11:38,399
something for

00:11:34,880 --> 00:11:39,600
let's say android the same thing we just

00:11:38,399 --> 00:11:42,079
need to check out

00:11:39,600 --> 00:11:42,880
pick the suitable node version run npmci

00:11:42,079 --> 00:11:45,040
as usual

00:11:42,880 --> 00:11:46,640
and then execute gradle assemble debug

00:11:45,040 --> 00:11:50,720
this will continue to

00:11:46,640 --> 00:11:54,240
build the debug version of our amps now

00:11:50,720 --> 00:11:56,000
um again as i mentioned all the

00:11:54,240 --> 00:11:58,480
build lock is going to be visible

00:11:56,000 --> 00:12:00,720
straight from github interface

00:11:58,480 --> 00:12:02,480
and as you can see here the processor

00:12:00,720 --> 00:12:03,040
stuff is very fast obviously because

00:12:02,480 --> 00:12:05,760
this is a

00:12:03,040 --> 00:12:06,480
lower amps but just to demonstrate that

00:12:05,760 --> 00:12:09,040
even with

00:12:06,480 --> 00:12:10,399
standard there's nothing no component no

00:12:09,040 --> 00:12:12,320
logic whatsoever

00:12:10,399 --> 00:12:14,639
the build can be completed in less than

00:12:12,320 --> 00:12:17,920
two minutes and i think that's uh quite

00:12:14,639 --> 00:12:19,040
remarkable it means that uh it's a

00:12:17,920 --> 00:12:21,120
fascination if

00:12:19,040 --> 00:12:22,639
if something goes wrong somebody forget

00:12:21,120 --> 00:12:25,120
the dependencies or

00:12:22,639 --> 00:12:26,959
the bill doesn't compile then obviously

00:12:25,120 --> 00:12:29,440
you're going to know about that

00:12:26,959 --> 00:12:31,839
very quickly without waiting for minutes

00:12:29,440 --> 00:12:35,040
and minutes

00:12:31,839 --> 00:12:37,200
um you can even see the entire lock

00:12:35,040 --> 00:12:38,079
of the entire bill including every

00:12:37,200 --> 00:12:42,240
single step

00:12:38,079 --> 00:12:46,240
of the way every invocation of gradle

00:12:42,240 --> 00:12:47,600
every task that can be detailed

00:12:46,240 --> 00:12:49,920
which is useful when something goes

00:12:47,600 --> 00:12:53,839
wrong now for ios

00:12:49,920 --> 00:12:54,800
very similar again one of the beauty of

00:12:53,839 --> 00:12:57,120
virtual environment from

00:12:54,800 --> 00:12:58,560
github actions is that you can choose on

00:12:57,120 --> 00:12:59,600
which operating system this is going to

00:12:58,560 --> 00:13:01,839
run

00:12:59,600 --> 00:13:03,200
in the previous example for android it

00:13:01,839 --> 00:13:05,360
is sufficient to run this on

00:13:03,200 --> 00:13:06,800
ubuntu because android sdk is basically

00:13:05,360 --> 00:13:08,320
available for

00:13:06,800 --> 00:13:10,480
all operating system and the easiest one

00:13:08,320 --> 00:13:12,880
would be just run it on linux

00:13:10,480 --> 00:13:14,000
but for and for ios as we all know it

00:13:12,880 --> 00:13:16,399
can only build

00:13:14,000 --> 00:13:17,839
it can run on macos and therefore that's

00:13:16,399 --> 00:13:21,360
the line that specifies

00:13:17,839 --> 00:13:25,200
once on macos lettuce just check out

00:13:21,360 --> 00:13:27,040
the code pick a node.js apps run npm ci

00:13:25,200 --> 00:13:28,240
and then the next step is actually if

00:13:27,040 --> 00:13:31,279
you use cocoapods

00:13:28,240 --> 00:13:33,040
you have to run port install so that all

00:13:31,279 --> 00:13:36,399
dependency will be fetched

00:13:33,040 --> 00:13:38,560
and then we execute xcode command line

00:13:36,399 --> 00:13:40,320
as usual we need to specify the

00:13:38,560 --> 00:13:44,959
workspace the scheme

00:13:40,320 --> 00:13:48,000
sdk all of these things are not

00:13:44,959 --> 00:13:51,680
strange for anyone who has built

00:13:48,000 --> 00:13:53,040
a ios project for react native and

00:13:51,680 --> 00:13:55,279
if this is confusing you just take a

00:13:53,040 --> 00:13:57,760
look at the xcode terminal output

00:13:55,279 --> 00:13:58,800
and then you just copy that and adjust

00:13:57,760 --> 00:14:02,320
that accordingly

00:13:58,800 --> 00:14:04,399
to this particular yaml file

00:14:02,320 --> 00:14:06,880
now again the bill itself is going to

00:14:04,399 --> 00:14:10,240
take a bit longer

00:14:06,880 --> 00:14:11,279
for instance if you go to the bill ios

00:14:10,240 --> 00:14:13,120
debug lines here

00:14:11,279 --> 00:14:14,959
it's going to take three minutes 47

00:14:13,120 --> 00:14:16,160
seconds give or take so probably four

00:14:14,959 --> 00:14:18,560
minutes um

00:14:16,160 --> 00:14:20,399
nothing it's just the nature of ios

00:14:18,560 --> 00:14:21,680
built to take a bit much longer than

00:14:20,399 --> 00:14:23,519
android

00:14:21,680 --> 00:14:25,120
but i think it's very well manageable

00:14:23,519 --> 00:14:27,440
because uh you know

00:14:25,120 --> 00:14:28,880
four minutes and the beauty again of the

00:14:27,440 --> 00:14:30,320
github action is all these things

00:14:28,880 --> 00:14:31,519
happens in parallel so the ios build

00:14:30,320 --> 00:14:32,320
doesn't need to wait for the android but

00:14:31,519 --> 00:14:35,120
to complete

00:14:32,320 --> 00:14:35,680
before it started there's a couple of

00:14:35,120 --> 00:14:39,120
tricks

00:14:35,680 --> 00:14:41,839
that is um already in the repo

00:14:39,120 --> 00:14:42,320
sample that i mentioned but obviously we

00:14:41,839 --> 00:14:44,880
don't have

00:14:42,320 --> 00:14:46,639
time to go into deeper detail here and

00:14:44,880 --> 00:14:48,560
namely that is the

00:14:46,639 --> 00:14:51,040
caching of dependencies because we have

00:14:48,560 --> 00:14:54,480
to package management here that we use

00:14:51,040 --> 00:14:54,480
npm and bots

00:14:54,720 --> 00:14:58,000
there's a few lines of code that you can

00:14:56,000 --> 00:14:59,199
just copy and paste and that's allows

00:14:58,000 --> 00:15:02,079
you to

00:14:59,199 --> 00:15:03,600
save the npm packages that gets

00:15:02,079 --> 00:15:05,760
downloaded every single build

00:15:03,600 --> 00:15:07,519
in other words the first build might

00:15:05,760 --> 00:15:08,959
need to run the whole things but the

00:15:07,519 --> 00:15:12,079
subsequent board would just

00:15:08,959 --> 00:15:14,240
copies everything from the mbm directory

00:15:12,079 --> 00:15:15,680
for instance in this screen you can see

00:15:14,240 --> 00:15:17,440
that npm ci

00:15:15,680 --> 00:15:19,600
just take only 21 seconds which is

00:15:17,440 --> 00:15:22,639
impossible if it's start from scratch

00:15:19,600 --> 00:15:25,680
so it does work

00:15:22,639 --> 00:15:28,800
like this a bit of speed

00:15:25,680 --> 00:15:31,279
gaining a bit of sweep because of the uh

00:15:28,800 --> 00:15:32,079
warm cache that is available in this

00:15:31,279 --> 00:15:33,440
particular one

00:15:32,079 --> 00:15:35,279
and the same thing with pods you can see

00:15:33,440 --> 00:15:36,480
that install ports dependency is this

00:15:35,279 --> 00:15:38,880
just takes 10 seconds

00:15:36,480 --> 00:15:39,600
because effectively it's just copying

00:15:38,880 --> 00:15:42,639
all the

00:15:39,600 --> 00:15:45,839
downloaded cocoapods

00:15:42,639 --> 00:15:48,720
now as i mentioned one of the beauty of

00:15:45,839 --> 00:15:50,320
having this integrated into the checking

00:15:48,720 --> 00:15:52,720
process for the pull request

00:15:50,320 --> 00:15:54,399
is precisely because if someone makes a

00:15:52,720 --> 00:15:56,560
polycost to your project

00:15:54,399 --> 00:15:58,000
and that's going to fail the check that

00:15:56,560 --> 00:16:00,560
will be glaringly obvious

00:15:58,000 --> 00:16:01,519
in the political page in this case i

00:16:00,560 --> 00:16:05,120
simulated

00:16:01,519 --> 00:16:06,160
a commit that breaks the code formatting

00:16:05,120 --> 00:16:07,600
or code style

00:16:06,160 --> 00:16:08,720
that is mandated about the project and

00:16:07,600 --> 00:16:09,279
therefore is going to fail the code

00:16:08,720 --> 00:16:11,440
quality

00:16:09,279 --> 00:16:12,959
one the same thing can happen for

00:16:11,440 --> 00:16:15,360
instance maybe someone is

00:16:12,959 --> 00:16:16,720
working diligently on an android uh

00:16:15,360 --> 00:16:19,440
version of the apps

00:16:16,720 --> 00:16:21,519
but accidentally committing something uh

00:16:19,440 --> 00:16:22,079
or forgetting to put the dependency the

00:16:21,519 --> 00:16:24,399
suitable

00:16:22,079 --> 00:16:25,839
corresponding dependency for ios ios and

00:16:24,399 --> 00:16:27,120
therefore it's not updated

00:16:25,839 --> 00:16:28,959
and therefore whenever that person

00:16:27,120 --> 00:16:30,240
commits the change and then critical

00:16:28,959 --> 00:16:32,880
request

00:16:30,240 --> 00:16:34,320
the ios bill is broken and that will be

00:16:32,880 --> 00:16:36,880
indicated by this

00:16:34,320 --> 00:16:38,480
particular broken build that's useful

00:16:36,880 --> 00:16:39,759
because usually you walk either on

00:16:38,480 --> 00:16:41,279
android and ios

00:16:39,759 --> 00:16:42,800
and sometimes yeah you're supposed to

00:16:41,279 --> 00:16:45,680
check both but

00:16:42,800 --> 00:16:47,199
just in case you press for time

00:16:45,680 --> 00:16:49,440
sometimes you want to

00:16:47,199 --> 00:16:51,279
quickly continue to work on android not

00:16:49,440 --> 00:16:52,959
realizing that by doing that you break

00:16:51,279 --> 00:16:53,279
the ios build and this is one way to do

00:16:52,959 --> 00:16:55,199
that

00:16:53,279 --> 00:16:56,720
obviously the other way as well so if

00:16:55,199 --> 00:16:59,040
you're focusing on ios build

00:16:56,720 --> 00:17:00,320
this is a nice mechanism to keep you in

00:16:59,040 --> 00:17:02,000
check to make sure that

00:17:00,320 --> 00:17:03,440
you're not accidentally break the

00:17:02,000 --> 00:17:06,480
android bill

00:17:03,440 --> 00:17:09,839
because you didn't run it continuously

00:17:06,480 --> 00:17:11,839
on your machine or development setup

00:17:09,839 --> 00:17:13,520
now one of the nice things about all

00:17:11,839 --> 00:17:15,360
this aspect is you can store

00:17:13,520 --> 00:17:17,439
artifacts and artifacts is essentially

00:17:15,360 --> 00:17:19,199
whatever the outcome of the build

00:17:17,439 --> 00:17:20,880
process or the action here

00:17:19,199 --> 00:17:22,799
in this example i demonstrate the

00:17:20,880 --> 00:17:25,839
storage of the android

00:17:22,799 --> 00:17:28,319
apk the debug bill

00:17:25,839 --> 00:17:29,520
and for every single build you get the

00:17:28,319 --> 00:17:33,039
link to download your

00:17:29,520 --> 00:17:34,559
downloadable artifact for that debug apk

00:17:33,039 --> 00:17:36,320
that is built into the process now the

00:17:34,559 --> 00:17:38,960
same thing applies to ios in this case

00:17:36,320 --> 00:17:40,799
we're going to use x archive and this is

00:17:38,960 --> 00:17:43,440
useful because for instance

00:17:40,799 --> 00:17:44,240
um if you don't keep the artifacts in

00:17:43,440 --> 00:17:46,320
your machine

00:17:44,240 --> 00:17:47,919
and somebody tell you hey can you go

00:17:46,320 --> 00:17:50,160
back to this revision

00:17:47,919 --> 00:17:51,600
and then debug that now you don't need

00:17:50,160 --> 00:17:53,760
to go to that revision

00:17:51,600 --> 00:17:55,679
and then run the run the bill again you

00:17:53,760 --> 00:17:57,520
can just fetch the artifact here

00:17:55,679 --> 00:17:59,360
this is conveniently the debug version

00:17:57,520 --> 00:18:02,400
therefore you just need to run it

00:17:59,360 --> 00:18:04,480
on your emulator or simulator for the

00:18:02,400 --> 00:18:07,200
usual stage

00:18:04,480 --> 00:18:08,000
so in summary uh the pull request

00:18:07,200 --> 00:18:10,240
mechanism

00:18:08,000 --> 00:18:11,120
allows you to catch uh broken bill and

00:18:10,240 --> 00:18:13,360
then

00:18:11,120 --> 00:18:15,679
because github action is a first party

00:18:13,360 --> 00:18:16,640
ci it's very well integrated i recommend

00:18:15,679 --> 00:18:18,880
news to play with

00:18:16,640 --> 00:18:20,400
uh github action based on the repo that

00:18:18,880 --> 00:18:23,600
i just mentioned

00:18:20,400 --> 00:18:27,200
and artifacts that's extremely powerful

00:18:23,600 --> 00:18:29,120
now on to the continuous

00:18:27,200 --> 00:18:30,559
deployment or continuous delivery if you

00:18:29,120 --> 00:18:32,720
want to

00:18:30,559 --> 00:18:34,480
directly deliver the application to the

00:18:32,720 --> 00:18:35,280
end user through the app store or play

00:18:34,480 --> 00:18:38,160
store

00:18:35,280 --> 00:18:39,919
this is intended to do the same thing

00:18:38,160 --> 00:18:42,160
that that we've done for ci

00:18:39,919 --> 00:18:43,679
but at the end of the development cycles

00:18:42,160 --> 00:18:45,679
maybe at the end of the spring

00:18:43,679 --> 00:18:46,720
to really deliver the apps to your

00:18:45,679 --> 00:18:48,559
stakeholder

00:18:46,720 --> 00:18:49,840
be it your end user if you want to

00:18:48,559 --> 00:18:53,280
publish it to source

00:18:49,840 --> 00:18:55,440
or for instance through your qa or

00:18:53,280 --> 00:18:58,000
tester testing team

00:18:55,440 --> 00:18:58,880
and again because we are human we make

00:18:58,000 --> 00:19:02,000
mistakes

00:18:58,880 --> 00:19:04,160
this happens all the time that

00:19:02,000 --> 00:19:05,840
we forgot to increment the number when

00:19:04,160 --> 00:19:08,640
ready to

00:19:05,840 --> 00:19:09,520
upload new apps to the app store or

00:19:08,640 --> 00:19:12,640
stores

00:19:09,520 --> 00:19:15,120
and this creates a problem alluding to

00:19:12,640 --> 00:19:16,160
the situation that i mentioned earlier

00:19:15,120 --> 00:19:18,000
when a tester

00:19:16,160 --> 00:19:20,000
managed to get an incorrect version of

00:19:18,000 --> 00:19:21,760
the apps because the build number wasn't

00:19:20,000 --> 00:19:24,000
incremented properly and that can cause

00:19:21,760 --> 00:19:25,280
us confusion

00:19:24,000 --> 00:19:27,600
this purpose we're going to use app

00:19:25,280 --> 00:19:28,000
center i don't know for app center this

00:19:27,600 --> 00:19:31,200
is not

00:19:28,000 --> 00:19:32,799
endorsement and and the way it works is

00:19:31,200 --> 00:19:36,080
very simple documentation is very cool

00:19:32,799 --> 00:19:37,520
but i'll give you a quick walkthrough

00:19:36,080 --> 00:19:39,919
all you need to do is to go to app

00:19:37,520 --> 00:19:42,640
center and and sign in with github

00:19:39,919 --> 00:19:44,559
and then um you should create a new app

00:19:42,640 --> 00:19:46,320
unfortunately the way app center works

00:19:44,559 --> 00:19:47,679
the concept of new apps here is pro

00:19:46,320 --> 00:19:49,679
platform so if

00:19:47,679 --> 00:19:51,200
you work on android and ios you should

00:19:49,679 --> 00:19:53,600
create an app for

00:19:51,200 --> 00:19:54,320
an app for ios and then duplicate it

00:19:53,600 --> 00:19:56,880
again for

00:19:54,320 --> 00:19:58,320
android in this screenshot is for

00:19:56,880 --> 00:20:00,000
android and then you choose the react

00:19:58,320 --> 00:20:03,840
native as a platform

00:20:00,000 --> 00:20:05,840
now the beauty of um github

00:20:03,840 --> 00:20:07,360
app center is that it does have an

00:20:05,840 --> 00:20:08,400
understanding of whether this is java

00:20:07,360 --> 00:20:10,240
app

00:20:08,400 --> 00:20:12,159
or react native app or swift app and so

00:20:10,240 --> 00:20:14,159
on and so forth after that

00:20:12,159 --> 00:20:16,480
you need to connect it to the github

00:20:14,159 --> 00:20:19,440
project

00:20:16,480 --> 00:20:20,880
the source code of your apps app center

00:20:19,440 --> 00:20:24,400
also supports other sources such as

00:20:20,880 --> 00:20:26,240
azure devops and bitpacket and gitlab

00:20:24,400 --> 00:20:27,600
once you do that you have to configure

00:20:26,240 --> 00:20:30,720
the build process and

00:20:27,600 --> 00:20:34,000
this is different than the ci process

00:20:30,720 --> 00:20:36,000
because this is this is for

00:20:34,000 --> 00:20:37,039
building for production uh we want to

00:20:36,000 --> 00:20:40,080
deploy it to

00:20:37,039 --> 00:20:44,720
the phones only for testing

00:20:40,080 --> 00:20:48,159
for instance um there's a

00:20:44,720 --> 00:20:49,440
sign builds sections that is of course

00:20:48,159 --> 00:20:50,880
different for android and ios for

00:20:49,440 --> 00:20:52,480
android you need to specify the key

00:20:50,880 --> 00:20:54,080
stores

00:20:52,480 --> 00:20:55,840
you can just upload it and specify the

00:20:54,080 --> 00:20:58,159
password and so on and so forth

00:20:55,840 --> 00:20:59,280
for ios again you need to upload the

00:20:58,159 --> 00:21:02,960
provisioning profile

00:20:59,280 --> 00:21:04,480
and the certificates

00:21:02,960 --> 00:21:06,480
this is fantastic because then we don't

00:21:04,480 --> 00:21:08,240
need to try to account for this

00:21:06,480 --> 00:21:09,840
in our standard build process everything

00:21:08,240 --> 00:21:10,799
is going to be taken care by app center

00:21:09,840 --> 00:21:13,520
automatically

00:21:10,799 --> 00:21:15,120
now once you do that we need to create

00:21:13,520 --> 00:21:17,679
the distribution group

00:21:15,120 --> 00:21:19,280
distribution group is a terms in app

00:21:17,679 --> 00:21:21,039
center to specify

00:21:19,280 --> 00:21:23,840
a list of people identified by the

00:21:21,039 --> 00:21:26,240
emails that will get notifications

00:21:23,840 --> 00:21:28,000
whenever there's a new build that is

00:21:26,240 --> 00:21:30,720
being produced by app center

00:21:28,000 --> 00:21:31,280
and a new build could be from a certain

00:21:30,720 --> 00:21:33,679
branch

00:21:31,280 --> 00:21:34,320
or whenever you want to push it for

00:21:33,679 --> 00:21:37,440
every single

00:21:34,320 --> 00:21:39,919
commit so it depends on the um

00:21:37,440 --> 00:21:40,880
i think the approach that you want to

00:21:39,919 --> 00:21:43,919
take

00:21:40,880 --> 00:21:45,360
if it is testing during the sprint for

00:21:43,919 --> 00:21:47,120
instance you might want to generate

00:21:45,360 --> 00:21:48,720
new apps new build for every single

00:21:47,120 --> 00:21:49,679
commit but there's also a different

00:21:48,720 --> 00:21:51,600
approach where

00:21:49,679 --> 00:21:52,799
you want to wait until the integration

00:21:51,600 --> 00:21:55,600
stage and then from that

00:21:52,799 --> 00:21:56,159
from that moment onwards you need to

00:21:55,600 --> 00:21:58,799
create

00:21:56,159 --> 00:22:00,080
the build so app center allows those

00:21:58,799 --> 00:22:03,120
kind of a combination

00:22:00,080 --> 00:22:03,679
just play with uh the settings now if

00:22:03,120 --> 00:22:06,720
this is

00:22:03,679 --> 00:22:08,000
implemented and you invite those members

00:22:06,720 --> 00:22:12,159
of your teams

00:22:08,000 --> 00:22:14,880
to the testers

00:22:12,159 --> 00:22:16,880
they're going to receive an email or

00:22:14,880 --> 00:22:18,880
receive email that looks like this

00:22:16,880 --> 00:22:20,159
invitation to test hello react native

00:22:18,880 --> 00:22:23,039
for android

00:22:20,159 --> 00:22:23,679
and then and this is the fascinating

00:22:23,039 --> 00:22:25,840
thing about

00:22:23,679 --> 00:22:26,880
app center because just by clicking the

00:22:25,840 --> 00:22:30,559
app

00:22:26,880 --> 00:22:32,880
they'll go to the app center page

00:22:30,559 --> 00:22:33,600
and then they can install it right away

00:22:32,880 --> 00:22:37,440
it should be

00:22:33,600 --> 00:22:38,960
straightforward for android

00:22:37,440 --> 00:22:41,280
a bit more complicated for eyes but as

00:22:38,960 --> 00:22:42,240
long as whoever on the receiving end of

00:22:41,280 --> 00:22:45,280
this email

00:22:42,240 --> 00:22:46,960
just follow the instruction that is

00:22:45,280 --> 00:22:49,280
given by a center in the email

00:22:46,960 --> 00:22:51,039
they should be able to install the apps

00:22:49,280 --> 00:22:55,440
as a bonus for android

00:22:51,039 --> 00:22:56,799
usually installing hockey app

00:22:55,440 --> 00:22:58,720
it's a companion app you don't need to

00:22:56,799 --> 00:23:01,120
use it but it's very useful

00:22:58,720 --> 00:23:02,480
it's it's fantastic because then instead

00:23:01,120 --> 00:23:04,240
of going to the

00:23:02,480 --> 00:23:05,919
app center website you can just use this

00:23:04,240 --> 00:23:08,480
hockey app to keep track of the

00:23:05,919 --> 00:23:09,919
history of previous releases and then

00:23:08,480 --> 00:23:12,640
that allows you also to

00:23:09,919 --> 00:23:13,760
switch between different builds so you

00:23:12,640 --> 00:23:15,600
can uninstall

00:23:13,760 --> 00:23:17,039
let's say build number four and go back

00:23:15,600 --> 00:23:20,240
to build number one and see

00:23:17,039 --> 00:23:23,520
whether maybe is the defect have been

00:23:20,240 --> 00:23:24,960
fixed already and so on and so forth

00:23:23,520 --> 00:23:26,880
in other words you don't need to

00:23:24,960 --> 00:23:28,559
manually keep track of all the files and

00:23:26,880 --> 00:23:31,120
then uninstall and install it

00:23:28,559 --> 00:23:32,640
manually the nice thing again is that

00:23:31,120 --> 00:23:37,200
there's a release notes that

00:23:32,640 --> 00:23:40,400
maybe your developer will um

00:23:37,200 --> 00:23:42,400
inform the the distribution groups

00:23:40,400 --> 00:23:44,240
as to what's being included in this

00:23:42,400 --> 00:23:45,679
release app center can also pull this

00:23:44,240 --> 00:23:48,080
relationship from your commit

00:23:45,679 --> 00:23:48,080
history

00:23:49,520 --> 00:23:53,840
all right that's uh a little bit of uh

00:23:52,400 --> 00:23:58,799
journey to

00:23:53,840 --> 00:24:00,159
uh and share experience of uh doing cncd

00:23:58,799 --> 00:24:03,520
for react native apps

00:24:00,159 --> 00:24:06,000
and basically for ci um

00:24:03,520 --> 00:24:06,880
github actions is being used and for cd

00:24:06,000 --> 00:24:09,039
app center is

00:24:06,880 --> 00:24:10,559
the chosen solutions hopefully this is

00:24:09,039 --> 00:24:14,000
going to be useful for at least

00:24:10,559 --> 00:24:17,600
five benefits one is to reduce

00:24:14,000 --> 00:24:19,200
the unforced error let's say someone

00:24:17,600 --> 00:24:21,919
accidentally commits something

00:24:19,200 --> 00:24:22,880
that causes android ios ios or both

00:24:21,919 --> 00:24:25,840
build to fail

00:24:22,880 --> 00:24:26,960
and that can be quickly identified and

00:24:25,840 --> 00:24:30,640
prevented from

00:24:26,960 --> 00:24:33,279
making it into the main branch

00:24:30,640 --> 00:24:35,279
also since all the builds will be

00:24:33,279 --> 00:24:36,720
executed in the pristine environment

00:24:35,279 --> 00:24:38,799
we know that there's no drift you know

00:24:36,720 --> 00:24:39,440
there's no history because we will never

00:24:38,799 --> 00:24:41,279
know

00:24:39,440 --> 00:24:42,960
for each developer for instance what is

00:24:41,279 --> 00:24:45,520
being installed

00:24:42,960 --> 00:24:46,000
and i mean install and an edge with time

00:24:45,520 --> 00:24:48,080
in their

00:24:46,000 --> 00:24:49,600
respective development environment so

00:24:48,080 --> 00:24:52,880
see if something works

00:24:49,600 --> 00:24:54,480
in the um app center environment then

00:24:52,880 --> 00:24:56,159
most likely it's gonna it's gonna work

00:24:54,480 --> 00:24:57,039
everywhere else because it's simulating

00:24:56,159 --> 00:24:58,480
as if

00:24:57,039 --> 00:25:00,480
you have developer that has a fresh

00:24:58,480 --> 00:25:03,039
laptop installs the sd card

00:25:00,480 --> 00:25:05,039
builds it for the first time and also

00:25:03,039 --> 00:25:06,799
it's just as authoritative reference

00:25:05,039 --> 00:25:08,159
so if something doesn't work on

00:25:06,799 --> 00:25:09,200
somebody's laptop or somebody

00:25:08,159 --> 00:25:11,440
development machine

00:25:09,200 --> 00:25:12,320
but it works on maybe github action or

00:25:11,440 --> 00:25:14,400
app center

00:25:12,320 --> 00:25:15,679
then certainly something is wrong with

00:25:14,400 --> 00:25:17,520
the development environment

00:25:15,679 --> 00:25:19,760
because again could be multiple

00:25:17,520 --> 00:25:22,080
different factors incorrect sdk outdated

00:25:19,760 --> 00:25:24,880
and so on and so forth

00:25:22,080 --> 00:25:26,799
this is also useful because whenever

00:25:24,880 --> 00:25:28,320
there's a new hire for instance

00:25:26,799 --> 00:25:30,000
and they have difficulty setting up

00:25:28,320 --> 00:25:32,720
their environment they can

00:25:30,000 --> 00:25:33,440
uh take a look at the build lock from

00:25:32,720 --> 00:25:35,039
let's say give

00:25:33,440 --> 00:25:36,960
action to make sure that oh yeah this is

00:25:35,039 --> 00:25:39,039
what i missed maybe pop install wasn't

00:25:36,960 --> 00:25:42,159
executed properly and so on

00:25:39,039 --> 00:25:43,200
that's very powerful also a lot of tests

00:25:42,159 --> 00:25:45,840
can be implemented

00:25:43,200 --> 00:25:46,559
um something that is not visible to be

00:25:45,840 --> 00:25:48,159
executed

00:25:46,559 --> 00:25:49,840
every time a developer wants to commit

00:25:48,159 --> 00:25:51,360
something can be

00:25:49,840 --> 00:25:53,039
always implemented as part of the

00:25:51,360 --> 00:25:54,960
extensive test

00:25:53,039 --> 00:25:56,640
inside github actions because github

00:25:54,960 --> 00:25:58,640
action will execute in parallel

00:25:56,640 --> 00:25:59,840
whenever someone make a pro request they

00:25:58,640 --> 00:26:01,520
can go on and work on some of the

00:25:59,840 --> 00:26:04,000
features without being blocked

00:26:01,520 --> 00:26:05,919
by that particular build status of that

00:26:04,000 --> 00:26:08,480
pull request

00:26:05,919 --> 00:26:10,400
and last but not least we keep the

00:26:08,480 --> 00:26:12,799
archive when you keep the history

00:26:10,400 --> 00:26:14,799
and um this is again very useful to

00:26:12,799 --> 00:26:17,840
let's say bisect some problems

00:26:14,799 --> 00:26:20,880
and if someone discover a bug

00:26:17,840 --> 00:26:21,520
and then we all have to find out when it

00:26:20,880 --> 00:26:23,279
happened

00:26:21,520 --> 00:26:25,760
when the when it happened for the first

00:26:23,279 --> 00:26:26,559
time how is this version how is that

00:26:25,760 --> 00:26:28,799
built

00:26:26,559 --> 00:26:30,799
um that can be achieved easily by

00:26:28,799 --> 00:26:31,440
downloading the past artifact as opposed

00:26:30,799 --> 00:26:33,200
to

00:26:31,440 --> 00:26:36,000
going back one revision at a time and

00:26:33,200 --> 00:26:38,480
then try to complete the uh

00:26:36,000 --> 00:26:40,960
build again which sometime might not

00:26:38,480 --> 00:26:42,480
might not work right because

00:26:40,960 --> 00:26:43,840
three months ago it was in certain

00:26:42,480 --> 00:26:44,480
version of react native and now we

00:26:43,840 --> 00:26:46,559
upgraded

00:26:44,480 --> 00:26:49,039
so now all the development setup is kind

00:26:46,559 --> 00:26:49,039
of messed up

00:26:49,600 --> 00:26:54,080
yeah um that's uh hopefully this is

00:26:52,320 --> 00:26:54,960
useful for all of you and if you have

00:26:54,080 --> 00:26:58,559
some questions

00:26:54,960 --> 00:26:59,200
uh you can ask this on the q a right now

00:26:58,559 --> 00:27:01,039
or

00:26:59,200 --> 00:27:04,640
if you need to reach out to me at

00:27:01,039 --> 00:27:04,640
leather stage feel free to contact me on

00:27:04,840 --> 00:27:07,840
twitter

00:27:08,159 --> 00:27:10,240

YouTube URL: https://www.youtube.com/watch?v=YcmS0bMzY1s


