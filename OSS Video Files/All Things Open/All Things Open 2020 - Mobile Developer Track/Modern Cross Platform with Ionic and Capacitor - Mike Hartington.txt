Title: Modern Cross Platform with Ionic and Capacitor - Mike Hartington
Publication date: 2020-12-16
Playlist: All Things Open 2020 - Mobile Developer Track
Description: 
	Presented by: Mike Hartington, Ionic
Presented at All Things Open 2020 - Mobile Developer Track

Abstract: Building "cross-platform" apps is often a loaded term. With previous experiences defining how people think about the subject. But times have changed, and so has our technology for building cross-platform app. In this talk, we'll look at Ionic and Capacitor, a new way to build for iOS, Android, and most importantly the web, all with one codebase.
Captions: 
	00:00:05,120 --> 00:00:09,679
cool thank you so much

00:00:06,720 --> 00:00:10,320
uh i'm excited to be here this is my

00:00:09,679 --> 00:00:12,320
second

00:00:10,320 --> 00:00:13,599
time speaking at all things open a

00:00:12,320 --> 00:00:14,639
little bit different than the first time

00:00:13,599 --> 00:00:17,920
i will admit

00:00:14,639 --> 00:00:19,600
um but loving it so far i'm

00:00:17,920 --> 00:00:22,240
i'm thrilled that more conferences are

00:00:19,600 --> 00:00:24,080
doing remote stuff because i get to

00:00:22,240 --> 00:00:26,240
i get to do conferences without having

00:00:24,080 --> 00:00:29,599
to travel like crazy

00:00:26,240 --> 00:00:32,640
so we're going to talk about modern

00:00:29,599 --> 00:00:34,320
uh with ionic and capacitor now i want

00:00:32,640 --> 00:00:35,120
to make sure that the emphasis is not

00:00:34,320 --> 00:00:38,160
necessarily

00:00:35,120 --> 00:00:38,719
on ionic itself i want to put a lot more

00:00:38,160 --> 00:00:41,760
emphasis

00:00:38,719 --> 00:00:43,040
on the capacitor aspect of it so much so

00:00:41,760 --> 00:00:44,879
that i want to go through a little

00:00:43,040 --> 00:00:47,920
history lesson later on about

00:00:44,879 --> 00:00:50,800
uh what capacitor is why we've made it

00:00:47,920 --> 00:00:52,559
what its goal is and how it relates to

00:00:50,800 --> 00:00:55,360
other cross-platform

00:00:52,559 --> 00:00:56,719
solutions that exist out there like

00:00:55,360 --> 00:00:58,079
orlando said uh

00:00:56,719 --> 00:00:59,920
my name name's mike hardington you can

00:00:58,079 --> 00:01:01,840
find me on twitter uh

00:00:59,920 --> 00:01:03,039
m hardington if you have any questions

00:01:01,840 --> 00:01:05,519
you want to see

00:01:03,039 --> 00:01:07,280
uh pictures of my cats or some random

00:01:05,519 --> 00:01:11,119
furniture that i'm building because

00:01:07,280 --> 00:01:14,240
uh for side hobby i built furniture um

00:01:11,119 --> 00:01:16,960
quick little plug uh

00:01:14,240 --> 00:01:18,880
i work for ionic and we're hiring right

00:01:16,960 --> 00:01:19,680
now this is like a real fun opportunity

00:01:18,880 --> 00:01:22,640
i've never actually

00:01:19,680 --> 00:01:23,600
gotten a chance to plug my own hiring

00:01:22,640 --> 00:01:25,520
process

00:01:23,600 --> 00:01:26,799
uh if you are interested in some new

00:01:25,520 --> 00:01:30,479
jobs potentially

00:01:26,799 --> 00:01:33,040
uh jobs.leaver dot co slash ionic

00:01:30,479 --> 00:01:34,880
uh we got a few positions opening up uh

00:01:33,040 --> 00:01:37,520
and we'll have a couple more

00:01:34,880 --> 00:01:38,960
um in the coming week so definitely

00:01:37,520 --> 00:01:40,640
check it out if you are

00:01:38,960 --> 00:01:43,360
interested in a change of pace i think

00:01:40,640 --> 00:01:45,280
it's a pretty good company

00:01:43,360 --> 00:01:48,000
so let's talk about some of the high

00:01:45,280 --> 00:01:50,640
level ideas that we're going to go over

00:01:48,000 --> 00:01:51,920
uh one of the big ones is what

00:01:50,640 --> 00:01:55,280
cross-platform

00:01:51,920 --> 00:01:59,600
development is why it exists

00:01:55,280 --> 00:02:01,200
what are some of the history behind it

00:01:59,600 --> 00:02:03,520
we're going to look at the current

00:02:01,200 --> 00:02:05,360
landscape for cross-platform development

00:02:03,520 --> 00:02:06,880
basically what are some of the projects

00:02:05,360 --> 00:02:09,440
that people use

00:02:06,880 --> 00:02:11,440
on a day-to-day basis to create

00:02:09,440 --> 00:02:13,040
cross-platform apps

00:02:11,440 --> 00:02:14,879
and then we'll dive into capacitor and

00:02:13,040 --> 00:02:15,360
look a little bit at ionic but mostly

00:02:14,879 --> 00:02:18,879
focus

00:02:15,360 --> 00:02:22,640
on the capacitor aspect for

00:02:18,879 --> 00:02:26,040
adding it to your project

00:02:22,640 --> 00:02:27,680
so if we rewind and go back to roughly

00:02:26,040 --> 00:02:30,560
00:02:27,680 --> 00:02:32,080
uh this is when the original iphone sdk

00:02:30,560 --> 00:02:35,440
was released

00:02:32,080 --> 00:02:37,440
the iphone had been out for a year

00:02:35,440 --> 00:02:38,879
the promise was that instead of

00:02:37,440 --> 00:02:42,080
developing apps

00:02:38,879 --> 00:02:43,120
using some proprietary sdk people would

00:02:42,080 --> 00:02:46,400
be developing

00:02:43,120 --> 00:02:47,200
apps using the web and if you were

00:02:46,400 --> 00:02:49,120
around

00:02:47,200 --> 00:02:50,640
using mobile devices or using the

00:02:49,120 --> 00:02:51,760
internet and being a web developer in

00:02:50,640 --> 00:02:53,840
00:02:51,760 --> 00:02:56,400
you can tell you you probably can guess

00:02:53,840 --> 00:02:59,280
it that was a bad idea

00:02:56,400 --> 00:03:00,640
the web was pretty immature uh and had a

00:02:59,280 --> 00:03:04,239
lot of rough spots

00:03:00,640 --> 00:03:05,040
so after a year of the iphone uh being

00:03:04,239 --> 00:03:07,200
released

00:03:05,040 --> 00:03:09,040
apple's like yeah we're sorry we're

00:03:07,200 --> 00:03:10,879
gonna scrap that idea here's an actual

00:03:09,040 --> 00:03:12,800
native sdk

00:03:10,879 --> 00:03:14,800
uh the following year as android started

00:03:12,800 --> 00:03:18,159
to see its initial release we got an

00:03:14,800 --> 00:03:20,080
android sdk so between the two of these

00:03:18,159 --> 00:03:23,440
we have roughly

00:03:20,080 --> 00:03:25,360
plus or plus one or two uh like

00:03:23,440 --> 00:03:26,959
close to a decade of native tooling

00:03:25,360 --> 00:03:28,080
experiences if you know give or take

00:03:26,959 --> 00:03:32,000
some time

00:03:28,080 --> 00:03:34,319
in between there so native sdks have

00:03:32,000 --> 00:03:35,920
existed for mobile devices for quite

00:03:34,319 --> 00:03:39,280
some time and they've gone through

00:03:35,920 --> 00:03:41,360
quite a lot of improvements

00:03:39,280 --> 00:03:43,040
so the native sdks have their own

00:03:41,360 --> 00:03:44,239
package managers they have their own

00:03:43,040 --> 00:03:46,560
build tool chain

00:03:44,239 --> 00:03:47,280
they have their own ides they have their

00:03:46,560 --> 00:03:50,640
own

00:03:47,280 --> 00:03:50,640
ways of doing things

00:03:51,360 --> 00:03:54,640
now that's going to become important

00:03:52,720 --> 00:03:57,280
later on but note that

00:03:54,640 --> 00:03:59,120
since these sdks released there's kind

00:03:57,280 --> 00:03:59,599
of always been this inclination and

00:03:59,120 --> 00:04:01,760
these

00:03:59,599 --> 00:04:03,840
hackers who have been like you know i

00:04:01,760 --> 00:04:05,840
really did like the idea of

00:04:03,840 --> 00:04:07,200
using the web or using javascript at

00:04:05,840 --> 00:04:09,760
least to build

00:04:07,200 --> 00:04:11,280
my apps and deploy them to the app

00:04:09,760 --> 00:04:11,840
stores or deploy them to the web and

00:04:11,280 --> 00:04:14,640
just

00:04:11,840 --> 00:04:16,560
have features that the devices offer

00:04:14,640 --> 00:04:20,799
like geolocation bluetooth

00:04:16,560 --> 00:04:22,160
etc so since these hackers have kind of

00:04:20,799 --> 00:04:25,360
always existed

00:04:22,160 --> 00:04:28,479
there's been ways and ideas of

00:04:25,360 --> 00:04:29,600
how to get javascript and web apps onto

00:04:28,479 --> 00:04:32,639
these devices

00:04:29,600 --> 00:04:36,240
and behave like native apps now

00:04:32,639 --> 00:04:39,199
probably the first one that has

00:04:36,240 --> 00:04:40,000
done this is a project called cordova or

00:04:39,199 --> 00:04:43,280
phonegap

00:04:40,000 --> 00:04:44,800
heard of it before uh we'll focus on the

00:04:43,280 --> 00:04:47,360
cordova aspect of it as

00:04:44,800 --> 00:04:49,600
it is the uh the true open source

00:04:47,360 --> 00:04:52,240
version

00:04:49,600 --> 00:04:52,880
uh and this mantra kind of is this right

00:04:52,240 --> 00:04:56,800
once

00:04:52,880 --> 00:04:58,880
run anywhere uh philosophy basically

00:04:56,800 --> 00:05:01,360
i should be able to take my web app that

00:04:58,880 --> 00:05:04,240
i've written uh using javascript

00:05:01,360 --> 00:05:05,520
i've been able to deploy it to ios

00:05:04,240 --> 00:05:08,720
android

00:05:05,520 --> 00:05:10,160
uh blackberry tizen web os

00:05:08,720 --> 00:05:12,720
all these various different platforms

00:05:10,160 --> 00:05:15,919
that they uh supported back in the day

00:05:12,720 --> 00:05:18,639
and it should operate in the same way

00:05:15,919 --> 00:05:19,759
now i can't say for sure if this is the

00:05:18,639 --> 00:05:23,120
very first

00:05:19,759 --> 00:05:26,560
i know that in my research

00:05:23,120 --> 00:05:30,479
it was the very first version of cordovo

00:05:26,560 --> 00:05:33,759
ios was released after an ios

00:05:30,479 --> 00:05:36,240
dev boot camp um

00:05:33,759 --> 00:05:37,919
something around 2008 so i could be

00:05:36,240 --> 00:05:39,520
wrong there could have been others that

00:05:37,919 --> 00:05:42,560
have done this before but

00:05:39,520 --> 00:05:45,039
as far as i know cordova ios dates back

00:05:42,560 --> 00:05:47,360
to 2008 roughly after the first sdk was

00:05:45,039 --> 00:05:47,360
released

00:05:48,479 --> 00:05:55,120
the way that it works is that they embed

00:05:52,080 --> 00:05:57,919
a webview inside of a native app

00:05:55,120 --> 00:05:58,560
and then create this bridge layer for

00:05:57,919 --> 00:06:00,479
the

00:05:58,560 --> 00:06:01,919
webview to communicate with the native

00:06:00,479 --> 00:06:04,160
apis

00:06:01,919 --> 00:06:06,000
now how this works we'll look at in a

00:06:04,160 --> 00:06:09,440
little bit but this idea of a

00:06:06,000 --> 00:06:10,080
bridge and then a wrapper around your

00:06:09,440 --> 00:06:12,000
web app

00:06:10,080 --> 00:06:14,960
is going to become a common theme that

00:06:12,000 --> 00:06:17,360
we'll see in the future

00:06:14,960 --> 00:06:18,880
but its philosophy was that we should

00:06:17,360 --> 00:06:21,360
just polyfill these

00:06:18,880 --> 00:06:23,039
emerging standards and these emerging

00:06:21,360 --> 00:06:24,880
features coming out of

00:06:23,039 --> 00:06:26,400
the spec work so things like the

00:06:24,880 --> 00:06:30,880
geolocation api

00:06:26,400 --> 00:06:34,160
file access or the file reader api

00:06:30,880 --> 00:06:34,960
a couple of a couple web uh platform

00:06:34,160 --> 00:06:37,280
features

00:06:34,960 --> 00:06:40,319
that were still in early development

00:06:37,280 --> 00:06:43,759
cordova wanted to implement them

00:06:40,319 --> 00:06:46,319
following the spec at the time to

00:06:43,759 --> 00:06:47,280
give people a way to try out these

00:06:46,319 --> 00:06:49,199
features

00:06:47,280 --> 00:06:50,720
use them in a production and then either

00:06:49,199 --> 00:06:52,000
provide meaningful feedback to the

00:06:50,720 --> 00:06:55,360
standards process

00:06:52,000 --> 00:06:57,199
or just you know use them until

00:06:55,360 --> 00:06:58,960
sanders process said yep we're going to

00:06:57,199 --> 00:07:00,720
ship this in production

00:06:58,960 --> 00:07:03,440
and then cordova could remove any of the

00:07:00,720 --> 00:07:05,199
code that they use

00:07:03,440 --> 00:07:08,800
i think the most ambitious goal that

00:07:05,199 --> 00:07:10,160
they ever had was to cease to exist

00:07:08,800 --> 00:07:12,800
which you know if you want to get into

00:07:10,160 --> 00:07:16,160
some eastern philosophy and

00:07:12,800 --> 00:07:18,639
the idea of being able to

00:07:16,160 --> 00:07:19,440
remove yourself from existence that's a

00:07:18,639 --> 00:07:22,160
pretty

00:07:19,440 --> 00:07:23,599
pretty fun goal to create for your own

00:07:22,160 --> 00:07:26,080
project

00:07:23,599 --> 00:07:27,759
but the idea was that at some point the

00:07:26,080 --> 00:07:31,120
browser is going to get

00:07:27,759 --> 00:07:31,840
uh really good and the need for cordova

00:07:31,120 --> 00:07:35,360
or these

00:07:31,840 --> 00:07:38,080
uh or phonegap won't be there anymore

00:07:35,360 --> 00:07:39,440
so they eventually could remove

00:07:38,080 --> 00:07:45,520
themselves from the equation

00:07:39,440 --> 00:07:49,280
and just use the web

00:07:45,520 --> 00:07:52,479
from an architectural standpoint cordova

00:07:49,280 --> 00:07:55,919
operates uh in a pretty simple

00:07:52,479 --> 00:07:56,720
uh flow in our little graph that we have

00:07:55,919 --> 00:08:00,000
here we have

00:07:56,720 --> 00:08:03,120
our web app in this little blue uh

00:08:00,000 --> 00:08:06,160
rectangle which is loaded inside

00:08:03,120 --> 00:08:07,840
of a webview now this webview is written

00:08:06,160 --> 00:08:10,479
in native code so whether this

00:08:07,840 --> 00:08:12,879
is something like a webview in android

00:08:10,479 --> 00:08:16,240
or webview and ios doesn't matter

00:08:12,879 --> 00:08:19,599
that it loads all of this code and

00:08:16,240 --> 00:08:20,400
basically displays the entirety of your

00:08:19,599 --> 00:08:23,919
web app

00:08:20,400 --> 00:08:25,680
in 100 of the viewport height and 100 of

00:08:23,919 --> 00:08:27,520
the viewport width

00:08:25,680 --> 00:08:29,199
so you basically are recreating your

00:08:27,520 --> 00:08:32,880
entire app's ui

00:08:29,199 --> 00:08:34,399
using this approach when they want to

00:08:32,880 --> 00:08:37,680
communicate

00:08:34,399 --> 00:08:40,240
from the web app to the native

00:08:37,680 --> 00:08:43,200
device apis there is this bridge layer

00:08:40,240 --> 00:08:46,320
that the webview communicates with

00:08:43,200 --> 00:08:47,600
and sends data back and forth so for

00:08:46,320 --> 00:08:51,040
instance if you wanted to

00:08:47,600 --> 00:08:52,880
get your location data from the native

00:08:51,040 --> 00:08:55,920
geolocation api

00:08:52,880 --> 00:08:57,839
from the web app you call a method the

00:08:55,920 --> 00:09:00,800
webview intercepts that method

00:08:57,839 --> 00:09:02,000
calls the bridge the bridge goes out and

00:09:00,800 --> 00:09:05,680
actually gets the

00:09:02,000 --> 00:09:07,200
uh api or gets the location data

00:09:05,680 --> 00:09:09,120
sends it back to the webview and then

00:09:07,200 --> 00:09:12,000
the webview communicates that

00:09:09,120 --> 00:09:12,399
back to the javascript app in a pretty

00:09:12,000 --> 00:09:15,440
nice

00:09:12,399 --> 00:09:17,760
pub sub system of passing data back and

00:09:15,440 --> 00:09:17,760
forth

00:09:18,240 --> 00:09:24,080
now this is pretty simple

00:09:22,080 --> 00:09:25,839
it might not sound simple but

00:09:24,080 --> 00:09:26,640
architecturally the way that this works

00:09:25,839 --> 00:09:29,600
is pretty

00:09:26,640 --> 00:09:29,600
pretty straightforward

00:09:30,080 --> 00:09:37,760
where i think some of the

00:09:33,680 --> 00:09:39,839
quirky parts are when they start to

00:09:37,760 --> 00:09:42,000
tack on different methods or different

00:09:39,839 --> 00:09:45,440
apis to

00:09:42,000 --> 00:09:46,240
javascript to global objects on in

00:09:45,440 --> 00:09:48,480
javascript

00:09:46,240 --> 00:09:50,320
that don't necessarily exist anywhere

00:09:48,480 --> 00:09:52,320
else for example this is

00:09:50,320 --> 00:09:53,360
cordova's camera api where they say

00:09:52,320 --> 00:09:55,680
navigator

00:09:53,360 --> 00:09:56,720
dot camera dot get picture there's a

00:09:55,680 --> 00:09:59,760
success

00:09:56,720 --> 00:10:02,079
a failure and then a options parameter

00:09:59,760 --> 00:10:05,120
that we can use here

00:10:02,079 --> 00:10:07,200
the navigator.camera api doesn't

00:10:05,120 --> 00:10:09,279
actually exist in the browser today

00:10:07,200 --> 00:10:10,480
um so this is an example of cordova

00:10:09,279 --> 00:10:12,880
polyfilling some

00:10:10,480 --> 00:10:13,839
an api that doesn't exist in the browser

00:10:12,880 --> 00:10:16,320
or providing

00:10:13,839 --> 00:10:18,240
some sort of mechanism for developers to

00:10:16,320 --> 00:10:21,600
call these features

00:10:18,240 --> 00:10:23,680
uh nevertheless we have this api uh we

00:10:21,600 --> 00:10:24,399
can have our success and failure call

00:10:23,680 --> 00:10:26,399
back

00:10:24,399 --> 00:10:27,680
and then get the different options that

00:10:26,399 --> 00:10:30,079
we're passing around here

00:10:27,680 --> 00:10:32,079
setting the quality to 225 so a rather

00:10:30,079 --> 00:10:33,040
low quality image

00:10:32,079 --> 00:10:36,240
and then we're setting the camera

00:10:33,040 --> 00:10:39,279
destination type to get a url

00:10:36,240 --> 00:10:41,680
or a data uri uh

00:10:39,279 --> 00:10:43,600
further on down on success whenever we

00:10:41,680 --> 00:10:46,079
get that image data back

00:10:43,600 --> 00:10:46,640
we're just going to grab an element by

00:10:46,079 --> 00:10:48,959
id

00:10:46,640 --> 00:10:50,480
called my image and then set its source

00:10:48,959 --> 00:10:53,600
to be the base64

00:10:50,480 --> 00:10:56,160
string from our camera

00:10:53,600 --> 00:10:58,160
and then on failure we'll just throw an

00:10:56,160 --> 00:11:01,200
alert

00:10:58,160 --> 00:11:05,360
so pretty pretty simple here um

00:11:01,200 --> 00:11:08,240
this doesn't show a pretty

00:11:05,360 --> 00:11:08,560
unique quirk to cordova and that's if

00:11:08,240 --> 00:11:12,880
you

00:11:08,560 --> 00:11:12,880
want to do anything on startup

00:11:13,200 --> 00:11:16,640
there's going to be some sort of delay

00:11:15,600 --> 00:11:18,880
um

00:11:16,640 --> 00:11:20,560
when the native app gets instantiated

00:11:18,880 --> 00:11:22,240
there is a

00:11:20,560 --> 00:11:24,240
there's like a handshake process that

00:11:22,240 --> 00:11:25,600
needs to happen between the webview

00:11:24,240 --> 00:11:27,279
and the bridge layer and when that

00:11:25,600 --> 00:11:28,800
handshake doesn't have uh

00:11:27,279 --> 00:11:31,040
you know what if that handshake takes

00:11:28,800 --> 00:11:34,160
some time um there's no way

00:11:31,040 --> 00:11:35,440
for you to call native apis or have them

00:11:34,160 --> 00:11:37,360
be queued up

00:11:35,440 --> 00:11:39,360
so you need to listen for this event

00:11:37,360 --> 00:11:41,120
called device ready

00:11:39,360 --> 00:11:42,560
that basically says all right this event

00:11:41,120 --> 00:11:45,279
whenever it fires

00:11:42,560 --> 00:11:46,240
execute this method so if you are

00:11:45,279 --> 00:11:48,959
working on a

00:11:46,240 --> 00:11:51,120
maps application using cordova there's

00:11:48,959 --> 00:11:54,000
going to be an implicit delay

00:11:51,120 --> 00:11:54,320
automatically that could be as minimal

00:11:54,000 --> 00:11:56,720
as

00:11:54,320 --> 00:11:58,160
500 milliseconds or something a little

00:11:56,720 --> 00:11:59,120
bit more extreme i think the most i've

00:11:58,160 --> 00:12:02,160
seen was like

00:11:59,120 --> 00:12:04,800
five mil uh second delay uh

00:12:02,160 --> 00:12:05,760
granted this was a large app on a very

00:12:04,800 --> 00:12:08,880
old device

00:12:05,760 --> 00:12:10,800
so your miles may vary with this uh

00:12:08,880 --> 00:12:12,480
with with cordova but the fact that

00:12:10,800 --> 00:12:14,959
there is a delay

00:12:12,480 --> 00:12:16,000
led to the idea that cordova could be

00:12:14,959 --> 00:12:19,519
slow

00:12:16,000 --> 00:12:21,920
um you know

00:12:19,519 --> 00:12:23,440
take take what you want from that but

00:12:21,920 --> 00:12:25,600
it's not necessarily

00:12:23,440 --> 00:12:28,000
cordova that's slow but the device head

00:12:25,600 --> 00:12:28,000
is slow

00:12:28,880 --> 00:12:34,320
nevertheless with cordova um

00:12:32,320 --> 00:12:38,560
times are pretty good for for about the

00:12:34,320 --> 00:12:41,839
first six or seven years i would say

00:12:38,560 --> 00:12:43,440
they created support for a ton of

00:12:41,839 --> 00:12:46,480
different platforms

00:12:43,440 --> 00:12:47,920
there was ios android windows but

00:12:46,480 --> 00:12:50,959
there's also blackberry

00:12:47,920 --> 00:12:54,000
tizen symbian web os

00:12:50,959 --> 00:12:56,959
all these various platforms that today

00:12:54,000 --> 00:12:59,279
no longer exist so we're left with ios

00:12:56,959 --> 00:13:03,200
android the big two

00:12:59,279 --> 00:13:03,200
windows electron and mac os

00:13:04,800 --> 00:13:08,639
so if you need to develop a mobile app

00:13:07,279 --> 00:13:10,000
and then a desktop app

00:13:08,639 --> 00:13:12,399
cordova should be able to get you

00:13:10,000 --> 00:13:12,399
covered

00:13:12,480 --> 00:13:15,519
the fact that they've existed for such a

00:13:14,240 --> 00:13:18,480
long time also

00:13:15,519 --> 00:13:19,839
leads to this huge community of third

00:13:18,480 --> 00:13:22,160
party

00:13:19,839 --> 00:13:23,519
the way cordova works is that they take

00:13:22,160 --> 00:13:25,600
every single api

00:13:23,519 --> 00:13:27,839
and treat it as if it was a third-party

00:13:25,600 --> 00:13:28,959
plug-in or a package that you have to

00:13:27,839 --> 00:13:30,560
add to your project

00:13:28,959 --> 00:13:33,040
so if you want to get access to the

00:13:30,560 --> 00:13:35,680
camera install a plug-in

00:13:33,040 --> 00:13:36,399
and then call those apis if you want to

00:13:35,680 --> 00:13:38,639
say integrate

00:13:36,399 --> 00:13:39,839
firebase authentication or firebase

00:13:38,639 --> 00:13:44,000
analytics

00:13:39,839 --> 00:13:46,079
there is a firebase plugin that you can

00:13:44,000 --> 00:13:49,040
add to your project and then integrate

00:13:46,079 --> 00:13:51,199
with the native firebase sdks

00:13:49,040 --> 00:13:52,639
there are some edge cases with this uh

00:13:51,199 --> 00:13:53,680
one of the big ones is that there are

00:13:52,639 --> 00:13:56,720
multiple versions

00:13:53,680 --> 00:13:58,800
of some plugins which can lead to

00:13:56,720 --> 00:14:00,320
interesting questions of which plugin

00:13:58,800 --> 00:14:02,720
should i use or

00:14:00,320 --> 00:14:03,920
if i need to use x y and z for my

00:14:02,720 --> 00:14:06,399
plugins

00:14:03,920 --> 00:14:08,480
is that going to cause any conflicting

00:14:06,399 --> 00:14:11,040
install or build failures with

00:14:08,480 --> 00:14:13,360
these other plugins which which does

00:14:11,040 --> 00:14:13,360
happen

00:14:14,720 --> 00:14:20,720
now it's not a perfect setup uh there

00:14:17,839 --> 00:14:21,519
are a lot of custom uh scripts that are

00:14:20,720 --> 00:14:24,639
being run

00:14:21,519 --> 00:14:26,880
in order to do everything mind you

00:14:24,639 --> 00:14:28,000
back when cordova was created there was

00:14:26,880 --> 00:14:30,800
no npm

00:14:28,000 --> 00:14:31,920
there was no note uh no modules there

00:14:30,800 --> 00:14:33,920
was no yarn

00:14:31,920 --> 00:14:35,120
there was just there was no node to

00:14:33,920 --> 00:14:36,639
begin with

00:14:35,120 --> 00:14:38,560
there was a lot of things that were

00:14:36,639 --> 00:14:41,839
originally done as batch

00:14:38,560 --> 00:14:45,199
uh bash scripts for linux

00:14:41,839 --> 00:14:48,880
and then um batch scripts for

00:14:45,199 --> 00:14:51,760
for windows they've since moved over to

00:14:48,880 --> 00:14:53,279
a node-based uh setup but still there

00:14:51,760 --> 00:14:54,880
are custom

00:14:53,279 --> 00:14:57,680
scripts that have to run for every

00:14:54,880 --> 00:14:59,680
single project which could be

00:14:57,680 --> 00:15:00,800
a lot of overhead for developers to

00:14:59,680 --> 00:15:03,519
maintain

00:15:00,800 --> 00:15:06,480
um and if something happens to break

00:15:03,519 --> 00:15:08,560
which you know occasionally does happen

00:15:06,480 --> 00:15:10,160
you're now left to figure out okay where

00:15:08,560 --> 00:15:12,240
did this break

00:15:10,160 --> 00:15:13,519
how do i contribute back to fix this or

00:15:12,240 --> 00:15:16,320
how do i let people know

00:15:13,519 --> 00:15:16,320
that this broke

00:15:18,000 --> 00:15:21,839
if you're trying to add features to a

00:15:20,880 --> 00:15:24,560
native project

00:15:21,839 --> 00:15:25,600
well chances are you're not going to be

00:15:24,560 --> 00:15:28,399
keeping that native

00:15:25,600 --> 00:15:30,320
project around for long the way that

00:15:28,399 --> 00:15:33,440
they look at it was that

00:15:30,320 --> 00:15:35,440
no one should ever have to open up xcode

00:15:33,440 --> 00:15:37,680
or android studio

00:15:35,440 --> 00:15:38,880
and for a little bit that was okay but

00:15:37,680 --> 00:15:40,959
when

00:15:38,880 --> 00:15:43,120
these native platforms start changing

00:15:40,959 --> 00:15:46,160
how uh features get added

00:15:43,120 --> 00:15:47,759
for example push push notifications uh

00:15:46,160 --> 00:15:50,800
there's an entitlement that you can

00:15:47,759 --> 00:15:53,839
add in xcode where it's basically just

00:15:50,800 --> 00:15:55,279
clicking a box and it enables push

00:15:53,839 --> 00:15:58,079
notifications for your

00:15:55,279 --> 00:15:58,800
for your app going back to the second

00:15:58,079 --> 00:16:01,920
first point

00:15:58,800 --> 00:16:04,000
there is a custom script to add

00:16:01,920 --> 00:16:06,839
push notification support that needs to

00:16:04,000 --> 00:16:08,480
run if you want to enable push

00:16:06,839 --> 00:16:10,240
notifications

00:16:08,480 --> 00:16:12,399
having the custom tooling having the

00:16:10,240 --> 00:16:13,199
projects that were meant to be destroyed

00:16:12,399 --> 00:16:16,720
or blown away

00:16:13,199 --> 00:16:19,199
every time you uh build your project

00:16:16,720 --> 00:16:20,959
there's just it's a feedback loop of

00:16:19,199 --> 00:16:22,320
just okay well we're going to add this

00:16:20,959 --> 00:16:24,000
project to our app

00:16:22,320 --> 00:16:26,000
uh we need enable push notifications so

00:16:24,000 --> 00:16:26,480
let's run the script okay so that needs

00:16:26,000 --> 00:16:28,639
to get

00:16:26,480 --> 00:16:30,320
run every single time it at least to

00:16:28,639 --> 00:16:33,600
some confusion

00:16:30,320 --> 00:16:35,839
not only uh with that but if you

00:16:33,600 --> 00:16:37,440
set up your signing certificates for

00:16:35,839 --> 00:16:40,000
your native projects that can also be

00:16:37,440 --> 00:16:40,000
confusing

00:16:40,480 --> 00:16:44,320
now the last part i don't want to i

00:16:43,120 --> 00:16:47,839
don't want to say it's

00:16:44,320 --> 00:16:49,279
a a a big minus one

00:16:47,839 --> 00:16:51,279
but it's something to be aware of is

00:16:49,279 --> 00:16:52,160
that the overall project health of

00:16:51,279 --> 00:16:56,720
cordova

00:16:52,160 --> 00:16:59,199
um you know is in question right now

00:16:56,720 --> 00:17:00,320
um most of the major corporate

00:16:59,199 --> 00:17:04,160
contributors

00:17:00,320 --> 00:17:06,000
adobe google microsoft

00:17:04,160 --> 00:17:08,559
they've all stopped contributing to the

00:17:06,000 --> 00:17:12,480
project it's part of apache

00:17:08,559 --> 00:17:14,160
but now that still just a few developers

00:17:12,480 --> 00:17:15,760
here and they're in their free time

00:17:14,160 --> 00:17:18,240
maintaining it there's no corporate

00:17:15,760 --> 00:17:19,839
steward there's no people dedicated to

00:17:18,240 --> 00:17:21,280
just supporting this project

00:17:19,839 --> 00:17:24,160
it's just people doing it in their free

00:17:21,280 --> 00:17:26,559
time so if you're a company or if you're

00:17:24,160 --> 00:17:27,679
a startup trying to build on something

00:17:26,559 --> 00:17:31,600
that's going to last

00:17:27,679 --> 00:17:32,080
for uh 10 years or so cordova may not be

00:17:31,600 --> 00:17:34,640
that

00:17:32,080 --> 00:17:34,640
that thing

00:17:36,640 --> 00:17:41,280
okay so that's enough about cordova for

00:17:38,880 --> 00:17:44,080
now let's kind of look at react native

00:17:41,280 --> 00:17:45,039
um in similar projects uh and the way i

00:17:44,080 --> 00:17:50,720
like to think of this

00:17:45,039 --> 00:17:54,320
is that this is uh js to native

00:17:50,720 --> 00:17:55,039
basically any app that lets you write

00:17:54,320 --> 00:17:58,559
javascript

00:17:55,039 --> 00:18:00,000
or some language and then run it in an

00:17:58,559 --> 00:18:01,360
embedded native

00:18:00,000 --> 00:18:03,120
environment so this would include things

00:18:01,360 --> 00:18:05,679
like flutter

00:18:03,120 --> 00:18:08,799
obviously react native and a few other

00:18:05,679 --> 00:18:11,919
projects that exist out there

00:18:08,799 --> 00:18:12,799
so they they saw what was happening with

00:18:11,919 --> 00:18:14,640
cordova

00:18:12,799 --> 00:18:16,640
and i thought okay well why don't we do

00:18:14,640 --> 00:18:19,200
another approach of if you learn this

00:18:16,640 --> 00:18:21,440
basic api you should be able to write an

00:18:19,200 --> 00:18:24,480
app that runs anywhere

00:18:21,440 --> 00:18:26,720
or write for any different platform this

00:18:24,480 --> 00:18:28,880
is more of a react native mantra of

00:18:26,720 --> 00:18:31,120
write learn once right anywhere

00:18:28,880 --> 00:18:33,600
but they still follow this philosophy of

00:18:31,120 --> 00:18:34,240
being able to give you a truly native

00:18:33,600 --> 00:18:36,880
app

00:18:34,240 --> 00:18:38,160
um and i'm gonna there's a reason why

00:18:36,880 --> 00:18:41,280
truly native

00:18:38,160 --> 00:18:44,080
uh is an air is in quotes there um as

00:18:41,280 --> 00:18:45,840
as we'll look at it but they give you an

00:18:44,080 --> 00:18:46,880
abstraction around building out these

00:18:45,840 --> 00:18:49,440
native controls

00:18:46,880 --> 00:18:50,160
so when you are uh building out your app

00:18:49,440 --> 00:18:52,080
you're either

00:18:50,160 --> 00:18:53,520
running something in like javascript for

00:18:52,080 --> 00:18:56,720
react native or

00:18:53,520 --> 00:18:59,440
dart for flutter

00:18:56,720 --> 00:19:00,559
and then at runtime they'll generate all

00:18:59,440 --> 00:19:04,240
the ui

00:19:00,559 --> 00:19:06,320
uh for your app so

00:19:04,240 --> 00:19:07,280
for react native they'll actually

00:19:06,320 --> 00:19:10,000
generate

00:19:07,280 --> 00:19:11,280
native ui on the fly for flutter they

00:19:10,000 --> 00:19:14,640
actually have their own

00:19:11,280 --> 00:19:18,400
vm that just recreates all of the

00:19:14,640 --> 00:19:21,520
native ui in in dart

00:19:18,400 --> 00:19:23,440
because but they give you this

00:19:21,520 --> 00:19:26,320
promise of you're going to get a truly

00:19:23,440 --> 00:19:26,320
native app

00:19:27,120 --> 00:19:31,120
now as we go further along the

00:19:29,760 --> 00:19:35,120
architecture for this

00:19:31,120 --> 00:19:35,120
is actually pretty similar to

00:19:35,280 --> 00:19:38,400
cordova where we have this javascript

00:19:37,520 --> 00:19:41,840
app that

00:19:38,400 --> 00:19:43,440
runs inside of a a vm

00:19:41,840 --> 00:19:46,799
for react native in this case we're

00:19:43,440 --> 00:19:48,799
looking at va or javascript core on ios

00:19:46,799 --> 00:19:50,640
and then it communicates back and forth

00:19:48,799 --> 00:19:52,320
with this bridge layer

00:19:50,640 --> 00:19:54,960
now as they communicate to the bridge

00:19:52,320 --> 00:19:57,840
layer it talks to the device apis

00:19:54,960 --> 00:19:58,400
feeds that back to the vm and that feeds

00:19:57,840 --> 00:20:00,799
it back

00:19:58,400 --> 00:20:02,240
to the app itself so it's a similar

00:20:00,799 --> 00:20:07,120
architecture of how everything

00:20:02,240 --> 00:20:09,679
works further along into it we have our

00:20:07,120 --> 00:20:10,400
uh kind of hello world for react where

00:20:09,679 --> 00:20:13,200
we're just

00:20:10,400 --> 00:20:15,120
building out a component that renders uh

00:20:13,200 --> 00:20:16,960
what is essentially a glorified div

00:20:15,120 --> 00:20:20,080
and a paragraph tag but is an

00:20:16,960 --> 00:20:22,080
abstraction around the native ui here

00:20:20,080 --> 00:20:23,440
now something that i will note is that

00:20:22,080 --> 00:20:24,960
if you want to do anything probably

00:20:23,440 --> 00:20:26,080
really compelling with react native

00:20:24,960 --> 00:20:27,360
you're going to want to use a

00:20:26,080 --> 00:20:30,559
third-party project

00:20:27,360 --> 00:20:33,039
on this case something like expo um

00:20:30,559 --> 00:20:34,159
big fan of what they're doing over there

00:20:33,039 --> 00:20:37,039
for in this case

00:20:34,159 --> 00:20:38,000
if we want to just get a camera feed

00:20:37,039 --> 00:20:41,039
into our app

00:20:38,000 --> 00:20:43,760
we can just import camera from expo

00:20:41,039 --> 00:20:44,799
and run that into our app now that's

00:20:43,760 --> 00:20:48,080
nothing

00:20:44,799 --> 00:20:50,240
too complex just

00:20:48,080 --> 00:20:51,840
it abstracts around all the ui and all

00:20:50,240 --> 00:20:54,960
the native uh

00:20:51,840 --> 00:20:58,240
setup that you would have to do

00:20:54,960 --> 00:21:00,720
now uh the downside of this is that

00:20:58,240 --> 00:21:02,000
if these most of these projects are

00:21:00,720 --> 00:21:05,679
driven by corporate development

00:21:02,000 --> 00:21:05,679
needs or corporate um

00:21:06,400 --> 00:21:10,799
or just corporate development in general

00:21:08,480 --> 00:21:11,600
so facebook is a big proponent of react

00:21:10,799 --> 00:21:14,400
native because

00:21:11,600 --> 00:21:16,000
facebook uses react native google's a

00:21:14,400 --> 00:21:18,960
big proponent for flutter because

00:21:16,000 --> 00:21:20,960
they use flutter in certain cases if for

00:21:18,960 --> 00:21:22,799
some reason these projects are no longer

00:21:20,960 --> 00:21:24,799
needed by their companies

00:21:22,799 --> 00:21:27,039
what's the say that these projects are

00:21:24,799 --> 00:21:28,960
going to exist for the future

00:21:27,039 --> 00:21:30,159
who knows facebook could drop react

00:21:28,960 --> 00:21:32,080
native and say yep

00:21:30,159 --> 00:21:34,240
we're no longer maintaining this and

00:21:32,080 --> 00:21:36,720
how's the community going to

00:21:34,240 --> 00:21:36,720
step up

00:21:39,120 --> 00:21:42,480
being that these projects are also still

00:21:41,120 --> 00:21:45,360
relatively new

00:21:42,480 --> 00:21:47,360
there's a smaller community set here uh

00:21:45,360 --> 00:21:48,880
people who are working with react native

00:21:47,360 --> 00:21:51,120
have limited choices

00:21:48,880 --> 00:21:53,039
of where they can get support where they

00:21:51,120 --> 00:21:56,640
can get third party plugins

00:21:53,039 --> 00:21:59,120
um and just left to their own devices

00:21:56,640 --> 00:22:00,320
which leads to multiple plugins that do

00:21:59,120 --> 00:22:04,799
the same thing

00:22:00,320 --> 00:22:07,200
but sometimes in less than ideal

00:22:04,799 --> 00:22:09,039
in a less than ideal quality so you get

00:22:07,200 --> 00:22:11,120
plugins that

00:22:09,039 --> 00:22:12,720
don't really do what they're supposed to

00:22:11,120 --> 00:22:13,600
do or they do what they're supposed to

00:22:12,720 --> 00:22:17,039
do

00:22:13,600 --> 00:22:20,080
just with a lot of performance uh

00:22:17,039 --> 00:22:23,760
being dropped and if you

00:22:20,080 --> 00:22:25,520
do need to write a plugin for this

00:22:23,760 --> 00:22:27,200
well you're going to actually need to

00:22:25,520 --> 00:22:29,520
write native code

00:22:27,200 --> 00:22:31,840
they don't actually remove native

00:22:29,520 --> 00:22:34,000
development needs from your toolset

00:22:31,840 --> 00:22:35,919
they just kind of put it off until later

00:22:34,000 --> 00:22:36,400
on and there's this really great blog

00:22:35,919 --> 00:22:40,400
post

00:22:36,400 --> 00:22:43,520
from that kind of sums up why airbnb

00:22:40,400 --> 00:22:45,039
and uh udacity abandoned react native

00:22:43,520 --> 00:22:46,960
um it's gonna sound like i'm picking on

00:22:45,039 --> 00:22:50,400
react native but

00:22:46,960 --> 00:22:51,440
i kind of am if you go to short url dot

00:22:50,400 --> 00:22:54,480
at slash p

00:22:51,440 --> 00:22:56,720
capital d g zero one

00:22:54,480 --> 00:22:58,080
uh it kind of goes over why these two

00:22:56,720 --> 00:23:00,559
companies left

00:22:58,080 --> 00:23:01,760
uh react native to just go fully back to

00:23:00,559 --> 00:23:03,520
native development

00:23:01,760 --> 00:23:05,280
um there's a lot of pros and cons for

00:23:03,520 --> 00:23:07,120
this read through it make your own

00:23:05,280 --> 00:23:09,280
opinions but

00:23:07,120 --> 00:23:10,159
i think the best way that they could sum

00:23:09,280 --> 00:23:12,400
it up was

00:23:10,159 --> 00:23:14,159
it's not as cross-platform as advertised

00:23:12,400 --> 00:23:16,640
you basically are maintaining separate

00:23:14,159 --> 00:23:16,640
projects

00:23:17,120 --> 00:23:21,200
so with all of that what makes capacitor

00:23:19,760 --> 00:23:25,679
different

00:23:21,200 --> 00:23:28,000
this is our uh our ionics approach to

00:23:25,679 --> 00:23:30,000
solving uh cross-platform development

00:23:28,000 --> 00:23:30,400
needs but takes a lot of inspiration

00:23:30,000 --> 00:23:33,840
from

00:23:30,400 --> 00:23:38,000
cordova and things like react native

00:23:33,840 --> 00:23:38,000
or even other projects like nativescript

00:23:38,320 --> 00:23:44,320
so in a nutshell capacitor is a native

00:23:42,240 --> 00:23:46,480
wrapper for getting your web app into

00:23:44,320 --> 00:23:48,880
the app store

00:23:46,480 --> 00:23:51,840
and the javascript library for accessing

00:23:48,880 --> 00:23:51,840
native device features

00:23:52,000 --> 00:23:57,520
if you wanted to say integrate with a

00:23:54,960 --> 00:23:59,760
geolocation bluetooth file system local

00:23:57,520 --> 00:24:02,960
notifications

00:23:59,760 --> 00:24:05,279
you import this javascript api and then

00:24:02,960 --> 00:24:07,200
that will automatically map back to

00:24:05,279 --> 00:24:08,880
these native features

00:24:07,200 --> 00:24:10,640
when you want to integrate say with

00:24:08,880 --> 00:24:13,760
something like a third-party

00:24:10,640 --> 00:24:17,360
uh native sdk you're just using

00:24:13,760 --> 00:24:21,440
that native sdk in your project or

00:24:17,360 --> 00:24:24,559
providing a plug-in api that can

00:24:21,440 --> 00:24:27,840
call that ap that sdk natively and

00:24:24,559 --> 00:24:27,840
provide a fallback for the web

00:24:28,000 --> 00:24:32,960
architecturally this is pretty similar

00:24:30,400 --> 00:24:34,799
to cordova where we're still loading

00:24:32,960 --> 00:24:38,240
things up in a web view we're still

00:24:34,799 --> 00:24:40,400
having that bridge layer that

00:24:38,240 --> 00:24:43,200
communicates back and forth

00:24:40,400 --> 00:24:44,080
but we do things pretty differently

00:24:43,200 --> 00:24:47,279
under the hood

00:24:44,080 --> 00:24:50,480
in the way that this is set up

00:24:47,279 --> 00:24:53,520
so uh one of the big ones that i think

00:24:50,480 --> 00:24:53,840
um separates cordova for a capacitor

00:24:53,520 --> 00:24:55,520
from

00:24:53,840 --> 00:24:56,960
other projects is that it loads

00:24:55,520 --> 00:25:00,400
instantly

00:24:56,960 --> 00:25:01,520
we pre-connect that bridge layer in the

00:25:00,400 --> 00:25:04,960
webview layer

00:25:01,520 --> 00:25:07,520
um right right at the app creation time

00:25:04,960 --> 00:25:09,200
so if you need to get geolocation data

00:25:07,520 --> 00:25:10,799
like right as your app starts

00:25:09,200 --> 00:25:14,240
you can do that you don't need to wait

00:25:10,799 --> 00:25:17,679
for some uh connection

00:25:14,240 --> 00:25:19,440
uh different uh something different from

00:25:17,679 --> 00:25:20,480
react native is that we don't focus on

00:25:19,440 --> 00:25:23,120
ui

00:25:20,480 --> 00:25:25,039
in this example i'm going to be looking

00:25:23,120 --> 00:25:26,960
at building something with ionic

00:25:25,039 --> 00:25:27,840
but if you don't want to use ionic and

00:25:26,960 --> 00:25:29,200
if you want to use something like

00:25:27,840 --> 00:25:32,799
angular material

00:25:29,200 --> 00:25:35,360
react material beautify

00:25:32,799 --> 00:25:36,400
you can still use that with uh without

00:25:35,360 --> 00:25:39,600
having any issues

00:25:36,400 --> 00:25:41,600
it's also framework agnostic

00:25:39,600 --> 00:25:42,960
and under the hood it uses native best

00:25:41,600 --> 00:25:45,679
practices things like

00:25:42,960 --> 00:25:46,640
um cocoapods android libraries for

00:25:45,679 --> 00:25:49,520
maintaining

00:25:46,640 --> 00:25:51,200
uh dependency updates it's making sure

00:25:49,520 --> 00:25:51,919
that it's doing the best that it can to

00:25:51,200 --> 00:25:55,039
follow these

00:25:51,919 --> 00:25:55,039
native best practices

00:25:55,440 --> 00:25:59,279
now it's also got a quote unquote

00:25:57,600 --> 00:26:01,919
aggressive version support

00:25:59,279 --> 00:26:04,080
um depending on who you ask cutting off

00:26:01,919 --> 00:26:05,039
android 4.4 might be a very aggressive

00:26:04,080 --> 00:26:06,880
thing to do

00:26:05,039 --> 00:26:08,400
uh we don't think so because that it's

00:26:06,880 --> 00:26:11,679
still like 90

00:26:08,400 --> 00:26:13,919
of android users for ios you can push

00:26:11,679 --> 00:26:16,640
back further i found out yesterday

00:26:13,919 --> 00:26:17,840
than just n minus one you can go all the

00:26:16,640 --> 00:26:21,600
way back i think to

00:26:17,840 --> 00:26:23,279
ios 11 though there's basically no one

00:26:21,600 --> 00:26:26,159
on ios 11.

00:26:23,279 --> 00:26:27,039
so for this you know you can get ios 14

00:26:26,159 --> 00:26:29,760
00:26:27,039 --> 00:26:31,200
maybe ios 12 too but check your

00:26:29,760 --> 00:26:34,559
analytics see if you even need to

00:26:31,200 --> 00:26:37,279
support that so let's actually take a

00:26:34,559 --> 00:26:40,400
look at how this works

00:26:37,279 --> 00:26:43,120
so i have an app here

00:26:40,400 --> 00:26:43,840
and instead of running it serves to npm

00:26:43,120 --> 00:26:47,520
run

00:26:43,840 --> 00:26:51,600
start uh it's a react app

00:26:47,520 --> 00:26:53,440
not that that really really matters but

00:26:51,600 --> 00:26:54,799
it's just going to show you how to

00:26:53,440 --> 00:26:58,080
actually uh

00:26:54,799 --> 00:27:01,840
get these projects up and running so

00:26:58,080 --> 00:27:04,240
let's go into yeah we'll go into tab one

00:27:01,840 --> 00:27:05,039
this is an ionic app as we are looking

00:27:04,240 --> 00:27:08,080
at it

00:27:05,039 --> 00:27:12,320
we have this tab based ui down here

00:27:08,080 --> 00:27:15,200
uh nothing too complicated for

00:27:12,320 --> 00:27:16,559
uh for for the setup this is literally

00:27:15,200 --> 00:27:18,000
just something that you could start and

00:27:16,559 --> 00:27:20,960
pull in

00:27:18,000 --> 00:27:21,760
from the ionic cli what we're going to

00:27:20,960 --> 00:27:27,120
first

00:27:21,760 --> 00:27:27,120
do is import something from

00:27:29,600 --> 00:27:35,840
if i can type uh at

00:27:37,440 --> 00:27:40,320
we're going to pull in from the core

00:27:38,799 --> 00:27:40,640
capacitor library and we're going to

00:27:40,320 --> 00:27:44,399
pull

00:27:40,640 --> 00:27:46,159
in this plug-ins uh object which is just

00:27:44,399 --> 00:27:48,480
going to be our way of accessing the

00:27:46,159 --> 00:27:52,080
native apis

00:27:48,480 --> 00:27:53,279
so inside of our component we're going

00:27:52,080 --> 00:27:55,919
to delete

00:27:53,279 --> 00:27:57,120
this and we're going to render an ion

00:27:55,919 --> 00:28:00,840
button

00:27:57,120 --> 00:28:05,039
and we're just going to say get

00:28:00,840 --> 00:28:08,720
location we'll import this from

00:28:05,039 --> 00:28:10,880
from ionic itself and then

00:28:08,720 --> 00:28:16,000
i'll render out an h1 and i'm just going

00:28:10,880 --> 00:28:19,440
to do json.springify um

00:28:16,000 --> 00:28:21,360
we'll say lock now lock's not going to

00:28:19,440 --> 00:28:24,240
be something that's defined yet so let's

00:28:21,360 --> 00:28:26,240
go ahead and define that

00:28:24,240 --> 00:28:27,760
we'll come up to the top of our

00:28:26,240 --> 00:28:32,559
component we'll just say

00:28:27,760 --> 00:28:35,600
const lock set lock

00:28:32,559 --> 00:28:38,960
is going to equal use

00:28:35,600 --> 00:28:42,960
state and we'll just pass in nfp

00:28:38,960 --> 00:28:44,559
object here import that from react

00:28:42,960 --> 00:28:46,720
and then we're going to need a way to

00:28:44,559 --> 00:28:49,760
call this plugin so we'll just say

00:28:46,720 --> 00:28:53,600
on click and

00:28:49,760 --> 00:28:57,039
we will call get location

00:28:53,600 --> 00:28:59,840
on click so nothing

00:28:57,039 --> 00:29:00,640
should seem too out of place here for a

00:28:59,840 --> 00:29:03,840
react app

00:29:00,640 --> 00:29:07,600
so let's say const get

00:29:03,840 --> 00:29:11,520
location is going to equal a function

00:29:07,600 --> 00:29:15,360
uh inside of this we'll just say const

00:29:11,520 --> 00:29:15,360
equals plug-ins

00:29:15,919 --> 00:29:19,200
and we're going to destructure some

00:29:17,600 --> 00:29:22,159
stuff away from

00:29:19,200 --> 00:29:25,039
uh plug-ins so we'll destructure uh

00:29:22,159 --> 00:29:25,039
geolocation

00:29:25,200 --> 00:29:32,799
and we're going to say const uh

00:29:29,120 --> 00:29:35,919
results equals

00:29:32,799 --> 00:29:39,360
again if i could type uh

00:29:35,919 --> 00:29:42,159
await geolocation dot

00:29:39,360 --> 00:29:43,039
get current position now since we are

00:29:42,159 --> 00:29:46,559
using a weight

00:29:43,039 --> 00:29:48,320
we can just mark this as a sync

00:29:46,559 --> 00:29:49,760
if we want to just check what this is

00:29:48,320 --> 00:29:50,960
going to render we could just

00:29:49,760 --> 00:29:53,440
console.log

00:29:50,960 --> 00:29:54,480
our results but really we just need to

00:29:53,440 --> 00:29:58,640
say

00:29:54,480 --> 00:30:01,279
uh set lock is going to equal res

00:29:58,640 --> 00:30:02,240
dot coordinates we don't need a time

00:30:01,279 --> 00:30:04,480
stamp

00:30:02,240 --> 00:30:05,360
you could probably use it in your app

00:30:04,480 --> 00:30:06,720
somewhere but

00:30:05,360 --> 00:30:08,559
we don't really need to worry about it

00:30:06,720 --> 00:30:11,440
too much so

00:30:08,559 --> 00:30:13,200
we'll hit save and then we're going to

00:30:11,440 --> 00:30:15,440
come over to our app

00:30:13,200 --> 00:30:16,240
and just to make sure that this all

00:30:15,440 --> 00:30:20,480
works

00:30:16,240 --> 00:30:23,120
we are also going to put that down here

00:30:20,480 --> 00:30:23,679
and say get location yes it wants to

00:30:23,120 --> 00:30:26,960
know my

00:30:23,679 --> 00:30:29,120
allocation so that works great

00:30:26,960 --> 00:30:33,120
we'll call again because sometimes the

00:30:29,120 --> 00:30:33,120
data doesn't uh like to work that way

00:30:33,919 --> 00:30:37,840
why does it not want to re-render

00:30:46,240 --> 00:30:50,799
all right don't know why it doesn't want

00:30:48,000 --> 00:30:52,799
to re-render but whatever

00:30:50,799 --> 00:30:54,480
that's probably just my react foo

00:30:52,799 --> 00:30:56,080
failing anyway

00:30:54,480 --> 00:30:57,840
we can come over here we can see that

00:30:56,080 --> 00:30:59,440
we're getting this location data we can

00:30:57,840 --> 00:31:00,480
see that we're getting the longitude and

00:30:59,440 --> 00:31:02,000
latitude

00:31:00,480 --> 00:31:04,159
uh so if we want to build out some kind

00:31:02,000 --> 00:31:05,519
of location based application

00:31:04,159 --> 00:31:07,360
we could totally do this without any

00:31:05,519 --> 00:31:10,480
issues

00:31:07,360 --> 00:31:10,480
where this really

00:31:11,120 --> 00:31:16,720
where this really becomes fun

00:31:14,159 --> 00:31:18,640
is as we start to come down to our app

00:31:16,720 --> 00:31:21,679
we can do a quick little

00:31:18,640 --> 00:31:22,559
uh build here so we'll just do npm run

00:31:21,679 --> 00:31:23,919
build

00:31:22,559 --> 00:31:33,840
and this is just going to run react

00:31:23,919 --> 00:31:33,840
scripts to build our application

00:31:35,760 --> 00:31:39,440
we can actually use capacitor here to

00:31:38,080 --> 00:31:41,919
deploy it to

00:31:39,440 --> 00:31:43,679
an ios simulator so i've already

00:31:41,919 --> 00:31:45,440
installed capacitor

00:31:43,679 --> 00:31:49,120
if we want to install it we can just do

00:31:45,440 --> 00:31:49,120
npm uninstall

00:31:49,200 --> 00:31:56,000
at capacitor

00:31:52,399 --> 00:31:59,039
core and capacitor cli

00:31:56,000 --> 00:32:02,240
since that's already been done uh

00:31:59,039 --> 00:32:03,679
we would run mpx cap

00:32:02,240 --> 00:32:06,000
init and that's going to create our

00:32:03,679 --> 00:32:06,720
project for us all that really is

00:32:06,000 --> 00:32:09,519
creating

00:32:06,720 --> 00:32:11,200
is this capacitor config which is going

00:32:09,519 --> 00:32:12,240
to set up the different fields for

00:32:11,200 --> 00:32:13,919
application

00:32:12,240 --> 00:32:16,080
so this would give us our package name

00:32:13,919 --> 00:32:18,640
the app name itself

00:32:16,080 --> 00:32:20,080
uh basically where should we be pulling

00:32:18,640 --> 00:32:23,840
our javascript uh

00:32:20,080 --> 00:32:25,360
code or our web web app what npm client

00:32:23,840 --> 00:32:27,200
we should be using in this case we're

00:32:25,360 --> 00:32:29,440
just going to use npm

00:32:27,200 --> 00:32:31,039
and then some plug-in configuration for

00:32:29,440 --> 00:32:34,480
our project itself

00:32:31,039 --> 00:32:36,159
that doesn't matter too much we could

00:32:34,480 --> 00:32:38,880
add a new project we could do

00:32:36,159 --> 00:32:40,720
cap add in this case we'll let's add

00:32:38,880 --> 00:32:42,600
android

00:32:40,720 --> 00:32:44,159
so this will go through install android

00:32:42,600 --> 00:32:47,840
dependencies

00:32:44,159 --> 00:32:48,720
uh we'll see how long this is going to

00:32:47,840 --> 00:32:50,799
take hey

00:32:48,720 --> 00:32:53,279
actually didn't take that long uh and

00:32:50,799 --> 00:32:56,559
then we could automatically open up say

00:32:53,279 --> 00:33:00,240
android studio and deploy from here i

00:32:56,559 --> 00:33:03,679
already have uh ios

00:33:00,240 --> 00:33:11,840
opened up so we can run mpxcap open

00:33:03,679 --> 00:33:11,840
ios to just open up the native workspace

00:33:11,919 --> 00:33:15,519
oh awesome question awesome comment i

00:33:14,240 --> 00:33:18,159
see in the chat the

00:33:15,519 --> 00:33:19,679
lock is the same object and uh object

00:33:18,159 --> 00:33:20,880
reference if it doesn't re-render try

00:33:19,679 --> 00:33:24,000
putting in

00:33:20,880 --> 00:33:27,039
the lat good

00:33:24,000 --> 00:33:31,600
good suggestion so

00:33:27,039 --> 00:33:36,080
let's create a new object or

00:33:31,600 --> 00:33:39,120
uh uh

00:33:36,080 --> 00:33:42,799
location data equals

00:33:39,120 --> 00:33:46,399
an object where we have

00:33:42,799 --> 00:33:46,399
uh you know what let's just do this

00:33:46,960 --> 00:33:55,679
lat res.quartz dot

00:33:51,120 --> 00:33:55,679
latitude and long

00:33:56,840 --> 00:34:02,880
res.quartz.longitude

00:33:59,360 --> 00:34:05,519
and you know what let's obviously we

00:34:02,880 --> 00:34:08,800
need to close that out

00:34:05,519 --> 00:34:09,599
npm run start hopefully that's all that

00:34:08,800 --> 00:34:13,280
it is

00:34:09,599 --> 00:34:15,839
uh thank you for the comment uh

00:34:13,280 --> 00:34:15,839
nikolai

00:34:19,599 --> 00:34:23,839
perfect awesome thank you so much for

00:34:21,679 --> 00:34:27,359
that i love getting feedback and

00:34:23,839 --> 00:34:28,159
uh tips from the uh from the audience as

00:34:27,359 --> 00:34:29,839
i'm doing

00:34:28,159 --> 00:34:31,839
as i'm doing everything so just to show

00:34:29,839 --> 00:34:35,839
that we're doing this live

00:34:31,839 --> 00:34:35,839
uh so we'll do npm run build again

00:34:36,320 --> 00:34:39,359
and since we've changed our build here

00:34:38,879 --> 00:34:42,240
um

00:34:39,359 --> 00:34:43,919
and we've actually changed what the

00:34:42,240 --> 00:34:46,480
output is we actually need to sync

00:34:43,919 --> 00:34:47,440
this back with capacitor or to our

00:34:46,480 --> 00:34:49,280
native project

00:34:47,440 --> 00:34:50,480
so capacitor gives you command to do

00:34:49,280 --> 00:34:54,159
this mpx

00:34:50,480 --> 00:34:56,159
cap sync uh you can pass in an optional

00:34:54,159 --> 00:34:58,240
platform to target so we're just going

00:34:56,159 --> 00:35:00,079
to sync our ios projects

00:34:58,240 --> 00:35:02,320
uh so this will go through update all

00:35:00,079 --> 00:35:03,119
the data dependencies if there's any

00:35:02,320 --> 00:35:06,400
changes

00:35:03,119 --> 00:35:08,000
and also bring in the new changes to our

00:35:06,400 --> 00:35:11,280
web project

00:35:08,000 --> 00:35:15,119
make sure to do this pretty regularly

00:35:11,280 --> 00:35:18,160
so we'll go over to our project here

00:35:15,119 --> 00:35:18,560
this is the native sdk um if you've

00:35:18,160 --> 00:35:21,760
never

00:35:18,560 --> 00:35:23,680
opened up xcode before

00:35:21,760 --> 00:35:27,599
don't be too afraid it just looks like

00:35:23,680 --> 00:35:29,200
uh the old version of itunes

00:35:27,599 --> 00:35:30,800
we just have this little play button up

00:35:29,200 --> 00:35:34,000
here that we can click

00:35:30,800 --> 00:35:36,480
and deploy to our simulator

00:35:34,000 --> 00:35:38,000
this is just going to deploy to the ios

00:35:36,480 --> 00:35:40,880
sim

00:35:38,000 --> 00:35:42,880
we can see that the app is loaded really

00:35:40,880 --> 00:35:44,960
quickly

00:35:42,880 --> 00:35:45,920
and we can start to say uh get location

00:35:44,960 --> 00:35:48,800
data

00:35:45,920 --> 00:35:50,160
it's going to prompt us with the native

00:35:48,800 --> 00:35:53,599
location features

00:35:50,160 --> 00:35:57,200
if we actually come over to

00:35:53,599 --> 00:36:00,320
yeah apple make sure we click that

00:35:57,200 --> 00:36:02,640
click get location

00:36:00,320 --> 00:36:04,079
things that want to work well over here

00:36:02,640 --> 00:36:13,280
we might actually have to

00:36:04,079 --> 00:36:15,520
deploy to android

00:36:13,280 --> 00:36:16,960
oh no okay so we're going to deploy to

00:36:15,520 --> 00:36:20,640
android because

00:36:16,960 --> 00:36:23,839
ios doesn't want to work for me mpx

00:36:20,640 --> 00:36:25,119
cap copy android that's actually much

00:36:23,839 --> 00:36:28,240
quicker

00:36:25,119 --> 00:36:30,000
open android uh luckily i've

00:36:28,240 --> 00:36:31,920
opened up android studio in the past

00:36:30,000 --> 00:36:33,440
couple weeks so

00:36:31,920 --> 00:36:34,360
i don't have to go through any updates

00:36:33,440 --> 00:36:35,839
or

00:36:34,360 --> 00:36:37,920
[Music]

00:36:35,839 --> 00:36:41,839
changes to the project so everything

00:36:37,920 --> 00:36:41,839
should in theory just work

00:36:45,680 --> 00:36:48,800
we'll let it do its thing

00:36:52,320 --> 00:36:57,680
kind of wait patiently panic only a

00:36:55,119 --> 00:37:08,640
little bit

00:36:57,680 --> 00:37:10,240
close that don't need any of that

00:37:08,640 --> 00:37:12,079
you can tell i've opened it recently

00:37:10,240 --> 00:37:15,760
because the android emulator actually

00:37:12,079 --> 00:37:15,760
started up pretty fast

00:37:17,440 --> 00:37:21,119
native projects launching awesome let's

00:37:20,560 --> 00:37:24,240
try

00:37:21,119 --> 00:37:26,720
getting the location again all right

00:37:24,240 --> 00:37:28,160
allow this app to use the demo so we're

00:37:26,720 --> 00:37:29,920
on a native device so we should get

00:37:28,160 --> 00:37:31,520
native prompts to

00:37:29,920 --> 00:37:33,359
allow for certain features in this case

00:37:31,520 --> 00:37:36,480
we're just going to allow

00:37:33,359 --> 00:37:38,240
uh while using the app and we can get

00:37:36,480 --> 00:37:41,839
our latitude and longitude

00:37:38,240 --> 00:37:44,880
um i don't know actually which

00:37:41,839 --> 00:37:46,640
what location this is spoofing but it's

00:37:44,880 --> 00:37:50,160
a latitude and longitude for

00:37:46,640 --> 00:37:53,040
our for our user and however this app

00:37:50,160 --> 00:37:54,720
works uh if we want to deploy this we

00:37:53,040 --> 00:37:56,880
could actually just deploy

00:37:54,720 --> 00:37:58,880
the android app and the ios app to the

00:37:56,880 --> 00:37:59,359
app stores and then also deploy the web

00:37:58,880 --> 00:38:01,200
app

00:37:59,359 --> 00:38:03,040
to something like netlify firebase

00:38:01,200 --> 00:38:06,079
hosting

00:38:03,040 --> 00:38:08,480
for sell what have you so

00:38:06,079 --> 00:38:10,560
in short amount of time we've created a

00:38:08,480 --> 00:38:12,079
native app that gets my location

00:38:10,560 --> 00:38:13,839
uh we have a web app that gets my

00:38:12,079 --> 00:38:16,480
location and if

00:38:13,839 --> 00:38:19,839
ios was behaving well we'd have an ios

00:38:16,480 --> 00:38:19,839
app that gets my location

00:38:20,400 --> 00:38:25,599
so uh i said what about the uh

00:38:23,760 --> 00:38:27,520
we just went through the demo the web

00:38:25,599 --> 00:38:29,200
version if you want to do this

00:38:27,520 --> 00:38:30,880
we're basically just building a

00:38:29,200 --> 00:38:32,160
progressive web app at this point

00:38:30,880 --> 00:38:34,400
giving you all the features that you

00:38:32,160 --> 00:38:37,599
would need to

00:38:34,400 --> 00:38:39,680
get basically 100 on lighthouse

00:38:37,599 --> 00:38:41,359
and build out uh some pretty awesome

00:38:39,680 --> 00:38:43,119
features

00:38:41,359 --> 00:38:45,200
if you needed something additional like

00:38:43,119 --> 00:38:47,280
native like ui

00:38:45,200 --> 00:38:48,560
ionic is a great option here and we also

00:38:47,280 --> 00:38:51,680
have the third party project

00:38:48,560 --> 00:38:55,680
called pwa elements which gives you the

00:38:51,680 --> 00:38:58,320
features and the ui for things like

00:38:55,680 --> 00:39:00,480
camera control or for modals and

00:38:58,320 --> 00:39:02,640
overlays

00:39:00,480 --> 00:39:03,839
that's optional if you don't need it so

00:39:02,640 --> 00:39:06,240
it's all if you want

00:39:03,839 --> 00:39:07,839
but pick a good ui library is a great

00:39:06,240 --> 00:39:09,359
one you don't have to use it but you can

00:39:07,839 --> 00:39:12,640
use something

00:39:09,359 --> 00:39:12,640
something else that's out there

00:39:13,040 --> 00:39:16,640
so if you don't have a brand new project

00:39:15,040 --> 00:39:18,800
that doesn't uh

00:39:16,640 --> 00:39:20,480
made with ionic which we give you

00:39:18,800 --> 00:39:22,960
capacitor by default again you can

00:39:20,480 --> 00:39:24,560
install it using npm or yarn

00:39:22,960 --> 00:39:26,640
uh just install it as any other

00:39:24,560 --> 00:39:29,680
dependencies and then run mpx

00:39:26,640 --> 00:39:30,960
cap init or yarn cap knit and that will

00:39:29,680 --> 00:39:34,160
give you the entire

00:39:30,960 --> 00:39:35,520
project structure so it's kind of been a

00:39:34,160 --> 00:39:35,920
whirlwind tour but i do want to just

00:39:35,520 --> 00:39:39,200
leave

00:39:35,920 --> 00:39:39,200
you with some thoughts

00:39:39,440 --> 00:39:44,480
cross platform itself is basically just

00:39:42,160 --> 00:39:47,359
about reducing the amount of code that

00:39:44,480 --> 00:39:48,880
you as a developer need to write if i

00:39:47,359 --> 00:39:51,760
can get my location data

00:39:48,880 --> 00:39:53,040
using one api that works on all multiple

00:39:51,760 --> 00:39:55,119
platforms

00:39:53,040 --> 00:39:57,520
that is effective cross-platform i don't

00:39:55,119 --> 00:40:00,560
need to change how that api works

00:39:57,520 --> 00:40:02,640
it knows how to change itself

00:40:00,560 --> 00:40:04,319
capacitor essentially gives you a

00:40:02,640 --> 00:40:07,280
web-based api

00:40:04,319 --> 00:40:10,960
that can work in native as well as

00:40:07,280 --> 00:40:11,440
obviously the web when we're working on

00:40:10,960 --> 00:40:14,240
the web

00:40:11,440 --> 00:40:14,960
we're just going to use the standard web

00:40:14,240 --> 00:40:16,640
api

00:40:14,960 --> 00:40:18,160
features when we're on native though

00:40:16,640 --> 00:40:19,200
we're going to give you the entry points

00:40:18,160 --> 00:40:21,760
and the

00:40:19,200 --> 00:40:22,319
native implementation to handle things

00:40:21,760 --> 00:40:25,599
like

00:40:22,319 --> 00:40:26,480
geo locate permissions and prompting

00:40:25,599 --> 00:40:29,599
users

00:40:26,480 --> 00:40:31,839
to allow for certain features so

00:40:29,599 --> 00:40:33,040
i hope that kind of covers a lot of

00:40:31,839 --> 00:40:35,680
capacitor

00:40:33,040 --> 00:40:37,119
it gives you some you know some food for

00:40:35,680 --> 00:40:40,079
thoughts

00:40:37,119 --> 00:40:40,960
if you have any questions i'd like to uh

00:40:40,079 --> 00:40:42,760
take them now

00:40:40,960 --> 00:40:45,280
otherwise you could go to

00:40:42,760 --> 00:40:47,839
capacitorjs.com to find out more

00:40:45,280 --> 00:40:49,359
or you could tweet at me m hardington if

00:40:47,839 --> 00:40:53,839
you have any questions for later on

00:40:49,359 --> 00:40:53,839

YouTube URL: https://www.youtube.com/watch?v=gCbi7oa6-lQ


