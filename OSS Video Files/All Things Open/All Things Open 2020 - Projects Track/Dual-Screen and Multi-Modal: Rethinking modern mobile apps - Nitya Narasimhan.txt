Title: Dual-Screen and Multi-Modal: Rethinking modern mobile apps - Nitya Narasimhan
Publication date: 2020-12-14
Playlist: All Things Open 2020 - Projects Track
Description: 
	Presented by: Nitya Narasimhan
Presented at All Things Open 2020 - Projects Track

Abstract: Mobile devices today come in different form factors - tablets, phones, watches, even televisions. We design our apps to adapt to these device affordances but we assume that each device has a fixed form factor and capability. What if you had a mobile device that could fold into a phone, open up as a book, fold out like a laptop or fold over like a tent? What new experiences can we design with dual screens and different device postures?

In this talk I'll introduce you to the features and functionality available in the Microsoft Surface Duo and talk about how you can adapt your existing apps to leverage the power of flexible layouts that can span screens or adapt to user postures. We'll look at how you can get started building apps for the device, and end by discussing ways in which we could rethink mobile user experiences with the emergence of new device modalities and affordances.
Captions: 
	00:00:05,359 --> 00:00:08,080
hi

00:00:05,680 --> 00:00:10,240
everyone uh let me get my timer started

00:00:08,080 --> 00:00:12,000
so i can keep an eye on the time um i'm

00:00:10,240 --> 00:00:14,799
so so happy to be here today

00:00:12,000 --> 00:00:16,720
my name is ditiya narasimhan uh this is

00:00:14,799 --> 00:00:17,279
actually my second all things open i was

00:00:16,720 --> 00:00:18,800
there

00:00:17,279 --> 00:00:20,240
in person last year it's one of my

00:00:18,800 --> 00:00:21,840
favorite conferences so i'm really

00:00:20,240 --> 00:00:22,560
really grateful to all of you who showed

00:00:21,840 --> 00:00:24,560
up

00:00:22,560 --> 00:00:26,400
um as maureen was talking about my name

00:00:24,560 --> 00:00:28,080
is nitya narseman i'm a senior a

00:00:26,400 --> 00:00:30,080
developer advocate a cloud advocate in

00:00:28,080 --> 00:00:32,399
microsoft and i want to talk to you

00:00:30,080 --> 00:00:34,399
about dual screen and multi posture

00:00:32,399 --> 00:00:36,399
and really how we can rethink the mobile

00:00:34,399 --> 00:00:37,840
app in the the kind of like because of

00:00:36,399 --> 00:00:38,879
all these new design affordances that we

00:00:37,840 --> 00:00:40,640
get

00:00:38,879 --> 00:00:42,079
take a minute if you want to and just

00:00:40,640 --> 00:00:42,640
screenshot this there are two links at

00:00:42,079 --> 00:00:44,640
the bottom

00:00:42,640 --> 00:00:46,719
the first link will take you to the

00:00:44,640 --> 00:00:48,079
documentation repository for all things

00:00:46,719 --> 00:00:49,920
related to this talk

00:00:48,079 --> 00:00:51,360
the second one goes to blog post where

00:00:49,920 --> 00:00:52,960
after this um

00:00:51,360 --> 00:00:54,640
talk and in fact later in this week i'll

00:00:52,960 --> 00:00:56,160
be putting up the slides some resources

00:00:54,640 --> 00:00:58,559
and when the video is

00:00:56,160 --> 00:01:00,879
taped i'll put that link up as well you

00:00:58,559 --> 00:01:03,920
can always find me at nithya on twitter

00:01:00,879 --> 00:01:05,760
but let's get started so we are at an

00:01:03,920 --> 00:01:06,640
open source conference um a little bit

00:01:05,760 --> 00:01:08,799
about me

00:01:06,640 --> 00:01:10,479
my journey here has actually been

00:01:08,799 --> 00:01:11,760
through mobile in over two decades but i

00:01:10,479 --> 00:01:13,600
wore many hats

00:01:11,760 --> 00:01:15,119
i started out first in research and

00:01:13,600 --> 00:01:16,960
that's really where i fell in love with

00:01:15,119 --> 00:01:17,520
mobile i was working in motorola labs we

00:01:16,960 --> 00:01:19,520
were

00:01:17,520 --> 00:01:20,720
building up so many different unique

00:01:19,520 --> 00:01:22,960
mobile platforms

00:01:20,720 --> 00:01:24,960
and what made mobile so amazing is this

00:01:22,960 --> 00:01:26,640
notion of seamless mobility it's the one

00:01:24,960 --> 00:01:29,280
device that we take with us through

00:01:26,640 --> 00:01:31,280
every environment we're in so kind of

00:01:29,280 --> 00:01:31,920
providing this use of this continuity of

00:01:31,280 --> 00:01:33,520
experience

00:01:31,920 --> 00:01:35,600
was amazing and we built a lot of

00:01:33,520 --> 00:01:37,040
prototypes fast for a few years and i

00:01:35,600 --> 00:01:38,799
started doing development work as a

00:01:37,040 --> 00:01:40,799
consultant and for startups

00:01:38,799 --> 00:01:42,079
and i really wanted to scale and it

00:01:40,799 --> 00:01:43,680
turned out that when you're on a scale

00:01:42,079 --> 00:01:45,360
you really look at mobile web or you

00:01:43,680 --> 00:01:46,720
look at some things like cross-platform

00:01:45,360 --> 00:01:48,799
frameworks like flutter

00:01:46,720 --> 00:01:50,240
where you can build once with one code

00:01:48,799 --> 00:01:51,200
base and have it deployed to multiple

00:01:50,240 --> 00:01:52,880
markets

00:01:51,200 --> 00:01:54,320
a few more years later i was using that

00:01:52,880 --> 00:01:56,159
experience to go teach people

00:01:54,320 --> 00:01:57,759
how to build their own first mobile app

00:01:56,159 --> 00:01:59,360
both at university and then community

00:01:57,759 --> 00:02:01,439
and i'm now a member of the advocacy

00:01:59,360 --> 00:02:03,200
team and i'm here today becomes really

00:02:01,439 --> 00:02:04,960
really excited about one of the new

00:02:03,200 --> 00:02:06,479
devices that microsoft just launched

00:02:04,960 --> 00:02:08,640
it's called the surface duo and we're

00:02:06,479 --> 00:02:12,160
going to talk about it

00:02:08,640 --> 00:02:14,239
so this is an open source conference

00:02:12,160 --> 00:02:15,280
why mobile it turns out that mobile and

00:02:14,239 --> 00:02:17,599
open source are actually more

00:02:15,280 --> 00:02:19,280
synergistic than you might think

00:02:17,599 --> 00:02:21,120
if you look at the the graphic on the

00:02:19,280 --> 00:02:23,200
left it comes from an idc smartphones

00:02:21,120 --> 00:02:26,480
report it turns out 85

00:02:23,200 --> 00:02:28,480
plus of the global smartphone market

00:02:26,480 --> 00:02:30,160
is dependent on android as the operating

00:02:28,480 --> 00:02:32,160
system and android is an open source

00:02:30,160 --> 00:02:33,760
mobile operating system and it's

00:02:32,160 --> 00:02:35,360
actually the open source nature of

00:02:33,760 --> 00:02:37,120
android that makes it possible for so

00:02:35,360 --> 00:02:39,599
many manufacturers so many different

00:02:37,120 --> 00:02:41,040
ecosystems to take and adapt it in ways

00:02:39,599 --> 00:02:42,800
that make sense

00:02:41,040 --> 00:02:45,120
on the right side is a graphic from

00:02:42,800 --> 00:02:46,480
github's uh state of the octopus report

00:02:45,120 --> 00:02:48,480
which is really looking at what are

00:02:46,480 --> 00:02:50,400
developers learning today

00:02:48,480 --> 00:02:51,840
and these are the fastest growing

00:02:50,400 --> 00:02:53,599
programming languages

00:02:51,840 --> 00:02:55,040
according to github and if you look at

00:02:53,599 --> 00:02:56,879
the first one which is dart and you look

00:02:55,040 --> 00:02:58,560
at the fourth one which is kotlin

00:02:56,879 --> 00:03:00,560
those are actually fueled by mobile

00:02:58,560 --> 00:03:01,120
development darp is the language behind

00:03:00,560 --> 00:03:03,519
flutter

00:03:01,120 --> 00:03:06,319
and kotlin is the now preferred language

00:03:03,519 --> 00:03:08,800
for developing android apps

00:03:06,319 --> 00:03:10,400
so today my goal is really to kind of

00:03:08,800 --> 00:03:12,720
walk through this roadmap now it looks

00:03:10,400 --> 00:03:14,159
very complicated but it's not

00:03:12,720 --> 00:03:16,000
this is not going to be a very code

00:03:14,159 --> 00:03:17,360
heavy talk rather it's going to be a

00:03:16,000 --> 00:03:18,159
talk that walks you through the

00:03:17,360 --> 00:03:19,920
ecosystem

00:03:18,159 --> 00:03:22,000
and gives you resources so you can jump

00:03:19,920 --> 00:03:23,040
into code right after this if you're so

00:03:22,000 --> 00:03:25,280
inclined

00:03:23,040 --> 00:03:26,080
first the blue parts my focus there is

00:03:25,280 --> 00:03:27,760
awareness

00:03:26,080 --> 00:03:29,360
how do we talk about the terminology

00:03:27,760 --> 00:03:30,799
what are foldable devices why should you

00:03:29,360 --> 00:03:33,120
care about them

00:03:30,799 --> 00:03:34,400
then we look at the green boxes let's

00:03:33,120 --> 00:03:36,640
talk about android

00:03:34,400 --> 00:03:38,480
what does the android ecosystem provide

00:03:36,640 --> 00:03:40,319
for us to support foldable app

00:03:38,480 --> 00:03:41,760
experiences out of the box

00:03:40,319 --> 00:03:43,840
third we're going to look at the purple

00:03:41,760 --> 00:03:45,360
boxes and that is the surface duo

00:03:43,840 --> 00:03:46,799
we're going to look at a concrete device

00:03:45,360 --> 00:03:47,519
and some of the things that you can do

00:03:46,799 --> 00:03:50,239
today

00:03:47,519 --> 00:03:52,879
to start exploring ideas to target this

00:03:50,239 --> 00:03:55,840
particular form factor

00:03:52,879 --> 00:03:57,599
so first let's look at the blue boxes

00:03:55,840 --> 00:04:01,519
what are foldable devices

00:03:57,599 --> 00:04:04,080
what are dual screens why should we care

00:04:01,519 --> 00:04:05,120
so when we think about foldable i really

00:04:04,080 --> 00:04:08,319
want you to think about

00:04:05,120 --> 00:04:10,000
foldability is about portability first

00:04:08,319 --> 00:04:11,200
so you see two different animations here

00:04:10,000 --> 00:04:13,040
on the left side is an animation that

00:04:11,200 --> 00:04:14,560
comes from the android developer site

00:04:13,040 --> 00:04:16,479
right side is an animation that shows

00:04:14,560 --> 00:04:19,280
you the microsoft surface duo

00:04:16,479 --> 00:04:20,479
both of these are foldable devices on

00:04:19,280 --> 00:04:22,000
the left though what you're really

00:04:20,479 --> 00:04:23,680
seeing is a foldable device that's a

00:04:22,000 --> 00:04:25,440
single display using something called

00:04:23,680 --> 00:04:27,600
flexible display technology

00:04:25,440 --> 00:04:29,120
and here it's a single screen that can

00:04:27,600 --> 00:04:31,040
fold and unfold

00:04:29,120 --> 00:04:32,400
and when it falls you're actually likely

00:04:31,040 --> 00:04:34,400
to be seeing a second screen on the

00:04:32,400 --> 00:04:36,720
outside that does something different

00:04:34,400 --> 00:04:38,479
on the right side you see dual screens

00:04:36,720 --> 00:04:40,720
two screens side by side

00:04:38,479 --> 00:04:42,960
that are hinged together both these

00:04:40,720 --> 00:04:45,440
provide foldable experiences because

00:04:42,960 --> 00:04:46,880
you can fold the form factor go from

00:04:45,440 --> 00:04:48,080
something that's the size of a phone

00:04:46,880 --> 00:04:49,520
that you can hold up

00:04:48,080 --> 00:04:51,440
to something that can open up to the

00:04:49,520 --> 00:04:52,080
size of a tablet and give you an

00:04:51,440 --> 00:04:55,199
immersive

00:04:52,080 --> 00:04:56,000
big large screen display experience the

00:04:55,199 --> 00:04:59,120
opportunity

00:04:56,000 --> 00:05:00,880
for us when you look at foldables is

00:04:59,120 --> 00:05:02,720
you can now rethink the user experience

00:05:00,880 --> 00:05:04,160
what could you do if you didn't have to

00:05:02,720 --> 00:05:05,680
carry two separate devices but one

00:05:04,160 --> 00:05:08,080
device can morph between these two

00:05:05,680 --> 00:05:09,120
modes the challenge though is app

00:05:08,080 --> 00:05:11,199
continuity

00:05:09,120 --> 00:05:12,960
what happens is the user is expecting

00:05:11,199 --> 00:05:13,840
when they go from fold to unfold and

00:05:12,960 --> 00:05:15,759
back again

00:05:13,840 --> 00:05:17,039
that whatever they were doing should

00:05:15,759 --> 00:05:18,720
continue seamlessly

00:05:17,039 --> 00:05:20,560
that you need to reorganize stuff that

00:05:18,720 --> 00:05:24,080
you need to keep the state consistent

00:05:20,560 --> 00:05:26,639
and that is hard next let's ask

00:05:24,080 --> 00:05:27,759
what is dual screen so if foldability is

00:05:26,639 --> 00:05:29,840
really looking at

00:05:27,759 --> 00:05:32,160
how do we kind of create these multi

00:05:29,840 --> 00:05:34,639
multiple postures and fold them for

00:05:32,160 --> 00:05:35,680
different form factors dual screen is

00:05:34,639 --> 00:05:38,240
really about

00:05:35,680 --> 00:05:39,199
productivity how do i get two screens

00:05:38,240 --> 00:05:40,880
side by side

00:05:39,199 --> 00:05:42,560
and use them in a way that can give the

00:05:40,880 --> 00:05:45,199
user the best experience

00:05:42,560 --> 00:05:46,960
and the most productive experience in

00:05:45,199 --> 00:05:48,800
the current context

00:05:46,960 --> 00:05:50,000
some of the things you could do side by

00:05:48,800 --> 00:05:51,440
side apps you can have two different

00:05:50,000 --> 00:05:52,880
apps side by side

00:05:51,440 --> 00:05:54,639
things like paired apps we'll talk about

00:05:52,880 --> 00:05:56,240
that later drag and drop

00:05:54,639 --> 00:05:57,759
but literally allow you to move context

00:05:56,240 --> 00:05:59,600
from one app to the other by dragging

00:05:57,759 --> 00:06:01,440
and dropping across screens

00:05:59,600 --> 00:06:02,960
so the opportunity here is really in

00:06:01,440 --> 00:06:03,919
terms of the flexibility of the app

00:06:02,960 --> 00:06:06,400
experience

00:06:03,919 --> 00:06:08,000
the challenge though is now you have to

00:06:06,400 --> 00:06:10,639
think about two different things

00:06:08,000 --> 00:06:12,400
first when you have dual screen as you

00:06:10,639 --> 00:06:13,680
can see in that and you can see even in

00:06:12,400 --> 00:06:16,000
i don't know if you can see that

00:06:13,680 --> 00:06:17,120
that's a seam and the seam sits between

00:06:16,000 --> 00:06:19,039
right in the middle

00:06:17,120 --> 00:06:20,560
which means that you need ways to kind

00:06:19,039 --> 00:06:23,440
of make your experience

00:06:20,560 --> 00:06:25,039
feel immersive without occluding any of

00:06:23,440 --> 00:06:26,560
the stuff that's there or hidden behind

00:06:25,039 --> 00:06:28,960
that hinge

00:06:26,560 --> 00:06:30,800
second is when you think about the

00:06:28,960 --> 00:06:32,240
challenges here now you suddenly got way

00:06:30,800 --> 00:06:33,840
more configuration states

00:06:32,240 --> 00:06:35,840
you can have be in landscape or portrait

00:06:33,840 --> 00:06:38,400
you can be single screen

00:06:35,840 --> 00:06:39,520
span left or right and you can have all

00:06:38,400 --> 00:06:42,080
those postures

00:06:39,520 --> 00:06:42,960
that's a lot of configuration states

00:06:42,080 --> 00:06:45,520
this is where

00:06:42,960 --> 00:06:47,280
operating system and device manufacturer

00:06:45,520 --> 00:06:48,319
built libraries and helpers can really

00:06:47,280 --> 00:06:49,840
come in handy

00:06:48,319 --> 00:06:51,759
so now we're going to move into the

00:06:49,840 --> 00:06:53,440
green boxes and let's talk about what

00:06:51,759 --> 00:06:57,039
android apps does for you

00:06:53,440 --> 00:06:58,960
in the foldable space so first

00:06:57,039 --> 00:07:00,240
the evolution of android and foldable

00:06:58,960 --> 00:07:02,240
devices

00:07:00,240 --> 00:07:04,400
if you look at it the first version of

00:07:02,240 --> 00:07:05,440
kind of like concerns and conversations

00:07:04,400 --> 00:07:07,440
are unfoldable

00:07:05,440 --> 00:07:09,280
happened in 2018 at the android dev

00:07:07,440 --> 00:07:10,400
summit so first time and that was the

00:07:09,280 --> 00:07:12,080
year we started seeing the first

00:07:10,400 --> 00:07:12,800
flexible display foldable phones come

00:07:12,080 --> 00:07:15,520
out

00:07:12,800 --> 00:07:17,919
and when you looked at that talk you'll

00:07:15,520 --> 00:07:18,639
actually hear them focus on one specific

00:07:17,919 --> 00:07:20,560
thing which is

00:07:18,639 --> 00:07:21,759
screen continuity user experience in

00:07:20,560 --> 00:07:23,520
other words

00:07:21,759 --> 00:07:25,520
android is automatically set up so that

00:07:23,520 --> 00:07:27,599
when you move from one screen modality

00:07:25,520 --> 00:07:29,440
to another you can your app is

00:07:27,599 --> 00:07:30,880
able to reconfigure and build a

00:07:29,440 --> 00:07:34,080
responsive layout

00:07:30,880 --> 00:07:35,840
but you want to do that with the

00:07:34,080 --> 00:07:37,120
application developers knowledge or do

00:07:35,840 --> 00:07:38,319
you want to just kind of stop the app

00:07:37,120 --> 00:07:39,680
and restart it right

00:07:38,319 --> 00:07:42,000
so when they talked about it they talked

00:07:39,680 --> 00:07:43,520
about having something called a flag

00:07:42,000 --> 00:07:46,400
like something that lets you know

00:07:43,520 --> 00:07:48,160
that hey i want i'm a resizable uh app

00:07:46,400 --> 00:07:49,599
please let me know when you have folded

00:07:48,160 --> 00:07:51,520
unfold events and i'll handle them

00:07:49,599 --> 00:07:54,160
so that's where they were fast forward a

00:07:51,520 --> 00:07:55,840
few months in 2019 in google i o

00:07:54,160 --> 00:07:57,440
they debuted and come kind of like a

00:07:55,840 --> 00:07:58,080
more comprehensive strategy and the most

00:07:57,440 --> 00:08:01,280
important thing

00:07:58,080 --> 00:08:03,199
there was this notion of multi-resume

00:08:01,280 --> 00:08:05,199
so in previous apps you were able to

00:08:03,199 --> 00:08:08,160
have two windows on the same screen but

00:08:05,199 --> 00:08:09,840
one of them would be a live at a time

00:08:08,160 --> 00:08:11,440
but now they recognize that with dual

00:08:09,840 --> 00:08:12,080
screen you could have two different apps

00:08:11,440 --> 00:08:13,759
or two different

00:08:12,080 --> 00:08:16,240
activities that were both active at the

00:08:13,759 --> 00:08:16,800
same time so when you close and open the

00:08:16,240 --> 00:08:18,479
phone

00:08:16,800 --> 00:08:20,800
both of them become alive at the same

00:08:18,479 --> 00:08:22,879
time and that has kind of implications

00:08:20,800 --> 00:08:25,520
for state management

00:08:22,879 --> 00:08:26,879
fast forward to 2020 where we are now

00:08:25,520 --> 00:08:29,520
and android 11

00:08:26,879 --> 00:08:31,120
just launched with that also came this

00:08:29,520 --> 00:08:33,120
kind of like knowledge that there are

00:08:31,120 --> 00:08:34,479
more foldable devices more manufacturers

00:08:33,120 --> 00:08:35,919
more form factors

00:08:34,479 --> 00:08:38,159
so it's no longer possible to just

00:08:35,919 --> 00:08:40,719
target like one or two things we needed

00:08:38,159 --> 00:08:41,919
standard ways to even understand what

00:08:40,719 --> 00:08:43,599
are the device states

00:08:41,919 --> 00:08:44,880
where are the display occlusions and so

00:08:43,599 --> 00:08:45,519
on and we'll talk a little bit about

00:08:44,880 --> 00:08:46,640
that

00:08:45,519 --> 00:08:48,800
so really if we think about the

00:08:46,640 --> 00:08:51,200
evolution of android for foldables

00:08:48,800 --> 00:08:52,880
it went from android 7 where we're

00:08:51,200 --> 00:08:54,160
really looking at multi window support

00:08:52,880 --> 00:08:55,680
so single screen

00:08:54,160 --> 00:08:57,200
multiple windows and you can do things

00:08:55,680 --> 00:08:59,040
like drag and drop you can do split

00:08:57,200 --> 00:09:01,440
screen you can do picture-in-picture

00:08:59,040 --> 00:09:03,920
things that help stuff like android tv

00:09:01,440 --> 00:09:05,760
that's where we were in api 24

00:09:03,920 --> 00:09:07,920
fast forward to about a year ago and we

00:09:05,760 --> 00:09:09,360
had android 10 and api 29 and the first

00:09:07,920 --> 00:09:11,760
foldable support came out

00:09:09,360 --> 00:09:13,440
and we started seeing multiple screens

00:09:11,760 --> 00:09:15,120
and multithis multi-display with the

00:09:13,440 --> 00:09:15,920
ability to have a resizable activity

00:09:15,120 --> 00:09:18,000
flag

00:09:15,920 --> 00:09:19,680
and then right now where we are we now

00:09:18,000 --> 00:09:21,519
have multi-configuration

00:09:19,680 --> 00:09:23,440
so in addition to just kind of being

00:09:21,519 --> 00:09:24,560
able to say i'll support this

00:09:23,440 --> 00:09:26,240
now you're saying hey there are

00:09:24,560 --> 00:09:27,920
different kinds of configuration states

00:09:26,240 --> 00:09:30,800
it's not just the number of screens

00:09:27,920 --> 00:09:32,000
the size of the screen it's the postures

00:09:30,800 --> 00:09:33,600
and i want to take a second to talk

00:09:32,000 --> 00:09:34,320
about the four postures that you see

00:09:33,600 --> 00:09:37,839
here

00:09:34,320 --> 00:09:37,839
closed so if captioning not

00:09:49,519 --> 00:09:53,120
right and available would be flipped so

00:09:51,279 --> 00:09:54,399
those are four standard postures that

00:09:53,120 --> 00:09:56,000
they thought about that could be

00:09:54,399 --> 00:09:58,399
kind of uniform across all device

00:09:56,000 --> 00:10:00,160
manufacturers

00:09:58,399 --> 00:10:01,920
at the core as a developer what you need

00:10:00,160 --> 00:10:02,959
to think about you need to ask yourself

00:10:01,920 --> 00:10:04,959
three questions

00:10:02,959 --> 00:10:06,560
and this is actually super important if

00:10:04,959 --> 00:10:07,360
you're thinking of either building a new

00:10:06,560 --> 00:10:09,279
app or

00:10:07,360 --> 00:10:11,040
kind of refactoring your existing app to

00:10:09,279 --> 00:10:13,519
support foldable experiences

00:10:11,040 --> 00:10:15,040
first what was the user's intent when

00:10:13,519 --> 00:10:16,160
they folded or unfolded the device

00:10:15,040 --> 00:10:17,279
that's super important

00:10:16,160 --> 00:10:18,880
why did they do it they must have

00:10:17,279 --> 00:10:21,279
expected something to happen so if they

00:10:18,880 --> 00:10:22,959
went from a phone mode to a tablet mode

00:10:21,279 --> 00:10:24,720
maybe they were expecting that you would

00:10:22,959 --> 00:10:26,079
adapt and make the screen bigger

00:10:24,720 --> 00:10:27,920
show them something more what was the

00:10:26,079 --> 00:10:29,600
intent second

00:10:27,920 --> 00:10:31,839
whatever experience you delivered to

00:10:29,600 --> 00:10:33,279
them did it match the intent and this is

00:10:31,839 --> 00:10:35,360
important because that means that as

00:10:33,279 --> 00:10:36,880
a developer you also want to think about

00:10:35,360 --> 00:10:38,560
instrumenting your application

00:10:36,880 --> 00:10:40,880
to get this kind of data so you can

00:10:38,560 --> 00:10:43,279
understand if you met that expectation

00:10:40,880 --> 00:10:44,399
and third once you've gone past these

00:10:43,279 --> 00:10:46,480
two phases

00:10:44,399 --> 00:10:48,000
what are the affordances you can use to

00:10:46,480 --> 00:10:51,360
deliver new

00:10:48,000 --> 00:10:54,480
and kind of interesting or surprising

00:10:51,360 --> 00:10:55,839
experiences to the user

00:10:54,480 --> 00:10:57,040
so if you look at the android space and

00:10:55,839 --> 00:10:58,399
i'm going to talk about this in more

00:10:57,040 --> 00:11:01,200
detail in the surface duo

00:10:58,399 --> 00:11:02,320
slides later but at the very high level

00:11:01,200 --> 00:11:04,160
the android

00:11:02,320 --> 00:11:05,920
ecosystem gives you design guidance for

00:11:04,160 --> 00:11:07,760
foldables first

00:11:05,920 --> 00:11:09,600
always think about responsive layouts

00:11:07,760 --> 00:11:11,279
that as you go from fold unfold

00:11:09,600 --> 00:11:12,959
your app is automatically adapting

00:11:11,279 --> 00:11:15,839
showing the right set of fragments and

00:11:12,959 --> 00:11:17,279
optimizing for the layouts that you have

00:11:15,839 --> 00:11:19,120
make sure that you're always keeping a

00:11:17,279 --> 00:11:20,880
consistent state so that if the user is

00:11:19,120 --> 00:11:21,920
in the middle of typing data into his

00:11:20,880 --> 00:11:23,440
form

00:11:21,920 --> 00:11:25,680
when it goes from full to unfold you

00:11:23,440 --> 00:11:28,160
don't lose any of it as an example

00:11:25,680 --> 00:11:30,160
second think about multi-window support

00:11:28,160 --> 00:11:31,600
there's a resizable activity flag

00:11:30,160 --> 00:11:32,880
kind of use that to determine whether

00:11:31,600 --> 00:11:33,519
you want to handle those events or just

00:11:32,880 --> 00:11:35,600
kind of

00:11:33,519 --> 00:11:37,200
let them go and have the android

00:11:35,600 --> 00:11:38,000
operating system basically start you up

00:11:37,200 --> 00:11:39,519
again

00:11:38,000 --> 00:11:41,040
use things like drag and drop because

00:11:39,519 --> 00:11:42,720
they're intuitive and very efficient in

00:11:41,040 --> 00:11:44,720
this ecosystem

00:11:42,720 --> 00:11:46,240
multi-display support when you have dual

00:11:44,720 --> 00:11:48,079
screens you can do things like

00:11:46,240 --> 00:11:50,160
launch an activity on the second screen

00:11:48,079 --> 00:11:52,480
if it's available what could you do to

00:11:50,160 --> 00:11:54,160
create new experiences around that

00:11:52,480 --> 00:11:55,600
fourth and we'll talk about in this next

00:11:54,160 --> 00:11:58,079
screen testing

00:11:55,600 --> 00:11:59,920
these devices are not ubiquitous nor are

00:11:58,079 --> 00:12:02,240
they likely to be as cheap as

00:11:59,920 --> 00:12:04,160
regular phones how can you go testing

00:12:02,240 --> 00:12:04,880
against this diversity of devices that

00:12:04,160 --> 00:12:07,040
are out there

00:12:04,880 --> 00:12:08,560
we'll talk about emulators and last but

00:12:07,040 --> 00:12:10,320
not least most importantly

00:12:08,560 --> 00:12:11,920
there are so many different kinds of

00:12:10,320 --> 00:12:13,519
apps out there how

00:12:11,920 --> 00:12:16,240
where do you even start how do you get

00:12:13,519 --> 00:12:19,440
started designing your mobile experience

00:12:16,240 --> 00:12:22,639
to be optimal for these devices

00:12:19,440 --> 00:12:24,399
so first let's talk about testing on the

00:12:22,639 --> 00:12:26,959
left side you see an animation

00:12:24,399 --> 00:12:29,600
of the emulator that's available in the

00:12:26,959 --> 00:12:31,279
default android studio today

00:12:29,600 --> 00:12:32,720
that animation and you can kind of see

00:12:31,279 --> 00:12:34,480
that you can't see too clearly but

00:12:32,720 --> 00:12:35,279
you're seeing them click a certain icon

00:12:34,480 --> 00:12:37,600
on the right side

00:12:35,279 --> 00:12:39,360
on the emulator bar and basically what

00:12:37,600 --> 00:12:40,399
that's doing is toggling between fold

00:12:39,360 --> 00:12:42,639
and unfold

00:12:40,399 --> 00:12:44,320
events so you can see whether your

00:12:42,639 --> 00:12:46,399
application is running

00:12:44,320 --> 00:12:48,000
adapting to those the way you expect it

00:12:46,399 --> 00:12:50,240
so that's a very simple

00:12:48,000 --> 00:12:52,160
example on the right side you're seeing

00:12:50,240 --> 00:12:53,440
what the emulator actually looks like

00:12:52,160 --> 00:12:55,040
and i'm running a different app and

00:12:53,440 --> 00:12:57,440
there that's the the photo editor app

00:12:55,040 --> 00:12:59,120
from surface duo sdk samples

00:12:57,440 --> 00:13:00,240
but what i wanted you to look at is what

00:12:59,120 --> 00:13:01,279
are the features available on the

00:13:00,240 --> 00:13:03,279
emulator right

00:13:01,279 --> 00:13:05,120
so you can now test against different

00:13:03,279 --> 00:13:06,639
orientations so you can test how your

00:13:05,120 --> 00:13:08,320
app is kind of

00:13:06,639 --> 00:13:09,680
whether the configuration changes you're

00:13:08,320 --> 00:13:12,959
making or handling

00:13:09,680 --> 00:13:13,680
work for fold unfold or orientation

00:13:12,959 --> 00:13:16,480
shifts

00:13:13,680 --> 00:13:18,079
and potentially not yet but you can't

00:13:16,480 --> 00:13:19,600
really look at hinge and all right now

00:13:18,079 --> 00:13:20,320
but potentially that'll come down the

00:13:19,600 --> 00:13:21,519
line

00:13:20,320 --> 00:13:22,959
when it comes to the surface duo

00:13:21,519 --> 00:13:23,839
emulator you will be able to look at

00:13:22,959 --> 00:13:26,160
some of those

00:13:23,839 --> 00:13:27,120
in a custom emulator that we've got with

00:13:26,160 --> 00:13:28,560
our sdk

00:13:27,120 --> 00:13:30,399
that'll give you a sense of what might

00:13:28,560 --> 00:13:32,399
be possible down the line

00:13:30,399 --> 00:13:33,760
but bottom line with emulators is you no

00:13:32,399 --> 00:13:35,200
longer need to have a device you have

00:13:33,760 --> 00:13:37,680
something that you can start with

00:13:35,200 --> 00:13:39,120
to just test that your application works

00:13:37,680 --> 00:13:40,720
on these foldable devices

00:13:39,120 --> 00:13:42,560
in a way that makes sense to you and to

00:13:40,720 --> 00:13:44,639
the user

00:13:42,560 --> 00:13:46,800
but we need to go beyond this right in

00:13:44,639 --> 00:13:47,519
order for you to make your apps work you

00:13:46,800 --> 00:13:49,040
first a

00:13:47,519 --> 00:13:51,120
need to know that you're on a foldable

00:13:49,040 --> 00:13:52,399
device b you need to know what the

00:13:51,120 --> 00:13:54,959
current state of the

00:13:52,399 --> 00:13:56,079
device is in other words if it's hinged

00:13:54,959 --> 00:13:58,720
where is the hinge or

00:13:56,079 --> 00:14:00,399
if it's a flexible display is there a

00:13:58,720 --> 00:14:02,240
fold area that i should be avoiding when

00:14:00,399 --> 00:14:04,160
i render things on the screen

00:14:02,240 --> 00:14:06,000
if it is a foldable device what is the

00:14:04,160 --> 00:14:07,279
current posture what's the angle how do

00:14:06,000 --> 00:14:10,399
i find all these out

00:14:07,279 --> 00:14:12,639
and how do i know when those change

00:14:10,399 --> 00:14:13,839
so it turns out that very recently and

00:14:12,639 --> 00:14:15,199
all of these slides when i put them up

00:14:13,839 --> 00:14:18,480
you can actually click through on the

00:14:15,199 --> 00:14:20,000
links below there's a sample on the

00:14:18,480 --> 00:14:21,680
android developers website there's a

00:14:20,000 --> 00:14:22,000
post in on medium that walks you through

00:14:21,680 --> 00:14:25,120
it

00:14:22,000 --> 00:14:27,600
but at the core jetpack is their new

00:14:25,120 --> 00:14:29,440
extension libraries and jetpack now has

00:14:27,600 --> 00:14:31,279
a window manager api

00:14:29,440 --> 00:14:32,720
that abstracts some of this information

00:14:31,279 --> 00:14:35,040
makes it accessible to you

00:14:32,720 --> 00:14:35,920
in a way that you can use uniformly or

00:14:35,040 --> 00:14:38,880
consistently

00:14:35,920 --> 00:14:40,000
across all foldable manufacturers right

00:14:38,880 --> 00:14:41,839
it's a single api

00:14:40,000 --> 00:14:43,519
and what it really does right now is it

00:14:41,839 --> 00:14:46,800
gives you two things

00:14:43,519 --> 00:14:48,560
first it can tell you display features

00:14:46,800 --> 00:14:50,320
display features are nothing more than

00:14:48,560 --> 00:14:54,079
the rectangular bounds

00:14:50,320 --> 00:14:55,760
of areas on the screen that might not be

00:14:54,079 --> 00:14:57,839
that might be disrupted that you might

00:14:55,760 --> 00:14:58,240
want to avoid for example the location

00:14:57,839 --> 00:15:00,560
of

00:14:58,240 --> 00:15:01,760
the scene the second thing it does is

00:15:00,560 --> 00:15:04,079
gives you a device state

00:15:01,760 --> 00:15:06,320
and that device state tells you is this

00:15:04,079 --> 00:15:06,720
app in one of those postures we talked

00:15:06,320 --> 00:15:08,639
about

00:15:06,720 --> 00:15:10,320
right and the examples that you see are

00:15:08,639 --> 00:15:12,399
closed open half opened

00:15:10,320 --> 00:15:14,160
and i think it was flipped as you saw

00:15:12,399 --> 00:15:15,680
previously there are a few

00:15:14,160 --> 00:15:17,600
discreet versions but these will be

00:15:15,680 --> 00:15:18,800
provided for you consistently across all

00:15:17,600 --> 00:15:21,360
manufacturers

00:15:18,800 --> 00:15:23,279
so this is what android provides right

00:15:21,360 --> 00:15:26,160
now

00:15:23,279 --> 00:15:26,880
now let's talk about the surface duo so

00:15:26,160 --> 00:15:29,680
in here

00:15:26,880 --> 00:15:30,720
i kind of really want to inspire you to

00:15:29,680 --> 00:15:33,279
do three things

00:15:30,720 --> 00:15:34,000
first install the sdk play around with

00:15:33,279 --> 00:15:35,759
it

00:15:34,000 --> 00:15:37,920
in particular it comes with its own

00:15:35,759 --> 00:15:40,560
emulator so you can get a sense for what

00:15:37,920 --> 00:15:41,519
the emulated experience for your default

00:15:40,560 --> 00:15:43,440
app looks like

00:15:41,519 --> 00:15:45,279
so ex let's explore the emulator and

00:15:43,440 --> 00:15:47,360
last but not least i want to unpack the

00:15:45,279 --> 00:15:49,120
apis libraries and design patterns

00:15:47,360 --> 00:15:50,880
so you get a jump start when you want to

00:15:49,120 --> 00:15:53,279
build a new app or

00:15:50,880 --> 00:15:54,880
adapt or refactor your existing app so

00:15:53,279 --> 00:15:56,560
we're going to cover the purple boxes

00:15:54,880 --> 00:15:58,480
next

00:15:56,560 --> 00:16:00,000
so what is the surface duo so the

00:15:58,480 --> 00:16:01,519
surface duo is actually this device i

00:16:00,000 --> 00:16:03,199
have right here

00:16:01,519 --> 00:16:05,199
it's a very unique device and it's

00:16:03,199 --> 00:16:07,360
actually pretty cool it was launched in

00:16:05,199 --> 00:16:09,120
september of this year from microsoft

00:16:07,360 --> 00:16:10,639
and it's the first android powered

00:16:09,120 --> 00:16:13,199
device from microsoft

00:16:10,639 --> 00:16:14,959
as you can see it's really thin it is

00:16:13,199 --> 00:16:17,040
completely foldable what makes it unique

00:16:14,959 --> 00:16:18,800
is it has a 360 degree hinge so it not

00:16:17,040 --> 00:16:20,079
only opens this way but you can fold it

00:16:18,800 --> 00:16:22,160
all the way around

00:16:20,079 --> 00:16:24,560
and that gives you an almost perfect 360

00:16:22,160 --> 00:16:27,759
degree rotation degrees of freedom

00:16:24,560 --> 00:16:29,759
it has two unique screens two distinct

00:16:27,759 --> 00:16:31,199
and symmetric screen so both displays

00:16:29,759 --> 00:16:33,360
are identical

00:16:31,199 --> 00:16:34,880
and this is actually important if you

00:16:33,360 --> 00:16:36,320
are a person who likes building stuff

00:16:34,880 --> 00:16:39,279
for the enterprise

00:16:36,320 --> 00:16:40,560
it comes built-in with both m365 which

00:16:39,279 --> 00:16:41,360
is the productory suite of apps from

00:16:40,560 --> 00:16:43,360
microsoft

00:16:41,360 --> 00:16:45,040
and android play store access so

00:16:43,360 --> 00:16:47,279
effectively you can build apps that

00:16:45,040 --> 00:16:50,800
target two complete ecosystems

00:16:47,279 --> 00:16:51,920
of users the link at the top gives you a

00:16:50,800 --> 00:16:53,120
lot of the tech specs if you're

00:16:51,920 --> 00:16:54,800
interested

00:16:53,120 --> 00:16:57,120
but as a developer you're probably

00:16:54,800 --> 00:16:57,759
asking what do i need to know to develop

00:16:57,120 --> 00:16:59,279
for the duo

00:16:57,759 --> 00:17:01,759
it is an android device right so does

00:16:59,279 --> 00:17:04,079
that mean i have to develop an android

00:17:01,759 --> 00:17:04,799
not exactly so if you're an android

00:17:04,079 --> 00:17:07,039
developer

00:17:04,799 --> 00:17:08,400
the surface duo has an sdk that uses

00:17:07,039 --> 00:17:08,959
kotlin which is the preferred language

00:17:08,400 --> 00:17:11,039
now

00:17:08,959 --> 00:17:12,240
or java which has was for the longest

00:17:11,039 --> 00:17:14,000
time the preferred language

00:17:12,240 --> 00:17:15,919
and you can start from there and build

00:17:14,000 --> 00:17:18,079
native apps for the android device

00:17:15,919 --> 00:17:21,199
directly that go into the play store

00:17:18,079 --> 00:17:22,559
or if you want to explore cross-platform

00:17:21,199 --> 00:17:24,079
and when you think about cross-platform

00:17:22,559 --> 00:17:26,319
you're really looking at a framework

00:17:24,079 --> 00:17:27,199
that from a single code base will let

00:17:26,319 --> 00:17:29,520
you build both

00:17:27,199 --> 00:17:31,520
android and ios or maybe even other apps

00:17:29,520 --> 00:17:34,240
like a desktop app perhaps

00:17:31,520 --> 00:17:34,880
by using taking advantage of compilers

00:17:34,240 --> 00:17:36,799
and other

00:17:34,880 --> 00:17:37,919
libraries and support systems within

00:17:36,799 --> 00:17:40,400
that framework

00:17:37,919 --> 00:17:42,160
well when you think about that there are

00:17:40,400 --> 00:17:42,880
options like react native xamarin and

00:17:42,160 --> 00:17:44,799
flutter

00:17:42,880 --> 00:17:46,320
and the service duo if you go look at

00:17:44,799 --> 00:17:49,039
this sdk and samples

00:17:46,320 --> 00:17:50,640
they actually do have a tutorial and

00:17:49,039 --> 00:17:52,160
existing libraries and samples that you

00:17:50,640 --> 00:17:53,919
can use to jump start

00:17:52,160 --> 00:17:55,440
building or exploring dual screen

00:17:53,919 --> 00:17:58,480
experiences using

00:17:55,440 --> 00:18:00,000
those particular frameworks but it's and

00:17:58,480 --> 00:18:01,280
with those you actually still end up

00:18:00,000 --> 00:18:02,640
getting native apps you can ship in the

00:18:01,280 --> 00:18:04,480
market right

00:18:02,640 --> 00:18:06,000
but what if you wanted to try something

00:18:04,480 --> 00:18:09,120
different there are actually two

00:18:06,000 --> 00:18:10,480
other um documents or two other

00:18:09,120 --> 00:18:12,080
locations you can look at

00:18:10,480 --> 00:18:14,000
if you're interested in one of those

00:18:12,080 --> 00:18:15,840
particular domains the first

00:18:14,000 --> 00:18:18,080
is if you are interested in using this

00:18:15,840 --> 00:18:19,600
for gaming there is a sample that uses

00:18:18,080 --> 00:18:22,320
unity so you can explore

00:18:19,600 --> 00:18:22,799
using unity to build uh 2d games that

00:18:22,320 --> 00:18:24,480
might

00:18:22,799 --> 00:18:26,480
potentially take advantage of active 2

00:18:24,480 --> 00:18:28,160
screens and

00:18:26,480 --> 00:18:30,160
as a long time mobile web developer this

00:18:28,160 --> 00:18:31,919
makes me super happy there's also a

00:18:30,160 --> 00:18:33,520
sample that talks about kind of like

00:18:31,919 --> 00:18:36,480
very nascent support

00:18:33,520 --> 00:18:37,280
for dual screen uh behaviors in

00:18:36,480 --> 00:18:40,000
javascript

00:18:37,280 --> 00:18:41,520
using css media queries and i think it's

00:18:40,000 --> 00:18:42,960
called the windows segments api

00:18:41,520 --> 00:18:44,480
but we have a sample we have some

00:18:42,960 --> 00:18:45,200
guidance and somewhere for you to get

00:18:44,480 --> 00:18:48,400
started

00:18:45,200 --> 00:18:49,120
trying to build this so those are your

00:18:48,400 --> 00:18:50,960
options

00:18:49,120 --> 00:18:52,640
for now we're going to dive into mostly

00:18:50,960 --> 00:18:53,360
the android stuff so first thing you

00:18:52,640 --> 00:18:55,280
want to think about

00:18:53,360 --> 00:18:56,880
is your configuration factors right so

00:18:55,280 --> 00:18:58,400
if you're an android app

00:18:56,880 --> 00:19:00,080
what are the possible configuration

00:18:58,400 --> 00:19:02,559
states that your app can be in

00:19:00,080 --> 00:19:04,960
so that you can respond to them first as

00:19:02,559 --> 00:19:08,080
i mentioned this has a 360 degree hinge

00:19:04,960 --> 00:19:10,480
that means 360 unique positions

00:19:08,080 --> 00:19:12,400
that you can get from an api provided by

00:19:10,480 --> 00:19:14,720
the surface duo sdk

00:19:12,400 --> 00:19:16,240
second in addition for these very fine

00:19:14,720 --> 00:19:18,640
grained hinge positions

00:19:16,240 --> 00:19:20,000
you can also get 16 discrete levels

00:19:18,640 --> 00:19:22,000
which we call postures

00:19:20,000 --> 00:19:24,000
and those 16 discrete levels rather than

00:19:22,000 --> 00:19:26,320
give you degree by degree i kind of like

00:19:24,000 --> 00:19:29,120
bucketed into broad areas right so

00:19:26,320 --> 00:19:31,520
there's things like this is a flat

00:19:29,120 --> 00:19:32,559
posture this is kind of a peak which is

00:19:31,520 --> 00:19:35,280
very small

00:19:32,559 --> 00:19:36,640
uh angle this could be book that's a

00:19:35,280 --> 00:19:38,880
tent and so on

00:19:36,640 --> 00:19:40,559
there are if you go look at the link in

00:19:38,880 --> 00:19:41,280
the docs they'll actually list out the

00:19:40,559 --> 00:19:43,440
16 part

00:19:41,280 --> 00:19:45,520
postures individually in addition to

00:19:43,440 --> 00:19:47,440
that the postures also depend on

00:19:45,520 --> 00:19:49,280
things like the orientation and one

00:19:47,440 --> 00:19:51,919
screen or two screen right

00:19:49,280 --> 00:19:53,360
so with that you've got yourself a whole

00:19:51,919 --> 00:19:55,840
bunch of configurations

00:19:53,360 --> 00:19:56,720
that you can use to kind of respond in

00:19:55,840 --> 00:19:59,679
your app

00:19:56,720 --> 00:20:02,000
for events showing changes taken like

00:19:59,679 --> 00:20:04,799
that have been initiated by the user

00:20:02,000 --> 00:20:06,320
but what's the default behavior so this

00:20:04,799 --> 00:20:08,480
is how the duo works

00:20:06,320 --> 00:20:10,080
out of the box if you're an application

00:20:08,480 --> 00:20:11,600
developer by default when your

00:20:10,080 --> 00:20:13,440
application is launched it's launched

00:20:11,600 --> 00:20:16,480
just like any other android app

00:20:13,440 --> 00:20:18,480
it will open on a single screen an

00:20:16,480 --> 00:20:19,600
app can then launch an activity once

00:20:18,480 --> 00:20:21,760
launched that can then

00:20:19,600 --> 00:20:23,120
launch a second activity on the second

00:20:21,760 --> 00:20:24,320
screen if that second screen is

00:20:23,120 --> 00:20:26,480
currently available

00:20:24,320 --> 00:20:28,240
if it's not available then that as

00:20:26,480 --> 00:20:30,559
default behavior will basically launch

00:20:28,240 --> 00:20:33,440
on top of the existing one

00:20:30,559 --> 00:20:34,000
a user can manually move an app from

00:20:33,440 --> 00:20:36,960
left to right

00:20:34,000 --> 00:20:38,159
screens and in fact you can derive some

00:20:36,960 --> 00:20:39,679
idea of whether you're on the left or

00:20:38,159 --> 00:20:40,640
right screen from some of the apis

00:20:39,679 --> 00:20:43,440
available

00:20:40,640 --> 00:20:44,799
and you can also potentially move things

00:20:43,440 --> 00:20:48,000
between left and right

00:20:44,799 --> 00:20:49,840
programmatically if supported you

00:20:48,000 --> 00:20:50,960
can have multi-instance apps so

00:20:49,840 --> 00:20:52,720
basically if you've enabled

00:20:50,960 --> 00:20:54,720
multi-instance apps you can have

00:20:52,720 --> 00:20:56,640
two instances of your app running on

00:20:54,720 --> 00:20:58,640
either screen and that allows you to do

00:20:56,640 --> 00:21:00,559
or take advantage of the dual screen

00:20:58,640 --> 00:21:01,919
without having changed your code but

00:21:00,559 --> 00:21:03,520
potentially allowing two different

00:21:01,919 --> 00:21:04,159
screens of your app to show at the same

00:21:03,520 --> 00:21:06,640
time

00:21:04,159 --> 00:21:08,000
that might add value to each other but

00:21:06,640 --> 00:21:10,559
the most important or

00:21:08,000 --> 00:21:12,080
most uh unique feature is the one that

00:21:10,559 --> 00:21:13,039
i've highlighted in purple and that is

00:21:12,080 --> 00:21:14,960
spanning

00:21:13,039 --> 00:21:16,400
so spanning is when you take an app

00:21:14,960 --> 00:21:18,400
that's running on a screen

00:21:16,400 --> 00:21:20,159
you're able to drag it to the center of

00:21:18,400 --> 00:21:21,280
the screen and let it go and now it

00:21:20,159 --> 00:21:23,200
basically spans

00:21:21,280 --> 00:21:25,120
both screens and in doing that

00:21:23,200 --> 00:21:27,440
effectively the app has adapted its

00:21:25,120 --> 00:21:28,480
layout to take advantage of both screens

00:21:27,440 --> 00:21:30,240
real estate

00:21:28,480 --> 00:21:31,919
so we'll talk about some design patterns

00:21:30,240 --> 00:21:34,320
around that later

00:21:31,919 --> 00:21:35,919
but in general we're gonna start by

00:21:34,320 --> 00:21:37,039
saying take the general foldable

00:21:35,919 --> 00:21:38,640
guidance from android

00:21:37,039 --> 00:21:40,559
so use responsive layouts we all know

00:21:38,640 --> 00:21:41,919
how to use them support all

00:21:40,559 --> 00:21:43,760
configurations remember all the

00:21:41,919 --> 00:21:46,640
different configurations we talked about

00:21:43,760 --> 00:21:47,840
to the extent possible at least have the

00:21:46,640 --> 00:21:50,880
ability to put in

00:21:47,840 --> 00:21:53,360
callbacks or handle those events

00:21:50,880 --> 00:21:54,480
so you can know when the user put the

00:21:53,360 --> 00:21:55,360
device into that particular

00:21:54,480 --> 00:21:57,200
configuration

00:21:55,360 --> 00:21:59,760
collecting the data will help you

00:21:57,200 --> 00:22:00,799
identify what are familiar postures that

00:21:59,760 --> 00:22:02,799
users expect

00:22:00,799 --> 00:22:04,799
to keep your particular application in

00:22:02,799 --> 00:22:05,520
and then perhaps ask what was their

00:22:04,799 --> 00:22:07,039
intent

00:22:05,520 --> 00:22:09,200
and then customize your application

00:22:07,039 --> 00:22:11,280
experience to deliver against it

00:22:09,200 --> 00:22:12,559
you can support diverse inputs so while

00:22:11,280 --> 00:22:14,880
touch and type

00:22:12,559 --> 00:22:17,039
are default the surface do also comes

00:22:14,880 --> 00:22:17,840
with a pen and there's a set of samples

00:22:17,039 --> 00:22:20,799
and an api

00:22:17,840 --> 00:22:22,480
for allowing you to work with pen events

00:22:20,799 --> 00:22:23,600
use drag and drop whenever you have side

00:22:22,480 --> 00:22:26,000
by side displays

00:22:23,600 --> 00:22:27,120
it's way more intuitive for the user to

00:22:26,000 --> 00:22:29,120
kind of

00:22:27,120 --> 00:22:30,640
transfer data or context from two

00:22:29,120 --> 00:22:31,360
different views from one view to the

00:22:30,640 --> 00:22:34,000
other

00:22:31,360 --> 00:22:34,799
by drag and drop rather than by type or

00:22:34,000 --> 00:22:36,000
touch

00:22:34,799 --> 00:22:37,679
and in order for you to do that you

00:22:36,000 --> 00:22:39,200
really need to understand how to kind of

00:22:37,679 --> 00:22:40,159
provide feedback to the user that the

00:22:39,200 --> 00:22:42,159
drag and drop

00:22:40,159 --> 00:22:43,840
feature is available and is currently in

00:22:42,159 --> 00:22:45,200
progress there are samples to show you

00:22:43,840 --> 00:22:46,640
how to do that

00:22:45,200 --> 00:22:48,320
but the most important thing that you

00:22:46,640 --> 00:22:48,880
want to take away from design guidance

00:22:48,320 --> 00:22:51,120
is

00:22:48,880 --> 00:22:52,240
learn user intent learn throughout like

00:22:51,120 --> 00:22:54,400
instrument your app

00:22:52,240 --> 00:22:55,360
to understand why the user did what they

00:22:54,400 --> 00:22:57,200
did and then

00:22:55,360 --> 00:22:59,280
be see what happens after those events

00:22:57,200 --> 00:23:01,200
to see if they continued on their path

00:22:59,280 --> 00:23:02,640
current workflow they changed direction

00:23:01,200 --> 00:23:05,440
because you want to understand if you

00:23:02,640 --> 00:23:06,880
met that expectation

00:23:05,440 --> 00:23:08,720
but let's come to the thing that's

00:23:06,880 --> 00:23:10,640
unique to the duo and in fact

00:23:08,720 --> 00:23:12,320
foldable devices that have dual screens

00:23:10,640 --> 00:23:14,880
and that is the scene

00:23:12,320 --> 00:23:15,520
so as i mentioned before in the duo you

00:23:14,880 --> 00:23:17,440
have

00:23:15,520 --> 00:23:19,440
the hinge and because you have a hinge

00:23:17,440 --> 00:23:20,400
you actually have this very visible seam

00:23:19,440 --> 00:23:21,840
in the middle

00:23:20,400 --> 00:23:23,600
and you can look at this in here you can

00:23:21,840 --> 00:23:24,720
see that from a distance you you can

00:23:23,600 --> 00:23:26,799
perhaps not

00:23:24,720 --> 00:23:28,640
pay attention to it it looks kind of

00:23:26,799 --> 00:23:30,159
uniform because this is an image

00:23:28,640 --> 00:23:32,400
but if you had certain things where

00:23:30,159 --> 00:23:33,520
perhaps the interactive button showed up

00:23:32,400 --> 00:23:35,280
in the middle

00:23:33,520 --> 00:23:37,120
you might not be able to kind of have

00:23:35,280 --> 00:23:40,000
that a correct

00:23:37,120 --> 00:23:41,679
or consistent experience for the user so

00:23:40,000 --> 00:23:42,720
what are ways in which you can deal with

00:23:41,679 --> 00:23:45,279
that scene

00:23:42,720 --> 00:23:46,000
here are some strategies strategy number

00:23:45,279 --> 00:23:47,279
one is do

00:23:46,000 --> 00:23:49,120
nothing the first thing you want to do

00:23:47,279 --> 00:23:50,960
is you're an android developer

00:23:49,120 --> 00:23:52,400
take the app that you have run it in the

00:23:50,960 --> 00:23:55,200
emulator just run it as

00:23:52,400 --> 00:23:56,720
is and see what happens it turns out

00:23:55,200 --> 00:23:58,320
that there might be some apps and we

00:23:56,720 --> 00:23:59,600
look at design patterns like extended

00:23:58,320 --> 00:24:01,360
canvas later

00:23:59,600 --> 00:24:03,840
for example a map view right which is

00:24:01,360 --> 00:24:05,440
scrollable or has the ability to kind of

00:24:03,840 --> 00:24:06,559
slide out from under the scene

00:24:05,440 --> 00:24:08,400
in which case you didn't have to do

00:24:06,559 --> 00:24:09,760
anything to your app it already can

00:24:08,400 --> 00:24:12,960
accommodate the same

00:24:09,760 --> 00:24:15,120
by escaping from under it second

00:24:12,960 --> 00:24:16,840
seam strategy is avoided so this is

00:24:15,120 --> 00:24:18,799
really specific to things like

00:24:16,840 --> 00:24:20,000
navigational items like if you have a

00:24:18,799 --> 00:24:22,880
drop down menu

00:24:20,000 --> 00:24:23,200
if you have buttons etc that kind of

00:24:22,880 --> 00:24:25,840
have

00:24:23,200 --> 00:24:27,200
directionality see if you can have them

00:24:25,840 --> 00:24:29,919
drop down or pop

00:24:27,200 --> 00:24:31,840
out in a direction away from the scene

00:24:29,919 --> 00:24:32,799
third strategy is snap to it if you have

00:24:31,840 --> 00:24:35,760
a display

00:24:32,799 --> 00:24:37,360
element that can be um assembled into

00:24:35,760 --> 00:24:40,000
columns like a grid

00:24:37,360 --> 00:24:41,360
see if you can bring the unusable like

00:24:40,000 --> 00:24:43,120
the middle of the

00:24:41,360 --> 00:24:44,480
the grid right aligned with the seam so

00:24:43,120 --> 00:24:44,880
if you have columns on either side so

00:24:44,480 --> 00:24:46,400
that

00:24:44,880 --> 00:24:47,840
the middle is really corresponding to

00:24:46,400 --> 00:24:50,240
the space between columns and you're not

00:24:47,840 --> 00:24:52,720
going to have anything displayable there

00:24:50,240 --> 00:24:54,159
fourth and fifth are really um kind of

00:24:52,720 --> 00:24:55,840
two ways of looking at things for rich

00:24:54,159 --> 00:24:58,400
media right so mask it

00:24:55,840 --> 00:24:59,279
says hey sometimes like the example i

00:24:58,400 --> 00:25:00,720
showed you

00:24:59,279 --> 00:25:03,360
the human eye will connect the dots if

00:25:00,720 --> 00:25:06,400
you're just looking at rich content

00:25:03,360 --> 00:25:08,240
the human eye can kind of like make that

00:25:06,400 --> 00:25:09,440
seem invisible by understanding what

00:25:08,240 --> 00:25:12,080
could be underneath it

00:25:09,440 --> 00:25:13,520
as long as it's not critical so it's an

00:25:12,080 --> 00:25:15,760
easy way for you to get around it

00:25:13,520 --> 00:25:17,440
splitting it is when the human eye can

00:25:15,760 --> 00:25:18,640
make out the difference or you need it

00:25:17,440 --> 00:25:20,559
to have something interactive

00:25:18,640 --> 00:25:22,400
in which case you can tear that canvas

00:25:20,559 --> 00:25:24,240
apart into two different pieces

00:25:22,400 --> 00:25:26,240
put them on either side so these are all

00:25:24,240 --> 00:25:28,799
strategies but the most important

00:25:26,240 --> 00:25:30,640
strategy to go towards is embracing it

00:25:28,799 --> 00:25:32,159
what if you could rethink your user

00:25:30,640 --> 00:25:34,080
experience to make the scene

00:25:32,159 --> 00:25:36,400
feel like it was an organic part of the

00:25:34,080 --> 00:25:37,919
user experience and not an impediment

00:25:36,400 --> 00:25:39,679
and we'll talk about design patterns

00:25:37,919 --> 00:25:41,760
around that

00:25:39,679 --> 00:25:43,679
so let's talk about development the

00:25:41,760 --> 00:25:45,360
guidance for development is very simple

00:25:43,679 --> 00:25:48,559
download the sdk which comes with an

00:25:45,360 --> 00:25:49,919
emulator start by first testing your app

00:25:48,559 --> 00:25:52,480
on the default emulator

00:25:49,919 --> 00:25:53,679
make sure that it maybe requires work or

00:25:52,480 --> 00:25:54,880
not

00:25:53,679 --> 00:25:57,360
kind of like try the different

00:25:54,880 --> 00:25:58,559
orientations and figure out which places

00:25:57,360 --> 00:26:01,120
you need to fix

00:25:58,559 --> 00:26:02,960
to either improve the user experience or

00:26:01,120 --> 00:26:04,559
make sure that the default experience is

00:26:02,960 --> 00:26:06,480
not being impacted

00:26:04,559 --> 00:26:08,080
third adopt some of the android best

00:26:06,480 --> 00:26:10,480
practices for foldables just so you're

00:26:08,080 --> 00:26:13,039
bringing your app up to be consistent

00:26:10,480 --> 00:26:15,039
across the entire family of foldables

00:26:13,039 --> 00:26:16,240
and then start exploring device patterns

00:26:15,039 --> 00:26:17,679
for enhanced ux

00:26:16,240 --> 00:26:19,760
that could be specific to a particular

00:26:17,679 --> 00:26:22,480
device so for the

00:26:19,760 --> 00:26:24,320
surface duo sdk again i'll put the

00:26:22,480 --> 00:26:25,679
slides out at that akms link that you

00:26:24,320 --> 00:26:27,360
see at the bottom or you can go to the

00:26:25,679 --> 00:26:28,799
sdd doll screen link

00:26:27,360 --> 00:26:30,640
and you can find a link to the surface

00:26:28,799 --> 00:26:32,640
duo sdk

00:26:30,640 --> 00:26:34,480
hugely hugely promote that you install

00:26:32,640 --> 00:26:36,159
and play with it because what you get

00:26:34,480 --> 00:26:38,320
will be two things and then the third

00:26:36,159 --> 00:26:39,360
thing i i recommend you download is also

00:26:38,320 --> 00:26:41,520
the samples

00:26:39,360 --> 00:26:43,440
so first thing you get with the sdk is

00:26:41,520 --> 00:26:44,159
obviously the libraries and apis that

00:26:43,440 --> 00:26:46,080
you can use

00:26:44,159 --> 00:26:47,840
in your app to kind of take advantage of

00:26:46,080 --> 00:26:49,440
these behaviors but the second thing you

00:26:47,840 --> 00:26:51,279
get is that emulator

00:26:49,440 --> 00:26:52,480
and the emulator is kind of unique we're

00:26:51,279 --> 00:26:53,200
going to talk about that in just a

00:26:52,480 --> 00:26:55,039
second

00:26:53,200 --> 00:26:57,360
the third thing you also want to

00:26:55,039 --> 00:26:57,760
download is the sdk samples that'll give

00:26:57,360 --> 00:27:00,480
you

00:26:57,760 --> 00:27:02,159
unique examples code examples for a

00:27:00,480 --> 00:27:03,600
bunch of design patterns as well as

00:27:02,159 --> 00:27:06,480
complete hero apps

00:27:03,600 --> 00:27:06,880
that you can potentially you know uh exp

00:27:06,480 --> 00:27:09,679
like

00:27:06,880 --> 00:27:11,120
reuse the code as is or reverse engineer

00:27:09,679 --> 00:27:12,799
to understand how you could do similar

00:27:11,120 --> 00:27:14,320
things for your app

00:27:12,799 --> 00:27:16,799
so let's start first by looking at the

00:27:14,320 --> 00:27:17,760
emulator this emulator is actually

00:27:16,799 --> 00:27:19,039
pretty cool

00:27:17,760 --> 00:27:20,399
this is actually one of the most

00:27:19,039 --> 00:27:21,039
interesting things because not everyone

00:27:20,399 --> 00:27:24,159
can have

00:27:21,039 --> 00:27:25,919
a duo device right so

00:27:24,159 --> 00:27:27,279
the first thing is if you look at this

00:27:25,919 --> 00:27:28,640
these are the various things you can

00:27:27,279 --> 00:27:30,559
test out on the emulator in the first

00:27:28,640 --> 00:27:34,080
case you see that little

00:27:30,559 --> 00:27:36,320
two screen interface up here

00:27:34,080 --> 00:27:38,320
at the bottom you see this little edge

00:27:36,320 --> 00:27:40,480
like a little bar at the bottom that is

00:27:38,320 --> 00:27:42,159
your span bar if you pick that up

00:27:40,480 --> 00:27:43,600
and bring it to the middle of the screen

00:27:42,159 --> 00:27:46,240
as shown in the second image

00:27:43,600 --> 00:27:48,480
and then let it go your single screen

00:27:46,240 --> 00:27:51,600
app will automatically be

00:27:48,480 --> 00:27:52,240
put into spanned mode and if your app

00:27:51,600 --> 00:27:54,799
had been

00:27:52,240 --> 00:27:55,840
refactored to support this kind of span

00:27:54,799 --> 00:27:57,600
mode by

00:27:55,840 --> 00:28:00,240
having a responsive layout or having

00:27:57,600 --> 00:28:02,320
different fragments and transitions etc

00:28:00,240 --> 00:28:04,000
that's what you will see if not by

00:28:02,320 --> 00:28:05,360
default it's really android's just going

00:28:04,000 --> 00:28:07,200
to resize it for that display

00:28:05,360 --> 00:28:09,279
just like any other device but you can

00:28:07,200 --> 00:28:11,120
simulate it on the emulator and see what

00:28:09,279 --> 00:28:12,880
your default behavior will be

00:28:11,120 --> 00:28:15,360
but here's where it gets interesting

00:28:12,880 --> 00:28:17,760
with the emulator you can also test out

00:28:15,360 --> 00:28:18,880
configuration changes or change events

00:28:17,760 --> 00:28:21,679
for hinges

00:28:18,880 --> 00:28:23,360
so you can either simulate the 16

00:28:21,679 --> 00:28:25,440
discrete posture levels

00:28:23,360 --> 00:28:26,799
to do that they've overridden the

00:28:25,440 --> 00:28:28,480
humidity sensor

00:28:26,799 --> 00:28:30,640
that's available and so you can just

00:28:28,480 --> 00:28:33,919
kind of put in 0 to 16 and that will

00:28:30,640 --> 00:28:35,840
trigger a hinge event or you can go in

00:28:33,919 --> 00:28:37,600
and actually set the hinge angle between

00:28:35,840 --> 00:28:39,919
0 and 36 360.

00:28:37,600 --> 00:28:40,960
so that lets you test out both

00:28:39,919 --> 00:28:43,039
fine-grained

00:28:40,960 --> 00:28:44,080
foldable angles and coarse-grained

00:28:43,039 --> 00:28:45,679
postures

00:28:44,080 --> 00:28:47,039
and last but not least you've got the

00:28:45,679 --> 00:28:48,159
orientation you can always test against

00:28:47,039 --> 00:28:51,440
portrait and landscape

00:28:48,159 --> 00:28:52,960
by default so what kind of help do you

00:28:51,440 --> 00:28:54,640
have to get started

00:28:52,960 --> 00:28:57,120
these are some of the libraries that

00:28:54,640 --> 00:28:58,720
come with the sdk

00:28:57,120 --> 00:29:00,000
again we're not going to be able to go

00:28:58,720 --> 00:29:01,840
into each of these in detail but i want

00:29:00,000 --> 00:29:03,440
to give you a sense of what they contain

00:29:01,840 --> 00:29:06,399
so that you can go when we go to

00:29:03,440 --> 00:29:07,440
um the samples you have a sense of what

00:29:06,399 --> 00:29:09,440
they do

00:29:07,440 --> 00:29:10,720
the first one is the core sdk the core

00:29:09,440 --> 00:29:12,559
sdk is really there

00:29:10,720 --> 00:29:14,320
to provide you helpers to make you

00:29:12,559 --> 00:29:17,200
understand two things

00:29:14,320 --> 00:29:18,720
one you want to ask am i on a surface

00:29:17,200 --> 00:29:20,320
dual so that you can then

00:29:18,720 --> 00:29:21,919
make sure that you can only do things

00:29:20,320 --> 00:29:24,159
that are surface do a specific

00:29:21,919 --> 00:29:26,000
once you have checked that you're on one

00:29:24,159 --> 00:29:28,159
but then you can use the screen helper

00:29:26,000 --> 00:29:29,679
to find out things like display

00:29:28,159 --> 00:29:31,840
information

00:29:29,679 --> 00:29:33,679
where is the scene what is the current

00:29:31,840 --> 00:29:35,120
hinge angle and so on

00:29:33,679 --> 00:29:36,880
so you might be asking yourself wait

00:29:35,120 --> 00:29:38,960
isn't this sound like the jetpack window

00:29:36,880 --> 00:29:41,279
manager api and the short answer is

00:29:38,960 --> 00:29:42,240
the jet map window manager api is a

00:29:41,279 --> 00:29:44,480
consistent

00:29:42,240 --> 00:29:46,159
um api across devices that has been

00:29:44,480 --> 00:29:48,799
launched recently in alpha

00:29:46,159 --> 00:29:50,080
so this existed before and surface door

00:29:48,799 --> 00:29:51,440
team has already started supporting

00:29:50,080 --> 00:29:53,919
jetpack what you get

00:29:51,440 --> 00:29:55,840
is you can use the jetpack apis to get a

00:29:53,919 --> 00:29:57,600
consistent way across families

00:29:55,840 --> 00:29:59,520
and then for the things that that

00:29:57,600 --> 00:30:00,480
doesn't provide for example the 360

00:29:59,520 --> 00:30:02,960
degree

00:30:00,480 --> 00:30:04,240
micro hinges or the 16 discrete levels

00:30:02,960 --> 00:30:05,520
you can still go ahead and use the core

00:30:04,240 --> 00:30:06,960
sdk

00:30:05,520 --> 00:30:08,640
the second thing it does it provides a

00:30:06,960 --> 00:30:10,559
screen manager that you can register

00:30:08,640 --> 00:30:12,000
with to be notified of these changes so

00:30:10,559 --> 00:30:13,520
then you can adapt your apps to those

00:30:12,000 --> 00:30:16,399
changes on the fly

00:30:13,520 --> 00:30:18,080
so that's the core sdk part next the

00:30:16,399 --> 00:30:19,600
bottom navigation view

00:30:18,080 --> 00:30:20,799
so one of the things that you'll see in

00:30:19,600 --> 00:30:22,080
android apps is you have a bottom

00:30:20,799 --> 00:30:22,880
navigation bar where you can have

00:30:22,080 --> 00:30:25,679
different

00:30:22,880 --> 00:30:26,880
elements for navigating your app think

00:30:25,679 --> 00:30:28,960
about it when you put

00:30:26,880 --> 00:30:30,159
an app into span mode that navigation

00:30:28,960 --> 00:30:32,480
bar will now stretch

00:30:30,159 --> 00:30:33,679
to cover that entire area which means

00:30:32,480 --> 00:30:35,600
there might be

00:30:33,679 --> 00:30:37,279
buttons on it that get hidden under the

00:30:35,600 --> 00:30:39,120
scene with the surface do a bottom

00:30:37,279 --> 00:30:40,399
navigation view you can take advantage

00:30:39,120 --> 00:30:42,960
of a helper view

00:30:40,399 --> 00:30:44,640
class that automatically will move those

00:30:42,960 --> 00:30:46,159
elements either to one screen the left

00:30:44,640 --> 00:30:47,760
screen or the right screen

00:30:46,159 --> 00:30:50,399
and make sure that way that they're all

00:30:47,760 --> 00:30:52,000
accessible when you spam

00:30:50,399 --> 00:30:53,600
the fragments handler does something

00:30:52,000 --> 00:30:54,960
slightly different so

00:30:53,600 --> 00:30:56,720
when you think about your application

00:30:54,960 --> 00:30:57,440
you've got two different views right you

00:30:56,720 --> 00:30:58,720
have like in a

00:30:57,440 --> 00:31:00,720
when it's folded you have a single

00:30:58,720 --> 00:31:02,880
screen activity view

00:31:00,720 --> 00:31:04,799
and then when you're unfolding it you

00:31:02,880 --> 00:31:06,399
are going from that single screen to

00:31:04,799 --> 00:31:07,840
some dual screen view

00:31:06,399 --> 00:31:09,440
spanned or perhaps you're doing

00:31:07,840 --> 00:31:11,440
something else right

00:31:09,440 --> 00:31:12,880
and you want that app to transition from

00:31:11,440 --> 00:31:14,240
one to the other from the one screen

00:31:12,880 --> 00:31:16,000
experience to the two screen experience

00:31:14,240 --> 00:31:17,840
and still maintain its state

00:31:16,000 --> 00:31:19,440
you'll probably end up using fragments

00:31:17,840 --> 00:31:20,799
the fragment manager state handler

00:31:19,440 --> 00:31:22,559
provides you a helper

00:31:20,799 --> 00:31:24,159
that manages this for you so you

00:31:22,559 --> 00:31:25,519
effectively can register the kinds of

00:31:24,159 --> 00:31:27,760
fragments you want in the

00:31:25,519 --> 00:31:29,039
start and end of these transitions and

00:31:27,760 --> 00:31:30,640
it takes care of

00:31:29,039 --> 00:31:32,960
you know checking for those events and

00:31:30,640 --> 00:31:35,919
making sure the transition happens

00:31:32,960 --> 00:31:37,919
uniformly last but not least we talk

00:31:35,919 --> 00:31:39,279
layouts so the navigation view was just

00:31:37,919 --> 00:31:40,640
one view element but

00:31:39,279 --> 00:31:42,399
what if you wanted to have a layer a

00:31:40,640 --> 00:31:42,880
container into which you can put your

00:31:42,399 --> 00:31:44,799
views

00:31:42,880 --> 00:31:46,880
to handle it in one screen or two screen

00:31:44,799 --> 00:31:48,399
mode so surface duo has surface duo

00:31:46,880 --> 00:31:49,919
layout there's a frame layout there's

00:31:48,399 --> 00:31:50,559
also a tab layout that i didn't mention

00:31:49,919 --> 00:31:52,640
here

00:31:50,559 --> 00:31:54,480
all of these are default layout views

00:31:52,640 --> 00:31:57,360
that you can use to jump start your

00:31:54,480 --> 00:31:58,559
development that already have a sense of

00:31:57,360 --> 00:32:00,559
registering for these changes and

00:31:58,559 --> 00:32:02,080
knowing how they happen

00:32:00,559 --> 00:32:04,240
how can you use them though and this is

00:32:02,080 --> 00:32:06,559
where design patterns are useful

00:32:04,240 --> 00:32:07,840
so design patterns every one of these

00:32:06,559 --> 00:32:09,360
comes with a code sample so if you

00:32:07,840 --> 00:32:11,200
really want to know how to use them you

00:32:09,360 --> 00:32:12,399
can dive in look at the code sample and

00:32:11,200 --> 00:32:14,320
start from there

00:32:12,399 --> 00:32:16,240
but the purpose of the design pattern is

00:32:14,320 --> 00:32:18,880
to give you this broad kind of

00:32:16,240 --> 00:32:20,320
hey if you have this kind of app or this

00:32:18,880 --> 00:32:22,960
kind of activity

00:32:20,320 --> 00:32:24,559
try using this pattern right and there

00:32:22,960 --> 00:32:25,919
are five that the team has actually

00:32:24,559 --> 00:32:28,960
identified

00:32:25,919 --> 00:32:31,039
by not just trying out different things

00:32:28,960 --> 00:32:32,880
but by talking to a bunch of users and

00:32:31,039 --> 00:32:34,640
developers to figure out

00:32:32,880 --> 00:32:36,080
what makes the most sense we're going to

00:32:34,640 --> 00:32:38,080
go through these five in

00:32:36,080 --> 00:32:39,360
step by step and in each one of them

00:32:38,080 --> 00:32:41,120
we're really going to think a little bit

00:32:39,360 --> 00:32:42,880
about the same strategy

00:32:41,120 --> 00:32:45,279
so in the first case is the extended

00:32:42,880 --> 00:32:47,440
canvas app the extended canvas app

00:32:45,279 --> 00:32:48,880
is really useful if you are if your

00:32:47,440 --> 00:32:50,640
default app experience

00:32:48,880 --> 00:32:52,240
is something that's drawing on the whole

00:32:50,640 --> 00:32:55,120
screen like a canvas right

00:32:52,240 --> 00:32:56,960
so in an extended canvas app your your

00:32:55,120 --> 00:32:59,279
sample up basically when you put it into

00:32:56,960 --> 00:33:00,640
span mode is now spanning across the

00:32:59,279 --> 00:33:03,200
whole region

00:33:00,640 --> 00:33:03,760
and your amount of change should be

00:33:03,200 --> 00:33:04,880
minimal

00:33:03,760 --> 00:33:07,039
it should actually be able to take

00:33:04,880 --> 00:33:08,480
advantage of the real estate your same

00:33:07,039 --> 00:33:10,960
strategy is to do nothing

00:33:08,480 --> 00:33:12,240
the canvas app might be scrolled to kind

00:33:10,960 --> 00:33:14,080
of expose those

00:33:12,240 --> 00:33:16,159
the occluded regions think like a map

00:33:14,080 --> 00:33:16,480
view and the example the sample app that

00:33:16,159 --> 00:33:18,640
you

00:33:16,480 --> 00:33:20,399
have shows you how to do this with the

00:33:18,640 --> 00:33:22,240
frame layout and a map view so you can

00:33:20,399 --> 00:33:24,159
start there

00:33:22,240 --> 00:33:25,919
the second design pattern is list detail

00:33:24,159 --> 00:33:27,600
this is one of the most popular patterns

00:33:25,919 --> 00:33:29,440
when you start android development right

00:33:27,600 --> 00:33:30,720
with list detail view you have basically

00:33:29,440 --> 00:33:32,799
a collection of items

00:33:30,720 --> 00:33:34,240
in a list and when you click on any of

00:33:32,799 --> 00:33:35,919
those items you want to have it launch

00:33:34,240 --> 00:33:38,080
an activity that shows you the details

00:33:35,919 --> 00:33:39,120
of that that particular item right so

00:33:38,080 --> 00:33:40,480
you have two views

00:33:39,120 --> 00:33:42,880
and by default when you're in single

00:33:40,480 --> 00:33:44,000
screen mode the detail view comes on top

00:33:42,880 --> 00:33:46,000
of the list view and then when you

00:33:44,000 --> 00:33:48,399
dismiss it you go back to the list

00:33:46,000 --> 00:33:49,760
in the foldable design pattern you want

00:33:48,399 --> 00:33:51,440
to take advantage of the fact that when

00:33:49,760 --> 00:33:52,480
you span this now you have additional

00:33:51,440 --> 00:33:54,000
real estate

00:33:52,480 --> 00:33:55,919
why not literally then have the list

00:33:54,000 --> 00:33:56,880
view on the left and the details on the

00:33:55,919 --> 00:33:59,360
right

00:33:56,880 --> 00:34:00,720
and this shows the usage of the surface

00:33:59,360 --> 00:34:02,559
duo layout

00:34:00,720 --> 00:34:04,880
which is kind of one of our helper

00:34:02,559 --> 00:34:06,480
layout libraries and the screen helper

00:34:04,880 --> 00:34:07,120
the core library that kind of lets you

00:34:06,480 --> 00:34:08,720
check

00:34:07,120 --> 00:34:10,399
it's a great place for you to start

00:34:08,720 --> 00:34:12,480
figure out how do i know i'm a surface

00:34:10,399 --> 00:34:14,960
duo what is the hinge angle what is this

00:34:12,480 --> 00:34:16,399
am i in dual screen mode and so on the

00:34:14,960 --> 00:34:17,839
same strategy here is really about

00:34:16,399 --> 00:34:19,679
splitting it right you're using the

00:34:17,839 --> 00:34:21,440
scene to clearly tell the user there are

00:34:19,679 --> 00:34:23,919
two different areas that do something

00:34:21,440 --> 00:34:23,919
interesting

00:34:24,000 --> 00:34:27,599
next we're going to talk about two-page

00:34:25,760 --> 00:34:30,240
two-page apps are really

00:34:27,599 --> 00:34:30,879
uh think about anything that's paginated

00:34:30,240 --> 00:34:33,119
data

00:34:30,879 --> 00:34:34,480
you might be making a query to an api

00:34:33,119 --> 00:34:36,399
you might be reading a book

00:34:34,480 --> 00:34:38,240
you might have a large volume of data

00:34:36,399 --> 00:34:40,159
that you're paginating through

00:34:38,240 --> 00:34:41,839
what you want is a book-like experience

00:34:40,159 --> 00:34:44,639
that you can kind of like

00:34:41,839 --> 00:34:46,240
scroll through those pages seamlessly

00:34:44,639 --> 00:34:47,200
and one of the unique things you want us

00:34:46,240 --> 00:34:49,280
to do is take

00:34:47,200 --> 00:34:51,440
or be aware of the fact that as they

00:34:49,280 --> 00:34:53,919
rotate between you know

00:34:51,440 --> 00:34:55,599
landscape and portrait your scrolling

00:34:53,919 --> 00:34:58,160
direction might also change

00:34:55,599 --> 00:34:59,599
so this particular two-page sample and

00:34:58,160 --> 00:35:01,920
this design pattern

00:34:59,599 --> 00:35:03,520
is very useful in your paginated data

00:35:01,920 --> 00:35:05,359
and you want to be able to kind of have

00:35:03,520 --> 00:35:06,880
that familiar page turning experience

00:35:05,359 --> 00:35:08,720
for the user

00:35:06,880 --> 00:35:10,400
the same strategy here is embrace it

00:35:08,720 --> 00:35:11,520
you're literally now showing each page

00:35:10,400 --> 00:35:12,960
on a separate screen

00:35:11,520 --> 00:35:14,720
one of the beauties of this is as this

00:35:12,960 --> 00:35:16,000
page moves to the left side and a new

00:35:14,720 --> 00:35:18,480
page comes in you kind of see the

00:35:16,000 --> 00:35:20,560
continuity right

00:35:18,480 --> 00:35:21,839
the last two patterns are actually to me

00:35:20,560 --> 00:35:23,520
the most interesting

00:35:21,839 --> 00:35:25,200
the first one takes advantage of the

00:35:23,520 --> 00:35:28,000
fact that you have two different screens

00:35:25,200 --> 00:35:28,960
to create two views of the same

00:35:28,000 --> 00:35:30,400
information

00:35:28,960 --> 00:35:33,200
that might be in some sense

00:35:30,400 --> 00:35:34,800
complementary or enhancing to the user

00:35:33,200 --> 00:35:36,560
so in this particular case you might

00:35:34,800 --> 00:35:37,040
show a text version of the data on the

00:35:36,560 --> 00:35:38,720
left

00:35:37,040 --> 00:35:40,480
and a map view on the right and the

00:35:38,720 --> 00:35:42,160
thing about dual view is these two views

00:35:40,480 --> 00:35:43,920
are kind of kept in sync

00:35:42,160 --> 00:35:45,440
right so if i were to pick another item

00:35:43,920 --> 00:35:47,119
on the left the map should reor

00:35:45,440 --> 00:35:49,040
reorganize itself to show you where that

00:35:47,119 --> 00:35:51,920
is and so on

00:35:49,040 --> 00:35:53,359
this is a great way to show coordinated

00:35:51,920 --> 00:35:55,520
content experiences

00:35:53,359 --> 00:35:56,880
think of this as maybe a shopping

00:35:55,520 --> 00:35:58,079
experience where the right side is the

00:35:56,880 --> 00:36:00,480
cart and the left side

00:35:58,079 --> 00:36:02,400
is what i'm actually browsing right now

00:36:00,480 --> 00:36:03,839
or even as i browse it shows me

00:36:02,400 --> 00:36:04,800
discounts and recommendations on the

00:36:03,839 --> 00:36:07,440
right side

00:36:04,800 --> 00:36:08,880
think of ways in which you can surface

00:36:07,440 --> 00:36:10,960
content that's in your app

00:36:08,880 --> 00:36:12,640
that you wouldn't see otherwise as long

00:36:10,960 --> 00:36:14,079
as they're two views this is really

00:36:12,640 --> 00:36:15,440
really in my opinion very good for

00:36:14,079 --> 00:36:17,760
things like accessibility

00:36:15,440 --> 00:36:18,800
what if i could show you a view that is

00:36:17,760 --> 00:36:20,800
kind of like

00:36:18,800 --> 00:36:22,480
text in one side and a visual view on

00:36:20,800 --> 00:36:25,119
the other so it's a

00:36:22,480 --> 00:36:26,880
compare and contrast perspective the

00:36:25,119 --> 00:36:28,560
companion pain which is the last pattern

00:36:26,880 --> 00:36:30,560
we'll talk about on the other hand

00:36:28,560 --> 00:36:31,760
is really about augmenting your content

00:36:30,560 --> 00:36:33,599
experience in the other one if you are

00:36:31,760 --> 00:36:35,680
having synchronized experiences

00:36:33,599 --> 00:36:37,680
here it's like recognizing i have extra

00:36:35,680 --> 00:36:38,640
real estate i have so many other things

00:36:37,680 --> 00:36:40,400
i could have shown

00:36:38,640 --> 00:36:42,720
what if i elevated things that were

00:36:40,400 --> 00:36:43,440
hidden and use the real estate to make

00:36:42,720 --> 00:36:45,280
them visible

00:36:43,440 --> 00:36:46,960
could be a second level menu item it

00:36:45,280 --> 00:36:47,440
could be additional controls as shown

00:36:46,960 --> 00:36:50,240
here

00:36:47,440 --> 00:36:51,040
and so on so the same strategy again

00:36:50,240 --> 00:36:53,520
here is

00:36:51,040 --> 00:36:54,079
you are really enhancing that you are

00:36:53,520 --> 00:36:56,400
embracing

00:36:54,079 --> 00:36:58,000
it and using it to clearly delineate

00:36:56,400 --> 00:37:01,119
additional things that came about

00:36:58,000 --> 00:37:02,400
because you were in span mode so i hope

00:37:01,119 --> 00:37:04,400
those were interesting

00:37:02,400 --> 00:37:06,480
but one of the nice places to start if

00:37:04,400 --> 00:37:07,839
you just want to explore reverse engine

00:37:06,480 --> 00:37:10,240
reverse engineer try it out on the

00:37:07,839 --> 00:37:11,119
emulator etc is to try one of the hero

00:37:10,240 --> 00:37:12,800
apps

00:37:11,119 --> 00:37:14,079
on the left side there's a source editor

00:37:12,800 --> 00:37:15,520
and these are the different things that

00:37:14,079 --> 00:37:17,040
you can explore if you're interested in

00:37:15,520 --> 00:37:18,560
it has a drag and drop pattern

00:37:17,040 --> 00:37:20,400
single screen mode dual screen mode and

00:37:18,560 --> 00:37:22,160
mirrored scrolling the right side you

00:37:20,400 --> 00:37:22,960
have a two note app that shows drag and

00:37:22,160 --> 00:37:24,960
drop

00:37:22,960 --> 00:37:26,480
shows you how to use pen events and uses

00:37:24,960 --> 00:37:28,880
the list detail and extended canvas

00:37:26,480 --> 00:37:30,640
patterns

00:37:28,880 --> 00:37:32,960
and with that i'm kind of at the end of

00:37:30,640 --> 00:37:35,200
my talk almost hopefully i'm on time

00:37:32,960 --> 00:37:36,560
um all of these resources when i put the

00:37:35,200 --> 00:37:39,200
slides up at that link

00:37:36,560 --> 00:37:41,119
below i'll be able to kind of give you

00:37:39,200 --> 00:37:42,640
specific links to each one of them

00:37:41,119 --> 00:37:44,480
the thing that i really want to

00:37:42,640 --> 00:37:46,079
emphasize is download the sdk

00:37:44,480 --> 00:37:48,000
and use the developer blog the surface

00:37:46,079 --> 00:37:48,960
door developer blog has a ton of

00:37:48,000 --> 00:37:50,560
tutorials

00:37:48,960 --> 00:37:52,800
that and there's one coming out almost

00:37:50,560 --> 00:37:54,240
every week that show you how to try out

00:37:52,800 --> 00:37:55,520
these design patterns for various

00:37:54,240 --> 00:37:58,480
front-end frameworks not just

00:37:55,520 --> 00:37:59,200
android but also web and xamarin and

00:37:58,480 --> 00:38:01,440
flutter

00:37:59,200 --> 00:38:04,079
and uh i think they even have a unity

00:38:01,440 --> 00:38:06,320
sample on there

00:38:04,079 --> 00:38:08,240
so with that let me recap what we talked

00:38:06,320 --> 00:38:09,440
about my goal today was really to get

00:38:08,240 --> 00:38:11,440
you excited about this

00:38:09,440 --> 00:38:13,280
new realm of foldable devices and the

00:38:11,440 --> 00:38:14,560
kinds of experiences how can we rethink

00:38:13,280 --> 00:38:18,160
the mobile app experience

00:38:14,560 --> 00:38:19,760
for these devices so first hopefully

00:38:18,160 --> 00:38:22,000
at the end of this talk you understood

00:38:19,760 --> 00:38:24,880
that when you think about dual screen

00:38:22,000 --> 00:38:26,640
and multi-posture postures displays and

00:38:24,880 --> 00:38:28,560
seams that whole area of foldables

00:38:26,640 --> 00:38:30,000
is focused on productivity and

00:38:28,560 --> 00:38:31,920
portability

00:38:30,000 --> 00:38:33,440
when you think about the android user

00:38:31,920 --> 00:38:34,000
experience the like sorry the developer

00:38:33,440 --> 00:38:35,839
experience

00:38:34,000 --> 00:38:37,440
what the real concern is what are the

00:38:35,839 --> 00:38:38,160
different app layouts we can use to be

00:38:37,440 --> 00:38:39,920
responsive

00:38:38,160 --> 00:38:41,839
what are how do we ensure that device

00:38:39,920 --> 00:38:43,040
states are known and there's a there's a

00:38:41,839 --> 00:38:45,359
continuity of

00:38:43,040 --> 00:38:46,800
app experience as we go from one state

00:38:45,359 --> 00:38:49,119
to the other

00:38:46,800 --> 00:38:50,320
and then on the surface duo side what we

00:38:49,119 --> 00:38:51,680
cover are

00:38:50,320 --> 00:38:53,920
how can you test your app for the

00:38:51,680 --> 00:38:55,599
surface duo there's an emulator for that

00:38:53,920 --> 00:38:57,440
what are the libraries and apis that are

00:38:55,599 --> 00:38:59,359
available to help you kind of jump start

00:38:57,440 --> 00:39:02,000
using the surface duos capabilities

00:38:59,359 --> 00:39:03,680
we looked at some examples of code then

00:39:02,000 --> 00:39:05,760
we also looked at the affordances

00:39:03,680 --> 00:39:06,960
what are the 360 degrees of hinge angles

00:39:05,760 --> 00:39:09,440
that go above and beyond what the

00:39:06,960 --> 00:39:12,079
standard consistent apis provide you

00:39:09,440 --> 00:39:14,240
what are the 16 consistent states what

00:39:12,079 --> 00:39:16,320
is new capabilities like spanning

00:39:14,240 --> 00:39:17,839
and we looked at five design patterns

00:39:16,320 --> 00:39:19,440
that can help you jump start

00:39:17,839 --> 00:39:21,680
either refactoring your app or building

00:39:19,440 --> 00:39:22,320
a new one last but not least the links

00:39:21,680 --> 00:39:24,240
at the bottom

00:39:22,320 --> 00:39:26,320
there is a forum you can go to to post

00:39:24,240 --> 00:39:28,240
any questions share your own apps

00:39:26,320 --> 00:39:30,000
or if you get stuck or run into an error

00:39:28,240 --> 00:39:31,520
reach out to me or you can post on those

00:39:30,000 --> 00:39:32,960
forums over there

00:39:31,520 --> 00:39:34,640
and without thank you so much for

00:39:32,960 --> 00:39:37,680
listening i hope i didn't

00:39:34,640 --> 00:39:39,119
exceed my time um i have

00:39:37,680 --> 00:39:40,960
i don't know if i have time i probably

00:39:39,119 --> 00:39:42,320
don't have time for questions but

00:39:40,960 --> 00:39:45,520
i do want to point out that there's

00:39:42,320 --> 00:39:47,200
another akms link to all things open ama

00:39:45,520 --> 00:39:48,960
um the microsoft team has a virtual

00:39:47,200 --> 00:39:50,880
booth at this event and i'll be joining

00:39:48,960 --> 00:39:52,400
them shortly we have a link that link

00:39:50,880 --> 00:39:53,920
there will take you to teams chat

00:39:52,400 --> 00:39:55,040
and i'll be hanging out for the next 30

00:39:53,920 --> 00:39:56,720
minutes if you want to talk about

00:39:55,040 --> 00:40:00,880
anything in the mobile development space

00:39:56,720 --> 00:40:00,880
i'd love to see you there and thank you

00:40:02,400 --> 00:40:05,680
nitia you actually have a few minutes if

00:40:04,400 --> 00:40:08,000
you want to take us

00:40:05,680 --> 00:40:09,440
oh thank you oh my god all right so yes

00:40:08,000 --> 00:40:10,000
if anyone has questions i'd love love

00:40:09,440 --> 00:40:13,359
love to

00:40:10,000 --> 00:40:15,359
take them and if you

00:40:13,359 --> 00:40:17,040
um let me see if i can actually even

00:40:15,359 --> 00:40:20,640
show you what the emulator looks like

00:40:17,040 --> 00:40:22,400
if this is of interest so um

00:40:20,640 --> 00:40:24,400
while i'm waiting for questions that is

00:40:22,400 --> 00:40:25,839
if i can pull up an emulator i might be

00:40:24,400 --> 00:40:29,200
able to

00:40:25,839 --> 00:40:31,200
uh show you what that looks like

00:40:29,200 --> 00:40:34,720
yeah so but i can't see the chat right

00:40:31,200 --> 00:40:34,720
now does anyone have any questions

00:40:35,520 --> 00:40:39,839
i don't see any

00:40:45,200 --> 00:40:50,000
uh let me see if i can run that and show

00:40:47,520 --> 00:40:50,000
that to you

00:40:51,280 --> 00:40:54,560
in the meantime if we have a couple of

00:40:52,800 --> 00:40:56,319
minutes

00:40:54,560 --> 00:40:58,240
all right so you can actually see that

00:40:56,319 --> 00:41:00,800
emulator right now

00:40:58,240 --> 00:41:02,000
uh do you all see that screen marine do

00:41:00,800 --> 00:41:04,400
you see a screen with a

00:41:02,000 --> 00:41:06,079
yeah so that's actually the android

00:41:04,400 --> 00:41:08,240
emulator and you can see that almost

00:41:06,079 --> 00:41:09,520
all the different um code samples are

00:41:08,240 --> 00:41:13,839
available as well

00:41:09,520 --> 00:41:15,760
so let me basically see if i can do um

00:41:13,839 --> 00:41:17,040
this is the source editor hero app so if

00:41:15,760 --> 00:41:18,560
i can pick this up

00:41:17,040 --> 00:41:21,359
sometimes it works and sometimes it's

00:41:18,560 --> 00:41:22,880
really slow so

00:41:21,359 --> 00:41:24,480
this is how you span it so when you're

00:41:22,880 --> 00:41:26,079
using the emulator you can basically

00:41:24,480 --> 00:41:27,680
drag and drop it in the middle and you

00:41:26,079 --> 00:41:28,240
can now see what the span effect looks

00:41:27,680 --> 00:41:29,920
like

00:41:28,240 --> 00:41:31,599
and now you can see that when going from

00:41:29,920 --> 00:41:32,839
single screen to dual screen you

00:41:31,599 --> 00:41:36,319
actually had a different

00:41:32,839 --> 00:41:37,680
experience uh there is also a bunch of

00:41:36,319 --> 00:41:40,000
the different patterns that we talked

00:41:37,680 --> 00:41:43,680
about so here's the extent canvas app

00:41:40,000 --> 00:41:45,359
so you can see that when i span this

00:41:43,680 --> 00:41:46,880
this now allows you to drag and drop

00:41:45,359 --> 00:41:48,880
things so that you can actually

00:41:46,880 --> 00:41:50,720
work below the scene uh you don't have

00:41:48,880 --> 00:41:52,000
to worry about occlusion

00:41:50,720 --> 00:41:54,720
let's see if we can look at the

00:41:52,000 --> 00:41:57,920
companion pain

00:41:54,720 --> 00:42:01,119
so the companion pain app oops

00:41:57,920 --> 00:42:03,040
i need to expand it up there so the

00:42:01,119 --> 00:42:04,640
companion pain app you can see that now

00:42:03,040 --> 00:42:05,839
i can take advantage of the fact that i

00:42:04,640 --> 00:42:08,800
have a single

00:42:05,839 --> 00:42:10,079
um like view of something on the left

00:42:08,800 --> 00:42:10,960
side and i have a different view of it

00:42:10,079 --> 00:42:13,040
on the right side

00:42:10,960 --> 00:42:14,480
that i can take advantage of the list

00:42:13,040 --> 00:42:16,160
detail view on the other hand allows you

00:42:14,480 --> 00:42:16,480
to take advantage of a collection here

00:42:16,160 --> 00:42:19,839
that

00:42:16,480 --> 00:42:21,760
if i were to span it will now

00:42:19,839 --> 00:42:23,119
show me the list and details view side

00:42:21,760 --> 00:42:25,440
by side

00:42:23,119 --> 00:42:27,520
ah okay there we go so now if i switch

00:42:25,440 --> 00:42:30,000
go from item to item i can actually see

00:42:27,520 --> 00:42:31,760
the list and details you side by side

00:42:30,000 --> 00:42:33,839
and what was the last one the two page

00:42:31,760 --> 00:42:35,599
app so this is very much like a kindle

00:42:33,839 --> 00:42:37,040
experience if you have paginated data

00:42:35,599 --> 00:42:38,960
this is something i'm working on

00:42:37,040 --> 00:42:40,240
for a tutorial but you can see that now

00:42:38,960 --> 00:42:42,880
i can actually scroll it

00:42:40,240 --> 00:42:44,079
back and forth and it works out pretty

00:42:42,880 --> 00:42:46,240
uh

00:42:44,079 --> 00:42:47,839
neatly and the example that you were

00:42:46,240 --> 00:42:50,800
seeing was the photo editor

00:42:47,839 --> 00:42:52,400
that is so all of these the samples are

00:42:50,800 --> 00:42:56,000
available for you to kind of play with

00:42:52,400 --> 00:42:58,160
um and in fact if the link that you see

00:42:56,000 --> 00:43:00,240
in that's the sdd hyphen dual hyphen

00:42:58,160 --> 00:43:01,440
screen you will see not only the samples

00:43:00,240 --> 00:43:04,800
links but

00:43:01,440 --> 00:43:07,920
samples for tutorials for the web

00:43:04,800 --> 00:43:07,920
and for flutter as well

00:43:09,040 --> 00:43:12,640
yes the emulator question do we need to

00:43:10,960 --> 00:43:13,280
code an app specifically for surface

00:43:12,640 --> 00:43:16,640
viewer or

00:43:13,280 --> 00:43:18,160
yes oh this is such an easy question um

00:43:16,640 --> 00:43:20,079
yes so remember i was talking to you

00:43:18,160 --> 00:43:21,599
about the screen helper apis and i don't

00:43:20,079 --> 00:43:24,400
know if i can actually drag

00:43:21,599 --> 00:43:26,560
the docs over but the screen helper api

00:43:24,400 --> 00:43:30,000
let me actually show you the

00:43:26,560 --> 00:43:30,000
thing i was talking about here

00:43:30,079 --> 00:43:34,720
so when you look at the the helper

00:43:31,920 --> 00:43:37,839
libraries that we have

00:43:34,720 --> 00:43:38,480
here when you look at let me move that

00:43:37,839 --> 00:43:40,000
over here

00:43:38,480 --> 00:43:41,599
when you look at the sdk libraries that

00:43:40,000 --> 00:43:42,640
we have the screen help and surface do a

00:43:41,599 --> 00:43:44,319
screen manager

00:43:42,640 --> 00:43:46,000
with the screen helper you literally

00:43:44,319 --> 00:43:47,440
have a method you can invoke

00:43:46,000 --> 00:43:49,599
called a surface duo i think it's called

00:43:47,440 --> 00:43:51,760
a surface duo that will return true if

00:43:49,599 --> 00:43:54,000
you are on a device as a surface duo so

00:43:51,760 --> 00:43:55,520
what i tend to do is in my oncreate i

00:43:54,000 --> 00:43:56,880
literally first check if it's surface

00:43:55,520 --> 00:43:59,280
dual and then kind of like

00:43:56,880 --> 00:44:00,400
scope all the surface duo specific calls

00:43:59,280 --> 00:44:02,160
within that

00:44:00,400 --> 00:44:04,000
but you can also register you can like

00:44:02,160 --> 00:44:05,680
do that not just on create but you can

00:44:04,000 --> 00:44:07,359
also register to be notified of those

00:44:05,680 --> 00:44:08,560
events but if and when they change after

00:44:07,359 --> 00:44:10,160
yeah

00:44:08,560 --> 00:44:12,400
do we need to code an app specifically

00:44:10,160 --> 00:44:14,640
for the surface duo or can it run

00:44:12,400 --> 00:44:16,240
to unlock the features so the the thing

00:44:14,640 --> 00:44:18,319
i also want to say is don't make your

00:44:16,240 --> 00:44:20,400
app specific to the surface duo what you

00:44:18,319 --> 00:44:22,319
want to start is really

00:44:20,400 --> 00:44:23,760
look at the generic emulator and make

00:44:22,319 --> 00:44:26,400
sure that your app works on

00:44:23,760 --> 00:44:28,720
a generic foldable device so that you're

00:44:26,400 --> 00:44:30,640
optimizing for that entire family

00:44:28,720 --> 00:44:32,079
then add in the little hook that says am

00:44:30,640 --> 00:44:34,160
i on a surface duo

00:44:32,079 --> 00:44:35,760
and that can allow you to do more

00:44:34,160 --> 00:44:37,760
enhanced things that take care of

00:44:35,760 --> 00:44:39,440
so for example on the generic module you

00:44:37,760 --> 00:44:40,319
might only know about four states for

00:44:39,440 --> 00:44:42,240
the hinge

00:44:40,319 --> 00:44:43,680
on the surface deal you get 16 postures

00:44:42,240 --> 00:44:45,440
and 360 degrees

00:44:43,680 --> 00:44:47,359
so that might allow you to do something

00:44:45,440 --> 00:44:48,800
more but if you're not on a surface do

00:44:47,359 --> 00:44:50,319
you still want to target your foldable

00:44:48,800 --> 00:44:51,760
experience for like i don't know a

00:44:50,319 --> 00:44:54,800
samsung device or other

00:44:51,760 --> 00:44:56,000
that allows you to kind of fall back

00:44:54,800 --> 00:44:58,480
let me see if there are any other

00:44:56,000 --> 00:45:02,839
questions um

00:44:58,480 --> 00:45:04,880
did that help marcelo and thank you for

00:45:02,839 --> 00:45:08,000
asking

00:45:04,880 --> 00:45:09,920
yeah okay and i think that was all there

00:45:08,000 --> 00:45:11,440
was

00:45:09,920 --> 00:45:13,280
i don't know if there were any other

00:45:11,440 --> 00:45:15,200
questions i

00:45:13,280 --> 00:45:17,359
don't think so may i ask a quick

00:45:15,200 --> 00:45:20,160
question sure go for it

00:45:17,359 --> 00:45:20,880
yeah this is amazing this is great i

00:45:20,160 --> 00:45:25,520
love it

00:45:20,880 --> 00:45:27,440
so if do current apps just

00:45:25,520 --> 00:45:30,160
work or i i don't know if they have to

00:45:27,440 --> 00:45:30,480
recompile or rebuild or i'm just curious

00:45:30,160 --> 00:45:33,040
what

00:45:30,480 --> 00:45:34,880
oh you have to so this was an

00:45:33,040 --> 00:45:36,480
entry-level talk but i'm actually going

00:45:34,880 --> 00:45:37,200
to be doing another step-by-step

00:45:36,480 --> 00:45:39,680
tutorial

00:45:37,200 --> 00:45:41,680
in my kind of next round of talks you

00:45:39,680 --> 00:45:43,119
have to set up your android project with

00:45:41,680 --> 00:45:44,640
the right gradle configuration files you

00:45:43,119 --> 00:45:46,800
have to basically make sure that you are

00:45:44,640 --> 00:45:48,720
putting a dependency on the sdk

00:45:46,800 --> 00:45:50,160
and importing all the different modules

00:45:48,720 --> 00:45:52,800
that you need to use

00:45:50,160 --> 00:45:54,400
so you do have to a first so the

00:45:52,800 --> 00:45:55,200
strategy usually is take your existing

00:45:54,400 --> 00:45:57,760
app

00:45:55,200 --> 00:45:59,680
do nothing just run it on the emulator

00:45:57,760 --> 00:46:01,200
do nothing just run it on the emulator

00:45:59,680 --> 00:46:01,920
on the sdk emulator and see what's

00:46:01,200 --> 00:46:03,920
happening

00:46:01,920 --> 00:46:05,520
take notes of where you think oh this

00:46:03,920 --> 00:46:06,560
could be a better experience than what

00:46:05,520 --> 00:46:09,119
i'm seeing

00:46:06,560 --> 00:46:10,640
then include those dependencies include

00:46:09,119 --> 00:46:12,000
the specific libraries you want what i

00:46:10,640 --> 00:46:14,000
advise is start first by

00:46:12,000 --> 00:46:15,040
just adding the core sdk or the window

00:46:14,000 --> 00:46:16,960
manager api

00:46:15,040 --> 00:46:18,720
and just saying i want to know that i'm

00:46:16,960 --> 00:46:20,880
on a foldable and when i'm on a folder

00:46:18,720 --> 00:46:22,800
we'll try one very simple small thing

00:46:20,880 --> 00:46:24,400
one of the simple strategies for seams

00:46:22,800 --> 00:46:26,160
so maybe if you are building a canvas

00:46:24,400 --> 00:46:27,359
app try to put it into scrollable

00:46:26,160 --> 00:46:29,280
frame and see if you can move out from

00:46:27,359 --> 00:46:30,800
under it does that help right

00:46:29,280 --> 00:46:33,760
and then kind of incrementally work your

00:46:30,800 --> 00:46:35,599
way up but yeah you absolutely have to

00:46:33,760 --> 00:46:38,079
you have to rebuild but you also have to

00:46:35,599 --> 00:46:39,920
scope your changes so that you're not

00:46:38,079 --> 00:46:43,839
going to break it on devices that don't

00:46:39,920 --> 00:46:43,839

YouTube URL: https://www.youtube.com/watch?v=vZRPNuubJ8Q


