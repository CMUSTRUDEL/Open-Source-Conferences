Title: All Things Open 2017 - Amy Chen - From 0 to Kubernetes - Lightning Talks
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:00,740 --> 00:00:07,470
hey y'all my name is Amy I am a software

00:00:04,710 --> 00:00:09,240
engineer at Rancher Labs and I actually

00:00:07,470 --> 00:00:10,530
started there in March and learned about

00:00:09,240 --> 00:00:12,509
this like crazy anything called

00:00:10,530 --> 00:00:14,429
containers and kubernetes someone

00:00:12,509 --> 00:00:16,800
attempt to talk to you about it within

00:00:14,429 --> 00:00:19,020
five minutes so obviously I can't go

00:00:16,800 --> 00:00:20,939
into too much sectional detail but I'll

00:00:19,020 --> 00:00:25,199
try to give you a good start and go to

00:00:20,939 --> 00:00:27,449
overview overall so the idea is is that

00:00:25,199 --> 00:00:30,630
you want to be able to abstract away

00:00:27,449 --> 00:00:32,969
your infrastructure so that application

00:00:30,630 --> 00:00:35,190
developers can just release their code

00:00:32,969 --> 00:00:36,870
into the cloud whatever that means right

00:00:35,190 --> 00:00:40,379
it's sort of this like really vague term

00:00:36,870 --> 00:00:43,920
that just means a bunch of servers so at

00:00:40,379 --> 00:00:45,480
the core of kubernetes is containers and

00:00:43,920 --> 00:00:47,969
the way like a describe containers are

00:00:45,480 --> 00:00:50,460
that they're a baby computer inside

00:00:47,969 --> 00:00:53,190
another computer the baby computer being

00:00:50,460 --> 00:00:56,039
your container and the other computer

00:00:53,190 --> 00:00:58,410
being the server so you may be wondering

00:00:56,039 --> 00:01:01,170
why would I want to do this right so the

00:00:58,410 --> 00:01:04,680
idea is that it provides great resource

00:01:01,170 --> 00:01:07,770
isolation it also allows you to utilize

00:01:04,680 --> 00:01:09,810
your server more efficiently and the

00:01:07,770 --> 00:01:12,799
main thing is that it abstract away your

00:01:09,810 --> 00:01:15,990
infrastructure which is more clear here

00:01:12,799 --> 00:01:18,990
so now what we're going to do is pretend

00:01:15,990 --> 00:01:21,720
I'm an application developer so the main

00:01:18,990 --> 00:01:25,500
idea is I as an infrastructure software

00:01:21,720 --> 00:01:28,470
engineer do not need to trust you as a

00:01:25,500 --> 00:01:32,420
developer so we want to build in failure

00:01:28,470 --> 00:01:35,189
into our infrastructure sort of

00:01:32,420 --> 00:01:36,990
Orchestrator right so what we're doing

00:01:35,189 --> 00:01:40,500
now is we're putting an application

00:01:36,990 --> 00:01:42,659
inside a baby computer so on your on

00:01:40,500 --> 00:01:44,479
your left there is sort of a pictorial

00:01:42,659 --> 00:01:47,100
representation of what's happening so

00:01:44,479 --> 00:01:49,530
locally you're developing right you have

00:01:47,100 --> 00:01:51,479
all these sort of versions and operating

00:01:49,530 --> 00:01:52,890
system differences that you don't want

00:01:51,479 --> 00:01:55,229
to deal with when you are developing

00:01:52,890 --> 00:01:57,360
into production so here I have alpine

00:01:55,229 --> 00:01:59,219
three point six point two Python three

00:01:57,360 --> 00:02:02,009
point seven and then I have a bunch of

00:01:59,219 --> 00:02:05,430
setup scripts and what I'm doing is I'm

00:02:02,009 --> 00:02:07,920
copying my application binary into my

00:02:05,430 --> 00:02:09,750
container and I'm exposing port 80 to

00:02:07,920 --> 00:02:13,270
expose my baby computer to the entire

00:02:09,750 --> 00:02:15,070
worlds right you can't just depend on

00:02:13,270 --> 00:02:16,480
just like sort of leaving your baby

00:02:15,070 --> 00:02:18,760
computer and just like plopping into a

00:02:16,480 --> 00:02:20,020
server right there's your baby computer

00:02:18,760 --> 00:02:22,360
is going through sort of this

00:02:20,020 --> 00:02:24,190
existential crisis it's asking questions

00:02:22,360 --> 00:02:25,960
like where should I live so this is

00:02:24,190 --> 00:02:28,090
under the realm of scheduling how do I

00:02:25,960 --> 00:02:30,730
talk to other can pick other compute

00:02:28,090 --> 00:02:32,830
other containers sorry that's under the

00:02:30,730 --> 00:02:35,260
realm of networking how do I talk to the

00:02:32,830 --> 00:02:37,300
world so how do I route traffic to my

00:02:35,260 --> 00:02:39,040
baby computer what happens if I get sick

00:02:37,300 --> 00:02:39,760
right and this is where communities

00:02:39,040 --> 00:02:41,710
comes in

00:02:39,760 --> 00:02:43,840
so kubernetes I like to think of this as

00:02:41,710 --> 00:02:45,880
sort of this sort of like organizational

00:02:43,840 --> 00:02:47,650
abstraction on top of containers all

00:02:45,880 --> 00:02:50,410
it's doing is its organizing baby

00:02:47,650 --> 00:02:52,480
computers the first abstraction is we

00:02:50,410 --> 00:02:56,170
have a pod and what this is a scheduling

00:02:52,480 --> 00:02:57,940
unit and all this means is that all so a

00:02:56,170 --> 00:03:00,850
pod consists of one or more containers

00:02:57,940 --> 00:03:02,710
and all the pods they are scheduled on

00:03:00,850 --> 00:03:04,180
to one node or one server and they're

00:03:02,710 --> 00:03:08,020
always coupled together so they depend

00:03:04,180 --> 00:03:11,910
on each other and one pod is reached

00:03:08,020 --> 00:03:15,910
through an IP address a deployment is

00:03:11,910 --> 00:03:18,340
one or more pods and the idea is you

00:03:15,910 --> 00:03:21,520
have this idea of actual versus desired

00:03:18,340 --> 00:03:23,980
state where let's say have a deployment

00:03:21,520 --> 00:03:26,530
of three what I want to be able to do is

00:03:23,980 --> 00:03:29,140
to always make sure that three pods are

00:03:26,530 --> 00:03:32,200
up and running then I have something

00:03:29,140 --> 00:03:34,030
called services where let's say you want

00:03:32,200 --> 00:03:36,160
to group together deployments right or

00:03:34,030 --> 00:03:40,840
pods and you want to be always be able

00:03:36,160 --> 00:03:42,820
to reach them via an address within your

00:03:40,840 --> 00:03:45,010
cluster so we can have something called

00:03:42,820 --> 00:03:46,510
like service a or service B or front-end

00:03:45,010 --> 00:03:48,340
and back-end and they'll always be able

00:03:46,510 --> 00:03:52,150
to reach reach each other within the

00:03:48,340 --> 00:03:54,040
cluster and the final component of

00:03:52,150 --> 00:03:56,140
communities is called an ingress

00:03:54,040 --> 00:03:59,500
controller and so what this is is that

00:03:56,140 --> 00:04:01,930
external traffic in from the internet is

00:03:59,500 --> 00:04:04,420
able to reach to your baby computer

00:04:01,930 --> 00:04:06,940
within the cluster so you'll have some

00:04:04,420 --> 00:04:09,910
sort of endpoint like foo it'll reach

00:04:06,940 --> 00:04:12,310
service a through the endpoint foo

00:04:09,910 --> 00:04:14,470
service a will then route traffic to

00:04:12,310 --> 00:04:19,840
your deployments or pods within that

00:04:14,470 --> 00:04:21,230
service and now we have a bunch of evil

00:04:19,840 --> 00:04:25,700
files that

00:04:21,230 --> 00:04:27,980
basically just is the photo beforehand

00:04:25,700 --> 00:04:30,110
so we have a deployment we have a

00:04:27,980 --> 00:04:32,390
service and we have an ingress

00:04:30,110 --> 00:04:35,060
controller and I hope that you have a

00:04:32,390 --> 00:04:37,100
good foundational basis now for what

00:04:35,060 --> 00:04:40,010
communities is once again it's just

00:04:37,100 --> 00:04:43,010
basically a way to organize all of your

00:04:40,010 --> 00:04:43,940
baby computers together so thank you for

00:04:43,010 --> 00:04:45,620
so much for your time

00:04:43,940 --> 00:04:47,880
and allowing me to tell you about

00:04:45,620 --> 00:04:53,750
communities within five minutes

00:04:47,880 --> 00:04:53,750

YouTube URL: https://www.youtube.com/watch?v=GgQzhZxhMvM


