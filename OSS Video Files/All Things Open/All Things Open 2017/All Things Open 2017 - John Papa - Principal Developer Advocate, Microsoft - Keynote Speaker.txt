Title: All Things Open 2017 - John Papa - Principal Developer Advocate, Microsoft - Keynote Speaker
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:00,709 --> 00:00:06,870
good morning nothing like making

00:00:04,830 --> 00:00:08,280
somebody get a bunch of developers to

00:00:06,870 --> 00:00:09,900
stand up and move around and get closer

00:00:08,280 --> 00:00:13,040
to their friendly developers next to

00:00:09,900 --> 00:00:16,680
them right gel make some new friends

00:00:13,040 --> 00:00:18,990
cool so I'm too much you all but I have

00:00:16,680 --> 00:00:20,070
a lot of vices I really do and I'd like

00:00:18,990 --> 00:00:22,680
to share them with people

00:00:20,070 --> 00:00:24,930
maybe it's TMI one of my biggest vices

00:00:22,680 --> 00:00:26,939
is coffee I go to bed at night thinking

00:00:24,930 --> 00:00:28,109
about that cup of coffee that's gonna

00:00:26,939 --> 00:00:30,869
come to me in the morning

00:00:28,109 --> 00:00:32,279
and I think about how I can code with

00:00:30,869 --> 00:00:34,860
that coffee because that's my other vice

00:00:32,279 --> 00:00:36,360
I love to write code so it might be

00:00:34,860 --> 00:00:38,129
something that you guys like to do too

00:00:36,360 --> 00:00:40,770
and when I drink that cup of coffee it's

00:00:38,129 --> 00:00:43,260
the best cup of coffee ever and I love

00:00:40,770 --> 00:00:45,629
it and it might be something like this

00:00:43,260 --> 00:00:47,280
my relationship with my coffee more

00:00:45,629 --> 00:00:49,860
important than my laptop but when that

00:00:47,280 --> 00:00:51,930
cup of coffee is gone how do you feel

00:00:49,860 --> 00:00:54,030
you're just waiting for that next cup of

00:00:51,930 --> 00:00:56,129
coffee to be out there this is kind of

00:00:54,030 --> 00:01:00,120
like our experience with the open web

00:00:56,129 --> 00:01:01,800
we love what's there today we don't know

00:01:00,120 --> 00:01:03,719
what's coming tomorrow but soon as the

00:01:01,800 --> 00:01:05,939
thing that's gone for today we start

00:01:03,719 --> 00:01:08,640
looking towards tomorrow so how do we

00:01:05,939 --> 00:01:11,640
know what things to be looking for how

00:01:08,640 --> 00:01:13,380
do we know what to embrace so I want to

00:01:11,640 --> 00:01:15,240
share a couple of things that I ways I

00:01:13,380 --> 00:01:17,430
look at things five different tips on

00:01:15,240 --> 00:01:22,229
how I deal with the open web and what it

00:01:17,430 --> 00:01:24,780
kind of looks like for me in 2018 first

00:01:22,229 --> 00:01:26,790
browser compatible languages many of you

00:01:24,780 --> 00:01:27,869
may remember the days and we used to try

00:01:26,790 --> 00:01:30,450
to figure out how to write JavaScript

00:01:27,869 --> 00:01:31,860
that would work across Netscape some of

00:01:30,450 --> 00:01:33,869
you may not know what that word means

00:01:31,860 --> 00:01:35,340
anymore

00:01:33,869 --> 00:01:37,590
different kinds of browsers are out

00:01:35,340 --> 00:01:42,229
there even ie does every no I use go on

00:01:37,590 --> 00:01:45,509
effectively it's now called edge okay

00:01:42,229 --> 00:01:47,310
much better try to make different

00:01:45,509 --> 00:01:49,020
languages work across browsers was a big

00:01:47,310 --> 00:01:50,909
problem for a long time then something

00:01:49,020 --> 00:01:53,189
called jQuery came out which was amazing

00:01:50,909 --> 00:01:55,079
to help solve this problem but these

00:01:53,189 --> 00:01:57,270
problems don't go away we still have a

00:01:55,079 --> 00:01:59,579
problem so what happened with JavaScript

00:01:57,270 --> 00:02:01,649
a couple of years ago is it was taking

00:01:59,579 --> 00:02:03,479
seven years or so for new versions to

00:02:01,649 --> 00:02:05,250
come out well the web moves faster right

00:02:03,479 --> 00:02:07,229
things that take seven years in

00:02:05,250 --> 00:02:09,060
technology don't stick around so the

00:02:07,229 --> 00:02:11,520
committee decided to Oh a head and

00:02:09,060 --> 00:02:13,530
create versions of JavaScript every year

00:02:11,520 --> 00:02:15,420
so to support these different browsers

00:02:13,530 --> 00:02:16,860
we can look up what version of

00:02:15,420 --> 00:02:19,650
JavaScript works in each browser on

00:02:16,860 --> 00:02:21,780
sites like can I use comm but sometimes

00:02:19,650 --> 00:02:23,850
it can be a rolled the dice and maybe we

00:02:21,780 --> 00:02:25,740
want to look at how do we support the

00:02:23,850 --> 00:02:29,550
version of JavaScript we need in our

00:02:25,740 --> 00:02:31,860
browsers is it es5 2015 or did many of

00:02:29,550 --> 00:02:34,230
you may know that 2017 came out a couple

00:02:31,860 --> 00:02:37,110
of months ago as well we can now do

00:02:34,230 --> 00:02:39,750
things like async await inside the

00:02:37,110 --> 00:02:41,220
browsers and we can check these out but

00:02:39,750 --> 00:02:42,810
what do we do about the next features

00:02:41,220 --> 00:02:44,489
coming and the next features how do we

00:02:42,810 --> 00:02:47,070
make sure we keep up with things without

00:02:44,489 --> 00:02:49,800
letting our apps get old this is where

00:02:47,070 --> 00:02:52,620
we can use things that allow us to

00:02:49,800 --> 00:02:55,590
target the browsers that we need without

00:02:52,620 --> 00:02:57,360
worrying about the details typescript

00:02:55,590 --> 00:02:59,510
and babel are two open source projects

00:02:57,360 --> 00:03:01,620
that really make this super possible and

00:02:59,510 --> 00:03:03,739
picking either one of those it's

00:03:01,620 --> 00:03:05,880
whatever he kind of works for you I

00:03:03,739 --> 00:03:07,440
happen to use both of them for different

00:03:05,880 --> 00:03:09,239
kinds of projects they're really great

00:03:07,440 --> 00:03:11,430
because they allow you to write the code

00:03:09,239 --> 00:03:14,670
using the latest leading-edge features

00:03:11,430 --> 00:03:16,470
and you can compile down to any version

00:03:14,670 --> 00:03:19,410
that you need you can even go back to ES

00:03:16,470 --> 00:03:20,910
3 if you really want it to so why is

00:03:19,410 --> 00:03:23,070
this such an important thing because

00:03:20,910 --> 00:03:24,209
there's low risk and high reward how

00:03:23,070 --> 00:03:26,610
many times if somebody told you you

00:03:24,209 --> 00:03:27,989
could start using a technology and if

00:03:26,610 --> 00:03:30,299
you didn't like it in a week or two or a

00:03:27,989 --> 00:03:33,209
month or two you could completely get

00:03:30,299 --> 00:03:36,150
off at technology within seconds it's

00:03:33,209 --> 00:03:37,860
really almost unheard of with typescript

00:03:36,150 --> 00:03:39,269
and Babel you can literally just say you

00:03:37,860 --> 00:03:41,190
know what I'm tired of these things let

00:03:39,269 --> 00:03:42,930
me compile back to es 5 and call it a

00:03:41,190 --> 00:03:44,850
day and I'll throw out the typescript

00:03:42,930 --> 00:03:47,640
I've got the JavaScript because at the

00:03:44,850 --> 00:03:49,500
end of the day it's just JavaScript so

00:03:47,640 --> 00:03:51,090
I'm looking forward to using the new

00:03:49,500 --> 00:03:52,950
features of the web as they keep coming

00:03:51,090 --> 00:03:55,829
out on a yearly basis by keeping up with

00:03:52,950 --> 00:03:57,720
these two tools the second thing I want

00:03:55,829 --> 00:03:59,310
to talk about code editors I've worked

00:03:57,720 --> 00:04:00,570
at a lot of large corporations and one

00:03:59,310 --> 00:04:02,730
of the questions I get asked a lot is

00:04:00,570 --> 00:04:04,859
how do we standardize on a single code

00:04:02,730 --> 00:04:07,470
editor and that usually doesn't come

00:04:04,859 --> 00:04:08,760
from a developer that usually comes from

00:04:07,470 --> 00:04:11,070
somebody who's like you know we want to

00:04:08,760 --> 00:04:12,900
buy one tool we're tired of having 50 of

00:04:11,070 --> 00:04:14,609
them well I'm here to tell you that

00:04:12,900 --> 00:04:16,620
that's it's not an importance as you

00:04:14,609 --> 00:04:18,600
make the better decision make is how do

00:04:16,620 --> 00:04:20,519
we support all the code editors that our

00:04:18,600 --> 00:04:22,109
developers want to use and the open

00:04:20,519 --> 00:04:24,900
source well we have great selections

00:04:22,109 --> 00:04:27,010
we've got vs code we've got Adam we have

00:04:24,900 --> 00:04:29,680
stack blitz awesome newer one

00:04:27,010 --> 00:04:33,180
market totally online based and we still

00:04:29,680 --> 00:04:37,870
vim for those who like the type a lot

00:04:33,180 --> 00:04:39,460
Emacs to so vs code pretty cool it looks

00:04:37,870 --> 00:04:41,260
a lot like admin they're very similar a

00:04:39,460 --> 00:04:43,450
lot of ways this is my favorite editor I

00:04:41,260 --> 00:04:44,860
like to use this there's tons of open

00:04:43,450 --> 00:04:46,690
source extensions for it

00:04:44,860 --> 00:04:48,400
I hope you give it a try there's also

00:04:46,690 --> 00:04:50,560
one called stack blitz which came out

00:04:48,400 --> 00:04:52,720
about a month or two ago it's completely

00:04:50,560 --> 00:04:54,250
online based and you can create react or

00:04:52,720 --> 00:04:56,920
angular or plain old JavaScript apps

00:04:54,250 --> 00:04:59,980
right in the browser it's really

00:04:56,920 --> 00:05:01,660
powerful give it a try that's the power

00:04:59,980 --> 00:05:04,180
of open source you can bring your own

00:05:01,660 --> 00:05:06,700
editor this was a B but that was last

00:05:04,180 --> 00:05:10,540
night when I was busy drinking but so

00:05:06,700 --> 00:05:12,310
bring your own editor not be third thing

00:05:10,540 --> 00:05:14,110
is JavaScript frameworks I hear this all

00:05:12,310 --> 00:05:15,820
the time since I'm into angular and I

00:05:14,110 --> 00:05:18,250
used to knockout and backbone I've done

00:05:15,820 --> 00:05:22,840
a little react and view people are like

00:05:18,250 --> 00:05:24,490
John who's winning we didn't what there

00:05:22,840 --> 00:05:26,530
is no winning with the frameworks

00:05:24,490 --> 00:05:28,150
if a framework is winning that means we

00:05:26,530 --> 00:05:29,740
only have one if we only have one we

00:05:28,150 --> 00:05:31,990
don't have creativity we don't have

00:05:29,740 --> 00:05:33,490
motivation we don't competition we don't

00:05:31,990 --> 00:05:36,610
have a lot of the great things the open

00:05:33,490 --> 00:05:39,400
web gives us what we do have right now

00:05:36,610 --> 00:05:41,020
as decisions to make and picking the one

00:05:39,400 --> 00:05:44,500
that you want out of the leaders the

00:05:41,020 --> 00:05:46,030
pack is the way to go and if you don't

00:05:44,500 --> 00:05:46,510
like what it's doing contribute back to

00:05:46,030 --> 00:05:48,730
it

00:05:46,510 --> 00:05:50,110
so who are those leaders today the

00:05:48,730 --> 00:05:53,650
things like the angular's of the world

00:05:50,110 --> 00:05:55,660
or the reacts or view who's the new kid

00:05:53,650 --> 00:05:57,910
on the block who's quite amazing as well

00:05:55,660 --> 00:05:59,920
all three of these are great options all

00:05:57,910 --> 00:06:03,280
open source great communities and rich

00:05:59,920 --> 00:06:05,020
ecosystems and guess what the right

00:06:03,280 --> 00:06:07,960
thing here is we're all going to benefit

00:06:05,020 --> 00:06:10,210
from this diverse ecosystem by having

00:06:07,960 --> 00:06:12,760
all these they're all helping each other

00:06:10,210 --> 00:06:14,320
become better I work with the Google

00:06:12,760 --> 00:06:16,270
team quite a bit with the angular

00:06:14,320 --> 00:06:17,980
project they actually work with the

00:06:16,270 --> 00:06:20,530
folks at react they look at their code

00:06:17,980 --> 00:06:22,030
they share ideas I just came over from

00:06:20,530 --> 00:06:23,350
Microsoft it just came back from a

00:06:22,030 --> 00:06:25,630
conversation between the typescript team

00:06:23,350 --> 00:06:27,760
in the Google angular team these teams

00:06:25,630 --> 00:06:28,720
talk to each other if you said this five

00:06:27,760 --> 00:06:30,430
years ago you be like wait a minute

00:06:28,720 --> 00:06:32,670
Microsoft Google and Facebook are

00:06:30,430 --> 00:06:37,120
talking to each other what's going on

00:06:32,670 --> 00:06:40,350
it's the open web so once we have our

00:06:37,120 --> 00:06:42,300
choice we've got moving forward some

00:06:40,350 --> 00:06:43,800
things changing in the web the

00:06:42,300 --> 00:06:45,660
ecosystems are getting richer and richer

00:06:43,800 --> 00:06:47,670
and richer there's more and more code

00:06:45,660 --> 00:06:49,710
out there I worked on a project two

00:06:47,670 --> 00:06:52,260
years ago and that project was a

00:06:49,710 --> 00:06:54,240
massively large external facing website

00:06:52,260 --> 00:06:55,980
that generated in the hundreds of

00:06:54,240 --> 00:06:59,040
millions if not almost billions of

00:06:55,980 --> 00:07:01,470
dollars this project needed to load

00:06:59,040 --> 00:07:04,530
within a second and a half everything

00:07:01,470 --> 00:07:05,730
over that was gonna cost money with

00:07:04,530 --> 00:07:07,230
these kinds of projects when you're

00:07:05,730 --> 00:07:08,910
early on in the proper development you

00:07:07,230 --> 00:07:10,140
might see that it's not loading in a

00:07:08,910 --> 00:07:13,950
second and a half when you start coding

00:07:10,140 --> 00:07:16,230
right we started off we had a 21 Meg

00:07:13,950 --> 00:07:19,770
file basically being loaded into the

00:07:16,230 --> 00:07:22,440
browser with JavaScript CSS images so on

00:07:19,770 --> 00:07:24,630
and so forth that's not going to be

00:07:22,440 --> 00:07:25,860
acceptable moving forward right when we

00:07:24,630 --> 00:07:27,420
were done with that project we got it

00:07:25,860 --> 00:07:29,820
down within a second and a half how do

00:07:27,420 --> 00:07:31,230
we get there a lot of the optimization

00:07:29,820 --> 00:07:34,320
techniques are really important on the

00:07:31,230 --> 00:07:35,760
web we need speed because if we don't

00:07:34,320 --> 00:07:37,740
have speed and don't drive amazing

00:07:35,760 --> 00:07:40,830
experiences people won't use the

00:07:37,740 --> 00:07:41,940
software so it's got to be small we got

00:07:40,830 --> 00:07:44,190
to figure how we get that code to be

00:07:41,940 --> 00:07:46,230
small in our applications we also want

00:07:44,190 --> 00:07:48,840
it to be fast not necessarily exactly

00:07:46,230 --> 00:07:49,980
the same we want to parse it fast when

00:07:48,840 --> 00:07:51,690
to make sure we're doing as much on the

00:07:49,980 --> 00:07:53,970
server as we can before it gets to that

00:07:51,690 --> 00:07:56,880
browser we want to do background

00:07:53,970 --> 00:07:58,770
processes where possible let things load

00:07:56,880 --> 00:08:00,630
that the user needs to interact with but

00:07:58,770 --> 00:08:02,100
do things in the background to get

00:08:00,630 --> 00:08:04,950
things ready for their next interaction

00:08:02,100 --> 00:08:07,680
and then also make sure it's just in

00:08:04,950 --> 00:08:10,290
time if you can predictively interpret

00:08:07,680 --> 00:08:12,570
where users are going to go you can make

00:08:10,290 --> 00:08:16,170
your application much more interactive

00:08:12,570 --> 00:08:16,740
in a much better experience so how do we

00:08:16,170 --> 00:08:18,930
do this

00:08:16,740 --> 00:08:20,670
things like angular and react have tools

00:08:18,930 --> 00:08:22,740
that do things like lazy loading and

00:08:20,670 --> 00:08:25,800
code splitting right out of the box they

00:08:22,740 --> 00:08:27,390
use tools like web pack to do this so we

00:08:25,800 --> 00:08:28,890
can do as lazy loading and say look I'm

00:08:27,390 --> 00:08:31,680
going to go and load the dashboard of my

00:08:28,890 --> 00:08:33,750
application up but in the background I'm

00:08:31,680 --> 00:08:36,060
going to say don't go get the next

00:08:33,750 --> 00:08:38,669
section of code until the user actually

00:08:36,060 --> 00:08:40,349
clicks a certain button to go there or I

00:08:38,669 --> 00:08:41,729
can prefetch it if I know they're

00:08:40,349 --> 00:08:44,219
eventually going to get there anyway

00:08:41,729 --> 00:08:46,110
thus the user doesn't know that that

00:08:44,219 --> 00:08:49,770
code wasn't loaded unload and then have

00:08:46,110 --> 00:08:52,470
to wait for it in the end that time to

00:08:49,770 --> 00:08:53,820
first enter activity is key and some of

00:08:52,470 --> 00:08:55,890
the tools we can do to do this like

00:08:53,820 --> 00:08:58,140
angular weird type ng build and we can

00:08:55,890 --> 00:09:00,510
spit out some stats here one of the ways

00:08:58,140 --> 00:09:03,780
to optimize code is figure out what's in

00:09:00,510 --> 00:09:05,640
our code we build it small using tooling

00:09:03,780 --> 00:09:06,990
and then we can spit out our stats and

00:09:05,640 --> 00:09:10,500
use tools like the web pack bundle

00:09:06,990 --> 00:09:12,030
analyzer fantastic tool there's a couple

00:09:10,500 --> 00:09:13,230
of method that do this it'll look at the

00:09:12,030 --> 00:09:16,280
stats of the code inside your

00:09:13,230 --> 00:09:18,390
application why is that valuable though

00:09:16,280 --> 00:09:20,970
have you ever written code and then

00:09:18,390 --> 00:09:23,730
later on you deleted some code and you

00:09:20,970 --> 00:09:25,560
thought it was all gone but some of it

00:09:23,730 --> 00:09:27,900
still lingers right you've got these

00:09:25,560 --> 00:09:29,960
ghost artifacts in your code that you

00:09:27,900 --> 00:09:32,010
didn't realize still stuck around so

00:09:29,960 --> 00:09:33,900
with the tool like this you can actually

00:09:32,010 --> 00:09:36,300
look at the insides of your code and say

00:09:33,900 --> 00:09:39,000
okay this is how big each of my sections

00:09:36,300 --> 00:09:41,730
of code are this is what's inside of

00:09:39,000 --> 00:09:43,470
them and when I look for in these kind

00:09:41,730 --> 00:09:45,690
of grass if you see a bunch of tiny

00:09:43,470 --> 00:09:47,490
little rectangles anywhere in these

00:09:45,690 --> 00:09:49,050
graphs when you look at your code that's

00:09:47,490 --> 00:09:51,170
usually a good sign that you're probably

00:09:49,050 --> 00:09:54,270
pulling in more code than you're using a

00:09:51,170 --> 00:09:57,360
great example this is with angular I use

00:09:54,270 --> 00:09:59,670
a library called rxjs and I use all a

00:09:57,360 --> 00:10:01,410
bunch of operators in there I use

00:09:59,670 --> 00:10:04,140
anywhere from 10 to 15 in any normal

00:10:01,410 --> 00:10:05,340
application well I've worked with people

00:10:04,140 --> 00:10:07,230
who are like you know what I don't

00:10:05,340 --> 00:10:09,450
really want to import 10 to 15 different

00:10:07,230 --> 00:10:11,640
statements in my code I'm just gonna

00:10:09,450 --> 00:10:14,910
import all rxjs how big could it

00:10:11,640 --> 00:10:17,670
possibly be I'm weird of using 15

00:10:14,910 --> 00:10:19,830
operators maybe there's 20 right no

00:10:17,670 --> 00:10:21,060
there's over a hundred of them so by

00:10:19,830 --> 00:10:23,850
pulling in just that one line of code

00:10:21,060 --> 00:10:26,100
the app still works it's less code to

00:10:23,850 --> 00:10:28,140
write we look at it in a chart like this

00:10:26,100 --> 00:10:30,500
and we see oh my gosh I've just pulled

00:10:28,140 --> 00:10:33,840
in 3 Meg of code or something like that

00:10:30,500 --> 00:10:35,880
unzip so we use tools like this to

00:10:33,840 --> 00:10:39,120
identify problem spots hot spots in our

00:10:35,880 --> 00:10:40,680
code and we can also do things like tree

00:10:39,120 --> 00:10:42,330
shaking tree shaking is probably the

00:10:40,680 --> 00:10:43,160
best visualization I've seen in coding

00:10:42,330 --> 00:10:45,420
lately

00:10:43,160 --> 00:10:48,360
imagine you're taking your code and your

00:10:45,420 --> 00:10:52,050
code is a tree inside the trees a bunch

00:10:48,360 --> 00:10:53,580
of apples when you shake that tree the

00:10:52,050 --> 00:10:56,310
apples that fall out are the ones that

00:10:53,580 --> 00:10:58,260
probably weren't so good anyway the ones

00:10:56,310 --> 00:11:00,450
you're not using tree shaking is a

00:10:58,260 --> 00:11:02,220
process of taking a code shaking it and

00:11:00,450 --> 00:11:05,100
getting rid of anything that's not being

00:11:02,220 --> 00:11:06,300
used getting rid of dead code this is

00:11:05,100 --> 00:11:07,529
something that used to be only the

00:11:06,300 --> 00:11:09,149
smartest people in the world

00:11:07,529 --> 00:11:11,279
two years ago now it's something that's

00:11:09,149 --> 00:11:13,170
built into a lot of tooling and it's

00:11:11,279 --> 00:11:15,540
going to become an expectation in 2018

00:11:13,170 --> 00:11:18,300
by using the optimization the bundling

00:11:15,540 --> 00:11:20,550
techniques server-side rendering by

00:11:18,300 --> 00:11:23,069
using tree shaking a dead code removal

00:11:20,550 --> 00:11:25,680
we're gonna shrink down our apps and

00:11:23,069 --> 00:11:27,629
make them much faster and this is gonna

00:11:25,680 --> 00:11:29,240
create great experiences but it doesn't

00:11:27,629 --> 00:11:31,499
stop there

00:11:29,240 --> 00:11:33,839
great experiences are really what this

00:11:31,499 --> 00:11:35,670
is all about we don't write code just

00:11:33,839 --> 00:11:37,139
for the sake of seeing the code we write

00:11:35,670 --> 00:11:39,360
it for the users who use our

00:11:37,139 --> 00:11:42,629
applications if that experience is

00:11:39,360 --> 00:11:43,949
awesome they will continue to use it one

00:11:42,629 --> 00:11:46,529
way we can make these experiences

00:11:43,949 --> 00:11:48,480
awesome is to think about what else can

00:11:46,529 --> 00:11:51,559
we do besides optimizing code with

00:11:48,480 --> 00:11:54,720
tooling well there's a new technology

00:11:51,559 --> 00:11:57,660
called progressive web applications and

00:11:54,720 --> 00:12:00,300
progressive applications allow us to

00:11:57,660 --> 00:12:03,779
determine how do we make the time till

00:12:00,300 --> 00:12:05,610
the app is first usable shorter maybe

00:12:03,779 --> 00:12:08,249
the site really does take three seconds

00:12:05,610 --> 00:12:12,059
to load but can we get it so that first

00:12:08,249 --> 00:12:14,790
interactivity is ready within a couple

00:12:12,059 --> 00:12:17,490
hundred milliseconds if we can do that

00:12:14,790 --> 00:12:21,230
and is visually ready for the users to

00:12:17,490 --> 00:12:24,240
you is an interactive that's a big win

00:12:21,230 --> 00:12:26,100
so there's a concept that the polymer

00:12:24,240 --> 00:12:27,959
project coined it's up on the chrome

00:12:26,100 --> 00:12:30,029
project I love it's called purple

00:12:27,959 --> 00:12:32,490
because I call purple there's no valves

00:12:30,029 --> 00:12:33,839
here and what purple stands for is a

00:12:32,490 --> 00:12:35,819
concept that kind of helps you think

00:12:33,839 --> 00:12:38,689
about how to make your experiences

00:12:35,819 --> 00:12:41,100
better rendering and getting

00:12:38,689 --> 00:12:42,839
interactivity as soon as you can you

00:12:41,100 --> 00:12:43,800
want to make sure you get something up

00:12:42,839 --> 00:12:44,459
and running for the user as soon as

00:12:43,800 --> 00:12:46,829
possible

00:12:44,459 --> 00:12:49,050
makes sense right push the critical

00:12:46,829 --> 00:12:51,809
resources the browser right onload soon

00:12:49,050 --> 00:12:53,490
as we get loaded in the application make

00:12:51,809 --> 00:12:55,980
sure everything they need to run the app

00:12:53,490 --> 00:12:58,860
is there anything that's like they might

00:12:55,980 --> 00:13:02,370
do or it's yagna you ain't gonna need it

00:12:58,860 --> 00:13:05,399
push that off precache everything else

00:13:02,370 --> 00:13:06,990
with a serviceworker serviceworker can

00:13:05,399 --> 00:13:08,970
work in the background for us to go get

00:13:06,990 --> 00:13:12,300
the rest of the code while the users

00:13:08,970 --> 00:13:13,620
interacting and then lazily load the

00:13:12,300 --> 00:13:16,620
rest of the app as the user navigates

00:13:13,620 --> 00:13:18,179
through the site if we do this sites

00:13:16,620 --> 00:13:19,980
that could take three seconds to load

00:13:18,179 --> 00:13:21,030
are now up and running on hundreds of

00:13:19,980 --> 00:13:22,710
milliseconds

00:13:21,030 --> 00:13:24,990
so people can use the app in the

00:13:22,710 --> 00:13:27,750
background we load the rest this is

00:13:24,990 --> 00:13:29,460
going to make it easier and faster in a

00:13:27,750 --> 00:13:33,030
much better experience and it can even

00:13:29,460 --> 00:13:35,400
run offline so this is all made possible

00:13:33,030 --> 00:13:36,840
through PW A's progressive web apps you

00:13:35,400 --> 00:13:38,790
can learn more about that from this link

00:13:36,840 --> 00:13:42,660
here there's some great articles up on

00:13:38,790 --> 00:13:44,340
the chrome websites this is really all

00:13:42,660 --> 00:13:46,320
about reducing that time to first

00:13:44,340 --> 00:13:47,460
interactivity if we do that people will

00:13:46,320 --> 00:13:49,560
use it more and we'll get much more

00:13:47,460 --> 00:13:50,880
lower bounce rates and all these

00:13:49,560 --> 00:13:53,010
concepts that coming out of the

00:13:50,880 --> 00:13:55,980
open-source communities there's tools

00:13:53,010 --> 00:13:57,990
you can do and use to create PW A's

00:13:55,980 --> 00:14:00,840
like work box it's a wonderful tool in

00:13:57,990 --> 00:14:02,100
the open source constantly evolving get

00:14:00,840 --> 00:14:04,230
up there and you can help contribute to

00:14:02,100 --> 00:14:06,630
that like I am it's a fantastic

00:14:04,230 --> 00:14:07,440
fantastic tool to help make it easier to

00:14:06,630 --> 00:14:09,930
use P lwas

00:14:07,440 --> 00:14:11,070
react and angular are both contributing

00:14:09,930 --> 00:14:12,630
to their projects with their

00:14:11,070 --> 00:14:17,100
command-line interfaces to make it

00:14:12,630 --> 00:14:19,680
easier to use - in the last piece of

00:14:17,100 --> 00:14:21,720
open source next year is something

00:14:19,680 --> 00:14:25,200
that's really dear to me and that's

00:14:21,720 --> 00:14:27,360
having empathy in open source we have a

00:14:25,200 --> 00:14:29,520
tendency in the open source world to use

00:14:27,360 --> 00:14:30,480
github issues Twitter or social media

00:14:29,520 --> 00:14:33,420
and everything else to interact with

00:14:30,480 --> 00:14:35,070
each other and we can't see everybody we

00:14:33,420 --> 00:14:36,210
all may all be on the same github repos

00:14:35,070 --> 00:14:38,580
but I can't see you when you're there

00:14:36,210 --> 00:14:40,589
you can't see me one of the things

00:14:38,580 --> 00:14:43,800
that's really important is to get

00:14:40,589 --> 00:14:45,630
involved think about when you've

00:14:43,800 --> 00:14:47,460
encountered an open source project and

00:14:45,630 --> 00:14:49,770
you've had a problem when you've had a

00:14:47,460 --> 00:14:51,540
problem did you go to the github issues

00:14:49,770 --> 00:14:53,760
and report it did you try to create a

00:14:51,540 --> 00:14:56,700
reproduction of it did you try to create

00:14:53,760 --> 00:14:58,860
a pull request did you engage with the

00:14:56,700 --> 00:15:01,320
owners and authors of that repo most the

00:14:58,860 --> 00:15:03,420
time most of the time those authors will

00:15:01,320 --> 00:15:05,220
want to engage back with you and think

00:15:03,420 --> 00:15:06,570
about what this person's doing most of

00:15:05,220 --> 00:15:08,220
the time these authors are doing it on

00:15:06,570 --> 00:15:10,860
their own spare time at night while

00:15:08,220 --> 00:15:13,560
drinking their favorite vice coffee so

00:15:10,860 --> 00:15:15,030
they can stay up having empathy to make

00:15:13,560 --> 00:15:16,800
sure that we all understand how would I

00:15:15,030 --> 00:15:19,200
feel if somebody else came to my project

00:15:16,800 --> 00:15:20,790
instead this thing isn't working well

00:15:19,200 --> 00:15:22,080
maybe if they followed it up with here's

00:15:20,790 --> 00:15:24,210
what I expected to happen here's what

00:15:22,080 --> 00:15:26,240
happened here's some code will this help

00:15:24,210 --> 00:15:28,980
you with this problem can I pitch in

00:15:26,240 --> 00:15:31,830
when we work together we create much

00:15:28,980 --> 00:15:33,540
better things thinking about who's on

00:15:31,830 --> 00:15:34,410
the under end of that is a big piece of

00:15:33,540 --> 00:15:36,029
being the open source

00:15:34,410 --> 00:15:37,829
community and it's the thing I love the

00:15:36,029 --> 00:15:40,019
most about not being in a closed

00:15:37,829 --> 00:15:42,560
environment because we have the power in

00:15:40,019 --> 00:15:45,149
this room in this world on this Internet

00:15:42,560 --> 00:15:49,470
to help make a open-source better and

00:15:45,149 --> 00:15:50,759
create the future so of all this these

00:15:49,470 --> 00:15:54,060
are different things that we can look

00:15:50,759 --> 00:15:56,009
forward to in 2018 I'd like to leave you

00:15:54,060 --> 00:15:57,389
this thought when you're writing your

00:15:56,009 --> 00:16:00,019
next bit of code when you're deploying

00:15:57,389 --> 00:16:02,910
your next docker image to the cloud

00:16:00,019 --> 00:16:05,339
think about that we build technology for

00:16:02,910 --> 00:16:07,560
humans not for the sake of building

00:16:05,339 --> 00:16:10,139
technology there's always a human at the

00:16:07,560 --> 00:16:11,279
other other side of this I want to thank

00:16:10,139 --> 00:16:13,910
you very much and hope you have a great

00:16:11,279 --> 00:16:13,910
rest of the conference

00:16:14,180 --> 00:16:18,600

YouTube URL: https://www.youtube.com/watch?v=AbfgpPfRwJg


