Title: All Things Open 2017 - Kelsey Hightower - Building Microservices with Go, gRPC, and Kubernetes
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:00,650 --> 00:00:06,060
maybe people can fill in closer so we're

00:00:04,290 --> 00:00:11,280
gonna do a choose-your-own-adventure

00:00:06,060 --> 00:00:12,780
if this talk sucks see your fault you

00:00:11,280 --> 00:00:16,139
leave here and you say it sucks it's

00:00:12,780 --> 00:00:18,000
only because you made it so the way

00:00:16,139 --> 00:00:20,449
we're going to do this is I'm going to

00:00:18,000 --> 00:00:23,279
set up my environment the best I can and

00:00:20,449 --> 00:00:25,019
then I'm going to show a few things that

00:00:23,279 --> 00:00:26,609
I think will help with creating

00:00:25,019 --> 00:00:28,680
microservices from the infrastructure

00:00:26,609 --> 00:00:30,480
perspective there's lots of things you

00:00:28,680 --> 00:00:31,529
can do from the application perspective

00:00:30,480 --> 00:00:34,469
but I think there's a big disconnect

00:00:31,529 --> 00:00:36,120
between your application and what

00:00:34,469 --> 00:00:38,280
kubernetes does some people have this

00:00:36,120 --> 00:00:39,960
belief that if you put your app in

00:00:38,280 --> 00:00:43,890
containers or kubernetes your app is

00:00:39,960 --> 00:00:46,980
going to get better yeah you're laughing

00:00:43,890 --> 00:00:49,200
you should laugh because that is so far

00:00:46,980 --> 00:00:51,629
from the truth now there are some

00:00:49,200 --> 00:00:54,149
contracts that kubernetes provides that

00:00:51,629 --> 00:00:56,219
your app may not be doing that will make

00:00:54,149 --> 00:00:58,350
things slightly better so I'm gonna

00:00:56,219 --> 00:01:00,780
start by setting up my environment I'm

00:00:58,350 --> 00:01:02,910
going to show some basics of what's

00:01:00,780 --> 00:01:04,949
going to be in that environment and then

00:01:02,910 --> 00:01:07,770
we're going to have some people tell me

00:01:04,949 --> 00:01:09,720
what they need to know so what's on my

00:01:07,770 --> 00:01:12,689
table so far is things like volts from

00:01:09,720 --> 00:01:14,490
hacci core for secrets management we'll

00:01:12,689 --> 00:01:17,100
also be talking a little bit about sto

00:01:14,490 --> 00:01:20,220
in the context of kubernetes and how you

00:01:17,100 --> 00:01:22,380
should manage your stuff okay so what

00:01:20,220 --> 00:01:24,990
I'm going to do and just silly me I'm

00:01:22,380 --> 00:01:27,840
going to bootstrap my small dev vault

00:01:24,990 --> 00:01:29,820
cluster live and then connect it to

00:01:27,840 --> 00:01:31,500
integrate with kubernetes and we'll talk

00:01:29,820 --> 00:01:33,810
about how your app can actually use it

00:01:31,500 --> 00:01:35,670
to talk to the database okay and then

00:01:33,810 --> 00:01:37,439
with is to you we're gonna talk about

00:01:35,670 --> 00:01:39,479
some of the policy enforcement there's

00:01:37,439 --> 00:01:41,670
parts in kubernetes that are missing and

00:01:39,479 --> 00:01:44,100
they're filled by things like is Tia

00:01:41,670 --> 00:01:47,040
okay so I'm gonna see what that fits in

00:01:44,100 --> 00:01:48,930
but you have to actually do something so

00:01:47,040 --> 00:01:51,240
if you plan to just check your email you

00:01:48,930 --> 00:01:52,890
can continue to do that but if you have

00:01:51,240 --> 00:01:54,899
real questions we're at a conference

00:01:52,890 --> 00:01:56,250
with real people so you can ask a

00:01:54,899 --> 00:01:57,469
question and I'm gonna try to answer

00:01:56,250 --> 00:02:00,030
your question live

00:01:57,469 --> 00:02:02,399
keep it short though we don't need like

00:02:00,030 --> 00:02:03,990
your background or where you're from you

00:02:02,399 --> 00:02:05,580
can do that afterwards is that does that

00:02:03,990 --> 00:02:11,860
sound like

00:02:05,580 --> 00:02:14,739
all right if it sucks all right so we're

00:02:11,860 --> 00:02:16,900
gonna we're gonna start with this the

00:02:14,739 --> 00:02:18,760
reason that ku Bernays becomes important

00:02:16,900 --> 00:02:20,380
for people is not because well a lot of

00:02:18,760 --> 00:02:22,989
people are using it as a DevOps tool

00:02:20,380 --> 00:02:24,670
meaning people that currently have

00:02:22,989 --> 00:02:25,870
automation fewer in the keynote we

00:02:24,670 --> 00:02:28,300
talked about automation versus

00:02:25,870 --> 00:02:29,980
orchestration there's a contract missing

00:02:28,300 --> 00:02:32,440
okay so if you're developer and you

00:02:29,980 --> 00:02:34,930
build apps it's really hard to go to a

00:02:32,440 --> 00:02:36,100
team and say deploy this app and hope

00:02:34,930 --> 00:02:38,950
that they get it right and then you do

00:02:36,100 --> 00:02:40,989
this joint debugging okay knowing that's

00:02:38,950 --> 00:02:43,420
DevOps okay group therapy for system

00:02:40,989 --> 00:02:45,550
minutes this is when we we debug

00:02:43,420 --> 00:02:47,019
together is some of this unnecessary

00:02:45,550 --> 00:02:49,360
okay so we have the containers of

00:02:47,019 --> 00:02:51,130
contract and then you also now are

00:02:49,360 --> 00:02:52,690
tasked with having that app deploy

00:02:51,130 --> 00:02:54,040
multiple environments so don't worry

00:02:52,690 --> 00:02:55,810
about that fact that I'm using Google

00:02:54,040 --> 00:02:57,519
Cloud let's focus on the fact that I'm

00:02:55,810 --> 00:02:59,019
using kubernetes the api's are all the

00:02:57,519 --> 00:03:00,850
same so you can run this in your data

00:02:59,019 --> 00:03:02,290
center you can use mini cube on your

00:03:00,850 --> 00:03:04,299
laptop but now that we have these

00:03:02,290 --> 00:03:06,400
kubernetes endpoints we're going to talk

00:03:04,299 --> 00:03:09,130
about how do you run your app across all

00:03:06,400 --> 00:03:11,560
of these different clusters anyone here

00:03:09,130 --> 00:03:13,540
just be very honest have the ability to

00:03:11,560 --> 00:03:15,430
deploy their app anywhere any country

00:03:13,540 --> 00:03:23,920
any provider super easy

00:03:15,430 --> 00:03:25,030
oh there's one person come on you better

00:03:23,920 --> 00:03:27,730
hope you're not lying cuz your

00:03:25,030 --> 00:03:30,970
co-workers alike we actually don't where

00:03:27,730 --> 00:03:33,160
do you work did you quit come on come on

00:03:30,970 --> 00:03:36,400
up here just jump on the stage if you

00:03:33,160 --> 00:03:39,150
fall we have no insurance all right tell

00:03:36,400 --> 00:03:39,150
people about your environment

00:03:44,990 --> 00:03:53,810
[Applause]

00:03:50,150 --> 00:03:57,150
it's good it's called bored all right

00:03:53,810 --> 00:03:58,830
it's a it's magic you just like tell it

00:03:57,150 --> 00:04:00,750
I want to run in this started the

00:03:58,830 --> 00:04:08,820
country and it magically does it it's

00:04:00,750 --> 00:04:14,310
kind of like but better but it's getting

00:04:08,820 --> 00:04:20,280
there and stuff like doesn't have that

00:04:14,310 --> 00:04:22,890
kind of have that stuff internally I

00:04:20,280 --> 00:04:25,860
wasn't ready for this you did a good job

00:04:22,890 --> 00:04:29,580
so are you a developer we're going to

00:04:25,860 --> 00:04:30,960
see her good I like that so what is your

00:04:29,580 --> 00:04:34,910
debt workflow when you build something

00:04:30,960 --> 00:04:34,910
and it gets to ploy wherever you want

00:04:37,340 --> 00:04:46,910
because the process

00:04:48,150 --> 00:05:21,820
okay so we have like much like

00:05:20,320 --> 00:05:24,040
communities actually looks very very

00:05:21,820 --> 00:05:26,170
similar right you you kick it off and it

00:05:24,040 --> 00:05:28,270
rolls out and it does like a Bluegreen

00:05:26,170 --> 00:05:31,110
deployment and if anything goes wrong we

00:05:28,270 --> 00:05:34,210
get alerts and it like stops in Halton

00:05:31,110 --> 00:05:37,050
but but it's mostly just automatic right

00:05:34,210 --> 00:05:51,900
we just write our code we committed

00:05:37,050 --> 00:05:51,900
tests or build tests or so yes at Google

00:05:53,910 --> 00:05:59,080
if you're if you're looking ops and you

00:05:57,220 --> 00:06:01,630
think about bringing in one of these

00:05:59,080 --> 00:06:03,730
tools no one actually cares about the

00:06:01,630 --> 00:06:04,660
tool directly like if you ever used

00:06:03,730 --> 00:06:06,250
Cooper neighs I'm going to show you a

00:06:04,660 --> 00:06:08,620
little bit here like you say I'm gonna

00:06:06,250 --> 00:06:10,870
teach my developers kubernetes it's

00:06:08,620 --> 00:06:13,030
actually not the best idea your

00:06:10,870 --> 00:06:14,440
developer wants to write apps they want

00:06:13,030 --> 00:06:16,690
to build apps that can then be deployed

00:06:14,440 --> 00:06:18,970
anywhere in the world so he works on GCR

00:06:16,690 --> 00:06:21,610
rule container registry that's a global

00:06:18,970 --> 00:06:23,530
service okay when you write container

00:06:21,610 --> 00:06:25,180
images and you store them there they can

00:06:23,530 --> 00:06:27,220
go anywhere in the globe mainly because

00:06:25,180 --> 00:06:29,560
the system underneath takes care of all

00:06:27,220 --> 00:06:32,200
of that the ability to these Canaria

00:06:29,560 --> 00:06:33,460
rollouts I think is very powerful and

00:06:32,200 --> 00:06:34,900
this is one of the things that Corinth

00:06:33,460 --> 00:06:36,940
gives you so when people say why

00:06:34,900 --> 00:06:39,850
kubernetes you want this ability to

00:06:36,940 --> 00:06:41,830
trust a platform not necessarily tribal

00:06:39,850 --> 00:06:45,630
knowledge so when I was assistant man

00:06:41,830 --> 00:06:47,130
you knew who to ask to do a certain test

00:06:45,630 --> 00:06:49,380
because that person would probably get

00:06:47,130 --> 00:06:50,460
it right depends on who do it you may

00:06:49,380 --> 00:06:51,690
not be right like some people shaking

00:06:50,460 --> 00:06:56,340
their hay like hell yeah

00:06:51,690 --> 00:06:57,690
never ask Bob is not to hurt right so we

00:06:56,340 --> 00:06:59,190
want this environment that we can

00:06:57,690 --> 00:07:00,630
actually have a common target so that

00:06:59,190 --> 00:07:02,940
way we can just focus on building things

00:07:00,630 --> 00:07:04,620
so from the micro services standpoint a

00:07:02,940 --> 00:07:07,260
lot of the hard parts about micro

00:07:04,620 --> 00:07:09,270
services we don't necessarily solve in

00:07:07,260 --> 00:07:11,040
the kubernetes layer people say

00:07:09,270 --> 00:07:13,380
kubernetes is like borg internally

00:07:11,040 --> 00:07:15,210
unfortunately at Google there's a lot

00:07:13,380 --> 00:07:17,310
more missing pieces that secure Bernays

00:07:15,210 --> 00:07:20,780
that actually make all this work we need

00:07:17,310 --> 00:07:23,400
to have things like metrics HTTP traces

00:07:20,780 --> 00:07:25,350
centralized logging how do you roll

00:07:23,400 --> 00:07:27,930
forward how do you roll back how do you

00:07:25,350 --> 00:07:29,910
actually do canary patterns containers

00:07:27,930 --> 00:07:31,950
and kubernetes do not give you that out

00:07:29,910 --> 00:07:34,260
of the box we need more pieces

00:07:31,950 --> 00:07:35,760
what about secrets management how many

00:07:34,260 --> 00:07:39,330
people manage the secrets with configure

00:07:35,760 --> 00:07:42,120
management today keep your hand up if

00:07:39,330 --> 00:07:42,750
you care about security so there's a

00:07:42,120 --> 00:07:44,220
disconnect

00:07:42,750 --> 00:07:46,680
wait a minute for all the other people

00:07:44,220 --> 00:07:48,570
that didn't raise their hand how to help

00:07:46,680 --> 00:07:56,430
are you getting sick us to your apps

00:07:48,570 --> 00:07:59,150
someone yell it out anyone that says

00:07:56,430 --> 00:08:02,330
that they are copying files to servers I

00:07:59,150 --> 00:08:05,220
promise you I worked in financial I know

00:08:02,330 --> 00:08:07,320
if someone can't clearly tell you

00:08:05,220 --> 00:08:09,509
because honestly just you telling me how

00:08:07,320 --> 00:08:11,789
you put a secret to a server ain't a

00:08:09,509 --> 00:08:13,830
secret right that is not where the

00:08:11,789 --> 00:08:15,150
secret sauce is you should be able to

00:08:13,830 --> 00:08:16,680
audit this you should be able to tell

00:08:15,150 --> 00:08:18,449
anyone this is exactly how that gets to

00:08:16,680 --> 00:08:20,910
that server and I know exactly what's in

00:08:18,449 --> 00:08:22,590
there so today we're gonna get to this

00:08:20,910 --> 00:08:24,300
in a minute this is all about knowledge

00:08:22,590 --> 00:08:25,800
for like these micro serves everyone

00:08:24,300 --> 00:08:28,590
says I want to do micro services and

00:08:25,800 --> 00:08:30,150
there wasn't enough hands around

00:08:28,590 --> 00:08:32,399
automating even the fact of how you

00:08:30,150 --> 00:08:35,130
access other services how you dealing

00:08:32,399 --> 00:08:36,599
with authentication like I think people

00:08:35,130 --> 00:08:38,729
are jumping the gun a little bit here

00:08:36,599 --> 00:08:41,370
alright so we're gonna talk about using

00:08:38,729 --> 00:08:43,229
something like vault to actually manage

00:08:41,370 --> 00:08:44,940
some of this identity stuff that we have

00:08:43,229 --> 00:08:46,860
then the reason why we have to introduce

00:08:44,940 --> 00:08:48,540
vault here is that these micro services

00:08:46,860 --> 00:08:50,550
that you're going to build this off

00:08:48,540 --> 00:08:52,620
service this front end this back-end

00:08:50,550 --> 00:08:54,870
that does god knows what this thing that

00:08:52,620 --> 00:08:57,570
sends email how do you identify them

00:08:54,870 --> 00:08:59,010
once you identify them how you decide

00:08:57,570 --> 00:09:02,220
which ones get the toss of the database

00:08:59,010 --> 00:09:04,589
right now people copy files to servers

00:09:02,220 --> 00:09:06,390
if you can read the file you get

00:09:04,589 --> 00:09:09,570
database credentials out and you get to

00:09:06,390 --> 00:09:11,970
talk to the database the same very

00:09:09,570 --> 00:09:13,800
secure I'm gonna slide this show a

00:09:11,970 --> 00:09:17,190
slightly better way okay so we've got

00:09:13,800 --> 00:09:19,170
these clusters and we're going to try to

00:09:17,190 --> 00:09:20,550
do now is deploy some apps but we need

00:09:19,170 --> 00:09:22,529
some some low-level things here so

00:09:20,550 --> 00:09:23,910
having this we at least have centralized

00:09:22,529 --> 00:09:26,070
logging crew Bernays will give you this

00:09:23,910 --> 00:09:27,750
out of the box we are going to have some

00:09:26,070 --> 00:09:30,180
basics about how to keep our app running

00:09:27,750 --> 00:09:31,560
so this is great we talked about earlier

00:09:30,180 --> 00:09:33,450
in the keynote about the price of

00:09:31,560 --> 00:09:35,190
admission being the container image do

00:09:33,450 --> 00:09:38,120
we all agree that the container image is

00:09:35,190 --> 00:09:42,120
a good thing to have who isn't sold yet

00:09:38,120 --> 00:09:44,339
be honest who wasn't sold everyone

00:09:42,120 --> 00:09:46,890
thinks content is a good idea well yeah

00:09:44,339 --> 00:09:48,209
this is a you are a gold anyone that

00:09:46,890 --> 00:09:49,980
doesn't think this is a good idea I need

00:09:48,209 --> 00:09:52,980
it huh

00:09:49,980 --> 00:09:54,480
your bosses think it's a good idea they

00:09:52,980 --> 00:09:56,640
don't think it's a good idea

00:09:54,480 --> 00:10:02,280
there's no one here that doesn't think

00:09:56,640 --> 00:10:07,260
containers are they don't know what you

00:10:02,280 --> 00:10:08,580
all drop the kool-aid I actually don't

00:10:07,260 --> 00:10:13,170
think containers are actually that great

00:10:08,580 --> 00:10:19,320
I think they're actually silly why why

00:10:13,170 --> 00:10:23,510
do we have them let's look at it why do

00:10:19,320 --> 00:10:23,510
we have it we have it for this reason

00:10:24,590 --> 00:10:28,950
you guys ready to see this docker file

00:10:27,740 --> 00:10:31,800
okay

00:10:28,950 --> 00:10:39,660
who's a Python developer partly your

00:10:31,800 --> 00:10:42,950
fault so don't worry the license header

00:10:39,660 --> 00:10:45,810
dominates this source tree okay

00:10:42,950 --> 00:10:47,280
very simple I walk through this this is

00:10:45,810 --> 00:10:49,290
the micro-services crowd this is what

00:10:47,280 --> 00:10:50,820
they believe is simplicity some of us

00:10:49,290 --> 00:10:53,010
are moving to micro-services because we

00:10:50,820 --> 00:10:55,410
believe that the code bases are gonna be

00:10:53,010 --> 00:10:58,890
easier to deal with okay so you have

00:10:55,410 --> 00:11:04,030
this from class what version of flask is

00:10:58,890 --> 00:11:12,100
that what's that

00:11:04,030 --> 00:11:23,530
okay and that's a simple act oh this is

00:11:12,100 --> 00:11:24,700
funny too doesn't work so and we spent a

00:11:23,530 --> 00:11:26,800
whole industry trying to fix this

00:11:24,700 --> 00:11:29,680
problem one would be let's make another

00:11:26,800 --> 00:11:32,650
package manager' every language needs

00:11:29,680 --> 00:11:35,430
their own so that helps what version of

00:11:32,650 --> 00:11:35,430
python do we need

00:11:37,290 --> 00:11:48,129
no one uses Python 3 they should just

00:11:41,499 --> 00:11:52,809
start over so then we try to fix this

00:11:48,129 --> 00:11:55,689
problem here's how we fix it we're going

00:11:52,809 --> 00:11:59,559
to gonna bring in a whole operating

00:11:55,689 --> 00:12:07,059
system one gig they were going to

00:11:59,559 --> 00:12:10,360
install the Internet then we're gonna

00:12:07,059 --> 00:12:12,040
copy in the requirements that txt and

00:12:10,360 --> 00:12:19,689
then we're gonna copy in art

00:12:12,040 --> 00:12:21,550
half-an-hour app is a whopping total 826

00:12:19,689 --> 00:12:23,889
bytes of source code great so this

00:12:21,550 --> 00:12:29,079
container is gonna be about 2.7

00:12:23,889 --> 00:12:32,350
terabytes and total size and we did this

00:12:29,079 --> 00:12:34,720
because a group of people agreed the

00:12:32,350 --> 00:12:38,139
dynamic linking was better than static

00:12:34,720 --> 00:12:40,089
linking I mean I traced back the mailing

00:12:38,139 --> 00:12:41,889
list a long way and they're like people

00:12:40,089 --> 00:12:46,179
you can't fit the whole app on a floppy

00:12:41,889 --> 00:12:47,679
disk there's 2017 I promise you you will

00:12:46,179 --> 00:12:49,889
never have to distribute the app you're

00:12:47,679 --> 00:12:56,920
building on a floppy disk

00:12:49,889 --> 00:13:00,160
if so Red Hat is happening right now so

00:12:56,920 --> 00:13:01,779
in my world is different so in my world

00:13:00,160 --> 00:13:04,149
and I think language runtimes will have

00:13:01,779 --> 00:13:05,589
to change and this is what the

00:13:04,149 --> 00:13:07,569
micro-services community should be

00:13:05,589 --> 00:13:16,899
talking about we're gonna get to why in

00:13:07,569 --> 00:13:21,360
a moment so i'ma go developer let me go

00:13:16,899 --> 00:13:21,360
developers are here make noise

00:13:23,970 --> 00:13:30,110
going back to write some JavaScript in a

00:13:25,980 --> 00:13:32,579
minute now this wrong with it

00:13:30,110 --> 00:13:35,399
imagine if we all could build like these

00:13:32,579 --> 00:13:37,439
statically linked go binaries right well

00:13:35,399 --> 00:13:39,389
you just have this one artifact where

00:13:37,439 --> 00:13:42,209
all your dependencies no Lib C

00:13:39,389 --> 00:13:43,920
requirement all you need is a kernel if

00:13:42,209 --> 00:13:45,300
every language worked that way do you

00:13:43,920 --> 00:13:48,000
think we would actually have container

00:13:45,300 --> 00:13:50,069
images who think we would have container

00:13:48,000 --> 00:13:57,740
images of everything including the

00:13:50,069 --> 00:13:57,740
runtime will statically we do

00:14:11,230 --> 00:14:15,430
so everything you're saying right now is

00:14:13,060 --> 00:14:18,430
this tribal knowledge right install this

00:14:15,430 --> 00:14:21,150
base OS install this Python version

00:14:18,430 --> 00:14:23,170
instead honestly give me this binary

00:14:21,150 --> 00:14:25,540
they always knows what to do with the

00:14:23,170 --> 00:14:27,760
elf binary just give me that we're done

00:14:25,540 --> 00:14:30,070
like all languages if you can give me an

00:14:27,760 --> 00:14:32,350
elf binary to execute we're done so we

00:14:30,070 --> 00:14:35,170
went down this path of creating a bigger

00:14:32,350 --> 00:14:36,250
statically linked thing a tarball with

00:14:35,170 --> 00:14:36,880
all your stuff in it and a root

00:14:36,250 --> 00:14:38,410
filesystem

00:14:36,880 --> 00:14:40,960
so we made life a little bit more

00:14:38,410 --> 00:14:42,700
complicated okay so moving on the

00:14:40,960 --> 00:14:44,980
container image is necessary evil

00:14:42,700 --> 00:14:46,720
because static linking is bad so we're

00:14:44,980 --> 00:14:48,730
going to do static linking with tarballs

00:14:46,720 --> 00:14:52,180
instead okay so we move the discussion

00:14:48,730 --> 00:14:54,220
on the next thing is you have your app

00:14:52,180 --> 00:14:56,890
it's an independent package thing we

00:14:54,220 --> 00:15:00,400
need to describe how it runs so one

00:14:56,890 --> 00:15:02,290
thing we're going to do is i'm using G

00:15:00,400 --> 00:15:03,480
RPC how many people have used G RPC at

00:15:02,290 --> 00:15:07,150
all

00:15:03,480 --> 00:15:11,140
not a lot of people I'm no longer

00:15:07,150 --> 00:15:12,750
convinced of all of the benefits unless

00:15:11,140 --> 00:15:16,420
you really have performance problems

00:15:12,750 --> 00:15:19,960
okay so most of you how many of you are

00:15:16,420 --> 00:15:23,110
actually doing micro services keep your

00:15:19,960 --> 00:15:26,230
hand up if you like it ah what I

00:15:23,110 --> 00:15:28,560
expected the monolith was good it worked

00:15:26,230 --> 00:15:28,560
at least

00:15:30,440 --> 00:15:33,959
we're going to talk about the problems

00:15:32,250 --> 00:15:36,000
with the microservice all right so now

00:15:33,959 --> 00:15:37,620
that we have these individual containers

00:15:36,000 --> 00:15:41,130
we actually need to describe how they

00:15:37,620 --> 00:15:45,720
run so I'm gonna show you how I package

00:15:41,130 --> 00:15:47,069
my things to me this is the price of

00:15:45,720 --> 00:15:49,589
admission if you want to do micro

00:15:47,069 --> 00:15:54,000
services that even have a chance this is

00:15:49,589 --> 00:15:57,779
the the minimum number one I need to

00:15:54,000 --> 00:15:59,759
know what your requirements are how many

00:15:57,779 --> 00:16:02,190
people know the actual CPU and memory

00:15:59,759 --> 00:16:05,699
requirements for their app to perform at

00:16:02,190 --> 00:16:09,690
various may be requests per second you

00:16:05,699 --> 00:16:11,250
know them there's three of you if you're

00:16:09,690 --> 00:16:13,399
gonna try to take your mana list that is

00:16:11,250 --> 00:16:16,079
working or your paycheck comes from

00:16:13,399 --> 00:16:18,509
you're gonna split into smaller pieces

00:16:16,079 --> 00:16:23,430
and then connect them back together with

00:16:18,509 --> 00:16:25,019
JSON you need to know this piece this is

00:16:23,430 --> 00:16:27,060
one of the things that bite people first

00:16:25,019 --> 00:16:29,490
most people are deploying their app one

00:16:27,060 --> 00:16:31,019
per VM right and you can get really far

00:16:29,490 --> 00:16:32,819
with that pattern but if you trying to

00:16:31,019 --> 00:16:34,920
come into this container world without

00:16:32,819 --> 00:16:36,959
giving these things shape they're gonna

00:16:34,920 --> 00:16:39,449
step all over each other and it's going

00:16:36,959 --> 00:16:40,800
to be horrible for you and it's

00:16:39,449 --> 00:16:42,449
unfortunate that most people skip this

00:16:40,800 --> 00:16:44,190
part because they believe that someone

00:16:42,449 --> 00:16:46,199
else is going to manage it I need to

00:16:44,190 --> 00:16:47,970
know what your resource requirements are

00:16:46,199 --> 00:16:49,949
that's step one you should at least know

00:16:47,970 --> 00:16:52,050
this if you don't know this today how do

00:16:49,949 --> 00:16:53,880
you find out how does anyone find out

00:16:52,050 --> 00:16:55,260
their current resource requirements

00:16:53,880 --> 00:17:00,199
how'd you do it

00:16:55,260 --> 00:17:00,199
what'd you say when it breaks

00:17:00,670 --> 00:17:08,040
okay that's and when it breaks you do

00:17:03,700 --> 00:17:08,040
what skip

00:17:09,839 --> 00:17:14,530
okay that's that is a pattern you can

00:17:14,020 --> 00:17:20,290
wait

00:17:14,530 --> 00:17:28,540
and scale it up how do you do it load

00:17:20,290 --> 00:17:35,850
testing okay anyone ever use like

00:17:28,540 --> 00:17:35,850
metrics I'm not a secret

00:17:39,510 --> 00:17:48,990
this is serious you can actually measure

00:17:44,190 --> 00:17:48,990
the memory and CPU that your app uses

00:17:50,250 --> 00:17:54,610
the next meeting you go to internally

00:17:52,840 --> 00:17:55,900
about micro-services I'm straight-up

00:17:54,610 --> 00:17:58,360
serious you can just stop the whole

00:17:55,900 --> 00:18:00,520
conversation if someone can't tell you

00:17:58,360 --> 00:18:02,530
what the memory requirements are for the

00:18:00,520 --> 00:18:04,120
services this is like serious business I

00:18:02,530 --> 00:18:04,840
mean people wondering why for the last

00:18:04,120 --> 00:18:05,980
eight years

00:18:04,840 --> 00:18:08,710
does the industry's been talking about

00:18:05,980 --> 00:18:10,930
micro services and can't pull it off you

00:18:08,710 --> 00:18:14,020
have to be able to see we're gonna see

00:18:10,930 --> 00:18:15,490
this in a minute one way you can do it

00:18:14,020 --> 00:18:19,300
is run your current apps and measure

00:18:15,490 --> 00:18:21,310
them metrics get something from the

00:18:19,300 --> 00:18:23,020
kernel at least see what you're

00:18:21,310 --> 00:18:25,060
currently doing over maybe a three month

00:18:23,020 --> 00:18:26,110
period and then you can just say we're

00:18:25,060 --> 00:18:30,720
in this ball park

00:18:26,110 --> 00:18:36,040
step one got to do it this one this is a

00:18:30,720 --> 00:18:40,260
what is that raise your hand if you have

00:18:36,040 --> 00:18:42,250
help checks on your apps fantastic

00:18:40,260 --> 00:18:44,790
where's the guy when it breaks do you

00:18:42,250 --> 00:18:44,790
got help checks

00:18:45,930 --> 00:18:58,720
when you put in there that is a good

00:18:55,600 --> 00:19:00,640
pair if you had to determine priority or

00:18:58,720 --> 00:19:02,140
which ones get help check first when it

00:19:00,640 --> 00:19:05,950
breaks is probably the first one you

00:19:02,140 --> 00:19:07,630
need kubernetes expects that you're

00:19:05,950 --> 00:19:09,670
going to have this health check you

00:19:07,630 --> 00:19:12,370
notice we have two of them though we

00:19:09,670 --> 00:19:16,290
have a liveliness probe and a readiness

00:19:12,370 --> 00:19:16,290
probe anyone know the difference

00:19:22,890 --> 00:19:25,580
okay

00:19:27,710 --> 00:19:34,920
good good answer that's close enough so

00:19:30,270 --> 00:19:36,720
the answer here is lagging eNOS asks are

00:19:34,920 --> 00:19:39,870
you even alive

00:19:36,720 --> 00:19:41,640
if not I'll restart you like you're

00:19:39,870 --> 00:19:43,680
frozen you can't do anything you can't

00:19:41,640 --> 00:19:46,050
recover on your own is the only time

00:19:43,680 --> 00:19:48,120
that should ever be used so if you have

00:19:46,050 --> 00:19:49,560
an app that can't be restarted without

00:19:48,120 --> 00:19:50,970
you know doesn't clean up its database

00:19:49,560 --> 00:19:52,830
connections or something bad will happen

00:19:50,970 --> 00:19:56,160
you don't use the live in this probe in

00:19:52,830 --> 00:19:58,320
kubernetes the readiness probe is when

00:19:56,160 --> 00:20:01,350
you first boot are you ready to receive

00:19:58,320 --> 00:20:02,730
traffic another thing is there's some

00:20:01,350 --> 00:20:03,530
point in the future where you won't be

00:20:02,730 --> 00:20:07,950
ready again

00:20:03,530 --> 00:20:09,660
the database goes away what happens when

00:20:07,950 --> 00:20:14,280
your database goes away internally

00:20:09,660 --> 00:20:17,190
anyone crashed that and you want to log

00:20:14,280 --> 00:20:22,460
in an exception where you log an

00:20:17,190 --> 00:20:22,460
exception is that an exceptional case

00:20:22,640 --> 00:20:30,150
it's the network on the other side of

00:20:24,690 --> 00:20:31,620
that is that an exceptional case you

00:20:30,150 --> 00:20:33,720
should assume that the database is going

00:20:31,620 --> 00:20:36,480
to be unreachable at some point

00:20:33,720 --> 00:20:38,070
guarantee it I will promise you do the

00:20:36,480 --> 00:20:40,290
life of your app the database will not

00:20:38,070 --> 00:20:42,720
be there so for you you should define

00:20:40,290 --> 00:20:44,220
some of these readiness probes you login

00:20:42,720 --> 00:20:46,140
issues that I try to connect to this

00:20:44,220 --> 00:20:48,150
database you retry and you mark your

00:20:46,140 --> 00:20:51,270
readiness endpoint unready because you

00:20:48,150 --> 00:20:53,220
can't talk to your database right so

00:20:51,270 --> 00:20:56,070
given that this is the contract between

00:20:53,220 --> 00:20:58,500
your app and kubernetes this particular

00:20:56,070 --> 00:21:00,570
app has a couple of components and we're

00:20:58,500 --> 00:21:02,040
going to deploy this now just to see how

00:21:00,570 --> 00:21:04,590
they work so let's go through this

00:21:02,040 --> 00:21:06,090
really quickly so one thing is we're

00:21:04,590 --> 00:21:07,380
going to talk about secrets because I

00:21:06,090 --> 00:21:09,420
want you to take the secrets off of the

00:21:07,380 --> 00:21:11,610
disk alright if you have secrets on the

00:21:09,420 --> 00:21:13,530
file system we want to remove them from

00:21:11,610 --> 00:21:14,790
the file system there's one way to do it

00:21:13,530 --> 00:21:17,640
I'm going to show you one possible way

00:21:14,790 --> 00:21:20,000
that has some nice tracking features I

00:21:17,640 --> 00:21:24,370
don't know if I have time service Oh

00:21:20,000 --> 00:21:28,309
anyone use volt anyone heard of volt

00:21:24,370 --> 00:21:28,790
are you curious it is alright it's

00:21:28,309 --> 00:21:30,350
awesome

00:21:28,790 --> 00:21:32,480
so first thing we have to do is deploy

00:21:30,350 --> 00:21:34,210
bolts so easy way to do it is you can

00:21:32,480 --> 00:21:37,070
actually test this out in developer mode

00:21:34,210 --> 00:21:39,170
here I have volt and I have this vault

00:21:37,070 --> 00:21:40,850
container this is really really bad what

00:21:39,170 --> 00:21:42,290
I'm doing like I'm putting the volt

00:21:40,850 --> 00:21:45,290
root token in here this is like

00:21:42,290 --> 00:21:47,480
silliness but it's good for testing okay

00:21:45,290 --> 00:21:48,740
and then also what I'm doing is doing a

00:21:47,480 --> 00:21:50,900
single node volt but you can actually

00:21:48,740 --> 00:21:52,190
run in an H a set up but we just need to

00:21:50,900 --> 00:21:55,429
vote API to start

00:21:52,190 --> 00:21:57,830
I haven't deployed in my cluster I'm

00:21:55,429 --> 00:21:59,360
going to show it to you and then we're

00:21:57,830 --> 00:22:01,130
gonna integrate it with kubernetes so we

00:21:59,360 --> 00:22:03,590
can actually use the identity we get

00:22:01,130 --> 00:22:05,120
from kubernetes in our services so that

00:22:03,590 --> 00:22:06,860
they can actually pull this secrets that

00:22:05,120 --> 00:22:07,790
they need I'm going to talk about policy

00:22:06,860 --> 00:22:09,799
as well

00:22:07,790 --> 00:22:12,799
so here's bolt running in my cluster

00:22:09,799 --> 00:22:16,010
ready to start giving out Prudential to

00:22:12,799 --> 00:22:18,320
my ABS the next thing we need to do is

00:22:16,010 --> 00:22:19,669
configure goals this is not actually

00:22:18,320 --> 00:22:21,590
that easy so I have some tutorials

00:22:19,669 --> 00:22:23,860
online but I also have this little

00:22:21,590 --> 00:22:25,970
script that I use to configure vault

00:22:23,860 --> 00:22:27,860
yeah yeah you have to do a bunch of

00:22:25,970 --> 00:22:30,080
stuff one thing we have to do is be able

00:22:27,860 --> 00:22:34,210
to communicate with the vault and then

00:22:30,080 --> 00:22:34,210
we have to give it a policy file so here

00:22:35,260 --> 00:22:41,570
system so my vote clusters are available

00:22:39,799 --> 00:22:43,520
there remotely so I'm gonna be able to

00:22:41,570 --> 00:22:46,520
connect to it the next thing that I need

00:22:43,520 --> 00:22:47,780
to do here is run this command and I

00:22:46,520 --> 00:22:49,790
need to make sure that everything in

00:22:47,780 --> 00:22:50,660
here is right so I need a few things I

00:22:49,790 --> 00:22:53,440
need to be able connect to my database

00:22:50,660 --> 00:22:57,200
yes you can hack my database if you're

00:22:53,440 --> 00:22:59,540
and and then I need to be able to talk

00:22:57,200 --> 00:23:03,380
to my kubernetes cluster so here I got a

00:22:59,540 --> 00:23:06,919
wire up vault to trust kubernetes to

00:23:03,380 --> 00:23:08,330
identify my services that I deploy most

00:23:06,919 --> 00:23:11,150
people are deploying services with no

00:23:08,330 --> 00:23:13,130
identity file on disk if you can see it

00:23:11,150 --> 00:23:15,020
that's what you get to be we want to

00:23:13,130 --> 00:23:17,240
tighten that down a little bit so one

00:23:15,020 --> 00:23:19,130
thing we're going to do here is connect

00:23:17,240 --> 00:23:20,990
it to kubernetes so I'm gonna pick one

00:23:19,130 --> 00:23:24,380
cluster I have three we're gonna pick

00:23:20,990 --> 00:23:25,770
one of them config I'm going to show you

00:23:24,380 --> 00:23:27,240
guys how to do this manually

00:23:25,770 --> 00:23:30,570
better ways of doing this but here's how

00:23:27,240 --> 00:23:33,240
you do it I'm going to organ organs

00:23:30,570 --> 00:23:35,400
pretty dope that's where I live

00:23:33,240 --> 00:23:36,780
so one thing we need out of this is we

00:23:35,400 --> 00:23:39,420
need to know where our kubernetes server

00:23:36,780 --> 00:23:42,140
is so I'm going to grab this and we're

00:23:39,420 --> 00:23:45,140
just going to configure bolt to use this

00:23:42,140 --> 00:23:47,610
all right so this is going to allow volt

00:23:45,140 --> 00:23:49,680
to communicate with kubernetes

00:23:47,610 --> 00:23:52,170
and validate service accounts that come

00:23:49,680 --> 00:23:53,910
its way right and then last thing I need

00:23:52,170 --> 00:23:56,580
to do is get to the TLS certificate so

00:23:53,910 --> 00:24:00,840
we can trust the kubernetes server we're

00:23:56,580 --> 00:24:02,310
talking to will come here and then we

00:24:00,840 --> 00:24:04,470
need to do this this is what basic

00:24:02,310 --> 00:24:11,400
before uncoded anyone know what you do

00:24:04,470 --> 00:24:18,810
with these there you go yep come on just

00:24:11,400 --> 00:24:21,200
keep it real this is like capital D with

00:24:18,810 --> 00:24:21,200
this thing

00:24:24,850 --> 00:24:31,299
yes they are alright so we'll do this

00:24:29,429 --> 00:24:33,909
people hate what I don't use them

00:24:31,299 --> 00:24:40,809
correctly I sit there and delete every

00:24:33,909 --> 00:24:43,419
line is like give it a count all right

00:24:40,809 --> 00:24:45,370
so we put our certificate in there now

00:24:43,419 --> 00:24:46,539
if we can get two vaults what should

00:24:45,370 --> 00:24:49,960
happen is we should be able to configure

00:24:46,539 --> 00:24:51,190
it so I'm gonna do source well Envy

00:24:49,960 --> 00:24:52,509
though this is connects it to Cooper

00:24:51,190 --> 00:24:55,809
Nettie's and let's see if both work so

00:24:52,509 --> 00:24:57,220
we'll just do status great so we have a

00:24:55,809 --> 00:24:59,320
volt cluster but now we need to

00:24:57,220 --> 00:25:01,419
configure with a few things one is we

00:24:59,320 --> 00:25:04,240
need to give it policy so here's this

00:25:01,419 --> 00:25:06,580
app policy this says if you identify

00:25:04,240 --> 00:25:09,279
yourself as an app service you can read

00:25:06,580 --> 00:25:10,750
from vault your database credentials you

00:25:09,279 --> 00:25:12,490
don't want to put them on this but we

00:25:10,750 --> 00:25:15,070
want to create your den chose one per

00:25:12,490 --> 00:25:16,990
app instance right we're not going to

00:25:15,070 --> 00:25:19,059
give everyone long-running credentials

00:25:16,990 --> 00:25:21,250
if your DBA you're not going to create

00:25:19,059 --> 00:25:22,929
credentials and give them to people how

00:25:21,250 --> 00:25:27,220
many people have had their DBA email

00:25:22,929 --> 00:25:29,470
than the password no denying you know

00:25:27,220 --> 00:25:32,259
the passport who are you emailing it to

00:25:29,470 --> 00:25:35,019
okay so what we want to do is say hey

00:25:32,259 --> 00:25:37,629
the app has an identity given that

00:25:35,019 --> 00:25:38,919
identity if we trust it it communicates

00:25:37,629 --> 00:25:41,620
with the vault and will hand back

00:25:38,919 --> 00:25:44,649
dynamic secrets and the app dies we

00:25:41,620 --> 00:25:46,750
remove the secrets okay but we need a

00:25:44,649 --> 00:25:49,299
trust root of trust this is also a

00:25:46,750 --> 00:25:51,610
problem how did you give a process trust

00:25:49,299 --> 00:25:52,090
or an identity if it hasn't started

00:25:51,610 --> 00:25:54,070
already

00:25:52,090 --> 00:25:55,629
well kubernetes works with that we have

00:25:54,070 --> 00:25:57,789
service accounts we're gonna go through

00:25:55,629 --> 00:26:00,070
that flow really quickly so here's a

00:25:57,789 --> 00:26:02,649
policy that says you is an app can read

00:26:00,070 --> 00:26:04,059
from here so we're gonna do now just

00:26:02,649 --> 00:26:05,950
configurable to really quickly I'm just

00:26:04,059 --> 00:26:08,710
gonna show you it one more time we're

00:26:05,950 --> 00:26:10,750
going to have dynamics equal creation of

00:26:08,710 --> 00:26:12,669
credentials so here's a template that

00:26:10,750 --> 00:26:15,429
when something wants credential some on

00:26:12,669 --> 00:26:18,039
my sequel database vault will use this

00:26:15,429 --> 00:26:19,929
template to mint credentials just for

00:26:18,039 --> 00:26:22,509
that process hand it back to that

00:26:19,929 --> 00:26:25,779
process and then only allowed to live

00:26:22,509 --> 00:26:27,730
for 30 seconds that process must renew

00:26:25,779 --> 00:26:29,110
these credentials every 30 seconds for

00:26:27,730 --> 00:26:30,830
them to continue to be valid

00:26:29,110 --> 00:26:32,330
you don't renew the process

00:26:30,830 --> 00:26:34,429
it's deleted football the secret gets

00:26:32,330 --> 00:26:37,070
deleted from the database thing you have

00:26:34,429 --> 00:26:37,549
to get a new one okay all right so let's

00:26:37,070 --> 00:26:41,269
do this

00:26:37,549 --> 00:26:43,330
so bash configure bolts do not crash on

00:26:41,269 --> 00:26:45,529
me

00:26:43,330 --> 00:26:48,190
you ever see warning that people say you

00:26:45,529 --> 00:26:51,980
can ignore scythe in water don't print

00:26:48,190 --> 00:26:57,470
alright so hopefully boat is good so

00:26:51,980 --> 00:27:00,950
here's our test we have this app this is

00:26:57,470 --> 00:27:02,809
a batch job so one thing I see people

00:27:00,950 --> 00:27:05,029
not use enough in things like kubernetes

00:27:02,809 --> 00:27:06,799
is when you start to break these

00:27:05,029 --> 00:27:08,990
services out some things are better

00:27:06,799 --> 00:27:10,669
office like a cron job like straight up

00:27:08,990 --> 00:27:13,130
old-school cron right you don't

00:27:10,669 --> 00:27:14,929
necessarily need a service sitting on an

00:27:13,130 --> 00:27:17,149
HTTP endpoint doing absolutely nothing

00:27:14,929 --> 00:27:19,130
if you want to send email you can fill

00:27:17,149 --> 00:27:21,200
up a message queue and then kick off

00:27:19,130 --> 00:27:23,179
some batch job that pulls things from

00:27:21,200 --> 00:27:25,429
the queue and kill it Coronas has native

00:27:23,179 --> 00:27:27,350
support for things like batch jobs so

00:27:25,429 --> 00:27:28,750
here we're just going to run this one

00:27:27,350 --> 00:27:30,950
drop this is not necessarily a con job

00:27:28,750 --> 00:27:33,559
notice what I'm doing here I'm going to

00:27:30,950 --> 00:27:37,639
talk to volt I'm going to give it my

00:27:33,559 --> 00:27:39,620
identity called app if volt can validate

00:27:37,639 --> 00:27:42,980
that I actually in possession of a valid

00:27:39,620 --> 00:27:44,870
secure service account then it will give

00:27:42,980 --> 00:27:48,260
me a token back that I can use to ask

00:27:44,870 --> 00:27:49,880
for more credentials so I'm going to

00:27:48,260 --> 00:27:51,950
communicate to volt and then I also need

00:27:49,880 --> 00:27:53,659
my database password I could stare that

00:27:51,950 --> 00:27:55,700
over my database URL I could still that

00:27:53,659 --> 00:27:57,019
involvement I'm choosing not to so when

00:27:55,700 --> 00:27:59,090
I run this workload what I hope to

00:27:57,019 --> 00:28:02,269
happen is that it grabs this serves the

00:27:59,090 --> 00:28:03,799
count talks of vault vault gives that

00:28:02,269 --> 00:28:06,350
unique credentials and it's able to ping

00:28:03,799 --> 00:28:08,299
the database okay so one thing we need

00:28:06,350 --> 00:28:14,149
to do is create a service account to GTO

00:28:08,299 --> 00:28:17,830
crates service accounts call app all

00:28:14,149 --> 00:28:20,770
right so now in kubernetes coop CTL get

00:28:17,830 --> 00:28:22,760
service

00:28:20,770 --> 00:28:24,230
we actually have this new service

00:28:22,760 --> 00:28:26,000
account and now we can start to get

00:28:24,230 --> 00:28:27,860
permissions to this particular role some

00:28:26,000 --> 00:28:29,810
people create them per app instance type

00:28:27,860 --> 00:28:31,070
or you could automate it and create it

00:28:29,810 --> 00:28:31,970
for instance that would be a little bit

00:28:31,070 --> 00:28:34,730
overkill for this particular

00:28:31,970 --> 00:28:37,820
presentation and then what we have to do

00:28:34,730 --> 00:28:39,380
is we have to get it bindings so in this

00:28:37,820 --> 00:28:41,060
case I just want this to actually just

00:28:39,380 --> 00:28:43,550
do very simple just prove that it's an

00:28:41,060 --> 00:28:45,140
app and it's called an app so that's

00:28:43,550 --> 00:28:47,990
already in there and now we're going to

00:28:45,140 --> 00:28:50,570
run the app so here's my database and

00:28:47,990 --> 00:28:54,530
I'll go here so I just have this my

00:28:50,570 --> 00:28:57,410
sequel database you'll notice the list

00:28:54,530 --> 00:28:59,630
of users that I have I have this assist

00:28:57,410 --> 00:29:01,580
user and I have root and I just have

00:28:59,630 --> 00:29:03,880
this little database over here that it's

00:29:01,580 --> 00:29:07,100
going to ping that database

00:29:03,880 --> 00:29:07,970
so what DBAs would do is they would come

00:29:07,100 --> 00:29:11,480
here

00:29:07,970 --> 00:29:13,490
create user email it to people and it

00:29:11,480 --> 00:29:14,840
will stay there forever this is not how

00:29:13,490 --> 00:29:16,490
we want to do it when I do this based on

00:29:14,840 --> 00:29:20,300
identity so let's kick off this job

00:29:16,490 --> 00:29:24,220
queue CTL apply - add kubernetes and

00:29:20,300 --> 00:29:31,160
then we'll do worker I'm gonna run it

00:29:24,220 --> 00:29:33,230
pretty fast so it's running okay now

00:29:31,160 --> 00:29:38,000
it's calm so let's look at the user

00:29:33,230 --> 00:29:41,780
database now so you see this dynamic

00:29:38,000 --> 00:29:44,020
user there right right this random user

00:29:41,780 --> 00:29:46,340
name this is only good for that process

00:29:44,020 --> 00:29:48,140
invocation no other process can use

00:29:46,340 --> 00:29:48,830
these credentials volt won't hand it to

00:29:48,140 --> 00:29:50,900
anyone else

00:29:48,830 --> 00:29:54,530
what is both doing underneath the covers

00:29:50,900 --> 00:29:55,760
couch ETL get pause - and Koo system I'm

00:29:54,530 --> 00:29:58,220
using a different name space to run

00:29:55,760 --> 00:29:59,450
admin tools so what I want to do here is

00:29:58,220 --> 00:30:01,990
get the logs from vault so we can see

00:29:59,450 --> 00:30:01,990
what's happening

00:30:05,639 --> 00:30:09,070
so you can actually use an audit log

00:30:07,630 --> 00:30:12,039
here as well to keep track of this stuff

00:30:09,070 --> 00:30:15,549
so notice what's happening here my app

00:30:12,039 --> 00:30:17,710
died or exited and it didn't renew this

00:30:15,549 --> 00:30:20,139
credentials within 30 seconds so volt

00:30:17,710 --> 00:30:22,600
saying it's expired and it will clean up

00:30:20,139 --> 00:30:34,110
these credentials everywhere my app

00:30:22,600 --> 00:30:38,230
itself so when I look at the logs here

00:30:34,110 --> 00:30:39,760
CTL logs here and then we can see what

00:30:38,230 --> 00:30:41,409
happened we start the worker we learn

00:30:39,760 --> 00:30:43,360
our service accounts soku Bernays puts

00:30:41,409 --> 00:30:45,519
this service account your identity in a

00:30:43,360 --> 00:30:47,169
well-known location you can read it and

00:30:45,519 --> 00:30:49,750
then you can use it to present to other

00:30:47,169 --> 00:30:51,130
tools like vault here once it's

00:30:49,750 --> 00:30:53,110
validated I can get my database

00:30:51,130 --> 00:30:55,570
credentials this is what it gave back I

00:30:53,110 --> 00:30:58,330
ping the database everything worked I

00:30:55,570 --> 00:31:01,600
shut down and then we come back here oh

00:30:58,330 --> 00:31:03,880
man if your DBA tracking username and

00:31:01,600 --> 00:31:06,490
passwords and spreadsheets just not if

00:31:03,880 --> 00:31:10,809
that's you it's ok look at the magic

00:31:06,490 --> 00:31:12,549
here the app is done the credentials are

00:31:10,809 --> 00:31:14,950
gone ok

00:31:12,549 --> 00:31:16,419
so for most people if you start to have

00:31:14,950 --> 00:31:18,039
thousands of these little services

00:31:16,419 --> 00:31:19,659
trying to access different parts of the

00:31:18,039 --> 00:31:21,940
system you're gonna have so many

00:31:19,659 --> 00:31:23,440
username and passwords when it'd be nice

00:31:21,940 --> 00:31:25,600
if you can put them all in one place

00:31:23,440 --> 00:31:27,250
give them policy and give them something

00:31:25,600 --> 00:31:28,840
that expires so that way you don't have

00:31:27,250 --> 00:31:31,570
to do password management with files

00:31:28,840 --> 00:31:33,190
this keeps it super portable I could run

00:31:31,570 --> 00:31:34,840
vaults in a separate system and then

00:31:33,190 --> 00:31:36,639
have this work across clusters and I get

00:31:34,840 --> 00:31:37,990
the audit log so this is where a lot of

00:31:36,639 --> 00:31:39,820
people are starting to do in terms of

00:31:37,990 --> 00:31:41,260
identity or we can even use this for

00:31:39,820 --> 00:31:43,029
your app credentials if you wanted to

00:31:41,260 --> 00:31:46,330
vote is gaining those particular

00:31:43,029 --> 00:31:47,230
capabilities so that's a vault and this

00:31:46,330 --> 00:31:49,299
is how we're starting to think about

00:31:47,230 --> 00:31:52,659
password management based on identity

00:31:49,299 --> 00:31:54,220
you're trading some trusted identity for

00:31:52,659 --> 00:31:56,440
credentials to the other services that

00:31:54,220 --> 00:31:59,799
you need now the last thing we want to

00:31:56,440 --> 00:32:00,190
do is talk about is to you so at a high

00:31:59,799 --> 00:32:01,750
level

00:32:00,190 --> 00:32:04,149
Kerber days does a good job of keeping

00:32:01,750 --> 00:32:06,250
our apps running doing the basics

00:32:04,149 --> 00:32:06,520
deploying things giving us access to

00:32:06,250 --> 00:32:08,410
things

00:32:06,520 --> 00:32:10,900
like secrets when we need them but what

00:32:08,410 --> 00:32:11,980
happens we need visibility most people

00:32:10,900 --> 00:32:14,560
here didn't raise their hand about

00:32:11,980 --> 00:32:16,870
metrics so we need to see how we can

00:32:14,560 --> 00:32:18,220
solve that problem so one thing I want

00:32:16,870 --> 00:32:20,560
to talk about some of the concepts and

00:32:18,220 --> 00:32:22,090
you can go and read all these Doc's but

00:32:20,560 --> 00:32:25,600
here's the overall thing you have to

00:32:22,090 --> 00:32:28,330
understand about this SEO approach so

00:32:25,600 --> 00:32:31,150
earlier John I think was on stage

00:32:28,330 --> 00:32:33,100
talking about Borg is better than

00:32:31,150 --> 00:32:35,620
kubernetes why because there's a lot

00:32:33,100 --> 00:32:38,290
missing in kubernetes so one thing

00:32:35,620 --> 00:32:40,090
internally if you have an app a that

00:32:38,290 --> 00:32:42,910
talks of service be today we just do a

00:32:40,090 --> 00:32:46,450
point-to-point how many are using Telus

00:32:42,910 --> 00:32:51,160
between each endpoint I've been many

00:32:46,450 --> 00:32:54,100
hands you know why cuz it's hard rotates

00:32:51,160 --> 00:32:56,260
those things who mints them on demand

00:32:54,100 --> 00:32:58,120
for each process did you notice the

00:32:56,260 --> 00:32:59,950
pattern that we have a vault what we

00:32:58,120 --> 00:33:01,780
could use volt to be the CA to do the

00:32:59,950 --> 00:33:03,940
same on demand every time a process

00:33:01,780 --> 00:33:05,620
starts and we give it a certificate and

00:33:03,940 --> 00:33:07,180
then it's short-lived so if someone

00:33:05,620 --> 00:33:09,940
compromises that particular cert pair

00:33:07,180 --> 00:33:11,500
it's gone so now we can actually do

00:33:09,940 --> 00:33:13,690
these micro services where they actually

00:33:11,500 --> 00:33:16,780
have identity and they carry it over to

00:33:13,690 --> 00:33:19,270
build this service mesh so instead of

00:33:16,780 --> 00:33:22,330
you talking point to point down here we

00:33:19,270 --> 00:33:23,500
introduce what we call the sidecar now

00:33:22,330 --> 00:33:25,120
to me I think this is probably one of

00:33:23,500 --> 00:33:27,550
the most important patterns for people

00:33:25,120 --> 00:33:30,610
thinking about doing micro services when

00:33:27,550 --> 00:33:32,350
multiple languages are involved so

00:33:30,610 --> 00:33:34,000
imagine having stuff like an Ruby and

00:33:32,350 --> 00:33:36,130
Java but you want to do rate limiting

00:33:34,000 --> 00:33:38,050
the chances of you finding the rate

00:33:36,130 --> 00:33:39,790
limiting library that works the same

00:33:38,050 --> 00:33:42,220
across both of those languages is

00:33:39,790 --> 00:33:43,810
minimal so what you would rather do is

00:33:42,220 --> 00:33:46,690
try to implement some of this logic and

00:33:43,810 --> 00:33:48,790
some proxy somewhere but the problem is

00:33:46,690 --> 00:33:50,470
if you do with a centralized proxy that

00:33:48,790 --> 00:33:52,390
everyone's beholden either to the same

00:33:50,470 --> 00:33:54,760
rate limiting policy you can't fine-tune

00:33:52,390 --> 00:33:57,150
it so what we want to do is take engine

00:33:54,760 --> 00:34:00,580
xh8 proxy that kind of functionality and

00:33:57,150 --> 00:34:01,720
move it next to each process I mean

00:34:00,580 --> 00:34:07,330
people have heard of a service mesh

00:34:01,720 --> 00:34:08,890
before so this sidecar pattern is really

00:34:07,330 --> 00:34:10,780
important because what we can start to

00:34:08,890 --> 00:34:12,970
do is we can do things once rate

00:34:10,780 --> 00:34:13,909
limiting the chaos monkey retry

00:34:12,970 --> 00:34:16,819
semantics

00:34:13,909 --> 00:34:18,980
circuit breaking all this stuff that's

00:34:16,819 --> 00:34:21,379
hard to do in a single app we can put in

00:34:18,980 --> 00:34:23,659
one place like this sidecar and actually

00:34:21,379 --> 00:34:24,950
have a simple single implementation

00:34:23,659 --> 00:34:26,869
across the board I'm going to see what

00:34:24,950 --> 00:34:28,309
this looks like in a moment and then we

00:34:26,869 --> 00:34:30,200
have this control plan up here

00:34:28,309 --> 00:34:32,659
so in kubernetes you notice how we were

00:34:30,200 --> 00:34:34,940
deploying things we had a way to say hey

00:34:32,659 --> 00:34:37,369
kubernetes here's how I want you to

00:34:34,940 --> 00:34:39,200
deploy my front-end app here's how much

00:34:37,369 --> 00:34:42,049
memory I need here's how you check if

00:34:39,200 --> 00:34:44,869
I'm alive here's how you give me what

00:34:42,049 --> 00:34:46,099
ports I want to listen to that all works

00:34:44,869 --> 00:34:47,450
great but what about the rest of the

00:34:46,099 --> 00:34:49,879
stuff how do you know what metrics to

00:34:47,450 --> 00:34:51,409
collect how do you know to track HTTP

00:34:49,879 --> 00:34:53,359
requests how do you know that this

00:34:51,409 --> 00:34:54,950
version of this micro service can talk

00:34:53,359 --> 00:34:57,049
to that version of that micro service

00:34:54,950 --> 00:35:00,049
most of us don't have any of that kind

00:34:57,049 --> 00:35:01,819
of tool so it's wah-wah West we have all

00:35:00,049 --> 00:35:04,910
this stuff deployed and it's just noise

00:35:01,819 --> 00:35:06,289
no one can tell what so before I

00:35:04,910 --> 00:35:08,480
deployed this app and start to wrap

00:35:06,289 --> 00:35:11,720
things up here I depend on this bar

00:35:08,480 --> 00:35:13,430
service and this pou service can anyone

00:35:11,720 --> 00:35:18,440
tell me from looking at that what order

00:35:13,430 --> 00:35:22,010
I talk to them in the fact that you're

00:35:18,440 --> 00:35:24,170
even trying worries me because how would

00:35:22,010 --> 00:35:25,670
you know how I'm talking to these

00:35:24,170 --> 00:35:28,039
services I could be doing them in

00:35:25,670 --> 00:35:29,539
parallel I could be doing them one at a

00:35:28,039 --> 00:35:30,680
time I'm pretty sure someone's sitting

00:35:29,539 --> 00:35:33,609
it's like he's probably doing in

00:35:30,680 --> 00:35:33,609
alphabetical order

00:35:33,910 --> 00:35:37,819
but this is the straight-up guest

00:35:35,930 --> 00:35:39,079
working that we're doing when most

00:35:37,819 --> 00:35:40,760
people just start to adopt micro

00:35:39,079 --> 00:35:43,609
services for the first time there's zero

00:35:40,760 --> 00:35:46,099
visibility so how do you get visibility

00:35:43,609 --> 00:35:48,020
into these apps anyone how do you

00:35:46,099 --> 00:35:50,859
anymore with micro services that believe

00:35:48,020 --> 00:35:56,390
they have visibility how do you do it

00:35:50,859 --> 00:35:57,770
prometheus I will say Prometheus gift so

00:35:56,390 --> 00:35:59,329
Prometheus is a way to collect metrics

00:35:57,770 --> 00:36:01,640
you know you have this endpoint or

00:35:59,329 --> 00:36:03,680
comité this is a tool that gathers

00:36:01,640 --> 00:36:04,640
metrics and organizing them in the way

00:36:03,680 --> 00:36:06,410
we're going to eat this like paint

00:36:04,640 --> 00:36:08,270
pretty pictures run queries or set

00:36:06,410 --> 00:36:09,829
alerts but the problem is you're still

00:36:08,270 --> 00:36:10,520
missing some data there's things you

00:36:09,829 --> 00:36:12,410
can't see

00:36:10,520 --> 00:36:14,150
Prometheus doesn't really tell you that

00:36:12,410 --> 00:36:16,220
I'm talking to this service and then

00:36:14,150 --> 00:36:18,230
this one Prometheus you could probably

00:36:16,220 --> 00:36:20,299
reverse engineer from the metrics but

00:36:18,230 --> 00:36:21,829
you're probably going to be off HTTP

00:36:20,299 --> 00:36:24,230
tracing is a better way to do that

00:36:21,829 --> 00:36:26,089
particular problem so this is the app

00:36:24,230 --> 00:36:28,220
infrastructure that's required if you

00:36:26,089 --> 00:36:29,720
want to actually do micro services so

00:36:28,220 --> 00:36:31,910
here's one container inside of this

00:36:29,720 --> 00:36:35,029
thing in all this profiles look at this

00:36:31,910 --> 00:36:38,980
picture I need to get this sidecar in

00:36:35,029 --> 00:36:38,980
there there's one way you could do it

00:36:43,660 --> 00:36:51,289
all right so we're gonna install SDO now

00:36:49,150 --> 00:36:53,119
so one thing we have to do is we have to

00:36:51,289 --> 00:36:55,039
get this sidecar to our process one

00:36:53,119 --> 00:36:56,930
thing we need to do is install the SDO

00:36:55,039 --> 00:36:58,849
control plane now remember when you're

00:36:56,930 --> 00:37:01,160
going to do this or so you can follow

00:36:58,849 --> 00:37:03,230
the documentation like I remember how to

00:37:01,160 --> 00:37:05,359
install it and nope I straight up copy

00:37:03,230 --> 00:37:07,640
straight from here you're gonna do the

00:37:05,359 --> 00:37:09,140
same thing so we're gonna get sto

00:37:07,640 --> 00:37:11,270
control plane installed in our cluster

00:37:09,140 --> 00:37:13,160
I'm going to run this command to make

00:37:11,270 --> 00:37:15,140
sure that my personal account has access

00:37:13,160 --> 00:37:17,210
to do that and then what we're going to

00:37:15,140 --> 00:37:19,250
do is we're going to download sto and

00:37:17,210 --> 00:37:21,289
once you have it you're going to install

00:37:19,250 --> 00:37:23,869
sto I'm just going to take the easy path

00:37:21,289 --> 00:37:26,450
for now because I want some things to

00:37:23,869 --> 00:37:27,710
work and then we go to our SEO directory

00:37:26,450 --> 00:37:29,619
and you're just going to install it

00:37:27,710 --> 00:37:31,910
there's a lot of moving parts to this

00:37:29,619 --> 00:37:33,440
but they get a lot of things right and

00:37:31,910 --> 00:37:36,470
they just bundle it all into this one

00:37:33,440 --> 00:37:38,029
file don't even try to read figure it

00:37:36,470 --> 00:37:41,920
out just install it things from the

00:37:38,029 --> 00:37:41,920
internet are good just put them in here

00:37:44,099 --> 00:37:55,800
that's some new stuff there that's a lot

00:37:47,859 --> 00:37:57,760
more right no this is what you do

00:37:55,800 --> 00:38:00,250
alright the other thing that we need to

00:37:57,760 --> 00:38:02,589
do is we need to make it easy for people

00:38:00,250 --> 00:38:04,690
to do this so one thing that has to

00:38:02,589 --> 00:38:08,020
happen is that this sidecar remember the

00:38:04,690 --> 00:38:10,210
sidecar we saw from the photo process

00:38:08,020 --> 00:38:10,869
but what happens if someone forgets to

00:38:10,210 --> 00:38:12,730
put it there

00:38:10,869 --> 00:38:14,050
well they circumvent all the security

00:38:12,730 --> 00:38:16,180
stuff we want and we may not get the

00:38:14,050 --> 00:38:17,500
visibility we need so incur Bernays

00:38:16,180 --> 00:38:19,810
they're newer versions we have what we

00:38:17,500 --> 00:38:21,849
call an initializer this is the way for

00:38:19,810 --> 00:38:24,970
us to decide policy so even though the

00:38:21,849 --> 00:38:28,089
developer wants to give me this this one

00:38:24,970 --> 00:38:30,579
file with one container in it I can

00:38:28,089 --> 00:38:33,250
inject the sidecar transparently and

00:38:30,579 --> 00:38:35,320
have the sidecar hijack all the network

00:38:33,250 --> 00:38:37,839
traffic and force it through the sidecar

00:38:35,320 --> 00:38:39,880
you have to do the policy so the way we

00:38:37,839 --> 00:38:42,310
do this in kubernetes is we use what we

00:38:39,880 --> 00:38:46,300
call an initializer that will initialize

00:38:42,310 --> 00:38:48,579
the app before it actually gets deployed

00:38:46,300 --> 00:38:50,380
so we'll deploy it alright the last

00:38:48,579 --> 00:38:53,170
thing we want to do now is put on a few

00:38:50,380 --> 00:38:55,060
add-ons we want some visibility so one

00:38:53,170 --> 00:38:56,290
thing we want is to be able to see

00:38:55,060 --> 00:38:58,060
things that are happening inside of the

00:38:56,290 --> 00:39:00,310
cluster so one thing we can do that is

00:38:58,060 --> 00:39:02,470
with with some tracing so here I'm just

00:39:00,310 --> 00:39:06,550
going to use Zipkin so this will give me

00:39:02,470 --> 00:39:09,010
my HTTP traces and then I also want

00:39:06,550 --> 00:39:10,510
something like Prometheus and Gravano so

00:39:09,010 --> 00:39:13,359
I can actually see some of the common

00:39:10,510 --> 00:39:16,890
metrics okay so we're going to add in

00:39:13,359 --> 00:39:19,030
Prometheus and then we want to graph

00:39:16,890 --> 00:39:28,540
some of the things that come out of it

00:39:19,030 --> 00:39:30,250
so we want to do grow fauna so what

00:39:28,540 --> 00:39:32,950
these are my cluster now we have that

00:39:30,250 --> 00:39:35,589
control plane set up so now what we need

00:39:32,950 --> 00:39:36,940
to do is inject the sidecars so one way

00:39:35,589 --> 00:39:40,000
of doing that and this is the old way of

00:39:36,940 --> 00:39:44,770
doing that is like this is co CTL cou

00:39:40,000 --> 00:39:47,200
inject - F and we can give it our our

00:39:44,770 --> 00:39:50,680
declaration and it will rewrite it for

00:39:47,200 --> 00:39:54,740
us on-demand injecting this side

00:39:50,680 --> 00:39:56,839
in between which will do i just stuff to

00:39:54,740 --> 00:39:58,940
hijack traffic problem is if people

00:39:56,839 --> 00:40:00,770
forget to put it there then we lose some

00:39:58,940 --> 00:40:02,690
of the benefits so we have that

00:40:00,770 --> 00:40:09,680
initializer that's going to do it for us

00:40:02,690 --> 00:40:15,230
so let's deploy our front-end then we'll

00:40:09,680 --> 00:40:17,000
do our back ends and everything I'm

00:40:15,230 --> 00:40:19,309
doing here today is app infrastructure

00:40:17,000 --> 00:40:20,630
this is basically what we mean by saying

00:40:19,309 --> 00:40:22,099
all the things you're going to need in

00:40:20,630 --> 00:40:23,390
place if you think you're going to have

00:40:22,099 --> 00:40:26,000
a chance to actually doing micro

00:40:23,390 --> 00:40:29,180
services at all right so with these

00:40:26,000 --> 00:40:31,520
deployed let's look at something notice

00:40:29,180 --> 00:40:33,020
that this part is initializing so this

00:40:31,520 --> 00:40:35,359
is where we're injecting that sidecar

00:40:33,020 --> 00:40:37,819
the sidecar is registering itself with

00:40:35,359 --> 00:40:40,250
the control plane maybe get in and steal

00:40:37,819 --> 00:40:41,990
a certificate also wiring up any

00:40:40,250 --> 00:40:44,089
configuration about the other services

00:40:41,990 --> 00:40:45,890
in the environment and now we have this

00:40:44,089 --> 00:40:48,770
sidecar willing to deal our dealing with

00:40:45,890 --> 00:40:52,280
traffic force so the last thing we need

00:40:48,770 --> 00:40:55,700
to do now is create a front door so that

00:40:52,280 --> 00:40:57,230
we can talk to these things and here we

00:40:55,700 --> 00:41:00,200
need to actually put in what we call the

00:40:57,230 --> 00:41:01,640
ingress controller so we need to figure

00:41:00,200 --> 00:41:04,279
out where's our front door to this

00:41:01,640 --> 00:41:07,309
service stack so I'm going to put that

00:41:04,279 --> 00:41:08,720
in place the thing here is like if

00:41:07,309 --> 00:41:10,579
you've ever used Q Bernays before we

00:41:08,720 --> 00:41:12,410
have this ingress controller but what we

00:41:10,579 --> 00:41:15,079
need to do is say hey is do we want you

00:41:12,410 --> 00:41:16,670
to take over so this mean sto will set

00:41:15,079 --> 00:41:18,770
up its own ingress to handle this

00:41:16,670 --> 00:41:21,920
traffic for us and give back a public IP

00:41:18,770 --> 00:41:22,690
that we can use it yet once that's in

00:41:21,920 --> 00:41:28,700
place

00:41:22,690 --> 00:41:30,049
oops ETL gets ingress will see this and

00:41:28,700 --> 00:41:31,279
if this works we should be able to ping

00:41:30,049 --> 00:41:34,609
the app and I'm going to show you what

00:41:31,279 --> 00:41:36,319
we get for free when we do this now the

00:41:34,609 --> 00:41:39,640
good news is your developers have to do

00:41:36,319 --> 00:41:39,640
very little for this to actually work

00:41:40,450 --> 00:41:49,620
all right sweets

00:41:42,790 --> 00:41:49,620
well we go clear I can write -

00:41:55,180 --> 00:42:03,890
sleep 0.5 Bosch is the best that's fine

00:42:02,660 --> 00:42:06,590
we don't really need it let's just spam

00:42:03,890 --> 00:42:09,170
the network a little bit though this is

00:42:06,590 --> 00:42:11,270
not a substitute for actual benchmark

00:42:09,170 --> 00:42:14,180
testing and curl it's not what you use

00:42:11,270 --> 00:42:14,570
for that so once we do this what do we

00:42:14,180 --> 00:42:20,680
get

00:42:14,570 --> 00:42:22,640
coochi TL gets SBC - and cous sto system

00:42:20,680 --> 00:42:25,060
when we do this now

00:42:22,640 --> 00:42:28,190
you'll see we have Prometheus deployed

00:42:25,060 --> 00:42:29,990
core fauna and Zipkin so the first thing

00:42:28,190 --> 00:42:32,420
we're going to do is remember do we talk

00:42:29,990 --> 00:42:35,870
to bar first or foo first someone say

00:42:32,420 --> 00:42:42,740
allow with confidence you have a 50/50

00:42:35,870 --> 00:42:44,450
chance bar food alright this is good i

00:42:42,740 --> 00:42:47,240
t's just that minute we're doing right

00:42:44,450 --> 00:42:48,890
now all right so here's the last bit so

00:42:47,240 --> 00:42:53,450
it's like prove it so what we're gonna

00:42:48,890 --> 00:42:55,100
do is use actual data to tell us so

00:42:53,450 --> 00:42:56,330
before you go down the micro-services

00:42:55,100 --> 00:42:57,440
route you need some of this app

00:42:56,330 --> 00:43:01,370
infrastructure in place we're almost

00:42:57,440 --> 00:43:03,230
done here so coupe CTL get pause - in

00:43:01,370 --> 00:43:04,580
coupe system I don't have public

00:43:03,230 --> 00:43:08,680
endpoints for those I'm going to just

00:43:04,580 --> 00:43:13,940
proxy to this directly so let's go to

00:43:08,680 --> 00:43:14,930
sto system we're almost done so I'm not

00:43:13,940 --> 00:43:16,930
gonna keep you too long from your

00:43:14,930 --> 00:43:24,350
session we've got like two more minutes

00:43:16,930 --> 00:43:28,490
Coop's ETL port forward here - in sto

00:43:24,350 --> 00:43:34,490
system and then IP the port for Zipkin

00:43:28,490 --> 00:43:38,810
is 94 1 1 so we'll get a local port here

00:43:34,490 --> 00:43:40,910
and I can go to it on my laptop we're

00:43:38,810 --> 00:43:44,330
gonna pull this up let's see if who was

00:43:40,910 --> 00:43:47,810
right who is the best guesser amongst us

00:43:44,330 --> 00:43:50,150
all so we click on this and now we can

00:43:47,810 --> 00:43:53,540
actually see the trace data we actually

00:43:50,150 --> 00:43:56,270
can tell that the front-end is talking

00:43:53,540 --> 00:43:58,190
to bar first oh well what the hell is

00:43:56,270 --> 00:43:59,570
this the bar is talking to this mixer

00:43:58,190 --> 00:44:02,390
thing what the hell is the mixer thing

00:43:59,570 --> 00:44:03,980
but at least you're not guessing now no

00:44:02,390 --> 00:44:04,470
one could have seen that I'm talking to

00:44:03,980 --> 00:44:07,319
these

00:44:04,470 --> 00:44:09,839
things without these traces in place

00:44:07,319 --> 00:44:11,730
everything else is guesswork then you

00:44:09,839 --> 00:44:12,569
start to see the latency did your app

00:44:11,730 --> 00:44:14,339
get slower

00:44:12,569 --> 00:44:16,890
why did it get slower what was it

00:44:14,339 --> 00:44:19,140
talking to when it got slower and the

00:44:16,890 --> 00:44:20,609
last thing that we can also do and now

00:44:19,140 --> 00:44:22,319
wrap up here is what we get from the

00:44:20,609 --> 00:44:24,900
Prometheus data so what's actually

00:44:22,319 --> 00:44:26,460
happening here is these SCI cars as you

00:44:24,900 --> 00:44:28,530
communicate between these services

00:44:26,460 --> 00:44:30,480
they're sending up data to the control

00:44:28,530 --> 00:44:32,640
plane that is then mapping it to

00:44:30,480 --> 00:44:34,950
whatever using data dog Prometheus

00:44:32,640 --> 00:44:37,140
Zipkin you can add more things at that

00:44:34,950 --> 00:44:39,030
layer so that as you introduce new micro

00:44:37,140 --> 00:44:40,890
services into the cluster with the

00:44:39,030 --> 00:44:42,990
sidecar you actually get some visibility

00:44:40,890 --> 00:44:44,280
for free so let's do our last piece

00:44:42,990 --> 00:44:47,010
which is prometheus

00:44:44,280 --> 00:44:49,050
so Prometheus and Gor fauna you're going

00:44:47,010 --> 00:44:50,640
to get this out of the box so when you

00:44:49,050 --> 00:44:52,349
go and try this on your own

00:44:50,640 --> 00:44:55,650
the idea here is that you can add

00:44:52,349 --> 00:44:57,960
visibility to your setup by adopting

00:44:55,650 --> 00:44:59,400
something like this to you at least when

00:44:57,960 --> 00:45:01,500
you start your micro services I don't

00:44:59,400 --> 00:45:03,690
want to say journey such over you way

00:45:01,500 --> 00:45:05,369
you use thing you can actually do it

00:45:03,690 --> 00:45:08,119
with some type of visibility to see if

00:45:05,369 --> 00:45:11,369
you're doing it right so let's grab this

00:45:08,119 --> 00:45:13,619
and go final is actually port 3000 yeah

00:45:11,369 --> 00:45:16,460
3000 let's switch this and see what the

00:45:13,619 --> 00:45:16,460
system gives for free

00:45:21,250 --> 00:45:25,420
here and then we'll pull it up so

00:45:24,070 --> 00:45:28,420
without doing anything else to the app

00:45:25,420 --> 00:45:30,520
just standard and this will work with

00:45:28,420 --> 00:45:33,190
any app because we can actually pull a

00:45:30,520 --> 00:45:34,930
lot of data from many of these so we

00:45:33,190 --> 00:45:36,100
pull this up and out of the box it's

00:45:34,930 --> 00:45:38,200
going to at least give you some of the

00:45:36,100 --> 00:45:40,210
basics and a good starting point for a

00:45:38,200 --> 00:45:42,100
lot of people so just by having those

00:45:40,210 --> 00:45:43,540
sidecars in place we can actually start

00:45:42,100 --> 00:45:46,150
to see some of the data that's flowing

00:45:43,540 --> 00:45:47,830
through the system and since the sidecar

00:45:46,150 --> 00:45:49,540
actually understands or ISTE understands

00:45:47,830 --> 00:45:51,970
kubernetes you'd notice that it can

00:45:49,540 --> 00:45:53,680
actually label the services correctly

00:45:51,970 --> 00:45:55,630
without us doing any other do any other

00:45:53,680 --> 00:45:57,160
work right we can say hey the food

00:45:55,630 --> 00:45:59,530
service and the front end service it

00:45:57,160 --> 00:46:01,300
even does things like the version tag so

00:45:59,530 --> 00:46:02,650
as we start to do things here we can

00:46:01,300 --> 00:46:05,590
actually start to see how the services

00:46:02,650 --> 00:46:07,840
work right so this is how sto kubernetes

00:46:05,590 --> 00:46:09,430
and the whole entire stack gives you the

00:46:07,840 --> 00:46:12,190
app infrastructure you need before you

00:46:09,430 --> 00:46:13,690
can even think about doing micro

00:46:12,190 --> 00:46:15,090
services and with that in the

00:46:13,690 --> 00:46:22,269
presentation thank you

00:46:15,090 --> 00:46:22,269

YouTube URL: https://www.youtube.com/watch?v=lEGPYRjrpyw


