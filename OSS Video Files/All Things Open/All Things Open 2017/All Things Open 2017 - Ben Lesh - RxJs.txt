Title: All Things Open 2017 - Ben Lesh - RxJs
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:00,000 --> 00:00:06,720
way we could start this office what is

00:00:02,010 --> 00:00:09,719
rxjs it's the real answer might be kind

00:00:06,720 --> 00:00:11,040
of in how you use it but let's talk

00:00:09,719 --> 00:00:15,269
about some of the things that I've heard

00:00:11,040 --> 00:00:17,760
other people say about rxjs over the

00:00:15,269 --> 00:00:20,699
last couple years which is rxjs is hard

00:00:17,760 --> 00:00:22,320
what is RCS rxjs is hard I hear this a

00:00:20,699 --> 00:00:25,529
lot from a lot of people who are just

00:00:22,320 --> 00:00:27,480
getting started off with rxjs it's it's

00:00:25,529 --> 00:00:30,599
ok it's ok to think that it's hard I

00:00:27,480 --> 00:00:33,149
thought it was hard to once that's just

00:00:30,599 --> 00:00:35,640
for streaming data right that's it's a

00:00:33,149 --> 00:00:36,930
common it's a common misconception often

00:00:35,640 --> 00:00:38,750
used for streaming data that's not

00:00:36,930 --> 00:00:41,760
that's not it

00:00:38,750 --> 00:00:43,350
let's see Arceus is great if I want to

00:00:41,760 --> 00:00:45,719
make a stock ticker or something every

00:00:43,350 --> 00:00:47,460
single example that a lot of the

00:00:45,719 --> 00:00:49,170
examples I've given in every single

00:00:47,460 --> 00:00:52,680
example for years has been like a stock

00:00:49,170 --> 00:00:54,660
ticker or the other one is a look ahead

00:00:52,680 --> 00:00:55,920
search what if I want to do something

00:00:54,660 --> 00:00:57,360
more complicated than to look ahead

00:00:55,920 --> 00:01:00,440
search like how do I even do that with

00:00:57,360 --> 00:01:02,760
rxjs that's that's it's a common thing

00:01:00,440 --> 00:01:04,320
I'm not actually attributing these to

00:01:02,760 --> 00:01:06,770
anything Jeff crosses beard does not

00:01:04,320 --> 00:01:08,820
talk he does have a Twitter account but

00:01:06,770 --> 00:01:12,540
Jeff cross is a former member of the

00:01:08,820 --> 00:01:14,250
angular team let's see my name is Ben

00:01:12,540 --> 00:01:16,229
Lesh I am a software engineer at Google

00:01:14,250 --> 00:01:18,000
I work on the alkali team that's what

00:01:16,229 --> 00:01:21,060
this logo is here it's a it's an

00:01:18,000 --> 00:01:22,680
internal team at Google that works on

00:01:21,060 --> 00:01:26,100
internal tooling that works with angular

00:01:22,680 --> 00:01:27,540
and rxjs I don't work at on arcs yes at

00:01:26,100 --> 00:01:30,810
my day job it's an open source project

00:01:27,540 --> 00:01:35,430
or work on at night like Batman except

00:01:30,810 --> 00:01:37,049
for way less cool and I used to work at

00:01:35,430 --> 00:01:40,590
Netflix so at Netflix I actually worked

00:01:37,049 --> 00:01:43,229
with react and node and ember with rxjs

00:01:40,590 --> 00:01:44,579
so I've got the angular and react to

00:01:43,229 --> 00:01:45,990
node and ember and those sorts of things

00:01:44,579 --> 00:01:49,259
if anyone wants to ask me questions

00:01:45,990 --> 00:01:51,630
about other frameworks with rxjs

00:01:49,259 --> 00:01:53,790
afterwards or on Twitter or whatever

00:01:51,630 --> 00:01:55,770
happy to answer those questions have

00:01:53,790 --> 00:01:57,930
some experience there this talk I'm

00:01:55,770 --> 00:01:59,420
gonna try to focus with angular mostly

00:01:57,930 --> 00:02:02,729
because the example I have is in angular

00:01:59,420 --> 00:02:06,119
but other things like I said I'm the

00:02:02,729 --> 00:02:08,190
rxjs 5 5 and up project lead I am NOT

00:02:06,119 --> 00:02:09,750
the creative art creator of rxjs that's

00:02:08,190 --> 00:02:13,380
a guy named Matt Papa sucky who works at

00:02:09,750 --> 00:02:14,960
Microsoft arc has been around for nine

00:02:13,380 --> 00:02:17,460
years or something a pretty long time

00:02:14,960 --> 00:02:19,650
you can find me on Twitter at Ben Lesh

00:02:17,460 --> 00:02:21,060
if you have questions about rxjs or you

00:02:19,650 --> 00:02:22,680
need help with something you can

00:02:21,060 --> 00:02:24,380
actually reach out to me and I will try

00:02:22,680 --> 00:02:26,610
to answer everybody's questions if I can

00:02:24,380 --> 00:02:28,080
you know if they're questions about how

00:02:26,610 --> 00:02:30,020
to do something in particular I would

00:02:28,080 --> 00:02:31,860
recommend stack overflow or something

00:02:30,020 --> 00:02:33,240
most of the time because then other

00:02:31,860 --> 00:02:34,230
people might get answers that the

00:02:33,240 --> 00:02:35,940
answers are the same question you're

00:02:34,230 --> 00:02:38,450
asking but but yeah I do try to help

00:02:35,940 --> 00:02:40,560
everybody out I can't answer questions

00:02:38,450 --> 00:02:43,080
so here's the evolution of things I've

00:02:40,560 --> 00:02:44,970
said about RCS day one I was like what

00:02:43,080 --> 00:02:46,440
the hell is this thing it looks like

00:02:44,970 --> 00:02:49,110
another load - why do I need another

00:02:46,440 --> 00:02:49,860
load - this is weird then eventually I

00:02:49,110 --> 00:02:51,780
was like whoa they're kind of like

00:02:49,860 --> 00:02:53,970
promises but with more than one value

00:02:51,780 --> 00:02:57,030
okay it's one way to think about it's

00:02:53,970 --> 00:02:58,110
not totally inaccurate and then and it

00:02:57,030 --> 00:02:59,910
kind of involved knows like no it's more

00:02:58,110 --> 00:03:02,610
about observables and observables are an

00:02:59,910 --> 00:03:04,680
async type promises Racing type that's

00:03:02,610 --> 00:03:07,230
actually not totally true observables

00:03:04,680 --> 00:03:09,510
aren't always async then I would call it

00:03:07,230 --> 00:03:11,940
low - for async low - if for those of

00:03:09,510 --> 00:03:14,370
you who are familiar is a library for

00:03:11,940 --> 00:03:17,730
dealing with iterable sets and arrays

00:03:14,370 --> 00:03:19,110
and your you've got a you've got a lot

00:03:17,730 --> 00:03:20,280
of different functions you can zip them

00:03:19,110 --> 00:03:22,140
and map them in and do all these

00:03:20,280 --> 00:03:26,850
different combinators with with arrays

00:03:22,140 --> 00:03:28,170
synchronously so then I moved down and

00:03:26,850 --> 00:03:29,820
said well observables which are

00:03:28,170 --> 00:03:31,050
concurrency primitive and that's just

00:03:29,820 --> 00:03:32,700
confusing everybody that's not really

00:03:31,050 --> 00:03:34,530
helping helping the situation when you

00:03:32,700 --> 00:03:36,120
explain it and now I kind of just land

00:03:34,530 --> 00:03:38,580
on their observables which are a push

00:03:36,120 --> 00:03:42,540
just push based sets so that's about

00:03:38,580 --> 00:03:44,070
it's about pushing values at you so arcs

00:03:42,540 --> 00:03:46,290
GS is often used to deal with a

00:03:44,070 --> 00:03:47,850
synchrony common sources of a synchrony

00:03:46,290 --> 00:03:51,209
in web development you'll find are

00:03:47,850 --> 00:03:53,310
things like Dom events Ajax WebSockets

00:03:51,209 --> 00:03:54,480
animations those sorts of things

00:03:53,310 --> 00:03:56,280
server-sent events which are a lot like

00:03:54,480 --> 00:03:58,080
WebSockets use push values at you and

00:03:56,280 --> 00:04:00,209
this is not an exhaustive list I mean

00:03:58,080 --> 00:04:01,770
there's a whole mess of different things

00:04:00,209 --> 00:04:03,570
web speech API is and things like that

00:04:01,770 --> 00:04:06,360
that you that you have to deal with in

00:04:03,570 --> 00:04:08,760
web developing these days but rx GS is

00:04:06,360 --> 00:04:11,360
not just about a synchrony it's about

00:04:08,760 --> 00:04:13,020
pushing values like I said so

00:04:11,360 --> 00:04:16,290
synchronous thing is you can deal with

00:04:13,020 --> 00:04:17,820
in rxjs single values so strings and

00:04:16,290 --> 00:04:20,160
numbers and those sorts of things

00:04:17,820 --> 00:04:23,100
arrays so you could loop over an array

00:04:20,160 --> 00:04:24,810
and push values out if you wanted you

00:04:23,100 --> 00:04:26,510
can deal with things like iterables so

00:04:24,810 --> 00:04:28,700
anything like like a gen

00:04:26,510 --> 00:04:30,250
function or strings are iterable if you

00:04:28,700 --> 00:04:34,130
want to use a string in that manner

00:04:30,250 --> 00:04:35,930
pretty much anything you can pass to or

00:04:34,130 --> 00:04:38,240
return from a function you could you

00:04:35,930 --> 00:04:39,680
could deal with with have observables

00:04:38,240 --> 00:04:44,300
emit either synchronously or

00:04:39,680 --> 00:04:47,000
asynchronously so I'm gonna get into

00:04:44,300 --> 00:04:49,010
this talk and this talk is gonna I want

00:04:47,000 --> 00:04:51,230
to do some more advanced stuff show some

00:04:49,010 --> 00:04:52,820
cool things that you can do with rxjs if

00:04:51,230 --> 00:04:54,890
you don't have a lot of experience with

00:04:52,820 --> 00:04:57,170
rxjs you're gonna be like whoa this is

00:04:54,890 --> 00:04:58,430
crazy I'm not worried about you learning

00:04:57,170 --> 00:05:00,980
how to do everything

00:04:58,430 --> 00:05:03,320
during the confines of 45-minute talk

00:05:00,980 --> 00:05:04,760
right like that's it's a little silly

00:05:03,320 --> 00:05:05,810
what I want to do is hopefully get you

00:05:04,760 --> 00:05:08,120
excited about some of the things that

00:05:05,810 --> 00:05:10,400
can do and maybe provides some

00:05:08,120 --> 00:05:12,290
additional tools for people to use it

00:05:10,400 --> 00:05:14,660
already have some experience with rxjs

00:05:12,290 --> 00:05:16,730
that sort of thing but so a few of you

00:05:14,660 --> 00:05:18,470
that are not using rxjs already or don't

00:05:16,730 --> 00:05:20,330
know quite what it is might be missing

00:05:18,470 --> 00:05:22,460
some context like what are observables

00:05:20,330 --> 00:05:23,960
how do you subscribe and unsubscribe to

00:05:22,460 --> 00:05:26,420
observables or how do you get values out

00:05:23,960 --> 00:05:27,770
of them and what our operators I'm going

00:05:26,420 --> 00:05:28,850
to talk a lot about these particular

00:05:27,770 --> 00:05:30,950
things so I'm going to go over those

00:05:28,850 --> 00:05:31,370
really quick this is just a quick

00:05:30,950 --> 00:05:34,580
summary

00:05:31,370 --> 00:05:35,900
so observables what I want you to do is

00:05:34,580 --> 00:05:37,220
I want you to think of an observable as

00:05:35,900 --> 00:05:39,920
a function a function that's shaped a

00:05:37,220 --> 00:05:42,110
lot like this so I've got this function

00:05:39,920 --> 00:05:44,240
that I've named an observable and you're

00:05:42,110 --> 00:05:46,460
passing an observer object to it and the

00:05:44,240 --> 00:05:49,160
observer object is just an object that's

00:05:46,460 --> 00:05:50,870
got a next air and complete method to it

00:05:49,160 --> 00:05:52,880
so in order to execute this function I

00:05:50,870 --> 00:05:54,920
call it like any other function and I

00:05:52,880 --> 00:05:57,290
pass this object to it and inside of

00:05:54,920 --> 00:05:58,970
that function I call next I call

00:05:57,290 --> 00:06:00,560
complete I called next three times in

00:05:58,970 --> 00:06:01,940
this case and then I call complete to

00:06:00,560 --> 00:06:04,070
notify that the observable is done

00:06:01,940 --> 00:06:06,380
pushing values but there's a problem

00:06:04,070 --> 00:06:07,910
with implementing observables as a

00:06:06,380 --> 00:06:09,770
function you know why why not just have

00:06:07,910 --> 00:06:11,240
why do we need rxjs why do you need an

00:06:09,770 --> 00:06:13,730
observable type if this is all in

00:06:11,240 --> 00:06:17,240
observable is well the problem is pretty

00:06:13,730 --> 00:06:18,920
simple what happens if I next after I

00:06:17,240 --> 00:06:20,900
say it's completed right I'm saying

00:06:18,920 --> 00:06:23,120
here's all the values I'm done wait no

00:06:20,900 --> 00:06:24,980
just kidding here's another value right

00:06:23,120 --> 00:06:26,930
we that's not good we don't want to do

00:06:24,980 --> 00:06:28,790
that and in this scenario this would

00:06:26,930 --> 00:06:30,620
totally still next another value at you

00:06:28,790 --> 00:06:34,760
so we need to provide some sort of

00:06:30,620 --> 00:06:36,320
guarantees so in order to provide these

00:06:34,760 --> 00:06:38,480
guarantees we wrap it in a class and

00:06:36,320 --> 00:06:39,920
inside the inner workings of that class

00:06:38,480 --> 00:06:41,990
it's still just us

00:06:39,920 --> 00:06:43,160
following this function but we're gonna

00:06:41,990 --> 00:06:45,020
call this function when we call

00:06:43,160 --> 00:06:47,030
subscribe on an instance of this class

00:06:45,020 --> 00:06:48,620
and what we're gonna do is we're gonna

00:06:47,030 --> 00:06:50,870
take the observer object that you've

00:06:48,620 --> 00:06:52,550
given us or the three callbacks that

00:06:50,870 --> 00:06:54,350
you've given us and wrap them in an

00:06:52,550 --> 00:06:56,330
observer object and we're gonna wrap

00:06:54,350 --> 00:06:58,850
them in a safer observer object that

00:06:56,330 --> 00:07:01,280
doesn't allow you to next after you

00:06:58,850 --> 00:07:04,100
complete or at the very least won't send

00:07:01,280 --> 00:07:06,410
that next too long so and that looks

00:07:04,100 --> 00:07:07,940
like this so now we're this is this is

00:07:06,410 --> 00:07:12,080
the shape of the observable that you

00:07:07,940 --> 00:07:13,340
would see in rxjs there's one more thing

00:07:12,080 --> 00:07:15,320
about observables that's worth noting

00:07:13,340 --> 00:07:17,870
they can tear things down so if this

00:07:15,320 --> 00:07:19,430
function does something like set up some

00:07:17,870 --> 00:07:22,430
resource in this case it's setting up a

00:07:19,430 --> 00:07:25,430
timeout you can actually have this

00:07:22,430 --> 00:07:27,560
function teardown that timeout with this

00:07:25,430 --> 00:07:30,560
handy-dandy unsubscribe call it returns

00:07:27,560 --> 00:07:33,170
to you so you can say hey go ahead and

00:07:30,560 --> 00:07:34,670
start doing this work and then later on

00:07:33,170 --> 00:07:35,960
you can notify I don't care about you

00:07:34,670 --> 00:07:37,760
doing this work anymore I want you to

00:07:35,960 --> 00:07:39,950
stop and teardown this gives us

00:07:37,760 --> 00:07:41,690
something really nice which is called

00:07:39,950 --> 00:07:43,940
deterministic memory management which

00:07:41,690 --> 00:07:45,320
means if I wrap you know an event

00:07:43,940 --> 00:07:47,240
listener or something in this and in my

00:07:45,320 --> 00:07:49,460
teardown I remove the event listener I'm

00:07:47,240 --> 00:07:51,170
guaranteed that when I unsubscribe or

00:07:49,460 --> 00:07:52,820
when it completes or when it airs it's

00:07:51,170 --> 00:07:54,320
gonna call that teardown logic and it's

00:07:52,820 --> 00:07:56,660
gonna make sure my event listeners are

00:07:54,320 --> 00:08:00,280
removed or my set timeouts cleared or my

00:07:56,660 --> 00:08:03,770
WebSockets you know closed or whatever

00:08:00,280 --> 00:08:05,330
so observables are basically functions

00:08:03,770 --> 00:08:07,670
they don't do anything until you

00:08:05,330 --> 00:08:09,680
subscribe to them they tie an observer

00:08:07,670 --> 00:08:12,040
to some data producer they push and

00:08:09,680 --> 00:08:14,240
values out via this observer object and

00:08:12,040 --> 00:08:16,310
they can set up the data producer

00:08:14,240 --> 00:08:18,890
whatever that is could be a loop over an

00:08:16,310 --> 00:08:23,570
array could be like I said a WebSocket

00:08:18,890 --> 00:08:25,040
or any sort of event of any sort and it

00:08:23,570 --> 00:08:29,870
can also tear down that data producer

00:08:25,040 --> 00:08:33,260
via this subscription contract but in

00:08:29,870 --> 00:08:36,620
more small summary terms observables are

00:08:33,260 --> 00:08:38,600
just sets of values over time so they're

00:08:36,620 --> 00:08:41,270
they're sets of events and because

00:08:38,600 --> 00:08:42,830
they're sets they can be transformed so

00:08:41,270 --> 00:08:44,030
all sets can be transformed so here I've

00:08:42,830 --> 00:08:44,660
got an observable and I'm using these

00:08:44,030 --> 00:08:48,470
operators

00:08:44,660 --> 00:08:49,730
filter map can cat map again combining

00:08:48,470 --> 00:08:50,780
different observables together or

00:08:49,730 --> 00:08:52,400
mapping and filtering you know it really

00:08:50,780 --> 00:08:53,300
need to know exactly what this does but

00:08:52,400 --> 00:08:54,980
you can kind of look at it

00:08:53,300 --> 00:08:56,870
maybe guess these are pretty pretty

00:08:54,980 --> 00:08:59,360
simple things what we're doing is we're

00:08:56,870 --> 00:09:00,769
filtering observable down to a new

00:08:59,360 --> 00:09:02,750
observable and then we filter that

00:09:00,769 --> 00:09:05,390
observable down to a new observable we

00:09:02,750 --> 00:09:06,920
map it to a new observable and then we

00:09:05,390 --> 00:09:08,750
can cat that will soon as that when

00:09:06,920 --> 00:09:10,339
completes we're gonna we're going to

00:09:08,750 --> 00:09:11,720
concatenate another observable onto the

00:09:10,339 --> 00:09:14,209
end of that that returns an observable

00:09:11,720 --> 00:09:16,519
and so on and so forth so we're we're

00:09:14,209 --> 00:09:19,329
transforming sets and this might look

00:09:16,519 --> 00:09:22,100
more familiar if I used arrays instead

00:09:19,329 --> 00:09:23,209
right so that you can you can all see

00:09:22,100 --> 00:09:24,589
that there's not much of a difference

00:09:23,209 --> 00:09:27,529
between doing this with an observable

00:09:24,589 --> 00:09:28,880
and doing this with an array right so

00:09:27,529 --> 00:09:30,500
then in this case we're filtering the

00:09:28,880 --> 00:09:31,040
array to a new array we're mapping it to

00:09:30,500 --> 00:09:32,720
a new array

00:09:31,040 --> 00:09:34,100
we're concatenate in that to another

00:09:32,720 --> 00:09:35,570
array and get a new array back and then

00:09:34,100 --> 00:09:37,640
we're for reaching over it right it's

00:09:35,570 --> 00:09:39,470
it's the same sort of thing and the

00:09:37,640 --> 00:09:41,810
reason it works like this is because

00:09:39,470 --> 00:09:45,800
they are both sets or collections of

00:09:41,810 --> 00:09:47,329
things I've got more on the basics of

00:09:45,800 --> 00:09:49,579
RCS and the inner workings and these

00:09:47,329 --> 00:09:51,140
things in this this particular talk it's

00:09:49,579 --> 00:09:53,510
linked in this when I put the slides up

00:09:51,140 --> 00:09:56,630
you'll you'll be able to go watch that I

00:09:53,510 --> 00:09:59,329
don't want to hover so much in the

00:09:56,630 --> 00:10:00,730
academics of observables I really kind

00:09:59,329 --> 00:10:03,470
of want to show you what they can do so

00:10:00,730 --> 00:10:06,730
I'm gonna go through an example and this

00:10:03,470 --> 00:10:09,980
is more a 300 level talk instead of 101

00:10:06,730 --> 00:10:12,110
but you can see some cool cool things in

00:10:09,980 --> 00:10:13,310
this I hope so what we're gonna what

00:10:12,110 --> 00:10:15,170
we're gonna do is I have this simple

00:10:13,310 --> 00:10:18,800
newsfeed app that's written in angular

00:10:15,170 --> 00:10:21,380
and all it does is it just gets a list

00:10:18,800 --> 00:10:23,510
of data via Ajax requests and displays

00:10:21,380 --> 00:10:24,980
it that's all it does right now but I

00:10:23,510 --> 00:10:26,720
want to add two features to it the first

00:10:24,980 --> 00:10:28,880
feature I want to add is well how about

00:10:26,720 --> 00:10:31,550
we just pull this so every now and then

00:10:28,880 --> 00:10:34,459
it refreshes the newsfeed let's just go

00:10:31,550 --> 00:10:37,010
get the data on an interval of some sort

00:10:34,459 --> 00:10:39,050
and display it and then the second

00:10:37,010 --> 00:10:41,120
feature I want to add is a pulldown to

00:10:39,050 --> 00:10:42,890
refresh so I don't know how many of you

00:10:41,120 --> 00:10:45,470
use Twitter or other mobile apps where

00:10:42,890 --> 00:10:48,140
you take your finger you swipe down and

00:10:45,470 --> 00:10:48,740
when you let go if you let go past the

00:10:48,140 --> 00:10:51,199
right point

00:10:48,740 --> 00:10:53,240
it loads new data if you let go above

00:10:51,199 --> 00:10:55,370
that point it does not load new data

00:10:53,240 --> 00:10:59,690
it's a fairly common feature in web apps

00:10:55,370 --> 00:11:02,120
now it's also pretty complex to add so

00:10:59,690 --> 00:11:04,640
the basic app structure as it stands and

00:11:02,120 --> 00:11:05,240
again apologize apologies to you that

00:11:04,640 --> 00:11:07,820
those are

00:11:05,240 --> 00:11:11,120
that don't use angular but this would be

00:11:07,820 --> 00:11:13,730
pretty similar even in react honestly is

00:11:11,120 --> 00:11:15,350
we have a component for our latest news

00:11:13,730 --> 00:11:17,060
which just lists out the latest news and

00:11:15,350 --> 00:11:19,370
does the job of going and getting in

00:11:17,060 --> 00:11:22,610
this Ajax stuff and then we have a we

00:11:19,370 --> 00:11:24,500
have a news feed service which gives us

00:11:22,610 --> 00:11:26,779
back the observable that does the the

00:11:24,500 --> 00:11:30,050
Ajax request so that gets used inside of

00:11:26,779 --> 00:11:31,820
our latest news component so the latest

00:11:30,050 --> 00:11:34,270
news component and angular land looks

00:11:31,820 --> 00:11:36,709
like this I've got my component

00:11:34,270 --> 00:11:38,300
directive up there at the top and it's

00:11:36,709 --> 00:11:40,040
it's just saying this class here is a

00:11:38,300 --> 00:11:40,910
component here's where you can find the

00:11:40,040 --> 00:11:42,620
template

00:11:40,910 --> 00:11:44,149
here's we can find the stylesheet the

00:11:42,620 --> 00:11:45,440
selector is this so that's how you know

00:11:44,149 --> 00:11:46,610
how to use it in other templates this is

00:11:45,440 --> 00:11:48,589
all angular idioms

00:11:46,610 --> 00:11:50,839
but inside the class part is just a

00:11:48,589 --> 00:11:52,790
basic class and it's got a property

00:11:50,839 --> 00:11:54,950
called news dollar sign that's an

00:11:52,790 --> 00:11:56,570
observable that dollar sign is just kind

00:11:54,950 --> 00:11:59,420
of to help us see what's in observable

00:11:56,570 --> 00:12:02,810
and what's not in this app so news

00:11:59,420 --> 00:12:04,640
dollar sign is an observable of an ajax

00:12:02,810 --> 00:12:05,810
request to get the news data that's all

00:12:04,640 --> 00:12:08,000
it is right here and we're getting that

00:12:05,810 --> 00:12:10,310
off of news feed service and in my

00:12:08,000 --> 00:12:12,260
constructor i'm injecting via angular

00:12:10,310 --> 00:12:15,829
dependency injection our news feed

00:12:12,260 --> 00:12:19,310
service but it's a pretty plain class as

00:12:15,829 --> 00:12:21,770
it stands the latest news template looks

00:12:19,310 --> 00:12:24,440
like this what's what's noteworthy in

00:12:21,770 --> 00:12:26,600
here other than the other get the ng

00:12:24,440 --> 00:12:28,520
force for looping over things for in

00:12:26,600 --> 00:12:29,810
angular the one thing that's kind of

00:12:28,520 --> 00:12:32,360
interesting in here is i'm using this

00:12:29,810 --> 00:12:34,370
pipe async idiom this is angular has

00:12:32,360 --> 00:12:35,720
first-class handling for observables

00:12:34,370 --> 00:12:36,079
which is one of the reasons that I kind

00:12:35,720 --> 00:12:40,339
of like it

00:12:36,079 --> 00:12:42,470
um and what this says is hey in the

00:12:40,339 --> 00:12:43,310
context of this ng 4 at the top and that

00:12:42,470 --> 00:12:47,209
article tag

00:12:43,310 --> 00:12:49,490
I want to bind to I want to subscribe to

00:12:47,209 --> 00:12:51,649
this news observable and bind to its

00:12:49,490 --> 00:12:53,630
values as they're outputting and when it

00:12:51,649 --> 00:12:55,730
outputs a value it's an array I'm gonna

00:12:53,630 --> 00:12:57,500
loop over that array and take the values

00:12:55,730 --> 00:13:00,860
from that and display them in here as my

00:12:57,500 --> 00:13:02,959
news so this this pipe async actually

00:13:00,860 --> 00:13:04,940
does the work for me of subscribing and

00:13:02,959 --> 00:13:06,589
even unsubscribing when the components

00:13:04,940 --> 00:13:08,630
removed from the view that's that's a

00:13:06,589 --> 00:13:10,850
nice thing that angular adds if you were

00:13:08,630 --> 00:13:12,440
going to do this and react or ember or

00:13:10,850 --> 00:13:15,260
something else you would have to have a

00:13:12,440 --> 00:13:16,730
component that did a component did mount

00:13:15,260 --> 00:13:18,470
and then you would subscribe and then

00:13:16,730 --> 00:13:18,680
you would unsubscribe in your component

00:13:18,470 --> 00:13:21,199
will

00:13:18,680 --> 00:13:23,059
mount or that whatever the equivalent is

00:13:21,199 --> 00:13:24,559
in Embera it's been a while since I've

00:13:23,059 --> 00:13:26,809
done this number but it's roughly the

00:13:24,559 --> 00:13:29,269
same thing you can do the same thing in

00:13:26,809 --> 00:13:30,860
angular also with on in it and on

00:13:29,269 --> 00:13:33,980
destroy if you want it if you want to do

00:13:30,860 --> 00:13:36,350
it manually the new speed service is a

00:13:33,980 --> 00:13:38,240
simple class the annotation at the top

00:13:36,350 --> 00:13:40,759
is just to say that it's injectable for

00:13:38,240 --> 00:13:44,449
angular purposes but it's got a single

00:13:40,759 --> 00:13:46,639
method on it that is just it's just

00:13:44,449 --> 00:13:48,290
getting the news it's basically saying

00:13:46,639 --> 00:13:48,949
here's an observable that's an ajax

00:13:48,290 --> 00:13:50,990
request

00:13:48,949 --> 00:13:52,670
i'm gonna map it to get the json object

00:13:50,990 --> 00:13:54,499
off of it and then i've got this error

00:13:52,670 --> 00:13:56,480
handling here that says hey if there's

00:13:54,499 --> 00:13:57,980
an error when i go to get this I'm gonna

00:13:56,480 --> 00:13:59,809
log it and then I'm a returned empty

00:13:57,980 --> 00:14:01,279
which is kind of a no op just log that

00:13:59,809 --> 00:14:02,449
there was an error but don't send the

00:14:01,279 --> 00:14:04,399
arrow down the chain and break anything

00:14:02,449 --> 00:14:08,959
else I just wanted to know that there

00:14:04,399 --> 00:14:11,059
was an error in my Ajax request so for

00:14:08,959 --> 00:14:14,209
for purposes of this example I actually

00:14:11,059 --> 00:14:16,009
have this little bit here you don't have

00:14:14,209 --> 00:14:18,559
to worry about it I essentially have

00:14:16,009 --> 00:14:19,519
have kind of mocked the Ajax behavior so

00:14:18,559 --> 00:14:21,069
I didn't have to write a whole server

00:14:19,519 --> 00:14:23,120
that actually gave me this stuff but

00:14:21,069 --> 00:14:24,679
it's in there if you want to look at the

00:14:23,120 --> 00:14:26,240
slides afterwards it's not a big deal

00:14:24,679 --> 00:14:27,920
but the end of the day it's just kind of

00:14:26,240 --> 00:14:29,569
to mock the same behavior and one of the

00:14:27,920 --> 00:14:31,910
interesting things about this is because

00:14:29,569 --> 00:14:33,620
observables can represent any value over

00:14:31,910 --> 00:14:36,470
any amount of time so any shaped thing

00:14:33,620 --> 00:14:38,089
if you want to mock an ajax request it's

00:14:36,470 --> 00:14:39,470
as simple as creating an observable that

00:14:38,089 --> 00:14:41,179
gives you an ajax request it's the same

00:14:39,470 --> 00:14:43,220
thing with promises right you can say I

00:14:41,179 --> 00:14:45,470
expected a promise of this value so I

00:14:43,220 --> 00:14:48,139
can return promise resolve some values

00:14:45,470 --> 00:14:49,490
or I can actually build a something that

00:14:48,139 --> 00:14:52,910
returns a promise that gives me those

00:14:49,490 --> 00:14:56,110
values so let's add that update on an

00:14:52,910 --> 00:14:58,639
interval feature so in order to do this

00:14:56,110 --> 00:15:00,170
we go back to our latest news component

00:14:58,639 --> 00:15:02,149
and what I'm gonna do is I'm gonna add

00:15:00,170 --> 00:15:03,499
another property and I'm gonna call it

00:15:02,149 --> 00:15:05,870
update and news triggers and this is

00:15:03,499 --> 00:15:07,129
just this is just a property that it's

00:15:05,870 --> 00:15:11,329
gonna be an observable that every time

00:15:07,129 --> 00:15:13,790
it fires I want to have it somehow tell

00:15:11,329 --> 00:15:16,629
the news to update tell it to go get go

00:15:13,790 --> 00:15:22,220
fetch via Ajax request another another

00:15:16,629 --> 00:15:24,470
set of news so what this what this

00:15:22,220 --> 00:15:26,569
observable timer thing means is is it

00:15:24,470 --> 00:15:29,889
saying here's a I want an observable

00:15:26,569 --> 00:15:32,180
back that will emit a value immediately

00:15:29,889 --> 00:15:34,520
zero milliseconds and then every

00:15:32,180 --> 00:15:36,200
300 or 3,000 milliseconds afterwards for

00:15:34,520 --> 00:15:39,680
every three seconds afterwards and it

00:15:36,200 --> 00:15:40,970
emits values 0 1 2 and so on not that we

00:15:39,680 --> 00:15:43,310
care about those numbers but that's what

00:15:40,970 --> 00:15:45,140
it does and what we're gonna do is we're

00:15:43,310 --> 00:15:47,779
just gonna say ok well every time that

00:15:45,140 --> 00:15:50,330
emits a value I'm going to switch map

00:15:47,779 --> 00:15:52,730
that into this Ajax request and what

00:15:50,330 --> 00:15:54,709
that means is those values come in I'm

00:15:52,730 --> 00:15:56,839
going to map it into a new observable

00:15:54,709 --> 00:15:59,360
and then subscribe to that observable

00:15:56,839 --> 00:16:01,730
and in the context context of switch map

00:15:59,360 --> 00:16:03,380
if there was a request already still

00:16:01,730 --> 00:16:05,240
sitting there waiting it's just going to

00:16:03,380 --> 00:16:06,980
abort that previous request via

00:16:05,240 --> 00:16:09,230
unsubscribe and then subscribe to the

00:16:06,980 --> 00:16:11,240
new one it just got so it's kind of it's

00:16:09,230 --> 00:16:13,040
kind of creating another observable via

00:16:11,240 --> 00:16:15,110
a mapping function and then subscribing

00:16:13,040 --> 00:16:17,330
to it and pumping its values out through

00:16:15,110 --> 00:16:22,250
the resulting observable so what this

00:16:17,330 --> 00:16:24,020
means is our news our news observable

00:16:22,250 --> 00:16:25,640
here that we had before it still gives

00:16:24,020 --> 00:16:28,430
us a value right away because the timer

00:16:25,640 --> 00:16:30,770
says here's a value right now at 0

00:16:28,430 --> 00:16:32,470
milliseconds map it to an AJAX request

00:16:30,770 --> 00:16:34,550
subscribe to it send the Ajax request

00:16:32,470 --> 00:16:36,740
get the values when that has come back

00:16:34,550 --> 00:16:38,630
and it'll go about it'll go up and

00:16:36,740 --> 00:16:42,200
display them because I'm using that pipe

00:16:38,630 --> 00:16:43,970
async in my in my template and then when

00:16:42,200 --> 00:16:46,100
the next value arrives it'll do the same

00:16:43,970 --> 00:16:47,570
thing so over and over and over again

00:16:46,100 --> 00:16:49,940
we're feeding into this or this is

00:16:47,570 --> 00:16:51,980
reactive programming or each step is

00:16:49,940 --> 00:16:55,880
reacting to the notifications from the

00:16:51,980 --> 00:16:57,410
previous step so here's what it looks

00:16:55,880 --> 00:17:00,050
like I've set this to 3 seconds for

00:16:57,410 --> 00:17:03,890
visibility I've got this video and if

00:17:00,050 --> 00:17:05,420
you watch you can see the times in over

00:17:03,890 --> 00:17:08,089
the right-hand side kind of changed and

00:17:05,420 --> 00:17:10,610
since this is generated generated news

00:17:08,089 --> 00:17:12,439
data that's obviously not very real you

00:17:10,610 --> 00:17:14,420
know the rest of it doesn't look like

00:17:12,439 --> 00:17:15,920
it's changing that much but how often

00:17:14,420 --> 00:17:17,360
hopefully news doesn't change every

00:17:15,920 --> 00:17:21,350
three seconds news is horrible nowadays

00:17:17,360 --> 00:17:22,850
but but yeah so this is China so we can

00:17:21,350 --> 00:17:26,540
kind of see that well now look this is

00:17:22,850 --> 00:17:28,069
this is cool this is updating so this is

00:17:26,540 --> 00:17:29,360
things to notice about this what we

00:17:28,069 --> 00:17:30,830
actually did here is we kind of worked

00:17:29,360 --> 00:17:34,880
our way backwards we started with a

00:17:30,830 --> 00:17:36,710
situation where we had the minimal thing

00:17:34,880 --> 00:17:38,480
that we needed to display the news which

00:17:36,710 --> 00:17:40,460
was we just made the Ajax request once

00:17:38,480 --> 00:17:41,990
and then we're like okay well we wanted

00:17:40,460 --> 00:17:44,720
to update an interval so then we made an

00:17:41,990 --> 00:17:48,380
interval and then had it the interval

00:17:44,720 --> 00:17:49,940
feed into the original the original news

00:17:48,380 --> 00:17:54,169
request right said with the switch map

00:17:49,940 --> 00:17:56,150
to make it react to that interval so

00:17:54,169 --> 00:17:57,980
let's get to the harder one pulldown to

00:17:56,150 --> 00:18:02,179
reload this one is a lot more

00:17:57,980 --> 00:18:03,590
complicated I just know that I'm gonna

00:18:02,179 --> 00:18:08,270
spill this on my laptop halfway through

00:18:03,590 --> 00:18:10,070
the talk and that'll be exciting so pull

00:18:08,270 --> 00:18:11,570
down to reload the reason why it's

00:18:10,070 --> 00:18:13,850
complicated if you think about all the

00:18:11,570 --> 00:18:16,669
things that this involves so what we're

00:18:13,850 --> 00:18:18,380
saying is when the user touches and

00:18:16,669 --> 00:18:19,970
pulls down so there's actually two

00:18:18,380 --> 00:18:22,360
events there you've got a touch start

00:18:19,970 --> 00:18:24,530
you've got touch movements right as

00:18:22,360 --> 00:18:26,210
they're touching and pull down we want

00:18:24,530 --> 00:18:28,750
to show a marker next to where their

00:18:26,210 --> 00:18:31,250
their finger is roughly speaking and

00:18:28,750 --> 00:18:33,080
it's got to move along with them all

00:18:31,250 --> 00:18:34,820
right so that's one part if they move

00:18:33,080 --> 00:18:37,490
far enough and release then we want to

00:18:34,820 --> 00:18:40,580
trigger a load and start animating that

00:18:37,490 --> 00:18:43,610
marker if they don't move far enough and

00:18:40,580 --> 00:18:45,080
they let go then we want to have that

00:18:43,610 --> 00:18:47,419
marker animate back to where it came

00:18:45,080 --> 00:18:48,770
from and in the event that they are

00:18:47,419 --> 00:18:50,539
loading something and that spinner is

00:18:48,770 --> 00:18:52,159
going when that load is finished we want

00:18:50,539 --> 00:18:54,350
to then animate it back to where it came

00:18:52,159 --> 00:18:58,460
from so there's there's a lot more

00:18:54,350 --> 00:19:01,220
involved with this one thing I do know

00:18:58,460 --> 00:19:03,140
is pull down events have this drag and

00:19:01,220 --> 00:19:04,490
drop sort of thing and drag and drop is

00:19:03,140 --> 00:19:07,460
something I cover in a lot of the basic

00:19:04,490 --> 00:19:08,780
rxjs talks that I do because it's a kind

00:19:07,460 --> 00:19:11,630
of a simple way to show the power of

00:19:08,780 --> 00:19:14,720
being able to compose events as sets of

00:19:11,630 --> 00:19:17,150
things right so in a drag-and-drop

00:19:14,720 --> 00:19:19,130
scenario with either a mouse or touch

00:19:17,150 --> 00:19:21,890
movements it looks pretty much the same

00:19:19,130 --> 00:19:23,539
where you get your your touch starts and

00:19:21,890 --> 00:19:25,220
your touch moves in your touch ends and

00:19:23,539 --> 00:19:28,520
what we're saying in this case is we're

00:19:25,220 --> 00:19:30,500
saying for every touchstart event I want

00:19:28,520 --> 00:19:33,289
to start taking all the touch movements

00:19:30,500 --> 00:19:34,280
until there's a touch end event so

00:19:33,289 --> 00:19:36,470
that's what that line of the bottom is

00:19:34,280 --> 00:19:38,840
saying touch start switch map that into

00:19:36,470 --> 00:19:41,919
touch moves and take those until touch

00:19:38,840 --> 00:19:44,870
ends so this is going to give me a

00:19:41,919 --> 00:19:47,000
observable of touch events but of touch

00:19:44,870 --> 00:19:52,000
movement events but only while my

00:19:47,000 --> 00:19:52,000
fingers on the the screen

00:19:52,270 --> 00:19:58,990
so a the touch drag load two-component

00:19:56,260 --> 00:20:02,200
touch drag to load component don't know

00:19:58,990 --> 00:20:03,340
I had a hard time saying that this we're

00:20:02,200 --> 00:20:05,050
gonna have a component here that

00:20:03,340 --> 00:20:06,790
basically just controls the behavior of

00:20:05,050 --> 00:20:08,320
that marker right I don't want to add

00:20:06,790 --> 00:20:11,380
all of this to one component that would

00:20:08,320 --> 00:20:14,140
get crazy and it's gonna it's gonna fire

00:20:11,380 --> 00:20:16,870
an event a trigger an event to to get

00:20:14,140 --> 00:20:18,309
the reload to occur and it also has to

00:20:16,870 --> 00:20:19,660
be notified when the load is complete so

00:20:18,309 --> 00:20:21,280
it knows when to stop animating that

00:20:19,660 --> 00:20:24,429
marker and send it back to where it

00:20:21,280 --> 00:20:27,760
belongs I'm gonna have a load

00:20:24,429 --> 00:20:29,620
notification service and this this load

00:20:27,760 --> 00:20:31,030
notification services is basically its

00:20:29,620 --> 00:20:33,820
job is to be kind of an event bus

00:20:31,030 --> 00:20:35,620
between my two components our latest

00:20:33,820 --> 00:20:38,230
news component and the touch drag to

00:20:35,620 --> 00:20:41,170
load component what this is is it's

00:20:38,230 --> 00:20:42,520
going to notify one direction for when a

00:20:41,170 --> 00:20:45,460
load is requested and it's going to

00:20:42,520 --> 00:20:47,140
notify the other direction for when the

00:20:45,460 --> 00:20:48,580
load is complete because there's these

00:20:47,140 --> 00:20:49,750
two components need to communicate with

00:20:48,580 --> 00:20:52,780
each other about that particular issue

00:20:49,750 --> 00:20:54,640
so the basic architecture looks like

00:20:52,780 --> 00:20:57,040
this the latest news component is

00:20:54,640 --> 00:21:00,850
actually going to use the drag down to

00:20:57,040 --> 00:21:03,040
load component and to communicate

00:21:00,850 --> 00:21:05,320
between them for when when I've

00:21:03,040 --> 00:21:08,050
requested a load a load event or when

00:21:05,320 --> 00:21:11,590
I've successfully loaded I've got this

00:21:08,050 --> 00:21:13,000
load notification service the load

00:21:11,590 --> 00:21:14,710
notification service is the easiest

00:21:13,000 --> 00:21:16,420
thing that we're writing here so this is

00:21:14,710 --> 00:21:19,570
just a class with two properties on it

00:21:16,420 --> 00:21:20,770
that are both rxjs subjects now an rxjs

00:21:19,570 --> 00:21:23,679
subject for those who aren't familiar

00:21:20,770 --> 00:21:25,179
are observables that are also observers

00:21:23,679 --> 00:21:26,740
now observers are these objects where

00:21:25,179 --> 00:21:29,410
you have a next and error incomplete

00:21:26,740 --> 00:21:31,570
method on them in this case subjects

00:21:29,410 --> 00:21:33,880
have an F next erred complete method on

00:21:31,570 --> 00:21:36,010
them and when you next into a subject it

00:21:33,880 --> 00:21:37,660
sends that out to anyone who's

00:21:36,010 --> 00:21:39,700
subscribed to the subject as an

00:21:37,660 --> 00:21:41,200
observable so it's kind of it's kind of

00:21:39,700 --> 00:21:42,429
an observer and an observable on both

00:21:41,200 --> 00:21:44,740
ends so this is just a way to

00:21:42,429 --> 00:21:47,080
communicate things through in this

00:21:44,740 --> 00:21:49,360
subject actually is roughly the same

00:21:47,080 --> 00:21:50,559
shape or at least the same functionality

00:21:49,360 --> 00:21:52,150
as the subject you would see in the

00:21:50,559 --> 00:21:54,309
observer pattern from the gang of four

00:21:52,150 --> 00:21:58,780
books right so that's that's what this

00:21:54,309 --> 00:22:01,900
subject is we're gonna have to refactor

00:21:58,780 --> 00:22:02,860
the latest news component again so one

00:22:01,900 --> 00:22:05,020
of the things we're going to need to do

00:22:02,860 --> 00:22:05,860
is we're going to need to inject this

00:22:05,020 --> 00:22:07,510
load

00:22:05,860 --> 00:22:08,980
servus we have to provide it so that was

00:22:07,510 --> 00:22:10,929
the simple service I just showed you a

00:22:08,980 --> 00:22:13,929
minute ago so we can use it and we're

00:22:10,929 --> 00:22:16,150
gonna use it in two spots one wherever

00:22:13,929 --> 00:22:18,130
we had this Update news triggers that

00:22:16,150 --> 00:22:21,910
was just a timer before but now I'm

00:22:18,130 --> 00:22:23,770
gonna merge with this my request loads

00:22:21,910 --> 00:22:27,040
so that's saying that every time request

00:22:23,770 --> 00:22:29,590
loads notifies me or any time the timer

00:22:27,040 --> 00:22:32,140
notifies me send out a notification and

00:22:29,590 --> 00:22:35,980
we know that Update news triggers is

00:22:32,140 --> 00:22:37,630
what's notifying the the to get that

00:22:35,980 --> 00:22:39,730
Ajax request to get to get the news

00:22:37,630 --> 00:22:41,230
right so now if either one of these

00:22:39,730 --> 00:22:44,080
things fires an event either the timer

00:22:41,230 --> 00:22:46,770
or a requested low load over that

00:22:44,080 --> 00:22:50,530
subject it's going to go in and get that

00:22:46,770 --> 00:22:54,070
Ajax request the other thing we're gonna

00:22:50,530 --> 00:22:55,780
do is I add this do statement down here

00:22:54,070 --> 00:22:58,960
now do is for side effects what do is

00:22:55,780 --> 00:23:01,809
saying is hey if if I get a notification

00:22:58,960 --> 00:23:04,929
at this point take that notification and

00:23:01,809 --> 00:23:06,490
send it along to an observer in this

00:23:04,929 --> 00:23:09,070
case the observer is our loadcomplete

00:23:06,490 --> 00:23:10,840
subject so anyone listening to load

00:23:09,070 --> 00:23:12,520
completes which will be in the other the

00:23:10,840 --> 00:23:15,549
touch drag to load component will be

00:23:12,520 --> 00:23:17,410
notified that hey I've got news news

00:23:15,549 --> 00:23:20,230
data has come back successfully for my

00:23:17,410 --> 00:23:21,549
Ajax request here it is and then the

00:23:20,230 --> 00:23:23,110
other thing about do is it doesn't

00:23:21,549 --> 00:23:25,630
actually alter the value it still sends

00:23:23,110 --> 00:23:27,400
sends it along so another word for do is

00:23:25,630 --> 00:23:29,260
tap it's basically just tapping into

00:23:27,400 --> 00:23:31,299
this observable stream so you can see

00:23:29,260 --> 00:23:32,740
what's happening and then not affecting

00:23:31,299 --> 00:23:37,360
the value and sending it along down the

00:23:32,740 --> 00:23:39,250
observable chain so our touch drag to

00:23:37,360 --> 00:23:40,870
load component the template looks like

00:23:39,250 --> 00:23:43,450
this the templates pretty simple I've

00:23:40,870 --> 00:23:47,140
got a outermost div that's mostly for

00:23:43,450 --> 00:23:49,299
positioning so we can kind of put our

00:23:47,140 --> 00:23:51,760
little marker at the top center there so

00:23:49,299 --> 00:23:54,850
weird seeing absolute position top zero

00:23:51,760 --> 00:23:56,799
it's at the top left 50% and then we've

00:23:54,850 --> 00:23:59,230
got an inner div to kind of move things

00:23:56,799 --> 00:24:01,390
over a little bit more and to deal with

00:23:59,230 --> 00:24:03,429
the vertical positioning of our marker

00:24:01,390 --> 00:24:05,169
when we're when we're dragging I'm

00:24:03,429 --> 00:24:07,480
moving it I'm moving it to the left by

00:24:05,169 --> 00:24:10,240
35 pixels because I'm going to use a

00:24:07,480 --> 00:24:12,669
circle that's 70 pixels wide so I'm

00:24:10,240 --> 00:24:16,780
centering that circle in the in the in

00:24:12,669 --> 00:24:19,429
the view I've got this this bracket

00:24:16,780 --> 00:24:22,279
style transform all this is doing is its

00:24:19,429 --> 00:24:25,129
the transform on the style of this

00:24:22,279 --> 00:24:27,889
element every time a an observable name

00:24:25,129 --> 00:24:29,779
position translate3d dollar sign emits a

00:24:27,889 --> 00:24:31,580
new value it takes the value from that

00:24:29,779 --> 00:24:33,139
and sets it just like you said on the

00:24:31,580 --> 00:24:35,419
Dom element if you had this div you'd

00:24:33,139 --> 00:24:37,460
say div dot style dot transform equals

00:24:35,419 --> 00:24:39,169
some string that's exactly what this is

00:24:37,460 --> 00:24:41,659
doing every time the observable emits a

00:24:39,169 --> 00:24:43,729
value because that pipe async we're

00:24:41,659 --> 00:24:45,349
doing a similar thing on in the SVG

00:24:43,729 --> 00:24:48,019
below it which is the SVG that contains

00:24:45,349 --> 00:24:49,789
our circle and in this case it's this

00:24:48,019 --> 00:24:50,899
one's called rotate transform so this is

00:24:49,789 --> 00:24:53,359
the one we're gonna use to kind of

00:24:50,899 --> 00:24:55,669
animate the circle to spin all right and

00:24:53,359 --> 00:24:57,080
so again it's just all it's doing is

00:24:55,669 --> 00:24:58,399
just setting the style on the Dom

00:24:57,080 --> 00:25:00,469
element whenever that observable emits

00:24:58,399 --> 00:25:02,869
so this is an angular thing you can do

00:25:00,469 --> 00:25:05,179
the same thing in anybody's framework

00:25:02,869 --> 00:25:09,139
it's just a little bit cleaner in

00:25:05,179 --> 00:25:10,339
angular in this case and then inside of

00:25:09,139 --> 00:25:12,499
that I've got two circles we've got a

00:25:10,339 --> 00:25:16,519
light gray circle that has a radius of

00:25:12,499 --> 00:25:18,710
35 so it's our 70 pixel diameter circle

00:25:16,519 --> 00:25:20,359
and then I've got a black circle that's

00:25:18,710 --> 00:25:21,950
kind of off-center from it so we can see

00:25:20,359 --> 00:25:24,019
it spin otherwise you know spinning a

00:25:21,950 --> 00:25:29,509
circle that has nothing in it and sure

00:25:24,019 --> 00:25:31,039
it's animating why not so again these

00:25:29,509 --> 00:25:32,509
these are the two things I want you to

00:25:31,039 --> 00:25:34,519
notice in here is I've got these

00:25:32,509 --> 00:25:36,320
observables that I'm using to transform

00:25:34,519 --> 00:25:38,419
the styles and we have to we have to try

00:25:36,320 --> 00:25:41,089
to create those things so we're gonna

00:25:38,419 --> 00:25:43,729
we're gonna create them in here I've got

00:25:41,089 --> 00:25:45,379
position translate 3d dollar sign and

00:25:43,729 --> 00:25:46,999
I'm just gonna start off because I want

00:25:45,379 --> 00:25:49,099
to work my way backwards I know that the

00:25:46,999 --> 00:25:50,690
end result of my observable should be

00:25:49,099 --> 00:25:52,669
something shaped like this it's just an

00:25:50,690 --> 00:25:55,129
observable of a string that says

00:25:52,669 --> 00:25:56,809
translate 3d zero zero zero right and

00:25:55,129 --> 00:25:58,279
then the same thing for my rotate

00:25:56,809 --> 00:26:01,009
transforms I know that I want to rotate

00:25:58,279 --> 00:26:02,539
zero degrees just to start with so this

00:26:01,009 --> 00:26:04,609
is just so we get it to render something

00:26:02,539 --> 00:26:05,869
let's just start with observable Evan

00:26:04,609 --> 00:26:07,700
this is observable of is just like

00:26:05,869 --> 00:26:10,039
here's a value this is observable of a

00:26:07,700 --> 00:26:12,019
value it's not doing anything fancy to

00:26:10,039 --> 00:26:13,909
get the value but it's got the right

00:26:12,019 --> 00:26:15,440
shape so we're starting bare-minimum

00:26:13,909 --> 00:26:17,929
we're gonna work our way to work our way

00:26:15,440 --> 00:26:19,729
backwards the other thing we need to do

00:26:17,929 --> 00:26:21,589
is make sure we add our component to our

00:26:19,729 --> 00:26:23,479
latest news template because I said

00:26:21,589 --> 00:26:25,669
we've got to use it they're pretty

00:26:23,479 --> 00:26:27,379
straightforward but let's let's look and

00:26:25,669 --> 00:26:29,659
see what it looks like so I'm using the

00:26:27,379 --> 00:26:32,329
chrome dev tools mobile preview to get

00:26:29,659 --> 00:26:33,200
the screenshot here and you can see that

00:26:32,329 --> 00:26:35,990
there's Mike

00:26:33,200 --> 00:26:37,040
with my nice little round marker circle

00:26:35,990 --> 00:26:39,080
just hanging out at the top doing

00:26:37,040 --> 00:26:40,670
nothing because I've that's exactly

00:26:39,080 --> 00:26:46,430
right positioned it at zero you know

00:26:40,670 --> 00:26:48,050
zero movement so far so let's start

00:26:46,430 --> 00:26:49,070
working our way backwards to do some of

00:26:48,050 --> 00:26:51,740
these things I'm going to start with

00:26:49,070 --> 00:26:53,480
moving these positions so it's easier to

00:26:51,740 --> 00:26:55,370
deal with numbers right if I'm gonna

00:26:53,480 --> 00:26:57,320
kind of move something around I wanted

00:26:55,370 --> 00:26:59,060
to deal with strings all the time so I'm

00:26:57,320 --> 00:27:02,270
going to have another property called

00:26:59,060 --> 00:27:04,760
positions position dollar sign that I

00:27:02,270 --> 00:27:06,410
use to actually create position

00:27:04,760 --> 00:27:07,700
translate3d dollar sign and I'm just

00:27:06,410 --> 00:27:10,280
going to do that with a mapping function

00:27:07,700 --> 00:27:12,320
so this is still exactly the same thing

00:27:10,280 --> 00:27:14,750
we had before but I factored that into

00:27:12,320 --> 00:27:17,690
positions this is an observable of zero

00:27:14,750 --> 00:27:19,700
and then position translate3d comes from

00:27:17,690 --> 00:27:21,620
whatever observable positions is and

00:27:19,700 --> 00:27:23,930
we're gonna change that over time but

00:27:21,620 --> 00:27:29,210
now we're gonna map it to that string we

00:27:23,930 --> 00:27:31,160
expect the other thing I'm gonna do in

00:27:29,210 --> 00:27:33,260
here is I'm gonna say well I also know

00:27:31,160 --> 00:27:34,520
that I don't want the whole circle to

00:27:33,260 --> 00:27:35,750
show up on the screen all the time

00:27:34,520 --> 00:27:37,430
that's kind of annoying we actually want

00:27:35,750 --> 00:27:40,280
it to be kind of off the top so I'm

00:27:37,430 --> 00:27:41,660
adding this this little minus 70 to get

00:27:40,280 --> 00:27:44,480
the circle to go off the top of the

00:27:41,660 --> 00:27:46,040
screen so it doesn't show up and now

00:27:44,480 --> 00:27:47,120
let's use our drag and drop pattern so

00:27:46,040 --> 00:27:49,760
this is the pattern I showed earlier

00:27:47,120 --> 00:27:51,530
exactly the same pattern I'm gonna add

00:27:49,760 --> 00:27:53,990
it here in a property called drag so

00:27:51,530 --> 00:27:55,610
I've got I've got touch start touch ends

00:27:53,990 --> 00:27:57,740
and touch moves and all they are is just

00:27:55,610 --> 00:27:59,840
any event that's happened on the

00:27:57,740 --> 00:28:03,950
document I'm getting that with the from

00:27:59,840 --> 00:28:05,330
event which actually comes from rxjs so

00:28:03,950 --> 00:28:06,740
that each one of these is observable of

00:28:05,330 --> 00:28:09,440
events and I'm saying for every touch

00:28:06,740 --> 00:28:11,690
event are touch start events switch that

00:28:09,440 --> 00:28:13,520
switch map that into touch move events

00:28:11,690 --> 00:28:17,930
and then take those until there's a

00:28:13,520 --> 00:28:19,520
touch end so that's it that's a good

00:28:17,930 --> 00:28:20,420
start so I'm having that off separate

00:28:19,520 --> 00:28:25,820
but then I'm going to update my

00:28:20,420 --> 00:28:28,460
positions observable to actually use the

00:28:25,820 --> 00:28:30,020
the drag events so I'm just saying okay

00:28:28,460 --> 00:28:31,460
update my position every time there's

00:28:30,020 --> 00:28:34,460
there's a drag movement while I'm

00:28:31,460 --> 00:28:35,930
dragging to just to update that position

00:28:34,460 --> 00:28:39,410
and that should then translate into

00:28:35,930 --> 00:28:42,530
updating the that transform 3d Y

00:28:39,410 --> 00:28:44,750
position and then I want to start that

00:28:42,530 --> 00:28:45,830
with zero because that's that's where

00:28:44,750 --> 00:28:46,179
that's our starting point we want to

00:28:45,830 --> 00:28:47,860
start

00:28:46,179 --> 00:28:49,360
off the top of the screen we don't want

00:28:47,860 --> 00:28:50,559
to wait for some event before we tell it

00:28:49,360 --> 00:28:52,720
where to position itself so we're gonna

00:28:50,559 --> 00:28:54,220
start with zero but you notice zeros got

00:28:52,720 --> 00:28:58,480
a red squiggly on here because I'm using

00:28:54,220 --> 00:29:00,669
typescript and it's saying hold on it's

00:28:58,480 --> 00:29:02,769
it's not happy and it's not happy

00:29:00,669 --> 00:29:04,629
primarily because this is actually

00:29:02,769 --> 00:29:07,029
giving us an observable of touch events

00:29:04,629 --> 00:29:09,580
so we need to scrub our observable of

00:29:07,029 --> 00:29:12,519
touch events into an observable of

00:29:09,580 --> 00:29:15,999
numbers so so we can start with zero and

00:29:12,519 --> 00:29:17,259
then have positions updated so what I'm

00:29:15,999 --> 00:29:19,559
going to do is I'm just gonna add a map

00:29:17,259 --> 00:29:22,179
in here and I'm gonna say hey for every

00:29:19,559 --> 00:29:24,299
when it will take the start the start

00:29:22,179 --> 00:29:26,590
position which is our touch start and

00:29:24,299 --> 00:29:29,320
we'll get the page Y position of that

00:29:26,590 --> 00:29:32,139
and get the difference between that in

00:29:29,320 --> 00:29:33,850
every single position we had while we

00:29:32,139 --> 00:29:35,529
were moving so that's that's what I'm

00:29:33,850 --> 00:29:38,710
mapping to in here so it's just a some

00:29:35,529 --> 00:29:40,869
basic math and now we have a an

00:29:38,710 --> 00:29:42,669
observable of movement differences from

00:29:40,869 --> 00:29:46,149
the top of the screen while we're

00:29:42,669 --> 00:29:47,919
touching so but it's feeding into the

00:29:46,149 --> 00:29:49,240
position so let's just see what we have

00:29:47,919 --> 00:29:50,980
in here and see if that's trackable so

00:29:49,240 --> 00:29:54,100
right now you see a mouse cursor there

00:29:50,980 --> 00:29:56,769
but this is to mimic touching you can

00:29:54,100 --> 00:29:59,379
see it it's following the mouse so we're

00:29:56,769 --> 00:30:02,559
getting somewhere this is it's pretty

00:29:59,379 --> 00:30:05,649
good we're part of the feature is done

00:30:02,559 --> 00:30:06,789
right but not all of it so let's let's

00:30:05,649 --> 00:30:09,070
move on to the next step let's have it

00:30:06,789 --> 00:30:13,179
animate home back up to the top when we

00:30:09,070 --> 00:30:15,490
let go of it now I'm gonna be a little

00:30:13,179 --> 00:30:17,049
hand wavy about this because we've got

00:30:15,490 --> 00:30:18,249
45 minutes and I don't want to get

00:30:17,049 --> 00:30:21,119
terribly in depth about how the

00:30:18,249 --> 00:30:23,409
animations are created I have an RCS

00:30:21,119 --> 00:30:25,929
animations talk that I've linked here

00:30:23,409 --> 00:30:28,809
about that but the the essence of it is

00:30:25,929 --> 00:30:30,580
that I have an observable of animation

00:30:28,809 --> 00:30:32,519
frames so every time an animation frame

00:30:30,580 --> 00:30:35,019
fires the observable emits a value and

00:30:32,519 --> 00:30:36,309
you get like differences in time and

00:30:35,019 --> 00:30:40,539
these sorts of things and it enables me

00:30:36,309 --> 00:30:43,090
to create some tweening functions so I

00:30:40,539 --> 00:30:45,549
have this rx animations tween and the

00:30:43,090 --> 00:30:47,379
basic rundown on this is that it's got a

00:30:45,549 --> 00:30:50,679
tween method you give it a start value

00:30:47,379 --> 00:30:52,629
in an end value in a duration and on

00:30:50,679 --> 00:30:55,539
animation frame it'll give you numbers

00:30:52,629 --> 00:30:58,269
between the start and the end as as they

00:30:55,539 --> 00:30:59,990
relate to that duration right so

00:30:58,269 --> 00:31:02,330
hopefully everybody can kind of follow

00:30:59,990 --> 00:31:04,130
this is a familiar concept anybody who's

00:31:02,330 --> 00:31:06,110
used something like d3 or something like

00:31:04,130 --> 00:31:10,340
that but basically we're saying between

00:31:06,110 --> 00:31:12,590
from one to ten and for a duration of

00:31:10,340 --> 00:31:14,090
two seconds and we're saying it zero

00:31:12,590 --> 00:31:16,490
milliseconds you're gonna get a value of

00:31:14,090 --> 00:31:18,920
one and it you know two milliseconds or

00:31:16,490 --> 00:31:21,559
whatever it's gonna be something greater

00:31:18,920 --> 00:31:23,929
than one and then when you get to two

00:31:21,559 --> 00:31:26,270
seconds you're gonna have that value ten

00:31:23,929 --> 00:31:27,500
it's just gonna slowly increment its way

00:31:26,270 --> 00:31:30,710
there and it's gonna do the math to

00:31:27,500 --> 00:31:32,000
figure out what that's supposed to be so

00:31:30,710 --> 00:31:35,540
let's get back to our code really quick

00:31:32,000 --> 00:31:37,070
so this is what we were looking at and

00:31:35,540 --> 00:31:39,530
we need to we need to change this in

00:31:37,070 --> 00:31:43,010
some way to so that when we get done

00:31:39,530 --> 00:31:44,660
with our drag and we let go it says oh

00:31:43,010 --> 00:31:46,610
I'm gonna move this back up I'm gonna

00:31:44,660 --> 00:31:49,490
animate this back up automatically to

00:31:46,610 --> 00:31:50,840
the top of the screen so in order to do

00:31:49,490 --> 00:31:53,030
that what we can do is we can

00:31:50,840 --> 00:31:54,650
concatenate another observable on the

00:31:53,030 --> 00:31:55,429
end of this and concatenate observable

00:31:54,650 --> 00:31:58,580
it works like this

00:31:55,429 --> 00:32:00,620
I haven't observable it plays until it's

00:31:58,580 --> 00:32:02,809
done and when it's done it says oh now

00:32:00,620 --> 00:32:05,300
I'll play the next observable so if my

00:32:02,809 --> 00:32:07,960
one observable is an observable of drag

00:32:05,300 --> 00:32:10,550
and drag and let go and then it's done

00:32:07,960 --> 00:32:11,720
as soon as I let go it plays the next

00:32:10,550 --> 00:32:14,840
observable which happens to be an

00:32:11,720 --> 00:32:16,760
observable of an animation even though

00:32:14,840 --> 00:32:17,780
they're they work together cleanly even

00:32:16,760 --> 00:32:22,670
though they're doing two totally

00:32:17,780 --> 00:32:24,530
different things so let's let's see in

00:32:22,670 --> 00:32:25,970
more importantly they both are

00:32:24,530 --> 00:32:26,990
observables of number is what they're

00:32:25,970 --> 00:32:29,600
returning so they both have the same

00:32:26,990 --> 00:32:31,220
shape in their output so again I'm

00:32:29,600 --> 00:32:33,080
concatenate on this this tween and I'm

00:32:31,220 --> 00:32:36,890
saying Oh from whatever current position

00:32:33,080 --> 00:32:38,179
it's at I want you to animate to zero

00:32:36,890 --> 00:32:41,480
which is back up to the top and I want

00:32:38,179 --> 00:32:43,580
you to do it over 200 milliseconds so I

00:32:41,480 --> 00:32:45,440
have this position that I've gotten here

00:32:43,580 --> 00:32:48,110
and the position is currently 0 and I

00:32:45,440 --> 00:32:50,600
need to update that in some way I can

00:32:48,110 --> 00:32:52,880
use my do side effect to say Oh every

00:32:50,600 --> 00:32:54,770
time I get a value emitted for out for

00:32:52,880 --> 00:32:56,570
what position this should be at just go

00:32:54,770 --> 00:32:57,920
ahead and update that little piece of

00:32:56,570 --> 00:33:00,559
state that I need to know in order to

00:32:57,920 --> 00:33:01,940
get my animation to work this is a

00:33:00,559 --> 00:33:03,710
little counter to what some people would

00:33:01,940 --> 00:33:05,450
try to do if they were being really pure

00:33:03,710 --> 00:33:06,860
about reactive programming but it's

00:33:05,450 --> 00:33:10,120
totally fine to do something like this

00:33:06,860 --> 00:33:10,120
it works it's fine

00:33:10,460 --> 00:33:13,900
and then down here we've got a little

00:33:13,160 --> 00:33:15,340
problem

00:33:13,900 --> 00:33:18,160
and the little problem is that that

00:33:15,340 --> 00:33:20,290
tween function is being evaluated at the

00:33:18,160 --> 00:33:21,850
same time the switch that entire switch

00:33:20,290 --> 00:33:24,790
map is being evaluated which means it's

00:33:21,850 --> 00:33:29,980
being evaluated when when the position

00:33:24,790 --> 00:33:31,690
that POS POS variable is still 0 so to

00:33:29,980 --> 00:33:33,910
the tweening will always go from 0 to 0

00:33:31,690 --> 00:33:35,559
it's not going to do anything yet so we

00:33:33,910 --> 00:33:36,940
need to change this a little bit in

00:33:35,559 --> 00:33:39,220
order to change this a little bit there

00:33:36,940 --> 00:33:41,559
is a there's a tool in the RCS

00:33:39,220 --> 00:33:43,750
developers toolkit called defer and what

00:33:41,559 --> 00:33:46,390
this is is it says oh give me a function

00:33:43,750 --> 00:33:48,880
that when you subscribe to it executes

00:33:46,390 --> 00:33:50,950
another function that returns an

00:33:48,880 --> 00:33:52,059
observable subscribe to that so it's

00:33:50,950 --> 00:33:53,860
just kind of like it's delaying

00:33:52,059 --> 00:33:56,650
subscription or that's delaying the

00:33:53,860 --> 00:33:59,230
creation of this observable until the

00:33:56,650 --> 00:34:01,030
point at which you subscribe little

00:33:59,230 --> 00:34:03,070
confusing but it's a very very powerful

00:34:01,030 --> 00:34:06,700
tool when you get into when you when you

00:34:03,070 --> 00:34:10,270
get into RX and you hit a chicken or egg

00:34:06,700 --> 00:34:13,240
problem defer as your friend so now this

00:34:10,270 --> 00:34:15,280
should work let's let's see we touch we

00:34:13,240 --> 00:34:18,820
drag down we let go and it animates back

00:34:15,280 --> 00:34:23,320
out it's because we concatenated that

00:34:18,820 --> 00:34:24,480
animation back on the end so that's

00:34:23,320 --> 00:34:26,860
pretty exciting

00:34:24,480 --> 00:34:28,300
let's let's get it to trigger the load

00:34:26,860 --> 00:34:29,350
now that was the whole reason we wanted

00:34:28,300 --> 00:34:30,730
this feature it's not just so people

00:34:29,350 --> 00:34:35,860
could play with a cool little animating

00:34:30,730 --> 00:34:38,530
thing on their screen right so what we

00:34:35,860 --> 00:34:40,540
can do here is we can use the do side

00:34:38,530 --> 00:34:43,960
effect one more time so we know that our

00:34:40,540 --> 00:34:45,429
load notifications subject from our I'm

00:34:43,960 --> 00:34:47,620
sorry a load notification service we

00:34:45,429 --> 00:34:49,570
have this request loads subject that I

00:34:47,620 --> 00:34:51,639
said was going to ferry over to the

00:34:49,570 --> 00:34:54,250
other side where we're saying hey update

00:34:51,639 --> 00:34:56,950
the news values in our other component

00:34:54,250 --> 00:34:58,420
right that's already wired up so what we

00:34:56,950 --> 00:34:59,620
need to do is we need to notify it that

00:34:58,420 --> 00:35:03,520
we're ready to load something and so

00:34:59,620 --> 00:35:06,040
what we've got is I'll say here's a side

00:35:03,520 --> 00:35:10,030
effect examine the position if it's past

00:35:06,040 --> 00:35:12,670
half the window height then notify that

00:35:10,030 --> 00:35:14,710
request load subject that you want to

00:35:12,670 --> 00:35:19,420
you want to load something and that

00:35:14,710 --> 00:35:20,530
should automatically notify the the same

00:35:19,420 --> 00:35:22,000
logic and the other component that's

00:35:20,530 --> 00:35:25,230
actually loading the ajax request so

00:35:22,000 --> 00:35:25,230
that should trigger the ajax request

00:35:25,360 --> 00:35:28,750
but we don't want to span that we don't

00:35:27,220 --> 00:35:30,130
want it for every single position as

00:35:28,750 --> 00:35:32,170
we're dragging past the window height

00:35:30,130 --> 00:35:33,730
like request a new ajax.request that

00:35:32,170 --> 00:35:35,860
it's crazy really fast it's not what we

00:35:33,730 --> 00:35:37,360
want to do so I'm gonna add this little

00:35:35,860 --> 00:35:40,690
thing in here that says take while so

00:35:37,360 --> 00:35:43,900
only take all of the values for the

00:35:40,690 --> 00:35:45,720
position values while while we're

00:35:43,900 --> 00:35:47,740
actually above half the window height

00:35:45,720 --> 00:35:50,470
there's a little problem with this

00:35:47,740 --> 00:35:52,360
though that means when you get past that

00:35:50,470 --> 00:35:53,890
that distance it's gonna kill the whole

00:35:52,360 --> 00:35:55,090
observable it's gonna say oh I'm only

00:35:53,890 --> 00:35:56,800
taking these values while you're above

00:35:55,090 --> 00:35:58,090
this as soon as you're past that I'm

00:35:56,800 --> 00:36:00,550
done taking the values I'm gonna

00:35:58,090 --> 00:36:02,170
complete myself and that's it so what do

00:36:00,550 --> 00:36:03,550
you do that's that's a crazy problem

00:36:02,170 --> 00:36:05,530
it's like oh I wrote all this stuff it's

00:36:03,550 --> 00:36:06,820
all perfect but now it's killing itself

00:36:05,530 --> 00:36:09,460
every time I get past half the screen

00:36:06,820 --> 00:36:12,160
how do I solve that we have an operator

00:36:09,460 --> 00:36:14,110
called repeat what repeat does is it

00:36:12,160 --> 00:36:16,630
says hey any observable that I'm

00:36:14,110 --> 00:36:18,040
operating on when it completes subscribe

00:36:16,630 --> 00:36:20,080
to it again and keep sending the values

00:36:18,040 --> 00:36:22,150
down so it just makes the just kind of

00:36:20,080 --> 00:36:25,690
concatenates and observable on to the

00:36:22,150 --> 00:36:29,680
end of itself infinitely so now our take

00:36:25,690 --> 00:36:32,380
while problem is gone let's let's see so

00:36:29,680 --> 00:36:33,760
we've got it and we see it load so you

00:36:32,380 --> 00:36:36,640
just pull it down and you see it change

00:36:33,760 --> 00:36:39,250
Boop and loaded something but it needs

00:36:36,640 --> 00:36:41,260
to leave after it's done loading and

00:36:39,250 --> 00:36:42,970
we've kind of we've kind of circumvented

00:36:41,260 --> 00:36:47,050
that route we've prevented it from

00:36:42,970 --> 00:36:49,570
leaving whenever we let go because we we

00:36:47,050 --> 00:36:51,340
hit we haven't let go when we hit that

00:36:49,570 --> 00:36:54,340
halfway down the screen it started to

00:36:51,340 --> 00:36:55,840
load right so it never gets to never

00:36:54,340 --> 00:36:57,640
completes that let go and it never gets

00:36:55,840 --> 00:36:59,620
to concatenate on that animation to send

00:36:57,640 --> 00:37:01,840
it out so we need we need to send it out

00:36:59,620 --> 00:37:03,220
whenever the load is complete but we

00:37:01,840 --> 00:37:07,650
don't quite know when that load is

00:37:03,220 --> 00:37:10,000
complete so I'm going to add a another

00:37:07,650 --> 00:37:12,580
another property on here and it's just

00:37:10,000 --> 00:37:14,230
called complete animations so the

00:37:12,580 --> 00:37:15,460
complete animation is just going to

00:37:14,230 --> 00:37:17,530
animate from whatever the current

00:37:15,460 --> 00:37:20,140
position is back and I haven't I'm not

00:37:17,530 --> 00:37:22,660
doing anything with this quite yet but I

00:37:20,140 --> 00:37:24,010
know that whenever I complete I want to

00:37:22,660 --> 00:37:26,170
get whatever the current position is

00:37:24,010 --> 00:37:32,170
wherever that may be and send it back to

00:37:26,170 --> 00:37:36,880
zero in 200 milliseconds and I already

00:37:32,170 --> 00:37:38,290
have this this positions observable and

00:37:36,880 --> 00:37:39,460
this positions observable is notifying

00:37:38,290 --> 00:37:42,930
me where I

00:37:39,460 --> 00:37:44,140
my my little circle to be on the screen

00:37:42,930 --> 00:37:47,410
right

00:37:44,140 --> 00:37:48,880
so and it's all coming from drags right

00:37:47,410 --> 00:37:51,070
now so what I want to do is I want to

00:37:48,880 --> 00:37:53,020
merge complete animations in with that

00:37:51,070 --> 00:37:57,130
so when either one of those two things

00:37:53,020 --> 00:37:58,870
gives me a value it repositions my my

00:37:57,130 --> 00:38:00,490
cursor so what the complete animation

00:37:58,870 --> 00:38:02,500
will send this up but now they're gonna

00:38:00,490 --> 00:38:04,240
be competing with each other so we need

00:38:02,500 --> 00:38:06,400
to fix this a little bit still so

00:38:04,240 --> 00:38:09,340
working backwards current position needs

00:38:06,400 --> 00:38:11,170
to come from somewhere so where can we

00:38:09,340 --> 00:38:12,700
get the current position from well right

00:38:11,170 --> 00:38:14,560
here where you've got an observable of

00:38:12,700 --> 00:38:16,900
all the positions but complete

00:38:14,560 --> 00:38:20,020
animations is using or it's actually

00:38:16,900 --> 00:38:21,820
using complete animations well we can

00:38:20,020 --> 00:38:24,610
get all we can still get all those

00:38:21,820 --> 00:38:25,810
positions from there but now they're

00:38:24,610 --> 00:38:27,100
kind of they're kind of looking at each

00:38:25,810 --> 00:38:29,590
other and you can see typescript doesn't

00:38:27,100 --> 00:38:32,320
even like this because what I'm doing is

00:38:29,590 --> 00:38:34,120
I'm saying Oh completely the positions

00:38:32,320 --> 00:38:36,370
actually is derived in part from

00:38:34,120 --> 00:38:38,680
complete animations which is derived in

00:38:36,370 --> 00:38:41,950
part from positions so chicken or egg

00:38:38,680 --> 00:38:43,570
problem guess what the solution for

00:38:41,950 --> 00:38:45,900
that's going to be right the solution

00:38:43,570 --> 00:38:48,160
for that is observable defer that

00:38:45,900 --> 00:38:50,080
actually solves our problem so then

00:38:48,160 --> 00:38:52,330
whenever this is subscribed to positions

00:38:50,080 --> 00:38:53,800
already exists every everybody's happy

00:38:52,330 --> 00:38:57,310
everybody's fine so we just wrapped the

00:38:53,800 --> 00:39:02,200
this positions in an observable defer to

00:38:57,310 --> 00:39:04,690
solve that problem and but we don't want

00:39:02,200 --> 00:39:06,610
the animation this this animation to go

00:39:04,690 --> 00:39:08,470
and fire on every single position update

00:39:06,610 --> 00:39:12,550
that's that's not quite what we want so

00:39:08,470 --> 00:39:14,440
we've got our load completes subject

00:39:12,550 --> 00:39:16,240
from our service again that that event

00:39:14,440 --> 00:39:18,850
bus that's telling us hey the load was

00:39:16,240 --> 00:39:21,820
completed over here I'm notifying you

00:39:18,850 --> 00:39:23,110
that you can stop animation and send it

00:39:21,820 --> 00:39:24,880
back to where it needs to go so what

00:39:23,110 --> 00:39:27,670
we're gonna do is we're going to take

00:39:24,880 --> 00:39:30,670
that and i'm gonna use with latest from

00:39:27,670 --> 00:39:32,200
and what with latest from does is say oh

00:39:30,670 --> 00:39:32,890
every time i get a load notification

00:39:32,200 --> 00:39:34,540
completion

00:39:32,890 --> 00:39:36,370
give me the latest value that came from

00:39:34,540 --> 00:39:38,110
positions just cache that one value all

00:39:36,370 --> 00:39:40,600
the time and give me the latest value

00:39:38,110 --> 00:39:43,330
from that and then we're going to switch

00:39:40,600 --> 00:39:45,480
map that into our our tween so that's

00:39:43,330 --> 00:39:48,790
going to play our animation so again

00:39:45,480 --> 00:39:51,700
load completes notified get get the

00:39:48,790 --> 00:39:52,539
latest position and pass that position

00:39:51,700 --> 00:39:54,099
into our

00:39:52,539 --> 00:40:00,939
Queen so we get that animation from the

00:39:54,099 --> 00:40:03,219
current position back to zero I skipped

00:40:00,939 --> 00:40:04,749
ahead a little so yeah that's that's

00:40:03,219 --> 00:40:05,859
essentially what we're working on here

00:40:04,749 --> 00:40:07,839
so let's see what let's see if it's

00:40:05,859 --> 00:40:11,140
working so we get the load boom so as

00:40:07,839 --> 00:40:14,140
soon as as soon as that load comes in it

00:40:11,140 --> 00:40:17,799
animates back so we've accomplished that

00:40:14,140 --> 00:40:19,989
feature but we still don't have that

00:40:17,799 --> 00:40:21,369
handy-dandy spinning feature everybody

00:40:19,989 --> 00:40:24,249
likes when that when the loading thing

00:40:21,369 --> 00:40:25,689
spins right like that's important I know

00:40:24,249 --> 00:40:29,859
I wouldn't use an app where it didn't

00:40:25,689 --> 00:40:31,509
spin so let's start working with that

00:40:29,859 --> 00:40:33,699
rotate transforms it's just been sitting

00:40:31,509 --> 00:40:37,269
there at 0 degrees doing nothing not

00:40:33,699 --> 00:40:39,219
very exciting we know we want to work

00:40:37,269 --> 00:40:42,459
with numbers so let's move rotate

00:40:39,219 --> 00:40:44,109
transforms off to a rotate property here

00:40:42,459 --> 00:40:46,479
that's just an observable of 0 this is

00:40:44,109 --> 00:40:48,369
functionally the same or get into the

00:40:46,479 --> 00:40:51,160
same string and the other one and then

00:40:48,369 --> 00:40:53,169
okay well we can make it rotate all the

00:40:51,160 --> 00:40:55,299
time which just by using that animations

00:40:53,169 --> 00:40:56,529
tween so now I've got well that's really

00:40:55,299 --> 00:41:00,699
just gonna animate it over half of a

00:40:56,529 --> 00:41:02,729
second oh like 100 and 360 degrees it's

00:41:00,699 --> 00:41:05,529
just gonna go around once and stop and

00:41:02,729 --> 00:41:07,239
we want it to keep doing that over and

00:41:05,529 --> 00:41:09,579
over again while it's loading so we use

00:41:07,239 --> 00:41:10,929
our friend repeat and that's just gonna

00:41:09,579 --> 00:41:15,759
play that animation back to back over

00:41:10,929 --> 00:41:17,289
and over again okay so let's see so as

00:41:15,759 --> 00:41:20,919
we're pulling now look at spins all the

00:41:17,289 --> 00:41:22,179
time it's not it's not quite what we

00:41:20,919 --> 00:41:23,679
want is for it to spin all the time it

00:41:22,179 --> 00:41:30,189
is exciting that it's spinning all the

00:41:23,679 --> 00:41:32,259
time I think so we're gonna use our

00:41:30,189 --> 00:41:34,029
request load notification that we are

00:41:32,259 --> 00:41:37,299
already using elsewhere to request the

00:41:34,029 --> 00:41:39,519
actual actual load and for the update

00:41:37,299 --> 00:41:41,529
news and I'm going to switch map that

00:41:39,519 --> 00:41:43,299
into the animation so that's saying hey

00:41:41,529 --> 00:41:45,880
when somebody notifies they want to load

00:41:43,299 --> 00:41:47,169
to start then start spinning this okay

00:41:45,880 --> 00:41:48,729
but then it's just gonna spin forever

00:41:47,169 --> 00:41:50,079
after that so we don't want that to

00:41:48,729 --> 00:41:52,209
happen we wanted to stop eventually

00:41:50,079 --> 00:41:53,859
but oh look we have a notification for

00:41:52,209 --> 00:41:56,439
when loads complete so we'll use our

00:41:53,859 --> 00:41:58,779
friend take until again and when load

00:41:56,439 --> 00:42:02,949
completion fires we're going to stop the

00:41:58,779 --> 00:42:04,479
animation then the final thing I want to

00:42:02,949 --> 00:42:06,220
do here is I'm going to just concatenate

00:42:04,479 --> 00:42:08,350
on an observable of 0 just the values

00:42:06,220 --> 00:42:11,230
so that way it doesn't stop at some

00:42:08,350 --> 00:42:13,480
weird cockeyed angle whenever it's done

00:42:11,230 --> 00:42:21,010
it snaps back to its original position

00:42:13,480 --> 00:42:22,780
of zero so let's have a look we've got

00:42:21,010 --> 00:42:25,810
the spin and then as soon as the load

00:42:22,780 --> 00:42:28,480
stops there we go so that's our whole

00:42:25,810 --> 00:42:31,750
feature we added we added that entire

00:42:28,480 --> 00:42:36,300
feature well I didn't actually type it

00:42:31,750 --> 00:42:39,460
up up here but 30 minutes to go over it

00:42:36,300 --> 00:42:41,530
obviously the the things about about rx

00:42:39,460 --> 00:42:43,360
GS is that there's there's this whole

00:42:41,530 --> 00:42:45,100
language and all these operators it's

00:42:43,360 --> 00:42:46,420
built on top of and that's where it gets

00:42:45,100 --> 00:42:48,940
difficult it's learning how these

00:42:46,420 --> 00:42:53,590
operators work and and kind of the

00:42:48,940 --> 00:42:55,300
reactive paradigm but if I gave you

00:42:53,590 --> 00:42:57,010
advice on how to build these reactive

00:42:55,300 --> 00:42:58,990
things I always say start simple and

00:42:57,010 --> 00:43:00,340
stub in the simplest possible thing you

00:42:58,990 --> 00:43:02,800
saw me start with just an observable of

00:43:00,340 --> 00:43:05,380
some string value right and then kind of

00:43:02,800 --> 00:43:06,940
work my way back from there this is one

00:43:05,380 --> 00:43:08,740
of the hardest examples I can think of

00:43:06,940 --> 00:43:10,150
off the top of my head I don't expect

00:43:08,740 --> 00:43:11,470
everyone that's never used arts before

00:43:10,150 --> 00:43:13,180
to walk out of here and be like yeah I

00:43:11,470 --> 00:43:14,440
know how to implement that now that

00:43:13,180 --> 00:43:16,450
wasn't the point the point was to show

00:43:14,440 --> 00:43:19,960
you what you can do with this fairly

00:43:16,450 --> 00:43:22,120
powerful set of primitives you want to

00:43:19,960 --> 00:43:24,670
work backwards again start with the

00:43:22,120 --> 00:43:26,890
simplest possible thing and figure out

00:43:24,670 --> 00:43:28,570
okay well what events are firing that

00:43:26,890 --> 00:43:30,430
are going to give me the values I need

00:43:28,570 --> 00:43:32,920
or notify when I need to change this and

00:43:30,430 --> 00:43:35,200
try to build towards those and scrub

00:43:32,920 --> 00:43:38,460
those those bits of data into the thing

00:43:35,200 --> 00:43:40,750
that you want and into what you need

00:43:38,460 --> 00:43:42,940
tool for people that have been using rx

00:43:40,750 --> 00:43:45,280
for a little while that it's it's not

00:43:42,940 --> 00:43:47,380
used enough I think in my opinion I see

00:43:45,280 --> 00:43:49,030
the people hack around it is observable

00:43:47,380 --> 00:43:51,070
defer if you have a chicken or egg

00:43:49,030 --> 00:43:53,110
problem with oh this observable needs

00:43:51,070 --> 00:43:54,820
some value at a specific time when you

00:43:53,110 --> 00:43:56,680
subscribe or you need to know the state

00:43:54,820 --> 00:43:57,880
of something at the moment you subscribe

00:43:56,680 --> 00:44:01,690
and then subscribe to an observable

00:43:57,880 --> 00:44:05,460
observe will defer the drag pattern this

00:44:01,690 --> 00:44:08,920
gets shown a lot in in rx talks it's

00:44:05,460 --> 00:44:11,290
touchstart switch mapped into touch

00:44:08,920 --> 00:44:12,400
movements taken tell touch end same

00:44:11,290 --> 00:44:14,950
thing with if you're doing with the

00:44:12,400 --> 00:44:16,540
mouse it would be Mouse down switch

00:44:14,950 --> 00:44:19,740
mapped into mouse movements take until

00:44:16,540 --> 00:44:19,740
Mouse out a mouse up

00:44:20,160 --> 00:44:26,170
so these these things are other things

00:44:24,610 --> 00:44:28,180
that you consider is take and take until

00:44:26,170 --> 00:44:29,590
and take while these can be chained in

00:44:28,180 --> 00:44:31,450
nested you can have a take until and

00:44:29,590 --> 00:44:33,820
then it take until right after that and

00:44:31,450 --> 00:44:35,530
whichever one of those wins wins right

00:44:33,820 --> 00:44:38,080
like it you you can have more than one

00:44:35,530 --> 00:44:40,240
you don't have to do it all in one one

00:44:38,080 --> 00:44:41,890
set or a take while and that sort of

00:44:40,240 --> 00:44:43,510
thing you can have more than one for

00:44:41,890 --> 00:44:45,970
some reason people always think Oh take

00:44:43,510 --> 00:44:47,350
until that's the end of the line and

00:44:45,970 --> 00:44:49,450
it's like no that's just testing to see

00:44:47,350 --> 00:44:50,380
if you want this condition to stop your

00:44:49,450 --> 00:44:52,869
observable you can have another one

00:44:50,380 --> 00:44:55,780
right after and then another trick is

00:44:52,869 --> 00:44:57,310
take while complete I've helped people

00:44:55,780 --> 00:44:59,170
in the past where they had an observable

00:44:57,310 --> 00:45:01,210
and they had everything set up great and

00:44:59,170 --> 00:45:02,860
they have this well I just need to take

00:45:01,210 --> 00:45:04,900
these until the certain point but then I

00:45:02,860 --> 00:45:07,210
want to be it's a start and do it again

00:45:04,900 --> 00:45:08,650
and they for some reason they just they

00:45:07,210 --> 00:45:09,070
failed to remember that there's a repeat

00:45:08,650 --> 00:45:12,460
in there

00:45:09,070 --> 00:45:16,720
repeat we'll just recently and start the

00:45:12,460 --> 00:45:19,060
whole process over again so again unless

00:45:16,720 --> 00:45:20,260
you can I run workshops in RCS you can

00:45:19,060 --> 00:45:22,150
find information about that in arcs

00:45:20,260 --> 00:45:24,580
workshop comm that's all I've got for

00:45:22,150 --> 00:45:29,460
this talk I'm open to questions how much

00:45:24,580 --> 00:45:31,510
time do we have out of time sorry

00:45:29,460 --> 00:45:33,100
no you can you can grab me in the

00:45:31,510 --> 00:45:35,350
hallway or again you can reach me out on

00:45:33,100 --> 00:45:37,470
Twitter if you have any questions so

00:45:35,350 --> 00:45:40,660
thank you

00:45:37,470 --> 00:45:40,660

YouTube URL: https://www.youtube.com/watch?v=WH1AcymiO6E


