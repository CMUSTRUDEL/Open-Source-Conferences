Title: All Things Open 2017 - Amy Chen - Building Helm Charts From the Ground Up: An intro to Kubernetes
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:00,740 --> 00:00:06,480
all righty I'll go ahead and get started

00:00:02,909 --> 00:00:08,700
now hi everyone how is how are you all

00:00:06,480 --> 00:00:12,059
doing the second day of all things

00:00:08,700 --> 00:00:14,280
opened hope you all have survived this

00:00:12,059 --> 00:00:16,410
morning was super exciting a ordered

00:00:14,280 --> 00:00:19,340
room service for the first time in my

00:00:16,410 --> 00:00:22,289
entire life it was magical and more than

00:00:19,340 --> 00:00:25,949
anything that I had my expectations set

00:00:22,289 --> 00:00:28,260
up so today I'll be talking to you all

00:00:25,949 --> 00:00:31,830
about communities and home and all the

00:00:28,260 --> 00:00:34,260
magical stuff so I usually like to get a

00:00:31,830 --> 00:00:38,550
general idea of where y'all are starting

00:00:34,260 --> 00:00:40,530
at so if you are an application

00:00:38,550 --> 00:00:42,410
developer so either mobile apps or web

00:00:40,530 --> 00:00:44,850
apps can you raise your hand

00:00:42,410 --> 00:00:49,890
cool so it's a solid portion so I think

00:00:44,850 --> 00:00:51,660
I set my level correctly if you are

00:00:49,890 --> 00:00:54,149
familiar with containers as in like

00:00:51,660 --> 00:00:56,489
you've worked with them at work use them

00:00:54,149 --> 00:01:03,210
within your workflow can you raise your

00:00:56,489 --> 00:01:05,159
hands solid portion solid and if you are

00:01:03,210 --> 00:01:07,350
familiar with kubernetes have seen a

00:01:05,159 --> 00:01:08,340
kubernetes manifest chart can you also

00:01:07,350 --> 00:01:11,010
raise your hand

00:01:08,340 --> 00:01:13,080
cool so you were at the right talk

00:01:11,010 --> 00:01:15,630
because it seems like a good proportion

00:01:13,080 --> 00:01:20,310
of you don't know what that is no

00:01:15,630 --> 00:01:22,380
worries my name is Aimee Chen I am a

00:01:20,310 --> 00:01:25,140
software engineer at Rancheria labs I

00:01:22,380 --> 00:01:26,820
actually started there in March and

00:01:25,140 --> 00:01:30,270
prior to that I had no idea what any of

00:01:26,820 --> 00:01:32,100
this stuff was so if you want to learn

00:01:30,270 --> 00:01:38,009
you can learn it really quickly and it's

00:01:32,100 --> 00:01:40,500
awesome and also I run a YouTube channel

00:01:38,009 --> 00:01:45,450
called ami codes so if you ever want to

00:01:40,500 --> 00:01:48,420
check that out I also do that so the

00:01:45,450 --> 00:01:51,149
main question that community solves is

00:01:48,420 --> 00:01:54,450
how do our applications run on the cloud

00:01:51,149 --> 00:01:57,390
right so you have your web app your

00:01:54,450 --> 00:02:00,840
mobile app or whatever how do you

00:01:57,390 --> 00:02:03,299
actually get that to serve people right

00:02:00,840 --> 00:02:06,119
so the core concept of the cloud

00:02:03,299 --> 00:02:09,920
whatever that vague term means is that

00:02:06,119 --> 00:02:12,870
everything is incredibly ephemeral right

00:02:09,920 --> 00:02:16,319
things die things are complicated

00:02:12,870 --> 00:02:17,760
go down this is all under the umbrella

00:02:16,319 --> 00:02:20,489
term of distributed systems which is

00:02:17,760 --> 00:02:22,349
really fun I recently have loved reading

00:02:20,489 --> 00:02:23,459
some like papers about distributed

00:02:22,349 --> 00:02:27,330
systems and different patterns and

00:02:23,459 --> 00:02:30,390
things like that so you put a lot of

00:02:27,330 --> 00:02:32,790
trust in folks who run your

00:02:30,390 --> 00:02:34,140
infrastructure but the funny thing is is

00:02:32,790 --> 00:02:39,209
that folks who run your infrastructure

00:02:34,140 --> 00:02:42,120
do not trust you as infrastructure

00:02:39,209 --> 00:02:45,480
software engineer the idea is that I am

00:02:42,120 --> 00:02:48,060
NOT meant to trust you as a application

00:02:45,480 --> 00:02:49,829
developer because the idea is that I

00:02:48,060 --> 00:02:52,170
don't need to write the systems that

00:02:49,829 --> 00:02:56,549
we've built today that we have now that

00:02:52,170 --> 00:03:00,090
trust doesn't need to be there so the

00:02:56,549 --> 00:03:02,370
idea is that we want to be able to trust

00:03:00,090 --> 00:03:04,680
that these serve you as application

00:03:02,370 --> 00:03:07,769
developer want to trust that the

00:03:04,680 --> 00:03:09,989
services you use are accessible there's

00:03:07,769 --> 00:03:12,659
low latency and you just want it to work

00:03:09,989 --> 00:03:14,459
right you don't want to think about the

00:03:12,659 --> 00:03:16,819
infrastructure that your web app needs

00:03:14,459 --> 00:03:19,169
to run on you just sort of want to

00:03:16,819 --> 00:03:24,000
develop locally and just send it

00:03:19,169 --> 00:03:26,970
somewhere the binary to work right so

00:03:24,000 --> 00:03:29,760
some issues that folks in infrastructure

00:03:26,970 --> 00:03:33,440
have to think about are things like high

00:03:29,760 --> 00:03:36,329
an expected traffic application failures

00:03:33,440 --> 00:03:39,180
scalability availability efficient

00:03:36,329 --> 00:03:44,760
resource utilization let's say you are

00:03:39,180 --> 00:03:48,060
Google size right 0.01% of efficiency

00:03:44,760 --> 00:03:49,919
like that is save in terms of efficiency

00:03:48,060 --> 00:03:51,930
of like using your machines and things

00:03:49,919 --> 00:03:54,989
like that can save thousands if not

00:03:51,930 --> 00:03:58,980
millions of dollars right so they will

00:03:54,989 --> 00:04:01,349
probably go to extreme extents to make

00:03:58,980 --> 00:04:07,379
sure that their servers and resources

00:04:01,349 --> 00:04:09,660
are used efficiently so this is from the

00:04:07,379 --> 00:04:11,310
perspective of an application developer

00:04:09,660 --> 00:04:12,810
so it's very basic

00:04:11,310 --> 00:04:14,430
again this is an introduction to

00:04:12,810 --> 00:04:18,630
humanities talks so I just want to set

00:04:14,430 --> 00:04:21,870
your expectations there the container is

00:04:18,630 --> 00:04:24,719
the fundamental and the basis in the

00:04:21,870 --> 00:04:25,840
building block of kubernetes this is

00:04:24,719 --> 00:04:29,080
everything

00:04:25,840 --> 00:04:31,690
like kubernetes is based upon actually

00:04:29,080 --> 00:04:33,970
communities was founded at Google it

00:04:31,690 --> 00:04:37,030
started out as a system called Borg and

00:04:33,970 --> 00:04:39,699
then they learned a lot of lessons from

00:04:37,030 --> 00:04:43,210
there to create kubernetes that we now

00:04:39,699 --> 00:04:44,320
have today that is open sourced and also

00:04:43,210 --> 00:04:47,110
there's a lot of things that you can

00:04:44,320 --> 00:04:49,030
interchange with in kubernetes itself so

00:04:47,110 --> 00:04:52,479
what is a container I won't be going

00:04:49,030 --> 00:04:54,669
into detail about what it is however the

00:04:52,479 --> 00:04:56,979
way they like to describe it is that it

00:04:54,669 --> 00:04:59,830
is a baby computer inside another

00:04:56,979 --> 00:05:02,620
computer the baby computer is the

00:04:59,830 --> 00:05:07,780
container and the other computer is the

00:05:02,620 --> 00:05:09,580
server so why the question now is is why

00:05:07,780 --> 00:05:13,030
do we want a baby computer inside

00:05:09,580 --> 00:05:17,169
another computer right so the idea is

00:05:13,030 --> 00:05:19,090
that it is easier to transfer around the

00:05:17,169 --> 00:05:21,880
container it provides resource isolation

00:05:19,090 --> 00:05:24,130
and ultimately your container

00:05:21,880 --> 00:05:26,020
encapsulate your application environment

00:05:24,130 --> 00:05:27,639
so a lot of these terms sounds super

00:05:26,020 --> 00:05:31,900
fluffy but I'll go into more detail

00:05:27,639 --> 00:05:34,510
later on into what all these means a

00:05:31,900 --> 00:05:36,789
common conceptual comparison that like I

00:05:34,510 --> 00:05:39,130
hesitate to use but is really useful for

00:05:36,789 --> 00:05:40,600
people who don't already come with an

00:05:39,130 --> 00:05:44,490
understanding of what containers are is

00:05:40,600 --> 00:05:48,520
a virtual machine they're very different

00:05:44,490 --> 00:05:49,960
but face value they like look like they

00:05:48,520 --> 00:05:54,330
look similar and they look like they do

00:05:49,960 --> 00:05:58,630
similar things some very high-level

00:05:54,330 --> 00:06:00,370
differences is that containers are super

00:05:58,630 --> 00:06:03,160
efficient in terms of resource

00:06:00,370 --> 00:06:04,630
utilization there's other like operating

00:06:03,160 --> 00:06:08,560
system virtualization things that I

00:06:04,630 --> 00:06:10,419
won't go into but ultimately a container

00:06:08,560 --> 00:06:13,150
helps you abstract away your

00:06:10,419 --> 00:06:21,630
infrastructure and you'll learn more

00:06:13,150 --> 00:06:23,950
about that in a second so here we have a

00:06:21,630 --> 00:06:27,570
configuration file it's called a docker

00:06:23,950 --> 00:06:29,919
file so docker is a very common

00:06:27,570 --> 00:06:32,259
technology that people use to create

00:06:29,919 --> 00:06:36,229
containers

00:06:32,259 --> 00:06:38,509
so here what we have is our container

00:06:36,229 --> 00:06:42,800
which is our baby container and ignore

00:06:38,509 --> 00:06:43,789
the configuration file on your right and

00:06:42,800 --> 00:06:45,470
just look at the picture on the left

00:06:43,789 --> 00:06:48,919
because conceptually that's what's

00:06:45,470 --> 00:06:52,699
happening so conceptually what we have

00:06:48,919 --> 00:06:54,440
is our container and the idea is that

00:06:52,699 --> 00:06:56,960
you as an application developer right

00:06:54,440 --> 00:06:59,569
locally there's so many environment

00:06:56,960 --> 00:07:02,449
variables that not environments there

00:06:59,569 --> 00:07:04,699
are so many variables locally that you

00:07:02,449 --> 00:07:06,500
need your web app to work right let's

00:07:04,699 --> 00:07:09,590
say you have a specific operating system

00:07:06,500 --> 00:07:11,870
let's say you have a specific version

00:07:09,590 --> 00:07:13,370
language that you're using

00:07:11,870 --> 00:07:15,410
maybe there's certain features across

00:07:13,370 --> 00:07:17,539
different version languages that aren't

00:07:15,410 --> 00:07:21,050
available and where if you use like

00:07:17,539 --> 00:07:23,990
version 2.0 versus 1.0 then like

00:07:21,050 --> 00:07:26,539
goes down and like things break right or

00:07:23,990 --> 00:07:31,699
let's say you need to run some

00:07:26,539 --> 00:07:33,199
configuration command line commands to

00:07:31,699 --> 00:07:36,590
be able to set up your web application

00:07:33,199 --> 00:07:39,650
running it and things like that this is

00:07:36,590 --> 00:07:42,139
what a container sort of helps unify in

00:07:39,650 --> 00:07:44,060
the sense of you define all these things

00:07:42,139 --> 00:07:45,740
right these are the requirements that

00:07:44,060 --> 00:07:49,090
your web application needs to run and

00:07:45,740 --> 00:07:51,860
then you put that into your docker file

00:07:49,090 --> 00:07:54,229
into a configuration file and then

00:07:51,860 --> 00:07:56,919
you'll just be able your web app will

00:07:54,229 --> 00:08:01,070
just work after you spin up this image

00:07:56,919 --> 00:08:03,979
so this example that I have here

00:08:01,070 --> 00:08:09,590
it's like pseudo code so don't actually

00:08:03,979 --> 00:08:12,500
expect this to run is here I have my

00:08:09,590 --> 00:08:15,500
lovely blue app that's a generic web app

00:08:12,500 --> 00:08:19,039
that you want to run I want it to run on

00:08:15,500 --> 00:08:20,900
Alpine three point six point two I want

00:08:19,039 --> 00:08:23,180
it to run with Python three point seven

00:08:20,900 --> 00:08:25,370
and then I have some setup scripts so

00:08:23,180 --> 00:08:29,180
let's go ahead and look on the right so

00:08:25,370 --> 00:08:30,500
we have from which is the base image you

00:08:29,180 --> 00:08:34,159
can just think of that as just like

00:08:30,500 --> 00:08:37,039
pulling in the Alpine operating system

00:08:34,159 --> 00:08:39,589
for now and then what we're doing is

00:08:37,039 --> 00:08:43,409
we're copying your web application over

00:08:39,589 --> 00:08:45,180
to to this image

00:08:43,409 --> 00:08:47,160
then what you do is then you run some

00:08:45,180 --> 00:08:51,269
setup scripts and then you can then

00:08:47,160 --> 00:08:54,180
expose port 80 on your baby computer and

00:08:51,269 --> 00:08:56,160
then you run command Python out to start

00:08:54,180 --> 00:08:58,699
running your web application so

00:08:56,160 --> 00:09:01,350
conceptually again what you're doing is

00:08:58,699 --> 00:09:04,860
that you're just copying your web app

00:09:01,350 --> 00:09:08,240
onto this baby computer and making sure

00:09:04,860 --> 00:09:11,069
that it has all the setup that it needs

00:09:08,240 --> 00:09:12,720
and then you're exposing port 80 to the

00:09:11,069 --> 00:09:14,550
outside world so that the outside world

00:09:12,720 --> 00:09:18,990
could talk to your baby computer and

00:09:14,550 --> 00:09:22,139
that's it so you can tell that all of

00:09:18,990 --> 00:09:26,100
this is pretty uniform in the sense of

00:09:22,139 --> 00:09:27,959
like you don't need to really run any

00:09:26,100 --> 00:09:31,769
installation scripts all you need to

00:09:27,959 --> 00:09:34,370
worry about is your web applications and

00:09:31,769 --> 00:09:38,329
the dependents the the dependencies that

00:09:34,370 --> 00:09:43,259
it actually needs so in this way you are

00:09:38,329 --> 00:09:46,649
extracting away your infrastructure cool

00:09:43,259 --> 00:09:50,430
so now we did that we did a quick

00:09:46,649 --> 00:09:53,430
run-through of a container now we have

00:09:50,430 --> 00:09:56,850
to think about how we send that to the

00:09:53,430 --> 00:09:58,589
cloud right short story is that it's

00:09:56,850 --> 00:10:00,240
complicated right so a container can't

00:09:58,589 --> 00:10:03,300
just stand on its own

00:10:00,240 --> 00:10:05,790
if this container dies you there's

00:10:03,300 --> 00:10:09,120
there's no mechanism right now to be

00:10:05,790 --> 00:10:10,980
able to revive it basically and that's

00:10:09,120 --> 00:10:13,019
where a container orchestration system

00:10:10,980 --> 00:10:15,269
comes in like kubernetes and that deals

00:10:13,019 --> 00:10:17,100
with life cycle and things like that so

00:10:15,269 --> 00:10:20,670
if container is going through an

00:10:17,100 --> 00:10:23,339
existential crisis right now it's asking

00:10:20,670 --> 00:10:25,290
questions like where should I live right

00:10:23,339 --> 00:10:27,720
so the context is that you have several

00:10:25,290 --> 00:10:30,240
servers and you should figure out where

00:10:27,720 --> 00:10:32,279
you want to put your container so where

00:10:30,240 --> 00:10:35,339
should I live that is under the realm of

00:10:32,279 --> 00:10:37,139
scheduling how do I talk to other

00:10:35,339 --> 00:10:40,110
containers right that's under the realm

00:10:37,139 --> 00:10:43,170
of networking how do I talk to the world

00:10:40,110 --> 00:10:45,209
so how do i route outside traffic to my

00:10:43,170 --> 00:10:47,309
container to be able to display my web

00:10:45,209 --> 00:10:50,699
app to or to be able to serve my web app

00:10:47,309 --> 00:10:51,590
to you as the end user right what

00:10:50,699 --> 00:10:53,750
happens

00:10:51,590 --> 00:10:56,930
if I get sick so that's under the realm

00:10:53,750 --> 00:10:59,000
of failure recovery so there's a lot of

00:10:56,930 --> 00:11:01,010
things that need to go on outside of

00:10:59,000 --> 00:11:05,840
just having your awesome little baby

00:11:01,010 --> 00:11:07,670
computer because if it dies you need to

00:11:05,840 --> 00:11:11,630
be able to do something if it misbehaves

00:11:07,670 --> 00:11:13,100
maybe you need to kill it if it so

00:11:11,630 --> 00:11:14,780
there's like a lot of networking and

00:11:13,100 --> 00:11:16,250
scheduling and routing and failure

00:11:14,780 --> 00:11:17,240
recovery and all these things that

00:11:16,250 --> 00:11:23,180
kubernetes

00:11:17,240 --> 00:11:25,580
is able to abstract away for you so this

00:11:23,180 --> 00:11:28,910
is the part where I talk about

00:11:25,580 --> 00:11:31,670
communities so again kubernetes is a

00:11:28,910 --> 00:11:34,070
container management platform another

00:11:31,670 --> 00:11:37,070
term that we can use is a cluster

00:11:34,070 --> 00:11:40,270
management platform in the sense of you

00:11:37,070 --> 00:11:47,140
are deploying communities onto a cluster

00:11:40,270 --> 00:11:48,980
and it is used to manage your containers

00:11:47,140 --> 00:11:51,980
another way that I like to describe

00:11:48,980 --> 00:11:54,530
kubernetes is that all it is is that it

00:11:51,980 --> 00:11:55,820
has a lot of like fancy abstractions to

00:11:54,530 --> 00:11:57,440
be able to organize they've computers

00:11:55,820 --> 00:11:59,600
and that's all it is there's a lot of

00:11:57,440 --> 00:12:03,230
terminology that's used but all that is

00:11:59,600 --> 00:12:05,000
is it is abstractions and underneath the

00:12:03,230 --> 00:12:07,430
hood all you're doing is just like sort

00:12:05,000 --> 00:12:14,540
of moving around and like routing baby

00:12:07,430 --> 00:12:23,540
computers together cool so now we can go

00:12:14,540 --> 00:12:25,460
into some terminology so we just learned

00:12:23,540 --> 00:12:29,690
about containers but again everything in

00:12:25,460 --> 00:12:32,480
the cloud is ephemeral some containers

00:12:29,690 --> 00:12:33,740
they actually need to depend on one

00:12:32,480 --> 00:12:36,860
another in the sense that they're

00:12:33,740 --> 00:12:38,840
tightly coupled together so therefore

00:12:36,860 --> 00:12:40,940
they need to be scheduled on the same

00:12:38,840 --> 00:12:43,880
note or in other words the same server

00:12:40,940 --> 00:12:45,830
right so we need more ways to be able to

00:12:43,880 --> 00:12:48,290
organize our baby computers in the sense

00:12:45,830 --> 00:12:52,180
of some of our babe computers depend on

00:12:48,290 --> 00:12:55,640
each other and that's where pods come in

00:12:52,180 --> 00:12:59,810
pots are the basic scheduling unit for

00:12:55,640 --> 00:13:01,820
kubernetes so what it is is that there's

00:12:59,810 --> 00:13:02,960
one or more containers in a pod and

00:13:01,820 --> 00:13:05,150
they're always scheduled together

00:13:02,960 --> 00:13:07,960
they're always coupled together

00:13:05,150 --> 00:13:11,810
each pot they are given an IP address

00:13:07,960 --> 00:13:13,760
within the cluster to be reached and you

00:13:11,810 --> 00:13:15,500
cannot actually reach this to this IP

00:13:13,760 --> 00:13:18,740
outside the cluster I'll talk to you in

00:13:15,500 --> 00:13:21,290
a second about how to do that

00:13:18,740 --> 00:13:24,710
some people find pods to be confusing

00:13:21,290 --> 00:13:26,860
you rarely ever have more than one

00:13:24,710 --> 00:13:29,360
container within a pod

00:13:26,860 --> 00:13:32,540
so if it's too confusing you can also

00:13:29,360 --> 00:13:38,120
think of it as a fancy container with an

00:13:32,540 --> 00:13:41,750
IP IP address inside the cluster the

00:13:38,120 --> 00:13:46,190
next abstraction is a deployment which

00:13:41,750 --> 00:13:49,250
is a group of pods so here you have the

00:13:46,190 --> 00:13:52,070
concept of an actual state and then a

00:13:49,250 --> 00:13:55,040
desired state so deployments what they

00:13:52,070 --> 00:13:58,270
do is help your pods reach desired state

00:13:55,040 --> 00:14:02,810
so a more concrete example for instance

00:13:58,270 --> 00:14:04,670
is that you can specify the scale so the

00:14:02,810 --> 00:14:07,640
number of pods you always want to be

00:14:04,670 --> 00:14:09,470
running within your cluster so what will

00:14:07,640 --> 00:14:12,230
happen is is let's say you want to

00:14:09,470 --> 00:14:14,840
define your replica set as three so

00:14:12,230 --> 00:14:16,610
that's like the scale let's say

00:14:14,840 --> 00:14:20,090
something happens with one of your pods

00:14:16,610 --> 00:14:22,910
it dies or you kill it or something like

00:14:20,090 --> 00:14:26,660
that the deployment it will make sure

00:14:22,910 --> 00:14:29,120
that your cluster always has three of

00:14:26,660 --> 00:14:31,940
these pods and so that's the sort of

00:14:29,120 --> 00:14:35,750
idea of desired state and actual state

00:14:31,940 --> 00:14:38,450
and that's appts so that's just again

00:14:35,750 --> 00:14:41,440
sort of a way to make sure that there's

00:14:38,450 --> 00:14:43,340
always the number of pods that you are

00:14:41,440 --> 00:14:47,000
number of pods running that you've

00:14:43,340 --> 00:14:48,320
defined or other configuration things

00:14:47,000 --> 00:14:53,300
that you've defined within your manifest

00:14:48,320 --> 00:14:56,690
file the next thing is we have a concept

00:14:53,300 --> 00:15:01,160
of services so we need this organized

00:14:56,690 --> 00:15:02,540
organizational concept because you want

00:15:01,160 --> 00:15:05,540
to be able to sort of like group

00:15:02,540 --> 00:15:08,450
deployments or pods together so what

00:15:05,540 --> 00:15:11,930
services refers to is it's a group of

00:15:08,450 --> 00:15:13,880
pods or deployments so this has nothing

00:15:11,930 --> 00:15:17,459
to do with the desired state this has

00:15:13,880 --> 00:15:20,429
entirely to do with routing so the pro

00:15:17,459 --> 00:15:23,550
is if you'll recall that each pod gets

00:15:20,429 --> 00:15:26,490
an IP address right so when they restart

00:15:23,550 --> 00:15:29,160
or die or get killed you can't actually

00:15:26,490 --> 00:15:31,639
depend on that IP address to always be

00:15:29,160 --> 00:15:35,910
the same so your IP address can change

00:15:31,639 --> 00:15:39,360
and that's a unreliable IP address to

00:15:35,910 --> 00:15:41,579
depend on so let's say you have a group

00:15:39,360 --> 00:15:44,490
of pods that we will refer to as

00:15:41,579 --> 00:15:48,569
front-end and another group of pods that

00:15:44,490 --> 00:15:50,579
we will refer to as backends so they

00:15:48,569 --> 00:15:52,079
need to always be able to keep track of

00:15:50,579 --> 00:15:52,379
each other and be able to talk to each

00:15:52,079 --> 00:15:56,129
other

00:15:52,379 --> 00:15:58,290
so what services does is that you can

00:15:56,129 --> 00:16:01,410
hit an endpoint within the cluster and

00:15:58,290 --> 00:16:05,699
it will always hit this defined group of

00:16:01,410 --> 00:16:10,730
pods or deployments so in such a way in

00:16:05,699 --> 00:16:13,740
my diagram here I think I have service

00:16:10,730 --> 00:16:15,389
service one and service two so service

00:16:13,740 --> 00:16:18,269
one and service two can always talk to

00:16:15,389 --> 00:16:22,309
each other within the cluster at that

00:16:18,269 --> 00:16:22,309
endpoint and that's always dependable

00:16:23,240 --> 00:16:30,540
cool so now we're sort of gonna bring

00:16:27,480 --> 00:16:33,299
everything together but before hands let

00:16:30,540 --> 00:16:35,939
me talk to you about ingress so what

00:16:33,299 --> 00:16:39,589
ingress is is that it defines how

00:16:35,939 --> 00:16:42,569
traffic outside the cluster is routed to

00:16:39,589 --> 00:16:44,249
inside the cluster so remember all the

00:16:42,569 --> 00:16:47,970
IP addresses and things that I talked

00:16:44,249 --> 00:16:50,790
about so far are all within the cluster

00:16:47,970 --> 00:16:52,379
in the sense of you can't actually reach

00:16:50,790 --> 00:16:54,809
to it outside of cluster there's

00:16:52,379 --> 00:16:59,220
something special to services but just

00:16:54,809 --> 00:17:02,939
assume that for now so ingress what it

00:16:59,220 --> 00:17:05,850
does is it routes external traffic to

00:17:02,939 --> 00:17:08,579
internal services based on things like

00:17:05,850 --> 00:17:10,770
your hosts in your path and it's used to

00:17:08,579 --> 00:17:14,569
expose your services to the world so

00:17:10,770 --> 00:17:17,549
what will happen is is you can define a

00:17:14,569 --> 00:17:21,270
endpoint like for instance domain comm

00:17:17,549 --> 00:17:24,149
/foo and /foo will then route to service

00:17:21,270 --> 00:17:29,010
a and that is defined within your

00:17:24,149 --> 00:17:30,510
ingress controller so if we are going to

00:17:29,010 --> 00:17:33,930
pull everything together and

00:17:30,510 --> 00:17:35,610
now what we have is the internet we hit

00:17:33,930 --> 00:17:38,880
our ingress controller ingress

00:17:35,610 --> 00:17:41,310
controller will hit endpoint foo which

00:17:38,880 --> 00:17:44,040
will then route your traffic to service

00:17:41,310 --> 00:17:46,710
to a service a within service a we have

00:17:44,040 --> 00:17:49,110
a deployment and in the deployment its

00:17:46,710 --> 00:17:51,750
defined with three pods that will always

00:17:49,110 --> 00:17:54,750
be up and running and then here I just

00:17:51,750 --> 00:17:57,140
have a diagram of a random other pod

00:17:54,750 --> 00:18:00,810
which could also be a deployment of one

00:17:57,140 --> 00:18:03,660
and so that is that sort of like pulls

00:18:00,810 --> 00:18:06,630
everything together as to how committees

00:18:03,660 --> 00:18:10,230
work so we went from we copied our app

00:18:06,630 --> 00:18:13,770
onto our container right then we package

00:18:10,230 --> 00:18:16,800
our so we copy our app binary on to our

00:18:13,770 --> 00:18:19,110
container and then we sort of have all

00:18:16,800 --> 00:18:20,970
these layers of organizational abilities

00:18:19,110 --> 00:18:22,320
to make sure that a containers are

00:18:20,970 --> 00:18:23,910
always up and running that we're able to

00:18:22,320 --> 00:18:26,880
scale them that we're able to reach them

00:18:23,910 --> 00:18:30,690
and sort of incrementally build this

00:18:26,880 --> 00:18:32,430
infrastructure in that way so I want you

00:18:30,690 --> 00:18:33,770
to keep this diagram in your mind

00:18:32,430 --> 00:18:37,230
because I'm going to now show you some

00:18:33,770 --> 00:18:38,880
gamal I feel like lately I've been like

00:18:37,230 --> 00:18:41,040
dreaming and yeah mole and just thinking

00:18:38,880 --> 00:18:42,870
about yeah mole constantly because that

00:18:41,040 --> 00:18:47,490
is the reality of what kubernetes

00:18:42,870 --> 00:18:50,820
if you will be working with it is so

00:18:47,490 --> 00:18:54,360
that picture is ultimately the zml files

00:18:50,820 --> 00:18:56,430
and I'll go into them in more detail as

00:18:54,360 --> 00:19:00,600
well as I'll do a demo on an actual

00:18:56,430 --> 00:19:03,360
kubernetes cluster in a second so on the

00:19:00,600 --> 00:19:07,320
leftmost EML what we have is a

00:19:03,360 --> 00:19:11,300
deployment so here we have a replica set

00:19:07,320 --> 00:19:14,370
as two and we have our app image there

00:19:11,300 --> 00:19:16,230
that's polls from docker hub which is a

00:19:14,370 --> 00:19:21,540
registry which is where your docker

00:19:16,230 --> 00:19:23,730
files or docker images live sorry and we

00:19:21,540 --> 00:19:27,600
have our app image there and we have

00:19:23,730 --> 00:19:31,080
exposed port 80 service here is the

00:19:27,600 --> 00:19:33,390
thing that we talked about where we are

00:19:31,080 --> 00:19:35,490
able to sort of group all these

00:19:33,390 --> 00:19:37,680
deployments and pots together the way

00:19:35,490 --> 00:19:42,330
that it does that is via selectors and

00:19:37,680 --> 00:19:43,539
labels so if it has the label let's see

00:19:42,330 --> 00:19:46,389
so the deployment has laid

00:19:43,539 --> 00:19:48,639
our app and the selector will select and

00:19:46,389 --> 00:19:51,600
route traffic to anything that with the

00:19:48,639 --> 00:19:54,450
label of our app using their selector

00:19:51,600 --> 00:19:58,659
after that we have an ingress controller

00:19:54,450 --> 00:20:01,739
and so there we have our service name

00:19:58,659 --> 00:20:05,769
our app and we're routing traffic to

00:20:01,739 --> 00:20:09,489
port 9000 so I'll demo that on an actual

00:20:05,769 --> 00:20:12,729
communities cluster in a second so for

00:20:09,489 --> 00:20:15,789
this part this is where I kind of want

00:20:12,729 --> 00:20:18,909
to have you ignore this for a second and

00:20:15,789 --> 00:20:21,099
I'll come back to why I feel like helm

00:20:18,909 --> 00:20:22,899
is a great tool so this is how you

00:20:21,099 --> 00:20:24,639
actually deploy each resource and

00:20:22,899 --> 00:20:28,570
there's like a lot of lines that you got

00:20:24,639 --> 00:20:31,179
to think about the next thing that I

00:20:28,570 --> 00:20:33,909
really want to talk about is version

00:20:31,179 --> 00:20:37,139
control for a cluster so this is all

00:20:33,909 --> 00:20:40,090
great right so you now understand a

00:20:37,139 --> 00:20:43,179
certain level of communities deploying

00:20:40,090 --> 00:20:46,450
these resources onto your cluster but

00:20:43,179 --> 00:20:48,460
how do I keep track of the state of our

00:20:46,450 --> 00:20:50,289
cluster right so we can have similar

00:20:48,460 --> 00:20:52,659
deployments but have them be slightly

00:20:50,289 --> 00:20:54,970
different so let's say for instance you

00:20:52,659 --> 00:20:58,179
want the exact same deployment but you

00:20:54,970 --> 00:21:00,220
want a new version of your language or

00:20:58,179 --> 00:21:01,599
something like that or let's say you

00:21:00,220 --> 00:21:05,019
want your deployments to have a

00:21:01,599 --> 00:21:06,940
different number of replicas and this is

00:21:05,019 --> 00:21:12,580
where helm comes in where it's version

00:21:06,940 --> 00:21:17,919
control for your kubernetes cluster and

00:21:12,580 --> 00:21:20,019
that's Elms logo so the first thing that

00:21:17,919 --> 00:21:24,249
we need to talk about for helm is each

00:21:20,019 --> 00:21:26,919
helm so the helm unit I guess is what we

00:21:24,249 --> 00:21:28,539
can describe it is called a charts so

00:21:26,919 --> 00:21:30,429
within a chart it has all of your

00:21:28,539 --> 00:21:32,830
communities files and their which are

00:21:30,429 --> 00:21:34,960
called manifest files and so one chart

00:21:32,830 --> 00:21:37,059
defines a group of manifest files so you

00:21:34,960 --> 00:21:41,139
can have some metadata here with a lot

00:21:37,059 --> 00:21:44,859
of descriptive details the next thing

00:21:41,139 --> 00:21:49,629
that we have is our different manifests

00:21:44,859 --> 00:21:51,759
so so that should be under templates so

00:21:49,629 --> 00:21:53,769
there I have the three files that I

00:21:51,759 --> 00:21:54,460
showed you before deployment service

00:21:53,769 --> 00:21:56,289
ingress

00:21:54,460 --> 00:21:59,409
and the really easy way to deploy

00:21:56,289 --> 00:22:02,710
everything is just run helm install and

00:21:59,409 --> 00:22:07,389
then the directory that you have your

00:22:02,710 --> 00:22:10,389
chart packaged in I am actually going to

00:22:07,389 --> 00:22:13,659
go ahead and mirror what I have locally

00:22:10,389 --> 00:22:16,509
and show you a helmet art that I

00:22:13,659 --> 00:22:21,399
actually wrote for nginx

00:22:16,509 --> 00:22:24,419
so let me get my systems and mirror my

00:22:21,399 --> 00:22:24,419
display really quickly

00:22:27,640 --> 00:22:32,920
cool should be able to see that now

00:22:29,860 --> 00:22:32,920
[Music]

00:22:38,920 --> 00:22:45,600
let's see if I can minimize this a bit

00:22:40,960 --> 00:22:45,600
more on a second

00:22:54,830 --> 00:23:08,290
okay maybe let's set zoom - there you go

00:23:01,360 --> 00:23:08,290
can you see that let me zoom in more

00:23:10,290 --> 00:23:19,950
okay so let's do a quick run-through of

00:23:15,390 --> 00:23:21,780
what I have here so the tool so what you

00:23:19,950 --> 00:23:23,580
see here is Rancher which is my employer

00:23:21,780 --> 00:23:25,950
but you can also run a communities

00:23:23,580 --> 00:23:31,260
cluster locally using mini cube I

00:23:25,950 --> 00:23:34,020
believe which is a popular tool except I

00:23:31,260 --> 00:23:40,050
am using Rancher because for me that's

00:23:34,020 --> 00:23:44,280
super easy to use so here what I have R

00:23:40,050 --> 00:23:46,980
is my nginx chart so let me go ahead and

00:23:44,280 --> 00:23:50,460
show you what's inside my templates

00:23:46,980 --> 00:23:52,170
directory so I have my three files that

00:23:50,460 --> 00:23:53,910
you saw before right we have the concept

00:23:52,170 --> 00:23:56,280
of a deployment we have the concept of

00:23:53,910 --> 00:23:57,960
ingress which will route external

00:23:56,280 --> 00:24:01,020
traffic internally to my cluster and

00:23:57,960 --> 00:24:06,690
then we have the idea of a service right

00:24:01,020 --> 00:24:08,220
so let's go ahead and cat deployment the

00:24:06,690 --> 00:24:13,200
main thing that I wanted to show you

00:24:08,220 --> 00:24:18,420
here is that we have a replica set as

00:24:13,200 --> 00:24:21,900
three and then here we also have values

00:24:18,420 --> 00:24:24,900
tag which is defined in my values

00:24:21,900 --> 00:24:26,520
EML file so that's basically whatever's

00:24:24,900 --> 00:24:30,510
in my values animal file will be

00:24:26,520 --> 00:24:31,320
replaced there so let's go ahead and

00:24:30,510 --> 00:24:36,860
show that

00:24:31,320 --> 00:24:36,860
so the image I'm using today will be

00:24:42,539 --> 00:24:49,109
the image that I'll be using today is

00:24:44,369 --> 00:24:51,209
engine X 1.8 13.5 and what I'll do is

00:24:49,109 --> 00:24:53,849
I'll go ahead and install this chart

00:24:51,209 --> 00:24:55,320
we'll do an upgrade and then we'll do a

00:24:53,849 --> 00:25:03,809
rollback to sort of show you the

00:24:55,320 --> 00:25:09,779
different states of our cluster so I'm

00:25:03,809 --> 00:25:12,229
going to do how install F and your next

00:25:09,779 --> 00:25:12,229
demo

00:25:16,680 --> 00:25:23,460
so he's tricky to fight with the demo

00:25:20,040 --> 00:25:25,880
gods let's see if I have okay so I'm

00:25:23,460 --> 00:25:29,460
gonna go ahead and delete that I guess I

00:25:25,880 --> 00:25:32,640
already have a helmet art installed I'm

00:25:29,460 --> 00:25:34,740
gonna go ahead and delete that the other

00:25:32,640 --> 00:25:37,920
thing that I'm going to show you is how

00:25:34,740 --> 00:25:40,170
to the alternative of not using home and

00:25:37,920 --> 00:25:44,640
how difficult that is so I'm going to do

00:25:40,170 --> 00:25:47,220
helm deletes and then this is called a

00:25:44,640 --> 00:25:48,840
release so the release is automatically

00:25:47,220 --> 00:25:52,400
generated and the release that I'm

00:25:48,840 --> 00:25:57,870
deleting right now it's not a snug seal

00:25:52,400 --> 00:26:01,440
helm names are funny let's see so now

00:25:57,870 --> 00:26:04,040
I'm gonna go ahead and install and your

00:26:01,440 --> 00:26:04,040
next demo

00:26:09,850 --> 00:26:14,740
home install nginx demo okay let's try

00:26:14,170 --> 00:26:18,520
this again

00:26:14,740 --> 00:26:20,170
there we go so the release that we've

00:26:18,520 --> 00:26:23,860
just created for this cluster is called

00:26:20,170 --> 00:26:26,470
sweet Bronco which is interesting and

00:26:23,860 --> 00:26:27,940
what we have installed is we have a

00:26:26,470 --> 00:26:30,580
deployment and we have an ingress

00:26:27,940 --> 00:26:33,340
controller as well so let's go ahead and

00:26:30,580 --> 00:26:35,200
do QC t also what cubes TTL is is it's

00:26:33,340 --> 00:26:38,200
the way to talk to our kubernetes

00:26:35,200 --> 00:26:43,000
cluster so I'm going to do a cube CTL

00:26:38,200 --> 00:26:44,800
get all and here we can see all the

00:26:43,000 --> 00:26:48,010
different resources that we have

00:26:44,800 --> 00:26:51,880
deployed so what we have is our three

00:26:48,010 --> 00:26:56,020
pods here right what we also have is our

00:26:51,880 --> 00:26:59,110
nginx service and then we should have an

00:26:56,020 --> 00:27:03,850
ingress controller so let's do Q CTL get

00:26:59,110 --> 00:27:08,290
ingress and here is the IP address that

00:27:03,850 --> 00:27:10,060
we can use to route external traffic so

00:27:08,290 --> 00:27:13,450
you'll remember that the port that I

00:27:10,060 --> 00:27:16,540
defined before was 9000 so if I hit this

00:27:13,450 --> 00:27:19,000
I should be able to see like a welcome

00:27:16,540 --> 00:27:20,530
page for nginx that's awesome so we're

00:27:19,000 --> 00:27:23,950
able to route external traffic

00:27:20,530 --> 00:27:26,260
internally to our cluster and the other

00:27:23,950 --> 00:27:28,300
thing that I kind of want to do was go

00:27:26,260 --> 00:27:31,540
ahead and make sure the nginx version

00:27:28,300 --> 00:27:38,800
was I think I defined it as version one

00:27:31,540 --> 00:27:42,610
point 13 so so what I have done here is

00:27:38,800 --> 00:27:44,650
I've actually SSH into my host so I'm

00:27:42,610 --> 00:27:47,380
going to run a docker PS to see what

00:27:44,650 --> 00:27:50,950
containers I have running oops let me

00:27:47,380 --> 00:27:53,170
minimize this screen of it I have a lot

00:27:50,950 --> 00:27:56,800
of containers running and then I'm gonna

00:27:53,170 --> 00:28:04,830
pick one of the nginx container images

00:27:56,800 --> 00:28:04,830
and sort of SSH into that okay

00:28:05,000 --> 00:28:13,550
sh - I sorry doctor

00:28:10,120 --> 00:28:16,490
exec - t image so what I'm doing is just

00:28:13,550 --> 00:28:19,430
I'm exacting into this container we're

00:28:16,490 --> 00:28:20,960
gonna run the nginx version and see what

00:28:19,430 --> 00:28:23,630
we have here so I want you to remember

00:28:20,960 --> 00:28:27,730
the version is nginx one point thirteen

00:28:23,630 --> 00:28:31,160
point five we're gonna exit out of here

00:28:27,730 --> 00:28:33,110
now what we're going to do is we want to

00:28:31,160 --> 00:28:37,930
set our nginx

00:28:33,110 --> 00:28:39,680
version to 1.12 for some reason I

00:28:37,930 --> 00:28:41,330
probably should have started as one

00:28:39,680 --> 00:28:43,250
point twelve and upgraded it to one

00:28:41,330 --> 00:28:44,450
point thirteen but that's okay we just

00:28:43,250 --> 00:28:46,730
wanted to demonstrate that we are

00:28:44,450 --> 00:28:49,610
running different versions so I'm going

00:28:46,730 --> 00:28:54,980
to do helm upgrade and the release that

00:28:49,610 --> 00:28:57,700
I have here is let's see sweet Broncos

00:28:54,980 --> 00:28:57,700
I'm gonna copy that

00:29:00,559 --> 00:29:08,460
sweet Bronco and then what I'm going to

00:29:05,309 --> 00:29:14,009
do is set my tag so you remember the

00:29:08,460 --> 00:29:17,899
values yellow file is I had something

00:29:14,009 --> 00:29:27,799
called tag and what I want to do is

00:29:17,899 --> 00:29:34,669
nginx 1.12 and then we're going to run

00:29:27,799 --> 00:29:34,669
that upgrade for nginx demo

00:29:38,830 --> 00:29:46,370
cool so what's happening now is that

00:29:43,179 --> 00:29:50,149
communities or so what's happening is

00:29:46,370 --> 00:29:55,700
that those nginx containers are being

00:29:50,149 --> 00:29:57,620
killed and reinstalled with 1.12 so

00:29:55,700 --> 00:30:01,820
let's go ahead and look at our hosts

00:29:57,620 --> 00:30:03,740
again and do the same thing so remember

00:30:01,820 --> 00:30:05,929
currently nginx is that version one

00:30:03,740 --> 00:30:07,669
point thirteen point five so let's do a

00:30:05,929 --> 00:30:12,740
docker PS to see what containers we have

00:30:07,669 --> 00:30:16,570
in this host I want to make sure that's

00:30:12,740 --> 00:30:20,840
that ones not being killed so docker PS

00:30:16,570 --> 00:30:24,429
and I'm gonna find the image for nginx

00:30:20,840 --> 00:30:24,429
so let's copy this one

00:30:29,809 --> 00:30:35,179
and then this should now oh the thing

00:30:33,169 --> 00:30:36,200
that I did for actually no I didn't do

00:30:35,179 --> 00:30:39,409
that okay cool

00:30:36,200 --> 00:30:42,409
so now let's do nginx - 2 V awesome so

00:30:39,409 --> 00:30:48,019
now we can see that we have downgraded

00:30:42,409 --> 00:30:50,599
or nginx version 2 1.12 so you can

00:30:48,019 --> 00:30:52,279
imagine that there's a lot of variables

00:30:50,599 --> 00:30:54,200
going on so this is just a simple demo

00:30:52,279 --> 00:30:58,179
where I only have one variable that I've

00:30:54,200 --> 00:31:01,009
changed so let's say you have other

00:30:58,179 --> 00:31:04,190
let's say you wanted to upgrade the you

00:31:01,009 --> 00:31:07,070
know Python version as well as well as

00:31:04,190 --> 00:31:11,119
run other things you can do that through

00:31:07,070 --> 00:31:12,979
how and the next thing that I want to do

00:31:11,119 --> 00:31:16,700
is let's say we change our mind right

00:31:12,979 --> 00:31:18,049
and we want to revert our cluster C to

00:31:16,700 --> 00:31:20,570
what it was before we want to do a

00:31:18,049 --> 00:31:24,679
rollback so we can do that with helm as

00:31:20,570 --> 00:31:30,619
well roll back and then the release

00:31:24,679 --> 00:31:32,269
again is something Branko so this is

00:31:30,619 --> 00:31:35,269
actually a great time to demo you can

00:31:32,269 --> 00:31:43,219
list all your releases here so I'm going

00:31:35,269 --> 00:31:46,339
to do how roll back sweet Branko and

00:31:43,219 --> 00:31:50,960
then the revision number one so let's go

00:31:46,339 --> 00:31:53,359
ahead and do that rollback was a success

00:31:50,960 --> 00:31:54,919
happy humming I always like to see that

00:31:53,359 --> 00:31:56,839
and we're gonna do the same thing again

00:31:54,919 --> 00:32:00,879
and now our expectation is that it

00:31:56,839 --> 00:32:11,080
should be a version one point 1325 oops

00:32:00,879 --> 00:32:11,080
so let's do docker PS again

00:32:11,870 --> 00:32:20,210
and then we're gonna just pick a random

00:32:14,210 --> 00:32:22,480
actually nginx container you pick this

00:32:20,210 --> 00:32:22,480
one

00:32:24,300 --> 00:32:35,340
docker exec IT bash and gen-x - to be

00:32:33,180 --> 00:32:39,570
awesome and we're back at one point

00:32:35,340 --> 00:32:40,920
thirteen point five so after this what I

00:32:39,570 --> 00:32:42,810
want to show you was sort of the

00:32:40,920 --> 00:32:46,260
alternative of how to do all this with

00:32:42,810 --> 00:32:48,660
cube CTL commands so Q control what it

00:32:46,260 --> 00:32:51,420
does is each of these things deployment

00:32:48,660 --> 00:32:54,450
services ingress they're each called

00:32:51,420 --> 00:32:56,360
resource and cube CTL what it can do is

00:32:54,450 --> 00:32:58,980
deploy each of these resources

00:32:56,360 --> 00:33:01,440
separately how AM what it does is it

00:32:58,980 --> 00:33:04,380
deploys everything collectively as one

00:33:01,440 --> 00:33:07,500
chart right and so that's the magic of

00:33:04,380 --> 00:33:11,220
that and the hassle for QC gel itself is

00:33:07,500 --> 00:33:15,720
large so what I'm going to do is delete

00:33:11,220 --> 00:33:16,800
my chart again so helm lists so I'm

00:33:15,720 --> 00:33:24,710
gonna do helm

00:33:16,800 --> 00:33:24,710
oops delete sweet Bronco

00:33:27,250 --> 00:33:33,490
and then I'm going to go ahead and

00:33:29,590 --> 00:33:37,120
install everything separately again with

00:33:33,490 --> 00:33:38,950
just plain cube CTL and that you can see

00:33:37,120 --> 00:33:40,750
from that that there's no way to do any

00:33:38,950 --> 00:33:48,400
sort of version control so I'm gonna go

00:33:40,750 --> 00:33:50,970
to nginx demo go into templates there's

00:33:48,400 --> 00:33:52,990
also no way to really like define

00:33:50,970 --> 00:33:55,900
environment variables I guess unless you

00:33:52,990 --> 00:34:01,960
do it manually so I need to do them into

00:33:55,900 --> 00:34:08,349
the deployments do that change this

00:34:01,960 --> 00:34:10,649
image tag to nginx 1.13 let's go ahead

00:34:08,349 --> 00:34:10,649
and do that

00:34:16,179 --> 00:34:20,909
okay so let's go ahead and do QC TL

00:34:21,089 --> 00:34:32,529
applied F deployment dot yeah mole and

00:34:29,819 --> 00:34:36,940
then now we have to go ahead and

00:34:32,529 --> 00:34:40,779
separately do cube CTL apply F ingress

00:34:36,940 --> 00:34:48,099
or let's do service first so we need

00:34:40,779 --> 00:34:54,549
that and then cube CTL apply - f

00:34:48,099 --> 00:34:59,109
and then ingress and then let me do keep

00:34:54,549 --> 00:35:06,549
CTL get ingress oops I don't think I

00:34:59,109 --> 00:35:10,829
think it's still spinning up see QC t

00:35:06,549 --> 00:35:10,829
all to get all okay

00:35:15,180 --> 00:35:20,910
there we go yeah it needed a second to

00:35:17,250 --> 00:35:26,579
spin up so we can demonstrate that this

00:35:20,910 --> 00:35:29,130
will still hit yep it still hits the

00:35:26,579 --> 00:35:30,990
welcome to nginx page but now the

00:35:29,130 --> 00:35:32,430
question is is now that we've done all

00:35:30,990 --> 00:35:34,260
this and we want to make changes to our

00:35:32,430 --> 00:35:36,329
manifest files how do we do that without

00:35:34,260 --> 00:35:38,130
helm right what we did is we just

00:35:36,329 --> 00:35:40,559
separately deployed each of our

00:35:38,130 --> 00:35:45,059
resources there was no way to really

00:35:40,559 --> 00:35:48,569
sort of like replicate each cluster with

00:35:45,059 --> 00:35:49,829
like values that we can define and it

00:35:48,569 --> 00:35:52,260
was super difficult there's no way to

00:35:49,829 --> 00:35:55,140
really like roll back the state of the

00:35:52,260 --> 00:35:57,900
resources collectively as one unit or do

00:35:55,140 --> 00:35:59,490
upgrades and things like that so helm is

00:35:57,900 --> 00:36:10,140
there for version control for your

00:35:59,490 --> 00:36:11,940
cluster and thank you for your time so I

00:36:10,140 --> 00:36:13,980
wanted to ask if you'll have any

00:36:11,940 --> 00:36:20,390
questions about kubernetes or helm or

00:36:13,980 --> 00:36:20,390
containers maybe yep

00:36:20,610 --> 00:36:28,960
yeah sure sorry to do that earlier so

00:36:27,250 --> 00:36:31,270
checked out um all I didn't show because

00:36:28,960 --> 00:36:33,280
it wasn't super important so you can

00:36:31,270 --> 00:36:35,380
also add a lot more things in there so

00:36:33,280 --> 00:36:37,360
this is you can add like documentation

00:36:35,380 --> 00:36:38,890
about like what the chart actually is so

00:36:37,360 --> 00:36:41,380
this chart I defined it as an engine X

00:36:38,890 --> 00:36:45,310
chart and you can have different chart

00:36:41,380 --> 00:36:47,740
versions so with like obviously

00:36:45,310 --> 00:36:49,780
different UML or different kubernetes

00:36:47,740 --> 00:36:52,000
manifest files within them so this is

00:36:49,780 --> 00:36:55,260
the nginx chart version 1 and

00:36:52,000 --> 00:36:57,670
description is let's build a home chart

00:36:55,260 --> 00:36:59,200
so it's just there it's like metadata

00:36:57,670 --> 00:37:05,850
they are to sort of like describe that

00:36:59,200 --> 00:37:05,850
kubernetes cluster deployments yeah yeah

00:37:06,900 --> 00:37:10,780
yeah there is there's like a repository

00:37:09,010 --> 00:37:15,660
actually there's like an official one so

00:37:10,780 --> 00:37:18,040
I think you can do cube CTL get

00:37:15,660 --> 00:37:20,350
something slosh engine actually there's

00:37:18,040 --> 00:37:22,750
already nginx chart that's in the

00:37:20,350 --> 00:37:25,510
official repository as well and that's

00:37:22,750 --> 00:37:27,340
also another option where you don't have

00:37:25,510 --> 00:37:34,680
to have have it like defined locally or

00:37:27,340 --> 00:37:34,680
anything yeah yeah

00:37:35,060 --> 00:37:47,500
I'm sorry yeah yeah no it did not

00:38:01,300 --> 00:38:08,060
I guess like the idea is like so what

00:38:05,570 --> 00:38:10,580
you can also do is you can actually

00:38:08,060 --> 00:38:12,200
change the mo file itself and sort of

00:38:10,580 --> 00:38:17,540
apply that on to your cluster and that

00:38:12,200 --> 00:38:19,730
release however like in production for

00:38:17,540 --> 00:38:23,360
like different clusters I guess let's

00:38:19,730 --> 00:38:24,980
say you can you can like defined that's

00:38:23,360 --> 00:38:26,500
kind of stuff on the fly so if you're

00:38:24,980 --> 00:38:30,619
like in development and things like that

00:38:26,500 --> 00:38:31,880
it's super useful I'm not sure if that

00:38:30,619 --> 00:38:35,390
answered your question but you're you're

00:38:31,880 --> 00:38:37,310
able to define the changes within the

00:38:35,390 --> 00:38:42,910
yeah mo files itself as well and then

00:38:37,310 --> 00:38:42,910
apply those changes yeah

00:38:48,110 --> 00:38:52,400
I think it really depends on context

00:38:50,210 --> 00:38:53,990
right so it's like if this is sort of

00:38:52,400 --> 00:38:57,190
like in your development cycle I would

00:38:53,990 --> 00:39:04,250
just do the like helm you know set thing

00:38:57,190 --> 00:39:07,280
but yeah see if there's any other

00:39:04,250 --> 00:39:09,400
questions all right thank y'all for your

00:39:07,280 --> 00:39:09,400

YouTube URL: https://www.youtube.com/watch?v=9M7UpM5ACs8


