Title: All Things Open 2017 - John Papa - Optimize, Build, and Deploying Node.js and Angular
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:01,250 --> 00:00:08,970
cool hope y'all having a good afternoon

00:00:04,500 --> 00:00:09,960
here we have an interesting time that

00:00:08,970 --> 00:00:13,500
we're living in right now with the web

00:00:09,960 --> 00:00:15,719
and it's a lot of fun because we get to

00:00:13,500 --> 00:00:18,180
write code and play a lot of cool new

00:00:15,719 --> 00:00:20,550
frameworks and try things out but at the

00:00:18,180 --> 00:00:23,400
end of the day eventually we have to

00:00:20,550 --> 00:00:25,710
ship our code and shipping our code can

00:00:23,400 --> 00:00:27,599
mean a lot of different things so taking

00:00:25,710 --> 00:00:29,699
something like angular a node you can

00:00:27,599 --> 00:00:32,070
sit you can push it into some kind of

00:00:29,699 --> 00:00:34,260
cloud or you can put it on an internal

00:00:32,070 --> 00:00:35,070
server is lots place you can put it but

00:00:34,260 --> 00:00:36,480
there's a lot of things you have to

00:00:35,070 --> 00:00:38,070
consider and we're building these kinds

00:00:36,480 --> 00:00:39,930
of applications and this talk today is

00:00:38,070 --> 00:00:42,510
going to show you some of the ways that

00:00:39,930 --> 00:00:44,219
you can handle your code to make it run

00:00:42,510 --> 00:00:47,579
on the web and also to make it run

00:00:44,219 --> 00:00:50,460
better on the web so we're going to

00:00:47,579 --> 00:00:52,649
start off with one of three angles the

00:00:50,460 --> 00:00:55,050
first angle is how do we build angular

00:00:52,649 --> 00:00:56,309
code first of all well start with the

00:00:55,050 --> 00:00:59,820
code itself and then we'll look at how

00:00:56,309 --> 00:01:01,680
we migrate it into the cloud when we

00:00:59,820 --> 00:01:03,270
build our code there is really cool

00:01:01,680 --> 00:01:06,240
tools with angular like the angular CLI

00:01:03,270 --> 00:01:09,299
we can run the angular CLI commands and

00:01:06,240 --> 00:01:11,850
those commands run with this ng syntax

00:01:09,299 --> 00:01:13,680
that's the angular CLI we could say okay

00:01:11,850 --> 00:01:16,140
let's generate a new component called

00:01:13,680 --> 00:01:18,930
customer or generate a new service with

00:01:16,140 --> 00:01:20,430
customer data or a class we can generate

00:01:18,930 --> 00:01:22,770
a bunch of kinds of different files

00:01:20,430 --> 00:01:25,530
using the CLI and it will connect

00:01:22,770 --> 00:01:27,689
everything up for me into the angular

00:01:25,530 --> 00:01:29,970
application so it just runs and this is

00:01:27,689 --> 00:01:32,460
what the angular CLI in the react create

00:01:29,970 --> 00:01:35,640
react that's eli's do for us out of the

00:01:32,460 --> 00:01:37,770
box but really that's not the main value

00:01:35,640 --> 00:01:40,079
we can all write code we can all create

00:01:37,770 --> 00:01:42,270
files and save them and name them that's

00:01:40,079 --> 00:01:44,640
easy the harder part is actually

00:01:42,270 --> 00:01:46,140
creating a build process some of you may

00:01:44,640 --> 00:01:49,470
remember going through the processes

00:01:46,140 --> 00:01:50,490
like using gulp or grunt or broccoli or

00:01:49,470 --> 00:01:52,740
some of these other tools that have been

00:01:50,490 --> 00:01:54,810
out there for a while if you did that

00:01:52,740 --> 00:01:56,430
you probably remember a lot of pain

00:01:54,810 --> 00:01:57,960
trying to make sure you get the sequence

00:01:56,430 --> 00:01:59,790
of the files into your pipeline in the

00:01:57,960 --> 00:02:03,030
right order doing it the right way so

00:01:59,790 --> 00:02:05,040
you end up with a really nice output the

00:02:03,030 --> 00:02:06,390
CLI is with angular and react they're

00:02:05,040 --> 00:02:08,610
going to help us build those kind of

00:02:06,390 --> 00:02:10,739
things much easier so now we can just

00:02:08,610 --> 00:02:12,030
say ng build and it's gonna create a

00:02:10,739 --> 00:02:14,520
development build

00:02:12,030 --> 00:02:16,230
now what's a development build the

00:02:14,520 --> 00:02:20,250
target audience for develoment build is

00:02:16,230 --> 00:02:21,480
me the developer it's you we want the

00:02:20,250 --> 00:02:23,730
development bills to be something that

00:02:21,480 --> 00:02:26,640
are optimized for development so I can

00:02:23,730 --> 00:02:28,980
write code I can see it in the browser I

00:02:26,640 --> 00:02:30,180
can make changes the code a tree

00:02:28,980 --> 00:02:31,950
compiles and shows it right in the

00:02:30,180 --> 00:02:34,260
browser again and I can rinse and repeat

00:02:31,950 --> 00:02:37,020
the point of this is to be super fast

00:02:34,260 --> 00:02:38,910
locally on my dev machine this is

00:02:37,020 --> 00:02:41,640
important because it's not the same as

00:02:38,910 --> 00:02:45,239
building something for a user our end

00:02:41,640 --> 00:02:46,320
users would like a production build so

00:02:45,239 --> 00:02:47,910
we talk about development and production

00:02:46,320 --> 00:02:49,820
builds they're not the same thing

00:02:47,910 --> 00:02:51,930
they've completely different audiences

00:02:49,820 --> 00:02:54,260
production build is supposed to be fast

00:02:51,930 --> 00:02:56,280
and have a great user experience a

00:02:54,260 --> 00:02:57,870
development build is for the developer

00:02:56,280 --> 00:02:59,280
to get things moving one of the big

00:02:57,870 --> 00:03:01,440
differences here might be in a develop

00:02:59,280 --> 00:03:03,690
build I might have 20 Meg of files going

00:03:01,440 --> 00:03:06,000
to the browser not a big deal locally

00:03:03,690 --> 00:03:07,590
because everything's on this laptop but

00:03:06,000 --> 00:03:09,360
once I take this to the cloud that

00:03:07,590 --> 00:03:10,830
becomes a big problem especially if I'm

00:03:09,360 --> 00:03:11,750
on a mobile device or a slow internet

00:03:10,830 --> 00:03:14,550
connection

00:03:11,750 --> 00:03:16,769
that's where our production builds can

00:03:14,550 --> 00:03:19,230
really kick in and one thing angular

00:03:16,769 --> 00:03:22,140
does is it gives us this build optimizer

00:03:19,230 --> 00:03:23,400
flag and a production flag let's take a

00:03:22,140 --> 00:03:25,860
look at kind of what those things will

00:03:23,400 --> 00:03:27,780
do so in these different environments

00:03:25,860 --> 00:03:29,880
first of all on development versus prod

00:03:27,780 --> 00:03:32,070
we can have an environment file that

00:03:29,880 --> 00:03:33,720
lets us set client-side environment

00:03:32,070 --> 00:03:35,790
settings so the builds will

00:03:33,720 --> 00:03:38,340
automatically look at which file that we

00:03:35,790 --> 00:03:40,440
designed for we can also do cache

00:03:38,340 --> 00:03:42,540
busting well turn the cache busting on

00:03:40,440 --> 00:03:43,769
for our production build what's that

00:03:42,540 --> 00:03:45,390
going to do it's going to name all the

00:03:43,769 --> 00:03:47,610
files differently in uniquely so that we

00:03:45,390 --> 00:03:49,530
push out new builds nobody's caching the

00:03:47,610 --> 00:03:51,060
files in the browser again for

00:03:49,530 --> 00:03:54,120
development not so important for

00:03:51,060 --> 00:03:55,590
production it is source Maps we really

00:03:54,120 --> 00:03:56,850
don't want them in production we can

00:03:55,590 --> 00:03:58,739
turn them on if we want but by default

00:03:56,850 --> 00:03:59,790
they're not there again it's more

00:03:58,739 --> 00:04:02,040
overhead that we don't need in

00:03:59,790 --> 00:04:05,730
production but it's great so I could do

00:04:02,040 --> 00:04:09,360
debugging locally extracting CSS

00:04:05,730 --> 00:04:12,329
uglification minification bundling and

00:04:09,360 --> 00:04:14,850
something called äôt these three

00:04:12,329 --> 00:04:17,100
processes here allow us to shrink our

00:04:14,850 --> 00:04:18,479
code down do code splitting and put them

00:04:17,100 --> 00:04:21,690
in separate files so we don't hand up

00:04:18,479 --> 00:04:22,650
with a thousand files and äôt is unique

00:04:21,690 --> 00:04:24,260
to angular

00:04:22,650 --> 00:04:26,010
it's called ahead of time compilation

00:04:24,260 --> 00:04:27,780
what it does

00:04:26,010 --> 00:04:30,960
pree compiles all the angular templates

00:04:27,780 --> 00:04:33,480
on the server at Build time the reason

00:04:30,960 --> 00:04:35,280
this is important is without this let's

00:04:33,480 --> 00:04:36,960
think what will happen if we don't

00:04:35,280 --> 00:04:39,660
compile the templates ahead of time on

00:04:36,960 --> 00:04:41,310
the server we're now sending the angular

00:04:39,660 --> 00:04:43,740
compile across the wire to the browser

00:04:41,310 --> 00:04:45,270
and it has to happen at runtime every

00:04:43,740 --> 00:04:47,610
time the user hits the site in the

00:04:45,270 --> 00:04:49,380
browser and can you guess what's faster

00:04:47,610 --> 00:04:50,120
or slower the server or the browser on

00:04:49,380 --> 00:04:53,700
your mobile phone

00:04:50,120 --> 00:04:55,080
yeah the server so that's one thing it

00:04:53,700 --> 00:04:56,730
doesn't happen and then the second thing

00:04:55,080 --> 00:04:59,310
is that by compiling it on the server

00:04:56,730 --> 00:05:01,380
you're going to send less templates to

00:04:59,310 --> 00:05:02,850
the client so we're sending less stuff

00:05:01,380 --> 00:05:06,300
to the client and we don't have to

00:05:02,850 --> 00:05:08,250
process it on the client so it's gonna

00:05:06,300 --> 00:05:09,420
make things smaller and faster and

00:05:08,250 --> 00:05:11,210
lighter but let's take a look at what

00:05:09,420 --> 00:05:13,170
that means

00:05:11,210 --> 00:05:15,060
now all the demos that you're going to

00:05:13,170 --> 00:05:16,440
see today are actually in a github repo

00:05:15,060 --> 00:05:18,090
that I'll share the link to towards the

00:05:16,440 --> 00:05:21,480
end of this just you can take a look at

00:05:18,090 --> 00:05:23,400
it this is a simple application it's

00:05:21,480 --> 00:05:26,430
called angular cosmos DB it's just gonna

00:05:23,400 --> 00:05:28,410
have a simple hello world and what I've

00:05:26,430 --> 00:05:29,970
done here is I've set up an application

00:05:28,410 --> 00:05:33,480
so I can build it we'll go over to

00:05:29,970 --> 00:05:36,240
terminal and we'll go fullscreen for a

00:05:33,480 --> 00:05:41,780
minute if I run through here and I type

00:05:36,240 --> 00:05:46,500
in ng build oops that's fascinating

00:05:41,780 --> 00:05:55,040
can't you imagine what you're seeing why

00:05:46,500 --> 00:05:55,040
are you seeing that hey AV person hi

00:05:56,290 --> 00:06:01,780
I'm gonna try to do a little bit on the

00:05:58,250 --> 00:06:01,780
fly debugging and see what's going on

00:06:07,150 --> 00:06:11,680
do you see me now all right

00:06:10,210 --> 00:06:16,870
see your mere presence on the stage

00:06:11,680 --> 00:06:21,150
solve all problems thank you don't leave

00:06:16,870 --> 00:06:25,419
they can't see now I'm kidding

00:06:21,150 --> 00:06:27,310
boy he'll be really mean alright so

00:06:25,419 --> 00:06:29,620
we're gonna use a simple command here to

00:06:27,310 --> 00:06:31,990
build an application I'm gonna run ng

00:06:29,620 --> 00:06:33,419
build on the developer side make it a

00:06:31,990 --> 00:06:36,040
little bigger too

00:06:33,419 --> 00:06:38,650
what this is doing is building my local

00:06:36,040 --> 00:06:40,300
project for development build it's going

00:06:38,650 --> 00:06:42,550
to run through aims going to create the

00:06:40,300 --> 00:06:45,760
files for me and at the end you're gonna

00:06:42,550 --> 00:06:48,639
see a couple files in line bundle so in

00:06:45,760 --> 00:06:51,100
line bundle it's only 5k I got really

00:06:48,639 --> 00:06:53,710
loud there it's only 5k and that file is

00:06:51,100 --> 00:06:55,510
basically going to be a web pack it's

00:06:53,710 --> 00:06:56,860
starting at my project it's a little bit

00:06:55,510 --> 00:06:59,039
of overhead that you kept to the project

00:06:56,860 --> 00:07:01,449
to kind of start and kick things off

00:06:59,039 --> 00:07:04,000
then we've got main bundle the main

00:07:01,449 --> 00:07:06,100
bundle is something I wrote it's all of

00:07:04,000 --> 00:07:08,919
my code so that's something I had direct

00:07:06,100 --> 00:07:11,139
control over there's 31k there polyfills

00:07:08,919 --> 00:07:12,580
there's 200k that's quite a bit and

00:07:11,139 --> 00:07:14,200
quite frankly we can get rid of some of

00:07:12,580 --> 00:07:15,940
these if our browsers if we know our

00:07:14,200 --> 00:07:18,039
target browsers and we can reduce which

00:07:15,940 --> 00:07:19,270
polyfills we include but it's still a

00:07:18,039 --> 00:07:21,940
little concerning it's that big let's

00:07:19,270 --> 00:07:25,450
see if we can do about that styles 15k

00:07:21,940 --> 00:07:27,520
and oh my 2.3 Meg for a vendor bundle

00:07:25,450 --> 00:07:29,919
vendor bundles totally not in my control

00:07:27,520 --> 00:07:32,500
this is third-party libraries that I'm

00:07:29,919 --> 00:07:34,360
using in my application so we can see

00:07:32,500 --> 00:07:36,400
the total sets of build for development

00:07:34,360 --> 00:07:40,180
a little bigger than I'd want for real

00:07:36,400 --> 00:07:43,000
application so I can run another step

00:07:40,180 --> 00:07:44,320
here by doing ng build prod now this is

00:07:43,000 --> 00:07:46,900
a production build let's see the

00:07:44,320 --> 00:07:48,010
difference that this bill does it's

00:07:46,900 --> 00:07:50,380
still going to end up with the same

00:07:48,010 --> 00:07:52,030
number of files but now we're gonna see

00:07:50,380 --> 00:07:55,090
a couple of differences both in the size

00:07:52,030 --> 00:07:56,410
and in the naming of the files first

00:07:55,090 --> 00:07:58,360
thing you may notice is that we get

00:07:56,410 --> 00:08:01,030
these cache busted letters and numbers

00:07:58,360 --> 00:08:03,490
at the end of the file names you'll also

00:08:01,030 --> 00:08:05,979
notice the polyfills shrunk from 200 to

00:08:03,490 --> 00:08:07,750
about 66 k so it did a lot of

00:08:05,979 --> 00:08:10,750
uglification minification and other

00:08:07,750 --> 00:08:13,510
processes to reduce the code main went

00:08:10,750 --> 00:08:15,520
from 31 to 18 now 13 K might not sound a

00:08:13,510 --> 00:08:17,680
lot but I have a very small application

00:08:15,520 --> 00:08:20,680
imagine this app was huge that's almost

00:08:17,680 --> 00:08:23,229
a 50% reduction right there

00:08:20,680 --> 00:08:27,490
my vendor file went from 2.3 Meg down to

00:08:23,229 --> 00:08:30,160
300k that's significant we just cut a 2

00:08:27,490 --> 00:08:33,039
Meg off of our project size by going to

00:08:30,160 --> 00:08:34,419
a production build but another thing

00:08:33,039 --> 00:08:37,060
that happens says our apps a lot of

00:08:34,419 --> 00:08:38,800
times we write code and we end up with

00:08:37,060 --> 00:08:40,510
code that's really not being used it's

00:08:38,800 --> 00:08:43,120
called dead code and there's a process

00:08:40,510 --> 00:08:44,500
called tree shaking which can help go

00:08:43,120 --> 00:08:47,580
through our code looking at our

00:08:44,500 --> 00:08:50,080
dependency chains ahead of time and

00:08:47,580 --> 00:08:53,260
shake out any dead code we're not using

00:08:50,080 --> 00:08:54,520
and to enable this here we can type in

00:08:53,260 --> 00:08:57,240
this really long command which I never

00:08:54,520 --> 00:09:00,580
spell write build optimizer

00:08:57,240 --> 00:09:02,470
it's a experimental feature with this

00:09:00,580 --> 00:09:04,540
version of the CLI in later days it may

00:09:02,470 --> 00:09:06,790
just be baked in but this is gonna run a

00:09:04,540 --> 00:09:09,100
production build but also do tree

00:09:06,790 --> 00:09:11,350
shaking so let's see what happens in

00:09:09,100 --> 00:09:12,430
this case we should still get all the

00:09:11,350 --> 00:09:14,830
same things we got with a production

00:09:12,430 --> 00:09:17,770
build plus it should improve things

00:09:14,830 --> 00:09:19,870
let's see first of all you notice that

00:09:17,770 --> 00:09:21,970
there's only four files the vendor file

00:09:19,870 --> 00:09:23,740
is gone so at first you might think oh

00:09:21,970 --> 00:09:24,820
yay angular just decided we didn't need

00:09:23,740 --> 00:09:27,670
third-party files anymore

00:09:24,820 --> 00:09:29,380
that'd be kind of cool but actually what

00:09:27,670 --> 00:09:34,089
it did is it combined the vendor files

00:09:29,380 --> 00:09:36,010
with main the main file is now 268 K so

00:09:34,089 --> 00:09:40,630
if you do a little bit math here and I

00:09:36,010 --> 00:09:41,830
know it's not fun to do 316 K + 18 K so

00:09:40,630 --> 00:09:45,430
we're looking at about three thirty four

00:09:41,830 --> 00:09:47,529
right and we cut that down to about 268

00:09:45,430 --> 00:09:50,800
so we're able to chop a little bit more

00:09:47,529 --> 00:09:53,339
off our app by reducing code that we're

00:09:50,800 --> 00:09:55,570
not actually using in the application I

00:09:53,339 --> 00:09:57,100
have this little ongoing joke with the

00:09:55,570 --> 00:09:58,390
angular team saying the more flags they

00:09:57,100 --> 00:10:02,020
add eventually we'll get to a negative

00:09:58,390 --> 00:10:03,970
size file so hopefully we can get there

00:10:02,020 --> 00:10:06,430
but the cool thing is we're just doing

00:10:03,970 --> 00:10:08,589
simple automated processes to shrink

00:10:06,430 --> 00:10:10,560
down or file size something else we can

00:10:08,589 --> 00:10:19,150
do if we go back and look at the code

00:10:10,560 --> 00:10:20,860
let's go in here and there we go and you

00:10:19,150 --> 00:10:23,620
are seeing this good

00:10:20,860 --> 00:10:26,890
so in my code here let's say I go over

00:10:23,620 --> 00:10:29,560
to my hero service notice that I'm

00:10:26,890 --> 00:10:32,500
adding in rxjs all I'm using is catch

00:10:29,560 --> 00:10:33,880
and map well you can imagine a real

00:10:32,500 --> 00:10:36,910
application I might use a lot more

00:10:33,880 --> 00:10:39,610
operators for rxjs so I could get really

00:10:36,910 --> 00:10:40,960
kind of painful so go ahead and type

00:10:39,610 --> 00:10:44,050
these kind of commands and all over the

00:10:40,960 --> 00:10:47,020
place so a very simple shortcut say you

00:10:44,050 --> 00:10:50,740
know what I just want all of our XJS how

00:10:47,020 --> 00:10:52,720
big could possibly be well if I rerun my

00:10:50,740 --> 00:10:57,610
process over here and let's just run the

00:10:52,720 --> 00:11:02,350
prod build for now and actually I got a

00:10:57,610 --> 00:11:04,180
command for this and I go run it yes ng

00:11:02,350 --> 00:11:06,360
build prod stats Jason's let's run that

00:11:04,180 --> 00:11:06,360
one

00:11:10,760 --> 00:11:15,440
I think that was what was called Jen

00:11:12,260 --> 00:11:17,120
stats yep this has got to run the ng

00:11:15,440 --> 00:11:19,400
bill prod with this flag called stats

00:11:17,120 --> 00:11:22,220
Jason stats Jason is a way to tell the

00:11:19,400 --> 00:11:24,710
angular build process to create a stats

00:11:22,220 --> 00:11:27,290
file for webpack so I can analyze what's

00:11:24,710 --> 00:11:28,970
inside your project so the output of the

00:11:27,290 --> 00:11:30,710
build will be the same except we'll get

00:11:28,970 --> 00:11:32,990
an additional file called stats Jason

00:11:30,710 --> 00:11:35,840
notice or back up a little bit in vendor

00:11:32,990 --> 00:11:39,530
vendors 501 k if we go back to levels up

00:11:35,840 --> 00:11:41,570
vendor was 316 now you just saw what I

00:11:39,530 --> 00:11:42,740
did so the big reveal is gone but

00:11:41,570 --> 00:11:44,660
imagine you've been working on this

00:11:42,740 --> 00:11:46,970
project with everybody in this room and

00:11:44,660 --> 00:11:48,800
a large app you have no idea what people

00:11:46,970 --> 00:11:51,080
have included in the project and more

00:11:48,800 --> 00:11:53,360
importantly you don't know which imports

00:11:51,080 --> 00:11:56,000
and other features are actually needed

00:11:53,360 --> 00:11:57,590
if versus not needed so how would you go

00:11:56,000 --> 00:11:59,990
in and figure out how can I reduce the

00:11:57,590 --> 00:12:02,540
size of this application without

00:11:59,990 --> 00:12:06,320
affecting it negatively well one way you

00:12:02,540 --> 00:12:08,960
can do this is to use a tool called dunt

00:12:06,320 --> 00:12:12,110
dunt dung web pack bundle analyzer which

00:12:08,960 --> 00:12:14,590
is right there and another one is you

00:12:12,110 --> 00:12:16,700
can run something called source map

00:12:14,590 --> 00:12:21,310
Explorer there's a couple of these that

00:12:16,700 --> 00:12:21,310
are out there so let's run gen report

00:12:22,180 --> 00:12:26,330
now this is going to look at that stats

00:12:24,170 --> 00:12:28,220
JSON file and it's going to explore and

00:12:26,330 --> 00:12:32,120
explode up everything inside my project

00:12:28,220 --> 00:12:33,710
the thing to look for in here is gonna

00:12:32,120 --> 00:12:36,050
be do you see anything on the screen

00:12:33,710 --> 00:12:40,850
that shows like millions of little tiny

00:12:36,050 --> 00:12:42,590
rectangles if you see that that's a good

00:12:40,850 --> 00:12:44,090
sign that you're probably pulling in a

00:12:42,590 --> 00:12:46,820
lot more than you actually need in your

00:12:44,090 --> 00:12:49,430
project so by looking at that I hover

00:12:46,820 --> 00:12:52,820
over rxjs and it shows me here that that

00:12:49,430 --> 00:12:54,860
is actually 874 K unzipped that's a lot

00:12:52,820 --> 00:12:56,600
of code and if I click on that I can

00:12:54,860 --> 00:12:58,730
start diving in to see okay what's

00:12:56,600 --> 00:13:01,400
inside of there am I using all of these

00:12:58,730 --> 00:13:02,990
operators and if I don't recognize a lot

00:13:01,400 --> 00:13:04,130
of these that's a great place to start

00:13:02,990 --> 00:13:05,720
and look and say you know what I'm

00:13:04,130 --> 00:13:07,640
probably have a place here I could

00:13:05,720 --> 00:13:09,590
optimize let's go ahead and start

00:13:07,640 --> 00:13:10,790
reducing some of them one of the nice

00:13:09,590 --> 00:13:12,890
things about this tool is if you hover

00:13:10,790 --> 00:13:15,260
to the left you can also uncheck certain

00:13:12,890 --> 00:13:17,570
ones and just explore the vendor file if

00:13:15,260 --> 00:13:20,510
you want to or you can explore your own

00:13:17,570 --> 00:13:22,100
files so you can click the ones on or

00:13:20,510 --> 00:13:23,870
off and you can also look at the size is

00:13:22,100 --> 00:13:28,220
based upon gzip diversity

00:13:23,870 --> 00:13:30,200
minified versus untouched so this tool

00:13:28,220 --> 00:13:35,390
is very nice for taking a look at what

00:13:30,200 --> 00:13:36,920
we can do to optimize our code so those

00:13:35,390 --> 00:13:39,350
are a few tips on figuring out how we

00:13:36,920 --> 00:13:40,820
can optimize the code there's other

00:13:39,350 --> 00:13:43,250
things that we can do too by looking

00:13:40,820 --> 00:13:46,220
through our application but once we get

00:13:43,250 --> 00:13:49,690
the app done the next step is to take

00:13:46,220 --> 00:13:51,590
that code and to push it into the cloud

00:13:49,690 --> 00:13:53,200
here's some different tools we can look

00:13:51,590 --> 00:13:54,860
at and the links are in the slides but

00:13:53,200 --> 00:13:56,900
one of the things they think about

00:13:54,860 --> 00:13:59,120
before we get into the cloud that often

00:13:56,900 --> 00:14:01,580
happens is I'm running a Mac on a

00:13:59,120 --> 00:14:04,280
certain version of Sierra with a certain

00:14:01,580 --> 00:14:06,260
version of node and NPM and angular and

00:14:04,280 --> 00:14:08,330
the angular CLI I've got a lot of

00:14:06,260 --> 00:14:10,430
versions hanging around here what if

00:14:08,330 --> 00:14:13,490
you're using Windows what if you're

00:14:10,430 --> 00:14:14,960
using node 8 and you're using node 7 how

00:14:13,490 --> 00:14:16,640
do you make sure it runs on my machine

00:14:14,960 --> 00:14:18,130
isn't the thing you hear when somebody

00:14:16,640 --> 00:14:20,410
screaming at you because it doesn't work

00:14:18,130 --> 00:14:23,000
you want to make sure it runs everywhere

00:14:20,410 --> 00:14:26,390
so one of the ways we can do that is to

00:14:23,000 --> 00:14:27,860
use something called containers the

00:14:26,390 --> 00:14:29,150
reason we look at containers in this

00:14:27,860 --> 00:14:30,350
case is because not only it to worry

00:14:29,150 --> 00:14:32,570
about all your developers running the

00:14:30,350 --> 00:14:34,280
same thing but you also have to worry

00:14:32,570 --> 00:14:36,020
about your CI CD processor running the

00:14:34,280 --> 00:14:37,930
same version and how do you know what's

00:14:36,020 --> 00:14:40,280
in the cloud is running the same as well

00:14:37,930 --> 00:14:41,990
so we want to basically go to the steps

00:14:40,280 --> 00:14:44,750
that the build process just did install

00:14:41,990 --> 00:14:46,610
our dependencies our platforms all of

00:14:44,750 --> 00:14:49,010
our angular assets our node Express

00:14:46,610 --> 00:14:50,990
servers and copied all to a folder and

00:14:49,010 --> 00:14:52,400
make sure that everything I have running

00:14:50,990 --> 00:14:55,630
locally is the same thing I have running

00:14:52,400 --> 00:14:57,800
in the cloud sounds easier than it is

00:14:55,630 --> 00:15:00,290
until we get to things like containers

00:14:57,800 --> 00:15:01,310
so the way I'd like to go about this is

00:15:00,290 --> 00:15:03,440
let's take a look at what docker

00:15:01,310 --> 00:15:05,420
containers do for us here's a sample

00:15:03,440 --> 00:15:08,300
docker file it's going to have a

00:15:05,420 --> 00:15:10,400
self-contained script it's going to

00:15:08,300 --> 00:15:12,020
provide a recipe for creating this

00:15:10,400 --> 00:15:13,910
continue that runs everywhere with our

00:15:12,020 --> 00:15:16,070
application and it's going to configure

00:15:13,910 --> 00:15:18,080
different environments so that what runs

00:15:16,070 --> 00:15:20,840
locally runs differently in stage test

00:15:18,080 --> 00:15:22,400
and production now you might have a file

00:15:20,840 --> 00:15:26,900
like this where you're pulling from

00:15:22,400 --> 00:15:29,390
nodes 611 that's a common node platform

00:15:26,900 --> 00:15:31,250
that's out there on docker hub you pick

00:15:29,390 --> 00:15:32,690
which one you want now I know that's the

00:15:31,250 --> 00:15:33,200
version that we're using locally and in

00:15:32,690 --> 00:15:36,140
the cloud

00:15:33,200 --> 00:15:37,580
I then defined my working folders I copy

00:15:36,140 --> 00:15:40,040
my package Jason over

00:15:37,580 --> 00:15:41,990
I then run npm install I then copy the

00:15:40,040 --> 00:15:45,800
rest of my files run my build process

00:15:41,990 --> 00:15:47,510
and at the end I expose my port and I

00:15:45,800 --> 00:15:49,400
call node index J s to run my node

00:15:47,510 --> 00:15:51,530
server it's basically all the steps so

00:15:49,400 --> 00:15:53,900
I'd have to do locally I've just written

00:15:51,530 --> 00:15:55,460
them down and so I have a docker file so

00:15:53,900 --> 00:15:59,530
it knows hey this is what you do

00:15:55,460 --> 00:16:02,630
manually now go ahead and automate this

00:15:59,530 --> 00:16:05,210
by doing this we can automate this for

00:16:02,630 --> 00:16:06,800
local or for production so reviewing the

00:16:05,210 --> 00:16:08,180
steps that we're gonna do here we're

00:16:06,800 --> 00:16:10,400
gonna create the docker file we're gonna

00:16:08,180 --> 00:16:13,150
build and run then we're gonna do bug

00:16:10,400 --> 00:16:16,490
this locally wide uh bug it locally

00:16:13,150 --> 00:16:18,470
because I don't trust anything that

00:16:16,490 --> 00:16:20,780
takes control away from me and I hope

00:16:18,470 --> 00:16:22,250
you all don't either so the thing about

00:16:20,780 --> 00:16:24,170
docker that concern me when I first

00:16:22,250 --> 00:16:26,420
heard it was okay great I'm putting all

00:16:24,170 --> 00:16:28,280
my stuff in a container that sounds like

00:16:26,420 --> 00:16:31,010
I can't get to it like I'm thinking

00:16:28,280 --> 00:16:32,270
Tupperware now once I put that food in

00:16:31,010 --> 00:16:34,940
the Tupperware I can't get to it unless

00:16:32,270 --> 00:16:36,470
they take that lid off right well the

00:16:34,940 --> 00:16:38,420
docker container there's ways we can

00:16:36,470 --> 00:16:40,520
actually tap into it and the way I feel

00:16:38,420 --> 00:16:43,580
better about docker is if I can get my

00:16:40,520 --> 00:16:45,500
act to run and I can check logs and I

00:16:43,580 --> 00:16:47,810
can debug it locally and I can do

00:16:45,500 --> 00:16:49,670
everything I could normally do just as

00:16:47,810 --> 00:16:52,520
if it wasn't in docker on my local

00:16:49,670 --> 00:16:58,850
machine and it does not disrupt my dev

00:16:52,520 --> 00:17:01,870
debug cycle then I'm gonna go for it so

00:16:58,850 --> 00:17:01,870
let's take a look at how this works

00:17:04,140 --> 00:17:08,390
all right so back in the same project

00:17:06,540 --> 00:17:10,310
I'm gonna open up the dockerfile

00:17:08,390 --> 00:17:12,390
because we're gonna take a look at that

00:17:10,310 --> 00:17:14,250
and I'll explain kind of how this is

00:17:12,390 --> 00:17:16,320
working here but to get things working

00:17:14,250 --> 00:17:18,329
I'm gonna show a little script I wrote

00:17:16,320 --> 00:17:20,010
there's a really cool extension for vs

00:17:18,329 --> 00:17:22,829
code by the way it's called the azure

00:17:20,010 --> 00:17:24,510
CLI extension and the funny thing about

00:17:22,829 --> 00:17:25,950
it is I rarely use it for a sure I

00:17:24,510 --> 00:17:28,650
haven't even though I work for that team

00:17:25,950 --> 00:17:30,030
I use it for writing - scripts what it

00:17:28,650 --> 00:17:32,310
allows me to do is I can write commands

00:17:30,030 --> 00:17:34,650
like this like just LS hit command and

00:17:32,310 --> 00:17:36,630
then quote and it runs down below and vs

00:17:34,650 --> 00:17:38,430
code so it allows me to save bash

00:17:36,630 --> 00:17:40,980
scripts in a file that I can then run

00:17:38,430 --> 00:17:42,960
locally so one of the things I can do

00:17:40,980 --> 00:17:45,420
here is I could go and run docker

00:17:42,960 --> 00:17:46,470
compose let's let that run and show you

00:17:45,420 --> 00:17:50,940
what happens then we'll go look at that

00:17:46,470 --> 00:17:53,880
file so if we go over to my docker file

00:17:50,940 --> 00:17:56,700
while that's building let's make that go

00:17:53,880 --> 00:17:59,910
down what I'm doing up here is I'm

00:17:56,700 --> 00:18:01,890
pulling down an image called John Papa

00:17:59,910 --> 00:18:03,270
angular CLI that's based upon the node

00:18:01,890 --> 00:18:06,210
image I just showed you but it also

00:18:03,270 --> 00:18:08,400
includes the CLI in it and then I'm

00:18:06,210 --> 00:18:10,410
saying as angular app this is like a

00:18:08,400 --> 00:18:13,140
temporary container I'm creating a

00:18:10,410 --> 00:18:14,610
temporary container here that's not

00:18:13,140 --> 00:18:17,310
going to live anywhere else I'm using

00:18:14,610 --> 00:18:19,620
this so I can then run npm install and

00:18:17,310 --> 00:18:23,310
build my angular app for production

00:18:19,620 --> 00:18:26,640
it's then stored in angular app I then

00:18:23,310 --> 00:18:29,640
build my express server and I call that

00:18:26,640 --> 00:18:31,320
Express server that's also temporary

00:18:29,640 --> 00:18:34,440
it's called a multi-stage docker file

00:18:31,320 --> 00:18:36,750
and then finally I take my final image

00:18:34,440 --> 00:18:38,400
and I say copy from the Express server

00:18:36,750 --> 00:18:40,740
and from the angular app put the two

00:18:38,400 --> 00:18:43,110
things together expose my port and run

00:18:40,740 --> 00:18:46,580
node in XJS and the output of this whole

00:18:43,110 --> 00:18:48,810
thing creates a container and an image

00:18:46,580 --> 00:18:51,030
let's take a look now that it's done

00:18:48,810 --> 00:18:53,730
using another extension for vs code

00:18:51,030 --> 00:18:56,220
called docker over here you'll see a

00:18:53,730 --> 00:18:57,570
list of images I can hit refresh and

00:18:56,220 --> 00:19:03,060
you'll see the top one right there is

00:18:57,570 --> 00:19:04,680
the image I just created and it also is

00:19:03,060 --> 00:19:07,380
running locally that's what their little

00:19:04,680 --> 00:19:09,540
green light is don't believe me because

00:19:07,380 --> 00:19:13,200
I wouldn't either you can right click

00:19:09,540 --> 00:19:16,710
here and say show logs and let's go back

00:19:13,200 --> 00:19:17,760
over here and you can see there's the

00:19:16,710 --> 00:19:18,990
logs

00:19:17,760 --> 00:19:20,850
that are running so we can actually see

00:19:18,990 --> 00:19:24,570
it running live let's do that again just

00:19:20,850 --> 00:19:26,910
so you can see it show the logs so

00:19:24,570 --> 00:19:28,290
anytime we hit this server live we could

00:19:26,910 --> 00:19:31,110
then see it running let's check it out

00:19:28,290 --> 00:19:34,020
real quick so up here let's go back to

00:19:31,110 --> 00:19:35,660
the demo and I can open the browser

00:19:34,020 --> 00:19:41,010
right from there

00:19:35,660 --> 00:19:43,980
oops wrong window there's my little app

00:19:41,010 --> 00:19:47,820
and every time I open this app and I run

00:19:43,980 --> 00:19:49,830
it if we go back to the logs we should

00:19:47,820 --> 00:19:52,680
see that I made a call to Mongoose in

00:19:49,830 --> 00:19:54,240
there so we can see the logs what about

00:19:52,680 --> 00:19:57,390
the files though how do I know the files

00:19:54,240 --> 00:19:59,910
that I wanted are in there oops I think

00:19:57,390 --> 00:20:03,300
I just clicked the wrong one oh let's

00:19:59,910 --> 00:20:05,040
attach the shell we'll go back down a

00:20:03,300 --> 00:20:06,840
little bit if I want to make sure I know

00:20:05,040 --> 00:20:08,490
what's inside of docker I can do an LS

00:20:06,840 --> 00:20:10,710
there's the files and a copied over from

00:20:08,490 --> 00:20:12,720
node I can also look inside the public

00:20:10,710 --> 00:20:14,730
server and I can see these are the

00:20:12,720 --> 00:20:16,140
angular files that I created so I have a

00:20:14,730 --> 00:20:17,940
higher level of trust now that what I'm

00:20:16,140 --> 00:20:20,280
running locally is actually in that

00:20:17,940 --> 00:20:22,500
container and I can get access to it but

00:20:20,280 --> 00:20:25,950
what about debugging well let's go ahead

00:20:22,500 --> 00:20:27,870
and rebuild this I think I built it for

00:20:25,950 --> 00:20:31,980
debugging if we look at the docker

00:20:27,870 --> 00:20:33,390
compose file you'll notice this dr. to

00:20:31,980 --> 00:20:37,200
post file basing just says run the

00:20:33,390 --> 00:20:38,760
docker file name the image this set the

00:20:37,200 --> 00:20:40,350
node environment to development locally

00:20:38,760 --> 00:20:42,450
which inside just opens up some

00:20:40,350 --> 00:20:44,970
development settings and then one of the

00:20:42,450 --> 00:20:47,100
ports here I'm opening up is 92 9 that's

00:20:44,970 --> 00:20:50,100
the default port for node 6

00:20:47,100 --> 00:20:52,830
I think it's 9 and higher for debugging

00:20:50,100 --> 00:20:56,670
so I'm allowing this debug port so I can

00:20:52,830 --> 00:20:59,540
then inspect node and then in vs code

00:20:56,670 --> 00:21:01,440
I'm gonna go over and I'm going to debug

00:20:59,540 --> 00:21:04,800
by using this little bit of code here

00:21:01,440 --> 00:21:06,380
I'm gonna debug my docker container so I

00:21:04,800 --> 00:21:09,120
can set breakpoints and run it locally

00:21:06,380 --> 00:21:11,220
so I tell it the port it's on localhost

00:21:09,120 --> 00:21:13,080
I tell I'm not using source maps in this

00:21:11,220 --> 00:21:14,850
case and the important line is line 20

00:21:13,080 --> 00:21:16,770
that's where do you want to map the

00:21:14,850 --> 00:21:18,990
files are in the container to the files

00:21:16,770 --> 00:21:21,270
locally on your machine so it can map

00:21:18,990 --> 00:21:25,050
the files and I can actually step

00:21:21,270 --> 00:21:28,790
through them and then once I've hit run

00:21:25,050 --> 00:21:31,630
over here I'm running through it

00:21:28,790 --> 00:21:34,550
I should be able to come back here and

00:21:31,630 --> 00:21:36,800
notice I've got a breakpoint set and I

00:21:34,550 --> 00:21:39,260
can walk right into my code examine

00:21:36,800 --> 00:21:41,780
value step over step into disconnect to

00:21:39,260 --> 00:21:44,690
anything I want to do locally super

00:21:41,780 --> 00:21:47,090
simple so I've lost zero control by

00:21:44,690 --> 00:21:50,870
running my node and angular app locally

00:21:47,090 --> 00:21:58,970
on my machine inside of docker and I can

00:21:50,870 --> 00:22:01,100
disconnect and call it a day so we've

00:21:58,970 --> 00:22:03,470
done two things so far we've shown how

00:22:01,100 --> 00:22:04,640
we can build and optimize our code and

00:22:03,470 --> 00:22:08,270
we've shown how we can run it locally

00:22:04,640 --> 00:22:10,550
inside this thing called docker and the

00:22:08,270 --> 00:22:12,110
commands that I ran where docker compose

00:22:10,550 --> 00:22:16,280
and I actually specified a specific

00:22:12,110 --> 00:22:20,060
docker post file Oh up means go ahead

00:22:16,280 --> 00:22:23,630
and build the docker container and then

00:22:20,060 --> 00:22:26,960
inside there I also tagged it but if I

00:22:23,630 --> 00:22:29,270
want to tag this for the public use if I

00:22:26,960 --> 00:22:30,800
want to push this to docker hub which is

00:22:29,270 --> 00:22:32,690
just a registry of images that we can

00:22:30,800 --> 00:22:34,850
all use or I want to push it to a

00:22:32,690 --> 00:22:37,310
private registry of my own or maybe a

00:22:34,850 --> 00:22:39,410
Shores container registry with core

00:22:37,310 --> 00:22:41,360
login credentials I can then tag that

00:22:39,410 --> 00:22:44,570
with the prefix of the name of the

00:22:41,360 --> 00:22:46,850
container registry and then the name of

00:22:44,570 --> 00:22:48,410
my image and what that does it means

00:22:46,850 --> 00:22:50,150
then if I do a docker push

00:22:48,410 --> 00:22:53,030
it'll take that docker container locally

00:22:50,150 --> 00:22:55,400
and push it up into the cloud so it just

00:22:53,030 --> 00:22:57,080
takes that image pushes it up and then

00:22:55,400 --> 00:23:00,140
whoever has access to that registry can

00:22:57,080 --> 00:23:01,550
then create new instances of my app one

00:23:00,140 --> 00:23:04,370
or more if you want to do load balancing

00:23:01,550 --> 00:23:05,900
and scaling it's kind of cool

00:23:04,370 --> 00:23:07,130
puts everything together for you in this

00:23:05,900 --> 00:23:11,000
case I'm pushing up to the ashore

00:23:07,130 --> 00:23:13,310
container registry but I still don't

00:23:11,000 --> 00:23:16,040
solve the problem of it still requires

00:23:13,310 --> 00:23:18,470
me to create this image a container and

00:23:16,040 --> 00:23:20,090
then push it what if I'm out to lunch

00:23:18,470 --> 00:23:21,260
and somebody's discovers a big bug and

00:23:20,090 --> 00:23:24,070
they want to push a new version out

00:23:21,260 --> 00:23:26,990
that's not CI CD that's not continuous

00:23:24,070 --> 00:23:29,720
so having some kind of a CI CD process

00:23:26,990 --> 00:23:31,190
in place that can do those steps that I

00:23:29,720 --> 00:23:32,540
just manually did in that demo file

00:23:31,190 --> 00:23:35,570
there's only a couple commands here

00:23:32,540 --> 00:23:38,060
right I run docker compose I run tag and

00:23:35,570 --> 00:23:41,480
then I push it I need something that can

00:23:38,060 --> 00:23:42,730
automate that every time ideally that I

00:23:41,480 --> 00:23:46,400
have a change to

00:23:42,730 --> 00:23:47,870
that's where CI CD steps in so we're

00:23:46,400 --> 00:23:50,360
gonna push to github whenever I think

00:23:47,870 --> 00:23:52,490
about a tool I never like it when people

00:23:50,360 --> 00:23:54,920
try to sell me on a tool without telling

00:23:52,490 --> 00:23:57,020
me what it actually does for me so for

00:23:54,920 --> 00:23:59,030
CI CD if you're a one-person shop and

00:23:57,020 --> 00:24:00,890
you are the only one doing this probably

00:23:59,030 --> 00:24:02,510
don't need it right but if you're in a

00:24:00,890 --> 00:24:04,700
larger company of any size and you want

00:24:02,510 --> 00:24:06,020
to automate changes to builds and have

00:24:04,700 --> 00:24:09,470
testing builds and that production

00:24:06,020 --> 00:24:10,820
builds really does help to know look we

00:24:09,470 --> 00:24:14,420
have a consistent process

00:24:10,820 --> 00:24:17,000
to say make my changes in github push it

00:24:14,420 --> 00:24:19,460
to a CI CD server let it do the build

00:24:17,000 --> 00:24:21,140
and run my tests it'll then send it to a

00:24:19,460 --> 00:24:23,420
container registry which then puts it to

00:24:21,140 --> 00:24:25,160
a web app in the cloud it'd be nice to

00:24:23,420 --> 00:24:27,830
just automate that so I just pushed my

00:24:25,160 --> 00:24:29,750
changes merge my branch and I move away

00:24:27,830 --> 00:24:32,330
from the keyboard step off

00:24:29,750 --> 00:24:35,960
things build and a couple minutes later

00:24:32,330 --> 00:24:39,110
it's just running let's see if we can

00:24:35,960 --> 00:24:42,680
make this work this is the scary part of

00:24:39,110 --> 00:24:45,830
the demo by the way live cloud induced

00:24:42,680 --> 00:24:48,200
demos involving a sure github and

00:24:45,830 --> 00:24:48,920
multiple third-party services who thinks

00:24:48,200 --> 00:24:53,690
it's gonna work

00:24:48,920 --> 00:24:55,580
I love giggles all right so we're gonna

00:24:53,690 --> 00:24:57,590
run that same docker file let's go look

00:24:55,580 --> 00:24:58,880
at real quick that same docker file is

00:24:57,590 --> 00:25:01,430
gonna run but it's gonna run in the

00:24:58,880 --> 00:25:04,100
cloud and instead of running the docker

00:25:01,430 --> 00:25:07,580
compose debug we're gonna run a docker

00:25:04,100 --> 00:25:09,050
compose without the debug the only real

00:25:07,580 --> 00:25:10,730
difference here is the node environment

00:25:09,050 --> 00:25:13,430
of line 8 is now production instead of

00:25:10,730 --> 00:25:15,470
development and on line 11 we only

00:25:13,430 --> 00:25:17,000
expose our actual port we're not

00:25:15,470 --> 00:25:20,270
exposing debugging ports anymore for

00:25:17,000 --> 00:25:21,650
security reasons so let's go ahead and

00:25:20,270 --> 00:25:24,230
make a change if we look at that app

00:25:21,650 --> 00:25:27,740
running in the cloud let's go ahead and

00:25:24,230 --> 00:25:30,200
not run locally I've got this custom

00:25:27,740 --> 00:25:31,730
domain called secure heroes calm you can

00:25:30,200 --> 00:25:34,340
see the app is running there and it says

00:25:31,730 --> 00:25:36,470
our favorite heroes let's go back to the

00:25:34,340 --> 00:25:37,880
application I don't know what these

00:25:36,470 --> 00:25:40,460
changes are but we're gonna revert them

00:25:37,880 --> 00:25:43,630
oh I got that rxjs thing in there we're

00:25:40,460 --> 00:25:46,520
get rid of that that would make it big

00:25:43,630 --> 00:25:50,900
let's go over and rename the title of

00:25:46,520 --> 00:25:54,280
our app from our favorite heroes to all

00:25:50,900 --> 00:25:57,100
things open heroes like that

00:25:54,280 --> 00:25:59,440
and we'll go over to github we're gonna

00:25:57,100 --> 00:26:01,890
say commit me that's a great commit

00:25:59,440 --> 00:26:04,870
message by the way highly recommended

00:26:01,890 --> 00:26:06,370
and we're gonna push this now I think

00:26:04,870 --> 00:26:07,780
you all trust here we've all use github

00:26:06,370 --> 00:26:10,570
enough to know it's got it's getting to

00:26:07,780 --> 00:26:14,980
get hub but where does it go from there

00:26:10,570 --> 00:26:17,740
I don't know let's find out so I'm using

00:26:14,980 --> 00:26:20,080
4c ICD this tool called visual studio

00:26:17,740 --> 00:26:23,080
team services oh thank you good

00:26:20,080 --> 00:26:28,770
afternoon to you too and inside of here

00:26:23,080 --> 00:26:32,110
we can go look at our bills and releases

00:26:28,770 --> 00:26:34,570
and I have this build queued up right

00:26:32,110 --> 00:26:36,160
here and it's that's exceeded a little

00:26:34,570 --> 00:26:39,010
while ago if you go look at the

00:26:36,160 --> 00:26:40,990
definition for this build we can see

00:26:39,010 --> 00:26:44,170
ones now in progress right there on the

00:26:40,990 --> 00:26:46,090
bottom left number 185 let's see why

00:26:44,170 --> 00:26:48,070
that's the case if we go click on edit

00:26:46,090 --> 00:26:50,200
what happened here was when github

00:26:48,070 --> 00:26:52,930
changed and saw that committing that

00:26:50,200 --> 00:26:55,060
merge it then said okay there's this

00:26:52,930 --> 00:26:56,950
thing called a trigger I've enabled the

00:26:55,060 --> 00:26:58,570
trigger status for this build to say

00:26:56,950 --> 00:27:02,140
when you see a change in github source

00:26:58,570 --> 00:27:04,300
go ahead and run this process then I

00:27:02,140 --> 00:27:07,240
have three simple tasks the first one is

00:27:04,300 --> 00:27:10,450
go to get help and get my code pretty

00:27:07,240 --> 00:27:13,960
easy the second one is run docker

00:27:10,450 --> 00:27:15,850
compose right here that's pretty easy

00:27:13,960 --> 00:27:18,130
too we saw what that one looked like the

00:27:15,850 --> 00:27:20,380
last one is push to the azure container

00:27:18,130 --> 00:27:22,360
registry this is actually going to take

00:27:20,380 --> 00:27:25,030
the image that it builds inside of es TS

00:27:22,360 --> 00:27:27,610
this could be Jenkins or circle CI or

00:27:25,030 --> 00:27:30,280
whatever your favorite CI system is

00:27:27,610 --> 00:27:32,560
Travis code ship and it's going to push

00:27:30,280 --> 00:27:35,890
it to the azure container registry with

00:27:32,560 --> 00:27:38,380
the image name that I'm using now we can

00:27:35,890 --> 00:27:45,750
watch this build - let's go back to the

00:27:38,380 --> 00:27:45,750
builds and let's click on it was 85

00:27:47,070 --> 00:27:52,239
it should still be building cool 82

00:27:50,379 --> 00:27:53,230
seconds so it's got while this is

00:27:52,239 --> 00:27:54,759
building here let's think about what

00:27:53,230 --> 00:27:56,799
this is doing its building the container

00:27:54,759 --> 00:27:59,080
but I have a lot of keys I'm hitting a

00:27:56,799 --> 00:28:02,139
database I've got keys and secrets I'm

00:27:59,080 --> 00:28:03,909
using Twitter for OAuth login

00:28:02,139 --> 00:28:06,820
credentials I have different keys there

00:28:03,909 --> 00:28:10,450
too maybe i hard-coded all this stuff in

00:28:06,820 --> 00:28:12,549
my app no please tell me you don't do

00:28:10,450 --> 00:28:15,220
that either right yeah

00:28:12,549 --> 00:28:17,019
so we don't do that but how do we handle

00:28:15,220 --> 00:28:18,190
different environment variables well

00:28:17,019 --> 00:28:21,869
let's go take a look at the source code

00:28:18,190 --> 00:28:26,139
again and let's think about what we want

00:28:21,869 --> 00:28:28,929
it to actually do so if we look at the

00:28:26,139 --> 00:28:30,279
source and we go to the client nothing

00:28:28,929 --> 00:28:31,749
should happen in the client for anything

00:28:30,279 --> 00:28:33,059
server related environment variables

00:28:31,749 --> 00:28:35,289
everything should happen on the server

00:28:33,059 --> 00:28:37,749
inside there you're gonna see I've got

00:28:35,289 --> 00:28:40,149
an example file which shows us okay

00:28:37,749 --> 00:28:41,710
here's where our cosmos DB credentials

00:28:40,149 --> 00:28:44,350
are gonna go our Twitter credentials

00:28:41,710 --> 00:28:45,700
we're gonna expose them I've got a

00:28:44,350 --> 00:28:46,929
development version which I'm not going

00:28:45,700 --> 00:28:48,850
to click on because every time I do that

00:28:46,929 --> 00:28:51,340
I got to change the keys those are local

00:28:48,850 --> 00:28:53,980
keys that I'll use here that I've hard

00:28:51,340 --> 00:28:55,779
coded and those are get ignored then

00:28:53,980 --> 00:28:57,309
I've got a production file the

00:28:55,779 --> 00:28:58,840
production file is referring to

00:28:57,309 --> 00:29:02,499
environment variables for all of these

00:28:58,840 --> 00:29:05,470
keys by doing that this now means that

00:29:02,499 --> 00:29:07,659
all those keys are fine to check in this

00:29:05,470 --> 00:29:09,249
files fine to check in because it's not

00:29:07,659 --> 00:29:11,100
storing the keys it's looking for

00:29:09,249 --> 00:29:13,419
environment by our variable settings

00:29:11,100 --> 00:29:16,210
which then means an azure is somewhere I

00:29:13,419 --> 00:29:18,549
have to set these up well there's two

00:29:16,210 --> 00:29:19,960
ways to set this up an azure one way is

00:29:18,549 --> 00:29:21,879
to go to azure in the portal into it

00:29:19,960 --> 00:29:23,470
another way is I like to stay inside my

00:29:21,879 --> 00:29:26,559
editor there's this thing called the

00:29:23,470 --> 00:29:28,480
azure app service extension and if we

00:29:26,559 --> 00:29:30,759
click on the subscription where we keep

00:29:28,480 --> 00:29:31,659
it it'll go out to Azure or look up all

00:29:30,759 --> 00:29:33,580
the different things that are my

00:29:31,659 --> 00:29:36,159
subscription I should have one in here

00:29:33,580 --> 00:29:39,279
called Papa ignite angular if I look at

00:29:36,159 --> 00:29:42,519
the application settings well oh there's

00:29:39,279 --> 00:29:44,429
my key now I gotta change it again you

00:29:42,519 --> 00:29:47,019
can see there on the Left Cosmos DB

00:29:44,429 --> 00:29:49,389
Twitter client all these kind of keys

00:29:47,019 --> 00:29:51,609
are associated there and I can go and I

00:29:49,389 --> 00:29:53,470
can click on these and I could say edit

00:29:51,609 --> 00:29:56,619
the setting it'll let me change those

00:29:53,470 --> 00:29:58,140
key values up here Kosmos DB name I can

00:29:56,619 --> 00:30:00,240
change my database name

00:29:58,140 --> 00:30:02,040
so if you don't want to go to yet

00:30:00,240 --> 00:30:04,290
another place to change settings you

00:30:02,040 --> 00:30:07,830
don't have to it does all that right

00:30:04,290 --> 00:30:10,559
here so I set all these keys up let's go

00:30:07,830 --> 00:30:12,900
see if V STS completed 2.8 minutes

00:30:10,559 --> 00:30:16,650
I love that it says point eight next we

00:30:12,900 --> 00:30:18,210
figure how many seconds that is and then

00:30:16,650 --> 00:30:20,340
we should be able to go to look at our

00:30:18,210 --> 00:30:22,429
public site and we change the title

00:30:20,340 --> 00:30:25,290
right and secure hero so if i refresh it

00:30:22,429 --> 00:30:28,200
should say all things open heroes

00:30:25,290 --> 00:30:30,690
pretty cool huh I like that so

00:30:28,200 --> 00:30:33,059
everything works in a nice flow we get

00:30:30,690 --> 00:30:34,650
things lined up so that they just run

00:30:33,059 --> 00:30:37,620
smoothly through and I can make as many

00:30:34,650 --> 00:30:39,809
changes as I want to the process as I go

00:30:37,620 --> 00:30:41,669
through here now I don't have to go

00:30:39,809 --> 00:30:42,990
through the extension to do this the

00:30:41,669 --> 00:30:45,690
other option is I could go up to the

00:30:42,990 --> 00:30:48,330
azure portal and if I click on portal

00:30:45,690 --> 00:30:50,100
let that load oh you're gonna ask me for

00:30:48,330 --> 00:30:53,549
my password in front of all my friends

00:30:50,100 --> 00:30:56,929
here we have two-factor authentication

00:30:53,549 --> 00:30:56,929
let's see if that works

00:30:57,470 --> 00:31:05,790
this will be fun oh cool was already

00:31:02,070 --> 00:31:07,350
logged in yeah I planned that so up in

00:31:05,790 --> 00:31:08,880
the azure portal i'm gonna click on the

00:31:07,350 --> 00:31:11,340
web app cuz this is another place you

00:31:08,880 --> 00:31:15,690
can set things up in that web app i can

00:31:11,340 --> 00:31:17,010
go down to application settings and i

00:31:15,690 --> 00:31:19,919
can scroll down you're gonna see all my

00:31:17,010 --> 00:31:22,410
keys once again so i can set them in

00:31:19,919 --> 00:31:24,960
here or I can go back to vs code and set

00:31:22,410 --> 00:31:27,900
them through my vs code as your app

00:31:24,960 --> 00:31:29,070
service extension right there so it's

00:31:27,900 --> 00:31:30,690
really like which way you want to do it

00:31:29,070 --> 00:31:32,690
you can also use the azure CLI if you

00:31:30,690 --> 00:31:35,280
want to type them in and put it that way

00:31:32,690 --> 00:31:38,040
but there's options here I kind of like

00:31:35,280 --> 00:31:39,840
to stay in my editor another option that

00:31:38,040 --> 00:31:41,669
I have is I also had to set up all my

00:31:39,840 --> 00:31:43,650
docker stuff right so my images and

00:31:41,669 --> 00:31:46,080
containers are right here what if I just

00:31:43,650 --> 00:31:48,299
wanted to push one directly well I could

00:31:46,080 --> 00:31:50,100
take my image I could then go to that

00:31:48,299 --> 00:31:51,630
image and I could say alright run it if

00:31:50,100 --> 00:31:53,309
I click on run it would run another

00:31:51,630 --> 00:31:55,740
container right here locally

00:31:53,309 --> 00:31:58,110
well once I have that image running I

00:31:55,740 --> 00:32:00,059
can then push it so if I go ahead and

00:31:58,110 --> 00:32:02,549
click on push it's gonna push it to

00:32:00,059 --> 00:32:03,900
whatever registry I set it up for it's

00:32:02,549 --> 00:32:06,300
gonna go to either docker hub or the

00:32:03,900 --> 00:32:08,730
Azure container registry so I can do all

00:32:06,300 --> 00:32:11,130
this right with right-clicking or I can

00:32:08,730 --> 00:32:13,080
do it through CI CD process

00:32:11,130 --> 00:32:16,830
and if by the way if all these nuns

00:32:13,080 --> 00:32:18,179
bother you who doesn't like nuns we can

00:32:16,830 --> 00:32:21,990
click on this button up here it will

00:32:18,179 --> 00:32:24,510
then prune out any in-between images and

00:32:21,990 --> 00:32:27,200
when it's done they will disappear like

00:32:24,510 --> 00:32:29,160
that if you like to keep it clean slate

00:32:27,200 --> 00:32:30,720
so we've got a nice little way of

00:32:29,160 --> 00:32:32,940
looking at this stuff and we can also go

00:32:30,720 --> 00:32:35,640
ahead and inspect it show the logs etc

00:32:32,940 --> 00:32:37,380
if we want to go to the container while

00:32:35,640 --> 00:32:39,330
it's green we could then say stop the

00:32:37,380 --> 00:32:42,240
container we can remove the container we

00:32:39,330 --> 00:32:45,120
saw how we can attach the shell but also

00:32:42,240 --> 00:32:46,890
notice we've got registries in here so I

00:32:45,120 --> 00:32:48,059
told you that it went to ashes container

00:32:46,890 --> 00:32:50,460
registry but how do you know it got

00:32:48,059 --> 00:32:53,190
there one way you could do is go back to

00:32:50,460 --> 00:32:55,860
the portal back on the portal we can

00:32:53,190 --> 00:32:57,000
come up here to our dashboard you'll

00:32:55,860 --> 00:32:58,980
notice I've got this pop-up container

00:32:57,000 --> 00:33:01,559
registry because everybody needs one of

00:32:58,980 --> 00:33:05,190
those and the only thing that's in there

00:33:01,559 --> 00:33:08,429
to go down two repositories is a list of

00:33:05,190 --> 00:33:10,200
all the images that I've put up there so

00:33:08,429 --> 00:33:11,730
here we can see the image they put by

00:33:10,200 --> 00:33:13,470
clicking on this you can't really tell

00:33:11,730 --> 00:33:15,390
what's there so you have to kind of dive

00:33:13,470 --> 00:33:19,289
in and you can see the details about

00:33:15,390 --> 00:33:21,390
what's in this particular container so

00:33:19,289 --> 00:33:23,809
if we back out of here one of the other

00:33:21,390 --> 00:33:26,700
interesting parts is once I set up CI

00:33:23,809 --> 00:33:30,750
this webhook got automatically created

00:33:26,700 --> 00:33:32,580
this webhook is what tells asher okay

00:33:30,750 --> 00:33:35,150
that shouldn't be red by the way that's

00:33:32,580 --> 00:33:38,400
kind of dangerous it's what tells Azure

00:33:35,150 --> 00:33:40,260
that Oki receives a new container now

00:33:38,400 --> 00:33:42,510
send that container over to any app

00:33:40,260 --> 00:33:45,299
services any Web Apps hosted in Azure

00:33:42,510 --> 00:33:46,860
that want this that's how we got our new

00:33:45,299 --> 00:33:49,110
version up and running inside the cloud

00:33:46,860 --> 00:33:50,730
it set this Web hook up to point over

00:33:49,110 --> 00:33:53,159
there so just like we have a git hook

00:33:50,730 --> 00:33:54,900
that says VST s goes to get and gets the

00:33:53,159 --> 00:33:56,220
code there's a web hook here and as

00:33:54,900 --> 00:33:57,030
you're saying when you put something new

00:33:56,220 --> 00:33:58,559
in my registry

00:33:57,030 --> 00:34:00,900
I'm gonna go send it off to anybody

00:33:58,559 --> 00:34:05,370
who's listening and looking for this and

00:34:00,900 --> 00:34:07,799
then if we go back to our web app and we

00:34:05,370 --> 00:34:10,649
scroll down a little bit there's this

00:34:07,799 --> 00:34:12,179
tab called docker container if I click

00:34:10,649 --> 00:34:14,669
on that you should see some familiar

00:34:12,179 --> 00:34:18,359
settings there's name of my registry

00:34:14,669 --> 00:34:19,589
name of my image the tag and down the

00:34:18,359 --> 00:34:21,570
bottom there's that check box I

00:34:19,589 --> 00:34:24,440
mentioned for CI because I set up

00:34:21,570 --> 00:34:24,440
continuous deployment

00:34:24,480 --> 00:34:28,409
it automatically set up that webhook to

00:34:26,460 --> 00:34:30,659
say all right anytime you get a new

00:34:28,409 --> 00:34:34,310
container in the registry pull it over

00:34:30,659 --> 00:34:36,869
here and we can save that and move along

00:34:34,310 --> 00:34:40,649
we can also do some of that down here by

00:34:36,869 --> 00:34:42,780
clicking on tabs in DVS code so down

00:34:40,649 --> 00:34:44,609
here we can click on the registry look

00:34:42,780 --> 00:34:46,169
at the one that I set up inside that

00:34:44,609 --> 00:34:49,230
registry we can see all different tags

00:34:46,169 --> 00:34:51,330
this is latest right there and I can

00:34:49,230 --> 00:34:53,460
deploy that image to the azure app

00:34:51,330 --> 00:34:53,970
service right from vs code if I want to

00:34:53,460 --> 00:34:56,250
as well

00:34:53,970 --> 00:34:58,710
again no CI CD in this case it's just

00:34:56,250 --> 00:34:59,430
them I'm writing some code I want to see

00:34:58,710 --> 00:35:01,080
if it works

00:34:59,430 --> 00:35:03,869
let me right click and just publish it

00:35:01,080 --> 00:35:07,470
great for testing or load balancing or

00:35:03,869 --> 00:35:09,270
or out load test scenarios you can also

00:35:07,470 --> 00:35:12,000
do this to public registries like docker

00:35:09,270 --> 00:35:14,190
hub so in docker hub I'm logged in as

00:35:12,000 --> 00:35:16,770
John Papa and there's my angular CLI

00:35:14,190 --> 00:35:19,380
image so I could also deploy new ones

00:35:16,770 --> 00:35:20,670
right there as well so again it's nice

00:35:19,380 --> 00:35:21,720
that we've got these extensions that

00:35:20,670 --> 00:35:25,940
kind of help us move things along

00:35:21,720 --> 00:35:25,940
without having to leave our code editor

00:35:26,060 --> 00:35:29,060
right

00:35:30,920 --> 00:35:35,400
so what we saw here was how we can

00:35:33,690 --> 00:35:37,470
deploy angular to the cloud by first

00:35:35,400 --> 00:35:39,570
building and running and debugging

00:35:37,470 --> 00:35:41,970
locally with docker to me this is an

00:35:39,570 --> 00:35:43,500
integral step I hear a lot of people

00:35:41,970 --> 00:35:45,690
talk about containers and kubernetes and

00:35:43,500 --> 00:35:48,240
swarm and mesosphere and all these cool

00:35:45,690 --> 00:35:49,710
big words all the time and there they

00:35:48,240 --> 00:35:52,860
are cool they help us do a lot of

00:35:49,710 --> 00:35:55,080
amazing things but before I look at a

00:35:52,860 --> 00:35:57,270
solution I want to know what the problem

00:35:55,080 --> 00:36:00,240
is do I have the problem with this thing

00:35:57,270 --> 00:36:02,760
of solving and am i losing anything by

00:36:00,240 --> 00:36:04,050
using this tool anytime somebody comes

00:36:02,760 --> 00:36:05,250
out the next cool thing you should

00:36:04,050 --> 00:36:07,470
automatically ask yourself those

00:36:05,250 --> 00:36:09,180
questions what am I giving up is this

00:36:07,470 --> 00:36:10,620
really solving a problem that I have how

00:36:09,180 --> 00:36:14,580
is this going to make my life better

00:36:10,620 --> 00:36:16,410
right in this case I made sure I didn't

00:36:14,580 --> 00:36:18,120
lose my development process I wanted to

00:36:16,410 --> 00:36:19,350
make sure I could run debug locally do

00:36:18,120 --> 00:36:22,140
everything I could do before

00:36:19,350 --> 00:36:24,330
once I checked that box off I'm happy to

00:36:22,140 --> 00:36:25,440
say ok that's good but is this going to

00:36:24,330 --> 00:36:27,570
enable me to do something new and

00:36:25,440 --> 00:36:29,460
different it can't just be a better way

00:36:27,570 --> 00:36:31,740
to do the same thing I was doing I want

00:36:29,460 --> 00:36:33,390
to know I can do something else now I

00:36:31,740 --> 00:36:36,240
can run the same docker container

00:36:33,390 --> 00:36:39,510
through a CI process and continuously

00:36:36,240 --> 00:36:41,280
deploy it somewhere and make sure that I

00:36:39,510 --> 00:36:43,410
have to worry about oh jeez you know

00:36:41,280 --> 00:36:45,750
it's running node 6 I'm running node 7

00:36:43,410 --> 00:36:48,890
he's running note 8 what's going on

00:36:45,750 --> 00:36:51,870
and then finally hosting it into a cloud

00:36:48,890 --> 00:36:54,090
running on Linux I'm running Mac OS here

00:36:51,870 --> 00:36:55,680
maybe you're running Windows locally is

00:36:54,090 --> 00:36:57,090
you're gonna run Linux in the cloud you

00:36:55,680 --> 00:36:59,400
can set all three different operating

00:36:57,090 --> 00:37:01,380
systems with confidence knowing it's

00:36:59,400 --> 00:37:05,880
gonna run everywhere again using docker

00:37:01,380 --> 00:37:07,680
in this process so kind of summing

00:37:05,880 --> 00:37:09,330
things up this is where I think a lot of

00:37:07,680 --> 00:37:10,950
the toolings made our lives better if

00:37:09,330 --> 00:37:12,960
you flashback to a couple years ago with

00:37:10,950 --> 00:37:14,940
JavaScript we didn't have a lot of these

00:37:12,960 --> 00:37:17,160
CLI type tools we didn't have things

00:37:14,940 --> 00:37:19,230
like docker we were basically building

00:37:17,160 --> 00:37:21,030
all this by hand I remember not so long

00:37:19,230 --> 00:37:22,860
ago building out a thousand line gulp

00:37:21,030 --> 00:37:24,960
file to make sure my build process

00:37:22,860 --> 00:37:26,100
worked right and then debugging the heck

00:37:24,960 --> 00:37:28,290
out of it to make sure it worked under

00:37:26,100 --> 00:37:31,200
every situation and I love golf I think

00:37:28,290 --> 00:37:32,790
it's awesome but now I don't have to

00:37:31,200 --> 00:37:34,890
worry about that I just type ng build

00:37:32,790 --> 00:37:37,680
and things just build for me and I know

00:37:34,890 --> 00:37:40,620
how to make my files smaller and faster

00:37:37,680 --> 00:37:42,360
and docker makes it run everywhere no

00:37:40,620 --> 00:37:43,270
more stickers that stays works on my

00:37:42,360 --> 00:37:46,640
machine right

00:37:43,270 --> 00:37:47,690
now we can say hey I know that I can

00:37:46,640 --> 00:37:50,690
build this and give it to you and it's

00:37:47,690 --> 00:37:52,640
going to work I know with confidence

00:37:50,690 --> 00:37:53,780
that it's going to work and that's

00:37:52,640 --> 00:37:56,720
something we have been able to say in a

00:37:53,780 --> 00:37:58,400
long time and see ICD servers make

00:37:56,720 --> 00:37:59,839
things so much easier so we can

00:37:58,400 --> 00:38:01,220
continuously integrate with things like

00:37:59,839 --> 00:38:03,890
github and run our unit tests or

00:38:01,220 --> 00:38:06,410
end-to-end tests and then we can use

00:38:03,890 --> 00:38:08,240
continuous deployment to deploy to a

00:38:06,410 --> 00:38:10,490
container registry like docker hub or as

00:38:08,240 --> 00:38:14,599
your container industry right to a cloud

00:38:10,490 --> 00:38:17,180
and the best part of it to me is I never

00:38:14,599 --> 00:38:19,099
have to leave my Visual Studio code

00:38:17,180 --> 00:38:22,310
editor I can stay inside my editor of

00:38:19,099 --> 00:38:24,619
choice write my code I can build my

00:38:22,310 --> 00:38:27,500
project run my docker commands and go

00:38:24,619 --> 00:38:29,540
deploy it to the a girafft service right

00:38:27,500 --> 00:38:31,730
from my editor I don't have to go to the

00:38:29,540 --> 00:38:34,040
portal for Azure I don't have to go to

00:38:31,730 --> 00:38:36,319
my CI CD tool I can actually monitor

00:38:34,040 --> 00:38:37,369
everything locally which is good for me

00:38:36,319 --> 00:38:38,960
because then I don't have to have 8

00:38:37,369 --> 00:38:42,589
monitors up figuring out how I'm running

00:38:38,960 --> 00:38:43,790
everything if you want to try this stuff

00:38:42,589 --> 00:38:45,950
out here's some cool links that you can

00:38:43,790 --> 00:38:47,660
use the top one gives you everything I

00:38:45,950 --> 00:38:49,910
showed you today it's all the source

00:38:47,660 --> 00:38:51,950
code it's a readme file explaining the

00:38:49,910 --> 00:38:54,440
various ways that you can read this it's

00:38:51,950 --> 00:38:59,030
so cool to watch about a hundred camera

00:38:54,440 --> 00:39:00,680
phones pop up at the same time you can

00:38:59,030 --> 00:39:01,880
grab this code play with it I'm thinking

00:39:00,680 --> 00:39:03,530
about writing an article on the azure

00:39:01,880 --> 00:39:05,839
Docs it shows how to do this or in the

00:39:03,530 --> 00:39:07,609
angular Doc's maybe one in each so we

00:39:05,839 --> 00:39:09,380
can share how to do this all the

00:39:07,609 --> 00:39:10,640
extensions I showed today you can find

00:39:09,380 --> 00:39:13,280
those up here as well the docker

00:39:10,640 --> 00:39:15,740
extension as your CLI and even some

00:39:13,280 --> 00:39:17,119
angular ones in there and if you like

00:39:15,740 --> 00:39:19,339
the theme that I created I created that

00:39:17,119 --> 00:39:20,420
this week inside of es code you can

00:39:19,339 --> 00:39:24,170
check it out and the Game of Thrones

00:39:20,420 --> 00:39:25,400
fans what winter is coming so you can

00:39:24,170 --> 00:39:27,700
check out that that comes with this as

00:39:25,400 --> 00:39:29,990
well if you don't like it that's ok too

00:39:27,700 --> 00:39:33,270
but I would say thank you all for coming

00:39:29,990 --> 00:39:38,059
this week and catch me on Twitter

00:39:33,270 --> 00:39:38,059

YouTube URL: https://www.youtube.com/watch?v=BrCursDVwmc


