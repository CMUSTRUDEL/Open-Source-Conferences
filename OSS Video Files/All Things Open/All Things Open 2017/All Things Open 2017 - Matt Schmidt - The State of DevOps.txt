Title: All Things Open 2017 - Matt Schmidt - The State of DevOps
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:00,780 --> 00:00:07,200
I am Matthew Schmidt president d-zone

00:00:03,780 --> 00:00:10,110
and we are here today to talk about the

00:00:07,200 --> 00:00:12,780
state of DevOps and that kind of the

00:00:10,110 --> 00:00:14,849
trends that we're seeing through our

00:00:12,780 --> 00:00:16,710
research at D zone.com and what

00:00:14,849 --> 00:00:18,690
developers are telling us about the

00:00:16,710 --> 00:00:20,730
tools that they're using and the the

00:00:18,690 --> 00:00:23,250
methods and the changes that the

00:00:20,730 --> 00:00:25,800
industry is going through with respect

00:00:23,250 --> 00:00:27,630
to to DevOps and continuous delivery and

00:00:25,800 --> 00:00:33,870
how micro services and containers are

00:00:27,630 --> 00:00:35,670
affecting all of that well alright so as

00:00:33,870 --> 00:00:38,340
I said I'm Matt Schmidt president at

00:00:35,670 --> 00:00:41,550
d-zone I'm a developer and architect and

00:00:38,340 --> 00:00:43,230
entrepreneur d-zone is a portal for

00:00:41,550 --> 00:00:46,050
developers focused on delivering

00:00:43,230 --> 00:00:49,530
technical content to help developers do

00:00:46,050 --> 00:00:52,440
their jobs better we publish most of our

00:00:49,530 --> 00:00:54,449
content focused on 13 different portals

00:00:52,440 --> 00:00:56,789
around different topics like Java or

00:00:54,449 --> 00:00:59,329
DevOps or security or artificial

00:00:56,789 --> 00:01:01,500
intelligence we also sell and build

00:00:59,329 --> 00:01:03,379
product called answer hub you can see

00:01:01,500 --> 00:01:05,670
more at our booth outside of this room

00:01:03,379 --> 00:01:08,010
focused on delivering developer

00:01:05,670 --> 00:01:12,689
communities and tools for developer

00:01:08,010 --> 00:01:14,580
relations professionals so a little bit

00:01:12,689 --> 00:01:16,890
about the data that was used to gather

00:01:14,580 --> 00:01:18,150
this research and the the different

00:01:16,890 --> 00:01:19,590
surveys that we use this is a

00:01:18,150 --> 00:01:23,430
combination of a couple of different

00:01:19,590 --> 00:01:26,790
surveys focused around continuous

00:01:23,430 --> 00:01:29,850
delivery DevOps containers micro

00:01:26,790 --> 00:01:32,340
services over 1,500 different people

00:01:29,850 --> 00:01:35,280
participated in these two surveys and

00:01:32,340 --> 00:01:37,049
the data was collected across a couple

00:01:35,280 --> 00:01:42,869
of different dates near the end of 2016

00:01:37,049 --> 00:01:44,520
and early 2017 a little bit about our

00:01:42,869 --> 00:01:46,560
audience so that you guys know who it is

00:01:44,520 --> 00:01:49,380
that were that we're participating in

00:01:46,560 --> 00:01:51,540
these surveys our audience tends to to

00:01:49,380 --> 00:01:54,390
trend towards the more experienced

00:01:51,540 --> 00:01:57,600
developer having an average of 15 years

00:01:54,390 --> 00:02:00,180
of experience in the software field 18

00:01:57,600 --> 00:02:01,920
percent of these developers come from

00:02:00,180 --> 00:02:04,079
organizations with 10,000 or more

00:02:01,920 --> 00:02:06,090
employees so they're trending towards

00:02:04,079 --> 00:02:08,929
larger organizations more experienced

00:02:06,090 --> 00:02:12,480
developers and in this these two surveys

00:02:08,929 --> 00:02:12,849
45 percent of the respondents came from

00:02:12,480 --> 00:02:15,579
your

00:02:12,849 --> 00:02:18,879
with 30% coming from Europe so or from

00:02:15,579 --> 00:02:20,769
the US so larger organizations more

00:02:18,879 --> 00:02:24,840
experienced developers coming from the

00:02:20,769 --> 00:02:29,260
US and Europe as the participants

00:02:24,840 --> 00:02:31,269
additionally 83% of the respondents for

00:02:29,260 --> 00:02:33,819
our containers research guide are

00:02:31,269 --> 00:02:37,329
working on web applications or services

00:02:33,819 --> 00:02:40,239
so really focused on delivering product

00:02:37,329 --> 00:02:42,129
to consumers or to other businesses

00:02:40,239 --> 00:02:46,389
directly to the customers through these

00:02:42,129 --> 00:02:48,730
types of applications so let's dive

00:02:46,389 --> 00:02:50,439
right into the actual research and some

00:02:48,730 --> 00:02:52,689
of the findings so the first thing that

00:02:50,439 --> 00:02:54,669
we found is that 58% of the

00:02:52,689 --> 00:02:58,810
organization's taking our research don't

00:02:54,669 --> 00:03:01,060
have a dedicated DevOps team so for the

00:02:58,810 --> 00:03:03,699
most part these organizations are

00:03:01,060 --> 00:03:07,329
relying on their existing development

00:03:03,699 --> 00:03:10,599
teams or their IT teams to fill a DevOps

00:03:07,329 --> 00:03:12,849
role now those that are using dedicated

00:03:10,599 --> 00:03:15,310
DevOps teams are kind of trending

00:03:12,849 --> 00:03:17,799
towards larger organizations and are

00:03:15,310 --> 00:03:20,739
also using them to push tool adoption

00:03:17,799 --> 00:03:23,470
inside the org to to help adjust the

00:03:20,739 --> 00:03:25,840
software development lifecycle to adapt

00:03:23,470 --> 00:03:30,639
to the changing needs that DevOps brings

00:03:25,840 --> 00:03:32,739
inside the organization and size does

00:03:30,639 --> 00:03:34,689
matter for this so more than half of the

00:03:32,739 --> 00:03:37,659
respondents at large companies are using

00:03:34,689 --> 00:03:39,729
a dedicated DevOps team and so while the

00:03:37,659 --> 00:03:41,799
majority of these respondents are not

00:03:39,729 --> 00:03:44,139
having a dedicated team when they're

00:03:41,799 --> 00:03:46,329
coming from a large organization they

00:03:44,139 --> 00:03:49,389
are using a dedicated team this probably

00:03:46,329 --> 00:03:51,609
helps to have clear accountability to

00:03:49,389 --> 00:03:53,620
help break down the walls and to deal

00:03:51,609 --> 00:03:55,719
with the communication issues that arise

00:03:53,620 --> 00:03:57,819
between groups inside larger

00:03:55,719 --> 00:04:00,519
organizations and one of the things that

00:03:57,819 --> 00:04:01,989
we found across most of the research is

00:04:00,519 --> 00:04:04,870
that one of the key tenants of this

00:04:01,989 --> 00:04:07,209
adoption of DevOps end of continuous

00:04:04,870 --> 00:04:08,859
delivery is communication so breaking

00:04:07,209 --> 00:04:11,439
down the barriers between different

00:04:08,859 --> 00:04:13,449
groups in between the development

00:04:11,439 --> 00:04:15,969
organizations and the IT organizations

00:04:13,449 --> 00:04:21,310
is pretty key to the adoption of DevOps

00:04:15,969 --> 00:04:23,289
inside of an organization more

00:04:21,310 --> 00:04:25,719
specifically when you look at continuous

00:04:23,289 --> 00:04:27,419
delivery trends and really that's the

00:04:25,719 --> 00:04:30,810
sort of Eldorado

00:04:27,419 --> 00:04:32,610
the holy grail of development is that

00:04:30,810 --> 00:04:35,729
you have a push button or an automated

00:04:32,610 --> 00:04:37,380
deploy to your production environments

00:04:35,729 --> 00:04:40,380
to your staging environments to your

00:04:37,380 --> 00:04:42,300
testing to dev what we're seeing is that

00:04:40,380 --> 00:04:43,830
most of the organizations that are

00:04:42,300 --> 00:04:45,979
trying to get towards continuous

00:04:43,830 --> 00:04:49,710
delivery are larger organizations only

00:04:45,979 --> 00:04:52,350
41% of organizations with less than a

00:04:49,710 --> 00:04:53,639
hundred employees talk about continuous

00:04:52,350 --> 00:04:55,710
delivery as a priority

00:04:53,639 --> 00:04:58,169
all right so most of the organizations

00:04:55,710 --> 00:05:00,120
that are trying to focus on continuous

00:04:58,169 --> 00:05:01,740
delivery and have that be a an

00:05:00,120 --> 00:05:03,270
accelerator for their business are

00:05:01,740 --> 00:05:09,180
trending towards these larger

00:05:03,270 --> 00:05:11,070
organizations and the main barrier to

00:05:09,180 --> 00:05:13,350
adopting continuous delivery and DevOps

00:05:11,070 --> 00:05:15,990
as a whole remains corporate culture and

00:05:13,350 --> 00:05:21,120
lack of time even in our own small

00:05:15,990 --> 00:05:22,590
organization fitting in the creation of

00:05:21,120 --> 00:05:24,780
new infrastructure the changing of

00:05:22,590 --> 00:05:27,539
processes always takes a backseat to

00:05:24,780 --> 00:05:29,910
being able to firefight and to be able

00:05:27,539 --> 00:05:33,750
to do our day-to-day jobs and so you

00:05:29,910 --> 00:05:35,910
know I think it takes a lot to get the

00:05:33,750 --> 00:05:39,990
corporate culture to adjust to adapt to

00:05:35,910 --> 00:05:41,910
being focused on continuous delivery on

00:05:39,990 --> 00:05:45,240
DevOps and on making sure that the

00:05:41,910 --> 00:05:49,169
people who are tasked with implementing

00:05:45,240 --> 00:05:51,479
this corporate change are given enough

00:05:49,169 --> 00:05:53,130
time to be able to do that and so most

00:05:51,479 --> 00:05:56,520
of the respondents that we talked to

00:05:53,130 --> 00:05:58,650
said lack of time is the is the major

00:05:56,520 --> 00:06:00,479
impediment to being able to to roll out

00:05:58,650 --> 00:06:06,090
DevOps or continuous delivery inside

00:06:00,479 --> 00:06:07,229
their organization nearly 80 percent of

00:06:06,090 --> 00:06:09,180
our respondents said that the

00:06:07,229 --> 00:06:12,000
development org is the one driving the

00:06:09,180 --> 00:06:14,220
change towards having DevOps inside the

00:06:12,000 --> 00:06:17,639
organization or for having continuous

00:06:14,220 --> 00:06:19,680
delivery so the the developers want to

00:06:17,639 --> 00:06:21,810
get their code in the hands of their

00:06:19,680 --> 00:06:23,940
customers in the hands of their users

00:06:21,810 --> 00:06:26,460
more quickly and they see that DevOps

00:06:23,940 --> 00:06:27,690
and continuous delivery are ways to make

00:06:26,460 --> 00:06:29,400
that happen

00:06:27,690 --> 00:06:33,060
and so most of the change is being

00:06:29,400 --> 00:06:35,310
driven by the by the development orgs

00:06:33,060 --> 00:06:38,099
now this doesn't mean that they want to

00:06:35,310 --> 00:06:40,840
be on the monthly rotation for when

00:06:38,099 --> 00:06:43,120
things go wrong or to to be responsible

00:06:40,840 --> 00:06:46,510
for handling the alerts but they do want

00:06:43,120 --> 00:06:47,949
to try to be the driver of change inside

00:06:46,510 --> 00:06:54,610
the organization and make sure that

00:06:47,949 --> 00:06:56,050
their code gets out there faster now 52%

00:06:54,610 --> 00:06:58,780
of our respondents said that management

00:06:56,050 --> 00:07:01,750
is helping them get their is helping be

00:06:58,780 --> 00:07:03,660
the the driver the enabler for the

00:07:01,750 --> 00:07:05,949
cultural change that needs to happen

00:07:03,660 --> 00:07:08,320
this seems like a very positive change

00:07:05,949 --> 00:07:11,229
it's up from the year before

00:07:08,320 --> 00:07:13,419
now unfortunately 17% of the respondents

00:07:11,229 --> 00:07:16,840
said that their management actually

00:07:13,419 --> 00:07:19,540
inhibits a DevOps culture now we didn't

00:07:16,840 --> 00:07:22,450
dig into this very much but I wonder

00:07:19,540 --> 00:07:25,510
whether this has to do more with you

00:07:22,450 --> 00:07:28,930
know organizations in certain verticals

00:07:25,510 --> 00:07:30,370
or of certain company sizes but how many

00:07:28,930 --> 00:07:33,010
of you guys feel like your your

00:07:30,370 --> 00:07:38,590
management is an enabler of of DevOps

00:07:33,010 --> 00:07:41,139
and the principles that it entails so a

00:07:38,590 --> 00:07:42,400
little more maybe than 52% but that how

00:07:41,139 --> 00:07:44,740
many feel like you're being held back

00:07:42,400 --> 00:07:47,800
from being able to make the changes that

00:07:44,740 --> 00:07:52,000
need to happen more than in the last

00:07:47,800 --> 00:07:53,979
talk so in our in the last time I gave

00:07:52,000 --> 00:07:56,470
this talk there was one particular group

00:07:53,979 --> 00:07:59,889
that was saying that their management

00:07:56,470 --> 00:08:01,270
was very much against the the changes

00:07:59,889 --> 00:08:03,669
that need to happen now of course they

00:08:01,270 --> 00:08:05,500
were still using CBS for version control

00:08:03,669 --> 00:08:06,970
so I think that they have some other

00:08:05,500 --> 00:08:09,910
problems they maybe need to get through

00:08:06,970 --> 00:08:14,050
first but management may not be their

00:08:09,910 --> 00:08:15,430
problem another thing that we found is

00:08:14,050 --> 00:08:18,729
that developers are deploying to

00:08:15,430 --> 00:08:21,250
production now I thought about putting a

00:08:18,729 --> 00:08:24,669
little meme up here of everything

00:08:21,250 --> 00:08:27,840
burning down but developers are saying

00:08:24,669 --> 00:08:30,700
that 40% of the respondents are we are

00:08:27,840 --> 00:08:32,680
tasked with deploying to production this

00:08:30,700 --> 00:08:36,450
means they're taking things all the way

00:08:32,680 --> 00:08:40,180
from building to testing to staging to

00:08:36,450 --> 00:08:42,700
production in other organizations we're

00:08:40,180 --> 00:08:44,470
seeing that operation teams and release

00:08:42,700 --> 00:08:47,400
engineers are also responsible for

00:08:44,470 --> 00:08:49,900
deployment but the companies that are

00:08:47,400 --> 00:08:51,850
embracing developers deploying are also

00:08:49,900 --> 00:08:53,260
making heavy use of a consistent set of

00:08:51,850 --> 00:08:54,550
tools across the

00:08:53,260 --> 00:08:56,830
software development lifecycle and

00:08:54,550 --> 00:08:59,860
across their environments so they're

00:08:56,830 --> 00:09:01,720
gonna have the same set of tools and the

00:08:59,860 --> 00:09:03,010
same setup in there Deb environments and

00:09:01,720 --> 00:09:08,020
their QA environments in their

00:09:03,010 --> 00:09:10,060
production you know another 18% are

00:09:08,020 --> 00:09:12,100
saying that they're using the same tools

00:09:10,060 --> 00:09:13,480
for dev and QA but have a different

00:09:12,100 --> 00:09:15,670
environment and a different set up for

00:09:13,480 --> 00:09:18,160
production and this will probably change

00:09:15,670 --> 00:09:21,340
as we move forward and as the adoption

00:09:18,160 --> 00:09:23,440
of containers makes a the replication of

00:09:21,340 --> 00:09:24,880
environments much much easier but for

00:09:23,440 --> 00:09:26,730
the moment we see that there are still

00:09:24,880 --> 00:09:29,470
about 18% of the people who have

00:09:26,730 --> 00:09:34,450
development and QA but not production

00:09:29,470 --> 00:09:36,280
set up the same way a consequence of

00:09:34,450 --> 00:09:37,480
developers being responsible for

00:09:36,280 --> 00:09:40,990
deploying is that they're happening more

00:09:37,480 --> 00:09:43,900
frequently so 20 percent or 25 percent

00:09:40,990 --> 00:09:45,340
are deploying many times a day so

00:09:43,900 --> 00:09:48,670
they're pushing new code pretty

00:09:45,340 --> 00:09:50,410
frequently to the to their users to

00:09:48,670 --> 00:09:53,440
their customers getting them out in

00:09:50,410 --> 00:09:55,960
front of people making changes that are

00:09:53,440 --> 00:10:03,310
having a positive or negative impact on

00:09:55,960 --> 00:10:06,040
their customers 15% or another 15% are

00:10:03,310 --> 00:10:09,280
reported to be deploying at least once a

00:10:06,040 --> 00:10:11,140
day and another 30% are deploying weekly

00:10:09,280 --> 00:10:14,440
so there's a lot of changes that are

00:10:11,140 --> 00:10:16,240
happening to these code bases a strong

00:10:14,440 --> 00:10:17,890
majority of our respondents are

00:10:16,240 --> 00:10:20,800
producing new features and improvements

00:10:17,890 --> 00:10:22,780
to their products every week and code

00:10:20,800 --> 00:10:25,690
and customers are getting new code in

00:10:22,780 --> 00:10:30,790
hours or days instead of months like we

00:10:25,690 --> 00:10:32,380
might have seen in years past now an

00:10:30,790 --> 00:10:33,910
important consequence of this is that we

00:10:32,380 --> 00:10:36,850
need to understand how long it takes to

00:10:33,910 --> 00:10:39,940
recover from failure so if developers

00:10:36,850 --> 00:10:42,130
and IT teams are deploying to their

00:10:39,940 --> 00:10:45,670
their production environments multiple

00:10:42,130 --> 00:10:48,130
times per day or even weekly we need to

00:10:45,670 --> 00:10:51,850
know that the mean time for recovery for

00:10:48,130 --> 00:10:54,430
most set ups is 19 hours now that may

00:10:51,850 --> 00:10:57,970
seem like a lot of time if you try to

00:10:54,430 --> 00:11:01,270
understand that most people are seeing

00:10:57,970 --> 00:11:04,330
at least 10% of their deploys fail and

00:11:01,270 --> 00:11:06,420
so then they need to have recovery times

00:11:04,330 --> 00:11:08,670
and these are happening in

00:11:06,420 --> 00:11:10,710
taking about 19 hours now those that are

00:11:08,670 --> 00:11:13,200
using containers see a 20% improvement

00:11:10,710 --> 00:11:16,290
in their recovery time and companies

00:11:13,200 --> 00:11:18,120
that are using micro services see the

00:11:16,290 --> 00:11:20,120
best recovery time taking about seven

00:11:18,120 --> 00:11:25,080
hours as a mean time to recovery now

00:11:20,120 --> 00:11:27,300
failure here and recovery are focused

00:11:25,080 --> 00:11:29,880
more around complete downtime so your

00:11:27,300 --> 00:11:31,740
whole infrastructure has died everything

00:11:29,880 --> 00:11:34,260
is gone you have to be able to bring it

00:11:31,740 --> 00:11:35,580
back up and that's partly why you know

00:11:34,260 --> 00:11:37,530
when you're using the micro services

00:11:35,580 --> 00:11:39,120
architectures you don't run into quite

00:11:37,530 --> 00:11:40,950
the same problems because only a piece

00:11:39,120 --> 00:11:44,130
of your infrastructure may fail as you

00:11:40,950 --> 00:11:47,130
have when you deploy new code now an

00:11:44,130 --> 00:11:48,510
interesting aside and somewhat scary 27%

00:11:47,130 --> 00:11:50,730
of the developers that we surveyed

00:11:48,510 --> 00:11:53,190
didn't know how long it takes to restore

00:11:50,730 --> 00:11:55,680
service when there's a failure so there

00:11:53,190 --> 00:11:58,140
continues to be a disconnect in the

00:11:55,680 --> 00:11:59,880
information flow between the production

00:11:58,140 --> 00:12:02,670
environments and the developers that are

00:11:59,880 --> 00:12:09,690
supposedly tasked with with deploying

00:12:02,670 --> 00:12:12,510
there so 37 percent of the teams that

00:12:09,690 --> 00:12:15,780
are deploying code experienced failures

00:12:12,510 --> 00:12:18,090
daily so while we're deploying more

00:12:15,780 --> 00:12:20,880
often we're also seeing more failures

00:12:18,090 --> 00:12:21,300
and learning to recover from those

00:12:20,880 --> 00:12:23,700
failures

00:12:21,300 --> 00:12:25,500
now what I'd be interested in seeing and

00:12:23,700 --> 00:12:29,010
part of the the next round of research

00:12:25,500 --> 00:12:32,040
that I hope we'll do is are we testing

00:12:29,010 --> 00:12:34,020
more and creating failures during the

00:12:32,040 --> 00:12:36,000
the testing process so that we can learn

00:12:34,020 --> 00:12:37,920
from these incorporate the data that

00:12:36,000 --> 00:12:40,320
we're getting and improve our recovery

00:12:37,920 --> 00:12:42,000
times now the in the research that we

00:12:40,320 --> 00:12:44,010
did the recovery times are improving

00:12:42,000 --> 00:12:46,740
year over year but it does seem like

00:12:44,010 --> 00:12:48,420
nineteen hours is pretty still pretty

00:12:46,740 --> 00:12:50,850
heavy when we're talking about 37

00:12:48,420 --> 00:12:55,950
percent of teams experiencing these

00:12:50,850 --> 00:12:58,980
failures daily now one of the benefits

00:12:55,950 --> 00:13:00,390
of DevOps is that the one of the big

00:12:58,980 --> 00:13:02,100
improvements that we get is that we're

00:13:00,390 --> 00:13:04,110
able to rollback these builds and

00:13:02,100 --> 00:13:08,040
particularly in a continuous delivery

00:13:04,110 --> 00:13:11,400
pipeline 45% of respondents reported

00:13:08,040 --> 00:13:14,160
that they rolled back or hotfix 10% of

00:13:11,400 --> 00:13:16,530
their deployments 20% rolled back 20%

00:13:14,160 --> 00:13:19,750
and thirteen and a half percent rolled

00:13:16,530 --> 00:13:23,020
back 30% of their deployments so

00:13:19,750 --> 00:13:25,810
and even further 7.6% had to roll back

00:13:23,020 --> 00:13:28,510
half of their deployments so there are a

00:13:25,810 --> 00:13:29,920
lot of deployments happening and there's

00:13:28,510 --> 00:13:32,650
a lot of failure happening and this

00:13:29,920 --> 00:13:34,840
probably points to a lack of testing as

00:13:32,650 --> 00:13:37,120
we'll see in the next slide that while

00:13:34,840 --> 00:13:39,520
we're getting to the point of developers

00:13:37,120 --> 00:13:42,730
making their code available more quickly

00:13:39,520 --> 00:13:44,350
we're seeing failures and our processes

00:13:42,730 --> 00:13:50,440
aren't catching those failures early

00:13:44,350 --> 00:13:52,300
enough in the build cycle we'll talk

00:13:50,440 --> 00:13:54,130
about the slide I just showed where

00:13:52,300 --> 00:13:56,050
there were that many failures every time

00:13:54,130 --> 00:13:58,000
there's a build part of this could be

00:13:56,050 --> 00:13:59,800
that 20% of the respondents said they

00:13:58,000 --> 00:14:03,250
have no tests that were automated as

00:13:59,800 --> 00:14:05,530
part of their CD pipeline now this may

00:14:03,250 --> 00:14:07,390
be that they're largely focused on

00:14:05,530 --> 00:14:09,310
manual testing and moving through the

00:14:07,390 --> 00:14:12,640
different pipelines by the click of

00:14:09,310 --> 00:14:15,400
somebody in QA or a developer and IT or

00:14:12,640 --> 00:14:18,910
release manager but that's still a lot

00:14:15,400 --> 00:14:21,280
of deploys and a lot of builds happening

00:14:18,910 --> 00:14:24,360
without any automated tests as part of

00:14:21,280 --> 00:14:24,360
the deployment lifecycle

00:14:28,220 --> 00:14:34,280
still quality is an important part of

00:14:30,950 --> 00:14:36,590
the DevOps process now while there may

00:14:34,280 --> 00:14:40,250
be builds that are not hat that are

00:14:36,590 --> 00:14:42,440
running without tests there is data to

00:14:40,250 --> 00:14:44,120
be gathered as part of the process and

00:14:42,440 --> 00:14:47,600
while we're running automated tests and

00:14:44,120 --> 00:14:50,120
we're running integration tests and one

00:14:47,600 --> 00:14:53,690
of the key things that we're trying to

00:14:50,120 --> 00:14:55,460
gather during the during the CD life

00:14:53,690 --> 00:14:57,800
cycle and the deployment process is that

00:14:55,460 --> 00:14:59,630
developers are running code quality

00:14:57,800 --> 00:15:01,820
reviews they're doing code reviews

00:14:59,630 --> 00:15:03,350
they're running code coverage they're

00:15:01,820 --> 00:15:05,690
doing all of these as part of the

00:15:03,350 --> 00:15:08,870
pipeline so while there may not be any

00:15:05,690 --> 00:15:11,060
automated tests per se there are steps

00:15:08,870 --> 00:15:12,890
within the CD pipeline that are focused

00:15:11,060 --> 00:15:18,620
on trying to make sure that there is

00:15:12,890 --> 00:15:19,850
quality as part of the deliverable but

00:15:18,620 --> 00:15:22,250
with some of the data that we've

00:15:19,850 --> 00:15:25,670
captured most of these organizations are

00:15:22,250 --> 00:15:26,960
not being data-driven thirty percent of

00:15:25,670 --> 00:15:28,700
the respondents are saying that they

00:15:26,960 --> 00:15:31,250
don't use metrics to measure how

00:15:28,700 --> 00:15:33,590
effectively they're using their CI or

00:15:31,250 --> 00:15:36,740
their CD processes as part of their

00:15:33,590 --> 00:15:38,420
development lifecycle so there is a lot

00:15:36,740 --> 00:15:41,480
of data to be gathered but they're not

00:15:38,420 --> 00:15:43,310
actually looking at it not capturing it

00:15:41,480 --> 00:15:45,890
for those that are using metrics and

00:15:43,310 --> 00:15:48,230
data the fifty percent are measuring

00:15:45,890 --> 00:15:50,540
build times while forty percent are

00:15:48,230 --> 00:15:52,250
measuring the number of bugs and 25

00:15:50,540 --> 00:15:55,070
percent are measuring broke and build

00:15:52,250 --> 00:15:56,870
time so interestingly only 15 percent

00:15:55,070 --> 00:15:58,790
measured the downtime during a

00:15:56,870 --> 00:16:00,140
deployment as a metric for how

00:15:58,790 --> 00:16:03,010
successful their continuous delivery

00:16:00,140 --> 00:16:03,010
pipeline is

00:16:06,900 --> 00:16:11,390
one of the biggest pain points that we

00:16:09,120 --> 00:16:14,250
heard from developers during the survey

00:16:11,390 --> 00:16:17,310
with implementing CD with implementing

00:16:14,250 --> 00:16:19,920
DevOps is that environment configuration

00:16:17,310 --> 00:16:21,960
and setup are the biggest pain points

00:16:19,920 --> 00:16:24,300
and this is a big place where containers

00:16:21,960 --> 00:16:27,750
are starting to have an impact and we're

00:16:24,300 --> 00:16:31,620
seeing that as you build out your new

00:16:27,750 --> 00:16:33,690
infrastructure as you we get rid of the

00:16:31,620 --> 00:16:36,000
process of well it works on my machine

00:16:33,690 --> 00:16:37,890
and not in production are not in staging

00:16:36,000 --> 00:16:42,050
or death in containers are helping to

00:16:37,890 --> 00:16:42,050
give us a consistent consistent set of

00:16:42,170 --> 00:16:47,130
implementation details of infrastructure

00:16:45,000 --> 00:16:51,140
that help us reduce the number of

00:16:47,130 --> 00:16:51,140
problems with that inconsistency so

00:16:51,740 --> 00:17:00,150
docker is by far the most used container

00:16:56,700 --> 00:17:03,089
technology 92% of developers who are

00:17:00,150 --> 00:17:06,120
using containers report using docker but

00:17:03,089 --> 00:17:07,949
the field is wide open in terms of the

00:17:06,120 --> 00:17:09,780
orchestration of your containers or the

00:17:07,949 --> 00:17:12,449
operating system that you're using to

00:17:09,780 --> 00:17:15,179
host your containers so what we found is

00:17:12,449 --> 00:17:18,329
that 35% of the developers are using

00:17:15,179 --> 00:17:21,689
kubernetes 32 percent are using docker

00:17:18,329 --> 00:17:25,410
swarm 26 percent are using Amazon East

00:17:21,689 --> 00:17:27,809
yes and on the operating side 25 percent

00:17:25,410 --> 00:17:30,360
of the respondents are using core OS for

00:17:27,809 --> 00:17:33,840
their operating system to help host the

00:17:30,360 --> 00:17:35,610
the containers now you can probably hear

00:17:33,840 --> 00:17:37,140
and find out more about most of these

00:17:35,610 --> 00:17:39,150
technologies at this show as they're all

00:17:37,140 --> 00:17:43,380
open source I would think core OS even

00:17:39,150 --> 00:17:44,730
has a booth downstairs but that is one

00:17:43,380 --> 00:17:47,490
of the things we are seeing is that the

00:17:44,730 --> 00:17:49,590
the field is wide open and while a great

00:17:47,490 --> 00:17:53,010
deal of companies are using containers

00:17:49,590 --> 00:17:55,559
less than 50% of the company's workloads

00:17:53,010 --> 00:17:58,080
are orchestrated and most companies have

00:17:55,559 --> 00:18:01,260
less than 100 containers deployed so I

00:17:58,080 --> 00:18:03,059
think developers are using containers to

00:18:01,260 --> 00:18:05,970
help make their job easier to try out

00:18:03,059 --> 00:18:08,730
new tools but the process of getting

00:18:05,970 --> 00:18:11,580
containers into production workflows is

00:18:08,730 --> 00:18:12,690
still lagging a bit behind the the early

00:18:11,580 --> 00:18:14,960
part of the software development

00:18:12,690 --> 00:18:14,960
lifecycle

00:18:15,260 --> 00:18:19,820
and frankly automation of the lifecycle

00:18:18,410 --> 00:18:22,790
has not arrived yet

00:18:19,820 --> 00:18:24,679
so what we have found is that 60% of

00:18:22,790 --> 00:18:27,140
organizations say they have not achieved

00:18:24,679 --> 00:18:30,590
full automation or push-button deploys

00:18:27,140 --> 00:18:32,419
for any version of their software so

00:18:30,590 --> 00:18:36,260
there's still a lot of work to be done

00:18:32,419 --> 00:18:37,970
across the organization to not just

00:18:36,260 --> 00:18:39,740
automate but even to make push button

00:18:37,970 --> 00:18:42,770
movement through the through the

00:18:39,740 --> 00:18:44,240
continuous delivery pipeline now it is

00:18:42,770 --> 00:18:46,070
quite amazing that 40% of the

00:18:44,240 --> 00:18:48,740
respondents say they have achieved full

00:18:46,070 --> 00:18:51,110
automation of their of their product

00:18:48,740 --> 00:18:52,850
that allows them to push-button any

00:18:51,110 --> 00:18:55,520
version of their software to any

00:18:52,850 --> 00:18:57,620
environment in their setup now I know

00:18:55,520 --> 00:18:59,720
that we're still in the early days of

00:18:57,620 --> 00:19:02,179
trying to achieve this even a d-zone but

00:18:59,720 --> 00:19:03,590
I can speak to the the heart the work

00:19:02,179 --> 00:19:05,990
that it takes to get there and the

00:19:03,590 --> 00:19:08,900
difficulties that we've run into as

00:19:05,990 --> 00:19:11,030
we've tried to be able to build and

00:19:08,900 --> 00:19:15,160
deploy any version of d-zone and of

00:19:11,030 --> 00:19:15,160
answer hub to our to our infrastructure

00:19:17,860 --> 00:19:23,270
what we found here is that

00:19:20,450 --> 00:19:25,370
infrastructure as code is not in place

00:19:23,270 --> 00:19:26,720
and so when we speak of infrastructure

00:19:25,370 --> 00:19:33,500
as code what we're talking about is

00:19:26,720 --> 00:19:34,880
being able to write your infrastructure

00:19:33,500 --> 00:19:37,460
of your structure and the steps that it

00:19:34,880 --> 00:19:39,260
takes to create that in a declarative

00:19:37,460 --> 00:19:41,740
way and store that in a version

00:19:39,260 --> 00:19:45,530
controlled place so that we're able to

00:19:41,740 --> 00:19:47,510
to create and and maintain and manage

00:19:45,530 --> 00:19:50,299
our infrastructure just as if we were

00:19:47,510 --> 00:19:53,780
maintaining our code and and the rest of

00:19:50,299 --> 00:19:55,460
our you know our database schema what we

00:19:53,780 --> 00:19:57,290
have found is that most organizations

00:19:55,460 --> 00:19:59,780
are not using infrastructure as it could

00:19:57,290 --> 00:20:01,910
so whether they're using containers or

00:19:59,780 --> 00:20:04,100
not they're they're setting up their

00:20:01,910 --> 00:20:06,049
infrastructure separately from their

00:20:04,100 --> 00:20:08,360
coding process from the rest of their

00:20:06,049 --> 00:20:11,720
software development lifecycle and

00:20:08,360 --> 00:20:12,679
making that not be as managed as it

00:20:11,720 --> 00:20:14,809
could be

00:20:12,679 --> 00:20:16,460
now when organizations are capturing

00:20:14,809 --> 00:20:18,320
their infrastructure changes in version

00:20:16,460 --> 00:20:20,840
control it seems that the respondents

00:20:18,320 --> 00:20:22,549
are split pretty evenly on whether or

00:20:20,840 --> 00:20:24,740
not they use changes to the

00:20:22,549 --> 00:20:27,320
infrastructure as code files to trigger

00:20:24,740 --> 00:20:28,559
a new deployment so it still seems is

00:20:27,320 --> 00:20:31,529
back to the automation

00:20:28,559 --> 00:20:34,440
peace that there is still a lot of

00:20:31,529 --> 00:20:36,570
manual happening even as we transition

00:20:34,440 --> 00:20:42,029
to DevOps and transition to continuous

00:20:36,570 --> 00:20:44,159
delivery one of the changes and probably

00:20:42,029 --> 00:20:47,190
a side effect of computers getting

00:20:44,159 --> 00:20:49,499
faster and the cloud being available for

00:20:47,190 --> 00:20:52,830
building is that builds are happening

00:20:49,499 --> 00:20:55,950
very fast these days 61% finished in

00:20:52,830 --> 00:20:58,740
less than 10 minutes long gone are the

00:20:55,950 --> 00:21:00,990
days where it takes hours or days to

00:20:58,740 --> 00:21:04,470
build software

00:21:00,990 --> 00:21:06,840
so while 61% finished in under 10

00:21:04,470 --> 00:21:09,330
minutes an additional 17 percent

00:21:06,840 --> 00:21:11,700
finished in under 30 so the the vast

00:21:09,330 --> 00:21:13,710
majority of the builds are happening in

00:21:11,700 --> 00:21:16,919
just a few minutes and and allowing

00:21:13,710 --> 00:21:18,600
developers to compile their code to push

00:21:16,919 --> 00:21:20,460
it to their testing environments and

00:21:18,600 --> 00:21:25,019
even to get it to production in a very

00:21:20,460 --> 00:21:27,179
quick fashion from a continuous

00:21:25,019 --> 00:21:28,789
integration perspective and as part of

00:21:27,179 --> 00:21:31,139
moving towards continuous delivery

00:21:28,789 --> 00:21:33,690
Jenkins is ruling the roost in that

00:21:31,139 --> 00:21:38,789
respect so we're seeing that most

00:21:33,690 --> 00:21:41,159
developers are using using Jenkins it

00:21:38,789 --> 00:21:44,580
had about 66 percent of the respondents

00:21:41,159 --> 00:21:46,529
behind that the next closest choice is

00:21:44,580 --> 00:21:52,799
that you actually don't use a continuous

00:21:46,529 --> 00:21:57,899
integration tool so it does seem that

00:21:52,799 --> 00:22:01,230
there's a lot of adoption for not just

00:21:57,899 --> 00:22:02,429
continuous integration but also for for

00:22:01,230 --> 00:22:04,320
continuous delivery and if you're using

00:22:02,429 --> 00:22:08,970
something else besides Jenkins I'd love

00:22:04,320 --> 00:22:11,999
to hear about it after the talk from a

00:22:08,970 --> 00:22:15,749
source control perspective github and

00:22:11,999 --> 00:22:19,110
get our dominating here not just from

00:22:15,749 --> 00:22:22,460
using the hosted version of github but

00:22:19,110 --> 00:22:25,889
also the enterprise version of github

00:22:22,460 --> 00:22:28,740
with 40% using the open the hosted

00:22:25,889 --> 00:22:30,570
version another 11% using the the

00:22:28,740 --> 00:22:33,629
Enterprise version surprisingly we had a

00:22:30,570 --> 00:22:36,809
new rising star in this survey this year

00:22:33,629 --> 00:22:40,590
with gitlab making some serious inroads

00:22:36,809 --> 00:22:42,330
taking 23 percent of the respondents so

00:22:40,590 --> 00:22:46,830
I don't know how many people are using

00:22:42,330 --> 00:22:50,309
get lab alright that's pretty little

00:22:46,830 --> 00:22:52,710
more than 23% I think so a lot of

00:22:50,309 --> 00:22:55,529
movement from in the gate lab camp this

00:22:52,710 --> 00:22:57,600
year interesting another 11% of the

00:22:55,529 --> 00:22:59,820
respondents are using subversion and

00:22:57,600 --> 00:23:07,830
wrote that into the survey because we

00:22:59,820 --> 00:23:10,320
didn't include it so with all this talk

00:23:07,830 --> 00:23:13,950
about cloud and the movement and to

00:23:10,320 --> 00:23:17,070
cloud and how you know the Google and

00:23:13,950 --> 00:23:19,080
Amazon and and Microsoft want you to run

00:23:17,070 --> 00:23:22,399
all your workloads in the cloud from AI

00:23:19,080 --> 00:23:25,169
to your continuous delivery processes

00:23:22,399 --> 00:23:27,929
37% to developers still prefer or are

00:23:25,169 --> 00:23:29,909
required to deploy on premise and rack

00:23:27,929 --> 00:23:32,309
their own servers or build their own

00:23:29,909 --> 00:23:34,139
virtualization technology so how many

00:23:32,309 --> 00:23:38,700
people still have to deploy in their own

00:23:34,139 --> 00:23:42,510
data centers a little less than 37% here

00:23:38,700 --> 00:23:44,549
so it was an interesting stat and I

00:23:42,510 --> 00:23:46,559
think that probably relates to the use

00:23:44,549 --> 00:23:48,870
of government technologies and and

00:23:46,559 --> 00:23:52,500
people who have to deal with stricter

00:23:48,870 --> 00:23:55,919
security requirements but cloud is still

00:23:52,500 --> 00:23:58,289
far and away the most common deployment

00:23:55,919 --> 00:24:00,360
platform but there is still a strong

00:23:58,289 --> 00:24:05,549
group and developers that have to deploy

00:24:00,360 --> 00:24:07,710
to hardware and last but not least

00:24:05,549 --> 00:24:08,940
developers have to keep learning so one

00:24:07,710 --> 00:24:11,610
of the things we found is that

00:24:08,940 --> 00:24:13,950
developers are constantly taking courses

00:24:11,610 --> 00:24:16,500
to increase their skills they're

00:24:13,950 --> 00:24:19,289
visiting sites like DS oh and to get

00:24:16,500 --> 00:24:21,929
better at their job over 50% of the

00:24:19,289 --> 00:24:24,389
respondents said that they are they take

00:24:21,929 --> 00:24:26,039
an online class or training to stay

00:24:24,389 --> 00:24:28,470
up-to-date on new technologies and get

00:24:26,039 --> 00:24:31,169
crash courses and 75% of them said that

00:24:28,470 --> 00:24:34,049
they read sites like D zone and others

00:24:31,169 --> 00:24:35,700
to keep up with the latest goings-on in

00:24:34,049 --> 00:24:41,510
the new technologies that are part of

00:24:35,700 --> 00:24:44,460
their job as a developer all right

00:24:41,510 --> 00:24:47,330
that's all I have for the data and I'll

00:24:44,460 --> 00:24:47,330
open it up for questions

00:24:51,190 --> 00:24:54,270
no questions

00:25:03,040 --> 00:25:11,740
let's see I think we had but a couple of

00:25:07,180 --> 00:25:15,580
options from JetBrains I believe has a

00:25:11,740 --> 00:25:17,950
has a tool Amazon has a couple of

00:25:15,580 --> 00:25:20,500
options in fact those are some that

00:25:17,950 --> 00:25:22,780
we're evaluating right now there are a

00:25:20,500 --> 00:25:24,940
couple of more expensive options but I

00:25:22,780 --> 00:25:27,150
don't recall if they were on the on the

00:25:24,940 --> 00:25:27,150
list

00:25:31,850 --> 00:25:36,729
and what 4-cd okay

00:25:42,970 --> 00:25:48,119
get lab has a CI CD bundle as well

00:25:51,710 --> 00:25:57,310
okay are you using that just for CI or

00:25:54,260 --> 00:25:57,310
for both

00:26:11,000 --> 00:26:16,730
yeah so those that are using containers

00:26:14,299 --> 00:26:19,850
are using docker those that are trying

00:26:16,730 --> 00:26:23,120
to orchestrate a set of containers are

00:26:19,850 --> 00:26:26,480
using tools like kubernetes or Amazon

00:26:23,120 --> 00:26:28,400
ECS so they're there if they're using

00:26:26,480 --> 00:26:31,640
the 32 percent that are using kubernetes

00:26:28,400 --> 00:26:34,340
are obviously using docker but they're

00:26:31,640 --> 00:26:35,600
they're largely so that's the split

00:26:34,340 --> 00:26:37,610
right it's not that they're using

00:26:35,600 --> 00:26:39,740
kubernetes for the containers they're

00:26:37,610 --> 00:26:41,030
using kubernetes to orchestrate the set

00:26:39,740 --> 00:26:43,539
of containers that they're running and

00:26:41,030 --> 00:26:43,539
the workloads

00:26:46,450 --> 00:26:49,579
[Music]

00:26:52,250 --> 00:26:57,050
I don't recall but I can check in if you

00:26:54,890 --> 00:27:08,360
give me your card afterwards I'll get in

00:26:57,050 --> 00:27:10,370
touch we did capture that but I don't

00:27:08,360 --> 00:27:12,320
recall at the top of my head which which

00:27:10,370 --> 00:27:13,820
ones but we we did capture some I think

00:27:12,320 --> 00:27:18,910
that the biggest one is that they're not

00:27:13,820 --> 00:27:18,910
using a pass on top for that

00:27:34,200 --> 00:27:36,980
mm-hmm

00:27:39,450 --> 00:27:42,519
[Music]

00:27:43,629 --> 00:27:48,229
so I think that kind of speaks to one of

00:27:47,179 --> 00:27:52,639
the slides that I was talking about

00:27:48,229 --> 00:27:54,649
where the the emphasis of DevOps is

00:27:52,639 --> 00:27:58,039
coming from the development organization

00:27:54,649 --> 00:27:59,719
wanting more more control over the

00:27:58,039 --> 00:28:02,570
entire software development lifecycle

00:27:59,719 --> 00:28:05,269
including deploying to production so I

00:28:02,570 --> 00:28:07,879
think I see it more like happening in an

00:28:05,269 --> 00:28:10,059
integrated role rather than a separation

00:28:07,879 --> 00:28:13,269
of concerns like what you're seeing now

00:28:10,059 --> 00:28:16,249
it'd be interesting to see if there's

00:28:13,269 --> 00:28:18,259
more data that we could capture that

00:28:16,249 --> 00:28:19,969
would illustrate that that kind of split

00:28:18,259 --> 00:28:22,690
is the DevOps team completely separate

00:28:19,969 --> 00:28:22,690
from engineering and

00:28:34,470 --> 00:28:37,309
mm-hmm

00:28:47,770 --> 00:28:50,400
right

00:28:51,360 --> 00:28:56,540
so who gets to deploy that inside you're

00:28:53,430 --> 00:28:56,540
right now

00:29:04,960 --> 00:29:11,740
I think surveillance technology is great

00:29:07,659 --> 00:29:14,320
for engineering teams being able to do

00:29:11,740 --> 00:29:16,149
more with less so you know anytime that

00:29:14,320 --> 00:29:18,760
we can cut down on the footprint of the

00:29:16,149 --> 00:29:20,890
infrastructure is probably good for an

00:29:18,760 --> 00:29:23,279
organ it makes things more secure it

00:29:20,890 --> 00:29:27,220
allows the teams to iterate more quickly

00:29:23,279 --> 00:29:30,220
so I continue to see that that

00:29:27,220 --> 00:29:32,350
integration of the two giving as long as

00:29:30,220 --> 00:29:34,450
there's oversight within the you know

00:29:32,350 --> 00:29:37,390
within the organization to have

00:29:34,450 --> 00:29:42,760
checkpoints and audits for security and

00:29:37,390 --> 00:29:45,460
compliance concerns but I I think that a

00:29:42,760 --> 00:29:48,640
big part of the that we found as part of

00:29:45,460 --> 00:29:51,340
this research is that when the the dev

00:29:48,640 --> 00:29:53,350
and the ops teams are still separate

00:29:51,340 --> 00:29:56,289
that communication is part of what's

00:29:53,350 --> 00:29:58,149
making the this whole DevOps thing work

00:29:56,289 --> 00:30:00,580
for them so I don't know how it works

00:29:58,149 --> 00:30:03,909
inside Joerg if there's a high bandwidth

00:30:00,580 --> 00:30:05,799
communication or if the the dev team is

00:30:03,909 --> 00:30:08,490
always waiting on the dev ops team or

00:30:05,799 --> 00:30:08,490
and vice-versa

00:30:16,959 --> 00:30:22,419
they're part you can get most of them as

00:30:19,029 --> 00:30:24,940
part of our the to DevOps so the

00:30:22,419 --> 00:30:29,049
continuous delivery research guide and

00:30:24,940 --> 00:30:30,820
also the containers research guide boat

00:30:29,049 --> 00:30:35,079
that we released this year so you can

00:30:30,820 --> 00:30:37,869
get most of the the highlights there but

00:30:35,079 --> 00:30:41,139
I'd be happy to send you the report as

00:30:37,869 --> 00:30:42,729
well most of the we send the the results

00:30:41,139 --> 00:30:51,359
of the surveys to everybody that takes

00:30:42,729 --> 00:30:51,359
the surveys as well any other questions

00:30:53,200 --> 00:30:56,549

YouTube URL: https://www.youtube.com/watch?v=ejeRFAbeQ0I


