Title: All Things Open 2017 - Angie Jones - The Open Trinity of Automation Architecture
Publication date: 2017-11-28
Playlist: All Things Open 2017
Description: 
	All Things Open 2017, Raleigh NC, Raleigh Convention Center. www.Allthingsopen.org
Captions: 
	00:00:00,410 --> 00:00:08,519
hi everyone I am Angie Jones and I am a

00:00:05,700 --> 00:00:10,980
senior automation engineer at Twitter in

00:00:08,519 --> 00:00:12,330
San Francisco I actually used to work in

00:00:10,980 --> 00:00:15,590
Raleigh how many people live here

00:00:12,330 --> 00:00:18,810
locally yay

00:00:15,590 --> 00:00:21,270
so this is like homecoming for me good

00:00:18,810 --> 00:00:24,380
to see you all today I'm going to talk

00:00:21,270 --> 00:00:27,210
about the open Trinity of automation

00:00:24,380 --> 00:00:30,330
architecture I'm going to start off with

00:00:27,210 --> 00:00:33,180
this tweet it says any developer who

00:00:30,330 --> 00:00:35,579
can't or won't write automated tests for

00:00:33,180 --> 00:00:38,640
their own code it's not a professional

00:00:35,579 --> 00:00:41,910
developer they're a dinosaur how many

00:00:38,640 --> 00:00:43,649
people agree with this great not

00:00:41,910 --> 00:00:46,620
everybody how many people disagree with

00:00:43,649 --> 00:00:51,090
this no one wants to raise their hand

00:00:46,620 --> 00:00:54,629
all right so I'm kind of on a fence with

00:00:51,090 --> 00:00:57,059
it I see the intent that he had with it

00:00:54,629 --> 00:00:59,850
however it's not that easy it's not that

00:00:57,059 --> 00:01:02,039
cut and dry to just say if you're not

00:00:59,850 --> 00:01:04,710
doing this or you won't do it that

00:01:02,039 --> 00:01:07,170
you're a dinosaur is like is it almost

00:01:04,710 --> 00:01:13,770
reasons if there's some ill intent to

00:01:07,170 --> 00:01:18,140
this I think that test automation is a

00:01:13,770 --> 00:01:22,350
craft in and of itself and it requires

00:01:18,140 --> 00:01:24,750
certain studying certain skills and not

00:01:22,350 --> 00:01:28,680
to say that our developers don't have

00:01:24,750 --> 00:01:30,810
that skill set they do of course however

00:01:28,680 --> 00:01:32,729
they're putting a lot of time and

00:01:30,810 --> 00:01:34,560
investment into their own crap of

00:01:32,729 --> 00:01:36,450
developing whatever it is that they're

00:01:34,560 --> 00:01:39,630
developing and so there's an opportunity

00:01:36,450 --> 00:01:41,820
cost if we're going to ask them to do

00:01:39,630 --> 00:01:46,170
the test automation as well how many

00:01:41,820 --> 00:01:48,840
developers do I have here great how many

00:01:46,170 --> 00:01:51,570
of you keep your hands up put your hand

00:01:48,840 --> 00:01:54,479
down if you are not actively writing

00:01:51,570 --> 00:01:57,810
your test automation yourself ok so

00:01:54,479 --> 00:02:01,530
quite a few great wonderful alright so

00:01:57,810 --> 00:02:04,740
what I want to do is give you my three

00:02:01,530 --> 00:02:08,280
go tools for open source automation

00:02:04,740 --> 00:02:12,629
tools that I use when architecting a new

00:02:08,280 --> 00:02:13,680
automation solution ok not only that I'm

00:02:12,629 --> 00:02:19,230
going to give you

00:02:13,680 --> 00:02:21,720
the design in architecture ideas that go

00:02:19,230 --> 00:02:24,420
along with using those tools sound good

00:02:21,720 --> 00:02:27,659
hey so I'm going to go through three of

00:02:24,420 --> 00:02:33,989
them one for UI one for web services and

00:02:27,659 --> 00:02:36,689
then also one for BDD so I think we all

00:02:33,989 --> 00:02:40,340
can agree that clean code and developing

00:02:36,689 --> 00:02:42,780
clean code is a great practice however

00:02:40,340 --> 00:02:45,780
we have to really look at what does that

00:02:42,780 --> 00:02:48,900
mean just writing clean code isn't

00:02:45,780 --> 00:02:52,340
always about the syntax of the code but

00:02:48,900 --> 00:02:54,659
also following the design principles and

00:02:52,340 --> 00:02:57,359
knowing them knowing these different

00:02:54,659 --> 00:02:59,310
patterns and things to use right and so

00:02:57,359 --> 00:03:02,939
I think that's where the gap is when

00:02:59,310 --> 00:03:05,159
we're asking our developers to craft

00:03:02,939 --> 00:03:07,859
these automation frameworks so I've

00:03:05,159 --> 00:03:12,000
worked with a lot of development teams

00:03:07,859 --> 00:03:14,329
and some of them have definitely wanted

00:03:12,000 --> 00:03:20,359
to do this and take this burden on

00:03:14,329 --> 00:03:23,190
however 100% of the time this is filled

00:03:20,359 --> 00:03:25,290
with the development team and it wasn't

00:03:23,190 --> 00:03:27,750
because they weren't the coders they

00:03:25,290 --> 00:03:30,030
were excellent coders some of them were

00:03:27,750 --> 00:03:32,129
architects they've been doing this for

00:03:30,030 --> 00:03:35,190
years and years however like I said

00:03:32,129 --> 00:03:38,340
there was this this gap here that was

00:03:35,190 --> 00:03:40,919
missing and it was studying the craft

00:03:38,340 --> 00:03:44,519
and understanding the concepts behind it

00:03:40,919 --> 00:03:46,829
I see a lot of developers who they write

00:03:44,519 --> 00:03:49,049
beautiful code when they're doing so for

00:03:46,829 --> 00:03:50,609
the production app however when right in

00:03:49,049 --> 00:03:53,090
the test code kind of just slap it

00:03:50,609 --> 00:03:56,069
together and get it over with

00:03:53,090 --> 00:03:57,989
just like your production code your test

00:03:56,069 --> 00:04:03,449
code needs to have that same quality

00:03:57,989 --> 00:04:06,299
level or else it'll crumble okay so

00:04:03,449 --> 00:04:08,340
let's talk about the tools when picking

00:04:06,299 --> 00:04:12,389
these out there are lots of automation

00:04:08,340 --> 00:04:15,840
tools available lots of them new ones

00:04:12,389 --> 00:04:18,150
coming up every day some of them are

00:04:15,840 --> 00:04:21,299
even promising you the moon and the

00:04:18,150 --> 00:04:24,150
stars with little effort at all and so

00:04:21,299 --> 00:04:25,490
it's difficult to look through all of

00:04:24,150 --> 00:04:27,410
that and figure out

00:04:25,490 --> 00:04:30,229
is best for my team in my environment

00:04:27,410 --> 00:04:34,370
okay so what I want to do again is give

00:04:30,229 --> 00:04:37,569
you my three the Trinity I call it that

00:04:34,370 --> 00:04:40,160
works in pretty much any situation

00:04:37,569 --> 00:04:43,310
starting with the UI so

00:04:40,160 --> 00:04:46,759
selenium-webdriver this is the go to the

00:04:43,310 --> 00:04:50,419
king of UI automation this is very much

00:04:46,759 --> 00:04:52,819
so industry standard pretty much any

00:04:50,419 --> 00:04:55,340
shop you're going to that are doing UI

00:04:52,819 --> 00:04:57,919
automation or using selenium-webdriver

00:04:55,340 --> 00:05:05,000
all of these tools are open source as

00:04:57,919 --> 00:05:08,599
well selenium webdriver is not a testing

00:05:05,000 --> 00:05:11,300
tool contrary to popular belief it is a

00:05:08,599 --> 00:05:15,110
browser automation tool so what this

00:05:11,300 --> 00:05:18,560
tool does is it interacts with the UI it

00:05:15,110 --> 00:05:21,229
can set data and interact with the

00:05:18,560 --> 00:05:23,870
different elements on the UI also read

00:05:21,229 --> 00:05:26,090
data and report that back to the code

00:05:23,870 --> 00:05:28,340
base however it's not a testing tool

00:05:26,090 --> 00:05:31,460
because it doesn't do any assertions

00:05:28,340 --> 00:05:38,630
there's no pass or fail with selenium it

00:05:31,460 --> 00:05:40,550
simply provides the data right now any

00:05:38,630 --> 00:05:44,479
other tools that are out there pretty

00:05:40,550 --> 00:05:47,830
much I would say about 90 95 percent of

00:05:44,479 --> 00:05:52,210
the other automation tools UI ones are

00:05:47,830 --> 00:05:56,509
wrappers around selenium so there are

00:05:52,210 --> 00:05:58,009
ones for mobile for angularjs for nodejs

00:05:56,509 --> 00:06:01,130
if you don't want to use vanilla

00:05:58,009 --> 00:06:04,789
selenium I personally always just use

00:06:01,130 --> 00:06:07,190
selenium as is unless I'm doing mobile

00:06:04,789 --> 00:06:09,650
of course but the other ones they will

00:06:07,190 --> 00:06:11,419
add a little things like the promise

00:06:09,650 --> 00:06:13,699
manager and things like that that make

00:06:11,419 --> 00:06:16,039
automation a little bit easier but these

00:06:13,699 --> 00:06:19,780
are not required but there are some of

00:06:16,039 --> 00:06:19,780
them and they're all open source as well

00:06:20,650 --> 00:06:27,050
now let's talk about the framework

00:06:23,800 --> 00:06:30,199
organization and using these tools now

00:06:27,050 --> 00:06:34,039
this is a maven project and you know

00:06:30,199 --> 00:06:36,589
maven comes with two source packages

00:06:34,039 --> 00:06:38,129
already the source main Java and the

00:06:36,589 --> 00:06:40,889
source test Java

00:06:38,129 --> 00:06:44,249
it's really critical to divide your

00:06:40,889 --> 00:06:47,959
automation framework into two these two

00:06:44,249 --> 00:06:50,580
sections with the bottom one being the

00:06:47,959 --> 00:06:53,459
portion where your tests are written

00:06:50,580 --> 00:06:56,879
this is where your test code test code

00:06:53,459 --> 00:07:00,419
goes and the upper one is where your

00:06:56,879 --> 00:07:02,939
framework goes now framework is anything

00:07:00,419 --> 00:07:07,349
that has to deal with the application

00:07:02,939 --> 00:07:10,139
any type of helper utilities widgets

00:07:07,349 --> 00:07:15,899
things like this your test code should

00:07:10,139 --> 00:07:18,509
read very much so like user interacting

00:07:15,899 --> 00:07:21,869
with the application right so let's say

00:07:18,509 --> 00:07:24,330
that we want it to update a cart on an

00:07:21,869 --> 00:07:29,449
e-commerce site your test should read

00:07:24,330 --> 00:07:35,759
like update this cart to quantity three

00:07:29,449 --> 00:07:38,579
verify that the total is XYZ right the

00:07:35,759 --> 00:07:40,889
details the implementation details about

00:07:38,579 --> 00:07:43,229
how you go about doing that that's the

00:07:40,889 --> 00:07:46,019
part that's extracted out into the

00:07:43,229 --> 00:07:47,369
framework portion the reason you want to

00:07:46,019 --> 00:07:50,429
do this you want to separate the

00:07:47,369 --> 00:07:54,139
intentions to make your framework not

00:07:50,429 --> 00:07:56,969
only clean but also reusable and

00:07:54,139 --> 00:07:59,339
maintainable right so if you put all of

00:07:56,969 --> 00:08:02,189
that implementation details in the test

00:07:59,339 --> 00:08:04,050
itself then when you need to do some of

00:08:02,189 --> 00:08:06,569
these same actions again for another

00:08:04,050 --> 00:08:08,279
test you're finding yourself copying and

00:08:06,569 --> 00:08:11,969
pasting and we know that that's a no-no

00:08:08,279 --> 00:08:18,649
right so this is a much cleaner approach

00:08:11,969 --> 00:08:21,329
much more effective let's look at this

00:08:18,649 --> 00:08:23,849
sample page of an application it's a

00:08:21,329 --> 00:08:25,559
cart and it has one product here and

00:08:23,849 --> 00:08:27,800
let's look at our scenario again where

00:08:25,559 --> 00:08:32,130
we want to update the quantity of this

00:08:27,800 --> 00:08:34,769
now the way we would do this in the

00:08:32,130 --> 00:08:37,589
framework portion is we need to use

00:08:34,769 --> 00:08:40,409
what's called the page object model

00:08:37,589 --> 00:08:43,439
design pattern so this is also an

00:08:40,409 --> 00:08:46,649
industry standard and it's it works very

00:08:43,439 --> 00:08:49,730
nicely with selenium tool what you do

00:08:46,649 --> 00:08:51,100
here is for every page in your

00:08:49,730 --> 00:08:53,740
application

00:08:51,100 --> 00:08:56,319
you develop a class within your

00:08:53,740 --> 00:09:00,130
framework to correspond with that page

00:08:56,319 --> 00:09:03,639
and in that page there are two sections

00:09:00,130 --> 00:09:06,459
think of pretty much encapsulation where

00:09:03,639 --> 00:09:10,690
you will have the elements this will be

00:09:06,459 --> 00:09:12,370
your class fields these elements are the

00:09:10,690 --> 00:09:14,470
things on the page that you need to

00:09:12,370 --> 00:09:18,550
interact with such as the button in the

00:09:14,470 --> 00:09:20,680
text field any labels and then the next

00:09:18,550 --> 00:09:24,639
portion would be the methods that you

00:09:20,680 --> 00:09:27,449
call to actually do those actions so

00:09:24,639 --> 00:09:29,920
looking at this sorry it's so small

00:09:27,449 --> 00:09:33,750
looking at this this these are the

00:09:29,920 --> 00:09:37,740
elements of the page so here I have the

00:09:33,750 --> 00:09:40,389
cart table the product price quantity

00:09:37,740 --> 00:09:42,579
different things like this now in order

00:09:40,389 --> 00:09:46,180
to get these elements with selenium you

00:09:42,579 --> 00:09:49,089
have to get into the Dom of the page and

00:09:46,180 --> 00:09:54,720
give selenium some way to identify that

00:09:49,089 --> 00:09:58,209
element this can be done via ID via

00:09:54,720 --> 00:10:01,870
class name name some type of attribute

00:09:58,209 --> 00:10:04,630
on the element it's really important to

00:10:01,870 --> 00:10:08,980
be pretty skilled at this as well so you

00:10:04,630 --> 00:10:11,439
want to be able to craft this in a way

00:10:08,980 --> 00:10:13,569
that you are getting a unique identifier

00:10:11,439 --> 00:10:17,079
right and so sometimes you need to use

00:10:13,569 --> 00:10:19,930
XPath and CSS selectors as well if those

00:10:17,079 --> 00:10:22,209
IDs are not available also in modern day

00:10:19,930 --> 00:10:24,310
applications where we have dynamic Dom's

00:10:22,209 --> 00:10:27,519
this stuff changes and so I these are

00:10:24,310 --> 00:10:29,350
not always adequate enough to get what

00:10:27,519 --> 00:10:31,540
we want some time we need to couple that

00:10:29,350 --> 00:10:33,310
with the state of the element as well

00:10:31,540 --> 00:10:36,730
and so that's where your XPath and your

00:10:33,310 --> 00:10:39,069
CSS selectors come in handy and then

00:10:36,730 --> 00:10:41,290
these are the methods that go with that

00:10:39,069 --> 00:10:44,319
so set in the quantity you use the

00:10:41,290 --> 00:10:46,360
webdriver API to then say find this

00:10:44,319 --> 00:10:49,269
element on the page and then do

00:10:46,360 --> 00:10:52,899
something with it maybe click it if it's

00:10:49,269 --> 00:10:54,639
a button if it's a field set the text if

00:10:52,899 --> 00:10:56,319
it's a label that you want to read then

00:10:54,639 --> 00:10:59,380
you get the text things like this so

00:10:56,319 --> 00:11:02,250
it's a pretty straightforward API really

00:10:59,380 --> 00:11:02,250
easy to use

00:11:04,700 --> 00:11:09,720
Mountain how many people here are

00:11:07,920 --> 00:11:13,110
familiar with mic cones automation

00:11:09,720 --> 00:11:18,290
pyramid okay not very many solid

00:11:13,110 --> 00:11:23,310
explaining right quick this pyramid is a

00:11:18,290 --> 00:11:26,430
representation of how your automated

00:11:23,310 --> 00:11:30,120
tests should be broken up and with layer

00:11:26,430 --> 00:11:33,000
you should be automating at okay notice

00:11:30,120 --> 00:11:36,930
the bottom portion of this pyramid is

00:11:33,000 --> 00:11:40,380
the unit layer what my cone is

00:11:36,930 --> 00:11:43,140
suggesting is that the bulk of your

00:11:40,380 --> 00:11:47,400
automated test should be done at the

00:11:43,140 --> 00:11:50,370
unit test layer the next largest portion

00:11:47,400 --> 00:11:53,880
is the services layer and so what that

00:11:50,370 --> 00:11:56,310
means is if you can if it's not a unit

00:11:53,880 --> 00:11:58,710
test but you can automate at the web

00:11:56,310 --> 00:12:00,660
services or the business logic layer

00:11:58,710 --> 00:12:03,450
then that would be great

00:12:00,660 --> 00:12:07,370
as well and then the very smallest

00:12:03,450 --> 00:12:11,250
portion of this pyramid is the UI

00:12:07,370 --> 00:12:15,030
meaning the you shouldn't have very many

00:12:11,250 --> 00:12:18,360
tests at this layer at all in practice

00:12:15,030 --> 00:12:21,240
we don't really do this although most of

00:12:18,360 --> 00:12:24,150
us would agree that this is a nice model

00:12:21,240 --> 00:12:27,390
to follow because at the unit test layer

00:12:24,150 --> 00:12:30,240
things are fast you don't have to deal

00:12:27,390 --> 00:12:33,110
with a lot of integration and launching

00:12:30,240 --> 00:12:36,650
new eyes and things like that

00:12:33,110 --> 00:12:40,380
services also much faster the UI is slow

00:12:36,650 --> 00:12:43,590
it's also brittle this is where most of

00:12:40,380 --> 00:12:48,300
most of our failures come from that the

00:12:43,590 --> 00:12:50,490
flaky ones the false failures and so we

00:12:48,300 --> 00:12:53,280
encourage people not to do the most here

00:12:50,490 --> 00:12:56,940
however in practice when you're

00:12:53,280 --> 00:12:59,730
developing a new UI feature then it's

00:12:56,940 --> 00:13:02,010
really intuitive to want to test that at

00:12:59,730 --> 00:13:03,890
the UI you want to make sure that that

00:13:02,010 --> 00:13:06,570
thing works

00:13:03,890 --> 00:13:08,880
so how do we get around this well most

00:13:06,570 --> 00:13:10,730
people they simply violate this model

00:13:08,880 --> 00:13:14,380
and then they just automate at the UI

00:13:10,730 --> 00:13:17,320
what I do is I say I'm not

00:13:14,380 --> 00:13:20,860
going to restrict myself to any one

00:13:17,320 --> 00:13:23,980
layer of this pyramid I can have a test

00:13:20,860 --> 00:13:27,070
that spans multiple layers of this

00:13:23,980 --> 00:13:33,790
pyramid for example let's look at our

00:13:27,070 --> 00:13:36,130
cart test again our car test says if we

00:13:33,790 --> 00:13:39,730
wanted to update the quantity we would

00:13:36,130 --> 00:13:42,760
need to launch the UI right we would

00:13:39,730 --> 00:13:44,080
need to search for the product we would

00:13:42,760 --> 00:13:45,760
need to look through those search

00:13:44,080 --> 00:13:48,010
results to find the product they were

00:13:45,760 --> 00:13:50,470
actually looking for we would need to

00:13:48,010 --> 00:13:52,960
click on that product we would need to

00:13:50,470 --> 00:13:56,770
then click to add that product to the

00:13:52,960 --> 00:13:59,140
cart then we would go to the cart once

00:13:56,770 --> 00:14:01,510
we're at the car then we can go ahead

00:13:59,140 --> 00:14:04,060
with what we actually wanted to test at

00:14:01,510 --> 00:14:07,600
the UI which is updating the quantity

00:14:04,060 --> 00:14:10,390
and verifying the price that's a lot

00:14:07,600 --> 00:14:13,540
that's going on at the UI that isn't

00:14:10,390 --> 00:14:18,220
necessarily required to do so so instead

00:14:13,540 --> 00:14:20,260
what I do is I cheat let me use one of

00:14:18,220 --> 00:14:22,990
these other layers maybe the services

00:14:20,260 --> 00:14:25,930
layer to add the product to the cart via

00:14:22,990 --> 00:14:28,930
web service call and then I can launch

00:14:25,930 --> 00:14:31,570
the UI and go straight to the cart and

00:14:28,930 --> 00:14:33,400
do what I need to do at the cart so this

00:14:31,570 --> 00:14:37,600
gives me a couple of things one it

00:14:33,400 --> 00:14:39,610
speeds up my tests substantially much

00:14:37,600 --> 00:14:42,760
faster than doing all of that stuff at

00:14:39,610 --> 00:14:45,430
the UI - it decouples it from other

00:14:42,760 --> 00:14:46,930
parts of the application let's say for

00:14:45,430 --> 00:14:51,490
example that the search feature was

00:14:46,930 --> 00:14:56,200
broken if search was broken and I coated

00:14:51,490 --> 00:14:58,860
this whole thing using the UI now my car

00:14:56,200 --> 00:15:02,260
test is blocked because search is broken

00:14:58,860 --> 00:15:04,900
right that's not what we want I don't

00:15:02,260 --> 00:15:08,080
want to not be able to test cart because

00:15:04,900 --> 00:15:11,410
search is broken so instead I can use

00:15:08,080 --> 00:15:13,660
the API just to add it to the cart i

00:15:11,410 --> 00:15:18,940
bypass all of these other things and

00:15:13,660 --> 00:15:21,850
only the search tests will fail right so

00:15:18,940 --> 00:15:25,300
to use the web services my second go-to

00:15:21,850 --> 00:15:27,640
product is the rest assured library

00:15:25,300 --> 00:15:33,370
this one is a

00:15:27,640 --> 00:15:35,980
sale and it is for Jabba and if if

00:15:33,370 --> 00:15:38,740
anybody in here has used Jabba to do web

00:15:35,980 --> 00:15:40,900
services you know that there's a lot of

00:15:38,740 --> 00:15:42,730
boilerplate code that goes into that

00:15:40,900 --> 00:15:45,610
before you can actually get into making

00:15:42,730 --> 00:15:47,980
the call this extracts all of that away

00:15:45,610 --> 00:15:49,840
from you and so with one line of code

00:15:47,980 --> 00:15:54,160
you pretty much can be up and running

00:15:49,840 --> 00:15:56,890
making again our post call very helpful

00:15:54,160 --> 00:15:59,380
all right so for services let's see

00:15:56,890 --> 00:16:02,680
where that goals in our framework design

00:15:59,380 --> 00:16:06,910
I put the services in the framework

00:16:02,680 --> 00:16:10,600
piece right not part of the test again

00:16:06,910 --> 00:16:12,490
so that I can promote reusability and in

00:16:10,600 --> 00:16:15,970
there I would have however many classes

00:16:12,490 --> 00:16:19,480
I need and kind of parameterize these

00:16:15,970 --> 00:16:26,140
calls so that my test code can call into

00:16:19,480 --> 00:16:29,200
these very easily this is a line in this

00:16:26,140 --> 00:16:31,540
this is car test and in the test I'm

00:16:29,200 --> 00:16:34,690
making a call to the car so what I'm

00:16:31,540 --> 00:16:37,960
doing here is I am making a product

00:16:34,690 --> 00:16:40,600
variable called Apple TV and then I use

00:16:37,960 --> 00:16:44,020
the cart services class to say add this

00:16:40,600 --> 00:16:46,690
product to the cart and I go then I go

00:16:44,020 --> 00:16:49,510
into my you IP so you see I've basically

00:16:46,690 --> 00:16:51,340
taken all of that UI prereq work and put

00:16:49,510 --> 00:16:53,890
that right into a nice web service call

00:16:51,340 --> 00:16:56,470
then I go to the cart page click on it

00:16:53,890 --> 00:16:58,780
and then update the quantity and now I'm

00:16:56,470 --> 00:17:03,790
at my verification so nice and short

00:16:58,780 --> 00:17:07,300
test and this is the cart services class

00:17:03,790 --> 00:17:09,550
where I actually build up that web

00:17:07,300 --> 00:17:11,589
service call so I get the Product ID

00:17:09,550 --> 00:17:14,170
that I might need for this web service

00:17:11,589 --> 00:17:18,760
call the parameters I can put inside of

00:17:14,170 --> 00:17:21,250
a map and then on line 21 is the actual

00:17:18,760 --> 00:17:25,089
get call so it says given these query

00:17:21,250 --> 00:17:28,540
parameters and this base URI make a get

00:17:25,089 --> 00:17:30,250
call here so very simple easy to use you

00:17:28,540 --> 00:17:33,370
can use it straight out of the box you

00:17:30,250 --> 00:17:39,220
add this as a dependency and your pom

00:17:33,370 --> 00:17:41,650
file and you are up and running so a lot

00:17:39,220 --> 00:17:45,310
of managers struggle

00:17:41,650 --> 00:17:48,700
if trying to determine whose job is test

00:17:45,310 --> 00:17:52,770
automation it's very much so a software

00:17:48,700 --> 00:17:55,600
development activity yet you need a

00:17:52,770 --> 00:18:00,550
quality mindset to really be able to

00:17:55,600 --> 00:18:02,950
tackle this properly a lot of teams and

00:18:00,550 --> 00:18:06,190
companies are going with having a

00:18:02,950 --> 00:18:09,520
specialized person such as myself s dead

00:18:06,190 --> 00:18:11,530
or automation engineer who essentially

00:18:09,520 --> 00:18:14,230
has the development skill set but also

00:18:11,530 --> 00:18:17,950
the quality mindset I do recommend this

00:18:14,230 --> 00:18:20,170
approach however other people can still

00:18:17,950 --> 00:18:22,480
be involved as well right we still want

00:18:20,170 --> 00:18:25,390
our developers involved creating the

00:18:22,480 --> 00:18:27,880
test at their unit layer or contributing

00:18:25,390 --> 00:18:30,580
to the UI tested we need them or the

00:18:27,880 --> 00:18:32,770
services test if we need them right also

00:18:30,580 --> 00:18:35,500
we want them to be skilled enough that

00:18:32,770 --> 00:18:38,560
if something breaks they can go in they

00:18:35,500 --> 00:18:41,200
can update these tests properly our

00:18:38,560 --> 00:18:44,140
testers who might not necessarily have

00:18:41,200 --> 00:18:46,330
the skill set of a developer we still

00:18:44,140 --> 00:18:49,360
want them to be able to contribute to

00:18:46,330 --> 00:18:53,350
this effort as well so one approach to

00:18:49,360 --> 00:18:55,060
doing that is by using utilising BDD

00:18:53,350 --> 00:18:58,060
initiatives that you already have going

00:18:55,060 --> 00:19:01,870
now the ability purist would kill me if

00:18:58,060 --> 00:19:04,090
I said that we should use BDD strictly

00:19:01,870 --> 00:19:07,060
for automation so I'm not saying that

00:19:04,090 --> 00:19:09,220
let's just go on record but what I am

00:19:07,060 --> 00:19:12,460
saying is if you're already doing BDD

00:19:09,220 --> 00:19:15,570
and let me explain briefly what BDD is

00:19:12,460 --> 00:19:19,540
its behavior driven development where

00:19:15,570 --> 00:19:22,690
teams use this approach to figure out

00:19:19,540 --> 00:19:24,640
what are the scenarios that we would go

00:19:22,690 --> 00:19:27,520
after what would a customer actually do

00:19:24,640 --> 00:19:29,950
and this is part of the design phase of

00:19:27,520 --> 00:19:32,110
the feature and what this helps to do is

00:19:29,950 --> 00:19:36,310
to flush out all of the details very

00:19:32,110 --> 00:19:39,700
early in the process so that you can

00:19:36,310 --> 00:19:41,770
identify any assumptions or anything

00:19:39,700 --> 00:19:45,970
that you might not have thought of

00:19:41,770 --> 00:19:47,890
before this is typically done by what

00:19:45,970 --> 00:19:51,150
they call the three amigos which

00:19:47,890 --> 00:19:53,230
consists of product development and QA

00:19:51,150 --> 00:19:56,710
all right

00:19:53,230 --> 00:19:58,899
in this process what they do is use the

00:19:56,710 --> 00:20:00,730
Gherkin format to write out these

00:19:58,899 --> 00:20:04,899
scenarios and the Gherkin format has a

00:20:00,730 --> 00:20:06,970
syntax of given when then given this

00:20:04,899 --> 00:20:10,179
syntax and these scenarios written in

00:20:06,970 --> 00:20:13,269
this format you can then take this and

00:20:10,179 --> 00:20:15,370
it becomes the executable test case that

00:20:13,269 --> 00:20:18,070
you now can run as part of your

00:20:15,370 --> 00:20:21,370
automation suite now what managers

00:20:18,070 --> 00:20:23,559
typically miss is this is not magic

00:20:21,370 --> 00:20:26,080
right so it's not you just write this

00:20:23,559 --> 00:20:28,809
out and now it runs there definitely has

00:20:26,080 --> 00:20:30,700
to be some code behind this right and so

00:20:28,809 --> 00:20:32,950
there's a new layer that you need to add

00:20:30,700 --> 00:20:37,210
to your automation framework so

00:20:32,950 --> 00:20:41,830
essentially glue those scenarios to your

00:20:37,210 --> 00:20:43,720
code so a nice tool that'll help us do

00:20:41,830 --> 00:20:47,289
this this is my last open source tool

00:20:43,720 --> 00:20:51,100
cucumber cucumber supports quite a few

00:20:47,289 --> 00:20:54,370
languages Ruby Java groovy JavaScript

00:20:51,100 --> 00:20:56,350
closure blah blah blah so all of the the

00:20:54,370 --> 00:21:00,760
languages the great languages are

00:20:56,350 --> 00:21:04,779
supported here and what I do is add this

00:21:00,760 --> 00:21:07,870
portion to the test layer right there's

00:21:04,779 --> 00:21:11,500
essentially three sections that I add

00:21:07,870 --> 00:21:13,929
for cucumber one is the cucumber package

00:21:11,500 --> 00:21:16,000
by itself this is basically the file

00:21:13,929 --> 00:21:17,830
that will execute all these cucumber

00:21:16,000 --> 00:21:20,620
tests so this is where I put all of my

00:21:17,830 --> 00:21:24,610
options and things like that the

00:21:20,620 --> 00:21:27,309
features is the files where the

00:21:24,610 --> 00:21:30,880
scenarios live so you write these

00:21:27,309 --> 00:21:33,549
features inside of a feature file that's

00:21:30,880 --> 00:21:35,350
the extension dot feature and you

00:21:33,549 --> 00:21:38,440
essentially write those scenarios in the

00:21:35,350 --> 00:21:39,399
gherkin format and then finally the step

00:21:38,440 --> 00:21:41,950
definitions

00:21:39,399 --> 00:21:46,899
that's your glue that's what's going to

00:21:41,950 --> 00:21:50,710
tie those human readable scenarios to

00:21:46,899 --> 00:21:53,590
your actual framework okay so this is an

00:21:50,710 --> 00:21:56,080
example of a cart feature file it says

00:21:53,590 --> 00:21:59,440
the scenario says we want to increase

00:21:56,080 --> 00:22:02,289
the quantity given product Apple TV is

00:21:59,440 --> 00:22:05,980
in the cart when I update this quantity

00:22:02,289 --> 00:22:07,389
to 3 then its price should be $80 and

00:22:05,980 --> 00:22:09,909
its total should be

00:22:07,389 --> 00:22:12,700
two hundred and forty dollars very

00:22:09,909 --> 00:22:14,829
simple people who don't have the

00:22:12,700 --> 00:22:17,859
programming background can easily write

00:22:14,829 --> 00:22:19,450
this and contribute that way and then

00:22:17,859 --> 00:22:24,159
you would have your developers or your

00:22:19,450 --> 00:22:26,739
SS to then map that back into the

00:22:24,159 --> 00:22:30,519
codebase so the way you do that is for

00:22:26,739 --> 00:22:33,909
every line here in my scenario it needs

00:22:30,519 --> 00:22:37,209
to be associated with some method inside

00:22:33,909 --> 00:22:39,339
of my code base so before each of these

00:22:37,209 --> 00:22:41,320
methods I have some annotation which

00:22:39,339 --> 00:22:45,159
will be either given win or then and

00:22:41,320 --> 00:22:47,379
then I use regular expression to write

00:22:45,159 --> 00:22:49,659
that statement out now the regular

00:22:47,379 --> 00:22:52,209
expression you can parameterize use

00:22:49,659 --> 00:22:54,479
wildcards or anything like that if you

00:22:52,209 --> 00:22:57,489
want to make these reusable which I do

00:22:54,479 --> 00:22:58,749
encourage if you use a wild-card then

00:22:57,489 --> 00:23:01,509
you're going to also need to use a

00:22:58,749 --> 00:23:05,200
variable to map with that wildcard and

00:23:01,509 --> 00:23:06,969
your method signature all right inside

00:23:05,200 --> 00:23:10,629
of those methods that's where your magic

00:23:06,969 --> 00:23:12,999
occurs or the real work that's where

00:23:10,629 --> 00:23:15,399
you're going to say okay if you said

00:23:12,999 --> 00:23:21,039
that you want to do this for example if

00:23:15,399 --> 00:23:22,749
you said that you wanted to that given

00:23:21,039 --> 00:23:25,899
statement product Apple TV is in the

00:23:22,749 --> 00:23:27,999
cart you didn't specify how that's done

00:23:25,899 --> 00:23:29,829
that's not in the method itself that's

00:23:27,999 --> 00:23:32,079
where you say okay well let me call the

00:23:29,829 --> 00:23:34,599
web service call and actually put that

00:23:32,079 --> 00:23:36,609
in the cart all right you can do your

00:23:34,599 --> 00:23:40,269
verification and everything right here

00:23:36,609 --> 00:23:43,899
in these step definitions okay

00:23:40,269 --> 00:23:47,229
now we're all about clean coal right and

00:23:43,899 --> 00:23:55,139
so I've seen some teams who deal with

00:23:47,229 --> 00:23:58,359
this cucumber cucumber has this scope

00:23:55,139 --> 00:24:01,389
issue that's kind of good and bad it's a

00:23:58,359 --> 00:24:03,219
bittersweet type of thing and the way

00:24:01,389 --> 00:24:06,909
this works is all of the step

00:24:03,219 --> 00:24:09,789
definitions no matter which file they're

00:24:06,909 --> 00:24:11,589
in as long as they're in one of these

00:24:09,789 --> 00:24:13,329
step definition files and you've said

00:24:11,589 --> 00:24:15,849
this is the package that holds my step

00:24:13,329 --> 00:24:18,190
definition files all of those are global

00:24:15,849 --> 00:24:19,700
so you can use them across multiple

00:24:18,190 --> 00:24:21,200
feature files and that's very

00:24:19,700 --> 00:24:25,370
handy especially when you're doing some

00:24:21,200 --> 00:24:28,100
integration test what's not global is

00:24:25,370 --> 00:24:31,340
the variables and stuff that you define

00:24:28,100 --> 00:24:35,059
within these steps for example if I said

00:24:31,340 --> 00:24:37,820
this product Apple TV is in the cart on

00:24:35,059 --> 00:24:40,460
the very next line which is associated

00:24:37,820 --> 00:24:42,740
with another method that method knows

00:24:40,460 --> 00:24:46,159
nothing about this product that I just

00:24:42,740 --> 00:24:49,070
talked about right so the scope of those

00:24:46,159 --> 00:24:50,840
variables are local to the methods so

00:24:49,070 --> 00:24:55,250
what you need to do to get around this

00:24:50,840 --> 00:24:57,409
is to define those at class level right

00:24:55,250 --> 00:25:01,010
and then you can reuse them across the

00:24:57,409 --> 00:25:02,419
methods now most people don't want to go

00:25:01,010 --> 00:25:04,639
through all that trouble so what they do

00:25:02,419 --> 00:25:07,399
is kind of dump everything inside of one

00:25:04,639 --> 00:25:08,210
feature file it's not good I've seen it

00:25:07,399 --> 00:25:11,480
it's not pretty

00:25:08,210 --> 00:25:14,480
it gets very long very cumbersome very

00:25:11,480 --> 00:25:17,630
hard to maintain and manage so instead

00:25:14,480 --> 00:25:20,419
go ahead and define these out into

00:25:17,630 --> 00:25:23,860
separate files based on the functional

00:25:20,419 --> 00:25:27,019
area and then what you can do is to use

00:25:23,860 --> 00:25:31,250
things like dependency injection to be

00:25:27,019 --> 00:25:35,059
able to make these work so here I have

00:25:31,250 --> 00:25:37,820
another scenario where I am using this

00:25:35,059 --> 00:25:39,620
is the search feature and in this one it

00:25:37,820 --> 00:25:42,440
says given there's a product name Apple

00:25:39,620 --> 00:25:44,510
TV when I search for the product and I

00:25:42,440 --> 00:25:46,370
add the product to the cart then the

00:25:44,510 --> 00:25:48,380
product should be in the cart now those

00:25:46,370 --> 00:25:50,059
first three lines of this scenario are

00:25:48,380 --> 00:25:51,889
very much so related to the search

00:25:50,059 --> 00:25:55,159
feature however that last one is

00:25:51,889 --> 00:25:57,440
something that would also appear in like

00:25:55,159 --> 00:25:59,419
a cart step definition file but it's

00:25:57,440 --> 00:26:01,760
okay because those have a global scope

00:25:59,419 --> 00:26:03,500
and I can utilize them here in this

00:26:01,760 --> 00:26:06,019
feature file as well any future file I

00:26:03,500 --> 00:26:10,460
want to cucumber will be able to find it

00:26:06,019 --> 00:26:12,620
right but what I need to do is I can use

00:26:10,460 --> 00:26:15,200
the penisy injection if I want to use

00:26:12,620 --> 00:26:18,230
any of those variables and states and

00:26:15,200 --> 00:26:20,210
things like that across these files so

00:26:18,230 --> 00:26:22,909
what I do is I create one base or a

00:26:20,210 --> 00:26:25,760
common step definition file anything

00:26:22,909 --> 00:26:28,159
that would be common across multiple of

00:26:25,760 --> 00:26:29,659
these step definition files instead of

00:26:28,159 --> 00:26:31,170
copying and pasting we definitely don't

00:26:29,659 --> 00:26:34,460
want to do that

00:26:31,170 --> 00:26:38,760
put them here in this base class and

00:26:34,460 --> 00:26:40,740
then I can use dependency injection and

00:26:38,760 --> 00:26:42,980
there are several dependency injection

00:26:40,740 --> 00:26:46,140
open-source tools as well

00:26:42,980 --> 00:26:49,620
Pico container spring whatever you're

00:26:46,140 --> 00:26:52,860
already using is fine and essentially

00:26:49,620 --> 00:26:54,930
the way you connect this is by adding a

00:26:52,860 --> 00:26:57,480
constructor to whatever class you want

00:26:54,930 --> 00:26:59,790
to inject into and inside of that you

00:26:57,480 --> 00:27:03,260
would just go ahead and put that base

00:26:59,790 --> 00:27:06,150
step def as one of the arguments okay

00:27:03,260 --> 00:27:10,710
given that now I have a handle which is

00:27:06,150 --> 00:27:12,780
step the step data and I use step data

00:27:10,710 --> 00:27:14,580
throughout to get to any of the

00:27:12,780 --> 00:27:19,250
variables or the methods that are in

00:27:14,580 --> 00:27:23,400
that comments off alright so that is my

00:27:19,250 --> 00:27:27,360
Trinity of open source tools again

00:27:23,400 --> 00:27:30,630
selenium for you I rest assure for web

00:27:27,360 --> 00:27:32,520
services and cucumber for BDD you can

00:27:30,630 --> 00:27:35,820
see that they can all work together very

00:27:32,520 --> 00:27:37,620
nicely and I've shared some of the

00:27:35,820 --> 00:27:40,590
techniques on how to use that how to

00:27:37,620 --> 00:27:47,070
architect that as well all right any

00:27:40,590 --> 00:27:48,750
questions cool so I'll be around for a

00:27:47,070 --> 00:27:50,430
little while you can come and ask me

00:27:48,750 --> 00:27:53,040
anything also here's my contact

00:27:50,430 --> 00:27:55,290
information so I blog about automation

00:27:53,040 --> 00:27:57,450
techniques and strategies at Angie Jones

00:27:55,290 --> 00:27:59,550
that tech if automation is part of your

00:27:57,450 --> 00:28:03,270
job then I do recommend that you go

00:27:59,550 --> 00:28:06,390
ahead and subscribe to that I'm also on

00:28:03,270 --> 00:28:08,160
Twitter of course at tech girl one 9:08

00:28:06,390 --> 00:28:10,830
if you want to give me a shout out my

00:28:08,160 --> 00:28:12,570
manager likes that kind of thing so that

00:28:10,830 --> 00:28:15,530
would be great as well thank you Oh

00:28:12,570 --> 00:28:15,530
question yes sir

00:28:31,250 --> 00:28:35,090
oh good question so he's saying that

00:28:33,710 --> 00:28:37,880
framework looked like it was in a

00:28:35,090 --> 00:28:39,680
separate repo what I recommend having in

00:28:37,880 --> 00:28:41,270
a separate put it's not a separate repo

00:28:39,680 --> 00:28:44,360
from the test but it could be its own

00:28:41,270 --> 00:28:46,070
repo altogether but I recommend that or

00:28:44,360 --> 00:28:48,530
having it with the development the

00:28:46,070 --> 00:28:50,750
production code either or is find

00:28:48,530 --> 00:28:52,940
there's some advantages to having it in

00:28:50,750 --> 00:28:55,190
the production code base so you can

00:28:52,940 --> 00:28:57,770
utilize things for example right now I'm

00:28:55,190 --> 00:29:00,410
working on a project where I actually

00:28:57,770 --> 00:29:02,920
put it in the repo code here are some of

00:29:00,410 --> 00:29:06,200
the things that I gained because of that

00:29:02,920 --> 00:29:08,030
developers are much more likely to help

00:29:06,200 --> 00:29:09,650
with this stuff because they see it

00:29:08,030 --> 00:29:12,800
right there and if they don't have to go

00:29:09,650 --> 00:29:15,050
to another repo to do this also I'm able

00:29:12,800 --> 00:29:16,630
to utilize some of the identifiers that

00:29:15,050 --> 00:29:19,130
they've used such as the accessibility

00:29:16,630 --> 00:29:21,920
identifiers that are defined and like

00:29:19,130 --> 00:29:24,470
its own separate file I can easily use

00:29:21,920 --> 00:29:26,990
those to get my elements that I need for

00:29:24,470 --> 00:29:29,750
selenium as opposed to me identifying

00:29:26,990 --> 00:29:32,870
them myself and risking them being out

00:29:29,750 --> 00:29:35,300
of sync at some point so there are some

00:29:32,870 --> 00:29:37,100
advantages but I've worked for a very

00:29:35,300 --> 00:29:39,950
long time where was this separate repo

00:29:37,100 --> 00:29:43,180
and that's worked fine as well all right

00:29:39,950 --> 00:29:43,180
any other questions yes

00:29:52,370 --> 00:29:57,500
yeah great question so he said so what

00:29:55,220 --> 00:29:59,539
about the commit are you running these

00:29:57,500 --> 00:30:02,870
on every commit are you running it as a

00:29:59,539 --> 00:30:05,600
secondary process so it depends some of

00:30:02,870 --> 00:30:08,419
the tests I do run as part of every

00:30:05,600 --> 00:30:11,270
commit so I identify which test would be

00:30:08,419 --> 00:30:12,470
a part of that strategy if this is going

00:30:11,270 --> 00:30:14,840
to be a part of continuous integration

00:30:12,470 --> 00:30:16,730
obviously we want fast feedback for

00:30:14,840 --> 00:30:18,590
continuous integration and so running

00:30:16,730 --> 00:30:20,600
thousands of tests on every commit is

00:30:18,590 --> 00:30:24,110
not necessarily the best idea ever and

00:30:20,600 --> 00:30:26,090
so the ones that are important may be

00:30:24,110 --> 00:30:29,240
pertaining to the features that we're

00:30:26,090 --> 00:30:31,429
developing we can use out like j-unit

00:30:29,240 --> 00:30:34,130
and testing G they have these attributes

00:30:31,429 --> 00:30:36,529
these annotations that you can put on a

00:30:34,130 --> 00:30:38,929
test and maybe specify things like the

00:30:36,529 --> 00:30:40,789
functional area and things like that so

00:30:38,929 --> 00:30:43,520
I can say okay if these are the areas

00:30:40,789 --> 00:30:45,710
that we're touching right now as part of

00:30:43,520 --> 00:30:48,320
development these are the ones I want

00:30:45,710 --> 00:30:52,220
run as part of every commit everything

00:30:48,320 --> 00:30:54,080
else I can run later maybe twice a day

00:30:52,220 --> 00:31:01,330
on its own and it's not gating the

00:30:54,080 --> 00:31:01,330
chickens alright any other questions yes

00:31:20,770 --> 00:31:25,960
so he says how do I handle maybe the

00:31:23,620 --> 00:31:27,730
fragility of the web service call if

00:31:25,960 --> 00:31:30,400
something changes on the web service

00:31:27,730 --> 00:31:32,710
then that can break my test same is true

00:31:30,400 --> 00:31:34,540
for the UI stuff same and that's just

00:31:32,710 --> 00:31:37,870
the nature of the beast with automation

00:31:34,540 --> 00:31:40,300
so we are automating against the state

00:31:37,870 --> 00:31:42,550
of the application as it is today that

00:31:40,300 --> 00:31:44,920
target is always moving and so our

00:31:42,550 --> 00:31:47,350
automation framework has to be updated

00:31:44,920 --> 00:31:49,900
constantly and that's a key point that a

00:31:47,350 --> 00:31:51,910
lot of people miss they don't realize

00:31:49,900 --> 00:31:53,830
that there's this maintenance cost to

00:31:51,910 --> 00:31:55,720
doing test automation and so no matter

00:31:53,830 --> 00:31:58,960
if I'm going to use web service or UI

00:31:55,720 --> 00:32:04,300
that's really irrelevant web services

00:31:58,960 --> 00:32:06,370
however at least should be a much

00:32:04,300 --> 00:32:09,130
simpler change right and so if they've

00:32:06,370 --> 00:32:11,050
just changed one of the parameters or

00:32:09,130 --> 00:32:12,850
something like that that's fairly easy

00:32:11,050 --> 00:32:15,520
to change whereas if we've changed the

00:32:12,850 --> 00:32:17,350
whole UI or change the flow of a

00:32:15,520 --> 00:32:23,220
scenario that's much more difficult to

00:32:17,350 --> 00:32:23,220
update ok any other questions yes

00:32:37,340 --> 00:32:43,190
so I've seen people who will also branch

00:32:41,120 --> 00:32:45,830
their automation framework to go with

00:32:43,190 --> 00:32:48,049
the development branches and so we have

00:32:45,830 --> 00:32:49,549
this branch that goes with that if we're

00:32:48,049 --> 00:32:51,889
going to work on another branch that's

00:32:49,549 --> 00:32:55,220
totally different then we branch our

00:32:51,889 --> 00:32:57,409
automation code as well keep it in sync

00:32:55,220 --> 00:33:01,789
with the production code all right

00:32:57,409 --> 00:33:03,540
anyone else wonderful thank you all so

00:33:01,789 --> 00:33:08,410
much

00:33:03,540 --> 00:33:08,410

YouTube URL: https://www.youtube.com/watch?v=Wh_wl99tI5A


