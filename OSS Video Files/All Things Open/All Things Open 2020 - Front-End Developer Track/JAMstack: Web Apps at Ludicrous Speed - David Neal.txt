Title: JAMstack: Web Apps at Ludicrous Speed - David Neal
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Developer Track
Description: 
	Presented by: David Neal, Okta
Presented at All Things Open 2020 - Front-End Developer Track

Abstract: If you're a web developer, chances are you have heard the term "JAMstack." Curiously, JAMstack isn't a solution to prevent clogged printers, something to eat on toast, or a way to make music. Instead, it's an architecture for designing super-fast web applications that easily scale.

In this talk, we'll cover the JAMstack architecture, the numerous benefits of the JAMstack approach, and tools you can use to implement a JAMstack web application. You'll walk away with a clear understanding of JAMstack and resources to quickly build your own web app at ludicrous speed!
Captions: 
	00:00:05,279 --> 00:00:09,840
hey

00:00:05,839 --> 00:00:13,519
everybody this is jam stack

00:00:09,840 --> 00:00:15,360
um this is not about you know something

00:00:13,519 --> 00:00:18,080
to prevent clogged printers

00:00:15,360 --> 00:00:20,560
or something to eat on toast or a way to

00:00:18,080 --> 00:00:23,920
make music

00:00:20,560 --> 00:00:27,279
we're here to talk about web application

00:00:23,920 --> 00:00:30,480
architecture in uh modern

00:00:27,279 --> 00:00:33,680
world but first let's get to

00:00:30,480 --> 00:00:36,000
a personal story of mine

00:00:33,680 --> 00:00:38,000
if i can get my clicker to work i want

00:00:36,000 --> 00:00:41,600
to start by sharing

00:00:38,000 --> 00:00:44,960
my web application journey

00:00:41,600 --> 00:00:48,079
so far i started building web apps

00:00:44,960 --> 00:00:49,120
in the late 90s with technologies like

00:00:48,079 --> 00:00:52,879
classic

00:00:49,120 --> 00:00:56,079
active server pages and sql server and

00:00:52,879 --> 00:00:57,280
other uh microsoft stack you know type

00:00:56,079 --> 00:01:01,680
things

00:00:57,280 --> 00:01:03,920
i built an intranet web app for dupont

00:01:01,680 --> 00:01:05,920
so that different manufacturing sites

00:01:03,920 --> 00:01:09,280
could share documents

00:01:05,920 --> 00:01:12,799
training safety information

00:01:09,280 --> 00:01:16,080
and you know a way to collaborate

00:01:12,799 --> 00:01:19,439
and share things with their employees

00:01:16,080 --> 00:01:20,320
administrators could log in and update

00:01:19,439 --> 00:01:23,600
content

00:01:20,320 --> 00:01:26,000
and i didn't realize it at the time but

00:01:23,600 --> 00:01:27,439
basically i ended up creating a content

00:01:26,000 --> 00:01:30,880
management system

00:01:27,439 --> 00:01:30,880
or cms

00:01:31,119 --> 00:01:37,600
i found it amusing during this time when

00:01:34,560 --> 00:01:38,240
uh mainframe programmers were looking at

00:01:37,600 --> 00:01:40,720
the

00:01:38,240 --> 00:01:41,360
internet as it was a you know starting

00:01:40,720 --> 00:01:44,880
to

00:01:41,360 --> 00:01:45,520
emerge and you know looking at browsers

00:01:44,880 --> 00:01:48,560
as

00:01:45,520 --> 00:01:49,840
the new dumb terminal at the time i

00:01:48,560 --> 00:01:52,799
thought they were looking at

00:01:49,840 --> 00:01:54,960
the internet as a step back you know

00:01:52,799 --> 00:01:58,240
instead of a step forward

00:01:54,960 --> 00:01:59,840
now that i'm older i see that

00:01:58,240 --> 00:02:02,079
they were just recognizing some of the

00:01:59,840 --> 00:02:03,280
same familiar patterns that they had

00:02:02,079 --> 00:02:05,200
seen in other

00:02:03,280 --> 00:02:08,160
you know waves of technology in their

00:02:05,200 --> 00:02:10,479
career and they were just mapping that

00:02:08,160 --> 00:02:12,000
you know information to what they

00:02:10,479 --> 00:02:14,400
already knew you know

00:02:12,000 --> 00:02:16,480
drawing those analogies so that they

00:02:14,400 --> 00:02:19,599
could better understand it

00:02:16,480 --> 00:02:22,959
well 2000 came around and i

00:02:19,599 --> 00:02:26,959
jumped on the dot-com bandwagon

00:02:22,959 --> 00:02:30,560
in my next job i built

00:02:26,959 --> 00:02:34,560
another cms and you know

00:02:30,560 --> 00:02:38,319
bigger and better nicer new features

00:02:34,560 --> 00:02:40,120
and then net came along and what was the

00:02:38,319 --> 00:02:43,519
first thing i built using

00:02:40,120 --> 00:02:46,879
asp.net you guessed it

00:02:43,519 --> 00:02:50,080
another cms bigger and better

00:02:46,879 --> 00:02:53,440
than the first than the last

00:02:50,080 --> 00:02:56,800
and i continued

00:02:53,440 --> 00:02:59,840
in this pattern of building

00:02:56,800 --> 00:03:00,560
content management systems to solve a

00:02:59,840 --> 00:03:03,120
lot of the

00:03:00,560 --> 00:03:05,599
applications you know i was using the

00:03:03,120 --> 00:03:09,280
same kind of pattern over and over again

00:03:05,599 --> 00:03:12,720
to build web applications this every

00:03:09,280 --> 00:03:17,120
app was a nail and my hammer

00:03:12,720 --> 00:03:18,080
was the cms well i got tired of building

00:03:17,120 --> 00:03:21,120
all these

00:03:18,080 --> 00:03:24,400
one-off cms apps so

00:03:21,120 --> 00:03:26,480
i just as many developers

00:03:24,400 --> 00:03:28,000
in there have done in their career one

00:03:26,480 --> 00:03:31,040
time or another

00:03:28,000 --> 00:03:34,799
i decided it was time to build

00:03:31,040 --> 00:03:36,959
a framework all we need is a good

00:03:34,799 --> 00:03:40,959
framework a framework will solve

00:03:36,959 --> 00:03:44,879
all our problems and help us go faster

00:03:40,959 --> 00:03:47,519
so you know one app to rule them all

00:03:44,879 --> 00:03:49,440
so instead of rapidly developing and

00:03:47,519 --> 00:03:52,799
adding features to

00:03:49,440 --> 00:03:55,680
one app at a time i was able to grind

00:03:52,799 --> 00:03:56,400
several projects to a halt while each

00:03:55,680 --> 00:04:00,000
waited for

00:03:56,400 --> 00:04:03,360
my new framework to solve every problem

00:04:00,000 --> 00:04:06,799
for all time i got lucky

00:04:03,360 --> 00:04:09,519
i pulled it off and i built a pretty

00:04:06,799 --> 00:04:14,720
awesome application framework in cms it

00:04:09,519 --> 00:04:18,720
had features i was really proud of

00:04:14,720 --> 00:04:21,519
but it was a frankenstein monster

00:04:18,720 --> 00:04:22,800
it was awful to configure terrible to

00:04:21,519 --> 00:04:26,080
maintain

00:04:22,800 --> 00:04:26,880
a beast to deploy it's scary to think

00:04:26,080 --> 00:04:29,759
that

00:04:26,880 --> 00:04:30,880
there are still some apps out there

00:04:29,759 --> 00:04:34,080
using

00:04:30,880 --> 00:04:35,280
my old application framework as far as i

00:04:34,080 --> 00:04:39,199
know

00:04:35,280 --> 00:04:42,400
this was over in engineering

00:04:39,199 --> 00:04:45,840
at its finest

00:04:42,400 --> 00:04:47,040
hello my name is david and i'm in

00:04:45,840 --> 00:04:49,600
recovery

00:04:47,040 --> 00:04:50,479
for building content management systems

00:04:49,600 --> 00:04:56,240
and

00:04:50,479 --> 00:04:59,520
unnecessary frameworks

00:04:56,240 --> 00:05:02,639
well let's walk through an example of

00:04:59,520 --> 00:05:03,759
a typical web application request you

00:05:02,639 --> 00:05:06,479
have a client

00:05:03,759 --> 00:05:07,919
like a desktop or mobile browser and it

00:05:06,479 --> 00:05:11,440
wants to access

00:05:07,919 --> 00:05:13,680
a page on your website or in your web

00:05:11,440 --> 00:05:17,360
app

00:05:13,680 --> 00:05:20,080
and this request goes to your

00:05:17,360 --> 00:05:21,199
server and this web server could be any

00:05:20,080 --> 00:05:24,759
platform

00:05:21,199 --> 00:05:28,000
uh running any language like java php

00:05:24,759 --> 00:05:32,720
asp.net no js or

00:05:28,000 --> 00:05:35,919
a popular cms like wordpress or joomla

00:05:32,720 --> 00:05:38,560
and the web server figures out what

00:05:35,919 --> 00:05:40,560
page to render and and it probably goes

00:05:38,560 --> 00:05:41,759
and fetches some data from a relational

00:05:40,560 --> 00:05:44,720
database

00:05:41,759 --> 00:05:45,520
that it needs to render that particular

00:05:44,720 --> 00:05:48,880
view

00:05:45,520 --> 00:05:52,160
to the client and the database

00:05:48,880 --> 00:05:55,440
responds with some data right but

00:05:52,160 --> 00:05:57,600
it's usually not that simple if you ever

00:05:55,440 --> 00:06:01,199
open up a query inspection tool like

00:05:57,600 --> 00:06:03,440
sql profiler and witness just how many

00:06:01,199 --> 00:06:05,440
trips to the database an application

00:06:03,440 --> 00:06:06,560
makes to generate a single page of

00:06:05,440 --> 00:06:09,759
content

00:06:06,560 --> 00:06:12,800
you would be horrified

00:06:09,759 --> 00:06:15,840
but i digress

00:06:12,800 --> 00:06:17,199
moving on the web server gathers all the

00:06:15,840 --> 00:06:20,160
data it needs

00:06:17,199 --> 00:06:21,199
and combines the data with a template

00:06:20,160 --> 00:06:24,080
system

00:06:21,199 --> 00:06:25,600
of some kind and returns html to the

00:06:24,080 --> 00:06:29,600
client

00:06:25,600 --> 00:06:32,639
every page is built and delivered

00:06:29,600 --> 00:06:35,039
on demand even if

00:06:32,639 --> 00:06:36,400
none of the content has changed from

00:06:35,039 --> 00:06:39,840
request to

00:06:36,400 --> 00:06:42,960
request we'll call this pattern

00:06:39,840 --> 00:06:46,639
the web request walk of shame

00:06:42,960 --> 00:06:50,000
all right great it's a little messy

00:06:46,639 --> 00:06:51,120
but who cares you know we we got the job

00:06:50,000 --> 00:06:54,720
done

00:06:51,120 --> 00:06:57,280
oh wait what's this

00:06:54,720 --> 00:06:58,160
sir the web requests are coming in too

00:06:57,280 --> 00:07:00,560
fast

00:06:58,160 --> 00:07:02,000
there's too many of them we can't keep

00:07:00,560 --> 00:07:05,759
up our radar

00:07:02,000 --> 00:07:09,919
is jammed well

00:07:05,759 --> 00:07:14,160
yes great now we need to scale

00:07:09,919 --> 00:07:17,280
what do we do one measure of speed

00:07:14,160 --> 00:07:20,960
is request per second and let's

00:07:17,280 --> 00:07:24,000
take for the sake of simplicity that

00:07:20,960 --> 00:07:27,120
one web page in our app can handle

00:07:24,000 --> 00:07:30,880
100 requests per second sounds

00:07:27,120 --> 00:07:34,560
reasonable but what if we need more

00:07:30,880 --> 00:07:35,680
okay theoretically if we add another

00:07:34,560 --> 00:07:39,520
server

00:07:35,680 --> 00:07:44,800
we'll get 200 requests per second

00:07:39,520 --> 00:07:47,599
but what does that actually mean

00:07:44,800 --> 00:07:48,000
well it could mean things like we have

00:07:47,599 --> 00:07:50,400
to

00:07:48,000 --> 00:07:52,080
add a load balancer and we have to

00:07:50,400 --> 00:07:54,400
terminate certificates

00:07:52,080 --> 00:07:55,199
at the balancer we have to deploy code

00:07:54,400 --> 00:07:57,280
to

00:07:55,199 --> 00:07:58,240
multiple servers instead of just one we

00:07:57,280 --> 00:08:00,400
have to take

00:07:58,240 --> 00:08:01,520
one server out of the load balancer

00:08:00,400 --> 00:08:04,879
upgrade it

00:08:01,520 --> 00:08:06,720
switch servers add the old server back

00:08:04,879 --> 00:08:07,680
into the load balancer take the next one

00:08:06,720 --> 00:08:11,360
out

00:08:07,680 --> 00:08:14,400
and so on and and so forth so that adds

00:08:11,360 --> 00:08:17,599
a lot of complexity to the deployments

00:08:14,400 --> 00:08:21,280
and then we discover well maybe

00:08:17,599 --> 00:08:24,800
our database has become the bottleneck

00:08:21,280 --> 00:08:28,000
oh no good grief so now we got to do

00:08:24,800 --> 00:08:32,000
things like we'll just add some caching

00:08:28,000 --> 00:08:34,399
and wow by adding some caching our web

00:08:32,000 --> 00:08:35,200
our request per second went to you know

00:08:34,399 --> 00:08:39,919
we can now do

00:08:35,200 --> 00:08:40,800
2 000 requests per second that's amazing

00:08:39,919 --> 00:08:43,519
but

00:08:40,800 --> 00:08:44,320
wait a minute people are reporting that

00:08:43,519 --> 00:08:47,839
they're seeing

00:08:44,320 --> 00:08:49,680
inconsistent results and how do we

00:08:47,839 --> 00:08:51,920
make sure that we invalidate the cash

00:08:49,680 --> 00:08:55,200
when we need to and it's

00:08:51,920 --> 00:08:58,800
well it's just not as simple

00:08:55,200 --> 00:09:00,959
as we thought we keep

00:08:58,800 --> 00:09:03,680
having these weird performance issues so

00:09:00,959 --> 00:09:06,800
we'll just we'll add some cash over here

00:09:03,680 --> 00:09:10,480
and it will add a little bit more cash

00:09:06,800 --> 00:09:15,040
it's okay we got it under control

00:09:10,480 --> 00:09:15,040
oh no what have we done

00:09:15,519 --> 00:09:18,880
and we haven't even talked about

00:09:17,519 --> 00:09:22,959
security

00:09:18,880 --> 00:09:25,519
building a dynamic based application

00:09:22,959 --> 00:09:27,519
you have to keep up with all the latest

00:09:25,519 --> 00:09:30,560
attacks

00:09:27,519 --> 00:09:33,279
most server-based apps have

00:09:30,560 --> 00:09:34,720
huge attack surface area all those

00:09:33,279 --> 00:09:37,200
endpoints for

00:09:34,720 --> 00:09:39,040
managing and administering your

00:09:37,200 --> 00:09:43,680
application are out there

00:09:39,040 --> 00:09:47,360
for all the hackers to well to hack

00:09:43,680 --> 00:09:51,120
if you use a cms you know

00:09:47,360 --> 00:09:54,000
plugins could be a security risk or

00:09:51,120 --> 00:09:54,720
you know all your admin accounts are out

00:09:54,000 --> 00:09:58,080
there

00:09:54,720 --> 00:10:01,040
uh all your content or maybe

00:09:58,080 --> 00:10:01,760
you know just a denial of service attack

00:10:01,040 --> 00:10:05,120
could bring

00:10:01,760 --> 00:10:08,320
your whole application down

00:10:05,120 --> 00:10:11,200
attacks are continuously being

00:10:08,320 --> 00:10:12,160
becoming more sophisticated and are ever

00:10:11,200 --> 00:10:15,839
evolving

00:10:12,160 --> 00:10:19,040
using a popular framework or cms

00:10:15,839 --> 00:10:22,800
might mean you get better support for

00:10:19,040 --> 00:10:25,920
mitigating or fixing those those issues

00:10:22,800 --> 00:10:26,959
or known exploits but it also could mean

00:10:25,920 --> 00:10:29,360
that you're

00:10:26,959 --> 00:10:30,399
at more risk because there's more

00:10:29,360 --> 00:10:33,440
attackers

00:10:30,399 --> 00:10:36,720
attacking and finding exploits in those

00:10:33,440 --> 00:10:36,720
most popular frameworks

00:10:36,800 --> 00:10:43,360
i used to run a shared hosting service

00:10:40,320 --> 00:10:45,839
using servers that i bought and

00:10:43,360 --> 00:10:47,279
maintained and managed and i've seen

00:10:45,839 --> 00:10:49,760
firsthand

00:10:47,279 --> 00:10:51,279
some of the crazy things that can be

00:10:49,760 --> 00:10:56,480
that can compromise

00:10:51,279 --> 00:10:56,480
a website or even an entire server

00:10:56,800 --> 00:11:04,079
today the expectations of visitors

00:11:00,000 --> 00:11:06,720
to web applications aren't too demanding

00:11:04,079 --> 00:11:07,440
right they only want your app to be

00:11:06,720 --> 00:11:11,839
modern

00:11:07,440 --> 00:11:11,839
and beautiful interactive

00:11:12,839 --> 00:11:17,360
um

00:11:14,240 --> 00:11:20,640
dynamic be

00:11:17,360 --> 00:11:23,760
real time with supporting messaging

00:11:20,640 --> 00:11:26,640
and videos and have

00:11:23,760 --> 00:11:29,600
seamless transitions between pages and

00:11:26,640 --> 00:11:32,959
be mobile first

00:11:29,600 --> 00:11:35,360
you know kind of standard fare for

00:11:32,959 --> 00:11:38,000
trying to build a web app these days and

00:11:35,360 --> 00:11:39,040
then there are so many ways of measuring

00:11:38,000 --> 00:11:41,920
performance

00:11:39,040 --> 00:11:44,000
time to first bite time to first paint

00:11:41,920 --> 00:11:46,480
time to first meaningful paint

00:11:44,000 --> 00:11:47,360
page load time to interact time to last

00:11:46,480 --> 00:11:49,440
bite

00:11:47,360 --> 00:11:51,519
bounce rate request per second

00:11:49,440 --> 00:11:54,560
throughput error rate

00:11:51,519 --> 00:11:57,839
conversions that lead from customer uh

00:11:54,560 --> 00:11:57,839
you know visitor to customer

00:11:58,399 --> 00:12:02,399
wow what we need are more acronyms in

00:12:01,360 --> 00:12:05,760
technology

00:12:02,399 --> 00:12:10,639
don't you think so why do we have

00:12:05,760 --> 00:12:14,399
all these ways of measuring performance

00:12:10,639 --> 00:12:18,000
because performance matters seconds

00:12:14,399 --> 00:12:21,040
count a single second more

00:12:18,000 --> 00:12:22,839
could mean your visitors give up and you

00:12:21,040 --> 00:12:25,279
lose potential

00:12:22,839 --> 00:12:26,639
customers there are there have been

00:12:25,279 --> 00:12:29,680
countless studies

00:12:26,639 --> 00:12:32,639
um on the effects of performance on

00:12:29,680 --> 00:12:33,279
sign ups and conversions and revenue for

00:12:32,639 --> 00:12:35,600
example

00:12:33,279 --> 00:12:38,560
pinterest increased search engine

00:12:35,600 --> 00:12:42,160
traffic and signups by 15

00:12:38,560 --> 00:12:46,079
when they reduce their wait times by

00:12:42,160 --> 00:12:47,360
40 percent um cook increased conversions

00:12:46,079 --> 00:12:49,519
by 7

00:12:47,360 --> 00:12:51,360
when they reduced average page load by

00:12:49,519 --> 00:12:54,880
just 850

00:12:51,360 --> 00:12:57,920
milliseconds the bbc

00:12:54,880 --> 00:12:59,519
saw that they lost an additional 10 of

00:12:57,920 --> 00:13:02,399
users for every

00:12:59,519 --> 00:13:03,680
additional second their site took to

00:13:02,399 --> 00:13:06,880
load

00:13:03,680 --> 00:13:08,399
and then doubleclick found through their

00:13:06,880 --> 00:13:11,440
tracking systems

00:13:08,399 --> 00:13:14,560
53 percent of mobile visitors

00:13:11,440 --> 00:13:17,360
abandon a site if a page took more than

00:13:14,560 --> 00:13:21,120
three seconds to load

00:13:17,360 --> 00:13:24,000
performance matters

00:13:21,120 --> 00:13:24,959
in the last five years we seen some

00:13:24,000 --> 00:13:28,480
amazing

00:13:24,959 --> 00:13:31,200
emerging trends in web technology

00:13:28,480 --> 00:13:32,000
more than ever before it's possible to

00:13:31,200 --> 00:13:35,279
build

00:13:32,000 --> 00:13:36,160
rich powerful responsive dynamic web

00:13:35,279 --> 00:13:39,600
apps

00:13:36,160 --> 00:13:42,720
without ever touching a single server

00:13:39,600 --> 00:13:45,199
there's you know no traditional hosting

00:13:42,720 --> 00:13:46,399
no servers to provision no virtual

00:13:45,199 --> 00:13:50,160
machines

00:13:46,399 --> 00:13:51,680
no servers to maintain we we don't even

00:13:50,160 --> 00:13:54,959
have to use things like

00:13:51,680 --> 00:13:58,480
docker or containers or kubernetes

00:13:54,959 --> 00:13:59,199
if we if we don't want to we can do

00:13:58,480 --> 00:14:02,399
things like

00:13:59,199 --> 00:14:05,839
open up a terminal and type get

00:14:02,399 --> 00:14:09,440
push and then like

00:14:05,839 --> 00:14:13,279
magic you have

00:14:09,440 --> 00:14:16,000
an industry leading fast scalable

00:14:13,279 --> 00:14:16,880
globally distributed secure highly

00:14:16,000 --> 00:14:20,480
available

00:14:16,880 --> 00:14:22,800
agile lean fault tolerant flexible

00:14:20,480 --> 00:14:25,040
decoupled world-class interactive

00:14:22,800 --> 00:14:27,279
personalized dynamic mobile-first

00:14:25,040 --> 00:14:29,279
progressive disruptive real-time

00:14:27,279 --> 00:14:32,639
seamlessly integrated digital

00:14:29,279 --> 00:14:35,920
transformation with analytics ai

00:14:32,639 --> 00:14:41,920
and machine learning did i miss any buzz

00:14:35,920 --> 00:14:41,920
words what a time to be alive

00:14:43,440 --> 00:14:47,120
jam stack is

00:14:48,399 --> 00:14:55,199
nothing new netlify

00:14:51,839 --> 00:14:58,800
a popular content delivery network or

00:14:55,199 --> 00:15:00,880
cdn coined the name jam stack

00:14:58,800 --> 00:15:02,079
but jam stack is not a particular

00:15:00,880 --> 00:15:05,600
technology or

00:15:02,079 --> 00:15:08,639
vendor in some ways you may already have

00:15:05,600 --> 00:15:10,320
parts of the jam stack in well your

00:15:08,639 --> 00:15:13,360
stack

00:15:10,320 --> 00:15:16,000
jam stack is a label um

00:15:13,360 --> 00:15:17,279
kind of like web 2.0 you remember web

00:15:16,000 --> 00:15:20,399
2.0

00:15:17,279 --> 00:15:24,320
and the rise of ajax

00:15:20,399 --> 00:15:27,440
jam stack is a set of emerging trends

00:15:24,320 --> 00:15:31,680
for building modern web applications

00:15:27,440 --> 00:15:33,519
and these trends include get workflows

00:15:31,680 --> 00:15:34,880
continuous integration continuous

00:15:33,519 --> 00:15:37,199
deployment

00:15:34,880 --> 00:15:37,920
static site generators front-end

00:15:37,199 --> 00:15:41,759
frameworks

00:15:37,920 --> 00:15:46,880
apis which could be also third-party

00:15:41,759 --> 00:15:50,399
apis things like serverless

00:15:46,880 --> 00:15:52,480
graphql cdns

00:15:50,399 --> 00:15:54,000
there's lots of technologies that kind

00:15:52,480 --> 00:15:57,519
of can

00:15:54,000 --> 00:16:00,639
be considered part of jam stack

00:15:57,519 --> 00:16:04,720
the jam stack the jam pump

00:16:00,639 --> 00:16:07,279
the jam uh okay

00:16:04,720 --> 00:16:08,000
no more old school stuff the jam and jam

00:16:07,279 --> 00:16:11,519
stack stands

00:16:08,000 --> 00:16:14,639
for javascript apis

00:16:11,519 --> 00:16:17,360
and markup although

00:16:14,639 --> 00:16:18,720
javascript is the primary language of

00:16:17,360 --> 00:16:20,639
the browser

00:16:18,720 --> 00:16:22,000
for making from the front end more

00:16:20,639 --> 00:16:24,480
dynamic you can

00:16:22,000 --> 00:16:25,519
choose whatever language you wish for

00:16:24,480 --> 00:16:27,519
things like

00:16:25,519 --> 00:16:28,959
templating and building assets

00:16:27,519 --> 00:16:33,120
automating your deployments

00:16:28,959 --> 00:16:33,120
creating back-end apis and so forth

00:16:34,399 --> 00:16:41,120
well in that web request walk of shame

00:16:38,240 --> 00:16:42,959
that we talked about caching is pretty

00:16:41,120 --> 00:16:46,160
awesome

00:16:42,959 --> 00:16:49,120
when it works it can short-circuit a

00:16:46,160 --> 00:16:50,000
request and return the exact results

00:16:49,120 --> 00:16:53,199
that have been

00:16:50,000 --> 00:16:55,360
asked for a cache can be introduced at

00:16:53,199 --> 00:16:58,240
lots of different levels

00:16:55,360 --> 00:16:59,279
from the database on up and the goal of

00:16:58,240 --> 00:17:02,320
a cache

00:16:59,279 --> 00:17:04,160
is to reduce compute cycles there's less

00:17:02,320 --> 00:17:06,319
work for the database

00:17:04,160 --> 00:17:08,799
or the server there's less latency

00:17:06,319 --> 00:17:11,199
there's fewer network calls

00:17:08,799 --> 00:17:13,039
you know so when you make a request if

00:17:11,199 --> 00:17:15,120
you can short circuit that request and

00:17:13,039 --> 00:17:18,559
just give the results to

00:17:15,120 --> 00:17:22,079
the client you've saved a whole lot

00:17:18,559 --> 00:17:24,400
uh in that that application request life

00:17:22,079 --> 00:17:28,240
cycle

00:17:24,400 --> 00:17:32,320
okay let me send give this to you

00:17:28,240 --> 00:17:35,120
do you know what the best cash

00:17:32,320 --> 00:17:35,120
it is

00:17:36,080 --> 00:17:43,280
the absolute fastest web

00:17:39,440 --> 00:17:46,960
request a server can serve

00:17:43,280 --> 00:17:50,160
is a request for a static file

00:17:46,960 --> 00:17:51,120
you read a file from a disk and you send

00:17:50,160 --> 00:17:53,840
it

00:17:51,120 --> 00:17:55,600
there's no calls to other apis no

00:17:53,840 --> 00:17:59,120
databases to query no

00:17:55,600 --> 00:18:02,160
templates to execute anything more

00:17:59,120 --> 00:18:05,200
than a static file requires

00:18:02,160 --> 00:18:08,240
cpu cycles to execute code

00:18:05,200 --> 00:18:11,919
and generate a response a static

00:18:08,240 --> 00:18:15,840
file wins every time

00:18:11,919 --> 00:18:15,840
over code

00:18:16,720 --> 00:18:24,080
the heart of jam stack the number one

00:18:20,000 --> 00:18:28,080
goal is to maximize

00:18:24,080 --> 00:18:31,200
pre-built markup and assets

00:18:28,080 --> 00:18:33,840
all the other technologies and practices

00:18:31,200 --> 00:18:34,559
considered to be part of jam stack come

00:18:33,840 --> 00:18:38,160
down to

00:18:34,559 --> 00:18:41,600
how can we make the workflow better

00:18:38,160 --> 00:18:44,400
faster more automated how can we

00:18:41,600 --> 00:18:47,039
maximize the amount of the of the

00:18:44,400 --> 00:18:51,039
application that we can make static

00:18:47,039 --> 00:18:54,799
and how can we push those static assets

00:18:51,039 --> 00:18:57,840
to the edge closer to customers

00:18:54,799 --> 00:18:59,280
where they are physically located the

00:18:57,840 --> 00:19:02,720
edge that i'm talking about

00:18:59,280 --> 00:19:03,760
is you know using content delivery

00:19:02,720 --> 00:19:06,799
networks

00:19:03,760 --> 00:19:09,280
cdns are extremely powerful

00:19:06,799 --> 00:19:11,600
cdns have become cheaper and in some

00:19:09,280 --> 00:19:14,880
cases completely free

00:19:11,600 --> 00:19:17,840
smarter with regards to atomic

00:19:14,880 --> 00:19:20,880
deployments and cash invalidation

00:19:17,840 --> 00:19:24,080
they reduce latency being physically

00:19:20,880 --> 00:19:27,520
closer to the clients and

00:19:24,080 --> 00:19:28,480
cdns are the experts when it comes to

00:19:27,520 --> 00:19:32,160
scaling

00:19:28,480 --> 00:19:36,840
to meet demands in traffic as well as

00:19:32,160 --> 00:19:38,480
restraining hackers denial of service

00:19:36,840 --> 00:19:42,080
attacks

00:19:38,480 --> 00:19:44,880
well unfortunately

00:19:42,080 --> 00:19:45,200
static when we think of the word static

00:19:44,880 --> 00:19:49,120
we

00:19:45,200 --> 00:19:49,919
we have it's kind of a a bad connotation

00:19:49,120 --> 00:19:52,320
right it's

00:19:49,919 --> 00:19:54,799
kind of a bad seems like a bad word we

00:19:52,320 --> 00:19:57,840
want we want things to be dynamic

00:19:54,799 --> 00:20:00,640
we want things to be uh you know

00:19:57,840 --> 00:20:01,919
tailored to a particular customer or

00:20:00,640 --> 00:20:04,000
request

00:20:01,919 --> 00:20:05,200
so in the modern world of web

00:20:04,000 --> 00:20:09,280
development static

00:20:05,200 --> 00:20:12,720
is today means anything but static

00:20:09,280 --> 00:20:15,520
static is pre-compiled html

00:20:12,720 --> 00:20:16,640
css javascript images and any other

00:20:15,520 --> 00:20:19,120
content

00:20:16,640 --> 00:20:20,159
that can be delivered without having to

00:20:19,120 --> 00:20:23,760
use

00:20:20,159 --> 00:20:28,240
compute resources or you know ideally

00:20:23,760 --> 00:20:32,159
a cdn once it reaches the client

00:20:28,240 --> 00:20:35,280
the app meaning the the front-end code

00:20:32,159 --> 00:20:37,679
can be as personalized and dynamic as

00:20:35,280 --> 00:20:41,120
anything that you can imagine

00:20:37,679 --> 00:20:44,559
the shift in thinking is moving

00:20:41,120 --> 00:20:48,880
more of the runtime from the web server

00:20:44,559 --> 00:20:52,159
to the browser

00:20:48,880 --> 00:20:55,200
the design of a jam stack application

00:20:52,159 --> 00:20:57,280
is kind of like a native mobile app

00:20:55,200 --> 00:20:59,200
when you think about it so in a native

00:20:57,280 --> 00:21:03,440
mobile application you have

00:20:59,200 --> 00:21:06,000
pre-built you know components

00:21:03,440 --> 00:21:06,880
as much as possible everything is baked

00:21:06,000 --> 00:21:09,520
into

00:21:06,880 --> 00:21:10,880
the application when you download an

00:21:09,520 --> 00:21:13,360
application it includes

00:21:10,880 --> 00:21:14,159
all the assets that it needs like the

00:21:13,360 --> 00:21:18,400
images

00:21:14,159 --> 00:21:21,760
and you know code or javascript or

00:21:18,400 --> 00:21:25,840
you know other ways of rendering things

00:21:21,760 --> 00:21:28,880
when needed it connects to other apis

00:21:25,840 --> 00:21:32,080
uh to you know which could be your

00:21:28,880 --> 00:21:35,280
apis or third-party apis

00:21:32,080 --> 00:21:39,360
it's designed to load really fast and

00:21:35,280 --> 00:21:42,480
it's designed to be super interactive

00:21:39,360 --> 00:21:42,480
you know and very fluid

00:21:43,440 --> 00:21:48,720
kind of like jam stack jam stack is is

00:21:46,799 --> 00:21:50,159
trying to accomplish these same kind of

00:21:48,720 --> 00:21:53,200
things but

00:21:50,159 --> 00:21:55,679
you know using the browser

00:21:53,200 --> 00:21:56,400
okay remember our web request walk of

00:21:55,679 --> 00:21:58,480
shame

00:21:56,400 --> 00:22:00,240
let's come back to that again now in

00:21:58,480 --> 00:22:04,320
comparison

00:22:00,240 --> 00:22:08,720
i want to give you the jam stack

00:22:04,320 --> 00:22:11,679
request to glory you ready

00:22:08,720 --> 00:22:12,080
we have our client such as a desktop or

00:22:11,679 --> 00:22:14,720
mobile

00:22:12,080 --> 00:22:15,919
browser it makes a request for a

00:22:14,720 --> 00:22:20,480
resource

00:22:15,919 --> 00:22:23,919
such as a web page the request is routed

00:22:20,480 --> 00:22:25,360
to the nearest server in a content

00:22:23,919 --> 00:22:29,039
delivery network

00:22:25,360 --> 00:22:33,039
and the cdn now get this

00:22:29,039 --> 00:22:33,039
you won't believe what happens next

00:22:33,280 --> 00:22:43,600
it serves the file back to the client

00:22:40,080 --> 00:22:46,799
drop the mic there is nothing

00:22:43,600 --> 00:22:52,000
nothing faster

00:22:46,799 --> 00:22:52,000
you have achieved ludicrous speed

00:22:52,320 --> 00:22:57,919
okay so how do we get there

00:22:56,159 --> 00:22:59,600
in light of the information that i've

00:22:57,919 --> 00:23:02,880
given you so far

00:22:59,600 --> 00:23:07,159
what if i told you that you need to

00:23:02,880 --> 00:23:10,000
stop writing silly server-side code

00:23:07,159 --> 00:23:11,840
java.net php node.js

00:23:10,000 --> 00:23:13,840
or whatever server side language or

00:23:11,840 --> 00:23:17,280
framework you use

00:23:13,840 --> 00:23:22,000
and instead focus on building

00:23:17,280 --> 00:23:25,919
static assets

00:23:22,000 --> 00:23:28,799
yeah sounds disgusting right i get it

00:23:25,919 --> 00:23:31,120
that was my reaction too i'm not going

00:23:28,799 --> 00:23:32,480
to give up my favorite platform my

00:23:31,120 --> 00:23:36,000
favorite language or

00:23:32,480 --> 00:23:39,200
frameworks well i submit

00:23:36,000 --> 00:23:42,960
to you that there's no code

00:23:39,200 --> 00:23:46,080
faster than no code eh

00:23:42,960 --> 00:23:50,000
think about it and

00:23:46,080 --> 00:23:54,720
there's no code that's more secure

00:23:50,000 --> 00:23:57,279
than no code am i right

00:23:54,720 --> 00:23:58,320
if your application is made up of static

00:23:57,279 --> 00:24:01,520
assets

00:23:58,320 --> 00:24:07,200
a huge portion of your application's

00:24:01,520 --> 00:24:07,200
attack surface area simply disappears

00:24:08,640 --> 00:24:15,039
now before you completely dismiss

00:24:12,240 --> 00:24:17,520
everything that i'm saying and get give

00:24:15,039 --> 00:24:22,880
me a few more minutes of your time

00:24:17,520 --> 00:24:22,880
and you know try to keep an open mind

00:24:23,600 --> 00:24:29,760
all is not lost you can still use your

00:24:26,960 --> 00:24:32,720
favorite platforms and languages

00:24:29,760 --> 00:24:33,520
just perhaps in new and more focused

00:24:32,720 --> 00:24:35,919
ways

00:24:33,520 --> 00:24:36,799
a typical jam stack application

00:24:35,919 --> 00:24:39,120
architecture

00:24:36,799 --> 00:24:40,799
and workflow might look like the

00:24:39,120 --> 00:24:43,200
following

00:24:40,799 --> 00:24:44,159
you may have a git repository where you

00:24:43,200 --> 00:24:46,640
have your

00:24:44,159 --> 00:24:48,159
front end ui and some content and

00:24:46,640 --> 00:24:50,480
templates used to render

00:24:48,159 --> 00:24:51,679
those static assets you might have

00:24:50,480 --> 00:24:55,600
what's called a

00:24:51,679 --> 00:24:56,240
headless cms design for jam stack where

00:24:55,600 --> 00:24:58,720
you

00:24:56,240 --> 00:25:00,960
maintain your content we'll talk more

00:24:58,720 --> 00:25:03,200
about that later

00:25:00,960 --> 00:25:04,159
and you may have one or more third-party

00:25:03,200 --> 00:25:07,360
apis

00:25:04,159 --> 00:25:08,400
or apis that you have created internally

00:25:07,360 --> 00:25:12,400
to make

00:25:08,400 --> 00:25:14,480
to add more features to your app

00:25:12,400 --> 00:25:17,360
when you make a change to any of these

00:25:14,480 --> 00:25:17,919
things a web hook or some other type of

00:25:17,360 --> 00:25:21,279
event

00:25:17,919 --> 00:25:23,039
triggers your build process to build

00:25:21,279 --> 00:25:26,240
your application

00:25:23,039 --> 00:25:29,520
and when the build process kicks off

00:25:26,240 --> 00:25:32,000
it takes all that markup and templates

00:25:29,520 --> 00:25:33,279
and your repository and it starts

00:25:32,000 --> 00:25:36,320
compiling

00:25:33,279 --> 00:25:38,240
the assets for your application

00:25:36,320 --> 00:25:39,360
well during the build process it might

00:25:38,240 --> 00:25:42,480
reach out to your

00:25:39,360 --> 00:25:46,000
cms or other apis

00:25:42,480 --> 00:25:49,360
your database and for additional content

00:25:46,000 --> 00:25:50,640
and data to compile into the rendered

00:25:49,360 --> 00:25:54,799
content

00:25:50,640 --> 00:25:58,720
as much as possible the final output

00:25:54,799 --> 00:26:02,799
will be like a snapshot of everything

00:25:58,720 --> 00:26:04,880
that makes up your application

00:26:02,799 --> 00:26:05,840
your pre-compiled assets are then

00:26:04,880 --> 00:26:09,279
deployed

00:26:05,840 --> 00:26:12,400
ideally to a cdn and when a

00:26:09,279 --> 00:26:15,760
page is requested the static content

00:26:12,400 --> 00:26:19,679
is delivered and rendered as quickly

00:26:15,760 --> 00:26:22,720
as technically possible your application

00:26:19,679 --> 00:26:25,440
might then use javascript

00:26:22,720 --> 00:26:26,559
to progressively enhance the application

00:26:25,440 --> 00:26:29,760
experience

00:26:26,559 --> 00:26:32,480
using your apis or third-party

00:26:29,760 --> 00:26:32,480
apis

00:26:32,880 --> 00:26:39,520
one of the many benefits of using a cdn

00:26:36,559 --> 00:26:40,640
is atomic deployments this means that

00:26:39,520 --> 00:26:42,799
each new build

00:26:40,640 --> 00:26:44,720
of your application is deployed

00:26:42,799 --> 00:26:47,840
throughout the cdn

00:26:44,720 --> 00:26:49,440
and like the flipping of a switch it

00:26:47,840 --> 00:26:52,799
happens all at once

00:26:49,440 --> 00:26:55,679
like a transaction your users

00:26:52,799 --> 00:26:57,760
won't see inconsistent results this also

00:26:55,679 --> 00:26:59,679
means that if you need to

00:26:57,760 --> 00:27:01,039
rolling back to a previous version of

00:26:59,679 --> 00:27:03,600
your app

00:27:01,039 --> 00:27:06,240
it becomes rather trivial and you can do

00:27:03,600 --> 00:27:08,559
that with confidence

00:27:06,240 --> 00:27:09,520
you can use branches in your git

00:27:08,559 --> 00:27:12,240
workflow

00:27:09,520 --> 00:27:13,039
to deploy different environments for

00:27:12,240 --> 00:27:21,679
testing

00:27:13,039 --> 00:27:23,840
and for previewing

00:27:21,679 --> 00:27:24,960
static site generators have been

00:27:23,840 --> 00:27:28,559
dismissed

00:27:24,960 --> 00:27:31,840
as being only good for documentation

00:27:28,559 --> 00:27:35,279
but today there are amazing generators

00:27:31,840 --> 00:27:38,080
for every language and platform if your

00:27:35,279 --> 00:27:38,480
front end team loves react then they

00:27:38,080 --> 00:27:41,600
might

00:27:38,480 --> 00:27:45,120
like gatsby or next js

00:27:41,600 --> 00:27:48,559
if vue is your thing take a look at next

00:27:45,120 --> 00:27:51,360
if you want the fastest builds possible

00:27:48,559 --> 00:27:52,000
try something like hugo or eleventy

00:27:51,360 --> 00:27:54,960
eleventy

00:27:52,000 --> 00:27:55,600
also supports lots and lots of template

00:27:54,960 --> 00:27:57,360
engines

00:27:55,600 --> 00:27:58,640
and is extremely flexible i've

00:27:57,360 --> 00:28:01,520
personally been using

00:27:58,640 --> 00:28:03,200
11d on some of my projects and i i think

00:28:01,520 --> 00:28:05,679
it's fantastic

00:28:03,200 --> 00:28:07,760
you can also use good old jekyll which

00:28:05,679 --> 00:28:10,960
is the generator that kind of

00:28:07,760 --> 00:28:14,720
started all of this

00:28:10,960 --> 00:28:18,720
in recent years we've seen an explosion

00:28:14,720 --> 00:28:20,960
of great api platforms and the market

00:28:18,720 --> 00:28:22,159
is just going to continue to grow you

00:28:20,960 --> 00:28:24,960
can progressively

00:28:22,159 --> 00:28:28,000
add features to your jam stack

00:28:24,960 --> 00:28:31,600
application from the best apis available

00:28:28,000 --> 00:28:34,640
such as algolia for search and

00:28:31,600 --> 00:28:37,520
stripe for e-commerce and payments use

00:28:34,640 --> 00:28:38,960
octa for authentication twilio for

00:28:37,520 --> 00:28:43,039
messaging

00:28:38,960 --> 00:28:46,799
fauna is an exciting modern database

00:28:43,039 --> 00:28:46,799
with native graphql support

00:28:47,039 --> 00:28:52,159
why would you dare build a system for

00:28:50,080 --> 00:28:54,559
sending text messages

00:28:52,159 --> 00:28:55,520
or emails when you could leverage an

00:28:54,559 --> 00:28:59,039
expert

00:28:55,520 --> 00:29:01,279
like twilio and syndra

00:28:59,039 --> 00:29:02,640
why would you build an entire payment

00:29:01,279 --> 00:29:06,799
system from scratch

00:29:02,640 --> 00:29:09,919
when you can use something like stripe

00:29:06,799 --> 00:29:12,559
why build authentication when you could

00:29:09,919 --> 00:29:14,080
use something like octa login

00:29:12,559 --> 00:29:17,120
authentication

00:29:14,080 --> 00:29:19,279
user profile management identity

00:29:17,120 --> 00:29:20,240
multi-factor authentication secure

00:29:19,279 --> 00:29:23,919
content

00:29:20,240 --> 00:29:27,200
personalization okay full disclosure

00:29:23,919 --> 00:29:30,320
i work for octa but

00:29:27,200 --> 00:29:32,720
a company like this you know

00:29:30,320 --> 00:29:33,760
why would you not want to leverage the

00:29:32,720 --> 00:29:37,039
experts

00:29:33,760 --> 00:29:40,080
in using building these kind of features

00:29:37,039 --> 00:29:43,760
in your application

00:29:40,080 --> 00:29:47,039
the these

00:29:43,760 --> 00:29:50,320
these apis that are available are

00:29:47,039 --> 00:29:52,399
the experts they are far more

00:29:50,320 --> 00:29:54,320
vested in being the very best at what

00:29:52,399 --> 00:29:57,600
they do

00:29:54,320 --> 00:30:00,559
than you could ever do on on your own

00:29:57,600 --> 00:30:01,919
in your own implementation plus your

00:30:00,559 --> 00:30:04,399
attack surface area

00:30:01,919 --> 00:30:05,679
is minimized these third-party party

00:30:04,399 --> 00:30:08,320
apis

00:30:05,679 --> 00:30:10,080
carry the burden of securing and scaling

00:30:08,320 --> 00:30:12,159
their own infrastructure

00:30:10,080 --> 00:30:13,520
they know a thing a two thing or two

00:30:12,159 --> 00:30:16,960
because they've

00:30:13,520 --> 00:30:16,960
seen a thing or two

00:30:17,520 --> 00:30:23,600
and now would be a good time to

00:30:21,440 --> 00:30:25,200
you know if you absolutely need to build

00:30:23,600 --> 00:30:27,840
your own apis

00:30:25,200 --> 00:30:28,720
to consider something like functions as

00:30:27,840 --> 00:30:32,240
a service

00:30:28,720 --> 00:30:35,200
like aws lambdas or azure functions or

00:30:32,240 --> 00:30:37,360
google functions or netlify functions

00:30:35,200 --> 00:30:38,480
functions as a service automatically

00:30:37,360 --> 00:30:40,640
scale to

00:30:38,480 --> 00:30:42,480
meet demand and you pay for only what

00:30:40,640 --> 00:30:45,200
you use much like a

00:30:42,480 --> 00:30:45,200
a cdn

00:30:45,840 --> 00:30:50,320
taking the jam stack approach to

00:30:48,240 --> 00:30:53,760
decouple your front end

00:30:50,320 --> 00:30:56,240
javascript apis markup and create a

00:30:53,760 --> 00:30:58,080
predictable and confidence building

00:30:56,240 --> 00:31:01,840
continuous integration

00:30:58,080 --> 00:31:04,399
deployment process leveraging those

00:31:01,840 --> 00:31:05,120
those third-party apis where that makes

00:31:04,399 --> 00:31:09,039
sense

00:31:05,120 --> 00:31:12,240
your dev teams are free to focus

00:31:09,039 --> 00:31:13,600
intensely on building features instead

00:31:12,240 --> 00:31:16,960
of maintaining

00:31:13,600 --> 00:31:18,799
a monolithic app or cms or managing

00:31:16,960 --> 00:31:21,760
infrastructure fighting

00:31:18,799 --> 00:31:22,320
complexity and a multitude of challenges

00:31:21,760 --> 00:31:24,720
that

00:31:22,320 --> 00:31:26,799
rise from building server-side

00:31:24,720 --> 00:31:29,360
applications

00:31:26,799 --> 00:31:29,840
there are a lot of challenges to be made

00:31:29,360 --> 00:31:32,880
you know

00:31:29,840 --> 00:31:35,760
choices to be made on designing a

00:31:32,880 --> 00:31:36,640
jam stack application that fits your

00:31:35,760 --> 00:31:39,039
needs

00:31:36,640 --> 00:31:40,320
but the overall architecture is

00:31:39,039 --> 00:31:44,480
incredibly

00:31:40,320 --> 00:31:47,760
liberating back end developers can

00:31:44,480 --> 00:31:49,519
actually focus on building apis and

00:31:47,760 --> 00:31:51,360
services

00:31:49,519 --> 00:31:53,519
front-end developers can focus on the

00:31:51,360 --> 00:31:56,799
design and the experience

00:31:53,519 --> 00:31:57,440
how much time and effort do your web

00:31:56,799 --> 00:32:00,399
teams

00:31:57,440 --> 00:32:02,080
spend building and managing

00:32:00,399 --> 00:32:04,720
infrastructure

00:32:02,080 --> 00:32:05,440
deployments database migrations

00:32:04,720 --> 00:32:08,320
monitoring

00:32:05,440 --> 00:32:09,039
provisioning servers and networks load

00:32:08,320 --> 00:32:12,320
balancers

00:32:09,039 --> 00:32:16,000
caching just copying files around

00:32:12,320 --> 00:32:18,880
you are you still using ftp

00:32:16,000 --> 00:32:21,200
managing secrets config files keeping

00:32:18,880 --> 00:32:24,559
environments updated

00:32:21,200 --> 00:32:27,279
backups and logging

00:32:24,559 --> 00:32:29,200
managing infrastructure versus building

00:32:27,279 --> 00:32:30,880
real features that bring value to your

00:32:29,200 --> 00:32:34,240
customers

00:32:30,880 --> 00:32:36,880
you know the more that you can take

00:32:34,240 --> 00:32:38,640
off of that burden away from your

00:32:36,880 --> 00:32:40,000
developers the better so that they can

00:32:38,640 --> 00:32:45,039
really focus

00:32:40,000 --> 00:32:45,039
on building features that provide value

00:32:46,080 --> 00:32:49,200
uh since becoming a fan of the jam stack

00:32:48,480 --> 00:32:52,320
approach

00:32:49,200 --> 00:32:55,039
i've speculated on what my past

00:32:52,320 --> 00:32:55,440
projects would have been like if i had

00:32:55,039 --> 00:32:58,399
had

00:32:55,440 --> 00:32:59,600
access to the same technologies that we

00:32:58,399 --> 00:33:02,399
have today

00:32:59,600 --> 00:33:04,559
knowing what i know now what would i do

00:33:02,399 --> 00:33:08,480
different

00:33:04,559 --> 00:33:12,240
well around 2011 i joined a startup

00:33:08,480 --> 00:33:14,960
where we were building a content

00:33:12,240 --> 00:33:16,799
management type system it was a social

00:33:14,960 --> 00:33:20,159
network system for

00:33:16,799 --> 00:33:23,360
white labeled media galleries and

00:33:20,159 --> 00:33:24,159
and so forth for tv news stations and

00:33:23,360 --> 00:33:27,440
newspaper

00:33:24,159 --> 00:33:30,880
and radio and a lot of the

00:33:27,440 --> 00:33:33,360
content that we were that was focused on

00:33:30,880 --> 00:33:34,480
weather related events like storms and

00:33:33,360 --> 00:33:38,640
tornadoes

00:33:34,480 --> 00:33:42,559
and snow floods and other major events

00:33:38,640 --> 00:33:45,519
in that in that media's community

00:33:42,559 --> 00:33:46,559
and the vast majority of our traffic for

00:33:45,519 --> 00:33:49,600
this application

00:33:46,559 --> 00:33:50,559
came from folks just browsing and

00:33:49,600 --> 00:33:53,120
searching

00:33:50,559 --> 00:33:53,919
the media galleries serving that content

00:33:53,120 --> 00:33:56,720
was very much

00:33:53,919 --> 00:33:58,399
like that web request walk of shame we

00:33:56,720 --> 00:34:00,880
talked about

00:33:58,399 --> 00:34:02,320
we tried modern technology for the day

00:34:00,880 --> 00:34:04,799
such as nosql

00:34:02,320 --> 00:34:06,000
content databases to minimize the number

00:34:04,799 --> 00:34:10,159
of round trips

00:34:06,000 --> 00:34:12,399
between the browser and the database

00:34:10,159 --> 00:34:14,000
and our servers were co-located in a

00:34:12,399 --> 00:34:16,639
data center roughly in the

00:34:14,000 --> 00:34:17,839
middle of the us so that our customers

00:34:16,639 --> 00:34:20,879
on either coast

00:34:17,839 --> 00:34:24,000
would have equally terrible experiences

00:34:20,879 --> 00:34:27,839
and we gave us what gave us

00:34:24,000 --> 00:34:28,720
the most heartburn were big spikes in

00:34:27,839 --> 00:34:30,399
traffic

00:34:28,720 --> 00:34:33,200
which was usually tied to some

00:34:30,399 --> 00:34:36,399
catastrophic weather event

00:34:33,200 --> 00:34:38,399
so those spikes in demand were as

00:34:36,399 --> 00:34:41,040
unpredictable as

00:34:38,399 --> 00:34:42,000
well the weather a big storm would come

00:34:41,040 --> 00:34:44,240
along and

00:34:42,000 --> 00:34:45,040
through one of our customers area and

00:34:44,240 --> 00:34:47,919
we'd end up

00:34:45,040 --> 00:34:49,119
staying up all day and all night doing

00:34:47,919 --> 00:34:51,040
whatever we could

00:34:49,119 --> 00:34:52,480
to make sure that the system stayed up

00:34:51,040 --> 00:34:55,839
and responsive

00:34:52,480 --> 00:34:56,639
including adding more servers in light

00:34:55,839 --> 00:34:59,200
of what i know

00:34:56,639 --> 00:35:00,480
about jam stack today what would i have

00:34:59,200 --> 00:35:02,800
done differently

00:35:00,480 --> 00:35:04,480
if i were to build this system all over

00:35:02,800 --> 00:35:08,320
again

00:35:04,480 --> 00:35:10,560
well i would make i would make sure

00:35:08,320 --> 00:35:12,880
that everything pretty much everything

00:35:10,560 --> 00:35:14,720
that was served that people could view

00:35:12,880 --> 00:35:16,400
could have been static a series of

00:35:14,720 --> 00:35:18,640
static web pages

00:35:16,400 --> 00:35:20,320
you know we could have created a a

00:35:18,640 --> 00:35:23,200
process where we build

00:35:20,320 --> 00:35:23,680
all those static pages and then push

00:35:23,200 --> 00:35:27,040
them

00:35:23,680 --> 00:35:29,280
to a cdn and

00:35:27,040 --> 00:35:31,119
you know at that point the really the

00:35:29,280 --> 00:35:35,119
only thing that would be

00:35:31,119 --> 00:35:36,320
um using our apis and our servers for

00:35:35,119 --> 00:35:38,800
like compute

00:35:36,320 --> 00:35:39,599
resources would be when someone needed

00:35:38,800 --> 00:35:43,200
to

00:35:39,599 --> 00:35:45,119
upload a piece of media

00:35:43,200 --> 00:35:46,640
you know and taking that and ingesting

00:35:45,119 --> 00:35:48,960
it and then using

00:35:46,640 --> 00:35:50,720
the system that we had built to to

00:35:48,960 --> 00:35:52,240
generate like all the thumbnails and

00:35:50,720 --> 00:35:53,520
previews and all that kind of stuff

00:35:52,240 --> 00:35:56,880
which would trigger

00:35:53,520 --> 00:35:59,440
the build process and start all

00:35:56,880 --> 00:36:00,480
you know the builds all over again and

00:35:59,440 --> 00:36:04,320
produce those

00:36:00,480 --> 00:36:07,119
static assets man

00:36:04,320 --> 00:36:09,280
it would have been so nice not to have

00:36:07,119 --> 00:36:11,760
those kinds of

00:36:09,280 --> 00:36:12,400
you know stressful moments when we

00:36:11,760 --> 00:36:16,880
weren't

00:36:12,400 --> 00:36:16,880
having to watch our servers all the time

00:36:16,960 --> 00:36:21,440
all right so not everyone who

00:36:19,119 --> 00:36:25,280
contributes to an application

00:36:21,440 --> 00:36:27,440
are developers you have probably content

00:36:25,280 --> 00:36:29,520
creators technical writers

00:36:27,440 --> 00:36:31,200
marketing people and other contributors

00:36:29,520 --> 00:36:34,160
who are more comfortable

00:36:31,200 --> 00:36:35,680
using a content management system well

00:36:34,160 --> 00:36:38,960
there's a whole new market

00:36:35,680 --> 00:36:42,079
of cms tools that have emerged that fit

00:36:38,960 --> 00:36:44,160
perfectly with jam stack these content

00:36:42,079 --> 00:36:46,480
tools are decoupled

00:36:44,160 --> 00:36:48,560
from the presentation of that content

00:36:46,480 --> 00:36:51,920
your content creators

00:36:48,560 --> 00:36:53,440
can manage content separately from the

00:36:51,920 --> 00:36:56,960
website itself

00:36:53,440 --> 00:37:01,119
these headless cmss fall under

00:36:56,960 --> 00:37:04,880
two major categories there's get based

00:37:01,119 --> 00:37:06,480
which are things like netlify cms or

00:37:04,880 --> 00:37:09,760
forestry or tina

00:37:06,480 --> 00:37:12,880
cms and these generally

00:37:09,760 --> 00:37:15,760
generate markdown and transparently

00:37:12,880 --> 00:37:16,480
behind the scenes commit changes to the

00:37:15,760 --> 00:37:19,280
same

00:37:16,480 --> 00:37:19,920
get repository where the application

00:37:19,280 --> 00:37:23,599
project

00:37:19,920 --> 00:37:26,720
lives so every time you know a content

00:37:23,599 --> 00:37:30,160
creator or marketing person or whoever

00:37:26,720 --> 00:37:32,320
is generating content saves a page

00:37:30,160 --> 00:37:34,079
saves some content it gets pushed to

00:37:32,320 --> 00:37:37,680
your git repository and which

00:37:34,079 --> 00:37:41,040
can kick off a build process either for

00:37:37,680 --> 00:37:44,800
staging or or whatever your cycle

00:37:41,040 --> 00:37:47,920
may look like and then there's api based

00:37:44,800 --> 00:37:51,839
cmss and these can be things like

00:37:47,920 --> 00:37:55,359
contentful sanity ghost strappy

00:37:51,839 --> 00:37:59,359
graph cms so these are designed so that

00:37:55,359 --> 00:38:03,359
during your build process the build tool

00:37:59,359 --> 00:38:06,880
fetches all the content from the cms api

00:38:03,359 --> 00:38:09,440
and uses it to generate all the markup

00:38:06,880 --> 00:38:11,680
so whether you're using a git based or

00:38:09,440 --> 00:38:14,400
api based cms

00:38:11,680 --> 00:38:16,320
any update created by the cms will

00:38:14,400 --> 00:38:18,960
trigger your build process

00:38:16,320 --> 00:38:20,640
and for the appropriate environment and

00:38:18,960 --> 00:38:24,079
staging your production

00:38:20,640 --> 00:38:26,880
based on your workflow

00:38:24,079 --> 00:38:28,960
so the obvious question is where do i

00:38:26,880 --> 00:38:31,520
get started

00:38:28,960 --> 00:38:32,000
well here's an overused quote to help

00:38:31,520 --> 00:38:35,200
motivate

00:38:32,000 --> 00:38:38,720
you right well

00:38:35,200 --> 00:38:40,880
go to my list of resources i've included

00:38:38,720 --> 00:38:42,720
some getting started tutorials covering

00:38:40,880 --> 00:38:45,760
specific technologies

00:38:42,720 --> 00:38:48,880
i've also included a new tutorial

00:38:45,760 --> 00:38:51,200
that i've shown you how i built and

00:38:48,880 --> 00:38:54,640
deployed a serverless functions

00:38:51,200 --> 00:38:54,640
with netlify cms

00:38:55,359 --> 00:39:00,400
choose a static site generator

00:38:57,880 --> 00:39:02,000
staticgen.com can help you which

00:39:00,400 --> 00:39:03,520
you know is also in the list of my

00:39:02,000 --> 00:39:06,480
resources

00:39:03,520 --> 00:39:07,359
most static site generators have great

00:39:06,480 --> 00:39:09,440
getting started

00:39:07,359 --> 00:39:11,280
tutorials including how to easily deploy

00:39:09,440 --> 00:39:14,400
them to a cdn

00:39:11,280 --> 00:39:16,760
and if you need to you might introduce a

00:39:14,400 --> 00:39:20,800
headless cms

00:39:16,760 --> 00:39:24,320
headlesscms.org can help you to identify

00:39:20,800 --> 00:39:26,800
some different tools that you can try

00:39:24,320 --> 00:39:29,839
and again that link is also in my list

00:39:26,800 --> 00:39:29,839
of resources

00:39:30,160 --> 00:39:34,960
what i hope is that you know maybe

00:39:33,280 --> 00:39:37,119
maybe you're like me when you first

00:39:34,960 --> 00:39:38,640
heard me talk about static site

00:39:37,119 --> 00:39:41,040
generators and

00:39:38,640 --> 00:39:42,560
you know creating static files and and

00:39:41,040 --> 00:39:45,359
all this kind of stuff

00:39:42,560 --> 00:39:46,400
you might have been like that sounds

00:39:45,359 --> 00:39:50,320
terrible

00:39:46,400 --> 00:39:53,520
uh you can't get rid of server-side code

00:39:50,320 --> 00:39:54,720
well i hope this talk has got your

00:39:53,520 --> 00:39:56,960
wheels turning

00:39:54,720 --> 00:39:59,839
and maybe if you really think about it

00:39:56,960 --> 00:39:59,839
you might realize

00:40:00,400 --> 00:40:05,440
you know this jam stack idea just might

00:40:03,119 --> 00:40:05,440
work

00:40:05,920 --> 00:40:10,960
i've been thinking a lot about the large

00:40:08,400 --> 00:40:13,200
scale applications that i've worked on

00:40:10,960 --> 00:40:14,000
uh in you know brought to market in the

00:40:13,200 --> 00:40:16,319
past

00:40:14,000 --> 00:40:18,319
and in hindsight i can see that if we

00:40:16,319 --> 00:40:22,000
had taken this approach

00:40:18,319 --> 00:40:24,560
man there is so much headache and

00:40:22,000 --> 00:40:25,839
you know simplification and so much more

00:40:24,560 --> 00:40:29,839
we could have done

00:40:25,839 --> 00:40:32,960
with the the resources that we had

00:40:29,839 --> 00:40:34,319
one last thing i believe those of us in

00:40:32,960 --> 00:40:37,920
technology

00:40:34,319 --> 00:40:39,200
have an incredible opportunity to impact

00:40:37,920 --> 00:40:41,839
our workplaces

00:40:39,200 --> 00:40:43,680
our families our community and the

00:40:41,839 --> 00:40:46,720
entire world

00:40:43,680 --> 00:40:48,480
in positive and meaningful ways through

00:40:46,720 --> 00:40:50,000
through the amazing things that we can

00:40:48,480 --> 00:40:52,720
do with technology

00:40:50,000 --> 00:40:54,000
i hope that you take this information

00:40:52,720 --> 00:40:55,440
that i've given you

00:40:54,000 --> 00:40:58,319
along with the other things that you're

00:40:55,440 --> 00:41:01,359
learning through in this in this event

00:40:58,319 --> 00:41:04,160
and you get out there and

00:41:01,359 --> 00:41:04,160
you be awesome

00:41:05,119 --> 00:41:11,839
thank you very much until next time

00:41:08,800 --> 00:41:12,720
when perhaps we will see each other and

00:41:11,839 --> 00:41:16,319
all things open

00:41:12,720 --> 00:41:16,319
in person soon

00:41:17,920 --> 00:41:21,760
all right thank you david and thank you

00:41:19,680 --> 00:41:25,440
all for attending

00:41:21,760 --> 00:41:28,480
i see one question in the q a there

00:41:25,440 --> 00:41:31,200
david and uh if you want to answer that

00:41:28,480 --> 00:41:31,200
feel free to

00:41:31,680 --> 00:41:35,040
all right i'll just go through the the

00:41:34,480 --> 00:41:49,839
chat

00:41:35,040 --> 00:41:49,839
and and look for for anything

00:42:03,760 --> 00:42:07,599
was the question in the chat or it was

00:42:05,839 --> 00:42:10,960
in the q a

00:42:07,599 --> 00:42:10,960
there's one in the the q a

00:42:11,200 --> 00:42:14,960
i'm sorry you say that again there's

00:42:14,000 --> 00:42:18,240
there's one in the q

00:42:14,960 --> 00:42:20,720
a okay it looks like we just followed up

00:42:18,240 --> 00:42:20,720
with it too

00:42:21,359 --> 00:42:25,520
some reason i'm not seeing the q a i'm

00:42:23,359 --> 00:42:27,119
just seeing the chat

00:42:25,520 --> 00:42:29,680
okay i'll read what it says it says why

00:42:27,119 --> 00:42:30,000
do you count based on the web page is

00:42:29,680 --> 00:42:32,720
the web

00:42:30,000 --> 00:42:34,319
page relevant to the load and then

00:42:32,720 --> 00:42:36,079
follow up with meant by that the web

00:42:34,319 --> 00:42:39,520
page is already rendered the request

00:42:36,079 --> 00:42:39,520
will be handled by the server

00:42:41,760 --> 00:42:46,319
um well if i if i understand the

00:42:45,359 --> 00:42:49,040
question correctly

00:42:46,319 --> 00:42:51,440
the goal is uh if you're delivering

00:42:49,040 --> 00:42:52,720
static content say html css and

00:42:51,440 --> 00:42:54,960
javascript

00:42:52,720 --> 00:42:55,760
it's it's done in such a way that the

00:42:54,960 --> 00:42:58,480
page

00:42:55,760 --> 00:43:00,720
that the initial experience renders

00:42:58,480 --> 00:43:04,079
extremely fast and so

00:43:00,720 --> 00:43:07,680
whoever's visiting that web page

00:43:04,079 --> 00:43:10,640
can see all the the regular content

00:43:07,680 --> 00:43:11,680
almost instantaneously at least

00:43:10,640 --> 00:43:14,160
perceptively that's

00:43:11,680 --> 00:43:15,760
that's the goal is for someone to see a

00:43:14,160 --> 00:43:17,359
web page

00:43:15,760 --> 00:43:20,240
almost as soon as they click on that

00:43:17,359 --> 00:43:23,920
link or or wherever they need to go

00:43:20,240 --> 00:43:27,680
and then um if there's anything that's

00:43:23,920 --> 00:43:31,200
that's personalized for that particular

00:43:27,680 --> 00:43:34,880
visitor you could progressively

00:43:31,200 --> 00:43:38,839
add that information

00:43:34,880 --> 00:43:41,839
to the page through your javascript and

00:43:38,839 --> 00:43:41,839

YouTube URL: https://www.youtube.com/watch?v=21y3TR3jMtw


