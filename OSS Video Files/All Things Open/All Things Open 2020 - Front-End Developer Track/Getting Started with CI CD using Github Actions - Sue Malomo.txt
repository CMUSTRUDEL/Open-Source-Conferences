Title: Getting Started with CI CD using Github Actions - Sue Malomo
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Developer Track
Description: 
	Presented by: Sue Malomo, Happy Cog
Presented at All Things Open 2020 - Front-End Developer Track

Abstract: Take advantage of Github Actions to automate deploying your code. We'll cover the basics of Continuous Integration and Continuous Deployment (CI/CD) and then look at two example projects to get you started.
Captions: 
	00:00:05,520 --> 00:00:08,559
this

00:00:05,839 --> 00:00:09,360
is a very brief overview this is not an

00:00:08,559 --> 00:00:11,920
in-depth

00:00:09,360 --> 00:00:13,759
session uh yesterday i think someone

00:00:11,920 --> 00:00:16,080
gave a workshop that was like three

00:00:13,759 --> 00:00:18,640
different sessions going really

00:00:16,080 --> 00:00:20,160
deep into github actions and all the

00:00:18,640 --> 00:00:23,600
different things that you can do with it

00:00:20,160 --> 00:00:25,039
this is just an introductory session

00:00:23,600 --> 00:00:26,720
just kind of letting you know what's

00:00:25,039 --> 00:00:31,679
available and

00:00:26,720 --> 00:00:34,880
what's out there

00:00:31,679 --> 00:00:38,640
so my name is sue malomo i'm a developer

00:00:34,880 --> 00:00:40,800
at happycog i spoke at all things open

00:00:38,640 --> 00:00:42,000
a couple years ago it's one of my

00:00:40,800 --> 00:00:45,120
favorite conferences

00:00:42,000 --> 00:00:47,039
i'm so excited to be back and i think

00:00:45,120 --> 00:00:47,920
todd and the entire team do such a great

00:00:47,039 --> 00:00:50,559
job and i'm so

00:00:47,920 --> 00:00:52,480
grateful that these types of conferences

00:00:50,559 --> 00:00:55,600
are available

00:00:52,480 --> 00:00:56,160
i've been a developer for a long time

00:00:55,600 --> 00:00:58,160
now

00:00:56,160 --> 00:00:59,280
and i've worked with all different

00:00:58,160 --> 00:01:03,359
technologies

00:00:59,280 --> 00:01:07,200
uh back end front end php laravel

00:01:03,359 --> 00:01:09,680
vue react react native things like that

00:01:07,200 --> 00:01:11,119
i never really spent a lot of time

00:01:09,680 --> 00:01:14,520
thinking about

00:01:11,119 --> 00:01:17,280
the infrastructure managing the git

00:01:14,520 --> 00:01:18,960
repository or the server setup or the

00:01:17,280 --> 00:01:22,799
deployment strategy

00:01:18,960 --> 00:01:26,159
so when i first set up a github action

00:01:22,799 --> 00:01:28,880
uh it was like magic i could focus on

00:01:26,159 --> 00:01:30,000
just writing the code and committing to

00:01:28,880 --> 00:01:32,479
my feature branch

00:01:30,000 --> 00:01:34,400
and merging that into staging and i

00:01:32,479 --> 00:01:35,920
didn't have to think about

00:01:34,400 --> 00:01:37,840
how i'm going to get the files up onto

00:01:35,920 --> 00:01:40,560
the server i'm going to make sure that

00:01:37,840 --> 00:01:42,159
everything runs smoothly

00:01:40,560 --> 00:01:43,840
it was really great and you can focus

00:01:42,159 --> 00:01:47,759
your time and energy

00:01:43,840 --> 00:01:47,759
on writing and improving the code

00:01:48,640 --> 00:01:53,360
so ci cd you hear these terms thrown

00:01:51,680 --> 00:01:56,159
around a lot

00:01:53,360 --> 00:01:59,200
it is continuous integration and

00:01:56,159 --> 00:02:01,280
continuous delivery or deployment

00:01:59,200 --> 00:02:02,880
the part that we're going to focus on is

00:02:01,280 --> 00:02:06,399
the deployment end

00:02:02,880 --> 00:02:07,600
of the ci cd but the continuous

00:02:06,399 --> 00:02:10,239
integration

00:02:07,600 --> 00:02:10,720
is the process of integrating new code

00:02:10,239 --> 00:02:13,840
into

00:02:10,720 --> 00:02:14,480
a shared repository like github and you

00:02:13,840 --> 00:02:16,640
can run

00:02:14,480 --> 00:02:18,640
automated tests to make sure that

00:02:16,640 --> 00:02:21,200
there's no conflicts

00:02:18,640 --> 00:02:22,000
so if you're writing your code pushing

00:02:21,200 --> 00:02:25,040
it into your feature

00:02:22,000 --> 00:02:25,599
branch you merge that into staging you

00:02:25,040 --> 00:02:28,000
can run

00:02:25,599 --> 00:02:29,120
automated tests right there to make sure

00:02:28,000 --> 00:02:32,959
that you catch

00:02:29,120 --> 00:02:36,239
any conflicts or anything that broke

00:02:32,959 --> 00:02:39,840
before it gets pushed to production

00:02:36,239 --> 00:02:42,400
the continuous deployment side

00:02:39,840 --> 00:02:44,400
is the automated deployment of code to

00:02:42,400 --> 00:02:46,400
the server so once you've

00:02:44,400 --> 00:02:47,840
written your new features and you've

00:02:46,400 --> 00:02:48,480
merged it in if you've made sure

00:02:47,840 --> 00:02:52,720
everything

00:02:48,480 --> 00:02:56,879
is working properly you can automate

00:02:52,720 --> 00:02:56,879
the deployment of the code to the server

00:02:58,720 --> 00:03:05,840
and github actions can help automate

00:03:01,840 --> 00:03:08,640
that part of your workflow there are

00:03:05,840 --> 00:03:09,440
thousands of github actions in the

00:03:08,640 --> 00:03:12,800
marketplace

00:03:09,440 --> 00:03:14,400
that you can use in your own workflow

00:03:12,800 --> 00:03:15,920
you can write your own actions you can

00:03:14,400 --> 00:03:17,680
just write the script that you want it

00:03:15,920 --> 00:03:20,959
to run

00:03:17,680 --> 00:03:23,360
so the possibilities are

00:03:20,959 --> 00:03:24,959
pretty much unlimited of what you can do

00:03:23,360 --> 00:03:28,000
with github actions

00:03:24,959 --> 00:03:29,440
uh you have an event and you have an

00:03:28,000 --> 00:03:32,319
action that is triggered

00:03:29,440 --> 00:03:33,440
so the event could be anything from

00:03:32,319 --> 00:03:36,480
pushing a commit

00:03:33,440 --> 00:03:36,959
to a specific branch and the action

00:03:36,480 --> 00:03:41,040
could be

00:03:36,959 --> 00:03:44,879
running automated tests you could

00:03:41,040 --> 00:03:46,560
have the event be opening a pull request

00:03:44,879 --> 00:03:48,400
and the action could be sending a

00:03:46,560 --> 00:03:50,640
notification to slack

00:03:48,400 --> 00:03:52,159
to let your team know that there's a

00:03:50,640 --> 00:03:54,239
pull request open that needs to be

00:03:52,159 --> 00:03:56,799
reviewed

00:03:54,239 --> 00:03:57,680
when you merge the pull request in you

00:03:56,799 --> 00:04:00,959
could have it

00:03:57,680 --> 00:04:03,040
deploy your code to the server

00:04:00,959 --> 00:04:06,319
either production or staging and we'll

00:04:03,040 --> 00:04:09,439
get into that a little bit later

00:04:06,319 --> 00:04:11,680
if a release is tagged you could have

00:04:09,439 --> 00:04:13,599
the action send out a tweet on your

00:04:11,680 --> 00:04:16,079
behalf to let your customers know that

00:04:13,599 --> 00:04:18,079
there's a new version available

00:04:16,079 --> 00:04:19,600
there's literally thousands and

00:04:18,079 --> 00:04:22,400
thousands of

00:04:19,600 --> 00:04:23,759
actions out there that already somebody

00:04:22,400 --> 00:04:26,160
else already wrote and you can

00:04:23,759 --> 00:04:28,000
use them in your workflow and again you

00:04:26,160 --> 00:04:31,120
can write your own and customize

00:04:28,000 --> 00:04:33,199
your own so the possibilities are

00:04:31,120 --> 00:04:35,759
pretty much unlimited for what they can

00:04:33,199 --> 00:04:35,759
do for you

00:04:37,360 --> 00:04:40,639
there's many integrations available you

00:04:39,840 --> 00:04:44,080
can use

00:04:40,639 --> 00:04:47,440
docker and aws azure

00:04:44,080 --> 00:04:48,800
google cloud cloudflare is one of the

00:04:47,440 --> 00:04:50,560
examples we're going to take a look at

00:04:48,800 --> 00:04:55,120
today

00:04:50,560 --> 00:04:59,120
you can run your code on windows

00:04:55,120 --> 00:05:00,240
linux mac os you can have it integrated

00:04:59,120 --> 00:05:04,320
with jira or

00:05:00,240 --> 00:05:06,720
sentry jenkins there's a lot of

00:05:04,320 --> 00:05:11,840
different possibilities here

00:05:06,720 --> 00:05:11,840
that are available to you

00:05:12,000 --> 00:05:15,440
so getting started with github actions

00:05:14,320 --> 00:05:19,080
you're going to

00:05:15,440 --> 00:05:21,600
create a yaml file under

00:05:19,080 --> 00:05:23,199
directory.github and workflows

00:05:21,600 --> 00:05:24,720
directory that's where it will look for

00:05:23,199 --> 00:05:26,080
them

00:05:24,720 --> 00:05:28,240
and the first thing you need to do is

00:05:26,080 --> 00:05:31,199
decide what event

00:05:28,240 --> 00:05:32,320
you want to trigger this workflow again

00:05:31,199 --> 00:05:35,680
it could be

00:05:32,320 --> 00:05:38,479
pushing a commit to a particular branch

00:05:35,680 --> 00:05:39,919
it could be tagging a release it could

00:05:38,479 --> 00:05:43,120
be something like

00:05:39,919 --> 00:05:46,479
opening a new issue in the repository or

00:05:43,120 --> 00:05:49,280
someone commented on an issue

00:05:46,479 --> 00:05:50,400
you just decide which event will trigger

00:05:49,280 --> 00:05:52,800
the workflow

00:05:50,400 --> 00:05:55,600
i can also be a scheduled event sort of

00:05:52,800 --> 00:05:57,680
like a cron job

00:05:55,600 --> 00:05:59,280
then you're going to create a job and

00:05:57,680 --> 00:06:00,160
you're going to specify the runner

00:05:59,280 --> 00:06:03,120
environment

00:06:00,160 --> 00:06:04,720
you can do self-hosted runners but you

00:06:03,120 --> 00:06:08,160
can also have it run on

00:06:04,720 --> 00:06:11,759
like i mentioned windows linux

00:06:08,160 --> 00:06:13,120
or mac and then you're going to list out

00:06:11,759 --> 00:06:16,080
the steps of the job

00:06:13,120 --> 00:06:17,440
you can have multiple steps and you're

00:06:16,080 --> 00:06:19,199
going to include any

00:06:17,440 --> 00:06:20,720
third-party actions that you're going to

00:06:19,199 --> 00:06:23,840
use

00:06:20,720 --> 00:06:27,280
you can include environment variables

00:06:23,840 --> 00:06:27,680
and you can have sensitive data like

00:06:27,280 --> 00:06:30,479
your

00:06:27,680 --> 00:06:31,759
api keys or any security tokens or

00:06:30,479 --> 00:06:35,600
passwords

00:06:31,759 --> 00:06:38,639
those can be stored as github secrets

00:06:35,600 --> 00:06:43,440
and you can pull those in as needed

00:06:38,639 --> 00:06:43,440
you can also have conditionals so

00:06:43,520 --> 00:06:48,000
only run this step if this condition is

00:06:47,039 --> 00:06:49,440
met

00:06:48,000 --> 00:06:51,120
which is really helpful and we'll use

00:06:49,440 --> 00:06:53,840
that in our

00:06:51,120 --> 00:06:53,840
first example

00:06:54,720 --> 00:07:02,240
so this is a basic

00:06:57,919 --> 00:07:05,759
deploy script for deploying a react site

00:07:02,240 --> 00:07:05,759
with cloudflare workers

00:07:06,000 --> 00:07:10,319
so right at the top we've given our yaml

00:07:08,639 --> 00:07:13,759
file a name

00:07:10,319 --> 00:07:15,199
and we decided the event that was going

00:07:13,759 --> 00:07:19,039
to trigger this

00:07:15,199 --> 00:07:22,400
is when something is pushed

00:07:19,039 --> 00:07:24,160
to either production or staging

00:07:22,400 --> 00:07:25,919
those the only two branches that we care

00:07:24,160 --> 00:07:27,599
about for this workflow

00:07:25,919 --> 00:07:29,360
so if a new commit is pushed or

00:07:27,599 --> 00:07:30,319
something is merged into staging or

00:07:29,360 --> 00:07:34,080
production

00:07:30,319 --> 00:07:38,720
then this workflow will be triggered

00:07:34,080 --> 00:07:41,599
our first job is called deploy

00:07:38,720 --> 00:07:43,360
and we are going to run it on the latest

00:07:41,599 --> 00:07:44,960
version of ubuntu

00:07:43,360 --> 00:07:46,879
we don't need anything fancy for this

00:07:44,960 --> 00:07:50,319
particular

00:07:46,879 --> 00:07:53,520
job so we're just going to use ubuntu

00:07:50,319 --> 00:07:54,960
our first step

00:07:53,520 --> 00:07:57,360
is called building the site for

00:07:54,960 --> 00:07:59,599
production we're going to pull in

00:07:57,360 --> 00:08:00,560
this uses line right here we're pulling

00:07:59,599 --> 00:08:02,720
in

00:08:00,560 --> 00:08:03,840
another action called checkout and that

00:08:02,720 --> 00:08:06,639
allows us to check

00:08:03,840 --> 00:08:09,120
out a branch and use that in our

00:08:06,639 --> 00:08:09,120
workflow

00:08:09,759 --> 00:08:12,800
so right here underneath the name we

00:08:11,680 --> 00:08:15,199
have the if

00:08:12,800 --> 00:08:17,280
statement that's our conditional so

00:08:15,199 --> 00:08:20,800
we're only going to run

00:08:17,280 --> 00:08:24,960
this step if the branch that triggered

00:08:20,800 --> 00:08:27,840
this workflow is production

00:08:24,960 --> 00:08:28,160
and that github.ref allows you to refer

00:08:27,840 --> 00:08:31,759
to

00:08:28,160 --> 00:08:35,039
whatever it is that triggered this

00:08:31,759 --> 00:08:38,560
workflow to run it could be a branch

00:08:35,039 --> 00:08:42,320
it could be a tag it could be

00:08:38,560 --> 00:08:44,320
the comment or the issue so github.ref

00:08:42,320 --> 00:08:47,120
will allow you to reference

00:08:44,320 --> 00:08:48,560
whatever it is that triggered this

00:08:47,120 --> 00:08:50,959
workflow

00:08:48,560 --> 00:08:52,000
so if in our case if the branch is

00:08:50,959 --> 00:08:55,360
production

00:08:52,000 --> 00:08:59,360
then we want to run yarn install

00:08:55,360 --> 00:08:59,360
yarn add and yarn build

00:08:59,839 --> 00:09:04,480
our next step is we're going to publish

00:09:02,800 --> 00:09:05,920
that we're going to deploy that code to

00:09:04,480 --> 00:09:07,680
production

00:09:05,920 --> 00:09:09,920
so again we put in the conditional to

00:09:07,680 --> 00:09:12,560
make sure only run this

00:09:09,920 --> 00:09:14,480
if the branch that triggered this was

00:09:12,560 --> 00:09:17,839
production

00:09:14,480 --> 00:09:20,240
we're going to use a third-party action

00:09:17,839 --> 00:09:22,320
from cloudflare we're going to use their

00:09:20,240 --> 00:09:26,080
wrangler action which will actually

00:09:22,320 --> 00:09:26,080
take care of the deploy for us

00:09:26,720 --> 00:09:31,120
and this with statement right here

00:09:28,640 --> 00:09:34,080
allows us to pass along variables

00:09:31,120 --> 00:09:34,800
to the action in this case we're going

00:09:34,080 --> 00:09:37,920
to send

00:09:34,800 --> 00:09:39,920
our api token which is stored in a

00:09:37,920 --> 00:09:41,839
github secret

00:09:39,920 --> 00:09:43,360
we're also going to send along the name

00:09:41,839 --> 00:09:44,399
of the environment that it should be

00:09:43,360 --> 00:09:46,000
deployed to

00:09:44,399 --> 00:09:48,480
and in this case it's going to be

00:09:46,000 --> 00:09:48,480
production

00:09:49,200 --> 00:09:53,279
our next step is very similar to the

00:09:52,240 --> 00:09:55,040
first

00:09:53,279 --> 00:09:56,720
but except we're going to do it for

00:09:55,040 --> 00:09:59,120
sandbox and that's the name of our

00:09:56,720 --> 00:10:02,160
staging environment in this case

00:09:59,120 --> 00:10:04,480
so if the branch was staging

00:10:02,160 --> 00:10:05,519
then we're going to run yarn install

00:10:04,480 --> 00:10:09,519
yarn add

00:10:05,519 --> 00:10:09,519
and yarn build for staging

00:10:10,480 --> 00:10:15,040
the last step we have here is we're

00:10:12,240 --> 00:10:16,959
going to publish to the sandbox

00:10:15,040 --> 00:10:18,800
and again we check if the branch is

00:10:16,959 --> 00:10:22,640
staging we're using

00:10:18,800 --> 00:10:24,959
that same cloudflare wrangler action

00:10:22,640 --> 00:10:27,200
and it got cut off here but we are

00:10:24,959 --> 00:10:28,959
sending the same api token

00:10:27,200 --> 00:10:30,399
and the environment in this case would

00:10:28,959 --> 00:10:34,000
be staging

00:10:30,399 --> 00:10:37,360
or sandbox so that was a very

00:10:34,000 --> 00:10:38,480
simple workflow two different

00:10:37,360 --> 00:10:42,240
conditionals

00:10:38,480 --> 00:10:42,880
and we are building and deploying the

00:10:42,240 --> 00:10:47,839
code

00:10:42,880 --> 00:10:47,839
all in the same workflow

00:10:48,800 --> 00:10:55,440
as it's running you can in github

00:10:52,399 --> 00:10:58,000
look at the log files so while it's

00:10:55,440 --> 00:11:01,279
running you can actually see each step

00:10:58,000 --> 00:11:05,040
being executed and if there's

00:11:01,279 --> 00:11:08,160
any output from those you can view those

00:11:05,040 --> 00:11:11,200
and here this was the output

00:11:08,160 --> 00:11:12,720
from they commit to staging and we know

00:11:11,200 --> 00:11:15,200
that because

00:11:12,720 --> 00:11:16,160
right here these two build site for

00:11:15,200 --> 00:11:18,959
production

00:11:16,160 --> 00:11:21,440
and publish for production were skipped

00:11:18,959 --> 00:11:24,320
because of those conditionals

00:11:21,440 --> 00:11:27,040
you can also see how long each step took

00:11:24,320 --> 00:11:27,040
to execute

00:11:27,120 --> 00:11:31,200
and if any of these steps failed you

00:11:30,000 --> 00:11:34,160
would see a red

00:11:31,200 --> 00:11:35,360
x instead of that check mark and you'd

00:11:34,160 --> 00:11:37,360
be able to click on this

00:11:35,360 --> 00:11:38,880
and get the details of that particular

00:11:37,360 --> 00:11:39,760
step so you can see exactly what

00:11:38,880 --> 00:11:43,839
happened

00:11:39,760 --> 00:11:43,839
what the failed step was

00:11:47,120 --> 00:11:50,959
the next example we're going to look at

00:11:48,800 --> 00:11:52,240
is a little bit more complex

00:11:50,959 --> 00:11:54,320
so we're going to take a step back from

00:11:52,240 --> 00:11:56,639
github actions for just a minute

00:11:54,320 --> 00:11:58,320
and uh we're gonna talk about deploying

00:11:56,639 --> 00:12:01,839
a react native app

00:11:58,320 --> 00:12:03,920
if anyone's ever worked with the apple

00:12:01,839 --> 00:12:06,000
app store or the google play store

00:12:03,920 --> 00:12:08,000
um to deploy an app before you know that

00:12:06,000 --> 00:12:11,440
it's not quite just as simple

00:12:08,000 --> 00:12:14,800
as getting your code onto a server

00:12:11,440 --> 00:12:18,240
and knowing that it's available for

00:12:14,800 --> 00:12:19,360
um for everyone to see so there's a

00:12:18,240 --> 00:12:22,639
couple pain points

00:12:19,360 --> 00:12:25,120
um one of which being managing

00:12:22,639 --> 00:12:27,040
your certificates for the app store you

00:12:25,120 --> 00:12:28,720
have a limited number of distribution

00:12:27,040 --> 00:12:32,160
certificates available

00:12:28,720 --> 00:12:35,360
so if you're working with a team and you

00:12:32,160 --> 00:12:36,480
onboard a new developer you may end up

00:12:35,360 --> 00:12:38,560
having to revoke

00:12:36,480 --> 00:12:40,639
someone else's certificate so that they

00:12:38,560 --> 00:12:44,160
can build and distribute

00:12:40,639 --> 00:12:45,519
your app to the app store there can

00:12:44,160 --> 00:12:46,320
sometimes be conflicts when you're

00:12:45,519 --> 00:12:47,680
building

00:12:46,320 --> 00:12:50,000
on different environments when you're

00:12:47,680 --> 00:12:53,519
working on a team

00:12:50,000 --> 00:12:55,200
building an app for ios

00:12:53,519 --> 00:12:56,800
it's very dependent on the version of

00:12:55,200 --> 00:13:00,079
xcode so

00:12:56,800 --> 00:13:01,200
if i upgrade to the latest version of

00:13:00,079 --> 00:13:05,120
xcode

00:13:01,200 --> 00:13:05,120
and i build the app for production

00:13:05,200 --> 00:13:09,279
sometimes another developer on the team

00:13:07,279 --> 00:13:12,320
who hasn't upgraded to xcode

00:13:09,279 --> 00:13:15,200
won't be able to build it so

00:13:12,320 --> 00:13:15,600
a couple different pain points there

00:13:15,200 --> 00:13:18,560
there

00:13:15,600 --> 00:13:19,440
is an open source set of tools called

00:13:18,560 --> 00:13:22,079
fastlane

00:13:19,440 --> 00:13:22,720
which helps automate the build and

00:13:22,079 --> 00:13:26,639
deploy

00:13:22,720 --> 00:13:29,600
deploy process for ios and android apps

00:13:26,639 --> 00:13:31,120
it's a great set of tools and it's open

00:13:29,600 --> 00:13:34,959
source like i said so

00:13:31,120 --> 00:13:35,279
just a fantastic set of functionality

00:13:34,959 --> 00:13:37,440
that

00:13:35,279 --> 00:13:39,600
is constantly being updated and added to

00:13:37,440 --> 00:13:40,639
and new integrations and we'll take a

00:13:39,600 --> 00:13:43,040
deeper look at that

00:13:40,639 --> 00:13:44,160
a little bit later but one of their

00:13:43,040 --> 00:13:46,959
features

00:13:44,160 --> 00:13:48,160
is called fastlane match and that allows

00:13:46,959 --> 00:13:50,800
us to use

00:13:48,160 --> 00:13:51,920
a shared developer certificate for the

00:13:50,800 --> 00:13:54,320
ios build

00:13:51,920 --> 00:13:55,680
so we don't have to worry about how many

00:13:54,320 --> 00:13:57,040
developers are on the team

00:13:55,680 --> 00:13:58,880
and making sure that everybody's

00:13:57,040 --> 00:14:01,839
certificate is up to date

00:13:58,880 --> 00:14:02,720
you can use one shared developer

00:14:01,839 --> 00:14:04,560
certificate

00:14:02,720 --> 00:14:05,760
and it gets stored in a private

00:14:04,560 --> 00:14:09,120
repository

00:14:05,760 --> 00:14:12,000
that we can then pull in and use

00:14:09,120 --> 00:14:12,000
during our workflow

00:14:12,800 --> 00:14:19,120
vaseline also has what they call lanes

00:14:16,240 --> 00:14:20,079
where you list out the actions or the

00:14:19,120 --> 00:14:22,639
steps

00:14:20,079 --> 00:14:24,639
that you want it to take as it builds

00:14:22,639 --> 00:14:27,360
your app

00:14:24,639 --> 00:14:27,920
and again any sensitive data like api

00:14:27,360 --> 00:14:31,680
keys

00:14:27,920 --> 00:14:34,079
passwords that private repository

00:14:31,680 --> 00:14:35,600
those can be stored as github secrets

00:14:34,079 --> 00:14:38,320
and we can use those

00:14:35,600 --> 00:14:38,320
in the workflow

00:14:41,120 --> 00:14:48,079
so once you have fastlane installed

00:14:45,040 --> 00:14:51,600
you want to set up fastlane match

00:14:48,079 --> 00:14:53,600
and it helps with code signing

00:14:51,600 --> 00:14:54,800
they have a whole section on their site

00:14:53,600 --> 00:14:58,560
documenting

00:14:54,800 --> 00:15:00,720
process and helping you troubleshoot

00:14:58,560 --> 00:15:02,800
what might have gone wrong if you're

00:15:00,720 --> 00:15:05,360
running into issues

00:15:02,800 --> 00:15:05,920
but basically you store your private

00:15:05,360 --> 00:15:08,959
keys

00:15:05,920 --> 00:15:10,800
and certificates in a git repo

00:15:08,959 --> 00:15:12,000
and then you can use those across

00:15:10,800 --> 00:15:14,720
multiple machines

00:15:12,000 --> 00:15:16,639
so even if we weren't using github

00:15:14,720 --> 00:15:19,680
actions for the deploy

00:15:16,639 --> 00:15:20,480
this vaseline match allows different

00:15:19,680 --> 00:15:23,600
developers

00:15:20,480 --> 00:15:26,959
on a team to build the app

00:15:23,600 --> 00:15:29,360
using that shared repository

00:15:26,959 --> 00:15:30,079
which makes it very easy to onboard new

00:15:29,360 --> 00:15:33,360
developers

00:15:30,079 --> 00:15:36,720
and help set up mac uh new mac

00:15:33,360 --> 00:15:37,199
machines um it's secure it's a private

00:15:36,720 --> 00:15:39,199
repo

00:15:37,199 --> 00:15:40,639
so if everybody on your team has access

00:15:39,199 --> 00:15:41,839
to that prior repo

00:15:40,639 --> 00:15:44,399
they then have access to that

00:15:41,839 --> 00:15:44,399
certificate

00:15:47,680 --> 00:15:51,360
we're going to take a look at using

00:15:49,600 --> 00:15:54,320
fastlane for ios

00:15:51,360 --> 00:15:54,880
in these examples it's also available

00:15:54,320 --> 00:15:58,079
for

00:15:54,880 --> 00:16:00,000
android and they have separate

00:15:58,079 --> 00:16:02,000
documentation for both sides

00:16:00,000 --> 00:16:04,160
the one we're going to look at today is

00:16:02,000 --> 00:16:06,880
for ios

00:16:04,160 --> 00:16:08,079
and this is in fastlane i mentioned they

00:16:06,880 --> 00:16:11,519
have what they call

00:16:08,079 --> 00:16:15,920
lanes and you can use it to

00:16:11,519 --> 00:16:18,639
do um any number of things with your app

00:16:15,920 --> 00:16:19,839
um in this example we have a lane called

00:16:18,639 --> 00:16:22,560
release

00:16:19,839 --> 00:16:23,519
and you can have it automate capturing

00:16:22,560 --> 00:16:25,120
screenshots

00:16:23,519 --> 00:16:26,800
so that they can be uploaded to the app

00:16:25,120 --> 00:16:30,480
store

00:16:26,800 --> 00:16:30,480
we're going to do our code signing

00:16:30,560 --> 00:16:37,440
building the app you can send it

00:16:34,800 --> 00:16:38,240
which scheme you want to use in xcode if

00:16:37,440 --> 00:16:42,800
you have one

00:16:38,240 --> 00:16:44,480
for release one for debugging

00:16:42,800 --> 00:16:46,880
you can tell it right there which scheme

00:16:44,480 --> 00:16:48,959
to use when building

00:16:46,880 --> 00:16:51,680
then you can have it upload to the app

00:16:48,959 --> 00:16:54,639
store automatically

00:16:51,680 --> 00:16:56,320
and then in this example they have a

00:16:54,639 --> 00:16:58,399
slack message

00:16:56,320 --> 00:17:02,079
successfully uploaded a new app store

00:16:58,399 --> 00:17:02,079
built so that's all within

00:17:02,839 --> 00:17:09,679
vaseline

00:17:05,679 --> 00:17:12,000
looking at the github workflow for this

00:17:09,679 --> 00:17:13,520
again we're only looking at building for

00:17:12,000 --> 00:17:16,880
ios right now

00:17:13,520 --> 00:17:20,240
so we have a build ios yaml file

00:17:16,880 --> 00:17:21,520
and in this example instead of pushing

00:17:20,240 --> 00:17:24,400
to a branch

00:17:21,520 --> 00:17:24,959
as the trigger we're going to use a new

00:17:24,400 --> 00:17:27,280
tag

00:17:24,959 --> 00:17:28,079
was created so basically a new version

00:17:27,280 --> 00:17:30,640
of the app

00:17:28,079 --> 00:17:31,360
we tag that release and that will

00:17:30,640 --> 00:17:34,480
trigger

00:17:31,360 --> 00:17:34,480
this github workflow

00:17:34,640 --> 00:17:37,840
when you're building an ios app it needs

00:17:37,200 --> 00:17:40,799
to run

00:17:37,840 --> 00:17:41,760
on a mac so we're going to specify mac

00:17:40,799 --> 00:17:44,840
os

00:17:41,760 --> 00:17:46,320
10.15 as the runner that we're going to

00:17:44,840 --> 00:17:47,919
use

00:17:46,320 --> 00:17:49,760
and our first step is we're going to

00:17:47,919 --> 00:17:52,000
trigger a notification to slack

00:17:49,760 --> 00:17:54,720
when this workflow starts the build

00:17:52,000 --> 00:17:57,039
process and upload process can take

00:17:54,720 --> 00:17:58,080
upwards of an hour so we'll send a

00:17:57,039 --> 00:18:00,559
notification to

00:17:58,080 --> 00:18:01,600
a slack channel and that will just let

00:18:00,559 --> 00:18:04,720
everybody know

00:18:01,600 --> 00:18:07,919
we've started the workflow and then

00:18:04,720 --> 00:18:07,919
we can keep an eye on it

00:18:08,720 --> 00:18:15,679
and in here with the

00:18:12,160 --> 00:18:18,640
github action slack notify we're

00:18:15,679 --> 00:18:19,200
using that from the marketplace we send

00:18:18,640 --> 00:18:21,360
it

00:18:19,200 --> 00:18:22,400
the name of the channel that we want to

00:18:21,360 --> 00:18:25,679
use

00:18:22,400 --> 00:18:28,480
a status a color and

00:18:25,679 --> 00:18:29,840
in our environment we're sending over

00:18:28,480 --> 00:18:32,000
our

00:18:29,840 --> 00:18:34,799
slackbot token which is stored in a

00:18:32,000 --> 00:18:34,799
github secret

00:18:36,640 --> 00:18:40,240
continuing in the same workflow file

00:18:39,600 --> 00:18:43,520
we're going to

00:18:40,240 --> 00:18:45,760
pull in that checkout action

00:18:43,520 --> 00:18:46,880
and the first step we're going to do is

00:18:45,760 --> 00:18:49,120
log the different

00:18:46,880 --> 00:18:50,720
runner software versions so this will

00:18:49,120 --> 00:18:52,559
help us

00:18:50,720 --> 00:18:54,160
in the log files if something goes wrong

00:18:52,559 --> 00:18:55,600
we know exactly which version that we're

00:18:54,160 --> 00:18:59,120
working with and we can

00:18:55,600 --> 00:19:02,160
make sure that that's not an issue so we

00:18:59,120 --> 00:19:05,360
log out the versions of

00:19:02,160 --> 00:19:08,400
what we're using on the runner and then

00:19:05,360 --> 00:19:09,200
we set up those ssh keys and the known

00:19:08,400 --> 00:19:13,840
hosts

00:19:09,200 --> 00:19:15,600
and that allows us to use that shared

00:19:13,840 --> 00:19:18,160
private repository for the shared

00:19:15,600 --> 00:19:18,160
certificate

00:19:18,400 --> 00:19:22,559
this part was probably one of the

00:19:20,640 --> 00:19:25,919
trickiest parts when setting up

00:19:22,559 --> 00:19:28,960
the workflow getting that

00:19:25,919 --> 00:19:29,679
ssh and the private key getting all that

00:19:28,960 --> 00:19:33,120
working

00:19:29,679 --> 00:19:33,120
and adding it to the known host

00:19:33,280 --> 00:19:39,520
so plenty of documentation out there

00:19:35,919 --> 00:19:42,880
lots of tutorials and things like that

00:19:39,520 --> 00:19:45,919
for using fastlane match the shared repo

00:19:42,880 --> 00:19:45,919
and github actions

00:19:48,320 --> 00:19:55,360
and continuing in the same workflow file

00:19:52,080 --> 00:19:57,840
we are caching as much as we can

00:19:55,360 --> 00:19:58,559
in this workflow um to try to speed it

00:19:57,840 --> 00:20:00,720
up

00:19:58,559 --> 00:20:03,039
and just reduce the amount of time that

00:20:00,720 --> 00:20:05,120
this needs to run

00:20:03,039 --> 00:20:08,000
so first thing we do is cache the yarn

00:20:05,120 --> 00:20:12,720
dependencies

00:20:08,000 --> 00:20:16,960
then we cache cocoapods and the xcode

00:20:12,720 --> 00:20:19,120
derived data and you'll see through here

00:20:16,960 --> 00:20:21,919
the runner os these are all github

00:20:19,120 --> 00:20:25,280
variables that we can pass in

00:20:21,919 --> 00:20:25,280
and use in our workflow

00:20:29,679 --> 00:20:37,679
next up we have the actual fastlane

00:20:34,080 --> 00:20:38,480
step and we specify all our different

00:20:37,679 --> 00:20:41,760
variables

00:20:38,480 --> 00:20:45,280
that can be used we have our

00:20:41,760 --> 00:20:47,039
ssh the match repo which contains that

00:20:45,280 --> 00:20:50,480
shared certificate

00:20:47,039 --> 00:20:53,760
our password apple id

00:20:50,480 --> 00:20:56,559
team id or fastlane user

00:20:53,760 --> 00:20:58,720
the fastlane session so that it can use

00:20:56,559 --> 00:21:01,520
the

00:20:58,720 --> 00:21:02,559
certificate that we've already set up

00:21:01,520 --> 00:21:04,559
and we have an apple

00:21:02,559 --> 00:21:06,320
application specific password that we'll

00:21:04,559 --> 00:21:09,440
use when

00:21:06,320 --> 00:21:11,760
uploading this to the app store

00:21:09,440 --> 00:21:13,760
these things are all stored in github

00:21:11,760 --> 00:21:17,039
secrets so it's a secure way

00:21:13,760 --> 00:21:18,080
of making sure that your workflow has

00:21:17,039 --> 00:21:19,840
access

00:21:18,080 --> 00:21:23,360
to these values without putting them

00:21:19,840 --> 00:21:23,360
into a repository directly

00:21:24,240 --> 00:21:27,360
and the only thing that gets run here is

00:21:26,080 --> 00:21:30,400
this last line

00:21:27,360 --> 00:21:34,159
fastlane beta and that is in

00:21:30,400 --> 00:21:35,520
our fastlane file and that's in the ios

00:21:34,159 --> 00:21:38,559
directory

00:21:35,520 --> 00:21:40,000
so this workflow we set up all of our

00:21:38,559 --> 00:21:42,320
variables

00:21:40,000 --> 00:21:44,000
we tell it the working directory should

00:21:42,320 --> 00:21:46,720
be in the ios

00:21:44,000 --> 00:21:49,600
directory and then we run fastlane beta

00:21:46,720 --> 00:21:52,159
and fastlane takes over from here

00:21:49,600 --> 00:21:55,039
and the beta is a lane that we set up

00:21:52,159 --> 00:21:55,039
telling it to

00:21:55,120 --> 00:21:59,840
build the app and upload it to the app

00:21:57,039 --> 00:21:59,840
store

00:22:01,679 --> 00:22:08,240
finishing up here we set

00:22:05,360 --> 00:22:08,960
up a if the workflow fails for any

00:22:08,240 --> 00:22:11,039
reason

00:22:08,960 --> 00:22:12,480
we'll send a failed notification to

00:22:11,039 --> 00:22:16,159
slack

00:22:12,480 --> 00:22:18,480
and again we're passing through

00:22:16,159 --> 00:22:20,000
our slackbot token through a github

00:22:18,480 --> 00:22:22,320
secret

00:22:20,000 --> 00:22:25,120
and if it succeeds we'll send a success

00:22:22,320 --> 00:22:27,919
notification to slack

00:22:25,120 --> 00:22:29,760
we pass through the channels the success

00:22:27,919 --> 00:22:32,480
message

00:22:29,760 --> 00:22:32,480
and our secret

00:22:34,240 --> 00:22:41,919
any questions at this point

00:22:37,679 --> 00:22:44,559
you can put them into the q a

00:22:41,919 --> 00:22:46,400
i see one in the chat will i be sharing

00:22:44,559 --> 00:22:48,720
the slides yes i'll send them

00:22:46,400 --> 00:22:50,320
to all things open and i believe my

00:22:48,720 --> 00:22:52,840
understanding is they're going to make

00:22:50,320 --> 00:22:54,880
all the slides and the recordings

00:22:52,840 --> 00:22:57,919
available after

00:22:54,880 --> 00:22:57,919
the contents

00:23:02,880 --> 00:23:08,799
so just as a summary github actions

00:23:06,240 --> 00:23:10,480
are included in your github account as

00:23:08,799 --> 00:23:12,559
long as it's not

00:23:10,480 --> 00:23:14,799
one of the legacy accounts that where

00:23:12,559 --> 00:23:18,640
you paid per repository

00:23:14,799 --> 00:23:22,480
um you have included uh

00:23:18,640 --> 00:23:25,280
free minutes in um

00:23:22,480 --> 00:23:25,280
any other account

00:23:26,240 --> 00:23:30,880
there are thousands of actions available

00:23:28,960 --> 00:23:32,480
in the marketplace that you can pull in

00:23:30,880 --> 00:23:34,000
and use and we'll take a look at those

00:23:32,480 --> 00:23:37,200
in just a second

00:23:34,000 --> 00:23:39,760
you can also customize your own actions

00:23:37,200 --> 00:23:42,000
just a reminder to manage sensitive data

00:23:39,760 --> 00:23:45,360
like api keys or passwords

00:23:42,000 --> 00:23:48,960
using github secrets and then

00:23:45,360 --> 00:23:49,440
there's a link there to github features

00:23:48,960 --> 00:23:51,840
and

00:23:49,440 --> 00:23:51,840
actions

00:23:57,440 --> 00:24:04,400
okay so this is the

00:24:01,279 --> 00:24:09,600
github actions page like i mentioned

00:24:04,400 --> 00:24:13,039
you get uh public repositories have free

00:24:09,600 --> 00:24:15,520
they call they are charged by minutes

00:24:13,039 --> 00:24:16,480
and that's how long your workflow takes

00:24:15,520 --> 00:24:17,679
to run

00:24:16,480 --> 00:24:20,159
when i mentioned you could see that in

00:24:17,679 --> 00:24:22,320
the log file and this is where the

00:24:20,159 --> 00:24:25,120
importance of caching whenever you can

00:24:22,320 --> 00:24:27,919
comes into play especially when doing an

00:24:25,120 --> 00:24:27,919
xcode build

00:24:28,720 --> 00:24:31,760
so the free accounts you get 2000

00:24:30,559 --> 00:24:35,760
minutes per month

00:24:31,760 --> 00:24:38,159
pro you get 3 000 and those minutes are

00:24:35,760 --> 00:24:39,679
rated differently based on the runner

00:24:38,159 --> 00:24:43,000
that you're using

00:24:39,679 --> 00:24:46,799
so if you're using a linux it's

00:24:43,000 --> 00:24:49,039
0.008 per minute

00:24:46,799 --> 00:24:50,080
windows is a little bit more uh the mac

00:24:49,039 --> 00:24:52,720
os minutes

00:24:50,080 --> 00:24:53,840
are you know 10 times that of a linux

00:24:52,720 --> 00:24:57,679
machine so

00:24:53,840 --> 00:25:00,960
again caching whatever you can can save

00:24:57,679 --> 00:25:04,720
you some minutes and help

00:25:00,960 --> 00:25:06,320
out in your budget if that's an issue

00:25:04,720 --> 00:25:08,159
but for public repositories for open

00:25:06,320 --> 00:25:10,480
source the runners are

00:25:08,159 --> 00:25:10,480
free

00:25:13,600 --> 00:25:19,600
they have a lot of great documentation

00:25:15,919 --> 00:25:19,600
here for github actions

00:25:19,760 --> 00:25:23,039
and they also have

00:25:24,000 --> 00:25:29,440
this is the marketplace that i mentioned

00:25:26,400 --> 00:25:29,440
so it looks like we have

00:25:29,480 --> 00:25:34,480
00:25:31,200 --> 00:25:37,360
actions available

00:25:34,480 --> 00:25:40,080
these are the different categories so

00:25:37,360 --> 00:25:43,600
depending on what you're looking to do

00:25:40,080 --> 00:25:45,039
you can come in here and

00:25:43,600 --> 00:25:47,279
if you want to look at continuous

00:25:45,039 --> 00:25:48,880
integration you can narrow those down

00:25:47,279 --> 00:25:52,799
and take a look

00:25:48,880 --> 00:25:55,200
lots of aws actions available they have

00:25:52,799 --> 00:25:55,200
docker

00:25:55,520 --> 00:25:59,200
azure and

00:25:59,279 --> 00:26:02,880
if you're looking at deployment

00:26:03,200 --> 00:26:06,799
and come over here and see all the

00:26:06,000 --> 00:26:08,720
different

00:26:06,799 --> 00:26:10,080
deployment actions that are available

00:26:08,720 --> 00:26:12,400
for you to use

00:26:10,080 --> 00:26:15,760
um again you can just pull these in just

00:26:12,400 --> 00:26:17,440
like i did with the cloudflare worker

00:26:15,760 --> 00:26:19,120
uh someone else has written it and you

00:26:17,440 --> 00:26:23,039
just you can utilize those

00:26:19,120 --> 00:26:25,919
in your own workflow

00:26:23,039 --> 00:26:27,279
there's also a lot of testing and this

00:26:25,919 --> 00:26:29,279
is one of the areas that

00:26:27,279 --> 00:26:31,120
didn't really get into with this

00:26:29,279 --> 00:26:34,559
particular session

00:26:31,120 --> 00:26:37,520
but part of the continuous integration

00:26:34,559 --> 00:26:38,880
in your workflow there's a lot of

00:26:37,520 --> 00:26:42,000
different

00:26:38,880 --> 00:26:44,480
testing actions that you can pull in

00:26:42,000 --> 00:26:44,480
and use

00:26:47,840 --> 00:26:53,360
looking at their documentation

00:26:51,360 --> 00:26:54,960
they have some great guides here they

00:26:53,360 --> 00:26:58,000
have a quick start

00:26:54,960 --> 00:27:00,480
where they give you a sample workflow

00:26:58,000 --> 00:27:02,000
and you can get up and running pretty

00:27:00,480 --> 00:27:06,320
quickly

00:27:02,000 --> 00:27:09,840
they also have specific guides for

00:27:06,320 --> 00:27:15,120
everything from testing with different

00:27:09,840 --> 00:27:15,120
technologies python java node

00:27:15,279 --> 00:27:18,320
they also have

00:27:18,480 --> 00:27:22,159
managing complex workflows sharing your

00:27:20,640 --> 00:27:25,279
workflows with your organization

00:27:22,159 --> 00:27:29,919
security migrating

00:27:25,279 --> 00:27:29,919
from another cicd platform

00:27:32,080 --> 00:27:35,840
those are some of the guides

00:27:38,720 --> 00:27:43,760
just want to uh i mentioned cloudflare

00:27:41,360 --> 00:27:47,840
workers this is one of the ones that's

00:27:43,760 --> 00:27:51,039
used for deploying that react app

00:27:47,840 --> 00:27:55,360
it's this integrated really seamlessly

00:27:51,039 --> 00:27:58,720
and it's very easy to deploy

00:27:55,360 --> 00:27:58,720
for different environments

00:28:00,559 --> 00:28:03,919
i also mentioned these fastlane tools

00:28:03,440 --> 00:28:07,679
for

00:28:03,919 --> 00:28:10,559
building and releasing mobile apps

00:28:07,679 --> 00:28:13,120
this is a really fantastic resource like

00:28:10,559 --> 00:28:16,240
i mentioned it's open source

00:28:13,120 --> 00:28:19,039
and it really helps simplify the android

00:28:16,240 --> 00:28:20,559
and ios deployment process there's a lot

00:28:19,039 --> 00:28:21,840
of different automations that you can

00:28:20,559 --> 00:28:25,039
take advantage of

00:28:21,840 --> 00:28:29,200
i mentioned automating screenshots

00:28:25,039 --> 00:28:30,399
deploying to your beta testers whether

00:28:29,200 --> 00:28:33,760
you use

00:28:30,399 --> 00:28:36,799
test flight or any of the other

00:28:33,760 --> 00:28:38,640
options that are out there you can also

00:28:36,799 --> 00:28:41,760
deploy to the app store

00:28:38,640 --> 00:28:44,720
and manage any of your data

00:28:41,760 --> 00:28:45,679
for your app publishing a new release

00:28:44,720 --> 00:28:49,120
and like i mentioned

00:28:45,679 --> 00:28:51,279
it manages the code signing for you

00:28:49,120 --> 00:28:53,279
and again they also have some great

00:28:51,279 --> 00:28:56,559
documentation

00:28:53,279 --> 00:28:57,279
great community support so if you're

00:28:56,559 --> 00:29:00,799
doing anything

00:28:57,279 --> 00:29:02,640
with mobile apps i highly recommend

00:29:00,799 --> 00:29:04,240
taking a look at these it makes the

00:29:02,640 --> 00:29:05,039
process especially if you're working on

00:29:04,240 --> 00:29:08,240
a team

00:29:05,039 --> 00:29:13,039
of other developers makes that process

00:29:08,240 --> 00:29:16,799
much much easier

00:29:13,039 --> 00:29:17,279
um let's see a couple questions in the

00:29:16,799 --> 00:29:19,440
chat

00:29:17,279 --> 00:29:21,200
uh how do these github actions compare

00:29:19,440 --> 00:29:23,520
to jenkins pipelines

00:29:21,200 --> 00:29:26,399
are there scenarios when using one is

00:29:23,520 --> 00:29:30,640
better than the other

00:29:26,399 --> 00:29:30,640
excellent question and if we

00:29:30,960 --> 00:29:35,279
go back here to github actions in the

00:29:33,840 --> 00:29:36,480
marketplace

00:29:35,279 --> 00:29:38,480
you'll actually see that it's not

00:29:36,480 --> 00:29:41,520
necessarily

00:29:38,480 --> 00:29:45,120
one or the other um there are some

00:29:41,520 --> 00:29:47,520
actions let's give it a testing filter

00:29:45,120 --> 00:29:48,720
um there are some actions where you can

00:29:47,520 --> 00:29:51,520
integrate

00:29:48,720 --> 00:29:52,399
github workflows with jenkins um so it

00:29:51,520 --> 00:29:55,120
doesn't have to be

00:29:52,399 --> 00:29:56,159
a one or the other and it might depend

00:29:55,120 --> 00:29:59,520
on

00:29:56,159 --> 00:30:01,039
your specific need for your project

00:29:59,520 --> 00:30:03,840
but you can use github actions to

00:30:01,039 --> 00:30:06,080
actually trigger jenkins jobs

00:30:03,840 --> 00:30:09,840
so depending on what you need you've got

00:30:06,080 --> 00:30:09,840
the flexibility there

00:30:17,039 --> 00:30:22,880
any other questions

00:30:20,640 --> 00:30:24,399
brand try that a little bit quickly i'm

00:30:22,880 --> 00:30:28,720
sorry if i spoke too fast

00:30:24,399 --> 00:30:30,880
um but that's all i had to cover for

00:30:28,720 --> 00:30:32,799
today

00:30:30,880 --> 00:30:34,559
um and again i'll have some of these

00:30:32,799 --> 00:30:37,279
links are in the slides so once the

00:30:34,559 --> 00:30:39,440
slides are

00:30:37,279 --> 00:30:41,679
available through all things open you'll

00:30:39,440 --> 00:30:51,840
have access to those but i'll

00:30:41,679 --> 00:30:51,840

YouTube URL: https://www.youtube.com/watch?v=GS9-uJqlyeE


