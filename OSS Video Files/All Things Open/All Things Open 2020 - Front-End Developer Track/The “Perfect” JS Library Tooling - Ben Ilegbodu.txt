Title: The “Perfect” JS Library Tooling - Ben Ilegbodu
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Developer Track
Description: 
	Presented by: Ben Ilegbodu, Stitch Fix
Presented at All Things Open 2020

Abstract: So you have a great idea for the perfect JS library... but the implementation is only half the battle. You also need to configure the infrastructure to develop, test, build and deploy your package. How do you set up Typescript and other static checking? Do you target ESM or CJS builds? Is integration testing even possible? There’s so much extra to consider!

Let’s learn what makes up the “perfect” JS library tooling. Familiarity with developing JavaScript packages will help you get the most out of this session, but you will gain plenty of helpful insights even if you have yet to build one. Oh, and don’t worry if you don’t understand all of those terms — you soon will after this session!
Captions: 
	00:00:05,040 --> 00:00:08,480
all right thank you very much and hello

00:00:07,200 --> 00:00:11,360
everyone

00:00:08,480 --> 00:00:12,639
i am super excited to to be here and

00:00:11,360 --> 00:00:15,440
share a little bit about

00:00:12,639 --> 00:00:16,560
um the perfect library tooling with you

00:00:15,440 --> 00:00:19,439
all

00:00:16,560 --> 00:00:20,400
for javascript so obviously this is very

00:00:19,439 --> 00:00:22,480
subjective

00:00:20,400 --> 00:00:24,000
there are they are naturally my own

00:00:22,480 --> 00:00:26,560
opinions right

00:00:24,000 --> 00:00:28,160
but it's it's basically the talk i would

00:00:26,560 --> 00:00:30,000
have liked to have heard when i was

00:00:28,160 --> 00:00:33,760
starting building libraries

00:00:30,000 --> 00:00:34,079
three four years ago because libraries

00:00:33,760 --> 00:00:36,399
for

00:00:34,079 --> 00:00:38,879
developers have you know different

00:00:36,399 --> 00:00:40,640
concerns than apps that we build for

00:00:38,879 --> 00:00:43,520
users typically

00:00:40,640 --> 00:00:44,239
so these are the learnings that i've

00:00:43,520 --> 00:00:47,440
gotten

00:00:44,239 --> 00:00:50,399
over the years doing tooling type things

00:00:47,440 --> 00:00:52,320
for both open source projects as well as

00:00:50,399 --> 00:00:55,520
at stitch fix and previous

00:00:52,320 --> 00:00:57,360
companies as well and

00:00:55,520 --> 00:00:59,120
also seeing what other people were doing

00:00:57,360 --> 00:01:00,879
right who are more prolific than i am

00:00:59,120 --> 00:01:04,080
and see how they've solved

00:01:00,879 --> 00:01:06,880
this problem so i've already

00:01:04,080 --> 00:01:09,200
tweeted out a link to these slides i

00:01:06,880 --> 00:01:10,159
like to include lots of resources and

00:01:09,200 --> 00:01:11,840
stuff like that

00:01:10,159 --> 00:01:13,520
during my slide so if you go to my

00:01:11,840 --> 00:01:16,720
twitter account ben

00:01:13,520 --> 00:01:20,240
nvp you should see it there or

00:01:16,720 --> 00:01:22,320
you can go to my website benvp.com

00:01:20,240 --> 00:01:23,920
you'll find it there as well and if you

00:01:22,320 --> 00:01:25,680
want to type in that bitly link

00:01:23,920 --> 00:01:26,960
you can also find it there so three

00:01:25,680 --> 00:01:31,040
different places

00:01:26,960 --> 00:01:33,280
uh to find it so as doug mentioned i am

00:01:31,040 --> 00:01:34,320
going to try to take a look at the chat

00:01:33,280 --> 00:01:37,040
as we go

00:01:34,320 --> 00:01:37,360
so feel free to chime in there and you

00:01:37,040 --> 00:01:40,000
know

00:01:37,360 --> 00:01:40,799
say oh ben you're awesome or you know

00:01:40,000 --> 00:01:43,680
whatever

00:01:40,799 --> 00:01:45,520
questions you have as well because i

00:01:43,680 --> 00:01:46,960
can't see you you can see me but i can't

00:01:45,520 --> 00:01:49,200
see you so kind of

00:01:46,960 --> 00:01:50,159
allows me to feel like there are people

00:01:49,200 --> 00:01:53,200
there uh

00:01:50,159 --> 00:01:56,880
you know watching this talk

00:01:53,200 --> 00:01:59,360
so i'll continue on um whenever we're

00:01:56,880 --> 00:02:00,320
talking about you know non-end user

00:01:59,360 --> 00:02:03,600
features like

00:02:00,320 --> 00:02:05,680
tooling we need to ask ourselves like

00:02:03,600 --> 00:02:07,280
what exactly is the benefit of all this

00:02:05,680 --> 00:02:10,319
like does this even matter

00:02:07,280 --> 00:02:11,039
these discussions because if it's not a

00:02:10,319 --> 00:02:13,599
feature

00:02:11,039 --> 00:02:15,520
for the end user then it needs to be a

00:02:13,599 --> 00:02:17,520
feature for the developer

00:02:15,520 --> 00:02:19,760
so that they can build a faster or

00:02:17,520 --> 00:02:21,280
better experience for the end user

00:02:19,760 --> 00:02:22,959
otherwise we find ourselves bike

00:02:21,280 --> 00:02:24,800
shedding right so

00:02:22,959 --> 00:02:26,080
kinsey dodds he wrote this blog post a

00:02:24,800 --> 00:02:28,959
while ago that says

00:02:26,080 --> 00:02:29,840
exactly that like we should measure we

00:02:28,959 --> 00:02:33,760
should always measure

00:02:29,840 --> 00:02:36,480
success based on how well we can deliver

00:02:33,760 --> 00:02:37,360
what the end user wants and our choice

00:02:36,480 --> 00:02:41,120
of tooling

00:02:37,360 --> 00:02:44,319
should be based on that goal and no more

00:02:41,120 --> 00:02:46,560
alright so in this case this kind of

00:02:44,319 --> 00:02:49,599
focus on the user principle

00:02:46,560 --> 00:02:52,800
still applies except that this time

00:02:49,599 --> 00:02:55,280
the user is the developer and the

00:02:52,800 --> 00:02:58,800
libraries that we build will be used by

00:02:55,280 --> 00:03:00,560
other developers so in this talk instead

00:02:58,800 --> 00:03:03,120
of talking about how to

00:03:00,560 --> 00:03:03,680
write the code we're going to focus on

00:03:03,120 --> 00:03:05,760
pretty much

00:03:03,680 --> 00:03:07,840
everything else around the code that

00:03:05,760 --> 00:03:08,640
enables developers to build those user

00:03:07,840 --> 00:03:11,760
experiences

00:03:08,640 --> 00:03:14,400
for our uh library

00:03:11,760 --> 00:03:16,400
so uh before we get into that though can

00:03:14,400 --> 00:03:19,599
i get everyone to stand up

00:03:16,400 --> 00:03:21,040
please stand up so obviously i can't see

00:03:19,599 --> 00:03:24,480
if you're standing up or not

00:03:21,040 --> 00:03:27,280
but what i want to do is do 10 squats

00:03:24,480 --> 00:03:29,120
together just like that right most of

00:03:27,280 --> 00:03:30,720
you are coming from lunch

00:03:29,120 --> 00:03:32,319
and you're going to have this food

00:03:30,720 --> 00:03:33,680
digesting and i don't want you falling

00:03:32,319 --> 00:03:35,280
asleep during this talk

00:03:33,680 --> 00:03:36,959
at all so we're just going to get 10

00:03:35,280 --> 00:03:38,799
squats to get the blood

00:03:36,959 --> 00:03:40,560
uh flowing if you don't want to do it

00:03:38,799 --> 00:03:42,239
that's perfectly fine because i can't

00:03:40,560 --> 00:03:44,080
see you not doing it anyway

00:03:42,239 --> 00:03:45,440
but if you want to join us let's go

00:03:44,080 --> 00:03:47,280
ahead and do it

00:03:45,440 --> 00:03:49,280
all right i'm gonna start you can count

00:03:47,280 --> 00:03:52,480
along too here we go

00:03:49,280 --> 00:03:55,360
one two

00:03:52,480 --> 00:03:56,400
here we go three hopefully i'm not by

00:03:55,360 --> 00:04:00,319
myself

00:03:56,400 --> 00:04:04,799
four five

00:04:00,319 --> 00:04:08,400
six we're almost there seven

00:04:04,799 --> 00:04:11,599
eight isn't this fun yep nine

00:04:08,400 --> 00:04:14,400
and ten awesome

00:04:11,599 --> 00:04:16,720
great job i am believing that at least

00:04:14,400 --> 00:04:20,079
one other person did it with me

00:04:16,720 --> 00:04:22,560
and i wasn't the only one but you know

00:04:20,079 --> 00:04:24,000
oh see okay some people did it great

00:04:22,560 --> 00:04:26,400
that makes me feel

00:04:24,000 --> 00:04:28,000
a lot better so now we've got the blood

00:04:26,400 --> 00:04:31,440
flowing great thanks aaron

00:04:28,000 --> 00:04:33,360
and jessini as well okay

00:04:31,440 --> 00:04:34,720
we got the squats going so let me just

00:04:33,360 --> 00:04:37,759
introduce myself

00:04:34,720 --> 00:04:39,120
formally my name is ben alegbedu i am a

00:04:37,759 --> 00:04:41,680
christian a husband

00:04:39,120 --> 00:04:42,160
and a father this is my family right

00:04:41,680 --> 00:04:44,880
here

00:04:42,160 --> 00:04:47,199
my wife rasheeda we have been married 10

00:04:44,880 --> 00:04:49,759
years as of last month

00:04:47,199 --> 00:04:52,080
and our oldest daughter she's simone she

00:04:49,759 --> 00:04:54,639
is six and a half years old

00:04:52,080 --> 00:04:55,440
our middle daughter avery she just

00:04:54,639 --> 00:04:58,560
turned four

00:04:55,440 --> 00:04:58,960
last month so her birthday likes to you

00:04:58,560 --> 00:05:01,520
know

00:04:58,960 --> 00:05:02,560
take over our anniversaries but that's

00:05:01,520 --> 00:05:05,680
okay

00:05:02,560 --> 00:05:06,720
and then our youngest son asher he is a

00:05:05,680 --> 00:05:09,360
year and a half

00:05:06,720 --> 00:05:10,240
and he always looks like that in photos

00:05:09,360 --> 00:05:13,280
we're still

00:05:10,240 --> 00:05:15,440
you know working on him there anyway we

00:05:13,280 --> 00:05:18,400
live in the san francisco bay area

00:05:15,440 --> 00:05:19,120
in a town called pittsburgh california

00:05:18,400 --> 00:05:22,400
without

00:05:19,120 --> 00:05:25,360
the h so pittsburgh without an h

00:05:22,400 --> 00:05:26,720
i'm also a google developer expert and a

00:05:25,360 --> 00:05:29,759
microsoft mvp

00:05:26,720 --> 00:05:31,759
both in web technologies

00:05:29,759 --> 00:05:33,520
so i am a principal front-end engineer

00:05:31,759 --> 00:05:36,880
at stitch fix

00:05:33,520 --> 00:05:40,160
on in our customer facing organization

00:05:36,880 --> 00:05:40,880
and i work on building our react design

00:05:40,160 --> 00:05:44,080
system or

00:05:40,880 --> 00:05:46,639
component library as well as

00:05:44,080 --> 00:05:49,039
front-end infrastructure to allow other

00:05:46,639 --> 00:05:50,800
developers to focus on their features

00:05:49,039 --> 00:05:52,400
so a lot of what i'm talking about comes

00:05:50,800 --> 00:05:54,320
from the other side of what i

00:05:52,400 --> 00:05:56,560
work on so if you don't know about

00:05:54,320 --> 00:05:58,479
stitch fix just quickly we're an online

00:05:56,560 --> 00:06:01,360
personal styling service

00:05:58,479 --> 00:06:03,120
we take the effort out of shopping by

00:06:01,360 --> 00:06:03,840
providing a selection of clothes that

00:06:03,120 --> 00:06:06,479
are picked

00:06:03,840 --> 00:06:08,319
just for you and it's sent to your door

00:06:06,479 --> 00:06:09,919
on a frequency that you choose

00:06:08,319 --> 00:06:12,160
so the cool thing is that we combine

00:06:09,919 --> 00:06:14,400
technology and data science

00:06:12,160 --> 00:06:15,440
with an actual human stylist to give you

00:06:14,400 --> 00:06:18,240
the best uh

00:06:15,440 --> 00:06:19,600
close and just a you know short pitch

00:06:18,240 --> 00:06:22,400
we're hiring

00:06:19,600 --> 00:06:24,319
in the u.s unfortunately only our

00:06:22,400 --> 00:06:26,479
headquarters is in san francisco

00:06:24,319 --> 00:06:28,319
but obviously everybody's working remote

00:06:26,479 --> 00:06:29,199
and half the engineering was remote even

00:06:28,319 --> 00:06:33,199
before kobit

00:06:29,199 --> 00:06:35,440
so very remote friendly just an fyi

00:06:33,199 --> 00:06:36,800
um thanks for the shout out for my

00:06:35,440 --> 00:06:40,479
family

00:06:36,800 --> 00:06:42,479
okay so enough about me though let's uh

00:06:40,479 --> 00:06:43,759
talk about making this perfect

00:06:42,479 --> 00:06:47,280
javascript library

00:06:43,759 --> 00:06:49,680
right uh so this info that i'm sharing

00:06:47,280 --> 00:06:51,360
it uh applies whether you're working on

00:06:49,680 --> 00:06:53,759
an open source package

00:06:51,360 --> 00:06:55,360
or probably more likely an internal

00:06:53,759 --> 00:06:56,639
package within your company so that

00:06:55,360 --> 00:06:59,680
other repos can share

00:06:56,639 --> 00:07:01,520
common functionality so

00:06:59,680 --> 00:07:03,440
though remember we're shifting the focus

00:07:01,520 --> 00:07:05,919
to what our users need

00:07:03,440 --> 00:07:07,840
the developers and not necessarily what

00:07:05,919 --> 00:07:09,120
we care about okay it's not about us

00:07:07,840 --> 00:07:12,240
it's about them

00:07:09,120 --> 00:07:14,319
and those developers could be um

00:07:12,240 --> 00:07:16,319
you know obviously within your company

00:07:14,319 --> 00:07:18,560
for the internal packages or

00:07:16,319 --> 00:07:19,759
a developer around the world for your

00:07:18,560 --> 00:07:22,880
open source package

00:07:19,759 --> 00:07:25,520
so let's just jump right in

00:07:22,880 --> 00:07:25,919
so the first thing i think i believe you

00:07:25,520 --> 00:07:28,639
need

00:07:25,919 --> 00:07:30,479
is helpful docs right if i want to use

00:07:28,639 --> 00:07:31,280
your package we need helpful docs that

00:07:30,479 --> 00:07:33,759
explain

00:07:31,280 --> 00:07:35,440
how to install the library examples of

00:07:33,759 --> 00:07:38,479
how to use the library

00:07:35,440 --> 00:07:38,960
and then a full api spec once i kind of

00:07:38,479 --> 00:07:41,680
already

00:07:38,960 --> 00:07:43,039
am familiar with using the library so

00:07:41,680 --> 00:07:46,240
then the question for us

00:07:43,039 --> 00:07:49,599
is like what makes helpful docs

00:07:46,240 --> 00:07:50,400
possible right so my suggestion is you

00:07:49,599 --> 00:07:53,599
write the docs

00:07:50,400 --> 00:07:55,440
first before your implementation so it's

00:07:53,599 --> 00:07:56,639
kind of like documentation driven

00:07:55,440 --> 00:08:00,319
development instead of

00:07:56,639 --> 00:08:02,879
test driven development why because

00:08:00,319 --> 00:08:04,639
actually writing good docs is hard if

00:08:02,879 --> 00:08:07,520
you haven't tried before

00:08:04,639 --> 00:08:08,000
so i believe writing docs first makes it

00:08:07,520 --> 00:08:11,360
a bit

00:08:08,000 --> 00:08:13,680
easier so like first we're

00:08:11,360 --> 00:08:14,400
more likely to have cohesive docs if we

00:08:13,680 --> 00:08:17,039
write them

00:08:14,400 --> 00:08:19,039
all at the beginning so the formatting

00:08:17,039 --> 00:08:20,080
inclusion of examples they will all be

00:08:19,039 --> 00:08:23,280
the same

00:08:20,080 --> 00:08:25,520
and then secondly we will write the docs

00:08:23,280 --> 00:08:26,960
when we know about the code the least

00:08:25,520 --> 00:08:29,280
because we haven't written it yet

00:08:26,960 --> 00:08:30,639
so we're more able to put ourselves in

00:08:29,280 --> 00:08:32,560
the shoes of a newcomer

00:08:30,639 --> 00:08:33,839
explain things in more details because

00:08:32,560 --> 00:08:34,479
we're kind of explaining it to our

00:08:33,839 --> 00:08:36,880
future

00:08:34,479 --> 00:08:37,599
self who's about to write it and then

00:08:36,880 --> 00:08:40,479
lastly

00:08:37,599 --> 00:08:41,680
we can get feedback from others before

00:08:40,479 --> 00:08:43,440
the implementation

00:08:41,680 --> 00:08:45,120
so we say hey here are the docs for this

00:08:43,440 --> 00:08:47,760
thing that's going to exist

00:08:45,120 --> 00:08:48,800
what do you think what api should i

00:08:47,760 --> 00:08:51,839
change and stuff

00:08:48,800 --> 00:08:52,720
based upon the docs which are kind of

00:08:51,839 --> 00:08:54,640
like more

00:08:52,720 --> 00:08:56,000
approachable than giving someone an

00:08:54,640 --> 00:08:59,440
implementation spec

00:08:56,000 --> 00:09:00,560
for instance so what sort of docs should

00:08:59,440 --> 00:09:02,399
you write

00:09:00,560 --> 00:09:03,600
well keep in mind that there are at

00:09:02,399 --> 00:09:07,360
least four

00:09:03,600 --> 00:09:10,480
types of docs so there are tutorials

00:09:07,360 --> 00:09:13,600
how-to guides explanations and

00:09:10,480 --> 00:09:17,200
references so to explain

00:09:13,600 --> 00:09:19,920
let me use uh lowdash as an example

00:09:17,200 --> 00:09:22,080
so references would be the traditional

00:09:19,920 --> 00:09:22,800
api docs for lodash when you go to the

00:09:22,080 --> 00:09:25,279
site

00:09:22,800 --> 00:09:26,240
so here are the parameters for the pick

00:09:25,279 --> 00:09:28,480
function

00:09:26,240 --> 00:09:29,440
and it and this is the return value you

00:09:28,480 --> 00:09:31,839
get

00:09:29,440 --> 00:09:33,760
so these are actually great for someone

00:09:31,839 --> 00:09:34,640
who already knows how to use lodash in

00:09:33,760 --> 00:09:36,720
general

00:09:34,640 --> 00:09:38,640
and just needs the details for pick i

00:09:36,720 --> 00:09:41,440
want to know all that i can do

00:09:38,640 --> 00:09:42,480
whereas you have how-to guides which are

00:09:41,440 --> 00:09:44,880
examples

00:09:42,480 --> 00:09:46,480
showing common use cases for low dash

00:09:44,880 --> 00:09:48,480
functions

00:09:46,480 --> 00:09:49,680
these are typically paired with the api

00:09:48,480 --> 00:09:52,000
docs

00:09:49,680 --> 00:09:53,600
and sometimes more complex ones are

00:09:52,000 --> 00:09:55,760
recipes or even

00:09:53,600 --> 00:09:56,640
sample repos of how to use multiple

00:09:55,760 --> 00:10:00,080
functions

00:09:56,640 --> 00:10:03,279
together then you have

00:10:00,080 --> 00:10:06,800
explanations and those are like blogs

00:10:03,279 --> 00:10:09,839
a talk like this maybe videos to explain

00:10:06,800 --> 00:10:14,079
why maybe using lodash

00:10:09,839 --> 00:10:17,360
chain may be a bad idea so they clarify

00:10:14,079 --> 00:10:20,000
or illuminate a particular topic they go

00:10:17,360 --> 00:10:20,959
more in depth than the api docs coverage

00:10:20,000 --> 00:10:22,880
of the topic

00:10:20,959 --> 00:10:25,200
and it's not really suitable for an api

00:10:22,880 --> 00:10:28,240
doc documentation

00:10:25,200 --> 00:10:30,320
and then lastly their tutorials would be

00:10:28,240 --> 00:10:32,079
you know a workshop on lowdash that we

00:10:30,320 --> 00:10:34,800
would find on egghead or

00:10:32,079 --> 00:10:35,839
front end masters or on youtube and

00:10:34,800 --> 00:10:38,240
these are lessons that

00:10:35,839 --> 00:10:39,279
take the reader you know by the hand to

00:10:38,240 --> 00:10:42,000
build an app

00:10:39,279 --> 00:10:43,200
with lodash and these are perfect for

00:10:42,000 --> 00:10:44,160
newcomers who don't even know what

00:10:43,200 --> 00:10:48,560
lowdash is

00:10:44,160 --> 00:10:50,640
right so for your perfect library

00:10:48,560 --> 00:10:51,920
you should have at least references and

00:10:50,640 --> 00:10:56,000
how-to guides

00:10:51,920 --> 00:10:59,279
so that would be api docs and examples

00:10:56,000 --> 00:11:00,079
all right and based on that here is my

00:10:59,279 --> 00:11:03,360
suggestion

00:11:00,079 --> 00:11:06,000
for what the repos readme markdown

00:11:03,360 --> 00:11:07,519
file should look like and in this

00:11:06,000 --> 00:11:10,160
particular order

00:11:07,519 --> 00:11:11,600
so first you can have all the badges you

00:11:10,160 --> 00:11:13,680
can think of at the top

00:11:11,600 --> 00:11:16,000
you know your package version your build

00:11:13,680 --> 00:11:19,600
status number of downloads

00:11:16,000 --> 00:11:21,680
pr is welcome all those little you know

00:11:19,600 --> 00:11:24,000
badges at the top a nice short

00:11:21,680 --> 00:11:26,560
description of the library's purpose

00:11:24,000 --> 00:11:27,360
and then number three installation

00:11:26,560 --> 00:11:29,600
instructions

00:11:27,360 --> 00:11:31,600
including any necessary peer

00:11:29,600 --> 00:11:33,279
dependencies especially

00:11:31,600 --> 00:11:35,120
so don't assume that they already know

00:11:33,279 --> 00:11:35,680
or have installed other things that are

00:11:35,120 --> 00:11:38,320
needed

00:11:35,680 --> 00:11:39,600
mention those and unfortunately we still

00:11:38,320 --> 00:11:42,800
have to include both

00:11:39,600 --> 00:11:44,800
npm and yarn instructions i i saw

00:11:42,800 --> 00:11:45,839
a tweet the other day that asked what

00:11:44,800 --> 00:11:49,200
people are using and

00:11:45,839 --> 00:11:51,519
50 were using or 49 were using npm

00:11:49,200 --> 00:11:52,880
49 were using yarn and then you know the

00:11:51,519 --> 00:11:56,800
other one

00:11:52,880 --> 00:11:58,880
per plus were using something else so

00:11:56,800 --> 00:12:01,519
quick then a quick guide on how to do

00:11:58,880 --> 00:12:04,480
common things within your library

00:12:01,519 --> 00:12:05,440
next and then underneath that full api

00:12:04,480 --> 00:12:07,200
docs

00:12:05,440 --> 00:12:08,480
and these may link to other markdown

00:12:07,200 --> 00:12:11,680
files

00:12:08,480 --> 00:12:14,399
but each function um or configuration

00:12:11,680 --> 00:12:15,440
should include real-world examples like

00:12:14,399 --> 00:12:18,240
this is important

00:12:15,440 --> 00:12:18,959
you know don't use foo and bar because

00:12:18,240 --> 00:12:21,519
they can be

00:12:18,959 --> 00:12:24,320
confusing to newcomers right actual

00:12:21,519 --> 00:12:27,279
examples of how you would use this thing

00:12:24,320 --> 00:12:28,720
then way at the bottom you include the

00:12:27,279 --> 00:12:31,600
technical details

00:12:28,720 --> 00:12:32,480
you know how it's faster the technology

00:12:31,600 --> 00:12:34,959
you used

00:12:32,480 --> 00:12:36,880
why you wanted to create it you know all

00:12:34,959 --> 00:12:37,600
of that stuff i i hate when that stuff

00:12:36,880 --> 00:12:39,760
is at the top

00:12:37,600 --> 00:12:41,760
like i know you care about it as the

00:12:39,760 --> 00:12:44,480
maintainer the creator of the library

00:12:41,760 --> 00:12:45,920
but for me i'm trying to get to the meat

00:12:44,480 --> 00:12:47,200
and potatoes

00:12:45,920 --> 00:12:49,279
and then at the bottom you have your

00:12:47,200 --> 00:12:51,760
contributing guidelines

00:12:49,279 --> 00:12:52,480
a link to contributing that md license

00:12:51,760 --> 00:12:57,680
info

00:12:52,480 --> 00:12:59,440
and such oh before i i forget

00:12:57,680 --> 00:13:01,680
there's there's this package called

00:12:59,440 --> 00:13:04,720
fiddly by sarah vieira

00:13:01,680 --> 00:13:06,959
and it builds static html pages

00:13:04,720 --> 00:13:08,480
from your readme.md like and we'll

00:13:06,959 --> 00:13:11,279
figure all this stuff out

00:13:08,480 --> 00:13:13,040
so now your package can look official if

00:13:11,279 --> 00:13:13,920
you push it to a hosting site like

00:13:13,040 --> 00:13:17,600
netlify

00:13:13,920 --> 00:13:21,279
so something to think about there

00:13:17,600 --> 00:13:23,760
all right so now i have helpful docs

00:13:21,279 --> 00:13:24,480
that you've provided and i can develop

00:13:23,760 --> 00:13:27,760
my app

00:13:24,480 --> 00:13:30,079
using your library but the very

00:13:27,760 --> 00:13:31,200
next thing i'll need to develop against

00:13:30,079 --> 00:13:34,480
your library

00:13:31,200 --> 00:13:35,040
are typescript types so for those who

00:13:34,480 --> 00:13:37,680
don't know

00:13:35,040 --> 00:13:39,760
typescript is a typed superset of

00:13:37,680 --> 00:13:43,600
javascript that compiles down

00:13:39,760 --> 00:13:46,240
to plain javascript so this suggestion

00:13:43,600 --> 00:13:48,639
may be a bit controversial right it's

00:13:46,240 --> 00:13:50,079
certainly my own bias because i develop

00:13:48,639 --> 00:13:52,720
in typescript

00:13:50,079 --> 00:13:54,560
but numbers actually back me up from the

00:13:52,720 --> 00:13:58,160
state of javascript survey

00:13:54,560 --> 00:14:01,680
that maybe most of you all have taken so

00:13:58,160 --> 00:14:04,000
typescript has become super popular like

00:14:01,680 --> 00:14:06,320
in 2018

00:14:04,000 --> 00:14:07,920
i feel like everybody was discovering

00:14:06,320 --> 00:14:09,440
typescript and being like oh i want to

00:14:07,920 --> 00:14:12,639
try this thing out

00:14:09,440 --> 00:14:13,680
because in 2017 only a third of devs had

00:14:12,639 --> 00:14:17,360
used typescript

00:14:13,680 --> 00:14:20,480
but in 2018 it was nearly 50

00:14:17,360 --> 00:14:23,040
there you go 47 and last year it was

00:14:20,480 --> 00:14:26,000
nearly 60

00:14:23,040 --> 00:14:26,880
and if we add on top of that all the

00:14:26,000 --> 00:14:29,600
people who are

00:14:26,880 --> 00:14:31,440
interested in learning typescript in

00:14:29,600 --> 00:14:33,680
2020 that is

00:14:31,440 --> 00:14:36,240
eight out of every 10 developers will

00:14:33,680 --> 00:14:39,279
need typescript definitions for your

00:14:36,240 --> 00:14:40,480
library right so in order to write their

00:14:39,279 --> 00:14:43,360
typescript app

00:14:40,480 --> 00:14:44,079
that uses your library they're going to

00:14:43,360 --> 00:14:47,199
need typescript

00:14:44,079 --> 00:14:48,880
types so then now the question for us is

00:14:47,199 --> 00:14:49,600
what makes it possible to provide

00:14:48,880 --> 00:14:53,440
typescript

00:14:49,600 --> 00:14:56,959
definitions from our library

00:14:53,440 --> 00:14:59,760
so one option is to build your library

00:14:56,959 --> 00:15:01,120
in regular javascript and then add

00:14:59,760 --> 00:15:04,399
typescript

00:15:01,120 --> 00:15:05,600
type declaration files to definitely

00:15:04,399 --> 00:15:07,680
typed

00:15:05,600 --> 00:15:10,320
so definitely type this this repo of

00:15:07,680 --> 00:15:12,880
high quality typescript definitions

00:15:10,320 --> 00:15:14,560
there are nearly 7 000 library type

00:15:12,880 --> 00:15:17,760
definitions maybe even more

00:15:14,560 --> 00:15:20,160
now in the repo so type definitions for

00:15:17,760 --> 00:15:23,279
popular libraries like react

00:15:20,160 --> 00:15:24,880
low dash node even are in there

00:15:23,279 --> 00:15:26,399
because those aren't written in

00:15:24,880 --> 00:15:28,800
typescript

00:15:26,399 --> 00:15:30,800
the drawback though is that you have to

00:15:28,800 --> 00:15:32,000
know quite a bit of typescript in order

00:15:30,800 --> 00:15:35,360
to generate

00:15:32,000 --> 00:15:38,000
typescript definition files manually

00:15:35,360 --> 00:15:40,959
therefore my suggestion is write your

00:15:38,000 --> 00:15:42,959
library and typescript of course

00:15:40,959 --> 00:15:44,399
there's definitely a learning curve

00:15:42,959 --> 00:15:46,720
right to

00:15:44,399 --> 00:15:48,000
uh to typescript no doubt like i'm not

00:15:46,720 --> 00:15:49,040
even going to gloss over that or

00:15:48,000 --> 00:15:52,639
sugarcoat it

00:15:49,040 --> 00:15:55,279
it takes work to learn typescript but

00:15:52,639 --> 00:15:56,800
in the interest of serving your users

00:15:55,279 --> 00:15:57,920
other developers that are using your

00:15:56,800 --> 00:16:00,079
library

00:15:57,920 --> 00:16:01,040
writing in typescript is the best way to

00:16:00,079 --> 00:16:04,560
provide

00:16:01,040 --> 00:16:06,639
those types those type definition files

00:16:04,560 --> 00:16:08,720
because now they'll be auto generated

00:16:06,639 --> 00:16:10,320
when you publish your package

00:16:08,720 --> 00:16:12,320
and i'll talk a little bit more about

00:16:10,320 --> 00:16:15,759
you know how that works

00:16:12,320 --> 00:16:18,240
so um it's also difficult

00:16:15,759 --> 00:16:20,560
it's difficult to write types for

00:16:18,240 --> 00:16:22,880
untyped javascript code

00:16:20,560 --> 00:16:25,040
because when our code is untyped we can

00:16:22,880 --> 00:16:27,519
make a lot of shortcut assumptions

00:16:25,040 --> 00:16:28,959
and skip things and things that just

00:16:27,519 --> 00:16:30,720
aren't allowed in typescript

00:16:28,959 --> 00:16:32,000
so writing types could be more

00:16:30,720 --> 00:16:34,639
challenging or

00:16:32,000 --> 00:16:36,399
impossible if you didn't write it in

00:16:34,639 --> 00:16:37,759
typescript itself

00:16:36,399 --> 00:16:40,000
and typescript gives us modern

00:16:37,759 --> 00:16:41,839
javascript too so it's a win-win we get

00:16:40,000 --> 00:16:45,120
it in our development and they get their

00:16:41,839 --> 00:16:45,120
typescript definitions

00:16:45,360 --> 00:16:50,560
so okay let's

00:16:48,399 --> 00:16:52,880
get a little let's get a little tactical

00:16:50,560 --> 00:16:52,880
now

00:16:53,839 --> 00:16:59,759
so now me

00:16:56,959 --> 00:17:00,959
using your library i know how it works

00:16:59,759 --> 00:17:04,319
because of the

00:17:00,959 --> 00:17:05,839
helpful docs and i have my typescript

00:17:04,319 --> 00:17:09,120
types to develop against

00:17:05,839 --> 00:17:10,880
which is great so i'm good but

00:17:09,120 --> 00:17:13,039
you know while developing there's

00:17:10,880 --> 00:17:13,760
nothing more frustrating than coming

00:17:13,039 --> 00:17:16,319
across

00:17:13,760 --> 00:17:18,319
a library bug like how many of y'all

00:17:16,319 --> 00:17:20,880
have dealt with a bug in the library

00:17:18,319 --> 00:17:23,039
when you're writing your code

00:17:20,880 --> 00:17:24,400
and you know i'm really trusting

00:17:23,039 --> 00:17:26,880
initially so of course

00:17:24,400 --> 00:17:29,120
i think it's me i did something wrong

00:17:26,880 --> 00:17:30,720
and i spent countless hours debugging

00:17:29,120 --> 00:17:32,160
trying to figure out why this thing

00:17:30,720 --> 00:17:34,320
isn't working

00:17:32,160 --> 00:17:35,440
until i finally figure out it's not me

00:17:34,320 --> 00:17:38,720
it's you

00:17:35,440 --> 00:17:41,440
and so our library needs to be

00:17:38,720 --> 00:17:42,080
perfect and we need to do our absolute

00:17:41,440 --> 00:17:45,520
best

00:17:42,080 --> 00:17:46,559
to prevent 100 of the bugs never writing

00:17:45,520 --> 00:17:50,480
any bugs

00:17:46,559 --> 00:17:53,600
right so the question of course is

00:17:50,480 --> 00:17:55,039
what makes our library as bug-free as

00:17:53,600 --> 00:17:58,240
possible

00:17:55,039 --> 00:17:59,280
well it's the three-headed monster of

00:17:58,240 --> 00:18:02,480
unit testing

00:17:59,280 --> 00:18:03,600
with coverage with jest linting with

00:18:02,480 --> 00:18:06,640
eslint and then

00:18:03,600 --> 00:18:08,799
type checking with typescript so

00:18:06,640 --> 00:18:09,760
type checking comes for free with

00:18:08,799 --> 00:18:12,480
typescript

00:18:09,760 --> 00:18:14,400
so not only is it great for developing

00:18:12,480 --> 00:18:16,799
with typescript and providing

00:18:14,400 --> 00:18:17,600
types for our users it's also good for

00:18:16,799 --> 00:18:19,440
us

00:18:17,600 --> 00:18:20,960
and that's really the main purpose of

00:18:19,440 --> 00:18:23,520
typescript is

00:18:20,960 --> 00:18:24,720
it helps us avoid bugs so all of those

00:18:23,520 --> 00:18:28,000
edge cases where

00:18:24,720 --> 00:18:31,760
something is unexpectedly undefined

00:18:28,000 --> 00:18:34,400
or you refactor a function and forget to

00:18:31,760 --> 00:18:37,200
update it in certain places

00:18:34,400 --> 00:18:38,320
and with vs code if you use that type

00:18:37,200 --> 00:18:40,720
checking can happen

00:18:38,320 --> 00:18:42,799
as you develop so you're getting instant

00:18:40,720 --> 00:18:46,320
feedback without even having to go

00:18:42,799 --> 00:18:48,880
and run your tests or anything like that

00:18:46,320 --> 00:18:50,559
and then linting comes with eslint this

00:18:48,880 --> 00:18:51,919
can happen as you develop as well in

00:18:50,559 --> 00:18:54,720
your editor

00:18:51,919 --> 00:18:56,400
typescript catches a lot of the already

00:18:54,720 --> 00:18:59,200
catches a lot of the non-stylistic

00:18:56,400 --> 00:19:02,240
errors that eslint also catches

00:18:59,200 --> 00:19:05,520
but eslint can warn us of likely or

00:19:02,240 --> 00:19:07,280
potential errors you know bad practices

00:19:05,520 --> 00:19:08,480
as well

00:19:07,280 --> 00:19:09,760
and then there are plugins for

00:19:08,480 --> 00:19:12,640
additional environments like if you

00:19:09,760 --> 00:19:15,840
write react and things like that

00:19:12,640 --> 00:19:19,520
so um i personally

00:19:15,840 --> 00:19:23,440
um for testing and coverage i use jest

00:19:19,520 --> 00:19:26,480
so other people like todd has said here

00:19:23,440 --> 00:19:28,559
use mocha and sign on just

00:19:26,480 --> 00:19:29,600
i use just mainly because it's really

00:19:28,559 --> 00:19:32,080
good with react

00:19:29,600 --> 00:19:33,679
especially or the ecosystem has worked

00:19:32,080 --> 00:19:35,440
really well together

00:19:33,679 --> 00:19:36,960
and there's just a lot of functionality

00:19:35,440 --> 00:19:39,520
that i'll talk about in a little bit

00:19:36,960 --> 00:19:40,960
so i used mocha and sign on initially

00:19:39,520 --> 00:19:42,799
and then when jess got

00:19:40,960 --> 00:19:44,640
better then i've switched to just and

00:19:42,799 --> 00:19:48,720
haven't gone back

00:19:44,640 --> 00:19:51,679
so uh jest lights

00:19:48,720 --> 00:19:52,080
allows you to write unit tests obviously

00:19:51,679 --> 00:19:54,000
and

00:19:52,080 --> 00:19:55,280
you want to test the public api of your

00:19:54,000 --> 00:19:58,160
library

00:19:55,280 --> 00:19:59,760
and with uh code coverage that comes

00:19:58,160 --> 00:20:02,000
with just as well you can see what

00:19:59,760 --> 00:20:04,960
percentage of code has been tested

00:20:02,000 --> 00:20:07,120
so the the goal with coverage is not

00:20:04,960 --> 00:20:09,200
necessarily to get to 100

00:20:07,120 --> 00:20:10,720
but to make sure you catch those edge

00:20:09,200 --> 00:20:11,039
case branches that you're not going to

00:20:10,720 --> 00:20:13,200
be

00:20:11,039 --> 00:20:15,919
manually testing as you're developing

00:20:13,200 --> 00:20:19,440
that's the key for regressions

00:20:15,919 --> 00:20:22,559
it's key for keeping your code bug free

00:20:19,440 --> 00:20:23,600
when you refactor so you actually have

00:20:22,559 --> 00:20:25,520
to write tests

00:20:23,600 --> 00:20:26,799
like even with typescript you still need

00:20:25,520 --> 00:20:30,320
to write tests so

00:20:26,799 --> 00:20:33,600
you know that has to be a thing

00:20:30,320 --> 00:20:35,520
so um i'm guessing you probably knew

00:20:33,600 --> 00:20:37,280
most of those things right already

00:20:35,520 --> 00:20:38,960
that's probably not new if you're

00:20:37,280 --> 00:20:41,440
developing in javascript

00:20:38,960 --> 00:20:42,480
but i want to take it to another level

00:20:41,440 --> 00:20:45,440
something that maybe you

00:20:42,480 --> 00:20:46,400
didn't know about and is that typically

00:20:45,440 --> 00:20:49,039
you run your

00:20:46,400 --> 00:20:51,360
typing and your linting and your testing

00:20:49,039 --> 00:20:55,600
with three separate commands

00:20:51,360 --> 00:20:57,600
that's tsc jest and eslint

00:20:55,600 --> 00:20:59,840
but with this feature of jest called

00:20:57,600 --> 00:21:02,720
just projects you can actually run them

00:20:59,840 --> 00:21:04,720
all through jest you see jest is

00:21:02,720 --> 00:21:05,120
actually a platform that's broken up

00:21:04,720 --> 00:21:07,520
into

00:21:05,120 --> 00:21:08,320
three main parts so you have at the

00:21:07,520 --> 00:21:10,320
beginning

00:21:08,320 --> 00:21:11,440
this thing i like to call the file

00:21:10,320 --> 00:21:13,760
collector

00:21:11,440 --> 00:21:15,679
which determines which files to run and

00:21:13,760 --> 00:21:18,799
has watch mode and all that

00:21:15,679 --> 00:21:22,960
goodness and then at the end is

00:21:18,799 --> 00:21:25,280
displays the success or failure in a

00:21:22,960 --> 00:21:26,960
you know a nice way that it collects all

00:21:25,280 --> 00:21:28,080
that information or displays all that

00:21:26,960 --> 00:21:31,039
information

00:21:28,080 --> 00:21:32,320
and then in the middle is this runner

00:21:31,039 --> 00:21:35,679
different runners

00:21:32,320 --> 00:21:37,840
um depending on what we're validating so

00:21:35,679 --> 00:21:39,600
instead of the running the normal unit

00:21:37,840 --> 00:21:42,640
test runner for jest

00:21:39,600 --> 00:21:45,760
we can run an eslint runner or a

00:21:42,640 --> 00:21:49,200
tsc runner for typescript so

00:21:45,760 --> 00:21:52,880
now this allows us for instance to run

00:21:49,200 --> 00:21:53,360
linting in watch mode as we fix things

00:21:52,880 --> 00:21:55,919
it'll

00:21:53,360 --> 00:21:57,760
rerun the lens which the eslint command

00:21:55,919 --> 00:22:00,720
doesn't support itself

00:21:57,760 --> 00:22:01,280
it also allows us to run those three

00:22:00,720 --> 00:22:04,080
commands

00:22:01,280 --> 00:22:05,919
lent test type check and parallel

00:22:04,080 --> 00:22:08,480
without you know needing another

00:22:05,919 --> 00:22:09,919
tool to be able to do that and then the

00:22:08,480 --> 00:22:12,880
nice things at the end you get

00:22:09,919 --> 00:22:13,919
grouped consistent error messaging so

00:22:12,880 --> 00:22:16,480
that's pretty nice

00:22:13,919 --> 00:22:18,159
and you can run it all by adding the

00:22:16,480 --> 00:22:22,720
just running the jest command

00:22:18,159 --> 00:22:26,480
as your test script and the package json

00:22:22,720 --> 00:22:28,960
so speaking of that test script

00:22:26,480 --> 00:22:30,000
you can run it in a continuous

00:22:28,960 --> 00:22:33,520
integration or

00:22:30,000 --> 00:22:34,880
ci environment uh so there are many ci

00:22:33,520 --> 00:22:38,320
services out there

00:22:34,880 --> 00:22:41,120
travis i use that first i use circle ci

00:22:38,320 --> 00:22:42,960
at stitch but lately personally i've

00:22:41,120 --> 00:22:46,400
been using github actions and

00:22:42,960 --> 00:22:48,080
loving those and with github actions you

00:22:46,400 --> 00:22:49,360
can use them without having to register

00:22:48,080 --> 00:22:52,799
for another service

00:22:49,360 --> 00:22:54,799
which i guess is nice so

00:22:52,799 --> 00:22:56,640
if you didn't catch it make sure you

00:22:54,799 --> 00:22:57,840
watch sue's talk at the beginning of

00:22:56,640 --> 00:23:00,640
today and she talked

00:22:57,840 --> 00:23:01,760
way more about github actions so here's

00:23:00,640 --> 00:23:05,919
an example of a

00:23:01,760 --> 00:23:07,360
workflow to test on node 10 12 and 14.

00:23:05,919 --> 00:23:09,919
it's important to test on all the

00:23:07,360 --> 00:23:11,679
versions of your

00:23:09,919 --> 00:23:13,760
node that your package supports for

00:23:11,679 --> 00:23:17,360
instance so we're running the test there

00:23:13,760 --> 00:23:18,240
right at the bottom so i really wanted

00:23:17,360 --> 00:23:19,760
to spend more time

00:23:18,240 --> 00:23:21,120
unpacking that you know there are tons

00:23:19,760 --> 00:23:22,880
of different options for testing

00:23:21,120 --> 00:23:23,520
environments and linting and stuff like

00:23:22,880 --> 00:23:25,440
that

00:23:23,520 --> 00:23:27,600
so you could follow those links watch

00:23:25,440 --> 00:23:31,760
the video as well

00:23:27,600 --> 00:23:35,679
you can deep dive into those later okay

00:23:31,760 --> 00:23:38,720
so uh we've discussed helpful docs

00:23:35,679 --> 00:23:39,520
we discussed typescript types and now

00:23:38,720 --> 00:23:42,000
your

00:23:39,520 --> 00:23:44,000
library is bug free let's bring it home

00:23:42,000 --> 00:23:46,640
with this last one

00:23:44,000 --> 00:23:47,279
so no matter how hard you test and you

00:23:46,640 --> 00:23:49,919
test

00:23:47,279 --> 00:23:51,520
and you test there are inevitably be

00:23:49,919 --> 00:23:54,640
bugs like we're not perfect

00:23:51,520 --> 00:23:56,480
even though we strive to be uh or if you

00:23:54,640 --> 00:23:59,440
could even write perfect code

00:23:56,480 --> 00:24:00,640
so to speak no bugs but your users again

00:23:59,440 --> 00:24:04,000
the developers

00:24:00,640 --> 00:24:06,080
will um have requests for nice features

00:24:04,000 --> 00:24:08,080
that you haven't thought of yet so you

00:24:06,080 --> 00:24:11,360
want to be able to get those changes

00:24:08,080 --> 00:24:14,960
to your users as soon as possible so

00:24:11,360 --> 00:24:16,400
from initial request to published in the

00:24:14,960 --> 00:24:19,919
npm registry

00:24:16,400 --> 00:24:23,120
as quickly as possible so again

00:24:19,919 --> 00:24:26,240
the last question is what makes quick

00:24:23,120 --> 00:24:29,760
changes possible well

00:24:26,240 --> 00:24:31,760
if it first starts with the issue itself

00:24:29,760 --> 00:24:34,080
so whether it's a bug or a feature

00:24:31,760 --> 00:24:35,440
request we want as much details as

00:24:34,080 --> 00:24:38,480
possible

00:24:35,440 --> 00:24:38,799
well if you didn't know github you can

00:24:38,480 --> 00:24:42,559
use

00:24:38,799 --> 00:24:43,360
github issue templates which can guide

00:24:42,559 --> 00:24:45,520
the developer

00:24:43,360 --> 00:24:47,279
into a flow based upon their situation

00:24:45,520 --> 00:24:50,640
so bug report

00:24:47,279 --> 00:24:51,279
feature proposal question regression

00:24:50,640 --> 00:24:53,120
report

00:24:51,279 --> 00:24:55,039
whatever you want to name them and they

00:24:53,120 --> 00:24:56,960
can get started that way

00:24:55,039 --> 00:24:58,840
and you can even tie labels with each

00:24:56,960 --> 00:25:01,440
type so your issues are

00:24:58,840 --> 00:25:04,960
pre-classified

00:25:01,440 --> 00:25:06,480
oh oh by the way for bugs you can have

00:25:04,960 --> 00:25:10,000
the developer run the

00:25:06,480 --> 00:25:13,200
end info package with npx

00:25:10,000 --> 00:25:16,240
and include the results so info

00:25:13,200 --> 00:25:17,919
system and binaries and now i know now

00:25:16,240 --> 00:25:19,440
you know what version of node i'm

00:25:17,919 --> 00:25:22,559
running what version of yarn

00:25:19,440 --> 00:25:25,039
npm what am i on

00:25:22,559 --> 00:25:26,559
mac or windows or linux like all that

00:25:25,039 --> 00:25:29,520
kind of information

00:25:26,559 --> 00:25:29,919
even you know the memory at the time

00:25:29,520 --> 00:25:31,360
those

00:25:29,919 --> 00:25:33,360
kind of stuff is it could be pretty

00:25:31,360 --> 00:25:35,520
helpful for debugging depending on your

00:25:33,360 --> 00:25:38,799
package

00:25:35,520 --> 00:25:39,600
all right so let's say i me am willing

00:25:38,799 --> 00:25:42,080
to help

00:25:39,600 --> 00:25:43,279
with fixes or adding a feature to your

00:25:42,080 --> 00:25:46,960
package

00:25:43,279 --> 00:25:49,880
what can you do to make that go fastest

00:25:46,960 --> 00:25:52,320
for me right so you can add a

00:25:49,880 --> 00:25:54,960
contributing.md which provides

00:25:52,320 --> 00:25:56,799
clear guidelines on how i can contribute

00:25:54,960 --> 00:26:01,039
to the library because

00:25:56,799 --> 00:26:02,960
prs are welcome you can have it mvmrc

00:26:01,039 --> 00:26:05,360
which locks down the version of node

00:26:02,960 --> 00:26:06,960
with nvm so that everyone's using the

00:26:05,360 --> 00:26:09,360
same version while developing and

00:26:06,960 --> 00:26:12,400
testing and such

00:26:09,360 --> 00:26:14,559
makes that helpful prettier is provides

00:26:12,400 --> 00:26:16,080
consistent formatting for everyone so

00:26:14,559 --> 00:26:18,000
there's no time

00:26:16,080 --> 00:26:21,360
arguing about where curly braces should

00:26:18,000 --> 00:26:24,400
go if there should be semicolons or not

00:26:21,360 --> 00:26:26,799
and it makes development faster for you

00:26:24,400 --> 00:26:27,440
all who've used prettier uh in your

00:26:26,799 --> 00:26:29,600
editor

00:26:27,440 --> 00:26:31,919
when you have auto formatting turned on

00:26:29,600 --> 00:26:34,000
so i like to just type a whole bunch of

00:26:31,919 --> 00:26:36,000
you know not gobbledygook but you know

00:26:34,000 --> 00:26:39,200
code without any formatting

00:26:36,000 --> 00:26:40,640
and then hit save and then bam it's all

00:26:39,200 --> 00:26:41,520
formatted nicely and i didn't have to

00:26:40,640 --> 00:26:44,000
think about

00:26:41,520 --> 00:26:47,679
where to indent and just that cognitive

00:26:44,000 --> 00:26:49,679
extra extra cognitive decision making

00:26:47,679 --> 00:26:51,200
and there's even an eslimp plugin which

00:26:49,679 --> 00:26:53,200
i'll link

00:26:51,200 --> 00:26:54,400
that allows you to integrate prettier

00:26:53,200 --> 00:26:56,720
into eslint

00:26:54,400 --> 00:26:57,520
so becomes an eslint rule when your code

00:26:56,720 --> 00:27:00,240
isn't

00:26:57,520 --> 00:27:01,600
formatted correctly then you run eslint

00:27:00,240 --> 00:27:04,720
dash dash fix

00:27:01,600 --> 00:27:06,720
and then it prettifies it pretty cool

00:27:04,720 --> 00:27:08,720
uh you can have a pull request template

00:27:06,720 --> 00:27:11,120
as well um that

00:27:08,720 --> 00:27:12,720
has the format that you would like and

00:27:11,120 --> 00:27:15,120
then a code of condex

00:27:12,720 --> 00:27:16,159
to make sure everybody is behaving uh

00:27:15,120 --> 00:27:18,000
well

00:27:16,159 --> 00:27:20,799
so these are all kind of various

00:27:18,000 --> 00:27:24,159
communication files to streamline

00:27:20,799 --> 00:27:27,360
the process and in fact

00:27:24,159 --> 00:27:29,679
if you are starting out the

00:27:27,360 --> 00:27:32,000
the li if you're starting out you can

00:27:29,679 --> 00:27:34,720
run a couple of scripts here

00:27:32,000 --> 00:27:35,520
to set things up so you can set up a

00:27:34,720 --> 00:27:37,679
license

00:27:35,520 --> 00:27:38,720
mit for instance you can set up a git

00:27:37,679 --> 00:27:42,080
ignore for

00:27:38,720 --> 00:27:44,159
node generate a code of conduct and an

00:27:42,080 --> 00:27:45,679
email address they can contact you at

00:27:44,159 --> 00:27:48,240
initialize git

00:27:45,679 --> 00:27:49,520
initialize your package.json and you're

00:27:48,240 --> 00:27:51,600
off to the races

00:27:49,520 --> 00:27:53,200
so i have a link there that kind of goes

00:27:51,600 --> 00:27:57,120
into details how

00:27:53,200 --> 00:28:01,520
all of that can work

00:27:57,120 --> 00:28:04,000
all right um and even mark peters says

00:28:01,520 --> 00:28:07,200
also a get attributes file

00:28:04,000 --> 00:28:07,679
i think the the link i sent you has that

00:28:07,200 --> 00:28:10,720
mentioned

00:28:07,679 --> 00:28:12,320
so uh good suggestion there dot get

00:28:10,720 --> 00:28:15,360
attributes

00:28:12,320 --> 00:28:19,120
cool so now after the code is written

00:28:15,360 --> 00:28:21,600
and the pr is created it's past ci

00:28:19,120 --> 00:28:22,880
and it's merged into master we need to

00:28:21,600 --> 00:28:25,679
get that code asap

00:28:22,880 --> 00:28:27,679
out to the npm registry like the worst

00:28:25,679 --> 00:28:28,720
thing is when i see something merged

00:28:27,679 --> 00:28:31,279
into master

00:28:28,720 --> 00:28:31,919
and yet and it was even a pr that i

00:28:31,279 --> 00:28:33,760
submitted

00:28:31,919 --> 00:28:35,039
and the code hasn't been released yet

00:28:33,760 --> 00:28:38,399
like why

00:28:35,039 --> 00:28:40,320
like ah just frustrating um

00:28:38,399 --> 00:28:42,399
that's why things get forked and all

00:28:40,320 --> 00:28:45,200
that nonsense

00:28:42,399 --> 00:28:46,640
so the first step is we need to ensure

00:28:45,200 --> 00:28:49,600
that we're generating

00:28:46,640 --> 00:28:50,159
uh the correct formats of the transpiled

00:28:49,600 --> 00:28:51,600
code

00:28:50,159 --> 00:28:53,279
because we don't want to ship source

00:28:51,600 --> 00:28:56,559
code we want to ship

00:28:53,279 --> 00:29:00,000
transpiled code so these days

00:28:56,559 --> 00:29:02,880
for modern js environments you need

00:29:00,000 --> 00:29:03,679
esm so that's ecmascript modules for

00:29:02,880 --> 00:29:06,480
tree shaking

00:29:03,679 --> 00:29:07,760
mostly and then cjs which is the

00:29:06,480 --> 00:29:11,440
standard node

00:29:07,760 --> 00:29:15,760
module format so the main field

00:29:11,440 --> 00:29:18,880
points to your entry file for a cjs code

00:29:15,760 --> 00:29:22,399
and then use module and js

00:29:18,880 --> 00:29:26,159
next main for the entry point for your

00:29:22,399 --> 00:29:28,799
esm code and then the side effects field

00:29:26,159 --> 00:29:29,360
is also something that's used for tree

00:29:28,799 --> 00:29:31,919
shaking

00:29:29,360 --> 00:29:33,760
so all of those are for esm modules or

00:29:31,919 --> 00:29:35,919
ecmascript modules

00:29:33,760 --> 00:29:38,159
then you have your types field which

00:29:35,919 --> 00:29:41,360
points to where your type definition

00:29:38,159 --> 00:29:43,120
typescript definition files exists uh

00:29:41,360 --> 00:29:45,679
you have the files field

00:29:43,120 --> 00:29:46,240
which is an array which lists all the

00:29:45,679 --> 00:29:48,960
different

00:29:46,240 --> 00:29:49,919
paths that should be included in the

00:29:48,960 --> 00:29:51,919
package

00:29:49,919 --> 00:29:54,080
so this is kind of the opposite of using

00:29:51,919 --> 00:29:57,600
an npm ignore it's a

00:29:54,080 --> 00:29:59,760
exception list instead of a

00:29:57,600 --> 00:30:01,600
not exception list for lack of a better

00:29:59,760 --> 00:30:02,960
term and this is great so you're not

00:30:01,600 --> 00:30:05,440
including your tests or

00:30:02,960 --> 00:30:06,640
configuration files and such inside of

00:30:05,440 --> 00:30:09,840
your

00:30:06,640 --> 00:30:12,080
built package then we can use

00:30:09,840 --> 00:30:13,679
babel for transpiling the typescript to

00:30:12,080 --> 00:30:17,039
vanilla javascript

00:30:13,679 --> 00:30:20,159
so there's a babel plugin babel

00:30:17,039 --> 00:30:23,279
uh typescript plugin basically that will

00:30:20,159 --> 00:30:26,000
transpile typescript down

00:30:23,279 --> 00:30:27,600
to vanilla javascript so you don't no

00:30:26,000 --> 00:30:30,240
longer have to jump into the typescript

00:30:27,600 --> 00:30:33,360
ecosystem you can still use babel

00:30:30,240 --> 00:30:34,960
so i don't use webpack or rollup in this

00:30:33,360 --> 00:30:36,480
situation because

00:30:34,960 --> 00:30:38,720
they're better suited for creating

00:30:36,480 --> 00:30:39,360
bundles than transpiling individual

00:30:38,720 --> 00:30:40,640
files

00:30:39,360 --> 00:30:42,480
they could totally do it but they're

00:30:40,640 --> 00:30:44,240
better better better suited

00:30:42,480 --> 00:30:45,919
and babel can take care of it in just

00:30:44,240 --> 00:30:49,840
this kind of simple

00:30:45,919 --> 00:30:51,360
command and then there's the tsc command

00:30:49,840 --> 00:30:53,120
which comes from typescript for

00:30:51,360 --> 00:30:53,679
generating the typescript definition

00:30:53,120 --> 00:30:56,640
files

00:30:53,679 --> 00:30:58,399
that i mentioned before and then lastly

00:30:56,640 --> 00:31:00,640
we can wrap it up in a nice

00:30:58,399 --> 00:31:02,880
build a script that will run all of

00:31:00,640 --> 00:31:04,320
those in parallel or in sequence

00:31:02,880 --> 00:31:07,440
whichever one you want

00:31:04,320 --> 00:31:10,720
um using npm run all

00:31:07,440 --> 00:31:14,240
there so with that build script and pray

00:31:10,720 --> 00:31:17,440
place we can now achieve continuous

00:31:14,240 --> 00:31:20,799
delivery also known as cd

00:31:17,440 --> 00:31:23,679
the cd and ci cd so

00:31:20,799 --> 00:31:24,960
first we run the build script to

00:31:23,679 --> 00:31:26,080
generate all the files that i just

00:31:24,960 --> 00:31:28,159
talked about

00:31:26,080 --> 00:31:29,679
and then we can use a library called

00:31:28,159 --> 00:31:32,640
semantic release

00:31:29,679 --> 00:31:33,679
to release the package automatically so

00:31:32,640 --> 00:31:37,919
it's meant to be run

00:31:33,679 --> 00:31:39,039
nci after every successful build on your

00:31:37,919 --> 00:31:41,200
release branch so

00:31:39,039 --> 00:31:42,159
anytime something is merged into master

00:31:41,200 --> 00:31:45,240
it runs

00:31:42,159 --> 00:31:48,159
which makes releases unromantic and

00:31:45,240 --> 00:31:48,960
unsentimental as they say so the nice

00:31:48,159 --> 00:31:52,000
thing about this

00:31:48,960 --> 00:31:52,559
is that as a library owner i can merge a

00:31:52,000 --> 00:31:54,960
pr

00:31:52,559 --> 00:31:56,880
on my phone through github and it

00:31:54,960 --> 00:31:58,880
automatically makes it to npm

00:31:56,880 --> 00:32:00,799
in five minutes you know i no longer

00:31:58,880 --> 00:32:03,760
have to manage manually push

00:32:00,799 --> 00:32:05,360
a version commit locally on my machine

00:32:03,760 --> 00:32:06,000
or run a script locally like none of

00:32:05,360 --> 00:32:09,120
that

00:32:06,000 --> 00:32:12,240
all happens nci which is uh great

00:32:09,120 --> 00:32:15,279
there so then

00:32:12,240 --> 00:32:17,200
then it creates a release um on the

00:32:15,279 --> 00:32:19,200
github releases tab so now i have a

00:32:17,200 --> 00:32:20,960
detailed change log that's all

00:32:19,200 --> 00:32:22,799
automatically created for me as well

00:32:20,960 --> 00:32:24,080
instead of like a whole list of versions

00:32:22,799 --> 00:32:25,440
that have been released and

00:32:24,080 --> 00:32:27,200
i don't know what happened in each one

00:32:25,440 --> 00:32:29,600
of those versions

00:32:27,200 --> 00:32:30,240
and then lastly you can browse the

00:32:29,600 --> 00:32:31,679
package

00:32:30,240 --> 00:32:33,360
to make sure everything was released

00:32:31,679 --> 00:32:36,480
properly so

00:32:33,360 --> 00:32:38,559
uh unpackage or js deliver or even an

00:32:36,480 --> 00:32:41,679
npm now you can do that

00:32:38,559 --> 00:32:44,320
as well so here are a ton more

00:32:41,679 --> 00:32:45,840
resources um all these little details

00:32:44,320 --> 00:32:48,640
like i mentioned the

00:32:45,840 --> 00:32:50,000
the babel preset for typescript example

00:32:48,640 --> 00:32:52,240
issue templates

00:32:50,000 --> 00:32:56,000
eslint prettier all those sorts of

00:32:52,240 --> 00:32:59,279
things you can look at

00:32:56,000 --> 00:33:01,519
okay so that was a lot of stuff

00:32:59,279 --> 00:33:03,360
right and chances are you may have

00:33:01,519 --> 00:33:04,720
missed something while you're responding

00:33:03,360 --> 00:33:07,679
to that slack or

00:33:04,720 --> 00:33:09,279
discord message it's okay i understand

00:33:07,679 --> 00:33:10,880
you're on your computer

00:33:09,279 --> 00:33:12,559
it was a nice ring when you got

00:33:10,880 --> 00:33:14,080
distracted but it's okay because i'm

00:33:12,559 --> 00:33:15,360
going to recap everything that we just

00:33:14,080 --> 00:33:18,080
discussed

00:33:15,360 --> 00:33:18,480
but instead of grouping it by the user

00:33:18,080 --> 00:33:20,480
need

00:33:18,480 --> 00:33:21,919
as we just flow through i'm going to

00:33:20,480 --> 00:33:25,440
group it for you

00:33:21,919 --> 00:33:27,200
based upon the infrastructure so

00:33:25,440 --> 00:33:28,720
and we will see this kind of perfect

00:33:27,200 --> 00:33:32,159
repo as a mix of

00:33:28,720 --> 00:33:34,799
technical and communication things

00:33:32,159 --> 00:33:35,840
just like the perfect developer should

00:33:34,799 --> 00:33:39,919
be a mix of

00:33:35,840 --> 00:33:42,240
technical and communication skills

00:33:39,919 --> 00:33:44,320
i'll leave it at that okay so here it

00:33:42,240 --> 00:33:44,960
all is in one slide you know you can get

00:33:44,320 --> 00:33:48,080
your

00:33:44,960 --> 00:33:50,799
screenshot button thing

00:33:48,080 --> 00:33:52,720
and take it if you would like or get the

00:33:50,799 --> 00:33:53,760
slide because there's like 20 links on

00:33:52,720 --> 00:33:56,320
this page

00:33:53,760 --> 00:33:56,799
but anyway uh the developer experience

00:33:56,320 --> 00:33:59,440
for you

00:33:56,799 --> 00:34:00,559
starts with writing modern javascript

00:33:59,440 --> 00:34:03,120
with typescript

00:34:00,559 --> 00:34:05,840
right and if you use a nice editor like

00:34:03,120 --> 00:34:07,840
vs code you can get prettier formatting

00:34:05,840 --> 00:34:11,440
eslint type checking

00:34:07,840 --> 00:34:14,000
all happening in the editor and

00:34:11,440 --> 00:34:16,159
there are a lot of repo files as well

00:34:14,000 --> 00:34:16,879
you know docs for your users as well as

00:34:16,159 --> 00:34:20,399
well as other

00:34:16,879 --> 00:34:22,240
communications files to make things easy

00:34:20,399 --> 00:34:25,520
and safe for folks

00:34:22,240 --> 00:34:26,960
for testing and continuous integration

00:34:25,520 --> 00:34:29,359
you know you should try using github

00:34:26,960 --> 00:34:31,679
actions is my suggestion

00:34:29,359 --> 00:34:32,639
and with just as a platform you can run

00:34:31,679 --> 00:34:35,040
type checking

00:34:32,639 --> 00:34:36,159
you can run lint you can run unit tests

00:34:35,040 --> 00:34:39,839
you can run code

00:34:36,159 --> 00:34:41,520
coverage all at once which is fantastic

00:34:39,839 --> 00:34:43,839
and then for build and continuous

00:34:41,520 --> 00:34:46,720
delivery which are key

00:34:43,839 --> 00:34:48,320
you can use babel for transpiling and

00:34:46,720 --> 00:34:50,960
typescript for type checking

00:34:48,320 --> 00:34:53,440
so separate those two out um you'll

00:34:50,960 --> 00:34:54,560
probably need to generate common js and

00:34:53,440 --> 00:34:58,160
es

00:34:54,560 --> 00:35:00,240
module formats but

00:34:58,160 --> 00:35:02,000
you can use babel to do both of those

00:35:00,240 --> 00:35:03,119
and there are there's a plethora of

00:35:02,000 --> 00:35:06,320
fields that you have to put in your

00:35:03,119 --> 00:35:08,480
package json lots of them like you saw

00:35:06,320 --> 00:35:10,880
so lastly you'll want your ci service to

00:35:08,480 --> 00:35:13,359
do an auto release like i suggested

00:35:10,880 --> 00:35:15,280
with new versions committed to master oh

00:35:13,359 --> 00:35:18,640
and you can also publish your docs

00:35:15,280 --> 00:35:21,599
in your cd process as well using fiddly

00:35:18,640 --> 00:35:22,400
so and finally you can browse browse

00:35:21,599 --> 00:35:25,440
your package

00:35:22,400 --> 00:35:27,119
on npm on unpackage to make sure it

00:35:25,440 --> 00:35:30,400
looks good

00:35:27,119 --> 00:35:33,520
all right so um

00:35:30,400 --> 00:35:34,480
i use i do use js docs todd in my

00:35:33,520 --> 00:35:36,880
documentation

00:35:34,480 --> 00:35:38,480
but i haven't connected that to

00:35:36,880 --> 00:35:41,200
generating documentation

00:35:38,480 --> 00:35:42,560
i use js docs mostly for a development

00:35:41,200 --> 00:35:45,359
experience so that

00:35:42,560 --> 00:35:47,359
in visual studio code i can see the

00:35:45,359 --> 00:35:49,680
descriptions of the functions

00:35:47,359 --> 00:35:50,720
as they're being called so it'll be good

00:35:49,680 --> 00:35:52,880
to connect those two

00:35:50,720 --> 00:35:54,480
to save having to write those docs

00:35:52,880 --> 00:35:58,079
manually in markdown

00:35:54,480 --> 00:35:59,680
so that's a level next step i guess i'll

00:35:58,079 --> 00:36:02,640
say

00:35:59,680 --> 00:36:03,200
so um that was all the information that

00:36:02,640 --> 00:36:05,119
i wanted

00:36:03,200 --> 00:36:07,040
i wanted to know four years ago when i

00:36:05,119 --> 00:36:10,320
was starting this out

00:36:07,040 --> 00:36:12,240
but you know to be very honest

00:36:10,320 --> 00:36:13,440
it probably would have been way too

00:36:12,240 --> 00:36:15,599
overwhelming like

00:36:13,440 --> 00:36:16,480
i count 20 different things that are

00:36:15,599 --> 00:36:20,480
listed on that

00:36:16,480 --> 00:36:22,800
previous page you know i

00:36:20,480 --> 00:36:24,640
i wanted to have the right tooling but i

00:36:22,800 --> 00:36:26,079
was more interested in actually building

00:36:24,640 --> 00:36:28,240
my library so

00:36:26,079 --> 00:36:29,200
it really didn't have docs and testing

00:36:28,240 --> 00:36:32,720
was light and

00:36:29,200 --> 00:36:35,920
you know how it goes so even for me

00:36:32,720 --> 00:36:37,520
though now knowing it all i still don't

00:36:35,920 --> 00:36:41,040
want to do all that stuff that i

00:36:37,520 --> 00:36:44,320
mentioned so i took the time and created

00:36:41,040 --> 00:36:48,240
a zero config cli tool called

00:36:44,320 --> 00:36:49,599
at bin mbp cli and it abstracts all that

00:36:48,240 --> 00:36:52,880
work that i just talked about

00:36:49,599 --> 00:36:53,680
so it does everything basically except

00:36:52,880 --> 00:36:56,720
for

00:36:53,680 --> 00:36:57,119
writing the docs and writing the source

00:36:56,720 --> 00:36:59,200
code

00:36:57,119 --> 00:37:01,680
unfortunately that'll be the next level

00:36:59,200 --> 00:37:04,720
if you could write my source code

00:37:01,680 --> 00:37:06,800
so um the cli has some options so

00:37:04,720 --> 00:37:08,160
you know you could totally use it but i

00:37:06,800 --> 00:37:10,560
built it for myself

00:37:08,160 --> 00:37:11,359
that's why it's called the bin mvp cli

00:37:10,560 --> 00:37:13,920
so don't

00:37:11,359 --> 00:37:16,640
expect any prs to make it configurable

00:37:13,920 --> 00:37:19,040
if you decide to use it

00:37:16,640 --> 00:37:20,960
so it works a lot like react scripts if

00:37:19,040 --> 00:37:24,800
you've ever used create react app

00:37:20,960 --> 00:37:26,079
you use npx bin vpcli create to create

00:37:24,800 --> 00:37:28,880
the app and it

00:37:26,079 --> 00:37:30,480
generates all of these files sets up

00:37:28,880 --> 00:37:33,760
github actions

00:37:30,480 --> 00:37:34,400
your package json all that work test and

00:37:33,760 --> 00:37:37,440
build

00:37:34,400 --> 00:37:40,320
do what we've already described um

00:37:37,440 --> 00:37:41,839
start is for development mode so it

00:37:40,320 --> 00:37:44,079
basically runs the test

00:37:41,839 --> 00:37:46,800
in watch mode for which the files you've

00:37:44,079 --> 00:37:48,240
changed using jest of course underneath

00:37:46,800 --> 00:37:49,920
and then integrate is something pretty

00:37:48,240 --> 00:37:51,680
cool that i came up with a little bit

00:37:49,920 --> 00:37:54,320
later as i was developing

00:37:51,680 --> 00:37:54,960
um i find my i found myself breaking my

00:37:54,320 --> 00:37:58,160
package

00:37:54,960 --> 00:38:01,440
often um because i was working on

00:37:58,160 --> 00:38:04,400
the build tooling so now i can run

00:38:01,440 --> 00:38:07,280
integration tests by basically

00:38:04,400 --> 00:38:07,680
publishing the package locally and then

00:38:07,280 --> 00:38:10,480
running

00:38:07,680 --> 00:38:10,960
integration tests against the package

00:38:10,480 --> 00:38:12,720
itself

00:38:10,960 --> 00:38:15,200
as if i'm importing it in a completely

00:38:12,720 --> 00:38:17,520
different app just like the user would

00:38:15,200 --> 00:38:18,640
so it catches a lot of different errors

00:38:17,520 --> 00:38:20,480
that way that

00:38:18,640 --> 00:38:22,160
even if all my unit tests are passing

00:38:20,480 --> 00:38:26,400
it'll catch those

00:38:22,160 --> 00:38:29,839
so this package ben nvpcli

00:38:26,400 --> 00:38:31,680
uses itself to run development and test

00:38:29,839 --> 00:38:33,760
and build building so it's like a

00:38:31,680 --> 00:38:37,040
perfect repo to help create

00:38:33,760 --> 00:38:39,359
other perfect repos very meta

00:38:37,040 --> 00:38:40,320
all right so let me finish this up um if

00:38:39,359 --> 00:38:42,720
you find this stuff

00:38:40,320 --> 00:38:43,440
interesting like i do i hope you do a

00:38:42,720 --> 00:38:45,280
friend of mine

00:38:43,440 --> 00:38:46,640
jonathan creamer is also passionate

00:38:45,280 --> 00:38:49,359
about these things

00:38:46,640 --> 00:38:50,240
and front-end tooling and it's becoming

00:38:49,359 --> 00:38:51,520
more of a thing

00:38:50,240 --> 00:38:53,040
like there are actually roles at

00:38:51,520 --> 00:38:53,920
companies for people who do these sort

00:38:53,040 --> 00:38:55,520
of things

00:38:53,920 --> 00:38:57,920
and he wants to create a community

00:38:55,520 --> 00:39:00,960
around this school skill set

00:38:57,920 --> 00:39:04,000
so he coined this term called

00:39:00,960 --> 00:39:07,280
div ops not that front end devops but

00:39:04,000 --> 00:39:09,520
devops for this community and there's a

00:39:07,280 --> 00:39:09,920
slack group and a subreddit you can join

00:39:09,520 --> 00:39:12,880
so

00:39:09,920 --> 00:39:14,320
the links there you can join those and

00:39:12,880 --> 00:39:17,200
in the slack group we have

00:39:14,320 --> 00:39:18,560
uh monthly meetings over zoom and we

00:39:17,200 --> 00:39:20,800
share our div up setup

00:39:18,560 --> 00:39:22,160
setups at our company so we can kind of

00:39:20,800 --> 00:39:24,640
share ideas because

00:39:22,160 --> 00:39:25,280
usually we're just going at this stuff

00:39:24,640 --> 00:39:29,280
alone

00:39:25,280 --> 00:39:32,560
so now we can share information

00:39:29,280 --> 00:39:35,680
oh one last thing so i periodically

00:39:32,560 --> 00:39:39,440
host a series of short three hour

00:39:35,680 --> 00:39:41,520
remote workshops i call them mini shops

00:39:39,440 --> 00:39:43,599
because they're short workshops

00:39:41,520 --> 00:39:44,880
and one of them is called typescript for

00:39:43,599 --> 00:39:47,760
react developers

00:39:44,880 --> 00:39:49,200
so they're most are mostly around react

00:39:47,760 --> 00:39:51,280
and if you're interested in learning

00:39:49,200 --> 00:39:54,400
more about typescript and you do react

00:39:51,280 --> 00:39:56,160
it's actually happening next week

00:39:54,400 --> 00:39:57,680
and i have others listed there as well

00:39:56,160 --> 00:40:00,720
for learning react and

00:39:57,680 --> 00:40:04,359
um sharing react component logic

00:40:00,720 --> 00:40:05,520
and such so uh visit my website

00:40:04,359 --> 00:40:07,200
bennvp.com

00:40:05,520 --> 00:40:09,839
you'll see all of the many shops there

00:40:07,200 --> 00:40:12,079
and you could register for one

00:40:09,839 --> 00:40:14,079
especially the one coming up next week

00:40:12,079 --> 00:40:17,040
but i am doing a

00:40:14,079 --> 00:40:18,079
free giveaway for all of you all here

00:40:17,040 --> 00:40:21,119
right now

00:40:18,079 --> 00:40:22,160
so if you go to my site ben mvp.com like

00:40:21,119 --> 00:40:24,960
i said

00:40:22,160 --> 00:40:25,599
find one of those mini shops um that you

00:40:24,960 --> 00:40:28,160
like and

00:40:25,599 --> 00:40:29,839
that you could actually attend and send

00:40:28,160 --> 00:40:32,319
out a tweet

00:40:29,839 --> 00:40:33,119
with the link and tag me in it so i know

00:40:32,319 --> 00:40:35,920
you did it

00:40:33,119 --> 00:40:37,599
and i will pick one a person randomly

00:40:35,920 --> 00:40:40,319
and give you a free ticket to whatever

00:40:37,599 --> 00:40:41,200
mini shop you wanted to go to all right

00:40:40,319 --> 00:40:44,560
so

00:40:41,200 --> 00:40:48,800
yeah just find the mini shop and

00:40:44,560 --> 00:40:51,839
uh tweet it out and i'll find one of you

00:40:48,800 --> 00:40:53,520
so that's it uh i just flooded you with

00:40:51,839 --> 00:40:57,040
a whole lot of information

00:40:53,520 --> 00:41:00,560
um reminder the slides are available

00:40:57,040 --> 00:41:01,119
online here um i even will include in

00:41:00,560 --> 00:41:04,000
the chat

00:41:01,119 --> 00:41:06,000
a link to the slides there so you can

00:41:04,000 --> 00:41:08,960
follow those if you missed it

00:41:06,000 --> 00:41:09,920
hopefully you learned a lot of things

00:41:08,960 --> 00:41:11,280
and these are

00:41:09,920 --> 00:41:12,720
and these are things that you can apply

00:41:11,280 --> 00:41:13,920
right away in the libraries that you

00:41:12,720 --> 00:41:16,240
work on

00:41:13,920 --> 00:41:17,280
i likely forgot some things or there's

00:41:16,240 --> 00:41:19,200
lots of other

00:41:17,280 --> 00:41:20,400
options as well so i would love the

00:41:19,200 --> 00:41:22,079
feedback keep

00:41:20,400 --> 00:41:24,640
give me the feedback especially those

00:41:22,079 --> 00:41:27,040
that have already been in the chat

00:41:24,640 --> 00:41:28,880
so thank you for attending my talk there

00:41:27,040 --> 00:41:29,440
are tons of other talks going on right

00:41:28,880 --> 00:41:31,760
now so

00:41:29,440 --> 00:41:33,119
i appreciate you coming and if you've

00:41:31,760 --> 00:41:35,359
got questions we have

00:41:33,119 --> 00:41:36,480
maybe five minutes or so that we can

00:41:35,359 --> 00:41:39,040
discuss q a

00:41:36,480 --> 00:41:41,520
after this but if there's not enough

00:41:39,040 --> 00:41:44,560
time or you want to ask me separately

00:41:41,520 --> 00:41:48,079
feel free to reach out to me on twitter

00:41:44,560 --> 00:41:49,520
at ben mvp so thank you so much

00:41:48,079 --> 00:41:52,000
enjoy the remaining hours of the

00:41:49,520 --> 00:41:53,520
conference thank you

00:41:52,000 --> 00:41:56,000
thanks ben i'm imagining you all you

00:41:53,520 --> 00:41:58,480
know a rousing round of applause

00:41:56,000 --> 00:41:59,760
right now that you're all giving me i

00:41:58,480 --> 00:42:02,319
can hear it

00:41:59,760 --> 00:42:03,680
nice i see one question right now in the

00:42:02,319 --> 00:42:07,040
q a ben

00:42:03,680 --> 00:42:07,920
yeah and okay thank you all for

00:42:07,040 --> 00:42:09,680
attending and

00:42:07,920 --> 00:42:11,359
uh after this the next session begins at

00:42:09,680 --> 00:42:12,319
2 30. that's all you've been okay so

00:42:11,359 --> 00:42:15,520
you're done

00:42:12,319 --> 00:42:17,680
cool so let me look at this q a q a says

00:42:15,520 --> 00:42:19,119
for a library intended to be purely for

00:42:17,680 --> 00:42:23,200
the browser

00:42:19,119 --> 00:42:26,800
for browser use is cjs dist version

00:42:23,200 --> 00:42:29,119
still useful so purely for the browser

00:42:26,800 --> 00:42:30,240
so if you're using webpack webpack uses

00:42:29,119 --> 00:42:33,520
ecmascript modules

00:42:30,240 --> 00:42:36,960
so you really don't need cjs

00:42:33,520 --> 00:42:39,359
so depending on what module i guess what

00:42:36,960 --> 00:42:40,400
yeah what module system using webpack or

00:42:39,359 --> 00:42:43,440
rollup or whatever

00:42:40,400 --> 00:42:44,640
they all have esm so you may not need a

00:42:43,440 --> 00:42:47,119
cjs

00:42:44,640 --> 00:42:48,079
a dist technically is something

00:42:47,119 --> 00:42:51,040
different a dist

00:42:48,079 --> 00:42:51,760
is a bundle so it's like the whole

00:42:51,040 --> 00:42:55,520
library

00:42:51,760 --> 00:42:57,599
in one file as opposed to having

00:42:55,520 --> 00:42:58,720
different files that are transpiled

00:42:57,599 --> 00:43:02,400
which is how

00:42:58,720 --> 00:43:03,359
esm and cjs work so that's a third

00:43:02,400 --> 00:43:05,359
version

00:43:03,359 --> 00:43:07,599
but you generally don't want that

00:43:05,359 --> 00:43:10,160
because then

00:43:07,599 --> 00:43:10,880
they're including the whole package all

00:43:10,160 --> 00:43:14,560
at once

00:43:10,880 --> 00:43:17,040
so yeah

00:43:14,560 --> 00:43:18,720
there was a question in the chat during

00:43:17,040 --> 00:43:21,760
it that i couldn't

00:43:18,720 --> 00:43:25,119
read while i was going

00:43:21,760 --> 00:43:28,400
oh so why use babble and tsc

00:43:25,119 --> 00:43:31,359
when you can do both with tsc yeah

00:43:28,400 --> 00:43:32,960
so uh quickly i'll answer that one so um

00:43:31,359 --> 00:43:35,680
i prefer babel for

00:43:32,960 --> 00:43:36,240
transpiling and typescript for type

00:43:35,680 --> 00:43:37,839
checking

00:43:36,240 --> 00:43:39,200
because obviously typescript needs to

00:43:37,839 --> 00:43:41,520
type check there's no question about

00:43:39,200 --> 00:43:43,760
that but the babel ecosystem

00:43:41,520 --> 00:43:45,040
for transpiling is much better than

00:43:43,760 --> 00:43:47,200
typescript

00:43:45,040 --> 00:43:49,359
even typescript emits it on their page

00:43:47,200 --> 00:43:51,200
so you have all the plugins for react

00:43:49,359 --> 00:43:54,240
and other things and even the staged

00:43:51,200 --> 00:43:55,280
presets babel preset and all that stuff

00:43:54,240 --> 00:43:57,760
around babel it's

00:43:55,280 --> 00:43:59,520
much better at transpiling than uh

00:43:57,760 --> 00:44:02,000
typescript is in my opinion

00:43:59,520 --> 00:44:03,520
and other people believe that as well so

00:44:02,000 --> 00:44:07,280
i separate them

00:44:03,520 --> 00:44:09,839
um with separate them from themselves

00:44:07,280 --> 00:44:10,640
and generally your library or your app

00:44:09,839 --> 00:44:13,200
is already

00:44:10,640 --> 00:44:14,720
in using babel for whatever reason so

00:44:13,200 --> 00:44:16,960
now adding typescript

00:44:14,720 --> 00:44:19,040
after the fact is a lot easier because

00:44:16,960 --> 00:44:19,599
you can add the preset instead of having

00:44:19,040 --> 00:44:23,280
to

00:44:19,599 --> 00:44:27,440
move everything over to typescript

00:44:23,280 --> 00:44:30,880
there so that's a good question

00:44:27,440 --> 00:44:32,400
thanks john um oh one other question

00:44:30,880 --> 00:44:32,960
let's see how fast i can answer it and

00:44:32,400 --> 00:44:35,760
read it

00:44:32,960 --> 00:44:36,240
how does your ts config figure into your

00:44:35,760 --> 00:44:39,200
jest

00:44:36,240 --> 00:44:40,319
setup do the plugins you mentioned use

00:44:39,200 --> 00:44:43,680
it

00:44:40,319 --> 00:44:47,280
um i don't know how ts config

00:44:43,680 --> 00:44:49,359
and jest are related um

00:44:47,280 --> 00:44:50,880
but i will say i make my just config

00:44:49,359 --> 00:44:53,760
super strict

00:44:50,880 --> 00:44:55,200
because if i'm adopting typescript then

00:44:53,760 --> 00:44:58,160
there's no point in being

00:44:55,200 --> 00:44:58,400
loose about it might as well just uh go

00:44:58,160 --> 00:45:00,560
all

00:44:58,400 --> 00:45:02,000
in and make sure that you everything is

00:45:00,560 --> 00:45:04,240
typed

00:45:02,000 --> 00:45:05,520
but i'm not quite sure i understand the

00:45:04,240 --> 00:45:08,720
question

00:45:05,520 --> 00:45:12,079
do plugins you use mention you use it

00:45:08,720 --> 00:45:14,000
so just uses babel

00:45:12,079 --> 00:45:16,160
in order to transpile its stuff to run

00:45:14,000 --> 00:45:18,319
jest so then if

00:45:16,160 --> 00:45:19,680
i have already transpiling typescript

00:45:18,319 --> 00:45:22,800
and babel

00:45:19,680 --> 00:45:26,319
then just would also use um

00:45:22,800 --> 00:45:29,200
babel as well and that plugin uses ts

00:45:26,319 --> 00:45:30,240
config if that makes sense so they all

00:45:29,200 --> 00:45:35,119
kind of go together

00:45:30,240 --> 00:45:35,119
in the same ecosystem there

00:45:36,800 --> 00:45:41,040
yeah any last-minute questions i really

00:45:39,200 --> 00:45:44,160
appreciate all the questions

00:45:41,040 --> 00:45:45,520
all the uh interactions in the chat as

00:45:44,160 --> 00:45:49,839
we were going

00:45:45,520 --> 00:45:50,560
and such so oh i even got claps in the

00:45:49,839 --> 00:45:53,200
chat thanks

00:45:50,560 --> 00:45:56,160
ingrid i knew there was a rousing round

00:45:53,200 --> 00:45:56,160
of applause somewhere

00:45:57,280 --> 00:46:02,960
cool we're done

00:46:00,880 --> 00:46:04,480
is that it we're done whenever you're

00:46:02,960 --> 00:46:06,400
done yep okay

00:46:04,480 --> 00:46:07,680
i mean that doesn't seem to be any other

00:46:06,400 --> 00:46:09,040
questions and i don't see anything in

00:46:07,680 --> 00:46:11,440
the chat so

00:46:09,040 --> 00:46:12,560
i'll leave it open for the the next

00:46:11,440 --> 00:46:15,839
person

00:46:12,560 --> 00:46:15,839

YouTube URL: https://www.youtube.com/watch?v=Drli_MNdCts


