Title: Crushing React bugs with Jest and Enzyme - Jannaee Sick
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Front-End Developer Track
Description: 
	Presented by: Jannaee Sick, IBM
Presented at All Things Open 2020 - Front-End Developer Track

Abstract: I will reveal the lessons I learned while discovering how to test React components using Jest and Enzyme, an open source testing framework built specifically for use with React. This talk will be centered around my personal experience of building one of the applications for the Red Hat Marketplace, an open cloud marketplace. I will reveal tips on how to enhance your applications by ensuring it's bug free using the best features of Enzyme. In contrast, I will also expose the pitfalls of using Enzyme and the best ways to overcome them. Attendees will learn how to install and run Enzyme as well as how to debug their applications.
Captions: 
	00:00:05,279 --> 00:00:09,599
i'm excited to be here today guys

00:00:07,600 --> 00:00:10,960
uh robert already someone from the

00:00:09,599 --> 00:00:12,880
audience helped me uh

00:00:10,960 --> 00:00:14,799
pressure bug on this title so i'm

00:00:12,880 --> 00:00:15,519
excited to you know share some more with

00:00:14,799 --> 00:00:17,600
you all

00:00:15,519 --> 00:00:18,880
but again my name is janae sick we will

00:00:17,600 --> 00:00:21,680
be going over

00:00:18,880 --> 00:00:24,320
um how to do testing with the chest and

00:00:21,680 --> 00:00:28,960
enzyme and this is a light introduction

00:00:24,320 --> 00:00:30,640
into unit testing i wrote this talk for

00:00:28,960 --> 00:00:33,520
for those of you who are new into

00:00:30,640 --> 00:00:37,840
testing or interested in getting started

00:00:33,520 --> 00:00:40,719
and also those of you who um may be

00:00:37,840 --> 00:00:41,760
um uh building react components and

00:00:40,719 --> 00:00:44,879
looking to

00:00:41,760 --> 00:00:46,559
to test those so a bit about me i'm a

00:00:44,879 --> 00:00:48,480
friend developer at ibm

00:00:46,559 --> 00:00:50,399
but i work on the red hat marketplace

00:00:48,480 --> 00:00:52,239
team i know that's weird but

00:00:50,399 --> 00:00:54,320
um if you want to find out more about

00:00:52,239 --> 00:00:56,640
our product and our team

00:00:54,320 --> 00:00:57,440
i've included that link in there in my

00:00:56,640 --> 00:00:58,640
slide

00:00:57,440 --> 00:01:00,879
but essentially we've built a

00:00:58,640 --> 00:01:02,640
marketplace for developers to explore

00:01:00,879 --> 00:01:03,920
create and deploy container-based

00:01:02,640 --> 00:01:06,799
software and

00:01:03,920 --> 00:01:08,799
um my responsibility on my swat is to

00:01:06,799 --> 00:01:11,439
help create and implement react

00:01:08,799 --> 00:01:12,799
uh user interfaces so i've been there

00:01:11,439 --> 00:01:15,520
i've been with ibm for

00:01:12,799 --> 00:01:16,640
about a year next week and i've been in

00:01:15,520 --> 00:01:19,680
a non-stop

00:01:16,640 --> 00:01:23,280
learning mode uh so some facts about me

00:01:19,680 --> 00:01:24,000
i started with zero experience in unit

00:01:23,280 --> 00:01:26,159
testing

00:01:24,000 --> 00:01:27,680
and three percent experience building

00:01:26,159 --> 00:01:30,479
react components

00:01:27,680 --> 00:01:31,759
um actually no that number is arbitrary

00:01:30,479 --> 00:01:34,079
but the point is

00:01:31,759 --> 00:01:35,600
uh this has been a huge uh learning year

00:01:34,079 --> 00:01:38,799
for me our team

00:01:35,600 --> 00:01:39,680
works with uh typescript um i've learned

00:01:38,799 --> 00:01:41,840
how to do that and

00:01:39,680 --> 00:01:43,200
interface our data and write react

00:01:41,840 --> 00:01:44,640
components and

00:01:43,200 --> 00:01:46,640
you know we work in a continuous

00:01:44,640 --> 00:01:48,000
integration and um

00:01:46,640 --> 00:01:50,479
agile environment so we're constantly

00:01:48,000 --> 00:01:51,840
pushing the production and nothing

00:01:50,479 --> 00:01:53,520
i think the most challenging thing for

00:01:51,840 --> 00:01:56,479
me has been unit testing

00:01:53,520 --> 00:01:57,119
so i wanted to force myself to get

00:01:56,479 --> 00:01:59,119
better

00:01:57,119 --> 00:02:01,680
which is why i've done this presentation

00:01:59,119 --> 00:02:04,399
to do a deeper dive and i want to share

00:02:01,680 --> 00:02:06,079
with you um what it's been like from a

00:02:04,399 --> 00:02:08,000
beginner's perspective and maybe give

00:02:06,079 --> 00:02:09,759
you some tips and stuff that might help

00:02:08,000 --> 00:02:12,000
you on your journey as well

00:02:09,759 --> 00:02:13,760
hey janae sir sir to interrupt uh we

00:02:12,000 --> 00:02:14,640
don't see your slides if you started uh

00:02:13,760 --> 00:02:17,680
sharing

00:02:14,640 --> 00:02:19,120
we i have started sharing that is so

00:02:17,680 --> 00:02:23,840
unfortunate you guys missed out some

00:02:19,120 --> 00:02:23,840
really cool stuff

00:02:24,879 --> 00:02:28,940
how about

00:02:25,850 --> 00:02:28,940
[Music]

00:02:29,680 --> 00:02:36,239
now cool got it

00:02:32,800 --> 00:02:38,160
yeah we are webex at ibm so all this

00:02:36,239 --> 00:02:42,160
stuff

00:02:38,160 --> 00:02:42,560
um but you guys are here just in time

00:02:42,160 --> 00:02:45,920
for

00:02:42,560 --> 00:02:47,440
the agenda which is um we're going to go

00:02:45,920 --> 00:02:48,800
over unit testing like the importance of

00:02:47,440 --> 00:02:50,800
inter unit testing

00:02:48,800 --> 00:02:52,560
how to install it run our first test and

00:02:50,800 --> 00:02:56,560
if we have time take a peek at

00:02:52,560 --> 00:02:56,560
what a code coverage would look like

00:02:59,360 --> 00:03:05,760
so unit testing generally speaking is um

00:03:03,040 --> 00:03:07,440
it's it's testing it's a way of testing

00:03:05,760 --> 00:03:08,319
the smallest pieces of code within a

00:03:07,440 --> 00:03:11,280
system

00:03:08,319 --> 00:03:12,720
so in context with react it's taking a

00:03:11,280 --> 00:03:14,560
single react component

00:03:12,720 --> 00:03:16,000
and you turn it into a really small

00:03:14,560 --> 00:03:18,720
block of um

00:03:16,000 --> 00:03:19,120
code that is called a test suite and you

00:03:18,720 --> 00:03:21,440
may

00:03:19,120 --> 00:03:23,040
essentially make an assertion which

00:03:21,440 --> 00:03:24,080
basically you're saying this is what i

00:03:23,040 --> 00:03:26,640
expect

00:03:24,080 --> 00:03:28,799
my code to do when i match it with a

00:03:26,640 --> 00:03:30,080
specific condition

00:03:28,799 --> 00:03:32,000
and if it doesn't work then you know

00:03:30,080 --> 00:03:34,080
you've got a bug and if it does

00:03:32,000 --> 00:03:35,680
then you can go celebrate but um there

00:03:34,080 --> 00:03:38,720
are some downsides to

00:03:35,680 --> 00:03:40,720
uh unit testing you will have more code

00:03:38,720 --> 00:03:41,440
to maintain and sometimes it takes just

00:03:40,720 --> 00:03:45,040
as long

00:03:41,440 --> 00:03:46,799
to write the test but the advantages are

00:03:45,040 --> 00:03:49,840
it helps build your confidence

00:03:46,799 --> 00:03:51,360
in your code and um it makes you feel

00:03:49,840 --> 00:03:53,040
more confident about what you're pushing

00:03:51,360 --> 00:03:55,360
out into production

00:03:53,040 --> 00:03:57,680
so um and this of course can alleviate

00:03:55,360 --> 00:03:58,640
your time as the developer from manually

00:03:57,680 --> 00:04:01,680
checking code

00:03:58,640 --> 00:04:04,560
with every change um

00:04:01,680 --> 00:04:05,439
just uh one of the frameworks that we'll

00:04:04,560 --> 00:04:07,920
be covering

00:04:05,439 --> 00:04:08,799
is actually a testing framework created

00:04:07,920 --> 00:04:11,599
by uh

00:04:08,799 --> 00:04:12,400
created by facebook and we will use it

00:04:11,599 --> 00:04:14,640
mostly for

00:04:12,400 --> 00:04:17,199
creating the assertions and snapshots um

00:04:14,640 --> 00:04:19,680
it generates code coverage reports

00:04:17,199 --> 00:04:21,519
uh it's really cool because it has

00:04:19,680 --> 00:04:22,479
basically zero configuration it works

00:04:21,519 --> 00:04:25,520
with typescript

00:04:22,479 --> 00:04:28,400
and is highly recommended

00:04:25,520 --> 00:04:29,120
and pushed by react so everything's kind

00:04:28,400 --> 00:04:32,400
of built in

00:04:29,120 --> 00:04:34,720
already i'm ready to go well enzyme is a

00:04:32,400 --> 00:04:37,040
testing utility it's also open source

00:04:34,720 --> 00:04:37,840
created by airbnb not managed by them

00:04:37,040 --> 00:04:39,919
anymore

00:04:37,840 --> 00:04:41,120
but the reason you'd want to use that is

00:04:39,919 --> 00:04:44,320
because it'll help you

00:04:41,120 --> 00:04:47,759
easily traverse your uh nodes and your

00:04:44,320 --> 00:04:51,360
code and it's very similar to jquery

00:04:47,759 --> 00:04:55,440
um so that i think

00:04:51,360 --> 00:04:55,440
might be appealing to some some folks

00:04:55,759 --> 00:05:00,479
and as for setup um it's pretty

00:04:58,720 --> 00:05:03,039
straightforward

00:05:00,479 --> 00:05:04,560
uh that i include a lot of uh

00:05:03,039 --> 00:05:06,400
information on how to get this started

00:05:04,560 --> 00:05:11,680
but i just want to point out that you do

00:05:06,400 --> 00:05:13,840
want to uh set up um an adapter

00:05:11,680 --> 00:05:14,720
to connect to uh enzyme and you want to

00:05:13,840 --> 00:05:16,880
configure it to the

00:05:14,720 --> 00:05:18,720
version react you're using you're going

00:05:16,880 --> 00:05:21,520
to do the the usual stuff here

00:05:18,720 --> 00:05:21,919
import your enzyme import components

00:05:21,520 --> 00:05:23,520
from

00:05:21,919 --> 00:05:26,160
the proper libraries including

00:05:23,520 --> 00:05:28,400
configuring your adapter

00:05:26,160 --> 00:05:29,440
um and then you can choose between

00:05:28,400 --> 00:05:31,840
configuring

00:05:29,440 --> 00:05:32,800
uh like how you want your code uh

00:05:31,840 --> 00:05:34,800
coverage

00:05:32,800 --> 00:05:36,320
um where it's collected from where you

00:05:34,800 --> 00:05:38,400
want to put it

00:05:36,320 --> 00:05:40,160
in your package.json file or you can

00:05:38,400 --> 00:05:42,880
bring your just config i prefer

00:05:40,160 --> 00:05:44,639
package.json so i could just have it all

00:05:42,880 --> 00:05:46,320
i did create all of this and push it up

00:05:44,639 --> 00:05:47,680
into a repo so you can kind of take a

00:05:46,320 --> 00:05:50,320
look at that

00:05:47,680 --> 00:05:51,360
um and then also snapshot serializer is

00:05:50,320 --> 00:05:54,240
pretty cool

00:05:51,360 --> 00:05:55,199
it allows you to see your snapshots in

00:05:54,240 --> 00:05:58,479
kind of a

00:05:55,199 --> 00:06:00,000
not in a more readable layout and we'll

00:05:58,479 --> 00:06:03,039
get more into that

00:06:00,000 --> 00:06:05,840
later i built this uh

00:06:03,039 --> 00:06:06,479
little component with the carbon design

00:06:05,840 --> 00:06:09,039
system

00:06:06,479 --> 00:06:10,880
so that's open source too and um it's

00:06:09,039 --> 00:06:13,280
just a super simple form

00:06:10,880 --> 00:06:15,039
that oddly weirdly isn't really

00:06:13,280 --> 00:06:17,199
something you do would launch a modal

00:06:15,039 --> 00:06:18,960
instead of submit but um just i want to

00:06:17,199 --> 00:06:22,160
throw in some elements for you to

00:06:18,960 --> 00:06:24,319
see how to interact

00:06:22,160 --> 00:06:25,840
and how we will be interacting with this

00:06:24,319 --> 00:06:29,680
so this is

00:06:25,840 --> 00:06:33,199
a very basic component a react component

00:06:29,680 --> 00:06:36,479
where we have just um one element

00:06:33,199 --> 00:06:38,000
being uh being returned from the ato

00:06:36,479 --> 00:06:40,319
form

00:06:38,000 --> 00:06:43,120
and um just really basic titles some

00:06:40,319 --> 00:06:46,360
stuff that you would see

00:06:43,120 --> 00:06:47,520
the uh companion to this is the ato

00:06:46,360 --> 00:06:49,280
forum.test.js

00:06:47,520 --> 00:06:51,520
file and this is how you would get

00:06:49,280 --> 00:06:54,400
started with creating your tests

00:06:51,520 --> 00:06:55,120
you'd import again the usual suspects

00:06:54,400 --> 00:06:58,639
here

00:06:55,120 --> 00:07:00,080
you would import a shallow handler from

00:06:58,639 --> 00:07:02,479
inside because

00:07:00,080 --> 00:07:04,479
you're going to go into uh the

00:07:02,479 --> 00:07:08,400
importance of those two

00:07:04,479 --> 00:07:08,400
um functions

00:07:09,599 --> 00:07:13,840
and then when you to get started with

00:07:12,479 --> 00:07:14,400
writing the test the first thing you'd

00:07:13,840 --> 00:07:17,280
want to do

00:07:14,400 --> 00:07:17,759
is use the describe keyword or this

00:07:17,280 --> 00:07:19,759
function

00:07:17,759 --> 00:07:20,880
essentially it just takes in a string

00:07:19,759 --> 00:07:22,639
and then

00:07:20,880 --> 00:07:24,800
the callback will be the rest of the

00:07:22,639 --> 00:07:28,240
test but i wanted to point out that

00:07:24,800 --> 00:07:30,160
this string it's important for you to

00:07:28,240 --> 00:07:31,440
describe in a way that's that's legible

00:07:30,160 --> 00:07:33,759
because you can easily

00:07:31,440 --> 00:07:34,560
get write a lot of code and get lost in

00:07:33,759 --> 00:07:37,360
what

00:07:34,560 --> 00:07:38,240
each test is doing so the best practice

00:07:37,360 --> 00:07:40,080
is to

00:07:38,240 --> 00:07:41,840
choose one of the three categories

00:07:40,080 --> 00:07:44,639
describing what you're going to be doing

00:07:41,840 --> 00:07:45,919
with that uh component so in this case

00:07:44,639 --> 00:07:46,800
we're going to be describing all the

00:07:45,919 --> 00:07:49,120
tests

00:07:46,800 --> 00:07:51,199
that will be rendering the ato form

00:07:49,120 --> 00:07:54,240
component

00:07:51,199 --> 00:07:56,800
and then the next block

00:07:54,240 --> 00:07:59,199
is an it keyword you're going to pass

00:07:56,800 --> 00:08:02,560
out a string as well and in this

00:07:59,199 --> 00:08:05,039
you want to also describe

00:08:02,560 --> 00:08:05,919
exactly what this set this block will be

00:08:05,039 --> 00:08:07,360
doing

00:08:05,919 --> 00:08:09,599
and in this case we're going to be

00:08:07,360 --> 00:08:12,639
creating a snapshot

00:08:09,599 --> 00:08:15,520
and a snapshot is essentially a

00:08:12,639 --> 00:08:18,160
um a fragment an html fragment a

00:08:15,520 --> 00:08:20,560
representation of your code in html

00:08:18,160 --> 00:08:22,879
that's a snapshot in time of what your

00:08:20,560 --> 00:08:24,560
code looked like when you ran that test

00:08:22,879 --> 00:08:26,479
so in this line 10 what we're saying is

00:08:24,560 --> 00:08:30,800
we're expecting to

00:08:26,479 --> 00:08:34,240
um have passed in a shallowly

00:08:30,800 --> 00:08:34,560
wrapped ato form component and when i

00:08:34,240 --> 00:08:37,680
say

00:08:34,560 --> 00:08:38,399
shallow i'm describing um kind of the

00:08:37,680 --> 00:08:41,279
power of

00:08:38,399 --> 00:08:42,159
the testing libraries shallow allows you

00:08:41,279 --> 00:08:44,560
to

00:08:42,159 --> 00:08:45,839
render that component in a way that

00:08:44,560 --> 00:08:48,240
you're only accessing

00:08:45,839 --> 00:08:49,200
a small part with no children of that

00:08:48,240 --> 00:08:51,920
component

00:08:49,200 --> 00:08:54,000
that's making sense um and then we'll

00:08:51,920 --> 00:08:55,760
also talk about mount where you're fully

00:08:54,000 --> 00:08:57,839
rendering your entire component and the

00:08:55,760 --> 00:09:00,399
reason you would choose between the two

00:08:57,839 --> 00:09:01,680
is that perhaps you don't want to test

00:09:00,399 --> 00:09:03,360
all of the component maybe you just want

00:09:01,680 --> 00:09:06,160
to test the title and you don't need to

00:09:03,360 --> 00:09:09,839
go through all of the component and that

00:09:06,160 --> 00:09:09,839
will help you with your performance

00:09:13,279 --> 00:09:19,120
so let's see here um once you've

00:09:17,440 --> 00:09:20,720
you've set up your tests you're ready to

00:09:19,120 --> 00:09:22,880
run it

00:09:20,720 --> 00:09:24,560
you do you could do a i'm doing i'm

00:09:22,880 --> 00:09:26,800
using yarn for my test manager so i

00:09:24,560 --> 00:09:29,920
would do a yarn test and a watch

00:09:26,800 --> 00:09:32,160
uh just so that i could see um i can

00:09:29,920 --> 00:09:34,240
keep modifying without having to

00:09:32,160 --> 00:09:36,160
keep saving and reload manually

00:09:34,240 --> 00:09:38,880
reloading this will do it for me

00:09:36,160 --> 00:09:40,000
but you can see all of the tests will

00:09:38,880 --> 00:09:41,600
pass

00:09:40,000 --> 00:09:43,360
in this case all it's really doing is

00:09:41,600 --> 00:09:45,519
testing uh

00:09:43,360 --> 00:09:47,200
if there's a snapshot if there's a

00:09:45,519 --> 00:09:48,959
snapshot and this is the first time i

00:09:47,200 --> 00:09:51,440
ran it so it will match it

00:09:48,959 --> 00:09:52,399
and then secondly is checking for a

00:09:51,440 --> 00:09:54,240
title

00:09:52,399 --> 00:09:56,320
um so these are super simple tests that

00:09:54,240 --> 00:09:58,160
you probably wouldn't do we can get way

00:09:56,320 --> 00:09:58,959
more complicated but for the sake of

00:09:58,160 --> 00:10:01,600
time

00:09:58,959 --> 00:10:03,279
we're doing these super simples and as

00:10:01,600 --> 00:10:06,160
you can see this would be

00:10:03,279 --> 00:10:07,200
a snapshot result so this will

00:10:06,160 --> 00:10:09,040
automatically based on your

00:10:07,200 --> 00:10:11,040
configuration get dumped into a

00:10:09,040 --> 00:10:14,200
snapshots folder

00:10:11,040 --> 00:10:16,000
and you'll see something your your

00:10:14,200 --> 00:10:20,000
component.test.js.snap

00:10:16,000 --> 00:10:23,040
and this is that html rendering

00:10:20,000 --> 00:10:24,800
um next you'll see

00:10:23,040 --> 00:10:26,800
what will happen if you do change

00:10:24,800 --> 00:10:27,279
something and what will happen with your

00:10:26,800 --> 00:10:30,480
test

00:10:27,279 --> 00:10:33,600
so as you see in line eight here um i

00:10:30,480 --> 00:10:37,440
changed our test subject to now read

00:10:33,600 --> 00:10:40,480
our subject and if i ran the test again

00:10:37,440 --> 00:10:43,600
um when we would get

00:10:40,480 --> 00:10:44,560
a new view of this uh result we would

00:10:43,600 --> 00:10:46,560
get a failure

00:10:44,560 --> 00:10:49,040
and you see all of our nice check marks

00:10:46,560 --> 00:10:49,680
one that turned into an x on line four

00:10:49,040 --> 00:10:51,279
because

00:10:49,680 --> 00:10:52,720
that's where we're having the problem

00:10:51,279 --> 00:10:53,279
and then i'll go into a little bit more

00:10:52,720 --> 00:10:55,920
detail

00:10:53,279 --> 00:10:56,880
we'll show you um how your assertion is

00:10:55,920 --> 00:10:59,279
no longer right

00:10:56,880 --> 00:11:00,000
it's saying you know we expected to

00:10:59,279 --> 00:11:03,360
receive

00:11:00,000 --> 00:11:05,360
true but we got a false um as you see in

00:11:03,360 --> 00:11:08,640
line 21

00:11:05,360 --> 00:11:11,360
that's because we we changed that title

00:11:08,640 --> 00:11:13,279
and it's pointing it out i can't see if

00:11:11,360 --> 00:11:16,959
i can

00:11:13,279 --> 00:11:18,160
these this mouse okay you can use your

00:11:16,959 --> 00:11:22,320
imagination but

00:11:18,160 --> 00:11:25,920
that now says to be uh true

00:11:22,320 --> 00:11:25,920
is now a false so

00:11:26,160 --> 00:11:31,120
that is a quick snapshot

00:11:32,000 --> 00:11:38,240
cool um another way you could you can

00:11:35,920 --> 00:11:40,560
see how your test pass or fails

00:11:38,240 --> 00:11:42,399
there's a coverage report if you've

00:11:40,560 --> 00:11:45,839
configured your um

00:11:42,399 --> 00:11:48,959
test you can check out this table

00:11:45,839 --> 00:11:51,120
after you run a test uh it's not doing

00:11:48,959 --> 00:11:51,120
it

00:11:52,639 --> 00:11:56,800
there we go the most important line to

00:11:55,120 --> 00:11:58,399
me the more or the most important column

00:11:56,800 --> 00:12:00,320
to me is this last one that says

00:11:58,399 --> 00:12:02,000
uncovered lines whenever i see this i

00:12:00,320 --> 00:12:05,040
totally panic because

00:12:02,000 --> 00:12:07,200
now i know that there's a problem

00:12:05,040 --> 00:12:10,240
and so what you would do is go into your

00:12:07,200 --> 00:12:13,600
coverage reports folder um

00:12:10,240 --> 00:12:16,000
and you'll see a fresh freshly run

00:12:13,600 --> 00:12:17,440
report cover here and this isn't for

00:12:16,000 --> 00:12:18,880
this code but this is just to give you

00:12:17,440 --> 00:12:19,440
an idea what that looks like when it's

00:12:18,880 --> 00:12:21,440
failing

00:12:19,440 --> 00:12:22,959
so you it'll highlight the line that's

00:12:21,440 --> 00:12:25,839
the actual problem

00:12:22,959 --> 00:12:25,839
for you to address

00:12:26,000 --> 00:12:30,160
and if you go in and modify your code

00:12:28,800 --> 00:12:32,399
and make it work this was

00:12:30,160 --> 00:12:33,440
what your test coverage would look like

00:12:32,399 --> 00:12:36,320
as a pass

00:12:33,440 --> 00:12:36,959
and i'm always looking for that 100

00:12:36,320 --> 00:12:40,079
percent

00:12:36,959 --> 00:12:43,040
um because we have a 100

00:12:40,079 --> 00:12:44,399
uh test coverage rework so this has

00:12:43,040 --> 00:12:48,240
always got to be

00:12:44,399 --> 00:12:51,200
perfect um

00:12:48,240 --> 00:12:52,240
and then my last component here uh just

00:12:51,200 --> 00:12:54,639
will help

00:12:52,240 --> 00:12:55,680
demonstrate um a simulation which is

00:12:54,639 --> 00:12:57,680
another common

00:12:55,680 --> 00:12:59,279
interaction or something you would do to

00:12:57,680 --> 00:13:00,560
check so

00:12:59,279 --> 00:13:02,079
this is the launch component it's

00:13:00,560 --> 00:13:03,360
basically the one that would open up a

00:13:02,079 --> 00:13:05,279
modal

00:13:03,360 --> 00:13:07,440
and you set it up similar to what we did

00:13:05,279 --> 00:13:08,639
previously you describe what it's going

00:13:07,440 --> 00:13:12,560
to do in this case

00:13:08,639 --> 00:13:15,920
it's this set of tests will be

00:13:12,560 --> 00:13:19,040
the interactions for the launch modal

00:13:15,920 --> 00:13:20,160
followed by what it should do which it

00:13:19,040 --> 00:13:23,279
should open the

00:13:20,160 --> 00:13:26,560
launch model when clicked and then um

00:13:23,279 --> 00:13:29,839
we set up our test by you know um

00:13:26,560 --> 00:13:30,880
defining our wrapper as the uh launch

00:13:29,839 --> 00:13:33,440
component

00:13:30,880 --> 00:13:34,639
in its full render which is why we use a

00:13:33,440 --> 00:13:36,639
mount

00:13:34,639 --> 00:13:38,240
um and then when we do a full render

00:13:36,639 --> 00:13:39,839
like that we can have access to all the

00:13:38,240 --> 00:13:41,920
children nodes in there

00:13:39,839 --> 00:13:43,199
so you'll have access to the button and

00:13:41,920 --> 00:13:46,720
that's where we're doing line eight

00:13:43,199 --> 00:13:48,320
where we're taking that uh component and

00:13:46,720 --> 00:13:48,959
we're looking for we're going to find

00:13:48,320 --> 00:13:50,399
the button

00:13:48,959 --> 00:13:52,320
which in this case there were four so

00:13:50,399 --> 00:13:55,199
we're going to find the first button

00:13:52,320 --> 00:13:56,560
and then click it and once we do that we

00:13:55,199 --> 00:13:59,199
know that it's going to

00:13:56,560 --> 00:14:00,079
uh based off of i've already gone to

00:13:59,199 --> 00:14:03,040
code and what i

00:14:00,079 --> 00:14:04,320
see is toggling a visibility state so

00:14:03,040 --> 00:14:08,240
we're going to check for

00:14:04,320 --> 00:14:10,240
a div to see if that now says

00:14:08,240 --> 00:14:11,600
is visible so we're going to find that

00:14:10,240 --> 00:14:14,639
div with an id

00:14:11,600 --> 00:14:15,600
of input modal and we expect now that it

00:14:14,639 --> 00:14:20,079
will have a class

00:14:15,600 --> 00:14:22,160
of is visible and so that should be true

00:14:20,079 --> 00:14:23,760
um so i know it looks like i only have a

00:14:22,160 --> 00:14:26,480
minute um but that is a

00:14:23,760 --> 00:14:27,440
super super brief intro into uh unit

00:14:26,480 --> 00:14:30,560
testing

00:14:27,440 --> 00:14:31,120
i did this because um i had no idea how

00:14:30,560 --> 00:14:34,880
to do it

00:14:31,120 --> 00:14:36,720
and i um have been very challenged

00:14:34,880 --> 00:14:38,639
with this it's been fun but there's

00:14:36,720 --> 00:14:39,519
definitely some some struggling points

00:14:38,639 --> 00:14:41,760
as well

00:14:39,519 --> 00:14:43,600
um and i hope that you know as a

00:14:41,760 --> 00:14:46,639
beginner this might be something

00:14:43,600 --> 00:14:49,440
that will let you know it's not as scary

00:14:46,639 --> 00:14:50,560
and there are a lot of great tools and a

00:14:49,440 --> 00:14:53,839
lot of help out there

00:14:50,560 --> 00:14:56,240
for you to get if you are stuck

00:14:53,839 --> 00:14:57,760
but if you don't want to download and

00:14:56,240 --> 00:15:00,480
install all of this locally i just want

00:14:57,760 --> 00:15:02,480
to point out that code sandbox also has

00:15:00,480 --> 00:15:04,160
a lot of configuration set that you can

00:15:02,480 --> 00:15:05,519
run tests there

00:15:04,160 --> 00:15:07,600
um and you can play around and this is

00:15:05,519 --> 00:15:08,399
just some ones that i um happen to find

00:15:07,600 --> 00:15:11,120
might be

00:15:08,399 --> 00:15:14,320
i think it's kent dots but you can find

00:15:11,120 --> 00:15:16,480
a lot of different uh sandboxes there

00:15:14,320 --> 00:15:18,240
um so yeah these are just some of the

00:15:16,480 --> 00:15:18,639
quotes and things that i've gotten from

00:15:18,240 --> 00:15:21,440
my

00:15:18,639 --> 00:15:22,639
colleagues and uh i think the one that

00:15:21,440 --> 00:15:24,560
stands out the most

00:15:22,639 --> 00:15:26,399
to me was when someone told me you know

00:15:24,560 --> 00:15:28,800
writing tests will help you gain a broad

00:15:26,399 --> 00:15:30,160
understanding of your code base um and

00:15:28,800 --> 00:15:32,160
also can help you become a better

00:15:30,160 --> 00:15:32,800
programmer and that's what i'm striving

00:15:32,160 --> 00:15:35,440
to be

00:15:32,800 --> 00:15:36,000
and what i strive to do so that's why i

00:15:35,440 --> 00:15:38,560
put

00:15:36,000 --> 00:15:39,360
this much emphasis into learning what i

00:15:38,560 --> 00:15:42,720
know now

00:15:39,360 --> 00:15:44,880
about um testing so that's it for me

00:15:42,720 --> 00:15:48,639
these are some resources

00:15:44,880 --> 00:15:55,279
uh including contact for um

00:15:48,639 --> 00:15:57,360
if you have any questions

00:15:55,279 --> 00:15:57,360

YouTube URL: https://www.youtube.com/watch?v=0D1F97y0QTw


