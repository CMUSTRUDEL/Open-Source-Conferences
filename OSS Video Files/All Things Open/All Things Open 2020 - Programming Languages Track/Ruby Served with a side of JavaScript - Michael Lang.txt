Title: Ruby Served with a side of JavaScript - Michael Lang
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Programming Languages Track
Description: 
	Presented by: Michael Lang, New Relic
Presented at All Things Open 2020 - Programming Languages Track

Abstract: This talk focuses on one Ruby team's journey to automating a large complex test matrix for New Relic's Ruby Agent gem using Github Actions. The Ruby Agent at New Relic must service customers ranging from Ruby 2.0 to Ruby 2.7 and particularly Rails 3.x to Rails 6.0, which presented many challenges with running such a large test suite in the modern Continue Integration environment Github Actions offers.

The Github action itself was written in Javascript as that is the language of choice for Github's Toolkit. However, Ruby was also used to solve some of the underlying issues in the builds, so we'll show some deep internals of the multiverse tooling that pre-existed Github Actions and how we adapted and enhanced the Ruby components along the way. This talk will show how we solved building the older, end of life Rubies and setting up the environment, optimizing for speed, and automating all of the Ruby related setups necessary to run the test suite. The test matrix runs nine flavors of Ruby and over 150 containers/jobs for every build.
Captions: 
	00:00:05,200 --> 00:00:10,160
thank you very much for the introduction

00:00:07,040 --> 00:00:13,360
and welcome everyone to my talk about

00:00:10,160 --> 00:00:14,320
serving ruby with javascript if you're a

00:00:13,360 --> 00:00:17,920
ruby developer

00:00:14,320 --> 00:00:17,920
this is a

00:00:29,279 --> 00:00:35,520
to invest in development so it's to say

00:00:32,520 --> 00:00:35,520
foreign

00:00:36,719 --> 00:00:40,960
and my name is michael lane i'm a senior

00:00:39,360 --> 00:00:45,760
software engineer at new york

00:00:40,960 --> 00:00:48,640
and i work in the ruby agent team and

00:00:45,760 --> 00:00:50,320
i am currently a maintainer of what is

00:00:48,640 --> 00:00:53,280
now an open source

00:00:50,320 --> 00:00:54,800
project for the new orleans for the

00:00:53,280 --> 00:00:57,360
review

00:00:54,800 --> 00:00:59,520
and i'm also an open source contributor

00:00:57,360 --> 00:01:00,640
to many projects and i'm a party guard

00:00:59,520 --> 00:01:03,520
because i do ruby

00:01:00,640 --> 00:01:04,400
and i'm now doing javascript i've been

00:01:03,520 --> 00:01:07,760
probably

00:01:04,400 --> 00:01:10,960
15 20 30 languages over the years

00:01:07,760 --> 00:01:12,720
i've lost count and my father

00:01:10,960 --> 00:01:14,880
has been a tennis player a volleyball

00:01:12,720 --> 00:01:15,680
player and i do travel running and

00:01:14,880 --> 00:01:19,119
cooking

00:01:15,680 --> 00:01:21,360
and anything i'm not programming this

00:01:19,119 --> 00:01:23,920
that's where i'm at

00:01:21,360 --> 00:01:25,920
and over the course of my career which

00:01:23,920 --> 00:01:27,119
is three decades at this point i've been

00:01:25,920 --> 00:01:29,520
an entrepreneur

00:01:27,119 --> 00:01:31,040
a consultant specializing in ruby on

00:01:29,520 --> 00:01:34,479
routes and upgrading

00:01:31,040 --> 00:01:38,000
from the from round one and two to three

00:01:34,479 --> 00:01:40,400
all the way up to four and five and then

00:01:38,000 --> 00:01:41,360
the ir america billing company here in

00:01:40,400 --> 00:01:43,920
georgia vrt

00:01:41,360 --> 00:01:46,479
a clinical research assistance builder

00:01:43,920 --> 00:01:47,840
all using ruby up to this point

00:01:46,479 --> 00:01:50,079
by the time i get to the university of

00:01:47,840 --> 00:01:51,119
georgia i was a assistant administration

00:01:50,079 --> 00:01:53,759
running the

00:01:51,119 --> 00:01:55,680
system that runs hospitals in the vet at

00:01:53,759 --> 00:01:59,360
the vert school

00:01:55,680 --> 00:02:02,399
and many many languages

00:01:59,360 --> 00:02:05,680
main databases seamless today

00:02:02,399 --> 00:02:08,959
and last but not least i am almost deaf

00:02:05,680 --> 00:02:10,399
and so profound severe profound hearing

00:02:08,959 --> 00:02:11,920
loss which means

00:02:10,399 --> 00:02:16,000
without hearing aids i pretty much hear

00:02:11,920 --> 00:02:16,000
nothing so i'm gonna look for you

00:02:16,720 --> 00:02:21,200
this story i'm gonna tell you about is

00:02:18,800 --> 00:02:21,200
about

00:02:21,760 --> 00:02:24,959
bringing ruby the ruby agent into the

00:02:24,000 --> 00:02:27,440
open source

00:02:24,959 --> 00:02:29,520
arena and going from closed source

00:02:27,440 --> 00:02:31,599
closed available to open source

00:02:29,520 --> 00:02:32,879
in fired open sourcing we were running

00:02:31,599 --> 00:02:34,720
everything on travis

00:02:32,879 --> 00:02:38,239
continuous integration in our internal

00:02:34,720 --> 00:02:41,680
system we have travis enterprise

00:02:38,239 --> 00:02:42,480
and it's not for not really but that is

00:02:41,680 --> 00:02:45,680
just a ruby

00:02:42,480 --> 00:02:46,319
view on learning javascript so you're

00:02:45,680 --> 00:02:48,560
going to see

00:02:46,319 --> 00:02:51,120
a lot more javascript and ruby in this

00:02:48,560 --> 00:02:52,720
this presentation

00:02:51,120 --> 00:02:54,879
i'm going to show you why we chose

00:02:52,720 --> 00:02:56,720
github actions in javascript over the

00:02:54,879 --> 00:02:58,640
alternative variable

00:02:56,720 --> 00:03:00,560
and then i will show you some examples

00:02:58,640 --> 00:03:02,879
of how we solve various issues

00:03:00,560 --> 00:03:04,800
along the way and some of those

00:03:02,879 --> 00:03:05,599
solutions might be completely surprising

00:03:04,800 --> 00:03:09,360
to some of us

00:03:05,599 --> 00:03:09,360
that occurred in ruby all the time

00:03:10,480 --> 00:03:14,560
so the movie the neural abbreviation

00:03:13,519 --> 00:03:16,800
what is that that

00:03:14,560 --> 00:03:18,000
is a ruby germ for those of you who are

00:03:16,800 --> 00:03:20,000
not rubio

00:03:18,000 --> 00:03:22,159
make sure it's just a practice library

00:03:20,000 --> 00:03:25,120
of related functionality

00:03:22,159 --> 00:03:26,319
and this agent is added into your

00:03:25,120 --> 00:03:28,239
application you

00:03:26,319 --> 00:03:30,640
typically your wireless application and

00:03:28,239 --> 00:03:33,760
it traces your model view controllers

00:03:30,640 --> 00:03:36,959
trace up to middleware all that

00:03:33,760 --> 00:03:39,040
and it tracked the timing of the timing

00:03:36,959 --> 00:03:40,239
and memory usage and heat allocation

00:03:39,040 --> 00:03:42,159
garbage collection

00:03:40,239 --> 00:03:44,000
and other applications performance data

00:03:42,159 --> 00:03:44,879
and sending all up to the call to new

00:03:44,000 --> 00:03:48,319
york

00:03:44,879 --> 00:03:51,040
where the cut way you can then see

00:03:48,319 --> 00:03:53,200
all that dropped out and see usage

00:03:51,040 --> 00:03:54,480
patterns and any kind of outliers

00:03:53,200 --> 00:03:56,799
anything like that

00:03:54,480 --> 00:03:57,760
that will be interested in debugging

00:03:56,799 --> 00:04:00,640
figuring out how to make your

00:03:57,760 --> 00:04:03,360
application faster and more performance

00:04:00,640 --> 00:04:03,360
and so on

00:04:05,280 --> 00:04:08,879
what they presented for us is that

00:04:06,959 --> 00:04:11,599
because we've had this to be on your own

00:04:08,879 --> 00:04:13,439
this review for so many years we have a

00:04:11,599 --> 00:04:16,880
lot of customers that are still in row

00:04:13,439 --> 00:04:19,680
three and four which are also on

00:04:16,880 --> 00:04:20,959
older versions of ruby you cannot move

00:04:19,680 --> 00:04:24,720
out and run it on

00:04:20,959 --> 00:04:26,880
newer versions ruby very easily

00:04:24,720 --> 00:04:28,880
and so we have to support all the way

00:04:26,880 --> 00:04:32,880
back to ruby 2.0

00:04:28,880 --> 00:04:33,440
2.0 one of coldway 2.7 and now with 3.0

00:04:32,880 --> 00:04:38,320
coming out

00:04:33,440 --> 00:04:38,320
christmas will be on movie 3.0 as well

00:04:39,759 --> 00:04:43,680
which means by definition our test

00:04:42,320 --> 00:04:45,840
measures are very

00:04:43,680 --> 00:04:46,800
very large because we have a lot of

00:04:45,840 --> 00:04:50,160
instrumentation

00:04:46,800 --> 00:04:52,479
that go along with all those movies and

00:04:50,160 --> 00:04:54,320
that includes

00:04:52,479 --> 00:04:56,320
the database integration the relative

00:04:54,320 --> 00:04:58,800
integration the

00:04:56,320 --> 00:04:59,919
the background job integration all that

00:04:58,800 --> 00:05:02,639
yeah i mentioned

00:04:59,919 --> 00:05:04,240
explored in travis at the time that we

00:05:02,639 --> 00:05:06,960
were looking to move to get her passion

00:05:04,240 --> 00:05:08,000
we noticed there was 157 total jobs or

00:05:06,960 --> 00:05:10,479
containers

00:05:08,000 --> 00:05:13,680
all running in parallel and we were

00:05:10,479 --> 00:05:16,240
burning 18 to 21 hours of cpu compute

00:05:13,680 --> 00:05:17,600
time for every single build

00:05:16,240 --> 00:05:21,120
and that's between a thousand and

00:05:17,600 --> 00:05:21,120
thirteen hundred minutes per billion

00:05:22,840 --> 00:05:29,039
and if you see where i'm going with this

00:05:25,680 --> 00:05:30,320
and get him action the account only runs

00:05:29,039 --> 00:05:33,759
10 jobs at a time

00:05:30,320 --> 00:05:35,199
not 357 jobs 152 jobs so

00:05:33,759 --> 00:05:37,039
we're kind of looking at this and going

00:05:35,199 --> 00:05:40,240
oh no what are we going to do

00:05:37,039 --> 00:05:41,120
because that translates into two and a

00:05:40,240 --> 00:05:43,360
half hours

00:05:41,120 --> 00:05:44,960
if we just put it exactly what we did in

00:05:43,360 --> 00:05:47,919
travis straight to get him actually

00:05:44,960 --> 00:05:50,080
run it that way during let me tell you

00:05:47,919 --> 00:05:51,520
30 minutes already painful for two and a

00:05:50,080 --> 00:05:54,080
half hours that would be just

00:05:51,520 --> 00:05:55,600
completely excruciating for us and what

00:05:54,080 --> 00:05:56,800
are we going to do

00:05:55,600 --> 00:05:58,960
that's what we're going to talk about

00:05:56,800 --> 00:05:58,960
here

00:05:59,199 --> 00:06:03,039
we wanted to use pre-built ruby but it

00:06:02,160 --> 00:06:06,319
was the problem

00:06:03,039 --> 00:06:09,919
maybe 202.4 at end of life

00:06:06,319 --> 00:06:10,800
meanwhile open ssl 1.1 came out after

00:06:09,919 --> 00:06:15,120
ruby

00:06:10,800 --> 00:06:18,160
2.4 which was in their life as well

00:06:15,120 --> 00:06:21,440
opened up that that 1.0 was involved

00:06:18,160 --> 00:06:24,080
and ruby from 2.4 and earlier

00:06:21,440 --> 00:06:24,880
did not compile and run on the open ssl

00:06:24,080 --> 00:06:28,479
1.1

00:06:24,880 --> 00:06:31,680
they need 1.0 and that's because the

00:06:28,479 --> 00:06:34,000
open ssl 1.1 api changed just enough

00:06:31,680 --> 00:06:34,880
from 1.00 at the end of our tribute no

00:06:34,000 --> 00:06:38,479
one can power

00:06:34,880 --> 00:06:40,000
against that latest version and so the

00:06:38,479 --> 00:06:41,680
first thing we did was look at all the

00:06:40,000 --> 00:06:44,479
gameplans that are out there that

00:06:41,680 --> 00:06:47,039
actually build and run ruby

00:06:44,479 --> 00:06:47,759
when the most well maintained one comes

00:06:47,039 --> 00:06:51,680
to really

00:06:47,759 --> 00:06:52,800
fast therapy and what we discover is

00:06:51,680 --> 00:06:54,960
that even their own

00:06:52,800 --> 00:06:56,560
resumes are broken it's from our point

00:06:54,960 --> 00:06:57,919
of view so it's like a growing assault

00:06:56,560 --> 00:06:59,919
on that

00:06:57,919 --> 00:07:01,360
not reflective on the quality of the

00:06:59,919 --> 00:07:04,880
work these guys are doing

00:07:01,360 --> 00:07:07,199
with the ruby set up ruby it's just

00:07:04,880 --> 00:07:08,400
uh it didn't work for us it's nothing we

00:07:07,199 --> 00:07:10,880
didn't know why

00:07:08,400 --> 00:07:13,840
and we became a rabbit hole to dig in

00:07:10,880 --> 00:07:16,319
and try to figure out all that

00:07:13,840 --> 00:07:18,000
and the first photo we have to do is

00:07:16,319 --> 00:07:21,919
figure out how we're going to put

00:07:18,000 --> 00:07:23,199
all the ruby and that was something we

00:07:21,919 --> 00:07:24,960
needed to solve first

00:07:23,199 --> 00:07:27,440
and that was where we put all our focus

00:07:24,960 --> 00:07:29,759
at the beginning

00:07:27,440 --> 00:07:31,360
and just to show you an example of what

00:07:29,759 --> 00:07:33,520
we were running into with the openness

00:07:31,360 --> 00:07:37,039
that's our library this is

00:07:33,520 --> 00:07:39,840
an example of openness ssl calling out

00:07:37,039 --> 00:07:40,560
a not undefined symbol ssl version 2

00:07:39,840 --> 00:07:43,039
method

00:07:40,560 --> 00:07:47,120
which is just basically the difference

00:07:43,039 --> 00:07:47,120
that we were talking about with the apis

00:07:47,599 --> 00:07:53,280
and this is another example where

00:07:51,039 --> 00:07:55,759
it wasn't necessarily the openness

00:07:53,280 --> 00:07:58,400
library itself but we were calling we

00:07:55,759 --> 00:08:00,400
were compiling ruby native gem

00:07:58,400 --> 00:08:02,160
that will link to the old version or the

00:08:00,400 --> 00:08:05,039
new version of open ssl

00:08:02,160 --> 00:08:06,560
and then colliding with the theo version

00:08:05,039 --> 00:08:08,960
1.0

00:08:06,560 --> 00:08:10,080
so that's what we were juggling with

00:08:08,960 --> 00:08:12,800
both the system

00:08:10,080 --> 00:08:15,360
level stuff and we regen that compiled

00:08:12,800 --> 00:08:15,360
negatively

00:08:15,840 --> 00:08:20,319
the way exactly is broken we knew we had

00:08:18,400 --> 00:08:21,520
a problem with open ssl but we didn't

00:08:20,319 --> 00:08:23,599
know why

00:08:21,520 --> 00:08:24,879
uh you know we thought well maybe it's

00:08:23,599 --> 00:08:26,479
the path if we got

00:08:24,879 --> 00:08:28,080
the right version to open that cell and

00:08:26,479 --> 00:08:29,039
the right role in the past maybe that

00:08:28,080 --> 00:08:31,440
was there

00:08:29,039 --> 00:08:33,279
or the ruby was built incorrectly he was

00:08:31,440 --> 00:08:35,599
looking to get the wrong ssl

00:08:33,279 --> 00:08:36,640
version in the library we didn't know

00:08:35,599 --> 00:08:38,880
for sure

00:08:36,640 --> 00:08:40,800
or it could be that we were not

00:08:38,880 --> 00:08:42,159
correctly passing the open ssl

00:08:40,800 --> 00:08:44,159
perimeters into

00:08:42,159 --> 00:08:45,200
the ruby gym so they were building

00:08:44,159 --> 00:08:48,160
incorrectly

00:08:45,200 --> 00:08:49,920
again it was a mystery for us and we

00:08:48,160 --> 00:08:51,600
were trying to make sense of the errors

00:08:49,920 --> 00:08:53,440
that we were coming across and trying to

00:08:51,600 --> 00:08:55,839
understand what it is

00:08:53,440 --> 00:08:57,279
and of course the last possibility is

00:08:55,839 --> 00:08:59,200
the open ssl

00:08:57,279 --> 00:09:02,080
was interfering with itself because we

00:08:59,200 --> 00:09:04,560
had two or more versions of it installed

00:09:02,080 --> 00:09:06,640
you know during our experimentation

00:09:04,560 --> 00:09:09,440
trying to figure it out

00:09:06,640 --> 00:09:11,600
but the first decision between do we

00:09:09,440 --> 00:09:12,720
build ruby ourselves or do we use the

00:09:11,600 --> 00:09:14,800
pre-package

00:09:12,720 --> 00:09:15,920
and we made the decision to build it

00:09:14,800 --> 00:09:17,519
ourselves

00:09:15,920 --> 00:09:20,000
and once you made that decision we

00:09:17,519 --> 00:09:22,080
decided we had to figure out what's the

00:09:20,000 --> 00:09:22,700
most maintainable approach that we could

00:09:22,080 --> 00:09:25,919
use

00:09:22,700 --> 00:09:25,919
[Music]

00:09:27,680 --> 00:09:30,800
and so the first choice we have was

00:09:29,600 --> 00:09:33,440
working with all the

00:09:30,800 --> 00:09:34,800
public projects to hopefully get the

00:09:33,440 --> 00:09:36,320
first choice we had

00:09:34,800 --> 00:09:37,680
working with all the public projects and

00:09:36,320 --> 00:09:39,200
hopefully getting the older version

00:09:37,680 --> 00:09:41,519
supported correctly

00:09:39,200 --> 00:09:42,320
the problem with that is not knowing how

00:09:41,519 --> 00:09:43,680
long it would take

00:09:42,320 --> 00:09:45,200
to accomplish something like that

00:09:43,680 --> 00:09:47,120
because you have to collaborate and you

00:09:45,200 --> 00:09:47,839
have to collaborate it just has a lot of

00:09:47,120 --> 00:09:49,600
time

00:09:47,839 --> 00:09:53,040
and we were under the gun to get this

00:09:49,600 --> 00:09:53,040
done in 30 days or less

00:09:54,160 --> 00:09:58,480
because we were also new to the scene we

00:09:56,399 --> 00:10:00,399
also had no influence or any crowd

00:09:58,480 --> 00:10:01,600
whatsoever in any of these individual

00:10:00,399 --> 00:10:03,920
projects

00:10:01,600 --> 00:10:05,200
in europe probably coming in could

00:10:03,920 --> 00:10:06,959
probably

00:10:05,200 --> 00:10:08,399
bring some weight and get things going

00:10:06,959 --> 00:10:10,959
fast but we didn't know we didn't know

00:10:08,399 --> 00:10:10,959
how long

00:10:11,120 --> 00:10:15,839
and even if we were able to get into

00:10:13,920 --> 00:10:18,240
making changes quickly

00:10:15,839 --> 00:10:20,000
we knew and recognized that there's a

00:10:18,240 --> 00:10:21,600
steep learning curve to each one of

00:10:20,000 --> 00:10:23,680
these projects to figure out how they're

00:10:21,600 --> 00:10:25,360
structured to figure out who

00:10:23,680 --> 00:10:27,519
who are the movers and shakers when you

00:10:25,360 --> 00:10:29,680
project and get things moving forward

00:10:27,519 --> 00:10:31,519
let's have a choice number two which is

00:10:29,680 --> 00:10:32,880
to become experts in building ruby

00:10:31,519 --> 00:10:34,480
ourselves

00:10:32,880 --> 00:10:36,560
in the time of countries that was

00:10:34,480 --> 00:10:36,959
relatively known because we built ruby

00:10:36,560 --> 00:10:39,200
we

00:10:36,959 --> 00:10:41,360
we built it in the travis vr so we know

00:10:39,200 --> 00:10:43,360
how to build ruby

00:10:41,360 --> 00:10:44,480
and we would have full control of our

00:10:43,360 --> 00:10:46,320
environment

00:10:44,480 --> 00:10:47,760
by that i mean we could set up anything

00:10:46,320 --> 00:10:49,920
we can compile anything

00:10:47,760 --> 00:10:51,920
we set all the environments whatever we

00:10:49,920 --> 00:10:54,000
need to do

00:10:51,920 --> 00:10:56,560
and there's five acts to learn to

00:10:54,000 --> 00:10:58,399
automate simply because we already had a

00:10:56,560 --> 00:11:01,600
working continuous immigration solution

00:10:58,399 --> 00:11:03,360
in travis

00:11:01,600 --> 00:11:05,279
now the decision we charged was to

00:11:03,360 --> 00:11:06,720
become the experts that sell the

00:11:05,279 --> 00:11:08,000
building all the weebly

00:11:06,720 --> 00:11:09,440
and it turned out to be the right

00:11:08,000 --> 00:11:11,200
decision because we're in complete

00:11:09,440 --> 00:11:13,279
control of our ci environment

00:11:11,200 --> 00:11:14,959
you would not be holding the the other

00:11:13,279 --> 00:11:16,959
maintenance is really

00:11:14,959 --> 00:11:18,720
build action so we didn't have to worry

00:11:16,959 --> 00:11:20,560
about them breaking things or earth

00:11:18,720 --> 00:11:23,360
breaking no system or any

00:11:20,560 --> 00:11:24,959
any kind of cross issues going on there

00:11:23,360 --> 00:11:26,160
once our environment is built and they

00:11:24,959 --> 00:11:29,839
gotten cognified

00:11:26,160 --> 00:11:32,560
yes it stays where it is and we could

00:11:29,839 --> 00:11:35,760
fit both system level issues as well as

00:11:32,560 --> 00:11:37,040
rubicon power issues so whether we have

00:11:35,760 --> 00:11:38,800
to fit the system level

00:11:37,040 --> 00:11:40,480
we have to pick the gym level we have to

00:11:38,800 --> 00:11:43,040
pick the libraries and start we have

00:11:40,480 --> 00:11:45,360
complete control

00:11:43,040 --> 00:11:47,760
so that's what made this choice or this

00:11:45,360 --> 00:11:50,000
draw a good decision for us

00:11:47,760 --> 00:11:51,920
and then our knowledge becomes 100

00:11:50,000 --> 00:11:54,240
codified in our continuous integration

00:11:51,920 --> 00:11:57,839
process and script that we have set up

00:11:54,240 --> 00:11:57,839
and used

00:11:59,360 --> 00:12:05,120
uh if you're familiar or we get

00:12:02,959 --> 00:12:06,320
kardashian there's basically three ways

00:12:05,120 --> 00:12:08,560
you can set things up

00:12:06,320 --> 00:12:10,399
you can set up a docker run image you

00:12:08,560 --> 00:12:11,839
run all your actions in the containers

00:12:10,399 --> 00:12:13,839
you can set up

00:12:11,839 --> 00:12:15,360
you can do everything in the workflow

00:12:13,839 --> 00:12:16,720
including all the best scripting and

00:12:15,360 --> 00:12:19,920
everything you need

00:12:16,720 --> 00:12:21,839
or you can write action scripts

00:12:19,920 --> 00:12:23,760
which in this case will be javascript

00:12:21,839 --> 00:12:25,839
for us

00:12:23,760 --> 00:12:28,480
you know a natural intimidation with the

00:12:25,839 --> 00:12:30,000
writers as little and absolutely

00:12:28,480 --> 00:12:31,519
possible and of course we're looking at

00:12:30,000 --> 00:12:32,079
javascript and saying we're really a

00:12:31,519 --> 00:12:34,560
developer

00:12:32,079 --> 00:12:36,480
we will be developers not really keen on

00:12:34,560 --> 00:12:37,600
learning javascript just to do something

00:12:36,480 --> 00:12:39,920
like this

00:12:37,600 --> 00:12:40,959
but being able to set up a docker file

00:12:39,920 --> 00:12:42,880
which is already

00:12:40,959 --> 00:12:44,000
we already had copies and examples of

00:12:42,880 --> 00:12:46,399
from travis

00:12:44,000 --> 00:12:48,160
containers that run we thought this

00:12:46,399 --> 00:12:50,959
might be the easiest way to go

00:12:48,160 --> 00:12:53,279
so we can use the old ubuntu images

00:12:50,959 --> 00:12:54,959
images to run the old movie looking you

00:12:53,279 --> 00:12:57,200
can do and to run the new one

00:12:54,959 --> 00:12:59,839
simple enough can you pick up the right

00:12:57,200 --> 00:13:03,360
version open ssl in both environments

00:12:59,839 --> 00:13:05,440
very easily the challenge was

00:13:03,360 --> 00:13:07,360
how do you build and cache and reuse

00:13:05,440 --> 00:13:08,560
because if you don't cash them

00:13:07,360 --> 00:13:10,639
you're going to be rebuilding those

00:13:08,560 --> 00:13:11,440
doctors images over and over and over

00:13:10,639 --> 00:13:14,639
and let's just add

00:13:11,440 --> 00:13:17,120
a lot to the continuous integration time

00:13:14,639 --> 00:13:18,480
and we were noticing that most of the

00:13:17,120 --> 00:13:19,279
projects that are using docker

00:13:18,480 --> 00:13:21,519
containers

00:13:19,279 --> 00:13:23,440
also built their docker containers with

00:13:21,519 --> 00:13:24,959
a separate repository

00:13:23,440 --> 00:13:27,040
we didn't know if that was a word

00:13:24,959 --> 00:13:29,040
requirement or then we would need to

00:13:27,040 --> 00:13:31,360
replicate that but it seemed like the

00:13:29,040 --> 00:13:33,839
right way to go because

00:13:31,360 --> 00:13:35,760
you don't want to change in messing with

00:13:33,839 --> 00:13:38,160
your doctor image is for having to build

00:13:35,760 --> 00:13:39,519
a document every time you

00:13:38,160 --> 00:13:41,199
you take a prayer request in your

00:13:39,519 --> 00:13:44,160
project

00:13:41,199 --> 00:13:46,000
and then you can how do you draw that

00:13:44,160 --> 00:13:47,760
and we discovered how to set up the

00:13:46,000 --> 00:13:49,120
darker image if we wanted to draw a

00:13:47,760 --> 00:13:51,440
different value

00:13:49,120 --> 00:13:52,800
then circumstances you have to set up

00:13:51,440 --> 00:13:54,560
environment

00:13:52,800 --> 00:13:55,839
and pass them around you have to have

00:13:54,560 --> 00:13:57,680
the environment in your workflow

00:13:55,839 --> 00:13:59,680
and you have to pass it into your script

00:13:57,680 --> 00:14:01,360
that the entry point in the docker

00:13:59,680 --> 00:14:02,800
container and then once you install the

00:14:01,360 --> 00:14:04,480
docking then you have to pick up those

00:14:02,800 --> 00:14:07,199
environment variables and

00:14:04,480 --> 00:14:09,040
do your conditional function there so

00:14:07,199 --> 00:14:11,120
we're looking at talking containers and

00:14:09,040 --> 00:14:14,079
fast graphs and workers

00:14:11,120 --> 00:14:15,440
we work first because all that we became

00:14:14,079 --> 00:14:16,079
in a maintenance tool that we didn't

00:14:15,440 --> 00:14:19,519
want to

00:14:16,079 --> 00:14:22,160
have to deal with we didn't have to

00:14:19,519 --> 00:14:24,000
and it also made everything work for a

00:14:22,160 --> 00:14:26,240
lot less transparent

00:14:24,000 --> 00:14:27,839
what's going on because what happens

00:14:26,240 --> 00:14:30,320
inside that darker container doesn't

00:14:27,839 --> 00:14:33,360
necessarily show up in the workforce

00:14:30,320 --> 00:14:34,880
the output in your workflow so it was

00:14:33,360 --> 00:14:38,240
very

00:14:34,880 --> 00:14:40,560
very limited in transparency

00:14:38,240 --> 00:14:42,639
then we thought well how does this even

00:14:40,560 --> 00:14:44,320
work with port depositors and people

00:14:42,639 --> 00:14:47,199
making contributions to them

00:14:44,320 --> 00:14:49,279
to the the code you know they're going

00:14:47,199 --> 00:14:50,720
to have the same things we have

00:14:49,279 --> 00:14:52,399
if they're making the change that is

00:14:50,720 --> 00:14:53,680
significant enough to require a new

00:14:52,399 --> 00:14:55,680
container are they going to be able to

00:14:53,680 --> 00:14:58,959
set up the new container

00:14:55,680 --> 00:15:03,279
we're thinking nope not going to happen

00:14:58,959 --> 00:15:06,160
uh then the final issue we saw was

00:15:03,279 --> 00:15:08,000
uh they get that actions themselves that

00:15:06,160 --> 00:15:09,040
make it so convenient to use getting

00:15:08,000 --> 00:15:11,519
action

00:15:09,040 --> 00:15:12,399
they built some toolkit and the kits are

00:15:11,519 --> 00:15:14,160
not automatic

00:15:12,399 --> 00:15:15,440
automatically installed in these darker

00:15:14,160 --> 00:15:17,279
containers and

00:15:15,440 --> 00:15:19,199
secondly we don't have all the tools we

00:15:17,279 --> 00:15:23,199
can use and play around with

00:15:19,199 --> 00:15:23,199
we have to build everything ourselves so

00:15:25,040 --> 00:15:30,800
this one in how to control the doctor

00:15:28,959 --> 00:15:32,000
work so effectively this is everything

00:15:30,800 --> 00:15:33,279
that we're just talking about so i'm

00:15:32,000 --> 00:15:35,040
just going to summarize here

00:15:33,279 --> 00:15:36,399
it's about studying the environment i'm

00:15:35,040 --> 00:15:39,120
ensuring they're all met

00:15:36,399 --> 00:15:40,000
and that's represents the main tool is

00:15:39,120 --> 00:15:42,480
that's transparent

00:15:40,000 --> 00:15:44,560
then running in the workflow and you

00:15:42,480 --> 00:15:45,360
shut off and used to get that option to

00:15:44,560 --> 00:15:47,440
publishing

00:15:45,360 --> 00:15:49,120
into the marketplace and once we saw

00:15:47,440 --> 00:15:49,680
those negatives we said no doctors

00:15:49,120 --> 00:15:52,800
that's

00:15:49,680 --> 00:15:52,800
not the way to do this

00:15:52,959 --> 00:15:56,079
the second example we wanted to build it

00:15:55,120 --> 00:15:59,120
all in the workflow

00:15:56,079 --> 00:16:00,800
okay this is kind of the traceable

00:15:59,120 --> 00:16:03,040
path we say let's just get something

00:16:00,800 --> 00:16:03,920
built in the end make sure to deposit

00:16:03,040 --> 00:16:06,000
you can

00:16:03,920 --> 00:16:08,320
and the workflow file provides that

00:16:06,000 --> 00:16:11,440
because you can run by scripts in there

00:16:08,320 --> 00:16:13,759
you can do conditional and it turned out

00:16:11,440 --> 00:16:14,959
it doesn't exactly work when you're

00:16:13,759 --> 00:16:17,040
doing the condition when you're trying

00:16:14,959 --> 00:16:20,079
to do a complex third conditional

00:16:17,040 --> 00:16:23,600
for whatever reason it just doesn't work

00:16:20,079 --> 00:16:25,120
but only half the conditions were

00:16:23,600 --> 00:16:27,519
the first half and then the second half

00:16:25,120 --> 00:16:29,759
was thrown away they were ignored

00:16:27,519 --> 00:16:31,600
so we don't know why but we realized it

00:16:29,759 --> 00:16:34,800
was getting out of hand very quickly

00:16:31,600 --> 00:16:37,839
because as you can see the long workflow

00:16:34,800 --> 00:16:41,680
expanding very quickly

00:16:37,839 --> 00:16:45,199
uh what do you do about that

00:16:41,680 --> 00:16:46,800
well that brings us to javascript

00:16:45,199 --> 00:16:48,560
the one thing we didn't want to do with

00:16:46,800 --> 00:16:50,399
the ruby developers because we didn't

00:16:48,560 --> 00:16:52,480
want to have to learn a new language and

00:16:50,399 --> 00:16:55,680
want to have to maintain things in

00:16:52,480 --> 00:16:57,839
a foreign language to us but there

00:16:55,680 --> 00:16:59,600
is no really to object the choice girl

00:16:57,839 --> 00:17:02,800
can they go

00:16:59,600 --> 00:17:04,720
but it turns out it's not all that bad

00:17:02,800 --> 00:17:07,919
and as you can see from this example

00:17:04,720 --> 00:17:10,400
right here it's kinda reasonable ruby

00:17:07,919 --> 00:17:12,160
you just have async and a weight in a

00:17:10,400 --> 00:17:14,640
weight thrown in there with some curly

00:17:12,160 --> 00:17:14,640
braces

00:17:14,720 --> 00:17:18,240
so i'm gonna touch on this journey on

00:17:16,640 --> 00:17:20,799
this one

00:17:18,240 --> 00:17:21,919
encompass project becomes so much easier

00:17:20,799 --> 00:17:24,319
here

00:17:21,919 --> 00:17:25,679
you can see this is an example where

00:17:24,319 --> 00:17:27,280
we're branching between the two

00:17:25,679 --> 00:17:28,480
different rubies the end of large

00:17:27,280 --> 00:17:32,400
versions of ruby

00:17:28,480 --> 00:17:34,160
and the current running versions of ruby

00:17:32,400 --> 00:17:36,160
and lucky for art the current movie

00:17:34,160 --> 00:17:39,440
periscope that builds all the ruby

00:17:36,160 --> 00:17:41,280
that we use in that and learn it and the

00:17:39,440 --> 00:17:43,039
server deploys and everywhere

00:17:41,280 --> 00:17:44,480
is the delivery build stuff that gets

00:17:43,039 --> 00:17:47,600
embedded in the

00:17:44,480 --> 00:17:50,960
rb environment that can change phoebe

00:17:47,600 --> 00:17:54,000
uh we wanted to leverage stuff

00:17:50,960 --> 00:17:55,679
the problem was the enterprise rubies

00:17:54,000 --> 00:17:57,679
are actually maintained by

00:17:55,679 --> 00:18:00,480
another contributor outside of this

00:17:57,679 --> 00:18:01,760
project who had granted and embedded the

00:18:00,480 --> 00:18:04,000
open sso

00:18:01,760 --> 00:18:05,600
that needed that successfully compiled

00:18:04,000 --> 00:18:08,400
the old ruby

00:18:05,600 --> 00:18:11,120
and run and so we had the conditional

00:18:08,400 --> 00:18:12,799
branch to branch between the two

00:18:11,120 --> 00:18:14,559
one thing we were very happy about with

00:18:12,799 --> 00:18:15,120
this first is that j ruby's also

00:18:14,559 --> 00:18:17,360
includes

00:18:15,120 --> 00:18:18,480
self development for us we have three

00:18:17,360 --> 00:18:19,919
stuff

00:18:18,480 --> 00:18:21,919
three different conditions to figure

00:18:19,919 --> 00:18:23,520
that out so three different ways to

00:18:21,919 --> 00:18:25,679
build once we got the right

00:18:23,520 --> 00:18:29,360
libraries for gordon ruby everything

00:18:25,679 --> 00:18:32,240
else flowed and script

00:18:29,360 --> 00:18:33,679
so that big long script workflow that i

00:18:32,240 --> 00:18:36,960
was showing you earlier

00:18:33,679 --> 00:18:37,919
got shrunk down yeah quick go get the

00:18:36,960 --> 00:18:39,760
shrink dry

00:18:37,919 --> 00:18:41,600
and then we've got footlong to go the

00:18:39,760 --> 00:18:42,799
basically implemented the big long

00:18:41,600 --> 00:18:44,240
workflow that we were building

00:18:42,799 --> 00:18:48,720
previously

00:18:44,240 --> 00:18:48,720
so that was definitely a win for us

00:18:49,520 --> 00:18:52,720
and that worked for about taking a lot

00:18:52,000 --> 00:18:54,880
of the stuff

00:18:52,720 --> 00:18:56,720
out of the action out of the workflow

00:18:54,880 --> 00:18:59,120
and pushing the internet actually

00:18:56,720 --> 00:19:01,200
we're encapsulating it in a way that

00:18:59,120 --> 00:19:02,400
makes more sense and hides that from the

00:19:01,200 --> 00:19:03,760
workflow because this has

00:19:02,400 --> 00:19:06,400
absolutely nothing to do with the

00:19:03,760 --> 00:19:07,679
workflow itself this is another example

00:19:06,400 --> 00:19:09,440
where we're studying environment

00:19:07,679 --> 00:19:11,919
variables in order to make sure that

00:19:09,440 --> 00:19:15,679
rubies run directly within

00:19:11,919 --> 00:19:17,440
the runners and we really like it

00:19:15,679 --> 00:19:19,440
because we can actually comment on it

00:19:17,440 --> 00:19:20,799
why this variables here where we found

00:19:19,440 --> 00:19:23,200
the information about setting these

00:19:20,799 --> 00:19:25,520
variables and so on it all gets

00:19:23,200 --> 00:19:26,400
encapsulated you get common annoying and

00:19:25,520 --> 00:19:29,760
we know what to do

00:19:26,400 --> 00:19:29,760
through abuse yourselves

00:19:32,160 --> 00:19:36,400
let me tell you cashing become a lot

00:19:34,400 --> 00:19:38,160
becomes a lot easier because you don't

00:19:36,400 --> 00:19:39,440
have to jump out of the cash or make a

00:19:38,160 --> 00:19:42,960
cash hit

00:19:39,440 --> 00:19:43,520
every single stop that falls and this is

00:19:42,960 --> 00:19:46,880
what this

00:19:43,520 --> 00:19:49,120
is showing us for a year he said on the

00:19:46,880 --> 00:19:51,520
left-hand side before we had an f

00:19:49,120 --> 00:19:53,200
condition when everything was stuck

00:19:51,520 --> 00:19:54,559
and then on the right-hand side we do

00:19:53,200 --> 00:19:57,440
what you want

00:19:54,559 --> 00:19:58,960
we check it click there we return if

00:19:57,440 --> 00:19:59,679
it's not there and we go through and

00:19:58,960 --> 00:20:02,320
build it

00:19:59,679 --> 00:20:02,320
very simple

00:20:04,159 --> 00:20:08,880
ah welcome to the pharmaceutical

00:20:07,120 --> 00:20:11,039
javascript does this weird thing

00:20:08,880 --> 00:20:12,159
these two us rubios install eight things

00:20:11,039 --> 00:20:14,400
and hey wait

00:20:12,159 --> 00:20:16,480
and this is how they use it okay async

00:20:14,400 --> 00:20:19,120
function at thirty region

00:20:16,480 --> 00:20:21,360
and then somewhere in the gym you may

00:20:19,120 --> 00:20:22,799
call out to another async function

00:20:21,360 --> 00:20:24,640
if you want to wait on it you want to

00:20:22,799 --> 00:20:26,480
block them and basically wait until it

00:20:24,640 --> 00:20:30,400
completes you have to call it away

00:20:26,480 --> 00:20:31,280
before and to resolve those promises you

00:20:30,400 --> 00:20:34,080
use this

00:20:31,280 --> 00:20:34,799
construct on then and you pass any

00:20:34,080 --> 00:20:37,679
result

00:20:34,799 --> 00:20:39,120
of the promise into the then block and

00:20:37,679 --> 00:20:39,840
then you can set your variables from

00:20:39,120 --> 00:20:41,760
there

00:20:39,840 --> 00:20:43,120
and this is just a very simple example

00:20:41,760 --> 00:20:44,799
showing us getting

00:20:43,120 --> 00:20:46,640
the ruby gem version from the

00:20:44,799 --> 00:20:48,480
environment and setting it into

00:20:46,640 --> 00:20:52,080
the string variable so that we can then

00:20:48,480 --> 00:20:52,080
do our computation from that

00:20:52,880 --> 00:20:56,880
so here's what one of the tricky things

00:20:55,679 --> 00:20:59,200
for me it took me

00:20:56,880 --> 00:21:01,520
two or three days to figure this out

00:20:59,200 --> 00:21:03,360
because it was my first exposure to

00:21:01,520 --> 00:21:05,760
and with a weight and trying to figure

00:21:03,360 --> 00:21:08,000
out exactly what's going on with

00:21:05,760 --> 00:21:10,159
with making a command call out to the

00:21:08,000 --> 00:21:13,840
environment and getting back a result

00:21:10,159 --> 00:21:16,720
and it turns out the execute returns

00:21:13,840 --> 00:21:19,840
the ethic code of the demand is not the

00:21:16,720 --> 00:21:23,440
result which is what rubies do

00:21:19,840 --> 00:21:24,480
and so the way to do this one is to set

00:21:23,440 --> 00:21:25,919
up some callbacks

00:21:24,480 --> 00:21:27,919
and that's what the options listeners

00:21:25,919 --> 00:21:29,440
call back we divide

00:21:27,919 --> 00:21:31,440
the standard out and standard errors

00:21:29,440 --> 00:21:34,159
have their own carboxylation

00:21:31,440 --> 00:21:35,760
and we can we concatenate the streams

00:21:34,159 --> 00:21:38,400
while it's running

00:21:35,760 --> 00:21:40,080
and then we await the sdk restitute and

00:21:38,400 --> 00:21:42,480
what that's going to do is make sure

00:21:40,080 --> 00:21:45,440
that the listeners fully populate

00:21:42,480 --> 00:21:46,080
before it returns anything and then

00:21:45,440 --> 00:21:47,679
chomp

00:21:46,080 --> 00:21:49,440
output stream just takes off and

00:21:47,679 --> 00:21:51,840
traveling neurons and so on

00:21:49,440 --> 00:21:53,360
so you have just the string in our case

00:21:51,840 --> 00:21:56,960
in the previous example

00:21:53,360 --> 00:21:56,960
divergence during for this gym

00:21:57,520 --> 00:22:01,840
so now we're getting to the moment we're

00:21:59,840 --> 00:22:03,679
writing the javascript actually become

00:22:01,840 --> 00:22:06,159
with and that's what i'm going to take

00:22:03,679 --> 00:22:09,919
to do now

00:22:06,159 --> 00:22:13,360
uh back to our open ssl problem we have

00:22:09,919 --> 00:22:16,240
the version 1.0 and version one one

00:22:13,360 --> 00:22:16,240
mismatch issue

00:22:18,240 --> 00:22:24,400
this one was challenging because no

00:22:21,679 --> 00:22:24,880
no two things will solve the same way

00:22:24,400 --> 00:22:27,679
for

00:22:24,880 --> 00:22:29,919
compiling ruby uh compiling the negative

00:22:27,679 --> 00:22:32,159
genomes installing germs that we

00:22:29,919 --> 00:22:33,280
use in open ssl but not negatively

00:22:32,159 --> 00:22:37,200
compounding

00:22:33,280 --> 00:22:40,320
they're all various points that we have

00:22:37,200 --> 00:22:42,400
very compulsively exercise the package

00:22:40,320 --> 00:22:43,919
compare the configure options the open

00:22:42,400 --> 00:22:48,000
ssl directory

00:22:43,919 --> 00:22:50,080
all those things became challenging

00:22:48,000 --> 00:22:51,919
if we were doing the workflow the team

00:22:50,080 --> 00:22:55,840
became a lot easier we were doing it

00:22:51,919 --> 00:22:55,840
here in the javascript

00:22:58,480 --> 00:23:01,840
and one in particular with the martha

00:23:00,480 --> 00:23:03,679
gem

00:23:01,840 --> 00:23:05,360
we just would not pay attention to what

00:23:03,679 --> 00:23:06,400
we wanted but that's what we were

00:23:05,360 --> 00:23:08,880
filming at the time

00:23:06,400 --> 00:23:10,880
so there's something about this multiple

00:23:08,880 --> 00:23:12,480
gym that just won't link up and use the

00:23:10,880 --> 00:23:15,679
right open ssl version

00:23:12,480 --> 00:23:18,000
we were going way overboard trying to

00:23:15,679 --> 00:23:19,840
also pass in the west ld files and the

00:23:18,000 --> 00:23:21,679
with epp

00:23:19,840 --> 00:23:23,520
in addition to the environment settings

00:23:21,679 --> 00:23:25,039
that were over and above

00:23:23,520 --> 00:23:26,400
and we didn't know that they had made a

00:23:25,039 --> 00:23:29,440
difference in how it can power but

00:23:26,400 --> 00:23:29,440
didn't solve the problem

00:23:29,679 --> 00:23:34,240
we finally did the one thing everybody

00:23:32,799 --> 00:23:37,280
told you not to do

00:23:34,240 --> 00:23:39,440
downgrade open ssl nobody wants to do

00:23:37,280 --> 00:23:41,679
that because that is security rest and

00:23:39,440 --> 00:23:44,320
that is a security concern

00:23:41,679 --> 00:23:46,000
and plus so many other libraries in the

00:23:44,320 --> 00:23:49,200
operating system are also linked to the

00:23:46,000 --> 00:23:51,200
openness of those if you

00:23:49,200 --> 00:23:52,640
making a download mess and you wouldn't

00:23:51,200 --> 00:23:56,240
come into me

00:23:52,640 --> 00:23:57,919
not too long ago now listen

00:23:56,240 --> 00:23:59,360
no this is wrong that you're just going

00:23:57,919 --> 00:24:01,440
to break everything

00:23:59,360 --> 00:24:03,120
you can't do that you kept hitting the

00:24:01,440 --> 00:24:04,159
head you get the wall with the compiler

00:24:03,120 --> 00:24:06,799
size and everything

00:24:04,159 --> 00:24:09,120
finally we just said you know what we're

00:24:06,799 --> 00:24:11,760
just gonna have to do it

00:24:09,120 --> 00:24:12,240
and that's okay and this is why it's not

00:24:11,760 --> 00:24:13,919
good

00:24:12,240 --> 00:24:16,000
it's a building block it's a tough

00:24:13,919 --> 00:24:17,360
environment you're not a production

00:24:16,000 --> 00:24:18,640
system that you have to maintain

00:24:17,360 --> 00:24:20,559
security long-term

00:24:18,640 --> 00:24:21,760
don't have to hurt in this thing keep it

00:24:20,559 --> 00:24:24,799
up and running in a

00:24:21,760 --> 00:24:26,480
production environment what you need is

00:24:24,799 --> 00:24:28,000
an environment that you run your tests

00:24:26,480 --> 00:24:29,679
against components that the customer

00:24:28,000 --> 00:24:31,039
actually has installed

00:24:29,679 --> 00:24:32,240
unfortunately if you're running an old

00:24:31,039 --> 00:24:33,120
system they're running with all

00:24:32,240 --> 00:24:35,600
components

00:24:33,120 --> 00:24:36,880
and that's what we have to model or you

00:24:35,600 --> 00:24:40,720
won't be able to test it

00:24:36,880 --> 00:24:42,640
correctly so

00:24:40,720 --> 00:24:44,400
the trailer office now we can learn

00:24:42,640 --> 00:24:45,200
everything in the modern operating

00:24:44,400 --> 00:24:46,880
system

00:24:45,200 --> 00:24:48,400
in maintaining the build across the

00:24:46,880 --> 00:24:52,240
older versions who are also

00:24:48,400 --> 00:24:55,679
in device that left the two tray off

00:24:52,240 --> 00:24:57,840
angles we were recognized so

00:24:55,679 --> 00:24:59,039
we decided that if we just downgrade we

00:24:57,840 --> 00:25:00,480
can run everything

00:24:59,039 --> 00:25:04,320
same container that's one that's

00:25:00,480 --> 00:25:07,279
available to track and keep up with

00:25:04,320 --> 00:25:09,279
okay so now that we made that decision

00:25:07,279 --> 00:25:10,240
we realized the freedom to make a choice

00:25:09,279 --> 00:25:12,320
like that

00:25:10,240 --> 00:25:13,760
we actually started thinking more

00:25:12,320 --> 00:25:15,840
outside the box we're always

00:25:13,760 --> 00:25:17,679
thinking are there other ways we could

00:25:15,840 --> 00:25:19,440
do this and before

00:25:17,679 --> 00:25:21,760
now we were completely blocked by head

00:25:19,440 --> 00:25:25,120
you can't downgrade open ssl

00:25:21,760 --> 00:25:28,000
if we can't downgrade anything

00:25:25,120 --> 00:25:29,600
this was cartoon i really are because

00:25:28,000 --> 00:25:30,559
when i asked you to think outside that

00:25:29,600 --> 00:25:32,400
part if i

00:25:30,559 --> 00:25:33,919
forgot to ask you to think inside this

00:25:32,400 --> 00:25:36,320
one

00:25:33,919 --> 00:25:37,760
i'm kind of happy to know at this this

00:25:36,320 --> 00:25:39,520
point

00:25:37,760 --> 00:25:40,880
but it gives you the freedom at least

00:25:39,520 --> 00:25:43,039
the better idea that he's

00:25:40,880 --> 00:25:44,000
thinking about the problem in more ways

00:25:43,039 --> 00:25:46,799
than you've

00:25:44,000 --> 00:25:48,640
thought about before if we can't

00:25:46,799 --> 00:25:49,440
download openness out maybe we can

00:25:48,640 --> 00:25:51,039
download

00:25:49,440 --> 00:25:52,960
the specific component that gives us the

00:25:51,039 --> 00:25:55,600
problem and that's what happened we

00:25:52,960 --> 00:25:56,480
downgraded the mysql current library and

00:25:55,600 --> 00:26:00,320
welcome to

00:25:56,480 --> 00:26:03,039
that work very happy with that

00:26:00,320 --> 00:26:04,080
and you flip back over to the javascript

00:26:03,039 --> 00:26:06,240
story

00:26:04,080 --> 00:26:07,200
this is an example of how we downloaded

00:26:06,240 --> 00:26:09,440
my secret

00:26:07,200 --> 00:26:11,039
and this is a great example of how you

00:26:09,440 --> 00:26:12,240
can do some things in parallel with

00:26:11,039 --> 00:26:16,240
javascript and then

00:26:12,240 --> 00:26:19,840
serialize what comes after and remember

00:26:16,240 --> 00:26:22,000
every async function returns a promise

00:26:19,840 --> 00:26:22,960
so we collected the promise and then we

00:26:22,000 --> 00:26:25,679
resolve all

00:26:22,960 --> 00:26:27,200
promises and then finally we do a serial

00:26:25,679 --> 00:26:30,000
install from that

00:26:27,200 --> 00:26:31,279
and that's how you can mess and mount

00:26:30,000 --> 00:26:33,760
parallel and serial

00:26:31,279 --> 00:26:33,760
installers

00:26:34,320 --> 00:26:40,799
and finally we have our ruby from 2.0

00:26:37,600 --> 00:26:42,960
to 2.7 and jv and this is what it will

00:26:40,799 --> 00:26:46,400
start for the build ruby script

00:26:42,960 --> 00:26:46,400
very simple very clean

00:26:47,200 --> 00:26:51,279
and we can finally start working on

00:26:49,039 --> 00:26:54,480
workflow

00:26:51,279 --> 00:26:56,720
um looking at this workflow we actually

00:26:54,480 --> 00:26:58,480
have two germs and one repository the

00:26:56,720 --> 00:27:00,799
main ruby agent gym

00:26:58,480 --> 00:27:03,360
and a brand new germ called infinite

00:27:00,799 --> 00:27:06,400
tracing that does tailor-based centering

00:27:03,360 --> 00:27:09,120
and that's a whole other all right

00:27:06,400 --> 00:27:10,240
specifically to join one repository that

00:27:09,120 --> 00:27:12,159
we're thinking

00:27:10,240 --> 00:27:13,760
two workflows for doing continuous

00:27:12,159 --> 00:27:15,760
regression

00:27:13,760 --> 00:27:17,120
you may the main contingency integration

00:27:15,760 --> 00:27:19,520
have to build auto rubrics

00:27:17,120 --> 00:27:20,880
in an active undermining environment and

00:27:19,520 --> 00:27:23,360
have to run the multiverse

00:27:20,880 --> 00:27:24,880
major the infiltration continuous

00:27:23,360 --> 00:27:27,279
doesn't have to use all the rules we

00:27:24,880 --> 00:27:31,840
only need 2.5 to 2.7

00:27:27,279 --> 00:27:34,080
in on it now if we had it all in one

00:27:31,840 --> 00:27:35,760
part one workflow we knew that we can

00:27:34,080 --> 00:27:37,760
build all the reviews all the time

00:27:35,760 --> 00:27:38,960
so we were kind of like do we wearing

00:27:37,760 --> 00:27:41,200
the arm

00:27:38,960 --> 00:27:42,880
let's break down to workflows and deal

00:27:41,200 --> 00:27:45,200
with that

00:27:42,880 --> 00:27:45,200
then

00:27:46,000 --> 00:27:49,760
that's what we were thinking and here's

00:27:48,399 --> 00:27:50,240
one of the things we're thinking about

00:27:49,760 --> 00:27:52,480
what

00:27:50,240 --> 00:27:53,600
made us want to spread it out and that

00:27:52,480 --> 00:27:55,279
is the thought that the

00:27:53,600 --> 00:27:56,880
infinite tracing has some rare

00:27:55,279 --> 00:27:58,640
intermittent failures

00:27:56,880 --> 00:28:00,159
in our test suite they were just

00:27:58,640 --> 00:28:01,919
annoying enough that

00:28:00,159 --> 00:28:03,600
when they fell we have to rerun the

00:28:01,919 --> 00:28:04,799
continuous integration

00:28:03,600 --> 00:28:06,880
and we definitely didn't want to be

00:28:04,799 --> 00:28:09,039
sitting around for 30 minutes

00:28:06,880 --> 00:28:10,880
30 and 40 minutes for the whole thing to

00:28:09,039 --> 00:28:12,559
learn we didn't have to

00:28:10,880 --> 00:28:14,480
because the main continuous ingredient

00:28:12,559 --> 00:28:16,399
was about 30 45 million

00:28:14,480 --> 00:28:17,840
whereas the infinitution was about five

00:28:16,399 --> 00:28:19,679
months so obviously

00:28:17,840 --> 00:28:21,440
let's spread it out so when this one

00:28:19,679 --> 00:28:23,039
fell we just took it off and running

00:28:21,440 --> 00:28:26,720
again

00:28:23,039 --> 00:28:28,880
and that's what our thinking was

00:28:26,720 --> 00:28:29,919
that's when we ran into a problem we did

00:28:28,880 --> 00:28:32,159
not expect to

00:28:29,919 --> 00:28:34,159
notice when you run two workflows

00:28:32,159 --> 00:28:35,840
together

00:28:34,159 --> 00:28:37,840
and you they're both running the bill

00:28:35,840 --> 00:28:39,200
ruby script and they both take off build

00:28:37,840 --> 00:28:42,559
ruby 2.0 or

00:28:39,200 --> 00:28:44,240
build it with 2.5 when one gets ready

00:28:42,559 --> 00:28:46,080
to write the cast the other tried to do

00:28:44,240 --> 00:28:48,159
the same thing they they bump into your

00:28:46,080 --> 00:28:50,080
edges and they cancel each other off

00:28:48,159 --> 00:28:53,440
they basically end up with errors in the

00:28:50,080 --> 00:28:55,919
sweetness everyone do completion

00:28:53,440 --> 00:28:58,240
and then they have actually not gone

00:28:55,919 --> 00:29:00,720
enough along where you could say

00:28:58,240 --> 00:29:02,399
in one workflow you need this workflow

00:29:00,720 --> 00:29:04,320
job to complete

00:29:02,399 --> 00:29:06,240
so that was not an option for it

00:29:04,320 --> 00:29:08,320
otherwise it's very easy to say this

00:29:06,240 --> 00:29:13,760
workflow depends on this workflow

00:29:08,320 --> 00:29:15,360
and it becomes serialized by that issue

00:29:13,760 --> 00:29:18,080
now we need to figure out how to solve

00:29:15,360 --> 00:29:20,559
this together

00:29:18,080 --> 00:29:22,399
that's when we started thinking outside

00:29:20,559 --> 00:29:25,200
the box again maybe we're thinking

00:29:22,399 --> 00:29:26,880
with freedom now and we said okay i bet

00:29:25,200 --> 00:29:28,480
we could probably recall these things

00:29:26,880 --> 00:29:29,919
let's figure out how to redraw and we

00:29:28,480 --> 00:29:32,159
just went and searched

00:29:29,919 --> 00:29:34,240
we found several rechargeable things

00:29:32,159 --> 00:29:35,600
were our favorite of them all because we

00:29:34,240 --> 00:29:38,159
could set up timeout

00:29:35,600 --> 00:29:40,080
and we could set the number to the

00:29:38,159 --> 00:29:42,399
attempt to try

00:29:40,080 --> 00:29:44,559
now this mirror we can have one workflow

00:29:42,399 --> 00:29:46,799
and one resource strategy covered all

00:29:44,559 --> 00:29:48,559
the scenarios we were worried about

00:29:46,799 --> 00:29:51,200
so if the infinite dressing one happens

00:29:48,559 --> 00:29:55,120
to fail it just retries

00:29:51,200 --> 00:29:58,000
and we solve a problem

00:29:55,120 --> 00:29:58,720
and that is a resulting workflow all in

00:29:58,000 --> 00:30:01,279
one file

00:29:58,720 --> 00:30:02,960
build will be at the top we have you see

00:30:01,279 --> 00:30:05,360
the main environment in multiverse

00:30:02,960 --> 00:30:06,840
we have build ruby and build ruby at the

00:30:05,360 --> 00:30:09,919
knee

00:30:06,840 --> 00:30:12,480
and everyone's under ubuntu layers

00:30:09,919 --> 00:30:13,600
so we only have one running environment

00:30:12,480 --> 00:30:16,320
yeah

00:30:13,600 --> 00:30:16,320
happy dance

00:30:18,480 --> 00:30:20,880
and that

00:30:21,679 --> 00:30:25,840
the next thing which is question you

00:30:24,320 --> 00:30:26,799
know talk a little bit about this thing

00:30:25,840 --> 00:30:28,880
because

00:30:26,799 --> 00:30:30,640
almost all the documentation that you

00:30:28,880 --> 00:30:32,480
forget who talked about caching

00:30:30,640 --> 00:30:34,240
in the workflow and not hearing the

00:30:32,480 --> 00:30:37,200
javascript

00:30:34,240 --> 00:30:37,919
and as you can see i've got two places

00:30:37,200 --> 00:30:40,399
here

00:30:37,919 --> 00:30:41,360
in the green boxes where we're caching

00:30:40,399 --> 00:30:45,600
essentially

00:30:41,360 --> 00:30:47,600
and that is with ruby itself

00:30:45,600 --> 00:30:48,960
and then with the bundle installed with

00:30:47,600 --> 00:30:51,840
the gems that are needed

00:30:48,960 --> 00:30:51,840
run in the test

00:30:55,120 --> 00:31:00,240
and this is why we wanted to

00:30:58,559 --> 00:31:02,159
move it out of the workflow and into the

00:31:00,240 --> 00:31:04,240
charge and you can see it the same color

00:31:02,159 --> 00:31:04,960
north square division with the same code

00:31:04,240 --> 00:31:08,000
and pink

00:31:04,960 --> 00:31:10,480
boom boom boom three times by moving

00:31:08,000 --> 00:31:11,360
out of the workflow into the javascript

00:31:10,480 --> 00:31:13,440
fashion

00:31:11,360 --> 00:31:14,880
we can eliminate all that good and

00:31:13,440 --> 00:31:18,159
that's a big win

00:31:14,880 --> 00:31:21,360
and one typo down near the bottom where

00:31:18,159 --> 00:31:24,080
the the uh cash key

00:31:21,360 --> 00:31:26,000
in version fifth and second version five

00:31:24,080 --> 00:31:27,120
were at the top two in version five and

00:31:26,000 --> 00:31:29,760
that was the example

00:31:27,120 --> 00:31:30,399
that made us realize hey we really need

00:31:29,760 --> 00:31:32,880
to draw

00:31:30,399 --> 00:31:35,200
this up because it just didn't you had a

00:31:32,880 --> 00:31:38,399
handful

00:31:35,200 --> 00:31:39,760
and so what we have the three blocks

00:31:38,399 --> 00:31:42,960
that you just saw

00:31:39,760 --> 00:31:45,679
and the before workplace very

00:31:42,960 --> 00:31:47,360
simple using cash and then the cash key

00:31:45,679 --> 00:31:50,640
and then restore key

00:31:47,360 --> 00:31:53,679
they expanded onto a few methods in the

00:31:50,640 --> 00:31:55,600
javascript print primary to restore

00:31:53,679 --> 00:31:56,799
maybe some cash and then they would be

00:31:55,600 --> 00:31:58,960
the couch

00:31:56,799 --> 00:32:02,320
and we have one price to find the cash

00:31:58,960 --> 00:32:07,600
key so we didn't have any more

00:32:02,320 --> 00:32:07,600
um a painting or whack with each other

00:32:09,840 --> 00:32:13,279
and then you can use a precisely where

00:32:11,600 --> 00:32:14,240
you need to when you're using the

00:32:13,279 --> 00:32:17,039
workflow

00:32:14,240 --> 00:32:18,159
it actually starts at the point where

00:32:17,039 --> 00:32:19,679
you insert it

00:32:18,159 --> 00:32:21,600
and then when you get done with the

00:32:19,679 --> 00:32:23,679
workflow it

00:32:21,600 --> 00:32:25,840
collects all the files that are in the

00:32:23,679 --> 00:32:28,080
path and saves them

00:32:25,840 --> 00:32:29,760
here we can actually control exactly

00:32:28,080 --> 00:32:31,360
when we do a restore and we can draw

00:32:29,760 --> 00:32:33,919
exactly when we catch it

00:32:31,360 --> 00:32:33,919
and save it

00:32:37,440 --> 00:32:42,000
this also meant that we could have two

00:32:39,360 --> 00:32:44,960
caches one for the ruby itself

00:32:42,000 --> 00:32:46,720
and one for the bundle gems that we do

00:32:44,960 --> 00:32:48,880
and this made it nice because we didn't

00:32:46,720 --> 00:32:52,159
have to build

00:32:48,880 --> 00:32:54,960
the entire matrix uh

00:32:52,159 --> 00:32:55,760
movie and gym together we could build

00:32:54,960 --> 00:32:58,399
all the way we

00:32:55,760 --> 00:33:00,000
hold them separate from all the the

00:32:58,399 --> 00:33:01,039
germs that we needed to run our test

00:33:00,000 --> 00:33:03,120
environment

00:33:01,039 --> 00:33:05,279
now test could continue to evolve and

00:33:03,120 --> 00:33:06,960
change but if the germs don't change

00:33:05,279 --> 00:33:08,399
we didn't have to rebuild a bundle of

00:33:06,960 --> 00:33:11,679
gym

00:33:08,399 --> 00:33:13,200
and that's what this is all about is one

00:33:11,679 --> 00:33:14,880
of the interesting things about our

00:33:13,200 --> 00:33:17,120
project is because at the gym

00:33:14,880 --> 00:33:18,159
you don't lock down the gym or the gym

00:33:17,120 --> 00:33:20,399
lock file

00:33:18,159 --> 00:33:21,720
but all the examples we saw was showing

00:33:20,399 --> 00:33:24,640
you how to use gym

00:33:21,720 --> 00:33:25,760
gemfile.log which which is unique to

00:33:24,640 --> 00:33:30,320
itself

00:33:25,760 --> 00:33:32,559
to make the hash key the keyhouse

00:33:30,320 --> 00:33:34,000
and what we did was we would build and

00:33:32,559 --> 00:33:36,159
install the gem

00:33:34,000 --> 00:33:37,279
and link up the gemfirewalk that was

00:33:36,159 --> 00:33:40,080
resulting from that

00:33:37,279 --> 00:33:41,200
into the place where we would save the

00:33:40,080 --> 00:33:42,640
couch

00:33:41,200 --> 00:33:44,320
and then when we store we topped the

00:33:42,640 --> 00:33:46,240
lock file back

00:33:44,320 --> 00:33:47,519
and then one bound to install and you

00:33:46,240 --> 00:33:49,519
immediately run through and say

00:33:47,519 --> 00:33:52,080
using everything so very fast and so

00:33:49,519 --> 00:33:54,080
that way so it saves a lot of time doing

00:33:52,080 --> 00:33:57,200
that

00:33:54,080 --> 00:33:59,279
and this is the pro tip and cashing

00:33:57,200 --> 00:34:00,559
is a life saver but sometimes you got a

00:33:59,279 --> 00:34:02,799
boston

00:34:00,559 --> 00:34:04,720
and each can have account get five days

00:34:02,799 --> 00:34:05,679
of storage and then use cash is better

00:34:04,720 --> 00:34:07,519
in seven days

00:34:05,679 --> 00:34:08,800
so you've got plenty of plenty of

00:34:07,519 --> 00:34:10,480
storage and they

00:34:08,800 --> 00:34:12,560
but they don't they sit around for seven

00:34:10,480 --> 00:34:14,320
days until they're no longer used

00:34:12,560 --> 00:34:16,079
so this is how you can bust out on you

00:34:14,320 --> 00:34:20,960
just put some

00:34:16,079 --> 00:34:24,399
conversion number on them and keep going

00:34:20,960 --> 00:34:28,000
okay this is one

00:34:24,399 --> 00:34:30,560
last longer jumper and jack up on

00:34:28,000 --> 00:34:32,560
debugging in general and that is

00:34:30,560 --> 00:34:34,879
isolated oscillate glass like

00:34:32,560 --> 00:34:36,800
only one the small steps you need to run

00:34:34,879 --> 00:34:39,040
and test

00:34:36,800 --> 00:34:41,040
and this is the example where i was

00:34:39,040 --> 00:34:42,800
running testing probably multiverse i

00:34:41,040 --> 00:34:43,599
didn't care about building ruby over and

00:34:42,800 --> 00:34:45,280
over and over

00:34:43,599 --> 00:34:46,639
he's already had important already

00:34:45,280 --> 00:34:48,720
catching so

00:34:46,639 --> 00:34:50,240
they would narrow it down and build only

00:34:48,720 --> 00:34:51,839
one or two

00:34:50,240 --> 00:34:53,359
different multiverse tests they were

00:34:51,839 --> 00:34:55,119
always feeling

00:34:53,359 --> 00:34:57,040
and this greatly sped up the whole

00:34:55,119 --> 00:35:00,400
process so keep that in mind

00:34:57,040 --> 00:35:02,720
the way to speed things up

00:35:00,400 --> 00:35:04,400
so we get down to the last bit and

00:35:02,720 --> 00:35:07,680
there's what it was

00:35:04,400 --> 00:35:10,160
that's what everyone wants to do

00:35:07,680 --> 00:35:12,160
and when we started if we did not do the

00:35:10,160 --> 00:35:14,079
groovy casting we built it every single

00:35:12,160 --> 00:35:16,000
time it would take about eight minutes

00:35:14,079 --> 00:35:17,280
to build each and every one of the ruby

00:35:16,000 --> 00:35:19,280
version

00:35:17,280 --> 00:35:21,119
so cash by doing the cash in the

00:35:19,280 --> 00:35:24,560
freebies we got it down to one minute

00:35:21,119 --> 00:35:27,760
one second on average so

00:35:24,560 --> 00:35:29,760
that was definitely worth it but still

00:35:27,760 --> 00:35:30,880
every single continuous integration you

00:35:29,760 --> 00:35:34,000
have to

00:35:30,880 --> 00:35:36,079
to um restore that rubies from casting

00:35:34,000 --> 00:35:37,760
taking over a minute to do so

00:35:36,079 --> 00:35:40,160
and we started looking at why they're

00:35:37,760 --> 00:35:43,119
taking a whole minute to restore cash it

00:35:40,160 --> 00:35:44,720
actually wasn't just restoring the couch

00:35:43,119 --> 00:35:46,560
we were also

00:35:44,720 --> 00:35:48,320
restoring the entire environment we were

00:35:46,560 --> 00:35:49,680
setting up the environment as though we

00:35:48,320 --> 00:35:51,839
were going to test

00:35:49,680 --> 00:35:54,400
and we realized that if you're just

00:35:51,839 --> 00:35:56,560
building you don't need that entire test

00:35:54,400 --> 00:35:58,160
environment set up every time

00:35:56,560 --> 00:36:00,000
all we need to do is see if we can

00:35:58,160 --> 00:36:01,119
restore the cash which only takes about

00:36:00,000 --> 00:36:03,599
five seconds

00:36:01,119 --> 00:36:05,440
so yeah we we got a major win there by

00:36:03,599 --> 00:36:08,000
doing that

00:36:05,440 --> 00:36:10,000
yeah it's not just by second step being

00:36:08,000 --> 00:36:11,920
said we're talking about

00:36:10,000 --> 00:36:13,760
when you're in the github environment

00:36:11,920 --> 00:36:16,000
running these thefts in parallel it

00:36:13,760 --> 00:36:18,240
takes time to start up the processes and

00:36:16,000 --> 00:36:20,320
take time to

00:36:18,240 --> 00:36:22,079
initialize everything sometimes that can

00:36:20,320 --> 00:36:25,440
drag onto one to three moments

00:36:22,079 --> 00:36:27,440
just because get a guidance home for

00:36:25,440 --> 00:36:29,040
in their infrastructure the other times

00:36:27,440 --> 00:36:32,240
it's five seconds

00:36:29,040 --> 00:36:32,240
we were blazing through

00:36:32,480 --> 00:36:39,680
the end result is overall time to con

00:36:36,720 --> 00:36:41,280
is relative unchanged 30 35 to 40

00:36:39,680 --> 00:36:44,880
minutes you know a good day

00:36:41,280 --> 00:36:46,400
when nobody else is using the

00:36:44,880 --> 00:36:47,920
changing dangers that we're around it we

00:36:46,400 --> 00:36:49,920
can get it down to 20 minutes

00:36:47,920 --> 00:36:51,359
uh you know with everybody else in new

00:36:49,920 --> 00:36:55,359
york also

00:36:51,359 --> 00:36:56,400
using the matching takes about 35 to 45

00:36:55,359 --> 00:36:59,680
minutes so the

00:36:56,400 --> 00:37:01,040
very low change there but you have to

00:36:59,680 --> 00:37:04,640
remember we're doing

00:37:01,040 --> 00:37:07,760
10 jobs in parallel versus 152

00:37:04,640 --> 00:37:11,920
so that's a huge change

00:37:07,760 --> 00:37:13,680
and we now burn only 225 minutes of cpu

00:37:11,920 --> 00:37:15,599
compute time in every bill

00:37:13,680 --> 00:37:18,640
that is compared to one thousand fifteen

00:37:15,599 --> 00:37:23,839
hundred or about 577 percent

00:37:18,640 --> 00:37:23,839

YouTube URL: https://www.youtube.com/watch?v=l5eogRrnFRc


