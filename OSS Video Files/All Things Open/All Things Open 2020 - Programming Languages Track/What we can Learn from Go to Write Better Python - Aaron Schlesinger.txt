Title: What we can Learn from Go to Write Better Python - Aaron Schlesinger
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Programming Languages Track
Description: 
	Presented by: Aaron Schlesinger, Microsoft
Presented at All Things Open 2020 - Programming Languages Track

Abstract: Go (Golang) became an established language relatively quickly, but only in a small niche called "cloud native" development. Since then, the language has taken off in lots of other areas spanning from web app development to embedded and IoT software.

Go won't ever replace Python -- not even close! -- but the two technologies' use cases are overlapping more and more every day. We haven't yet looked at Python code through the lens of Go design patterns and language principles and it's time that we do. By bringing these languages closer together, we can write software that is faster and more resilient.

In this talk, I'll briefly introduce the origins, evolution, and current usage of Go. The rest of the talk will be live coding. First, we'll write a small app in Go to illustrate some of its strengths and design patterns. Then we'll go apply some of those patterns to a Python app. Finally, we'll put the two pieces of code we wrote together and run Python and Go side-by-side, using the best of each language to build an app.

This talk will be primarily live-coding and no prior knowledge of Go is needed to enjoy this talk.

You'll walk away knowing a little bit about Go, if you didn't already. You'll also leave understanding some new patterns that just might help you write better Python code. You'll also learn when (or if!) you should write some Go to complement your Python app.
Captions: 
	00:00:05,040 --> 00:00:08,720
i'm really happy to be here

00:00:06,879 --> 00:00:11,200
uh everybody so thank you so much for

00:00:08,720 --> 00:00:13,840
having me uh i want to make sure

00:00:11,200 --> 00:00:14,880
uh can everybody see these slides

00:00:13,840 --> 00:00:17,920
clearly

00:00:14,880 --> 00:00:20,560
uh legibly all that good stuff

00:00:17,920 --> 00:00:22,640
if you cannot just throw it in the chat

00:00:20,560 --> 00:00:26,240
and uh we'll fix it up

00:00:22,640 --> 00:00:29,359
so um i'm gonna just be taking questions

00:00:26,240 --> 00:00:30,320
and uh in the chat and in the qa i don't

00:00:29,359 --> 00:00:32,800
think i have

00:00:30,320 --> 00:00:33,920
i don't know how to see the razer hand

00:00:32,800 --> 00:00:35,280
part

00:00:33,920 --> 00:00:39,120
so if you could just put questions in

00:00:35,280 --> 00:00:41,920
the chat or qa either one works

00:00:39,120 --> 00:00:42,239
i'm happy to just take questions as they

00:00:41,920 --> 00:00:44,320
come

00:00:42,239 --> 00:00:46,239
during the talk there's going to not be

00:00:44,320 --> 00:00:47,360
a lot of slides it's going to be mostly

00:00:46,239 --> 00:00:49,440
live coding

00:00:47,360 --> 00:00:51,199
um so we're going to go full screen yeah

00:00:49,440 --> 00:00:53,039
kirk we're going to go full screen for

00:00:51,199 --> 00:00:54,960
um just the first few slides and then

00:00:53,039 --> 00:00:58,320
we're going to switch over to

00:00:54,960 --> 00:01:00,160
vs code and coding so we'll be

00:00:58,320 --> 00:01:01,680
uh doing most of the interaction that

00:01:00,160 --> 00:01:05,680
way so

00:01:01,680 --> 00:01:07,200
um this talk uh can be summed up as

00:01:05,680 --> 00:01:09,040
python loves go

00:01:07,200 --> 00:01:10,400
um that's how i like to sum it up at

00:01:09,040 --> 00:01:13,600
least and

00:01:10,400 --> 00:01:15,439
um the reason i put that heart there

00:01:13,600 --> 00:01:17,200
um is because i really want to stress

00:01:15,439 --> 00:01:20,000
that we're not talking about python

00:01:17,200 --> 00:01:22,320
versus go we're not trying to say go

00:01:20,000 --> 00:01:24,080
needs to replace python

00:01:22,320 --> 00:01:25,520
we're not having a competition between

00:01:24,080 --> 00:01:28,560
the two

00:01:25,520 --> 00:01:31,200
we're really truly are saying uh

00:01:28,560 --> 00:01:34,240
that go can be used to really improve

00:01:31,200 --> 00:01:37,040
your python code base

00:01:34,240 --> 00:01:38,000
so just a little bit more about me um i

00:01:37,040 --> 00:01:40,560
am aaron

00:01:38,000 --> 00:01:41,280
i've been a go programmer and teacher uh

00:01:40,560 --> 00:01:44,560
for

00:01:41,280 --> 00:01:46,560
a little over seven years uh

00:01:44,560 --> 00:01:47,680
and uh the programming language has been

00:01:46,560 --> 00:01:50,159
around for

00:01:47,680 --> 00:01:50,960
almost 11 years now so i've been doing

00:01:50,159 --> 00:01:54,720
it for

00:01:50,960 --> 00:01:56,719
quite a while now i am a cloud advocate

00:01:54,720 --> 00:01:57,840
a cloud developer advocate at microsoft

00:01:56,719 --> 00:02:00,240
i work

00:01:57,840 --> 00:02:00,960
in the azure group there's a little sub

00:02:00,240 --> 00:02:03,360
uh team

00:02:00,960 --> 00:02:04,079
inside of azure called open source

00:02:03,360 --> 00:02:07,680
engineering

00:02:04,079 --> 00:02:08,000
so my goal uh in all the communities i

00:02:07,680 --> 00:02:10,000
work

00:02:08,000 --> 00:02:11,280
in is to improve the state of open

00:02:10,000 --> 00:02:13,200
source which is

00:02:11,280 --> 00:02:15,520
uh partially the reason why i'm here

00:02:13,200 --> 00:02:18,319
talking with you today

00:02:15,520 --> 00:02:20,000
so i want to just jump right in so it's

00:02:18,319 --> 00:02:21,520
really important i think and pertinent

00:02:20,000 --> 00:02:24,239
for us to start with

00:02:21,520 --> 00:02:26,080
the history of go to figure out sort of

00:02:24,239 --> 00:02:28,319
where is go coming from and how can we

00:02:26,080 --> 00:02:31,440
tap into some of that power

00:02:28,319 --> 00:02:34,879
so first and foremost go was born

00:02:31,440 --> 00:02:37,760
at google there were some actually very

00:02:34,879 --> 00:02:38,800
accomplished and smart folks at google

00:02:37,760 --> 00:02:42,480
who

00:02:38,800 --> 00:02:45,360
noticed that google had this problem of

00:02:42,480 --> 00:02:46,720
having a huge code base trying to build

00:02:45,360 --> 00:02:49,120
really big

00:02:46,720 --> 00:02:50,720
back-end systems those are things like

00:02:49,120 --> 00:02:53,599
api servers

00:02:50,720 --> 00:02:55,599
back-end data processing jobs and more

00:02:53,599 --> 00:02:58,080
and a lot of their code base was java

00:02:55,599 --> 00:02:59,680
some of it was c plus and it was hard to

00:02:58,080 --> 00:03:02,159
maintain hard to scale

00:02:59,680 --> 00:03:03,280
hard to compile and in fact the story

00:03:02,159 --> 00:03:05,360
goes that

00:03:03,280 --> 00:03:08,080
they first thought of this concept of a

00:03:05,360 --> 00:03:10,959
new language while they were waiting for

00:03:08,080 --> 00:03:12,720
c plus plus code base to take 45 minutes

00:03:10,959 --> 00:03:15,200
to compile

00:03:12,720 --> 00:03:16,080
so that's kind of a fun story but the

00:03:15,200 --> 00:03:19,040
overall

00:03:16,080 --> 00:03:20,319
idea is that they want go to be first

00:03:19,040 --> 00:03:23,519
and foremost

00:03:20,319 --> 00:03:26,560
designed as a language that can scale

00:03:23,519 --> 00:03:28,720
and that means scale up to lots of cpu

00:03:26,560 --> 00:03:31,440
cores and taking lots of requests

00:03:28,720 --> 00:03:32,480
incoming per second but also just as

00:03:31,440 --> 00:03:35,040
importantly

00:03:32,480 --> 00:03:35,680
to be able to scale up to a massive code

00:03:35,040 --> 00:03:37,599
base

00:03:35,680 --> 00:03:39,680
that is collaborated on by a ton of

00:03:37,599 --> 00:03:41,120
people with different skill levels and

00:03:39,680 --> 00:03:44,319
different backgrounds

00:03:41,120 --> 00:03:46,560
uh effectively and efficiently

00:03:44,319 --> 00:03:48,720
and the most important feature of go

00:03:46,560 --> 00:03:52,000
that really ties in to

00:03:48,720 --> 00:03:55,120
that scale concept is having simplicity

00:03:52,000 --> 00:03:55,680
and power sit hand in hand and so

00:03:55,120 --> 00:03:57,840
there's a

00:03:55,680 --> 00:03:59,040
there's sort of um a saying inside of

00:03:57,840 --> 00:04:03,680
the gold community

00:03:59,040 --> 00:04:05,680
that goes like this simplicity is hard

00:04:03,680 --> 00:04:07,680
what that really means is that in order

00:04:05,680 --> 00:04:11,120
to take all of the power

00:04:07,680 --> 00:04:12,720
that go unleashes and make it accessible

00:04:11,120 --> 00:04:15,200
via simple apis

00:04:12,720 --> 00:04:16,239
that have simple concepts behind them is

00:04:15,200 --> 00:04:19,280
really really hard

00:04:16,239 --> 00:04:21,359
and being a fan of go of course i think

00:04:19,280 --> 00:04:22,320
that the go language has done a very

00:04:21,359 --> 00:04:24,320
good job

00:04:22,320 --> 00:04:26,639
of unleashing the power of the

00:04:24,320 --> 00:04:28,400
underlying hardware that it runs on

00:04:26,639 --> 00:04:31,440
so things like the networking and the

00:04:28,400 --> 00:04:34,160
file system and the cpu cores

00:04:31,440 --> 00:04:35,120
unleashing that in a way that any

00:04:34,160 --> 00:04:37,840
programmer

00:04:35,120 --> 00:04:39,759
can take advantage of and not just the

00:04:37,840 --> 00:04:42,720
programmers that have deep underlying

00:04:39,759 --> 00:04:46,000
systems expertise

00:04:42,720 --> 00:04:47,919
so i want to jump in now to with

00:04:46,000 --> 00:04:50,479
the background of go and some of the

00:04:47,919 --> 00:04:53,759
basic features of go in mind

00:04:50,479 --> 00:04:55,840
how do go and python compare so again

00:04:53,759 --> 00:04:56,400
i'm not saying is go better or is python

00:04:55,840 --> 00:04:58,400
better

00:04:56,400 --> 00:05:00,960
i'm really saying how can we view the

00:04:58,400 --> 00:05:03,440
world of go next to the world of python

00:05:00,960 --> 00:05:04,800
so we can use go to complement python in

00:05:03,440 --> 00:05:06,880
different ways

00:05:04,800 --> 00:05:07,919
so this little chipmunk that you see

00:05:06,880 --> 00:05:10,240
here

00:05:07,919 --> 00:05:13,280
that's the closest emoji i can get to a

00:05:10,240 --> 00:05:16,800
gopher and gopher is sort of the

00:05:13,280 --> 00:05:19,360
um the mascot of go and actually if you

00:05:16,800 --> 00:05:20,000
look right behind me there is the

00:05:19,360 --> 00:05:21,919
plushie

00:05:20,000 --> 00:05:23,680
mascot of go right where my finger is

00:05:21,919 --> 00:05:27,360
the pink one

00:05:23,680 --> 00:05:29,759
so go is really well suited for

00:05:27,360 --> 00:05:30,639
back-end servers and back-end data

00:05:29,759 --> 00:05:33,600
processing

00:05:30,639 --> 00:05:33,919
or other long-running jobs so you won't

00:05:33,600 --> 00:05:37,120
see

00:05:33,919 --> 00:05:39,440
go as used as much for doing things like

00:05:37,120 --> 00:05:42,320
full stack development

00:05:39,440 --> 00:05:44,800
another really important feature of go

00:05:42,320 --> 00:05:47,680
built from the ground up to support

00:05:44,800 --> 00:05:48,720
multi-core systems so you can have a go

00:05:47,680 --> 00:05:50,400
binary

00:05:48,720 --> 00:05:52,400
you can build your go code and you can

00:05:50,400 --> 00:05:53,440
run it and if you've written it in such

00:05:52,400 --> 00:05:55,360
a way

00:05:53,440 --> 00:05:57,360
it can take advantage of every single

00:05:55,360 --> 00:05:59,600
core on your machine

00:05:57,360 --> 00:06:01,039
whether or not you have two cores or you

00:05:59,600 --> 00:06:03,680
have 64 cores

00:06:01,039 --> 00:06:04,560
the program can scale up as necessary to

00:06:03,680 --> 00:06:06,639
take advantage of

00:06:04,560 --> 00:06:08,560
all of those cores without changing the

00:06:06,639 --> 00:06:11,120
code without changing a constant for the

00:06:08,560 --> 00:06:13,360
number of threads or anything like that

00:06:11,120 --> 00:06:14,880
now on the other side of the coin we've

00:06:13,360 --> 00:06:17,120
got python

00:06:14,880 --> 00:06:18,800
now i'm assuming that you may know a

00:06:17,120 --> 00:06:19,280
little bit more about python in this

00:06:18,800 --> 00:06:22,400
talk

00:06:19,280 --> 00:06:23,440
then go and if you don't that's okay but

00:06:22,400 --> 00:06:25,120
i'm assuming

00:06:23,440 --> 00:06:26,960
that you probably already know that

00:06:25,120 --> 00:06:29,520
python is a great tool

00:06:26,960 --> 00:06:31,440
for fast prototyping you probably know

00:06:29,520 --> 00:06:33,120
that it doesn't have a lot of the syntax

00:06:31,440 --> 00:06:35,680
that other languages have

00:06:33,120 --> 00:06:37,680
as things like semicolons and squiggly

00:06:35,680 --> 00:06:39,919
braces and so on

00:06:37,680 --> 00:06:42,000
and that's one of the big features that

00:06:39,919 --> 00:06:45,039
enables you to write

00:06:42,000 --> 00:06:47,120
python programs really quickly the other

00:06:45,039 --> 00:06:48,319
thing is you may be familiar with python

00:06:47,120 --> 00:06:50,720
as a full stack

00:06:48,319 --> 00:06:52,960
web development tool there's frameworks

00:06:50,720 --> 00:06:55,840
like flask which we'll see today

00:06:52,960 --> 00:06:57,280
and frameworks like django both of which

00:06:55,840 --> 00:06:59,520
enable you

00:06:57,280 --> 00:07:01,360
sort of out of the box to be able to

00:06:59,520 --> 00:07:03,280
build a full web app

00:07:01,360 --> 00:07:04,479
everything from the front end javascript

00:07:03,280 --> 00:07:06,800
css stuff

00:07:04,479 --> 00:07:08,319
all the way back to the database layer

00:07:06,800 --> 00:07:12,000
talking to postgresdb

00:07:08,319 --> 00:07:15,840
and so on and so forth so

00:07:12,000 --> 00:07:17,360
with that pro and con list in mind

00:07:15,840 --> 00:07:19,520
there are two ways that we can sort of

00:07:17,360 --> 00:07:22,080
start integrating go into

00:07:19,520 --> 00:07:23,120
our python code base one is to take

00:07:22,080 --> 00:07:25,360
patterns out

00:07:23,120 --> 00:07:26,479
of go and apply some of those design

00:07:25,360 --> 00:07:28,800
patterns over

00:07:26,479 --> 00:07:29,840
to python the other way which you'll see

00:07:28,800 --> 00:07:32,400
after this slide is

00:07:29,840 --> 00:07:33,520
actually to take some python code out

00:07:32,400 --> 00:07:36,560
and replace it

00:07:33,520 --> 00:07:39,440
with go code so

00:07:36,560 --> 00:07:41,520
from the patterns perspective one thing

00:07:39,440 --> 00:07:42,560
that go really excels at i mentioned

00:07:41,520 --> 00:07:44,400
simplicity

00:07:42,560 --> 00:07:45,599
part of simplicity means that there's

00:07:44,400 --> 00:07:48,000
not a lot of magic

00:07:45,599 --> 00:07:49,440
in go so you don't have things like

00:07:48,000 --> 00:07:51,280
function decorators

00:07:49,440 --> 00:07:52,720
uh you don't have things like things

00:07:51,280 --> 00:07:55,680
like magic test

00:07:52,720 --> 00:07:56,560
mocks things like that go also has less

00:07:55,680 --> 00:07:58,800
machinery

00:07:56,560 --> 00:08:01,280
so there are not things like classes and

00:07:58,800 --> 00:08:04,160
object-oriented programming in go

00:08:01,280 --> 00:08:05,039
now in some cases in python it can be

00:08:04,160 --> 00:08:07,039
useful

00:08:05,039 --> 00:08:09,199
to let's say you're writing a function

00:08:07,039 --> 00:08:10,479
to take some of that concept of cutting

00:08:09,199 --> 00:08:12,879
down on the magic

00:08:10,479 --> 00:08:14,800
cutting down on the machinery and bring

00:08:12,879 --> 00:08:17,759
some of that concept to simplify

00:08:14,800 --> 00:08:19,039
maybe a function or a module in my in a

00:08:17,759 --> 00:08:21,360
python

00:08:19,039 --> 00:08:23,440
and that may be because a lot of people

00:08:21,360 --> 00:08:24,560
may be contributing to that code base

00:08:23,440 --> 00:08:26,720
over time

00:08:24,560 --> 00:08:28,639
or maybe there are people who have less

00:08:26,720 --> 00:08:30,639
experience with python

00:08:28,639 --> 00:08:31,680
and it would be good in that case to

00:08:30,639 --> 00:08:34,000
probably

00:08:31,680 --> 00:08:35,519
give them a cleaner and simpler code

00:08:34,000 --> 00:08:37,519
base that they can understand

00:08:35,519 --> 00:08:39,760
just by reading the code rather than

00:08:37,519 --> 00:08:41,200
having to read python docs about the

00:08:39,760 --> 00:08:43,599
magic of machinery

00:08:41,200 --> 00:08:44,640
now don't get me wrong i love the magic

00:08:43,599 --> 00:08:46,240
in python

00:08:44,640 --> 00:08:48,000
and i love the machinery that it gives

00:08:46,240 --> 00:08:50,480
you because it makes your life

00:08:48,000 --> 00:08:52,880
much easier in many cases and that's

00:08:50,480 --> 00:08:55,120
where the fast prototyping versus

00:08:52,880 --> 00:08:57,120
the simplicity of go balance comes into

00:08:55,120 --> 00:08:58,480
play and depending on your use case

00:08:57,120 --> 00:08:59,120
you'll have to find that balance

00:08:58,480 --> 00:09:00,640
yourself

00:08:59,120 --> 00:09:03,440
and i'll give an example of the balance

00:09:00,640 --> 00:09:05,519
here when we do some code

00:09:03,440 --> 00:09:08,080
now the second thing about go is it is

00:09:05,519 --> 00:09:10,800
compiled it is a compiled language

00:09:08,080 --> 00:09:12,080
so your code runs through a program

00:09:10,800 --> 00:09:15,200
called a compiler

00:09:12,080 --> 00:09:16,720
the compiler spits out a single binary

00:09:15,200 --> 00:09:19,120
so this is a binary that you can run

00:09:16,720 --> 00:09:22,320
anywhere so i am running linux

00:09:19,120 --> 00:09:24,800
on linux i can build a binary for mac os

00:09:22,320 --> 00:09:25,440
i can email that binary to someone on

00:09:24,800 --> 00:09:27,600
mac

00:09:25,440 --> 00:09:29,279
and they can run it just like they would

00:09:27,600 --> 00:09:31,360
run any other binary like

00:09:29,279 --> 00:09:33,920
let's say command line utility like cd

00:09:31,360 --> 00:09:37,440
or ls

00:09:33,920 --> 00:09:40,480
the third point here is for me and my

00:09:37,440 --> 00:09:43,440
style the most important and this is

00:09:40,480 --> 00:09:44,160
composition rather than extension so in

00:09:43,440 --> 00:09:46,399
python

00:09:44,160 --> 00:09:48,399
you have classes and you extend those

00:09:46,399 --> 00:09:49,279
classes and implement other methods and

00:09:48,399 --> 00:09:52,160
so on

00:09:49,279 --> 00:09:54,000
go does not have extension go has

00:09:52,160 --> 00:09:56,240
something called composition

00:09:54,000 --> 00:09:58,080
if you're familiar with unix or linux

00:09:56,240 --> 00:10:00,160
you're probably familiar with the pipe

00:09:58,080 --> 00:10:01,279
concept or you have one program that

00:10:00,160 --> 00:10:03,120
outputs something

00:10:01,279 --> 00:10:04,959
you can pipe that output to another

00:10:03,120 --> 00:10:07,200
program's input

00:10:04,959 --> 00:10:08,399
with go you have a very similar concept

00:10:07,200 --> 00:10:10,800
and if used

00:10:08,399 --> 00:10:13,120
properly it can be very very powerful

00:10:10,800 --> 00:10:13,440
and we'll see a great example of that in

00:10:13,120 --> 00:10:16,240
the go

00:10:13,440 --> 00:10:18,160
code we're going to write today and then

00:10:16,240 --> 00:10:20,640
the last one this one's a bit fuzzy

00:10:18,160 --> 00:10:23,680
but it's important to keep in mind now

00:10:20,640 --> 00:10:26,079
go is a very highly concurrent language

00:10:23,680 --> 00:10:28,240
so when you have concurrency it's nice

00:10:26,079 --> 00:10:30,160
to cut down on the amount of global

00:10:28,240 --> 00:10:32,560
state that you're managing

00:10:30,160 --> 00:10:33,920
and that's just because the more global

00:10:32,560 --> 00:10:35,440
state you have to deal with the more

00:10:33,920 --> 00:10:38,079
chance that two different

00:10:35,440 --> 00:10:39,279
threads of execution will access it at

00:10:38,079 --> 00:10:41,680
the same time

00:10:39,279 --> 00:10:43,360
which will create a race condition and

00:10:41,680 --> 00:10:45,680
undefined behavior

00:10:43,360 --> 00:10:47,600
so in go it's really important to

00:10:45,680 --> 00:10:50,000
clearly define

00:10:47,600 --> 00:10:51,120
where your state is going to be written

00:10:50,000 --> 00:10:53,519
or modified

00:10:51,120 --> 00:10:54,880
or mutated those are three words for

00:10:53,519 --> 00:10:56,640
approximately the same thing

00:10:54,880 --> 00:10:58,560
where is your state going to be changed

00:10:56,640 --> 00:10:59,440
what is the code that is responsible for

00:10:58,560 --> 00:11:02,079
changing it

00:10:59,440 --> 00:11:04,640
and draw a line around that code and for

00:11:02,079 --> 00:11:06,800
all the code outside of that line

00:11:04,640 --> 00:11:09,200
you you make it so that code does not

00:11:06,800 --> 00:11:11,519
access the state it only reads it but it

00:11:09,200 --> 00:11:13,440
does not write or mutate it

00:11:11,519 --> 00:11:15,600
now having that line can be really

00:11:13,440 --> 00:11:17,360
really important for not only debugging

00:11:15,600 --> 00:11:19,040
but also designing your code and

00:11:17,360 --> 00:11:20,640
designing that next feature

00:11:19,040 --> 00:11:22,800
so on so that's another thing that's

00:11:20,640 --> 00:11:23,440
really really important and can be very

00:11:22,800 --> 00:11:26,959
useful

00:11:23,440 --> 00:11:29,200
for python okay so

00:11:26,959 --> 00:11:31,040
we're gonna get to the code now you can

00:11:29,200 --> 00:11:32,720
see everything including the slides and

00:11:31,040 --> 00:11:33,760
the code and all the readmes and

00:11:32,720 --> 00:11:37,600
everything else at this

00:11:33,760 --> 00:11:40,880
short link so b bit dot l y slash ato

00:11:37,600 --> 00:11:42,000
2020 so i'm going to leave the slides

00:11:40,880 --> 00:11:43,680
now

00:11:42,000 --> 00:11:46,959
and i'm going to go into the code let me

00:11:43,680 --> 00:11:49,120
catch up on the chat real quick here

00:11:46,959 --> 00:11:51,040
so we've got from celine i hope i said

00:11:49,120 --> 00:11:54,079
that oh we've got from richard sorry

00:11:51,040 --> 00:11:56,399
hope i said that right celine so richard

00:11:54,079 --> 00:11:57,680
what is go uh so we're actually going to

00:11:56,399 --> 00:11:59,519
see the language

00:11:57,680 --> 00:12:01,920
in action here it is a programming

00:11:59,519 --> 00:12:04,480
language uh it is used for

00:12:01,920 --> 00:12:05,920
lower level systems level programming so

00:12:04,480 --> 00:12:08,399
think about things like

00:12:05,920 --> 00:12:09,920
maybe an api server or if you're writing

00:12:08,399 --> 00:12:12,480
a database

00:12:09,920 --> 00:12:15,120
or if you're accessing low-level memory

00:12:12,480 --> 00:12:18,320
and things like that

00:12:15,120 --> 00:12:20,240
so celine says much like how google used

00:12:18,320 --> 00:12:21,519
to require python experience for their

00:12:20,240 --> 00:12:23,279
java developers

00:12:21,519 --> 00:12:24,720
they wanted people to think in python

00:12:23,279 --> 00:12:26,880
but write in java

00:12:24,720 --> 00:12:27,920
but in this case think and go and write

00:12:26,880 --> 00:12:30,079
in python

00:12:27,920 --> 00:12:31,600
use the best ideas regardless of which

00:12:30,079 --> 00:12:34,399
language is expressed in

00:12:31,600 --> 00:12:35,519
exactly that is very well said thank you

00:12:34,399 --> 00:12:38,079
so much for that

00:12:35,519 --> 00:12:38,800
i completely agree the ideas are

00:12:38,079 --> 00:12:42,480
portable

00:12:38,800 --> 00:12:45,600
between languages and we're going to see

00:12:42,480 --> 00:12:47,279
in this code in this live coding how

00:12:45,600 --> 00:12:50,880
we're going to take some of those ideas

00:12:47,279 --> 00:12:52,880
and move them around between languages

00:12:50,880 --> 00:12:54,240
it's fun debugging a rails app i was

00:12:52,880 --> 00:12:59,200
asking is this magic

00:12:54,240 --> 00:13:00,800
or is this a bug yeah indeed

00:12:59,200 --> 00:13:02,240
i think we've all been down that road it

00:13:00,800 --> 00:13:04,800
may not be on rails

00:13:02,240 --> 00:13:05,680
maybe on another technology but of

00:13:04,800 --> 00:13:08,320
course

00:13:05,680 --> 00:13:08,880
one person's magic is another person's

00:13:08,320 --> 00:13:11,040
feature

00:13:08,880 --> 00:13:12,639
if you are deep uh embedded in the

00:13:11,040 --> 00:13:13,760
technology you've been doing it for a

00:13:12,639 --> 00:13:15,760
long time

00:13:13,760 --> 00:13:16,959
that magic is more like a feature that's

00:13:15,760 --> 00:13:19,920
given to you

00:13:16,959 --> 00:13:21,839
uh whereas someone new to the language

00:13:19,920 --> 00:13:23,200
it may not be that it may be completely

00:13:21,839 --> 00:13:26,320
mysterious

00:13:23,200 --> 00:13:27,600
and with go the aim of the designers of

00:13:26,320 --> 00:13:29,680
go was that

00:13:27,600 --> 00:13:30,639
almost nothing will be considered magic

00:13:29,680 --> 00:13:33,760
and almost

00:13:30,639 --> 00:13:35,920
everyone who joins a project

00:13:33,760 --> 00:13:37,040
or a product or a team that's working on

00:13:35,920 --> 00:13:38,560
go

00:13:37,040 --> 00:13:40,399
will be able to pick it up fairly

00:13:38,560 --> 00:13:43,440
quickly enough to make

00:13:40,399 --> 00:13:45,760
meaningful conversations uh without

00:13:43,440 --> 00:13:46,880
excuse me not conversations enough to

00:13:45,760 --> 00:13:49,279
make a

00:13:46,880 --> 00:13:50,639
meaningful contributions without having

00:13:49,279 --> 00:13:52,800
to pick up a massive

00:13:50,639 --> 00:13:55,040
programming manual to learn all of the

00:13:52,800 --> 00:13:58,639
quote magic before

00:13:55,040 --> 00:14:01,760
being able to jump in okay

00:13:58,639 --> 00:14:03,680
so i've got vs code here this is

00:14:01,760 --> 00:14:05,760
not required to write go at all this is

00:14:03,680 --> 00:14:09,199
just my preferred

00:14:05,760 --> 00:14:12,959
code editor you can use

00:14:09,199 --> 00:14:15,040
vim vim has great go support you can use

00:14:12,959 --> 00:14:16,000
the atom editor adam has great go

00:14:15,040 --> 00:14:18,480
support

00:14:16,000 --> 00:14:19,519
uh you can use emacs so on and so forth

00:14:18,480 --> 00:14:22,560
the only

00:14:19,519 --> 00:14:24,399
ide the only editor that doesn't have

00:14:22,560 --> 00:14:27,120
ghost support that i know of

00:14:24,399 --> 00:14:30,079
is visual studio so this is visual

00:14:27,120 --> 00:14:31,760
studio code it's an open source

00:14:30,079 --> 00:14:33,600
editor that's plugable and you can get

00:14:31,760 --> 00:14:36,800
support for python

00:14:33,600 --> 00:14:38,800
go ruby javascript you name it

00:14:36,800 --> 00:14:40,480
you can even write csharp and other.net

00:14:38,800 --> 00:14:42,880
technologies in here as well

00:14:40,480 --> 00:14:44,000
so i love this editor but just as a

00:14:42,880 --> 00:14:47,279
preface you do not need

00:14:44,000 --> 00:14:50,160
to use this to write go

00:14:47,279 --> 00:14:51,360
so just looking at the folder structure

00:14:50,160 --> 00:14:53,760
we already see

00:14:51,360 --> 00:14:54,480
sort of our first pattern that we can

00:14:53,760 --> 00:14:57,839
take

00:14:54,480 --> 00:15:01,279
to add some go to sprinkle some go

00:14:57,839 --> 00:15:01,760
into our python app we've got a back-end

00:15:01,279 --> 00:15:04,079
folder

00:15:01,760 --> 00:15:04,880
and a front-end folder okay so we've

00:15:04,079 --> 00:15:06,800
made

00:15:04,880 --> 00:15:08,560
we've made a split sort of like i

00:15:06,800 --> 00:15:09,519
mentioned we're drawing a line around

00:15:08,560 --> 00:15:11,760
our state

00:15:09,519 --> 00:15:14,160
we've made a split between the front end

00:15:11,760 --> 00:15:16,560
code the python code that's going to

00:15:14,160 --> 00:15:17,600
accept incoming requests from outside

00:15:16,560 --> 00:15:20,240
the system

00:15:17,600 --> 00:15:22,240
from a command line or from chrome or a

00:15:20,240 --> 00:15:24,079
browser or anything like that

00:15:22,240 --> 00:15:25,279
and that is going to do a little bit of

00:15:24,079 --> 00:15:26,880
processing

00:15:25,279 --> 00:15:28,959
and then it's going to forward some

00:15:26,880 --> 00:15:30,480
pertinent data to the back end and

00:15:28,959 --> 00:15:32,240
that's the one written in go

00:15:30,480 --> 00:15:33,920
and that's going to manage the state

00:15:32,240 --> 00:15:36,320
it's going to manage our database

00:15:33,920 --> 00:15:37,440
it's going to manage some files and so

00:15:36,320 --> 00:15:41,360
forth

00:15:37,440 --> 00:15:44,000
so starting with the front end we've got

00:15:41,360 --> 00:15:44,800
our flask app okay so there's a lot of

00:15:44,000 --> 00:15:46,800
code here

00:15:44,800 --> 00:15:48,720
you do not need to understand any of

00:15:46,800 --> 00:15:50,399
this i will walk through

00:15:48,720 --> 00:15:52,639
the specific parts that we're going to

00:15:50,399 --> 00:15:53,680
talk about here but the goal here is not

00:15:52,639 --> 00:15:56,240
to understand

00:15:53,680 --> 00:15:57,920
everything that the python is doing it's

00:15:56,240 --> 00:15:59,680
more to understand what we're going to

00:15:57,920 --> 00:16:02,160
what functionality we're going to take

00:15:59,680 --> 00:16:03,440
out and replace with go

00:16:02,160 --> 00:16:05,600
and how we're going to do that

00:16:03,440 --> 00:16:07,759
replacement okay so

00:16:05,600 --> 00:16:10,959
what we are writing here is an

00:16:07,759 --> 00:16:14,240
application that you can give a url to

00:16:10,959 --> 00:16:16,399
by a rest api and it will go out

00:16:14,240 --> 00:16:18,079
the python code will go out it will

00:16:16,399 --> 00:16:19,920
download that url

00:16:18,079 --> 00:16:22,720
it will expect it to be an image of

00:16:19,920 --> 00:16:25,759
course it will download that url

00:16:22,720 --> 00:16:27,680
it will save that url into a file

00:16:25,759 --> 00:16:28,959
so it will download an image and save it

00:16:27,680 --> 00:16:30,720
to a file

00:16:28,959 --> 00:16:32,160
and then it will save some metadata

00:16:30,720 --> 00:16:34,399
about that image in

00:16:32,160 --> 00:16:36,639
a database so for those who are familiar

00:16:34,399 --> 00:16:39,759
with python we're going to be using

00:16:36,639 --> 00:16:42,160
this requests library to be doing that

00:16:39,759 --> 00:16:43,839
http request to get the image

00:16:42,160 --> 00:16:45,199
and we're going to also be using the

00:16:43,839 --> 00:16:48,800
pickle format

00:16:45,199 --> 00:16:50,959
to save our database pickle right here

00:16:48,800 --> 00:16:53,279
if you're not familiar with python

00:16:50,959 --> 00:16:54,560
request is a convenient library to do

00:16:53,279 --> 00:16:58,000
http

00:16:54,560 --> 00:17:00,880
requests out to a url of your choice

00:16:58,000 --> 00:17:03,360
and pickle is a nice library built into

00:17:00,880 --> 00:17:04,799
python that allows you to serialize and

00:17:03,360 --> 00:17:08,240
deserialize

00:17:04,799 --> 00:17:10,640
a python dictionary or other python data

00:17:08,240 --> 00:17:12,240
i'm using it here to do a dictionary so

00:17:10,640 --> 00:17:13,839
this is what a python dictionary looks

00:17:12,240 --> 00:17:15,679
like

00:17:13,839 --> 00:17:16,959
this is what it looks like to download

00:17:15,679 --> 00:17:19,120
the image

00:17:16,959 --> 00:17:20,079
and this is what it looks like to open

00:17:19,120 --> 00:17:22,640
the pickle

00:17:20,079 --> 00:17:23,679
database file uh this is what it looks

00:17:22,640 --> 00:17:26,079
like to open the

00:17:23,679 --> 00:17:27,039
actual image file and actually create it

00:17:26,079 --> 00:17:29,520
and open it

00:17:27,039 --> 00:17:31,039
so now down below we can write the image

00:17:29,520 --> 00:17:34,160
that we just downloaded

00:17:31,039 --> 00:17:37,039
into the file and now we're just doing

00:17:34,160 --> 00:17:40,559
some database operations so

00:17:37,039 --> 00:17:44,240
right here lines 1 13

00:17:40,559 --> 00:17:44,960
down to 116 we're writing some global

00:17:44,240 --> 00:17:47,440
state

00:17:44,960 --> 00:17:49,280
about our newly downloaded image we're

00:17:47,440 --> 00:17:52,000
writing we're updating the last time an

00:17:49,280 --> 00:17:53,360
image was uploaded ever

00:17:52,000 --> 00:17:55,039
keeping track of the total number of

00:17:53,360 --> 00:17:57,039
images and so forth

00:17:55,039 --> 00:17:58,320
and now we are assigning the image a

00:17:57,039 --> 00:18:01,520
unique identifier

00:17:58,320 --> 00:18:02,400
a uu id and we're saving some metadata

00:18:01,520 --> 00:18:05,679
about the image

00:18:02,400 --> 00:18:06,400
the name of the image tags uh some

00:18:05,679 --> 00:18:09,039
identifica

00:18:06,400 --> 00:18:11,600
identification tags the url that we

00:18:09,039 --> 00:18:14,320
downloaded from and most importantly

00:18:11,600 --> 00:18:15,120
the file name where the image was just

00:18:14,320 --> 00:18:17,919
saved

00:18:15,120 --> 00:18:19,440
okay and then we're returning some json

00:18:17,919 --> 00:18:22,480
with this nice jsonify

00:18:19,440 --> 00:18:23,679
function and we're saying okay the

00:18:22,480 --> 00:18:26,880
download was done

00:18:23,679 --> 00:18:29,200
and the image is ready all right

00:18:26,880 --> 00:18:31,200
so the one thing that i wanted to do in

00:18:29,200 --> 00:18:34,320
this python code but i was not

00:18:31,200 --> 00:18:35,360
able to do reasonably well is compress

00:18:34,320 --> 00:18:38,240
the image

00:18:35,360 --> 00:18:39,840
okay so depending on the image that the

00:18:38,240 --> 00:18:42,160
url that you gave this

00:18:39,840 --> 00:18:43,760
application the image could be fairly

00:18:42,160 --> 00:18:46,080
large

00:18:43,760 --> 00:18:48,080
so in order to compress that you have to

00:18:46,080 --> 00:18:51,120
use a python library to do compression

00:18:48,080 --> 00:18:52,960
of course and the compression might take

00:18:51,120 --> 00:18:55,039
quite a long time it might take a second

00:18:52,960 --> 00:18:58,080
or even two seconds

00:18:55,039 --> 00:19:00,880
now python is single threaded

00:18:58,080 --> 00:19:02,960
so at least the default c python

00:19:00,880 --> 00:19:05,760
implementation is single threaded

00:19:02,960 --> 00:19:06,160
so what that means is for that one or

00:19:05,760 --> 00:19:08,080
two

00:19:06,160 --> 00:19:09,520
seconds that the image is being

00:19:08,080 --> 00:19:13,120
downloaded

00:19:09,520 --> 00:19:16,080
no other routes will be able to

00:19:13,120 --> 00:19:16,720
respond so effectively a server will

00:19:16,080 --> 00:19:19,120
just be

00:19:16,720 --> 00:19:20,400
frozen in time until the compression is

00:19:19,120 --> 00:19:22,080
done

00:19:20,400 --> 00:19:23,520
now i didn't want to do that i didn't

00:19:22,080 --> 00:19:27,039
want to have that

00:19:23,520 --> 00:19:27,840
that kind of poor performance on my

00:19:27,039 --> 00:19:29,679
server

00:19:27,840 --> 00:19:31,600
so there is a way around that in native

00:19:29,679 --> 00:19:33,600
python and that is to use the

00:19:31,600 --> 00:19:36,320
multi-processing module

00:19:33,600 --> 00:19:38,000
and that will effectively fork a new

00:19:36,320 --> 00:19:40,559
python process to handle

00:19:38,000 --> 00:19:42,400
that data processing and then that can

00:19:40,559 --> 00:19:44,640
save the compressed file

00:19:42,400 --> 00:19:47,200
uh to disk and then i can figure out

00:19:44,640 --> 00:19:49,919
when that that process is done

00:19:47,200 --> 00:19:51,760
uh so that's a bit heavy weight uh to

00:19:49,919 --> 00:19:52,000
launch a brand new process just to do

00:19:51,760 --> 00:19:54,480
one

00:19:52,000 --> 00:19:55,200
file and share a little bit of memory

00:19:54,480 --> 00:19:57,039
but also

00:19:55,200 --> 00:19:59,360
it would have been much more efficient

00:19:57,039 --> 00:20:01,039
for me the programmer

00:19:59,360 --> 00:20:03,360
for me the programmer not the machine

00:20:01,039 --> 00:20:05,520
but for me my efficiency and my

00:20:03,360 --> 00:20:07,200
understanding of the system

00:20:05,520 --> 00:20:10,000
to just be able to share a little bit of

00:20:07,200 --> 00:20:11,039
memory to some other thread or some

00:20:10,000 --> 00:20:13,440
other core

00:20:11,039 --> 00:20:14,720
on my machine that's running so i've got

00:20:13,440 --> 00:20:16,720
a multi-core system

00:20:14,720 --> 00:20:18,640
effectively i'd be able to i'd like to

00:20:16,720 --> 00:20:20,799
be able to take my code and say

00:20:18,640 --> 00:20:22,000
okay the compression part's gonna run

00:20:20,799 --> 00:20:23,840
over here

00:20:22,000 --> 00:20:25,679
on this core and then when that's done i

00:20:23,840 --> 00:20:26,080
want that to just write the compressed

00:20:25,679 --> 00:20:28,720
file

00:20:26,080 --> 00:20:30,159
down to my disk but i can't quite do

00:20:28,720 --> 00:20:30,559
that here okay so that's what we're

00:20:30,159 --> 00:20:32,840
gonna

00:20:30,559 --> 00:20:34,000
target we're gonna target that

00:20:32,840 --> 00:20:35,520
functionality

00:20:34,000 --> 00:20:37,200
and we're going to target to write that

00:20:35,520 --> 00:20:39,760
and go because go

00:20:37,200 --> 00:20:40,880
can do that on a background core a

00:20:39,760 --> 00:20:44,640
background thread

00:20:40,880 --> 00:20:47,440
and it can do that more quickly okay

00:20:44,640 --> 00:20:48,080
so if i haven't broken everything let's

00:20:47,440 --> 00:20:50,159
see this

00:20:48,080 --> 00:20:51,520
thing in action on the python

00:20:50,159 --> 00:20:54,640
implementation

00:20:51,520 --> 00:20:54,880
before we go and take things out and run

00:20:54,640 --> 00:20:57,520
it

00:20:54,880 --> 00:20:59,520
on the go side so we've got a flask app

00:20:57,520 --> 00:21:03,440
so we're going to run the flask app

00:20:59,520 --> 00:21:05,679
we're going to go to localhost 5000

00:21:03,440 --> 00:21:07,120
and we're going to see there is no image

00:21:05,679 --> 00:21:08,799
uploaded

00:21:07,120 --> 00:21:10,320
no images were ever uploaded to this

00:21:08,799 --> 00:21:13,840
server okay

00:21:10,320 --> 00:21:17,679
so i have a little canned curl

00:21:13,840 --> 00:21:19,280
request right here and this is going to

00:21:17,679 --> 00:21:22,159
tell my server

00:21:19,280 --> 00:21:22,640
i want you to download and save this

00:21:22,159 --> 00:21:25,679
image

00:21:22,640 --> 00:21:28,400
so this is an image of the python logo

00:21:25,679 --> 00:21:30,320
and i want you to call it python so then

00:21:28,400 --> 00:21:33,520
later i can go and

00:21:30,320 --> 00:21:34,240
take that image and show it on an html

00:21:33,520 --> 00:21:36,960
page

00:21:34,240 --> 00:21:40,000
so i'm going to copy this command i am

00:21:36,960 --> 00:21:43,520
going over to

00:21:40,000 --> 00:21:44,080
this pane i'll paste it in and it took a

00:21:43,520 --> 00:21:46,000
little while

00:21:44,080 --> 00:21:48,799
and maybe took i don't know 200

00:21:46,000 --> 00:21:51,919
milliseconds 250 milliseconds

00:21:48,799 --> 00:21:53,280
but eventually it said done and now the

00:21:51,919 --> 00:21:56,559
image is downloaded

00:21:53,280 --> 00:21:57,520
so if i head over to here now we've got

00:21:56,559 --> 00:21:59,120
one image

00:21:57,520 --> 00:22:01,760
it was just downloaded so i've got a

00:21:59,120 --> 00:22:03,760
last uploaded typestamp

00:22:01,760 --> 00:22:05,200
and we can see a list a list of the

00:22:03,760 --> 00:22:08,159
images

00:22:05,200 --> 00:22:10,159
now we've got a python image and i'm

00:22:08,159 --> 00:22:12,240
going to try to load the python image

00:22:10,159 --> 00:22:14,159
and there we go so this is all python

00:22:12,240 --> 00:22:17,360
powered and this page

00:22:14,159 --> 00:22:20,960
particular is looking up

00:22:17,360 --> 00:22:24,000
where the python image file is located

00:22:20,960 --> 00:22:26,559
spitting out some html here you can see

00:22:24,000 --> 00:22:28,480
it spits out an image tag

00:22:26,559 --> 00:22:30,880
and the image tag points back to the

00:22:28,480 --> 00:22:33,200
python server

00:22:30,880 --> 00:22:34,880
and the python server then serves up the

00:22:33,200 --> 00:22:38,640
image file itself

00:22:34,880 --> 00:22:41,039
okay so it's a fairly complex system

00:22:38,640 --> 00:22:42,320
and we're going to move out a lot of the

00:22:41,039 --> 00:22:46,240
complexity into

00:22:42,320 --> 00:22:48,320
go so

00:22:46,240 --> 00:22:50,320
we're going to head over now to our back

00:22:48,320 --> 00:22:52,000
end directory

00:22:50,320 --> 00:22:54,880
now you're going to see some go code

00:22:52,000 --> 00:22:55,919
which i anticipate will probably be new

00:22:54,880 --> 00:22:58,159
for a lot of you

00:22:55,919 --> 00:23:00,640
and that's okay i'm going to point out

00:22:58,159 --> 00:23:02,880
some pertinent details of the go code

00:23:00,640 --> 00:23:04,880
that are going to help us build this

00:23:02,880 --> 00:23:06,159
complex system

00:23:04,880 --> 00:23:08,320
and then we're going to go and hook up

00:23:06,159 --> 00:23:12,640
the python to that goku

00:23:08,320 --> 00:23:15,679
okay so this is what go looks like

00:23:12,640 --> 00:23:18,080
so remember i said go is compiled

00:23:15,679 --> 00:23:20,240
so all of this code here in the main and

00:23:18,080 --> 00:23:22,080
all these other dot go files let me make

00:23:20,240 --> 00:23:24,080
this a little bit bigger for you

00:23:22,080 --> 00:23:26,720
all these other dot go files image

00:23:24,080 --> 00:23:30,080
handler and process and so on

00:23:26,720 --> 00:23:32,799
they will all be taken together

00:23:30,080 --> 00:23:34,880
jammed into one file the compiler will

00:23:32,799 --> 00:23:36,400
run over all of that and turn it into a

00:23:34,880 --> 00:23:38,559
machine code

00:23:36,400 --> 00:23:40,159
it'll turn it into linux machine code or

00:23:38,559 --> 00:23:42,799
mac machine code or

00:23:40,159 --> 00:23:44,240
windows machine code it even supports

00:23:42,799 --> 00:23:48,400
arm and freebsd

00:23:44,240 --> 00:23:51,520
and other architectures as well so

00:23:48,400 --> 00:23:54,480
in order to do that we use a go cli tool

00:23:51,520 --> 00:23:57,360
it's literally just called go

00:23:54,480 --> 00:23:58,000
you just type go run this will compile

00:23:57,360 --> 00:23:59,360
it

00:23:58,000 --> 00:24:01,279
and then it will immediately run the

00:23:59,360 --> 00:24:03,440
binary okay so

00:24:01,279 --> 00:24:05,679
i've got an http server that's running

00:24:03,440 --> 00:24:08,480
on port 5001

00:24:05,679 --> 00:24:10,320
and this is the this is a little kind of

00:24:08,480 --> 00:24:12,480
this is the framework a little framework

00:24:10,320 --> 00:24:16,480
i'm using for http

00:24:12,480 --> 00:24:19,679
servers similar to sinatra and ruby

00:24:16,480 --> 00:24:21,760
vaguely similar to flask as well

00:24:19,679 --> 00:24:23,600
so if we scroll down this is all the

00:24:21,760 --> 00:24:27,120
database functionality and we don't

00:24:23,600 --> 00:24:30,840
really need to worry about this too much

00:24:27,120 --> 00:24:35,520
this is a highly highly

00:24:30,840 --> 00:24:38,159
optimized on disk database for go

00:24:35,520 --> 00:24:41,440
so now we've got some dot get function

00:24:38,159 --> 00:24:44,559
calls and a dot post function column

00:24:41,440 --> 00:24:46,000
so dot get and dot posts register routes

00:24:44,559 --> 00:24:48,159
just like in flask so this

00:24:46,000 --> 00:24:50,080
is saying i want you to run this

00:24:48,159 --> 00:24:51,760
function right here

00:24:50,080 --> 00:24:53,919
when someone does a get request to the

00:24:51,760 --> 00:24:55,840
home page and then similarly

00:24:53,919 --> 00:24:58,080
i want when you do a get request to

00:24:55,840 --> 00:25:01,120
slash basic stats

00:24:58,080 --> 00:25:03,760
i want you to return the handling

00:25:01,120 --> 00:25:04,960
functionality that is returned sorry i

00:25:03,760 --> 00:25:06,880
want you to run

00:25:04,960 --> 00:25:10,240
the functionality that is returned by

00:25:06,880 --> 00:25:13,279
this new basic stats handler function

00:25:10,240 --> 00:25:15,600
okay so

00:25:13,279 --> 00:25:17,120
the one thing that i want you to keep in

00:25:15,600 --> 00:25:20,400
mind here

00:25:17,120 --> 00:25:23,600
is that we have types in go

00:25:20,400 --> 00:25:24,720
okay so in this case for example this

00:25:23,600 --> 00:25:27,120
function

00:25:24,720 --> 00:25:29,039
is taking in a parameter called c so

00:25:27,120 --> 00:25:31,799
that's right here

00:25:29,039 --> 00:25:33,600
but c has a type the type is

00:25:31,799 --> 00:25:36,320
echo.context

00:25:33,600 --> 00:25:36,960
and so if i have this function and i

00:25:36,320 --> 00:25:39,679
pass in

00:25:36,960 --> 00:25:41,360
anything else besides an echo.context

00:25:39,679 --> 00:25:43,840
let's say i pass in a string

00:25:41,360 --> 00:25:44,960
or i pass in a different custom type

00:25:43,840 --> 00:25:48,000
echo dot

00:25:44,960 --> 00:25:50,480
other context or anything else like that

00:25:48,000 --> 00:25:52,000
the compiler will break it will not

00:25:50,480 --> 00:25:55,520
build my code into

00:25:52,000 --> 00:25:59,600
a binary now this will remove

00:25:55,520 --> 00:26:01,919
a whole class of issues in your program

00:25:59,600 --> 00:26:03,840
so in python there are issues where

00:26:01,919 --> 00:26:06,000
maybe potentially you meant to pass a

00:26:03,840 --> 00:26:06,799
string in but you passed an int into a

00:26:06,000 --> 00:26:09,600
function

00:26:06,799 --> 00:26:11,360
or maybe you meant to json serialize a

00:26:09,600 --> 00:26:12,480
list but you accidentally json

00:26:11,360 --> 00:26:14,880
serialized

00:26:12,480 --> 00:26:16,480
a dictionary okay so there things like

00:26:14,880 --> 00:26:18,880
that can happen in python

00:26:16,480 --> 00:26:20,320
so on the one hand that can be bad but

00:26:18,880 --> 00:26:23,600
on the other hand

00:26:20,320 --> 00:26:24,000
the additional work and some boilerplate

00:26:23,600 --> 00:26:27,600
that you need

00:26:24,000 --> 00:26:29,919
to write to handle the static types

00:26:27,600 --> 00:26:30,960
can slow you down a little bit so

00:26:29,919 --> 00:26:33,919
there's an efficiency

00:26:30,960 --> 00:26:36,159
versus a correctness trade-off here that

00:26:33,919 --> 00:26:38,880
we have to keep in mind

00:26:36,159 --> 00:26:39,440
now the second thing here is if we go

00:26:38,880 --> 00:26:42,640
into

00:26:39,440 --> 00:26:45,760
our process image endpoint

00:26:42,640 --> 00:26:48,240
this is where we handle an image upload

00:26:45,760 --> 00:26:49,679
so going over to here again there's a

00:26:48,240 --> 00:26:51,279
lot of new stuff in here that we don't

00:26:49,679 --> 00:26:53,600
have to worry too much about

00:26:51,279 --> 00:26:55,120
but i want to show off two things so one

00:26:53,600 --> 00:26:55,919
here is we've got this thing called a

00:26:55,120 --> 00:26:58,240
struct

00:26:55,919 --> 00:26:59,279
a struct is vaguely similar to a class

00:26:58,240 --> 00:27:01,279
in python

00:26:59,279 --> 00:27:03,679
or a class in other object oriented

00:27:01,279 --> 00:27:06,000
languages if you're familiar there

00:27:03,679 --> 00:27:08,080
except that you can't extend it so this

00:27:06,000 --> 00:27:11,039
is not an object-oriented

00:27:08,080 --> 00:27:12,159
concept this is literally just a bucket

00:27:11,039 --> 00:27:14,400
of data

00:27:12,159 --> 00:27:15,600
and you can define some behavior on that

00:27:14,400 --> 00:27:18,600
data

00:27:15,600 --> 00:27:21,760
but when we need to do json

00:27:18,600 --> 00:27:24,399
deserialization and serialization

00:27:21,760 --> 00:27:26,559
these struct fields have types so this

00:27:24,399 --> 00:27:28,480
is a string this is a list of strings

00:27:26,559 --> 00:27:31,120
here and then another string

00:27:28,480 --> 00:27:32,399
so we are telling the go library for

00:27:31,120 --> 00:27:34,080
json

00:27:32,399 --> 00:27:35,840
you need to make sure that when you

00:27:34,080 --> 00:27:38,480
deserialize json

00:27:35,840 --> 00:27:38,880
that the url parameter in the json is a

00:27:38,480 --> 00:27:40,640
string

00:27:38,880 --> 00:27:42,640
and if it's not that needs to be an

00:27:40,640 --> 00:27:44,559
error

00:27:42,640 --> 00:27:46,640
and similarly for tags it needs to be a

00:27:44,559 --> 00:27:48,799
list of strings and so on

00:27:46,640 --> 00:27:49,919
now the second thing here which i think

00:27:48,799 --> 00:27:52,399
is uh

00:27:49,919 --> 00:27:54,159
very important and the whole reason why

00:27:52,399 --> 00:27:55,600
we're applying go to this particular

00:27:54,159 --> 00:27:58,880
problem

00:27:55,600 --> 00:28:01,840
is that we need to return to the python

00:27:58,880 --> 00:28:03,679
immediately after we've started the

00:28:01,840 --> 00:28:06,640
download and compression and save

00:28:03,679 --> 00:28:07,360
process okay we don't want to wait till

00:28:06,640 --> 00:28:09,600
that's done

00:28:07,360 --> 00:28:11,440
otherwise we're not going to be gaining

00:28:09,600 --> 00:28:12,720
anything from the python

00:28:11,440 --> 00:28:15,600
because we're still going to end up

00:28:12,720 --> 00:28:19,279
taking two seconds to do the compression

00:28:15,600 --> 00:28:22,399
so if you ignore line 37

00:28:19,279 --> 00:28:24,480
in the go func and then this line here

00:28:22,399 --> 00:28:26,000
i've collapsed all the code inside of

00:28:24,480 --> 00:28:28,320
this funk

00:28:26,000 --> 00:28:29,039
if you ignore this and don't worry about

00:28:28,320 --> 00:28:32,240
what any of this

00:28:29,039 --> 00:28:35,120
is if you ignore it all we're doing is

00:28:32,240 --> 00:28:37,360
we are doing this c dot bind which is d

00:28:35,120 --> 00:28:40,559
serializing json into

00:28:37,360 --> 00:28:43,520
this struct right here we're

00:28:40,559 --> 00:28:44,000
starting and we're returning nil now the

00:28:43,520 --> 00:28:46,159
only other

00:28:44,000 --> 00:28:47,440
thing here is the go and then we have a

00:28:46,159 --> 00:28:49,520
funk

00:28:47,440 --> 00:28:51,600
what this means is that we are starting

00:28:49,520 --> 00:28:54,159
something called a go routine

00:28:51,600 --> 00:28:55,200
a go routine is approximately similar to

00:28:54,159 --> 00:28:57,279
a thread

00:28:55,200 --> 00:28:58,480
in other languages like java or c plus

00:28:57,279 --> 00:29:00,399
plus

00:28:58,480 --> 00:29:02,320
but it's a little bit more lightweight

00:29:00,399 --> 00:29:04,000
but this will immediately start running

00:29:02,320 --> 00:29:06,559
in the background

00:29:04,000 --> 00:29:08,000
on a different core or most likely on a

00:29:06,559 --> 00:29:10,880
different core

00:29:08,000 --> 00:29:12,159
the go run time and that runtime is

00:29:10,880 --> 00:29:14,799
compiled into my

00:29:12,159 --> 00:29:15,760
final binary the go runtime is going to

00:29:14,799 --> 00:29:16,960
take care of

00:29:15,760 --> 00:29:18,799
how do i run this thing in the

00:29:16,960 --> 00:29:20,399
background we don't have to worry about

00:29:18,799 --> 00:29:21,200
scheduling the thread or anything like

00:29:20,399 --> 00:29:23,760
that

00:29:21,200 --> 00:29:24,840
all we are saying here is i want you to

00:29:23,760 --> 00:29:27,840
run this

00:29:24,840 --> 00:29:30,320
function and i'll expand it in a second

00:29:27,840 --> 00:29:31,600
i want you to run this function in the

00:29:30,320 --> 00:29:33,120
background

00:29:31,600 --> 00:29:36,080
but i don't want you to wait till it's

00:29:33,120 --> 00:29:38,880
done it said i want you to immediately

00:29:36,080 --> 00:29:40,000
go to return return nil which is

00:29:38,880 --> 00:29:42,960
effectively

00:29:40,000 --> 00:29:44,399
saying i'm done return success back to

00:29:42,960 --> 00:29:46,720
the python

00:29:44,399 --> 00:29:48,480
okay now we're going to call this code

00:29:46,720 --> 00:29:50,960
from python and we're going to see

00:29:48,480 --> 00:29:52,000
how to do that in just a second so if i

00:29:50,960 --> 00:29:54,080
expand this

00:29:52,000 --> 00:29:55,200
there's a lot here we're updating a

00:29:54,080 --> 00:29:59,200
database

00:29:55,200 --> 00:30:00,640
uh we're creating a file right over here

00:29:59,200 --> 00:30:03,120
what are we doing we're downloading the

00:30:00,640 --> 00:30:05,360
image here uh

00:30:03,120 --> 00:30:07,679
right here we're doing the compression

00:30:05,360 --> 00:30:09,520
with gzip compression

00:30:07,679 --> 00:30:12,960
and so on there's a lot here we don't

00:30:09,520 --> 00:30:12,960
need to understand all of it

00:30:13,520 --> 00:30:18,159
because all we really need to understand

00:30:15,360 --> 00:30:22,640
here is that we're starting the process

00:30:18,159 --> 00:30:24,480
but we're not waiting till it's done so

00:30:22,640 --> 00:30:26,159
let's go back to our python and let's

00:30:24,480 --> 00:30:30,320
hook up

00:30:26,159 --> 00:30:31,520
some of this code to the go

00:30:30,320 --> 00:30:33,600
all right so the first one we're going

00:30:31,520 --> 00:30:34,720
to target is the one that we need to do

00:30:33,600 --> 00:30:37,039
compression

00:30:34,720 --> 00:30:38,240
okay so i'm actually going to switch

00:30:37,039 --> 00:30:40,960
over to a different

00:30:38,240 --> 00:30:42,559
file because we're running a little low

00:30:40,960 --> 00:30:43,679
on time so i want to switch over to a

00:30:42,559 --> 00:30:46,880
different file

00:30:43,679 --> 00:30:49,520
that has the new code in it okay so

00:30:46,880 --> 00:30:50,000
i have this app backend file and if we

00:30:49,520 --> 00:30:53,520
head over

00:30:50,000 --> 00:30:54,159
to upload we have similar code to the

00:30:53,520 --> 00:30:56,559
app

00:30:54,159 --> 00:30:58,080
we're getting some json we're doing some

00:30:56,559 --> 00:30:59,600
checks on the json

00:30:58,080 --> 00:31:02,720
we don't technically have to do these

00:30:59,600 --> 00:31:04,159
but i like to make it a little cleaner

00:31:02,720 --> 00:31:06,240
we're setting up something called a

00:31:04,159 --> 00:31:09,120
payload

00:31:06,240 --> 00:31:10,880
and then we are sending that payload as

00:31:09,120 --> 00:31:14,320
a post request

00:31:10,880 --> 00:31:16,320
to our uh backend host

00:31:14,320 --> 00:31:18,080
the backend host is going to be the go

00:31:16,320 --> 00:31:22,000
server so we're posting

00:31:18,080 --> 00:31:26,159
to back-end host slash process image

00:31:22,000 --> 00:31:28,880
okay so

00:31:26,159 --> 00:31:29,679
that is all we need for upload because

00:31:28,880 --> 00:31:32,799
we're sending

00:31:29,679 --> 00:31:36,080
just the data we need over to the go

00:31:32,799 --> 00:31:38,960
now again this is an example of

00:31:36,080 --> 00:31:39,919
coordinating off the mutable state to

00:31:38,960 --> 00:31:43,519
the go

00:31:39,919 --> 00:31:46,799
and only having our business logic here

00:31:43,519 --> 00:31:48,159
so no databases anymore no mutating

00:31:46,799 --> 00:31:50,080
state anymore

00:31:48,159 --> 00:31:52,320
we're only doing our business logic here

00:31:50,080 --> 00:31:55,200
which is accepting in the request

00:31:52,320 --> 00:31:55,679
the api request transforming it a little

00:31:55,200 --> 00:31:57,760
bit

00:31:55,679 --> 00:31:58,960
forwarding it out to go and then getting

00:31:57,760 --> 00:32:02,000
back the result

00:31:58,960 --> 00:32:04,799
okay so we've got our uh

00:32:02,000 --> 00:32:05,440
back end host oh sorry i clicked on the

00:32:04,799 --> 00:32:08,640
wrong thing

00:32:05,440 --> 00:32:12,000
so um the

00:32:08,640 --> 00:32:15,279
other pieces here we've got

00:32:12,000 --> 00:32:18,559
our route for image slash image name

00:32:15,279 --> 00:32:21,840
and we saw that here up above

00:32:18,559 --> 00:32:22,960
so image slash image name here had to go

00:32:21,840 --> 00:32:26,559
and look up

00:32:22,960 --> 00:32:29,760
the file name for the given image name

00:32:26,559 --> 00:32:31,600
and then it had to render a template

00:32:29,760 --> 00:32:32,960
so flask is really good at this render

00:32:31,600 --> 00:32:34,799
html template

00:32:32,960 --> 00:32:36,559
i had to pass in the file name and the

00:32:34,799 --> 00:32:38,559
image name to the template

00:32:36,559 --> 00:32:39,919
okay and the template was just

00:32:38,559 --> 00:32:43,440
responsible

00:32:39,919 --> 00:32:44,399
for rendering an image tag for that file

00:32:43,440 --> 00:32:48,960
name

00:32:44,399 --> 00:32:51,840
okay now on the app backend.py

00:32:48,960 --> 00:32:52,640
if we head over to here now things are

00:32:51,840 --> 00:32:56,080
different

00:32:52,640 --> 00:32:58,320
because the go now has the database

00:32:56,080 --> 00:32:59,760
of image names and it also has the

00:32:58,320 --> 00:33:02,799
actual image data

00:32:59,760 --> 00:33:04,720
compressed okay so we're rendering a

00:33:02,799 --> 00:33:06,399
template now called image backend which

00:33:04,720 --> 00:33:08,559
is almost exactly the same as the

00:33:06,399 --> 00:33:11,600
template we just saw

00:33:08,559 --> 00:33:14,559
except we get back the source

00:33:11,600 --> 00:33:16,480
of the image not the file name now the

00:33:14,559 --> 00:33:17,760
source is going to be pointing back to

00:33:16,480 --> 00:33:19,919
the go server

00:33:17,760 --> 00:33:22,320
because the go server now is going to

00:33:19,919 --> 00:33:25,039
get the file name

00:33:22,320 --> 00:33:26,000
read the file for that image decompress

00:33:25,039 --> 00:33:28,159
the image

00:33:26,000 --> 00:33:30,799
and send it back down directly to the

00:33:28,159 --> 00:33:33,840
browser so the source points to

00:33:30,799 --> 00:33:36,720
the go not the python

00:33:33,840 --> 00:33:38,960
okay and we've got the home route and

00:33:36,720 --> 00:33:40,799
the home route just asks the go for some

00:33:38,960 --> 00:33:44,000
basic statistics and that's

00:33:40,799 --> 00:33:45,360
pretty much it all right so let's try

00:33:44,000 --> 00:33:48,960
running this stuff together

00:33:45,360 --> 00:33:48,960
so i'm going to go run

00:33:49,120 --> 00:33:56,559
i am going to restart the flask

00:33:52,960 --> 00:34:01,840
but instead pointing it to my

00:33:56,559 --> 00:34:01,840
app back-end file instead of my app file

00:34:02,159 --> 00:34:09,200
class run all righty

00:34:05,679 --> 00:34:10,399
so now we've got go go is managing the

00:34:09,200 --> 00:34:13,040
database

00:34:10,399 --> 00:34:15,040
uh go is managing all the image files go

00:34:13,040 --> 00:34:16,879
is managing all the compression

00:34:15,040 --> 00:34:18,399
and we are going to send the same exact

00:34:16,879 --> 00:34:20,399
request to the python

00:34:18,399 --> 00:34:21,839
so again we're sending it a local host

00:34:20,399 --> 00:34:23,839
00:34:21,839 --> 00:34:25,520
and that is the flask if you look right

00:34:23,839 --> 00:34:28,879
here on the left bottom left

00:34:25,520 --> 00:34:31,200
the go is running on 5001.

00:34:28,879 --> 00:34:33,359
send our request and if you notice it

00:34:31,200 --> 00:34:36,159
didn't take

00:34:33,359 --> 00:34:37,760
and almost any time it just immediately

00:34:36,159 --> 00:34:39,760
said status done

00:34:37,760 --> 00:34:41,919
and the reason for that is again go is

00:34:39,760 --> 00:34:43,919
running the

00:34:41,919 --> 00:34:45,599
processing the compression the download

00:34:43,919 --> 00:34:48,240
all that stuff in the background

00:34:45,599 --> 00:34:50,320
and we saw some logs in the go it says

00:34:48,240 --> 00:34:52,560
starting processor

00:34:50,320 --> 00:34:54,240
and right after it printed that out it

00:34:52,560 --> 00:34:57,440
returned back to the python and the

00:34:54,240 --> 00:35:00,560
python returned back to the curl

00:34:57,440 --> 00:35:02,079
so let's see it in action

00:35:00,560 --> 00:35:03,920
so now we're going to go to the exact

00:35:02,079 --> 00:35:06,960
same uh

00:35:03,920 --> 00:35:07,680
end point so we've got num engine images

00:35:06,960 --> 00:35:09,440
as one

00:35:07,680 --> 00:35:12,480
we didn't have the go return the

00:35:09,440 --> 00:35:13,760
timestamp that was an oversight by me

00:35:12,480 --> 00:35:15,680
and we're still going to get the images

00:35:13,760 --> 00:35:18,079
list uh oh

00:35:15,680 --> 00:35:19,280
did i not implement that i guess i

00:35:18,079 --> 00:35:23,040
didn't implement that

00:35:19,280 --> 00:35:23,040
we have the image endpoint though

00:35:23,680 --> 00:35:30,480
and now this if we look uh reload this

00:35:27,280 --> 00:35:34,240
and look on the network tab

00:35:30,480 --> 00:35:36,480
this is going to 5001

00:35:34,240 --> 00:35:38,640
not 5000 so that's going directly to the

00:35:36,480 --> 00:35:42,720
go

00:35:38,640 --> 00:35:46,160
so we saw a little bit of a snapshot

00:35:42,720 --> 00:35:50,079
on how to change some of our python over

00:35:46,160 --> 00:35:52,560
to talking to go and i saw uh

00:35:50,079 --> 00:35:54,480
in the chat here i saw from frank i

00:35:52,560 --> 00:35:55,200
appreciate that long comment frank so i

00:35:54,480 --> 00:35:57,200
saw

00:35:55,200 --> 00:35:58,800
uh it's more a session on how to run go

00:35:57,200 --> 00:36:00,320
on your python

00:35:58,800 --> 00:36:01,760
while go is definitely more performant

00:36:00,320 --> 00:36:02,560
not sure consider this writing better

00:36:01,760 --> 00:36:04,720
python

00:36:02,560 --> 00:36:06,720
why not leverage either async io or

00:36:04,720 --> 00:36:08,640
futures libraries and stay in python

00:36:06,720 --> 00:36:10,160
versus having to use two languages

00:36:08,640 --> 00:36:12,160
i guess it depends on priorities in

00:36:10,160 --> 00:36:14,320
skill sets not a judgment

00:36:12,160 --> 00:36:15,359
just an observation unfortunately i have

00:36:14,320 --> 00:36:17,440
to pop off for a meeting

00:36:15,359 --> 00:36:19,760
thanks for the session and so on so yeah

00:36:17,440 --> 00:36:21,839
frank i really appreciate that comment

00:36:19,760 --> 00:36:24,160
and it actually comes down exactly what

00:36:21,839 --> 00:36:26,240
you said to skill sets and preferences

00:36:24,160 --> 00:36:27,280
so there are of course some technical

00:36:26,240 --> 00:36:29,200
reasons why you

00:36:27,280 --> 00:36:31,040
may or may not want to use concurrent

00:36:29,200 --> 00:36:33,920
futures or async io

00:36:31,040 --> 00:36:35,839
and those are wonderful libraries for a

00:36:33,920 --> 00:36:39,280
lot of different use cases

00:36:35,839 --> 00:36:42,560
in this use case i am more comfortable

00:36:39,280 --> 00:36:44,160
using go for a few specific reasons one

00:36:42,560 --> 00:36:45,359
is of course i've been writing it for a

00:36:44,160 --> 00:36:48,000
long time

00:36:45,359 --> 00:36:49,520
i've been writing go for about as long

00:36:48,000 --> 00:36:51,760
as i've written python

00:36:49,520 --> 00:36:53,760
of course python is a very much older

00:36:51,760 --> 00:36:56,000
language but i have written python for

00:36:53,760 --> 00:36:56,400
the same number of years approximately

00:36:56,000 --> 00:37:00,400
as

00:36:56,400 --> 00:37:03,760
go but also i identify

00:37:00,400 --> 00:37:05,040
a very specific case which is a compute

00:37:03,760 --> 00:37:08,400
intensive process

00:37:05,040 --> 00:37:09,040
that is the compression that go happens

00:37:08,400 --> 00:37:12,160
to be

00:37:09,040 --> 00:37:14,480
more suited for so

00:37:12,160 --> 00:37:15,440
we are not saying in here that we should

00:37:14,480 --> 00:37:18,240
uh

00:37:15,440 --> 00:37:19,359
attach go and build a python module in

00:37:18,240 --> 00:37:21,280
go so you can call

00:37:19,359 --> 00:37:23,200
go directly from python or anything like

00:37:21,280 --> 00:37:25,440
that we're saying that

00:37:23,200 --> 00:37:27,040
there are some very specific places that

00:37:25,440 --> 00:37:30,960
you can strategically

00:37:27,040 --> 00:37:32,560
take out some python and put in some go

00:37:30,960 --> 00:37:34,160
and of course i hope you can imagine

00:37:32,560 --> 00:37:36,400
that this image

00:37:34,160 --> 00:37:37,359
server can get significantly more

00:37:36,400 --> 00:37:39,359
complex

00:37:37,359 --> 00:37:41,920
and for a lot of that behavior like

00:37:39,359 --> 00:37:45,200
rendering more html and so forth

00:37:41,920 --> 00:37:47,599
the flask app would be very very

00:37:45,200 --> 00:37:49,200
well suited to do those types of

00:37:47,599 --> 00:37:52,320
workloads

00:37:49,200 --> 00:37:54,160
so i am going to wrap up

00:37:52,320 --> 00:37:55,359
i wanted to mention i wanted to mention

00:37:54,160 --> 00:37:57,440
one more piece here

00:37:55,359 --> 00:37:58,640
so we did a lot of technical overview of

00:37:57,440 --> 00:38:01,440
the two different

00:37:58,640 --> 00:38:04,240
technologies there are some what i call

00:38:01,440 --> 00:38:06,000
immeasurable features as well so those

00:38:04,240 --> 00:38:07,760
are things like developer experience and

00:38:06,000 --> 00:38:10,000
programmer efficiency

00:38:07,760 --> 00:38:10,800
now the go code i unfortunately can't

00:38:10,000 --> 00:38:12,960
show it i don't

00:38:10,800 --> 00:38:14,720
quite have enough time but the go code

00:38:12,960 --> 00:38:18,240
in order to download

00:38:14,720 --> 00:38:19,680
compress and save the file and then on

00:38:18,240 --> 00:38:22,079
the other side in order to

00:38:19,680 --> 00:38:23,599
read the file decompress it and send it

00:38:22,079 --> 00:38:26,240
back to the python

00:38:23,599 --> 00:38:27,440
each one of those was one line of code

00:38:26,240 --> 00:38:29,280
and go

00:38:27,440 --> 00:38:31,520
there were two lines of setup and then

00:38:29,280 --> 00:38:34,079
one line to do the actual work

00:38:31,520 --> 00:38:34,880
and python by comparison that took about

00:38:34,079 --> 00:38:38,000
00:38:34,880 --> 00:38:40,720
lines not including comments okay so

00:38:38,000 --> 00:38:41,680
for that low level task systems level

00:38:40,720 --> 00:38:43,760
task

00:38:41,680 --> 00:38:45,440
it happens to be that go is much more

00:38:43,760 --> 00:38:47,760
efficient in terms of how much code i

00:38:45,440 --> 00:38:50,400
need to write and understand

00:38:47,760 --> 00:38:52,560
on the other side of the coin if i go

00:38:50,400 --> 00:38:55,520
back to my command line

00:38:52,560 --> 00:38:56,079
in flask i didn't write any extra code

00:38:55,520 --> 00:39:00,320
to do

00:38:56,079 --> 00:39:02,000
any of these logs and on top of that

00:39:00,320 --> 00:39:03,920
flask will automatically reload the

00:39:02,000 --> 00:39:06,560
python server for me when i change

00:39:03,920 --> 00:39:08,000
the code so those are those are some

00:39:06,560 --> 00:39:10,400
little differences

00:39:08,000 --> 00:39:12,400
and go the systems level stuff is a lot

00:39:10,400 --> 00:39:13,440
easier in some cases i'm not going to

00:39:12,400 --> 00:39:15,200
say all cases

00:39:13,440 --> 00:39:17,040
but in go since go is designed for

00:39:15,200 --> 00:39:18,560
systems level stuff

00:39:17,040 --> 00:39:20,079
it's a little bit easier it tends to be

00:39:18,560 --> 00:39:21,839
a little bit easier over there

00:39:20,079 --> 00:39:23,599
you can see i'm kind of walking a bit of

00:39:21,839 --> 00:39:25,280
a tightrope there

00:39:23,599 --> 00:39:27,359
because i definitely do not want to say

00:39:25,280 --> 00:39:28,480
that python is not good for systems

00:39:27,359 --> 00:39:30,240
level programming

00:39:28,480 --> 00:39:32,720
but it just happens for at least this

00:39:30,240 --> 00:39:33,280
use case it is a bit easier to do a lot

00:39:32,720 --> 00:39:37,119
of these things

00:39:33,280 --> 00:39:37,920
in go but on the python side this python

00:39:37,119 --> 00:39:40,400
app

00:39:37,920 --> 00:39:42,640
with flask is really well suited for me

00:39:40,400 --> 00:39:43,680
to make fast progress without doing all

00:39:42,640 --> 00:39:46,320
the setup

00:39:43,680 --> 00:39:47,440
it turns on a debugger for me by default

00:39:46,320 --> 00:39:50,000
it logs out

00:39:47,440 --> 00:39:51,920
all of my requests and responses

00:39:50,000 --> 00:39:55,200
including the response code

00:39:51,920 --> 00:39:56,160
and the path and timestamps and it does

00:39:55,200 --> 00:39:58,400
even more than that

00:39:56,160 --> 00:40:00,160
out of the box which is really really a

00:39:58,400 --> 00:40:02,320
great thing

00:40:00,160 --> 00:40:03,200
so i just want to mention one last thing

00:40:02,320 --> 00:40:04,079
and then i'm going to go through

00:40:03,200 --> 00:40:08,480
questions

00:40:04,079 --> 00:40:10,400
um i we're in sort of a new world now

00:40:08,480 --> 00:40:13,280
right so there are not a lot of

00:40:10,400 --> 00:40:16,480
in-person tech conferences these days

00:40:13,280 --> 00:40:18,240
um i want to say thanks to you for

00:40:16,480 --> 00:40:20,079
coming here in this new medium

00:40:18,240 --> 00:40:21,920
and watching this talk i know this is

00:40:20,079 --> 00:40:24,319
new for all of us including me

00:40:21,920 --> 00:40:25,359
uh for me i wanted to open up a little

00:40:24,319 --> 00:40:28,720
bit more

00:40:25,359 --> 00:40:30,560
digitally to as many people as possible

00:40:28,720 --> 00:40:33,839
to see not only this talk

00:40:30,560 --> 00:40:34,480
but how this talk was built so i wrote

00:40:33,839 --> 00:40:37,040
this talk

00:40:34,480 --> 00:40:37,760
completely on a twitch live coding

00:40:37,040 --> 00:40:41,920
stream

00:40:37,760 --> 00:40:43,760
it's down here twitch.tv slash ar schles

00:40:41,920 --> 00:40:47,280
you actually have to type twitch.com or

00:40:43,760 --> 00:40:50,400
twitch.tv there before the slash

00:40:47,280 --> 00:40:52,160
i also want to say that during the

00:40:50,400 --> 00:40:54,319
building of this talk on those streams

00:40:52,160 --> 00:40:55,839
it was a very collaborative process

00:40:54,319 --> 00:40:58,079
a lot of people in the chat helped me

00:40:55,839 --> 00:41:00,400
out and i want to just thank all of them

00:40:58,079 --> 00:41:01,839
but more so i want to stress this is not

00:41:00,400 --> 00:41:04,240
about python or go

00:41:01,839 --> 00:41:06,160
i just want to stress that we're in a

00:41:04,240 --> 00:41:06,720
new world this is a very digital world

00:41:06,160 --> 00:41:08,079
now

00:41:06,720 --> 00:41:10,000
there are not a lot of in-person

00:41:08,079 --> 00:41:11,760
conferences like i mentioned and i think

00:41:10,000 --> 00:41:14,480
it's really important for us to try to

00:41:11,760 --> 00:41:16,319
maintain the ties between ourselves

00:41:14,480 --> 00:41:17,599
even though we have to do it digitally

00:41:16,319 --> 00:41:20,000
but i also think it's a great

00:41:17,599 --> 00:41:22,079
opportunity to peek behind the curtain

00:41:20,000 --> 00:41:24,800
for things like how do you build a talk

00:41:22,079 --> 00:41:28,079
and so on so you can go to twitch

00:41:24,800 --> 00:41:29,920
slash archless and you can

00:41:28,079 --> 00:41:31,520
check out all the recordings on how i

00:41:29,920 --> 00:41:33,680
built the talk if you'd like

00:41:31,520 --> 00:41:35,680
so i'm on twitter at ar schles same as

00:41:33,680 --> 00:41:38,480
my twitch and github handle

00:41:35,680 --> 00:41:38,960
again you can see these slides at bit.ly

00:41:38,480 --> 00:41:42,319
slash

00:41:38,960 --> 00:41:46,400
ato 2020 and i am always available to

00:41:42,319 --> 00:41:48,480
talk by email chat anything else so

00:41:46,400 --> 00:41:49,440
if you want to chat about any of these

00:41:48,480 --> 00:41:54,480
topics

00:41:49,440 --> 00:41:56,880
uh hit me up aaron ecomas.net

00:41:54,480 --> 00:41:58,480
all right so i want to go back to the

00:41:56,880 --> 00:42:02,400
chat

00:41:58,480 --> 00:42:04,560
and uh just catch up here

00:42:02,400 --> 00:42:06,400
uh i was thinking basically couldn't i

00:42:04,560 --> 00:42:08,079
use flask to run these background tasks

00:42:06,400 --> 00:42:09,599
on a worker but they're still python

00:42:08,079 --> 00:42:12,000
thanks for the clarification

00:42:09,599 --> 00:42:12,720
yeah of course of course you could yeah

00:42:12,000 --> 00:42:14,880
and

00:42:12,720 --> 00:42:16,400
they may not be so inefficient actually

00:42:14,880 --> 00:42:17,680
if you do it on python

00:42:16,400 --> 00:42:19,760
you're going to have to have a

00:42:17,680 --> 00:42:20,800
background cue and background python

00:42:19,760 --> 00:42:24,000
workers

00:42:20,800 --> 00:42:24,640
but you can get that same concurrency as

00:42:24,000 --> 00:42:27,200
what i did

00:42:24,640 --> 00:42:29,200
with go if you can make sure that each

00:42:27,200 --> 00:42:30,000
little background python worker only

00:42:29,200 --> 00:42:32,400
took up

00:42:30,000 --> 00:42:33,119
a core you could have a similarly

00:42:32,400 --> 00:42:36,560
efficient

00:42:33,119 --> 00:42:37,960
system in that case just go

00:42:36,560 --> 00:42:40,079
does allowing go to handle the

00:42:37,960 --> 00:42:41,760
deserialization from pickle

00:42:40,079 --> 00:42:44,160
remedy some of the pickle's security

00:42:41,760 --> 00:42:46,720
considerations absolutely

00:42:44,160 --> 00:42:48,480
indeed it does so you'll notice in the

00:42:46,720 --> 00:42:49,359
app back end of course there's no more

00:42:48,480 --> 00:42:51,839
pickle

00:42:49,359 --> 00:42:53,520
but also i mentioned the statelessness

00:42:51,839 --> 00:42:56,000
the python code now has no

00:42:53,520 --> 00:42:58,160
state it's not saving or reading any

00:42:56,000 --> 00:43:01,280
state from any database

00:42:58,160 --> 00:43:04,560
instead we've exposed the database

00:43:01,280 --> 00:43:05,680
in a very specific api in the go and we

00:43:04,560 --> 00:43:09,000
only access it

00:43:05,680 --> 00:43:10,960
using these requests.post or

00:43:09,000 --> 00:43:14,079
requests.get

00:43:10,960 --> 00:43:17,119
calls uh das

00:43:14,079 --> 00:43:19,040
oh dask not flask desk does a fantastic

00:43:17,119 --> 00:43:21,280
job of manning managing that check it

00:43:19,040 --> 00:43:22,960
out if you haven't i will i and i indeed

00:43:21,280 --> 00:43:25,760
will check that out

00:43:22,960 --> 00:43:27,200
so i am out of time i want to say thank

00:43:25,760 --> 00:43:29,440
you to everyone who

00:43:27,200 --> 00:43:30,960
joined thank you so much to everyone in

00:43:29,440 --> 00:43:32,800
chat who

00:43:30,960 --> 00:43:35,839
asked questions and gave comments i

00:43:32,800 --> 00:43:35,839
appreciate all of you

00:43:35,920 --> 00:43:40,800
and with that i am of course i'll put up

00:43:39,119 --> 00:43:43,599
my information again i'm of course

00:43:40,800 --> 00:43:44,480
always available uh to chat more about

00:43:43,599 --> 00:43:46,880
this stuff

00:43:44,480 --> 00:43:48,319
very uh i'm very passionate as you may

00:43:46,880 --> 00:43:51,280
have been able to tell

00:43:48,319 --> 00:43:53,119
about all of this topic python go

00:43:51,280 --> 00:43:55,040
architectures and so on

00:43:53,119 --> 00:43:56,480
so thank you again so much i hope

00:43:55,040 --> 00:43:59,440
everyone has a great

00:43:56,480 --> 00:44:00,960
rest of your day uh evening morning

00:43:59,440 --> 00:44:04,079
wherever you are in the world

00:44:00,960 --> 00:44:06,240
um i hope you all stay safe and

00:44:04,079 --> 00:44:09,839
stay well thank you again so much take

00:44:06,240 --> 00:44:09,839

YouTube URL: https://www.youtube.com/watch?v=G7MfdV2gmFs


