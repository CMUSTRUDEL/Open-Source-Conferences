Title: The State of Swift - Paris Buttfield-Addison & Tim Nugent
Publication date: 2020-12-17
Playlist: All Things Open 2020 - Programming Languages Track
Description: 
	Presented by: Paris Buttfield-Addison, Secret Lab & Tim Nugent, lonely.coffee
Presented at All Things Open 2020 - Programming Languages Track

Abstract: Swift, the powerful, easy to learn, safe, cleverly designed open source programming language has had a rollercoaster half-decade. Originating with Apple, the language has been pushed by the community in a variety of exciting directions. Join us to explore the current state, and exciting future, of Swift! Systems programming, app development, backend development, and data science â€” Swift does it all. 

Specifically, in this session, we will:

* discuss why there's never been a better time to learn Swift
* explore the Swift roadmap, its future, and the decision decisions behind its implementation
* dive into the community-features of Swift, and see how decisions for what's added to the language are made
* touch-on the amazing open source projects that form the backbone of the Swift world: such as Vapor and Kitura, for backend and web development, Swift for TensorFlow for machine learning and data science, Alamofire for networking, and beyond
* touch-on the original use of Swift: app development, and get an update on the new declarative UI framework from Apple, SwiftUI
* and finally, we'll see how Swift can be used for systems programming, going head to head with Python, Go, and Java, as a viable, powerful, and useful systems programming language

One session, many amazing use cases for Swift. One session.
Captions: 
	00:00:04,960 --> 00:00:09,519
hi

00:00:05,440 --> 00:00:12,639
hi uh welcome to the state of swift

00:00:09,519 --> 00:00:12,960
so uh hello uh i'm tim i'm paris you can

00:00:12,639 --> 00:00:14,719
tweet

00:00:12,960 --> 00:00:16,800
us at paris ba in the mic jones on the

00:00:14,719 --> 00:00:18,400
bad website or contacts in any other way

00:00:16,800 --> 00:00:20,240
you can work out doom scrolling website

00:00:18,400 --> 00:00:21,760
is probably a good bet though

00:00:20,240 --> 00:00:23,600
uh so we're leaving hobart australia

00:00:21,760 --> 00:00:24,800
that's right down the bottom uh of

00:00:23,600 --> 00:00:26,400
australia which itself is right down the

00:00:24,800 --> 00:00:28,320
bottom of the world-ish sort of

00:00:26,400 --> 00:00:29,840
uh we make video games we make

00:00:28,320 --> 00:00:31,359
applications we write books we drink

00:00:29,840 --> 00:00:32,800
coffee you know all the usual sort of

00:00:31,359 --> 00:00:34,960
things that people do

00:00:32,800 --> 00:00:36,399
back before the world changed when the

00:00:34,960 --> 00:00:38,160
world is back normal please come visit

00:00:36,399 --> 00:00:40,000
us in hobart it is lovely down it's

00:00:38,160 --> 00:00:42,960
awesome here

00:00:40,000 --> 00:00:43,680
so hi we're going to be doing a bit of

00:00:42,960 --> 00:00:44,879
an update on where

00:00:43,680 --> 00:00:46,480
currently stands and where it looks

00:00:44,879 --> 00:00:47,120
beheading swift is a programming

00:00:46,480 --> 00:00:48,559
language

00:00:47,120 --> 00:00:50,239
that you may have heard of it's uh we

00:00:48,559 --> 00:00:51,760
were released by a very very small uh

00:00:50,239 --> 00:00:54,640
company that i hear

00:00:51,760 --> 00:00:55,360
little niche for company orchard movie

00:00:54,640 --> 00:00:57,600
company

00:00:55,360 --> 00:00:58,480
uh based in the the beautiful you know

00:00:57,600 --> 00:00:59,760
farmlands of

00:00:58,480 --> 00:01:01,520
you know the south south of san

00:00:59,760 --> 00:01:02,719
francisco it's a

00:01:01,520 --> 00:01:04,239
it's a pretty cool language we really

00:01:02,719 --> 00:01:05,280
like it uh we've got a little caveat

00:01:04,239 --> 00:01:07,520
here though that we

00:01:05,280 --> 00:01:08,799
are swift users not developers of surf

00:01:07,520 --> 00:01:09,840
we do not build swift we're not great

00:01:08,799 --> 00:01:11,040
swift we have nothing to do with any

00:01:09,840 --> 00:01:13,200
official swift project

00:01:11,040 --> 00:01:14,479
we just really like using swift so

00:01:13,200 --> 00:01:16,400
anything we say about future direction

00:01:14,479 --> 00:01:17,759
is a guess or is just purely fabricated

00:01:16,400 --> 00:01:18,720
because we are not to be trusted at the

00:01:17,759 --> 00:01:21,280
best of times

00:01:18,720 --> 00:01:22,320
never never never trust us but not we

00:01:21,280 --> 00:01:23,280
really lost we have just a pretty cool

00:01:22,320 --> 00:01:25,439
program language

00:01:23,280 --> 00:01:27,119
the idea of this session is a quick and

00:01:25,439 --> 00:01:29,600
dirty introduction into swift

00:01:27,119 --> 00:01:30,960
uh where swift is a modern compiled

00:01:29,600 --> 00:01:32,079
multi-paradigm programming language

00:01:30,960 --> 00:01:32,960
which is really just a fancy way of

00:01:32,079 --> 00:01:34,320
saying it's a

00:01:32,960 --> 00:01:35,680
language that is designed to be used for

00:01:34,320 --> 00:01:36,880
a multitude of things not just one

00:01:35,680 --> 00:01:38,400
specific purpose

00:01:36,880 --> 00:01:39,280
and can do them in a multiple of ways

00:01:38,400 --> 00:01:40,000
you can do them in lots of different

00:01:39,280 --> 00:01:41,520
ways and it's it's

00:01:40,000 --> 00:01:42,960
a compiled language it's not like an

00:01:41,520 --> 00:01:45,439
interpreted language uh and it's

00:01:42,960 --> 00:01:46,720
probably rich which you probably guessed

00:01:45,439 --> 00:01:48,000
so let's get let's get on with it a

00:01:46,720 --> 00:01:49,040
little bit of history before we start

00:01:48,000 --> 00:01:52,000
talking about

00:01:49,040 --> 00:01:53,119
uh how swift can serve you uh cast your

00:01:52,000 --> 00:01:54,640
mind back

00:01:53,119 --> 00:01:57,439
if there's like one of those like you

00:01:54,640 --> 00:02:00,079
know like a scooby-doo

00:01:57,439 --> 00:02:01,920
yeah perfect okay so a bit of history uh

00:02:00,079 --> 00:02:03,119
swift was announced by a fruit company

00:02:01,920 --> 00:02:05,439
in 2014

00:02:03,119 --> 00:02:07,280
by a man with great hair very good hair

00:02:05,439 --> 00:02:09,440
very good hair yeah really good hair

00:02:07,280 --> 00:02:11,280
uh it replaced for apple a language

00:02:09,440 --> 00:02:12,400
called objective c which nobody liked

00:02:11,280 --> 00:02:15,440
uh put your hand up if you've heard of

00:02:12,400 --> 00:02:17,680
objective c just asked two okay yeah

00:02:15,440 --> 00:02:18,959
yeah there's nobody else here tim uh it

00:02:17,680 --> 00:02:19,920
was announced for apple in 2014 and it

00:02:18,959 --> 00:02:21,360
replaced their programming range

00:02:19,920 --> 00:02:22,000
objective c and it was designed to be

00:02:21,360 --> 00:02:23,680
useful for their

00:02:22,000 --> 00:02:25,200
platforms initially but they promised it

00:02:23,680 --> 00:02:26,000
would be uh made open source we'll get

00:02:25,200 --> 00:02:28,000
to that in a second

00:02:26,000 --> 00:02:30,000
swift's goals were to be fast modern

00:02:28,000 --> 00:02:31,440
safe and interactive which i think means

00:02:30,000 --> 00:02:32,000
that it was designed to be responsive to

00:02:31,440 --> 00:02:34,480
like

00:02:32,000 --> 00:02:36,000
quickly prototyping something apple was

00:02:34,480 --> 00:02:37,040
very proud of swift and progressed it

00:02:36,000 --> 00:02:39,120
very rapidly

00:02:37,040 --> 00:02:41,200
and as we said in 2014 they open sourced

00:02:39,120 --> 00:02:43,280
it under the apache license

00:02:41,200 --> 00:02:44,319
and it you know has a proper swift

00:02:43,280 --> 00:02:45,920
evolution process

00:02:44,319 --> 00:02:47,760
or sc process where you can propose

00:02:45,920 --> 00:02:49,680
changes if you're familiar with the

00:02:47,760 --> 00:02:50,000
python evolution process the swift one

00:02:49,680 --> 00:02:51,760
is very

00:02:50,000 --> 00:02:53,280
very similar in fact they more or less

00:02:51,760 --> 00:02:54,560
just went we like what python's doing

00:02:53,280 --> 00:02:55,599
we're going to sort of adapt it to us

00:02:54,560 --> 00:02:56,800
and that's sort of the same thing so

00:02:55,599 --> 00:02:58,000
they take proposals from the community

00:02:56,800 --> 00:03:00,480
for features you might want to add to

00:02:58,000 --> 00:03:02,159
swift and they consider them debate them

00:03:00,480 --> 00:03:03,680
needlessly reject them and then they put

00:03:02,159 --> 00:03:05,200
bits of them into the language

00:03:03,680 --> 00:03:06,720
and there's a core team that sort of has

00:03:05,200 --> 00:03:08,159
the auspices of this project and makes

00:03:06,720 --> 00:03:09,599
decisions based on what comes in from

00:03:08,159 --> 00:03:10,640
the proposal system

00:03:09,599 --> 00:03:12,640
and it's worth just starting out the

00:03:10,640 --> 00:03:15,440
core team is not all apple apple

00:03:12,640 --> 00:03:16,560
is about uh i'd say 60 of the core team

00:03:15,440 --> 00:03:18,319
from memory i can't quite remember the

00:03:16,560 --> 00:03:20,319
exact ratio but they are just community

00:03:18,319 --> 00:03:22,319
members who are also on the courtyard

00:03:20,319 --> 00:03:23,760
it's not it's not an apple project

00:03:22,319 --> 00:03:25,120
anymore at least not in my mind

00:03:23,760 --> 00:03:26,799
it's worth saying it's very easy to

00:03:25,120 --> 00:03:28,000
remember the apple 10 years ago and if

00:03:26,799 --> 00:03:29,040
you haven't been exposed to the apple of

00:03:28,000 --> 00:03:30,319
the last 10 years

00:03:29,040 --> 00:03:31,599
think that they're going to mismanage

00:03:30,319 --> 00:03:33,120
this horribly and make it a really bad

00:03:31,599 --> 00:03:34,959
attempted open source project

00:03:33,120 --> 00:03:36,879
they've actually done this properly this

00:03:34,959 --> 00:03:38,560
is a really good open source project

00:03:36,879 --> 00:03:39,840
that is genuinely open source genuinely

00:03:38,560 --> 00:03:41,840
takes the community into account

00:03:39,840 --> 00:03:44,000
and is a really participatory process we

00:03:41,840 --> 00:03:46,239
really like it it's very good

00:03:44,000 --> 00:03:47,599
so swift is incredibly popular it's been

00:03:46,239 --> 00:03:49,120
floating around in the top ten

00:03:47,599 --> 00:03:50,959
sometimes the top five depending on how

00:03:49,120 --> 00:03:52,080
you count uh programming languages since

00:03:50,959 --> 00:03:53,439
00:03:52,080 --> 00:03:55,840
uh all over the internet from everyone

00:03:53,439 --> 00:03:57,599
who surveys it from github to redmonk

00:03:55,840 --> 00:03:59,760
to everything in between and stack

00:03:57,599 --> 00:04:00,799
overflow stack overflow every single way

00:03:59,760 --> 00:04:01,519
you can count programming language

00:04:00,799 --> 00:04:03,040
popularity

00:04:01,519 --> 00:04:05,360
so it floats in the top five of the top

00:04:03,040 --> 00:04:06,799
ten uh and that's just growing it's

00:04:05,360 --> 00:04:08,239
getting bigger and bigger there's

00:04:06,799 --> 00:04:09,599
millions upon millions and millions and

00:04:08,239 --> 00:04:10,640
millions and millions of lines of swift

00:04:09,599 --> 00:04:12,080
in github and there's just so many

00:04:10,640 --> 00:04:14,000
developers you wouldn't believe

00:04:12,080 --> 00:04:15,360
and not all of them are doing ils apps

00:04:14,000 --> 00:04:17,759
which is very good

00:04:15,360 --> 00:04:18,639
very good very very good so to quote the

00:04:17,759 --> 00:04:21,519
swift core team

00:04:18,639 --> 00:04:22,639
which you know the the big cheese the

00:04:21,519 --> 00:04:24,479
big cheeses

00:04:22,639 --> 00:04:25,840
of the swift project uh swift is about

00:04:24,479 --> 00:04:27,440
make the simple things easy and the

00:04:25,840 --> 00:04:28,960
difficult things possible

00:04:27,440 --> 00:04:30,560
that's basically the the gist of swiss

00:04:28,960 --> 00:04:31,199
philosophy as an open source project uh

00:04:30,560 --> 00:04:32,560
it's

00:04:31,199 --> 00:04:34,800
really really wants to be that general

00:04:32,560 --> 00:04:35,360
purpose uh multi-purpose programming

00:04:34,800 --> 00:04:36,800
language

00:04:35,360 --> 00:04:38,720
for all domains it wants to do as many

00:04:36,800 --> 00:04:39,840
things as it can very well

00:04:38,720 --> 00:04:41,280
you know it does that pretty well wants

00:04:39,840 --> 00:04:42,639
to be all things for everyone yes and

00:04:41,280 --> 00:04:43,759
this really means it has a strongly

00:04:42,639 --> 00:04:45,680
typed system

00:04:43,759 --> 00:04:47,199
which means you know your types are very

00:04:45,680 --> 00:04:48,479
strongly enforced

00:04:47,199 --> 00:04:50,160
there's optionals and nullable types

00:04:48,479 --> 00:04:52,080
which makes it safe to do all sorts of

00:04:50,160 --> 00:04:53,759
crazy things with your variables

00:04:52,080 --> 00:04:55,040
it has closures and functional support

00:04:53,759 --> 00:04:55,919
which kind of makes it a functional

00:04:55,040 --> 00:04:57,040
programming language but even though

00:04:55,919 --> 00:04:58,880
it's not really a functional product

00:04:57,040 --> 00:05:00,080
it's like a semi-functional language i

00:04:58,880 --> 00:05:01,280
would say it's functional enough to be

00:05:00,080 --> 00:05:02,639
useful to people who like functional

00:05:01,280 --> 00:05:03,440
programming languages and things like

00:05:02,639 --> 00:05:04,720
that

00:05:03,440 --> 00:05:06,560
and it has a different reference and

00:05:04,720 --> 00:05:07,680
value semantics so it makes it safe to

00:05:06,560 --> 00:05:08,880
do all sorts of crazy things with your

00:05:07,680 --> 00:05:10,000
structs and your classes depending on

00:05:08,880 --> 00:05:11,039
what you want to do you can copy them

00:05:10,000 --> 00:05:12,320
around or you can refer to them

00:05:11,039 --> 00:05:14,560
depending on how you need to

00:05:12,320 --> 00:05:16,160
yeah it takes a very different approach

00:05:14,560 --> 00:05:17,759
to most uh programming languages i would

00:05:16,160 --> 00:05:20,080
say and how strongly it

00:05:17,759 --> 00:05:23,440
couple decouples the reference and value

00:05:20,080 --> 00:05:24,960
types from each other and how they work

00:05:23,440 --> 00:05:26,639
so uh we're going to take a little bit

00:05:24,960 --> 00:05:28,479
of a look at the syntax of swift

00:05:26,639 --> 00:05:29,759
uh so this here is some swift code uh

00:05:28,479 --> 00:05:32,160
what i'm doing here is i'm just adding

00:05:29,759 --> 00:05:33,680
up the first uh five prime numbers

00:05:32,160 --> 00:05:34,880
um what will that be i can't remember

00:05:33,680 --> 00:05:36,240
would be like 40 or something you can

00:05:34,880 --> 00:05:37,039
run this and find out you could run this

00:05:36,240 --> 00:05:38,320
yourself and find

00:05:37,039 --> 00:05:39,680
out and then we just print it out so

00:05:38,320 --> 00:05:40,560
that's sort of like the baseline switch

00:05:39,680 --> 00:05:41,919
and it shows off

00:05:40,560 --> 00:05:43,280
quite a few things here it shows off

00:05:41,919 --> 00:05:44,479
creating an array how you can just do

00:05:43,280 --> 00:05:47,199
that in line

00:05:44,479 --> 00:05:47,759
uh it shows that we've got uh implicit

00:05:47,199 --> 00:05:49,919
type

00:05:47,759 --> 00:05:51,440
uh type inference here so it's working

00:05:49,919 --> 00:05:53,360
out what the types are based on that

00:05:51,440 --> 00:05:54,880
you're seeing looping you're seeing sort

00:05:53,360 --> 00:05:55,600
of functions it's sort of like a

00:05:54,880 --> 00:05:57,400
briefing

00:05:55,600 --> 00:05:59,360
now as we said uh swift is a

00:05:57,400 --> 00:06:00,800
multi-paradigm language so we can do

00:05:59,360 --> 00:06:01,280
this in a more functional approach if

00:06:00,800 --> 00:06:03,199
you want

00:06:01,280 --> 00:06:04,639
using reduce you know the map produces

00:06:03,199 --> 00:06:07,120
some map and reducer built-in

00:06:04,639 --> 00:06:08,479
language and we're just you know going

00:06:07,120 --> 00:06:09,919
through all of these cutting them up

00:06:08,479 --> 00:06:11,520
adding them up and seeing what we get

00:06:09,919 --> 00:06:12,639
out there exactly the same thing but now

00:06:11,520 --> 00:06:14,080
it's done in a functional way

00:06:12,639 --> 00:06:15,440
as an aside the quickest way to test out

00:06:14,080 --> 00:06:16,479
swift if you want to get to it while

00:06:15,440 --> 00:06:18,520
you're watching us speak

00:06:16,479 --> 00:06:20,160
is to use google's collab which is

00:06:18,520 --> 00:06:21,199
colab.google.com and you can play with

00:06:20,160 --> 00:06:22,319
it right there we'll get back to that

00:06:21,199 --> 00:06:23,199
later because it's kind of related to

00:06:22,319 --> 00:06:23,520
another project we're going to talk

00:06:23,199 --> 00:06:24,639
about

00:06:23,520 --> 00:06:25,919
but google's collab means you can just

00:06:24,639 --> 00:06:27,440
try swift write your web browser without

00:06:25,919 --> 00:06:28,880
having to install anything

00:06:27,440 --> 00:06:30,560
and it's much quicker than downloading

00:06:28,880 --> 00:06:34,800
like the quite large package

00:06:30,560 --> 00:06:36,160
yep so we are not going to be going too

00:06:34,800 --> 00:06:38,479
much into the swift language itself

00:06:36,160 --> 00:06:40,639
that's because tamira is giving a talk

00:06:38,479 --> 00:06:42,000
at uh 1 30 i believe i could have that

00:06:40,639 --> 00:06:42,880
wrong it's not going to be talking too

00:06:42,000 --> 00:06:44,720
much about that go

00:06:42,880 --> 00:06:46,319
go to tamira's talk if you want to see a

00:06:44,720 --> 00:06:47,199
more sort of introduction into swift

00:06:46,319 --> 00:06:48,319
itself

00:06:47,199 --> 00:06:50,639
we're instead going to be talking a

00:06:48,319 --> 00:06:52,319
little bit about um the the things that

00:06:50,639 --> 00:06:53,680
are happening in swift as opposed to the

00:06:52,319 --> 00:06:55,520
language itself tomorrow is amazing go

00:06:53,680 --> 00:06:58,639
see your talk go see tamira's talk

00:06:55,520 --> 00:07:00,080
so the first question i often get asked

00:06:58,639 --> 00:07:01,360
whenever i talk about swift uh

00:07:00,080 --> 00:07:03,680
first question i think we both ever get

00:07:01,360 --> 00:07:06,160
asked is why would you ever choose swift

00:07:03,680 --> 00:07:07,759
uh and to do that i think uh we should

00:07:06,160 --> 00:07:09,280
always go back those three pillars of

00:07:07,759 --> 00:07:11,840
swift as they keep popping up which is

00:07:09,280 --> 00:07:14,800
fast safe and expressive

00:07:11,840 --> 00:07:17,360
so expressive uh ideally i think it

00:07:14,800 --> 00:07:19,599
boils down to high locality of reasoning

00:07:17,360 --> 00:07:21,360
this means in theory just by looking at

00:07:19,599 --> 00:07:22,400
the code you understand what it's meant

00:07:21,360 --> 00:07:23,599
to be doing so you don't have to

00:07:22,400 --> 00:07:25,680
understand the whole project to

00:07:23,599 --> 00:07:27,280
understand the individual piece

00:07:25,680 --> 00:07:29,039
so each piece of code you can reason

00:07:27,280 --> 00:07:30,880
about its purpose and how it's going to

00:07:29,039 --> 00:07:35,039
be used without the whole picture

00:07:30,880 --> 00:07:36,319
um that's uh an impossible dream but i

00:07:35,039 --> 00:07:37,680
think it's one that's worth trying to

00:07:36,319 --> 00:07:40,240
aim it's a good dream

00:07:37,680 --> 00:07:40,960
uh towards this goal swift sort of takes

00:07:40,240 --> 00:07:43,680
a very

00:07:40,960 --> 00:07:45,039
um opinionated view of how you do this

00:07:43,680 --> 00:07:45,919
so it is definitely an opinionated

00:07:45,039 --> 00:07:48,160
language

00:07:45,919 --> 00:07:49,520
um one of the sort of opinions has if

00:07:48,160 --> 00:07:51,750
something is obvious amid it

00:07:49,520 --> 00:07:53,280
and if it isn't force it to be so

00:07:51,750 --> 00:07:55,840
[Music]

00:07:53,280 --> 00:07:57,199
so the most obvious of this is implicit

00:07:55,840 --> 00:07:58,560
and explicit typing

00:07:57,199 --> 00:08:00,319
uh so by default swift sort of

00:07:58,560 --> 00:08:00,879
recommends you go with implicit typing

00:08:00,319 --> 00:08:02,639
because

00:08:00,879 --> 00:08:04,000
most of the time all it's doing is

00:08:02,639 --> 00:08:05,199
saving you writing out those extra bits

00:08:04,000 --> 00:08:07,520
so i've got you know a

00:08:05,199 --> 00:08:09,360
an integer here and if we were to just

00:08:07,520 --> 00:08:10,879
use the implicit type system for both

00:08:09,360 --> 00:08:12,639
they would both be integers so we've had

00:08:10,879 --> 00:08:14,160
to be explicit and go no i need this to

00:08:12,639 --> 00:08:15,680
be a floating point

00:08:14,160 --> 00:08:16,879
uh pretty straightforward stuff any sort

00:08:15,680 --> 00:08:18,560
of implicitly typed language so the

00:08:16,879 --> 00:08:20,479
first one is a one the second one is 1.0

00:08:18,560 --> 00:08:22,319
because we've told it to float

00:08:20,479 --> 00:08:23,599
uh another interesting thing swift does

00:08:22,319 --> 00:08:25,120
is i've written a quick little function

00:08:23,599 --> 00:08:27,360
here it's called do a thing

00:08:25,120 --> 00:08:28,479
with a thing and another thing this is

00:08:27,360 --> 00:08:29,680
another one of those really sort of

00:08:28,479 --> 00:08:31,280
opinionated things that

00:08:29,680 --> 00:08:33,200
a lot of people tend to get a bit angry

00:08:31,280 --> 00:08:34,479
about when they first get exposed to but

00:08:33,200 --> 00:08:36,719
over time

00:08:34,479 --> 00:08:37,839
most people i've seen end up preferring

00:08:36,719 --> 00:08:40,880
this uh

00:08:37,839 --> 00:08:42,640
he says having not the largest surveying

00:08:40,880 --> 00:08:43,760
survey there uh it's definitely one of

00:08:42,640 --> 00:08:46,480
the more controversial things the

00:08:43,760 --> 00:08:49,680
parameter labels are required

00:08:46,480 --> 00:08:51,440
so the function do a thing with a and

00:08:49,680 --> 00:08:53,839
b would be different from a function

00:08:51,440 --> 00:08:55,279
that was do a thing a b

00:08:53,839 --> 00:08:57,120
they'd be different functions they do

00:08:55,279 --> 00:08:58,480
different things uh

00:08:57,120 --> 00:09:00,000
the goal behind this is again that

00:08:58,480 --> 00:09:01,440
locality of reasoning you can sort of

00:09:00,000 --> 00:09:03,360
just read the function and know

00:09:01,440 --> 00:09:04,399
okay these are what these things do this

00:09:03,360 --> 00:09:06,080
is one of those things that very much

00:09:04,399 --> 00:09:08,000
came from objective c which was designed

00:09:06,080 --> 00:09:09,440
to be human readable from left to right

00:09:08,000 --> 00:09:10,640
and in a similar manner and i think

00:09:09,440 --> 00:09:11,760
swift has done it way better than most

00:09:10,640 --> 00:09:12,399
of the languages when they've attempted

00:09:11,760 --> 00:09:14,080
to make

00:09:12,399 --> 00:09:15,680
syntax readable from left to right in an

00:09:14,080 --> 00:09:17,440
english way

00:09:15,680 --> 00:09:19,839
but uh it is definitely a thing where

00:09:17,440 --> 00:09:21,279
i've had more than a few arguments uh on

00:09:19,839 --> 00:09:22,800
forums and twitter people being like no

00:09:21,279 --> 00:09:24,080
it has to be like this i know it has to

00:09:22,800 --> 00:09:26,320
be like this

00:09:24,080 --> 00:09:27,200
uh another nice thing at swift is

00:09:26,320 --> 00:09:29,760
everything is

00:09:27,200 --> 00:09:30,240
uh unicode strings the whole unicode

00:09:29,760 --> 00:09:32,640
bang

00:09:30,240 --> 00:09:34,640
so you can you know have a smiley equal

00:09:32,640 --> 00:09:37,680
the emoji smiley

00:09:34,640 --> 00:09:39,440
uh the language itself is also unicode

00:09:37,680 --> 00:09:42,640
compliance you can also use like

00:09:39,440 --> 00:09:44,000
emoji as your variables um i mean maybe

00:09:42,640 --> 00:09:45,920
don't do that

00:09:44,000 --> 00:09:47,360
for for just i think that makes things

00:09:45,920 --> 00:09:49,680
confusing purposes

00:09:47,360 --> 00:09:50,640
but uh you might be able to get some

00:09:49,680 --> 00:09:52,160
sort of use out of it so

00:09:50,640 --> 00:09:53,920
it's nice to know that it's lots of good

00:09:52,160 --> 00:09:55,519
like internationalization localization

00:09:53,920 --> 00:09:58,080
reasons why swift's unicode

00:09:55,519 --> 00:09:58,640
for utf-8 support you know is very good

00:09:58,080 --> 00:09:59,760
uh

00:09:58,640 --> 00:10:01,040
and it's not something you could just

00:09:59,760 --> 00:10:03,040
use to make all your variables named

00:10:01,040 --> 00:10:04,399
after

00:10:03,040 --> 00:10:05,519
they call emoticons emojis now motocons

00:10:04,399 --> 00:10:06,240
are from like 15 years what am i talking

00:10:05,519 --> 00:10:08,959
about yeah

00:10:06,240 --> 00:10:10,480
emojis maybe we're old now i'm very old

00:10:08,959 --> 00:10:12,880
very old yeah

00:10:10,480 --> 00:10:14,480
uh so swift is also fast that was one of

00:10:12,880 --> 00:10:16,399
their they're called pillars

00:10:14,480 --> 00:10:17,519
um so i wrote what i'm going to call

00:10:16,399 --> 00:10:20,320
first attempt

00:10:17,519 --> 00:10:22,000
code to find the number of steps in

00:10:20,320 --> 00:10:23,040
collats numbers it's also known as the

00:10:22,000 --> 00:10:25,040
3n plus 1

00:10:23,040 --> 00:10:26,320
conjecture i've written it like this

00:10:25,040 --> 00:10:27,920
hopefully this is pretty straightforward

00:10:26,320 --> 00:10:28,640
what this does is this is a very simple

00:10:27,920 --> 00:10:31,200
function

00:10:28,640 --> 00:10:32,560
which gets a number if it's even it

00:10:31,200 --> 00:10:35,040
divides it by two

00:10:32,560 --> 00:10:36,640
if it's odd it times it by three and

00:10:35,040 --> 00:10:38,880
then adds one

00:10:36,640 --> 00:10:40,640
uh and then uh what the goal is is to

00:10:38,880 --> 00:10:43,120
keep reducing this number until you get

00:10:40,640 --> 00:10:44,640
to one and when you get to one you stop

00:10:43,120 --> 00:10:45,760
and then it returns how many steps it

00:10:44,640 --> 00:10:47,120
took to do that and there's still like

00:10:45,760 --> 00:10:48,720
there's a bunch of interesting math sort

00:10:47,120 --> 00:10:50,079
of stuff behind it it's it's an open

00:10:48,720 --> 00:10:51,519
problem does every number always reach

00:10:50,079 --> 00:10:54,000
one so and so forth

00:10:51,519 --> 00:10:55,360
but i like using it as an example code

00:10:54,000 --> 00:10:56,880
because it's something that if you told

00:10:55,360 --> 00:10:58,399
someone the problem they would know how

00:10:56,880 --> 00:10:59,120
to program it as soon as they've learned

00:10:58,399 --> 00:11:01,200
basic

00:10:59,120 --> 00:11:02,240
sort of programming skills so you can

00:11:01,200 --> 00:11:03,519
sort of figure it out and it's a really

00:11:02,240 --> 00:11:04,959
good example of comparing what i'm going

00:11:03,519 --> 00:11:08,000
to call apples to oranges

00:11:04,959 --> 00:11:09,040
uh tests ah i didn't make that joke

00:11:08,000 --> 00:11:10,640
intentionally

00:11:09,040 --> 00:11:12,560
uh so here i am running through all the

00:11:10,640 --> 00:11:15,040
collats numbers trying to find

00:11:12,560 --> 00:11:17,279
the biggest uh from you know zero to a

00:11:15,040 --> 00:11:19,760
million or two to a million

00:11:17,279 --> 00:11:21,200
this is a very naive approach you could

00:11:19,760 --> 00:11:22,720
definitely speed this up with some kind

00:11:21,200 --> 00:11:24,399
of obvious tricks like for a start an

00:11:22,720 --> 00:11:26,240
even number can't be the biggest

00:11:24,399 --> 00:11:28,320
yeah pretty straightforward so on and so

00:11:26,240 --> 00:11:30,240
forth uh so i rewrote this

00:11:28,320 --> 00:11:33,440
i wrote it in swift i wrote it in rust i

00:11:30,240 --> 00:11:36,240
wrote it in python and i wrote it in c

00:11:33,440 --> 00:11:38,320
and then i compiled the ros swift and c

00:11:36,240 --> 00:11:39,440
uh python i ran it through the c python

00:11:38,320 --> 00:11:41,920
interpreter

00:11:39,440 --> 00:11:43,200
and we saw what we get and like this is

00:11:41,920 --> 00:11:44,880
not me picking on python

00:11:43,200 --> 00:11:46,399
uh python's a great one this is a very

00:11:44,880 --> 00:11:47,600
unscientific benchmark yeah just to

00:11:46,399 --> 00:11:49,120
design to give you a quick idea

00:11:47,600 --> 00:11:50,639
i ran them each for a hundred times i

00:11:49,120 --> 00:11:51,519
ran the python one for ten because i got

00:11:50,639 --> 00:11:53,839
bored

00:11:51,519 --> 00:11:55,200
uh average the times got these numbers

00:11:53,839 --> 00:11:57,839
um

00:11:55,200 --> 00:11:59,440
so realistically swift rust and c all

00:11:57,839 --> 00:12:01,519
appear to be as equally fast to each

00:11:59,440 --> 00:12:03,120
other this was just timed on my macbook

00:12:01,519 --> 00:12:05,120
using the time command

00:12:03,120 --> 00:12:06,560
so it's not like it's a particularly

00:12:05,120 --> 00:12:07,279
scientific tool but it does sort of give

00:12:06,560 --> 00:12:09,360
you a

00:12:07,279 --> 00:12:10,800
one what i'm gonna sort of call the the

00:12:09,360 --> 00:12:11,839
real world approach if you were going i

00:12:10,800 --> 00:12:13,839
wonder how quick

00:12:11,839 --> 00:12:15,440
swift is you would probably at least for

00:12:13,839 --> 00:12:16,959
your first attempt do a setup like this

00:12:15,440 --> 00:12:19,200
and you'll see how quick it is

00:12:16,959 --> 00:12:20,160
so it is as fast as rust will say in my

00:12:19,200 --> 00:12:22,560
mind

00:12:20,160 --> 00:12:23,600
um there were a few interesting sort of

00:12:22,560 --> 00:12:25,040
things while doing this because i've

00:12:23,600 --> 00:12:25,519
never really directly compared them

00:12:25,040 --> 00:12:28,399
before

00:12:25,519 --> 00:12:30,880
uh swift took longer to compile than the

00:12:28,399 --> 00:12:33,920
other two compile languages not sure why

00:12:30,880 --> 00:12:35,040
um yeah

00:12:33,920 --> 00:12:36,639
you know it's just one of those

00:12:35,040 --> 00:12:37,360
interesting things the argument that you

00:12:36,639 --> 00:12:39,279
have to be

00:12:37,360 --> 00:12:41,040
c to be fast is no longer true that's

00:12:39,279 --> 00:12:41,839
true both with rust but it's also true

00:12:41,040 --> 00:12:43,920
with swift

00:12:41,839 --> 00:12:45,839
uh and i mean you could trivially speed

00:12:43,920 --> 00:12:47,200
this code up itself a lot of ways

00:12:45,839 --> 00:12:49,760
if you want to take anything away from

00:12:47,200 --> 00:12:50,399
this very unscientific as we said test

00:12:49,760 --> 00:12:53,200
of speed

00:12:50,399 --> 00:12:53,839
it's that swift is as fast as c for most

00:12:53,200 --> 00:12:56,800
things

00:12:53,839 --> 00:12:58,480
which is as we all know crazy fast uh

00:12:56,800 --> 00:13:00,399
swift's compiler however does take

00:12:58,480 --> 00:13:02,079
its sweet time completely it is a little

00:13:00,399 --> 00:13:03,920
slow it is a slow compiler

00:13:02,079 --> 00:13:05,680
but in you know running actual things

00:13:03,920 --> 00:13:06,000
that take a lot of computing resources

00:13:05,680 --> 00:13:08,399
swift

00:13:06,000 --> 00:13:09,839
can under most conditions be as fast as

00:13:08,399 --> 00:13:11,279
swift uh c

00:13:09,839 --> 00:13:13,760
swift can be possibly and that's a very

00:13:11,279 --> 00:13:15,440
good thing swift competing with c

00:13:13,760 --> 00:13:17,120
means you have a language that is a lot

00:13:15,440 --> 00:13:18,800
more expressive safe and easy to write

00:13:17,120 --> 00:13:20,160
than c that can do c like things and

00:13:18,800 --> 00:13:22,480
that's a really good useful thing to

00:13:20,160 --> 00:13:24,639
have these days

00:13:22,480 --> 00:13:26,560
okay and then the final thing that swift

00:13:24,639 --> 00:13:28,639
has is one of its pills is safe

00:13:26,560 --> 00:13:29,680
and it means safe in almost any sort of

00:13:28,639 --> 00:13:32,000
way you want to look at it

00:13:29,680 --> 00:13:33,279
not just memory safety so it has a whole

00:13:32,000 --> 00:13:34,079
bunch of things it's got your standard

00:13:33,279 --> 00:13:36,000
sort of type

00:13:34,079 --> 00:13:37,519
safety if you've used any strongly typed

00:13:36,000 --> 00:13:38,880
language you'll be like yeah of course

00:13:37,519 --> 00:13:40,399
there's a compiler error what does two

00:13:38,880 --> 00:13:42,480
plus a string mean

00:13:40,399 --> 00:13:44,399
uh you're all sort of used that sort of

00:13:42,480 --> 00:13:46,240
stuff one of the more interesting things

00:13:44,399 --> 00:13:48,240
is that optionals are built directly

00:13:46,240 --> 00:13:49,519
into the language itself so you don't

00:13:48,240 --> 00:13:51,040
have to use different libraries you

00:13:49,519 --> 00:13:52,560
don't have to wrap them in sort of like

00:13:51,040 --> 00:13:53,519
optional generics it's all sort of built

00:13:52,560 --> 00:13:55,760
in natively

00:13:53,519 --> 00:13:56,639
and it's got convenience uh operators

00:13:55,760 --> 00:13:58,320
around that

00:13:56,639 --> 00:13:59,680
so while this is perfectly fine because

00:13:58,320 --> 00:14:00,399
we've got an integer and we're adding

00:13:59,680 --> 00:14:02,320
one to it

00:14:00,399 --> 00:14:04,399
it understands what that is in plus int

00:14:02,320 --> 00:14:05,680
is always int

00:14:04,399 --> 00:14:07,360
what we've got here is we've got

00:14:05,680 --> 00:14:08,560
optional in that's what that question

00:14:07,360 --> 00:14:10,560
mark at the end of the

00:14:08,560 --> 00:14:12,240
uh the type declarations that is saying

00:14:10,560 --> 00:14:14,720
this is an optional int

00:14:12,240 --> 00:14:16,639
now optional int plus int is a compiler

00:14:14,720 --> 00:14:18,399
error because you can't have

00:14:16,639 --> 00:14:20,000
the abstract concept of an int with

00:14:18,399 --> 00:14:21,279
something that might be an int how would

00:14:20,000 --> 00:14:23,040
the compiler know what it is it would

00:14:21,279 --> 00:14:24,560
either have to unwrap it and check

00:14:23,040 --> 00:14:25,839
which you know is weird and it doesn't

00:14:24,560 --> 00:14:26,240
know how to do that without you telling

00:14:25,839 --> 00:14:29,120
it

00:14:26,240 --> 00:14:30,639
or it has to do something weird so

00:14:29,120 --> 00:14:31,440
instead it throws a compiler and goes

00:14:30,639 --> 00:14:32,800
like nope can't do it

00:14:31,440 --> 00:14:33,680
the pilot is a really good thing instead

00:14:32,800 --> 00:14:34,800
of because they tell you that you've

00:14:33,680 --> 00:14:36,320
done something wrong with this likely to

00:14:34,800 --> 00:14:37,120
cause a problem at run time and make you

00:14:36,320 --> 00:14:39,279
fix it

00:14:37,120 --> 00:14:41,440
which is really a philosophy of swift um

00:14:39,279 --> 00:14:42,959
so swift also has this concept you don't

00:14:41,440 --> 00:14:44,959
see much in many other languages called

00:14:42,959 --> 00:14:46,880
a guard statement

00:14:44,959 --> 00:14:48,320
and this is one way you can sort of deal

00:14:46,880 --> 00:14:51,120
with optionals you can

00:14:48,320 --> 00:14:53,360
unwrap them so in this case i am taking

00:14:51,120 --> 00:14:55,839
the optional sum value from before

00:14:53,360 --> 00:14:56,880
and then forcing it to be unwrapped and

00:14:55,839 --> 00:14:59,600
the interesting thing about a guard

00:14:56,880 --> 00:15:02,079
statement is it's forced to return

00:14:59,600 --> 00:15:03,600
so if you don't return from the guard

00:15:02,079 --> 00:15:04,320
statement that's actually a compiler

00:15:03,600 --> 00:15:07,199
error

00:15:04,320 --> 00:15:08,800
so basically after that line uh after

00:15:07,199 --> 00:15:11,120
the the line after guardsmen the print

00:15:08,800 --> 00:15:14,000
there from that point onwards down

00:15:11,120 --> 00:15:15,680
the value some value is guaranteed to no

00:15:14,000 --> 00:15:17,040
longer be optional that point on it is

00:15:15,680 --> 00:15:19,199
now just normal in

00:15:17,040 --> 00:15:21,120
and you see this sort of uh what i'm

00:15:19,199 --> 00:15:22,720
calling front loading philosophy

00:15:21,120 --> 00:15:24,880
a lot in swift you'll see a lot of code

00:15:22,720 --> 00:15:26,720
where it's potentially unsafe or

00:15:24,880 --> 00:15:28,320
requires some sort of tuning and setup

00:15:26,720 --> 00:15:29,759
before it can go on

00:15:28,320 --> 00:15:31,279
where you do all that up front you do a

00:15:29,759 --> 00:15:32,079
lot of sort of checking you do a lot of

00:15:31,279 --> 00:15:33,759
work up front

00:15:32,079 --> 00:15:35,839
then you just blitz through it all at

00:15:33,759 --> 00:15:36,320
once uh once you've made sure it's good

00:15:35,839 --> 00:15:39,920
to go

00:15:36,320 --> 00:15:41,519
yeah um so you that's not really a

00:15:39,920 --> 00:15:42,880
language feature that's more how people

00:15:41,519 --> 00:15:43,759
are sort of using it but i think it's a

00:15:42,880 --> 00:15:45,759
better approach

00:15:43,759 --> 00:15:47,279
it's a great approach it means you have

00:15:45,759 --> 00:15:49,279
you're checking in one area

00:15:47,279 --> 00:15:50,320
and then your usage of it in another so

00:15:49,279 --> 00:15:51,600
if programmers love to complain about

00:15:50,320 --> 00:15:52,480
having to ride guard let everywhere

00:15:51,600 --> 00:15:54,959
though

00:15:52,480 --> 00:15:54,959
they really

00:15:56,320 --> 00:15:59,360
uh and there's also other more

00:15:57,839 --> 00:16:01,199
convenient sort of methods and have to

00:15:59,360 --> 00:16:02,240
use guard latin unwrapping that way so

00:16:01,199 --> 00:16:05,360
in this way i'm

00:16:02,240 --> 00:16:07,440
uh just checking if it's not optional

00:16:05,360 --> 00:16:09,120
return zero for that value sorry if it

00:16:07,440 --> 00:16:09,920
is optional return zero for that value

00:16:09,120 --> 00:16:13,279
instead and then just

00:16:09,920 --> 00:16:14,560
sort of keep going along

00:16:13,279 --> 00:16:16,079
so uh that's a little bit of an

00:16:14,560 --> 00:16:17,360
introduction to swiss syntax if you

00:16:16,079 --> 00:16:19,519
would like to learn more

00:16:17,360 --> 00:16:21,519
please watch tamira's talk either during

00:16:19,519 --> 00:16:23,040
the conference or presumably afterwards

00:16:21,519 --> 00:16:24,639
uh she will give you an overview of how

00:16:23,040 --> 00:16:25,519
swift actually works from a using swift

00:16:24,639 --> 00:16:26,880
perspective

00:16:25,519 --> 00:16:27,839
that is not what we're here for we're

00:16:26,880 --> 00:16:29,440
gonna tell you where we're at now with

00:16:27,839 --> 00:16:31,600
swift also

00:16:29,440 --> 00:16:33,120
swift five to six uh had its roadmap

00:16:31,600 --> 00:16:36,079
posted in january which was you know

00:16:33,120 --> 00:16:37,279
last month in pandemic times it does

00:16:36,079 --> 00:16:39,600
feel like it was last month but

00:16:37,279 --> 00:16:41,040
at the beginning of this year 2020 uh

00:16:39,600 --> 00:16:42,320
swift posted a road map from moving from

00:16:41,040 --> 00:16:43,519
swift five which were approximately

00:16:42,320 --> 00:16:44,560
where we're at now with swift to swift

00:16:43,519 --> 00:16:46,399
six

00:16:44,560 --> 00:16:47,759
and uh it paints a picture of the

00:16:46,399 --> 00:16:49,199
improvements that are planned to the

00:16:47,759 --> 00:16:50,480
language and the core team is aiming to

00:16:49,199 --> 00:16:51,839
do a lot of different things

00:16:50,480 --> 00:16:53,839
mostly they're planning to move swift

00:16:51,839 --> 00:16:55,600
from being a more convenient tool

00:16:53,839 --> 00:16:56,880
to do things that people actually using

00:16:55,600 --> 00:16:58,000
before right now instead of

00:16:56,880 --> 00:17:00,399
you know bending it to their will in

00:16:58,000 --> 00:17:01,120
certain ways i mean i would like swift

00:17:00,399 --> 00:17:02,959
is now

00:17:01,120 --> 00:17:04,559
i guess like complete is sort of i'm

00:17:02,959 --> 00:17:06,079
gonna air quotes pretty mature

00:17:04,559 --> 00:17:08,000
um in that you can do everything in

00:17:06,079 --> 00:17:08,559
swift now but there's a lot of things

00:17:08,000 --> 00:17:11,120
that

00:17:08,559 --> 00:17:12,799
aren't easy to do in swift and that's

00:17:11,120 --> 00:17:14,480
sort of their core goal right now things

00:17:12,799 --> 00:17:16,000
like the compiler speeds like they take

00:17:14,480 --> 00:17:17,039
a little bit too long at times you know

00:17:16,000 --> 00:17:19,919
those sort of things are what they're

00:17:17,039 --> 00:17:22,640
currently working on okay

00:17:19,919 --> 00:17:24,400
so if my clicker works we will move to

00:17:22,640 --> 00:17:25,439
here swift 5.3 is uh

00:17:24,400 --> 00:17:27,280
the current version swift it was

00:17:25,439 --> 00:17:28,799
released in september which was

00:17:27,280 --> 00:17:31,039
apparently last month

00:17:28,799 --> 00:17:32,640
uh it is probably we're not sure because

00:17:31,039 --> 00:17:34,320
again we don't work on swift directly

00:17:32,640 --> 00:17:36,720
uh probably the last update to swift

00:17:34,320 --> 00:17:37,840
five the last major one before swift six

00:17:36,720 --> 00:17:39,520
it's where we're at currently so with

00:17:37,840 --> 00:17:40,640
5.3 very good powerful languages

00:17:39,520 --> 00:17:42,480
available for windows

00:17:40,640 --> 00:17:43,840
linux and macos and possibly other

00:17:42,480 --> 00:17:45,280
platforms as well

00:17:43,840 --> 00:17:47,120
it's really cool you can go download it

00:17:45,280 --> 00:17:49,919
at swift.org

00:17:47,120 --> 00:17:51,280
so beyond quality of life stuff swift's

00:17:49,919 --> 00:17:53,679
future plans

00:17:51,280 --> 00:17:54,799
are in two major areas the first one is

00:17:53,679 --> 00:17:56,480
systems development the systems

00:17:54,799 --> 00:17:57,919
programming language you know like go

00:17:56,480 --> 00:18:00,960
and the other one is data science where

00:17:57,919 --> 00:18:02,080
it really wants to eat python's lunch um

00:18:00,960 --> 00:18:03,679
there's lots of new libraries and

00:18:02,080 --> 00:18:04,960
projects like it's almost an alarming

00:18:03,679 --> 00:18:06,240
rate of new libraries and projects of

00:18:04,960 --> 00:18:07,520
swiftly like every day i wake up and

00:18:06,240 --> 00:18:09,120
check twitter and something new has come

00:18:07,520 --> 00:18:10,320
out from the swift team

00:18:09,120 --> 00:18:11,600
and most of the things that are coming

00:18:10,320 --> 00:18:12,400
from stream are trying to spot one of

00:18:11,600 --> 00:18:14,000
these two

00:18:12,400 --> 00:18:16,080
kind of core aims of swift either

00:18:14,000 --> 00:18:17,039
systems or data science

00:18:16,080 --> 00:18:18,080
so we're going to take a quick look at

00:18:17,039 --> 00:18:20,960
some of those libraries now because

00:18:18,080 --> 00:18:24,000
they're all really freaking cool

00:18:20,960 --> 00:18:25,520
so libraries swift most of swift is

00:18:24,000 --> 00:18:26,960
built up out of libraries uh this is

00:18:25,520 --> 00:18:28,160
probably coming from apple's

00:18:26,960 --> 00:18:29,919
influence because apple loves this thing

00:18:28,160 --> 00:18:31,200
called frameworks swift libraries are

00:18:29,919 --> 00:18:33,120
technical frameworks

00:18:31,200 --> 00:18:35,280
uh they're libraries like libraries and

00:18:33,120 --> 00:18:37,039
easy yep uh

00:18:35,280 --> 00:18:38,880
some things that exist as a swift

00:18:37,039 --> 00:18:40,000
library kind of feel like to people from

00:18:38,880 --> 00:18:41,440
other domains that they might

00:18:40,000 --> 00:18:42,960
necessarily be part of the language but

00:18:41,440 --> 00:18:44,400
they're just a library in swift which is

00:18:42,960 --> 00:18:45,760
really big on this

00:18:44,400 --> 00:18:47,840
the it's one of those kind of weird

00:18:45,760 --> 00:18:49,520
things about swift a lot of the things

00:18:47,840 --> 00:18:51,039
like a lot of the core types and a lot

00:18:49,520 --> 00:18:52,320
of the core functionality that

00:18:51,039 --> 00:18:54,160
come with swift when you you know

00:18:52,320 --> 00:18:55,039
download the the compiler toolchain and

00:18:54,160 --> 00:18:56,799
that sort of stuff

00:18:55,039 --> 00:18:58,640
are technically libraries even though

00:18:56,799 --> 00:19:00,559
they're for all intents and purposes

00:18:58,640 --> 00:19:01,919
core parts it's just sort of like

00:19:00,559 --> 00:19:03,679
not so much a quirk it's it's a

00:19:01,919 --> 00:19:05,039
philosophy they follow lots of

00:19:03,679 --> 00:19:06,799
lots of little libraries that combine

00:19:05,039 --> 00:19:07,919
together into one big thing it makes no

00:19:06,799 --> 00:19:09,200
practical difference to you using it

00:19:07,919 --> 00:19:10,799
anyway so

00:19:09,200 --> 00:19:11,919
uh see if just something feels like man

00:19:10,799 --> 00:19:12,320
that should be in the core library

00:19:11,919 --> 00:19:15,360
that's

00:19:12,320 --> 00:19:17,200
that's it probably is is the thing okay

00:19:15,360 --> 00:19:19,679
so swift on windows

00:19:17,200 --> 00:19:20,960
this is huge massive as a windows

00:19:19,679 --> 00:19:22,799
developer if you're wanting to use swift

00:19:20,960 --> 00:19:24,240
you no longer have to install docker

00:19:22,799 --> 00:19:26,080
which is big enough news on itself right

00:19:24,240 --> 00:19:26,960
that's a really good thing uh this is

00:19:26,080 --> 00:19:28,720
massive right

00:19:26,960 --> 00:19:30,160
so swift for windows is now available

00:19:28,720 --> 00:19:33,360
it's fully out there you can even use it

00:19:30,160 --> 00:19:34,799
to build windows gui applications

00:19:33,360 --> 00:19:37,200
that's amazing look at this calculator

00:19:34,799 --> 00:19:37,520
isn't it amazing so this calculator gif

00:19:37,200 --> 00:19:38,960
uh

00:19:37,520 --> 00:19:40,160
was from the official hey we're on

00:19:38,960 --> 00:19:40,960
windows announcement because they wanted

00:19:40,160 --> 00:19:43,760
to show

00:19:40,960 --> 00:19:44,960
we're not just getting the core compiler

00:19:43,760 --> 00:19:46,240
to work we're also hooking into

00:19:44,960 --> 00:19:48,559
operating system

00:19:46,240 --> 00:19:50,240
calls it is actually working on windows

00:19:48,559 --> 00:19:52,000
you know properly whatever if you go to

00:19:50,240 --> 00:19:53,200
swift.org and check out the blog post

00:19:52,000 --> 00:19:55,679
which i think is possibly linked on this

00:19:53,200 --> 00:19:57,280
slide you can see how much work they put

00:19:55,679 --> 00:19:58,320
into this but this is a proper windows

00:19:57,280 --> 00:20:00,400
app written in swift

00:19:58,320 --> 00:20:02,320
apple and associated teams with apple

00:20:00,400 --> 00:20:03,600
love to write calculators as demo apps

00:20:02,320 --> 00:20:05,600
it's a long standing question

00:20:03,600 --> 00:20:07,200
going back like 30 years now not sure

00:20:05,600 --> 00:20:08,559
why it works though

00:20:07,200 --> 00:20:10,240
this is really cool though this is this

00:20:08,559 --> 00:20:12,720
is phenomenal products for swift and as

00:20:10,240 --> 00:20:14,480
an interesting aside uh the lead person

00:20:12,720 --> 00:20:16,000
responsible for the swift for windows on

00:20:14,480 --> 00:20:18,400
the core team is not from apple they're

00:20:16,000 --> 00:20:19,280
from and you know an external body and

00:20:18,400 --> 00:20:21,760
it's great that

00:20:19,280 --> 00:20:23,360
sort of windows is being taken seriously

00:20:21,760 --> 00:20:24,559
yeah this is a sign of a healthy project

00:20:23,360 --> 00:20:25,760
and this is really good

00:20:24,559 --> 00:20:28,000
uh another thing that's come out is

00:20:25,760 --> 00:20:28,480
swift on aws lambdas uh this is still in

00:20:28,000 --> 00:20:30,080
beta

00:20:28,480 --> 00:20:31,840
but it works so if you love serverless

00:20:30,080 --> 00:20:33,679
you can have serverless swift

00:20:31,840 --> 00:20:34,960
uh which is pretty cool we don't do that

00:20:33,679 --> 00:20:36,320
much about ourselves but it's a really

00:20:34,960 --> 00:20:37,760
really important space for a language to

00:20:36,320 --> 00:20:39,919
be in these days and

00:20:37,760 --> 00:20:41,280
supports it with bells on got a few

00:20:39,919 --> 00:20:42,559
friends who are very excited when this

00:20:41,280 --> 00:20:44,400
came out uh

00:20:42,559 --> 00:20:45,600
in the actual uh announcement about it

00:20:44,400 --> 00:20:48,159
one of the things that was listed was

00:20:45,600 --> 00:20:50,000
swift has predictable performance which

00:20:48,159 --> 00:20:51,120
i thought was kind of an interesting

00:20:50,000 --> 00:20:52,320
sort of thing they got like the thing

00:20:51,120 --> 00:20:54,320
we're actually excited about is the

00:20:52,320 --> 00:20:55,600
predictable performance of lambdas which

00:20:54,320 --> 00:20:57,360
i don't use land as much so

00:20:55,600 --> 00:20:58,799
i mean hopefully that means something to

00:20:57,360 --> 00:21:00,080
you so it's an amazing language and if

00:20:58,799 --> 00:21:01,520
people who do several stuff want to use

00:21:00,080 --> 00:21:02,559
swift that's that's awesome and we're

00:21:01,520 --> 00:21:03,679
really excited for this

00:21:02,559 --> 00:21:06,000
it's not something we personally can

00:21:03,679 --> 00:21:07,440
talk much about though uh so the swift

00:21:06,000 --> 00:21:10,320
server working group

00:21:07,440 --> 00:21:11,840
uh has done a lot of interesting work

00:21:10,320 --> 00:21:12,480
about swift on the server they've been

00:21:11,840 --> 00:21:14,400
around for a

00:21:12,480 --> 00:21:16,159
long time a while now they're one of the

00:21:14,400 --> 00:21:16,400
sort of the older parts of swift beyond

00:21:16,159 --> 00:21:18,080
the

00:21:16,400 --> 00:21:19,440
just the getting working on iphone's

00:21:18,080 --> 00:21:22,080
team um

00:21:19,440 --> 00:21:22,880
swift non-blocking io which is sort of

00:21:22,080 --> 00:21:24,799
like the core

00:21:22,880 --> 00:21:27,360
project of the swift server working

00:21:24,799 --> 00:21:29,840
group uh it's now really solid

00:21:27,360 --> 00:21:31,039
uh it appears to be working fine so the

00:21:29,840 --> 00:21:32,640
working group's sort of moving on to

00:21:31,039 --> 00:21:34,960
adding more i guess ancillary and

00:21:32,640 --> 00:21:37,919
supporting things like grpc

00:21:34,960 --> 00:21:38,880
service life cycles that sort of stuff

00:21:37,919 --> 00:21:40,480
it's pretty cool

00:21:38,880 --> 00:21:42,960
it is pretty cool another thing is the

00:21:40,480 --> 00:21:45,840
uh vapor framework

00:21:42,960 --> 00:21:47,840
framework library yeah it is the king of

00:21:45,840 --> 00:21:50,640
swift on the web server as like a

00:21:47,840 --> 00:21:52,080
web service web app website writing tool

00:21:50,640 --> 00:21:53,440
uh there was another one for a while but

00:21:52,080 --> 00:21:54,320
ibm was been telling that and decided

00:21:53,440 --> 00:21:56,400
they did not like

00:21:54,320 --> 00:21:58,480
swift anymore vapors one dropped it

00:21:56,400 --> 00:22:00,240
vapor is the the

00:21:58,480 --> 00:22:01,840
default swift framework for writing web

00:22:00,240 --> 00:22:02,400
stuff uh they've got a whole bunch of

00:22:01,840 --> 00:22:03,440
cool

00:22:02,400 --> 00:22:05,520
stuff happening writing you know

00:22:03,440 --> 00:22:07,039
connections to mysql fluent redis

00:22:05,520 --> 00:22:08,720
templating tools all sorts of really

00:22:07,039 --> 00:22:10,880
cool server-side stuff

00:22:08,720 --> 00:22:12,720
and two members of this project now work

00:22:10,880 --> 00:22:14,799
on the swift server working group

00:22:12,720 --> 00:22:15,760
so it's really another good example of

00:22:14,799 --> 00:22:16,960
swift working with the community and

00:22:15,760 --> 00:22:18,799
tying in with all sorts of things in a

00:22:16,960 --> 00:22:21,200
really good comprehensive way

00:22:18,799 --> 00:22:22,720
i mean vape is pretty easy to set up i

00:22:21,200 --> 00:22:24,080
just put this screenshot in here because

00:22:22,720 --> 00:22:26,640
i really like their little

00:22:24,080 --> 00:22:28,000
ascii art logo i'm a big sucker fast

00:22:26,640 --> 00:22:29,600
yeah it's a good logo

00:22:28,000 --> 00:22:31,440
uh but basically the idea is you can

00:22:29,600 --> 00:22:33,760
just like write a little bit and

00:22:31,440 --> 00:22:34,880
this is actually some vapor code here uh

00:22:33,760 --> 00:22:37,600
where we're basically just

00:22:34,880 --> 00:22:39,600
setting up to respond all we're doing is

00:22:37,600 --> 00:22:41,120
saying hello world we're gonna run it

00:22:39,600 --> 00:22:43,280
uh under the hood this is using the

00:22:41,120 --> 00:22:44,960
swift non-blocking io

00:22:43,280 --> 00:22:46,559
library to actually manage it this

00:22:44,960 --> 00:22:47,200
should look pretty simple and familiar

00:22:46,559 --> 00:22:48,159
to anyone

00:22:47,200 --> 00:22:49,520
familiar with pretty much any web

00:22:48,159 --> 00:22:50,320
framework in any language ever it just

00:22:49,520 --> 00:22:51,360
happens to be swift

00:22:50,320 --> 00:22:52,720
which is a really good thing it's

00:22:51,360 --> 00:22:53,520
powerful it's simple it's familiar it's

00:22:52,720 --> 00:22:55,440
expressive

00:22:53,520 --> 00:22:57,600
yeah and you know that's your standard

00:22:55,440 --> 00:22:58,640
hello world web stuff so it's now in a

00:22:57,600 --> 00:23:00,720
state where you can actually start

00:22:58,640 --> 00:23:04,000
building things with it which

00:23:00,720 --> 00:23:06,720
is good chefs chef kiss yeah

00:23:04,000 --> 00:23:08,080
uh so swift system uh so this is in my

00:23:06,720 --> 00:23:10,080
opinion the worst name

00:23:08,080 --> 00:23:12,320
uh library you could have awful name uh

00:23:10,080 --> 00:23:14,159
but this is a low-level operating system

00:23:12,320 --> 00:23:15,440
currently file interactions library they

00:23:14,159 --> 00:23:17,360
want to add in more stuff over time

00:23:15,440 --> 00:23:18,559
currently it only does file interactions

00:23:17,360 --> 00:23:20,720
now i know that doesn't sound

00:23:18,559 --> 00:23:22,000
mind-blowing and realistically it isn't

00:23:20,720 --> 00:23:25,280
mind-blowing because you already know

00:23:22,000 --> 00:23:27,280
how to read and save files you now no

00:23:25,280 --> 00:23:28,880
longer have to go over the c

00:23:27,280 --> 00:23:30,880
connections you're no longer calling c

00:23:28,880 --> 00:23:32,480
functions you're actually using os level

00:23:30,880 --> 00:23:34,000
calls directly so you don't have to bind

00:23:32,480 --> 00:23:35,280
it to c to work which is actually a

00:23:34,000 --> 00:23:36,480
really big thing

00:23:35,280 --> 00:23:38,240
and the really interesting thing about

00:23:36,480 --> 00:23:39,840
this is this is not a cross-platform

00:23:38,240 --> 00:23:41,440
system so it's got different calls for

00:23:39,840 --> 00:23:43,279
linux different calls for apple

00:23:41,440 --> 00:23:45,279
different calls for windows now as well

00:23:43,279 --> 00:23:48,159
i guess actually and probably lambdas

00:23:45,279 --> 00:23:50,320
um but their goal is this enables people

00:23:48,159 --> 00:23:51,520
to write cross-platform tools uh so

00:23:50,320 --> 00:23:52,480
that's why it's been sort of a focus

00:23:51,520 --> 00:23:54,480
point because being

00:23:52,480 --> 00:23:55,760
having working i o is really really

00:23:54,480 --> 00:23:57,039
important and

00:23:55,760 --> 00:23:58,559
up until somewhat recently it was a

00:23:57,039 --> 00:23:59,039
little annoying to do that on swift

00:23:58,559 --> 00:24:02,960
whereas

00:23:59,039 --> 00:24:04,880
now now it's not straightforward so

00:24:02,960 --> 00:24:06,320
argument parser is a very interesting

00:24:04,880 --> 00:24:08,400
sort of a spin-off of

00:24:06,320 --> 00:24:09,760
um the swift package manager so swift

00:24:08,400 --> 00:24:11,440
has a package manager like

00:24:09,760 --> 00:24:12,960
everything ever has a package manager

00:24:11,440 --> 00:24:15,840
now i personally have a package

00:24:12,960 --> 00:24:17,840
paris has a package manager um and it

00:24:15,840 --> 00:24:19,440
makes running command lines a lot easier

00:24:17,840 --> 00:24:20,960
what you do is you define commands the

00:24:19,440 --> 00:24:22,799
flags and types that they can

00:24:20,960 --> 00:24:24,640
accept and then the rest is handled by

00:24:22,799 --> 00:24:25,360
the library so i've got sort of an

00:24:24,640 --> 00:24:28,240
example here

00:24:25,360 --> 00:24:29,200
this is the example i took from the demo

00:24:28,240 --> 00:24:32,960
project on

00:24:29,200 --> 00:24:35,360
if you go to github.com

00:24:32,960 --> 00:24:36,720
swift slash argument parser i believe i

00:24:35,360 --> 00:24:37,919
could be wrong about that you'll find it

00:24:36,720 --> 00:24:40,000
if you google it

00:24:37,919 --> 00:24:41,520
uh and this is just creating a simple

00:24:40,000 --> 00:24:43,039
command called repeat and it has a

00:24:41,520 --> 00:24:44,480
couple of different flags some options

00:24:43,039 --> 00:24:46,960
some arguments

00:24:44,480 --> 00:24:48,720
and then basically just calls run on it

00:24:46,960 --> 00:24:50,320
and if you run this with nothing it

00:24:48,720 --> 00:24:51,360
automatically generates all the sort of

00:24:50,320 --> 00:24:53,039
stuff you need so you get your little

00:24:51,360 --> 00:24:54,080
error messages that make sense it

00:24:53,039 --> 00:24:55,600
supports

00:24:54,080 --> 00:24:57,440
uh sub commanding so if you want to do

00:24:55,600 --> 00:25:00,159
sort of the git style of like you know

00:24:57,440 --> 00:25:01,760
git commit git add git log etc

00:25:00,159 --> 00:25:03,600
you can also build up sub commands and

00:25:01,760 --> 00:25:04,559
then add them to the main command and so

00:25:03,600 --> 00:25:06,559
on and so forth

00:25:04,559 --> 00:25:07,760
so it really just speeds up this sort of

00:25:06,559 --> 00:25:09,440
whole turn around

00:25:07,760 --> 00:25:10,559
it's so useful for writing command line

00:25:09,440 --> 00:25:11,919
yes and command labs are really

00:25:10,559 --> 00:25:13,279
important like part of people's

00:25:11,919 --> 00:25:15,520
workflows it's really useful to be able

00:25:13,279 --> 00:25:16,559
to write stuff that is usable on the

00:25:15,520 --> 00:25:17,760
command line with swift

00:25:16,559 --> 00:25:20,320
in such a trivial way without having to

00:25:17,760 --> 00:25:21,600
do all the boilerplate basically garbage

00:25:20,320 --> 00:25:23,360
that you need to read in arguments the

00:25:21,600 --> 00:25:24,480
command line and spit out help sensibly

00:25:23,360 --> 00:25:26,480
so this makes it a lot easier and

00:25:24,480 --> 00:25:27,840
quicker to do something really useful it

00:25:26,480 --> 00:25:29,679
really feels like a project that was

00:25:27,840 --> 00:25:31,360
created out of frustration

00:25:29,679 --> 00:25:33,440
by some of the people doing command

00:25:31,360 --> 00:25:34,960
lines absolutely but it is an official

00:25:33,440 --> 00:25:35,840
project this is not some sort of like

00:25:34,960 --> 00:25:37,120
you know

00:25:35,840 --> 00:25:39,360
third-party thing this is actually

00:25:37,120 --> 00:25:41,600
official and is going to be used awesome

00:25:39,360 --> 00:25:43,120
so swift crypto switch crypto is a

00:25:41,600 --> 00:25:45,600
proper tested crypto library

00:25:43,120 --> 00:25:46,880
it uses boring ssl which is from google

00:25:45,600 --> 00:25:48,880
under the hood although they've implied

00:25:46,880 --> 00:25:49,919
that might change at some point maybe

00:25:48,880 --> 00:25:50,960
you don't have to worry about it doesn't

00:25:49,919 --> 00:25:52,640
matter what it is under the hood

00:25:50,960 --> 00:25:54,080
currently uses boring crypto

00:25:52,640 --> 00:25:55,520
uh it's designed for common everyday

00:25:54,080 --> 00:25:56,400
crypto stuff in your code so you don't

00:25:55,520 --> 00:25:57,600
mess it up

00:25:56,400 --> 00:25:59,200
uh it's not meant to be an

00:25:57,600 --> 00:26:00,960
all-encompassing encryption crypto

00:25:59,200 --> 00:26:02,240
algorithm or crypto library but it means

00:26:00,960 --> 00:26:03,440
you can make calls to things you might

00:26:02,240 --> 00:26:04,240
commonly need your crypto library to

00:26:03,440 --> 00:26:05,440
without having to worry about the

00:26:04,240 --> 00:26:05,840
implementation and you know it will get

00:26:05,440 --> 00:26:08,080
it right

00:26:05,840 --> 00:26:09,760
yeah they've uh already said they will

00:26:08,080 --> 00:26:11,679
be accepting poor requests and

00:26:09,760 --> 00:26:13,440
and commits and that sort of stuff but

00:26:11,679 --> 00:26:15,600
if you're say just adding in

00:26:13,440 --> 00:26:17,039
a new cryptographic algorithm that's not

00:26:15,600 --> 00:26:18,400
actually commonly used or you're adding

00:26:17,039 --> 00:26:20,640
in some sort of functionality

00:26:18,400 --> 00:26:21,600
that is not about day-to-day

00:26:20,640 --> 00:26:22,880
cryptography

00:26:21,600 --> 00:26:24,960
they already said they're not going to

00:26:22,880 --> 00:26:26,159
accept it and when i first

00:26:24,960 --> 00:26:27,279
was like well that seems a bit mean that

00:26:26,159 --> 00:26:28,240
i'm like no it actually makes a lot of

00:26:27,279 --> 00:26:30,000
sense like

00:26:28,240 --> 00:26:31,760
this is a thing so you don't screw up

00:26:30,000 --> 00:26:34,240
crypto because like

00:26:31,760 --> 00:26:35,520
screwing up cryptography is really bad

00:26:34,240 --> 00:26:37,679
it's much better to have

00:26:35,520 --> 00:26:39,679
a well-tested rigorous working library

00:26:37,679 --> 00:26:40,159
than it is to try and do it yourself in

00:26:39,679 --> 00:26:41,600
my mind

00:26:40,159 --> 00:26:43,279
even if that means it can't do

00:26:41,600 --> 00:26:45,200
everything for sure

00:26:43,279 --> 00:26:46,559
so uh switched algorithms is another

00:26:45,200 --> 00:26:48,240
really useful library

00:26:46,559 --> 00:26:49,600
swift algorithms is a bunch of reusable

00:26:48,240 --> 00:26:51,840
algorithms i currently

00:26:49,600 --> 00:26:53,279
think eta tools not psychic the idea is

00:26:51,840 --> 00:26:55,039
they have a whole bunch of

00:26:53,279 --> 00:26:56,960
really highly tested and performant

00:26:55,039 --> 00:26:58,720
implementations of common algorithms

00:26:56,960 --> 00:27:00,799
uh it's a testing ground for things that

00:26:58,720 --> 00:27:02,080
might later be included in swift itself

00:27:00,799 --> 00:27:03,120
like the swift standard library so

00:27:02,080 --> 00:27:04,799
currently they're in the swift

00:27:03,120 --> 00:27:07,279
algorithms package later they might be

00:27:04,799 --> 00:27:09,200
somewhere else uh things like this you

00:27:07,279 --> 00:27:09,760
can you know generate permutations from

00:27:09,200 --> 00:27:11,360
a set

00:27:09,760 --> 00:27:12,880
of numbers in an array that's pretty

00:27:11,360 --> 00:27:14,080
useful it's all sorts of scientific

00:27:12,880 --> 00:27:14,880
computing reasons why you might need to

00:27:14,080 --> 00:27:18,840
do something like this

00:27:14,880 --> 00:27:21,360
such algorithms has your back it's also

00:27:18,840 --> 00:27:22,000
chunky such a weird name it's junking

00:27:21,360 --> 00:27:23,760
but you know

00:27:22,000 --> 00:27:24,799
so it's stuff you might need depending

00:27:23,760 --> 00:27:25,600
on what you're doing with surf that

00:27:24,799 --> 00:27:26,320
doesn't actually need to be in the

00:27:25,600 --> 00:27:29,360
standard library

00:27:26,320 --> 00:27:32,240
bite at some point really useful

00:27:29,360 --> 00:27:33,360
so swift numerix uh is another one of

00:27:32,240 --> 00:27:36,080
those sort of like

00:27:33,360 --> 00:27:38,240
you can tell it's heritage um so what it

00:27:36,080 --> 00:27:40,000
does is at its core it currently adds in

00:27:38,240 --> 00:27:42,159
the concept of real imaginary and

00:27:40,000 --> 00:27:43,440
complex data types into the language

00:27:42,159 --> 00:27:45,840
it also adds in the required

00:27:43,440 --> 00:27:46,960
mathematical operators support to

00:27:45,840 --> 00:27:49,600
actually use those

00:27:46,960 --> 00:27:50,880
uh if you do care about imagining

00:27:49,600 --> 00:27:52,240
complex numbers you're probably like oh

00:27:50,880 --> 00:27:54,000
that's that's that's cool

00:27:52,240 --> 00:27:55,919
if you don't you're like what are those

00:27:54,000 --> 00:27:58,240
don't worry about it um

00:27:55,919 --> 00:27:59,760
it works in a very very similar fashion

00:27:58,240 --> 00:28:01,760
to how fortran does it because

00:27:59,760 --> 00:28:02,480
everything that involves complex numbers

00:28:01,760 --> 00:28:04,000
does it the way

00:28:02,480 --> 00:28:05,279
it really comes back to fortran

00:28:04,000 --> 00:28:06,240
everything comes back to fortran

00:28:05,279 --> 00:28:08,720
eventually

00:28:06,240 --> 00:28:10,720
um so i've just got sort of a small

00:28:08,720 --> 00:28:13,120
snapshot of code here

00:28:10,720 --> 00:28:14,880
um in this case i'm making uh i've got

00:28:13,120 --> 00:28:18,080
two complex numbers z and w

00:28:14,880 --> 00:28:20,240
they're both made up of um doubles

00:28:18,080 --> 00:28:21,360
uh so we've got two plus three i as the

00:28:20,240 --> 00:28:24,399
first one and

00:28:21,360 --> 00:28:25,919
one minus two i for the second one and

00:28:24,399 --> 00:28:27,919
you can print out the individual the

00:28:25,919 --> 00:28:29,840
real and the imaginary components and it

00:28:27,919 --> 00:28:32,159
understands what it means to add complex

00:28:29,840 --> 00:28:34,480
numbers together so it's sort of

00:28:32,159 --> 00:28:35,840
um it's one of those sort of things

00:28:34,480 --> 00:28:36,480
where if you need it you're going to be

00:28:35,840 --> 00:28:39,200
like

00:28:36,480 --> 00:28:40,320
yes finally complex number support if

00:28:39,200 --> 00:28:40,799
you don't need it you're going to be

00:28:40,320 --> 00:28:44,000
like

00:28:40,799 --> 00:28:46,000
why would i care uh yeah

00:28:44,000 --> 00:28:47,679
uh but it's one of those sort of things

00:28:46,000 --> 00:28:49,039
that it's interesting that they're

00:28:47,679 --> 00:28:50,240
sort of baking it into the language

00:28:49,039 --> 00:28:51,120
because i think the last language that

00:28:50,240 --> 00:28:54,080
had it

00:28:51,120 --> 00:28:55,360
built in was for broken but i'm not sure

00:28:54,080 --> 00:28:56,480
it's not our field but you know this is

00:28:55,360 --> 00:28:57,840
the thing that lots of people clearly

00:28:56,480 --> 00:28:58,320
need and swift has a lot of powerful

00:28:57,840 --> 00:28:59,679
tools

00:28:58,320 --> 00:29:01,440
that are really useful for people doing

00:28:59,679 --> 00:29:02,880
this kind of programming

00:29:01,440 --> 00:29:04,480
uh and then we sort of get into swift

00:29:02,880 --> 00:29:05,440
atomics this is very very new this was

00:29:04,480 --> 00:29:06,960
announced

00:29:05,440 --> 00:29:08,080
just last week last week i think yeah

00:29:06,960 --> 00:29:09,200
yeah some of those we woke up one

00:29:08,080 --> 00:29:10,480
morning checked in like what have they

00:29:09,200 --> 00:29:13,039
done now

00:29:10,480 --> 00:29:14,480
and this is low-level atomic types that

00:29:13,039 --> 00:29:15,440
are now integrated into the standard

00:29:14,480 --> 00:29:18,480
library

00:29:15,440 --> 00:29:18,880
and honestly you will never use these

00:29:18,480 --> 00:29:21,279
ever

00:29:18,880 --> 00:29:23,120
i feel 100 confident in saying these and

00:29:21,279 --> 00:29:25,679
you probably shouldn't ever use these

00:29:23,120 --> 00:29:26,640
these add in support for atomic data

00:29:25,679 --> 00:29:28,799
types

00:29:26,640 --> 00:29:30,080
uh often this is actually implemented

00:29:28,799 --> 00:29:31,760
using uh

00:29:30,080 --> 00:29:33,440
direct machine code where possible but

00:29:31,760 --> 00:29:34,640
they have had to in case that's not the

00:29:33,440 --> 00:29:36,559
case written their own

00:29:34,640 --> 00:29:38,720
you will not be using these unless

00:29:36,559 --> 00:29:40,240
you're building concurrency types

00:29:38,720 --> 00:29:42,000
i feel pretty confident in saying that

00:29:40,240 --> 00:29:43,120
if you are using them you're probably

00:29:42,000 --> 00:29:46,399
doing the wrong thing

00:29:43,120 --> 00:29:48,320
um yeah because what are you doing um

00:29:46,399 --> 00:29:50,080
but they are very very important towards

00:29:48,320 --> 00:29:50,960
future concurrency which sort of leads

00:29:50,080 --> 00:29:53,279
us into

00:29:50,960 --> 00:29:54,320
uh this next sort of topic which is

00:29:53,279 --> 00:29:57,200
memory ownership

00:29:54,320 --> 00:29:59,039
and concurrency types so if you've

00:29:57,200 --> 00:30:00,799
written any rust you probably

00:29:59,039 --> 00:30:01,919
use the idea of like ownership and the

00:30:00,799 --> 00:30:02,320
borrower checkers and that's something

00:30:01,919 --> 00:30:04,480
yeah

00:30:02,320 --> 00:30:05,600
swift has something sort of similar it's

00:30:04,480 --> 00:30:08,240
been built into

00:30:05,600 --> 00:30:08,799
the language since swift three which was

00:30:08,240 --> 00:30:11,360
two

00:30:08,799 --> 00:30:13,440
years ago two or three years ago it

00:30:11,360 --> 00:30:16,240
isn't really exposed anywhere i believe

00:30:13,440 --> 00:30:17,600
that's probably going to start changing

00:30:16,240 --> 00:30:19,360
uh so do expect that be a little bit

00:30:17,600 --> 00:30:20,880
more of a thing and it and the

00:30:19,360 --> 00:30:23,200
atomic sort of adding to this sort of

00:30:20,880 --> 00:30:24,080
new focus that the swift team keep

00:30:23,200 --> 00:30:25,919
working on

00:30:24,080 --> 00:30:28,320
which is they want to add in concurrency

00:30:25,919 --> 00:30:30,640
types they keep talking about this the

00:30:28,320 --> 00:30:33,039
way swift currently gets concurrency

00:30:30,640 --> 00:30:34,960
is it uses uh grand central dispatch or

00:30:33,039 --> 00:30:37,440
lib dispatch depending how you not

00:30:34,960 --> 00:30:38,799
which is a concurrency library so you

00:30:37,440 --> 00:30:41,279
can create these uh

00:30:38,799 --> 00:30:42,640
lightweight uh cues and reuse them and

00:30:41,279 --> 00:30:44,640
reuse them sort of like threads and it's

00:30:42,640 --> 00:30:46,240
got locks and lots of stuff built in

00:30:44,640 --> 00:30:47,760
um but that's uh like an external

00:30:46,240 --> 00:30:49,120
library it's not built in so it's got a

00:30:47,760 --> 00:30:50,799
bit of a sort of a slightly weird

00:30:49,120 --> 00:30:52,159
friction to it when you're using it

00:30:50,799 --> 00:30:54,320
it's not the end of the world it does

00:30:52,159 --> 00:30:55,679
work it's just it's not ideal so the

00:30:54,320 --> 00:30:57,360
swift team is looking at sort of

00:30:55,679 --> 00:30:58,559
building concurrency natively into the

00:30:57,360 --> 00:31:00,960
language

00:30:58,559 --> 00:31:02,799
the form that's going to take is sort of

00:31:00,960 --> 00:31:03,519
still very in debate uh whenever people

00:31:02,799 --> 00:31:05,760
talk about it

00:31:03,519 --> 00:31:07,200
uh online there's it gets very hotly

00:31:05,760 --> 00:31:08,320
contested some people are really big

00:31:07,200 --> 00:31:10,880
into like csp

00:31:08,320 --> 00:31:12,960
or uh go routines some people want it to

00:31:10,880 --> 00:31:14,720
be actors like in your lang some people

00:31:12,960 --> 00:31:17,919
want async await

00:31:14,720 --> 00:31:20,480
um the exact structure that the

00:31:17,919 --> 00:31:21,519
the native concurrency is going to take

00:31:20,480 --> 00:31:23,120
is very much

00:31:21,519 --> 00:31:24,799
up in the air we'll find out what

00:31:23,120 --> 00:31:25,440
happens uh yeah we'll find out what's

00:31:24,799 --> 00:31:27,440
happening

00:31:25,440 --> 00:31:30,640
but it is definitely a focal point for

00:31:27,440 --> 00:31:32,480
swift swift.org

00:31:30,640 --> 00:31:34,640
join the evolution forum be like hey i

00:31:32,480 --> 00:31:37,279
got an idea about concurrency types ah

00:31:34,640 --> 00:31:37,679
and see how that goes um actually the

00:31:37,279 --> 00:31:39,279
swift

00:31:37,679 --> 00:31:40,960
forums are actually really quite really

00:31:39,279 --> 00:31:42,640
quite lovely they're not actually

00:31:40,960 --> 00:31:44,159
when i first joined them having been

00:31:42,640 --> 00:31:45,200
some sort of tech forums like

00:31:44,159 --> 00:31:46,399
what's this gonna be like but they're

00:31:45,200 --> 00:31:47,519
actually really quite highly recommend

00:31:46,399 --> 00:31:49,919
actually joining the script community if

00:31:47,519 --> 00:31:53,519
you have an interest in

00:31:49,919 --> 00:31:54,960
designing a language you know um

00:31:53,519 --> 00:31:56,399
but this sort of ties into sort of like

00:31:54,960 --> 00:31:57,679
i'm guessing it's not really an official

00:31:56,399 --> 00:31:59,440
swift project

00:31:57,679 --> 00:32:01,120
it's in a third-party one so the

00:31:59,440 --> 00:32:02,399
tensorflow team at google have started a

00:32:01,120 --> 00:32:03,840
project called swift for tensorflow it's

00:32:02,399 --> 00:32:04,640
a couple of years old at this point uh

00:32:03,840 --> 00:32:06,880
it is

00:32:04,640 --> 00:32:09,279
a very viable machine learning data

00:32:06,880 --> 00:32:12,080
science scientific computing framework

00:32:09,279 --> 00:32:13,519
library for swift and has a bunch of

00:32:12,080 --> 00:32:14,640
great swift tutorials the swifty trolls

00:32:13,519 --> 00:32:15,760
on the swifter tensorflow website are

00:32:14,640 --> 00:32:17,600
second to none really

00:32:15,760 --> 00:32:19,760
um they're very good and uh swiffer test

00:32:17,600 --> 00:32:21,200
flight is a tensorflow library for swift

00:32:19,760 --> 00:32:23,279
designed to implement all the same sort

00:32:21,200 --> 00:32:24,480
of stuff that tensorflow for python

00:32:23,279 --> 00:32:27,919
which is the big

00:32:24,480 --> 00:32:29,360
dominant framework for python has

00:32:27,919 --> 00:32:31,600
swifter tensorflow is currently a

00:32:29,360 --> 00:32:32,799
entirely separate tool chain just

00:32:31,600 --> 00:32:33,840
because they had to do that to not

00:32:32,799 --> 00:32:35,200
interfere with the mainstream project

00:32:33,840 --> 00:32:36,159
but most of the stuff is going back into

00:32:35,200 --> 00:32:37,039
the main we'll talk about that in a

00:32:36,159 --> 00:32:39,360
second

00:32:37,039 --> 00:32:40,880
uh swifter tensorflow adds autodiff

00:32:39,360 --> 00:32:42,480
which is language integrated support for

00:32:40,880 --> 00:32:43,519
automatic differentiation which is

00:32:42,480 --> 00:32:45,679
something you might not necessarily

00:32:43,519 --> 00:32:47,440
actually ever use but

00:32:45,679 --> 00:32:49,440
it's really cool because you just add a

00:32:47,440 --> 00:32:50,720
tag to the method you need and it makes

00:32:49,440 --> 00:32:52,720
all the differentiation work

00:32:50,720 --> 00:32:54,240
this is really big for scientific work

00:32:52,720 --> 00:32:55,519
and machine learning and stuff like that

00:32:54,240 --> 00:32:57,039
this is coming into the language but it

00:32:55,519 --> 00:32:58,399
won't happen overnight right now you can

00:32:57,039 --> 00:32:59,039
use it with the swiffer tensorflow

00:32:58,399 --> 00:33:00,320
compiler

00:32:59,039 --> 00:33:02,000
but it will be in the regular swift

00:33:00,320 --> 00:33:03,760
compiler eventually yeah with um with

00:33:02,000 --> 00:33:05,840
the order differentiation the proposal

00:33:03,760 --> 00:33:07,200
has been accepted yes by the core team

00:33:05,840 --> 00:33:08,480
uh there's a lot of debate around how

00:33:07,200 --> 00:33:09,679
it'll be done some changes back and

00:33:08,480 --> 00:33:11,440
forth

00:33:09,679 --> 00:33:13,120
but because it's such a big component

00:33:11,440 --> 00:33:14,799
they're sort of like adding it in

00:33:13,120 --> 00:33:16,320
piece by piece as they can do it just

00:33:14,799 --> 00:33:17,600
because it

00:33:16,320 --> 00:33:19,760
touches a lot so they don't want to

00:33:17,600 --> 00:33:20,799
break anything or like i would just say

00:33:19,760 --> 00:33:22,480
auto differentiation

00:33:20,799 --> 00:33:24,559
sort of like the atomics they sound very

00:33:22,480 --> 00:33:26,880
underwhelming um because you

00:33:24,559 --> 00:33:28,159
generally don't directly use them or in

00:33:26,880 --> 00:33:29,120
the case of auto diff if you are

00:33:28,159 --> 00:33:30,640
directly using it's

00:33:29,120 --> 00:33:32,799
really straightforward you just like add

00:33:30,640 --> 00:33:33,840
a tag and add a required function like

00:33:32,799 --> 00:33:37,200
wow i can do

00:33:33,840 --> 00:33:38,559
derivatives and integrals now like um

00:33:37,200 --> 00:33:40,240
but the way it was sort of described to

00:33:38,559 --> 00:33:41,919
me one time in a conference was imagine

00:33:40,240 --> 00:33:43,360
if your programming language didn't have

00:33:41,919 --> 00:33:44,480
support for trigonometry

00:33:43,360 --> 00:33:46,240
you'd be like why didn't you include

00:33:44,480 --> 00:33:48,000
trigonometry and there are arguments

00:33:46,240 --> 00:33:48,720
sort of similar for auto differentiation

00:33:48,000 --> 00:33:49,919
why aren't you

00:33:48,720 --> 00:33:51,360
why are you adding in support for

00:33:49,919 --> 00:33:52,799
differentiation why are you making the

00:33:51,360 --> 00:33:54,080
programmer write that themselves sort of

00:33:52,799 --> 00:33:54,480
thing makes a lot of machine learning

00:33:54,080 --> 00:33:56,080
things

00:33:54,480 --> 00:33:57,440
super trivial yeah another thing that

00:33:56,080 --> 00:33:58,480
makes machine learning super trivial is

00:33:57,440 --> 00:33:59,679
python in drop

00:33:58,480 --> 00:34:01,360
this is so cool this is one of my

00:33:59,679 --> 00:34:02,640
favorite things so swift for tensorflow

00:34:01,360 --> 00:34:04,080
toolchain actually adds complete

00:34:02,640 --> 00:34:05,679
interoperation with python you can

00:34:04,080 --> 00:34:06,960
import and load python frameworks and

00:34:05,679 --> 00:34:07,919
libraries and use them just as if

00:34:06,960 --> 00:34:09,599
they're swift

00:34:07,919 --> 00:34:10,960
it's crazy it basically means you don't

00:34:09,599 --> 00:34:11,679
have to re-implement a whole bunch of

00:34:10,960 --> 00:34:14,240
useful stuff

00:34:11,679 --> 00:34:15,599
yeah so it's not technically tied into

00:34:14,240 --> 00:34:19,119
swift

00:34:15,599 --> 00:34:20,000
core but the work that was done so that

00:34:19,119 --> 00:34:22,639
you could call python

00:34:20,000 --> 00:34:24,800
from swift and vice versa is integrated

00:34:22,639 --> 00:34:25,520
in so in theory any language can now use

00:34:24,800 --> 00:34:27,200
this sort of like

00:34:25,520 --> 00:34:29,040
generic bridge i guess is the right way

00:34:27,200 --> 00:34:30,399
of sort of looking at it the only one

00:34:29,040 --> 00:34:30,960
currently is the best my knowledge is

00:34:30,399 --> 00:34:33,679
python

00:34:30,960 --> 00:34:35,359
yep um it does have some weird caveats

00:34:33,679 --> 00:34:37,760
uh

00:34:35,359 --> 00:34:39,760
the main one i would say is anything you

00:34:37,760 --> 00:34:42,000
get back from python is always

00:34:39,760 --> 00:34:44,240
optional it's optional here because it

00:34:42,000 --> 00:34:45,919
can't know what python did to it so it

00:34:44,240 --> 00:34:47,200
can't guarantee that things haven't

00:34:45,919 --> 00:34:48,399
changed as they've gone around

00:34:47,200 --> 00:34:50,240
debugging and figuring out what's going

00:34:48,399 --> 00:34:51,760
on goes wrong is also a bit fiddly it is

00:34:50,240 --> 00:34:53,839
a little weird but

00:34:51,760 --> 00:34:55,280
it's a very cool project and it is

00:34:53,839 --> 00:34:58,079
really weird being able to be like i

00:34:55,280 --> 00:34:59,920
need numpy in python i need matplotlib

00:34:58,079 --> 00:35:02,480
uh and you just like you just start

00:34:59,920 --> 00:35:03,680
using it and then it works

00:35:02,480 --> 00:35:05,440
you don't know you need it until you

00:35:03,680 --> 00:35:05,920
need it and it's for a very specific

00:35:05,440 --> 00:35:07,599
audience

00:35:05,920 --> 00:35:09,520
it works in jupiter notebooks which is

00:35:07,599 --> 00:35:11,280
crazy useful google's collab which goes

00:35:09,520 --> 00:35:12,400
useful and increasingly xcode apple's

00:35:11,280 --> 00:35:13,599
development environment which is the

00:35:12,400 --> 00:35:15,040
primary swift tool that people were

00:35:13,599 --> 00:35:17,839
using before it was a more diverse

00:35:15,040 --> 00:35:20,320
language crazy useful

00:35:17,839 --> 00:35:21,040
uh so while not sort of specific things

00:35:20,320 --> 00:35:22,480
to point to

00:35:21,040 --> 00:35:24,880
the tooling and supporting other

00:35:22,480 --> 00:35:28,000
platforms has really been a focus

00:35:24,880 --> 00:35:28,960
uh for swift uh going over this year

00:35:28,000 --> 00:35:31,040
realistically

00:35:28,960 --> 00:35:32,560
particularly around improving not only

00:35:31,040 --> 00:35:34,480
just the raw performance but like the

00:35:32,560 --> 00:35:35,200
development experience performance i

00:35:34,480 --> 00:35:37,200
guess

00:35:35,200 --> 00:35:38,560
uh so this year they had a few google

00:35:37,200 --> 00:35:40,880
summer of code projects

00:35:38,560 --> 00:35:42,560
along with also what core teams done uh

00:35:40,880 --> 00:35:44,560
around you know improving error

00:35:42,560 --> 00:35:46,560
messaging improving debugging adding

00:35:44,560 --> 00:35:47,440
localization supporting for debugging

00:35:46,560 --> 00:35:50,560
which

00:35:47,440 --> 00:35:52,160
you know like i i speak and read english

00:35:50,560 --> 00:35:53,920
so like it means nothing to me but it

00:35:52,160 --> 00:35:55,200
means so much to people who english is

00:35:53,920 --> 00:35:56,960
not their first language

00:35:55,200 --> 00:35:58,400
to have localization support into

00:35:56,960 --> 00:36:00,640
debugging um

00:35:58,400 --> 00:36:02,000
they've also been working a lot on

00:36:00,640 --> 00:36:04,720
there's now a working

00:36:02,000 --> 00:36:06,240
swift language server protocol uh so you

00:36:04,720 --> 00:36:08,079
can start using swift in other tool

00:36:06,240 --> 00:36:10,720
chains uh there's a pretty good

00:36:08,079 --> 00:36:12,000
vs code um apparently everyone uses vs

00:36:10,720 --> 00:36:15,200
code now so sodaswift

00:36:12,000 --> 00:36:16,640
yeah i like vs code um so there's

00:36:15,200 --> 00:36:18,720
there's they're sort of working on

00:36:16,640 --> 00:36:20,079
making the development experience and

00:36:18,720 --> 00:36:23,119
the tool support

00:36:20,079 --> 00:36:24,640
better because up until very recently it

00:36:23,119 --> 00:36:26,480
as a side effect of coming out of an

00:36:24,640 --> 00:36:27,119
apple project it was basically tied to

00:36:26,480 --> 00:36:29,040
apple's

00:36:27,119 --> 00:36:30,720
tools and some of apple's tools are

00:36:29,040 --> 00:36:33,839
great and some aren't

00:36:30,720 --> 00:36:34,880
i'm looking at ux code uh one of the

00:36:33,839 --> 00:36:36,640
really really cool things we've

00:36:34,880 --> 00:36:37,119
mentioned a couple of times is duplicate

00:36:36,640 --> 00:36:38,839
books

00:36:37,119 --> 00:36:40,560
uh so if you go to like

00:36:38,839 --> 00:36:41,440
colab.research.google.com is i believe

00:36:40,560 --> 00:36:43,440
the url

00:36:41,440 --> 00:36:44,560
um you can actually fire up a jupyter

00:36:43,440 --> 00:36:46,000
notebook um

00:36:44,560 --> 00:36:47,839
on google infrastructure on google's

00:36:46,000 --> 00:36:48,320
infrastructure uh i believe it has some

00:36:47,839 --> 00:36:50,720
pretty

00:36:48,320 --> 00:36:51,359
small you can pay for google profile

00:36:50,720 --> 00:36:53,359
yeah

00:36:51,359 --> 00:36:54,720
i i mostly do it for just playing around

00:36:53,359 --> 00:36:56,240
things and seeing how they work

00:36:54,720 --> 00:36:58,160
so i've never hit the requirements of

00:36:56,240 --> 00:37:00,800
what you have to go to pay for

00:36:58,160 --> 00:37:02,880
but um it's really cool to be able to a

00:37:00,800 --> 00:37:06,560
just run swift in a web browser in

00:37:02,880 --> 00:37:09,760
a notebook having once written

00:37:06,560 --> 00:37:11,359
a jupyter colonel they're weird

00:37:09,760 --> 00:37:13,200
no offense to jupiter team it's a really

00:37:11,359 --> 00:37:14,560
hard time it's a hard problem

00:37:13,200 --> 00:37:15,920
they're trying to solve so don't blame

00:37:14,560 --> 00:37:17,359
them for being weird but man they're

00:37:15,920 --> 00:37:19,520
weird to write

00:37:17,359 --> 00:37:21,200
so like extreme respect for the google

00:37:19,520 --> 00:37:22,320
team for making that work so well

00:37:21,200 --> 00:37:23,760
you can install that kernel on your own

00:37:22,320 --> 00:37:25,760
computer and play around with it locally

00:37:23,760 --> 00:37:27,760
it's called swift desk jupiter on

00:37:25,760 --> 00:37:29,200
github it's awesome it's really really

00:37:27,760 --> 00:37:31,520
cool this is a really

00:37:29,200 --> 00:37:32,240
important project i think not because

00:37:31,520 --> 00:37:34,160
jupiter no

00:37:32,240 --> 00:37:34,960
like i i like jupiter notebooks i don't

00:37:34,160 --> 00:37:36,000
think they're going to overtake the

00:37:34,960 --> 00:37:37,760
world or anything

00:37:36,000 --> 00:37:39,760
but it's really convenient being able to

00:37:37,760 --> 00:37:41,040
just send someone a note a notebook or

00:37:39,760 --> 00:37:42,079
being able to send them a link to a

00:37:41,040 --> 00:37:44,240
notebook

00:37:42,079 --> 00:37:45,680
and then be able to share sort of like

00:37:44,240 --> 00:37:47,440
code for learning purposes that's

00:37:45,680 --> 00:37:48,720
a really big thing uh or at least i

00:37:47,440 --> 00:37:50,320
think it's really a big thing this has

00:37:48,720 --> 00:37:52,000
actually been out for a while now

00:37:50,320 --> 00:37:54,000
um it's just almost no one seems to know

00:37:52,000 --> 00:37:55,599
it's there google keeps talking about it

00:37:54,000 --> 00:37:58,079
um

00:37:55,599 --> 00:37:59,599
so webassembly embedded systems uh these

00:37:58,079 --> 00:38:01,599
are sort of areas which

00:37:59,599 --> 00:38:02,640
have been mentioned sort of in passing i

00:38:01,599 --> 00:38:04,880
guess i would say as

00:38:02,640 --> 00:38:05,839
areas that swift wants to one day be

00:38:04,880 --> 00:38:07,200
able to get to

00:38:05,839 --> 00:38:09,040
i would say it's very sort of like

00:38:07,200 --> 00:38:11,760
long-term goals um

00:38:09,040 --> 00:38:14,280
kind of far away there is some work

00:38:11,760 --> 00:38:15,599
being done in these especially uh

00:38:14,280 --> 00:38:18,320
swiftwassum.org

00:38:15,599 --> 00:38:19,280
if you go there there is a working uh

00:38:18,320 --> 00:38:21,680
community port

00:38:19,280 --> 00:38:23,599
of swift that compile to web that can

00:38:21,680 --> 00:38:25,680
compile to webassembly

00:38:23,599 --> 00:38:27,280
um there's still lots to do before that

00:38:25,680 --> 00:38:29,119
can be integrated they found some

00:38:27,280 --> 00:38:30,800
interesting like sort of weird quirks

00:38:29,119 --> 00:38:31,440
and corner cases in how swift does

00:38:30,800 --> 00:38:33,599
things

00:38:31,440 --> 00:38:34,480
that clashes with how web assembly does

00:38:33,599 --> 00:38:36,560
things

00:38:34,480 --> 00:38:37,920
um likewise with embedded systems

00:38:36,560 --> 00:38:41,200
there's been some work

00:38:37,920 --> 00:38:42,400
into it but they're still uh

00:38:41,200 --> 00:38:43,599
it's kind of it's not so much up in the

00:38:42,400 --> 00:38:44,800
air it's just there's a lot of little

00:38:43,599 --> 00:38:48,000
pieces need to fall in

00:38:44,800 --> 00:38:49,200
yeah in particular uh embedded systems

00:38:48,000 --> 00:38:51,680
don't play nice with

00:38:49,200 --> 00:38:53,359
uh lib ice is it lib icu i see you live

00:38:51,680 --> 00:38:56,000
the uh the unicode

00:38:53,359 --> 00:38:57,920
string library right um which is a

00:38:56,000 --> 00:38:59,280
massive dependency swift currently has

00:38:57,920 --> 00:39:01,599
it's the single largest like

00:38:59,280 --> 00:39:04,320
dependency in the whole project and it's

00:39:01,599 --> 00:39:07,280
a side effect of wanting lovely full utf

00:39:04,320 --> 00:39:08,720
uh uh strings but the the downsides

00:39:07,280 --> 00:39:09,839
you've got this huge library that just

00:39:08,720 --> 00:39:12,079
does not play well

00:39:09,839 --> 00:39:13,359
with embedded systems it's going to be

00:39:12,079 --> 00:39:14,880
tricky to untangle that

00:39:13,359 --> 00:39:16,560
is part of the problem they are looking

00:39:14,880 --> 00:39:19,119
into it it has been listed

00:39:16,560 --> 00:39:20,480
they filed bugs on the the swift issue

00:39:19,119 --> 00:39:22,000
tracker going like hey it'd be great if

00:39:20,480 --> 00:39:23,520
we could remove lib icu

00:39:22,000 --> 00:39:25,680
and they're like wow that's a lot of

00:39:23,520 --> 00:39:26,880
work um we'll get there eventually it is

00:39:25,680 --> 00:39:28,079
something they're looking at but it's

00:39:26,880 --> 00:39:30,000
not going to happen overnight

00:39:28,079 --> 00:39:31,599
so you know watch this space the web

00:39:30,000 --> 00:39:35,119
assembly one however is chugging on

00:39:31,599 --> 00:39:36,560
much nicer so ios mac os

00:39:35,119 --> 00:39:38,079
this is a massive part of swift you

00:39:36,560 --> 00:39:38,800
still can't deny that just even it came

00:39:38,079 --> 00:39:40,880
from apple

00:39:38,800 --> 00:39:42,160
ios and macos are still huge and this is

00:39:40,880 --> 00:39:43,119
still the most dominant area of the

00:39:42,160 --> 00:39:45,280
swift community

00:39:43,119 --> 00:39:46,720
uh i do think the swift team is working

00:39:45,280 --> 00:39:49,760
really hard to make sure that

00:39:46,720 --> 00:39:51,119
swift is uh not a platform-specific tool

00:39:49,760 --> 00:39:52,720
in any way and they've done really great

00:39:51,119 --> 00:39:53,760
strides with that and that is very true

00:39:52,720 --> 00:39:55,200
uh but there are

00:39:53,760 --> 00:39:57,680
some tall things that are platform

00:39:55,200 --> 00:39:59,359
specific and one of those is switch ui

00:39:57,680 --> 00:40:00,800
switch ui's apple's proprietary ui

00:39:59,359 --> 00:40:04,160
framework it's what you use to build

00:40:00,800 --> 00:40:06,560
uh uis for mac os ios watchos tbs

00:40:04,160 --> 00:40:08,079
the ipad os the apple what platforms

00:40:06,560 --> 00:40:10,160
it's not open source it's not part of

00:40:08,079 --> 00:40:12,240
standard library but it's very swifty

00:40:10,160 --> 00:40:13,359
uh there there's a lot of people asking

00:40:12,240 --> 00:40:15,359
for apple open source

00:40:13,359 --> 00:40:16,800
so yeah i think they might one day it's

00:40:15,359 --> 00:40:19,200
a very complicated

00:40:16,800 --> 00:40:20,240
uh ui framework that's very apple right

00:40:19,200 --> 00:40:21,520
now and it's really cool

00:40:20,240 --> 00:40:23,359
you can build really complicated

00:40:21,520 --> 00:40:24,079
frameworks for your visuals with very

00:40:23,359 --> 00:40:25,520
simple code

00:40:24,079 --> 00:40:27,200
and this is a really good example from

00:40:25,520 --> 00:40:28,319
apple's website of something you can

00:40:27,200 --> 00:40:29,839
build swift ui

00:40:28,319 --> 00:40:31,359
uh it's you know it's animated it's

00:40:29,839 --> 00:40:32,880
fluid it works you can scroll it

00:40:31,359 --> 00:40:35,680
you can go into things it's just crazy

00:40:32,880 --> 00:40:37,520
what you can do with swift ui

00:40:35,680 --> 00:40:38,720
where's all this heading tim where is it

00:40:37,520 --> 00:40:41,440
heading good

00:40:38,720 --> 00:40:42,079
how could we know uh so i mean i think

00:40:41,440 --> 00:40:43,680
this is

00:40:42,079 --> 00:40:45,200
like we sort of touched on we think

00:40:43,680 --> 00:40:47,119
swift is sort of focusing on two main

00:40:45,200 --> 00:40:48,079
areas which is data science and systems

00:40:47,119 --> 00:40:51,359
programming

00:40:48,079 --> 00:40:53,680
i think swift is trying to be a viable

00:40:51,359 --> 00:40:54,800
competitor to python para said they want

00:40:53,680 --> 00:40:55,920
to eat pythons lunch i don't think

00:40:54,800 --> 00:40:58,400
that's true i think they just want to

00:40:55,920 --> 00:41:00,000
sit at the same table as pipeline yeah

00:40:58,400 --> 00:41:01,520
they want to sit with python while

00:41:00,000 --> 00:41:02,800
tyson's eating lunch and be like can i

00:41:01,520 --> 00:41:03,760
have some lunch like i guess you can

00:41:02,800 --> 00:41:05,119
have some lunch

00:41:03,760 --> 00:41:06,800
um i think that's what they're doing

00:41:05,119 --> 00:41:09,440
that's better um

00:41:06,800 --> 00:41:10,800
and i think on the system side uh i

00:41:09,440 --> 00:41:11,599
think they're trying to be a viable

00:41:10,800 --> 00:41:14,640
competitor

00:41:11,599 --> 00:41:17,440
to uh go for the more server-side things

00:41:14,640 --> 00:41:18,560
and rust for the more low-level things

00:41:17,440 --> 00:41:20,560
um

00:41:18,560 --> 00:41:21,839
i think that's what they're going for i

00:41:20,560 --> 00:41:24,240
don't know like

00:41:21,839 --> 00:41:24,960
we honestly we we use swift we like

00:41:24,240 --> 00:41:26,880
swift we

00:41:24,960 --> 00:41:28,560
we're happy to talk about swift we don't

00:41:26,880 --> 00:41:31,680
know but everything they're working sort

00:41:28,560 --> 00:41:32,960
of fits into those two categories

00:41:31,680 --> 00:41:35,280
they really want to do a lot they want

00:41:32,960 --> 00:41:35,920
to be python they want to be c plus plus

00:41:35,280 --> 00:41:37,599
they want to be c

00:41:35,920 --> 00:41:39,200
they want to be rust they want to be go

00:41:37,599 --> 00:41:40,400
they also want to be swift they also

00:41:39,200 --> 00:41:41,839
want to be objective c in the back of

00:41:40,400 --> 00:41:43,119
their mind so like it's it's a weird

00:41:41,839 --> 00:41:45,280
language small talk they want to be

00:41:43,119 --> 00:41:47,040
small talk so yeah it's a weird language

00:41:45,280 --> 00:41:48,079
in a state of evolution that is growing

00:41:47,040 --> 00:41:49,520
and growing and growing and getting a

00:41:48,079 --> 00:41:51,040
lot of cool features and libraries and

00:41:49,520 --> 00:41:53,119
community around it and it's worth

00:41:51,040 --> 00:41:55,359
keeping an arm

00:41:53,119 --> 00:41:56,800
sue thank you for watching our talk

00:41:55,359 --> 00:41:58,720
thank you very much we're probably

00:41:56,800 --> 00:42:00,319
in the chat right now if we remember to

00:41:58,720 --> 00:42:01,599
wake up in time we'll wake up

00:42:00,319 --> 00:42:03,200
we'll be awake in time because we're in

00:42:01,599 --> 00:42:03,760
australia which is not the same time

00:42:03,200 --> 00:42:12,560
zone

00:42:03,760 --> 00:42:12,560

YouTube URL: https://www.youtube.com/watch?v=Wtr_8GUNrEg


