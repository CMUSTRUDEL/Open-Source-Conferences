Title: Front-end Testing on Steroids - Stefano Magni - CityJS Conf 2020
Publication date: 2020-10-03
Playlist: CityJS Conf 2020
Description: 
	Writing tests is like using GIT: as soon as you gain a bit of experience you wonder how you could work before discovering it.

Why testing a front-end application is so hard? What are the main challenges you need to face? Why do the tests fail without a clear reason?
If you have ever wanted to test your front-end app, if you ever tried to test it, if you have ever hated a bunch of UI tests and removed them from your pipelines... Well, this talk is for you ðŸ™Œ

I am going to show the challenges coming from automating user flows, checking everything worthwhile for the end-user, creating an ally that prevents you to add regressions, and why Cypress is an amazing tool for these purposes.

Cypress enforces you to respect a lot of testing best practices, guarantees a good developer experience, and allow you to forget a lot of bad testing habits.
And if you feel you are not ready for writing tests yet... I am going to show you what are the Cypress' features that could improve your everyday productivity, something you always care about ðŸ˜Š.

Bio:
Stefano is a front-end developer, a Cypress ambassador, and an instructor. Heâ€™s passionate about testing, automation, and learning. He's developed every kind of UI: games, product configurators, drawing tools, highly responsive websites, and mobile apps. He loves creating quality products, good testing confidence, sharing his knowledge and working with passionate teams.
He's currently focused on React, TypeScript and all their ecosystems.
Stefano's working on a big ""UI Testing Best Practices"" project on GitHub and speak regularly at meetups and conferences.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:18,100 --> 00:00:23,760
[Music]

00:00:23,039 --> 00:00:25,840
hi

00:00:23,760 --> 00:00:27,039
and welcome to my frontend testing on

00:00:25,840 --> 00:00:29,439
steroids tolk

00:00:27,039 --> 00:00:30,320
i'm going to share with you some cypress

00:00:29,439 --> 00:00:32,480
features

00:00:30,320 --> 00:00:33,600
that gives you a productivity boost

00:00:32,480 --> 00:00:36,480
other than

00:00:33,600 --> 00:00:37,040
the all the confidence of a testing tool

00:00:36,480 --> 00:00:40,480
like

00:00:37,040 --> 00:00:43,680
cypress so i'm stefanomani

00:00:40,480 --> 00:00:45,920
i'm an italian frontend engineer i

00:00:43,680 --> 00:00:48,960
currently work for workwave and i

00:00:45,920 --> 00:00:50,320
work remotely on a big codebase entirely

00:00:48,960 --> 00:00:53,520
written with react

00:00:50,320 --> 00:00:57,280
and typescript i'm the other

00:00:53,520 --> 00:00:59,440
the author of some plugins for cypress

00:00:57,280 --> 00:01:00,960
the most the most important one is

00:00:59,440 --> 00:01:04,879
cyprus wait until

00:01:00,960 --> 00:01:07,840
that gets almost 300 000

00:01:04,879 --> 00:01:09,040
downloads a month and you can you can

00:01:07,840 --> 00:01:13,040
find all my

00:01:09,040 --> 00:01:14,960
recent contributions on github

00:01:13,040 --> 00:01:16,320
and all the examples that i'm going to

00:01:14,960 --> 00:01:19,680
show you are

00:01:16,320 --> 00:01:22,799
available publicly publicly at this

00:01:19,680 --> 00:01:24,240
repository i'm going to share both the

00:01:22,799 --> 00:01:26,159
link to the slides and the link to the

00:01:24,240 --> 00:01:29,600
repository with the organizers

00:01:26,159 --> 00:01:32,880
so they can share with all of you

00:01:29,600 --> 00:01:36,159
and this presentation is most is almost

00:01:32,880 --> 00:01:39,200
100 100 code so

00:01:36,159 --> 00:01:40,880
i jump directly to voice code and a

00:01:39,200 --> 00:01:42,399
super simple front-end application that

00:01:40,880 --> 00:01:46,079
i prepared for this talk

00:01:42,399 --> 00:01:48,240
i prepared this react login form

00:01:46,079 --> 00:01:49,119
that you can you can find it in the

00:01:48,240 --> 00:01:52,240
repository

00:01:49,119 --> 00:01:52,560
along with a working backend that allows

00:01:52,240 --> 00:01:55,520
you

00:01:52,560 --> 00:01:55,840
to wipe data create a new user and use

00:01:55,520 --> 00:01:59,200
the

00:01:55,840 --> 00:01:59,200
backend as

00:01:59,360 --> 00:02:05,119
a real backend with that allows you to

00:02:02,880 --> 00:02:06,479
log in with the username you have just

00:02:05,119 --> 00:02:10,080
created

00:02:06,479 --> 00:02:12,239
so first of all what is cypress cypress

00:02:10,080 --> 00:02:15,120
is a browser automation tool it allows

00:02:12,239 --> 00:02:18,239
you to control a browser and to perform

00:02:15,120 --> 00:02:19,599
the user actions inside there inside the

00:02:18,239 --> 00:02:23,520
same browser

00:02:19,599 --> 00:02:26,000
and it has some unique features because

00:02:23,520 --> 00:02:26,720
as every browser automation tool it can

00:02:26,000 --> 00:02:28,959
be run

00:02:26,720 --> 00:02:30,080
inside the ci without the interface

00:02:28,959 --> 00:02:33,360
obviously

00:02:30,080 --> 00:02:36,400
but it has even a ui and

00:02:33,360 --> 00:02:40,319
this is the main ui of cyprus where you

00:02:36,400 --> 00:02:43,519
find all the tests of the the project

00:02:40,319 --> 00:02:45,599
and here you can find the

00:02:43,519 --> 00:02:46,640
the tests that report data people for

00:02:45,599 --> 00:02:49,040
the talk

00:02:46,640 --> 00:02:50,160
but if you are interested in the

00:02:49,040 --> 00:02:53,120
independent topic

00:02:50,160 --> 00:02:54,000
please check out the first two tests

00:02:53,120 --> 00:02:56,959
that

00:02:54,000 --> 00:02:58,720
has have a lot of comments for every

00:02:56,959 --> 00:03:01,519
single step

00:02:58,720 --> 00:03:04,159
so when i when i click when i click on

00:03:01,519 --> 00:03:06,319
one of the tests

00:03:04,159 --> 00:03:08,159
an electron browser is launched see if

00:03:06,319 --> 00:03:10,319
you don't know electron electron is just

00:03:08,159 --> 00:03:12,720
a super simple version of chrome so

00:03:10,319 --> 00:03:13,680
this is chrome this is a controlled

00:03:12,720 --> 00:03:17,120
chrome because

00:03:13,680 --> 00:03:19,519
cyprus loads loads the browser

00:03:17,120 --> 00:03:20,400
and loads your frontend application in

00:03:19,519 --> 00:03:23,519
an iframe

00:03:20,400 --> 00:03:25,040
and allows you to control or

00:03:23,519 --> 00:03:26,480
what happening in the frontend

00:03:25,040 --> 00:03:27,519
application and what happening in the

00:03:26,480 --> 00:03:31,200
test

00:03:27,519 --> 00:03:33,680
with these test runners that it's

00:03:31,200 --> 00:03:34,879
it's what is what make makes cyprus

00:03:33,680 --> 00:03:36,480
really unique and

00:03:34,879 --> 00:03:38,879
really outstanding compared to their

00:03:36,480 --> 00:03:40,879
competitors so

00:03:38,879 --> 00:03:42,159
i want to i want to show you this super

00:03:40,879 --> 00:03:45,440
simple test

00:03:42,159 --> 00:03:47,760
and in order to allow you to understand

00:03:45,440 --> 00:03:48,799
how a testing tool could improve your

00:03:47,760 --> 00:03:51,360
productivity

00:03:48,799 --> 00:03:52,159
so this is just a super simple endpoint

00:03:51,360 --> 00:03:54,000
test okay

00:03:52,159 --> 00:03:55,280
an end-to-end test is a test where you

00:03:54,000 --> 00:03:56,959
load your frontal application

00:03:55,280 --> 00:03:58,319
defended application communicates with

00:03:56,959 --> 00:04:00,239
your rear backend

00:03:58,319 --> 00:04:01,439
and also you can check that everything

00:04:00,239 --> 00:04:04,799
works for

00:04:01,439 --> 00:04:07,200
the fire for the end user and sorry this

00:04:04,799 --> 00:04:10,480
is the right test the endpoint one

00:04:07,200 --> 00:04:13,760
and in this case i'm just going to

00:04:10,480 --> 00:04:15,040
call the backend in order to wipe the

00:04:13,760 --> 00:04:17,840
database

00:04:15,040 --> 00:04:18,560
so i can launch my test without dirty

00:04:17,840 --> 00:04:21,359
data

00:04:18,560 --> 00:04:22,880
and i am going to create in that in the

00:04:21,359 --> 00:04:25,919
backend a new

00:04:22,880 --> 00:04:27,520
user this user this credentials

00:04:25,919 --> 00:04:29,680
i'm going to use this credentials you

00:04:27,520 --> 00:04:32,000
know to to fit the form

00:04:29,680 --> 00:04:32,880
and then clicking the login button i'm

00:04:32,000 --> 00:04:36,240
going to visit

00:04:32,880 --> 00:04:38,800
visit my application fill in the form

00:04:36,240 --> 00:04:39,520
clicking the button and then i then want

00:04:38,800 --> 00:04:41,759
to check

00:04:39,520 --> 00:04:43,120
that the welcome back thing will be

00:04:41,759 --> 00:04:45,440
visible okay

00:04:43,120 --> 00:04:46,400
and so this is just super simple and

00:04:45,440 --> 00:04:50,320
contest

00:04:46,400 --> 00:04:52,720
and you can see it running in cyprus

00:04:50,320 --> 00:04:53,919
okay at the moment we are currently

00:04:52,720 --> 00:04:56,960
recreating the user

00:04:53,919 --> 00:04:59,840
then we we have filled the form

00:04:56,960 --> 00:05:02,320
we click on the button and then we wait

00:04:59,840 --> 00:05:06,800
for the final thing to be visible

00:05:02,320 --> 00:05:10,080
okay what's wrong with this test

00:05:06,800 --> 00:05:11,039
so there's nothing wrong for the test

00:05:10,080 --> 00:05:14,560
itself

00:05:11,039 --> 00:05:17,120
but remember that i'm going to uh

00:05:14,560 --> 00:05:17,759
to talk you about both testing

00:05:17,120 --> 00:05:20,960
confidence

00:05:17,759 --> 00:05:24,000
and both productivity improvements so

00:05:20,960 --> 00:05:27,280
the real disadvantage of this test is

00:05:24,000 --> 00:05:28,479
that it's slow it's really slow because

00:05:27,280 --> 00:05:32,160
it takes

00:05:28,479 --> 00:05:34,639
five six seven eight seconds for

00:05:32,160 --> 00:05:35,600
to be complete and the problem is

00:05:34,639 --> 00:05:36,960
obviously that

00:05:35,600 --> 00:05:39,360
the defender application is

00:05:36,960 --> 00:05:42,560
communicating with a real backend

00:05:39,360 --> 00:05:46,080
and so we must wait for the backend

00:05:42,560 --> 00:05:48,800
you know to to do his job

00:05:46,080 --> 00:05:49,360
his job and this is this is the main

00:05:48,800 --> 00:05:52,000
problem

00:05:49,360 --> 00:05:53,520
because this is this test is perfect to

00:05:52,000 --> 00:05:54,960
check both the front-end application

00:05:53,520 --> 00:05:57,840
both of the backend application

00:05:54,960 --> 00:05:58,800
but if you like me are a front-end

00:05:57,840 --> 00:06:01,039
developer

00:05:58,800 --> 00:06:02,479
uh when when you're writing the code of

00:06:01,039 --> 00:06:04,880
your front-end application

00:06:02,479 --> 00:06:06,479
you you don't bother about the backend

00:06:04,880 --> 00:06:09,840
application you just want

00:06:06,479 --> 00:06:12,800
that definitely application works and

00:06:09,840 --> 00:06:13,840
a lot of times you are going to write in

00:06:12,800 --> 00:06:16,160
the code for

00:06:13,840 --> 00:06:17,840
the username field so you are going to

00:06:16,160 --> 00:06:20,160
check that everything works in a browser

00:06:17,840 --> 00:06:21,759
you are going to check that you are

00:06:20,160 --> 00:06:22,639
going to write the call for the password

00:06:21,759 --> 00:06:23,680
input field

00:06:22,639 --> 00:06:25,520
and you are going to check in the

00:06:23,680 --> 00:06:27,199
browser even the same for the button the

00:06:25,520 --> 00:06:28,479
same for the function that performs the

00:06:27,199 --> 00:06:31,680
ajax call

00:06:28,479 --> 00:06:35,120
and you you can't count

00:06:31,680 --> 00:06:36,080
on a so slow test because this is just

00:06:35,120 --> 00:06:38,240
one test but

00:06:36,080 --> 00:06:40,240
but probably for your application and in

00:06:38,240 --> 00:06:43,840
your scenario you are going to write

00:06:40,240 --> 00:06:46,800
10 20 30 or 40 tests so you can't

00:06:43,840 --> 00:06:47,120
wait four minutes to get a feedback this

00:06:46,800 --> 00:06:50,880
is

00:06:47,120 --> 00:06:54,160
a perfect test but you can't use as

00:06:50,880 --> 00:06:58,319
as a as a development tool and

00:06:54,160 --> 00:07:01,120
the real advantage of cyprus is that

00:06:58,319 --> 00:07:02,000
i want to introduce you the concept of

00:07:01,120 --> 00:07:04,800
ui integration

00:07:02,000 --> 00:07:06,960
tests a ui integration test is a test

00:07:04,800 --> 00:07:10,479
where the front-end application

00:07:06,960 --> 00:07:13,599
performs the usual ajax call but

00:07:10,479 --> 00:07:14,400
these this course don't hit the real

00:07:13,599 --> 00:07:16,720
backend

00:07:14,400 --> 00:07:18,000
but cyprus that controls the browser

00:07:16,720 --> 00:07:21,199
where defender application

00:07:18,000 --> 00:07:22,240
is running inside simply responds with

00:07:21,199 --> 00:07:26,240
static fixtures

00:07:22,240 --> 00:07:29,280
so in this case this is the same

00:07:26,240 --> 00:07:29,759
test okay but obviously since i don't

00:07:29,280 --> 00:07:33,199
have

00:07:29,759 --> 00:07:36,400
to deal with your backend i just

00:07:33,199 --> 00:07:39,360
i just have to visit the home page and

00:07:36,400 --> 00:07:40,319
i ask cyprus to intercept every aegis

00:07:39,360 --> 00:07:43,680
request

00:07:40,319 --> 00:07:46,879
and then i'm going to ask cyprus to

00:07:43,680 --> 00:07:49,919
intercept every post post call

00:07:46,879 --> 00:07:51,599
to every to the url that ends with slash

00:07:49,919 --> 00:07:54,400
api's dash authentication

00:07:51,599 --> 00:07:55,599
and to respond with static fixtures

00:07:54,400 --> 00:07:58,560
extracting fixed

00:07:55,599 --> 00:07:59,120
is a static response okay so imagine

00:07:58,560 --> 00:08:01,759
that

00:07:59,120 --> 00:08:02,240
if i if i start working on the login

00:08:01,759 --> 00:08:05,440
form

00:08:02,240 --> 00:08:07,520
i just ask to my backenders to

00:08:05,440 --> 00:08:08,639
give me the response that they are going

00:08:07,520 --> 00:08:11,680
to go to

00:08:08,639 --> 00:08:12,080
give me in case of the if collections

00:08:11,680 --> 00:08:16,000
are

00:08:12,080 --> 00:08:18,080
liked and this is the fixed okay

00:08:16,000 --> 00:08:19,199
this is obviously a fake fixed but in

00:08:18,080 --> 00:08:22,479
this case the

00:08:19,199 --> 00:08:25,120
application doesn't doesn't check what

00:08:22,479 --> 00:08:25,759
uh what's inside the token so i just

00:08:25,120 --> 00:08:28,960
need to know

00:08:25,759 --> 00:08:32,479
that the response is a json with

00:08:28,960 --> 00:08:34,399
a token token string and in this case

00:08:32,479 --> 00:08:36,240
for the fonted application everything is

00:08:34,399 --> 00:08:37,120
working as you as usual so the frontend

00:08:36,240 --> 00:08:39,839
application

00:08:37,120 --> 00:08:42,479
performs ajax call and then cyprus

00:08:39,839 --> 00:08:45,120
response so this is almost immediately

00:08:42,479 --> 00:08:46,080
and obviously i'm going to check to

00:08:45,120 --> 00:08:49,120
assert about

00:08:46,080 --> 00:08:52,480
the same visibility of the string

00:08:49,120 --> 00:08:53,519
and let's check out how this test

00:08:52,480 --> 00:08:56,640
performs

00:08:53,519 --> 00:08:56,640
okay sorry

00:08:58,080 --> 00:09:02,640
okay this is the same test we can we can

00:09:01,360 --> 00:09:05,519
even comment out

00:09:02,640 --> 00:09:07,040
the next test that i want to show you so

00:09:05,519 --> 00:09:10,160
this is the same test

00:09:07,040 --> 00:09:10,720
and it lasts just more or less one

00:09:10,160 --> 00:09:14,880
second

00:09:10,720 --> 00:09:18,399
okay so from five six and seven six two

00:09:14,880 --> 00:09:21,519
seconds to just one second obviously

00:09:18,399 --> 00:09:24,160
this test is not an intent test i'm not

00:09:21,519 --> 00:09:26,000
checking that both defended application

00:09:24,160 --> 00:09:27,519
and the backend application work

00:09:26,000 --> 00:09:29,200
i just want to check my front-end

00:09:27,519 --> 00:09:31,519
application because again

00:09:29,200 --> 00:09:33,440
i'm a front-end developer so i write the

00:09:31,519 --> 00:09:35,440
code on my front-end application

00:09:33,440 --> 00:09:36,640
and i want to be sure that my phone

00:09:35,440 --> 00:09:39,519
application works

00:09:36,640 --> 00:09:41,120
then when i'm then i'm when i'm okay

00:09:39,519 --> 00:09:41,839
with my application i'm going to check

00:09:41,120 --> 00:09:44,480
that everything

00:09:41,839 --> 00:09:45,200
works with the backend too and working

00:09:44,480 --> 00:09:47,440
with

00:09:45,200 --> 00:09:48,480
without the backend allows allows me

00:09:47,440 --> 00:09:51,680
even to

00:09:48,480 --> 00:09:52,560
uh to start my defense and uh working on

00:09:51,680 --> 00:09:55,839
the front application

00:09:52,560 --> 00:09:56,320
before the back end is ready okay so we

00:09:55,839 --> 00:09:59,760
can

00:09:56,320 --> 00:10:01,279
work in parallel and this is pretty

00:09:59,760 --> 00:10:03,839
amazing because

00:10:01,279 --> 00:10:04,560
okay this is just a test we are checking

00:10:03,839 --> 00:10:07,920
that

00:10:04,560 --> 00:10:10,240
and we are checking that that

00:10:07,920 --> 00:10:11,600
with the right credentials the fonted

00:10:10,240 --> 00:10:14,800
application

00:10:11,600 --> 00:10:17,200
performs correctly and

00:10:14,800 --> 00:10:19,040
if a test like this takes just one

00:10:17,200 --> 00:10:22,240
second i

00:10:19,040 --> 00:10:24,240
can think about using these tests a lot

00:10:22,240 --> 00:10:26,560
of times because

00:10:24,240 --> 00:10:27,279
again when when i started using site

00:10:26,560 --> 00:10:29,440
when i

00:10:27,279 --> 00:10:31,839
became expert with cyprus i started

00:10:29,440 --> 00:10:35,279
using it as a development tool so

00:10:31,839 --> 00:10:36,320
instead of usually you write the code

00:10:35,279 --> 00:10:38,320
from an application

00:10:36,320 --> 00:10:39,760
you check manually in the browser that

00:10:38,320 --> 00:10:41,360
everything works

00:10:39,760 --> 00:10:42,720
then you change the code and you check

00:10:41,360 --> 00:10:43,519
manually and change the code you can

00:10:42,720 --> 00:10:45,680
check manually

00:10:43,519 --> 00:10:47,040
and then when default application is

00:10:45,680 --> 00:10:49,519
work when different and

00:10:47,040 --> 00:10:50,079
flow or the login form in this case

00:10:49,519 --> 00:10:52,240
works

00:10:50,079 --> 00:10:53,120
you're going to write the tests and in

00:10:52,240 --> 00:10:55,839
the test you

00:10:53,120 --> 00:10:57,760
you repeat the same actions that you

00:10:55,839 --> 00:11:00,720
perform manually a lot of times

00:10:57,760 --> 00:11:02,720
so you have to invert these last two

00:11:00,720 --> 00:11:05,920
steps so you write the code

00:11:02,720 --> 00:11:06,959
and then you add an interaction in a

00:11:05,920 --> 00:11:09,040
cypress test

00:11:06,959 --> 00:11:10,800
and then you check that everything works

00:11:09,040 --> 00:11:12,720
in cyprus then you change the code

00:11:10,800 --> 00:11:14,160
and you check that if it works in cyprus

00:11:12,720 --> 00:11:17,200
okay again and again

00:11:14,160 --> 00:11:18,160
and cyprus allows you to stop performing

00:11:17,200 --> 00:11:20,720
manufacturing

00:11:18,160 --> 00:11:22,560
and remember that cyprus is even a lot

00:11:20,720 --> 00:11:26,000
faster compared with you

00:11:22,560 --> 00:11:29,839
so this is the real

00:11:26,000 --> 00:11:32,959
productivity performance boost and

00:11:29,839 --> 00:11:35,360
and consider even that

00:11:32,959 --> 00:11:37,360
in this test i'm going to fill the input

00:11:35,360 --> 00:11:41,040
fields like the user will do

00:11:37,360 --> 00:11:43,920
so as you can see

00:11:41,040 --> 00:11:46,320
feeling the form is pretty slow fast

00:11:43,920 --> 00:11:49,920
compared with me faster than me but

00:11:46,320 --> 00:11:53,040
pretty low and i can show i can show you

00:11:49,920 --> 00:11:55,760
even another test when instead

00:11:53,040 --> 00:11:56,240
of filling the form like the user i'm

00:11:55,760 --> 00:11:58,720
going

00:11:56,240 --> 00:12:00,560
just and you're going to set the value

00:11:58,720 --> 00:12:03,680
of the input feeds directly

00:12:00,560 --> 00:12:06,959
so in this case as you can see the test

00:12:03,680 --> 00:12:10,000
is super fast so imagine that and

00:12:06,959 --> 00:12:11,279
please check that every every time that

00:12:10,000 --> 00:12:14,079
i save the test

00:12:11,279 --> 00:12:15,519
and uh even if i save definite

00:12:14,079 --> 00:12:16,160
application and complete the defaulted

00:12:15,519 --> 00:12:18,720
application

00:12:16,160 --> 00:12:19,839
it has been compiled the test is

00:12:18,720 --> 00:12:22,079
refreshed

00:12:19,839 --> 00:12:24,480
so this is really important because i

00:12:22,079 --> 00:12:26,959
can work on micro download screen and

00:12:24,480 --> 00:12:28,399
keeping cypress on another screen and

00:12:26,959 --> 00:12:32,160
being sure that everything

00:12:28,399 --> 00:12:35,040
works perfectly and let the tests work

00:12:32,160 --> 00:12:36,240
and this this is really important

00:12:35,040 --> 00:12:40,160
because

00:12:36,240 --> 00:12:42,399
because allows you to have feedback and

00:12:40,160 --> 00:12:43,600
the fastest way when you need when

00:12:42,399 --> 00:12:45,360
you're writing the code

00:12:43,600 --> 00:12:46,959
and that's that's that's perfect thing

00:12:45,360 --> 00:12:49,839
you think about that this is

00:12:46,959 --> 00:12:51,040
my talk is just about using cyprus

00:12:49,839 --> 00:12:54,000
instead of

00:12:51,040 --> 00:12:54,320
performing a lot of manual actions okay

00:12:54,000 --> 00:12:57,920
but

00:12:54,320 --> 00:12:58,959
obviously this this test uh we can we

00:12:57,920 --> 00:13:01,519
can we can discuss

00:12:58,959 --> 00:13:03,200
if the test where i set directly the

00:13:01,519 --> 00:13:05,279
value is a valid test

00:13:03,200 --> 00:13:07,920
but consider that probably for example

00:13:05,279 --> 00:13:11,360
if we are if we are testing

00:13:07,920 --> 00:13:11,920
um if we are working on a project like

00:13:11,360 --> 00:13:13,600
medium

00:13:11,920 --> 00:13:16,560
and we are testing that the form

00:13:13,600 --> 00:13:19,120
creation works probably we are going to

00:13:16,560 --> 00:13:21,120
check that filling the title works

00:13:19,120 --> 00:13:24,480
filling the subtitle works

00:13:21,120 --> 00:13:25,040
and probably the word text sometimes i

00:13:24,480 --> 00:13:27,920
can

00:13:25,040 --> 00:13:28,959
even set directly the value instead of

00:13:27,920 --> 00:13:31,760
writing manually

00:13:28,959 --> 00:13:32,240
letting cyprus writing writing letter by

00:13:31,760 --> 00:13:35,760
letter

00:13:32,240 --> 00:13:38,079
all the text but again i'm not

00:13:35,760 --> 00:13:39,440
i don't want to talk you about uh test

00:13:38,079 --> 00:13:43,120
quality but i want to talk

00:13:39,440 --> 00:13:45,360
about the productivity and

00:13:43,120 --> 00:13:46,880
sometimes when you when you write the

00:13:45,360 --> 00:13:50,079
code of your

00:13:46,880 --> 00:13:50,560
of login form obviously you have even to

00:13:50,079 --> 00:13:53,839
test

00:13:50,560 --> 00:13:58,160
some edge cases for example what

00:13:53,839 --> 00:13:58,160
what happens if i need to test

00:13:58,480 --> 00:14:02,000
how different application works when the

00:14:00,959 --> 00:14:05,279
backhand responds

00:14:02,000 --> 00:14:10,560
with a wrong credentials response

00:14:05,279 --> 00:14:10,560
response in this case i can

00:14:11,440 --> 00:14:18,240
this is the case so i'm asking cyprus

00:14:14,560 --> 00:14:18,959
to respond to the same as just call but

00:14:18,240 --> 00:14:22,000
with a

00:14:18,959 --> 00:14:25,920
401 status in this case so i know that

00:14:22,000 --> 00:14:28,240
401 status is for ips when

00:14:25,920 --> 00:14:29,360
declarations are wrong and in this case

00:14:28,240 --> 00:14:32,480
i'm just

00:14:29,360 --> 00:14:35,920
checking that this the correct thing

00:14:32,480 --> 00:14:38,639
becomes visible okay so

00:14:35,920 --> 00:14:39,600
uh why this is important well because a

00:14:38,639 --> 00:14:41,279
lot of times

00:14:39,600 --> 00:14:42,639
when when you write the code of your

00:14:41,279 --> 00:14:44,880
phantom application obviously

00:14:42,639 --> 00:14:46,079
you must check that everything works for

00:14:44,880 --> 00:14:48,560
the happy path

00:14:46,079 --> 00:14:49,839
but you write a code even for a lot of

00:14:48,560 --> 00:14:52,720
non-happy path

00:14:49,839 --> 00:14:52,720
buffs and

00:14:52,959 --> 00:14:56,880
in order to test them without the

00:14:55,199 --> 00:14:59,920
backend because sometimes

00:14:56,880 --> 00:15:02,800
it's really hard to simulate some

00:14:59,920 --> 00:15:03,600
wrong response from the backends and in

00:15:02,800 --> 00:15:06,560
this case

00:15:03,600 --> 00:15:07,839
probably when you when you have to check

00:15:06,560 --> 00:15:10,079
something like that

00:15:07,839 --> 00:15:12,000
you are going to change the code of your

00:15:10,079 --> 00:15:13,440
content your content application and

00:15:12,000 --> 00:15:16,480
probably you are going to

00:15:13,440 --> 00:15:18,240
add some fake returns

00:15:16,480 --> 00:15:19,839
from the functions that are going to

00:15:18,240 --> 00:15:22,880
perform later schools

00:15:19,839 --> 00:15:24,320
and even to save time filling the form

00:15:22,880 --> 00:15:26,800
you are probably going to

00:15:24,320 --> 00:15:27,519
add some default values to the input

00:15:26,800 --> 00:15:30,160
fields

00:15:27,519 --> 00:15:31,279
so you're going to add a lot of

00:15:30,160 --> 00:15:33,279
conditions and

00:15:31,279 --> 00:15:34,880
strange conditions in your codebase in

00:15:33,279 --> 00:15:37,920
order to test

00:15:34,880 --> 00:15:38,560
some edge cases but obviously these

00:15:37,920 --> 00:15:41,920
changes

00:15:38,560 --> 00:15:45,120
are fragile you could even forget them

00:15:41,920 --> 00:15:47,360
in the code base or they could go

00:15:45,120 --> 00:15:48,800
get your code based dirty because you're

00:15:47,360 --> 00:15:51,839
going to have a lot

00:15:48,800 --> 00:15:55,279
of fake functions

00:15:51,839 --> 00:15:57,120
and fake code like these so if i use

00:15:55,279 --> 00:16:00,880
cyprus for the same thing

00:15:57,120 --> 00:16:03,440
i'm i'm going to don't

00:16:00,880 --> 00:16:04,800
change the front end codebase but i'm

00:16:03,440 --> 00:16:07,279
going to

00:16:04,800 --> 00:16:09,440
ask to ask cyprus that control the

00:16:07,279 --> 00:16:12,399
browser to perform some action for me

00:16:09,440 --> 00:16:13,120
so the their frontal cord base is

00:16:12,399 --> 00:16:15,519
perfect

00:16:13,120 --> 00:16:17,279
i don't touch i don't touch it and i'm

00:16:15,519 --> 00:16:20,839
going to ask cyprus to

00:16:17,279 --> 00:16:23,199
to control how what happens inside the

00:16:20,839 --> 00:16:26,160
browser and

00:16:23,199 --> 00:16:27,120
another another productivity boost comes

00:16:26,160 --> 00:16:30,800
from

00:16:27,120 --> 00:16:34,560
checking from delays so in this case

00:16:30,800 --> 00:16:36,160
you can you can

00:16:34,560 --> 00:16:38,000
i call it different applications the

00:16:36,160 --> 00:16:41,600
login form in order to

00:16:38,000 --> 00:16:44,560
show a bit patience thing when the

00:16:41,600 --> 00:16:46,560
login agency request takes too long in

00:16:44,560 --> 00:16:48,320
order to mitigate a bad experience for

00:16:46,560 --> 00:16:51,040
the user so

00:16:48,320 --> 00:16:51,680
check check check the test the test

00:16:51,040 --> 00:16:54,800
obviously

00:16:51,680 --> 00:16:56,240
almost is the the test is almost the

00:16:54,800 --> 00:16:59,279
same because the test

00:16:56,240 --> 00:17:03,120
ends when the string is visible but

00:16:59,279 --> 00:17:06,640
obviously is going to uh to last the

00:17:03,120 --> 00:17:09,760
the previous one second plus the delay

00:17:06,640 --> 00:17:14,000
in between the the b patients thing

00:17:09,760 --> 00:17:16,880
is shown so in this case i showed the

00:17:14,000 --> 00:17:19,039
patient's thing right after one second

00:17:16,880 --> 00:17:22,240
so the test obviously is going to

00:17:19,039 --> 00:17:24,240
to last one more or less two seconds the

00:17:22,240 --> 00:17:26,240
the one second of the previous test and

00:17:24,240 --> 00:17:30,080
one second for the delay

00:17:26,240 --> 00:17:32,080
but again cps allows me to control

00:17:30,080 --> 00:17:34,320
the browser so in this case i can even

00:17:32,080 --> 00:17:38,240
control the browser clock

00:17:34,320 --> 00:17:40,480
and just after clicking on the

00:17:38,240 --> 00:17:42,480
on the login button i tick the clock by

00:17:40,480 --> 00:17:47,679
one second so in this case

00:17:42,480 --> 00:17:50,559
if i save the test you can see that here

00:17:47,679 --> 00:17:51,200
i have i have more forward the browser

00:17:50,559 --> 00:17:54,320
clock

00:17:51,200 --> 00:17:58,320
in this case the test again

00:17:54,320 --> 00:18:00,400
returned to last more or less one second

00:17:58,320 --> 00:18:01,440
and this is another productivity boost

00:18:00,400 --> 00:18:04,960
because even

00:18:01,440 --> 00:18:07,840
when i have some animations or even if

00:18:04,960 --> 00:18:08,799
i have to waste some delays in the

00:18:07,840 --> 00:18:11,520
front-end application

00:18:08,799 --> 00:18:13,679
i can control the browser clock and have

00:18:11,520 --> 00:18:15,760
super fast

00:18:13,679 --> 00:18:16,960
and this is again this is really

00:18:15,760 --> 00:18:20,240
important because

00:18:16,960 --> 00:18:23,440
otherwise i have to perform some

00:18:20,240 --> 00:18:27,280
strange checks and some strange changes

00:18:23,440 --> 00:18:27,280
directly in the codebase in order to

00:18:27,600 --> 00:18:31,120
don't face the delays every time that i

00:18:29,760 --> 00:18:34,880
have to check manually that

00:18:31,120 --> 00:18:38,400
everything works in this login form and

00:18:34,880 --> 00:18:41,760
so i have shown you how to use cypress

00:18:38,400 --> 00:18:44,480
to perform your manual actions

00:18:41,760 --> 00:18:46,240
and using it has a development tool

00:18:44,480 --> 00:18:47,280
instead of a testing tool and please

00:18:46,240 --> 00:18:50,960
remember that

00:18:47,280 --> 00:18:53,039
when if you remember the coding

00:18:50,960 --> 00:18:54,000
manual testing and automation testing

00:18:53,039 --> 00:18:57,120
steps but

00:18:54,000 --> 00:18:58,960
if you invert the the last two steps

00:18:57,120 --> 00:19:00,559
you are going to write the code and

00:18:58,960 --> 00:19:01,280
leverage in cyprus by the code leverage

00:19:00,559 --> 00:19:03,840
in cyprus

00:19:01,280 --> 00:19:04,799
and when you are finished and when you

00:19:03,840 --> 00:19:07,679
have finished with

00:19:04,799 --> 00:19:09,679
the with the features you are working on

00:19:07,679 --> 00:19:10,000
you have already written the test so you

00:19:09,679 --> 00:19:12,320
don't

00:19:10,000 --> 00:19:14,160
have another step of writing the test

00:19:12,320 --> 00:19:16,880
that a lot of times is

00:19:14,160 --> 00:19:17,200
pretty slow but you just have to check

00:19:16,880 --> 00:19:20,799
that

00:19:17,200 --> 00:19:24,000
even manually everything works perfectly

00:19:20,799 --> 00:19:26,480
but if you want to use

00:19:24,000 --> 00:19:27,200
cypress edible as a development tool

00:19:26,480 --> 00:19:30,240
there

00:19:27,200 --> 00:19:33,520
is another giant topic

00:19:30,240 --> 00:19:34,960
that that's debugging well i don't know

00:19:33,520 --> 00:19:37,840
if you have experience

00:19:34,960 --> 00:19:39,840
with puppeteer selenium that are the

00:19:37,840 --> 00:19:42,880
most famous browser automation tool

00:19:39,840 --> 00:19:45,840
i have experience with them and i

00:19:42,880 --> 00:19:46,640
i can guarantee you that debugging them

00:19:45,840 --> 00:19:49,919
is

00:19:46,640 --> 00:19:52,480
pretty hard is is a nightmare

00:19:49,919 --> 00:19:54,880
i have to to be honest it's an armor

00:19:52,480 --> 00:19:57,039
because a lot of times

00:19:54,880 --> 00:19:58,559
you don't have a don't have a direct

00:19:57,039 --> 00:20:01,039
connection with the browser

00:19:58,559 --> 00:20:02,000
and you don't have you you're going to

00:20:01,039 --> 00:20:05,280
have

00:20:02,000 --> 00:20:07,440
the you can you can leverage the browser

00:20:05,280 --> 00:20:08,080
devtools inside the browser but you have

00:20:07,440 --> 00:20:12,000
to debug

00:20:08,080 --> 00:20:13,919
the test outside of the browser and so

00:20:12,000 --> 00:20:15,280
a lot of times you are going you are not

00:20:13,919 --> 00:20:17,200
sure because

00:20:15,280 --> 00:20:19,280
something is not working you are not

00:20:17,200 --> 00:20:20,000
sure if the front end is not work in

00:20:19,280 --> 00:20:22,159
front of the application

00:20:20,000 --> 00:20:23,520
isn't working if the browser automation

00:20:22,159 --> 00:20:26,080
tool is not working

00:20:23,520 --> 00:20:27,280
or if you are not able to use the buzzer

00:20:26,080 --> 00:20:30,799
automation tool

00:20:27,280 --> 00:20:34,320
the best way and so debugging them

00:20:30,799 --> 00:20:35,760
is a nightmare and everyone selenium

00:20:34,320 --> 00:20:38,880
property for that

00:20:35,760 --> 00:20:40,720
but cyprus surplus allows you to debug

00:20:38,880 --> 00:20:43,600
applications the easiest way

00:20:40,720 --> 00:20:45,760
first of all because since cyprus works

00:20:43,600 --> 00:20:46,880
inside the browser and not outside of

00:20:45,760 --> 00:20:49,919
the browser

00:20:46,880 --> 00:20:53,280
you can use the same developer tools

00:20:49,919 --> 00:20:56,720
so you can you can open the console

00:20:53,280 --> 00:20:59,280
and using the same browse adaptors

00:20:56,720 --> 00:21:00,320
in this case as you can see here i'm

00:20:59,280 --> 00:21:02,240
completely logging

00:21:00,320 --> 00:21:04,559
the front-end application state every

00:21:02,240 --> 00:21:08,880
time that you change the input fields

00:21:04,559 --> 00:21:10,720
and these this is the centralized

00:21:08,880 --> 00:21:12,640
console for both the frontend

00:21:10,720 --> 00:21:18,320
application and the test because

00:21:12,640 --> 00:21:18,320
if i'm going to add a console.log

00:21:21,159 --> 00:21:25,360
console.log

00:21:22,320 --> 00:21:28,640
cdjs conf okay

00:21:25,360 --> 00:21:30,720
you are going to okay

00:21:28,640 --> 00:21:32,880
here the logging so both definite

00:21:30,720 --> 00:21:35,440
application and the test

00:21:32,880 --> 00:21:36,400
use the same console and this is amazing

00:21:35,440 --> 00:21:38,000
because it's

00:21:36,400 --> 00:21:40,320
it's really it's really easy to

00:21:38,000 --> 00:21:42,880
understand

00:21:40,320 --> 00:21:44,080
when and what is not working and

00:21:42,880 --> 00:21:46,720
sometimes for example

00:21:44,080 --> 00:21:47,679
with in the test scanner if you don't

00:21:46,720 --> 00:21:51,360
have

00:21:47,679 --> 00:21:53,520
enough space in the test liner to have a

00:21:51,360 --> 00:21:54,880
useful feedback you can click on the

00:21:53,520 --> 00:21:58,240
step and

00:21:54,880 --> 00:21:59,919
cyprus is going to console everything

00:21:58,240 --> 00:22:02,000
everything that's related to this

00:21:59,919 --> 00:22:04,480
session another really interesting tool

00:22:02,000 --> 00:22:05,360
and obviously i can i can inspect the

00:22:04,480 --> 00:22:08,880
html

00:22:05,360 --> 00:22:12,960
of my login form and i don't know if you

00:22:08,880 --> 00:22:16,240
have already noticed but thanks to

00:22:12,960 --> 00:22:17,679
the test runner i have even time

00:22:16,240 --> 00:22:22,000
traveling for my

00:22:17,679 --> 00:22:25,039
test so if i stop or for example on this

00:22:22,000 --> 00:22:25,679
step as you can see on the right cyprus

00:22:25,039 --> 00:22:29,440
is

00:22:25,679 --> 00:22:31,760
showing me that before writing

00:22:29,440 --> 00:22:32,640
the before filling the password input

00:22:31,760 --> 00:22:34,880
field

00:22:32,640 --> 00:22:35,760
uh the default application looked like

00:22:34,880 --> 00:22:39,120
that and

00:22:35,760 --> 00:22:41,360
after feeling the input field

00:22:39,120 --> 00:22:42,159
looks like that i can even pin it okay

00:22:41,360 --> 00:22:45,520
and stop

00:22:42,159 --> 00:22:49,039
trying to understand how it looks after

00:22:45,520 --> 00:22:51,039
before this step and it's really useful

00:22:49,039 --> 00:22:54,159
because i can when something goes wrong

00:22:51,039 --> 00:22:58,480
i can even manually check

00:22:54,159 --> 00:22:58,480
what what went wrong because obviously

00:22:58,720 --> 00:23:02,960
when you use a browser automation tool

00:23:01,600 --> 00:23:05,360
the browser automation tools is

00:23:02,960 --> 00:23:07,280
really fast so a lot of times you are

00:23:05,360 --> 00:23:09,360
you can't understand

00:23:07,280 --> 00:23:10,480
you can't understand what's happening

00:23:09,360 --> 00:23:13,200
because the pace

00:23:10,480 --> 00:23:13,520
is too fast but in this case you can go

00:23:13,200 --> 00:23:16,799
back

00:23:13,520 --> 00:23:18,240
and understand what's happening and

00:23:16,799 --> 00:23:20,159
in this case for example you can

00:23:18,240 --> 00:23:23,679
obviously if i open

00:23:20,159 --> 00:23:26,880
the browser.tools i can inspect

00:23:23,679 --> 00:23:29,520
html at this particular step for example

00:23:26,880 --> 00:23:31,120
you are you can you can see that there

00:23:29,520 --> 00:23:34,080
is no

00:23:31,120 --> 00:23:34,400
things for the final feedback but if i

00:23:34,080 --> 00:23:38,159
go

00:23:34,400 --> 00:23:38,799
if i go here and i inspect the loading

00:23:38,159 --> 00:23:40,880
string

00:23:38,799 --> 00:23:42,080
i can see that now there is loading

00:23:40,880 --> 00:23:45,279
thing in the

00:23:42,080 --> 00:23:48,960
html so i'm inspecting the exact

00:23:45,279 --> 00:23:51,840
application here and there is

00:23:48,960 --> 00:23:53,600
one more step one more important thing

00:23:51,840 --> 00:23:56,960
about debugging

00:23:53,600 --> 00:23:59,200
that's framework specific devtools

00:23:56,960 --> 00:24:01,360
because i'm a react developer sometimes

00:23:59,200 --> 00:24:04,559
a lot of times i'm going to leverage the

00:24:01,360 --> 00:24:08,080
both the react and the redux step tools

00:24:04,559 --> 00:24:09,760
but how obviously

00:24:08,080 --> 00:24:11,679
when i when i write a phonetic

00:24:09,760 --> 00:24:15,279
application with a code of notification

00:24:11,679 --> 00:24:17,360
i can leverage the framework specific

00:24:15,279 --> 00:24:20,640
devtools inside the browser but

00:24:17,360 --> 00:24:21,520
how could i install install them in

00:24:20,640 --> 00:24:24,080
cyprus

00:24:21,520 --> 00:24:25,600
it's really easy because cyprus allows

00:24:24,080 --> 00:24:27,840
you to perform the test

00:24:25,600 --> 00:24:29,840
into electron that's the default choice

00:24:27,840 --> 00:24:33,760
but allows you to perform the test

00:24:29,840 --> 00:24:35,120
inside every browser installed on your

00:24:33,760 --> 00:24:38,240
machine that's

00:24:35,120 --> 00:24:39,679
uh it's compatible with chrome edge the

00:24:38,240 --> 00:24:42,880
edge the conversion

00:24:39,679 --> 00:24:46,720
and firefox so in this case i want to

00:24:42,880 --> 00:24:49,200
run the test on canary okay so

00:24:46,720 --> 00:24:50,320
finally i have installed canary on my

00:24:49,200 --> 00:24:53,919
local machine

00:24:50,320 --> 00:24:58,080
and since cyprus persist

00:24:53,919 --> 00:25:01,120
a chrome user i can install from the

00:24:58,080 --> 00:25:05,360
from the extension site both the react

00:25:01,120 --> 00:25:09,440
and the react and the reductive tools so

00:25:05,360 --> 00:25:12,000
so just to recap i have we have cypress

00:25:09,440 --> 00:25:12,960
that performs actions really really

00:25:12,000 --> 00:25:15,360
quick

00:25:12,960 --> 00:25:16,400
allows it allows me to debug my phone

00:25:15,360 --> 00:25:20,080
application as

00:25:16,400 --> 00:25:21,840
i'm used to do and allows me to re-run

00:25:20,080 --> 00:25:22,640
the test when i save the application

00:25:21,840 --> 00:25:26,320
when i save

00:25:22,640 --> 00:25:26,320
the source code and

00:25:26,840 --> 00:25:33,120
again cyprus is amazing

00:25:29,200 --> 00:25:36,000
you you need probably two or three weeks

00:25:33,120 --> 00:25:37,200
to uh to understand the semantics and

00:25:36,000 --> 00:25:40,000
how by

00:25:37,200 --> 00:25:41,200
cyprus works and then trust me you're

00:25:40,000 --> 00:25:44,559
going to use it

00:25:41,200 --> 00:25:48,799
not just as a testing tool but even as

00:25:44,559 --> 00:25:51,600
a development tool and again if you

00:25:48,799 --> 00:25:53,120
want to depend a topic please check out

00:25:51,600 --> 00:25:56,159
these two tests

00:25:53,120 --> 00:25:56,880
there are a lot of comments in them so

00:25:56,159 --> 00:25:59,360
you can

00:25:56,880 --> 00:26:00,159
you can share here that there are every

00:25:59,360 --> 00:26:03,200
single step

00:26:00,159 --> 00:26:06,640
is commented so you can understand them

00:26:03,200 --> 00:26:11,600
really the the best way

00:26:06,640 --> 00:26:14,480
and they are even all there

00:26:11,600 --> 00:26:17,679
all the tests for all the other cases of

00:26:14,480 --> 00:26:17,679
the login form together

00:26:18,159 --> 00:26:24,080
and more in general

00:26:21,440 --> 00:26:24,720
let's get on to the slides there is a

00:26:24,080 --> 00:26:28,320
lot

00:26:24,720 --> 00:26:31,039
more to tell about cyprus but again

00:26:28,320 --> 00:26:33,200
in these 40 minutes i want to

00:26:31,039 --> 00:26:34,400
concentrate of the most important

00:26:33,200 --> 00:26:36,880
features that allows you

00:26:34,400 --> 00:26:37,520
to improve your productivity not only

00:26:36,880 --> 00:26:41,120
your

00:26:37,520 --> 00:26:41,919
testing capabilities because developers

00:26:41,120 --> 00:26:44,720
tell me

00:26:41,919 --> 00:26:45,600
always the same that they know the

00:26:44,720 --> 00:26:48,960
importance

00:26:45,600 --> 00:26:52,240
of the confidence the test gave

00:26:48,960 --> 00:26:54,000
but they have no time okay so i want to

00:26:52,240 --> 00:26:57,039
i want to concentrate in this talk

00:26:54,000 --> 00:26:58,000
about how to reduce the the time needed

00:26:57,039 --> 00:27:00,080
for tests

00:26:58,000 --> 00:27:01,360
yeah just using them as a development

00:27:00,080 --> 00:27:03,760
tool and

00:27:01,360 --> 00:27:05,039
again please check the full test in

00:27:03,760 --> 00:27:08,960
order to understand

00:27:05,039 --> 00:27:09,440
a lot more a lot a lot more features

00:27:08,960 --> 00:27:12,799
about

00:27:09,440 --> 00:27:16,640
cyprus and if you are interested

00:27:12,799 --> 00:27:17,279
corey house shared a talk about the same

00:27:16,640 --> 00:27:19,760
topic

00:27:17,279 --> 00:27:20,880
about testing a productivity and he

00:27:19,760 --> 00:27:25,360
pushed

00:27:20,880 --> 00:27:26,480
the topic forward by by adding another

00:27:25,360 --> 00:27:28,799
development tool

00:27:26,480 --> 00:27:31,200
right in the front application and if

00:27:28,799 --> 00:27:34,640
you want to depend a topic please

00:27:31,200 --> 00:27:37,279
check out his talk and i

00:27:34,640 --> 00:27:38,880
like to i like to share feedback a

00:27:37,279 --> 00:27:42,559
friend of mine gave me

00:27:38,880 --> 00:27:45,360
that last year i

00:27:42,559 --> 00:27:46,240
i give them a course about cyprus and

00:27:45,360 --> 00:27:50,080
testing

00:27:46,240 --> 00:27:52,000
and he told me that his developers

00:27:50,080 --> 00:27:54,320
had never written a taste in their life

00:27:52,000 --> 00:27:56,399
but now they are case about cyprus

00:27:54,320 --> 00:27:57,760
they write a lot of tests and they use

00:27:56,399 --> 00:28:00,640
cyprus as

00:27:57,760 --> 00:28:02,159
a development tool like i'm sharing in

00:28:00,640 --> 00:28:05,120
this talk

00:28:02,159 --> 00:28:05,600
and in the slides you can find even lot

00:28:05,120 --> 00:28:08,320
of

00:28:05,600 --> 00:28:09,039
links to external resources there are

00:28:08,320 --> 00:28:12,320
some

00:28:09,039 --> 00:28:15,520
of my articles about cypress and some

00:28:12,320 --> 00:28:16,960
not mine and they are even really

00:28:15,520 --> 00:28:19,279
interesting courses and

00:28:16,960 --> 00:28:20,480
even some extending sources text and

00:28:19,279 --> 00:28:23,120
resources

00:28:20,480 --> 00:28:25,520
i split them from the standard articles

00:28:23,120 --> 00:28:30,240
because you need hours to read them but

00:28:25,520 --> 00:28:33,600
trust me they they they deserve the time

00:28:30,240 --> 00:28:35,679
and again i want to show you

00:28:33,600 --> 00:28:37,600
even that i have completed almost

00:28:35,679 --> 00:28:40,720
completed to write my

00:28:37,600 --> 00:28:41,760
book on github about ui testing testing

00:28:40,720 --> 00:28:43,840
best practices

00:28:41,760 --> 00:28:46,080
because when i started i started

00:28:43,840 --> 00:28:48,480
studying the topic i realized that

00:28:46,080 --> 00:28:49,360
there are a lot of contents on on the

00:28:48,480 --> 00:28:52,559
web about

00:28:49,360 --> 00:28:55,120
ui testing but you

00:28:52,559 --> 00:28:56,559
have to mix them and you have to apply a

00:28:55,120 --> 00:29:00,240
lot of best practices

00:28:56,559 --> 00:29:03,679
on different tools etc so that's why

00:29:00,240 --> 00:29:07,919
i prepared this book there are almost 20

00:29:03,679 --> 00:29:10,880
i'm 25 articles long articles about

00:29:07,919 --> 00:29:12,000
all the ui testing with some real life

00:29:10,880 --> 00:29:26,000
examples

00:29:12,000 --> 00:29:30,799
and thank you

00:29:26,000 --> 00:29:33,279
[Music]

00:29:30,799 --> 00:29:34,880
that was awesome thank you so much for

00:29:33,279 --> 00:29:36,480
that was really interesting i'm a huge

00:29:34,880 --> 00:29:38,240
fan of cyprus and

00:29:36,480 --> 00:29:40,640
that still was really useful and really

00:29:38,240 --> 00:29:43,360
beneficial so thank you so much

00:29:40,640 --> 00:29:43,360
thank you eddie

00:29:43,919 --> 00:29:48,000
so i'm sure we have lots of questions if

00:29:46,240 --> 00:29:49,520
not i know i have a few

00:29:48,000 --> 00:29:51,039
okay we've got some questions from the

00:29:49,520 --> 00:29:54,080
previous conversation so

00:29:51,039 --> 00:29:58,000
that means i get a chance to ask mine

00:29:54,080 --> 00:30:01,600
so let's uh let's go so can cyprus do

00:29:58,000 --> 00:30:04,880
multiple browser testing yet yep

00:30:01,600 --> 00:30:08,240
unfortunately cyprus is limited to

00:30:04,880 --> 00:30:08,559
chrome firefox and edge but for edge i

00:30:08,240 --> 00:30:11,200
mean

00:30:08,559 --> 00:30:12,880
only the conversion of edge so not the

00:30:11,200 --> 00:30:16,559
all edge versions

00:30:12,880 --> 00:30:19,840
and it's uh it's a choice

00:30:16,559 --> 00:30:23,039
it's a choice of the team because

00:30:19,840 --> 00:30:26,960
usually when someone approaches

00:30:23,039 --> 00:30:30,159
ui testing obviously tries to test

00:30:26,960 --> 00:30:32,720
everything on every browser but then he

00:30:30,159 --> 00:30:35,360
realizes he or she realizes that

00:30:32,720 --> 00:30:36,720
testing everything on every browser is

00:30:35,360 --> 00:30:39,760
counterproductive

00:30:36,720 --> 00:30:40,399
and usually one of the best practices

00:30:39,760 --> 00:30:43,360
when you

00:30:40,399 --> 00:30:44,240
have when you approach this world is to

00:30:43,360 --> 00:30:46,880
choose just

00:30:44,240 --> 00:30:47,360
one reference browser because most of

00:30:46,880 --> 00:30:49,600
the time

00:30:47,360 --> 00:30:50,559
when you want to test on there are a lot

00:30:49,600 --> 00:30:53,440
of scenarios

00:30:50,559 --> 00:30:54,399
but 80 of the times when you want to

00:30:53,440 --> 00:30:57,279
test everything on

00:30:54,399 --> 00:30:57,919
each browser is that because you want to

00:30:57,279 --> 00:31:00,159
be sure

00:30:57,919 --> 00:31:01,039
that all the css details of your

00:31:00,159 --> 00:31:04,399
application

00:31:01,039 --> 00:31:06,159
is fine on every browser but usually

00:31:04,399 --> 00:31:07,039
because of webpack and a lot of useful

00:31:06,159 --> 00:31:09,679
plugins

00:31:07,039 --> 00:31:10,799
the javascript part of the project works

00:31:09,679 --> 00:31:14,240
the same on

00:31:10,799 --> 00:31:16,399
each browser so uh if you

00:31:14,240 --> 00:31:18,480
if you are approaching this world the ui

00:31:16,399 --> 00:31:20,640
testing world please choose a browser

00:31:18,480 --> 00:31:22,559
it could be chrome firefox or whatever

00:31:20,640 --> 00:31:26,000
you want but choose just one browser

00:31:22,559 --> 00:31:30,080
and leverage an external tool like

00:31:26,000 --> 00:31:33,279
pc or aptos in order to test your css

00:31:30,080 --> 00:31:33,519
on each browser so you run both locally

00:31:33,279 --> 00:31:36,480
and

00:31:33,519 --> 00:31:37,840
on your ci the java the javascript path

00:31:36,480 --> 00:31:42,240
the functional part of the test

00:31:37,840 --> 00:31:45,760
just on a single browser and

00:31:42,240 --> 00:31:49,360
all the css tests on external tools

00:31:45,760 --> 00:31:53,200
that has a lot of power in their servers

00:31:49,360 --> 00:31:55,039
and a lot of a lot of optimizations

00:31:53,200 --> 00:31:56,640
that's really great advice to separate

00:31:55,039 --> 00:31:58,240
it so you're saying cyprus is more

00:31:56,640 --> 00:32:00,080
focusing on the functional

00:31:58,240 --> 00:32:01,600
yeah and there are other tools that are

00:32:00,080 --> 00:32:02,880
focused more on the styling

00:32:01,600 --> 00:32:04,720
could you just list off some other

00:32:02,880 --> 00:32:06,320
example of those other platforms or

00:32:04,720 --> 00:32:09,760
tools that you just mentioned

00:32:06,320 --> 00:32:13,039
yep uh for the necessary

00:32:09,760 --> 00:32:15,679
i suggest to use uh probably

00:32:13,039 --> 00:32:16,320
percy and appletools are the most mature

00:32:15,679 --> 00:32:17,919
tools

00:32:16,320 --> 00:32:19,440
but there are a lot of different

00:32:17,919 --> 00:32:23,279
platforms and usually

00:32:19,440 --> 00:32:25,519
all these platforms have so have

00:32:23,279 --> 00:32:26,640
specialized plugins in order to

00:32:25,519 --> 00:32:28,720
integrate with

00:32:26,640 --> 00:32:30,720
cypress so you can launch your

00:32:28,720 --> 00:32:33,360
functional test with cypress and

00:32:30,720 --> 00:32:34,159
at a specific point you can launch percy

00:32:33,360 --> 00:32:36,799
aptitus

00:32:34,159 --> 00:32:37,440
or chromatic or other tools in order to

00:32:36,799 --> 00:32:40,960
get

00:32:37,440 --> 00:32:43,440
the css test at this point and usually

00:32:40,960 --> 00:32:45,840
again these tools like applicators and

00:32:43,440 --> 00:32:48,080
percy have plugins for cypress for test

00:32:45,840 --> 00:32:51,360
cafe for selenium for puppeteer and

00:32:48,080 --> 00:32:55,440
all the tools that you usually use to

00:32:51,360 --> 00:32:57,279
in order to run your ui tests

00:32:55,440 --> 00:32:58,960
awesome okay i'm going to leave my

00:32:57,279 --> 00:33:00,880
question to the side now we've got some

00:32:58,960 --> 00:33:02,080
great questions in the in the in the q a

00:33:00,880 --> 00:33:05,840
section so

00:33:02,080 --> 00:33:06,399
um how effectively splitting tests

00:33:05,840 --> 00:33:08,559
tonight

00:33:06,399 --> 00:33:10,880
how uh how we are actually effectively

00:33:08,559 --> 00:33:13,760
splitting our test scenarios

00:33:10,880 --> 00:33:15,039
like how can we use a login for multiple

00:33:13,760 --> 00:33:17,679
tests

00:33:15,039 --> 00:33:18,799
in more robust and composable way yes i

00:33:17,679 --> 00:33:19,919
think this is talking more about

00:33:18,799 --> 00:33:23,440
abstraction

00:33:19,919 --> 00:33:26,960
yep um i am i didn't have enough

00:33:23,440 --> 00:33:28,240
enough time with the talk but there is

00:33:26,960 --> 00:33:32,320
an approach that

00:33:28,240 --> 00:33:35,279
cyprus calls app actions that's um

00:33:32,320 --> 00:33:36,720
cypress suggests you since cyprus can

00:33:35,279 --> 00:33:38,559
communicate with your application

00:33:36,720 --> 00:33:40,320
because both cypress and c

00:33:38,559 --> 00:33:42,640
and your application works in the same

00:33:40,320 --> 00:33:44,320
brother cyprus suggests

00:33:42,640 --> 00:33:47,360
you have a lot of solutions but the most

00:33:44,320 --> 00:33:50,720
popular ones are

00:33:47,360 --> 00:33:54,480
the the most selenium one

00:33:50,720 --> 00:33:56,799
is to perform ajax request

00:33:54,480 --> 00:33:58,240
directly from your node.js servers

00:33:56,799 --> 00:34:00,240
because remember that

00:33:58,240 --> 00:34:01,279
you control a browser you control your

00:34:00,240 --> 00:34:04,960
application and you

00:34:01,279 --> 00:34:07,440
have even a node.js server to work with

00:34:04,960 --> 00:34:09,359
so you can perform ajax requests

00:34:07,440 --> 00:34:10,639
directly from node in order for example

00:34:09,359 --> 00:34:13,440
to log in the user

00:34:10,639 --> 00:34:14,879
but the approach that i prefer it

00:34:13,440 --> 00:34:17,520
depends on the scenarios but

00:34:14,879 --> 00:34:17,919
before this approach you now you expose

00:34:17,520 --> 00:34:20,079
some

00:34:17,919 --> 00:34:21,119
shortcuts from your photo for your

00:34:20,079 --> 00:34:24,079
frontal application

00:34:21,119 --> 00:34:24,879
just for example your login react

00:34:24,079 --> 00:34:28,639
component

00:34:24,879 --> 00:34:29,679
could expose globally only when it runs

00:34:28,639 --> 00:34:33,359
inside cyprus

00:34:29,679 --> 00:34:35,839
it could expose a login function that's

00:34:33,359 --> 00:34:37,119
that's the same function that login

00:34:35,839 --> 00:34:40,480
button will call

00:34:37,119 --> 00:34:43,440
so from cyprus you can read this global

00:34:40,480 --> 00:34:45,119
function and call it directly pasting

00:34:43,440 --> 00:34:48,320
the username and the password

00:34:45,119 --> 00:34:51,599
so you you can leverage

00:34:48,320 --> 00:34:53,679
your frontal application at all but

00:34:51,599 --> 00:34:54,639
without interacting with the input

00:34:53,679 --> 00:34:58,000
elements but

00:34:54,639 --> 00:35:00,079
but just calling directly the login

00:34:58,000 --> 00:35:02,720
function that performs they just request

00:35:00,079 --> 00:35:03,440
and calls the server and the application

00:35:02,720 --> 00:35:06,640
is uh

00:35:03,440 --> 00:35:06,640
is obviously logged in

00:35:07,359 --> 00:35:11,040
okay awesome we've got loads more

00:35:08,880 --> 00:35:14,000
questions coming in so

00:35:11,040 --> 00:35:14,800
let's have a look can cyprus uh do

00:35:14,000 --> 00:35:17,119
screenshot

00:35:14,800 --> 00:35:18,400
testing for breaking css changes we have

00:35:17,119 --> 00:35:20,079
touched on this already

00:35:18,400 --> 00:35:22,240
but we'll just spend a short while yes

00:35:20,079 --> 00:35:22,800
but it's a good question because a lot

00:35:22,240 --> 00:35:26,320
of times

00:35:22,800 --> 00:35:30,000
we need css testing so um

00:35:26,320 --> 00:35:33,359
my if you want i think that

00:35:30,000 --> 00:35:37,520
there is not a middle area between

00:35:33,359 --> 00:35:41,040
a low level poor level

00:35:37,520 --> 00:35:43,839
css test and professional css

00:35:41,040 --> 00:35:44,720
well what i mean if you want just to be

00:35:43,839 --> 00:35:46,720
sure that

00:35:44,720 --> 00:35:48,160
more or less your application looks the

00:35:46,720 --> 00:35:50,800
same you could

00:35:48,160 --> 00:35:51,359
leverage level some plug-in some cypress

00:35:50,800 --> 00:35:52,960
plugins

00:35:51,359 --> 00:35:55,200
in order to get the screenshot and

00:35:52,960 --> 00:35:58,400
compare the screenshot but usually

00:35:55,200 --> 00:36:01,520
uh there are a lot of

00:35:58,400 --> 00:36:03,839
subtle changes in the css that

00:36:01,520 --> 00:36:04,720
could be for example the curves of the

00:36:03,839 --> 00:36:08,160
font

00:36:04,720 --> 00:36:09,200
or how a specific photo a specific color

00:36:08,160 --> 00:36:13,359
is rendered

00:36:09,200 --> 00:36:15,839
and sometimes this kind of differences

00:36:13,359 --> 00:36:16,720
work completely break back to your test

00:36:15,839 --> 00:36:20,720
because

00:36:16,720 --> 00:36:21,520
usually uh how the css the css tests are

00:36:20,720 --> 00:36:24,320
performed but

00:36:21,520 --> 00:36:24,880
are performed by comparing pixel by

00:36:24,320 --> 00:36:28,240
pixel

00:36:24,880 --> 00:36:31,599
the screenshot of your image so if

00:36:28,240 --> 00:36:35,520
for example if you have a text that has

00:36:31,599 --> 00:36:37,200
a margin top of 10 or 11 pixel could

00:36:35,520 --> 00:36:37,760
completely break your test for example

00:36:37,200 --> 00:36:39,520
but

00:36:37,760 --> 00:36:40,800
it doesn't break your test from a

00:36:39,520 --> 00:36:42,640
fraction point of view

00:36:40,800 --> 00:36:44,560
and the scenes and there are a lot of

00:36:42,640 --> 00:36:46,480
change differences between for example

00:36:44,560 --> 00:36:48,160
retinal displays and not retinal

00:36:46,480 --> 00:36:52,400
displays so

00:36:48,160 --> 00:36:55,839
if you want to run poor level css tests

00:36:52,400 --> 00:36:56,960
go with some cypress plugins but i

00:36:55,839 --> 00:36:58,800
suggest you

00:36:56,960 --> 00:37:00,480
if you want to really be sure about the

00:36:58,800 --> 00:37:03,680
css part of your project

00:37:00,480 --> 00:37:06,880
go for professional services because

00:37:03,680 --> 00:37:08,480
even remember that if you perform css

00:37:06,880 --> 00:37:11,760
tests on your machine

00:37:08,480 --> 00:37:12,960
you have to run the screenshot and the

00:37:11,760 --> 00:37:15,839
schedule comparison

00:37:12,960 --> 00:37:16,640
right on your local machine and the css

00:37:15,839 --> 00:37:20,400
tests

00:37:16,640 --> 00:37:22,320
are the slowest one so please use prc

00:37:20,400 --> 00:37:23,200
and applicators because they are super

00:37:22,320 --> 00:37:26,400
fast

00:37:23,200 --> 00:37:29,359
if you if you if you want to

00:37:26,400 --> 00:37:30,720
to double check what uh what i'm what

00:37:29,359 --> 00:37:32,560
i'm saying

00:37:30,720 --> 00:37:34,079
go with screenshot testing on your

00:37:32,560 --> 00:37:37,119
machine and probably

00:37:34,079 --> 00:37:37,440
you you come back where you come back to

00:37:37,119 --> 00:37:40,880
me

00:37:37,440 --> 00:37:40,880
telling that i'm right

00:37:41,520 --> 00:37:44,640
okay yeah that makes sense we only got a

00:37:43,359 --> 00:37:46,480
couple of minutes left let me try and

00:37:44,640 --> 00:37:48,880
pick out a couple more questions

00:37:46,480 --> 00:37:51,200
uh do you work with your qas at all in

00:37:48,880 --> 00:37:54,720
the maintaining creating ui tests

00:37:51,200 --> 00:37:56,400
okay obviously what what i talked about

00:37:54,720 --> 00:37:58,880
in my talk is about

00:37:56,400 --> 00:38:01,440
ui tests for front-end developers

00:37:58,880 --> 00:38:01,440
because

00:38:01,680 --> 00:38:06,160
qa qa teams could work a different way

00:38:05,280 --> 00:38:09,839
for example

00:38:06,160 --> 00:38:10,720
lqa teams are usually it's not fall but

00:38:09,839 --> 00:38:14,079
usually

00:38:10,720 --> 00:38:15,839
they are not so prone to

00:38:14,079 --> 00:38:18,400
learn something new like a front-end

00:38:15,839 --> 00:38:21,440
developer is used to

00:38:18,400 --> 00:38:23,760
so for them

00:38:21,440 --> 00:38:25,520
the transition between from selenium to

00:38:23,760 --> 00:38:28,160
cypher cyprus could be

00:38:25,520 --> 00:38:29,440
really hard but obviously i know even a

00:38:28,160 --> 00:38:32,480
lot of

00:38:29,440 --> 00:38:34,320
a lot of qa teams and qa developers that

00:38:32,480 --> 00:38:35,040
use cypress because remember that more

00:38:34,320 --> 00:38:37,920
or less

00:38:35,040 --> 00:38:39,520
the cypress user are 50 percent frontend

00:38:37,920 --> 00:38:43,119
developers and 50

00:38:39,520 --> 00:38:43,119
50 qa developers

00:38:43,920 --> 00:38:47,280
yeah it's good to have that to bridge

00:38:45,440 --> 00:38:49,520
that gap between that if we don't want

00:38:47,280 --> 00:38:49,520
silence

00:38:49,839 --> 00:38:53,760
because different developers just want

00:38:51,599 --> 00:38:56,800
to be sure that everything works

00:38:53,760 --> 00:38:59,839
while the qa developer want to be sure

00:38:56,800 --> 00:39:01,200
that everything even if unexpected works

00:38:59,839 --> 00:39:04,560
so defender developers

00:39:01,200 --> 00:39:07,599
run checks not tests but checks

00:39:04,560 --> 00:39:10,560
and the qa developer runs a test

00:39:07,599 --> 00:39:12,160
in and i mean for test i mean

00:39:10,560 --> 00:39:14,880
exploratory testing so

00:39:12,160 --> 00:39:15,599
trying to explore different ways or

00:39:14,880 --> 00:39:16,960
interact

00:39:15,599 --> 00:39:18,640
of interacting with applications in

00:39:16,960 --> 00:39:22,240
order to break them

00:39:18,640 --> 00:39:24,079
like it that you're right that makes

00:39:22,240 --> 00:39:26,640
sense it's different points of view

00:39:24,079 --> 00:39:27,839
yes developer wants to check it works

00:39:26,640 --> 00:39:29,359
and then the tester wants to kind of

00:39:27,839 --> 00:39:31,119
check it still works when they try and i

00:39:29,359 --> 00:39:31,920
suppose break it and do more boundary

00:39:31,119 --> 00:39:33,520
conditions

00:39:31,920 --> 00:39:35,680
let's see if we can squeeze in one more

00:39:33,520 --> 00:39:37,359
question and then how the time's doing

00:39:35,680 --> 00:39:39,440
uh what is the best way to start

00:39:37,359 --> 00:39:40,560
learning cyprus and they've added from a

00:39:39,440 --> 00:39:42,640
react developer

00:39:40,560 --> 00:39:43,599
but i think it's probably for any

00:39:42,640 --> 00:39:45,359
defense yep

00:39:43,599 --> 00:39:46,880
simply start with start from the

00:39:45,359 --> 00:39:49,599
documentation and

00:39:46,880 --> 00:39:50,960
take a look the documentation is i think

00:39:49,599 --> 00:39:53,680
that is perfect is

00:39:50,960 --> 00:39:54,880
full full of examples there are a lot of

00:39:53,680 --> 00:39:58,160
recipes on github

00:39:54,880 --> 00:40:01,440
on the cypress profile and

00:39:58,160 --> 00:40:02,960
you you can be sure that everything that

00:40:01,440 --> 00:40:05,200
cypress works for you

00:40:02,960 --> 00:40:06,240
even because on the documentation page

00:40:05,200 --> 00:40:09,359
they share

00:40:06,240 --> 00:40:12,640
even what are the cypress you couldn't

00:40:09,359 --> 00:40:14,640
cyprus limitation and so you have a

00:40:12,640 --> 00:40:15,040
complete scenario of cyprus directly

00:40:14,640 --> 00:40:18,079
from

00:40:15,040 --> 00:40:18,960
their documentation and um and then

00:40:18,079 --> 00:40:21,760
stand for the

00:40:18,960 --> 00:40:22,400
recommendation and go on because cyprus

00:40:21,760 --> 00:40:26,640
is really

00:40:22,400 --> 00:40:29,520
really really easy you you need probably

00:40:26,640 --> 00:40:31,200
some days probably one or two weeks in

00:40:29,520 --> 00:40:35,040
order to

00:40:31,200 --> 00:40:37,440
to fully understand how how

00:40:35,040 --> 00:40:38,400
how's the semantics and how it works and

00:40:37,440 --> 00:40:41,520
how you could

00:40:38,400 --> 00:40:43,359
change different comments but then you

00:40:41,520 --> 00:40:45,520
are okay cyprus is really

00:40:43,359 --> 00:40:48,400
really easy and uh improves your

00:40:45,520 --> 00:40:48,400
productivity a lot

00:40:49,920 --> 00:40:53,280
awesome okay it looks like we have been

00:40:51,520 --> 00:40:54,960
given a couple more minutes uh the talks

00:40:53,280 --> 00:40:56,720
have started back on youtube

00:40:54,960 --> 00:40:58,079
so uh people can then choose to to go

00:40:56,720 --> 00:41:00,480
watch the talk or stay here for

00:40:58,079 --> 00:41:01,440
any questions so let's have a look

00:41:00,480 --> 00:41:03,760
someone says

00:41:01,440 --> 00:41:05,839
they've learning unit testing in boot

00:41:03,760 --> 00:41:08,079
camp but i feel lack of confidence in

00:41:05,839 --> 00:41:09,760
unit testing what would be the best way

00:41:08,079 --> 00:41:11,599
for a beginner to learn

00:41:09,760 --> 00:41:12,800
uh creating ui tests i know you've

00:41:11,599 --> 00:41:14,480
touched on that just now

00:41:12,800 --> 00:41:16,560
i don't know if you want to add any more

00:41:14,480 --> 00:41:17,440
to it from a beginner's point of view or

00:41:16,560 --> 00:41:19,280
if it would be the same

00:41:17,440 --> 00:41:21,760
there is even a talk of mine on the same

00:41:19,280 --> 00:41:25,200
topic because i think that

00:41:21,760 --> 00:41:27,280
the testing world is amazing but if you

00:41:25,200 --> 00:41:28,960
if you are a newbie and you want to

00:41:27,280 --> 00:41:30,240
enter the test world and your frontal

00:41:28,960 --> 00:41:33,599
developer obviously

00:41:30,240 --> 00:41:36,000
i think that the good

00:41:33,599 --> 00:41:37,760
the best way is to approach the testing

00:41:36,000 --> 00:41:38,720
world from the end to intestine

00:41:37,760 --> 00:41:42,160
perspective

00:41:38,720 --> 00:41:44,880
because you need

00:41:42,160 --> 00:41:45,760
you need unit testing in medium and big

00:41:44,880 --> 00:41:47,839
applications

00:41:45,760 --> 00:41:49,440
but not in small application you need

00:41:47,839 --> 00:41:50,640
integration testing probably in our

00:41:49,440 --> 00:41:52,160
application in all

00:41:50,640 --> 00:41:53,760
applications and you need end-to-end

00:41:52,160 --> 00:41:57,119
testing in applications in

00:41:53,760 --> 00:41:59,920
all applications at all so the best way

00:41:57,119 --> 00:42:01,440
is to start from end contesting in my

00:41:59,920 --> 00:42:03,599
opinion because

00:42:01,440 --> 00:42:04,560
from a front-end developer perspective

00:42:03,599 --> 00:42:06,880
it's

00:42:04,560 --> 00:42:08,480
end-to-end testing is pretty easy to

00:42:06,880 --> 00:42:11,920
understand because you are just

00:42:08,480 --> 00:42:14,560
automating the interaction with the ui

00:42:11,920 --> 00:42:15,119
and even if you are building the new

00:42:14,560 --> 00:42:16,880
facebook

00:42:15,119 --> 00:42:18,560
or if you are building just a landing

00:42:16,880 --> 00:42:21,200
page you need

00:42:18,560 --> 00:42:21,760
at least one and one test in order to be

00:42:21,200 --> 00:42:25,200
sure that

00:42:21,760 --> 00:42:26,160
everything works and i think that cyprus

00:42:25,200 --> 00:42:28,800
is the right tool

00:42:26,160 --> 00:42:29,200
because when you enter this in the world

00:42:28,800 --> 00:42:31,359
the

00:42:29,200 --> 00:42:32,480
the testing world through the entrance

00:42:31,359 --> 00:42:35,280
testing you

00:42:32,480 --> 00:42:36,640
realize that end-to-end tests is not

00:42:35,280 --> 00:42:39,520
end-to-end tests are not

00:42:36,640 --> 00:42:40,079
are not perfect for every kind of test

00:42:39,520 --> 00:42:43,839
but

00:42:40,079 --> 00:42:44,319
again you have just entered the testing

00:42:43,839 --> 00:42:47,520
world

00:42:44,319 --> 00:42:51,200
and you when you realize how

00:42:47,520 --> 00:42:52,240
uh how much the confidence is from the

00:42:51,200 --> 00:42:56,240
tests

00:42:52,240 --> 00:42:59,920
you using test is like using it

00:42:56,240 --> 00:43:02,400
you can't go back at all so if you

00:42:59,920 --> 00:43:03,440
i think that for a newbie is and for a

00:43:02,400 --> 00:43:06,400
front-end developer

00:43:03,440 --> 00:43:06,880
is quite hard to enter the testing of

00:43:06,400 --> 00:43:10,240
world

00:43:06,880 --> 00:43:13,520
with unit tests because they are

00:43:10,240 --> 00:43:14,240
quite abstract and they give you little

00:43:13,520 --> 00:43:16,880
confidence

00:43:14,240 --> 00:43:18,240
while if you went if you entered the

00:43:16,880 --> 00:43:19,119
testing world from the endpoint testing

00:43:18,240 --> 00:43:22,480
perspective

00:43:19,119 --> 00:43:25,040
you get almost all the confidence with

00:43:22,480 --> 00:43:26,880
a few tests and it's quite easy to be

00:43:25,040 --> 00:43:28,880
understood because you just

00:43:26,880 --> 00:43:30,000
you are just automating the interaction

00:43:28,880 --> 00:43:32,720
with the ui

00:43:30,000 --> 00:43:34,079
what a fantastic developer is used to

00:43:32,720 --> 00:43:36,960
light in the browser

00:43:34,079 --> 00:43:38,640
so please start from the entrance in

00:43:36,960 --> 00:43:41,599
world and please take a look

00:43:38,640 --> 00:43:42,800
at the resources that i have shared in

00:43:41,599 --> 00:43:45,200
the slides

00:43:42,800 --> 00:43:46,319
because there are even a lot of links

00:43:45,200 --> 00:43:48,640
for newbies

00:43:46,319 --> 00:43:49,599
and even an article of mine about the

00:43:48,640 --> 00:43:52,160
same topic and

00:43:49,599 --> 00:43:54,160
why i suggest to enter the testing world

00:43:52,160 --> 00:43:57,119
from the end-to-end testing perspective

00:43:54,160 --> 00:43:59,599
so sorry if i experience if i spoken to

00:43:57,119 --> 00:43:59,599
so long

00:44:00,160 --> 00:44:03,520
no no i think you extend why you explain

00:44:01,839 --> 00:44:04,960
that really well i think it's good and i

00:44:03,520 --> 00:44:07,359
think it's good sometimes repeat the

00:44:04,960 --> 00:44:08,000
the important part for people to to

00:44:07,359 --> 00:44:09,760
realize that

00:44:08,000 --> 00:44:11,520
and people shouldn't be scared of

00:44:09,760 --> 00:44:12,000
end-to-end testing i think like you said

00:44:11,520 --> 00:44:15,359
it's a goo

00:44:12,000 --> 00:44:18,400
the better place uh yes i'm not

00:44:15,359 --> 00:44:21,680
against i'm not against unit testing

00:44:18,400 --> 00:44:23,359
but i just want to be sure that

00:44:21,680 --> 00:44:25,200
you could enter the testing world

00:44:23,359 --> 00:44:27,040
successfully because a lot of

00:44:25,200 --> 00:44:29,040
frontend developers enter the testing

00:44:27,040 --> 00:44:32,319
world but without success

00:44:29,040 --> 00:44:35,359
and so they think that testing is odd is

00:44:32,319 --> 00:44:36,160
impossible is useless but i think that

00:44:35,359 --> 00:44:38,000
because

00:44:36,160 --> 00:44:39,200
entering the testing world from a unit

00:44:38,000 --> 00:44:41,839
test perspective

00:44:39,200 --> 00:44:41,839
is hard

00:44:43,760 --> 00:44:48,720
awesome okay so we've got i was just

00:44:46,880 --> 00:44:50,079
one more definitely voted up higher than

00:44:48,720 --> 00:44:53,680
the rest let's have a look

00:44:50,079 --> 00:44:55,200
can cyprus do performance testing uh

00:44:53,680 --> 00:44:56,800
it depends what what do you mean for

00:44:55,200 --> 00:45:00,240
performance testing

00:44:56,800 --> 00:45:00,880
uh if i that's that's all they wrote so

00:45:00,240 --> 00:45:03,520
i don't know

00:45:00,880 --> 00:45:04,720
i i i have some answers to this myself

00:45:03,520 --> 00:45:05,359
but we're interested in know if there's

00:45:04,720 --> 00:45:06,880
any

00:45:05,359 --> 00:45:09,839
plug-in i mean you're right there's

00:45:06,880 --> 00:45:09,839
different types of yes

00:45:09,920 --> 00:45:16,960
for example tech details like

00:45:13,920 --> 00:45:20,560
page loading or technic days like

00:45:16,960 --> 00:45:24,160
server responses save responses time

00:45:20,560 --> 00:45:27,920
or i think that these

00:45:24,160 --> 00:45:32,079
um you you can at all you can

00:45:27,920 --> 00:45:33,040
but i call them monitoring tests what

00:45:32,079 --> 00:45:36,240
they mean

00:45:33,040 --> 00:45:37,680
usually a ui test is performed from the

00:45:36,240 --> 00:45:39,680
perspective of the user

00:45:37,680 --> 00:45:42,160
because you want to be sure that the

00:45:39,680 --> 00:45:46,240
user can use your ui

00:45:42,160 --> 00:45:48,240
the way you have designed and

00:45:46,240 --> 00:45:49,760
the user doesn't care about technical

00:45:48,240 --> 00:45:51,839
details okay

00:45:49,760 --> 00:45:53,359
the user wants to be sure that the page

00:45:51,839 --> 00:45:56,160
works nothing more

00:45:53,359 --> 00:45:58,000
and the user doesn't doesn't understand

00:45:56,160 --> 00:45:59,920
if an ajax call doesn't work

00:45:58,000 --> 00:46:01,599
the user just understand if the page

00:45:59,920 --> 00:46:05,200
works or not at all

00:46:01,599 --> 00:46:08,400
and so i think that there are a lot

00:46:05,200 --> 00:46:11,599
of technical dates that must be checked

00:46:08,400 --> 00:46:14,480
uh for example in the past in uh

00:46:11,599 --> 00:46:15,440
on a website of mine i have checked a

00:46:14,480 --> 00:46:18,480
lot of details

00:46:15,440 --> 00:46:19,599
like for example the compression served

00:46:18,480 --> 00:46:22,000
by the server

00:46:19,599 --> 00:46:23,520
or the kind of fonts served by the

00:46:22,000 --> 00:46:27,599
server of the waked

00:46:23,520 --> 00:46:30,480
or the javascript this is javascript

00:46:27,599 --> 00:46:31,280
server from the server but i call them

00:46:30,480 --> 00:46:34,319
um

00:46:31,280 --> 00:46:35,599
i call them monitoring tests because you

00:46:34,319 --> 00:46:38,240
are just monitoring

00:46:35,599 --> 00:46:38,960
uh technical details but again yes you

00:46:38,240 --> 00:46:43,200
can

00:46:38,960 --> 00:46:45,280
uh sometimes the only performance test

00:46:43,200 --> 00:46:46,240
test that i think that cyprus is not

00:46:45,280 --> 00:46:49,599
good for

00:46:46,240 --> 00:46:52,160
is performance in terms or

00:46:49,599 --> 00:46:52,640
frame per seconds in the page because

00:46:52,160 --> 00:46:56,480
since

00:46:52,640 --> 00:46:58,880
cypress works on uh

00:46:56,480 --> 00:47:00,480
what works on your phone application

00:46:58,880 --> 00:47:02,960
inside the same browsers

00:47:00,480 --> 00:47:05,599
when you run some cypress commands

00:47:02,960 --> 00:47:08,720
inside the browser the browsers get slow

00:47:05,599 --> 00:47:09,599
and so for example in the past i tried

00:47:08,720 --> 00:47:12,240
to

00:47:09,599 --> 00:47:12,800
measure and to test the frame per

00:47:12,240 --> 00:47:16,960
seconds

00:47:12,800 --> 00:47:20,480
of a virtual aviator scroll list

00:47:16,960 --> 00:47:23,040
but it was quite hard because

00:47:20,480 --> 00:47:23,760
every cypress command obviously freezes

00:47:23,040 --> 00:47:26,720
there

00:47:23,760 --> 00:47:27,200
the browser for tenths of a second so if

00:47:26,720 --> 00:47:29,119
you

00:47:27,200 --> 00:47:31,839
if you are measuring that your score

00:47:29,119 --> 00:47:35,200
list works at 60 frames per second

00:47:31,839 --> 00:47:39,200
just type as commands uh move

00:47:35,200 --> 00:47:41,839
the frame per second from 60 to 20 from

00:47:39,200 --> 00:47:42,319
in a for a couple of tens of seconds but

00:47:41,839 --> 00:47:45,839
that's

00:47:42,319 --> 00:47:48,960
what make your test feelings so

00:47:45,839 --> 00:47:52,079
performance tests of the

00:47:48,960 --> 00:47:53,920
ui inside the browsers i think it's

00:47:52,079 --> 00:47:55,839
not cypress a good tool i think that in

00:47:53,920 --> 00:47:57,680
this case we could use puppeteer for

00:47:55,839 --> 00:47:59,680
example because puppet works

00:47:57,680 --> 00:48:01,440
not inside the browser but works on a

00:47:59,680 --> 00:48:03,440
node.js server that communicates

00:48:01,440 --> 00:48:07,599
directly with the browser

00:48:03,440 --> 00:48:09,359
but not inside the browser itself sure

00:48:07,599 --> 00:48:11,119
that makes sense okay we've been told to

00:48:09,359 --> 00:48:12,160
wrap it up so all the questions have

00:48:11,119 --> 00:48:14,640
been removed

00:48:12,160 --> 00:48:15,520
uh if stefano if you can pick a table

00:48:14,640 --> 00:48:17,119
when people can go

00:48:15,520 --> 00:48:19,200
and ask their questions for you at a

00:48:17,119 --> 00:48:21,680
table so if you can jump on the table

00:48:19,200 --> 00:48:23,119
um then i think i'm just chatting to you

00:48:21,680 --> 00:48:24,400
on table one so then if you go back to

00:48:23,119 --> 00:48:26,960
table one and people can

00:48:24,400 --> 00:48:28,000
join you there and uh thank you so much

00:48:26,960 --> 00:48:29,760
for an awesome talk

00:48:28,000 --> 00:48:31,599
awesome q a i know we could have spoken

00:48:29,760 --> 00:48:35,839
for another hour this was brilliant and

00:48:31,599 --> 00:48:35,839
i look forward to catching thank you

00:48:35,980 --> 00:48:39,099

YouTube URL: https://www.youtube.com/watch?v=9DVZOAYUQ1M


