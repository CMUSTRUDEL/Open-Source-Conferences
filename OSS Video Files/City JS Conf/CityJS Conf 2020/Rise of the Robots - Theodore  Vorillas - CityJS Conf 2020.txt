Title: Rise of the Robots - Theodore  Vorillas - CityJS Conf 2020
Publication date: 2020-10-03
Playlist: CityJS Conf 2020
Description: 
	Robots are used for industrial automation for more than 50 years. Yet in the last years, lots of open-source designs have been released. Also, modern JavaScript frameworks allow us to create rich and creative applications using top of the notch IoT solutions. During this talk, the attendees can witness the creative process of prototyping a robot used for mobile end to end testing, a robot that automates testing on real devices. Finally, more ideas and possibilities about the future of mixing IoT along with JavaScript and commonly used web technologies will be thoroughly presented.


Bio:
Theodore is a software engineer at Workable in Athens, currently working with a large scale JavaScript codebase.  He recently started researching A11Y and he realized he could combine IoT and JavaScript to help visually impaired people.  He loves FOSS, coffee, drones, woodworking and DIYing all the things.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:18,100 --> 00:00:22,640
[Music]

00:00:21,920 --> 00:00:27,039
okay

00:00:22,640 --> 00:00:27,039
cool so off we go

00:00:27,119 --> 00:00:30,640
okay for those of you that don't know

00:00:30,240 --> 00:00:35,200
who this

00:00:30,640 --> 00:00:37,440
gentleman is um this is sakasimo

00:00:35,200 --> 00:00:38,480
mr asimov has been an infamous science

00:00:37,440 --> 00:00:41,360
fiction author

00:00:38,480 --> 00:00:43,040
who wrote more than 200 books during his

00:00:41,360 --> 00:00:45,360
career

00:00:43,040 --> 00:00:46,320
he wore his work has saved the science

00:00:45,360 --> 00:00:48,320
fiction film

00:00:46,320 --> 00:00:50,719
as we know it today inspired moves like

00:00:48,320 --> 00:00:53,600
the terminator in the matrix

00:00:50,719 --> 00:00:54,559
and through his books he envisioned and

00:00:53,600 --> 00:00:56,840
predicted the future

00:00:54,559 --> 00:00:58,399
of the 21st century's robotics

00:00:56,840 --> 00:01:02,160
revolution

00:00:58,399 --> 00:01:04,960
although he worked as a biochemist

00:01:02,160 --> 00:01:05,680
his technological background and his way

00:01:04,960 --> 00:01:08,479
of learning

00:01:05,680 --> 00:01:09,920
things somehow shaped his work and he

00:01:08,479 --> 00:01:13,119
could actually

00:01:09,920 --> 00:01:15,119
predict things like the ai revolution or

00:01:13,119 --> 00:01:16,240
the software engineering things that

00:01:15,119 --> 00:01:19,360
would come up

00:01:16,240 --> 00:01:20,720
like decades later and if you may be

00:01:19,360 --> 00:01:22,320
wondering what the science fiction

00:01:20,720 --> 00:01:22,880
author has to do with the tech related

00:01:22,320 --> 00:01:24,960
talk

00:01:22,880 --> 00:01:26,720
bear with me for the next 20 minutes or

00:01:24,960 --> 00:01:29,840
so

00:01:26,720 --> 00:01:32,000
so hi everyone my name is theodore

00:01:29,840 --> 00:01:33,200
i'm a software engineer based in athens

00:01:32,000 --> 00:01:35,280
greece

00:01:33,200 --> 00:01:38,159
and you can find me online on twitter or

00:01:35,280 --> 00:01:41,680
github by the elias warillas please do

00:01:38,159 --> 00:01:43,840
as i'm trying to build a cult here and

00:01:41,680 --> 00:01:45,200
today i want to share something that's

00:01:43,840 --> 00:01:47,200
one of the most

00:01:45,200 --> 00:01:48,399
interesting and creative projects of

00:01:47,200 --> 00:01:50,560
mine

00:01:48,399 --> 00:01:52,320
so like for the past few years i have

00:01:50,560 --> 00:01:55,840
been digging through asmr's work

00:01:52,320 --> 00:01:58,479
and somehow i convinced myself

00:01:55,840 --> 00:02:00,240
that our lives look alike not because i

00:01:58,479 --> 00:02:02,479
have any chances of writing a book

00:02:00,240 --> 00:02:03,439
but mostly because i also love combining

00:02:02,479 --> 00:02:06,159
ideas

00:02:03,439 --> 00:02:07,680
and telling stories and today i'm gonna

00:02:06,159 --> 00:02:12,000
tell you my story

00:02:07,680 --> 00:02:13,599
how i built a robot so a few months ago

00:02:12,000 --> 00:02:16,400
a friend of mine asked me if we could

00:02:13,599 --> 00:02:17,360
make a side project like nothing fancy

00:02:16,400 --> 00:02:21,360
at all

00:02:17,360 --> 00:02:24,160
a teeny tiny time tracking application

00:02:21,360 --> 00:02:27,599
so i thought that might be a good idea

00:02:24,160 --> 00:02:29,920
and i immediately jumped in

00:02:27,599 --> 00:02:30,640
and since i'm a javascript engineer by

00:02:29,920 --> 00:02:32,800
day

00:02:30,640 --> 00:02:34,640
we decided to rely entirely on the

00:02:32,800 --> 00:02:36,640
javascript ecosystem

00:02:34,640 --> 00:02:38,080
so we use node.js for the back end

00:02:36,640 --> 00:02:41,440
obviously and

00:02:38,080 --> 00:02:42,160
react for the user's interface and we

00:02:41,440 --> 00:02:44,319
lost uh

00:02:42,160 --> 00:02:46,480
we launched our application and since we

00:02:44,319 --> 00:02:47,360
had some kind of traction we decided

00:02:46,480 --> 00:02:49,280
that would be

00:02:47,360 --> 00:02:50,560
a good idea to play around with react

00:02:49,280 --> 00:02:53,680
native

00:02:50,560 --> 00:02:56,160
and since i haven't i haven't built a

00:02:53,680 --> 00:02:57,599
mobile application never in my life i

00:02:56,160 --> 00:03:00,080
thought that

00:02:57,599 --> 00:03:01,440
but it might be interesting and somehow

00:03:00,080 --> 00:03:04,239
i could gain some more

00:03:01,440 --> 00:03:05,920
knowledge so after lots of trial and

00:03:04,239 --> 00:03:08,480
error we've had our two

00:03:05,920 --> 00:03:09,280
signed mobile applications published and

00:03:08,480 --> 00:03:12,560
this is when

00:03:09,280 --> 00:03:14,159
our saga finally begins

00:03:12,560 --> 00:03:16,159
you see i truly believe that good

00:03:14,159 --> 00:03:18,319
software accounts had by hand with

00:03:16,159 --> 00:03:20,400
extensive testing and

00:03:18,319 --> 00:03:22,400
this is something that i actually

00:03:20,400 --> 00:03:24,159
learned the hard way

00:03:22,400 --> 00:03:26,000
so in the backend and the front end we

00:03:24,159 --> 00:03:28,080
were pretty confident releasing code

00:03:26,000 --> 00:03:29,280
projection because we had great coverage

00:03:28,080 --> 00:03:32,720
with unit

00:03:29,280 --> 00:03:35,440
regression and when testing using

00:03:32,720 --> 00:03:37,280
end-to-end testing uh we could also

00:03:35,440 --> 00:03:40,879
detect anomalies and side effects and

00:03:37,280 --> 00:03:42,560
properly document any business logic

00:03:40,879 --> 00:03:44,720
for our mobile applications on the other

00:03:42,560 --> 00:03:45,599
hand we have lots of unit tests in place

00:03:44,720 --> 00:03:48,319
mostly because

00:03:45,599 --> 00:03:50,720
our design system was the same as the

00:03:48,319 --> 00:03:54,239
web applications we were using react

00:03:50,720 --> 00:03:57,360
native and react so just a piece of cake

00:03:54,239 --> 00:04:00,080
and zero i repeat zero end-to-end

00:03:57,360 --> 00:04:03,120
testing for our mobile applications

00:04:00,080 --> 00:04:04,799
and do you know why okay let me tell you

00:04:03,120 --> 00:04:06,239
why

00:04:04,799 --> 00:04:07,840
because mobile end-to-end testing is

00:04:06,239 --> 00:04:09,840
like working walking towards

00:04:07,840 --> 00:04:11,519
interrupting booking

00:04:09,840 --> 00:04:13,519
although there are some automation based

00:04:11,519 --> 00:04:15,840
on frameworks around like apium

00:04:13,519 --> 00:04:17,759
and when testing in physical devices is

00:04:15,840 --> 00:04:20,400
nearly impossible due to the security

00:04:17,759 --> 00:04:22,639
limitations of the providers

00:04:20,400 --> 00:04:24,560
qa engineers are fighting this program

00:04:22,639 --> 00:04:26,880
for a very long time

00:04:24,560 --> 00:04:29,840
and we all have to agree that mobile

00:04:26,880 --> 00:04:29,840
testing is crucial

00:04:29,919 --> 00:04:33,759
mobile applications are tightly bound to

00:04:32,320 --> 00:04:36,080
the physical devices

00:04:33,759 --> 00:04:37,360
and we need to ensure some standards for

00:04:36,080 --> 00:04:39,759
our products

00:04:37,360 --> 00:04:42,080
especially for android users we faced

00:04:39,759 --> 00:04:44,639
countless problems from memory leaks

00:04:42,080 --> 00:04:46,880
hardware limitations its mobile device

00:04:44,639 --> 00:04:48,639
is different from one another

00:04:46,880 --> 00:04:50,320
we had to test by hand that everything

00:04:48,639 --> 00:04:51,600
looked okay in the devices with

00:04:50,320 --> 00:04:53,199
different resolutions and screen

00:04:51,600 --> 00:04:55,600
dimensions

00:04:53,199 --> 00:04:57,120
we got our apps rejected numerous times

00:04:55,600 --> 00:04:59,120
because we couldn't get aligned with

00:04:57,120 --> 00:05:01,199
some devices standards

00:04:59,120 --> 00:05:03,360
and you have to consider that we spent

00:05:01,199 --> 00:05:06,639
countless hours for debugging

00:05:03,360 --> 00:05:09,520
although we own a relatively slim

00:05:06,639 --> 00:05:11,440
we own a relatively simple application

00:05:09,520 --> 00:05:14,240
mobile testing is hard due to reasons

00:05:11,440 --> 00:05:16,160
beyond our control

00:05:14,240 --> 00:05:17,360
uc mobile applications are essentially

00:05:16,160 --> 00:05:19,039
grey box

00:05:17,360 --> 00:05:22,160
we have some sort of control in the

00:05:19,039 --> 00:05:23,919
resources we own and basically that's it

00:05:22,160 --> 00:05:25,280
thus we can actually establish testing

00:05:23,919 --> 00:05:26,960
flows that require

00:05:25,280 --> 00:05:28,720
in that require interacting with

00:05:26,960 --> 00:05:30,560
external applications like

00:05:28,720 --> 00:05:32,160
a testing testing a login flow with

00:05:30,560 --> 00:05:35,199
email validation

00:05:32,160 --> 00:05:37,600
it's nearly impossible to

00:05:35,199 --> 00:05:39,360
control an application that's beyond our

00:05:37,600 --> 00:05:41,680
control so we can actually

00:05:39,360 --> 00:05:42,800
we can't actually control an email

00:05:41,680 --> 00:05:44,479
client

00:05:42,800 --> 00:05:46,880
furthermore we can't even access the

00:05:44,479 --> 00:05:47,919
device settings or any operating system

00:05:46,880 --> 00:05:50,080
internet

00:05:47,919 --> 00:05:51,520
we are strictly linked to what our

00:05:50,080 --> 00:05:55,039
application does

00:05:51,520 --> 00:05:56,960
and that's basically about it

00:05:55,039 --> 00:05:58,400
even so we tried and faced problems with

00:05:56,960 --> 00:05:59,440
our initial setup due to push

00:05:58,400 --> 00:06:02,240
notifications

00:05:59,440 --> 00:06:04,319
alerts popping and incoming faults

00:06:02,240 --> 00:06:06,160
testing frameworks are unable to tackle

00:06:04,319 --> 00:06:08,720
properly external disruptions

00:06:06,160 --> 00:06:09,360
or context reaching but if you think

00:06:08,720 --> 00:06:11,440
about it

00:06:09,360 --> 00:06:12,639
this is how mobile devices are working

00:06:11,440 --> 00:06:14,319
right

00:06:12,639 --> 00:06:16,000
they are breathing and kicking it makes

00:06:14,319 --> 00:06:16,720
no sense to isolate our working

00:06:16,000 --> 00:06:20,000
environment

00:06:16,720 --> 00:06:22,160
just for our testing purposes

00:06:20,000 --> 00:06:24,639
furthermore we couldn't track and

00:06:22,160 --> 00:06:26,479
analyze important metrics data

00:06:24,639 --> 00:06:28,000
how many seconds does our application

00:06:26,479 --> 00:06:31,120
takes up boost

00:06:28,000 --> 00:06:33,039
does it feel slow on low end phones

00:06:31,120 --> 00:06:34,800
how much time does it take to download

00:06:33,039 --> 00:06:37,280
the binary from the app store

00:06:34,800 --> 00:06:39,199
what's the end the end user's experience

00:06:37,280 --> 00:06:42,160
with a forging network

00:06:39,199 --> 00:06:43,120
that's right feel really snappy that

00:06:42,160 --> 00:06:46,560
does the ui

00:06:43,120 --> 00:06:48,000
feels good for the actual end user

00:06:46,560 --> 00:06:49,680
these metrics are essential for

00:06:48,000 --> 00:06:53,360
marketing reasons and

00:06:49,680 --> 00:06:56,400
we were completely blind at the spot

00:06:53,360 --> 00:06:57,919
and last but not least in most cases we

00:06:56,400 --> 00:07:00,240
had to introduce

00:06:57,919 --> 00:07:03,199
hacks in order to properly and precisely

00:07:00,240 --> 00:07:03,199
simulate gestures

00:07:04,319 --> 00:07:10,000
in the screen events produced by aprium

00:07:07,599 --> 00:07:10,800
are always virtual and require extensive

00:07:10,000 --> 00:07:13,280
setup

00:07:10,800 --> 00:07:14,960
and that problem kept bugging me for a

00:07:13,280 --> 00:07:16,080
while as i was struggling to find a

00:07:14,960 --> 00:07:18,160
proper solution rather

00:07:16,080 --> 00:07:21,039
than manually testing and debugging

00:07:18,160 --> 00:07:22,880
every single change on my phone

00:07:21,039 --> 00:07:25,280
and back in the days during that period

00:07:22,880 --> 00:07:27,199
of time i also bought my

00:07:25,280 --> 00:07:30,479
very first 3d window as i was

00:07:27,199 --> 00:07:33,199
experimenting with iot rapid prototyping

00:07:30,479 --> 00:07:35,039
so during a printing session as i was

00:07:33,199 --> 00:07:36,160
watching the mesmerizing effect of hot

00:07:35,039 --> 00:07:38,960
plastic

00:07:36,160 --> 00:07:40,560
traveling through space suddenly i had

00:07:38,960 --> 00:07:42,639
an epic fact

00:07:40,560 --> 00:07:44,800
what if i could actually replace the

00:07:42,639 --> 00:07:47,919
printer's opened with a stylus

00:07:44,800 --> 00:07:50,560
and trying to tap my phone after all

00:07:47,919 --> 00:07:51,599
3d printers are fully programmable

00:07:50,560 --> 00:07:54,879
they're using a

00:07:51,599 --> 00:07:56,720
language called grbl so basically

00:07:54,879 --> 00:07:58,000
when we're talking about 3d printing

00:07:56,720 --> 00:08:01,440
we're just talking about

00:07:58,000 --> 00:08:05,919
sending commands to the printer with uh

00:08:01,440 --> 00:08:08,479
dimensions uh through time and space

00:08:05,919 --> 00:08:09,680
so i secured my phone on the braking bed

00:08:08,479 --> 00:08:12,960
using masking tape

00:08:09,680 --> 00:08:15,280
and trying to rinse the screen and

00:08:12,960 --> 00:08:17,280
all of a sudden it worked it really

00:08:15,280 --> 00:08:19,280
really worked

00:08:17,280 --> 00:08:21,599
i was successfully producing tapping

00:08:19,280 --> 00:08:24,840
events just by using my printer

00:08:21,599 --> 00:08:26,800
and my my laptop sending commands to the

00:08:24,840 --> 00:08:29,039
printer and i thought that

00:08:26,800 --> 00:08:31,120
it might be a good idea to try out and

00:08:29,039 --> 00:08:33,680
build an actual robot for mobile testing

00:08:31,120 --> 00:08:35,200
automation

00:08:33,680 --> 00:08:36,800
and when someone's hearing about

00:08:35,200 --> 00:08:38,560
building a robot they might be thinking

00:08:36,800 --> 00:08:41,839
something like the terminator

00:08:38,560 --> 00:08:44,640
or wally but in reality robots are

00:08:41,839 --> 00:08:45,279
rather boring there are plenty of white

00:08:44,640 --> 00:08:47,120
papers

00:08:45,279 --> 00:08:48,880
and open source projects available with

00:08:47,120 --> 00:08:50,640
lots of different designs based on the

00:08:48,880 --> 00:08:52,720
application area

00:08:50,640 --> 00:08:55,360
and since the robotic applications are

00:08:52,720 --> 00:08:56,959
widely used for more than 50 years

00:08:55,360 --> 00:08:59,519
the underlying technology is pretty

00:08:56,959 --> 00:09:01,760
mature so we can limit down

00:08:59,519 --> 00:09:03,760
our available options and we can

00:09:01,760 --> 00:09:06,080
categorize them based on their moving

00:09:03,760 --> 00:09:08,160
mechanics

00:09:06,080 --> 00:09:11,040
so the first category are robotic arms

00:09:08,160 --> 00:09:12,720
robot cards are used in industrial lines

00:09:11,040 --> 00:09:14,560
and they are pretty efficient for

00:09:12,720 --> 00:09:16,399
repetitive tasks

00:09:14,560 --> 00:09:18,399
an example of where automated robotic

00:09:16,399 --> 00:09:19,519
arms are used is in the auto

00:09:18,399 --> 00:09:22,080
manufacturing

00:09:19,519 --> 00:09:23,120
industry but for our use case they're

00:09:22,080 --> 00:09:25,440
not going to work

00:09:23,120 --> 00:09:28,160
as we want more versatile epiphoric

00:09:25,440 --> 00:09:30,480
gestures and movement

00:09:28,160 --> 00:09:32,320
cartesian robots also known as linear

00:09:30,480 --> 00:09:33,600
robots are used for a wide variety of

00:09:32,320 --> 00:09:36,160
applications

00:09:33,600 --> 00:09:37,440
accommodating three motors and a linear

00:09:36,160 --> 00:09:40,000
axis system

00:09:37,440 --> 00:09:41,200
they move an actual an actuator in our

00:09:40,000 --> 00:09:44,160
case stylus

00:09:41,200 --> 00:09:44,959
across a three-dimensional space 3d

00:09:44,160 --> 00:09:47,680
printers

00:09:44,959 --> 00:09:48,240
cnc machines pick and place robots laser

00:09:47,680 --> 00:09:50,320
cutters

00:09:48,240 --> 00:09:51,279
plotters all of them are based on the

00:09:50,320 --> 00:09:52,959
principle

00:09:51,279 --> 00:09:55,040
are on the principle of the partition

00:09:52,959 --> 00:09:56,640
coordinated robot

00:09:55,040 --> 00:09:58,880
but although these robots are pretty

00:09:56,640 --> 00:10:01,360
accurate they are also a bit slow

00:09:58,880 --> 00:10:03,760
and the actual movement does not feel

00:10:01,360 --> 00:10:06,160
natural at all

00:10:03,760 --> 00:10:08,560
and finally our pickup for this project

00:10:06,160 --> 00:10:11,760
are called delta robots

00:10:08,560 --> 00:10:13,279
inventing in the early 1980s delta

00:10:11,760 --> 00:10:15,760
robots are moving using

00:10:13,279 --> 00:10:17,920
multiple kinematic chains they are

00:10:15,760 --> 00:10:19,519
powered by three or four servo motors

00:10:17,920 --> 00:10:22,560
attached to a steady base

00:10:19,519 --> 00:10:25,040
rotating and moving the robot charge

00:10:22,560 --> 00:10:26,160
delta robots have popular usage in

00:10:25,040 --> 00:10:27,920
picking and pass

00:10:26,160 --> 00:10:30,320
in picking and packaging in factories

00:10:27,920 --> 00:10:32,399
because they can be quite fast

00:10:30,320 --> 00:10:33,920
some of them executing more than 300

00:10:32,399 --> 00:10:36,640
pics per minute

00:10:33,920 --> 00:10:38,880
also the way they're moving is the

00:10:36,640 --> 00:10:41,839
closest we can get in order to replicate

00:10:38,880 --> 00:10:44,480
our thumb's movement

00:10:41,839 --> 00:10:46,079
luckily for us jason huggins the creator

00:10:44,480 --> 00:10:48,000
of selenium designed it

00:10:46,079 --> 00:10:49,760
and open source the delta robot used for

00:10:48,000 --> 00:10:51,440
automation taste

00:10:49,760 --> 00:10:53,680
this project is called tap to growth and

00:10:51,440 --> 00:10:55,519
you can find it on light and github

00:10:53,680 --> 00:10:56,880
in the repository you can also find

00:10:55,519 --> 00:10:59,279
detailed instructions

00:10:56,880 --> 00:11:00,000
about building the robot the mechanics

00:10:59,279 --> 00:11:03,519
the

00:11:00,000 --> 00:11:07,040
programming the actual robot and so on

00:11:03,519 --> 00:11:08,320
so based on jason's world work i focused

00:11:07,040 --> 00:11:09,920
his project

00:11:08,320 --> 00:11:11,519
and modified the design a little bit

00:11:09,920 --> 00:11:14,399
mostly because i couldn't

00:11:11,519 --> 00:11:16,000
find all the components in the in the

00:11:14,399 --> 00:11:18,800
grip marketplace

00:11:16,000 --> 00:11:20,399
i used my 3d printer bolts and nuts in

00:11:18,800 --> 00:11:23,279
order to reinforce the base

00:11:20,399 --> 00:11:24,880
and the arms of the robot the arms are

00:11:23,279 --> 00:11:26,880
holding place using

00:11:24,880 --> 00:11:28,000
pairs of strong magnets while the

00:11:26,880 --> 00:11:32,000
electronics

00:11:28,000 --> 00:11:32,000
are safely secured on the top plate

00:11:32,079 --> 00:11:35,200
the brain of our little machine is

00:11:34,720 --> 00:11:37,920
running

00:11:35,200 --> 00:11:40,000
on a microcontroller microcontrollers

00:11:37,920 --> 00:11:42,160
are small computational units widely

00:11:40,000 --> 00:11:44,000
available and relatively cheap coming

00:11:42,160 --> 00:11:45,760
into the shape of the board

00:11:44,000 --> 00:11:47,680
for tapster boot we are going to use an

00:11:45,760 --> 00:11:49,760
arduino nano

00:11:47,680 --> 00:11:52,560
as you can see there are pins popping

00:11:49,760 --> 00:11:54,880
out from the device labeled with numbers

00:11:52,560 --> 00:11:56,800
using these pins we can connect the

00:11:54,880 --> 00:11:57,760
motors of the robot directly to the

00:11:56,800 --> 00:11:59,600
arduino

00:11:57,760 --> 00:12:01,279
the device requires another external

00:11:59,600 --> 00:12:04,079
power connection as it's

00:12:01,279 --> 00:12:06,000
as it is powered through a usb port the

00:12:04,079 --> 00:12:08,240
usb port is also used for sharing

00:12:06,000 --> 00:12:11,680
serial communication and programming

00:12:08,240 --> 00:12:11,680
using our terminal

00:12:11,920 --> 00:12:16,399
and then when it comes to programming we

00:12:14,560 --> 00:12:17,600
can write code for the board using the

00:12:16,399 --> 00:12:20,800
arduino ide

00:12:17,600 --> 00:12:22,560
and a superset of c plus plus functions

00:12:20,800 --> 00:12:24,720
there is a vivid community behind the

00:12:22,560 --> 00:12:28,480
arduino foundation with lots of open

00:12:24,720 --> 00:12:30,240
source projects and prototypes available

00:12:28,480 --> 00:12:31,760
and also the arduino provides us with

00:12:30,240 --> 00:12:35,279
some internal functions

00:12:31,760 --> 00:12:37,279
like the setup and the loop using these

00:12:35,279 --> 00:12:39,040
along with internal libraries we can

00:12:37,279 --> 00:12:42,240
create full-blown software

00:12:39,040 --> 00:12:45,279
running on low-level devices

00:12:42,240 --> 00:12:47,279
for example in the cone in the slide i

00:12:45,279 --> 00:12:51,120
will blink an led attached to the pin

00:12:47,279 --> 00:12:53,920
label 3 within an interval of one second

00:12:51,120 --> 00:12:57,040
using the ide we can write the code

00:12:53,920 --> 00:13:00,000
compile it and upload it to the device

00:12:57,040 --> 00:13:00,880
and although c code works great for most

00:13:00,000 --> 00:13:04,480
cases

00:13:00,880 --> 00:13:06,880
tapsterboard uses another approach

00:13:04,480 --> 00:13:08,160
under the hood the robot is powered by

00:13:06,880 --> 00:13:10,000
25.

00:13:08,160 --> 00:13:12,320
25 is an open source library and

00:13:10,000 --> 00:13:14,000
framework that allows us to remotely

00:13:12,320 --> 00:13:16,240
control the board from our development

00:13:14,000 --> 00:13:18,720
station using nodejs code

00:13:16,240 --> 00:13:20,000
in that manner we can pair hardware with

00:13:18,720 --> 00:13:21,760
our web browser

00:13:20,000 --> 00:13:23,680
and thus enhance our development

00:13:21,760 --> 00:13:26,240
experience

00:13:23,680 --> 00:13:27,360
moreover we can consume modules from the

00:13:26,240 --> 00:13:29,600
npm in the

00:13:27,360 --> 00:13:31,200
registry or even establish a remote

00:13:29,600 --> 00:13:32,000
connection with the robot using a web

00:13:31,200 --> 00:13:35,200
server

00:13:32,000 --> 00:13:36,160
this part sensor is essential as we can

00:13:35,200 --> 00:13:38,720
expand our

00:13:36,160 --> 00:13:41,040
robot using modules widely available for

00:13:38,720 --> 00:13:41,760
example we can use helper libraries like

00:13:41,040 --> 00:13:43,839
lodas

00:13:41,760 --> 00:13:46,399
or even control a robot using a web

00:13:43,839 --> 00:13:48,399
circuit library

00:13:46,399 --> 00:13:49,680
and last but not least johnny car can

00:13:48,399 --> 00:13:52,240
work on different ports

00:13:49,680 --> 00:13:53,199
using the same code this part is

00:13:52,240 --> 00:13:55,519
essential

00:13:53,199 --> 00:13:57,199
as well as well as hardware

00:13:55,519 --> 00:13:59,279
specifications are totally different

00:13:57,199 --> 00:14:02,320
from one microcontroller to another

00:13:59,279 --> 00:14:03,920
with 25 we can even create a standalone

00:14:02,320 --> 00:14:06,959
robot on a raspberry pi

00:14:03,920 --> 00:14:09,760
as raspberry pi as pi boards are capable

00:14:06,959 --> 00:14:10,560
of running lightweight versions of linux

00:14:09,760 --> 00:14:12,959
finally

00:14:10,560 --> 00:14:15,279
we can also run a tapster boot farm as

00:14:12,959 --> 00:14:18,480
we can connect multiple robots under the

00:14:15,279 --> 00:14:18,480
same controlling station

00:14:20,079 --> 00:14:24,399
running john 5 is really simple since we

00:14:22,800 --> 00:14:26,720
get the module installed

00:14:24,399 --> 00:14:28,240
we can directly use it from our command

00:14:26,720 --> 00:14:30,000
line interface

00:14:28,240 --> 00:14:31,519
the packets will establish a new serial

00:14:30,000 --> 00:14:33,440
connection with the arduino

00:14:31,519 --> 00:14:35,760
and we can immediately start writing

00:14:33,440 --> 00:14:35,760
code

00:14:35,920 --> 00:14:40,240
so first things first we need to require

00:14:38,160 --> 00:14:42,560
the journey five module

00:14:40,240 --> 00:14:44,639
using the built-in board class we need

00:14:42,560 --> 00:14:46,160
to instantiate a new journey five board

00:14:44,639 --> 00:14:48,480
insults

00:14:46,160 --> 00:14:49,680
when the board gets interactive we also

00:14:48,480 --> 00:14:52,000
need to create three

00:14:49,680 --> 00:14:52,959
new servo instances these ones are

00:14:52,000 --> 00:14:55,680
moving the actual

00:14:52,959 --> 00:14:56,800
arms of that support the kinematic

00:14:55,680 --> 00:14:59,360
calculations

00:14:56,800 --> 00:15:01,040
are a bit confusing and require lots of

00:14:59,360 --> 00:15:05,760
mass and trigonometry

00:15:01,040 --> 00:15:07,120
as we have to as we have to translate

00:15:05,760 --> 00:15:09,600
as we have translated the surface

00:15:07,120 --> 00:15:12,800
rotation to actual movement in the space

00:15:09,600 --> 00:15:14,560
but eventually we can consume them as an

00:15:12,800 --> 00:15:16,639
independent module provided by top

00:15:14,560 --> 00:15:18,880
secret

00:15:16,639 --> 00:15:20,959
using the kinematics class we can move

00:15:18,880 --> 00:15:24,240
the stylus using a helper method

00:15:20,959 --> 00:15:25,839
passing down the x y and z coordinates

00:15:24,240 --> 00:15:28,480
of the movement

00:15:25,839 --> 00:15:30,560
if z is set to zero the stylus is

00:15:28,480 --> 00:15:32,880
actually touching the screen

00:15:30,560 --> 00:15:35,199
if all values are set to zero that means

00:15:32,880 --> 00:15:38,399
we are touching the center of the screen

00:15:35,199 --> 00:15:41,279
in this way we can recreate simple tabs

00:15:38,399 --> 00:15:43,360
and raise the styles on demand we can

00:15:41,279 --> 00:15:45,279
also add big lays between tabs

00:15:43,360 --> 00:15:48,560
as we want to create more natural

00:15:45,279 --> 00:15:48,560
interactions with the screen

00:15:49,199 --> 00:15:53,040
swipes can get recreated accordingly as

00:15:51,839 --> 00:15:56,160
we can move from point

00:15:53,040 --> 00:15:58,160
a to point b within a period of time

00:15:56,160 --> 00:15:59,680
we can even use easing effects by

00:15:58,160 --> 00:16:01,680
applying a helper method

00:15:59,680 --> 00:16:03,440
in order to manipulate the steps of

00:16:01,680 --> 00:16:05,600
movement through time

00:16:03,440 --> 00:16:07,600
now that our robot can effectively tap

00:16:05,600 --> 00:16:10,320
and swipe as a human being

00:16:07,600 --> 00:16:11,199
we need to fix one last problem we need

00:16:10,320 --> 00:16:13,360
to ensure

00:16:11,199 --> 00:16:15,839
that the robot is aware of the actual

00:16:13,360 --> 00:16:18,320
devices position of the base

00:16:15,839 --> 00:16:20,240
since there is no such thing as a sensor

00:16:18,320 --> 00:16:20,880
in order to detect the placement of the

00:16:20,240 --> 00:16:23,120
phone

00:16:20,880 --> 00:16:24,800
we need to calibrate tapster both and

00:16:23,120 --> 00:16:25,839
prevent the stylus from crossing the

00:16:24,800 --> 00:16:29,600
screen

00:16:25,839 --> 00:16:29,600
but how we can actually do that

00:16:29,759 --> 00:16:33,759
using a web browser we can effectively

00:16:32,240 --> 00:16:35,199
we can effectively establish a

00:16:33,759 --> 00:16:38,480
communication channel

00:16:35,199 --> 00:16:40,880
between the phone and the robot we

00:16:38,480 --> 00:16:42,880
need to create a simulated grid and

00:16:40,880 --> 00:16:43,839
start moving the stylus towards the

00:16:42,880 --> 00:16:46,079
screen

00:16:43,839 --> 00:16:47,839
once it up occurs we can read the

00:16:46,079 --> 00:16:50,320
position of the stylus

00:16:47,839 --> 00:16:52,079
afterwards we will erase the actuator

00:16:50,320 --> 00:16:53,600
and repeat the process two more times

00:16:52,079 --> 00:16:55,920
inside the grid area

00:16:53,600 --> 00:16:57,120
in this way we can calculate the

00:16:55,920 --> 00:16:59,360
movement steps

00:16:57,120 --> 00:17:00,959
and precisely detect the working area of

00:16:59,360 --> 00:17:02,079
the phone and the boundaries of the

00:17:00,959 --> 00:17:04,480
screen

00:17:02,079 --> 00:17:08,400
now that we are all set we can start

00:17:04,480 --> 00:17:08,400
writing our first testing scenario

00:17:08,640 --> 00:17:12,400
since everything is in place we can pipe

00:17:10,959 --> 00:17:14,640
the output of the robot

00:17:12,400 --> 00:17:16,400
and use the opium test executor along

00:17:14,640 --> 00:17:19,360
with the web interface

00:17:16,400 --> 00:17:20,000
we can establish locators for ui

00:17:19,360 --> 00:17:22,000
elements

00:17:20,000 --> 00:17:23,360
and write full-blown testing scenarios

00:17:22,000 --> 00:17:24,720
with the appropriate validating

00:17:23,360 --> 00:17:27,839
assertions

00:17:24,720 --> 00:17:30,480
in our case we used a rest dpi in order

00:17:27,839 --> 00:17:32,559
to allow up in control of the robot

00:17:30,480 --> 00:17:36,799
furthermore we can interact with popping

00:17:32,559 --> 00:17:36,799
messages or even tweak the devices

00:17:36,960 --> 00:17:40,880
and finally we are no more limited to

00:17:39,360 --> 00:17:42,559
the applications we are

00:17:40,880 --> 00:17:44,960
we can track down the screen of the

00:17:42,559 --> 00:17:47,440
phone and run our testing scenarios

00:17:44,960 --> 00:17:49,039
against external applications like using

00:17:47,440 --> 00:17:51,440
visual assertions

00:17:49,039 --> 00:17:53,840
for example in this video taps reboot is

00:17:51,440 --> 00:17:55,760
interacting with my instagram feed

00:17:53,840 --> 00:17:58,320
with the material comparison techniques

00:17:55,760 --> 00:18:00,960
we can extract data and detect changes

00:17:58,320 --> 00:18:02,720
directly from the screen and since there

00:18:00,960 --> 00:18:04,480
are no limitations

00:18:02,720 --> 00:18:06,480
and since there are no limitations at

00:18:04,480 --> 00:18:07,039
all we can manually tweak the device's

00:18:06,480 --> 00:18:10,559
settings

00:18:07,039 --> 00:18:10,559
as a user would normally do

00:18:10,880 --> 00:18:14,320
and if you ever had the chance to read a

00:18:13,360 --> 00:18:17,520
simon's book

00:18:14,320 --> 00:18:19,360
a robot it's also a movie will smith

00:18:17,520 --> 00:18:21,120
you will be aware of the three laws of

00:18:19,360 --> 00:18:23,840
robotics

00:18:21,120 --> 00:18:25,440
this concept was firstly introduced in

00:18:23,840 --> 00:18:28,400
his 1942

00:18:25,440 --> 00:18:30,160
short story roundaround these laws are

00:18:28,400 --> 00:18:32,559
describing how robots

00:18:30,160 --> 00:18:33,440
may not harm the human kind by ever by

00:18:32,559 --> 00:18:36,320
ever means

00:18:33,440 --> 00:18:38,880
and some of stories test his laws in a

00:18:36,320 --> 00:18:41,039
wide variety of variety of circumstances

00:18:38,880 --> 00:18:43,360
leading to proposals and rejections or

00:18:41,039 --> 00:18:46,240
modifications of the actual laws

00:18:43,360 --> 00:18:48,160
thereby since this rule set is in place

00:18:46,240 --> 00:18:50,559
we can safely go a little bit wild with

00:18:48,160 --> 00:18:52,640
our creation without any fear

00:18:50,559 --> 00:18:54,840
we can combine ideas and concepts that

00:18:52,640 --> 00:18:56,720
were released and we introduced to our

00:18:54,840 --> 00:19:00,000
community

00:18:56,720 --> 00:19:01,039
so i experimented a lot recording a user

00:19:00,000 --> 00:19:03,200
sessions

00:19:01,039 --> 00:19:05,280
and i was able to accurately simulate

00:19:03,200 --> 00:19:07,440
the recordings through top support

00:19:05,280 --> 00:19:09,120
in that manner we can write tests or

00:19:07,440 --> 00:19:11,760
simulate scenarios without

00:19:09,120 --> 00:19:13,280
writing any code at all this achievement

00:19:11,760 --> 00:19:15,760
is really important because we are now

00:19:13,280 --> 00:19:18,960
able to debug a user statement remotely

00:19:15,760 --> 00:19:21,280
or even create abs tests in an isolated

00:19:18,960 --> 00:19:22,799
in an isolated environment we can also

00:19:21,280 --> 00:19:25,919
create user groups

00:19:22,799 --> 00:19:28,960
and test beta test beta versions before

00:19:25,919 --> 00:19:32,000
applications on demand

00:19:28,960 --> 00:19:33,760
also since tabs and tabs and gestures

00:19:32,000 --> 00:19:35,440
can be expressed as vertices of

00:19:33,760 --> 00:19:37,760
coordinates through time

00:19:35,440 --> 00:19:38,960
we can create dynamic testing scenarios

00:19:37,760 --> 00:19:41,760
using machine learning

00:19:38,960 --> 00:19:43,600
and analytics datasets instead of

00:19:41,760 --> 00:19:45,919
replicating our user sessions

00:19:43,600 --> 00:19:47,679
we can now create on our own artificial

00:19:45,919 --> 00:19:49,200
users demand

00:19:47,679 --> 00:19:51,280
we use this technique in order to

00:19:49,200 --> 00:19:53,360
simulate aggressive testing scenarios

00:19:51,280 --> 00:19:54,960
and discover side effects or anomalies

00:19:53,360 --> 00:19:56,640
of the application

00:19:54,960 --> 00:19:58,960
it was fascinating to find out that we

00:19:56,640 --> 00:20:01,440
could group group our users

00:19:58,960 --> 00:20:02,559
under personas based how they interacted

00:20:01,440 --> 00:20:05,520
with the application

00:20:02,559 --> 00:20:06,240
and virtually test our uh which

00:20:05,520 --> 00:20:08,880
virtually

00:20:06,240 --> 00:20:11,200
test out new features without any users

00:20:08,880 --> 00:20:11,200
at all

00:20:11,280 --> 00:20:14,880
and if you're thinking about it we can

00:20:12,799 --> 00:20:18,000
even experiment with other cool ideas

00:20:14,880 --> 00:20:19,919
like artificial music composition canon

00:20:18,000 --> 00:20:21,919
based on that concept we can create

00:20:19,919 --> 00:20:23,600
interactions with the real world

00:20:21,919 --> 00:20:25,840
we have planned lots of upcoming

00:20:23,600 --> 00:20:28,400
experiments so you just have to stay

00:20:25,840 --> 00:20:28,400
tuned people

00:20:29,280 --> 00:20:33,520
and finally if you have ever find you

00:20:32,240 --> 00:20:35,919
have if you have ever

00:20:33,520 --> 00:20:37,039
tried to reach me out or read my blog or

00:20:35,919 --> 00:20:39,600
so on

00:20:37,039 --> 00:20:41,360
i during the past few years i also have

00:20:39,600 --> 00:20:42,480
heavily experimented with accessibility

00:20:41,360 --> 00:20:45,760
applications

00:20:42,480 --> 00:20:49,440
using iot so using trust

00:20:45,760 --> 00:20:50,159
tarbot was not a case that i could skip

00:20:49,440 --> 00:20:51,840
on

00:20:50,159 --> 00:20:53,520
i truly believe that we can actually

00:20:51,840 --> 00:20:55,360
help people in need

00:20:53,520 --> 00:20:57,440
just imagine if it was possible to

00:20:55,360 --> 00:20:59,919
control your phone using eye movements

00:20:57,440 --> 00:21:00,559
and the web camera or if we could

00:20:59,919 --> 00:21:02,400
develop

00:21:00,559 --> 00:21:04,320
homemade assistive hardware for people

00:21:02,400 --> 00:21:06,400
with parkinson's disease

00:21:04,320 --> 00:21:08,480
we can also effectively directly help

00:21:06,400 --> 00:21:09,760
people using common web technologies and

00:21:08,480 --> 00:21:13,360
widely available

00:21:09,760 --> 00:21:15,679
hardware and if you think thinking

00:21:13,360 --> 00:21:17,120
thinking about it like using your webcam

00:21:15,679 --> 00:21:19,919
or a browser and then

00:21:17,120 --> 00:21:23,039
a cheap board like an arduino that idea

00:21:19,919 --> 00:21:23,039
is actually fascinating

00:21:23,600 --> 00:21:26,880
and if there's something that you cannot

00:21:25,440 --> 00:21:29,120
take away from this talk

00:21:26,880 --> 00:21:30,640
is the fact that you can actually do

00:21:29,120 --> 00:21:32,000
whatever you want to do

00:21:30,640 --> 00:21:33,679
using the power coming from this

00:21:32,000 --> 00:21:35,679
community

00:21:33,679 --> 00:21:37,039
it doesn't really matter who you are it

00:21:35,679 --> 00:21:37,760
doesn't really matter where are you

00:21:37,039 --> 00:21:39,200
coming from

00:21:37,760 --> 00:21:41,360
we want to give you the tools the

00:21:39,200 --> 00:21:42,559
knowledge and the assets to achieve your

00:21:41,360 --> 00:21:45,520
dreams

00:21:42,559 --> 00:21:46,080
you can be whoever you wanted to be and

00:21:45,520 --> 00:21:48,720
we are

00:21:46,080 --> 00:21:50,240
part of the most popular tech community

00:21:48,720 --> 00:21:53,280
of the world

00:21:50,240 --> 00:21:54,080
and just like that our the power of

00:21:53,280 --> 00:21:59,280
coming from

00:21:54,080 --> 00:22:02,159
from this community is endless

00:21:59,280 --> 00:22:03,039
so i honestly cannot predict the future

00:22:02,159 --> 00:22:04,480
like telling you

00:22:03,039 --> 00:22:06,320
what's going to be in the upcoming

00:22:04,480 --> 00:22:08,559
months what's going to be without

00:22:06,320 --> 00:22:11,120
funding coming around or even what's

00:22:08,559 --> 00:22:13,039
going to be with like experimenting with

00:22:11,120 --> 00:22:14,799
web technologies or the javascript

00:22:13,039 --> 00:22:18,159
ecosystem

00:22:14,799 --> 00:22:20,000
but the thing is that using

00:22:18,159 --> 00:22:21,280
the power coming from this community we

00:22:20,000 --> 00:22:23,919
can actually provide you with

00:22:21,280 --> 00:22:25,440
ideas and the actual inspiration to

00:22:23,919 --> 00:22:27,200
chase up your dreams

00:22:25,440 --> 00:22:28,720
and as a matter of fact we do actually

00:22:27,200 --> 00:22:31,360
care for one another

00:22:28,720 --> 00:22:33,120
and we can help one another by any means

00:22:31,360 --> 00:22:35,200
in that matter the future is

00:22:33,120 --> 00:22:37,440
it's bright and i'm pretty sure about

00:22:35,200 --> 00:22:38,400
that together we can build our own

00:22:37,440 --> 00:22:40,960
robots

00:22:38,400 --> 00:22:42,159
and who knows maybe someday they would

00:22:40,960 --> 00:22:46,080
break asimov's laws

00:22:42,159 --> 00:22:48,400
and rule this world thanks so much for

00:22:46,080 --> 00:22:49,840
your time and patience please everyone

00:22:48,400 --> 00:22:52,799
stay safe

00:22:49,840 --> 00:22:55,840
we now need you more than ever and

00:22:52,799 --> 00:22:55,840
greetings from greece

00:23:06,840 --> 00:23:09,840
bye

00:23:13,700 --> 00:23:20,080
[Music]

00:23:17,840 --> 00:23:22,240
hey theodore what an amazing talk thank

00:23:20,080 --> 00:23:23,200
you very much for delivering it as part

00:23:22,240 --> 00:23:26,880
of the event just

00:23:23,200 --> 00:23:26,880
give me a second because i can't

00:23:27,039 --> 00:23:31,440
can hear me that's probably no great

00:23:28,559 --> 00:23:31,440
loss to be honest

00:23:34,840 --> 00:23:37,520
um theater uh black i was telling you on

00:23:37,039 --> 00:23:40,799
the

00:23:37,520 --> 00:23:41,679
on the back stage he gave him a few

00:23:40,799 --> 00:23:45,120
months ago in the

00:23:41,679 --> 00:23:47,360
js mountain um

00:23:45,120 --> 00:23:48,720
and it was quite incredible there is a

00:23:47,360 --> 00:23:51,760
we can post a video after

00:23:48,720 --> 00:23:54,080
this so people can watch it

00:23:51,760 --> 00:23:54,080
and

00:23:55,360 --> 00:24:00,799
okay i can hear you now good so the q a

00:23:59,279 --> 00:24:01,919
can start so we were just saying you

00:24:00,799 --> 00:24:04,159
gave a similar talk

00:24:01,919 --> 00:24:05,600
not too long ago um as part of the

00:24:04,159 --> 00:24:09,120
monthly meet-up

00:24:05,600 --> 00:24:10,400
really really i don't know yeah in a js

00:24:09,120 --> 00:24:13,760
month do you remember we

00:24:10,400 --> 00:24:17,039
we still use the remo

00:24:13,760 --> 00:24:18,720
yeah yeah it was about accessibility and

00:24:17,039 --> 00:24:21,600
and you're using a smooth device where

00:24:18,720 --> 00:24:24,480
you're controlling with your hands

00:24:21,600 --> 00:24:26,080
yeah yeah that was quite incredible and

00:24:24,480 --> 00:24:28,000
it was really nice to see

00:24:26,080 --> 00:24:29,120
so because he's doing a lot of arduino

00:24:28,000 --> 00:24:32,000
stuff he's very

00:24:29,120 --> 00:24:33,120
innovative and yeah it's quite nice to

00:24:32,000 --> 00:24:35,279
see

00:24:33,120 --> 00:24:36,720
how do you find the arduino stuff

00:24:35,279 --> 00:24:38,400
theodore um so

00:24:36,720 --> 00:24:39,760
to add context one of the things i used

00:24:38,400 --> 00:24:42,320
to do when i worked in education

00:24:39,760 --> 00:24:45,279
outreach was teach kids to code using

00:24:42,320 --> 00:24:46,880
arduino robots and we found it really

00:24:45,279 --> 00:24:49,360
easy for people to get up

00:24:46,880 --> 00:24:50,480
and running with but very quickly the

00:24:49,360 --> 00:24:52,400
advanced stuff got

00:24:50,480 --> 00:24:54,559
difficult have you got any comments

00:24:52,400 --> 00:24:56,400
about arduino and how easy it is to get

00:24:54,559 --> 00:24:59,440
up and running with it

00:24:56,400 --> 00:25:01,360
yeah so the thing is that

00:24:59,440 --> 00:25:02,960
the actual community as i said in the

00:25:01,360 --> 00:25:03,679
presentation is really vivid and the

00:25:02,960 --> 00:25:07,200
journey 5

00:25:03,679 --> 00:25:11,279
the actual way of writing code for uh

00:25:07,200 --> 00:25:14,000
using node.js for arduino is

00:25:11,279 --> 00:25:14,799
as well there are like lots of tutorials

00:25:14,000 --> 00:25:17,919
online

00:25:14,799 --> 00:25:21,279
trainings books and so on uh

00:25:17,919 --> 00:25:21,600
from the real boring stuff of bad story

00:25:21,279 --> 00:25:23,520
like

00:25:21,600 --> 00:25:25,440
purchasing an arduino it's really

00:25:23,520 --> 00:25:27,279
relatively simple just go to a hobby

00:25:25,440 --> 00:25:30,480
store

00:25:27,279 --> 00:25:31,679
or amazon ebay i don't know and you can

00:25:30,480 --> 00:25:34,799
purchase one from like

00:25:31,679 --> 00:25:36,799
a couple of pounds euros you name it so

00:25:34,799 --> 00:25:39,440
it's relatively cheap to get

00:25:36,799 --> 00:25:41,679
to get started using some uh a tiny

00:25:39,440 --> 00:25:43,919
board and two leds and that's it you can

00:25:41,679 --> 00:25:45,520
write your first hello world

00:25:43,919 --> 00:25:47,440
yeah the traffic lights we love the

00:25:45,520 --> 00:25:48,799
traffic lights with uh yeah yeah exactly

00:25:47,440 --> 00:25:51,200
you know stuff it's always the hello

00:25:48,799 --> 00:25:53,520
world isn't it

00:25:51,200 --> 00:25:55,760
so we have had a question come in um

00:25:53,520 --> 00:25:57,919
with arduino and raspberry pi there are

00:25:55,760 --> 00:26:00,159
good bits of hardware for c

00:25:57,919 --> 00:26:01,440
c plus plus and python programming with

00:26:00,159 --> 00:26:03,840
robotics

00:26:01,440 --> 00:26:05,279
is there any good hardware for

00:26:03,840 --> 00:26:08,960
javascript robotics

00:26:05,279 --> 00:26:11,360
projects yes

00:26:08,960 --> 00:26:12,400
there are i think there are some people

00:26:11,360 --> 00:26:14,880
around from the

00:26:12,400 --> 00:26:16,480
node conf so there's a project called

00:26:14,880 --> 00:26:20,480
escrowino

00:26:16,480 --> 00:26:23,520
uh which is built by gordon williams

00:26:20,480 --> 00:26:24,320
it's a self-funded product and project

00:26:23,520 --> 00:26:27,120
where

00:26:24,320 --> 00:26:28,960
he managed to actually so basically

00:26:27,120 --> 00:26:30,960
using 25 for python

00:26:28,960 --> 00:26:33,520
we're not actually writing code for the

00:26:30,960 --> 00:26:36,880
microcontroller we're just transmitting

00:26:33,520 --> 00:26:39,600
uh commands to the board yeah so

00:26:36,880 --> 00:26:41,919
our basically our development station is

00:26:39,600 --> 00:26:44,159
working as uh

00:26:41,919 --> 00:26:45,360
as a client uh the app the board is

00:26:44,159 --> 00:26:47,279
working as a server so

00:26:45,360 --> 00:26:48,480
we can actually communicate through

00:26:47,279 --> 00:26:50,000
through the command line

00:26:48,480 --> 00:26:52,720
but the screen is totally different so

00:26:50,000 --> 00:26:53,200
you can write actual code that compiles

00:26:52,720 --> 00:26:55,760
to

00:26:53,200 --> 00:26:57,919
bytecode for for boards so you have

00:26:55,760 --> 00:27:00,559
definitely to check out esparina

00:26:57,919 --> 00:27:01,440
so esperino is the place to go for js

00:27:00,559 --> 00:27:04,320
robotics

00:27:01,440 --> 00:27:05,440
okay yeah i was intrigued at the end of

00:27:04,320 --> 00:27:07,600
that talk you started

00:27:05,440 --> 00:27:09,360
talking about the accessibility

00:27:07,600 --> 00:27:10,880
opportunities for

00:27:09,360 --> 00:27:12,880
the kind of tech that we're talking

00:27:10,880 --> 00:27:14,559
about here is there anything like that

00:27:12,880 --> 00:27:16,880
which is close to coming to market that

00:27:14,559 --> 00:27:19,360
you know about

00:27:16,880 --> 00:27:20,399
i have seen lots of projects like

00:27:19,360 --> 00:27:23,200
there's a dotnet

00:27:20,399 --> 00:27:24,159
project that actually uses web cameras

00:27:23,200 --> 00:27:26,080
to detect

00:27:24,159 --> 00:27:27,279
to translate eye movement to mouse

00:27:26,080 --> 00:27:29,919
movement okay

00:27:27,279 --> 00:27:30,880
so there's a special part in github that

00:27:29,919 --> 00:27:33,520
it's actually about

00:27:30,880 --> 00:27:34,080
iot and accessibility so you can find

00:27:33,520 --> 00:27:37,279
out like

00:27:34,080 --> 00:27:38,320
lots of experiments and prototypes i'm

00:27:37,279 --> 00:27:41,760
aware for

00:27:38,320 --> 00:27:43,600
some mechanical gloves that are using 25

00:27:41,760 --> 00:27:47,120
to translate

00:27:43,600 --> 00:27:50,640
just like gestured language to actual

00:27:47,120 --> 00:27:52,559
typings on the screens basically the

00:27:50,640 --> 00:27:55,279
idea is that if you have something like

00:27:52,559 --> 00:27:55,840
a tiny board that you can easily program

00:27:55,279 --> 00:27:58,240
with it

00:27:55,840 --> 00:27:59,760
you can you can communicate with your

00:27:58,240 --> 00:28:03,600
mobile phone or

00:27:59,760 --> 00:28:05,520
your laptop that's a great way of

00:28:03,600 --> 00:28:08,159
creating your own hardware you know you

00:28:05,520 --> 00:28:08,720
can use like an accelerometer in order

00:28:08,159 --> 00:28:11,440
to

00:28:08,720 --> 00:28:12,640
translate movement to to actual

00:28:11,440 --> 00:28:16,480
interacting with the lab

00:28:12,640 --> 00:28:18,960
so but a few years ago this

00:28:16,480 --> 00:28:20,000
this was something like a dream for us

00:28:18,960 --> 00:28:22,240
and uh

00:28:20,000 --> 00:28:24,640
it was like an established piece of

00:28:22,240 --> 00:28:26,880
technology for big corporations but

00:28:24,640 --> 00:28:28,840
right now they're like lots of lots of

00:28:26,880 --> 00:28:31,600
products projects out there

00:28:28,840 --> 00:28:32,240
so and basically that might be a good

00:28:31,600 --> 00:28:36,159
idea for

00:28:32,240 --> 00:28:38,480
a startup or uh indie developers so

00:28:36,159 --> 00:28:39,760
you can prototype your own hardware and

00:28:38,480 --> 00:28:42,480
even

00:28:39,760 --> 00:28:43,520
make a living from it so that's actually

00:28:42,480 --> 00:28:45,039
amazing

00:28:43,520 --> 00:28:46,880
yeah and you definitely can use this

00:28:45,039 --> 00:28:48,159
stuff for prototype prototyping one of

00:28:46,880 --> 00:28:51,919
my friends companies

00:28:48,159 --> 00:28:54,080
is all around taking farm data

00:28:51,919 --> 00:28:56,880
and processing it and they did their

00:28:54,080 --> 00:28:59,600
first their first i think 10 customers

00:28:56,880 --> 00:29:00,640
just had a bunch of arduinos spritzed

00:28:59,600 --> 00:29:02,080
around their farm

00:29:00,640 --> 00:29:04,159
so it's perfect like you say for

00:29:02,080 --> 00:29:06,799
startups

00:29:04,159 --> 00:29:08,320
and it's perfect if i can't make a

00:29:06,799 --> 00:29:11,279
comment it's perfect because

00:29:08,320 --> 00:29:12,399
like eight years ago or 10 years ago

00:29:11,279 --> 00:29:14,240
javascript

00:29:12,399 --> 00:29:16,240
developers were like the scripting kits

00:29:14,240 --> 00:29:17,039
like popping around alert boxes on the

00:29:16,240 --> 00:29:19,200
browser

00:29:17,039 --> 00:29:20,399
and now right now using the same

00:29:19,200 --> 00:29:21,760
language we can

00:29:20,399 --> 00:29:23,760
basically do whatever you want you can

00:29:21,760 --> 00:29:25,360
be a backup developer for cycle variable

00:29:23,760 --> 00:29:28,960
or even a hardware developer

00:29:25,360 --> 00:29:30,000
which is quite amazing yeah one language

00:29:28,960 --> 00:29:33,279
to rule them all

00:29:30,000 --> 00:29:35,360
i say yeah you need something

00:29:33,279 --> 00:29:37,520
we have some more questions coming up

00:29:35,360 --> 00:29:39,600
and as you know people you can also vote

00:29:37,520 --> 00:29:41,760
the ones that you want to hear first

00:29:39,600 --> 00:29:43,760
so there's a voting system so you can

00:29:41,760 --> 00:29:45,360
choose which one you want to hear first

00:29:43,760 --> 00:29:47,200
so like you can see now there was one

00:29:45,360 --> 00:29:49,919
vote for the have you got a chance to

00:29:47,200 --> 00:29:52,159
play with a tesla board

00:29:49,919 --> 00:29:54,000
uh i didn't have a chance to play around

00:29:52,159 --> 00:29:57,360
with tesla

00:29:54,000 --> 00:30:00,480
it's just to be clear since

00:29:57,360 --> 00:30:02,559
uh arduino is like apertures

00:30:00,480 --> 00:30:03,760
and you can there are like tons of

00:30:02,559 --> 00:30:05,919
boards that are like

00:30:03,760 --> 00:30:07,360
not exactly clones but they're like

00:30:05,919 --> 00:30:09,360
based on arduino so

00:30:07,360 --> 00:30:10,799
they're like boards that look similar

00:30:09,360 --> 00:30:14,159
but they're using different

00:30:10,799 --> 00:30:18,320
uh different hardware specifications uh

00:30:14,159 --> 00:30:20,240
tessel is on my to-do list okay nice

00:30:18,320 --> 00:30:22,159
and don't need any do you wanna ask

00:30:20,240 --> 00:30:23,760
another question sure

00:30:22,159 --> 00:30:25,360
so we had another one coming from the

00:30:23,760 --> 00:30:28,080
audience thank you for this one um

00:30:25,360 --> 00:30:29,840
what are the most fascinating abilities

00:30:28,080 --> 00:30:31,360
of the arduino boards

00:30:29,840 --> 00:30:32,640
i've got a suspicion i know what you're

00:30:31,360 --> 00:30:34,399
going to say here but we'll let you

00:30:32,640 --> 00:30:39,120
answer it

00:30:34,399 --> 00:30:39,120
uh i really don't know to be honest so

00:30:39,360 --> 00:30:46,720
i think that the idea of like remote

00:30:42,799 --> 00:30:49,760
controlling uh a robot with your hand is

00:30:46,720 --> 00:30:51,760
fascinating like that's that's the most

00:30:49,760 --> 00:30:53,679
mesmerizing thing

00:30:51,760 --> 00:30:55,200
the video i showed you like using my

00:30:53,679 --> 00:30:58,240
instagram thing was cool

00:30:55,200 --> 00:30:59,840
but uh this is cool as well so you can

00:30:58,240 --> 00:31:02,399
actually build something like

00:30:59,840 --> 00:31:04,080
a bot that uses your instagram without

00:31:02,399 --> 00:31:07,679
using any code or getting rejected

00:31:04,080 --> 00:31:09,360
by by the algorithm but i think that

00:31:07,679 --> 00:31:10,880
the most fascinating project that

00:31:09,360 --> 00:31:14,080
someone could come up with

00:31:10,880 --> 00:31:17,519
it's like combining the styles with uh

00:31:14,080 --> 00:31:18,080
actual gesture movement so we or trying

00:31:17,519 --> 00:31:20,159
to

00:31:18,080 --> 00:31:21,600
unlock a phone using a fingerprint that

00:31:20,159 --> 00:31:23,279
would be awesome like 3d printing your

00:31:21,600 --> 00:31:26,880
fingerprint

00:31:23,279 --> 00:31:33,840
uh but it's based on your imagination

00:31:26,880 --> 00:31:33,840
yeah it's very secure yeah

00:31:39,440 --> 00:31:47,279
prison so i i actually took

00:31:44,240 --> 00:31:50,000
a rep i replicated my my fingertip

00:31:47,279 --> 00:31:50,480
my fingerprint using uh just ducking

00:31:50,000 --> 00:31:53,039
tape

00:31:50,480 --> 00:31:53,039
and it worked

00:32:00,720 --> 00:32:05,200
there is one more and um maybe i missed

00:32:04,159 --> 00:32:07,519
it but the robot

00:32:05,200 --> 00:32:08,320
does the input how do you assert on the

00:32:07,519 --> 00:32:10,080
output

00:32:08,320 --> 00:32:11,679
yeah that's a really good question so

00:32:10,080 --> 00:32:14,799
using happiness we can

00:32:11,679 --> 00:32:15,919
actually assert we can test the

00:32:14,799 --> 00:32:20,000
application

00:32:15,919 --> 00:32:23,519
uh ibm allows us to add some locators

00:32:20,000 --> 00:32:25,760
using a build that is in testing mode so

00:32:23,519 --> 00:32:27,440
we can assert using appian that a button

00:32:25,760 --> 00:32:28,559
was clicked or something was scrolled

00:32:27,440 --> 00:32:31,039
and so on

00:32:28,559 --> 00:32:34,000
but for the example with instagram i'm

00:32:31,039 --> 00:32:37,760
using comparison testing so i can

00:32:34,000 --> 00:32:40,080
detect the scroll movement and detect

00:32:37,760 --> 00:32:41,679
the everything that's moving or tapping

00:32:40,080 --> 00:32:43,840
on the screen

00:32:41,679 --> 00:32:45,360
but using appium you can actually do

00:32:43,840 --> 00:32:47,519
real assertions like

00:32:45,360 --> 00:32:50,480
i press that button and scroll through

00:32:47,519 --> 00:32:53,600
that view and so on

00:32:50,480 --> 00:32:55,279
okay so is is there any extensions to

00:32:53,600 --> 00:32:57,200
this now you've got it set up and you've

00:32:55,279 --> 00:32:58,880
got the tests running and

00:32:57,200 --> 00:33:00,399
are you going to extend this project at

00:32:58,880 --> 00:33:03,679
all

00:33:00,399 --> 00:33:05,440
uh so the whole project is open source

00:33:03,679 --> 00:33:07,120
based on tabs about the original project

00:33:05,440 --> 00:33:11,279
by json hacking squeeze

00:33:07,120 --> 00:33:15,760
actually making some amazing stuff so

00:33:11,279 --> 00:33:18,640
he tried like mods and

00:33:15,760 --> 00:33:19,519
i'm actually thinking about using the

00:33:18,640 --> 00:33:23,039
same robot

00:33:19,519 --> 00:33:27,360
in a bigger scale in order to work with

00:33:23,039 --> 00:33:30,399
tablets or even two phones in sync

00:33:27,360 --> 00:33:32,880
that's about it because it's really

00:33:30,399 --> 00:33:34,399
it's really hard to prototype something

00:33:32,880 --> 00:33:37,279
in that skill

00:33:34,399 --> 00:33:38,720
and debug that thing but thank god

00:33:37,279 --> 00:33:42,399
everything's happened to us so

00:33:38,720 --> 00:33:44,000
thanks for that jason okay so it seems

00:33:42,399 --> 00:33:45,279
like we have run out of questions so

00:33:44,000 --> 00:33:48,799
this is where we need to start

00:33:45,279 --> 00:33:48,799
freestyling at theodore

00:33:49,919 --> 00:33:53,279
so what's the next crazy thing that

00:33:51,360 --> 00:33:56,720
you're going to be building up

00:33:53,279 --> 00:33:59,679
is it since yeah since

00:33:56,720 --> 00:34:01,039
half stack is uh we have pl i have uh

00:33:59,679 --> 00:34:02,000
submitted the thought that it's going to

00:34:01,039 --> 00:34:05,200
be i think in

00:34:02,000 --> 00:34:09,280
halftime new york in 2021 okay

00:34:05,200 --> 00:34:12,639
about robotics uh smartwatch

00:34:09,280 --> 00:34:15,760
like uh smartwatch running javascript uh

00:34:12,639 --> 00:34:18,560
i also played around with my drones that

00:34:15,760 --> 00:34:19,679
are also using javascript as i told you

00:34:18,560 --> 00:34:21,359
before it was in the buildings are

00:34:19,679 --> 00:34:23,839
endless and we just need time to

00:34:21,359 --> 00:34:26,159
experiment with

00:34:23,839 --> 00:34:28,320
do you get what about incorporating any

00:34:26,159 --> 00:34:29,679
sensors into it so i know arduino stuff

00:34:28,320 --> 00:34:31,280
that's really cool when you start

00:34:29,679 --> 00:34:32,879
incorporating magnometers and

00:34:31,280 --> 00:34:34,240
accelerometers and things like that are

00:34:32,879 --> 00:34:36,399
you measuring

00:34:34,240 --> 00:34:37,599
how fast the robot's moving or anything

00:34:36,399 --> 00:34:39,919
like that or

00:34:37,599 --> 00:34:40,720
uh so the thing is that since we can

00:34:39,919 --> 00:34:43,280
touch

00:34:40,720 --> 00:34:44,560
the since we we can create something

00:34:43,280 --> 00:34:48,320
like an html grid

00:34:44,560 --> 00:34:52,000
and detect the tabs on the screen we can

00:34:48,320 --> 00:34:54,879
detect how fast every tab works but

00:34:52,000 --> 00:34:55,599
it's really fast so i tried an

00:34:54,879 --> 00:34:58,240
experiment

00:34:55,599 --> 00:35:00,079
with like plain uh do you know piano

00:34:58,240 --> 00:35:00,560
tiles it's a game that you're trying to

00:35:00,079 --> 00:35:02,480
tap

00:35:00,560 --> 00:35:03,760
things on the screen i don't but pretend

00:35:02,480 --> 00:35:06,800
i do

00:35:03,760 --> 00:35:10,480
yeah it's something like fast

00:35:06,800 --> 00:35:10,480
tapping and the robot can beat everyone

00:35:10,560 --> 00:35:14,079
so the thing is that the mechanics of

00:35:12,079 --> 00:35:15,119
dollar robots are pretty fast and

00:35:14,079 --> 00:35:18,800
accurate

00:35:15,119 --> 00:35:19,680
and they are used in 3d printing they're

00:35:18,800 --> 00:35:22,079
used in uh

00:35:19,680 --> 00:35:22,720
industrial lines so they're made for

00:35:22,079 --> 00:35:25,920
like

00:35:22,720 --> 00:35:26,320
quite fast and precise typing okay so

00:35:25,920 --> 00:35:29,680
it's

00:35:26,320 --> 00:35:30,000
unneeded then yeah okay we have had

00:35:29,680 --> 00:35:34,160
another

00:35:30,000 --> 00:35:36,000
question come in um what are the sensors

00:35:34,160 --> 00:35:37,920
that you would recommend for a person

00:35:36,000 --> 00:35:41,920
with a project who requires having

00:35:37,920 --> 00:35:44,560
full soil data analysis

00:35:41,920 --> 00:35:45,440
that's weird okay so i made a project

00:35:44,560 --> 00:35:48,800
myself

00:35:45,440 --> 00:35:50,000
so so we're talking about detecting

00:35:48,800 --> 00:35:53,200
nutritions on soil

00:35:50,000 --> 00:35:55,760
right i guess yeah okay so yeah

00:35:53,200 --> 00:35:57,680
we can't you can build your own by the

00:35:55,760 --> 00:36:00,079
way if you want to think me

00:35:57,680 --> 00:36:02,000
feel free on my tutorial github i've got

00:36:00,079 --> 00:36:04,640
to help you out so

00:36:02,000 --> 00:36:05,680
i have placed a similar setup for my

00:36:04,640 --> 00:36:10,079
plants because

00:36:05,680 --> 00:36:11,599
i'm a serial plant killer and

00:36:10,079 --> 00:36:13,440
so the thing is you need a humidity

00:36:11,599 --> 00:36:14,320
sensor in order to detect humidity in

00:36:13,440 --> 00:36:17,760
the room

00:36:14,320 --> 00:36:18,800
uh photo a a ir sensor in order to

00:36:17,760 --> 00:36:22,640
detect uh

00:36:18,800 --> 00:36:26,400
how bright the sun sunlight hits your

00:36:22,640 --> 00:36:28,079
your actual plants and

00:36:26,400 --> 00:36:29,440
you can also use the humidity sensor in

00:36:28,079 --> 00:36:32,480
order to detect how well

00:36:29,440 --> 00:36:35,599
the soil is and if you search

00:36:32,480 --> 00:36:38,079
in uh in various

00:36:35,599 --> 00:36:39,119
uh take places like or even in bay you

00:36:38,079 --> 00:36:42,320
can find

00:36:39,119 --> 00:36:43,680
uh nutrition detection sensors that you

00:36:42,320 --> 00:36:47,680
can actually

00:36:43,680 --> 00:36:48,960
see how acid or how nutrition the actual

00:36:47,680 --> 00:36:51,359
cell is

00:36:48,960 --> 00:36:53,200
and you can build everything up you can

00:36:51,359 --> 00:36:55,760
connect everything up with your

00:36:53,200 --> 00:36:57,200
board you can even use a board that

00:36:55,760 --> 00:37:00,800
connects to wi-fi

00:36:57,200 --> 00:37:02,960
like esp32 or

00:37:00,800 --> 00:37:04,480
an extension for the arduino and you're

00:37:02,960 --> 00:37:07,760
ready to go

00:37:04,480 --> 00:37:08,160
okay so how many um soil sensors did you

00:37:07,760 --> 00:37:09,839
fry

00:37:08,160 --> 00:37:12,320
because when i set something up like

00:37:09,839 --> 00:37:12,720
that i kept on watering the sensor which

00:37:12,320 --> 00:37:15,359
was

00:37:12,720 --> 00:37:17,200
isn't a good thing sensors are a bit

00:37:15,359 --> 00:37:18,079
hard to fly because you're just reading

00:37:17,200 --> 00:37:20,640
data

00:37:18,079 --> 00:37:21,520
you're not send current to the actual

00:37:20,640 --> 00:37:24,240
sensor so

00:37:21,520 --> 00:37:26,079
it's a it's really hard to fry a sensor

00:37:24,240 --> 00:37:29,359
we are actually frying leds

00:37:26,079 --> 00:37:31,680
and uh i don't know things with

00:37:29,359 --> 00:37:33,040
like solenoids and things like that or

00:37:31,680 --> 00:37:34,880
stepper motors

00:37:33,040 --> 00:37:37,599
i love the smell of a burning stepper

00:37:34,880 --> 00:37:40,000
motor in the morning

00:37:37,599 --> 00:37:42,400
and i think with that we need to wrap up

00:37:40,000 --> 00:37:45,040
now aris don't we

00:37:42,400 --> 00:37:46,640
yeah there is a there is one more but

00:37:45,040 --> 00:37:48,640
what people can do they can

00:37:46,640 --> 00:37:51,119
they can meet you on a table they can

00:37:48,640 --> 00:37:53,440
switch on the cameras and the microphone

00:37:51,119 --> 00:37:55,119
and they can talk to you in person do

00:37:53,440 --> 00:37:57,040
the same thing

00:37:55,119 --> 00:37:58,960
with the sponsors as you know we have

00:37:57,040 --> 00:38:00,880
some prizes for you

00:37:58,960 --> 00:38:02,240
so don't forget we have this treasure

00:38:00,880 --> 00:38:04,079
hunt going on

00:38:02,240 --> 00:38:05,440
so we need to go around the tables but

00:38:04,079 --> 00:38:07,280
yeah um

00:38:05,440 --> 00:38:08,880
you can go to a table and people can

00:38:07,280 --> 00:38:11,520
come and interact with you

00:38:08,880 --> 00:38:12,720
like the way they were connected in the

00:38:11,520 --> 00:38:14,000
face-to-face conference

00:38:12,720 --> 00:38:18,720
we we have that ability with the

00:38:14,000 --> 00:38:18,720
conference so yeah feel free to go and

00:38:20,880 --> 00:38:26,000
yes thank you so much thank you thank

00:38:23,760 --> 00:38:33,839
you see you all for the next tour

00:38:26,000 --> 00:38:33,839
yeah sure bye

00:38:37,440 --> 00:38:39,520

YouTube URL: https://www.youtube.com/watch?v=slwaq16nuho


