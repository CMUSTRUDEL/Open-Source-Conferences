Title: The Mysterious Life of Web Apps in the Background - Max Firtman  - CityJS Conf 2020
Publication date: 2020-10-03
Playlist: CityJS Conf 2020
Description: 
	When coding web apps, understanding the life cycle is crucial to offer the best possible experience. In this session, we will analyze the lifecycle of a web app on the desktop, Android, and iOS in different scenarios, such as what happens in the background on standalone PWAs, browser's tab, and WebViews. We will analyze the Page Visibility API and the recent Page Lifecycle API with real-world examples, including how to save and restore the app's state using new DOM events (resume and freeze) and polyfills for non-compatible browsers, creating hooks and React design patterns. 

We'll also cover what's possible with the Clients API within a Service Worker in terms of detection, messaging, and notifications.

Understanding this mysterious life in the background will help us understand how to save battery, how to deal with games, timer-based tasks and animations, AND how to announce our server or service worker that our context might disappear or that it went back from a frozen state.  We will see examples in real-time on how different browsers react with standard timers, requestAnimationFrame calls, and pending network requests when the web app goes to the background.


Bio
Max Firtman (@firt) is a mobile + web developer, trainer, speaker, and writer. He has authored many books, including Programming the Mobile Web and High Performance Mobile Web published by Oâ€™Reilly Media, and many online courses at Lynda, LinkedIn Learning, PluralSight, O'Reilly Learning, Udemy and more publishers. He is a frequent speaker at conferences worldwide and he has been widely recognized for his work in the mobile-web community. He teaches mobile (Android & iOS), HTML5, PWA and web performance trainings for top companies around the world.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:18,060 --> 00:00:25,279
[Music]

00:00:22,720 --> 00:00:26,720
hello welcome to the mysterious life of

00:00:25,279 --> 00:00:29,199
web apps in the background

00:00:26,720 --> 00:00:30,880
my name is maximiliano ferdman i'm third

00:00:29,199 --> 00:00:31,679
on twitter and i'm a mobile web

00:00:30,880 --> 00:00:33,520
developer

00:00:31,679 --> 00:00:36,000
i'm currently in argentina that's my

00:00:33,520 --> 00:00:37,760
home and when there is no pandemic i'm

00:00:36,000 --> 00:00:40,079
typically a frequent flyer

00:00:37,760 --> 00:00:43,280
i've been doing web since that version

00:00:40,079 --> 00:00:44,960
of netscape that you see on the screen

00:00:43,280 --> 00:00:46,960
i've been doing consulting and trainings

00:00:44,960 --> 00:00:48,719
at big companies also small companies

00:00:46,960 --> 00:00:51,760
around the world

00:00:48,719 --> 00:00:53,760
as well as publishing video courses at

00:00:51,760 --> 00:00:56,399
different places such as pluralsight

00:00:53,760 --> 00:01:00,239
o'reilly and linkedin learning

00:00:56,399 --> 00:01:03,120
i've been writing a lot lately on pwas

00:01:00,239 --> 00:01:05,680
and web performance and finally i have

00:01:03,120 --> 00:01:07,360
just launched my new website fur.dab

00:01:05,680 --> 00:01:09,119
where you can find more information

00:01:07,360 --> 00:01:10,320
about the topics that we will cover in

00:01:09,119 --> 00:01:12,960
today

00:01:10,320 --> 00:01:14,479
so there is a mysterious life of web

00:01:12,960 --> 00:01:16,799
apps in the background because

00:01:14,479 --> 00:01:17,840
what happens with our web app with our

00:01:16,799 --> 00:01:20,960
pwa

00:01:17,840 --> 00:01:23,439
or just the normal website when the user

00:01:20,960 --> 00:01:25,119
sends that app to the background or when

00:01:23,439 --> 00:01:27,520
the user sends the browser to the

00:01:25,119 --> 00:01:30,159
background we actually don't know

00:01:27,520 --> 00:01:30,799
we are not sure what happens with our

00:01:30,159 --> 00:01:35,040
content

00:01:30,799 --> 00:01:37,840
with our timers and with our threads

00:01:35,040 --> 00:01:38,479
so why we should care about this well

00:01:37,840 --> 00:01:40,640
first

00:01:38,479 --> 00:01:42,720
to improve user experience that's the

00:01:40,640 --> 00:01:45,200
first important part because sometimes

00:01:42,720 --> 00:01:46,640
if we don't know what's going on when

00:01:45,200 --> 00:01:49,200
we're going back to the app

00:01:46,640 --> 00:01:51,600
from the background the experience is

00:01:49,200 --> 00:01:54,960
not the best one

00:01:51,600 --> 00:01:58,399
also to save resources energy

00:01:54,960 --> 00:02:00,320
memory cpu usage and storage

00:01:58,399 --> 00:02:02,960
because when we are in the background we

00:02:00,320 --> 00:02:05,439
should change what we are doing

00:02:02,960 --> 00:02:08,160
also to stop timers and something

00:02:05,439 --> 00:02:10,479
similar happen with pending requests

00:02:08,160 --> 00:02:12,640
if you are requesting data from the

00:02:10,479 --> 00:02:13,440
server or if you have a web socket for

00:02:12,640 --> 00:02:15,840
example

00:02:13,440 --> 00:02:16,800
you should stop that in the background

00:02:15,840 --> 00:02:19,920
if you want to

00:02:16,800 --> 00:02:22,800
and if you know what you're doing so

00:02:19,920 --> 00:02:24,000
let's reveal the mystery for that we

00:02:22,800 --> 00:02:25,680
will be spying

00:02:24,000 --> 00:02:27,360
in the background so i created some kind

00:02:25,680 --> 00:02:29,920
of a hidden camera

00:02:27,360 --> 00:02:31,519
to spy on web apps in the background and

00:02:29,920 --> 00:02:34,560
we're going to see

00:02:31,519 --> 00:02:36,800
frames per second so what happens with

00:02:34,560 --> 00:02:38,319
frame rate in the background what

00:02:36,800 --> 00:02:41,120
happens with our timers

00:02:38,319 --> 00:02:42,959
such as set interval or set timeout so

00:02:41,120 --> 00:02:46,400
what happens with the frequency

00:02:42,959 --> 00:02:47,040
and execution rights for timers also we

00:02:46,400 --> 00:02:49,440
will see

00:02:47,040 --> 00:02:50,319
what happens with web workers if we have

00:02:49,440 --> 00:02:53,440
timers

00:02:50,319 --> 00:02:55,200
inside the worker thread and finally

00:02:53,440 --> 00:02:56,879
something similar but with service

00:02:55,200 --> 00:03:00,000
workers not with threat

00:02:56,879 --> 00:03:03,200
workers for that i have created

00:03:00,000 --> 00:03:06,319
this website that will give us

00:03:03,200 --> 00:03:08,560
the current information on frames per

00:03:06,319 --> 00:03:10,720
second on request animation frame

00:03:08,560 --> 00:03:12,800
then animation like css animation what

00:03:10,720 --> 00:03:15,440
happens with the css animation

00:03:12,800 --> 00:03:16,560
the timer frequency so we will see there

00:03:15,440 --> 00:03:19,519
if there is some

00:03:16,560 --> 00:03:20,319
throttling in timer execution as well as

00:03:19,519 --> 00:03:23,120
at the bottom

00:03:20,319 --> 00:03:25,040
worker thread and service worker so

00:03:23,120 --> 00:03:26,879
let's see this in action

00:03:25,040 --> 00:03:28,720
let's start with google chrome on

00:03:26,879 --> 00:03:31,840
desktop in this case

00:03:28,720 --> 00:03:34,080
we have a tab we can see it's live

00:03:31,840 --> 00:03:35,920
everything is running but what happens

00:03:34,080 --> 00:03:39,200
for example if you now go

00:03:35,920 --> 00:03:40,400
and open a new tab in that case it goes

00:03:39,200 --> 00:03:42,400
to hidden

00:03:40,400 --> 00:03:44,480
and basically when it goes to hidden we

00:03:42,400 --> 00:03:47,760
can detect that with javascript

00:03:44,480 --> 00:03:49,680
and now we don't have css animation

00:03:47,760 --> 00:03:50,879
and we don't we don't have request

00:03:49,680 --> 00:03:53,599
animation frame

00:03:50,879 --> 00:03:54,480
so if we are using that api that api

00:03:53,599 --> 00:03:56,799
won't be fire

00:03:54,480 --> 00:03:59,200
because we are not visible on the screen

00:03:56,799 --> 00:04:01,360
however looking at the timer frequency

00:03:59,200 --> 00:04:03,840
in that case we have a throttle and

00:04:01,360 --> 00:04:05,920
right now it's actually to one second

00:04:03,840 --> 00:04:06,879
so if you have no matter the frequency

00:04:05,920 --> 00:04:10,560
that you set up

00:04:06,879 --> 00:04:13,599
in your set timeout or set interval

00:04:10,560 --> 00:04:16,400
you will be executed once per second

00:04:13,599 --> 00:04:16,880
but your worker thread and your service

00:04:16,400 --> 00:04:20,160
worker

00:04:16,880 --> 00:04:23,680
are fully 100 so they can still

00:04:20,160 --> 00:04:25,440
execute code at 100 speed

00:04:23,680 --> 00:04:27,520
in terms of throttling so there is no

00:04:25,440 --> 00:04:29,759
throttling on the worker thread

00:04:27,520 --> 00:04:30,960
or in the service worker of course if

00:04:29,759 --> 00:04:34,320
you go back

00:04:30,960 --> 00:04:36,479
to that tab it will start running again

00:04:34,320 --> 00:04:38,320
in case of the animation frame per

00:04:36,479 --> 00:04:41,440
seconds and request animation frame

00:04:38,320 --> 00:04:42,080
if we minimize the window it's exactly

00:04:41,440 --> 00:04:44,400
the same

00:04:42,080 --> 00:04:45,600
it's like opening a new tab because

00:04:44,400 --> 00:04:47,840
actually it's not visible

00:04:45,600 --> 00:04:50,479
when you go back it's exactly the same

00:04:47,840 --> 00:04:51,840
again and if you close the tab

00:04:50,479 --> 00:04:53,759
or even if you close the browser of

00:04:51,840 --> 00:04:56,080
course now the base is stopped

00:04:53,759 --> 00:04:57,120
the worker thread is a stop mando the

00:04:56,080 --> 00:04:59,120
service worker

00:04:57,120 --> 00:05:00,479
because the service worker we know has

00:04:59,120 --> 00:05:02,560
its own life cycle

00:05:00,479 --> 00:05:04,960
and it will still be there for a while

00:05:02,560 --> 00:05:07,199
it depends on the browser

00:05:04,960 --> 00:05:08,639
now let's see firefox in this case i

00:05:07,199 --> 00:05:10,639
have the same url

00:05:08,639 --> 00:05:12,800
on firefox on desktop we can see that

00:05:10,639 --> 00:05:14,639
it's live and if you open a new tab

00:05:12,800 --> 00:05:17,840
something similar happens here it goes

00:05:14,639 --> 00:05:19,680
to hidden now everything goes down

00:05:17,840 --> 00:05:22,080
and when you go back everything goes up

00:05:19,680 --> 00:05:23,440
again also on desktop what happens is

00:05:22,080 --> 00:05:26,800
that it will be hidden

00:05:23,440 --> 00:05:28,240
if you are covering the window with

00:05:26,800 --> 00:05:29,280
other windows so you don't need to

00:05:28,240 --> 00:05:31,360
minimize

00:05:29,280 --> 00:05:32,479
on desktop also when you are fully

00:05:31,360 --> 00:05:34,479
covering an app

00:05:32,479 --> 00:05:36,080
it will be the same it will be just like

00:05:34,479 --> 00:05:38,080
hidden and if you close

00:05:36,080 --> 00:05:40,160
the tab you will see that also the

00:05:38,080 --> 00:05:40,560
service worker will still be running but

00:05:40,160 --> 00:05:43,360
chat

00:05:40,560 --> 00:05:44,639
for a few seconds and then it will go

00:05:43,360 --> 00:05:48,639
just stopped

00:05:44,639 --> 00:05:48,639
finally safari on mac os

00:05:48,720 --> 00:05:52,880
we can see something similar when it's

00:05:50,880 --> 00:05:54,800
live if we open a new tab

00:05:52,880 --> 00:05:56,240
something similar happens but you will

00:05:54,800 --> 00:05:59,039
see that here

00:05:56,240 --> 00:06:00,160
the whole page seems to be stopped

00:05:59,039 --> 00:06:02,160
really quickly

00:06:00,160 --> 00:06:03,840
including the thread and the service

00:06:02,160 --> 00:06:06,080
worker and if you

00:06:03,840 --> 00:06:07,360
wait here a couple of seconds we will

00:06:06,080 --> 00:06:10,240
see that it goes live

00:06:07,360 --> 00:06:10,639
and it goes down every once in a while

00:06:10,240 --> 00:06:12,880
so

00:06:10,639 --> 00:06:13,840
actually it's it's changing the behavior

00:06:12,880 --> 00:06:16,000
of safari

00:06:13,840 --> 00:06:18,319
and it's actually executing your timers

00:06:16,000 --> 00:06:20,720
and everything every 10 seconds

00:06:18,319 --> 00:06:22,319
so background apps in the desktop

00:06:20,720 --> 00:06:25,919
operating systems

00:06:22,319 --> 00:06:28,400
windows mac os linux and chrome os

00:06:25,919 --> 00:06:29,440
our our app our web app will not be

00:06:28,400 --> 00:06:31,520
visible when

00:06:29,440 --> 00:06:33,280
the tag is in the background when the

00:06:31,520 --> 00:06:34,160
browser the whole browser is in the

00:06:33,280 --> 00:06:36,720
background

00:06:34,160 --> 00:06:38,240
if there is if it's a pwa in a

00:06:36,720 --> 00:06:40,240
stand-alone mode

00:06:38,240 --> 00:06:43,199
it's when the pww is in the background

00:06:40,240 --> 00:06:44,319
and also when the pwa or the website is

00:06:43,199 --> 00:06:46,319
totally covered

00:06:44,319 --> 00:06:47,759
by another window those are the

00:06:46,319 --> 00:06:50,319
situations

00:06:47,759 --> 00:06:51,280
in this case all the web apps when they

00:06:50,319 --> 00:06:53,199
are open

00:06:51,280 --> 00:06:54,880
visible or not it doesn't matter if

00:06:53,199 --> 00:06:57,120
they're visible or not

00:06:54,880 --> 00:06:58,720
they are in memory and they have

00:06:57,120 --> 00:07:01,759
execution rights

00:06:58,720 --> 00:07:02,000
but when they're not visible there will

00:07:01,759 --> 00:07:04,240
be

00:07:02,000 --> 00:07:06,639
some limits on the timers so some

00:07:04,240 --> 00:07:07,680
throttling on timers from 1 to 10

00:07:06,639 --> 00:07:10,720
seconds

00:07:07,680 --> 00:07:11,919
and also some situations might also

00:07:10,720 --> 00:07:15,199
suspend them

00:07:11,919 --> 00:07:17,280
in that case no timer execution will

00:07:15,199 --> 00:07:19,360
happen this is currently typically

00:07:17,280 --> 00:07:22,240
happening on chromium browsers

00:07:19,360 --> 00:07:24,000
that are not chrome not google chrome

00:07:22,240 --> 00:07:28,160
for example brave

00:07:24,000 --> 00:07:30,639
or sidekick so these browsers are

00:07:28,160 --> 00:07:31,360
targeting users who wants to save

00:07:30,639 --> 00:07:32,800
battery

00:07:31,360 --> 00:07:34,880
so basically when a tab is in the

00:07:32,800 --> 00:07:37,280
background or is hidden they will

00:07:34,880 --> 00:07:39,440
freeze the tab they will suspend the tab

00:07:37,280 --> 00:07:41,680
and sometimes they may even discard the

00:07:39,440 --> 00:07:44,160
top from memory

00:07:41,680 --> 00:07:45,280
remember that service workers have their

00:07:44,160 --> 00:07:47,360
own life cycle

00:07:45,280 --> 00:07:48,960
so they might still be running there for

00:07:47,360 --> 00:07:51,520
a while

00:07:48,960 --> 00:07:53,039
now it's time to talk about mobile

00:07:51,520 --> 00:07:53,759
operating system let's start with the

00:07:53,039 --> 00:07:55,919
iphone

00:07:53,759 --> 00:07:56,800
in this case i have an iphone with

00:07:55,919 --> 00:08:00,160
safari

00:07:56,800 --> 00:08:01,520
i'm running the same url and let's see

00:08:00,160 --> 00:08:04,000
what happens

00:08:01,520 --> 00:08:04,720
when we are opening a new tab something

00:08:04,000 --> 00:08:07,199
similar

00:08:04,720 --> 00:08:08,560
to desktop happen with one particular

00:08:07,199 --> 00:08:11,280
difference

00:08:08,560 --> 00:08:12,000
the timer frequency it's actually

00:08:11,280 --> 00:08:15,440
greater that

00:08:12,000 --> 00:08:18,639
on safari desktop on safari desktop

00:08:15,440 --> 00:08:20,639
the throttling can be around 10 seconds

00:08:18,639 --> 00:08:22,960
and here the throttling is

00:08:20,639 --> 00:08:23,919
500 milliseconds so while in the

00:08:22,960 --> 00:08:27,199
background

00:08:23,919 --> 00:08:29,280
our web app can execute timers once per

00:08:27,199 --> 00:08:31,599
half a second

00:08:29,280 --> 00:08:32,880
but the worker thread is there up and

00:08:31,599 --> 00:08:35,200
running so no

00:08:32,880 --> 00:08:36,880
problem with the worker thread let's see

00:08:35,200 --> 00:08:40,560
what happens when we go back

00:08:36,880 --> 00:08:42,719
as expectable it will

00:08:40,560 --> 00:08:44,959
uh start again so everything is running

00:08:42,719 --> 00:08:46,240
again but now let's see what happens in

00:08:44,959 --> 00:08:49,360
other situations

00:08:46,240 --> 00:08:51,120
such as when we open the task manager

00:08:49,360 --> 00:08:52,720
when we open the task manager or the

00:08:51,120 --> 00:08:54,560
multi window

00:08:52,720 --> 00:08:56,320
you're still visible until you go to

00:08:54,560 --> 00:08:57,760
another app so you need to wait for

00:08:56,320 --> 00:08:59,600
going to another app to actually be

00:08:57,760 --> 00:09:00,959
hidden and in this case you can see this

00:08:59,600 --> 00:09:04,480
immediately stopped

00:09:00,959 --> 00:09:05,680
everything is stopped after two to three

00:09:04,480 --> 00:09:08,160
seconds

00:09:05,680 --> 00:09:09,360
so to be honest here on my testing i

00:09:08,160 --> 00:09:12,399
found

00:09:09,360 --> 00:09:15,120
a lot of situations where my my web app

00:09:12,399 --> 00:09:17,519
were running for 30 seconds so sometimes

00:09:15,120 --> 00:09:19,200
it's two seconds sometimes it's 30

00:09:17,519 --> 00:09:20,320
seconds in the background i couldn't

00:09:19,200 --> 00:09:23,279
actually understand

00:09:20,320 --> 00:09:24,640
why it's not exactly the same on every

00:09:23,279 --> 00:09:26,080
execution

00:09:24,640 --> 00:09:28,560
so now let's see what happens with the

00:09:26,080 --> 00:09:32,000
pwa so if we install

00:09:28,560 --> 00:09:32,000
these websites in the home screen

00:09:32,080 --> 00:09:35,600
in this case it's a standalone

00:09:34,000 --> 00:09:37,760
application so it will look like

00:09:35,600 --> 00:09:39,040
any other app in the system if we go to

00:09:37,760 --> 00:09:41,360
the home screen for example

00:09:39,040 --> 00:09:42,160
it will stay there for two seconds and

00:09:41,360 --> 00:09:44,560
then everything is

00:09:42,160 --> 00:09:45,279
stopped also the worker thread so

00:09:44,560 --> 00:09:48,320
everything

00:09:45,279 --> 00:09:50,640
is stopped okay if we go back everything

00:09:48,320 --> 00:09:53,440
restarts so it was still in memory

00:09:50,640 --> 00:09:55,839
it's not deleting the app from memory

00:09:53,440 --> 00:09:58,320
okay makes sense and something weird

00:09:55,839 --> 00:10:00,080
look at this if i open error horner

00:09:58,320 --> 00:10:03,600
that's another pwa

00:10:00,080 --> 00:10:04,399
so air horner is not our pwa it's now

00:10:03,600 --> 00:10:07,600
it's running

00:10:04,399 --> 00:10:08,160
but our pwa is also running so this is

00:10:07,600 --> 00:10:11,680
weird

00:10:08,160 --> 00:10:12,959
when you open a pwa all the pwas that

00:10:11,680 --> 00:10:16,000
are still in memory

00:10:12,959 --> 00:10:18,720
are also executing again so

00:10:16,000 --> 00:10:19,839
i think it's like unexpected behavior i

00:10:18,720 --> 00:10:22,000
don't think this

00:10:19,839 --> 00:10:23,040
this was on purpose i i don't want to

00:10:22,000 --> 00:10:25,120
say bad

00:10:23,040 --> 00:10:27,040
but it's something weird so when you

00:10:25,120 --> 00:10:29,519
open a pwa if there are other

00:10:27,040 --> 00:10:31,279
pwas in memory that are suspended so

00:10:29,519 --> 00:10:34,240
they are not executing code

00:10:31,279 --> 00:10:34,959
now there can execute code again okay so

00:10:34,240 --> 00:10:38,079
it's like

00:10:34,959 --> 00:10:41,200
the end the pwa engine

00:10:38,079 --> 00:10:44,720
when it has execution rights it will let

00:10:41,200 --> 00:10:48,880
all the pwas to execute

00:10:44,720 --> 00:10:51,360
so that's a weird one to be honest

00:10:48,880 --> 00:10:53,279
and of course if you close that pwa in

00:10:51,360 --> 00:10:56,480
that case it's not in memory anymore

00:10:53,279 --> 00:10:59,519
so now it's stopped

00:10:56,480 --> 00:11:00,560
so background web apps in mobile ios and

00:10:59,519 --> 00:11:04,399
ipad os

00:11:00,560 --> 00:11:06,560
our our pwa or web app won't be visible

00:11:04,399 --> 00:11:07,839
if we lock the screen so when you turn

00:11:06,560 --> 00:11:10,000
off your phone

00:11:07,839 --> 00:11:10,880
if you go to the home screen if you open

00:11:10,000 --> 00:11:14,000
another tab

00:11:10,880 --> 00:11:16,640
or if you open another app

00:11:14,000 --> 00:11:17,200
in that case web apps in the background

00:11:16,640 --> 00:11:20,320
can be

00:11:17,200 --> 00:11:22,880
memory or not it depends on the os

00:11:20,320 --> 00:11:24,560
so if there are memory you will have

00:11:22,880 --> 00:11:25,120
different behavior when you go back to

00:11:24,560 --> 00:11:26,959
the app

00:11:25,120 --> 00:11:28,959
if you go back to the app it's still in

00:11:26,959 --> 00:11:30,640
memory so it will be freeze

00:11:28,959 --> 00:11:32,800
and if it's not in memory anymore it

00:11:30,640 --> 00:11:34,880
will start from a scratch

00:11:32,800 --> 00:11:36,240
the ui that you see when you are seeing

00:11:34,880 --> 00:11:39,120
all the apps

00:11:36,240 --> 00:11:40,079
open it's actually a screenshot it's not

00:11:39,120 --> 00:11:42,000
actually updated

00:11:40,079 --> 00:11:43,839
so if you can execute code in the

00:11:42,000 --> 00:11:44,880
background be careful because if you

00:11:43,839 --> 00:11:46,959
change the dom

00:11:44,880 --> 00:11:48,000
or anything on the screen it won't

00:11:46,959 --> 00:11:50,240
appear

00:11:48,000 --> 00:11:52,720
in the user's interface it's just a

00:11:50,240 --> 00:11:55,839
screenshot what you see there

00:11:52,720 --> 00:11:58,399
and you will have 2 or 30 seconds of

00:11:55,839 --> 00:12:01,680
execution after leaving foreground

00:11:58,399 --> 00:12:03,600
again i'm not yet sure why that happens

00:12:01,680 --> 00:12:04,720
why sometimes in 30 seconds sometimes

00:12:03,600 --> 00:12:06,480
it's two seconds

00:12:04,720 --> 00:12:08,959
but that's the time that you have to

00:12:06,480 --> 00:12:12,240
execute code in the background when you

00:12:08,959 --> 00:12:13,680
get off the foreground and if the pwa is

00:12:12,240 --> 00:12:16,959
actually memory

00:12:13,680 --> 00:12:20,480
opening other pwas that is not your pwa

00:12:16,959 --> 00:12:23,040
will also give your pwa execution rights

00:12:20,480 --> 00:12:24,000
so you will be able to execute code in

00:12:23,040 --> 00:12:26,800
the background

00:12:24,000 --> 00:12:28,399
when the user is using other pwas that's

00:12:26,800 --> 00:12:31,920
a weird one

00:12:28,399 --> 00:12:34,880
so we saw desktop and ios

00:12:31,920 --> 00:12:36,959
it's time for android so this is the

00:12:34,880 --> 00:12:40,560
same pwa on android

00:12:36,959 --> 00:12:43,600
when we start we have the same situation

00:12:40,560 --> 00:12:43,600
here everything is on

00:12:43,839 --> 00:12:46,959
when we open a new tab of course we go

00:12:45,839 --> 00:12:49,279
to hidden

00:12:46,959 --> 00:12:50,880
and everything goes down a little bit we

00:12:49,279 --> 00:12:54,079
also have a

00:12:50,880 --> 00:12:57,760
throttle in the in the timers so

00:12:54,079 --> 00:13:00,880
timers are also throttled as expected

00:12:57,760 --> 00:13:03,920
and now let's see what happens

00:13:00,880 --> 00:13:05,279
when we go to the home screen now our

00:13:03,920 --> 00:13:08,480
pwa is hidden

00:13:05,279 --> 00:13:10,800
of course frames rates are zero so they

00:13:08,480 --> 00:13:12,000
they are completely down and the

00:13:10,800 --> 00:13:14,480
frequency of the timer

00:13:12,000 --> 00:13:17,360
is also throttled the worker thread and

00:13:14,480 --> 00:13:20,079
the service worker are fully capable

00:13:17,360 --> 00:13:21,040
so they are still executing code even if

00:13:20,079 --> 00:13:24,800
you are continuing

00:13:21,040 --> 00:13:25,440
using your phone okay and the weird part

00:13:24,800 --> 00:13:28,959
is that

00:13:25,440 --> 00:13:31,519
will be there for five minutes

00:13:28,959 --> 00:13:32,160
so our app will be there for five

00:13:31,519 --> 00:13:34,880
minutes

00:13:32,160 --> 00:13:35,920
unless you as you saw here you shall

00:13:34,880 --> 00:13:38,480
skill the app

00:13:35,920 --> 00:13:39,920
in that case it will be stopped or

00:13:38,480 --> 00:13:41,839
unless the system needs

00:13:39,920 --> 00:13:43,199
memory and it will kill your app so you

00:13:41,839 --> 00:13:46,839
have five minutes

00:13:43,199 --> 00:13:48,079
or less to execute code in the

00:13:46,839 --> 00:13:51,440
background

00:13:48,079 --> 00:13:54,560
pwa so if you install that website

00:13:51,440 --> 00:13:55,839
as a pwa in this case it's actually a

00:13:54,560 --> 00:13:58,720
similar situation

00:13:55,839 --> 00:14:01,279
because it acts like a browser's tab

00:13:58,720 --> 00:14:04,079
using chrome i'm still using chrome here

00:14:01,279 --> 00:14:06,160
so something that happens here in

00:14:04,079 --> 00:14:09,440
android is that when you open

00:14:06,160 --> 00:14:11,760
the the multitask manager in different

00:14:09,440 --> 00:14:15,279
os it has different names

00:14:11,760 --> 00:14:18,399
your your web app goes to hidden

00:14:15,279 --> 00:14:18,800
so if you see here it's hidden now even

00:14:18,399 --> 00:14:21,440
if i'm

00:14:18,800 --> 00:14:22,639
still there right so that's not

00:14:21,440 --> 00:14:25,199
happening on ios

00:14:22,639 --> 00:14:25,920
on ios your app is still visible unless

00:14:25,199 --> 00:14:29,680
you actually

00:14:25,920 --> 00:14:30,639
change the active app but here if you

00:14:29,680 --> 00:14:34,160
access

00:14:30,639 --> 00:14:37,040
this um this screen

00:14:34,160 --> 00:14:39,760
of to select other apps you're actually

00:14:37,040 --> 00:14:39,760
in the background

00:14:42,160 --> 00:14:46,320
let's see now what happens if i change

00:14:44,320 --> 00:14:48,160
my

00:14:46,320 --> 00:14:49,920
my app when i'm going back it goes

00:14:48,160 --> 00:14:50,480
visible again and if you go to the home

00:14:49,920 --> 00:14:52,560
screen

00:14:50,480 --> 00:14:53,680
it's hidden and it will still be there

00:14:52,560 --> 00:14:58,079
running for

00:14:53,680 --> 00:15:00,959
five minutes as i mentioned before

00:14:58,079 --> 00:15:01,760
so background helps in mobile operating

00:15:00,959 --> 00:15:04,160
systems on

00:15:01,760 --> 00:15:05,519
android the app will not be visible so

00:15:04,160 --> 00:15:07,760
will be hidden

00:15:05,519 --> 00:15:08,880
if you go to the lock screen so you turn

00:15:07,760 --> 00:15:10,959
off your phone

00:15:08,880 --> 00:15:12,240
if you go to the home screen if you open

00:15:10,959 --> 00:15:14,000
the multitask manager

00:15:12,240 --> 00:15:15,440
so that's different that's a difference

00:15:14,000 --> 00:15:17,760
compared with ios

00:15:15,440 --> 00:15:18,639
if you open other tab or if you open

00:15:17,760 --> 00:15:21,600
other app

00:15:18,639 --> 00:15:22,720
okay and web apps in the background can

00:15:21,600 --> 00:15:26,160
be memory or not

00:15:22,720 --> 00:15:28,240
similar to ios the ui is again

00:15:26,160 --> 00:15:30,320
just a screenshot so when you are in the

00:15:28,240 --> 00:15:30,959
background executing code be very

00:15:30,320 --> 00:15:32,959
careful

00:15:30,959 --> 00:15:36,320
you are not you don't have complete

00:15:32,959 --> 00:15:39,199
power to do wherever you want

00:15:36,320 --> 00:15:41,279
and on chrome you will have up to five

00:15:39,199 --> 00:15:43,759
minutes of execution in the background

00:15:41,279 --> 00:15:44,560
okay remember it can be less if the user

00:15:43,759 --> 00:15:48,320
is actually

00:15:44,560 --> 00:15:51,040
killing the app or throwing the app away

00:15:48,320 --> 00:15:53,040
or if the system needs memory there are

00:15:51,040 --> 00:15:54,160
30 more seconds for the service worker

00:15:53,040 --> 00:15:57,199
so the service worker

00:15:54,160 --> 00:15:58,880
can have actually 5.5 minutes

00:15:57,199 --> 00:16:01,040
to execute if you're using other

00:15:58,880 --> 00:16:03,440
browsers for example on firefox

00:16:01,040 --> 00:16:04,160
the page is stopped immediately so on

00:16:03,440 --> 00:16:06,320
firefox

00:16:04,160 --> 00:16:08,320
when you go to the background the page

00:16:06,320 --> 00:16:10,000
is stopped immediately with your timers

00:16:08,320 --> 00:16:12,320
with everything you have there

00:16:10,000 --> 00:16:13,040
but the service worker will have 30

00:16:12,320 --> 00:16:15,920
seconds

00:16:13,040 --> 00:16:16,399
and the worker thread will have three

00:16:15,920 --> 00:16:19,440
minutes

00:16:16,399 --> 00:16:20,320
in the background so on firefox on

00:16:19,440 --> 00:16:21,839
android

00:16:20,320 --> 00:16:23,440
if you need to do something in the

00:16:21,839 --> 00:16:25,839
background i know like

00:16:23,440 --> 00:16:26,720
updating data it should be done in the

00:16:25,839 --> 00:16:29,279
worker

00:16:26,720 --> 00:16:32,000
not in the main context because it's

00:16:29,279 --> 00:16:35,360
been stopped immediately

00:16:32,000 --> 00:16:38,399
so as a summary this is a diagram and

00:16:35,360 --> 00:16:41,440
don't take this as the final word

00:16:38,399 --> 00:16:44,560
because algorithms are complex and

00:16:41,440 --> 00:16:46,959
it it defers perversion and there are a

00:16:44,560 --> 00:16:49,519
lot of situations around this but

00:16:46,959 --> 00:16:50,160
freezing the first row here is the

00:16:49,519 --> 00:16:51,759
ability

00:16:50,160 --> 00:16:53,600
when you go to the background the

00:16:51,759 --> 00:16:55,920
ability that the browser has

00:16:53,600 --> 00:16:58,560
to actually freeze your app so it's not

00:16:55,920 --> 00:17:00,720
going to execute any code anymore

00:16:58,560 --> 00:17:01,839
okay it's still in memory without

00:17:00,720 --> 00:17:05,199
execution

00:17:01,839 --> 00:17:05,919
destroy has to do with okay you were

00:17:05,199 --> 00:17:08,160
frozen

00:17:05,919 --> 00:17:09,439
and you know what you're done i'm going

00:17:08,160 --> 00:17:12,079
to destroy you

00:17:09,439 --> 00:17:13,919
and in that case uh it won't be memory

00:17:12,079 --> 00:17:15,839
anymore so if the user goes back to the

00:17:13,919 --> 00:17:19,600
app it's not going to work

00:17:15,839 --> 00:17:22,480
so um in terms of timer throttling

00:17:19,600 --> 00:17:23,679
on desktop it's typically one second

00:17:22,480 --> 00:17:27,039
that's the average

00:17:23,679 --> 00:17:28,240
on firefox and chrome safari is going

00:17:27,039 --> 00:17:31,360
through throttle

00:17:28,240 --> 00:17:34,640
by typically 10 seconds so on the first

00:17:31,360 --> 00:17:36,640
three seconds you might get um

00:17:34,640 --> 00:17:38,400
a couple of executions in the background

00:17:36,640 --> 00:17:41,440
but after that 10 seconds

00:17:38,400 --> 00:17:43,280
will be actually the the actual timer

00:17:41,440 --> 00:17:44,720
and something similar happens on chrome

00:17:43,280 --> 00:17:48,160
after five minutes

00:17:44,720 --> 00:17:50,559
so after a tab or a pwa is hidden

00:17:48,160 --> 00:17:51,200
for five minutes then the throttling

00:17:50,559 --> 00:17:54,320
will

00:17:51,200 --> 00:17:57,520
jump to to one minute so then one

00:17:54,320 --> 00:18:00,640
timer every minute okay

00:17:57,520 --> 00:18:01,600
and on mobile it's one second on chrome

00:18:00,640 --> 00:18:04,320
and firefox

00:18:01,600 --> 00:18:05,520
and half a second on ios and ipad os so

00:18:04,320 --> 00:18:08,480
in the background

00:18:05,520 --> 00:18:10,480
your timers will actually be fire every

00:18:08,480 --> 00:18:12,559
500 milliseconds

00:18:10,480 --> 00:18:14,240
regarding the worker thread actually

00:18:12,559 --> 00:18:16,880
they have more power so

00:18:14,240 --> 00:18:18,799
if you create a web worker in javascript

00:18:16,880 --> 00:18:21,440
they will have more power

00:18:18,799 --> 00:18:23,440
compared with the standard timers so on

00:18:21,440 --> 00:18:24,640
desktop they have unlimited power in the

00:18:23,440 --> 00:18:26,960
background

00:18:24,640 --> 00:18:28,720
um again there might be some exceptions

00:18:26,960 --> 00:18:31,520
to that but by default

00:18:28,720 --> 00:18:32,240
it's unlimited on android chromium it's

00:18:31,520 --> 00:18:34,480
five minutes

00:18:32,240 --> 00:18:36,320
on android firefox in three minutes and

00:18:34,480 --> 00:18:39,360
on ios and input os is the same

00:18:36,320 --> 00:18:40,960
two seconds to 30 seconds right and the

00:18:39,360 --> 00:18:42,559
service worker we need to remember it

00:18:40,960 --> 00:18:45,600
has its own life cycle

00:18:42,559 --> 00:18:48,880
and here it seems to have more power

00:18:45,600 --> 00:18:50,240
on on chromium that if you if you if you

00:18:48,880 --> 00:18:53,200
if you're in the service worker doing

00:18:50,240 --> 00:18:55,280
stuff like using actually cpu

00:18:53,200 --> 00:18:57,440
you can be there up to five minutes five

00:18:55,280 --> 00:18:59,440
five minutes.5 actually

00:18:57,440 --> 00:19:01,039
and on firefox it doesn't matter after

00:18:59,440 --> 00:19:02,799
30 seconds it will kill you

00:19:01,039 --> 00:19:04,799
the same as safari that it will

00:19:02,799 --> 00:19:06,080
typically kill you on 10 seconds

00:19:04,799 --> 00:19:08,840
so it doesn't matter if you're still

00:19:06,080 --> 00:19:12,559
doing things you have only 10 seconds

00:19:08,840 --> 00:19:15,120
okay cool so background detection so

00:19:12,559 --> 00:19:16,160
how can you detect if the user goes to

00:19:15,120 --> 00:19:18,960
the background

00:19:16,160 --> 00:19:21,039
that now you know what happens well

00:19:18,960 --> 00:19:22,320
typically we are going to use visibility

00:19:21,039 --> 00:19:24,000
change detection

00:19:22,320 --> 00:19:25,600
and this is available on all platforms

00:19:24,000 --> 00:19:27,120
and we can detect when the user is going

00:19:25,600 --> 00:19:29,919
to running to pause

00:19:27,120 --> 00:19:30,559
state to run into running or pause to

00:19:29,919 --> 00:19:33,600
running

00:19:30,559 --> 00:19:35,360
in this case we use the event listener

00:19:33,600 --> 00:19:36,559
visibility change so it's actually

00:19:35,360 --> 00:19:38,640
pretty simple

00:19:36,559 --> 00:19:40,720
a window and even listener visibility

00:19:38,640 --> 00:19:41,200
change and you're going to check for the

00:19:40,720 --> 00:19:43,919
current

00:19:41,200 --> 00:19:45,039
visibility state it can be hidden or

00:19:43,919 --> 00:19:46,880
visible

00:19:45,039 --> 00:19:48,080
if it's hidden it means that you are now

00:19:46,880 --> 00:19:51,360
in the background

00:19:48,080 --> 00:19:53,840
okay or or on desktop maybe you're not

00:19:51,360 --> 00:19:54,559
in the background in terms of minimized

00:19:53,840 --> 00:19:56,640
or

00:19:54,559 --> 00:19:57,679
maybe there is another window on top of

00:19:56,640 --> 00:20:00,320
your window and that's

00:19:57,679 --> 00:20:01,039
that's not visible okay that's hidden so

00:20:00,320 --> 00:20:03,919
remember that

00:20:01,039 --> 00:20:05,760
in this case now you should know that

00:20:03,919 --> 00:20:06,720
your timers will be throttled for

00:20:05,760 --> 00:20:10,320
example

00:20:06,720 --> 00:20:11,600
and on mobile devices your your life

00:20:10,320 --> 00:20:13,760
expectation

00:20:11,600 --> 00:20:15,360
is not the same that means that you

00:20:13,760 --> 00:20:18,400
might be suspended

00:20:15,360 --> 00:20:19,760
in a couple of seconds or minutes on

00:20:18,400 --> 00:20:22,000
chromium browsers

00:20:19,760 --> 00:20:23,200
you can also detect when you go to

00:20:22,000 --> 00:20:25,760
freeze

00:20:23,200 --> 00:20:27,120
in that case you can detect the even

00:20:25,760 --> 00:20:29,520
listener freeze

00:20:27,120 --> 00:20:30,960
freeze is actually when you will still

00:20:29,520 --> 00:20:33,520
be in memory but without

00:20:30,960 --> 00:20:36,159
any execution and for example you can

00:20:33,520 --> 00:20:38,159
save the current app state

00:20:36,159 --> 00:20:40,480
and because we have threes we have

00:20:38,159 --> 00:20:41,919
resume in this case you're going back

00:20:40,480 --> 00:20:43,760
from suspension

00:20:41,919 --> 00:20:45,600
and there is no need to restore that

00:20:43,760 --> 00:20:46,960
state because you were still in memory

00:20:45,600 --> 00:20:50,400
okay so you are

00:20:46,960 --> 00:20:52,720
only decreasing yourself um

00:20:50,400 --> 00:20:54,159
sometimes on some operating systems it

00:20:52,720 --> 00:20:56,880
might happen that when you go

00:20:54,159 --> 00:20:58,960
back to the app or to the web app it's

00:20:56,880 --> 00:21:01,600
not there in memory anymore

00:20:58,960 --> 00:21:02,559
if that's the case resume won't be

00:21:01,600 --> 00:21:05,039
executed

00:21:02,559 --> 00:21:06,080
and the app the web app will start from

00:21:05,039 --> 00:21:08,480
a scratch

00:21:06,080 --> 00:21:09,280
but what you can do is actually listen

00:21:08,480 --> 00:21:11,600
for

00:21:09,280 --> 00:21:12,320
uh dumb content loaded so when the page

00:21:11,600 --> 00:21:14,559
starts

00:21:12,320 --> 00:21:16,000
and check the document was discarded

00:21:14,559 --> 00:21:18,640
boolean property

00:21:16,000 --> 00:21:20,880
if that property is true it means that

00:21:18,640 --> 00:21:23,679
the user is going back to a web app

00:21:20,880 --> 00:21:24,320
that was discarded from memory so that's

00:21:23,679 --> 00:21:26,480
the

00:21:24,320 --> 00:21:27,760
the point the moment where you should

00:21:26,480 --> 00:21:31,760
actually restore

00:21:27,760 --> 00:21:33,600
the saved state so

00:21:31,760 --> 00:21:36,000
on mobile devices today to be honest

00:21:33,600 --> 00:21:36,960
this page lifecycle api so freeze and

00:21:36,000 --> 00:21:39,840
resume

00:21:36,960 --> 00:21:41,360
it's typically not available so um if

00:21:39,840 --> 00:21:43,280
you want to be multi-platform

00:21:41,360 --> 00:21:45,679
you can save the state on visibility

00:21:43,280 --> 00:21:47,919
change that's available everywhere

00:21:45,679 --> 00:21:50,000
visibility change and you can include a

00:21:47,919 --> 00:21:50,640
timestamp in local storage for example

00:21:50,000 --> 00:21:53,440
at

00:21:50,640 --> 00:21:54,320
with which moment the user went to the

00:21:53,440 --> 00:21:56,480
background

00:21:54,320 --> 00:21:58,400
so and you're going to restore the state

00:21:56,480 --> 00:22:01,440
when the page loads and

00:21:58,400 --> 00:22:03,120
using the same timestamp you can decide

00:22:01,440 --> 00:22:04,720
if you want to restore the state or if

00:22:03,120 --> 00:22:07,280
you want to start a new navigation

00:22:04,720 --> 00:22:08,559
for example you're going back to the app

00:22:07,280 --> 00:22:10,320
and you see

00:22:08,559 --> 00:22:12,240
the difference of timestamps is two

00:22:10,320 --> 00:22:13,440
minutes and you say yeah it's like the

00:22:12,240 --> 00:22:16,159
same session

00:22:13,440 --> 00:22:17,679
only two minutes two minutes have uh

00:22:16,159 --> 00:22:20,080
happened between sessions

00:22:17,679 --> 00:22:20,799
so you restore the state but maybe a

00:22:20,080 --> 00:22:22,720
week

00:22:20,799 --> 00:22:24,400
has happened between sessions because

00:22:22,720 --> 00:22:27,440
the user can go to the

00:22:24,400 --> 00:22:28,799
previous app from a week ago and in that

00:22:27,440 --> 00:22:30,480
case you will start from scratch

00:22:28,799 --> 00:22:33,600
probably okay so that's

00:22:30,480 --> 00:22:36,320
actually a good idea so what if you want

00:22:33,600 --> 00:22:38,880
to still execute code in the background

00:22:36,320 --> 00:22:40,559
today you have just a couple of options

00:22:38,880 --> 00:22:42,799
if you still want to execute

00:22:40,559 --> 00:22:44,720
code in the background google play store

00:22:42,799 --> 00:22:46,320
so you need to create a pwa

00:22:44,720 --> 00:22:48,320
to the google play store with trusted

00:22:46,320 --> 00:22:50,159
web activity and then

00:22:48,320 --> 00:22:52,799
the native code will be executed in the

00:22:50,159 --> 00:22:54,240
background or the app store for pwas on

00:22:52,799 --> 00:22:56,080
ios and ipad os

00:22:54,240 --> 00:22:57,600
using a webview a native code for a

00:22:56,080 --> 00:22:59,280
background

00:22:57,600 --> 00:23:01,280
something similar for windows on the

00:22:59,280 --> 00:23:02,240
microsoft store you create a universal

00:23:01,280 --> 00:23:05,280
windows app

00:23:02,240 --> 00:23:06,880
that will use apis that will let you

00:23:05,280 --> 00:23:09,520
execute code in the background

00:23:06,880 --> 00:23:11,120
or if you you can use service worker

00:23:09,520 --> 00:23:11,840
background apis if you don't want the

00:23:11,120 --> 00:23:13,440
store

00:23:11,840 --> 00:23:15,840
you still want to execute this in the

00:23:13,440 --> 00:23:16,720
browser there are some additional apis

00:23:15,840 --> 00:23:19,840
available in the

00:23:16,720 --> 00:23:22,240
at the service worker scenario or around

00:23:19,840 --> 00:23:22,960
the service worker scenario so these

00:23:22,240 --> 00:23:25,360
options

00:23:22,960 --> 00:23:26,720
are abilities on top of the main spec

00:23:25,360 --> 00:23:29,600
they're typically today

00:23:26,720 --> 00:23:30,400
only on chromium-based browsers chrome

00:23:29,600 --> 00:23:33,039
google chrome

00:23:30,400 --> 00:23:34,480
microsoft ads samsung internet browser

00:23:33,039 --> 00:23:37,440
brave sometimes

00:23:34,480 --> 00:23:37,919
it depends on the browser and remember

00:23:37,440 --> 00:23:39,440
that

00:23:37,919 --> 00:23:41,679
when you execute code in the background

00:23:39,440 --> 00:23:42,640
there may be no client running on that

00:23:41,679 --> 00:23:45,039
time so no

00:23:42,640 --> 00:23:46,960
page so if you want to show something on

00:23:45,039 --> 00:23:49,600
the screen you can not do that

00:23:46,960 --> 00:23:50,000
so you need to use other techniques such

00:23:49,600 --> 00:23:53,679
as

00:23:50,000 --> 00:23:56,159
web notifications so in this

00:23:53,679 --> 00:23:57,520
in this umbrella we have web push

00:23:56,159 --> 00:24:00,000
background sync

00:23:57,520 --> 00:24:00,559
periodic background sync that will let

00:24:00,000 --> 00:24:02,640
you

00:24:00,559 --> 00:24:04,720
execute the service worker every once in

00:24:02,640 --> 00:24:07,120
a while such as every hour

00:24:04,720 --> 00:24:08,640
or every morning then in that case your

00:24:07,120 --> 00:24:10,559
service worker from a stop

00:24:08,640 --> 00:24:12,159
will be actually live and you can

00:24:10,559 --> 00:24:14,080
execute code in the background

00:24:12,159 --> 00:24:15,279
okay there are some restrictions on when

00:24:14,080 --> 00:24:17,600
the browser will

00:24:15,279 --> 00:24:19,360
grant you permission periodic background

00:24:17,600 --> 00:24:20,799
thing but this is actually one way you

00:24:19,360 --> 00:24:22,880
have

00:24:20,799 --> 00:24:24,080
and finally background fetch that will

00:24:22,880 --> 00:24:26,640
let you download

00:24:24,080 --> 00:24:28,000
files big files when the user is not

00:24:26,640 --> 00:24:30,720
actually using your

00:24:28,000 --> 00:24:32,159
your web app so um these are the ways

00:24:30,720 --> 00:24:35,279
that we have today to actually

00:24:32,159 --> 00:24:36,640
bypass the these

00:24:35,279 --> 00:24:38,640
limitations when we are in the

00:24:36,640 --> 00:24:41,039
background and if you're using

00:24:38,640 --> 00:24:41,840
a chromium-based browser you can go to

00:24:41,039 --> 00:24:44,960
dev tools

00:24:41,840 --> 00:24:46,480
within application you will find uh on

00:24:44,960 --> 00:24:50,080
the service worker side

00:24:46,480 --> 00:24:52,240
a whole section to test these apis

00:24:50,080 --> 00:24:53,120
and also with an application background

00:24:52,240 --> 00:24:55,360
services

00:24:53,120 --> 00:24:56,240
you can actually record and see what's

00:24:55,360 --> 00:24:59,120
going on

00:24:56,240 --> 00:25:01,120
in the background with your web app or

00:24:59,120 --> 00:25:04,880
your pwa

00:25:01,120 --> 00:25:07,279
well that's all for the mysterious life

00:25:04,880 --> 00:25:08,080
of web apps in the background so now you

00:25:07,279 --> 00:25:09,840
actually know

00:25:08,080 --> 00:25:12,320
what's going on in the background or you

00:25:09,840 --> 00:25:15,120
have an idea of what's going on

00:25:12,320 --> 00:25:15,840
sometimes your app is still executing

00:25:15,120 --> 00:25:19,120
sometimes

00:25:15,840 --> 00:25:21,039
only the worker thread is executed fully

00:25:19,120 --> 00:25:23,360
executed sometimes your timers

00:25:21,039 --> 00:25:26,000
are throttled and sometimes your app

00:25:23,360 --> 00:25:29,039
will go to a suspended state

00:25:26,000 --> 00:25:29,679
so it will go through a freeze action in

00:25:29,039 --> 00:25:31,760
that case

00:25:29,679 --> 00:25:33,279
you will still be in memory but without

00:25:31,760 --> 00:25:36,640
executing any code

00:25:33,279 --> 00:25:40,559
and sometimes that memory web app

00:25:36,640 --> 00:25:43,600
will also be discarded by the os so

00:25:40,559 --> 00:25:44,799
now you know better about the life of

00:25:43,600 --> 00:25:47,200
web apps in the background

00:25:44,799 --> 00:25:48,240
i hope it was useful for you i hope we

00:25:47,200 --> 00:25:50,480
can meet again

00:25:48,240 --> 00:25:51,600
in person sometime in the future so

00:25:50,480 --> 00:25:54,840
thank you very much

00:25:51,600 --> 00:25:57,840
and let's chat let's continue this

00:25:54,840 --> 00:25:57,840
conversation

00:26:08,160 --> 00:26:14,320
[Music]

00:26:11,919 --> 00:26:15,360
hey mark sorry for the delay in getting

00:26:14,320 --> 00:26:18,000
to you

00:26:15,360 --> 00:26:19,520
no worries congratulations on an amazing

00:26:18,000 --> 00:26:22,240
talk i think i need to give you a second

00:26:19,520 --> 00:26:22,240
round of applause

00:26:22,400 --> 00:26:26,240
so talk to me talk to me while we're

00:26:24,080 --> 00:26:29,840
waiting for a few q a questions

00:26:26,240 --> 00:26:31,039
coming what do you wish that happened in

00:26:29,840 --> 00:26:32,720
the background

00:26:31,039 --> 00:26:35,520
when your application goes out what

00:26:32,720 --> 00:26:37,600
would be your dream bit of functionality

00:26:35,520 --> 00:26:39,440
well it's it's complicated because as

00:26:37,600 --> 00:26:40,159
developers we typically want to have

00:26:39,440 --> 00:26:43,039
full power

00:26:40,159 --> 00:26:43,600
so that we want to do whatever we want

00:26:43,039 --> 00:26:44,960
to do

00:26:43,600 --> 00:26:47,520
but the problem is that it has the

00:26:44,960 --> 00:26:48,000
penalty right so we are talking about

00:26:47,520 --> 00:26:51,520
the

00:26:48,000 --> 00:26:52,159
user's battery and mostly your mobile

00:26:51,520 --> 00:26:54,799
devices

00:26:52,159 --> 00:26:56,080
and that's a problem and also desktops

00:26:54,799 --> 00:26:57,520
even if you

00:26:56,080 --> 00:26:59,520
if you're on a dexter computer and

00:26:57,520 --> 00:27:01,600
without uh you're charging your computer

00:26:59,520 --> 00:27:04,159
the problem is that you're using cpu

00:27:01,600 --> 00:27:05,360
and we typically left a lot of

00:27:04,159 --> 00:27:08,480
background tabs

00:27:05,360 --> 00:27:10,640
open and that's typically a problem so

00:27:08,480 --> 00:27:11,919
it's it's difficult to actually find the

00:27:10,640 --> 00:27:15,039
balance between

00:27:11,919 --> 00:27:17,600
power and or

00:27:15,039 --> 00:27:19,039
or use cases that we actually want to

00:27:17,600 --> 00:27:23,279
support

00:27:19,039 --> 00:27:26,480
and so to keep the device healthy

00:27:23,279 --> 00:27:28,159
and that's why it's uh it's important to

00:27:26,480 --> 00:27:30,080
understand what happens so right now

00:27:28,159 --> 00:27:31,360
whatever i see on a lot of web apps is

00:27:30,080 --> 00:27:33,520
that

00:27:31,360 --> 00:27:35,039
they're not actually completely aware of

00:27:33,520 --> 00:27:37,279
that life cycle in the background

00:27:35,039 --> 00:27:39,279
so it's just that they're not actually

00:27:37,279 --> 00:27:40,240
doing any any specific code for that

00:27:39,279 --> 00:27:42,399
situation

00:27:40,240 --> 00:27:44,080
and then maybe you came back to that web

00:27:42,399 --> 00:27:46,159
app a week later

00:27:44,080 --> 00:27:47,279
and it was still in memory sometimes

00:27:46,159 --> 00:27:50,399
that happens

00:27:47,279 --> 00:27:52,640
and maybe the situation the

00:27:50,399 --> 00:27:53,760
it's kind of weird because you see like

00:27:52,640 --> 00:27:56,000
all data

00:27:53,760 --> 00:27:57,760
um and something something from a user's

00:27:56,000 --> 00:27:58,640
point of view it's a bad user experience

00:27:57,760 --> 00:28:00,880
so that's why

00:27:58,640 --> 00:28:02,000
i think it's uh it's important to

00:28:00,880 --> 00:28:04,960
understand what's going

00:28:02,000 --> 00:28:06,720
on in the background i know but what

00:28:04,960 --> 00:28:09,120
would be your dream what capabilities

00:28:06,720 --> 00:28:11,840
would you want

00:28:09,120 --> 00:28:12,960
uh so i think that the capabilities that

00:28:11,840 --> 00:28:16,880
we have today

00:28:12,960 --> 00:28:20,399
are are on on chromium are pretty good

00:28:16,880 --> 00:28:20,799
for example the periodic sync that lets

00:28:20,399 --> 00:28:23,440
you

00:28:20,799 --> 00:28:24,799
execute code every once in a while only

00:28:23,440 --> 00:28:27,279
if the user has

00:28:24,799 --> 00:28:29,200
site engagement with that website so i

00:28:27,279 --> 00:28:31,679
mean if if you're not using that website

00:28:29,200 --> 00:28:33,440
it will not grant permission for that

00:28:31,679 --> 00:28:35,840
what we don't have right now it's a

00:28:33,440 --> 00:28:38,799
clear idea of what's going on and when

00:28:35,840 --> 00:28:39,919
when do you get the like the right high

00:28:38,799 --> 00:28:43,120
engagement to

00:28:39,919 --> 00:28:43,600
to do that um something that a lot of

00:28:43,120 --> 00:28:45,440
apps

00:28:43,600 --> 00:28:47,679
are they really want to do but it's

00:28:45,440 --> 00:28:50,000
actually really dangerous as well

00:28:47,679 --> 00:28:51,039
is to uh geolocate the user in the

00:28:50,000 --> 00:28:52,640
background so

00:28:51,039 --> 00:28:54,399
and i'm not talking about like we are

00:28:52,640 --> 00:28:55,200
apps or they're they're doing like bad

00:28:54,399 --> 00:28:56,880
stuff but

00:28:55,200 --> 00:28:58,720
uh sometimes you have an app for example

00:28:56,880 --> 00:29:00,240
that you want to you want to know when

00:28:58,720 --> 00:29:03,520
you need to get out of

00:29:00,240 --> 00:29:05,600
of of the metro or the underground and

00:29:03,520 --> 00:29:06,880
for that yeah you need to like

00:29:05,600 --> 00:29:08,640
continuous

00:29:06,880 --> 00:29:11,120
looking at the geolocation in the

00:29:08,640 --> 00:29:12,159
background or accessing geofencing

00:29:11,120 --> 00:29:14,320
features

00:29:12,159 --> 00:29:15,360
and that's that's something that i've

00:29:14,320 --> 00:29:17,279
seen a lot

00:29:15,360 --> 00:29:18,720
of developers wanting to do that in the

00:29:17,279 --> 00:29:21,600
background so

00:29:18,720 --> 00:29:23,039
like for for using the geolocation right

00:29:21,600 --> 00:29:25,520
now that's

00:29:23,039 --> 00:29:26,320
unfortunately that's currently uh

00:29:25,520 --> 00:29:28,080
limited

00:29:26,320 --> 00:29:30,480
so because there is a big discussion

00:29:28,080 --> 00:29:31,360
there yeah very fortunately i don't

00:29:30,480 --> 00:29:33,200
think i would like

00:29:31,360 --> 00:29:34,480
knowing that web pages could track my

00:29:33,200 --> 00:29:36,559
location in the background

00:29:34,480 --> 00:29:38,080
i really would not be a fan of that so

00:29:36,559 --> 00:29:38,840
we have we also have the program with

00:29:38,080 --> 00:29:41,760
native apps

00:29:38,840 --> 00:29:43,200
so true i have very few of those i rely

00:29:41,760 --> 00:29:45,760
more on web apps personally

00:29:43,200 --> 00:29:46,720
um but enough about me uh christopher

00:29:45,760 --> 00:29:49,120
jenner chris

00:29:46,720 --> 00:29:50,240
hi chris another person from cornwall um

00:29:49,120 --> 00:29:53,200
chris has asked

00:29:50,240 --> 00:29:54,799
if the users denied cookies to be used

00:29:53,200 --> 00:29:58,480
within the web browser

00:29:54,799 --> 00:30:00,000
can you still keep users data

00:29:58,480 --> 00:30:01,520
i don't think it's he said it doesn't

00:30:00,000 --> 00:30:03,039
think it's part of the talk but

00:30:01,520 --> 00:30:04,640
i thought you might be oh no that's fine

00:30:03,039 --> 00:30:05,279
i'm trying to understand the question so

00:30:04,640 --> 00:30:07,760
let me

00:30:05,279 --> 00:30:08,720
just be nice cookies how would you be

00:30:07,760 --> 00:30:11,919
able to still keep

00:30:08,720 --> 00:30:13,279
your your user's data

00:30:11,919 --> 00:30:15,520
i'm not sure i understand the question

00:30:13,279 --> 00:30:16,159
but i guess that your the answer is

00:30:15,520 --> 00:30:18,080
around

00:30:16,159 --> 00:30:19,200
the apis that we have available for

00:30:18,080 --> 00:30:21,520
storage like

00:30:19,200 --> 00:30:22,480
web storage that most people know as

00:30:21,520 --> 00:30:25,039
local storage

00:30:22,480 --> 00:30:25,919
or indexeddb or something like that so

00:30:25,039 --> 00:30:28,960
if if

00:30:25,919 --> 00:30:31,200
the user is denying cookies those

00:30:28,960 --> 00:30:33,600
storages will still be there unless the

00:30:31,200 --> 00:30:35,360
user is in incognito mode or

00:30:33,600 --> 00:30:37,360
or private mode or however you want to

00:30:35,360 --> 00:30:40,159
call that on any browser

00:30:37,360 --> 00:30:40,640
so um i'm not sure if that's the answer

00:30:40,159 --> 00:30:42,159
or not

00:30:40,640 --> 00:30:44,320
if you're trying to spy on the user

00:30:42,159 --> 00:30:48,000
that's not good so don't do that

00:30:44,320 --> 00:30:48,960
at home but for for some use cases where

00:30:48,000 --> 00:30:50,559
you actually

00:30:48,960 --> 00:30:52,399
want to store data i think that you need

00:30:50,559 --> 00:30:54,960
to look at the uh

00:30:52,399 --> 00:30:55,679
those apis that the browser browsers are

00:30:54,960 --> 00:30:57,760
supporting

00:30:55,679 --> 00:30:59,440
okay chris if you wanted a more

00:30:57,760 --> 00:31:02,640
clarification around that just

00:30:59,440 --> 00:31:03,600
uh clarify your question there so milos

00:31:02,640 --> 00:31:05,279
has said

00:31:03,600 --> 00:31:06,640
is there any case where you should start

00:31:05,279 --> 00:31:07,279
looking into what happens in the

00:31:06,640 --> 00:31:09,440
background

00:31:07,279 --> 00:31:10,480
before you actually see the bug or some

00:31:09,440 --> 00:31:12,880
performance issues

00:31:10,480 --> 00:31:12,880
happening

00:31:14,640 --> 00:31:19,760
the thing is that as in the research

00:31:18,159 --> 00:31:22,159
that you saw in the talk

00:31:19,760 --> 00:31:23,200
so i've seen that if you're using a web

00:31:22,159 --> 00:31:25,200
worker

00:31:23,200 --> 00:31:27,360
that web worker is actually fully

00:31:25,200 --> 00:31:30,240
powered on most platforms

00:31:27,360 --> 00:31:30,799
in the background so if you have a while

00:31:30,240 --> 00:31:32,720
true

00:31:30,799 --> 00:31:33,840
or if you have a set timeout or a set

00:31:32,720 --> 00:31:36,000
interval

00:31:33,840 --> 00:31:37,600
there is executing code every 10

00:31:36,000 --> 00:31:39,760
milliseconds i'm not sure if

00:31:37,600 --> 00:31:41,919
10 milliseconds will be granted but

00:31:39,760 --> 00:31:43,360
anyway you will probably get a lot of

00:31:41,919 --> 00:31:46,159
execution cpu

00:31:43,360 --> 00:31:48,240
in the background for up to five minutes

00:31:46,159 --> 00:31:50,080
for example on android

00:31:48,240 --> 00:31:51,279
that's a lot right so if you have a bug

00:31:50,080 --> 00:31:53,840
there

00:31:51,279 --> 00:31:54,640
it's actually a problem because uh the

00:31:53,840 --> 00:31:56,320
throttle

00:31:54,640 --> 00:31:58,080
is happening in the main thread in the

00:31:56,320 --> 00:32:00,640
ui thread or in the javascript

00:31:58,080 --> 00:32:02,880
global context but service workers

00:32:00,640 --> 00:32:04,080
service workers also have their own like

00:32:02,880 --> 00:32:06,960
more

00:32:04,080 --> 00:32:08,000
restricted situation there so uh service

00:32:06,960 --> 00:32:09,840
workers sometimes

00:32:08,000 --> 00:32:11,919
they have a timer like okay 30 seconds

00:32:09,840 --> 00:32:14,240
after 30 seconds you are down

00:32:11,919 --> 00:32:16,320
but i've seen that web workers like a

00:32:14,240 --> 00:32:18,880
normal thread

00:32:16,320 --> 00:32:20,960
has more power so you can keep a

00:32:18,880 --> 00:32:24,399
connection to the server there

00:32:20,960 --> 00:32:26,640
and if you have a bug you can maybe send

00:32:24,399 --> 00:32:27,519
thousands of requests to the network in

00:32:26,640 --> 00:32:29,840
the background

00:32:27,519 --> 00:32:30,799
and nobody's actually realizing that

00:32:29,840 --> 00:32:32,880
that's happening

00:32:30,799 --> 00:32:34,960
because the develop is not on the screen

00:32:32,880 --> 00:32:38,159
so unless you actually check

00:32:34,960 --> 00:32:40,880
battery usage you will never know

00:32:38,159 --> 00:32:42,399
okay do you think that there's some

00:32:40,880 --> 00:32:43,679
education that needs to be done around

00:32:42,399 --> 00:32:45,120
users around how

00:32:43,679 --> 00:32:46,480
this kind of stuff works in the

00:32:45,120 --> 00:32:48,640
background or is it solely the

00:32:46,480 --> 00:32:50,320
responsibility of the developer

00:32:48,640 --> 00:32:52,000
i think it's a developer because i don't

00:32:50,320 --> 00:32:54,080
think the user will

00:32:52,000 --> 00:32:55,039
will need to know about this and what's

00:32:54,080 --> 00:32:57,679
going on in fact

00:32:55,039 --> 00:32:59,679
the the user thinks that when something

00:32:57,679 --> 00:33:00,159
is in the background it's not executing

00:32:59,679 --> 00:33:03,039
code

00:33:00,159 --> 00:33:03,519
that's like the normal expectation right

00:33:03,039 --> 00:33:05,600
but

00:33:03,519 --> 00:33:06,880
but now that's not happening on android

00:33:05,600 --> 00:33:09,440
for five minutes

00:33:06,880 --> 00:33:10,960
your your your last website can still be

00:33:09,440 --> 00:33:13,120
executing code

00:33:10,960 --> 00:33:14,880
an executing code means sending data to

00:33:13,120 --> 00:33:15,760
the server or downloading data from the

00:33:14,880 --> 00:33:18,880
server

00:33:15,760 --> 00:33:20,720
and sometimes we want that so that's why

00:33:18,880 --> 00:33:22,559
some apis that are available at the

00:33:20,720 --> 00:33:24,399
chromium side

00:33:22,559 --> 00:33:26,159
are are useful because they are trying

00:33:24,399 --> 00:33:28,399
to match

00:33:26,159 --> 00:33:30,320
specific use cases and not just giving

00:33:28,399 --> 00:33:31,360
you power to do whatever you want in the

00:33:30,320 --> 00:33:34,559
background

00:33:31,360 --> 00:33:36,320
um but we also have this this problem

00:33:34,559 --> 00:33:38,559
that because we are not in the

00:33:36,320 --> 00:33:39,440
foreground there is no way to notify the

00:33:38,559 --> 00:33:43,200
user

00:33:39,440 --> 00:33:44,880
the only way is web notifications

00:33:43,200 --> 00:33:46,480
but for that the user needs to grant you

00:33:44,880 --> 00:33:47,039
permission for push notification that we

00:33:46,480 --> 00:33:49,840
know it's

00:33:47,039 --> 00:33:50,320
kind of a weird part of the web today

00:33:49,840 --> 00:33:52,480
the

00:33:50,320 --> 00:33:53,919
push notifications and so it's a

00:33:52,480 --> 00:33:56,240
challenge you actually do something in

00:33:53,919 --> 00:33:58,000
the background and notify the user

00:33:56,240 --> 00:34:00,559
i'm not sure anybody's ever actually

00:33:58,000 --> 00:34:02,000
switched on web notifications

00:34:00,559 --> 00:34:04,080
well i mean there's their situation i

00:34:02,000 --> 00:34:07,120
mean your your mail gmail

00:34:04,080 --> 00:34:08,159
calendars and those those situations

00:34:07,120 --> 00:34:11,599
typically you say

00:34:08,159 --> 00:34:13,359
well yeah i want notifications but yeah

00:34:11,599 --> 00:34:16,159
for standard websites

00:34:13,359 --> 00:34:17,679
it's it's difficult so that's why maybe

00:34:16,159 --> 00:34:19,919
in the future we will see something

00:34:17,679 --> 00:34:21,440
moving into okay if it's a pwa it's an

00:34:19,919 --> 00:34:23,040
installable app

00:34:21,440 --> 00:34:26,079
maybe it makes sense for that but it's

00:34:23,040 --> 00:34:28,960
just the website that you're visiting

00:34:26,079 --> 00:34:30,639
yeah it's weird it is so we've got three

00:34:28,960 --> 00:34:31,760
minutes left and two questions so

00:34:30,639 --> 00:34:33,119
hopefully you'll be able to go through

00:34:31,760 --> 00:34:35,200
these quite quickly

00:34:33,119 --> 00:34:37,040
um are there any specific security

00:34:35,200 --> 00:34:37,919
aspects that need to be considered when

00:34:37,040 --> 00:34:40,720
executing

00:34:37,919 --> 00:34:41,359
code in the background uh well if if

00:34:40,720 --> 00:34:43,919
you're just

00:34:41,359 --> 00:34:44,399
executing code uh with the research id

00:34:43,919 --> 00:34:46,240
that's just

00:34:44,399 --> 00:34:48,000
viewer javascript and it's just in the

00:34:46,240 --> 00:34:48,960
umbrella of the browser so it's just the

00:34:48,000 --> 00:34:50,480
same thing

00:34:48,960 --> 00:34:52,240
if you're talking about the apis that i

00:34:50,480 --> 00:34:54,000
cover really briefly i just mentioned

00:34:52,240 --> 00:34:54,960
the apis that will let you execute go in

00:34:54,000 --> 00:34:58,320
the background

00:34:54,960 --> 00:35:02,240
despite the if the web app has

00:34:58,320 --> 00:35:04,640
just been minimized or not um like

00:35:02,240 --> 00:35:06,240
background sync periodic background sync

00:35:04,640 --> 00:35:08,640
uh web push

00:35:06,240 --> 00:35:10,079
so on those situations the only thing

00:35:08,640 --> 00:35:11,520
that has to do with security is that

00:35:10,079 --> 00:35:13,359
you're not in the main javascript

00:35:11,520 --> 00:35:14,079
context you're in the service workers

00:35:13,359 --> 00:35:16,640
context

00:35:14,079 --> 00:35:17,440
yeah so you need to understand what's

00:35:16,640 --> 00:35:19,839
possible there

00:35:17,440 --> 00:35:22,240
so not everything is possible when when

00:35:19,839 --> 00:35:25,520
you are running code in a service worker

00:35:22,240 --> 00:35:26,560
but any we are still under the umbrella

00:35:25,520 --> 00:35:29,119
of the web platform

00:35:26,560 --> 00:35:30,960
so it's always the same thing unless we

00:35:29,119 --> 00:35:33,680
found a bug or something like that

00:35:30,960 --> 00:35:35,280
it we don't have big security risks

00:35:33,680 --> 00:35:38,079
because we are still

00:35:35,280 --> 00:35:39,599
running code in within the browser and

00:35:38,079 --> 00:35:41,200
within the execution engine that the

00:35:39,599 --> 00:35:43,200
browser is offering to us

00:35:41,200 --> 00:35:45,200
so it's not native code okay even if

00:35:43,200 --> 00:35:47,200
you're running web assembly i mean you

00:35:45,200 --> 00:35:50,079
don't have access to native apis

00:35:47,200 --> 00:35:51,760
so um it's just the same security

00:35:50,079 --> 00:35:55,280
concerns as in the form

00:35:51,760 --> 00:35:57,599
okay perfect answer um can you explain

00:35:55,280 --> 00:35:59,599
how you set up your investigation

00:35:57,599 --> 00:36:00,640
how do you measure what is running in

00:35:59,599 --> 00:36:03,200
the background

00:36:00,640 --> 00:36:05,920
so uh it was a simple implementation i

00:36:03,200 --> 00:36:09,200
did i set up a node.js server

00:36:05,920 --> 00:36:12,400
that using web sockets and also i have a

00:36:09,200 --> 00:36:15,040
fallback to to the fetch api

00:36:12,400 --> 00:36:16,800
and i have timers and there is a client

00:36:15,040 --> 00:36:18,960
side and a dashboard that's what you

00:36:16,800 --> 00:36:20,800
see two screens there the dashboard is

00:36:18,960 --> 00:36:22,320
just html and it's receiving data from

00:36:20,800 --> 00:36:23,599
the server and the client is sending

00:36:22,320 --> 00:36:26,320
data to the server

00:36:23,599 --> 00:36:26,880
and i have a web worker that has a set

00:36:26,320 --> 00:36:30,160
interval

00:36:26,880 --> 00:36:32,800
executing code uh trying to execute code

00:36:30,160 --> 00:36:34,160
60 frames per second on the same on the

00:36:32,800 --> 00:36:36,640
service worker

00:36:34,160 --> 00:36:38,560
and i have something similar on the the

00:36:36,640 --> 00:36:39,520
javascript global context object i have

00:36:38,560 --> 00:36:41,839
a set interval

00:36:39,520 --> 00:36:43,359
i have a request animation friend code

00:36:41,839 --> 00:36:45,200
and for the animation to check

00:36:43,359 --> 00:36:47,520
uh what happens with css animations i'm

00:36:45,200 --> 00:36:48,960
using the web animation api

00:36:47,520 --> 00:36:52,000
but also there are another way to do

00:36:48,960 --> 00:36:53,680
that is using the on animation

00:36:52,000 --> 00:36:55,359
events we have a couple of animation

00:36:53,680 --> 00:36:56,960
events at the dom level

00:36:55,359 --> 00:36:58,640
so you can actually check on every

00:36:56,960 --> 00:37:00,400
iteration on animation iteration i think

00:36:58,640 --> 00:37:02,640
that's the name of the event

00:37:00,400 --> 00:37:04,480
on every iteration of the animation uh

00:37:02,640 --> 00:37:06,960
you can have a callback

00:37:04,480 --> 00:37:07,680
and i have just the counter i'm counting

00:37:06,960 --> 00:37:09,520
the

00:37:07,680 --> 00:37:11,040
the how many times uh the browser is

00:37:09,520 --> 00:37:12,800
calling that callback

00:37:11,040 --> 00:37:14,400
um every once in a while i'm sending

00:37:12,800 --> 00:37:15,520
that data through web sockets to the

00:37:14,400 --> 00:37:17,680
server

00:37:15,520 --> 00:37:19,040
perfect that was a really good answer um

00:37:17,680 --> 00:37:21,040
we're going to have to call a close here

00:37:19,040 --> 00:37:21,520
natalia's talk is just starting over on

00:37:21,040 --> 00:37:24,000
youtube

00:37:21,520 --> 00:37:25,920
but maximiliano thank you very much for

00:37:24,000 --> 00:37:27,680
giving your talk and taking the time

00:37:25,920 --> 00:37:29,440
um i'm looking forward to watching back

00:37:27,680 --> 00:37:30,240
and really diving into this kind of

00:37:29,440 --> 00:37:32,800
stuff

00:37:30,240 --> 00:37:34,240
um so yeah so we'll see you hopefully

00:37:32,800 --> 00:37:37,359
next year in person i guess

00:37:34,240 --> 00:37:37,359
yeah yeah sure

00:37:38,140 --> 00:37:41,230

YouTube URL: https://www.youtube.com/watch?v=8aSHuNLoTNM


