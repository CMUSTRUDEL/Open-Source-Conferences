Title: Little JavaScript Bundles of Joy - Sophie Koonin - CityJS Conf 2020
Publication date: 2020-10-03
Playlist: CityJS Conf 2020
Description: 
	"Backend microservices are so hot right now, but it's still the norm for web apps to be big JavaScript monoliths. Problem is, the more people you have contributing, and the more code you add, the slower the build and deployment process becomes.

Find out how we tackled this problem at Monzo using independently deployed and dynamically loaded JavaScript modules for our React-based customer support application. I'll share the motivations behind the project, the options we considered, the difficulties we had along the way - and how developer experience has more of an impact on customer experience than you might think."

Bio
Sophie is a full-stack web engineer building Monzo Bank’s brand-new web banking platform in React and Go. She’s passionate about building inclusive, accessible web applications, as well as finding the right balance between developer and user experience. A mentor at Node Girls London and keen tech blogger, she featured on the Makers Academy Women in Tech Power List in 2019.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:18,080 --> 00:00:22,560
[Music]

00:00:22,240 --> 00:00:25,439
hi

00:00:22,560 --> 00:00:26,000
city.js thanks for having me my name is

00:00:25,439 --> 00:00:27,519
sophie

00:00:26,000 --> 00:00:29,519
i'm going to talk to you today about how

00:00:27,519 --> 00:00:31,279
the monzo web team went about splitting

00:00:29,519 --> 00:00:32,320
up a big react monolith into smaller

00:00:31,279 --> 00:00:33,840
pieces

00:00:32,320 --> 00:00:36,160
and the challenges that we encountered

00:00:33,840 --> 00:00:38,719
along the way

00:00:36,160 --> 00:00:40,160
so a bit about me first i'm a senior web

00:00:38,719 --> 00:00:41,600
engineer and i also lead the web

00:00:40,160 --> 00:00:42,879
discipline at monzo alongside my

00:00:41,600 --> 00:00:44,559
colleague dylan

00:00:42,879 --> 00:00:46,320
you can find me on twitter or i've got a

00:00:44,559 --> 00:00:49,760
blog called localghost where i

00:00:46,320 --> 00:00:49,760
write about tech things sometimes

00:00:50,000 --> 00:00:53,760
so this is a story of how we went about

00:00:52,000 --> 00:00:54,800
splitting up parts of a monolithic web

00:00:53,760 --> 00:00:56,160
application

00:00:54,800 --> 00:00:58,239
and some of you might be working on

00:00:56,160 --> 00:00:59,680
giant web applications every day

00:00:58,239 --> 00:01:02,000
and some of you might never have worked

00:00:59,680 --> 00:01:03,199
on anything particularly giant

00:01:02,000 --> 00:01:05,119
so i'm going to talk to you a bit about

00:01:03,199 --> 00:01:06,240
how we got to this point the options

00:01:05,119 --> 00:01:08,640
that we considered

00:01:06,240 --> 00:01:09,920
and show you what we did at the end and

00:01:08,640 --> 00:01:11,760
i'm also going to talk a bit about the

00:01:09,920 --> 00:01:13,520
problems that we face along the way

00:01:11,760 --> 00:01:15,680
um in case you're not familiar with us

00:01:13,520 --> 00:01:17,680
we are a bank we're called monzo

00:01:15,680 --> 00:01:19,439
um i thought i'd give a quick overview

00:01:17,680 --> 00:01:21,040
we're a bank that lives on your phone

00:01:19,439 --> 00:01:23,040
uh you might have seen our bright hot

00:01:21,040 --> 00:01:24,400
coral colored debit cards around

00:01:23,040 --> 00:01:26,159
and a lot of people don't actually

00:01:24,400 --> 00:01:28,479
realize that we do web at monzo because

00:01:26,159 --> 00:01:29,840
the main customer interface is our app

00:01:28,479 --> 00:01:31,439
we're also famous for having an

00:01:29,840 --> 00:01:33,680
astonishing number of back end micro

00:01:31,439 --> 00:01:35,280
services we've got over 1500

00:01:33,680 --> 00:01:37,600
i'm not sure what the exact count is at

00:01:35,280 --> 00:01:39,280
this point but we do also have quite a

00:01:37,600 --> 00:01:41,600
few web properties as well

00:01:39,280 --> 00:01:43,439
so first there's monzo.me which lets you

00:01:41,600 --> 00:01:45,200
give a personalized link to send to

00:01:43,439 --> 00:01:47,360
people so they can send you money

00:01:45,200 --> 00:01:49,040
there's also pay anyone which lets you

00:01:47,360 --> 00:01:50,320
send a link to anyone that they can

00:01:49,040 --> 00:01:51,920
claim money off you

00:01:50,320 --> 00:01:53,520
there's also our emergency banking

00:01:51,920 --> 00:01:54,479
interface in case you lose your phone

00:01:53,520 --> 00:01:56,320
and card

00:01:54,479 --> 00:01:57,920
um you can see the last 90 days of your

00:01:56,320 --> 00:01:59,520
transactions and you can also freeze

00:01:57,920 --> 00:02:01,119
your card if you need to

00:01:59,520 --> 00:02:03,119
and excitingly this year we also

00:02:01,119 --> 00:02:04,479
launched our first full featured online

00:02:03,119 --> 00:02:05,680
banking web app for our business

00:02:04,479 --> 00:02:07,439
customers

00:02:05,680 --> 00:02:09,280
which is a monumental event for web at

00:02:07,439 --> 00:02:09,840
monzo so we're all super excited about

00:02:09,280 --> 00:02:11,680
that

00:02:09,840 --> 00:02:13,599
but our biggest web app by far is

00:02:11,680 --> 00:02:15,120
actually an internal one

00:02:13,599 --> 00:02:17,360
it's called biz ops which is short for

00:02:15,120 --> 00:02:19,440
business operations and it's used by our

00:02:17,360 --> 00:02:21,680
brilliant customer service team

00:02:19,440 --> 00:02:23,520
customer operations or cops as we call

00:02:21,680 --> 00:02:25,360
them to do their jobs

00:02:23,520 --> 00:02:27,040
so that's chatting to customers that

00:02:25,360 --> 00:02:28,879
might be speaking to them on the phone

00:02:27,040 --> 00:02:30,640
uh approving new accounts sign ups

00:02:28,879 --> 00:02:31,680
crediting checks you name it it's the

00:02:30,640 --> 00:02:33,200
numbers ops

00:02:31,680 --> 00:02:34,800
the way that bizops works is that you've

00:02:33,200 --> 00:02:35,840
got this concept of a task

00:02:34,800 --> 00:02:37,920
which might be something like a

00:02:35,840 --> 00:02:38,560
conversation or a phone call and each

00:02:37,920 --> 00:02:40,319
individual

00:02:38,560 --> 00:02:42,959
activity that someone can do on business

00:02:40,319 --> 00:02:44,879
is a task so it's like a unit of work

00:02:42,959 --> 00:02:46,080
and the customer can have many tasks

00:02:44,879 --> 00:02:47,840
associated with them

00:02:46,080 --> 00:02:49,200
and a cop can have several tasks on the

00:02:47,840 --> 00:02:50,720
go at once

00:02:49,200 --> 00:02:52,160
so for example here we've got a chat

00:02:50,720 --> 00:02:53,040
task with a customer's conversation

00:02:52,160 --> 00:02:55,440
history

00:02:53,040 --> 00:02:56,959
and we've also got a support call task

00:02:55,440 --> 00:02:57,680
and tasks are at the very center of

00:02:56,959 --> 00:02:59,120
bizops

00:02:57,680 --> 00:03:00,480
they're one of the major extension

00:02:59,120 --> 00:03:02,080
points so that's where the majority of

00:03:00,480 --> 00:03:04,319
the work happens

00:03:02,080 --> 00:03:05,360
all of our apps at monzo are built in

00:03:04,319 --> 00:03:07,599
react and

00:03:05,360 --> 00:03:09,280
biz up sits on top of a graphql layer

00:03:07,599 --> 00:03:10,560
which sits between our front end and our

00:03:09,280 --> 00:03:12,959
platform

00:03:10,560 --> 00:03:13,760
and at monzo our code is stored in mono

00:03:12,959 --> 00:03:15,680
repos

00:03:13,760 --> 00:03:17,360
so all of our web projects are actually

00:03:15,680 --> 00:03:19,040
in one big repository

00:03:17,360 --> 00:03:20,959
and this makes it really easy to share

00:03:19,040 --> 00:03:21,440
libraries across projects as well as

00:03:20,959 --> 00:03:23,680
write

00:03:21,440 --> 00:03:25,519
some really smart deployment tooling and

00:03:23,680 --> 00:03:27,040
make changes across the code base

00:03:25,519 --> 00:03:29,280
and it also means that versions of

00:03:27,040 --> 00:03:30,879
dependencies like for example next.js

00:03:29,280 --> 00:03:33,280
tend to stay in sync across projects

00:03:30,879 --> 00:03:34,720
which is really helpful

00:03:33,280 --> 00:03:37,280
another thing to note is that in the

00:03:34,720 --> 00:03:38,480
case of bizops it's entirely client-side

00:03:37,280 --> 00:03:40,159
and all of our co-ops are using the

00:03:38,480 --> 00:03:41,599
latest chrome and monzo provided

00:03:40,159 --> 00:03:43,120
macbooks or chromebooks

00:03:41,599 --> 00:03:45,200
so we know exactly what we're building

00:03:43,120 --> 00:03:46,720
for now there's nothing inherently wrong

00:03:45,200 --> 00:03:47,920
with the monolith as an architectural

00:03:46,720 --> 00:03:49,920
pattern for apps

00:03:47,920 --> 00:03:51,599
and in fact it can also often be the

00:03:49,920 --> 00:03:53,200
most sensible option

00:03:51,599 --> 00:03:54,640
technically a monolith is just the term

00:03:53,200 --> 00:03:56,879
for an application that has all of its

00:03:54,640 --> 00:03:59,840
functionality in one bundle

00:03:56,879 --> 00:04:01,519
and for many people it works fine it's

00:03:59,840 --> 00:04:03,519
when you start operating at real scale

00:04:01,519 --> 00:04:04,959
that it starts to become a problem

00:04:03,519 --> 00:04:06,560
and it's not just in terms of the number

00:04:04,959 --> 00:04:08,080
of users it's actually the number of

00:04:06,560 --> 00:04:09,519
developers for us that's the biggest

00:04:08,080 --> 00:04:10,879
problem

00:04:09,519 --> 00:04:12,879
and it becomes harder and harder to

00:04:10,879 --> 00:04:14,239
impose standards and ways of working

00:04:12,879 --> 00:04:15,040
when you've got 10 odd teams

00:04:14,239 --> 00:04:17,440
contributing

00:04:15,040 --> 00:04:19,359
to the same application the build time

00:04:17,440 --> 00:04:20,639
slows down deployment becomes really

00:04:19,359 --> 00:04:22,400
complicated

00:04:20,639 --> 00:04:23,680
and changes become more complex as well

00:04:22,400 --> 00:04:24,880
and you start trading on each other's

00:04:23,680 --> 00:04:26,080
toes

00:04:24,880 --> 00:04:28,479
i've worked on a couple of apps that

00:04:26,080 --> 00:04:30,320
have been monoliths and in both cases

00:04:28,479 --> 00:04:31,919
they've been growing and growing until

00:04:30,320 --> 00:04:35,600
some of the engineers step back and say

00:04:31,919 --> 00:04:35,600
okay we need to split this up now

00:04:35,680 --> 00:04:38,560
so when it comes to adding to and

00:04:36,960 --> 00:04:39,680
maintaining bizops that's actually where

00:04:38,560 --> 00:04:41,040
the pain is

00:04:39,680 --> 00:04:42,639
and it was always intended to be a

00:04:41,040 --> 00:04:43,199
collaborative effort right from the

00:04:42,639 --> 00:04:44,639
start

00:04:43,199 --> 00:04:46,720
the vision was that parts of the app

00:04:44,639 --> 00:04:48,960
would be sufficiently abstracted so that

00:04:46,720 --> 00:04:50,320
anyone could contribute from any team we

00:04:48,960 --> 00:04:51,919
didn't have enough web engineers to

00:04:50,320 --> 00:04:54,240
build everything ourselves and

00:04:51,919 --> 00:04:55,360
most teams didn't usually need web work

00:04:54,240 --> 00:04:57,040
so it means that teams wouldn't be

00:04:55,360 --> 00:04:59,840
blocked waiting for a web engineer to

00:04:57,040 --> 00:05:01,440
become available to make their changes

00:04:59,840 --> 00:05:03,360
and the ops product team who maintain

00:05:01,440 --> 00:05:05,440
bizops and work on the core platform

00:05:03,360 --> 00:05:06,639
are also made up of three squads so you

00:05:05,440 --> 00:05:08,320
can imagine where the devs in those

00:05:06,639 --> 00:05:09,919
squads plus all the sponsoring teams

00:05:08,320 --> 00:05:10,800
it's become quite a large monolith with

00:05:09,919 --> 00:05:13,440
lots of people

00:05:10,800 --> 00:05:14,720
contributing and the most frustrating

00:05:13,440 --> 00:05:16,160
part is deployment so

00:05:14,720 --> 00:05:18,160
it ends up being like air traffic

00:05:16,160 --> 00:05:19,600
control trying to coordinate deployment

00:05:18,160 --> 00:05:20,160
of bizops you need to wait for the bill

00:05:19,600 --> 00:05:21,680
to run

00:05:20,160 --> 00:05:23,440
and then post on slack to say what

00:05:21,680 --> 00:05:25,280
commit you're deploying making sure

00:05:23,440 --> 00:05:25,919
you've tagged everyone whose pr is in

00:05:25,280 --> 00:05:27,680
the build

00:05:25,919 --> 00:05:29,199
wait for them to test their changes run

00:05:27,680 --> 00:05:31,039
some smoke tests

00:05:29,199 --> 00:05:33,039
it can take ages and especially if

00:05:31,039 --> 00:05:35,440
people are out out to lunch or

00:05:33,039 --> 00:05:37,360
in meetings and the idea was that you'd

00:05:35,440 --> 00:05:38,720
deploy as soon as you merged but with

00:05:37,360 --> 00:05:40,960
biz ups people never do

00:05:38,720 --> 00:05:42,320
is they find the process quite confusing

00:05:40,960 --> 00:05:43,440
and there's nothing like this for back

00:05:42,320 --> 00:05:45,600
end deployments

00:05:43,440 --> 00:05:47,520
so one bash command and you're away

00:05:45,600 --> 00:05:49,199
you're deploying

00:05:47,520 --> 00:05:50,720
and this is the diagram of the network

00:05:49,199 --> 00:05:52,320
connections between the microservices

00:05:50,720 --> 00:05:53,759
and our backend platform

00:05:52,320 --> 00:05:55,360
when you're a backend developer who's

00:05:53,759 --> 00:05:56,400
used to the really speedy deployment of

00:05:55,360 --> 00:05:58,240
our micro services

00:05:56,400 --> 00:06:00,080
each of which is represented by a black

00:05:58,240 --> 00:06:01,680
dot in this diagram

00:06:00,080 --> 00:06:03,680
you can get an idea of the granularity

00:06:01,680 --> 00:06:05,440
of these systems it's even more

00:06:03,680 --> 00:06:06,720
frustrating and in fact some people

00:06:05,440 --> 00:06:08,560
actually don't realize that the

00:06:06,720 --> 00:06:10,240
deployment process is different in

00:06:08,560 --> 00:06:11,520
the front end so they go ahead and just

00:06:10,240 --> 00:06:13,199
deploy their changes thinking they're

00:06:11,520 --> 00:06:14,720
working in isolation

00:06:13,199 --> 00:06:17,360
i mean you can forgive them for thinking

00:06:14,720 --> 00:06:18,960
that given how the back end is deployed

00:06:17,360 --> 00:06:21,440
and in the back end if i'm working on

00:06:18,960 --> 00:06:23,120
say the service that powers chat

00:06:21,440 --> 00:06:24,800
all of my work is isolated to that

00:06:23,120 --> 00:06:26,000
service so i don't have to deal with

00:06:24,800 --> 00:06:28,080
anyone else's changes

00:06:26,000 --> 00:06:29,280
unless someone happens to be working on

00:06:28,080 --> 00:06:31,039
the same as

00:06:29,280 --> 00:06:33,120
service as me at the same time which is

00:06:31,039 --> 00:06:34,479
unlikely

00:06:33,120 --> 00:06:36,479
in the front end if i'm working on the

00:06:34,479 --> 00:06:38,000
chat task i have to then deploy it along

00:06:36,479 --> 00:06:41,199
with everyone else's changes

00:06:38,000 --> 00:06:43,520
and and um who's uh merged their changes

00:06:41,199 --> 00:06:44,639
into master since the last deployment

00:06:43,520 --> 00:06:46,000
and then if there's something wrong with

00:06:44,639 --> 00:06:46,960
one of the changes in the staging

00:06:46,000 --> 00:06:48,400
environment

00:06:46,960 --> 00:06:50,800
everyone's changes have to be pulled out

00:06:48,400 --> 00:06:52,240
when we roll back

00:06:50,800 --> 00:06:53,680
and the result of this is that changes

00:06:52,240 --> 00:06:55,599
can take a lot longer than they should

00:06:53,680 --> 00:06:58,000
to get into production

00:06:55,599 --> 00:06:59,680
both uh in the back end and on our other

00:06:58,000 --> 00:07:00,479
web apps like business banking we deploy

00:06:59,680 --> 00:07:02,720
to productions

00:07:00,479 --> 00:07:04,160
multiple times a day so we really should

00:07:02,720 --> 00:07:05,280
be able to do the same thing in bizops

00:07:04,160 --> 00:07:07,199
as well

00:07:05,280 --> 00:07:08,400
and we can with the with the other apps

00:07:07,199 --> 00:07:10,400
so this is our

00:07:08,400 --> 00:07:11,840
most critical web application arguably

00:07:10,400 --> 00:07:13,520
and it is important that we can react

00:07:11,840 --> 00:07:15,599
fast we can fix forward

00:07:13,520 --> 00:07:17,520
and get new functionality out as quickly

00:07:15,599 --> 00:07:19,039
and safely as we can

00:07:17,520 --> 00:07:20,720
it's a lot safer working on code in

00:07:19,039 --> 00:07:22,479
isolation knowing that what you're doing

00:07:20,720 --> 00:07:24,720
is highly unlikely to have any impact on

00:07:22,479 --> 00:07:27,360
anyone else working across the app

00:07:24,720 --> 00:07:28,639
and it's much more daunting if you know

00:07:27,360 --> 00:07:30,560
that you're responsible for other

00:07:28,639 --> 00:07:32,319
people's changes as well

00:07:30,560 --> 00:07:34,720
so giving people ownership of their

00:07:32,319 --> 00:07:36,319
deployments instills confidence in what

00:07:34,720 --> 00:07:37,520
they're deploying

00:07:36,319 --> 00:07:39,440
so really what we were after was

00:07:37,520 --> 00:07:40,800
something like the back end system but

00:07:39,440 --> 00:07:42,560
for the front end

00:07:40,800 --> 00:07:44,080
being able to work on isolated bits of

00:07:42,560 --> 00:07:45,039
the application and deploy them

00:07:44,080 --> 00:07:46,560
independently

00:07:45,039 --> 00:07:48,080
so you're not treading on anyone else's

00:07:46,560 --> 00:07:49,599
toes and you don't have to do that

00:07:48,080 --> 00:07:51,360
deployment tango every time you want to

00:07:49,599 --> 00:07:53,199
do any changes in

00:07:51,360 --> 00:07:54,800
so this any solution that we built had

00:07:53,199 --> 00:07:56,240
to be independently deployable

00:07:54,800 --> 00:07:58,000
so you wouldn't need to deploy the host

00:07:56,240 --> 00:08:01,280
app or the core app we're making

00:07:58,000 --> 00:08:02,800
changes to those parts of the app

00:08:01,280 --> 00:08:05,039
and then the host app would have to be

00:08:02,800 --> 00:08:05,919
able to discover all of the available

00:08:05,039 --> 00:08:07,520
bundles

00:08:05,919 --> 00:08:08,960
automatically somehow so that we don't

00:08:07,520 --> 00:08:10,400
have to hard code anything

00:08:08,960 --> 00:08:12,479
so if we imported all of the bundles

00:08:10,400 --> 00:08:13,919
into the code manually we'd have to then

00:08:12,479 --> 00:08:15,680
deploy the core up when building the

00:08:13,919 --> 00:08:18,080
bundles anyway which kind of defeats the

00:08:15,680 --> 00:08:19,840
point of this whole project

00:08:18,080 --> 00:08:21,120
and we wanted to use as much existing

00:08:19,840 --> 00:08:22,639
tooling as we could

00:08:21,120 --> 00:08:24,639
including our internal deployment

00:08:22,639 --> 00:08:25,919
tooling it is really brilliant and we

00:08:24,639 --> 00:08:27,680
could have spent our time and energy

00:08:25,919 --> 00:08:28,879
into automating our existing bizops

00:08:27,680 --> 00:08:30,000
deployment system

00:08:28,879 --> 00:08:31,360
but we didn't want to end up with

00:08:30,000 --> 00:08:33,200
completely different front-end and

00:08:31,360 --> 00:08:34,640
back-end deployment processes

00:08:33,200 --> 00:08:36,479
and it made a lot more sense for us to

00:08:34,640 --> 00:08:37,839
integrate whatever solution we came up

00:08:36,479 --> 00:08:40,640
with into the existing back-end

00:08:37,839 --> 00:08:42,719
deployment system

00:08:40,640 --> 00:08:44,959
so right away our minds went to micro

00:08:42,719 --> 00:08:46,560
front ends and the idea is good

00:08:44,959 --> 00:08:48,080
diff different parts of an app belong to

00:08:46,560 --> 00:08:49,680
different teams and so the different

00:08:48,080 --> 00:08:51,440
bits are actually isolated from each

00:08:49,680 --> 00:08:53,040
other

00:08:51,440 --> 00:08:55,120
the concept of micro frontends was

00:08:53,040 --> 00:08:57,519
actually popularized by thoughtworks and

00:08:55,120 --> 00:08:59,360
in fact in the 2016 edition of their

00:08:57,519 --> 00:09:01,279
thoughtworks technology radar

00:08:59,360 --> 00:09:03,279
um microfront ends was listed as

00:09:01,279 --> 00:09:05,360
something that people should adopt

00:09:03,279 --> 00:09:07,360
and the idea was that unlike a

00:09:05,360 --> 00:09:08,320
monolithic application microphone ends

00:09:07,360 --> 00:09:10,080
lead to smaller

00:09:08,320 --> 00:09:12,640
more cohesive and maintainable code

00:09:10,080 --> 00:09:15,760
bases more scalable organizations

00:09:12,640 --> 00:09:17,600
with decoupled and autonomous teams and

00:09:15,760 --> 00:09:19,519
the ability to upgrade and update or

00:09:17,600 --> 00:09:20,000
even rewrite parts of the application in

00:09:19,519 --> 00:09:21,600
a

00:09:20,000 --> 00:09:23,040
much more incremental fashion than was

00:09:21,600 --> 00:09:24,800
previously possible

00:09:23,040 --> 00:09:27,120
and they are pretty much micro services

00:09:24,800 --> 00:09:29,600
but in the front end hence the name

00:09:27,120 --> 00:09:30,880
um and this concept quite importantly

00:09:29,600 --> 00:09:33,040
isn't tied to any particular

00:09:30,880 --> 00:09:34,880
implementation or technology choice

00:09:33,040 --> 00:09:36,800
um but the key is being able to operate

00:09:34,880 --> 00:09:38,000
autonomously and deploy the various

00:09:36,800 --> 00:09:39,839
parts of the application

00:09:38,000 --> 00:09:41,519
independently which is pretty much what

00:09:39,839 --> 00:09:43,040
we were after

00:09:41,519 --> 00:09:44,640
and each piece being its own

00:09:43,040 --> 00:09:46,480
self-contained thing whether that's

00:09:44,640 --> 00:09:48,560
an individual app or a bundle of some

00:09:46,480 --> 00:09:49,680
sort and that way each team can build

00:09:48,560 --> 00:09:50,800
its own thing in the language or

00:09:49,680 --> 00:09:51,839
framework that it wants

00:09:50,800 --> 00:09:53,040
and then there are a few ways of

00:09:51,839 --> 00:09:54,240
bringing it back together in the front

00:09:53,040 --> 00:09:55,920
end

00:09:54,240 --> 00:09:57,839
now one of the ways that you can compose

00:09:55,920 --> 00:10:00,399
micro frontends into a larger app

00:09:57,839 --> 00:10:01,920
is to use server side includes that is

00:10:00,399 --> 00:10:04,000
so rendering content

00:10:01,920 --> 00:10:05,040
content through templating so this

00:10:04,000 --> 00:10:06,640
example came

00:10:05,040 --> 00:10:08,519
in the all the following examples come

00:10:06,640 --> 00:10:10,079
from a great article by cam jackson on

00:10:08,519 --> 00:10:11,920
martinfallow.com

00:10:10,079 --> 00:10:13,600
about the different ways of implementing

00:10:11,920 --> 00:10:15,120
front ends and the various advantages

00:10:13,600 --> 00:10:17,200
and disadvantages so i do recommend

00:10:15,120 --> 00:10:19,120
giving that a read

00:10:17,200 --> 00:10:21,120
so in this example nginx will replace

00:10:19,120 --> 00:10:22,880
the page variable with an html file

00:10:21,120 --> 00:10:24,720
that's associated with the path that the

00:10:22,880 --> 00:10:26,800
user is requesting

00:10:24,720 --> 00:10:30,079
and then that nginx config will specify

00:10:26,800 --> 00:10:32,720
which html file should be templated in

00:10:30,079 --> 00:10:34,480
very simple but we have a single page

00:10:32,720 --> 00:10:35,760
react app with no need for server-side

00:10:34,480 --> 00:10:37,920
integration because we're okay

00:10:35,760 --> 00:10:39,839
with everything being client-side so

00:10:37,920 --> 00:10:41,279
this didn't really suit our needs

00:10:39,839 --> 00:10:44,240
another suggestion is to have all your

00:10:41,279 --> 00:10:45,519
bundles as privately hosted npm modules

00:10:44,240 --> 00:10:47,680
which you can then specify as

00:10:45,519 --> 00:10:49,360
dependencies in your package json

00:10:47,680 --> 00:10:50,480
and you can then import these bundles in

00:10:49,360 --> 00:10:51,519
your code as you would any other

00:10:50,480 --> 00:10:53,279
dependency

00:10:51,519 --> 00:10:54,959
and as neat as this is it does have a

00:10:53,279 --> 00:10:56,800
massive downside of big build time

00:10:54,959 --> 00:10:58,959
integration which means that

00:10:56,800 --> 00:11:00,480
every time you update a module increment

00:10:58,959 --> 00:11:01,920
a version number you've got to rebuild

00:11:00,480 --> 00:11:02,560
the core app and install everything

00:11:01,920 --> 00:11:03,920
again

00:11:02,560 --> 00:11:05,360
and this doesn't help us at all because

00:11:03,920 --> 00:11:06,720
we actually want to get away from having

00:11:05,360 --> 00:11:08,399
to deploy the whole app every time we

00:11:06,720 --> 00:11:10,640
make changes to our tests

00:11:08,399 --> 00:11:13,279
um iframes you can compose micro front

00:11:10,640 --> 00:11:15,200
ends on the client side using

00:11:13,279 --> 00:11:17,279
iframes at runtime if anyone remembers

00:11:15,200 --> 00:11:18,720
live frames and it's a very simple

00:11:17,279 --> 00:11:20,480
solution and for some people the

00:11:18,720 --> 00:11:22,480
isolation that iphones provide

00:11:20,480 --> 00:11:24,240
is a really good thing but for us it

00:11:22,480 --> 00:11:26,480
wasn't suitable because we rely on a lot

00:11:24,240 --> 00:11:28,160
of shared state in the apollo client

00:11:26,480 --> 00:11:30,240
and it does make rooting very difficult

00:11:28,160 --> 00:11:32,000
as well if we have say

00:11:30,240 --> 00:11:33,360
a task and a sidebar they wouldn't

00:11:32,000 --> 00:11:34,640
easily be able to communicate with each

00:11:33,360 --> 00:11:36,640
other

00:11:34,640 --> 00:11:39,200
you can also um import bundles at

00:11:36,640 --> 00:11:40,640
runtime using javascript so

00:11:39,200 --> 00:11:42,480
the example here builds pulls in the

00:11:40,640 --> 00:11:44,399
bundles via script tags

00:11:42,480 --> 00:11:46,480
and um and those script files will

00:11:44,399 --> 00:11:48,320
define the bundles on the global window

00:11:46,480 --> 00:11:49,680
object

00:11:48,320 --> 00:11:51,360
and each bundle has its own render

00:11:49,680 --> 00:11:53,920
function which is called

00:11:51,360 --> 00:11:55,360
programmatically in a javascript code so

00:11:53,920 --> 00:11:57,120
all of these are relatively

00:11:55,360 --> 00:11:58,480
independently deployable methods except

00:11:57,120 --> 00:12:01,279
for maybe the build time

00:11:58,480 --> 00:12:02,639
npm packages and while you can deploy

00:12:01,279 --> 00:12:03,920
those on their own it doesn't really

00:12:02,639 --> 00:12:07,040
help us with

00:12:03,920 --> 00:12:08,240
being able to only deploy that bundle

00:12:07,040 --> 00:12:09,200
when we want to release something to

00:12:08,240 --> 00:12:10,639
production

00:12:09,200 --> 00:12:12,480
so we needed something dynamically

00:12:10,639 --> 00:12:14,160
importable as well during this due to

00:12:12,480 --> 00:12:16,320
the scale and the number of bundles that

00:12:14,160 --> 00:12:18,320
we're expecting to have

00:12:16,320 --> 00:12:19,600
we don't care so much about platform or

00:12:18,320 --> 00:12:21,760
framework of narcissism

00:12:19,600 --> 00:12:23,120
because we're pretty set on react in our

00:12:21,760 --> 00:12:24,720
organization

00:12:23,120 --> 00:12:26,480
and keeping the tech the same actually

00:12:24,720 --> 00:12:27,200
works in our favor given how the nature

00:12:26,480 --> 00:12:29,040
of development

00:12:27,200 --> 00:12:30,240
on biz ops works with kind of sponsoring

00:12:29,040 --> 00:12:31,519
teams

00:12:30,240 --> 00:12:33,200
and we don't need to worry about

00:12:31,519 --> 00:12:33,680
separate ci patterns for individual

00:12:33,200 --> 00:12:35,600
things

00:12:33,680 --> 00:12:37,200
we've got a monorepo we've got cio set

00:12:35,600 --> 00:12:39,279
up already

00:12:37,200 --> 00:12:40,800
and we don't need to render the bundles

00:12:39,279 --> 00:12:43,360
on the server because we're okay with

00:12:40,800 --> 00:12:45,839
having a client-side app

00:12:43,360 --> 00:12:47,600
so the most appealing option for us was

00:12:45,839 --> 00:12:48,880
client-side javascript bundles as it

00:12:47,600 --> 00:12:49,920
ticks all the boxes for what we're

00:12:48,880 --> 00:12:53,040
looking for

00:12:49,920 --> 00:12:56,160
and so that's what we did and that's

00:12:53,040 --> 00:12:57,440
the web chunk was conceived a javascript

00:12:56,160 --> 00:12:59,120
module plus a style sheet

00:12:57,440 --> 00:13:01,680
and this was the first name we came up

00:12:59,120 --> 00:13:03,360
with because after all it is a chunk of

00:13:01,680 --> 00:13:05,600
a web app right

00:13:03,360 --> 00:13:07,120
don't worry we did change the name we

00:13:05,600 --> 00:13:08,560
went with web nuggets for a while

00:13:07,120 --> 00:13:10,399
because we thought it was funny

00:13:08,560 --> 00:13:12,320
um and then we realized it was a pain to

00:13:10,399 --> 00:13:16,160
type out and also very stupid

00:13:12,320 --> 00:13:18,720
so we finally settled on weblitz

00:13:16,160 --> 00:13:19,279
which is a bit of a spiritual successor

00:13:18,720 --> 00:13:22,079
to the

00:13:19,279 --> 00:13:23,760
applet and i think it does contain

00:13:22,079 --> 00:13:27,440
convey what it is rather nicely

00:13:23,760 --> 00:13:29,360
as well so how would this work

00:13:27,440 --> 00:13:32,560
uh let's have a look first about how

00:13:29,360 --> 00:13:34,560
tasks work in visuals

00:13:32,560 --> 00:13:36,320
so this is our task renderer um it's a

00:13:34,560 --> 00:13:37,360
pretty basic react component which

00:13:36,320 --> 00:13:39,279
displays things

00:13:37,360 --> 00:13:40,480
and uh fetches some data from the back

00:13:39,279 --> 00:13:42,480
end

00:13:40,480 --> 00:13:44,320
um in our case there's a support call

00:13:42,480 --> 00:13:45,680
task that fetches data from our backend

00:13:44,320 --> 00:13:46,320
platform which in turn will talk to

00:13:45,680 --> 00:13:48,720
twilio

00:13:46,320 --> 00:13:50,240
which powers our support call system and

00:13:48,720 --> 00:13:52,480
the entry point of the task is a

00:13:50,240 --> 00:13:53,519
javascript object that specifies a type

00:13:52,480 --> 00:13:55,360
for the task

00:13:53,519 --> 00:13:56,720
a human readable label that appears in

00:13:55,360 --> 00:13:58,720
the user sidebar

00:13:56,720 --> 00:14:00,480
and in the search as well and also the

00:13:58,720 --> 00:14:03,600
renderer component that then should be

00:14:00,480 --> 00:14:05,680
used to display the task itself

00:14:03,600 --> 00:14:07,519
and when it comes to rendering a task

00:14:05,680 --> 00:14:10,800
all the tasks are given the same props

00:14:07,519 --> 00:14:12,480
so each task will have a unique id

00:14:10,800 --> 00:14:14,880
things like a created and updated

00:14:12,480 --> 00:14:18,000
timestamp and information about who the

00:14:14,880 --> 00:14:19,680
task is currently assigned to so user id

00:14:18,000 --> 00:14:22,079
and then some params which will contain

00:14:19,680 --> 00:14:24,000
data specific to the task type

00:14:22,079 --> 00:14:25,600
so what's in the params does depend on

00:14:24,000 --> 00:14:27,279
the task type for example as the walk

00:14:25,600 --> 00:14:28,399
call might have a param that contains

00:14:27,279 --> 00:14:30,720
the unique twilio

00:14:28,399 --> 00:14:32,800
call id that will link our call task for

00:14:30,720 --> 00:14:34,560
the call in twilio system

00:14:32,800 --> 00:14:36,480
and bizops gets these tasks from the

00:14:34,560 --> 00:14:37,920
back end checks their types

00:14:36,480 --> 00:14:40,079
and then chooses the appropriate

00:14:37,920 --> 00:14:42,160
renderer for that task type

00:14:40,079 --> 00:14:43,839
so to render a task we pull its renderer

00:14:42,160 --> 00:14:45,120
component out of the object that we got

00:14:43,839 --> 00:14:47,040
from the entry point

00:14:45,120 --> 00:14:48,480
and then we'll feed it the task object

00:14:47,040 --> 00:14:50,079
that we got from the back end

00:14:48,480 --> 00:14:53,600
which contains everything it needs to

00:14:50,079 --> 00:14:53,600
show all its data and do its thing

00:14:53,839 --> 00:14:58,880
so to turn task renders into web blocks

00:14:56,240 --> 00:15:00,560
we had a few jobs to do

00:14:58,880 --> 00:15:02,320
when it came to preparing the code for

00:15:00,560 --> 00:15:03,920
the actual renderers we actually didn't

00:15:02,320 --> 00:15:04,720
have to change them that much

00:15:03,920 --> 00:15:06,399
and they're already pretty

00:15:04,720 --> 00:15:07,680
self-contained and ultimately they're

00:15:06,399 --> 00:15:09,680
just a javascript object with an

00:15:07,680 --> 00:15:10,880
associated react component and a style

00:15:09,680 --> 00:15:13,120
sheet

00:15:10,880 --> 00:15:14,959
the bulk of the work was actually in

00:15:13,120 --> 00:15:16,880
building the individual bundles

00:15:14,959 --> 00:15:18,399
deploying them somehow and then

00:15:16,880 --> 00:15:20,959
importing them into the core bezel

00:15:18,399 --> 00:15:20,959
application

00:15:21,120 --> 00:15:25,199
now our core app is built using webpack

00:15:23,519 --> 00:15:26,399
which is nothing out of the ordinary for

00:15:25,199 --> 00:15:29,360
a react app

00:15:26,399 --> 00:15:31,120
each app has a make file which the

00:15:29,360 --> 00:15:32,240
builder service uses to know how to

00:15:31,120 --> 00:15:33,680
build the app

00:15:32,240 --> 00:15:36,480
the builder service then looks for a

00:15:33,680 --> 00:15:37,759
docker step which runs a docker file

00:15:36,480 --> 00:15:40,399
our web bits weren't going to be running

00:15:37,759 --> 00:15:42,079
in containers so but we did want to use

00:15:40,399 --> 00:15:43,120
as much of the existing process as we

00:15:42,079 --> 00:15:44,639
could

00:15:43,120 --> 00:15:47,360
so we put together a docker file for

00:15:44,639 --> 00:15:48,160
weblitz which sets various environment

00:15:47,360 --> 00:15:50,320
variables and

00:15:48,160 --> 00:15:51,759
runs yarn build as well but the

00:15:50,320 --> 00:15:53,199
difference is rather than setting an

00:15:51,759 --> 00:15:54,000
entry point and then running anything

00:15:53,199 --> 00:15:56,160
like you normally

00:15:54,000 --> 00:15:58,000
rode with the docker file we're actually

00:15:56,160 --> 00:16:00,720
copying across the built web blip bundle

00:15:58,000 --> 00:16:02,079
to a shared build directory

00:16:00,720 --> 00:16:03,759
and the biggest difference comes after

00:16:02,079 --> 00:16:05,600
this step so

00:16:03,759 --> 00:16:06,720
the builder runs the docker step without

00:16:05,600 --> 00:16:08,000
knowing that it's doing anything

00:16:06,720 --> 00:16:10,959
different from deploying any other

00:16:08,000 --> 00:16:12,800
app but um then we added in a new step

00:16:10,959 --> 00:16:14,720
where it checks for the web lit prefix

00:16:12,800 --> 00:16:17,519
in the build target so that'll be the

00:16:14,720 --> 00:16:18,000
uh folder name so it'll be like web lit

00:16:17,519 --> 00:16:20,000
dot

00:16:18,000 --> 00:16:21,680
support call for example and if that's

00:16:20,000 --> 00:16:23,759
present we'll run a new step in the

00:16:21,680 --> 00:16:25,680
makefile that we call post build

00:16:23,759 --> 00:16:28,480
and this is where we upload the bundle

00:16:25,680 --> 00:16:30,880
that we just built to s3

00:16:28,480 --> 00:16:32,720
and the url will contain the weblit type

00:16:30,880 --> 00:16:36,000
so in our case bizops task

00:16:32,720 --> 00:16:37,759
and the name support call and the hash

00:16:36,000 --> 00:16:40,079
of the current git commit

00:16:37,759 --> 00:16:41,279
and finally we deploy the weblet using

00:16:40,079 --> 00:16:44,399
that term very loosely

00:16:41,279 --> 00:16:45,600
in our platform by adding a new url into

00:16:44,399 --> 00:16:48,000
our discovery service

00:16:45,600 --> 00:16:50,160
so it's effectively a key value store

00:16:48,000 --> 00:16:53,120
which contains our list of web lit names

00:16:50,160 --> 00:16:54,720
and then their current url and s3

00:16:53,120 --> 00:16:56,240
um it's a big contrast from our usual

00:16:54,720 --> 00:16:58,320
deployment process which

00:16:56,240 --> 00:16:59,600
uh the rest of our apps including our

00:16:58,320 --> 00:17:00,959
web apps are actually deployed with

00:16:59,600 --> 00:17:02,399
kubernetes

00:17:00,959 --> 00:17:04,319
um and with web blitz nothing is

00:17:02,399 --> 00:17:06,720
actually running so they're just static

00:17:04,319 --> 00:17:09,120
javascript and css files hosted in an s3

00:17:06,720 --> 00:17:09,120
bucket

00:17:10,160 --> 00:17:14,480
so for module discovery bizops will then

00:17:12,559 --> 00:17:16,240
make a call to the discovery service on

00:17:14,480 --> 00:17:17,839
load with a graphql query

00:17:16,240 --> 00:17:19,360
and then it gets a list of web lits that

00:17:17,839 --> 00:17:20,559
it goes through and imports dynamically

00:17:19,360 --> 00:17:21,679
from s3

00:17:20,559 --> 00:17:23,679
and the web lists are stored in the

00:17:21,679 --> 00:17:25,520
apollo clients local cache and we can

00:17:23,679 --> 00:17:28,000
basically cache them forever because

00:17:25,520 --> 00:17:29,280
the url is uniquely determined by the

00:17:28,000 --> 00:17:32,000
git commit that's in the

00:17:29,280 --> 00:17:33,200
url so any new web link that we get in

00:17:32,000 --> 00:17:34,559
we'll have a new git commit and

00:17:33,200 --> 00:17:36,880
therefore it will bust the cache which

00:17:34,559 --> 00:17:38,400
is rather nice

00:17:36,880 --> 00:17:39,760
so we've built our web blitz and bizups

00:17:38,400 --> 00:17:41,360
can discover them but now we need to

00:17:39,760 --> 00:17:43,120
actually import them into the core app

00:17:41,360 --> 00:17:45,360
so how do we do that

00:17:43,120 --> 00:17:47,200
now the example that i gave before of

00:17:45,360 --> 00:17:48,559
client-side javascript bundles

00:17:47,200 --> 00:17:50,880
it does show how we can import the

00:17:48,559 --> 00:17:52,400
bundles into html script tags

00:17:50,880 --> 00:17:53,919
it's straightforward but we won't know

00:17:52,400 --> 00:17:55,440
all the web bits up front so there's a

00:17:53,919 --> 00:17:56,799
problem there

00:17:55,440 --> 00:17:58,880
because there could and there probably

00:17:56,799 --> 00:18:01,120
will be hundreds um

00:17:58,880 --> 00:18:03,360
and we want to load them at runtime we

00:18:01,120 --> 00:18:05,039
want to also import them at one time

00:18:03,360 --> 00:18:06,960
as we saw before if we imported them at

00:18:05,039 --> 00:18:08,000
build time so if we hard coded this in

00:18:06,960 --> 00:18:09,600
the html

00:18:08,000 --> 00:18:11,440
then we'd have to rebuild everything

00:18:09,600 --> 00:18:13,760
every time we deployed a new weblet

00:18:11,440 --> 00:18:16,160
so that wasn't going to work it'll be

00:18:13,760 --> 00:18:17,440
lovely simple option to use es6 modules

00:18:16,160 --> 00:18:19,679
which are now supported

00:18:17,440 --> 00:18:21,600
supported natively in chrome and also in

00:18:19,679 --> 00:18:23,679
a couple of other browsers as well

00:18:21,600 --> 00:18:26,080
um where one library import would point

00:18:23,679 --> 00:18:26,799
to the same url and so be deduped across

00:18:26,080 --> 00:18:28,480
the app

00:18:26,799 --> 00:18:31,039
and if we used it across multiple apps

00:18:28,480 --> 00:18:33,200
it would also be deduped which is nice

00:18:31,039 --> 00:18:35,200
but unfortunately for us webpack doesn't

00:18:33,200 --> 00:18:37,919
support es6 modules

00:18:35,200 --> 00:18:40,000
in a stable um in the stable release yet

00:18:37,919 --> 00:18:42,559
so it's an experimental feature

00:18:40,000 --> 00:18:44,080
coming in webpack 5 i think um but that

00:18:42,559 --> 00:18:45,840
could change at any time and

00:18:44,080 --> 00:18:47,280
it's still in beta so we weren't really

00:18:45,840 --> 00:18:49,200
comfortable using it in a production app

00:18:47,280 --> 00:18:51,440
that was this important

00:18:49,200 --> 00:18:52,559
and roll up does actually build at es6

00:18:51,440 --> 00:18:54,080
modules but it would have

00:18:52,559 --> 00:18:55,840
it would have basically involved us

00:18:54,080 --> 00:18:56,960
reworking the entire system to use roll

00:18:55,840 --> 00:18:59,919
up which isn't something we really

00:18:56,960 --> 00:19:02,480
wanted to consider at this point

00:18:59,919 --> 00:19:03,360
luckily for us that's system js and this

00:19:02,480 --> 00:19:05,760
is a loader which

00:19:03,360 --> 00:19:07,360
outputs es5 compatible modules and

00:19:05,760 --> 00:19:09,600
offers dynamic and port of the same

00:19:07,360 --> 00:19:11,679
which is the really important part

00:19:09,600 --> 00:19:13,120
it's an emulation of es6 modules but in

00:19:11,679 --> 00:19:14,480
a kind of traditional script-based

00:19:13,120 --> 00:19:16,559
javascript browser

00:19:14,480 --> 00:19:18,400
environment and webpack does build

00:19:16,559 --> 00:19:20,799
system.js modules so

00:19:18,400 --> 00:19:21,919
we get webpack to output those and then

00:19:20,799 --> 00:19:24,000
we can import

00:19:21,919 --> 00:19:26,480
using system.import which is the

00:19:24,000 --> 00:19:28,080
system.js minimal loader

00:19:26,480 --> 00:19:29,919
and this gives us an import function out

00:19:28,080 --> 00:19:30,480
of the box that allows us to dynamically

00:19:29,919 --> 00:19:32,720
pass in

00:19:30,480 --> 00:19:34,240
modules at runtime and what we passing

00:19:32,720 --> 00:19:36,799
can be a file path or

00:19:34,240 --> 00:19:38,240
more importantly a url which is perfect

00:19:36,799 --> 00:19:41,120
for us because we get a web

00:19:38,240 --> 00:19:42,720
web urls from the discovery servers so

00:19:41,120 --> 00:19:43,919
we iterate over the mod the web list

00:19:42,720 --> 00:19:46,000
from the graphql

00:19:43,919 --> 00:19:49,200
query result and then we can import them

00:19:46,000 --> 00:19:49,200
using system import

00:19:49,280 --> 00:19:52,720
and for local development since the

00:19:50,720 --> 00:19:54,960
weblets are in the same repository as

00:19:52,720 --> 00:19:56,320
bizops um the developer's already going

00:19:54,960 --> 00:19:57,679
to have them locally

00:19:56,320 --> 00:20:00,080
so we can actually just import them

00:19:57,679 --> 00:20:02,960
normally as we would the original tasks

00:20:00,080 --> 00:20:04,559
we've got a file that um called tasks

00:20:02,960 --> 00:20:06,240
development that actually

00:20:04,559 --> 00:20:07,679
only runs in development and will

00:20:06,240 --> 00:20:09,039
resolve all the weblit folders in the

00:20:07,679 --> 00:20:11,039
repo

00:20:09,039 --> 00:20:12,960
and then import each web look and then

00:20:11,039 --> 00:20:14,480
for each imported module we turn it into

00:20:12,960 --> 00:20:15,840
a bizops task ready to be used and

00:20:14,480 --> 00:20:18,000
rendered

00:20:15,840 --> 00:20:19,440
and the result well it looks the same

00:20:18,000 --> 00:20:20,880
which is the point and there isn't

00:20:19,440 --> 00:20:23,679
really any perceptible difference from

00:20:20,880 --> 00:20:25,520
the user's point of view

00:20:23,679 --> 00:20:27,440
but of course no implementation is

00:20:25,520 --> 00:20:29,919
without its challenges

00:20:27,440 --> 00:20:31,360
it's like renovating a house so no

00:20:29,919 --> 00:20:32,640
matter how strong the foundations are

00:20:31,360 --> 00:20:35,840
you always encounter some kind of

00:20:32,640 --> 00:20:37,919
surprises when you move walls around

00:20:35,840 --> 00:20:40,159
and the one of the challenges that we

00:20:37,919 --> 00:20:41,919
did face was bundle size so

00:20:40,159 --> 00:20:43,600
once we got weblit's building we needed

00:20:41,919 --> 00:20:45,440
to address the bundle size because

00:20:43,600 --> 00:20:47,280
our experimental weblit was weighing in

00:20:45,440 --> 00:20:48,640
at about three megabytes which is pretty

00:20:47,280 --> 00:20:50,159
massive when you consider

00:20:48,640 --> 00:20:51,760
it's just a few files and when you think

00:20:50,159 --> 00:20:52,559
about how many we were expecting to have

00:20:51,760 --> 00:20:53,840
as well

00:20:52,559 --> 00:20:56,080
think about how much extra it would be

00:20:53,840 --> 00:20:57,919
to download and the problem here was the

00:20:56,080 --> 00:20:59,760
number of dependencies in each task

00:20:57,919 --> 00:21:01,919
renderer depends on react

00:20:59,760 --> 00:21:03,520
and some of them on apollo for graphql

00:21:01,919 --> 00:21:04,960
and various other helper libraries like

00:21:03,520 --> 00:21:07,120
lowdash or moment which

00:21:04,960 --> 00:21:08,400
can be pretty massive and this wouldn't

00:21:07,120 --> 00:21:10,320
have been a problem if we'd been able to

00:21:08,400 --> 00:21:12,640
use es6 modules out of the box because

00:21:10,320 --> 00:21:14,400
they can quite easily share dependencies

00:21:12,640 --> 00:21:16,320
but since we were using system.js we had

00:21:14,400 --> 00:21:18,640
to find another alternative

00:21:16,320 --> 00:21:20,000
so we tried the webpack dll plugin which

00:21:18,640 --> 00:21:20,960
lets you split bundles and map

00:21:20,000 --> 00:21:22,400
dependencies

00:21:20,960 --> 00:21:24,799
but it didn't really play nicely with

00:21:22,400 --> 00:21:26,880
our mono repo and quite by chance we

00:21:24,799 --> 00:21:29,520
discovered another feature of system.js

00:21:26,880 --> 00:21:31,679
which is the named register

00:21:29,520 --> 00:21:32,960
with named registers we can list out all

00:21:31,679 --> 00:21:34,960
the dependencies we want to share

00:21:32,960 --> 00:21:37,120
between weblets and the core apps

00:21:34,960 --> 00:21:39,120
so these include our shared monzo

00:21:37,120 --> 00:21:41,600
libraries like auth and components

00:21:39,120 --> 00:21:42,720
uh sentry which we use for error logging

00:21:41,600 --> 00:21:45,280
um apollo

00:21:42,720 --> 00:21:47,440
graphql and of course react itself and

00:21:45,280 --> 00:21:48,880
on load we call system.register on each

00:21:47,440 --> 00:21:50,720
of these dependencies

00:21:48,880 --> 00:21:52,240
and what that does is allows us to pass

00:21:50,720 --> 00:21:53,840
in a name for a module and then we can

00:21:52,240 --> 00:21:56,159
import it just as we would any other

00:21:53,840 --> 00:21:58,640
external dependency in javascript

00:21:56,159 --> 00:22:00,320
so for example react we register our

00:21:58,640 --> 00:22:01,039
specific react dependency with the name

00:22:00,320 --> 00:22:03,120
react

00:22:01,039 --> 00:22:04,720
and then whenever our web let's say

00:22:03,120 --> 00:22:06,720
import react from react

00:22:04,720 --> 00:22:08,720
system js will resolve that to our

00:22:06,720 --> 00:22:10,000
particular dependency bundle

00:22:08,720 --> 00:22:11,919
it's not their preferred way of

00:22:10,000 --> 00:22:13,440
resolving dependencies so system.js

00:22:11,919 --> 00:22:15,200
actually recommend you use things like

00:22:13,440 --> 00:22:15,840
roll up bundle splitting instead rather

00:22:15,200 --> 00:22:18,080
than named

00:22:15,840 --> 00:22:20,159
registers but for external dependencies

00:22:18,080 --> 00:22:21,600
it really does work a treat

00:22:20,159 --> 00:22:23,440
and finally then we run the bundles

00:22:21,600 --> 00:22:27,760
through a minifier at build time so that

00:22:23,440 --> 00:22:29,520
we can squash it down as much as we can

00:22:27,760 --> 00:22:31,360
another side to dependency management is

00:22:29,520 --> 00:22:32,720
that unfortunately a lot of tasks import

00:22:31,360 --> 00:22:34,799
things they shouldn't

00:22:32,720 --> 00:22:36,240
so some import other tasks some import

00:22:34,799 --> 00:22:38,080
bits of the sidebar panels which are

00:22:36,240 --> 00:22:40,080
also meant to be isolated and you end up

00:22:38,080 --> 00:22:42,000
with this kind of dependency chain of

00:22:40,080 --> 00:22:43,200
things important things importing things

00:22:42,000 --> 00:22:45,280
such as the ab

00:22:43,200 --> 00:22:47,039
api library importing the auth library

00:22:45,280 --> 00:22:49,360
which imports the utils library which

00:22:47,039 --> 00:22:51,120
imports the money formatting library

00:22:49,360 --> 00:22:52,799
and some dependencies are just massive

00:22:51,120 --> 00:22:53,679
which you don't notice until it's too

00:22:52,799 --> 00:22:56,400
late like

00:22:53,679 --> 00:22:58,000
decimal dot js is surprisingly huge so

00:22:56,400 --> 00:22:59,200
we ended up spending quite a bit of time

00:22:58,000 --> 00:23:01,280
going through and unpicking some of

00:22:59,200 --> 00:23:02,720
these dependency chains and

00:23:01,280 --> 00:23:04,480
shifting stuff into kind of shared

00:23:02,720 --> 00:23:06,559
libraries rather than importing directly

00:23:04,480 --> 00:23:08,080
from other tasks

00:23:06,559 --> 00:23:09,520
and also replacing some larger

00:23:08,080 --> 00:23:11,919
dependencies with smaller ones where

00:23:09,520 --> 00:23:11,919
possible

00:23:12,159 --> 00:23:15,600
it's a great analogy here from joe

00:23:13,679 --> 00:23:17,520
armstrong you wanted a banana but what

00:23:15,600 --> 00:23:19,440
you got was a gorilla holding the banana

00:23:17,520 --> 00:23:20,960
and the entire jungle

00:23:19,440 --> 00:23:22,880
another challenge was getting people on

00:23:20,960 --> 00:23:24,480
board so we um

00:23:22,880 --> 00:23:26,240
both for kind of migrating things across

00:23:24,480 --> 00:23:27,280
but also starting using webinars in the

00:23:26,240 --> 00:23:28,720
first place so

00:23:27,280 --> 00:23:30,320
once we got the message out that web

00:23:28,720 --> 00:23:31,919
blitz were a thing now

00:23:30,320 --> 00:23:33,440
we write we wrote some documentation

00:23:31,919 --> 00:23:35,200
which really helped so

00:23:33,440 --> 00:23:36,960
we have a self-guided web tutorial at

00:23:35,200 --> 00:23:38,559
monzo called web101

00:23:36,960 --> 00:23:40,080
and once weblets were ready to use i

00:23:38,559 --> 00:23:42,000
actually rewrote it so that

00:23:40,080 --> 00:23:43,679
the guy guides the reader through

00:23:42,000 --> 00:23:45,679
creating a brand new webline instead of

00:23:43,679 --> 00:23:47,360
creating an old style task

00:23:45,679 --> 00:23:48,640
and the advantage is that anyone coming

00:23:47,360 --> 00:23:50,559
to the guide for the first time would

00:23:48,640 --> 00:23:52,320
now see weblets as the default way to go

00:23:50,559 --> 00:23:54,320
for biz ops tasks

00:23:52,320 --> 00:23:56,240
but we also wanted to help people

00:23:54,320 --> 00:23:58,720
actually help us migrate

00:23:56,240 --> 00:24:00,000
the tasks so there's a lot of tasks and

00:23:58,720 --> 00:24:01,039
biz ups owned by a lot of different

00:24:00,000 --> 00:24:03,200
teams and we just didn't have the

00:24:01,039 --> 00:24:04,720
capacity to migrate them all ourselves

00:24:03,200 --> 00:24:06,320
but it's difficult because you're asking

00:24:04,720 --> 00:24:07,520
people to step away from whatever else

00:24:06,320 --> 00:24:09,360
they're working on

00:24:07,520 --> 00:24:11,200
and to mitigate this we wrote a wizard

00:24:09,360 --> 00:24:13,360
and a build script that sets you through

00:24:11,200 --> 00:24:14,880
manual tasks of migration such as

00:24:13,360 --> 00:24:16,640
moving the directory or suggesting a

00:24:14,880 --> 00:24:18,559
name but there are still

00:24:16,640 --> 00:24:20,240
there's still a fair bit of manual work

00:24:18,559 --> 00:24:22,799
involved and it's it's not an easy one

00:24:20,240 --> 00:24:24,159
to solve

00:24:22,799 --> 00:24:25,919
and finally this problem is not a

00:24:24,159 --> 00:24:28,240
technical one either but it's a very big

00:24:25,919 --> 00:24:29,679
one in a fast-moving organization

00:24:28,240 --> 00:24:31,440
when you're trying to do a migration or

00:24:29,679 --> 00:24:32,000
a big refactor it seems almost

00:24:31,440 --> 00:24:32,960
inevitable

00:24:32,000 --> 00:24:35,360
that something else is going to come

00:24:32,960 --> 00:24:36,960
along and take away your focus so in our

00:24:35,360 --> 00:24:38,400
teen's case i was actually moved off the

00:24:36,960 --> 00:24:39,840
team to onto something i had a more

00:24:38,400 --> 00:24:42,480
pressing business need

00:24:39,840 --> 00:24:44,400
which is totally legitimate but it is it

00:24:42,480 --> 00:24:45,600
did leave the team down in engineering

00:24:44,400 --> 00:24:47,440
with something like this it's really

00:24:45,600 --> 00:24:49,039
important to be able to articulate the

00:24:47,440 --> 00:24:51,520
importance of getting it finished

00:24:49,039 --> 00:24:53,039
and the consequences if you don't or you

00:24:51,520 --> 00:24:54,000
or you'll end up with a half finished

00:24:53,039 --> 00:24:55,919
piece of work

00:24:54,000 --> 00:24:57,840
and so i was able to get the deployment

00:24:55,919 --> 00:24:59,760
bits finished and hook up the discovery

00:24:57,840 --> 00:25:00,960
service to the front end before i left

00:24:59,760 --> 00:25:03,120
but it took the rest of the team a

00:25:00,960 --> 00:25:04,960
little bit longer to finish

00:25:03,120 --> 00:25:06,559
well luckily we did get there and we've

00:25:04,960 --> 00:25:08,159
now expanded the scope of weblets to

00:25:06,559 --> 00:25:11,679
other parts of the application not just

00:25:08,159 --> 00:25:11,679
tasks which is really exciting

00:25:13,039 --> 00:25:16,799
so was there a better way we could have

00:25:14,480 --> 00:25:18,960
done this honestly maybe

00:25:16,799 --> 00:25:20,720
um to steal and paraphrase badly from

00:25:18,960 --> 00:25:22,080
the retrospective manifesto

00:25:20,720 --> 00:25:24,320
we did what we could with the tools that

00:25:22,080 --> 00:25:24,960
we had at the time and it does seem to

00:25:24,320 --> 00:25:26,799
have worked

00:25:24,960 --> 00:25:28,000
uh when web pack five comes out with a

00:25:26,799 --> 00:25:30,480
stable release we might

00:25:28,000 --> 00:25:32,559
visit revisit the es6 module approach

00:25:30,480 --> 00:25:34,000
who knows

00:25:32,559 --> 00:25:36,080
i do want to quickly highlight why

00:25:34,000 --> 00:25:37,760
developer experience could be so

00:25:36,080 --> 00:25:39,679
important for customer experience as

00:25:37,760 --> 00:25:40,320
well so at first glance it doesn't seem

00:25:39,679 --> 00:25:41,679
to seem

00:25:40,320 --> 00:25:43,760
like the web blitz doesn't seem to have

00:25:41,679 --> 00:25:44,720
any effect on customers or the cops who

00:25:43,760 --> 00:25:46,240
use the app

00:25:44,720 --> 00:25:47,840
but our customer service is one of the

00:25:46,240 --> 00:25:49,279
most important parts of the business and

00:25:47,840 --> 00:25:50,880
we need to make sure our customer

00:25:49,279 --> 00:25:52,640
operations staff have everything they

00:25:50,880 --> 00:25:53,919
need to do their jobs well

00:25:52,640 --> 00:25:55,679
and for that we need to make sure that

00:25:53,919 --> 00:25:58,000
we can make changes and fix anything

00:25:55,679 --> 00:25:59,840
that needs fixing in good time

00:25:58,000 --> 00:26:01,200
and having these task renderers isolated

00:25:59,840 --> 00:26:02,720
in their own little bundles mean that

00:26:01,200 --> 00:26:04,400
developers can write code

00:26:02,720 --> 00:26:05,600
and ship it efficiently without having

00:26:04,400 --> 00:26:06,320
to negotiate with lots of other

00:26:05,600 --> 00:26:08,559
developers

00:26:06,320 --> 00:26:09,360
these changes are going in as well and

00:26:08,559 --> 00:26:11,279
the blast

00:26:09,360 --> 00:26:12,640
radius is a lot smaller if anything does

00:26:11,279 --> 00:26:14,400
go wrong so we'd

00:26:12,640 --> 00:26:15,760
be rolling back just a tiny subset of

00:26:14,400 --> 00:26:18,320
changes rather than say

00:26:15,760 --> 00:26:20,240
five or six different people's code and

00:26:18,320 --> 00:26:22,080
developer experience is a trade-off

00:26:20,240 --> 00:26:23,679
usually you want to prioritize customer

00:26:22,080 --> 00:26:24,880
experience you especially when it comes

00:26:23,679 --> 00:26:26,080
to things like performance or

00:26:24,880 --> 00:26:27,600
accessibility

00:26:26,080 --> 00:26:29,919
but in this case it is a process

00:26:27,600 --> 00:26:32,720
improvement and it's risk mitigation

00:26:29,919 --> 00:26:34,240
as a bank we care deeply about risk it's

00:26:32,720 --> 00:26:35,039
just one of several initiatives that

00:26:34,240 --> 00:26:37,279
monzo

00:26:35,039 --> 00:26:39,120
designed to make changes safer and we

00:26:37,279 --> 00:26:40,720
want to empower and encourage people to

00:26:39,120 --> 00:26:42,880
contribute with the confidence that it's

00:26:40,720 --> 00:26:45,919
not going to result in crying

00:26:42,880 --> 00:26:48,640
or fires um and we've got

00:26:45,919 --> 00:26:49,200
you know maybe eight web developers at

00:26:48,640 --> 00:26:51,039
monzo

00:26:49,200 --> 00:26:52,960
the majority of contributors are back

00:26:51,039 --> 00:26:54,559
end and we've had to put together

00:26:52,960 --> 00:26:55,760
something that suits them to make it

00:26:54,559 --> 00:26:57,360
easier for them

00:26:55,760 --> 00:26:58,640
streamlining the process as much as

00:26:57,360 --> 00:27:00,000
possible so that it can remain

00:26:58,640 --> 00:27:01,600
productive

00:27:00,000 --> 00:27:03,120
and at the end of the day the convoluted

00:27:01,600 --> 00:27:04,640
process of deployment was holding them

00:27:03,120 --> 00:27:05,600
up because the system was constantly

00:27:04,640 --> 00:27:07,520
growing

00:27:05,600 --> 00:27:09,279
and we can do it because our users are

00:27:07,520 --> 00:27:11,279
internal so they're all on

00:27:09,279 --> 00:27:13,360
latest chrome they're all on the latest

00:27:11,279 --> 00:27:14,640
technology we need to

00:27:13,360 --> 00:27:15,919
you need to make sure if you're doing

00:27:14,640 --> 00:27:17,440
anything that involves developer

00:27:15,919 --> 00:27:18,480
experience that you know your customers

00:27:17,440 --> 00:27:19,520
and you're going to make sure that it's

00:27:18,480 --> 00:27:21,360
not going to negatively

00:27:19,520 --> 00:27:22,640
negatively impact their experience in

00:27:21,360 --> 00:27:24,240
any way

00:27:22,640 --> 00:27:25,840
and it's easy to dismiss developer

00:27:24,240 --> 00:27:27,200
experiences just adding stuff because

00:27:25,840 --> 00:27:28,640
it's new and exciting

00:27:27,200 --> 00:27:30,880
but it is really important when it's

00:27:28,640 --> 00:27:32,240
about risk mitigation

00:27:30,880 --> 00:27:33,679
so if you're building an app that needs

00:27:32,240 --> 00:27:34,000
to grow massively in a short amount of

00:27:33,679 --> 00:27:36,240
time

00:27:34,000 --> 00:27:37,440
it is worth considering something like

00:27:36,240 --> 00:27:39,760
micro frontends from

00:27:37,440 --> 00:27:41,760
start so consider modularity in

00:27:39,760 --> 00:27:44,720
independent deployments

00:27:41,760 --> 00:27:46,159
but if you're not sure micro monoliths

00:27:44,720 --> 00:27:48,000
are probably fine

00:27:46,159 --> 00:27:50,000
our monolith was fine for three to four

00:27:48,000 --> 00:27:51,600
years as the organization and number of

00:27:50,000 --> 00:27:53,760
sponsoring teams was growing

00:27:51,600 --> 00:27:56,399
we needed to change something and

00:27:53,760 --> 00:27:58,000
monzo's back end platform was built

00:27:56,399 --> 00:27:59,679
on microservices right from the

00:27:58,000 --> 00:28:01,200
beginning because we knew as an

00:27:59,679 --> 00:28:02,320
organization that that was where we were

00:28:01,200 --> 00:28:04,880
heading to

00:28:02,320 --> 00:28:06,159
large scale operations and it was time

00:28:04,880 --> 00:28:08,399
for the front end to head that way as

00:28:06,159 --> 00:28:08,399
well

00:28:08,559 --> 00:28:11,840
thank you so much for listening and you

00:28:10,320 --> 00:28:13,919
can get in touch with me by email

00:28:11,840 --> 00:28:15,120
or via twitter if you have any questions

00:28:13,919 --> 00:28:17,840
thanks a lot enjoy the rest of the

00:28:15,120 --> 00:28:17,840
conference

00:28:27,980 --> 00:28:33,099
[Music]

00:28:35,600 --> 00:28:42,320
that was an amazing talk thank you for

00:28:39,039 --> 00:28:42,320
delivering it as part of it

00:28:42,640 --> 00:28:47,039
we're waiting for some questions to come

00:28:44,640 --> 00:28:49,440
in oh no we've had one coming from joe

00:28:47,039 --> 00:28:52,880
fantastic timing joe

00:28:49,440 --> 00:28:55,120
so what made you pick weblit over npm

00:28:52,880 --> 00:28:55,919
bundling and i love the word weblitz by

00:28:55,120 --> 00:28:58,159
the way

00:28:55,919 --> 00:29:00,720
and when do you decide to start code

00:28:58,159 --> 00:29:02,799
splitting and are there obvious pointers

00:29:00,720 --> 00:29:05,440
that you've got the monolith so three

00:29:02,799 --> 00:29:08,240
questions in one thing

00:29:05,440 --> 00:29:08,720
um yeah so with regards to web looks

00:29:08,240 --> 00:29:12,720
over

00:29:08,720 --> 00:29:13,679
bundling um um so i kind of touched on

00:29:12,720 --> 00:29:16,320
it briefly

00:29:13,679 --> 00:29:18,320
the issue with npm bundling um is that

00:29:16,320 --> 00:29:21,360
you've still got to include the bundles

00:29:18,320 --> 00:29:22,799
at uh build time so the thing that we

00:29:21,360 --> 00:29:24,399
wanted to be able to do was to deploy

00:29:22,799 --> 00:29:26,080
these bundles independently

00:29:24,399 --> 00:29:28,240
um without having to rebuild and

00:29:26,080 --> 00:29:29,840
redeploy the core app which is where the

00:29:28,240 --> 00:29:32,799
kind of time sync was

00:29:29,840 --> 00:29:34,399
so by um by importing the bundles

00:29:32,799 --> 00:29:37,039
dynamically at runtime

00:29:34,399 --> 00:29:37,919
um that allows us to um keep everything

00:29:37,039 --> 00:29:40,159
a bit separate

00:29:37,919 --> 00:29:42,000
um so npm bundling does introduce that

00:29:40,159 --> 00:29:44,000
the kind of same dependency of

00:29:42,000 --> 00:29:45,120
knowing what everything is at build time

00:29:44,000 --> 00:29:48,000
and importing it then

00:29:45,120 --> 00:29:48,559
so it wasn't really an option for us

00:29:48,000 --> 00:29:50,880
okay

00:29:48,559 --> 00:29:52,480
and the second part of that was are

00:29:50,880 --> 00:29:54,000
there any of obvious pointers that

00:29:52,480 --> 00:29:56,480
you've got a monolith when you

00:29:54,000 --> 00:29:57,039
start code splitting that's a good

00:29:56,480 --> 00:29:59,760
question

00:29:57,039 --> 00:30:01,440
um yeah i mean i've worked on kind of a

00:29:59,760 --> 00:30:03,760
monolith before that was

00:30:01,440 --> 00:30:05,520
a quite small monolith so it you didn't

00:30:03,760 --> 00:30:08,640
really feel the pain i think

00:30:05,520 --> 00:30:09,520
um i mean technically any app that is

00:30:08,640 --> 00:30:11,600
just one

00:30:09,520 --> 00:30:12,880
big system is is a monolith it can be a

00:30:11,600 --> 00:30:15,600
really small one and

00:30:12,880 --> 00:30:16,960
you'll be fine forever i think it's when

00:30:15,600 --> 00:30:19,520
you start to feel the pain

00:30:16,960 --> 00:30:20,480
of multiple teams working and deploying

00:30:19,520 --> 00:30:23,440
over each other

00:30:20,480 --> 00:30:25,039
and builds taking a long time and things

00:30:23,440 --> 00:30:26,480
generally slowing down but it might be

00:30:25,039 --> 00:30:27,840
time to think oh you know should we

00:30:26,480 --> 00:30:31,120
maybe split things up

00:30:27,840 --> 00:30:33,919
i think i think um i think the teams

00:30:31,120 --> 00:30:35,440
really are the the people who benefit

00:30:33,919 --> 00:30:38,000
the most from having

00:30:35,440 --> 00:30:38,640
uh weblets or any kind of micro

00:30:38,000 --> 00:30:40,240
front-end

00:30:38,640 --> 00:30:42,159
structure because then yeah it's like

00:30:40,240 --> 00:30:43,760
independence that it gives you

00:30:42,159 --> 00:30:45,520
okay and in your talk you said it that

00:30:43,760 --> 00:30:47,840
was linked to scale of the team

00:30:45,520 --> 00:30:50,480
do you have any suggestions as to what

00:30:47,840 --> 00:30:52,640
kind of size of team that micro front

00:30:50,480 --> 00:30:56,000
ends would be more suited to

00:30:52,640 --> 00:30:56,000
i mean i think um

00:30:56,080 --> 00:31:00,960
that's a good question i mean teams

00:30:59,440 --> 00:31:02,240
can vary massively in size i mean they

00:31:00,960 --> 00:31:03,840
should never get too big that's that

00:31:02,240 --> 00:31:05,279
whole two pizza rule although i always

00:31:03,840 --> 00:31:06,559
thought that was quite stingy because i

00:31:05,279 --> 00:31:07,360
personally would rather have a whole

00:31:06,559 --> 00:31:08,960
pizza

00:31:07,360 --> 00:31:10,480
yeah me and you we'd have those between

00:31:08,960 --> 00:31:14,399
us definitely

00:31:10,480 --> 00:31:17,519
um but um i think um

00:31:14,399 --> 00:31:18,000
i think uh it doesn't i don't think it

00:31:17,519 --> 00:31:20,480
really matters

00:31:18,000 --> 00:31:21,760
how big the team is i think it depends

00:31:20,480 --> 00:31:24,399
how often people

00:31:21,760 --> 00:31:26,159
are whether changes are piling up in

00:31:24,399 --> 00:31:27,679
deployments basically so is it stopping

00:31:26,159 --> 00:31:29,679
you from being able to deploy really

00:31:27,679 --> 00:31:32,720
uh to deliver continuously to deploy

00:31:29,679 --> 00:31:34,080
quickly um or is it um

00:31:32,720 --> 00:31:35,360
yeah is it that you're kind of having to

00:31:34,080 --> 00:31:36,559
wait for loads of different people to

00:31:35,360 --> 00:31:38,000
test the changes

00:31:36,559 --> 00:31:39,360
um it's really the number of developers

00:31:38,000 --> 00:31:40,240
rather than the kind of size of the

00:31:39,360 --> 00:31:44,399
teams i think

00:31:40,240 --> 00:31:46,720
okay okay brilliant answer and so

00:31:44,399 --> 00:31:47,679
we got a quick one here how small should

00:31:46,720 --> 00:31:50,480
web looks be

00:31:47,679 --> 00:31:51,120
and can they be too small or large i

00:31:50,480 --> 00:31:52,799
mean as

00:31:51,120 --> 00:31:54,240
small as possible really can't be too

00:31:52,799 --> 00:31:56,960
small um

00:31:54,240 --> 00:31:58,720
the smaller they are the um i'm assuming

00:31:56,960 --> 00:32:00,399
you're talking kind of file size or kind

00:31:58,720 --> 00:32:02,399
of bundle size and

00:32:00,399 --> 00:32:03,440
i imagine sorry yeah the smaller they

00:32:02,399 --> 00:32:04,720
are the better because

00:32:03,440 --> 00:32:07,120
it's ultimately data that you're

00:32:04,720 --> 00:32:09,519
translating over the internet so

00:32:07,120 --> 00:32:11,440
um although importing web lists isn't

00:32:09,519 --> 00:32:14,559
like a blocking thing we'd kind of do it

00:32:11,440 --> 00:32:15,039
in the background but um you you don't

00:32:14,559 --> 00:32:16,960
want to be

00:32:15,039 --> 00:32:18,720
bringing in like several megabytes worth

00:32:16,960 --> 00:32:20,559
of bundles on every load

00:32:18,720 --> 00:32:22,000
even if you do have the app open the

00:32:20,559 --> 00:32:25,200
whole day and um

00:32:22,000 --> 00:32:26,480
it's it can still um kind of cause

00:32:25,200 --> 00:32:27,919
everything to grind a little bit if

00:32:26,480 --> 00:32:29,120
you've got loads of massive bundles that

00:32:27,919 --> 00:32:31,679
you're importing in so yeah

00:32:29,120 --> 00:32:33,120
smaller the better smaller the better

00:32:31,679 --> 00:32:35,039
and the next question is

00:32:33,120 --> 00:32:36,320
do you have any that you can share as

00:32:35,039 --> 00:32:38,399
examples

00:32:36,320 --> 00:32:39,840
uh so i actually oh in terms of

00:32:38,399 --> 00:32:40,559
functionality okay i'll come to that in

00:32:39,840 --> 00:32:43,840
a minute

00:32:40,559 --> 00:32:45,600
um i actually don't i'm afraid um so uh

00:32:43,840 --> 00:32:46,960
that's that's a really interesting one

00:32:45,600 --> 00:32:50,720
and i think um

00:32:46,960 --> 00:32:52,080
we could probably uh kind of

00:32:50,720 --> 00:32:54,240
put one together at some point in the

00:32:52,080 --> 00:32:55,200
future maybe on our company blog or

00:32:54,240 --> 00:32:57,519
something

00:32:55,200 --> 00:32:58,399
that's a really good idea yeah i'd be

00:32:57,519 --> 00:32:59,919
interested to know

00:32:58,399 --> 00:33:01,679
so yeah terms of functionality

00:32:59,919 --> 00:33:04,559
functionality um

00:33:01,679 --> 00:33:05,760
so i can't kind of give a definitive

00:33:04,559 --> 00:33:07,679
answer on that because we've kept them

00:33:05,760 --> 00:33:11,919
quite single functions so

00:33:07,679 --> 00:33:15,039
um each lit is one task renderer

00:33:11,919 --> 00:33:15,519
um so it has a single function of like

00:33:15,039 --> 00:33:18,720
oh

00:33:15,519 --> 00:33:20,480
handle support calls or handle chat or

00:33:18,720 --> 00:33:22,480
um process this check that someone's

00:33:20,480 --> 00:33:24,799
posted in um

00:33:22,480 --> 00:33:25,919
or um in like kind of more recent work

00:33:24,799 --> 00:33:28,080
that we've been doing

00:33:25,919 --> 00:33:30,080
it's been kind of like oh a panel that

00:33:28,080 --> 00:33:30,880
shows user information a panel that

00:33:30,080 --> 00:33:33,039
shows

00:33:30,880 --> 00:33:33,919
um the cards that we've posted to this

00:33:33,039 --> 00:33:36,720
customer

00:33:33,919 --> 00:33:38,399
so um they're quite like small and in

00:33:36,720 --> 00:33:40,159
terms of functionality

00:33:38,399 --> 00:33:41,440
and ultimately i think it kind of is

00:33:40,159 --> 00:33:42,880
linked to bundle size because the less

00:33:41,440 --> 00:33:43,679
it does the smaller the bundle size is

00:33:42,880 --> 00:33:47,279
going to be

00:33:43,679 --> 00:33:50,399
um but i think it should also be

00:33:47,279 --> 00:33:52,240
a sensible grouping of features right so

00:33:50,399 --> 00:33:54,880
you shouldn't just bung together like

00:33:52,240 --> 00:33:56,240
several different panels or several

00:33:54,880 --> 00:33:56,720
different kind of lists of information

00:33:56,240 --> 00:33:59,279
in one

00:33:56,720 --> 00:33:59,840
web look if they're completely different

00:33:59,279 --> 00:34:00,880
um

00:33:59,840 --> 00:34:02,799
because it kind of increases the

00:34:00,880 --> 00:34:04,559
likelihood that more than one team is

00:34:02,799 --> 00:34:06,799
going to have to work on that

00:34:04,559 --> 00:34:08,639
okay and sticking with angus again can

00:34:06,799 --> 00:34:11,760
you nest these weblets

00:34:08,639 --> 00:34:13,359
nope uh it's like that you're forbidden

00:34:11,760 --> 00:34:15,119
it's just forbidden to import from

00:34:13,359 --> 00:34:16,399
another weblit so that we can keep it

00:34:15,119 --> 00:34:18,000
super separate

00:34:16,399 --> 00:34:20,240
um and make sure that they can be

00:34:18,000 --> 00:34:22,240
deployed on their own yeah

00:34:20,240 --> 00:34:25,839
was there any other considerations to

00:34:22,240 --> 00:34:28,960
that rule apart from the deployability

00:34:25,839 --> 00:34:32,399
um i think uh

00:34:28,960 --> 00:34:33,760
it just kind of i mean it could

00:34:32,399 --> 00:34:35,440
cause a little bit of problem if things

00:34:33,760 --> 00:34:36,560
are imported in a different order

00:34:35,440 --> 00:34:38,159
you can't guarantee the order that

00:34:36,560 --> 00:34:39,599
things are going to be imported in so

00:34:38,159 --> 00:34:40,960
you could get a rather nasty runtime

00:34:39,599 --> 00:34:43,520
error if something's looking for another

00:34:40,960 --> 00:34:47,040
thing that hasn't been imported yet

00:34:43,520 --> 00:34:48,240
okay interesting so next question this

00:34:47,040 --> 00:34:49,440
one is anonymous

00:34:48,240 --> 00:34:51,359
do you have to be careful with

00:34:49,440 --> 00:34:53,280
performance when dealing with complex

00:34:51,359 --> 00:34:54,879
pages that would end up making lots of

00:34:53,280 --> 00:34:57,359
requests for components

00:34:54,879 --> 00:34:58,079
and if so how do you deal with it

00:34:57,359 --> 00:35:01,599
totally

00:34:58,079 --> 00:35:03,359
um so uh all of the thing with their

00:35:01,599 --> 00:35:05,200
bazelops is a single-page application

00:35:03,359 --> 00:35:07,119
and it's all client-side so everything

00:35:05,200 --> 00:35:10,000
is loaded on your first load

00:35:07,119 --> 00:35:11,920
of the application and then um yeah then

00:35:10,000 --> 00:35:14,480
we make a lot of

00:35:11,920 --> 00:35:16,000
api calls we do have a rather large

00:35:14,480 --> 00:35:17,520
shared state in the application

00:35:16,000 --> 00:35:19,680
that holds a lot of the information that

00:35:17,520 --> 00:35:21,280
these tasks need already so usually

00:35:19,680 --> 00:35:23,440
what they'll only end up making maybe

00:35:21,280 --> 00:35:26,400
you want one maybe two api calls

00:35:23,440 --> 00:35:27,119
at the end um and we do use graphql for

00:35:26,400 --> 00:35:30,480
most of those

00:35:27,119 --> 00:35:32,240
so we can kind of keep the

00:35:30,480 --> 00:35:33,599
kind of data being transmitted down to a

00:35:32,240 --> 00:35:36,480
minimum yeah

00:35:33,599 --> 00:35:37,119
um so but you always have to be careful

00:35:36,480 --> 00:35:38,800
performance

00:35:37,119 --> 00:35:41,040
even though we're lucky relatively lucky

00:35:38,800 --> 00:35:42,320
that we can rely on the technology that

00:35:41,040 --> 00:35:44,000
people are using and we know exactly

00:35:42,320 --> 00:35:45,280
what they'll be using

00:35:44,000 --> 00:35:47,520
especially at the moment when everyone's

00:35:45,280 --> 00:35:49,280
working from home um it's especially

00:35:47,520 --> 00:35:50,800
important um we don't know what their

00:35:49,280 --> 00:35:52,640
internet's gonna be like

00:35:50,800 --> 00:35:54,240
um so performance is always a

00:35:52,640 --> 00:35:56,160
consideration

00:35:54,240 --> 00:35:58,400
do you think it would have been less or

00:35:56,160 --> 00:36:00,560
more of a consideration if you didn't

00:35:58,400 --> 00:36:02,560
have designated devices from work

00:36:00,560 --> 00:36:03,680
would you have done anything differently

00:36:02,560 --> 00:36:08,160
it's a good question

00:36:03,680 --> 00:36:11,520
um i think uh gosh

00:36:08,160 --> 00:36:12,960
i i really don't know how to answer that

00:36:11,520 --> 00:36:16,880
one that's a really good question

00:36:12,960 --> 00:36:18,240
um to be honest um we might have

00:36:16,880 --> 00:36:20,720
considered

00:36:18,240 --> 00:36:22,000
some of the other like more maybe server

00:36:20,720 --> 00:36:23,599
based options

00:36:22,000 --> 00:36:24,960
in a different way rather than just

00:36:23,599 --> 00:36:26,079
dismissing them outright saying no we

00:36:24,960 --> 00:36:28,240
can't do that

00:36:26,079 --> 00:36:29,359
um we might have spent a little longer

00:36:28,240 --> 00:36:31,839
um looking at that

00:36:29,359 --> 00:36:33,520
but ultimately i feel like we would have

00:36:31,839 --> 00:36:35,839
ended up in the same place

00:36:33,520 --> 00:36:36,800
um maybe we would have waited a little

00:36:35,839 --> 00:36:39,040
longer to see if

00:36:36,800 --> 00:36:40,079
um where pat five was gonna come out

00:36:39,040 --> 00:36:43,359
time soon

00:36:40,079 --> 00:36:45,280
um but um otherwise um i

00:36:43,359 --> 00:36:47,119
i reckon we would have come to a similar

00:36:45,280 --> 00:36:49,280
conclusion to be honest

00:36:47,119 --> 00:36:51,119
it sounds like the perfect excuse to

00:36:49,280 --> 00:36:52,320
play around with micro front ends if

00:36:51,119 --> 00:36:52,880
it's not something that had been done

00:36:52,320 --> 00:36:55,839
before

00:36:52,880 --> 00:36:56,880
within the team um so now we're talking

00:36:55,839 --> 00:36:59,599
about where the

00:36:56,880 --> 00:37:01,040
weblits live do they all live in one

00:36:59,599 --> 00:37:02,960
mono repository

00:37:01,040 --> 00:37:04,480
they do we love our moderators at mosaic

00:37:02,960 --> 00:37:07,599
so all of our front-end code

00:37:04,480 --> 00:37:10,000
including uh bizops and like basically

00:37:07,599 --> 00:37:12,320
everything else is in one repository

00:37:10,000 --> 00:37:13,040
um which is great for local development

00:37:12,320 --> 00:37:14,880
so

00:37:13,040 --> 00:37:17,119
we don't actually import their weblets

00:37:14,880 --> 00:37:18,800
from s3 during local development we

00:37:17,119 --> 00:37:21,040
import them from the repo

00:37:18,800 --> 00:37:23,040
so the local repository and what that

00:37:21,040 --> 00:37:25,200
gives us is the ability to work on web

00:37:23,040 --> 00:37:27,119
blocks without constantly deploying them

00:37:25,200 --> 00:37:29,200
and also make changes to the core app at

00:37:27,119 --> 00:37:32,320
the same time if we need to

00:37:29,200 --> 00:37:35,280
okay um so

00:37:32,320 --> 00:37:36,160
when when you think about this project

00:37:35,280 --> 00:37:38,000
in hindsight

00:37:36,160 --> 00:37:39,440
are there any parts of it that you think

00:37:38,000 --> 00:37:42,560
might have been better

00:37:39,440 --> 00:37:45,520
as a monolith as opposed to breaking it

00:37:42,560 --> 00:37:48,880
up into micro front ends

00:37:45,520 --> 00:37:52,320
honestly having seen the effects

00:37:48,880 --> 00:37:52,880
of introducing my blitz so the speed at

00:37:52,320 --> 00:37:55,280
which now

00:37:52,880 --> 00:37:56,560
people can work on their tasks compared

00:37:55,280 --> 00:37:58,640
to what it was before

00:37:56,560 --> 00:37:59,839
i'd say no like we should have done it

00:37:58,640 --> 00:38:03,440
sooner

00:37:59,839 --> 00:38:05,200
um it's been fantastic i think

00:38:03,440 --> 00:38:06,880
we've had a few teething problems kind

00:38:05,200 --> 00:38:10,240
of people not really

00:38:06,880 --> 00:38:11,599
um i guess

00:38:10,240 --> 00:38:13,359
knowing how to do it which i think is

00:38:11,599 --> 00:38:15,280
more of a kind of documentation issue

00:38:13,359 --> 00:38:18,640
than anything else so we fixed that

00:38:15,280 --> 00:38:21,119
um and like people were

00:38:18,640 --> 00:38:21,680
visibly amazed that that they could just

00:38:21,119 --> 00:38:25,440
ship it

00:38:21,680 --> 00:38:27,520
and it was gone and it was done um so

00:38:25,440 --> 00:38:29,520
it really has sped people up quite a lot

00:38:27,520 --> 00:38:33,680
um and i think that

00:38:29,520 --> 00:38:35,760
it's kind of testament to um

00:38:33,680 --> 00:38:37,200
the slightly weird approach that we that

00:38:35,760 --> 00:38:38,480
we did that we adopted in the end but

00:38:37,200 --> 00:38:40,640
it's worked really well

00:38:38,480 --> 00:38:42,720
because it means that ultimately the

00:38:40,640 --> 00:38:45,119
kind of developer experience

00:38:42,720 --> 00:38:46,160
is much the same as it was it's just

00:38:45,119 --> 00:38:48,880
you're

00:38:46,160 --> 00:38:50,960
able to deploy it very quickly yeah it

00:38:48,880 --> 00:38:52,720
sounds like the deployment was the main

00:38:50,960 --> 00:38:54,560
reason behind doing all this kind of

00:38:52,720 --> 00:38:55,920
stuff

00:38:54,560 --> 00:38:57,920
speaking of that deployment you

00:38:55,920 --> 00:38:59,920
mentioned that you introduced a

00:38:57,920 --> 00:39:01,599
new deployment pipeline and you

00:38:59,920 --> 00:39:03,920
introduced some new things into the mix

00:39:01,599 --> 00:39:05,520
was there any internal resistance to

00:39:03,920 --> 00:39:06,880
introducing that did people try and

00:39:05,520 --> 00:39:08,880
convince you to stick with what's

00:39:06,880 --> 00:39:10,640
already standard within monzo

00:39:08,880 --> 00:39:12,160
uh so it's actually an adaptation to the

00:39:10,640 --> 00:39:15,359
existing deployment

00:39:12,160 --> 00:39:17,119
um so no uh the good thing about being a

00:39:15,359 --> 00:39:19,119
small collection of web developers

00:39:17,119 --> 00:39:20,560
in a large community of mostly

00:39:19,119 --> 00:39:22,960
background engineers is that

00:39:20,560 --> 00:39:24,560
um i i sometimes feel like weber scene

00:39:22,960 --> 00:39:28,320
is slightly mystical

00:39:24,560 --> 00:39:31,440
um and so if we understand web then

00:39:28,320 --> 00:39:34,480
we are trusted to know what we are doing

00:39:31,440 --> 00:39:36,160
um and um my colleague who kind of

00:39:34,480 --> 00:39:39,280
designed the deployment process

00:39:36,160 --> 00:39:42,480
is an absolute genius so no one's ever

00:39:39,280 --> 00:39:44,400
gonna question them

00:39:42,480 --> 00:39:45,760
props to them though that's a higher

00:39:44,400 --> 00:39:47,920
claim

00:39:45,760 --> 00:39:49,280
so i've got one last question before we

00:39:47,920 --> 00:39:50,880
have to wrap this up and this is a

00:39:49,280 --> 00:39:52,720
personal one for me that i'm hoping to

00:39:50,880 --> 00:39:56,160
be able to steal from monzo

00:39:52,720 --> 00:39:58,720
monzo is feigned for its documentation

00:39:56,160 --> 00:39:59,359
and clarity of its communication um i

00:39:58,720 --> 00:40:02,320
wondered

00:39:59,359 --> 00:40:02,960
what system you use internally for

00:40:02,320 --> 00:40:04,560
managing

00:40:02,960 --> 00:40:06,240
your documentation is it something

00:40:04,560 --> 00:40:07,359
that's been built specifically or is it

00:40:06,240 --> 00:40:09,599
an off-the-shelf

00:40:07,359 --> 00:40:11,440
package i'm interested to hear that

00:40:09,599 --> 00:40:14,000
actually i've never heard that before

00:40:11,440 --> 00:40:15,520
um we do have some great documentation

00:40:14,000 --> 00:40:16,640
um and i'm really passionate about

00:40:15,520 --> 00:40:19,680
documentation

00:40:16,640 --> 00:40:21,680
um so that's awesome to hear

00:40:19,680 --> 00:40:22,960
so we have a combination of things for

00:40:21,680 --> 00:40:26,079
most of our documentation

00:40:22,960 --> 00:40:28,720
it lives in notion um so

00:40:26,079 --> 00:40:29,520
that's great for um kind of

00:40:28,720 --> 00:40:32,319
collaborative

00:40:29,520 --> 00:40:33,040
you know living documentation um but we

00:40:32,319 --> 00:40:36,319
also have

00:40:33,040 --> 00:40:38,560
some stuff in readme um as well

00:40:36,319 --> 00:40:40,319
in the repositories i think we haven't

00:40:38,560 --> 00:40:41,760
really solved documentation you know

00:40:40,319 --> 00:40:43,760
it's a kind it's a problem everywhere

00:40:41,760 --> 00:40:44,960
i've ever worked it's

00:40:43,760 --> 00:40:47,359
something that can be really hard to

00:40:44,960 --> 00:40:48,960
keep up to date and um

00:40:47,359 --> 00:40:52,400
it could be hard to find as well if it's

00:40:48,960 --> 00:40:53,920
not in the right place so for example uh

00:40:52,400 --> 00:40:56,000
um component libraries will have

00:40:53,920 --> 00:40:58,800
something like storybook um

00:40:56,000 --> 00:40:59,680
and then um i think uh we're kind of

00:40:58,800 --> 00:41:01,200
looking at other

00:40:59,680 --> 00:41:03,200
ways to maybe keep documentation

00:41:01,200 --> 00:41:04,480
alongside code i really want to look

00:41:03,200 --> 00:41:06,160
into something like swagger for

00:41:04,480 --> 00:41:08,800
documenting our apis

00:41:06,160 --> 00:41:10,319
um so there's no kind of one solution

00:41:08,800 --> 00:41:11,119
for documentation that we've really

00:41:10,319 --> 00:41:12,960
found

00:41:11,119 --> 00:41:14,960
um but the majority of stuff will be in

00:41:12,960 --> 00:41:16,160
notion that we use it as a kind of giant

00:41:14,960 --> 00:41:18,079
knowledge base

00:41:16,160 --> 00:41:20,079
yeah maybe that could be another blog

00:41:18,079 --> 00:41:21,920
post for the uh monzo blog yes

00:41:20,079 --> 00:41:23,920
well actually i do have another talk

00:41:21,920 --> 00:41:24,560
about uh documentation and mentoring

00:41:23,920 --> 00:41:26,560
that

00:41:24,560 --> 00:41:27,760
um was my other option for this

00:41:26,560 --> 00:41:29,520
conference so

00:41:27,760 --> 00:41:32,079
maybe you'll be able to see that another

00:41:29,520 --> 00:41:33,520
time fingers crossed

00:41:32,079 --> 00:41:35,520
and on that note we're going to have to

00:41:33,520 --> 00:41:36,160
draw this to a close unfortunately we

00:41:35,520 --> 00:41:37,920
could

00:41:36,160 --> 00:41:39,280
sit here and chat for hours about them

00:41:37,920 --> 00:41:41,119
also uh

00:41:39,280 --> 00:41:42,319
micro front ends but sophie thank you

00:41:41,119 --> 00:41:44,000
very much for delivering that talk and

00:41:42,319 --> 00:41:44,960
taking the time out to record it and

00:41:44,000 --> 00:41:46,560
this q a

00:41:44,960 --> 00:41:48,079
um are you hanging around for a little

00:41:46,560 --> 00:41:48,560
bit longer yeah i'll be around for

00:41:48,079 --> 00:41:50,720
dinner

00:41:48,560 --> 00:41:53,040
yeah so if anybody wants to chat with

00:41:50,720 --> 00:41:54,960
sophie some more find her on the tables

00:41:53,040 --> 00:41:56,640
and uh start a conversation all right

00:41:54,960 --> 00:42:03,839
thank you thank you very much sophie

00:41:56,640 --> 00:42:03,839
thanks bye

00:42:07,520 --> 00:42:09,599

YouTube URL: https://www.youtube.com/watch?v=WMCvyjehH_g


