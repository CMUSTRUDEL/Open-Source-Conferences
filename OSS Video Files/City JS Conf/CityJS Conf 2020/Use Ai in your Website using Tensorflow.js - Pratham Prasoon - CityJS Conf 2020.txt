Title: Use Ai in your Website using Tensorflow.js - Pratham Prasoon - CityJS Conf 2020
Publication date: 2020-10-03
Playlist: CityJS Conf 2020
Description: 
	Use Ai in your Website using Tensorflow.js

I will present how to make a digit recognizer using the MNIST dataset, all running inside a browser, I won't code it on the spot as it will waste time, rather slides will be shown with explanation along with the working app in the end, all under 10 minutes.

Bio
I'm a 16 year old trying to learn Python and JavaScript, my aim is to someday create a business which empowers millions around the world. 

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:18,060 --> 00:00:23,680
[Music]

00:00:22,400 --> 00:00:26,400
uh hello everyone

00:00:23,680 --> 00:00:29,519
i hope all of you are doing fine uh i

00:00:26,400 --> 00:00:32,000
feel honored to be here at ctjs conf

00:00:29,519 --> 00:00:33,440
and it is so incredible to be speaking

00:00:32,000 --> 00:00:36,640
to all of you through this

00:00:33,440 --> 00:00:38,559
wonderful platform um so

00:00:36,640 --> 00:00:40,840
welcome to my presentation on

00:00:38,559 --> 00:00:42,399
implementing ai in your site using

00:00:40,840 --> 00:00:44,719
tensorflow.js

00:00:42,399 --> 00:00:46,480
js um but before that a quick

00:00:44,719 --> 00:00:49,760
introduction about myself

00:00:46,480 --> 00:00:50,800
so hi my name is pratham prasoon i'm a

00:00:49,760 --> 00:00:54,160
16 year old

00:00:50,800 --> 00:00:57,039
uh high school sophomore student and um

00:00:54,160 --> 00:00:59,760
i am into python javascript and flutter

00:00:57,039 --> 00:01:02,879
with specific interest in data science

00:00:59,760 --> 00:01:03,520
machine learning and app design you can

00:01:02,879 --> 00:01:06,640
find me

00:01:03,520 --> 00:01:09,600
on twitter at pratham presume let's

00:01:06,640 --> 00:01:12,880
connect over there as well

00:01:09,600 --> 00:01:15,680
so before we

00:01:12,880 --> 00:01:17,439
get uh into the presentation further i

00:01:15,680 --> 00:01:19,520
would like to inform you that

00:01:17,439 --> 00:01:20,479
ai and machine learning are slightly

00:01:19,520 --> 00:01:22,400
different terms

00:01:20,479 --> 00:01:24,479
but for the purposes of this conference

00:01:22,400 --> 00:01:27,040
i'll use them interchangeably

00:01:24,479 --> 00:01:29,360
just know that ai is generally a wider

00:01:27,040 --> 00:01:32,200
term than machine learning

00:01:29,360 --> 00:01:33,600
moving on why should you know about uh

00:01:32,200 --> 00:01:36,400
tensorflow.js

00:01:33,600 --> 00:01:38,479
so when tensorflow was first released

00:01:36,400 --> 00:01:41,920
for python in 2015

00:01:38,479 --> 00:01:45,119
um it had a lot of limitations and

00:01:41,920 --> 00:01:48,320
it was not really accessible um

00:01:45,119 --> 00:01:50,479
to many of the developers out there and

00:01:48,320 --> 00:01:54,399
it required very specific kind of

00:01:50,479 --> 00:01:57,399
um hardware to be able to uh use the

00:01:54,399 --> 00:01:59,280
use tensorflow properly but

00:01:57,399 --> 00:02:02,000
tensorflow.js changed that

00:01:59,280 --> 00:02:03,920
when it was announced in 2017. so it was

00:02:02,000 --> 00:02:06,240
made keeping in mind that um

00:02:03,920 --> 00:02:07,439
it has to be friendly for web developers

00:02:06,240 --> 00:02:10,479
uh and since it's

00:02:07,439 --> 00:02:11,840
made um you can use javascript that

00:02:10,479 --> 00:02:12,959
means that you don't need to learn

00:02:11,840 --> 00:02:16,480
another language to

00:02:12,959 --> 00:02:19,920
get into this uh exciting field of ai

00:02:16,480 --> 00:02:21,599
and um you could learn tensorflow.js

00:02:19,920 --> 00:02:23,440
maybe for a career switch

00:02:21,599 --> 00:02:24,640
or you or maybe you just want to learn

00:02:23,440 --> 00:02:26,959
something cool

00:02:24,640 --> 00:02:28,239
um and it is always good to have extra

00:02:26,959 --> 00:02:31,920
skills right

00:02:28,239 --> 00:02:35,599
so um in 2015 we just had tensorflow and

00:02:31,920 --> 00:02:39,519
then we got tensorflow.js

00:02:35,599 --> 00:02:42,080
the benefits of tensorflow.js um

00:02:39,519 --> 00:02:43,599
are that one you can build privacy

00:02:42,080 --> 00:02:45,840
friendly applications

00:02:43,599 --> 00:02:46,959
so typically when you're training ai

00:02:45,840 --> 00:02:49,040
models you do not

00:02:46,959 --> 00:02:50,879
you have to take the data back from the

00:02:49,040 --> 00:02:52,000
client and then process it and then give

00:02:50,879 --> 00:02:54,640
it back to the client

00:02:52,000 --> 00:02:55,680
but tensorflow.js totally changes this

00:02:54,640 --> 00:02:58,400
you do not need

00:02:55,680 --> 00:03:00,159
a need to get the data to you and then

00:02:58,400 --> 00:03:02,640
give it back to the user

00:03:00,159 --> 00:03:04,159
instead you could simply process the

00:03:02,640 --> 00:03:07,200
data inside the browser

00:03:04,159 --> 00:03:09,920
without any fancy gpus uh or

00:03:07,200 --> 00:03:11,440
that sort of thing and it can work on

00:03:09,920 --> 00:03:14,640
basically any device with

00:03:11,440 --> 00:03:17,120
a network connection and um

00:03:14,640 --> 00:03:18,720
a browser on it uh you could moreover

00:03:17,120 --> 00:03:21,120
you could all if you don't want to train

00:03:18,720 --> 00:03:23,440
your own ai models you could simply use

00:03:21,120 --> 00:03:25,360
pre-trained models from the internet and

00:03:23,440 --> 00:03:27,360
then implement them in your site

00:03:25,360 --> 00:03:28,799
so it really makes the process of

00:03:27,360 --> 00:03:32,640
implementing ai

00:03:28,799 --> 00:03:35,760
a piece of cake honestly um now

00:03:32,640 --> 00:03:36,959
on before we go on to the code and the

00:03:35,760 --> 00:03:40,000
technical stuff let's

00:03:36,959 --> 00:03:40,720
understand what ai is in practical terms

00:03:40,000 --> 00:03:44,000
so

00:03:40,720 --> 00:03:45,440
ei in most cases is giving loads of data

00:03:44,000 --> 00:03:48,560
to the computer

00:03:45,440 --> 00:03:49,040
um those could be images voice samples

00:03:48,560 --> 00:03:51,040
um

00:03:49,040 --> 00:03:52,080
it could be text it could be anything

00:03:51,040 --> 00:03:54,480
and then the ai

00:03:52,080 --> 00:03:55,120
learns from that through trial and error

00:03:54,480 --> 00:03:56,560
so uh

00:03:55,120 --> 00:03:59,439
i'll give you an example right now which

00:03:56,560 --> 00:04:01,439
will make um hopefully make

00:03:59,439 --> 00:04:03,760
you'll get a better understanding of ai

00:04:01,439 --> 00:04:04,159
with that so let's say we have jack over

00:04:03,760 --> 00:04:06,959
here

00:04:04,159 --> 00:04:08,400
um he's a kid he doesn't know a lot

00:04:06,959 --> 00:04:10,720
about the world so

00:04:08,400 --> 00:04:12,799
um we try to teach him about dogs and

00:04:10,720 --> 00:04:14,720
cats so what is a dog what does a dog

00:04:12,799 --> 00:04:17,359
look like and what does a cat look like

00:04:14,720 --> 00:04:18,239
so what we do is we take two stacks of

00:04:17,359 --> 00:04:21,199
photos

00:04:18,239 --> 00:04:21,919
one with cats and one with dogs we know

00:04:21,199 --> 00:04:24,240
we have

00:04:21,919 --> 00:04:25,520
sorted them out ourselves and then what

00:04:24,240 --> 00:04:28,400
we do is we give

00:04:25,520 --> 00:04:30,400
the images to jack and we tell him hey

00:04:28,400 --> 00:04:33,440
look this is a cat um

00:04:30,400 --> 00:04:35,120
so remember that this is a cat

00:04:33,440 --> 00:04:36,479
and then we show him photos of her dog

00:04:35,120 --> 00:04:39,199
so maybe he can

00:04:36,479 --> 00:04:40,720
remember what dogs look like so um maybe

00:04:39,199 --> 00:04:42,479
you could see the features like

00:04:40,720 --> 00:04:44,160
cats usually have a longer tail than

00:04:42,479 --> 00:04:46,400
dogs um

00:04:44,160 --> 00:04:48,960
maybe uh i'm just giving an example here

00:04:46,400 --> 00:04:52,160
maybe they have sharper ears maybe they

00:04:48,960 --> 00:04:53,919
have um lighter eyes so these are the

00:04:52,160 --> 00:04:55,759
kind of features which will

00:04:53,919 --> 00:04:57,919
which he will remember in order to

00:04:55,759 --> 00:05:00,479
identify a cat and a dog so

00:04:57,919 --> 00:05:00,960
uh the that process uh like he processed

00:05:00,479 --> 00:05:04,240
that

00:05:00,960 --> 00:05:06,639
information inside his brain so um then

00:05:04,240 --> 00:05:08,320
after he has learned what a cat and a

00:05:06,639 --> 00:05:10,000
dog looks like we scramble all the

00:05:08,320 --> 00:05:12,320
images and then we randomly pick

00:05:10,000 --> 00:05:13,919
images out and then we show it to jack

00:05:12,320 --> 00:05:15,759
and ask him what is this

00:05:13,919 --> 00:05:17,520
so maybe he answers this right he says

00:05:15,759 --> 00:05:19,919
it's a dog maybe

00:05:17,520 --> 00:05:21,759
and then we show him a picture of a cat

00:05:19,919 --> 00:05:23,520
and maybe he answers that right too

00:05:21,759 --> 00:05:24,880
but he could make mistakes along the way

00:05:23,520 --> 00:05:27,440
right um so

00:05:24,880 --> 00:05:28,800
let's say out of uh we gave him 10

00:05:27,440 --> 00:05:30,720
photos to test and

00:05:28,800 --> 00:05:32,400
out of those 10 photos he was able to

00:05:30,720 --> 00:05:35,840
identify it correctly

00:05:32,400 --> 00:05:39,039
so he had 80 accuracy now

00:05:35,840 --> 00:05:40,400
we'll replace jack with ai the same

00:05:39,039 --> 00:05:42,880
process happens here

00:05:40,400 --> 00:05:44,400
we have um pictures of cats on one side

00:05:42,880 --> 00:05:46,960
and dogs on the other side

00:05:44,400 --> 00:05:48,080
and then we scramble it and then we test

00:05:46,960 --> 00:05:50,720
um

00:05:48,080 --> 00:05:51,440
test it out on the ea and then we give

00:05:50,720 --> 00:05:54,960
it uh an

00:05:51,440 --> 00:05:55,520
accuracy score so um both uh i hope this

00:05:54,960 --> 00:05:59,360
kind of

00:05:55,520 --> 00:06:02,400
solidified your understanding about ai

00:05:59,360 --> 00:06:03,680
uh moving ahead so this the process that

00:06:02,400 --> 00:06:06,319
we just saw when

00:06:03,680 --> 00:06:07,600
we already have sorted out data and then

00:06:06,319 --> 00:06:10,639
we give it to the

00:06:07,600 --> 00:06:13,680
ai to learn from it and then we test

00:06:10,639 --> 00:06:14,960
out um how much the ai has learned

00:06:13,680 --> 00:06:17,840
this sort of learning is called

00:06:14,960 --> 00:06:21,039
supervised learning now

00:06:17,840 --> 00:06:23,440
now a similar method to this is called

00:06:21,039 --> 00:06:24,880
unsupervised learning uh wherein you

00:06:23,440 --> 00:06:27,680
basically you do not

00:06:24,880 --> 00:06:28,240
sort the like uh how we uh kept the two

00:06:27,680 --> 00:06:30,479
images

00:06:28,240 --> 00:06:32,840
uh to the images of dogs and cats

00:06:30,479 --> 00:06:34,960
separate we do not have that step we

00:06:32,840 --> 00:06:38,800
basically um

00:06:34,960 --> 00:06:41,520
just give the ea scrambled images

00:06:38,800 --> 00:06:43,759
and then it sorts the images on itself

00:06:41,520 --> 00:06:46,880
it might make mistakes along the way but

00:06:43,759 --> 00:06:48,160
um everybody does make mistakes so and

00:06:46,880 --> 00:06:50,800
eventually it does

00:06:48,160 --> 00:06:51,919
um increase the accuracy by learning

00:06:50,800 --> 00:06:54,319
again and again

00:06:51,919 --> 00:06:56,000
so uh this is a slightly different way

00:06:54,319 --> 00:06:58,479
of learning but

00:06:56,000 --> 00:07:00,000
um the fundamentals remain the same you

00:06:58,479 --> 00:07:02,400
give data and then you give

00:07:00,000 --> 00:07:04,880
then you get an output it predicts some

00:07:02,400 --> 00:07:06,560
sort of output

00:07:04,880 --> 00:07:08,479
and we give it an accuracy score how

00:07:06,560 --> 00:07:09,199
many images did it identify correctly

00:07:08,479 --> 00:07:11,680
and how many

00:07:09,199 --> 00:07:12,720
and it did not and then uh the third

00:07:11,680 --> 00:07:16,160
kind of ai

00:07:12,720 --> 00:07:18,000
um is called reinforcement learning this

00:07:16,160 --> 00:07:21,280
is a very interesting kind of a

00:07:18,000 --> 00:07:23,280
in the sense that this ai exactly

00:07:21,280 --> 00:07:26,240
replicates how humans learn

00:07:23,280 --> 00:07:28,319
so um there is no data whatsoever given

00:07:26,240 --> 00:07:29,120
to the ai the ai collects the data

00:07:28,319 --> 00:07:30,800
itself

00:07:29,120 --> 00:07:32,880
and then it learns from the environment

00:07:30,800 --> 00:07:35,919
so um

00:07:32,880 --> 00:07:36,800
like this is mostly used in games so you

00:07:35,919 --> 00:07:40,000
could have

00:07:36,800 --> 00:07:43,440
let's say an ai for maybe

00:07:40,000 --> 00:07:46,000
driving around um some path so maybe

00:07:43,440 --> 00:07:47,039
it learns through it uh gathers data

00:07:46,000 --> 00:07:49,039
when it moves

00:07:47,039 --> 00:07:50,160
and then um it learns from its

00:07:49,039 --> 00:07:52,240
environment it knows

00:07:50,160 --> 00:07:54,080
and then it realizes what to do and what

00:07:52,240 --> 00:07:55,440
not to do so this is a very interesting

00:07:54,080 --> 00:07:57,360
kind of ai but

00:07:55,440 --> 00:07:58,560
today we will only be focusing on

00:07:57,360 --> 00:08:02,400
supervised learning

00:07:58,560 --> 00:08:04,720
for uh image classification

00:08:02,400 --> 00:08:05,599
so we'll build this handwritten digit

00:08:04,720 --> 00:08:08,240
recognizer

00:08:05,599 --> 00:08:09,479
and you can try it out for yourself at

00:08:08,240 --> 00:08:12,400
this link

00:08:09,479 --> 00:08:14,479
bit.ly slash tfjsdemo

00:08:12,400 --> 00:08:16,560
so basically what you can do is you can

00:08:14,479 --> 00:08:17,680
draw a handwritten digit and then you

00:08:16,560 --> 00:08:20,800
can predict it

00:08:17,680 --> 00:08:22,319
so the ai will predict um what number

00:08:20,800 --> 00:08:26,160
you have drawn over here

00:08:22,319 --> 00:08:28,240
for you now uh we we'll be using uh

00:08:26,160 --> 00:08:29,919
remember how i said that when we were

00:08:28,240 --> 00:08:32,640
training uh when we were

00:08:29,919 --> 00:08:34,080
teaching jack how to uh differentiate

00:08:32,640 --> 00:08:36,959
between dogs and cats here

00:08:34,080 --> 00:08:37,680
also we'll be using a data set so we'll

00:08:36,959 --> 00:08:41,039
have

00:08:37,680 --> 00:08:43,519
70 000 images of handwritten digits and

00:08:41,039 --> 00:08:46,560
this is called the mnist data set

00:08:43,519 --> 00:08:50,080
uh so we'll be using this to train our

00:08:46,560 --> 00:08:51,519
ai model as well as um use it for the

00:08:50,080 --> 00:08:54,560
predictions and testing it

00:08:51,519 --> 00:08:58,800
so we'll get into that as well so um

00:08:54,560 --> 00:09:01,279
these images are 28 by 28 images

00:08:58,800 --> 00:09:02,320
so the resolution is 28 pixels by 28

00:09:01,279 --> 00:09:04,399
pixels

00:09:02,320 --> 00:09:06,320
and then what we'll do is we'll convert

00:09:04,399 --> 00:09:09,120
this into an array

00:09:06,320 --> 00:09:10,959
um a list of numbers my bad so we'll

00:09:09,120 --> 00:09:14,320
convert it into a list of numbers

00:09:10,959 --> 00:09:16,800
depending on what color the pixel is

00:09:14,320 --> 00:09:17,360
so let's say the top left corner of the

00:09:16,800 --> 00:09:20,240
pixel

00:09:17,360 --> 00:09:22,480
is white so we give it 255 and then

00:09:20,240 --> 00:09:25,920
where we get a black pixel we give it

00:09:22,480 --> 00:09:29,839
0 so like we get a huge list

00:09:25,920 --> 00:09:31,839
um of around 764 uh numbers so

00:09:29,839 --> 00:09:34,880
those are the amount of pixels that are

00:09:31,839 --> 00:09:38,560
in these images

00:09:34,880 --> 00:09:40,480
so to train our ai model we will use

00:09:38,560 --> 00:09:42,959
this thing called a neural net

00:09:40,480 --> 00:09:44,240
so basically what a neural net is it

00:09:42,959 --> 00:09:47,519
takes input

00:09:44,240 --> 00:09:48,880
um like from the data so let's say we

00:09:47,519 --> 00:09:51,839
have um

00:09:48,880 --> 00:09:52,640
uh in the input of the uh the color of

00:09:51,839 --> 00:09:55,040
the pixels

00:09:52,640 --> 00:09:56,000
and then we put them here in this uh

00:09:55,040 --> 00:09:59,120
sort of fashion

00:09:56,000 --> 00:10:01,360
so we'll have 764 um

00:09:59,120 --> 00:10:02,800
inputs here and then what will uh the

00:10:01,360 --> 00:10:04,399
computer will it

00:10:02,800 --> 00:10:06,560
will have so this is called the input

00:10:04,399 --> 00:10:10,079
layer and after that we'll also have an

00:10:06,560 --> 00:10:11,920
uh hidden layer um so as you can see

00:10:10,079 --> 00:10:13,360
there are lines which connect the input

00:10:11,920 --> 00:10:15,760
layer to the hidden layer

00:10:13,360 --> 00:10:18,079
so what happens in that process that the

00:10:15,760 --> 00:10:20,560
computer does some calculations to it

00:10:18,079 --> 00:10:21,440
it does some math to it and um it's sort

00:10:20,560 --> 00:10:23,360
of

00:10:21,440 --> 00:10:24,959
considered like a function and then you

00:10:23,360 --> 00:10:27,360
know it gets some

00:10:24,959 --> 00:10:28,399
numerical values and then those values

00:10:27,360 --> 00:10:30,560
correspond to the

00:10:28,399 --> 00:10:32,320
output layer so uh in the input we'll

00:10:30,560 --> 00:10:36,800
have 764

00:10:32,320 --> 00:10:39,839
inputs um so uh vls 164 pixels so

00:10:36,800 --> 00:10:40,640
um we're basically putting that in the

00:10:39,839 --> 00:10:42,320
input layer

00:10:40,640 --> 00:10:43,680
and then in the hidden layer we'll

00:10:42,320 --> 00:10:46,640
basically

00:10:43,680 --> 00:10:48,720
let the ai do the learning and those

00:10:46,640 --> 00:10:52,640
sort of things and then the output layer

00:10:48,720 --> 00:10:53,600
we'll have 10 outputs numbers from 0 to

00:10:52,640 --> 00:10:56,000
9 because

00:10:53,600 --> 00:10:58,240
remember that is the data set we

00:10:56,000 --> 00:11:01,839
actually gave to our ai 0 to 9

00:10:58,240 --> 00:11:01,839
right so those are 10 digits

00:11:01,920 --> 00:11:05,279
so this is a very good uh image in fact

00:11:04,959 --> 00:11:07,360
it

00:11:05,279 --> 00:11:08,399
explains the concept which i just said

00:11:07,360 --> 00:11:11,279
brilliantly

00:11:08,399 --> 00:11:12,320
so um as you can see where we have black

00:11:11,279 --> 00:11:14,880
pixels it's

00:11:12,320 --> 00:11:16,560
zero and where uh there is some color

00:11:14,880 --> 00:11:18,800
it's um

00:11:16,560 --> 00:11:20,079
like some shade of gray then there's a

00:11:18,800 --> 00:11:22,160
number so basically

00:11:20,079 --> 00:11:23,279
you're converting the pixels into this

00:11:22,160 --> 00:11:25,839
long stretch

00:11:23,279 --> 00:11:27,120
um a list you could say and then we're

00:11:25,839 --> 00:11:30,320
put feeding those

00:11:27,120 --> 00:11:31,440
um numbers into the input layer of the

00:11:30,320 --> 00:11:34,000
neural network

00:11:31,440 --> 00:11:35,600
and then the hidden layer um figures out

00:11:34,000 --> 00:11:37,600
things on its own

00:11:35,600 --> 00:11:38,880
um i mean there is some math involved in

00:11:37,600 --> 00:11:42,079
it but for the

00:11:38,880 --> 00:11:43,600
for now we'll not go into it now uh

00:11:42,079 --> 00:11:45,760
let's look at the code because that is

00:11:43,600 --> 00:11:49,360
the interesting part here so

00:11:45,760 --> 00:11:50,670
um let's look at the core

00:11:49,360 --> 00:11:52,880
so i have um

00:11:50,670 --> 00:11:56,000
[Music]

00:11:52,880 --> 00:11:58,480
just close that yeah so this is um

00:11:56,000 --> 00:12:00,480
i've opened vs code over here and if you

00:11:58,480 --> 00:12:01,519
can see this is the file structure over

00:12:00,480 --> 00:12:04,639
here that we have

00:12:01,519 --> 00:12:08,240
so we have one python file we have a

00:12:04,639 --> 00:12:10,480
models folder um and we have a

00:12:08,240 --> 00:12:11,600
js folder i'll explain one by one what

00:12:10,480 --> 00:12:13,760
these mean so

00:12:11,600 --> 00:12:14,639
uh the style is it basically contains

00:12:13,760 --> 00:12:17,399
styling for

00:12:14,639 --> 00:12:19,120
the website nothing special here uh

00:12:17,399 --> 00:12:22,000
index.html we have

00:12:19,120 --> 00:12:22,399
um the mnist.pi which is where we

00:12:22,000 --> 00:12:24,720
actually

00:12:22,399 --> 00:12:25,680
train the model now i have used python

00:12:24,720 --> 00:12:27,920
over here because i

00:12:25,680 --> 00:12:29,519
feel uh like i feel more comfortable

00:12:27,920 --> 00:12:31,920
with python but um

00:12:29,519 --> 00:12:32,560
i definitely encourage you to recreate

00:12:31,920 --> 00:12:35,279
this

00:12:32,560 --> 00:12:37,279
ai training process inside javascript it

00:12:35,279 --> 00:12:40,480
will be really good practice

00:12:37,279 --> 00:12:42,480
so um and then we have the models folder

00:12:40,480 --> 00:12:44,560
where the model is actually stored

00:12:42,480 --> 00:12:48,000
and then we have the js folder where we

00:12:44,560 --> 00:12:51,200
have chart.js which is basically

00:12:48,000 --> 00:12:53,600
a library for charting

00:12:51,200 --> 00:12:55,320
uh the prediction uh i'll let you know

00:12:53,600 --> 00:12:56,720
what that is and then we have digit

00:12:55,320 --> 00:13:00,480
recognition

00:12:56,720 --> 00:13:03,440
uh which basically is um a js file for

00:13:00,480 --> 00:13:04,000
knowing how to draw uh for drawing the

00:13:03,440 --> 00:13:07,120
shapes

00:13:04,000 --> 00:13:09,600
uh to give us input so um but the main

00:13:07,120 --> 00:13:11,200
full uh file that you have to take uh

00:13:09,600 --> 00:13:13,519
look at is this folder

00:13:11,200 --> 00:13:14,880
so um if if you know javascript pretty

00:13:13,519 --> 00:13:15,440
well this is not going to be very

00:13:14,880 --> 00:13:18,320
difficult

00:13:15,440 --> 00:13:18,800
python is um it's a pretty easy language

00:13:18,320 --> 00:13:22,000
to get

00:13:18,800 --> 00:13:24,880
on with but yeah um

00:13:22,000 --> 00:13:27,560
so first thing we do is we import the

00:13:24,880 --> 00:13:30,560
the libraries so we have tensorflow

00:13:27,560 --> 00:13:33,279
tensorflow.js we have keras keras is

00:13:30,560 --> 00:13:34,000
a library that um goes in conjunction

00:13:33,279 --> 00:13:36,160
with uh

00:13:34,000 --> 00:13:37,040
tensorflow so you don't need to worry

00:13:36,160 --> 00:13:40,240
about that

00:13:37,040 --> 00:13:40,880
and then here we load the data so the

00:13:40,240 --> 00:13:43,279
mnist

00:13:40,880 --> 00:13:44,959
data set which has all the numbers the

00:13:43,279 --> 00:13:45,839
handwritten numbers is already

00:13:44,959 --> 00:13:48,639
pre-loaded

00:13:45,839 --> 00:13:50,639
into the keras library so we will load

00:13:48,639 --> 00:13:53,519
that and then what we'll do is

00:13:50,639 --> 00:13:54,160
we will separate the training images uh

00:13:53,519 --> 00:13:56,560
wherein

00:13:54,160 --> 00:13:58,079
remember the process where we showed

00:13:56,560 --> 00:14:01,519
jack the pictures

00:13:58,079 --> 00:14:02,160
um and uh so so at the start so that he

00:14:01,519 --> 00:14:04,720
could learn

00:14:02,160 --> 00:14:05,680
so those are the training images and the

00:14:04,720 --> 00:14:08,639
training labels

00:14:05,680 --> 00:14:10,480
labels mean uh is like um let's say you

00:14:08,639 --> 00:14:12,160
have a picture of one so

00:14:10,480 --> 00:14:14,079
the label should be one as in the name

00:14:12,160 --> 00:14:16,720
of the file should be one right

00:14:14,079 --> 00:14:17,519
um so and then we'll have the test

00:14:16,720 --> 00:14:19,680
images

00:14:17,519 --> 00:14:21,199
uh wherein we actually test how good the

00:14:19,680 --> 00:14:24,240
ai is doing

00:14:21,199 --> 00:14:27,040
so we load that data over here and then

00:14:24,240 --> 00:14:27,600
um we group the data so we have 70 000

00:14:27,040 --> 00:14:30,480
images

00:14:27,600 --> 00:14:32,320
out of those uh we're putting 60 000 of

00:14:30,480 --> 00:14:37,040
those for training the data

00:14:32,320 --> 00:14:40,639
and then 10 000 for testing the ai

00:14:37,040 --> 00:14:41,440
so and then we normalize the images so

00:14:40,639 --> 00:14:44,320
basically

00:14:41,440 --> 00:14:44,800
our neural nets perform much better when

00:14:44,320 --> 00:14:47,360
the

00:14:44,800 --> 00:14:50,240
values are between from 0 to 1 instead

00:14:47,360 --> 00:14:53,120
of it being from 0 to 255

00:14:50,240 --> 00:14:53,839
so dividing all the values by 255

00:14:53,120 --> 00:14:57,199
basically

00:14:53,839 --> 00:14:58,639
um it allows for better training of the

00:14:57,199 --> 00:15:01,920
ai

00:14:58,639 --> 00:15:05,120
um continuing on this is the main part

00:15:01,920 --> 00:15:06,880
this is the thing that actually um

00:15:05,120 --> 00:15:09,279
this is the thing that runs the entire

00:15:06,880 --> 00:15:11,680
thing the entire ai itself

00:15:09,279 --> 00:15:13,199
so we are using a model here this is a

00:15:11,680 --> 00:15:15,839
machine learning model

00:15:13,199 --> 00:15:17,279
so we have um this is the first layer

00:15:15,839 --> 00:15:19,360
this is the input layer

00:15:17,279 --> 00:15:21,600
these three are combined to be the input

00:15:19,360 --> 00:15:23,600
layer as i mentioned before

00:15:21,600 --> 00:15:24,639
and this is the hidden layer and this is

00:15:23,600 --> 00:15:26,800
the output layer

00:15:24,639 --> 00:15:28,160
so i'll explain one by one what these

00:15:26,800 --> 00:15:31,279
what this means so

00:15:28,160 --> 00:15:33,920
this um these three layers basically

00:15:31,279 --> 00:15:36,000
do this thing called a convolution which

00:15:33,920 --> 00:15:39,519
basically means that it sort of

00:15:36,000 --> 00:15:40,399
sharpens the images so that you can

00:15:39,519 --> 00:15:43,680
basically

00:15:40,399 --> 00:15:45,519
um you you can basically have a sharper

00:15:43,680 --> 00:15:47,199
image and the computer can better look

00:15:45,519 --> 00:15:48,880
at the details in the image

00:15:47,199 --> 00:15:50,480
um and then we have the dense layer

00:15:48,880 --> 00:15:53,279
which is the hidden layer

00:15:50,480 --> 00:15:54,880
um where the computer figures out things

00:15:53,279 --> 00:15:55,360
on its own and then we have the output

00:15:54,880 --> 00:15:57,759
layer

00:15:55,360 --> 00:15:59,120
notice we have 10 as the output um

00:15:57,759 --> 00:16:01,759
because we will have

00:15:59,120 --> 00:16:02,160
predictions from zero to nine right and

00:16:01,759 --> 00:16:05,199
um

00:16:02,160 --> 00:16:07,199
in the input we have 28 by 28 uh so the

00:16:05,199 --> 00:16:09,759
resolution is 28 by 28

00:16:07,199 --> 00:16:10,480
and a depth of one meaning it's one

00:16:09,759 --> 00:16:13,920
dimensional

00:16:10,480 --> 00:16:16,560
um nothing to worry about there but um

00:16:13,920 --> 00:16:17,600
yeah and then what we do is we compile

00:16:16,560 --> 00:16:20,480
the model

00:16:17,600 --> 00:16:20,880
using uh these metrics over here we will

00:16:20,480 --> 00:16:23,839
not

00:16:20,880 --> 00:16:25,519
um go into detail on these but uh feel

00:16:23,839 --> 00:16:28,079
free to explore for yourself

00:16:25,519 --> 00:16:29,600
and then we uh so this is where we

00:16:28,079 --> 00:16:31,600
actually train the model as

00:16:29,600 --> 00:16:32,880
in we tell the model what is the z what

00:16:31,600 --> 00:16:33,839
does the zero look like what does the

00:16:32,880 --> 00:16:37,040
one look like

00:16:33,839 --> 00:16:40,320
and then we test the data or test the ai

00:16:37,040 --> 00:16:41,279
so and then um we basically do this

00:16:40,320 --> 00:16:44,800
process

00:16:41,279 --> 00:16:47,040
and then um we get

00:16:44,800 --> 00:16:48,240
an ai model that can predict stuff now

00:16:47,040 --> 00:16:50,959
we will save this

00:16:48,240 --> 00:16:52,000
into uh this model into the models

00:16:50,959 --> 00:16:54,240
folder

00:16:52,000 --> 00:16:55,199
and then it gets stored over here simple

00:16:54,240 --> 00:16:56,950
as that

00:16:55,199 --> 00:16:58,320
and then we have um

00:16:56,950 --> 00:17:02,399
[Music]

00:16:58,320 --> 00:17:05,039
then we basically have uh the js library

00:17:02,399 --> 00:17:07,039
for charting and then we have the digit

00:17:05,039 --> 00:17:09,679
recognizer nothing special here

00:17:07,039 --> 00:17:10,480
maybe the index html and css also

00:17:09,679 --> 00:17:12,880
nothing special

00:17:10,480 --> 00:17:14,959
really special over there now uh let's

00:17:12,880 --> 00:17:16,799
uh go on to the set so this is what the

00:17:14,959 --> 00:17:19,360
end result looks like

00:17:16,799 --> 00:17:21,039
uh so what you can do is you can draw a

00:17:19,360 --> 00:17:22,240
numbers over here and you can click on

00:17:21,039 --> 00:17:26,880
predict

00:17:22,240 --> 00:17:28,319
and see it so it has it is 99 confident

00:17:26,880 --> 00:17:30,720
that this is a 2

00:17:28,319 --> 00:17:31,840
so that's pretty good we could draw

00:17:30,720 --> 00:17:34,240
other shapes to

00:17:31,840 --> 00:17:35,679
numbers to this is the one right it does

00:17:34,240 --> 00:17:38,320
that pretty well

00:17:35,679 --> 00:17:39,039
um it does feel sometimes like see over

00:17:38,320 --> 00:17:41,840
here

00:17:39,039 --> 00:17:43,600
um so uh you know you could improve the

00:17:41,840 --> 00:17:45,360
model in fact i would encourage you to

00:17:43,600 --> 00:17:46,160
do that sometimes it does do mistakes

00:17:45,360 --> 00:17:48,720
but

00:17:46,160 --> 00:17:49,360
it's generally pretty accurate so that's

00:17:48,720 --> 00:17:52,240
a nine

00:17:49,360 --> 00:17:52,640
so maybe we drew it a little bit higher

00:17:52,240 --> 00:17:56,559
but

00:17:52,640 --> 00:17:59,120
yeah you can definitely um this is

00:17:56,559 --> 00:18:00,559
you can definitely improve the model but

00:17:59,120 --> 00:18:04,160
this is just to show that

00:18:00,559 --> 00:18:05,600
you can um basically run uh ai in your

00:18:04,160 --> 00:18:07,919
in your browser which is pretty

00:18:05,600 --> 00:18:09,840
incredible and uh keep in mind that none

00:18:07,919 --> 00:18:11,120
of the data is actually leaving the

00:18:09,840 --> 00:18:14,799
browser itself

00:18:11,120 --> 00:18:16,720
um it is all contained into this um

00:18:14,799 --> 00:18:19,039
into the browser itself in fact if you

00:18:16,720 --> 00:18:22,960
want to try a live demo for this

00:18:19,039 --> 00:18:26,000
uh you can go to tftf

00:18:22,960 --> 00:18:28,480
js pfgs mist

00:18:26,000 --> 00:18:30,240
dot virtual app and there i have

00:18:28,480 --> 00:18:31,919
deployed the application of ourselves so

00:18:30,240 --> 00:18:33,600
there you can see a live

00:18:31,919 --> 00:18:36,160
version of this as well and you can try

00:18:33,600 --> 00:18:38,160
this on your phone or try it anywhere um

00:18:36,160 --> 00:18:40,400
it will run inside the browser perfectly

00:18:38,160 --> 00:18:40,400
fine

00:18:41,679 --> 00:18:45,600
now um now that we're coming towards the

00:18:44,640 --> 00:18:48,320
end of the

00:18:45,600 --> 00:18:49,919
presentation let us look at um some

00:18:48,320 --> 00:18:50,720
further resources to you know get

00:18:49,919 --> 00:18:54,480
started with

00:18:50,720 --> 00:18:57,120
um yeah so these are the three courses

00:18:54,480 --> 00:18:58,400
on um which i would recommend so one is

00:18:57,120 --> 00:19:01,679
from kaggle

00:18:58,400 --> 00:19:03,520
kaggle is a very uh well-known

00:19:01,679 --> 00:19:05,679
it's the basically the hub of data

00:19:03,520 --> 00:19:07,039
science and there are lots of challenges

00:19:05,679 --> 00:19:09,520
you could do it's um it's a pretty

00:19:07,039 --> 00:19:13,120
incredible place and then

00:19:09,520 --> 00:19:15,200
you can use the uh the google

00:19:13,120 --> 00:19:16,880
the the video series by google on

00:19:15,200 --> 00:19:18,559
machine learning foundations which is

00:19:16,880 --> 00:19:19,600
also a pretty incredible a very

00:19:18,559 --> 00:19:22,000
incredible course

00:19:19,600 --> 00:19:24,480
and then we also have the famous machine

00:19:22,000 --> 00:19:27,520
learning courses by andrew eng

00:19:24,480 --> 00:19:28,720
um so i really hope you got something

00:19:27,520 --> 00:19:31,760
useful out of this

00:19:28,720 --> 00:19:32,960
uh talk uh this presentation and um i

00:19:31,760 --> 00:19:35,600
really hope you enjoy

00:19:32,960 --> 00:19:36,960
tensorflow.js or do tinker around play

00:19:35,600 --> 00:19:38,720
with stuff

00:19:36,960 --> 00:19:40,240
make incredible things the sky is the

00:19:38,720 --> 00:19:42,720
limit here so

00:19:40,240 --> 00:19:44,720
um yeah i really hope i could provide

00:19:42,720 --> 00:19:47,600
some value here today

00:19:44,720 --> 00:19:48,080
and uh thank you so much for attending

00:19:47,600 --> 00:19:53,840
this

00:19:48,080 --> 00:19:53,840
uh talk thank you

00:20:02,530 --> 00:20:09,280
[Music]

00:20:07,520 --> 00:20:12,159
hey brother how are you doing that was

00:20:09,280 --> 00:20:14,559
an amazing talk well done

00:20:12,159 --> 00:20:15,840
thank you so much uh i really enjoyed it

00:20:14,559 --> 00:20:17,840
um this was

00:20:15,840 --> 00:20:20,720
this was my first ever talk and you know

00:20:17,840 --> 00:20:23,360
i really enjoyed the process

00:20:20,720 --> 00:20:24,480
of you know making the video and you

00:20:23,360 --> 00:20:26,480
know

00:20:24,480 --> 00:20:29,120
fast ever talking i came across like a

00:20:26,480 --> 00:20:30,400
pro i know seasoned pros who have melted

00:20:29,120 --> 00:20:32,400
under the pressure of having to do a

00:20:30,400 --> 00:20:34,960
remote talk so well done for that

00:20:32,400 --> 00:20:36,960
as well as thank you so much i certainly

00:20:34,960 --> 00:20:38,960
learned a lot about tensorflow

00:20:36,960 --> 00:20:40,240
so the questions are coming in quick and

00:20:38,960 --> 00:20:43,200
fast already

00:20:40,240 --> 00:20:44,400
so should we get cracking with them so

00:20:43,200 --> 00:20:46,159
yeah sure

00:20:44,400 --> 00:20:49,120
actually it's uh there's felt ones from

00:20:46,159 --> 00:20:51,440
the previous session

00:20:49,120 --> 00:20:52,480
and but we have had one come in and how

00:20:51,440 --> 00:20:55,440
do you train

00:20:52,480 --> 00:20:56,480
the data set not the code but the tool

00:20:55,440 --> 00:20:58,080
to process it

00:20:56,480 --> 00:21:00,840
do you know anything about that that you

00:20:58,080 --> 00:21:04,559
could mention

00:21:00,840 --> 00:21:06,880
so how do you train the data set so

00:21:04,559 --> 00:21:07,919
um you essentially use this thing called

00:21:06,880 --> 00:21:11,600
a neural net

00:21:07,919 --> 00:21:12,960
um which tries to replicate uh how the

00:21:11,600 --> 00:21:15,360
human mind works

00:21:12,960 --> 00:21:16,480
so uh like you might know that the human

00:21:15,360 --> 00:21:20,480
mind has

00:21:16,480 --> 00:21:23,919
um neurons so uh so we use a neural net

00:21:20,480 --> 00:21:26,320
to train the data set

00:21:23,919 --> 00:21:27,039
so um like in fact i mentioned in the

00:21:26,320 --> 00:21:30,240
video that

00:21:27,039 --> 00:21:33,360
um we essentially convert the

00:21:30,240 --> 00:21:34,960
image into a long array um so

00:21:33,360 --> 00:21:36,559
that is the sort of data which we can

00:21:34,960 --> 00:21:38,240
actually give to the neural net and then

00:21:36,559 --> 00:21:40,799
the neural net can learn

00:21:38,240 --> 00:21:42,720
things and then um give your predictions

00:21:40,799 --> 00:21:45,760
about it

00:21:42,720 --> 00:21:49,120
all right that is a

00:21:45,760 --> 00:21:50,159
short explanation on how it works okay

00:21:49,120 --> 00:21:52,159
so that sounds

00:21:50,159 --> 00:21:54,000
like um we should go back and watch your

00:21:52,159 --> 00:21:54,799
talk again and refresh our memories

00:21:54,000 --> 00:21:58,880
about it

00:21:54,799 --> 00:22:00,480
maybe yeah for sure how do you decide on

00:21:58,880 --> 00:22:04,000
the size of the hidden

00:22:00,480 --> 00:22:07,280
layer um so

00:22:04,000 --> 00:22:11,200
it really depends on the data set um

00:22:07,280 --> 00:22:14,640
in most cases uh uh having around

00:22:11,200 --> 00:22:17,840
100 to 512 neurons and the

00:22:14,640 --> 00:22:19,360
hidden layer does the job well um unless

00:22:17,840 --> 00:22:22,640
you're working on a really big

00:22:19,360 --> 00:22:25,120
um data set so uh

00:22:22,640 --> 00:22:27,120
like let's say companies uh like if

00:22:25,120 --> 00:22:28,720
spotify were to use tensorflow.js they

00:22:27,120 --> 00:22:30,720
would have to make a really huge

00:22:28,720 --> 00:22:32,880
neural net because the amount of data is

00:22:30,720 --> 00:22:33,440
just uh there's just too much data over

00:22:32,880 --> 00:22:37,679
there

00:22:33,440 --> 00:22:42,159
um but um for most purposes around

00:22:37,679 --> 00:22:44,799
um 200 uh neurons in the hidden layer

00:22:42,159 --> 00:22:46,240
work perfectly fine okay so that's a lot

00:22:44,799 --> 00:22:47,200
of neurons how does that compare to a

00:22:46,240 --> 00:22:50,559
human brain

00:22:47,200 --> 00:22:52,799
in terms of how we uh process that

00:22:50,559 --> 00:22:54,400
it does not compare well to human brain

00:22:52,799 --> 00:22:56,640
of course um

00:22:54,400 --> 00:22:58,240
we have we have trillions and trillions

00:22:56,640 --> 00:23:01,360
of neurons in our brain

00:22:58,240 --> 00:23:02,640
but and you know there's only so much

00:23:01,360 --> 00:23:06,559
that a computer can do

00:23:02,640 --> 00:23:07,520
right um so yeah it's not really

00:23:06,559 --> 00:23:09,280
comparable

00:23:07,520 --> 00:23:11,679
do you think we'll get to a point when

00:23:09,280 --> 00:23:14,720
it will be comparable

00:23:11,679 --> 00:23:16,640
yes of course um in fact um now we

00:23:14,720 --> 00:23:18,080
just uh like you might have heard about

00:23:16,640 --> 00:23:22,000
gpt3 yes

00:23:18,080 --> 00:23:25,440
also so elon musk's company neuralink is

00:23:22,000 --> 00:23:29,360
working on training a really big um

00:23:25,440 --> 00:23:32,080
a big neural net um which

00:23:29,360 --> 00:23:34,080
like they're basically trying to train a

00:23:32,080 --> 00:23:36,400
neural net that can do multiple things

00:23:34,080 --> 00:23:37,919
it could do image recognition uh speech

00:23:36,400 --> 00:23:40,400
recognition it could

00:23:37,919 --> 00:23:41,360
uh they basically want it to be as good

00:23:40,400 --> 00:23:43,679
as a human

00:23:41,360 --> 00:23:45,520
so yeah yeah oh wow well i suppose

00:23:43,679 --> 00:23:46,159
that's where neurolink comes in so he

00:23:45,520 --> 00:23:49,120
can

00:23:46,159 --> 00:23:50,080
extract or use maybe he's creating a

00:23:49,120 --> 00:23:54,159
neural net

00:23:50,080 --> 00:23:57,520
of people to do his uh processing on

00:23:54,159 --> 00:23:58,960
yeah i hope not i really hope not

00:23:57,520 --> 00:24:01,880
so we've got a couple more questions

00:23:58,960 --> 00:24:03,120
coming one of the cool things about

00:24:01,880 --> 00:24:05,279
tensorflow.js

00:24:03,120 --> 00:24:07,200
is that it can be used in browser but

00:24:05,279 --> 00:24:09,679
are there any times when you shouldn't

00:24:07,200 --> 00:24:12,159
and should in fact move processing to a

00:24:09,679 --> 00:24:12,159
back end

00:24:12,240 --> 00:24:20,159
so um there is a limit to how much

00:24:16,559 --> 00:24:23,600
data you can process in your browser um

00:24:20,159 --> 00:24:25,840
but um i mean

00:24:23,600 --> 00:24:27,440
the whole point of tensorflow.js is

00:24:25,840 --> 00:24:31,039
basically

00:24:27,440 --> 00:24:32,159
to integrate ai inside the browser in a

00:24:31,039 --> 00:24:34,159
small package

00:24:32,159 --> 00:24:35,200
such that it actually runs on any device

00:24:34,159 --> 00:24:37,279
you can imagine

00:24:35,200 --> 00:24:38,320
uh with a browser and an internet

00:24:37,279 --> 00:24:41,840
connection

00:24:38,320 --> 00:24:44,880
um but

00:24:41,840 --> 00:24:46,960
um if you're working on on research

00:24:44,880 --> 00:24:48,960
or something like that or for academic

00:24:46,960 --> 00:24:51,120
purposes it is not really advisable to

00:24:48,960 --> 00:24:54,000
run ai models in the

00:24:51,120 --> 00:24:56,880
browser because i mean that's not the

00:24:54,000 --> 00:25:00,000
purpose of tensorflow.js

00:24:56,880 --> 00:25:02,080
so uh like the the core purpose of

00:25:00,000 --> 00:25:03,760
tensorflow.js is to bring the world of

00:25:02,080 --> 00:25:04,960
ai for web developers

00:25:03,760 --> 00:25:08,640
uh that is why it is written in

00:25:04,960 --> 00:25:11,120
javascript and you know uh

00:25:08,640 --> 00:25:12,400
and it's um in my opinion it's not that

00:25:11,120 --> 00:25:15,360
tough to get into

00:25:12,400 --> 00:25:16,080
it's not as tough as people claim it to

00:25:15,360 --> 00:25:19,360
be

00:25:16,080 --> 00:25:21,039
yeah okay and why do you think people do

00:25:19,360 --> 00:25:22,960
claim it to be quite tough to get into

00:25:21,039 --> 00:25:24,720
it's it's an intimidating subject to

00:25:22,960 --> 00:25:27,039
come in fresh too but is there anything

00:25:24,720 --> 00:25:30,640
more than that

00:25:27,039 --> 00:25:34,159
um so uh

00:25:30,640 --> 00:25:36,320
um so

00:25:34,159 --> 00:25:37,520
uh the thing is for a long period of

00:25:36,320 --> 00:25:41,440
time like um

00:25:37,520 --> 00:25:46,320
ai and these sort of things were

00:25:41,440 --> 00:25:48,799
uh they were basically uh just um

00:25:46,320 --> 00:25:49,440
they were restricted to like um you know

00:25:48,799 --> 00:25:52,080
scientists

00:25:49,440 --> 00:25:53,760
and um and for research purposes it

00:25:52,080 --> 00:25:54,640
wasn't really available for the general

00:25:53,760 --> 00:25:57,440
public

00:25:54,640 --> 00:25:59,279
uh so you know um and in the recent um

00:25:57,440 --> 00:26:03,039
years what has happened is that

00:25:59,279 --> 00:26:03,760
um um like uh ai has become this buzz

00:26:03,039 --> 00:26:06,960
word

00:26:03,760 --> 00:26:07,919
um and that sort of uh like and then

00:26:06,960 --> 00:26:10,559
people think about hey

00:26:07,919 --> 00:26:12,400
they find it to be very uh like very

00:26:10,559 --> 00:26:15,600
intimidating to get into

00:26:12,400 --> 00:26:16,080
um but that's certainly not true um i i

00:26:15,600 --> 00:26:18,559
would

00:26:16,080 --> 00:26:20,799
go as far as to say that um getting into

00:26:18,559 --> 00:26:23,279
tensorflow.js is as easy as

00:26:20,799 --> 00:26:25,360
um learning a new javascript framework

00:26:23,279 --> 00:26:27,600
like react or view

00:26:25,360 --> 00:26:29,919
it's just that um you have to get used

00:26:27,600 --> 00:26:33,279
to a few terminologies here and there

00:26:29,919 --> 00:26:35,360
and another thing people think that

00:26:33,279 --> 00:26:36,559
to get into ai you have to be really

00:26:35,360 --> 00:26:40,000
good at math

00:26:36,559 --> 00:26:42,320
which is certainly not true um because

00:26:40,000 --> 00:26:43,200
you can do a lot with ai without knowing

00:26:42,320 --> 00:26:45,440
any of the math

00:26:43,200 --> 00:26:46,640
that is going behind it so yeah that's

00:26:45,440 --> 00:26:48,960
my take on it

00:26:46,640 --> 00:26:50,880
i suppose the point of it is to abstract

00:26:48,960 --> 00:26:53,600
us away from that mathematics we may

00:26:50,880 --> 00:26:56,720
have trillions of neurons but a computer

00:26:53,600 --> 00:26:59,440
maybe is better at presenting

00:26:56,720 --> 00:27:00,880
the information than our brains are okay

00:26:59,440 --> 00:27:02,880
that was a brilliant answer thank you

00:27:00,880 --> 00:27:04,880
and we've got another question coming

00:27:02,880 --> 00:27:08,960
how do you tell the software

00:27:04,880 --> 00:27:12,320
that the prediction was incorrect

00:27:08,960 --> 00:27:12,320
um so

00:27:13,120 --> 00:27:16,960
we do not tell so

00:27:17,679 --> 00:27:21,840
reinforcement learning that is

00:27:22,720 --> 00:27:26,000
where the aig gets to know that it has

00:27:24,720 --> 00:27:28,399
done something wrong

00:27:26,000 --> 00:27:29,520
um but in the kind of learning which we

00:27:28,399 --> 00:27:33,200
have developed um

00:27:29,520 --> 00:27:36,880
the uh the digit recognizer um

00:27:33,200 --> 00:27:38,080
uh it um the only time when it knows

00:27:36,880 --> 00:27:40,880
that something is wrong

00:27:38,080 --> 00:27:41,840
um is when you're training the uh the

00:27:40,880 --> 00:27:45,360
data set

00:27:41,840 --> 00:27:49,679
um using the neural net so basically

00:27:45,360 --> 00:27:52,399
um like uh the images have labels right

00:27:49,679 --> 00:27:54,080
and um while testing the neural net like

00:27:52,399 --> 00:27:57,120
when it is testing itself

00:27:54,080 --> 00:28:00,000
um if it uh let's see you um

00:27:57,120 --> 00:28:02,399
you it gets a picture of one and it

00:28:00,000 --> 00:28:04,640
incorrectly predicts that as seven

00:28:02,399 --> 00:28:06,559
so then it gets to know that it is wrong

00:28:04,640 --> 00:28:09,200
right um so and then it

00:28:06,559 --> 00:28:09,919
sort of goes back again and look and

00:28:09,200 --> 00:28:12,480
looks at

00:28:09,919 --> 00:28:14,000
what went wrong uh i mean there is some

00:28:12,480 --> 00:28:16,640
math involved in it again

00:28:14,000 --> 00:28:18,000
i'm trying to boil things down a simple

00:28:16,640 --> 00:28:21,679
level

00:28:18,000 --> 00:28:23,919
that is how okay kind of like how

00:28:21,679 --> 00:28:25,120
humans learn like through trial and

00:28:23,919 --> 00:28:27,440
error right

00:28:25,120 --> 00:28:29,039
um if you look at small kids they if

00:28:27,440 --> 00:28:31,440
they do something wrong their parents

00:28:29,039 --> 00:28:33,760
probably get mad at them and then they

00:28:31,440 --> 00:28:35,760
do not do it again

00:28:33,760 --> 00:28:37,919
it's a trial and error process does that

00:28:35,760 --> 00:28:41,520
mean you give tensorflow a smack if it's

00:28:37,919 --> 00:28:41,520
been naughty and getting things wrong

00:28:42,320 --> 00:28:45,919
yeah no nobody should get back in their

00:28:44,240 --> 00:28:47,760
kids i'm just going to say that

00:28:45,919 --> 00:28:50,240
and we do have another question coming

00:28:47,760 --> 00:28:52,720
do you have any recommendations for good

00:28:50,240 --> 00:28:54,399
ai javascript resources maybe that's

00:28:52,720 --> 00:28:58,399
related to tensorflow.js

00:28:54,399 --> 00:29:00,880
maybe it's a more broad um broad

00:28:58,399 --> 00:29:03,600
article about the topic got any

00:29:00,880 --> 00:29:03,600
recommendations

00:29:03,919 --> 00:29:09,520
so um so the gender

00:29:07,039 --> 00:29:11,039
training process and the code syntax is

00:29:09,520 --> 00:29:11,840
very similar between python and

00:29:11,039 --> 00:29:13,120
javascript

00:29:11,840 --> 00:29:15,279
that is one of the good things about

00:29:13,120 --> 00:29:18,240
tensorflow flow.js

00:29:15,279 --> 00:29:19,520
um but you do get the perks of

00:29:18,240 --> 00:29:22,159
javascript like you can have

00:29:19,520 --> 00:29:25,840
asynchronous functions and uh

00:29:22,159 --> 00:29:27,200
and those kind of things but um a good

00:29:25,840 --> 00:29:29,679
learning resources

00:29:27,200 --> 00:29:31,760
um so at the end of the slide i had

00:29:29,679 --> 00:29:35,360
given three learning resources

00:29:31,760 --> 00:29:37,919
one was from kaggle which is the

00:29:35,360 --> 00:29:39,440
basically the the hub for data science

00:29:37,919 --> 00:29:42,480
and then we also had

00:29:39,440 --> 00:29:43,600
the the machine learning fundamentals

00:29:42,480 --> 00:29:47,120
course by google

00:29:43,600 --> 00:29:48,880
um who they created tensorflow itself so

00:29:47,120 --> 00:29:50,960
that is also a very good course and then

00:29:48,880 --> 00:29:53,360
you have on the famous

00:29:50,960 --> 00:29:54,480
machine learning courses from andrew eng

00:29:53,360 --> 00:29:56,559
so these

00:29:54,480 --> 00:29:58,960
oh yeah yeah you're back i thought we'd

00:29:56,559 --> 00:30:00,640
lost you for a moment then

00:29:58,960 --> 00:30:02,559
yeah so you're just saying you put the

00:30:00,640 --> 00:30:03,840
resources at the end of your slides are

00:30:02,559 --> 00:30:05,440
probably where you'd rather

00:30:03,840 --> 00:30:09,200
you can share the slide if you would

00:30:05,440 --> 00:30:10,960
like oh if you liked it

00:30:09,200 --> 00:30:12,720
uh yeah if you put it into this chat if

00:30:10,960 --> 00:30:15,440
you've got it there

00:30:12,720 --> 00:30:15,440
yeah for sure

00:30:16,640 --> 00:30:19,760
so while you're doing that i've got to

00:30:18,159 --> 00:30:22,640
ask you

00:30:19,760 --> 00:30:24,399
why have you got your books organized in

00:30:22,640 --> 00:30:26,240
that way

00:30:24,399 --> 00:30:28,640
i've never seen i have never seen a

00:30:26,240 --> 00:30:32,240
bookcase arranged like that before

00:30:28,640 --> 00:30:33,440
um so uh so this bookshelf was designed

00:30:32,240 --> 00:30:36,880
by my dad

00:30:33,440 --> 00:30:38,480
i mean um he's he's fond of design and

00:30:36,880 --> 00:30:39,279
architecture and that sort of thing so

00:30:38,480 --> 00:30:43,520
you know

00:30:39,279 --> 00:30:44,799
um so when this house was actually in

00:30:43,520 --> 00:30:46,480
construction he thought

00:30:44,799 --> 00:30:48,080
why not do something different than the

00:30:46,480 --> 00:30:51,919
previous house right so

00:30:48,080 --> 00:30:54,720
um yeah we have this sort of

00:30:51,919 --> 00:30:55,279
it's an interesting design yeah it is

00:30:54,720 --> 00:30:57,279
it's just

00:30:55,279 --> 00:31:00,240
weird um does your dad take orders and

00:30:57,279 --> 00:31:02,960
does he ship to the united kingdom

00:31:00,240 --> 00:31:04,240
oh no he's not he's not he's not an

00:31:02,960 --> 00:31:07,519
architect by profession

00:31:04,240 --> 00:31:10,880
but i mean if you want we can

00:31:07,519 --> 00:31:13,919
we can help out for sure okay

00:31:10,880 --> 00:31:17,760
and back to the javascript i guess

00:31:13,919 --> 00:31:19,360
can i use tensorflow.js for learning ai

00:31:17,760 --> 00:31:21,840
instead of using python

00:31:19,360 --> 00:31:23,279
because i'm from a javascript of course

00:31:21,840 --> 00:31:26,720
you can that was the sole

00:31:23,279 --> 00:31:28,559
purpose of um tensorflow.js making it

00:31:26,720 --> 00:31:29,919
accessible to web developers who know

00:31:28,559 --> 00:31:33,600
javascript right

00:31:29,919 --> 00:31:36,480
so um

00:31:33,600 --> 00:31:36,960
the entire thing which uh um which was

00:31:36,480 --> 00:31:40,080
shown

00:31:36,960 --> 00:31:41,919
in the the presentation can be done

00:31:40,080 --> 00:31:43,960
purely in javascript in fact there's a

00:31:41,919 --> 00:31:46,559
very good youtube video by

00:31:43,960 --> 00:31:47,679
fireship.io i think i'll drop that link

00:31:46,559 --> 00:31:50,880
here as well

00:31:47,679 --> 00:31:52,320
so over there he uses angular along with

00:31:50,880 --> 00:31:55,679
um

00:31:52,320 --> 00:31:56,399
angular along with tensorflow.js to make

00:31:55,679 --> 00:32:00,399
the entire

00:31:56,399 --> 00:32:02,960
model inside javascript and you know um

00:32:00,399 --> 00:32:03,919
it certainly it certainly can be done in

00:32:02,960 --> 00:32:06,080
fact um

00:32:03,919 --> 00:32:07,200
uh i mentioned about keras in the

00:32:06,080 --> 00:32:09,760
presentation

00:32:07,200 --> 00:32:11,559
um now google just launched a new

00:32:09,760 --> 00:32:14,720
library called

00:32:11,559 --> 00:32:15,600
dan4.js um i'm not quite sure on the

00:32:14,720 --> 00:32:18,720
name but

00:32:15,600 --> 00:32:19,039
that is essentially a keras replacement

00:32:18,720 --> 00:32:22,559
for

00:32:19,039 --> 00:32:25,039
java like it is written in javascript so

00:32:22,559 --> 00:32:27,440
um google is encouraging uh web

00:32:25,039 --> 00:32:30,080
developers out there to

00:32:27,440 --> 00:32:31,919
try out aia and these sort of things and

00:32:30,080 --> 00:32:33,679
javascript so

00:32:31,919 --> 00:32:36,080
i think it's a growing community and you

00:32:33,679 --> 00:32:38,000
should definitely take a look at it yeah

00:32:36,080 --> 00:32:39,120
yeah i mean you've inspired me to dive

00:32:38,000 --> 00:32:40,480
into this kind of stuff

00:32:39,120 --> 00:32:42,480
i think i'm going to train something to

00:32:40,480 --> 00:32:42,880
detect whether a photo is of my cat or

00:32:42,480 --> 00:32:44,320
not

00:32:42,880 --> 00:32:45,919
so that's yeah that's what would be the

00:32:44,320 --> 00:32:46,720
best thing for this it was the example

00:32:45,919 --> 00:32:50,880
you used right

00:32:46,720 --> 00:32:53,840
cats and dogs you can always ask me

00:32:50,880 --> 00:32:55,279
oh perfect perfect um so we've had

00:32:53,840 --> 00:32:56,720
another question which i think

00:32:55,279 --> 00:32:59,120
you answered in the previous one but

00:32:56,720 --> 00:33:00,720
i'll reiterate anyway can the models be

00:32:59,120 --> 00:33:04,399
trained using js

00:33:00,720 --> 00:33:07,440
and jso yes they can

00:33:04,399 --> 00:33:10,960
um in fact uh google is

00:33:07,440 --> 00:33:13,200
um is constantly trying to support

00:33:10,960 --> 00:33:14,480
um like web developers get into the

00:33:13,200 --> 00:33:16,799
field of ai

00:33:14,480 --> 00:33:17,840
so a lot of the tools that were

00:33:16,799 --> 00:33:20,000
originally

00:33:17,840 --> 00:33:21,200
written for python are now being

00:33:20,000 --> 00:33:23,960
available on

00:33:21,200 --> 00:33:26,320
javascript as well so i mentioned about

00:33:23,960 --> 00:33:27,120
danfo.js which is basically a keras

00:33:26,320 --> 00:33:30,080
replacement

00:33:27,120 --> 00:33:30,960
what i showed in the um video in the

00:33:30,080 --> 00:33:34,320
presentation

00:33:30,960 --> 00:33:35,039
so yes you can definitely do it okay

00:33:34,320 --> 00:33:38,720
what are the

00:33:35,039 --> 00:33:40,720
yeah so you can carry on carry on

00:33:38,720 --> 00:33:41,840
yeah yeah so i'm just reading a question

00:33:40,720 --> 00:33:44,039
here what are

00:33:41,840 --> 00:33:45,200
what other projects have you made using

00:33:44,039 --> 00:33:48,480
tensorflow.js

00:33:45,200 --> 00:33:51,919
um uh i would consider

00:33:48,480 --> 00:33:53,360
myself more of a more as like a python

00:33:51,919 --> 00:33:55,210
developer first

00:33:53,360 --> 00:33:58,080
um so i'm very

00:33:55,210 --> 00:34:00,559
[Music]

00:33:58,080 --> 00:34:01,760
um i've very recently like started

00:34:00,559 --> 00:34:04,240
learning javascript like

00:34:01,760 --> 00:34:05,200
um five six months ago so do not have

00:34:04,240 --> 00:34:08,399
many projects in

00:34:05,200 --> 00:34:11,119
tensorflow.js but google itself has a

00:34:08,399 --> 00:34:12,000
has a really good catalogue of projects

00:34:11,119 --> 00:34:15,599
that you can build

00:34:12,000 --> 00:34:17,280
in fact they have um this this game that

00:34:15,599 --> 00:34:19,679
runs inside the browser

00:34:17,280 --> 00:34:20,480
where you basically have video detection

00:34:19,679 --> 00:34:23,440
and um

00:34:20,480 --> 00:34:24,320
it basically asks you uh like it will

00:34:23,440 --> 00:34:26,800
ask you to bring

00:34:24,320 --> 00:34:28,560
um a book near it and then it will ask

00:34:26,800 --> 00:34:30,720
you to show the book to the camera

00:34:28,560 --> 00:34:32,159
so it's kind of like find things around

00:34:30,720 --> 00:34:34,720
the house so then it could ask

00:34:32,159 --> 00:34:36,240
show me a picture of a fork so within 60

00:34:34,720 --> 00:34:37,679
seconds you have to run back get the

00:34:36,240 --> 00:34:40,240
fork and show it

00:34:37,679 --> 00:34:41,839
to the camera and then it detects it

00:34:40,240 --> 00:34:43,919
it's a pretty cool game

00:34:41,839 --> 00:34:46,399
yeah that sounds fun um it sounds like

00:34:43,919 --> 00:34:48,480
one which involves a lot of exercise

00:34:46,399 --> 00:34:50,560
which normally eliminates it as a game

00:34:48,480 --> 00:34:53,200
of choice for me but it does sound fun

00:34:50,560 --> 00:34:54,800
so what are you working on then what's

00:34:53,200 --> 00:34:56,639
your next little side project doesn't

00:34:54,800 --> 00:34:58,000
necessarily have to be javascript but

00:34:56,639 --> 00:35:00,160
are you building something cool in

00:34:58,000 --> 00:35:03,280
python at the moment

00:35:00,160 --> 00:35:04,320
yes i am so uh i'm working on an

00:35:03,280 --> 00:35:07,520
application

00:35:04,320 --> 00:35:11,680
um which will be made using flutter and

00:35:07,520 --> 00:35:15,119
um python or django to be precise

00:35:11,680 --> 00:35:16,720
uh django rest framework so yeah it's an

00:35:15,119 --> 00:35:19,119
app in the works so

00:35:16,720 --> 00:35:20,079
um it's a bit it's a bit of a different

00:35:19,119 --> 00:35:22,400
idea

00:35:20,079 --> 00:35:23,520
to like some of the projects i've done

00:35:22,400 --> 00:35:25,839
so it's like

00:35:23,520 --> 00:35:28,240
uh recreating the stock market i mean

00:35:25,839 --> 00:35:29,280
it's not really related to tensorflow.js

00:35:28,240 --> 00:35:31,440
in any way so

00:35:29,280 --> 00:35:32,640
i won't go too much into detail on that

00:35:31,440 --> 00:35:35,520
no you don't want to give away your

00:35:32,640 --> 00:35:35,520
trade secrets

00:35:36,560 --> 00:35:40,000
the next talk's gonna start very shortly

00:35:38,640 --> 00:35:42,079
so i'm gonna

00:35:40,000 --> 00:35:44,160
draw this to a close and say a huge

00:35:42,079 --> 00:35:45,680
thank you for being a part of the 2020

00:35:44,160 --> 00:35:47,680
city js conference

00:35:45,680 --> 00:35:49,359
um your talk's absolutely amazing it's

00:35:47,680 --> 00:35:50,960
inspired me to go and look into

00:35:49,359 --> 00:35:52,880
tensorflow and i'm sure it has

00:35:50,960 --> 00:35:56,000
for others and i look forward to seeing

00:35:52,880 --> 00:35:57,599
yeah your other tools thank you so much

00:35:56,000 --> 00:35:59,680
it was an honor being here thank you so

00:35:57,599 --> 00:36:00,000
much look forward to seeing you in the

00:35:59,680 --> 00:36:02,240
uh

00:36:00,000 --> 00:36:04,000
chat area for the rest of the day okay

00:36:02,240 --> 00:36:05,680
so we'll be heading back into the

00:36:04,000 --> 00:36:07,920
conference talks very very shortly

00:36:05,680 --> 00:36:09,680
so we'll see you in the chat or in uh

00:36:07,920 --> 00:36:13,839
youtube

00:36:09,680 --> 00:36:13,839

YouTube URL: https://www.youtube.com/watch?v=ds6qdp1TVDg


