Title: Deno, and The Future of JavaScript Runtimes - Kitson P. Kelly - CityJS Conf 2020
Publication date: 2020-10-03
Playlist: CityJS Conf 2020
Description: 
	Deno is a secure runtime of JavaScript and TypeScript built in Rust.  I have been working on it since its early prototype days and want to share some insights with you on what the current state of Deno is and runtimes in general.  I will explain how Deno works, what the future of Deno looks like, and what sort of challenges and problems come with running JavaScript and TypeScript.

Bio
An IT consultant by day, a long-term contributor to Deno by night.  Prior to ThoughtWorks, was CTO at SitePen, ran technology at NOW TV, worked for Sky for several years as well as other IT consulting firms.

Deno contributor, ex-maintainer of Dojo, creator of Oak Middleware Framework for Deno

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:18,060 --> 00:00:22,720
[Music]

00:00:22,160 --> 00:00:24,960
hello

00:00:22,720 --> 00:00:26,080
uh i'm giving a talk about uh dino today

00:00:24,960 --> 00:00:29,119
uh glad to

00:00:26,080 --> 00:00:32,480
have all of you here watching um i'm

00:00:29,119 --> 00:00:35,600
located in uh melbourne australia um and

00:00:32,480 --> 00:00:37,680
uh before i begin um i'd like to

00:00:35,600 --> 00:00:39,440
give an acknowledgement of uh country

00:00:37,680 --> 00:00:41,520
which is something we

00:00:39,440 --> 00:00:43,120
do here in australia um i'd like to

00:00:41,520 --> 00:00:45,280
begin by acknowledging and paying my

00:00:43,120 --> 00:00:46,800
respects for the bundwarang people

00:00:45,280 --> 00:00:48,879
the traditional custodians of the land

00:00:46,800 --> 00:00:50,480
of which i'm giving this talk today

00:00:48,879 --> 00:00:52,399
i would like to pay my respects to their

00:00:50,480 --> 00:00:54,079
elders past present and emerging

00:00:52,399 --> 00:00:56,480
and acknowledging all aboriginal and

00:00:54,079 --> 00:00:58,719
torres strait islanders who are watching

00:00:56,480 --> 00:00:59,600
also paying my respects to your elders

00:00:58,719 --> 00:01:02,719
past present

00:00:59,600 --> 00:01:03,280
and emerging so uh first a little bit

00:01:02,719 --> 00:01:05,840
about me

00:01:03,280 --> 00:01:08,320
um i'm originally from the us uh but i

00:01:05,840 --> 00:01:11,200
moved to the uk in 2006 and then

00:01:08,320 --> 00:01:12,400
uh in australia at the beginning of

00:01:11,200 --> 00:01:15,360
2018.

00:01:12,400 --> 00:01:16,960
um i used to be the project lead for

00:01:15,360 --> 00:01:20,640
dojo

00:01:16,960 --> 00:01:24,799
and my uh first contribution to dino was

00:01:20,640 --> 00:01:27,040
on the 31st of may 2018

00:01:24,799 --> 00:01:28,159
bry's first commit was uh the 13th of

00:01:27,040 --> 00:01:31,280
may uh

00:01:28,159 --> 00:01:33,439
so i've been uh working with

00:01:31,280 --> 00:01:35,040
dino pretty much uh since its

00:01:33,439 --> 00:01:38,000
announcement

00:01:35,040 --> 00:01:40,079
um as a as a prototype my biggest area

00:01:38,000 --> 00:01:42,479
of focus has been around typescript and

00:01:40,079 --> 00:01:43,759
how typescript integrates into the

00:01:42,479 --> 00:01:46,799
compiler

00:01:43,759 --> 00:01:47,920
within dino to provide a sort of

00:01:46,799 --> 00:01:51,520
seamless

00:01:47,920 --> 00:01:51,520
usage of typescript within dino

00:01:51,680 --> 00:01:55,040
dino is a new command line runtime for

00:01:53,360 --> 00:01:56,640
executing javascript typescript and

00:01:55,040 --> 00:01:59,920
webassembly it's built with

00:01:56,640 --> 00:02:01,280
v8 typescript and rust but why would we

00:01:59,920 --> 00:02:03,680
want to do this

00:02:01,280 --> 00:02:04,640
so you know javascript has changed quite

00:02:03,680 --> 00:02:07,680
a lot since

00:02:04,640 --> 00:02:08,399
node.js was designed in 2009 we have

00:02:07,680 --> 00:02:11,520
promises

00:02:08,399 --> 00:02:12,720
iterators async await quite a lot of

00:02:11,520 --> 00:02:16,319
other

00:02:12,720 --> 00:02:19,840
syntax as well and also

00:02:16,319 --> 00:02:21,280
the rise of es modules uh we have typed

00:02:19,840 --> 00:02:24,080
arrays

00:02:21,280 --> 00:02:27,920
and typescript has become an important

00:02:24,080 --> 00:02:31,040
part of the larger javascript ecosystem

00:02:27,920 --> 00:02:34,640
and node.js has some problems

00:02:31,040 --> 00:02:37,680
it's got a poorly designed module system

00:02:34,640 --> 00:02:39,920
with uh the npm registry uh uh

00:02:37,680 --> 00:02:41,280
it's got a effectively a centralized uh

00:02:39,920 --> 00:02:44,400
distribution model

00:02:41,280 --> 00:02:45,519
um uh for all of the code um lots of

00:02:44,400 --> 00:02:48,640
legacy apis

00:02:45,519 --> 00:02:50,000
uh that have to be um continue to be

00:02:48,640 --> 00:02:53,280
supported um

00:02:50,000 --> 00:02:56,319
and it has sort of trust everybody

00:02:53,280 --> 00:02:59,519
by default uh situation securing uh

00:02:56,319 --> 00:03:02,159
node.js um uh is uh

00:02:59,519 --> 00:03:03,200
uh a bit of a challenge right um it

00:03:02,159 --> 00:03:05,440
assumes that

00:03:03,200 --> 00:03:06,560
you have unfettered access to to the

00:03:05,440 --> 00:03:09,200
host environment

00:03:06,560 --> 00:03:10,000
especially when the the 1-0 announcement

00:03:09,200 --> 00:03:12,959
came

00:03:10,000 --> 00:03:14,159
may of uh this year there was a lot of

00:03:12,959 --> 00:03:16,720
sort of chatter

00:03:14,159 --> 00:03:17,760
on the internet and then twitter that

00:03:16,720 --> 00:03:21,040
you know dino was

00:03:17,760 --> 00:03:23,120
out to kill node.js um and

00:03:21,040 --> 00:03:25,280
you know sort of being involved in it

00:03:23,120 --> 00:03:28,640
from uh early early on

00:03:25,280 --> 00:03:31,360
um i i think myself and and others we've

00:03:28,640 --> 00:03:32,000
really never had that uh that that sort

00:03:31,360 --> 00:03:34,159
of viewpoint

00:03:32,000 --> 00:03:36,080
you know we're not out to kill node.js

00:03:34,159 --> 00:03:39,440
um really you know the the

00:03:36,080 --> 00:03:41,920
the viewpoint of of dino is is far more

00:03:39,440 --> 00:03:42,799
like this um that you know development

00:03:41,920 --> 00:03:46,159
is

00:03:42,799 --> 00:03:47,440
is uh challenging um uh it's a bit

00:03:46,159 --> 00:03:50,879
depressing at times

00:03:47,440 --> 00:03:53,840
um but um uh kind of remain

00:03:50,879 --> 00:03:54,239
uh maybe even naively optimistic um that

00:03:53,840 --> 00:03:56,560
uh

00:03:54,239 --> 00:03:57,760
sunshine's just around the corner so you

00:03:56,560 --> 00:03:59,200
know that's that's

00:03:57,760 --> 00:04:00,959
you know kind of the world that we live

00:03:59,200 --> 00:04:03,200
in um and

00:04:00,959 --> 00:04:04,879
you know no js you know battles in that

00:04:03,200 --> 00:04:07,280
world uh just as much

00:04:04,879 --> 00:04:08,879
the truth of it is is that you know node

00:04:07,280 --> 00:04:11,920
js is a tinker uh

00:04:08,879 --> 00:04:14,239
ship it um is hard to move um

00:04:11,920 --> 00:04:15,599
it takes a lot of effort and a lot of

00:04:14,239 --> 00:04:17,199
collaboration with lots of people

00:04:15,599 --> 00:04:17,919
because there's so many people depending

00:04:17,199 --> 00:04:20,799
upon it

00:04:17,919 --> 00:04:22,560
um uh it becomes you know a really hard

00:04:20,799 --> 00:04:24,560
place to be really innovative

00:04:22,560 --> 00:04:26,720
around things where you know as the

00:04:24,560 --> 00:04:30,000
stage that dino is at

00:04:26,720 --> 00:04:32,560
it's it's far more uh agile uh and

00:04:30,000 --> 00:04:33,600
um uh you know we can we can move it a

00:04:32,560 --> 00:04:35,520
little bit easier

00:04:33,600 --> 00:04:37,120
dino may very well end up in the place

00:04:35,520 --> 00:04:39,919
um uh similar to

00:04:37,120 --> 00:04:40,720
the way that node.js is today so you

00:04:39,919 --> 00:04:42,560
know the real

00:04:40,720 --> 00:04:44,080
emphasis behind you know is is that it's

00:04:42,560 --> 00:04:44,960
a fun and productive system for

00:04:44,080 --> 00:04:47,360
scripting

00:04:44,960 --> 00:04:49,520
uh a good scripting platform uh is is

00:04:47,360 --> 00:04:52,479
really too useful of a tool to

00:04:49,520 --> 00:04:53,199
um uh sort of accept the status quo and

00:04:52,479 --> 00:04:56,320
uh

00:04:53,199 --> 00:04:58,880
uh neither node.js python nor

00:04:56,320 --> 00:05:01,759
ruby really are are acceptable fun and

00:04:58,880 --> 00:05:03,759
productive scripting system

00:05:01,759 --> 00:05:06,320
the focus with dino then is you know we

00:05:03,759 --> 00:05:08,000
want a single executable file

00:05:06,320 --> 00:05:10,800
we want it to always be distributed as

00:05:08,000 --> 00:05:13,440
that and we want to try to keep it

00:05:10,800 --> 00:05:15,360
relatively compact and independent of

00:05:13,440 --> 00:05:17,280
system libraries

00:05:15,360 --> 00:05:19,280
and have it so that the executable is

00:05:17,280 --> 00:05:20,240
all that you'll never need to run a dino

00:05:19,280 --> 00:05:22,080
program

00:05:20,240 --> 00:05:23,280
currently it ships on mac linux and

00:05:22,080 --> 00:05:26,479
windows

00:05:23,280 --> 00:05:28,720
um uh there are a couple

00:05:26,479 --> 00:05:29,919
experiments with you know different

00:05:28,720 --> 00:05:32,320
architectures

00:05:29,919 --> 00:05:33,120
um and you know who knows in in the

00:05:32,320 --> 00:05:35,120
longer term where

00:05:33,120 --> 00:05:36,639
where that will lead um but at the

00:05:35,120 --> 00:05:39,840
moment um

00:05:36,639 --> 00:05:41,919
it's it's mac linux and windows like i

00:05:39,840 --> 00:05:43,120
mentioned about node.js that sort of

00:05:41,919 --> 00:05:46,400
trusts everybody

00:05:43,120 --> 00:05:49,440
um with uh you know sort of a

00:05:46,400 --> 00:05:52,639
zero trust uh type of model um

00:05:49,440 --> 00:05:55,700
so you can run untrusted code

00:05:52,639 --> 00:05:56,880
you know safely basically you

00:05:55,700 --> 00:05:58,960
[Music]

00:05:56,880 --> 00:05:59,919
can go ahead and grab something off the

00:05:58,960 --> 00:06:01,759
web

00:05:59,919 --> 00:06:03,600
run it and know that it's not going to

00:06:01,759 --> 00:06:07,039
start doing a bit

00:06:03,600 --> 00:06:11,280
coin mining or

00:06:07,039 --> 00:06:13,360
being able to wipe out your hard drive

00:06:11,280 --> 00:06:15,280
so to access the disk network sub

00:06:13,360 --> 00:06:16,720
processes environmental variables even

00:06:15,280 --> 00:06:18,639
high precision timing

00:06:16,720 --> 00:06:21,759
the user must opt in with the command

00:06:18,639 --> 00:06:24,400
line uh and so that sort of external

00:06:21,759 --> 00:06:25,120
attestation of what should be allowed to

00:06:24,400 --> 00:06:27,840
happen

00:06:25,120 --> 00:06:29,039
uh is is a core tenant of of dino one of

00:06:27,840 --> 00:06:31,280
the other things that

00:06:29,039 --> 00:06:32,560
uh is probably a little bit different

00:06:31,280 --> 00:06:35,039
from

00:06:32,560 --> 00:06:37,280
node.js as well is is that where uh

00:06:35,039 --> 00:06:39,600
possible you know dino uses

00:06:37,280 --> 00:06:41,360
uh web platform apis now increasingly

00:06:39,600 --> 00:06:42,240
node.js is kind of headed in that way

00:06:41,360 --> 00:06:44,080
realizing

00:06:42,240 --> 00:06:46,880
that compatibility with a browser is

00:06:44,080 --> 00:06:47,199
probably an easier path than to continue

00:06:46,880 --> 00:06:49,759
to

00:06:47,199 --> 00:06:50,319
fight the web platform but you know dino

00:06:49,759 --> 00:06:53,840
doesn't

00:06:50,319 --> 00:06:56,160
uh aim to support every uh api

00:06:53,840 --> 00:06:57,440
um so there's some that just don't make

00:06:56,160 --> 00:07:00,800
context in it

00:06:57,440 --> 00:07:02,880
or make sense in the context of a server

00:07:00,800 --> 00:07:04,400
type runtime um

00:07:02,880 --> 00:07:06,000
but there's there's quite a bit there

00:07:04,400 --> 00:07:07,680
and it's one of those areas that we will

00:07:06,000 --> 00:07:08,880
continue to expand basically whenever we

00:07:07,680 --> 00:07:11,520
try to solve a problem

00:07:08,880 --> 00:07:13,360
you know we want to look at um what the

00:07:11,520 --> 00:07:15,039
web platform how they solve the problem

00:07:13,360 --> 00:07:17,280
and if that can be

00:07:15,039 --> 00:07:18,160
you know easily adapted and adopted

00:07:17,280 --> 00:07:21,440
within dino

00:07:18,160 --> 00:07:24,560
so at the moment we've the streams uh

00:07:21,440 --> 00:07:28,840
we've got the performance apis we've got

00:07:24,560 --> 00:07:31,599
uh a a little bit of the crypto apis

00:07:28,840 --> 00:07:33,759
um we have

00:07:31,599 --> 00:07:35,120
the eventing model is the same as the

00:07:33,759 --> 00:07:37,440
browser model versus

00:07:35,120 --> 00:07:38,319
uh doing something differently one of

00:07:37,440 --> 00:07:39,919
the things that

00:07:38,319 --> 00:07:41,440
that i think is probably the biggest

00:07:39,919 --> 00:07:42,319
mental shift for a lot of people coming

00:07:41,440 --> 00:07:45,360
to dino

00:07:42,319 --> 00:07:46,400
is is that we have these things called

00:07:45,360 --> 00:07:48,479
urls um

00:07:46,400 --> 00:07:49,840
they've worked for us in browsers uh for

00:07:48,479 --> 00:07:52,000
a long period of time

00:07:49,840 --> 00:07:52,960
um i like to think of dino as a browser

00:07:52,000 --> 00:07:56,080
for code

00:07:52,960 --> 00:07:59,360
um and so in

00:07:56,080 --> 00:08:01,919
the way that we specify modules

00:07:59,360 --> 00:08:02,960
they are essentially fully qualified

00:08:01,919 --> 00:08:06,080
urls

00:08:02,960 --> 00:08:10,960
um and so there's

00:08:06,080 --> 00:08:11,280
no notion of nodemodules or index.js

00:08:10,960 --> 00:08:14,319
there's

00:08:11,280 --> 00:08:17,520
there's basically no magic resolution

00:08:14,319 --> 00:08:20,560
um now that it means that

00:08:17,520 --> 00:08:24,000
uh you as the implementer of a

00:08:20,560 --> 00:08:25,039
web server of modules for dino you can

00:08:24,000 --> 00:08:27,759
do whatever sort of

00:08:25,039 --> 00:08:29,280
magical resolution that you want to but

00:08:27,759 --> 00:08:32,399
the dino runtime

00:08:29,280 --> 00:08:34,399
requests the url and expects

00:08:32,399 --> 00:08:36,240
you know handles whatever comes back

00:08:34,399 --> 00:08:37,839
with that url

00:08:36,240 --> 00:08:40,000
and so it doesn't require any

00:08:37,839 --> 00:08:43,760
centralized server anybody can create a

00:08:40,000 --> 00:08:45,839
a package server for

00:08:43,760 --> 00:08:47,839
for dino that's nothing more than a web

00:08:45,839 --> 00:08:51,360
server

00:08:47,839 --> 00:08:52,640
and the runtime goes ahead and fetches

00:08:51,360 --> 00:08:53,760
caches and compiles the code

00:08:52,640 --> 00:08:55,920
transparently so

00:08:53,760 --> 00:08:57,680
there isn't any work that needs to be

00:08:55,920 --> 00:09:00,240
done from the consumer perspective

00:08:57,680 --> 00:09:02,080
and of course because it's cached um you

00:09:00,240 --> 00:09:04,720
can go ahead and work in an offline

00:09:02,080 --> 00:09:06,560
mode with that downloaded cache so one

00:09:04,720 --> 00:09:07,120
of the things that we wanted to do with

00:09:06,560 --> 00:09:10,720
dino

00:09:07,120 --> 00:09:11,680
is to make typescript you know a first

00:09:10,720 --> 00:09:15,600
class language and

00:09:11,680 --> 00:09:19,760
really try to get it so that that

00:09:15,600 --> 00:09:22,399
your that it's as straightforward to

00:09:19,760 --> 00:09:23,040
run typescript as it is javascript um

00:09:22,399 --> 00:09:25,519
and

00:09:23,040 --> 00:09:26,160
uh and you know from a usability

00:09:25,519 --> 00:09:28,160
standpoint

00:09:26,160 --> 00:09:29,839
it's pretty darn close at the moment

00:09:28,160 --> 00:09:31,279
there's still a few things that we'd

00:09:29,839 --> 00:09:34,240
like to improve in that

00:09:31,279 --> 00:09:36,000
um uh uh particularly with you know

00:09:34,240 --> 00:09:38,720
dealing with the

00:09:36,000 --> 00:09:39,360
correlation between javascript uh that

00:09:38,720 --> 00:09:42,480
has

00:09:39,360 --> 00:09:44,720
external types and there are some

00:09:42,480 --> 00:09:46,320
uh workflows there that we we need to

00:09:44,720 --> 00:09:47,839
continue to improve so that it's a

00:09:46,320 --> 00:09:50,080
little bit easier

00:09:47,839 --> 00:09:52,240
and a little bit more powerful from a

00:09:50,080 --> 00:09:54,800
transparency perspective

00:09:52,240 --> 00:09:55,600
and so because it's a first-class

00:09:54,800 --> 00:09:58,720
language

00:09:55,600 --> 00:10:00,480
dino uh describes its runtime uh

00:09:58,720 --> 00:10:02,880
environment uh with its own type

00:10:00,480 --> 00:10:05,920
definitions uh it provides those

00:10:02,880 --> 00:10:07,680
uh to you um on the command line if you

00:10:05,920 --> 00:10:11,519
want to ever reference those

00:10:07,680 --> 00:10:13,200
um and um and and yeah we we really try

00:10:11,519 --> 00:10:15,839
to focus on cutting that down

00:10:13,200 --> 00:10:16,399
um uh javascript is also a first class

00:10:15,839 --> 00:10:18,399
language

00:10:16,399 --> 00:10:19,440
so you know we everything's uh yes

00:10:18,399 --> 00:10:22,800
module uh

00:10:19,440 --> 00:10:24,560
in uh dino world um and we go ahead and

00:10:22,800 --> 00:10:27,920
inject those directly into

00:10:24,560 --> 00:10:30,800
v8 as modules uh so

00:10:27,920 --> 00:10:32,079
um really the longer term vision is is

00:10:30,800 --> 00:10:34,640
that

00:10:32,079 --> 00:10:36,240
we see this natural migration from you

00:10:34,640 --> 00:10:37,040
know prototyping something quickly in

00:10:36,240 --> 00:10:40,079
javascript

00:10:37,040 --> 00:10:41,440
uh uh sort of beginning to make it type

00:10:40,079 --> 00:10:44,959
safe and typescript uh

00:10:41,440 --> 00:10:46,959
as as appropriate and then when you

00:10:44,959 --> 00:10:48,720
sort of run into those really difficult

00:10:46,959 --> 00:10:51,600
challenges to

00:10:48,720 --> 00:10:54,000
get high uh hot paths um to perform

00:10:51,600 --> 00:10:57,440
really well in javascript and typescript

00:10:54,000 --> 00:10:59,440
um you know move those to rust or

00:10:57,440 --> 00:11:00,959
webassembly rust you know running under

00:10:59,440 --> 00:11:03,440
webassembly or or whatever

00:11:00,959 --> 00:11:05,120
you know flavor of uh higher order

00:11:03,440 --> 00:11:06,800
language that you would compile down to

00:11:05,120 --> 00:11:09,440
web assembly to be able to

00:11:06,800 --> 00:11:10,560
to give you that that uh level of uh

00:11:09,440 --> 00:11:13,839
high performance there

00:11:10,560 --> 00:11:16,959
dino and the command line is

00:11:13,839 --> 00:11:18,560
a full set of development tools um

00:11:16,959 --> 00:11:20,560
and i think this is one of the areas

00:11:18,560 --> 00:11:24,160
that we've continued to increase

00:11:20,560 --> 00:11:28,399
uh uh the the capability there um

00:11:24,160 --> 00:11:30,079
and so you can uh dino info gives you

00:11:28,399 --> 00:11:32,000
all the information about the program

00:11:30,079 --> 00:11:35,519
that you're running

00:11:32,000 --> 00:11:38,720
uh you know install will install

00:11:35,519 --> 00:11:40,720
a script as a shell command um bundle

00:11:38,720 --> 00:11:42,000
will generate a single js file with all

00:11:40,720 --> 00:11:44,160
of your dependencies

00:11:42,000 --> 00:11:45,760
uh cache will go ahead and pre-fetch all

00:11:44,160 --> 00:11:47,680
of the stuff

00:11:45,760 --> 00:11:49,200
that you need and and save it in the

00:11:47,680 --> 00:11:52,720
cache um

00:11:49,200 --> 00:11:54,720
and uh completions will generate your

00:11:52,720 --> 00:11:56,480
shell completions and we've got a rapple

00:11:54,720 --> 00:11:58,399
and it can upgrade itself

00:11:56,480 --> 00:11:59,680
and the types as i mentioned before will

00:11:58,399 --> 00:12:02,720
print out the runtime

00:11:59,680 --> 00:12:06,079
type library uh and

00:12:02,720 --> 00:12:09,200
it has a formatter built in uh it

00:12:06,079 --> 00:12:12,480
has a fairly basic test

00:12:09,200 --> 00:12:13,279
harness built in as well too plus you

00:12:12,480 --> 00:12:16,639
can get sort of

00:12:13,279 --> 00:12:19,279
live dock generation of of code

00:12:16,639 --> 00:12:20,399
which it's still unstable but it's it's

00:12:19,279 --> 00:12:23,839
available there is

00:12:20,399 --> 00:12:26,399
is the the dinar lint

00:12:23,839 --> 00:12:28,079
will go ahead and give you sort of a

00:12:26,399 --> 00:12:30,079
sensible defaults of

00:12:28,079 --> 00:12:32,000
of linting rules for that now some of

00:12:30,079 --> 00:12:32,720
the things that we still would like to

00:12:32,000 --> 00:12:35,760
do

00:12:32,720 --> 00:12:37,519
particularly that you know compile so

00:12:35,760 --> 00:12:39,360
that you can generate a single binary

00:12:37,519 --> 00:12:41,360
distributable

00:12:39,360 --> 00:12:42,480
for a code sort of one step beyond the

00:12:41,360 --> 00:12:45,680
bundle

00:12:42,480 --> 00:12:46,320
and then the dino ast abstract syntax

00:12:45,680 --> 00:12:49,920
tree so

00:12:46,320 --> 00:12:52,560
internally we end up parsing

00:12:49,920 --> 00:12:53,839
javascript and typescript into that

00:12:52,560 --> 00:12:55,760
abstract syntax tree

00:12:53,839 --> 00:12:57,279
um but there's a lot of potential

00:12:55,760 --> 00:13:00,240
utility um

00:12:57,279 --> 00:13:01,440
uh within the community to be able to do

00:13:00,240 --> 00:13:04,320
uh more complex

00:13:01,440 --> 00:13:05,120
uh uh types of transforms and and that

00:13:04,320 --> 00:13:07,200
sort of thing

00:13:05,120 --> 00:13:08,320
um so we'd like to make that available

00:13:07,200 --> 00:13:10,959
as well um

00:13:08,320 --> 00:13:12,000
so i think as i was saying before that

00:13:10,959 --> 00:13:15,760
one of the biggest

00:13:12,000 --> 00:13:18,800
uh challenges that um we've had is been

00:13:15,760 --> 00:13:19,279
in the need to try to get typescript to

00:13:18,800 --> 00:13:22,320
be

00:13:19,279 --> 00:13:26,079
as frictionless as

00:13:22,320 --> 00:13:26,880
possible in uh compared to javascript

00:13:26,079 --> 00:13:31,200
right

00:13:26,880 --> 00:13:31,680
and so when we did the 1.0 announcement

00:13:31,200 --> 00:13:33,600
um

00:13:31,680 --> 00:13:34,800
it caused a bit of ruckus and noise in

00:13:33,600 --> 00:13:36,720
there that um

00:13:34,800 --> 00:13:38,959
there was a sort of call to action to

00:13:36,720 --> 00:13:41,440
move typescript into rust

00:13:38,959 --> 00:13:43,440
um and i think that was probably a

00:13:41,440 --> 00:13:46,480
little bit oversimplified um

00:13:43,440 --> 00:13:48,959
of of what that meant and and so after

00:13:46,480 --> 00:13:51,600
that announcement um i

00:13:48,959 --> 00:13:52,160
i i ended up sort of uh drawing up a

00:13:51,600 --> 00:13:55,519
roadmap

00:13:52,160 --> 00:13:58,639
of you know how i saw us

00:13:55,519 --> 00:14:01,040
doing more and more in in rust um

00:13:58,639 --> 00:14:03,199
and over the last few months we've

00:14:01,040 --> 00:14:06,720
started to chip away at that

00:14:03,199 --> 00:14:07,360
um and um it's it's really sort of

00:14:06,720 --> 00:14:10,880
improved

00:14:07,360 --> 00:14:13,920
uh things quite a bit um uh in there and

00:14:10,880 --> 00:14:15,120
is sort of proven out that um while the

00:14:13,920 --> 00:14:18,000
typescript compiler

00:14:15,120 --> 00:14:18,800
being written in typescript um it makes

00:14:18,000 --> 00:14:22,000
a lot of sense

00:14:18,800 --> 00:14:25,360
for the development of typescript

00:14:22,000 --> 00:14:27,839
there's some really heavy lifting

00:14:25,360 --> 00:14:29,519
that can be done much more efficiently

00:14:27,839 --> 00:14:32,880
within

00:14:29,519 --> 00:14:35,760
rust um and so i think um

00:14:32,880 --> 00:14:37,120
it's it's it's a good uh bit to take

00:14:35,760 --> 00:14:39,600
that heavy lifting and

00:14:37,120 --> 00:14:41,440
and move that into rust and and

00:14:39,600 --> 00:14:42,079
effectively have a better user

00:14:41,440 --> 00:14:44,959
experience

00:14:42,079 --> 00:14:46,560
uh for uh everybody using dino and using

00:14:44,959 --> 00:14:48,000
typescript under dna

00:14:46,560 --> 00:14:51,360
some of the things that we've done is is

00:14:48,000 --> 00:14:55,279
the entire dependency graph

00:14:51,360 --> 00:14:58,959
is done in rost um and then supplied

00:14:55,279 --> 00:15:00,240
to the typescript compiler as a sort of

00:14:58,959 --> 00:15:02,480
pre-digested

00:15:00,240 --> 00:15:04,399
situation now the typescript compiler

00:15:02,480 --> 00:15:06,000
still goes ahead and parses it

00:15:04,399 --> 00:15:07,680
and and figures out those dependencies

00:15:06,000 --> 00:15:08,639
but we're able to resolve all of those

00:15:07,680 --> 00:15:11,839
dependencies

00:15:08,639 --> 00:15:12,160
uh gather any remote modules have that

00:15:11,839 --> 00:15:16,160
all

00:15:12,160 --> 00:15:19,199
ready uh and warmed up um before

00:15:16,160 --> 00:15:20,079
we have to invoke the the the typescript

00:15:19,199 --> 00:15:22,639
compiler

00:15:20,079 --> 00:15:24,079
um and then probably the one of the

00:15:22,639 --> 00:15:24,880
biggest things which i'll talk a little

00:15:24,079 --> 00:15:26,720
bit more

00:15:24,880 --> 00:15:28,480
on the next slide is is that we

00:15:26,720 --> 00:15:30,959
implemented a a no

00:15:28,480 --> 00:15:31,839
check option so we bypass type checking

00:15:30,959 --> 00:15:35,199
and essentially

00:15:31,839 --> 00:15:37,680
um do all of the uh

00:15:35,199 --> 00:15:39,680
type stripping for lack of a better term

00:15:37,680 --> 00:15:40,000
and module transformation the typescript

00:15:39,680 --> 00:15:44,959
to

00:15:40,000 --> 00:15:47,199
javascript in rust without having to

00:15:44,959 --> 00:15:49,120
spin up the the typescript compiler so

00:15:47,199 --> 00:15:53,519
one of the things that

00:15:49,120 --> 00:15:55,519
because we saw a real improvement there

00:15:53,519 --> 00:15:56,800
one of the things that we thought about

00:15:55,519 --> 00:15:58,480
doing which i think is

00:15:56,800 --> 00:16:00,639
is something that we still want to

00:15:58,480 --> 00:16:02,720
heavily pursue is is to

00:16:00,639 --> 00:16:03,759
go ahead and do all that parse and

00:16:02,720 --> 00:16:06,839
transform

00:16:03,759 --> 00:16:10,480
um and uh

00:16:06,839 --> 00:16:13,759
effectively met within uh rust

00:16:10,480 --> 00:16:14,639
using the you know go ahead and do that

00:16:13,759 --> 00:16:17,600
ast

00:16:14,639 --> 00:16:19,920
feed that abstract syntax tree uh to the

00:16:17,600 --> 00:16:24,000
typescript compiler in a format that it

00:16:19,920 --> 00:16:25,440
can understand and then effectively

00:16:24,000 --> 00:16:27,120
just do type checking within the

00:16:25,440 --> 00:16:30,240
typescript compiler

00:16:27,120 --> 00:16:32,639
um so you know kind of the final step

00:16:30,240 --> 00:16:34,560
of of you know moving typescript into

00:16:32,639 --> 00:16:35,519
rust would be to do the type checking in

00:16:34,560 --> 00:16:38,240
rust now

00:16:35,519 --> 00:16:38,720
um this is something that i just don't

00:16:38,240 --> 00:16:42,000
think

00:16:38,720 --> 00:16:44,320
is gonna be effective um

00:16:42,000 --> 00:16:45,199
so one you know that actual type

00:16:44,320 --> 00:16:48,839
checking isn't

00:16:45,199 --> 00:16:51,519
as sort of heavy lifting

00:16:48,839 --> 00:16:53,199
as uh per se the the parsing and the

00:16:51,519 --> 00:16:55,680
emitting is which you know is

00:16:53,199 --> 00:16:56,480
is something that can be well optimized

00:16:55,680 --> 00:16:59,519
in rus

00:16:56,480 --> 00:17:00,880
um there's a lot of higher order of

00:16:59,519 --> 00:17:04,079
capability a lot of

00:17:00,880 --> 00:17:06,480
memory management um and and

00:17:04,079 --> 00:17:07,919
i you know it would be really uh

00:17:06,480 --> 00:17:09,919
complicated to do

00:17:07,919 --> 00:17:10,959
and given the fact that uh all the

00:17:09,919 --> 00:17:12,640
innovation

00:17:10,959 --> 00:17:14,079
and and for good reason the typescript

00:17:12,640 --> 00:17:16,400
core team is is not gonna

00:17:14,079 --> 00:17:17,679
stop writing the typescript compiler and

00:17:16,400 --> 00:17:20,400
typescript

00:17:17,679 --> 00:17:21,520
so it would be effectively trying to

00:17:20,400 --> 00:17:23,439
play keep up with

00:17:21,520 --> 00:17:24,959
what is really phenomenally great

00:17:23,439 --> 00:17:27,439
innovation that's going on

00:17:24,959 --> 00:17:28,160
uh in there even to this day um you know

00:17:27,439 --> 00:17:31,520
with the

00:17:28,160 --> 00:17:33,760
stuff that in 4.1 like

00:17:31,520 --> 00:17:35,520
the recursive types that uh that are

00:17:33,760 --> 00:17:37,919
coming and potentially the

00:17:35,520 --> 00:17:39,200
uh typing of the string literals um

00:17:37,919 --> 00:17:40,640
that's being worked on at the moment

00:17:39,200 --> 00:17:43,919
which are you know phenomenal

00:17:40,640 --> 00:17:44,320
uh uh ways of uh making things more type

00:17:43,919 --> 00:17:47,760
safe

00:17:44,320 --> 00:17:49,120
um are really really would be

00:17:47,760 --> 00:17:52,559
challenging to try to

00:17:49,120 --> 00:17:54,640
reinvent that back in in rust so um

00:17:52,559 --> 00:17:55,679
i don't think we'll ever get there and

00:17:54,640 --> 00:17:58,000
it looks like there's

00:17:55,679 --> 00:17:58,720
enough ability to uh increase

00:17:58,000 --> 00:18:02,000
performance

00:17:58,720 --> 00:18:04,720
um without having to do that so

00:18:02,000 --> 00:18:05,919
um as i said the we have a benchmark uh

00:18:04,720 --> 00:18:08,799
for

00:18:05,919 --> 00:18:10,160
what we gauge uh the typescript

00:18:08,799 --> 00:18:14,000
compilation so we have

00:18:10,160 --> 00:18:17,520
um a program that's about 20 modules

00:18:14,000 --> 00:18:20,720
of typescript that

00:18:17,520 --> 00:18:21,919
we run through in our benchmarking to go

00:18:20,720 --> 00:18:25,600
ahead and do a full

00:18:21,919 --> 00:18:27,200
type check um and this is a

00:18:25,600 --> 00:18:28,720
situation where it's never seen these

00:18:27,200 --> 00:18:31,679
modules before so

00:18:28,720 --> 00:18:32,880
um we don't have any incremental build

00:18:31,679 --> 00:18:35,120
information which is

00:18:32,880 --> 00:18:35,919
another way that we try to speed up the

00:18:35,120 --> 00:18:37,840
compilation

00:18:35,919 --> 00:18:39,200
you know doing that full type check uh

00:18:37,840 --> 00:18:41,120
it takes about 1800

00:18:39,200 --> 00:18:43,280
milliseconds to do that which you know

00:18:41,120 --> 00:18:45,520
when you think about 1.8 seconds

00:18:43,280 --> 00:18:47,200
that's a fairly decent amount of time to

00:18:45,520 --> 00:18:48,640
spin things up um

00:18:47,200 --> 00:18:50,559
and would be something that we really

00:18:48,640 --> 00:18:52,000
would want to reduce uh so we

00:18:50,559 --> 00:18:55,360
implemented the no check

00:18:52,000 --> 00:18:58,799
just using the uh um uh

00:18:55,360 --> 00:19:02,000
the um transpile uh only

00:18:58,799 --> 00:19:04,000
uh capabilities of uh tsc um

00:19:02,000 --> 00:19:05,200
and that brought it down to about 1100

00:19:04,000 --> 00:19:07,440
milliseconds so a

00:19:05,200 --> 00:19:08,400
really big improvement um definitely

00:19:07,440 --> 00:19:11,679
worth the effort

00:19:08,400 --> 00:19:14,720
to be able to do that but then um uh we

00:19:11,679 --> 00:19:17,840
have been using in rust uh a

00:19:14,720 --> 00:19:21,600
a a project called swc um

00:19:17,840 --> 00:19:24,559
which um is how the it's the thing that

00:19:21,600 --> 00:19:24,559
powers the linting

00:19:24,960 --> 00:19:28,880
partly part is the formatting there's

00:19:27,039 --> 00:19:32,400
another library

00:19:28,880 --> 00:19:33,919
on top of that and you can see that when

00:19:32,400 --> 00:19:36,160
we

00:19:33,919 --> 00:19:37,200
implemented that type stripping just in

00:19:36,160 --> 00:19:39,280
swc

00:19:37,200 --> 00:19:40,559
we went down to about 75 milliseconds so

00:19:39,280 --> 00:19:44,240
that's a huge

00:19:40,559 --> 00:19:47,280
uh improvement in speed there because um

00:19:44,240 --> 00:19:48,400
the the you know the the type checking

00:19:47,280 --> 00:19:51,280
bit of it is

00:19:48,400 --> 00:19:52,559
is probably only a small part of the

00:19:51,280 --> 00:19:54,160
whole thing and then there's still the

00:19:52,559 --> 00:19:56,720
emit and the transform and the

00:19:54,160 --> 00:19:58,960
parson all of that sort of stuff so um

00:19:56,720 --> 00:20:02,240
there's an opportunity there hopefully

00:19:58,960 --> 00:20:05,280
when we look at the ast that

00:20:02,240 --> 00:20:07,760
we'd be somewhere around

00:20:05,280 --> 00:20:09,200
you know uh well eighteen hundred so

00:20:07,760 --> 00:20:12,400
it's

00:20:09,200 --> 00:20:12,880
700 seven eight hundred milliseconds

00:20:12,400 --> 00:20:15,919
right

00:20:12,880 --> 00:20:19,120
so it's still uh uh significant uh

00:20:15,919 --> 00:20:20,720
better uh than uh even that with

00:20:19,120 --> 00:20:22,640
with the full type checking at that

00:20:20,720 --> 00:20:24,720
point right so that's that would be

00:20:22,640 --> 00:20:26,559
uh an impressive feat to be able to

00:20:24,720 --> 00:20:28,159
accomplish um and we're still looking at

00:20:26,559 --> 00:20:29,440
what other ways that we can speed up

00:20:28,159 --> 00:20:32,480
that process right

00:20:29,440 --> 00:20:34,320
um so you know um there's there's been a

00:20:32,480 --> 00:20:35,039
lot of work to bring that down it used

00:20:34,320 --> 00:20:36,720
to be

00:20:35,039 --> 00:20:38,400
quite a bit more even with the full type

00:20:36,720 --> 00:20:41,600
check

00:20:38,400 --> 00:20:45,360
okay so um time for a demo

00:20:41,600 --> 00:20:48,320
of dino now and

00:20:45,360 --> 00:20:49,200
so personally i like to use visual

00:20:48,320 --> 00:20:52,640
studio code

00:20:49,200 --> 00:20:53,200
um and there is an official uh plugin

00:20:52,640 --> 00:20:56,400
for

00:20:53,200 --> 00:21:00,799
uh uh dino um in there

00:20:56,400 --> 00:21:03,520
uh available um uh this was

00:21:00,799 --> 00:21:04,400
had a bit of a bumpy ride because um

00:21:03,520 --> 00:21:07,520
there

00:21:04,400 --> 00:21:09,919
were the contributors to it um uh

00:21:07,520 --> 00:21:11,280
who sort of started it off haven't had

00:21:09,919 --> 00:21:12,320
the time to dedicate to be able to

00:21:11,280 --> 00:21:14,320
maintain it and

00:21:12,320 --> 00:21:15,520
you know some things changed and we ran

00:21:14,320 --> 00:21:17,840
into some issues so

00:21:15,520 --> 00:21:19,360
um the current version uh is a lot more

00:21:17,840 --> 00:21:20,799
stable than the other version we still

00:21:19,360 --> 00:21:23,919
have a lot of work to do to

00:21:20,799 --> 00:21:27,039
really um bring that uh up to uh

00:21:23,919 --> 00:21:29,760
full speed and and get that um really

00:21:27,039 --> 00:21:30,159
ticking along well um but at least it's

00:21:29,760 --> 00:21:33,039
it's

00:21:30,159 --> 00:21:33,760
sort of functional uh again and that can

00:21:33,039 --> 00:21:36,960
give you

00:21:33,760 --> 00:21:38,320
a pretty well-rounded uh uh experience

00:21:36,960 --> 00:21:41,600
within uh dino

00:21:38,320 --> 00:21:43,520
uh uh while using visual studio code so

00:21:41,600 --> 00:21:44,000
um essentially what i've got here is

00:21:43,520 --> 00:21:46,159
i've got a little

00:21:44,000 --> 00:21:48,320
static web server one of the other

00:21:46,159 --> 00:21:51,760
things that i did relatively early on

00:21:48,320 --> 00:21:53,200
uh in my uh journey with dino is is i

00:21:51,760 --> 00:21:55,039
created a

00:21:53,200 --> 00:21:56,640
a middleware framework that's sort of

00:21:55,039 --> 00:21:58,960
like express

00:21:56,640 --> 00:22:00,480
or uh koa if you're familiar with those

00:21:58,960 --> 00:22:03,120
um that provide

00:22:00,480 --> 00:22:03,760
um uh essentially middleware web server

00:22:03,120 --> 00:22:05,919
framework

00:22:03,760 --> 00:22:06,880
um so i've got a little static website

00:22:05,919 --> 00:22:11,200
here um

00:22:06,880 --> 00:22:14,799
and i have uh the um

00:22:11,200 --> 00:22:16,640
the web server that um that i'm going to

00:22:14,799 --> 00:22:19,679
run here in a moment

00:22:16,640 --> 00:22:23,600
and so dino has

00:22:19,679 --> 00:22:26,000
a fairly uh rich standard library

00:22:23,600 --> 00:22:27,840
and so i'm going to be importing a few

00:22:26,000 --> 00:22:31,039
things from here to be able to give us

00:22:27,840 --> 00:22:34,159
a nice pretty console output uh and

00:22:31,039 --> 00:22:34,480
uh uh going to bring in an assert and

00:22:34,159 --> 00:22:38,840
here

00:22:34,480 --> 00:22:42,159
just to uh to do some assertion type

00:22:38,840 --> 00:22:46,159
uh parts of the code and then

00:22:42,159 --> 00:22:49,440
the the framework here of oak

00:22:46,159 --> 00:22:52,559
is the the web framework that will be

00:22:49,440 --> 00:22:55,679
sort of co-like uh that will

00:22:52,559 --> 00:22:55,919
start up so go ahead and i import those

00:22:55,679 --> 00:22:58,640
and

00:22:55,919 --> 00:23:00,960
as you can see those are just urls um

00:22:58,640 --> 00:23:01,679
because i don't have the files cached at

00:23:00,960 --> 00:23:04,000
the moment

00:23:01,679 --> 00:23:05,600
um i'm getting errors in my editor

00:23:04,000 --> 00:23:09,280
saying i don't know where that is

00:23:05,600 --> 00:23:12,720
um i can't find it um

00:23:09,280 --> 00:23:15,200
and um but um

00:23:12,720 --> 00:23:16,960
once we download those then these will

00:23:15,200 --> 00:23:19,679
sort of appear and type check

00:23:16,960 --> 00:23:21,120
appropriately uh so we go ahead and

00:23:19,679 --> 00:23:23,600
create the application i've

00:23:21,120 --> 00:23:25,600
created a little middleware handler here

00:23:23,600 --> 00:23:28,799
that deals with errors

00:23:25,600 --> 00:23:29,280
a logger which will log out the response

00:23:28,799 --> 00:23:31,840
time

00:23:29,280 --> 00:23:34,240
for things and something that adds the

00:23:31,840 --> 00:23:36,400
response time to the headers for it

00:23:34,240 --> 00:23:37,760
and then where we're essentially serving

00:23:36,400 --> 00:23:40,000
up the static

00:23:37,760 --> 00:23:41,279
content in library and then one of the

00:23:40,000 --> 00:23:42,799
things that

00:23:41,279 --> 00:23:44,400
as i mentioned before dino you know

00:23:42,799 --> 00:23:46,159
tries to use the web

00:23:44,400 --> 00:23:47,679
apis as much as possible one of the

00:23:46,159 --> 00:23:48,000
things that i've tried to do in oak as

00:23:47,679 --> 00:23:51,120
well

00:23:48,000 --> 00:23:54,799
is continue to extend that model and so

00:23:51,120 --> 00:23:57,840
we are using sort of the dino uh

00:23:54,799 --> 00:24:00,559
event listener capabilities here um

00:23:57,840 --> 00:24:01,520
or the event model uh that's part of the

00:24:00,559 --> 00:24:03,760
web platform

00:24:01,520 --> 00:24:04,880
and so when the server starts up you go

00:24:03,760 --> 00:24:08,000
ahead and listen

00:24:04,880 --> 00:24:09,120
for the event just as you would in a

00:24:08,000 --> 00:24:13,360
browser

00:24:09,120 --> 00:24:15,919
and then we have our

00:24:13,360 --> 00:24:18,400
async await we have top level await in

00:24:15,919 --> 00:24:20,400
dino we've had that for quite a while um

00:24:18,400 --> 00:24:22,159
and we can go ahead and and start

00:24:20,400 --> 00:24:24,240
listening to the application

00:24:22,159 --> 00:24:25,360
uh which will uh the middleware will

00:24:24,240 --> 00:24:28,559
respond to uh

00:24:25,360 --> 00:24:32,000
all of the events that it receives so

00:24:28,559 --> 00:24:34,400
um so if i start this i'm going to do

00:24:32,000 --> 00:24:35,760
dino run and then as i mentioned before

00:24:34,400 --> 00:24:37,279
we have to

00:24:35,760 --> 00:24:39,840
give it all of the permissions that it

00:24:37,279 --> 00:24:41,840
needs so we need to allow it to

00:24:39,840 --> 00:24:43,600
go to the network and we need to allow

00:24:41,840 --> 00:24:46,559
it to read

00:24:43,600 --> 00:24:47,760
that bit now i could you know narrow

00:24:46,559 --> 00:24:51,520
what the ability i have

00:24:47,760 --> 00:24:55,120
read down to adjust the static

00:24:51,520 --> 00:24:55,520
content directory but um for purposes

00:24:55,120 --> 00:24:58,080
here

00:24:55,520 --> 00:24:58,720
it's too hard to remember to what the

00:24:58,080 --> 00:25:01,600
type so

00:24:58,720 --> 00:25:02,720
i'm to head and just invoke our main

00:25:01,600 --> 00:25:04,559
module here

00:25:02,720 --> 00:25:07,440
and as you can see it's going to start

00:25:04,559 --> 00:25:10,960
to download everything from

00:25:07,440 --> 00:25:14,559
from the internet and it's now doing

00:25:10,960 --> 00:25:17,360
a full type check on the server

00:25:14,559 --> 00:25:19,039
and once it's done that it'll go ahead

00:25:17,360 --> 00:25:21,360
and execute the program and we'll get a

00:25:19,039 --> 00:25:23,440
message log to the console here

00:25:21,360 --> 00:25:24,720
a bit slower today than normal there we

00:25:23,440 --> 00:25:27,919
go

00:25:24,720 --> 00:25:28,559
and we're listening on there and if we

00:25:27,919 --> 00:25:30,640
go here

00:25:28,559 --> 00:25:31,840
uh i will go ahead and reload it and you

00:25:30,640 --> 00:25:33,520
can see um

00:25:31,840 --> 00:25:35,840
that we've got our little website and if

00:25:33,520 --> 00:25:38,080
we go back uh you can see that

00:25:35,840 --> 00:25:38,880
uh i've got my little pretty console

00:25:38,080 --> 00:25:42,159
logging

00:25:38,880 --> 00:25:45,840
going on there as well too and

00:25:42,159 --> 00:25:49,039
uh so um you know really straightforward

00:25:45,840 --> 00:25:51,279
uh the only real code on

00:25:49,039 --> 00:25:51,279
uh

00:25:52,159 --> 00:26:00,400
there we go the only real code on here

00:25:55,760 --> 00:26:00,400
is the one point

00:26:00,480 --> 00:26:02,880
ls

00:26:03,520 --> 00:26:09,840
is a 1.8 k server

00:26:06,799 --> 00:26:12,080
yes everything else is is on github

00:26:09,840 --> 00:26:13,200
in this case um and there's a package

00:26:12,080 --> 00:26:16,480
registry called

00:26:13,200 --> 00:26:19,120
dino dot land slash axe which

00:26:16,480 --> 00:26:20,159
uh is the probably the biggest and most

00:26:19,120 --> 00:26:21,679
popular

00:26:20,159 --> 00:26:23,520
registry at the moment there's a few

00:26:21,679 --> 00:26:26,559
others

00:26:23,520 --> 00:26:29,919
which make it easy to to be able to um

00:26:26,559 --> 00:26:31,840
identify and discover that uh that the

00:26:29,919 --> 00:26:33,520
modules and that sort of thing as i was

00:26:31,840 --> 00:26:34,480
saying before too is you know it's a

00:26:33,520 --> 00:26:37,520
self-contained

00:26:34,480 --> 00:26:39,919
uh situation so i could go ahead and

00:26:37,520 --> 00:26:43,279
format my files if i wanted to if i

00:26:39,919 --> 00:26:43,279
wanted to find out about

00:26:43,600 --> 00:26:49,039
the server.ts and

00:26:47,200 --> 00:26:50,240
you know what information i have about

00:26:49,039 --> 00:26:53,919
it i

00:26:50,240 --> 00:26:57,679
can sit here and do

00:26:53,919 --> 00:27:00,720
dino info

00:26:57,679 --> 00:27:03,919
um and you will

00:27:00,720 --> 00:27:04,720
go ahead and get all of the dependency

00:27:03,919 --> 00:27:06,480
tree

00:27:04,720 --> 00:27:07,760
including the um

00:27:06,480 --> 00:27:10,799
[Music]

00:27:07,760 --> 00:27:14,080
file sizes and and that sort of thing

00:27:10,799 --> 00:27:16,640
63 unique dependencies it's 500 and

00:27:14,080 --> 00:27:18,480
it's a you know half a meg worth of code

00:27:16,640 --> 00:27:22,320
um and you can see all of that here

00:27:18,480 --> 00:27:24,159
uh in in uh dino info um

00:27:22,320 --> 00:27:25,679
this is actually going to be the next uh

00:27:24,159 --> 00:27:27,279
release of dino i'm working off of a

00:27:25,679 --> 00:27:30,240
master branch at the moment

00:27:27,279 --> 00:27:31,120
um so i think this will end up probably

00:27:30,240 --> 00:27:34,080
this week

00:27:31,120 --> 00:27:35,039
uh so by the time you see this uh it

00:27:34,080 --> 00:27:37,600
should be

00:27:35,039 --> 00:27:38,640
the version that's available which

00:27:37,600 --> 00:27:41,360
includes all of that

00:27:38,640 --> 00:27:42,640
new information about the sizes of the

00:27:41,360 --> 00:27:44,240
dependencies

00:27:42,640 --> 00:27:46,240
but you can get that full dependency

00:27:44,240 --> 00:27:48,880
tree and be able to figure out

00:27:46,240 --> 00:27:50,799
you know where if i click on this in vs

00:27:48,880 --> 00:27:53,919
code it will go ahead and open

00:27:50,799 --> 00:27:57,600
up uh and there's this

00:27:53,919 --> 00:27:58,159
sort of online view of of modules when

00:27:57,600 --> 00:28:01,520
you

00:27:58,159 --> 00:28:04,799
request the module server via browser

00:28:01,520 --> 00:28:08,399
so let's say i wanted to

00:28:04,799 --> 00:28:08,960
um find out about oak because i can't

00:28:08,399 --> 00:28:13,600
remember

00:28:08,960 --> 00:28:16,159
exactly what uh the apis were

00:28:13,600 --> 00:28:17,440
and so i'm going to go ahead and ask

00:28:16,159 --> 00:28:21,200
dino to document

00:28:17,440 --> 00:28:24,960
up that module for there and

00:28:21,200 --> 00:28:27,520
i can go through here and see all of the

00:28:24,960 --> 00:28:29,120
documentation

00:28:27,520 --> 00:28:30,799
and i could drill down to a particular

00:28:29,120 --> 00:28:34,640
module

00:28:30,799 --> 00:28:36,320
and see that as well but this provides

00:28:34,640 --> 00:28:38,000
all of the information

00:28:36,320 --> 00:28:40,320
of documentation on the command line

00:28:38,000 --> 00:28:42,799
without having to

00:28:40,320 --> 00:28:44,480
go refer to anything separately or even

00:28:42,799 --> 00:28:46,720
go and browse the code

00:28:44,480 --> 00:28:47,760
if if i don't want to one of the

00:28:46,720 --> 00:28:50,080
features that

00:28:47,760 --> 00:28:51,600
i'm really passionate about that i put a

00:28:50,080 --> 00:28:54,880
lot of work into

00:28:51,600 --> 00:28:58,080
personally is the the bundle capability

00:28:54,880 --> 00:29:01,200
and this will you give us

00:28:58,080 --> 00:29:03,200
the effectively take all those

00:29:01,200 --> 00:29:06,000
dependencies bundle them up um

00:29:03,200 --> 00:29:06,960
and create a single sort of uh

00:29:06,000 --> 00:29:09,919
distributable

00:29:06,960 --> 00:29:10,480
uh if we wanted to uh without having to

00:29:09,919 --> 00:29:14,640
get

00:29:10,480 --> 00:29:16,159
other people to to be able to

00:29:14,640 --> 00:29:17,679
fetch all of the dependencies off the

00:29:16,159 --> 00:29:19,840
network and all that sort of stuff so

00:29:17,679 --> 00:29:21,360
i'm going to go ahead and create take

00:29:19,840 --> 00:29:22,720
our server dts

00:29:21,360 --> 00:29:24,640
and go ahead and generate it as

00:29:22,720 --> 00:29:26,159
javascript

00:29:24,640 --> 00:29:27,840
the other advantage of this is is that

00:29:26,159 --> 00:29:29,039
it's going to do all that full type

00:29:27,840 --> 00:29:31,200
checking as well too

00:29:29,039 --> 00:29:32,320
and what's going to be admitted is

00:29:31,200 --> 00:29:36,480
something that we know

00:29:32,320 --> 00:29:38,320
um was at the bundle time you know was

00:29:36,480 --> 00:29:40,080
as type safe and typescript as as

00:29:38,320 --> 00:29:41,520
possible

00:29:40,080 --> 00:29:43,279
which is partly why it takes a little

00:29:41,520 --> 00:29:46,720
bit longer to do that and now

00:29:43,279 --> 00:29:47,360
we have the the server.js and if we go

00:29:46,720 --> 00:29:49,279
ahead

00:29:47,360 --> 00:29:52,159
and run that and we have to give it the

00:29:49,279 --> 00:29:52,159
same permissions

00:29:53,640 --> 00:29:58,559
server.js um and you can see the startup

00:29:56,960 --> 00:30:00,159
there was significantly faster because

00:29:58,559 --> 00:30:01,440
it's only dealing with a single uh

00:30:00,159 --> 00:30:04,480
javascript module

00:30:01,440 --> 00:30:06,640
um uh we can go back to

00:30:04,480 --> 00:30:08,000
our webpage and we can see that we're

00:30:06,640 --> 00:30:10,720
effectively running the

00:30:08,000 --> 00:30:13,120
same code here again same login to the

00:30:10,720 --> 00:30:13,120
console

00:30:13,279 --> 00:30:19,120
okay so um

00:30:16,559 --> 00:30:20,720
a little bit about the future um i i

00:30:19,120 --> 00:30:23,840
think um

00:30:20,720 --> 00:30:25,600
so one of the things that um i'm

00:30:23,840 --> 00:30:26,159
personally working on at the moment is

00:30:25,600 --> 00:30:29,279
that

00:30:26,159 --> 00:30:32,159
um is is really trying to

00:30:29,279 --> 00:30:34,159
get that experience of blending

00:30:32,159 --> 00:30:37,440
javascript and typescript uh

00:30:34,159 --> 00:30:39,679
and trying to get typescript to be um as

00:30:37,440 --> 00:30:40,720
frictionless to use as javascript within

00:30:39,679 --> 00:30:42,960
dino um

00:30:40,720 --> 00:30:44,320
and and really trying to get that whole

00:30:42,960 --> 00:30:46,640
journey as as

00:30:44,320 --> 00:30:47,919
as rugged in there one of those things

00:30:46,640 --> 00:30:50,000
is that we're gonna

00:30:47,919 --> 00:30:51,679
have to revisit the whole pipeline of

00:30:50,000 --> 00:30:54,159
how we compile things

00:30:51,679 --> 00:30:55,360
um through the dependency analysis and

00:30:54,159 --> 00:30:57,279
that

00:30:55,360 --> 00:30:58,480
uh and then i said you know we want to

00:30:57,279 --> 00:31:01,200
be able to at least

00:30:58,480 --> 00:31:02,720
start to look at what it would take to

00:31:01,200 --> 00:31:05,120
transform

00:31:02,720 --> 00:31:07,200
the a generate the ast and rust and

00:31:05,120 --> 00:31:10,000
transform that and and send that into

00:31:07,200 --> 00:31:10,799
the typescript compiler um to be able to

00:31:10,000 --> 00:31:13,600
to

00:31:10,799 --> 00:31:14,720
handle that and offload that whole um

00:31:13,600 --> 00:31:18,559
parse load

00:31:14,720 --> 00:31:20,799
and transform um uh uh

00:31:18,559 --> 00:31:22,559
uh with out of typescript and

00:31:20,799 --> 00:31:24,559
essentially create that as uh

00:31:22,559 --> 00:31:25,600
you use the typescript compiler just as

00:31:24,559 --> 00:31:28,640
a type checker

00:31:25,600 --> 00:31:30,559
um and that should really

00:31:28,640 --> 00:31:33,120
hopefully you know try to get it so that

00:31:30,559 --> 00:31:34,880
it's there isn't that sort of tax on on

00:31:33,120 --> 00:31:35,360
using typescript within uh do you know

00:31:34,880 --> 00:31:38,480
which

00:31:35,360 --> 00:31:40,720
there is at the moment um i think um

00:31:38,480 --> 00:31:42,880
one of the other things that we're doing

00:31:40,720 --> 00:31:44,559
is trying to

00:31:42,880 --> 00:31:46,480
make it a little bit easier from the

00:31:44,559 --> 00:31:49,760
internals of dna to

00:31:46,480 --> 00:31:51,440
be able to allow people to pick and

00:31:49,760 --> 00:31:52,720
choose the parts that they need right

00:31:51,440 --> 00:31:55,360
you know the cli

00:31:52,720 --> 00:31:56,399
is probably great for a lot of folks um

00:31:55,360 --> 00:31:58,880
but it isn't

00:31:56,399 --> 00:32:00,480
uh necessarily you know one size fits

00:31:58,880 --> 00:32:03,840
all you know part

00:32:00,480 --> 00:32:06,480
of the whole dino

00:32:03,840 --> 00:32:07,840
vision is is to you know try to enable

00:32:06,480 --> 00:32:11,120
the community as a whole

00:32:07,840 --> 00:32:13,679
um rusty v8 which is you know part of

00:32:11,120 --> 00:32:16,159
the denalin project are the bindings uh

00:32:13,679 --> 00:32:17,679
in rust to the v8 engine

00:32:16,159 --> 00:32:19,279
with a few abstractions in there that

00:32:17,679 --> 00:32:23,039
make it a bit easier to

00:32:19,279 --> 00:32:25,120
be able to really integrate v8 into rust

00:32:23,039 --> 00:32:26,480
really easily there's a lot of folks

00:32:25,120 --> 00:32:28,000
that are really interested in being able

00:32:26,480 --> 00:32:29,440
to do stuff with that without

00:32:28,000 --> 00:32:30,799
you know having to deal with that one of

00:32:29,440 --> 00:32:31,039
the other things that we're looking at

00:32:30,799 --> 00:32:33,279
is

00:32:31,039 --> 00:32:36,399
is what we call op crates um you know

00:32:33,279 --> 00:32:40,000
which is essentially making the cli

00:32:36,399 --> 00:32:42,720
um a bit more pluggable uh as far as the

00:32:40,000 --> 00:32:45,200
sort of run time javascript capabilities

00:32:42,720 --> 00:32:47,279
that are there so the web apis

00:32:45,200 --> 00:32:48,320
you don't like streams and that they we

00:32:47,279 --> 00:32:51,120
want them to be

00:32:48,320 --> 00:32:52,240
sort of separate rust crates um that you

00:32:51,120 --> 00:32:54,480
can then bring in

00:32:52,240 --> 00:32:56,640
to an environment and be able to enrich

00:32:54,480 --> 00:32:57,279
a javascript environment without having

00:32:56,640 --> 00:33:00,000
to

00:32:57,279 --> 00:33:00,799
um you know sort of have this monolithic

00:33:00,000 --> 00:33:03,840
uh repo

00:33:00,799 --> 00:33:07,440
of of uh javascript code uh

00:33:03,840 --> 00:33:10,480
to to generate those runtime uh features

00:33:07,440 --> 00:33:13,600
um i think we're still

00:33:10,480 --> 00:33:17,039
on that path of journey of the

00:33:13,600 --> 00:33:19,679
the being able to seamlessly sort of

00:33:17,039 --> 00:33:21,039
migrate from uh javascript and

00:33:19,679 --> 00:33:23,679
typescript to

00:33:21,039 --> 00:33:24,880
be able to incorporate things like uh

00:33:23,679 --> 00:33:28,640
rust plugins or

00:33:24,880 --> 00:33:29,120
or web assembly um and and i think that

00:33:28,640 --> 00:33:32,640
that

00:33:29,120 --> 00:33:33,600
that needs a a bit more uh work in that

00:33:32,640 --> 00:33:36,320
sort of thing because

00:33:33,600 --> 00:33:38,240
you know there's that being able to

00:33:36,320 --> 00:33:38,960
evolve your code over a period of time

00:33:38,240 --> 00:33:42,240
is there

00:33:38,960 --> 00:33:43,440
um and i i think we

00:33:42,240 --> 00:33:46,000
you know looking at that whole

00:33:43,440 --> 00:33:48,640
development experience um

00:33:46,000 --> 00:33:50,880
and and trying to really round that out

00:33:48,640 --> 00:33:53,360
and mature that as a whole is

00:33:50,880 --> 00:33:56,159
another thing uh in the future um beyond

00:33:53,360 --> 00:33:58,960
that i think i think it's um

00:33:56,159 --> 00:34:00,159
we're still learning about dino um and

00:33:58,960 --> 00:34:03,440
we're still learning about

00:34:00,159 --> 00:34:07,440
uh this whole bit and where needs are

00:34:03,440 --> 00:34:09,119
um and so you know um

00:34:07,440 --> 00:34:11,440
you know dino is an open collaboration

00:34:09,119 --> 00:34:14,480
right um we've got 32 people

00:34:11,440 --> 00:34:17,839
um who have uh 10 or plus

00:34:14,480 --> 00:34:19,119
uh commits uh to it um and that number

00:34:17,839 --> 00:34:23,839
is obviously

00:34:19,119 --> 00:34:25,919
is growing um and you know that

00:34:23,839 --> 00:34:27,359
we really you know that sort of

00:34:25,919 --> 00:34:30,000
diversity of

00:34:27,359 --> 00:34:30,639
of thought and opinion is is something

00:34:30,000 --> 00:34:32,960
that helps

00:34:30,639 --> 00:34:34,560
keep dino uh fresh and that sort of

00:34:32,960 --> 00:34:37,200
thing on the other hand

00:34:34,560 --> 00:34:37,599
you know it is really complicated so if

00:34:37,200 --> 00:34:39,040
you're

00:34:37,599 --> 00:34:41,040
you know if you want to contribute and

00:34:39,040 --> 00:34:42,720
you're early uh in

00:34:41,040 --> 00:34:44,879
in the process and you're not an expert

00:34:42,720 --> 00:34:48,159
at rust or you're not an expert at

00:34:44,879 --> 00:34:50,879
um uh

00:34:48,159 --> 00:34:51,599
you know v8 and you know some of these

00:34:50,879 --> 00:34:53,440
other things

00:34:51,599 --> 00:34:54,639
it may be a little bit harder to to

00:34:53,440 --> 00:34:56,639
figure out um

00:34:54,639 --> 00:34:57,680
things where it can be contributed now

00:34:56,639 --> 00:35:00,880
on the other hand

00:34:57,680 --> 00:35:04,880
um you know the documentation

00:35:00,880 --> 00:35:07,680
um the uh the editor plug-ins you know

00:35:04,880 --> 00:35:08,000
these are some things that uh definitely

00:35:07,680 --> 00:35:11,520
need

00:35:08,000 --> 00:35:13,520
love and attention um uh and uh um

00:35:11,520 --> 00:35:15,359
are a great way to start out on that

00:35:13,520 --> 00:35:17,440
journey of um

00:35:15,359 --> 00:35:18,400
uh of of contributing but it would be

00:35:17,440 --> 00:35:21,599
great to get

00:35:18,400 --> 00:35:25,119
um a more diverse uh

00:35:21,599 --> 00:35:26,560
group of folks uh contributing um and um

00:35:25,119 --> 00:35:28,800
uh that is a little bit more

00:35:26,560 --> 00:35:31,280
representative of the sort of community

00:35:28,800 --> 00:35:34,480
that we serve so

00:35:31,280 --> 00:35:34,880
by all means um feel free to to jump on

00:35:34,480 --> 00:35:37,520
board

00:35:34,880 --> 00:35:38,320
and that's sort of the end of the talk

00:35:37,520 --> 00:35:41,760
um

00:35:38,320 --> 00:35:41,760
feel free to reach out to me

00:35:42,000 --> 00:35:48,720
on twitter or other forums be glad to

00:35:46,240 --> 00:35:50,800
chat and have any sort of conversations

00:35:48,720 --> 00:35:59,839
and really appreciate your time and

00:35:50,800 --> 00:35:59,839
enjoy the rest of the conference

00:36:04,290 --> 00:36:09,409
[Music]

00:36:09,440 --> 00:36:13,040
thank you for the amazing talk it was

00:36:11,920 --> 00:36:14,800
awesome

00:36:13,040 --> 00:36:16,800
it's really really good to hear about

00:36:14,800 --> 00:36:17,920
like everything that dino is going to be

00:36:16,800 --> 00:36:18,960
doing in the future it's really really

00:36:17,920 --> 00:36:20,720
cool um

00:36:18,960 --> 00:36:21,920
thanks so much for joining us for it and

00:36:20,720 --> 00:36:23,280
thank you so much for staying up so late

00:36:21,920 --> 00:36:26,480
what time is it there

00:36:23,280 --> 00:36:27,920
uh 11 15 in the evening okay we'll try

00:36:26,480 --> 00:36:30,160
and keep this fairly short then so i can

00:36:27,920 --> 00:36:31,839
let you go

00:36:30,160 --> 00:36:33,119
um so we've got a bunch of questions

00:36:31,839 --> 00:36:35,280
coming in anyone in the chat feel free

00:36:33,119 --> 00:36:38,079
to drop your questions in um

00:36:35,280 --> 00:36:38,480
and we'll put them to kittson um i'm

00:36:38,079 --> 00:36:40,240
gonna be

00:36:38,480 --> 00:36:41,440
i'm gonna be greedy and ask my question

00:36:40,240 --> 00:36:42,160
first because i'm always curious about

00:36:41,440 --> 00:36:45,760
that

00:36:42,160 --> 00:36:47,280
um so you spoke a bit about like

00:36:45,760 --> 00:36:48,960
when dino got first announced people

00:36:47,280 --> 00:36:50,079
were like oh dino is going to replace

00:36:48,960 --> 00:36:52,480
node and take over

00:36:50,079 --> 00:36:53,280
and you suggested that wasn't really the

00:36:52,480 --> 00:36:56,400
aim

00:36:53,280 --> 00:37:00,000
where do you see it ending up

00:36:56,400 --> 00:37:03,520
um i mean i

00:37:00,000 --> 00:37:03,920
i mean we we have less browsers than we

00:37:03,520 --> 00:37:06,880
did

00:37:03,920 --> 00:37:07,520
a bit ago right but you know we've had

00:37:06,880 --> 00:37:11,200
you know

00:37:07,520 --> 00:37:14,480
you know firefox and chrome um and

00:37:11,200 --> 00:37:17,839
you know that that competition um uh

00:37:14,480 --> 00:37:19,599
allows both you know platforms to to to

00:37:17,839 --> 00:37:21,040
to grow and and that sort of thing right

00:37:19,599 --> 00:37:23,920
so you know

00:37:21,040 --> 00:37:24,960
worst case scenario is is you know you

00:37:23,920 --> 00:37:28,079
know becomes

00:37:24,960 --> 00:37:29,760
a a part of that ecosystem of of uh

00:37:28,079 --> 00:37:33,119
javascript runtimes

00:37:29,760 --> 00:37:33,520
um that makes the whole of the ecosystem

00:37:33,119 --> 00:37:37,599
better

00:37:33,520 --> 00:37:39,920
right um so you know what i think

00:37:37,599 --> 00:37:40,960
you know we we've got some slightly

00:37:39,920 --> 00:37:44,640
different focuses

00:37:40,960 --> 00:37:45,359
um uh then that and again we don't we

00:37:44,640 --> 00:37:47,599
don't have

00:37:45,359 --> 00:37:48,560
have you know sort of the ten plus years

00:37:47,599 --> 00:37:51,760
of legacy

00:37:48,560 --> 00:37:53,680
um that no js has to sort of drag around

00:37:51,760 --> 00:37:54,400
with it which is is liberating but of

00:37:53,680 --> 00:37:56,880
course that's

00:37:54,400 --> 00:37:57,520
you know a time you know you know in a

00:37:56,880 --> 00:38:00,800
few years

00:37:57,520 --> 00:38:03,440
it it it'll be the same there um but

00:38:00,800 --> 00:38:04,800
um you know i the focus is a little bit

00:38:03,440 --> 00:38:07,040
different i mean particularly

00:38:04,800 --> 00:38:08,160
you know treating typescript as a

00:38:07,040 --> 00:38:10,400
first-class

00:38:08,160 --> 00:38:11,599
language um is a little bit different

00:38:10,400 --> 00:38:13,520
and so i think people will

00:38:11,599 --> 00:38:15,200
pick and choose you know much as you

00:38:13,520 --> 00:38:18,560
pick and choose between

00:38:15,200 --> 00:38:19,920
you know firefox and and chrome right um

00:38:18,560 --> 00:38:21,680
you know for the thing that that meets

00:38:19,920 --> 00:38:23,440
your needs a bit better

00:38:21,680 --> 00:38:25,520
makes sense yeah i also think it's

00:38:23,440 --> 00:38:29,359
interesting i'm curious if

00:38:25,520 --> 00:38:33,280
node changes in reaction to dino because

00:38:29,359 --> 00:38:35,280
as far as as far as i understand dino's

00:38:33,280 --> 00:38:37,680
lots of what dino does differently is

00:38:35,280 --> 00:38:39,520
based off of the mistakes ryan felt

00:38:37,680 --> 00:38:40,720
he made or were made at the beginning of

00:38:39,520 --> 00:38:43,440
beginning of node

00:38:40,720 --> 00:38:44,640
um and like an approach to fixing that

00:38:43,440 --> 00:38:46,560
which is which is kind of nice i'm

00:38:44,640 --> 00:38:48,079
curious if um

00:38:46,560 --> 00:38:50,079
how do you know maybe shaped node as

00:38:48,079 --> 00:38:53,440
well as the two go forward

00:38:50,079 --> 00:38:54,640
um there's already been

00:38:53,440 --> 00:38:56,480
and it continues to be a decent amount

00:38:54,640 --> 00:38:56,880
of collaboration right you know so a lot

00:38:56,480 --> 00:39:00,320
of

00:38:56,880 --> 00:39:03,440
uh folks involved with node.js

00:39:00,320 --> 00:39:04,240
um have had input um and and shared

00:39:03,440 --> 00:39:05,680
their thoughts and

00:39:04,240 --> 00:39:07,359
and there's a decent amount of

00:39:05,680 --> 00:39:10,880
collaboration i mean one of the

00:39:07,359 --> 00:39:14,000
things recently that um uh and i know uh

00:39:10,880 --> 00:39:16,240
guy bedford's part of the panel uh

00:39:14,000 --> 00:39:17,520
here you know he's he's been suggesting

00:39:16,240 --> 00:39:20,480
that you know we

00:39:17,520 --> 00:39:20,960
um focus on some things that are um uh

00:39:20,480 --> 00:39:23,760
on

00:39:20,960 --> 00:39:24,240
synchronizing uh around some things that

00:39:23,760 --> 00:39:27,200
um

00:39:24,240 --> 00:39:28,880
are synergistic that only runtimes you

00:39:27,200 --> 00:39:30,480
know worry about that aren't applicable

00:39:28,880 --> 00:39:32,640
to browser right you know so that

00:39:30,480 --> 00:39:34,720
we kind of have that uh front because

00:39:32,640 --> 00:39:36,079
the browser platform is never going to

00:39:34,720 --> 00:39:38,160
address it right and it's

00:39:36,079 --> 00:39:40,160
not something that the ecmascript is

00:39:38,160 --> 00:39:42,240
going to address either right

00:39:40,160 --> 00:39:43,839
so i you know i think there are those

00:39:42,240 --> 00:39:46,000
things where um

00:39:43,839 --> 00:39:46,880
one we can help keep each other honest

00:39:46,000 --> 00:39:49,200
but we can also

00:39:46,880 --> 00:39:50,960
you know challenge each other i i think

00:39:49,200 --> 00:39:51,920
we've i've had a lot of collaboration

00:39:50,960 --> 00:39:55,119
with some of the folks

00:39:51,920 --> 00:39:55,920
uh on um because we started to adopt the

00:39:55,119 --> 00:39:59,520
dumb

00:39:55,920 --> 00:40:01,839
event uh model into dino um

00:39:59,520 --> 00:40:02,880
and sort of fleshed that out and node.js

00:40:01,839 --> 00:40:04,880
has been looking

00:40:02,880 --> 00:40:06,960
at doing the same thing right and

00:40:04,880 --> 00:40:08,880
they're they're headed down that

00:40:06,960 --> 00:40:10,079
path as well and you know we've shared

00:40:08,880 --> 00:40:12,560
you know battles and

00:40:10,079 --> 00:40:13,920
frustrations with uh the browser

00:40:12,560 --> 00:40:15,680
standards right

00:40:13,920 --> 00:40:17,359
that's really cool that's good to hear

00:40:15,680 --> 00:40:19,520
um so a question from from the audience

00:40:17,359 --> 00:40:21,680
here um you say dino tries to

00:40:19,520 --> 00:40:23,119
uh stay as close to the web browser

00:40:21,680 --> 00:40:23,680
standards in its implementation as

00:40:23,119 --> 00:40:27,119
possible

00:40:23,680 --> 00:40:28,160
where does it deviate um the most of the

00:40:27,119 --> 00:40:29,599
deviation is

00:40:28,160 --> 00:40:31,119
is simply in the stuff it doesn't

00:40:29,599 --> 00:40:32,160
implement right so when we try to

00:40:31,119 --> 00:40:34,240
implement the browser

00:40:32,160 --> 00:40:36,400
standard we try to hold this true to

00:40:34,240 --> 00:40:38,800
that on the other hand there are some

00:40:36,400 --> 00:40:42,160
really strange edge cases

00:40:38,800 --> 00:40:43,680
um that where they just don't make sense

00:40:42,160 --> 00:40:46,720
for a browser so the

00:40:43,680 --> 00:40:49,440
web standard didn't ever address it so

00:40:46,720 --> 00:40:50,240
we we kind of try to be really careful

00:40:49,440 --> 00:40:53,280
about that

00:40:50,240 --> 00:40:54,800
for example fetch um we're still working

00:40:53,280 --> 00:40:55,440
on trying to make it a little bit more

00:40:54,800 --> 00:40:58,560
compliant

00:40:55,440 --> 00:41:01,599
it varies in a couple strange ways but

00:40:58,560 --> 00:41:04,000
uh most of that again has to do with how

00:41:01,599 --> 00:41:07,520
you know you're in a server environment

00:41:04,000 --> 00:41:10,319
versus a browser environment right

00:41:07,520 --> 00:41:12,000
nice and one from luciano uh do you see

00:41:10,319 --> 00:41:14,240
a future where node.js applications

00:41:12,000 --> 00:41:17,680
could be ported or integrated easily

00:41:14,240 --> 00:41:20,079
with dino yeah so there is a part of

00:41:17,680 --> 00:41:22,400
so one of the things that dino has is a

00:41:20,079 --> 00:41:25,200
standard module library

00:41:22,400 --> 00:41:26,480
and probably the most active part of the

00:41:25,200 --> 00:41:29,520
standard module library

00:41:26,480 --> 00:41:32,160
is the node compatibility

00:41:29,520 --> 00:41:35,119
stuff right um so it continues to be

00:41:32,160 --> 00:41:38,720
fleshed out but um you know porting

00:41:35,119 --> 00:41:41,119
that code over is um

00:41:38,720 --> 00:41:41,920
is possible to a degree it's still a

00:41:41,119 --> 00:41:45,040
little bit

00:41:41,920 --> 00:41:49,040
hard to do um but um

00:41:45,040 --> 00:41:51,119
i mean is there's so much of

00:41:49,040 --> 00:41:53,200
um the node.js ecosystem that's common

00:41:51,119 --> 00:41:56,400
js modules and typescript

00:41:53,200 --> 00:41:58,720
doesn't or dino doesn't support those

00:41:56,400 --> 00:41:59,760
natively right it only supports esm

00:41:58,720 --> 00:42:01,760
natively

00:41:59,760 --> 00:42:03,520
um and that's probably like one of the

00:42:01,760 --> 00:42:05,760
biggest challenge even though there's

00:42:03,520 --> 00:42:07,440
ways to to get around that right and

00:42:05,760 --> 00:42:10,880
there's a require

00:42:07,440 --> 00:42:13,200
polyfiller shim uh in uh you know to

00:42:10,880 --> 00:42:14,720
to make that porting a little bit easier

00:42:13,200 --> 00:42:16,480
all right cool nice

00:42:14,720 --> 00:42:18,160
um and i think kind of hand-in-hand with

00:42:16,480 --> 00:42:19,760
that the thing

00:42:18,160 --> 00:42:22,560
everyone seems to ask whenever i've

00:42:19,760 --> 00:42:24,319
mentioned dido is immediately like

00:42:22,560 --> 00:42:26,480
can i still use all the like npm things

00:42:24,319 --> 00:42:28,240
i normally use um and so adam asks

00:42:26,480 --> 00:42:29,599
are we going to see an emergent npm

00:42:28,240 --> 00:42:30,480
equivalent as a single standard

00:42:29,599 --> 00:42:32,160
repository

00:42:30,480 --> 00:42:33,760
or their mechanisms or architectures

00:42:32,160 --> 00:42:36,240
architectures in place to make this

00:42:33,760 --> 00:42:38,960
ecosystem more diverse

00:42:36,240 --> 00:42:40,160
yeah so i mean one of the fundamental

00:42:38,960 --> 00:42:42,319
things is is

00:42:40,160 --> 00:42:44,160
the dino runtime is completely

00:42:42,319 --> 00:42:46,800
unopinionated about where it

00:42:44,160 --> 00:42:48,800
retrieves its modules from right it it's

00:42:46,800 --> 00:42:51,200
you know they're just urls right

00:42:48,800 --> 00:42:53,839
um and that was specifically built in

00:42:51,200 --> 00:42:56,160
you know dinoland

00:42:53,839 --> 00:42:57,040
x is you know probably the biggest

00:42:56,160 --> 00:43:00,160
collection

00:42:57,040 --> 00:43:03,760
um but there is a nest um

00:43:00,160 --> 00:43:05,839
is another significant collection of

00:43:03,760 --> 00:43:06,880
of that so there's there's diversity

00:43:05,839 --> 00:43:08,960
there um

00:43:06,880 --> 00:43:09,920
i think the the other half of it which

00:43:08,960 --> 00:43:14,240
was the

00:43:09,920 --> 00:43:15,520
you know yeah the the sort of

00:43:14,240 --> 00:43:17,839
because there's another part to that

00:43:15,520 --> 00:43:19,890
question that you were kind of asking um

00:43:17,839 --> 00:43:22,079
uh so it was more about um

00:43:19,890 --> 00:43:25,200
[Music]

00:43:22,079 --> 00:43:26,800
there's one one part was around uh

00:43:25,200 --> 00:43:28,640
being able to use multiple sources and

00:43:26,800 --> 00:43:30,640
the other part was around

00:43:28,640 --> 00:43:33,040
being able to use npm modules straight i

00:43:30,640 --> 00:43:34,800
guess oh npm module straight yeah

00:43:33,040 --> 00:43:36,240
so the the biggest things is there

00:43:34,800 --> 00:43:38,319
there's a couple solutions out there and

00:43:36,240 --> 00:43:40,000
this is the benefit of not having a tied

00:43:38,319 --> 00:43:43,599
to a particular repository

00:43:40,000 --> 00:43:46,480
right is is both um pica cdn

00:43:43,599 --> 00:43:47,680
um which uh hosts a pre-bundled uh

00:43:46,480 --> 00:43:51,040
modules of

00:43:47,680 --> 00:43:54,160
of esm uh modules you can grab

00:43:51,040 --> 00:43:58,000
you know so if your npm package

00:43:54,160 --> 00:44:01,599
um has esm uh

00:43:58,000 --> 00:44:04,560
modules in it um then um

00:44:01,599 --> 00:44:07,119
pica cdn can grab those in fact um it

00:44:04,560 --> 00:44:09,280
also blends in the typescript types

00:44:07,119 --> 00:44:10,560
as well and it has a header that it

00:44:09,280 --> 00:44:13,440
sends um so

00:44:10,560 --> 00:44:14,319
when you you know um consume stuff from

00:44:13,440 --> 00:44:16,960
uh

00:44:14,319 --> 00:44:18,560
pikacdn um you'll you you'll

00:44:16,960 --> 00:44:19,680
automatically get the type information

00:44:18,560 --> 00:44:22,000
if it's available

00:44:19,680 --> 00:44:22,800
as well um and then the other big one

00:44:22,000 --> 00:44:26,240
that's out there

00:44:22,800 --> 00:44:29,359
is jspm.io um

00:44:26,240 --> 00:44:29,839
serves up a lot of modules digested in a

00:44:29,359 --> 00:44:31,520
way so

00:44:29,839 --> 00:44:33,680
if it's ready for the browser it's

00:44:31,520 --> 00:44:35,760
basically ready for for dino

00:44:33,680 --> 00:44:37,760
that's cool and it looks like in the

00:44:35,760 --> 00:44:40,800
examples you're using oak

00:44:37,760 --> 00:44:41,280
they were using the url like the path

00:44:40,800 --> 00:44:44,400
name

00:44:41,280 --> 00:44:46,400
for versioning is that is that like best

00:44:44,400 --> 00:44:49,440
practice going forward with dino or

00:44:46,400 --> 00:44:53,280
like do you have a plan for yeah so

00:44:49,440 --> 00:44:55,760
so uh dinoland acts um

00:44:53,280 --> 00:44:56,400
and all the modules on there your get

00:44:55,760 --> 00:45:00,240
tags

00:44:56,400 --> 00:45:03,520
um become the uh

00:45:00,240 --> 00:45:04,400
version uh so to speak uh in the url

00:45:03,520 --> 00:45:07,200
right um

00:45:04,400 --> 00:45:08,480
and you you basically uh refer to

00:45:07,200 --> 00:45:12,880
everything by a get tag

00:45:08,480 --> 00:45:16,240
um if you um leave out the

00:45:12,880 --> 00:45:19,680
the get tag uh dinolandx will grab

00:45:16,240 --> 00:45:23,200
the last or the most recent tag um

00:45:19,680 --> 00:45:26,640
and and serve that up with um but yeah

00:45:23,200 --> 00:45:27,520
so you know tagging putting the version

00:45:26,640 --> 00:45:30,640
in the url is

00:45:27,520 --> 00:45:32,720
is sort of the idiomatic way of of uh

00:45:30,640 --> 00:45:34,000
dealing with version semantic versioning

00:45:32,720 --> 00:45:36,160
in dino

00:45:34,000 --> 00:45:37,200
that's really cool one last question

00:45:36,160 --> 00:45:37,839
before we get back to the rest of the

00:45:37,200 --> 00:45:39,119
conference

00:45:37,839 --> 00:45:41,040
do you know anyone using dino in

00:45:39,119 --> 00:45:44,319
production today

00:45:41,040 --> 00:45:46,960
uh i i i don't

00:45:44,319 --> 00:45:47,520
spend enough time looking at it i i know

00:45:46,960 --> 00:45:50,000
there are

00:45:47,520 --> 00:45:51,359
uh some instances of it um and i think

00:45:50,000 --> 00:45:53,920
particularly

00:45:51,359 --> 00:45:54,960
i see a lot of chatter from uh there you

00:45:53,920 --> 00:45:58,160
can run

00:45:54,960 --> 00:46:01,520
stuff both uh verse uh

00:45:58,160 --> 00:46:04,400
versal um microsoft azure

00:46:01,520 --> 00:46:05,359
um have you sort of uh you can run

00:46:04,400 --> 00:46:08,720
functionless

00:46:05,359 --> 00:46:11,599
stuff in both yeah on dino um

00:46:08,720 --> 00:46:12,000
and so i'm sure there's people out there

00:46:11,599 --> 00:46:15,680
are

00:46:12,000 --> 00:46:17,839
and i'm just not sure fair enough yeah

00:46:15,680 --> 00:46:18,880
well look thank you so much um if people

00:46:17,839 --> 00:46:19,680
have the questions where's the best

00:46:18,880 --> 00:46:22,560
place to find you

00:46:19,680 --> 00:46:24,400
twitter is twitter the place to go yeah

00:46:22,560 --> 00:46:25,200
easy kitson k on twitter is probably the

00:46:24,400 --> 00:46:26,480
easiest yeah

00:46:25,200 --> 00:46:28,640
amazing kiss and thank you so much for

00:46:26,480 --> 00:46:30,079
your talking your time um okay

00:46:28,640 --> 00:46:31,920
and i'm excited i'm excited about the

00:46:30,079 --> 00:46:43,839
future of dino

00:46:31,920 --> 00:46:43,839
thank you very much have a good evening

00:46:44,880 --> 00:46:46,960

YouTube URL: https://www.youtube.com/watch?v=2eRyZpX4qvI


