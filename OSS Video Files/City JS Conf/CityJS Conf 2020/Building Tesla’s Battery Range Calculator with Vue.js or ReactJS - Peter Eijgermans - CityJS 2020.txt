Title: Building Tesla’s Battery Range Calculator with Vue.js or ReactJS - Peter Eijgermans - CityJS 2020
Publication date: 2020-10-03
Playlist: CityJS Conf 2020
Description: 
	Which language do you like: ReactJS or Vue.js? During this talk I walk through the process of building a Tesla’s Battery Range Calculator with ReactJS and Vue.js. I compare React and VueJS with each other in terms of syntax, speed of development (number of lines of code & number of files), readability, maintainability, performance etc.

Bio
"Peter is an adventurous and passionate CodeSmith at Ordina Netherlands. 
He likes to travel around the world with his bike. Always seeking for the unexpected and unknown.
For his job he tries out the latest techniques and frameworks.
He loves to share his experience by speaking at conferences over the World and writing for the Dutch Java magazine and DZone.
He believes that you as the front-end developer are the spider in the web to bring the user, the team and the product together."

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:18,060 --> 00:00:22,800
[Music]

00:00:22,080 --> 00:00:25,279
hello

00:00:22,800 --> 00:00:26,560
good afternoon i'm peter adaman from

00:00:25,279 --> 00:00:29,119
ardita

00:00:26,560 --> 00:00:31,359
and i worked also for the department's

00:00:29,119 --> 00:00:35,760
jtag and jshoots

00:00:31,359 --> 00:00:38,879
jtex is specialized in java and jsust

00:00:35,760 --> 00:00:41,360
specialized in front-end technology

00:00:38,879 --> 00:00:44,320
i'm talking about yeah the difference

00:00:41,360 --> 00:00:47,840
between view and react

00:00:44,320 --> 00:00:48,719
and let's start with it now my agenda of

00:00:47,840 --> 00:00:50,160
today is

00:00:48,719 --> 00:00:52,000
building a tesla between range

00:00:50,160 --> 00:00:55,920
calculator

00:00:52,000 --> 00:00:59,039
dashboard and i want to show you

00:00:55,920 --> 00:01:02,000
that in two two seconds

00:00:59,039 --> 00:01:03,760
i explained this dashboard in view and

00:01:02,000 --> 00:01:06,320
then explain this dashboard in

00:01:03,760 --> 00:01:08,479
react building tesla passive range

00:01:06,320 --> 00:01:11,520
calculator with view

00:01:08,479 --> 00:01:12,880
here you see the the dashboard when you

00:01:11,520 --> 00:01:15,600
see in the middle

00:01:12,880 --> 00:01:17,280
the car and underneath you see the

00:01:15,600 --> 00:01:20,400
models

00:01:17,280 --> 00:01:23,840
and the range how far you can drive

00:01:20,400 --> 00:01:27,280
with that battery uh you can change

00:01:23,840 --> 00:01:29,360
those ranges with the speed

00:01:27,280 --> 00:01:30,400
and it depends also on the outside

00:01:29,360 --> 00:01:32,640
temperature

00:01:30,400 --> 00:01:33,840
and the wheel size how far you can drive

00:01:32,640 --> 00:01:36,159
you have also a

00:01:33,840 --> 00:01:38,560
climate button in middle for your air

00:01:36,159 --> 00:01:42,320
conditioning and the heat

00:01:38,560 --> 00:01:46,000
which also influences the range

00:01:42,320 --> 00:01:48,799
of your battery we make use of

00:01:46,000 --> 00:01:50,320
a tesla battery service in the back end

00:01:48,799 --> 00:01:53,360
as is nothing more than a

00:01:50,320 --> 00:01:56,399
lookup table where you see that i

00:01:53,360 --> 00:02:00,079
in the top i return the

00:01:56,399 --> 00:02:00,880
for example model 60 and when you select

00:02:00,079 --> 00:02:05,360
a wheelchair

00:02:00,880 --> 00:02:09,119
19 and we select the climate is on

00:02:05,360 --> 00:02:13,280
and speed is 45 and the temperature

00:02:09,119 --> 00:02:15,760
is -10 you can drive 224

00:02:13,280 --> 00:02:17,280
miles now to get started with the

00:02:15,760 --> 00:02:19,920
workshop

00:02:17,280 --> 00:02:21,040
you can also download and clone this

00:02:19,920 --> 00:02:24,239
project

00:02:21,040 --> 00:02:27,360
from hit up view

00:02:24,239 --> 00:02:29,120
is component based you can integrate it

00:02:27,360 --> 00:02:32,879
very easily with angular

00:02:29,120 --> 00:02:36,800
and react and it is small

00:02:32,879 --> 00:02:39,280
and compact it is 60 kilobytes big

00:02:36,800 --> 00:02:41,200
uh in comparison with react that is 100

00:02:39,280 --> 00:02:44,239
kilobytes big

00:02:41,200 --> 00:02:47,440
and not a big difference we can

00:02:44,239 --> 00:02:48,959
say that the performance is also the

00:02:47,440 --> 00:02:51,519
same

00:02:48,959 --> 00:02:52,239
and what i want to say is that uh

00:02:51,519 --> 00:02:55,519
angular

00:02:52,239 --> 00:02:56,239
is much bigger than if you it is 500

00:02:55,519 --> 00:02:59,840
kilobytes

00:02:56,239 --> 00:03:02,640
big nowadays to start up

00:02:59,840 --> 00:03:04,319
a few you have also start with the root

00:03:02,640 --> 00:03:06,640
view instance

00:03:04,319 --> 00:03:07,920
with new view you can start a new view

00:03:06,640 --> 00:03:09,760
instance

00:03:07,920 --> 00:03:11,840
i'll show you now a very simple

00:03:09,760 --> 00:03:14,640
application how you create such a

00:03:11,840 --> 00:03:15,280
basic view application here you start

00:03:14,640 --> 00:03:18,560
the new

00:03:15,280 --> 00:03:22,000
view instance in the bottom

00:03:18,560 --> 00:03:25,040
and you defined a defined in la

00:03:22,000 --> 00:03:26,000
el section where you define the name of

00:03:25,040 --> 00:03:29,040
the

00:03:26,000 --> 00:03:32,319
of the application and it refers to the

00:03:29,040 --> 00:03:34,480
diff id app in the template

00:03:32,319 --> 00:03:35,440
in the data section of this view

00:03:34,480 --> 00:03:39,360
instance

00:03:35,440 --> 00:03:43,040
you define your model data your state

00:03:39,360 --> 00:03:45,280
and the state is message

00:03:43,040 --> 00:03:46,400
state variable message as the value

00:03:45,280 --> 00:03:49,040
hello view

00:03:46,400 --> 00:03:50,239
and it will be rendered in the template

00:03:49,040 --> 00:03:53,360
and you it will show

00:03:50,239 --> 00:03:56,239
view you can bind this value

00:03:53,360 --> 00:03:57,519
via interpolation this is interpolation

00:03:56,239 --> 00:04:00,640
you use

00:03:57,519 --> 00:04:03,200
double curly brackets and okay

00:04:00,640 --> 00:04:04,959
view is component based and bases the

00:04:03,200 --> 00:04:07,439
components adds logic to your

00:04:04,959 --> 00:04:08,400
to your html to your into your dom

00:04:07,439 --> 00:04:11,120
elements

00:04:08,400 --> 00:04:12,159
and you can split up your application in

00:04:11,120 --> 00:04:14,799
very little

00:04:12,159 --> 00:04:16,959
parts so again so you can build your

00:04:14,799 --> 00:04:19,519
application quite easily

00:04:16,959 --> 00:04:20,959
area at the top you have the the app

00:04:19,519 --> 00:04:24,160
container

00:04:20,959 --> 00:04:26,080
and that is the top container of the

00:04:24,160 --> 00:04:29,199
the main container the main component of

00:04:26,080 --> 00:04:32,639
your application and we split it up

00:04:29,199 --> 00:04:35,120
in other components we have a component

00:04:32,639 --> 00:04:36,880
we have a tesla battery component

00:04:35,120 --> 00:04:38,400
and the telematic component is a

00:04:36,880 --> 00:04:40,840
component which does

00:04:38,400 --> 00:04:43,280
which do the heavy lifting of

00:04:40,840 --> 00:04:46,800
application yeah it will do the

00:04:43,280 --> 00:04:51,120
logic and it will do the will

00:04:46,800 --> 00:04:54,400
manage the state of the application

00:04:51,120 --> 00:04:58,639
the teslabeco application also

00:04:54,400 --> 00:05:00,720
passes data to the child components like

00:04:58,639 --> 00:05:02,400
like tesla car component and tesla's

00:05:00,720 --> 00:05:05,680
dust component

00:05:02,400 --> 00:05:08,800
the ui flip application is

00:05:05,680 --> 00:05:10,639
represented by a component stream it's

00:05:08,800 --> 00:05:13,520
the same structure i showed you

00:05:10,639 --> 00:05:14,720
in this image so in the top we have an

00:05:13,520 --> 00:05:17,759
app

00:05:14,720 --> 00:05:18,960
component and underneath we have a tesla

00:05:17,759 --> 00:05:21,759
header

00:05:18,960 --> 00:05:22,960
and a tesla battery component which is a

00:05:21,759 --> 00:05:24,880
container component

00:05:22,960 --> 00:05:26,560
call it also and contain components

00:05:24,880 --> 00:05:29,600
always do the

00:05:26,560 --> 00:05:31,199
logic and manages the state of the

00:05:29,600 --> 00:05:33,840
application

00:05:31,199 --> 00:05:36,160
the tesla car component is a

00:05:33,840 --> 00:05:39,680
presentational component

00:05:36,160 --> 00:05:41,759
and and there's a stats counter also

00:05:39,680 --> 00:05:43,520
they these are the child components of

00:05:41,759 --> 00:05:45,280
the tesla battery

00:05:43,520 --> 00:05:47,520
and these components these

00:05:45,280 --> 00:05:50,160
presentational components are only

00:05:47,520 --> 00:05:51,280
for presenting something on your screen

00:05:50,160 --> 00:05:54,639
there are dump

00:05:51,280 --> 00:05:56,639
components uh here you you see

00:05:54,639 --> 00:05:58,800
the same structure again but that then

00:05:56,639 --> 00:06:02,080
in our application

00:05:58,800 --> 00:06:03,360
structure you recognize the structure in

00:06:02,080 --> 00:06:06,560
the component section

00:06:03,360 --> 00:06:09,440
i define here the the dump

00:06:06,560 --> 00:06:11,360
or the presentational components tesla

00:06:09,440 --> 00:06:14,639
car tesla climate

00:06:11,360 --> 00:06:16,080
and i also define the tesla battery

00:06:14,639 --> 00:06:17,680
component

00:06:16,080 --> 00:06:19,600
which does the heavy lifting of the

00:06:17,680 --> 00:06:22,960
application

00:06:19,600 --> 00:06:27,039
in the tesla battery service we manage

00:06:22,960 --> 00:06:28,720
the data of the of the application

00:06:27,039 --> 00:06:30,800
at the bottom we have also two

00:06:28,720 --> 00:06:34,240
components a few components

00:06:30,800 --> 00:06:36,319
the entry points the first component

00:06:34,240 --> 00:06:38,560
and the media as the starting point of

00:06:36,319 --> 00:06:41,360
our application

00:06:38,560 --> 00:06:43,600
the components three looks like this

00:06:41,360 --> 00:06:45,680
what the starting point is the main gs

00:06:43,600 --> 00:06:46,639
component and what does the main s

00:06:45,680 --> 00:06:50,160
component do

00:06:46,639 --> 00:06:53,520
it calls the the the first component

00:06:50,160 --> 00:06:56,319
the app view component fcv component has

00:06:53,520 --> 00:06:58,319
a child component tesla better component

00:06:56,319 --> 00:07:01,520
etc etc

00:06:58,319 --> 00:07:04,560
first start with mean js what is that

00:07:01,520 --> 00:07:06,160
many s component is the starting point

00:07:04,560 --> 00:07:08,479
of the application

00:07:06,160 --> 00:07:09,280
of the view application the main entry

00:07:08,479 --> 00:07:12,479
point it

00:07:09,280 --> 00:07:15,759
imports view and and it imparts also the

00:07:12,479 --> 00:07:18,400
app view our first component

00:07:15,759 --> 00:07:19,759
the production tip tip we can skip in

00:07:18,400 --> 00:07:22,639
the new view

00:07:19,759 --> 00:07:23,919
we make use of the ribbon root view

00:07:22,639 --> 00:07:27,120
instance

00:07:23,919 --> 00:07:30,160
to render our first component our first

00:07:27,120 --> 00:07:34,319
app component in the render

00:07:30,160 --> 00:07:37,840
and then finally this root

00:07:34,319 --> 00:07:39,840
view instance is mounted this means

00:07:37,840 --> 00:07:41,840
that the point is the point where the

00:07:39,840 --> 00:07:44,960
application started

00:07:41,840 --> 00:07:48,319
this refers to html element

00:07:44,960 --> 00:07:51,680
with the identification hashtag

00:07:48,319 --> 00:07:53,520
app in the app view component i show you

00:07:51,680 --> 00:07:56,960
the app view component

00:07:53,520 --> 00:08:00,000
it has a id app which i was talking

00:07:56,960 --> 00:08:02,960
about here the app view component has

00:08:00,000 --> 00:08:04,639
three sections the template section for

00:08:02,960 --> 00:08:07,360
viewing

00:08:04,639 --> 00:08:08,319
for the view the script section for the

00:08:07,360 --> 00:08:11,759
for the logic

00:08:08,319 --> 00:08:13,440
and a style section for styling this is

00:08:11,759 --> 00:08:15,360
in the let's start with the script

00:08:13,440 --> 00:08:18,479
section this is the

00:08:15,360 --> 00:08:21,039
part where we define our logic of our

00:08:18,479 --> 00:08:21,039
component

00:08:21,280 --> 00:08:25,599
firstly we import the tesla battery

00:08:23,199 --> 00:08:26,000
component which is a child component of

00:08:25,599 --> 00:08:29,680
the app

00:08:26,000 --> 00:08:34,479
view and we define a meeting part a logo

00:08:29,680 --> 00:08:37,680
we want to show the page and we export

00:08:34,479 --> 00:08:41,200
here the the export

00:08:37,680 --> 00:08:43,599
default section we have a few sections

00:08:41,200 --> 00:08:44,880
the name section that is the name of the

00:08:43,599 --> 00:08:47,040
component

00:08:44,880 --> 00:08:48,240
the component section we define there

00:08:47,040 --> 00:08:51,120
the

00:08:48,240 --> 00:08:52,320
child components of the app view

00:08:51,120 --> 00:08:54,560
component

00:08:52,320 --> 00:08:56,640
in this in this case what is that is the

00:08:54,560 --> 00:08:59,680
tesla battery component

00:08:56,640 --> 00:09:02,720
and in the data section we define the

00:08:59,680 --> 00:09:03,760
data in the in the model and the state

00:09:02,720 --> 00:09:08,000
of our application

00:09:03,760 --> 00:09:10,399
here we only return here our logo

00:09:08,000 --> 00:09:11,200
and we are going to render that in our

00:09:10,399 --> 00:09:13,360
template

00:09:11,200 --> 00:09:16,080
how do we render that in our template we

00:09:13,360 --> 00:09:19,680
do that with with bindings

00:09:16,080 --> 00:09:20,399
in this case we bind the logo we attach

00:09:19,680 --> 00:09:24,480
it to the

00:09:20,399 --> 00:09:27,839
image tag the image tag we attach it

00:09:24,480 --> 00:09:29,760
to the source aptitude boot source

00:09:27,839 --> 00:09:32,959
attribute of the image tag so

00:09:29,760 --> 00:09:38,000
we call this attribute

00:09:32,959 --> 00:09:40,640
this is the way how we render the logo

00:09:38,000 --> 00:09:41,519
underneath the logo we render the tesla

00:09:40,640 --> 00:09:46,720
battery

00:09:41,519 --> 00:09:49,839
component which i have already imported

00:09:46,720 --> 00:09:52,000
the component 3 consists now these

00:09:49,839 --> 00:09:53,600
parts and we are talking about tesla

00:09:52,000 --> 00:09:55,680
battery

00:09:53,600 --> 00:09:58,080
which has a lot of child components

00:09:55,680 --> 00:10:01,279
underneath and the tesla bed component

00:09:58,080 --> 00:10:03,200
provides the states in the data

00:10:01,279 --> 00:10:05,120
the properties and there's a better

00:10:03,200 --> 00:10:07,200
component when you collapse it you see

00:10:05,120 --> 00:10:09,600
that the testometer component has

00:10:07,200 --> 00:10:11,839
a name of course as a component section

00:10:09,600 --> 00:10:15,519
to define the chart components

00:10:11,839 --> 00:10:18,560
as a data section to define the state

00:10:15,519 --> 00:10:19,360
of the application computed section and

00:10:18,560 --> 00:10:22,160
we define

00:10:19,360 --> 00:10:23,519
the derivative we define the functions

00:10:22,160 --> 00:10:26,160
which are cached

00:10:23,519 --> 00:10:27,200
that means that those are the functions

00:10:26,160 --> 00:10:30,240
which only

00:10:27,200 --> 00:10:31,120
are executed when a property inside a

00:10:30,240 --> 00:10:34,560
function

00:10:31,120 --> 00:10:37,519
and dice inside those functions changes

00:10:34,560 --> 00:10:38,880
in a method section we define normal

00:10:37,519 --> 00:10:41,200
callback methods

00:10:38,880 --> 00:10:43,440
which are not cached and this is the

00:10:41,200 --> 00:10:45,680
full example of the tesla battery

00:10:43,440 --> 00:10:46,560
in the in the component section we see

00:10:45,680 --> 00:10:49,440
that we define

00:10:46,560 --> 00:10:50,640
our child components data section we

00:10:49,440 --> 00:10:53,680
define

00:10:50,640 --> 00:10:57,200
at the state state variables

00:10:53,680 --> 00:11:00,880
title tesla models variable

00:10:57,200 --> 00:11:04,880
and the tesla object which contains the

00:11:00,880 --> 00:11:07,600
user input data what the user has

00:11:04,880 --> 00:11:08,399
will select on the screen and the

00:11:07,600 --> 00:11:11,200
initial

00:11:08,399 --> 00:11:12,880
data is that speed is 55 and the initial

00:11:11,200 --> 00:11:16,959
state is

00:11:12,880 --> 00:11:19,600
temperature 20 etc in computed section

00:11:16,959 --> 00:11:20,079
i make use of the functions which are

00:11:19,600 --> 00:11:23,440
cast

00:11:20,079 --> 00:11:26,959
cached i have a models function

00:11:23,440 --> 00:11:28,720
which return the the model data the

00:11:26,959 --> 00:11:30,800
lookup table

00:11:28,720 --> 00:11:33,440
i showed you already and a stats

00:11:30,800 --> 00:11:37,120
function i return here

00:11:33,440 --> 00:11:40,720
i also define here which calculates the

00:11:37,120 --> 00:11:41,360
yeah the range the the battery you can

00:11:40,720 --> 00:11:44,640
drive

00:11:41,360 --> 00:11:46,800
how much range the battery have under

00:11:44,640 --> 00:11:48,560
under the conditions that the speed

00:11:46,800 --> 00:11:49,279
changes the temperature temperature

00:11:48,560 --> 00:11:51,360
changes and

00:11:49,279 --> 00:11:54,639
climate changes and the wheels change

00:11:51,360 --> 00:11:54,639
wheels size changes

00:11:54,720 --> 00:12:02,320
the output of this stats function

00:11:57,839 --> 00:12:06,160
is that how much mouse a model can drive

00:12:02,320 --> 00:12:06,160
under such circumstances

00:12:06,720 --> 00:12:10,000
so the output start function will be for

00:12:09,519 --> 00:12:15,839
example

00:12:10,000 --> 00:12:17,920
this model 60 can drive 267 miles

00:12:15,839 --> 00:12:20,320
this is the lookup table where we get

00:12:17,920 --> 00:12:22,480
the data from

00:12:20,320 --> 00:12:24,320
this is what i talked about already the

00:12:22,480 --> 00:12:27,360
state of the application

00:12:24,320 --> 00:12:29,760
calculating from the start function for

00:12:27,360 --> 00:12:32,000
we use that for calculating the maximum

00:12:29,760 --> 00:12:35,120
battery range per model

00:12:32,000 --> 00:12:38,560
and that tesla object is also a

00:12:35,120 --> 00:12:41,839
also a stateful state object

00:12:38,560 --> 00:12:45,680
which which contains the currently

00:12:41,839 --> 00:12:48,959
selected conditions of the user

00:12:45,680 --> 00:12:51,519
in the tesla studs component

00:12:48,959 --> 00:12:52,639
yeah let's pass properties data to the

00:12:51,519 --> 00:12:55,760
child components

00:12:52,639 --> 00:12:59,200
how do we do that we use their v bind

00:12:55,760 --> 00:13:00,079
or column or a column to pulse

00:12:59,200 --> 00:13:02,240
properties

00:13:00,079 --> 00:13:03,360
from the tesla battery to the tesla

00:13:02,240 --> 00:13:06,720
stats

00:13:03,360 --> 00:13:09,200
you see stats component

00:13:06,720 --> 00:13:10,079
here you and your i show you the tesla

00:13:09,200 --> 00:13:13,519
battery

00:13:10,079 --> 00:13:16,160
component and you see

00:13:13,519 --> 00:13:16,880
here that the name is tesla battery in

00:13:16,160 --> 00:13:19,519
the

00:13:16,880 --> 00:13:20,160
default section you see also in the

00:13:19,519 --> 00:13:23,440
template

00:13:20,160 --> 00:13:25,120
that we call here our tesla studs

00:13:23,440 --> 00:13:28,480
component

00:13:25,120 --> 00:13:31,360
and in such a dust component we pass the

00:13:28,480 --> 00:13:32,560
stats properties we pass these starts

00:13:31,360 --> 00:13:36,800
properties

00:13:32,560 --> 00:13:40,560
and stockpile piece are an is an array

00:13:36,800 --> 00:13:42,959
i show you here on the right side

00:13:40,560 --> 00:13:43,600
this is what we passed to these such

00:13:42,959 --> 00:13:46,720
components

00:13:43,600 --> 00:13:47,600
and how does the stats component receive

00:13:46,720 --> 00:13:50,399
the data

00:13:47,600 --> 00:13:52,000
receive the properties here in the

00:13:50,399 --> 00:13:55,360
export default section

00:13:52,000 --> 00:13:58,880
in the properties section we define

00:13:55,360 --> 00:14:02,240
the property stats of array of type

00:13:58,880 --> 00:14:05,199
array and then we can

00:14:02,240 --> 00:14:05,680
when we receive the stats we can render

00:14:05,199 --> 00:14:08,560
them

00:14:05,680 --> 00:14:09,680
render the studs in the template and

00:14:08,560 --> 00:14:13,120
make use of

00:14:09,680 --> 00:14:16,240
the v4 from directive to loop

00:14:13,120 --> 00:14:20,079
through these stats and a

00:14:16,240 --> 00:14:23,519
key to to manage the

00:14:20,079 --> 00:14:25,040
order of the list or draft the stats i

00:14:23,519 --> 00:14:28,959
want to share

00:14:25,040 --> 00:14:31,440
so if you make use of directives

00:14:28,959 --> 00:14:32,560
here you see the v4 directive and you

00:14:31,440 --> 00:14:34,240
see also that i

00:14:32,560 --> 00:14:36,160
look through this loop through these

00:14:34,240 --> 00:14:36,800
stats and in the middle you see that the

00:14:36,160 --> 00:14:40,480
stat

00:14:36,800 --> 00:14:42,959
model dot model is is rendered

00:14:40,480 --> 00:14:45,120
and then i make use of a pipe lower case

00:14:42,959 --> 00:14:47,760
that is a custom filter

00:14:45,120 --> 00:14:48,639
you can define your own custom filters

00:14:47,760 --> 00:14:52,959
also

00:14:48,639 --> 00:14:54,880
in view in the filters section

00:14:52,959 --> 00:14:58,000
so when i go back to the application you

00:14:54,880 --> 00:14:59,519
see here underneath

00:14:58,000 --> 00:15:02,160
also the filter section we need

00:14:59,519 --> 00:15:02,160
lowercase

00:15:02,560 --> 00:15:06,320
so if components are like javascript

00:15:04,399 --> 00:15:09,600
functions

00:15:06,320 --> 00:15:13,279
they receive data as input

00:15:09,600 --> 00:15:16,480
and return a view

00:15:13,279 --> 00:15:19,600
react you shall see that react

00:15:16,480 --> 00:15:22,079
works a bit the same as view

00:15:19,600 --> 00:15:23,600
react is not really a framework they say

00:15:22,079 --> 00:15:26,720
but it is a library

00:15:23,600 --> 00:15:28,480
for building user interfaces we are

00:15:26,720 --> 00:15:30,079
going to make the same dashboard of

00:15:28,480 --> 00:15:32,160
course

00:15:30,079 --> 00:15:34,160
and but the syntax of a component is a

00:15:32,160 --> 00:15:38,160
little bit different

00:15:34,160 --> 00:15:40,480
and we define a class for a component

00:15:38,160 --> 00:15:41,279
and we give it a name with a capital

00:15:40,480 --> 00:15:45,079
letter

00:15:41,279 --> 00:15:47,839
always and it extends from

00:15:45,079 --> 00:15:51,279
react.component

00:15:47,839 --> 00:15:54,800
this component has a render function

00:15:51,279 --> 00:15:58,399
to render a view in html you can

00:15:54,800 --> 00:16:03,680
call this component

00:15:58,399 --> 00:16:03,680
a welcome component like that like this

00:16:04,720 --> 00:16:08,720
here we see an other example where we in

00:16:07,680 --> 00:16:12,959
the render function

00:16:08,720 --> 00:16:16,320
we return a html text

00:16:12,959 --> 00:16:20,560
if hello and then

00:16:16,320 --> 00:16:24,720
see that i define within curly brackets

00:16:20,560 --> 00:16:27,440
that this property name is property.name

00:16:24,720 --> 00:16:27,759
that is javascript so you see that where

00:16:27,440 --> 00:16:31,519
we

00:16:27,759 --> 00:16:38,240
return their html and javascript

00:16:31,519 --> 00:16:42,160
together they call that jsx so you can

00:16:38,240 --> 00:16:44,560
what i do here is i render here a

00:16:42,160 --> 00:16:45,600
hello text with a property and the

00:16:44,560 --> 00:16:49,600
property i can

00:16:45,600 --> 00:16:52,720
pass in the html

00:16:49,600 --> 00:16:56,959
so for example in html the welcome name

00:16:52,720 --> 00:17:02,240
is sarah so i can pick that name up

00:16:56,959 --> 00:17:02,240
in my year 6 and it will render hello

00:17:02,320 --> 00:17:06,559
since components are like javascript

00:17:04,319 --> 00:17:09,360
functions again

00:17:06,559 --> 00:17:09,839
there are two types of states in this in

00:17:09,360 --> 00:17:13,280
the

00:17:09,839 --> 00:17:14,959
react applications via these props we

00:17:13,280 --> 00:17:17,919
have state and we have via this

00:17:14,959 --> 00:17:19,039
state it's the local state within

00:17:17,919 --> 00:17:22,319
components

00:17:19,039 --> 00:17:24,079
i'm going to talk about it you see a

00:17:22,319 --> 00:17:27,199
simple example about

00:17:24,079 --> 00:17:29,120
about how to make a react application in

00:17:27,199 --> 00:17:30,320
bottom at the bottom you see a

00:17:29,120 --> 00:17:33,440
development

00:17:30,320 --> 00:17:36,640
with an id you root and then

00:17:33,440 --> 00:17:39,520
there above you see reactdom.render we

00:17:36,640 --> 00:17:42,720
refer to the root id

00:17:39,520 --> 00:17:44,400
and we attach there we attach a app

00:17:42,720 --> 00:17:48,080
component to it

00:17:44,400 --> 00:17:49,840
we defined it at component here upstairs

00:17:48,080 --> 00:17:52,080
the app component extends the react

00:17:49,840 --> 00:17:54,880
component and it has also a render

00:17:52,080 --> 00:17:56,640
function that returns new welcome

00:17:54,880 --> 00:17:59,679
components

00:17:56,640 --> 00:18:02,160
which i already explained you and it

00:17:59,679 --> 00:18:03,840
will render hello hello ellis hello

00:18:02,160 --> 00:18:07,200
maria

00:18:03,840 --> 00:18:10,080
some statement about this props never

00:18:07,200 --> 00:18:11,360
changes props you can your simple

00:18:10,080 --> 00:18:13,600
components

00:18:11,360 --> 00:18:15,039
this is only the responsibility of the

00:18:13,600 --> 00:18:17,360
parent component

00:18:15,039 --> 00:18:18,160
so only the test liability component may

00:18:17,360 --> 00:18:23,200
change

00:18:18,160 --> 00:18:23,200
the properties and the child bones

00:18:24,320 --> 00:18:28,320
should not change it and the ui is

00:18:27,600 --> 00:18:31,760
really as

00:18:28,320 --> 00:18:35,919
looks the same in the in the um

00:18:31,760 --> 00:18:38,240
react application you see that the

00:18:35,919 --> 00:18:39,360
application has the same structure as in

00:18:38,240 --> 00:18:42,480
view

00:18:39,360 --> 00:18:45,840
only that the components has a dot js

00:18:42,480 --> 00:18:48,720
extension here you see the components

00:18:45,840 --> 00:18:50,000
components tree here you see that the

00:18:48,720 --> 00:18:53,360
application is

00:18:50,000 --> 00:18:57,520
initiated by index.gs

00:18:53,360 --> 00:19:00,080
the index.js calls the app.gs

00:18:57,520 --> 00:19:00,960
and the ad.js has two child components

00:19:00,080 --> 00:19:03,600
in this example

00:19:00,960 --> 00:19:05,520
a header and a tesla battery i show you

00:19:03,600 --> 00:19:08,640
a little example how to

00:19:05,520 --> 00:19:11,919
how the fps works and how it

00:19:08,640 --> 00:19:15,120
imports the header in react

00:19:11,919 --> 00:19:16,160
you see a fps component it imports a

00:19:15,120 --> 00:19:19,440
header from

00:19:16,160 --> 00:19:23,280
component header the class app

00:19:19,440 --> 00:19:26,000
extends from a react component

00:19:23,280 --> 00:19:26,640
and it has a render function that

00:19:26,000 --> 00:19:29,039
returns

00:19:26,640 --> 00:19:30,000
the header that's simple and the header

00:19:29,039 --> 00:19:33,760
looks like this

00:19:30,000 --> 00:19:34,400
the header component is a little bit

00:19:33,760 --> 00:19:37,600
different

00:19:34,400 --> 00:19:39,760
i use here a functional component

00:19:37,600 --> 00:19:41,600
that is nothing more than a function i

00:19:39,760 --> 00:19:42,160
define here a function with an arrow

00:19:41,600 --> 00:19:44,400
function

00:19:42,160 --> 00:19:45,520
with an error function i define here a

00:19:44,400 --> 00:19:48,400
function

00:19:45,520 --> 00:19:49,760
yeah an header function or an header

00:19:48,400 --> 00:19:53,760
component

00:19:49,760 --> 00:19:56,960
because this works faster in

00:19:53,760 --> 00:19:59,520
in react than normal components

00:19:56,960 --> 00:20:00,640
when you have a dump component like a

00:19:59,520 --> 00:20:03,360
header

00:20:00,640 --> 00:20:04,000
then it is better to make use of this

00:20:03,360 --> 00:20:07,039
type

00:20:04,000 --> 00:20:08,000
these types of components we import your

00:20:07,039 --> 00:20:10,480
react

00:20:08,000 --> 00:20:11,679
import the header uh stylings error

00:20:10,480 --> 00:20:14,960
series has

00:20:11,679 --> 00:20:18,080
imported logo and what do we do here we

00:20:14,960 --> 00:20:22,000
define here a header function

00:20:18,080 --> 00:20:25,440
header from a functional component

00:20:22,000 --> 00:20:28,559
and we render here a via the image tag

00:20:25,440 --> 00:20:32,000
a logo and underneath we export the

00:20:28,559 --> 00:20:34,320
header so we can import it in the fps

00:20:32,000 --> 00:20:36,000
it's it's a little bit similar somewhere

00:20:34,320 --> 00:20:39,679
like public in java

00:20:36,000 --> 00:20:40,640
export function so the component stream

00:20:39,679 --> 00:20:43,440
looks like this

00:20:40,640 --> 00:20:44,159
we have the tesla battery and tesla

00:20:43,440 --> 00:20:47,200
battery

00:20:44,159 --> 00:20:49,760
yeah does the heavy lifting it provides

00:20:47,200 --> 00:20:51,840
the state of the application

00:20:49,760 --> 00:20:54,080
and here we see an example of a little

00:20:51,840 --> 00:20:56,400
example by the tesla battery

00:20:54,080 --> 00:20:58,000
which is in our real application much

00:20:56,400 --> 00:21:00,640
bigger than this one

00:20:58,000 --> 00:21:01,039
when i show you only the basics that it

00:21:00,640 --> 00:21:03,679
best

00:21:01,039 --> 00:21:05,120
battery extends the react component it

00:21:03,679 --> 00:21:08,640
has a constructor

00:21:05,120 --> 00:21:11,840
it calls it super it calls it super

00:21:08,640 --> 00:21:15,280
why does it call the super because then

00:21:11,840 --> 00:21:18,799
this is the then we can use this

00:21:15,280 --> 00:21:22,080
dot state that this we can use then

00:21:18,799 --> 00:21:24,080
and this is then initialized it is

00:21:22,080 --> 00:21:26,400
the state of this application contains

00:21:24,080 --> 00:21:29,679
the car stats of course

00:21:26,400 --> 00:21:34,320
statistics and the config

00:21:29,679 --> 00:21:37,200
object contains the user data

00:21:34,320 --> 00:21:38,880
which is built in in the render function

00:21:37,200 --> 00:21:41,919
we make use of this structuring

00:21:38,880 --> 00:21:45,600
to get the config data out of the state

00:21:41,919 --> 00:21:46,799
and we can use that later in the

00:21:45,600 --> 00:21:48,880
examples

00:21:46,799 --> 00:21:50,960
easier it's very simple example where we

00:21:48,880 --> 00:21:53,520
return um

00:21:50,960 --> 00:21:56,559
yeah the tesla car only where we return

00:21:53,520 --> 00:21:59,200
or render only the tesla car

00:21:56,559 --> 00:21:59,840
the state of the application and the car

00:21:59,200 --> 00:22:02,159
stats

00:21:59,840 --> 00:22:04,720
contains the maximum battery range you

00:22:02,159 --> 00:22:06,159
know that already and the config

00:22:04,720 --> 00:22:07,840
contains the currently selected

00:22:06,159 --> 00:22:11,200
conditions of

00:22:07,840 --> 00:22:14,400
currency selections user

00:22:11,200 --> 00:22:17,600
use our selections

00:22:14,400 --> 00:22:20,880
the car starts can return this

00:22:17,600 --> 00:22:23,840
and can have this output this is the

00:22:20,880 --> 00:22:25,280
the model data the lookup table we were

00:22:23,840 --> 00:22:28,400
working with

00:22:25,280 --> 00:22:30,320
how do we pass data from the

00:22:28,400 --> 00:22:31,600
tesla battery to the tesla car

00:22:30,320 --> 00:22:33,600
components

00:22:31,600 --> 00:22:35,840
there's passive properties to the tesla

00:22:33,600 --> 00:22:39,840
car components

00:22:35,840 --> 00:22:41,679
how do we do that from the tesla battery

00:22:39,840 --> 00:22:42,400
for example we want to pass the wheel

00:22:41,679 --> 00:22:46,559
size

00:22:42,400 --> 00:22:49,280
to the tesla car you see

00:22:46,559 --> 00:22:50,000
that i in the yellow party underneath

00:22:49,280 --> 00:22:54,159
you see that

00:22:50,000 --> 00:22:57,039
the tesla car you can pass

00:22:54,159 --> 00:22:57,039
the wheel size

00:22:57,360 --> 00:23:02,880
uh via the wheel size uh yeah the wheel

00:23:00,480 --> 00:23:06,240
size property

00:23:02,880 --> 00:23:08,000
you can define it yourself how do you

00:23:06,240 --> 00:23:12,000
receive properties in the tesla

00:23:08,000 --> 00:23:15,440
car components we also use here the

00:23:12,000 --> 00:23:18,640
arrow functions to make use of these

00:23:15,440 --> 00:23:20,880
and we can also render these properties

00:23:18,640 --> 00:23:20,880
then

00:23:21,440 --> 00:23:25,120
changing the state do not change state

00:23:24,400 --> 00:23:28,640
with

00:23:25,120 --> 00:23:34,080
this state is new state use

00:23:28,640 --> 00:23:34,080
always use in react this dot set state

00:23:34,400 --> 00:23:40,000
class welcome state here is an example

00:23:37,120 --> 00:23:43,440
of a stateful object

00:23:40,000 --> 00:23:46,640
and i want to show you how how you can

00:23:43,440 --> 00:23:48,080
play with the set state to change the

00:23:46,640 --> 00:23:51,039
state

00:23:48,080 --> 00:23:52,000
in the constructor we defined a state

00:23:51,039 --> 00:23:56,000
variable

00:23:52,000 --> 00:23:58,880
message my friend and we have a

00:23:56,000 --> 00:23:58,880
render function

00:23:59,919 --> 00:24:06,880
which will return a text hello

00:24:04,480 --> 00:24:08,240
my friend because this state dot message

00:24:06,880 --> 00:24:13,520
contains the message

00:24:08,240 --> 00:24:16,240
my friend how can we change this message

00:24:13,520 --> 00:24:18,000
first i define here a method update

00:24:16,240 --> 00:24:20,799
message in middle

00:24:18,000 --> 00:24:21,520
and in this message in this function i

00:24:20,799 --> 00:24:24,720
define

00:24:21,520 --> 00:24:27,360
and make use of this set state to change

00:24:24,720 --> 00:24:29,840
the state of the message

00:24:27,360 --> 00:24:32,159
to change the message i changed the

00:24:29,840 --> 00:24:33,919
message from my friend to my friend from

00:24:32,159 --> 00:24:37,360
change state

00:24:33,919 --> 00:24:37,360
and how do we trigger that

00:24:37,440 --> 00:24:40,640
we trigger that via a button here you

00:24:39,279 --> 00:24:45,919
see in the render function

00:24:40,640 --> 00:24:47,679
i return here a hello this state message

00:24:45,919 --> 00:24:50,000
and i can change that message

00:24:47,679 --> 00:24:51,039
with the button on click event and i

00:24:50,000 --> 00:24:54,400
call here the dis

00:24:51,039 --> 00:24:56,320
update message function which i already

00:24:54,400 --> 00:24:57,600
defined here and i make use of the set

00:24:56,320 --> 00:24:59,919
state

00:24:57,600 --> 00:25:01,440
make use of the set state because then

00:24:59,919 --> 00:25:05,200
the

00:25:01,440 --> 00:25:07,360
then react can render the changes for

00:25:05,200 --> 00:25:09,440
you

00:25:07,360 --> 00:25:10,640
here in the constructor you see

00:25:09,440 --> 00:25:13,039
something different

00:25:10,640 --> 00:25:14,080
this update message is this effect

00:25:13,039 --> 00:25:17,279
message binds

00:25:14,080 --> 00:25:20,799
this that means that we can use this

00:25:17,279 --> 00:25:22,960
also then in our method

00:25:20,799 --> 00:25:24,080
how do we recalculate the statistics

00:25:22,960 --> 00:25:27,360
when the wheel size

00:25:24,080 --> 00:25:31,039
changes when we want to recalculate

00:25:27,360 --> 00:25:33,840
the stat statistics we we have to

00:25:31,039 --> 00:25:34,400
define a you know a known call back

00:25:33,840 --> 00:25:37,679
function

00:25:34,400 --> 00:25:40,240
callback function in our tesla battery

00:25:37,679 --> 00:25:41,520
component it changed the same the same

00:25:40,240 --> 00:25:44,400
way as i

00:25:41,520 --> 00:25:44,400
showed you already

00:25:44,559 --> 00:25:48,080
with the welcome state stateful

00:25:46,720 --> 00:25:50,640
component

00:25:48,080 --> 00:25:51,760
you see that i also use the this set

00:25:50,640 --> 00:25:54,799
state

00:25:51,760 --> 00:25:57,360
function to change the state

00:25:54,799 --> 00:25:58,960
of the config of the wheel size and

00:25:57,360 --> 00:26:02,159
change the

00:25:58,960 --> 00:26:04,240
stats the studs and how

00:26:02,159 --> 00:26:06,400
do we trigger these handle change wheels

00:26:04,240 --> 00:26:09,600
we change that we trigger that also in

00:26:06,400 --> 00:26:13,200
our render function of course and i

00:26:09,600 --> 00:26:16,559
pass this this callback function

00:26:13,200 --> 00:26:19,600
pass it to the tessa wheels

00:26:16,559 --> 00:26:21,279
component and you can you can imagine

00:26:19,600 --> 00:26:25,039
that you can handle that

00:26:21,279 --> 00:26:25,760
and trigger that that's a callback

00:26:25,039 --> 00:26:31,200
function

00:26:25,760 --> 00:26:32,960
also in this component a comparison yeah

00:26:31,200 --> 00:26:35,679
we want to talk about a little bit

00:26:32,960 --> 00:26:39,600
comparison and react and view

00:26:35,679 --> 00:26:43,440
facebook has as is backed up by

00:26:39,600 --> 00:26:47,039
facebook so it is uh guaranteed that it

00:26:43,440 --> 00:26:50,400
will uh uh but it will be a

00:26:47,039 --> 00:26:52,480
in life and the view is as big

00:26:50,400 --> 00:26:54,159
as also a big community but it's not

00:26:52,480 --> 00:26:57,360
backed by a big

00:26:54,159 --> 00:27:00,559
big player like facebook or google

00:26:57,360 --> 00:27:02,240
uh when you want to make uh mobile apps

00:27:00,559 --> 00:27:03,279
it is not a problem to make that you

00:27:02,240 --> 00:27:06,480
know react native

00:27:03,279 --> 00:27:07,360
and view you can also make use of use of

00:27:06,480 --> 00:27:11,200
you native

00:27:07,360 --> 00:27:15,919
and native script react

00:27:11,200 --> 00:27:18,960
uses a plain javascript yeah that is

00:27:15,919 --> 00:27:19,679
also good react is less optionated you

00:27:18,960 --> 00:27:23,760
can say

00:27:19,679 --> 00:27:26,720
like uh less optionated and view is

00:27:23,760 --> 00:27:27,200
yeah makes use of different solutions

00:27:26,720 --> 00:27:30,000
likes

00:27:27,200 --> 00:27:31,919
directives and routings a reactive sound

00:27:30,000 --> 00:27:35,279
that caliber kilobytes big

00:27:31,919 --> 00:27:37,840
view 60 kilobytes so performance like

00:27:35,279 --> 00:27:40,640
they are the same

00:27:37,840 --> 00:27:43,279
it is few is easier to let it more

00:27:40,640 --> 00:27:46,320
easier to learn they say

00:27:43,279 --> 00:27:50,000
react you have to code a lot because

00:27:46,320 --> 00:27:52,640
the tesla battery component costs you

00:27:50,000 --> 00:27:53,840
200 lines of code to write we either

00:27:52,640 --> 00:27:57,039
look into the

00:27:53,840 --> 00:28:00,799
workshop and if you

00:27:57,039 --> 00:28:04,880
view it cost you 100 lines of code

00:28:00,799 --> 00:28:07,600
instead of 200 for yak there are more

00:28:04,880 --> 00:28:12,000
developers available

00:28:07,600 --> 00:28:15,679
and if you have nowadays less developers

00:28:12,000 --> 00:28:19,120
both frameworks use for the virtual dom

00:28:15,679 --> 00:28:20,159
so it's quite fast they have the same

00:28:19,120 --> 00:28:24,720
performance

00:28:20,159 --> 00:28:24,720
and they are component based

00:28:25,600 --> 00:28:30,320
these are the interesting links about my

00:28:28,159 --> 00:28:32,640
workshop and about my articles i've

00:28:30,320 --> 00:28:32,640
written

00:28:33,600 --> 00:28:45,840
thank you very much do you have

00:28:35,200 --> 00:28:45,840
questions thank you

00:28:49,010 --> 00:28:54,140
[Music]

00:29:03,520 --> 00:29:05,600

YouTube URL: https://www.youtube.com/watch?v=CII2mzWQt1Q


