Title: BTR FSTR AWSMR SSR - City JS Conf 2019
Publication date: 2019-05-14
Playlist: City JS Conf 2019
Description: 
	Dylan Schiemann 

In a world where developer experience is often at odds with end user performance and experience, attempts to keep these conflicts at peace are evolving rapidly.
This talk will look at some of the benefits and challenges with more common approaches to server-side rendering (SSR), and explore our teamâ€™s journey into finding a better faster awesomer approach.
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,210 --> 00:00:04,890
I'll explain the meaning of my talk

00:00:02,879 --> 00:00:06,500
title afterwards but you can probably

00:00:04,890 --> 00:00:08,820
have a few guesses on what it means

00:00:06,500 --> 00:00:10,469
Simona have told you who I am I do lots

00:00:08,820 --> 00:00:13,469
of things I don't sleep much sleep

00:00:10,469 --> 00:00:15,000
separated and seems like there's been a

00:00:13,469 --> 00:00:16,470
lot of history today so I won't spend

00:00:15,000 --> 00:00:21,600
too much time on it but I want to take a

00:00:16,470 --> 00:00:23,880
quick trip back to 2004 so 2004 was kind

00:00:21,600 --> 00:00:26,910
of when JavaScript was first thought of

00:00:23,880 --> 00:00:29,369
as a real programming language before

00:00:26,910 --> 00:00:32,130
that I would say I'm a JavaScript

00:00:29,369 --> 00:00:36,960
engineer and someone would say you mean

00:00:32,130 --> 00:00:38,969
like Java like no not like hare missed a

00:00:36,960 --> 00:00:41,129
hamburger and so that was always good

00:00:38,969 --> 00:00:43,200
and fun and last year I was at a

00:00:41,129 --> 00:00:45,030
conference I don't work which one but I

00:00:43,200 --> 00:00:47,640
heard someone explained they were a Java

00:00:45,030 --> 00:00:51,800
engineer and someone said you mean like

00:00:47,640 --> 00:00:55,530
JavaScript so the point of that year is

00:00:51,800 --> 00:00:57,629
Flickr was out and it was the sort of

00:00:55,530 --> 00:01:00,750
birth of web 2.0 and a lot of

00:00:57,629 --> 00:01:04,320
interesting things it was also the year

00:01:00,750 --> 00:01:06,750
that Gmail was released on April 1st it

00:01:04,320 --> 00:01:08,760
was not a joke but it was the first time

00:01:06,750 --> 00:01:10,740
when a mainstream people thought hey

00:01:08,760 --> 00:01:13,320
this javascript thing this could

00:01:10,740 --> 00:01:14,760
actually be big I had been foolishly

00:01:13,320 --> 00:01:16,500
experimenting with it for about eight or

00:01:14,760 --> 00:01:18,720
nine years already at that point and

00:01:16,500 --> 00:01:21,240
having a lot of fun but not getting

00:01:18,720 --> 00:01:23,040
taken very seriously started working on

00:01:21,240 --> 00:01:25,590
a JavaScript framework called dojo which

00:01:23,040 --> 00:01:27,090
some of you have heard it's also the

00:01:25,590 --> 00:01:29,100
year that Google acquired a couple of

00:01:27,090 --> 00:01:30,990
companies to make Google Maps and Google

00:01:29,100 --> 00:01:34,770
Earth which were released later the next

00:01:30,990 --> 00:01:38,060
year and it was roughly the time that

00:01:34,770 --> 00:01:40,619
the lovely now retronym Ajax was coined

00:01:38,060 --> 00:01:42,329
Ajax was cool at one point I meant

00:01:40,619 --> 00:01:45,750
everything you could possibly do that

00:01:42,329 --> 00:01:47,040
was cool in a browser was Ajax I don't

00:01:45,750 --> 00:01:49,320
know why I'm talking so funny it's kind

00:01:47,040 --> 00:01:51,119
of fun I guess I'm just trying to get

00:01:49,320 --> 00:01:54,210
you warmed up for the after party and

00:01:51,119 --> 00:01:56,280
the SMERSH stuff so so it's a really

00:01:54,210 --> 00:01:57,719
great time a really big transition when

00:01:56,280 --> 00:01:59,430
javascript went from something it would

00:01:57,719 --> 00:02:00,719
use to sort of modify forms and images

00:01:59,430 --> 00:02:03,060
to something it would use to create

00:02:00,719 --> 00:02:04,799
entire applications but it also

00:02:03,060 --> 00:02:07,320
introduced the architecture of a single

00:02:04,799 --> 00:02:09,270
page application which is really great

00:02:07,320 --> 00:02:10,370
and that hey I can do everything I could

00:02:09,270 --> 00:02:14,020
possibly want to do in an application

00:02:10,370 --> 00:02:17,110
but it introduced a series of problems

00:02:14,020 --> 00:02:20,830
the most commonly noted ones are besides

00:02:17,110 --> 00:02:23,710
the ones we've ignored our search engine

00:02:20,830 --> 00:02:25,960
indexing navigation bookmarking and

00:02:23,710 --> 00:02:29,560
performance and by performance

00:02:25,960 --> 00:02:31,420
I mean relative to plane content and

00:02:29,560 --> 00:02:33,250
relative to native applications and

00:02:31,420 --> 00:02:36,280
today relative to mobile applications

00:02:33,250 --> 00:02:37,930
right and so these were all things that

00:02:36,280 --> 00:02:39,400
like great we fixed these problems but

00:02:37,930 --> 00:02:41,200
we've introduced a whole new set of

00:02:39,400 --> 00:02:43,540
problems that the web used to fix and

00:02:41,200 --> 00:02:45,160
over the past many years we've come up

00:02:43,540 --> 00:02:45,820
with many solutions for some of these

00:02:45,160 --> 00:02:49,030
problems

00:02:45,820 --> 00:02:49,330
for example search engines have gotten

00:02:49,030 --> 00:02:50,650
better

00:02:49,330 --> 00:02:54,090
well at least Google has gotten better

00:02:50,650 --> 00:02:56,770
at indexing JavaScript applications

00:02:54,090 --> 00:02:58,750
routing or routing solve most of our

00:02:56,770 --> 00:03:01,300
navigation and bookmark ability problems

00:02:58,750 --> 00:03:04,210
as well as the history API is that we

00:03:01,300 --> 00:03:05,620
access and we have various optimization

00:03:04,210 --> 00:03:08,140
tools to make our applications faster

00:03:05,620 --> 00:03:10,000
we've had build tools we now pretty much

00:03:08,140 --> 00:03:13,150
rely on web pack or parcel or something

00:03:10,000 --> 00:03:16,440
else an HTTP 2.0 can potentially reduce

00:03:13,150 --> 00:03:18,700
number of requests but we still have

00:03:16,440 --> 00:03:22,900
everyone's favorite application

00:03:18,700 --> 00:03:25,390
experience the spinner this will not let

00:03:22,900 --> 00:03:29,290
you think your application slow it's

00:03:25,390 --> 00:03:35,050
responsive and I sit this way spoiler I

00:03:29,290 --> 00:03:37,690
don't have anything after this so if any

00:03:35,050 --> 00:03:39,010
of you have heard my co-founder of dojo

00:03:37,690 --> 00:03:42,310
Alex Russell talk

00:03:39,010 --> 00:03:43,600
he's very vocal on Twitter he might even

00:03:42,310 --> 00:03:44,860
be the butt of some of those smushed

00:03:43,600 --> 00:03:47,770
jokes tonight I don't know if they have

00:03:44,860 --> 00:03:49,210
a new humor or not but basically he's

00:03:47,770 --> 00:03:51,880
always talking about those poor people

00:03:49,210 --> 00:03:54,400
in the middle parts of the world who are

00:03:51,880 --> 00:03:57,010
on like 2.5 g connections with feature

00:03:54,400 --> 00:03:58,930
phones and I'm like Alex can't Google

00:03:57,010 --> 00:04:01,960
just buy you a new phone and get you

00:03:58,930 --> 00:04:04,450
good service but anyway it's very funny

00:04:01,960 --> 00:04:06,070
so obviously slow connections are a

00:04:04,450 --> 00:04:07,930
problem but for the most part we've

00:04:06,070 --> 00:04:09,100
really been focused on the render

00:04:07,930 --> 00:04:10,930
function and whether we're talking about

00:04:09,100 --> 00:04:13,420
the render function of like react or

00:04:10,930 --> 00:04:16,209
view or dojo or a framework or how we

00:04:13,420 --> 00:04:18,010
render applications may be on the server

00:04:16,209 --> 00:04:19,480
maybe we create static versions on our

00:04:18,010 --> 00:04:21,430
sites and that's kind of what this talk

00:04:19,480 --> 00:04:23,290
is about it's a pretty simple talk

00:04:21,430 --> 00:04:24,669
because I sort of thought this was like

00:04:23,290 --> 00:04:27,139
the end of the day and I wasn't going to

00:04:24,669 --> 00:04:29,419
overload you with code so

00:04:27,139 --> 00:04:31,159
the goals of a solution to make the

00:04:29,419 --> 00:04:34,009
single page application architecture

00:04:31,159 --> 00:04:36,319
have better performance would be to

00:04:34,009 --> 00:04:37,819
improve our initial page render time

00:04:36,319 --> 00:04:39,919
right we want the application to

00:04:37,819 --> 00:04:42,860
actually load faster and be viewable

00:04:39,919 --> 00:04:45,919
faster we want it to be populated with

00:04:42,860 --> 00:04:47,300
relevant content initially but we don't

00:04:45,919 --> 00:04:49,129
want to lie to our users we don't want

00:04:47,300 --> 00:04:50,779
to show them a news site with content

00:04:49,129 --> 00:04:52,400
that was the last time we optimized the

00:04:50,779 --> 00:04:53,810
site six months ago we want to show them

00:04:52,400 --> 00:04:56,539
stuff that's real and relevant to what

00:04:53,810 --> 00:04:57,919
they're viewing today we don't want to

00:04:56,539 --> 00:05:00,469
have to change the way we write software

00:04:57,919 --> 00:05:01,849
it really sucks it's really brittle when

00:05:00,469 --> 00:05:03,500
we have three or four different code

00:05:01,849 --> 00:05:05,770
paths or different mechanisms to release

00:05:03,500 --> 00:05:08,389
software in there different conditions

00:05:05,770 --> 00:05:09,949
we want to still be able to get all the

00:05:08,389 --> 00:05:11,539
benefits of building software on the web

00:05:09,949 --> 00:05:13,520
right we don't want to say well okay

00:05:11,539 --> 00:05:15,590
I've done all of this great JavaScript

00:05:13,520 --> 00:05:20,389
work to now deliver static websites with

00:05:15,590 --> 00:05:23,089
no upside there was a case study done by

00:05:20,389 --> 00:05:27,080
audio Zamani about netflix last year I

00:05:23,089 --> 00:05:30,169
think and essentially they took out for

00:05:27,080 --> 00:05:32,419
the pre login version of Netflix react

00:05:30,169 --> 00:05:35,240
from the front end and they streamlined

00:05:32,419 --> 00:05:36,919
it down or move the JavaScript and the

00:05:35,240 --> 00:05:38,839
results are pretty substantial as you

00:05:36,919 --> 00:05:40,870
can see they had nearly 600 kilobytes of

00:05:38,839 --> 00:05:43,520
JavaScript and they reduced it down to

00:05:40,870 --> 00:05:46,129
somewhere around a hundred and thirty

00:05:43,520 --> 00:05:48,589
let's see yeah yeah like one hundred and

00:05:46,129 --> 00:05:50,089
twelve right and of course the page load

00:05:48,589 --> 00:05:52,339
times are greater and everyone's like oh

00:05:50,089 --> 00:05:54,080
that's so amazing how do I do that and

00:05:52,339 --> 00:05:55,699
of course the answer is like a lot of

00:05:54,080 --> 00:05:59,029
work and a lot of custom effort and so

00:05:55,699 --> 00:06:00,680
on so I'll look at some solutions but

00:05:59,029 --> 00:06:02,810
first I think it helps to think about

00:06:00,680 --> 00:06:04,639
what performance really means and if

00:06:02,810 --> 00:06:06,529
you've read about a lot of the common

00:06:04,639 --> 00:06:08,449
new performance metrics this is nothing

00:06:06,529 --> 00:06:10,909
new there's the time to the first byte

00:06:08,449 --> 00:06:12,770
and that's basically click on a link and

00:06:10,909 --> 00:06:14,509
you see the first bit of content and

00:06:12,770 --> 00:06:16,009
that's sort of a measure of how slow

00:06:14,509 --> 00:06:17,599
your network is or how slow your

00:06:16,009 --> 00:06:21,139
application is to get to something

00:06:17,599 --> 00:06:24,500
useful there's the first byte which is

00:06:21,139 --> 00:06:26,240
the first visible pixel but I think the

00:06:24,500 --> 00:06:28,669
more interesting ones are the next two

00:06:26,240 --> 00:06:30,620
which is the first content so content

00:06:28,669 --> 00:06:33,469
full paint that's such a terrible name

00:06:30,620 --> 00:06:35,000
but which is you can actually see the

00:06:33,469 --> 00:06:37,610
content that you've requested visible in

00:06:35,000 --> 00:06:38,990
your application and then the most

00:06:37,610 --> 00:06:40,100
important one which is the time to

00:06:38,990 --> 00:06:41,480
interactive so that

00:06:40,100 --> 00:06:43,490
when the application that you've created

00:06:41,480 --> 00:06:46,640
is something you can fully engage with

00:06:43,490 --> 00:06:49,040
and start to use so these metrics matter

00:06:46,640 --> 00:06:50,420
because a lot of performance so you

00:06:49,040 --> 00:06:52,370
can't just make everything infinitely

00:06:50,420 --> 00:06:54,260
fast right some things take time

00:06:52,370 --> 00:06:55,640
but the more you can do to deceive and

00:06:54,260 --> 00:06:57,710
lie to your users in a way that's

00:06:55,640 --> 00:06:59,780
respectful the better off they're going

00:06:57,710 --> 00:07:01,670
to be right so if they feel like yeah

00:06:59,780 --> 00:07:03,470
it's gonna take five seconds but all

00:07:01,670 --> 00:07:05,360
along the way I'm making it feel like

00:07:03,470 --> 00:07:06,740
I'm getting there faster and faster

00:07:05,360 --> 00:07:08,270
that's great rather than just that

00:07:06,740 --> 00:07:10,390
single spin or blocking your whole

00:07:08,270 --> 00:07:13,640
application for five seconds

00:07:10,390 --> 00:07:16,310
so there are a number of different types

00:07:13,640 --> 00:07:18,200
of approaches we can take to render our

00:07:16,310 --> 00:07:20,080
application the most common one

00:07:18,200 --> 00:07:22,160
JavaScript applications use today is

00:07:20,080 --> 00:07:24,260
client-side rendering or a single page

00:07:22,160 --> 00:07:25,910
application where we send a bunch of

00:07:24,260 --> 00:07:30,140
JavaScript down the wire our HTML page

00:07:25,910 --> 00:07:32,030
is pretty much blank and then we get

00:07:30,140 --> 00:07:34,550
some content get some bundle JavaScript

00:07:32,030 --> 00:07:35,570
and then we render client-side and

00:07:34,550 --> 00:07:37,370
you'll see at the bottom there's this

00:07:35,570 --> 00:07:41,030
red squiggly and that red squiggly is

00:07:37,370 --> 00:07:42,740
when we're blocking our flow and so this

00:07:41,030 --> 00:07:44,210
is great except when that JavaScript

00:07:42,740 --> 00:07:46,010
bundle is really large and that render

00:07:44,210 --> 00:07:47,750
takes a long time the users waiting

00:07:46,010 --> 00:07:51,230
quite a bit of time for something to be

00:07:47,750 --> 00:07:52,190
useful and something to happen so then

00:07:51,230 --> 00:07:53,810
people have been talking about

00:07:52,190 --> 00:07:55,840
server-side rendering and server-side

00:07:53,810 --> 00:07:59,210
rendering is kind of a step back in time

00:07:55,840 --> 00:08:00,620
where we go back and we render all of

00:07:59,210 --> 00:08:03,860
our stuff on the server and deliver some

00:08:00,620 --> 00:08:07,310
static websites and that's great except

00:08:03,860 --> 00:08:09,530
that it's not ideal because we still

00:08:07,310 --> 00:08:12,230
have to render a lot of the HTML on the

00:08:09,530 --> 00:08:13,670
client side and then it's not

00:08:12,230 --> 00:08:16,220
necessarily in a state that we can do

00:08:13,670 --> 00:08:18,620
anything interesting with it so there's

00:08:16,220 --> 00:08:20,390
this concept of rehydration where you

00:08:18,620 --> 00:08:22,190
take your server-side content in an

00:08:20,390 --> 00:08:23,990
initial State and then you add your

00:08:22,190 --> 00:08:25,160
JavaScript then you upgrade it to what

00:08:23,990 --> 00:08:27,380
you would have done if you've done pre

00:08:25,160 --> 00:08:29,060
or client-side rendering and that sounds

00:08:27,380 --> 00:08:31,670
great but in practice the result is

00:08:29,060 --> 00:08:33,050
first the user sees some stale content

00:08:31,670 --> 00:08:34,370
and then you have to take all the time

00:08:33,050 --> 00:08:36,650
to render it on the client-side so it's

00:08:34,370 --> 00:08:38,620
actually slower overall by quite a bit

00:08:36,650 --> 00:08:40,760
than just pure client-side rendering and

00:08:38,620 --> 00:08:44,210
that's again because we're blocked on

00:08:40,760 --> 00:08:46,160
quite a few things so the technique that

00:08:44,210 --> 00:08:49,010
our team and other teams have been

00:08:46,160 --> 00:08:50,240
working on recently is we call it build

00:08:49,010 --> 00:08:52,610
time rendering but some people call it

00:08:50,240 --> 00:08:53,880
pre rendering and the idea behind this

00:08:52,610 --> 00:08:56,850
is you could use this for a

00:08:53,880 --> 00:08:58,230
static site render or you could use it

00:08:56,850 --> 00:09:01,050
for a static site rendering plus

00:08:58,230 --> 00:09:03,960
rehydration and the beauty of it is

00:09:01,050 --> 00:09:05,940
you're just pre rendering and optimizing

00:09:03,960 --> 00:09:08,550
the bundle for the stuff that's sort of

00:09:05,940 --> 00:09:10,200
infrastructural but not content and then

00:09:08,550 --> 00:09:13,830
you're loading the content into your

00:09:10,200 --> 00:09:16,070
page at as it's needed and you'll see it

00:09:13,830 --> 00:09:18,630
sort of like allows streaming it allows

00:09:16,070 --> 00:09:20,490
other things it's just a lot a lot of

00:09:18,630 --> 00:09:24,240
optimizations that are supported that

00:09:20,490 --> 00:09:25,560
you might not expect otherwise so unlike

00:09:24,240 --> 00:09:27,690
a few years ago when people like yeah

00:09:25,560 --> 00:09:29,040
let's just about server-side render

00:09:27,690 --> 00:09:30,930
things and be like well that's kind of

00:09:29,040 --> 00:09:32,580
going back in time now you know one of

00:09:30,930 --> 00:09:34,680
the benefits of a heavy JavaScript

00:09:32,580 --> 00:09:37,020
application was we don't have to put all

00:09:34,680 --> 00:09:38,490
of these servers up in place and manage

00:09:37,020 --> 00:09:40,980
the resources and the costs to do that

00:09:38,490 --> 00:09:43,290
we can instead put that computation

00:09:40,980 --> 00:09:44,700
power down to our users but also we can

00:09:43,290 --> 00:09:46,320
think of the network is something that's

00:09:44,700 --> 00:09:48,150
sending data rather than the in the

00:09:46,320 --> 00:09:50,280
server just delivering data and api's

00:09:48,150 --> 00:09:51,390
rather than the server being responsible

00:09:50,280 --> 00:09:52,640
for constructing the state of our

00:09:51,390 --> 00:09:56,400
application and doing all of the work

00:09:52,640 --> 00:09:58,530
but a traditional SSR approach actually

00:09:56,400 --> 00:10:02,070
is going back in time so we're trying to

00:09:58,530 --> 00:10:04,260
avoid that so like I said SSR plus

00:10:02,070 --> 00:10:06,030
rehydration is ok it was a nice step but

00:10:04,260 --> 00:10:08,790
it's not the sort of the final step and

00:10:06,030 --> 00:10:10,140
the reason is that like yeah it's it's

00:10:08,790 --> 00:10:12,300
probably the easiest approach to work

00:10:10,140 --> 00:10:14,910
with and one of the common libraries to

00:10:12,300 --> 00:10:17,490
get that working is Ness next J SNS

00:10:14,910 --> 00:10:18,900
jeaious there are versions of things

00:10:17,490 --> 00:10:21,510
like this for angular and other

00:10:18,900 --> 00:10:24,270
frameworks as well now this one is for

00:10:21,510 --> 00:10:25,830
reactive primarily and it basically

00:10:24,270 --> 00:10:29,250
works it solves some of the problems

00:10:25,830 --> 00:10:32,010
that we have but where it's sort of

00:10:29,250 --> 00:10:33,360
lacks the ability is that in my

00:10:32,010 --> 00:10:35,040
experience it gives us inaccurate

00:10:33,360 --> 00:10:37,230
information upfront and the stale news

00:10:35,040 --> 00:10:40,860
article this the static content that's

00:10:37,230 --> 00:10:42,480
sort of optimized in advance and we sort

00:10:40,860 --> 00:10:44,070
of lie to our users the app looks like

00:10:42,480 --> 00:10:45,840
it's fully loaded the user goes to click

00:10:44,070 --> 00:10:49,050
on a link but the links not really in a

00:10:45,840 --> 00:10:51,570
state they can interact with it so

00:10:49,050 --> 00:10:52,590
that's where we came up and others came

00:10:51,570 --> 00:10:54,630
up the idea of build time rendering

00:10:52,590 --> 00:10:55,980
which is it's sort of twofold you could

00:10:54,630 --> 00:10:56,880
create a static site with it if that's

00:10:55,980 --> 00:10:58,590
what you wanted maybe for a

00:10:56,880 --> 00:11:00,030
documentation site for your open source

00:10:58,590 --> 00:11:02,250
project and I say that because that's

00:11:00,030 --> 00:11:03,839
what we're doing exactly right now or

00:11:02,250 --> 00:11:06,210
then you could recreate the site with

00:11:03,839 --> 00:11:07,500
that initial render and rehydrate it and

00:11:06,210 --> 00:11:09,510
you get this kind of classic

00:11:07,500 --> 00:11:10,830
you eye experience where we're not lying

00:11:09,510 --> 00:11:12,870
to the user they know the page is

00:11:10,830 --> 00:11:14,490
loading but then we're basically quickly

00:11:12,870 --> 00:11:17,220
replacing it with real content once it's

00:11:14,490 --> 00:11:19,770
ready so I'm gonna go through a couple

00:11:17,220 --> 00:11:21,330
of quick code examples cuz code talks

00:11:19,770 --> 00:11:22,740
aren't real if you don't show any code

00:11:21,330 --> 00:11:26,130
and that would be a fraud if I didn't do

00:11:22,740 --> 00:11:26,910
that but basically imagine the use case

00:11:26,130 --> 00:11:29,280
where you'll just want to read a

00:11:26,910 --> 00:11:31,530
markdown file and parse it into HTML and

00:11:29,280 --> 00:11:33,120
I'll look at two things I'll look at

00:11:31,530 --> 00:11:35,370
Gatsby and I'll look at dojo

00:11:33,120 --> 00:11:40,470
so Gatsby is primarily used with react

00:11:35,370 --> 00:11:43,710
and dojo is of course dojo so Gatsby

00:11:40,470 --> 00:11:45,660
basically takes some data puts it into

00:11:43,710 --> 00:11:47,520
the equivalent of a graph QL style

00:11:45,660 --> 00:11:48,660
resource the assumption being if you're

00:11:47,520 --> 00:11:51,510
right in a react application you're

00:11:48,660 --> 00:11:53,700
probably using graph QL it's not part of

00:11:51,510 --> 00:11:55,320
sort of an integrated react framework

00:11:53,700 --> 00:11:57,360
but it kind of builds on top of it so

00:11:55,320 --> 00:11:58,890
what that means is that you kind of work

00:11:57,360 --> 00:12:01,200
with this on an application level rather

00:11:58,890 --> 00:12:04,500
than a component level and then

00:12:01,200 --> 00:12:05,760
essentially you deploy it to various

00:12:04,500 --> 00:12:07,560
sites and it can be static or dynamic

00:12:05,760 --> 00:12:09,300
and it looks like I cut off my text so

00:12:07,560 --> 00:12:14,220
that's awesome but no worries

00:12:09,300 --> 00:12:16,770
so the Gatsby approach is sort of five

00:12:14,220 --> 00:12:18,330
steps it uses graph QL to provide your

00:12:16,770 --> 00:12:21,240
content query against it at Build time

00:12:18,330 --> 00:12:22,530
so if you know and love graph QL that's

00:12:21,240 --> 00:12:24,240
pretty simple but that does take some

00:12:22,530 --> 00:12:26,940
time to take that static markdown

00:12:24,240 --> 00:12:28,470
content and parse it into graph QL so

00:12:26,940 --> 00:12:31,230
then query against it to then render it

00:12:28,470 --> 00:12:33,990
into markup I think I just skipped all

00:12:31,230 --> 00:12:36,540
five of my steps so that's cool yeah

00:12:33,990 --> 00:12:37,950
I'll just move on then well I probably

00:12:36,540 --> 00:12:44,430
have a bunch of transitions because I

00:12:37,950 --> 00:12:44,930
like animations so yeah and one more all

00:12:44,430 --> 00:12:49,020
right

00:12:44,930 --> 00:12:50,910
so sort of showing that in action you

00:12:49,020 --> 00:12:53,310
have a typical gatsby configuration file

00:12:50,910 --> 00:12:55,350
and it looks a lot like any other

00:12:53,310 --> 00:12:58,140
configuration file you define and you

00:12:55,350 --> 00:12:59,520
define some options and some paths and

00:12:58,140 --> 00:13:01,080
what you're gonna do so that's pretty

00:12:59,520 --> 00:13:04,950
straightforward just copy and paste that

00:13:01,080 --> 00:13:06,420
from the Gatsby documentation and then

00:13:04,950 --> 00:13:09,720
you essentially set up a template you

00:13:06,420 --> 00:13:12,089
import react to import graph QL you

00:13:09,720 --> 00:13:15,089
define your template you export it you

00:13:12,089 --> 00:13:18,330
pulled in markdown parser you define

00:13:15,089 --> 00:13:20,290
your JSX for your thing and then you put

00:13:18,330 --> 00:13:24,770
some inner HTML in there

00:13:20,290 --> 00:13:28,190
and then you essentially query against

00:13:24,770 --> 00:13:30,500
graph QL format that into HTML make that

00:13:28,190 --> 00:13:31,850
available free application so pretty

00:13:30,500 --> 00:13:34,090
straightforward like gossip is great

00:13:31,850 --> 00:13:36,890
right it's not doing anything wrong here

00:13:34,090 --> 00:13:39,650
dojo is taking a fairly similar approach

00:13:36,890 --> 00:13:41,480
with what we call BTR or build time

00:13:39,650 --> 00:13:44,120
rendering that's like the first clue

00:13:41,480 --> 00:13:47,750
that the talk was not called better but

00:13:44,120 --> 00:13:50,540
build time rendering and probably the

00:13:47,750 --> 00:13:53,090
main distinction is dojo provides this

00:13:50,540 --> 00:13:55,340
as part of its entire framework and so

00:13:53,090 --> 00:13:57,320
we're able to sort of seamlessly switch

00:13:55,340 --> 00:13:59,210
between using build time rendering and

00:13:57,320 --> 00:14:00,680
not using build time rendering and we're

00:13:59,210 --> 00:14:03,260
able to provide this on a component

00:14:00,680 --> 00:14:06,350
level so it's fairly easy to say here's

00:14:03,260 --> 00:14:08,450
like a data grid that's backed by some

00:14:06,350 --> 00:14:10,610
markdown service without having to sort

00:14:08,450 --> 00:14:13,400
of recreate this entire top level graph

00:14:10,610 --> 00:14:15,860
QL infrastructure and it's typed like a

00:14:13,400 --> 00:14:19,040
normal widget and so the idea is we've

00:14:15,860 --> 00:14:22,130
got basically component level

00:14:19,040 --> 00:14:24,140
reusability and awareness of things that

00:14:22,130 --> 00:14:25,580
would happen on the server side and then

00:14:24,140 --> 00:14:28,760
we've got this feature called a block

00:14:25,580 --> 00:14:32,000
and what a dojo block is is it's a set

00:14:28,760 --> 00:14:33,740
of code that can be run at the time

00:14:32,000 --> 00:14:35,510
we're building our code so build time

00:14:33,740 --> 00:14:38,540
rendering and you can do anything you

00:14:35,510 --> 00:14:40,430
can do a node at that time so you could

00:14:38,540 --> 00:14:42,650
read a markdown file you could parse

00:14:40,430 --> 00:14:43,280
images you could do anything you could

00:14:42,650 --> 00:14:45,200
do in node

00:14:43,280 --> 00:14:48,770
and use that as part of your build time

00:14:45,200 --> 00:14:51,320
rendering step so dojo sets a flag

00:14:48,770 --> 00:14:53,780
basically a feature detection flag to

00:14:51,320 --> 00:14:55,670
determine if you're in build time render

00:14:53,780 --> 00:14:57,920
mode so within your component or widget

00:14:55,670 --> 00:14:59,270
you can sort of you do conditional logic

00:14:57,920 --> 00:15:00,470
based on that and that's kind of the

00:14:59,270 --> 00:15:02,839
only change you would make in your

00:15:00,470 --> 00:15:06,589
application in terms of your rendering

00:15:02,839 --> 00:15:08,180
in terms of what gets displayed so then

00:15:06,589 --> 00:15:10,010
you might define a block that looks like

00:15:08,180 --> 00:15:12,050
this and in this case you're like this

00:15:10,010 --> 00:15:13,370
is client-side code but it's all sort of

00:15:12,050 --> 00:15:15,770
server-side code right and then we're

00:15:13,370 --> 00:15:17,890
basically imported from the file system

00:15:15,770 --> 00:15:20,690
or in this case importing this Showdown

00:15:17,890 --> 00:15:22,750
markdown parser and then we're just

00:15:20,690 --> 00:15:26,170
resolving a path loading a file

00:15:22,750 --> 00:15:29,450
converting it to HTML and returning that

00:15:26,170 --> 00:15:31,670
and then we have some boilerplate for a

00:15:29,450 --> 00:15:33,889
dojo widget in this case we're pulling

00:15:31,670 --> 00:15:37,879
in a block or pulling in

00:15:33,889 --> 00:15:39,439
typescripts version of JSX pulling our

00:15:37,879 --> 00:15:42,139
mark down in and some other dependencies

00:15:39,439 --> 00:15:44,990
but then our actual render function is

00:15:42,139 --> 00:15:47,149
just using what's called a meta what a

00:15:44,990 --> 00:15:48,649
meta isn't dojo is it takes things that

00:15:47,149 --> 00:15:49,939
normally require you to access the DOM

00:15:48,649 --> 00:15:52,550
and just provides them as reactive

00:15:49,939 --> 00:15:55,399
properties to work with directly so the

00:15:52,550 --> 00:15:57,079
idea in dojo is you never sort of say oh

00:15:55,399 --> 00:15:58,670
I actually need the dog I'm going to

00:15:57,079 --> 00:15:59,990
break the reactive architecture instead

00:15:58,670 --> 00:16:01,279
we just give you the reactive

00:15:59,990 --> 00:16:02,779
architecture and the properties that

00:16:01,279 --> 00:16:05,569
would be used so for things like

00:16:02,779 --> 00:16:07,279
intersection observers or web animations

00:16:05,569 --> 00:16:09,980
or things like that you still can follow

00:16:07,279 --> 00:16:13,249
that architecture so basically we're

00:16:09,980 --> 00:16:14,930
grabbing a markdown file populating it

00:16:13,249 --> 00:16:18,379
into the tree so really straightforward

00:16:14,930 --> 00:16:20,209
there's an example here that includes

00:16:18,379 --> 00:16:22,009
this and it's runnable and it's a PWA

00:16:20,209 --> 00:16:23,209
and i get some 100 out of 100 on all the

00:16:22,009 --> 00:16:25,819
lighthouse tests and everything like

00:16:23,209 --> 00:16:27,709
that so it's at bitly slash city j/s

00:16:25,819 --> 00:16:31,519
dojo blocks if you want to try it out at

00:16:27,709 --> 00:16:33,379
home so really all we've done is we've

00:16:31,519 --> 00:16:34,910
said okay we really like gatsby we

00:16:33,379 --> 00:16:37,249
really like the approaches that we've

00:16:34,910 --> 00:16:39,019
seen others use but if we have control

00:16:37,249 --> 00:16:41,360
over sort of the full framework and the

00:16:39,019 --> 00:16:42,709
full render cycle we want to be able to

00:16:41,360 --> 00:16:44,750
take advantage of that and create

00:16:42,709 --> 00:16:47,569
components that are easier to reuse and

00:16:44,750 --> 00:16:48,889
then define blocks for common behaviors

00:16:47,569 --> 00:16:51,350
so we could imagine having blocks from

00:16:48,889 --> 00:16:53,360
markdown parsing blocks for sort of

00:16:51,350 --> 00:16:55,129
defining all the different scaled images

00:16:53,360 --> 00:16:57,199
you might want and sort of any other

00:16:55,129 --> 00:16:59,480
thing you might think of doing for build

00:16:57,199 --> 00:17:01,490
time rendering and if you go and get hub

00:16:59,480 --> 00:17:04,069
under the dojo repo and it gets github

00:17:01,490 --> 00:17:05,929
slash dojo slash site

00:17:04,069 --> 00:17:08,959
we're actually redoing the entire dojo

00:17:05,929 --> 00:17:09,949
site now using these concepts so we're

00:17:08,959 --> 00:17:12,439
kind of dogfooding

00:17:09,949 --> 00:17:13,730
all these api's and figuring it out to

00:17:12,439 --> 00:17:16,640
sort of summarize there's a lot of

00:17:13,730 --> 00:17:18,230
different approaches you can take and to

00:17:16,640 --> 00:17:19,730
be fair compared to five years ago any

00:17:18,230 --> 00:17:21,380
of these approaches are pretty good

00:17:19,730 --> 00:17:24,439
right all of these things make our

00:17:21,380 --> 00:17:27,649
applications faster but if we really

00:17:24,439 --> 00:17:31,909
think about we really have the benefit

00:17:27,649 --> 00:17:33,500
of being fact flexible and fast the only

00:17:31,909 --> 00:17:35,960
con potentially is the time to

00:17:33,500 --> 00:17:37,769
interactive is greater than the first

00:17:35,960 --> 00:17:39,639
content full paint

00:17:37,769 --> 00:17:41,470
compared to some of the others I think

00:17:39,639 --> 00:17:44,320
we have a lot more flexibility quite a

00:17:41,470 --> 00:17:46,179
bit faster and what you're really

00:17:44,320 --> 00:17:47,529
scaling on is your JavaScript size so

00:17:46,179 --> 00:17:50,590
you'll see some of these traditional

00:17:47,529 --> 00:17:52,899
mechanisms like static HTML it's really

00:17:50,590 --> 00:17:54,639
based on your deploy side your SSR plus

00:17:52,899 --> 00:17:57,340
rehydration as sort of how many servers

00:17:54,639 --> 00:17:59,379
you can throw at the problem but still

00:17:57,340 --> 00:18:02,080
we're scaling by the JavaScript sides so

00:17:59,379 --> 00:18:03,700
if you still try to serve four megabytes

00:18:02,080 --> 00:18:05,859
of JavaScript it's still gonna be slow

00:18:03,700 --> 00:18:07,389
it's just going to paint a little bit

00:18:05,859 --> 00:18:08,409
faster and be interactive a little bit

00:18:07,389 --> 00:18:12,849
faster and then you're still going to

00:18:08,409 --> 00:18:15,039
load all that stuff one nice thing dojo

00:18:12,849 --> 00:18:16,690
does is it really optimizes for that

00:18:15,039 --> 00:18:18,249
initial bundle I'm not trying to sell

00:18:16,690 --> 00:18:19,629
you on dojo it just I'm very passionate

00:18:18,249 --> 00:18:22,659
about it obviously I've been working on

00:18:19,629 --> 00:18:24,489
it for a little while 15 years I think

00:18:22,659 --> 00:18:27,190
some of you were probably in diapers or

00:18:24,489 --> 00:18:30,119
nappies back then so that's good so back

00:18:27,190 --> 00:18:34,889
to the title was it bitter

00:18:30,119 --> 00:18:41,649
Fister awesome I don't know what it is

00:18:34,889 --> 00:18:43,690
it is nice build time rendering fast and

00:18:41,649 --> 00:18:46,349
awesome or alternative to server-side

00:18:43,690 --> 00:18:49,509
rendering so that's the puzzle served

00:18:46,349 --> 00:18:52,259
few quick things before we hand it over

00:18:49,509 --> 00:18:53,619
switch 30 seconds if my remote works

00:18:52,259 --> 00:18:56,080
there we go

00:18:53,619 --> 00:18:57,669
all right so we create milestone mayhem

00:18:56,080 --> 00:18:59,379
a card game that looks at the ups and

00:18:57,669 --> 00:19:00,669
downs of software development there's

00:18:59,379 --> 00:19:02,649
some excited people in the crowd that

00:19:00,669 --> 00:19:04,029
have played it before I have about 10

00:19:02,649 --> 00:19:05,529
copies of it so find me at the after

00:19:04,029 --> 00:19:08,919
party and asked me a good question and

00:19:05,529 --> 00:19:11,499
you two may receive a copy we do the

00:19:08,919 --> 00:19:12,729
talk script podcast talks script fm we

00:19:11,499 --> 00:19:14,799
have a lot of fun interview a lot of

00:19:12,729 --> 00:19:15,970
great people and I work with psych Penn

00:19:14,799 --> 00:19:17,379
where we do lots of great work with

00:19:15,970 --> 00:19:19,570
JavaScript we work a lot of open source

00:19:17,379 --> 00:19:21,099
or live consulting we're spread across

00:19:19,570 --> 00:19:24,899
the u.s. and the UK we all work from

00:19:21,099 --> 00:19:24,899

YouTube URL: https://www.youtube.com/watch?v=2cX_NSos11k


