Title: Syntactic Sugar - Diabetes Alert  - City JS Conf 2019
Publication date: 2019-05-14
Playlist: City JS Conf 2019
Description: 
	Maya Shavin

JavaScript starting with ES6 offered a lot of new syntax and features. Most helps saving lines of code needs, while improves code readability and reduces the learning curve for the language.
Yet usage of these syntax without considering consequences nor situation can bring the exact opposite result. In this session, we will discuss about these pitfalls, and how to develop more proactive coding habit .

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:04,980
just a question before I would start you

00:00:03,389 --> 00:00:06,990
guys already know what it syntactic

00:00:04,980 --> 00:00:09,990
sugar right so what do you think about

00:00:06,990 --> 00:00:12,389
it you guys think that it's just

00:00:09,990 --> 00:00:15,000
syntactic sugar if you do things so

00:00:12,389 --> 00:00:17,190
ratios like it doesn't do anything it

00:00:15,000 --> 00:00:21,660
doesn't affect any perform on his wife

00:00:17,190 --> 00:00:24,269
it's just a way to write code okay I

00:00:21,660 --> 00:00:28,349
suppose I thought it was someone would

00:00:24,269 --> 00:00:30,689
tell me that yeah I think so so I would

00:00:28,349 --> 00:00:33,540
talk about about syntactic sugar and

00:00:30,689 --> 00:00:36,770
what was the good thing about what's the

00:00:33,540 --> 00:00:40,379
bad thing about it but first before that

00:00:36,770 --> 00:00:42,840
when I do Google search for my talk I

00:00:40,379 --> 00:00:45,329
mean when I search for it I found a

00:00:42,840 --> 00:00:49,620
bunch of twit that talking about -

00:00:45,329 --> 00:00:53,430
syntactic sugar some are good well some

00:00:49,620 --> 00:00:55,410
not so much like okay say it just means

00:00:53,430 --> 00:00:59,789
that it doesn't matter about performance

00:00:55,410 --> 00:01:04,890
I will say whether the synthetical to be

00:00:59,789 --> 00:01:09,270
over before the other good and this my

00:01:04,890 --> 00:01:11,390
favorite so with the for loop it's just

00:01:09,270 --> 00:01:14,700
another syntactic sugar for while loop

00:01:11,390 --> 00:01:18,240
well you know what I have to agree on

00:01:14,700 --> 00:01:20,250
that to certain poor because in the end

00:01:18,240 --> 00:01:24,330
it just looping through in Terry

00:01:20,250 --> 00:01:27,930
iterating through the array or you know

00:01:24,330 --> 00:01:30,509
map of something so and I did check and

00:01:27,930 --> 00:01:31,939
let's do it if the performance is almost

00:01:30,509 --> 00:01:35,220
the same

00:01:31,939 --> 00:01:38,009
so what I'll talk about we will do a

00:01:35,220 --> 00:01:43,170
quick gap about what exactly is in

00:01:38,009 --> 00:01:47,100
tactic sugar and sorry and when it is

00:01:43,170 --> 00:01:49,829
sweet and when it becomes too much to

00:01:47,100 --> 00:01:51,990
handle and when it's become too much

00:01:49,829 --> 00:01:55,820
what should we do in order to avoid it

00:01:51,990 --> 00:01:59,520
or in order to address it before

00:01:55,820 --> 00:02:00,899
everything of course it's about me so

00:01:59,520 --> 00:02:03,250
amaura Ironman yeah

00:02:00,899 --> 00:02:06,460
am i remain no

00:02:03,250 --> 00:02:08,470
I'm actually like Ramona's say I'm a

00:02:06,460 --> 00:02:10,570
sinner front-end developer and cloudy

00:02:08,470 --> 00:02:12,490
nari if anyone heard about clowning

00:02:10,570 --> 00:02:15,760
right before we just gave away the whole

00:02:12,490 --> 00:02:19,090
big student TV 55 inch and a bunch of

00:02:15,760 --> 00:02:21,370
unicorns yeah I'm also found of view

00:02:19,090 --> 00:02:23,860
chests Israel and IMAP right upfront and

00:02:21,370 --> 00:02:25,570
weekly which I don't write that much

00:02:23,860 --> 00:02:27,970
recently okay I don't have enough time

00:02:25,570 --> 00:02:32,200
so it's not really friendly for me but

00:02:27,970 --> 00:02:35,050
Molly front in quarterly and you can

00:02:32,200 --> 00:02:38,920
also check out my portfolio and I'm

00:02:35,050 --> 00:02:41,740
available on social media in my oven so

00:02:38,920 --> 00:02:43,650
just hit up anyway you can follow me

00:02:41,740 --> 00:02:46,420
okay I'm gonna send me a message and so

00:02:43,650 --> 00:02:52,720
so what about what is Center syntactic

00:02:46,420 --> 00:02:55,840
sugar this this is no mokou it's just do

00:02:52,720 --> 00:02:59,170
something it's just a simple loop so in

00:02:55,840 --> 00:03:02,020
JavaScript actually you can write

00:02:59,170 --> 00:03:04,720
something like this or you can write

00:03:02,020 --> 00:03:10,180
something like this which the fuel for a

00:03:04,720 --> 00:03:13,060
six or map in the same array it do the

00:03:10,180 --> 00:03:15,880
same thing like for loop fuel and maybe

00:03:13,060 --> 00:03:19,540
different but the same concept it's in

00:03:15,880 --> 00:03:22,450
its syntactic sugar and you can argue

00:03:19,540 --> 00:03:24,910
that it just synthetic sugar but it's

00:03:22,450 --> 00:03:29,770
not just me it's not and I'm going to

00:03:24,910 --> 00:03:33,750
prove it so synthetic sugar first one is

00:03:29,770 --> 00:03:37,959
syntactic and it attentative syntax that

00:03:33,750 --> 00:03:41,470
allow people to write simply a code more

00:03:37,959 --> 00:03:44,440
usable and it's supposed to be a good

00:03:41,470 --> 00:03:47,430
code because simply and use it more

00:03:44,440 --> 00:03:50,800
useable more reusable on so that

00:03:47,430 --> 00:03:52,900
developer actually can can understand it

00:03:50,800 --> 00:03:55,690
and can save a lot of time writing it

00:03:52,900 --> 00:03:57,370
and for new developer like junior one

00:03:55,690 --> 00:04:00,790
who start just started to learn by

00:03:57,370 --> 00:04:03,489
JavaScript will be able to catch to

00:04:00,790 --> 00:04:07,690
catch up the concept easily and of

00:04:03,489 --> 00:04:09,489
course because of that it's really it's

00:04:07,690 --> 00:04:12,940
very readability I mean it's very

00:04:09,489 --> 00:04:16,420
readable the readability is high I know

00:04:12,940 --> 00:04:18,960
like I said before javascript wanted

00:04:16,420 --> 00:04:22,450
- agreed javascript is a bunch of

00:04:18,960 --> 00:04:26,050
chocolate own about syntactic sugar is

00:04:22,450 --> 00:04:28,480
everywhere it javascript you can do a

00:04:26,050 --> 00:04:29,920
lot of thing it's dynamic so everything

00:04:28,480 --> 00:04:32,350
in JavaScript you can consider it

00:04:29,920 --> 00:04:35,500
synthetic because it's simple and it's

00:04:32,350 --> 00:04:41,260
it's usually reusable and it's also

00:04:35,500 --> 00:04:43,210
readable however we see let's say when

00:04:41,260 --> 00:04:45,640
the job so when it's javascript is

00:04:43,210 --> 00:04:46,570
considered good like syntactic it

00:04:45,640 --> 00:04:49,090
considered good

00:04:46,570 --> 00:04:53,380
I say when it's quit it's really sweet

00:04:49,090 --> 00:04:56,500
like you see here the let and cons for

00:04:53,380 --> 00:04:58,330
example it's a synthetic for it's a

00:04:56,500 --> 00:05:01,840
replacement it's not replacement is an

00:04:58,330 --> 00:05:05,050
eternity for for that and it's good it's

00:05:01,840 --> 00:05:07,630
a void it allow us to avoid on the on

00:05:05,050 --> 00:05:10,210
the problem with Val like because

00:05:07,630 --> 00:05:13,510
technically it's the global object if

00:05:10,210 --> 00:05:15,820
you discard if you were declared outside

00:05:13,510 --> 00:05:19,210
of the scope of the function and it's

00:05:15,820 --> 00:05:22,510
actually protect our code from doing

00:05:19,210 --> 00:05:24,850
stupid mistake like reassign is

00:05:22,510 --> 00:05:28,980
somewhere inside of code when if you're

00:05:24,850 --> 00:05:32,770
not supposed to do it for someone this

00:05:28,980 --> 00:05:33,400
they assemble and you this in the quiz

00:05:32,770 --> 00:05:38,560
yeah

00:05:33,400 --> 00:05:42,240
so this you I corn it Deadpool trap does

00:05:38,560 --> 00:05:48,190
look like that poon what the tooling

00:05:42,240 --> 00:05:50,740
it's actually pretty common because when

00:05:48,190 --> 00:05:52,870
we tie with the plus and plus somehow it

00:05:50,740 --> 00:05:55,900
type too fast and then we missed

00:05:52,870 --> 00:06:00,640
something and then instead of two and

00:05:55,900 --> 00:06:06,280
life finding out baaa it will print out

00:06:00,640 --> 00:06:10,030
banana and it's bad but with this that

00:06:06,280 --> 00:06:12,360
print template we can actually avoid it

00:06:10,030 --> 00:06:13,840
and also it makes more readable and

00:06:12,360 --> 00:06:15,700
let's go

00:06:13,840 --> 00:06:17,920
you don't we don't have to use like a

00:06:15,700 --> 00:06:20,290
plus we don't have to use that plus and

00:06:17,920 --> 00:06:25,360
plus is not good in Java super in

00:06:20,290 --> 00:06:27,730
general and another one like this we

00:06:25,360 --> 00:06:29,650
have to like for example I want to check

00:06:27,730 --> 00:06:33,639
if this expression is

00:06:29,650 --> 00:06:35,169
this or not like like I have an object

00:06:33,639 --> 00:06:38,380
lesson food and I need to check whether

00:06:35,169 --> 00:06:41,620
the objects is passed correctly whether

00:06:38,380 --> 00:06:44,259
it's none or empty or undefined so I

00:06:41,620 --> 00:06:47,070
checked like and you know this is for

00:06:44,259 --> 00:06:51,940
common everyone do it once in a while

00:06:47,070 --> 00:06:55,120
but again why do we do need to do that I

00:06:51,940 --> 00:06:58,210
mean it's true and false you have to

00:06:55,120 --> 00:06:58,840
actually write true and false here while

00:06:58,210 --> 00:07:03,160
you can

00:06:58,840 --> 00:07:07,000
just with double what this is call that

00:07:03,160 --> 00:07:10,840
thing Oh exclamation mark yeah

00:07:07,000 --> 00:07:14,500
English so yeah that double exclamation

00:07:10,840 --> 00:07:16,900
mark I did I used to dislike it because

00:07:14,500 --> 00:07:19,210
I like why do you do double negatives

00:07:16,900 --> 00:07:21,849
here but in JavaScript double negative

00:07:19,210 --> 00:07:25,060
means that you actually converted into

00:07:21,849 --> 00:07:28,419
boolean optional variable so instead of

00:07:25,060 --> 00:07:31,240
writing a whole long line it's just

00:07:28,419 --> 00:07:34,800
reading like this and it's become more

00:07:31,240 --> 00:07:37,300
concise everyone understand that this is

00:07:34,800 --> 00:07:39,669
to check whether this is true or not

00:07:37,300 --> 00:07:41,010
sure whether this this object is exists

00:07:39,669 --> 00:07:45,340
exists or not

00:07:41,010 --> 00:07:49,630
how about the next one I get this one

00:07:45,340 --> 00:07:51,580
you get a lot right like we have to we

00:07:49,630 --> 00:07:53,380
have to get some kind of property nested

00:07:51,580 --> 00:07:55,870
inside property in essence our property

00:07:53,380 --> 00:07:57,610
in essence inside an object how do we do

00:07:55,870 --> 00:08:01,210
that how do we know that which one of

00:07:57,610 --> 00:08:03,340
them is going to break our core and run

00:08:01,210 --> 00:08:06,250
them so you need to check one by one

00:08:03,340 --> 00:08:09,039
like this and it's go on and actually

00:08:06,250 --> 00:08:12,159
this one is not the solution is not yet

00:08:09,039 --> 00:08:17,919
released but for anyone who you angular

00:08:12,159 --> 00:08:20,949
probably know it it's already passed the

00:08:17,919 --> 00:08:23,440
stage I think stage 3 and I don't

00:08:20,949 --> 00:08:27,159
remember exactly but it's going to be

00:08:23,440 --> 00:08:32,050
released soon and already in angular in

00:08:27,159 --> 00:08:33,820
angular it's already embedded in angular

00:08:32,050 --> 00:08:36,520
so you cannot you can write like this

00:08:33,820 --> 00:08:39,490
and they stand for whether if the object

00:08:36,520 --> 00:08:42,250
is exists then check it the chalasis and

00:08:39,490 --> 00:08:43,390
then take the property so instead of the

00:08:42,250 --> 00:08:46,960
whole bunch

00:08:43,390 --> 00:08:49,450
like one two three check we only need to

00:08:46,960 --> 00:08:51,520
write this much and still understandable

00:08:49,450 --> 00:08:56,650
that we are checking where there's none

00:08:51,520 --> 00:09:01,060
or not and the core is clear and the

00:08:56,650 --> 00:09:15,010
last one this one anyone use this one

00:09:01,060 --> 00:09:17,980
alone anyone okay I went well their

00:09:15,010 --> 00:09:22,720
assets it's done that's sweet the way to

00:09:17,980 --> 00:09:26,790
do it it just simply to use a rate array

00:09:22,720 --> 00:09:30,250
syntax which is much faster by the way

00:09:26,790 --> 00:09:33,040
because the other way is you actually

00:09:30,250 --> 00:09:35,950
call the constructor of the class of the

00:09:33,040 --> 00:09:38,440
after function and to come to provide

00:09:35,950 --> 00:09:41,140
you a new object and it cost a lot over

00:09:38,440 --> 00:09:42,730
it in the in the background why we

00:09:41,140 --> 00:09:46,120
already have this one in JavaScript so

00:09:42,730 --> 00:09:48,100
use it and it's object it's not the

00:09:46,120 --> 00:09:52,270
place for object oriented so much in

00:09:48,100 --> 00:09:55,000
this because why it's faster in

00:09:52,270 --> 00:10:00,030
performance it you can test it it's

00:09:55,000 --> 00:10:02,740
faster and one older but again expects

00:10:00,030 --> 00:10:05,140
respectively which mean that not

00:10:02,740 --> 00:10:07,270
everything is faster but some of the

00:10:05,140 --> 00:10:10,860
syntax are really faster for example

00:10:07,270 --> 00:10:13,750
object creation and a recreation or

00:10:10,860 --> 00:10:16,090
empty an array when you do instead of

00:10:13,750 --> 00:10:20,200
doing the whole loop of supply like

00:10:16,090 --> 00:10:23,320
delete a pop pop the and elements of the

00:10:20,200 --> 00:10:25,870
array you can just you simply array dot

00:10:23,320 --> 00:10:28,870
length equals zero and it just clean up

00:10:25,870 --> 00:10:33,190
on the on the pointer on the reference

00:10:28,870 --> 00:10:36,460
to the array and clean up the array some

00:10:33,190 --> 00:10:40,090
more example for example the default

00:10:36,460 --> 00:10:44,800
value instead of tree line for I'll call

00:10:40,090 --> 00:10:46,360
get one but don't overuse it and and

00:10:44,800 --> 00:10:48,520
also you need to make sure that the

00:10:46,360 --> 00:10:51,160
input value don't receive force by

00:10:48,520 --> 00:10:53,380
default and then like you'd expected

00:10:51,160 --> 00:10:55,090
input value to be something not force

00:10:53,380 --> 00:10:56,200
because now I just keep falling back to

00:10:55,090 --> 00:11:02,139
default

00:10:56,200 --> 00:11:05,290
and here in this function you can

00:11:02,139 --> 00:11:09,010
actually rewrite it by Korean because

00:11:05,290 --> 00:11:11,230
what it does is just providing check in

00:11:09,010 --> 00:11:15,250
if it's event and it is vent and filter

00:11:11,230 --> 00:11:18,010
out well even sorry it's just filter all

00:11:15,250 --> 00:11:21,430
the numbers that is even from the form

00:11:18,010 --> 00:11:23,620
the array and if we were right normally

00:11:21,430 --> 00:11:27,190
it will be taking about 90 line of code

00:11:23,620 --> 00:11:31,240
mean why we use the fewer the new syntax

00:11:27,190 --> 00:11:34,029
it just to like oh it's much more

00:11:31,240 --> 00:11:37,120
readable right and I and you're also

00:11:34,029 --> 00:11:37,990
don't need to to think upon proper name

00:11:37,120 --> 00:11:41,740
for the function

00:11:37,990 --> 00:11:45,699
I hate lemon function anyway but

00:11:41,740 --> 00:11:48,250
sometime it just too sweet everything is

00:11:45,699 --> 00:11:51,820
sweet in school it's good everything is

00:11:48,250 --> 00:11:54,670
actually literary everything is it's

00:11:51,820 --> 00:11:58,089
good until certain level switch also

00:11:54,670 --> 00:12:01,690
syntactic sugar also certain point when

00:11:58,089 --> 00:12:11,019
you overuse it it's become really bad

00:12:01,690 --> 00:12:15,699
we call it the batteries and this one is

00:12:11,019 --> 00:12:20,290
short and if you want the syntactic um

00:12:15,699 --> 00:12:22,449
it used all that cool syntax like anyone

00:12:20,290 --> 00:12:27,220
understand like how the logic here works

00:12:22,449 --> 00:12:29,769
I mean we can actually guess that is

00:12:27,220 --> 00:12:34,000
doing flatten the array by the name of

00:12:29,769 --> 00:12:36,760
the variable but I mean if you try to

00:12:34,000 --> 00:12:39,390
debug it or try someone new come to the

00:12:36,760 --> 00:12:41,769
team and try to understand what is one

00:12:39,390 --> 00:12:45,810
doing like how how it work in the

00:12:41,769 --> 00:12:49,149
background what mmm look it's hard

00:12:45,810 --> 00:12:52,180
because how I'm supposed to know what

00:12:49,149 --> 00:12:56,319
enter which one okay what is it the

00:12:52,180 --> 00:12:58,930
original what is the flatten what Oh in

00:12:56,319 --> 00:13:01,480
this we can earn another one is that we

00:12:58,930 --> 00:13:03,880
rewrite in the refactoring test the flip

00:13:01,480 --> 00:13:07,660
function to a little bit more clear but

00:13:03,880 --> 00:13:09,119
still if you used cons and cons here to

00:13:07,660 --> 00:13:12,979
get an error

00:13:09,119 --> 00:13:17,179
now while you get an arrow here because

00:13:12,979 --> 00:13:19,739
the cost the function doesn't compile

00:13:17,179 --> 00:13:21,929
before everything like phenomenal

00:13:19,739 --> 00:13:25,109
function the function actually in this

00:13:21,929 --> 00:13:29,699
way is compiled in line so if you can

00:13:25,109 --> 00:13:32,149
reduce her before it will not compile if

00:13:29,699 --> 00:13:35,549
you if you if you can't reduce her

00:13:32,149 --> 00:13:41,209
inside flatten inside sorry if you can

00:13:35,549 --> 00:13:43,979
flatten flatten array before reducer

00:13:41,209 --> 00:13:46,319
sorry if you can't reduce her before

00:13:43,979 --> 00:13:49,739
fatten array what if I you get an arrow

00:13:46,319 --> 00:13:52,169
at the opposite its and then in this

00:13:49,739 --> 00:13:54,179
case you need to do it that classic way

00:13:52,169 --> 00:13:58,289
like put it inside of repin inside the

00:13:54,179 --> 00:14:02,759
same function and this works more or

00:13:58,289 --> 00:14:06,719
less still reduce is the most in hard to

00:14:02,759 --> 00:14:08,639
understand at least for me that's how I

00:14:06,719 --> 00:14:11,039
supposed to know which one to reduce run

00:14:08,639 --> 00:14:17,969
apart from the assembler you take the

00:14:11,039 --> 00:14:20,069
sum or in this the three dot I got my

00:14:17,969 --> 00:14:23,789
college the other day actually told me

00:14:20,069 --> 00:14:25,769
that the tree Daria noise them because

00:14:23,789 --> 00:14:27,779
it's nice in one hand but in the other

00:14:25,769 --> 00:14:30,539
hand like if you pass three dots so you

00:14:27,779 --> 00:14:33,839
simply sit going to be a rest or is it

00:14:30,539 --> 00:14:35,219
going to be spread like it go to collect

00:14:33,839 --> 00:14:39,749
everything together are you going to

00:14:35,219 --> 00:14:41,549
spread everything into into parents for

00:14:39,749 --> 00:14:43,859
in this day the first one need to

00:14:41,549 --> 00:14:47,099
collect the second while to spread into

00:14:43,859 --> 00:14:49,139
an argument again but the same cinta how

00:14:47,099 --> 00:14:52,649
was supposed to know how many was

00:14:49,139 --> 00:14:57,029
supposed to know it's thinking about new

00:14:52,649 --> 00:14:59,579
developer come to the team and just in

00:14:57,029 --> 00:15:02,249
this case last code doesn't mean that we

00:14:59,579 --> 00:15:05,039
build more readability anymore because

00:15:02,249 --> 00:15:05,339
you simply cannot see it you cannot read

00:15:05,039 --> 00:15:07,919
it

00:15:05,339 --> 00:15:11,429
new new people are coming to your team

00:15:07,919 --> 00:15:14,579
which they say what did this I mean I

00:15:11,429 --> 00:15:17,729
got it a lot and now in our work we use

00:15:14,579 --> 00:15:19,799
a lot of es6 in it and once in a while

00:15:17,729 --> 00:15:22,349
the new developer come in and complain

00:15:19,799 --> 00:15:22,830
about the fact that the co is really

00:15:22,349 --> 00:15:27,630
hard to

00:15:22,830 --> 00:15:30,390
because it's a lot of literate like a

00:15:27,630 --> 00:15:38,100
lot of spread a lot of filter a lot of

00:15:30,390 --> 00:15:40,680
map again unit you can search in this it

00:15:38,100 --> 00:15:44,040
just very confusing if you overuse it

00:15:40,680 --> 00:15:46,290
and then furthermore Chris Oh Chris I

00:15:44,040 --> 00:15:49,050
already tweet about it like about two

00:15:46,290 --> 00:15:51,960
years three years ago and there was a

00:15:49,050 --> 00:15:54,390
quiz online on life you can check out

00:15:51,960 --> 00:15:55,140
the quiz and tell me how much score you

00:15:54,390 --> 00:15:58,050
get because

00:15:55,140 --> 00:16:01,140
and that's hard the quiz hard you're not

00:15:58,050 --> 00:16:02,970
allowed to use any help actually and the

00:16:01,140 --> 00:16:07,230
quiz will give you a little bunch of

00:16:02,970 --> 00:16:10,620
code writing in es6 in the new syntactic

00:16:07,230 --> 00:16:12,720
sugar in there six and it's make you

00:16:10,620 --> 00:16:15,630
realize that you can actually write khan

00:16:12,720 --> 00:16:18,930
very confusing code even if you don't

00:16:15,630 --> 00:16:20,630
meant to be just because it's too is so

00:16:18,930 --> 00:16:26,190
easy to use it

00:16:20,630 --> 00:16:31,200
what else are there to watch out the net

00:16:26,190 --> 00:16:32,880
assemble filtering and mapping any one

00:16:31,200 --> 00:16:37,920
of you do that's the first one over

00:16:32,880 --> 00:16:40,410
there like if i need to filter a map if

00:16:37,920 --> 00:16:43,380
i only need to filter a map and then i

00:16:40,410 --> 00:16:45,930
need to actually kind of modify the map

00:16:43,380 --> 00:16:48,210
to return for me something else that in

00:16:45,930 --> 00:16:51,140
this way is like okay i receive only the

00:16:48,210 --> 00:16:54,660
even number even number and i get the

00:16:51,140 --> 00:16:58,380
multiple of the even number so if you

00:16:54,660 --> 00:17:01,560
write using synthetic so easy filtered

00:16:58,380 --> 00:17:03,420
or filtered math or in the classic way

00:17:01,560 --> 00:17:08,670
you can see we have to write a whole

00:17:03,420 --> 00:17:13,339
nine ninety lines of code so what is the

00:17:08,670 --> 00:17:17,270
question is what is the the running time

00:17:13,339 --> 00:17:21,680
what is the running time with disco and

00:17:17,270 --> 00:17:30,000
certain question answer anyone knows

00:17:21,680 --> 00:17:32,520
yeah the same yes you alright

00:17:30,000 --> 00:17:36,360
bow up them aren't running in the unit

00:17:32,520 --> 00:17:39,270
on wish me the awareness crane why would

00:17:36,360 --> 00:17:43,680
case perform in the same way but in

00:17:39,270 --> 00:17:47,460
JavaScript if you had more yeah but in

00:17:43,680 --> 00:17:51,210
JavaScript it's oh and it's linear but

00:17:47,460 --> 00:17:56,730
not really linear not really Owen why

00:17:51,210 --> 00:17:59,370
because for someone big number if you

00:17:56,730 --> 00:18:02,190
write the first one filter the browser

00:17:59,370 --> 00:18:04,470
actually have to wait the synchronous

00:18:02,190 --> 00:18:07,080
synchronized and JavaScript is one

00:18:04,470 --> 00:18:10,170
threat unless I'm wrong that they

00:18:07,080 --> 00:18:12,330
already know now that Monte threat but

00:18:10,170 --> 00:18:16,950
if as I know it's only one thread in the

00:18:12,330 --> 00:18:20,240
browser and if you run the filter which

00:18:16,950 --> 00:18:24,270
many go over the loop over 110 top

00:18:20,240 --> 00:18:26,670
100,000 of the elements here and doing

00:18:24,270 --> 00:18:30,660
something and then return a new array

00:18:26,670 --> 00:18:33,090
and during this time unless you do in

00:18:30,660 --> 00:18:35,940
some hair to make it act as synchronized

00:18:33,090 --> 00:18:39,260
it was the browser which stopped working

00:18:35,940 --> 00:18:42,090
like freeze literally until finished

00:18:39,260 --> 00:18:44,550
intereting through the loop and then the

00:18:42,090 --> 00:18:48,060
next thing you do it that you get them

00:18:44,550 --> 00:18:52,620
is you get the map or a filter and the

00:18:48,060 --> 00:18:54,450
map function the data then you got the

00:18:52,620 --> 00:18:58,230
data or refueler and the map function

00:18:54,450 --> 00:18:59,850
will be run on the funeral data again so

00:18:58,230 --> 00:19:03,420
thing about it's like another hundred

00:18:59,850 --> 00:19:06,270
thousand times up running and another

00:19:03,420 --> 00:19:09,630
that another array will be created from

00:19:06,270 --> 00:19:12,240
this for from this just a simple

00:19:09,630 --> 00:19:15,480
function corn from filter and then

00:19:12,240 --> 00:19:19,260
mapped to whatever with fewer it's two

00:19:15,480 --> 00:19:20,700
resources here and the browser will

00:19:19,260 --> 00:19:22,140
stuff the first time in the frozen we

00:19:20,700 --> 00:19:26,190
stuck the second time until we're

00:19:22,140 --> 00:19:28,740
finished into written why in the for

00:19:26,190 --> 00:19:30,780
loop you create the first array you

00:19:28,740 --> 00:19:32,640
create array in the beginning and then

00:19:30,780 --> 00:19:34,470
you're looking through the numbed the

00:19:32,640 --> 00:19:38,250
NAM soiree

00:19:34,470 --> 00:19:40,649
and the normal data the original data

00:19:38,250 --> 00:19:44,070
and do whatever you want to do it during

00:19:40,649 --> 00:19:47,220
the interation and get back to array and

00:19:44,070 --> 00:19:52,259
the new array and it's the browser stuff

00:19:47,220 --> 00:19:54,419
for like 100,000 times it's much better

00:19:52,259 --> 00:19:57,210
but it's not it's much faster in this

00:19:54,419 --> 00:20:00,299
case and I actually run the benchmark

00:19:57,210 --> 00:20:03,870
test page for it so you can check it

00:20:00,299 --> 00:20:06,899
online you can see that the two over

00:20:03,870 --> 00:20:09,090
there the Fuhrer in map will run about

00:20:06,899 --> 00:20:12,720
fifty percent slower than than the other

00:20:09,090 --> 00:20:15,090
one and if you if if the number of that

00:20:12,720 --> 00:20:21,470
the number of elements increased it

00:20:15,090 --> 00:20:24,990
would even worse so yeah it's not he's

00:20:21,470 --> 00:20:27,440
 psycho I mean shorter code

00:20:24,990 --> 00:20:30,960
doesn't mean better performance anymore

00:20:27,440 --> 00:20:35,309
so that's something it's so easy to

00:20:30,960 --> 00:20:37,110
actually oversee this because why you

00:20:35,309 --> 00:20:40,019
should receive it it's so easy to just

00:20:37,110 --> 00:20:42,480
say okay dot fuel and don't map that

00:20:40,019 --> 00:20:47,100
reduced not something this is the same

00:20:42,480 --> 00:20:50,399
thing it's it linear but in in theory is

00:20:47,100 --> 00:20:53,399
linear but in actually code especially

00:20:50,399 --> 00:20:54,990
for javascript is not linear it's not

00:20:53,399 --> 00:21:01,470
linear because everything string called

00:20:54,990 --> 00:21:06,419
synchronous in Chronos and this one

00:21:01,470 --> 00:21:09,840
spread like I said before so in this

00:21:06,419 --> 00:21:13,139
example we have a child object which we

00:21:09,840 --> 00:21:15,809
spread on the on the property of mom and

00:21:13,139 --> 00:21:18,629
on the property of dad and the mom is

00:21:15,809 --> 00:21:20,879
like this in the desk like this so they

00:21:18,629 --> 00:21:24,450
have something similar like tray and

00:21:20,879 --> 00:21:27,659
Trippi but what if I only want to get

00:21:24,450 --> 00:21:33,899
tray from object among and tray be from

00:21:27,659 --> 00:21:39,059
dad which way should I write oh if I

00:21:33,899 --> 00:21:41,360
want to get without the ulis info what

00:21:39,059 --> 00:21:41,360
should I do

00:21:41,460 --> 00:21:48,039
whether whether they spread afraid that

00:21:44,169 --> 00:21:49,990
will help me again it's like you spread

00:21:48,039 --> 00:21:53,019
everything you don't really care don't

00:21:49,990 --> 00:21:55,870
really know what you spread but it's

00:21:53,019 --> 00:21:58,600
also means that whatever junk that in

00:21:55,870 --> 00:22:00,759
the object that you want to spread or

00:21:58,600 --> 00:22:03,039
you want to inherit from it will be

00:22:00,759 --> 00:22:05,830
there it would be in the new object and

00:22:03,039 --> 00:22:07,960
it can be bad we say if they both have

00:22:05,830 --> 00:22:09,909
the same ideal if they have up to two

00:22:07,960 --> 00:22:12,519
element and they both have the different

00:22:09,909 --> 00:22:14,919
ID and then you kind of join them

00:22:12,519 --> 00:22:18,870
together and you only want to get one ID

00:22:14,919 --> 00:22:21,759
from each of them and then another

00:22:18,870 --> 00:22:24,039
another properties from another of them

00:22:21,759 --> 00:22:27,309
but so it's like you cannot really

00:22:24,039 --> 00:22:30,639
control the co you cannot really is it's

00:22:27,309 --> 00:22:32,200
much harder to actually buck this if

00:22:30,639 --> 00:22:34,590
something happens if something goes

00:22:32,200 --> 00:22:37,450
wrong with one of the object you spread

00:22:34,590 --> 00:22:40,779
then the other way like just go in and

00:22:37,450 --> 00:22:46,889
select manually wish which property you

00:22:40,779 --> 00:22:50,769
want to get so clearer hmm it's clear

00:22:46,889 --> 00:22:52,750
because it's just Fred but still a lot

00:22:50,769 --> 00:22:55,149
of overhead later on think about you

00:22:52,750 --> 00:22:58,559
have now you have only about two but

00:22:55,149 --> 00:23:01,360
about five if I after you need to spread

00:22:58,559 --> 00:23:04,029
just do doctor does read none of us read

00:23:01,360 --> 00:23:07,149
none of us read fine like that is hard

00:23:04,029 --> 00:23:09,850
to control it hard to know which one is

00:23:07,149 --> 00:23:13,769
over over I wish one and we should want

00:23:09,850 --> 00:23:19,200
to stay the same which one is its

00:23:13,769 --> 00:23:25,419
nickname in which one original and yeah

00:23:19,200 --> 00:23:30,720
and the last one okay

00:23:25,419 --> 00:23:30,720
I found this tweet I hope he's not here

00:23:31,230 --> 00:23:38,769
well yeah I actually like it because say

00:23:34,629 --> 00:23:43,059
sweet it's synthetic but then I saw one

00:23:38,769 --> 00:23:45,970
thing babble why do you need babble for

00:23:43,059 --> 00:23:49,090
writing syntactic syntax

00:23:45,970 --> 00:23:51,650
I mean syntactic sugar in JavaScript for

00:23:49,090 --> 00:23:57,900
es6 so say for example

00:23:51,650 --> 00:24:00,510
the true is for this small function sum

00:23:57,900 --> 00:24:03,510
up just to do one thing is sum up under

00:24:00,510 --> 00:24:08,520
on the number passed to the to the

00:24:03,510 --> 00:24:11,790
function in babble when you when you use

00:24:08,520 --> 00:24:16,470
it with the default config this you how

00:24:11,790 --> 00:24:22,230
it look it's something like this you can

00:24:16,470 --> 00:24:26,010
check that and this is bad performance

00:24:22,230 --> 00:24:29,040
also because the actual iterator also

00:24:26,010 --> 00:24:32,030
one loop and to get all the parameter

00:24:29,040 --> 00:24:34,830
another loop and then your check and

00:24:32,030 --> 00:24:38,370
something something something you don't

00:24:34,830 --> 00:24:41,490
need to read but yeah Starly Phi Phi

00:24:38,370 --> 00:24:47,970
line of code and it go to 30 31 line of

00:24:41,490 --> 00:24:51,270
code and why so because I and Safari

00:24:47,970 --> 00:24:54,420
doesn't support you some of the feature

00:24:51,270 --> 00:25:00,090
of es6 some of the syntactic sugar we

00:24:54,420 --> 00:25:03,750
only like i 11 we can argue that i 11 no

00:25:00,090 --> 00:25:07,160
one care about your I 11 but for that

00:25:03,750 --> 00:25:10,050
for a safari let's say you should care I

00:25:07,160 --> 00:25:14,130
mean 80 bucks most of the synthetic

00:25:10,050 --> 00:25:15,920
sugars 80% of them or 90% of them was

00:25:14,130 --> 00:25:18,750
already supported in modern browser

00:25:15,920 --> 00:25:20,910
however if you really want to thing up

00:25:18,750 --> 00:25:22,650
on the user from any web the world

00:25:20,910 --> 00:25:24,600
because you cannot control them can

00:25:22,650 --> 00:25:26,430
already tell them that hey your browser

00:25:24,600 --> 00:25:29,040
doesn't know just supports the spread

00:25:26,430 --> 00:25:31,890
operator so sorry you need to go and

00:25:29,040 --> 00:25:35,310
download something air or updated mmm

00:25:31,890 --> 00:25:37,200
user don't like it and Internet Explorer

00:25:35,310 --> 00:25:39,630
yeah you can agree with me then to

00:25:37,200 --> 00:25:41,730
Internet Explorer no one care but I can

00:25:39,630 --> 00:25:43,950
tell you that in my work we do have

00:25:41,730 --> 00:25:51,220
customer that using ie 11 and every time

00:25:43,950 --> 00:25:56,270
they report some some bug is better so

00:25:51,220 --> 00:26:03,260
hey that's this one one nice thing about

00:25:56,270 --> 00:26:06,230
this it actually in different if you're

00:26:03,260 --> 00:26:09,200
not really a performance issue

00:26:06,230 --> 00:26:11,270
I actually perform an issue but I was

00:26:09,200 --> 00:26:14,900
not so sure it's a synthetic thing is

00:26:11,270 --> 00:26:18,680
more like a dynamic way of coding so I

00:26:14,900 --> 00:26:21,020
just put it here for just revert you if

00:26:18,680 --> 00:26:24,560
you look at this it's actually fine

00:26:21,020 --> 00:26:27,830
because you can you is the beauty of

00:26:24,560 --> 00:26:30,410
JavaScript you can dynamically add the

00:26:27,830 --> 00:26:33,020
new property in the same property the

00:26:30,410 --> 00:26:43,190
same object like in this game we add the

00:26:33,020 --> 00:26:48,550
queue as that 55 but in the in in which

00:26:43,190 --> 00:26:53,230
and v8 like in the chrome engine in

00:26:48,550 --> 00:26:56,510
chrome engine Java chip engine of Chrome

00:26:53,230 --> 00:27:00,470
in order to make it fast like we saw

00:26:56,510 --> 00:27:03,740
nowaday in to run Java in very fast it

00:27:00,470 --> 00:27:05,720
keep the hidden class of each object it

00:27:03,740 --> 00:27:07,730
created it keep the hidden class and

00:27:05,720 --> 00:27:10,100
every time when you add a new property

00:27:07,730 --> 00:27:13,670
it actually created a new shadow like a

00:27:10,100 --> 00:27:17,990
new hidden class in order to make to

00:27:13,670 --> 00:27:20,210
make sure that the to make sure that it

00:27:17,990 --> 00:27:25,400
will be able to access the object fast

00:27:20,210 --> 00:27:29,120
enough and so if you add a new one let's

00:27:25,400 --> 00:27:31,520
before the act up before one create a P

00:27:29,120 --> 00:27:33,680
and Q both of them will point to the

00:27:31,520 --> 00:27:36,650
same shadow object like the same hidden

00:27:33,680 --> 00:27:39,440
class in the background and then when

00:27:36,650 --> 00:27:42,110
you add another property to Q actually

00:27:39,440 --> 00:27:45,710
point upon the object is create a new

00:27:42,110 --> 00:27:47,570
class it is the in the back in the what

00:27:45,710 --> 00:27:50,750
is in the behind the scene and the

00:27:47,570 --> 00:27:53,900
compiler Korean new the caller in your

00:27:50,750 --> 00:27:57,010
class and map the hash on the property

00:27:53,900 --> 00:28:01,340
into that flash and the previous become

00:27:57,010 --> 00:28:03,800
the hidden class and if you do it 10

00:28:01,340 --> 00:28:04,669
more times like adding a new new

00:28:03,800 --> 00:28:06,529
property again

00:28:04,669 --> 00:28:10,609
again and ten more hidden class will be

00:28:06,529 --> 00:28:14,029
created and it's bad for for performing

00:28:10,609 --> 00:28:15,789
resource management so that's also the

00:28:14,029 --> 00:28:18,470
reason why I don't put class here

00:28:15,789 --> 00:28:20,480
because someone with some some people

00:28:18,470 --> 00:28:21,889
will ask me why don't you put class

00:28:20,480 --> 00:28:23,869
because class is just function in

00:28:21,889 --> 00:28:26,029
JavaScript and it's only because

00:28:23,869 --> 00:28:28,820
function in JavaScript mean that is not

00:28:26,029 --> 00:28:31,759
good when you try to do object object

00:28:28,820 --> 00:28:34,369
oriented in the object oriented in

00:28:31,759 --> 00:28:37,190
JavaScript and because JavaScript rotat

00:28:34,369 --> 00:28:39,409
I oriented so if your function is use

00:28:37,190 --> 00:28:42,350
class it's actually the wrapper route

00:28:39,409 --> 00:28:45,739
for object for sorry a wrapper alpha

00:28:42,350 --> 00:28:51,169
function create like create new function

00:28:45,739 --> 00:28:53,710
the classics function but class if you

00:28:51,169 --> 00:28:55,879
use it correctly for some actress

00:28:53,710 --> 00:28:56,899
because in class you have you

00:28:55,879 --> 00:28:59,929
disappeared

00:28:56,899 --> 00:29:01,700
actually the way organizing your cool so

00:28:59,929 --> 00:29:04,700
you have to declare all the properties

00:29:01,700 --> 00:29:07,039
in class before beforehand and it's

00:29:04,700 --> 00:29:10,129
helped the developer to be your new and

00:29:07,039 --> 00:29:13,970
good way a good habit I'll declare on

00:29:10,129 --> 00:29:17,509
the property beforehand so this make the

00:29:13,970 --> 00:29:20,450
performance better so I I cannot put it

00:29:17,509 --> 00:29:24,049
here it's to its function but in the

00:29:20,450 --> 00:29:27,129
practice it's a good practice just think

00:29:24,049 --> 00:29:30,200
about it like trying not to use a lot of

00:29:27,129 --> 00:29:32,119
tried not to modify a lot of properties

00:29:30,200 --> 00:29:33,529
in the same object because behind the

00:29:32,119 --> 00:29:35,539
screen is not the same object it's

00:29:33,529 --> 00:29:37,999
actually the new object already the same

00:29:35,539 --> 00:29:41,179
Arturo objects to somewhere is hidden

00:29:37,999 --> 00:29:43,580
there until you delete one of the if you

00:29:41,179 --> 00:29:48,129
delete one a property would revert back

00:29:43,580 --> 00:29:51,950
to the O to the hidden after created and

00:29:48,129 --> 00:29:56,809
that's why we need to handle our code

00:29:51,950 --> 00:30:01,580
with care with easy to easy sale and

00:29:56,809 --> 00:30:03,259
done right so one it care the kiss self

00:30:01,580 --> 00:30:06,950
or check check and check

00:30:03,259 --> 00:30:10,249
all we have to check don't assume that

00:30:06,950 --> 00:30:13,489
this is just in tatak sugar if we don't

00:30:10,249 --> 00:30:16,519
like that first thing because you need

00:30:13,489 --> 00:30:18,149
to check if your Co is you cannot just

00:30:16,519 --> 00:30:21,289
use it finally I

00:30:18,149 --> 00:30:24,059
Theodore what did the side effect and

00:30:21,289 --> 00:30:26,939
Matt what is the side effect reduced we

00:30:24,059 --> 00:30:28,649
do is we using recursive mode what is

00:30:26,939 --> 00:30:31,529
the side effect of the Oh kind of stuff

00:30:28,649 --> 00:30:35,579
check with someone know check with your

00:30:31,529 --> 00:30:37,969
um your senior check with Google check

00:30:35,579 --> 00:30:43,889
with anyone Twitter check with Chris

00:30:37,969 --> 00:30:45,539
much and ask for review don't don't

00:30:43,889 --> 00:30:47,729
never assume that you write the best

00:30:45,539 --> 00:30:49,139
code I never had assumed that I write

00:30:47,729 --> 00:30:51,689
the best so actually in the other hand

00:30:49,139 --> 00:30:53,939
every time I look back to my code after

00:30:51,689 --> 00:30:58,409
about one month I feel like who write

00:30:53,939 --> 00:31:00,779
this code it's not me yeah you need to

00:30:58,409 --> 00:31:04,559
ask for review Co review is good but

00:31:00,779 --> 00:31:07,619
what I can say that is I found it's more

00:31:04,559 --> 00:31:10,709
better to actually do Co review with a

00:31:07,619 --> 00:31:13,829
junior up someone new to the company and

00:31:10,709 --> 00:31:16,109
tend to always assign the code review to

00:31:13,829 --> 00:31:17,599
the person who knew to my to my team or

00:31:16,109 --> 00:31:20,009
someone that have less experience

00:31:17,599 --> 00:31:23,279
because the person will give you the

00:31:20,009 --> 00:31:24,899
honors in from honest feedback why he

00:31:23,279 --> 00:31:27,809
doesn't understand this and whether the

00:31:24,899 --> 00:31:30,899
way I'm using this code correct or maybe

00:31:27,809 --> 00:31:33,869
he he saw what I don't see and the other

00:31:30,899 --> 00:31:36,209
day like a couple months ago we have the

00:31:33,869 --> 00:31:40,039
same debate about what is better swished

00:31:36,209 --> 00:31:42,689
case or if else are just object mapping

00:31:40,039 --> 00:31:47,279
we have the whole article article about

00:31:42,689 --> 00:31:49,399
that you can read online and read all we

00:31:47,279 --> 00:31:52,259
have to read read document we have

00:31:49,399 --> 00:31:55,379
documentation to read we have pluck'd to

00:31:52,259 --> 00:31:58,949
read we have other people best practice

00:31:55,379 --> 00:32:01,349
a lot of resources just need to read the

00:31:58,949 --> 00:32:03,989
more you read the better you understand

00:32:01,349 --> 00:32:08,179
like how the compiler would behind the

00:32:03,989 --> 00:32:10,799
scene how the Babel tress help people

00:32:08,179 --> 00:32:14,879
transfer on your code to actually travel

00:32:10,799 --> 00:32:17,039
on other es5 code some something like

00:32:14,879 --> 00:32:20,219
that you could know by really not trying

00:32:17,039 --> 00:32:22,199
to read when the bundleco of course it's

00:32:20,219 --> 00:32:26,400
not easy to read those the whole bundle

00:32:22,199 --> 00:32:29,760
but yeah I try I did and I liked it

00:32:26,400 --> 00:32:31,919
and the last one is Eclipse City you can

00:32:29,760 --> 00:32:34,620
make it concise you can make it short

00:32:31,919 --> 00:32:39,330
but you need to make it stand for itself

00:32:34,620 --> 00:32:44,580
make it understandable make it really

00:32:39,330 --> 00:32:48,179
really really how to say clear to almost

00:32:44,580 --> 00:32:52,440
everyone 90% is good no one really get

00:32:48,179 --> 00:32:55,230
to 100 90% is good enough if you write a

00:32:52,440 --> 00:32:58,590
code that you put in mind someone else

00:32:55,230 --> 00:33:02,970
we're going to read my code so just try

00:32:58,590 --> 00:33:04,649
to make it sure concise and then flip it

00:33:02,970 --> 00:33:06,779
please it like make it more

00:33:04,649 --> 00:33:09,210
understandable make it like thinking

00:33:06,779 --> 00:33:12,120
you're writing a code for about 10 years

00:33:09,210 --> 00:33:18,600
old kid going to to join your team soon

00:33:12,120 --> 00:33:20,010
we're 10 years old yeah so it's actually

00:33:18,600 --> 00:33:22,289
true you know nowadays you have

00:33:20,010 --> 00:33:24,299
developed by the 10 years oh you're

00:33:22,289 --> 00:33:28,010
really to write code that for for 10

00:33:24,299 --> 00:33:30,929
years so to read and also documentation

00:33:28,010 --> 00:33:33,200
Reiko good is not it's not only thing

00:33:30,929 --> 00:33:36,450
need to do a lot of documentation like

00:33:33,200 --> 00:33:38,490
not common because we will say if you if

00:33:36,450 --> 00:33:42,240
your coin good you don't need to comment

00:33:38,490 --> 00:33:43,950
it I agree if you your Co econ is

00:33:42,240 --> 00:33:46,169
explicit enough you don't need to write

00:33:43,950 --> 00:33:49,590
comment but you do need to document it

00:33:46,169 --> 00:33:51,240
let's say you have a component in react

00:33:49,590 --> 00:33:53,340
or in view or in angular

00:33:51,240 --> 00:33:55,429
you need to write what actually come the

00:33:53,340 --> 00:33:59,820
component receive what is the parameter

00:33:55,429 --> 00:34:02,190
what exactly is to this save a lots of

00:33:59,820 --> 00:34:04,200
time for other people to get to know

00:34:02,190 --> 00:34:07,649
your code and to understand the logic

00:34:04,200 --> 00:34:09,629
behind it don't need to explain line

00:34:07,649 --> 00:34:12,270
tree doing this life for doing it just

00:34:09,629 --> 00:34:14,099
the general idea but use the symbol

00:34:12,270 --> 00:34:16,379
world don't use the high-level words

00:34:14,099 --> 00:34:18,869
like you need a master degree to

00:34:16,379 --> 00:34:22,020
understand it just you a normal human

00:34:18,869 --> 00:34:24,419
being words for for other people to

00:34:22,020 --> 00:34:29,429
understand but not everyone understand

00:34:24,419 --> 00:34:31,770
English that's right nonny okay and

00:34:29,429 --> 00:34:35,099
that's it if you cover on up there and

00:34:31,770 --> 00:34:38,040
you try if you try to make a habit for

00:34:35,099 --> 00:34:39,610
yourself think before you do do it we

00:34:38,040 --> 00:34:42,930
care I would say

00:34:39,610 --> 00:34:42,930

YouTube URL: https://www.youtube.com/watch?v=17XXubHZ7n4


