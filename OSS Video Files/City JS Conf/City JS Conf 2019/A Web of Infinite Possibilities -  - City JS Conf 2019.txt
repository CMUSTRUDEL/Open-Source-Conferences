Title: A Web of Infinite Possibilities -  - City JS Conf 2019
Publication date: 2019-05-14
Playlist: City JS Conf 2019
Description: 
	Ingrid Epure

Once upon a time, you could do all sort of crazy things on the web like run Java programs, and build animations using Flash. There were no standards, so developers had to make different versions of every website they built so that they’re compatible with the browsers at the time.
The web saw both a rise in creativity, and in really serious security vulnerabilities, as it became exponentially harder to develop for it.
With the adoption of (much needed) web standards and the dotCom crash, the focus has shifted to stabilizing and unifying the way we build, consume, and think about the web, and naturally some of the technologies died along the way being unable to keep up. 
 
The web as most of us know it today became variations of the same ideas and ways of building, with one language to rule the ecosystem : JavaScript. Some also argue that the web became ‘serious,’ corporate, and a way to make money, to the detriment of creativity and innovation. 
 
But the idea of running other languages on the web was still in people’s hearts, so a new glimmer of hope was born, and named WebAssembly or WASM. Simply put, WASM provides other languages like C++ and Rust a compilation target so that they can run on the web. All designed to nicely play alongside JavaScript. How exciting is that!?
 
In this talk, we will explore WASM as a way of bringing things that are not of the web, to the web. We will discuss how WebAssembly can open the web to even more engineers and creators, and boost creativity and innovation in a secure way.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,390
my name is Ingrid you can find me on a

00:00:02,730 --> 00:00:08,610
lot of internet places talking about

00:00:05,390 --> 00:00:11,160
pretty weird complex subjects like DNS

00:00:08,610 --> 00:00:14,940
and observability and security and

00:00:11,160 --> 00:00:17,480
really easily fun ways usually unicorns

00:00:14,940 --> 00:00:19,980
are involved hence the unicorn reference

00:00:17,480 --> 00:00:22,490
what I do as part of my job is being an

00:00:19,980 --> 00:00:25,590
engineer on the API team for natla Phi

00:00:22,490 --> 00:00:27,539
I've joined them in the beginning of

00:00:25,590 --> 00:00:28,980
January if you're curious about it or

00:00:27,539 --> 00:00:31,800
you have thoughts or feelings about net

00:00:28,980 --> 00:00:35,120
liffe I'd love to nerd out with you find

00:00:31,800 --> 00:00:37,559
me after at the after party

00:00:35,120 --> 00:00:39,629
but it also means that as a confession

00:00:37,559 --> 00:00:41,520
to start with I don't get to do as much

00:00:39,629 --> 00:00:43,950
JavaScript now I'm more focused on on

00:00:41,520 --> 00:00:47,670
the backend but I really really really

00:00:43,950 --> 00:00:50,190
really love the web and it's been one of

00:00:47,670 --> 00:00:52,020
the reasons why years years years ago

00:00:50,190 --> 00:00:54,629
one of the reasons why I decided to be

00:00:52,020 --> 00:00:55,980
an engineer so back in March when I was

00:00:54,629 --> 00:00:58,739
trying to figure out what I should talk

00:00:55,980 --> 00:01:02,699
about at CDJs conf I realized that this

00:00:58,739 --> 00:01:04,920
year actually marks 30 years since the

00:01:02,699 --> 00:01:07,650
first proposal for the World Wide Web

00:01:04,920 --> 00:01:09,210
has been submitted it was also a really

00:01:07,650 --> 00:01:11,880
awkward time when I realized that I'm

00:01:09,210 --> 00:01:14,549
now older than the world wide web but um

00:01:11,880 --> 00:01:17,310
we're gonna steer way past that rabbit

00:01:14,549 --> 00:01:18,840
hole into more exciting things so I

00:01:17,310 --> 00:01:20,790
think it would be I thought it would be

00:01:18,840 --> 00:01:23,549
a really fun thing to do a little bit of

00:01:20,790 --> 00:01:25,049
a retro of what happened in the last 30

00:01:23,549 --> 00:01:27,450
years on the web and some exciting

00:01:25,049 --> 00:01:29,100
things that are coming a lot of people

00:01:27,450 --> 00:01:31,470
are talking about web assembly there's a

00:01:29,100 --> 00:01:33,329
lot of buzz of web assembly so let's try

00:01:31,470 --> 00:01:35,070
to figure out how we can integrate that

00:01:33,329 --> 00:01:38,369
and how that actually fits and how we

00:01:35,070 --> 00:01:41,820
ended up creating something like web

00:01:38,369 --> 00:01:45,420
assembly so going back in time we are

00:01:41,820 --> 00:01:49,020
now in 1990s and we have the first web

00:01:45,420 --> 00:01:52,979
server ever and the first browser that

00:01:49,020 --> 00:01:57,170
was up and running at cheering sorry and

00:01:52,979 --> 00:02:01,369
in 1991 things rolled out quite quickly

00:01:57,170 --> 00:02:03,060
and the first w-w-w software and the

00:02:01,369 --> 00:02:05,579
great-great-great great-grandfather

00:02:03,060 --> 00:02:08,280
who've the browser's a line mode browser

00:02:05,579 --> 00:02:10,020
was released along with a web server to

00:02:08,280 --> 00:02:12,239
be able to serve all that content and

00:02:10,020 --> 00:02:13,800
the library for developers and I think

00:02:12,239 --> 00:02:17,790
this is a really interesting

00:02:13,800 --> 00:02:19,410
the fact that the first software suite

00:02:17,790 --> 00:02:22,320
that shipped shipped with developers in

00:02:19,410 --> 00:02:24,030
mind and it was catered to be

00:02:22,320 --> 00:02:27,090
distributable and for people to be able

00:02:24,030 --> 00:02:29,790
to contribute from the beginning and

00:02:27,090 --> 00:02:31,710
people really loved it so in 1994 which

00:02:29,790 --> 00:02:33,750
is just three years later the web had

00:02:31,710 --> 00:02:36,510
almost 10,000 servers

00:02:33,750 --> 00:02:38,850
2,000 of which were commercial and about

00:02:36,510 --> 00:02:40,650
10 million users worldwide so that's

00:02:38,850 --> 00:02:42,540
quite impressive and a lot of people

00:02:40,650 --> 00:02:44,970
started really paying attention it was

00:02:42,540 --> 00:02:48,510
this new way of communicating everyone

00:02:44,970 --> 00:02:50,150
was really excited and with all that

00:02:48,510 --> 00:02:52,320
hype and with all that excitement

00:02:50,150 --> 00:02:54,420
there's also been a lot of talks about

00:02:52,320 --> 00:02:56,160
the fact that the web needs to remain an

00:02:54,420 --> 00:02:58,920
open standard and I think this is one of

00:02:56,160 --> 00:03:00,210
the most important points regardless of

00:02:58,920 --> 00:03:02,520
what you're trying to experiment or

00:03:00,210 --> 00:03:03,180
which browsers you use or which company

00:03:02,520 --> 00:03:05,190
you work for

00:03:03,180 --> 00:03:07,020
the web has always started with the idea

00:03:05,190 --> 00:03:10,170
of being an open standard and be open to

00:03:07,020 --> 00:03:11,640
everyone from developers to normal

00:03:10,170 --> 00:03:13,800
people that are just looking to learn

00:03:11,640 --> 00:03:16,910
something where do different do

00:03:13,800 --> 00:03:21,300
different things with with a browser and

00:03:16,910 --> 00:03:24,110
in 1994 to be able to support that the

00:03:21,300 --> 00:03:27,510
w3c were the World Wide Web Consortium

00:03:24,110 --> 00:03:29,100
I'm really bad with long names has been

00:03:27,510 --> 00:03:34,200
founded to protect the interest and

00:03:29,100 --> 00:03:36,060
division for for the web and then we're

00:03:34,200 --> 00:03:37,860
in 1995 and this is where it gets

00:03:36,060 --> 00:03:39,600
interesting and you might know why

00:03:37,860 --> 00:03:43,709
because it's the reason why we're in

00:03:39,600 --> 00:03:48,150
this room so the world in 1995 was very

00:03:43,709 --> 00:03:49,680
heavily Java dominated and what's really

00:03:48,150 --> 00:03:52,400
interesting is that the JVM in the

00:03:49,680 --> 00:03:55,950
beginning started with the idea of

00:03:52,400 --> 00:03:58,050
creating for the web creating rich

00:03:55,950 --> 00:04:00,030
Internet application and applications

00:03:58,050 --> 00:04:02,780
and it was actually seen as being a web

00:04:00,030 --> 00:04:05,760
technology fast forwarding - well now

00:04:02,780 --> 00:04:08,520
probably javascript is slowly dying as a

00:04:05,760 --> 00:04:10,800
like a back-end server and it's mostly

00:04:08,520 --> 00:04:11,760
used on perhaps data pipelines but it's

00:04:10,800 --> 00:04:14,220
quite interesting that it actually

00:04:11,760 --> 00:04:18,359
started with the web in mind and not at

00:04:14,220 --> 00:04:21,030
all for what we're using it today so

00:04:18,359 --> 00:04:22,140
people started thinking about what they

00:04:21,030 --> 00:04:24,390
could do with this really powerful

00:04:22,140 --> 00:04:26,720
language and if perhaps there would be a

00:04:24,390 --> 00:04:29,450
way to put the JVM in a browser

00:04:26,720 --> 00:04:31,910
so that you could run well ended up

00:04:29,450 --> 00:04:35,600
being called Java applets embedded into

00:04:31,910 --> 00:04:37,750
your HTML page so Netscape Navigator

00:04:35,600 --> 00:04:39,830
which was the browser at the time

00:04:37,750 --> 00:04:41,870
shipped a feature called the Netscape

00:04:39,830 --> 00:04:44,600
plugin application programming interface

00:04:41,870 --> 00:04:46,730
or NPAPI which took me a while to

00:04:44,600 --> 00:04:49,760
pronounce I kept remembering it as naps

00:04:46,730 --> 00:04:53,000
or nappy I like naps it's kind of fun

00:04:49,760 --> 00:04:57,080
it's easier to remember to and the whole

00:04:53,000 --> 00:05:00,230
idea was to allow the developers to

00:04:57,080 --> 00:05:03,710
create a sub to create plugins that can

00:05:00,230 --> 00:05:06,740
run as web apps that can run as web

00:05:03,710 --> 00:05:09,410
applications and something else shipped

00:05:06,740 --> 00:05:11,450
in 1995 as part of the Netscape 2-0 and

00:05:09,410 --> 00:05:13,700
that's a new language that was created

00:05:11,450 --> 00:05:16,910
in ten days I'll let you guess three

00:05:13,700 --> 00:05:20,390
times what that language was the one we

00:05:16,910 --> 00:05:24,380
know and love JavaScript and JavaScript

00:05:20,390 --> 00:05:26,930
shipped in Netscape more like a toy like

00:05:24,380 --> 00:05:29,270
a way of doing fun things and creating

00:05:26,930 --> 00:05:31,370
some perhaps user interactions something

00:05:29,270 --> 00:05:34,480
to make the pages more engaging but if

00:05:31,370 --> 00:05:38,540
you wanted to do like super serious

00:05:34,480 --> 00:05:40,340
computation logic to do magic things you

00:05:38,540 --> 00:05:42,290
were supposed to use Java and it was

00:05:40,340 --> 00:05:44,480
branded rumor has it that it was branded

00:05:42,290 --> 00:05:46,250
as JavaScript even if it has nothing to

00:05:44,480 --> 00:05:49,880
do with the language maybe like a syntax

00:05:46,250 --> 00:05:53,210
similarity just doesn't marketing as a

00:05:49,880 --> 00:05:56,270
marketing tool so we'd add the web

00:05:53,210 --> 00:06:00,230
became well this a lot of really weird

00:05:56,270 --> 00:06:01,790
things people were doing a lot of hating

00:06:00,230 --> 00:06:03,650
on the internet explorer and there were

00:06:01,790 --> 00:06:05,750
a lot of gifts this these are all still

00:06:03,650 --> 00:06:07,550
life by the way there was a lot of

00:06:05,750 --> 00:06:10,250
counts the one on the top is the San

00:06:07,550 --> 00:06:11,570
Francisco fog cam I think this was from

00:06:10,250 --> 00:06:13,730
last night when they took a screenshot

00:06:11,570 --> 00:06:15,680
for the slide I remember like back in

00:06:13,730 --> 00:06:17,750
the day like I grew up in Romania and my

00:06:15,680 --> 00:06:19,220
university had a cam and you could go to

00:06:17,750 --> 00:06:22,010
like the university website and you

00:06:19,220 --> 00:06:24,230
could like watch kids going like

00:06:22,010 --> 00:06:26,540
students go into classes were not going

00:06:24,230 --> 00:06:30,080
to classes and going to somewhere else

00:06:26,540 --> 00:06:32,780
is then and I really love this space

00:06:30,080 --> 00:06:35,180
jump thing because the company that I

00:06:32,780 --> 00:06:37,639
work for an up defy we are somewhat

00:06:35,180 --> 00:06:40,069
known for coining queening the

00:06:37,639 --> 00:06:42,020
turn jump stack and we run a conference

00:06:40,069 --> 00:06:44,840
and we talk a lot about it and jump step

00:06:42,020 --> 00:06:47,479
for us means JavaScript API and markdown

00:06:44,840 --> 00:06:50,360
quite different from the spacejaaam that

00:06:47,479 --> 00:06:51,590
it was in the 90s in a way but it's

00:06:50,360 --> 00:06:53,960
really interesting to see like this

00:06:51,590 --> 00:06:55,310
circle of things that keep reoccurring

00:06:53,960 --> 00:06:58,759
and we're gonna see that a little bit

00:06:55,310 --> 00:07:03,620
throughout this talk Internet Explorer

00:06:58,759 --> 00:07:06,199
is evil I don't know about that um so a

00:07:03,620 --> 00:07:08,150
lot more companies got excited and then

00:07:06,199 --> 00:07:10,000
Adobe got excited actually Macromedia

00:07:08,150 --> 00:07:13,610
got excited and created something called

00:07:10,000 --> 00:07:18,250
now the legendary Adobe Flash rest in

00:07:13,610 --> 00:07:20,569
peace but it really changed the way

00:07:18,250 --> 00:07:21,979
people were thinking about what can be

00:07:20,569 --> 00:07:23,810
on the web and it created a lot more

00:07:21,979 --> 00:07:25,310
animations and it created a lot more

00:07:23,810 --> 00:07:29,000
games things that weren't necessarily

00:07:25,310 --> 00:07:32,349
very achievable were very clunky and

00:07:29,000 --> 00:07:35,629
like very very hard to create in Java

00:07:32,349 --> 00:07:39,159
you probably remembered us do you the

00:07:35,629 --> 00:07:42,589
eternal time killer called farmville

00:07:39,159 --> 00:07:47,080
back in the day when Facebook was more

00:07:42,589 --> 00:07:49,339
of a games platform and a long time ago

00:07:47,080 --> 00:07:50,870
so with all these exciting and like

00:07:49,339 --> 00:07:52,159
different types of content happening and

00:07:50,870 --> 00:07:54,620
everyone trying to figure out what the

00:07:52,159 --> 00:07:56,180
web should be like a lot of the people

00:07:54,620 --> 00:07:58,400
it attracted the attention of a lot of

00:07:56,180 --> 00:08:01,909
companies more specifically Microsoft

00:07:58,400 --> 00:08:04,099
that was thinking hmm maybe I should

00:08:01,909 --> 00:08:07,009
create a browser maybe I should be able

00:08:04,099 --> 00:08:08,860
to key therefore serving content out

00:08:07,009 --> 00:08:12,199
there this looks like a fun thing to do

00:08:08,860 --> 00:08:13,849
so the late nineties became pretty much

00:08:12,199 --> 00:08:16,250
a war between Netscape which is the

00:08:13,849 --> 00:08:19,069
first browser at the first mother and

00:08:16,250 --> 00:08:23,419
Ezra browser at the time and internet

00:08:19,069 --> 00:08:26,029
explorer for more funding and more

00:08:23,419 --> 00:08:30,529
resources Microsoft ended up ended up

00:08:26,029 --> 00:08:33,740
actually winning but the what this time

00:08:30,529 --> 00:08:37,579
created was a lot of inconsistencies on

00:08:33,740 --> 00:08:39,320
the web where developers would specify

00:08:37,579 --> 00:08:40,760
it like this will only run on that scape

00:08:39,320 --> 00:08:42,260
where this will only run on Internet

00:08:40,760 --> 00:08:44,180
Explorer and it's quite interesting to

00:08:42,260 --> 00:08:46,010
see that this still happens today we use

00:08:44,180 --> 00:08:47,449
an app called coda for different like

00:08:46,010 --> 00:08:49,459
Docs really the things that will only

00:08:47,449 --> 00:08:50,470
run in chrome so we're not we're still

00:08:49,459 --> 00:08:54,220
not very far

00:08:50,470 --> 00:08:56,830
from that story but the early early

00:08:54,220 --> 00:08:58,750
early versions of the web you'd have to

00:08:56,830 --> 00:09:02,800
kill you'd have to develop with the

00:08:58,750 --> 00:09:04,720
browser in mind quite a bit and people

00:09:02,800 --> 00:09:06,850
weren't quite sure what's gonna happen

00:09:04,720 --> 00:09:08,650
there was a lot of hype it wasn't

00:09:06,850 --> 00:09:10,810
necessarily making money they weren't

00:09:08,650 --> 00:09:12,310
quite sure what to do with it there was

00:09:10,810 --> 00:09:16,170
a lot of time and a lot of resources a

00:09:12,310 --> 00:09:19,330
lot of engineering so 2001 and 2002

00:09:16,170 --> 00:09:22,330
something called the dot-com bubble

00:09:19,330 --> 00:09:24,910
burst so a lot of the companies that

00:09:22,330 --> 00:09:27,660
were created back in the 90s like pets

00:09:24,910 --> 00:09:30,490
calm or boom calm or something like that

00:09:27,660 --> 00:09:33,670
ended up not being able to be profitable

00:09:30,490 --> 00:09:38,830
anymore not being able to to run anymore

00:09:33,670 --> 00:09:41,050
and they died they went away so people

00:09:38,830 --> 00:09:43,480
started thinking oh actually maybe

00:09:41,050 --> 00:09:45,400
this is not that stable anymore and I

00:09:43,480 --> 00:09:47,290
need more users to people to make sure

00:09:45,400 --> 00:09:49,480
that I'm not gonna die as well how do I

00:09:47,290 --> 00:09:51,910
get more users well one of the reasons

00:09:49,480 --> 00:09:54,370
why it was so hard to get more users is

00:09:51,910 --> 00:09:56,140
because you couldn't just build a

00:09:54,370 --> 00:09:57,700
website and make it available everywhere

00:09:56,140 --> 00:10:00,100
because every browser was doing whatever

00:09:57,700 --> 00:10:01,900
the hell they wanted at the time so

00:10:00,100 --> 00:10:04,300
there was more and more of a push for

00:10:01,900 --> 00:10:07,030
web standards web standards to support

00:10:04,300 --> 00:10:09,850
my art being able to run on any platform

00:10:07,030 --> 00:10:11,050
without me worrying too much about it so

00:10:09,850 --> 00:10:14,070
that you can make money and get more

00:10:11,050 --> 00:10:17,890
users more users more money yay

00:10:14,070 --> 00:10:20,440
so the web grew quite a bit

00:10:17,890 --> 00:10:24,730
javascript grew quite a bit as a result

00:10:20,440 --> 00:10:27,370
of that and the fact that the standards

00:10:24,730 --> 00:10:28,770
the consortium pushed more and more for

00:10:27,370 --> 00:10:35,560
the standards create the stability

00:10:28,770 --> 00:10:37,630
across the web until 2008 when people

00:10:35,560 --> 00:10:39,310
started thinking okay JavaScript we

00:10:37,630 --> 00:10:40,720
should really know it's gaining a lot of

00:10:39,310 --> 00:10:43,060
adoption we should really really make

00:10:40,720 --> 00:10:45,880
this more performant so browsers started

00:10:43,060 --> 00:10:47,740
thinking about a way of doing

00:10:45,880 --> 00:10:49,480
just-in-time compilation on the browser

00:10:47,740 --> 00:10:51,760
with the idea of speeding up the

00:10:49,480 --> 00:10:53,050
performance of the JavaScript and 2008

00:10:51,760 --> 00:10:55,240
is actually known as the performance

00:10:53,050 --> 00:10:57,520
work where the browser's were competing

00:10:55,240 --> 00:11:00,250
in to which one has the better compiler

00:10:57,520 --> 00:11:03,040
and can compile JavaScript faster

00:11:00,250 --> 00:11:04,600
and with all that surgeon performance

00:11:03,040 --> 00:11:07,630
for JavaScript there was also an

00:11:04,600 --> 00:11:09,490
increase well the web frameworks also as

00:11:07,630 --> 00:11:13,300
we know them today were specifically

00:11:09,490 --> 00:11:18,930
angular started gaining adoption being

00:11:13,300 --> 00:11:21,580
was released and gained adoption in 2010

00:11:18,930 --> 00:11:25,090
but not everything was peace and quiet

00:11:21,580 --> 00:11:27,790
and peaceful times and peaceful

00:11:25,090 --> 00:11:29,530
standards with happy users because there

00:11:27,790 --> 00:11:31,840
was still a lot of the plugins from the

00:11:29,530 --> 00:11:34,090
late late days now like 10 years later

00:11:31,840 --> 00:11:36,130
these of the internet and more

00:11:34,090 --> 00:11:38,110
specifically flash flash had a lot of

00:11:36,130 --> 00:11:39,520
security vulnerabilities and people put

00:11:38,110 --> 00:11:41,350
up with it for a very very long time

00:11:39,520 --> 00:11:44,860
because farmville is cute and it's very

00:11:41,350 --> 00:11:47,860
addictive and it's nice to not do work

00:11:44,860 --> 00:11:51,310
and play farmville so people ignored it

00:11:47,860 --> 00:11:54,730
until this flashback Trojan happened and

00:11:51,310 --> 00:11:58,900
it I read some statistics on it I think

00:11:54,730 --> 00:12:01,390
it affected about 600,000 computers over

00:11:58,900 --> 00:12:03,370
like a matter of hours please correct me

00:12:01,390 --> 00:12:04,870
if those stats are wrong but it was

00:12:03,370 --> 00:12:06,430
really crazy and it really attracted the

00:12:04,870 --> 00:12:07,480
attention that he maybe plug-ins or

00:12:06,430 --> 00:12:09,340
something that you shouldn't be running

00:12:07,480 --> 00:12:14,440
a lot of people are campaigning for

00:12:09,340 --> 00:12:16,510
plug-ins to die and in 2014 html5 was

00:12:14,440 --> 00:12:18,940
shipped which allowed people to finally

00:12:16,510 --> 00:12:20,800
not come up with excuses about why they

00:12:18,940 --> 00:12:24,220
should install flash or why they should

00:12:20,800 --> 00:12:25,780
install Java in the browser and the

00:12:24,220 --> 00:12:29,290
focus has shifted to client-side

00:12:25,780 --> 00:12:31,600
computation with JavaScript and the web

00:12:29,290 --> 00:12:36,130
became the adult that we know today a

00:12:31,600 --> 00:12:39,010
lot of apps a lot of cool tech companies

00:12:36,130 --> 00:12:41,560
doing cool things like tech things on on

00:12:39,010 --> 00:12:44,530
the web Google Amazon Facebook etcetera

00:12:41,560 --> 00:12:47,550
etcetera and this is pretty much where

00:12:44,530 --> 00:12:47,550
we are right now as well

00:12:47,750 --> 00:12:56,250
in 2017 people haven't quite forgotten

00:12:53,040 --> 00:12:58,410
the idea of running other languages on

00:12:56,250 --> 00:13:00,810
the web though and the reason for that

00:12:58,410 --> 00:13:02,160
is that javascript is awesome and it's

00:13:00,810 --> 00:13:04,970
amazing and you can do a lot of things

00:13:02,160 --> 00:13:07,350
in it you can do cool animations and

00:13:04,970 --> 00:13:09,300
it's great but it's not particularly

00:13:07,350 --> 00:13:11,580
there's a certain type of problems that

00:13:09,300 --> 00:13:13,500
it's not particularly performant at

00:13:11,580 --> 00:13:15,660
solving for example video is one of them

00:13:13,500 --> 00:13:17,130
we're gonna go into that for a second so

00:13:15,660 --> 00:13:19,920
people started thinking hey there's a

00:13:17,130 --> 00:13:22,170
lot of languages out there like C++ like

00:13:19,920 --> 00:13:24,590
rust that would be significantly faster

00:13:22,170 --> 00:13:27,540
for this particular type of problem

00:13:24,590 --> 00:13:33,090
image rendering video rendering how do

00:13:27,540 --> 00:13:36,290
we find a way to run them on the web so

00:13:33,090 --> 00:13:40,370
I don't know what I've done

00:13:36,290 --> 00:13:42,660
haha okay we're back

00:13:40,370 --> 00:13:44,490
so a really easy way to describe web

00:13:42,660 --> 00:13:45,840
assembly is exactly that a way to run

00:13:44,490 --> 00:13:49,920
programming languages other than

00:13:45,840 --> 00:13:51,720
JavaScript on the web and if your answer

00:13:49,920 --> 00:13:53,460
is wait didn't we just talk about that

00:13:51,720 --> 00:13:56,580
like back in the day when we ran like

00:13:53,460 --> 00:13:59,100
Java and like what what is this why is

00:13:56,580 --> 00:14:00,720
this gonna work now and the reason why

00:13:59,100 --> 00:14:03,030
everyone is excited one of the reasons

00:14:00,720 --> 00:14:04,980
why everyone is really excited about web

00:14:03,030 --> 00:14:07,080
assembly is the fact that it's really

00:14:04,980 --> 00:14:08,940
built with security in mind so web

00:14:07,080 --> 00:14:11,100
assembly code is gonna run on a sandbox

00:14:08,940 --> 00:14:13,710
environment in the browser which limits

00:14:11,100 --> 00:14:16,710
its ability to have say access to your

00:14:13,710 --> 00:14:18,390
filesystem which happened before to be

00:14:16,710 --> 00:14:20,730
able to corrupt the memory of the

00:14:18,390 --> 00:14:23,370
browser which happened before so it's

00:14:20,730 --> 00:14:26,460
gonna run in a very in a very isolated

00:14:23,370 --> 00:14:29,220
and secure way and it's built with

00:14:26,460 --> 00:14:33,900
preventing the users protecting users

00:14:29,220 --> 00:14:37,650
from plugging exploits and protecting

00:14:33,900 --> 00:14:41,060
developers from say C++ is notorious for

00:14:37,650 --> 00:14:45,480
having to deal with memory quite a lot

00:14:41,060 --> 00:14:48,240
so it's really aimed to provide a safe

00:14:45,480 --> 00:14:50,480
way for developers to build to build on

00:14:48,240 --> 00:14:50,480
the web

00:14:50,550 --> 00:14:55,560
and its goal is exactly that conflict

00:14:53,160 --> 00:14:57,600
more complicated logic that is difficult

00:14:55,560 --> 00:15:00,720
to do in JavaScript but also portability

00:14:57,600 --> 00:15:03,330
and for the first time and well almost

00:15:00,720 --> 00:15:05,700
30 years at that point all the major

00:15:03,330 --> 00:15:07,260
browsers agreed on to make webassembly a

00:15:05,700 --> 00:15:09,149
standard from the beginning and it is

00:15:07,260 --> 00:15:11,010
now supported by all the major browsers

00:15:09,149 --> 00:15:12,420
which is quite a big win because they

00:15:11,010 --> 00:15:15,870
could not agree on that before

00:15:12,420 --> 00:15:17,820
it's it's actually the first time so

00:15:15,870 --> 00:15:20,459
there's different languages that are

00:15:17,820 --> 00:15:22,560
supported at the moment main ones are

00:15:20,459 --> 00:15:24,600
C++ and rust I'm not gonna talk a lot

00:15:22,560 --> 00:15:26,640
about rust because things are more

00:15:24,600 --> 00:15:27,899
straightforward with rust and it's a new

00:15:26,640 --> 00:15:30,570
language so there's a lot of new

00:15:27,899 --> 00:15:32,399
development happening and rust for web

00:15:30,570 --> 00:15:34,950
assembly but I want to talk a little bit

00:15:32,399 --> 00:15:36,540
about C++ because there's some C++ is

00:15:34,950 --> 00:15:39,060
one of those things that again has been

00:15:36,540 --> 00:15:41,670
around forever forever and ever it's not

00:15:39,060 --> 00:15:43,800
dying it's refusing so it'd be pretty

00:15:41,670 --> 00:15:45,660
interesting to see why people have

00:15:43,800 --> 00:15:48,720
thought that C++ would be a good idea to

00:15:45,660 --> 00:15:50,730
compile to web assembly so the way I

00:15:48,720 --> 00:15:52,440
learn new things and the way I try to

00:15:50,730 --> 00:15:54,930
wrap my brain around web assembly

00:15:52,440 --> 00:15:57,540
because it's quite a complicated

00:15:54,930 --> 00:16:00,089
convoluted you could read for a long

00:15:57,540 --> 00:16:03,000
time about it is to try and build

00:16:00,089 --> 00:16:05,130
something and I like the idea of hey

00:16:03,000 --> 00:16:08,240
just take some C++ code and run it what

00:16:05,130 --> 00:16:16,620
could happen let's see so I found this

00:16:08,240 --> 00:16:19,740
OpenGL I guess C++ really simple C++

00:16:16,620 --> 00:16:21,180
file that would build you don't have to

00:16:19,740 --> 00:16:24,180
really worry about the code it's open

00:16:21,180 --> 00:16:26,130
source and people are better at graphics

00:16:24,180 --> 00:16:27,810
that I could ever be on graphics I hated

00:16:26,130 --> 00:16:33,899
it from the first time I saw it it's

00:16:27,810 --> 00:16:36,839
fine that when we run it it will paint

00:16:33,899 --> 00:16:39,180
draw a rainbow for us so if we try to

00:16:36,839 --> 00:16:41,670
run this locally and just build it on

00:16:39,180 --> 00:16:43,050
c++ and see what happens it would look

00:16:41,670 --> 00:16:45,360
something like this you would need a

00:16:43,050 --> 00:16:47,640
compiler in this case the si Lang I'm

00:16:45,360 --> 00:16:51,870
building this on a Mac on on a macbook

00:16:47,640 --> 00:16:53,880
so this is why it will be different the

00:16:51,870 --> 00:16:55,290
binary that is created will be targeted

00:16:53,880 --> 00:16:58,300
for the platform so it'll be different

00:16:55,290 --> 00:17:01,450
for every platform but on Mac OS

00:16:58,300 --> 00:17:03,100
we want to specify how like the compiler

00:17:01,450 --> 00:17:04,959
that we want to use to be able to

00:17:03,100 --> 00:17:06,970
compile and build this the framework

00:17:04,959 --> 00:17:09,790
which in this case is OpenGL with glut

00:17:06,970 --> 00:17:12,070
the fact that we don't really care about

00:17:09,790 --> 00:17:13,209
deprecations again OpenGL has been

00:17:12,070 --> 00:17:16,180
around forever I think it's a

00:17:13,209 --> 00:17:18,430
twenty-something year old library and I

00:17:16,180 --> 00:17:20,860
want to run my file the last line is

00:17:18,430 --> 00:17:23,320
rainbow rainbow dot C which is the year

00:17:20,860 --> 00:17:25,080
the opens worse rainbow generated and

00:17:23,320 --> 00:17:27,370
then I want to create an executable

00:17:25,080 --> 00:17:29,290
called rainbow and then I just want to

00:17:27,370 --> 00:17:31,510
run that as you would run say a bash

00:17:29,290 --> 00:17:33,850
script and when you do this lovely

00:17:31,510 --> 00:17:34,330
window pops up and it's a rainbow how

00:17:33,850 --> 00:17:37,420
cute

00:17:34,330 --> 00:17:38,110
yeah so how do we get something like

00:17:37,420 --> 00:17:42,880
that on the web

00:17:38,110 --> 00:17:44,980
well this is where Emscripten comes to

00:17:42,880 --> 00:17:46,930
place so am scripting is kind of like an

00:17:44,980 --> 00:17:51,760
sdk it's a set of tools that would allow

00:17:46,930 --> 00:17:58,450
you to take C++ code and compile it to

00:17:51,760 --> 00:17:59,680
either a SMGs with or wasum or it's

00:17:58,450 --> 00:18:01,930
simply put it will create some

00:17:59,680 --> 00:18:04,510
JavaScript glue code that sits on top of

00:18:01,930 --> 00:18:06,880
the binary code that we just executed or

00:18:04,510 --> 00:18:10,060
sits on top sits on top of web assembly

00:18:06,880 --> 00:18:12,640
which is what we want to try now so to

00:18:10,060 --> 00:18:13,960
be able to do that we'd have to run

00:18:12,640 --> 00:18:16,450
something like this

00:18:13,960 --> 00:18:19,180
MCC which is the compiler for M

00:18:16,450 --> 00:18:21,250
scripting Oh tree because we want the

00:18:19,180 --> 00:18:25,000
compiler to optimize aggressively and

00:18:21,250 --> 00:18:27,520
then we have this minus s legacy GL

00:18:25,000 --> 00:18:29,560
emulation flag and what this is is with

00:18:27,520 --> 00:18:32,200
it will sorry it will actually include

00:18:29,560 --> 00:18:34,420
all the OpenGL dependencies that M

00:18:32,200 --> 00:18:36,310
scripting has done a really really good

00:18:34,420 --> 00:18:39,070
job actually porting so that we can use

00:18:36,310 --> 00:18:41,160
them without having to worry about where

00:18:39,070 --> 00:18:43,510
they exist which is really cool actually

00:18:41,160 --> 00:18:45,280
we want to say that the target is wise

00:18:43,510 --> 00:18:48,550
them and actually you don't have to

00:18:45,280 --> 00:18:50,440
specify that anymore it it's the default

00:18:48,550 --> 00:18:52,720
target which i think is really cool and

00:18:50,440 --> 00:18:55,630
then I want to have an output called

00:18:52,720 --> 00:18:57,150
rainbow HTML and the file that I'm

00:18:55,630 --> 00:19:01,170
trying to compile is rainbow that seam

00:18:57,150 --> 00:19:04,030
so what this will do is that it will

00:19:01,170 --> 00:19:06,490
create a wisdom module we're gonna go in

00:19:04,030 --> 00:19:08,440
more details into that in a second

00:19:06,490 --> 00:19:11,320
and somehow make it all works so that

00:19:08,440 --> 00:19:11,650
when I open this rainbow HTM HTML file I

00:19:11,320 --> 00:19:15,370
should

00:19:11,650 --> 00:19:19,780
see the rainbow and indeed we do yay

00:19:15,370 --> 00:19:22,810
that's pretty cool right so if you don't

00:19:19,780 --> 00:19:24,490
create the HTML yourself in script on

00:19:22,810 --> 00:19:25,930
will generate one for you which is the

00:19:24,490 --> 00:19:28,390
thing that we're looking at now and

00:19:25,930 --> 00:19:31,090
whatever you output to the console you

00:19:28,390 --> 00:19:34,830
can literally use a print F or a C out

00:19:31,090 --> 00:19:36,010
it will be displayed on on this page

00:19:34,830 --> 00:19:39,990
awesome

00:19:36,010 --> 00:19:42,610
so okay C++ is kind of weird I

00:19:39,990 --> 00:19:46,510
personally am NOT a C++ developer why

00:19:42,610 --> 00:19:49,150
would I go through all of this just to

00:19:46,510 --> 00:19:51,430
get something C++ on the web and the

00:19:49,150 --> 00:19:53,290
answer for that is that again for

00:19:51,430 --> 00:19:55,660
certain types of computations web

00:19:53,290 --> 00:19:58,710
assemblies built to be fast I won't go

00:19:55,660 --> 00:20:00,880
too much into details of why it's fast

00:19:58,710 --> 00:20:02,680
but I think it's really important to get

00:20:00,880 --> 00:20:04,300
the data whenever someone says but rep

00:20:02,680 --> 00:20:05,830
Assembly's faster and like this

00:20:04,300 --> 00:20:08,980
skeptical of me is always gonna go but

00:20:05,830 --> 00:20:10,420
why so Lynn Clark actually did a really

00:20:08,980 --> 00:20:12,610
really good job to write a series of

00:20:10,420 --> 00:20:14,740
blog posts that I highly highly suggest

00:20:12,610 --> 00:20:16,450
you've read if you want to learn more

00:20:14,740 --> 00:20:19,240
about web assembly she's done a better

00:20:16,450 --> 00:20:22,330
job explaining this than I could so

00:20:19,240 --> 00:20:24,970
really really good reading material but

00:20:22,330 --> 00:20:26,500
just does it heal the our web assembly

00:20:24,970 --> 00:20:29,680
is more compact than JavaScript even

00:20:26,500 --> 00:20:31,570
when compressed and the coding wasn't is

00:20:29,680 --> 00:20:33,970
on average way faster than parsing

00:20:31,570 --> 00:20:35,770
JavaScript and also it's closer to the

00:20:33,970 --> 00:20:37,480
machine code and you don't have to worry

00:20:35,770 --> 00:20:39,850
about garbage collection because the

00:20:37,480 --> 00:20:42,520
memory is handled at the low level in in

00:20:39,850 --> 00:20:44,290
the C++ code so that's a tldr of what

00:20:42,520 --> 00:20:48,940
makes it faster but read the blog post

00:20:44,290 --> 00:20:50,530
it's really good so cool that's a

00:20:48,940 --> 00:20:53,610
rainbow it's kind of cute can I actually

00:20:50,530 --> 00:20:56,140
build something useful so let's try and

00:20:53,610 --> 00:20:59,320
build something that you might actually

00:20:56,140 --> 00:21:01,420
be able to use somewhere so it's trying

00:20:59,320 --> 00:21:02,980
to think there's a lot of demos on web

00:21:01,420 --> 00:21:05,620
assembly there's a lot of cool things

00:21:02,980 --> 00:21:08,380
there's a lot of image manipulations

00:21:05,620 --> 00:21:10,000
there's a lot of conversions and I

00:21:08,380 --> 00:21:11,500
really like this I like the fact that

00:21:10,000 --> 00:21:13,930
and something that's not natively

00:21:11,500 --> 00:21:15,670
amazing on the web is converting from

00:21:13,930 --> 00:21:17,740
one format to the other I really love

00:21:15,670 --> 00:21:20,290
that and I personally really love finds

00:21:17,740 --> 00:21:22,780
I love typography and what type ography

00:21:20,290 --> 00:21:24,770
nerd I love it and I also really really

00:21:22,780 --> 00:21:27,679
really love SVG is like a

00:21:24,770 --> 00:21:29,210
I think they're awesome and sometimes I

00:21:27,679 --> 00:21:31,580
would look at a really pretty fund

00:21:29,210 --> 00:21:33,080
that's built by someone that obviously

00:21:31,580 --> 00:21:35,330
is more artistic than me and I'm like ah

00:21:33,080 --> 00:21:37,429
I'd really love it if I could just take

00:21:35,330 --> 00:21:39,500
one symbol from that font and I can use

00:21:37,429 --> 00:21:41,360
it on my webpage but I don't

00:21:39,500 --> 00:21:43,190
specifically want to have to load the

00:21:41,360 --> 00:21:46,670
entire font or worry about it we're like

00:21:43,190 --> 00:21:48,200
downloaded or whatever so I was thinking

00:21:46,670 --> 00:21:51,860
that something that we could try

00:21:48,200 --> 00:21:54,320
together is converting a fly into an SVG

00:21:51,860 --> 00:21:57,800
using C++ because that's kind of cool

00:21:54,320 --> 00:21:59,210
and a little crazy so because I don't

00:21:57,800 --> 00:22:01,100
necessarily want to reinvent the wheel

00:21:59,210 --> 00:22:03,350
and I think this is a good point of why

00:22:01,100 --> 00:22:05,300
you might want to even look at C++ and

00:22:03,350 --> 00:22:06,950
compiling it tourism there's a lot of

00:22:05,300 --> 00:22:09,590
resources out there the community is

00:22:06,950 --> 00:22:11,780
absolutely huge and C++ has a vast

00:22:09,590 --> 00:22:14,290
adoption so someone actually thought

00:22:11,780 --> 00:22:17,540
about converting fines to SVG's before

00:22:14,290 --> 00:22:20,330
using C++ on top of a library called

00:22:17,540 --> 00:22:22,670
freetype that's a 23 year old library

00:22:20,330 --> 00:22:25,429
that runs on most of the browser's so

00:22:22,670 --> 00:22:27,590
most of your computers to run their

00:22:25,429 --> 00:22:30,440
fines and they've created this header

00:22:27,590 --> 00:22:32,510
file really that allows you to work with

00:22:30,440 --> 00:22:35,450
that library because it's massive in the

00:22:32,510 --> 00:22:37,460
more organized structured way which

00:22:35,450 --> 00:22:40,010
makes it really easy for me to write

00:22:37,460 --> 00:22:43,070
something like this that includes so the

00:22:40,010 --> 00:22:47,330
fun to SVG HPP is actually from the

00:22:43,070 --> 00:22:49,460
open-source github repo and it gives me

00:22:47,330 --> 00:22:51,860
access to this font - SVG glyph that

00:22:49,460 --> 00:22:53,750
will essentially take the lettering that

00:22:51,860 --> 00:22:55,490
I want to take the letter or the symbol

00:22:53,750 --> 00:22:59,360
that I want to convert and output the

00:22:55,490 --> 00:23:02,330
Jeff the gift so let's go through the

00:22:59,360 --> 00:23:08,120
code real quick so the first two lines

00:23:02,330 --> 00:23:11,270
are more C++ magic to be able to do

00:23:08,120 --> 00:23:16,130
different things like print print things

00:23:11,270 --> 00:23:18,770
or open things etc and the SVG function

00:23:16,130 --> 00:23:21,110
itself is pretty simple you have a font

00:23:18,770 --> 00:23:23,179
it has to be this library at the moment

00:23:21,110 --> 00:23:27,620
on only supports true type funds and

00:23:23,179 --> 00:23:30,520
then it needs the ASCII code or the

00:23:27,620 --> 00:23:32,960
unique or Unicode code of whatever

00:23:30,520 --> 00:23:36,290
symbol you want to convert in this case

00:23:32,960 --> 00:23:38,930
38 is the ASCII code for M percent so

00:23:36,290 --> 00:23:43,970
we're gonna convert an ampersand using a

00:23:38,930 --> 00:23:47,440
TTFN fund so we give those arguments to

00:23:43,970 --> 00:23:51,110
the method that we just imported from

00:23:47,440 --> 00:23:56,540
the github repo we create a string and

00:23:51,110 --> 00:23:58,220
then we just wanna run sorry we just

00:23:56,540 --> 00:24:01,670
want to generate all the different parts

00:23:58,220 --> 00:24:06,020
of the SVG and save those in a string

00:24:01,670 --> 00:24:09,980
variable and return it because C++ is

00:24:06,020 --> 00:24:11,540
you have to manage the memory you have

00:24:09,980 --> 00:24:13,040
to manage the memory yourself we also

00:24:11,540 --> 00:24:14,540
want to free that memory when it's no

00:24:13,040 --> 00:24:21,230
longer used which is why we have a G

00:24:14,540 --> 00:24:22,880
free there and something that C++ is

00:24:21,230 --> 00:24:25,700
really good at but webassembly and

00:24:22,880 --> 00:24:27,950
javascript more specifically is the

00:24:25,700 --> 00:24:29,450
communication between them is not

00:24:27,950 --> 00:24:31,370
particularly good at it's just like

00:24:29,450 --> 00:24:33,410
passing the string all the way up the

00:24:31,370 --> 00:24:35,570
wire so you do have to do a little bit

00:24:33,410 --> 00:24:37,640
of transformations to be able to get

00:24:35,570 --> 00:24:39,710
that string converted to a character

00:24:37,640 --> 00:24:41,690
array that then you can pass all the way

00:24:39,710 --> 00:24:43,940
up to JavaScript and this is what this

00:24:41,690 --> 00:24:46,130
is trying to solve I won't go into it a

00:24:43,940 --> 00:24:48,890
lot because it's kind of like out of the

00:24:46,130 --> 00:24:50,690
scope but it's just something put

00:24:48,890 --> 00:24:53,540
together so that we can return the

00:24:50,690 --> 00:24:55,460
string as it is to to webassembly so

00:24:53,540 --> 00:24:59,240
let's try to run this it's very simple

00:24:55,460 --> 00:25:01,640
to the way we ran it earlier so mcc o

00:24:59,240 --> 00:25:04,300
tree because we want to optimize we want

00:25:01,640 --> 00:25:08,480
to use free types so free type again is

00:25:04,300 --> 00:25:10,700
the free type see like see library that

00:25:08,480 --> 00:25:12,140
Emscripten have actually ported so that

00:25:10,700 --> 00:25:14,450
you don't have to worry about where

00:25:12,140 --> 00:25:16,010
those files are you can just include it

00:25:14,450 --> 00:25:17,510
it will just be included automatically

00:25:16,010 --> 00:25:19,790
if your reference that if you don't

00:25:17,510 --> 00:25:23,320
obviously this will fail and we will all

00:25:19,790 --> 00:25:26,090
be very sad and then you have to tell

00:25:23,320 --> 00:25:28,850
you have to tell em CC how do you want

00:25:26,090 --> 00:25:30,950
to export your runtime methods so from

00:25:28,850 --> 00:25:34,220
the code like going back from the code

00:25:30,950 --> 00:25:36,920
you will notice that my SVG method

00:25:34,220 --> 00:25:40,280
doesn't have its missing this M script

00:25:36,920 --> 00:25:43,550
and keep alive that is on top of the get

00:25:40,280 --> 00:25:45,470
get a message method and the reason for

00:25:43,550 --> 00:25:47,720
that is that in scripting will ignore

00:25:45,470 --> 00:25:51,460
everything that you don't tell it you

00:25:47,720 --> 00:25:56,029
don't specifically tell it to keep too

00:25:51,460 --> 00:25:57,980
make part of the web assembly module and

00:25:56,029 --> 00:26:01,580
there's two ways to export the runtime

00:25:57,980 --> 00:26:02,870
methods one it's a CW C wrap which is

00:26:01,580 --> 00:26:04,730
the one that we're using which means

00:26:02,870 --> 00:26:08,710
export the entire function as it is

00:26:04,730 --> 00:26:12,620
because I want to reuse it in my HTML

00:26:08,710 --> 00:26:16,730
size JavaScript or just return the value

00:26:12,620 --> 00:26:18,260
which is Seacole and then remember that

00:26:16,730 --> 00:26:19,730
this is gonna run in the browser this is

00:26:18,260 --> 00:26:23,179
where it gets interesting so it doesn't

00:26:19,730 --> 00:26:25,309
have access to your filesystem it

00:26:23,179 --> 00:26:27,409
doesn't really know again this is super

00:26:25,309 --> 00:26:29,299
dummy it like runs locally at the moment

00:26:27,409 --> 00:26:31,549
it doesn't have a notion of where that

00:26:29,299 --> 00:26:33,139
file might be so they've created a

00:26:31,549 --> 00:26:35,510
really really really smart way of doing

00:26:33,139 --> 00:26:37,760
this by being able to specify which

00:26:35,510 --> 00:26:40,429
files you actually want to embed if you

00:26:37,760 --> 00:26:42,200
want say a favicon from local or in this

00:26:40,429 --> 00:26:43,669
case a font you can specify that with

00:26:42,200 --> 00:26:45,169
embedded file and it will be

00:26:43,669 --> 00:26:49,039
automatically included and webassembly

00:26:45,169 --> 00:26:50,840
which i think is pretty cool the last

00:26:49,039 --> 00:26:53,299
two lines are obviously the output so I

00:26:50,840 --> 00:26:56,570
want to output this in an SVG HTML and

00:26:53,299 --> 00:27:00,080
then the file that we're all my methods

00:26:56,570 --> 00:27:02,649
exist which is as we do C C++ so if we

00:27:00,080 --> 00:27:05,360
run this and we keep our fingers crossed

00:27:02,649 --> 00:27:07,639
we should see three new files being

00:27:05,360 --> 00:27:10,659
generated one is a wizened module that

00:27:07,639 --> 00:27:13,250
if you open is just a bunch of gibberish

00:27:10,659 --> 00:27:16,460
very similar to when you open a binary

00:27:13,250 --> 00:27:19,220
file for example the other one is a

00:27:16,460 --> 00:27:21,860
degeus file which is the JavaScript glue

00:27:19,220 --> 00:27:23,779
code that Emscripten has generated to be

00:27:21,860 --> 00:27:26,450
able for you to be able to work with the

00:27:23,779 --> 00:27:29,210
web assembly module and the third one is

00:27:26,450 --> 00:27:31,039
the SVG HTML which when you open and

00:27:29,210 --> 00:27:33,440
will look very similar to the previous

00:27:31,039 --> 00:27:36,700
one that black box and then M scripting

00:27:33,440 --> 00:27:39,950
at the top so we don't quite want that

00:27:36,700 --> 00:27:43,190
so we're gonna write our own HTML file

00:27:39,950 --> 00:27:45,320
now I'm not really the world's greatest

00:27:43,190 --> 00:27:47,480
designer obviously so this is very

00:27:45,320 --> 00:27:50,389
simple very hacky just to see if we can

00:27:47,480 --> 00:27:55,130
get something together so what we want

00:27:50,389 --> 00:27:58,470
to do first is loader our Web assembly

00:27:55,130 --> 00:28:01,649
module so we want to do that

00:27:58,470 --> 00:28:03,690
every time the runtime is initialized

00:28:01,649 --> 00:28:05,879
and we want to create an API to be able

00:28:03,690 --> 00:28:10,559
to access the methods that we've

00:28:05,879 --> 00:28:13,529
exported from C++ to then use and on our

00:28:10,559 --> 00:28:20,009
web app so in this case my method is SVG

00:28:13,529 --> 00:28:22,679
it takes two parameters sorry my local

00:28:20,009 --> 00:28:24,509
method is gonna be called SVG and the

00:28:22,679 --> 00:28:27,000
web is simply method that we've exported

00:28:24,509 --> 00:28:30,389
let's get a message and it takes an

00:28:27,000 --> 00:28:35,370
argument string sorry it returns a

00:28:30,389 --> 00:28:37,740
string and takes no arguments so once we

00:28:35,370 --> 00:28:39,870
have once we have that set up in our

00:28:37,740 --> 00:28:43,500
module is loaded we can do something

00:28:39,870 --> 00:28:46,590
with the SVG string in this case what I

00:28:43,500 --> 00:28:48,870
chose to do is display the SVG as it is

00:28:46,590 --> 00:28:50,610
and then this way the SVG code right

00:28:48,870 --> 00:28:52,919
after that and looks something like this

00:28:50,610 --> 00:28:54,720
I am nervous about live demos so this is

00:28:52,919 --> 00:28:56,700
kind of like a gif of what it looks like

00:28:54,720 --> 00:28:57,570
again it's it's amazing design you have

00:28:56,700 --> 00:29:00,990
to admit

00:28:57,570 --> 00:29:03,240
so the SVG is right at the top which is

00:29:00,990 --> 00:29:06,330
the ampersand as we expected and then it

00:29:03,240 --> 00:29:12,259
just prints the entire SVG code they can

00:29:06,330 --> 00:29:14,970
like copy and embed and in in your app

00:29:12,259 --> 00:29:19,169
and you don't you can use this with any

00:29:14,970 --> 00:29:21,470
almost any entity TrueType font so for

00:29:19,169 --> 00:29:23,700
example I love graffiti I love urban art

00:29:21,470 --> 00:29:25,440
and I thought it would be fun I found

00:29:23,700 --> 00:29:27,809
this font I don't know how to pronounce

00:29:25,440 --> 00:29:29,789
it so I'm gonna abstain but it prints

00:29:27,809 --> 00:29:31,559
all the characters look like graffiti

00:29:29,789 --> 00:29:36,000
which I thought it was really cool so

00:29:31,559 --> 00:29:39,740
just by changing the embedded file to

00:29:36,000 --> 00:29:42,299
ffff tus G that TTFN we can actually

00:29:39,740 --> 00:29:44,909
generate a completely new SVG that you

00:29:42,299 --> 00:29:46,019
can go and use in your app which I

00:29:44,909 --> 00:29:47,940
thought I think it's actually pretty

00:29:46,019 --> 00:29:51,840
cool for people like me that cannot draw

00:29:47,940 --> 00:29:54,539
but really one two so I kind of got

00:29:51,840 --> 00:29:56,220
excited once um I went through that and

00:29:54,539 --> 00:29:58,919
I was like let's compile everything to

00:29:56,220 --> 00:30:01,769
assembly this is awesome this was easy

00:29:58,919 --> 00:30:04,799
how about video video is something that

00:30:01,769 --> 00:30:06,659
is somewhat hard were complicated were

00:30:04,799 --> 00:30:09,090
weird to do in JavaScript I would be a

00:30:06,659 --> 00:30:11,490
huge one right so again there's this

00:30:09,090 --> 00:30:12,220
another really old library that is still

00:30:11,490 --> 00:30:14,830
the standard

00:30:12,220 --> 00:30:17,980
today it's 18-year old years old

00:30:14,830 --> 00:30:20,379
actually I'm obsessed with library age

00:30:17,980 --> 00:30:23,200
it's called ffmpeg it was like sure I'll

00:30:20,379 --> 00:30:25,299
just compile ffmpeg to be using

00:30:23,200 --> 00:30:27,250
Emscripten it'll be amazing I'll just

00:30:25,299 --> 00:30:30,970
like do it down low over video be super

00:30:27,250 --> 00:30:34,330
cool actually turns out that as awesome

00:30:30,970 --> 00:30:36,190
as C++ is it comes with a dozen plus

00:30:34,330 --> 00:30:40,360
plus build system tools which means

00:30:36,190 --> 00:30:44,139
every C++ project has a way of compiling

00:30:40,360 --> 00:30:45,490
and those ways don't really talk to each

00:30:44,139 --> 00:30:47,080
other they don't really like each other

00:30:45,490 --> 00:30:51,340
they hate each other they're not best

00:30:47,080 --> 00:30:53,230
friends and ffmpeg was actually built to

00:30:51,340 --> 00:30:54,909
compile with something called GCC which

00:30:53,230 --> 00:30:55,629
is a completely different compiler than

00:30:54,909 --> 00:30:57,759
EMCC

00:30:55,629 --> 00:31:02,409
and obviously don't those two you don't

00:30:57,759 --> 00:31:04,419
like each other and it took when I tried

00:31:02,409 --> 00:31:06,610
I tried it for three days and then I

00:31:04,419 --> 00:31:07,929
eventually went I have other things to

00:31:06,610 --> 00:31:10,269
do and I'm gonna Park it for a little

00:31:07,929 --> 00:31:12,100
bit but it's it's a non-trivial problem

00:31:10,269 --> 00:31:13,779
to solve to be able to get this working

00:31:12,100 --> 00:31:15,190
and this is something that honestly I've

00:31:13,779 --> 00:31:17,710
watched a lot of webassembly talks

00:31:15,190 --> 00:31:19,659
before today no one really like everyone

00:31:17,710 --> 00:31:22,090
makes it look like yeah this is so easy

00:31:19,659 --> 00:31:24,070
but turns out there's like if you want

00:31:22,090 --> 00:31:25,779
to bring like really really old huge

00:31:24,070 --> 00:31:27,940
libraries you might run into some

00:31:25,779 --> 00:31:31,419
problems they're really fun to debug but

00:31:27,940 --> 00:31:34,360
they're it's not all like smooth sailing

00:31:31,419 --> 00:31:35,740
and this is really great talk about I

00:31:34,360 --> 00:31:37,929
don't want to butcher her name

00:31:35,740 --> 00:31:40,000
Meghan Slater about lessons in web

00:31:37,929 --> 00:31:42,100
assembly and ffmpeg and her team did

00:31:40,000 --> 00:31:44,409
this as part of an assignment a

00:31:42,100 --> 00:31:46,059
commercial assignment for a client where

00:31:44,409 --> 00:31:48,940
they actually managed to compile a part

00:31:46,059 --> 00:31:50,769
of the ffmpeg to web assembly she

00:31:48,940 --> 00:31:53,500
doesn't really mention how that happened

00:31:50,769 --> 00:31:57,129
in the talk and I would really really

00:31:53,500 --> 00:31:58,659
really really love to know how that how

00:31:57,129 --> 00:32:00,190
they actually made that work and it

00:31:58,659 --> 00:32:04,000
would be such a great documentation to

00:32:00,190 --> 00:32:05,740
have because it's not an easy problem to

00:32:04,000 --> 00:32:07,509
solve and if we don't try to solve it

00:32:05,740 --> 00:32:09,429
together we run into the problem where

00:32:07,509 --> 00:32:11,919
the web is not an open standard anymore

00:32:09,429 --> 00:32:13,919
and web assembly doesn't really go where

00:32:11,919 --> 00:32:16,179
the web goes anymore because it becomes

00:32:13,919 --> 00:32:18,490
proprietary to whoever figured it out

00:32:16,179 --> 00:32:21,580
first and that's not fair it's very nice

00:32:18,490 --> 00:32:23,110
to contribute back to the web and game

00:32:21,580 --> 00:32:25,460
scripting project is doing a really

00:32:23,110 --> 00:32:28,820
really good job to do for that if you're

00:32:25,460 --> 00:32:31,399
there's a bunch of demos of libraries

00:32:28,820 --> 00:32:33,590
that have been ported some of them to

00:32:31,399 --> 00:32:35,990
webassembly some of them don't compile

00:32:33,590 --> 00:32:38,299
yet to webassembly but they do to s MJS

00:32:35,990 --> 00:32:39,620
so you can go check it out this was me

00:32:38,299 --> 00:32:43,220
this morning playing quake

00:32:39,620 --> 00:32:45,620
I'm obviously amazing great at jumping

00:32:43,220 --> 00:32:47,510
but this is just in my Firefox like this

00:32:45,620 --> 00:32:49,010
is amazing I haven't played this in a

00:32:47,510 --> 00:32:50,659
really really long time I was a kid that

00:32:49,010 --> 00:32:53,419
last time I played this so that's pretty

00:32:50,659 --> 00:32:57,110
cool there's also other really really

00:32:53,419 --> 00:32:59,750
useful libraries for education for

00:32:57,110 --> 00:33:04,220
example this is the bullet physics

00:32:59,750 --> 00:33:05,960
engine from C++ that runs that has been

00:33:04,220 --> 00:33:07,909
compiled to webassembly and runs which

00:33:05,960 --> 00:33:09,970
is pretty amazing we can build a lot of

00:33:07,909 --> 00:33:13,909
like really educational tools for this

00:33:09,970 --> 00:33:16,070
using this and going back to this idea

00:33:13,909 --> 00:33:18,260
that the web is supposed to be for

00:33:16,070 --> 00:33:22,940
everyone web assembly is supposed to be

00:33:18,260 --> 00:33:24,529
for everyone and I love if we could

00:33:22,940 --> 00:33:26,210
borrow a little bit of that nineties

00:33:24,529 --> 00:33:28,010
philosophy where it was a little bit

00:33:26,210 --> 00:33:29,750
like the Wild West but at the same time

00:33:28,010 --> 00:33:31,520
people were really excited and they were

00:33:29,750 --> 00:33:34,429
throwing a lot of things at the web and

00:33:31,520 --> 00:33:36,770
seeing what stuck and weird really

00:33:34,429 --> 00:33:38,539
sucked with security but now it doesn't

00:33:36,770 --> 00:33:40,490
have to anymore because web assembly was

00:33:38,539 --> 00:33:43,250
built with that ID online so it makes it

00:33:40,490 --> 00:33:45,409
very very easy to be weird an experiment

00:33:43,250 --> 00:33:48,919
and build a lot of creative weird things

00:33:45,409 --> 00:33:51,350
so let's be weird is what I'm gonna

00:33:48,919 --> 00:33:53,740
leave you with on this Friday and thank

00:33:51,350 --> 00:33:53,740

YouTube URL: https://www.youtube.com/watch?v=NwjpGQiphW0


