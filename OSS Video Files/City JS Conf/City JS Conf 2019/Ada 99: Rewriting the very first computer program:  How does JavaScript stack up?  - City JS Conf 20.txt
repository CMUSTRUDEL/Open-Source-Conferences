Title: Ada 99: Rewriting the very first computer program:  How does JavaScript stack up?  - City JS Conf 20
Publication date: 2019-05-14
Playlist: City JS Conf 2019
Description: 
	Marquis de Geek

I've been developing in JavaScript for nearly 20 years and so am used to solving every problem with a JavaScript-shaped hammer. I don't think I'm alone in this, and wanted to break out of that mindset. Over my career I've professional developed in 16 different languages (and used a further 10 out of curiosity) so I set about re-writing the same code in each of those languages. The purpose of the exercise was (and is) to learn, re-learn, and refresh my memory of these programming languages.
 
By focusing on the paradigms, syntax, data types, and structure of the code I was able to draw parallels between them and JavaScript which encourages me to think outside of the JavaScript-shaped box. This talk will take you on that journey of discovery highlighting many ideas you can take back into your own code, and well as giving an insight into many other languages you might not have seen. It will also make you thankful, or otherwise, by showing what you need to work through in other languages to achieve the same results as JavaScript.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:03,570
thank you thank you thank you thank you

00:00:03,090 --> 00:00:05,069
for that

00:00:03,570 --> 00:00:07,170
completely unnecessary I just walked

00:00:05,069 --> 00:00:08,880
from there to here but thanks anyway

00:00:07,170 --> 00:00:12,389
so as this part of the slide says my

00:00:08,880 --> 00:00:13,920
name is Steve I am a geek and hopefully

00:00:12,389 --> 00:00:16,850
if we're in the right room this talk is

00:00:13,920 --> 00:00:19,350
a $2.99 rewriting the very first program

00:00:16,850 --> 00:00:21,180
so over the course of the next 25

00:00:19,350 --> 00:00:22,560
minutes I'll go through Who I am and why

00:00:21,180 --> 00:00:24,900
I deserve to be on the stage

00:00:22,560 --> 00:00:26,970
what is a $2.99 I'll show you some code

00:00:24,900 --> 00:00:31,380
and then I'll tell you what I've learned

00:00:26,970 --> 00:00:35,550
by this little project so Who am I or is

00:00:31,380 --> 00:00:40,020
I should be called the ego slide I'm a

00:00:35,550 --> 00:00:42,120
developer and have been since 1983 I've

00:00:40,020 --> 00:00:44,250
worked on various games on various

00:00:42,120 --> 00:00:45,870
platforms I've done the EdTech thing the

00:00:44,250 --> 00:00:48,739
JavaScript thing the assembly

00:00:45,870 --> 00:00:51,570
programming thing I advocate open source

00:00:48,739 --> 00:00:54,180
VR and anything else that takes my fancy

00:00:51,570 --> 00:00:55,829
at the time most people say I'm

00:00:54,180 --> 00:00:57,989
unemployed I'm actually unemployable

00:00:55,829 --> 00:01:00,960
this is why I have all the time to do

00:00:57,989 --> 00:01:03,690
all this sort of stuff but according to

00:01:00,960 --> 00:01:05,630
city j/s website I'm all of these things

00:01:03,690 --> 00:01:09,360
but people only look at the bottom one

00:01:05,630 --> 00:01:13,140
and they just say really do you get paid

00:01:09,360 --> 00:01:16,110
money to drink beer and I say yes yes I

00:01:13,140 --> 00:01:17,850
do but unfortunately I'm not here to

00:01:16,110 --> 00:01:21,090
talk about beer I'm talking about

00:01:17,850 --> 00:01:23,310
development precisely $18.99 which is a

00:01:21,090 --> 00:01:25,890
little fun thing I started just as a

00:01:23,310 --> 00:01:27,930
side project so a few years ago is the

00:01:25,890 --> 00:01:29,970
200th anniversary of Ada Lovelace who

00:01:27,930 --> 00:01:32,100
created the very first program which is

00:01:29,970 --> 00:01:35,130
shown here this is an appendix F and

00:01:32,100 --> 00:01:37,950
this calculates Bernoulli numbers which

00:01:35,130 --> 00:01:40,759
I'm pretty sure you all noticed and this

00:01:37,950 --> 00:01:43,560
was the very first program and I thought

00:01:40,759 --> 00:01:45,090
an interesting sequence of numbers I'm

00:01:43,560 --> 00:01:47,460
not a mathematician so I don't really

00:01:45,090 --> 00:01:49,740
understand what all the cleverness is

00:01:47,460 --> 00:01:50,939
but as a sequence of numbers that could

00:01:49,740 --> 00:01:51,509
been programmed not the very first

00:01:50,939 --> 00:01:53,520
machine

00:01:51,509 --> 00:01:56,700
therefore it's probably possible to do

00:01:53,520 --> 00:01:59,909
it in JavaScript spoiler alert it is

00:01:56,700 --> 00:02:01,439
possible to do it in JavaScript so

00:01:59,909 --> 00:02:04,110
instead of using the algorithm that ADA

00:02:01,439 --> 00:02:06,000
used which is rather boring it's only

00:02:04,110 --> 00:02:07,290
about adding to adding to two numbers

00:02:06,000 --> 00:02:09,989
and subtracting two it's not an

00:02:07,290 --> 00:02:12,900
interesting algorithm I found this

00:02:09,989 --> 00:02:15,090
Akiyama tower gawa I think

00:02:12,900 --> 00:02:16,920
algorithm where it's basically have a

00:02:15,090 --> 00:02:18,750
series of fractions in a Pascal

00:02:16,920 --> 00:02:21,209
triangular arrangement and you subtract

00:02:18,750 --> 00:02:23,550
one from the other one as a consequence

00:02:21,209 --> 00:02:24,269
you produce the binary numbers along the

00:02:23,550 --> 00:02:26,459
left edge

00:02:24,269 --> 00:02:29,220
you'll also notice they alternate with

00:02:26,459 --> 00:02:31,530
zeros that is not a bug that's part of a

00:02:29,220 --> 00:02:32,940
number system so I thought okay I could

00:02:31,530 --> 00:02:34,680
implement this fractions not too

00:02:32,940 --> 00:02:35,459
difficult I can code this so I wrote it

00:02:34,680 --> 00:02:39,870
in JavaScript

00:02:35,459 --> 00:02:41,310
yes that's JavaScript not perl you can

00:02:39,870 --> 00:02:42,690
write bad perl in any language include

00:02:41,310 --> 00:02:43,980
JavaScript I wrote this although

00:02:42,690 --> 00:02:46,950
obviously I didn't write that

00:02:43,980 --> 00:02:49,349
I wrote it properly like this but it's

00:02:46,950 --> 00:02:51,360
the same thing so is a brief breakdown

00:02:49,349 --> 00:02:53,400
of the algorithm it's not important that

00:02:51,360 --> 00:02:54,780
you sort of follow along really but

00:02:53,400 --> 00:02:56,310
you're dealing with fractions so I just

00:02:54,780 --> 00:02:58,440
said I'll have two arrays for the top

00:02:56,310 --> 00:02:59,849
bit of the fraction on the bottom bit in

00:02:58,440 --> 00:03:01,379
order to do the maths of calculation

00:02:59,849 --> 00:03:03,540
which is subtract one and then multiply

00:03:01,379 --> 00:03:05,519
by the constant you end up having to do

00:03:03,540 --> 00:03:07,829
you know what they teach you in math

00:03:05,519 --> 00:03:09,510
class about multiplying the top by the

00:03:07,829 --> 00:03:12,060
same thing as you multiply the bottom

00:03:09,510 --> 00:03:15,540
and all this malarkey so I prevented it

00:03:12,060 --> 00:03:18,269
it took part of a lunch hour you have to

00:03:15,540 --> 00:03:20,459
reduce the the equations so if you've

00:03:18,269 --> 00:03:21,660
got two over four you've got to reduce

00:03:20,459 --> 00:03:23,100
it down to one over two because

00:03:21,660 --> 00:03:26,030
otherwise the numbers get too big and

00:03:23,100 --> 00:03:28,739
the accuracy of the numbers falls apart

00:03:26,030 --> 00:03:30,959
so you've got to do a whole function

00:03:28,739 --> 00:03:32,910
called reduce which is the only time I

00:03:30,959 --> 00:03:35,730
got to use recursion in this little

00:03:32,910 --> 00:03:38,220
project and there you have it that's

00:03:35,730 --> 00:03:39,569
what it looks like and well if that's

00:03:38,220 --> 00:03:41,700
what that's what I actually tweeted

00:03:39,569 --> 00:03:44,519
because that fits in a tweet that

00:03:41,700 --> 00:03:46,799
doesn't so I tweeted this out and you

00:03:44,519 --> 00:03:48,750
know I got my little dopamine fix for

00:03:46,799 --> 00:03:51,540
the day well they're proud of myself and

00:03:48,750 --> 00:03:53,790
then my mate Bob comes along and says

00:03:51,540 --> 00:03:54,590
you don't in JavaScript won't you do it

00:03:53,790 --> 00:03:56,669
now yeah

00:03:54,590 --> 00:03:58,410
leo is a programming language is

00:03:56,669 --> 00:04:00,000
something the dod use for a lot their

00:03:58,410 --> 00:04:02,040
military stuff it's very precise it's

00:04:00,000 --> 00:04:03,599
very official type of language and I

00:04:02,040 --> 00:04:06,269
thought well I don't programming in

00:04:03,599 --> 00:04:08,370
Haider but I've got another half of a

00:04:06,269 --> 00:04:10,919
lunch hour three so I learned data and I

00:04:08,370 --> 00:04:12,209
wrote this it's probably not very good

00:04:10,919 --> 00:04:14,280
either in fact I'm pretty sure it's

00:04:12,209 --> 00:04:17,039
definitely not very good either but it

00:04:14,280 --> 00:04:18,180
worked it's kind of interesting I've

00:04:17,039 --> 00:04:19,590
learned a little bit of a language I

00:04:18,180 --> 00:04:21,719
looked at some of the things that the

00:04:19,590 --> 00:04:23,789
language did you know you can see it's

00:04:21,719 --> 00:04:25,409
got formal begin and end blocks and

00:04:23,789 --> 00:04:26,340
declare blocks which are separate from

00:04:25,409 --> 00:04:29,250
the code

00:04:26,340 --> 00:04:33,560
okay interesting fair enough so a little

00:04:29,250 --> 00:04:36,210
bit about ADA just as an interlude 1980

00:04:33,560 --> 00:04:38,220
I'm pretty sure there's only a few of us

00:04:36,210 --> 00:04:41,160
who are actually born in 1980 let alone

00:04:38,220 --> 00:04:43,199
were programming in 1980 but it existed

00:04:41,160 --> 00:04:44,669
but I've seen years ago and it's got

00:04:43,199 --> 00:04:47,190
very nice strict typing so your

00:04:44,669 --> 00:04:48,570
typescript fans will like this one you

00:04:47,190 --> 00:04:51,290
have to put semicolons at the end of

00:04:48,570 --> 00:04:54,710
lines like you should be doing anyway oh

00:04:51,290 --> 00:04:57,000
so that's the one that divides to them

00:04:54,710 --> 00:04:59,160
you've got the double dot ellipses in

00:04:57,000 --> 00:05:01,590
the language just like Ruby had 30 years

00:04:59,160 --> 00:05:04,500
later really nice very handy thing to

00:05:01,590 --> 00:05:06,210
have a separate declaration section for

00:05:04,500 --> 00:05:08,760
your variable so you don't suddenly get

00:05:06,210 --> 00:05:10,590
hoisted upon that's good and they're

00:05:08,760 --> 00:05:12,990
used these weird type of brackets that

00:05:10,590 --> 00:05:15,840
are rounded that was strange

00:05:12,990 --> 00:05:17,190
an assignment was colon equals which

00:05:15,840 --> 00:05:19,320
every thought was really quite handy

00:05:17,190 --> 00:05:21,510
it's not the only language to do it but

00:05:19,320 --> 00:05:23,010
the keyboard that most of us have will

00:05:21,510 --> 00:05:25,500
be using it's got about 20 different

00:05:23,010 --> 00:05:26,669
symbols on it but mathematically

00:05:25,500 --> 00:05:28,169
speaking there's about a hundred

00:05:26,669 --> 00:05:30,389
different maths type of symbols

00:05:28,169 --> 00:05:32,160
operations and things that we actually

00:05:30,389 --> 00:05:34,080
want to do which means every single

00:05:32,160 --> 00:05:36,300
symbol is can probably have two

00:05:34,080 --> 00:05:37,470
characters at least and as soon as

00:05:36,300 --> 00:05:38,850
you've got two characters you've got to

00:05:37,470 --> 00:05:41,130
get you've got the chance of getting one

00:05:38,850 --> 00:05:42,539
of them wrong anyone that comes from a

00:05:41,130 --> 00:05:43,979
seed background remember the problem of

00:05:42,539 --> 00:05:46,740
getting a double equals well than a

00:05:43,979 --> 00:05:48,360
single eCourse this wasn't so far back

00:05:46,740 --> 00:05:50,669
that people started putting things in

00:05:48,360 --> 00:05:53,370
compilers that would say you've done a

00:05:50,669 --> 00:05:54,990
single equals a value I think you should

00:05:53,370 --> 00:05:57,060
write it the other way round so you'd

00:05:54,990 --> 00:06:00,539
like four equals a so the assignment

00:05:57,060 --> 00:06:02,460
would fail at the compile level they

00:06:00,539 --> 00:06:04,110
solve the problem by actually changing

00:06:02,460 --> 00:06:06,660
the symbol for a sign to something that

00:06:04,110 --> 00:06:08,550
you would never confuse and they use

00:06:06,660 --> 00:06:10,590
slash e calls instead of not equals

00:06:08,550 --> 00:06:11,820
which I thought was weird but it didn't

00:06:10,590 --> 00:06:13,560
matter I didn't want to become a native

00:06:11,820 --> 00:06:15,210
programmer so I can learn about Ada all

00:06:13,560 --> 00:06:17,370
I like cuz they're not gonna hire me and

00:06:15,210 --> 00:06:19,110
that was the end of the story I'd

00:06:17,370 --> 00:06:20,849
written this very first program in two

00:06:19,110 --> 00:06:22,169
languages I'd got my tweets I got my

00:06:20,849 --> 00:06:23,669
dopamine fix and it's coming up to the

00:06:22,169 --> 00:06:25,160
end of the lunch hour so I thought oh I

00:06:23,669 --> 00:06:33,270
can go back to doing some proper work

00:06:25,160 --> 00:06:35,190
well whatever proper work is maybe not

00:06:33,270 --> 00:06:36,300
you know there was more vite you didn't

00:06:35,190 --> 00:06:39,270
think that was the actual end of the

00:06:36,300 --> 00:06:40,710
talk no really good so I was having a

00:06:39,270 --> 00:06:42,360
little mindless think and it's like well

00:06:40,710 --> 00:06:44,550
if not in two languages how many have I

00:06:42,360 --> 00:06:46,440
actually coded in well professionally

00:06:44,550 --> 00:06:48,300
speaking all these and then a couple

00:06:46,440 --> 00:06:49,770
more bear in mind

00:06:48,300 --> 00:06:51,720
coming from a games background games

00:06:49,770 --> 00:06:53,039
consoles you end up doing assembler it's

00:06:51,720 --> 00:06:57,210
one of the few jobs you actually get to

00:06:53,039 --> 00:07:00,690
probably hit the metal and I've done a

00:06:57,210 --> 00:07:04,560
few languages for fun assembler for fun

00:07:00,690 --> 00:07:06,389
oh yeah six 502 and I've invented a few

00:07:04,560 --> 00:07:08,069
languages my own for various things so

00:07:06,389 --> 00:07:11,009
obviously I'm contractually obliged to

00:07:08,069 --> 00:07:12,449
do those and also not on here I've done

00:07:11,009 --> 00:07:14,190
things like brain fudge and other

00:07:12,449 --> 00:07:16,770
esoteric languages because I think

00:07:14,190 --> 00:07:18,750
they're great fun again nothing useful

00:07:16,770 --> 00:07:20,940
just good fun to do the thought I've

00:07:18,750 --> 00:07:23,729
done an awful lot of languages I wonder

00:07:20,940 --> 00:07:25,440
how many of these I could actually use

00:07:23,729 --> 00:07:28,259
to implement that very first algorithm

00:07:25,440 --> 00:07:30,479
so I said about doing it in no order

00:07:28,259 --> 00:07:32,069
without preference and I wasn't in

00:07:30,479 --> 00:07:33,930
trying to be idiomatic I wasn't trying

00:07:32,069 --> 00:07:36,090
to learn my language by using this as I

00:07:33,930 --> 00:07:37,590
a jumping-off point or well I know the

00:07:36,090 --> 00:07:39,300
algorithm therefore I just got to learn

00:07:37,590 --> 00:07:43,409
the structure and the syntax language

00:07:39,300 --> 00:07:46,770
I'm just interested in doing it so I did

00:07:43,409 --> 00:07:47,699
and I did it in Pascal Oh Pascal how

00:07:46,770 --> 00:07:50,669
I've missed you

00:07:47,699 --> 00:07:54,740
I really hope those groans are for the

00:07:50,669 --> 00:07:57,360
two people that got the joke and this

00:07:54,740 --> 00:07:59,969
three-column monstrosity is what's

00:07:57,360 --> 00:08:02,669
necessary in Pascal to do exactly the

00:07:59,969 --> 00:08:06,539
same thing as you saw on half a slide

00:08:02,669 --> 00:08:08,909
earlier so it is quite verbose but it is

00:08:06,539 --> 00:08:10,530
meant as a teaching language although

00:08:08,909 --> 00:08:11,969
I'm not convinced anyone that was taught

00:08:10,530 --> 00:08:13,590
this as their first language would be

00:08:11,969 --> 00:08:16,830
encouraged to stay with programming

00:08:13,590 --> 00:08:19,229
after doing this but what do I know

00:08:16,830 --> 00:08:21,900
so what did I notice stupidly verbose

00:08:19,229 --> 00:08:24,080
but who cares a very important declare

00:08:21,900 --> 00:08:27,120
before use which comes up quite a lot

00:08:24,080 --> 00:08:28,830
loop sneaked down too so if you're doing

00:08:27,120 --> 00:08:32,130
a loop that goes from one to ten you

00:08:28,830 --> 00:08:34,079
goes from one to ten but if it has to go

00:08:32,130 --> 00:08:37,169
from ten to one you have to say I want

00:08:34,079 --> 00:08:38,909
this to go down to one which is a nice

00:08:37,169 --> 00:08:42,419
way of reading it but if these values

00:08:38,909 --> 00:08:44,459
are not one on ten but x and y you can't

00:08:42,419 --> 00:08:46,930
code it you've got an explicitly work

00:08:44,459 --> 00:08:48,910
out if X is going to be greater than Y

00:08:46,930 --> 00:08:51,339
and loop accordingly or change the way

00:08:48,910 --> 00:08:53,230
you do your loop constructs there is a

00:08:51,339 --> 00:08:55,260
separate instructions for integer and

00:08:53,230 --> 00:08:58,870
double or floating point division

00:08:55,260 --> 00:09:00,370
thought that was quite amusing functions

00:08:58,870 --> 00:09:02,740
and procedures have different names and

00:09:00,370 --> 00:09:05,440
for loops are inclusive what for loops

00:09:02,740 --> 00:09:06,790
are inclusive so if I go from 1 to 10

00:09:05,440 --> 00:09:10,120
I'm actually going from 1 to 10

00:09:06,790 --> 00:09:12,399
inclusive this was a teaching language

00:09:10,120 --> 00:09:15,910
using a practice that we now consider

00:09:12,399 --> 00:09:18,040
completely and utterly awful but it's a

00:09:15,910 --> 00:09:19,930
teaching language sir are we wrong this

00:09:18,040 --> 00:09:21,580
calls me to question the idea of well I

00:09:19,930 --> 00:09:23,140
assume certain things because my

00:09:21,580 --> 00:09:26,140
language tells me this is a good thing

00:09:23,140 --> 00:09:28,720
to do yet other languages tell me this

00:09:26,140 --> 00:09:31,779
is a good thing to do so I had to a T

00:09:28,720 --> 00:09:34,690
start you know doing some thinking I did

00:09:31,779 --> 00:09:38,230
it in Perl I made that as readable as I

00:09:34,690 --> 00:09:41,050
could and I also used the math function

00:09:38,230 --> 00:09:42,100
labor fraction library just you know cuz

00:09:41,050 --> 00:09:43,779
I didn't wanna make it too verbose I

00:09:42,100 --> 00:09:45,970
thought okay that's quite nice you'll

00:09:43,779 --> 00:09:48,760
see the double ellipse in there and the

00:09:45,970 --> 00:09:51,000
reverse operation so that goes between 1

00:09:48,760 --> 00:09:54,040
and whatever M happens to be a nice

00:09:51,000 --> 00:09:57,940
simple expressive way of saying there is

00:09:54,040 --> 00:10:01,200
a range of numbers here quite ahead of

00:09:57,940 --> 00:10:03,640
its time the first line in almost every

00:10:01,200 --> 00:10:07,270
Perl program I wrote it right is the

00:10:03,640 --> 00:10:11,459
word use strict you may recognize that

00:10:07,270 --> 00:10:11,459
as far as I'm aware it started with Perl

00:10:12,420 --> 00:10:16,810
as I say yeah Perl was ahead of its time

00:10:14,529 --> 00:10:19,959
then it's now behind it

00:10:16,810 --> 00:10:21,220
Perl 6 is quite interesting but that's

00:10:19,959 --> 00:10:23,170
weird

00:10:21,220 --> 00:10:25,630
some very nice things in language for

00:10:23,170 --> 00:10:28,620
each that was available you know 20 odd

00:10:25,630 --> 00:10:30,670
years ago scoped variables in the loop

00:10:28,620 --> 00:10:33,040
again as someone that started learning

00:10:30,670 --> 00:10:34,600
JavaScript 20 years ago used var and got

00:10:33,040 --> 00:10:37,240
hoisted quite a lot to the idea of

00:10:34,600 --> 00:10:39,279
actual scoping things beyond what

00:10:37,240 --> 00:10:40,990
they're supposed to was a really good

00:10:39,279 --> 00:10:42,220
thing for me here use of ellipses

00:10:40,990 --> 00:10:44,740
operator overloading

00:10:42,220 --> 00:10:48,279
so people who come from C++ and really

00:10:44,740 --> 00:10:52,560
miss that could use it in Perl and then

00:10:48,279 --> 00:10:55,810
I thought I'd do PHP and I found a bug

00:10:52,560 --> 00:10:57,790
it's like if I'm doing this I'm doing it

00:10:55,810 --> 00:10:59,230
to sort of explore the languages to

00:10:57,790 --> 00:10:59,810
experiment the language to learn about

00:10:59,230 --> 00:11:01,970
it

00:10:59,810 --> 00:11:03,290
it's not there and I didn't do it so I

00:11:01,970 --> 00:11:05,660
could have a rag all the languages I

00:11:03,290 --> 00:11:07,070
didn't like so I thought I'm gonna do /

00:11:05,660 --> 00:11:09,230
I'm gonna do pearl because I did it

00:11:07,070 --> 00:11:11,180
I'll do Sikhs I did that for a while

00:11:09,230 --> 00:11:13,370
I'll do PHP and I'll do it with a

00:11:11,180 --> 00:11:15,680
completely open mind I don't have any

00:11:13,370 --> 00:11:16,790
prejudices I'll goin dicing and then I

00:11:15,680 --> 00:11:19,460
get on everywhere the first thing I

00:11:16,790 --> 00:11:21,529
tried writing and it's like it's really

00:11:19,460 --> 00:11:23,930
not helping your case and for those

00:11:21,529 --> 00:11:26,240
interesting what the bug was the library

00:11:23,930 --> 00:11:30,460
is wrong doesn't return the things which

00:11:26,240 --> 00:11:37,160
are right but I got the right result and

00:11:30,460 --> 00:11:39,200
then as is me it got very silly I bring

00:11:37,160 --> 00:11:40,880
the ego slide up because it points out

00:11:39,200 --> 00:11:44,540
game developer probably not completely

00:11:40,880 --> 00:11:46,130
hinged as a person is it magician so

00:11:44,540 --> 00:11:47,420
obviously like sitting at home in a

00:11:46,130 --> 00:11:50,960
darkened room playing with the deck of

00:11:47,420 --> 00:11:51,650
cards obviously not a grown-up so when I

00:11:50,960 --> 00:11:54,050
get silly

00:11:51,650 --> 00:11:57,640
I get really silly and I start

00:11:54,050 --> 00:12:02,779
programming in basic not just any basic

00:11:57,640 --> 00:12:07,210
this basic Sinclair spectrum basic from

00:12:02,779 --> 00:12:09,380
1982 on a computer that look like that

00:12:07,210 --> 00:12:11,390
what is so special about this machine

00:12:09,380 --> 00:12:13,430
other than I owned it back in the day

00:12:11,390 --> 00:12:19,070
and I'm sort of a big retro computer

00:12:13,430 --> 00:12:22,490
fanboy well it's got a very nice font it

00:12:19,070 --> 00:12:25,370
works computing these few values took

00:12:22,490 --> 00:12:28,310
about three and a half hours on an

00:12:25,370 --> 00:12:32,839
emulator with the time restrictor turned

00:12:28,310 --> 00:12:35,000
off it was not a fast machine but it

00:12:32,839 --> 00:12:36,260
worked and and after this point the

00:12:35,000 --> 00:12:38,170
number system breaks down on the

00:12:36,260 --> 00:12:40,520
spectrum so this as far as you can go a

00:12:38,170 --> 00:12:42,320
lot of number systems they're written in

00:12:40,520 --> 00:12:44,000
I Triple E standard so if you're doing

00:12:42,320 --> 00:12:47,089
floating-point the numbers aren't

00:12:44,000 --> 00:12:48,560
accurate point one plus point two does

00:12:47,089 --> 00:12:50,830
not equal point three all that sort of

00:12:48,560 --> 00:12:54,260
thing it's a very common problem

00:12:50,830 --> 00:12:56,839
spectrum had it worse than most but I

00:12:54,260 --> 00:12:58,220
got some answers so I was happy things I

00:12:56,839 --> 00:13:02,630
should point out about this version of

00:12:58,220 --> 00:13:04,459
basic no local variables ever try

00:13:02,630 --> 00:13:06,440
programming anything recently without a

00:13:04,459 --> 00:13:09,320
local variable without any form of scope

00:13:06,440 --> 00:13:11,510
as in everything is a global have you

00:13:09,320 --> 00:13:13,340
tried calling a function when you've got

00:13:11,510 --> 00:13:14,990
my parameters to the function

00:13:13,340 --> 00:13:16,130
so you gotta pass them into global and

00:13:14,990 --> 00:13:18,800
then you've got to pass the result back

00:13:16,130 --> 00:13:20,210
out in another global and you've got to

00:13:18,800 --> 00:13:22,130
make sure everything in your program

00:13:20,210 --> 00:13:24,140
does not reuse those same Global's

00:13:22,130 --> 00:13:27,860
because they'll corrupt it have you ever

00:13:24,140 --> 00:13:29,390
tried that I don't recommend it but it's

00:13:27,860 --> 00:13:31,280
what it's a worthwhile exercise

00:13:29,390 --> 00:13:33,560
there was no recursion in this

00:13:31,280 --> 00:13:35,480
particular former basic I could have

00:13:33,560 --> 00:13:39,910
made things easy for myself I could have

00:13:35,480 --> 00:13:43,970
picked a nice basic like visual basic or

00:13:39,910 --> 00:13:46,040
you know or one of the more modern with

00:13:43,970 --> 00:13:47,630
local variables and the kerschen and all

00:13:46,040 --> 00:13:49,730
this kind of clever stuff but no I

00:13:47,630 --> 00:13:51,980
picked a version that wouldn't let me do

00:13:49,730 --> 00:13:53,750
recursion why recursion to fight to

00:13:51,980 --> 00:13:56,720
reduce a fraction it's a recursive

00:13:53,750 --> 00:13:59,330
process fundamentally unfortunately I

00:13:56,720 --> 00:14:01,460
couldn't use recursion see problems with

00:13:59,330 --> 00:14:03,380
global variables and so forth so I had

00:14:01,460 --> 00:14:05,210
to rewrite my algorithm there's no

00:14:03,380 --> 00:14:06,710
modulus operation when you're doing this

00:14:05,210 --> 00:14:07,970
type of fractions you need that modulus

00:14:06,710 --> 00:14:10,730
so I had to hand like that

00:14:07,970 --> 00:14:15,620
and I had to use go to it I'll just call

00:14:10,730 --> 00:14:19,160
these functions and 0/0 what who knows

00:14:15,620 --> 00:14:21,470
what that results in yeah sometimes it's

00:14:19,160 --> 00:14:24,370
zero sometimes it's not in various

00:14:21,470 --> 00:14:26,300
versions of but these languages 0/0 is

00:14:24,370 --> 00:14:27,470
completely at the whim of whoever

00:14:26,300 --> 00:14:31,130
happened to be sampling machine at the

00:14:27,470 --> 00:14:34,430
time loops and arrays start from one and

00:14:31,130 --> 00:14:36,260
not zero another piece of standard

00:14:34,430 --> 00:14:39,590
knowledge nowadays we all assume an

00:14:36,260 --> 00:14:41,240
array will start at zero a lot of people

00:14:39,590 --> 00:14:43,400
now have been programming for longer

00:14:41,240 --> 00:14:45,260
than they've been at school which means

00:14:43,400 --> 00:14:48,860
it's more obvious for us now to count

00:14:45,260 --> 00:14:50,960
from zero not to count from one counting

00:14:48,860 --> 00:14:52,790
from zero gets rid of all these gatepost

00:14:50,960 --> 00:14:55,580
errors it's a brilliant thing we just

00:14:52,790 --> 00:14:57,170
accept is natural but all the basics

00:14:55,580 --> 00:14:58,880
which were meant to be an introduction

00:14:57,170 --> 00:15:01,490
programming thing they start from one

00:14:58,880 --> 00:15:06,020
four track also starts from one I think

00:15:01,490 --> 00:15:08,030
ADA also starts from one again so who

00:15:06,020 --> 00:15:09,980
got it right

00:15:08,030 --> 00:15:12,020
I did find a version of basic that lets

00:15:09,980 --> 00:15:14,000
you use parameters and if you're using

00:15:12,020 --> 00:15:15,680
integer parameters you've got to use one

00:15:14,000 --> 00:15:18,530
name and if you've got string parameters

00:15:15,680 --> 00:15:20,240
you have to use another I have no idea

00:15:18,530 --> 00:15:22,249
why

00:15:20,240 --> 00:15:25,160
and like you know if you want some pithy

00:15:22,249 --> 00:15:26,600
little quote to tweet from this talk was

00:15:25,160 --> 00:15:28,610
it ever really used for teaching

00:15:26,600 --> 00:15:30,740
programming or just introducing it and

00:15:28,610 --> 00:15:32,540
not all the times I see the languages on

00:15:30,740 --> 00:15:34,369
its though this is for teaching and this

00:15:32,540 --> 00:15:36,559
is going to teach people that's why are

00:15:34,369 --> 00:15:38,809
you really teaching them this isn't

00:15:36,559 --> 00:15:41,509
really programming this is glorified

00:15:38,809 --> 00:15:44,290
rubbish but it does introduce you to the

00:15:41,509 --> 00:15:48,769
idea of algorithms and programs flow so

00:15:44,290 --> 00:15:54,129
maybe it's not so bad oh yeah I said I

00:15:48,769 --> 00:15:56,360
got silly right Bosch now for those that

00:15:54,129 --> 00:15:58,879
are lucky enough to live in a gooey

00:15:56,360 --> 00:16:00,559
world Basset Bosch is a really nice

00:15:58,879 --> 00:16:02,209
shell language you know you can piece

00:16:00,559 --> 00:16:04,129
together lots of programs take input

00:16:02,209 --> 00:16:05,779
from one program send it to another

00:16:04,129 --> 00:16:07,790
program send it to two different

00:16:05,779 --> 00:16:10,279
programs at the same time take the

00:16:07,790 --> 00:16:13,519
output process it and use pipes it was a

00:16:10,279 --> 00:16:15,619
brilliant but it's used for training

00:16:13,519 --> 00:16:18,619
processes together handling different

00:16:15,619 --> 00:16:22,209
processes it's not meant for arithmetic

00:16:18,619 --> 00:16:24,410
it is certainly not meant for fractions

00:16:22,209 --> 00:16:27,110
which means if you want to do something

00:16:24,410 --> 00:16:29,709
really ordinary and boring such as

00:16:27,110 --> 00:16:32,720
multiplying some numbers together this

00:16:29,709 --> 00:16:34,129
multiplies two numbers together you've

00:16:32,720 --> 00:16:35,389
got multiple dollar signs multiple

00:16:34,129 --> 00:16:38,059
different types of bracket you've got

00:16:35,389 --> 00:16:41,209
three brackets in one expression the

00:16:38,059 --> 00:16:42,529
round the square and the curly in one

00:16:41,209 --> 00:16:44,449
expression just to multiply numbers

00:16:42,529 --> 00:16:47,209
together this language was obviously not

00:16:44,449 --> 00:16:50,480
meant for number processing but you can

00:16:47,209 --> 00:16:52,399
do it and it didn't take that long

00:16:50,480 --> 00:16:55,069
ultimately because it's very obvious in

00:16:52,399 --> 00:16:56,809
the way that it works but it is what you

00:16:55,069 --> 00:16:58,160
know if anyone says you know or any

00:16:56,809 --> 00:17:00,980
language it's Chu and complete is

00:16:58,160 --> 00:17:04,179
perfectly good enough just ask them what

00:17:00,980 --> 00:17:06,740
they want to build this was not sensible

00:17:04,179 --> 00:17:09,470
but it worked and it was quite nice and

00:17:06,740 --> 00:17:11,179
I was quite pleased with myself but

00:17:09,470 --> 00:17:13,069
really if you look at the sort of things

00:17:11,179 --> 00:17:15,140
you've got to do to even do that second

00:17:13,069 --> 00:17:18,199
line J m1 equals dollar bracket back at

00:17:15,140 --> 00:17:21,309
dollar J minus one bracket bracket that

00:17:18,199 --> 00:17:21,309
just subtracts one

00:17:24,140 --> 00:17:32,210
I did it in C you'll notice I did it in

00:17:27,140 --> 00:17:33,799
C not C++ I started C back in well

00:17:32,210 --> 00:17:36,710
technically I first learned of C and I

00:17:33,799 --> 00:17:40,250
saw the first things in about 86 87 I

00:17:36,710 --> 00:17:41,900
started programming in 91 and when I got

00:17:40,250 --> 00:17:44,740
my first job they said oh you can

00:17:41,900 --> 00:17:51,350
program in C yeah we you C++ I thought

00:17:44,740 --> 00:17:54,260
okay and I had not programmed C since 94

00:17:51,350 --> 00:17:54,530
I guess so I thought how hard can this

00:17:54,260 --> 00:17:57,530
be

00:17:54,530 --> 00:17:59,830
it's just C++ but you know without

00:17:57,530 --> 00:18:02,750
templates well I don't need templates

00:17:59,830 --> 00:18:04,010
but it turns out I'd also forgotten you

00:18:02,750 --> 00:18:06,740
need if you wanted to allocate any

00:18:04,010 --> 00:18:09,320
memory you have to call malloc and then

00:18:06,740 --> 00:18:10,820
you have to remember to call three I've

00:18:09,320 --> 00:18:12,770
also forgotten you need to cast these

00:18:10,820 --> 00:18:14,510
pointers because C++ would just

00:18:12,770 --> 00:18:16,250
naturally follow into whatever it needs

00:18:14,510 --> 00:18:19,160
to do C doesn't

00:18:16,250 --> 00:18:20,990
I'd forgotten about having to handle

00:18:19,160 --> 00:18:23,299
pointers in this way I would just

00:18:20,990 --> 00:18:25,400
normally use a reference and all of a

00:18:23,299 --> 00:18:27,200
sudden all the bad memories have seen

00:18:25,400 --> 00:18:29,929
all the things you have to do to do

00:18:27,200 --> 00:18:31,790
fairly simple stuff just came back again

00:18:29,929 --> 00:18:35,809
and there's a reason I've never gone

00:18:31,790 --> 00:18:38,330
back to C C++ or for all its faults in

00:18:35,809 --> 00:18:40,760
its caller cases is actually quite a

00:18:38,330 --> 00:18:42,440
good language for getting rid of a lot

00:18:40,760 --> 00:18:44,450
of the stuff you have to do and get

00:18:42,440 --> 00:18:49,820
wrong and of course it's got his own

00:18:44,450 --> 00:18:51,980
problems also yeah so I didn't use stll

00:18:49,820 --> 00:18:54,470
boost because I wanted to do it wor as I

00:18:51,980 --> 00:18:56,980
would have done a vanilla version struct

00:18:54,470 --> 00:18:59,570
and type def side not tight then forever

00:18:56,980 --> 00:19:01,220
because in C++ you can just say oh yeah

00:18:59,570 --> 00:19:03,799
I've got an object I'm with a course a

00:19:01,220 --> 00:19:06,799
class object name and it just does it

00:19:03,799 --> 00:19:09,080
automatically so if you ever want if you

00:19:06,799 --> 00:19:11,299
ever programming in C++ and you're

00:19:09,080 --> 00:19:14,840
getting really fed up with it just think

00:19:11,299 --> 00:19:15,950
yourself lucky it's not C and then I

00:19:14,840 --> 00:19:17,780
went on that I did it in 20 other

00:19:15,950 --> 00:19:20,780
languages again there was no particular

00:19:17,780 --> 00:19:22,220
order or structure to this I just went

00:19:20,780 --> 00:19:25,429
through and says what do I fancy doing

00:19:22,220 --> 00:19:27,980
today forth so I wrote a version in

00:19:25,429 --> 00:19:31,070
fourth which was an incredibly difficult

00:19:27,980 --> 00:19:33,169
thing not because forth is difficult

00:19:31,070 --> 00:19:34,820
fourth is easy and if you if you get

00:19:33,169 --> 00:19:37,150
bored you can write a forth interpreter

00:19:34,820 --> 00:19:38,650
in JavaScript in about 200 lines

00:19:37,150 --> 00:19:40,510
it's a really simple language it's

00:19:38,650 --> 00:19:43,930
really effective but it's really not cut

00:19:40,510 --> 00:19:46,210
out for this kind of work if you're I

00:19:43,930 --> 00:19:48,280
don't know if it is 200 lines or 220

00:19:46,210 --> 00:19:50,860
lines or something I released it I list

00:19:48,280 --> 00:19:54,460
a version on my github I think two years

00:19:50,860 --> 00:19:56,550
ago tomorrow can you guess what it was

00:19:54,460 --> 00:19:59,050
called released tomorrow

00:19:56,550 --> 00:20:00,059
that's May the fourth so I call it Jedi

00:19:59,050 --> 00:20:02,140
fourth

00:20:00,059 --> 00:20:05,950
okay I'll stick to the magic and not the

00:20:02,140 --> 00:20:07,180
comedy point token so after all of this

00:20:05,950 --> 00:20:08,590
I've been playing with all these little

00:20:07,180 --> 00:20:12,010
languages doing all these little things

00:20:08,590 --> 00:20:13,510
and I like to think that I came out the

00:20:12,010 --> 00:20:15,490
other end a slightly more questioning

00:20:13,510 --> 00:20:16,929
programmer wondering about the things

00:20:15,490 --> 00:20:19,660
which I've just taken for granted for so

00:20:16,929 --> 00:20:22,240
long having done the same language you

00:20:19,660 --> 00:20:25,570
know for the most part of the last 20

00:20:22,240 --> 00:20:28,059
years the balance between new and old a

00:20:25,570 --> 00:20:29,650
new and old ideas never struck even

00:20:28,059 --> 00:20:32,050
newer languages sometimes are thinking

00:20:29,650 --> 00:20:34,350
maybe we should start counting from one

00:20:32,050 --> 00:20:36,790
not zero

00:20:34,350 --> 00:20:38,800
maybe we'll go back to that perceived

00:20:36,790 --> 00:20:41,470
wisdom there's the earth the first way

00:20:38,800 --> 00:20:44,530
it sticks around you know ADA as a race

00:20:41,470 --> 00:20:46,630
starting from one that's 1980 last 30

00:20:44,530 --> 00:20:48,790
odd years after you know the first

00:20:46,630 --> 00:20:50,590
languages like APL things like that

00:20:48,790 --> 00:20:53,020
which IPL actually is an interesting

00:20:50,590 --> 00:20:55,300
point earlier when I was talking about

00:20:53,020 --> 00:20:56,500
the number of symbols that you have on

00:20:55,300 --> 00:20:58,290
the keyboard versus the number of

00:20:56,500 --> 00:21:01,450
symbols you need to express mathematics

00:20:58,290 --> 00:21:02,890
APL had a different symbol for every

00:21:01,450 --> 00:21:05,080
single mathematical operation it would

00:21:02,890 --> 00:21:07,270
do every one and had a special keyboard

00:21:05,080 --> 00:21:09,580
with every single one you don't get it

00:21:07,270 --> 00:21:11,220
right or you get it completely wrong but

00:21:09,580 --> 00:21:13,390
it's a nice formal way of introducing it

00:21:11,220 --> 00:21:15,940
good ideas will always get stolen

00:21:13,390 --> 00:21:17,740
eventually use strict for example I've

00:21:15,940 --> 00:21:19,179
been wanting that in JavaScript for so

00:21:17,740 --> 00:21:23,020
long when it finally turned up is like

00:21:19,179 --> 00:21:25,480
karate the scope is still a debated

00:21:23,020 --> 00:21:27,580
matter it seems everyone seems to have

00:21:25,480 --> 00:21:29,110
their own idea on well if it's inside a

00:21:27,580 --> 00:21:30,940
function then surely everything inside

00:21:29,110 --> 00:21:32,860
that function should be our access to it

00:21:30,940 --> 00:21:34,540
surely that's a scope but then there's

00:21:32,860 --> 00:21:36,280
other languages that say well actually

00:21:34,540 --> 00:21:38,890
if it's inside that then that's a

00:21:36,280 --> 00:21:40,480
separate scope and it's not just things

00:21:38,890 --> 00:21:42,130
like closures where you can sort of

00:21:40,480 --> 00:21:45,210
break the walls of scope a little bit

00:21:42,130 --> 00:21:47,980
other languages have got that in as well

00:21:45,210 --> 00:21:48,920
can names be reused as between variables

00:21:47,980 --> 00:21:52,070
and methods

00:21:48,920 --> 00:21:54,170
I never thought it was a good idea to

00:21:52,070 --> 00:21:56,570
have a function called game and then a

00:21:54,170 --> 00:21:58,250
variable called game and another method

00:21:56,570 --> 00:22:02,300
called but apparently some languages

00:21:58,250 --> 00:22:04,700
allow it and even encouraged it when

00:22:02,300 --> 00:22:07,160
else although transpiling um um ligature

00:22:04,700 --> 00:22:08,420
yes enumeration comprehensions i've got

00:22:07,160 --> 00:22:09,860
no idea what i was thinking when i wrote

00:22:08,420 --> 00:22:12,920
that but never mind

00:22:09,860 --> 00:22:15,440
oh yes number could you um languages

00:22:12,920 --> 00:22:18,920
fantastic invention it is the invention

00:22:15,440 --> 00:22:20,510
that makes all others possible that's my

00:22:18,920 --> 00:22:21,830
quote by the way honestly it's not

00:22:20,510 --> 00:22:25,430
someone else who's more famous and

00:22:21,830 --> 00:22:26,990
talented but you'd think by now after

00:22:25,430 --> 00:22:29,120
doing this software engineering malarkey

00:22:26,990 --> 00:22:30,380
for years and years we would have a nice

00:22:29,120 --> 00:22:31,430
standard number catcher

00:22:30,380 --> 00:22:32,870
where everything would have a most

00:22:31,430 --> 00:22:36,200
obvious name that everyone could agree

00:22:32,870 --> 00:22:39,140
in emotions for example a fairly obvious

00:22:36,200 --> 00:22:40,550
name it exists in C and C++ as the enum

00:22:39,140 --> 00:22:41,900
keyword so it's fairly obvious what

00:22:40,550 --> 00:22:44,030
you're doing eat up that's an

00:22:41,900 --> 00:22:45,740
enumeration yet some languages come

00:22:44,030 --> 00:22:47,030
along and says all right we see you've

00:22:45,740 --> 00:22:49,100
got a twenty other languages that

00:22:47,030 --> 00:22:50,810
already use the word enumeration we're

00:22:49,100 --> 00:22:53,390
gonna implement exactly the same thing

00:22:50,810 --> 00:22:55,820
in exactly the same way but we'll call

00:22:53,390 --> 00:22:58,100
it comprehensions which just makes it

00:22:55,820 --> 00:22:59,840
that slightly more difficult that raises

00:22:58,100 --> 00:23:00,950
the bar slightly for you to get into it

00:22:59,840 --> 00:23:02,660
because all the sort of like what's a

00:23:00,950 --> 00:23:05,170
comprehension I was something I already

00:23:02,660 --> 00:23:06,920
know so why don't they call it that

00:23:05,170 --> 00:23:09,410
transpiling is looking to be an

00:23:06,920 --> 00:23:11,720
interesting area for me about doing this

00:23:09,410 --> 00:23:13,100
as a little project thing and some

00:23:11,720 --> 00:23:16,010
languages I think I've just been

00:23:13,100 --> 00:23:18,680
intended as a patch language now what I

00:23:16,010 --> 00:23:20,510
mean by that is it's not intended to be

00:23:18,680 --> 00:23:22,160
the next great leap forward it's just

00:23:20,510 --> 00:23:25,880
meant to stop us of suffering the pain

00:23:22,160 --> 00:23:28,040
of right now so there's a we have a

00:23:25,880 --> 00:23:31,820
little chat last night who here

00:23:28,040 --> 00:23:34,040
remembers subversion yeah quite a few of

00:23:31,820 --> 00:23:38,120
you you're not quite so young who

00:23:34,040 --> 00:23:39,950
remembers CVS oh okay now in narrowing

00:23:38,120 --> 00:23:44,900
the that narrowing the heard a little

00:23:39,950 --> 00:23:49,360
bit and what about CCS oh just that you

00:23:44,900 --> 00:23:52,820
were me both pal so what is this up well

00:23:49,360 --> 00:23:54,440
CVS is a version control system just

00:23:52,820 --> 00:23:56,510
like getting subversion everything else

00:23:54,440 --> 00:23:58,780
and it's not bad but it's not great it

00:23:56,510 --> 00:24:01,160
was fine for the 1970s and 80s

00:23:58,780 --> 00:24:02,540
get was obviously the thing that we

00:24:01,160 --> 00:24:05,120
wanted to go towards we want

00:24:02,540 --> 00:24:07,010
distributed source control but in order

00:24:05,120 --> 00:24:09,230
to get there we couldn't just jump from

00:24:07,010 --> 00:24:10,760
CVS to get there'll be no way of doing

00:24:09,230 --> 00:24:12,470
it the mindset wasn't there those

00:24:10,760 --> 00:24:14,210
inexperienced and there wasn't the tools

00:24:12,470 --> 00:24:15,590
to do it and the reason that I want the

00:24:14,210 --> 00:24:17,720
tools to do it because all source

00:24:15,590 --> 00:24:19,880
controls in CVS and it just wasn't good

00:24:17,720 --> 00:24:22,640
enough to build that type of software so

00:24:19,880 --> 00:24:24,380
SVN was created when they built it they

00:24:22,640 --> 00:24:26,660
knew it was never gonna be the last word

00:24:24,380 --> 00:24:28,700
in source control but it was a very good

00:24:26,660 --> 00:24:31,220
piece of software and it caused us to

00:24:28,700 --> 00:24:33,860
move away from CVS to something better

00:24:31,220 --> 00:24:34,700
so we could then go on to distribute it

00:24:33,860 --> 00:24:36,740
such as git

00:24:34,700 --> 00:24:39,110
so in that sense a version is a very

00:24:36,740 --> 00:24:40,790
good patch to the source control problem

00:24:39,110 --> 00:24:42,650
st. where some languages seem like

00:24:40,790 --> 00:24:44,390
they're patching between well is it's

00:24:42,650 --> 00:24:46,070
better than what we had but it's not

00:24:44,390 --> 00:24:47,810
what I really envisage to a programming

00:24:46,070 --> 00:24:49,880
language to be like something I found it

00:24:47,810 --> 00:24:52,220
on a personal level I also adapt it to

00:24:49,880 --> 00:24:53,870
the old coding styles so obviously all

00:24:52,220 --> 00:24:55,760
these old programming languages I worked

00:24:53,870 --> 00:24:58,340
at through various points in my life

00:24:55,760 --> 00:25:00,320
I would naturally put the brackets or

00:24:58,340 --> 00:25:02,750
the begin on the end exactly where I did

00:25:00,320 --> 00:25:04,670
20 years ago without thinking about it's

00:25:02,750 --> 00:25:06,410
like a muscle memory all of a sudden I

00:25:04,670 --> 00:25:08,120
fired up the editor that I used to use

00:25:06,410 --> 00:25:09,920
and it's like all right I remember I've

00:25:08,120 --> 00:25:12,710
got a hit f2 here and then this control

00:25:09,920 --> 00:25:15,140
and then that it's like how come my

00:25:12,710 --> 00:25:17,390
brain has record the key shortcuts for

00:25:15,140 --> 00:25:18,440
an editor I've not used in 20 years but

00:25:17,390 --> 00:25:20,840
I can't remember what I had for

00:25:18,440 --> 00:25:22,760
breakfast yesterday an algorithm

00:25:20,840 --> 00:25:25,400
improves as the realization sets in so

00:25:22,760 --> 00:25:28,010
obviously I started with quite a you

00:25:25,400 --> 00:25:30,410
know a banal brute-force kind of

00:25:28,010 --> 00:25:32,360
algorithm as I was implementing it over

00:25:30,410 --> 00:25:34,730
and over again my wording for the

00:25:32,360 --> 00:25:36,260
variable names changed and improved my

00:25:34,730 --> 00:25:37,640
understanding an algorithm naturally

00:25:36,260 --> 00:25:39,290
improve so I said well actually I don't

00:25:37,640 --> 00:25:41,120
really need to compute this bit cuz it's

00:25:39,290 --> 00:25:43,190
not really used again it just makes the

00:25:41,120 --> 00:25:46,000
algorithm look nice so I just got rid of

00:25:43,190 --> 00:25:49,970
it and that's quite interesting and

00:25:46,000 --> 00:25:52,070
naming things is still very hard I still

00:25:49,970 --> 00:25:54,110
have not decided on a set of variable

00:25:52,070 --> 00:25:57,110
names for that 20 line program that I

00:25:54,110 --> 00:25:59,630
actually like so that code by the way is

00:25:57,110 --> 00:26:02,870
also available in ActionScript anyone so

00:25:59,630 --> 00:26:03,290
did that yes more than I thought that's

00:26:02,870 --> 00:26:05,510
good

00:26:03,290 --> 00:26:07,190
Bochy won't have done it unlikely that's

00:26:05,510 --> 00:26:09,400
a programming language I broke for kids

00:26:07,190 --> 00:26:12,170
CoffeeScript is probably a few in here

00:26:09,400 --> 00:26:14,300
not something as I thought a crystal for

00:26:12,170 --> 00:26:16,039
Fortran Go Java Lisp Lua

00:26:14,300 --> 00:26:18,649
Python Ruby and the

00:26:16,039 --> 00:26:20,299
probably some others so that's me all

00:26:18,649 --> 00:26:22,970
done normally this is where the speakers

00:26:20,299 --> 00:26:24,830
plug their books but I can't be bothered

00:26:22,970 --> 00:26:26,899
they cost 20 quid and the amount of

00:26:24,830 --> 00:26:28,279
rotis I get from them is so small you

00:26:26,899 --> 00:26:29,619
might as well just buy me a pint and

00:26:28,279 --> 00:26:32,330
I'll tell you everything that's in him

00:26:29,619 --> 00:26:33,619
how's that for a deal that Bobby two

00:26:32,330 --> 00:26:34,279
fights I come out to your house and read

00:26:33,619 --> 00:26:36,409
it for you

00:26:34,279 --> 00:26:39,580
so my name's Steve also known as

00:26:36,409 --> 00:26:39,580

YouTube URL: https://www.youtube.com/watch?v=6Q_PJk3lMx4


