Title: MobX - Statement Management with no Boilerplate - React Native London - March 2020
Publication date: 2020-03-30
Playlist: React Native London
Description: 
	MobX - state management with no boilerplate - by Mike Borozdin

MobX, unlike Redux, requires little boilerplate and provides a centralised place for your business logic. In this talk, we'll do live coding and move an existing app written with Redux to MobX.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,240 --> 00:00:05,460
clown welcome this is Mike

00:00:03,000 --> 00:00:08,220
a man soft engineer based in London

00:00:05,460 --> 00:00:10,200
United Kingdom and today I'm going to

00:00:08,220 --> 00:00:12,990
talk about face management in the react

00:00:10,200 --> 00:00:14,880
and react native and mainly I'm going to

00:00:12,990 --> 00:00:17,279
talk about a library called mo backs

00:00:14,880 --> 00:00:22,050
which really simplify state management

00:00:17,279 --> 00:00:25,289
and unlike relax it requires you were a

00:00:22,050 --> 00:00:25,680
little boilerplate code and with mo

00:00:25,289 --> 00:00:28,170
backs

00:00:25,680 --> 00:00:31,769
we've been excessively using it as my

00:00:28,170 --> 00:00:35,130
company for a couple years and we have

00:00:31,769 --> 00:00:38,670
developed a thin pack mobile app with

00:00:35,130 --> 00:00:40,950
that edit work model slow well and we

00:00:38,670 --> 00:00:45,480
also have a web app which predates it

00:00:40,950 --> 00:00:49,379
and the funniest thing is that and web

00:00:45,480 --> 00:00:52,020
app is written in redux and every time i

00:00:49,379 --> 00:00:55,530
have to do any work in it

00:00:52,020 --> 00:01:00,210
I really miss mo backs and how concise

00:00:55,530 --> 00:01:03,690
attest and before I start talking about

00:01:00,210 --> 00:01:06,240
what mo back is just a few points about

00:01:03,690 --> 00:01:09,270
with axe and why I think there are a few

00:01:06,240 --> 00:01:12,740
problems with that and just a couple

00:01:09,270 --> 00:01:16,170
days ago I stumbled upon this to it and

00:01:12,740 --> 00:01:18,900
I really resonated that and I'm sure my

00:01:16,170 --> 00:01:21,689
colleagues would also can cure that

00:01:18,900 --> 00:01:26,040
Riddick's is great for extracting your

00:01:21,689 --> 00:01:29,549
state and out of components but then the

00:01:26,040 --> 00:01:32,400
codes which manages the state and apps

00:01:29,549 --> 00:01:34,430
in a very different places because if

00:01:32,400 --> 00:01:37,110
you think about it the usual

00:01:34,430 --> 00:01:39,990
architecture for usually rejects it's

00:01:37,110 --> 00:01:43,470
something like that and you have a

00:01:39,990 --> 00:01:46,740
component which at some points triggers

00:01:43,470 --> 00:01:51,240
an action creator which dispatches an

00:01:46,740 --> 00:01:55,860
action which then and goes into reducer

00:01:51,240 --> 00:02:00,030
and finally back and rerun the second

00:01:55,860 --> 00:02:02,280
bullet so in the fashion when we'll do

00:02:00,030 --> 00:02:05,219
some web coding will take a simple

00:02:02,280 --> 00:02:06,990
operation Redux will see the problem and

00:02:05,219 --> 00:02:12,510
you'll see how more backs will make it

00:02:06,990 --> 00:02:13,530
much more concise and more backs and the

00:02:12,510 --> 00:02:16,920
license observer

00:02:13,530 --> 00:02:19,910
and that means it's not afraid to mutate

00:02:16,920 --> 00:02:22,710
the state and that's really result in

00:02:19,910 --> 00:02:23,990
how concise the code is for Manjula

00:02:22,710 --> 00:02:28,200
state

00:02:23,990 --> 00:02:30,150
similarly Moberg spores are also a great

00:02:28,200 --> 00:02:34,770
place for putting your business logic

00:02:30,150 --> 00:02:37,520
and it also allows you to easily unit

00:02:34,770 --> 00:02:40,380
test it and

00:02:37,520 --> 00:02:42,810
funny it freezer is that the creative

00:02:40,380 --> 00:02:46,440
small box is now working for Facebook so

00:02:42,810 --> 00:02:51,330
and they get in JSON supports in the

00:02:46,440 --> 00:02:54,630
community and at this stage and we'll

00:02:51,330 --> 00:02:57,570
proceed to some live coding and I'm

00:02:54,630 --> 00:03:04,770
going to demonstrate you and a simple

00:02:57,570 --> 00:03:08,760
app I created with react and redux it's

00:03:04,770 --> 00:03:11,580
another to do up it shows to do items

00:03:08,760 --> 00:03:13,530
and it allows you to add a new one for

00:03:11,580 --> 00:03:19,530
example you can add a nice and curl

00:03:13,530 --> 00:03:22,769
convert it to mo bags and it will appear

00:03:19,530 --> 00:03:26,400
on our screen and if you think about

00:03:22,769 --> 00:03:32,299
this up and it does store data in memory

00:03:26,400 --> 00:03:35,760
and it actually sends calls to an

00:03:32,299 --> 00:03:38,850
observer which returns this list of

00:03:35,760 --> 00:03:42,450
items and accepts new ones the reason

00:03:38,850 --> 00:03:46,950
for that I wanted to make this example a

00:03:42,450 --> 00:03:49,140
bit more real because often we do need

00:03:46,950 --> 00:03:52,320
to make HTTP calls and I think this is

00:03:49,140 --> 00:03:53,760
important and to understand how you can

00:03:52,320 --> 00:03:57,630
work with that when you choose in the

00:03:53,760 --> 00:04:05,370
state management library now if you dive

00:03:57,630 --> 00:04:09,090
into the code and we will see that we

00:04:05,370 --> 00:04:11,910
have two M components on the same level

00:04:09,090 --> 00:04:15,590
which you just saw on the screen one of

00:04:11,910 --> 00:04:20,519
them is for added need to do items and

00:04:15,590 --> 00:04:24,930
the other one lifts order to do items we

00:04:20,519 --> 00:04:27,450
have I'm not really highlight and a

00:04:24,930 --> 00:04:29,600
necessity for having state management

00:04:27,450 --> 00:04:36,900
because we have the sibling components

00:04:29,600 --> 00:04:38,850
we do need to and exchange data and if

00:04:36,900 --> 00:04:46,050
you look at new to do it's like a pretty

00:04:38,850 --> 00:04:49,680
and simple component where we display an

00:04:46,050 --> 00:04:54,410
input item and allow other than you one

00:04:49,680 --> 00:04:57,180
ym and a Redux action creator and

00:04:54,410 --> 00:05:04,530
similarly the component which lists

00:04:57,180 --> 00:05:08,670
to-do items and what it's got when we

00:05:04,530 --> 00:05:11,430
and render it and it kills user fact to

00:05:08,670 --> 00:05:15,960
get to do this which is another married

00:05:11,430 --> 00:05:18,870
extraction creator and and then a give

00:05:15,960 --> 00:05:21,870
properties and which to do items which

00:05:18,870 --> 00:05:24,180
is displays on the screen so component

00:05:21,870 --> 00:05:28,290
points is it's nice and easy

00:05:24,180 --> 00:05:31,530
it just mostly pure reacts with a few

00:05:28,290 --> 00:05:34,890
react reacts high level high other

00:05:31,530 --> 00:05:42,720
components and which provide us with X

00:05:34,890 --> 00:05:43,500
plumbing but and if you look into how I

00:05:42,720 --> 00:05:45,780
want

00:05:43,500 --> 00:05:48,000
Reducto is structured that's where the

00:05:45,780 --> 00:05:52,050
things and get a little bit more verbose

00:05:48,000 --> 00:05:56,310
and first of all we can see and work

00:05:52,050 --> 00:05:59,270
right a store we have one file and it

00:05:56,310 --> 00:06:02,850
gets reduced to this and because we use

00:05:59,270 --> 00:06:09,390
HTTP because it also has to apply

00:06:02,850 --> 00:06:12,030
middleware thank to enable a synchronous

00:06:09,390 --> 00:06:15,060
action creators and here we are we have

00:06:12,030 --> 00:06:16,620
like no action creators and once again

00:06:15,060 --> 00:06:22,010
the truth is a particularly complicated

00:06:16,620 --> 00:06:24,690
right and when it comes to gettin to do

00:06:22,010 --> 00:06:27,120
with so much to be required we wait for

00:06:24,690 --> 00:06:28,980
it that we dispatch an action and when

00:06:27,120 --> 00:06:32,730
we do to do with the similar thing but

00:06:28,980 --> 00:06:36,780
we call basis in action creator and

00:06:32,730 --> 00:06:40,350
doesn't have reducers which created use

00:06:36,780 --> 00:06:41,350
state and finally we have constants

00:06:40,350 --> 00:06:44,350
which the four

00:06:41,350 --> 00:06:46,900
in lecture names and this is more than

00:06:44,350 --> 00:06:50,350
which has to be shared between action

00:06:46,900 --> 00:06:54,010
craters and reducers as you know that we

00:06:50,350 --> 00:06:57,250
are talking about the same action so to

00:06:54,010 --> 00:07:00,460
summarize although all those baits like

00:06:57,250 --> 00:07:03,820
reducers and action creators are not

00:07:00,460 --> 00:07:06,700
particularly complicated on the own if

00:07:03,820 --> 00:07:12,060
we combine them will see that we add

00:07:06,700 --> 00:07:15,930
this beaker positive to our code and

00:07:12,060 --> 00:07:18,850
sometimes it becomes a little bit and

00:07:15,930 --> 00:07:23,010
complicated to see what's going on where

00:07:18,850 --> 00:07:25,300
and right now

00:07:23,010 --> 00:07:27,720
having said that I'm going to

00:07:25,300 --> 00:07:31,780
demonstrate to you how we can replace

00:07:27,720 --> 00:07:34,930
this I'm pretty verbose code of redux

00:07:31,780 --> 00:07:41,650
with something more concise and done

00:07:34,930 --> 00:07:45,610
with more bags so let's start and what

00:07:41,650 --> 00:07:49,180
I'm going to do I'm going to delete the

00:07:45,610 --> 00:07:52,900
contents of store GS file and I'm going

00:07:49,180 --> 00:07:57,490
to start writing an ammo box for so

00:07:52,900 --> 00:08:01,630
typically in mobiles and we use classes

00:07:57,490 --> 00:08:08,530
and I'm going to create a class code to

00:08:01,630 --> 00:08:13,710
do store and in that class we're going

00:08:08,530 --> 00:08:17,050
to define and a property code to do and

00:08:13,710 --> 00:08:20,110
it's going to be an MC array and it'll

00:08:17,050 --> 00:08:25,240
hold out to do items and we're going to

00:08:20,110 --> 00:08:30,300
decorate it with observable which is one

00:08:25,240 --> 00:08:30,300
of the key concepts of MU bags

00:08:32,910 --> 00:08:44,440
what observable is and it allows us to

00:08:40,900 --> 00:08:46,420
decorate and this property or even

00:08:44,440 --> 00:08:50,380
viable it doesn't even have to belong to

00:08:46,420 --> 00:08:54,190
a class and every time there is a change

00:08:50,380 --> 00:08:54,940
to that variable property it will not

00:08:54,190 --> 00:08:57,280
suffice

00:08:54,940 --> 00:09:01,930
all them observers which are going to be

00:08:57,280 --> 00:09:05,290
a component and it will rerender them so

00:09:01,930 --> 00:09:09,790
having defined the variables you hold

00:09:05,290 --> 00:09:12,640
all data and our next step is to define

00:09:09,790 --> 00:09:16,860
actions which will perform manipulations

00:09:12,640 --> 00:09:20,470
on the data and as we have seen before

00:09:16,860 --> 00:09:24,360
with our Redux example actually two

00:09:20,470 --> 00:09:27,580
actions here retrieving data and

00:09:24,360 --> 00:09:32,250
updating it so let's start with

00:09:27,580 --> 00:09:39,730
recruiting data we're going to define a

00:09:32,250 --> 00:09:48,160
method called get to this it's going to

00:09:39,730 --> 00:09:51,190
be a mobile action and it's also going

00:09:48,160 --> 00:09:53,500
to be an a synchronous method because

00:09:51,190 --> 00:09:56,620
we're making an HTTP call and we use a

00:09:53,500 --> 00:09:59,440
sink a wait for that so similar to redux

00:09:56,620 --> 00:10:07,180
it's going to be actually that simple we

00:09:59,440 --> 00:10:14,530
gonna use fetch to get data from the API

00:10:07,180 --> 00:10:17,950
and I need to put a weight here and then

00:10:14,530 --> 00:10:21,960
we need to get some decent data from it

00:10:17,950 --> 00:10:24,850
so we do a weight without Jason and

00:10:21,960 --> 00:10:30,270
finally we assign the result to our -

00:10:24,850 --> 00:10:34,360
duze so this is really simple we just

00:10:30,270 --> 00:10:36,910
created an action which and perform

00:10:34,360 --> 00:10:42,130
something in this case legend data from

00:10:36,910 --> 00:10:44,830
an API and it assigns to and our Bible

00:10:42,130 --> 00:10:47,170
which is markup observable so when you

00:10:44,830 --> 00:10:49,990
start looking at components you see how

00:10:47,170 --> 00:10:53,440
they'll get rear-ended and quickly I'm

00:10:49,990 --> 00:10:56,080
gonna do the same thing for I'm adding a

00:10:53,440 --> 00:10:58,240
new to-do item so as you can imagine we

00:10:56,080 --> 00:11:00,839
just need to create another method which

00:10:58,240 --> 00:11:03,640
is going to be decorated with action and

00:11:00,839 --> 00:11:07,750
put up to do which will accept an

00:11:03,640 --> 00:11:08,350
argument of to-do item and similarly we

00:11:07,750 --> 00:11:13,450
often

00:11:08,350 --> 00:11:19,390
to perform a search operation and this

00:11:13,450 --> 00:11:22,030
instance is going to be a boss request

00:11:19,390 --> 00:11:29,350
because we are in a different term or

00:11:22,030 --> 00:11:32,220
day is to do and once it's completed we

00:11:29,350 --> 00:11:35,950
are going to refresh our cities and

00:11:32,220 --> 00:11:38,440
because we want to make sure that our

00:11:35,950 --> 00:11:42,060
entire front end is driven by the back

00:11:38,440 --> 00:11:47,950
end so that they all at the same state

00:11:42,060 --> 00:11:50,320
okay so this is basically is when it

00:11:47,950 --> 00:11:52,990
comes to defining your stores just one

00:11:50,320 --> 00:11:55,570
single file just one single glass and

00:11:52,990 --> 00:12:00,700
just like you know what 20 lines of code

00:11:55,570 --> 00:12:03,280
which and the final data marketers are

00:12:00,700 --> 00:12:06,490
observable and define actions which

00:12:03,280 --> 00:12:11,320
allow us to perform certain things on

00:12:06,490 --> 00:12:17,080
the data so so far so good right and I

00:12:11,320 --> 00:12:18,730
don't think we need to do is to and look

00:12:17,080 --> 00:12:23,560
at our components and see if they

00:12:18,730 --> 00:12:29,980
require any changes so let's start with

00:12:23,560 --> 00:12:32,350
a to do component and so you receive

00:12:29,980 --> 00:12:36,070
that as I demonstrate you before and

00:12:32,350 --> 00:12:40,690
this component does two things and use

00:12:36,070 --> 00:12:44,170
the fact it goes get to dues and then he

00:12:40,690 --> 00:12:46,170
just displays a list of items so don't

00:12:44,170 --> 00:12:51,160
you think we need to change here is

00:12:46,170 --> 00:12:54,880
instead of getting to this properties

00:12:51,160 --> 00:12:59,980
and method actives and this component as

00:12:54,880 --> 00:13:02,560
a property will get a to do store and

00:12:59,980 --> 00:13:09,730
we're gonna code to do get reduce into

00:13:02,560 --> 00:13:14,500
the store and similarly um to do this

00:13:09,730 --> 00:13:17,830
are going to be introduced alright that

00:13:14,500 --> 00:13:20,840
skill and we won't need map state

00:13:17,830 --> 00:13:25,279
approach among dispatch the process

00:13:20,840 --> 00:13:29,470
and what this component will need is it

00:13:25,279 --> 00:13:33,160
will have to become an observer and

00:13:29,470 --> 00:13:37,339
which as I said before is a mobile

00:13:33,160 --> 00:13:39,589
concept we have observables and which

00:13:37,339 --> 00:13:43,580
our data we have from different actions

00:13:39,589 --> 00:13:48,970
all and we have observers which react on

00:13:43,580 --> 00:14:00,050
changes and in the data I'm going to

00:13:48,970 --> 00:14:03,410
import it from mo backs react and it's

00:14:00,050 --> 00:14:05,529
almost that of course in Rwanda where

00:14:03,410 --> 00:14:08,720
this property to do stole will come from

00:14:05,529 --> 00:14:14,690
similar to read acts will be an album

00:14:08,720 --> 00:14:18,320
and hire all the components part by the

00:14:14,690 --> 00:14:23,779
function called inject which will inject

00:14:18,320 --> 00:14:29,510
and the stores into our component it's

00:14:23,779 --> 00:14:31,670
got like this syntax it Maps actually at

00:14:29,510 --> 00:14:35,390
a number of different stores in our

00:14:31,670 --> 00:14:39,230
example M there is just one store code

00:14:35,390 --> 00:14:42,589
to do and it Maps it onto a list of

00:14:39,230 --> 00:14:45,890
properties via skills says I've got a

00:14:42,589 --> 00:14:48,880
syntax error somewhere like yeah that

00:14:45,890 --> 00:14:52,270
because inject returns the function

00:14:48,880 --> 00:14:55,940
which allows me to wrap my observer and

00:14:52,270 --> 00:15:01,910
with the simple manipulations and we

00:14:55,940 --> 00:15:05,300
have changed our reduce component to use

00:15:01,910 --> 00:15:07,280
Mobile's and it's very something to go

00:15:05,300 --> 00:15:10,370
and run the code right now by chances

00:15:07,280 --> 00:15:12,230
it's going to fail so we need to do two

00:15:10,370 --> 00:15:15,890
more things we're going to do the same

00:15:12,230 --> 00:15:19,010
for our new to do component which will

00:15:15,890 --> 00:15:21,950
even be easier and then we'll change add

00:15:19,010 --> 00:15:24,130
the wiring and the provider so with a

00:15:21,950 --> 00:15:28,580
new to do components as you can imagine

00:15:24,130 --> 00:15:33,589
the first thing we need to do is to

00:15:28,580 --> 00:15:34,279
inject the store and modify what happens

00:15:33,589 --> 00:15:36,170
when you click on

00:15:34,279 --> 00:15:39,769
buttonhook we're going to go to the

00:15:36,170 --> 00:15:43,519
store up to do our math dispatch the

00:15:39,769 --> 00:15:48,680
pros will disappear and what we're going

00:15:43,519 --> 00:15:52,220
to export it's going to be even simpler

00:15:48,680 --> 00:15:55,790
in this instance new to do doesn't even

00:15:52,220 --> 00:15:58,430
have to be a mobile observer at this

00:15:55,790 --> 00:16:01,279
company does not have to remember or

00:15:58,430 --> 00:16:07,730
changes don't think we need to do is

00:16:01,279 --> 00:16:15,319
just inject the store into it so new to

00:16:07,730 --> 00:16:20,509
the store and we'll map all of our

00:16:15,319 --> 00:16:25,490
mobile stores on to properties of this

00:16:20,509 --> 00:16:28,220
components and we'll wrap it in it and

00:16:25,490 --> 00:16:31,129
now we just need to remove all the

00:16:28,220 --> 00:16:33,019
supports the person thinkers even though

00:16:31,129 --> 00:16:36,319
on poor statement become more concise

00:16:33,019 --> 00:16:40,730
and just important Jack from mo backs

00:16:36,319 --> 00:16:46,939
react right so we have ported another

00:16:40,730 --> 00:16:50,240
component on to mo backs so other side

00:16:46,939 --> 00:16:52,220
the final thing is to do a bit of

00:16:50,240 --> 00:16:54,649
plumbing and it's going to be very

00:16:52,220 --> 00:16:57,889
similar so what I haven't shown you

00:16:54,649 --> 00:17:01,699
before but you may guess right so

00:16:57,889 --> 00:17:07,000
somewhere there is a file where we must

00:17:01,699 --> 00:17:11,959
we were up our entire application and

00:17:07,000 --> 00:17:14,689
inside the provider which inject the

00:17:11,959 --> 00:17:18,709
read explore so we cannot do exactly the

00:17:14,689 --> 00:17:21,709
same thing and with mo backs instead of

00:17:18,709 --> 00:17:26,390
important provider from redux react

00:17:21,709 --> 00:17:29,690
I will demo Box react and similar like I

00:17:26,390 --> 00:17:42,940
did before I'm just gonna to to do store

00:17:29,690 --> 00:17:42,940
is new to do store and the store live in

00:17:43,179 --> 00:17:49,960
store slash store so so

00:17:47,809 --> 00:17:52,789
for let's just go and pass that and

00:17:49,960 --> 00:17:55,669
there's gotta cross my fingers that I

00:17:52,789 --> 00:17:58,159
have that Maxim thing up okay to do is

00:17:55,669 --> 00:18:00,259
inject is not define to do is not

00:17:58,159 --> 00:18:05,749
defined okay

00:18:00,259 --> 00:18:12,679
demo gremlins yes I have forgot to

00:18:05,749 --> 00:18:16,999
import inject and to do is not defined

00:18:12,679 --> 00:18:19,759
into this GSX which learn okay

00:18:16,999 --> 00:18:25,940
your army the top type oh ok this do

00:18:19,759 --> 00:18:27,889
this boom by mail coasted agent

00:18:25,940 --> 00:18:36,259
converted to mow backs well then you

00:18:27,889 --> 00:18:39,590
item record a video excellent okay

00:18:36,259 --> 00:18:48,919
probably I should add change the title

00:18:39,590 --> 00:18:53,179
in to do reduction sumo back so within

00:18:48,919 --> 00:18:57,740
literally 5-10 minutes what we did we've

00:18:53,179 --> 00:19:00,740
taken and a small Redux application and

00:18:57,740 --> 00:19:05,779
we convert it into mo backs and I think

00:19:00,740 --> 00:19:09,740
that really allowed us to a reuse most

00:19:05,779 --> 00:19:12,499
of our and components like to do and you

00:19:09,740 --> 00:19:16,210
to do make some little changes when it

00:19:12,499 --> 00:19:18,619
comes to and how we wire things and

00:19:16,210 --> 00:19:21,710
write our store which is like you know

00:19:18,619 --> 00:19:24,259
pharmo consign now that we have like no

00:19:21,710 --> 00:19:26,480
single class we just like two methods as

00:19:24,259 --> 00:19:32,860
opposed to action greater action reduces

00:19:26,480 --> 00:19:36,200
and one observable and now I can safely

00:19:32,860 --> 00:19:41,840
delete and other files of Pradaxa

00:19:36,200 --> 00:19:43,519
feedback my app still works and maybe at

00:19:41,840 --> 00:19:45,830
another to-do item which is how

00:19:43,519 --> 00:19:48,440
breakfast because I'm recording this

00:19:45,830 --> 00:19:52,159
video early in the morning and it still

00:19:48,440 --> 00:19:54,919
works and another thing I just want to

00:19:52,159 --> 00:19:58,759
point out like I was talking before and

00:19:54,919 --> 00:20:00,890
in terms of observables and observers so

00:19:58,759 --> 00:20:06,470
our data is observable

00:20:00,890 --> 00:20:09,200
and our components are observers and so

00:20:06,470 --> 00:20:13,250
what it means to do is a good example so

00:20:09,200 --> 00:20:16,520
and if inside of observable we access

00:20:13,250 --> 00:20:18,950
and our observable like in this case to

00:20:16,520 --> 00:20:22,340
do this every time to this will change

00:20:18,950 --> 00:20:25,340
mode backs will automatically notify all

00:20:22,340 --> 00:20:27,050
observers and it will trigger a render

00:20:25,340 --> 00:20:30,770
so nice and easy

00:20:27,050 --> 00:20:37,640
move back and doesn't have a listing for

00:20:30,770 --> 00:20:40,880
us okay and so if you're interested in

00:20:37,640 --> 00:20:43,220
feeling that code it's available on

00:20:40,880 --> 00:20:45,500
github there is an example projects

00:20:43,220 --> 00:20:48,620
application and there is an example of

00:20:45,500 --> 00:20:50,510
the mobile application plus and the nogf

00:20:48,620 --> 00:20:53,180
server which serves data so you can see

00:20:50,510 --> 00:20:55,400
for yourself you can play for it with

00:20:53,180 --> 00:20:58,430
yourself and I just want to highlight

00:20:55,400 --> 00:21:00,740
once again the work we've done right so

00:20:58,430 --> 00:21:05,090
if you have a look at the redux tour

00:21:00,740 --> 00:21:07,580
even if you combine it in them a single

00:21:05,090 --> 00:21:09,410
file it will be feel quite verbose in

00:21:07,580 --> 00:21:11,960
comparison to a christian the lesson

00:21:09,410 --> 00:21:12,350
that with Mobe acts and I think with the

00:21:11,960 --> 00:21:14,300
read-back

00:21:12,350 --> 00:21:18,440
personalized register booth but

00:21:14,300 --> 00:21:21,620
sometimes a bit difficult to see what

00:21:18,440 --> 00:21:24,320
things are doing like we have action

00:21:21,620 --> 00:21:27,800
creators we have reduces and Moe backs

00:21:24,320 --> 00:21:29,900
its formal concise and if it just look

00:21:27,800 --> 00:21:33,410
at component side by side you will see

00:21:29,900 --> 00:21:38,510
that I'll run the function hasn't

00:21:33,410 --> 00:21:40,520
dramatically changed like what changed

00:21:38,510 --> 00:21:42,170
is the property swing in Jackson and we

00:21:40,520 --> 00:21:46,520
could actually do it even in the same

00:21:42,170 --> 00:21:48,860
way as in redox reject and prompt

00:21:46,520 --> 00:21:51,380
individual data and functions and which

00:21:48,860 --> 00:21:53,510
perform actions and instead of doing mob

00:21:51,380 --> 00:21:59,680
dispatch support we do observer and

00:21:53,510 --> 00:22:02,840
inject and some of you may wonder and

00:21:59,680 --> 00:22:05,090
about hooks and in this instance I'm not

00:22:02,840 --> 00:22:08,420
talking about use the fact and use space

00:22:05,090 --> 00:22:11,390
because we have already used them but

00:22:08,420 --> 00:22:13,080
recently react introduced hooks such as

00:22:11,390 --> 00:22:16,320
you select and use

00:22:13,080 --> 00:22:20,340
dispatch which replaced mob dispersed

00:22:16,320 --> 00:22:25,170
applause and map state applause drops

00:22:20,340 --> 00:22:31,850
and so easy mobile actually have similar

00:22:25,170 --> 00:22:35,880
mechanism you can use hooks instead of

00:22:31,850 --> 00:22:38,760
wrapping your component inside inject in

00:22:35,880 --> 00:22:40,800
my personal opinion it couples your

00:22:38,760 --> 00:22:44,070
components too much to a state

00:22:40,800 --> 00:22:46,110
management library so that if you right

00:22:44,070 --> 00:22:48,150
now your components will have knowledge

00:22:46,110 --> 00:22:50,370
of that through hooks as opposed to

00:22:48,150 --> 00:22:53,430
getting information through properties

00:22:50,370 --> 00:22:55,710
in my opinion and if you do you the

00:22:53,430 --> 00:22:59,940
testing of your components that will

00:22:55,710 --> 00:23:02,430
make a slightly awkward because instead

00:22:59,940 --> 00:23:09,840
of just passing correct properties

00:23:02,430 --> 00:23:11,820
you'll have to and mock your hook I mean

00:23:09,840 --> 00:23:14,160
which is doable but it might be in not

00:23:11,820 --> 00:23:17,000
the best way but really it's up to you

00:23:14,160 --> 00:23:20,280
more backs dozen Monday's anything here

00:23:17,000 --> 00:23:23,670
and another thing I wanted to highlight

00:23:20,280 --> 00:23:26,520
and I didn't show it in the demo so

00:23:23,670 --> 00:23:30,750
mobile has a number of other cool

00:23:26,520 --> 00:23:33,030
features like for example would assume

00:23:30,750 --> 00:23:36,360
the screen and that's taken from the

00:23:33,030 --> 00:23:39,000
official documentation and so you may

00:23:36,360 --> 00:23:41,970
have defined for your online shop

00:23:39,000 --> 00:23:44,970
something an observable called price and

00:23:41,970 --> 00:23:47,130
amount but equally you may have a

00:23:44,970 --> 00:23:50,010
contextual application in the way that

00:23:47,130 --> 00:23:52,290
there is a component which just displays

00:23:50,010 --> 00:23:57,900
total price right so they're components

00:23:52,290 --> 00:24:00,990
doesn't really care about price of each

00:23:57,900 --> 00:24:04,050
item or like you know an amount so easy

00:24:00,990 --> 00:24:07,170
and you can define computed properties

00:24:04,050 --> 00:24:09,540
and they will trigger rerender of those

00:24:07,170 --> 00:24:11,100
components which depend on total every

00:24:09,540 --> 00:24:14,040
time one of the components of the

00:24:11,100 --> 00:24:15,900
formula changes that's actually official

00:24:14,040 --> 00:24:22,170
the conventions have quite similar to

00:24:15,900 --> 00:24:24,360
formulas in Excel and and I just

00:24:22,170 --> 00:24:27,040
prepared a list of fun possible

00:24:24,360 --> 00:24:29,530
questions and they get

00:24:27,040 --> 00:24:34,000
one of them is scary he'll multiple

00:24:29,530 --> 00:24:36,940
stores easy and in more bags you can

00:24:34,000 --> 00:24:39,700
define as many stores as you want for

00:24:36,940 --> 00:24:42,400
example in the publication we encourage

00:24:39,700 --> 00:24:46,000
the working we have around no 10 or 15

00:24:42,400 --> 00:24:47,740
different stores for different pictures

00:24:46,000 --> 00:24:50,140
another question does the work with

00:24:47,740 --> 00:24:51,340
react native of course and actually this

00:24:50,140 --> 00:24:53,500
react native Meetup

00:24:51,340 --> 00:24:55,210
although I show the react lab but it

00:24:53,500 --> 00:24:58,510
works really resonating fantastically

00:24:55,210 --> 00:24:59,140
well and we do it and having the back

00:24:58,510 --> 00:25:02,590
tubes

00:24:59,140 --> 00:25:05,380
she motor is actually yes that and and

00:25:02,590 --> 00:25:08,860
work wire quite well and you may all

00:25:05,380 --> 00:25:12,220
have also seen that we use e F

00:25:08,860 --> 00:25:15,330
decorators like at observable the

00:25:12,220 --> 00:25:19,420
question is do you have to use them as

00:25:15,330 --> 00:25:21,820
actually no you can just use functions

00:25:19,420 --> 00:25:24,790
which will wrap your bio box of

00:25:21,820 --> 00:25:26,530
properties I think a decorators just a

00:25:24,790 --> 00:25:32,020
nice compact actual she makes more

00:25:26,530 --> 00:25:37,530
concise and now does work with any kind

00:25:32,020 --> 00:25:39,730
of components and so it works with and

00:25:37,530 --> 00:25:43,150
functional components as you have seen

00:25:39,730 --> 00:25:45,610
and works with big fat components react

00:25:43,150 --> 00:25:48,160
components it doesn't do it with pure

00:25:45,610 --> 00:25:53,020
components well because of issue with

00:25:48,160 --> 00:25:56,080
shoes component update and so guys but

00:25:53,020 --> 00:25:58,510
it's thank you for listening if you have

00:25:56,080 --> 00:26:01,330
any questions please ask them slack or

00:25:58,510 --> 00:26:03,940
YouTube comments and feel free to follow

00:26:01,330 --> 00:26:08,220
me on Twitter and choose me up with more

00:26:03,940 --> 00:26:08,220

YouTube URL: https://www.youtube.com/watch?v=3Gt-Cxjld3g


