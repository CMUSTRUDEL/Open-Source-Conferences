Title: Going Native - React Native - July 2018
Publication date: 2018-08-06
Playlist: React Native London
Description: 
	Presented by Anna DoubkovÃ¡.
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:06,480
I'm Anna I work as a developer at hi and

00:00:02,669 --> 00:00:09,710
I will talk very little about what we do

00:00:06,480 --> 00:00:14,070
at hi and the Apple we make but the main

00:00:09,710 --> 00:00:17,060
focus will be on what what we're sharing

00:00:14,070 --> 00:00:19,800
in terms of code why that is good and

00:00:17,060 --> 00:00:26,460
why some things can be used and why

00:00:19,800 --> 00:00:30,029
somethings can't so let me start with

00:00:26,460 --> 00:00:32,940
this we're hi we do Internet of Things

00:00:30,029 --> 00:00:36,149
smart homes we've got a lot of devices

00:00:32,940 --> 00:00:38,250
that you can use at your home such as

00:00:36,149 --> 00:00:42,510
the mustards light bulbs all kinds of

00:00:38,250 --> 00:00:45,329
sensors cameras that's a lot of stuff to

00:00:42,510 --> 00:00:48,180
that so just allow our users to control

00:00:45,329 --> 00:00:50,730
it there is a lot of stuff a lot of

00:00:48,180 --> 00:00:52,230
features then we have around that

00:00:50,730 --> 00:00:53,370
schedule so that you can set your

00:00:52,230 --> 00:00:55,770
thermostats for the Wrights

00:00:53,370 --> 00:00:57,840
times we've got all kinds of actions

00:00:55,770 --> 00:01:00,960
such as if I open the door the light

00:00:57,840 --> 00:01:02,520
bulb turns on we've got all kinds of

00:01:00,960 --> 00:01:05,250
special modes like when you go away on

00:01:02,520 --> 00:01:06,630
holiday they can imagine the complexity

00:01:05,250 --> 00:01:09,420
of the applications that we're

00:01:06,630 --> 00:01:10,950
delivering is quite high and I have been

00:01:09,420 --> 00:01:12,570
working there for about nine months and

00:01:10,950 --> 00:01:15,659
I still don't know all of the logic

00:01:12,570 --> 00:01:17,460
because it's so complex that there is no

00:01:15,659 --> 00:01:19,290
way a single person can do it all I

00:01:17,460 --> 00:01:23,729
think there's in fact one person who

00:01:19,290 --> 00:01:25,409
knows it all on our team and we have

00:01:23,729 --> 00:01:29,310
what a few apps obviously we've got a

00:01:25,409 --> 00:01:31,619
web app which is on the right left that

00:01:29,310 --> 00:01:33,540
is building react then we've got an

00:01:31,619 --> 00:01:37,079
Android and an iOS app at the moment

00:01:33,540 --> 00:01:39,000
plus we have the sort of super back-end

00:01:37,079 --> 00:01:40,770
thing that actually controls the devices

00:01:39,000 --> 00:01:43,979
we've got a platform on top of that that

00:01:40,770 --> 00:01:45,570
controls this hardware there and then we

00:01:43,979 --> 00:01:48,930
have got an integration or like

00:01:45,570 --> 00:01:50,640
aggregation layer for our API as well so

00:01:48,930 --> 00:01:52,439
essentially there are at least six

00:01:50,640 --> 00:01:54,509
scenes that need to coordinate whenever

00:01:52,439 --> 00:01:56,430
we're shipping and new features which

00:01:54,509 --> 00:02:00,630
you can imagine is really complicated

00:01:56,430 --> 00:02:03,240
and so we decided to use react

00:02:00,630 --> 00:02:06,299
everywhere or at least everywhere on the

00:02:03,240 --> 00:02:07,260
front end and although that seems like a

00:02:06,299 --> 00:02:10,140
great

00:02:07,260 --> 00:02:12,270
a lot of people a lot of people will get

00:02:10,140 --> 00:02:14,220
really freaked out by the idea that they

00:02:12,270 --> 00:02:17,580
will have to use JavaScript everywhere

00:02:14,220 --> 00:02:19,710
and so before we could actually embark

00:02:17,580 --> 00:02:21,840
on the react native journey which

00:02:19,710 --> 00:02:23,580
happened about six months ago we really

00:02:21,840 --> 00:02:27,990
have to sell it not only to the business

00:02:23,580 --> 00:02:31,200
but also to other developers and here

00:02:27,990 --> 00:02:34,770
are the few points that we used to sell

00:02:31,200 --> 00:02:36,420
it to people and the main thing is the

00:02:34,770 --> 00:02:37,890
idea that you can reuse your code and

00:02:36,420 --> 00:02:39,750
that is exactly what I will be talking

00:02:37,890 --> 00:02:42,600
about because that is the main thing

00:02:39,750 --> 00:02:45,570
about react native because you can reuse

00:02:42,600 --> 00:02:46,620
the code it allows us faster delivery it

00:02:45,570 --> 00:02:48,630
means that we don't have to write

00:02:46,620 --> 00:02:51,030
everything three times but also it means

00:02:48,630 --> 00:02:52,560
while we're transitioning at the moment

00:02:51,030 --> 00:02:54,720
we already have everything built in web

00:02:52,560 --> 00:02:57,420
so we can use whatever we build and web

00:02:54,720 --> 00:02:59,940
to ship react native really fast as a

00:02:57,420 --> 00:03:02,730
comparison the react native project will

00:02:59,940 --> 00:03:04,770
take approximately eight months to the

00:03:02,730 --> 00:03:06,900
five years the original apps were built

00:03:04,770 --> 00:03:09,630
in so there is a huge time difference

00:03:06,900 --> 00:03:12,030
and because the faster delivery is

00:03:09,630 --> 00:03:14,070
faster the cost Aloha that's how we saw

00:03:12,030 --> 00:03:16,770
to your balls to save you'll save money

00:03:14,070 --> 00:03:18,540
and they'll love it and at the end of

00:03:16,770 --> 00:03:20,580
the day it's also easier to hire people

00:03:18,540 --> 00:03:22,620
because instead of hiring an iOS and

00:03:20,580 --> 00:03:26,160
Android and the rear death you just need

00:03:22,620 --> 00:03:27,720
to hire one of those and needless to say

00:03:26,160 --> 00:03:29,640
to you guys here it's a really cool

00:03:27,720 --> 00:03:31,560
technology so people kind of want to use

00:03:29,640 --> 00:03:33,030
it so there quite a few reasons why the

00:03:31,560 --> 00:03:35,130
transition although it might be a

00:03:33,030 --> 00:03:37,500
painful thing to do when you have

00:03:35,130 --> 00:03:41,700
original native apps it's still really

00:03:37,500 --> 00:03:44,519
worth it so now I'm getting on to the

00:03:41,700 --> 00:03:47,220
point of how did we journey from web to

00:03:44,519 --> 00:03:49,440
native and there is a part to it of how

00:03:47,220 --> 00:03:52,470
did we take the code from web to native

00:03:49,440 --> 00:03:55,950
but also how did web developers suddenly

00:03:52,470 --> 00:03:57,959
become native developers before I

00:03:55,950 --> 00:03:59,790
started working on the react native app

00:03:57,959 --> 00:04:03,180
I made a few assumptions about what we

00:03:59,790 --> 00:04:06,780
can reuse I kind of like mentally split

00:04:03,180 --> 00:04:08,540
the application to three parts the UI

00:04:06,780 --> 00:04:10,540
components styling and business

00:04:08,540 --> 00:04:13,150
subject I thought that the Euro

00:04:10,540 --> 00:04:15,650
components will be reused quite easily

00:04:13,150 --> 00:04:17,239
because of fiber because of the way we

00:04:15,650 --> 00:04:19,910
render things I'll get to it later

00:04:17,239 --> 00:04:21,739
I thought the styling probably can't be

00:04:19,910 --> 00:04:25,669
reused I had some mine experiences

00:04:21,739 --> 00:04:28,310
Android SDK which was quite traumatising

00:04:25,669 --> 00:04:30,889
and the Styles there was just so

00:04:28,310 --> 00:04:32,539
difficult to write and when it came to

00:04:30,889 --> 00:04:35,330
business logic I again assume that we

00:04:32,539 --> 00:04:37,610
can't reuse anything because if you

00:04:35,330 --> 00:04:41,150
think about just all the hardware stuff

00:04:37,610 --> 00:04:43,180
like camera Bluetooth Wi-Fi there you

00:04:41,150 --> 00:04:45,860
have a native world it somehow assumed

00:04:43,180 --> 00:04:49,160
that that is something that we can't

00:04:45,860 --> 00:04:54,050
actually take from the web but I was

00:04:49,160 --> 00:04:56,780
entirely wrong and in order to actually

00:04:54,050 --> 00:04:59,120
explain why I was wrong I'll take you

00:04:56,780 --> 00:05:01,699
three tips would be how react native

00:04:59,120 --> 00:05:09,199
actually works and what that means for

00:05:01,699 --> 00:05:11,330
us in terms of reusing the code right so

00:05:09,199 --> 00:05:13,550
we've got the app which is your typical

00:05:11,330 --> 00:05:16,130
jsx code would you like any other react

00:05:13,550 --> 00:05:19,430
app and that sits in a JavaScript

00:05:16,130 --> 00:05:22,550
runtime box which then sets in the main

00:05:19,430 --> 00:05:24,710
native bit and then there is this tiny

00:05:22,550 --> 00:05:26,210
layer between your JavaScript and your

00:05:24,710 --> 00:05:29,810
native bed which is called the react

00:05:26,210 --> 00:05:32,750
native bridge now the important bit is

00:05:29,810 --> 00:05:34,610
that we are not compiling the JavaScript

00:05:32,750 --> 00:05:39,830
application into native code we are not

00:05:34,610 --> 00:05:42,010
compiling it down into Java we are still

00:05:39,830 --> 00:05:45,620
running it as a JavaScript application

00:05:42,010 --> 00:05:47,510
we are not using a webview that is an

00:05:45,620 --> 00:05:49,250
important distinction because whether

00:05:47,510 --> 00:05:50,810
you would not allow you to actually

00:05:49,250 --> 00:05:54,080
communicate with the native world very

00:05:50,810 --> 00:05:57,229
easily so it's kind of a strange hybrid

00:05:54,080 --> 00:05:58,639
that is quite like a new approach in

00:05:57,229 --> 00:06:01,699
building this kind of native

00:05:58,639 --> 00:06:04,880
applications and then there is a react

00:06:01,699 --> 00:06:06,620
native bridge which literally is a sort

00:06:04,880 --> 00:06:08,900
of communication system between the

00:06:06,620 --> 00:06:11,210
JavaScript and the native world if you

00:06:08,900 --> 00:06:13,490
imagine JavaScript being one thread and

00:06:11,210 --> 00:06:15,000
native being the the UI thread then

00:06:13,490 --> 00:06:17,030
react native bridge literal

00:06:15,000 --> 00:06:20,070
takes data from one thread to another

00:06:17,030 --> 00:06:24,420
asynchronously so that none of that gets

00:06:20,070 --> 00:06:26,820
locked so what actually happens with

00:06:24,420 --> 00:06:28,950
components in this kind of system how do

00:06:26,820 --> 00:06:31,070
I get from having some sort of code

00:06:28,950 --> 00:06:33,780
around I don't know

00:06:31,070 --> 00:06:35,760
showing a loader or loading gif to

00:06:33,780 --> 00:06:39,900
actually displaying it on the screen

00:06:35,760 --> 00:06:42,780
what happens behind the scenes well

00:06:39,900 --> 00:06:45,390
first I need to talk about how react

00:06:42,780 --> 00:06:46,650
renders stuff so we've got again the app

00:06:45,390 --> 00:06:49,500
there's a JSX

00:06:46,650 --> 00:06:52,260
and react takes the JSX and creates a

00:06:49,500 --> 00:06:54,150
virtual tree quite often it's called

00:06:52,260 --> 00:06:56,970
virtual Dom but I don't really like that

00:06:54,150 --> 00:06:58,560
name because they kind of assume there

00:06:56,970 --> 00:07:01,410
is a Dom in there but there is no Dom

00:06:58,560 --> 00:07:03,450
it's literally just an object blob just

00:07:01,410 --> 00:07:04,919
some sort of data that describes what do

00:07:03,450 --> 00:07:07,770
you want to render and what the state of

00:07:04,919 --> 00:07:09,840
the application is and then you can take

00:07:07,770 --> 00:07:12,030
this kind of blob of data and you can

00:07:09,840 --> 00:07:13,620
render it into anything you want you can

00:07:12,030 --> 00:07:16,080
render it into web you can render it

00:07:13,620 --> 00:07:18,330
into an android or iOS application you

00:07:16,080 --> 00:07:20,070
can even take it to hardware you just

00:07:18,330 --> 00:07:23,400
heard about can wheeler he did last year

00:07:20,070 --> 00:07:26,550
a talk on controlling a crossbow a

00:07:23,400 --> 00:07:28,800
hardware machine with react so as long

00:07:26,550 --> 00:07:31,950
as you can map whatever the blob of the

00:07:28,800 --> 00:07:34,650
heater is into whatever should be

00:07:31,950 --> 00:07:36,270
rendered or whatever it should do then

00:07:34,650 --> 00:07:38,160
it will do it and that's why I assume

00:07:36,270 --> 00:07:39,510
that you can reuse your components

00:07:38,160 --> 00:07:44,070
because at the end of the day they are

00:07:39,510 --> 00:07:46,110
just some sort of data structure when we

00:07:44,070 --> 00:07:48,510
take it to react native you'll see that

00:07:46,110 --> 00:07:50,880
there is the app react takes it creates

00:07:48,510 --> 00:07:53,610
a sort of the tree from it does the

00:07:50,880 --> 00:07:56,220
JavaScript bit then react native bridge

00:07:53,610 --> 00:07:58,290
literal just takes this blob of data and

00:07:56,220 --> 00:08:01,229
passes it on to native what that gets

00:07:58,290 --> 00:08:03,450
rendered still you would kind of assume

00:08:01,229 --> 00:08:05,910
sure I can write one component a render

00:08:03,450 --> 00:08:07,740
into three different places but the

00:08:05,910 --> 00:08:10,220
problem is that the platform's that we

00:08:07,740 --> 00:08:12,840
are dealing with here are so different

00:08:10,220 --> 00:08:14,740
what do you think about web we've got

00:08:12,840 --> 00:08:18,520
tags to build the

00:08:14,740 --> 00:08:21,099
our page with such as zips and spans and

00:08:18,520 --> 00:08:23,530
paragraphs h1 they are all based on the

00:08:21,099 --> 00:08:26,620
fact that web was originally just a

00:08:23,530 --> 00:08:28,780
document the semantics that is very very

00:08:26,620 --> 00:08:32,169
important for web but you can't say that

00:08:28,780 --> 00:08:36,760
about mobile apps mobile ads have a

00:08:32,169 --> 00:08:39,969
completely different set of components

00:08:36,760 --> 00:08:41,979
that you can build your views with some

00:08:39,969 --> 00:08:45,250
of them are quite similar such as view

00:08:41,979 --> 00:08:46,930
or button but then there are things like

00:08:45,250 --> 00:08:49,060
scroll of view and date picker that you

00:08:46,930 --> 00:08:52,600
would not find on web or not readily

00:08:49,060 --> 00:08:54,700
available and then we've got another set

00:08:52,600 --> 00:08:57,790
yet again for Android which will have

00:08:54,700 --> 00:09:01,390
very similar specified styles but there

00:08:57,790 --> 00:09:04,720
are differences one that I discovered

00:09:01,390 --> 00:09:06,580
recently was that in iOS you can select

00:09:04,720 --> 00:09:08,890
time and date at the same time in the

00:09:06,580 --> 00:09:10,300
same picker but on Android you have to

00:09:08,890 --> 00:09:13,240
use time picker and they pick a

00:09:10,300 --> 00:09:17,250
separately which kind of shows you the

00:09:13,240 --> 00:09:17,250
differences in platforms and approaches

00:09:17,339 --> 00:09:21,670
actually when you look at the react

00:09:19,899 --> 00:09:23,410
native documentation you will see like

00:09:21,670 --> 00:09:24,010
you know these are components you can

00:09:23,410 --> 00:09:25,870
use everywhere

00:09:24,010 --> 00:09:29,230
these are Android only and these are is

00:09:25,870 --> 00:09:31,450
only so even react native couldn't

00:09:29,230 --> 00:09:36,399
really figure out how to put these two

00:09:31,450 --> 00:09:38,860
together and so some of the components

00:09:36,399 --> 00:09:41,140
let's if I write the component as a view

00:09:38,860 --> 00:09:42,700
or a text it's like easy to figure out

00:09:41,140 --> 00:09:45,100
what that would be on web that would be

00:09:42,700 --> 00:09:47,050
a different graph but what would I do

00:09:45,100 --> 00:09:49,420
with a scroll view or a flat list or a

00:09:47,050 --> 00:09:52,930
slider there are no such components and

00:09:49,420 --> 00:09:55,839
when similarly if I have h1 or a header

00:09:52,930 --> 00:09:58,450
I wouldn't know what that would be

00:09:55,839 --> 00:10:01,360
actually in react neighbor or in the

00:09:58,450 --> 00:10:04,180
native world so the issue really is

00:10:01,360 --> 00:10:07,390
because if laptops are so different we

00:10:04,180 --> 00:10:10,000
can't map the components from one to

00:10:07,390 --> 00:10:12,670
another it's just you know like there

00:10:10,000 --> 00:10:15,160
are approaches but the moment you start

00:10:12,670 --> 00:10:16,779
some you know moving the platforms

00:10:15,160 --> 00:10:19,690
together you need to make compromises

00:10:16,779 --> 00:10:22,829
there are some cross-platform component

00:10:19,690 --> 00:10:25,990
systems one of them is react native web

00:10:22,829 --> 00:10:28,060
that one takes whatever you write and

00:10:25,990 --> 00:10:31,300
ran a different sort of passes into web

00:10:28,060 --> 00:10:34,180
code however that is about sixty percent

00:10:31,300 --> 00:10:37,779
ready from in terms of life component

00:10:34,180 --> 00:10:39,190
coverage twitter is using it which it's

00:10:37,779 --> 00:10:41,260
like you know that we're kind of sell

00:10:39,190 --> 00:10:43,360
you on it but because it doesn't have

00:10:41,260 --> 00:10:45,880
full coverage and it's still a very new

00:10:43,360 --> 00:10:48,040
thing we decided to stay away from it

00:10:45,880 --> 00:10:50,320
similarly there is react xpo

00:10:48,040 --> 00:10:52,120
cross-platform done by Microsoft

00:10:50,320 --> 00:10:54,310
but since Microsoft are kind of pushing

00:10:52,120 --> 00:10:57,310
Samer in their own framework it kind of

00:10:54,310 --> 00:11:00,040
seems that react cross-platform as being

00:10:57,310 --> 00:11:01,540
sort of forgotten behind so there are no

00:11:00,040 --> 00:11:05,079
solutions that would be actually

00:11:01,540 --> 00:11:06,850
production-ready there are however some

00:11:05,079 --> 00:11:08,500
edge cases in terms of components that

00:11:06,850 --> 00:11:10,360
we can still use and those are

00:11:08,500 --> 00:11:13,800
components that don't actually render

00:11:10,360 --> 00:11:16,089
anything out into the screen Oh

00:11:13,800 --> 00:11:19,510
places where we can sort of get around

00:11:16,089 --> 00:11:22,390
it one example would be logic components

00:11:19,510 --> 00:11:24,970
or some sort of like components that

00:11:22,390 --> 00:11:27,760
just have some amount of business logic

00:11:24,970 --> 00:11:29,470
in them as an example we've got a

00:11:27,760 --> 00:11:31,420
conditional feature component we've got

00:11:29,470 --> 00:11:33,459
a lot of features blocks all around our

00:11:31,420 --> 00:11:34,779
application there are about 50 of them

00:11:33,459 --> 00:11:37,839
so it kind of makes sense to have a

00:11:34,779 --> 00:11:39,610
component that will say if all these

00:11:37,839 --> 00:11:42,010
conditions of feature flags and

00:11:39,610 --> 00:11:43,160
entitlements are meant do render this

00:11:42,010 --> 00:11:45,980
component other

00:11:43,160 --> 00:11:48,769
to render it so in this particular case

00:11:45,980 --> 00:11:51,050
we don't actually tell it to render

00:11:48,769 --> 00:11:53,089
anything specific it depends on the use

00:11:51,050 --> 00:11:57,649
of the component of what we render in

00:11:53,089 --> 00:12:00,050
the end and then we have another quite

00:11:57,649 --> 00:12:03,800
an interesting solution actually for

00:12:00,050 --> 00:12:05,839
SVG's that is because SVG's are great

00:12:03,800 --> 00:12:08,480
for icons they are really good super

00:12:05,839 --> 00:12:12,769
useful on the web we have most of our

00:12:08,480 --> 00:12:14,709
assets in SVG's but if you look at SVG

00:12:12,769 --> 00:12:18,050
code that's obviously just you know HTML

00:12:14,709 --> 00:12:21,680
XML of some kind so we would not be able

00:12:18,050 --> 00:12:23,930
to use it easily in react native and so

00:12:21,680 --> 00:12:25,699
we decided to transform all our assets

00:12:23,930 --> 00:12:27,230
into this thing where you can see

00:12:25,699 --> 00:12:29,449
everything is capitalized at the

00:12:27,230 --> 00:12:32,060
beginning instead of having lowercase

00:12:29,449 --> 00:12:34,329
and then at the top you can see those

00:12:32,060 --> 00:12:37,850
components being passed as props and

00:12:34,329 --> 00:12:43,009
this way we can pass down the components

00:12:37,850 --> 00:12:44,959
it should use to render itself and then

00:12:43,009 --> 00:12:47,600
we just have a simple mapping one in web

00:12:44,959 --> 00:12:51,050
one in react native while we say if you

00:12:47,600 --> 00:12:54,889
see a G component it means this

00:12:51,050 --> 00:12:57,560
particular tag however it's not really

00:12:54,889 --> 00:12:59,689
easy to use it globally because it's not

00:12:57,560 --> 00:13:01,370
easy to create this kind of mapping as I

00:12:59,689 --> 00:13:02,660
already mentioned it's really easy for

00:13:01,370 --> 00:13:04,480
us to be G's where the mapping is

00:13:02,660 --> 00:13:07,189
one-on-one very sort of straightforward

00:13:04,480 --> 00:13:11,360
but if we went further wrong with this

00:13:07,189 --> 00:13:13,399
it would become quite tricky this is

00:13:11,360 --> 00:13:16,819
some ponents passenger drove it away

00:13:13,399 --> 00:13:18,380
copies but then there is styling and as

00:13:16,819 --> 00:13:21,350
I said I thought that a styling would be

00:13:18,380 --> 00:13:23,990
impossible to reuse but when react

00:13:21,350 --> 00:13:26,269
native core developers were creating the

00:13:23,990 --> 00:13:28,399
framework they thought well you know

00:13:26,269 --> 00:13:30,380
there is this really cool way of doing

00:13:28,399 --> 00:13:33,439
styling on web that everyone loves and

00:13:30,380 --> 00:13:36,170
so they decided to do styling and react

00:13:33,439 --> 00:13:37,970
native with CSS which might be

00:13:36,170 --> 00:13:39,379
controversial idea you would think that

00:13:37,970 --> 00:13:42,199
they will come up with something that

00:13:39,379 --> 00:13:43,360
will not drive you mad but they decided

00:13:42,199 --> 00:13:44,950
to do it and in a way

00:13:43,360 --> 00:13:48,130
it's easier for web developers because

00:13:44,950 --> 00:13:51,750
we can just move into into react native

00:13:48,130 --> 00:13:56,350
and style without learning anything new

00:13:51,750 --> 00:13:58,269
so react native styles are CSS nsj I

00:13:56,350 --> 00:13:59,800
guess some of you probably have seen

00:13:58,269 --> 00:14:03,670
something like this before

00:13:59,800 --> 00:14:06,070
where you just have sort of JavaScript

00:14:03,670 --> 00:14:08,860
objects that define your color and font

00:14:06,070 --> 00:14:10,810
weight and font size but there are a few

00:14:08,860 --> 00:14:13,269
differences you get for example see that

00:14:10,810 --> 00:14:16,899
well obviously it's all come on give up

00:14:13,269 --> 00:14:18,640
K so that's not free CSS font size

00:14:16,899 --> 00:14:21,519
doesn't have any units because react

00:14:18,640 --> 00:14:23,350
native does not have units and there are

00:14:21,519 --> 00:14:26,170
other things when it comes to styling

00:14:23,350 --> 00:14:27,820
such as everything is sliced by default

00:14:26,170 --> 00:14:30,250
everything is likes in a column by

00:14:27,820 --> 00:14:32,410
little which is quite strange because on

00:14:30,250 --> 00:14:34,240
the web it's normally in a row so there

00:14:32,410 --> 00:14:36,760
are a few differences between how

00:14:34,240 --> 00:14:40,360
styling gets implemented in native and

00:14:36,760 --> 00:14:42,790
in web fortunately there is a sweet

00:14:40,360 --> 00:14:47,380
personal library called salt components

00:14:42,790 --> 00:14:49,990
which allows us to write normal CSS even

00:14:47,380 --> 00:14:54,730
in react native we already used start

00:14:49,990 --> 00:14:57,430
components in in web so for us to move

00:14:54,730 --> 00:14:59,980
to to react native what this was really

00:14:57,430 --> 00:15:01,930
easy you can see for those who know salt

00:14:59,980 --> 00:15:04,320
components at the only difference there

00:15:01,930 --> 00:15:06,779
is the start of text instead of salt or

00:15:04,320 --> 00:15:10,570
paragraph or something like that and

00:15:06,779 --> 00:15:16,089
then we just write normal CSS so we can

00:15:10,570 --> 00:15:18,130
reuse a lot of us when we started doing

00:15:16,089 --> 00:15:20,890
the react native conversion our design

00:15:18,130 --> 00:15:22,720
team took this opportunity to you create

00:15:20,890 --> 00:15:24,970
a completely new design system and we

00:15:22,720 --> 00:15:26,589
designed the whole application which

00:15:24,970 --> 00:15:29,730
actually was a bit of a blessing in

00:15:26,589 --> 00:15:33,399
disguise for us because they created a

00:15:29,730 --> 00:15:36,130
whole concept of I mean it's like a

00:15:33,399 --> 00:15:38,829
normal design spec right you've got your

00:15:36,130 --> 00:15:40,240
colors you've got your spaces but that

00:15:38,829 --> 00:15:42,279
for us means that we can define

00:15:40,240 --> 00:15:44,110
variables and variables are something

00:15:42,279 --> 00:15:47,579
that is really easily reused no matter

00:15:44,110 --> 00:15:50,050
whether it is on web or in react native

00:15:47,579 --> 00:15:51,430
we specify everything with pixels and

00:15:50,050 --> 00:15:52,089
then a salt component stripout

00:15:51,430 --> 00:15:54,879
ultimate

00:15:52,089 --> 00:15:56,920
we for us which is really nice and then

00:15:54,879 --> 00:16:00,100
the designers also designed all our

00:15:56,920 --> 00:16:02,259
screens in a very specific way and it's

00:16:00,100 --> 00:16:04,569
quite small but you will kind of see

00:16:02,259 --> 00:16:08,319
that there are some header on top there

00:16:04,569 --> 00:16:10,089
is some product image there is a there

00:16:08,319 --> 00:16:12,850
is some sort of like curve there there

00:16:10,089 --> 00:16:15,249
is a title and a list of items and all

00:16:12,850 --> 00:16:17,769
of these are components defined for us

00:16:15,249 --> 00:16:19,899
which essentially means we build a

00:16:17,769 --> 00:16:22,689
component once and then we built a

00:16:19,899 --> 00:16:25,209
screen like a Lego which is really

00:16:22,689 --> 00:16:28,360
really nice for us as developers but

00:16:25,209 --> 00:16:29,889
that ultimately also means that sometime

00:16:28,360 --> 00:16:32,230
in the future when we are redesigning

00:16:29,889 --> 00:16:34,870
web as well we could just say these

00:16:32,230 --> 00:16:37,209
screen definitions and similar to the

00:16:34,870 --> 00:16:39,819
way we did it with SVG's we can just

00:16:37,209 --> 00:16:42,360
inject different components here because

00:16:39,819 --> 00:16:44,769
the page really will have the same

00:16:42,360 --> 00:16:48,009
structure as it would have been native

00:16:44,769 --> 00:16:50,230
but different elemental components so we

00:16:48,009 --> 00:16:52,529
can say in web header is this and in

00:16:50,230 --> 00:16:54,819
real native a header would be that and

00:16:52,529 --> 00:16:56,679
so we're really loving it

00:16:54,819 --> 00:17:00,490
building building screens for us is

00:16:56,679 --> 00:17:03,670
actually really easy now well until you

00:17:00,490 --> 00:17:06,819
find some quests that normally it's easy

00:17:03,670 --> 00:17:08,860
and then there is business logic and as

00:17:06,819 --> 00:17:12,640
I said I kind of assume that you can't

00:17:08,860 --> 00:17:14,169
reuse any of that but again I was I was

00:17:12,640 --> 00:17:16,299
actually really wrong because business

00:17:14,169 --> 00:17:19,529
logic is the main thing you can reuse

00:17:16,299 --> 00:17:22,870
and that is what really speeds us up if

00:17:19,529 --> 00:17:25,689
you think about what we have to write in

00:17:22,870 --> 00:17:29,830
native or what is native specific to

00:17:25,689 --> 00:17:31,179
where to walk as in JavaScript then for

00:17:29,830 --> 00:17:32,830
native we need the hardware integration

00:17:31,179 --> 00:17:34,450
as I mentioned there's a camera and

00:17:32,830 --> 00:17:37,299
Wi-Fi and Bluetooth and all these things

00:17:34,450 --> 00:17:39,070
that we don't have on the web then there

00:17:37,299 --> 00:17:40,630
are some native SDKs such as for

00:17:39,070 --> 00:17:43,330
analytics we needed to use a specific

00:17:40,630 --> 00:17:46,720
SDK from Adobe so there was no way

00:17:43,330 --> 00:17:48,760
around it however if you remember the

00:17:46,720 --> 00:17:51,100
earth on grandpa how react native works

00:17:48,760 --> 00:17:54,070
it sits in a JavaScript box which means

00:17:51,100 --> 00:17:57,429
it's still just runs JavaScript and

00:17:54,070 --> 00:17:58,820
things like Redux our entire state can

00:17:57,429 --> 00:18:01,159
just sit in there and run

00:17:58,820 --> 00:18:03,710
exactly like it would on web similarly

00:18:01,159 --> 00:18:05,779
to translations they serve just like

00:18:03,710 --> 00:18:08,240
some kind of data and configurations

00:18:05,779 --> 00:18:10,490
that we have in our application and that

00:18:08,240 --> 00:18:14,120
actually means that we can reuse the

00:18:10,490 --> 00:18:18,169
whole state and a lot of texts and stuff

00:18:14,120 --> 00:18:20,029
like that from JavaScript and that

00:18:18,169 --> 00:18:22,970
really empowers us to build really

00:18:20,029 --> 00:18:25,700
really quickly in the end when we are

00:18:22,970 --> 00:18:28,190
building the application we spent about

00:18:25,700 --> 00:18:30,169
70 percent of my time on components and

00:18:28,190 --> 00:18:32,480
styles that is partially because we are

00:18:30,169 --> 00:18:34,850
redesigning things but also because we

00:18:32,480 --> 00:18:37,549
can't reuse the components so we need to

00:18:34,850 --> 00:18:39,350
build up a sprint from scratch then

00:18:37,549 --> 00:18:41,149
about 20% of our work would be on

00:18:39,350 --> 00:18:44,059
business logic but that is simply

00:18:41,149 --> 00:18:47,090
because we need to move things from our

00:18:44,059 --> 00:18:50,000
web app into like a shared place where

00:18:47,090 --> 00:18:52,639
we can sort of reach to it from react

00:18:50,000 --> 00:18:54,230
native but essentially it's all written

00:18:52,639 --> 00:18:56,899
all we have to do is move it from one

00:18:54,230 --> 00:19:00,200
place to another and that's it and there

00:18:56,899 --> 00:19:03,049
is a tiny tiny bit of native work but

00:19:00,200 --> 00:19:05,960
most of the time react native has an

00:19:03,049 --> 00:19:07,879
amazing ecosystem of libraries so we can

00:19:05,960 --> 00:19:09,500
just sort of pull it in and just start

00:19:07,879 --> 00:19:11,539
using whatever was written by somebody

00:19:09,500 --> 00:19:15,559
else and do some basic integration in

00:19:11,539 --> 00:19:18,320
our Redux sagas very few times we had to

00:19:15,559 --> 00:19:20,330
fork a library and make some changes but

00:19:18,320 --> 00:19:24,320
at the end of the day there is quite a

00:19:20,330 --> 00:19:27,830
minimal amount of work for us and so to

00:19:24,320 --> 00:19:30,559
sum this up we can't reuse your

00:19:27,830 --> 00:19:34,250
components practically at all we can use

00:19:30,559 --> 00:19:36,230
a lot of silane in both platforms and we

00:19:34,250 --> 00:19:39,500
can practically use all of our business

00:19:36,230 --> 00:19:44,269
logic which makes it a really easy thing

00:19:39,500 --> 00:19:47,960
to work with and so that's that's where

00:19:44,269 --> 00:19:51,950
we are and we've got a few more steps to

00:19:47,960 --> 00:19:55,060
take the app is not 100% ready but we

00:19:51,950 --> 00:19:57,400
have release it to beta users

00:19:55,060 --> 00:19:59,170
and generally speaking surprising that

00:19:57,400 --> 00:20:00,970
the performance is sometimes much better

00:19:59,170 --> 00:20:03,310
and reactivated application especially

00:20:00,970 --> 00:20:05,590
on Android it's quite surprising to see

00:20:03,310 --> 00:20:08,200
does have Martin nice and smooth early

00:20:05,590 --> 00:20:10,180
experiences for the user but ultimately

00:20:08,200 --> 00:20:13,470
will be also able to ship features much

00:20:10,180 --> 00:20:16,270
faster which again benefits the end-user

00:20:13,470 --> 00:20:18,460
so I think we're all quite happy with it

00:20:16,270 --> 00:20:20,300
and we're looking forward to the rest

00:20:18,460 --> 00:20:25,380
thank you very much

00:20:20,300 --> 00:20:25,380

YouTube URL: https://www.youtube.com/watch?v=oMomqLaxvb0


