Title: Ration Challenge: Eat Like a Refugee for a Week - React Native - October 2018
Publication date: 2018-10-26
Playlist: React Native London
Description: 
	Presented by Mark Gibaud

The "Ration Challenge" is an annual fundraising challenge/campaign by the Act for Peace charity, raising funds in aid of Syrian refugees living in camps in Jordan. In 6 weeks we build a companion app in ReactNative for fundraisers to track their challenge progress and engage with the wider community (https://itunes.apple.com/gb/app/ration-challenge/id1377626191?mt=8)

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,819
hi everyone say yeah my name is Mark I'm

00:00:02,730 --> 00:00:09,269
going to share a story today of building

00:00:05,819 --> 00:00:11,250
an app for an agency in Farringdon

00:00:09,269 --> 00:00:13,080
that I did over the summer it's a six

00:00:11,250 --> 00:00:15,660
seven week project so quite a short one

00:00:13,080 --> 00:00:17,789
my first commercial react native project

00:00:15,660 --> 00:00:21,570
so it was definitely interesting

00:00:17,789 --> 00:00:23,850
so the point of the campaign it was a

00:00:21,570 --> 00:00:26,730
for a fundraising campaign largely run

00:00:23,850 --> 00:00:29,519
in Australia and New Zealand the point

00:00:26,730 --> 00:00:32,189
was to eat like a refugee for a week

00:00:29,519 --> 00:00:35,399
which was interesting so a bit about me

00:00:32,189 --> 00:00:37,800
to start so I grew up in the Microsoft

00:00:35,399 --> 00:00:41,010
band so C sharp developer web developer

00:00:37,800 --> 00:00:43,739
full-stack for over ten years and then I

00:00:41,010 --> 00:00:45,270
always kind of liked apps when they when

00:00:43,739 --> 00:00:46,920
they came about so eventually jumped

00:00:45,270 --> 00:00:49,170
over to apps using the xamarin

00:00:46,920 --> 00:00:50,879
technology anybody heard as Ameren it's

00:00:49,170 --> 00:00:53,190
the Microsoft stuff for cross-platform

00:00:50,879 --> 00:00:55,199
apps so that was pretty good that was

00:00:53,190 --> 00:00:57,149
you know learning the underlying native

00:00:55,199 --> 00:00:59,370
platform specialists in a c-sharp flavor

00:00:57,149 --> 00:01:00,600
which is good because I still know that

00:00:59,370 --> 00:01:03,809
I've left it behind I still think

00:01:00,600 --> 00:01:05,519
c-sharp is a great language so the last

00:01:03,809 --> 00:01:08,400
sort of five or six years I've been at

00:01:05,519 --> 00:01:10,740
just giving calm the until earlier this

00:01:08,400 --> 00:01:11,970
year that was so I've been spending a

00:01:10,740 --> 00:01:15,000
lot of time in that kind of social

00:01:11,970 --> 00:01:16,830
social giving space and then earlier

00:01:15,000 --> 00:01:19,140
this year I left just giving and moved

00:01:16,830 --> 00:01:22,229
into react native and also into

00:01:19,140 --> 00:01:24,420
freelancing so I'm a freelance app

00:01:22,229 --> 00:01:25,920
developer now and of course every app

00:01:24,420 --> 00:01:28,970
developer has their own billion dollar

00:01:25,920 --> 00:01:31,320
app at home so I'm also an entrepreneur

00:01:28,970 --> 00:01:34,110
and if you want to tweet me that's my

00:01:31,320 --> 00:01:36,810
hand or moksha bow so what is the

00:01:34,110 --> 00:01:39,329
rationale as I say it's it's an

00:01:36,810 --> 00:01:40,860
Australian Australian fundraising

00:01:39,329 --> 00:01:43,920
campaign it's been going about four or

00:01:40,860 --> 00:01:46,140
five years now it's a type that takes

00:01:43,920 --> 00:01:49,500
place during what is called refugee week

00:01:46,140 --> 00:01:53,520
which 2018 was the 17th to the 23rd of

00:01:49,500 --> 00:01:55,710
June so that's a global day to raise

00:01:53,520 --> 00:01:58,770
awareness for specifically for refugees

00:01:55,710 --> 00:02:01,439
fleeing Syria the ration challenge so

00:01:58,770 --> 00:02:06,060
these boxes actually get into camps in

00:02:01,439 --> 00:02:10,110
Jordan - - and give are given to Syrian

00:02:06,060 --> 00:02:13,340
refugees so the campaign has been

00:02:10,110 --> 00:02:15,650
primarily or only web until 2018

00:02:13,340 --> 00:02:18,680
when the agency decided they wants to do

00:02:15,650 --> 00:02:21,290
an ios and android app a companion app

00:02:18,680 --> 00:02:25,640
for taking the challenge and we can get

00:02:21,290 --> 00:02:28,180
into that what we both in a second so

00:02:25,640 --> 00:02:30,739
the team was as I say I met these guys

00:02:28,180 --> 00:02:32,599
agency in foundings in Farrington

00:02:30,739 --> 00:02:35,030
specializing in the kind of charity

00:02:32,599 --> 00:02:37,489
sector it was primarily myself for about

00:02:35,030 --> 00:02:40,700
five weeks and then I was joined just to

00:02:37,489 --> 00:02:42,500
get us over the line by to react web

00:02:40,700 --> 00:02:44,569
developers they were obviously react

00:02:42,500 --> 00:02:46,010
Nate native code base so they were able

00:02:44,569 --> 00:02:48,620
to contribute pretty quickly once up

00:02:46,010 --> 00:02:51,799
with the Foundation's down and then we

00:02:48,620 --> 00:02:53,120
had a project manager in a QA and I was

00:02:51,799 --> 00:02:55,430
at the project manager was really good

00:02:53,120 --> 00:02:59,209
at testing as well so that'll become

00:02:55,430 --> 00:03:02,090
apparent later on so a bit like just

00:02:59,209 --> 00:03:04,670
giving comm in the UK there's a platform

00:03:02,090 --> 00:03:06,260
out in Australasia called raise Li so

00:03:04,670 --> 00:03:08,120
this is kind of a fundraising platform

00:03:06,260 --> 00:03:10,730
where people create pages receive

00:03:08,120 --> 00:03:12,560
donations it's got a great API it's got

00:03:10,730 --> 00:03:14,540
web hooks on those api's that we used

00:03:12,560 --> 00:03:17,299
for push notifications etc so that's

00:03:14,540 --> 00:03:18,859
that powered the app largely and then as

00:03:17,299 --> 00:03:21,290
I say the points of the campaign was to

00:03:18,859 --> 00:03:23,269
sign up become a ration Challenger

00:03:21,290 --> 00:03:25,760
live on rations you get a box like this

00:03:23,269 --> 00:03:28,130
for your first few meals your first

00:03:25,760 --> 00:03:30,230
three or four meals and then if you

00:03:28,130 --> 00:03:32,180
download the app and engage online you

00:03:30,230 --> 00:03:34,609
get recipe ideas and you have to make

00:03:32,180 --> 00:03:36,349
your own kind of rations for the

00:03:34,609 --> 00:03:39,980
remainder of the week so that was the

00:03:36,349 --> 00:03:41,420
point of the app so we built as I say we

00:03:39,980 --> 00:03:44,480
built this in about six or seven weeks

00:03:41,420 --> 00:03:47,989
we had challenge tracking so basically

00:03:44,480 --> 00:03:49,970
you know track your own journey ask for

00:03:47,989 --> 00:03:52,190
donations share a share to Facebook to

00:03:49,970 --> 00:03:54,169
ask for donations as you get more

00:03:52,190 --> 00:03:56,959
donations and kind of progress through

00:03:54,169 --> 00:03:58,040
levels you get more rewards that you can

00:03:56,959 --> 00:04:01,160
add to your rations

00:03:58,040 --> 00:04:03,650
there were recipes ideas chances to

00:04:01,160 --> 00:04:05,930
engage with the community you know

00:04:03,650 --> 00:04:09,859
everybody else doing the challenge take

00:04:05,930 --> 00:04:12,739
take part in some polls look at you know

00:04:09,859 --> 00:04:14,660
leaderboards and then if you were

00:04:12,739 --> 00:04:16,609
raising in a team you can see how your

00:04:14,660 --> 00:04:18,620
team was doing you can see how your team

00:04:16,609 --> 00:04:20,599
was doing you know the individuals in

00:04:18,620 --> 00:04:22,669
your team and also how your team was

00:04:20,599 --> 00:04:24,560
doing against other teams and that was

00:04:22,669 --> 00:04:27,200
all raised li data that we put in the

00:04:24,560 --> 00:04:28,730
app so they were donation notification

00:04:27,200 --> 00:04:30,650
as well leaderboards as I said recipe

00:04:28,730 --> 00:04:32,800
ideas social sharing and this app

00:04:30,650 --> 00:04:36,770
eventually went out to about 5,000 users

00:04:32,800 --> 00:04:39,680
Android and iOS for that week you might

00:04:36,770 --> 00:04:42,980
think weather you might ask whether we

00:04:39,680 --> 00:04:45,080
had donating in the app it turns out due

00:04:42,980 --> 00:04:47,030
to licensing and I know this from Just

00:04:45,080 --> 00:04:48,950
Giving due to licensing from Apple

00:04:47,030 --> 00:04:52,070
they don't actually allow in-app

00:04:48,950 --> 00:04:54,440
donations unless you using Apple pace as

00:04:52,070 --> 00:04:57,380
donate with Apple pay just because they

00:04:54,440 --> 00:04:59,480
don't want to take 30 percent of an

00:04:57,380 --> 00:05:02,690
in-app donation so that's that's a bit

00:04:59,480 --> 00:05:06,920
more complex and so that was that didn't

00:05:02,690 --> 00:05:09,830
make the app it being 7 weeks so the

00:05:06,920 --> 00:05:11,480
tech stack used fairly stock standard

00:05:09,830 --> 00:05:12,710
these days I think not a big surprise to

00:05:11,480 --> 00:05:14,960
anybody here so react Knights have

00:05:12,710 --> 00:05:16,550
obviously react navigation so I remember

00:05:14,960 --> 00:05:18,590
looking in seeing about four or five

00:05:16,550 --> 00:05:21,650
different options for react navigate for

00:05:18,590 --> 00:05:23,150
react native navigation solutions it

00:05:21,650 --> 00:05:25,310
looked like react navigation was the

00:05:23,150 --> 00:05:26,450
best one then and I think it's emerged

00:05:25,310 --> 00:05:29,810
as kind of the de facto standard

00:05:26,450 --> 00:05:31,580
certainly getting the most oh yes some

00:05:29,810 --> 00:05:34,280
fights it's there would be an

00:05:31,580 --> 00:05:37,460
interesting discussion over via and then

00:05:34,280 --> 00:05:39,350
redux and redux thunk I think of all the

00:05:37,460 --> 00:05:41,390
things in react land relax is probably

00:05:39,350 --> 00:05:43,730
one of the more controversial ones but

00:05:41,390 --> 00:05:46,850
certainly an app on this scale is it was

00:05:43,730 --> 00:05:49,790
a good choice I think and then for some

00:05:46,850 --> 00:05:52,550
of the backend stuff AWS amplify for

00:05:49,790 --> 00:05:54,980
push notifications assisted by lambda

00:05:52,550 --> 00:05:56,480
functions we had a lambda function that

00:05:54,980 --> 00:05:57,860
would receive the the web hook from

00:05:56,480 --> 00:05:59,420
Ray's Lee once somebody got a donation

00:05:57,860 --> 00:06:02,360
on their page and they could get in

00:05:59,420 --> 00:06:04,540
after notifications and come back into

00:06:02,360 --> 00:06:08,150
the app and see their updated total etc

00:06:04,540 --> 00:06:11,000
and then also MongoDB Atlas so atlases

00:06:08,150 --> 00:06:13,910
MongoDB s database as a service product

00:06:11,000 --> 00:06:16,670
pretty awesome as well for any database

00:06:13,910 --> 00:06:19,520
nerds in the audience and yeah that that

00:06:16,670 --> 00:06:21,050
stuff combined well to do the push

00:06:19,520 --> 00:06:23,030
notification stuff which can be

00:06:21,050 --> 00:06:25,400
sometimes quite complicated so onto

00:06:23,030 --> 00:06:26,840
lessons learnt so I'll go through some

00:06:25,400 --> 00:06:30,020
lessons these are like highly

00:06:26,840 --> 00:06:31,280
opinionated lessons century IO and not

00:06:30,020 --> 00:06:37,040
crash oolitic so I tried to get

00:06:31,280 --> 00:06:39,200
crashlytics going failed miserably bit

00:06:37,040 --> 00:06:40,610
rise not never code so these are these

00:06:39,200 --> 00:06:42,919
are tools to help

00:06:40,610 --> 00:06:46,490
with the distribution to app stores and

00:06:42,919 --> 00:06:48,020
to test test groups of users etc will go

00:06:46,490 --> 00:06:51,020
through kind of what I was supposed to

00:06:48,020 --> 00:06:53,930
use and what I'd like to use and then

00:06:51,020 --> 00:06:56,180
yes a react navigation and Redux it was

00:06:53,930 --> 00:06:57,740
a bit weird at first because having

00:06:56,180 --> 00:06:59,689
worked on the native platforms were you

00:06:57,740 --> 00:07:03,099
very deliberate about navigation you say

00:06:59,689 --> 00:07:06,530
you are a navigation controller dot push

00:07:03,099 --> 00:07:08,389
push navigation controller to get to the

00:07:06,530 --> 00:07:13,400
next screen or maybe some of you

00:07:08,389 --> 00:07:14,779
provoked with nvvm frameworks where you

00:07:13,400 --> 00:07:16,460
just kind of show a view model and

00:07:14,779 --> 00:07:18,379
whatever the view that is attached to

00:07:16,460 --> 00:07:21,110
that view model is shown is still very

00:07:18,379 --> 00:07:24,110
deliberate about how you move around the

00:07:21,110 --> 00:07:26,060
app but obviously in react navigation

00:07:24,110 --> 00:07:30,560
and read access or just actions to the

00:07:26,060 --> 00:07:32,389
store and then the final the final

00:07:30,560 --> 00:07:34,099
lesson learnt is that in six weeks you

00:07:32,389 --> 00:07:36,680
don't get time to write unit tests but

00:07:34,099 --> 00:07:38,810
with with some good manual testing that

00:07:36,680 --> 00:07:39,800
doesn't actually matter but now I'm on a

00:07:38,810 --> 00:07:43,099
code base with a hundred percent

00:07:39,800 --> 00:07:49,270
coverage so don't don't scream at me too

00:07:43,099 --> 00:07:51,680
too loudly so one cool thing about using

00:07:49,270 --> 00:07:54,409
basically using react navigation and

00:07:51,680 --> 00:07:58,610
running your navigation through through

00:07:54,409 --> 00:08:01,690
the states through through the store is

00:07:58,610 --> 00:08:04,430
the ability to apply apply middleware so

00:08:01,690 --> 00:08:07,279
react navigator react native doesn't

00:08:04,430 --> 00:08:11,779
actually give you events for when you

00:08:07,279 --> 00:08:14,360
know the app comes on like backgrounds

00:08:11,779 --> 00:08:16,099
and foregrounds and so some of it is you

00:08:14,360 --> 00:08:17,900
know if any of you have done native

00:08:16,099 --> 00:08:19,610
development you get explicit events when

00:08:17,900 --> 00:08:20,870
when the app does anything really

00:08:19,610 --> 00:08:23,210
there's there's nothing that you're

00:08:20,870 --> 00:08:24,650
really caught out with and the same with

00:08:23,210 --> 00:08:27,020
like transitioning screen to screen

00:08:24,650 --> 00:08:28,490
there's easy stuff to hook in so on the

00:08:27,020 --> 00:08:32,810
native platforms but it's a bit more

00:08:28,490 --> 00:08:34,279
tricky with react native but if you take

00:08:32,810 --> 00:08:36,500
a step back and understand that all of

00:08:34,279 --> 00:08:38,810
your navigation is just actually state

00:08:36,500 --> 00:08:40,579
changes in the store it becomes pretty

00:08:38,810 --> 00:08:43,789
easy to just apply a piece of middleware

00:08:40,579 --> 00:08:46,279
so you know along with say Redux think

00:08:43,789 --> 00:08:48,800
I've got a street screen tracking util

00:08:46,279 --> 00:08:51,440
here and this is almost completely from

00:08:48,800 --> 00:08:52,940
the docs and basically you can see that

00:08:51,440 --> 00:08:54,100
it's a piece of middle way from the next

00:08:52,940 --> 00:08:56,080
and the action

00:08:54,100 --> 00:08:58,800
if it's a if it's not a never get in

00:08:56,080 --> 00:09:01,390
navigation action just execute the next

00:08:58,800 --> 00:09:04,080
function in the chain in the middleware

00:09:01,390 --> 00:09:06,820
chain and otherwise dig into the actual

00:09:04,080 --> 00:09:09,520
navigation slice of the of the global

00:09:06,820 --> 00:09:12,610
state and then get some details to

00:09:09,520 --> 00:09:14,080
eventually send to Google Analytics so

00:09:12,610 --> 00:09:17,710
that's the kind of win that you can get

00:09:14,080 --> 00:09:19,570
with with completely you know doing

00:09:17,710 --> 00:09:22,480
things completely differently to light a

00:09:19,570 --> 00:09:24,390
platform sometimes so crashlytics who

00:09:22,480 --> 00:09:26,800
use crashlytics in their apps you know

00:09:24,390 --> 00:09:30,460
3030 much yeah you're not gonna like

00:09:26,800 --> 00:09:33,670
what I say next so I tried to try to

00:09:30,460 --> 00:09:37,000
integrate crashlytics if we kind of take

00:09:33,670 --> 00:09:38,250
a look at the last few years of

00:09:37,000 --> 00:09:41,650
crashlytics

00:09:38,250 --> 00:09:43,240
as I kind of found out the hard way you

00:09:41,650 --> 00:09:46,240
know crashlytics started in what 2010

00:09:43,240 --> 00:09:48,010
2011 or something eventually acquired by

00:09:46,240 --> 00:09:50,050
Twitter Twitter decides to roll

00:09:48,010 --> 00:09:52,030
crashlytics into fabric with a couple of

00:09:50,050 --> 00:09:53,140
other things like answers and and and

00:09:52,030 --> 00:09:56,140
different solutions for different

00:09:53,140 --> 00:09:59,200
problems Twitter gets bored or dunno

00:09:56,140 --> 00:10:01,150
what happens but sells it to Google

00:09:59,200 --> 00:10:04,950
Google kind of wonders what to do with

00:10:01,150 --> 00:10:07,950
it and it not quite but rolls it into

00:10:04,950 --> 00:10:10,750
firebase that should say sorry Google

00:10:07,950 --> 00:10:14,290
sorry Google acquires fabric and rolls

00:10:10,750 --> 00:10:15,910
it into firebase and then obviously as a

00:10:14,290 --> 00:10:18,040
ref native developer you come into this

00:10:15,910 --> 00:10:19,450
through the react native SDK and getting

00:10:18,040 --> 00:10:21,700
that up and running it is very kind of

00:10:19,450 --> 00:10:25,270
obvious to me all the you know lineages

00:10:21,700 --> 00:10:27,430
or like levels of ancestry that were

00:10:25,270 --> 00:10:28,840
that you had to grapple with especially

00:10:27,430 --> 00:10:30,310
with regards to documentation so the

00:10:28,840 --> 00:10:33,010
documentation is kind of everywhere a

00:10:30,310 --> 00:10:35,080
little bit incomplete it turns out that

00:10:33,010 --> 00:10:38,380
you know different things want firebase

00:10:35,080 --> 00:10:41,710
for different reasons so you can use AWS

00:10:38,380 --> 00:10:43,660
Cognito for just a user store that uses

00:10:41,710 --> 00:10:45,520
that once firebase and then end up

00:10:43,660 --> 00:10:47,080
needing a different version of firebase

00:10:45,520 --> 00:10:49,180
for push notifications which you need

00:10:47,080 --> 00:10:51,280
for Android push notifications so yeah

00:10:49,180 --> 00:10:54,220
it's it didn't really work so it led to

00:10:51,280 --> 00:10:56,950
a lot of pain and what I recommend these

00:10:54,220 --> 00:10:58,510
days especially for react native apps is

00:10:56,950 --> 00:11:01,540
something from is to stop use

00:10:58,510 --> 00:11:04,240
crashlytics stop using crashlytics and

00:11:01,540 --> 00:11:06,340
check out something called sentry IO so

00:11:04,240 --> 00:11:07,490
this is pretty popular with react.js

00:11:06,340 --> 00:11:09,529
developers

00:11:07,490 --> 00:11:13,520
but I think in of last year late last

00:11:09,529 --> 00:11:16,820
year early this year rolled out good

00:11:13,520 --> 00:11:20,089
support for react native so with some

00:11:16,820 --> 00:11:22,220
choice information redacted this is a

00:11:20,089 --> 00:11:24,850
screenshot of the app I'm working on at

00:11:22,220 --> 00:11:27,880
the moment you can see like a ton of

00:11:24,850 --> 00:11:31,790
information in the century dashboard for

00:11:27,880 --> 00:11:33,830
like various you know device properties

00:11:31,790 --> 00:11:35,360
and whatnot if you get your source maps

00:11:33,830 --> 00:11:39,670
uploaded properly which is pretty

00:11:35,360 --> 00:11:42,560
trivial then you can get proper you know

00:11:39,670 --> 00:11:44,029
code inspection therefore for stuff that

00:11:42,560 --> 00:11:47,089
makes sense

00:11:44,029 --> 00:11:49,010
this is the breadcrumbs feature so in

00:11:47,089 --> 00:11:50,360
the same way that I had that screen

00:11:49,010 --> 00:11:53,180
tracking middleware you can set up

00:11:50,360 --> 00:11:55,880
middleware to post a bread breadcrumb to

00:11:53,180 --> 00:11:58,130
century indicating your state

00:11:55,880 --> 00:12:01,610
transitions your your your action

00:11:58,130 --> 00:12:03,950
dispatches for those of you use Axios

00:12:01,610 --> 00:12:06,170
Axios has got interceptors that you can

00:12:03,950 --> 00:12:08,990
kind of you know tag onto any kind of

00:12:06,170 --> 00:12:10,880
request a response for again you can use

00:12:08,990 --> 00:12:12,890
middleware to give sentry or your

00:12:10,880 --> 00:12:15,589
network requests obviously only post

00:12:12,890 --> 00:12:17,270
your body if you've got non PRI or

00:12:15,589 --> 00:12:19,520
sensitive information in there and

00:12:17,270 --> 00:12:22,420
you're allowed to and then if we carry

00:12:19,520 --> 00:12:24,709
on further down more information about

00:12:22,420 --> 00:12:26,480
time zones and everything that might

00:12:24,709 --> 00:12:28,670
help you debug and then right at the

00:12:26,480 --> 00:12:30,589
bottom you can even attach additional

00:12:28,670 --> 00:12:33,800
data of your own so we've put in our

00:12:30,589 --> 00:12:35,990
last action how long they've been alive

00:12:33,800 --> 00:12:37,490
which is sometimes like you know if it's

00:12:35,990 --> 00:12:39,290
the first few actions then you want to

00:12:37,490 --> 00:12:41,570
know that it's early on any in a user's

00:12:39,290 --> 00:12:43,100
journey and the entirety of the store we

00:12:41,570 --> 00:12:45,440
don't store a lot of stuff in our redox

00:12:43,100 --> 00:12:47,209
tour so that shouldn't get too big so

00:12:45,440 --> 00:12:50,920
sentry is kind of what I what I choose

00:12:47,209 --> 00:12:53,990
to use first for debugging app issues

00:12:50,920 --> 00:12:55,940
the next one is never code says anybody

00:12:53,990 --> 00:12:58,010
heard an ever code I'd never heard of

00:12:55,940 --> 00:13:01,670
never code before I'd started that this

00:12:58,010 --> 00:13:04,279
place so Israeli startup I believe yeah

00:13:01,670 --> 00:13:05,899
so they were really using it so we kind

00:13:04,279 --> 00:13:08,060
of just I just picked it up there and

00:13:05,899 --> 00:13:11,209
and used it straight away but it turns

00:13:08,060 --> 00:13:13,250
out that the react native support wasn't

00:13:11,209 --> 00:13:15,140
really quite there it wasn't smooth to

00:13:13,250 --> 00:13:18,290
use react now it was supported but not

00:13:15,140 --> 00:13:20,329
that smooth it had uptime issues which

00:13:18,290 --> 00:13:23,360
is not what you want when you know

00:13:20,329 --> 00:13:26,209
nervous project managers are like they

00:13:23,360 --> 00:13:28,160
have a meeting tonight at 12 o'clock

00:13:26,209 --> 00:13:29,809
because the client is Australia is in

00:13:28,160 --> 00:13:32,870
Australia and they want a new version of

00:13:29,809 --> 00:13:35,329
the app right now and then yeah it's not

00:13:32,870 --> 00:13:37,399
really configurable or programmable you

00:13:35,329 --> 00:13:38,990
basically choose whatever they have

00:13:37,399 --> 00:13:40,639
there and if you don't if they don't

00:13:38,990 --> 00:13:42,980
cater for your specific use case

00:13:40,639 --> 00:13:44,509
something simple as upping the version

00:13:42,980 --> 00:13:47,089
number the build number of an app which

00:13:44,509 --> 00:13:49,699
everybody wants to do at build time you

00:13:47,089 --> 00:13:51,170
had to you know do it via bash script

00:13:49,699 --> 00:13:54,709
and then upload the bash script which is

00:13:51,170 --> 00:13:58,100
a bit a bit stupid really so is anybody

00:13:54,709 --> 00:14:00,439
heard a bit rise so bit rise is kind of

00:13:58,100 --> 00:14:01,759
what I choose now the build steps are

00:14:00,439 --> 00:14:03,860
all open sources you might know that

00:14:01,759 --> 00:14:05,449
means there are new ones added all the

00:14:03,860 --> 00:14:08,240
time the existing ones are well

00:14:05,449 --> 00:14:09,920
maintained and all the all this kind of

00:14:08,240 --> 00:14:11,990
thing all the popular build steps that

00:14:09,920 --> 00:14:14,269
you want to do with an app so you know

00:14:11,990 --> 00:14:16,249
uploading so bertrise itself uploading

00:14:14,269 --> 00:14:19,540
to the app stores even running you know

00:14:16,249 --> 00:14:23,300
advanced scenarios like UI testing in

00:14:19,540 --> 00:14:25,279
AWS app form that stuff's all catered

00:14:23,300 --> 00:14:26,870
for it's all there a new fee and

00:14:25,279 --> 00:14:28,910
relatively new features you can now

00:14:26,870 --> 00:14:31,009
chain build jobs so if you've got one

00:14:28,910 --> 00:14:32,749
job for compilation and delivery of the

00:14:31,009 --> 00:14:34,249
app you can then have a separate one

00:14:32,749 --> 00:14:36,199
that depends on the success of that

00:14:34,249 --> 00:14:38,569
first one to go off and take that up and

00:14:36,199 --> 00:14:39,110
do UI testing if you're into that sort

00:14:38,569 --> 00:14:42,129
of thing

00:14:39,110 --> 00:14:44,420
and I also like to point out when

00:14:42,129 --> 00:14:46,040
companies have good funding and have

00:14:44,420 --> 00:14:49,100
good investors so they y combinator

00:14:46,040 --> 00:14:51,259
funded and they got six million dollars

00:14:49,100 --> 00:14:52,790
a couple of years ago now which means

00:14:51,259 --> 00:14:54,170
that the product is going to you know

00:14:52,790 --> 00:14:56,269
continue to progress over the next

00:14:54,170 --> 00:15:00,259
several months so that's what I choose

00:14:56,269 --> 00:15:01,730
for building and delivering apps so I

00:15:00,259 --> 00:15:03,920
thought I'd end off with a couple of

00:15:01,730 --> 00:15:08,420
tips so has anybody heard of reactor

00:15:03,920 --> 00:15:11,870
Tron okay so all news to some of you but

00:15:08,420 --> 00:15:13,819
this is this is basically a Mac desktop

00:15:11,870 --> 00:15:15,829
app that you can install and it's

00:15:13,819 --> 00:15:16,509
basically react native debugger on

00:15:15,829 --> 00:15:18,980
steroids

00:15:16,509 --> 00:15:20,660
so once you hook it up and do kind of

00:15:18,980 --> 00:15:23,209
the minimum of config you can get all of

00:15:20,660 --> 00:15:25,309
your dispatch your actions dispatched

00:15:23,209 --> 00:15:28,490
logged there you can get custom logging

00:15:25,309 --> 00:15:29,550
as well again with the x intercept as

00:15:28,490 --> 00:15:32,430
you can

00:15:29,550 --> 00:15:34,320
you can see your API requests you can

00:15:32,430 --> 00:15:34,860
dig into the response payloads and the

00:15:34,320 --> 00:15:38,070
headers

00:15:34,860 --> 00:15:40,080
that's all super super important to be

00:15:38,070 --> 00:15:42,360
able to do especially in a sequential

00:15:40,080 --> 00:15:44,810
fashion fashion like that to understand

00:15:42,360 --> 00:15:48,630
like what what's what your app is doing

00:15:44,810 --> 00:15:51,089
and what what often what is doing wrong

00:15:48,630 --> 00:15:53,820
in other words another thing you can do

00:15:51,089 --> 00:15:57,079
on this tab here is actually paste into

00:15:53,820 --> 00:15:59,970
this box here a screenshot of your

00:15:57,079 --> 00:16:02,610
mock-up from a designer and that

00:15:59,970 --> 00:16:04,620
actually overlays onto your simulator so

00:16:02,610 --> 00:16:06,959
you can see kind of basically use this

00:16:04,620 --> 00:16:09,329
to get pixel-perfect between what you've

00:16:06,959 --> 00:16:12,180
actually coded in your react native view

00:16:09,329 --> 00:16:14,010
and what your designer has designed in

00:16:12,180 --> 00:16:17,670
envision so that's super useful

00:16:14,010 --> 00:16:22,620
especially for phones of different sizes

00:16:17,670 --> 00:16:24,930
these days and some of the conversations

00:16:22,620 --> 00:16:28,170
that I've had at react native monthly

00:16:24,930 --> 00:16:29,730
meetups before have been like yeah I've

00:16:28,170 --> 00:16:31,620
come to kind of check out react native

00:16:29,730 --> 00:16:34,170
I'm not sure if it's ready for primetime

00:16:31,620 --> 00:16:36,600
yet I'm not sure if I should choose to

00:16:34,170 --> 00:16:38,820
learn native platforms or if it's like a

00:16:36,600 --> 00:16:41,070
non developer you know choose to invest

00:16:38,820 --> 00:16:43,380
in a company to build for the native

00:16:41,070 --> 00:16:46,230
platforms or react native like how ready

00:16:43,380 --> 00:16:49,050
is it and for those of you has anybody

00:16:46,230 --> 00:16:52,320
heard of gyroscope the app you've pretty

00:16:49,050 --> 00:16:54,180
much heard of so good that's news

00:16:52,320 --> 00:16:56,490
because if you have any doubts about how

00:16:54,180 --> 00:16:58,980
awesome and app that you can actually

00:16:56,490 --> 00:17:01,290
create with react native download and

00:16:58,980 --> 00:17:03,120
check out this app it's a like body

00:17:01,290 --> 00:17:05,459
tracking app so it tracks your sleep

00:17:03,120 --> 00:17:07,980
your time online through like rescue

00:17:05,459 --> 00:17:09,480
time your heart rate through your Apple

00:17:07,980 --> 00:17:11,429
watch and a bunch of other things there

00:17:09,480 --> 00:17:13,679
steps all the obvious stuff but the way

00:17:11,429 --> 00:17:17,939
it presents this data back to you it's

00:17:13,679 --> 00:17:20,220
it's the best UI that I've ever seen on

00:17:17,939 --> 00:17:22,559
any iOS app react native or otherwise so

00:17:20,220 --> 00:17:25,110
definitely check that out it's like six

00:17:22,559 --> 00:17:26,220
guys in San Francisco again it's it's

00:17:25,110 --> 00:17:28,140
amazing it's probably quite a lot of

00:17:26,220 --> 00:17:30,390
advanced react native code in there but

00:17:28,140 --> 00:17:31,650
it is react native code nonetheless so

00:17:30,390 --> 00:17:32,970
check that out I don't think there's

00:17:31,650 --> 00:17:34,650
anything wrong with crashlytics if you

00:17:32,970 --> 00:17:35,940
set it up like 10 times already but if

00:17:34,650 --> 00:17:38,870
you haven't set it up for the first time

00:17:35,940 --> 00:17:41,970
then getting it running in react native

00:17:38,870 --> 00:17:45,120
again it was something that I added

00:17:41,970 --> 00:17:48,210
after really all added amplify which had

00:17:45,120 --> 00:17:51,809
added firebase and then I needed to dive

00:17:48,210 --> 00:17:53,669
in to build up Gradle to make you know

00:17:51,809 --> 00:17:57,090
different versions of firebase pulled in

00:17:53,669 --> 00:18:00,390
for these different crashlytics wanted

00:17:57,090 --> 00:18:06,179
one and amplify wanted another and then

00:18:00,390 --> 00:18:08,130
yeah the you know so sentry is kind of

00:18:06,179 --> 00:18:09,510
just easier to get going and kind of

00:18:08,130 --> 00:18:10,890
shows you the info because apps these

00:18:09,510 --> 00:18:12,600
days don't actually crash that much

00:18:10,890 --> 00:18:14,669
right like 2011 apps are crashing you

00:18:12,600 --> 00:18:17,640
wanted to know like the build their

00:18:14,669 --> 00:18:19,350
Apple build logs for that crash and D

00:18:17,640 --> 00:18:21,720
you know symbolic vacation whatever it

00:18:19,350 --> 00:18:22,860
is but these days like one mostly

00:18:21,720 --> 00:18:24,809
protect it well you should mostly

00:18:22,860 --> 00:18:26,929
protecting against actual crashes you

00:18:24,809 --> 00:18:29,280
kind of want court JavaScript errors or

00:18:26,929 --> 00:18:31,620
court exceptions and you want to report

00:18:29,280 --> 00:18:34,350
those you ideally want to report those

00:18:31,620 --> 00:18:36,570
within like a an event stream of stuff

00:18:34,350 --> 00:18:40,440
that you've reported yourself either

00:18:36,570 --> 00:18:43,200
you know like analytics events or state

00:18:40,440 --> 00:18:45,419
changes dispatched actions API requests

00:18:43,200 --> 00:18:46,679
and responses that type of thing yeah I

00:18:45,419 --> 00:18:50,159
couldn't I couldn't get it working with

00:18:46,679 --> 00:18:54,080
with crashlytics a another one I hear of

00:18:50,159 --> 00:18:56,190
a lot more these days is is visuals to

00:18:54,080 --> 00:18:58,740
Microsoft App Center as well that also

00:18:56,190 --> 00:19:01,200
does a bunch of different things but

00:18:58,740 --> 00:19:02,429
I've used hockey app before for the for

00:19:01,200 --> 00:19:05,570
the error reporting and I've rolled

00:19:02,429 --> 00:19:08,130
hockey apps functionality into App

00:19:05,570 --> 00:19:10,289
Center so absent as probably wants to

00:19:08,130 --> 00:19:12,710
look at as well so the main reason I

00:19:10,289 --> 00:19:15,240
jump from xamarin to react native was

00:19:12,710 --> 00:19:18,030
you know the speed and the iteration the

00:19:15,240 --> 00:19:19,350
iteration speed of react native so sort

00:19:18,030 --> 00:19:21,450
of end of last year beginning of this

00:19:19,350 --> 00:19:24,120
year xamarin started getting support for

00:19:21,450 --> 00:19:26,850
like a live reload type stuff but for

00:19:24,120 --> 00:19:28,980
you know non complex apps and it wasn't

00:19:26,850 --> 00:19:31,409
really reloading them the whole app it

00:19:28,980 --> 00:19:32,460
was just reloading a UI layer so they

00:19:31,409 --> 00:19:34,350
knew that it was important and they

00:19:32,460 --> 00:19:37,049
probably worked on it quite a lot for

00:19:34,350 --> 00:19:39,390
now but the speed of getting to ios and

00:19:37,049 --> 00:19:40,919
android when you're sketching out lots

00:19:39,390 --> 00:19:42,360
of views like if you've got an app than

00:19:40,919 --> 00:19:45,690
you immediately over the next two weeks

00:19:42,360 --> 00:19:47,850
have to write ten screens like the the

00:19:45,690 --> 00:19:51,390
speed of iteration of react native was

00:19:47,850 --> 00:19:53,970
was really really compelling zamora and

00:19:51,390 --> 00:19:57,280
i'd still pick to choose over

00:19:53,970 --> 00:19:58,720
I'd still choose xamarin if you if you

00:19:57,280 --> 00:20:01,630
were working on some of the sort of

00:19:58,720 --> 00:20:05,650
further reaches of the API the native

00:20:01,630 --> 00:20:07,090
platforms and you kind of wanted you

00:20:05,650 --> 00:20:09,580
know first level access to those

00:20:07,090 --> 00:20:12,430
specific api's right now from you api's

00:20:09,580 --> 00:20:15,190
come over so come out so a good example

00:20:12,430 --> 00:20:18,670
is the react native textbox will not yet

00:20:15,190 --> 00:20:21,340
or does not yet support the iOS 12

00:20:18,670 --> 00:20:24,220
feature of getting an OTP code at Xcode

00:20:21,340 --> 00:20:27,370
like the guy was talking about and and

00:20:24,220 --> 00:20:29,590
one click put that that OTP code into

00:20:27,370 --> 00:20:32,680
the text box that you that you that you

00:20:29,590 --> 00:20:34,030
are trying to login to so we have to

00:20:32,680 --> 00:20:35,980
kind of wait now a month for the next

00:20:34,030 --> 00:20:37,900
react native version if it's in the next

00:20:35,980 --> 00:20:39,640
next version so you've got this this

00:20:37,900 --> 00:20:41,230
layer that you have to wait to catch up

00:20:39,640 --> 00:20:43,720
right so if you can want to get rid of

00:20:41,230 --> 00:20:45,190
that then then xamarin might be a better

00:20:43,720 --> 00:20:47,200
option and it's still a compelling

00:20:45,190 --> 00:20:49,810
product but yeah for you know that

00:20:47,200 --> 00:20:51,070
that's kind of an edge use case in terms

00:20:49,810 --> 00:20:52,930
of a microsoft think it's really

00:20:51,070 --> 00:20:55,660
interesting so I left Microsoft and then

00:20:52,930 --> 00:20:58,180
soon at where I am now we're going to go

00:20:55,660 --> 00:21:01,180
typescript we already use that Center we

00:20:58,180 --> 00:21:02,980
already use vs code so the new Microsoft

00:21:01,180 --> 00:21:05,950
2.0 is kind of popping up in all sorts

00:21:02,980 --> 00:21:07,330
of places and yeah if you use the best

00:21:05,950 --> 00:21:09,010
tool for the job you'll end up using

00:21:07,330 --> 00:21:11,080
Microsoft stuff which is cool and that's

00:21:09,010 --> 00:21:13,210
all I had so thanks very much and you

00:21:11,080 --> 00:21:19,660
can tweet me on

00:21:13,210 --> 00:21:19,660

YouTube URL: https://www.youtube.com/watch?v=lfPGU837dF8


