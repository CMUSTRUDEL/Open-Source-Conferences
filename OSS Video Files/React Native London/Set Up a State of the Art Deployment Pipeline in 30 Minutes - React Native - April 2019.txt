Title: Set Up a State of the Art Deployment Pipeline in 30 Minutes - React Native - April 2019
Publication date: 2019-05-12
Playlist: React Native London
Description: 
	Presented by Felix Mézière from @theodo_uk

In this talk we will create a production-ready deployment pipeline for your React Native app. We will see how to use Fastlane and CircleCi to build your app and deploy it straight to the App Stores, CodePush and AppCenter. We will also cover how to effectively separate the different environments for your app.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:04,319
the native release pipeline of your

00:00:02,070 --> 00:00:06,660
dream so I'm gonna tell you about sort

00:00:04,319 --> 00:00:10,380
of two years journey that we had a

00:00:06,660 --> 00:00:12,480
theater figuring out what's the best way

00:00:10,380 --> 00:00:14,670
of deploying native apps so it's

00:00:12,480 --> 00:00:16,560
typically a topic where some of you will

00:00:14,670 --> 00:00:19,050
know way more than me and will find that

00:00:16,560 --> 00:00:20,730
this is actually trivial and some others

00:00:19,050 --> 00:00:24,449
will not even know that it's possible to

00:00:20,730 --> 00:00:27,029
do it so yeah it's like something that

00:00:24,449 --> 00:00:30,810
might interest people differently so we

00:00:27,029 --> 00:00:32,850
are Theo doe we build web and mobile

00:00:30,810 --> 00:00:35,880
apps for clients which are either small

00:00:32,850 --> 00:00:38,760
startups or very big companies and

00:00:35,880 --> 00:00:42,390
basically we try to either build MVPs

00:00:38,760 --> 00:00:44,059
with them or upscale their teams and so

00:00:42,390 --> 00:00:48,390
what's the pipeline of my dreams

00:00:44,059 --> 00:00:51,030
so it's C I set up that builds test and

00:00:48,390 --> 00:00:53,760
deploy is for me without me having to do

00:00:51,030 --> 00:00:55,920
anything so on get push or get whatever

00:00:53,760 --> 00:00:59,250
and also hand push from me

00:00:55,920 --> 00:01:00,780
so basically there is no manual steps it

00:00:59,250 --> 00:01:02,879
doesn't need me to handle code signing

00:01:00,780 --> 00:01:05,100
in any way even when there is like a

00:01:02,879 --> 00:01:07,920
certificate update or whatever I do not

00:01:05,100 --> 00:01:09,299
have to reapplied something to the CI

00:01:07,920 --> 00:01:12,630
server or distribute it to the

00:01:09,299 --> 00:01:14,610
developers it uses the same tools

00:01:12,630 --> 00:01:16,500
locally and on the CI server that's

00:01:14,610 --> 00:01:19,950
quite an important one so I want to be

00:01:16,500 --> 00:01:21,689
able to debug and set up my CI most of

00:01:19,950 --> 00:01:23,729
the tools of my CI locally so that I can

00:01:21,689 --> 00:01:25,380
iterate quickly and then deploy it to

00:01:23,729 --> 00:01:27,000
the CI instead of having completely

00:01:25,380 --> 00:01:30,780
different scripts that run on one and

00:01:27,000 --> 00:01:32,610
the other it allows me to share secret

00:01:30,780 --> 00:01:36,020
files and keys easily and securely

00:01:32,610 --> 00:01:40,380
within the team without having to like

00:01:36,020 --> 00:01:42,210
whatever it's fast so indeed obviously

00:01:40,380 --> 00:01:45,360
it caches dependencies so when I do

00:01:42,210 --> 00:01:48,119
several yarn install in a row it reuses

00:01:45,360 --> 00:01:49,680
the pure yarn install to build quickly

00:01:48,119 --> 00:01:53,430
so that I don't have to wait 20 minutes

00:01:49,680 --> 00:01:54,659
for my branch to pass and more

00:01:53,430 --> 00:01:56,939
importantly so this is the more

00:01:54,659 --> 00:01:58,740
important point it handles all the

00:01:56,939 --> 00:02:01,740
environment specific moving parts

00:01:58,740 --> 00:02:04,320
automatically to remove as much as

00:02:01,740 --> 00:02:07,229
possible human errors so like setting

00:02:04,320 --> 00:02:09,179
the correct version of the setting the

00:02:07,229 --> 00:02:11,009
correct app name per environment the

00:02:09,179 --> 00:02:13,420
Gregg firebase key to correct

00:02:11,009 --> 00:02:16,160
sentry whatever

00:02:13,420 --> 00:02:18,800
making sure like human errors making

00:02:16,160 --> 00:02:20,660
sure that I'm not deploying the wrong

00:02:18,800 --> 00:02:22,940
branch to production or the wrong

00:02:20,660 --> 00:02:24,650
version of the code etc etc so it's like

00:02:22,940 --> 00:02:28,880
I do get push and I stop thinking I move

00:02:24,650 --> 00:02:33,140
on to the next ticket so just out of

00:02:28,880 --> 00:02:40,250
curiosity in the audience this indirect

00:02:33,140 --> 00:02:44,840
Nietzsche Bob okay so there might be

00:02:40,250 --> 00:02:46,670
some insights in here for you so just a

00:02:44,840 --> 00:02:48,560
very quick walk through web Center

00:02:46,670 --> 00:02:51,080
before I start digging into things I

00:02:48,560 --> 00:02:52,670
just want you to understand that when I

00:02:51,080 --> 00:02:55,250
talk about App Center there is really

00:02:52,670 --> 00:02:56,420
different parts of it and I find per se

00:02:55,250 --> 00:02:59,650
that some of them are very very useful

00:02:56,420 --> 00:03:02,120
and some of them are not that good so

00:02:59,650 --> 00:03:06,020
let's dig in this is going to one up and

00:03:02,120 --> 00:03:11,810
see so App Center mainly has the builds

00:03:06,020 --> 00:03:15,739
feature which is a CI server similar to

00:03:11,810 --> 00:03:17,360
secrecy I for example test advanced

00:03:15,739 --> 00:03:19,580
people do this I don't know how it works

00:03:17,360 --> 00:03:22,580
but it's like testing on devices and

00:03:19,580 --> 00:03:25,970
then it has the distribute feature which

00:03:22,580 --> 00:03:27,730
is whatever the way you built before so

00:03:25,970 --> 00:03:31,430
it could have been upset to build or

00:03:27,730 --> 00:03:34,130
Saku CI or whatever once the build is

00:03:31,430 --> 00:03:36,470
done you put your app somewhere to be

00:03:34,130 --> 00:03:37,850
able to download it and so you can

00:03:36,470 --> 00:03:41,150
perfectly build with secure CI or

00:03:37,850 --> 00:03:44,570
locally and then upload your IPA on the

00:03:41,150 --> 00:03:46,130
distribute here so in my view absent or

00:03:44,570 --> 00:03:48,530
distribute is great while App Center

00:03:46,130 --> 00:03:50,000
builds is not great so this talk is not

00:03:48,530 --> 00:03:51,410
about saying App Center is wrong it's

00:03:50,000 --> 00:03:52,459
about saying some features of it are

00:03:51,410 --> 00:03:54,950
useful some of them are not

00:03:52,459 --> 00:03:56,330
state-of-the-art yet so distributors

00:03:54,950 --> 00:04:00,610
Wescott push which is obviously super

00:03:56,330 --> 00:04:02,900
useful I mean maybe not that abuse but

00:04:00,610 --> 00:04:04,910
for example it has same weight as

00:04:02,900 --> 00:04:11,060
Diagnostics which is like century but

00:04:04,910 --> 00:04:12,980
less good push it has analytics which is

00:04:11,060 --> 00:04:17,690
like firebase but less good so I don't

00:04:12,980 --> 00:04:20,479
use it cool so that's about App Center

00:04:17,690 --> 00:04:23,150
so now let's dig into the journey so two

00:04:20,479 --> 00:04:25,700
years and a half ago we started three

00:04:23,150 --> 00:04:29,480
years ago actually we started doing

00:04:25,700 --> 00:04:31,760
mobile development and this is how we

00:04:29,480 --> 00:04:33,470
built apps at the time so first of all

00:04:31,760 --> 00:04:36,020
you have two completely different builds

00:04:33,470 --> 00:04:39,140
process meaning you have twice the time

00:04:36,020 --> 00:04:43,070
to spend doing things and twice as many

00:04:39,140 --> 00:04:44,270
chances to do mistakes and so then one

00:04:43,070 --> 00:04:44,930
happens you have to set the create

00:04:44,270 --> 00:04:47,390
environment

00:04:44,930 --> 00:04:49,700
constants per environment so I'm doing

00:04:47,390 --> 00:04:52,060
staging it's some constants and products

00:04:49,700 --> 00:04:56,360
other constants I have to set the

00:04:52,060 --> 00:04:58,850
version number etc manually then you

00:04:56,360 --> 00:05:00,920
have to manually code sign maybe get the

00:04:58,850 --> 00:05:03,740
private key from your mate that created

00:05:00,920 --> 00:05:05,480
the profiles two weeks before so a can

00:05:03,740 --> 00:05:07,700
you send me through your USB whatever

00:05:05,480 --> 00:05:10,370
the key is etc oh it's not the right one

00:05:07,700 --> 00:05:13,130
or whatever build and so if you did

00:05:10,370 --> 00:05:14,510
something wrong before you discover it

00:05:13,130 --> 00:05:16,100
only after the build you have to rego

00:05:14,510 --> 00:05:18,190
through this whole process anyway and

00:05:16,100 --> 00:05:20,900
once you're done with all that

00:05:18,190 --> 00:05:23,240
here you can finally upload your IPA to

00:05:20,900 --> 00:05:26,930
either App Center as I said before

00:05:23,240 --> 00:05:29,090
distribute or test flight whatever and

00:05:26,930 --> 00:05:30,440
so you have to do this twice so imagine

00:05:29,090 --> 00:05:34,010
if you have to do this for every ticket

00:05:30,440 --> 00:05:35,960
you spend you lose like half an hour to

00:05:34,010 --> 00:05:37,130
an hour per ticket per task that you're

00:05:35,960 --> 00:05:40,130
doing

00:05:37,130 --> 00:05:41,930
in addition so you don't have something

00:05:40,130 --> 00:05:43,580
that triggers tests automatically you

00:05:41,930 --> 00:05:47,690
don't have a key top hook to know if you

00:05:43,580 --> 00:05:49,760
branch etc etc so it's a huge loss of

00:05:47,690 --> 00:05:51,620
time I think I mean I don't have to make

00:05:49,760 --> 00:05:55,250
a case for CI I hope everyone is quite

00:05:51,620 --> 00:05:57,080
convinced that let's see is needed and

00:05:55,250 --> 00:05:59,230
for me the biggest problem in this is

00:05:57,080 --> 00:06:02,090
that there is a huge work surface

00:05:59,230 --> 00:06:03,980
there's a huge amount of things that can

00:06:02,090 --> 00:06:06,760
go wrong in the process and so day to

00:06:03,980 --> 00:06:10,400
day things will go wrong

00:06:06,760 --> 00:06:12,110
so this is what we moved to like two

00:06:10,400 --> 00:06:15,380
years ago so six months after starting

00:06:12,110 --> 00:06:18,140
in this version so we do manual

00:06:15,380 --> 00:06:20,689
deployment with Fastlane still no CI but

00:06:18,140 --> 00:06:23,659
this time we

00:06:20,689 --> 00:06:26,330
moved most of the book surface meaning

00:06:23,659 --> 00:06:28,099
that after you manually trigger the

00:06:26,330 --> 00:06:30,499
build which is by the way for ios and

00:06:28,099 --> 00:06:32,569
android at the same time so let's stuff

00:06:30,499 --> 00:06:36,709
to do all that steps

00:06:32,569 --> 00:06:38,119
chain correctly automatically and there

00:06:36,709 --> 00:06:39,709
is basically one command that decides

00:06:38,119 --> 00:06:41,119
everything about the environment so you

00:06:39,709 --> 00:06:45,019
don't need to manually put all the keys

00:06:41,119 --> 00:06:47,599
etc so you still have the problem of not

00:06:45,019 --> 00:06:49,699
being able to have a get up who can

00:06:47,599 --> 00:06:51,469
trigger the test automatically there is

00:06:49,699 --> 00:06:53,989
some upfront costs but which is

00:06:51,469 --> 00:06:56,809
definitely worth it so i chose to set up

00:06:53,989 --> 00:06:58,849
all of this and so yeah you have one

00:06:56,809 --> 00:07:00,800
build process and reduce the time lost

00:06:58,849 --> 00:07:02,959
but this still requires manual actions

00:07:00,800 --> 00:07:05,149
and you have to set it up on every dev

00:07:02,959 --> 00:07:11,149
machine so every Devon it's fascinating

00:07:05,149 --> 00:07:13,159
to be set up we can have some bugs so

00:07:11,149 --> 00:07:15,139
what happened just after this is in

00:07:13,159 --> 00:07:16,939
April two years ago we went to react

00:07:15,139 --> 00:07:20,089
times to them and we saw an amazing talk

00:07:16,939 --> 00:07:23,329
from a guy from Microsoft presenting us

00:07:20,089 --> 00:07:24,919
App Center so App Center it's like the

00:07:23,329 --> 00:07:26,929
dream platform that does everything for

00:07:24,919 --> 00:07:29,989
you crash reporting testing building

00:07:26,929 --> 00:07:32,329
below etc ok let's dive into this let's

00:07:29,989 --> 00:07:35,289
let's go and use it for everything

00:07:32,329 --> 00:07:37,759
so we basically went straight to it and

00:07:35,289 --> 00:07:40,749
scrapped everything we had to just use

00:07:37,759 --> 00:07:40,749
App Center for everything

00:07:40,910 --> 00:07:44,160
[Music]

00:07:44,179 --> 00:07:48,709
so what are the benefits what happened

00:07:46,309 --> 00:07:50,239
once we started using App Center builds

00:07:48,709 --> 00:07:53,059
so App Center bills is what I show you

00:07:50,239 --> 00:07:54,349
before here is the CI part of it that

00:07:53,059 --> 00:07:59,779
can release automatically to the

00:07:54,349 --> 00:08:01,699
distribute part what happened so from

00:07:59,779 --> 00:08:03,860
from from then everything became

00:08:01,699 --> 00:08:06,679
automated so App Center picks your bills

00:08:03,860 --> 00:08:08,899
on push does all the steps automatically

00:08:06,679 --> 00:08:12,979
through a few scripts that can customize

00:08:08,899 --> 00:08:15,110
it and you get your apk uploaded so

00:08:12,979 --> 00:08:18,199
great you have all the steps automated

00:08:15,110 --> 00:08:21,319
but there are really big problems that

00:08:18,199 --> 00:08:23,479
we realized after working for a year

00:08:21,319 --> 00:08:25,219
with it so as we went we were more and

00:08:23,479 --> 00:08:26,610
more and more annoyed day-to-day in our

00:08:25,219 --> 00:08:28,439
projects

00:08:26,610 --> 00:08:31,500
I'm gonna I'm going to walk you quickly

00:08:28,439 --> 00:08:33,360
through it I think this is the type of

00:08:31,500 --> 00:08:36,360
thing lots of people use App Center and

00:08:33,360 --> 00:08:38,729
maybe don't realize that they could save

00:08:36,360 --> 00:08:41,039
time on all these problems so first of

00:08:38,729 --> 00:08:44,640
all now that you use App Center you

00:08:41,039 --> 00:08:47,430
don't use Fastlane anymore so it means

00:08:44,640 --> 00:08:49,440
that you're you know don't have a way to

00:08:47,430 --> 00:08:52,230
build locally properly so if you want a

00:08:49,440 --> 00:08:54,360
debug create new deployment features or

00:08:52,230 --> 00:08:56,240
whatever you just can't reproduce what

00:08:54,360 --> 00:08:58,620
your CI server does you can't build

00:08:56,240 --> 00:09:00,000
without doing the manual process that's

00:08:58,620 --> 00:09:02,910
one one first thing that's really

00:09:00,000 --> 00:09:05,610
annoying then so your tooling is

00:09:02,910 --> 00:09:07,290
different one big big problem with app

00:09:05,610 --> 00:09:10,230
centers that the dependencies are not

00:09:07,290 --> 00:09:11,940
cached which is like for four minutes to

00:09:10,230 --> 00:09:15,779
each of your builds compared to a proper

00:09:11,940 --> 00:09:17,670
CI server so what happens during those

00:09:15,779 --> 00:09:19,620
four minutes you start being distracted

00:09:17,670 --> 00:09:22,440
with something and you can start the

00:09:19,620 --> 00:09:24,810
next task and whatever and then you just

00:09:22,440 --> 00:09:26,190
lost 15 minutes and then you know like

00:09:24,810 --> 00:09:28,019
if your branch passes in one minute

00:09:26,190 --> 00:09:30,660
you're like okay cool next next task

00:09:28,019 --> 00:09:34,140
let's move on it's like friction in the

00:09:30,660 --> 00:09:38,459
development process there is no way to

00:09:34,140 --> 00:09:41,730
skip build so imagine so for example a

00:09:38,459 --> 00:09:43,500
workflow in a workflow when a branch is

00:09:41,730 --> 00:09:47,550
not master of production which is

00:09:43,500 --> 00:09:51,930
supposed to get deployed as a to the end

00:09:47,550 --> 00:09:54,269
customer or two or four tests we we just

00:09:51,930 --> 00:09:55,500
skip the build after the test pass so

00:09:54,269 --> 00:09:57,630
that the branch can pass in one minute

00:09:55,500 --> 00:09:59,550
and you can have a green tick on github

00:09:57,630 --> 00:10:02,040
while in App Center is not possible to

00:09:59,550 --> 00:10:03,570
skip the build I think I saw people do

00:10:02,040 --> 00:10:06,089
it with an API call where they basically

00:10:03,570 --> 00:10:07,649
call they their own App Center machine

00:10:06,089 --> 00:10:10,070
and cancel it they do something weird

00:10:07,649 --> 00:10:14,459
like that I mean that's not great

00:10:10,070 --> 00:10:16,110
so to move on you need to upload

00:10:14,459 --> 00:10:18,120
manually code signing whenever it

00:10:16,110 --> 00:10:20,250
changes so imagine you add the people to

00:10:18,120 --> 00:10:21,360
your test app you had a new tester okay

00:10:20,250 --> 00:10:23,240
you have to redownload the profile

00:10:21,360 --> 00:10:26,760
re-upload it otherwise it won't work

00:10:23,240 --> 00:10:28,410
which is a more friction the scripts are

00:10:26,760 --> 00:10:30,839
quite annoying to write because they are

00:10:28,410 --> 00:10:34,470
shell scripts and they are in like three

00:10:30,839 --> 00:10:36,360
different places I mean compared to

00:10:34,470 --> 00:10:39,959
configure Tiamo of secrecy area

00:10:36,360 --> 00:10:42,060
config files OCS systems it's really not

00:10:39,959 --> 00:10:44,430
great it's quite cumbersome and the

00:10:42,060 --> 00:10:45,959
worst is that you cannot SSH into the

00:10:44,430 --> 00:10:48,329
web Center machines so you write your

00:10:45,959 --> 00:10:50,490
script you upload it and then you're

00:10:48,329 --> 00:10:52,589
okay is it gonna work you wait for 10

00:10:50,490 --> 00:10:54,329
minutes oh it fells ok this weird shell

00:10:52,589 --> 00:10:55,890
syntax they didn't get right because I

00:10:54,329 --> 00:10:57,750
never write shell ok I'm going to try

00:10:55,890 --> 00:10:59,370
again boom and plot again and like you

00:10:57,750 --> 00:11:01,529
spend hours and hours trying to do this

00:10:59,370 --> 00:11:03,149
thing the prime with App Center is that

00:11:01,529 --> 00:11:05,760
they don't let you run the steps you

00:11:03,149 --> 00:11:07,829
want they force you into some steps so

00:11:05,760 --> 00:11:09,329
the test step the build step etc will be

00:11:07,829 --> 00:11:12,630
done their way they don't let you

00:11:09,329 --> 00:11:15,899
customize it as much as you want it's

00:11:12,630 --> 00:11:18,390
slow as I get up crook and it has some

00:11:15,899 --> 00:11:20,519
random fails as well so it's like for us

00:11:18,390 --> 00:11:23,100
that made that we used it for like four

00:11:20,519 --> 00:11:25,230
or five months since every branch needed

00:11:23,100 --> 00:11:26,790
15 to 20 minute to pass we were just

00:11:25,230 --> 00:11:30,209
ignoring the get up hook so it was

00:11:26,790 --> 00:11:33,240
useless so this is everywhere so it's a

00:11:30,209 --> 00:11:36,329
cumbersome setup hard to debug slow and

00:11:33,240 --> 00:11:40,649
hard to customize and so this is the

00:11:36,329 --> 00:11:42,360
final setup that we have now is a

00:11:40,649 --> 00:11:44,070
combination of deployments of

00:11:42,360 --> 00:11:46,920
deployments a combination of fast lane

00:11:44,070 --> 00:11:48,660
and secrecy so first of all the fast

00:11:46,920 --> 00:11:50,130
lane working locally like before we even

00:11:48,660 --> 00:11:52,079
integrated code pushing it so we

00:11:50,130 --> 00:11:54,810
literally like have one command which is

00:11:52,079 --> 00:11:58,860
yarn deploy which does everything for us

00:11:54,810 --> 00:12:01,680
and then what's nice is that since this

00:11:58,860 --> 00:12:04,500
is a sort of black box you can just take

00:12:01,680 --> 00:12:07,199
it and put it in your circle see I build

00:12:04,500 --> 00:12:09,510
script an app Center doesn't let you use

00:12:07,199 --> 00:12:11,339
Fastlane for that and you can stop

00:12:09,510 --> 00:12:12,899
thinking about this so now in secrecy I

00:12:11,339 --> 00:12:15,000
only thing you have to configure its

00:12:12,899 --> 00:12:16,680
what comes before which is just

00:12:15,000 --> 00:12:18,990
installing dependencies quite quite easy

00:12:16,680 --> 00:12:21,390
so you fix everything here you make it

00:12:18,990 --> 00:12:23,160
work and then you just have to fix this

00:12:21,390 --> 00:12:26,040
before and you have your security icon

00:12:23,160 --> 00:12:29,070
victim so also the dependencies in

00:12:26,040 --> 00:12:30,810
circle are cached so it's super fast you

00:12:29,070 --> 00:12:32,730
can SSH in I mean it's circle everyone

00:12:30,810 --> 00:12:34,730
knows it it's like super powerful other

00:12:32,730 --> 00:12:35,940
web developers use it it's a proper

00:12:34,730 --> 00:12:40,769
purpose-built

00:12:35,940 --> 00:12:42,630
CI server so if you don't want if you

00:12:40,769 --> 00:12:44,290
want to stop a bill you just don't write

00:12:42,630 --> 00:12:48,610
the steps and that's it

00:12:44,290 --> 00:12:50,889
with with App Center so it's fast it has

00:12:48,610 --> 00:12:52,990
the least bug surface it's super easy to

00:12:50,889 --> 00:12:57,370
set up with config dot Jamal and SSH in

00:12:52,990 --> 00:13:00,220
and it's easy to debug so now I'm gonna

00:12:57,370 --> 00:13:02,230
zoom in in a few of these aspects

00:13:00,220 --> 00:13:05,560
quickly to show you what I mean but by

00:13:02,230 --> 00:13:07,019
for example a management etc we're

00:13:05,560 --> 00:13:11,709
showing you some code and some features

00:13:07,019 --> 00:13:13,269
so inverted management what is this what

00:13:11,709 --> 00:13:18,190
does an environment management config

00:13:13,269 --> 00:13:20,290
look like in Fastlane so here is a test

00:13:18,190 --> 00:13:22,839
project with an empty reg native app

00:13:20,290 --> 00:13:25,480
that I created the other day and so you

00:13:22,839 --> 00:13:27,910
see here in your folder you have this

00:13:25,480 --> 00:13:29,410
dot M file which has like the version or

00:13:27,910 --> 00:13:30,940
whatever you never have to open Xcode

00:13:29,410 --> 00:13:33,430
nor Android studio when you use this

00:13:30,940 --> 00:13:34,720
like all configure in here you commit

00:13:33,430 --> 00:13:37,899
the version number your rat or whatever

00:13:34,720 --> 00:13:40,360
and then this is a conflict that has

00:13:37,899 --> 00:13:41,889
been created once and shared across all

00:13:40,360 --> 00:13:44,560
the developers and so you see I you can

00:13:41,889 --> 00:13:46,690
see actually it's just one more computer

00:13:44,560 --> 00:13:49,449
that runs this and it has all the

00:13:46,690 --> 00:13:54,370
constants so here you can see all the

00:13:49,449 --> 00:13:58,750
stuff like iOS certificates much repo

00:13:54,370 --> 00:14:00,310
App Center Gradle stuff kissed or iOS

00:13:58,750 --> 00:14:04,630
Cut Pro deployment name but you will

00:14:00,310 --> 00:14:06,699
also have like firebase sentry I don't

00:14:04,630 --> 00:14:10,899
remember everything that we have so many

00:14:06,699 --> 00:14:12,310
services in here you also so you have

00:14:10,899 --> 00:14:15,029
also secret keys that are not going to

00:14:12,310 --> 00:14:18,639
show you this is what it looks like

00:14:15,029 --> 00:14:20,560
anyway what else do you have so here we

00:14:18,639 --> 00:14:23,319
also have like an archive which is

00:14:20,560 --> 00:14:26,709
encrypted and contains secret files and

00:14:23,319 --> 00:14:29,050
so with the script you can unpack this

00:14:26,709 --> 00:14:31,209
archive on the CI server and just use

00:14:29,050 --> 00:14:32,800
everything that's in there there is

00:14:31,209 --> 00:14:34,870
actually even better tools now like

00:14:32,800 --> 00:14:37,449
transcript anyway let you dig into it so

00:14:34,870 --> 00:14:38,980
this setup you have to spend the time to

00:14:37,449 --> 00:14:41,110
do it at the beginning but once it's

00:14:38,980 --> 00:14:43,360
there you never have to worry about all

00:14:41,110 --> 00:14:45,759
these things and the syntax I think you

00:14:43,360 --> 00:14:46,720
can agree is much simpler and nicer than

00:14:45,759 --> 00:14:50,439
some

00:14:46,720 --> 00:14:52,810
absent ur script like Fastlane a fast

00:14:50,439 --> 00:14:54,790
file which is like what is run by

00:14:52,810 --> 00:14:56,439
Fastlane is a ruby script and there is

00:14:54,790 --> 00:14:58,240
lots of examples of it and I don't know

00:14:56,439 --> 00:15:00,430
I'm not a repeat developers but I still

00:14:58,240 --> 00:15:04,300
find it easier to write Ruby than than

00:15:00,430 --> 00:15:05,740
shell so this event management automatic

00:15:04,300 --> 00:15:08,290
and shared code signing so most of you

00:15:05,740 --> 00:15:09,579
probably know this already it's so iOS

00:15:08,290 --> 00:15:11,199
code signing is a complete pain we all

00:15:09,579 --> 00:15:15,100
agree on that I don't have to ask the

00:15:11,199 --> 00:15:16,930
question but people have come up with a

00:15:15,100 --> 00:15:19,300
very smart way of sharing certificates

00:15:16,930 --> 00:15:23,470
and profiles and this is like the state

00:15:19,300 --> 00:15:27,850
of the art fast lane has a tool called

00:15:23,470 --> 00:15:30,009
much code signing guide their principle

00:15:27,850 --> 00:15:31,689
is basically there is a git repo that

00:15:30,009 --> 00:15:34,839
contains all the certificates and

00:15:31,689 --> 00:15:36,579
profiles and developers or secrecy I can

00:15:34,839 --> 00:15:38,589
all get those certificates and profiles

00:15:36,579 --> 00:15:40,569
from the git repo they just don't load

00:15:38,589 --> 00:15:43,810
it unload them on their local machine

00:15:40,569 --> 00:15:46,029
and install them and whenever basically

00:15:43,810 --> 00:15:48,399
a thing uses web scrapping to scrap the

00:15:46,029 --> 00:15:49,990
Apple developer portal whenever you need

00:15:48,399 --> 00:15:51,550
to change something you run a command

00:15:49,990 --> 00:15:53,649
and the tool goes in the developer

00:15:51,550 --> 00:15:55,449
portal clicks like create profile

00:15:53,649 --> 00:15:57,009
whatever as needed you don't have to

00:15:55,449 --> 00:15:59,680
tell them anything they know what to do

00:15:57,009 --> 00:16:01,240
and then commit to the match repo the

00:15:59,680 --> 00:16:03,069
new certificates and everyone gets them

00:16:01,240 --> 00:16:04,600
when needed so it's like you don't

00:16:03,069 --> 00:16:08,459
pronounce the word code signing in your

00:16:04,600 --> 00:16:11,920
team forever anymore which is great

00:16:08,459 --> 00:16:14,079
build speed and customization yes so I

00:16:11,920 --> 00:16:23,439
run so this is an empty react native app

00:16:14,079 --> 00:16:25,569
I sort of yeah I cheated yeah it's an

00:16:23,439 --> 00:16:27,519
empty reg native app meaning that the

00:16:25,569 --> 00:16:30,250
tests are super fast to run right but

00:16:27,519 --> 00:16:33,420
look this is a branch that doesn't

00:16:30,250 --> 00:16:36,759
deploy to ios and android it just runs

00:16:33,420 --> 00:16:40,809
basically builds the J's code and runs

00:16:36,759 --> 00:16:42,399
just it takes 36 seconds to pass on App

00:16:40,809 --> 00:16:43,809
Center it was taking at least four or

00:16:42,399 --> 00:16:44,649
five minutes just to install the

00:16:43,809 --> 00:16:47,949
dependencies

00:16:44,649 --> 00:16:51,970
before you can start testing like this

00:16:47,949 --> 00:16:54,960
and for another branch master which is

00:16:51,970 --> 00:16:57,360
supposed to deploy to Android and iOS

00:16:54,960 --> 00:17:00,300
this is what happens so it ran note for

00:16:57,360 --> 00:17:03,450
two minutes 26 because note cut pushes

00:17:00,300 --> 00:17:05,429
on this branch only on this branch once

00:17:03,450 --> 00:17:07,559
the tests have passed so two minutes

00:17:05,429 --> 00:17:09,689
instead of 30 seconds and then he built

00:17:07,559 --> 00:17:12,179
a OS as fast as he could so still seven

00:17:09,689 --> 00:17:14,790
minutes for an empty reg native app is

00:17:12,179 --> 00:17:17,040
really really long to do and Android

00:17:14,790 --> 00:17:19,740
like two minutes so basically with this

00:17:17,040 --> 00:17:21,990
deploy flow you push your branch two

00:17:19,740 --> 00:17:24,750
minutes 30 after you have your code

00:17:21,990 --> 00:17:28,079
deploy to your desktop or in production

00:17:24,750 --> 00:17:29,760
and like seven or two and two minutes

00:17:28,079 --> 00:17:33,870
later you have it either an app center

00:17:29,760 --> 00:17:35,520
or in your Play Store test flight etc so

00:17:33,870 --> 00:17:37,440
it's really a good performance let's dig

00:17:35,520 --> 00:17:39,240
in quickly into the steps so node what

00:17:37,440 --> 00:17:40,559
does it do you see like it's not like

00:17:39,240 --> 00:17:42,510
the App Center bill machine where you

00:17:40,559 --> 00:17:44,100
see all this text and when you refresh

00:17:42,510 --> 00:17:46,050
sometimes it's white and it's a is

00:17:44,100 --> 00:17:48,059
waiting for the build machine no it's

00:17:46,050 --> 00:17:49,800
like surco you have all the steps here

00:17:48,059 --> 00:17:51,900
they play with code push for example

00:17:49,800 --> 00:17:54,210
let's see how much time did the

00:17:51,900 --> 00:17:57,300
dependency takes yarn in stone zero

00:17:54,210 --> 00:17:59,240
seconds restoring the cash from yarn two

00:17:57,300 --> 00:18:02,660
seconds to history pendency whoo

00:17:59,240 --> 00:18:05,010
compared to four minutes app center yeah

00:18:02,660 --> 00:18:08,100
so it's great it's great it's great

00:18:05,010 --> 00:18:11,880
iOS for example set ribavirin yarn

00:18:08,100 --> 00:18:14,940
install yes restoring cache and then

00:18:11,880 --> 00:18:16,920
boom like six minutes build process it's

00:18:14,940 --> 00:18:19,559
all there if you want to debug it any

00:18:16,920 --> 00:18:20,940
time you go here rerun with SSH and then

00:18:19,559 --> 00:18:25,920
you can SSH into the Machine and

00:18:20,940 --> 00:18:28,170
understand what was what went wrong cool

00:18:25,920 --> 00:18:31,620
so we've dug into the most interesting

00:18:28,170 --> 00:18:35,190
stuff okay yeah so it's a chain same to

00:18:31,620 --> 00:18:37,020
locally I already explained so now what

00:18:35,190 --> 00:18:40,200
you're gonna say okay you gave us a

00:18:37,020 --> 00:18:42,300
super high-level overview what should I

00:18:40,200 --> 00:18:44,970
do now like investigate for one month or

00:18:42,300 --> 00:18:49,670
two I'm going to set up all of this well

00:18:44,970 --> 00:18:52,770
no so we are an agency meaning that we

00:18:49,670 --> 00:18:54,150
do a lot of projects and meaning that we

00:18:52,770 --> 00:18:56,360
don't wanna have to set this up for

00:18:54,150 --> 00:18:59,180
every different project that we do

00:18:56,360 --> 00:19:02,610
therefore we've made a generator

00:18:59,180 --> 00:19:05,250
which is open-source and allows you to

00:19:02,610 --> 00:19:07,530
set this up in like around one hour so

00:19:05,250 --> 00:19:09,030
in one hour you can create your

00:19:07,530 --> 00:19:10,320
production environment staging

00:19:09,030 --> 00:19:14,220
environments have them deploy to App

00:19:10,320 --> 00:19:16,290
Center that's etcetera plus have them on

00:19:14,220 --> 00:19:18,120
secrecy ISO if you prefer using bit rise

00:19:16,290 --> 00:19:20,130
or your own Jenkins that's not a problem

00:19:18,120 --> 00:19:21,210
but at least with the circle script you

00:19:20,130 --> 00:19:21,530
have an example of what it should look

00:19:21,210 --> 00:19:25,260
like

00:19:21,530 --> 00:19:28,740
it's all custom to your app etc we're

00:19:25,260 --> 00:19:31,050
gonna finish yellow it's fine and so

00:19:28,740 --> 00:19:32,520
it's open-source as a few stars so we've

00:19:31,050 --> 00:19:34,800
been developing this with our sister

00:19:32,520 --> 00:19:41,790
company which does only mobile inference

00:19:34,800 --> 00:19:43,740
for a while and what's nice is that it

00:19:41,790 --> 00:19:45,900
will ensure that you don't do any

00:19:43,740 --> 00:19:48,390
mistakes in the process and that you get

00:19:45,900 --> 00:19:52,830
state-of-the-art setup like it will

00:19:48,390 --> 00:19:55,350
always get updated so yeah they do get

00:19:52,830 --> 00:19:57,420
feedback but now you can ask me like

00:19:55,350 --> 00:20:00,300
okay but what if something goes wrong

00:19:57,420 --> 00:20:02,490
when I'm setting it up well we've also

00:20:00,300 --> 00:20:04,350
written a blog article which explains

00:20:02,490 --> 00:20:08,220
you how to go through all the steps of

00:20:04,350 --> 00:20:10,290
this generator and explains you what

00:20:08,220 --> 00:20:13,080
each of the values that should enter are

00:20:10,290 --> 00:20:16,080
so let's have a look at what it looks

00:20:13,080 --> 00:20:17,670
like quickly so the promise is under one

00:20:16,080 --> 00:20:19,560
hour I'd be very happy if some of you

00:20:17,670 --> 00:20:21,000
did it and didn't manage to do it under

00:20:19,560 --> 00:20:23,280
one hour to give me feedback about it

00:20:21,000 --> 00:20:24,930
the premise with this thing if one

00:20:23,280 --> 00:20:29,730
little step goes wrong suddenly you can

00:20:24,930 --> 00:20:32,460
lose two hours I'm really like not

00:20:29,730 --> 00:20:34,290
suppose I'm confident but I think it's

00:20:32,460 --> 00:20:36,780
possible I know people who have done it

00:20:34,290 --> 00:20:39,420
under one hour so you have the steps

00:20:36,780 --> 00:20:41,370
here and then it explains you so see

00:20:39,420 --> 00:20:45,150
like they ask you for this this is here

00:20:41,370 --> 00:20:47,460
if Center it's really a step by step

00:20:45,150 --> 00:20:48,900
modus operandi so it doesn't explain you

00:20:47,460 --> 00:20:51,210
why you're doing everything that you're

00:20:48,900 --> 00:20:53,700
doing but it's the promise is that at

00:20:51,210 --> 00:20:55,800
the end of running it you will have a

00:20:53,700 --> 00:20:57,390
working set up and then you can spend

00:20:55,800 --> 00:21:00,990
the following weeks understanding how it

00:20:57,390 --> 00:21:03,450
works etc etc so here this thing for

00:21:00,990 --> 00:21:05,880
example creates certificates here sets

00:21:03,450 --> 00:21:09,150
of code before you

00:21:05,880 --> 00:21:10,679
and that's it so and at the end there's

00:21:09,150 --> 00:21:14,309
also tsukushi a generator that just

00:21:10,679 --> 00:21:15,690
creates the the script for you and if

00:21:14,309 --> 00:21:17,429
there is some parts that you don't

00:21:15,690 --> 00:21:20,160
understand and you really want to dig

00:21:17,429 --> 00:21:22,440
into you can always google them of

00:21:20,160 --> 00:21:25,860
course or have a look at this other repo

00:21:22,440 --> 00:21:28,980
where I put some common Docs it's still

00:21:25,860 --> 00:21:30,419
a bit internal so it's not sometimes

00:21:28,980 --> 00:21:33,210
like it talks about the client or

00:21:30,419 --> 00:21:36,750
whatever but it explains like the nitty

00:21:33,210 --> 00:21:38,159
gritty typically for deployment it's

00:21:36,750 --> 00:21:39,539
great to have a look at this and

00:21:38,159 --> 00:21:45,090
understand how fast lane and code

00:21:39,539 --> 00:21:47,340
signing actually work so please try this

00:21:45,090 --> 00:21:49,470
at home and give us feedback to be very

00:21:47,340 --> 00:21:51,720
very useful because I'm sure we can

00:21:49,470 --> 00:21:54,289
improve ten thousand things even though

00:21:51,720 --> 00:21:54,289
it's state-of-the-art

00:21:55,790 --> 00:22:00,800

YouTube URL: https://www.youtube.com/watch?v=s-uSZlFmi9U


