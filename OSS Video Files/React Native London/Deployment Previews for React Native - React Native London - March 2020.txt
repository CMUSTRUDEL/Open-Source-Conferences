Title: Deployment Previews for React Native - React Native London - March 2020
Publication date: 2020-03-30
Playlist: React Native London
Description: 
	Building a web-like workflow for React Native - by Kamile and Hentie

Modern web development is spoilt for tools when it comes to deployment, with easy automated testing and deployment previews giving you fast feedback on your changes in isolation. At Kantan we had a look at how we can get some of the same benefits in a React Native pipeline.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:03,689
hey everyone thanks for joining this

00:00:02,040 --> 00:00:05,759
would be a quick look at deployment

00:00:03,689 --> 00:00:08,040
pipeline we built at Canton and how we

00:00:05,759 --> 00:00:12,269
implemented previews for deployment

00:00:08,040 --> 00:00:13,830
previews for react native so just to

00:00:12,269 --> 00:00:19,380
introduce myself I'm Henty I'm a

00:00:13,830 --> 00:00:23,100
software engineer at Canton and I'm an

00:00:19,380 --> 00:00:25,590
architect developer okay so a little bit

00:00:23,100 --> 00:00:28,050
about theater so we're a startup that

00:00:25,590 --> 00:00:30,240
helps other startups build digital

00:00:28,050 --> 00:00:32,369
products and we worked with can turn for

00:00:30,240 --> 00:00:34,320
the initial MVP phase to build their app

00:00:32,369 --> 00:00:37,040
and also laid the foundations for the

00:00:34,320 --> 00:00:41,160
current phase that they're working on

00:00:37,040 --> 00:00:42,989
and what Canton are doing what we are

00:00:41,160 --> 00:00:45,590
doing as a company to be helping trades

00:00:42,989 --> 00:00:48,090
professionals work smarter that's the

00:00:45,590 --> 00:00:48,989
the tagline that's our mission of what

00:00:48,090 --> 00:00:50,789
we're trying to do and the way we're

00:00:48,989 --> 00:00:53,699
doing this is through building an app

00:00:50,789 --> 00:00:56,879
and this is an app for gas engineers and

00:00:53,699 --> 00:01:00,469
electricians and plumbers ants and that

00:00:56,879 --> 00:01:02,250
sort of thing for to tell them to

00:01:00,469 --> 00:01:03,989
automate some of the tasks they do

00:01:02,250 --> 00:01:05,790
manually so they spend a lot of time

00:01:03,989 --> 00:01:07,530
doing this manual tasks and we just help

00:01:05,790 --> 00:01:09,330
them to do that more easily and that's

00:01:07,530 --> 00:01:13,590
would be things like scheduling their

00:01:09,330 --> 00:01:18,030
jobs and sending notifications to

00:01:13,590 --> 00:01:19,409
customers so Canton have a big vision

00:01:18,030 --> 00:01:21,180
for the sort of stuff that they're

00:01:19,409 --> 00:01:22,830
trying to build so a bit more context on

00:01:21,180 --> 00:01:24,540
the kind of technology that we were

00:01:22,830 --> 00:01:27,270
using behind the product so we're using

00:01:24,540 --> 00:01:29,280
rep native obviously typescript graph QL

00:01:27,270 --> 00:01:34,799
and we're using App Center and code Bush

00:01:29,280 --> 00:01:37,320
for deployments so when we first build

00:01:34,799 --> 00:01:39,060
the app the initial pipeline we cannot

00:01:37,320 --> 00:01:41,670
came up with something like this when

00:01:39,060 --> 00:01:45,990
code is merged to master we run the test

00:01:41,670 --> 00:01:48,540
which is like jest s UI tests like detox

00:01:45,990 --> 00:01:50,159
and then we do the deployment of the

00:01:48,540 --> 00:01:52,680
code there's like a native deployments

00:01:50,159 --> 00:01:54,210
to App Center and a code Bush supported

00:01:52,680 --> 00:01:56,399
on the UAT environment followed by a

00:01:54,210 --> 00:01:59,159
manual approval approval step which

00:01:56,399 --> 00:02:01,740
would then push it to production the

00:01:59,159 --> 00:02:03,990
pull request pipeline is just as the

00:02:01,740 --> 00:02:05,729
first bit of that it does the jest test

00:02:03,990 --> 00:02:07,770
and the UI tests and if those passed

00:02:05,729 --> 00:02:10,170
then you can merge into master to run

00:02:07,770 --> 00:02:13,020
off around the rest of it and this works

00:02:10,170 --> 00:02:15,250
this worked pretty well however

00:02:13,020 --> 00:02:17,170
there was a problem with this it's hard

00:02:15,250 --> 00:02:18,880
to preview a PR on a real device before

00:02:17,170 --> 00:02:21,250
merging the text are passing and you

00:02:18,880 --> 00:02:23,980
know it's working functionally but

00:02:21,250 --> 00:02:25,750
designers want to get get in their hands

00:02:23,980 --> 00:02:27,250
and they want to play with it and see

00:02:25,750 --> 00:02:31,450
how it feels and what it looks like and

00:02:27,250 --> 00:02:34,080
like really inspected now it's possible

00:02:31,450 --> 00:02:36,520
to upload this to a test device or to

00:02:34,080 --> 00:02:38,350
upload this to your developer device and

00:02:36,520 --> 00:02:39,940
show the designer or things like that

00:02:38,350 --> 00:02:42,670
but this can be quite hard because it

00:02:39,940 --> 00:02:45,490
needs like a synchronous interaction to

00:02:42,670 --> 00:02:46,960
make that happen and especially now that

00:02:45,490 --> 00:02:49,270
everyone's working from home it's quite

00:02:46,960 --> 00:02:51,850
hard you need an easy way for the for a

00:02:49,270 --> 00:02:53,490
designer to just get that PR on their

00:02:51,850 --> 00:02:55,990
phone and look at it and you can just

00:02:53,490 --> 00:02:57,370
send them a message and they can have a

00:02:55,990 --> 00:03:02,970
look like that when you're ready for

00:02:57,370 --> 00:03:07,060
them to see it so the challenge then was

00:03:02,970 --> 00:03:10,030
we were thinking what do other platforms

00:03:07,060 --> 00:03:12,070
do and web apps specifically have solved

00:03:10,030 --> 00:03:13,780
this to an extent like they support

00:03:12,070 --> 00:03:15,760
deployment previews with hosting

00:03:13,780 --> 00:03:17,890
solutions like metal fight like when you

00:03:15,760 --> 00:03:19,450
raise a PR for your changes you can go

00:03:17,890 --> 00:03:22,480
to unique URL and look at those changes

00:03:19,450 --> 00:03:24,370
before they go live and we drew

00:03:22,480 --> 00:03:25,870
inspiration from that and we thought is

00:03:24,370 --> 00:03:29,800
there a way we can replicate this with

00:03:25,870 --> 00:03:30,940
native apps so the approach we came up

00:03:29,800 --> 00:03:32,520
with like since we're already using

00:03:30,940 --> 00:03:34,780
absent encode push this is a way of

00:03:32,520 --> 00:03:38,230
easily and quickly pushing out changes

00:03:34,780 --> 00:03:40,480
can we somehow leverage that to get this

00:03:38,230 --> 00:03:42,550
effect so the approach we came up with

00:03:40,480 --> 00:03:45,220
this github for each pull request we

00:03:42,550 --> 00:03:48,640
push a bundle for that pull request to

00:03:45,220 --> 00:03:50,590
App Center where the development app can

00:03:48,640 --> 00:03:52,750
access it so it's only for the

00:03:50,590 --> 00:03:54,160
development app not for the UAT your

00:03:52,750 --> 00:04:00,250
production apps those are separate apps

00:03:54,160 --> 00:04:02,380
in App Center so we will walk you

00:04:00,250 --> 00:04:04,390
through the process of how we went about

00:04:02,380 --> 00:04:07,330
implementing that the first step is of

00:04:04,390 --> 00:04:11,530
course to upload these builds as as I

00:04:07,330 --> 00:04:13,300
just described the way we did this with

00:04:11,530 --> 00:04:16,150
absented if you're familiar with App

00:04:13,300 --> 00:04:17,770
Center it's got this idea of paying

00:04:16,150 --> 00:04:19,090
deployments we for each PR we create

00:04:17,770 --> 00:04:22,180
this name deployment which is like a

00:04:19,090 --> 00:04:24,550
bucket for bundles of different versions

00:04:22,180 --> 00:04:26,560
of bundles so you create a bucket with a

00:04:24,550 --> 00:04:32,290
name that matches the PR name

00:04:26,560 --> 00:04:33,639
and you push on each PR when you create

00:04:32,290 --> 00:04:35,169
the PR you create that bucket and then

00:04:33,639 --> 00:04:37,030
you push the new version to that

00:04:35,169 --> 00:04:40,150
department and there's like the CLI

00:04:37,030 --> 00:04:41,350
command that we used to do that for for

00:04:40,150 --> 00:04:43,300
people that are interested or familiar

00:04:41,350 --> 00:04:44,850
with App Center but the effect of that

00:04:43,300 --> 00:04:47,350
is like if you go to the App Center

00:04:44,850 --> 00:04:49,720
interface you can see there's a drop

00:04:47,350 --> 00:04:52,030
down on the branches an example of what

00:04:49,720 --> 00:04:54,070
we've created and for that select a

00:04:52,030 --> 00:04:58,389
branch you can see multiple versions

00:04:54,070 --> 00:05:02,139
pushed to that to that named deployment

00:04:58,389 --> 00:05:06,780
as you do more updates to that PR and

00:05:02,139 --> 00:05:09,400
these are then available to Co push this

00:05:06,780 --> 00:05:11,590
one extra bit of technical details like

00:05:09,400 --> 00:05:13,720
sometimes you DD to make native changes

00:05:11,590 --> 00:05:15,360
which require like a full build that you

00:05:13,720 --> 00:05:17,590
can't just deploy through code push

00:05:15,360 --> 00:05:20,200
we've got some logic around that and how

00:05:17,590 --> 00:05:22,479
we handle that we see if the app version

00:05:20,200 --> 00:05:25,240
has been incremented if it has been we

00:05:22,479 --> 00:05:26,500
do a native build and we've got some

00:05:25,240 --> 00:05:28,600
scripts to help you check like if you've

00:05:26,500 --> 00:05:30,750
changed certain files then it says like

00:05:28,600 --> 00:05:34,419
okay the app version should have been up

00:05:30,750 --> 00:05:36,340
incremented so it expects a native build

00:05:34,419 --> 00:05:38,500
in certain cases this can lead to an

00:05:36,340 --> 00:05:40,600
edge case where you have to PRS in both

00:05:38,500 --> 00:05:43,930
incrementing at the same time and you

00:05:40,600 --> 00:05:46,690
end up with two new versions and this

00:05:43,930 --> 00:05:47,710
can cause a conflict but this is an edge

00:05:46,690 --> 00:05:50,289
case that we don't deal with

00:05:47,710 --> 00:05:51,760
automatically you'll see two apps with

00:05:50,289 --> 00:05:53,530
the same version and absent and you'll

00:05:51,760 --> 00:05:55,780
just have to communicate with the

00:05:53,530 --> 00:05:56,919
designer or whoever to tell them which

00:05:55,780 --> 00:05:58,750
version they need to download them

00:05:56,919 --> 00:06:00,729
eventually this will sort itself out

00:05:58,750 --> 00:06:05,470
as you do more PRS and more version

00:06:00,729 --> 00:06:07,389
bumps so after all of that this is what

00:06:05,470 --> 00:06:10,360
the new massive pipeline look like for

00:06:07,389 --> 00:06:12,760
the PR we just have the same master

00:06:10,360 --> 00:06:14,470
pipeline but they updated pull request

00:06:12,760 --> 00:06:16,210
pipeline now matches the master pipeline

00:06:14,470 --> 00:06:18,280
more closely with the added development

00:06:16,210 --> 00:06:20,919
environment there we do run all the

00:06:18,280 --> 00:06:22,450
tests and if they pass we do possibly a

00:06:20,919 --> 00:06:27,190
native deployment and a code Bush

00:06:22,450 --> 00:06:29,050
deployments cool so now we've got all

00:06:27,190 --> 00:06:30,550
these named deployments in App Center

00:06:29,050 --> 00:06:32,800
for all of these poor requests so

00:06:30,550 --> 00:06:35,650
opening so now how can we leverage those

00:06:32,800 --> 00:06:36,760
in our development app so we want to be

00:06:35,650 --> 00:06:40,030
able to choose one of those deployments

00:06:36,760 --> 00:06:43,990
and get an automatic update just like a

00:06:40,030 --> 00:06:46,990
so here's how we did that so first we do

00:06:43,990 --> 00:06:49,200
a simple get to the App Center API we

00:06:46,990 --> 00:06:51,520
get a list of all of the deployments

00:06:49,200 --> 00:06:54,010
which are created every single time we

00:06:51,520 --> 00:06:56,650
open up a poor quest so we've got that

00:06:54,010 --> 00:06:59,320
list then we're also going to want to

00:06:56,650 --> 00:07:01,150
fetch a bit more data so from App Center

00:06:59,320 --> 00:07:02,950
we also want the metadata about the

00:07:01,150 --> 00:07:05,020
current deployment name so we're going

00:07:02,950 --> 00:07:06,970
to use that to display in our developer

00:07:05,020 --> 00:07:08,710
menu to say this is the current update

00:07:06,970 --> 00:07:10,690
that you're looking at and then we also

00:07:08,710 --> 00:07:13,090
want some extra data from our device

00:07:10,690 --> 00:07:15,130
info so we want the current bundle

00:07:13,090 --> 00:07:17,890
version so we're going to use that then

00:07:15,130 --> 00:07:19,240
to filter out the compatible bills so

00:07:17,890 --> 00:07:20,560
we're going to compare the bundle

00:07:19,240 --> 00:07:23,230
version that we just got from device

00:07:20,560 --> 00:07:26,700
info and compare that to the minimum

00:07:23,230 --> 00:07:31,990
bundle version from our current update

00:07:26,700 --> 00:07:33,030
and see which are compatible and filter

00:07:31,990 --> 00:07:36,520
the rest out

00:07:33,030 --> 00:07:38,980
so then what some more buttons on there

00:07:36,520 --> 00:07:41,770
and we've got this handy dandy door menu

00:07:38,980 --> 00:07:43,210
you can see under available versions and

00:07:41,770 --> 00:07:47,140
gibberish which is our current

00:07:43,210 --> 00:07:49,450
deployment name should be named says UI

00:07:47,140 --> 00:07:52,270
fixed jobs this tennis so that was one

00:07:49,450 --> 00:07:53,590
of our branch names and then you've got

00:07:52,270 --> 00:07:55,720
a menu of updates so those are the

00:07:53,590 --> 00:07:58,390
filtered ones that you can press so

00:07:55,720 --> 00:08:00,070
what's left when you want to hit one of

00:07:58,390 --> 00:08:02,230
those buttons what do you want to do to

00:08:00,070 --> 00:08:04,480
download the update from App Center will

00:08:02,230 --> 00:08:06,310
show some download progress and then

00:08:04,480 --> 00:08:10,060
just restart the app feliza with a

00:08:06,310 --> 00:08:12,240
currently selected update and then we've

00:08:10,060 --> 00:08:12,240
got

00:08:18,090 --> 00:08:21,850
Canton seamless consulate growing

00:08:20,080 --> 00:08:24,010
they've got a never ending list of

00:08:21,850 --> 00:08:25,750
features so I'm seeing loads of pull

00:08:24,010 --> 00:08:27,460
requests and I'm also seeing lots of

00:08:25,750 --> 00:08:29,500
frantic scrolling on that developer menu

00:08:27,460 --> 00:08:32,470
to try and find the feature that the

00:08:29,500 --> 00:08:33,790
design team actually want to look at so

00:08:32,470 --> 00:08:35,800
we probably don't need all of those

00:08:33,790 --> 00:08:37,150
previews once the pull requests has been

00:08:35,800 --> 00:08:40,390
merged and the branch has been deleted

00:08:37,150 --> 00:08:42,370
so let's get rid of some of those so

00:08:40,390 --> 00:08:45,460
what did we use we used FWS lamda

00:08:42,370 --> 00:08:49,120
terraform ultimate setup and we used

00:08:45,460 --> 00:08:53,740
github web hooks to trigger this action

00:08:49,120 --> 00:08:55,360
on the branch deletion so what's the

00:08:53,740 --> 00:08:56,590
flow so we've tested the feature and the

00:08:55,360 --> 00:08:59,200
developer app as we've been iterating

00:08:56,590 --> 00:09:00,700
and now we're done so here's the flow on

00:08:59,200 --> 00:09:01,480
branch solution we're gonna match the

00:09:00,700 --> 00:09:05,050
pull request

00:09:01,480 --> 00:09:07,120
delete the branch the web perk is gonna

00:09:05,050 --> 00:09:08,620
pick that up on the branch tradition and

00:09:07,120 --> 00:09:10,750
that's going to trigger a lambda

00:09:08,620 --> 00:09:12,100
function so that all that's going to do

00:09:10,750 --> 00:09:15,250
it's quite simple it's just gonna cool

00:09:12,100 --> 00:09:17,260
the App Center API and delete the iOS

00:09:15,250 --> 00:09:19,450
and Android deployments for those given

00:09:17,260 --> 00:09:21,760
release names and remember we named all

00:09:19,450 --> 00:09:24,130
of our deployments with the branch names

00:09:21,760 --> 00:09:25,780
so it's quite easy to find and there you

00:09:24,130 --> 00:09:27,580
go you've prevented all of that

00:09:25,780 --> 00:09:31,660
scrolling and your developers are having

00:09:27,580 --> 00:09:35,050
a great time so that seems quite

00:09:31,660 --> 00:09:37,840
involved it wasn't me as of January that

00:09:35,050 --> 00:09:40,030
are now getting of actions for code push

00:09:37,840 --> 00:09:43,060
so now you can do arbitrary actions with

00:09:40,030 --> 00:09:44,290
the App Center command-line interface so

00:09:43,060 --> 00:09:46,330
if you're going to try it out this

00:09:44,290 --> 00:09:53,250
implementation I would recommend looking

00:09:46,330 --> 00:09:57,130
into that implementation so in summary

00:09:53,250 --> 00:09:58,600
we now have deploying previews when you

00:09:57,130 --> 00:10:00,790
have the developer app you can go to

00:09:58,600 --> 00:10:02,530
developer menu and you can see a list of

00:10:00,790 --> 00:10:03,880
all the different PRS that I open you

00:10:02,530 --> 00:10:06,850
click on one and you can see what that

00:10:03,880 --> 00:10:08,890
looks like and once you've looked at

00:10:06,850 --> 00:10:11,350
that and you've played around with it

00:10:08,890 --> 00:10:13,210
you can see it working you can merge to

00:10:11,350 --> 00:10:15,910
master confident confidently and

00:10:13,210 --> 00:10:19,990
frequently and you know your designers

00:10:15,910 --> 00:10:24,580
and your product owner will be happy so

00:10:19,990 --> 00:10:27,040
next steps well as we mentioned github

00:10:24,580 --> 00:10:28,210
actions on now available for code push

00:10:27,040 --> 00:10:29,490
and I think that would simplify things

00:10:28,210 --> 00:10:31,300
quite a lot

00:10:29,490 --> 00:10:34,180
the line was

00:10:31,300 --> 00:10:35,260
well but it's just unless unnecessary

00:10:34,180 --> 00:10:36,400
infrastructure that's part of the

00:10:35,260 --> 00:10:39,160
pipeline at the moment I think it

00:10:36,400 --> 00:10:41,530
actions will make that quite quite nice

00:10:39,160 --> 00:10:44,140
and easy to maintain

00:10:41,530 --> 00:10:45,760
other potential things we were thinking

00:10:44,140 --> 00:10:47,050
of will improve pipeline performance

00:10:45,760 --> 00:10:49,750
that's always something we're looking at

00:10:47,050 --> 00:10:53,290
so anyone who has any good ideas or how

00:10:49,750 --> 00:10:54,210
to do that as always come have a chat

00:10:53,290 --> 00:10:56,530
with us

00:10:54,210 --> 00:10:58,270
but it's always good to get it fast and

00:10:56,530 --> 00:11:02,650
get the feedback look fast and fast on

00:10:58,270 --> 00:11:04,570
on the pipeline and then blue sky

00:11:02,650 --> 00:11:06,400
thinking what if we added something our

00:11:04,570 --> 00:11:08,470
QR codes to download full builds it

00:11:06,400 --> 00:11:10,090
would be nice if you could just instead

00:11:08,470 --> 00:11:12,580
of having to go to App Center to find

00:11:10,090 --> 00:11:14,440
the best native version to preview this

00:11:12,580 --> 00:11:15,940
PR if you just have a QR code you can

00:11:14,440 --> 00:11:17,500
scan your phone automatic it goes to

00:11:15,940 --> 00:11:20,410
write native bill that you can just

00:11:17,500 --> 00:11:22,060
download and then test it so just things

00:11:20,410 --> 00:11:24,220
that will make the feedback loop faster

00:11:22,060 --> 00:11:27,280
and get people testing and seeing the

00:11:24,220 --> 00:11:30,160
features more quickly or any other other

00:11:27,280 --> 00:11:34,330
ideas we could be thinking officer after

00:11:30,160 --> 00:11:36,790
this that's it thank you so much for

00:11:34,330 --> 00:11:40,720
listening and I'm having a look at what

00:11:36,790 --> 00:11:46,200
we've done and if you have any questions

00:11:40,720 --> 00:11:46,200

YouTube URL: https://www.youtube.com/watch?v=tFH93hR2snY


