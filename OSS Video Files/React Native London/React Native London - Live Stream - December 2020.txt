Title: React Native London - Live Stream - December 2020
Publication date: 2020-11-30
Playlist: React Native London
Description: 
	| - Scroll down for the links to the Kodiri Challenge - |

Join us live for a special event featuring a talk on CI/CD and then an interactive coding challenge with Kodiri where you can put your skills to the test or simply learn more about React!

Intro
Talk + Q&A
Live Interactive coding challenges with Kodiri

We have a great talk lined up:
_______________
💻 The Talk(s)

1) Code ✅, to the app store! (How I made 100% free CI/CD) - by Paul McCabe

You finished the killer feature on your app, it's gonna make you millions, the code has been committed, huzzah! Now you have all the hassle of building the app and getting it to the app store or testing programs - and you want something a bit more repeatable and professional than an upload from your dev machine. But you also don't want to shell out for expensive Mac build services. What do you do...
_______________
💻 The Kodiri Live Coding Challenge

Time to brush up on those coding skills!
Join one of the game play links below to participate in the challenge or watch along right here in YouTube for a guided version.

- Web: https://www.kodiri.com
- Android: https://play.google.com/store/apps/details?id=com.kodiri
- iOS: https://apps.apple.com/us/app/kodiri-all-you-need-is-code/id1497757436?ls=1

___________________
🍷 The sponsor – Theodo (https://www.theodo.co.uk/)

Our team of 45+ agile web, mobile and software experts are based in Soho Square, London with offices in Paris and New York.

Over the last 10 years and across over 500 projects, we have partnered with non-technical founders to launch their first product, FTSE 100 companies to increase market share through launching internal startups & spearheading digital transformation initiatives, and SME CTOs to build and scale their technical teams.

Theodo projects start fast, and progress even faster, with our unique methodology combining agile, lean and DevOps allowing us to build more efficiently as the project progresses. We are experts at React Native, Serverless, React, Django/Python, Node.js and Symfony, with experience in many other frameworks.

___________________
🎥Video Recording Sponsored by Pusher:

You can view previous event talks and more by visiting the Pusher App YouTube channel!
https://www.youtube.com/playlist?list=PL8xuokhAnn4pBuGuJ4fjjGUQfqnZlOLNW

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications.
Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure.
Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more.
Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!

_______________________
The everything else

If you have inquiries or would like to get in touch, send us a message on Meetup directly.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,070 --> 00:00:31,840
[Music]

00:00:28,840 --> 00:00:31,840
so

00:00:36,010 --> 00:01:25,080
[Music]

00:01:36,350 --> 00:03:15,620
[Music]

00:03:16,840 --> 00:04:40,840
so

00:03:19,000 --> 00:04:43,840
[Music]

00:04:40,840 --> 00:04:43,840
so

00:04:50,940 --> 00:05:39,840
[Music]

00:05:36,840 --> 00:05:39,840
so

00:05:43,800 --> 00:05:59,360
[Music]

00:06:05,680 --> 00:06:09,680
hi everyone and welcome to the december

00:06:08,160 --> 00:06:12,240
edition of the react native

00:06:09,680 --> 00:06:13,440
london meetup uh it's good to have

00:06:12,240 --> 00:06:15,440
everyone back again

00:06:13,440 --> 00:06:17,199
uh after a few months off and i hope

00:06:15,440 --> 00:06:20,560
everyone's keeping well

00:06:17,199 --> 00:06:24,080
um this evening we've got first up a

00:06:20,560 --> 00:06:27,039
talk by paul who is um talking about

00:06:24,080 --> 00:06:29,759
uh react native ci cd and how he created

00:06:27,039 --> 00:06:31,039
a free cicd to deploy to the app store

00:06:29,759 --> 00:06:33,199
it'll be really interesting to hear

00:06:31,039 --> 00:06:34,000
about that and maybe you'll learn some

00:06:33,199 --> 00:06:37,280
tips about how

00:06:34,000 --> 00:06:40,400
you can improve your ci and cd process

00:06:37,280 --> 00:06:42,880
um after that as we're doing a kind of

00:06:40,400 --> 00:06:44,800
a remote online one um we've got some

00:06:42,880 --> 00:06:47,199
live interactive coding challenges

00:06:44,800 --> 00:06:48,400
with kadiri uh so these are being react

00:06:47,199 --> 00:06:50,080
these will be live

00:06:48,400 --> 00:06:51,599
you can either choose to kind of watch

00:06:50,080 --> 00:06:52,960
these or come along but

00:06:51,599 --> 00:06:55,199
we'll give you more details on this

00:06:52,960 --> 00:06:57,919
later um so yeah

00:06:55,199 --> 00:06:58,639
welcome back everyone and uh oh one

00:06:57,919 --> 00:07:01,440
further point

00:06:58,639 --> 00:07:02,400
is uh we'll have some time for q and a

00:07:01,440 --> 00:07:04,639
in questions

00:07:02,400 --> 00:07:06,319
after the first talk is over if you've

00:07:04,639 --> 00:07:06,880
got any questions please just put them

00:07:06,319 --> 00:07:08,720
in the chat

00:07:06,880 --> 00:07:10,479
as we're going along or put in the chat

00:07:08,720 --> 00:07:12,400
afterwards and we'll be able to ask

00:07:10,479 --> 00:07:14,800
those to paul who'll be around to answer

00:07:12,400 --> 00:07:16,240
questions at the end um but yeah without

00:07:14,800 --> 00:07:30,560
any further ado

00:07:16,240 --> 00:07:33,120
let's get into paul's talk

00:07:30,560 --> 00:07:34,160
hello everyone and welcome thanks for

00:07:33,120 --> 00:07:36,400
taking the time to

00:07:34,160 --> 00:07:37,520
see this talk uh just to introduce

00:07:36,400 --> 00:07:39,759
myself

00:07:37,520 --> 00:07:41,039
my name is paul i currently work as a

00:07:39,759 --> 00:07:42,319
principal software engineer for a

00:07:41,039 --> 00:07:44,400
company called anaplan

00:07:42,319 --> 00:07:46,000
working on their mobile app and this is

00:07:44,400 --> 00:07:47,919
one of my cats solomon

00:07:46,000 --> 00:07:50,720
he might interrupt this talk so i'll

00:07:47,919 --> 00:07:53,360
apologize in advance

00:07:50,720 --> 00:07:54,479
so what is this all about um this is

00:07:53,360 --> 00:07:56,160
about what you do

00:07:54,479 --> 00:07:57,919
when the coding ends you've created this

00:07:56,160 --> 00:07:59,440
amazing app there are dollar signs in

00:07:57,919 --> 00:08:01,919
your eyes now you need to

00:07:59,440 --> 00:08:04,000
ship it i'm going to talk a little about

00:08:01,919 --> 00:08:06,240
getting your hands on mac build hardware

00:08:04,000 --> 00:08:08,319
without breaking the bank

00:08:06,240 --> 00:08:09,599
and a lot about the stuff you need to

00:08:08,319 --> 00:08:12,560
generate and upload

00:08:09,599 --> 00:08:12,960
along with an app and how you can do

00:08:12,560 --> 00:08:15,759
that

00:08:12,960 --> 00:08:17,440
in an automated way to help you deliver

00:08:15,759 --> 00:08:18,080
your code and changes to your users

00:08:17,440 --> 00:08:20,160
visibly

00:08:18,080 --> 00:08:21,360
and quickly while keeping it looking

00:08:20,160 --> 00:08:24,000
great

00:08:21,360 --> 00:08:24,960
and it'll mostly be automated but more

00:08:24,000 --> 00:08:27,360
on that later

00:08:24,960 --> 00:08:28,479
you might ask uh what has this got to do

00:08:27,360 --> 00:08:30,160
with react native

00:08:28,479 --> 00:08:32,240
and it's a question i struggle with when

00:08:30,160 --> 00:08:34,719
i was writing this talk i love

00:08:32,240 --> 00:08:36,320
writing native i've never had as much

00:08:34,719 --> 00:08:39,440
fun in my career

00:08:36,320 --> 00:08:40,399
as when i'm using this technology and

00:08:39,440 --> 00:08:43,279
part of the reason

00:08:40,399 --> 00:08:45,120
i think i love it is how productive i am

00:08:43,279 --> 00:08:46,080
getting stuff done on multiple platforms

00:08:45,120 --> 00:08:48,240
at once

00:08:46,080 --> 00:08:49,600
but unless those changes are getting to

00:08:48,240 --> 00:08:51,200
the people using my apps

00:08:49,600 --> 00:08:52,880
i'm not really delivering on that

00:08:51,200 --> 00:08:55,279
productivity

00:08:52,880 --> 00:08:56,720
so i think this stuff goes hand in hand

00:08:55,279 --> 00:09:00,320
with react native

00:08:56,720 --> 00:09:02,640
and in some cases is enabled by it so

00:09:00,320 --> 00:09:03,920
what do we actually need to do when

00:09:02,640 --> 00:09:06,560
we're getting our apps

00:09:03,920 --> 00:09:08,640
out to the app stores obviously creating

00:09:06,560 --> 00:09:10,399
a release of the app is important

00:09:08,640 --> 00:09:12,160
but within that you need to ensure that

00:09:10,399 --> 00:09:14,000
you have set all the build

00:09:12,160 --> 00:09:15,680
and version numbers correctly otherwise

00:09:14,000 --> 00:09:18,000
your build is going to get rejected

00:09:15,680 --> 00:09:19,440
so automating that really helps and not

00:09:18,000 --> 00:09:20,000
doing it manually from your development

00:09:19,440 --> 00:09:22,000
machine

00:09:20,000 --> 00:09:23,519
really stops you from getting some of

00:09:22,000 --> 00:09:25,200
that wrong

00:09:23,519 --> 00:09:26,959
then we have all this media that needs

00:09:25,200 --> 00:09:28,880
to be generated screenshots are a

00:09:26,959 --> 00:09:30,240
requirement for both the play store and

00:09:28,880 --> 00:09:31,920
the apple app store

00:09:30,240 --> 00:09:33,839
even if they have slightly different

00:09:31,920 --> 00:09:35,920
specs if you have

00:09:33,839 --> 00:09:38,160
users in different countries then you

00:09:35,920 --> 00:09:41,040
might also need to be generating these

00:09:38,160 --> 00:09:42,560
once for each language with multiple

00:09:41,040 --> 00:09:44,320
sizes needed for apple

00:09:42,560 --> 00:09:45,920
that can scale up in terms of work

00:09:44,320 --> 00:09:47,760
quickly if you're

00:09:45,920 --> 00:09:50,080
a huge company with a dedicated branding

00:09:47,760 --> 00:09:52,000
team maybe that's okay

00:09:50,080 --> 00:09:53,279
but when i'm a sol dev trying to get my

00:09:52,000 --> 00:09:56,399
own app out there it

00:09:53,279 --> 00:09:56,800
really isn't and you have the same issue

00:09:56,399 --> 00:09:58,560
with

00:09:56,800 --> 00:10:00,720
any videos of the app you want to

00:09:58,560 --> 00:10:01,200
provide and you do want to provide a

00:10:00,720 --> 00:10:03,440
video

00:10:01,200 --> 00:10:05,600
if you want to get featured on the app

00:10:03,440 --> 00:10:07,920
store or

00:10:05,600 --> 00:10:09,279
get people to take your app seriously so

00:10:07,920 --> 00:10:11,040
lots to do

00:10:09,279 --> 00:10:13,120
um i thought i finished coding the app

00:10:11,040 --> 00:10:15,040
why am i not rich yet

00:10:13,120 --> 00:10:16,880
doing all this stuff every time you want

00:10:15,040 --> 00:10:18,160
to ship a new app version not only takes

00:10:16,880 --> 00:10:19,920
loads of time

00:10:18,160 --> 00:10:21,600
but that's a lot of places where you can

00:10:19,920 --> 00:10:22,480
get a process wrong or introduce human

00:10:21,600 --> 00:10:24,480
error

00:10:22,480 --> 00:10:27,440
so what i want to advocate is really

00:10:24,480 --> 00:10:30,959
automating as much as we humanly can

00:10:27,440 --> 00:10:32,160
and doing it as part of our ci cd

00:10:30,959 --> 00:10:34,480
pipelines we

00:10:32,160 --> 00:10:35,839
hopefully already have in most modern

00:10:34,480 --> 00:10:37,839
software projects

00:10:35,839 --> 00:10:40,160
and i mean this not just for companies

00:10:37,839 --> 00:10:43,040
but i'm a huge believer in doing it

00:10:40,160 --> 00:10:44,480
for my smaller personal projects this

00:10:43,040 --> 00:10:46,800
talk is based around an app

00:10:44,480 --> 00:10:47,839
i maintain for helping people play board

00:10:46,800 --> 00:10:49,920
games

00:10:47,839 --> 00:10:51,360
the game is called warhammer underworlds

00:10:49,920 --> 00:10:52,560
and the app is called underworld's

00:10:51,360 --> 00:10:55,360
helper

00:10:52,560 --> 00:10:56,240
it has one developer it is completely

00:10:55,360 --> 00:10:58,880
open source

00:10:56,240 --> 00:10:59,279
but every upload to the app store comes

00:10:58,880 --> 00:11:01,600
through

00:10:59,279 --> 00:11:03,120
a ci pipeline that runs when i push my

00:11:01,600 --> 00:11:06,720
deploy branch

00:11:03,120 --> 00:11:09,040
remotely as a loan dev

00:11:06,720 --> 00:11:10,160
i don't have bags of cash to spend on

00:11:09,040 --> 00:11:12,000
fancy build servers

00:11:10,160 --> 00:11:14,000
and we know we're going to need some mac

00:11:12,000 --> 00:11:17,920
hardware to build and deliver those

00:11:14,000 --> 00:11:20,320
ios apps there are some options though

00:11:17,920 --> 00:11:22,079
travis ci used to provide completely

00:11:20,320 --> 00:11:23,040
free mac build hardware for open source

00:11:22,079 --> 00:11:24,959
projects

00:11:23,040 --> 00:11:26,720
if your github repo was public you were

00:11:24,959 --> 00:11:29,600
golden sadly that's

00:11:26,720 --> 00:11:31,519
changed recently github itself now

00:11:29,600 --> 00:11:34,079
provides a really good amount of

00:11:31,519 --> 00:11:35,279
free mac build minutes uh with github

00:11:34,079 --> 00:11:38,160
actions

00:11:35,279 --> 00:11:39,920
both for private and public repos and

00:11:38,160 --> 00:11:40,800
mac stadium one of the big mac clouds

00:11:39,920 --> 00:11:42,959
out there

00:11:40,800 --> 00:11:43,920
does offer free build time for open

00:11:42,959 --> 00:11:45,920
source projects

00:11:43,920 --> 00:11:48,640
but you have to fill out a form and pray

00:11:45,920 --> 00:11:51,120
they like you enough so

00:11:48,640 --> 00:11:53,200
when i started this app a few years ago

00:11:51,120 --> 00:11:54,720
travis was free so i settled on them but

00:11:53,200 --> 00:11:56,560
i'm actually keen to try moving over to

00:11:54,720 --> 00:11:58,880
get her actions at some point

00:11:56,560 --> 00:11:59,920
and see how that goes but enough about

00:11:58,880 --> 00:12:01,839
release builds

00:11:59,920 --> 00:12:03,440
as i said earlier that's probably a

00:12:01,839 --> 00:12:05,120
different talk

00:12:03,440 --> 00:12:07,040
let's instead turn towards some of the

00:12:05,120 --> 00:12:07,920
cool stuff you need to deliver alongside

00:12:07,040 --> 00:12:09,839
your app

00:12:07,920 --> 00:12:11,600
screenshots can make or break you on the

00:12:09,839 --> 00:12:13,680
app store so

00:12:11,600 --> 00:12:14,880
if we're gonna generate them in an

00:12:13,680 --> 00:12:17,360
automated way

00:12:14,880 --> 00:12:18,079
how can we do it without compromising on

00:12:17,360 --> 00:12:19,760
quality

00:12:18,079 --> 00:12:21,279
if we look at the pay store guidelines

00:12:19,760 --> 00:12:23,600
first

00:12:21,279 --> 00:12:25,200
we see there are a couple of hoops we

00:12:23,600 --> 00:12:28,160
know we're gonna need to jump through

00:12:25,200 --> 00:12:28,560
we need a minimum of two images no more

00:12:28,160 --> 00:12:31,920
than

00:12:28,560 --> 00:12:34,399
two to one aspect ratio um with some

00:12:31,920 --> 00:12:35,200
relaxed release resolutions actually

00:12:34,399 --> 00:12:39,040
however

00:12:35,200 --> 00:12:40,880
apple oh apple we have to deliver

00:12:39,040 --> 00:12:41,760
separate screenshots for the full screen

00:12:40,880 --> 00:12:43,440
iphones

00:12:41,760 --> 00:12:45,680
for iphones with physical home buttons

00:12:43,440 --> 00:12:47,519
and for ipads for ipads you actually

00:12:45,680 --> 00:12:49,760
need to supply two sets of images

00:12:47,519 --> 00:12:51,440
um but they have the same dimensions so

00:12:49,760 --> 00:12:53,440
you can reuse the same at least

00:12:51,440 --> 00:12:54,880
i don't want to do this manually i don't

00:12:53,440 --> 00:12:56,880
own all the devices

00:12:54,880 --> 00:12:58,880
as a react native dev maybe i'm you know

00:12:56,880 --> 00:13:00,720
working on a linux or windows machine so

00:12:58,880 --> 00:13:02,639
i might not even have access to

00:13:00,720 --> 00:13:04,800
simulators there's another great reason

00:13:02,639 --> 00:13:06,160
to shift this into an automated process

00:13:04,800 --> 00:13:09,120
that runs on a build machine

00:13:06,160 --> 00:13:10,959
in a cloud somewhere but how can i

00:13:09,120 --> 00:13:11,600
generate the screenshots i want with my

00:13:10,959 --> 00:13:14,720
app

00:13:11,600 --> 00:13:17,040
in all the different states i want i

00:13:14,720 --> 00:13:18,880
went for appium as my tool of choice

00:13:17,040 --> 00:13:20,720
there are other similar options like

00:13:18,880 --> 00:13:23,120
detox and if you're lucky

00:13:20,720 --> 00:13:24,880
you could even use react native web and

00:13:23,120 --> 00:13:26,800
try automating a web browser with

00:13:24,880 --> 00:13:28,880
puppeteer or another framework

00:13:26,800 --> 00:13:30,240
appium actually uses the same protocol

00:13:28,880 --> 00:13:32,240
as selenium

00:13:30,240 --> 00:13:34,959
and this is a nice standard built around

00:13:32,240 --> 00:13:36,560
http requests to send commands

00:13:34,959 --> 00:13:38,160
so you might already be familiar with

00:13:36,560 --> 00:13:40,240
this kind of system if you

00:13:38,160 --> 00:13:41,760
if you do any web development the idea

00:13:40,240 --> 00:13:44,160
here is to script

00:13:41,760 --> 00:13:44,959
real use of your app actually opening it

00:13:44,160 --> 00:13:47,839
on a device

00:13:44,959 --> 00:13:49,199
navigating screens interacting with it

00:13:47,839 --> 00:13:51,680
and this ability to drive

00:13:49,199 --> 00:13:53,920
the app in a scripted way gives us

00:13:51,680 --> 00:13:57,360
repeatable actions that a

00:13:53,920 --> 00:13:59,199
provide us you know prove to us that our

00:13:57,360 --> 00:14:01,680
app is working the way we intended

00:13:59,199 --> 00:14:02,240
and b give us an opportunity to capture

00:14:01,680 --> 00:14:05,040
the app

00:14:02,240 --> 00:14:06,320
while we're driving it to these states

00:14:05,040 --> 00:14:08,000
what does this look like for our rec

00:14:06,320 --> 00:14:10,320
native app

00:14:08,000 --> 00:14:11,440
this is a typical setup on the left we

00:14:10,320 --> 00:14:13,279
have a test runner

00:14:11,440 --> 00:14:14,720
where we can put the logic that drives

00:14:13,279 --> 00:14:16,560
the app

00:14:14,720 --> 00:14:18,320
this will talk to our app via an appium

00:14:16,560 --> 00:14:19,600
server which we'll need to launch

00:14:18,320 --> 00:14:21,440
beforehand

00:14:19,600 --> 00:14:23,440
the appium server in turn is going to

00:14:21,440 --> 00:14:25,120
talk to our device or simulator as

00:14:23,440 --> 00:14:27,600
appropriate

00:14:25,120 --> 00:14:29,199
when running a test we provide appium

00:14:27,600 --> 00:14:31,279
with the desired set of what they call

00:14:29,199 --> 00:14:32,480
capabilities and this is really a

00:14:31,279 --> 00:14:35,279
description of the

00:14:32,480 --> 00:14:38,560
device we want to run the test on and it

00:14:35,279 --> 00:14:40,480
includes the location of our app

00:14:38,560 --> 00:14:42,800
appium takes care of installing our app

00:14:40,480 --> 00:14:45,440
on the device and it also installs a

00:14:42,800 --> 00:14:47,519
second app on there the web driver agent

00:14:45,440 --> 00:14:49,360
and this is where the magic happens the

00:14:47,519 --> 00:14:51,680
web driver and our app are signed

00:14:49,360 --> 00:14:54,320
similarly during the install process

00:14:51,680 --> 00:14:55,839
and this lets the webdriver agent which

00:14:54,320 --> 00:14:58,320
is going to receive commands

00:14:55,839 --> 00:15:00,079
from the appium server interact with our

00:14:58,320 --> 00:15:01,440
app in ways that are normally restricted

00:15:00,079 --> 00:15:04,000
to the operating system

00:15:01,440 --> 00:15:06,560
and native thresholding frameworks like

00:15:04,000 --> 00:15:09,199
xc ui test or espresso

00:15:06,560 --> 00:15:11,600
now we can start sending commands like

00:15:09,199 --> 00:15:13,279
find this element or input text or press

00:15:11,600 --> 00:15:14,320
that button and we can do that from our

00:15:13,279 --> 00:15:16,320
test

00:15:14,320 --> 00:15:17,680
we can even interact with biometrics on

00:15:16,320 --> 00:15:19,600
simulators and emulators which is

00:15:17,680 --> 00:15:22,160
actually really cool

00:15:19,600 --> 00:15:22,880
and given uh what we've just described

00:15:22,160 --> 00:15:24,000
so far

00:15:22,880 --> 00:15:25,519
you can imagine that this could be

00:15:24,000 --> 00:15:27,360
scaled out so we can run these tests

00:15:25,519 --> 00:15:28,399
against all device form factors that

00:15:27,360 --> 00:15:31,360
we're interested in

00:15:28,399 --> 00:15:32,560
together though in reality you are more

00:15:31,360 --> 00:15:33,600
likely to end up with something that

00:15:32,560 --> 00:15:34,959
looks like this

00:15:33,600 --> 00:15:36,639
if you want to go down that

00:15:34,959 --> 00:15:38,079
parallelizing route i found there are

00:15:36,639 --> 00:15:40,160
issues with trying to run multiple

00:15:38,079 --> 00:15:41,519
devices from one appium server

00:15:40,160 --> 00:15:43,839
though in theory you should be able to

00:15:41,519 --> 00:15:45,279
do it these days um and you can use

00:15:43,839 --> 00:15:45,680
selenium grid if you're familiar with

00:15:45,279 --> 00:15:48,720
that

00:15:45,680 --> 00:15:49,199
i believe but let's stick with the basic

00:15:48,720 --> 00:15:51,040
case

00:15:49,199 --> 00:15:52,560
you know we can always run our tests one

00:15:51,040 --> 00:15:55,040
by one and

00:15:52,560 --> 00:15:56,000
parallelize later and let's finally look

00:15:55,040 --> 00:15:57,600
at some code for this

00:15:56,000 --> 00:15:59,199
as this is for a react native app i

00:15:57,600 --> 00:16:00,800
prefer to keep as much of my code in

00:15:59,199 --> 00:16:02,959
javascript or typescript

00:16:00,800 --> 00:16:04,320
as possible and in this case i'm using

00:16:02,959 --> 00:16:06,959
jest as my testrunner

00:16:04,320 --> 00:16:07,839
we need to ensure we have appium and a

00:16:06,959 --> 00:16:10,240
webdriver client

00:16:07,839 --> 00:16:12,240
installed i chose webdriverio for my

00:16:10,240 --> 00:16:14,160
webdriver client

00:16:12,240 --> 00:16:15,680
there are other options and we need to

00:16:14,160 --> 00:16:17,440
start our appium server you'll notice

00:16:15,680 --> 00:16:17,680
i'm installing it locally and starting

00:16:17,440 --> 00:16:19,519
it

00:16:17,680 --> 00:16:21,360
from within my node modules this is

00:16:19,519 --> 00:16:23,440
because i'm expecting this to be run

00:16:21,360 --> 00:16:25,279
on a ci server at some point and the

00:16:23,440 --> 00:16:27,120
more dependencies i can encapsulate

00:16:25,279 --> 00:16:29,040
my project the less i have to worry

00:16:27,120 --> 00:16:32,000
about the state of the server

00:16:29,040 --> 00:16:33,920
and what comes pre-installed on it plus

00:16:32,000 --> 00:16:34,720
most ci systems offer some form of

00:16:33,920 --> 00:16:36,560
caching

00:16:34,720 --> 00:16:38,720
so if i cache my node modules i get the

00:16:36,560 --> 00:16:41,120
app install cached for free

00:16:38,720 --> 00:16:43,040
and then i'm running my tests though i'm

00:16:41,120 --> 00:16:44,959
setting an environment variable for each

00:16:43,040 --> 00:16:46,560
test with the name of the device i want

00:16:44,959 --> 00:16:48,160
to run on it it's a nice way to

00:16:46,560 --> 00:16:50,880
parameterize js tests

00:16:48,160 --> 00:16:53,040
the actual code isn't necessarily huge

00:16:50,880 --> 00:16:55,279
though this is a naughty example

00:16:53,040 --> 00:16:57,040
i would advocate using the page object

00:16:55,279 --> 00:16:57,759
model if you're really going to do all

00:16:57,040 --> 00:16:59,360
of this

00:16:57,759 --> 00:17:01,199
where you model each screen in your app

00:16:59,360 --> 00:17:02,959
as a class and make

00:17:01,199 --> 00:17:05,839
the interactions on that screen

00:17:02,959 --> 00:17:08,160
functions that you call on that class

00:17:05,839 --> 00:17:10,240
we know we're going to pick the device

00:17:08,160 --> 00:17:12,319
config based on the environment variable

00:17:10,240 --> 00:17:13,439
and these are the appium capabilities i

00:17:12,319 --> 00:17:15,600
mentioned earlier

00:17:13,439 --> 00:17:16,559
this is what we're asking appium to run

00:17:15,600 --> 00:17:19,120
our test on

00:17:16,559 --> 00:17:20,480
in this case an iphone 11 pro max

00:17:19,120 --> 00:17:22,079
simulator

00:17:20,480 --> 00:17:23,919
and appium will actually launch the

00:17:22,079 --> 00:17:25,679
simulator for us too which is very

00:17:23,919 --> 00:17:28,319
convenient

00:17:25,679 --> 00:17:30,160
before each test uh we're going to get a

00:17:28,319 --> 00:17:33,840
fresh web driver i o client

00:17:30,160 --> 00:17:36,080
for our given device then in our tests

00:17:33,840 --> 00:17:37,360
we can start issuing commands in this

00:17:36,080 --> 00:17:39,760
case the dollar function

00:17:37,360 --> 00:17:41,200
means select element and the tilde at

00:17:39,760 --> 00:17:44,640
the start of the string

00:17:41,200 --> 00:17:47,039
means select by test id

00:17:44,640 --> 00:17:49,360
here is what the react native code that

00:17:47,039 --> 00:17:51,120
this is interacting with might look like

00:17:49,360 --> 00:17:52,400
the command will give us back a

00:17:51,120 --> 00:17:54,880
reference to the element

00:17:52,400 --> 00:17:56,960
not a react reference but really just an

00:17:54,880 --> 00:17:58,080
id that appium can use to refer to that

00:17:56,960 --> 00:18:00,880
element

00:17:58,080 --> 00:18:04,000
and we can do things like tap on that

00:18:00,880 --> 00:18:06,320
element with the click function

00:18:04,000 --> 00:18:08,000
and once we are on a screen we care

00:18:06,320 --> 00:18:10,320
about and the app is

00:18:08,000 --> 00:18:12,880
in a state we care about we can take a

00:18:10,320 --> 00:18:14,640
screenshot and save it to disk

00:18:12,880 --> 00:18:17,120
the images that this produces are the

00:18:14,640 --> 00:18:19,200
right size for the device it was run on

00:18:17,120 --> 00:18:20,880
great quality and always up to date with

00:18:19,200 --> 00:18:23,360
our app not only that

00:18:20,880 --> 00:18:25,039
um but you can pass in the locale in

00:18:23,360 --> 00:18:26,240
those appium capabilities

00:18:25,039 --> 00:18:28,240
so if you need to run your app in

00:18:26,240 --> 00:18:30,080
japanese french german

00:18:28,240 --> 00:18:32,000
it's easy to do no messing around with

00:18:30,080 --> 00:18:35,039
device config settings

00:18:32,000 --> 00:18:36,480
there are trade-offs um for example the

00:18:35,039 --> 00:18:37,280
first time you run it it will take a

00:18:36,480 --> 00:18:39,760
while as

00:18:37,280 --> 00:18:40,640
that webdriver agent app has to be

00:18:39,760 --> 00:18:42,559
compiled

00:18:40,640 --> 00:18:44,160
and on android you have to use a

00:18:42,559 --> 00:18:47,120
different prop you have to use

00:18:44,160 --> 00:18:49,360
accessibility label instead of test id

00:18:47,120 --> 00:18:50,480
and the element you are setting these on

00:18:49,360 --> 00:18:53,440
needs to be

00:18:50,480 --> 00:18:55,120
an actual react native one you can't set

00:18:53,440 --> 00:18:56,720
test id in one of your own components

00:18:55,120 --> 00:18:58,160
and expect appium to find it you'll need

00:18:56,720 --> 00:19:00,080
to pass that down

00:18:58,160 --> 00:19:02,240
to a text or view inside your component

00:19:00,080 --> 00:19:03,840
for example

00:19:02,240 --> 00:19:06,400
it's also not really appropriate for

00:19:03,840 --> 00:19:09,200
apps that don't have a stable state

00:19:06,400 --> 00:19:09,520
now granted most react native apps tend

00:19:09,200 --> 00:19:12,400
to

00:19:09,520 --> 00:19:14,480
end up in a stable state but if you've

00:19:12,400 --> 00:19:16,160
managed to write a fast-paced 3d game

00:19:14,480 --> 00:19:17,520
this isn't going to work for you

00:19:16,160 --> 00:19:20,080
congratulations for doing that in react

00:19:17,520 --> 00:19:22,160
native i did say we're going to make

00:19:20,080 --> 00:19:24,400
these screenshots look awesome though

00:19:22,160 --> 00:19:26,320
just showing what your app looks like

00:19:24,400 --> 00:19:27,520
isn't going to get you those millions of

00:19:26,320 --> 00:19:30,240
dollars in downloads

00:19:27,520 --> 00:19:32,160
so how do we make these screenshots

00:19:30,240 --> 00:19:33,440
really sing

00:19:32,160 --> 00:19:34,960
um i'm going to keep running in

00:19:33,440 --> 00:19:35,919
javascript for as many things as

00:19:34,960 --> 00:19:37,919
possible

00:19:35,919 --> 00:19:39,600
and that includes image manipulation

00:19:37,919 --> 00:19:40,480
sharp is a nifty little library that

00:19:39,600 --> 00:19:42,080
runs in node

00:19:40,480 --> 00:19:43,760
so we can actually use it during the

00:19:42,080 --> 00:19:45,679
jest tests we were running earlier if we

00:19:43,760 --> 00:19:47,520
want to

00:19:45,679 --> 00:19:48,960
what do i want to do with my screenshots

00:19:47,520 --> 00:19:50,160
um well here's

00:19:48,960 --> 00:19:53,039
what they'll start off looking like for

00:19:50,160 --> 00:19:54,960
my app the first thing

00:19:53,039 --> 00:19:57,120
i want to do is shrink the screenshot a

00:19:54,960 --> 00:19:57,679
little and put it on a black background

00:19:57,120 --> 00:20:00,799
the same

00:19:57,679 --> 00:20:03,520
size as the original image

00:20:00,799 --> 00:20:05,679
with the space we've now made at the top

00:20:03,520 --> 00:20:06,559
we can add a little context about the

00:20:05,679 --> 00:20:08,080
scene

00:20:06,559 --> 00:20:10,000
some nice marketing text and a fancy

00:20:08,080 --> 00:20:11,840
font um

00:20:10,000 --> 00:20:13,520
but we're dealing with an image

00:20:11,840 --> 00:20:16,080
manipulation library here

00:20:13,520 --> 00:20:16,799
so um we need to treat the text as an

00:20:16,080 --> 00:20:18,240
image

00:20:16,799 --> 00:20:20,159
and this is where svgs are really

00:20:18,240 --> 00:20:22,080
convenient as before

00:20:20,159 --> 00:20:23,520
we need to make sure we install the

00:20:22,080 --> 00:20:25,679
sharp library

00:20:23,520 --> 00:20:26,799
and as i'm introducing a utility

00:20:25,679 --> 00:20:29,039
function that

00:20:26,799 --> 00:20:29,840
takes an image and adds some text to it

00:20:29,039 --> 00:20:31,840
and we're going to

00:20:29,840 --> 00:20:34,480
look at the code for that first we need

00:20:31,840 --> 00:20:36,960
to read in the image using sharp

00:20:34,480 --> 00:20:37,919
and then we want to resize it down in

00:20:36,960 --> 00:20:40,559
this case

00:20:37,919 --> 00:20:42,320
to 80 of its original size we do that by

00:20:40,559 --> 00:20:43,520
grabbing the original width and height

00:20:42,320 --> 00:20:47,360
from the image metadata

00:20:43,520 --> 00:20:50,559
and multiplying it by in this case 0.8

00:20:47,360 --> 00:20:52,000
we'll hold that in a buffer for now um

00:20:50,559 --> 00:20:53,440
but when we add it back into the

00:20:52,000 --> 00:20:55,520
original image later we want it to be in

00:20:53,440 --> 00:20:57,520
the middle and at the bottom

00:20:55,520 --> 00:20:59,679
we can do this with this gravity option

00:20:57,520 --> 00:21:01,679
later

00:20:59,679 --> 00:21:02,880
next we'll create the background image

00:21:01,679 --> 00:21:04,720
now for us

00:21:02,880 --> 00:21:06,400
this is just really a big black box and

00:21:04,720 --> 00:21:08,240
it's the same size as the original image

00:21:06,400 --> 00:21:09,840
so again we're using the width and

00:21:08,240 --> 00:21:12,240
height that we got from the original

00:21:09,840 --> 00:21:15,679
image metadata

00:21:12,240 --> 00:21:17,280
next we'll add in the text i'll dive

00:21:15,679 --> 00:21:19,440
into this a bit deeper

00:21:17,280 --> 00:21:20,480
but uh it's worth noting at this point

00:21:19,440 --> 00:21:22,080
that we

00:21:20,480 --> 00:21:24,080
have this variable called vertical text

00:21:22,080 --> 00:21:26,480
space which is really just the 20

00:21:24,080 --> 00:21:27,840
of space uh we're going to be left with

00:21:26,480 --> 00:21:30,080
at the top of the image

00:21:27,840 --> 00:21:31,520
we also pass in the original image width

00:21:30,080 --> 00:21:33,600
and height here because

00:21:31,520 --> 00:21:35,600
it's easier to think about the svg layer

00:21:33,600 --> 00:21:36,240
as being the same size as the original

00:21:35,600 --> 00:21:39,760
image

00:21:36,240 --> 00:21:41,679
at least it is for me finally we can

00:21:39,760 --> 00:21:44,400
compose the three images together

00:21:41,679 --> 00:21:45,760
and we can write the result out and even

00:21:44,400 --> 00:21:46,640
overwrite the original image if we're

00:21:45,760 --> 00:21:48,320
feeling brash

00:21:46,640 --> 00:21:50,159
though if you want to do this with

00:21:48,320 --> 00:21:52,080
multiple languages i'd recommend keeping

00:21:50,159 --> 00:21:54,320
the original as is and writing to a new

00:21:52,080 --> 00:21:55,520
file

00:21:54,320 --> 00:21:57,600
i said i'd come back to the svg

00:21:55,520 --> 00:22:01,280
generation as it's kind of interesting

00:21:57,600 --> 00:22:04,080
and so this is our utility function and

00:22:01,280 --> 00:22:05,760
um we passed in that vertical text space

00:22:04,080 --> 00:22:07,360
argument which is the 20

00:22:05,760 --> 00:22:08,880
of space at the top of the image so

00:22:07,360 --> 00:22:10,159
let's ignore the rest of the image for

00:22:08,880 --> 00:22:12,720
now

00:22:10,159 --> 00:22:13,600
within that space at the top we want the

00:22:12,720 --> 00:22:16,799
center

00:22:13,600 --> 00:22:19,440
for the text um so that we can find the

00:22:16,799 --> 00:22:20,720
midpoint to put that text in

00:22:19,440 --> 00:22:22,240
but the text isn't always going to be

00:22:20,720 --> 00:22:23,280
one line in this case it's actually

00:22:22,240 --> 00:22:25,679
going to be three lines

00:22:23,280 --> 00:22:28,000
we get that by breaking the text on new

00:22:25,679 --> 00:22:30,400
line characters

00:22:28,000 --> 00:22:31,760
so we want to work out where the first

00:22:30,400 --> 00:22:32,320
line is actually going to start by

00:22:31,760 --> 00:22:34,159
shifting

00:22:32,320 --> 00:22:35,600
up from that midpoint and you'll notice

00:22:34,159 --> 00:22:36,960
that we're actually separating the

00:22:35,600 --> 00:22:40,240
concept of line height

00:22:36,960 --> 00:22:40,960
and the line itself the line height is

00:22:40,240 --> 00:22:44,000
00:22:40,960 --> 00:22:44,640
bigger than the font size so we're

00:22:44,000 --> 00:22:48,240
shifting

00:22:44,640 --> 00:22:50,559
that up by whatever amount we need to as

00:22:48,240 --> 00:22:54,080
appropriate

00:22:50,559 --> 00:22:57,280
finally we can loop over the lines

00:22:54,080 --> 00:22:59,280
and add text elements to our svg offset

00:22:57,280 --> 00:23:00,400
by the right vertical distance based on

00:22:59,280 --> 00:23:03,520
our line height

00:23:00,400 --> 00:23:04,320
and the index of the line the svg as i

00:23:03,520 --> 00:23:06,000
mentioned earlier

00:23:04,320 --> 00:23:08,000
is actually the same size as our whole

00:23:06,000 --> 00:23:09,600
image so if we get the placement of the

00:23:08,000 --> 00:23:11,760
text right here we don't have to worry

00:23:09,600 --> 00:23:14,000
about positioning the svg later it just

00:23:11,760 --> 00:23:16,159
sits over the whole final image

00:23:14,000 --> 00:23:17,440
great now we can programmatically

00:23:16,159 --> 00:23:19,039
generate our screenshots

00:23:17,440 --> 00:23:20,480
and then add some final polish with some

00:23:19,039 --> 00:23:22,000
marketing text

00:23:20,480 --> 00:23:24,720
and that's a pretty basic version of

00:23:22,000 --> 00:23:26,640
this um the sky really is the limit here

00:23:24,720 --> 00:23:27,840
you can do so much more like focusing on

00:23:26,640 --> 00:23:29,919
a particular element

00:23:27,840 --> 00:23:31,280
in fact you can screenshot individual

00:23:29,919 --> 00:23:34,320
elements during the test

00:23:31,280 --> 00:23:35,679
in appium just by selecting an element

00:23:34,320 --> 00:23:39,919
and calling save screenshot

00:23:35,679 --> 00:23:42,559
on the element rather than on the client

00:23:39,919 --> 00:23:42,960
or you can crop the image as needed in

00:23:42,559 --> 00:23:45,360
sharp

00:23:42,960 --> 00:23:48,080
afterwards if you always know where a

00:23:45,360 --> 00:23:50,320
particular element will be in a scene

00:23:48,080 --> 00:23:52,559
or you could do some rotation effects

00:23:50,320 --> 00:23:54,960
composite several scenes together

00:23:52,559 --> 00:23:56,559
um instead of a plain background color

00:23:54,960 --> 00:23:57,279
you could have a nice blurred stock

00:23:56,559 --> 00:24:00,000
image

00:23:57,279 --> 00:24:00,480
um you could add device frames um

00:24:00,000 --> 00:24:01,919
they're

00:24:00,480 --> 00:24:04,400
something that's really popular in a lot

00:24:01,919 --> 00:24:05,200
of app store listings it's something you

00:24:04,400 --> 00:24:06,559
can have fun with

00:24:05,200 --> 00:24:08,640
and if you're already using something

00:24:06,559 --> 00:24:10,960
like fastlane there's a utility in that

00:24:08,640 --> 00:24:14,240
called frame it that can help with some

00:24:10,960 --> 00:24:14,240
of this processing too

00:24:14,320 --> 00:24:18,159
great we have a lot of screenshots all

00:24:16,400 --> 00:24:19,600
up to date generated as part of our

00:24:18,159 --> 00:24:21,279
build pipeline

00:24:19,600 --> 00:24:22,960
now we just need to upload them in an

00:24:21,279 --> 00:24:25,200
automated way

00:24:22,960 --> 00:24:26,880
and this is where i have to admit i

00:24:25,200 --> 00:24:28,640
bailed on my own premise

00:24:26,880 --> 00:24:31,679
um i've not had the time to automate the

00:24:28,640 --> 00:24:33,520
uploading yet

00:24:31,679 --> 00:24:34,720
but it is on my list of things to do and

00:24:33,520 --> 00:24:36,320
it isn't too difficult

00:24:34,720 --> 00:24:38,480
so i'm quickly going to run through what

00:24:36,320 --> 00:24:42,320
i intend on doing

00:24:38,480 --> 00:24:44,640
i briefly mentioned it before

00:24:42,320 --> 00:24:46,640
fast lane is a fantastic utility and

00:24:44,640 --> 00:24:48,960
absolutely necessary if you're doing

00:24:46,640 --> 00:24:49,760
any kind of continuous deployment with

00:24:48,960 --> 00:24:52,320
mobile apps

00:24:49,760 --> 00:24:54,400
react native or otherwise really it's a

00:24:52,320 --> 00:24:55,760
huge pile of ruby that some guys at

00:24:54,400 --> 00:24:57,440
google are constantly backwards

00:24:55,760 --> 00:24:58,880
engineering from apple and google's

00:24:57,440 --> 00:25:01,520
private apis it's

00:24:58,880 --> 00:25:02,080
bonkers within fastlane the deliver

00:25:01,520 --> 00:25:04,720
package

00:25:02,080 --> 00:25:05,440
gives us the ability to upload to apple

00:25:04,720 --> 00:25:07,679
not only

00:25:05,440 --> 00:25:09,840
our apps but also all the things that go

00:25:07,679 --> 00:25:11,760
with an app including screenshots

00:25:09,840 --> 00:25:14,799
and the equivalent of deliver in fast

00:25:11,760 --> 00:25:16,559
lane for android is called supply

00:25:14,799 --> 00:25:18,159
it does much the same thing but for

00:25:16,559 --> 00:25:20,400
google's play store

00:25:18,159 --> 00:25:21,760
let's start with supply once you have

00:25:20,400 --> 00:25:24,080
fastlane installed

00:25:21,760 --> 00:25:25,840
you can run supply init which is going

00:25:24,080 --> 00:25:26,559
to bring down this folder structure for

00:25:25,840 --> 00:25:28,000
you

00:25:26,559 --> 00:25:30,559
picking up what you've already got on

00:25:28,000 --> 00:25:32,320
the play store in terms of app metadata

00:25:30,559 --> 00:25:34,080
then we move all the screenshots into

00:25:32,320 --> 00:25:36,400
the various directories

00:25:34,080 --> 00:25:37,840
which are organized by language code

00:25:36,400 --> 00:25:38,559
once you're happy with all the images

00:25:37,840 --> 00:25:40,559
being in place

00:25:38,559 --> 00:25:42,640
you can run supply to upload the

00:25:40,559 --> 00:25:44,960
screenshots and since supply can do all

00:25:42,640 --> 00:25:46,400
your app metadata and the app itself

00:25:44,960 --> 00:25:48,960
you can do this all at the same time if

00:25:46,400 --> 00:25:51,760
you want on the ios side

00:25:48,960 --> 00:25:53,039
deliver works in a very similar way and

00:25:51,760 --> 00:25:55,360
you run an init command

00:25:53,039 --> 00:25:58,480
to download all the existing info

00:25:55,360 --> 00:26:00,320
including the existing images you have

00:25:58,480 --> 00:26:02,000
the directory structure is slightly

00:26:00,320 --> 00:26:04,000
different to android one but it

00:26:02,000 --> 00:26:05,200
has the same concept of this language

00:26:04,000 --> 00:26:06,960
code separation

00:26:05,200 --> 00:26:09,120
again we just need to copy all the

00:26:06,960 --> 00:26:10,880
appropriate screenshots into place

00:26:09,120 --> 00:26:13,120
deliver doesn't need images in different

00:26:10,880 --> 00:26:15,360
directories or named in any particular

00:26:13,120 --> 00:26:17,200
way it actually uses the resolution

00:26:15,360 --> 00:26:19,120
of the image to work out which device

00:26:17,200 --> 00:26:22,640
it's uploading for and once you're happy

00:26:19,120 --> 00:26:23,600
you run deliver to upload the images and

00:26:22,640 --> 00:26:25,919
if you want

00:26:23,600 --> 00:26:26,799
you can upload your metadata and upload

00:26:25,919 --> 00:26:30,480
your app

00:26:26,799 --> 00:26:31,520
at the same time too now images that are

00:26:30,480 --> 00:26:33,520
localized

00:26:31,520 --> 00:26:35,279
up-to-date and looking professional will

00:26:33,520 --> 00:26:37,279
get you a long way

00:26:35,279 --> 00:26:38,880
but a video can really raise your

00:26:37,279 --> 00:26:40,000
chances of getting people to download

00:26:38,880 --> 00:26:42,000
your app

00:26:40,000 --> 00:26:44,799
is it something that we can automate too

00:26:42,000 --> 00:26:48,000
while keeping that high standard

00:26:44,799 --> 00:26:50,480
um for the google play store your video

00:26:48,000 --> 00:26:52,480
actually needs to be uploaded to youtube

00:26:50,480 --> 00:26:54,640
and you provide the store with a link

00:26:52,480 --> 00:26:57,039
it can't have ads turned on but that's

00:26:54,640 --> 00:26:58,640
about it otherwise it's a pretty relaxed

00:26:57,039 --> 00:27:02,720
set of

00:26:58,640 --> 00:27:04,799
guidelines to follow for apple devices

00:27:02,720 --> 00:27:06,720
like with the screenshots we need

00:27:04,799 --> 00:27:08,720
multiple videos

00:27:06,720 --> 00:27:10,000
and there are a few more restrictions on

00:27:08,720 --> 00:27:12,159
what we need to deliver

00:27:10,000 --> 00:27:14,240
videos can't be more than 30 seconds

00:27:12,159 --> 00:27:17,039
long and they have to be provided in the

00:27:14,240 --> 00:27:18,960
right format with the right encoding

00:27:17,039 --> 00:27:20,960
and if i have to do different videos in

00:27:18,960 --> 00:27:24,000
different languages for four devices

00:27:20,960 --> 00:27:25,679
that's a lot of manual video editing

00:27:24,000 --> 00:27:27,600
if i want these to be up to date with my

00:27:25,679 --> 00:27:30,320
new app features i'm gonna spend more

00:27:27,600 --> 00:27:33,039
time in imovie than i am coding features

00:27:30,320 --> 00:27:34,960
i don't have a marketing department so i

00:27:33,039 --> 00:27:36,399
want to automate as much of this as i

00:27:34,960 --> 00:27:39,120
can

00:27:36,399 --> 00:27:40,159
and since we're already diving driving

00:27:39,120 --> 00:27:43,360
our app

00:27:40,159 --> 00:27:46,240
to record screenshots why not record

00:27:43,360 --> 00:27:48,000
a video at the same time appium actually

00:27:46,240 --> 00:27:50,240
provides this functionality to us

00:27:48,000 --> 00:27:52,320
though you have to make sure ffmpeg a

00:27:50,240 --> 00:27:52,799
command line video creation and editing

00:27:52,320 --> 00:27:57,200
tool

00:27:52,799 --> 00:28:00,480
is installed as it's what appium uses

00:27:57,200 --> 00:28:02,159
so this is where we left our test code

00:28:00,480 --> 00:28:04,559
that was driving our app and taking

00:28:02,159 --> 00:28:06,720
screenshots we can add a couple more

00:28:04,559 --> 00:28:09,200
lines here to start recording the video

00:28:06,720 --> 00:28:10,960
and at the end of the test stop the

00:28:09,200 --> 00:28:11,919
video being recorded and save it to a

00:28:10,960 --> 00:28:13,760
file

00:28:11,919 --> 00:28:15,919
and when we start the recording we can

00:28:13,760 --> 00:28:17,360
specify the format and quality we want

00:28:15,919 --> 00:28:20,880
if you're recording videos

00:28:17,360 --> 00:28:22,799
of you know actual say end-to-end tests

00:28:20,880 --> 00:28:24,159
you could easily see what happens when

00:28:22,799 --> 00:28:25,919
they fail

00:28:24,159 --> 00:28:27,919
and you probably don't need super high

00:28:25,919 --> 00:28:28,399
frame rates for that example but in our

00:28:27,919 --> 00:28:30,159
case

00:28:28,399 --> 00:28:31,919
this is supposed to be eye candy for our

00:28:30,159 --> 00:28:34,480
users so we'll go as high as we

00:28:31,919 --> 00:28:36,960
reasonably can in terms of quality

00:28:34,480 --> 00:28:37,600
one more thing to note the appium docs

00:28:36,960 --> 00:28:41,200
describe

00:28:37,600 --> 00:28:41,840
a stop recrean stop recording screen

00:28:41,200 --> 00:28:43,679
function

00:28:41,840 --> 00:28:46,640
but here we're using a save recording

00:28:43,679 --> 00:28:47,840
screen function provided by webdriver io

00:28:46,640 --> 00:28:49,600
in this case

00:28:47,840 --> 00:28:51,679
the big difference here is stop

00:28:49,600 --> 00:28:54,000
recording screen returns a base64

00:28:51,679 --> 00:28:55,520
encoded string of your video data

00:28:54,000 --> 00:28:57,279
which you have to correctly encode and

00:28:55,520 --> 00:28:59,600
write to a file yourself

00:28:57,279 --> 00:29:01,200
save recording screen does that bit for

00:28:59,600 --> 00:29:04,320
you

00:29:01,200 --> 00:29:07,120
um so what are the results of these

00:29:04,320 --> 00:29:08,480
you know two extra lines well the video

00:29:07,120 --> 00:29:10,399
it produces hasn't lived up to my

00:29:08,480 --> 00:29:11,679
expectations if i'm honest

00:29:10,399 --> 00:29:14,399
though i'm almost certain it's something

00:29:11,679 --> 00:29:16,240
that i'm doing wrong the quality

00:29:14,399 --> 00:29:17,919
is even lower when i play it on google

00:29:16,240 --> 00:29:20,799
slides for some reason um

00:29:17,919 --> 00:29:21,600
but the actual video has these artifacts

00:29:20,799 --> 00:29:23,360
when

00:29:21,600 --> 00:29:25,600
large areas of the screen change it's

00:29:23,360 --> 00:29:27,679
like you know when when i navigate

00:29:25,600 --> 00:29:29,360
between screens there

00:29:27,679 --> 00:29:31,200
a lot of pixels are changing it's the

00:29:29,360 --> 00:29:34,159
kind of thing you would see in a badly

00:29:31,200 --> 00:29:37,039
encoded dvd rip from the early naughties

00:29:34,159 --> 00:29:40,159
and the speed of the video doesn't match

00:29:37,039 --> 00:29:42,000
that of the original play through

00:29:40,159 --> 00:29:43,520
all isn't lost though um as there are

00:29:42,000 --> 00:29:45,360
some other ways that we can start and

00:29:43,520 --> 00:29:48,480
stop the video capture

00:29:45,360 --> 00:29:50,960
on our devices during a test run on ios

00:29:48,480 --> 00:29:53,840
the simulator control utility which is

00:29:50,960 --> 00:29:54,720
similar to adb on android it can be used

00:29:53,840 --> 00:29:57,360
to record

00:29:54,720 --> 00:29:59,279
videos straight off of the simulator

00:29:57,360 --> 00:30:01,760
this works really well and produces

00:29:59,279 --> 00:30:03,520
a high quality video you can use child

00:30:01,760 --> 00:30:05,520
processing nodes to

00:30:03,520 --> 00:30:07,039
kick this off and kill it at the end of

00:30:05,520 --> 00:30:09,200
the recording

00:30:07,039 --> 00:30:10,799
similarly on android adb actually

00:30:09,200 --> 00:30:12,480
provides a screen record command

00:30:10,799 --> 00:30:14,480
though in this case the video will be

00:30:12,480 --> 00:30:16,240
saved on the device even if it's an

00:30:14,480 --> 00:30:17,120
emulator it gets stored on the emulator

00:30:16,240 --> 00:30:18,960
device

00:30:17,120 --> 00:30:21,279
so you also need to extract it

00:30:18,960 --> 00:30:22,080
afterwards and probably remove it to

00:30:21,279 --> 00:30:24,880
keep the space

00:30:22,080 --> 00:30:26,080
clear this video we can already see is

00:30:24,880 --> 00:30:29,520
much higher quality

00:30:26,080 --> 00:30:32,000
and the speed is the same as what we

00:30:29,520 --> 00:30:33,360
what actually happened during the test

00:30:32,000 --> 00:30:34,720
run

00:30:33,360 --> 00:30:37,120
though it's worth noting that if you

00:30:34,720 --> 00:30:38,320
leave it running with nothing happening

00:30:37,120 --> 00:30:39,600
on screen

00:30:38,320 --> 00:30:41,200
and then stop the recording this

00:30:39,600 --> 00:30:42,640
technique will end up with all that

00:30:41,200 --> 00:30:45,440
waiting time being cut

00:30:42,640 --> 00:30:45,919
this is because the codec used ignores

00:30:45,440 --> 00:30:48,000
when

00:30:45,919 --> 00:30:48,960
there are no changes in the video not a

00:30:48,000 --> 00:30:50,640
biggie but

00:30:48,960 --> 00:30:52,960
worth being aware of for the end of your

00:30:50,640 --> 00:30:54,720
video as it will end abruptly after the

00:30:52,960 --> 00:30:57,279
last movement on screen

00:30:54,720 --> 00:30:58,000
while a high quality video of us tapping

00:30:57,279 --> 00:31:00,399
around the app

00:30:58,000 --> 00:31:02,159
is pretty cool we did say we were going

00:31:00,399 --> 00:31:03,919
to make it look great

00:31:02,159 --> 00:31:06,000
and more importantly it can't be more

00:31:03,919 --> 00:31:07,600
than 30 seconds for apple

00:31:06,000 --> 00:31:09,519
at the moment i've got about two minutes

00:31:07,600 --> 00:31:11,200
of video that needs cutting down to the

00:31:09,519 --> 00:31:12,720
good bits

00:31:11,200 --> 00:31:15,200
and this is where i have to make another

00:31:12,720 --> 00:31:17,919
one of those guilty admissions

00:31:15,200 --> 00:31:19,279
i currently manually edit my videos for

00:31:17,919 --> 00:31:21,440
this app

00:31:19,279 --> 00:31:23,840
i do it in imovie and i have to do it

00:31:21,440 --> 00:31:25,120
multiple times once for each device

00:31:23,840 --> 00:31:26,559
i don't currently support other

00:31:25,120 --> 00:31:28,880
languages in this app so i don't have to

00:31:26,559 --> 00:31:30,640
do it tens of times for each language

00:31:28,880 --> 00:31:32,000
but i do want to support more languages

00:31:30,640 --> 00:31:35,600
in the future

00:31:32,000 --> 00:31:37,120
i also add arty subtitles and uh

00:31:35,600 --> 00:31:39,679
you know to describe what's going on in

00:31:37,120 --> 00:31:42,640
each point the video and nice music

00:31:39,679 --> 00:31:43,600
and and that makes this a manual process

00:31:42,640 --> 00:31:46,720
that is a

00:31:43,600 --> 00:31:49,840
huge no-no for a proper one-man shop

00:31:46,720 --> 00:31:51,679
i only update this app twice a year

00:31:49,840 --> 00:31:53,919
but if you're on your own or even a

00:31:51,679 --> 00:31:55,679
small company with global ambitions

00:31:53,919 --> 00:31:56,960
and you want to release often this could

00:31:55,679 --> 00:32:00,480
be a real issue

00:31:56,960 --> 00:32:03,200
not only that but doing stuff in imovie

00:32:00,480 --> 00:32:04,960
always outputs at 1080 by 1920.

00:32:03,200 --> 00:32:06,799
so i also lose one of the huge

00:32:04,960 --> 00:32:07,519
advantages of screen recordings from

00:32:06,799 --> 00:32:10,720
devices

00:32:07,519 --> 00:32:12,640
the correct aspect ratio well correcting

00:32:10,720 --> 00:32:13,360
the videos i produce in imovie is

00:32:12,640 --> 00:32:15,679
something that i

00:32:13,360 --> 00:32:17,200
can script at least a quick look at the

00:32:15,679 --> 00:32:20,159
apple specs tells me

00:32:17,200 --> 00:32:20,720
what i actually need i need to crop the

00:32:20,159 --> 00:32:23,440
video

00:32:20,720 --> 00:32:24,080
to get it to get rid of that wide screen

00:32:23,440 --> 00:32:26,320
space

00:32:24,080 --> 00:32:27,279
and scale it to what the app store

00:32:26,320 --> 00:32:29,919
requires

00:32:27,279 --> 00:32:32,799
and we already have ffmpeg installed and

00:32:29,919 --> 00:32:34,799
it lets us crop the video quite easily

00:32:32,799 --> 00:32:36,399
all we need are the width and height of

00:32:34,799 --> 00:32:39,600
the area to crop to

00:32:36,399 --> 00:32:41,840
and also the top left corner

00:32:39,600 --> 00:32:43,679
to start that crop from the ffmpeg

00:32:41,840 --> 00:32:46,480
command is pretty readable

00:32:43,679 --> 00:32:48,159
and we're just passing in the video some

00:32:46,480 --> 00:32:49,919
variables and telling it where to write

00:32:48,159 --> 00:32:51,919
to

00:32:49,919 --> 00:32:53,279
now we're left with just our mobile

00:32:51,919 --> 00:32:55,519
screen

00:32:53,279 --> 00:32:57,600
we next need to get the scale right

00:32:55,519 --> 00:32:59,600
again the ffmpeg command

00:32:57,600 --> 00:33:01,600
is fairly readable i'm just setting the

00:32:59,600 --> 00:33:04,480
new scale with what is

00:33:01,600 --> 00:33:05,919
required by the apple spec for a given

00:33:04,480 --> 00:33:08,559
device

00:33:05,919 --> 00:33:10,399
and that's it two commands and our video

00:33:08,559 --> 00:33:12,080
is back to being in the right format

00:33:10,399 --> 00:33:14,720
and ready to be uploaded to the app

00:33:12,080 --> 00:33:16,720
store here's what the commands look like

00:33:14,720 --> 00:33:18,240
when i'm running on the console

00:33:16,720 --> 00:33:19,440
i checked them into my repair so i don't

00:33:18,240 --> 00:33:20,240
lose them for next time but you'll

00:33:19,440 --> 00:33:22,000
notice

00:33:20,240 --> 00:33:24,399
some funny numbers in those crop

00:33:22,000 --> 00:33:25,919
commands how do i work out what areas of

00:33:24,399 --> 00:33:28,399
the screen i need to crop to

00:33:25,919 --> 00:33:29,679
well i actually did by eye with some

00:33:28,399 --> 00:33:31,919
trial and error

00:33:29,679 --> 00:33:33,279
it doesn't take long and once i had the

00:33:31,919 --> 00:33:34,880
values right

00:33:33,279 --> 00:33:37,360
they're fine to reuse again and again

00:33:34,880 --> 00:33:38,559
year after year and i'm sure someone

00:33:37,360 --> 00:33:41,360
cleverer than i am

00:33:38,559 --> 00:33:41,679
could have done the maths and worked all

00:33:41,360 --> 00:33:43,519
out

00:33:41,679 --> 00:33:45,200
but it doesn't really matter if i'm out

00:33:43,519 --> 00:33:45,440
by a pixel or two as long as i get rid

00:33:45,200 --> 00:33:47,039
of

00:33:45,440 --> 00:33:49,600
all of the widescreen black space the

00:33:47,039 --> 00:33:53,279
scale command is gonna make everything

00:33:49,600 --> 00:33:56,080
you know look pretty correct at the end

00:33:53,279 --> 00:33:57,919
a quick note on background music the

00:33:56,080 --> 00:34:00,240
sound effects

00:33:57,919 --> 00:34:01,919
you know that i add to the video and the

00:34:00,240 --> 00:34:03,600
music that i add

00:34:01,919 --> 00:34:04,960
i want it to be something that's

00:34:03,600 --> 00:34:07,200
professional and

00:34:04,960 --> 00:34:08,800
you know that someone is is going to

00:34:07,200 --> 00:34:09,440
want to hear when they're watching the

00:34:08,800 --> 00:34:11,440
video

00:34:09,440 --> 00:34:14,879
and this is actually pretty easy to do

00:34:11,440 --> 00:34:16,720
um i get my music from freesound.org

00:34:14,879 --> 00:34:18,399
where you can find loads of free

00:34:16,720 --> 00:34:20,240
material to use you just have to abide

00:34:18,399 --> 00:34:22,079
by the licenses on the file

00:34:20,240 --> 00:34:23,440
often this just means including a credit

00:34:22,079 --> 00:34:25,440
to the artist which

00:34:23,440 --> 00:34:26,960
i add to the app store listing and also

00:34:25,440 --> 00:34:28,320
to the youtube video description if i

00:34:26,960 --> 00:34:30,399
upload it there

00:34:28,320 --> 00:34:31,440
here's a little snip of the audio i

00:34:30,399 --> 00:34:35,839
chose to use

00:34:31,440 --> 00:34:35,839
for the underworld helper app video

00:34:41,659 --> 00:34:47,619
[Music]

00:34:43,440 --> 00:34:47,619
[Applause]

00:34:47,679 --> 00:34:54,399
[Music]

00:34:51,280 --> 00:34:55,200
so manually casting the video multiple

00:34:54,399 --> 00:34:57,599
videos

00:34:55,200 --> 00:34:58,800
manually editing sound manually

00:34:57,599 --> 00:35:01,280
uploading

00:34:58,800 --> 00:35:03,520
i don't want to keep doing this so let

00:35:01,280 --> 00:35:06,800
me show you what i'm planning to do next

00:35:03,520 --> 00:35:08,560
in my automation journey with video

00:35:06,800 --> 00:35:10,000
our recording might be a few minutes

00:35:08,560 --> 00:35:11,760
long um

00:35:10,000 --> 00:35:14,079
but we just want the best 30 seconds of

00:35:11,760 --> 00:35:16,320
that and it likely isn't continuous so

00:35:14,079 --> 00:35:17,440
how do we programmatically cut the right

00:35:16,320 --> 00:35:19,359
bits

00:35:17,440 --> 00:35:20,960
well the only point we actually know

00:35:19,359 --> 00:35:21,440
what is happening on screen at a given

00:35:20,960 --> 00:35:24,800
moment

00:35:21,440 --> 00:35:27,520
is during the original test run so

00:35:24,800 --> 00:35:28,160
that is the best time for us to mark

00:35:27,520 --> 00:35:30,000
these

00:35:28,160 --> 00:35:32,000
so we can cut the video into individual

00:35:30,000 --> 00:35:33,920
clips later

00:35:32,000 --> 00:35:35,599
if we go back again to our test code

00:35:33,920 --> 00:35:36,320
it's actually fairly easy to record this

00:35:35,599 --> 00:35:38,240
information

00:35:36,320 --> 00:35:39,680
we just need to add a couple more lines

00:35:38,240 --> 00:35:42,000
to you know

00:35:39,680 --> 00:35:43,040
record first the initial start time of

00:35:42,000 --> 00:35:45,280
the video

00:35:43,040 --> 00:35:47,280
and at this point i'm also introducing a

00:35:45,280 --> 00:35:49,839
structure for us to record timings

00:35:47,280 --> 00:35:51,680
of individual clips into and when

00:35:49,839 --> 00:35:52,240
there's an interesting interaction about

00:35:51,680 --> 00:35:54,320
to happen

00:35:52,240 --> 00:35:55,839
that we want in our final video we can

00:35:54,320 --> 00:35:59,359
mark the times

00:35:55,839 --> 00:36:01,599
um at the end of the interaction

00:35:59,359 --> 00:36:04,320
we can push the start time and the end

00:36:01,599 --> 00:36:06,480
time into our eclipse array

00:36:04,320 --> 00:36:08,560
and using these timestamps we can cut

00:36:06,480 --> 00:36:10,640
the clip later

00:36:08,560 --> 00:36:13,040
as we add more clips to the structure it

00:36:10,640 --> 00:36:15,280
grows and at the end of the test

00:36:13,040 --> 00:36:17,119
we can save the json to another file

00:36:15,280 --> 00:36:19,599
alongside the video

00:36:17,119 --> 00:36:20,880
now you could if you wanted just record

00:36:19,599 --> 00:36:22,800
each interaction

00:36:20,880 --> 00:36:24,320
uh you know as its own clip so you don't

00:36:22,800 --> 00:36:26,079
have to cut them up later

00:36:24,320 --> 00:36:28,480
but due to what i said before about the

00:36:26,079 --> 00:36:29,520
video recording cutting abruptly if

00:36:28,480 --> 00:36:31,200
there were

00:36:29,520 --> 00:36:32,960
any more interaction if there weren't

00:36:31,200 --> 00:36:34,480
any more interactions i personally found

00:36:32,960 --> 00:36:37,920
it easier to manage this

00:36:34,480 --> 00:36:40,800
with one long video that i'd chop

00:36:37,920 --> 00:36:42,640
up as needed i can add padding time

00:36:40,800 --> 00:36:44,480
around my clips more easily if i want to

00:36:42,640 --> 00:36:47,440
this way

00:36:44,480 --> 00:36:48,160
now i have my video file and my timings

00:36:47,440 --> 00:36:50,000
file but

00:36:48,160 --> 00:36:51,359
how do i actually operate on the video

00:36:50,000 --> 00:36:53,119
file based on this

00:36:51,359 --> 00:36:55,440
well we already saw a tool for scripted

00:36:53,119 --> 00:36:56,960
video editing we used ffmpeg earlier for

00:36:55,440 --> 00:37:00,400
cropping and scaling the videos

00:36:56,960 --> 00:37:01,760
that we got out of imovie um so instead

00:37:00,400 --> 00:37:03,599
we can use it here

00:37:01,760 --> 00:37:05,440
for chopping up our video into the clips

00:37:03,599 --> 00:37:06,880
we care about

00:37:05,440 --> 00:37:08,720
actually cutting the clips out is pretty

00:37:06,880 --> 00:37:10,160
easy we can loop over the clips array in

00:37:08,720 --> 00:37:13,119
our json and

00:37:10,160 --> 00:37:14,320
make this ffmpeg command finding the

00:37:13,119 --> 00:37:16,079
start time of each clip

00:37:14,320 --> 00:37:17,599
relative to the start of the video and

00:37:16,079 --> 00:37:20,400
the duration of the clip by taking its

00:37:17,599 --> 00:37:22,800
start time from its end time

00:37:20,400 --> 00:37:23,680
now i've got lots of short videos rather

00:37:22,800 --> 00:37:26,400
than one long one

00:37:23,680 --> 00:37:28,079
um so let's stitch them back together we

00:37:26,400 --> 00:37:30,880
want to do this in a lossless way and

00:37:28,079 --> 00:37:34,640
the ffmpeg docs recommend converting

00:37:30,880 --> 00:37:37,040
mpeg4 to mpeg2 this is because mpeg4

00:37:34,640 --> 00:37:38,640
is very clever has all sorts of

00:37:37,040 --> 00:37:42,000
interesting things like seek points

00:37:38,640 --> 00:37:43,680
encoded into it whereas mpeg2

00:37:42,000 --> 00:37:45,920
you can literally concatenate the bytes

00:37:43,680 --> 00:37:46,720
of two files together and get seamless

00:37:45,920 --> 00:37:49,440
video

00:37:46,720 --> 00:37:50,000
so for a quick ffmpeg command to turn

00:37:49,440 --> 00:37:52,560
each clip

00:37:50,000 --> 00:37:54,160
into an intermediate mpeg-2 file is

00:37:52,560 --> 00:37:56,800
needed here

00:37:54,160 --> 00:37:58,480
for those wondering the dot ts file

00:37:56,800 --> 00:38:00,320
extension here stands for video

00:37:58,480 --> 00:38:02,160
transport stream

00:38:00,320 --> 00:38:04,800
which is the mpeg2 format it doesn't

00:38:02,160 --> 00:38:07,200
stand for typescript file

00:38:04,800 --> 00:38:09,119
finally we concatenate them back

00:38:07,200 --> 00:38:10,320
together with another simple ffmpeg

00:38:09,119 --> 00:38:11,760
command

00:38:10,320 --> 00:38:14,160
and re-encode the whole thing backs in

00:38:11,760 --> 00:38:16,079
mp4 there's probably a way to do this

00:38:14,160 --> 00:38:18,640
without the intermediate files ffmpeg

00:38:16,079 --> 00:38:20,160
can work on many streams at a time

00:38:18,640 --> 00:38:22,000
so again if you're cleverer than me you

00:38:20,160 --> 00:38:22,880
can probably work out something a little

00:38:22,000 --> 00:38:26,400
more elegant here

00:38:22,880 --> 00:38:29,119
what about transitions um

00:38:26,400 --> 00:38:30,640
just gluing our clips together might be

00:38:29,119 --> 00:38:33,920
jarring for someone

00:38:30,640 --> 00:38:36,000
watching the video and in imovie i used

00:38:33,920 --> 00:38:36,960
a zoom blur transition to hide where i

00:38:36,000 --> 00:38:39,520
glued the clips together

00:38:36,960 --> 00:38:40,320
and you know to let the person watching

00:38:39,520 --> 00:38:42,640
it

00:38:40,320 --> 00:38:44,160
know hey the next thing you're going to

00:38:42,640 --> 00:38:46,560
see is going to be different

00:38:44,160 --> 00:38:47,839
so can we do something similar on the

00:38:46,560 --> 00:38:49,200
command line

00:38:47,839 --> 00:38:51,280
now it's probably a little ambitious to

00:38:49,200 --> 00:38:51,920
try and achieve the same transition as a

00:38:51,280 --> 00:38:54,400
mature

00:38:51,920 --> 00:38:55,440
tool as imovie uh we could happily get

00:38:54,400 --> 00:38:57,920
away with a flash

00:38:55,440 --> 00:38:59,280
or fading in and out but i put a bit of

00:38:57,920 --> 00:39:02,079
thought into how

00:38:59,280 --> 00:39:03,440
i would script that zoom blur transition

00:39:02,079 --> 00:39:05,359
using

00:39:03,440 --> 00:39:07,839
the zoom pan and directional blur

00:39:05,359 --> 00:39:09,839
filters in ffmpeg

00:39:07,839 --> 00:39:10,960
imagine we have our two clips that we

00:39:09,839 --> 00:39:13,040
want to join

00:39:10,960 --> 00:39:15,839
i need the 500 milliseconds at the end

00:39:13,040 --> 00:39:18,079
of the first and the start of the second

00:39:15,839 --> 00:39:19,280
on this little section of video i need

00:39:18,079 --> 00:39:21,280
to apply my filters

00:39:19,280 --> 00:39:23,119
on the first 500 milliseconds i'm going

00:39:21,280 --> 00:39:23,760
to zoom in and apply the directional

00:39:23,119 --> 00:39:26,160
blur

00:39:23,760 --> 00:39:28,240
over time increasing the zoom and

00:39:26,160 --> 00:39:28,560
intensity of the blur and maybe changing

00:39:28,240 --> 00:39:31,119
the

00:39:28,560 --> 00:39:32,560
angle of the blur direction too on the

00:39:31,119 --> 00:39:34,800
second 500 milliseconds

00:39:32,560 --> 00:39:37,119
i need to do the reverse uh zooming back

00:39:34,800 --> 00:39:39,280
out and reducing the blur

00:39:37,119 --> 00:39:40,480
i've not tried doing this yet but i

00:39:39,280 --> 00:39:41,280
think it could be fun to play around

00:39:40,480 --> 00:39:42,960
with

00:39:41,280 --> 00:39:44,480
and it really gets me thinking about

00:39:42,960 --> 00:39:47,119
what i can and can't achieve with these

00:39:44,480 --> 00:39:49,839
command line tools

00:39:47,119 --> 00:39:51,599
what about adding text into our videos

00:39:49,839 --> 00:39:53,680
to let the person watching

00:39:51,599 --> 00:39:55,280
know what's going on or how can they

00:39:53,680 --> 00:39:58,000
interact with the app

00:39:55,280 --> 00:39:59,839
well earlier we marked when interesting

00:39:58,000 --> 00:40:01,440
things were happening during our tests

00:39:59,839 --> 00:40:02,400
and i think that's also the right time

00:40:01,440 --> 00:40:05,200
to describe

00:40:02,400 --> 00:40:06,240
what's happening in the app you know for

00:40:05,200 --> 00:40:08,000
that given clip

00:40:06,240 --> 00:40:09,280
if we want to add that description in

00:40:08,000 --> 00:40:10,800
text to the video then

00:40:09,280 --> 00:40:12,800
this is a good time to make sure that

00:40:10,800 --> 00:40:15,440
we've got that text down

00:40:12,800 --> 00:40:16,400
so back to the test code one last time i

00:40:15,440 --> 00:40:18,800
promise

00:40:16,400 --> 00:40:21,599
when we were here last we introduced

00:40:18,800 --> 00:40:24,240
this metadata for each clip

00:40:21,599 --> 00:40:25,839
now we can modify the code so that along

00:40:24,240 --> 00:40:28,720
with the timing of the clip

00:40:25,839 --> 00:40:30,400
we add the text that we will add into

00:40:28,720 --> 00:40:33,680
the video

00:40:30,400 --> 00:40:35,760
all we're really doing here is pushing

00:40:33,680 --> 00:40:37,839
one extra string into the structure

00:40:35,760 --> 00:40:39,520
in my case i went with the text that

00:40:37,839 --> 00:40:41,599
will end up in the video but you could

00:40:39,520 --> 00:40:42,319
equally just put an id here if you want

00:40:41,599 --> 00:40:44,880
to keep

00:40:42,319 --> 00:40:47,599
the actual text you know separate in a

00:40:44,880 --> 00:40:50,880
translations provider for example

00:40:47,599 --> 00:40:52,079
and so this is what i end up with in my

00:40:50,880 --> 00:40:54,319
video timings json

00:40:52,079 --> 00:40:56,079
file with the clip text being alongside

00:40:54,319 --> 00:40:58,640
the start and end time of the

00:40:56,079 --> 00:41:00,640
clip great we've got the text we know

00:40:58,640 --> 00:41:02,560
which clips to go with

00:41:00,640 --> 00:41:05,119
but just throwing text up into a clip is

00:41:02,560 --> 00:41:07,920
boring we we can do better

00:41:05,119 --> 00:41:08,480
in imovie i use this fun text effect

00:41:07,920 --> 00:41:11,040
with

00:41:08,480 --> 00:41:11,760
kind of falling and fading going on

00:41:11,040 --> 00:41:13,200
again

00:41:11,760 --> 00:41:15,200
it would be more than good enough to

00:41:13,200 --> 00:41:17,760
have our text fade in or

00:41:15,200 --> 00:41:18,560
move in from one side but can we

00:41:17,760 --> 00:41:21,839
replicate this

00:41:18,560 --> 00:41:23,359
nice effect too there is a draw text

00:41:21,839 --> 00:41:24,960
filter in ffmpeg

00:41:23,359 --> 00:41:26,720
that does let us put text in the video

00:41:24,960 --> 00:41:28,880
and control some aspects of it like

00:41:26,720 --> 00:41:31,440
moving it over time

00:41:28,880 --> 00:41:33,040
we know how long our clip is and we can

00:41:31,440 --> 00:41:35,280
put our text in the central section of

00:41:33,040 --> 00:41:37,280
that without too much hassle so it's not

00:41:35,280 --> 00:41:39,200
right up at the edges of our time it'll

00:41:37,280 --> 00:41:40,240
just come in after you know half second

00:41:39,200 --> 00:41:41,680
and leave

00:41:40,240 --> 00:41:43,920
you know a second before the end of the

00:41:41,680 --> 00:41:43,920
clip

00:41:44,000 --> 00:41:47,359
but when we take a closer look at what's

00:41:46,480 --> 00:41:50,800
going on

00:41:47,359 --> 00:41:52,640
you know with this imovie uh effect

00:41:50,800 --> 00:41:54,319
we can see the first character of each

00:41:52,640 --> 00:41:54,880
word acts differently to the rest of the

00:41:54,319 --> 00:41:56,960
word

00:41:54,880 --> 00:41:58,000
so for each word i need to break it in

00:41:56,960 --> 00:42:00,240
two then perform

00:41:58,000 --> 00:42:01,040
two animations on each of those bits not

00:42:00,240 --> 00:42:02,640
to mention

00:42:01,040 --> 00:42:04,079
position each one of them correctly in

00:42:02,640 --> 00:42:07,280
the video

00:42:04,079 --> 00:42:08,720
i'm sure this is all doable and i found

00:42:07,280 --> 00:42:11,200
some encouraging info

00:42:08,720 --> 00:42:12,000
on how to move text over time in some

00:42:11,200 --> 00:42:14,640
stack over

00:42:12,000 --> 00:42:15,680
overflow comments but the positioning

00:42:14,640 --> 00:42:18,640
scares me a little

00:42:15,680 --> 00:42:19,520
on top of the transform for opacity in

00:42:18,640 --> 00:42:22,880
and out and

00:42:19,520 --> 00:42:26,240
you know the the translation of

00:42:22,880 --> 00:42:26,960
of position i think placement might be

00:42:26,240 --> 00:42:29,760
easier

00:42:26,960 --> 00:42:30,640
using something like svg manipulation i

00:42:29,760 --> 00:42:33,440
imagine

00:42:30,640 --> 00:42:36,319
uh cutting different svgs for each

00:42:33,440 --> 00:42:38,880
character or each run of characters

00:42:36,319 --> 00:42:40,400
and each svg uh would be the same width

00:42:38,880 --> 00:42:41,200
and height as the original video like we

00:42:40,400 --> 00:42:44,400
were doing with

00:42:41,200 --> 00:42:46,720
the screenshots i think this will let us

00:42:44,400 --> 00:42:49,119
get each bit of text that needs to be

00:42:46,720 --> 00:42:50,800
animating into the right place initially

00:42:49,119 --> 00:42:52,960
and then we can apply transforms to each

00:42:50,800 --> 00:42:54,880
of them individually

00:42:52,960 --> 00:42:57,440
over time and overlay the resulting

00:42:54,880 --> 00:42:58,960
videos on top of each other

00:42:57,440 --> 00:43:01,200
now this is where my brain has gotten to

00:42:58,960 --> 00:43:02,720
with this one but i'm keen to you know

00:43:01,200 --> 00:43:05,119
find the time to try and make it work at

00:43:02,720 --> 00:43:08,240
some point

00:43:05,119 --> 00:43:10,880
a quick note on adding the audio again

00:43:08,240 --> 00:43:13,359
it's very quick and an easily

00:43:10,880 --> 00:43:15,119
understandable ffmpeg command here

00:43:13,359 --> 00:43:17,599
in this case i've had an argument to

00:43:15,119 --> 00:43:19,040
shorten the audio so it's no longer than

00:43:17,599 --> 00:43:20,880
the video i'm adding it to

00:43:19,040 --> 00:43:22,240
as i'm adding the audio at the end of

00:43:20,880 --> 00:43:24,000
the process

00:43:22,240 --> 00:43:26,240
i'm not going to linger on this you know

00:43:24,000 --> 00:43:28,800
you can find out how to do

00:43:26,240 --> 00:43:31,520
fade in and fade out on audio and ffmpeg

00:43:28,800 --> 00:43:33,760
quite easily online

00:43:31,520 --> 00:43:35,200
um now let's talk about getting these

00:43:33,760 --> 00:43:37,280
beautiful masterpieces

00:43:35,200 --> 00:43:38,720
that we've created on the command line

00:43:37,280 --> 00:43:42,880
in an automated way

00:43:38,720 --> 00:43:44,480
in theory uploaded in an automated way

00:43:42,880 --> 00:43:46,000
we used deliver and supply to get our

00:43:44,480 --> 00:43:48,319
apps screenshots up

00:43:46,000 --> 00:43:50,319
and i had hoped that we could do the

00:43:48,319 --> 00:43:52,319
same thing for our videos

00:43:50,319 --> 00:43:53,680
alas neither of them can help us here

00:43:52,319 --> 00:43:57,119
sadly which is

00:43:53,680 --> 00:43:57,119
actually a little bit frustrating

00:43:57,839 --> 00:44:00,880
but there are ways around this to a

00:43:59,839 --> 00:44:03,119
certain extent

00:44:00,880 --> 00:44:03,920
spaceship is one of the underlying

00:44:03,119 --> 00:44:06,560
libraries

00:44:03,920 --> 00:44:07,680
that is part of fastlane and actually

00:44:06,560 --> 00:44:11,280
it's what deliver

00:44:07,680 --> 00:44:14,480
uses under the hood i found an example

00:44:11,280 --> 00:44:15,920
in uh get up issue um which is

00:44:14,480 --> 00:44:17,599
referenced by a few people

00:44:15,920 --> 00:44:19,680
of how to use spaceship to upload the

00:44:17,599 --> 00:44:21,839
app preview video to apple

00:44:19,680 --> 00:44:23,440
i've not tried it myself so i don't know

00:44:21,839 --> 00:44:24,800
if it actually works but it looks pretty

00:44:23,440 --> 00:44:28,079
promising

00:44:24,800 --> 00:44:28,560
a lot of likes um for the play store we

00:44:28,079 --> 00:44:31,200
actually

00:44:28,560 --> 00:44:32,240
needed a youtube video link now

00:44:31,200 --> 00:44:34,319
uploading to

00:44:32,240 --> 00:44:36,400
youtube programmatically is you know

00:44:34,319 --> 00:44:37,280
supported by their apis well documented

00:44:36,400 --> 00:44:40,480
online

00:44:37,280 --> 00:44:41,599
um but what i couldn't find a way to do

00:44:40,480 --> 00:44:44,160
programmatically was

00:44:41,599 --> 00:44:44,640
update the reference to that video in

00:44:44,160 --> 00:44:48,000
the

00:44:44,640 --> 00:44:48,480
google play store console um i feel like

00:44:48,000 --> 00:44:50,400
there's

00:44:48,480 --> 00:44:51,760
there's something missing from supply

00:44:50,400 --> 00:44:54,400
here and and there's

00:44:51,760 --> 00:44:56,319
you know maybe the potential for uh for

00:44:54,400 --> 00:44:57,040
a little open source pr from me at some

00:44:56,319 --> 00:44:59,599
point

00:44:57,040 --> 00:45:00,640
so how are we doing on this app store

00:44:59,599 --> 00:45:04,640
checklist that we

00:45:00,640 --> 00:45:06,000
uh started with well in theory we've got

00:45:04,640 --> 00:45:07,680
those great screenshots

00:45:06,000 --> 00:45:10,800
um that they're generated in all the

00:45:07,680 --> 00:45:12,880
forms we need whenever we push new code

00:45:10,800 --> 00:45:14,079
and we've got our premiere video being

00:45:12,880 --> 00:45:17,040
captured cut

00:45:14,079 --> 00:45:18,079
and beautified whenever we push new code

00:45:17,040 --> 00:45:21,200
and because we have

00:45:18,079 --> 00:45:23,599
automated all of this in theory

00:45:21,200 --> 00:45:25,119
we can scale up the number of languages

00:45:23,599 --> 00:45:27,440
we're getting our app out in

00:45:25,119 --> 00:45:28,319
not just functioning in but also

00:45:27,440 --> 00:45:30,319
appearing

00:45:28,319 --> 00:45:32,240
to the markets in their own languages on

00:45:30,319 --> 00:45:33,040
the app stores our features will reach

00:45:32,240 --> 00:45:34,880
our users

00:45:33,040 --> 00:45:38,079
and our app store listing can always be

00:45:34,880 --> 00:45:41,280
up to date and looking great

00:45:38,079 --> 00:45:42,160
in theory now i completely accept as an

00:45:41,280 --> 00:45:44,480
individual

00:45:42,160 --> 00:45:46,160
this is probably overkill the whole

00:45:44,480 --> 00:45:47,839
automation process

00:45:46,160 --> 00:45:49,200
um has been a brilliant way to

00:45:47,839 --> 00:45:52,560
procrastinate from

00:45:49,200 --> 00:45:55,200
actually doing any real features uh

00:45:52,560 --> 00:45:56,160
on the underworld helper app um but i'm

00:45:55,200 --> 00:45:57,839
okay with that

00:45:56,160 --> 00:45:59,440
now i get a kick out of automating this

00:45:57,839 --> 00:46:01,520
stuff and it is

00:45:59,440 --> 00:46:04,480
uh you know investigating things like

00:46:01,520 --> 00:46:08,000
this that i find helps me progress

00:46:04,480 --> 00:46:09,359
my actual career and my work

00:46:08,000 --> 00:46:11,680
and it's something that i genuinely find

00:46:09,359 --> 00:46:14,079
quite interesting

00:46:11,680 --> 00:46:14,800
so next time you find yourself manually

00:46:14,079 --> 00:46:17,119
doing

00:46:14,800 --> 00:46:17,920
something to get your app out there just

00:46:17,119 --> 00:46:20,000
take some time

00:46:17,920 --> 00:46:21,599
and think about whether you can automate

00:46:20,000 --> 00:46:23,359
it in the future

00:46:21,599 --> 00:46:29,839
and thank you for taking the time to

00:46:23,359 --> 00:46:29,839
listen to me

00:46:35,200 --> 00:46:39,119
okay thank you very much for that uh

00:46:37,359 --> 00:46:39,760
talk there paul i was fantastic there

00:46:39,119 --> 00:46:42,000
and i

00:46:39,760 --> 00:46:43,200
really learned a lot about ice cd and

00:46:42,000 --> 00:46:45,040
what you could do a lot of options i

00:46:43,200 --> 00:46:47,680
hadn't even really considered there

00:46:45,040 --> 00:46:49,040
especially with the automation of those

00:46:47,680 --> 00:46:50,720
kind of like videos etc i hadn't even

00:46:49,040 --> 00:46:53,760
thought of doing something like that

00:46:50,720 --> 00:46:54,319
um so if anyone has any questions we'll

00:46:53,760 --> 00:46:55,839
be

00:46:54,319 --> 00:46:57,359
asking them but i can see we've already

00:46:55,839 --> 00:46:57,920
got one initial question there from

00:46:57,359 --> 00:47:01,040
anders

00:46:57,920 --> 00:47:03,119
and it's a question i had myself as well

00:47:01,040 --> 00:47:04,079
so i've used detox a lot in the past and

00:47:03,119 --> 00:47:06,640
he wants to know

00:47:04,079 --> 00:47:07,440
what your thoughts are on using a human

00:47:06,640 --> 00:47:10,480
web driver

00:47:07,440 --> 00:47:14,079
compared to detox sure

00:47:10,480 --> 00:47:17,760
um so i'll be honest

00:47:14,079 --> 00:47:18,560
my own personal experience of detox is

00:47:17,760 --> 00:47:21,200
not

00:47:18,560 --> 00:47:22,079
you know fantastically deep so um take

00:47:21,200 --> 00:47:25,200
my opinion with

00:47:22,079 --> 00:47:27,440
a huge fist full of salt um the

00:47:25,200 --> 00:47:29,440
experience i have had with it wasn't

00:47:27,440 --> 00:47:30,960
massively positive at the time and you

00:47:29,440 --> 00:47:32,559
know i've seen some amazing companies

00:47:30,960 --> 00:47:36,079
doing some really cool stuff with it

00:47:32,559 --> 00:47:39,440
um in previous talks on on uh

00:47:36,079 --> 00:47:39,839
native london in fact but um yeah i

00:47:39,440 --> 00:47:42,720
found

00:47:39,839 --> 00:47:45,359
issues with having to recompile my app

00:47:42,720 --> 00:47:47,200
specifically to run my tests

00:47:45,359 --> 00:47:48,559
because of the fact that on ios for

00:47:47,200 --> 00:47:53,839
example it was using

00:47:48,559 --> 00:47:53,839
um the oh is it earl grey

00:48:00,960 --> 00:48:04,319
the way that it was running the test and

00:48:02,640 --> 00:48:06,559
there was also problems with

00:48:04,319 --> 00:48:07,839
um animations running during tests and

00:48:06,559 --> 00:48:10,720
things like that and especially

00:48:07,839 --> 00:48:12,640
for this case where i'm trying to take a

00:48:10,720 --> 00:48:13,839
cool video of my app with all of the

00:48:12,640 --> 00:48:17,200
funky things happening

00:48:13,839 --> 00:48:19,359
i also found some problems there so um

00:48:17,200 --> 00:48:20,240
but again that's just my experience and

00:48:19,359 --> 00:48:23,359
i'd love to see

00:48:20,240 --> 00:48:24,960
people doing this kind of thing with

00:48:23,359 --> 00:48:27,280
detox and telling me a bit more

00:48:24,960 --> 00:48:28,319
um about their own experiences with that

00:48:27,280 --> 00:48:30,319
so please um

00:48:28,319 --> 00:48:31,839
you know give me a shout if you uh if

00:48:30,319 --> 00:48:32,800
you do have any experience with that or

00:48:31,839 --> 00:48:34,079
if you try it out

00:48:32,800 --> 00:48:35,920
and find that you know there's better

00:48:34,079 --> 00:48:36,800
tooling for it personally i think it's

00:48:35,920 --> 00:48:38,640
going to have to be something i'm going

00:48:36,800 --> 00:48:39,920
to try as well i mean we use detox most

00:48:38,640 --> 00:48:43,040
of our projects here so

00:48:39,920 --> 00:48:45,599
i'll let you know how it goes um

00:48:43,040 --> 00:48:47,440
yeah uh so if anyone else has any

00:48:45,599 --> 00:48:50,240
questions uh ask them in there

00:48:47,440 --> 00:48:51,280
and i guess one of the things i was

00:48:50,240 --> 00:48:53,520
really interested in

00:48:51,280 --> 00:48:55,040
is you talked about potentially moving

00:48:53,520 --> 00:48:56,480
to github actions

00:48:55,040 --> 00:48:57,599
what do you see do you see any kind of

00:48:56,480 --> 00:48:59,040
like problems coming up with that

00:48:57,599 --> 00:49:00,640
process is it something you've tried to

00:48:59,040 --> 00:49:02,640
do yet or

00:49:00,640 --> 00:49:04,319
are you fairly confident in that switch

00:49:02,640 --> 00:49:05,839
over um

00:49:04,319 --> 00:49:07,599
i'm pretty confident that it will be

00:49:05,839 --> 00:49:08,079
fine to switch over it is a different

00:49:07,599 --> 00:49:09,920
way of

00:49:08,079 --> 00:49:12,160
thinking about things slightly in terms

00:49:09,920 --> 00:49:13,839
of you know how you're

00:49:12,160 --> 00:49:15,760
kicking off what you're doing and how

00:49:13,839 --> 00:49:17,440
you manage your your

00:49:15,760 --> 00:49:19,599
resources a little bit from the the kind

00:49:17,440 --> 00:49:21,359
of the server side um but it's only a

00:49:19,599 --> 00:49:24,720
minor shift away from

00:49:21,359 --> 00:49:26,400
what i'm thinking at the moment um

00:49:24,720 --> 00:49:27,839
and and what i'm doing at the moment and

00:49:26,400 --> 00:49:30,720
at the end of the day if

00:49:27,839 --> 00:49:31,200
i mean the repo um that this is linked

00:49:30,720 --> 00:49:32,480
to is

00:49:31,200 --> 00:49:35,200
it's open source you can find it on my

00:49:32,480 --> 00:49:36,480
github profile um so you can have a look

00:49:35,200 --> 00:49:38,480
at how i'm running this all at the

00:49:36,480 --> 00:49:42,079
moment but effectively my

00:49:38,480 --> 00:49:45,040
yaml for uh for travis at the moment

00:49:42,079 --> 00:49:45,760
does one thing for each you know command

00:49:45,040 --> 00:49:48,880
and that's run

00:49:45,760 --> 00:49:52,400
a script and that's the promise for

00:49:48,880 --> 00:49:54,240
cat um there you go bit marks

00:49:52,400 --> 00:49:56,400
there's a cat in the room um making

00:49:54,240 --> 00:49:59,040
noise uh

00:49:56,400 --> 00:50:02,000
but yeah so i i prefer to offload what

00:49:59,040 --> 00:50:04,800
i'm doing um in the ci scripts to being

00:50:02,000 --> 00:50:06,319
you know running in a bash or javascript

00:50:04,800 --> 00:50:07,920
or some some other language where i've

00:50:06,319 --> 00:50:10,160
got a bit more control rather than

00:50:07,920 --> 00:50:11,839
than relying on the cio framework

00:50:10,160 --> 00:50:14,319
necessarily

00:50:11,839 --> 00:50:16,160
yeah that makes complete sense to me and

00:50:14,319 --> 00:50:17,599
i guess i haven't tried doing that

00:50:16,160 --> 00:50:19,200
move over to github actions yet either

00:50:17,599 --> 00:50:22,079
so that is

00:50:19,200 --> 00:50:22,640
is something i'm keen to try now that

00:50:22,079 --> 00:50:25,760
makes

00:50:22,640 --> 00:50:28,160
complete sense to me um and so i guess

00:50:25,760 --> 00:50:28,880
kind of on the video side of things have

00:50:28,160 --> 00:50:30,640
you tried

00:50:28,880 --> 00:50:32,160
any like i guess especially things like

00:50:30,640 --> 00:50:33,440
the transitioning blur was that

00:50:32,160 --> 00:50:34,480
something you ended up trying to do in

00:50:33,440 --> 00:50:36,319
the end or is this just

00:50:34,480 --> 00:50:39,200
this over automation that's maybe too

00:50:36,319 --> 00:50:42,079
much of a level of procrastination

00:50:39,200 --> 00:50:43,200
yeah i you know what um i started

00:50:42,079 --> 00:50:44,960
writing

00:50:43,200 --> 00:50:46,559
just again a little bit of bash just to

00:50:44,960 --> 00:50:48,400
see you know if i throw this together

00:50:46,559 --> 00:50:49,280
with just a few really basic commands

00:50:48,400 --> 00:50:52,480
what what can

00:50:49,280 --> 00:50:54,720
what can i get out um

00:50:52,480 --> 00:50:56,720
the blur transition i i couldn't get

00:50:54,720 --> 00:50:57,599
working with the kind of the 10 minutes

00:50:56,720 --> 00:50:59,440
of

00:50:57,599 --> 00:51:00,960
brain space that i was allocating to it

00:50:59,440 --> 00:51:02,960
at the time um

00:51:00,960 --> 00:51:05,119
so i decided to put that down and wait

00:51:02,960 --> 00:51:06,640
for a day maybe over christmas when i've

00:51:05,119 --> 00:51:08,720
got some down time and can really

00:51:06,640 --> 00:51:09,680
you know have a play with it and and

00:51:08,720 --> 00:51:12,720
think it through a bit

00:51:09,680 --> 00:51:14,079
um i'm pretty sure it will work um it's

00:51:12,720 --> 00:51:16,480
just finding the right

00:51:14,079 --> 00:51:17,920
you know invocations and ffmpeg commands

00:51:16,480 --> 00:51:20,880
can become quite

00:51:17,920 --> 00:51:23,280
um quite dense um so all the ones that i

00:51:20,880 --> 00:51:24,800
put there in in the presentation

00:51:23,280 --> 00:51:26,559
you know that they're all nicely broken

00:51:24,800 --> 00:51:28,480
down because i'm doing them in a nice

00:51:26,559 --> 00:51:29,680
slideshow but realistically when i'm

00:51:28,480 --> 00:51:32,000
running these in

00:51:29,680 --> 00:51:33,280
a bash script it's just you know one

00:51:32,000 --> 00:51:34,800
horrible big line where i've

00:51:33,280 --> 00:51:36,800
got everything mashed together and i

00:51:34,800 --> 00:51:39,760
need to be a bit better with my own uh

00:51:36,800 --> 00:51:41,040
my own scripts um but yeah those

00:51:39,760 --> 00:51:42,800
commands can get pretty long if you're

00:51:41,040 --> 00:51:44,400
doing a lot of things in them and that

00:51:42,800 --> 00:51:46,160
particular transition i think would have

00:51:44,400 --> 00:51:47,520
a lot in it

00:51:46,160 --> 00:51:49,200
i'm exceptionally impressed i mean on a

00:51:47,520 --> 00:51:50,880
personal project yourself i ca

00:51:49,200 --> 00:51:52,400
i can't imagine keeping it too clean if

00:51:50,880 --> 00:51:55,760
it's if it's only yourself

00:51:52,400 --> 00:51:57,119
yeah well um thank you again for this

00:51:55,760 --> 00:52:00,960
fantastic talk

00:51:57,119 --> 00:52:04,000
um so up next we're gonna have ricardo

00:52:00,960 --> 00:52:07,440
from kadiri who is going to be

00:52:04,000 --> 00:52:09,359
doing some react coding challenges so

00:52:07,440 --> 00:52:10,880
uh stick around and hopefully we will do

00:52:09,359 --> 00:52:13,280
something different and get involved

00:52:10,880 --> 00:52:19,839
uh i'll put ricardo on a second to give

00:52:13,280 --> 00:52:19,839
you some more explanation

00:52:44,319 --> 00:52:48,160
hello again welcome back so let's do a

00:52:46,480 --> 00:52:50,240
bit of calling

00:52:48,160 --> 00:52:52,720
my name is ricardo i'm the founder of

00:52:50,240 --> 00:52:56,480
caudary which is an online

00:52:52,720 --> 00:52:58,240
gaming platform to help people with

00:52:56,480 --> 00:53:00,319
with the coding skills this is

00:52:58,240 --> 00:53:03,119
completely free non-profit

00:53:00,319 --> 00:53:04,880
so yeah today i would like to to to run

00:53:03,119 --> 00:53:09,040
some coding activities

00:53:04,880 --> 00:53:10,160
uh with paul and gavin and the idea will

00:53:09,040 --> 00:53:12,319
be to to

00:53:10,160 --> 00:53:14,160
deal with some technical issues with

00:53:12,319 --> 00:53:16,079
react so

00:53:14,160 --> 00:53:17,920
the format of the session is going to be

00:53:16,079 --> 00:53:21,040
as follows so

00:53:17,920 --> 00:53:21,839
if you please go to coding.com slash

00:53:21,040 --> 00:53:24,960
challenges

00:53:21,839 --> 00:53:28,079
or perhaps kodi.com on the left menu

00:53:24,960 --> 00:53:31,119
you select challenges you will find

00:53:28,079 --> 00:53:34,079
a series of of of games that

00:53:31,119 --> 00:53:35,920
we will have to face yeah don't worry if

00:53:34,079 --> 00:53:37,200
you've never touched a line of code

00:53:35,920 --> 00:53:39,040
as you can see we've got different

00:53:37,200 --> 00:53:40,839
difficulty levels so hopefully

00:53:39,040 --> 00:53:42,800
any of them will will shoot you your

00:53:40,839 --> 00:53:45,200
appetite uh let me just do

00:53:42,800 --> 00:53:46,640
a five-minute intro about how the

00:53:45,200 --> 00:53:48,000
platform works in case it's the first

00:53:46,640 --> 00:53:50,559
time you came across

00:53:48,000 --> 00:53:52,160
um so when you landed on caldery the

00:53:50,559 --> 00:53:54,800
first thing you'll see

00:53:52,160 --> 00:53:55,680
is the what we call the playground so

00:53:54,800 --> 00:53:58,559
here

00:53:55,680 --> 00:53:59,520
you will find a series of coding

00:53:58,559 --> 00:54:02,240
activities

00:53:59,520 --> 00:54:03,359
organized by language library or fringe

00:54:02,240 --> 00:54:04,240
as you can see on the left hand side of

00:54:03,359 --> 00:54:06,000
my screen

00:54:04,240 --> 00:54:07,839
and also difficulty level yes so we

00:54:06,000 --> 00:54:10,079
start from the very very basics

00:54:07,839 --> 00:54:12,079
and then obviously things get a bit more

00:54:10,079 --> 00:54:15,760
spicy yeah once we start

00:54:12,079 --> 00:54:18,079
progressing um so i would like to

00:54:15,760 --> 00:54:19,359
just do a quick demo to show you how how

00:54:18,079 --> 00:54:21,200
the platform looks like

00:54:19,359 --> 00:54:23,040
also that will help us to get used to

00:54:21,200 --> 00:54:24,240
the to the user interface the user

00:54:23,040 --> 00:54:25,440
experience and all these all these

00:54:24,240 --> 00:54:27,200
things

00:54:25,440 --> 00:54:28,960
because today we're talking about react

00:54:27,200 --> 00:54:30,559
so let's do something very very simple

00:54:28,960 --> 00:54:32,319
yeah just to get an idea about how it

00:54:30,559 --> 00:54:34,319
works so i'm gonna select react

00:54:32,319 --> 00:54:36,160
lower beginner and then you see we've

00:54:34,319 --> 00:54:37,680
got a bunch of topics

00:54:36,160 --> 00:54:40,799
so depending on what we want to play

00:54:37,680 --> 00:54:42,000
with uh displaying things communicating

00:54:40,799 --> 00:54:44,319
components you know

00:54:42,000 --> 00:54:45,280
depending on what on what we want to do

00:54:44,319 --> 00:54:48,880
today

00:54:45,280 --> 00:54:51,359
um but i would like to

00:54:48,880 --> 00:54:53,040
just you know show you a bit of of the

00:54:51,359 --> 00:54:55,920
interface so as you can see

00:54:53,040 --> 00:54:56,799
we get on the left hand side of the

00:54:55,920 --> 00:54:59,200
screen we got

00:54:56,799 --> 00:55:01,040
uh let me zoom it in a bit for

00:54:59,200 --> 00:55:02,720
readability purposes

00:55:01,040 --> 00:55:04,319
here we go so on the left hand side of

00:55:02,720 --> 00:55:07,760
my screen you can see we got a

00:55:04,319 --> 00:55:09,359
problem the problem is a please create a

00:55:07,760 --> 00:55:11,040
new component in react

00:55:09,359 --> 00:55:12,799
and the component is going to be called

00:55:11,040 --> 00:55:15,040
welcome so whenever

00:55:12,799 --> 00:55:16,799
we we connect with the component

00:55:15,040 --> 00:55:19,760
whenever we display it

00:55:16,799 --> 00:55:20,960
you as a developer you should display

00:55:19,760 --> 00:55:22,880
welcome to react yeah

00:55:20,960 --> 00:55:24,960
this is pretty fundamental but it will

00:55:22,880 --> 00:55:26,720
help me to to get used to to how react

00:55:24,960 --> 00:55:29,119
works in cases is the first time you

00:55:26,720 --> 00:55:30,319
you deal with it if that still sounds

00:55:29,119 --> 00:55:32,000
like chinese

00:55:30,319 --> 00:55:34,400
and you're not a chinese speaker you

00:55:32,000 --> 00:55:35,920
could a dedicated video in the majority

00:55:34,400 --> 00:55:39,200
of the questions helping you about how

00:55:35,920 --> 00:55:40,720
to deal with the fundamentals of react

00:55:39,200 --> 00:55:42,079
so on the right hand side because this

00:55:40,720 --> 00:55:42,880
is so simple we don't even need to do

00:55:42,079 --> 00:55:44,319
any coding

00:55:42,880 --> 00:55:46,559
so hopefully this is not going to be

00:55:44,319 --> 00:55:49,119
very intimidating uh

00:55:46,559 --> 00:55:51,280
however we got the the code partially

00:55:49,119 --> 00:55:51,680
created for you however you will find

00:55:51,280 --> 00:55:54,240
some

00:55:51,680 --> 00:55:54,799
placeholders and we just need to pick

00:55:54,240 --> 00:55:56,799
the

00:55:54,799 --> 00:55:59,280
the right choice right so as you can see

00:55:56,799 --> 00:56:01,119
here we need to select between a and b

00:55:59,280 --> 00:56:02,799
uh this is pretty basic right so the

00:56:01,119 --> 00:56:04,720
message is welcome to react if we pay

00:56:02,799 --> 00:56:05,839
attention we need to add an exclamation

00:56:04,720 --> 00:56:08,799
mark at the end of the string

00:56:05,839 --> 00:56:09,839
it means that we we didn't notice that

00:56:08,799 --> 00:56:11,680
tiny detail

00:56:09,839 --> 00:56:13,119
so we choose the wrong option we're

00:56:11,680 --> 00:56:13,520
going to react without the exclamation

00:56:13,119 --> 00:56:15,280
mark

00:56:13,520 --> 00:56:17,280
so let's see what happens you see the

00:56:15,280 --> 00:56:18,880
code gets red meaning like

00:56:17,280 --> 00:56:20,880
something is not quite right yeah the

00:56:18,880 --> 00:56:23,359
tests are not passing essentially

00:56:20,880 --> 00:56:25,599
once we pick the right option then the

00:56:23,359 --> 00:56:27,760
code becomes green and you get some

00:56:25,599 --> 00:56:29,520
sexy confetti time that means that yes

00:56:27,760 --> 00:56:31,680
all good all sorted

00:56:29,520 --> 00:56:33,200
so then we can submit to the next

00:56:31,680 --> 00:56:35,760
question so i'm not gonna

00:56:33,200 --> 00:56:36,640
solve the the upcoming ones you will

00:56:35,760 --> 00:56:38,960
notice that

00:56:36,640 --> 00:56:39,680
there are five questions per challenge

00:56:38,960 --> 00:56:42,400
yeah

00:56:39,680 --> 00:56:44,319
uh something important is at the end of

00:56:42,400 --> 00:56:46,240
the exercise we're gonna get a score

00:56:44,319 --> 00:56:47,760
depending on how good or how bad our

00:56:46,240 --> 00:56:49,680
performance was

00:56:47,760 --> 00:56:51,280
if you struggle with any of the

00:56:49,680 --> 00:56:54,079
questions

00:56:51,280 --> 00:56:55,520
i would like to invite you to skip it

00:56:54,079 --> 00:56:58,079
you can escape questions

00:56:55,520 --> 00:56:59,680
and before submitting the game you can

00:56:58,079 --> 00:57:01,440
revisit them right

00:56:59,680 --> 00:57:02,960
sometimes developers get stuck in a

00:57:01,440 --> 00:57:04,559
question and obviously

00:57:02,960 --> 00:57:06,480
they get penalized right so this is a

00:57:04,559 --> 00:57:08,400
bit about the strategy

00:57:06,480 --> 00:57:10,960
don't worry this is not a competition

00:57:08,400 --> 00:57:11,280
this is just a a healthy collaborative

00:57:10,960 --> 00:57:14,400
game

00:57:11,280 --> 00:57:14,960
is so but yeah but just i would like to

00:57:14,400 --> 00:57:16,799
give you

00:57:14,960 --> 00:57:19,040
this this kind of overview about how it

00:57:16,799 --> 00:57:20,480
works so

00:57:19,040 --> 00:57:22,079
if you like kodi you are more than

00:57:20,480 --> 00:57:23,839
invited to collaborate with us we are

00:57:22,079 --> 00:57:24,880
always looking for volunteers people

00:57:23,839 --> 00:57:26,640
helping adding new

00:57:24,880 --> 00:57:28,720
new games people helping we're

00:57:26,640 --> 00:57:29,839
translating the platform to i think 18

00:57:28,720 --> 00:57:31,680
languages

00:57:29,839 --> 00:57:33,119
so you know we are always looking for

00:57:31,680 --> 00:57:35,359
for people uh

00:57:33,119 --> 00:57:36,240
to help building the they call the world

00:57:35,359 --> 00:57:37,839
also if you like

00:57:36,240 --> 00:57:39,599
the metrics the statistics the

00:57:37,839 --> 00:57:41,599
competitive aspect of coding

00:57:39,599 --> 00:57:43,760
you'll find many things like for

00:57:41,599 --> 00:57:47,680
instance the leaderboards

00:57:43,760 --> 00:57:50,160
where you can see you know top players

00:57:47,680 --> 00:57:51,920
over the last period of time i'm sure

00:57:50,160 --> 00:57:53,599
some names there will be familiar to

00:57:51,920 --> 00:57:55,359
to many of you also the hall of fame

00:57:53,599 --> 00:57:57,359
right so who is the best developer today

00:57:55,359 --> 00:57:58,720
who's the best developer of the week you

00:57:57,359 --> 00:58:00,640
can see we've got developers from more

00:57:58,720 --> 00:58:04,400
than 100 countries

00:58:00,640 --> 00:58:07,040
uh best developers yeah by region

00:58:04,400 --> 00:58:08,880
top country so you got many many

00:58:07,040 --> 00:58:09,680
statistics in case you like this this

00:58:08,880 --> 00:58:12,000
kind of

00:58:09,680 --> 00:58:13,119
this kind of things right but yeah so

00:58:12,000 --> 00:58:14,880
let's crack on uh

00:58:13,119 --> 00:58:16,240
also i forgot something so we literally

00:58:14,880 --> 00:58:18,480
a few weeks ago we added something

00:58:16,240 --> 00:58:20,799
called interview quiz so if you want to

00:58:18,480 --> 00:58:21,520
get a new job so we had a new feature

00:58:20,799 --> 00:58:23,280
where

00:58:21,520 --> 00:58:25,200
we we simulate your part of a job

00:58:23,280 --> 00:58:25,680
interview so perhaps they will help you

00:58:25,200 --> 00:58:27,760
to

00:58:25,680 --> 00:58:29,200
to practice a bit with this kind of

00:58:27,760 --> 00:58:31,200
activities yeah

00:58:29,200 --> 00:58:32,880
all right so let's jump straight to the

00:58:31,200 --> 00:58:34,720
challenges

00:58:32,880 --> 00:58:36,480
it's good you can see that some people

00:58:34,720 --> 00:58:38,240
is already participating

00:58:36,480 --> 00:58:39,839
feel free to pick any of the levels of

00:58:38,240 --> 00:58:41,119
course because this is a react day so

00:58:39,839 --> 00:58:43,920
i'll i'll

00:58:41,119 --> 00:58:45,440
like the csu to pick the the react

00:58:43,920 --> 00:58:47,839
stream lane first

00:58:45,440 --> 00:58:50,400
but once you finish the challenge feel

00:58:47,839 --> 00:58:52,000
free to jump to another one you got

00:58:50,400 --> 00:58:53,520
some react challenges at the bottom as

00:58:52,000 --> 00:58:54,960
well sorry some javascript vanilla i

00:58:53,520 --> 00:58:56,640
just keep challenging you so let's let's

00:58:54,960 --> 00:58:57,760
just do some coding and let's have some

00:58:56,640 --> 00:59:00,799
fun

00:58:57,760 --> 00:59:04,000
while you deal with the questions here

00:59:00,799 --> 00:59:06,319
uh paul gavin and myself we're gonna

00:59:04,000 --> 00:59:07,280
we're gonna solve some of these some of

00:59:06,319 --> 00:59:10,079
these problems

00:59:07,280 --> 00:59:11,839
and at the end of the activity uh at the

00:59:10,079 --> 00:59:12,880
end of activity which is gonna be in 45

00:59:11,839 --> 00:59:16,240
minutes

00:59:12,880 --> 00:59:19,359
we are gonna present the results

00:59:16,240 --> 00:59:22,079
so once you select a

00:59:19,359 --> 00:59:22,960
given challenge so let me pick yes to

00:59:22,079 --> 00:59:26,000
warm up a bit

00:59:22,960 --> 00:59:27,280
react lower beginner uh i'll go back to

00:59:26,000 --> 00:59:29,760
that to these charts

00:59:27,280 --> 00:59:30,960
at the end but for now once you select

00:59:29,760 --> 00:59:32,640
the challenge so the

00:59:30,960 --> 00:59:34,720
the first decision you have to take is

00:59:32,640 --> 00:59:36,880
which team are you joining right

00:59:34,720 --> 00:59:38,240
so once hopefully we get vaccines we'll

00:59:36,880 --> 00:59:39,920
go back to

00:59:38,240 --> 00:59:42,240
our on-site events and we'll be able to

00:59:39,920 --> 00:59:45,280
set up proper themes and have proper

00:59:42,240 --> 00:59:46,079
collaborative coding but for now for now

00:59:45,280 --> 00:59:48,960
let's just select

00:59:46,079 --> 00:59:50,799
uh a random theme yeah depending on

00:59:48,960 --> 00:59:53,520
whether you like french or you prefer

00:59:50,799 --> 00:59:55,359
french or italian cuisine and then at

00:59:53,520 --> 00:59:59,040
the end of the game we'll see

00:59:55,359 --> 01:00:02,160
we'll see which kind of food lovers have

00:59:59,040 --> 01:00:05,119
the better ability for coding yeah

01:00:02,160 --> 01:00:06,079
so once you pick a team then we start

01:00:05,119 --> 01:00:08,000
the challenge so

01:00:06,079 --> 01:00:09,680
let's have a look to what we got on

01:00:08,000 --> 01:00:12,720
question number

01:00:09,680 --> 01:00:14,960
one uh you are

01:00:12,720 --> 01:00:17,119
more than invited to participate this is

01:00:14,960 --> 01:00:20,400
an interactive session so please

01:00:17,119 --> 01:00:22,079
drop questions on youtube uh

01:00:20,400 --> 01:00:24,559
and then we'll be more than happy to go

01:00:22,079 --> 01:00:26,480
through them sometimes this is not just

01:00:24,559 --> 01:00:28,319
about finding the right option but

01:00:26,480 --> 01:00:29,760
finding the right approach right so

01:00:28,319 --> 01:00:30,559
we'll see that even if we solve the

01:00:29,760 --> 01:00:32,720
question

01:00:30,559 --> 01:00:34,079
we may revisit it and we may change and

01:00:32,720 --> 01:00:36,160
we may have a

01:00:34,079 --> 01:00:37,839
you know just a healthy discussion about

01:00:36,160 --> 01:00:40,880
different coding styles

01:00:37,839 --> 01:00:42,559
and techniques yeah so

01:00:40,880 --> 01:00:44,160
question number one let's let's have a

01:00:42,559 --> 01:00:46,240
look to

01:00:44,160 --> 01:00:47,359
what the question is so first of all on

01:00:46,240 --> 01:00:50,480
the left hand side

01:00:47,359 --> 01:00:50,799
so this is about building uh some sort

01:00:50,480 --> 01:00:52,799
of

01:00:50,799 --> 01:00:54,160
i don't know signup form where you enter

01:00:52,799 --> 01:00:57,040
your details

01:00:54,160 --> 01:00:59,359
and eventually you need to accept the

01:00:57,040 --> 01:01:00,559
terms and conditions right so

01:00:59,359 --> 01:01:01,680
something like that so you get a

01:01:00,559 --> 01:01:03,280
checkbox and you need to take the

01:01:01,680 --> 01:01:05,920
checkbox right

01:01:03,280 --> 01:01:08,079
so in this particular case everything is

01:01:05,920 --> 01:01:11,359
pretty much built we just need to

01:01:08,079 --> 01:01:14,880
fill some missing

01:01:11,359 --> 01:01:18,079
selectors so not sure if either gavin

01:01:14,880 --> 01:01:21,280
or paul you want to to suggest

01:01:18,079 --> 01:01:23,440
for instance in the first placeholder

01:01:21,280 --> 01:01:25,359
which will be the right options if you

01:01:23,440 --> 01:01:28,480
want to i was just saying

01:01:25,359 --> 01:01:33,280
before we started all of this that uh uh

01:01:28,480 --> 01:01:33,280
my my react web is pretty rustic

01:01:35,119 --> 01:01:39,280
so that's my excuse uh i don't know what

01:01:37,440 --> 01:01:43,200
evans is

01:01:39,280 --> 01:01:44,720
similar very similar yes um

01:01:43,200 --> 01:01:46,079
i'm just trying to figure out what all

01:01:44,720 --> 01:01:46,720
it does on the left hand side at the

01:01:46,079 --> 01:01:48,400
moment

01:01:46,720 --> 01:01:50,240
yeah so i was going to say recorded on

01:01:48,400 --> 01:01:53,280
the left hand side is this using

01:01:50,240 --> 01:01:56,480
um the testing library

01:01:53,280 --> 01:01:59,200
for these tests on the left-hand side

01:01:56,480 --> 01:02:00,319
um at the moment we are using enzyme or

01:01:59,200 --> 01:02:04,000
using enzyme okay

01:02:00,319 --> 01:02:04,960
yeah but still if we let's let's try to

01:02:04,000 --> 01:02:08,160
break it down right

01:02:04,960 --> 01:02:08,160
so sorry

01:02:09,039 --> 01:02:13,280
yeah yeah so you can see the left hand

01:02:12,640 --> 01:02:17,280
side that

01:02:13,280 --> 01:02:19,920
we need to select a couple of input

01:02:17,280 --> 01:02:20,799
input text sorry check boxes so you can

01:02:19,920 --> 01:02:23,200
see that

01:02:20,799 --> 01:02:25,039
the first one input checkbox it has a

01:02:23,200 --> 01:02:27,359
class name so this is just

01:02:25,039 --> 01:02:28,880
a classic css selector right so

01:02:27,359 --> 01:02:32,160
regardless of whether we use

01:02:28,880 --> 01:02:34,160
enzyme or react testing library

01:02:32,160 --> 01:02:35,680
you know this this hasn't changed at all

01:02:34,160 --> 01:02:36,480
right so as you can see in the first

01:02:35,680 --> 01:02:38,880
case

01:02:36,480 --> 01:02:39,760
we need to find an input with an

01:02:38,880 --> 01:02:41,680
attribute

01:02:39,760 --> 01:02:43,200
type checkbox which is you know we need

01:02:41,680 --> 01:02:46,640
to tick it uh

01:02:43,200 --> 01:02:50,160
and then that dot implies that element

01:02:46,640 --> 01:02:53,760
will have a class called terms right

01:02:50,160 --> 01:02:57,280
so visually speaking

01:02:53,760 --> 01:03:00,720
i will either select either option a

01:02:57,280 --> 01:03:02,720
or option b because that's the

01:03:00,720 --> 01:03:04,640
essentially the first input we are

01:03:02,720 --> 01:03:08,400
looking for right

01:03:04,640 --> 01:03:12,000
but the question is in react do we

01:03:08,400 --> 01:03:14,559
use the keyword class or class name

01:03:12,000 --> 01:03:17,680
that's the keyword right

01:03:14,559 --> 01:03:18,319
uh so as obviously many of you know we

01:03:17,680 --> 01:03:20,000
are going to use

01:03:18,319 --> 01:03:21,520
class name right because class is a

01:03:20,000 --> 01:03:25,200
keyword in javascript

01:03:21,520 --> 01:03:26,240
starting from 2015 es6 so react doesn't

01:03:25,200 --> 01:03:27,599
really like it yeah

01:03:26,240 --> 01:03:29,200
at least if it's your first date with

01:03:27,599 --> 01:03:30,640
react if you're building an app and you

01:03:29,200 --> 01:03:32,720
use class

01:03:30,640 --> 01:03:33,839
the console will throw a nice error

01:03:32,720 --> 01:03:35,520
message that will

01:03:33,839 --> 01:03:36,880
guide you towards how to fix the problem

01:03:35,520 --> 01:03:38,079
i think this is one of the beautiful

01:03:36,880 --> 01:03:41,039
things about react

01:03:38,079 --> 01:03:42,640
even if we fail react will often drive

01:03:41,039 --> 01:03:43,440
you towards finding the right solution

01:03:42,640 --> 01:03:45,920
all right

01:03:43,440 --> 01:03:47,039
so let's pick class name terms then on

01:03:45,920 --> 01:03:48,319
the second place holder

01:03:47,039 --> 01:03:50,079
speeding but the same thing right so

01:03:48,319 --> 01:03:53,359
it's going to be class name

01:03:50,079 --> 01:03:55,359
news okay so

01:03:53,359 --> 01:03:57,200
let's test it and see if we got confetti

01:03:55,359 --> 01:03:59,920
or not

01:03:57,200 --> 01:04:01,359
here we go confetti time right so yeah i

01:03:59,920 --> 01:04:03,839
think that that's that's pretty

01:04:01,359 --> 01:04:04,559
that's pretty simple right uh the only

01:04:03,839 --> 01:04:06,880
thing i

01:04:04,559 --> 01:04:08,319
i could personally disagree in this

01:04:06,880 --> 01:04:12,799
exercise

01:04:08,319 --> 01:04:16,000
is uh like we're using single quotes to

01:04:12,799 --> 01:04:19,520
deal with the attributes in jsx

01:04:16,000 --> 01:04:21,920
that's not very standard i'm afraid

01:04:19,520 --> 01:04:23,920
if you follow the majority of the

01:04:21,920 --> 01:04:25,520
styling guides like airbnb

01:04:23,920 --> 01:04:27,280
and many others they will recommend to

01:04:25,520 --> 01:04:30,480
use dowel quotes because it's more

01:04:27,280 --> 01:04:32,799
html standard right let pretty it decide

01:04:30,480 --> 01:04:32,799
and and

01:04:33,520 --> 01:04:37,839
exactly that would fit your desire yeah

01:04:35,359 --> 01:04:38,640
yeah yeah okay fair enough so yeah i

01:04:37,839 --> 01:04:40,559
mean

01:04:38,640 --> 01:04:42,079
i think that that's enough for the lower

01:04:40,559 --> 01:04:43,520
beginner right this was just to warm up

01:04:42,079 --> 01:04:44,559
a bit let's do something slightly more

01:04:43,520 --> 01:04:47,839
complicated

01:04:44,559 --> 01:04:49,280
so i'm gonna just leave the challenge by

01:04:47,839 --> 01:04:51,760
the way they mentioned that but if you

01:04:49,280 --> 01:04:54,000
if you get tired this is too simple or

01:04:51,760 --> 01:04:55,920
too complicated you can always

01:04:54,000 --> 01:04:58,000
leave the challenge so you see that i

01:04:55,920 --> 01:05:00,319
can leave you sure yes

01:04:58,000 --> 01:05:02,400
and then uh you'll go back to you'll be

01:05:00,319 --> 01:05:03,119
redirected to the to the side and jsbu

01:05:02,400 --> 01:05:05,760
all right

01:05:03,119 --> 01:05:07,039
so now let's pick the upper beginner

01:05:05,760 --> 01:05:08,799
which still is quite

01:05:07,039 --> 01:05:10,240
quite simple but in this case we need to

01:05:08,799 --> 01:05:11,920
do a bit more coding right so it's going

01:05:10,240 --> 01:05:14,960
to be a bit more entertaining

01:05:11,920 --> 01:05:16,960
hopefully so let me pick italian food is

01:05:14,960 --> 01:05:19,520
in this location

01:05:16,960 --> 01:05:20,640
and look this is this is that free text

01:05:19,520 --> 01:05:22,559
on the right hand side now

01:05:20,640 --> 01:05:24,559
yes now it's three tests now we can do

01:05:22,559 --> 01:05:27,599
now we can do whatever we want right

01:05:24,559 --> 01:05:29,440
now it gets changed exactly exactly so

01:05:27,599 --> 01:05:31,359
the exercise by itself is not

01:05:29,440 --> 01:05:33,839
more complicated than what we saw before

01:05:31,359 --> 01:05:34,640
but we can fail easily right because we

01:05:33,839 --> 01:05:36,319
need to do

01:05:34,640 --> 01:05:38,079
everything by ourselves not placeholders

01:05:36,319 --> 01:05:40,400
anymore all right

01:05:38,079 --> 01:05:41,920
so what we got here is we are expected

01:05:40,400 --> 01:05:44,000
to create a welcome component

01:05:41,920 --> 01:05:45,839
you remember we did in the demo we ran a

01:05:44,000 --> 01:05:47,440
few minutes ago it was kind of similar

01:05:45,839 --> 01:05:49,760
in this occasion the main difference

01:05:47,440 --> 01:05:52,000
is we need to have a look today what the

01:05:49,760 --> 01:05:55,280
problem is on the left hand side so

01:05:52,000 --> 01:05:58,160
this component is supposed to have

01:05:55,280 --> 01:05:59,520
two paragraphs the first one is gonna

01:05:58,160 --> 01:06:01,280
say the welcome

01:05:59,520 --> 01:06:04,720
and the second one is gonna say to react

01:06:01,280 --> 01:06:07,280
yeah the code is partially filled so

01:06:04,720 --> 01:06:09,760
you know all we need to do unless you

01:06:07,280 --> 01:06:11,599
disagree on that is probably just adding

01:06:09,760 --> 01:06:12,799
another paragraph and then i'm gonna

01:06:11,599 --> 01:06:15,599
have a question for

01:06:12,799 --> 01:06:17,359
uh gavin and paul and no excuses there

01:06:15,599 --> 01:06:20,240
are no excuses in this time

01:06:17,359 --> 01:06:22,720
so the question is is this going to work

01:06:20,240 --> 01:06:22,720
yes or no

01:06:23,359 --> 01:06:26,880
you know it's definitely going to work

01:06:25,839 --> 01:06:29,039
but part of me is

01:06:26,880 --> 01:06:30,480
revolting and going you put it in text

01:06:29,039 --> 01:06:33,839
elements otherwise it's not going to be

01:06:30,480 --> 01:06:33,839
this is

01:06:35,119 --> 01:06:38,799
all right all right all right all right

01:06:37,839 --> 01:06:41,039
let's assume that

01:06:38,799 --> 01:06:42,559
the structure the structure of the html

01:06:41,039 --> 01:06:43,520
that obviously you are probably not that

01:06:42,559 --> 01:06:44,960
used to is correct

01:06:43,520 --> 01:06:47,119
let's assume that everything is correct

01:06:44,960 --> 01:06:50,799
let's purely focus

01:06:47,119 --> 01:06:53,920
on the content oh it's the capsular

01:06:50,799 --> 01:06:55,760
ah brilliant nice one i mean exactly

01:06:53,920 --> 01:06:58,240
that's not gonna work i'm afraid

01:06:55,760 --> 01:06:58,880
i mean if if that works i'm gonna quit

01:06:58,240 --> 01:07:00,960
my job

01:06:58,880 --> 01:07:03,119
and i'm gonna go back to spain to have

01:07:00,960 --> 01:07:06,000
some holidays

01:07:03,119 --> 01:07:07,039
so look you see it doesn't work and yeah

01:07:06,000 --> 01:07:10,240
as kevin said look

01:07:07,039 --> 01:07:12,319
expected to react to equal to react so

01:07:10,240 --> 01:07:13,520
one of the one of the the things that we

01:07:12,319 --> 01:07:14,079
should obviously take it into

01:07:13,520 --> 01:07:15,200
consideration

01:07:14,079 --> 01:07:16,960
i'm sure pretty much the same thing

01:07:15,200 --> 01:07:17,920
applies to react native is that in the

01:07:16,960 --> 01:07:20,160
javascript wall

01:07:17,920 --> 01:07:21,599
you know everything is case sensitive so

01:07:20,160 --> 01:07:25,280
we need to be careful with this

01:07:21,599 --> 01:07:28,640
little little details right all right so

01:07:25,280 --> 01:07:30,559
yeah let's let's just uh let's just

01:07:28,640 --> 01:07:31,920
change it to a capital r and then

01:07:30,559 --> 01:07:34,640
hopefully that

01:07:31,920 --> 01:07:36,480
should work yeah it's fine any

01:07:34,640 --> 01:07:38,720
suggestion guys anything you will change

01:07:36,480 --> 01:07:38,720
here

01:07:38,799 --> 01:07:42,319
looks very simple no it's very simple

01:07:41,119 --> 01:07:44,240
right i mean

01:07:42,319 --> 01:07:45,599
you could refactor it slightly so that

01:07:44,240 --> 01:07:48,480
you don't have uh

01:07:45,599 --> 01:07:49,359
it be a functional a function you could

01:07:48,480 --> 01:07:53,359
make that a

01:07:49,359 --> 01:07:53,359
uh a const welcome

01:07:53,760 --> 01:07:56,240
because that way we can get rid of the

01:07:55,039 --> 01:07:58,400
return statement because we can have

01:07:56,240 --> 01:08:01,520
this be a nice

01:07:58,400 --> 01:08:03,039
inline function nice nice nice nice so

01:08:01,520 --> 01:08:04,799
let's do baby steps first of all let's

01:08:03,039 --> 01:08:05,839
see if it works using a cons right and

01:08:04,799 --> 01:08:08,960
then we'll we'll

01:08:05,839 --> 01:08:10,960
get rid of the return statement yes

01:08:08,960 --> 01:08:13,119
fantastic so once it works following

01:08:10,960 --> 01:08:15,920
paul's advice i'm gonna

01:08:13,119 --> 01:08:17,440
remove the return statement and then it

01:08:15,920 --> 01:08:21,359
should be something like that

01:08:17,440 --> 01:08:25,120
um look let me show you something

01:08:21,359 --> 01:08:27,679
that should work but

01:08:25,120 --> 01:08:28,880
let's pay attention guys to the elegance

01:08:27,679 --> 01:08:31,839
console you will see

01:08:28,880 --> 01:08:33,679
you will see in 35 minutes that some

01:08:31,839 --> 01:08:36,719
developers will lose points

01:08:33,679 --> 01:08:40,159
because of ignoring our

01:08:36,719 --> 01:08:42,560
linting guidelines yeah i

01:08:40,159 --> 01:08:44,319
understand some of these guidelines are

01:08:42,560 --> 01:08:47,440
controversial some of the

01:08:44,319 --> 01:08:48,880
guidelines are slightly opinionated but

01:08:47,440 --> 01:08:50,400
rules are rules and these rules are

01:08:48,880 --> 01:08:51,279
public right and we're telling you we're

01:08:50,400 --> 01:08:53,600
telling you

01:08:51,279 --> 01:08:54,799
we expect you to use the right

01:08:53,600 --> 01:08:56,880
indentation here right

01:08:54,799 --> 01:08:58,400
so because we remove the return

01:08:56,880 --> 01:09:01,600
statement just

01:08:58,400 --> 01:09:03,759
you know let's do things in in a in a

01:09:01,600 --> 01:09:04,839
reasonably right way right so if we try

01:09:03,759 --> 01:09:08,560
again it

01:09:04,839 --> 01:09:11,279
works um i got

01:09:08,560 --> 01:09:12,799
something to add here i'm not sure

01:09:11,279 --> 01:09:16,159
whether we really need that

01:09:12,799 --> 01:09:17,839
the surrounding deep element right

01:09:16,159 --> 01:09:19,759
definitely we need to put something

01:09:17,839 --> 01:09:21,679
right i mean if we get rid of it

01:09:19,759 --> 01:09:24,719
completely react is gonna complain

01:09:21,679 --> 01:09:26,560
yeah because we've got two root elements

01:09:24,719 --> 01:09:28,960
but i'm not sure how you solve how you

01:09:26,560 --> 01:09:32,000
solve the guys explaining react native

01:09:28,960 --> 01:09:34,080
um well we would use a fragment

01:09:32,000 --> 01:09:35,520
yeah a fragment a framing correct

01:09:34,080 --> 01:09:36,880
correct correct correct framing means

01:09:35,520 --> 01:09:40,000
that we can either use

01:09:36,880 --> 01:09:40,400
an explicit fragment like old times

01:09:40,000 --> 01:09:42,159
right

01:09:40,400 --> 01:09:43,759
let's see if it works first of all as if

01:09:42,159 --> 01:09:46,799
it works

01:09:43,759 --> 01:09:48,719
yes and of course we can refactor it by

01:09:46,799 --> 01:09:51,839
just keeping an empty tag yeah

01:09:48,719 --> 01:09:54,880
yeah that's what i'm looking for

01:09:51,839 --> 01:09:56,800
yes yes yes yes nice it still works yeah

01:09:54,880 --> 01:09:58,320
i know that maybe what some developers

01:09:56,800 --> 01:10:00,560
may think yeah but that's

01:09:58,320 --> 01:10:03,360
such a subtle detail who cares right i'm

01:10:00,560 --> 01:10:06,320
probably they are right but the thing is

01:10:03,360 --> 01:10:07,600
one of the main issues and this is my

01:10:06,320 --> 01:10:08,880
personal touch but

01:10:07,600 --> 01:10:11,520
one of the main issues i found when

01:10:08,880 --> 01:10:15,199
dealing with large-scale applications

01:10:11,520 --> 01:10:19,040
in terms of performance is memory

01:10:15,199 --> 01:10:20,239
and memory is often related not only but

01:10:19,040 --> 01:10:22,400
it's often related

01:10:20,239 --> 01:10:24,239
to the number of dom elements that the

01:10:22,400 --> 01:10:25,280
application has and many of them are

01:10:24,239 --> 01:10:27,360
necessary

01:10:25,280 --> 01:10:28,560
yeah so that's a good way to keep your

01:10:27,360 --> 01:10:31,520
code

01:10:28,560 --> 01:10:32,480
as simple as possible if an element is

01:10:31,520 --> 01:10:35,120
not necessary

01:10:32,480 --> 01:10:35,920
if an element is not adding any value to

01:10:35,120 --> 01:10:38,960
the app

01:10:35,920 --> 01:10:41,679
then remove it what's the point right

01:10:38,960 --> 01:10:41,679
anything else guys

01:10:42,159 --> 01:10:46,400
that looks clear to me yeah cool

01:10:44,560 --> 01:10:47,040
fantastic nice one good chat guys good

01:10:46,400 --> 01:10:49,120
shot

01:10:47,040 --> 01:10:50,239
uh let's do one more if you want and

01:10:49,120 --> 01:10:53,440
then we'll jump to the

01:10:50,239 --> 01:10:55,040
to the hardcore hardcore level so

01:10:53,440 --> 01:10:57,280
oh i love this question i love this

01:10:55,040 --> 01:10:59,440
question so in mind that we are creating

01:10:57,280 --> 01:11:02,960
the next multi-billion app

01:10:59,440 --> 01:11:04,960
and we want to create a component to

01:11:02,960 --> 01:11:07,679
welcome our users right

01:11:04,960 --> 01:11:10,000
uh because of a reason our database has

01:11:07,679 --> 01:11:12,320
partial details about our users

01:11:10,000 --> 01:11:14,640
we got for instance the full name of

01:11:12,320 --> 01:11:15,760
some users but perhaps some some users

01:11:14,640 --> 01:11:19,760
are connecting

01:11:15,760 --> 01:11:22,080
using an external service and we

01:11:19,760 --> 01:11:22,880
don't have all the details so long story

01:11:22,080 --> 01:11:24,880
short

01:11:22,880 --> 01:11:26,000
long story short so in mind that if we

01:11:24,880 --> 01:11:29,199
got the the

01:11:26,000 --> 01:11:30,800
last name of the user we the message

01:11:29,199 --> 01:11:33,360
will be welcome mr

01:11:30,800 --> 01:11:34,880
last name yeah if we don't have the last

01:11:33,360 --> 01:11:36,400
name of the user

01:11:34,880 --> 01:11:38,560
but we have the first name let's assume

01:11:36,400 --> 01:11:40,560
that we have at least the last

01:11:38,560 --> 01:11:42,400
the first name sorry then we'll just

01:11:40,560 --> 01:11:45,360
we'll simply play welcome and first name

01:11:42,400 --> 01:11:45,840
yeah so i think that the problem is

01:11:45,360 --> 01:11:48,320
pretty

01:11:45,840 --> 01:11:50,400
simple from a human point of view now

01:11:48,320 --> 01:11:50,880
let's try to translate that simplicity

01:11:50,400 --> 01:11:54,400
into

01:11:50,880 --> 01:11:56,480
into the coding side so thankfully the

01:11:54,400 --> 01:11:57,840
code is partially created i'm sure you

01:11:56,480 --> 01:11:58,640
are thinking about how to improve it

01:11:57,840 --> 01:12:01,840
already

01:11:58,640 --> 01:12:03,120
but i suggest before doing tricks let's

01:12:01,840 --> 01:12:05,520
just try to get the

01:12:03,120 --> 01:12:07,120
green bill to get the confetti and paul

01:12:05,520 --> 01:12:09,280
unless you want to set something

01:12:07,120 --> 01:12:10,960
i'm curious again about the left hand

01:12:09,280 --> 01:12:13,679
side so we've got all these

01:12:10,960 --> 01:12:14,159
um prefabricated tests that are going to

01:12:13,679 --> 01:12:15,679
tell us

01:12:14,159 --> 01:12:18,080
you know whether we're passing are we

01:12:15,679 --> 01:12:20,400
able to add our own tests

01:12:18,080 --> 01:12:21,199
um like additional ones that's a good

01:12:20,400 --> 01:12:22,400
point no

01:12:21,199 --> 01:12:24,239
i'm afraid at the moment we are not

01:12:22,400 --> 01:12:26,159
supporting that capability but yeah yeah

01:12:24,239 --> 01:12:27,440
that actually this is this is definitely

01:12:26,159 --> 01:12:28,880
the road map

01:12:27,440 --> 01:12:30,719
yeah platforms like hacker rank they

01:12:28,880 --> 01:12:32,080
they do that and that's great so yeah

01:12:30,719 --> 01:12:34,239
that's that's a good point that's a good

01:12:32,080 --> 01:12:37,280
point thank you very much paul

01:12:34,239 --> 01:12:37,600
all right so for now let's stick to to

01:12:37,280 --> 01:12:40,560
this

01:12:37,600 --> 01:12:42,719
use this use case scenarios uh the

01:12:40,560 --> 01:12:46,000
algorithm again is almost there so

01:12:42,719 --> 01:12:46,880
welcome we receive some props uh and

01:12:46,000 --> 01:12:49,040
then

01:12:46,880 --> 01:12:50,080
what the algorithm says if we got the

01:12:49,040 --> 01:12:52,480
last name then

01:12:50,080 --> 01:12:54,159
return what it would be something like

01:12:52,480 --> 01:12:57,199
welcome

01:12:54,159 --> 01:13:00,239
mister props

01:12:57,199 --> 01:13:03,280
last name right there get some

01:13:00,239 --> 01:13:05,600
curly braces in there

01:13:03,280 --> 01:13:07,280
yeah we want to interpolate right to

01:13:05,600 --> 01:13:09,920
yeah translate

01:13:07,280 --> 01:13:11,120
that into a proper value okay fair

01:13:09,920 --> 01:13:13,360
enough and then pretty much

01:13:11,120 --> 01:13:14,320
you know the same criteria right in the

01:13:13,360 --> 01:13:16,800
other use case

01:13:14,320 --> 01:13:17,520
props dot first something like that

01:13:16,800 --> 01:13:19,360
right

01:13:17,520 --> 01:13:22,400
what do you think guys will this work

01:13:19,360 --> 01:13:22,400
any typos are you

01:13:24,239 --> 01:13:27,760
it looks like it should work to me okay

01:13:26,480 --> 01:13:31,360
yeah agree on that

01:13:27,760 --> 01:13:33,840
let's let's test it okay yeah

01:13:31,360 --> 01:13:35,280
nice nice it works no elegance warnings

01:13:33,840 --> 01:13:38,400
but now the obvious question is

01:13:35,280 --> 01:13:40,320
will you leave it like that i'm sure i'm

01:13:38,400 --> 01:13:44,000
sure paul is already thinking about

01:13:40,320 --> 01:13:46,640
something right uh so i guess

01:13:44,000 --> 01:13:47,840
following what you said before uh let's

01:13:46,640 --> 01:13:50,080
see

01:13:47,840 --> 01:13:51,360
yeah one i mean in this case do we need

01:13:50,080 --> 01:13:54,400
to transform it because

01:13:51,360 --> 01:13:56,320
um i'm actually i'm a big fan of

01:13:54,400 --> 01:13:57,679
using if we've got a you know a

01:13:56,320 --> 01:13:59,040
component in a file especially if you

01:13:57,679 --> 01:14:00,320
want to export that as the default

01:13:59,040 --> 01:14:01,920
component

01:14:00,320 --> 01:14:03,280
i'm a big fan of leaving it as a as

01:14:01,920 --> 01:14:05,199
declared as a function because you can

01:14:03,280 --> 01:14:06,960
export default

01:14:05,199 --> 01:14:08,239
function in in one line whereas if you

01:14:06,960 --> 01:14:09,760
apply it as a const you then have to

01:14:08,239 --> 01:14:12,640
have that default export

01:14:09,760 --> 01:14:14,000
and i think in this case we we might

01:14:12,640 --> 01:14:15,120
want to put some you know we might have

01:14:14,000 --> 01:14:18,239
some logic in here

01:14:15,120 --> 01:14:20,800
as well before we have our

01:14:18,239 --> 01:14:22,480
um rendering and if you've got that then

01:14:20,800 --> 01:14:25,520
again having a body in the function

01:14:22,480 --> 01:14:27,840
makes sense so i reckon we can start

01:14:25,520 --> 01:14:28,880
optimizing this in an in another place

01:14:27,840 --> 01:14:30,239
um

01:14:28,880 --> 01:14:32,239
but the first thing i would do if i've

01:14:30,239 --> 01:14:33,600
got props coming in is probably

01:14:32,239 --> 01:14:36,640
destructure the props

01:14:33,600 --> 01:14:39,679
inside the the function argument

01:14:36,640 --> 01:14:42,080
yeah that's a good point so let's just

01:14:39,679 --> 01:14:45,120
use first name and last name right then

01:14:42,080 --> 01:14:48,480
we avoid the hassle of typing props

01:14:45,120 --> 01:14:49,360
dot 47 times right okay so now obviously

01:14:48,480 --> 01:14:52,400
let's get rid of

01:14:49,360 --> 01:14:55,199
to any any reference to the props object

01:14:52,400 --> 01:14:57,040
oh sorry uh fantastic let's see if it

01:14:55,199 --> 01:15:00,800
works first of all

01:14:57,040 --> 01:15:00,800
yes of course what else

01:15:02,400 --> 01:15:05,760
um we could switch i mean i guess

01:15:04,560 --> 01:15:06,960
someone's the last one to switch to

01:15:05,760 --> 01:15:08,400
using fragments that's probably quite a

01:15:06,960 --> 01:15:11,440
nice easy one

01:15:08,400 --> 01:15:13,760
fragments be careful i i

01:15:11,440 --> 01:15:15,120
i'm not sure if i agree on that it's not

01:15:13,760 --> 01:15:17,600
got a p tag

01:15:15,120 --> 01:15:19,600
or you've only got a div there yeah yeah

01:15:17,600 --> 01:15:20,159
exactly the thing is a fragment is very

01:15:19,600 --> 01:15:23,679
helpful

01:15:20,159 --> 01:15:24,000
when you are trying to return multiple

01:15:23,679 --> 01:15:27,120
root

01:15:24,000 --> 01:15:29,920
elements but in reality in here we got

01:15:27,120 --> 01:15:31,280
a single root element it could be either

01:15:29,920 --> 01:15:34,640
this one

01:15:31,280 --> 01:15:36,480
or that one and this either

01:15:34,640 --> 01:15:38,080
we kind of come back full circle to what

01:15:36,480 --> 01:15:39,840
i was saying earlier because

01:15:38,080 --> 01:15:41,520
we could make this so that we don't need

01:15:39,840 --> 01:15:42,640
a body we don't need any logic because

01:15:41,520 --> 01:15:45,040
we could add

01:15:42,640 --> 01:15:46,080
the if statement to being really a

01:15:45,040 --> 01:15:49,040
ternary within

01:15:46,080 --> 01:15:50,000
a um say an interpolated string or

01:15:49,040 --> 01:15:52,320
something like that

01:15:50,000 --> 01:15:53,760
fantastic fantastic fantastic let's try

01:15:52,320 --> 01:15:57,360
that paul so

01:15:53,760 --> 01:16:00,080
what paul is listening here is return

01:15:57,360 --> 01:16:01,040
last name then let's do baby steps if

01:16:00,080 --> 01:16:04,080
you don't mind so

01:16:01,040 --> 01:16:06,480
okay yeah i see we i see we going okay

01:16:04,080 --> 01:16:08,080
so does the first use cases scenario and

01:16:06,480 --> 01:16:10,880
then this is the other one

01:16:08,080 --> 01:16:12,880
right and then we can get rid of that so

01:16:10,880 --> 01:16:15,760
if that works

01:16:12,880 --> 01:16:17,040
if that works which it does now what

01:16:15,760 --> 01:16:17,520
policy is thinking correctly if i'm

01:16:17,040 --> 01:16:19,280
wrong

01:16:17,520 --> 01:16:21,280
now we can transform it into a constant

01:16:19,280 --> 01:16:22,800
function and then we can return it

01:16:21,280 --> 01:16:23,280
straight away right to simplify things a

01:16:22,800 --> 01:16:26,320
bit

01:16:23,280 --> 01:16:30,159
let's see that yes fantastic fantastic

01:16:26,320 --> 01:16:32,320
so yeah let me

01:16:30,159 --> 01:16:34,000
let me use the parenthesis for now and

01:16:32,320 --> 01:16:37,199
then we'll see what else can

01:16:34,000 --> 01:16:39,120
we do guys i got a question for

01:16:37,199 --> 01:16:40,320
from a styling point of view what do you

01:16:39,120 --> 01:16:41,920
do in this kind of

01:16:40,320 --> 01:16:43,920
scenarios do you put a parenthesis do

01:16:41,920 --> 01:16:46,159
you just leave it like that or

01:16:43,920 --> 01:16:47,920
whatever i wouldn't put a parenthesis

01:16:46,159 --> 01:16:50,320
because that's what pretty would force

01:16:47,920 --> 01:16:50,320
me to do

01:16:54,159 --> 01:16:58,960
okay fair enough all right uh yeah uh

01:16:57,280 --> 01:16:59,920
you'll also need to move that semicolon

01:16:58,960 --> 01:17:03,040
though i think

01:16:59,920 --> 01:17:04,560
yes yeah yes yes so that that that

01:17:03,040 --> 01:17:05,920
shouldn't work right because now we are

01:17:04,560 --> 01:17:07,360
returning the expression so the

01:17:05,920 --> 01:17:09,199
semicolon is not a law

01:17:07,360 --> 01:17:10,400
so if we test it it should fail so let's

01:17:09,199 --> 01:17:12,400
see if it fails

01:17:10,400 --> 01:17:14,000
correct it fails fantastic so let's get

01:17:12,400 --> 01:17:17,120
rid of it and now

01:17:14,000 --> 01:17:21,040
it should uh should this

01:17:17,120 --> 01:17:24,080
work uh okay

01:17:21,040 --> 01:17:30,560
all right uh i didn't see that

01:17:24,080 --> 01:17:33,679
you're not gonna eat all right

01:17:30,560 --> 01:17:36,159
ah at the beginning sorry sorry that's

01:17:33,679 --> 01:17:40,560
yeah sorry guys

01:17:36,159 --> 01:17:41,920
sorry yeah i calling right

01:17:40,560 --> 01:17:43,600
it works now obviously we got the

01:17:41,920 --> 01:17:46,640
missing semicolon at the very end

01:17:43,600 --> 01:17:49,600
and then yeah okay all good

01:17:46,640 --> 01:17:50,480
any further improvements well we could

01:17:49,600 --> 01:17:54,320
probably have it be

01:17:50,480 --> 01:17:58,320
one div block rather than two

01:17:54,320 --> 01:18:00,640
and put the ternary inside the div

01:17:58,320 --> 01:18:01,679
good question that's a really good point

01:18:00,640 --> 01:18:04,800
so

01:18:01,679 --> 01:18:07,760
we can have the ternary inside so we

01:18:04,800 --> 01:18:09,280
avoid the hassle of creating two dips

01:18:07,760 --> 01:18:13,840
but

01:18:09,280 --> 01:18:13,840
do we really need div at all

01:18:15,440 --> 01:18:20,320
if we check the the the appetite of the

01:18:19,520 --> 01:18:23,440
test

01:18:20,320 --> 01:18:26,080
it's not referring to any particular

01:18:23,440 --> 01:18:26,880
structure dom structure of divs or

01:18:26,080 --> 01:18:28,400
paragraphs

01:18:26,880 --> 01:18:30,320
i mean i'll do something if i put the

01:18:28,400 --> 01:18:34,159
label it's a wall right

01:18:30,320 --> 01:18:38,000
so why don't we return just a string

01:18:34,159 --> 01:18:41,600
to simplify our logic so

01:18:38,000 --> 01:18:44,080
can we can we do something like that

01:18:41,600 --> 01:18:44,080
let me

01:18:49,440 --> 01:18:54,239
see so we use the string interpolation

01:18:52,480 --> 01:18:55,600
or template literals to just

01:18:54,239 --> 01:18:56,880
you know return a couple of strings

01:18:55,600 --> 01:18:58,159
right i mean let's see if it works first

01:18:56,880 --> 01:19:02,080
of all

01:18:58,159 --> 01:19:02,480
yeah still works so what i was thinking

01:19:02,080 --> 01:19:06,480
was

01:19:02,480 --> 01:19:09,600
we um we always return

01:19:06,480 --> 01:19:11,199
one string uh with the welcome at the

01:19:09,600 --> 01:19:11,679
beginning and then we put the ternary

01:19:11,199 --> 01:19:14,400
inside

01:19:11,679 --> 01:19:14,880
fantastic fantastic i i love that i love

01:19:14,400 --> 01:19:16,239
that

01:19:14,880 --> 01:19:18,080
and yeah so that's a really good point

01:19:16,239 --> 01:19:20,960
what happened if tomorrow our

01:19:18,080 --> 01:19:22,080
business analyst decides to change from

01:19:20,960 --> 01:19:23,760
welcome to

01:19:22,080 --> 01:19:25,199
high right we need to change it two

01:19:23,760 --> 01:19:26,800
times which is error prone

01:19:25,199 --> 01:19:28,320
so let's avoid cold application i think

01:19:26,800 --> 01:19:29,760
that's i agree with you paul that's a a

01:19:28,320 --> 01:19:30,800
fundamental principle in software

01:19:29,760 --> 01:19:32,960
development right

01:19:30,800 --> 01:19:34,159
so then based on what you said well we

01:19:32,960 --> 01:19:37,840
can see

01:19:34,159 --> 01:19:39,760
what we can say is uh

01:19:37,840 --> 01:19:42,480
we can get rid of everything right and

01:19:39,760 --> 01:19:45,199
then we do the we do the tricks

01:19:42,480 --> 01:19:46,960
in here right so we can say if i got the

01:19:45,199 --> 01:19:51,840
last name

01:19:46,960 --> 01:19:55,679
then uh mr

01:19:51,840 --> 01:19:58,320
last name i believe right and then else

01:19:55,679 --> 01:19:58,320
first name

01:20:00,560 --> 01:20:08,159
so see if it works yep

01:20:04,320 --> 01:20:10,690
cool anything else guys yeah that looks

01:20:08,159 --> 01:20:13,120
like a a beautiful component compared to

01:20:10,690 --> 01:20:14,800
[Laughter]

01:20:13,120 --> 01:20:16,960
personally at this point it would take

01:20:14,800 --> 01:20:18,560
away the

01:20:16,960 --> 01:20:20,400
uh brackets and probably crew at all is

01:20:18,560 --> 01:20:22,159
just like an inline

01:20:20,400 --> 01:20:24,080
string return just because it's so short

01:20:22,159 --> 01:20:26,480
but yeah i guess

01:20:24,080 --> 01:20:28,159
yeah let's try that again that's a good

01:20:26,480 --> 01:20:29,760
one let's try that let's see what happen

01:20:28,159 --> 01:20:32,000
if we put everything i'm assuming your

01:20:29,760 --> 01:20:33,440
elegance is going to complain ah

01:20:32,000 --> 01:20:36,000
brilliant brilliant because it's

01:20:33,440 --> 01:20:38,480
slightly overlapping the the energy

01:20:36,000 --> 01:20:40,560
limit is there on that yeah yeah so i

01:20:38,480 --> 01:20:44,000
think we got a

01:20:40,560 --> 01:20:45,199
hard character 75 character limit which

01:20:44,000 --> 01:20:48,400
is a bit

01:20:45,199 --> 01:20:49,679
aggressive but it's a way to force

01:20:48,400 --> 01:20:53,040
people to write

01:20:49,679 --> 01:20:54,400
you know called you know some developers

01:20:53,040 --> 01:20:55,040
they say no but look today we've got

01:20:54,400 --> 01:20:57,840
like a

01:20:55,040 --> 01:20:59,520
47 inch screen i got a spacing off but

01:20:57,840 --> 01:21:00,400
in reality i'm sure we are all dealing

01:20:59,520 --> 01:21:02,480
with multiple

01:21:00,400 --> 01:21:04,960
files and different columns so i think

01:21:02,480 --> 01:21:08,320
it remains a good practice to to keep

01:21:04,960 --> 01:21:10,960
everything shorter the better right

01:21:08,320 --> 01:21:13,120
in my head your uncle bob telling me to

01:21:10,960 --> 01:21:15,520
do this do this as clean code right

01:21:13,120 --> 01:21:16,880
yeah exactly exactly exactly i mean

01:21:15,520 --> 01:21:18,480
don't get me wrong

01:21:16,880 --> 01:21:19,920
of course it will work right it looks

01:21:18,480 --> 01:21:22,480
weird because of ah

01:21:19,920 --> 01:21:23,840
sorry closing brackets so the closing

01:21:22,480 --> 01:21:26,880
bracket of course yeah

01:21:23,840 --> 01:21:28,000
so yeah eventually it will work but as

01:21:26,880 --> 01:21:30,960
gavin said we got

01:21:28,000 --> 01:21:31,679
this line has a length of 98 max hello

01:21:30,960 --> 01:21:34,800
is 75

01:21:31,679 --> 01:21:37,760
all right so yeah cool

01:21:34,800 --> 01:21:38,320
all right guys so we got 22 minutes left

01:21:37,760 --> 01:21:39,920
so

01:21:38,320 --> 01:21:41,679
let's do something a bit more

01:21:39,920 --> 01:21:46,639
complicated if you don't mind

01:21:41,679 --> 01:21:47,760
yeah so back to the challenge space

01:21:46,639 --> 01:21:50,080
interesting there's quite a lot of

01:21:47,760 --> 01:21:51,679
people doing javascript of course some

01:21:50,080 --> 01:21:53,679
people doing react no one's doing upper

01:21:51,679 --> 01:21:55,600
intermediate

01:21:53,679 --> 01:21:57,040
but let's let's let's give it a go right

01:21:55,600 --> 01:21:57,840
let's see let's see what we got here i

01:21:57,040 --> 01:22:01,040
mean

01:21:57,840 --> 01:22:01,520
the the upper intended level is mostly

01:22:01,040 --> 01:22:05,760
about

01:22:01,520 --> 01:22:10,159
dealing with state uh handling props

01:22:05,760 --> 01:22:12,080
transforming data a bit of basic routing

01:22:10,159 --> 01:22:13,280
you know that kind of thing nothing

01:22:12,080 --> 01:22:15,199
particularly crazy

01:22:13,280 --> 01:22:17,120
right for for for professional

01:22:15,199 --> 01:22:20,320
developers at least

01:22:17,120 --> 01:22:20,719
all right so what we got question number

01:22:20,320 --> 01:22:22,960
one

01:22:20,719 --> 01:22:24,719
okay that's uh that's that's an easy one

01:22:22,960 --> 01:22:26,960
right which is good to start with

01:22:24,719 --> 01:22:28,080
so what we got here is we need to build

01:22:26,960 --> 01:22:31,600
a component

01:22:28,080 --> 01:22:34,159
with a couple of elements so a button

01:22:31,600 --> 01:22:35,600
and a label and the thing is the button

01:22:34,159 --> 01:22:39,280
will have a text press me

01:22:35,600 --> 01:22:41,520
fantastic and the label will reflect

01:22:39,280 --> 01:22:42,800
whether the button has been pressed or

01:22:41,520 --> 01:22:46,320
not yeah

01:22:42,800 --> 01:22:48,239
by default the label will have a text

01:22:46,320 --> 01:22:49,440
button not pressed yet as soon as we

01:22:48,239 --> 01:22:51,199
press the button

01:22:49,440 --> 01:22:52,560
the text will change to button already

01:22:51,199 --> 01:22:54,719
press yeah you know

01:22:52,560 --> 01:22:55,679
nothing really complicated but you know

01:22:54,719 --> 01:22:58,400
we need to

01:22:55,679 --> 01:22:58,800
to look after a couple of things so yeah

01:22:58,400 --> 01:23:02,080
uh

01:22:58,800 --> 01:23:05,040
first thing is uh guys would you use a

01:23:02,080 --> 01:23:05,040
class or not

01:23:05,280 --> 01:23:09,600
i'll let gavin juice choose this one

01:23:08,239 --> 01:23:10,880
yeah i think it's fine to use a class

01:23:09,600 --> 01:23:11,360
here at the moment i mean it's set up

01:23:10,880 --> 01:23:14,719
like that

01:23:11,360 --> 01:23:16,080
right now so yeah but okay

01:23:14,719 --> 01:23:18,080
in mind we've got nothing here you mind

01:23:16,080 --> 01:23:18,320
that you you have to build yeah okay i

01:23:18,080 --> 01:23:20,239
got

01:23:18,320 --> 01:23:22,000
your point right so the exercise is a

01:23:20,239 --> 01:23:24,080
bit opinionated it's telling you

01:23:22,000 --> 01:23:25,679
please use a class but in mind that you

01:23:24,080 --> 01:23:27,440
got freedom right if you got to build

01:23:25,679 --> 01:23:29,520
everything from scratch

01:23:27,440 --> 01:23:32,000
honestly now everything probably with

01:23:29,520 --> 01:23:34,480
her do functional component

01:23:32,000 --> 01:23:36,080
is what i would tend to do yeah i'd

01:23:34,480 --> 01:23:37,360
start with a functional component and

01:23:36,080 --> 01:23:41,199
only convert to a class

01:23:37,360 --> 01:23:42,800
if i felt like there was uh

01:23:41,199 --> 01:23:44,320
the class made something more readable

01:23:42,800 --> 01:23:45,040
and i have had instances where that is

01:23:44,320 --> 01:23:48,480
the case

01:23:45,040 --> 01:23:49,840
um where something does end up where a

01:23:48,480 --> 01:23:53,360
class can be more readable but

01:23:49,840 --> 01:23:56,000
99 of what i'm writing now is all

01:23:53,360 --> 01:23:56,560
yeah i agree i completely with you guys

01:23:56,000 --> 01:24:00,400
i know

01:23:56,560 --> 01:24:03,760
that some developers out there they said

01:24:00,400 --> 01:24:05,520
if you're code if your component becomes

01:24:03,760 --> 01:24:07,920
more complex

01:24:05,520 --> 01:24:09,120
then the class becomes more readable and

01:24:07,920 --> 01:24:11,280
that's probably true

01:24:09,120 --> 01:24:13,120
but the question is why the hell your

01:24:11,280 --> 01:24:14,560
component is complex right

01:24:13,120 --> 01:24:17,679
if your component is complex probably

01:24:14,560 --> 01:24:21,199
you should break it down rather than

01:24:17,679 --> 01:24:22,639
yeah makes sense all right so guys let's

01:24:21,199 --> 01:24:26,000
let's just use uh this is

01:24:22,639 --> 01:24:29,199
some hooks right so good constant press

01:24:26,000 --> 01:24:30,880
me and then any props not at all right

01:24:29,199 --> 01:24:32,880
this is a nice kind of an isolated

01:24:30,880 --> 01:24:36,239
component

01:24:32,880 --> 01:24:39,360
so let's use a restructuring here uh

01:24:36,239 --> 01:24:40,960
this let's create uh let's create a uh i

01:24:39,360 --> 01:24:44,159
don't know let's create a

01:24:40,960 --> 01:24:47,920
state variable so uh any any any

01:24:44,159 --> 01:24:47,920
preferences for dynamic conventions

01:24:48,480 --> 01:24:55,040
uh well this is going to go

01:24:51,600 --> 01:24:58,400
in a label right yeah

01:24:55,040 --> 01:25:02,320
well we got exactly what two options we

01:24:58,400 --> 01:25:05,679
either save the label the text

01:25:02,320 --> 01:25:07,280
or we save a flag a switch a boolean

01:25:05,679 --> 01:25:10,880
i was just thinking about the naming of

01:25:07,280 --> 01:25:13,600
the um of the output of the use date so

01:25:10,880 --> 01:25:15,199
um we we either make it relevant to the

01:25:13,600 --> 01:25:17,920
label or relevant to the button i think

01:25:15,199 --> 01:25:19,440
i'd say maybe more makes more sense if

01:25:17,920 --> 01:25:21,760
you're recording as a boolean to say

01:25:19,440 --> 01:25:22,560
button pressed or button uh something

01:25:21,760 --> 01:25:25,840
like that

01:25:22,560 --> 01:25:27,679
yep and set and pressed as the uh

01:25:25,840 --> 01:25:28,960
yeah good point good point yeah yeah

01:25:27,679 --> 01:25:32,159
yeah

01:25:28,960 --> 01:25:33,360
so i'm curious um with people who are on

01:25:32,159 --> 01:25:36,480
the live stream at the moment

01:25:33,360 --> 01:25:38,080
um you know show us in the chat like

01:25:36,480 --> 01:25:39,440
would you have gone down this route that

01:25:38,080 --> 01:25:40,800
we're going down with the functional

01:25:39,440 --> 01:25:42,719
component or would you

01:25:40,800 --> 01:25:45,600
um have stuck with the class so do let

01:25:42,719 --> 01:25:45,600
us know in the live chat

01:25:47,360 --> 01:25:50,159
i think what interests me to start with

01:25:48,639 --> 01:25:50,560
is the fact that we that you went for

01:25:50,159 --> 01:25:52,080
the

01:25:50,560 --> 01:25:53,600
true false i would have instantly gone

01:25:52,080 --> 01:25:54,719
for the string there and really

01:25:53,600 --> 01:25:55,600
considered the button press i would have

01:25:54,719 --> 01:25:58,800
gone for the string

01:25:55,600 --> 01:26:01,120
press me to yeah

01:25:58,800 --> 01:26:02,719
my only concern about using a string is

01:26:01,120 --> 01:26:05,199
what if

01:26:02,719 --> 01:26:06,480
you want to reuse that logic somewhere

01:26:05,199 --> 01:26:08,400
else in mind that

01:26:06,480 --> 01:26:10,000
we want to change the styling of the

01:26:08,400 --> 01:26:11,600
button yeah if the button is pressed

01:26:10,000 --> 01:26:12,560
we're going to split in green color

01:26:11,600 --> 01:26:14,639
whatever yeah

01:26:12,560 --> 01:26:15,760
i think having the low level mechanism

01:26:14,639 --> 01:26:18,000
having the boolean

01:26:15,760 --> 01:26:19,840
will help us to to extend the

01:26:18,000 --> 01:26:20,880
functionality of of the component

01:26:19,840 --> 01:26:24,880
perhaps

01:26:20,880 --> 01:26:25,280
yeah makes sense okay so by default i

01:26:24,880 --> 01:26:26,880
think

01:26:25,280 --> 01:26:28,159
yeah the default state is obviously the

01:26:26,880 --> 01:26:29,920
button hasn't been pressed right

01:26:28,159 --> 01:26:33,840
otherwise it would be a bit a bit a bit

01:26:29,920 --> 01:26:36,400
strange and now let's let's do a bit of

01:26:33,840 --> 01:26:36,960
a bit of logic underneath so return what

01:26:36,400 --> 01:26:38,320
we got

01:26:36,960 --> 01:26:40,639
what we got we got two things right we

01:26:38,320 --> 01:26:42,880
got a button and a label so let me just

01:26:40,639 --> 01:26:45,360
straight to the the fragment look at the

01:26:42,880 --> 01:26:47,199
button we'll see how to bind the

01:26:45,360 --> 01:26:48,639
logic of the button in a minute but for

01:26:47,199 --> 01:26:50,239
now we got the button and then we got

01:26:48,639 --> 01:26:54,080
the label

01:26:50,239 --> 01:26:57,440
as well the order doesn't really matter

01:26:54,080 --> 01:27:00,239
the button has effects right so uh

01:26:57,440 --> 01:27:00,719
what's the text yeah press me yeah yeah

01:27:00,239 --> 01:27:04,080
yeah

01:27:00,719 --> 01:27:07,199
and then here look at the label

01:27:04,080 --> 01:27:10,639
and the message will be just

01:27:07,199 --> 01:27:14,239
not pressed yet yeah

01:27:10,639 --> 01:27:18,719
okay so yeah button

01:27:14,239 --> 01:27:20,080
not pressed yet right so

01:27:18,719 --> 01:27:22,239
if we run the test like this what the

01:27:20,080 --> 01:27:25,280
first two tests should

01:27:22,239 --> 01:27:25,600
pass well it's one test right right is

01:27:25,280 --> 01:27:26,719
it

01:27:25,600 --> 01:27:28,480
are you going to get anything through

01:27:26,719 --> 01:27:29,920
there saying that the final expect

01:27:28,480 --> 01:27:33,840
failed or

01:27:29,920 --> 01:27:33,840
yeah so you try that

01:27:34,080 --> 01:27:37,840
uh yeah that's expected right so you're

01:27:36,960 --> 01:27:39,520
right it

01:27:37,840 --> 01:27:41,120
started working working working working

01:27:39,520 --> 01:27:42,719
working but it fell on the last line

01:27:41,120 --> 01:27:44,480
because we expected the text to be

01:27:42,719 --> 01:27:47,440
button already pressed but obviously we

01:27:44,480 --> 01:27:50,239
are not dealing with that scenario yet

01:27:47,440 --> 01:27:52,719
all right so any any suggestions about

01:27:50,239 --> 01:27:54,639
how to proceed next

01:27:52,719 --> 01:27:56,639
well we could do the logic for the label

01:27:54,639 --> 01:27:57,520
for if button not pressed yet it could

01:27:56,639 --> 01:28:00,400
do and

01:27:57,520 --> 01:28:02,000
uh ternary there as well i'd like to

01:28:00,400 --> 01:28:02,960
actually start with the button actually

01:28:02,000 --> 01:28:05,360
being pressed because

01:28:02,960 --> 01:28:07,040
okay um i think i think that's kind of

01:28:05,360 --> 01:28:08,080
the more interesting part to a certain

01:28:07,040 --> 01:28:11,199
extent because

01:28:08,080 --> 01:28:15,040
we need to actually um

01:28:11,199 --> 01:28:19,280
change that state variable right um

01:28:15,040 --> 01:28:22,960
yeah i agree with you paul so we call it

01:28:19,280 --> 01:28:26,719
what one click right yep click on press

01:28:22,960 --> 01:28:28,960
press the synthetic events rather than

01:28:26,719 --> 01:28:31,360
the js events

01:28:28,960 --> 01:28:32,800
yes yes exactly because we're doing web

01:28:31,360 --> 01:28:34,400
so yeah i could be on on click

01:28:32,800 --> 01:28:39,679
definitely and click

01:28:34,400 --> 01:28:42,400
and now i know what

01:28:39,679 --> 01:28:43,920
well so yeah if we're trying to do it

01:28:42,400 --> 01:28:45,520
basically to start with let's do orlando

01:28:43,920 --> 01:28:47,120
rather than like a separate function

01:28:45,520 --> 01:28:48,639
outside i don't know whether to

01:28:47,120 --> 01:28:50,639
start with the more basic one and then

01:28:48,639 --> 01:28:51,840
we can refactor to the yeah let's start

01:28:50,639 --> 01:28:53,840
basic yeah yeah so

01:28:51,840 --> 01:28:54,880
what we'll do here you'll do something

01:28:53,840 --> 01:28:57,040
like that and now

01:28:54,880 --> 01:28:58,000
yeah and then we can just do set button

01:28:57,040 --> 01:29:02,080
press to

01:28:58,000 --> 01:29:03,679
true yep

01:29:02,080 --> 01:29:05,120
i don't think the exercise is

01:29:03,679 --> 01:29:06,560
opinionated about what happens if you

01:29:05,120 --> 01:29:07,679
click on the button multiple times it

01:29:06,560 --> 01:29:10,159
doesn't say whether

01:29:07,679 --> 01:29:11,360
we should switch it on and off but just

01:29:10,159 --> 01:29:12,560
agree with you let's keep it simple

01:29:11,360 --> 01:29:13,600
right i mean if you wanted to we could

01:29:12,560 --> 01:29:16,320
do the exclamation mark

01:29:13,600 --> 01:29:17,760
exactly we could exactly exactly exactly

01:29:16,320 --> 01:29:20,719
all right fantastic yeah

01:29:17,760 --> 01:29:24,239
and now is this what should we do here

01:29:20,719 --> 01:29:27,679
with the with the label

01:29:24,239 --> 01:29:29,600
uh so we we're changing between

01:29:27,679 --> 01:29:31,679
button not pressed yet and button

01:29:29,600 --> 01:29:32,239
already pressed with an exclamation mark

01:29:31,679 --> 01:29:36,159
at the end

01:29:32,239 --> 01:29:37,840
yep yep um those are both um pretty

01:29:36,159 --> 01:29:39,440
separate strings they only really share

01:29:37,840 --> 01:29:40,560
the beginning word so i don't think it's

01:29:39,440 --> 01:29:42,719
worth

01:29:40,560 --> 01:29:44,159
trying to encapsulate in there and yeah

01:29:42,719 --> 01:29:45,840
i think for clarity

01:29:44,159 --> 01:29:47,520
i would probably put those as two

01:29:45,840 --> 01:29:49,760
different variables up

01:29:47,520 --> 01:29:51,360
above the return statement and then

01:29:49,760 --> 01:29:53,440
switch them in

01:29:51,360 --> 01:29:54,800
okay so you'll make to create two

01:29:53,440 --> 01:29:56,320
variables yeah

01:29:54,800 --> 01:29:57,920
like that's the way that i would go with

01:29:56,320 --> 01:30:07,600
it i think button

01:29:57,920 --> 01:30:10,880
pressed message something like that

01:30:07,600 --> 01:30:12,560
of course if we're building a big uh app

01:30:10,880 --> 01:30:13,760
we'd want to you know internationalize

01:30:12,560 --> 01:30:15,679
those strings and get them from our

01:30:13,760 --> 01:30:16,400
internationalization library etc but you

01:30:15,679 --> 01:30:18,639
know yeah

01:30:16,400 --> 01:30:20,400
yeah maybe steps baby steps exactly

01:30:18,639 --> 01:30:21,920
exactly exactly yeah yeah no but

01:30:20,400 --> 01:30:24,560
that's i like the idea it's a good one

01:30:21,920 --> 01:30:27,920
so all right so button press message is

01:30:24,560 --> 01:30:30,080
let me copy that i'm a bit lazy today uh

01:30:27,920 --> 01:30:31,280
yeah but don't already press or button

01:30:30,080 --> 01:30:35,440
not press yet so here

01:30:31,280 --> 01:30:39,440
we can use this classic ternary right

01:30:35,440 --> 01:30:42,320
all right so if i go the button press

01:30:39,440 --> 01:30:44,960
then display the button press message

01:30:42,320 --> 01:30:48,639
because i'm going beyond the

01:30:44,960 --> 01:30:49,360
recommended max length so let me split

01:30:48,639 --> 01:30:52,560
it in

01:30:49,360 --> 01:30:53,840
different lines so again i'm curious how

01:30:52,560 --> 01:30:57,199
many people would

01:30:53,840 --> 01:30:59,520
would shorten those uh

01:30:57,199 --> 01:31:00,480
variable names to try and get them in or

01:30:59,520 --> 01:31:03,040
do you

01:31:00,480 --> 01:31:03,760
uh do you go for expanding the content

01:31:03,040 --> 01:31:06,080
downwards

01:31:03,760 --> 01:31:07,440
um and again maybe let us know in the in

01:31:06,080 --> 01:31:09,600
the live stream because

01:31:07,440 --> 01:31:11,040
i think there's a right or wrong way to

01:31:09,600 --> 01:31:12,639
do that um

01:31:11,040 --> 01:31:14,719
you know depends on you and your

01:31:12,639 --> 01:31:16,880
opinions yeah

01:31:14,719 --> 01:31:18,159
yeah good point and yeah and just

01:31:16,880 --> 01:31:21,040
thought something in that

01:31:18,159 --> 01:31:21,760
poll uh look at the way i wrote the

01:31:21,040 --> 01:31:24,639
ternary

01:31:21,760 --> 01:31:27,040
but i don't think this is really a

01:31:24,639 --> 01:31:29,040
standard according to the styling

01:31:27,040 --> 01:31:30,239
guidelines i think many styling islands

01:31:29,040 --> 01:31:33,280
suggest

01:31:30,239 --> 01:31:33,280
uh to put the

01:31:33,520 --> 01:31:38,239
symbols on the beginning of the line

01:31:36,880 --> 01:31:40,560
i would definitely have it way before

01:31:38,239 --> 01:31:43,520
that yeah

01:31:40,560 --> 01:31:44,159
me too until and actually if i do that i

01:31:43,520 --> 01:31:47,280
think the

01:31:44,159 --> 01:31:47,280
coding is going to complain

01:31:48,800 --> 01:31:52,000
what linta is is it just an eslint set

01:31:50,960 --> 01:31:54,880
of settings it is

01:31:52,000 --> 01:31:56,560
it is cs it is justly it is just lean

01:31:54,880 --> 01:32:00,639
but the thing is obviously with jslint

01:31:56,560 --> 01:32:04,639
you can customize some rules

01:32:00,639 --> 01:32:07,199
and the way eslint is set up

01:32:04,639 --> 01:32:08,800
oh no actually it's not complaining okay

01:32:07,199 --> 01:32:10,480
okay that surprised me i thought it was

01:32:08,800 --> 01:32:14,159
but it wasn't right so it

01:32:10,480 --> 01:32:16,719
is not very opinionated um

01:32:14,159 --> 01:32:18,000
does one a semicolon on your last line

01:32:16,719 --> 01:32:21,280
because it's a variable

01:32:18,000 --> 01:32:24,239
yes yes i hope so yeah so

01:32:21,280 --> 01:32:27,840
let's run it let's try it again and yeah

01:32:24,239 --> 01:32:27,840
it works fine

01:32:31,440 --> 01:32:37,280
okay cool yeah that's fine we got uh

01:32:35,360 --> 01:32:39,040
should we just complete this we got 10

01:32:37,280 --> 01:32:41,360
minutes just in case someone is playing

01:32:39,040 --> 01:32:43,600
all right all right guys uh any anything

01:32:41,360 --> 01:32:45,040
else to add regarding this exercise

01:32:43,600 --> 01:32:46,960
well after this you're not going to want

01:32:45,040 --> 01:32:50,400
the inline

01:32:46,960 --> 01:32:52,239
lambda function on the on click so

01:32:50,400 --> 01:32:54,080
separate that out into a separate

01:32:52,239 --> 01:32:55,360
function potentially a used callback

01:32:54,080 --> 01:32:58,080
but i think that's overkill for

01:32:55,360 --> 01:33:00,239
something like this at the moment but

01:32:58,080 --> 01:33:02,000
yeah no definitely so you want to add

01:33:00,239 --> 01:33:04,000
here a function called

01:33:02,000 --> 01:33:07,040
how would you call the function and i

01:33:04,000 --> 01:33:10,159
got the reason why i'm asking you that

01:33:07,040 --> 01:33:11,520
um it depends

01:33:10,159 --> 01:33:12,719
if it's a simple component like this you

01:33:11,520 --> 01:33:13,520
could do something like an on button

01:33:12,719 --> 01:33:16,560
click

01:33:13,520 --> 01:33:19,600
um would kind of be it

01:33:16,560 --> 01:33:21,280
uh it doesn't do much else yeah that's

01:33:19,600 --> 01:33:23,040
probably what i do for the moment

01:33:21,280 --> 01:33:24,560
so i think this is actually a really

01:33:23,040 --> 01:33:27,600
interesting discussion as well

01:33:24,560 --> 01:33:30,719
yes i've read quite a lot about

01:33:27,600 --> 01:33:33,920
how you you do actually introduce some

01:33:30,719 --> 01:33:36,480
other performance nastiness by

01:33:33,920 --> 01:33:37,920
um using used callback in places so just

01:33:36,480 --> 01:33:39,920
using it everywhere where you have like

01:33:37,920 --> 01:33:42,320
a simple function that is

01:33:39,920 --> 01:33:44,080
uh a pure function you don't necessarily

01:33:42,320 --> 01:33:46,719
get the the benefit of it

01:33:44,080 --> 01:33:47,280
um but i think we should do it here any

01:33:46,719 --> 01:33:48,400
anyway

01:33:47,280 --> 01:33:49,920
you know because this is a coding

01:33:48,400 --> 01:33:51,520
challenge and we want to push ourselves

01:33:49,920 --> 01:33:53,679
a little bit and see what we can do

01:33:51,520 --> 01:33:55,120
in terms of this stuff i'm also curious

01:33:53,679 --> 01:33:58,080
actually because

01:33:55,120 --> 01:34:00,480
we we didn't have to import you state or

01:33:58,080 --> 01:34:00,480
um

01:34:01,120 --> 01:34:04,239
yeah yeah there is there is a bit of

01:34:02,719 --> 01:34:06,719
magic happening under

01:34:04,239 --> 01:34:08,639
the yeah so that the class the typical

01:34:06,719 --> 01:34:10,560
imports are already there for you yeah

01:34:08,639 --> 01:34:12,159
that could be a bit more explicit

01:34:10,560 --> 01:34:14,239
actually kodi supports many languages

01:34:12,159 --> 01:34:16,560
for instance in java you got the imports

01:34:14,239 --> 01:34:19,040
on top clearly specified so i think it's

01:34:16,560 --> 01:34:20,639
slightly better but one of the things

01:34:19,040 --> 01:34:22,239
it's interesting because i didn't even

01:34:20,639 --> 01:34:23,760
think about it when you did you state i

01:34:22,239 --> 01:34:25,760
was just like well of course you state

01:34:23,760 --> 01:34:29,600
is that

01:34:25,760 --> 01:34:32,719
yeah uh i'll tell you something

01:34:29,600 --> 01:34:34,480
i may have some concerns regarding

01:34:32,719 --> 01:34:37,679
readability

01:34:34,480 --> 01:34:38,719
i never never call my callbacks on

01:34:37,679 --> 01:34:41,840
button click

01:34:38,719 --> 01:34:44,239
on label scroll i never

01:34:41,840 --> 01:34:44,960
follow and the reason is okay yeah in

01:34:44,239 --> 01:34:47,440
this case

01:34:44,960 --> 01:34:48,960
it's crystal clear right but what if i

01:34:47,440 --> 01:34:51,280
want to call that method from somewhere

01:34:48,960 --> 01:34:54,239
else what if i want to have

01:34:51,280 --> 01:34:54,239
i don't know uh

01:34:54,880 --> 01:34:59,920
if i scroll down i want to you know what

01:34:58,239 --> 01:35:00,560
i mean right so i think it's potentially

01:34:59,920 --> 01:35:03,840
one

01:35:00,560 --> 01:35:04,639
i may want to to to to call the function

01:35:03,840 --> 01:35:08,320
several times

01:35:04,639 --> 01:35:09,920
because of different reasons right um

01:35:08,320 --> 01:35:10,880
in which case i will have to rename it

01:35:09,920 --> 01:35:12,239
which is not the end of the wall

01:35:10,880 --> 01:35:15,520
definitely but

01:35:12,239 --> 01:35:17,679
to be the function should reflect

01:35:15,520 --> 01:35:18,800
the content or the action the side

01:35:17,679 --> 01:35:22,400
effects of that function

01:35:18,800 --> 01:35:25,679
not how we invoke it right

01:35:22,400 --> 01:35:27,360
okay so you'd have it be changed

01:35:25,679 --> 01:35:29,760
or changed label or something like that

01:35:27,360 --> 01:35:31,679
exactly exactly exactly exactly

01:35:29,760 --> 01:35:32,560
something that reflects the action i

01:35:31,679 --> 01:35:35,920
want to take

01:35:32,560 --> 01:35:37,760
and yeah and change label it will be

01:35:35,920 --> 01:35:39,040
a bit i don't know because in this case

01:35:37,760 --> 01:35:39,520
we're changing the label but what if we

01:35:39,040 --> 01:35:41,040
want to

01:35:39,520 --> 01:35:44,639
do more things so what i will do in this

01:35:41,040 --> 01:35:44,639
case is uh

01:35:47,760 --> 01:35:53,760
press button okay

01:35:51,119 --> 01:35:54,880
i don't know but yeah that's a bit

01:35:53,760 --> 01:35:58,639
opinionated yeah

01:35:54,880 --> 01:36:01,600
let's it's an interesting one i think

01:35:58,639 --> 01:36:03,119
um when you talk about naming it after

01:36:01,600 --> 01:36:06,000
the side effect that it's having

01:36:03,119 --> 01:36:07,600
i think um i kind of agree with with

01:36:06,000 --> 01:36:09,440
what gavin said as his first

01:36:07,600 --> 01:36:11,760
inclination there of change label

01:36:09,440 --> 01:36:14,000
because you're now describing

01:36:11,760 --> 01:36:15,679
still like the on button press but with

01:36:14,000 --> 01:36:18,400
a slightly different

01:36:15,679 --> 01:36:19,760
terms i think i think that's um and if

01:36:18,400 --> 01:36:21,360
you were to change what

01:36:19,760 --> 01:36:23,280
effect that was happening having in the

01:36:21,360 --> 01:36:24,159
future you could always rename that

01:36:23,280 --> 01:36:26,719
function

01:36:24,159 --> 01:36:28,159
to encapsulate that of course you don't

01:36:26,719 --> 01:36:28,480
want your functions doing more than one

01:36:28,159 --> 01:36:31,600
thing

01:36:28,480 --> 01:36:32,719
obviously but uh that's a different

01:36:31,600 --> 01:36:34,880
conversation

01:36:32,719 --> 01:36:35,760
yes one thing i would also definitely

01:36:34,880 --> 01:36:38,960
not do

01:36:35,760 --> 01:36:42,159
is if it was like oh press me click

01:36:38,960 --> 01:36:43,520
or yeah or like if there's nothing worse

01:36:42,159 --> 01:36:45,280
than having the like the text on the

01:36:43,520 --> 01:36:46,000
button change and now it doesn't relate

01:36:45,280 --> 01:36:48,560
back to

01:36:46,000 --> 01:36:50,000
the function anymore but yep should we

01:36:48,560 --> 01:36:50,320
wrap that in a used callback as well

01:36:50,000 --> 01:36:53,840
just

01:36:50,320 --> 01:36:57,520
uh as as we discussed earlier anyway

01:36:53,840 --> 01:36:59,199
yeah uh we're here no well

01:36:57,520 --> 01:37:00,639
do it where you're declaring change

01:36:59,199 --> 01:37:03,360
label so

01:37:00,639 --> 01:37:04,320
um so you want to bring it back how it

01:37:03,360 --> 01:37:07,600
was before

01:37:04,320 --> 01:37:10,320
no no no no sorry certainly i wonder if

01:37:07,600 --> 01:37:14,960
this is going to work at this point here

01:37:10,320 --> 01:37:14,960
yep uh we have a used callback

01:37:16,719 --> 01:37:20,719
we use callback let's see if they're

01:37:19,440 --> 01:37:21,280
following you what do you mean you just

01:37:20,719 --> 01:37:24,480
call what

01:37:21,280 --> 01:37:28,159
so use callback is um a hook

01:37:24,480 --> 01:37:28,639
ah sorry the hook ah sorry sorry sorry

01:37:28,159 --> 01:37:30,320
uh

01:37:28,639 --> 01:37:35,360
but i don't think we're importing it

01:37:30,320 --> 01:37:35,360
that's a good point oh

01:37:36,080 --> 01:37:40,880
yeah so you see that's that's why i

01:37:39,199 --> 01:37:42,320
don't really like not having the imports

01:37:40,880 --> 01:37:43,840
on top because it's a bit finger in the

01:37:42,320 --> 01:37:45,679
air to know what is supported and one

01:37:43,840 --> 01:37:46,320
more yeah yeah okay but yeah i get your

01:37:45,679 --> 01:37:48,400
point

01:37:46,320 --> 01:37:50,080
i see what you mean right yeah yeah yeah

01:37:48,400 --> 01:37:52,960
okay uh

01:37:50,080 --> 01:37:53,920
guys um a suggestion on the on the

01:37:52,960 --> 01:37:55,520
stream as well

01:37:53,920 --> 01:37:57,360
for the name which would be handle

01:37:55,520 --> 01:37:59,280
button click as well which is

01:37:57,360 --> 01:38:00,719
another way to go with that thing so uh

01:37:59,280 --> 01:38:03,040
thank you very much dante

01:38:00,719 --> 01:38:03,040
handle

01:38:14,320 --> 01:38:18,560
yeah of course yeah it works there you

01:38:16,239 --> 01:38:20,480
go yes we got

01:38:18,560 --> 01:38:22,000
six minutes left so i got a question for

01:38:20,480 --> 01:38:23,440
you i'm gonna do something i'm not gonna

01:38:22,000 --> 01:38:24,000
change question because we'll run out of

01:38:23,440 --> 01:38:28,840
time

01:38:24,000 --> 01:38:32,639
i'm gonna very quickly uh transform that

01:38:28,840 --> 01:38:32,639
into a class

01:38:33,440 --> 01:38:36,960
and even if i don't finish it uh you see

01:38:35,440 --> 01:38:37,679
what i'm gonna do and i'm sure you're

01:38:36,960 --> 01:38:40,400
already

01:38:37,679 --> 01:38:43,280
figuring out what i want to talk about

01:38:40,400 --> 01:38:43,280
in mind that we are

01:38:43,520 --> 01:38:49,440
creating yes a class right so and try to

01:38:47,360 --> 01:38:52,159
follow the naming conventions as much as

01:38:49,440 --> 01:38:52,159
possible

01:38:53,360 --> 01:38:59,840
uh how we call it button press i think

01:39:00,080 --> 01:39:05,600
so the reason why i'm doing this

01:39:03,280 --> 01:39:07,280
is because i would like to get your

01:39:05,600 --> 01:39:09,679
thoughts about

01:39:07,280 --> 01:39:11,520
function binding yeah as you're probably

01:39:09,679 --> 01:39:13,280
already figuring out so

01:39:11,520 --> 01:39:14,639
again let's ignore the details of the

01:39:13,280 --> 01:39:16,719
exercise

01:39:14,639 --> 01:39:19,280
the thing is in here if we got the on

01:39:16,719 --> 01:39:19,280
click event

01:39:19,679 --> 01:39:24,320
and now we have a function here uh it

01:39:22,480 --> 01:39:27,360
was handled

01:39:24,320 --> 01:39:27,360
handily button

01:39:29,840 --> 01:39:33,760
let's respect that right so then the

01:39:31,360 --> 01:39:40,800
idea is whenever

01:39:33,760 --> 01:39:44,000
we click on the button yep we do

01:39:40,800 --> 01:39:47,520
we do something like that right so now

01:39:44,000 --> 01:39:49,920
the obvious question is

01:39:47,520 --> 01:39:55,840
what do you do here how do we solve the

01:39:49,920 --> 01:39:55,840
binding issue when you have a class

01:39:55,920 --> 01:39:59,760
or rather than finding the right answer

01:39:58,159 --> 01:40:01,840
because maybe there is nothing black or

01:39:59,760 --> 01:40:05,920
white here let's talk about possible

01:40:01,840 --> 01:40:09,600
strategies so first of all first of all

01:40:05,920 --> 01:40:11,360
will this work no in the way you think

01:40:09,600 --> 01:40:12,719
it will

01:40:11,360 --> 01:40:14,880
no that won't go all right because we

01:40:12,719 --> 01:40:18,400
are losing lexical this

01:40:14,880 --> 01:40:20,239
yeah so now the handle button click

01:40:18,400 --> 01:40:23,520
method is gonna be called by

01:40:20,239 --> 01:40:23,920
briak not by our class anymore in which

01:40:23,520 --> 01:40:25,119
case

01:40:23,920 --> 01:40:27,119
lexical this here is going to be

01:40:25,119 --> 01:40:28,719
probably undefined and defined

01:40:27,119 --> 01:40:31,119
something this is going to blow up your

01:40:28,719 --> 01:40:31,440
laptop right so hopefully not but yeah

01:40:31,119 --> 01:40:32,880
so

01:40:31,440 --> 01:40:34,320
that's that's that's clearly not going

01:40:32,880 --> 01:40:35,440
to work so there are different

01:40:34,320 --> 01:40:37,119
strategies when

01:40:35,440 --> 01:40:38,560
and then let me present the strategies

01:40:37,119 --> 01:40:39,679
and then you'll tell me which one do you

01:40:38,560 --> 01:40:42,960
prefer and why

01:40:39,679 --> 01:40:46,480
so the the the historical one is just

01:40:42,960 --> 01:40:49,040
binding uh rebinding the

01:40:46,480 --> 01:40:51,520
function as part of the constructor so

01:40:49,040 --> 01:40:53,440
doing something like that

01:40:51,520 --> 01:40:54,880
which has this lovely side effect of us

01:40:53,440 --> 01:40:56,480
um

01:40:54,880 --> 01:40:58,639
declaring something about a function

01:40:56,480 --> 01:41:01,360
before we've read the function as well

01:40:58,639 --> 01:41:02,880
yes yes which is a bit annoying and also

01:41:01,360 --> 01:41:03,520
what happens if we rename the function

01:41:02,880 --> 01:41:04,800
how many

01:41:03,520 --> 01:41:06,560
if we rename that function how many

01:41:04,800 --> 01:41:06,880
times we need to rename it i don't know

01:41:06,560 --> 01:41:09,040
four

01:41:06,880 --> 01:41:10,719
right or something like that at least

01:41:09,040 --> 01:41:13,840
yeah but yeah so this is a

01:41:10,719 --> 01:41:15,119
way that historically speaking uh have

01:41:13,840 --> 01:41:18,239
solved the issue right

01:41:15,119 --> 01:41:21,679
another kind of similar way is

01:41:18,239 --> 01:41:25,520
by binding here

01:41:21,679 --> 01:41:28,320
as part of the render function yeah so

01:41:25,520 --> 01:41:29,600
in the days when we when you know all we

01:41:28,320 --> 01:41:31,600
had were class components

01:41:29,600 --> 01:41:32,960
this was probably the way that i was

01:41:31,600 --> 01:41:35,679
doing this

01:41:32,960 --> 01:41:37,040
before i started using or had the

01:41:35,679 --> 01:41:40,960
ability to use

01:41:37,040 --> 01:41:43,760
arrow functions yeah yeah

01:41:40,960 --> 01:41:45,199
yeah i agree on that to me there are

01:41:43,760 --> 01:41:46,880
probably a couple of concerns about

01:41:45,199 --> 01:41:48,239
following that pattern first of all if

01:41:46,880 --> 01:41:50,000
we need to call the function several

01:41:48,239 --> 01:41:51,440
times we have to remember to bind

01:41:50,000 --> 01:41:53,520
mind all the time if we don't

01:41:51,440 --> 01:41:55,199
reconstruct or not and the second reason

01:41:53,520 --> 01:41:57,440
and this is probably not that obvious

01:41:55,199 --> 01:41:59,119
is that from a performance point of view

01:41:57,440 --> 01:42:00,880
that's not that efficient

01:41:59,119 --> 01:42:02,159
why because we are binding a new

01:42:00,880 --> 01:42:04,239
function every time we

01:42:02,159 --> 01:42:05,840
render right again we are not trying to

01:42:04,239 --> 01:42:06,480
optimize everything at this level but

01:42:05,840 --> 01:42:08,000
it's something that

01:42:06,480 --> 01:42:10,080
just to take into consideration long

01:42:08,000 --> 01:42:13,520
term um

01:42:10,080 --> 01:42:14,800
another technique will be to just wrap

01:42:13,520 --> 01:42:17,679
this up into

01:42:14,800 --> 01:42:19,520
into an arrow function so then we

01:42:17,679 --> 01:42:22,719
inherit the parent lexical disk

01:42:19,520 --> 01:42:24,719
so then we can we can do that uh

01:42:22,719 --> 01:42:26,560
still still still with concerns

01:42:24,719 --> 01:42:27,840
regarding memory usage

01:42:26,560 --> 01:42:29,600
yeah because we are binding a new

01:42:27,840 --> 01:42:32,880
function in every iteration

01:42:29,600 --> 01:42:36,400
also if we got multiple arguments here

01:42:32,880 --> 01:42:39,040
we'll have to pass it them here as well

01:42:36,400 --> 01:42:40,239
yeah no not ideal not have you guys

01:42:39,040 --> 01:42:44,080
tried this this

01:42:40,239 --> 01:42:44,080
pattern at all any thoughts about it

01:42:44,880 --> 01:42:48,880
again it's it's the most natural thing i

01:42:47,119 --> 01:42:50,880
think for people to lean

01:42:48,880 --> 01:42:52,159
towards but you're right there's there's

01:42:50,880 --> 01:42:54,560
this

01:42:52,159 --> 01:42:56,159
hidden um pressure because especially

01:42:54,560 --> 01:42:57,440
since we are setting states and we know

01:42:56,159 --> 01:42:59,040
that there's going to be more than one

01:42:57,440 --> 01:43:01,840
render of this component as well

01:42:59,040 --> 01:43:03,280
yep um yeah yeah yeah we already know

01:43:01,840 --> 01:43:05,840
that's going to happen and if

01:43:03,280 --> 01:43:06,800
let's say you're making a 2d game in

01:43:05,840 --> 01:43:08,480
react

01:43:06,800 --> 01:43:09,840
exactly we're going to see those renders

01:43:08,480 --> 01:43:12,639
happening potentially a lot

01:43:09,840 --> 01:43:14,639
all the time yeah yeah i agree i agree i

01:43:12,639 --> 01:43:18,400
agree i completely agree with you

01:43:14,639 --> 01:43:20,159
the last way or maybe there are more the

01:43:18,400 --> 01:43:21,440
last way i'm aware of if you know any

01:43:20,159 --> 01:43:24,080
other

01:43:21,440 --> 01:43:25,119
would be great but the last way is by

01:43:24,080 --> 01:43:27,119
transforming

01:43:25,119 --> 01:43:28,800
back to the original suggestion

01:43:27,119 --> 01:43:35,280
transforming the method

01:43:28,800 --> 01:43:35,280
into an arrow function class method

01:43:36,560 --> 01:43:40,080
which would be um where i think most

01:43:39,520 --> 01:43:43,440
people

01:43:40,080 --> 01:43:44,400
were um before we had uh functional

01:43:43,440 --> 01:43:46,560
components with

01:43:44,400 --> 01:43:48,000
uh all the lovely hooks at least it's

01:43:46,560 --> 01:43:51,119
where i hope most people were

01:43:48,000 --> 01:43:51,679
we're at yep yep exactly exactly and i

01:43:51,119 --> 01:43:53,920
think

01:43:51,679 --> 01:43:55,520
all because of all this hassle this is

01:43:53,920 --> 01:43:56,800
why many developers the majority of the

01:43:55,520 --> 01:43:59,440
community is moving to

01:43:56,800 --> 01:44:00,000
hooks right because yeah yeah for many

01:43:59,440 --> 01:44:02,159
reasons

01:44:00,000 --> 01:44:03,920
and one of the many reasons yeah i think

01:44:02,159 --> 01:44:07,600
it is worth making the argument that

01:44:03,920 --> 01:44:08,800
um for me most of the time readability

01:44:07,600 --> 01:44:12,159
trumps

01:44:08,800 --> 01:44:13,840
uh optimization um

01:44:12,159 --> 01:44:16,159
because for most of us we're not writing

01:44:13,840 --> 01:44:18,480
that 2d platform game on the web

01:44:16,159 --> 01:44:20,560
um you know we're we're writing uh you

01:44:18,480 --> 01:44:21,280
know a cms for some company or something

01:44:20,560 --> 01:44:24,560
like that

01:44:21,280 --> 01:44:26,400
um so you know if you have to make that

01:44:24,560 --> 01:44:28,400
choice between readability and

01:44:26,400 --> 01:44:30,000
and optimization opt for readability you

01:44:28,400 --> 01:44:32,800
can optimize

01:44:30,000 --> 01:44:35,040
later i absolutely absolutely agree

01:44:32,800 --> 01:44:35,840
remember that premature optimization is

01:44:35,040 --> 01:44:39,679
the root of

01:44:35,840 --> 01:44:41,520
all evil yeah i think

01:44:39,679 --> 01:44:43,040
i'd mainly go for consistency which is

01:44:41,520 --> 01:44:45,040
why you'd set up an es

01:44:43,040 --> 01:44:46,719
liberal to dictate one way as long as

01:44:45,040 --> 01:44:48,080
it's all done consistently that's that's

01:44:46,719 --> 01:44:50,000
the main thing there yeah

01:44:48,080 --> 01:44:51,360
yeah very true very true especially if

01:44:50,000 --> 01:44:52,239
you've got lots of devs working on the

01:44:51,360 --> 01:44:54,639
same code base

01:44:52,239 --> 01:44:56,320
exactly exactly i prefer to be wrong but

01:44:54,639 --> 01:44:57,920
consistently wrong

01:44:56,320 --> 01:44:59,679
at least there is a pattern we can

01:44:57,920 --> 01:45:02,080
improve the pattern

01:44:59,679 --> 01:45:02,960
all right guys i think we're out of time

01:45:02,080 --> 01:45:04,480
there was a great

01:45:02,960 --> 01:45:06,480
session so thank you very much for

01:45:04,480 --> 01:45:08,080
participating and for sharing your

01:45:06,480 --> 01:45:10,000
thoughts thank you as well to the people

01:45:08,080 --> 01:45:11,199
in the collaborating in the chat

01:45:10,000 --> 01:45:13,440
let's have a look to the results right

01:45:11,199 --> 01:45:16,480
let's see let's see what we

01:45:13,440 --> 01:45:20,560
end up having um

01:45:16,480 --> 01:45:24,239
so uh let me have a look so

01:45:20,560 --> 01:45:25,840
um let's quickly rebuild the javascript

01:45:24,239 --> 01:45:27,280
results just because we got quite a lot

01:45:25,840 --> 01:45:28,239
of people here so it's a lot of respect

01:45:27,280 --> 01:45:31,679
to them

01:45:28,239 --> 01:45:34,400
so let's quickly rebuild the results um

01:45:31,679 --> 01:45:35,679
so i'll show you i'll show you what

01:45:34,400 --> 01:45:39,040
these

01:45:35,679 --> 01:45:41,520
charts mean so here we are

01:45:39,040 --> 01:45:43,280
presenting what we call the players

01:45:41,520 --> 01:45:47,119
players performance

01:45:43,280 --> 01:45:49,119
pentagons ppp so we are each player is

01:45:47,119 --> 01:45:50,560
represented by a color you don't know

01:45:49,119 --> 01:45:52,080
yet if you are the blue the yellow or

01:45:50,560 --> 01:45:54,480
the green but you are a color

01:45:52,080 --> 01:45:55,119
and then here we are proving how how

01:45:54,480 --> 01:45:57,280
good you

01:45:55,119 --> 01:45:59,040
you are really how you were dealing with

01:45:57,280 --> 01:46:01,280
that particular challenge

01:45:59,040 --> 01:46:02,800
um several metrics you can see here

01:46:01,280 --> 01:46:04,880
tenacity that means out of five

01:46:02,800 --> 01:46:07,280
questions how many you've completed

01:46:04,880 --> 01:46:09,119
accuracy is how many times you submit

01:46:07,280 --> 01:46:10,639
but the answer was wrong

01:46:09,119 --> 01:46:12,000
so people getting lower scores here

01:46:10,639 --> 01:46:13,119
that's what we call street fighter mode

01:46:12,000 --> 01:46:14,639
you don't mess three fire guys in the

01:46:13,119 --> 01:46:15,280
90s where you just randomly hit the

01:46:14,639 --> 01:46:16,800
buttons

01:46:15,280 --> 01:46:19,040
without any criteria so that's still

01:46:16,800 --> 01:46:20,159
very mold speed how long it took you to

01:46:19,040 --> 01:46:21,440
complete the game

01:46:20,159 --> 01:46:23,199
focus how many times you're going to

01:46:21,440 --> 01:46:25,280
google or to stack overflow to see how

01:46:23,199 --> 01:46:27,520
to create a hook in react

01:46:25,280 --> 01:46:29,199
and elegance that was last but not least

01:46:27,520 --> 01:46:29,840
is how we stand out your code is

01:46:29,199 --> 01:46:34,320
according to

01:46:29,840 --> 01:46:37,040
our opinionated linking

01:46:34,320 --> 01:46:37,920
linking rules right all right so

01:46:37,040 --> 01:46:39,840
obviously

01:46:37,920 --> 01:46:40,960
the bigger the better right size matter

01:46:39,840 --> 01:46:43,040
in this occasion

01:46:40,960 --> 01:46:44,159
so again i'm not gonna check the

01:46:43,040 --> 01:46:47,920
individual results

01:46:44,159 --> 01:46:50,960
but but let's check the

01:46:47,920 --> 01:46:52,480
team results so that's a good battle so

01:46:50,960 --> 01:46:54,880
you can see we got three

01:46:52,480 --> 01:46:56,000
players on the french food lovers fourth

01:46:54,880 --> 01:46:57,280
place in the italian food lovers you can

01:46:56,000 --> 01:47:00,159
see also we've got the the

01:46:57,280 --> 01:47:00,560
the title or the rank where we can see

01:47:00,159 --> 01:47:02,480
how

01:47:00,560 --> 01:47:04,960
how a skill its developer is imperial

01:47:02,480 --> 01:47:08,000
majesties is the top ten percent

01:47:04,960 --> 01:47:09,600
majesty the second ten percent and so on

01:47:08,000 --> 01:47:11,440
newbies probably is the first time which

01:47:09,600 --> 01:47:12,639
doesn't mean they are not professional

01:47:11,440 --> 01:47:13,199
developers but this is the first time

01:47:12,639 --> 01:47:15,040
they

01:47:13,199 --> 01:47:17,520
they play with kodi so you look at a

01:47:15,040 --> 01:47:20,320
good mix of skills here so

01:47:17,520 --> 01:47:22,639
now what's the median score of the

01:47:20,320 --> 01:47:25,119
french food lovers

01:47:22,639 --> 01:47:26,000
not bad it's 82 points right that's

01:47:25,119 --> 01:47:28,719
great

01:47:26,000 --> 01:47:30,639
and now how it compares to the italian

01:47:28,719 --> 01:47:33,119
food lovers team let's have a look

01:47:30,639 --> 01:47:33,840
oh look at that 75 right so that was a

01:47:33,119 --> 01:47:36,400
good battle

01:47:33,840 --> 01:47:38,880
you can also see the top players on its

01:47:36,400 --> 01:47:41,040
team at the bottom of the screen

01:47:38,880 --> 01:47:42,239
so it's one nil for the french food

01:47:41,040 --> 01:47:44,400
lovers

01:47:42,239 --> 01:47:46,239
what about upper beginner obviously the

01:47:44,400 --> 01:47:48,320
more complicated the challenge is

01:47:46,239 --> 01:47:49,920
the smaller the shapes tend to be right

01:47:48,320 --> 01:47:51,040
because developers struggle a bit more

01:47:49,920 --> 01:47:53,119
with the questions

01:47:51,040 --> 01:47:54,800
you can see some sort of jerky here so

01:47:53,119 --> 01:47:55,760
there was a beautiful battle between the

01:47:54,800 --> 01:47:57,280
blue and the pink

01:47:55,760 --> 01:48:00,080
and then the yellow and then the the

01:47:57,280 --> 01:48:03,280
reds uh also i didn't mention that

01:48:00,080 --> 01:48:04,639
but you can i'll see in a minute you can

01:48:03,280 --> 01:48:06,320
you can check the code so imagine that

01:48:04,639 --> 01:48:08,159
you strive with any of the question

01:48:06,320 --> 01:48:09,600
you can compare your solution against

01:48:08,159 --> 01:48:11,360
the other players which is a good way to

01:48:09,600 --> 01:48:11,920
check different coding styles to analyze

01:48:11,360 --> 01:48:13,360
why you

01:48:11,920 --> 01:48:14,800
you didn't manage to get the right

01:48:13,360 --> 01:48:16,080
answer i'll see you in a second let me

01:48:14,800 --> 01:48:19,679
show that

01:48:16,080 --> 01:48:20,480
chart the results first uh team results

01:48:19,679 --> 01:48:21,840
uh

01:48:20,480 --> 01:48:23,679
okay we got the solo player on the

01:48:21,840 --> 01:48:24,639
left-hand side versus three players on

01:48:23,679 --> 01:48:27,520
the italian team

01:48:24,639 --> 01:48:28,159
there's one nil for the french team and

01:48:27,520 --> 01:48:30,880
okay look

01:48:28,159 --> 01:48:32,000
83 points so this is a really good score

01:48:30,880 --> 01:48:33,520
for the solo warrior

01:48:32,000 --> 01:48:36,800
and how that compares to the italian

01:48:33,520 --> 01:48:37,280
team so look 59 okay so it's two nil for

01:48:36,800 --> 01:48:40,239
france

01:48:37,280 --> 01:48:41,119
today um and yeah as i said before

01:48:40,239 --> 01:48:43,920
you'll find if you

01:48:41,119 --> 01:48:45,119
if you join the challenge again uh

01:48:43,920 --> 01:48:46,880
you'll be able to

01:48:45,119 --> 01:48:49,199
as you can see on my screen check

01:48:46,880 --> 01:48:51,119
everyone's code uh

01:48:49,199 --> 01:48:52,960
it's a good way to compare coding styles

01:48:51,119 --> 01:48:53,520
to learn new different techniques yeah

01:48:52,960 --> 01:48:56,239
you can

01:48:53,520 --> 01:48:58,320
upload you can download solutions and so

01:48:56,239 --> 01:49:00,400
on and was cheating

01:48:58,320 --> 01:49:01,520
all right and then uh upper this is

01:49:00,400 --> 01:49:04,159
gonna be super quick right

01:49:01,520 --> 01:49:06,080
uh so this is uh upper intermediate

01:49:04,159 --> 01:49:08,000
gasket so we got some some interesting

01:49:06,080 --> 01:49:09,360
challenges that we didn't cover today

01:49:08,000 --> 01:49:11,119
uh let me show you guys the individual

01:49:09,360 --> 01:49:13,119
results because i think we got a single

01:49:11,119 --> 01:49:15,119
player managed to get the scores

01:49:13,119 --> 01:49:16,639
so here we go 14 points one question so

01:49:15,119 --> 01:49:18,400
psychologically speaking solving one

01:49:16,639 --> 01:49:20,400
question is good right

01:49:18,400 --> 01:49:22,320
all right so just to wrap this up let's

01:49:20,400 --> 01:49:25,440
go to react and

01:49:22,320 --> 01:49:28,560
actually sorry uh

01:49:25,440 --> 01:49:30,239
react lower beginner upper beginner i

01:49:28,560 --> 01:49:33,440
think no one play on upper intermediate

01:49:30,239 --> 01:49:35,920
so i'm going to just skip it but

01:49:33,440 --> 01:49:35,920
on the

01:49:37,360 --> 01:49:44,239
let me all right

01:49:41,119 --> 01:49:46,080
is it loading i don't know

01:49:44,239 --> 01:49:47,280
it's taking a while to load let me try

01:49:46,080 --> 01:49:50,080
again

01:49:47,280 --> 01:49:51,440
react react react here we go all right i

01:49:50,080 --> 01:49:55,360
don't know what happened

01:49:51,440 --> 01:49:56,880
so react we got like four players here

01:49:55,360 --> 01:49:58,639
let me just refresh the results

01:49:56,880 --> 01:50:00,239
sometimes people forget to submit the

01:49:58,639 --> 01:50:00,960
exercise and they got some questions

01:50:00,239 --> 01:50:04,080
right

01:50:00,960 --> 01:50:06,719
okay so this is react beginner uh

01:50:04,080 --> 01:50:08,080
lower beginner and then i will see the

01:50:06,719 --> 01:50:08,880
upper beginning which is gonna be super

01:50:08,080 --> 01:50:13,119
quick

01:50:08,880 --> 01:50:16,239
so czech ranks team results

01:50:13,119 --> 01:50:18,480
again a solo player on friends and three

01:50:16,239 --> 01:50:20,000
warriors on the italian team so meaning

01:50:18,480 --> 01:50:24,080
score of france is

01:50:20,000 --> 01:50:26,480
5 6 56 versus oh look at that 93 right

01:50:24,080 --> 01:50:27,520
so yes good good uh achievement by the

01:50:26,480 --> 01:50:30,320
italian team

01:50:27,520 --> 01:50:31,199
two one so now this is the very last

01:50:30,320 --> 01:50:33,760
challenge so

01:50:31,199 --> 01:50:35,440
everything gets uh resolved here

01:50:33,760 --> 01:50:35,840
actually i didn't i didn't see who won

01:50:35,440 --> 01:50:37,679
on the

01:50:35,840 --> 01:50:40,000
on the upper intermediate well anyway

01:50:37,679 --> 01:50:41,360
who cares we've got some people in the

01:50:40,000 --> 01:50:42,159
in the live stream as well telling us

01:50:41,360 --> 01:50:45,520
who the uh

01:50:42,159 --> 01:50:45,520
who that solo warrior was

01:50:46,639 --> 01:50:51,280
yeah we probably don't know because some

01:50:49,840 --> 01:50:53,520
people sign up some people play

01:50:51,280 --> 01:50:56,080
anonymous from on their newsletters

01:50:53,520 --> 01:50:57,760
unfortunately of course if any of you

01:50:56,080 --> 01:51:00,800
has played and you want to make a good

01:50:57,760 --> 01:51:02,400
impression you can if you sign up

01:51:00,800 --> 01:51:05,599
this challenge will be associated to

01:51:02,400 --> 01:51:07,360
your to your account transfer

01:51:05,599 --> 01:51:10,159
um with of course we don't sell your

01:51:07,360 --> 01:51:13,119
data we don't do any any of that right

01:51:10,159 --> 01:51:15,280
all right so let's check the results

01:51:13,119 --> 01:51:19,119
final challenge of the day

01:51:15,280 --> 01:51:20,960
so who won here

01:51:19,119 --> 01:51:22,159
all right so it's going to be a 2-2

01:51:20,960 --> 01:51:25,280
obviously right

01:51:22,159 --> 01:51:28,560
it's 89.49 so it was a

01:51:25,280 --> 01:51:30,080
it was i think a nice battle uh

01:51:28,560 --> 01:51:31,599
if you like the competitive experts

01:51:30,080 --> 01:51:33,440
coding from time to time we run

01:51:31,599 --> 01:51:35,040
proper challenges we run some

01:51:33,440 --> 01:51:36,480
international coding battles between

01:51:35,040 --> 01:51:37,840
different countries involving hundreds

01:51:36,480 --> 01:51:40,239
of developers

01:51:37,840 --> 01:51:41,760
uh so yeah you are more than invited to

01:51:40,239 --> 01:51:43,520
keep playing of course to spread the

01:51:41,760 --> 01:51:45,440
word of coding that will help us

01:51:43,520 --> 01:51:47,040
and if you want to help us that will be

01:51:45,440 --> 01:51:48,560
that would be fantastic yeah we have

01:51:47,040 --> 01:51:49,440
very limited resources as you can

01:51:48,560 --> 01:51:52,400
imagine

01:51:49,440 --> 01:51:53,840
but any help could be adding new

01:51:52,400 --> 01:51:56,320
questions to the backlog it could be

01:51:53,840 --> 01:51:58,400
helping translating fixing typos

01:51:56,320 --> 01:51:59,840
if you are playing guys and you find any

01:51:58,400 --> 01:52:00,320
type or anything you got the feedback

01:51:59,840 --> 01:52:02,880
box

01:52:00,320 --> 01:52:04,000
just drop a message whatever yeah i mean

01:52:02,880 --> 01:52:06,480
this is like a

01:52:04,000 --> 01:52:08,080
friendly community um and yeah and that

01:52:06,480 --> 01:52:10,400
was pretty much it from my side

01:52:08,080 --> 01:52:11,520
so thank you very much everybody thank

01:52:10,400 --> 01:52:14,320
you uh

01:52:11,520 --> 01:52:14,800
paul and gavin and alex from of course

01:52:14,320 --> 01:52:16,080
uh

01:52:14,800 --> 01:52:17,599
and yeah that was pretty much it from my

01:52:16,080 --> 01:52:19,199
side so i'm looking forward to see you

01:52:17,599 --> 01:52:20,560
again soon

01:52:19,199 --> 01:52:22,400
very much thank you ricardo that was

01:52:20,560 --> 01:52:24,239
really really enjoyable um

01:52:22,400 --> 01:52:25,920
and yeah i think we're gonna wrap up

01:52:24,239 --> 01:52:27,440
here but thank you again

01:52:25,920 --> 01:52:28,639
paul for that amazing talk and thank you

01:52:27,440 --> 01:52:30,560
ricardo that was definitely something

01:52:28,639 --> 01:52:31,040
new and interesting and really enjoyed

01:52:30,560 --> 01:52:34,080
that

01:52:31,040 --> 01:52:35,840
um but yeah uh thank you again as always

01:52:34,080 --> 01:52:37,119
to push up hosting and if anybody would

01:52:35,840 --> 01:52:39,119
like to talk in the future

01:52:37,119 --> 01:52:42,400
please do get in touch but see you all

01:52:39,119 --> 01:52:42,400
again soon thanks

01:52:42,840 --> 01:52:45,840
bye

01:53:53,280 --> 01:54:07,090
[Music]

01:54:09,420 --> 01:56:12,739
[Music]

01:56:12,840 --> 01:56:15,840
so

01:56:17,090 --> 01:56:29,840
[Music]

01:56:26,840 --> 01:56:29,840
do

01:56:30,110 --> 01:56:57,840
[Music]

01:56:54,840 --> 01:56:57,840
so

01:56:59,420 --> 01:58:02,540
[Music]

01:58:04,840 --> 01:58:07,840
so

01:58:09,540 --> 01:58:49,090
[Music]

01:58:46,840 --> 01:59:15,410
so

01:58:49,090 --> 01:59:15,410
[Music]

01:59:56,159 --> 01:59:58,239

YouTube URL: https://www.youtube.com/watch?v=EpuABmqyaWU


