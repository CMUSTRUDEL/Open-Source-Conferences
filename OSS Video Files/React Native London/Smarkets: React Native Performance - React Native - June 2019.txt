Title: Smarkets: React Native Performance - React Native - June 2019
Publication date: 2019-07-03
Playlist: React Native London
Description: 
	Presented by Nick R.

In this talk, we will learn how to locate performance issues in your React Native app and how to overcome them. We will cover some common pitfalls and how to avoid them.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:03,990
okay good evening ladies and gentlemen

00:00:01,979 --> 00:00:06,779
today I will be delivering this lovely

00:00:03,990 --> 00:00:09,870
talk react native performance 1000

00:00:06,779 --> 00:00:12,330
updates a second reacting like native so

00:00:09,870 --> 00:00:13,860
a little bit about me I am called Nick

00:00:12,330 --> 00:00:16,230
Robertson I am a software engineer here

00:00:13,860 --> 00:00:18,539
at markets I have been here for 18

00:00:16,230 --> 00:00:20,490
months and whilst I have been here I

00:00:18,539 --> 00:00:23,130
have been working in the front end team

00:00:20,490 --> 00:00:27,269
predominantly the react web app as well

00:00:23,130 --> 00:00:28,830
as react native mobile app so Robin did

00:00:27,269 --> 00:00:30,539
you were pretty thorough introduction

00:00:28,830 --> 00:00:33,180
but a little bit about the app in

00:00:30,539 --> 00:00:35,219
particular so smoke is is primarily a

00:00:33,180 --> 00:00:37,079
web-based binary option financial

00:00:35,219 --> 00:00:39,360
exchange so allows you to bet against

00:00:37,079 --> 00:00:42,360
other people our official relaunch was

00:00:39,360 --> 00:00:44,010
in March 2018 with the help of Theo doe

00:00:42,360 --> 00:00:45,000
we got it out within three months is

00:00:44,010 --> 00:00:46,559
incredible

00:00:45,000 --> 00:00:48,870
since then we've increased our daily

00:00:46,559 --> 00:00:50,520
active users by 180 percent our monthly

00:00:48,870 --> 00:00:52,860
active users by a hundred and forty four

00:00:50,520 --> 00:00:54,960
percent we matched feature parity with

00:00:52,860 --> 00:00:56,280
the website by October last year and we

00:00:54,960 --> 00:00:58,079
also introduced some really Caniff

00:00:56,280 --> 00:01:00,780
t-mobile specific features like

00:00:58,079 --> 00:01:04,260
fingerprint lock and other such things

00:01:00,780 --> 00:01:06,740
and at the time of this talk we are the

00:01:04,260 --> 00:01:09,540
highest rating betting app in the UK

00:01:06,740 --> 00:01:11,369
Walter and I think Island so that's a

00:01:09,540 --> 00:01:13,380
really good so you're thinking wow he's

00:01:11,369 --> 00:01:15,990
just talked about how great it is so hot

00:01:13,380 --> 00:01:17,790
who cares Marcus is a great app it

00:01:15,990 --> 00:01:19,229
wasn't always great though it took a

00:01:17,790 --> 00:01:22,170
while to get there

00:01:19,229 --> 00:01:23,820
so this is something we received at the

00:01:22,170 --> 00:01:24,990
end of last year it was a bit of

00:01:23,820 --> 00:01:27,240
feedback we got through our feedback

00:01:24,990 --> 00:01:29,340
forum website is good at performances

00:01:27,240 --> 00:01:31,590
slow and stutters needs a performance

00:01:29,340 --> 00:01:35,310
overall thank you Alex ass Marcus iOS

00:01:31,590 --> 00:01:37,170
user I love this feedback so we had just

00:01:35,310 --> 00:01:39,090
completed a Redux migration and

00:01:37,170 --> 00:01:40,650
everything felt fine for us on a

00:01:39,090 --> 00:01:42,990
flagship phones when we were testing it

00:01:40,650 --> 00:01:45,869
but what we didn't think about is the

00:01:42,990 --> 00:01:48,180
user and the older device and his

00:01:45,869 --> 00:01:49,259
performance was sluggish and slow and I

00:01:48,180 --> 00:01:51,390
don't think it's okay to say oh that's

00:01:49,259 --> 00:01:53,070
okay is an older device we're using

00:01:51,390 --> 00:01:56,040
react native we can let those kind of

00:01:53,070 --> 00:01:57,540
customers go we really need to focus on

00:01:56,040 --> 00:01:59,820
those customers as well they've come to

00:01:57,540 --> 00:02:01,890
expect a very high kind of standard of

00:01:59,820 --> 00:02:04,229
animation rich and kind of quick and

00:02:01,890 --> 00:02:05,939
responsive applications and saying

00:02:04,229 --> 00:02:07,170
because we're using react native we

00:02:05,939 --> 00:02:09,300
can't do that that's not good enough

00:02:07,170 --> 00:02:10,979
this like they're just kind of pose a

00:02:09,300 --> 00:02:13,890
question can we do it react native

00:02:10,979 --> 00:02:15,630
I'm getting a lot of frowns right now

00:02:13,890 --> 00:02:19,080
native conference I think we can do is

00:02:15,630 --> 00:02:21,150
react native and we have cool so I would

00:02:19,080 --> 00:02:23,940
love just to kind of jump in and start

00:02:21,150 --> 00:02:25,110
talking about performance but I feel

00:02:23,940 --> 00:02:26,730
like we're gonna take a step back and

00:02:25,110 --> 00:02:28,830
talk about like a systematic approach to

00:02:26,730 --> 00:02:30,030
how to approach performance because I

00:02:28,830 --> 00:02:31,410
could just give you tips and tricks and

00:02:30,030 --> 00:02:32,910
say oh here's a pure component use it

00:02:31,410 --> 00:02:35,850
everywhere but that's a bad tip don't

00:02:32,910 --> 00:02:37,170
follow that but essentially we kind of

00:02:35,850 --> 00:02:38,970
need to take a step back and come up

00:02:37,170 --> 00:02:41,400
with a systematic approach so we can do

00:02:38,970 --> 00:02:43,050
anything and detect performance issues

00:02:41,400 --> 00:02:45,120
in any application not just a smart

00:02:43,050 --> 00:02:46,920
application so first we need to

00:02:45,120 --> 00:02:49,950
benchmark our solution it's where are we

00:02:46,920 --> 00:02:51,630
starting from simple enough then we're

00:02:49,950 --> 00:02:53,459
going to identify the performance issues

00:02:51,630 --> 00:02:55,320
and after that we're going to try and

00:02:53,459 --> 00:02:57,600
fix the issues Andry benchmark and see

00:02:55,320 --> 00:02:59,100
if we've improved admittedly you will

00:02:57,600 --> 00:03:01,140
actually go between three and four quite

00:02:59,100 --> 00:03:05,250
a lot your first fix generally does not

00:03:01,140 --> 00:03:07,709
work so it's actually quite hard to

00:03:05,250 --> 00:03:09,450
measure performance and actually there's

00:03:07,709 --> 00:03:11,310
a really good talk I recommend given by

00:03:09,450 --> 00:03:13,170
our colleague Daniel James who gave it

00:03:11,310 --> 00:03:15,390
last year here called Swift about Swift

00:03:13,170 --> 00:03:17,220
he goes into a lot more detail than I do

00:03:15,390 --> 00:03:19,590
so if you want more detail definitely

00:03:17,220 --> 00:03:21,450
check that talk outs on YouTube so the

00:03:19,590 --> 00:03:23,250
main kind of metrics we can use to

00:03:21,450 --> 00:03:24,900
measure react performance is frames per

00:03:23,250 --> 00:03:26,790
second and react native we're aiming for

00:03:24,900 --> 00:03:28,350
60 frames per second

00:03:26,790 --> 00:03:29,580
jaci frames which is the number of

00:03:28,350 --> 00:03:32,519
frames which didn't make that render

00:03:29,580 --> 00:03:33,959
target and it would drop CPU GPU usage

00:03:32,519 --> 00:03:35,700
which I don't think is a particularly

00:03:33,959 --> 00:03:38,549
useful metric given the wide range of

00:03:35,700 --> 00:03:39,870
devices we have to target load times at

00:03:38,549 --> 00:03:42,150
this time for taking to get resources

00:03:39,870 --> 00:03:44,280
met and maybe local resources or it

00:03:42,150 --> 00:03:46,080
could be network resources and then

00:03:44,280 --> 00:03:48,269
renders which is really what I'm going

00:03:46,080 --> 00:03:50,760
to be focusing on tonight is kind of how

00:03:48,269 --> 00:03:52,709
often you render the wall time of the

00:03:50,760 --> 00:03:56,100
renders and kind of how we can visualize

00:03:52,709 --> 00:03:57,360
that is usually through flame graphs so

00:03:56,100 --> 00:03:58,650
these are the tools I want to talk about

00:03:57,360 --> 00:04:00,180
in particular so we've got the react

00:03:58,650 --> 00:04:01,769
native performance monitor I think

00:04:00,180 --> 00:04:02,400
everyone will be familiar with that rec

00:04:01,769 --> 00:04:05,130
pro flayer

00:04:02,400 --> 00:04:06,420
and interactions API console dot log I'm

00:04:05,130 --> 00:04:07,860
not going to talk about that but we all

00:04:06,420 --> 00:04:10,170
know exists and is amazing

00:04:07,860 --> 00:04:14,190
why did you render and firebase

00:04:10,170 --> 00:04:16,049
performance monitoring so entry point

00:04:14,190 --> 00:04:17,820
for all applications we've got a we

00:04:16,049 --> 00:04:20,010
found that something is a bit slow we're

00:04:17,820 --> 00:04:22,229
not too sure why we're going to enable

00:04:20,010 --> 00:04:24,750
these show performance monitor we have

00:04:22,229 --> 00:04:26,880
our RAM or JavaScript heap and our views

00:04:24,750 --> 00:04:28,620
I would say these are not very useful

00:04:26,880 --> 00:04:30,330
matrix but they are there if you want to

00:04:28,620 --> 00:04:32,340
use them the two things were most

00:04:30,330 --> 00:04:35,760
interested in here are the UI thread and

00:04:32,340 --> 00:04:37,710
the JavaScript Bret so I would say

00:04:35,760 --> 00:04:40,560
unless you're doing animations an

00:04:37,710 --> 00:04:42,300
incredibly complex layout it will be the

00:04:40,560 --> 00:04:44,400
JavaScript thread nine times out of ten

00:04:42,300 --> 00:04:45,750
but this is just a sanity check to make

00:04:44,400 --> 00:04:47,910
sure you're not looking for a bottleneck

00:04:45,750 --> 00:04:52,050
whether it doesn't do it where it

00:04:47,910 --> 00:04:53,970
doesn't exist so quick show of hands who

00:04:52,050 --> 00:04:56,750
here has actually used the react dev

00:04:53,970 --> 00:04:59,340
tools profiler

00:04:56,750 --> 00:05:02,190
okay FF for you good you'll enjoy this

00:04:59,340 --> 00:05:03,480
then they'd be having this quite similar

00:05:02,190 --> 00:05:06,870
to the performance tab in chrome

00:05:03,480 --> 00:05:08,880
developer tools so the react tools have

00:05:06,870 --> 00:05:10,320
a few advantages and they are kind of

00:05:08,880 --> 00:05:12,030
optimized for react so you get a few

00:05:10,320 --> 00:05:15,330
extra features and it's available for

00:05:12,030 --> 00:05:17,670
anyone using react native 0.57 or what

00:05:15,330 --> 00:05:19,410
sixteen point five or higher so it's

00:05:17,670 --> 00:05:21,630
kind of like I would go to my first

00:05:19,410 --> 00:05:23,280
go-to location and I'm trying to work

00:05:21,630 --> 00:05:26,520
out what's wrong with my components I've

00:05:23,280 --> 00:05:27,900
got a JavaScript issue so to start it

00:05:26,520 --> 00:05:29,520
you would go to the issue area in the

00:05:27,900 --> 00:05:30,960
app you would go to the profiler tab and

00:05:29,520 --> 00:05:32,790
you would hit record and do what you

00:05:30,960 --> 00:05:34,650
think is causing the issue and you'll be

00:05:32,790 --> 00:05:36,810
provided a flame graph I'm going to talk

00:05:34,650 --> 00:05:38,460
a little bit more about kind of what the

00:05:36,810 --> 00:05:38,790
react developer tools look like but do

00:05:38,460 --> 00:05:40,250
that

00:05:38,790 --> 00:05:42,570
I have created like a basic application

00:05:40,250 --> 00:05:45,270
just so we can understand what's going

00:05:42,570 --> 00:05:48,270
on in the example case so it's a pretty

00:05:45,270 --> 00:05:50,010
simple kind of container the container

00:05:48,270 --> 00:05:52,080
has an internal counter state which

00:05:50,010 --> 00:05:54,450
starts at 0 I have a start button and a

00:05:52,080 --> 00:05:56,430
reset button you start button starts the

00:05:54,450 --> 00:05:58,680
counter going up and the reset button

00:05:56,430 --> 00:06:01,280
stops it and resets the counter to zero

00:05:58,680 --> 00:06:04,290
when we start counting we mount a

00:06:01,280 --> 00:06:07,200
optimized component and a poorly

00:06:04,290 --> 00:06:09,030
optimized component the poorly optimized

00:06:07,200 --> 00:06:11,550
component is just a regular component

00:06:09,030 --> 00:06:13,800
but it has got a really heavy render

00:06:11,550 --> 00:06:16,470
function and the optimized component is

00:06:13,800 --> 00:06:20,820
a regular textview in a pure component

00:06:16,470 --> 00:06:22,230
wrapper cool so before I talk about

00:06:20,820 --> 00:06:24,390
what's actually on here you cannot have

00:06:22,230 --> 00:06:27,390
to understand the reactors work in two

00:06:24,390 --> 00:06:29,760
phases the render phase and the commit

00:06:27,390 --> 00:06:31,860
phase the the render phase determines

00:06:29,760 --> 00:06:33,480
what changes need to be made it calls

00:06:31,860 --> 00:06:35,340
the render method then compares a result

00:06:33,480 --> 00:06:36,479
with the previous render the commit

00:06:35,340 --> 00:06:38,910
phase is when they react actually

00:06:36,479 --> 00:06:40,390
applies the changes and also calls a few

00:06:38,910 --> 00:06:42,490
life cycle methods

00:06:40,390 --> 00:06:45,250
really that important at this point so

00:06:42,490 --> 00:06:46,960
the profiler kind of collects all of the

00:06:45,250 --> 00:06:48,190
commits kind of it collects all the

00:06:46,960 --> 00:06:50,680
forms into a commit which you can see in

00:06:48,190 --> 00:06:52,240
the top right in red here there are

00:06:50,680 --> 00:06:54,460
seven commits we can see black is the

00:06:52,240 --> 00:06:56,200
currently selected commit we've got

00:06:54,460 --> 00:06:58,180
yellow bars showing how long each commit

00:06:56,200 --> 00:06:59,620
took to render and blue bars that get a

00:06:58,180 --> 00:07:01,450
shorter and they suggest it was a quick

00:06:59,620 --> 00:07:03,420
commit yellow suggests that it missed

00:07:01,450 --> 00:07:06,550
the window and it was a janky frame and

00:07:03,420 --> 00:07:07,810
then I can move on to the flame graph

00:07:06,550 --> 00:07:10,000
the flame graph is what is in this

00:07:07,810 --> 00:07:11,410
centre here it shows you all of the

00:07:10,000 --> 00:07:13,080
components which are currently mounted

00:07:11,410 --> 00:07:15,250
and anything which is in color is

00:07:13,080 --> 00:07:17,950
something which changed in that commit

00:07:15,250 --> 00:07:19,750
in rendered so you know in which commit

00:07:17,950 --> 00:07:21,160
what components changed based on the

00:07:19,750 --> 00:07:23,350
color and the color sorry the color

00:07:21,160 --> 00:07:24,850
shows you how long it took and the

00:07:23,350 --> 00:07:27,670
length shows you the relative amount of

00:07:24,850 --> 00:07:29,560
time it took to do it so in this we can

00:07:27,670 --> 00:07:31,780
see that my example component

00:07:29,560 --> 00:07:34,360
re-rendered and on the very left I have

00:07:31,780 --> 00:07:36,700
what is showing the state here on the

00:07:34,360 --> 00:07:38,800
mid right I've got the well optimized

00:07:36,700 --> 00:07:40,810
component and the bright yellow massive

00:07:38,800 --> 00:07:43,540
component is the poorly optimized

00:07:40,810 --> 00:07:45,910
component cool so what can we do with

00:07:43,540 --> 00:07:47,770
this so normally on the right hand side

00:07:45,910 --> 00:07:49,870
we would just see the render duration

00:07:47,770 --> 00:07:52,660
but if we click on it we can drill down

00:07:49,870 --> 00:07:54,790
to a per component level and we can see

00:07:52,660 --> 00:07:57,310
how many renders have been what the

00:07:54,790 --> 00:07:58,900
states are what the props are and you

00:07:57,310 --> 00:08:00,490
also zoom in on that component to see

00:07:58,900 --> 00:08:03,670
kind of more of the children more

00:08:00,490 --> 00:08:05,050
clearly and what's great about that is

00:08:03,670 --> 00:08:07,120
once you've selected a component you can

00:08:05,050 --> 00:08:09,040
go through your commits and quite easily

00:08:07,120 --> 00:08:10,480
see what has changed at each point so

00:08:09,040 --> 00:08:12,400
here we can see that the counter is

00:08:10,480 --> 00:08:13,870
being incremented on the right-hand side

00:08:12,400 --> 00:08:16,510
so we know that that is causing the

00:08:13,870 --> 00:08:18,460
rerender but we can also see that the

00:08:16,510 --> 00:08:20,050
the poorly optimized component on the

00:08:18,460 --> 00:08:21,610
right-hand side is being rear-ended

00:08:20,050 --> 00:08:24,130
every single time the counter is

00:08:21,610 --> 00:08:27,700
incremented which is inefficient and non

00:08:24,130 --> 00:08:29,710
performance if we had a much larger

00:08:27,700 --> 00:08:31,540
component tree which is probably natural

00:08:29,710 --> 00:08:34,540
this is a very basic app with two

00:08:31,540 --> 00:08:37,840
screens we probably want to use the rank

00:08:34,540 --> 00:08:39,520
chart view it very quickly shows us what

00:08:37,840 --> 00:08:42,340
kind of component is the slowest to

00:08:39,520 --> 00:08:43,870
render in this commit and using that we

00:08:42,340 --> 00:08:45,970
can go look okay this is our biggest

00:08:43,870 --> 00:08:47,820
bottleneck in this commit let's look at

00:08:45,970 --> 00:08:50,110
this and how can we optimize certain

00:08:47,820 --> 00:08:51,790
then we found the component we don't

00:08:50,110 --> 00:08:53,900
like we can unchecked if it's a one-off

00:08:51,790 --> 00:08:56,000
case or if in every single committed

00:08:53,900 --> 00:08:57,500
a long time to render so the length of

00:08:56,000 --> 00:08:59,180
the bars here on just the lender took

00:08:57,500 --> 00:09:03,310
but it's actually relative to its commit

00:08:59,180 --> 00:09:05,930
it took place in so if it took place

00:09:03,310 --> 00:09:07,520
amongst a lot of other work the bar

00:09:05,930 --> 00:09:11,690
would be smaller relative to the others

00:09:07,520 --> 00:09:12,950
even if the number was the same this is

00:09:11,690 --> 00:09:15,980
a kind of bit I'm quite excited about

00:09:12,950 --> 00:09:18,710
it's still experimental but it is very

00:09:15,980 --> 00:09:21,020
very helpful is the interactions API you

00:09:18,710 --> 00:09:24,170
can associate actions you've done within

00:09:21,020 --> 00:09:25,880
redux or setting state with an API so

00:09:24,170 --> 00:09:29,090
you can quickly determine what is cause

00:09:25,880 --> 00:09:30,470
to each commit in your profiler so this

00:09:29,090 --> 00:09:32,540
links across so you can see I've got my

00:09:30,470 --> 00:09:34,540
start button my increment of the

00:09:32,540 --> 00:09:37,220
counters and a reset button at the end

00:09:34,540 --> 00:09:38,810
so I can click on these go across to the

00:09:37,220 --> 00:09:40,610
commit view see the flame graph and I

00:09:38,810 --> 00:09:43,430
can hop between the two and quickly work

00:09:40,610 --> 00:09:45,620
out what's caused each thing so if you

00:09:43,430 --> 00:09:47,210
want to try that I'd recommend it but

00:09:45,620 --> 00:09:48,950
definitely check out the github first

00:09:47,210 --> 00:09:50,930
because it is experimental is still

00:09:48,950 --> 00:09:54,140
changing but currently what you do is

00:09:50,930 --> 00:09:55,610
you give it a name you give it date dot

00:09:54,140 --> 00:09:57,320
now or performance up now if you're

00:09:55,610 --> 00:09:59,120
using a web app and then you pass an

00:09:57,320 --> 00:09:59,930
arrow function which wraps around what

00:09:59,120 --> 00:10:03,380
you're trying to measure the performance

00:09:59,930 --> 00:10:05,780
of okay so we found the component which

00:10:03,380 --> 00:10:08,150
is broken what are we going to do with

00:10:05,780 --> 00:10:10,700
it well we can use consulta beep debug

00:10:08,150 --> 00:10:12,770
all the cause of a log but I quite like

00:10:10,700 --> 00:10:14,780
the package why did you render it

00:10:12,770 --> 00:10:18,460
replaces why did you update it tells you

00:10:14,780 --> 00:10:22,100
exactly why your component updated and

00:10:18,460 --> 00:10:23,600
usually it's because you haven't done

00:10:22,100 --> 00:10:25,370
your pure component or your should you

00:10:23,600 --> 00:10:26,960
update correctly but it'll kind of give

00:10:25,370 --> 00:10:28,310
you a hint to what to look to if you're

00:10:26,960 --> 00:10:30,200
not too short and it's not clear from

00:10:28,310 --> 00:10:34,550
your diagram in the previous kind of

00:10:30,200 --> 00:10:36,890
flame broth view ok that was the dev

00:10:34,550 --> 00:10:38,630
tools profiler so that's kind of

00:10:36,890 --> 00:10:40,430
everything I've told you about so far

00:10:38,630 --> 00:10:42,530
has been mainly about using in

00:10:40,430 --> 00:10:44,510
development we actually do a bit of

00:10:42,530 --> 00:10:46,820
performance tracking in production as

00:10:44,510 --> 00:10:48,410
well so we use firebase performance

00:10:46,820 --> 00:10:50,510
monitoring and I highly recommend it

00:10:48,410 --> 00:10:51,980
because it gets you gonna performance

00:10:50,510 --> 00:10:54,560
metrics which you can measure over time

00:10:51,980 --> 00:10:56,420
with real-world users so you've got

00:10:54,560 --> 00:10:58,960
automatic traces which come as part of

00:10:56,420 --> 00:11:01,400
the package like average stock times

00:10:58,960 --> 00:11:04,460
Network tracking and under like other

00:11:01,400 --> 00:11:06,020
fundamental metrics and with those you

00:11:04,460 --> 00:11:06,400
can build up a picture of where your

00:11:06,020 --> 00:11:08,140
bottom

00:11:06,400 --> 00:11:10,780
of the app are mainly Network related

00:11:08,140 --> 00:11:12,910
we've been using traces to work out when

00:11:10,780 --> 00:11:15,670
startup times happen or how long it

00:11:12,910 --> 00:11:17,440
takes for a startup they're occur and we

00:11:15,670 --> 00:11:19,420
found out with a custom trace actually

00:11:17,440 --> 00:11:22,360
Android users have a four times worse

00:11:19,420 --> 00:11:23,920
time - interaction the iOS users and

00:11:22,360 --> 00:11:26,170
we've been up these inline requires and

00:11:23,920 --> 00:11:28,090
some optimizations or the network calls

00:11:26,170 --> 00:11:31,090
to bring that down to equality so that's

00:11:28,090 --> 00:11:32,470
being pretty impressive okay so I think

00:11:31,090 --> 00:11:34,630
that's all the tools I want to talk

00:11:32,470 --> 00:11:36,220
about so now I think you probably have

00:11:34,630 --> 00:11:39,160
enough tools to kind of go out and

00:11:36,220 --> 00:11:40,510
explore your own kind of problems like

00:11:39,160 --> 00:11:43,210
I've talked to you a little bit about

00:11:40,510 --> 00:11:46,420
the problems we face its markets and how

00:11:43,210 --> 00:11:48,190
we fix them so on the right hand side is

00:11:46,420 --> 00:11:50,560
what we call our event screen it's our

00:11:48,190 --> 00:11:51,940
kind of fundamental part of our app is

00:11:50,560 --> 00:11:54,970
where most of our users spend their time

00:11:51,940 --> 00:11:56,380
and can place their bets so we have at

00:11:54,970 --> 00:11:58,720
the highest level we have what's called

00:11:56,380 --> 00:12:02,080
an event which could be something such

00:11:58,720 --> 00:12:03,670
as brexit we have markets which belong

00:12:02,080 --> 00:12:05,710
to event you give multiple markets so

00:12:03,670 --> 00:12:07,030
for example a market could be the year

00:12:05,710 --> 00:12:07,840
of departure when are we actually going

00:12:07,030 --> 00:12:11,140
to leave the EU

00:12:07,840 --> 00:12:13,300
that's not me encouraging it they

00:12:11,140 --> 00:12:15,280
contract we have multiple contracts so

00:12:13,300 --> 00:12:19,120
for this example here at the project

00:12:15,280 --> 00:12:22,270
could be 2019 2020 2021 and people will

00:12:19,120 --> 00:12:25,210
trade on that so the way we load all

00:12:22,270 --> 00:12:27,160
this in is we call a REST API we load it

00:12:25,210 --> 00:12:28,870
into our Redux state and then we have a

00:12:27,160 --> 00:12:30,940
lot of live updates coming in through a

00:12:28,870 --> 00:12:32,260
WebSocket stream so you can see all like

00:12:30,940 --> 00:12:35,140
the updates come on the right hand side

00:12:32,260 --> 00:12:38,200
and to put this into context this is

00:12:35,140 --> 00:12:39,790
probably 0.1% the traded volume of the

00:12:38,200 --> 00:12:42,430
grand national so this is quite a small

00:12:39,790 --> 00:12:46,360
event that's still the kind of updates

00:12:42,430 --> 00:12:49,210
are pretty constant pretty frequent so

00:12:46,360 --> 00:12:51,130
yeah we're using Redux and it's quite a

00:12:49,210 --> 00:12:53,770
big state so we've got 400 action types

00:12:51,130 --> 00:12:57,100
600 selectors 200 connected components

00:12:53,770 --> 00:13:00,880
41 reducers and 22 middlewares it's a

00:12:57,100 --> 00:13:02,530
massive except that we have found that a

00:13:00,880 --> 00:13:04,420
lot of our performance issues have been

00:13:02,530 --> 00:13:06,520
related to Redux I wouldn't say that

00:13:04,420 --> 00:13:08,830
Redux is not performant I would just say

00:13:06,520 --> 00:13:13,120
it's very easy to write code and redux

00:13:08,830 --> 00:13:14,560
which is not performant so first piece

00:13:13,120 --> 00:13:16,300
of advice everyone will give it to you

00:13:14,560 --> 00:13:18,820
if you're using redux mineralize your

00:13:16,300 --> 00:13:19,960
selectors that doesn't mean go crazy and

00:13:18,820 --> 00:13:22,540
memorize every single

00:13:19,960 --> 00:13:24,610
selector find them expensive ones and

00:13:22,540 --> 00:13:27,040
determine whether or not is necessary to

00:13:24,610 --> 00:13:28,900
memorize them essentially we use

00:13:27,040 --> 00:13:30,310
reselect but there are a lot more

00:13:28,900 --> 00:13:32,980
options out there you can use mean wise

00:13:30,310 --> 00:13:34,780
one or the low - memorize function but

00:13:32,980 --> 00:13:36,190
the main thing is to look for selectors

00:13:34,780 --> 00:13:39,250
where they are creating new objects by

00:13:36,190 --> 00:13:41,200
reference or if it is an incredibly

00:13:39,250 --> 00:13:43,480
expensive render function very expensive

00:13:41,200 --> 00:13:45,250
selector function which is kind of quite

00:13:43,480 --> 00:13:50,080
expensive to do some things such as

00:13:45,250 --> 00:13:51,370
sorting or other such functions I don't

00:13:50,080 --> 00:13:54,220
really have time to go into the exact

00:13:51,370 --> 00:13:56,350
intricacies of it but I'd say that kind

00:13:54,220 --> 00:13:58,630
of is very important to understand how

00:13:56,350 --> 00:14:00,280
to share selectors with props across

00:13:58,630 --> 00:14:01,810
multiple components but the

00:14:00,280 --> 00:14:03,400
documentation does a really good job of

00:14:01,810 --> 00:14:07,660
describing it so I'd recommend checking

00:14:03,400 --> 00:14:10,810
that out cool so we need more wise part

00:14:07,660 --> 00:14:12,760
of our selectors normal as your state so

00:14:10,810 --> 00:14:14,590
usually your state would look something

00:14:12,760 --> 00:14:17,020
a little bit like on the left hand side

00:14:14,590 --> 00:14:18,940
where things are nested within the

00:14:17,020 --> 00:14:21,460
things that parent they belong to you

00:14:18,940 --> 00:14:24,160
when we normalize that each type of data

00:14:21,460 --> 00:14:27,220
gets its own table in the state and each

00:14:24,160 --> 00:14:30,790
data table is an object where we have

00:14:27,220 --> 00:14:32,320
the ID of each object is used as the key

00:14:30,790 --> 00:14:34,330
and the object itself is stored of that

00:14:32,320 --> 00:14:36,880
key and then any reference to a data

00:14:34,330 --> 00:14:39,670
object is then stored with a reference

00:14:36,880 --> 00:14:41,980
to that key so the reason we do this is

00:14:39,670 --> 00:14:43,840
really to benefit from the memorization

00:14:41,980 --> 00:14:45,550
of our selectors as well as optimizing

00:14:43,840 --> 00:14:49,660
for state reads rather than the state

00:14:45,550 --> 00:14:51,820
rights cool question we always come up

00:14:49,660 --> 00:14:53,380
with when we're building with Redux and

00:14:51,820 --> 00:14:54,790
connecting components is where do you

00:14:53,380 --> 00:14:57,580
actually connect you want to connect at

00:14:54,790 --> 00:15:02,680
the top or at the bottom who thinks you

00:14:57,580 --> 00:15:05,230
should connect at the top right they

00:15:02,680 --> 00:15:06,850
need to give this talk anymore so we

00:15:05,230 --> 00:15:09,850
often find ourselves that he can attempt

00:15:06,850 --> 00:15:11,230
it to connect at the top because we're

00:15:09,850 --> 00:15:13,330
iterating with a map and it makes it a

00:15:11,230 --> 00:15:15,550
bit easier kind of to write our

00:15:13,330 --> 00:15:18,010
selectors and it's less boilerplate but

00:15:15,550 --> 00:15:19,930
actually in this case in the worst case

00:15:18,010 --> 00:15:21,690
scenario a change to a single item can

00:15:19,930 --> 00:15:24,460
cause a rerender every item in that list

00:15:21,690 --> 00:15:27,690
which is not particularly performant

00:15:24,460 --> 00:15:31,150
whereas if we connect every single child

00:15:27,690 --> 00:15:33,400
and it give it the exact part of state

00:15:31,150 --> 00:15:35,260
it needs to render we also less renders

00:15:33,400 --> 00:15:37,210
general and less unnecessary renders as

00:15:35,260 --> 00:15:40,750
well as not having to rerender the

00:15:37,210 --> 00:15:42,760
parent when it rear Enders to change

00:15:40,750 --> 00:15:44,920
this approach you need to gonna pass the

00:15:42,760 --> 00:15:46,690
key IDs in and connect each component to

00:15:44,920 --> 00:15:48,280
the state it needs and nothing else so I

00:15:46,690 --> 00:15:50,620
say connect minimal state give it

00:15:48,280 --> 00:15:54,760
absolutely nothing more than it needs

00:15:50,620 --> 00:15:57,130
and primitive types if possible cool

00:15:54,760 --> 00:15:59,740
this one I think should be really

00:15:57,130 --> 00:16:01,330
obvious I'm gonna say it anyway break

00:15:59,740 --> 00:16:03,850
down your components just because the

00:16:01,330 --> 00:16:05,920
component all has the same ID doesn't

00:16:03,850 --> 00:16:08,140
mean it should be its own component so

00:16:05,920 --> 00:16:10,960
for example in our application on the

00:16:08,140 --> 00:16:13,240
right hand side the yellow boxes they

00:16:10,960 --> 00:16:15,520
re-render rapidly maybe four or five

00:16:13,240 --> 00:16:17,350
times each second whereas the rest of

00:16:15,520 --> 00:16:19,360
the data in the white box won't change

00:16:17,350 --> 00:16:20,560
at all for your entire session so it

00:16:19,360 --> 00:16:22,900
doesn't make sense even though they

00:16:20,560 --> 00:16:24,640
share the same ID to keep them the same

00:16:22,900 --> 00:16:30,100
component you break it down further

00:16:24,640 --> 00:16:32,740
so the rerender is doing less cool sorry

00:16:30,100 --> 00:16:34,030
I'm firing it these quickly so if you

00:16:32,740 --> 00:16:36,280
have a lot of actions firing in quick

00:16:34,030 --> 00:16:37,810
succession and they're impacting similar

00:16:36,280 --> 00:16:41,050
parts of the store definitely look into

00:16:37,810 --> 00:16:43,900
using redux back sorry Redux patched

00:16:41,050 --> 00:16:45,970
actions it reduces actions under a

00:16:43,900 --> 00:16:47,680
single subscriber notification which

00:16:45,970 --> 00:16:49,540
means you don't get multiple rear Enders

00:16:47,680 --> 00:16:51,430
happening in quick succession you don't

00:16:49,540 --> 00:16:52,750
necessarily have to use this library you

00:16:51,430 --> 00:16:54,310
can do it in other ways manually

00:16:52,750 --> 00:16:56,880
influencing it but we found this was the

00:16:54,310 --> 00:16:59,470
easiest one and secondly if you are

00:16:56,880 --> 00:17:01,570
using a lot of the same actions in a

00:16:59,470 --> 00:17:02,920
batch it suggests that you haven't kind

00:17:01,570 --> 00:17:04,240
of written your actions correctly and

00:17:02,920 --> 00:17:05,980
should probably reconsider we're

00:17:04,240 --> 00:17:09,820
realizing that action so we can handle

00:17:05,980 --> 00:17:12,250
multiple payloads this one's quite

00:17:09,820 --> 00:17:14,380
simple don't put it in Redux Redux is

00:17:12,250 --> 00:17:17,620
not inherently slow but it is slower

00:17:14,380 --> 00:17:18,880
than local state so if you have a piece

00:17:17,620 --> 00:17:21,040
of state which doesn't need to be in

00:17:18,880 --> 00:17:22,720
redux don't put it in Redux just keep it

00:17:21,040 --> 00:17:24,640
local it doesn't make sense to put it

00:17:22,720 --> 00:17:26,890
there if it doesn't belong there so for

00:17:24,640 --> 00:17:28,270
example if you had some kind of

00:17:26,890 --> 00:17:30,460
highlighter which showed when a

00:17:28,270 --> 00:17:32,140
component was selected you don't need to

00:17:30,460 --> 00:17:34,380
fit on Redux just keep in the local

00:17:32,140 --> 00:17:39,190
state no one else needs to know about it

00:17:34,380 --> 00:17:41,380
go live data optimizations I think as

00:17:39,190 --> 00:17:44,830
engineers we suffer this issue that we

00:17:41,380 --> 00:17:45,750
think if it can be optimized we should

00:17:44,830 --> 00:17:47,759
optimizer

00:17:45,750 --> 00:17:49,919
and we'll keep on chasing this trooper

00:17:47,759 --> 00:17:54,090
or render time and we forget actually

00:17:49,919 --> 00:17:55,230
what the end user wants and like we just

00:17:54,090 --> 00:17:57,330
have to ask ourselves do they actually

00:17:55,230 --> 00:17:59,450
benefit from this many updates we might

00:17:57,330 --> 00:18:02,850
be able to handle 200 updates a second

00:17:59,450 --> 00:18:05,610
but can a user understand 200 updates a

00:18:02,850 --> 00:18:07,860
second the reality is probably not so

00:18:05,610 --> 00:18:09,570
actually is quite beneficial to throttle

00:18:07,860 --> 00:18:11,399
your updates outside of redux stay

00:18:09,570 --> 00:18:13,559
outside of the react component tree and

00:18:11,399 --> 00:18:15,870
then pass them in slower in the throttle

00:18:13,559 --> 00:18:18,659
batched approach and we do that at

00:18:15,870 --> 00:18:23,340
markets do you handle our prices and it

00:18:18,659 --> 00:18:28,950
looks something like this I'm very happy

00:18:23,340 --> 00:18:30,539
with that nice I can't talk about every

00:18:28,950 --> 00:18:32,519
kind of performance optimization

00:18:30,539 --> 00:18:33,960
available in this presentation but

00:18:32,519 --> 00:18:36,809
here's kind of just a short list of

00:18:33,960 --> 00:18:38,220
things you could also look into if you

00:18:36,809 --> 00:18:39,750
work and have tried everything I done

00:18:38,220 --> 00:18:41,039
and nothing it worked these are the

00:18:39,750 --> 00:18:43,379
quakers are looking at the native

00:18:41,039 --> 00:18:45,029
animations the interaction manager in

00:18:43,379 --> 00:18:47,700
line requires skeleton loading and

00:18:45,029 --> 00:18:51,539
network called aggregation so to

00:18:47,700 --> 00:18:54,570
conclude benchmark to determine current

00:18:51,539 --> 00:18:56,549
performance find your issues fix your

00:18:54,570 --> 00:18:59,789
issues and benchmark again it's that

00:18:56,549 --> 00:19:01,170
simple that's me done thank you very

00:18:59,789 --> 00:19:06,939
much

00:19:01,170 --> 00:19:06,939

YouTube URL: https://www.youtube.com/watch?v=doAEjnUgOcI


