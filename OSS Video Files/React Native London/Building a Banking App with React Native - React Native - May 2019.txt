Title: Building a Banking App with React Native - React Native - May 2019
Publication date: 2019-06-04
Playlist: React Native London
Description: 
	Presented by Alexis Mangin.

At Zopa, we’re building a mobile application to help people feel more in control of their finances. Over the last few years, we’ve worked hard to build a modular and scalable application that can be extended by all our product teams. How did we manage to keep up? We will give you an overview of our project structure, why we use feature flags in the app and our work toward continuous deployment.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:10,290
hello everyone how are you doing good

00:00:04,730 --> 00:00:13,860
all right cool so today today I'm going

00:00:10,290 --> 00:00:20,670
to talk about our work on the mobile

00:00:13,860 --> 00:00:24,660
application at supe so the I'm just

00:00:20,670 --> 00:00:26,720
going to show you I'm just checking the

00:00:24,660 --> 00:00:30,779
microphone I'm just going to show you

00:00:26,720 --> 00:00:36,649
where we went and what we've done so far

00:00:30,779 --> 00:00:39,120
and different tools and different

00:00:36,649 --> 00:00:41,340
features we have inside the application

00:00:39,120 --> 00:00:43,410
to help us actually reaching a point

00:00:41,340 --> 00:00:47,070
where we are proud of the quality of our

00:00:43,410 --> 00:00:50,480
work and part of what we've done and how

00:00:47,070 --> 00:00:55,020
you can apply that on your project so

00:00:50,480 --> 00:00:57,590
long time ago we started a mobile

00:00:55,020 --> 00:01:00,449
application which is this prototype I

00:00:57,590 --> 00:01:04,769
think ISA is here and you've seen that

00:01:00,449 --> 00:01:08,600
if build that prototype so basically it

00:01:04,769 --> 00:01:11,310
was very simple react native application

00:01:08,600 --> 00:01:15,110
to allow you to get a quote inside the

00:01:11,310 --> 00:01:19,740
application to apply for loan and

00:01:15,110 --> 00:01:23,490
basically to keep track of a few

00:01:19,740 --> 00:01:28,979
application it was very simple I did a

00:01:23,490 --> 00:01:32,610
good job it worked pretty well but it

00:01:28,979 --> 00:01:36,119
wasn't what soup I wanted it was more

00:01:32,610 --> 00:01:38,700
like a prototype something we wanted to

00:01:36,119 --> 00:01:41,759
see if Zuppa will be able to create a

00:01:38,700 --> 00:01:46,409
mobile application pretty fast and see

00:01:41,759 --> 00:01:50,700
if we can integrate with our system so

00:01:46,409 --> 00:01:55,560
we went back and we discussed a little

00:01:50,700 --> 00:01:58,259
bit about what do we actually need as a

00:01:55,560 --> 00:02:02,939
company what do we need what do our

00:01:58,259 --> 00:02:06,270
customer needs so what they want is to

00:02:02,939 --> 00:02:09,420
be able to see the project which is a

00:02:06,270 --> 00:02:12,780
loan or an investment today I'm actually

00:02:09,420 --> 00:02:13,560
be in the future or next banking project

00:02:12,780 --> 00:02:17,340
like

00:02:13,560 --> 00:02:19,800
the deposit accounts or critical same I

00:02:17,340 --> 00:02:23,880
also want to see aggregated data about

00:02:19,800 --> 00:02:26,720
the project so maybe you can get data

00:02:23,880 --> 00:02:30,030
from you different bank accounts or

00:02:26,720 --> 00:02:33,560
maybe you can have an idea how much

00:02:30,030 --> 00:02:37,650
money you have how much money you own Oh

00:02:33,560 --> 00:02:39,390
2 to the power anywhere else but they

00:02:37,650 --> 00:02:43,349
also want to access the personal data

00:02:39,390 --> 00:02:45,209
they want to see the profile the

00:02:43,349 --> 00:02:51,540
addresses to be able to update them if

00:02:45,209 --> 00:02:55,530
they need to for Earth prods opium so we

00:02:51,540 --> 00:02:57,209
also peon employees of Zuppa what we

00:02:55,530 --> 00:03:01,440
wanted is a mobile application where

00:02:57,209 --> 00:03:05,670
each project team can plug the project

00:03:01,440 --> 00:03:07,680
inside the mobile application so you

00:03:05,670 --> 00:03:10,500
will have a call application and you

00:03:07,680 --> 00:03:14,459
have project features inside the

00:03:10,500 --> 00:03:17,579
application so we wanted to let each

00:03:14,459 --> 00:03:21,120
project team each developers inside each

00:03:17,579 --> 00:03:24,350
project team to be able to plug the

00:03:21,120 --> 00:03:28,079
project and make it work pretty easily

00:03:24,350 --> 00:03:29,370
so the company is divided by tribe and

00:03:28,079 --> 00:03:32,069
squads I don't know if you know this

00:03:29,370 --> 00:03:33,569
model is basically the Spotify model for

00:03:32,069 --> 00:03:35,959
scrum and a joy

00:03:33,569 --> 00:03:39,030
so tribe is more like a project team and

00:03:35,959 --> 00:03:42,600
squads are sub teams inside the project

00:03:39,030 --> 00:03:45,540
team and each team basically have their

00:03:42,600 --> 00:03:49,280
own designers and developers and project

00:03:45,540 --> 00:03:52,170
managers etc which means we have

00:03:49,280 --> 00:03:59,760
different mobile developers in different

00:03:52,170 --> 00:04:02,299
teams so what we thought would be ok we

00:03:59,760 --> 00:04:08,010
need an application a way for the teams

00:04:02,299 --> 00:04:12,090
to plug their project what if we build

00:04:08,010 --> 00:04:16,190
an operating system now I'm kidding what

00:04:12,090 --> 00:04:19,260
if we build hub basically where each

00:04:16,190 --> 00:04:21,510
application each project basically have

00:04:19,260 --> 00:04:24,300
their own sub application inside our

00:04:21,510 --> 00:04:27,389
application so that's basically what we

00:04:24,300 --> 00:04:29,689
did and I'm going to show you

00:04:27,389 --> 00:04:33,810
you the homescreen of super application

00:04:29,689 --> 00:04:35,460
so this is how it looks like today you

00:04:33,810 --> 00:04:38,749
might not have all the project if you

00:04:35,460 --> 00:04:41,099
download the super application but

00:04:38,749 --> 00:04:44,550
basically what we have is a home screen

00:04:41,099 --> 00:04:46,319
where you can see different project so

00:04:44,550 --> 00:04:50,479
you can see the super project and you

00:04:46,319 --> 00:04:52,680
can also stick and you can see the

00:04:50,479 --> 00:04:53,939
connected accounts for example so we're

00:04:52,680 --> 00:04:55,409
working on a feature called money

00:04:53,939 --> 00:04:58,889
management which allows you to connect

00:04:55,409 --> 00:05:01,860
your bank accounts and you can also see

00:04:58,889 --> 00:05:03,330
aggregated data from your different bank

00:05:01,860 --> 00:05:06,689
accounts from your different super

00:05:03,330 --> 00:05:12,210
project so it would be on a different

00:05:06,689 --> 00:05:16,620
tab on application so to do that what we

00:05:12,210 --> 00:05:18,270
didn't want to do was to import every

00:05:16,620 --> 00:05:20,759
single project inside the home screen

00:05:18,270 --> 00:05:23,610
and to display them to the user that's

00:05:20,759 --> 00:05:25,020
not the way we wanted it to be we didn't

00:05:23,610 --> 00:05:28,169
want the home screen to be aware of

00:05:25,020 --> 00:05:31,229
anything related to any project what we

00:05:28,169 --> 00:05:33,050
wanted is to have the home screen like a

00:05:31,229 --> 00:05:37,139
host

00:05:33,050 --> 00:05:39,180
so it's asked for super and non super

00:05:37,139 --> 00:05:42,719
application oh sorry

00:05:39,180 --> 00:05:45,509
so bands on super project it doesn't

00:05:42,719 --> 00:05:48,330
know anything about projects and it

00:05:45,509 --> 00:05:51,839
basically has a contract between the

00:05:48,330 --> 00:05:56,490
different project and the home screen

00:05:51,839 --> 00:06:00,649
itself so how does that work in terms of

00:05:56,490 --> 00:06:03,169
code I guess you won't do it's very

00:06:00,649 --> 00:06:06,750
straightforward so what we have is

00:06:03,169 --> 00:06:09,389
saloons project for example Mexico which

00:06:06,750 --> 00:06:11,279
we've the projects from their API and

00:06:09,389 --> 00:06:14,310
they inject it in redux

00:06:11,279 --> 00:06:17,449
and the home screen basically just read

00:06:14,310 --> 00:06:23,419
the Redux store and displays the project

00:06:17,449 --> 00:06:26,550
so each project of our company each

00:06:23,419 --> 00:06:30,569
investment credit card goes through this

00:06:26,550 --> 00:06:33,240
path and they inject the data inside the

00:06:30,569 --> 00:06:37,649
riddick store and the home screen with

00:06:33,240 --> 00:06:41,370
them and displays them to the user so I

00:06:37,649 --> 00:06:44,820
have a JSON file of how this looks like

00:06:41,370 --> 00:06:48,090
I simplified it a little bit but this is

00:06:44,820 --> 00:06:51,360
basically how it is so they inject a

00:06:48,090 --> 00:06:54,030
product you can define an icon category

00:06:51,360 --> 00:06:58,290
a privacy or you want to rank your

00:06:54,030 --> 00:07:00,090
project inside is a home screen where

00:06:58,290 --> 00:07:03,840
you want to navigate to once you click

00:07:00,090 --> 00:07:08,070
on the project and more details about

00:07:03,840 --> 00:07:13,530
the data you want to display that's

00:07:08,070 --> 00:07:16,770
basically how hub works so how is

00:07:13,530 --> 00:07:18,980
everything structured so we have project

00:07:16,770 --> 00:07:22,860
packages so our project packages are

00:07:18,980 --> 00:07:24,150
loans investment credit cards so all the

00:07:22,860 --> 00:07:27,540
projects that super provide to our

00:07:24,150 --> 00:07:29,850
customers they are completely

00:07:27,540 --> 00:07:32,550
independent from each other they don't

00:07:29,850 --> 00:07:34,560
know anything about each other and the

00:07:32,550 --> 00:07:43,200
goal is basically to have completely

00:07:34,560 --> 00:07:45,480
separated yeah separated codebase so

00:07:43,200 --> 00:07:47,370
they can basically you don't want to

00:07:45,480 --> 00:07:50,630
have spaghetti code until you have back

00:07:47,370 --> 00:07:53,520
and forth between the different project

00:07:50,630 --> 00:07:55,650
so they are kind of isolated from the

00:07:53,520 --> 00:07:59,280
rest of the application from the rest of

00:07:55,650 --> 00:08:03,030
the other project and then we have core

00:07:59,280 --> 00:08:05,520
packages the co packages are the home

00:08:03,030 --> 00:08:06,990
screen the sign-in screen profile so

00:08:05,520 --> 00:08:09,360
everything that is not related to a

00:08:06,990 --> 00:08:12,660
project live in their own package and

00:08:09,360 --> 00:08:14,310
again they are completely separated they

00:08:12,660 --> 00:08:18,180
are isolated so the home screen only

00:08:14,310 --> 00:08:19,860
take care of the home screen and profile

00:08:18,180 --> 00:08:24,090
screen only take care of the profile

00:08:19,860 --> 00:08:25,740
screen so what happens is if the loans

00:08:24,090 --> 00:08:26,970
wants to inject something the home

00:08:25,740 --> 00:08:30,330
screen basically they consume the

00:08:26,970 --> 00:08:36,110
package home screen and say add their

00:08:30,330 --> 00:08:39,090
data on the home screen so far so good

00:08:36,110 --> 00:08:44,310
cool all right

00:08:39,090 --> 00:08:48,480
so we also have another set of packages

00:08:44,310 --> 00:08:52,140
which is our libraries so the mobile

00:08:48,480 --> 00:08:54,270
application uses a set of libraries that

00:08:52,140 --> 00:08:58,650
we created just for the mobile

00:08:54,270 --> 00:09:01,050
application which is used by both

00:08:58,650 --> 00:09:03,960
project packages and core packages and

00:09:01,050 --> 00:09:08,430
there are like NPM packages that we use

00:09:03,960 --> 00:09:10,380
locally on our code base so those are

00:09:08,430 --> 00:09:14,210
for example the notification system

00:09:10,380 --> 00:09:18,779
analytics our UI component library etc

00:09:14,210 --> 00:09:21,120
and we also have shared library packages

00:09:18,779 --> 00:09:23,450
so we have a mono repo that we share

00:09:21,120 --> 00:09:26,820
with all the project all the teams

00:09:23,450 --> 00:09:29,850
across super and because we want

00:09:26,820 --> 00:09:33,270
everything to be the same like from data

00:09:29,850 --> 00:09:37,370
validation from I mean data formatting

00:09:33,270 --> 00:09:40,950
our tests chesley and rules just rules

00:09:37,370 --> 00:09:43,710
API interfaces everything is in one

00:09:40,950 --> 00:09:49,740
place so we don't have to rebuild

00:09:43,710 --> 00:09:52,670
everything again and again alright so

00:09:49,740 --> 00:09:55,410
this leads us to a code base that's

00:09:52,670 --> 00:09:57,780
completely structure by features and not

00:09:55,410 --> 00:10:01,670
categorized like you might see in most

00:09:57,780 --> 00:10:05,520
times it helped us to refactor our code

00:10:01,670 --> 00:10:08,040
much easier because you can basically

00:10:05,520 --> 00:10:10,620
switch on and switch off a feature the

00:10:08,040 --> 00:10:12,630
way you want and you can create a new

00:10:10,620 --> 00:10:15,170
feature let's say I want to have a

00:10:12,630 --> 00:10:17,640
version two of the investment project

00:10:15,170 --> 00:10:21,510
and basically you can create a new

00:10:17,640 --> 00:10:23,070
folder investment v2 and you add all

00:10:21,510 --> 00:10:25,140
your components and all your logic

00:10:23,070 --> 00:10:28,530
inside this folder and you can decide to

00:10:25,140 --> 00:10:33,959
switch on it or not as long as contract

00:10:28,530 --> 00:10:37,050
with the core packages stays the same so

00:10:33,959 --> 00:10:41,010
this concept of structuring by feature

00:10:37,050 --> 00:10:43,560
helped us to actually enable and disable

00:10:41,010 --> 00:10:48,089
features on the fly or on the build time

00:10:43,560 --> 00:10:49,860
right now and actually this is very

00:10:48,089 --> 00:10:53,150
important for us and I'm going to talk

00:10:49,860 --> 00:10:53,150
about it a little bit more after

00:10:54,560 --> 00:11:03,420
so feature branching is something that

00:11:00,530 --> 00:11:07,080
everyone does on the project they need

00:11:03,420 --> 00:11:09,720
to create a new branch to work on the

00:11:07,080 --> 00:11:11,670
feature and to merge em to the master

00:11:09,720 --> 00:11:15,600
branch or the develop branch I'm pretty

00:11:11,670 --> 00:11:17,970
sure everyone does the same thing so

00:11:15,600 --> 00:11:20,040
that's what we did that's what we wanted

00:11:17,970 --> 00:11:22,830
us to do so you create your feature you

00:11:20,040 --> 00:11:27,770
work on it and then you merge it to the

00:11:22,830 --> 00:11:31,200
main branch but one wish we had was

00:11:27,770 --> 00:11:35,010
sometimes you branch and the feature

00:11:31,200 --> 00:11:39,090
branch stays there for weeks or month

00:11:35,010 --> 00:11:40,380
and I mean the other developers are

00:11:39,090 --> 00:11:43,920
working on the main branch and they are

00:11:40,380 --> 00:11:45,990
actually adding new features and at some

00:11:43,920 --> 00:11:48,480
point I mean you keep amazing and

00:11:45,990 --> 00:11:50,970
rebasing and but you've had it so much

00:11:48,480 --> 00:11:52,920
code in your future branch that it's

00:11:50,970 --> 00:11:56,540
super difficult the day you want to

00:11:52,920 --> 00:12:00,270
merge back to the develop branch and it

00:11:56,540 --> 00:12:02,190
to give you a story we when we had at a

00:12:00,270 --> 00:12:05,580
feature which was a loan repayment on

00:12:02,190 --> 00:12:07,860
our mobile application I think it took

00:12:05,580 --> 00:12:10,620
the developer more than a week to merge

00:12:07,860 --> 00:12:12,900
back to the main branch because there

00:12:10,620 --> 00:12:15,120
were so many conflicts and so many

00:12:12,900 --> 00:12:17,190
changes that has been done by the

00:12:15,120 --> 00:12:20,370
developer and thousands of rain occurred

00:12:17,190 --> 00:12:23,610
were created that it was very difficult

00:12:20,370 --> 00:12:28,590
for us to actually merge back and we

00:12:23,610 --> 00:12:30,120
wanted to avoid that because it's it's

00:12:28,590 --> 00:12:33,690
difficult to maintain it's difficult to

00:12:30,120 --> 00:12:36,990
to continue working when these kind of

00:12:33,690 --> 00:12:39,660
issues happen so what we've decided to

00:12:36,990 --> 00:12:41,700
introduce these feature flags I don't

00:12:39,660 --> 00:12:44,880
know if any of you use feature Flags yes

00:12:41,700 --> 00:12:47,360
no I'm just going to give a quick

00:12:44,880 --> 00:12:50,970
overview what feature flags are about

00:12:47,360 --> 00:12:54,600
they basically hello you to enable and

00:12:50,970 --> 00:12:58,710
disable of feature from your code base

00:12:54,600 --> 00:13:01,260
so you can merge your code even though

00:12:58,710 --> 00:13:03,810
the feature is not done so you can start

00:13:01,260 --> 00:13:05,080
working on the feature and you modify

00:13:03,810 --> 00:13:08,110
your code

00:13:05,080 --> 00:13:10,149
later and you merge and you continue

00:13:08,110 --> 00:13:11,880
working on your future and because your

00:13:10,149 --> 00:13:14,769
future is hidden behind a feature flag

00:13:11,880 --> 00:13:18,310
nobody cares I mean as long as you don't

00:13:14,769 --> 00:13:21,160
break anything you can work beyond new

00:13:18,310 --> 00:13:22,839
feature flag as long as you want and

00:13:21,160 --> 00:13:27,570
that's something we needed to work on a

00:13:22,839 --> 00:13:29,970
new banking project because we want

00:13:27,570 --> 00:13:32,769
critical feature for example to be

00:13:29,970 --> 00:13:36,070
available forms for some customers or

00:13:32,769 --> 00:13:39,279
for some people but we didn't want

00:13:36,070 --> 00:13:41,290
everyone to be able to see it and we

00:13:39,279 --> 00:13:43,269
didn't want to have a huge feature

00:13:41,290 --> 00:13:47,430
branch that lasts for six months because

00:13:43,269 --> 00:13:47,430
feature is not ready for everyone

00:13:47,670 --> 00:13:52,690
another good advantage of feature Flags

00:13:50,170 --> 00:13:56,410
is incremental rollout so like I said if

00:13:52,690 --> 00:13:58,810
you want to only have your feature

00:13:56,410 --> 00:14:01,959
available for a subset of people you can

00:13:58,810 --> 00:14:05,649
just do it you can decide to enable you

00:14:01,959 --> 00:14:08,140
can use a tool or you can do it on your

00:14:05,649 --> 00:14:11,649
own so in our case we start with a very

00:14:08,140 --> 00:14:13,870
basic way to enable and disable feature

00:14:11,649 --> 00:14:16,240
Flags it's just a simple configuration

00:14:13,870 --> 00:14:18,790
file where we decide okay I want this

00:14:16,240 --> 00:14:21,040
feature I don't want this feature and so

00:14:18,790 --> 00:14:23,680
you turn on or turn off different

00:14:21,040 --> 00:14:25,750
features so for our beta users

00:14:23,680 --> 00:14:27,970
everything is turned on and they can use

00:14:25,750 --> 00:14:30,700
all the features but for general

00:14:27,970 --> 00:14:34,589
availability you cannot use all the

00:14:30,700 --> 00:14:34,589
features you can only use a few of them

00:14:35,040 --> 00:14:40,930
so this is pretty simple to implement in

00:14:38,770 --> 00:14:42,940
your code base you can just have a

00:14:40,930 --> 00:14:46,380
conditional rendering for example for

00:14:42,940 --> 00:14:49,180
react where you decide to render a

00:14:46,380 --> 00:14:50,860
navigation item for example if the

00:14:49,180 --> 00:14:54,760
feature flag is turned on or if it's

00:14:50,860 --> 00:14:56,380
turned off if the navigation item is not

00:14:54,760 --> 00:14:58,839
there there is no way for you to access

00:14:56,380 --> 00:15:02,290
the screen so basically you don't have

00:14:58,839 --> 00:15:04,570
any issue unless you use Tigers and

00:15:02,290 --> 00:15:10,930
stuff like that but I'm gonna talk about

00:15:04,570 --> 00:15:13,810
that after so this allowed us to go from

00:15:10,930 --> 00:15:16,720
long live branches to actually merging

00:15:13,810 --> 00:15:17,850
as fast as we can so we can create a

00:15:16,720 --> 00:15:20,190
branch

00:15:17,850 --> 00:15:22,560
work on it for a week or maybe a few

00:15:20,190 --> 00:15:24,690
days or maybe even a few hours get it

00:15:22,560 --> 00:15:26,940
reviewed by developers and then we merge

00:15:24,690 --> 00:15:30,420
it back and if it's behind the future

00:15:26,940 --> 00:15:33,510
flags there is no worry to have about as

00:15:30,420 --> 00:15:39,000
long as you don't touch existing codes

00:15:33,510 --> 00:15:41,430
that is available in GA so we can do as

00:15:39,000 --> 00:15:44,090
many future branch as we want and we

00:15:41,430 --> 00:15:44,090
melt them back

00:15:44,370 --> 00:15:52,860
however merging often forces you to

00:15:48,830 --> 00:15:53,190
actually check your code as much as you

00:15:52,860 --> 00:15:56,790
can

00:15:53,190 --> 00:15:59,310
you cannot just merge and pray that it's

00:15:56,790 --> 00:16:01,560
going to work you need to be confident

00:15:59,310 --> 00:16:05,220
about what you merge and that's why we

00:16:01,560 --> 00:16:09,630
have plenty of tools and libraries to

00:16:05,220 --> 00:16:12,450
help us keeping our code base as best

00:16:09,630 --> 00:16:14,880
quality as you can be so every time we

00:16:12,450 --> 00:16:15,870
create a pull request we weren't such a

00:16:14,880 --> 00:16:21,110
sanity check

00:16:15,870 --> 00:16:27,320
like running just running typescript

00:16:21,110 --> 00:16:33,120
lint we're running a few different tests

00:16:27,320 --> 00:16:36,570
we also have detox tests whenever we run

00:16:33,120 --> 00:16:38,850
them every day to make sure that nobody

00:16:36,570 --> 00:16:44,190
broke any screen so it's more like our

00:16:38,850 --> 00:16:46,530
integration test we also use a PM for QA

00:16:44,190 --> 00:16:49,980
testing which is and to end tests with

00:16:46,530 --> 00:16:52,170
our UHG environment and we have code

00:16:49,980 --> 00:16:54,270
quality tools make sure the code is

00:16:52,170 --> 00:16:57,510
still working with sonic qube with

00:16:54,270 --> 00:16:59,190
century for crash reporting Jenkins is

00:16:57,510 --> 00:17:01,770
our continuous integration tool and we

00:16:59,190 --> 00:17:03,420
use an on-site Mac server to generate or

00:17:01,770 --> 00:17:07,680
build so we are not using anything like

00:17:03,420 --> 00:17:10,650
be a sub center or bitwise because we

00:17:07,680 --> 00:17:15,240
becoming a bank and we cannot have Wars

00:17:10,650 --> 00:17:16,230
on the cloud and absentee and test

00:17:15,240 --> 00:17:21,860
flight is only used for beta

00:17:16,230 --> 00:17:26,130
distribution so we feature Flags

00:17:21,860 --> 00:17:28,950
our next goal was to have remote feature

00:17:26,130 --> 00:17:31,639
flags which means you can toggle your

00:17:28,950 --> 00:17:35,350
feature flags from in

00:17:31,639 --> 00:17:40,340
and that's where things get complicated

00:17:35,350 --> 00:17:43,429
so as you can imagine if I want to turn

00:17:40,340 --> 00:17:47,659
off the money management feature so it

00:17:43,429 --> 00:17:49,389
means I need to remove items from the

00:17:47,659 --> 00:17:52,100
home screen because I've injected them

00:17:49,389 --> 00:17:54,470
before on Riddick's and now I need to

00:17:52,100 --> 00:17:57,980
remove them how can I do that

00:17:54,470 --> 00:18:01,909
I need to remove items everywhere i

00:17:57,980 --> 00:18:04,279
injected my project or my feature it can

00:18:01,909 --> 00:18:06,080
be in any coffe package it can be on the

00:18:04,279 --> 00:18:08,059
home screen it can be on the help screen

00:18:06,080 --> 00:18:10,750
on the profile screen depends where you

00:18:08,059 --> 00:18:13,340
injected your project and that's

00:18:10,750 --> 00:18:16,159
complicated to actually hide and show

00:18:13,340 --> 00:18:18,830
features where you have conditional

00:18:16,159 --> 00:18:21,919
elements everywhere especially when the

00:18:18,830 --> 00:18:23,389
data comes remotely so you'd never know

00:18:21,919 --> 00:18:25,070
when it's going to come you never know

00:18:23,389 --> 00:18:27,620
if it's going to be in one seconds or 10

00:18:25,070 --> 00:18:29,870
seconds depends of the network of the

00:18:27,620 --> 00:18:33,529
user in my even never never come if the

00:18:29,870 --> 00:18:36,679
entire connection is gone so you also

00:18:33,529 --> 00:18:39,529
need to disable background tasks so if

00:18:36,679 --> 00:18:40,789
you use vedic sagar like earth our

00:18:39,529 --> 00:18:43,700
scigirls are running in the background

00:18:40,789 --> 00:18:47,840
and they are running as you open the app

00:18:43,700 --> 00:18:51,019
so if a certain project like loans gets

00:18:47,840 --> 00:18:55,070
disabled it means we also need to remove

00:18:51,019 --> 00:18:59,029
the scigirls running which is a bit

00:18:55,070 --> 00:19:02,059
complicated and what about if we were on

00:18:59,029 --> 00:19:05,210
the project screen so you tap on that

00:19:02,059 --> 00:19:07,879
card open the project and then suddenly

00:19:05,210 --> 00:19:09,259
we remotely disable the feature what

00:19:07,879 --> 00:19:11,210
should happen should we navigate the

00:19:09,259 --> 00:19:15,169
user outside to go back on the home

00:19:11,210 --> 00:19:16,909
screen should we don't do anything if

00:19:15,169 --> 00:19:18,769
the code disappear suddenly would be

00:19:16,909 --> 00:19:22,419
complicated might break the application

00:19:18,769 --> 00:19:22,419
so that's where things get complicated

00:19:22,820 --> 00:19:28,220
so one decision that we took is not to

00:19:25,370 --> 00:19:31,070
do any of this and to only fetch the

00:19:28,220 --> 00:19:33,649
data when you open the app and to apply

00:19:31,070 --> 00:19:36,500
the feature flag straight when you open

00:19:33,649 --> 00:19:38,779
the app and you never change the value

00:19:36,500 --> 00:19:43,220
of the future flags later on you only

00:19:38,779 --> 00:19:45,230
apply them at boot time so this

00:19:43,220 --> 00:19:47,179
prevents us from actually having some

00:19:45,230 --> 00:19:50,299
wheel bugs because we disable the

00:19:47,179 --> 00:19:52,429
feature flag on the fly or to disable

00:19:50,299 --> 00:19:56,320
the background task because we already

00:19:52,429 --> 00:19:56,320
disabled them when you open the app and

00:19:58,929 --> 00:20:04,400
yes you apply like I just say you apply

00:20:02,120 --> 00:20:07,789
them when you open the app on the

00:20:04,400 --> 00:20:10,760
current session so this forces us to

00:20:07,789 --> 00:20:16,450
know if a certain user needs to have

00:20:10,760 --> 00:20:19,370
access or not about the future flag so

00:20:16,450 --> 00:20:20,870
we know which member is logged in which

00:20:19,370 --> 00:20:22,970
member is not judging when they open the

00:20:20,870 --> 00:20:25,190
app so we can decide if they are allowed

00:20:22,970 --> 00:20:29,630
to access the feature flag or not the

00:20:25,190 --> 00:20:31,100
feature itself the next thing I wanted

00:20:29,630 --> 00:20:33,669
to talk about is continuous deployment

00:20:31,100 --> 00:20:36,289
because if we just feature flag today is

00:20:33,669 --> 00:20:39,350
because we want to reach that point

00:20:36,289 --> 00:20:40,880
where everything is automated from the

00:20:39,350 --> 00:20:43,220
time you create the pull request and you

00:20:40,880 --> 00:20:45,740
merge that pull request to the time it

00:20:43,220 --> 00:20:49,370
goes to the customers I don't know how

00:20:45,740 --> 00:20:54,919
many of you have this actually how many

00:20:49,370 --> 00:20:57,860
yes one a few but is quite complicated

00:20:54,919 --> 00:20:59,450
to reach especially when you build more

00:20:57,860 --> 00:21:02,390
and more features inside the application

00:20:59,450 --> 00:21:04,070
and you want to make sure the quality is

00:21:02,390 --> 00:21:05,299
there and you get more customers using

00:21:04,070 --> 00:21:08,210
your application so you need to be

00:21:05,299 --> 00:21:10,250
confident about what you're doing so

00:21:08,210 --> 00:21:14,510
what we have today we reach that point

00:21:10,250 --> 00:21:17,090
which is more continuous integration so

00:21:14,510 --> 00:21:19,280
we were able to automate typescript

00:21:17,090 --> 00:21:21,860
checked easily in JUnit test when you

00:21:19,280 --> 00:21:24,260
create your pull request we automate the

00:21:21,860 --> 00:21:28,390
integration test UI test with detox and

00:21:24,260 --> 00:21:31,280
we also generate a builder to magically

00:21:28,390 --> 00:21:35,659
when all the tests are actually passing

00:21:31,280 --> 00:21:39,020
and then when in which QA we have health

00:21:35,659 --> 00:21:41,600
automated and half manual testing so our

00:21:39,020 --> 00:21:43,880
QA team is working on automating all the

00:21:41,600 --> 00:21:45,830
tests but we still have some manual

00:21:43,880 --> 00:21:48,679
tests especially for new features a time

00:21:45,830 --> 00:21:50,600
for them to catch up so when we reach

00:21:48,679 --> 00:21:52,669
that point where every QA tests are

00:21:50,600 --> 00:21:54,550
automated it means we would be able to

00:21:52,669 --> 00:21:57,610
also maybe

00:21:54,550 --> 00:21:58,990
run them on prediction as well to make

00:21:57,610 --> 00:22:02,410
sure everything works with our

00:21:58,990 --> 00:22:05,830
prediction of governments and to release

00:22:02,410 --> 00:22:08,140
to our customers on the maybe

00:22:05,830 --> 00:22:10,480
fortnightly basis or something like that

00:22:08,140 --> 00:22:13,840
so we use the latest version of react

00:22:10,480 --> 00:22:15,460
the latest version of react native and I

00:22:13,840 --> 00:22:17,350
think it's the latest version of react

00:22:15,460 --> 00:22:21,430
navigation and typescript we actually

00:22:17,350 --> 00:22:23,530
already experimenting with 3.5 I think

00:22:21,430 --> 00:22:26,140
it's really important for us to stay up

00:22:23,530 --> 00:22:28,990
to date because we don't want to reach a

00:22:26,140 --> 00:22:31,150
point where we are six months behind and

00:22:28,990 --> 00:22:33,220
it gets very complicated to actually

00:22:31,150 --> 00:22:35,710
migrate to that new version usually you

00:22:33,220 --> 00:22:39,550
spend weeks so maybe a month trying to

00:22:35,710 --> 00:22:44,980
catch up so that's something we're

00:22:39,550 --> 00:22:47,540
trying to handful yeah that's pretty

00:22:44,980 --> 00:22:53,220
much it thank you

00:22:47,540 --> 00:22:53,220

YouTube URL: https://www.youtube.com/watch?v=K6secfFpl3Q


