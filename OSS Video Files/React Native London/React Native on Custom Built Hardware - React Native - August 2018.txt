Title: React Native on Custom Built Hardware - React Native - August 2018
Publication date: 2018-09-21
Playlist: React Native London
Description: 
	Presented by Konrad Wieczorek.

The talk will focus on software challenges and the journey behind Magic Works manufacturing consumer electronics hardware.

Magic Works (https://magic.works) are the creators of ROXI, a music entertainment system that plugs into your TV and allows you to stream music and do karaoke, among other things.
It's running Android on custom hardware. The software has been built using React Native and there have been a few challenges on the way.

Magic Works would love to hear everyone's thoughts and hire candidates who are passionate about music and like the things they do!

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:06,480
so the topic we're gonna be going

00:00:03,750 --> 00:00:09,030
through is basically how we use react

00:00:06,480 --> 00:00:12,780
native on the custom hardware that we've

00:00:09,030 --> 00:00:14,089
manufactured there's a sample here that

00:00:12,780 --> 00:00:16,260
you can see on the table

00:00:14,089 --> 00:00:22,380
we cannot basically go for the

00:00:16,260 --> 00:00:24,060
challenges that we had well let's keep

00:00:22,380 --> 00:00:25,439
using react native on it and there's a

00:00:24,060 --> 00:00:28,650
lot of interesting things that we found

00:00:25,439 --> 00:00:32,309
out that I think is relatively unusual

00:00:28,650 --> 00:00:33,840
to a mobile phone and a lot of things

00:00:32,309 --> 00:00:39,000
were quite simple so I mean a lot of

00:00:33,840 --> 00:00:43,170
these things we we had to well roll out

00:00:39,000 --> 00:00:46,920
our own solutions so about the hardware

00:00:43,170 --> 00:00:50,899
we have a lot of few interesting devices

00:00:46,920 --> 00:00:53,520
that we've previously built this is a

00:00:50,899 --> 00:00:56,340
sample unit we initially started with

00:00:53,520 --> 00:00:57,750
which you can see on the table which was

00:00:56,340 --> 00:01:00,960
more like a radio thing that you could

00:00:57,750 --> 00:01:02,750
put in your kitchen we then kind of this

00:01:00,960 --> 00:01:07,320
is something that we're planning to

00:01:02,750 --> 00:01:09,450
building probably next year we call it

00:01:07,320 --> 00:01:12,299
the media caster which is pretty similar

00:01:09,450 --> 00:01:13,890
but it's running obviously the same

00:01:12,299 --> 00:01:18,210
piece of software that we've been

00:01:13,890 --> 00:01:22,110
developing we also have the roxy which

00:01:18,210 --> 00:01:26,130
is the latest model that we are using

00:01:22,110 --> 00:01:27,810
it's a arm CPU with Mali GPU which I

00:01:26,130 --> 00:01:31,079
think kind of older phones used to use

00:01:27,810 --> 00:01:32,579
Mali we only have a half a gig of ram

00:01:31,079 --> 00:01:37,170
which is not a lot actually to play

00:01:32,579 --> 00:01:39,750
around with so that means you have to

00:01:37,170 --> 00:01:41,520
really worry about how you take

00:01:39,750 --> 00:01:44,159
advantage of react native but actually

00:01:41,520 --> 00:01:46,860
surprisingly because it's a negative app

00:01:44,159 --> 00:01:49,649
it it is an Android device which we've

00:01:46,860 --> 00:01:51,210
seen a lot of Android devices having you

00:01:49,649 --> 00:01:53,670
know there are low-power they have low

00:01:51,210 --> 00:01:56,130
memory and you know mobile phones used

00:01:53,670 --> 00:01:58,710
to work on half a gig of ram and they

00:01:56,130 --> 00:02:01,110
were pretty powerful so if we take the

00:01:58,710 --> 00:02:03,450
right approach we can squeeze in a lot

00:02:01,110 --> 00:02:05,969
of processing especially because we can

00:02:03,450 --> 00:02:07,680
take advantage of the hardware putting

00:02:05,969 --> 00:02:09,899
our own trips on the hardware for

00:02:07,680 --> 00:02:11,310
example for a lot of the audio

00:02:09,899 --> 00:02:12,720
processing and a lot of the reverb

00:02:11,310 --> 00:02:16,890
effect we actually

00:02:12,720 --> 00:02:19,590
have a specific de custom DSP chip which

00:02:16,890 --> 00:02:21,930
like a digital processing unit on the

00:02:19,590 --> 00:02:25,260
board that can actually speed up the

00:02:21,930 --> 00:02:27,450
processing of the audio it also has an

00:02:25,260 --> 00:02:30,780
analogue receiver for the microphone so

00:02:27,450 --> 00:02:33,260
this is very similar to the kind of

00:02:30,780 --> 00:02:35,730
studio mics which use radio frequency

00:02:33,260 --> 00:02:37,620
for the operating system we use an

00:02:35,730 --> 00:02:39,870
Android open source project so we don't

00:02:37,620 --> 00:02:41,100
actually use a you know the Android

00:02:39,870 --> 00:02:44,550
phones that comes with a phone because

00:02:41,100 --> 00:02:46,350
the Android on most phones come with

00:02:44,550 --> 00:02:48,600
pre-installed software and a lot of

00:02:46,350 --> 00:02:50,910
packages that we don't need so you can

00:02:48,600 --> 00:02:53,670
actually find source of Android there's

00:02:50,910 --> 00:02:55,740
a link we forked it at one point and

00:02:53,670 --> 00:02:59,400
we've been making a lot of changes since

00:02:55,740 --> 00:03:01,530
that point I think it's really

00:02:59,400 --> 00:03:04,020
interesting how much you can get away

00:03:01,530 --> 00:03:05,910
with having a better stripped-down

00:03:04,020 --> 00:03:08,520
version of Android and actually choose

00:03:05,910 --> 00:03:10,950
which services you want which service

00:03:08,520 --> 00:03:16,739
you don't want which allowed us to save

00:03:10,950 --> 00:03:19,170
a lot of memory we are six months in

00:03:16,739 --> 00:03:22,769
development we are using the latest

00:03:19,170 --> 00:03:24,600
react native version so all of it works

00:03:22,769 --> 00:03:26,400
out of the box which is really great for

00:03:24,600 --> 00:03:29,370
us because we did not find any

00:03:26,400 --> 00:03:32,370
challenges running react native latest

00:03:29,370 --> 00:03:34,380
version on the piece of hardware as long

00:03:32,370 --> 00:03:36,060
as it's an Android device it seems to

00:03:34,380 --> 00:03:40,610
work this is how the app looks which

00:03:36,060 --> 00:03:43,470
will kind of have a live demo later on

00:03:40,610 --> 00:03:46,290
we obviously are trying to push a lot of

00:03:43,470 --> 00:03:48,780
visuals in terms of using large images

00:03:46,290 --> 00:03:51,989
and all of it is being rendered at 1080

00:03:48,780 --> 00:03:59,700
or 1920 by 1080 which is a pretty high

00:03:51,989 --> 00:04:00,540
resolution image on your TV and we it's

00:03:59,700 --> 00:04:02,670
a lot different than a mobile

00:04:00,540 --> 00:04:05,489
application because of how it looks and

00:04:02,670 --> 00:04:07,440
how you can interact with it and we

00:04:05,489 --> 00:04:10,459
think it's a little bit different from

00:04:07,440 --> 00:04:12,959
how most react native apps look and feel

00:04:10,459 --> 00:04:15,660
by the same time it gives us a really

00:04:12,959 --> 00:04:17,250
fast iteration times because we all know

00:04:15,660 --> 00:04:19,590
react native is really fast to iterate

00:04:17,250 --> 00:04:21,180
you can refresh we using the hot

00:04:19,590 --> 00:04:23,700
reloading and hot patching and all that

00:04:21,180 --> 00:04:25,440
so it gave us a really nice boost to be

00:04:23,700 --> 00:04:27,020
able to do this and and take the step

00:04:25,440 --> 00:04:30,780
forward using it

00:04:27,020 --> 00:04:32,729
sort of the different dependencies that

00:04:30,780 --> 00:04:35,669
we have and the frameworks and libraries

00:04:32,729 --> 00:04:38,370
that we use we use read expose persist

00:04:35,669 --> 00:04:40,470
for store management sorry state

00:04:38,370 --> 00:04:42,860
management code push for JavaScript

00:04:40,470 --> 00:04:45,750
updates rearm for a persistent storage

00:04:42,860 --> 00:04:48,270
that we also are able to use as a

00:04:45,750 --> 00:04:50,220
database for querying for example if a

00:04:48,270 --> 00:04:53,159
user has made a playlist we can save

00:04:50,220 --> 00:04:54,930
that playlist on the device and the PC

00:04:53,159 --> 00:04:57,449
query and search their own playlist that

00:04:54,930 --> 00:04:59,940
they've created offline we use

00:04:57,449 --> 00:05:01,830
typescript for be able being able to

00:04:59,940 --> 00:05:04,080
maintain and scale the codes we use

00:05:01,830 --> 00:05:06,990
sentry for bug reporting and we use

00:05:04,080 --> 00:05:09,060
Jenkins for the build pipeline which is

00:05:06,990 --> 00:05:11,009
a little bit complicated just because we

00:05:09,060 --> 00:05:12,810
have to build not just apk but we are

00:05:11,009 --> 00:05:15,210
also building the actual Android image

00:05:12,810 --> 00:05:17,099
where we bundled apk within the image as

00:05:15,210 --> 00:05:20,219
a firmware update so there's a little

00:05:17,099 --> 00:05:22,490
bit of that so a bit of overview of what

00:05:20,219 --> 00:05:26,250
the problems I will be talking about

00:05:22,490 --> 00:05:28,379
there will be major subject on touch

00:05:26,250 --> 00:05:32,250
events so touch events is quite

00:05:28,379 --> 00:05:34,199
interesting which I will go through of

00:05:32,250 --> 00:05:38,099
different challenges that we had using

00:05:34,199 --> 00:05:40,370
it the software updates and the future

00:05:38,099 --> 00:05:45,900
work sort of were we aiming to be and

00:05:40,370 --> 00:05:48,330
actually some devices sent the

00:05:45,900 --> 00:05:51,330
microphone that we're hoping to look a

00:05:48,330 --> 00:05:52,830
lot better which I will come back all

00:05:51,330 --> 00:05:55,139
come back to it so what's different

00:05:52,830 --> 00:05:57,900
between a mobile application and sort of

00:05:55,139 --> 00:06:00,029
a application of TV is that screen

00:05:57,900 --> 00:06:01,979
output is HDMI only means that you have

00:06:00,029 --> 00:06:04,949
to plug in the box to an HDMI which

00:06:01,979 --> 00:06:07,919
means it's a monitor or a TV which means

00:06:04,949 --> 00:06:10,020
that it has no touch screen so we all

00:06:07,919 --> 00:06:13,020
know that no touch screen means there's

00:06:10,020 --> 00:06:16,770
no touch events and react native is all

00:06:13,020 --> 00:06:18,569
about touch events we all know that so

00:06:16,770 --> 00:06:23,159
that gave us a bit of our interesting

00:06:18,569 --> 00:06:25,680
challenges so we had to create a pesky

00:06:23,159 --> 00:06:28,169
design absorb we had to design a rocket

00:06:25,680 --> 00:06:32,789
controller which is one that you have on

00:06:28,169 --> 00:06:35,399
the table it allows us to control the

00:06:32,789 --> 00:06:37,440
device which I'll explain how so it

00:06:35,399 --> 00:06:39,449
comes with a Bluetooth controller chip

00:06:37,440 --> 00:06:40,710
so it allows us to pair it with the with

00:06:39,449 --> 00:06:43,470
the

00:06:40,710 --> 00:06:45,030
we also have a haptic feedback so if

00:06:43,470 --> 00:06:47,000
there's any feedback it would vibrate to

00:06:45,030 --> 00:06:49,590
let you know this ping you know an error

00:06:47,000 --> 00:06:51,810
we use gyroscope and accelerometer which

00:06:49,590 --> 00:06:53,520
can track there all the movement and the

00:06:51,810 --> 00:06:55,530
angle which allows us to do all the kind

00:06:53,520 --> 00:06:57,390
of interesting things as well as

00:06:55,530 --> 00:06:59,940
pointing on the on the screen very

00:06:57,390 --> 00:07:03,480
similar like a Wii Remote which I think

00:06:59,940 --> 00:07:05,490
some of you've used the also has a

00:07:03,480 --> 00:07:07,770
microphone with a wireless transmitter

00:07:05,490 --> 00:07:09,870
so we don't actually send the audio

00:07:07,770 --> 00:07:10,980
because as a microphone we don't send

00:07:09,870 --> 00:07:12,810
the audio over Bluetooth because

00:07:10,980 --> 00:07:15,570
blueproof usually has a pretty large

00:07:12,810 --> 00:07:20,010
latency when it comes to audio so we use

00:07:15,570 --> 00:07:21,480
a fm basically analog transmitter and

00:07:20,010 --> 00:07:25,830
receiver to be able to send the audio

00:07:21,480 --> 00:07:28,920
across with very little latency and it's

00:07:25,830 --> 00:07:30,210
not a recognized mouse pointer using the

00:07:28,920 --> 00:07:32,220
human interface device so you could

00:07:30,210 --> 00:07:34,140
actually plug in one of these by a

00:07:32,220 --> 00:07:36,060
bluetooth to any of an Android phone

00:07:34,140 --> 00:07:37,650
without any drivers it could just pair

00:07:36,060 --> 00:07:39,150
it and you would see a mouse pointer on

00:07:37,650 --> 00:07:44,640
your Android phone which is pretty

00:07:39,150 --> 00:07:46,650
interesting that it just works so the

00:07:44,640 --> 00:07:48,960
touchable opacity is where we started

00:07:46,650 --> 00:07:51,000
which I think some of you've used it

00:07:48,960 --> 00:07:52,890
allows you or touchable feedback for

00:07:51,000 --> 00:07:53,390
some of you depending on which one you

00:07:52,890 --> 00:07:55,590
prefer

00:07:53,390 --> 00:07:58,860
so touchable opacity is basely a

00:07:55,590 --> 00:08:01,740
component that you you would highlight

00:07:58,860 --> 00:08:04,320
and select so for us the okay button is

00:08:01,740 --> 00:08:07,170
the left or turn of left but the touch

00:08:04,320 --> 00:08:08,160
press event so it works as a mouse it

00:08:07,170 --> 00:08:09,810
just works

00:08:08,160 --> 00:08:13,680
but we did find a couple of problems

00:08:09,810 --> 00:08:16,080
with it we it well first of all didn't

00:08:13,680 --> 00:08:18,240
work very well for us so we I need to

00:08:16,080 --> 00:08:20,670
first explain how sort of the internals

00:08:18,240 --> 00:08:23,940
of how the touchable pasty works before

00:08:20,670 --> 00:08:26,460
I can explain the actual problem so

00:08:23,940 --> 00:08:28,260
we've touchable opacity if we for

00:08:26,460 --> 00:08:30,780
example want to create an icon component

00:08:28,260 --> 00:08:32,729
we would create a touchable opacity

00:08:30,780 --> 00:08:34,860
component and we would write the icon

00:08:32,729 --> 00:08:36,930
which is an image within the touch

00:08:34,860 --> 00:08:40,080
policy that makes the icon clickable

00:08:36,930 --> 00:08:44,070
make sense we would press on press to

00:08:40,080 --> 00:08:48,140
get the event so

00:08:44,070 --> 00:08:50,400
the we wanted to look at having a

00:08:48,140 --> 00:08:52,530
something called hover events which is

00:08:50,400 --> 00:08:53,880
something that you would before you

00:08:52,530 --> 00:08:55,530
click it you want to see that kind of

00:08:53,880 --> 00:08:56,850
glow or highlight before you actually

00:08:55,530 --> 00:08:59,100
click it you have some feedback that

00:08:56,850 --> 00:09:00,960
this has actually been hovered so we

00:08:59,100 --> 00:09:03,320
looked at the interface of touchable

00:09:00,960 --> 00:09:05,760
opacity and it had a lot of interesting

00:09:03,320 --> 00:09:08,130
things but none of it was really

00:09:05,760 --> 00:09:09,510
something that we needed it you could

00:09:08,130 --> 00:09:12,480
provide on press event you could press

00:09:09,510 --> 00:09:13,950
on press in event but none of it was

00:09:12,480 --> 00:09:15,450
really to do with when you hover in it

00:09:13,950 --> 00:09:16,680
nothing could happen and sometimes we

00:09:15,450 --> 00:09:20,340
want to change the image when you hover

00:09:16,680 --> 00:09:23,010
on something which wasn't possible now

00:09:20,340 --> 00:09:24,840
it was also very slow when we noticed

00:09:23,010 --> 00:09:27,420
because on a mobile phone you usually

00:09:24,840 --> 00:09:29,010
have maybe up to 10 different touchable

00:09:27,420 --> 00:09:30,750
opacities because in a mobile phones a

00:09:29,010 --> 00:09:33,540
small screen you can only press up to 10

00:09:30,750 --> 00:09:35,190
items at a single point of time for us

00:09:33,540 --> 00:09:38,880
on a large TV screen you would end up

00:09:35,190 --> 00:09:40,380
with maybe 3035 things you can click

00:09:38,880 --> 00:09:43,320
just because we take advantage of the

00:09:40,380 --> 00:09:46,770
large screen so when we started creating

00:09:43,320 --> 00:09:49,050
all the 40 different components we

00:09:46,770 --> 00:09:50,400
started seeing a bit of slowdown across

00:09:49,050 --> 00:09:52,800
the whole app and how long it took to

00:09:50,400 --> 00:09:54,660
render and with the reason why it

00:09:52,800 --> 00:09:56,820
actually took a lot of render is because

00:09:54,660 --> 00:09:57,930
a lot of things like when you a lot of

00:09:56,820 --> 00:09:59,610
people probably don't use touchable

00:09:57,930 --> 00:10:02,640
capacity and providing accessible

00:09:59,610 --> 00:10:04,320
options which allows the Android system

00:10:02,640 --> 00:10:06,480
to understand that this can be used

00:10:04,320 --> 00:10:08,130
using the voice because there's active

00:10:06,480 --> 00:10:10,890
accessibility settings that some people

00:10:08,130 --> 00:10:13,860
have enabled which isn't the case on our

00:10:10,890 --> 00:10:15,840
platform which means that we don't have

00:10:13,860 --> 00:10:18,600
to register that with the system sending

00:10:15,840 --> 00:10:20,640
unnecessary things over the bridge it

00:10:18,600 --> 00:10:22,140
also allows you to define the hit slope

00:10:20,640 --> 00:10:24,900
and the press retention offset which

00:10:22,140 --> 00:10:27,390
defines how far you can drag away before

00:10:24,900 --> 00:10:28,950
that touch actually registers it's

00:10:27,390 --> 00:10:32,070
something also we didn't really need for

00:10:28,950 --> 00:10:35,640
every icon and actually I will show in a

00:10:32,070 --> 00:10:37,650
while how much code there is behind

00:10:35,640 --> 00:10:39,360
touchable opacity so this is actually

00:10:37,650 --> 00:10:42,150
over a thousand of lines of JavaScript

00:10:39,360 --> 00:10:44,360
behind touchable opacity so this is the

00:10:42,150 --> 00:10:46,860
code that executes when you mount it

00:10:44,360 --> 00:10:49,770
this is the code that executes every

00:10:46,860 --> 00:10:51,360
time you unmount touchable opacity and

00:10:49,770 --> 00:10:53,010
this is the same for touchable feedback

00:10:51,360 --> 00:10:54,690
and all of the touchable components that

00:10:53,010 --> 00:10:56,490
everyone's using across react and react

00:10:54,690 --> 00:10:59,310
native I don't think there's any other

00:10:56,490 --> 00:11:01,620
ones but please let me know if I'm

00:10:59,310 --> 00:11:04,769
there is also what happens when you

00:11:01,620 --> 00:11:07,560
actually press down where it has touched

00:11:04,769 --> 00:11:09,389
down over touchable past it did all this

00:11:07,560 --> 00:11:12,660
code gets executed and believe it or not

00:11:09,389 --> 00:11:14,970
it creates three timers and each timer

00:11:12,660 --> 00:11:18,320
is a JavaScript timer to time whether

00:11:14,970 --> 00:11:20,760
you have whether there is a delay in

00:11:18,320 --> 00:11:22,230
specified or whether it is delay out

00:11:20,760 --> 00:11:24,540
specified all of these things you can

00:11:22,230 --> 00:11:26,279
customize was a lot of things that were

00:11:24,540 --> 00:11:28,649
happening on the device which probably

00:11:26,279 --> 00:11:31,019
doesn't affect much on a modern mobile

00:11:28,649 --> 00:11:32,699
phones and maybe on a website or I'm not

00:11:31,019 --> 00:11:35,310
sure how it would go on a website but

00:11:32,699 --> 00:11:37,199
there are a few obviously layers that

00:11:35,310 --> 00:11:40,860
count that can be done I haven't looked

00:11:37,199 --> 00:11:44,060
much into it but from what we seen oh

00:11:40,860 --> 00:11:46,709
and this is what happens when you move

00:11:44,060 --> 00:11:48,089
while dragging a star while you press

00:11:46,709 --> 00:11:49,889
down and you move you come here your

00:11:48,089 --> 00:11:52,350
finger this code will be basically

00:11:49,889 --> 00:11:54,420
calculating how much you've moved to

00:11:52,350 --> 00:11:56,130
your your finger if it actually should

00:11:54,420 --> 00:11:58,589
register it or shouldn't based on how

00:11:56,130 --> 00:12:00,690
much you've moved away from it which we

00:11:58,589 --> 00:12:03,240
didn't really care about for all the

00:12:00,690 --> 00:12:04,920
little icons that we had and if you've

00:12:03,240 --> 00:12:06,690
seen the photo behind on how the app

00:12:04,920 --> 00:12:10,350
looks on the bottom you have maybe

00:12:06,690 --> 00:12:12,600
twelve different icons which will be you

00:12:10,350 --> 00:12:14,430
can go backwards or the playback music

00:12:12,600 --> 00:12:16,320
and go forward you can enable shuffle

00:12:14,430 --> 00:12:17,970
you can pause it you can play it there's

00:12:16,320 --> 00:12:19,940
a lot of buttons you can do and we have

00:12:17,970 --> 00:12:23,010
to render all this with all this logic

00:12:19,940 --> 00:12:26,279
so this is the render function of the

00:12:23,010 --> 00:12:27,839
touchable opacity it doesn't do much I

00:12:26,279 --> 00:12:30,329
think it just passes the properties down

00:12:27,839 --> 00:12:32,670
but that's what it looks like from react

00:12:30,329 --> 00:12:35,850
native source code this is purely just

00:12:32,670 --> 00:12:37,440
copied from it I didn't write it and one

00:12:35,850 --> 00:12:41,850
interesting thing is if you notice here

00:12:37,440 --> 00:12:45,600
the style is it's being overwritten by

00:12:41,850 --> 00:12:47,250
the opacity of touchable passive meaning

00:12:45,600 --> 00:12:49,380
that when you press down the opacity of

00:12:47,250 --> 00:12:51,240
that view is already being overwritten

00:12:49,380 --> 00:12:55,709
based on if you pressed it down or not

00:12:51,240 --> 00:12:57,870
so if you wanted to make your icon fade

00:12:55,709 --> 00:13:00,060
in at the beginning of the whole app

00:12:57,870 --> 00:13:01,709
you couldn't just pass opacity because

00:13:00,060 --> 00:13:04,170
that would have been overridden so you

00:13:01,709 --> 00:13:07,290
would have to wrap the whole icon into

00:13:04,170 --> 00:13:09,870
another animated view to animate all the

00:13:07,290 --> 00:13:12,040
children to a certain opacity or fade in

00:13:09,870 --> 00:13:14,680
which means that it will

00:13:12,040 --> 00:13:16,720
basically look like this where you would

00:13:14,680 --> 00:13:18,880
have touchable opacity you would have

00:13:16,720 --> 00:13:21,730
animated view wrapping it and then

00:13:18,880 --> 00:13:24,190
actually pass the opacity animation

00:13:21,730 --> 00:13:26,440
fade-in animation on the animated view

00:13:24,190 --> 00:13:29,710
not the touchable opacity because it

00:13:26,440 --> 00:13:31,690
just doesn't work so we have animated

00:13:29,710 --> 00:13:33,250
view with a passable opacity we're still

00:13:31,690 --> 00:13:35,920
missing horror events so when you hover

00:13:33,250 --> 00:13:38,200
on something there's there's no event

00:13:35,920 --> 00:13:40,390
you can get so react native doesn't

00:13:38,200 --> 00:13:42,820
doesn't have it you have to go into the

00:13:40,390 --> 00:13:46,000
Android native layer to pass the

00:13:42,820 --> 00:13:48,010
information so ideally we wanted

00:13:46,000 --> 00:13:50,440
something like this where you provide a

00:13:48,010 --> 00:13:52,300
component with so hover area which is

00:13:50,440 --> 00:13:54,760
very similar to touch event but there

00:13:52,300 --> 00:13:57,510
are hover events you wrap anything

00:13:54,760 --> 00:14:00,610
inside and you get on a hovered event

00:13:57,510 --> 00:14:02,830
this is how it looks on the Java site if

00:14:00,610 --> 00:14:08,020
you implement it on the native side

00:14:02,830 --> 00:14:09,520
it basically is using a Android set on

00:14:08,020 --> 00:14:13,630
hover listener which is something that

00:14:09,520 --> 00:14:16,510
comes with every Android view and it

00:14:13,630 --> 00:14:20,590
allows you to pass all the hover events

00:14:16,510 --> 00:14:23,310
down to JavaScript basically passing it

00:14:20,590 --> 00:14:25,660
to the context or the react context

00:14:23,310 --> 00:14:27,610
which allows you to didn't get the event

00:14:25,660 --> 00:14:29,200
back so this is all the code we had it

00:14:27,610 --> 00:14:33,130
didn't wasn't that my heart that wasn't

00:14:29,200 --> 00:14:35,110
a heart we then end up with this which

00:14:33,130 --> 00:14:39,190
is a render function for a single icon

00:14:35,110 --> 00:14:41,290
which is a hover II wrapped in animated

00:14:39,190 --> 00:14:42,970
view wrapped in touchable pasty we all

00:14:41,290 --> 00:14:44,650
had this because we all know touchable

00:14:42,970 --> 00:14:47,620
of us you cannot take opacity so we have

00:14:44,650 --> 00:14:48,970
to go back to I made view and animated

00:14:47,620 --> 00:14:50,620
view doesn't have hover event so we have

00:14:48,970 --> 00:14:52,360
to wrap it so this is where we ended up

00:14:50,620 --> 00:14:55,180
we've been doing it for a while we

00:14:52,360 --> 00:14:57,100
realized it's really slow because we all

00:14:55,180 --> 00:15:00,280
know that nested views is bad for

00:14:57,100 --> 00:15:02,980
performance we there's something called

00:15:00,280 --> 00:15:05,200
double taxation for certain layouts so

00:15:02,980 --> 00:15:07,060
even if you're just wrapping views for

00:15:05,200 --> 00:15:11,680
certain layouts like grid layout and

00:15:07,060 --> 00:15:13,480
linear layout we there is basically dip

00:15:11,680 --> 00:15:15,640
just keep it short the layout

00:15:13,480 --> 00:15:17,800
exponentially grows the deeper that the

00:15:15,640 --> 00:15:20,050
children are even if it's a simple

00:15:17,800 --> 00:15:22,450
component like this so on top of the

00:15:20,050 --> 00:15:24,820
layout you also have over draw which on

00:15:22,450 --> 00:15:25,910
Android it has to calculate how much of

00:15:24,820 --> 00:15:27,980
an area has to go

00:15:25,910 --> 00:15:30,470
beyond to be able to compensate for any

00:15:27,980 --> 00:15:32,780
opacity which means it can even redraw

00:15:30,470 --> 00:15:34,220
the same component six times just to be

00:15:32,780 --> 00:15:35,900
able to calculate how much of the

00:15:34,220 --> 00:15:37,640
overlaps even if it doesn't overlap

00:15:35,900 --> 00:15:39,110
there's a lot of rendering kind of

00:15:37,640 --> 00:15:40,640
taking time and lot of layout taking

00:15:39,110 --> 00:15:44,720
time if you do this kind of nested

00:15:40,640 --> 00:15:45,830
structure so we were looking for and I

00:15:44,720 --> 00:15:47,750
always actually did a little bit

00:15:45,830 --> 00:15:49,640
differently iOS using a GPU to define

00:15:47,750 --> 00:15:51,440
the cell index which solves the problem

00:15:49,640 --> 00:15:53,240
with on an android it's using a painter

00:15:51,440 --> 00:15:54,590
it's algorithm which is a little bit

00:15:53,240 --> 00:15:57,110
different and it actually does not take

00:15:54,590 --> 00:16:00,650
advantage of GPU it has to calculate the

00:15:57,110 --> 00:16:02,390
pixels and how much they overlap so

00:16:00,650 --> 00:16:04,370
there's a bit of reference in the bottom

00:16:02,390 --> 00:16:05,990
if you want to read about optimizing

00:16:04,370 --> 00:16:08,150
view hierarchies I think it's a usual

00:16:05,990 --> 00:16:09,890
thing that some people should maybe have

00:16:08,150 --> 00:16:11,960
a look at because there's a lot of

00:16:09,890 --> 00:16:15,290
insight this is purely only if you're

00:16:11,960 --> 00:16:22,160
using Android as your platform on you

00:16:15,290 --> 00:16:24,760
get native so we knew a few things we

00:16:22,160 --> 00:16:29,090
knew that everything that's touchable

00:16:24,760 --> 00:16:31,370
must be horrible which kind of gave us a

00:16:29,090 --> 00:16:32,540
clue because you would normally before

00:16:31,370 --> 00:16:34,460
you click you want to have a feedback

00:16:32,540 --> 00:16:36,880
that it's been covered so we knew it's

00:16:34,460 --> 00:16:39,380
it's always the case it would never be

00:16:36,880 --> 00:16:42,050
touchable about hover event so that gave

00:16:39,380 --> 00:16:43,550
us a clue that we could try making in a

00:16:42,050 --> 00:16:46,430
single view because we don't have to

00:16:43,550 --> 00:16:50,270
have two separate components for it but

00:16:46,430 --> 00:16:54,260
it wasn't easy and we looked at more

00:16:50,270 --> 00:16:56,990
into the what actually the props for a

00:16:54,260 --> 00:16:58,790
view and first we started looking at

00:16:56,990 --> 00:17:01,760
animated view we looked at it's the same

00:16:58,790 --> 00:17:05,750
props for animated view same as view

00:17:01,760 --> 00:17:07,820
except the Styles being weakened purely

00:17:05,750 --> 00:17:12,970
because the style can accept animated

00:17:07,820 --> 00:17:15,230
values which means the view props now

00:17:12,970 --> 00:17:16,970
extends gestural response unless so

00:17:15,230 --> 00:17:18,380
these are actually the gesture hundreds

00:17:16,970 --> 00:17:20,210
panels which are the props you can

00:17:18,380 --> 00:17:22,100
actually pass in to any contract native

00:17:20,210 --> 00:17:25,100
view and I think a lot of people don't

00:17:22,100 --> 00:17:26,060
take advantage of these gesture handless

00:17:25,100 --> 00:17:28,640
unless you're doing something like

00:17:26,060 --> 00:17:30,560
dragging or sliding but I think very few

00:17:28,640 --> 00:17:33,110
people actually use these props that you

00:17:30,560 --> 00:17:35,150
can use on any view regardless of what

00:17:33,110 --> 00:17:39,340
view it is so we've looked into these

00:17:35,150 --> 00:17:39,340
props and we found that

00:17:39,770 --> 00:17:44,059
so before the props we also looked at

00:17:41,930 --> 00:17:45,020
how we can create an animated component

00:17:44,059 --> 00:17:47,300
so what is the difference between

00:17:45,020 --> 00:17:49,130
animated view and a regular view it's

00:17:47,300 --> 00:17:51,530
actually the same thing except the view

00:17:49,130 --> 00:17:53,900
class is being wrapped in a method

00:17:51,530 --> 00:17:54,920
called created animator component this

00:17:53,900 --> 00:17:58,160
is by the way the whole implementation

00:17:54,920 --> 00:18:00,309
behind animated view this is it this is

00:17:58,160 --> 00:18:03,020
the same thing as requiring a view and

00:18:00,309 --> 00:18:05,809
wrapping it in a method and that method

00:18:03,020 --> 00:18:07,910
returns a class so you feed a class you

00:18:05,809 --> 00:18:10,010
it gets a class back and that becomes

00:18:07,910 --> 00:18:12,290
animated which gave us a clue we can

00:18:10,010 --> 00:18:14,990
pass on any view that we have and we can

00:18:12,290 --> 00:18:20,870
make it animated and not have to wrap it

00:18:14,990 --> 00:18:22,700
in anything else so we have a hob area

00:18:20,870 --> 00:18:24,800
we require from an init native component

00:18:22,700 --> 00:18:26,929
we can also do the same thing for

00:18:24,800 --> 00:18:28,490
animated hover area if we need to by

00:18:26,929 --> 00:18:30,559
just wrapping the class and we get a

00:18:28,490 --> 00:18:32,890
different class we export those two to

00:18:30,559 --> 00:18:35,600
give us a bit of control over using it

00:18:32,890 --> 00:18:37,730
we don't have to implement touchable hob

00:18:35,600 --> 00:18:40,040
area which is technically a hover area

00:18:37,730 --> 00:18:42,170
but provides the gesture handlers to be

00:18:40,040 --> 00:18:44,720
able to register a click it also

00:18:42,170 --> 00:18:45,950
simulates the pressed opacity which is

00:18:44,720 --> 00:18:47,780
basically the opacity when you click

00:18:45,950 --> 00:18:52,010
something down when you release it it

00:18:47,780 --> 00:18:55,130
would set the opacity back to 1 you

00:18:52,010 --> 00:18:56,630
clicked it this is actually very similar

00:18:55,130 --> 00:18:59,480
implementation we've looked at for

00:18:56,630 --> 00:19:01,790
behind touchable opacity except it's not

00:18:59,480 --> 00:19:03,350
1,000 lines it's just a lot bare-bones

00:19:01,790 --> 00:19:05,570
and something that worked a lot better

00:19:03,350 --> 00:19:08,450
for us was a lot simpler we can actually

00:19:05,570 --> 00:19:12,230
control a lot of things and it was very

00:19:08,450 --> 00:19:13,490
simple so this gave us a at the end it

00:19:12,230 --> 00:19:15,170
gave us something called animated

00:19:13,490 --> 00:19:17,030
touchable hover area which allowed us to

00:19:15,170 --> 00:19:19,160
have a single view which does a single

00:19:17,030 --> 00:19:21,110
layout as a single render and allows us

00:19:19,160 --> 00:19:22,610
to have a hover area something that you

00:19:21,110 --> 00:19:27,170
can touch and something you can also

00:19:22,610 --> 00:19:29,179
animate which gave us to sort of finally

00:19:27,170 --> 00:19:31,309
being able to make an icon with a single

00:19:29,179 --> 00:19:35,840
view instead of having an image that

00:19:31,309 --> 00:19:37,670
changes when you hover and uncover a lot

00:19:35,840 --> 00:19:38,900
of work probably took us 2 or 3 weeks it

00:19:37,670 --> 00:19:41,390
wasn't that hard but I think it's

00:19:38,900 --> 00:19:42,980
something that is unusual for EF native

00:19:41,390 --> 00:19:44,990
but it's something you do once and you

00:19:42,980 --> 00:19:51,399
can move very fast developing the rest

00:19:44,990 --> 00:19:55,769
of the app we so few problems I had with

00:19:51,399 --> 00:19:55,769
gonna go for them very well very much so

00:19:56,169 --> 00:19:58,479
we had an issue where multiple things

00:19:57,549 --> 00:20:00,399
could be hovered at once

00:19:58,479 --> 00:20:03,129
so on Android when you have two views

00:20:00,399 --> 00:20:04,419
overlapping when you put your your

00:20:03,129 --> 00:20:06,099
pointer between them

00:20:04,419 --> 00:20:08,440
technically the above hovered which is

00:20:06,099 --> 00:20:10,210
not usually how web works you kind of

00:20:08,440 --> 00:20:12,309
want one thing to be hovered at one

00:20:10,210 --> 00:20:13,839
point so we have to introduce that index

00:20:12,309 --> 00:20:15,609
on a high barrier to be real to resolve

00:20:13,839 --> 00:20:19,570
what's actually higher than other

00:20:15,609 --> 00:20:22,389
elements we also have hover area wasn't

00:20:19,570 --> 00:20:24,489
respecting pointer events so if you want

00:20:22,389 --> 00:20:26,529
to have a view where it's disabled the

00:20:24,489 --> 00:20:29,139
poetry events means you cannot click

00:20:26,529 --> 00:20:31,119
anything within that view you also don't

00:20:29,139 --> 00:20:33,039
want the hover events to kind of work

00:20:31,119 --> 00:20:35,409
you don't want things to highlight when

00:20:33,039 --> 00:20:38,229
you move on this disabled area so we had

00:20:35,409 --> 00:20:39,759
to compensate for that which wasn't hard

00:20:38,229 --> 00:20:41,710
this is the piece of where we intercept

00:20:39,759 --> 00:20:45,759
it and override it and make sure that it

00:20:41,710 --> 00:20:48,429
shouldn't propagate down that was a bit

00:20:45,759 --> 00:20:50,649
that was about it for hover events we

00:20:48,429 --> 00:20:55,330
then they are the major differences

00:20:50,649 --> 00:20:56,409
software updates which we were looking

00:20:55,330 --> 00:20:59,049
it's actually one of the major

00:20:56,409 --> 00:21:02,519
differences between how you release and

00:20:59,049 --> 00:21:04,989
deploy our react native up compared to

00:21:02,519 --> 00:21:10,509
something that you would release or

00:21:04,989 --> 00:21:11,799
update on this device there are a few

00:21:10,509 --> 00:21:15,190
kinds of updates there is the JavaScript

00:21:11,799 --> 00:21:16,929
updates there are the application

00:21:15,190 --> 00:21:20,019
updates and then we also had firmware

00:21:16,929 --> 00:21:22,509
updates to able to be able to update

00:21:20,019 --> 00:21:24,549
anything like if there's a problem of

00:21:22,509 --> 00:21:25,960
the Wi-Fi controller or the driver we

00:21:24,549 --> 00:21:29,769
would be able to patch it and release

00:21:25,960 --> 00:21:31,330
that as an update oh and on top of that

00:21:29,769 --> 00:21:32,739
the factory set must work so when you do

00:21:31,330 --> 00:21:34,960
a factory stuff advice you want to make

00:21:32,739 --> 00:21:36,399
sure your app doesn't vanish you want to

00:21:34,960 --> 00:21:38,229
make sure it's still pre-installed so

00:21:36,399 --> 00:21:40,059
that's important how you release it and

00:21:38,229 --> 00:21:44,200
to make sure it's part of the system

00:21:40,059 --> 00:21:46,599
partition of the device so a bit of

00:21:44,200 --> 00:21:48,039
overview how the react native where it

00:21:46,599 --> 00:21:51,879
lives so we have a react native app

00:21:48,039 --> 00:21:53,169
running us a user up means it doesn't

00:21:51,879 --> 00:21:55,839
have all the permissions it can just

00:21:53,169 --> 00:21:57,549
render things so this handle is the

00:21:55,839 --> 00:22:01,780
JavaScript updates and the live content

00:21:57,549 --> 00:22:04,120
updates now we've implemented a sir

00:22:01,780 --> 00:22:06,310
package called magic client I think a

00:22:04,120 --> 00:22:08,980
lot of you have done react packages

00:22:06,310 --> 00:22:10,690
before I think there are the base of how

00:22:08,980 --> 00:22:14,280
you create native packages on we have

00:22:10,690 --> 00:22:17,710
native so magic client allows us to

00:22:14,280 --> 00:22:19,930
basically have a bridge between the

00:22:17,710 --> 00:22:22,510
react native apk and a different IP care

00:22:19,930 --> 00:22:24,370
we call magic service which runs as a

00:22:22,510 --> 00:22:25,810
system service and has all the

00:22:24,370 --> 00:22:27,340
permissions to be able to modify the

00:22:25,810 --> 00:22:31,510
system partition and all the other

00:22:27,340 --> 00:22:34,750
things that a react native shouldn't do

00:22:31,510 --> 00:22:37,900
this gave us a bit of the reason for

00:22:34,750 --> 00:22:44,230
this mostly for separation of concerns

00:22:37,900 --> 00:22:46,300
and also being able to share our react

00:22:44,230 --> 00:22:47,530
native app with third parties or share

00:22:46,300 --> 00:22:50,590
with other people without having to

00:22:47,530 --> 00:22:52,810
disclose our magic service apk which is

00:22:50,590 --> 00:22:54,190
responsible for signing or verifying the

00:22:52,810 --> 00:22:55,720
signature of the firmware and all that

00:22:54,190 --> 00:22:59,320
kind of things we don't want to show to

00:22:55,720 --> 00:23:00,940
other people so the magic service

00:22:59,320 --> 00:23:04,870
handles the apk updates the firmware

00:23:00,940 --> 00:23:07,210
updates and the factories as well and we

00:23:04,870 --> 00:23:09,250
communicate between those two apks that

00:23:07,210 --> 00:23:12,390
are installed on the system using a

00:23:09,250 --> 00:23:15,670
service connection that comes of android

00:23:12,390 --> 00:23:16,630
we this is the rough code that you can

00:23:15,670 --> 00:23:20,440
create a react

00:23:16,630 --> 00:23:24,040
package it basically creates a service

00:23:20,440 --> 00:23:25,840
connection with the our apk it's it's

00:23:24,040 --> 00:23:29,650
not hard but I mean it just sets the

00:23:25,840 --> 00:23:31,120
Arab apk name binds the service and

00:23:29,650 --> 00:23:33,010
being able to send messages to it

00:23:31,120 --> 00:23:35,380
that's a react method means that you can

00:23:33,010 --> 00:23:39,220
send messages to do up to the service

00:23:35,380 --> 00:23:41,500
apk from react native and be able to

00:23:39,220 --> 00:23:44,860
receive messages from the other apk and

00:23:41,500 --> 00:23:46,510
send it back to react context which

00:23:44,860 --> 00:23:49,210
means we only have to write once and

00:23:46,510 --> 00:23:52,390
JavaScript updates technically allow us

00:23:49,210 --> 00:23:55,060
to create new protocol and update the

00:23:52,390 --> 00:24:00,160
opcodes and do all the kind of things by

00:23:55,060 --> 00:24:03,250
cold push firmware updates look pretty

00:24:00,160 --> 00:24:05,040
simple the top part is JavaScript so we

00:24:03,250 --> 00:24:07,750
I think some of you may have used a

00:24:05,040 --> 00:24:10,930
framework called react native fetch

00:24:07,750 --> 00:24:13,600
bloap it's a very popular library that

00:24:10,930 --> 00:24:15,070
allows you to fetch files and save them

00:24:13,600 --> 00:24:18,490
on a file system

00:24:15,070 --> 00:24:21,519
you would fetch the OTA update we would

00:24:18,490 --> 00:24:27,250
save it on the under on the file system

00:24:21,519 --> 00:24:28,630
partition and we would then send a

00:24:27,250 --> 00:24:30,850
message to the magic client from

00:24:28,630 --> 00:24:32,889
JavaScript saying up code update

00:24:30,850 --> 00:24:35,350
firmware using this file and the

00:24:32,889 --> 00:24:37,870
firmware would then start installing and

00:24:35,350 --> 00:24:42,100
and replacing the whole system partition

00:24:37,870 --> 00:24:43,960
with this specific image this is theme

00:24:42,100 --> 00:24:47,620
we've seen this before this is how you

00:24:43,960 --> 00:24:49,000
set a message to the other apk so you

00:24:47,620 --> 00:24:50,830
can read more about Android services

00:24:49,000 --> 00:24:54,370
under that link I think it's interesting

00:24:50,830 --> 00:24:55,659
I think it's maybe not the most use case

00:24:54,370 --> 00:24:57,820
for a mobile phone but it's something

00:24:55,659 --> 00:24:59,620
that is pretty interesting how you can

00:24:57,820 --> 00:25:02,379
take advantage of the under system doing

00:24:59,620 --> 00:25:05,470
a lot of the hard work for you in terms

00:25:02,379 --> 00:25:07,299
of having modules and taking Android to

00:25:05,470 --> 00:25:12,070
full advantage

00:25:07,299 --> 00:25:14,879
so with building the app means that we a

00:25:12,070 --> 00:25:17,679
lot of people here use code push I think

00:25:14,879 --> 00:25:19,659
we use Jenkins to do that for us because

00:25:17,679 --> 00:25:21,179
we like things to be automated and make

00:25:19,659 --> 00:25:25,389
sure we don't have to do it manually

00:25:21,179 --> 00:25:27,909
this allows us to also build a react

00:25:25,389 --> 00:25:30,190
native apk which I think most of us do

00:25:27,909 --> 00:25:32,230
maybe on the on the laptop but again I

00:25:30,190 --> 00:25:33,850
think keeping it I think there's also

00:25:32,230 --> 00:25:36,730
even up centric and build it for you as

00:25:33,850 --> 00:25:39,639
well we like it to be part of the same

00:25:36,730 --> 00:25:41,200
pipeline the same part of the same as

00:25:39,639 --> 00:25:43,059
multiple jobs in the same pipeline and

00:25:41,200 --> 00:25:44,799
Jenkins which the reason for it actually

00:25:43,059 --> 00:25:46,570
is because once you release Co push you

00:25:44,799 --> 00:25:48,879
want to take the bundle that the COPE

00:25:46,570 --> 00:25:52,659
which was built and then put it inside

00:25:48,879 --> 00:25:54,429
the apk that is gonna build next the

00:25:52,659 --> 00:25:57,039
reason for it is that because then you

00:25:54,429 --> 00:26:00,399
can then take that apk and then package

00:25:57,039 --> 00:26:03,879
that inside the android OS so almost a

00:26:00,399 --> 00:26:06,309
bundling is happening from code push to

00:26:03,879 --> 00:26:08,649
the apk and then to an Android OS which

00:26:06,309 --> 00:26:12,250
we have free separate sort of artifacts

00:26:08,649 --> 00:26:15,370
that would end up on as free those

00:26:12,250 --> 00:26:17,919
artifacts we use to distribute to the

00:26:15,370 --> 00:26:20,080
devices in different ways so for example

00:26:17,919 --> 00:26:24,159
if we have a new JavaScript bundle the

00:26:20,080 --> 00:26:26,139
device would basically load the

00:26:24,159 --> 00:26:27,429
JavaScript bundle or updated using a

00:26:26,139 --> 00:26:31,030
components

00:26:27,429 --> 00:26:33,820
we do not deploy we do not deploy the

00:26:31,030 --> 00:26:35,590
apk because we realized it's a bit too

00:26:33,820 --> 00:26:37,960
much hustle we can just rely on the

00:26:35,590 --> 00:26:39,549
firmware updates which contain the apk

00:26:37,960 --> 00:26:42,789
so that made the job easier not having

00:26:39,549 --> 00:26:44,559
to maintain different firmware as with

00:26:42,789 --> 00:26:47,380
different apk versions it's all kind of

00:26:44,559 --> 00:26:49,570
consistent so it's pretty simple in a

00:26:47,380 --> 00:26:53,590
way of how we are building the apk

00:26:49,570 --> 00:26:58,570
android OS i think that's pretty much it

00:26:53,590 --> 00:27:00,520
on the building the app we have we also

00:26:58,570 --> 00:27:02,049
have to design a custom screens I think

00:27:00,520 --> 00:27:04,299
that's the last difference that we found

00:27:02,049 --> 00:27:07,570
between the mobile app and the react and

00:27:04,299 --> 00:27:09,490
sort of I building an app on on our

00:27:07,570 --> 00:27:12,070
custom hardware it's basically you have

00:27:09,490 --> 00:27:14,110
to build every screen for example this

00:27:12,070 --> 00:27:17,530
is the setting screens that we have on

00:27:14,110 --> 00:27:19,510
the on the platform and allows you to

00:27:17,530 --> 00:27:24,309
change different configurations of the

00:27:19,510 --> 00:27:26,650
of the device and we also have a choose

00:27:24,309 --> 00:27:29,409
Wi-Fi network screen which allows you to

00:27:26,650 --> 00:27:31,659
the Wi-Fi because exposing an android

00:27:29,409 --> 00:27:34,179
Wi-Fi screen isn't really ideal for a

00:27:31,659 --> 00:27:35,530
customer and if you do see it's probably

00:27:34,179 --> 00:27:38,220
misses broken because you shouldn't see

00:27:35,530 --> 00:27:40,840
it if you do so we have to make our own

00:27:38,220 --> 00:27:46,780
which was a bit of obviously a

00:27:40,840 --> 00:27:48,789
difference so future work we have a few

00:27:46,780 --> 00:27:51,880
devices planned we have a new controller

00:27:48,789 --> 00:27:54,070
that we are working on which is instead

00:27:51,880 --> 00:27:56,950
of the fabric that we have on here we

00:27:54,070 --> 00:27:59,320
are using a metal metal mesh which

00:27:56,950 --> 00:28:01,690
allows for a sort of a better voice but

00:27:59,320 --> 00:28:03,429
at the same time it doesn't get dirty

00:28:01,690 --> 00:28:07,480
which means we can actually produce it

00:28:03,429 --> 00:28:09,730
in a white color it has a capsule mic

00:28:07,480 --> 00:28:11,320
which is a lot better than a condenser

00:28:09,730 --> 00:28:12,970
mic which is here which makes a better

00:28:11,320 --> 00:28:15,909
quality for for singing and for voice

00:28:12,970 --> 00:28:19,600
commands and it's also a better quality

00:28:15,909 --> 00:28:22,030
in terms of the there's a LED ring which

00:28:19,600 --> 00:28:23,169
is RGB which you can feedback with a

00:28:22,030 --> 00:28:24,490
different color in terms of what's

00:28:23,169 --> 00:28:26,679
happening on the screen so you can use

00:28:24,490 --> 00:28:29,799
explain you could make it spin which is

00:28:26,679 --> 00:28:31,809
a really nice effect we also have a few

00:28:29,799 --> 00:28:34,780
devices that we are hoping to build in

00:28:31,809 --> 00:28:36,610
the future and I think a lot of things

00:28:34,780 --> 00:28:39,580
that we would love to do and we

00:28:36,610 --> 00:28:41,320
definitely would like to have and

00:28:39,580 --> 00:28:44,920
hire more people to be able to do this

00:28:41,320 --> 00:28:47,050
and achieve what we like if you like

00:28:44,920 --> 00:28:51,550
what we do and you're interested you

00:28:47,050 --> 00:28:55,510
know we have free open rules that we

00:28:51,550 --> 00:28:58,210
would like to hire and you can find a

00:28:55,510 --> 00:29:02,860
full job spec on Hacker News just down

00:28:58,210 --> 00:29:06,160
below and Stan was pretty much our story

00:29:02,860 --> 00:29:09,170
that's that's all the challenges we had

00:29:06,160 --> 00:29:14,609
to to make whoo I think that's everyone

00:29:09,170 --> 00:29:14,609

YouTube URL: https://www.youtube.com/watch?v=A-fDbHaO1Hs


