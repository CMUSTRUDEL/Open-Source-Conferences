Title: Speed-up your React-Native App Development 10x Faster - React Native London - July 2021
Publication date: 2021-07-19
Playlist: React Native London
Description: 
	Speed-up your React-Native app development 10x faster by Wilhelm Hetmann

How to create react native apps to be fully scalable from small to enterprise level using functional components, the i18n-js library and a fully customised theme.
Code examples given!

Chapters:
Introduction [00:00:00] 
What we'll cover [00:01:12]
Overview [00:02:12]
How I use it [00:04:21]
A fully themable app using React Context [00:06:39] 
Components [00:08:19] 
Drawable Menu [00:09:57]
TestID [00:11:26]
Coding 10x Faster [00:12:24] 
Create Account [00:14:20]
Labels [00:16:03]
Reusable and functional components [00:18:46]
Translation Library [00:19:20]
Translation in Articles [00:24:25] 
Outro [00:25:51]

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,150 --> 00:00:01,020
Hello guys.

00:00:01,050 --> 00:00:06,580
My name is, Hetmann Whilhem Iohan, and I will talk about, today I will

00:00:06,600 --> 00:00:11,760
talk about speed up your react, native app development, 10 times faster.

00:00:12,330 --> 00:00:13,140
Pretty impressive.

00:00:15,486 --> 00:00:17,880
Let's talk, let me introduce myself.

00:00:18,843 --> 00:00:24,110
As I said, my name Hetmann Whilhem and I have more than 10 years for full

00:00:24,110 --> 00:00:27,619
stack development experience coding

00:00:27,619 --> 00:00:35,390
with react native from 2015 and working with small to enterprise clients.

00:00:35,780 --> 00:00:40,580
Also, I'm a YouTube creator for react UI kit channel.

00:00:42,019 --> 00:00:45,800
And I specialized with mostly way to react and react native.

00:00:46,530 --> 00:00:50,170
TypeScript and basic iOS received an unreported.

00:00:50,790 --> 00:00:54,751
As I said, full stack, I do have experience with a backend.

00:00:56,166 --> 00:01:04,800
Technologies like PHP, mostly Laravel and node JS and everything related to

00:01:04,800 --> 00:01:08,400
DevOps, Linux machines, server pipelines.

00:01:08,789 --> 00:01:10,080
We know all about it.

00:01:12,670 --> 00:01:19,539
So, as I said today, I will talk about how to speed up your, your react native

00:01:20,320 --> 00:01:22,339
app development, 10 times faster.

00:01:23,530 --> 00:01:27,160
First of all, what's the first step to speed up?

00:01:28,210 --> 00:01:33,550
The the development usually from my experience.

00:01:34,304 --> 00:01:39,494
Each time I start, I started the project I use use it, use me to take

00:01:39,494 --> 00:01:44,145
three days to set up between one and three days to set up a themeable app.

00:01:44,205 --> 00:01:48,276
I will show you how to create a themeable app using react contexts.

00:01:49,254 --> 00:01:49,815
Why?

00:01:49,875 --> 00:01:58,744
Because it will it loads it up the development basically updating one file.

00:01:59,554 --> 00:02:00,855
One file two.

00:02:01,905 --> 00:02:07,304
To support themeable app like changing color sizes, text phones, et cetera.

00:02:07,634 --> 00:02:12,704
So here I have the soft UI React Native I've developed.

00:02:12,855 --> 00:02:18,255
As you can see, it's a light mode in light mode in here on the bottom here, I have

00:02:18,255 --> 00:02:27,145
the dark mode which, by clicking this basically the whole app is is loading, is

00:02:27,165 --> 00:02:30,045
transforming to a dark mode, dark mode.

00:02:31,575 --> 00:02:32,185
Okay. I see.

00:02:32,655 --> 00:02:35,084
Let me show how I did this.

00:02:35,954 --> 00:02:37,875
So use....

00:02:39,894 --> 00:02:42,855
I created a custom, custom hook.

00:02:42,994 --> 00:02:43,614
useTheme.

00:02:44,204 --> 00:02:46,924
It's called, it's custom made.

00:02:46,924 --> 00:02:51,270
I mean, everything here in the app is done from scratch.

00:02:53,010 --> 00:02:57,930
I've created a text team context, which receives the team by default,

00:02:57,930 --> 00:03:03,840
the light mode and matched that to set the team and the provider, which

00:03:03,840 --> 00:03:10,590
accept the children team, team also, and set a, set team provider here.

00:03:11,310 --> 00:03:16,560
And this part here basically is the hook, which is connected to

00:03:16,560 --> 00:03:21,600
the context using the team content the team, the team react context.

00:03:22,470 --> 00:03:29,670
So in 6 slides of code, I've basically done the themeable part, but the

00:03:30,000 --> 00:03:33,250
most important one is the, the theme.

00:03:34,926 --> 00:03:39,059
So here I open the light theme.

00:03:39,825 --> 00:03:46,455
Which is basically a file with a lot of constants or

00:03:46,455 --> 00:03:48,885
colors, gradients sizes, space.

00:03:49,635 --> 00:03:50,865
And the same here.

00:03:51,165 --> 00:03:57,465
I do have a common theme that basically, what does, what does it do?

00:03:57,465 --> 00:04:04,935
It provide us with assets icons, for example, a lot of our files here, icons,

00:04:05,505 --> 00:04:10,275
fonts weights font, weight, and so on.

00:04:11,070 --> 00:04:12,270
Back to the light.

00:04:12,450 --> 00:04:14,580
Why is so important?

00:04:14,640 --> 00:04:21,120
Are you asking, why does this is so important, basically the theme.

00:04:21,150 --> 00:04:22,430
How I use it.

00:04:22,530 --> 00:04:28,710
For example, home screen I'm using, I'm using it like this to access

00:04:28,800 --> 00:04:34,230
everything that I need in that light, light in or lights, theme,

00:04:34,230 --> 00:04:37,340
or a dark theme from the assett.

00:04:37,650 --> 00:04:41,880
Which is basically all that says the colours, et cetera.

00:04:42,270 --> 00:04:46,830
For example, this one, this component receiver has a property

00:04:46,830 --> 00:04:53,730
that says the color card or the text, or is it text here by default?

00:04:53,730 --> 00:04:59,250
The text has this color and let's switch to light mode.

00:05:00,070 --> 00:05:05,100
If we change it to maybe red, basically.

00:05:06,165 --> 00:05:12,585
The app, every text that doesn't have a color color property to

00:05:12,585 --> 00:05:16,605
change it individually received this, this this text here.

00:05:17,115 --> 00:05:18,675
So this color, sorry.

00:05:19,005 --> 00:05:23,235
So if I'm changing to the dark mode, switch to the dark mode,

00:05:23,235 --> 00:05:27,915
darkmode has the white, white color.

00:05:28,425 --> 00:05:31,635
So why, are you thinking?

00:05:31,635 --> 00:05:33,195
Why, why does this.

00:05:34,985 --> 00:05:39,815
Sorry, why does this, this, this is this important.

00:05:40,325 --> 00:05:43,805
It does support, it adds support for white labeling.

00:05:43,835 --> 00:05:47,615
So basically creating multiple apps with different colors,

00:05:47,645 --> 00:05:51,664
different teams like doing an app.

00:05:51,725 --> 00:05:57,094
And then after a couple of months we need the companies, the startup is rebranding.

00:05:57,365 --> 00:05:59,105
We need to change everything.

00:05:59,135 --> 00:06:02,795
We just use basically this const, constance here, too.

00:06:03,695 --> 00:06:08,720
Change all the colors or the sizes or the phones or whatever, we need the

00:06:08,720 --> 00:06:11,960
components in a matter of minutes.

00:06:13,400 --> 00:06:18,100
Just from one single file for us developers, this will

00:06:18,160 --> 00:06:19,315
reduce the time for Yeah.

00:06:19,870 --> 00:06:24,100
for the updates and also for the feedback received from AB from

00:06:24,100 --> 00:06:29,050
the QA team or from the business, with the business management.

00:06:30,080 --> 00:06:30,580
Yeah.

00:06:31,385 --> 00:06:38,645
This part, one of many parts for this development is speed up development.

00:06:39,125 --> 00:06:48,425
So another aspect on this is on the development is structuring, structuring

00:06:48,635 --> 00:06:53,915
the app, how to structure the react native app to be scalable, for example,

00:06:54,105 --> 00:06:59,575
from small, small, smaller apps.

00:06:59,860 --> 00:07:04,690
Like a startup, like a map, a simple network, simple app to enterprise

00:07:04,690 --> 00:07:11,230
level where we have like more than, more than 100 screens per

00:07:11,230 --> 00:07:15,310
app or or components and so on.

00:07:16,810 --> 00:07:23,200
From my perspective, this is basically complex from the scaling

00:07:23,200 --> 00:07:28,460
part, how to scale your app in a way that basically supports.

00:07:29,478 --> 00:07:31,450
Unlimited screens or components.

00:07:31,900 --> 00:07:39,490
How I how I done this is using a naming convention, mostly combined from

00:07:39,490 --> 00:07:46,270
mobile to web, like creating a source, everything in the source folder we include

00:07:46,270 --> 00:07:48,850
like the assets, fonts, icons images.

00:07:49,500 --> 00:07:52,650
Sure we have the open sans custom font.

00:07:53,010 --> 00:07:58,140
And then we have the icons, all the icon from the app, the notification

00:07:58,140 --> 00:08:00,480
baskets search, et cetera.

00:08:00,990 --> 00:08:04,590
And then we have the images like this part here, images here.

00:08:04,680 --> 00:08:09,870
Usually I use them for for the mocking purpose.

00:08:10,980 --> 00:08:16,530
And I'm showing, showing, showcasing the app, but we can add

00:08:16,560 --> 00:08:18,760
default images, avatar and so on.

00:08:19,159 --> 00:08:21,870
So next one will be the components.

00:08:21,900 --> 00:08:25,860
The components are the core core part of the app.

00:08:26,280 --> 00:08:33,180
Basically we are using every reusing components in a way that we write a

00:08:33,240 --> 00:08:35,820
plus code and speed up everything.

00:08:37,805 --> 00:08:39,915
The developing, the development process.

00:08:40,455 --> 00:08:45,375
And the next part is the constant, as you can, as you saw on previous.

00:08:45,375 --> 00:08:47,430
The slide.

00:08:47,939 --> 00:08:54,180
We have the teams here, the dark, the light, the regex have some

00:08:54,540 --> 00:08:59,939
rules here for the regex and then the common team translations.

00:09:00,209 --> 00:09:04,439
And we'll talk about later about translations and then the types, the

00:09:04,439 --> 00:09:09,120
TypeScript types for the components, teams, et cetera, important ones are the.

00:09:09,925 --> 00:09:14,425
Custom hooks use team presented use data.

00:09:14,494 --> 00:09:20,395
Use data is mostly used for mocking everything here, but it's it can

00:09:20,395 --> 00:09:29,635
be pretty much pretty much updated to add whatever we want, like API

00:09:29,935 --> 00:09:35,915
data Firebase whatever data we have.

00:09:37,586 --> 00:09:42,510
We have backend and then the navigation part which I'm using

00:09:42,540 --> 00:09:44,040
react navigation for this.

00:09:44,609 --> 00:09:53,260
I have like a couple of screens here for this and then stacking doing the stack,

00:09:53,260 --> 00:09:56,699
stuck, for navigator, for each screen.

00:09:57,150 --> 00:10:00,660
And then in the manual part is the drawable menu.

00:10:01,110 --> 00:10:02,520
This is the drawable menu.

00:10:02,790 --> 00:10:04,469
Basically we have an animation here.

00:10:04,829 --> 00:10:05,699
That's what.

00:10:06,525 --> 00:10:12,255
Is scaling this screen here, this text, the stacks screens, and then

00:10:12,255 --> 00:10:18,075
the screens here are the screens, basically we have everything from

00:10:18,075 --> 00:10:22,005
this ,from about, from home extras.

00:10:22,065 --> 00:10:30,762
What, what all the, all the screens that the UI design has has provided.

00:10:33,450 --> 00:10:42,540
Yeah, so I was thinking how, what else is is, to be scaled on because

00:10:42,540 --> 00:10:46,470
we already have the structure and we can create simple to

00:10:46,470 --> 00:10:48,720
complex apps using this structure.

00:10:48,870 --> 00:10:50,469
Pretty much easy to...

00:10:51,510 --> 00:10:56,670
Screens or everything in the screens can be found easily and maybe the

00:10:56,670 --> 00:10:59,280
components, a block or the text.

00:10:59,925 --> 00:11:01,845
Pretty much super easy to find.

00:11:02,415 --> 00:11:06,165
And then an important thing here.

00:11:06,225 --> 00:11:10,905
And I will discuss later on is a cost, a custom yeah.

00:11:10,935 --> 00:11:14,355
Custom property name, ID the ID here.

00:11:15,595 --> 00:11:21,810
Is basically generating the component test ID or accessibility ID based

00:11:21,810 --> 00:11:25,950
on the platform, for example, for android you have the accessibility ID.

00:11:26,310 --> 00:11:28,440
And for Iris, we have the test ID.

00:11:28,860 --> 00:11:33,600
What is this about for what, what, why we should implement this?

00:11:34,140 --> 00:11:38,340
Basically add support to the QA team, the testing team to create

00:11:38,370 --> 00:11:44,220
automated testing using, for example, -...- Software in this way.

00:11:45,839 --> 00:11:54,750
The ~QA~, which kind of is our friend and also our enemy because why, we,

00:11:54,780 --> 00:12:00,829
they are funding bugs that we don't, but yeah, it's, they are also ensuring

00:12:00,829 --> 00:12:07,199
that the quality that our for our work is maintained to a higher level.

00:12:08,310 --> 00:12:18,930
The QA team doing this Will provide us with support for automated testing

00:12:18,960 --> 00:12:23,910
unit testing and so on, but that we'll talk about the components later on,

00:12:24,300 --> 00:12:34,470
but yeah, next next as the title of my talk the title, how to code 10

00:12:34,530 --> 00:12:39,771
times faster, but with what basically.

00:12:40,939 --> 00:12:46,845
Or use the word components and also functional why...

00:12:47,265 --> 00:12:51,615
Reusable components, reusable components help us developer

00:12:51,825 --> 00:12:53,817
developers to write less code.

00:12:55,065 --> 00:12:57,835
It's pretty much easy to write a lot of code.

00:12:58,405 --> 00:13:01,320
And over complicate every scene in the project.

00:13:01,350 --> 00:13:10,140
And I from what remember that each time I needed to ramp up other team

00:13:10,140 --> 00:13:14,910
members in the, on a, on a project, I needed to explain everything,

00:13:14,950 --> 00:13:17,070
every piece of code that I've done.

00:13:17,070 --> 00:13:21,720
And I notice that this can take a long time.

00:13:22,470 --> 00:13:29,220
And also for me kind of hard to explain why I did that and that and that.

00:13:30,373 --> 00:13:36,720
But writing less codes is also pretty complicated because abstraction of the

00:13:36,720 --> 00:13:46,110
code and say, let's say this component, the input component can be, can, can

00:13:46,110 --> 00:13:50,310
lead to couple like this, a couple of.

00:13:51,630 --> 00:13:55,320
It's not too over complicated, but it's a complex app that

00:13:55,320 --> 00:13:57,210
can be reused pretty much.

00:13:57,210 --> 00:13:57,510
Okay.

00:13:57,510 --> 00:14:04,080
So think about the input is basically it should have been this one, but on the,

00:14:04,140 --> 00:14:10,980
let me see the components here and I'm doing like this search, as you can see

00:14:11,040 --> 00:14:15,060
it has it has like a lot of things here.

00:14:15,290 --> 00:14:19,220
Focus on success, et cetera, let me show...

00:14:20,355 --> 00:14:22,275
And show the create account.

00:14:22,665 --> 00:14:27,045
So let me see if I'm doing like this and writing something like this

00:14:27,075 --> 00:14:30,615
minimum characters demo or ~no~.

00:14:30,735 --> 00:14:32,215
Yeah, that was accepted.

00:14:32,985 --> 00:14:36,591
And so . Okay.

00:14:39,480 --> 00:14:39,980
I am.

00:14:40,020 --> 00:14:41,610
Oh, we have auto-complete.

00:14:44,310 --> 00:14:49,140
Okay, so next one, we have like the input here, the password,

00:14:49,260 --> 00:14:52,950
which is word.onetwothree.

00:14:54,939 --> 00:14:57,810
Doesn't work.

00:14:58,160 --> 00:14:59,160
Invalid password.

00:14:59,189 --> 00:14:59,689
Yeah.

00:15:00,000 --> 00:15:03,609
I will ask you all later on for, for his ~best~.

00:15:06,333 --> 00:15:06,705
Okay.

00:15:06,705 --> 00:15:13,145
So as you can see here, we have this part here on, on type the inputs basically

00:15:13,761 --> 00:15:16,475
will show if it's valid or invalid.

00:15:17,045 --> 00:15:20,015
And then if we are doing like this then it's valid.

00:15:20,495 --> 00:15:25,475
So a complex component that can do to use pretty much.

00:15:25,665 --> 00:15:31,835
Let me show you login login like a couple of flights.

00:15:34,290 --> 00:15:36,060
Then type the 10 lines of code.

00:15:36,570 --> 00:15:42,120
I have a custom input that does a lot of things on success, on

00:15:42,120 --> 00:15:46,550
danger validation label, et cetera.

00:15:46,560 --> 00:15:50,100
If I change in this one, basically, what is it?

00:15:52,740 --> 00:15:54,130
Yeah, it doesn't refresh.

00:15:55,535 --> 00:15:59,400
Because I'm ~all registered~ okay.

00:15:59,610 --> 00:16:00,110
All right.

00:16:03,295 --> 00:16:10,704
Okay, I'm doing the light, ~leave~ here, then your question.

00:16:10,735 --> 00:16:11,235
Yep.

00:16:12,115 --> 00:16:15,474
So you can labels, customer labels, et cetera.

00:16:15,865 --> 00:16:20,745
So less code means less time to develop and easy to maintain.

00:16:21,680 --> 00:16:30,930
I need to add extra icons, maybe other maybe info, or warning for

00:16:30,930 --> 00:16:35,069
this component, then I can add it here, like a custom image.

00:16:36,510 --> 00:16:43,079
And also we can create, we can enhance this component, this component to

00:16:43,079 --> 00:16:46,890
another component, like maybe doing.

00:16:50,265 --> 00:16:54,615
We check once you pretty much ~check box~ does have label, but we can

00:16:54,615 --> 00:16:59,985
also, for example, this one can, we can add the component the right side

00:17:00,375 --> 00:17:04,755
in order to create one component that receives the property and generates

00:17:06,675 --> 00:17:09,454
component for this one in this way.

00:17:09,545 --> 00:17:14,765
Writing code, for example, the login part, the login screen has

00:17:14,765 --> 00:17:18,724
like 200 some 229 lines of code.

00:17:19,484 --> 00:17:23,295
As you can see, I didn't choose style style component.

00:17:23,295 --> 00:17:26,984
Here is the story style style sheet from react native.

00:17:27,375 --> 00:17:37,395
Everything is done in in, in in line, but using the style sheet flat flatten in

00:17:37,395 --> 00:17:46,065
order to use, to use these, to add it here in line the performance pretty much good.

00:17:47,485 --> 00:17:49,975
It's not convinced.

00:17:50,264 --> 00:17:54,284
It's not smaller, but not a big complex app.

00:17:55,557 --> 00:18:01,085
It's quite quite okay on for this side.

00:18:01,425 --> 00:18:09,225
Now I'm using group for, for performance react memo because the component receives

00:18:09,225 --> 00:18:16,235
a lot of properties and can be changed as you can see this one the demo and...

00:18:17,120 --> 00:18:17,620
Yeah.

00:18:19,010 --> 00:18:26,659
Receives the properties here, the danger, the danger, the danger color, or maybe

00:18:26,659 --> 00:18:29,160
the success in each time re-render

00:18:29,210 --> 00:18:30,359
this, this one.

00:18:31,750 --> 00:18:32,780
Okay.

00:18:33,169 --> 00:18:35,389
That's the important thing here.

00:18:35,720 --> 00:18:36,220
Okay.

00:18:37,649 --> 00:18:41,070
That's the, how to, how to speed up this one from experience.

00:18:42,827 --> 00:18:45,389
I'm pretty sure it helped me a lot.

00:18:46,129 --> 00:18:52,649
Another thing that I've I will show you right now is the, how to,

00:18:52,709 --> 00:19:00,792
how to add how to add something that can be pretty much important.

00:19:02,550 --> 00:19:03,930
I do have a question.

00:19:04,740 --> 00:19:08,280
Do you know the word wides biggest problem?

00:19:09,030 --> 00:19:12,120
Basically we don't speak the same language.

00:19:12,720 --> 00:19:15,570
So for that, I will show you how I fix it.

00:19:15,570 --> 00:19:19,939
Let me show you.

00:19:20,310 --> 00:19:24,800
I implemented, I created and implemented a translation library for the.

00:19:25,575 --> 00:19:31,785
To speak to use one app for, for everyone that that speaks

00:19:31,785 --> 00:19:33,435
differently, a different language.

00:19:33,975 --> 00:19:38,225
So for that I created used, translation fork.

00:19:38,225 --> 00:19:39,435
What does this do?

00:19:40,439 --> 00:19:49,169
So it's pretty much a similar to use theme hook, a context of provider that receives

00:19:49,649 --> 00:19:59,040
that use that is using the library, the 11 and translation library, and it loads

00:20:00,330 --> 00:20:05,009
translation files like And JSON files.

00:20:05,760 --> 00:20:08,967
For example, here I have English and French.

00:20:10,078 --> 00:20:15,290
Arthur would be happy to, to see that I have a French translation

00:20:15,320 --> 00:20:20,310
for for example, sorry.

00:20:20,310 --> 00:20:24,500
Yeah, I have an option in the settings settings screen here.

00:20:25,040 --> 00:20:27,350
Language English or French.

00:20:27,440 --> 00:20:27,940
Let's see.

00:20:28,520 --> 00:20:29,710
Can I try switching this?

00:20:30,795 --> 00:20:34,935
So in, in one touch click, I've changed.

00:20:34,965 --> 00:20:40,425
The app basically translated the app instantly and like

00:20:40,875 --> 00:20:47,445
everything, the components, the profiles, even home research.

00:20:48,155 --> 00:20:58,695
This one Then, Articles, notifications, everything in one in one click, how I

00:20:58,695 --> 00:21:07,514
did this, pretty simple using a local state inside the hook and with the

00:21:07,514 --> 00:21:14,844
magic of E 11 and translation library I've set up something like local,

00:21:14,844 --> 00:21:20,385
~local~ or for for the app and then the translation files from here, English,

00:21:20,385 --> 00:21:25,314
French, even you can add unlimited, unlimited translations on this one.

00:21:26,520 --> 00:21:31,395
But from my experience that translated this one took me quite

00:21:31,395 --> 00:21:33,014
a while to translate into French.

00:21:33,075 --> 00:21:39,635
And also at the same time, to basically the translation from English to French

00:21:39,665 --> 00:21:46,385
doesn't didn't fit in the button or in the text, in the cards and I needed

00:21:46,385 --> 00:21:48,185
to find an alternative for that.

00:21:48,695 --> 00:21:51,544
So let me show you how I did this.

00:21:51,905 --> 00:22:03,304
For example, a soft UI, soft UI, maybe level UI, no UI, is in English.

00:22:03,304 --> 00:22:03,804
So yeah.

00:22:04,980 --> 00:22:12,720
It's translated this one ~Leo it is done~ much is done.

00:22:13,230 --> 00:22:14,328
I have an app for you.

00:22:18,228 --> 00:22:19,590
Next one, let me see.

00:22:20,790 --> 00:22:27,540
Also you can change, for example, this part here is for the for the manual.

00:22:27,960 --> 00:22:32,370
And let me show you how the French looks like identically.

00:22:33,325 --> 00:22:37,745
We have the keys here, the keys here, they have details for

00:22:37,745 --> 00:22:41,095
example, for the, about or visit.

00:22:41,815 --> 00:22:45,175
And then you'll need only to translate this one.

00:22:45,655 --> 00:22:49,825
You can host this one or this file, just the files whenever, wherever

00:22:49,825 --> 00:22:55,705
you, you want. I think they have...

00:22:56,760 --> 00:22:59,190
Couple of kilobytes one to three kilobytes.

00:22:59,820 --> 00:23:04,860
It doesn't doesn't that figure at performance on this one, but yeah.

00:23:05,990 --> 00:23:10,490
And how I use it, let me show you, on the home, pretty quickly.

00:23:10,970 --> 00:23:15,290
So importing the hook and I have the T function, they also have the

00:23:15,300 --> 00:23:19,370
translate, the translate function, but T's the short version for

00:23:19,370 --> 00:23:22,460
translate function and how you use it.

00:23:22,580 --> 00:23:23,110
T.

00:23:24,240 --> 00:23:26,879
T common search, for example.

00:23:26,879 --> 00:23:27,179
Okay.

00:23:27,179 --> 00:23:35,159
So we know that on on common object, we have this key search and if we

00:23:35,310 --> 00:23:45,960
are going to the English, on search~ search here, search find we're

00:23:45,960 --> 00:23:49,581
doing find ~CQC~ find it change.

00:23:50,045 --> 00:23:58,814
Or search, Something pretty much ~super~ something also these translations.

00:23:59,895 --> 00:24:04,754
Let me show you, this, our support team, what is it?

00:24:05,294 --> 00:24:05,814
This one?

00:24:08,288 --> 00:24:09,254
This one.

00:24:09,254 --> 00:24:09,754
Let's see.

00:24:09,794 --> 00:24:14,835
What I mean is supporting, posted on and the date.

00:24:15,195 --> 00:24:19,715
Let me find common...

00:24:21,034 --> 00:24:25,785
~slow~ posted so in articles.

00:24:25,785 --> 00:24:26,115
Okay.

00:24:26,115 --> 00:24:37,274
So in articles we have like sorry in articles here years.

00:24:37,875 --> 00:24:38,375
Yeah.

00:24:38,504 --> 00:24:43,425
It on January, here the post-it, receives this object, the date.

00:24:44,610 --> 00:24:49,560
And if we need to change this one to maybe a date and month,

00:24:49,710 --> 00:24:53,700
can't see, oh, no, like this

00:24:57,540 --> 00:25:01,530
month, like this, something like this pretty much easy to

00:25:01,590 --> 00:25:03,330
update in a matter of seconds.

00:25:04,274 --> 00:25:05,294
The date on this one.

00:25:06,165 --> 00:25:09,185
Why did translation this feature?

00:25:09,185 --> 00:25:11,945
The translation part is, is important.

00:25:12,155 --> 00:25:18,034
Basically add support to multilanguage apps and for startups, it provides a

00:25:18,034 --> 00:25:20,135
way to go to international markets.

00:25:20,165 --> 00:25:24,905
From my knowledge market penetration is a business, a business growth

00:25:24,905 --> 00:25:26,554
strategy, leading to more sales.

00:25:27,835 --> 00:25:32,845
I didn't try that, but I think we know all about it.

00:25:33,235 --> 00:25:37,975
Maybe, for example, not for stop, for starterups, but for for big,

00:25:38,365 --> 00:25:45,355
big companies like Amazon, they have like an app too, on, on every, every

00:25:45,355 --> 00:25:50,635
continent, every language, but yeah, and that's what I have for today.

00:25:51,530 --> 00:25:53,180
Thank you very much.

00:25:53,540 --> 00:26:00,240
And don't forget, try the free version of the soft UI on creative, creative-tim.com.

00:26:00,409 --> 00:26:06,050
Also thank you again, and I'm waiting for the questions can

00:26:06,080 --> 00:26:08,030

YouTube URL: https://www.youtube.com/watch?v=3RE7L49hGu4


