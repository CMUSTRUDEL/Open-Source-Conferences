Title: The Navigation Router: A New Way to 100 Native Navigation - React Native - October 2019
Publication date: 2019-11-17
Playlist: React Native London
Description: 
	The Navigation router - a new way to 100% native navigation by Graham Mendick

React Native lets you create truly native apps and doesn't compromise on your users' experience. But if your navigation library doesn't use the native navigation APIs on Android and iOS then you can't create truly native apps and your users' experience will suffer. The Navigation router is a new navigation library for React Native that gives 100% native navigation on Android and iOS. The Navigation router does for navigation what React Native does for UI.

Twitter: @grahammendick
Github: https://github.com/grahammendick
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,380
so I'm going to talk today about the

00:00:01,290 --> 00:00:07,560
navigation reader now the navigation

00:00:04,380 --> 00:00:10,650
Marita started out as a Rooter for react

00:00:07,560 --> 00:00:12,929
only but I started noticing that a lot

00:00:10,650 --> 00:00:16,020
of other reactors were starting to say

00:00:12,929 --> 00:00:17,279
that they also support react native so

00:00:16,020 --> 00:00:18,779
that got me interested I thought can I

00:00:17,279 --> 00:00:20,820
get the navigation reader to work on

00:00:18,779 --> 00:00:22,710
react native so that was a that was

00:00:20,820 --> 00:00:25,289
about two years ago and it's taken me

00:00:22,710 --> 00:00:27,029
two years to add support for react

00:00:25,289 --> 00:00:28,800
native and so those two years have

00:00:27,029 --> 00:00:30,750
taught me a lot and the main thing that

00:00:28,800 --> 00:00:32,219
I learned is never trust a react Rooter

00:00:30,750 --> 00:00:34,860
when it says it also supports react

00:00:32,219 --> 00:00:38,280
native right except mine again you can

00:00:34,860 --> 00:00:40,079
you can trust mine right so the

00:00:38,280 --> 00:00:41,820
navigation root is a new navigation

00:00:40,079 --> 00:00:43,469
library for react native that gives you

00:00:41,820 --> 00:00:46,170
a hundred percent native navigation on

00:00:43,469 --> 00:00:48,570
Android and iOS so what do I mean by

00:00:46,170 --> 00:00:50,460
100% native navigation I mean that uses

00:00:48,570 --> 00:00:52,260
the same native navigation API is that

00:00:50,460 --> 00:00:54,120
you'd use that we'd use if we were

00:00:52,260 --> 00:00:56,699
building a native app without react

00:00:54,120 --> 00:00:58,710
native so let's have a look at what

00:00:56,699 --> 00:01:02,579
these native navigation navigation api's

00:00:58,710 --> 00:01:05,519
look like starting with Android so if we

00:01:02,579 --> 00:01:07,950
build in an Android app without react

00:01:05,519 --> 00:01:10,049
native then we use a classes called

00:01:07,950 --> 00:01:13,979
fragments now because this is an Android

00:01:10,049 --> 00:01:15,689
app these classes as Java classes so we

00:01:13,979 --> 00:01:17,610
each seen in our app would be

00:01:15,689 --> 00:01:19,680
represented by a fragment so if we're

00:01:17,610 --> 00:01:22,170
building a Twitter app for example then

00:01:19,680 --> 00:01:23,880
we have one fragment for the home view

00:01:22,170 --> 00:01:26,040
and another fragment for the tweet view

00:01:23,880 --> 00:01:27,780
and when the user selects a tweet on

00:01:26,040 --> 00:01:29,159
their home screen then we replace the

00:01:27,780 --> 00:01:31,619
current home screen with the new tweet

00:01:29,159 --> 00:01:34,049
screen by calling the replace method on

00:01:31,619 --> 00:01:35,250
the fragment manager now anybody is

00:01:34,049 --> 00:01:36,360
familiar with fragments we know that

00:01:35,250 --> 00:01:38,220
this line of code isn't a hundred

00:01:36,360 --> 00:01:40,490
percent correct but it's more pseudocode

00:01:38,220 --> 00:01:44,610
just to keep the code sample sure

00:01:40,490 --> 00:01:46,170
understandable so once we call the

00:01:44,610 --> 00:01:47,460
replacement once we replace the home

00:01:46,170 --> 00:01:48,689
screen with the tweet screen by calling

00:01:47,460 --> 00:01:50,939
the replace method on the fragment

00:01:48,689 --> 00:01:53,009
manager then Android takes care of the

00:01:50,939 --> 00:01:55,680
rest it animates a new tweet screen in

00:01:53,009 --> 00:01:56,850
over the top of the home screen and you

00:01:55,680 --> 00:01:59,219
can see here and once you mean that the

00:01:56,850 --> 00:02:00,659
default Android animation is to slide

00:01:59,219 --> 00:02:03,540
the tweet screen up from the bottom of

00:02:00,659 --> 00:02:09,050
the screen so let's have a look at what

00:02:03,540 --> 00:02:13,110
the native iOS navigation API looks like

00:02:09,050 --> 00:02:15,240
so if we're building a Twitter iOS app

00:02:13,110 --> 00:02:16,920
without react native then we use classes

00:02:15,240 --> 00:02:21,030
called view and navigation controllers

00:02:16,920 --> 00:02:23,610
and this time because we're doing an iOS

00:02:21,030 --> 00:02:27,150
app these are objective-c class is not

00:02:23,610 --> 00:02:29,840
Java classes and so when and also the

00:02:27,150 --> 00:02:32,220
each screen in our app is represented by

00:02:29,840 --> 00:02:33,660
one view controller so in our Twitter

00:02:32,220 --> 00:02:35,190
app we have one view controller for the

00:02:33,660 --> 00:02:37,170
home view and another view controller

00:02:35,190 --> 00:02:38,760
for the tweet view so when the user taps

00:02:37,170 --> 00:02:41,220
a tweet on their home screen then we

00:02:38,760 --> 00:02:44,090
push the new tweet screen onto the top

00:02:41,220 --> 00:02:46,260
of the navigation controller stack and

00:02:44,090 --> 00:02:47,040
so once we push in your tweets screen

00:02:46,260 --> 00:02:49,710
onto the top of the navigation

00:02:47,040 --> 00:02:52,050
controller stack then iOS takes care of

00:02:49,710 --> 00:02:53,640
animating the new tweet screen in over

00:02:52,050 --> 00:02:55,890
the top of the home screen and it runs

00:02:53,640 --> 00:02:57,480
the default iOS animation which this has

00:02:55,890 --> 00:03:00,720
slide the tweet screen in from the right

00:02:57,480 --> 00:03:03,390
of the screen you see here so I'm going

00:03:00,720 --> 00:03:06,180
to show how the navigation Reuter uses

00:03:03,390 --> 00:03:07,590
these native navigation api's on Android

00:03:06,180 --> 00:03:12,840
and iOS to give us a hundred percent

00:03:07,590 --> 00:03:14,700
native navigation on both platforms so

00:03:12,840 --> 00:03:18,050
we're going to build a react native

00:03:14,700 --> 00:03:23,130
Twitter app using the navigation Reuter

00:03:18,050 --> 00:03:24,930
so so let's assume that we've already

00:03:23,130 --> 00:03:27,330
created our react native app by running

00:03:24,930 --> 00:03:28,950
react native init Twitter and now we're

00:03:27,330 --> 00:03:30,090
going to install the navigation Reuter

00:03:28,950 --> 00:03:31,050
so the first thing we need to do is we

00:03:30,090 --> 00:03:33,540
need to install the free navigation

00:03:31,050 --> 00:03:35,940
related packages from NPM and then we

00:03:33,540 --> 00:03:37,470
all to link them and that's it like we

00:03:35,940 --> 00:03:40,230
don't have to do anything else we don't

00:03:37,470 --> 00:03:41,850
have to modify any native files we don't

00:03:40,230 --> 00:03:43,620
have to install any third-party

00:03:41,850 --> 00:03:46,350
libraries the navigation route is ready

00:03:43,620 --> 00:03:48,360
to go we can start using it so in order

00:03:46,350 --> 00:03:50,940
to set up our app to use a navigation

00:03:48,360 --> 00:03:53,700
Rueter we first of all create what's

00:03:50,940 --> 00:03:55,560
called a state matter and this is where

00:03:53,700 --> 00:03:58,290
we define our state's so we have one

00:03:55,560 --> 00:04:00,090
state for each scene in our app so we

00:03:58,290 --> 00:04:02,220
have a home state for the home scene and

00:04:00,090 --> 00:04:03,750
a tweet state for the tweet scene and

00:04:02,220 --> 00:04:04,830
don't worry about the track crumb trail

00:04:03,750 --> 00:04:06,690
property for now we're going to come

00:04:04,830 --> 00:04:08,610
back to that a bit later on in the talk

00:04:06,690 --> 00:04:10,380
so the next step after we create our

00:04:08,610 --> 00:04:13,320
state Navigator is to map each of our

00:04:10,380 --> 00:04:15,060
states to the component that renders The

00:04:13,320 --> 00:04:16,229
Associated scene so let's assume we've

00:04:15,060 --> 00:04:18,959
already created home and tweaked

00:04:16,229 --> 00:04:21,870
components for our scenes and then we

00:04:18,959 --> 00:04:23,130
map then we assign the render scene

00:04:21,870 --> 00:04:26,220
function to each of our states that

00:04:23,130 --> 00:04:27,000
returns the Associated component so we

00:04:26,220 --> 00:04:28,350
saw

00:04:27,000 --> 00:04:30,060
Renda scene function to the home state

00:04:28,350 --> 00:04:31,590
that returns the home component and a

00:04:30,060 --> 00:04:33,240
render scene function to this tweet

00:04:31,590 --> 00:04:36,780
state that returns the tweet component

00:04:33,240 --> 00:04:39,120
and so then the next stage is to do an

00:04:36,780 --> 00:04:40,980
initial navigation to the home state by

00:04:39,120 --> 00:04:44,040
calling the navigate function on the

00:04:40,980 --> 00:04:46,020
state navigator and this is just so that

00:04:44,040 --> 00:04:48,260
when that I app first starts is the the

00:04:46,020 --> 00:04:50,880
home scene that's displayed first and

00:04:48,260 --> 00:04:54,210
then the next stage the final stage is

00:04:50,880 --> 00:04:55,320
to render our app so don't worry too

00:04:54,210 --> 00:04:56,820
much about the navigation handler

00:04:55,320 --> 00:04:59,610
component that just puts our state

00:04:56,820 --> 00:05:01,260
navigator into react context so that we

00:04:59,610 --> 00:05:02,940
can access it from within any of our

00:05:01,260 --> 00:05:05,160
scenes the important component here is

00:05:02,940 --> 00:05:06,480
the navigation state component and it's

00:05:05,160 --> 00:05:08,490
a navigation state component that

00:05:06,480 --> 00:05:10,890
renders the the stack of scenes as the

00:05:08,490 --> 00:05:12,360
user navigates around the app and I'm

00:05:10,890 --> 00:05:15,690
going to show it's a navigation stat

00:05:12,360 --> 00:05:18,000
component that calls into those native

00:05:15,690 --> 00:05:20,750
navigation api's to give us the hundred

00:05:18,000 --> 00:05:24,030
cent native navigation on both platforms

00:05:20,750 --> 00:05:27,150
so now if we run our app this is what we

00:05:24,030 --> 00:05:30,090
see we see the home scene displayed

00:05:27,150 --> 00:05:31,530
first and okay there's nothing too

00:05:30,090 --> 00:05:33,600
exciting yet but the interesting stuff

00:05:31,530 --> 00:05:37,350
happens once the user selects a tweet on

00:05:33,600 --> 00:05:39,390
their home screen so we navigate from

00:05:37,350 --> 00:05:41,250
the home scene to the tweet scene by

00:05:39,390 --> 00:05:43,500
calling the navigate function on our

00:05:41,250 --> 00:05:45,540
state navigator just like we did when we

00:05:43,500 --> 00:05:47,729
were starting the app to navigate to the

00:05:45,540 --> 00:05:49,890
home scene but this time because we're

00:05:47,729 --> 00:05:51,690
inside a button press of the home

00:05:49,890 --> 00:05:52,350
component we have to get our state

00:05:51,690 --> 00:05:55,050
navigator

00:05:52,350 --> 00:05:57,570
out of the react context and at the same

00:05:55,050 --> 00:06:00,450
time as we navigate and we pass the the

00:05:57,570 --> 00:06:03,900
tweet state we also pass across the ID

00:06:00,450 --> 00:06:06,540
of the selected tweet and now the

00:06:03,900 --> 00:06:08,610
navigation is that component listens for

00:06:06,540 --> 00:06:11,040
navigation events so it sees that the

00:06:08,610 --> 00:06:13,140
new state is the tweet state and it

00:06:11,040 --> 00:06:15,000
calls the render scene function that we

00:06:13,140 --> 00:06:16,470
assigned to that tweets day and then we

00:06:15,000 --> 00:06:18,090
return the tweet component and the

00:06:16,470 --> 00:06:20,310
navigation stat component pushes the

00:06:18,090 --> 00:06:22,200
tweet component onto its array of scenes

00:06:20,310 --> 00:06:24,590
so now it renders both the home scene

00:06:22,200 --> 00:06:27,090
and the tweet scene together

00:06:24,590 --> 00:06:29,010
now if the navigation is that component

00:06:27,090 --> 00:06:30,930
was just a regular JavaScript component

00:06:29,010 --> 00:06:32,580
then when we run our app on Android or

00:06:30,930 --> 00:06:34,410
iOS this is what we'd see we see both

00:06:32,580 --> 00:06:36,330
things rendered at the same time we see

00:06:34,410 --> 00:06:38,310
the home scene rendered at the top and

00:06:36,330 --> 00:06:39,840
the tweet scene rendered at the bottom

00:06:38,310 --> 00:06:40,650
but that's not what we're expecting

00:06:39,840 --> 00:06:43,500
right where it's

00:06:40,650 --> 00:06:46,530
in the tweet scene to anime in over the

00:06:43,500 --> 00:06:48,510
top of the home scene no but don't worry

00:06:46,530 --> 00:06:50,070
that the navigation spare components not

00:06:48,510 --> 00:06:52,949
a regular JavaScript component it's a

00:06:50,070 --> 00:06:54,479
native component and because it's a

00:06:52,949 --> 00:06:57,510
native component it can override the

00:06:54,479 --> 00:06:58,620
default behavior so because it's a

00:06:57,510 --> 00:07:00,449
native component there are a

00:06:58,620 --> 00:07:02,699
corresponding navigation stack view

00:07:00,449 --> 00:07:05,130
classes on both the Android and the iOS

00:07:02,699 --> 00:07:06,510
side so you can see here at the top

00:07:05,130 --> 00:07:08,820
that's the navigation stack view Java

00:07:06,510 --> 00:07:11,460
class on Android and at the bottom is a

00:07:08,820 --> 00:07:15,120
navigation stack view objective-c class

00:07:11,460 --> 00:07:19,740
on iOS and react native codes

00:07:15,120 --> 00:07:21,570
corresponding creates a turns the home

00:07:19,740 --> 00:07:23,880
scene and the tweet scene components

00:07:21,570 --> 00:07:26,430
into child views of these navigation

00:07:23,880 --> 00:07:27,720
stack view classes so let's have a look

00:07:26,430 --> 00:07:29,970
at the implementation of the these

00:07:27,720 --> 00:07:33,350
navigation stack views starting first

00:07:29,970 --> 00:07:35,789
with Android so when the user selects a

00:07:33,350 --> 00:07:37,740
tweet from their home screen then react

00:07:35,789 --> 00:07:39,930
native creates a corresponding tweet

00:07:37,740 --> 00:07:41,970
view Java class and it passes into the

00:07:39,930 --> 00:07:44,190
navigation stack view by calling the X

00:07:41,970 --> 00:07:45,690
ad view method and the navigation stack

00:07:44,190 --> 00:07:47,639
view overrides this method to change the

00:07:45,690 --> 00:07:50,330
default behavior and this is where it

00:07:47,639 --> 00:07:52,500
calls into the native navigation API

00:07:50,330 --> 00:07:54,840
that we've already seen right so this is

00:07:52,500 --> 00:07:56,460
where it replaces the home screen with

00:07:54,840 --> 00:07:58,310
the new tweet screen by calling the

00:07:56,460 --> 00:08:01,950
replace method on the fragment manager

00:07:58,310 --> 00:08:03,960
and now if we run our app on Android

00:08:01,950 --> 00:08:05,370
instead of seeing both things rendered

00:08:03,960 --> 00:08:07,650
at the same time like we saw before you

00:08:05,370 --> 00:08:08,940
know one above the other now Android and

00:08:07,650 --> 00:08:10,770
it makes a new tweet screen into place

00:08:08,940 --> 00:08:12,360
over the top of the home screen and it

00:08:10,770 --> 00:08:14,430
runs a default Android animation which

00:08:12,360 --> 00:08:15,990
is to slide the tweet screen up from the

00:08:14,430 --> 00:08:18,150
bottom of the screen and that's because

00:08:15,990 --> 00:08:19,979
we're calling the native replace method

00:08:18,150 --> 00:08:21,930
on the fragment manager so let's have a

00:08:19,979 --> 00:08:25,800
look at the corresponding process but on

00:08:21,930 --> 00:08:28,139
iOS this time so when the user taps the

00:08:25,800 --> 00:08:29,580
tweet on their home screen then react

00:08:28,139 --> 00:08:31,680
native creates a corresponding tweet

00:08:29,580 --> 00:08:34,279
view objective-c class this time and it

00:08:31,680 --> 00:08:36,779
passes it into the navigation stack view

00:08:34,279 --> 00:08:39,690
via its insert react sub view method

00:08:36,779 --> 00:08:41,940
this time and again the navigation stack

00:08:39,690 --> 00:08:43,589
view overrides this method and so that

00:08:41,940 --> 00:08:45,570
you can change the default behavior and

00:08:43,589 --> 00:08:47,880
again this is where it calls into the

00:08:45,570 --> 00:08:50,550
native navigation API but this time the

00:08:47,880 --> 00:08:52,860
native iOS navigation API so it pushes

00:08:50,550 --> 00:08:53,920
the new tweet view onto the top of the

00:08:52,860 --> 00:08:55,779
navigation controller

00:08:53,920 --> 00:08:58,180
stack and once it pushes so if we run

00:08:55,779 --> 00:09:00,220
our app on iOS now again we won't see

00:08:58,180 --> 00:09:02,829
both scenes rented at the same time you

00:09:00,220 --> 00:09:04,360
know one above the other now iOS will

00:09:02,829 --> 00:09:05,920
animate the new tweet screen into place

00:09:04,360 --> 00:09:07,600
over the top of the home scene and

00:09:05,920 --> 00:09:10,000
because we're calling the native iOS

00:09:07,600 --> 00:09:11,800
navigation API it will run the default

00:09:10,000 --> 00:09:14,500
iOS animation which is to slide the

00:09:11,800 --> 00:09:16,810
tweet screen in over the top so once the

00:09:14,500 --> 00:09:19,779
users finish reading their tweet then

00:09:16,810 --> 00:09:22,269
they tap the back button to return to

00:09:19,779 --> 00:09:24,070
their home screen right and we can we

00:09:22,269 --> 00:09:25,630
can navigate back to the home screen by

00:09:24,070 --> 00:09:28,060
calling the navigate back function on

00:09:25,630 --> 00:09:29,320
the state navigator our state navigate

00:09:28,060 --> 00:09:31,920
and again just like before when we were

00:09:29,320 --> 00:09:35,110
navigating we get the state navigator

00:09:31,920 --> 00:09:37,510
from the react context and at the same

00:09:35,110 --> 00:09:38,949
time we pass a parameter of 1 to

00:09:37,510 --> 00:09:40,839
indicate that we want to go back one

00:09:38,949 --> 00:09:42,399
screen back to the home screen and now

00:09:40,839 --> 00:09:44,560
the navigation is that component on the

00:09:42,399 --> 00:09:49,360
react side listens for back navigation

00:09:44,560 --> 00:09:51,160
events it sees it sees that we've popped

00:09:49,360 --> 00:09:53,470
that we've never get it back so it

00:09:51,160 --> 00:09:55,389
removes its tweet view its tweet

00:09:53,470 --> 00:09:57,639
component from its stack of scenes and

00:09:55,389 --> 00:09:59,579
now it only renders the home component

00:09:57,639 --> 00:10:01,870
so let's have a look at how that

00:09:59,579 --> 00:10:03,790
removing the tweet component from it

00:10:01,870 --> 00:10:06,100
stack of scenes is communicated to the

00:10:03,790 --> 00:10:08,170
native side starting with Android so

00:10:06,100 --> 00:10:10,480
react native tells the navigation stack

00:10:08,170 --> 00:10:12,610
view Java class to remove each child to

00:10:10,480 --> 00:10:15,250
tweet view by calling its remove view

00:10:12,610 --> 00:10:17,350
app method and just like before their

00:10:15,250 --> 00:10:18,610
navigation stat view overrides this

00:10:17,350 --> 00:10:20,709
method to change the default behavior

00:10:18,610 --> 00:10:23,199
and this is where it calls into the

00:10:20,709 --> 00:10:25,420
native navigation API for navigating

00:10:23,199 --> 00:10:27,250
back on Android and that this time that

00:10:25,420 --> 00:10:29,140
is the pop back step method on the

00:10:27,250 --> 00:10:32,199
fragment manager and so once it calls

00:10:29,140 --> 00:10:34,810
the native Android navigation API for

00:10:32,199 --> 00:10:36,040
navigating back then Android animates

00:10:34,810 --> 00:10:38,890
the tweet screen back out the way it

00:10:36,040 --> 00:10:40,300
came in sliding it back off the bottom

00:10:38,890 --> 00:10:44,260
the screen back out the way came in and

00:10:40,300 --> 00:10:46,170
shows the home screen in its place and

00:10:44,260 --> 00:10:49,810
let's have a look at the corresponding

00:10:46,170 --> 00:10:52,120
process but on iOS this time so when the

00:10:49,810 --> 00:10:53,740
user taps the back button to return to

00:10:52,120 --> 00:10:55,389
their home screen then react native

00:10:53,740 --> 00:10:57,730
tells the navigation stack view

00:10:55,389 --> 00:11:00,430
objective-c class to remove its child

00:10:57,730 --> 00:11:02,620
tweet view by calling its remove reacts

00:11:00,430 --> 00:11:04,329
our view method this time and again the

00:11:02,620 --> 00:11:06,730
navigation stack view overrides this

00:11:04,329 --> 00:11:07,790
method and this is where so it can

00:11:06,730 --> 00:11:10,040
change a default

00:11:07,790 --> 00:11:12,260
rendering behavior and this is where it

00:11:10,040 --> 00:11:15,800
calls into the native iOS navigation API

00:11:12,260 --> 00:11:17,870
for navigating back so it pops the tweet

00:11:15,800 --> 00:11:22,010
view from the top of the navigation

00:11:17,870 --> 00:11:22,430
controller stack and then once it does

00:11:22,010 --> 00:11:25,520
that

00:11:22,430 --> 00:11:26,900
iOS takes care of the rest it animates

00:11:25,520 --> 00:11:27,380
the tweet screen back out the way it

00:11:26,900 --> 00:11:29,420
came in

00:11:27,380 --> 00:11:31,850
slides it off the screen running the

00:11:29,420 --> 00:11:34,480
default IRS animation to slide it off

00:11:31,850 --> 00:11:37,580
and show the home screen in its place

00:11:34,480 --> 00:11:39,230
so to recap on the react side the

00:11:37,580 --> 00:11:42,320
navigation stack component renders a

00:11:39,230 --> 00:11:43,970
stack of scenes and it pushes and pops

00:11:42,320 --> 00:11:46,220
from this stack of scenes as the user

00:11:43,970 --> 00:11:48,020
navigates around the app and then react

00:11:46,220 --> 00:11:50,210
native communicates these additions and

00:11:48,020 --> 00:11:52,460
removals to the stack onto the native

00:11:50,210 --> 00:11:54,650
side and then on the native side the

00:11:52,460 --> 00:11:56,810
navigation stack view classes apply the

00:11:54,650 --> 00:11:58,760
changes to the stack by calling in to

00:11:56,810 --> 00:12:00,830
the native platform specific navigation

00:11:58,760 --> 00:12:04,130
api's and that's how the navigation

00:12:00,830 --> 00:12:10,730
route achieves a 100% native navigation

00:12:04,130 --> 00:12:12,230
on both platforms ok so remember that

00:12:10,730 --> 00:12:13,520
track crumb trail property that I said

00:12:12,230 --> 00:12:15,680
not to worry about from the beginning of

00:12:13,520 --> 00:12:21,020
talk well now it's time to look at the

00:12:15,680 --> 00:12:23,260
crumb trail in some detail okay so in

00:12:21,020 --> 00:12:25,220
the fairy story Hansel and Gretel

00:12:23,260 --> 00:12:27,260
remember their route through the woods

00:12:25,220 --> 00:12:29,300
by dropping a trail of breadcrumbs as

00:12:27,260 --> 00:12:31,850
they go and the navigation router does

00:12:29,300 --> 00:12:34,250
something similar to remember the route

00:12:31,850 --> 00:12:37,880
that a user takes through the app so

00:12:34,250 --> 00:12:40,490
every time a user visits a scene then

00:12:37,880 --> 00:12:43,430
the navigation burrito drops a crumb to

00:12:40,490 --> 00:12:44,930
remember where they've been so let's

00:12:43,430 --> 00:12:47,560
take an example in a Twitter app right

00:12:44,930 --> 00:12:50,420
when when the user taps a tweet a on

00:12:47,560 --> 00:12:52,340
their home screen then the navigation

00:12:50,420 --> 00:12:55,400
reader drops a crumb to remember the

00:12:52,340 --> 00:12:58,250
home screen and then if the user selects

00:12:55,400 --> 00:13:02,930
tweet B then the navigation Ritu drops a

00:12:58,250 --> 00:13:05,240
crumb to remember tweet a and so this is

00:13:02,930 --> 00:13:08,270
what the crumb trail looks like it's an

00:13:05,240 --> 00:13:10,130
array of crumbs and each crumb holds two

00:13:08,270 --> 00:13:12,980
pieces of information to identify the

00:13:10,130 --> 00:13:15,470
scene so it holds the state and the

00:13:12,980 --> 00:13:17,180
Associated data so you can see in our

00:13:15,470 --> 00:13:20,180
Twitter example we start off with the

00:13:17,180 --> 00:13:21,200
home crumb and then the next one is the

00:13:20,180 --> 00:13:23,180
crumb to remember to

00:13:21,200 --> 00:13:27,200
and you can see that the current scene

00:13:23,180 --> 00:13:30,680
which is tweet B doesn't appear in the

00:13:27,200 --> 00:13:33,200
chrome TRO that doesn't appear until the

00:13:30,680 --> 00:13:35,990
user selects tweet C and that's when the

00:13:33,200 --> 00:13:40,880
navigation River drops a crumb to

00:13:35,990 --> 00:13:42,589
remember tweet B so you see that the the

00:13:40,880 --> 00:13:46,730
crumb trail the list of the crumbs array

00:13:42,589 --> 00:13:49,899
is a list of all the visited scenes of a

00:13:46,730 --> 00:13:52,130
user not including the current scene and

00:13:49,899 --> 00:13:53,600
is the track crumb trail property from

00:13:52,130 --> 00:13:58,579
the beginning of the talk that turns on

00:13:53,600 --> 00:14:00,680
this crumb trail tracking behavior so we

00:13:58,579 --> 00:14:02,690
can access this crumbs array at any time

00:14:00,680 --> 00:14:04,639
from within the a of us from within any

00:14:02,690 --> 00:14:07,550
of our scenes by getting it from the

00:14:04,639 --> 00:14:09,290
react context we get the state navigator

00:14:07,550 --> 00:14:10,970
from react context just like we did when

00:14:09,290 --> 00:14:12,889
we were navigating and then the crumbs

00:14:10,970 --> 00:14:17,180
array is just a property hanging off the

00:14:12,889 --> 00:14:18,560
state context property of there so let's

00:14:17,180 --> 00:14:20,420
have a look at how this crumbs array

00:14:18,560 --> 00:14:26,839
helps us make decisions about how we

00:14:20,420 --> 00:14:28,760
navigate so let's take this scenario the

00:14:26,839 --> 00:14:31,790
user selects to retweet a from their

00:14:28,760 --> 00:14:34,100
home screen then they select tweet B

00:14:31,790 --> 00:14:36,079
which is one of the replies to tweet a

00:14:34,100 --> 00:14:37,610
and then when they finish reading tweet

00:14:36,079 --> 00:14:40,850
B they decide to look at a different

00:14:37,610 --> 00:14:42,589
reply to the original tweet a so but

00:14:40,850 --> 00:14:43,670
instead of tapping the back button to go

00:14:42,589 --> 00:14:46,310
back to tweet a what they do is they

00:14:43,670 --> 00:14:49,430
scroll up tweet B and they reselect the

00:14:46,310 --> 00:14:50,899
original tweet a so what you get is you

00:14:49,430 --> 00:14:53,690
get a stack that looks like this you get

00:14:50,899 --> 00:14:56,540
tweet a followed by tweet B and then

00:14:53,690 --> 00:14:58,010
followed by tweet I again so that's it

00:14:56,540 --> 00:14:59,540
so that's the default behavior of the

00:14:58,010 --> 00:15:01,730
navigation area - sorry every time we

00:14:59,540 --> 00:15:04,610
navigate the navigation Reuter pushes a

00:15:01,730 --> 00:15:06,110
new scene onto the stack at least when

00:15:04,610 --> 00:15:09,079
the TREC crumb trail property is enabled

00:15:06,110 --> 00:15:10,730
anyway but obviously this can get quite

00:15:09,079 --> 00:15:12,980
annoying for the user right now they

00:15:10,730 --> 00:15:15,949
have to tap back three times to return

00:15:12,980 --> 00:15:19,550
back to their home screen what if

00:15:15,949 --> 00:15:21,680
instead we detect that the user is re

00:15:19,550 --> 00:15:23,839
selecting their previous tweet when

00:15:21,680 --> 00:15:27,079
they're actually on tweet B and instead

00:15:23,839 --> 00:15:29,000
of navigating them forward to tweet a

00:15:27,079 --> 00:15:31,519
again we actually navigate them back one

00:15:29,000 --> 00:15:33,019
instead back to tweet a and then we end

00:15:31,519 --> 00:15:34,130
up with a much shortened stack we end up

00:15:33,019 --> 00:15:35,480
with a stack which is just the home

00:15:34,130 --> 00:15:37,339
scene followed by tweet

00:15:35,480 --> 00:15:42,319
and now the user only has to tap back

00:15:37,339 --> 00:15:46,850
once to return to their home scene so we

00:15:42,319 --> 00:15:49,069
can do this using the crumbs array right

00:15:46,850 --> 00:15:50,809
because uh when when the users on tweet

00:15:49,069 --> 00:15:52,669
B and they scroll up and they reset

00:15:50,809 --> 00:15:54,319
their original tweet a we can check what

00:15:52,669 --> 00:15:55,790
the last crumb is because remember the

00:15:54,319 --> 00:16:00,709
last crumb is actually the previous

00:15:55,790 --> 00:16:02,569
thing so what we do is we check when the

00:16:00,709 --> 00:16:04,730
users on Twitter they scroll up and they

00:16:02,569 --> 00:16:06,259
re select we a we check if the last

00:16:04,730 --> 00:16:09,079
crumb that's the previous scene is

00:16:06,259 --> 00:16:10,549
actually already tweet a and we do that

00:16:09,079 --> 00:16:12,949
by checking its state and data

00:16:10,549 --> 00:16:14,839
properties so if the last crumb is

00:16:12,949 --> 00:16:17,089
already tweet a then we navigate them

00:16:14,839 --> 00:16:18,439
back and if it isn't so if they got to

00:16:17,089 --> 00:16:20,540
tweet be from a different tweet like

00:16:18,439 --> 00:16:23,839
tweet C for example then we never get

00:16:20,540 --> 00:16:25,249
them forward to tweet a like normal so

00:16:23,839 --> 00:16:26,600
you see the crumb the crumb trail comes

00:16:25,249 --> 00:16:28,189
in handy it tells us where we've been

00:16:26,600 --> 00:16:30,999
and it helps us to make decisions about

00:16:28,189 --> 00:16:30,999
where we want to go next

00:16:31,239 --> 00:16:36,230
but obviously put in navigation rules

00:16:34,309 --> 00:16:39,230
like this into our tweet component can

00:16:36,230 --> 00:16:41,359
get a bit messy right what if instead we

00:16:39,230 --> 00:16:43,699
said let's keep the tweet component done

00:16:41,359 --> 00:16:45,410
so that it always navigates to tweet a

00:16:43,699 --> 00:16:47,089
it doesn't have to check what the crumbs

00:16:45,410 --> 00:16:48,889
are or what the previous tweet is

00:16:47,089 --> 00:16:51,470
instead it just always navigates to

00:16:48,889 --> 00:16:54,109
tweet a and then what we do is we move

00:16:51,470 --> 00:16:55,819
our navigation rules out of the tweet

00:16:54,109 --> 00:16:59,600
component and put them out somewhere

00:16:55,819 --> 00:17:01,160
else so we can move our navigation laws

00:16:59,600 --> 00:17:02,779
out of the tweet component we can put

00:17:01,160 --> 00:17:05,959
them in a truncate crumb trail function

00:17:02,779 --> 00:17:07,519
that we attach to the tweet State and so

00:17:05,959 --> 00:17:09,980
what happens when we navigate the

00:17:07,519 --> 00:17:11,750
navigation burrito cause our truncate

00:17:09,980 --> 00:17:15,889
crumb trail function and it passes in

00:17:11,750 --> 00:17:17,389
the proposed crumbs array and then we

00:17:15,889 --> 00:17:20,419
return the actual crumbs array that we

00:17:17,389 --> 00:17:22,130
want so in our example when the users on

00:17:20,419 --> 00:17:24,380
tweet B and they scroll up and they

00:17:22,130 --> 00:17:26,839
resell it tweet a then they have

00:17:24,380 --> 00:17:28,610
navigation Reuter passes in the proposed

00:17:26,839 --> 00:17:32,779
crumbs array so that's the home screen

00:17:28,610 --> 00:17:34,519
tweet a and then tweet B and then we

00:17:32,779 --> 00:17:38,419
chop the last two crumbs off the end and

00:17:34,519 --> 00:17:40,880
we just return the home crumb so then

00:17:38,419 --> 00:17:44,000
the stack just becomes the home crumb

00:17:40,880 --> 00:17:45,620
followed by tweet a so you can see that

00:17:44,000 --> 00:17:48,049
even though we navigated forward in

00:17:45,620 --> 00:17:49,140
tweet in the in the tweet component we

00:17:48,049 --> 00:17:51,630
always navigated forward

00:17:49,140 --> 00:17:55,040
toot we a we actually take the user back

00:17:51,630 --> 00:17:56,790
to tweet a rather than pushing it again

00:17:55,040 --> 00:17:58,620
so let's have a look at what this

00:17:56,790 --> 00:18:02,490
truncate chrome toe information

00:17:58,620 --> 00:18:05,280
implementation looks like so what we do

00:18:02,490 --> 00:18:08,190
is we first of all get the the last but

00:18:05,280 --> 00:18:11,760
one crumb and we check if it's tweet ID

00:18:08,190 --> 00:18:13,200
is the same as the next tweet ID and we

00:18:11,760 --> 00:18:15,600
get the next three ID from the data

00:18:13,200 --> 00:18:17,430
parameter passed in so what we check in

00:18:15,600 --> 00:18:20,100
we're checking if the previous scene is

00:18:17,430 --> 00:18:21,570
the same as the next scene so if the

00:18:20,100 --> 00:18:23,220
previous scene and the next scene are

00:18:21,570 --> 00:18:24,810
the same then we chop the last two

00:18:23,220 --> 00:18:27,120
crumbs off so we actually never get them

00:18:24,810 --> 00:18:28,740
back to the original tweet a and if the

00:18:27,120 --> 00:18:30,720
previous scene isn't the same as the

00:18:28,740 --> 00:18:32,670
next scene so it came from tweet C to

00:18:30,720 --> 00:18:34,080
tweet B then we just navigate them

00:18:32,670 --> 00:18:35,310
forward we don't change the crumbs array

00:18:34,080 --> 00:18:41,030
and we're never getting a forward to

00:18:35,310 --> 00:18:43,140
tweet a ok so putting this all together

00:18:41,030 --> 00:18:45,420
you can see that we can do whatever

00:18:43,140 --> 00:18:47,280
navigation we want we could on the react

00:18:45,420 --> 00:18:51,240
side because we have full control over

00:18:47,280 --> 00:18:53,490
the crumbs array and what what goes in

00:18:51,240 --> 00:18:55,170
the crumbs array determines the stack of

00:18:53,490 --> 00:18:58,080
scenes that the navigation area renders

00:18:55,170 --> 00:18:59,880
and then the changes to the stack of

00:18:58,080 --> 00:19:02,550
scenes is communicated to the native

00:18:59,880 --> 00:19:04,680
side by react native and then on the

00:19:02,550 --> 00:19:06,900
native side the navigation stack views

00:19:04,680 --> 00:19:09,180
applies these changes by calling in to

00:19:06,900 --> 00:19:12,420
the native platform specific navigation

00:19:09,180 --> 00:19:14,130
api's on both platforms and that's a

00:19:12,420 --> 00:19:15,840
thanks for listening anyway sorry about

00:19:14,130 --> 00:19:17,490
that complication at beginning and

00:19:15,840 --> 00:19:21,160
that's that's a link to the

00:19:17,490 --> 00:19:28,419
documentation Thanks

00:19:21,160 --> 00:19:28,419

YouTube URL: https://www.youtube.com/watch?v=xTNfHEWl2oA


