Title: React Native at Made.com - React Native - April 2019
Publication date: 2019-05-12
Playlist: React Native London
Description: 
	Presented by Tobin Saunders & Amir Sohi from @madedotcom

4 months after deploying the MADE app, we look back and reflect on the technologies we thought were a good idea at the time and what we could have done differently.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:07,770
hello my name is sodas orders I'm senior

00:00:03,929 --> 00:00:13,110
JavaScript developer here at made a year

00:00:07,770 --> 00:00:17,010
tomorrow and this is basically the first

00:00:13,110 --> 00:00:21,779
section of this talk we started this

00:00:17,010 --> 00:00:24,359
project which is Emporia last year and

00:00:21,779 --> 00:00:28,199
this was basically a replac forming

00:00:24,359 --> 00:00:30,599
project for four made so as as Gaius

00:00:28,199 --> 00:00:35,700
said earlier we've got a Magento a

00:00:30,599 --> 00:00:38,430
Magento web and we've got been developed

00:00:35,700 --> 00:00:41,219
by third party it's quite lengthy to get

00:00:38,430 --> 00:00:43,140
any updates to that and to get any kind

00:00:41,219 --> 00:00:45,719
of control over it and the company was

00:00:43,140 --> 00:00:48,750
growing so basically the project was to

00:00:45,719 --> 00:00:53,489
replant form everything onto web react

00:00:48,750 --> 00:00:55,649
and native so we knew that at the

00:00:53,489 --> 00:00:57,629
beginning we were going to have a web

00:00:55,649 --> 00:00:59,730
platform and we're going to have a

00:00:57,629 --> 00:01:03,000
native app platform and we also knew

00:00:59,730 --> 00:01:04,890
that we wanted to use react for both but

00:01:03,000 --> 00:01:07,380
we wanted to think how we can move as

00:01:04,890 --> 00:01:09,689
quick as we can so we were working with

00:01:07,380 --> 00:01:15,049
Hyodo who helped us to get the project

00:01:09,689 --> 00:01:18,060
up and running and at the beginning and

00:01:15,049 --> 00:01:21,420
we sort of investigated what what we

00:01:18,060 --> 00:01:23,759
could actually actually share so so what

00:01:21,420 --> 00:01:25,020
could we share so the first thing when I

00:01:23,759 --> 00:01:26,970
came to react mates the first thing I

00:01:25,020 --> 00:01:29,430
thought was great I can do react on the

00:01:26,970 --> 00:01:33,299
web so react native sure I can share my

00:01:29,430 --> 00:01:34,950
react components on the app just change

00:01:33,299 --> 00:01:35,759
it in one place and push it out and

00:01:34,950 --> 00:01:37,200
everything's great

00:01:35,759 --> 00:01:39,150
well no because obviously it's a

00:01:37,200 --> 00:01:41,130
completely different runtime you've got

00:01:39,150 --> 00:01:43,290
completely different primitives and it's

00:01:41,130 --> 00:01:46,079
just not possible and that's okay that's

00:01:43,290 --> 00:01:47,820
that's fine so so that's a no config

00:01:46,079 --> 00:01:51,240
that sort of stuff

00:01:47,820 --> 00:01:53,070
oh sorry I mean business logic yes

00:01:51,240 --> 00:01:54,240
that's our deal for being shared it's

00:01:53,070 --> 00:01:57,210
going to be consistent across all

00:01:54,240 --> 00:01:59,420
applications and having it separated and

00:01:57,210 --> 00:02:02,219
isolated means you unit test it heavier

00:01:59,420 --> 00:02:03,479
and it's more stable so that's the sort

00:02:02,219 --> 00:02:05,670
of thing you do definitely want to be

00:02:03,479 --> 00:02:08,250
sharing config of that sort of thing

00:02:05,670 --> 00:02:09,979
that updates rarely things like store

00:02:08,250 --> 00:02:12,319
codes and stuff every time

00:02:09,979 --> 00:02:13,580
a new country that will update and it's

00:02:12,319 --> 00:02:15,980
straightforward it's not a big problem

00:02:13,580 --> 00:02:18,080
and it's perfect for having in one place

00:02:15,980 --> 00:02:20,120
things like styling well things like

00:02:18,080 --> 00:02:23,480
brand colors fonts and they change

00:02:20,120 --> 00:02:24,860
rarely so they're great and you can't

00:02:23,480 --> 00:02:26,030
have things like breakpoints and that

00:02:24,860 --> 00:02:28,760
sort of stuff obviously for the

00:02:26,030 --> 00:02:30,110
web-based stuff but that's about it you

00:02:28,760 --> 00:02:32,750
kinda don't really want to share much

00:02:30,110 --> 00:02:36,739
other styling stuff between native and

00:02:32,750 --> 00:02:40,340
web and higher order components we make

00:02:36,739 --> 00:02:43,280
a lot of use of those in the in the in

00:02:40,340 --> 00:02:45,819
both apps actually so we use them to

00:02:43,280 --> 00:02:48,890
wrap our graphical data we use Apollo

00:02:45,819 --> 00:02:51,440
and that's how we get data and various

00:02:48,890 --> 00:02:54,980
state stuff in so that's great so we

00:02:51,440 --> 00:02:57,440
knew we knew what we were gonna do this

00:02:54,980 --> 00:02:59,629
is what we decided to share so we share

00:02:57,440 --> 00:03:02,840
translations data aggregators for

00:02:59,629 --> 00:03:04,700
matters types config mock data graph

00:03:02,840 --> 00:03:08,079
cool queries and high order components

00:03:04,700 --> 00:03:11,599
and we use packaged cloud to create a

00:03:08,079 --> 00:03:13,280
version dependency that we can change

00:03:11,599 --> 00:03:15,889
versions of quite easily we just bumped

00:03:13,280 --> 00:03:17,060
the version change the version in the

00:03:15,889 --> 00:03:20,090
application and then we know we've got

00:03:17,060 --> 00:03:21,799
our updates which are shared and this

00:03:20,090 --> 00:03:24,139
this is something that would be across

00:03:21,799 --> 00:03:27,440
all platforms so it's great everyone's

00:03:24,139 --> 00:03:31,160
happy rainbows unicorns put the app out

00:03:27,440 --> 00:03:34,760
there were some teething issues and

00:03:31,160 --> 00:03:37,370
stuff guys and the team we want us to

00:03:34,760 --> 00:03:38,660
get through those and we got there but

00:03:37,370 --> 00:03:41,299
then there was a business requirement to

00:03:38,660 --> 00:03:44,450
add another application so we had web

00:03:41,299 --> 00:03:47,930
and we had the app but then they wanted

00:03:44,450 --> 00:03:50,599
a show application so this was to

00:03:47,930 --> 00:03:52,400
basically break the barrier down between

00:03:50,599 --> 00:03:55,220
the digital and the physical so they can

00:03:52,400 --> 00:03:56,629
have some sort of UI in the in the shop

00:03:55,220 --> 00:03:58,400
so people can actually buy and see all

00:03:56,629 --> 00:03:59,750
of the other products that we have as

00:03:58,400 --> 00:04:03,290
opposed to their few that we might have

00:03:59,750 --> 00:04:04,940
in the showroom so that was fine and he

00:04:03,290 --> 00:04:07,489
actually having the shared code meant

00:04:04,940 --> 00:04:10,609
that we were able to do it a lot quicker

00:04:07,489 --> 00:04:12,829
than we might have done otherwise but it

00:04:10,609 --> 00:04:16,100
did obviously add more complexity and

00:04:12,829 --> 00:04:20,060
added more strain on that dependency

00:04:16,100 --> 00:04:21,530
and yes that was that so then the other

00:04:20,060 --> 00:04:23,420
thing that we did is in the web we

00:04:21,530 --> 00:04:26,720
actually AM started using a release

00:04:23,420 --> 00:04:27,710
cycle which was a big good decision we

00:04:26,720 --> 00:04:30,650
use get flow

00:04:27,710 --> 00:04:32,780
sorry github flow so those are not aware

00:04:30,650 --> 00:04:35,450
basically you release your actual

00:04:32,780 --> 00:04:38,150
features and master becomes clean and

00:04:35,450 --> 00:04:39,830
you always you never basically release

00:04:38,150 --> 00:04:41,510
master unless something goes badly wrong

00:04:39,830 --> 00:04:44,390
but you means you've got a nice clean

00:04:41,510 --> 00:04:48,500
master your features get deployed and

00:04:44,390 --> 00:04:49,790
features can be managed lovely easily

00:04:48,500 --> 00:04:52,820
but the problem is that different

00:04:49,790 --> 00:04:54,800
features move at different times and so

00:04:52,820 --> 00:04:57,440
so this is an example of something that

00:04:54,800 --> 00:04:59,720
might happen so this old feature got

00:04:57,440 --> 00:05:04,010
released and it's got a shared version

00:04:59,720 --> 00:05:05,630
of 1.7 point oh and we've got another

00:05:04,010 --> 00:05:08,870
one that needs a update to the shared

00:05:05,630 --> 00:05:11,030
codebase 1.71 and that's fine that's

00:05:08,870 --> 00:05:13,190
being Qaid that's already release that

00:05:11,030 --> 00:05:14,780
doesn't need anything from shared but

00:05:13,190 --> 00:05:16,670
then something breaks in production

00:05:14,780 --> 00:05:18,500
we've got to put a hotfix in and it

00:05:16,670 --> 00:05:20,480
needs a change to shared so we update

00:05:18,500 --> 00:05:22,520
shared that goes out before the rest of

00:05:20,480 --> 00:05:24,980
it so all the updates for the featured

00:05:22,520 --> 00:05:27,260
product count now go into production

00:05:24,980 --> 00:05:28,820
before they bring huee tested or

00:05:27,260 --> 00:05:30,800
anything else of course this would have

00:05:28,820 --> 00:05:32,660
been tested as well but the risk is

00:05:30,800 --> 00:05:35,530
still there that we're releasing bugs

00:05:32,660 --> 00:05:37,610
that we've not yet been able to discover

00:05:35,530 --> 00:05:39,230
they also they're not gonna affect is

00:05:37,610 --> 00:05:40,970
that is that you were then bumping

00:05:39,230 --> 00:05:42,530
versions of shared that might be used in

00:05:40,970 --> 00:05:43,820
the app and obviously rolling back

00:05:42,530 --> 00:05:47,870
versions in the app is considerably

00:05:43,820 --> 00:05:50,030
harder than in the web so what can we do

00:05:47,870 --> 00:05:51,200
well we thought maybe we could we could

00:05:50,030 --> 00:05:54,860
split shared up into smaller

00:05:51,200 --> 00:05:57,560
dependencies make it more focused update

00:05:54,860 --> 00:06:02,240
them less often but it would add more

00:05:57,560 --> 00:06:03,890
complexity the good stuff would be yeah

00:06:02,240 --> 00:06:05,780
more focused and less frequent

00:06:03,890 --> 00:06:11,960
increments on each dependency more

00:06:05,780 --> 00:06:13,280
choice translations for something is a

00:06:11,960 --> 00:06:16,570
difficult transition from what we'd

00:06:13,280 --> 00:06:20,320
already got a lot of complexity and

00:06:16,570 --> 00:06:22,310
difficult to develop lots of small

00:06:20,320 --> 00:06:24,620
dependencies locally

00:06:22,310 --> 00:06:26,870
but then we thought well actually what

00:06:24,620 --> 00:06:28,670
do we need to share everything like wish

00:06:26,870 --> 00:06:31,669
we knew we could share these things so

00:06:28,670 --> 00:06:35,060
we shared them and then we thought well

00:06:31,669 --> 00:06:37,220
what should we share so now we're

00:06:35,060 --> 00:06:39,139
starting to realize that we don't

00:06:37,220 --> 00:06:41,210
necessarily need to share everything in

00:06:39,139 --> 00:06:44,780
every application so things like

00:06:41,210 --> 00:06:46,190
translations it's great to be shared but

00:06:44,780 --> 00:06:47,930
it needs to be shared separately as a

00:06:46,190 --> 00:06:50,210
separate service it's something that

00:06:47,930 --> 00:06:53,000
changes regularly almost daily sometimes

00:06:50,210 --> 00:06:55,190
and an often needs to be updated and

00:06:53,000 --> 00:06:56,990
people need things to go out so we're

00:06:55,190 --> 00:06:59,660
gonna have probably as a separate

00:06:56,990 --> 00:07:01,460
service and high order components they

00:06:59,660 --> 00:07:03,080
can definitely be shared but we needed

00:07:01,460 --> 00:07:05,930
to keep them more generic and more

00:07:03,080 --> 00:07:08,530
simplistic otherwise complexity and

00:07:05,930 --> 00:07:11,660
problems and bugs become more complex

00:07:08,530 --> 00:07:14,750
things around queries and the data that

00:07:11,660 --> 00:07:15,830
we're requesting not really anymore we

00:07:14,750 --> 00:07:17,450
realized that was where a lot of the

00:07:15,830 --> 00:07:20,360
problems were coming you're requesting

00:07:17,450 --> 00:07:21,680
data that you need on the app but you're

00:07:20,360 --> 00:07:23,630
also then requesting that for the web

00:07:21,680 --> 00:07:25,160
but the web needs a completely different

00:07:23,630 --> 00:07:28,010
set of data and suddenly you've got

00:07:25,160 --> 00:07:30,919
multiple volumes of data that you just

00:07:28,010 --> 00:07:32,690
don't need in either application so

00:07:30,919 --> 00:07:35,300
having that in the application itself

00:07:32,690 --> 00:07:36,590
makes much more sense and then of course

00:07:35,300 --> 00:07:38,000
the knock-on effects that is that not

00:07:36,590 --> 00:07:39,320
data there's no point having that in

00:07:38,000 --> 00:07:41,000
shared because it's completely different

00:07:39,320 --> 00:07:43,190
application you're only using it for

00:07:41,000 --> 00:07:44,960
tests and that sort of thing so that

00:07:43,190 --> 00:07:46,910
needs to go in its own application as

00:07:44,960 --> 00:07:49,700
well and then things like these are

00:07:46,910 --> 00:07:51,500
ideal for being shared still so that's

00:07:49,700 --> 00:07:53,330
the sort of thing that ideally needs to

00:07:51,500 --> 00:07:54,860
be shared things like types though you

00:07:53,330 --> 00:07:56,630
want to find some solution to pull that

00:07:54,860 --> 00:08:00,200
into your project so that you can get

00:07:56,630 --> 00:08:02,120
the helpful tool tips in your IDE and

00:08:00,200 --> 00:08:05,260
that was one thing that we managed to

00:08:02,120 --> 00:08:08,390
solve so conversion sharing code

00:08:05,260 --> 00:08:12,229
fantastic and helped us a lot and been

00:08:08,390 --> 00:08:12,860
great but not necessarily always a good

00:08:12,229 --> 00:08:14,600
idea

00:08:12,860 --> 00:08:16,520
so just because she's him doesn't

00:08:14,600 --> 00:08:19,820
necessarily mean you should and that was

00:08:16,520 --> 00:08:21,650
the lesson that we've learned so I saw

00:08:19,820 --> 00:08:22,669
the I'll hand over to Amir now who's

00:08:21,650 --> 00:08:24,919
going to talk you through some of the

00:08:22,669 --> 00:08:27,430
problems he's had with web views thank

00:08:24,919 --> 00:08:30,200
you yeah

00:08:27,430 --> 00:08:33,159
web views my name is Amir I've been a

00:08:30,200 --> 00:08:37,389
JavaScript developer now for 11

00:08:33,159 --> 00:08:42,969
joined made in August primarily working

00:08:37,389 --> 00:08:45,579
on the native app team so web views what

00:08:42,969 --> 00:08:50,860
do they do do they do things let's find

00:08:45,579 --> 00:08:52,990
out so for those who are not familiar

00:08:50,860 --> 00:08:57,519
web views basically render web content

00:08:52,990 --> 00:09:00,610
in the native view we've used web views

00:08:57,519 --> 00:09:02,350
in certain areas in the native app but a

00:09:00,610 --> 00:09:04,959
particular part I want to talk about is

00:09:02,350 --> 00:09:08,560
the checkout in which we've used web

00:09:04,959 --> 00:09:12,430
views which turned out to be a bit of a

00:09:08,560 --> 00:09:15,040
headache so the reason why we use web

00:09:12,430 --> 00:09:18,339
views on the checkout mostly rather than

00:09:15,040 --> 00:09:22,029
an API based checkout is because we were

00:09:18,339 --> 00:09:23,560
under a bit of time pressure and we had

00:09:22,029 --> 00:09:25,420
a few blockers as well with the api's

00:09:23,560 --> 00:09:27,720
and the team their managers that were

00:09:25,420 --> 00:09:33,879
also under time pressures with a certain

00:09:27,720 --> 00:09:39,550
other project so this is how we thought

00:09:33,879 --> 00:09:42,550
it go that's how it really went yeah so

00:09:39,550 --> 00:09:45,040
pros though should be quick and easy to

00:09:42,550 --> 00:09:48,160
use web views except we use it in

00:09:45,040 --> 00:09:49,420
certain parts of the app it was fine no

00:09:48,160 --> 00:09:54,790
issues it was great

00:09:49,420 --> 00:09:57,759
minimal dev work no complications this

00:09:54,790 --> 00:09:58,930
is sort of just a generic snippet of

00:09:57,759 --> 00:10:03,040
code that I pulled from react native

00:09:58,930 --> 00:10:04,630
Doc's look simple you can find more

00:10:03,040 --> 00:10:11,860
props and methods online if you want to

00:10:04,630 --> 00:10:16,899
read up on it more but in our case with

00:10:11,860 --> 00:10:18,399
a lot of headaches so cons cookies if

00:10:16,899 --> 00:10:22,720
you're gonna build anything that

00:10:18,399 --> 00:10:26,290
requires cookies log in check out it's

00:10:22,720 --> 00:10:27,819
sort of a red flag this is because you

00:10:26,290 --> 00:10:30,399
basically need to manage your cookies

00:10:27,819 --> 00:10:32,139
both on the rack native side and for the

00:10:30,399 --> 00:10:36,579
cookies that you get from the web

00:10:32,139 --> 00:10:38,800
content so what we did was we use a

00:10:36,579 --> 00:10:41,860
third-party plug-in called react native

00:10:38,800 --> 00:10:44,050
cookies which tamir's I don't recommend

00:10:41,860 --> 00:10:51,279
because they've stopped maintaining it

00:10:44,050 --> 00:10:53,560
now so this but but the plugin gave us

00:10:51,279 --> 00:10:56,529
access to both the cookie source

00:10:53,560 --> 00:10:59,260
so basically when the webview would

00:10:56,529 --> 00:11:04,510
finish loading we would fetch the

00:10:59,260 --> 00:11:06,850
cookies and pair them it was great but

00:11:04,510 --> 00:11:09,570
that sort of leads into the next con of

00:11:06,850 --> 00:11:12,579
debugging so as soon as we loaded up the

00:11:09,570 --> 00:11:15,310
debugger the cookies would be

00:11:12,579 --> 00:11:18,100
synchronized so we had a very big

00:11:15,310 --> 00:11:20,709
problem when it came to debugging any

00:11:18,100 --> 00:11:22,720
issues that we had with the web views so

00:11:20,709 --> 00:11:24,130
we came up with a temporary hacky

00:11:22,720 --> 00:11:32,589
solution of just putting a consult or

00:11:24,130 --> 00:11:36,190
errors everywhere which next Dom

00:11:32,589 --> 00:11:39,399
manipulation is expensive at least in

00:11:36,190 --> 00:11:41,470
our case so we had to move a lot of

00:11:39,399 --> 00:11:43,959
content so that the browser could the

00:11:41,470 --> 00:11:46,209
user couldn't browse in browse the

00:11:43,959 --> 00:11:47,529
website within the app so we had to

00:11:46,209 --> 00:11:50,940
remove a bunch of products we had to

00:11:47,529 --> 00:11:55,060
remove a bunch of pop-ups this came with

00:11:50,940 --> 00:11:57,459
having to work with the Magento team who

00:11:55,060 --> 00:12:02,230
basically we would they would send us a

00:11:57,459 --> 00:12:04,899
message and what we wanted removed and

00:12:02,230 --> 00:12:06,779
we would be injecting JavaScript based

00:12:04,899 --> 00:12:10,300
on those messages that we received and

00:12:06,779 --> 00:12:12,250
then finally changes on the website so

00:12:10,300 --> 00:12:13,480
if any changes happen on the website and

00:12:12,250 --> 00:12:17,140
you get a bug

00:12:13,480 --> 00:12:27,520
you're gonna bug on the website and then

00:12:17,140 --> 00:12:31,540
the user is gonna be like so this is

00:12:27,520 --> 00:12:33,040
just an example of how much how many

00:12:31,540 --> 00:12:35,410
elements and how much of the actual

00:12:33,040 --> 00:12:39,269
check out we strip so on the left side

00:12:35,410 --> 00:12:41,800
is the mobile view of the web app so

00:12:39,269 --> 00:12:43,120
just believe below the go to check out

00:12:41,800 --> 00:12:45,310
the black go to lick check out you've

00:12:43,120 --> 00:12:48,040
got bunch of products you got some even

00:12:45,310 --> 00:12:48,850
got a little hey download our app you

00:12:48,040 --> 00:12:52,000
don't need that because you're already

00:12:48,850 --> 00:12:53,980
on the app and then on the right is

00:12:52,000 --> 00:12:56,470
actually the final version so that's

00:12:53,980 --> 00:12:58,720
what we what we ended up with

00:12:56,470 --> 00:13:01,330
so what we wanted to do originally was

00:12:58,720 --> 00:13:05,020
to remove all of those elements on load

00:13:01,330 --> 00:13:07,000
end which is great but the issue was it

00:13:05,020 --> 00:13:09,550
was well it was loading quickly which is

00:13:07,000 --> 00:13:11,050
great but you would see what you wanted

00:13:09,550 --> 00:13:13,420
to remove for a split second and then it

00:13:11,050 --> 00:13:15,070
would so you'd have everything and then

00:13:13,420 --> 00:13:16,900
it flashed with the finished product

00:13:15,070 --> 00:13:18,610
which is not good so we decided to move

00:13:16,900 --> 00:13:20,980
to doing that on the low style which is

00:13:18,610 --> 00:13:24,580
great we don't have any flashes that's

00:13:20,980 --> 00:13:26,380
perfect but it may meant that our load

00:13:24,580 --> 00:13:29,070
times were incredibly long compared to

00:13:26,380 --> 00:13:30,720
the rest of the app you'll slow it was

00:13:29,070 --> 00:13:33,880
good

00:13:30,720 --> 00:13:36,790
resulted in not good user experience so

00:13:33,880 --> 00:13:45,010
here no web use you can see it just runs

00:13:36,790 --> 00:13:47,080
like a normal app it's great actually

00:13:45,010 --> 00:13:49,030
this product display page actually that

00:13:47,080 --> 00:13:50,200
video is a web view and that didn't

00:13:49,030 --> 00:13:52,420
cause any headaches so that was great

00:13:50,200 --> 00:13:58,450
but yeah and then here

00:13:52,420 --> 00:14:01,690
this is the web view not a pleasant

00:13:58,450 --> 00:14:08,710
experience for the for the user unless

00:14:01,690 --> 00:14:11,830
you like this unless you like spin it so

00:14:08,710 --> 00:14:14,170
conclusion really I mean where these as

00:14:11,830 --> 00:14:17,160
mentioned they're great but user with

00:14:14,170 --> 00:14:19,860
portion so do you need to use cookies

00:14:17,160 --> 00:14:23,590
maybe don't use webview or at least

00:14:19,860 --> 00:14:25,780
proceed with caution and also maybe

00:14:23,590 --> 00:14:28,450
avoid heavy Dom manipulation and script

00:14:25,780 --> 00:14:30,940
injection maybe you could get maybe you

00:14:28,450 --> 00:14:32,560
could solve that by what they do is they

00:14:30,940 --> 00:14:35,680
create a page specifically for the

00:14:32,560 --> 00:14:38,050
webview and then use that for your for

00:14:35,680 --> 00:14:39,700
the webview so that would have been what

00:14:38,050 --> 00:14:41,130
we could have done but I think what

00:14:39,700 --> 00:14:44,670
we're gonna be doing in the future is

00:14:41,130 --> 00:14:47,710
having an API base checkout and

00:14:44,670 --> 00:14:52,589
scrapping the web views completely at

00:14:47,710 --> 00:14:52,589

YouTube URL: https://www.youtube.com/watch?v=3RVu4fqwHPo


