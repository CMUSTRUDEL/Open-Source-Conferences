Title: Amplify & React: Cloud Native Serverless - React Native - August 2019
Publication date: 2019-09-03
Playlist: React Native London
Description: 
	Presented by Ben Ellerby.

React-Native allowed for faster cross platform application development, allowing web technologies to be used and platform complexities abstracted away.

Serverless computing services, like AWS Lambda, have allowed backend development to be faster, cheaper and more scalable. Coming with Serverless architectures is a move to more cloud-native architectures, allowing developers to focus on writing code that delivers value.

AWS Amplify provides a foundation for cloud-powered web and mobile apps. Coupling React-Native with Cloud-Native Serverless stacks provides increased build speed, resilience and scale.

The talk will show hands on how Amplify can be used with React-Native, and discuss the advantages of a Serverless backend to a React-Native mobile application.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:06,540
so today I'd like to talk to you about

00:00:03,120 --> 00:00:07,919
amplify and react native so I also work

00:00:06,540 --> 00:00:09,750
at zero I'm a software architect here

00:00:07,919 --> 00:00:11,730
and I help clients generally building

00:00:09,750 --> 00:00:13,799
apps in reactor at native and

00:00:11,730 --> 00:00:15,389
traditionally with Django backends in a

00:00:13,799 --> 00:00:17,400
typical containerized environment so

00:00:15,389 --> 00:00:19,439
here we have the app I rebuilt for my

00:00:17,400 --> 00:00:21,060
calm it's a website in react a mobile

00:00:19,439 --> 00:00:22,980
app and react native and then a

00:00:21,060 --> 00:00:25,199
touchscreen interface awesome react surf

00:00:22,980 --> 00:00:26,310
to electron but more recently at theater

00:00:25,199 --> 00:00:28,830
with clients I've been working on

00:00:26,310 --> 00:00:30,269
service architectures and using surplice

00:00:28,830 --> 00:00:32,250
as the backend for reacting react native

00:00:30,269 --> 00:00:33,809
platforms and outside the client

00:00:32,250 --> 00:00:35,940
projects I've spent time researching in

00:00:33,809 --> 00:00:37,760
see a tow service best practices and

00:00:35,940 --> 00:00:40,020
trying to share them with the community

00:00:37,760 --> 00:00:42,120
service is a big part of how amplify can

00:00:40,020 --> 00:00:43,410
help you power up your er native app so

00:00:42,120 --> 00:00:44,700
I'm going to talk quickly about service

00:00:43,410 --> 00:00:45,930
I'm sure a lot of you have used lambda

00:00:44,700 --> 00:00:47,789
function potentially before if your full

00:00:45,930 --> 00:00:49,680
stack or I've heard of the concept if

00:00:47,789 --> 00:00:51,600
not I'll give the basics and then I'll

00:00:49,680 --> 00:00:55,649
jump into react native and how amplify

00:00:51,600 --> 00:00:57,030
can speed you up so service is the name

00:00:55,649 --> 00:00:58,230
of a library which can be used for

00:00:57,030 --> 00:01:00,000
service architectures which is a bit

00:00:58,230 --> 00:01:01,980
confusing but service is also in

00:01:00,000 --> 00:01:03,449
architectural movements in two folds

00:01:01,980 --> 00:01:05,129
first of all it lets developers send

00:01:03,449 --> 00:01:06,659
just application code to be run in the

00:01:05,129 --> 00:01:08,790
clouds without having to dealing with

00:01:06,659 --> 00:01:10,470
hosting complexities around networking

00:01:08,790 --> 00:01:12,990
you just send your function in Python

00:01:10,470 --> 00:01:15,420
Java scripts side scripts and it will

00:01:12,990 --> 00:01:17,520
work in the cloud nothing more complex

00:01:15,420 --> 00:01:18,960
than that also it's the idea of using

00:01:17,520 --> 00:01:21,049
third-party services when you can

00:01:18,960 --> 00:01:24,479
instead of building authentication

00:01:21,049 --> 00:01:26,280
payments PDF generation wherever it is

00:01:24,479 --> 00:01:28,439
trying to find services in your cloud

00:01:26,280 --> 00:01:29,820
provider or third parties to use not

00:01:28,439 --> 00:01:31,829
build and focus on writing the

00:01:29,820 --> 00:01:37,590
application code that is the business

00:01:31,829 --> 00:01:39,479
logic of your company here we go

00:01:37,590 --> 00:01:40,770
so why you service well as a huge cost

00:01:39,479 --> 00:01:42,930
reduction if you don't actually have

00:01:40,770 --> 00:01:44,729
servers even if they're you know ec2 is

00:01:42,930 --> 00:01:47,040
in the cloud auto scaling service is

00:01:44,729 --> 00:01:48,869
significantly cheaper there's little to

00:01:47,040 --> 00:01:50,640
no ops needed which massively reduces

00:01:48,869 --> 00:01:51,979
your team cost and also allows you to

00:01:50,640 --> 00:01:53,970
focus on writing application code

00:01:51,979 --> 00:01:56,189
developers can just focus on business

00:01:53,970 --> 00:01:57,299
value you having user authentication is

00:01:56,189 --> 00:01:57,899
not what differentiates you in the

00:01:57,299 --> 00:01:59,340
markets

00:01:57,899 --> 00:02:01,680
it's your application code that's

00:01:59,340 --> 00:02:03,479
specific and it's more scalable and

00:02:01,680 --> 00:02:05,399
finally once critical mass is reached

00:02:03,479 --> 00:02:07,170
with service architectures are more

00:02:05,399 --> 00:02:08,759
efficient using of resources with

00:02:07,170 --> 00:02:10,590
service being used so inefficiently the

00:02:08,759 --> 00:02:12,300
minutes will mean the energy consumption

00:02:10,590 --> 00:02:13,770
is much lower energy consumption of

00:02:12,300 --> 00:02:15,390
things like Netflix

00:02:13,770 --> 00:02:16,950
data heavy apps is becoming a growing

00:02:15,390 --> 00:02:18,420
problem and although there are green

00:02:16,950 --> 00:02:20,400
data centers reducing our data

00:02:18,420 --> 00:02:25,560
consumption so our energy consumption

00:02:20,400 --> 00:02:27,360
will be massively beneficial and it's

00:02:25,560 --> 00:02:29,010
not just lambda so a diverse lamda is

00:02:27,360 --> 00:02:31,200
one of the services that allows you to

00:02:29,010 --> 00:02:32,760
send application code to the cloud but

00:02:31,200 --> 00:02:35,460
there are services like s3 for storage

00:02:32,760 --> 00:02:37,350
DynamoDB is a database API gateway of

00:02:35,460 --> 00:02:39,240
doing your routing and linking into your

00:02:37,350 --> 00:02:41,070
authentication with Cognito this is

00:02:39,240 --> 00:02:43,950
native rÃ­os example similar services are

00:02:41,070 --> 00:02:45,900
in Azure and others sqs for your queuing

00:02:43,950 --> 00:02:47,490
system and the newest service of average

00:02:45,900 --> 00:02:49,710
to handle an event-driven architecture

00:02:47,490 --> 00:02:51,390
in the cloud on top of this you have

00:02:49,710 --> 00:02:53,610
third-party providers allow Greece to

00:02:51,390 --> 00:02:56,940
authentication like octa and other third

00:02:53,610 --> 00:02:58,410
parties in payments in other areas and

00:02:56,940 --> 00:02:59,640
it gives you great crown flexibility you

00:02:58,410 --> 00:03:02,100
can build a net net in their next

00:02:59,640 --> 00:03:03,090
Netflix with this but it's not simple oK

00:03:02,100 --> 00:03:04,890
we've abstracted away a lot of

00:03:03,090 --> 00:03:06,090
networking complexity but there's still

00:03:04,890 --> 00:03:08,940
lot of complexity of wiring all these

00:03:06,090 --> 00:03:09,510
parts together and that's where amplifi

00:03:08,940 --> 00:03:12,630
comes in

00:03:09,510 --> 00:03:14,490
if this clicker works that's where

00:03:12,630 --> 00:03:16,290
amplify comes in to provide a

00:03:14,490 --> 00:03:19,320
declarative abstraction on top of all

00:03:16,290 --> 00:03:21,510
those services amplify is an AWS

00:03:19,320 --> 00:03:22,890
javascript framework that allows you to

00:03:21,510 --> 00:03:25,110
orchestrate the clouds in a really

00:03:22,890 --> 00:03:27,000
abstract declarative way as even a

00:03:25,110 --> 00:03:28,709
front-end engineer you're able to use

00:03:27,000 --> 00:03:31,020
cloud services so about the box it's a

00:03:28,709 --> 00:03:32,700
bit similar to firebase but with AWS as

00:03:31,020 --> 00:03:34,200
the backend providing a more

00:03:32,700 --> 00:03:37,410
event-driven and more service style

00:03:34,200 --> 00:03:40,320
architecture so how do you get started

00:03:37,410 --> 00:03:41,910
well you simply yarn at and react native

00:03:40,320 --> 00:03:44,340
link or an expert the write native link

00:03:41,910 --> 00:03:46,200
parts already handled for you you then

00:03:44,340 --> 00:03:49,140
run amplify in it you'll have to have a

00:03:46,200 --> 00:03:51,720
cloud accounts with AWS jump through a

00:03:49,140 --> 00:03:53,430
few questions what even to the extent of

00:03:51,720 --> 00:03:55,980
what editor are using because it will do

00:03:53,430 --> 00:03:57,690
default code configurations for you jump

00:03:55,980 --> 00:03:58,980
through watch I've JavaScript framework

00:03:57,690 --> 00:04:00,750
you're using in this case where we are

00:03:58,980 --> 00:04:02,730
native obviously what you want your

00:04:00,750 --> 00:04:04,050
build scripts to be set up a profile

00:04:02,730 --> 00:04:05,400
which will do automatically that's the

00:04:04,050 --> 00:04:07,560
only time you'll hit the actual web

00:04:05,400 --> 00:04:12,300
console of AWS and everything else is

00:04:07,560 --> 00:04:13,440
done for you and then in your apt ojs

00:04:12,300 --> 00:04:15,300
it's three lines of code

00:04:13,440 --> 00:04:18,750
I'm sorry none of these are examples are

00:04:15,300 --> 00:04:20,549
in typescript so don't kill me and we

00:04:18,750 --> 00:04:22,049
run let's say we want to have user

00:04:20,549 --> 00:04:24,060
authentication so we're building an app

00:04:22,049 --> 00:04:26,490
that allows you to have I don't know the

00:04:24,060 --> 00:04:27,570
Airbnb of uber or whatever ridiculous

00:04:26,490 --> 00:04:30,390
startup we're doing

00:04:27,570 --> 00:04:31,560
all you do is amplify a door and they'll

00:04:30,390 --> 00:04:33,980
automatically give you user

00:04:31,560 --> 00:04:37,620
authentication password management's

00:04:33,980 --> 00:04:40,080
phone verification single sign-on across

00:04:37,620 --> 00:04:43,380
Facebook Google many different providers

00:04:40,080 --> 00:04:44,610
in just two lines their push is pushing

00:04:43,380 --> 00:04:46,740
that to a cloud to orchestrate your

00:04:44,610 --> 00:04:48,300
architecture and then in our app we

00:04:46,740 --> 00:04:50,280
import higher-order components from the

00:04:48,300 --> 00:04:53,940
library we wrap with authenticator of

00:04:50,280 --> 00:04:56,130
the app and with that we have user login

00:04:53,940 --> 00:04:58,530
with phone verification email or with

00:04:56,130 --> 00:05:00,210
the default setup now this is components

00:04:58,530 --> 00:05:02,340
coming from amplify you can use the

00:05:00,210 --> 00:05:03,960
underlying API important components in a

00:05:02,340 --> 00:05:06,210
different way and build your own custom

00:05:03,960 --> 00:05:08,100
login screen or if you're lazy like me

00:05:06,210 --> 00:05:09,960
you can change the look and feel by just

00:05:08,100 --> 00:05:11,760
changing color configurations and that

00:05:09,960 --> 00:05:14,580
will trickle through these screens so

00:05:11,760 --> 00:05:17,040
now users can login once we logged in we

00:05:14,580 --> 00:05:19,770
need an API so again it's amplify add

00:05:17,040 --> 00:05:21,690
API we can choose between graph QL and

00:05:19,770 --> 00:05:23,910
rest if we go for a graphical approach

00:05:21,690 --> 00:05:25,680
we can use Apps Sync which is a WSI

00:05:23,910 --> 00:05:28,320
services on top of any of its databases

00:05:25,680 --> 00:05:29,760
which provides a graphical interface so

00:05:28,320 --> 00:05:31,890
it automatically build you a graphical

00:05:29,760 --> 00:05:33,840
interface to your RDS database or your

00:05:31,890 --> 00:05:36,090
dynamo DB but here we're going to go for

00:05:33,840 --> 00:05:37,380
a rest approach now with rest it can

00:05:36,090 --> 00:05:40,830
automatically generate crud operations

00:05:37,380 --> 00:05:42,450
on your database so automatically we can

00:05:40,830 --> 00:05:44,070
get an sdk where we can put users

00:05:42,450 --> 00:05:46,200
contents and retrieve user's contents

00:05:44,070 --> 00:05:48,090
but also we can just run any custom

00:05:46,200 --> 00:05:51,090
lambda function any custom business

00:05:48,090 --> 00:05:53,550
object we want to run so if we run

00:05:51,090 --> 00:05:57,000
through and select dress we give it a

00:05:53,550 --> 00:05:59,220
sensible name and I can't scroll that's

00:05:57,000 --> 00:06:00,870
fun anyway we give it a sensible name

00:05:59,220 --> 00:06:02,430
and then we can even put that behind

00:06:00,870 --> 00:06:04,050
authentication it will say would you

00:06:02,430 --> 00:06:05,610
like this to be public accessible we say

00:06:04,050 --> 00:06:07,770
no and it will say who'd you want to

00:06:05,610 --> 00:06:08,730
access it well or thence gated users the

00:06:07,770 --> 00:06:10,410
users who are fence gates in the

00:06:08,730 --> 00:06:12,110
previous page and then week will

00:06:10,410 --> 00:06:14,430
automatically generate for us in

00:06:12,110 --> 00:06:17,370
JavaScript we chose as our runtime a

00:06:14,430 --> 00:06:19,650
back-end function called slash items and

00:06:17,370 --> 00:06:21,180
all we're doing here is returning the

00:06:19,650 --> 00:06:23,220
event we get in so it's not doing

00:06:21,180 --> 00:06:25,680
anything clever yet it's using the

00:06:23,220 --> 00:06:27,420
service Express library which is a way

00:06:25,680 --> 00:06:30,030
of doing routing inside

00:06:27,420 --> 00:06:31,200
API gateway is a way of doing routing as

00:06:30,030 --> 00:06:34,130
well they're not necessarily mutually

00:06:31,200 --> 00:06:36,450
exclusive we can then create our server

00:06:34,130 --> 00:06:38,580
exports our handler and now we have a

00:06:36,450 --> 00:06:39,990
function running in the cloud we've not

00:06:38,580 --> 00:06:40,800
mentioned operating systems we've not

00:06:39,990 --> 00:06:42,449
mentioned around

00:06:40,800 --> 00:06:44,039
not mention anything we just know this

00:06:42,449 --> 00:06:47,940
is going to be run in a scalable way and

00:06:44,039 --> 00:06:49,289
only as we use it again amplify push

00:06:47,940 --> 00:06:52,860
you'll start to type that quite a lot

00:06:49,289 --> 00:06:55,680
and how do we use the API well in our

00:06:52,860 --> 00:06:58,440
apps is we can import API from ADA

00:06:55,680 --> 00:07:00,150
whereÂ´s amplify we can I know not using

00:06:58,440 --> 00:07:03,479
hooks or anything clever here we can

00:07:00,150 --> 00:07:04,889
have states here and then here we do for

00:07:03,479 --> 00:07:06,960
my things got a bit weird sorry where

00:07:04,889 --> 00:07:08,370
the get sample function we're going to

00:07:06,960 --> 00:07:11,069
that slash items per if we talked about

00:07:08,370 --> 00:07:14,130
before API dot gets the name of the API

00:07:11,069 --> 00:07:15,569
and the path and then that's done it

00:07:14,130 --> 00:07:17,069
will only work if the users logged in so

00:07:15,569 --> 00:07:19,020
it's handling the JWT or the cookie

00:07:17,069 --> 00:07:20,460
authentication for you you don't have to

00:07:19,020 --> 00:07:22,680
do any of that and you can automatically

00:07:20,460 --> 00:07:26,340
pulling data from a database or running

00:07:22,680 --> 00:07:27,360
some job in the cloud one more example

00:07:26,340 --> 00:07:28,680
and then I'll just list the other

00:07:27,360 --> 00:07:31,050
function notices can give you its

00:07:28,680 --> 00:07:32,520
analytics so traditionally we've done

00:07:31,050 --> 00:07:33,830
things like firebase analytics and

00:07:32,520 --> 00:07:35,789
Google Analytics and react native

00:07:33,830 --> 00:07:37,080
pageviews don't work so well and react

00:07:35,789 --> 00:07:39,870
native but there are ways of making it a

00:07:37,080 --> 00:07:41,849
bit more constructive but in AWS they do

00:07:39,870 --> 00:07:44,840
have an analytic service so we can

00:07:41,849 --> 00:07:47,130
amplify add analytics and amplify push

00:07:44,840 --> 00:07:49,289
then inside of our code very similar to

00:07:47,130 --> 00:07:51,630
API we import analytics from a DMS

00:07:49,289 --> 00:07:53,009
amplify component did mount let's say we

00:07:51,630 --> 00:07:55,259
want to record every time a component

00:07:53,009 --> 00:07:57,270
mounts let's it's a page components will

00:07:55,259 --> 00:07:59,219
you do analytics to record the first

00:07:57,270 --> 00:08:01,650
event name and that's automatically

00:07:59,219 --> 00:08:03,479
pushed to the cloud we can then use a

00:08:01,650 --> 00:08:05,340
service which is quite new called AWS

00:08:03,479 --> 00:08:07,139
pinpoints it's sort of like Google

00:08:05,340 --> 00:08:09,360
Analytics which gives you daily active

00:08:07,139 --> 00:08:11,130
users magnetic users and many more

00:08:09,360 --> 00:08:13,139
statistics it isn't available in all

00:08:11,130 --> 00:08:14,729
regions yet of AWS but it's growing and

00:08:13,139 --> 00:08:16,949
this can obviously be quite an efficient

00:08:14,729 --> 00:08:18,330
way to get analytics out the box and you

00:08:16,949 --> 00:08:19,590
can move to other providers later on but

00:08:18,330 --> 00:08:23,849
it's a very fast way to have it from day

00:08:19,590 --> 00:08:25,380
one the other thing it can do is I don't

00:08:23,849 --> 00:08:26,669
know who's familiar with it but Kinesis

00:08:25,380 --> 00:08:28,620
is a way native we asked of doing

00:08:26,669 --> 00:08:30,419
event-driven architecture so you can

00:08:28,620 --> 00:08:32,579
have a stream of events let's say a

00:08:30,419 --> 00:08:34,110
stream of tweets or whatever it is here

00:08:32,579 --> 00:08:35,940
we can have a stream of user events that

00:08:34,110 --> 00:08:38,969
go and trigger other things maybe it's

00:08:35,940 --> 00:08:41,130
trickling into our user engagement team

00:08:38,969 --> 00:08:42,419
every time people's apps are crashing so

00:08:41,130 --> 00:08:45,420
you can get a real-time statistic on

00:08:42,419 --> 00:08:47,520
that what else can it do well we've gone

00:08:45,420 --> 00:08:49,010
through analytics I mentioned graph QL

00:08:47,520 --> 00:08:51,899
is a way we can access a database

00:08:49,010 --> 00:08:53,829
storage so s3 is obviously quite used

00:08:51,899 --> 00:08:54,999
for user uploads

00:08:53,829 --> 00:08:56,499
but it's a little bit complicated to

00:08:54,999 --> 00:08:57,970
configure making sure the user has

00:08:56,499 --> 00:08:59,769
access to the right bucket making sure

00:08:57,970 --> 00:09:01,329
it's not public quite a few people

00:08:59,769 --> 00:09:03,519
including some banks about issues having

00:09:01,329 --> 00:09:05,499
public teh turn s3 this is handling that

00:09:03,519 --> 00:09:07,209
for you so you just have a on top of the

00:09:05,499 --> 00:09:09,939
elf indicator be able to put something

00:09:07,209 --> 00:09:13,059
specific to a user push notifications

00:09:09,939 --> 00:09:14,259
across Android and iOS interactions so

00:09:13,059 --> 00:09:15,790
you can actually build chat box very

00:09:14,259 --> 00:09:17,470
quickly with a double uses machine

00:09:15,790 --> 00:09:19,079
learning systems and they even have a

00:09:17,470 --> 00:09:21,189
component library for those chat BOTS

00:09:19,079 --> 00:09:22,269
pub/sub architectures we have events

00:09:21,189 --> 00:09:23,829
going from the front center the back

00:09:22,269 --> 00:09:26,139
ends there's a lightweight

00:09:23,829 --> 00:09:28,209
internationalization service an advanced

00:09:26,139 --> 00:09:30,279
caching service for some more advanced

00:09:28,209 --> 00:09:32,110
application data some of the machine

00:09:30,279 --> 00:09:35,019
learning stuff so recognition which is

00:09:32,110 --> 00:09:37,029
an image classifier for images they can

00:09:35,019 --> 00:09:39,389
also detect objects in video streams

00:09:37,029 --> 00:09:42,189
Pali which is a text to voice

00:09:39,389 --> 00:09:44,259
translation automatically and natural

00:09:42,189 --> 00:09:46,600
language processing and finally there's

00:09:44,259 --> 00:09:48,670
XR which is augmented reality and

00:09:46,600 --> 00:09:50,110
virtual reality there Beth is forced in

00:09:48,670 --> 00:09:51,339
react at the minute with amplify and

00:09:50,110 --> 00:09:52,509
there aren't many examples of threat

00:09:51,339 --> 00:09:55,779
native but it's something that's coming

00:09:52,509 --> 00:09:58,029
in the future that was quite a lot of

00:09:55,779 --> 00:09:59,799
different services to go through but in

00:09:58,029 --> 00:10:00,999
conclusion service allows us to write

00:09:59,799 --> 00:10:03,009
more business value per line of code

00:10:00,999 --> 00:10:05,049
less line of codes takes less time to

00:10:03,009 --> 00:10:07,540
write and also you have less bugs a

00:10:05,049 --> 00:10:09,220
device amplify is a really nice layer of

00:10:07,540 --> 00:10:10,420
abstraction on top of that there are

00:10:09,220 --> 00:10:12,549
others and there are things you can do

00:10:10,420 --> 00:10:14,980
in firebase in a similar way and I think

00:10:12,549 --> 00:10:16,179
cloud fly now have functions you can run

00:10:14,980 --> 00:10:18,220
in the cloud so lots of different

00:10:16,179 --> 00:10:20,619
services are going into this area but

00:10:18,220 --> 00:10:23,139
combined with a service architecture and

00:10:20,619 --> 00:10:25,209
an abstract declarative interface to the

00:10:23,139 --> 00:10:27,399
cloud you can build complex web enabled

00:10:25,209 --> 00:10:30,220
applications very quickly in a few lines

00:10:27,399 --> 00:10:31,660
of code it's very fast if you want to

00:10:30,220 --> 00:10:33,339
have something really advanced maybe

00:10:31,660 --> 00:10:34,959
it's better to do something that is more

00:10:33,339 --> 00:10:36,459
custom so using the service library

00:10:34,959 --> 00:10:39,429
directly and having a little bit more

00:10:36,459 --> 00:10:40,869
time spent in working on the cloud

00:10:39,429 --> 00:10:41,439
interface and a little bit more of an

00:10:40,869 --> 00:10:43,660
understanding of the underlying

00:10:41,439 --> 00:10:45,129
networking but from the point of view of

00:10:43,660 --> 00:10:47,259
being able to build something to market

00:10:45,129 --> 00:10:50,410
really quickly it OS amplifies a really

00:10:47,259 --> 00:10:51,790
great start there as I mentioned at

00:10:50,410 --> 00:10:54,790
theater I'm researching more of our

00:10:51,790 --> 00:10:56,169
service architecture best practices I've

00:10:54,790 --> 00:10:57,549
recently launched a medium blog if

00:10:56,169 --> 00:10:58,720
anyone wants to check that out if

00:10:57,549 --> 00:11:00,220
they're interested in service and what's

00:10:58,720 --> 00:11:02,740
happening in that community feel free to

00:11:00,220 --> 00:11:04,360
have a look and yeah that was really it

00:11:02,740 --> 00:11:05,490
if anyone has any questions i'm on

00:11:04,360 --> 00:11:08,959
twitter and i'm also

00:11:05,490 --> 00:11:08,959
answer if you have them right now

00:11:11,170 --> 00:11:15,500

YouTube URL: https://www.youtube.com/watch?v=MHoAq6GFlAc


