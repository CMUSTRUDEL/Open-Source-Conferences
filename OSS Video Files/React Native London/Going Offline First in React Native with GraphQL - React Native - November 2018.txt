Title: Going Offline First in React Native with GraphQL - React Native - November 2018
Publication date: 2018-12-03
Playlist: React Native London
Description: 
	Presented by Kadi Kraman (@kadikraman)

We live in a world that is online 24/7. Even so, we are reasonably lenient on the web when we're not connected to the internet. However, for mobile apps, not working in flakey connectivity zones is borderline unacceptable. Users expect your app to work offline (though they don't phrase it like that). They really don't care that a network request has failed or is taking a long time. And thankfully, we developers can make it happen.
This talk is about how to get your React Native app working offline in a straightforward way using powerful GraphQL tools.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:07,140
hello everyone so I said I'm caddie and

00:00:03,680 --> 00:00:09,900
I'm gonna be talking about how you can

00:00:07,140 --> 00:00:14,610
use Groff girl to make offline capable

00:00:09,900 --> 00:00:19,320
of capable of react native apps yeah

00:00:14,610 --> 00:00:21,210
so hang on to your hats so I've actually

00:00:19,320 --> 00:00:24,869
never done it Who am I slide before I'm

00:00:21,210 --> 00:00:28,470
gonna child this so Who am I I'm caddie

00:00:24,869 --> 00:00:29,760
I've been a software engineer boy well

00:00:28,470 --> 00:00:30,929
I've been working as offer engineer for

00:00:29,760 --> 00:00:35,430
about six years now

00:00:30,929 --> 00:00:37,710
I started off doing maths but as I've

00:00:35,430 --> 00:00:39,960
learned all throw its leads to

00:00:37,710 --> 00:00:42,840
JavaScript so for the past four years

00:00:39,960 --> 00:00:45,629
I've been doing node and react and all

00:00:42,840 --> 00:00:47,850
that jazz and then for the past year and

00:00:45,629 --> 00:00:51,059
a half I've mostly been focusing on

00:00:47,850 --> 00:00:53,579
react native and when using react native

00:00:51,059 --> 00:00:56,460
in production well roasted first put in

00:00:53,579 --> 00:01:00,270
production and been using it in a couple

00:00:56,460 --> 00:01:02,820
of web a couple of applications I'm also

00:01:00,270 --> 00:01:04,949
pretty into open source both

00:01:02,820 --> 00:01:09,299
contributing mostly fixing the things

00:01:04,949 --> 00:01:11,340
that I want to use and maintaining some

00:01:09,299 --> 00:01:14,070
open source packages so if you ever used

00:01:11,340 --> 00:01:16,049
react native apples for your awaaz needs

00:01:14,070 --> 00:01:21,090
and had any problems then that's my

00:01:16,049 --> 00:01:24,090
fault and I'm sorry so today we're going

00:01:21,090 --> 00:01:27,659
to talk about going offline she's a

00:01:24,090 --> 00:01:31,049
scary thing so I and probably many of

00:01:27,659 --> 00:01:33,630
you as well I came from the web before

00:01:31,049 --> 00:01:35,759
going to react native so you know I

00:01:33,630 --> 00:01:39,329
build web applications I did react I did

00:01:35,759 --> 00:01:41,310
note and then you know someone said hey

00:01:39,329 --> 00:01:43,110
check out this react native thing it's

00:01:41,310 --> 00:01:46,770
like react but runs on your phone

00:01:43,110 --> 00:01:48,509
natively and it's cool and so yeah I was

00:01:46,770 --> 00:01:52,320
into that so started writing react

00:01:48,509 --> 00:01:54,149
native applications and by default I

00:01:52,320 --> 00:01:56,070
would write my react native applications

00:01:54,149 --> 00:01:58,200
very similar to how I write web

00:01:56,070 --> 00:02:00,600
applications but actually that's there's

00:01:58,200 --> 00:02:03,350
a little bit of difference so when it

00:02:00,600 --> 00:02:07,530
comes to web applications you kind of

00:02:03,350 --> 00:02:09,840
you're okay with the concept of being

00:02:07,530 --> 00:02:11,849
offline so if I'm not connected to the

00:02:09,840 --> 00:02:13,380
internet I'm pretty happy play the

00:02:11,849 --> 00:02:15,960
dinosaur game

00:02:13,380 --> 00:02:17,280
until I get internet however on your

00:02:15,960 --> 00:02:19,530
phone if you've got a phone application

00:02:17,280 --> 00:02:21,990
and you're offline you're kind of

00:02:19,530 --> 00:02:24,810
expecting some level of like offline

00:02:21,990 --> 00:02:28,890
capability like if you were like on a

00:02:24,810 --> 00:02:30,690
plane and you say mode on and you know

00:02:28,890 --> 00:02:31,950
you want us to Spotify but what if our

00:02:30,690 --> 00:02:33,360
guys are sorry you're flying you're

00:02:31,950 --> 00:02:34,860
pretty pissed off so you're kind of

00:02:33,360 --> 00:02:37,380
expected like it's different and even

00:02:34,860 --> 00:02:40,830
though we're kind of writing web code in

00:02:37,380 --> 00:02:47,450
react native we need to conform to the

00:02:40,830 --> 00:02:50,820
platform so a little bit about tooling

00:02:47,450 --> 00:02:53,250
to be completely honest I've given this

00:02:50,820 --> 00:02:55,290
talk before at a graph Gale conference

00:02:53,250 --> 00:02:57,720
in Finland so this is a little bit

00:02:55,290 --> 00:03:00,030
graphic you're heavy I've tried to

00:02:57,720 --> 00:03:02,930
lighten it and bring in some like rest

00:03:00,030 --> 00:03:05,220
analogies to make it more understandable

00:03:02,930 --> 00:03:07,830
but hopefully if you haven't used graph

00:03:05,220 --> 00:03:09,540
girl this is a little bit of hey how

00:03:07,830 --> 00:03:11,940
cool is to use graph girl with react

00:03:09,540 --> 00:03:16,020
native I was abusing react native

00:03:11,940 --> 00:03:19,730
obviously and Apollo to Sao Paulo is was

00:03:16,020 --> 00:03:24,239
the first and is so far the most popular

00:03:19,730 --> 00:03:26,670
graph Gale client for well everything

00:03:24,239 --> 00:03:29,459
they do know then react which is what

00:03:26,670 --> 00:03:32,040
we're using so the way we're going to do

00:03:29,459 --> 00:03:35,010
this is by example which is the best way

00:03:32,040 --> 00:03:38,370
to do in my opinion so I built this

00:03:35,010 --> 00:03:40,380
application and in react native it's

00:03:38,370 --> 00:03:43,800
it's not very useful but it's like a

00:03:40,380 --> 00:03:45,959
to-do list with fewer features so I can

00:03:43,800 --> 00:03:48,690
create a post and then it appears in

00:03:45,959 --> 00:03:51,120
this list and then I can delete some

00:03:48,690 --> 00:03:55,080
posts and they disappear from the list

00:03:51,120 --> 00:03:58,980
very exciting so let's look at what

00:03:55,080 --> 00:04:00,830
components make up the certification so

00:03:58,980 --> 00:04:03,300
obviously we've got this list of posts

00:04:00,830 --> 00:04:05,550
and what you see on the left is the

00:04:03,300 --> 00:04:07,320
graph your query that we would use to

00:04:05,550 --> 00:04:10,470
get fresh data so if you never use graph

00:04:07,320 --> 00:04:13,049
kill before here is the restful

00:04:10,470 --> 00:04:15,510
equivalents of that query so what I'm

00:04:13,049 --> 00:04:18,150
doing is I'm querying posts and I'm

00:04:15,510 --> 00:04:20,190
asking for an ID created arts and text

00:04:18,150 --> 00:04:23,039
so in graph kill the client asked for

00:04:20,190 --> 00:04:25,860
the data that you wants in rest

00:04:23,039 --> 00:04:26,850
obviously the equivalent would be you

00:04:25,860 --> 00:04:29,340
know you do

00:04:26,850 --> 00:04:35,160
API slash posts and then you get the

00:04:29,340 --> 00:04:38,610
list of posts right next we've got a

00:04:35,160 --> 00:04:41,850
mutation so mutation is changing data so

00:04:38,610 --> 00:04:43,470
if we post our post and then obviously

00:04:41,850 --> 00:04:46,920
we're adding it to the service so we've

00:04:43,470 --> 00:04:49,770
got a mutation called create post we're

00:04:46,920 --> 00:04:51,960
adding the text and then the content

00:04:49,770 --> 00:04:54,060
inside the ID text and crater that is

00:04:51,960 --> 00:04:57,210
the data that we want to get back from

00:04:54,060 --> 00:05:03,810
the server so if you look at the restful

00:04:57,210 --> 00:05:09,300
equivalent so this is equivalent doing a

00:05:03,810 --> 00:05:12,150
post to API slash posts and then in the

00:05:09,300 --> 00:05:14,910
method body we're adding the text and an

00:05:12,150 --> 00:05:16,610
example example result we get 201 with

00:05:14,910 --> 00:05:21,180
the post a sir

00:05:16,610 --> 00:05:23,940
and now the last bit that we have in

00:05:21,180 --> 00:05:27,060
application we have our delete post

00:05:23,940 --> 00:05:28,860
mutation that's very easy we're just

00:05:27,060 --> 00:05:31,320
passing the ID and then we get the idea

00:05:28,860 --> 00:05:34,080
of the lease of post back and then again

00:05:31,320 --> 00:05:38,730
in rest we just do a delete to the post

00:05:34,080 --> 00:05:40,890
ID cool so this is a wrap and now

00:05:38,730 --> 00:05:45,270
together we're going to make this work

00:05:40,890 --> 00:05:48,480
offline so first if we look at our list

00:05:45,270 --> 00:05:52,260
of posts right online we get a list of

00:05:48,480 --> 00:05:57,690
posts offline we get a twig era that's

00:05:52,260 --> 00:06:00,360
sad how come how can we how can we fix

00:05:57,690 --> 00:06:03,270
that well the easiest things to think

00:06:00,360 --> 00:06:05,990
about it is that if you ever had any

00:06:03,270 --> 00:06:08,820
data in your app before you can always

00:06:05,990 --> 00:06:11,040
show that data to the user before

00:06:08,820 --> 00:06:12,690
refreshing new data because users are

00:06:11,040 --> 00:06:15,180
like much happier having slightly

00:06:12,690 --> 00:06:18,860
outdated data then an error saying oh

00:06:15,180 --> 00:06:21,420
sorry but not quite not quite sure and

00:06:18,860 --> 00:06:23,100
so what what we want to do is you want

00:06:21,420 --> 00:06:26,730
to cache the data that we already got

00:06:23,100 --> 00:06:28,380
before we want to persist it so that if

00:06:26,730 --> 00:06:30,870
you close your application and you open

00:06:28,380 --> 00:06:32,910
it again it's still there and then we

00:06:30,870 --> 00:06:36,570
show that status to the user while while

00:06:32,910 --> 00:06:40,289
we're fetching user new stuff cool so

00:06:36,570 --> 00:06:43,720
this is a bit apollo specific

00:06:40,289 --> 00:06:46,000
but basically Apollo the way it sets up

00:06:43,720 --> 00:06:47,289
it's already has caching built-in so for

00:06:46,000 --> 00:06:49,060
example you would never use a pole and

00:06:47,289 --> 00:06:51,849
Redux together because Apollo handles

00:06:49,060 --> 00:06:55,360
all the data management for you but

00:06:51,849 --> 00:06:57,250
basically like so like these red bits

00:06:55,360 --> 00:07:01,060
bits that I've had to add you know to

00:06:57,250 --> 00:07:03,490
persist my data but otherwise we

00:07:01,060 --> 00:07:06,159
basically we have a have that all the

00:07:03,490 --> 00:07:08,050
queries that we've made in the cache so

00:07:06,159 --> 00:07:10,030
that next time if we do the same query

00:07:08,050 --> 00:07:12,340
with the same parameters for exam with a

00:07:10,030 --> 00:07:16,240
list of posts or like just an individual

00:07:12,340 --> 00:07:18,190
post what Apollo can do is fetch this

00:07:16,240 --> 00:07:19,720
query from the data first and then

00:07:18,190 --> 00:07:22,360
decide whether or not it wants to

00:07:19,720 --> 00:07:26,259
actually do a network request as well so

00:07:22,360 --> 00:07:28,240
then if we use this fetch policy cache

00:07:26,259 --> 00:07:30,430
and network then this is exactly what

00:07:28,240 --> 00:07:33,280
Apollo will do so by default all Apollo

00:07:30,430 --> 00:07:35,289
queries will actually read from the

00:07:33,280 --> 00:07:36,759
cache it's actually just cache burst so

00:07:35,289 --> 00:07:39,340
they will go like okay so there's this

00:07:36,759 --> 00:07:41,770
post query in the cache yes it is okay

00:07:39,340 --> 00:07:44,050
show that cache and network with this

00:07:41,770 --> 00:07:46,690
does is like if the query is in the

00:07:44,050 --> 00:07:48,430
cache you show it but then behind the

00:07:46,690 --> 00:07:50,889
scenes you do the request anyway and

00:07:48,430 --> 00:07:53,050
then update the cache in user Caesars so

00:07:50,889 --> 00:07:55,870
as a result even if something's changed

00:07:53,050 --> 00:07:58,389
the user will like you user will see the

00:07:55,870 --> 00:08:00,610
posts and then like if there's a new

00:07:58,389 --> 00:08:02,349
post and it arrives in a couple of

00:08:00,610 --> 00:08:03,909
seconds it will it will show up if

00:08:02,349 --> 00:08:06,009
you're offline the network request fails

00:08:03,909 --> 00:08:07,750
you just see the old posts which is a

00:08:06,009 --> 00:08:13,000
much nice user experience even though

00:08:07,750 --> 00:08:16,150
it's not the latest data cool so that's

00:08:13,000 --> 00:08:17,650
what I've just showed this is incredibly

00:08:16,150 --> 00:08:19,960
simple to do so if you're using a

00:08:17,650 --> 00:08:22,090
polygraph kill you should always do that

00:08:19,960 --> 00:08:24,819
because there's no pretty much no

00:08:22,090 --> 00:08:28,199
overhead and no reason not to you're

00:08:24,819 --> 00:08:30,340
just getting a slightly nicer experience

00:08:28,199 --> 00:08:34,089
this is a bit more complicated because

00:08:30,340 --> 00:08:36,820
mutations are well chains changing stuff

00:08:34,089 --> 00:08:39,839
is always hard so let's look at creating

00:08:36,820 --> 00:08:43,120
a new post so I'm adding with mutation

00:08:39,839 --> 00:08:45,160
and creating a post let's think about

00:08:43,120 --> 00:08:49,449
what the user sees when we were creating

00:08:45,160 --> 00:08:51,460
a post so basically from the users

00:08:49,449 --> 00:08:53,380
perspective all they see is that the

00:08:51,460 --> 00:08:56,470
gets added to the top of the screen on

00:08:53,380 --> 00:08:58,270
top of the other posts and how can we do

00:08:56,470 --> 00:09:02,649
that so the classic way to do that is

00:08:58,270 --> 00:09:03,970
obviously I'm I'm adding the post doing

00:09:02,649 --> 00:09:06,670
here to request for creating a new post

00:09:03,970 --> 00:09:08,709
and then I'm quickly pitching the post

00:09:06,670 --> 00:09:10,899
list as well which will now include my

00:09:08,709 --> 00:09:13,240
new post and now I can like refresh that

00:09:10,899 --> 00:09:15,279
and show that list of the user but what

00:09:13,240 --> 00:09:16,029
if we don't have internet then where we

00:09:15,279 --> 00:09:19,839
see can't do that

00:09:16,029 --> 00:09:21,610
so you might might guess that we are

00:09:19,839 --> 00:09:24,190
going for option two which is an

00:09:21,610 --> 00:09:25,990
optimistic update so optimistic update

00:09:24,190 --> 00:09:28,750
is not a new concept

00:09:25,990 --> 00:09:31,570
it's quite well known or basically what

00:09:28,750 --> 00:09:34,480
it means is it's used in the web as well

00:09:31,570 --> 00:09:36,580
so basically like in your UI you do like

00:09:34,480 --> 00:09:38,350
the user does an interaction which is

00:09:36,580 --> 00:09:40,720
async and you might take a couple of

00:09:38,350 --> 00:09:43,540
seconds but what we do is we kind of

00:09:40,720 --> 00:09:45,670
fake it in the UI so we display the what

00:09:43,540 --> 00:09:47,830
we expect to happen first and then kind

00:09:45,670 --> 00:09:49,420
of behind the scenes we do it and then

00:09:47,830 --> 00:09:50,950
we cross our fingers and if it doesn't

00:09:49,420 --> 00:09:53,170
go our way then we kind of quickly Road

00:09:50,950 --> 00:09:56,800
back and that's basically what we're

00:09:53,170 --> 00:09:59,260
gonna do so the way you do this in

00:09:56,800 --> 00:10:02,050
Apollo this is again like Rothko

00:09:59,260 --> 00:10:05,560
specific but basically we this is what

00:10:02,050 --> 00:10:07,750
we think that's the mutation will return

00:10:05,560 --> 00:10:10,900
so if we're creating a post where we're

00:10:07,750 --> 00:10:12,910
expecting some kind of and number for an

00:10:10,900 --> 00:10:16,300
ID so I'm using the time string because

00:10:12,910 --> 00:10:17,920
I don't want any conflicts we got the

00:10:16,300 --> 00:10:19,660
text and then we've got the crazy that

00:10:17,920 --> 00:10:25,630
date which is probably the current date

00:10:19,660 --> 00:10:27,130
and well this is this is Ray this is the

00:10:25,630 --> 00:10:28,779
code example for it you don't need to

00:10:27,130 --> 00:10:30,940
understand it but basically what we're

00:10:28,779 --> 00:10:32,860
doing here is we're getting the query

00:10:30,940 --> 00:10:34,600
from the cache in Apollo and then we're

00:10:32,860 --> 00:10:37,440
just like adding our new posts on top of

00:10:34,600 --> 00:10:41,260
it so and then saving it singular like

00:10:37,440 --> 00:10:44,320
job secured and for complete list this

00:10:41,260 --> 00:10:47,770
is the mutation in JSX so you can see so

00:10:44,320 --> 00:10:49,720
this is we're actually like adding the

00:10:47,770 --> 00:10:52,240
create the update function in the

00:10:49,720 --> 00:10:57,490
mutation and also the optimistic

00:10:52,240 --> 00:11:00,279
response cool so are we done all right

00:10:57,490 --> 00:11:02,200
let's have a look so on the right left

00:11:00,279 --> 00:11:04,360
on the Left I've got my little graph

00:11:02,200 --> 00:11:05,050
your server and on the right I've got

00:11:04,360 --> 00:11:08,320
this

00:11:05,050 --> 00:11:10,660
Bost so first so now I'm going to close

00:11:08,320 --> 00:11:18,700
the server to emulate being offline and

00:11:10,660 --> 00:11:21,339
I'm going to create a new post so if you

00:11:18,700 --> 00:11:23,740
noticed this post got added here and

00:11:21,339 --> 00:11:25,600
they disappeared and then we go on at

00:11:23,740 --> 00:11:29,200
work area so obviously this is not only

00:11:25,600 --> 00:11:31,529
one but what what happened so we added

00:11:29,200 --> 00:11:34,060
the post into the cache

00:11:31,529 --> 00:11:36,070
obviously the UI updated automatically

00:11:34,060 --> 00:11:39,970
added the post and then the network

00:11:36,070 --> 00:11:42,700
request obviously failed because of our

00:11:39,970 --> 00:11:44,019
so soft of your offline and Apollo goes

00:11:42,700 --> 00:11:45,760
like oh it didn't work

00:11:44,019 --> 00:11:47,350
our optimistic update was wrong let's

00:11:45,760 --> 00:11:49,540
revert so that was the correct thing to

00:11:47,350 --> 00:11:52,709
do from Apollo but how can we get around

00:11:49,540 --> 00:11:55,570
it if we're offline who actually offline

00:11:52,709 --> 00:11:59,860
so we need to handle what happens when

00:11:55,570 --> 00:12:01,630
Network request fails um so the way of

00:11:59,860 --> 00:12:04,120
follow is built Apollo 2 is built that

00:12:01,630 --> 00:12:06,040
you have a bunch of little links there's

00:12:04,120 --> 00:12:08,410
even like which are kind of like

00:12:06,040 --> 00:12:11,170
middlewares and one of the middlewares

00:12:08,410 --> 00:12:15,160
is a reach right middle way and with

00:12:11,170 --> 00:12:17,709
retry we can basically retry different

00:12:15,160 --> 00:12:20,350
network requests so you should always do

00:12:17,709 --> 00:12:22,300
this in an opt-in rather than an opt-out

00:12:20,350 --> 00:12:24,430
side away so you should because you

00:12:22,300 --> 00:12:27,100
can't do this for every single request

00:12:24,430 --> 00:12:30,070
there would be no point retrying like

00:12:27,100 --> 00:12:32,410
get requests for example and you can't

00:12:30,070 --> 00:12:35,500
read you shouldn't read retrying or

00:12:32,410 --> 00:12:38,620
mutations so are we doing here is we're

00:12:35,500 --> 00:12:42,250
saying ok so if a request has failed

00:12:38,620 --> 00:12:45,300
we're going to wait a second and then

00:12:42,250 --> 00:12:49,720
we're gonna we're going to try again

00:12:45,300 --> 00:12:52,600
every second I think and then this is

00:12:49,720 --> 00:12:54,670
the retry if condition and it's saying

00:12:52,600 --> 00:12:57,310
like if the message is network request

00:12:54,670 --> 00:12:59,140
failed and if our operation was create

00:12:57,310 --> 00:13:01,750
post which was the particular mutation

00:12:59,140 --> 00:13:04,600
that we've created there we go yes retry

00:13:01,750 --> 00:13:06,190
and if not for any other request it

00:13:04,600 --> 00:13:07,870
doesn't it doesn't reach right so it

00:13:06,190 --> 00:13:09,279
wouldn't try to retry the loading of the

00:13:07,870 --> 00:13:12,940
post or anything because that would be

00:13:09,279 --> 00:13:15,040
pointless and now cooking up that

00:13:12,940 --> 00:13:17,829
together you noticed I've upgraded to

00:13:15,040 --> 00:13:22,129
dark mode in between those two slides

00:13:17,829 --> 00:13:26,540
so we've got online post so I'm gonna

00:13:22,129 --> 00:13:32,990
delete now I'm closing my server going

00:13:26,540 --> 00:13:35,300
offline alright so this is a post that

00:13:32,990 --> 00:13:38,120
I've added now while the app is offline

00:13:35,300 --> 00:13:40,959
and now I'm restarting my server which

00:13:38,120 --> 00:13:40,959
it takes a little while

00:13:46,680 --> 00:13:52,230
oh and you'll see that it actually says

00:13:49,559 --> 00:13:54,449
create post with text so there was a

00:13:52,230 --> 00:13:56,519
little bit of delay but then when the

00:13:54,449 --> 00:13:58,740
application was able to get back to the

00:13:56,519 --> 00:14:01,079
network it goes like yeah Stuart and in

00:13:58,740 --> 00:14:05,369
the UI updated just updated as well with

00:14:01,079 --> 00:14:07,920
the new created update cool so that's it

00:14:05,369 --> 00:14:10,920
success were off flight well online even

00:14:07,920 --> 00:14:13,410
though we're really offline so what are

00:14:10,920 --> 00:14:14,970
their main takeaways from here so to

00:14:13,410 --> 00:14:17,610
make your app work offline

00:14:14,970 --> 00:14:21,899
you need to cache and persist your data

00:14:17,610 --> 00:14:25,410
so to make it work offline with like

00:14:21,899 --> 00:14:28,290
minimal effort to make it like almost

00:14:25,410 --> 00:14:31,050
seamless and it's always good to write

00:14:28,290 --> 00:14:35,040
optimistic or plays few mutations and

00:14:31,050 --> 00:14:36,569
the reason is not just so you could not

00:14:35,040 --> 00:14:38,100
not just you can make it make it work

00:14:36,569 --> 00:14:40,139
offline but also a better user

00:14:38,100 --> 00:14:41,850
experience for the user because they get

00:14:40,139 --> 00:14:43,439
the feedback first so even when you're

00:14:41,850 --> 00:14:46,410
doing a retro request it might take like

00:14:43,439 --> 00:14:49,980
two seconds like for the user it's it's

00:14:46,410 --> 00:14:52,470
quicker and finally retry applicable

00:14:49,980 --> 00:14:55,649
mutations the reason I say applicable is

00:14:52,470 --> 00:14:57,029
because this won't work for every

00:14:55,649 --> 00:15:00,540
mutation it won't work for all

00:14:57,029 --> 00:15:02,399
destructive mutations for example and so

00:15:00,540 --> 00:15:06,059
if you do this as you go you're

00:15:02,399 --> 00:15:09,749
essentially offline first so all of this

00:15:06,059 --> 00:15:11,670
code and this lights are on github so if

00:15:09,749 --> 00:15:13,740
you found this confusing and you maybe

00:15:11,670 --> 00:15:16,110
want to dig around in it feel free and

00:15:13,740 --> 00:15:20,539
yeah thank you for listening

00:15:16,110 --> 00:15:20,539

YouTube URL: https://www.youtube.com/watch?v=i--8UqAtFbY


