Title: It's not just a Type Dream. Attain Fearless Velocity with Type - React Native London - February 2019
Publication date: 2019-03-11
Playlist: React Native London
Description: 
	Robbie Heygate at Birdie

It's no secret that speed is key in start ups. At Birdie, we were chanting "More Features!" so regularly you could set your watch to it. With no real safety net however, we initially saw the impact this had on the confidence we had in releasing our product. There was a paralysis in our production with doubtful deployments at the heart of it. With Typescript however, we were able to ramp up the robustness of our product and release routinely! In this talk I will cover how we went about doing this.
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,810 --> 00:00:05,730
thank you my name is Robbie and today

00:00:04,080 --> 00:00:09,059
I'm going to be presenting you with this

00:00:05,730 --> 00:00:11,849
rather sensational title of it's not

00:00:09,059 --> 00:00:15,000
just a type dream attain fearless

00:00:11,849 --> 00:00:16,800
velocity with typescript please forgive

00:00:15,000 --> 00:00:20,189
any hyperbole than my have existed in

00:00:16,800 --> 00:00:21,900
that title so what am i hoping to really

00:00:20,189 --> 00:00:23,670
achieve by the end of this presentation

00:00:21,900 --> 00:00:26,550
well we're going to spin it up into four

00:00:23,670 --> 00:00:29,310
sections the first one is going to be

00:00:26,550 --> 00:00:31,679
more about what typescript is and how we

00:00:29,310 --> 00:00:33,420
can use it then we're going to talk

00:00:31,679 --> 00:00:37,290
about actually getting it to work on

00:00:33,420 --> 00:00:39,030
your react native project and then we'll

00:00:37,290 --> 00:00:40,730
get further into the integration about

00:00:39,030 --> 00:00:44,460
how you can actually start to convert

00:00:40,730 --> 00:00:46,350
your existing JavaScript into typescript

00:00:44,460 --> 00:00:47,940
and then we'll just end off with a

00:00:46,350 --> 00:00:50,460
review of some of the alternatives in

00:00:47,940 --> 00:00:52,020
the static typing world and why I

00:00:50,460 --> 00:00:54,530
personally believe that a typescript

00:00:52,020 --> 00:00:57,989
might be the best solution at the moment

00:00:54,530 --> 00:01:01,559
so just to start off a little bit about

00:00:57,989 --> 00:01:04,470
me I have been using react native for

00:01:01,559 --> 00:01:08,040
just about over a year prior to that

00:01:04,470 --> 00:01:10,500
I've been entirely JavaScript and I work

00:01:08,040 --> 00:01:13,049
at birdie which is an application

00:01:10,500 --> 00:01:16,909
building react native that looks to

00:01:13,049 --> 00:01:20,400
facilitate elderly care across the board

00:01:16,909 --> 00:01:22,229
so what was our problem at birdie and

00:01:20,400 --> 00:01:25,200
and how could typescript really help

00:01:22,229 --> 00:01:26,900
that well luckily enough we were a

00:01:25,200 --> 00:01:28,950
startup that was growing

00:01:26,900 --> 00:01:33,060
unfortunately that what came with that

00:01:28,950 --> 00:01:36,299
was new developers and also a larger

00:01:33,060 --> 00:01:39,509
codebase and with that came a slat a

00:01:36,299 --> 00:01:45,000
loss of visibility as things were being

00:01:39,509 --> 00:01:48,720
added to said codebase unfortunately to

00:01:45,000 --> 00:01:50,970
a company that we desperately decided

00:01:48,720 --> 00:01:53,820
that unit testing wasn't for us at the

00:01:50,970 --> 00:01:57,259
start it was very much a sweep it under

00:01:53,820 --> 00:01:59,939
the rug and we'll do it later philosophy

00:01:57,259 --> 00:02:01,740
and yet ironically we demanded

00:01:59,939 --> 00:02:03,780
continuous deployment so I don't really

00:02:01,740 --> 00:02:07,369
understand what we were thinking at that

00:02:03,780 --> 00:02:09,539
time and what we what it meant was that

00:02:07,369 --> 00:02:12,569
we were in this situation where we

00:02:09,539 --> 00:02:13,980
desperately wanted to continuously

00:02:12,569 --> 00:02:16,500
deploy little

00:02:13,980 --> 00:02:19,610
bits of code and for it to fit perfectly

00:02:16,500 --> 00:02:22,890
like that but what we actually got was a

00:02:19,610 --> 00:02:25,500
systematic shooting of ourselves in the

00:02:22,890 --> 00:02:28,769
foot on a regular basis oh but what I

00:02:25,500 --> 00:02:31,019
think we can describe her pretty silly

00:02:28,769 --> 00:02:32,760
mistakes these are type errors these are

00:02:31,019 --> 00:02:35,910
null point checks these are things that

00:02:32,760 --> 00:02:37,379
really should be avoided especially in

00:02:35,910 --> 00:02:40,920
modern development of everything we have

00:02:37,379 --> 00:02:42,750
available to us so what did we do well I

00:02:40,920 --> 00:02:45,840
suppose one of the solutions that people

00:02:42,750 --> 00:02:47,280
think about silly mistakes is well just

00:02:45,840 --> 00:02:49,370
be more cautious you know if it's a

00:02:47,280 --> 00:02:51,000
silly mistake stop being so silly

00:02:49,370 --> 00:02:53,940
unfortunately ignores the fact that

00:02:51,000 --> 00:02:55,859
you're human and you're going to make

00:02:53,940 --> 00:02:58,290
mistakes one of the reasons we use

00:02:55,859 --> 00:03:00,780
machines in the first place is so that

00:02:58,290 --> 00:03:03,780
we can not be as human when it comes to

00:03:00,780 --> 00:03:05,760
being erroneous the second thing really

00:03:03,780 --> 00:03:08,250
is create more unit tests it's an

00:03:05,760 --> 00:03:09,959
amazing idea you really should if you're

00:03:08,250 --> 00:03:12,299
styling products from someone that has

00:03:09,959 --> 00:03:14,160
gone through an experience of not using

00:03:12,299 --> 00:03:16,410
it too having used it I can tell you

00:03:14,160 --> 00:03:18,389
that you will much further be thankful

00:03:16,410 --> 00:03:19,230
to yourself if you just start using it

00:03:18,389 --> 00:03:21,450
from the beginning

00:03:19,230 --> 00:03:24,090
however it's not something that's going

00:03:21,450 --> 00:03:26,370
to happen overnight not just in the case

00:03:24,090 --> 00:03:28,859
of actually getting coverage for your

00:03:26,370 --> 00:03:31,709
code base with tests but actually the

00:03:28,859 --> 00:03:33,660
TDD mindset is something that takes a

00:03:31,709 --> 00:03:36,959
while to really teach to a development

00:03:33,660 --> 00:03:39,569
team can you start thinking about a test

00:03:36,959 --> 00:03:41,549
before you actually build a feature and

00:03:39,569 --> 00:03:43,530
do you know what to test for these are

00:03:41,549 --> 00:03:46,380
things that can take essentially in

00:03:43,530 --> 00:03:49,260
excess of months if if your team is

00:03:46,380 --> 00:03:51,450
large enough also like I said these

00:03:49,260 --> 00:03:52,980
mistakes that we had were quite silly

00:03:51,450 --> 00:03:55,470
mistakes things that could have been

00:03:52,980 --> 00:03:56,310
easily avoided I would say that if

00:03:55,470 --> 00:03:57,720
you're writing tests you don't

00:03:56,310 --> 00:04:00,060
essentially want to be testing for

00:03:57,720 --> 00:04:01,799
everything if you end up writing tests

00:04:00,060 --> 00:04:04,109
for every silly mistake you make they're

00:04:01,799 --> 00:04:06,150
going to end up with a huge cumbersome

00:04:04,109 --> 00:04:08,430
piece of code which will probably

00:04:06,150 --> 00:04:12,150
detract readers from what it's actually

00:04:08,430 --> 00:04:14,010
more importantly looking for so what can

00:04:12,150 --> 00:04:15,389
we do next well I guess we could find

00:04:14,010 --> 00:04:16,889
something that allows teams to more

00:04:15,389 --> 00:04:17,970
explicitly write code that prevents

00:04:16,889 --> 00:04:21,599
annotation errors while simultaneously

00:04:17,970 --> 00:04:22,289
exposing api's with typed interfaces but

00:04:21,599 --> 00:04:25,380
what could that be

00:04:22,289 --> 00:04:27,810
well obviously you read the title its

00:04:25,380 --> 00:04:29,280
typescript for anyone that doesn't know

00:04:27,810 --> 00:04:32,190
typescript is it's essentially a

00:04:29,280 --> 00:04:35,070
superset that compiles into JavaScript

00:04:32,190 --> 00:04:37,980
with the core objective being to apply

00:04:35,070 --> 00:04:40,620
the concept of static typing to what is

00:04:37,980 --> 00:04:42,090
a dynamically typed language static

00:04:40,620 --> 00:04:44,460
typing is basically the concept that

00:04:42,090 --> 00:04:47,340
when you write or define something in

00:04:44,460 --> 00:04:48,810
your code you have to define what it is

00:04:47,340 --> 00:04:50,610
at the time if you have a variable

00:04:48,810 --> 00:04:55,080
that's a number you say it's a number

00:04:50,610 --> 00:04:57,330
and like so so I'm just going to go for

00:04:55,080 --> 00:04:59,010
a few small examples of how typescript

00:04:57,330 --> 00:05:01,500
works this is actually from an article

00:04:59,010 --> 00:05:02,910
on the typescript documentation called

00:05:01,500 --> 00:05:05,669
learn typescript in five minutes

00:05:02,910 --> 00:05:08,580
hopefully I'll achieve it unless but

00:05:05,669 --> 00:05:09,180
this is a simple JavaScript function

00:05:08,580 --> 00:05:11,160
called greeter

00:05:09,180 --> 00:05:13,380
it takes an argument called person which

00:05:11,160 --> 00:05:15,600
is concatenated against a string called

00:05:13,380 --> 00:05:18,200
hello and in this case we instantiate it

00:05:15,600 --> 00:05:23,610
with a with a variable called Jane user

00:05:18,200 --> 00:05:25,610
and we render that to the Dom now we've

00:05:23,610 --> 00:05:27,840
converted it to typescript and

00:05:25,610 --> 00:05:30,060
essentially the important thing to

00:05:27,840 --> 00:05:32,100
notice here is that we have specifically

00:05:30,060 --> 00:05:35,400
defined that the argument needs to be a

00:05:32,100 --> 00:05:38,070
string on a very high level how is this

00:05:35,400 --> 00:05:40,350
helpful to us well essentially what if

00:05:38,070 --> 00:05:43,080
someone what if this code was sprit a

00:05:40,350 --> 00:05:45,270
class across you know your entire code

00:05:43,080 --> 00:05:46,560
base and someone didn't really

00:05:45,270 --> 00:05:48,419
understand what the function did and

00:05:46,560 --> 00:05:49,890
they passed it an array or they pass in

00:05:48,419 --> 00:05:51,060
an object these are things that

00:05:49,890 --> 00:05:53,250
obviously would have erroneous

00:05:51,060 --> 00:05:56,970
circumstances and consequences for your

00:05:53,250 --> 00:05:59,130
product very simply with about five

00:05:56,970 --> 00:06:01,680
letters we've been able to prevent this

00:05:59,130 --> 00:06:03,330
from happening by quite simply defining

00:06:01,680 --> 00:06:04,500
that you must put a string in there and

00:06:03,330 --> 00:06:06,960
what does that look like to the

00:06:04,500 --> 00:06:10,260
developer well you can quite simply take

00:06:06,960 --> 00:06:12,479
out you know you can replace what it is

00:06:10,260 --> 00:06:14,010
and typescript itself will for an error

00:06:12,479 --> 00:06:16,530
so here you see I'm replacing Jain user

00:06:14,010 --> 00:06:19,380
with a number and types it saying nah

00:06:16,530 --> 00:06:21,450
it's got to be a string let's go a

00:06:19,380 --> 00:06:23,460
little bit deeper so now people who are

00:06:21,450 --> 00:06:27,300
used to using statically typed languages

00:06:23,460 --> 00:06:29,669
so Java or C sharp will probably be used

00:06:27,300 --> 00:06:32,370
to this structure here at the top an

00:06:29,669 --> 00:06:34,340
interface for the sake of simplicity I'm

00:06:32,370 --> 00:06:36,930
just going to define an interface as a

00:06:34,340 --> 00:06:39,630
structure that is used for mapping types

00:06:36,930 --> 00:06:41,440
to object properties and that's exactly

00:06:39,630 --> 00:06:44,950
what it's doing here really in

00:06:41,440 --> 00:06:48,010
example we've replaced our string with a

00:06:44,950 --> 00:06:50,500
person and we say hello is concatenated

00:06:48,010 --> 00:06:53,890
next to a first name an empty space and

00:06:50,500 --> 00:06:57,670
a last name and we provide it the same

00:06:53,890 --> 00:06:59,770
as so and in the IDE it looks pretty

00:06:57,670 --> 00:07:02,440
much the same you remove last name from

00:06:59,770 --> 00:07:04,480
user type script kicks up a fuss and it

00:07:02,440 --> 00:07:06,580
says I don't want just an object of a

00:07:04,480 --> 00:07:10,480
first name I want something that matches

00:07:06,580 --> 00:07:12,970
person last but not least the class

00:07:10,480 --> 00:07:15,160
obviously this is a react native talk so

00:07:12,970 --> 00:07:17,770
we need to discuss classes as they are

00:07:15,160 --> 00:07:21,190
one of the simplest building blocks of

00:07:17,770 --> 00:07:22,900
components in this case we have kept our

00:07:21,190 --> 00:07:26,320
interface person and we're still

00:07:22,900 --> 00:07:28,000
checking our argument against it the

00:07:26,320 --> 00:07:30,970
only difference here is that user is now

00:07:28,000 --> 00:07:33,760
an instantiation of a class that is

00:07:30,970 --> 00:07:36,640
created from a first name middle initial

00:07:33,760 --> 00:07:38,620
and last name and when we pass it to

00:07:36,640 --> 00:07:39,940
this function are the important thing to

00:07:38,620 --> 00:07:43,060
notice here is that it doesn't actually

00:07:39,940 --> 00:07:45,820
mind that this class has an extra

00:07:43,060 --> 00:07:48,730
property middle initial what it minds is

00:07:45,820 --> 00:07:52,150
that it has what the interface requires

00:07:48,730 --> 00:07:55,390
a first name and a last name and here

00:07:52,150 --> 00:07:58,360
you see we basically remove last name

00:07:55,390 --> 00:08:02,110
and both the instantiation and the

00:07:58,360 --> 00:08:05,620
function themselves decide to throw an

00:08:02,110 --> 00:08:09,070
error so hopefully you've seen some

00:08:05,620 --> 00:08:11,080
value in that but just to do to describe

00:08:09,070 --> 00:08:12,790
it in some further detail

00:08:11,080 --> 00:08:14,410
how did this really help us at birdie

00:08:12,790 --> 00:08:15,850
well if you remember what I was saying

00:08:14,410 --> 00:08:17,470
the main problem was is that we were

00:08:15,850 --> 00:08:19,960
trying to continuously deploy but we

00:08:17,470 --> 00:08:23,860
weren't realistically checking for small

00:08:19,960 --> 00:08:26,850
errors no more than just having a human

00:08:23,860 --> 00:08:29,919
observer in code review and what

00:08:26,850 --> 00:08:32,380
hopefully the last few slides have shown

00:08:29,919 --> 00:08:36,190
to you is that you have this ability to

00:08:32,380 --> 00:08:38,140
detect errors exceptionally fast and

00:08:36,190 --> 00:08:40,300
where does that add value to you or your

00:08:38,140 --> 00:08:42,339
business well if you take the example

00:08:40,300 --> 00:08:44,140
that we just showed you have someone

00:08:42,339 --> 00:08:47,710
that perhaps provided the wrong argument

00:08:44,140 --> 00:08:49,990
to a class or or a function now they've

00:08:47,710 --> 00:08:52,480
basically done that typescript is thrown

00:08:49,990 --> 00:08:54,580
an error and within about 30 seconds or

00:08:52,480 --> 00:08:55,649
so they've kind of been identified it

00:08:54,580 --> 00:08:57,970
and they've remedy

00:08:55,649 --> 00:08:59,560
what's the alternative well the

00:08:57,970 --> 00:09:03,580
worst-case scenario which has happened

00:08:59,560 --> 00:09:05,230
and I have seen it happen is it passes

00:09:03,580 --> 00:09:07,420
code review you deploy it it passes code

00:09:05,230 --> 00:09:09,640
review it gets deployed and eventually

00:09:07,420 --> 00:09:12,399
down the line someone realizes what it

00:09:09,640 --> 00:09:15,760
is and then it gets it gets highlighted

00:09:12,399 --> 00:09:17,860
to you and then you basically have to

00:09:15,760 --> 00:09:20,709
make the changes and you've wasted the

00:09:17,860 --> 00:09:23,770
time from all it took to deploy it all

00:09:20,709 --> 00:09:25,959
the way up until how long it took you to

00:09:23,770 --> 00:09:27,399
remedy that and if you're a starter if

00:09:25,959 --> 00:09:30,790
you understand that time is a necessity

00:09:27,399 --> 00:09:33,010
and you don't really have the luxury of

00:09:30,790 --> 00:09:36,850
making these silly mistakes on a day to

00:09:33,010 --> 00:09:38,470
day basis to sort of a company that the

00:09:36,850 --> 00:09:40,000
real park that I love about typescript

00:09:38,470 --> 00:09:43,089
as well is that you were essentially

00:09:40,000 --> 00:09:44,740
writing or rather exposing an API for

00:09:43,089 --> 00:09:46,660
your code as you write it you're saying

00:09:44,740 --> 00:09:48,310
this is what this is this is what it

00:09:46,660 --> 00:09:50,080
takes this is what it returns and it

00:09:48,310 --> 00:09:52,300
means that anyone that knew especially

00:09:50,080 --> 00:09:55,330
if you're part of a growing company has

00:09:52,300 --> 00:09:57,490
the ability to understand and a must

00:09:55,330 --> 00:10:01,170
much more accelerated rate what is

00:09:57,490 --> 00:10:03,610
actually happening in your codebase so

00:10:01,170 --> 00:10:05,620
let's move on to the installation side

00:10:03,610 --> 00:10:06,970
the first thing you really need to think

00:10:05,620 --> 00:10:08,620
about when you're installing typescript

00:10:06,970 --> 00:10:11,110
to be honest is what tools are going to

00:10:08,620 --> 00:10:13,540
use and mainly what IDE you're going to

00:10:11,110 --> 00:10:15,430
use not all of them are equal and

00:10:13,540 --> 00:10:18,630
especially in the scenario of typescript

00:10:15,430 --> 00:10:21,880
some are more useful to you than others

00:10:18,630 --> 00:10:23,920
so obviously I've I myself have been

00:10:21,880 --> 00:10:26,610
using webstorm for the last three months

00:10:23,920 --> 00:10:28,839
I think it's an exceptional IDE

00:10:26,610 --> 00:10:31,690
obviously typescript talk so it comes

00:10:28,839 --> 00:10:34,050
with native type scripts support it has

00:10:31,690 --> 00:10:36,209
some of the most fantastical

00:10:34,050 --> 00:10:38,529
auto-completion and refactoring

00:10:36,209 --> 00:10:39,940
available you can change the name of

00:10:38,529 --> 00:10:42,010
something in a file and you don't have

00:10:39,940 --> 00:10:43,959
to worry about your imports and your

00:10:42,010 --> 00:10:45,850
references and other files it saves you

00:10:43,959 --> 00:10:46,570
tons of time by basically dealing with

00:10:45,850 --> 00:10:48,430
it for you

00:10:46,570 --> 00:10:51,190
unfortunately there's no such thing as a

00:10:48,430 --> 00:10:54,279
free lunch and some of this

00:10:51,190 --> 00:10:57,190
functionality will cost you a penny or

00:10:54,279 --> 00:10:58,660
two but I'm sure if you smile hard

00:10:57,190 --> 00:11:00,940
enough you'll see TOS you can perhaps

00:10:58,660 --> 00:11:03,430
express the value behind a tool like

00:11:00,940 --> 00:11:05,410
this then you've got Adam Adam is kind

00:11:03,430 --> 00:11:06,910
of what I used before not really an IDE

00:11:05,410 --> 00:11:11,500
but it has released its own

00:11:06,910 --> 00:11:12,759
i de plugin very extensible and because

00:11:11,500 --> 00:11:15,130
of that doesn't actually come with

00:11:12,759 --> 00:11:17,699
typescript natively but you yourself can

00:11:15,130 --> 00:11:19,600
make it a tool that works for typescript

00:11:17,699 --> 00:11:20,529
unfortunately the performance is

00:11:19,600 --> 00:11:22,509
actually terrible I don't know if

00:11:20,529 --> 00:11:24,279
anyone's used it if you have more than

00:11:22,509 --> 00:11:25,660
about ten plugins it sounds like your

00:11:24,279 --> 00:11:29,199
laptop's starting its own space program

00:11:25,660 --> 00:11:31,360
so you got to be a bit careful with that

00:11:29,199 --> 00:11:33,850
one visual code I think this is going to

00:11:31,360 --> 00:11:36,009
be the big winner of any one made by

00:11:33,850 --> 00:11:38,709
type sorry native types of support

00:11:36,009 --> 00:11:40,149
obviously that would be a bit awkward if

00:11:38,709 --> 00:11:43,839
it didn't sing has been made by

00:11:40,149 --> 00:11:45,279
Microsoft it's fast and lightweight and

00:11:43,839 --> 00:11:49,420
the auto completion in code check whilst

00:11:45,279 --> 00:11:53,889
not good as good as as webstorm is is

00:11:49,420 --> 00:11:55,810
still pretty pretty damn good so you're

00:11:53,889 --> 00:11:57,850
probably going to have to forgive some

00:11:55,810 --> 00:12:00,130
of the hyperbolic imagery that I've

00:11:57,850 --> 00:12:01,660
decided to use here it is not exactly

00:12:00,130 --> 00:12:03,069
that I caught to me between heaven and

00:12:01,660 --> 00:12:06,069
hell when we're talking about installing

00:12:03,069 --> 00:12:07,690
typescript on react native but I wanted

00:12:06,069 --> 00:12:09,839
to get a point across quickly so please

00:12:07,690 --> 00:12:11,829
forgive me for that

00:12:09,839 --> 00:12:14,800
basically the version that you decide to

00:12:11,829 --> 00:12:16,899
install it on will make a difference for

00:12:14,800 --> 00:12:20,439
the sake of this talk I am going to go

00:12:16,899 --> 00:12:22,689
down the hell path mainly because it

00:12:20,439 --> 00:12:25,449
covers pretty much all of the steps of

00:12:22,689 --> 00:12:27,819
the good path just with a few added ones

00:12:25,449 --> 00:12:31,230
and so essentially by doing that I'm

00:12:27,819 --> 00:12:35,019
covering covering the good path as well

00:12:31,230 --> 00:12:39,519
so why is it more difficult on react

00:12:35,019 --> 00:12:41,589
native 0.56 or lower well essentially

00:12:39,519 --> 00:12:44,079
react native obviously depends on the

00:12:41,589 --> 00:12:46,149
metro bundler to take all of your

00:12:44,079 --> 00:12:46,660
javascript files and bundle them all up

00:12:46,149 --> 00:12:49,899
together

00:12:46,660 --> 00:12:53,829
now unfortunately Metro is incapable of

00:12:49,899 --> 00:12:56,230
understanding what typescript files are

00:12:53,829 --> 00:12:59,380
or more specifically how you can compile

00:12:56,230 --> 00:13:02,829
them into JavaScript to be bundled and

00:12:59,380 --> 00:13:04,269
so in this case what we need is a module

00:13:02,829 --> 00:13:06,639
called react native typescript

00:13:04,269 --> 00:13:09,600
transformer whose job it is to basically

00:13:06,639 --> 00:13:12,490
do that for metro and allow it to

00:13:09,600 --> 00:13:16,170
continuously bundle typescript files in

00:13:12,490 --> 00:13:19,029
your codebase why don't we need that in

00:13:16,170 --> 00:13:20,769
0.57 or Hyatt well some people may or

00:13:19,029 --> 00:13:24,449
may not know this actually this function

00:13:20,769 --> 00:13:27,579
he now comes with Bayville seven and so

00:13:24,449 --> 00:13:30,550
it basically handles the compilation of

00:13:27,579 --> 00:13:34,929
typescript as in itself is performing

00:13:30,550 --> 00:13:36,339
this job however it's a bit of a false

00:13:34,929 --> 00:13:38,829
flag because whilst it does actually

00:13:36,339 --> 00:13:40,660
compile the JavaScript it's it's

00:13:38,829 --> 00:13:42,970
actually not doing any type checks on

00:13:40,660 --> 00:13:45,100
your files so it's essentially just

00:13:42,970 --> 00:13:47,079
taking all of the hard work that you may

00:13:45,100 --> 00:13:49,149
have done with your type skippity saying

00:13:47,079 --> 00:13:52,119
I don't care I'm just going to turn into

00:13:49,149 --> 00:13:54,850
JavaScript and see what happens so in

00:13:52,119 --> 00:13:56,499
this case you're either a once you

00:13:54,850 --> 00:14:00,459
continue to use the typescript compiler

00:13:56,499 --> 00:14:02,410
or be have enough confidence in your IDs

00:14:00,459 --> 00:14:05,920
linter to basically hope that you'll

00:14:02,410 --> 00:14:07,809
catch everything at that stage so let's

00:14:05,920 --> 00:14:09,399
go through the installation steps first

00:14:07,809 --> 00:14:10,749
one like I mentioned is you're going to

00:14:09,399 --> 00:14:12,549
need this react native type script

00:14:10,749 --> 00:14:14,199
transformer so that you can effectively

00:14:12,549 --> 00:14:16,720
bundle your typescript files together

00:14:14,199 --> 00:14:18,939
pretty simple I'm sure most people here

00:14:16,720 --> 00:14:22,119
know how to install the dependency you

00:14:18,939 --> 00:14:25,689
can either use yarn or or NPM then

00:14:22,119 --> 00:14:28,949
you've got step two which is we need to

00:14:25,689 --> 00:14:31,209
configure react native with a custom

00:14:28,949 --> 00:14:33,249
configuration to say look I know you're

00:14:31,209 --> 00:14:34,990
doing a great job bundling all those

00:14:33,249 --> 00:14:36,579
javascript files but can you actually

00:14:34,990 --> 00:14:39,850
take notice of some of these typescript

00:14:36,579 --> 00:14:41,920
files and run typescript transform on

00:14:39,850 --> 00:14:43,959
them and that's pretty simple you just

00:14:41,920 --> 00:14:46,869
create a file which is a react native

00:14:43,959 --> 00:14:49,990
CLI config file and you just give it

00:14:46,869 --> 00:14:52,689
these two properties so if we start at

00:14:49,990 --> 00:14:54,220
the bottom one we see get these files

00:14:52,689 --> 00:14:55,839
these sort of files these typescript

00:14:54,220 --> 00:14:57,819
files to your TSO type script in your

00:14:55,839 --> 00:15:00,759
tsx when you actually want to render

00:14:57,819 --> 00:15:02,559
some things as well and then we're just

00:15:00,759 --> 00:15:05,829
saying you take those kind of files and

00:15:02,559 --> 00:15:08,019
you run this module over them step 3

00:15:05,829 --> 00:15:10,360
so you've effectively got react native

00:15:08,019 --> 00:15:11,649
to start playing ball with typescript

00:15:10,360 --> 00:15:13,929
but now you actually need to make

00:15:11,649 --> 00:15:16,989
typescript really work the way you want

00:15:13,929 --> 00:15:19,839
it to on your project and the way you do

00:15:16,989 --> 00:15:22,209
that is with a file called TS config now

00:15:19,839 --> 00:15:24,339
there are a lot of different

00:15:22,209 --> 00:15:26,679
configurations that you can do for this

00:15:24,339 --> 00:15:28,559
file so I won't go into all of them or

00:15:26,679 --> 00:15:31,699
else we'll be here till tomorrow but

00:15:28,559 --> 00:15:33,739
there are a few that I think

00:15:31,699 --> 00:15:35,839
perhaps give you a bit of a flavor about

00:15:33,739 --> 00:15:38,959
what is capable of and what you can do

00:15:35,839 --> 00:15:41,209
with it so the first is the target this

00:15:38,959 --> 00:15:43,369
is basically you saying typescript

00:15:41,209 --> 00:15:46,309
I would like my typescript files to be

00:15:43,369 --> 00:15:48,980
compiled into this the second one is the

00:15:46,309 --> 00:15:51,199
strict null checks and this one and the

00:15:48,980 --> 00:15:52,639
next one are two very important rules

00:15:51,199 --> 00:15:54,049
that I think you should involve in your

00:15:52,639 --> 00:15:57,139
typescript projects

00:15:54,049 --> 00:15:58,249
the first one is stricken all checks

00:15:57,139 --> 00:16:00,470
which basically make sure that you

00:15:58,249 --> 00:16:03,290
cannot access the property of anything

00:16:00,470 --> 00:16:05,540
that has been defined as null at one

00:16:03,290 --> 00:16:07,309
point another you may be thinking that

00:16:05,540 --> 00:16:09,230
sounds really annoying because what if

00:16:07,309 --> 00:16:11,899
it's not null anymore all it's really

00:16:09,230 --> 00:16:14,029
saying is you have to explicitly define

00:16:11,899 --> 00:16:16,519
in that context that it is no longer

00:16:14,029 --> 00:16:18,889
null for example you provide an if

00:16:16,519 --> 00:16:21,739
statement that just says you know if X

00:16:18,889 --> 00:16:23,569
is not null and then within that type of

00:16:21,739 --> 00:16:25,129
script we'll understand that the context

00:16:23,569 --> 00:16:27,579
is that it's no longer null and you can

00:16:25,129 --> 00:16:30,410
start to access properties inside of it

00:16:27,579 --> 00:16:32,329
no implicit any possibly the most

00:16:30,410 --> 00:16:35,089
important rule that I think you should

00:16:32,329 --> 00:16:38,389
take notice of when you start a react

00:16:35,089 --> 00:16:41,119
native sorry a typescript project this

00:16:38,389 --> 00:16:44,629
basically says that everything needs to

00:16:41,119 --> 00:16:45,919
be typed for one basically everything

00:16:44,629 --> 00:16:49,399
needs to be typed to one extent or

00:16:45,919 --> 00:16:52,939
another and what essentially that forces

00:16:49,399 --> 00:16:56,389
you to do is you have to fully embrace a

00:16:52,939 --> 00:16:58,759
type script in your code base for

00:16:56,389 --> 00:17:01,819
example you have a full JavaScript

00:16:58,759 --> 00:17:03,739
project and the moment that you start to

00:17:01,819 --> 00:17:05,959
create typescript files from that and

00:17:03,739 --> 00:17:08,269
this rule is true it's going just going

00:17:05,959 --> 00:17:10,370
to flare up a bunch of red but at that

00:17:08,269 --> 00:17:12,260
point at least it will give you the

00:17:10,370 --> 00:17:14,089
initiative to actually get started in

00:17:12,260 --> 00:17:16,250
this transformation process the only

00:17:14,089 --> 00:17:18,139
problem is if you don't turn this to

00:17:16,250 --> 00:17:19,880
true and you leave it as false

00:17:18,139 --> 00:17:23,120
you can basically turn all your faster

00:17:19,880 --> 00:17:25,069
typescript and nothing's gonna be sort

00:17:23,120 --> 00:17:27,169
of kicked up as an error because you're

00:17:25,069 --> 00:17:31,850
implicitly saying that everything can be

00:17:27,169 --> 00:17:33,559
and any and more or less I think it kind

00:17:31,850 --> 00:17:34,970
of encourages a bit of laziness in the

00:17:33,559 --> 00:17:38,440
whole process because you can kind of

00:17:34,970 --> 00:17:41,840
get away with with doing nothing so

00:17:38,440 --> 00:17:44,450
you've now got typescript working for

00:17:41,840 --> 00:17:45,350
react native and you've told typescript

00:17:44,450 --> 00:17:47,539
how you want to

00:17:45,350 --> 00:17:49,340
it to work on your project and now you

00:17:47,539 --> 00:17:51,530
just need to start the packager with

00:17:49,340 --> 00:17:54,140
this new configuration which you would

00:17:51,530 --> 00:17:55,250
do by running react native start and

00:17:54,140 --> 00:17:57,770
just doing the path to your

00:17:55,250 --> 00:18:01,700
configuration file after the config

00:17:57,770 --> 00:18:04,250
option last but not least so everything

00:18:01,700 --> 00:18:05,780
is now working for you on your project

00:18:04,250 --> 00:18:07,190
unfortunately this being the world of

00:18:05,780 --> 00:18:10,299
JavaScript you probably have a notion of

00:18:07,190 --> 00:18:13,160
dependencies that need types as well and

00:18:10,299 --> 00:18:17,380
luckily it's not that difficult

00:18:13,160 --> 00:18:20,419
typescript is a pretty well embraced

00:18:17,380 --> 00:18:23,270
library and everyone basically a lot of

00:18:20,419 --> 00:18:25,400
the people use it and therefore it's

00:18:23,270 --> 00:18:28,610
quite easy to make sure that you can get

00:18:25,400 --> 00:18:31,179
types for all of your dependencies with

00:18:28,610 --> 00:18:34,100
relatively minimal effort for yourself

00:18:31,179 --> 00:18:35,750
so in this case as you can see the

00:18:34,100 --> 00:18:37,940
syntax for installing types to your

00:18:35,750 --> 00:18:39,590
projects is pretty simple you just do it

00:18:37,940 --> 00:18:42,049
like you would do anything else but you

00:18:39,590 --> 00:18:44,320
prefix the name of your library with at

00:18:42,049 --> 00:18:46,760
types

00:18:44,320 --> 00:18:48,740
/and once you've done that it's

00:18:46,760 --> 00:18:50,210
relatively simple as to how you

00:18:48,740 --> 00:18:52,039
implement in your projects you can

00:18:50,210 --> 00:18:54,169
basically import the types as you would

00:18:52,039 --> 00:18:56,030
import any sort of a sub module from

00:18:54,169 --> 00:18:59,600
from anything like a library like react

00:18:56,030 --> 00:19:01,070
native and you can start to use it so

00:18:59,600 --> 00:19:03,530
here we've got app state status which

00:19:01,070 --> 00:19:05,090
basically tells if your app is is active

00:19:03,530 --> 00:19:08,570
inactive it's running in the background

00:19:05,090 --> 00:19:10,880
and I think a good example of where this

00:19:08,570 --> 00:19:13,549
would be valuable to you is obviously

00:19:10,880 --> 00:19:16,940
this type here would be an enum and it

00:19:13,549 --> 00:19:19,720
would say what sort of strings are

00:19:16,940 --> 00:19:22,520
applicable to this type and let's say

00:19:19,720 --> 00:19:24,679
one of the big perils of having a string

00:19:22,520 --> 00:19:27,169
in it in any sort of condition is that

00:19:24,679 --> 00:19:28,760
it leaves room for spelling mistakes

00:19:27,169 --> 00:19:30,770
let's say someone accidentally

00:19:28,760 --> 00:19:33,350
misspelled this since it's being now

00:19:30,770 --> 00:19:34,789
checked up against this enum that you've

00:19:33,350 --> 00:19:36,320
imported from react native this error

00:19:34,789 --> 00:19:39,530
would actually be caught a lot quicker

00:19:36,320 --> 00:19:41,480
and save you some time unfortunately

00:19:39,530 --> 00:19:43,940
it's not a perfect world and sometimes

00:19:41,480 --> 00:19:48,620
you need to just get your hands dirty

00:19:43,940 --> 00:19:50,570
and and make your own type declarations

00:19:48,620 --> 00:19:52,820
for your libraries yourself it's

00:19:50,570 --> 00:19:54,620
relatively simple as you can see here we

00:19:52,820 --> 00:19:57,919
just declared the module with the name

00:19:54,620 --> 00:19:59,179
of the module and then inside that we

00:19:57,919 --> 00:20:01,609
define everything

00:19:59,179 --> 00:20:05,049
underneath that that is involved within

00:20:01,609 --> 00:20:08,899
that module whilst this may seem

00:20:05,049 --> 00:20:10,639
slightly tedious if you're good enough

00:20:08,899 --> 00:20:12,499
at Google I guarantee you can find

00:20:10,639 --> 00:20:13,759
someone he's probably done this for you

00:20:12,499 --> 00:20:14,710
and it's floating around on Stack

00:20:13,759 --> 00:20:18,859
Overflow

00:20:14,710 --> 00:20:20,389
so don't worry too much and like I say

00:20:18,859 --> 00:20:22,159
you basically declare the module and

00:20:20,389 --> 00:20:23,899
once you give it this extension dot d

00:20:22,159 --> 00:20:26,899
dot t-- s the descending floor

00:20:23,899 --> 00:20:30,320
declaration you you can basically it's

00:20:26,899 --> 00:20:33,440
not open for typescript to find so

00:20:30,320 --> 00:20:35,149
brilliant you have officially got react

00:20:33,440 --> 00:20:36,649
native a sorry why do I keep saying that

00:20:35,149 --> 00:20:39,440
type scripts working in your hurry

00:20:36,649 --> 00:20:41,179
active project you you you have an

00:20:39,440 --> 00:20:43,460
understanding of what typescript is and

00:20:41,179 --> 00:20:47,889
you can now start to actually implement

00:20:43,460 --> 00:20:50,599
it within your project so here I have a

00:20:47,889 --> 00:20:55,009
component in JavaScript that's called

00:20:50,599 --> 00:20:57,679
hello and what it essentially does is it

00:20:55,009 --> 00:20:59,479
renders a line of text from which your

00:20:57,679 --> 00:21:02,690
name that is gathered from some props

00:20:59,479 --> 00:21:04,489
that is parsed into this component is

00:21:02,690 --> 00:21:06,919
rendered and then there is a number of

00:21:04,489 --> 00:21:09,259
exclamation marks that is directly

00:21:06,919 --> 00:21:11,809
related to a piece of State called

00:21:09,259 --> 00:21:13,159
enthusiasm level and then there are two

00:21:11,809 --> 00:21:15,830
buttons underneath it which are

00:21:13,159 --> 00:21:17,899
responsible for changing that state and

00:21:15,830 --> 00:21:19,999
that then changes the number of

00:21:17,899 --> 00:21:22,940
exclamation marks after your name if

00:21:19,999 --> 00:21:24,979
that wasn't clear enough here it is so

00:21:22,940 --> 00:21:27,469
as you can see we've got my name part

00:21:24,979 --> 00:21:29,210
which is passed by a props we've got a

00:21:27,469 --> 00:21:31,249
default number of exclamation marks

00:21:29,210 --> 00:21:33,049
which is also passed by props but these

00:21:31,249 --> 00:21:36,019
buttons essentially change one piece of

00:21:33,049 --> 00:21:37,599
state for the component and that that

00:21:36,019 --> 00:21:41,200
changes the number of exclamation marks

00:21:37,599 --> 00:21:44,210
so now we have converted it to

00:21:41,200 --> 00:21:47,989
typescript and there's really two things

00:21:44,210 --> 00:21:49,729
that I think are of importance here we

00:21:47,989 --> 00:21:51,309
see two interface structures like we

00:21:49,729 --> 00:21:53,869
covered at the start of the presentation

00:21:51,309 --> 00:21:56,869
and then a slightly interesting

00:21:53,869 --> 00:21:59,960
structure just next to the extension of

00:21:56,869 --> 00:22:02,029
the component which I'll cover in just a

00:21:59,960 --> 00:22:03,979
bit but first let's look at the

00:22:02,029 --> 00:22:05,539
interface like I said earlier for the

00:22:03,979 --> 00:22:08,299
sake of simplicity we're defining an

00:22:05,539 --> 00:22:11,059
interface as a structure that we use to

00:22:08,299 --> 00:22:12,269
effectively map types to object

00:22:11,059 --> 00:22:13,320
properties

00:22:12,269 --> 00:22:16,009
and that's it's a people it's doing here

00:22:13,320 --> 00:22:18,749
really we're just saying that the props

00:22:16,009 --> 00:22:21,119
consist of a name which is a string an

00:22:18,749 --> 00:22:22,649
enthusiasm level which is a number and

00:22:21,119 --> 00:22:24,419
you may be thinking what's that question

00:22:22,649 --> 00:22:25,709
mark doing there that is essentially

00:22:24,419 --> 00:22:27,570
just a way that you tell type script

00:22:25,709 --> 00:22:29,729
then this is an optional property it

00:22:27,570 --> 00:22:31,709
doesn't need to be provided but if it is

00:22:29,729 --> 00:22:33,929
provided it needs to be a number and

00:22:31,709 --> 00:22:36,989
then underneath that you can see the

00:22:33,929 --> 00:22:39,809
state which is same as the as it is in

00:22:36,989 --> 00:22:42,299
the props it's just a number well

00:22:39,809 --> 00:22:45,299
probably scratches a few more heads is

00:22:42,299 --> 00:22:47,940
this strange structure at the end of the

00:22:45,299 --> 00:22:49,109
react component like I said earlier for

00:22:47,940 --> 00:22:52,559
people that may have come from other

00:22:49,109 --> 00:22:55,440
static type languages such as Java or C

00:22:52,559 --> 00:22:58,049
sharp you may understand this but what

00:22:55,440 --> 00:23:01,049
it essentially is is something called a

00:22:58,049 --> 00:23:06,749
generics and it's used for the case

00:23:01,049 --> 00:23:09,089
where we do not know what a type is at

00:23:06,749 --> 00:23:12,119
the time at the compilation time when we

00:23:09,089 --> 00:23:14,039
are running something however sorry we

00:23:12,119 --> 00:23:17,399
don't know when it's defined but when we

00:23:14,039 --> 00:23:20,190
actually start to compile the code we

00:23:17,399 --> 00:23:22,259
want typescript to be aware of what that

00:23:20,190 --> 00:23:24,479
type is it's actually a relatively

00:23:22,259 --> 00:23:25,709
complex subject in typescript I think is

00:23:24,479 --> 00:23:26,940
probably one of the more complex

00:23:25,709 --> 00:23:29,009
structures that you get in typescript

00:23:26,940 --> 00:23:31,709
however how does it really apply to us

00:23:29,009 --> 00:23:33,690
well like I said it was being used after

00:23:31,709 --> 00:23:37,200
the component that was created and react

00:23:33,690 --> 00:23:40,469
and why would react basically not have a

00:23:37,200 --> 00:23:42,719
strong idea what types being passed into

00:23:40,469 --> 00:23:47,009
are but would need to know about it at

00:23:42,719 --> 00:23:49,109
the point of instantiation well it would

00:23:47,009 --> 00:23:51,809
be set state it's exceptionally

00:23:49,109 --> 00:23:55,200
important that the component is aware of

00:23:51,809 --> 00:23:58,619
what the state is when it actually gets

00:23:55,200 --> 00:24:01,859
instantiated and what that means is that

00:23:58,619 --> 00:24:04,889
when I try to set the state and I said

00:24:01,859 --> 00:24:07,409
it is something that the the type that I

00:24:04,889 --> 00:24:09,869
provided in that generic wasn't in this

00:24:07,409 --> 00:24:11,489
case I say enthusiasm level

00:24:09,869 --> 00:24:13,769
I'm parsing I'm trying to change it as a

00:24:11,489 --> 00:24:15,329
string but I've defined it as a number

00:24:13,769 --> 00:24:17,759
within the state that I passed as a

00:24:15,329 --> 00:24:20,129
component it kicks up an error and this

00:24:17,759 --> 00:24:23,849
basically gives us a far better handling

00:24:20,129 --> 00:24:25,679
of type control within the component

00:24:23,849 --> 00:24:29,349
context

00:24:25,679 --> 00:24:31,479
so we've covered really how to integrate

00:24:29,349 --> 00:24:34,119
it I think with with what I've shown now

00:24:31,479 --> 00:24:35,799
you can get a pretty good start with how

00:24:34,119 --> 00:24:39,099
to actually start changing your files

00:24:35,799 --> 00:24:41,649
over to JavaScript and move them over to

00:24:39,099 --> 00:24:43,689
typescript now let's just cover some of

00:24:41,649 --> 00:24:45,699
the alternatives I think one thing that

00:24:43,689 --> 00:24:47,109
people when they first hear about static

00:24:45,699 --> 00:24:48,789
typing but they're not used to it and

00:24:47,109 --> 00:24:50,949
they work on a react project they might

00:24:48,789 --> 00:24:53,259
say well why can't I just use a proper

00:24:50,949 --> 00:24:55,959
types it's essentially static typing

00:24:53,259 --> 00:24:58,029
hopefully this presentation that I've

00:24:55,959 --> 00:25:00,219
given so far bore most people will see

00:24:58,029 --> 00:25:01,899
why that's not the case but let's define

00:25:00,219 --> 00:25:04,809
it a little bit further just to be a bit

00:25:01,899 --> 00:25:06,939
clearer so it is so much more than prop

00:25:04,809 --> 00:25:09,699
validation like I showed you have this

00:25:06,939 --> 00:25:12,369
really strong IDE support prop types is

00:25:09,699 --> 00:25:13,449
quite heavily confined to the context of

00:25:12,369 --> 00:25:15,309
the file that you're working with

00:25:13,449 --> 00:25:17,139
whereas when you use typescript it's

00:25:15,309 --> 00:25:20,739
aware of everything that is being

00:25:17,139 --> 00:25:22,149
imported and typed in your code base to

00:25:20,739 --> 00:25:24,219
go along with that you also have the

00:25:22,149 --> 00:25:27,939
navigation features you can quite easily

00:25:24,219 --> 00:25:31,929
navigate around your code by the types

00:25:27,939 --> 00:25:33,899
that are being imported and defined also

00:25:31,929 --> 00:25:35,829
like I just showed with the generics

00:25:33,899 --> 00:25:40,709
typescript is capable of so much more

00:25:35,829 --> 00:25:44,499
than just sort of quite solidly and

00:25:40,709 --> 00:25:46,449
linearly defining what type something is

00:25:44,499 --> 00:25:47,649
it has the ability to spatially work

00:25:46,449 --> 00:25:49,749
with things that might be a slightly

00:25:47,649 --> 00:25:53,799
more dynamic than what we're expecting

00:25:49,749 --> 00:25:56,229
at the time and obviously the big one is

00:25:53,799 --> 00:25:58,959
that predation it's in the name it's

00:25:56,229 --> 00:26:00,579
very much just for a very specific part

00:25:58,959 --> 00:26:02,769
of your code base and there might be

00:26:00,579 --> 00:26:04,749
huge parts of your code base the left on

00:26:02,769 --> 00:26:08,339
type to ever use Redux or you have

00:26:04,749 --> 00:26:11,109
middleware or even just a utility file

00:26:08,339 --> 00:26:13,539
so the better question here is probably

00:26:11,109 --> 00:26:15,909
what about flow and can I just get a

00:26:13,539 --> 00:26:19,989
quick show of hands has anyone here used

00:26:15,909 --> 00:26:21,549
flow before okay it's quite old people

00:26:19,989 --> 00:26:24,519
that might beat me off in the carpark so

00:26:21,549 --> 00:26:26,139
it's having a dig in it but no to be

00:26:24,519 --> 00:26:28,449
completely honest security honest our

00:26:26,139 --> 00:26:29,649
project we use typescript initially

00:26:28,449 --> 00:26:31,839
because we had two people in the team

00:26:29,649 --> 00:26:33,999
that knew it better and we needed a

00:26:31,839 --> 00:26:35,769
quick turnaround time I myself have not

00:26:33,999 --> 00:26:39,009
used flow professionally I have used it

00:26:35,769 --> 00:26:39,320
for a personal project but up but I am

00:26:39,009 --> 00:26:42,830
deaf

00:26:39,320 --> 00:26:45,050
not as an expert on it that in mind I

00:26:42,830 --> 00:26:47,450
have a few opinions about why I think

00:26:45,050 --> 00:26:50,750
typescript is the better choice and I'm

00:26:47,450 --> 00:26:53,480
happy to be challenged on any of them so

00:26:50,750 --> 00:26:57,800
there is the larger community typescript

00:26:53,480 --> 00:27:00,410
has been around for a lot longer and as

00:26:57,800 --> 00:27:02,450
far as I can tell the discourse the

00:27:00,410 --> 00:27:05,990
volume of discourse on it is far greater

00:27:02,450 --> 00:27:08,060
as well if we look at the state of Jas

00:27:05,990 --> 00:27:11,930
which is basically a survey conducted

00:27:08,060 --> 00:27:14,630
every year of about 20,000 developers

00:27:11,930 --> 00:27:17,210
across the world we can see the the sort

00:27:14,630 --> 00:27:19,190
of differencing in opinions of

00:27:17,210 --> 00:27:23,200
developers between typescript and floo

00:27:19,190 --> 00:27:26,930
floo seems to have sort of plateaued

00:27:23,200 --> 00:27:31,100
over the years and is not increasing as

00:27:26,930 --> 00:27:34,360
much as we see for typescript where it

00:27:31,100 --> 00:27:36,770
has gone from twenty point eight percent

00:27:34,360 --> 00:27:38,510
to forty six point seven percent of

00:27:36,770 --> 00:27:41,270
people saying over two years that

00:27:38,510 --> 00:27:44,960
they've used and they would use it again

00:27:41,270 --> 00:27:46,400
compared to a ten point two percent then

00:27:44,960 --> 00:27:47,650
we have the better ear errors this is

00:27:46,400 --> 00:27:50,390
something that I think flow gets a

00:27:47,650 --> 00:27:52,880
relatively large amount of a critique

00:27:50,390 --> 00:27:55,210
for that essentially some of their

00:27:52,880 --> 00:27:57,590
errors can be a little bit too verbose I

00:27:55,210 --> 00:27:58,940
myself obviously having only used it in

00:27:57,590 --> 00:28:00,740
a personal project had not seen this

00:27:58,940 --> 00:28:02,690
much but I did decide to sort of try it

00:28:00,740 --> 00:28:05,390
out for myself by going to the relative

00:28:02,690 --> 00:28:08,000
playgrounds of both super sets so this

00:28:05,390 --> 00:28:10,970
is typescript one you just define a

00:28:08,000 --> 00:28:13,340
title and you send a string and I give

00:28:10,970 --> 00:28:16,970
it a number it's pretty simple it just

00:28:13,340 --> 00:28:20,330
says it's not assignable to a string on

00:28:16,970 --> 00:28:24,320
flow you've got a bit more of a lengthy

00:28:20,330 --> 00:28:27,230
answer it says the same thing sort of I

00:28:24,320 --> 00:28:29,180
mean technically three times but but

00:28:27,230 --> 00:28:31,910
there's a lot of stuff here that I think

00:28:29,180 --> 00:28:33,800
to an initial person who's getting used

00:28:31,910 --> 00:28:37,010
to the concept of static typing might

00:28:33,800 --> 00:28:38,930
seem seem slightly intimidating and I

00:28:37,010 --> 00:28:40,940
and the assumption I sort of make from

00:28:38,930 --> 00:28:43,280
this as well as that as the types become

00:28:40,940 --> 00:28:45,590
more complex so did the errors that are

00:28:43,280 --> 00:28:47,390
returned with them and so some of the

00:28:45,590 --> 00:28:50,360
verbosity that you can see demonstrated

00:28:47,390 --> 00:28:51,900
here might actually get worse in other

00:28:50,360 --> 00:28:53,250
scenarios

00:28:51,900 --> 00:28:56,809
and then there's just the IDE

00:28:53,250 --> 00:29:01,620
integration so there's the fact that

00:28:56,809 --> 00:29:04,529
there are a lot of IDs that do sort of

00:29:01,620 --> 00:29:06,659
go for a a native typescript approach

00:29:04,529 --> 00:29:09,750
but there's also just the volume

00:29:06,659 --> 00:29:12,150
currently at the moment of IDs that say

00:29:09,750 --> 00:29:14,730
that they support one one superset over

00:29:12,150 --> 00:29:15,600
the other so these are all the ones that

00:29:14,730 --> 00:29:18,210
typescript

00:29:15,600 --> 00:29:22,080
say they support I think they've got

00:29:18,210 --> 00:29:24,330
about eleven or so there and compare

00:29:22,080 --> 00:29:29,250
this to the number that flow support

00:29:24,330 --> 00:29:31,080
it's far less and this may be to do with

00:29:29,250 --> 00:29:33,090
perhaps its infancy compared to

00:29:31,080 --> 00:29:35,220
typescript or it could be perhaps a

00:29:33,090 --> 00:29:37,860
reflection of the the general mood in

00:29:35,220 --> 00:29:40,440
the development community about what

00:29:37,860 --> 00:29:43,770
they would rather use so I'm just going

00:29:40,440 --> 00:29:45,899
to end with this I do realize it's

00:29:43,770 --> 00:29:50,399
slightly controversial to bring Airbnb

00:29:45,899 --> 00:29:52,440
up in a react native Meetup however I do

00:29:50,399 --> 00:29:55,529
think this is an important point this is

00:29:52,440 --> 00:29:57,510
from a talk that Airbnb gave about two

00:29:55,529 --> 00:29:59,580
or three weeks ago I'm still trying to

00:29:57,510 --> 00:30:01,010
find the video if someone does find it I

00:29:59,580 --> 00:30:03,299
would love if you could send that to me

00:30:01,010 --> 00:30:05,190
but if we take it at its word it was a

00:30:03,299 --> 00:30:07,020
talk that they gave where they did ran

00:30:05,190 --> 00:30:11,039
an investigation into their own codebase

00:30:07,020 --> 00:30:13,200
and how much time sorry how much effort

00:30:11,039 --> 00:30:16,380
really how much quality and value had

00:30:13,200 --> 00:30:18,000
typescript added to their project what

00:30:16,380 --> 00:30:19,980
they essentially highlighted was that

00:30:18,000 --> 00:30:21,990
38% of the errors that were made in

00:30:19,980 --> 00:30:24,600
their codebase could have been avoided

00:30:21,990 --> 00:30:29,909
by typescript and I guess we sort of

00:30:24,600 --> 00:30:31,320
have to ask ourselves if Airbnb which is

00:30:29,909 --> 00:30:32,970
a company that quite literally has made

00:30:31,320 --> 00:30:36,659
their own style guide which is widely

00:30:32,970 --> 00:30:39,000
accepted on JavaScript yeah can be

00:30:36,659 --> 00:30:41,880
susceptible to these kinds of errors are

00:30:39,000 --> 00:30:45,809
we ourselves so immune from them I

00:30:41,880 --> 00:30:47,760
myself would probably say not thank you

00:30:45,809 --> 00:30:49,500
very much I know it's a bit long but

00:30:47,760 --> 00:30:52,190
thanks for listening and I will try my

00:30:49,500 --> 00:30:52,190
best to answer any questions

00:30:56,470 --> 00:31:03,440
yeah so the question that was that I

00:31:00,799 --> 00:31:05,360
mentioned the start that unit testing

00:31:03,440 --> 00:31:07,990
was a siliceous the problems we had and

00:31:05,360 --> 00:31:11,539
if we involved typing do we need less

00:31:07,990 --> 00:31:13,940
unit tests so I think that the two

00:31:11,539 --> 00:31:18,799
points that I thought were important

00:31:13,940 --> 00:31:22,789
were the first one that typing is often

00:31:18,799 --> 00:31:26,570
there to reduce silly mistakes and for

00:31:22,789 --> 00:31:29,570
me a unit test should really be focusing

00:31:26,570 --> 00:31:31,669
on user paths that you don't want a sort

00:31:29,570 --> 00:31:35,630
of clutter with every single scenario

00:31:31,669 --> 00:31:38,000
that can go wrong and so if you don't

00:31:35,630 --> 00:31:39,860
have typing and you do completely rely

00:31:38,000 --> 00:31:42,260
on the concept of testing for it what I

00:31:39,860 --> 00:31:45,200
think you end up with it's not

00:31:42,260 --> 00:31:48,320
necessarily always the case it is a very

00:31:45,200 --> 00:31:51,559
cumbersome file which is basically

00:31:48,320 --> 00:31:55,220
trying to make silly tests for silly

00:31:51,559 --> 00:31:57,440
mistakes and when you don't have that

00:31:55,220 --> 00:31:59,240
and you have the typing in place it

00:31:57,440 --> 00:32:00,770
basically means that you can focus on

00:31:59,240 --> 00:32:02,360
testing what is really important to your

00:32:00,770 --> 00:32:06,169
product and what is important to your

00:32:02,360 --> 00:32:07,549
users that is an amazing question and I

00:32:06,169 --> 00:32:10,190
do not have the arts to it

00:32:07,549 --> 00:32:13,100
I would be surprised if there wasn't I

00:32:10,190 --> 00:32:15,409
do know that Facebook themselves who are

00:32:13,100 --> 00:32:17,320
responsible for creating flow are

00:32:15,409 --> 00:32:20,120
starting to move some of their projects

00:32:17,320 --> 00:32:21,770
over to typescript I think jest itself

00:32:20,120 --> 00:32:24,260
is moving over to typescript so I'd be

00:32:21,770 --> 00:32:28,309
surprised if we didn't see these kind of

00:32:24,260 --> 00:32:31,299
tools being introduced soon ish it's a

00:32:28,309 --> 00:32:34,340
very iffy statement I just maybe yeah

00:32:31,299 --> 00:32:37,820
yes so the main benefit of sorry

00:32:34,340 --> 00:32:40,429
disadvantage is it's the learning curve

00:32:37,820 --> 00:32:42,110
for someone like I said myself who spent

00:32:40,429 --> 00:32:44,900
the entirety of their career working

00:32:42,110 --> 00:32:47,480
with JavaScript and sort of being a

00:32:44,900 --> 00:32:51,200
champion of dynamic typing when this

00:32:47,480 --> 00:32:53,510
concept gets introduced to you it slows

00:32:51,200 --> 00:32:54,950
you down definitely at the start I'd be

00:32:53,510 --> 00:32:56,780
surprised if anyone said that it didn't

00:32:54,950 --> 00:32:59,150
slow them down getting used to the

00:32:56,780 --> 00:33:01,280
concept of dynamic typing how did we

00:32:59,150 --> 00:33:03,259
overcome it we had two people in the

00:33:01,280 --> 00:33:04,759
team that

00:33:03,259 --> 00:33:05,600
but really it's just practice makes

00:33:04,759 --> 00:33:07,759
perfect

00:33:05,600 --> 00:33:10,369
and honestly read the documentation that

00:33:07,759 --> 00:33:13,190
they have it's amazing and just use it

00:33:10,369 --> 00:33:16,220
and play around with it I wish I could

00:33:13,190 --> 00:33:17,419
give you a better answer than that yeah

00:33:16,220 --> 00:33:20,269
so like I mentioned earlier you can

00:33:17,419 --> 00:33:21,619
basically have this no implicit any rule

00:33:20,269 --> 00:33:23,360
which basically means that you have to

00:33:21,619 --> 00:33:25,850
define anything

00:33:23,360 --> 00:33:27,190
the sneaky thing you can do as you just

00:33:25,850 --> 00:33:30,320
mentioned is that you can just give

00:33:27,190 --> 00:33:31,999
explicitly the type of any and therefore

00:33:30,320 --> 00:33:35,809
you're sort of technically writing

00:33:31,999 --> 00:33:38,299
typescript but but you're not how do we

00:33:35,809 --> 00:33:40,039
pass that really the best thing is that

00:33:38,299 --> 00:33:41,570
it's a bit of a faux pas in our code

00:33:40,039 --> 00:33:43,970
reviews and it sticks out like a sore

00:33:41,570 --> 00:33:45,379
thumb so if somebody does put in any

00:33:43,970 --> 00:33:47,320
they've normally gonna have a pretty

00:33:45,379 --> 00:33:49,999
good excuse as to why they're doing it

00:33:47,320 --> 00:33:52,159
yes that was a how does it affect your

00:33:49,999 --> 00:33:56,149
productivity and doesn't make it faster

00:33:52,159 --> 00:33:58,429
so as I mentioned initially there is a

00:33:56,149 --> 00:34:00,590
learning curve you will code slow I'm

00:33:58,429 --> 00:34:02,960
pretty sure you will unless have some

00:34:00,590 --> 00:34:05,720
sort of typescript

00:34:02,960 --> 00:34:08,419
savant you're probably going to code a

00:34:05,720 --> 00:34:09,470
little bit slower however the important

00:34:08,419 --> 00:34:10,790
thing I really think here is

00:34:09,470 --> 00:34:14,450
understanding the difference between a

00:34:10,790 --> 00:34:16,190
short time and long time you will lose

00:34:14,450 --> 00:34:20,059
some of the short time your turnaround

00:34:16,190 --> 00:34:22,790
for creating features will be will be a

00:34:20,059 --> 00:34:24,470
bit slower however if you start to

00:34:22,790 --> 00:34:27,139
notice bugs a lot earlier and

00:34:24,470 --> 00:34:29,389
imperfections in your code the time that

00:34:27,139 --> 00:34:31,010
you'll actually gain from not having a

00:34:29,389 --> 00:34:33,109
project manager tapping you on the

00:34:31,010 --> 00:34:35,059
shoulder saying it's not working will

00:34:33,109 --> 00:34:36,740
actually benefit you a lot more in the

00:34:35,059 --> 00:34:39,500
long run and it's more of a strategic

00:34:36,740 --> 00:34:41,419
play than a tactical one that was are we

00:34:39,500 --> 00:34:42,770
measuring the actual sort of

00:34:41,419 --> 00:34:46,069
productivity game that we're gaining

00:34:42,770 --> 00:34:49,569
from typescript the real answer is no

00:34:46,069 --> 00:34:52,940
we're not like we're not the directly

00:34:49,569 --> 00:34:56,149
measuring it however what we do measure

00:34:52,940 --> 00:34:58,369
is the number of bugs that we have so

00:34:56,149 --> 00:35:00,890
it's not so much a speed and time saved

00:34:58,369 --> 00:35:02,720
metric as it is the number of bugs that

00:35:00,890 --> 00:35:04,220
are actually being returned and there

00:35:02,720 --> 00:35:07,599
definitely is a positive trend on that

00:35:04,220 --> 00:35:07,599

YouTube URL: https://www.youtube.com/watch?v=RDUCiqBuywE


