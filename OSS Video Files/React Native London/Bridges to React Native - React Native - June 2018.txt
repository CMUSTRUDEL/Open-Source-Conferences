Title: Bridges to React Native - React Native - June 2018
Publication date: 2018-07-04
Playlist: React Native London
Description: 
	Presented by Florian Rival.

A great strength of React Native is how easily we can interface our app with native code.
In this talk, Iâ€™m going to explain the lifecycle of a native module, how calls are made over the bridge and how to bootstrap your native modules.
I'll present various tools, either native or specific to React Native, that are useful when creating a native modules and will finish by a few pitfalls to avoid.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:07,560
okay let's get started so hi everyone my

00:00:05,009 --> 00:00:09,809
name is Fran I'm walking as a software

00:00:07,560 --> 00:00:12,450
engineer at Facebook

00:00:09,809 --> 00:00:15,360
so I'm working in the team called

00:00:12,450 --> 00:00:20,010
datacenter products so we have a few

00:00:15,360 --> 00:00:24,420
difference products in ArcGIS and in

00:00:20,010 --> 00:00:27,090
react native so the idea is to make sure

00:00:24,420 --> 00:00:30,750
that all the data center and the

00:00:27,090 --> 00:00:35,940
technicians walking in data center can

00:00:30,750 --> 00:00:38,270
can do their job properly and and yeah

00:00:35,940 --> 00:00:41,700
that's that's at what we are doing

00:00:38,270 --> 00:00:43,770
before being at Facebook I was building

00:00:41,700 --> 00:00:47,430
quite a lot of different regulative

00:00:43,770 --> 00:00:50,010
applications so in fact most of my talk

00:00:47,430 --> 00:00:52,350
is based on my experience with reg

00:00:50,010 --> 00:00:57,660
native and building open-source modules

00:00:52,350 --> 00:01:00,329
for it I'm so the developer and main

00:00:57,660 --> 00:01:03,030
author of G develop it's a game creator

00:01:00,329 --> 00:01:05,519
software that everybody can use to

00:01:03,030 --> 00:01:09,659
create games it's based on react to and

00:01:05,519 --> 00:01:12,890
the idea is that anyone can start the

00:01:09,659 --> 00:01:16,530
editor create a few objects and then the

00:01:12,890 --> 00:01:18,750
creds create the rules of the game using

00:01:16,530 --> 00:01:20,610
visual events so that you don't have to

00:01:18,750 --> 00:01:22,290
program to create your own game so

00:01:20,610 --> 00:01:25,710
that's my open source project feel free

00:01:22,290 --> 00:01:27,869
to check it and last thing is that I've

00:01:25,710 --> 00:01:30,479
created a game with my game engine which

00:01:27,869 --> 00:01:32,549
is called Lindberg hello hers it's a

00:01:30,479 --> 00:01:34,700
game where you control a cat going all

00:01:32,549 --> 00:01:39,930
around the world that's not a joke and

00:01:34,700 --> 00:01:42,960
and that's a project that we that we met

00:01:39,930 --> 00:01:47,220
with a few friends including lead web

00:01:42,960 --> 00:01:50,189
who is a really cat and it's a bit like

00:01:47,220 --> 00:01:53,100
grumpy cat see if you if you know him so

00:01:50,189 --> 00:01:56,240
yeah feel free to take a look it's also

00:01:53,100 --> 00:02:01,140
on the Play Store and on the App Store

00:01:56,240 --> 00:02:04,200
but let's go buy to to react so I've

00:02:01,140 --> 00:02:08,069
spoke about in the title of the talk

00:02:04,200 --> 00:02:10,560
about bridges to recognize Eve and the

00:02:08,069 --> 00:02:11,850
thing is that bridges are not existing

00:02:10,560 --> 00:02:14,520
only in

00:02:11,850 --> 00:02:16,740
native in fact any other framework which

00:02:14,520 --> 00:02:20,280
is dealing with more than one language

00:02:16,740 --> 00:02:23,010
as some kind of bridge or similar things

00:02:20,280 --> 00:02:27,090
for example let's take a look at not Jes

00:02:23,010 --> 00:02:31,500
which has not DYP to create native

00:02:27,090 --> 00:02:35,340
models with C++ you can also take a look

00:02:31,500 --> 00:02:40,560
at the Marine they have C sharp bindings

00:02:35,340 --> 00:02:42,870
generators and Java as the Java native

00:02:40,560 --> 00:02:45,890
interface Emscripten which is a project

00:02:42,870 --> 00:02:47,940
to compile your C++ into JavaScript

00:02:45,890 --> 00:02:51,720
that's something that you should

00:02:47,940 --> 00:02:57,980
definitely look at they have an bind a

00:02:51,720 --> 00:03:01,590
web IDL cocos2d is is a cross-platform

00:02:57,980 --> 00:03:04,160
development software using javascript

00:03:01,590 --> 00:03:06,660
and rendering everything using OpenGL

00:03:04,160 --> 00:03:10,800
they also have bindings because they are

00:03:06,660 --> 00:03:13,200
using the the engine of Firefox

00:03:10,800 --> 00:03:16,020
SpiderMonkey that the energy that I used

00:03:13,200 --> 00:03:18,180
for the for the game with a cat it's

00:03:16,020 --> 00:03:21,300
running quite well and it's using

00:03:18,180 --> 00:03:23,850
javascript patent last thing is reg

00:03:21,300 --> 00:03:25,860
native we have the bridge so let's take

00:03:23,850 --> 00:03:30,470
a look at what is this bridge before

00:03:25,860 --> 00:03:32,910
going back to creating native modules so

00:03:30,470 --> 00:03:36,030
if you want to summarize what is a

00:03:32,910 --> 00:03:37,980
bridge in a regulative application we

00:03:36,030 --> 00:03:40,440
first have to take a look at the

00:03:37,980 --> 00:03:43,740
structure of an application it's quite

00:03:40,440 --> 00:03:47,790
simple in fact you have this Android and

00:03:43,740 --> 00:03:50,040
iOS folders the index dot J is filed

00:03:47,790 --> 00:03:52,680
that is bootstrapping your application

00:03:50,040 --> 00:03:56,850
and your application is built entirely

00:03:52,680 --> 00:03:59,100
using javascript nothing new and the big

00:03:56,850 --> 00:04:00,930
thing with reg native is that of course

00:03:59,100 --> 00:04:03,390
everything every component that is

00:04:00,930 --> 00:04:07,290
rendered on the screen is a native one

00:04:03,390 --> 00:04:09,520
and this is where the bridge is a is

00:04:07,290 --> 00:04:11,740
starting and

00:04:09,520 --> 00:04:15,330
this is the most important part of reg

00:04:11,740 --> 00:04:18,760
native so here is a native application

00:04:15,330 --> 00:04:23,650
built with reg native look you have the

00:04:18,760 --> 00:04:26,590
men shredder where the web the native

00:04:23,650 --> 00:04:29,140
and the native code is running and there

00:04:26,590 --> 00:04:32,500
is this jes engine thread which is

00:04:29,140 --> 00:04:34,750
running your JavaScript application you

00:04:32,500 --> 00:04:37,390
have also a thread for each native model

00:04:34,750 --> 00:04:39,430
that is used in your application when

00:04:37,390 --> 00:04:41,170
there is something happening on your

00:04:39,430 --> 00:04:43,690
application on the native part for

00:04:41,170 --> 00:04:46,950
example when I touch the screen the

00:04:43,690 --> 00:04:50,800
event is sent to the JavaScript engine

00:04:46,950 --> 00:04:54,040
using the bridge so you have this bridge

00:04:50,800 --> 00:04:56,590
which is an a synchronous queue which is

00:04:54,040 --> 00:05:00,250
also batched so that they are massager

00:04:56,590 --> 00:05:04,060
going from the native part to and the

00:05:00,250 --> 00:05:07,210
engine and this is done using this in a

00:05:04,060 --> 00:05:10,780
synchronous bridge and hold the message

00:05:07,210 --> 00:05:12,940
are badged so that you can the native

00:05:10,780 --> 00:05:15,160
part of all the JavaScript part can

00:05:12,940 --> 00:05:17,620
endure more than one message at once

00:05:15,160 --> 00:05:20,250
it's the same thing happening when you

00:05:17,620 --> 00:05:22,690
you're dealing with with a native module

00:05:20,250 --> 00:05:25,450
meaning that where you are the

00:05:22,690 --> 00:05:29,560
JavaScript part you can call a function

00:05:25,450 --> 00:05:32,200
which will be solarized as json and send

00:05:29,560 --> 00:05:35,080
over the bridge and when your native

00:05:32,200 --> 00:05:37,420
would you want to call an event or call

00:05:35,080 --> 00:05:40,360
a callback back to the JavaScript engine

00:05:37,420 --> 00:05:42,880
that is the same thing happening but in

00:05:40,360 --> 00:05:48,070
the other way if you if you want we can

00:05:42,880 --> 00:05:50,680
take a look at the way arguments are

00:05:48,070 --> 00:05:53,260
sent when you're going from the native

00:05:50,680 --> 00:05:57,910
part to JavaScript arguments are sent as

00:05:53,260 --> 00:06:02,590
JSON as I said and when it's your way

00:05:57,910 --> 00:06:04,690
you have the module ID the method ID and

00:06:02,590 --> 00:06:09,390
the argument that are also sent over the

00:06:04,690 --> 00:06:12,550
bridge and all arguments can be an are

00:06:09,390 --> 00:06:15,940
translated by the bridge so you don't

00:06:12,550 --> 00:06:18,490
have to to do to do any kind of

00:06:15,940 --> 00:06:22,390
transformation on your side even promise

00:06:18,490 --> 00:06:24,000
are supported so knowing this oh can we

00:06:22,390 --> 00:06:27,160
write a native mode

00:06:24,000 --> 00:06:29,319
it's something that is really not that

00:06:27,160 --> 00:06:31,360
complicated because everything is

00:06:29,319 --> 00:06:33,580
written on the rag dative documentation

00:06:31,360 --> 00:06:36,490
in fact if you have an application and

00:06:33,580 --> 00:06:39,280
want to start a native module for for

00:06:36,490 --> 00:06:44,590
example bridging into a third-party SDK

00:06:39,280 --> 00:06:46,389
and in this case my advice is to go and

00:06:44,590 --> 00:06:49,569
read the documentation which is on the

00:06:46,389 --> 00:06:52,780
website so what you have to do open

00:06:49,569 --> 00:06:55,449
Xcode add an objective-c file you can do

00:06:52,780 --> 00:06:59,710
Swift too but it's harder and I've not

00:06:55,449 --> 00:07:01,000
after try it in fact then you write your

00:06:59,710 --> 00:07:03,849
method that you want to expose for

00:07:01,000 --> 00:07:06,099
example you can call the method to open

00:07:03,849 --> 00:07:09,159
the third-party SDK at this point and

00:07:06,099 --> 00:07:12,400
you expose them using two macros

00:07:09,159 --> 00:07:14,650
to export a method and a module and at

00:07:12,400 --> 00:07:16,360
the end when you have done this you re

00:07:14,650 --> 00:07:18,789
compile your application and you can

00:07:16,360 --> 00:07:21,969
access to the native module from the Reg

00:07:18,789 --> 00:07:25,360
native side so when you've used the

00:07:21,969 --> 00:07:27,969
macro export module that's the name of

00:07:25,360 --> 00:07:32,080
the module that will be available on the

00:07:27,969 --> 00:07:34,889
JavaScript side that's that's it and

00:07:32,080 --> 00:07:38,440
that's quite convenient to expose in any

00:07:34,889 --> 00:07:40,870
native module that is not requiring a UI

00:07:38,440 --> 00:07:42,099
component for UI components it's a bit

00:07:40,870 --> 00:07:44,669
more complicated it's also on the

00:07:42,099 --> 00:07:48,550
website but I won't go into details I

00:07:44,669 --> 00:07:50,710
think that in most of the case when you

00:07:48,550 --> 00:07:53,110
have to bridge a third-party SDK it's

00:07:50,710 --> 00:07:55,719
because it's not that popular and in

00:07:53,110 --> 00:07:58,750
this case it's more like something like

00:07:55,719 --> 00:08:02,440
analytics or anything that does not

00:07:58,750 --> 00:08:06,039
require a UI component for Android

00:08:02,440 --> 00:08:10,469
that's mostly the same but we brava an

00:08:06,039 --> 00:08:14,050
Android studio so you're using there a

00:08:10,469 --> 00:08:16,960
class react blahblahblah module and

00:08:14,050 --> 00:08:18,900
react package the first one is to

00:08:16,960 --> 00:08:22,000
describe the module and the other one

00:08:18,900 --> 00:08:24,789
the other way you create first direct

00:08:22,000 --> 00:08:28,090
package sorry to expose the module and

00:08:24,789 --> 00:08:29,740
then the react module is exposing the

00:08:28,090 --> 00:08:32,779
function that you want to have in in

00:08:29,740 --> 00:08:37,159
JavaScript so same thing

00:08:32,779 --> 00:08:40,219
as on iOS once you've done it you can

00:08:37,159 --> 00:08:43,310
use it in the exact same way in

00:08:40,219 --> 00:08:45,589
JavaScript and that holds all we want to

00:08:43,310 --> 00:08:47,839
do with recognized Eve on Sweden with

00:08:45,589 --> 00:08:49,519
the native part we want only to deal

00:08:47,839 --> 00:08:53,779
with JavaScript and using the same

00:08:49,519 --> 00:08:59,209
interface as as much as possible so

00:08:53,779 --> 00:09:03,529
that's how you start a new a new module

00:08:59,209 --> 00:09:07,370
and if we want to create a module and

00:09:03,529 --> 00:09:10,069
then to publish it on NPM well that's

00:09:07,370 --> 00:09:13,209
not so different even if I advise to

00:09:10,069 --> 00:09:15,680
start with your own app and then only

00:09:13,209 --> 00:09:18,800
only publish it as an external module

00:09:15,680 --> 00:09:21,889
until you're done with it because well

00:09:18,800 --> 00:09:24,680
your own business first and then making

00:09:21,889 --> 00:09:27,529
a bit of open source it's not so bad so

00:09:24,680 --> 00:09:28,939
let's first bootstrap an empty native

00:09:27,529 --> 00:09:32,589
module I will give you a few pointers

00:09:28,939 --> 00:09:35,509
just after then my advice is to create

00:09:32,589 --> 00:09:39,500
inside the repository of the module and

00:09:35,509 --> 00:09:41,660
an example application so that you are

00:09:39,500 --> 00:09:44,720
able to test quickly your native modules

00:09:41,660 --> 00:09:47,420
and people are also able to just fetch

00:09:44,720 --> 00:09:50,350
your repository and launch the example

00:09:47,420 --> 00:09:55,610
app if you want to do this you can use

00:09:50,350 --> 00:09:59,720
file dot slash in your package JSON to

00:09:55,610 --> 00:10:02,839
refer to your module that is in the

00:09:59,720 --> 00:10:05,540
parent directory so you can do this in

00:10:02,839 --> 00:10:09,170
inside the package the JSON of the

00:10:05,540 --> 00:10:13,149
example app and you're sure that anyone

00:10:09,170 --> 00:10:15,740
who is trying the example app will use

00:10:13,149 --> 00:10:18,220
the latest version that is in the

00:10:15,740 --> 00:10:22,429
repository of your native module and

00:10:18,220 --> 00:10:24,589
last thing is to its npm publish so

00:10:22,429 --> 00:10:27,050
that's the good part of the JavaScript

00:10:24,589 --> 00:10:30,050
ecosystem with just a single command and

00:10:27,050 --> 00:10:32,360
a repository you are able to to create a

00:10:30,050 --> 00:10:37,040
new module and I think that's a big part

00:10:32,360 --> 00:10:40,429
of why trask it is so so popular in fact

00:10:37,040 --> 00:10:42,559
the most difficult part is to bootstrap

00:10:40,429 --> 00:10:46,190
the native module and people have been

00:10:42,559 --> 00:10:48,940
doing I've been doing projects

00:10:46,190 --> 00:10:52,459
and tools to create native models and

00:10:48,940 --> 00:10:55,040
the last one is even coming with

00:10:52,459 --> 00:10:59,000
kathleen and swift support so definitely

00:10:55,040 --> 00:11:01,660
check it out and and those are quite

00:10:59,000 --> 00:11:06,139
quite nice too there are be different

00:11:01,660 --> 00:11:08,839
either simple to use i think that they

00:11:06,139 --> 00:11:12,410
only support Java and objective-c but

00:11:08,839 --> 00:11:15,199
that may have evolved so that's I think

00:11:12,410 --> 00:11:18,680
the the fastest way to start a new

00:11:15,199 --> 00:11:22,160
native module the other way will be to

00:11:18,680 --> 00:11:24,829
either take another Moodle as example or

00:11:22,160 --> 00:11:29,990
start from scratch but wait it's longer

00:11:24,829 --> 00:11:32,660
and what I want to do now is to go

00:11:29,990 --> 00:11:35,269
through a few tools that we can use

00:11:32,660 --> 00:11:37,459
while dealing with native models because

00:11:35,269 --> 00:11:40,509
where we when we are working with reg

00:11:37,459 --> 00:11:43,329
native it's quite simple to debug

00:11:40,509 --> 00:11:47,660
because we used with the chrome debugger

00:11:43,329 --> 00:11:50,089
but as as we are not native developers

00:11:47,660 --> 00:11:53,569
or not everyone is native developer we

00:11:50,089 --> 00:11:55,399
not always aware of the tooling that is

00:11:53,569 --> 00:11:58,009
available so the first tooling that

00:11:55,399 --> 00:12:00,860
everyone can use of course just to do a

00:11:58,009 --> 00:12:03,470
few console output in Java or Objective

00:12:00,860 --> 00:12:06,829
C it can be really useful even in

00:12:03,470 --> 00:12:10,279
production for example to display that

00:12:06,829 --> 00:12:14,480
some configuration passed to your native

00:12:10,279 --> 00:12:17,689
model is invalid in this way better of a

00:12:14,480 --> 00:12:20,709
console output so that your user aware

00:12:17,689 --> 00:12:20,709
that something is going wrong

00:12:21,069 --> 00:12:26,779
please check the native debuggers that

00:12:23,509 --> 00:12:31,459
are not so hard to use and in fact you

00:12:26,779 --> 00:12:33,170
can easily just start take a set a break

00:12:31,459 --> 00:12:37,370
point and and then start your

00:12:33,170 --> 00:12:39,319
application and it's in Android studio

00:12:37,370 --> 00:12:41,930
and Xcode it's just a matter of clicking

00:12:39,319 --> 00:12:44,240
clicking on the line where you want to

00:12:41,930 --> 00:12:48,370
set the break point and then you can

00:12:44,240 --> 00:12:50,149
display whatever you want so that's

00:12:48,370 --> 00:12:52,220
that's something that you definitely

00:12:50,149 --> 00:12:56,120
want to check if you create a native

00:12:52,220 --> 00:12:57,860
module this tool view inspector that's

00:12:56,120 --> 00:12:59,220
something that I've discovered while

00:12:57,860 --> 00:13:02,370
using Xcode

00:12:59,220 --> 00:13:04,290
it's also on Android studio basically

00:13:02,370 --> 00:13:06,660
you click on this small icon over there

00:13:04,290 --> 00:13:09,530
which is not visible at all when you not

00:13:06,660 --> 00:13:12,330
aware of this feature and you can see

00:13:09,530 --> 00:13:15,120
every component of your application in

00:13:12,330 --> 00:13:18,390
3d like like this in fact so that you

00:13:15,120 --> 00:13:19,800
can inspect the view er key and see if

00:13:18,390 --> 00:13:22,740
there is something going wrong or not

00:13:19,800 --> 00:13:25,500
that's I think that the best example of

00:13:22,740 --> 00:13:28,880
the fact that reg reg native is native

00:13:25,500 --> 00:13:32,490
because you're using a native tooling to

00:13:28,880 --> 00:13:35,940
debug your application and well that's

00:13:32,490 --> 00:13:38,670
that's dope next

00:13:35,940 --> 00:13:40,680
so yeah in Android you also have the

00:13:38,670 --> 00:13:43,260
layout inspector which is doing the same

00:13:40,680 --> 00:13:46,230
thing maybe maybe there is not a 3d view

00:13:43,260 --> 00:13:48,060
but still nice to debug things in

00:13:46,230 --> 00:13:50,130
particular if you're creating a UI

00:13:48,060 --> 00:13:52,020
component and it's not showing well

00:13:50,130 --> 00:13:56,630
that's a good way to see if it's

00:13:52,020 --> 00:13:56,630
actually on the screen or not

00:13:56,840 --> 00:14:03,090
last thing no there is another one after

00:14:00,990 --> 00:14:08,550
the bridge profiler I was speaking about

00:14:03,090 --> 00:14:11,100
the bridge you can use this project

00:14:08,550 --> 00:14:13,470
called Aaron's Luffy which is displaying

00:14:11,100 --> 00:14:16,080
on the Left everything that is going on

00:14:13,470 --> 00:14:18,540
the bridge so you can actually see the

00:14:16,080 --> 00:14:20,100
data that has are being sent and if you

00:14:18,540 --> 00:14:23,700
look closely you can see a lot of

00:14:20,100 --> 00:14:25,830
manager dot create view meaning that reg

00:14:23,700 --> 00:14:28,170
native is asking the native part to

00:14:25,830 --> 00:14:31,650
create the view on screen you ever saw

00:14:28,170 --> 00:14:36,360
this message Q dot Spy that you can it's

00:14:31,650 --> 00:14:38,520
a function that you can overload to and

00:14:36,360 --> 00:14:42,500
it will be called anytime a message a

00:14:38,520 --> 00:14:42,500
message is being sent on the bridge

00:14:42,860 --> 00:14:48,570
enter is the memory profiler here is the

00:14:45,750 --> 00:14:50,280
Android memory profiler much useful if

00:14:48,570 --> 00:14:55,530
you're dealing with bigger sources like

00:14:50,280 --> 00:14:57,900
file so image mmm let's spoke about some

00:14:55,530 --> 00:15:00,810
things that hurt when you create a

00:14:57,900 --> 00:15:05,220
native Madeira and so for example first

00:15:00,810 --> 00:15:09,600
thing is here is a screenshot of a pull

00:15:05,220 --> 00:15:11,910
request of on one of my native model so

00:15:09,600 --> 00:15:12,640
I forgot to underline reception so when

00:15:11,910 --> 00:15:14,950
the

00:15:12,640 --> 00:15:17,890
made to resize in the module as too high

00:15:14,950 --> 00:15:21,430
it was crushing the word up not so good

00:15:17,890 --> 00:15:22,510
so yeah that was a that was me when when

00:15:21,430 --> 00:15:25,150
seeing the pro requests

00:15:22,510 --> 00:15:27,100
anyway let's make sure make sure to

00:15:25,150 --> 00:15:29,200
under properly the exception not to add

00:15:27,100 --> 00:15:34,510
but still something that is not done in

00:15:29,200 --> 00:15:36,250
our native modules next thing is make

00:15:34,510 --> 00:15:39,580
sure to check that you're not sending

00:15:36,250 --> 00:15:42,400
too much data over the bridge you can a

00:15:39,580 --> 00:15:44,980
very congestion on the bridge so you can

00:15:42,400 --> 00:15:48,010
use the profiler that I just so be show

00:15:44,980 --> 00:15:50,920
before errands to p2 to see if that the

00:15:48,010 --> 00:15:53,410
case or not it's I think that's not

00:15:50,920 --> 00:15:57,040
really a problem except if you oh you're

00:15:53,410 --> 00:16:00,400
streamlining or sending on a real time a

00:15:57,040 --> 00:16:03,460
lot of data from your native your native

00:16:00,400 --> 00:16:06,310
parts last thing to check

00:16:03,460 --> 00:16:08,860
don't send huge data on the bridge

00:16:06,310 --> 00:16:14,830
because same thing it's the bridge is

00:16:08,860 --> 00:16:17,290
only J zone is an only ending JSON data

00:16:14,830 --> 00:16:21,490
or it's made for this so everything that

00:16:17,290 --> 00:16:24,390
is really large audio files image keeps

00:16:21,490 --> 00:16:28,000
them on the native part and just use

00:16:24,390 --> 00:16:34,840
Ender's file names or anything to deal

00:16:28,000 --> 00:16:36,610
with them yes you can you can base64

00:16:34,840 --> 00:16:42,400
some files but be sure that they are

00:16:36,610 --> 00:16:44,350
already small and the last thing to to

00:16:42,400 --> 00:16:47,530
check when you're creating your native

00:16:44,350 --> 00:16:49,630
model is be sure to follow semantic

00:16:47,530 --> 00:16:51,760
versioning otherwise if you will create

00:16:49,630 --> 00:16:54,480
a breaking change your user won't be you

00:16:51,760 --> 00:16:58,300
won't be aware and that's that's a pain

00:16:54,480 --> 00:17:00,280
I think that as we are working with reg

00:16:58,300 --> 00:17:03,730
native it's a framework that is evolving

00:17:00,280 --> 00:17:07,209
a lot so you have to be and to to be

00:17:03,730 --> 00:17:09,970
aware and to to check what is happening

00:17:07,209 --> 00:17:12,010
in reg native to stay up to date I don't

00:17:09,970 --> 00:17:13,720
have good solution because as long as

00:17:12,010 --> 00:17:18,130
the framework is evolving a lot we have

00:17:13,720 --> 00:17:22,570
to - to be watching this and to be sure

00:17:18,130 --> 00:17:24,559
to update what we are doing as there was

00:17:22,570 --> 00:17:26,870
with Airbnb

00:17:24,559 --> 00:17:29,779
thing going on I think it's a good idea

00:17:26,870 --> 00:17:34,549
also to speak a bit about the future of

00:17:29,779 --> 00:17:37,279
the reg native evolution so disclaimer

00:17:34,549 --> 00:17:39,499
I'm not part of the reg native team and

00:17:37,279 --> 00:17:44,659
I even took a few notes to be sure not

00:17:39,499 --> 00:17:48,499
to say anything wrong and so yeah the

00:17:44,659 --> 00:17:51,590
thing is that everything that I'm saying

00:17:48,499 --> 00:17:55,129
is part of public resources that you can

00:17:51,590 --> 00:17:56,720
find on the react native website so

00:17:55,129 --> 00:17:59,509
nothing new but I think that can be

00:17:56,720 --> 00:18:03,019
interesting if you not aware about what

00:17:59,509 --> 00:18:07,639
is planned for regulative so first thing

00:18:03,019 --> 00:18:10,970
is that make sure to check this article

00:18:07,639 --> 00:18:14,029
states of reg native if it was just

00:18:10,970 --> 00:18:16,549
published a few days or weeks ago by

00:18:14,029 --> 00:18:20,600
sophie hard part with the engineering

00:18:16,549 --> 00:18:23,389
manager of react.js at Facebook and and

00:18:20,600 --> 00:18:26,570
she Walt about what I'm saying basically

00:18:23,389 --> 00:18:29,240
now and the the biggest thing is that

00:18:26,570 --> 00:18:32,419
they are working on a large-scale react

00:18:29,240 --> 00:18:37,009
react attack sure of reg native the idea

00:18:32,419 --> 00:18:41,149
is to is to remove all best frustrating

00:18:37,009 --> 00:18:43,970
issue when dealing with native with

00:18:41,149 --> 00:18:47,179
native components and they want to get

00:18:43,970 --> 00:18:49,340
enabled to have enable us to have a

00:18:47,179 --> 00:18:53,409
better integration with native so how to

00:18:49,340 --> 00:18:57,860
do it three points so the first one is

00:18:53,409 --> 00:18:59,840
the updating the trading model and it

00:18:57,860 --> 00:19:01,929
will be possible after the change they

00:18:59,840 --> 00:19:06,499
are making to call synchronously

00:19:01,929 --> 00:19:09,619
JavaScript from any native thread

00:19:06,499 --> 00:19:16,240
meaning that you will be able using this

00:19:09,619 --> 00:19:20,480
call to use sorry native library like

00:19:16,240 --> 00:19:23,450
navigations or other things like gesture

00:19:20,480 --> 00:19:26,360
anding which are quite hard to implement

00:19:23,450 --> 00:19:29,769
right now why because the bridge is

00:19:26,360 --> 00:19:33,559
asynchronous and this API is requiring

00:19:29,769 --> 00:19:38,240
synchronous response when you're using

00:19:33,559 --> 00:19:41,030
them so I can think about

00:19:38,240 --> 00:19:43,850
the situation when you have when your

00:19:41,030 --> 00:19:46,100
user is crawling really fast in a big

00:19:43,850 --> 00:19:49,790
list and the rendering is done using

00:19:46,100 --> 00:19:52,100
rags is using slate flat list in this

00:19:49,790 --> 00:19:54,440
case you can have blank part showing on

00:19:52,100 --> 00:19:58,670
the screen very quickly this is a time

00:19:54,440 --> 00:20:01,820
for react to react to the massage going

00:19:58,670 --> 00:20:04,460
on the bridge and to send back harder

00:20:01,820 --> 00:20:08,390
comments to the native part to display

00:20:04,460 --> 00:20:12,590
you miss your your item on the list so

00:20:08,390 --> 00:20:16,100
this can be avoided using using a

00:20:12,590 --> 00:20:19,700
synchronous bridge the next thing is

00:20:16,100 --> 00:20:23,630
that they are going to integrate the a

00:20:19,700 --> 00:20:26,900
synchronous rendering of react off react

00:20:23,630 --> 00:20:29,750
16 it was introduced in your act 16 it's

00:20:26,900 --> 00:20:33,440
not yet in reg native the idea here is

00:20:29,750 --> 00:20:35,809
to allow to have multiple priority when

00:20:33,440 --> 00:20:38,000
you are rendering your application when

00:20:35,809 --> 00:20:41,590
so there are two components the first

00:20:38,000 --> 00:20:45,230
one is the time slicing time setting is

00:20:41,590 --> 00:20:47,570
to keep an app responsive you can make a

00:20:45,230 --> 00:20:49,660
difference between rendering that is

00:20:47,570 --> 00:20:52,160
really important for example when you

00:20:49,660 --> 00:20:55,520
touching a button on the screen you want

00:20:52,160 --> 00:20:58,450
to feedback immediately so that's a

00:20:55,520 --> 00:21:01,460
rendering that you want to to prioritize

00:20:58,450 --> 00:21:04,190
above some other rendering like for

00:21:01,460 --> 00:21:07,130
example displaying a new component on

00:21:04,190 --> 00:21:10,250
the screen it's it's okay if a component

00:21:07,130 --> 00:21:12,050
is delayed by a few milliseconds but

00:21:10,250 --> 00:21:14,090
it's not okay if you type something on

00:21:12,050 --> 00:21:15,350
the keyboard and want to see the letter

00:21:14,090 --> 00:21:19,280
on the screen

00:21:15,350 --> 00:21:22,490
well so time sizing is a way to to

00:21:19,280 --> 00:21:24,350
change the work being done by read the

00:21:22,490 --> 00:21:25,970
other parts of the a synchronous

00:21:24,350 --> 00:21:28,400
rendering of react is called react

00:21:25,970 --> 00:21:31,610
suspense so maybe you've seen the talk

00:21:28,400 --> 00:21:35,450
of Dan Abramov with a member of the

00:21:31,610 --> 00:21:37,700
react Jes Tim so is he is explaining

00:21:35,450 --> 00:21:42,380
quite well the link is also on the slide

00:21:37,700 --> 00:21:44,960
Oh react suspense is walking it's this

00:21:42,380 --> 00:21:48,470
new it's not a new API is just that

00:21:44,960 --> 00:21:51,169
using rack suspense you eyeball to react

00:21:48,470 --> 00:21:51,950
is able to stop the rendering of any

00:21:51,169 --> 00:21:56,539
component

00:21:51,950 --> 00:22:00,080
when you want to fetch data and and you

00:21:56,539 --> 00:22:03,260
can specify a placeholder a place order

00:22:00,080 --> 00:22:05,510
UI that is shown in case the more on

00:22:03,260 --> 00:22:06,830
drawing is not done fast enough so for

00:22:05,510 --> 00:22:09,169
example if you want to fetch data

00:22:06,830 --> 00:22:11,240
usually what we do is that we display as

00:22:09,169 --> 00:22:13,370
a spinner on the screen and if you want

00:22:11,240 --> 00:22:15,200
to display another data on another part

00:22:13,370 --> 00:22:18,320
of the screen if it's a different API

00:22:15,200 --> 00:22:21,289
call we display another spinner the idea

00:22:18,320 --> 00:22:26,360
here is to be able to launch this to

00:22:21,289 --> 00:22:30,710
request and then have a kind of try

00:22:26,360 --> 00:22:33,110
catch two to wait for both requests to

00:22:30,710 --> 00:22:36,409
be handed and then to display the data

00:22:33,110 --> 00:22:38,000
if it's not the case then after a few

00:22:36,409 --> 00:22:41,059
milliseconds react will display the

00:22:38,000 --> 00:22:44,440
spinner so if you can if your data

00:22:41,059 --> 00:22:48,260
connection is really fast the app feel

00:22:44,440 --> 00:22:51,139
feel synchronous but if your network is

00:22:48,260 --> 00:22:53,570
slow then your app still feel responsive

00:22:51,139 --> 00:22:55,519
that's that's something that is the

00:22:53,570 --> 00:22:59,210
implementation is really interesting and

00:22:55,519 --> 00:23:04,549
I will really advise you to take a look

00:22:59,210 --> 00:23:06,260
at the at Dan abiram of torque because

00:23:04,549 --> 00:23:08,059
the East Bay is playing everything in

00:23:06,260 --> 00:23:14,120
details and that's something that is

00:23:08,059 --> 00:23:18,130
really making react having a big step in

00:23:14,120 --> 00:23:21,110
front of the other UI framework I think

00:23:18,130 --> 00:23:24,130
all of us are built on react fibre which

00:23:21,110 --> 00:23:28,549
was a reemployment ation of the react

00:23:24,130 --> 00:23:32,480
core that was done last year I think and

00:23:28,549 --> 00:23:35,240
it was done entirely without any change

00:23:32,480 --> 00:23:37,190
in the in the API last thing that they

00:23:35,240 --> 00:23:40,940
are working on is to have a linear

00:23:37,190 --> 00:23:43,220
bridge so the idea here is to avoid hold

00:23:40,940 --> 00:23:47,330
the hover head that you have when

00:23:43,220 --> 00:23:50,149
sending massage on the bridge so so as

00:23:47,330 --> 00:23:52,279
to have faster answer and faster

00:23:50,149 --> 00:23:54,169
communication between JavaScript and and

00:23:52,279 --> 00:23:54,889
the native part I don't have much

00:23:54,169 --> 00:23:58,490
details

00:23:54,889 --> 00:24:03,409
but I guess that is always improvements

00:23:58,490 --> 00:24:05,539
that will make react native feel more

00:24:03,409 --> 00:24:08,389
native of course but as

00:24:05,539 --> 00:24:10,940
a better fit for hybrid application

00:24:08,389 --> 00:24:15,200
we're using you're using both react

00:24:10,940 --> 00:24:18,019
native and native components which was

00:24:15,200 --> 00:24:20,479
for example the case at on the Airbnb

00:24:18,019 --> 00:24:23,809
application again all of this is public

00:24:20,479 --> 00:24:28,369
so feel free to go on the rag native

00:24:23,809 --> 00:24:32,500
website and see everything and I think

00:24:28,369 --> 00:24:37,470
that's all things

00:24:32,500 --> 00:24:37,470

YouTube URL: https://www.youtube.com/watch?v=4UHjGNvrqzo


