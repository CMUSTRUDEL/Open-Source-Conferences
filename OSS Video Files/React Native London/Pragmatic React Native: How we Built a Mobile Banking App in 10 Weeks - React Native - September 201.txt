Title: Pragmatic React Native: How we Built a Mobile Banking App in 10 Weeks - React Native - September 201
Publication date: 2018-10-02
Playlist: React Native London
Description: 
	Presented by Félix Mézière

Capable of building a mobile banking app in 10 weeks? This is the story of 3 lean/agile developers and their toughest challenge yet. Faced with more than one hurdle, trying to work with legacy backend teams and with pressure from everywhere, I will share with you what we tried to get there and what we did to succeed… just in time.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,160
so hello everyone I will tell you today

00:00:03,030 --> 00:00:07,859
about the learnings of my team on a very

00:00:05,160 --> 00:00:11,910
intense project that I did a few months

00:00:07,859 --> 00:00:14,639
ago so I work at Theo toe where Nigel

00:00:11,910 --> 00:00:19,740
mobile and web development agency based

00:00:14,639 --> 00:00:21,180
in London so we build MVPs or help

00:00:19,740 --> 00:00:22,830
companies undergo their digital

00:00:21,180 --> 00:00:26,099
transformation so it's either very big

00:00:22,830 --> 00:00:30,929
companies or small startups and we

00:00:26,099 --> 00:00:32,309
really train our clients to agile so the

00:00:30,929 --> 00:00:35,910
goal of this project to give you a bit

00:00:32,309 --> 00:00:40,860
of context so it was in a bank secret

00:00:35,910 --> 00:00:42,270
Bank in a country far far away and so it

00:00:40,860 --> 00:00:46,350
was the first track native app that the

00:00:42,270 --> 00:00:47,489
bank was attempting to do and so

00:00:46,350 --> 00:00:50,850
basically what the problem we're trying

00:00:47,489 --> 00:00:52,829
to solve is that currently the customer

00:00:50,850 --> 00:00:55,520
onboarding for new customer on this Bank

00:00:52,829 --> 00:00:58,320
is doing 50 pages of paperwork and

00:00:55,520 --> 00:00:59,789
waiting 15 days so the goal of the

00:00:58,320 --> 00:01:01,949
project was to bring that to five

00:00:59,789 --> 00:01:05,460
minutes and the customer doing it by

00:01:01,949 --> 00:01:08,760
themself with an app so to test that we

00:01:05,460 --> 00:01:11,040
were able to do that to achieve it we

00:01:08,760 --> 00:01:12,840
sort of invented a protects which is to

00:01:11,040 --> 00:01:16,439
do a prepaid cards app where we will

00:01:12,840 --> 00:01:19,200
test if the bank's back-end teams and

00:01:16,439 --> 00:01:21,950
unpackin infrastructure and the bank's

00:01:19,200 --> 00:01:25,530
basically skills were able to achieve

00:01:21,950 --> 00:01:27,270
this customer onboarding on an app to

00:01:25,530 --> 00:01:29,130
then transfer it to their main core

00:01:27,270 --> 00:01:31,380
business right so what is a prepaid

00:01:29,130 --> 00:01:33,390
cards up it's a revolute like basically

00:01:31,380 --> 00:01:35,009
you you have a customer onboarding at

00:01:33,390 --> 00:01:37,140
the beginning where you enter your

00:01:35,009 --> 00:01:38,670
details you take a picture of your ID a

00:01:37,140 --> 00:01:40,680
picture of yourself and then when you

00:01:38,670 --> 00:01:42,930
get accepted three minutes later you can

00:01:40,680 --> 00:01:45,960
log in and when you log in you get a

00:01:42,930 --> 00:01:47,549
digital card and a real card that you

00:01:45,960 --> 00:01:51,960
can freeze and freeze use top up

00:01:47,549 --> 00:01:56,520
whatever basic very like a small part of

00:01:51,960 --> 00:01:58,520
revolutes features so the single of the

00:01:56,520 --> 00:02:03,030
project was to train the bank to agility

00:01:58,520 --> 00:02:05,399
so basically were helping them get in

00:02:03,030 --> 00:02:08,849
the mindset of how to build a product

00:02:05,399 --> 00:02:10,289
and do an MVP MVP in case someone some

00:02:08,849 --> 00:02:12,989
people don't know it's a Minimum Viable

00:02:10,289 --> 00:02:13,630
Product so its instead of trying to

00:02:12,989 --> 00:02:15,370
build a

00:02:13,630 --> 00:02:16,690
Machinery and release in two years the

00:02:15,370 --> 00:02:19,150
software that's obsolete and doesn't

00:02:16,690 --> 00:02:20,560
work build the smallest software that

00:02:19,150 --> 00:02:25,660
you can release it to production and

00:02:20,560 --> 00:02:27,220
iterate over it so we were all in the so

00:02:25,660 --> 00:02:29,980
called agile war room right because it

00:02:27,220 --> 00:02:32,230
was the first agile intent of this

00:02:29,980 --> 00:02:34,900
company we were around 20 people in its

00:02:32,230 --> 00:02:36,820
management legal cards marketing

00:02:34,900 --> 00:02:39,280
security the devs everyone together

00:02:36,820 --> 00:02:40,540
which was really nice to remove blockers

00:02:39,280 --> 00:02:43,780
right cause you can just walk to the

00:02:40,540 --> 00:02:45,700
next desk and ask when you have a

00:02:43,780 --> 00:02:46,930
problem you can ask the right person but

00:02:45,700 --> 00:02:49,270
also meant we had a lot of interruptions

00:02:46,930 --> 00:02:50,980
of people wanting to know what's going

00:02:49,270 --> 00:02:52,960
on I do devs how is this feature going

00:02:50,980 --> 00:02:54,550
why are we so slow etc etc so you can

00:02:52,960 --> 00:02:59,020
imagine so it was quite hard to push

00:02:54,550 --> 00:03:01,030
back to finish with the context we were

00:02:59,020 --> 00:03:03,100
only the front-end team were three devs

00:03:01,030 --> 00:03:04,510
were only the front-end team so we had

00:03:03,100 --> 00:03:07,210
to deal with their in-house back-end

00:03:04,510 --> 00:03:09,430
team what does this mean so first of all

00:03:07,210 --> 00:03:11,340
that's we had to deal with the legacy

00:03:09,430 --> 00:03:14,410
system under the hood you know this bank

00:03:11,340 --> 00:03:16,300
banks layers of back-end systems that

00:03:14,410 --> 00:03:18,370
the deeper you go the more legacy and we

00:03:16,300 --> 00:03:20,740
had to modify it to fit our needs so

00:03:18,370 --> 00:03:21,970
first challenge second challenge on top

00:03:20,740 --> 00:03:24,580
of that legacy back-end there was a

00:03:21,970 --> 00:03:27,190
fresh Web API that one of the devs the

00:03:24,580 --> 00:03:29,890
backend in-house devs just coded for us

00:03:27,190 --> 00:03:31,690
to call so meaning that we had a bit of

00:03:29,890 --> 00:03:35,110
the inconvenience of both things right

00:03:31,690 --> 00:03:37,780
with the the legacy code it was hard to

00:03:35,110 --> 00:03:40,960
modify the code but then the fact that

00:03:37,780 --> 00:03:43,240
we had a fresh Web API on top made that

00:03:40,960 --> 00:03:44,620
we lost the benefit of the legacy code

00:03:43,240 --> 00:03:47,260
which is that at least you know that it

00:03:44,620 --> 00:03:49,240
works normally did this API had never

00:03:47,260 --> 00:03:53,530
run before so so yeah it was it was

00:03:49,240 --> 00:03:54,910
pretty pretty worrying the second thing

00:03:53,530 --> 00:03:58,120
that was a bit worrying and that made

00:03:54,910 --> 00:03:59,740
this project quite intense is that the

00:03:58,120 --> 00:04:01,780
business kept repeating during the whole

00:03:59,740 --> 00:04:03,820
length of the thing the app has to be up

00:04:01,780 --> 00:04:06,520
to Bank standards of quality which means

00:04:03,820 --> 00:04:09,580
let's not do agile let's let's do

00:04:06,520 --> 00:04:10,990
waterfall right so okay we want to learn

00:04:09,580 --> 00:04:14,500
agile but make sure you make a perfect

00:04:10,990 --> 00:04:16,630
app that has all the features crazy so

00:04:14,500 --> 00:04:18,520
that's the context as you can see it's a

00:04:16,630 --> 00:04:21,280
very intense situation I don't think

00:04:18,520 --> 00:04:23,770
most of us are faced with that but there

00:04:21,280 --> 00:04:26,979
are hopefully some learning still on how

00:04:23,770 --> 00:04:27,520
to make a project go smoother so we had

00:04:26,979 --> 00:04:29,319
10 weeks

00:04:27,520 --> 00:04:30,610
we're two and a half deaths because one

00:04:29,319 --> 00:04:34,120
of them was Huff stuff somewhere else

00:04:30,610 --> 00:04:35,889
and we had an initial plan so what was

00:04:34,120 --> 00:04:38,169
it let's say those are the 10 weeks were

00:04:35,889 --> 00:04:40,030
at the beginning right and let's say

00:04:38,169 --> 00:04:42,580
that this represents the capacity so two

00:04:40,030 --> 00:04:45,190
and a half devs but let's have a

00:04:42,580 --> 00:04:47,620
capacity per week and I'm gonna put

00:04:45,190 --> 00:04:49,599
boxes in there to show more or less how

00:04:47,620 --> 00:04:52,840
long a feature is supposed to take and

00:04:49,599 --> 00:04:54,729
how much work for C it requires so the

00:04:52,840 --> 00:04:56,949
first thing that they told us from the

00:04:54,729 --> 00:04:59,169
beginning is that we had to code a

00:04:56,949 --> 00:05:02,169
custom encryption layer for network

00:04:59,169 --> 00:05:03,819
costs in react native so basically on

00:05:02,169 --> 00:05:07,659
both sides back-end and front-end we had

00:05:03,819 --> 00:05:11,530
to encrypt and decrypt hash verify

00:05:07,659 --> 00:05:13,539
hashes and sign our requests or generate

00:05:11,530 --> 00:05:15,039
keys I mean I learnt I learnt it there

00:05:13,539 --> 00:05:18,789
so I don't really know what it does but

00:05:15,039 --> 00:05:20,409
I just did it so imagine so in node it's

00:05:18,789 --> 00:05:21,639
already really hard but imagine if you

00:05:20,409 --> 00:05:24,039
have to do that in react native where

00:05:21,639 --> 00:05:25,840
you don't have access to all the native

00:05:24,039 --> 00:05:28,690
methods to do that the libraries are

00:05:25,840 --> 00:05:31,150
quite not very mature so so that was

00:05:28,690 --> 00:05:33,099
quite hard and the problem is that since

00:05:31,150 --> 00:05:35,169
we had to do this before we could do any

00:05:33,099 --> 00:05:38,590
back-end call we had to start doing the

00:05:35,169 --> 00:05:40,449
UI before implementing the logic and the

00:05:38,590 --> 00:05:41,770
cause of that UI that's really weird

00:05:40,449 --> 00:05:43,840
right here you start making an app

00:05:41,770 --> 00:05:46,319
that's completely dummy that has only

00:05:43,840 --> 00:05:48,699
hard-coded data in it

00:05:46,319 --> 00:05:50,110
anticipating that after more or less two

00:05:48,699 --> 00:05:54,009
weeks you will finally be able to start

00:05:50,110 --> 00:05:56,110
coding the sagas the calls etc so then

00:05:54,009 --> 00:05:57,969
we had lots of classic features that

00:05:56,110 --> 00:06:00,370
just represented roughly what we had to

00:05:57,969 --> 00:06:02,740
do Thank You reg native for that by the

00:06:00,370 --> 00:06:04,479
way one one thing I would like to

00:06:02,740 --> 00:06:06,789
mention in particular is this one so

00:06:04,479 --> 00:06:08,860
this was the core business hypothesis

00:06:06,789 --> 00:06:12,039
Junio is a service provider is the one

00:06:08,860 --> 00:06:13,930
that allows you to enter third-party

00:06:12,039 --> 00:06:16,479
allows you to match your ID with your

00:06:13,930 --> 00:06:18,699
face so the goal of the whole project

00:06:16,479 --> 00:06:19,810
was to do a flow including this one but

00:06:18,699 --> 00:06:22,389
we decided to do it

00:06:19,810 --> 00:06:24,099
post MVP to replace it with form at the

00:06:22,389 --> 00:06:28,229
beginning and to implement it just after

00:06:24,099 --> 00:06:30,729
the MVP so just I signal it for later so

00:06:28,229 --> 00:06:33,279
this was our plan and we told the

00:06:30,729 --> 00:06:35,440
business people amazing yeah it should

00:06:33,279 --> 00:06:38,020
be alright it's gonna be ok through

00:06:35,440 --> 00:06:39,520
little engine phases and of course in

00:06:38,020 --> 00:06:41,230
real life this is not what happens it

00:06:39,520 --> 00:06:45,010
wasn't ok at all and

00:06:41,230 --> 00:06:47,110
is what I came to tell you today to tell

00:06:45,010 --> 00:06:50,020
you about so I there should be learnings

00:06:47,110 --> 00:06:52,690
from heavy for everyone hopefully many

00:06:50,020 --> 00:06:56,980
on how to drive a project despite time

00:06:52,690 --> 00:06:58,810
pressure and business pressure and and

00:06:56,980 --> 00:07:01,540
generally how to effectively as a

00:06:58,810 --> 00:07:04,300
technical person communicate what is

00:07:01,540 --> 00:07:06,130
going wrong or your prioritization views

00:07:04,300 --> 00:07:07,690
like no we shouldn't do this first even

00:07:06,130 --> 00:07:09,460
though it looks shiny we have to do the

00:07:07,690 --> 00:07:10,960
tough the tough things first so I'm

00:07:09,460 --> 00:07:14,290
going to try to explain how we manage to

00:07:10,960 --> 00:07:15,490
communicate that to the business so

00:07:14,290 --> 00:07:18,190
there will be a few technical stings

00:07:15,490 --> 00:07:21,970
which many about projects communication

00:07:18,190 --> 00:07:22,900
so the knife beginnings what happened at

00:07:21,970 --> 00:07:25,120
the beginning so we were quite

00:07:22,900 --> 00:07:29,680
optimistic we run on the project we

00:07:25,120 --> 00:07:32,550
start and we were here so what happened

00:07:29,680 --> 00:07:35,880
here first week the guys the business as

00:07:32,550 --> 00:07:38,530
Waterfall organization that they were

00:07:35,880 --> 00:07:40,120
picked one thing of the idea of MVP that

00:07:38,530 --> 00:07:41,890
I really like is that you can ask people

00:07:40,120 --> 00:07:43,630
to deliver something at a given date

00:07:41,890 --> 00:07:47,140
they really really like that idea so

00:07:43,630 --> 00:07:49,150
they said ok guys MVPs gonna be on week

00:07:47,140 --> 00:07:52,270
six and you guys managed to fit it in

00:07:49,150 --> 00:07:54,820
there okay so yeah okay let's move stuff

00:07:52,270 --> 00:07:56,260
around a little bit might not fit this

00:07:54,820 --> 00:07:58,060
part but we'll see how it is with this

00:07:56,260 --> 00:07:59,650
feature which might go so we lost a

00:07:58,060 --> 00:08:01,270
little angel face but we're still quite

00:07:59,650 --> 00:08:06,340
optimistic and said ok let's crack on

00:08:01,270 --> 00:08:08,050
let's do this so once again with we

00:08:06,340 --> 00:08:10,300
still had the business the core of the

00:08:08,050 --> 00:08:12,460
business fitting there so it was it was

00:08:10,300 --> 00:08:13,930
ok spoiler we should have said no

00:08:12,460 --> 00:08:17,080
already at this stage but yeah we'll see

00:08:13,930 --> 00:08:18,940
so one thing we got right at this point

00:08:17,080 --> 00:08:22,570
is that we got rid of the bottlenecks

00:08:18,940 --> 00:08:24,040
what do I mean by that so imagine a

00:08:22,570 --> 00:08:26,200
situation I'm going to do a schematic

00:08:24,040 --> 00:08:30,010
situation where you have a big chunk of

00:08:26,200 --> 00:08:32,200
shiny UI to do and a task that has a

00:08:30,010 --> 00:08:34,960
dependency so what's the dependency it's

00:08:32,200 --> 00:08:37,450
before you can do the backend work the

00:08:34,960 --> 00:08:39,460
backend cause you have to code this

00:08:37,450 --> 00:08:42,610
encryption layer and this dependency

00:08:39,460 --> 00:08:44,890
even worse is a bottleneck meaning that

00:08:42,610 --> 00:08:46,480
your own you only can have so many

00:08:44,890 --> 00:08:48,520
developers working on it at the same

00:08:46,480 --> 00:08:49,930
time for example the encryption layer we

00:08:48,520 --> 00:08:52,120
couldn't put three guys trying to figure

00:08:49,930 --> 00:08:54,370
it out it's a one developer track where

00:08:52,120 --> 00:08:55,870
you have to progress so if you did

00:08:54,370 --> 00:08:59,320
that you have a piece of work like this

00:08:55,870 --> 00:09:01,390
of course if you start by doing the

00:08:59,320 --> 00:09:02,980
shiny stuff because you think business

00:09:01,390 --> 00:09:04,420
will be very happy to see how much you

00:09:02,980 --> 00:09:06,430
can produce and you will reassure

00:09:04,420 --> 00:09:07,480
yourself on your speed then this is

00:09:06,430 --> 00:09:09,610
what's going to happen after right

00:09:07,480 --> 00:09:11,560
you're going to fail it seems really

00:09:09,610 --> 00:09:14,200
obvious but but it isn't it's hard to

00:09:11,560 --> 00:09:15,850
detect these situations so yeah you

00:09:14,200 --> 00:09:17,740
might not deliver anything miss

00:09:15,850 --> 00:09:20,500
detecting future problems if you work on

00:09:17,740 --> 00:09:23,170
the resistive first and run out of work

00:09:20,500 --> 00:09:25,060
because once you have done all the big

00:09:23,170 --> 00:09:28,300
obvious piece of work then when you have

00:09:25,060 --> 00:09:30,820
a dependency like this you might have

00:09:28,300 --> 00:09:32,170
developers that that are idle so what

00:09:30,820 --> 00:09:34,420
you need to do of course is to first

00:09:32,170 --> 00:09:37,660
work on the hard thing that's not really

00:09:34,420 --> 00:09:39,880
visible and then fit the rest of the UI

00:09:37,660 --> 00:09:41,950
where you can and you can succeed so

00:09:39,880 --> 00:09:43,510
applying this principle we started

00:09:41,950 --> 00:09:46,600
working on the encryption layer as I was

00:09:43,510 --> 00:09:49,690
telling you before and and this allowed

00:09:46,600 --> 00:09:53,920
us to figure out problems really early

00:09:49,690 --> 00:09:55,600
so what happened when we got here so end

00:09:53,920 --> 00:10:01,540
of the coding of the encryption layer

00:09:55,600 --> 00:10:02,260
right well reality hit us so it wasn't

00:10:01,540 --> 00:10:04,089
the case at all

00:10:02,260 --> 00:10:05,589
that it will last two weeks why because

00:10:04,089 --> 00:10:08,560
as I said it's really hard to cut that

00:10:05,589 --> 00:10:09,910
in Jes and I mean we're just calling a

00:10:08,560 --> 00:10:12,250
back-end we don't know what happens

00:10:09,910 --> 00:10:16,180
there inside it's extremely hard to

00:10:12,250 --> 00:10:17,440
debug we didn't know if it was us or the

00:10:16,180 --> 00:10:19,360
backend that was wrong like we had no

00:10:17,440 --> 00:10:21,910
clue where we were what we had though

00:10:19,360 --> 00:10:25,000
was two example apps that the bank had

00:10:21,910 --> 00:10:26,529
built before on iOS and on Android with

00:10:25,000 --> 00:10:28,270
native code that implemented the

00:10:26,529 --> 00:10:30,100
security layer so we decided okay let's

00:10:28,270 --> 00:10:32,680
stop everything and let's try to

00:10:30,100 --> 00:10:34,209
implement that in native code so we are

00:10:32,680 --> 00:10:36,370
JavaScript developers none of us had

00:10:34,209 --> 00:10:39,040
ever touched any type of native code and

00:10:36,370 --> 00:10:41,290
we had like two weeks maximum to figure

00:10:39,040 --> 00:10:43,140
out something unless or or we will fail

00:10:41,290 --> 00:10:45,279
completely project

00:10:43,140 --> 00:10:47,709
fortunately good news if you ever have

00:10:45,279 --> 00:10:49,630
to do that it's quite easy to figure out

00:10:47,709 --> 00:10:51,760
first of all bridging I don't know you

00:10:49,630 --> 00:10:53,470
probably have heard a lot about bridging

00:10:51,760 --> 00:10:54,640
already so I'm not gonna explain you how

00:10:53,470 --> 00:10:56,350
it works I'm just going to explain you

00:10:54,640 --> 00:10:58,480
it's extremely easy you have this

00:10:56,350 --> 00:11:01,029
library 600 stars and in half an hour

00:10:58,480 --> 00:11:03,459
you get a hello world from your native

00:11:01,029 --> 00:11:05,680
code to your replica debugger like it's

00:11:03,459 --> 00:11:07,510
really easy console.log so if you have

00:11:05,680 --> 00:11:09,399
to do just a little function for

00:11:07,510 --> 00:11:11,350
we'll need like encryption a bunch of

00:11:09,399 --> 00:11:14,170
functions it's really nice to do it with

00:11:11,350 --> 00:11:17,620
this Java and Swift are actually quite

00:11:14,170 --> 00:11:19,180
okay so for a person that codes

00:11:17,620 --> 00:11:21,760
JavaScript a daily basis you write your

00:11:19,180 --> 00:11:25,209
instructions it's nice what is not okay

00:11:21,760 --> 00:11:28,420
at all though is Objective C really I do

00:11:25,209 --> 00:11:29,920
you guys seem to know what it is like

00:11:28,420 --> 00:11:31,570
when I saw this thing where at the end

00:11:29,920 --> 00:11:33,910
of the name of the function is the first

00:11:31,570 --> 00:11:37,120
argument I mean I I just started crying

00:11:33,910 --> 00:11:39,250
anyway so and the prime is that we had a

00:11:37,120 --> 00:11:41,519
piece of code on iOS that we really

00:11:39,250 --> 00:11:44,290
needed to translate into Swift

00:11:41,519 --> 00:11:46,029
fortunately most of you know it probably

00:11:44,290 --> 00:11:48,100
but the two languages are equivalent so

00:11:46,029 --> 00:11:50,649
you can literally paste a piece of code

00:11:48,100 --> 00:11:52,180
of Objective C a function in a tool for

00:11:50,649 --> 00:11:54,100
example called Swift if I on internet

00:11:52,180 --> 00:11:56,230
and translates it in Swift so having

00:11:54,100 --> 00:11:59,949
Objective C is like having Swift and it

00:11:56,230 --> 00:12:01,839
saved our day but so takeaway from this

00:11:59,949 --> 00:12:03,370
is that we lost two weeks initially by

00:12:01,839 --> 00:12:04,990
trying to replicate in JavaScript

00:12:03,370 --> 00:12:07,329
something that's really complicated and

00:12:04,990 --> 00:12:09,279
that we had an example code for so the

00:12:07,329 --> 00:12:10,959
lesson is that we should have not been

00:12:09,279 --> 00:12:12,310
afraid of native code and done it from

00:12:10,959 --> 00:12:15,010
the beginning we would have said a lot

00:12:12,310 --> 00:12:17,589
of time why a lot of time because the

00:12:15,010 --> 00:12:19,930
consequence of this going so big

00:12:17,589 --> 00:12:22,480
remember it's a dependency that then the

00:12:19,930 --> 00:12:27,130
back in works moves here right and

00:12:22,480 --> 00:12:28,870
that's quite problematic so at this

00:12:27,130 --> 00:12:32,139
stage we got the second thing right

00:12:28,870 --> 00:12:34,269
still in our naivety we were quite

00:12:32,139 --> 00:12:36,010
worried but we got a few things right so

00:12:34,269 --> 00:12:38,769
the second thing we got read is that we

00:12:36,010 --> 00:12:41,110
secured what's critical so yes it says

00:12:38,769 --> 00:12:42,579
if there is a risk to fail short start

00:12:41,110 --> 00:12:44,889
by doing the business critical features

00:12:42,579 --> 00:12:47,199
that the app can't exist without so

00:12:44,889 --> 00:12:48,779
remember the jr. flow when we saw that

00:12:47,199 --> 00:12:52,209
this thing was going to take so long

00:12:48,779 --> 00:12:54,279
with me we tried to plan the features

00:12:52,209 --> 00:12:56,740
and we saw that the correct policies of

00:12:54,279 --> 00:12:58,420
the project might not only not make it

00:12:56,740 --> 00:13:00,699
in a VP but not make it the whole

00:12:58,420 --> 00:13:02,920
project at all and that would have meant

00:13:00,699 --> 00:13:04,899
failure immediately and that we would

00:13:02,920 --> 00:13:06,430
have lost our credibility and we will

00:13:04,899 --> 00:13:08,800
then have basically deliver the value

00:13:06,430 --> 00:13:12,449
and tested the hypothesis we wanted so

00:13:08,800 --> 00:13:17,649
we moved it back and we got here

00:13:12,449 --> 00:13:19,269
so here what happened we got a third

00:13:17,649 --> 00:13:21,130
thing right and that is lewder the last

00:13:19,269 --> 00:13:23,140
thing right that we got

00:13:21,130 --> 00:13:25,149
promise so we focused on what's

00:13:23,140 --> 00:13:26,740
uncertain so remember we're here meaning

00:13:25,149 --> 00:13:28,390
we're finally we have coded the

00:13:26,740 --> 00:13:31,480
encryption layer and we're about to

00:13:28,390 --> 00:13:33,640
start working with the back-end team so

00:13:31,480 --> 00:13:36,010
again my little schematic so let's say

00:13:33,640 --> 00:13:37,750
you're here and the beginning of a piece

00:13:36,010 --> 00:13:38,800
of work right wiring everything to the

00:13:37,750 --> 00:13:40,959
back end you're finished your encryption

00:13:38,800 --> 00:13:42,910
layer and you don't know you're not sure

00:13:40,959 --> 00:13:43,870
how long it's going to take you same

00:13:42,910 --> 00:13:45,399
thing you need to detect these

00:13:43,870 --> 00:13:48,820
situations if you don't do anything

00:13:45,399 --> 00:13:50,790
about it when you end up here you fail

00:13:48,820 --> 00:13:53,500
right if you're in the bad case scenario

00:13:50,790 --> 00:13:55,990
then there's another case if when you

00:13:53,500 --> 00:13:57,580
get here it's actually this big then

00:13:55,990 --> 00:13:59,830
actually you have no excuse to have

00:13:57,580 --> 00:14:02,020
missed the elephant in the room and and

00:13:59,830 --> 00:14:03,279
you've failed but even more like you

00:14:02,020 --> 00:14:05,020
don't know what's gonna happen so what

00:14:03,279 --> 00:14:07,290
should you do when you detect a piece of

00:14:05,020 --> 00:14:10,270
work where you have a bit of uncertainty

00:14:07,290 --> 00:14:12,520
the same confusion as before you should

00:14:10,270 --> 00:14:14,890
immediately put all your capacity on

00:14:12,520 --> 00:14:18,220
that piece of work all the developers on

00:14:14,890 --> 00:14:19,450
the big thing the big chunk that you

00:14:18,220 --> 00:14:22,089
don't know if is going to explode in

00:14:19,450 --> 00:14:23,790
your hands or not and then we're

00:14:22,089 --> 00:14:25,990
best-case scenario everything fits

00:14:23,790 --> 00:14:27,970
worst-case scenario at least you can

00:14:25,990 --> 00:14:30,899
warn the team the business way earlier

00:14:27,970 --> 00:14:35,110
for everyone to react together and adapt

00:14:30,899 --> 00:14:36,760
to to the problems so I consider this as

00:14:35,110 --> 00:14:38,500
a success as well because I'm in

00:14:36,760 --> 00:14:40,240
realities reality sometimes something is

00:14:38,500 --> 00:14:43,270
hard you just have to make sure that you

00:14:40,240 --> 00:14:45,220
are aware of it as early as possible so

00:14:43,270 --> 00:14:48,459
applying this principle we were here we

00:14:45,220 --> 00:14:49,930
put all the team on the big chunk the

00:14:48,459 --> 00:14:51,100
big piece of work with the back-end team

00:14:49,930 --> 00:14:53,410
because we didn't know how this team

00:14:51,100 --> 00:14:55,540
worked we didn't know remember we had

00:14:53,410 --> 00:14:57,010
this fresh API that was never tested and

00:14:55,540 --> 00:15:00,430
all his legacy code it was really really

00:14:57,010 --> 00:15:03,010
scary and so what does it look like to

00:15:00,430 --> 00:15:05,589
allocate a full team on what one big a

00:15:03,010 --> 00:15:07,810
certain task like this it looks like

00:15:05,589 --> 00:15:11,200
this so I don't know if you know about

00:15:07,810 --> 00:15:13,240
scrum and agile and Kanban stuff but at

00:15:11,200 --> 00:15:15,220
some point so scrum is about sizing task

00:15:13,240 --> 00:15:16,870
sizing tickets and saying ok next week

00:15:15,220 --> 00:15:18,700
we're going to do this does this study

00:15:16,870 --> 00:15:19,870
says this task and we know it's more or

00:15:18,700 --> 00:15:21,700
less going to take these times which

00:15:19,870 --> 00:15:23,440
should be fine when you're on completely

00:15:21,700 --> 00:15:26,020
uncertain work you have no clue where

00:15:23,440 --> 00:15:27,550
you're going you cannot size tasks so we

00:15:26,020 --> 00:15:30,400
just started figuring out ways of

00:15:27,550 --> 00:15:32,260
logging those tasks each each one of

00:15:30,400 --> 00:15:32,889
these rows is a back-end call and we

00:15:32,260 --> 00:15:35,439
were basically

00:15:32,889 --> 00:15:39,699
the percentage of how much we thought of

00:15:35,439 --> 00:15:40,899
it was working and this is how we

00:15:39,699 --> 00:15:42,879
progress the first week with the

00:15:40,899 --> 00:15:45,009
back-end team so a bit of context maybe

00:15:42,879 --> 00:15:46,989
because I'm not sure I've been clear the

00:15:45,009 --> 00:15:49,989
problem with that back-end team is that

00:15:46,989 --> 00:15:52,239
they hadn't coded their side of the

00:15:49,989 --> 00:15:54,399
encryption layer meaning that they could

00:15:52,239 --> 00:15:56,139
not call their own back-end what does

00:15:54,399 --> 00:15:59,199
this mean that they are never executed

00:15:56,139 --> 00:16:00,939
their code ones not they didn't write

00:15:59,199 --> 00:16:03,129
tests of course because they cannot even

00:16:00,939 --> 00:16:05,049
execute their code so have you ever seen

00:16:03,129 --> 00:16:06,759
a piece of code that works without

00:16:05,049 --> 00:16:09,160
having executed it is completely crazy

00:16:06,759 --> 00:16:11,559
so the guys were waiting for us to have

00:16:09,160 --> 00:16:12,819
the app to click the button to finally

00:16:11,559 --> 00:16:14,470
execute their code for the first time

00:16:12,819 --> 00:16:16,329
and of course it doesn't work so this is

00:16:14,470 --> 00:16:17,919
why you have to know percentages you're

00:16:16,329 --> 00:16:19,869
like okay twenty percent of this code

00:16:17,919 --> 00:16:21,489
works but then on the third service

00:16:19,869 --> 00:16:22,899
there it breaks on the first two

00:16:21,489 --> 00:16:26,049
services go through but the third one

00:16:22,899 --> 00:16:28,329
works and we're logging this so putting

00:16:26,049 --> 00:16:30,339
our capacity on it in like three days we

00:16:28,329 --> 00:16:33,309
managed to have tested a bit all of the

00:16:30,339 --> 00:16:35,410
calls lots of Denver and 95% I don't

00:16:33,309 --> 00:16:36,730
know why and so the consequence of this

00:16:35,410 --> 00:16:39,759
in the front-end code is that you have

00:16:36,730 --> 00:16:41,589
like 25 sagas that are all stacked that

00:16:39,759 --> 00:16:43,239
you have to refactor for a month and a

00:16:41,589 --> 00:16:45,669
half that you have fights over after I

00:16:43,239 --> 00:16:49,989
mean I don't wish you this at all ever

00:16:45,669 --> 00:16:52,119
as anyway so here stuff starts to look

00:16:49,989 --> 00:16:56,619
really bad right and here it's chapter

00:16:52,119 --> 00:16:57,939
two starts so I think yeah the beginning

00:16:56,619 --> 00:16:59,949
of this part I think is the date where

00:16:57,939 --> 00:17:02,730
we started to leave the work on average

00:16:59,949 --> 00:17:06,610
at 9 p.m. because stuff just goes crazy

00:17:02,730 --> 00:17:08,769
so what happened the first week of work

00:17:06,610 --> 00:17:13,089
with the back-end team past and we

00:17:08,769 --> 00:17:15,850
encountered problems of course so first

00:17:13,089 --> 00:17:18,579
of all here yeah remember I told you

00:17:15,850 --> 00:17:20,350
that we started coding the UI and the

00:17:18,579 --> 00:17:21,850
backend separately now that the

00:17:20,350 --> 00:17:24,100
encryption layer took all the space we

00:17:21,850 --> 00:17:27,250
had done almost all the UI hard-coded

00:17:24,100 --> 00:17:28,630
with no back end what does this mean

00:17:27,250 --> 00:17:33,309
that of course when you try to connect

00:17:28,630 --> 00:17:35,320
them this happens concretely the guys

00:17:33,309 --> 00:17:37,450
were answering us to hundreds for

00:17:35,320 --> 00:17:38,980
everything so even when there was a big

00:17:37,450 --> 00:17:41,169
they were answering us 200 how do you

00:17:38,980 --> 00:17:42,610
handle that can you please answer me 400

00:17:41,169 --> 00:17:44,470
if there is an error oh yeah ok I'll do

00:17:42,610 --> 00:17:47,080
that for you what if we had realized

00:17:44,470 --> 00:17:49,180
that five weeks before lots of wasted

00:17:47,080 --> 00:17:52,090
avoided for both teams but we hadn't

00:17:49,180 --> 00:17:53,950
because of that security layer again

00:17:52,090 --> 00:17:56,190
they didn't execute their code even once

00:17:53,950 --> 00:17:59,200
as I explained you

00:17:56,190 --> 00:18:01,240
so actually we were dependent on the

00:17:59,200 --> 00:18:03,160
backend as any front-end but the backend

00:18:01,240 --> 00:18:04,480
was dependent on us to develop their

00:18:03,160 --> 00:18:08,110
features remember because they had to

00:18:04,480 --> 00:18:10,660
click it's crazy and the last thing that

00:18:08,110 --> 00:18:12,070
that made us lose a lot of time that we

00:18:10,660 --> 00:18:14,650
didn't detect with the back-end team is

00:18:12,070 --> 00:18:15,640
that they had one development server so

00:18:14,650 --> 00:18:19,120
I don't know if you have developed like

00:18:15,640 --> 00:18:20,140
this ever but the guys don't develop in

00:18:19,120 --> 00:18:22,240
their local machines they have a

00:18:20,140 --> 00:18:24,220
development server meaning that if one

00:18:22,240 --> 00:18:26,680
of them puts a breakpoint is going to

00:18:24,220 --> 00:18:29,620
stop the other ones so we would often

00:18:26,680 --> 00:18:30,070
like hey can you test the call for me

00:18:29,620 --> 00:18:32,350
please

00:18:30,070 --> 00:18:34,270
ok so I interrupt my task ok we'll mount

00:18:32,350 --> 00:18:35,410
the app on the simulator I will click on

00:18:34,270 --> 00:18:38,230
the button for you I will wire

00:18:35,410 --> 00:18:41,290
everything ok I clicked 30 seconds later

00:18:38,230 --> 00:18:43,240
I'll show you clicked yeah yeah let me

00:18:41,290 --> 00:18:44,860
do it again still doesn't come through

00:18:43,240 --> 00:18:47,800
hey guys did someone put a breakpoint

00:18:44,860 --> 00:18:48,280
yeah yeah it's me can you give me two

00:18:47,800 --> 00:18:50,620
minutes please

00:18:48,280 --> 00:18:52,150
ok at least they could have a dashboard

00:18:50,620 --> 00:18:54,100
showing who is putting a breakpoint on

00:18:52,150 --> 00:18:56,760
something so when you realize this

00:18:54,100 --> 00:19:02,440
problem six weeks after you're like guys

00:18:56,760 --> 00:19:04,030
anyway second thing so obviously we had

00:19:02,440 --> 00:19:05,590
a lot of design flaws in your fronting

00:19:04,030 --> 00:19:08,770
that we did not detect because we did

00:19:05,590 --> 00:19:10,780
not worry at the backend so for example

00:19:08,770 --> 00:19:13,450
one good friend of us that is present

00:19:10,780 --> 00:19:14,920
today gave us an amazing advice of using

00:19:13,450 --> 00:19:17,650
middle words and not bothering using

00:19:14,920 --> 00:19:19,390
Saiga's do not try to do that I don't

00:19:17,650 --> 00:19:21,250
advise you so once you have the Saiga's

00:19:19,390 --> 00:19:23,380
first of all it's less boilerplate to

00:19:21,250 --> 00:19:25,870
write and seconds have amazing seeing

00:19:23,380 --> 00:19:27,520
things like take for example that I

00:19:25,870 --> 00:19:29,050
don't know it seems so simple but in

00:19:27,520 --> 00:19:30,970
middleware I couldn't even write to take

00:19:29,050 --> 00:19:35,050
so we had to refactor all or neither

00:19:30,970 --> 00:19:36,490
ways into sagas for example and yeah

00:19:35,050 --> 00:19:38,680
basically instead of doing feature by

00:19:36,490 --> 00:19:40,570
feature you visit all the features in

00:19:38,680 --> 00:19:42,970
the front end first and by wearing the

00:19:40,570 --> 00:19:44,260
back end after you revisit demo so there

00:19:42,970 --> 00:19:50,560
is a lot of context switching with that

00:19:44,260 --> 00:19:52,570
right lots of time lost so that's why we

00:19:50,560 --> 00:19:55,060
push back a bit the back end and then

00:19:52,570 --> 00:19:58,060
another week passed and what happened

00:19:55,060 --> 00:20:00,370
here you will have guests of course it

00:19:58,060 --> 00:20:02,640
got even worse more problems what are

00:20:00,370 --> 00:20:05,140
the problem

00:20:02,640 --> 00:20:07,510
so we started putting stuff in prod

00:20:05,140 --> 00:20:11,470
right remember this whole principle that

00:20:07,510 --> 00:20:16,000
we all apply now so we did that wasn't

00:20:11,470 --> 00:20:18,070
the case why so the guys did not have

00:20:16,000 --> 00:20:20,110
test data so first of all sometimes they

00:20:18,070 --> 00:20:21,700
didn't have test dll's or whatever

00:20:20,110 --> 00:20:24,610
meaning that the test server could not

00:20:21,700 --> 00:20:26,890
run some features so meaning that

00:20:24,610 --> 00:20:28,690
sometimes they were telling us oh sorry

00:20:26,890 --> 00:20:30,070
we can test this we have to wait to be

00:20:28,690 --> 00:20:32,410
in production to see if it works

00:20:30,070 --> 00:20:34,090
okay so you can imagine that you use a

00:20:32,410 --> 00:20:36,310
few weeks if you start having to test

00:20:34,090 --> 00:20:38,740
features like that the second thing is

00:20:36,310 --> 00:20:40,750
that they could not control their test

00:20:38,740 --> 00:20:43,060
database I can notice that as you create

00:20:40,750 --> 00:20:45,160
fake customers you delete them etc here

00:20:43,060 --> 00:20:46,510
once we had used up a real person's ID

00:20:45,160 --> 00:20:48,880
it was finish you had to find another

00:20:46,510 --> 00:20:50,200
one to create and this app is about the

00:20:48,880 --> 00:20:52,960
onboarding flow so it's about creating

00:20:50,200 --> 00:20:54,520
accounts at the core of it so once we

00:20:52,960 --> 00:20:57,130
had used up the twenty people in the

00:20:54,520 --> 00:20:59,020
room we had to start calling friends I

00:20:57,130 --> 00:21:01,690
mean one of us the UK guy had to go

00:20:59,020 --> 00:21:04,060
create an idea of that country to make

00:21:01,690 --> 00:21:05,410
an account and crazy situations so of

00:21:04,060 --> 00:21:08,530
course you lose a lot of time with that

00:21:05,410 --> 00:21:10,120
and finally last problem that you

00:21:08,530 --> 00:21:11,740
encounter at this point was a few

00:21:10,120 --> 00:21:15,490
back-end design flow so I won't enter

00:21:11,740 --> 00:21:18,030
into details but big big problems like

00:21:15,490 --> 00:21:21,040
the guys were so they were sending us

00:21:18,030 --> 00:21:23,830
flags so we were supposed to set flags

00:21:21,040 --> 00:21:27,640
in the backend stating at which stage

00:21:23,830 --> 00:21:30,370
the customer was in the flow but those

00:21:27,640 --> 00:21:32,440
flags were wiped out if we if we

00:21:30,370 --> 00:21:34,690
uninstall the app right there was an

00:21:32,440 --> 00:21:36,460
idea to remember remember them so this

00:21:34,690 --> 00:21:38,680
mean that they intended us to use the

00:21:36,460 --> 00:21:40,240
backend as a hard drive so after a week

00:21:38,680 --> 00:21:41,680
you realized but guys I'm just gonna use

00:21:40,240 --> 00:21:43,990
the local storage why did you build this

00:21:41,680 --> 00:21:45,910
whole feature so again so many so much

00:21:43,990 --> 00:21:48,220
time lost by the guy who coded this in

00:21:45,910 --> 00:21:49,600
the first place on the back-end team we

00:21:48,220 --> 00:21:51,160
didn't challenge him on that we didn't

00:21:49,600 --> 00:21:53,080
know he was doing that

00:21:51,160 --> 00:21:54,550
second thing is yeah they weren't

00:21:53,080 --> 00:21:56,560
sending us some logic that we needed

00:21:54,550 --> 00:21:58,210
lots of free work that we didn't detect

00:21:56,560 --> 00:22:03,190
because we worked separately in the

00:21:58,210 --> 00:22:06,400
beginning so what happens here so we

00:22:03,190 --> 00:22:07,870
complete failure right what happens here

00:22:06,400 --> 00:22:10,630
is that now business comes in right

00:22:07,870 --> 00:22:13,000
because it's the week seven six I don't

00:22:10,630 --> 00:22:13,990
remember exactly you are three four

00:22:13,000 --> 00:22:15,730
weeks before

00:22:13,990 --> 00:22:17,890
project you haven't really put in prod

00:22:15,730 --> 00:22:19,390
they see all these problems they hear

00:22:17,890 --> 00:22:20,890
about back in problems but they don't

00:22:19,390 --> 00:22:22,059
see them right they don't they don't

00:22:20,890 --> 00:22:23,440
really understand what it is you try to

00:22:22,059 --> 00:22:25,059
explain them sometimes they get

00:22:23,440 --> 00:22:27,039
interested sometimes not they have time

00:22:25,059 --> 00:22:28,809
they don't have time and so here they

00:22:27,039 --> 00:22:31,120
start reminding about the real priority

00:22:28,809 --> 00:22:33,520
of the project right that is to actually

00:22:31,120 --> 00:22:34,990
train their in-house developers to react

00:22:33,520 --> 00:22:37,419
native guys don't forget this is the

00:22:34,990 --> 00:22:40,539
priority and your we hadn't even started

00:22:37,419 --> 00:22:42,010
doing that and they come and they tell

00:22:40,539 --> 00:22:45,039
you that and then they started putting

00:22:42,010 --> 00:22:47,140
meetings all the time telling us guys

00:22:45,039 --> 00:22:49,330
can you please fix this bug that I found

00:22:47,140 --> 00:22:51,490
here sorry I'm trying to make the top up

00:22:49,330 --> 00:22:52,899
work which is like the core thing of the

00:22:51,490 --> 00:22:55,270
app where are you asking me to change

00:22:52,899 --> 00:22:57,250
your input code padding I mean come on

00:22:55,270 --> 00:22:59,140
anyway but the guys start to freak out

00:22:57,250 --> 00:23:03,700
and they really really react youself and

00:22:59,140 --> 00:23:05,200
also we get the code cutting adapter the

00:23:03,700 --> 00:23:07,090
bank which means we couldn't use CI

00:23:05,200 --> 00:23:12,000
services for example and we had security

00:23:07,090 --> 00:23:15,940
audits taking time I mean yeah crazy

00:23:12,000 --> 00:23:18,580
sorry quickly but this was really a

00:23:15,940 --> 00:23:21,309
crazy moment and so what had we done

00:23:18,580 --> 00:23:23,440
wrong had how did we get here so my

00:23:21,309 --> 00:23:25,720
diagnosis is that we did not ask the

00:23:23,440 --> 00:23:28,000
hard questions at the beginning we did a

00:23:25,720 --> 00:23:30,250
few things right but we mainly did other

00:23:28,000 --> 00:23:33,100
things wrong we didn't do the go and see

00:23:30,250 --> 00:23:35,440
what is that so the go and see is when

00:23:33,100 --> 00:23:37,570
the business guy told us that the app we

00:23:35,440 --> 00:23:40,000
need to implement that custom encryption

00:23:37,570 --> 00:23:41,289
layer and certificate pinning instead of

00:23:40,000 --> 00:23:44,049
saying yeah yeah let's do it we should

00:23:41,289 --> 00:23:45,669
have asked okay can I see right now the

00:23:44,049 --> 00:23:47,860
requirements of it's a code base that

00:23:45,669 --> 00:23:49,990
implements it and we will have reacted

00:23:47,860 --> 00:23:51,940
immediately telling them okay guys we

00:23:49,990 --> 00:23:53,500
have to get this encryption layer out of

00:23:51,940 --> 00:23:55,330
the way before bringing him on the

00:23:53,500 --> 00:23:56,830
developer teams so that when they start

00:23:55,330 --> 00:23:58,779
the backend and front-end work

00:23:56,830 --> 00:23:59,970
hand-in-hand together and we don't have

00:23:58,779 --> 00:24:02,309
all these problems

00:23:59,970 --> 00:24:04,600
we also would have detected all these

00:24:02,309 --> 00:24:06,130
backend design flows because we would

00:24:04,600 --> 00:24:09,100
have started working hand-in-hand from

00:24:06,130 --> 00:24:10,419
the beginning the second thing that we

00:24:09,100 --> 00:24:13,059
didn't do the second go and see we

00:24:10,419 --> 00:24:14,440
didn't do is when they told us that we

00:24:13,059 --> 00:24:15,130
are working with a back-end team that's

00:24:14,440 --> 00:24:18,010
not us

00:24:15,130 --> 00:24:20,590
we should have asked them okay can I now

00:24:18,010 --> 00:24:22,389
code just a small feature with them put

00:24:20,590 --> 00:24:24,220
it in staging put it in prod and see

00:24:22,389 --> 00:24:26,470
what happens we would have detected that

00:24:24,220 --> 00:24:27,400
their code isn't tested and therefore it

00:24:26,470 --> 00:24:29,440
doesn't work

00:24:27,400 --> 00:24:30,940
that they bother each other when

00:24:29,440 --> 00:24:32,830
debugging so okay let's try to do

00:24:30,940 --> 00:24:35,410
something about it and that they don't

00:24:32,830 --> 00:24:37,660
have this data at all so actually this

00:24:35,410 --> 00:24:39,460
is real feedback that the client gave us

00:24:37,660 --> 00:24:41,350
on week 8 they said why didn't you

00:24:39,460 --> 00:24:44,410
figure out the problems before by

00:24:41,350 --> 00:24:46,330
sitting down with our guys so so yeah I

00:24:44,410 --> 00:24:49,000
think this is like the main learning

00:24:46,330 --> 00:24:51,220
from this experience is that we need to

00:24:49,000 --> 00:24:52,540
take time to figure out what are going

00:24:51,220 --> 00:24:54,610
to be the biggest pain points at the

00:24:52,540 --> 00:24:57,580
beginning of a project instead of trying

00:24:54,610 --> 00:24:59,380
to just rush through so how did we

00:24:57,580 --> 00:25:01,240
survive in the end because we ended up

00:24:59,380 --> 00:25:04,300
being quite successful with this app

00:25:01,240 --> 00:25:05,860
what what are what what did we do so we

00:25:04,300 --> 00:25:09,190
asked for help so a lot of people and

00:25:05,860 --> 00:25:11,620
what what should we do now so as a team

00:25:09,190 --> 00:25:13,600
I'd say with the business we

00:25:11,620 --> 00:25:16,600
communicated a look and we too took

00:25:13,600 --> 00:25:18,250
strong decisions and we did that early

00:25:16,600 --> 00:25:20,110
in us to do to not fail so if you do

00:25:18,250 --> 00:25:23,830
this on week 9 of 10 you're going to

00:25:20,110 --> 00:25:25,210
fail we did it around week 6 or 7 which

00:25:23,830 --> 00:25:27,970
meant we were okay so first we

00:25:25,210 --> 00:25:30,340
challenged features so yeah when a guy

00:25:27,970 --> 00:25:35,050
tells you we need magic feeling that

00:25:30,340 --> 00:25:37,120
when the person enters there their email

00:25:35,050 --> 00:25:38,530
they received the input code by SMS and

00:25:37,120 --> 00:25:39,760
that input code is automatically

00:25:38,530 --> 00:25:42,520
transferred to the app so that they

00:25:39,760 --> 00:25:44,770
don't have to go in the SMS app to come

00:25:42,520 --> 00:25:47,100
on we're not even having the backend

00:25:44,770 --> 00:25:49,840
work let's remove this feature no way

00:25:47,100 --> 00:25:52,240
same thing when the guy tells you on my

00:25:49,840 --> 00:25:54,280
Galaxy s8 the top of the code impurity

00:25:52,240 --> 00:25:55,810
Scott say ok I don't care we'll figure

00:25:54,280 --> 00:25:58,300
it in four weeks so we started saying

00:25:55,810 --> 00:25:58,990
really let's just focus on the

00:25:58,300 --> 00:26:01,630
priorities

00:25:58,990 --> 00:26:04,240
second thing is we sat down to spend

00:26:01,630 --> 00:26:06,040
time to solve problems so remember the

00:26:04,240 --> 00:26:09,130
guys didn't test their code the back-end

00:26:06,040 --> 00:26:11,470
team so we one of our team members

00:26:09,130 --> 00:26:12,820
actually not not me me I was trying to

00:26:11,470 --> 00:26:14,350
rush but one of a team Emma said okay

00:26:12,820 --> 00:26:16,450
I'm going to sit down pause for three

00:26:14,350 --> 00:26:18,400
days code and not jealous tool that

00:26:16,450 --> 00:26:19,630
we'll be able to call the backend so

00:26:18,400 --> 00:26:21,430
that they are more independent and

00:26:19,630 --> 00:26:22,960
actually this was the best thing the

00:26:21,430 --> 00:26:24,160
best decision taken in the project cause

00:26:22,960 --> 00:26:25,930
after they weren't bothering us with

00:26:24,160 --> 00:26:27,490
calling their thing they were more

00:26:25,930 --> 00:26:30,190
autonomous and they could write tests it

00:26:27,490 --> 00:26:32,320
was amazing we also trained the client

00:26:30,190 --> 00:26:36,310
to get us some test data so we problem

00:26:32,320 --> 00:26:39,100
solved and then finally we communicated

00:26:36,310 --> 00:26:40,820
with the business to one make them

00:26:39,100 --> 00:26:43,039
bother us less because they are

00:26:40,820 --> 00:26:46,340
you'll feedback on what was the stage of

00:26:43,039 --> 00:26:47,870
the project so doing Kanban Ostrom

00:26:46,340 --> 00:26:50,389
depending on the situation showing the

00:26:47,870 --> 00:26:52,490
board as you saw before and so this

00:26:50,389 --> 00:26:54,799
allowed us to really react to problems

00:26:52,490 --> 00:26:56,570
as quickly as possible decide on

00:26:54,799 --> 00:27:00,110
removing features as quickly as possible

00:26:56,570 --> 00:27:02,539
the features decisions and so so the

00:27:00,110 --> 00:27:05,539
takeaway of this also is that we try to

00:27:02,539 --> 00:27:08,929
say the hard truth as soon as possible

00:27:05,539 --> 00:27:10,130
from from then on and this is a to

00:27:08,929 --> 00:27:11,330
discovering technique because if you

00:27:10,130 --> 00:27:13,399
tell it's like with your parents right

00:27:11,330 --> 00:27:14,809
if you tell something two weeks later is

00:27:13,399 --> 00:27:17,000
going to be way worse so just say it

00:27:14,809 --> 00:27:18,559
when you know it and so more concretely

00:27:17,000 --> 00:27:20,149
what we did we play with the three

00:27:18,559 --> 00:27:21,919
dimensions so time which is length of a

00:27:20,149 --> 00:27:24,340
project scope which is amount of

00:27:21,919 --> 00:27:27,139
features that you put inside and

00:27:24,340 --> 00:27:29,029
capacity which is the amount of

00:27:27,139 --> 00:27:31,070
developers so first the title was a lie

00:27:29,029 --> 00:27:32,600
we extended by two weeks they were

00:27:31,070 --> 00:27:35,899
really reluctant but we managed to get

00:27:32,600 --> 00:27:38,620
that so if it's a bit better then we

00:27:35,899 --> 00:27:41,870
removed features that weren't absolutely

00:27:38,620 --> 00:27:44,539
necessary it was hard to negotiate but

00:27:41,870 --> 00:27:46,789
with a lot of communication the business

00:27:44,539 --> 00:27:48,259
and the understanding that the goal is

00:27:46,789 --> 00:27:50,590
to have something in production first

00:27:48,259 --> 00:27:54,320
and then see what happens

00:27:50,590 --> 00:27:56,029
and and we also reduced the number of

00:27:54,320 --> 00:27:57,799
developer we increased the rhythm of

00:27:56,029 --> 00:27:59,450
developers we gained two more developers

00:27:57,799 --> 00:28:02,059
for the end of the week for the end of

00:27:59,450 --> 00:28:04,490
the project and managed to to get

00:28:02,059 --> 00:28:07,370
everything ok so when we got here we are

00:28:04,490 --> 00:28:09,230
also a few good surprises at the end of

00:28:07,370 --> 00:28:11,269
the project certificate pinning and end

00:28:09,230 --> 00:28:13,700
up being a lot smaller than we thought

00:28:11,269 --> 00:28:15,889
I don't know if you know what it is but

00:28:13,700 --> 00:28:18,409
it's a common security thing that you

00:28:15,889 --> 00:28:20,269
have to do in in some apps and it

00:28:18,409 --> 00:28:22,039
actually takes one day if you ever hear

00:28:20,269 --> 00:28:24,620
about it certificate pinning if you have

00:28:22,039 --> 00:28:25,909
to do it with the right blog article on

00:28:24,620 --> 00:28:31,580
Google that you find it's actually one

00:28:25,909 --> 00:28:34,940
day then analytics with App Center is

00:28:31,580 --> 00:28:36,440
actually really really small to do it's

00:28:34,940 --> 00:28:39,350
smaller than this it took us like three

00:28:36,440 --> 00:28:40,549
hours to get a funnel saying like you

00:28:39,350 --> 00:28:44,570
know the funnel is the thing where the

00:28:40,549 --> 00:28:46,220
customer you get to know to what stage

00:28:44,570 --> 00:28:47,809
of the process the customer got and so

00:28:46,220 --> 00:28:49,309
analytics crash reports etc all

00:28:47,809 --> 00:28:52,760
integrated in App Center out of the box

00:28:49,309 --> 00:28:53,040
was amazing and so we ended up being

00:28:52,760 --> 00:28:54,750
able

00:28:53,040 --> 00:28:58,080
to integrate some feedback from the

00:28:54,750 --> 00:29:00,270
customers fix bugs etc etc which was

00:28:58,080 --> 00:29:01,320
unexpected so what allowed us to do that

00:29:00,270 --> 00:29:05,730
was you need to take the strong

00:29:01,320 --> 00:29:07,440
decisions just in time so yeah I call it

00:29:05,730 --> 00:29:09,930
success but we haven't delivered

00:29:07,440 --> 00:29:12,960
everything so why do I say that first of

00:29:09,930 --> 00:29:14,370
all because we have delivered an app we

00:29:12,960 --> 00:29:16,110
have delivered value by having the app

00:29:14,370 --> 00:29:17,640
in production and this is you can do

00:29:16,110 --> 00:29:19,290
whatever you want if you don't end up

00:29:17,640 --> 00:29:20,510
with something in production it's

00:29:19,290 --> 00:29:23,610
useless

00:29:20,510 --> 00:29:25,200
we had delivered enough value in the

00:29:23,610 --> 00:29:26,760
sense that the correct policies which is

00:29:25,200 --> 00:29:28,980
the bank wanting to test if they were

00:29:26,760 --> 00:29:32,130
able to do this customer journey with

00:29:28,980 --> 00:29:36,390
the ID and the picture etc was delivered

00:29:32,130 --> 00:29:37,410
so the that goal has been has been met

00:29:36,390 --> 00:29:39,720
and now they're doing marketing

00:29:37,410 --> 00:29:41,310
campaigns all over the country with the

00:29:39,720 --> 00:29:42,930
app etc so it's really it's a thing

00:29:41,310 --> 00:29:45,300
they're able to test hypotheses and

00:29:42,930 --> 00:29:47,280
finally for the part where we didn't

00:29:45,300 --> 00:29:49,170
deliver everything with good expectation

00:29:47,280 --> 00:29:51,480
management we managed to have them happy

00:29:49,170 --> 00:29:54,630
and actually talking still talking to us

00:29:51,480 --> 00:29:59,640
and we think I hope that we will work

00:29:54,630 --> 00:30:01,620
with them again so just to summarize how

00:29:59,640 --> 00:30:03,840
we got there in my view so what I've

00:30:01,620 --> 00:30:07,890
been talking about for for the last 25

00:30:03,840 --> 00:30:09,780
minutes you need to go so in general in

00:30:07,890 --> 00:30:12,000
hard projects but in any project if you

00:30:09,780 --> 00:30:14,940
want to avoid waste you need to go hit

00:30:12,000 --> 00:30:16,320
reality as soon as possible so work only

00:30:14,940 --> 00:30:19,230
on the hard stuff at the beginning even

00:30:16,320 --> 00:30:21,420
if it's not visible that you investigate

00:30:19,230 --> 00:30:23,460
and discover the dependencies the

00:30:21,420 --> 00:30:26,160
uncertainty the task that you thought

00:30:23,460 --> 00:30:28,860
were we're easy but actually were hard

00:30:26,160 --> 00:30:30,540
the UX the UI there is no no almost

00:30:28,860 --> 00:30:32,580
never a problem with that right you you

00:30:30,540 --> 00:30:34,530
know it's gonna be okay but work on the

00:30:32,580 --> 00:30:36,360
hard things first then once you know

00:30:34,530 --> 00:30:38,460
something is hard go communicating to

00:30:36,360 --> 00:30:40,140
the team immediately so that together

00:30:38,460 --> 00:30:43,230
you can decide maybe it's not worth

00:30:40,140 --> 00:30:46,520
doing was it was it really worth doing

00:30:43,230 --> 00:30:49,140
push touch ID in the MVP I'm not sure

00:30:46,520 --> 00:30:50,580
and even though the doing business

00:30:49,140 --> 00:30:52,080
insisted a lot at the beginning I'm sure

00:30:50,580 --> 00:30:54,990
you can convince them if you show them

00:30:52,080 --> 00:30:56,430
the problems that it might not the

00:30:54,990 --> 00:31:00,510
second thing so I've not talked about

00:30:56,430 --> 00:31:02,520
this at all but is to save a lot of time

00:31:00,510 --> 00:31:04,530
and remove all the friction in your

00:31:02,520 --> 00:31:07,620
project so

00:31:04,530 --> 00:31:11,940
what can I mention from here so the

00:31:07,620 --> 00:31:16,050
analytics and deploy to staging of App

00:31:11,940 --> 00:31:18,840
Center is amazing so we couldn't use the

00:31:16,050 --> 00:31:20,490
CI server so we use fast lane with much

00:31:18,840 --> 00:31:22,830
for code signing and deploying

00:31:20,490 --> 00:31:24,330
everything in one command so we had one

00:31:22,830 --> 00:31:25,890
command hard deploy to staging +

00:31:24,330 --> 00:31:29,010
production on iOS and Android

00:31:25,890 --> 00:31:30,720
cut push we did lots of things and nasty

00:31:29,010 --> 00:31:33,900
things with it but like it saved us

00:31:30,720 --> 00:31:36,330
hours I think you just deploy every

00:31:33,900 --> 00:31:38,250
feature in 30 seconds even in prod and

00:31:36,330 --> 00:31:43,950
now you can cut sign cut push so it's

00:31:38,250 --> 00:31:47,550
really really really secure and yeah I

00:31:43,950 --> 00:31:49,560
really don't like Redux forms and the

00:31:47,550 --> 00:31:51,720
state of rack navigation right now but

00:31:49,560 --> 00:31:52,950
when you know something we didn't know

00:31:51,720 --> 00:31:54,240
anything else when you know something

00:31:52,950 --> 00:31:57,780
and you have three months just use that

00:31:54,240 --> 00:31:59,310
and and don't try new things right even

00:31:57,780 --> 00:32:02,700
though I really would like to move to

00:31:59,310 --> 00:32:04,530
formic or something soon so I wanted I

00:32:02,700 --> 00:32:06,660
just have one or two minutes to show you

00:32:04,530 --> 00:32:11,130
the the trick that we did to get the

00:32:06,660 --> 00:32:12,630
funnel in like one or two hours so you

00:32:11,130 --> 00:32:15,780
grab the piece of code that's on the

00:32:12,630 --> 00:32:19,110
react navigation website that is called

00:32:15,780 --> 00:32:22,800
screen tracking middleware you put it in

00:32:19,110 --> 00:32:24,870
there you make it dispatch an action on

00:32:22,800 --> 00:32:26,490
every screen change because you cannot

00:32:24,870 --> 00:32:28,200
rely on component did mount with reg

00:32:26,490 --> 00:32:30,300
navigation right it doesn't work because

00:32:28,200 --> 00:32:31,590
keep stuff mounted so really you need

00:32:30,300 --> 00:32:34,710
this trigger to know that the customer

00:32:31,590 --> 00:32:37,140
has changed page then you catch that in

00:32:34,710 --> 00:32:39,330
a saga and you send an analytics the

00:32:37,140 --> 00:32:41,340
track event event with a string inside

00:32:39,330 --> 00:32:44,220
so here navigation - the name of the

00:32:41,340 --> 00:32:45,630
screen so this is out of the box with

00:32:44,220 --> 00:32:46,920
sub center there is a method you don't

00:32:45,630 --> 00:32:49,560
have to integrate anything it's not like

00:32:46,920 --> 00:32:52,020
firebase or whatever you just yarn

00:32:49,560 --> 00:32:53,490
install yarn app center and then

00:32:52,020 --> 00:32:56,280
relative link and you're good to go you

00:32:53,490 --> 00:32:58,200
have this and from then on immediately

00:32:56,280 --> 00:32:59,880
your event will appear in app center

00:32:58,200 --> 00:33:01,950
here you see navigation tool and

00:32:59,880 --> 00:33:05,010
innovation to sign up home login account

00:33:01,950 --> 00:33:08,070
whatever with all the stuff like the guy

00:33:05,010 --> 00:33:09,990
has initiated a session unique customers

00:33:08,070 --> 00:33:12,900
etc handled for you under the hood and

00:33:09,990 --> 00:33:14,550
then you go in app insights which is a

00:33:12,900 --> 00:33:15,840
Microsoft service I'm a bit therapy of

00:33:14,550 --> 00:33:17,970
Microsoft but they're becoming quite

00:33:15,840 --> 00:33:20,040
good it's free

00:33:17,970 --> 00:33:21,630
you can wire it to a web Center in one

00:33:20,040 --> 00:33:23,310
click so if I go to the next slide you

00:33:21,630 --> 00:33:27,330
see at the top right view application

00:33:23,310 --> 00:33:28,980
insights you click on the tab funnels

00:33:27,330 --> 00:33:30,690
here and then you have all your event

00:33:28,980 --> 00:33:32,610
and you select them so event one the

00:33:30,690 --> 00:33:34,320
migration to home event to navigation to

00:33:32,610 --> 00:33:35,550
landing event three the addition to

00:33:34,320 --> 00:33:36,960
whatever boo boo boo group and you of

00:33:35,550 --> 00:33:40,860
your funnel telling you the customer

00:33:36,960 --> 00:33:42,840
conversion etc so as a first setup the

00:33:40,860 --> 00:33:45,120
thing takes I mean when I do it it takes

00:33:42,840 --> 00:33:48,060
15 minutes to set up it's a really good

00:33:45,120 --> 00:33:49,560
trick so and these are the analytics

00:33:48,060 --> 00:33:51,240
that you get out of the box with App

00:33:49,560 --> 00:33:54,510
Center you don't have to do anything to

00:33:51,240 --> 00:33:56,010
get this it's quite nice the third thing

00:33:54,510 --> 00:33:59,700
that we did was to do pragmatic code

00:33:56,010 --> 00:34:04,590
choices and then we finish on this and

00:33:59,700 --> 00:34:05,670
so to in order to succeed so first spend

00:34:04,590 --> 00:34:06,930
time on track set up here at the

00:34:05,670 --> 00:34:09,420
beginning you want to go fast but know

00:34:06,930 --> 00:34:11,190
you better spend two days more making

00:34:09,420 --> 00:34:13,350
everything super nice the I don't know

00:34:11,190 --> 00:34:15,000
if the linter the deployments are

00:34:13,350 --> 00:34:17,430
prettier or whatever all the dev

00:34:15,000 --> 00:34:20,190
environment the deployment commands I

00:34:17,430 --> 00:34:22,980
don't know project set up so that then

00:34:20,190 --> 00:34:26,490
the team doesn't lose time every day

00:34:22,980 --> 00:34:27,840
with little things second thing a bit

00:34:26,490 --> 00:34:30,540
controversial maybe but I'm really

00:34:27,840 --> 00:34:32,820
convinced by this for front-ends in

00:34:30,540 --> 00:34:35,940
particular mobile that are not too crazy

00:34:32,820 --> 00:34:38,730
I'd say just have a good flow type or a

00:34:35,940 --> 00:34:40,140
good typescript but a really good one

00:34:38,730 --> 00:34:41,910
that you can rely on because most

00:34:40,140 --> 00:34:43,650
problem front end problems are that

00:34:41,910 --> 00:34:45,900
stuff is not wired correctly right with

00:34:43,650 --> 00:34:47,940
this you get it and maybe end-to-end

00:34:45,900 --> 00:34:49,530
test actually I think flow type and

00:34:47,940 --> 00:34:54,570
end-to-end test is a very good combo but

00:34:49,530 --> 00:34:55,290
just is is how do you say this it's a

00:34:54,570 --> 00:34:57,120
time eater

00:34:55,290 --> 00:34:59,400
I mean jest you spend more time trying

00:34:57,120 --> 00:35:01,500
to fix just itself than the code it's

00:34:59,400 --> 00:35:06,000
crazy right now I'm on a project with

00:35:01,500 --> 00:35:09,230
just I hate it and why do I say this I

00:35:06,000 --> 00:35:12,240
forgot but anyway we sell yes because

00:35:09,230 --> 00:35:14,130
because for example typically when we

00:35:12,240 --> 00:35:15,030
rub the twenty seconds and we spend on

00:35:14,130 --> 00:35:16,530
month and a half

00:35:15,030 --> 00:35:18,090
refactoring them so they remember the

00:35:16,530 --> 00:35:20,400
sagas are the things that do the back

00:35:18,090 --> 00:35:22,110
end cause if we had saga tests in

00:35:20,400 --> 00:35:23,670
parallel and when you have to do all

00:35:22,110 --> 00:35:25,320
these refactorings you have to refactor

00:35:23,670 --> 00:35:26,700
and maintain the tests that are actually

00:35:25,320 --> 00:35:29,280
testing nothing because nothing is in

00:35:26,700 --> 00:35:31,950
production you double triple the time

00:35:29,280 --> 00:35:33,390
you lose with with things whereas float

00:35:31,950 --> 00:35:34,920
on the contrary it tells you when you're

00:35:33,390 --> 00:35:37,319
a refactoring if you broke something and

00:35:34,920 --> 00:35:39,750
makes you find it a lot easier so really

00:35:37,319 --> 00:35:42,150
I will start projects only with flow and

00:35:39,750 --> 00:35:44,099
take the decision of training just test

00:35:42,150 --> 00:35:46,430
once it gets big and successful not

00:35:44,099 --> 00:35:49,440
before because I think it's useless

00:35:46,430 --> 00:35:51,450
don't be afraid of native code we would

00:35:49,440 --> 00:35:54,270
have save time with this if we had done

00:35:51,450 --> 00:35:56,490
it before and don't try new things yeah

00:35:54,270 --> 00:35:59,250
I mean so the middleware thing or maybe

00:35:56,490 --> 00:36:01,470
even though I didn't like Redux form we

00:35:59,250 --> 00:36:04,530
chose to use it and it was good enough

00:36:01,470 --> 00:36:06,299
for what we were doing and finally

00:36:04,530 --> 00:36:08,790
Lottie who talked about Lottie lot is

00:36:06,299 --> 00:36:11,250
amazing Lottie and invision actually so

00:36:08,790 --> 00:36:12,990
unload as much stuff as you can to the

00:36:11,250 --> 00:36:15,329
designer so that you can just copy you

00:36:12,990 --> 00:36:18,000
know you put your what's the name the

00:36:15,329 --> 00:36:19,380
simulator you put it physical a pixel

00:36:18,000 --> 00:36:21,660
accurate you put it just next to

00:36:19,380 --> 00:36:23,880
envision and you do everything like that

00:36:21,660 --> 00:36:25,260
and you use Lottie for them just to give

00:36:23,880 --> 00:36:27,720
your JSON then you integrate it there

00:36:25,260 --> 00:36:30,559
without trying to do anything and this

00:36:27,720 --> 00:36:33,500
last slide which is a little bit weird

00:36:30,559 --> 00:36:39,180
one thing we did a lot was to call

00:36:33,500 --> 00:36:41,190
people at our core company in Paris or

00:36:39,180 --> 00:36:44,160
London every time we hit a blocker

00:36:41,190 --> 00:36:46,140
because in this type of project but even

00:36:44,160 --> 00:36:48,240
in general you don't really care about

00:36:46,140 --> 00:36:50,010
figuring out why something an

00:36:48,240 --> 00:36:52,500
interesting is not working you just want

00:36:50,010 --> 00:36:55,200
to deliver the business value you want

00:36:52,500 --> 00:36:57,380
to deliver your project so it's not

00:36:55,200 --> 00:37:01,290
really interesting to tunnel on a task

00:36:57,380 --> 00:37:04,380
and for that never forget to call for

00:37:01,290 --> 00:37:05,760
help this is like the big message that I

00:37:04,380 --> 00:37:08,309
got at my company and I would like to

00:37:05,760 --> 00:37:13,549
tell it in general to you as a coder

00:37:08,309 --> 00:37:13,549
never forget to go for her that's it

00:37:14,120 --> 00:37:19,780

YouTube URL: https://www.youtube.com/watch?v=5YLie_bja1M


