Title: Building Intuitive Components for an Interactive Fitness App - React Native London - June 2021
Publication date: 2021-06-30
Playlist: React Native London
Description: 
	@RNLmeetup
Building intuitive components for an interactive fitness app by Arohan Subramonia

A look through the product and developer lens at how we built a unique UI component from scratch, for a specific use case in an UX-first fitness app

Intro: About Me & MyARC [00:00:00] 
Initial Design & User Feedback [00:02:20] 
Skeuomorphic Design [00:03:59] 
Creating a Slider [00:07:24] 
Code Examples [00:09:01] 
Text Opacity [00:12:23] 
Descriptive Text Opacity [00:13:44]
Final Demo [00:15:44]
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:01,750 --> 00:00:02,290
Hey guys.

00:00:02,710 --> 00:00:05,095
Thanks for coming to the react native meetup today.

00:00:05,570 --> 00:00:09,100
My name's Arohan and I'd like to talk to you guys about building intuitive

00:00:09,100 --> 00:00:11,290
components for an interactive fitness app.

00:00:12,380 --> 00:00:13,840
First a little bit about me.

00:00:13,870 --> 00:00:17,140
I'm a full stack developer at Theodo UK, and we are hiring.

00:00:17,140 --> 00:00:20,770
So if you're watching this live or, you know, remote online later, at some

00:00:20,770 --> 00:00:22,720
point on YouTube, maybe do get in touch.

00:00:23,552 --> 00:00:25,750
And I specialize mostly in react native.

00:00:26,565 --> 00:00:27,645
And Django as well.

00:00:28,275 --> 00:00:30,585
The product that I want to talk to you guys about today is

00:00:30,585 --> 00:00:33,225
slightly different from most of the product that we usually do.

00:00:33,765 --> 00:00:35,625
And so I'm super excited to get started.

00:00:35,865 --> 00:00:38,685
The app in question is the, my fitness app.

00:00:39,135 --> 00:00:43,995
So my fitness is an app for fitness content, creators, or influencers,

00:00:44,415 --> 00:00:47,535
and their followers to essentially train together in one place.

00:00:48,510 --> 00:00:52,470
So as a fitness content creator, I can go onto the MyARC website, sign

00:00:52,470 --> 00:00:57,059
up and then create different workouts and workout plans for my followers.

00:00:57,360 --> 00:01:00,024
And then my followers can then download the MyARC app.

00:01:00,870 --> 00:01:04,170
Go, go, go through and select me as their favorite trainer and

00:01:04,170 --> 00:01:06,090
then complete workouts in the app.

00:01:06,810 --> 00:01:08,880
There's quite a lot of different features as well in this app.

00:01:08,880 --> 00:01:12,690
So, you know, a dashboard to track your progress and your stats and there's

00:01:12,690 --> 00:01:18,555
video tutorials notes, and there's also a nifty sort of Rewards-based gamified

00:01:18,825 --> 00:01:22,905
system so that premium subscribers can get discounts on real-world

00:01:22,905 --> 00:01:24,705
products as they complete workouts.

00:01:25,155 --> 00:01:30,005
So it's a pretty feature, heavy feature rich app with a lot of different things.

00:01:30,390 --> 00:01:34,440
But the most important part of the app is the workout now feature.

00:01:35,130 --> 00:01:39,660
So the workout now feature is essentially the place on the app

00:01:39,720 --> 00:01:41,760
where users spend most of their time.

00:01:42,150 --> 00:01:45,090
And this is where they go to, to complete workouts that the

00:01:45,090 --> 00:01:51,600
influencer has sort of set them So here for every sort of exercise in a

00:01:51,600 --> 00:01:53,172
workout, we have a different screen.

00:01:53,888 --> 00:01:57,600
As you can see on this, this video that I've just got from their Instagram and

00:01:57,600 --> 00:02:01,110
we have the exercise name, the number of reps and the number of weight, the

00:02:01,110 --> 00:02:05,100
amount of weight that you need to lift, if any and you can have exercises that

00:02:05,100 --> 00:02:07,140
are either rep based or time-based.

00:02:07,393 --> 00:02:11,190
As you can see here, we also take into account any rest time that users

00:02:11,190 --> 00:02:15,480
need to have in between exercises or different sets And everything

00:02:15,480 --> 00:02:17,780
is essentially you're taken care of so that you can follow along.

00:02:17,820 --> 00:02:19,080
Even if you're a complete novice.

00:02:20,190 --> 00:02:23,130
When we initially designed the section, this is what it looked like.

00:02:23,130 --> 00:02:28,020
So we have the exercise name, reps, weight, and then the section towards

00:02:28,020 --> 00:02:30,450
the bottom where you can sort of navigate and edit what you've

00:02:30,450 --> 00:02:32,910
done and the initial feedback.

00:02:32,910 --> 00:02:33,840
Wasn't great.

00:02:34,230 --> 00:02:38,018
A user said that the bottom section especially was a little bit cluttered

00:02:38,837 --> 00:02:43,170
the previous button was not used very often, which kind of makes sense in

00:02:43,170 --> 00:02:46,929
hindsight because you wouldn't go back to an exercise that you've just done.

00:02:48,000 --> 00:02:51,959
It was also prone to accidental taps because of the way that users

00:02:51,959 --> 00:02:53,790
interact with the, with the app.

00:02:53,790 --> 00:02:58,410
So often they'd sort of pick up the app, see what they needed to do put

00:02:58,410 --> 00:03:01,590
down their phone, complete the exercise, and then pick up their phone again.

00:03:01,980 --> 00:03:05,220
So in between, you know, successive picking up and putting down on

00:03:05,220 --> 00:03:09,555
the phone, The fingers could often accidentally touch one of these buttons

00:03:09,615 --> 00:03:12,075
and then sort of trigger things that they didn't want to be triggered.

00:03:13,365 --> 00:03:14,505
So that was another issue.

00:03:15,285 --> 00:03:18,915
The edit mode is also pretty unclear and it wasn't very intuitive.

00:03:18,945 --> 00:03:24,000
And in fact, 40% of users did not describe the workout in our section

00:03:24,060 --> 00:03:25,799
as intuitive and easy to use.

00:03:26,369 --> 00:03:28,494
So this was a real problem that we faced.

00:03:28,890 --> 00:03:32,369
We knew that other fitness apps did something similar and had a

00:03:32,369 --> 00:03:35,790
lot of the same sort of buttons of editing and next and we really

00:03:35,790 --> 00:03:36,959
wanted to do something different.

00:03:36,959 --> 00:03:40,679
So, you know, even though we took on the feedback and, you know, we

00:03:40,679 --> 00:03:44,130
got rid of the previous button, we replaced it with an edit button.

00:03:44,399 --> 00:03:47,370
We got rid of the icons, you know, and before that tried a bunch of

00:03:47,370 --> 00:03:48,720
different icons for edit mode.

00:03:49,370 --> 00:03:53,600
We really wanted something quite, you know, stock starkly different to

00:03:53,600 --> 00:03:56,580
what was the current state of the art and what we see in a lot of, a lot of

00:03:56,600 --> 00:03:59,060
fitness apps and to the product team.

00:03:59,060 --> 00:04:02,269
It was super important that the MyARC app was known for its

00:04:02,269 --> 00:04:03,920
intuitive, easy to use design.

00:04:04,730 --> 00:04:04,850
So.

00:04:05,850 --> 00:04:10,770
For inspiration, we looked to the principle of skeuomorphic design.

00:04:11,430 --> 00:04:15,420
So skeuomorphic design is essentially the idea of designing UI

00:04:15,420 --> 00:04:17,850
components to mimic the real world.

00:04:18,420 --> 00:04:23,460
So, you know, a great example of this is the UI that came up the very first

00:04:23,730 --> 00:04:28,920
iPhone, and then first few iPhones, as you can see all the icons on the left have

00:04:28,920 --> 00:04:31,700
shadows and reflections and look bevelled.

00:04:32,145 --> 00:04:34,485
And kind of replicate real life buttons.

00:04:35,300 --> 00:04:38,805
And I think in addition to this, as you clicked on these, the phone could

00:04:38,895 --> 00:04:43,155
mean, or maybe vibrate or how sort of click or a different kind of sound to

00:04:43,155 --> 00:04:46,395
basically feed back to users that they were actually clicking on buttons.

00:04:46,455 --> 00:04:51,015
And this was super useful because during the time of the first iPhone

00:04:51,015 --> 00:04:55,215
and smartphones came out, people were moving from having a lot of buttons and

00:04:55,215 --> 00:04:56,755
having that sort of tactile feedback.

00:04:57,135 --> 00:04:59,354
To just tapping things on a glass screen.

00:04:59,685 --> 00:05:03,990
So this is where, you know, skeuomorphic design really helped people, to, to

00:05:03,990 --> 00:05:06,270
navigate iOS devices, especially.

00:05:06,900 --> 00:05:11,040
And of course, over time, as people got used to, you know, tapping buttons and

00:05:11,040 --> 00:05:15,780
using smartphones, we moved back to a sort of flat design that you see on the

00:05:15,780 --> 00:05:19,950
right-hand side, where there's a lot less, you know, shine and bevel and things like.

00:05:20,745 --> 00:05:24,175
And I think, you know, a particular example of this is the, I think the,

00:05:24,175 --> 00:05:27,975
the biggest difference between the two sides is probably the Instagram app.

00:05:28,412 --> 00:05:33,135
If anybody remembers what the Instagram app icon used to look like on the left

00:05:33,135 --> 00:05:37,815
you literally have, you know, a 3d logo of a sort of camera and then on the

00:05:37,815 --> 00:05:39,525
right, it's just completely abstracted.

00:05:40,805 --> 00:05:44,115
I, and I think, you know, for, for the time I think about these logos are pretty

00:05:44,115 --> 00:05:45,765
good for what they wanted to achieve.

00:05:46,905 --> 00:05:50,805
Another example of skeuomorphic design, which I having talked

00:05:50,805 --> 00:05:54,645
about it, I absolutely couldn't pass up on describing is logic

00:05:54,645 --> 00:05:56,715
pro X's interface for instruments.

00:05:57,135 --> 00:06:02,034
So logic pro is a software that musicians can use to produce music.

00:06:02,275 --> 00:06:04,915
And of course you can select a range of different instruments on there.

00:06:05,035 --> 00:06:08,395
And the amazing thing is if you select an organ and you know, this, this works

00:06:08,395 --> 00:06:11,725
with a few other instruments on there, and you want to change the settings of

00:06:11,725 --> 00:06:15,985
this device, you actually come up with a, an interface that looks like an actual

00:06:15,985 --> 00:06:17,460
organ that you can sort of change things.

00:06:18,460 --> 00:06:21,070
And I have an example of it here, which is pretty cool.

00:06:21,099 --> 00:06:25,060
So as you can see, I can change the dial up and down as I want, you know, toggle

00:06:25,060 --> 00:06:30,520
switches and you know, change a lot of the other settings as I wish, and I'm

00:06:30,520 --> 00:06:32,269
not a professional organ player at all.

00:06:32,702 --> 00:06:36,460
So I don't really know what I'm doing here, but you can see how, if you

00:06:36,789 --> 00:06:40,090
a organ player who played for quite a while and wanted to move into the

00:06:40,090 --> 00:06:44,280
digital space, this would be incredibly easy and intuitive for you to pick-up.

00:06:44,930 --> 00:06:48,620
And so this is the kind of thing that we really wanted to replicate going

00:06:48,620 --> 00:06:50,960
forward for our specific application.

00:06:51,380 --> 00:06:57,440
What we looked at was the very, very original iOS lock screen, where we

00:06:57,440 --> 00:07:01,219
have this slide to unlock feature, which I think is one, one of the, you

00:07:01,219 --> 00:07:04,590
know, original, iconic designs that I think we all probably remember.

00:07:04,950 --> 00:07:09,359
So with this slide to unlock feature, you have the text that tells you to slide,

00:07:09,359 --> 00:07:13,320
to unlock something, and you also have the lovely sort of springy feel, because

00:07:13,320 --> 00:07:17,280
if you don't unlock, know if you don't slide all the way, it Springs back.

00:07:17,310 --> 00:07:20,400
And if you get to a certain point, then we have the click sound.

00:07:20,789 --> 00:07:24,419
If people remember that, then unlock the iPhone and then you can cut in.

00:07:24,840 --> 00:07:28,159
So we wanted to implement something like this that would give users

00:07:28,159 --> 00:07:30,960
the field that they were unlocking each exercise, or they went on to.

00:07:32,246 --> 00:07:35,880
But it was also super important to the product team that users could

00:07:35,880 --> 00:07:40,150
just as easily edit any exercises that they were currently doing.

00:07:40,811 --> 00:07:44,610
Because it was super important to them to have accurate data and have users be able

00:07:44,610 --> 00:07:46,620
to accurately track their own progress.

00:07:46,770 --> 00:07:50,580
What we essentially wanted was a slider that slid both ways.

00:07:51,120 --> 00:07:53,890
And that's where the double slider component sort of came in.

00:07:54,386 --> 00:07:57,150
So you can slide to the left to then toggle edit mode and

00:07:57,150 --> 00:07:58,440
change things on the app.

00:07:58,530 --> 00:07:59,590
And then you can slide to the right.

00:08:00,899 --> 00:08:04,875
To, you know, go on to the next next exercise and you know, what was great

00:08:04,875 --> 00:08:07,065
about this is it had an intuitive design.

00:08:07,544 --> 00:08:10,094
It had the helper text as well, that you can see with the

00:08:10,094 --> 00:08:11,534
save and the next or the edit.

00:08:12,135 --> 00:08:16,635
It followed the principles of skeuomorphic design and my personal favorite.

00:08:16,695 --> 00:08:18,375
It didn't involve any buttons.

00:08:18,805 --> 00:08:22,005
So there was not the classic, you know, added button or the next button

00:08:22,005 --> 00:08:23,465
that we see on a lot of other fitness.

00:08:24,099 --> 00:08:26,890
Once the design was initially done and we agreed on it.

00:08:26,919 --> 00:08:30,250
We started to look online to see if we could find anything in terms of

00:08:30,250 --> 00:08:31,900
prebuilt components that existed.

00:08:32,199 --> 00:08:35,409
And we couldn't find anything for this double slider specifically.

00:08:35,830 --> 00:08:41,140
So we decided to make .... Now on top of this speed was a priority.

00:08:41,169 --> 00:08:46,180
We were, you know, really prioritizing getting quick feedback and iterating

00:08:46,240 --> 00:08:48,610
and feedback circles kind of quickly.

00:08:48,910 --> 00:08:54,495
So the team went to use library that they were very familiar with,

00:08:54,525 --> 00:08:58,454
which is the react native animated library, which is inbuilt and comes

00:08:58,454 --> 00:09:00,464
out of the package with react native.

00:09:01,740 --> 00:09:04,920
Let's have a look at some code examples to start off with.

00:09:05,310 --> 00:09:07,680
We just needed to set up our container and our target.

00:09:07,719 --> 00:09:12,150
So the container I'll refer to as this sort of gray pill

00:09:12,180 --> 00:09:13,290
that you see in the background.

00:09:13,770 --> 00:09:16,500
And then the toggle is this purple circular item that you

00:09:16,500 --> 00:09:17,910
can scroll back and forth.

00:09:18,647 --> 00:09:22,380
There's not too much special going on in terms of code here, but it's just

00:09:22,380 --> 00:09:26,160
there so that you guys know, as I refer to the container and toggle that's

00:09:26,160 --> 00:09:30,150
what I'm referring to the next step is when we start to get the animations.

00:09:32,440 --> 00:09:34,510
With the react natives animated library.

00:09:34,540 --> 00:09:38,740
There's two things that you need to set up you know, generically for any animation.

00:09:39,310 --> 00:09:44,110
One is an animated value, some sort of value that changes as the UI thread

00:09:44,140 --> 00:09:50,650
renders, and two is a panhandler or some sort of gesture responder.

00:09:50,890 --> 00:09:52,150
So something that essentially can.

00:09:53,130 --> 00:09:59,609
You know, track taps or can trigger handlers that can track as you tap on a

00:09:59,640 --> 00:10:03,150
screen and then feed that back to, you know, whatever component you need to.

00:10:03,780 --> 00:10:06,510
So we have the animation set up for this, and then we sort of

00:10:06,510 --> 00:10:07,770
implement it in the component.

00:10:08,550 --> 00:10:10,739
So let's have a look at the animation set up first.

00:10:11,219 --> 00:10:12,890
So as I mentioned, you set up an animated.

00:10:13,875 --> 00:10:15,915
And then you set up this pan responder as well.

00:10:16,125 --> 00:10:18,595
And uh, you know, most interesting part of this pan responder.

00:10:18,615 --> 00:10:23,085
Here is the on-pan responder move and the on-pan respond to release functions.

00:10:23,685 --> 00:10:26,925
So as the pan responder moves, we have access to this gesture state,

00:10:26,955 --> 00:10:30,525
which essentially tells us how far the thumb or a finger press

00:10:30,525 --> 00:10:32,055
travels and in all directions.

00:10:32,055 --> 00:10:35,865
And we've taken the DX value here and we set it to this animation value

00:10:35,925 --> 00:10:37,485
every time the pan respond the moves.

00:10:37,845 --> 00:10:39,015
So, so for every frame that.

00:10:39,900 --> 00:10:43,170
And then we have the on pan responder release function, which is triggered, you

00:10:43,170 --> 00:10:46,800
know, as you guessed, when you let go of the pan responder and your thumb press

00:10:47,069 --> 00:10:49,080
or finger press comes off the screen.

00:10:49,500 --> 00:10:52,470
And when this happens, we want to set this value back to zero, which is

00:10:52,470 --> 00:10:57,030
where we initialized it as planners to use this value, to replicate

00:10:57,030 --> 00:10:58,800
the exposition of the toggle.

00:10:58,830 --> 00:10:59,980
As you move left and right.

00:11:00,689 --> 00:11:04,860
We also have this used native driver true option that we pass into the config.

00:11:05,325 --> 00:11:09,645
As some of you probably know React Native runs on two different threads,

00:11:09,675 --> 00:11:14,805
the JavaScript thread and UI thread, the JavaScript thread is usually used

00:11:14,805 --> 00:11:17,805
for all the main vendors and the sort of logic that you have in the app.

00:11:17,895 --> 00:11:20,175
And the UI thread is used for the animations.

00:11:20,205 --> 00:11:20,655
Mostly.

00:11:20,745 --> 00:11:24,045
I mean, I'm abstracting here, but generally that's, it is.

00:11:24,615 --> 00:11:29,355
And um, using use native driver equals true means that all the animation

00:11:29,355 --> 00:11:31,095
logic can be run on this UI thread.

00:11:31,095 --> 00:11:33,315
So it makes your animations performent essentially.

00:11:34,171 --> 00:11:36,990
And one of the drawbacks of this is you can't always have used

00:11:36,990 --> 00:11:39,150
native driver true for everything.

00:11:39,220 --> 00:11:41,760
And I think you can for this animated spring function, but

00:11:41,760 --> 00:11:43,611
not for pan responder functions.

00:11:44,440 --> 00:11:47,310
And so, you know, that's a whole different talk as to which animation

00:11:47,310 --> 00:11:51,900
library is the best, but for now that's what you use native private does next.

00:11:51,900 --> 00:11:54,060
We have the components set up for this interactive.

00:11:54,839 --> 00:11:59,010
We essentially take the pan responders handlers, and we pass it into this

00:11:59,010 --> 00:12:02,730
animated view object that we can wrap around our toggle component.

00:12:03,360 --> 00:12:06,810
And then we take the animation value that we are defined and pass it into

00:12:06,810 --> 00:12:12,839
the translate ex attribute which then transforms the toggle to move left

00:12:12,839 --> 00:12:15,060
and right as you press left and right.

00:12:15,189 --> 00:12:16,230
And drag left and right.

00:12:16,260 --> 00:12:17,760
I should say on the screen.

00:12:18,120 --> 00:12:21,569
So that's how we get the basic animation of the double sliding.

00:12:23,505 --> 00:12:27,704
Next, we have the text capacity, as you can see, there's this edit and

00:12:27,704 --> 00:12:32,115
next text that we have that obviously tells users how to slide in terms

00:12:32,115 --> 00:12:33,915
of editing and going to the next.

00:12:34,454 --> 00:12:39,345
And what we wanted was as you scrolled that this text disappeared, because

00:12:39,345 --> 00:12:43,305
we didn't think it would be a great UI sort of functionality to have.

00:12:44,250 --> 00:12:48,510
Toggles sliding over some texts that you could still see us still read.

00:12:49,110 --> 00:12:51,690
So once again, we first set up the animation and then we

00:12:51,690 --> 00:12:53,010
implement it in a component.

00:12:53,820 --> 00:12:58,050
This time, the animation set up again, it involves an animated value, but

00:12:58,050 --> 00:12:59,490
the functions are slightly different.

00:12:59,490 --> 00:13:01,470
We have this on pan responder grant.

00:13:01,890 --> 00:13:05,160
So this is triggered every time you tap on the pan responder or the toggle

00:13:05,190 --> 00:13:08,910
in this instance, and we want to set this value of label, opacity to zero.

00:13:09,180 --> 00:13:11,730
And then when we release the pan responder, we want

00:13:11,730 --> 00:13:12,690
to set the value back to.

00:13:13,570 --> 00:13:17,640
And as you can see with these functions, we couldn't use the native driver, which

00:13:17,640 --> 00:13:23,910
was by the native driver has been set to false it's just a gotcha of the library.

00:13:24,240 --> 00:13:27,780
Then we've got the component setup where we use this animated text

00:13:28,140 --> 00:13:31,530
component that you can again, get from the react native animated library.

00:13:31,770 --> 00:13:36,099
And this time we pass in the label opacity to the opacity attribute of the text.

00:13:36,435 --> 00:13:40,125
So then as we tap on the toggle, the text becomes transparent.

00:13:40,155 --> 00:13:42,824
And then as we release our hand, the text becomes opaque

00:13:42,844 --> 00:13:43,905
once again, and you can see it.

00:13:44,204 --> 00:13:47,535
Finally, we've got this extra descriptive text that we also wanted.

00:13:47,775 --> 00:13:50,714
So you can see it says next exercise or edit exercise.

00:13:51,285 --> 00:13:55,425
And essentially what we wanted to do with this is couple the transparency of the

00:13:55,425 --> 00:13:57,885
text to the exposition of the toggle.

00:13:57,944 --> 00:13:58,694
As you slid it back.

00:13:59,834 --> 00:14:04,214
So for this, we needed to use the interpolate function provided by react

00:14:04,214 --> 00:14:08,655
natives animation library, and this interpolate function here, as you can

00:14:08,655 --> 00:14:14,385
see, essentially takes one animated value, takes the current value that it

00:14:14,385 --> 00:14:16,694
is and maps it to another animated value.

00:14:17,025 --> 00:14:21,645
So here we're mapping the animation value to the left text capacity and

00:14:21,645 --> 00:14:25,764
here we're mapping the same animation value to the right text opacity.

00:14:26,355 --> 00:14:29,625
What we're essentially saying is as this value goes between zero

00:14:29,715 --> 00:14:32,805
and 75% of half the slider width.

00:14:32,835 --> 00:14:35,055
So that would be at the right most position.

00:14:35,505 --> 00:14:39,765
We want the left text opacity to go from zero to one, which essentially means

00:14:39,795 --> 00:14:43,065
as we slide to the right to make sure that we can see the text on the left.

00:14:43,635 --> 00:14:47,175
And then we have the exact opposite here, which is as we slide to the left, make

00:14:47,175 --> 00:14:51,045
sure that we can see the text on the right once we've got that we can take

00:14:51,045 --> 00:14:52,785
the left and right text capacity values.

00:14:52,845 --> 00:14:54,575
And again, as we've just done before.

00:14:54,925 --> 00:14:59,145
Pass it into the opacity attribute of an animated text style it accordingly,

00:14:59,145 --> 00:15:00,525
so that it's in the right position.

00:15:00,615 --> 00:15:02,265
And then we've got this ready to go.

00:15:03,435 --> 00:15:06,525
There's also a few other things that we did and we chose to implement.

00:15:06,525 --> 00:15:09,645
So there were toasts at the top then let, you know, an edit mode is on

00:15:10,035 --> 00:15:11,925
obviously toggling, edit mode itself.

00:15:12,495 --> 00:15:15,774
And also some circles that let you know where to swipe to.

00:15:16,125 --> 00:15:19,257
Because obviously if you don't swipe all the way and you don't get the,

00:15:19,845 --> 00:15:24,120
you don't get to, you know, toggle each Putting this all together.

00:15:24,120 --> 00:15:28,020
We finally had the final component, which looks something like this.

00:15:28,593 --> 00:15:31,290
So you swipe to the left and you can edit the exercise.

00:15:31,530 --> 00:15:34,620
You had the toast that comes up at the top that tells you the edit mode is on.

00:15:35,130 --> 00:15:38,310
You can toggle so you can use the plus and minus button to change

00:15:38,310 --> 00:15:39,300
how much weight you lifted.

00:15:39,390 --> 00:15:42,900
And then once you're done click next to go onto the next exercise and

00:15:42,900 --> 00:15:44,069
you're changing the state as well.

00:15:44,819 --> 00:15:47,939
Once we implemented all of this as required, I think

00:15:47,939 --> 00:15:49,530
over the course of a few.

00:15:49,530 --> 00:15:52,680
We went out and did beta testing with the same users.

00:15:52,830 --> 00:15:57,480
And it was great to see that 90% of the users now actually reported

00:15:57,480 --> 00:16:00,689
the work out in our section as intuitive and super easy to use.

00:16:01,050 --> 00:16:05,030
And I think every user, even those who didn't list the workout now,

00:16:05,070 --> 00:16:08,610
is super intuitive said that they really, really like the slider.

00:16:08,640 --> 00:16:10,770
And it's one of the main attractions that they had at the app.

00:16:11,280 --> 00:16:14,760
And to be honest, I, I kind of see why that might be, and you know,

00:16:14,760 --> 00:16:16,130
maybe I'm a little bit biased.

00:16:16,425 --> 00:16:20,865
But um, swiping left and right, as you complete exercises, or as you want to

00:16:20,865 --> 00:16:24,975
track your progress more accurately is is a really good feeling for users to be

00:16:24,975 --> 00:16:26,895
able to sort of unlock the next exercise.

00:16:27,345 --> 00:16:30,045
So that was the reason I did it, and that's what we did.

00:16:30,675 --> 00:16:33,705
And that's how we essentially tackled the problem of making the workout.

00:16:33,735 --> 00:16:37,185
Now, section of the MyARC fitness app, intuitive and easy to use.

00:16:37,365 --> 00:16:39,495
Thank you so much for listening, and I'd be happy to take

00:16:39,495 --> 00:16:41,635

YouTube URL: https://www.youtube.com/watch?v=YcaoZICEU5M


