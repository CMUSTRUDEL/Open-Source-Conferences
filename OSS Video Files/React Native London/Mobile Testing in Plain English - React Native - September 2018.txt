Title: Mobile Testing in Plain English - React Native - September 2018
Publication date: 2018-10-02
Playlist: React Native London
Description: 
	Presented by Evan Gillogley.

Automated Testing should never be a pain and a non technical QA should be able to do it too. Cucumber JS, a BDD testing library, allows us to write tests in plain English. This reduces the overall cognitive complexity of writing end to end tests and allows others who aren’t familiar with a library or technology to write tests. At Velocity Black, we use Cucumber and Appium to test our React Native Android application. In this talk, I’ll walk through a React Native testing setup and discuss some of the benefits and difficulties with the technology. I’ll also describe how Cucumber been used across our stack in the last two years.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,490
I'm Evan and today I'm going to talk to

00:00:03,689 --> 00:00:08,940
you about mobile testing in plain

00:00:05,490 --> 00:00:12,389
English and basically what I'm saying is

00:00:08,940 --> 00:00:14,190
that I'm going to show you how you can

00:00:12,389 --> 00:00:17,400
click a bunch of buttons automatically

00:00:14,190 --> 00:00:21,029
with your testing from simple layman's

00:00:17,400 --> 00:00:25,980
terms with I mean on your react native

00:00:21,029 --> 00:00:29,330
apps in both Android and iOS so look

00:00:25,980 --> 00:00:32,160
we'll get there it's a law to unwrap

00:00:29,330 --> 00:00:36,510
so I'm American that somehow ended up in

00:00:32,160 --> 00:00:38,610
London long story asked me afterward and

00:00:36,510 --> 00:00:42,719
I managed a web and Android team at a

00:00:38,610 --> 00:00:44,700
velocity black and I just love react

00:00:42,719 --> 00:00:48,989
native I've been working for with with

00:00:44,700 --> 00:00:50,789
it and type scripts for a year now built

00:00:48,989 --> 00:00:56,370
a couple react native apps for velocity

00:00:50,789 --> 00:00:58,949
black and our current app with velocity

00:00:56,370 --> 00:01:03,180
black in Android is in react native and

00:00:58,949 --> 00:01:08,310
then we have a swift iOS app so what is

00:01:03,180 --> 00:01:11,280
velocity black we're a members Club and

00:01:08,310 --> 00:01:15,000
we're a private member's Club that's

00:01:11,280 --> 00:01:18,180
also a digital concierge so think of MX

00:01:15,000 --> 00:01:21,630
on steroids like just always at your

00:01:18,180 --> 00:01:25,080
fingertips you can request pretty

00:01:21,630 --> 00:01:27,450
amazing things I can't really say some

00:01:25,080 --> 00:01:30,390
of the things just if you go to our

00:01:27,450 --> 00:01:33,180
website velocity dot black you'll see

00:01:30,390 --> 00:01:35,400
some examples but it's pretty amazing

00:01:33,180 --> 00:01:38,310
it's for a special group of people and

00:01:35,400 --> 00:01:44,280
it's invitation only if you ask me you

00:01:38,310 --> 00:01:47,100
may just get invited and enough about

00:01:44,280 --> 00:01:50,070
velocity black so I'm talking about

00:01:47,100 --> 00:01:53,250
engine testing and I think it's really

00:01:50,070 --> 00:01:55,229
hard and I'm sure you all agree how many

00:01:53,250 --> 00:02:00,570
of you have actually done engine testing

00:01:55,229 --> 00:02:04,049
in browser or mobile okay so it's about

00:02:00,570 --> 00:02:07,530
50% of the people okay

00:02:04,049 --> 00:02:09,420
yeah and for those people I'm pretty

00:02:07,530 --> 00:02:11,610
sure you've come to think like oh why

00:02:09,420 --> 00:02:13,470
isn't this test working it works you

00:02:11,610 --> 00:02:16,020
know one time in

00:02:13,470 --> 00:02:18,210
you know works and it doesn't work the

00:02:16,020 --> 00:02:20,450
next time so these are the issues that I

00:02:18,210 --> 00:02:25,710
usually have with end-to-end testing

00:02:20,450 --> 00:02:29,490
it's it's really lack of time which

00:02:25,710 --> 00:02:32,100
means that like essentially developers

00:02:29,490 --> 00:02:36,150
like really don't have time to relearn

00:02:32,100 --> 00:02:38,730
and retool basically what they what what

00:02:36,150 --> 00:02:39,960
are they going to what are they going to

00:02:38,730 --> 00:02:41,400
do when you have to go into the

00:02:39,960 --> 00:02:44,040
documentation and everything like that

00:02:41,400 --> 00:02:47,610
it to relearn every time you go back

00:02:44,040 --> 00:02:50,910
into testing whether you do BDD TDD or

00:02:47,610 --> 00:02:52,980
just test afterward and another thing is

00:02:50,910 --> 00:02:55,110
that management generally doesn't like

00:02:52,980 --> 00:02:56,760
testing because they're all like we need

00:02:55,110 --> 00:02:59,580
a prototype we need a prototype so it

00:02:56,760 --> 00:03:02,520
definitely stifles productivity and

00:02:59,580 --> 00:03:05,580
lastly the pain that we all have we have

00:03:02,520 --> 00:03:07,530
one app that works you know in for

00:03:05,580 --> 00:03:09,209
instance in mobile we might work in

00:03:07,530 --> 00:03:11,100
Android and it doesn't work in iOS this

00:03:09,209 --> 00:03:12,870
testing and you're like wait but it

00:03:11,100 --> 00:03:14,070
works when I actually just click it

00:03:12,870 --> 00:03:16,200
myself

00:03:14,070 --> 00:03:20,880
so it's it's really frustrating there's

00:03:16,200 --> 00:03:23,880
no uniform way to actually test and this

00:03:20,880 --> 00:03:28,080
happens in like across the stack when it

00:03:23,880 --> 00:03:30,209
comes to Android iOS or the browser but

00:03:28,080 --> 00:03:33,090
today I think I have a solution that

00:03:30,209 --> 00:03:35,180
kind of allows it to work like almost

00:03:33,090 --> 00:03:40,019
across that whole stack that I just said

00:03:35,180 --> 00:03:42,720
so we'll investigate so here today I'm

00:03:40,019 --> 00:03:48,330
going to talk about cucumber cucumber is

00:03:42,720 --> 00:03:51,260
a test runner it's really and it that

00:03:48,330 --> 00:03:53,670
I've made some I guess assumptions or

00:03:51,260 --> 00:03:56,280
things that I think it would promise

00:03:53,670 --> 00:03:58,350
before you know actually even using it

00:03:56,280 --> 00:03:59,850
because I actually picked up cucumber

00:03:58,350 --> 00:04:01,830
from a coal fellow colleague who is

00:03:59,850 --> 00:04:04,590
using it in the backend we have an

00:04:01,830 --> 00:04:08,519
odious stack written in typescript and

00:04:04,590 --> 00:04:11,489
we for testing we actually use cucumber

00:04:08,519 --> 00:04:12,360
so cucumber can be used you know back in

00:04:11,489 --> 00:04:18,330
front-end

00:04:12,360 --> 00:04:19,859
mobile and essentially I assume by

00:04:18,330 --> 00:04:24,630
looking at the Koch Umberto so I'm like

00:04:19,859 --> 00:04:25,650
well it's easy people can write the test

00:04:24,630 --> 00:04:27,660
they don't really have to know how

00:04:25,650 --> 00:04:30,240
things work

00:04:27,660 --> 00:04:32,340
it's it's gonna be faster because you

00:04:30,240 --> 00:04:35,340
know we know they're just it's just

00:04:32,340 --> 00:04:37,380
plain English and then again it's

00:04:35,340 --> 00:04:38,520
consistent because you know the expected

00:04:37,380 --> 00:04:40,230
result it's not you're not writing

00:04:38,520 --> 00:04:42,240
different code for every single test you

00:04:40,230 --> 00:04:47,100
write you're reusing a lot of the same

00:04:42,240 --> 00:04:48,240
code or you're referencing it via like

00:04:47,100 --> 00:04:51,330
strings or regex

00:04:48,240 --> 00:04:55,530
which will dig into later so what is

00:04:51,330 --> 00:04:57,750
cucumber cucumber tests are written in

00:04:55,530 --> 00:04:59,820
plant in plain language because they can

00:04:57,750 --> 00:05:01,050
be read by anyone you can use them to

00:04:59,820 --> 00:05:02,880
help improve and communication

00:05:01,050 --> 00:05:05,690
collaboration and Trust on your team so

00:05:02,880 --> 00:05:09,720
this is from cucumber rio website

00:05:05,690 --> 00:05:11,370
there's a lot of great examples there

00:05:09,720 --> 00:05:13,260
but most of them are probably in java

00:05:11,370 --> 00:05:16,500
because if you're familiar with the Java

00:05:13,260 --> 00:05:18,270
community cucumber is quite big and it's

00:05:16,500 --> 00:05:21,510
big you know across a lot of different

00:05:18,270 --> 00:05:23,520
languages just I haven't seen much of it

00:05:21,510 --> 00:05:26,130
in react native so I kind of wanted to

00:05:23,520 --> 00:05:28,890
give a talk on that because we've found

00:05:26,130 --> 00:05:32,210
it very useful for react native you know

00:05:28,890 --> 00:05:37,710
our browsers browser browser or mobile

00:05:32,210 --> 00:05:44,000
sorry our um our web apps and a whole

00:05:37,710 --> 00:05:48,900
lot of other things so how does it work

00:05:44,000 --> 00:05:53,460
it's so right here I have a sign-up form

00:05:48,900 --> 00:05:56,220
and I'm testing I'm basically testing

00:05:53,460 --> 00:05:59,160
the whole flow as an integration test so

00:05:56,220 --> 00:06:01,230
I'm actually clicking the input fields

00:05:59,160 --> 00:06:04,610
typing in them and then pressing the

00:06:01,230 --> 00:06:06,540
submit button to sign up for like for

00:06:04,610 --> 00:06:13,560
supposed to figure out membership club

00:06:06,540 --> 00:06:16,010
and so what this is right here this file

00:06:13,560 --> 00:06:18,780
the top that it's a feature file and

00:06:16,010 --> 00:06:20,670
this is what I mean by plain English you

00:06:18,780 --> 00:06:21,830
can read it you can understand it you

00:06:20,670 --> 00:06:25,100
don't have to even look at the code

00:06:21,830 --> 00:06:27,930
really to actually see what's going on

00:06:25,100 --> 00:06:29,720
the the code below it is actually

00:06:27,930 --> 00:06:35,940
another file written in typescript

00:06:29,720 --> 00:06:40,580
that's that's really just clicking it's

00:06:35,940 --> 00:06:44,460
just mapping a regex string to

00:06:40,580 --> 00:06:45,810
- Sallee I guess you'd say a selenium

00:06:44,460 --> 00:06:48,539
command in this case it would be an

00:06:45,810 --> 00:06:53,460
appium command which I'll get into later

00:06:48,539 --> 00:06:56,129
as well and it makes it really easy so

00:06:53,460 --> 00:07:01,440
to wrap it I guess to explain things in

00:06:56,129 --> 00:07:03,900
a simpler in simpler terms this this is

00:07:01,440 --> 00:07:07,199
one scenario and these are those are a

00:07:03,900 --> 00:07:09,419
bunch of steps and basically the given

00:07:07,199 --> 00:07:11,759
when then stuff is just syntactic sugar

00:07:09,419 --> 00:07:13,470
it's really just for you

00:07:11,759 --> 00:07:14,880
you can write these tests and every

00:07:13,470 --> 00:07:17,849
which way you want you can even include

00:07:14,880 --> 00:07:20,460
buts if you really want to but it makes

00:07:17,849 --> 00:07:24,479
things really easy understand and a lot

00:07:20,460 --> 00:07:26,159
of the time you don't even have to what

00:07:24,479 --> 00:07:27,750
we do if I'll see black will take like

00:07:26,159 --> 00:07:29,940
product requirements I'll copy and paste

00:07:27,750 --> 00:07:31,289
them into one of these feature files and

00:07:29,940 --> 00:07:34,409
then be like okay I'm just going to

00:07:31,289 --> 00:07:37,229
rewrite it to make it work with my my

00:07:34,409 --> 00:07:42,840
steps below so it makes it really really

00:07:37,229 --> 00:07:44,550
easy to write some tests so how are we

00:07:42,840 --> 00:07:46,409
actually going to build this testing and

00:07:44,550 --> 00:07:47,490
framework I've just shown you the test

00:07:46,409 --> 00:07:49,639
runner we need to actually know how

00:07:47,490 --> 00:07:54,750
we're actually going to click things in

00:07:49,639 --> 00:07:56,310
in the in it click things in the app and

00:07:54,750 --> 00:07:58,110
then actually get a response naturally

00:07:56,310 --> 00:07:59,990
block it out that that's actually the

00:07:58,110 --> 00:08:03,419
difficult part

00:07:59,990 --> 00:08:07,800
so I'm may be familiar with detox

00:08:03,419 --> 00:08:09,659
if you're not it's a basically it's a

00:08:07,800 --> 00:08:12,750
test framework that does do the clicking

00:08:09,659 --> 00:08:14,880
and you can write the tests on one aid

00:08:12,750 --> 00:08:17,279
and it works with emulators that iOS

00:08:14,880 --> 00:08:19,020
emulator it partially works for Android

00:08:17,279 --> 00:08:21,860
but it's not completely production ready

00:08:19,020 --> 00:08:27,659
and I know correct me if I'm wrong in QA

00:08:21,860 --> 00:08:29,819
and it hey will so you hopefully support

00:08:27,659 --> 00:08:32,159
cucumber but right now it's not really

00:08:29,819 --> 00:08:34,500
documented and there's a PR or there's a

00:08:32,159 --> 00:08:38,490
I guess there's an issue with some

00:08:34,500 --> 00:08:40,289
suggested code in there so when I was

00:08:38,490 --> 00:08:41,849
looking into solutions of like oh how am

00:08:40,289 --> 00:08:45,120
I going to get these simple tests that I

00:08:41,849 --> 00:08:50,310
just showed you into my react native app

00:08:45,120 --> 00:08:53,590
I was like okay well I probably can't

00:08:50,310 --> 00:08:55,120
use detox because of those issues though

00:08:53,590 --> 00:08:58,750
you know it's promised it seems really

00:08:55,120 --> 00:09:01,480
fast and reliable but I prefer a slower

00:08:58,750 --> 00:09:04,120
test that actually that works and that

00:09:01,480 --> 00:09:05,680
works on all devices especially our

00:09:04,120 --> 00:09:08,080
Android app because we're looking to

00:09:05,680 --> 00:09:10,230
support you know all the devices on

00:09:08,080 --> 00:09:13,720
Android and that's that's very difficult

00:09:10,230 --> 00:09:16,720
and not possible with detox but it's

00:09:13,720 --> 00:09:19,140
pretty cool so if I show you the how

00:09:16,720 --> 00:09:24,220
that detox works this is just a simple

00:09:19,140 --> 00:09:28,810
gift from there from there I guess they

00:09:24,220 --> 00:09:33,160
read me it's pretty fast we're not going

00:09:28,810 --> 00:09:35,920
to get to that speed but and right here

00:09:33,160 --> 00:09:39,780
I think they're using yeah they're using

00:09:35,920 --> 00:09:39,780
mocha I guess with that yeah

00:09:40,920 --> 00:09:46,120
but though the code that you write for

00:09:43,450 --> 00:09:48,370
these tests is simply those steps but

00:09:46,120 --> 00:09:51,100
every single test you'd have to rewrite

00:09:48,370 --> 00:09:53,980
the step or like recompose it in a

00:09:51,100 --> 00:09:56,650
separate file or class which is very

00:09:53,980 --> 00:09:59,860
very hard because then you have to

00:09:56,650 --> 00:10:01,360
relearn the whole for me I find that

00:09:59,860 --> 00:10:02,920
difficult going back into the testing

00:10:01,360 --> 00:10:05,380
documentation figuring out okay well

00:10:02,920 --> 00:10:06,610
what's all this thing again how do i you

00:10:05,380 --> 00:10:09,910
know click something how do I get

00:10:06,610 --> 00:10:11,290
something you know working I'd rather

00:10:09,910 --> 00:10:12,880
just look at a string and be like okay

00:10:11,290 --> 00:10:17,590
that's that's that's what I need to

00:10:12,880 --> 00:10:20,160
write so anyways so we decided to choose

00:10:17,590 --> 00:10:23,680
appium because it's the most widely used

00:10:20,160 --> 00:10:25,410
currently for outside of react native

00:10:23,680 --> 00:10:30,550
it's definitely the most widely used

00:10:25,410 --> 00:10:35,260
mobile testing I guess you'd say service

00:10:30,550 --> 00:10:37,390
or framework and it's what's great about

00:10:35,260 --> 00:10:41,230
a PM is it's pretty agnostic to all test

00:10:37,390 --> 00:10:45,310
runners because it runs off of a similar

00:10:41,230 --> 00:10:47,500
selenium driver API and then uses the

00:10:45,310 --> 00:10:52,480
node.js drivers which I'll get into

00:10:47,500 --> 00:10:55,210
later as well and like I said it's

00:10:52,480 --> 00:10:57,300
reliable it can run this in the demo

00:10:55,210 --> 00:11:00,670
we're going to be running on a pixel and

00:10:57,300 --> 00:11:03,340
it's it works

00:11:00,670 --> 00:11:04,750
I haven't found many devices where it

00:11:03,340 --> 00:11:07,130
doesn't probably maybe old versions of

00:11:04,750 --> 00:11:09,470
Android it might not work very well but

00:11:07,130 --> 00:11:11,750
it works on a lot of devices so that's

00:11:09,470 --> 00:11:13,220
great it works on devices and it's

00:11:11,750 --> 00:11:16,430
agnostic yeah I think that'll work with

00:11:13,220 --> 00:11:21,580
cucumber the last thing we're gonna need

00:11:16,430 --> 00:11:25,190
to put this all together is web

00:11:21,580 --> 00:11:27,500
webdriver io web driver IO is simply

00:11:25,190 --> 00:11:31,010
just gonna connect everything together

00:11:27,500 --> 00:11:33,650
it's going to basically be the driver

00:11:31,010 --> 00:11:35,570
for our testing and that's why it said

00:11:33,650 --> 00:11:37,610
browser even though it was clicking that

00:11:35,570 --> 00:11:41,420
was a mobile in the feature file I

00:11:37,610 --> 00:11:43,670
showed you it said browser there because

00:11:41,420 --> 00:11:47,150
they assume everything's either a

00:11:43,670 --> 00:11:49,970
browser or mobile you know or a mobile

00:11:47,150 --> 00:11:53,690
device but it still runs off of the same

00:11:49,970 --> 00:11:55,670
type of API the selenium API so you're

00:11:53,690 --> 00:11:57,200
switching between mobile and browser

00:11:55,670 --> 00:11:59,300
isn't so difficult

00:11:57,200 --> 00:12:02,270
you could write steps or both and then

00:11:59,300 --> 00:12:07,490
just switch out the service whether it

00:12:02,270 --> 00:12:09,500
be appium or selenium like something

00:12:07,490 --> 00:12:13,310
like you know protractor which runs with

00:12:09,500 --> 00:12:16,550
selenium so it's quite nice so we're

00:12:13,310 --> 00:12:20,450
gonna use that as our kind of wrapper of

00:12:16,550 --> 00:12:22,880
sorts to connect the two so here I'm

00:12:20,450 --> 00:12:25,720
going to show you that signup feature

00:12:22,880 --> 00:12:34,010
file in action

00:12:25,720 --> 00:12:36,740
hopefully just okay so on the left is

00:12:34,010 --> 00:12:39,740
this is an Android pix Google pixel and

00:12:36,740 --> 00:12:41,180
then on the right is an iPhone 6 and

00:12:39,740 --> 00:12:47,030
it's just signed me up

00:12:41,180 --> 00:12:48,620
oh no it's sunny me up in the left it's

00:12:47,030 --> 00:12:51,830
doing the Android version

00:12:48,620 --> 00:12:56,420
oh it's filled my name wrong no it's

00:12:51,830 --> 00:12:59,660
right now so both those seem to work

00:12:56,420 --> 00:13:02,300
fine and then both work you know

00:12:59,660 --> 00:13:07,670
scenarios pass so we can see the same

00:13:02,300 --> 00:13:09,650
exact output as we saw in the feature

00:13:07,670 --> 00:13:11,750
file so when you're writing your tests

00:13:09,650 --> 00:13:14,020
you expect you know what you're gonna

00:13:11,750 --> 00:13:18,440
see in your output as well so it's very

00:13:14,020 --> 00:13:20,200
clear to see okay that failed and versus

00:13:18,440 --> 00:13:23,510
trying to find a certain

00:13:20,200 --> 00:13:27,170
you know I guess declaration in your

00:13:23,510 --> 00:13:29,060
code it's very very simple to debug

00:13:27,170 --> 00:13:34,490
that's another thing I find with

00:13:29,060 --> 00:13:37,130
cucumber but you know so how did that

00:13:34,490 --> 00:13:42,200
all work as I explained earlier we have

00:13:37,130 --> 00:13:46,010
those three different things firstly we

00:13:42,200 --> 00:13:47,810
write our cucumber tests or I guess from

00:13:46,010 --> 00:13:52,010
a product scenario if I'm building a new

00:13:47,810 --> 00:13:53,630
product I'm going to write the tests for

00:13:52,010 --> 00:13:55,430
with my product manager like come up

00:13:53,630 --> 00:13:58,340
with some tests that may not match the

00:13:55,430 --> 00:14:01,730
what the what we've written for our

00:13:58,340 --> 00:14:05,020
steps but it matches the product

00:14:01,730 --> 00:14:09,020
requirements and then I'm going to

00:14:05,020 --> 00:14:12,980
translate them into what we have four

00:14:09,020 --> 00:14:16,580
steps and then I'm going to basically

00:14:12,980 --> 00:14:21,110
run them and then say okay

00:14:16,580 --> 00:14:23,000
cucumber tell web run a webdriver IO

00:14:21,110 --> 00:14:25,580
command like as we saw earlier said

00:14:23,000 --> 00:14:27,410
browser click and what it's going to do

00:14:25,580 --> 00:14:31,510
is going to click an accessibility label

00:14:27,410 --> 00:14:33,740
in my react native app so Android and

00:14:31,510 --> 00:14:36,380
and iOS we have these things called

00:14:33,740 --> 00:14:39,350
accessibility labels that allow us to

00:14:36,380 --> 00:14:41,030
actually kind of get in you know

00:14:39,350 --> 00:14:44,140
actually see the it's just used for

00:14:41,030 --> 00:14:48,200
accessibility allow us to actually see

00:14:44,140 --> 00:14:50,780
what things are with bug via text so

00:14:48,200 --> 00:14:52,160
that's pretty useful for tagging so that

00:14:50,780 --> 00:14:54,500
we can figure out what we want to click

00:14:52,160 --> 00:14:56,930
and then once it clicks that once it

00:14:54,500 --> 00:14:58,370
once webdriver IO actually sends that

00:14:56,930 --> 00:15:03,230
command it's going to translate it into

00:14:58,370 --> 00:15:04,370
appium I guess snappy M commands and

00:15:03,230 --> 00:15:06,800
then a pm's is gonna actually

00:15:04,370 --> 00:15:09,230
communicate with the device so it is

00:15:06,800 --> 00:15:10,640
sounds really really complex but once

00:15:09,230 --> 00:15:20,630
you get it set up but once you get it

00:15:10,640 --> 00:15:24,980
all working it's it's wonderful so we've

00:15:20,630 --> 00:15:27,380
used we've used appium and cucumber for

00:15:24,980 --> 00:15:30,530
about mmm I guess ever since we've

00:15:27,380 --> 00:15:34,460
launched our Iraq native app so it's

00:15:30,530 --> 00:15:38,779
maybe just over six seven months

00:15:34,460 --> 00:15:40,970
and it's it's been great like writing

00:15:38,779 --> 00:15:43,850
tests it doesn't it takes me you know a

00:15:40,970 --> 00:15:45,470
couple minutes and you know some juniors

00:15:43,850 --> 00:15:47,089
it'll take me maybe a couple maybe a

00:15:45,470 --> 00:15:50,120
couple of hours or things like that it

00:15:47,089 --> 00:15:52,220
doesn't take a whole lot of time to just

00:15:50,120 --> 00:15:54,050
pick up okay I'm going through the flow

00:15:52,220 --> 00:15:56,990
okay I can write some tests whether it

00:15:54,050 --> 00:15:59,510
be before or after development it's

00:15:56,990 --> 00:16:01,160
pretty flexible so yeah we've already

00:15:59,510 --> 00:16:05,270
tests a lot more often just because it's

00:16:01,160 --> 00:16:09,800
easier and what's great about this setup

00:16:05,270 --> 00:16:11,089
is that you don't really have to like be

00:16:09,800 --> 00:16:12,680
like oh it has to be react native you

00:16:11,089 --> 00:16:15,260
could use a native app it's fine because

00:16:12,680 --> 00:16:19,160
we have a native iOS app and we have a

00:16:15,260 --> 00:16:20,450
lot of support there we were like okay

00:16:19,160 --> 00:16:21,830
well we can actually start applying

00:16:20,450 --> 00:16:24,649
these tests because they're so easy

00:16:21,830 --> 00:16:28,580
we'll apply them to our Swift app which

00:16:24,649 --> 00:16:31,070
is really really great and then again

00:16:28,580 --> 00:16:32,360
like this setup also like you can just

00:16:31,070 --> 00:16:35,480
switch out the language you can use

00:16:32,360 --> 00:16:39,170
Babel type script or whatever so we love

00:16:35,480 --> 00:16:41,180
that and yeah again we use cucumber for

00:16:39,170 --> 00:16:43,070
everything so when you have a developer

00:16:41,180 --> 00:16:46,459
moving from different things and testing

00:16:43,070 --> 00:16:52,880
things it's not complicated it's a

00:16:46,459 --> 00:16:56,029
really simple process so what is like

00:16:52,880 --> 00:16:59,120
really the did you know what we said in

00:16:56,029 --> 00:17:01,550
beginning of this talk what is like what

00:16:59,120 --> 00:17:03,020
we learned I guess you would say what's

00:17:01,550 --> 00:17:06,559
what what did we learn

00:17:03,020 --> 00:17:08,569
it's definitely flexible this this is

00:17:06,559 --> 00:17:10,550
made me because a webdriver IO would

00:17:08,569 --> 00:17:15,260
being able to switch out test runners

00:17:10,550 --> 00:17:17,150
and test services it's definitely faster

00:17:15,260 --> 00:17:18,860
for like people to pick up I wouldn't

00:17:17,150 --> 00:17:20,750
say the tests are faster I would say

00:17:18,860 --> 00:17:24,650
test might be even slower than some

00:17:20,750 --> 00:17:26,900
other more modern solutions but when it

00:17:24,650 --> 00:17:29,990
come it's I think it's costing the team

00:17:26,900 --> 00:17:31,429
a lot more time to have like it's

00:17:29,990 --> 00:17:33,140
development times more expensive than

00:17:31,429 --> 00:17:34,910
testing time it's better to have

00:17:33,140 --> 00:17:37,970
automated tests that just work rather

00:17:34,910 --> 00:17:42,890
than developers who time or developers

00:17:37,970 --> 00:17:44,870
not writing to us but unfortunately this

00:17:42,890 --> 00:17:47,860
steps a little difficult but I did put

00:17:44,870 --> 00:17:51,160
the source code up so you

00:17:47,860 --> 00:17:54,130
access it next page next is next slide

00:17:51,160 --> 00:17:57,790
and I am doing and working on a CLI for

00:17:54,130 --> 00:18:03,429
this so it will be hopefully available

00:17:57,790 --> 00:18:04,600
soon I'm testing it in house and like

00:18:03,429 --> 00:18:06,490
where we just haven't had the

00:18:04,600 --> 00:18:08,830
opportunity to actually say yeah this

00:18:06,490 --> 00:18:14,130
ready so what it is we'll definitely put

00:18:08,830 --> 00:18:14,130
it on our blog but yeah thank you

00:18:14,900 --> 00:18:21,029

YouTube URL: https://www.youtube.com/watch?v=Tt9CcYsDPoE


