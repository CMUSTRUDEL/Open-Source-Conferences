Title: React Native London - Live Stream - March 2020
Publication date: 2020-03-31
Playlist: React Native London
Description: 
	Note: Each of these presentations are now available on YouTube Channel in the React Native London playlist! :-)

The March meetup is just around the corner! This time we will be hosting our first digital remote meetup! The meetup will be hosted on Pusher Youtube channel.

We will have the speakers in the chat to answer questions as well as a short Livestream after to answer any questions!

• 7:00 pm - 7:15 pm: Intro
• 7:15 pm - 8:30 pm: Talks + Q&A

Thanks as always to Pusher who made the possibility of a remote meetup a reality for us!

We have some great talks lined up:
_______________
💻 The Talk(s)

1) MobX - state management with no boilerplate - by Mike Borozdin

MobX, unlike Redux, requires little boilerplate and provides a centralised place for your business logic. In this talk, we'll do live coding and move an existing app written with Redux to MobX.

2) Building a web-like workflow for React Native - by Kamile and Hentie

Modern web development is spoilt for tools when it comes to deployment, with easy automated testing and deployment previews giving you fast feedback on your changes in isolation. At Kantan we had a look at how we can get some of the same benefits in a React Native pipeline.

___________________
🍷 The sponsor – Theodo (https://www.theodo.co.uk/)

Our team of 45+ agile web, mobile and software experts are based in Soho Square, London with offices in Paris and New York.

Over the last 10 years and across over 500 projects, we have partnered with non-technical founders to launch their first product, FTSE 100 companies to increase market share through launching internal startups & spearheading digital transformation initiatives, and SME CTOs to build and scale their technical teams.

Theodo projects start fast, and progress even faster, with our unique methodology combining agile, lean and DevOps allowing us to build more efficiently as the project progresses. We are experts at React, React Native, Django/Python, Node.js and Symfony, with experience in many other frameworks.
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:01,170 --> 00:01:51,430
[Music]

00:01:54,510 --> 00:03:36,970
[Music]

00:03:40,510 --> 00:05:46,910
[Music]

00:05:50,000 --> 00:06:45,449
[Music]

00:06:47,820 --> 00:07:32,399
[Music]

00:07:35,940 --> 00:09:42,340
[Music]

00:09:45,430 --> 00:10:13,919
[Music]

00:10:14,450 --> 00:10:17,880
you

00:10:14,800 --> 00:10:17,880
[Music]

00:10:21,820 --> 00:10:27,759
[Music]

00:10:59,610 --> 00:11:09,900
[Music]

00:11:13,270 --> 00:11:27,740
[Music]

00:11:50,840 --> 00:11:52,900
you

00:12:00,230 --> 00:12:09,459
[Music]

00:12:16,790 --> 00:12:26,110
[Music]

00:12:55,090 --> 00:13:20,979
[Music]

00:13:52,830 --> 00:14:03,120
[Music]

00:14:06,490 --> 00:14:20,960
[Music]

00:14:44,889 --> 00:14:46,949
you

00:14:53,370 --> 00:15:02,609
[Music]

00:15:09,940 --> 00:15:19,239
[Music]

00:15:48,230 --> 00:16:14,119
[Music]

00:16:45,970 --> 00:16:56,260
[Music]

00:16:59,630 --> 00:17:14,099
[Music]

00:17:36,980 --> 00:17:39,040
you

00:17:46,590 --> 00:17:55,819
[Music]

00:18:03,150 --> 00:18:12,469
[Music]

00:18:30,750 --> 00:18:32,810
you

00:18:48,920 --> 00:18:50,980
you

00:18:56,300 --> 00:19:03,560
hi everyone and welcome to the London

00:19:01,310 --> 00:19:06,200
the March edition of the London react

00:19:03,560 --> 00:19:08,630
native a meet-up this our first ever

00:19:06,200 --> 00:19:10,250
online edition of the meetup so

00:19:08,630 --> 00:19:12,200
hopefully everything goes smoothly and

00:19:10,250 --> 00:19:15,320
thank you for watching the first ever

00:19:12,200 --> 00:19:17,840
online live edition and thank you very

00:19:15,320 --> 00:19:20,150
much as well to pusher for being able to

00:19:17,840 --> 00:19:24,020
livestream it for us at such short

00:19:20,150 --> 00:19:27,980
notice and as always all the talks after

00:19:24,020 --> 00:19:29,750
this will be up on their channel and as

00:19:27,980 --> 00:19:32,450
always tonight we've got two great talks

00:19:29,750 --> 00:19:34,850
coming up the first by Mike on mob

00:19:32,450 --> 00:19:36,860
ex-state Management mob ex is an

00:19:34,850 --> 00:19:38,860
alternative to redux and he's going to

00:19:36,860 --> 00:19:41,300
talk us through with some live coding

00:19:38,860 --> 00:19:45,710
how to use mob ex and how to reduce your

00:19:41,300 --> 00:19:48,500
boiler plates using mob ex the next talk

00:19:45,710 --> 00:19:50,600
will be by cam and handy and it will be

00:19:48,500 --> 00:19:52,760
about building a web like workflow for

00:19:50,600 --> 00:19:54,620
react native and they're going to talk

00:19:52,760 --> 00:19:58,490
about some of the experience of Canton

00:19:54,620 --> 00:19:59,930
on using web deployment tools and how

00:19:58,490 --> 00:20:02,990
they've managed to reap the benefits of

00:19:59,930 --> 00:20:04,430
those in react native with a react

00:20:02,990 --> 00:20:08,120
native deployment and integration

00:20:04,430 --> 00:20:10,520
pipeline and as always we are looking

00:20:08,120 --> 00:20:13,850
for any speakers for upcoming months

00:20:10,520 --> 00:20:17,690
both in person and online well hopefully

00:20:13,850 --> 00:20:20,270
in person if we can but the link to sign

00:20:17,690 --> 00:20:22,460
up to speak is on the meetup page so

00:20:20,270 --> 00:20:25,520
head there if you'd like to speak in the

00:20:22,460 --> 00:20:31,240
future and but without any real further

00:20:25,520 --> 00:20:31,240
ado let's go into the first talk by Mike

00:20:38,430 --> 00:20:41,509
[Music]

00:20:41,549 --> 00:20:46,899
Slone welcome this is Mike

00:20:44,440 --> 00:20:49,659
a man soft engineer based in London

00:20:46,899 --> 00:20:51,669
United Kingdom and today I'm going to

00:20:49,659 --> 00:20:54,429
talk about space management in the react

00:20:51,669 --> 00:20:56,320
and react native and mainly I'm going to

00:20:54,429 --> 00:20:58,750
talk about a library called mo backs

00:20:56,320 --> 00:21:03,490
which really simplify state management

00:20:58,750 --> 00:21:06,730
and unlike relaxed it requires you where

00:21:03,490 --> 00:21:07,240
a little boilerplate code and with mo

00:21:06,730 --> 00:21:09,639
backs

00:21:07,240 --> 00:21:13,210
we've been excessively using it as my

00:21:09,639 --> 00:21:15,820
company for a couple years and we have

00:21:13,210 --> 00:21:19,110
developed a thin pack mobile app and

00:21:15,820 --> 00:21:22,419
with that edit work model slow well and

00:21:19,110 --> 00:21:27,100
we also have a web app which predates it

00:21:22,419 --> 00:21:31,090
and the funny thing is that and web app

00:21:27,100 --> 00:21:33,730
is written in reader and every time I

00:21:31,090 --> 00:21:37,240
have to do any work in it

00:21:33,730 --> 00:21:41,889
I really miss more backs and how concise

00:21:37,240 --> 00:21:45,370
attest and before I start talking about

00:21:41,889 --> 00:21:47,950
what mo bucks is just a few points about

00:21:45,370 --> 00:21:51,100
with axe and why I think there are a few

00:21:47,950 --> 00:21:54,419
problems with that and just a couple

00:21:51,100 --> 00:21:57,850
days ago I stumbled upon this to it and

00:21:54,419 --> 00:22:00,610
I really resonated that and I'm sure my

00:21:57,850 --> 00:22:01,269
colleagues would also control that

00:22:00,610 --> 00:22:04,179
Riddick's

00:22:01,269 --> 00:22:08,110
is growing for extracting your state and

00:22:04,179 --> 00:22:11,710
out of components but then the codes

00:22:08,110 --> 00:22:14,259
which manages the state and that's in a

00:22:11,710 --> 00:22:17,110
very different places because if you

00:22:14,259 --> 00:22:19,570
think about it the usual architecture

00:22:17,110 --> 00:22:23,620
for eg redux it's something like that

00:22:19,570 --> 00:22:27,340
and you have a component which at some

00:22:23,620 --> 00:22:30,990
points triggers an action creator which

00:22:27,340 --> 00:22:36,120
dispatches the nation' which then and

00:22:30,990 --> 00:22:40,720
gives in to reducer and finally that and

00:22:36,120 --> 00:22:42,340
reran the second bullet so in the

00:22:40,720 --> 00:22:45,850
fashion when we'll do some web coding

00:22:42,340 --> 00:22:46,870
will take a simple operation Redux will

00:22:45,850 --> 00:22:48,550
see the problem

00:22:46,870 --> 00:22:53,400
and you'll see how Moe backs will make

00:22:48,550 --> 00:22:56,650
it much more concise and move backs

00:22:53,400 --> 00:22:58,810
relies on the observer pattern and that

00:22:56,650 --> 00:23:02,620
means it's not afraid to imitate the

00:22:58,810 --> 00:23:05,670
state and that's really result in how

00:23:02,620 --> 00:23:09,910
concise the code is imagine your site

00:23:05,670 --> 00:23:11,830
similarly mobile stores are also a great

00:23:09,910 --> 00:23:16,450
place for putting your business logic

00:23:11,830 --> 00:23:21,610
and it also allows you to easily unit

00:23:16,450 --> 00:23:23,530
test it and finally freezer is that the

00:23:21,610 --> 00:23:27,700
creative mode box is now working for

00:23:23,530 --> 00:23:32,040
Facebook so they get enjoy some supports

00:23:27,700 --> 00:23:35,350
in the community and at this stage and

00:23:32,040 --> 00:23:38,740
we'll proceed to some live coding and

00:23:35,350 --> 00:23:44,430
I'm going to demonstrate you and a

00:23:38,740 --> 00:23:44,430
simple app I created with react and

00:23:44,610 --> 00:23:52,330
redux it's another to do up it shows to

00:23:49,900 --> 00:23:55,240
do items and it allows you to add a new

00:23:52,330 --> 00:24:01,030
one for example Canada night and curl

00:23:55,240 --> 00:24:04,480
convert it to Moe bags and it'll appear

00:24:01,030 --> 00:24:08,080
on our screen and Vic you think about

00:24:04,480 --> 00:24:14,740
this up and it does store data in memory

00:24:08,080 --> 00:24:17,890
and it actually sells goes to a web

00:24:14,740 --> 00:24:20,680
server which returns this list of items

00:24:17,890 --> 00:24:24,430
and accepts new ones there is a four

00:24:20,680 --> 00:24:28,660
that I wanted to make this example a bit

00:24:24,430 --> 00:24:30,820
more real because often we do need to

00:24:28,660 --> 00:24:34,030
make HTTP calls and I think this is

00:24:30,820 --> 00:24:35,470
important and to understand how you can

00:24:34,030 --> 00:24:39,340
work with that when you choose in a

00:24:35,470 --> 00:24:47,050
state management library now if it dive

00:24:39,340 --> 00:24:50,800
into the code and we will see that we

00:24:47,050 --> 00:24:53,620
have two M components on the same level

00:24:50,800 --> 00:24:57,300
which you just saw on the screen one of

00:24:53,620 --> 00:25:00,310
them is for added new to-do items and

00:24:57,300 --> 00:25:04,150
the other one list

00:25:00,310 --> 00:25:07,870
all the to-do items we have I'm not

00:25:04,150 --> 00:25:09,850
really highlight and a necessity for

00:25:07,870 --> 00:25:13,180
having state management because we have

00:25:09,850 --> 00:25:19,180
the sibling components which do need to

00:25:13,180 --> 00:25:22,240
and exchange data and if you look at new

00:25:19,180 --> 00:25:28,570
to do it's like a pretty and simple

00:25:22,240 --> 00:25:33,640
component where we display an input item

00:25:28,570 --> 00:25:37,480
and allow other than you 1ym and a Redux

00:25:33,640 --> 00:25:42,480
action creator and similarly the

00:25:37,480 --> 00:25:47,620
component which lists to-do items and

00:25:42,480 --> 00:25:50,980
what it's got when we and render it and

00:25:47,620 --> 00:25:53,680
it kills user fact to get to do this

00:25:50,980 --> 00:25:59,620
which is I'm not an avid X action

00:25:53,680 --> 00:26:01,600
creator and then I give properties with

00:25:59,620 --> 00:26:05,380
to-do items which is displays on the

00:26:01,600 --> 00:26:06,070
screen so component once it's nice and

00:26:05,380 --> 00:26:09,970
easy

00:26:06,070 --> 00:26:12,340
it just mostly pure reacts with a few

00:26:09,970 --> 00:26:16,030
react reacts hello

00:26:12,340 --> 00:26:21,220
hi all the components and which provide

00:26:16,030 --> 00:26:26,260
us with X plumbing but and if you look

00:26:21,220 --> 00:26:29,140
into how I want read x2 is structured

00:26:26,260 --> 00:26:32,740
that's where the things get a little bit

00:26:29,140 --> 00:26:34,660
more verbose and first of all we can see

00:26:32,740 --> 00:26:38,800
and work quite a store

00:26:34,660 --> 00:26:42,760
we have one file and it gets reduced to

00:26:38,800 --> 00:26:46,420
this and because we use HTTP because it

00:26:42,760 --> 00:26:51,940
also has to apply middleware thank to

00:26:46,420 --> 00:26:54,670
enable I think enough action creators

00:26:51,940 --> 00:26:57,520
and here we are we have like no action

00:26:54,670 --> 00:27:00,340
creators and once again the truth is not

00:26:57,520 --> 00:27:05,140
particularly complicated right when it

00:27:00,340 --> 00:27:06,820
comes to getting to do with so much to

00:27:05,140 --> 00:27:09,460
be required we wait for it that we

00:27:06,820 --> 00:27:11,500
dispatch an action and when we do to do

00:27:09,460 --> 00:27:12,950
we just seem lock thing but we call a

00:27:11,500 --> 00:27:17,140
nexus and action

00:27:12,950 --> 00:27:21,290
creator and them have reducers which

00:27:17,140 --> 00:27:24,080
create a new state and finally we have

00:27:21,290 --> 00:27:27,080
constants which define the actual names

00:27:24,080 --> 00:27:30,140
and this is model which has to be shared

00:27:27,080 --> 00:27:32,930
between action creators and reducers as

00:27:30,140 --> 00:27:38,000
you know that we are talking about the

00:27:32,930 --> 00:27:40,640
same action so to summarize although all

00:27:38,000 --> 00:27:42,530
those baits like reduces and action

00:27:40,640 --> 00:27:46,370
creators are not particularly

00:27:42,530 --> 00:27:49,940
complicated on the own if we combine

00:27:46,370 --> 00:27:55,040
them we'll see that without this bigger

00:27:49,940 --> 00:27:58,670
ba city to our code and sometimes it

00:27:55,040 --> 00:28:04,660
becomes a little bit and complicated to

00:27:58,670 --> 00:28:07,160
see what's going on where and right now

00:28:04,660 --> 00:28:12,110
having said that I'm gonna demonstrate

00:28:07,160 --> 00:28:14,630
to you how we can replace this um pretty

00:28:12,110 --> 00:28:20,260
verbose code of redux with something

00:28:14,630 --> 00:28:24,230
more concise and done with mo backs so

00:28:20,260 --> 00:28:28,610
let's start and what I'm going to do I'm

00:28:24,230 --> 00:28:32,260
going to delete the contents of store GS

00:28:28,610 --> 00:28:36,620
file and I'm going to start writing and

00:28:32,260 --> 00:28:42,230
ammo bookstore so typically in more

00:28:36,620 --> 00:28:46,360
backs and we use classes and I'm going

00:28:42,230 --> 00:28:46,360
to create a class code to do store and

00:28:46,510 --> 00:28:56,750
in that class we're going to define and

00:28:51,160 --> 00:28:59,570
a property code to do and it's going to

00:28:56,750 --> 00:29:02,540
be an MC array and it'll hold out to do

00:28:59,570 --> 00:29:08,200
items and we're going to decorate it

00:29:02,540 --> 00:29:16,070
with observable which is one of the key

00:29:08,200 --> 00:29:17,130
concepts of MU bags and what observable

00:29:16,070 --> 00:29:20,239
is and

00:29:17,130 --> 00:29:20,239
[Music]

00:29:20,870 --> 00:29:27,110
it allows us to decorate and this

00:29:24,590 --> 00:29:30,950
property or even enviable it doesn't

00:29:27,110 --> 00:29:33,830
even have to belong to a class and every

00:29:30,950 --> 00:29:37,270
time there is a change to that variable

00:29:33,830 --> 00:29:39,020
property it will notify all them

00:29:37,270 --> 00:29:43,610
observers which are going to be a

00:29:39,020 --> 00:29:46,940
component and it will rerender them so

00:29:43,610 --> 00:29:51,470
having defined the variables you'll hold

00:29:46,940 --> 00:29:54,350
all data and our next step is to define

00:29:51,470 --> 00:29:58,539
actions which will perform manipulations

00:29:54,350 --> 00:30:02,149
on the data and as we have seen before

00:29:58,539 --> 00:30:06,220
with our Redux example actually two

00:30:02,149 --> 00:30:09,260
actions here retrieving data and

00:30:06,220 --> 00:30:13,929
updating it so let's start with

00:30:09,260 --> 00:30:21,440
recruiting data we're going to define a

00:30:13,929 --> 00:30:29,840
method called get to this it's going to

00:30:21,440 --> 00:30:32,870
be a mobile action and it's also going

00:30:29,840 --> 00:30:35,179
to be an a synchronous method because

00:30:32,870 --> 00:30:38,299
we're making an HTTP call and we use I

00:30:35,179 --> 00:30:41,120
think awake for that so similar to redux

00:30:38,299 --> 00:30:48,890
it's going to be actually that simple we

00:30:41,120 --> 00:30:56,210
gonna use fetch to get data from the API

00:30:48,890 --> 00:31:00,740
and I need to put a weight here and then

00:30:56,210 --> 00:31:04,880
we need to get decent data from it so we

00:31:00,740 --> 00:31:09,370
do a weight without Jason and finally we

00:31:04,880 --> 00:31:13,610
have M result to our to dues so this is

00:31:09,370 --> 00:31:17,120
really simple we just created an action

00:31:13,610 --> 00:31:20,929
which and perform something in this case

00:31:17,120 --> 00:31:24,279
legend data from an API and it assigns

00:31:20,929 --> 00:31:27,320
to and our Bible which is mark

00:31:24,279 --> 00:31:29,299
observable so when you start looking at

00:31:27,320 --> 00:31:32,419
components you see how we'll get

00:31:29,299 --> 00:31:34,840
rear-ended and quickly I'm gonna do the

00:31:32,419 --> 00:31:37,060
same thing for um

00:31:34,840 --> 00:31:39,340
they need to do item so as you can

00:31:37,060 --> 00:31:41,080
imagine we just need to create another

00:31:39,340 --> 00:31:44,710
method which is going to be decorated

00:31:41,080 --> 00:31:48,190
with action and put up to do which will

00:31:44,710 --> 00:31:52,300
accept an arguments of to-do item and

00:31:48,190 --> 00:31:59,560
similarly we often it perform a fetch

00:31:52,300 --> 00:32:02,710
operation and this instance is going to

00:31:59,560 --> 00:32:07,810
be a BAS request because we are in a new

00:32:02,710 --> 00:32:12,790
item or day is to do and once it's

00:32:07,810 --> 00:32:17,230
completed we are going to refresh our

00:32:12,790 --> 00:32:19,780
cities and because we want to make sure

00:32:17,230 --> 00:32:22,150
that our entire front end is driven by

00:32:19,780 --> 00:32:23,760
the back end so that they all at the

00:32:22,150 --> 00:32:29,740
same state

00:32:23,760 --> 00:32:32,680
ok so this is basically is when it comes

00:32:29,740 --> 00:32:35,770
to defining your stores just one single

00:32:32,680 --> 00:32:39,270
file just one single glass and just like

00:32:35,770 --> 00:32:43,120
you know what 20 lines of code which and

00:32:39,270 --> 00:32:45,820
the final data marketers are observable

00:32:43,120 --> 00:32:50,890
and define actions which allow us to

00:32:45,820 --> 00:32:51,700
perform certain things on the data so so

00:32:50,890 --> 00:32:54,280
far so good

00:32:51,700 --> 00:33:00,190
right and I don't think we need to do is

00:32:54,280 --> 00:33:05,050
to and look at our components and see if

00:33:00,190 --> 00:33:11,350
they require any changes so let's start

00:33:05,050 --> 00:33:13,780
with a to do component and so you

00:33:11,350 --> 00:33:16,470
receive that as I demonstrate you before

00:33:13,780 --> 00:33:20,560
and this component does two things

00:33:16,470 --> 00:33:25,060
and use the fact it goes get to dues and

00:33:20,560 --> 00:33:27,190
then he just displays a list of items so

00:33:25,060 --> 00:33:32,830
don't you think we need to change here

00:33:27,190 --> 00:33:35,770
is instead of getting this properties

00:33:32,830 --> 00:33:37,600
and Massacre get to dues and this

00:33:35,770 --> 00:33:40,410
component as a property we'll get a

00:33:37,600 --> 00:33:40,410
to-do store

00:33:40,780 --> 00:33:51,430
and we got a code to do get addition to

00:33:44,260 --> 00:33:56,200
the store and similarly um to do this

00:33:51,430 --> 00:33:59,530
are going to be introduced alright that

00:33:56,200 --> 00:34:02,760
skill and we won't need map state

00:33:59,530 --> 00:34:07,510
approach among dispatch the process and

00:34:02,760 --> 00:34:12,399
what this component will meet is it will

00:34:07,510 --> 00:34:16,450
have to become an observer and which as

00:34:12,399 --> 00:34:20,200
I said before is a mobile concept we

00:34:16,450 --> 00:34:22,570
have observables and which our data we

00:34:20,200 --> 00:34:26,020
have from different actions all and we

00:34:22,570 --> 00:34:33,419
have observers which react with changes

00:34:26,020 --> 00:34:42,040
and in the data I'm going to import it

00:34:33,419 --> 00:34:45,190
from mo back to react and it's almost

00:34:42,040 --> 00:34:48,010
that of course you wonder where this

00:34:45,190 --> 00:34:51,870
property to justo will come from similar

00:34:48,010 --> 00:34:56,379
to read acts will be am not them and

00:34:51,870 --> 00:35:00,010
higher all the components body by the

00:34:56,379 --> 00:35:05,470
function called inject which will inject

00:35:00,010 --> 00:35:11,170
and the stores into our component it's

00:35:05,470 --> 00:35:13,360
got like the syntax it maps actually as

00:35:11,170 --> 00:35:17,080
a number of different stores in our

00:35:13,360 --> 00:35:20,920
example M there is just one store code

00:35:17,080 --> 00:35:24,280
to do and it Maps it onto a list of

00:35:20,920 --> 00:35:27,610
properties via skill says I've got a

00:35:24,280 --> 00:35:30,570
syntax error somewhere like yeah that

00:35:27,610 --> 00:35:33,960
because inject returns the function

00:35:30,570 --> 00:35:37,630
which allows me to wrap my observer and

00:35:33,960 --> 00:35:43,450
with the simple manipulations and we

00:35:37,630 --> 00:35:46,870
have changed our reduced component to

00:35:43,450 --> 00:35:48,760
use mo backs and it's very something to

00:35:46,870 --> 00:35:51,060
go and run the code right now by chance

00:35:48,760 --> 00:35:53,680
a it's going to fail so we need to do

00:35:51,060 --> 00:35:54,700
two more things we're going to do the

00:35:53,680 --> 00:35:57,610
same for

00:35:54,700 --> 00:36:00,730
how I knew to do component which will

00:35:57,610 --> 00:36:03,970
even be easier and then will change add

00:36:00,730 --> 00:36:06,820
the wiring and the provider so they knew

00:36:03,970 --> 00:36:10,600
to do components as you can imagine the

00:36:06,820 --> 00:36:15,460
first thing we need to do is to inject

00:36:10,600 --> 00:36:17,230
the store and modify what happens when

00:36:15,460 --> 00:36:20,800
you click on the button look we're going

00:36:17,230 --> 00:36:23,940
to go to the store app to do our math

00:36:20,800 --> 00:36:29,620
dispatch the process will disappear and

00:36:23,940 --> 00:36:32,590
what we're going to export it's going to

00:36:29,620 --> 00:36:35,380
be even simpler in this instance new to

00:36:32,590 --> 00:36:38,530
do doesn't even have to be a mobile

00:36:35,380 --> 00:36:42,190
observer at this company does not have

00:36:38,530 --> 00:36:47,260
to remember or changes don't think we

00:36:42,190 --> 00:36:56,620
need to do is just inject the store into

00:36:47,260 --> 00:37:01,930
it so new to the store and we'll map all

00:36:56,620 --> 00:37:06,060
our mobile stores onto properties of

00:37:01,930 --> 00:37:09,910
this components and we'll wrap it in it

00:37:06,060 --> 00:37:12,730
and now we just need to remove all the

00:37:09,910 --> 00:37:14,320
supports when I present thinkers even

00:37:12,730 --> 00:37:17,740
though on poor statement become more

00:37:14,320 --> 00:37:22,000
concise and just important Jack from moe

00:37:17,740 --> 00:37:28,300
backs react right so we have ported

00:37:22,000 --> 00:37:31,930
another component onto mobile so other

00:37:28,300 --> 00:37:33,970
side the final thing is to do a bit of

00:37:31,930 --> 00:37:36,340
plumbing and it's going to be very

00:37:33,970 --> 00:37:39,550
similar so what I haven't shown you

00:37:36,340 --> 00:37:43,390
before but you may guess right so

00:37:39,550 --> 00:37:48,690
somewhere there is a file where we must

00:37:43,390 --> 00:37:53,650
we were up our entire application and

00:37:48,690 --> 00:37:56,380
inside the provider which inject the

00:37:53,650 --> 00:37:59,500
read explore so we cannot do exactly the

00:37:56,380 --> 00:38:01,900
same thing and with Mobile's

00:37:59,500 --> 00:38:05,740
instead of important provider from

00:38:01,900 --> 00:38:06,799
reduction react I will this form or box

00:38:05,740 --> 00:38:09,289
reacts

00:38:06,799 --> 00:38:13,369
and similar like I did before I'm just

00:38:09,289 --> 00:38:26,539
going on to to do store is new to do

00:38:13,369 --> 00:38:31,009
store and the store less in store slash

00:38:26,539 --> 00:38:33,439
store so so far let's just go and pack

00:38:31,009 --> 00:38:36,259
that and there's going to cross my

00:38:33,439 --> 00:38:38,779
fingers but I have the knack something

00:38:36,259 --> 00:38:41,959
up okay to do this inject is not define

00:38:38,779 --> 00:38:47,449
to do is not defined okay

00:38:41,959 --> 00:38:54,380
demo gremlins yes I have forgot to

00:38:47,449 --> 00:38:58,099
import inject and to do is not defined

00:38:54,380 --> 00:39:01,160
into this GSX which line

00:38:58,099 --> 00:39:07,670
okay here are me the top typo okay it is

00:39:01,160 --> 00:39:11,109
do this boom by mail coasted agent

00:39:07,670 --> 00:39:18,469
converted to mo bags within you item

00:39:11,109 --> 00:39:22,609
recorded video excellent okay probably I

00:39:18,469 --> 00:39:31,239
should add change the title into to do

00:39:22,609 --> 00:39:36,069
reductive Zuma back so within literally

00:39:31,239 --> 00:39:40,249
5-10 minutes what we did we've taken and

00:39:36,069 --> 00:39:42,410
a small reader application and we

00:39:40,249 --> 00:39:47,539
convert it into mo backs and I think

00:39:42,410 --> 00:39:51,109
that really allowed us to a reuse most

00:39:47,539 --> 00:39:54,140
of our arm and components like to do and

00:39:51,109 --> 00:39:57,910
you to do make some little changes when

00:39:54,140 --> 00:40:00,259
it comes to and how we wire things and

00:39:57,910 --> 00:40:03,410
write our store which is like you know

00:40:00,259 --> 00:40:05,929
pharmo consign now that we have like no

00:40:03,410 --> 00:40:08,150
single class we just like to methods as

00:40:05,929 --> 00:40:14,529
a twister action greater actions reduces

00:40:08,150 --> 00:40:18,439
and one observable and now I can safely

00:40:14,529 --> 00:40:21,470
delete other file so please accidently

00:40:18,439 --> 00:40:24,450
that my up still

00:40:21,470 --> 00:40:26,790
work and maybe up another to do item

00:40:24,450 --> 00:40:28,800
which is how breakfast because I'm

00:40:26,790 --> 00:40:32,940
recording this video early in the

00:40:28,800 --> 00:40:35,370
morning and it still works and another

00:40:32,940 --> 00:40:38,040
thing I just want to point out like it

00:40:35,370 --> 00:40:41,220
was talking before and in terms of

00:40:38,040 --> 00:40:45,620
observables and observers so our data is

00:40:41,220 --> 00:40:49,710
observable and our components are

00:40:45,620 --> 00:40:50,550
observers and so what it means to do is

00:40:49,710 --> 00:40:54,930
a good example

00:40:50,550 --> 00:40:58,200
and if inside of observable we access

00:40:54,930 --> 00:41:00,660
and our observable like in this case to

00:40:58,200 --> 00:41:04,050
do this every time to this will change

00:41:00,660 --> 00:41:07,050
more backs will automatically notify all

00:41:04,050 --> 00:41:11,760
observers and it will trigger a render

00:41:07,050 --> 00:41:18,600
so nice and easy mo back and doesn't

00:41:11,760 --> 00:41:20,190
have a listing for us okay and so if

00:41:18,600 --> 00:41:24,030
you're interested in feeling that codes

00:41:20,190 --> 00:41:26,340
it's available on github there is an

00:41:24,030 --> 00:41:27,870
example projects application and there

00:41:26,340 --> 00:41:31,290
is an example of the mobile application

00:41:27,870 --> 00:41:33,900
plus and the nogf server which serves

00:41:31,290 --> 00:41:36,750
data so you can see for yourself you can

00:41:33,900 --> 00:41:38,250
play for it with yourself and I just

00:41:36,750 --> 00:41:41,550
want to highlight once again the work

00:41:38,250 --> 00:41:45,030
real done right so if you have a look at

00:41:41,550 --> 00:41:48,270
the redux tour even if you combine it in

00:41:45,030 --> 00:41:50,790
them a single file it will be feel quite

00:41:48,270 --> 00:41:53,400
verbose in comparison to what resume the

00:41:50,790 --> 00:41:55,290
lessons at the small backs and I think

00:41:53,400 --> 00:41:57,840
with the read acts personalized register

00:41:55,290 --> 00:42:02,820
both but sometimes a bit difficult to

00:41:57,840 --> 00:42:05,790
see what things are doing like we have

00:42:02,820 --> 00:42:09,270
action creators we have reduces and Moe

00:42:05,790 --> 00:42:11,520
backs its formal concise and if it just

00:42:09,270 --> 00:42:15,090
look at component side by side you will

00:42:11,520 --> 00:42:20,310
see that I run the function hasn't

00:42:15,090 --> 00:42:22,380
dramatically changed like what changes

00:42:20,310 --> 00:42:24,120
the properties we injecting and we could

00:42:22,380 --> 00:42:28,440
actually do it even in the same way as

00:42:24,120 --> 00:42:30,540
in redox inject and properties which

00:42:28,440 --> 00:42:33,090
hold data and functions and which

00:42:30,540 --> 00:42:34,589
perform actions and instead of doing mob

00:42:33,090 --> 00:42:38,910
dispatch the prof we do

00:42:34,589 --> 00:42:43,769
server and inject and some of you may

00:42:38,910 --> 00:42:45,450
wonder and about hooks and in this

00:42:43,769 --> 00:42:48,089
instance I'm not talking about use the

00:42:45,450 --> 00:42:51,180
fact and use stains because we have

00:42:48,089 --> 00:42:54,210
already used them but recently react

00:42:51,180 --> 00:42:57,509
introduced hooks such as you select and

00:42:54,210 --> 00:43:01,049
use this patch which replace mob

00:42:57,509 --> 00:43:05,579
dispersed applause and map state

00:43:01,049 --> 00:43:08,700
applause drops and for easy mobile

00:43:05,579 --> 00:43:14,849
actually have similar mechanism you can

00:43:08,700 --> 00:43:18,119
use hooks instead of wrapping your

00:43:14,849 --> 00:43:21,359
component inside inject in my personal

00:43:18,119 --> 00:43:24,569
opinion it couples your components too

00:43:21,359 --> 00:43:27,239
much to a state management library so

00:43:24,569 --> 00:43:28,859
that if you right now your components

00:43:27,239 --> 00:43:30,539
will have knowledge of that through

00:43:28,859 --> 00:43:34,229
hooks as opposed to getting information

00:43:30,539 --> 00:43:36,390
through properties in my opinion and if

00:43:34,229 --> 00:43:39,950
you do in a testing of your component

00:43:36,390 --> 00:43:43,619
that will make a slightly awkward

00:43:39,950 --> 00:43:50,130
because instead of just passing correct

00:43:43,619 --> 00:43:53,009
properties you have to and mock your

00:43:50,130 --> 00:43:55,019
hook I mean which is doable but it might

00:43:53,009 --> 00:43:57,569
be in in not the best way but really

00:43:55,019 --> 00:44:01,650
it's up to you more bugs dozen Monday's

00:43:57,569 --> 00:44:04,440
anything here and another thing I wanted

00:44:01,650 --> 00:44:08,219
to highlight and I didn't show it in the

00:44:04,440 --> 00:44:12,450
demo so mobic has a number of other cool

00:44:08,219 --> 00:44:14,729
features like for example would you see

00:44:12,450 --> 00:44:18,059
on the screen and that's taken from the

00:44:14,729 --> 00:44:21,450
official documentation and so you may

00:44:18,059 --> 00:44:23,969
have defined for your online shop some

00:44:21,450 --> 00:44:26,969
like an observer called price and amount

00:44:23,969 --> 00:44:29,910
but equally you may have actually

00:44:26,969 --> 00:44:32,099
application in the way that there is a

00:44:29,910 --> 00:44:34,410
component which just displays total

00:44:32,099 --> 00:44:39,630
price right so their component doesn't

00:44:34,410 --> 00:44:44,069
really care about the price of each item

00:44:39,630 --> 00:44:47,219
or like not an amount so easy and you

00:44:44,069 --> 00:44:48,570
can define compute properties and they

00:44:47,219 --> 00:44:50,340
will trigger we rent

00:44:48,570 --> 00:44:52,530
of those components which depend on

00:44:50,340 --> 00:44:54,870
total every time one of the components

00:44:52,530 --> 00:44:57,150
of the formula changes that's actually

00:44:54,870 --> 00:45:03,510
official documentations have quite

00:44:57,150 --> 00:45:06,060
similar to formulas in Excel and and I

00:45:03,510 --> 00:45:10,170
just prepared a list of fun possible

00:45:06,060 --> 00:45:14,910
questions and we get and one of them is

00:45:10,170 --> 00:45:17,070
scary how multiple stores easy and in MO

00:45:14,910 --> 00:45:20,520
bags you can define as many stores as

00:45:17,070 --> 00:45:22,740
you want for example in the application

00:45:20,520 --> 00:45:24,300
we encourage the working we have around

00:45:22,740 --> 00:45:28,170
there's no ten or fifteen different

00:45:24,300 --> 00:45:29,700
stores for different pictures another

00:45:28,170 --> 00:45:32,370
question does the work with react native

00:45:29,700 --> 00:45:34,680
of course and actually this react native

00:45:32,370 --> 00:45:36,900
Meetup although I show the react lab but

00:45:34,680 --> 00:45:40,200
it works really resonating fantastically

00:45:36,900 --> 00:45:40,740
well and we do it and having the back

00:45:40,200 --> 00:45:44,250
tubes

00:45:40,740 --> 00:45:47,070
she motor is actually yes that and and

00:45:44,250 --> 00:45:50,550
the work wire quite well and you may all

00:45:47,070 --> 00:45:53,910
have also seen that we use e F

00:45:50,550 --> 00:45:57,020
decorators like at observable the

00:45:53,910 --> 00:46:01,110
question is do you have to use them

00:45:57,020 --> 00:46:03,510
actually no you can just use functions

00:46:01,110 --> 00:46:06,360
which will wrap your bio box of

00:46:03,510 --> 00:46:08,220
properties I think a decorators adjust

00:46:06,360 --> 00:46:13,710
my syntactic sugar to make it more

00:46:08,220 --> 00:46:19,220
concise and now does work with any kind

00:46:13,710 --> 00:46:21,420
of components and so it works with and

00:46:19,220 --> 00:46:24,840
functional components as you have seen

00:46:21,420 --> 00:46:27,330
and works with big fat components react

00:46:24,840 --> 00:46:29,850
components it doesn't do it with pure

00:46:27,330 --> 00:46:34,710
components well because of issue with

00:46:29,850 --> 00:46:37,770
 component update and so guys that

00:46:34,710 --> 00:46:40,200
is thank you for listening if you have

00:46:37,770 --> 00:46:43,020
any questions please ask them slack or

00:46:40,200 --> 00:46:45,630
YouTube comments and feel free to follow

00:46:43,020 --> 00:46:49,910
me on Twitter and chase me up with more

00:46:45,630 --> 00:46:49,910
questions that's it thank you guys bye

00:47:10,680 --> 00:47:16,500
there Mike and if anyone has any

00:47:14,730 --> 00:47:19,440
questions just leave them in the chat

00:47:16,500 --> 00:47:21,090
and we'll get these to Mike but first of

00:47:19,440 --> 00:47:24,990
all I've got one for myself

00:47:21,090 --> 00:47:26,600
so um has any developer there's often a

00:47:24,990 --> 00:47:30,390
lot of bugs in the code that I write and

00:47:26,600 --> 00:47:36,330
but how is debugging in mob x compared

00:47:30,390 --> 00:47:39,090
to in redux and it is pretty good and as

00:47:36,330 --> 00:47:41,910
I mentioned throughout the bag tools and

00:47:39,090 --> 00:47:45,000
if we remember correctly there is like a

00:47:41,910 --> 00:47:47,880
Chrome extension which allows you to

00:47:45,000 --> 00:47:50,880
inspect your stores in a similar way as

00:47:47,880 --> 00:47:54,240
redux does and frankly speaking I have

00:47:50,880 --> 00:47:58,110
some issues with connecting it to react

00:47:54,240 --> 00:48:01,470
native but then there are also inspect

00:47:58,110 --> 00:48:05,790
tools which allow you to print a new

00:48:01,470 --> 00:48:07,950
entire store and a different states into

00:48:05,790 --> 00:48:11,100
chrome console and it was actually

00:48:07,950 --> 00:48:13,730
really really useful in smashing one of

00:48:11,100 --> 00:48:17,850
the backs we've had recently

00:48:13,730 --> 00:48:20,760
okay which I think really assist you the

00:48:17,850 --> 00:48:23,430
bargain is once again that mo backs is

00:48:20,760 --> 00:48:26,880
very concise because we're often if I

00:48:23,430 --> 00:48:29,820
have to get back a Redux application I

00:48:26,880 --> 00:48:33,030
end up putting breakpoints in action

00:48:29,820 --> 00:48:36,030
creators then in reducers because I

00:48:33,030 --> 00:48:38,580
simply don't know where the problem can

00:48:36,030 --> 00:48:41,820
lie here and if you think about mo backs

00:48:38,580 --> 00:48:46,470
like your code is much smaller so

00:48:41,820 --> 00:48:51,090
chances are if you have any issue is

00:48:46,470 --> 00:48:53,730
gonna be in new actions ok thank you

00:48:51,090 --> 00:48:55,800
very much that and so we did have one

00:48:53,730 --> 00:48:57,960
questions right from Alexandria you

00:48:55,800 --> 00:48:59,850
asked what are your thoughts on mob X

00:48:57,960 --> 00:49:03,170
versus and mulberry trees there's so

00:48:59,850 --> 00:49:06,300
many views and so frankly no I literally

00:49:03,170 --> 00:49:10,610
I heard about a few days ago and I just

00:49:06,300 --> 00:49:13,680
did some googling on well enon video and

00:49:10,610 --> 00:49:17,010
is entrusting and into looking at more

00:49:13,680 --> 00:49:18,840
but frankly I haven't used it okay

00:49:17,010 --> 00:49:21,110
and so we've got a question coming here

00:49:18,840 --> 00:49:23,790
from Christian nice to see you industry

00:49:21,110 --> 00:49:24,539
it's can you observe actions and MA

00:49:23,790 --> 00:49:33,660
backs and

00:49:24,539 --> 00:49:36,179
not just state ie can I have something

00:49:33,660 --> 00:49:37,469
receive each call to add to do like ever

00:49:36,179 --> 00:49:40,049
the silence or middle sir if I

00:49:37,469 --> 00:49:44,029
understand correctly and the question is

00:49:40,049 --> 00:49:46,859
and can you also invoke as ditional

00:49:44,029 --> 00:49:49,349
actions every time we get a code out to

00:49:46,859 --> 00:49:51,390
do yes mo box has a thing called

00:49:49,349 --> 00:49:54,299
reactions which allow it to have

00:49:51,390 --> 00:49:56,900
additional side effects when something

00:49:54,299 --> 00:50:00,269
changes and they're also interesting

00:49:56,900 --> 00:50:04,319
things which are called when so you can

00:50:00,269 --> 00:50:06,779
also define when such reactions can

00:50:04,319 --> 00:50:09,449
happen like for example if you value and

00:50:06,779 --> 00:50:11,880
miss a certain threshold and it's pretty

00:50:09,449 --> 00:50:15,140
interesting like I suggest you look at a

00:50:11,880 --> 00:50:17,039
mobile segmentation into those things

00:50:15,140 --> 00:50:19,589
okay that sounds great

00:50:17,039 --> 00:50:21,449
and the next question comes from Martin

00:50:19,589 --> 00:50:23,819
it is what is the level of support for

00:50:21,449 --> 00:50:25,199
mobs in mobile X in debugging Israel

00:50:23,819 --> 00:50:26,640
plugin for chrome does it react native

00:50:25,199 --> 00:50:27,809
debugger support it something that's

00:50:26,640 --> 00:50:33,479
pretty much exactly what you've just

00:50:27,809 --> 00:50:39,109
said yeah yeah I have some issues with

00:50:33,479 --> 00:50:39,109
that Chrome extension but then again you

00:50:44,239 --> 00:50:49,769
great and I suppose the only other

00:50:47,130 --> 00:50:52,489
questions I have then is I've heard that

00:50:49,769 --> 00:50:54,989
some some people find it less scalable

00:50:52,489 --> 00:50:56,479
at larger levels and something like

00:50:54,989 --> 00:51:00,539
Redux have you had any issues with

00:50:56,479 --> 00:51:03,150
scaling and personally no but I think we

00:51:00,539 --> 00:51:08,749
should also define what doing most

00:51:03,150 --> 00:51:12,689
killing are we talking about some beta

00:51:08,749 --> 00:51:15,869
actions or just a big application in

00:51:12,689 --> 00:51:18,989
terms of the code base and complexity I

00:51:15,869 --> 00:51:20,939
was talking possibly the having a large

00:51:18,989 --> 00:51:22,979
number of states kind of in an impure

00:51:20,939 --> 00:51:26,099
state can often people find it a bit

00:51:22,979 --> 00:51:28,679
less maintainable and I guess a little

00:51:26,099 --> 00:51:30,900
bit harder to use and I guess when I I

00:51:28,679 --> 00:51:33,719
guess code complexity in code size if

00:51:30,900 --> 00:51:36,269
you have quite a complex state that's

00:51:33,719 --> 00:51:36,869
interesting because an obligation we

00:51:36,269 --> 00:51:40,109
have

00:51:36,869 --> 00:51:43,109
fifteen different stores frankly we

00:51:40,109 --> 00:51:45,359
don't have that problem but I guess it

00:51:43,109 --> 00:51:47,609
also depends on how you structure your

00:51:45,359 --> 00:51:50,970
code because the way we're trying to do

00:51:47,609 --> 00:51:54,480
that is to provide a mobile store for

00:51:50,970 --> 00:51:56,910
each feature but then again we also try

00:51:54,480 --> 00:51:59,369
to revisit that if you see that one of

00:51:56,910 --> 00:52:01,079
our stores is becoming too complex and

00:51:59,369 --> 00:52:04,410
it adapts having too many

00:52:01,079 --> 00:52:07,529
responsibilities we always split it so

00:52:04,410 --> 00:52:12,930
the good thing is you just gonna lie

00:52:07,529 --> 00:52:16,529
usual programming principles okay that

00:52:12,930 --> 00:52:19,319
sounds excellent well I thank you very

00:52:16,529 --> 00:52:20,160
much for the talk again Mike and thank

00:52:19,319 --> 00:52:22,710
you very much for answering the

00:52:20,160 --> 00:52:23,579
questions and I consider using my backs

00:52:22,710 --> 00:52:29,269
in the next project

00:52:23,579 --> 00:52:29,269
yeah and now into cam and Handy's talk

00:52:30,370 --> 00:52:43,019
[Music]

00:52:40,880 --> 00:52:44,819
hey everyone thanks for joining this

00:52:43,019 --> 00:52:46,710
very quick look at deployment pipeline

00:52:44,819 --> 00:52:48,989
we built at Canton and how we

00:52:46,710 --> 00:52:53,220
implemented previews for deployment

00:52:48,989 --> 00:52:54,779
previews for react native so just to

00:52:53,220 --> 00:53:03,599
introduce myself I'm Henty I'm a

00:52:54,779 --> 00:53:05,880
software engineer at Canton and so a

00:53:03,599 --> 00:53:08,489
little bit about theater so we're a

00:53:05,880 --> 00:53:10,739
startup that helps other startups build

00:53:08,489 --> 00:53:12,839
digital products and we worked with can

00:53:10,739 --> 00:53:14,999
turn for the initial MVP phase to build

00:53:12,839 --> 00:53:16,019
their app and also laid the foundations

00:53:14,999 --> 00:53:20,989
for the current phase that they're

00:53:16,019 --> 00:53:23,009
working on and what the Canton are doing

00:53:20,989 --> 00:53:24,869
what we are doing as a companies we

00:53:23,009 --> 00:53:28,410
helping trades professionals work

00:53:24,869 --> 00:53:29,489
smarter that's the the tagline that's

00:53:28,410 --> 00:53:31,140
our mission of what we're trying to do

00:53:29,489 --> 00:53:33,869
and the way we're doing this is through

00:53:31,140 --> 00:53:35,220
building an app and this is a natural

00:53:33,869 --> 00:53:39,329
gas engineers and electricians and

00:53:35,220 --> 00:53:42,749
plumbers ants and that sort of thing for

00:53:39,329 --> 00:53:44,579
to tell them to automate some of the

00:53:42,749 --> 00:53:45,989
tasks they do manually so they spend a

00:53:44,579 --> 00:53:48,150
lot of time doing this manual tasks and

00:53:45,989 --> 00:53:49,499
we just help them to do that more easily

00:53:48,150 --> 00:53:50,400
and that's would be things like

00:53:49,499 --> 00:53:55,140
scheduling the

00:53:50,400 --> 00:53:59,730
and sending notifications to customers

00:53:55,140 --> 00:54:01,140
so Canton have a big vision for the sort

00:53:59,730 --> 00:54:02,640
of stuff that they're trying to build so

00:54:01,140 --> 00:54:04,529
a bit more context on the kind of

00:54:02,640 --> 00:54:06,089
technology that we were using behind the

00:54:04,529 --> 00:54:08,880
product so we're using rep native

00:54:06,089 --> 00:54:10,500
obviously typescript graph QL and we're

00:54:08,880 --> 00:54:16,529
using App Center and code push for

00:54:10,500 --> 00:54:18,630
deployments so when we first build the

00:54:16,529 --> 00:54:20,609
app the initial pipeline we cannot came

00:54:18,630 --> 00:54:22,890
up with something like this when code is

00:54:20,609 --> 00:54:27,210
merged to master we run the test which

00:54:22,890 --> 00:54:29,700
is like jest s UI tests like detox and

00:54:27,210 --> 00:54:31,529
then we do the deployment of the code

00:54:29,700 --> 00:54:33,930
there's like a native deployments to App

00:54:31,529 --> 00:54:35,640
Center and a code bush deployment on the

00:54:33,930 --> 00:54:37,650
UAT environment followed by a manual

00:54:35,640 --> 00:54:40,440
approval approval step which would then

00:54:37,650 --> 00:54:43,230
push it to production the pull request

00:54:40,440 --> 00:54:45,359
pipeline is just as the first bit of

00:54:43,230 --> 00:54:47,130
that it does the jest test and the UI

00:54:45,359 --> 00:54:49,650
tests and if those parts then you can

00:54:47,130 --> 00:54:51,869
merge into master to run off around the

00:54:49,650 --> 00:54:55,440
rest of it and this works this worked

00:54:51,869 --> 00:54:57,480
pretty well however there was a problem

00:54:55,440 --> 00:54:59,160
with this it's hard to preview a PR on a

00:54:57,480 --> 00:55:00,920
real device before merging the tests are

00:54:59,160 --> 00:55:03,779
passing and you know it's working

00:55:00,920 --> 00:55:06,059
functionally but designers want to get

00:55:03,779 --> 00:55:07,589
get in their hands and they want to play

00:55:06,059 --> 00:55:12,119
with it and see how it feels and what it

00:55:07,589 --> 00:55:14,220
looks like and like really inspected now

00:55:12,119 --> 00:55:16,650
it's possible to upload this to a test

00:55:14,220 --> 00:55:18,180
device or to upload this to your

00:55:16,650 --> 00:55:20,160
developer device and show the designer

00:55:18,180 --> 00:55:21,950
or things like that but it this can be

00:55:20,160 --> 00:55:24,059
quite hard because it needs like a

00:55:21,950 --> 00:55:26,309
synchronous interaction to make that

00:55:24,059 --> 00:55:27,900
happen and especially now that

00:55:26,309 --> 00:55:30,240
everyone's working from home it's quite

00:55:27,900 --> 00:55:32,789
hard you need an easy way for the for a

00:55:30,240 --> 00:55:34,500
designer to just get that PR on their

00:55:32,789 --> 00:55:36,930
phone and look at it and you can just

00:55:34,500 --> 00:55:38,339
send them a message and they can have a

00:55:36,930 --> 00:55:43,910
look like that when you're ready for

00:55:38,339 --> 00:55:48,000
them to see it so the challenge then was

00:55:43,910 --> 00:55:50,970
we were thinking what do other platforms

00:55:48,000 --> 00:55:53,010
do and web apps specifically have solved

00:55:50,970 --> 00:55:54,720
this to an extent like they support

00:55:53,010 --> 00:55:56,730
deployment previews with housing

00:55:54,720 --> 00:55:58,740
solutions like Netta fight like when you

00:55:56,730 --> 00:56:00,390
raise a PR for your changes you can go

00:55:58,740 --> 00:56:03,760
to unique URL and look at those changes

00:56:00,390 --> 00:56:05,980
before they go live and we

00:56:03,760 --> 00:56:10,000
and we thought is there a way we can

00:56:05,980 --> 00:56:11,350
replicate this with native apps so the

00:56:10,000 --> 00:56:13,060
approach we came up with like since we

00:56:11,350 --> 00:56:15,190
already using absolute encode push this

00:56:13,060 --> 00:56:17,620
is a way of easily and quickly pushing

00:56:15,190 --> 00:56:21,070
our changes can we somehow leverage that

00:56:17,620 --> 00:56:22,780
to get this effect so the approach we

00:56:21,070 --> 00:56:25,540
came up with this github for each pull

00:56:22,780 --> 00:56:28,600
request we push a bundle for that pull

00:56:25,540 --> 00:56:31,120
request to App Center where the

00:56:28,600 --> 00:56:33,190
development app can access it so it's

00:56:31,120 --> 00:56:34,630
only for the development app not for the

00:56:33,190 --> 00:56:40,660
UAT your production apps those are

00:56:34,630 --> 00:56:42,340
separate apps in the App Center so we

00:56:40,660 --> 00:56:44,260
will walk you through the process of how

00:56:42,340 --> 00:56:46,180
we went about implementing that the

00:56:44,260 --> 00:56:51,910
first step is of course to upload these

00:56:46,180 --> 00:56:53,650
builds as as I just described the way we

00:56:51,910 --> 00:56:56,530
did this with absented if you're

00:56:53,650 --> 00:56:58,060
familiar with App Center it's got this

00:56:56,530 --> 00:56:59,800
idea of paying deployments we for each

00:56:58,060 --> 00:57:02,530
PR we create this name deployment which

00:56:59,800 --> 00:57:04,390
is like a bucket for bundles of

00:57:02,530 --> 00:57:06,250
different versions of bundles so you

00:57:04,390 --> 00:57:12,910
create a bucket with a name that matches

00:57:06,250 --> 00:57:14,320
the PR name and you push on each PR when

00:57:12,910 --> 00:57:15,850
you create the PR you create that bucket

00:57:14,320 --> 00:57:17,980
and then you push the new version to

00:57:15,850 --> 00:57:21,100
that department and there's like the CLI

00:57:17,980 --> 00:57:22,120
command that we used to do that for for

00:57:21,100 --> 00:57:24,340
people that are interested all familiar

00:57:22,120 --> 00:57:25,800
with App Center but the effect of that

00:57:24,340 --> 00:57:28,300
is like if you go to the App Center

00:57:25,800 --> 00:57:30,670
interface you can see there's a drop

00:57:28,300 --> 00:57:32,980
down all the branches an example of what

00:57:30,670 --> 00:57:35,020
we've created and for that select a

00:57:32,980 --> 00:57:39,340
branch you can see multiple versions

00:57:35,020 --> 00:57:43,090
pushed to that to that named deployment

00:57:39,340 --> 00:57:47,700
as you do more updates to that PR and

00:57:43,090 --> 00:57:50,350
these are then available to Co push this

00:57:47,700 --> 00:57:52,540
one extra bit of technical details like

00:57:50,350 --> 00:57:54,730
sometimes you DD to make native changes

00:57:52,540 --> 00:57:56,310
which require like a full build that you

00:57:54,730 --> 00:57:58,540
can't just deploy through code push

00:57:56,310 --> 00:58:01,600
we've got some logic around that and how

00:57:58,540 --> 00:58:03,430
we handle that we see if the app version

00:58:01,600 --> 00:58:06,190
has been incremented if it has been we

00:58:03,430 --> 00:58:07,450
do a native build and we've got some

00:58:06,190 --> 00:58:09,550
scripts to help you check like if you've

00:58:07,450 --> 00:58:11,700
changed certain files then it says like

00:58:09,550 --> 00:58:15,370
okay the app version should have been up

00:58:11,700 --> 00:58:17,150
incremented so it expects a native build

00:58:15,370 --> 00:58:18,950
in certain cases this can lead

00:58:17,150 --> 00:58:20,990
to an edge case where you have to PRS in

00:58:18,950 --> 00:58:23,890
both incrementing at the same time and

00:58:20,990 --> 00:58:27,500
you end up with two new versions and

00:58:23,890 --> 00:58:28,640
this can cause a conflict but this is an

00:58:27,500 --> 00:58:31,250
edge case that we don't deal with

00:58:28,640 --> 00:58:32,720
automatically you'll see two apps with

00:58:31,250 --> 00:58:34,490
the same version and absent and you'll

00:58:32,720 --> 00:58:36,740
just have to communicate with the

00:58:34,490 --> 00:58:37,849
designer or whoever to tell them which

00:58:36,740 --> 00:58:40,130
version they need to download then

00:58:37,849 --> 00:58:43,930
eventually this will sort itself out as

00:58:40,130 --> 00:58:43,930
you do more POS and more version bumps

00:58:44,079 --> 00:58:48,710
so after all of that this is what the

00:58:46,520 --> 00:58:51,770
new massive pipeline look like for the

00:58:48,710 --> 00:58:54,049
PR we just have the same master pipeline

00:58:51,770 --> 00:58:55,609
but they updated pull request pipeline

00:58:54,049 --> 00:58:57,140
now matches the master pipeline more

00:58:55,609 --> 00:58:59,240
closely with the added development

00:58:57,140 --> 00:59:01,880
environment there we do run all the

00:58:59,240 --> 00:59:03,410
tests and if they pass we do possibly a

00:59:01,880 --> 00:59:08,240
native deployment and a code Bush

00:59:03,410 --> 00:59:10,010
deployments cool so now we've got all

00:59:08,240 --> 00:59:11,480
these named deployments in App Center

00:59:10,010 --> 00:59:13,730
for all of these poor requests so

00:59:11,480 --> 00:59:16,579
opening so now how can we leverage those

00:59:13,730 --> 00:59:17,720
in our development app so we want to be

00:59:16,579 --> 00:59:20,510
able to choose one of those deployments

00:59:17,720 --> 00:59:22,730
and get an automatic update just like a

00:59:20,510 --> 00:59:26,089
deployment preview so here's how we did

00:59:22,730 --> 00:59:29,299
that so first we do a simple get to the

00:59:26,089 --> 00:59:31,789
absent API we get a list of all of the

00:59:29,299 --> 00:59:34,250
deployments which are created every

00:59:31,789 --> 00:59:36,950
single time we open up a poor request so

00:59:34,250 --> 00:59:39,170
we've got that list then we're also

00:59:36,950 --> 00:59:41,270
going to want to fetch a bit more data

00:59:39,170 --> 00:59:42,589
so from App Center we also want the

00:59:41,270 --> 00:59:44,690
metadata about the current deployment

00:59:42,589 --> 00:59:46,789
name so we're going to use that to

00:59:44,690 --> 00:59:48,170
display in our developer menu to say

00:59:46,789 --> 00:59:50,180
this is the current update that you're

00:59:48,170 --> 00:59:52,309
looking at and then we also want some

00:59:50,180 --> 00:59:55,160
extra data from our device info so we

00:59:52,309 --> 00:59:57,470
want the current bundle version so we're

00:59:55,160 --> 00:59:59,180
going to use that then to filter out the

00:59:57,470 --> 01:00:00,859
compatible builds so we're going to

00:59:59,180 --> 01:00:03,470
compare the bundle version that we just

01:00:00,859 --> 01:00:05,839
got from device info and compare that to

01:00:03,470 --> 01:00:11,329
the minimum bundle version from our

01:00:05,839 --> 01:00:14,170
current update and see which are

01:00:11,329 --> 01:00:17,690
compatible and go to the restaurant so

01:00:14,170 --> 01:00:20,210
then what some more buttons on there and

01:00:17,690 --> 01:00:22,490
we've got this handy dandy for menu you

01:00:20,210 --> 01:00:24,170
can see under available versions there's

01:00:22,490 --> 01:00:28,099
some gibberish which is our current

01:00:24,170 --> 01:00:29,839
deployment name should be named says UI

01:00:28,099 --> 01:00:32,029
fixed jobs this tennis

01:00:29,839 --> 01:00:34,160
that was one of our branch names and

01:00:32,029 --> 01:00:35,660
then you've got a menu of updates so

01:00:34,160 --> 01:00:38,930
those are the filtered ones that you can

01:00:35,660 --> 01:00:40,309
press so what's left when you want to

01:00:38,930 --> 01:00:42,049
hit one of those buttons what do you

01:00:40,309 --> 01:00:44,420
want to do to download the update from

01:00:42,049 --> 01:00:46,339
App Center will show some download

01:00:44,420 --> 01:00:47,960
progress and then just restart the app

01:00:46,339 --> 01:00:54,369
feliza with the currently selected

01:00:47,960 --> 01:00:54,369
update and then we've got a little demo

01:00:59,020 --> 01:01:02,810
Canton seamless consulate growing

01:01:01,040 --> 01:01:04,970
they've got a never ending list of

01:01:02,810 --> 01:01:06,710
features so I'm seeing loads of pull

01:01:04,970 --> 01:01:08,570
requests and I'm also seeing lots of

01:01:06,710 --> 01:01:10,460
frantic scrolling on that developer menu

01:01:08,570 --> 01:01:13,430
to try and find the feature that the

01:01:10,460 --> 01:01:14,750
design team actually want to look at so

01:01:13,430 --> 01:01:16,760
we probably don't need all of those

01:01:14,750 --> 01:01:18,080
previews once the pull requests has been

01:01:16,760 --> 01:01:21,350
merged and the branch has been deleted

01:01:18,080 --> 01:01:24,980
so let's get rid of some of those so

01:01:21,350 --> 01:01:26,960
what did we used mws lamda terraform to

01:01:24,980 --> 01:01:30,530
automate the setup and we used github

01:01:26,960 --> 01:01:35,270
web hooks to trigger this action on the

01:01:30,530 --> 01:01:36,320
branch deletion so what's the flow so

01:01:35,270 --> 01:01:37,550
we've tested the feature and the

01:01:36,320 --> 01:01:40,160
developer app as we've been iterating

01:01:37,550 --> 01:01:41,840
and now we're done so here's the flow on

01:01:40,160 --> 01:01:46,010
branch solution we're gonna match up or

01:01:41,840 --> 01:01:48,080
request delete the branch the is gonna

01:01:46,010 --> 01:01:49,580
pick that up on the branch deletion and

01:01:48,080 --> 01:01:51,830
that's going to trigger a lambda

01:01:49,580 --> 01:01:53,390
function so all that's going to do it's

01:01:51,830 --> 01:01:56,480
quite simple it's just going to call the

01:01:53,390 --> 01:01:58,220
absent to API and delete the iOS and

01:01:56,480 --> 01:02:00,410
Android deployments for those given

01:01:58,220 --> 01:02:02,660
release names and remember we named all

01:02:00,410 --> 01:02:05,090
of our deployments with the branch name

01:02:02,660 --> 01:02:06,710
so it's quite easy to find and there you

01:02:05,090 --> 01:02:08,510
go you've prevented all of that

01:02:06,710 --> 01:02:12,560
scrolling and your developers are having

01:02:08,510 --> 01:02:16,010
a great time so that seems quite

01:02:12,560 --> 01:02:18,770
involved it wasn't me as of January that

01:02:16,010 --> 01:02:20,990
are now getting of actions for code Bush

01:02:18,770 --> 01:02:24,020
so now you can do arbitrary actions with

01:02:20,990 --> 01:02:25,210
the absence of command-line interface so

01:02:24,020 --> 01:02:27,290
if you're going to try it out this

01:02:25,210 --> 01:02:34,210
implementation I would recommend looking

01:02:27,290 --> 01:02:38,060
into that implementation so in summary

01:02:34,210 --> 01:02:39,560
we now have deploy in previews when you

01:02:38,060 --> 01:02:41,750
have the developer app you can go to

01:02:39,560 --> 01:02:43,700
developer menu and you can see a list of

01:02:41,750 --> 01:02:45,110
all the different PRS that I open click

01:02:43,700 --> 01:02:48,230
on one and you can see what that looks

01:02:45,110 --> 01:02:50,390
like and once you've looked at that and

01:02:48,230 --> 01:02:52,700
you've played around with it you can see

01:02:50,390 --> 01:02:55,030
it working you can merge to master

01:02:52,700 --> 01:02:57,440
confident confidently and frequently and

01:02:55,030 --> 01:03:04,250
you know your designers and your product

01:02:57,440 --> 01:03:07,130
owner will be happy so next steps well

01:03:04,250 --> 01:03:08,510
as we mentioned github actions are now

01:03:07,130 --> 01:03:10,530
available for code push and I think that

01:03:08,510 --> 01:03:14,070
would simplify things quite a lot

01:03:10,530 --> 01:03:15,720
the the llamas work well but it's just

01:03:14,070 --> 01:03:16,710
unleashed unnecessary infrastructure

01:03:15,720 --> 01:03:18,090
that's part of the pipeline at the

01:03:16,710 --> 01:03:21,090
moment and I think it actions will make

01:03:18,090 --> 01:03:22,500
that quite quite nice and easy to

01:03:21,090 --> 01:03:25,110
maintain

01:03:22,500 --> 01:03:26,700
other potential things we were thinking

01:03:25,110 --> 01:03:28,020
of will improve pipeline performance

01:03:26,700 --> 01:03:30,690
that's always something we're looking at

01:03:28,020 --> 01:03:34,230
so anyone who has any good ideas of how

01:03:30,690 --> 01:03:37,050
to do that is always come have a chat

01:03:34,230 --> 01:03:38,490
with us but it's always good to get it

01:03:37,050 --> 01:03:43,320
fast and get the feedback loop faster

01:03:38,490 --> 01:03:45,300
and faster on the pipeline and then blue

01:03:43,320 --> 01:03:47,340
sky thinking what if we added something

01:03:45,300 --> 01:03:49,410
i QR codes to download full builds it

01:03:47,340 --> 01:03:51,030
would be nice if you could just instead

01:03:49,410 --> 01:03:53,520
of having to go to App Center to find

01:03:51,030 --> 01:03:55,380
the best native version to preview this

01:03:53,520 --> 01:03:56,790
pure if you just have a QR code you can

01:03:55,380 --> 01:03:58,470
scan your phone automatically goes to

01:03:56,790 --> 01:04:01,350
the right native bill that you can just

01:03:58,470 --> 01:04:03,030
download and then test it so just things

01:04:01,350 --> 01:04:05,160
that will make the feedback loop faster

01:04:03,030 --> 01:04:08,310
and get people testing and seeing the

01:04:05,160 --> 01:04:11,130
features more quickly or any other other

01:04:08,310 --> 01:04:15,300
ideas we could be thinking officer after

01:04:11,130 --> 01:04:17,730
this that's it thank you so much for

01:04:15,300 --> 01:04:21,660
listening and having a look at what

01:04:17,730 --> 01:04:26,640
we've done and if you have any questions

01:04:21,660 --> 01:04:41,229
come talk to us thanks

01:04:26,640 --> 01:04:41,229
[Music]

01:04:50,930 --> 01:04:57,380
your life hi everyone thank you cam and

01:04:55,130 --> 01:04:59,000
Auntie for that talk that was really

01:04:57,380 --> 01:05:02,450
interesting on the deployment pipelines

01:04:59,000 --> 01:05:03,980
and so if anyone has any questions on

01:05:02,450 --> 01:05:06,050
that please be the questions in the chat

01:05:03,980 --> 01:05:08,990
but first of all we've got a question

01:05:06,050 --> 01:05:11,059
from Mike saying can you use at center

01:05:08,990 --> 01:05:16,430
instead of test flight for distributing

01:05:11,059 --> 01:05:18,170
pre-release version yes

01:05:16,430 --> 01:05:20,420
well internally we use App Center for

01:05:18,170 --> 01:05:21,770
distributing these versions so we all

01:05:20,420 --> 01:05:25,400
use the App Center without being on

01:05:21,770 --> 01:05:29,119
tests like internally if that answers

01:05:25,400 --> 01:05:31,970
your question I think that does and did

01:05:29,119 --> 01:05:33,650
you ever consider doing multiple stages

01:05:31,970 --> 01:05:34,520
rather than just staging upon or was

01:05:33,650 --> 01:05:36,559
that not something you thought was an

01:05:34,520 --> 01:05:39,819
essay and if so how accomplish from that

01:05:36,559 --> 01:05:45,140
we've set up with your current set up

01:05:39,819 --> 01:05:47,440
multiple stages like going from two UAT

01:05:45,140 --> 01:05:50,390
to staging to project exactly

01:05:47,440 --> 01:05:52,670
we can do that easily we just add or

01:05:50,390 --> 01:05:54,680
rinse and repeat add more apps to App

01:05:52,670 --> 01:05:55,910
Center and that's how we get more

01:05:54,680 --> 01:05:57,680
environments and just add it to the

01:05:55,910 --> 01:06:00,500
pipeline there's a time cost to it

01:05:57,680 --> 01:06:03,680
though because the pipeline runs quite

01:06:00,500 --> 01:06:05,780
slowly running the native of the detox

01:06:03,680 --> 01:06:07,130
test and everything so it does add up if

01:06:05,780 --> 01:06:09,460
you had too many stages to that but it

01:06:07,130 --> 01:06:12,200
should be easy technically to add more

01:06:09,460 --> 01:06:14,420
and so on so you had detox tests as part

01:06:12,200 --> 01:06:16,910
of your intubation pipeline how did you

01:06:14,420 --> 01:06:19,099
find that and one of the questions I

01:06:16,910 --> 01:06:20,270
have is partly a did you manage to get

01:06:19,099 --> 01:06:24,950
that working with Android or were they

01:06:20,270 --> 01:06:26,839
just on iOS still focusing on iOS for

01:06:24,950 --> 01:06:28,460
now just getting that smooth as possible

01:06:26,839 --> 01:06:30,020
it is a work in progress it's always a

01:06:28,460 --> 01:06:32,180
bit of a challenge don't think we've

01:06:30,020 --> 01:06:33,920
quite nailed it yet but we've got we try

01:06:32,180 --> 01:06:35,690
to focus on just having some basic tests

01:06:33,920 --> 01:06:37,520
to begin with and then over time

01:06:35,690 --> 01:06:39,290
expanding it as we get those stable

01:06:37,520 --> 01:06:42,079
making sure that we get a stable set of

01:06:39,290 --> 01:06:45,290
tests that we can expand over time and

01:06:42,079 --> 01:06:47,480
and how did you find the actual naming

01:06:45,290 --> 01:06:48,799
as the branch naming for designers was

01:06:47,480 --> 01:06:50,690
that clear to them or were they ever

01:06:48,799 --> 01:06:51,950
lost us to which which build they should

01:06:50,690 --> 01:06:55,970
be doing on was that fine when you

01:06:51,950 --> 01:06:58,400
cleaning them up for the designers to

01:06:55,970 --> 01:07:01,160
find the correct builds in the developer

01:06:58,400 --> 01:07:03,079
menu to choose the correct app it's not

01:07:01,160 --> 01:07:04,690
really been a problem most of them we

01:07:03,079 --> 01:07:06,579
have a naming convention and the

01:07:04,690 --> 01:07:08,500
just to have the JIRA ticket number as a

01:07:06,579 --> 01:07:09,940
prefix in there so they usually know

01:07:08,500 --> 01:07:11,800
which one to go with we also work very

01:07:09,940 --> 01:07:15,339
closely with the designers we sit next

01:07:11,800 --> 01:07:17,410
to them and we can just oh well when

01:07:15,339 --> 01:07:19,420
we're in the office but we we talk to

01:07:17,410 --> 01:07:22,000
them all the problem which which

01:07:19,420 --> 01:07:26,680
branched which button to click on when

01:07:22,000 --> 01:07:29,170
they test it and we mentioned also some

01:07:26,680 --> 01:07:30,339
other improvements for the future is

01:07:29,170 --> 01:07:31,630
there any of these that you're going to

01:07:30,339 --> 01:07:33,040
do shortly or is there anything that's

01:07:31,630 --> 01:07:36,810
like right there as a checklist or are

01:07:33,040 --> 01:07:36,810
you happy with the Harriet is right now

01:07:37,710 --> 01:07:42,190
nothing in the immediate future I mean

01:07:40,119 --> 01:07:43,270
improving the performance of the

01:07:42,190 --> 01:07:44,890
pipeline is something we look at

01:07:43,270 --> 01:07:47,109
constantly grease and he did a few small

01:07:44,890 --> 01:07:50,680
things but not nothing huge and

01:07:47,109 --> 01:07:55,089
fundamental than that the rest is a bit

01:07:50,680 --> 01:07:57,040
more long-term vision like this right

01:07:55,089 --> 01:07:59,109
now is working really well the github

01:07:57,040 --> 01:08:01,410
actions is something actually we we will

01:07:59,109 --> 01:08:05,050
look in sooner rather than later I think

01:08:01,410 --> 01:08:08,710
and one thing you mentioned in the talk

01:08:05,050 --> 01:08:10,210
was the updates to Nate native code and

01:08:08,710 --> 01:08:11,619
the fact you could have to be ours at

01:08:10,210 --> 01:08:16,509
the same time she'll updates native code

01:08:11,619 --> 01:08:17,739
it was until you handle that I think the

01:08:16,509 --> 01:08:21,069
short answer is that we don't really

01:08:17,739 --> 01:08:24,190
handle it it's because it's only for on

01:08:21,069 --> 01:08:26,199
dev and it's not it's it's for internal

01:08:24,190 --> 01:08:29,529
customers only so when we do get in a

01:08:26,199 --> 01:08:31,359
situation where we have two p2p ours

01:08:29,529 --> 01:08:33,910
that both made native changes and we

01:08:31,359 --> 01:08:35,380
have this sort of conflict that just has

01:08:33,910 --> 01:08:38,109
to be an internal conversation where we

01:08:35,380 --> 01:08:39,580
talk to the designer whoever say which

01:08:38,109 --> 01:08:42,040
version they should jump download from

01:08:39,580 --> 01:08:44,109
absent watch how they should work so

01:08:42,040 --> 01:08:46,420
that but you know experience so far it's

01:08:44,109 --> 01:08:49,089
been quite rare like usually people

01:08:46,420 --> 01:08:56,140
don't make negative changes at the same

01:08:49,089 --> 01:08:59,620
time korie's yeah cool and thank you

01:08:56,140 --> 01:09:01,270
very much that talk and hopefully we'll

01:08:59,620 --> 01:09:03,640
hear more again from you in the future

01:09:01,270 --> 01:09:05,500
if you ever update the pipeline or come

01:09:03,640 --> 01:09:08,020
up with something new and exciting and

01:09:05,500 --> 01:09:10,739
and thank you to everyone tonight for

01:09:08,020 --> 01:09:13,540
attending the meetup online and

01:09:10,739 --> 01:09:13,929
hopefully we will see everyone else next

01:09:13,540 --> 01:09:16,920
month

01:09:13,929 --> 01:09:16,920
Thanks

01:09:19,680 --> 01:09:34,270
[Music]

01:09:38,140 --> 01:09:47,369
[Music]

01:09:54,700 --> 01:10:04,020
[Music]

01:10:33,000 --> 01:10:58,890
[Music]

01:11:30,740 --> 01:11:41,020
[Music]

01:11:44,390 --> 01:11:53,759
[Music]

01:12:21,749 --> 01:12:23,809
you

01:12:31,360 --> 01:12:40,590
[Music]

01:12:47,920 --> 01:12:57,229
[Music]

01:13:26,210 --> 01:13:52,100
[Music]

01:14:23,960 --> 01:14:34,240

YouTube URL: https://www.youtube.com/watch?v=alzJ30G1Y2o


