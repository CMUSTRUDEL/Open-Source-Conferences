Title: Sharing Code Between React and React Native - React Native - July 2018
Publication date: 2018-08-06
Playlist: React Native London
Description: 
	Presented by Ben Ellerby.

React and React-Native allow a learn once write anywhere paradigm. This is great, because one tech team can build both your web app and native mobile experience. The problem is developers hate writing things twice. There have been a couple of efforts to build a unifying technology to write an application once and have it work on both web and native. Yet this is not always the best approach. There is value in only sharing your business and state logic; keeping your render code separate.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:04,200
I'm gonna build off and as talk and talk

00:00:01,829 --> 00:00:06,359
about sort of the same problem I hit

00:00:04,200 --> 00:00:08,700
architecting a project with my comm so

00:00:06,359 --> 00:00:11,250
my name is Ben I work for theater which

00:00:08,700 --> 00:00:13,620
is a start-up helping other startups to

00:00:11,250 --> 00:00:15,480
launch MVPs and large companies to work

00:00:13,620 --> 00:00:16,980
at startup speed so I've been working

00:00:15,480 --> 00:00:19,770
that for about two years and actually

00:00:16,980 --> 00:00:21,510
doing granny - for almost exactly two

00:00:19,770 --> 00:00:23,699
years and that got me thinking about the

00:00:21,510 --> 00:00:26,310
first round native meets up which was in

00:00:23,699 --> 00:00:27,750
the first week I was at Thea doe and I

00:00:26,310 --> 00:00:29,519
was extremely lost and didn't know what

00:00:27,750 --> 00:00:32,820
was happening which luckily thanks to

00:00:29,519 --> 00:00:35,489
meetup.com we can see my very confused

00:00:32,820 --> 00:00:36,989
face so it's twice weekly say thank you

00:00:35,489 --> 00:00:38,610
sort of the community for helping me to

00:00:36,989 --> 00:00:40,140
develop my react native skills I think

00:00:38,610 --> 00:00:41,489
being able to come to these meetups

00:00:40,140 --> 00:00:45,079
every week has really helped me progress

00:00:41,489 --> 00:00:47,520
as a developer so jumping into the

00:00:45,079 --> 00:00:51,030
particularly use case I'm talking about

00:00:47,520 --> 00:00:55,440
so my calm who here knows what made calm

00:00:51,030 --> 00:00:58,649
do I guess everyone living in London has

00:00:55,440 --> 00:01:00,980
seen whoa that's first has seen their

00:00:58,649 --> 00:01:03,359
advertising there are a large e-commerce

00:01:00,980 --> 00:01:05,670
they cut down costs by doing quite

00:01:03,359 --> 00:01:07,619
innovative lead time and production

00:01:05,670 --> 00:01:09,720
systems and although they have a few

00:01:07,619 --> 00:01:11,310
showrooms they're mainly any comments so

00:01:09,720 --> 00:01:13,650
they cut down costs on brick-and-mortar

00:01:11,310 --> 00:01:15,330
stores and that means that their website

00:01:13,650 --> 00:01:16,710
is massively important to their business

00:01:15,330 --> 00:01:18,270
because it's sort of the core of it and

00:01:16,710 --> 00:01:20,340
all this advertising campaign I'm sure

00:01:18,270 --> 00:01:22,740
if you have seen is directing to their

00:01:20,340 --> 00:01:24,750
websites and their and their mobile app

00:01:22,740 --> 00:01:27,420
their mobile app being written as a

00:01:24,750 --> 00:01:29,130
native iOS app and their website being

00:01:27,420 --> 00:01:32,220
written in sort of an off-the-shelf

00:01:29,130 --> 00:01:33,600
ecommerce non single page application so

00:01:32,220 --> 00:01:35,939
the project we're doing with them is to

00:01:33,600 --> 00:01:37,860
migrate their website to react and their

00:01:35,939 --> 00:01:39,540
mobile app to react native to allow

00:01:37,860 --> 00:01:41,700
Android users to have access to the app

00:01:39,540 --> 00:01:43,890
the team to share skills between the

00:01:41,700 --> 00:01:46,079
websites and the app and a sharing of

00:01:43,890 --> 00:01:47,700
code between reacting react native also

00:01:46,079 --> 00:01:49,350
doing some server-side rendering stuff

00:01:47,700 --> 00:01:52,470
for SEO but I'm just going to focus on

00:01:49,350 --> 00:01:53,670
the code sharing in this talk so as Anna

00:01:52,470 --> 00:01:56,159
mentioned there are different types of

00:01:53,670 --> 00:01:57,899
code we sort of split up into UI render

00:01:56,159 --> 00:02:01,799
code with business logic and

00:01:57,899 --> 00:02:03,450
configuration so UI render as Anna

00:02:01,799 --> 00:02:04,829
covered and I won't go over much but

00:02:03,450 --> 00:02:06,570
it's a different render environments is

00:02:04,829 --> 00:02:08,899
the key message so divs are not exactly

00:02:06,570 --> 00:02:11,009
equal to views and there are different

00:02:08,899 --> 00:02:12,959
libraries that tried to tackle this so

00:02:11,009 --> 00:02:13,709
there's react native web which was used

00:02:12,959 --> 00:02:15,480
in Twitter like

00:02:13,709 --> 00:02:17,670
and actually Twitter although they still

00:02:15,480 --> 00:02:19,319
use into it'll I withdrew supported the

00:02:17,670 --> 00:02:20,370
open source library because they said

00:02:19,319 --> 00:02:22,739
they didn't have the facilities to

00:02:20,370 --> 00:02:24,569
support it react to XP which as Anna

00:02:22,739 --> 00:02:26,790
mentioned Microsoft is more pushing

00:02:24,569 --> 00:02:28,890
xamarin and finally their style

00:02:26,790 --> 00:02:31,709
components Universal so we saw style

00:02:28,890 --> 00:02:33,540
components in Anna's talk so it's a set

00:02:31,709 --> 00:02:36,329
of visual primitives to the component

00:02:33,540 --> 00:02:38,489
age if their tagline so we can have a

00:02:36,329 --> 00:02:40,829
button when we can use sort of CSS style

00:02:38,489 --> 00:02:42,840
syntax and that renders out I'm a style

00:02:40,829 --> 00:02:44,579
button and they use this weird syntax

00:02:42,840 --> 00:02:46,530
called tag template literals where we

00:02:44,579 --> 00:02:47,609
can pass in sort of a function call it's

00:02:46,530 --> 00:02:49,829
a bit weird but we found it really

00:02:47,609 --> 00:02:52,379
useful on react projects now it's

00:02:49,829 --> 00:02:54,269
experimental branch of style components

00:02:52,379 --> 00:02:55,889
which was called star component

00:02:54,269 --> 00:02:58,260
Universal or style components primitive

00:02:55,889 --> 00:03:00,480
and this allows you to render to react

00:02:58,260 --> 00:03:01,980
actually to sketch and to react native

00:03:00,480 --> 00:03:05,400
which is really cool if you want to

00:03:01,980 --> 00:03:09,950
integrate with designers and it supports

00:03:05,400 --> 00:03:12,239
a number of primitives so it builds off

00:03:09,950 --> 00:03:13,290
react primitives which is a library for

00:03:12,239 --> 00:03:15,299
solving the problem we heard about in

00:03:13,290 --> 00:03:17,159
the last talk which supports many things

00:03:15,299 --> 00:03:20,760
but some things like text inputs are

00:03:17,159 --> 00:03:22,979
still not supported and style components

00:03:20,760 --> 00:03:25,680
Universal builds off that so from the

00:03:22,979 --> 00:03:28,169
primitives branch of style components we

00:03:25,680 --> 00:03:29,060
can imports text which we want to render

00:03:28,169 --> 00:03:30,989
an ampersand

00:03:29,060 --> 00:03:33,209
another piece of text which is like a

00:03:30,989 --> 00:03:35,689
swatch name we can use these as JSX

00:03:33,209 --> 00:03:40,260
components and render something else and

00:03:35,689 --> 00:03:42,870
that allows us to render in react native

00:03:40,260 --> 00:03:44,280
in sketch and it reacts and we thought

00:03:42,870 --> 00:03:48,959
this might be a solution to our problem

00:03:44,280 --> 00:03:50,310
of sharing code but actually we hit some

00:03:48,959 --> 00:03:52,139
problems when they released it they said

00:03:50,310 --> 00:03:54,090
this in experimental release there might

00:03:52,139 --> 00:03:55,409
be bugs and also the documentation isn't

00:03:54,090 --> 00:03:56,400
really there which is what you really

00:03:55,409 --> 00:04:00,419
want to hear when you're trying to sell

00:03:56,400 --> 00:04:01,919
something and we're hitting issues which

00:04:00,419 --> 00:04:03,150
we're hitting with ret native web in the

00:04:01,919 --> 00:04:04,829
server-side rendering so we're using

00:04:03,150 --> 00:04:06,659
next is there are known issues with

00:04:04,829 --> 00:04:08,310
integrating it although there is now an

00:04:06,659 --> 00:04:10,109
example of how to do it but the issues

00:04:08,310 --> 00:04:13,859
we were hitting were really too much for

00:04:10,109 --> 00:04:15,329
us to handle also and a previous meet up

00:04:13,859 --> 00:04:16,949
here I had a chat with a few developers

00:04:15,329 --> 00:04:18,900
and we sort of came to the conclusion

00:04:16,949 --> 00:04:20,789
that web and mobile web and native

00:04:18,900 --> 00:04:22,620
environments require a specific design

00:04:20,789 --> 00:04:23,340
and user experience your mobile web

00:04:22,620 --> 00:04:24,630
application is

00:04:23,340 --> 00:04:26,580
difference.your native web application

00:04:24,630 --> 00:04:29,130
pressing a button on later tis disent

00:04:26,580 --> 00:04:31,020
different to pressing a button on the

00:04:29,130 --> 00:04:33,270
web browser on your phone and therefore

00:04:31,020 --> 00:04:36,780
really the styling of the UI should be

00:04:33,270 --> 00:04:38,760
different between the environments so

00:04:36,780 --> 00:04:41,580
when we talk about UI render code we

00:04:38,760 --> 00:04:43,380
sort of didn't focus on that and coming

00:04:41,580 --> 00:04:45,150
into the other types of code it's a

00:04:43,380 --> 00:04:48,090
business logic configuration and API

00:04:45,150 --> 00:04:49,229
formatting so API formatting that's

00:04:48,090 --> 00:04:51,660
things like function calls

00:04:49,229 --> 00:04:54,180
authentication formatting of requests

00:04:51,660 --> 00:04:56,250
and formatting of responses that sort of

00:04:54,180 --> 00:04:57,300
render environments independence we

00:04:56,250 --> 00:05:00,770
don't mind if we're rendering that in

00:04:57,300 --> 00:05:02,760
native or a web we can reuse code there

00:05:00,770 --> 00:05:05,639
configuration so as Anna mentioned

00:05:02,760 --> 00:05:08,370
things like translations constants these

00:05:05,639 --> 00:05:09,900
aren't render environment dependents if

00:05:08,370 --> 00:05:12,060
we updated translation on our app we

00:05:09,900 --> 00:05:14,040
want to update our websites so again we

00:05:12,060 --> 00:05:16,139
can share this code and business logic

00:05:14,040 --> 00:05:18,539
again if it user can only had 20 items

00:05:16,139 --> 00:05:21,449
to the basket on web that rule probably

00:05:18,539 --> 00:05:22,050
holds on native as well so again this is

00:05:21,449 --> 00:05:23,550
business

00:05:22,050 --> 00:05:25,260
this is render environment independence

00:05:23,550 --> 00:05:27,479
so coming to the same conclusion Anna

00:05:25,260 --> 00:05:30,090
talk as Anna's talk business logic

00:05:27,479 --> 00:05:32,100
configuration API Man 4 might think we

00:05:30,090 --> 00:05:33,300
can share all of this jumping into some

00:05:32,100 --> 00:05:35,430
other examples of the sort of stuff

00:05:33,300 --> 00:05:38,130
we're sharing at medCom so for state

00:05:35,430 --> 00:05:41,340
management and data were using redux and

00:05:38,130 --> 00:05:43,110
apollo so easing apollo for the

00:05:41,340 --> 00:05:45,599
graphical interface to elasticsearch

00:05:43,110 --> 00:05:47,310
back-end apollo originally came with

00:05:45,599 --> 00:05:49,050
redux built in as part of it in its

00:05:47,310 --> 00:05:51,750
first version and you can integrate with

00:05:49,050 --> 00:05:53,070
that store through an API but they moved

00:05:51,750 --> 00:05:55,349
out of that and came with our own state

00:05:53,070 --> 00:05:56,820
management system in later versions but

00:05:55,349 --> 00:05:58,349
that's not really integrated with a lot

00:05:56,820 --> 00:06:01,289
of the libraries that we use things like

00:05:58,349 --> 00:06:03,990
react until things like redux saga and

00:06:01,289 --> 00:06:06,150
we're also using redux beacon for our

00:06:03,990 --> 00:06:09,210
analytics so we thought would keep UI

00:06:06,150 --> 00:06:10,700
state in redux so is a modal open or

00:06:09,210 --> 00:06:14,190
closed translations

00:06:10,700 --> 00:06:16,320
analytics events and product data search

00:06:14,190 --> 00:06:19,740
pagination we kept all this in Apollo

00:06:16,320 --> 00:06:21,389
and this is completely render

00:06:19,740 --> 00:06:23,430
environment independence or Apollo

00:06:21,389 --> 00:06:26,789
queries are the same in native as they

00:06:23,430 --> 00:06:28,260
are on web and our application state for

00:06:26,789 --> 00:06:31,590
the large part for the exception of some

00:06:28,260 --> 00:06:33,419
modal's our render environment

00:06:31,590 --> 00:06:34,770
independence so we can share those

00:06:33,419 --> 00:06:36,460
between the two applications

00:06:34,770 --> 00:06:38,319
and to share those we make them

00:06:36,460 --> 00:06:40,389
massive use of higher-order components

00:06:38,319 --> 00:06:41,949
so higher-order components come from

00:06:40,389 --> 00:06:43,780
functional programming programming

00:06:41,949 --> 00:06:44,740
they're not massively a part of react

00:06:43,780 --> 00:06:48,099
where they come from it's sort of

00:06:44,740 --> 00:06:50,710
functional compositional nature and we

00:06:48,099 --> 00:06:52,960
do things like this for our Apollo

00:06:50,710 --> 00:06:55,720
queries so this is a higher-order

00:06:52,960 --> 00:06:58,180
components it is a function that

00:06:55,720 --> 00:07:00,039
actually returns a function that takes a

00:06:58,180 --> 00:07:01,599
components and wraps it so this is a

00:07:00,039 --> 00:07:03,699
higher-order components this is a

00:07:01,599 --> 00:07:05,710
function that returns it so we pass in

00:07:03,699 --> 00:07:07,960
our graph to our query and some backup

00:07:05,710 --> 00:07:08,889
data in case a network call fails this

00:07:07,960 --> 00:07:11,229
will then return our higher-order

00:07:08,889 --> 00:07:13,210
components which we can wrap around our

00:07:11,229 --> 00:07:15,539
components and this will wrap the graph

00:07:13,210 --> 00:07:18,849
QL query injector props from graph QL

00:07:15,539 --> 00:07:20,500
sorry from Apollo render the backup data

00:07:18,849 --> 00:07:22,780
and any props that were passed in

00:07:20,500 --> 00:07:25,060
originally and this allows us to reuse a

00:07:22,780 --> 00:07:27,639
with products higher-order components

00:07:25,060 --> 00:07:29,830
across native and web R with categories

00:07:27,639 --> 00:07:31,180
our with basket it allows us to have all

00:07:29,830 --> 00:07:33,820
that code shared between the two

00:07:31,180 --> 00:07:37,599
environments see our search results

00:07:33,820 --> 00:07:39,280
baskets products but how do we share the

00:07:37,599 --> 00:07:41,500
code so we had a long conversation as a

00:07:39,280 --> 00:07:43,000
team about should we use a mono repo or

00:07:41,500 --> 00:07:45,669
should we have separate repos and sort

00:07:43,000 --> 00:07:46,180
of tree each one have a shared one

00:07:45,669 --> 00:07:48,610
Whichard

00:07:46,180 --> 00:07:51,849
sort of diversion to be an interface to

00:07:48,610 --> 00:07:54,280
native and web we decided after a big

00:07:51,849 --> 00:07:55,690
debate to go for three repositories so

00:07:54,280 --> 00:07:57,969
native repository with the react native

00:07:55,690 --> 00:08:00,159
code a web repository with the react

00:07:57,969 --> 00:08:02,080
code and the server code for subside

00:08:00,159 --> 00:08:04,240
rendering and finally a shared

00:08:02,080 --> 00:08:06,159
repository which if we transpired into

00:08:04,240 --> 00:08:07,690
common jeaious and be treated as an NPM

00:08:06,159 --> 00:08:11,229
dependency between these two

00:08:07,690 --> 00:08:13,360
repositories so what's in the shared

00:08:11,229 --> 00:08:15,729
library I mentioned things higher-order

00:08:13,360 --> 00:08:16,900
components for queries and conditional

00:08:15,729 --> 00:08:18,250
renderings there are lots of different

00:08:16,900 --> 00:08:19,659
high road components in here should we

00:08:18,250 --> 00:08:22,539
render something for authentication or

00:08:19,659 --> 00:08:24,460
nods data formatting so of requests and

00:08:22,539 --> 00:08:25,840
of responses when we're formatting your

00:08:24,460 --> 00:08:27,570
requests are sent to the back-end or

00:08:25,840 --> 00:08:29,979
something to come out to the front-end

00:08:27,570 --> 00:08:30,969
config files like translations and

00:08:29,979 --> 00:08:31,960
colors are consistent across

00:08:30,969 --> 00:08:35,200
environments

00:08:31,960 --> 00:08:36,260
types so we use flow on the projects

00:08:35,200 --> 00:08:38,419
which is type

00:08:36,260 --> 00:08:40,550
used a lot of reactants an alternative

00:08:38,419 --> 00:08:43,040
to type scripts it's a bit of a subset

00:08:40,550 --> 00:08:45,830
of type script and we have some specific

00:08:43,040 --> 00:08:47,120
types for products for search results so

00:08:45,830 --> 00:08:48,680
we share them between our to render

00:08:47,120 --> 00:08:50,930
environments which allows a very

00:08:48,680 --> 00:08:53,570
consistent Redux to flow into our

00:08:50,930 --> 00:08:56,030
application API calls are completely

00:08:53,570 --> 00:08:59,390
shared and then the whole redux store is

00:08:56,030 --> 00:09:01,340
shared so actions reducers selectors all

00:08:59,390 --> 00:09:02,870
of that is shared between the two and we

00:09:01,340 --> 00:09:04,370
choose which parts of the redux story

00:09:02,870 --> 00:09:06,680
wants using web and which parts are

00:09:04,370 --> 00:09:10,520
native so we don't have a bulky Redux

00:09:06,680 --> 00:09:12,350
trophy either on the approach to sharing

00:09:10,520 --> 00:09:14,000
I mentioned some conditional components

00:09:12,350 --> 00:09:15,880
so you make a lot of use of the

00:09:14,000 --> 00:09:18,410
recompose library which is sort of the

00:09:15,880 --> 00:09:20,780
utility both for higher and higher order

00:09:18,410 --> 00:09:24,200
components and reacts so we see here we

00:09:20,780 --> 00:09:26,810
imports compose branch and render

00:09:24,200 --> 00:09:29,030
components we have a map States of props

00:09:26,810 --> 00:09:32,330
which takes the state uses a shared

00:09:29,030 --> 00:09:34,340
selector and it will return the users

00:09:32,330 --> 00:09:37,040
permissions then we have a higher-order

00:09:34,340 --> 00:09:40,610
component that takes a permission and an

00:09:37,040 --> 00:09:42,470
unauthorized components it will then use

00:09:40,610 --> 00:09:44,480
compose to connect to the store by a map

00:09:42,470 --> 00:09:46,790
state to props and then we use branch

00:09:44,480 --> 00:09:49,640
from recompose so branch takes a

00:09:46,790 --> 00:09:51,620
condition a components and and its

00:09:49,640 --> 00:09:53,480
secondary components if the condition is

00:09:51,620 --> 00:09:54,800
true it renders the first components if

00:09:53,480 --> 00:09:57,050
the condition is false it renders a

00:09:54,800 --> 00:09:59,080
second components so here we're saying

00:09:57,050 --> 00:10:01,160
if the user does not have the permission

00:09:59,080 --> 00:10:03,260
rendered the unauthorized components

00:10:01,160 --> 00:10:04,820
otherwise it will render whatever

00:10:03,260 --> 00:10:07,360
components we wrap in this higher-order

00:10:04,820 --> 00:10:10,790
components so rendering authorized

00:10:07,360 --> 00:10:14,570
Commission create role this will then

00:10:10,790 --> 00:10:18,070
render the role creation page wrapper if

00:10:14,570 --> 00:10:18,070
the user has that permission

00:10:18,850 --> 00:10:23,350
and going back to sort of that shared

00:10:21,399 --> 00:10:24,720
library so as I mentioned we transpile

00:10:23,350 --> 00:10:27,759
to commonjs

00:10:24,720 --> 00:10:29,620
it was we spent some time figuring out

00:10:27,759 --> 00:10:31,569
how to do this because we didn't really

00:10:29,620 --> 00:10:32,980
want to transpile our code but after

00:10:31,569 --> 00:10:34,540
trying not to do it for a long time we

00:10:32,980 --> 00:10:36,130
realized it was really the best way the

00:10:34,540 --> 00:10:38,949
common standard sort of for node modules

00:10:36,130 --> 00:10:42,040
is to transpile two common J's we used a

00:10:38,949 --> 00:10:44,319
web pack configuration and use that to

00:10:42,040 --> 00:10:46,029
build into commonjs it's common - yes -

00:10:44,319 --> 00:10:48,490
that's a bit of a detail it just allows

00:10:46,029 --> 00:10:49,810
exports from your library and it's

00:10:48,490 --> 00:10:52,389
generally a generic web pack

00:10:49,810 --> 00:10:53,769
configuration with Babel but the

00:10:52,389 --> 00:10:56,139
interesting part that saved us a lot of

00:10:53,769 --> 00:10:58,990
headaches is external which allows us to

00:10:56,139 --> 00:11:01,600
use the parents libraries dependency so

00:10:58,990 --> 00:11:04,029
web and native could in the future be on

00:11:01,600 --> 00:11:06,209
different versions of reacts and this

00:11:04,029 --> 00:11:08,139
allows us to say use the importing

00:11:06,209 --> 00:11:09,940
repositories version of react

00:11:08,139 --> 00:11:12,100
so if webs on one version and natives on

00:11:09,940 --> 00:11:14,589
another we can use the importing parents

00:11:12,100 --> 00:11:16,180
version of that and the same for react

00:11:14,589 --> 00:11:22,060
Apollo and actually we did the same for

00:11:16,180 --> 00:11:23,769
Redux but how do we publish a private

00:11:22,060 --> 00:11:26,199
repository this was the question we're

00:11:23,769 --> 00:11:29,019
asking ourselves initially we did it

00:11:26,199 --> 00:11:31,779
with get tags and we had a bath account

00:11:29,019 --> 00:11:34,029
on github with a basic authentication

00:11:31,779 --> 00:11:36,939
token this is not a best practice in any

00:11:34,029 --> 00:11:39,399
way so we put the authentication token

00:11:36,939 --> 00:11:40,990
in here the repository name and then a

00:11:39,399 --> 00:11:42,670
git tag which is versioned on the branch

00:11:40,990 --> 00:11:44,380
name it worked quite well

00:11:42,670 --> 00:11:46,000
yarn link was really useful for local

00:11:44,380 --> 00:11:48,100
development so we can link to our local

00:11:46,000 --> 00:11:50,470
version of that repository but it didn't

00:11:48,100 --> 00:11:53,050
really scale as versioning didn't really

00:11:50,470 --> 00:11:54,370
have any semantics and from from a

00:11:53,050 --> 00:11:56,589
security point of view wouldn't we like

00:11:54,370 --> 00:12:00,430
having this authentication token in our

00:11:56,589 --> 00:12:02,829
source code so going over the workflow

00:12:00,430 --> 00:12:04,389
we had to yawn build release a tag push

00:12:02,829 --> 00:12:07,930
the tag merge and update the

00:12:04,389 --> 00:12:10,750
package.json in native and web we moved

00:12:07,930 --> 00:12:13,300
to a private versioning software called

00:12:10,750 --> 00:12:16,029
package cloud we could have used em pm's

00:12:13,300 --> 00:12:17,889
private repositories but my comm already

00:12:16,029 --> 00:12:19,720
had this as a provider which allows us

00:12:17,889 --> 00:12:21,699
to make a much more normal package Jason

00:12:19,720 --> 00:12:24,100
where we can have normals and versioning

00:12:21,699 --> 00:12:26,410
and it sort of pushed develop developers

00:12:24,100 --> 00:12:28,600
to use semantic versioning and moved or

00:12:26,410 --> 00:12:31,030
releasing into a CI which was much

00:12:28,600 --> 00:12:33,890
better from a versioning point of view

00:12:31,030 --> 00:12:37,640
but we're using App Center so absent as

00:12:33,890 --> 00:12:38,930
a CI for or for native app deployment

00:12:37,640 --> 00:12:41,210
and its really good for react native

00:12:38,930 --> 00:12:44,000
deployments it's built by Microsoft but

00:12:41,210 --> 00:12:48,320
it's still good and we needed to pull

00:12:44,000 --> 00:12:50,750
this shared library and it's my mobile

00:12:48,320 --> 00:12:53,390
center is very absent they renamed to is

00:12:50,750 --> 00:12:54,650
really good keeping things simple but

00:12:53,390 --> 00:12:56,930
that means you can't do complicated

00:12:54,650 --> 00:12:58,280
things sometimes but they have a support

00:12:56,930 --> 00:13:00,050
button in the bottom right so I sent a

00:12:58,280 --> 00:13:02,120
quick question saying we're wanting to

00:13:00,050 --> 00:13:03,950
use a shared library we require an NPM

00:13:02,120 --> 00:13:05,780
install from a private repo what's the

00:13:03,950 --> 00:13:08,270
best practice for doing this on App

00:13:05,780 --> 00:13:10,250
Center Microsoft came back to us saying

00:13:08,270 --> 00:13:11,930
they don't currently support this they

00:13:10,250 --> 00:13:14,810
do support VSDs which I'm sure we're

00:13:11,930 --> 00:13:16,880
already happy about but private repos

00:13:14,810 --> 00:13:21,110
are not yet available so we feel we were

00:13:16,880 --> 00:13:22,520
stuck but there is a way and there is a

00:13:21,110 --> 00:13:25,820
blog post it's supposed to load here in

00:13:22,520 --> 00:13:26,180
a second if not I will attach it there

00:13:25,820 --> 00:13:28,340
we go

00:13:26,180 --> 00:13:31,660
so installing private impact is an app

00:13:28,340 --> 00:13:35,270
Center we figured out there is a way you

00:13:31,660 --> 00:13:37,340
can add a post counts per a post clone

00:13:35,270 --> 00:13:38,870
script to App Center and basically do

00:13:37,340 --> 00:13:41,180
whatever you want in bash like change

00:13:38,870 --> 00:13:43,670
the node version install detox if you're

00:13:41,180 --> 00:13:46,520
doing testing but what we did was echo

00:13:43,670 --> 00:13:48,710
outs and on our NPM file which allows

00:13:46,520 --> 00:13:50,840
authentication we had the authentication

00:13:48,710 --> 00:13:53,420
token in an environment variable and App

00:13:50,840 --> 00:13:54,470
Center which you can you can protect the

00:13:53,420 --> 00:13:57,080
environment variable if you want to

00:13:54,470 --> 00:13:59,120
which was useful and then our builds

00:13:57,080 --> 00:14:01,400
could then work because we have an RM

00:13:59,120 --> 00:14:02,870
p.m. file when we on yarn install or NPM

00:14:01,400 --> 00:14:04,670
install it would use that for

00:14:02,870 --> 00:14:08,630
authentication and that allowed us to

00:14:04,670 --> 00:14:11,030
use it on App Center in conclusion

00:14:08,630 --> 00:14:12,140
co-chair Inc has a great advantage is a

00:14:11,030 --> 00:14:14,350
great advantage of reacting we are

00:14:12,140 --> 00:14:18,110
native not all your code is shareable

00:14:14,350 --> 00:14:19,880
but a lot of it is in my view web apps

00:14:18,110 --> 00:14:21,890
and native app should have a different

00:14:19,880 --> 00:14:25,310
UX so the fact we can't share all of the

00:14:21,890 --> 00:14:27,080
rendering isn't a big imposition to us

00:14:25,310 --> 00:14:29,090
because we should probably be styling

00:14:27,080 --> 00:14:31,400
them differently anyway high order

00:14:29,090 --> 00:14:33,200
components are really useful for sharing

00:14:31,400 --> 00:14:34,490
the non render logic even if you're not

00:14:33,200 --> 00:14:37,130
sharing code between react and react

00:14:34,490 --> 00:14:37,850
native and publishing the private NPM

00:14:37,130 --> 00:14:40,430
repository

00:14:37,850 --> 00:14:41,710
sorry NPM package makes your workflow a

00:14:40,430 --> 00:14:44,320
lot simpler and keeps

00:14:41,710 --> 00:14:45,790
more semantics finally a quick message

00:14:44,320 --> 00:14:48,399
from me calm whoo I'm really enjoying

00:14:45,790 --> 00:14:49,839
working with as I mentioned they're

00:14:48,399 --> 00:14:51,490
moving their main websites and they're

00:14:49,839 --> 00:14:53,380
apt to react native therefore they are

00:14:51,490 --> 00:14:55,360
hiring and they're going to be hiring a

00:14:53,380 --> 00:14:57,160
bigger react and react native team as it

00:14:55,360 --> 00:14:58,360
goes on we're about eight developers on

00:14:57,160 --> 00:15:00,610
the project in a minute and that's gonna

00:14:58,360 --> 00:15:03,070
be growing over the next months so feel

00:15:00,610 --> 00:15:05,230
free to go to their website or send me

00:15:03,070 --> 00:15:06,910
an email and I can put you in touch but

00:15:05,230 --> 00:15:09,640
if you're interested they'll be very

00:15:06,910 --> 00:15:11,589
keen to talk to you and yeah I've been

00:15:09,640 --> 00:15:15,120
banned from theater I think there'll be

00:15:11,589 --> 00:15:15,120
a time for questions at the end

00:15:15,140 --> 00:15:19,750

YouTube URL: https://www.youtube.com/watch?v=IA_M2ESWoXw


