Title: Avoid Boilerplate and Repetitive Code in React Native using Galette - React Native - November 2018
Publication date: 2018-12-03
Playlist: React Native London
Description: 
	Presented by Thibault Henry (@thibhenry92)

Do you feel like you're always writing the same code over and over again?
Loading lists from an API, pagination, infinite scroll, handling loading and error states, checking for non-null values, etc.
Galette is a library that allows you to avoid repeating yourself while handling all of these patterns so that you can focus on your useful domain logic.
I will introduce you to the library with concrete examples.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:07,410
hello everyone i'm t-bo and i'm gonna

00:00:02,879 --> 00:00:09,500
talk about how we are buzzy having

00:00:07,410 --> 00:00:11,969
trying to avoid boilerplates and

00:00:09,500 --> 00:00:14,969
representative using a library we built

00:00:11,969 --> 00:00:17,340
in-house which is called galettes so

00:00:14,969 --> 00:00:19,890
quick word about myself I am a French

00:00:17,340 --> 00:00:22,100
and German student my suits are in Paris

00:00:19,890 --> 00:00:25,500
I'm currently an intern a full psych

00:00:22,100 --> 00:00:28,590
engineer at Bertie and passionate about

00:00:25,500 --> 00:00:33,710
everything about new tech in web mobile

00:00:28,590 --> 00:00:37,230
and more different industries okay so

00:00:33,710 --> 00:00:39,690
just a quick refresher for those who

00:00:37,230 --> 00:00:42,000
maybe haven't worked it with redux or

00:00:39,690 --> 00:00:44,789
having works on its own in a long time

00:00:42,000 --> 00:00:48,539
let's review very quickly how the real

00:00:44,789 --> 00:00:49,829
expansion works with react so it has

00:00:48,539 --> 00:00:51,510
let's say four or five different

00:00:49,829 --> 00:00:53,309
components you have of course reviews

00:00:51,510 --> 00:00:56,039
which are your direct component which

00:00:53,309 --> 00:00:58,320
will we've all been using so it's

00:00:56,039 --> 00:01:02,309
exactly the same for reckon if you have

00:00:58,320 --> 00:01:04,379
your actions which are basically a plane

00:01:02,309 --> 00:01:06,810
object which will be able to mutate our

00:01:04,379 --> 00:01:08,240
state which is like a big object

00:01:06,810 --> 00:01:11,159
containing the state of your application

00:01:08,240 --> 00:01:13,430
which is handled by reducers which are

00:01:11,159 --> 00:01:17,729
functions which will mutate the states

00:01:13,430 --> 00:01:19,979
things to the action payload and then

00:01:17,729 --> 00:01:22,229
not shown this graph but around here you

00:01:19,979 --> 00:01:24,540
would have selectors which would allow

00:01:22,229 --> 00:01:26,820
your component to select pieces of the

00:01:24,540 --> 00:01:30,990
state to be able to display them on the

00:01:26,820 --> 00:01:33,450
screen the prompt we we've been facing

00:01:30,990 --> 00:01:36,990
different problems with with Redux over

00:01:33,450 --> 00:01:39,420
the last 18 months a lot of those

00:01:36,990 --> 00:01:41,670
problems where with boiler plates and

00:01:39,420 --> 00:01:43,950
performance and just being able to write

00:01:41,670 --> 00:01:46,680
concise code that's we can easily

00:01:43,950 --> 00:01:49,290
maintain and not spend too much time on

00:01:46,680 --> 00:01:52,680
the boring things in order to actually

00:01:49,290 --> 00:01:55,079
move along with our business logic so

00:01:52,680 --> 00:01:57,030
I've picked up a few of these issues and

00:01:55,079 --> 00:01:59,369
I'm going to present to you what we've

00:01:57,030 --> 00:02:01,860
done in the first place and then trying

00:01:59,369 --> 00:02:04,110
to explain how these actually issues

00:02:01,860 --> 00:02:06,840
that everyone can encounter with react

00:02:04,110 --> 00:02:09,090
and redux any recognition of course and

00:02:06,840 --> 00:02:13,319
then I'll explain how Garret can

00:02:09,090 --> 00:02:14,939
actually enable you guys to

00:02:13,319 --> 00:02:17,069
to face these issues in a more concise

00:02:14,939 --> 00:02:20,579
less boilerplate and more efficient

00:02:17,069 --> 00:02:24,930
codes so the first issue I'm get talk

00:02:20,579 --> 00:02:27,060
about is handling lists this is a very

00:02:24,930 --> 00:02:29,219
basic example of what we could do with

00:02:27,060 --> 00:02:31,620
record X with an API so it could be

00:02:29,219 --> 00:02:33,480
something like loading a list of items

00:02:31,620 --> 00:02:36,689
or just an array from the API could be

00:02:33,480 --> 00:02:39,030
clients could be users could be a like

00:02:36,689 --> 00:02:41,280
articles from a shop for example and

00:02:39,030 --> 00:02:43,439
then you want to so to load that list to

00:02:41,280 --> 00:02:46,709
start in your riddick store and display

00:02:43,439 --> 00:02:48,510
its on your react components this does

00:02:46,709 --> 00:02:51,840
sound pretty simple but it can get very

00:02:48,510 --> 00:02:54,569
complicated really quickly so let's look

00:02:51,840 --> 00:02:56,280
at a bit of code for that so that's the

00:02:54,569 --> 00:02:59,040
most basic reduce you could think of for

00:02:56,280 --> 00:03:02,459
this kind of use case which would be get

00:02:59,040 --> 00:03:04,560
a list of clients and handling when you

00:03:02,459 --> 00:03:06,629
actually have fetched this list from

00:03:04,560 --> 00:03:07,739
your API so this is just the reducer

00:03:06,629 --> 00:03:12,000
part I haven't looked at the

00:03:07,739 --> 00:03:14,459
asynchronous the asynchronous middleware

00:03:12,000 --> 00:03:15,870
parts but for your reducer this could be

00:03:14,459 --> 00:03:17,629
something like when your triggers your

00:03:15,870 --> 00:03:20,280
client so your action is getting clients

00:03:17,629 --> 00:03:24,060
you just change your piece of state to

00:03:20,280 --> 00:03:26,849
be the clients from the payload so

00:03:24,060 --> 00:03:28,049
that's a very basic redux producer quite

00:03:26,849 --> 00:03:30,180
simple

00:03:28,049 --> 00:03:32,519
that's what's with all ends on the

00:03:30,180 --> 00:03:35,040
documentation or tutorials with a switch

00:03:32,519 --> 00:03:38,099
statement and in case in return let's

00:03:35,040 --> 00:03:40,139
see fault at the end and then on the

00:03:38,099 --> 00:03:42,419
component side this is a very simple

00:03:40,139 --> 00:03:44,129
component that we will use this connects

00:03:42,419 --> 00:03:47,699
hoc that's you guys have probably seen

00:03:44,129 --> 00:03:50,069
on react Redux which basically takes the

00:03:47,699 --> 00:03:53,280
states and then maps on to the props of

00:03:50,069 --> 00:03:56,969
this component the clients list so as an

00:03:53,280 --> 00:03:59,069
array and then I can spread so in a in

00:03:56,969 --> 00:04:00,449
reconceive I could use this flat list

00:03:59,069 --> 00:04:02,969
component which is provided by default

00:04:00,449 --> 00:04:04,439
by reg negative and I can give it two

00:04:02,969 --> 00:04:07,500
different props which you wish will

00:04:04,439 --> 00:04:09,900
member which will be sorry my data being

00:04:07,500 --> 00:04:13,079
array and then rent the item which will

00:04:09,900 --> 00:04:15,629
be a function which will take of

00:04:13,079 --> 00:04:18,359
displaying of rendering one single item

00:04:15,629 --> 00:04:20,280
so by here I said my my client which

00:04:18,359 --> 00:04:22,650
would be just a component spring a

00:04:20,280 --> 00:04:25,020
client information so that's pretty

00:04:22,650 --> 00:04:27,270
simple but very quickly you're going to

00:04:25,020 --> 00:04:29,270
realize that the UX isn't this

00:04:27,270 --> 00:04:31,889
perfect and since we are dealing with

00:04:29,270 --> 00:04:34,289
react native apps there's a good chance

00:04:31,889 --> 00:04:36,240
that the networking is quite bad so you

00:04:34,289 --> 00:04:37,740
can have very long loading times you can

00:04:36,240 --> 00:04:39,720
have errors while you fetch your items

00:04:37,740 --> 00:04:43,530
so you're going to quickly want to

00:04:39,720 --> 00:04:45,479
handle an additional kind of metadata

00:04:43,530 --> 00:04:49,259
around your list which could be loading

00:04:45,479 --> 00:04:49,979
States and error states so how would you

00:04:49,259 --> 00:04:52,229
do that

00:04:49,979 --> 00:04:53,430
in your state and you see this is

00:04:52,229 --> 00:04:55,669
already getting quite big and pretty

00:04:53,430 --> 00:04:58,139
sure the guys at the back can see that

00:04:55,669 --> 00:05:00,150
but this register basically just gets

00:04:58,139 --> 00:05:01,889
two more boolean which will be loading

00:05:00,150 --> 00:05:04,319
true or false if we're actually losing

00:05:01,889 --> 00:05:05,970
the the list from the states and error

00:05:04,319 --> 00:05:07,530
if there has been let's say and that's

00:05:05,970 --> 00:05:10,169
working error for example and you can

00:05:07,530 --> 00:05:11,610
see how that's already quite big it's

00:05:10,169 --> 00:05:13,650
like it's still very simple it's just a

00:05:11,610 --> 00:05:15,900
list with two billions and we're already

00:05:13,650 --> 00:05:18,360
having such a big reducer that the

00:05:15,900 --> 00:05:20,669
people at the back can't see it even

00:05:18,360 --> 00:05:21,960
though the sieve is quite big and you

00:05:20,669 --> 00:05:24,599
have just a lots of pipette with a

00:05:21,960 --> 00:05:27,210
switch statement case return the default

00:05:24,599 --> 00:05:30,120
at the end is very long even though it's

00:05:27,210 --> 00:05:32,370
a very simple use case on the component

00:05:30,120 --> 00:05:34,560
sides how to handle that is pretty

00:05:32,370 --> 00:05:36,389
simple but very repetitive because you

00:05:34,560 --> 00:05:38,759
have to put two if statements at the

00:05:36,389 --> 00:05:41,219
beginning of your render methods or your

00:05:38,759 --> 00:05:42,930
functional components to check if your

00:05:41,219 --> 00:05:44,400
client list is loading or if you have an

00:05:42,930 --> 00:05:46,139
error for it and I display an

00:05:44,400 --> 00:05:48,750
appropriate component in case of loading

00:05:46,139 --> 00:05:50,370
set or States and funny if no if you're

00:05:48,750 --> 00:05:52,919
not loading and you're nuts having an

00:05:50,370 --> 00:05:55,650
error you can finally display your your

00:05:52,919 --> 00:05:56,880
list this is so quite simple however

00:05:55,650 --> 00:05:58,319
you're going to need to do that every

00:05:56,880 --> 00:05:59,460
single time you display your list every

00:05:58,319 --> 00:06:03,810
single time you display an item that

00:05:59,460 --> 00:06:07,740
list which is getting quite painful to

00:06:03,810 --> 00:06:10,500
do and record X connector doesn't really

00:06:07,740 --> 00:06:12,810
change a lot right but that's not it

00:06:10,500 --> 00:06:15,810
let's say that the list you want to load

00:06:12,810 --> 00:06:19,199
from your IP is big let's say you have a

00:06:15,810 --> 00:06:20,909
large list of clients for example a good

00:06:19,199 --> 00:06:24,240
use case was actually at birdy not so

00:06:20,909 --> 00:06:28,020
long ago where we have an app so for our

00:06:24,240 --> 00:06:29,400
b2b customers and they have the ability

00:06:28,020 --> 00:06:31,469
of seeing the list of all the clients

00:06:29,400 --> 00:06:33,150
that have been assigned to them we've

00:06:31,469 --> 00:06:35,669
realized that some of our clients can be

00:06:33,150 --> 00:06:39,060
I can have up to 200 clients in Dallas

00:06:35,669 --> 00:06:40,620
so 200 elements to render which would be

00:06:39,060 --> 00:06:43,410
quite painful on a performance

00:06:40,620 --> 00:06:45,810
I'd to load a list of 200 entities from

00:06:43,410 --> 00:06:49,080
the API every single time we visit the

00:06:45,810 --> 00:06:50,729
main page of the application so to to

00:06:49,080 --> 00:06:52,440
handle that you're probably gonna want

00:06:50,729 --> 00:06:54,479
to do something in like pagination where

00:06:52,440 --> 00:06:58,190
your API accepts a parameter as a page

00:06:54,479 --> 00:07:01,620
so 1 2 3 etc incrementing and then your

00:06:58,190 --> 00:07:04,470
your real experts can handle this page

00:07:01,620 --> 00:07:06,210
and increment it to get more data with

00:07:04,470 --> 00:07:08,970
some kind of infinite scroll on the

00:07:06,210 --> 00:07:10,620
component side how to do that since the

00:07:08,970 --> 00:07:12,660
register is getting a really big I just

00:07:10,620 --> 00:07:14,789
showed one one case with a switch

00:07:12,660 --> 00:07:17,160
statement which is when you actually got

00:07:14,789 --> 00:07:19,350
the kind so the success section and then

00:07:17,160 --> 00:07:22,139
you merge so the previous clients that

00:07:19,350 --> 00:07:23,639
you already had in them in the in the

00:07:22,139 --> 00:07:25,229
States and then the nucleons that you

00:07:23,639 --> 00:07:27,360
just got from the actions or from the

00:07:25,229 --> 00:07:29,280
API by the way this is a very

00:07:27,360 --> 00:07:31,410
error-prone because I say that the your

00:07:29,280 --> 00:07:32,760
user is trying to also has a very bad

00:07:31,410 --> 00:07:35,160
connection is trying to use your

00:07:32,760 --> 00:07:37,440
interest CRO a lot so you might end up

00:07:35,160 --> 00:07:40,320
fetching the same page over and over

00:07:37,440 --> 00:07:42,090
again and then just concatenating that's

00:07:40,320 --> 00:07:45,000
huge list so you might have duplicates

00:07:42,090 --> 00:07:46,349
it's very real problem basically and

00:07:45,000 --> 00:07:49,919
then you can just increment your page

00:07:46,349 --> 00:07:52,950
number in your states okay on the

00:07:49,919 --> 00:07:54,750
component side how to do that actually

00:07:52,950 --> 00:07:56,639
on regulative is not too bad because the

00:07:54,750 --> 00:07:59,130
flat list is quite a good component

00:07:56,639 --> 00:08:02,130
should by recognize of themselves so we

00:07:59,130 --> 00:08:04,680
can have the on enriched and on enriched

00:08:02,130 --> 00:08:06,510
thresholds properties which basically

00:08:04,680 --> 00:08:10,289
allow you to dispatch connection into

00:08:06,510 --> 00:08:12,960
your riddick state every time you reach

00:08:10,289 --> 00:08:16,979
the end of the list but still lots of

00:08:12,960 --> 00:08:19,440
very plates so in the end this is really

00:08:16,979 --> 00:08:21,240
painful it is we've done that a lot at

00:08:19,440 --> 00:08:23,400
birdie we do that on a reckon if on the

00:08:21,240 --> 00:08:28,169
mobile side we get with react web on the

00:08:23,400 --> 00:08:30,900
on the website and if you have a lot of

00:08:28,169 --> 00:08:32,880
lists on your app it can be just you

00:08:30,900 --> 00:08:35,459
have to do that over and over again

00:08:32,880 --> 00:08:36,659
across the entire app and you can get

00:08:35,459 --> 00:08:38,640
much worse because what I show you is

00:08:36,659 --> 00:08:40,800
just to get a list with pagination and

00:08:38,640 --> 00:08:42,690
Erised aracite and loading states and

00:08:40,800 --> 00:08:44,550
then just spraying with with a flat list

00:08:42,690 --> 00:08:47,279
if you have to do styling business logic

00:08:44,550 --> 00:08:48,959
and things around your list your company

00:08:47,279 --> 00:08:52,740
your components are going to get like

00:08:48,959 --> 00:08:54,390
huge so we need to find a solution at

00:08:52,740 --> 00:08:55,950
body we needed to find a solution

00:08:54,390 --> 00:08:57,300
- about all that boilerplate because if

00:08:55,950 --> 00:09:00,000
we need to change one thing we had to

00:08:57,300 --> 00:09:02,070
change across the entire code base so

00:09:00,000 --> 00:09:05,190
yeah we needed a solution and this

00:09:02,070 --> 00:09:08,550
solution is called galettes so what

00:09:05,190 --> 00:09:12,420
exactly is Cadets it is a open-source

00:09:08,550 --> 00:09:14,550
package with helpers and comment yeah we

00:09:12,420 --> 00:09:16,770
help us - to help you reduce your

00:09:14,550 --> 00:09:20,940
boilerplates on common patterns with

00:09:16,770 --> 00:09:22,170
react and redux so it helps you to

00:09:20,940 --> 00:09:25,590
reduce your benefits and of course

00:09:22,170 --> 00:09:29,010
errors because it is tested itself and

00:09:25,590 --> 00:09:32,190
in the end the the end goal is to help

00:09:29,010 --> 00:09:36,540
you save a lot of time on the boring

00:09:32,190 --> 00:09:39,510
things so let's take back this exact

00:09:36,540 --> 00:09:41,700
same example but use gedit for this how

00:09:39,510 --> 00:09:43,380
would our reducer look so remember that

00:09:41,700 --> 00:09:45,090
really so with the switch statements

00:09:43,380 --> 00:09:48,390
which was something like 20 maybe 25

00:09:45,090 --> 00:09:52,440
lines minimum this is what it looks like

00:09:48,390 --> 00:09:54,450
with galets so get has this this feature

00:09:52,440 --> 00:09:56,340
color correction which is basically a

00:09:54,450 --> 00:09:58,440
list so it's a wrapper around an array a

00:09:56,340 --> 00:10:00,930
basic JavaScript array but with metadata

00:09:58,440 --> 00:10:03,000
in there so it will have pagination our

00:10:00,930 --> 00:10:04,620
states and loading States just where I

00:10:03,000 --> 00:10:07,890
showed you but already implemented for

00:10:04,620 --> 00:10:09,060
you so how does this work so you still

00:10:07,890 --> 00:10:12,690
have your client register which is a

00:10:09,060 --> 00:10:14,160
basic function you have your initial

00:10:12,690 --> 00:10:15,960
state of course and then you get the

00:10:14,160 --> 00:10:18,210
action of the second parameter and what

00:10:15,960 --> 00:10:19,830
you just do is return something that you

00:10:18,210 --> 00:10:22,740
input from guide which is called reduced

00:10:19,830 --> 00:10:24,420
list in items this function takes three

00:10:22,740 --> 00:10:26,040
arguments it takes your state in your

00:10:24,420 --> 00:10:28,860
action just like your basic reducer and

00:10:26,040 --> 00:10:30,060
a configuration object and this

00:10:28,860 --> 00:10:31,260
configuration object everything is

00:10:30,060 --> 00:10:33,630
documented on the github page which I

00:10:31,260 --> 00:10:36,900
will give you the link at the end of the

00:10:33,630 --> 00:10:39,660
talk but basically what you do is give a

00:10:36,900 --> 00:10:42,120
few arguments so it can be the action

00:10:39,660 --> 00:10:43,440
prefix which is basically the name of

00:10:42,120 --> 00:10:45,420
your action and then it's gonna happen

00:10:43,440 --> 00:10:50,280
success and failure - the name of the

00:10:45,420 --> 00:10:52,350
actions the list skin states is so we

00:10:50,280 --> 00:10:55,140
need to state clients dot lists for

00:10:52,350 --> 00:10:57,420
example to get the actual array so it's

00:10:55,140 --> 00:11:01,170
yes that should just a cleaner or Redux

00:10:57,420 --> 00:11:03,960
State you have the item identifier

00:11:01,170 --> 00:11:06,090
resolver which basically takes one item

00:11:03,960 --> 00:11:07,120
of the list and returns a unique

00:11:06,090 --> 00:11:09,280
identifier

00:11:07,120 --> 00:11:13,240
the most common example would be just an

00:11:09,280 --> 00:11:15,280
ID like a unique ID and in the end the

00:11:13,240 --> 00:11:16,990
payload resolver which is a function

00:11:15,280 --> 00:11:19,750
that takes the success action and

00:11:16,990 --> 00:11:23,500
returns the payload so the array of

00:11:19,750 --> 00:11:26,590
clients in our case what's really cool

00:11:23,500 --> 00:11:28,720
about this is that just with this

00:11:26,590 --> 00:11:31,090
function you handle exactly what I

00:11:28,720 --> 00:11:33,370
showed you just before on the register

00:11:31,090 --> 00:11:35,560
side on the component side which you

00:11:33,370 --> 00:11:38,200
just need to do is use this scrubber

00:11:35,560 --> 00:11:39,550
collection components and give it your

00:11:38,200 --> 00:11:41,740
collection which you get directly from

00:11:39,550 --> 00:11:44,290
the state with a selector that is shaped

00:11:41,740 --> 00:11:46,240
with glass of course this render row

00:11:44,290 --> 00:11:51,400
which is exactly that like the runs item

00:11:46,240 --> 00:11:54,640
prop from the scroll view in right- or

00:11:51,400 --> 00:11:56,950
the scroll list and on refresh which is

00:11:54,640 --> 00:11:59,980
when you pull to refresh your lists and

00:11:56,950 --> 00:12:01,510
the zero State placeholder message which

00:11:59,980 --> 00:12:03,280
is when you don't have any items that's

00:12:01,510 --> 00:12:06,400
the basic confit and that handles

00:12:03,280 --> 00:12:08,620
everything for you so the activity

00:12:06,400 --> 00:12:10,600
indicator the the spinner when you are

00:12:08,620 --> 00:12:13,990
fetching a new data or the first batch

00:12:10,600 --> 00:12:17,740
of data the earth states which with a

00:12:13,990 --> 00:12:19,150
custom component can display all those

00:12:17,740 --> 00:12:21,310
kind of things just the boring things

00:12:19,150 --> 00:12:23,770
that your you're going to do a lot of

00:12:21,310 --> 00:12:26,760
times in many different projects all in

00:12:23,770 --> 00:12:29,530
one place done for you and test it okay

00:12:26,760 --> 00:12:31,630
so that was our first use case you can

00:12:29,530 --> 00:12:34,270
already see how the collections in

00:12:31,630 --> 00:12:36,490
Cadets can really help you with just

00:12:34,270 --> 00:12:38,980
reducing boilerplate and getting things

00:12:36,490 --> 00:12:41,890
done much quicker by the way in the

00:12:38,980 --> 00:12:43,450
collection module of Cadets you have a

00:12:41,890 --> 00:12:45,910
lot more things if you need more

00:12:43,450 --> 00:12:47,440
customization or around this we're

00:12:45,910 --> 00:12:49,240
exposing every single function that we

00:12:47,440 --> 00:12:52,720
use internally which means that you can

00:12:49,240 --> 00:12:54,580
just use just a few functions from from

00:12:52,720 --> 00:12:59,230
there to still help you on more custom

00:12:54,580 --> 00:13:02,380
reduces okay second use case would be

00:12:59,230 --> 00:13:03,940
displaying an item efficiently so let's

00:13:02,380 --> 00:13:07,090
take back is exactly the same example so

00:13:03,940 --> 00:13:08,740
I have my super client list and when I

00:13:07,090 --> 00:13:10,830
click on one clients when I press online

00:13:08,740 --> 00:13:12,880
clients I want to get to the client page

00:13:10,830 --> 00:13:16,780
so I have a couple of things to do for

00:13:12,880 --> 00:13:20,200
this I need to load the client from the

00:13:16,780 --> 00:13:21,070
states or I need to fetch him or to

00:13:20,200 --> 00:13:23,170
fetch the profile

00:13:21,070 --> 00:13:24,750
from the API if it's not loaded yet for

00:13:23,170 --> 00:13:29,170
example if I'm coming from a deep link

00:13:24,750 --> 00:13:35,170
and we've has we have some performance

00:13:29,170 --> 00:13:37,090
issue as well so to some of this so you

00:13:35,170 --> 00:13:41,230
have to store the array of clients in

00:13:37,090 --> 00:13:43,300
your register and then using some kind

00:13:41,230 --> 00:13:45,280
of selector like this so user that finds

00:13:43,300 --> 00:13:48,480
and then you find the user for this user

00:13:45,280 --> 00:13:51,520
ID or the client with the client ID and

00:13:48,480 --> 00:13:53,710
that could be settled right this is what

00:13:51,520 --> 00:13:56,110
we did add birdie for the for the

00:13:53,710 --> 00:13:58,600
beginning but this has a huge

00:13:56,110 --> 00:14:00,400
performance issue let's take back the

00:13:58,600 --> 00:14:05,080
example of our use case where we had a

00:14:00,400 --> 00:14:07,150
list of 200 clients a react Redux

00:14:05,080 --> 00:14:10,690
selector like this one will be run every

00:14:07,150 --> 00:14:12,550
single time that the componentry has to

00:14:10,690 --> 00:14:14,950
render so every time something changes

00:14:12,550 --> 00:14:17,020
and we need to render the componentry or

00:14:14,950 --> 00:14:18,880
any part of the componentry we're going

00:14:17,020 --> 00:14:21,040
to run this function doesn't seem to

00:14:18,880 --> 00:14:23,790
it's just say find an array but doing

00:14:21,040 --> 00:14:28,290
that many times per second in some cases

00:14:23,790 --> 00:14:31,330
on a list of 200 items can be very very

00:14:28,290 --> 00:14:33,790
memory consuming and can take actually

00:14:31,330 --> 00:14:35,980
quite quite a bit of time and we've had

00:14:33,790 --> 00:14:37,540
exactly this use case at buzzy and we've

00:14:35,980 --> 00:14:39,640
had just the app going extremely slow

00:14:37,540 --> 00:14:42,400
when clicking when client and every time

00:14:39,640 --> 00:14:46,600
we're rendering the app which is really

00:14:42,400 --> 00:14:51,460
slow second problem with displaying just

00:14:46,600 --> 00:14:53,680
one item is I need to fetch it from the

00:14:51,460 --> 00:14:55,660
API and display it but I also need to

00:14:53,680 --> 00:14:58,750
ensure that we've already fetched the

00:14:55,660 --> 00:15:01,630
value from the API actually have the

00:14:58,750 --> 00:15:05,050
client for this ID I just so I just

00:15:01,630 --> 00:15:07,030
clicked on so which means that I have to

00:15:05,050 --> 00:15:08,440
do rapid if in no choice basically if I

00:15:07,030 --> 00:15:10,300
don't have a client show something else

00:15:08,440 --> 00:15:13,390
if I do have the kinds I can furniture

00:15:10,300 --> 00:15:15,370
the current page and basically you just

00:15:13,390 --> 00:15:19,540
have a lot of boilerplate to fetch the

00:15:15,370 --> 00:15:21,880
entity quick example so I've got my

00:15:19,540 --> 00:15:23,980
selector here so get user by user name

00:15:21,880 --> 00:15:25,660
we should get a user name and the user

00:15:23,980 --> 00:15:28,480
uses it find which I just showed you

00:15:25,660 --> 00:15:31,360
with a client example same same kind of

00:15:28,480 --> 00:15:34,430
lists and then for my class for my

00:15:31,360 --> 00:15:36,950
components on the constructor

00:15:34,430 --> 00:15:38,780
dancing the props I need to to check

00:15:36,950 --> 00:15:39,980
that I do have the user in my props if I

00:15:38,780 --> 00:15:42,920
don't I need to in special election to

00:15:39,980 --> 00:15:44,720
fetch the user and then in the render

00:15:42,920 --> 00:15:46,820
method I also need to check that I do

00:15:44,720 --> 00:15:48,680
have the user because if I don't need to

00:15:46,820 --> 00:15:51,020
first of all return null or some kind of

00:15:48,680 --> 00:15:52,160
loading indicator and then finally I can

00:15:51,020 --> 00:15:53,750
do something with my user here

00:15:52,160 --> 00:15:56,690
consolidate but of course display some

00:15:53,750 --> 00:15:58,550
kind of page that's again a lot of

00:15:56,690 --> 00:16:01,910
boilerplate and here I don't even have

00:15:58,550 --> 00:16:05,750
the connected Jersey right so what's the

00:16:01,910 --> 00:16:08,060
correct solution for this much simpler

00:16:05,750 --> 00:16:10,670
you see that the component parts is

00:16:08,060 --> 00:16:14,120
literally just the consular log so it's

00:16:10,670 --> 00:16:16,970
just the render of the item once I'm

00:16:14,120 --> 00:16:18,230
sure I have fetch the item that I can

00:16:16,970 --> 00:16:19,970
read spray-tanned it's not going to be

00:16:18,230 --> 00:16:23,330
undefined or null or empty objects

00:16:19,970 --> 00:16:26,810
whatsoever the interesting part is what

00:16:23,330 --> 00:16:31,040
we use instead of the connect HSE that

00:16:26,810 --> 00:16:33,050
we all know and love from critics same

00:16:31,040 --> 00:16:35,750
thing just provides your user screen or

00:16:33,050 --> 00:16:39,050
the component you want to wrap and then

00:16:35,750 --> 00:16:42,860
a config object this config object would

00:16:39,050 --> 00:16:45,590
be the property want to inject your your

00:16:42,860 --> 00:16:49,640
item into so basically these are props

00:16:45,590 --> 00:16:52,250
user s comes from here the load entity

00:16:49,640 --> 00:16:54,680
section which is the action you want to

00:16:52,250 --> 00:16:57,290
dispatch to your state's when you don't

00:16:54,680 --> 00:17:01,130
have the entity yet so it's just gonna

00:16:57,290 --> 00:17:03,190
be my load user that I have my entities

00:17:01,130 --> 00:17:08,000
vector so this is just my selector from

00:17:03,190 --> 00:17:09,410
redux and finally the identifier from

00:17:08,000 --> 00:17:10,970
props resolver this is a really cool

00:17:09,410 --> 00:17:12,290
feature so let's say that's releasing

00:17:10,970 --> 00:17:13,820
some kind of navigation with the

00:17:12,290 --> 00:17:15,890
navigation parameter being in the user

00:17:13,820 --> 00:17:18,440
name you can just get the user name from

00:17:15,890 --> 00:17:22,160
this so that the last parameter will be

00:17:18,440 --> 00:17:25,280
directly injected into the story this

00:17:22,160 --> 00:17:27,350
vector so here it gets the user name as

00:17:25,280 --> 00:17:29,540
a parameter and it will directly

00:17:27,350 --> 00:17:31,670
injected into the selector so that you

00:17:29,540 --> 00:17:33,470
don't need to do any kind of a page with

00:17:31,670 --> 00:17:36,470
the props it's all done automatically

00:17:33,470 --> 00:17:38,780
for you and that's it once this is done

00:17:36,470 --> 00:17:40,310
you can just get started with you with

00:17:38,780 --> 00:17:43,040
your component you know that your user

00:17:40,310 --> 00:17:45,110
will be fetched from the API or from the

00:17:43,040 --> 00:17:47,380
list directly and you don't have

00:17:45,110 --> 00:17:50,410
anything to worry about

00:17:47,380 --> 00:17:52,870
okay and of course for the performance

00:17:50,410 --> 00:17:54,010
issue this is entirely compatible with

00:17:52,870 --> 00:17:56,470
the collection API I just showed you

00:17:54,010 --> 00:17:59,680
which means that since the collection is

00:17:56,470 --> 00:18:03,280
indexing the items not but not in an

00:17:59,680 --> 00:18:04,630
array but indexing them by ID you don't

00:18:03,280 --> 00:18:06,640
have any performance issue because

00:18:04,630 --> 00:18:08,440
you're just selecting state of users for

00:18:06,640 --> 00:18:09,910
the username directly so it's indexed by

00:18:08,440 --> 00:18:12,010
the username or by the end that's fire

00:18:09,910 --> 00:18:15,760
so this completely solves the

00:18:12,010 --> 00:18:18,910
performance issue with large lists great

00:18:15,760 --> 00:18:22,630
let's talk about a third use case which

00:18:18,910 --> 00:18:24,940
is a bit more of a few shoot tricks that

00:18:22,630 --> 00:18:27,400
we have to implement as well for smaller

00:18:24,940 --> 00:18:29,260
things it's less like a big API like the

00:18:27,400 --> 00:18:29,940
collection one but it's still super

00:18:29,260 --> 00:18:33,820
useful

00:18:29,940 --> 00:18:36,310
so I've identified a few different

00:18:33,820 --> 00:18:37,480
places in a real X pattern where you

00:18:36,310 --> 00:18:39,670
would have a lot of boilerplate and

00:18:37,480 --> 00:18:41,080
those would be in the register I can

00:18:39,670 --> 00:18:43,830
show you the switch statement which is

00:18:41,080 --> 00:18:45,970
already resolved by the connection

00:18:43,830 --> 00:18:48,670
register but if you need something more

00:18:45,970 --> 00:18:50,260
complex you might not have a good use

00:18:48,670 --> 00:18:52,330
case for the correction part so you

00:18:50,260 --> 00:18:54,130
still would want something that will

00:18:52,330 --> 00:18:55,230
reduce your boilerplate I'm going to

00:18:54,130 --> 00:18:57,910
show you that in a minute

00:18:55,230 --> 00:18:59,590
you have boilerplate seen actions so the

00:18:57,910 --> 00:19:01,630
action creates is I will show you that

00:18:59,590 --> 00:19:04,540
as well and then handing errors which is

00:19:01,630 --> 00:19:06,190
a great piece so let's start with the

00:19:04,540 --> 00:19:08,500
first one which is the boiler place in

00:19:06,190 --> 00:19:09,820
the reducers so again this is a very

00:19:08,500 --> 00:19:13,180
simple reducers you have your switch

00:19:09,820 --> 00:19:16,090
case break case break is break default

00:19:13,180 --> 00:19:18,730
return that's the very simple register

00:19:16,090 --> 00:19:21,610
we we all know but again that's a lots

00:19:18,730 --> 00:19:24,310
of boiler plates so how can we reduce

00:19:21,610 --> 00:19:26,590
all the boiler plate from this in while

00:19:24,310 --> 00:19:30,370
using Cadets it's with a function called

00:19:26,590 --> 00:19:32,680
create mapped reducer this function is

00:19:30,370 --> 00:19:34,450
super simple it's like five lines of

00:19:32,680 --> 00:19:37,300
code in our code base and what it does

00:19:34,450 --> 00:19:40,540
is takes an initial state and then a map

00:19:37,300 --> 00:19:42,190
from the action name to the actual like

00:19:40,540 --> 00:19:44,800
sub reducer you want to use for this

00:19:42,190 --> 00:19:46,920
action so basically if I if the action

00:19:44,800 --> 00:19:49,330
is get user I want to do this if it's

00:19:46,920 --> 00:19:51,430
this it's a failure I want to do that

00:19:49,330 --> 00:19:54,310
and that's it so you don't need to do

00:19:51,430 --> 00:19:56,650
your switch case anymore which it's

00:19:54,310 --> 00:19:59,320
pretty simple if you records but it

00:19:56,650 --> 00:20:00,690
saves a lot of space and also if you're

00:19:59,320 --> 00:20:02,370
using typescript

00:20:00,690 --> 00:20:06,870
which they complete other subjects you

00:20:02,370 --> 00:20:10,470
can type the action here and is just

00:20:06,870 --> 00:20:12,270
gonna allow you to avoid type like

00:20:10,470 --> 00:20:13,920
strongly types your your action for

00:20:12,270 --> 00:20:15,300
every single switch case which would add

00:20:13,920 --> 00:20:17,310
a lots of vertebrates again with

00:20:15,300 --> 00:20:19,500
subscripts so for this one just you can

00:20:17,310 --> 00:20:20,840
just type the action here it'll be just

00:20:19,500 --> 00:20:23,010
fine

00:20:20,840 --> 00:20:26,880
which is nice to have if you're using

00:20:23,010 --> 00:20:28,580
type scripts by replacing the actions so

00:20:26,880 --> 00:20:31,890
this is a very simple action files

00:20:28,580 --> 00:20:34,290
actions file sorry so again for loading

00:20:31,890 --> 00:20:37,250
a user so you have your const types

00:20:34,290 --> 00:20:39,540
which is like a map from a constant your

00:20:37,250 --> 00:20:41,700
action name and then you have your

00:20:39,540 --> 00:20:43,560
action creates a here so first of all

00:20:41,700 --> 00:20:45,270
those user which will take a an

00:20:43,560 --> 00:20:48,090
arguments like the user name and will

00:20:45,270 --> 00:20:51,180
return the reaction object so the type

00:20:48,090 --> 00:20:54,300
being imported from the map here and

00:20:51,180 --> 00:20:57,360
then the user name from the from the

00:20:54,300 --> 00:20:59,640
arguments that's pretty simple okay but

00:20:57,360 --> 00:21:01,740
if you have let's say ten actions in the

00:20:59,640 --> 00:21:03,300
same file it gets big and you have kind

00:21:01,740 --> 00:21:05,910
of a duplicate so you have loads user

00:21:03,300 --> 00:21:07,530
load user then you could have other

00:21:05,910 --> 00:21:09,210
actions that you would have as a

00:21:07,530 --> 00:21:11,520
duplicate again and also if you're

00:21:09,210 --> 00:21:14,310
trying to actually trace back like

00:21:11,520 --> 00:21:16,530
you're trying to debug your your relax

00:21:14,310 --> 00:21:18,240
management's it's much harder to debug

00:21:16,530 --> 00:21:19,320
when you have two to two different

00:21:18,240 --> 00:21:20,910
things because you have to do like an

00:21:19,320 --> 00:21:22,290
overall search in your project every

00:21:20,910 --> 00:21:25,200
single time we've had this issue over

00:21:22,290 --> 00:21:27,750
and over again add variety again cool so

00:21:25,200 --> 00:21:30,330
how can we tackle that in a very simple

00:21:27,750 --> 00:21:32,970
way with gedit and that's a pretty

00:21:30,330 --> 00:21:35,700
simple so it's just called a typed

00:21:32,970 --> 00:21:39,420
action in creator and what this does is

00:21:35,700 --> 00:21:42,120
just put the action name put the action

00:21:39,420 --> 00:21:45,840
creator so as the two arguments of the

00:21:42,120 --> 00:21:48,570
function and then your your type is

00:21:45,840 --> 00:21:50,550
actually a property of the action

00:21:48,570 --> 00:21:52,740
creator so load user here is not my

00:21:50,550 --> 00:21:56,130
action crater I can use it as a function

00:21:52,740 --> 00:21:58,830
to dispatch an action but it also has a

00:21:56,130 --> 00:22:01,590
type property which is just my string

00:21:58,830 --> 00:22:04,680
here very simple but it saves a lot of

00:22:01,590 --> 00:22:07,560
time of space and also like in your huge

00:22:04,680 --> 00:22:09,860
import statements so the real space very

00:22:07,560 --> 00:22:09,860
useful

00:22:10,070 --> 00:22:15,260
and last but not least how to handle

00:22:12,590 --> 00:22:18,050
errors so what's the best way of

00:22:15,260 --> 00:22:21,080
handling errors in any program Pro with

00:22:18,050 --> 00:22:23,150
a try-catch which no one likes basically

00:22:21,080 --> 00:22:24,920
it's still a little webpage you have to

00:22:23,150 --> 00:22:28,190
try your catch how to do something on

00:22:24,920 --> 00:22:30,320
every single catch it's very painful so

00:22:28,190 --> 00:22:31,700
the way we do that we're gets is you

00:22:30,320 --> 00:22:34,520
have an error wrapper which is a

00:22:31,700 --> 00:22:36,860
component exported by gannets you just

00:22:34,520 --> 00:22:39,770
put it at the very top of your component

00:22:36,860 --> 00:22:43,160
tree so for example just between your

00:22:39,770 --> 00:22:48,530
store provider and your router for

00:22:43,160 --> 00:22:50,300
example and then you can get a an action

00:22:48,530 --> 00:22:52,760
dispatcher in the props of any component

00:22:50,300 --> 00:22:56,240
and can just use this approach reports

00:22:52,760 --> 00:22:58,300
air with a new object and that's pretty

00:22:56,240 --> 00:23:02,210
much it then you have reported in there

00:22:58,300 --> 00:23:04,100
and the way you can handle this error is

00:23:02,210 --> 00:23:08,000
of course through Redux middlewares or

00:23:04,100 --> 00:23:09,620
state well reduce some so you can just

00:23:08,000 --> 00:23:11,360
get those errors and handle them it

00:23:09,620 --> 00:23:11,990
could be a spring a snack bar with an

00:23:11,360 --> 00:23:13,730
error message

00:23:11,990 --> 00:23:16,250
it could be sending them some some kind

00:23:13,730 --> 00:23:19,940
of sass debugging tool like century 4

00:23:16,250 --> 00:23:23,800
for example and that's just what

00:23:19,940 --> 00:23:26,420
one-liner just to to report an error

00:23:23,800 --> 00:23:30,380
even cooler if you're using a ridic saga

00:23:26,420 --> 00:23:32,360
which is a middleware for asynchronous

00:23:30,380 --> 00:23:34,870
operations with reader so for example

00:23:32,360 --> 00:23:38,530
fetching items from that from an API

00:23:34,870 --> 00:23:42,980
what you can do is just wrap your saga

00:23:38,530 --> 00:23:45,860
generator function you can just wrap it

00:23:42,980 --> 00:23:47,750
in the handle saga errors function and

00:23:45,860 --> 00:23:49,820
what this will do is just report an

00:23:47,750 --> 00:23:51,110
error every single time that you have an

00:23:49,820 --> 00:23:53,690
error which is throwing in your saga

00:23:51,110 --> 00:23:55,280
code so you can just completely remove

00:23:53,690 --> 00:23:59,480
all the try catches you have in that

00:23:55,280 --> 00:24:02,320
code - Josiah then you're good to go ok

00:23:59,480 --> 00:24:05,540
so that was just three quick use cases

00:24:02,320 --> 00:24:07,340
of just things that's we've had with

00:24:05,540 --> 00:24:09,650
trouble in the past are busy outs of

00:24:07,340 --> 00:24:11,090
boilerplate sort of errors performance

00:24:09,650 --> 00:24:13,640
issues as well that's we've managed to

00:24:11,090 --> 00:24:17,480
tackle and that's we've put into an open

00:24:13,640 --> 00:24:20,570
source project so in to get adds ok

00:24:17,480 --> 00:24:23,210
but what's next now well get is still

00:24:20,570 --> 00:24:25,159
very very very

00:24:23,210 --> 00:24:27,020
stage it's very useful we use all of

00:24:25,159 --> 00:24:28,940
those features in Persian or almost all

00:24:27,020 --> 00:24:31,700
of those we use them in oppression we've

00:24:28,940 --> 00:24:36,200
been doing that for maybe two months it

00:24:31,700 --> 00:24:41,240
works great but we can still do better

00:24:36,200 --> 00:24:43,850
so apart from what I just showed you

00:24:41,240 --> 00:24:47,210
there's a lot more to discover there's a

00:24:43,850 --> 00:24:50,450
whole parts with with specific standards

00:24:47,210 --> 00:24:52,190
of api's there's a part where the direct

00:24:50,450 --> 00:24:55,070
web as well this was just for recognize

00:24:52,190 --> 00:24:56,840
'iv and there are just some other quick

00:24:55,070 --> 00:24:58,779
things that's I haven't showed because

00:24:56,840 --> 00:25:01,549
it normally have time to show everything

00:24:58,779 --> 00:25:03,409
what we're going to work on from now is

00:25:01,549 --> 00:25:05,270
more typing's if you're using typescript

00:25:03,409 --> 00:25:07,279
to make sure that you can be extremely

00:25:05,270 --> 00:25:10,159
type safe with all your register and

00:25:07,279 --> 00:25:11,630
redux patents more documentation to make

00:25:10,159 --> 00:25:13,130
sure you can actually use everything in

00:25:11,630 --> 00:25:14,240
get ads and you know exactly how it

00:25:13,130 --> 00:25:17,029
works

00:25:14,240 --> 00:25:19,309
and basically every time we're gonna

00:25:17,029 --> 00:25:21,260
have a permit birthday we and we

00:25:19,309 --> 00:25:23,929
actually match to Tucker it's a cool way

00:25:21,260 --> 00:25:26,840
we'll just put it in get ads so yeah

00:25:23,929 --> 00:25:28,730
just are an experiment solves and when

00:25:26,840 --> 00:25:31,399
it's your next firm solves so if you

00:25:28,730 --> 00:25:33,110
guys have any other things that you've

00:25:31,399 --> 00:25:34,460
had trouble in the past using recogniz

00:25:33,110 --> 00:25:36,559
of using Riddick's or even just wrecked

00:25:34,460 --> 00:25:38,000
web and that's sure you commit with a

00:25:36,559 --> 00:25:40,010
cool solution that doesn't have an open

00:25:38,000 --> 00:25:43,039
source solution for feel free to open

00:25:40,010 --> 00:25:45,080
the pr i'll put the link in in a second

00:25:43,039 --> 00:25:46,309
everything's open source so we are very

00:25:45,080 --> 00:25:49,970
open to PRS

00:25:46,309 --> 00:25:52,460
we really encourage that and yeah here's

00:25:49,970 --> 00:25:55,039
the link to the repo says github.com

00:25:52,460 --> 00:25:57,669
/cam adventures I wish you the startup

00:25:55,039 --> 00:26:00,610
studio we're working with slash cadets

00:25:57,669 --> 00:26:07,330
and yeah feel free to explore the codes

00:26:00,610 --> 00:26:07,330
trophy to open the PR and yeah thank you

00:26:10,520 --> 00:26:12,580

YouTube URL: https://www.youtube.com/watch?v=yXQbQ6Dhye8


