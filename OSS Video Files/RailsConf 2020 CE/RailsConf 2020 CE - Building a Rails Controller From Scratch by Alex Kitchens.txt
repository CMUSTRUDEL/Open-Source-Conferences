Title: RailsConf 2020 CE - Building a Rails Controller From Scratch by Alex Kitchens
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Building a Rails Controller From Scratch by Alex Kitchens


If you replaced ActionController with an implementation of your own, what would you have to build to get your app working again? In this talk, we'll do just that. We'll see how the controller interacts with the router to receive a request, process it, and return a response. We'll also rebuild controller features like Params, Controller Callbacks, and Rendering. In the end, we'll have a new functioning controller class called AwesomeController, and we will have seen what it takes to process a request in Rails.

__________

Alex Kitchens (@alexcameron89) is a software engineer at Stitch Fix, where he gets to embrace his love of Rails as a backend developer.
Captions: 
	00:00:09,000 --> 00:00:13,680
hey thanks for checking out my talk I'm

00:00:11,400 --> 00:00:14,820
Alex kitchens recording from home and

00:00:13,680 --> 00:00:17,369
today we're going to build a rails

00:00:14,820 --> 00:00:19,560
controller from scratch we'll go about

00:00:17,369 --> 00:00:24,150
it this way I have a really simple rails

00:00:19,560 --> 00:00:27,449
blog with a really simple model it has

00:00:24,150 --> 00:00:29,910
two basic controllers both for posts the

00:00:27,449 --> 00:00:32,489
first one is a web version and the

00:00:29,910 --> 00:00:33,750
second is an API version well if I'm a

00:00:32,489 --> 00:00:36,120
test suite to ensure that they're

00:00:33,750 --> 00:00:38,280
working correctly this is what we're

00:00:36,120 --> 00:00:40,260
going to do we're going to replace the

00:00:38,280 --> 00:00:42,540
inheritance of our controllers from

00:00:40,260 --> 00:00:45,180
action from inheriting from action

00:00:42,540 --> 00:00:47,850
controller to inheriting from an

00:00:45,180 --> 00:00:49,649
implementation of our own then we'll see

00:00:47,850 --> 00:00:51,180
well we have to build an action

00:00:49,649 --> 00:00:54,090
controllers place to get the app working

00:00:51,180 --> 00:00:56,280
correctly again we'll build two

00:00:54,090 --> 00:00:57,899
controller based classes awesome

00:00:56,280 --> 00:00:59,820
controller base which is a replacement

00:00:57,899 --> 00:01:01,980
for action controller base that will

00:00:59,820 --> 00:01:04,410
respond to web specific requests an

00:01:01,980 --> 00:01:06,479
awesome controller API which is a

00:01:04,410 --> 00:01:09,000
replacement for action controller API if

00:01:06,479 --> 00:01:11,340
you've never used action controller API

00:01:09,000 --> 00:01:13,080
is a stripped down version of a stripped

00:01:11,340 --> 00:01:16,020
down controller class that rails

00:01:13,080 --> 00:01:19,380
provides to respond to non web requests

00:01:16,020 --> 00:01:20,820
like JSON at the end of this talk I'll

00:01:19,380 --> 00:01:22,409
share a link to where you can see the

00:01:20,820 --> 00:01:23,820
code I've written and you can play

00:01:22,409 --> 00:01:26,729
around with it next to the real action

00:01:23,820 --> 00:01:28,380
controller the code written in this talk

00:01:26,729 --> 00:01:30,299
is not meant to reinvent the wheel and

00:01:28,380 --> 00:01:32,939
it will sort of mimic the code of action

00:01:30,299 --> 00:01:34,409
controller my intention with this is to

00:01:32,939 --> 00:01:36,060
give you an insight into the real code

00:01:34,409 --> 00:01:38,130
of action controller while taking

00:01:36,060 --> 00:01:40,860
freedom to simplify it for learning sake

00:01:38,130 --> 00:01:42,570
in the end we'll have two controller

00:01:40,860 --> 00:01:45,470
classes that collectively handle four

00:01:42,570 --> 00:01:48,390
things or other four modules in

00:01:45,470 --> 00:01:51,479
comparison action controller API has 15

00:01:48,390 --> 00:01:54,810
modules an action controller base has a

00:01:51,479 --> 00:01:57,630
total of 35 modules so clearly that this

00:01:54,810 --> 00:02:00,840
is a very minimal happy version path but

00:01:57,630 --> 00:02:02,250
by doing so by building something like

00:02:00,840 --> 00:02:05,369
this it will help us understand the

00:02:02,250 --> 00:02:06,990
inner workings of action controller this

00:02:05,369 --> 00:02:08,310
talk was originally brought on because I

00:02:06,990 --> 00:02:10,619
realized that I don't know a whole lot

00:02:08,310 --> 00:02:12,269
about what a controller actually does I

00:02:10,619 --> 00:02:14,760
got the basic concepts of a rails

00:02:12,269 --> 00:02:15,959
request force response process but that

00:02:14,760 --> 00:02:18,300
was pretty minimal

00:02:15,959 --> 00:02:20,340
this is what I knew when a request comes

00:02:18,300 --> 00:02:21,190
in at some point it hits the controller

00:02:20,340 --> 00:02:24,970
and then in return

00:02:21,190 --> 00:02:26,680
responds with an exclamation like that

00:02:24,970 --> 00:02:28,570
and I realized that I knew very little

00:02:26,680 --> 00:02:32,050
about how our controller receives a

00:02:28,570 --> 00:02:35,170
request or how processes that requester

00:02:32,050 --> 00:02:36,790
created a response most of my time with

00:02:35,170 --> 00:02:40,000
controllers has been spent dealing with

00:02:36,790 --> 00:02:41,380
writing actions like this thanks to the

00:02:40,000 --> 00:02:43,090
conventions and hard work of action

00:02:41,380 --> 00:02:45,600
controller the controller has always

00:02:43,090 --> 00:02:48,460
been a really easy part of rails apps

00:02:45,600 --> 00:02:50,260
but my lack of knowledge here and my

00:02:48,460 --> 00:02:53,320
general curiosities will inspire this

00:02:50,260 --> 00:02:56,590
experiment so here we are we've got our

00:02:53,320 --> 00:02:58,830
new inheritances and we have our new

00:02:56,590 --> 00:03:01,450
empty based classes that look like this

00:02:58,830 --> 00:03:03,370
and we've got a whole load of test

00:03:01,450 --> 00:03:05,140
failures this is where I started my

00:03:03,370 --> 00:03:07,570
journey what do we have to do to get

00:03:05,140 --> 00:03:09,220
this test suite back to green there's a

00:03:07,570 --> 00:03:11,290
lot of test failures but the most common

00:03:09,220 --> 00:03:14,380
is this an undefined method called

00:03:11,290 --> 00:03:15,820
dispatch for both controller classes it

00:03:14,380 --> 00:03:17,320
turns out it's coming from when the

00:03:15,820 --> 00:03:19,750
router sends the request to the

00:03:17,320 --> 00:03:21,670
controller the router gives the

00:03:19,750 --> 00:03:24,550
controller the request in return and

00:03:21,670 --> 00:03:26,739
expects the details of the response from

00:03:24,550 --> 00:03:28,989
the controller it does this by calling

00:03:26,739 --> 00:03:31,890
dispatch on the controller class our

00:03:28,989 --> 00:03:34,150
controller doesn't have this method yet

00:03:31,890 --> 00:03:36,760
here's the actual line of code in the

00:03:34,150 --> 00:03:38,260
router that where it was failing when

00:03:36,760 --> 00:03:40,480
the router calls dispatch on the

00:03:38,260 --> 00:03:43,239
controller it provides it with three

00:03:40,480 --> 00:03:45,459
things the first is the action that the

00:03:43,239 --> 00:03:47,020
controller should call and the action is

00:03:45,459 --> 00:03:51,489
in the form of a string for instance

00:03:47,020 --> 00:03:53,290
show the second is a request object this

00:03:51,489 --> 00:03:55,900
object is essentially a wrapper around

00:03:53,290 --> 00:03:58,030
the details of the request the details

00:03:55,900 --> 00:04:00,340
of the request live in a hash that looks

00:03:58,030 --> 00:04:02,380
like this giving you details on like the

00:04:00,340 --> 00:04:05,380
path info parameters and other data

00:04:02,380 --> 00:04:07,989
provided by the original request the

00:04:05,380 --> 00:04:09,820
last piece is an empty response object

00:04:07,989 --> 00:04:13,989
that makes it easy to get and set data

00:04:09,820 --> 00:04:16,299
for the response the the router provides

00:04:13,989 --> 00:04:18,700
all of that information and in return it

00:04:16,299 --> 00:04:21,040
needs to know these three things from

00:04:18,700 --> 00:04:24,940
the dispatch method the status code

00:04:21,040 --> 00:04:26,590
headers and body of the response this

00:04:24,940 --> 00:04:29,350
information will come from the response

00:04:26,590 --> 00:04:30,940
object that the router gave to us and

00:04:29,350 --> 00:04:33,669
the response object comes with some

00:04:30,940 --> 00:04:34,860
defaults for each of these notably a 200

00:04:33,669 --> 00:04:38,340
status code in

00:04:34,860 --> 00:04:41,490
body the response has a handy way of

00:04:38,340 --> 00:04:43,949
getting that data if I call the two

00:04:41,490 --> 00:04:45,509
array method on the response then it

00:04:43,949 --> 00:04:48,330
will give me these details that I need

00:04:45,509 --> 00:04:50,520
to return knowing that this is the point

00:04:48,330 --> 00:04:52,800
of failure we can start to build out our

00:04:50,520 --> 00:04:55,289
implementation I've defined a class

00:04:52,800 --> 00:04:57,569
method called dispatch taking in the

00:04:55,289 --> 00:04:59,639
arguments from the router and I use the

00:04:57,569 --> 00:05:02,580
response to send back the status code

00:04:59,639 --> 00:05:03,900
headers and body of the response this

00:05:02,580 --> 00:05:05,729
supplies us with the start of our

00:05:03,900 --> 00:05:07,289
implementation of dispatching the

00:05:05,729 --> 00:05:10,500
request of the controller and returning

00:05:07,289 --> 00:05:12,330
response now because this method is

00:05:10,500 --> 00:05:14,270
needed for both the API and base

00:05:12,330 --> 00:05:16,860
controller classes I've implemented it

00:05:14,270 --> 00:05:18,960
instead in a superclass for them to

00:05:16,860 --> 00:05:22,560
inherit from and I've named it super

00:05:18,960 --> 00:05:23,789
base with the base classes inheriting

00:05:22,560 --> 00:05:26,639
from it they'll share this

00:05:23,789 --> 00:05:28,439
implementation and this code fixes the

00:05:26,639 --> 00:05:31,919
fact that dispatch has an undefined

00:05:28,439 --> 00:05:34,439
method we can rerun the tests which will

00:05:31,919 --> 00:05:36,930
continue to fail but for many other

00:05:34,439 --> 00:05:39,000
reasons we'll start with this easy one a

00:05:36,930 --> 00:05:42,389
failure due to an empty response body

00:05:39,000 --> 00:05:44,069
from our API the response is empty

00:05:42,389 --> 00:05:46,800
because we're providing the default

00:05:44,069 --> 00:05:48,270
empty body of the response object which

00:05:46,800 --> 00:05:50,339
is good this means that our method is

00:05:48,270 --> 00:05:53,190
being called in our empty responses

00:05:50,339 --> 00:05:54,990
returning its data we still have not

00:05:53,190 --> 00:05:57,020
called our action so there's nothing to

00:05:54,990 --> 00:06:00,060
process or render that's our next step

00:05:57,020 --> 00:06:02,729
we have our action method name as a

00:06:00,060 --> 00:06:04,710
string provided by the router and we

00:06:02,729 --> 00:06:07,050
need to call that from in here wait

00:06:04,710 --> 00:06:09,060
there's a little problem our dispatch

00:06:07,050 --> 00:06:11,189
method is at the class level of the

00:06:09,060 --> 00:06:13,729
controller but the show method in our

00:06:11,189 --> 00:06:16,199
controller is an instance method a

00:06:13,729 --> 00:06:17,939
simple way to fix this is to move the

00:06:16,199 --> 00:06:20,219
main dispatch functionality to an

00:06:17,939 --> 00:06:22,860
instance dispatch method and simply

00:06:20,219 --> 00:06:25,099
delegate it delegate to it through a new

00:06:22,860 --> 00:06:27,419
controller instance in the class method

00:06:25,099 --> 00:06:29,550
this was an important note for me

00:06:27,419 --> 00:06:31,740
because at one point I had a light bulb

00:06:29,550 --> 00:06:33,689
moment and realized that at anytime I'm

00:06:31,740 --> 00:06:35,430
interacting with the controller in lamps

00:06:33,689 --> 00:06:37,409
like say in an action method i'm

00:06:35,430 --> 00:06:42,539
typically interacting with an instance

00:06:37,409 --> 00:06:45,620
of that class so we have this instance

00:06:42,539 --> 00:06:47,270
method of dispatch

00:06:45,620 --> 00:06:49,490
we have a new instance we can save the

00:06:47,270 --> 00:06:52,400
arguments as instance methods so that we

00:06:49,490 --> 00:06:54,320
can access them whenever we need to this

00:06:52,400 --> 00:06:56,660
will be helpful since the controller's

00:06:54,320 --> 00:07:00,729
role involves processing requests and

00:06:56,660 --> 00:07:02,930
response now we need to call our action

00:07:00,729 --> 00:07:04,699
Ruby is a couple of ways of calling a

00:07:02,930 --> 00:07:07,820
method say we have a class called

00:07:04,699 --> 00:07:11,120
greeting and it has an instance method

00:07:07,820 --> 00:07:14,240
hello and we have an instance of that

00:07:11,120 --> 00:07:16,669
class we can call in a familiar way the

00:07:14,240 --> 00:07:19,610
dot method format which is here is

00:07:16,669 --> 00:07:22,729
greeting dot hello this will call the

00:07:19,610 --> 00:07:24,340
method return the expected string hello

00:07:22,729 --> 00:07:27,260
how are you today

00:07:24,340 --> 00:07:29,930
ruby has another way to send the method

00:07:27,260 --> 00:07:31,850
which is using the CIN method if we

00:07:29,930 --> 00:07:33,650
supply the CIN method with the name of

00:07:31,850 --> 00:07:35,930
the method we want to call either as a

00:07:33,650 --> 00:07:38,560
string or a symbol it will call the

00:07:35,930 --> 00:07:41,660
method doing this again we'll call it

00:07:38,560 --> 00:07:45,440
and return the expected string hello how

00:07:41,660 --> 00:07:48,220
are you today so knowing this we can use

00:07:45,440 --> 00:07:51,169
the CIN method here to call the action

00:07:48,220 --> 00:07:53,210
and this gives us what we want from the

00:07:51,169 --> 00:07:56,270
dispatch method with this collective

00:07:53,210 --> 00:07:58,310
code we have now have Basin API

00:07:56,270 --> 00:08:00,800
controller classes responding to router

00:07:58,310 --> 00:08:02,810
requests calling the actions and our

00:08:00,800 --> 00:08:04,849
controllers and returning the status

00:08:02,810 --> 00:08:07,940
headers and body of our response to the

00:08:04,849 --> 00:08:10,130
router and because we are dispatching

00:08:07,940 --> 00:08:12,919
requests correctly to our controllers we

00:08:10,130 --> 00:08:15,560
still have failures but they're new

00:08:12,919 --> 00:08:18,560
failures here are two from the API

00:08:15,560 --> 00:08:22,039
controller both undefined one for params

00:08:18,560 --> 00:08:23,419
and one for render well if they do the

00:08:22,039 --> 00:08:26,150
fact that our controllers reference

00:08:23,419 --> 00:08:28,810
params and render but our base classes

00:08:26,150 --> 00:08:31,010
don't have an implementation of either

00:08:28,810 --> 00:08:34,070
we'll start with implementing frames

00:08:31,010 --> 00:08:36,349
frames is a nice abstraction that action

00:08:34,070 --> 00:08:38,570
controller provides for accessing the

00:08:36,349 --> 00:08:41,240
parameters of requests allowing you to

00:08:38,570 --> 00:08:43,789
grab some directly require some data in

00:08:41,240 --> 00:08:47,660
the params or permit attributes to be

00:08:43,789 --> 00:08:51,589
passed in on to models or classes the

00:08:47,660 --> 00:08:54,220
request stores priam information on

00:08:51,589 --> 00:08:56,510
itself in a hash within different access

00:08:54,220 --> 00:08:58,630
here are the params for calling the show

00:08:56,510 --> 00:09:03,700
endpoint for an API within

00:08:58,630 --> 00:09:05,170
request these two uses of premiums occur

00:09:03,700 --> 00:09:06,850
throughout our apps controller so we

00:09:05,170 --> 00:09:09,580
have two crores modeling failures for

00:09:06,850 --> 00:09:11,530
prints for the first failure given that

00:09:09,580 --> 00:09:14,680
the request provides parameters in a

00:09:11,530 --> 00:09:18,130
hash we're in luck for this simply

00:09:14,680 --> 00:09:19,900
pulling an ID from that hash slices if

00:09:18,130 --> 00:09:21,340
we want to get the params for that kind

00:09:19,900 --> 00:09:24,700
of method we can simply write a method

00:09:21,340 --> 00:09:29,110
like this I put this method into a

00:09:24,700 --> 00:09:31,120
params module this module can be

00:09:29,110 --> 00:09:34,300
included in our base controller classes

00:09:31,120 --> 00:09:36,160
like this now this begs the question

00:09:34,300 --> 00:09:39,340
well I put the code into a module and

00:09:36,160 --> 00:09:42,180
not directly into our our classes or

00:09:39,340 --> 00:09:45,820
controller base classes or super base

00:09:42,180 --> 00:09:47,920
the main reason is I put it I put it

00:09:45,820 --> 00:09:51,250
into a module because modules allow the

00:09:47,920 --> 00:09:53,290
ability to create code boundaries my API

00:09:51,250 --> 00:09:55,900
class wants to know what it means to be

00:09:53,290 --> 00:09:58,390
an API does it need to know about params

00:09:55,900 --> 00:10:00,340
sure and I could include the code there

00:09:58,390 --> 00:10:03,250
but should it be responsible for those

00:10:00,340 --> 00:10:04,810
details probably not by providing a

00:10:03,250 --> 00:10:06,910
params module I'm saying that these

00:10:04,810 --> 00:10:09,460
methods and this code provides behavior

00:10:06,910 --> 00:10:11,410
related to params this allows me to

00:10:09,460 --> 00:10:14,050
include it in my API controller class

00:10:11,410 --> 00:10:17,050
extending that functionality and focus

00:10:14,050 --> 00:10:18,850
solely on creating methods in my my base

00:10:17,050 --> 00:10:21,210
class or super base class that are

00:10:18,850 --> 00:10:24,700
direct responsibilities of that class

00:10:21,210 --> 00:10:27,040
this is using module is another way of

00:10:24,700 --> 00:10:29,380
sharing code well if the API and base

00:10:27,040 --> 00:10:32,830
classes will include this module and its

00:10:29,380 --> 00:10:36,400
functionality our module and its methods

00:10:32,830 --> 00:10:40,300
pass our first params test but our use

00:10:36,400 --> 00:10:42,070
of strong parameters is still failing we

00:10:40,300 --> 00:10:45,190
need a better implementation in order to

00:10:42,070 --> 00:10:48,010
make a call to params like this work one

00:10:45,190 --> 00:10:50,490
that takes parameters like this ensures

00:10:48,010 --> 00:10:54,450
that the required actor beads exist and

00:10:50,490 --> 00:10:57,550
filters out unpermitted at attributes

00:10:54,450 --> 00:10:59,830
because repot require and permit are not

00:10:57,550 --> 00:11:02,260
methods that exist for hashing within

00:10:59,830 --> 00:11:04,890
different access we need to create an

00:11:02,260 --> 00:11:08,020
abstraction over the request params hash

00:11:04,890 --> 00:11:08,889
in order to keep our current version

00:11:08,020 --> 00:11:11,170
work

00:11:08,889 --> 00:11:14,470
version happy we can write something

00:11:11,170 --> 00:11:18,100
like this basically what we have here is

00:11:14,470 --> 00:11:19,899
a new parameters class it's initialized

00:11:18,100 --> 00:11:22,480
by storing the parameters hash as an

00:11:19,899 --> 00:11:25,419
instance variable and we write the hash

00:11:22,480 --> 00:11:28,899
access method to pull from a params

00:11:25,419 --> 00:11:31,230
instance variable then our params method

00:11:28,899 --> 00:11:33,910
simply returns a new parameters object

00:11:31,230 --> 00:11:37,689
this provides us with the curt with our

00:11:33,910 --> 00:11:40,839
current we expected needs our next step

00:11:37,689 --> 00:11:44,259
is to implement require when we call

00:11:40,839 --> 00:11:47,319
require we're saying this thing here

00:11:44,259 --> 00:11:50,529
being post must be in the top level of

00:11:47,319 --> 00:11:53,980
the params hash and if it is return its

00:11:50,529 --> 00:11:56,259
values if the item that we're requiring

00:11:53,980 --> 00:11:59,649
is not there like say we required author

00:11:56,259 --> 00:12:03,309
for this hash and it should raise an

00:11:59,649 --> 00:12:05,379
error this is a lot like hashes fetch

00:12:03,309 --> 00:12:06,850
method where if the key is provided it

00:12:05,379 --> 00:12:09,189
returns the data for that key and if

00:12:06,850 --> 00:12:10,959
it's not then it raises an error to get

00:12:09,189 --> 00:12:14,559
a basic working implementation we can

00:12:10,959 --> 00:12:16,779
implement this method using fetch that

00:12:14,559 --> 00:12:18,730
may look like this but we need to make

00:12:16,779 --> 00:12:22,619
sure that what it returns can also

00:12:18,730 --> 00:12:25,119
respond to permit this is as simple as

00:12:22,619 --> 00:12:30,249
wrapping the results of the fetch in an

00:12:25,119 --> 00:12:32,529
instance of parameters this gets us to a

00:12:30,249 --> 00:12:36,069
working functionality for require next

00:12:32,529 --> 00:12:38,079
we need to implement permit similar to

00:12:36,069 --> 00:12:40,029
require thinking about what permit does

00:12:38,079 --> 00:12:41,649
it says these are the attributes that

00:12:40,029 --> 00:12:43,779
you're allowed to pass him and if you

00:12:41,649 --> 00:12:47,379
provide something else we will filter it

00:12:43,779 --> 00:12:50,079
out if we took this hash and said only

00:12:47,379 --> 00:12:52,839
permit the title then it should return a

00:12:50,079 --> 00:12:54,519
hash containing only the title we're

00:12:52,839 --> 00:12:57,069
implementing this since we're passing in

00:12:54,519 --> 00:12:59,049
an array of attributes we can find them

00:12:57,069 --> 00:13:01,749
the method to take in an array of

00:12:59,049 --> 00:13:03,819
attributes and in the method we can use

00:13:01,749 --> 00:13:06,039
Ruby select method to filter the params

00:13:03,819 --> 00:13:09,669
where the key belongs in that list

00:13:06,039 --> 00:13:11,699
looking like this and like that we have

00:13:09,669 --> 00:13:13,809
a passing implementation of France our

00:13:11,699 --> 00:13:16,419
encode looks something like this with

00:13:13,809 --> 00:13:20,799
direct access require and permit

00:13:16,419 --> 00:13:22,630
implemented and this leaves us with our

00:13:20,799 --> 00:13:25,540
render failure for our API

00:13:22,630 --> 00:13:27,880
spec's in an in order to reproduce

00:13:25,540 --> 00:13:29,830
render let's think of what it means in

00:13:27,880 --> 00:13:31,750
terms of updating our response object

00:13:29,830 --> 00:13:34,270
and what the response object will return

00:13:31,750 --> 00:13:36,700
to the router we know that we want this

00:13:34,270 --> 00:13:39,700
hash to be the body of the response in a

00:13:36,700 --> 00:13:41,770
json encoded stream and we want the

00:13:39,700 --> 00:13:44,650
provided status to be the status code of

00:13:41,770 --> 00:13:46,180
the response since this is a json

00:13:44,650 --> 00:13:48,630
response we also want to update the

00:13:46,180 --> 00:13:50,770
content type to be json in the headers

00:13:48,630 --> 00:13:52,960
this means that in our render

00:13:50,770 --> 00:13:54,760
implementation we need to supply the

00:13:52,960 --> 00:13:58,450
response object with these three things

00:13:54,760 --> 00:14:01,660
the status the contact content type and

00:13:58,450 --> 00:14:05,500
body this code can become in the

00:14:01,660 --> 00:14:08,160
beginning of our rendering module we can

00:14:05,500 --> 00:14:10,360
start implementing the the status code

00:14:08,160 --> 00:14:12,040
the status is not something we always

00:14:10,360 --> 00:14:14,590
set when rendering json for instance

00:14:12,040 --> 00:14:17,380
here when we're enduring the json for a

00:14:14,590 --> 00:14:19,210
single post i don't specify a status

00:14:17,380 --> 00:14:22,540
code and instead depend on the default

00:14:19,210 --> 00:14:24,160
200 status code for the response since

00:14:22,540 --> 00:14:28,450
status will always be provided we can

00:14:24,160 --> 00:14:30,520
set this as an optional argument and if

00:14:28,450 --> 00:14:32,470
the argument is provided then we can set

00:14:30,520 --> 00:14:33,630
the status on the response it's as

00:14:32,470 --> 00:14:36,100
simple as that

00:14:33,630 --> 00:14:38,800
we don't actually have to worry about if

00:14:36,100 --> 00:14:42,670
we've set the status as symbol or the

00:14:38,800 --> 00:14:44,230
actual status code number either works

00:14:42,670 --> 00:14:46,420
because when the status is set on the

00:14:44,230 --> 00:14:48,450
response object the response object uses

00:14:46,420 --> 00:14:50,790
a mapper provided by Rach that

00:14:48,450 --> 00:14:55,300
translates the symbol to its integer

00:14:50,790 --> 00:14:57,100
status code next setting the content

00:14:55,300 --> 00:14:59,550
type is as easy as using the content

00:14:57,100 --> 00:15:03,310
types that are provided by the response

00:14:59,550 --> 00:15:05,620
lastly we need to set the body we need

00:15:03,310 --> 00:15:08,560
to take this hash and turn it into a

00:15:05,620 --> 00:15:12,160
JSON string like this this is as easy as

00:15:08,560 --> 00:15:15,490
calling to JSON on the hash and we can

00:15:12,160 --> 00:15:18,730
set on the response like this this makes

00:15:15,490 --> 00:15:21,070
the body setting look like this and like

00:15:18,730 --> 00:15:24,670
that we have a working render method in

00:15:21,070 --> 00:15:27,760
our API we can include this into the API

00:15:24,670 --> 00:15:29,860
class and with our params and rendering

00:15:27,760 --> 00:15:31,990
modules defined along with dispatching

00:15:29,860 --> 00:15:35,170
for our controllers we have a working

00:15:31,990 --> 00:15:37,389
implementation of awesome controller API

00:15:35,170 --> 00:15:40,509
this means we finally have our API test

00:15:37,389 --> 00:15:44,049
passing and it's processing JSON

00:15:40,509 --> 00:15:45,639
responses just as it had before this

00:15:44,049 --> 00:15:48,519
leaves us with the web portion of the

00:15:45,639 --> 00:15:51,639
application to tackle there's a lot of

00:15:48,519 --> 00:15:55,019
complexity to rendering web web requests

00:15:51,639 --> 00:15:58,209
that API requests may not typically have

00:15:55,019 --> 00:16:00,519
for starters the web controllers of the

00:15:58,209 --> 00:16:02,139
app failed because we did not have an

00:16:00,519 --> 00:16:04,929
implementation of controller callbacks

00:16:02,139 --> 00:16:06,759
like before action they also failed

00:16:04,929 --> 00:16:11,319
because nothing was rendering just like

00:16:06,759 --> 00:16:12,910
in our API the rendering issue is due to

00:16:11,319 --> 00:16:15,009
the fact that in our web controllers

00:16:12,910 --> 00:16:17,259
we're not calling render explicitly like

00:16:15,009 --> 00:16:19,689
we were in the API controllers so what

00:16:17,259 --> 00:16:24,309
we've built for our API will not work in

00:16:19,689 --> 00:16:26,350
our web requests this meant that I

00:16:24,309 --> 00:16:28,179
needed two new features controller

00:16:26,350 --> 00:16:31,059
callbacks and a thing called an implicit

00:16:28,179 --> 00:16:33,100
rendering controller callbacks are the

00:16:31,059 --> 00:16:34,929
easier concept to start out with they

00:16:33,100 --> 00:16:38,499
allow you to run certain methods before

00:16:34,929 --> 00:16:40,449
after around actions they are similar to

00:16:38,499 --> 00:16:42,699
how callbacks can be set for active

00:16:40,449 --> 00:16:46,029
record models this similarity isn't a

00:16:42,699 --> 00:16:48,639
coincidence both types of callbacks take

00:16:46,029 --> 00:16:50,739
advantage of a built-in Rails callback

00:16:48,639 --> 00:16:54,759
functionality provided through active

00:16:50,739 --> 00:16:57,639
support called callbacks the active

00:16:54,759 --> 00:16:59,919
support callbacks API has three major

00:16:57,639 --> 00:17:02,230
features the first is defining a

00:16:59,919 --> 00:17:03,489
callback set this will allow us to

00:17:02,230 --> 00:17:06,250
define a set of callbacks

00:17:03,489 --> 00:17:07,899
specific to controllers once we have a

00:17:06,250 --> 00:17:10,120
callback set the next feature allows us

00:17:07,899 --> 00:17:11,350
to add callbacks to it and the last

00:17:10,120 --> 00:17:14,199
feature is actually running the

00:17:11,350 --> 00:17:16,000
callbacks action controller and active

00:17:14,199 --> 00:17:17,380
record provide abstractions so that we

00:17:16,000 --> 00:17:19,899
only have to do one of these things in

00:17:17,380 --> 00:17:22,959
our controllers and models which is

00:17:19,899 --> 00:17:24,429
adding a callback to the set this is

00:17:22,959 --> 00:17:27,250
what happens when your controller has it

00:17:24,429 --> 00:17:29,440
before action but even then the method

00:17:27,250 --> 00:17:31,990
before action is a controller method in

00:17:29,440 --> 00:17:35,080
abstraction over that active support API

00:17:31,990 --> 00:17:37,299
which we'll see we'll start by creating

00:17:35,080 --> 00:17:39,250
our callbacks module including the

00:17:37,299 --> 00:17:42,130
active support callbacks module in our

00:17:39,250 --> 00:17:45,070
module so that we can use its behavior

00:17:42,130 --> 00:17:46,980
when you define a callback set which

00:17:45,070 --> 00:17:49,660
we'll name here controller callbacks

00:17:46,980 --> 00:17:52,000
next since we have a set we want to add

00:17:49,660 --> 00:17:54,010
our callbacks to that set and that takes

00:17:52,000 --> 00:17:57,910
the form of writing our before after an

00:17:54,010 --> 00:18:00,400
action around action methods will just

00:17:57,910 --> 00:18:02,440
use before action as an example in order

00:18:00,400 --> 00:18:04,810
to implement before action we need to

00:18:02,440 --> 00:18:08,560
set the callback using the callback api

00:18:04,810 --> 00:18:10,300
is set callback method here's an example

00:18:08,560 --> 00:18:12,250
of our before action and what the

00:18:10,300 --> 00:18:15,460
corresponding set callback call would

00:18:12,250 --> 00:18:18,280
look like in set callback we set the

00:18:15,460 --> 00:18:20,800
action in the write callback set set it

00:18:18,280 --> 00:18:23,950
as a before callback and set the

00:18:20,800 --> 00:18:27,370
provided method name from the before

00:18:23,950 --> 00:18:31,300
actions statement the method definition

00:18:27,370 --> 00:18:34,000
would look something like this in the

00:18:31,300 --> 00:18:35,860
end we would also have around and after

00:18:34,000 --> 00:18:38,170
action methods but their definitions

00:18:35,860 --> 00:18:41,590
only differ but before around and after

00:18:38,170 --> 00:18:44,320
keywords before we finish with callbacks

00:18:41,590 --> 00:18:46,060
we actually have to run them in order to

00:18:44,320 --> 00:18:48,940
do that let's think of it a high level

00:18:46,060 --> 00:18:52,000
about how callbacks are called we have

00:18:48,940 --> 00:18:54,370
our dispatch method and we know that

00:18:52,000 --> 00:18:56,560
before actions run before the action so

00:18:54,370 --> 00:18:59,980
let's create a fake method to call our

00:18:56,560 --> 00:19:01,750
before actions around actions run around

00:18:59,980 --> 00:19:04,570
the action yielding to it at some point

00:19:01,750 --> 00:19:07,330
and after actions run after the action

00:19:04,570 --> 00:19:10,270
this is essentially where callbacks run

00:19:07,330 --> 00:19:12,160
if we wanted to clean up the logic here

00:19:10,270 --> 00:19:14,140
we could extract the callback handling

00:19:12,160 --> 00:19:15,910
to one method and have an

00:19:14,140 --> 00:19:18,190
all-encompassing callbacks method like

00:19:15,910 --> 00:19:20,380
this where it calls the before actions

00:19:18,190 --> 00:19:23,890
around actions yields and then the after

00:19:20,380 --> 00:19:26,950
actions and we'd call that method in our

00:19:23,890 --> 00:19:29,830
controller instance like this this is

00:19:26,950 --> 00:19:32,160
exactly what run callbacks method does

00:19:29,830 --> 00:19:36,520
provided by active support callbacks

00:19:32,160 --> 00:19:38,380
this would run our callbacks except we

00:19:36,520 --> 00:19:40,180
have written our callbacks code into its

00:19:38,380 --> 00:19:42,760
own callbacks module and we want to

00:19:40,180 --> 00:19:44,140
continue to do that here in order to run

00:19:42,760 --> 00:19:46,000
the callbacks in this method without

00:19:44,140 --> 00:19:47,950
putting the code directly here in the

00:19:46,000 --> 00:19:50,320
method we need to have a place where we

00:19:47,950 --> 00:19:53,860
can hook our callbacks into this

00:19:50,320 --> 00:19:55,320
dispatch method we can provide a hook

00:19:53,860 --> 00:19:57,540
force in action by mu

00:19:55,320 --> 00:19:59,010
the selection into its own method in our

00:19:57,540 --> 00:20:02,250
base class and then calling it in

00:19:59,010 --> 00:20:05,430
dispatch here we define a process method

00:20:02,250 --> 00:20:09,720
whose job is to make it make that send

00:20:05,430 --> 00:20:11,940
action call then in our module we can

00:20:09,720 --> 00:20:14,040
define a process method which will run

00:20:11,940 --> 00:20:16,470
the callbacks and super on to the next

00:20:14,040 --> 00:20:18,570
thing this will work because when

00:20:16,470 --> 00:20:21,330
process is called in our awesome

00:20:18,570 --> 00:20:23,310
controller base it will first go to the

00:20:21,330 --> 00:20:26,340
process methods defined in the modules

00:20:23,310 --> 00:20:29,040
included in the class that will hit our

00:20:26,340 --> 00:20:31,590
callbacks process method which starts

00:20:29,040 --> 00:20:33,630
running called X then supers to the next

00:20:31,590 --> 00:20:36,960
definition of process which is the

00:20:33,630 --> 00:20:38,640
definition in our base class in the end

00:20:36,960 --> 00:20:42,120
this is what the code looks like for our

00:20:38,640 --> 00:20:43,980
callbacks module which we can include in

00:20:42,120 --> 00:20:45,510
our awesome controller base class and

00:20:43,980 --> 00:20:48,960
this gives us a working definition of

00:20:45,510 --> 00:20:51,780
callbacks in base this leaves us with

00:20:48,960 --> 00:20:53,880
our final poll on the web pages are not

00:20:51,780 --> 00:20:55,650
rendering anything they essentially look

00:20:53,880 --> 00:20:58,350
like this empty slide that's because

00:20:55,650 --> 00:20:59,790
they're not calling render we need to

00:20:58,350 --> 00:21:02,310
implement the concept of implicit

00:20:59,790 --> 00:21:03,720
rendering implicit or rendering means

00:21:02,310 --> 00:21:05,760
that you can have code like this in the

00:21:03,720 --> 00:21:07,440
controller never call render yet the

00:21:05,760 --> 00:21:10,950
response will still have a rendered body

00:21:07,440 --> 00:21:13,440
in order to implement this we need to

00:21:10,950 --> 00:21:15,960
know when calling send action render

00:21:13,440 --> 00:21:18,930
something and if it doesn't we need to

00:21:15,960 --> 00:21:20,580
perform a default kind of render here

00:21:18,930 --> 00:21:23,730
again we can take advantage of the new

00:21:20,580 --> 00:21:26,340
process method we can create an implicit

00:21:23,730 --> 00:21:30,630
rendering module that defines the method

00:21:26,340 --> 00:21:33,330
process and we want it to super or let

00:21:30,630 --> 00:21:35,820
other processes do their thing and when

00:21:33,330 --> 00:21:37,770
it comes back to this method and nothing

00:21:35,820 --> 00:21:41,310
has been rendered well then we will

00:21:37,770 --> 00:21:43,620
perform render what you do so by

00:21:41,310 --> 00:21:45,570
tracking when rendering has happened

00:21:43,620 --> 00:21:47,520
using an instance variable when

00:21:45,570 --> 00:21:50,550
rendering and setting it a true at the

00:21:47,520 --> 00:21:52,410
end of rendering in our implicit

00:21:50,550 --> 00:21:54,510
rendering module we can replace this to

00:21:52,410 --> 00:21:56,280
do with a check to see if wandering has

00:21:54,510 --> 00:21:58,620
happened using that new instance

00:21:56,280 --> 00:22:02,400
variable if it hasn't then we can call

00:21:58,620 --> 00:22:04,230
render I put the render as to do here

00:22:02,400 --> 00:22:07,140
because we have not built render for our

00:22:04,230 --> 00:22:08,809
action controller base the rendering

00:22:07,140 --> 00:22:11,299
here has a major dependency

00:22:08,809 --> 00:22:14,629
it's non-trivial to implement it was it

00:22:11,299 --> 00:22:17,230
which is actually rendering HTML HTML

00:22:14,629 --> 00:22:19,820
rendering is a very different beast

00:22:17,230 --> 00:22:21,919
where JSON rendering incorporates

00:22:19,820 --> 00:22:25,549
essentially this turning something into

00:22:21,919 --> 00:22:27,730
a JSON string for HTML rendering there

00:22:25,549 --> 00:22:30,999
may be several pieces to render one page

00:22:27,730 --> 00:22:33,559
this on our own would be a very big lift

00:22:30,999 --> 00:22:36,320
implement thankfully we don't have to

00:22:33,559 --> 00:22:38,210
take on that lift instead we can depend

00:22:36,320 --> 00:22:42,019
heavily on another rails module called

00:22:38,210 --> 00:22:44,840
action view action views what manages

00:22:42,019 --> 00:22:48,139
layouts templates and HTML rendering in

00:22:44,840 --> 00:22:50,330
rails specifically we can use a module

00:22:48,139 --> 00:22:52,460
an action view called rendering that

00:22:50,330 --> 00:22:54,499
provides some methods which when given

00:22:52,460 --> 00:22:57,889
the right arguments will do the heavy

00:22:54,499 --> 00:22:59,330
work to render the HTML getting the

00:22:57,889 --> 00:23:01,639
controller plugged into action view

00:22:59,330 --> 00:23:03,200
required a lot of configurations so

00:23:01,639 --> 00:23:04,669
instead of going through that I will

00:23:03,200 --> 00:23:08,179
share some of the highlights of what was

00:23:04,669 --> 00:23:09,860
required the first ones providing action

00:23:08,179 --> 00:23:12,200
view with the view paths for our

00:23:09,860 --> 00:23:14,690
controllers action view needs to know

00:23:12,200 --> 00:23:17,149
where the layouts and Tippett's live for

00:23:14,690 --> 00:23:19,429
our controller classes and because the

00:23:17,149 --> 00:23:20,659
views are the same as before we just

00:23:19,429 --> 00:23:24,169
tell action view that they live in at

00:23:20,659 --> 00:23:25,730
views next it needs to know the

00:23:24,169 --> 00:23:27,320
variables to the side of the view I

00:23:25,730 --> 00:23:29,210
thought this was specifically cool

00:23:27,320 --> 00:23:30,830
because it needs to pass on variables

00:23:29,210 --> 00:23:32,450
from the controller to the view and I'd

00:23:30,830 --> 00:23:35,330
wondered about how this works for a long

00:23:32,450 --> 00:23:37,039
time first getting the instance

00:23:35,330 --> 00:23:39,350
variables from the controller is as easy

00:23:37,039 --> 00:23:42,350
as calling the method instance variables

00:23:39,350 --> 00:23:43,879
from inside of the controller we can

00:23:42,350 --> 00:23:46,070
pass those instance variables to the

00:23:43,879 --> 00:23:47,659
view by creating hash of them setting

00:23:46,070 --> 00:23:50,149
the key as the instance variable name

00:23:47,659 --> 00:23:53,119
and the value as the actual value of the

00:23:50,149 --> 00:23:55,399
instance variable when action view

00:23:53,119 --> 00:23:57,529
receives this hash it does the exact

00:23:55,399 --> 00:23:59,539
opposite it takes the key in value and

00:23:57,529 --> 00:24:03,019
makes an instance variable with the key

00:23:59,539 --> 00:24:04,460
name and provided value and there the

00:24:03,019 --> 00:24:07,820
controller has shared its instance

00:24:04,460 --> 00:24:09,230
variables with the view there are

00:24:07,820 --> 00:24:11,629
several methods that have needed to be

00:24:09,230 --> 00:24:14,960
defined in order to work with the action

00:24:11,629 --> 00:24:18,220
view rendering module and all in all the

00:24:14,960 --> 00:24:20,779
rendering code spread across two modules

00:24:18,220 --> 00:24:22,519
when given all these details and method

00:24:20,779 --> 00:24:22,980
definitions I was able to call render to

00:24:22,519 --> 00:24:24,940
BA

00:24:22,980 --> 00:24:27,190
provided by the action view rendering

00:24:24,940 --> 00:24:30,310
module which gave back the rendered HTML

00:24:27,190 --> 00:24:33,400
assist rating and it looked like looks

00:24:30,310 --> 00:24:35,560
something like this we can take a

00:24:33,400 --> 00:24:38,050
glimpse at how action do you render that

00:24:35,560 --> 00:24:41,320
it was really cool action view takes a

00:24:38,050 --> 00:24:42,340
template like this and turns it into a

00:24:41,320 --> 00:24:44,530
unique method

00:24:42,340 --> 00:24:48,310
notice how the method contains the views

00:24:44,530 --> 00:24:50,590
named in it if we zoom in on a part of

00:24:48,310 --> 00:24:53,530
it say the rendering of it of this post

00:24:50,590 --> 00:24:55,330
title it separates the strings or the

00:24:53,530 --> 00:24:59,920
hard-coded parts of the template out

00:24:55,330 --> 00:25:01,960
from the variable or method calls then

00:24:59,920 --> 00:25:05,710
it takes each line and it pins it to a

00:25:01,960 --> 00:25:08,470
buffer at the very end it turns that

00:25:05,710 --> 00:25:11,680
buffer into a string which we can have a

00:25:08,470 --> 00:25:14,050
set as the response body which rendered

00:25:11,680 --> 00:25:17,380
with its CSS looks a little something

00:25:14,050 --> 00:25:20,680
like this and with all of that we have a

00:25:17,380 --> 00:25:24,400
working web controller and all of our

00:25:20,680 --> 00:25:25,990
tests are now passing now it may have

00:25:24,400 --> 00:25:29,080
been ambitious with the name awesome

00:25:25,990 --> 00:25:32,410
controller minimum controller may have

00:25:29,080 --> 00:25:34,060
been a little more fitting or even cool

00:25:32,410 --> 00:25:37,210
idea but don't really use this in

00:25:34,060 --> 00:25:38,560
production controller still the code

00:25:37,210 --> 00:25:41,050
written here touches on the major

00:25:38,560 --> 00:25:42,580
concepts of a controller at the heart of

00:25:41,050 --> 00:25:45,010
a controller are the requests in the

00:25:42,580 --> 00:25:47,950
response and everything the controller

00:25:45,010 --> 00:25:49,540
does is related to those two things and

00:25:47,950 --> 00:25:51,400
while the code does not suffice for

00:25:49,540 --> 00:25:53,470
running in production I hope that for

00:25:51,400 --> 00:25:55,540
you the concepts open some new windows

00:25:53,470 --> 00:25:57,820
of understanding controllers their

00:25:55,540 --> 00:26:00,630
modules and behaviors and the part that

00:25:57,820 --> 00:26:03,640
they play in the rails request lifecycle

00:26:00,630 --> 00:26:06,430
thank you for watching my talk the code

00:26:03,640 --> 00:26:08,680
lives here and github please take a look

00:26:06,430 --> 00:26:10,630
at it and play around with it that's

00:26:08,680 --> 00:26:13,180
what I made it for and the code is what

00:26:10,630 --> 00:26:15,430
helped me get through this talk there

00:26:13,180 --> 00:26:17,860
are several other modules included that

00:26:15,430 --> 00:26:20,860
I was not able to go through and I hope

00:26:17,860 --> 00:26:23,380
you also take a look at those the repo

00:26:20,860 --> 00:26:25,390
also includes Puma rails and rack repos

00:26:23,380 --> 00:26:27,910
in the dependencies folder so that you

00:26:25,390 --> 00:26:30,970
can throw a binding up try on those and

00:26:27,910 --> 00:26:33,580
play around with it and the reef also

00:26:30,970 --> 00:26:35,380
includes the pry by bug Jim I found this

00:26:33,580 --> 00:26:36,580
useful because sometimes I like to drop

00:26:35,380 --> 00:26:40,360
into the code in this

00:26:36,580 --> 00:26:40,960
my wife through it and lastly don't stop

00:26:40,360 --> 00:26:43,840
there

00:26:40,960 --> 00:26:46,240
dig through the controller code in rails

00:26:43,840 --> 00:26:48,549
which lives in the action-packed module

00:26:46,240 --> 00:26:51,820
and I guarantee you'll come out with a

00:26:48,549 --> 00:26:53,590
few new learnings if you found this talk

00:26:51,820 --> 00:26:56,830
helpful please reach out to me and let

00:26:53,590 --> 00:26:58,179
me know I'm on Twitter it has been

00:26:56,830 --> 00:27:00,220
something I've played around with for a

00:26:58,179 --> 00:27:02,890
long time and so I would love to know if

00:27:00,220 --> 00:27:05,010
this talk actually helped you thank you

00:27:02,890 --> 00:27:05,010

YouTube URL: https://www.youtube.com/watch?v=jne5VFK-K_M


