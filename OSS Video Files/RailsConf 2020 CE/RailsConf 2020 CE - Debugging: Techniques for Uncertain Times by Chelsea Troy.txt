Title: RailsConf 2020 CE - Debugging: Techniques for Uncertain Times by Chelsea Troy
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Debugging: Techniques for Uncertain Times by Chelsea Troy

"When we learn to code, we focus on writing features while we understand what the code is doing. When we debug, we don't understand what our code is doing. The less we understand, the less likely it is that our usual programming mindset—the one we use for feature development—can solve the problem.

It turns out, the skills that make us calmer, more effective debuggers also equip us to deal with rapid, substantial changes to our lives.

Whether you're uncertain about what's going on in your code, your life, or both, in this talk you'll learn debugging techniques to get you moving forward safely."

__________

"Chelsea writes code on projects like the Zooniverse Citizen Science Mobile App and the NASA Landsat Image Processing Pipeline. She looks for clients who are saving the planet, advancing basic scientific research, or providing resources to underserved communities. She streams some programming sessions to YouTube, so you can watch her code (and narrate!) in real time. 
Chelsea also teaches Mobile Software Development at the Master’s Program in Computer Science at the University of Chicago.

Chelsea flings barbells around for fun. She drives an electric cafe cruiser named Gigi."
Captions: 
	00:00:09,639 --> 00:00:15,660
this talk is called debugging techniques

00:00:12,099 --> 00:00:19,840
for uncertain times it's by Chelsea Troy

00:00:15,660 --> 00:00:22,960
which is me you can reach me at Chelsea

00:00:19,840 --> 00:00:27,000
at Chelsea Troy calm or you can reach

00:00:22,960 --> 00:00:27,000
out to me on Twitter at hey Chelsea Troy

00:00:30,360 --> 00:00:38,110
before I was a software engineer

00:00:33,250 --> 00:00:40,379
I was almost everything else I coached

00:00:38,110 --> 00:00:42,850
rowing at a high school in Miami I

00:00:40,379 --> 00:00:45,090
blogged for a startup whose business

00:00:42,850 --> 00:00:47,739
model turned out to be illegal I

00:00:45,090 --> 00:00:50,980
attended a bar and performed stand-up

00:00:47,739 --> 00:00:53,829
comedy I danced with fire on haunted

00:00:50,980 --> 00:00:55,899
river boats I edited a quack psychology

00:00:53,829 --> 00:00:58,210
magazine I did open source

00:00:55,899 --> 00:01:01,450
investigations for international crime

00:00:58,210 --> 00:01:06,220
rings all that sounds very fun and

00:01:01,450 --> 00:01:09,369
exciting in hindsight but at the time it

00:01:06,220 --> 00:01:13,000
wasn't a fun journey of self-discovery

00:01:09,369 --> 00:01:17,590
I was compelled to adapt at frequent

00:01:13,000 --> 00:01:19,870
intervals in order to stay afloat I got

00:01:17,590 --> 00:01:22,960
into software engineering for the job

00:01:19,870 --> 00:01:25,900
security not out of passion for

00:01:22,960 --> 00:01:28,240
programming but some of the coping

00:01:25,900 --> 00:01:31,090
mechanisms that I learned from those

00:01:28,240 --> 00:01:35,020
frequent adaptations followed me into

00:01:31,090 --> 00:01:37,299
the programming world it turns out the

00:01:35,020 --> 00:01:40,210
skills that equip us to deal with rapid

00:01:37,299 --> 00:01:44,640
substantial changes to our lives also

00:01:40,210 --> 00:01:48,340
make us calmer more effective debuggers

00:01:44,640 --> 00:01:49,900
debugging in my opinion doesn't get the

00:01:48,340 --> 00:01:52,689
attention it deserves from the

00:01:49,900 --> 00:01:57,009
programming community we imagine it as

00:01:52,689 --> 00:02:00,000
this amorphous skill when we rarely

00:01:57,009 --> 00:02:05,350
teach for which we have no apparent

00:02:00,000 --> 00:02:08,049
praxis or pedagogy instead we teach

00:02:05,350 --> 00:02:11,439
people how to write features how to

00:02:08,049 --> 00:02:14,680
build something new in the software that

00:02:11,439 --> 00:02:19,319
we know when we understand what the code

00:02:14,680 --> 00:02:23,410
is doing when we have certainty I

00:02:19,319 --> 00:02:26,200
suspect you've watched a video or two

00:02:23,410 --> 00:02:27,970
about programming if I didn't know

00:02:26,200 --> 00:02:31,330
better I'd say you're watching one right

00:02:27,970 --> 00:02:34,720
now this one doesn't deal in code

00:02:31,330 --> 00:02:36,730
examples but I suspect you've seen demos

00:02:34,720 --> 00:02:39,220
where speakers share code on their

00:02:36,730 --> 00:02:41,080
screens or demonstrate how to do

00:02:39,220 --> 00:02:45,820
something in a code base during a video

00:02:41,080 --> 00:02:49,210
recording here's the dirty secret and I

00:02:45,820 --> 00:02:52,390
suspect you already know it when we

00:02:49,210 --> 00:02:56,560
sling demos onstage or upload them to

00:02:52,390 --> 00:02:59,650
YouTube that's definitely not the first

00:02:56,560 --> 00:03:01,750
time we've written that code we've

00:02:59,650 --> 00:03:05,020
probably written a feature like that one

00:03:01,750 --> 00:03:09,580
in production before then we modified it

00:03:05,020 --> 00:03:15,790
to make it fit in a talk or a video then

00:03:09,580 --> 00:03:18,070
we practice over and over and over we

00:03:15,790 --> 00:03:21,990
need to minimize all mistakes and error

00:03:18,070 --> 00:03:27,280
messages we learn to avoid every rake

00:03:21,990 --> 00:03:30,100
just for that code and sometimes in

00:03:27,280 --> 00:03:33,670
recording we still mess it up we pause

00:03:30,100 --> 00:03:41,530
the recording we back it up and we do it

00:03:33,670 --> 00:03:44,830
again until it's perfect we know what

00:03:41,530 --> 00:03:45,550
we're writing and that's what gets

00:03:44,830 --> 00:03:49,150
muddled

00:03:45,550 --> 00:03:51,490
in programming education but that's not

00:03:49,150 --> 00:03:56,140
the case when we're writing code on the

00:03:51,490 --> 00:03:58,300
job in fact many of us spend most of our

00:03:56,140 --> 00:04:01,030
time on the job writing something that's

00:03:58,300 --> 00:04:04,930
a bit different from anything we've done

00:04:01,030 --> 00:04:07,390
before if we had done this exact thing

00:04:04,930 --> 00:04:09,220
before our clients would be using the

00:04:07,390 --> 00:04:11,950
off-the-shelf solution that we wrote the

00:04:09,220 --> 00:04:15,310
first time not paying our exorbitant

00:04:11,950 --> 00:04:19,330
rates to have it done custom we spend

00:04:15,310 --> 00:04:23,910
the lion's share of our time outside the

00:04:19,330 --> 00:04:28,540
comfort zone of code we understand

00:04:23,910 --> 00:04:31,090
debugging feels hard in part because we

00:04:28,540 --> 00:04:34,930
take skills that we learn from feature

00:04:31,090 --> 00:04:38,100
building in the context of certainty

00:04:34,930 --> 00:04:42,250
and attempt to apply them in a new

00:04:38,100 --> 00:04:45,250
context a context where we don't

00:04:42,250 --> 00:04:49,210
understand what our code is doing where

00:04:45,250 --> 00:04:54,539
we are surrounded by uncertainty and

00:04:49,210 --> 00:05:00,190
that is the first thing we need to debug

00:04:54,539 --> 00:05:03,699
effectively we need to acknowledge that

00:05:00,190 --> 00:05:09,070
we do not already understand the

00:05:03,699 --> 00:05:12,789
behavior of our code this sounds like an

00:05:09,070 --> 00:05:17,139
obvious detail but we often get it wrong

00:05:12,789 --> 00:05:21,669
and it adds stress that makes it harder

00:05:17,139 --> 00:05:24,190
for us to find the problem because we've

00:05:21,669 --> 00:05:26,680
only seen models where the programmer

00:05:24,190 --> 00:05:29,500
knew what was going on we think we're

00:05:26,680 --> 00:05:33,400
supposed to do that we're supposed to

00:05:29,500 --> 00:05:35,849
know what's going on and we don't we

00:05:33,400 --> 00:05:40,330
better hurry up and figure it out but

00:05:35,849 --> 00:05:45,720
speed is precisely the enemy with

00:05:40,330 --> 00:05:48,340
insidious bugs we'll get to why later I

00:05:45,720 --> 00:05:50,020
struggled with this same thing in my

00:05:48,340 --> 00:05:52,690
decade of odd jobs

00:05:50,020 --> 00:05:55,720
I felt inadequate unfit for adulthood

00:05:52,690 --> 00:05:58,330
because I didn't know how to do my taxes

00:05:55,720 --> 00:06:00,940
or find my next gig or say the right

00:05:58,330 --> 00:06:04,720
thing to my family or make my life

00:06:00,940 --> 00:06:09,039
meaningful and how would I have known

00:06:04,720 --> 00:06:11,770
those things but it topped off all my

00:06:09,039 --> 00:06:14,830
personal struggles with this generous

00:06:11,770 --> 00:06:18,190
helping of insecurity and guilt and

00:06:14,830 --> 00:06:23,139
inadequacy that drove me to run away

00:06:18,190 --> 00:06:25,900
from issues rather than address them but

00:06:23,139 --> 00:06:29,440
failing enough times over a long enough

00:06:25,900 --> 00:06:35,169
period made me realize not understanding

00:06:29,440 --> 00:06:38,259
is normal or at least it's my normal so

00:06:35,169 --> 00:06:41,680
I learned to notice and acknowledge my

00:06:38,259 --> 00:06:45,090
insecurities and not let it dictate my

00:06:41,680 --> 00:06:48,159
actions when my feelings of inadequacy

00:06:45,090 --> 00:06:53,339
screeched at me to speed up

00:06:48,159 --> 00:06:58,869
that's when I most needed to slow down

00:06:53,339 --> 00:07:03,759
to figure out why exactly I wasn't

00:06:58,869 --> 00:07:07,499
getting what I expected I needed to get

00:07:03,759 --> 00:07:10,989
out of progress mode and into

00:07:07,499 --> 00:07:13,539
investigation mode and this is the

00:07:10,989 --> 00:07:16,929
second thing we need to debug

00:07:13,539 --> 00:07:20,740
effectively we need to switch modes when

00:07:16,929 --> 00:07:23,399
we debug from focusing on progress to

00:07:20,740 --> 00:07:26,949
focusing on investigation

00:07:23,399 --> 00:07:32,080
the most common Z bugging strategy I see

00:07:26,949 --> 00:07:35,139
look something like this where we try

00:07:32,080 --> 00:07:40,829
our best idea first and if that doesn't

00:07:35,139 --> 00:07:44,860
work our second best idea and so forth I

00:07:40,829 --> 00:07:46,929
call this the standard strategy and if

00:07:44,860 --> 00:07:48,879
we understand the behavior of our code

00:07:46,929 --> 00:07:51,849
then this is often the quickest way to

00:07:48,879 --> 00:07:56,469
diagnose what's going on so it is a

00:07:51,849 --> 00:07:59,740
useful strategy the problem arises when

00:07:56,469 --> 00:08:03,159
we don't understand the behavior of our

00:07:59,740 --> 00:08:07,809
code and we keep repeating this strategy

00:08:03,159 --> 00:08:10,269
as if we do we hurt our own cause by

00:08:07,809 --> 00:08:14,199
operating as if we understand code when

00:08:10,269 --> 00:08:16,569
we don't in fact the less we understand

00:08:14,199 --> 00:08:18,429
the behavior of our code the lower the

00:08:16,569 --> 00:08:20,409
correlation between the things we think

00:08:18,429 --> 00:08:23,289
are causing the bug and the thing that's

00:08:20,409 --> 00:08:29,619
really causing the bug and the weaker

00:08:23,289 --> 00:08:33,849
this strategy becomes so instead we get

00:08:29,619 --> 00:08:36,159
this where we circle among ideas that

00:08:33,849 --> 00:08:39,219
don't work because we're not sure what's

00:08:36,159 --> 00:08:46,209
happening but we don't know what else to

00:08:39,219 --> 00:08:48,639
do once we have established that we do

00:08:46,209 --> 00:08:53,079
not understand the behavior of our code

00:08:48,639 --> 00:08:56,439
we need to stop focusing on fixing the

00:08:53,079 --> 00:08:59,640
problem and instead ask questions that

00:08:56,439 --> 00:09:04,950
help us find the problem and

00:08:59,640 --> 00:09:09,800
by the problem I mean specific invalid

00:09:04,950 --> 00:09:14,960
assumptions we're making about this code

00:09:09,800 --> 00:09:19,560
the precise place that is where we are

00:09:14,960 --> 00:09:24,000
wrong let me show you a couple of

00:09:19,560 --> 00:09:26,090
examples of how we might do that we

00:09:24,000 --> 00:09:29,820
could use a binary search strategy in

00:09:26,090 --> 00:09:32,520
this strategy we assume the code follows

00:09:29,820 --> 00:09:34,560
a single threaded linear flow from the

00:09:32,520 --> 00:09:37,500
beginning of execution where we run the

00:09:34,560 --> 00:09:41,910
code to the end of execution or where

00:09:37,500 --> 00:09:44,760
the bug happens we choose a spot more or

00:09:41,910 --> 00:09:47,070
less in the middle of that and run tests

00:09:44,760 --> 00:09:50,520
on the pieces that would contribute to

00:09:47,070 --> 00:09:52,800
the code flow now by test I don't

00:09:50,520 --> 00:09:55,440
necessarily mean an automated test

00:09:52,800 --> 00:10:01,020
though that's one instrument we can use

00:09:55,440 --> 00:10:04,110
to do this by test in this case I mean

00:10:01,020 --> 00:10:07,230
the process of getting feedback as fast

00:10:04,110 --> 00:10:08,970
as possible on whether our assumptions

00:10:07,230 --> 00:10:09,510
about the state of the system at this

00:10:08,970 --> 00:10:14,340
point

00:10:09,510 --> 00:10:18,390
match the values in the code because

00:10:14,340 --> 00:10:21,720
it's not just that insidious bugs come

00:10:18,390 --> 00:10:25,250
from inaccurate assumptions it's deeper

00:10:21,720 --> 00:10:28,590
than that insidiousness as a

00:10:25,250 --> 00:10:33,210
characteristic of bugs comes from

00:10:28,590 --> 00:10:36,000
inaccurate assumptions we're looking in

00:10:33,210 --> 00:10:39,750
the code when the problem is rooted in

00:10:36,000 --> 00:10:42,480
our understanding it takes an awfully

00:10:39,750 --> 00:10:47,670
long time to find something when we're

00:10:42,480 --> 00:10:49,740
looking in the wrong place it's hard for

00:10:47,670 --> 00:10:52,620
us to detect when our assumptions about

00:10:49,740 --> 00:10:54,360
a system are wrong because it's hard for

00:10:52,620 --> 00:10:58,230
us to detect when we're making

00:10:54,360 --> 00:11:00,780
assumptions at all assumptions by

00:10:58,230 --> 00:11:03,600
definition described things we're taking

00:11:00,780 --> 00:11:05,960
for granted they include all the details

00:11:03,600 --> 00:11:09,330
into which we are not putting thought

00:11:05,960 --> 00:11:11,580
we're sure that that variable has to be

00:11:09,330 --> 00:11:13,320
present at this point I mean the way

00:11:11,580 --> 00:11:19,230
this whole thing is built it has to

00:11:13,320 --> 00:11:21,269
have we checked well no never thought to

00:11:19,230 --> 00:11:27,709
do that never thought of this is an

00:11:21,269 --> 00:11:30,360
assumption it's just the truth but is it

00:11:27,709 --> 00:11:34,380
this is where fast feedback becomes

00:11:30,360 --> 00:11:37,259
useful we can stop create a list of our

00:11:34,380 --> 00:11:41,399
assumptions and then use the instruments

00:11:37,259 --> 00:11:46,589
at our disposal to test them we have a

00:11:41,399 --> 00:11:48,810
number automatically us to run a series

00:11:46,589 --> 00:11:51,389
of small feedback loops simultaneously

00:11:48,810 --> 00:11:54,329
we can check lots of paths through our

00:11:51,389 --> 00:11:56,790
code quickly and all at once tests

00:11:54,329 --> 00:11:59,430
aren't inherently a more moral way to

00:11:56,790 --> 00:12:02,160
develop software or some baloney like

00:11:59,430 --> 00:12:04,139
that they just do really well on the key

00:12:02,160 --> 00:12:08,310
metric that matters to us in quality

00:12:04,139 --> 00:12:09,829
control but tight feedback loop manual

00:12:08,310 --> 00:12:12,300
run throughs are another instrument

00:12:09,829 --> 00:12:14,759
developers start doing this almost as

00:12:12,300 --> 00:12:16,380
soon as they start to write code and we

00:12:14,759 --> 00:12:20,579
continue to do it when we want to check

00:12:16,380 --> 00:12:22,680
things out breakpoints we can stop the

00:12:20,579 --> 00:12:24,240
code at a specific line and open a

00:12:22,680 --> 00:12:27,000
console to look at the variables in

00:12:24,240 --> 00:12:28,680
scope at that point we can even run

00:12:27,000 --> 00:12:32,310
methods in scope from the command line

00:12:28,680 --> 00:12:34,440
and see what happens print statements if

00:12:32,310 --> 00:12:36,300
breakpoints aren't working or if the

00:12:34,440 --> 00:12:38,730
code is multi-threaded or asynchronous

00:12:36,300 --> 00:12:40,980
in such a way that we don't know whether

00:12:38,730 --> 00:12:43,290
the buggy code will run before or after

00:12:40,980 --> 00:12:48,029
our breakpoint print statements come in

00:12:43,290 --> 00:12:50,069
really handy logging for deploy code or

00:12:48,029 --> 00:12:52,649
code where we can't access standard out

00:12:50,069 --> 00:12:55,380
we might need more robust logging

00:12:52,649 --> 00:12:57,480
instead a bonus here is that a more

00:12:55,380 --> 00:13:00,000
permanent logging framework within our

00:12:57,480 --> 00:13:03,810
code can help us diagnose issues after

00:13:00,000 --> 00:13:06,449
the fact or after deploying and changing

00:13:03,810 --> 00:13:09,149
small things if I think I know how a

00:13:06,449 --> 00:13:11,579
variable works I can change its value a

00:13:09,149 --> 00:13:14,509
little bit and predict how the program

00:13:11,579 --> 00:13:17,399
should react and then see if it matches

00:13:14,509 --> 00:13:19,290
this helps to establish my understanding

00:13:17,399 --> 00:13:22,319
of what's in scope and which code is

00:13:19,290 --> 00:13:24,589
affecting what now here's where

00:13:22,319 --> 00:13:26,910
assumption detection comes into play

00:13:24,589 --> 00:13:28,560
we're likely to thoughtless

00:13:26,910 --> 00:13:31,530
we assume that we know things at this

00:13:28,560 --> 00:13:34,310
point but variable X should be this that

00:13:31,530 --> 00:13:37,560
that class should be it's an XI ated etc

00:13:34,310 --> 00:13:42,050
this is where insidious bugs like to

00:13:37,560 --> 00:13:44,940
hide in the stuff we're not checking and

00:13:42,050 --> 00:13:49,230
this is the third thing we need to debug

00:13:44,940 --> 00:13:52,140
effectively the ability to identify what

00:13:49,230 --> 00:13:57,000
is the truth and what is our perspective

00:13:52,140 --> 00:13:59,940
I cannot tell you how many things in

00:13:57,000 --> 00:14:03,930
those early years of my independent life

00:13:59,940 --> 00:14:08,690
I knew beyond a shadow of a doubt to be

00:14:03,930 --> 00:14:12,140
true and maybe just maybe in a

00:14:08,690 --> 00:14:16,380
vanishingly small fraction of cases I

00:14:12,140 --> 00:14:19,140
was half right but in all the other

00:14:16,380 --> 00:14:21,630
cases learning to differentiate between

00:14:19,140 --> 00:14:25,560
my views and empirical evidence and

00:14:21,630 --> 00:14:29,660
learning to reconsider my perspectives

00:14:25,560 --> 00:14:33,560
has been my key to leveling up

00:14:29,660 --> 00:14:36,990
everywhere in my life

00:14:33,560 --> 00:14:39,540
so let's whip out our programming

00:14:36,990 --> 00:14:42,210
journals and try an exercise that will

00:14:39,540 --> 00:14:46,410
help us learn to detect and question our

00:14:42,210 --> 00:14:48,480
assumptions at each step represented by

00:14:46,410 --> 00:14:50,970
a rounded box in one of our debugging

00:14:48,480 --> 00:14:53,850
flowcharts we'll write down what step of

00:14:50,970 --> 00:14:56,760
the process we're checking and then we

00:14:53,850 --> 00:15:02,310
make a list for assumptions and we make

00:14:56,760 --> 00:15:04,440
a list for checks in this example the

00:15:02,310 --> 00:15:07,350
given section attempts to explicitly

00:15:04,440 --> 00:15:12,030
state our assumptions the things we are

00:15:07,350 --> 00:15:14,730
not checking the checking section lists

00:15:12,030 --> 00:15:16,590
the things we are checking and we can

00:15:14,730 --> 00:15:18,180
mark each one with a check mark or an X

00:15:16,590 --> 00:15:23,540
depending on whether they produce what

00:15:18,180 --> 00:15:27,090
we expect this exercise seems tedious

00:15:23,540 --> 00:15:29,520
right up until we've checked every

00:15:27,090 --> 00:15:34,020
possible place in the code and all our

00:15:29,520 --> 00:15:38,610
checks are working but the bug still

00:15:34,020 --> 00:15:39,610
happens at that point it's time to go

00:15:38,610 --> 00:15:45,850
back

00:15:39,610 --> 00:15:49,720
assess our Givens one-by-one I recommend

00:15:45,850 --> 00:15:52,300
keeping these notes how often do bugs

00:15:49,720 --> 00:15:56,769
thwart us for long periods of time and

00:15:52,300 --> 00:15:59,800
end up hiding in our assumptions what

00:15:56,769 --> 00:16:02,200
can we learn from this about spotting

00:15:59,800 --> 00:16:04,089
our assumptions and which of our

00:16:02,200 --> 00:16:08,560
assumptions run the highest risk of

00:16:04,089 --> 00:16:10,779
being incorrect at each check whether we

00:16:08,560 --> 00:16:12,310
find something amiss or not with a

00:16:10,779 --> 00:16:15,070
binary search we should reduce the

00:16:12,310 --> 00:16:17,410
problem space by half and hopefully that

00:16:15,070 --> 00:16:22,540
way find the case of our insidious bug

00:16:17,410 --> 00:16:25,209
in relatively few steps but what we are

00:16:22,540 --> 00:16:27,670
establishing with notes like these is a

00:16:25,209 --> 00:16:32,529
pattern of what we think and where it

00:16:27,670 --> 00:16:34,660
lines up with a shared reality I should

00:16:32,529 --> 00:16:37,240
mention there are cases where binary

00:16:34,660 --> 00:16:39,070
search won't work namely cases where the

00:16:37,240 --> 00:16:40,930
code path doesn't follow a single

00:16:39,070 --> 00:16:44,260
threaded linear flow from beginning of

00:16:40,930 --> 00:16:46,269
execution to end and in those cases we

00:16:44,260 --> 00:16:50,110
may need to trace the entire code path

00:16:46,269 --> 00:16:54,070
from beginning to end ourselves but the

00:16:50,110 --> 00:16:56,800
concept remains we explicitly list our

00:16:54,070 --> 00:16:59,620
assumptions and checks to investigate

00:16:56,800 --> 00:17:01,779
our code like an expert witness to

00:16:59,620 --> 00:17:06,640
gather answers that lead us to the

00:17:01,779 --> 00:17:09,130
defect we are training our brains to

00:17:06,640 --> 00:17:12,160
spot our own assumptions we know it's

00:17:09,130 --> 00:17:15,400
working if our given list starts getting

00:17:12,160 --> 00:17:17,470
longer we especially remember to include

00:17:15,400 --> 00:17:19,980
Givens that weren't what we thought when

00:17:17,470 --> 00:17:23,500
we hunted down previous bugs it is

00:17:19,980 --> 00:17:26,319
specifically this intuition that we are

00:17:23,500 --> 00:17:30,190
building when we get better at debugging

00:17:26,319 --> 00:17:32,020
through practice however because we do

00:17:30,190 --> 00:17:33,940
not deliberately practice it nor

00:17:32,020 --> 00:17:36,460
generalize the skill to other languages

00:17:33,940 --> 00:17:38,200
and frameworks our disorganized approach

00:17:36,460 --> 00:17:40,390
to learning debugging from experience

00:17:38,200 --> 00:17:43,270
tends to limit our skills to the stacks

00:17:40,390 --> 00:17:46,390
we have written by identifying common

00:17:43,270 --> 00:17:48,510
patterns instead in the assumptions we

00:17:46,390 --> 00:17:52,510
tend to make the end up being wrong and

00:17:48,510 --> 00:17:53,290
causing bugs we can improve our language

00:17:52,510 --> 00:17:57,400
agnostic

00:17:53,290 --> 00:18:01,740
stick debugging intuition this is the

00:17:57,400 --> 00:18:04,960
final thing we need to debug effectively

00:18:01,740 --> 00:18:11,350
the ability to see how the things we're

00:18:04,960 --> 00:18:15,550
doing now serve longer-term goals I am

00:18:11,350 --> 00:18:19,180
an expert at stressing myself out about

00:18:15,550 --> 00:18:19,870
things I started young on a trip to

00:18:19,180 --> 00:18:21,790
Disney World

00:18:19,870 --> 00:18:24,850
my mom remembers changing my diaper on a

00:18:21,790 --> 00:18:28,540
bench as I cried careful careful

00:18:24,850 --> 00:18:30,190
afraid she'd let me roll off I continued

00:18:28,540 --> 00:18:31,930
my winning streak of stress through high

00:18:30,190 --> 00:18:33,670
school where I decided that college

00:18:31,930 --> 00:18:36,100
acceptances would determine my fate in

00:18:33,670 --> 00:18:37,840
life and afterward as I continued to

00:18:36,100 --> 00:18:39,610
sensationalize the results of tests

00:18:37,840 --> 00:18:43,600
sports competitions and job interviews

00:18:39,610 --> 00:18:46,600
as make-or-break moments I have since

00:18:43,600 --> 00:18:49,270
learned to see no particular moments as

00:18:46,600 --> 00:18:53,110
make-or-break I have taken the power

00:18:49,270 --> 00:18:55,900
back from my evaluators if I go to an

00:18:53,110 --> 00:18:59,770
interview now my goals are to meet

00:18:55,900 --> 00:19:02,200
someone and to learn something whether

00:18:59,770 --> 00:19:03,940
or not I get the job I came out with

00:19:02,200 --> 00:19:07,140
more understanding than I went in with

00:19:03,940 --> 00:19:09,970
and in that sense I have succeeded

00:19:07,140 --> 00:19:12,250
everything is in service to something

00:19:09,970 --> 00:19:17,710
else that's coming so that even if I

00:19:12,250 --> 00:19:21,880
fail I have taken a step forward in that

00:19:17,710 --> 00:19:26,010
same way every insidious bug presents a

00:19:21,880 --> 00:19:30,060
golden opportunity to teach us something

00:19:26,010 --> 00:19:33,550
maybe we hate what we learn that's okay

00:19:30,060 --> 00:19:36,700
we know it now and we can use it to save

00:19:33,550 --> 00:19:38,770
trouble for someone else later or maybe

00:19:36,700 --> 00:19:41,650
we learn something deep and insightful

00:19:38,770 --> 00:19:45,130
that we can carry with us to other code

00:19:41,650 --> 00:19:46,930
bases to other workplaces or maybe even

00:19:45,130 --> 00:19:51,220
home to our hobbies and our loved ones

00:19:46,930 --> 00:19:54,970
but either way we get to hone our skills

00:19:51,220 --> 00:19:58,990
at conversing with code and with

00:19:54,970 --> 00:20:01,060
navigating uncertainty in our lives we

00:19:58,990 --> 00:20:05,700
can practice acknowledging what we don't

00:20:01,060 --> 00:20:06,909
understand learning to slow down

00:20:05,700 --> 00:20:09,809
differentiating

00:20:06,909 --> 00:20:14,759
our views from a shared reality and

00:20:09,809 --> 00:20:17,379
finding ways to keep moving forward and

00:20:14,759 --> 00:20:22,139
spending time on those skills is a

00:20:17,379 --> 00:20:22,139

YouTube URL: https://www.youtube.com/watch?v=XqWJ5nKrZpY


